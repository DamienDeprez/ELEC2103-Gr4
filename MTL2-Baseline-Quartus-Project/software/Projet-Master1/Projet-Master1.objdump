
Projet-Master1.elf:     file format elf32-littlenios2
Projet-Master1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00022914 memsz 0x00022914 flags r-x
    LOAD off    0x00023934 vaddr 0x02022934 paddr 0x020245c4 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00026254 vaddr 0x02026254 paddr 0x02026254 align 2**12
         filesz 0x00000000 memsz 0x0000b440 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00021b8c  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b60  02021dd4  02021dd4  00022dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  02022934  020245c4  00023934  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b440  02026254  02026254  00026254  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  000255c4  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02031694  02031694  000255c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000255c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001320  00000000  00000000  000255e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ec3e  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b114  00000000  00000000  00055546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fb65  00000000  00000000  0006065a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003b30  00000000  00000000  000701c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e1b  00000000  00000000  00073cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  00079b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00082b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014a8  00000000  00000000  00082ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008986e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00089874  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00089877  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00089878  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00089879  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008987d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00089881  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00089885  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008988e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00089897  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000898a0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  000898a9  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  000898dd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005d33a  00000000  00000000  0008d65c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
02021dd4 l    d  .rodata	00000000 .rodata
02022934 l    d  .rwdata	00000000 .rwdata
02026254 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02031694 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Projet-Master1_bsp//obj/HAL/src/crt0.o
02000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sf_cos.c
0202444c l     O .rwdata	00000004 one
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 e_sqrt.c
02024450 l     O .rwdata	00000008 one
02024458 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 ef_atan2.c
02024460 l     O .rwdata	00000004 tiny
02024464 l     O .rwdata	00000004 zero
02024468 l     O .rwdata	00000004 pi_o_4
0202446c l     O .rwdata	00000004 pi_o_2
02024470 l     O .rwdata	00000004 pi
02024474 l     O .rwdata	00000004 pi_lo
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
0202206c l     O .rodata	00000318 two_over_pi
02022384 l     O .rodata	00000080 npio2_hw
02024478 l     O .rwdata	00000004 zero
0202447c l     O .rwdata	00000004 half
02024480 l     O .rwdata	00000004 two8
02024484 l     O .rwdata	00000004 invpio2
02024488 l     O .rwdata	00000004 pio2_1
0202448c l     O .rwdata	00000004 pio2_1t
02024490 l     O .rwdata	00000004 pio2_2
02024494 l     O .rwdata	00000004 pio2_2t
02024498 l     O .rwdata	00000004 pio2_3
0202449c l     O .rwdata	00000004 pio2_3t
00000000 l    df *ABS*	00000000 kf_cos.c
020244a0 l     O .rwdata	00000004 one
020244a4 l     O .rwdata	00000004 C1
020244a8 l     O .rwdata	00000004 C2
020244ac l     O .rwdata	00000004 C3
020244b0 l     O .rwdata	00000004 C4
020244b4 l     O .rwdata	00000004 C5
020244b8 l     O .rwdata	00000004 C6
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
02022404 l     O .rodata	0000000c init_jk
02022410 l     O .rodata	0000002c PIo2
020244bc l     O .rwdata	00000004 zero
020244c0 l     O .rwdata	00000004 one
020244c4 l     O .rwdata	00000004 two8
020244c8 l     O .rwdata	00000004 twon8
00000000 l    df *ABS*	00000000 kf_sin.c
020244cc l     O .rwdata	00000004 half
020244d0 l     O .rwdata	00000004 S1
020244d4 l     O .rwdata	00000004 S2
020244d8 l     O .rwdata	00000004 S3
020244dc l     O .rwdata	00000004 S4
020244e0 l     O .rwdata	00000004 S5
020244e4 l     O .rwdata	00000004 S6
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 sf_atan.c
0202243c l     O .rodata	00000010 atanhi
0202244c l     O .rodata	00000010 atanlo
0202245c l     O .rodata	0000002c aT
020244ec l     O .rwdata	00000004 one
020244f0 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
020244f4 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_scalbn.c
020244f8 l     O .rwdata	00000004 two25
020244fc l     O .rwdata	00000004 twom25
02024500 l     O .rwdata	00000004 huge
02024504 l     O .rwdata	00000004 tiny
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02022964 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
020097ec l     F .text	000000f0 __sbprintf
0200b9fc l     F .text	0000020c cvt
0200bc08 l     F .text	00000140 exponent
020225ee l     O .rodata	00000010 blanks.4403
020225fe l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200bee8 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200e1f4 l     F .text	000000f4 std
0202629c l     O .bss	00000004 __sfp_lock
020262a0 l     O .bss	00000004 __sinit_lock
0200e6f0 l     F .text	00000024 __fp_lock
0200e714 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
02022d88 l     O .rwdata	00000038 lconv
02022dc0 l     O .rwdata	00000020 lc_ctype_charset
02022de0 l     O .rwdata	00000020 lc_message_charset
020262b0 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200fa44 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02022750 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
020138f0 l     F .text	000000f0 __sbprintf
020227a6 l     O .rodata	00000010 blanks.4348
020227b6 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
020165fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02016708 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02016734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02016820 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02016900 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020169ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
02016bb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02024538 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02016e04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0202453c l     O .rwdata	00000004 lockid
020262d4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
02024540 l     O .rwdata	00000004 lockid
020262dc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02018834 l     F .text	00000048 OS_InitMisc
0201887c l     F .text	0000006c OS_InitRdyList
020189e8 l     F .text	000000e4 OS_InitTCBList
02018754 l     F .text	000000e0 OS_InitEventList
020188e8 l     F .text	00000080 OS_InitTaskIdle
02018968 l     F .text	00000080 OS_InitTaskStat
02018c58 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201a968 l     F .text	000000f4 OS_FlagTaskRdy
0201a728 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201f4d4 l     F .text	00000034 alt_dev_reg
020233b0 l     O .rwdata	0000106c jtag_uart
0202441c l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201f84c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0201faf4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020202d0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020208e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02020b48 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02020e08 l     F .text	0000003c alt_get_errno
02020e44 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02026344 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
02026340 g     O .bss	00000004 alt_instruction_exception_handler
020124fc g     F .text	000000b0 _mprec_log10
0202458e g     O .rwdata	00000002 OSTaskNameSize
0201267c g     F .text	00000134 __any_on
020153d8 g     F .text	00000060 _isatty_r
02022728 g     O .rodata	00000028 __mprec_tinytens
02016afc g     F .text	000000bc alt_main
02026258 g     O .bss	00000004 MailBox9
020095a8 g     F .text	00000118 _puts_r
02031594 g     O .bss	00000100 alt_irq
0202625c g     O .bss	00000004 MailBox6
02015438 g     F .text	00000070 _lseek_r
0201bc50 g     F .text	000000cc OS_MemInit
02003c2c g     F .text	00000174 sqrt
020245c4 g       *ABS*	00000000 __flash_rwdata_start
0201f474 g     F .text	00000060 OSTimeSet
02007be8 g     F .text	00000088 .hidden __eqdf2
020174a8 g     F .text	00000610 OSEventPendMulti
02031694 g       *ABS*	00000000 __alt_heap_start
02021450 g     F .text	00000024 OSTaskCreateHook
02026370 g     O .bss	00002000 task1_stk
02009540 g     F .text	00000068 printf
02024566 g     O .rwdata	00000002 OSMboxEn
02017b10 g     F .text	0000004c OSIntEnter
020156c0 g     F .text	000000d4 _wcrtomb_r
02013580 g     F .text	000000a0 __sseek
0200e598 g     F .text	000000d8 __sinit
02015518 g     F .text	00000168 __swbuf_r
02024576 g     O .rwdata	00000002 OSQEn
0200f674 g     F .text	00000084 _setlocale_r
0200e2e8 g     F .text	000000a4 __sfmoreglue
0201717c g     F .text	000000cc __malloc_unlock
020214b8 g     F .text	00000020 OSTaskStatHook
020262e4 g     O .bss	00000001 OSLockNesting
020245b4 g     O .rwdata	00000002 OSDataSize
020262e5 g     O .bss	00000001 OSRunning
02010b30 g     F .text	00000208 memmove
020214f8 g     F .text	00000020 OSInitHookBegin
020245ac g     O .rwdata	00000002 OSTmrSize
0200e564 g     F .text	00000034 _cleanup
02024448 g     O .rwdata	00000004 accel_name
02010d38 g     F .text	00000130 _Balloc
02026260 g     O .bss	00000004 MailBox13
020262e8 g     O .bss	00000004 OSIdleCtr
02007c70 g     F .text	000000dc .hidden __gtdf2
02021200 g     F .text	00000024 altera_nios2_gen2_irq_init
020212d0 g       .text	00000000 OSStartTsk
02009170 g     F .text	00000020 __errno
02018f88 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
0200483c g     F .text	00000674 __ieee754_rem_pio2f
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0202050c g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
020245b2 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
02024552 g     O .rwdata	00000002 OSEventSize
020262ec g     O .bss	00000001 OSPrioHighRdy
02015370 g     F .text	00000068 _fstat_r
02021474 g     F .text	00000024 OSTaskDelHook
020262c0 g     O .bss	00000004 errno
0201349c g     F .text	00000030 __seofread
020212b0 g       .text	00000000 OSStartHighRdy
0201df1c g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0201a270 g     F .text	00000060 OSFlagPendGetFlagsRdy
02024592 g     O .rwdata	00000002 OSTaskStatStkSize
020193ec g     F .text	00000308 OSFlagAccept
0201c288 g     F .text	000000b8 OSQFlush
0201bd1c g     F .text	00000140 OSQAccept
020262cc g     O .bss	00000004 alt_argv
0202c448 g       *ABS*	00000000 _gp
0201dd70 g     F .text	000001ac OSTaskCreate
02003704 g     F .text	000000f4 damping
0201d880 g     F .text	000004f0 OSTaskChangePrio
020262e0 g     O .bss	00000004 alt_heapsem
02002b90 g     F .text	000000cc task4
0201925c g     F .text	00000190 OSDebugInit
0201e100 g     F .text	00000344 OSTaskDel
02023230 g     O .rwdata	00000180 alt_fd_list
0202e370 g     O .bss	00000370 OSFlagTbl
02018534 g     F .text	000000b8 OS_EventTaskRemove
02020a84 g     F .text	00000090 alt_find_dev
02009190 g     F .text	00000188 memcpy
0202457c g     O .rwdata	00000002 OSRdyTblSize
02026264 g     O .bss	00000004 MailBox3
0200e520 g     F .text	00000044 _cleanup_r
02016478 g     F .text	000000dc .hidden __floatsidf
02020c0c g     F .text	0000007c alt_io_redirect
02007d4c g     F .text	000000f4 .hidden __ltdf2
02021dd4 g       *ABS*	00000000 __DTOR_END__
020096c0 g     F .text	00000038 puts
020217f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02017248 g     F .text	00000120 OSEventNameGet
02024560 g     O .rwdata	00000002 OSFlagMax
020038a4 g     F .text	00000104 __fpclassifyd
020123e0 g     F .text	0000011c __ratio
02017b5c g     F .text	000000f8 OSIntExit
020139e0 g     F .text	00000050 __vfiprintf_internal
0202459a g     O .rwdata	00000002 OSTCBSize
020262ed g     O .bss	00000001 OSPrioCur
0201fd50 g     F .text	000002bc altera_avalon_jtag_uart_read
020094dc g     F .text	00000064 _printf_r
02006998 g     F .text	00000064 .hidden __udivsi3
0201685c g     F .text	000000a4 isatty
02024580 g     O .rwdata	00000002 OSStkWidth
02022638 g     O .rodata	000000c8 __mprec_tens
02024574 g     O .rwdata	00000002 OSPtrSize
0200f6f8 g     F .text	00000024 __locale_charset
02024554 g     O .rwdata	00000002 OSEventTblSize
02021224 g       .text	00000000 OSCtxSw
02021760 g     F .text	00000090 alt_icache_flush
020262b4 g     O .bss	00000004 __malloc_top_pad
020262f0 g     O .bss	00000004 OSTCBList
020262c4 g     O .bss	00000004 alt_fd_list_lock
02024510 g     O .rwdata	00000004 __mb_cur_max
0200f780 g     F .text	00000028 _localeconv_r
02011380 g     F .text	00000058 __i2b
0200eee4 g     F .text	000005dc __sfvwrite_r
0202e6e0 g     O .bss	00000c30 OSMemTbl
020262f4 g     O .bss	00000001 OSTickStepState
020133a0 g     F .text	00000060 _sbrk_r
02024578 g     O .rwdata	00000002 OSQMax
0202f310 g     O .bss	00000800 OSTaskStatStk
0201b88c g     F .text	000000f0 OSMemNameGet
02006458 g     F .text	00000058 fabsf
02028370 g     O .bss	00002000 task4_stk
02024558 g     O .rwdata	00000002 OSFlagEn
020154a8 g     F .text	00000070 _read_r
0202459e g     O .rwdata	00000002 OSTimeTickHookEn
0201c738 g     F .text	00000168 OSQPost
0201aa5c g     F .text	000000a4 OS_FlagUnlink
02024530 g     O .rwdata	00000004 alt_max_fd
02018b20 g     F .text	00000068 OS_MemCopy
02018b88 g     F .text	000000d0 OS_Sched
02014f28 g     F .text	0000012c _fclose_r
0201b79c g     F .text	000000f0 OSMemGet
0201b4b8 g     F .text	00000110 OSMboxQuery
0201e72c g     F .text	000001b4 OSTaskNameSet
0200e1a0 g     F .text	00000054 fflush
020262b8 g     O .bss	00000004 __malloc_max_sbrked_mem
020262f8 g     O .bss	00000004 OSCtxSwCtr
020214d8 g     F .text	00000020 OSTimeTickHook
02020c88 g     F .text	00000180 alt_irq_register
02024562 g     O .rwdata	00000002 OSFlagNameSize
02026268 g     O .bss	00000004 AnimationFlagGrp
02008e54 g     F .text	00000110 .hidden __extendsfdf2
020185ec g     F .text	00000100 OS_EventTaskRemoveMulti
02006a54 g     F .text	000008ac .hidden __adddf3
020183e4 g     F .text	00000150 OS_EventTaskWaitMulti
02011f9c g     F .text	00000204 __b2d
0202457a g     O .rwdata	00000002 OSQSize
02015ec0 g     F .text	00000538 .hidden __umoddi3
02016a28 g     F .text	000000d4 lseek
0201d1e8 g     F .text	0000020c OSSemPend
020244e8 g     O .rwdata	00000004 __fdlib_version
02003154 g     F .text	00000064 momentum
0202450c g     O .rwdata	00000004 _global_impure_ptr
020127b0 g     F .text	00000bf0 _realloc_r
02005f14 g     F .text	0000016c __kernel_sinf
02024564 g     O .rwdata	00000002 OSLowestPrio
02031694 g       *ABS*	00000000 __bss_end
02021558 g     F .text	00000024 OSTCBInitHook
020245aa g     O .rwdata	00000002 OSTmrCfgTicksPerSec
020210f8 g     F .text	00000108 alt_tick
0201b24c g     F .text	00000110 OSMboxPost
02015948 g     F .text	00000578 .hidden __udivdi3
02015280 g     F .text	00000088 _fputwc_r
0202454c g     O .rwdata	00000002 OSEventEn
02022700 g     O .rodata	00000028 __mprec_bigtens
02011078 g     F .text	0000018c __s2b
020245a6 g     O .rwdata	00000002 OSTmrCfgNameSize
02016554 g     F .text	000000a8 .hidden __floatunsidf
02011b18 g     F .text	00000114 __mcmp
0200e738 g     F .text	00000040 __fp_lock_all
0202626c g     O .bss	00000004 MailBox5
0201a888 g     F .text	000000e0 OS_FlagInit
0202105c g     F .text	0000009c alt_alarm_stop
02024588 g     O .rwdata	00000002 OSTaskIdleStkSize
020039a8 g     F .text	00000140 cosf
02026334 g     O .bss	00000004 alt_irq_active
0201ce20 g     F .text	000000b0 OSSemAccept
0201ba90 g     F .text	000000d8 OSMemPut
0201b5c8 g     F .text	000001d4 OSMemCreate
020262fc g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d8 alt_irq_handler
02023208 g     O .rwdata	00000028 alt_dev_null
0202459c g     O .rwdata	00000002 OSTicksPerSec
02021224 g       .text	00000000 OSIntCtxSw
0202089c g     F .text	00000048 alt_dcache_flush_all
02011204 g     F .text	00000090 __hi0bits
020163f8 g     F .text	00000080 .hidden __fixdfsi
02004eb0 g     F .text	000001c4 __kernel_cosf
02026300 g     O .bss	00000004 OSTCBFreeList
020245c4 g       *ABS*	00000000 __ram_rwdata_end
0201d3f4 g     F .text	0000016c OSSemPendAbort
02024528 g     O .rwdata	00000008 alt_dev_list
02016e40 g     F .text	000000f8 write
02026270 g     O .bss	00000004 ActivateTask4Grp
020245a0 g     O .rwdata	00000002 OSVersionNbr
02022934 g       *ABS*	00000000 __ram_rodata_end
02016770 g     F .text	000000b0 fstat
02007d4c g     F .text	000000f4 .hidden __ledf2
02024548 g     O .rwdata	00000004 OSEndiannessTest
020117a8 g     F .text	00000178 __pow5mult
02013a30 g     F .text	000012c4 ___vfiprintf_internal_r
020262a4 g     O .bss	00000004 __nlocale_changed
020069fc g     F .text	00000058 .hidden __umodsi3
0202455a g     O .rwdata	00000002 OSFlagGrpSize
02031694 g       *ABS*	00000000 end
0201f710 g     F .text	0000013c altera_avalon_jtag_uart_init
02018df0 g     F .text	000000cc OS_TaskStat
020001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
02021dd4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0202034c g     F .text	00000074 alt_avalon_timer_sc_init
0200910c g     F .text	00000064 .hidden __clzsi2
0202000c g     F .text	000002c4 altera_avalon_jtag_uart_write
0200e670 g     F .text	00000020 __sfp_lock_acquire
02010974 g     F .text	000001bc memchr
02018acc g     F .text	00000054 OS_MemClr
0200992c g     F .text	000020d0 ___vfprintf_internal_r
020212f4 g     F .text	0000015c OSTaskStkInit
02000294 g     F .text	000003a0 task1
02022934 g     O .rwdata	00000030 whole_list
0200e7b8 g     F .text	00000560 _free_r
0200f71c g     F .text	00000020 __locale_mb_cur_max
0201813c g     F .text	00000198 OS_EventTaskRdy
02021bb4 g     F .text	000001ec __call_exitprocs
02026304 g     O .bss	00000001 OSCPUUsage
020262a8 g     O .bss	00000004 __mlocale_changed
02024518 g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000004c _start
02000634 g     F .text	0000207c task2
02026338 g     O .bss	00000004 _alt_tick_rate
0201c340 g     F .text	0000028c OSQPend
0201efec g     F .text	00000104 OSTimeDly
02002ffc g     F .text	00000158 borderCollide
02011920 g     F .text	000001f8 __lshift
0202633c g     O .bss	00000004 _alt_nticks
02016bf4 g     F .text	000000fc read
0201f540 g     F .text	0000006c alt_sys_init
020203fc g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
02021a44 g     F .text	00000170 __register_exitproc
02026305 g     O .bss	00000001 OSTaskCtr
02026274 g     O .bss	00000004 MailBox10
02026278 g     O .bss	00000004 MailBox2
0201f0f0 g     F .text	00000154 OSTimeDlyHMSM
020113d8 g     F .text	000003d0 __multiply
0201fbf8 g     F .text	00000068 altera_avalon_jtag_uart_close
02022934 g       *ABS*	00000000 __ram_rwdata_start
02021dd4 g       *ABS*	00000000 __ram_rodata_start
02026348 g     O .bss	00000028 __malloc_current_mallinfo
0202454e g     O .rwdata	00000002 OSEventMax
020121a0 g     F .text	00000240 __d2b
0201d560 g     F .text	00000110 OSSemPost
02017ce0 g     F .text	000000dc OSSchedUnlock
020037f8 g     F .text	000000ac fmin
0201f5ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02021684 g     F .text	000000dc alt_get_fd
02026308 g     O .bss	00000004 OSMemFreeList
02017e2c g     F .text	000000b0 OSStatInit
0201a664 g     F .text	000000c4 OSFlagQuery
020205d8 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
02024584 g     O .rwdata	00000002 OSTaskCreateExtEn
02014d64 g     F .text	00000060 _close_r
0202627c g     O .bss	00000004 MailBox12
02021910 g     F .text	00000134 memcmp
0201811c g     F .text	00000020 OS_Dummy
0201f66c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02031694 g       *ABS*	00000000 __alt_stack_base
0201f6bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200bd48 g     F .text	000001a0 __swsetup_r
0202fb10 g     O .bss	000001e0 OSQTbl
02007300 g     F .text	000008e8 .hidden __divdf3
0200e38c g     F .text	00000194 __sfp
020125ac g     F .text	000000d0 __copybits
02022e00 g     O .rwdata	00000408 __malloc_av_
0200e6d0 g     F .text	00000020 __sinit_lock_release
0202630c g     O .bss	00000004 OSTCBHighRdy
02007e40 g     F .text	00000718 .hidden __muldf3
02013400 g     F .text	0000009c __sread
02026310 g     O .bss	00000004 OSQFreeList
0202157c g     F .text	00000108 alt_find_file
02020920 g     F .text	000000a4 alt_dev_llist_insert
0201705c g     F .text	00000120 __malloc_lock
02016d54 g     F .text	000000b0 sbrk
02006614 g     F .text	00000214 scalbnf
02017368 g     F .text	00000140 OSEventNameSet
0200e118 g     F .text	00000088 _fflush_r
02014dc4 g     F .text	00000164 _calloc_r
02026314 g     O .bss	00000001 OSRdyGrp
02026254 g       *ABS*	00000000 __bss_start
02009318 g     F .text	000001c4 memset
02002c5c g     F .text	0000022c main
020262d0 g     O .bss	00000004 alt_envp
02026280 g     O .bss	00000004 MailBox8
020262bc g     O .bss	00000004 __malloc_max_total_mem
02003600 g     F .text	00000104 moveBall
0201f60c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02015680 g     F .text	00000040 __swbuf
020227e4 g     O .rodata	00000100 OSUnMapTbl
0202457e g     O .rwdata	00000002 OSSemEn
0201a2d0 g     F .text	00000394 OSFlagPost
02013620 g     F .text	00000054 __sclose
02006080 g     F .text	00000068 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
02015054 g     F .text	00000038 fclose
020182d4 g     F .text	00000110 OS_EventTaskWait
0202a370 g     O .bss	00002000 task2_stk
02008f64 g     F .text	000001a8 .hidden __truncdfsf2
02018ebc g     F .text	000000cc OS_TaskStatStkChk
0201e444 g     F .text	00000150 OSTaskDelReq
0200c29c g     F .text	00001b78 _dtoa_r
0200fdf8 g     F .text	00000b7c _malloc_r
020158d0 g     F .text	00000078 __ascii_wctomb
02024534 g     O .rwdata	00000004 alt_errno
02017dbc g     F .text	00000070 OSStart
0202c370 g     O .bss	00002000 task3_stk
02016ffc g     F .text	00000060 __env_unlock
0200f4c0 g     F .text	000000d8 _fwalk
0201e8e0 g     F .text	000001d4 OSTaskResume
0201bb68 g     F .text	000000e8 OSMemQuery
02024590 g     O .rwdata	00000002 OSTaskStatEn
0202456a g     O .rwdata	00000002 OSMemMax
0201c8a0 g     F .text	00000170 OSQPostFront
020068a0 g     F .text	00000084 .hidden __divsi3
02026315 g     O .bss	00000003 OSRdyTbl
02024544 g     O .rwdata	00000002 OSDebugEn
0200ed18 g     F .text	000001cc _malloc_trim_r
02026284 g     O .bss	00000004 MailBox4
02021dd4 g       *ABS*	00000000 __CTOR_END__
02026288 g     O .bss	00000004 MailBox7
0202455c g     O .rwdata	00000002 OSFlagNodeSize
020245a4 g     O .rwdata	00000002 OSTmrCfgMax
02013674 g     F .text	00000140 strcmp
0201be5c g     F .text	000001ac OSQCreate
0201e594 g     F .text	00000198 OSTaskNameGet
02021dd4 g       *ABS*	00000000 __flash_rodata_start
0201ca10 g     F .text	0000020c OSQPostOpt
02017edc g     F .text	00000220 OSTimeTick
0202458c g     O .rwdata	00000002 OSTaskMax
02021dd4 g       *ABS*	00000000 __DTOR_LIST__
0201ced0 g     F .text	000000d8 OSSemCreate
020245b0 g     O .rwdata	00000002 OSTmrWheelSize
02007be8 g     F .text	00000088 .hidden __nedf2
02024586 g     O .rwdata	00000002 OSTaskDelEn
0201d670 g     F .text	00000110 OSSemQuery
0201c008 g     F .text	00000280 OSQDel
0201c5cc g     F .text	0000016c OSQPendAbort
0201f508 g     F .text	00000038 alt_irq_init
02016cf0 g     F .text	00000064 alt_release_fd
02006828 g     F .text	00000078 copysignf
02022488 g     O .rodata	00000100 .hidden __clz_tab
020262ac g     O .bss	00000004 _PathLocale
0202188c g     F .text	0000003c atexit
02014cf4 g     F .text	00000070 _write_r
02017c54 g     F .text	0000008c OSSchedLock
0200f7a8 g     F .text	00000040 setlocale
020196f4 g     F .text	00000108 OSFlagCreate
02024508 g     O .rwdata	00000004 _impure_ptr
020262c8 g     O .bss	00000004 alt_argc
0200de14 g     F .text	00000304 __sflush_r
02003da0 g     F .text	00000040 atan2f
02020a24 g     F .text	00000060 _do_dtors
0200f760 g     F .text	00000020 __locale_cjk_lang
02024556 g     O .rwdata	00000002 OSEventMultiEn
020197fc g     F .text	00000248 OSFlagDel
02026318 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0201b0e0 g     F .text	0000016c OSMboxPendAbort
02026254 g     O .bss	00000004 accel_spi
02011ed0 g     F .text	000000cc __ulp
0202628c g     O .bss	00000004 MailBox11
020245a2 g     O .rwdata	00000002 OSTmrEn
02019cb8 g     F .text	000005b8 OSFlagPend
0200e778 g     F .text	00000040 __fp_unlock_all
02024520 g     O .rwdata	00000008 alt_fs_list
02018ccc g     F .text	00000074 OS_StrCopy
02003ae8 g     F .text	00000144 sinf
0202456c g     O .rwdata	00000002 OSMemNameSize
02021518 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
020203c0 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
02024598 g     O .rwdata	00000002 OSTCBPrioTblMax
0200f7e8 g     F .text	00000030 localeconv
02003de0 g     F .text	00000648 __ieee754_sqrt
02024594 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201ab98 g     F .text	000000d4 OSMboxCreate
02024568 g     O .rwdata	00000002 OSMemEn
02024572 g     O .rwdata	00000002 OSMutexEn
020245c4 g       *ABS*	00000000 _edata
02003278 g     F .text	00000388 collide_calc
02031694 g       *ABS*	00000000 _end
0202631c g     O .bss	00000001 OSIntNesting
0201508c g     F .text	000001f4 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
0201fc60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201f244 g     F .text	000001d4 OSTimeDlyResume
02019b6c g     F .text	0000014c OSFlagNameSet
0201aeac g     F .text	00000234 OSMboxPend
02002e88 g     F .text	00000174 whole_collide
0201eab4 g     F .text	000001c0 OSTaskStkChk
0202456e g     O .rwdata	00000002 OSMemSize
020134cc g     F .text	000000b4 __swrite
02024514 g     O .rwdata	00000004 __malloc_trim_threshold
0200f73c g     F .text	00000024 __locale_msgcharset
02026320 g     O .bss	00000004 OSTCBCur
020218c8 g     F .text	00000048 exit
02024570 g     O .rwdata	00000002 OSMemTblSize
0200f598 g     F .text	000000dc _fwalk_reent
02026290 g     O .bss	00000004 MailBox1
02011c2c g     F .text	000002a4 __mdiff
02006924 g     F .text	00000074 .hidden __modsi3
020206a4 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
0201ab00 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200e690 g     F .text	00000020 __sfp_lock_release
02017ab8 g     F .text	00000058 OSInit
020060e8 g     F .text	00000370 atanf
0201ee58 g     F .text	00000124 OSTaskQuery
0201cd78 g     F .text	000000a8 OS_QInit
02018d40 g     F .text	00000054 OS_StrLen
0201b97c g     F .text	00000114 OSMemNameSet
0202458a g     O .rwdata	00000002 OSTaskProfileEn
02026324 g     O .bss	00000004 OSTime
02026294 g     O .bss	00000004 isActiveFlagGrp
0202fcf0 g     O .bss	00000800 OSTaskIdleStk
02021da0 g     F .text	00000034 _exit
0201b35c g     F .text	0000015c OSMboxPostOpt
02005074 g     F .text	00000ea0 __kernel_rem_pio2f
02020770 g     F .text	0000012c alt_alarm_start
02019a44 g     F .text	00000128 OSFlagNameGet
020031b8 g     F .text	000000c0 detect_collide
0201f418 g     F .text	0000005c OSTimeGet
02020440 g     F .text	00000068 alt_up_accelerometer_spi_read
020204a8 g     F .text	00000064 alt_up_accelerometer_spi_write
0200f818 g     F .text	0000022c __smakebuf_r
020096f8 g     F .text	000000f4 strlen
02021498 g     F .text	00000020 OSTaskSwHook
02020f08 g     F .text	00000154 open
020304f0 g     O .bss	00000b40 OSEventTbl
02007c70 g     F .text	000000dc .hidden __gedf2
02031030 g     O .bss	00000510 OSTCBTbl
0201d780 g     F .text	00000100 OSSemSet
0202451c g     O .rwdata	00000004 __wctomb
02026298 g     O .bss	00000004 StartGameGrp
020137b4 g     F .text	0000013c __sprint_r
02020b14 g     F .text	00000034 alt_icache_flush_all
020064b0 g     F .text	00000164 floorf
020245b8 g     O .rwdata	00000004 alt_priority_mask
0201cfa8 g     F .text	00000240 OSSemDel
02026328 g     O .bss	00000004 OSFlagFreeList
020026b0 g     F .text	000004e0 task3
02024550 g     O .rwdata	00000002 OSEventNameSize
0201ac6c g     F .text	00000240 OSMboxDel
020098dc g     F .text	00000050 __vfprintf_internal
0202632c g     O .bss	00000001 OSStatRdy
02031540 g     O .bss	00000054 OSTCBPrioTbl
0201586c g     F .text	00000064 _wctomb_r
02016f38 g     F .text	000000c4 __env_lock
02024596 g     O .rwdata	00000002 OSTaskSwHookEn
02008558 g     F .text	000008fc .hidden __subdf3
02011294 g     F .text	000000ec __lo0bits
020245bc g     O .rwdata	00000008 alt_alarm_list
0202455e g     O .rwdata	00000002 OSFlagWidth
020209c4 g     F .text	00000060 _do_ctors
02015794 g     F .text	000000d8 wcrtomb
02016638 g     F .text	000000d0 close
020262d8 g     O .bss	00000004 alt_envsem
02026330 g     O .bss	00000004 OSIdleCtrRun
020180fc g     F .text	00000020 OSVersion
020245a8 g     O .rwdata	00000002 OSTmrCfgWheelSize
02016968 g     F .text	00000084 alt_load
0201ef7c g     F .text	00000070 OS_TaskStkClr
02024582 g     O .rwdata	00000002 OSTaskCreateEn
020186ec g     F .text	00000068 OS_EventWaitListInit
02015308 g     F .text	00000068 fputwc
02021538 g     F .text	00000020 OSTaskIdleHook
0200e6b0 g     F .text	00000020 __sinit_lock_acquire
02010ee4 g     F .text	00000194 __multadd
0201ec74 g     F .text	000001e4 OSTaskSuspend
02010e68 g     F .text	0000007c _Bfree
02004428 g     F .text	00000414 __ieee754_atan2f
02018d94 g     F .text	0000005c OS_TaskIdle
020245ae g     O .rwdata	00000002 OSTmrTblSize
0201cc1c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d40 	call	20001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	2017b100 	call	2017b10 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001526 	beq	r2,zero,2000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10856504 	addi	r2,r2,5524
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10856504 	addi	r2,r2,5524
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	e17ffd17 	ldw	r5,-12(fp)
 2000174:	1009883a 	mov	r4,r2
 2000178:	183ee83a 	callr	r3
#endif
        break;
 200017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000180:	0005313a 	rdctl	r2,ipending
 2000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000188:	e0bfff17 	ldw	r2,-4(fp)
 200018c:	00000706 	br	20001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 2000190:	e0bffc17 	ldw	r2,-16(fp)
 2000194:	1085883a 	add	r2,r2,r2
 2000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 200019c:	e0bffd17 	ldw	r2,-12(fp)
 20001a0:	10800044 	addi	r2,r2,1
 20001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a8:	003fe006 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001b0:	e0bffb17 	ldw	r2,-20(fp)
 20001b4:	103fda1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b8:	2017b5c0 	call	2017b5c <OSIntExit>
}
 20001bc:	0001883a 	nop
 20001c0:	e037883a 	mov	sp,fp
 20001c4:	dfc00117 	ldw	ra,4(sp)
 20001c8:	df000017 	ldw	fp,0(sp)
 20001cc:	dec00204 	addi	sp,sp,8
 20001d0:	f800283a 	ret

020001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d4:	defffb04 	addi	sp,sp,-20
 20001d8:	dfc00415 	stw	ra,16(sp)
 20001dc:	df000315 	stw	fp,12(sp)
 20001e0:	df000304 	addi	fp,sp,12
 20001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e8:	000531fa 	rdctl	r2,exception
 20001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001f0:	e0bffd17 	ldw	r2,-12(fp)
 20001f4:	10801f0c 	andi	r2,r2,124
 20001f8:	1004d0ba 	srli	r2,r2,2
 20001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 2000200:	0005333a 	rdctl	r2,badaddr
 2000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000208:	d0a7be17 	ldw	r2,-24840(gp)
 200020c:	10000726 	beq	r2,zero,200022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000210:	d0a7be17 	ldw	r2,-24840(gp)
 2000214:	e0fffd17 	ldw	r3,-12(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	e17fff17 	ldw	r5,-4(fp)
 2000220:	1809883a 	mov	r4,r3
 2000224:	103ee83a 	callr	r2
 2000228:	00000206 	br	2000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 200022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000230:	0005883a 	mov	r2,zero
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 200024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000254:	00bffd16 	blt	zero,r2,200024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000260:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000264:	d6b11214 	ori	gp,gp,50248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000268:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 200026c:	10989514 	ori	r2,r2,25172

    movhi r3, %hi(__bss_end)
 2000270:	00c080f4 	movhi	r3,515
    ori r3, r3, %lo(__bss_end)
 2000274:	18c5a514 	ori	r3,r3,5780

    beq r2, r3, 1f
 2000278:	10c00326 	beq	r2,r3,2000288 <_start+0x40>

0:
    stw zero, (r2)
 200027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000284:	10fffd36 	bltu	r2,r3,200027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000288:	20169680 	call	2016968 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200028c:	2016afc0 	call	2016afc <alt_main>

02000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000290:	003fff06 	br	2000290 <alt_after_alt_main>

02000294 <task1>:


/*  */

void task1(void* pdata)
{
 2000294:	deffe704 	addi	sp,sp,-100
 2000298:	dfc01815 	stw	ra,96(sp)
 200029c:	df001715 	stw	fp,92(sp)
 20002a0:	df001704 	addi	fp,sp,92
 20002a4:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	int shoot = 0;
 20002a8:	e03fea15 	stw	zero,-88(fp)
	int x_axis,y_axis;


	//volatile int * MTL_controller = (int *) MTL_IP_BASE;
	int count_old = 0;
 20002ac:	e03ff115 	stw	zero,-60(fp)
	int count = 0;
 20002b0:	e03feb15 	stw	zero,-84(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03ff015 	stw	zero,-64(fp)

	while (1)
	{


        DEBUG_PRINT("[Task 1] wait for isActive\n");
 20002b8:	010080b4 	movhi	r4,514
 20002bc:	21077c04 	addi	r4,r4,7664
 20002c0:	20096c00 	call	20096c0 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c4:	d0e79317 	ldw	r3,-25012(gp)
 20002c8:	e0bff804 	addi	r2,fp,-32
 20002cc:	d8800015 	stw	r2,0(sp)
 20002d0:	000f883a 	mov	r7,zero
 20002d4:	01802084 	movi	r6,130
 20002d8:	01400044 	movi	r5,1
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	2019cb80 	call	2019cb8 <OSFlagPend>
		IOWR(MTL_IP_BASE,13,0);
 20002e4:	0007883a 	mov	r3,zero
 20002e8:	008000b4 	movhi	r2,2
 20002ec:	10800d04 	addi	r2,r2,52
 20002f0:	10c00035 	stwio	r3,0(r2)
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002f4:	00004c06 	br	2000428 <task1+0x194>
		{
			count_old = count;
 20002f8:	e0bfeb17 	ldw	r2,-84(fp)
 20002fc:	e0bff115 	stw	r2,-60(fp)
			count = IORD(MTL_IP_BASE,10); // récupère le nombre de doigts présent sur l'écran
 2000300:	008000b4 	movhi	r2,2
 2000304:	10800a04 	addi	r2,r2,40
 2000308:	10800037 	ldwio	r2,0(r2)
 200030c:	e0bfeb15 	stw	r2,-84(fp)
			int pos1 = IORD(MTL_IP_BASE,11);
 2000310:	008000b4 	movhi	r2,2
 2000314:	10800b04 	addi	r2,r2,44
 2000318:	10800037 	ldwio	r2,0(r2)
 200031c:	e0bff215 	stw	r2,-56(fp)
			int pos2 = IORD(MTL_IP_BASE,12);
 2000320:	008000b4 	movhi	r2,2
 2000324:	10800c04 	addi	r2,r2,48
 2000328:	10800037 	ldwio	r2,0(r2)
 200032c:	e0bff315 	stw	r2,-52(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000330:	e0bff117 	ldw	r2,-60(fp)
 2000334:	10800058 	cmpnei	r2,r2,1
 2000338:	1000121e 	bne	r2,zero,2000384 <task1+0xf0>
 200033c:	e0bfeb17 	ldw	r2,-84(fp)
 2000340:	10800098 	cmpnei	r2,r2,2
 2000344:	10000f1e 	bne	r2,zero,2000384 <task1+0xf0>
			{
				DEBUG_PRINT("[Task 1] start gesture\n");
 2000348:	010080b4 	movhi	r4,514
 200034c:	21078304 	addi	r4,r4,7692
 2000350:	20096c00 	call	20096c0 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000354:	e0bff217 	ldw	r2,-56(fp)
 2000358:	1080ffcc 	andi	r2,r2,1023
 200035c:	e0bfec15 	stw	r2,-80(fp)
				y1_gesture_start = pos1 >> 10;
 2000360:	e0bff217 	ldw	r2,-56(fp)
 2000364:	1005d2ba 	srai	r2,r2,10
 2000368:	e0bfee15 	stw	r2,-72(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200036c:	e0bff317 	ldw	r2,-52(fp)
 2000370:	1080ffcc 	andi	r2,r2,1023
 2000374:	e0bff415 	stw	r2,-48(fp)
				y2_gesture_start = pos2 >> 10;
 2000378:	e0bff317 	ldw	r2,-52(fp)
 200037c:	1005d2ba 	srai	r2,r2,10
 2000380:	e0bff515 	stw	r2,-44(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000384:	e0bff117 	ldw	r2,-60(fp)
 2000388:	10800098 	cmpnei	r2,r2,2
 200038c:	1000261e 	bne	r2,zero,2000428 <task1+0x194>
 2000390:	e0bfeb17 	ldw	r2,-84(fp)
 2000394:	10800058 	cmpnei	r2,r2,1
 2000398:	1000231e 	bne	r2,zero,2000428 <task1+0x194>
			{
				DEBUG_PRINT("[Task 1] stop gesture\n");
 200039c:	010080b4 	movhi	r4,514
 20003a0:	21078904 	addi	r4,r4,7716
 20003a4:	20096c00 	call	20096c0 <puts>

				x1_gesture_stop = pos1 & 0x0003FF;
 20003a8:	e0bff217 	ldw	r2,-56(fp)
 20003ac:	1080ffcc 	andi	r2,r2,1023
 20003b0:	e0bff615 	stw	r2,-40(fp)
				y1_gesture_stop = pos1 >> 10;
 20003b4:	e0bff217 	ldw	r2,-56(fp)
 20003b8:	1005d2ba 	srai	r2,r2,10
 20003bc:	e0bff715 	stw	r2,-36(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003c0:	e0bff317 	ldw	r2,-52(fp)
 20003c4:	1080ffcc 	andi	r2,r2,1023
 20003c8:	e0bfed15 	stw	r2,-76(fp)
				y2_gesture_stop = pos2 >> 10;
 20003cc:	e0bff317 	ldw	r2,-52(fp)
 20003d0:	1005d2ba 	srai	r2,r2,10
 20003d4:	e0bfef15 	stw	r2,-68(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfec17 	ldw	r2,-80(fp)
 20003dc:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003e0:	e0fff617 	ldw	r3,-40(fp)
 20003e4:	18800e16 	blt	r3,r2,2000420 <task1+0x18c>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003e8:	e0bfec17 	ldw	r2,-80(fp)
 20003ec:	10c00784 	addi	r3,r2,30
 20003f0:	e0bff617 	ldw	r2,-40(fp)
 20003f4:	18800a16 	blt	r3,r2,2000420 <task1+0x18c>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003f8:	e0bfee17 	ldw	r2,-72(fp)
 20003fc:	10bff884 	addi	r2,r2,-30
 2000400:	e0fff717 	ldw	r3,-36(fp)
 2000404:	18800616 	blt	r3,r2,2000420 <task1+0x18c>
 2000408:	e0bfee17 	ldw	r2,-72(fp)
 200040c:	10c00784 	addi	r3,r2,30
 2000410:	e0bff717 	ldw	r2,-36(fp)
 2000414:	18800216 	blt	r3,r2,2000420 <task1+0x18c>
 2000418:	00800044 	movi	r2,1
 200041c:	00000106 	br	2000424 <task1+0x190>
 2000420:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000424:	e0bff015 	stw	r2,-64(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
		IOWR(MTL_IP_BASE,13,0);
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 2000428:	e0bff017 	ldw	r2,-64(fp)
 200042c:	103fb226 	beq	r2,zero,20002f8 <task1+0x64>

			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		IOWR(MTL_IP_BASE,13, 1);
 2000430:	00c00044 	movi	r3,1
 2000434:	008000b4 	movhi	r2,2
 2000438:	10800d04 	addi	r2,r2,52
 200043c:	10c00035 	stwio	r3,0(r2)

		count_old = 0;
 2000440:	e03ff115 	stw	zero,-60(fp)
		count = 0;
 2000444:	e03feb15 	stw	zero,-84(fp)
		shoot = 0;
 2000448:	e03fea15 	stw	zero,-88(fp)
  		int x = 446;
 200044c:	00806f84 	movi	r2,446
 2000450:	e0bffb15 	stw	r2,-20(fp)
  		int y = 263;
 2000454:	008041c4 	movi	r2,263
 2000458:	e0bffc15 	stw	r2,-16(fp)
  		IOWR(MTL_IP_BASE,11,(y<<10)+x);
 200045c:	e0bffc17 	ldw	r2,-16(fp)
 2000460:	100692ba 	slli	r3,r2,10
 2000464:	e0bffb17 	ldw	r2,-20(fp)
 2000468:	1887883a 	add	r3,r3,r2
 200046c:	008000b4 	movhi	r2,2
 2000470:	10800b04 	addi	r2,r2,44
 2000474:	10c00035 	stwio	r3,0(r2)
  		OSTimeDlyHMSM(0, 0, 0, 500);
 2000478:	01c07d04 	movi	r7,500
 200047c:	000d883a 	mov	r6,zero
 2000480:	000b883a 	mov	r5,zero
 2000484:	0009883a 	mov	r4,zero
 2000488:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>

  		while(!shoot)
 200048c:	00003506 	br	2000564 <task1+0x2d0>
  		{
  			count_old = count;
 2000490:	e0bfeb17 	ldw	r2,-84(fp)
 2000494:	e0bff115 	stw	r2,-60(fp)
  			count = IORD(MTL_IP_BASE,10);
 2000498:	008000b4 	movhi	r2,2
 200049c:	10800a04 	addi	r2,r2,40
 20004a0:	10800037 	ldwio	r2,0(r2)
 20004a4:	e0bfeb15 	stw	r2,-84(fp)
  			if(count_old == 0 && count == 1)
 20004a8:	e0bff117 	ldw	r2,-60(fp)
 20004ac:	1000061e 	bne	r2,zero,20004c8 <task1+0x234>
 20004b0:	e0bfeb17 	ldw	r2,-84(fp)
 20004b4:	10800058 	cmpnei	r2,r2,1
 20004b8:	1000031e 	bne	r2,zero,20004c8 <task1+0x234>
  				shoot = 1;
 20004bc:	00800044 	movi	r2,1
 20004c0:	e0bfea15 	stw	r2,-88(fp)
 20004c4:	00002206 	br	2000550 <task1+0x2bc>
  			else{
  			   alt_up_accelerometer_spi_read_y_axis(accel_spi,  &y_axis);
 20004c8:	d0a78317 	ldw	r2,-25076(gp)
 20004cc:	e0fffa04 	addi	r3,fp,-24
 20004d0:	180b883a 	mov	r5,r3
 20004d4:	1009883a 	mov	r4,r2
 20004d8:	20205d80 	call	20205d8 <alt_up_accelerometer_spi_read_y_axis>
  		       alt_up_accelerometer_spi_read_x_axis(accel_spi,  &x_axis);
 20004dc:	d0a78317 	ldw	r2,-25076(gp)
 20004e0:	e0fff904 	addi	r3,fp,-28
 20004e4:	180b883a 	mov	r5,r3
 20004e8:	1009883a 	mov	r4,r2
 20004ec:	202050c0 	call	202050c <alt_up_accelerometer_spi_read_x_axis>
  		       //printf("Accelerometer : (%d, %d)\n",x_axis, y_axis);
  		       y += -(x_axis) / 10;
 20004f0:	e0bff917 	ldw	r2,-28(fp)
 20004f4:	0085c83a 	sub	r2,zero,r2
 20004f8:	01400284 	movi	r5,10
 20004fc:	1009883a 	mov	r4,r2
 2000500:	20068a00 	call	20068a0 <__divsi3>
 2000504:	1007883a 	mov	r3,r2
 2000508:	e0bffc17 	ldw	r2,-16(fp)
 200050c:	1885883a 	add	r2,r3,r2
 2000510:	e0bffc15 	stw	r2,-16(fp)
  		       x += y_axis / 10;
 2000514:	e0bffa17 	ldw	r2,-24(fp)
 2000518:	01400284 	movi	r5,10
 200051c:	1009883a 	mov	r4,r2
 2000520:	20068a00 	call	20068a0 <__divsi3>
 2000524:	1007883a 	mov	r3,r2
 2000528:	e0bffb17 	ldw	r2,-20(fp)
 200052c:	1885883a 	add	r2,r3,r2
 2000530:	e0bffb15 	stw	r2,-20(fp)
  		       IOWR(MTL_IP_BASE,11,(y<<10)+x);
 2000534:	e0bffc17 	ldw	r2,-16(fp)
 2000538:	100692ba 	slli	r3,r2,10
 200053c:	e0bffb17 	ldw	r2,-20(fp)
 2000540:	1887883a 	add	r3,r3,r2
 2000544:	008000b4 	movhi	r2,2
 2000548:	10800b04 	addi	r2,r2,44
 200054c:	10c00035 	stwio	r3,0(r2)
  				// play with the accelerometer

  			}
  			OSTimeDlyHMSM(0, 0, 0, 50);
 2000550:	01c00c84 	movi	r7,50
 2000554:	000d883a 	mov	r6,zero
 2000558:	000b883a 	mov	r5,zero
 200055c:	0009883a 	mov	r4,zero
 2000560:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>
  		int x = 446;
  		int y = 263;
  		IOWR(MTL_IP_BASE,11,(y<<10)+x);
  		OSTimeDlyHMSM(0, 0, 0, 500);

  		while(!shoot)
 2000564:	e0bfea17 	ldw	r2,-88(fp)
 2000568:	103fc926 	beq	r2,zero,2000490 <task1+0x1fc>
  				// play with the accelerometer

  			}
  			OSTimeDlyHMSM(0, 0, 0, 50);
  		}
  		IOWR(MTL_IP_BASE,13, 0);
 200056c:	0007883a 	mov	r3,zero
 2000570:	008000b4 	movhi	r2,2
 2000574:	10800d04 	addi	r2,r2,52
 2000578:	10c00035 	stwio	r3,0(r2)

		int x_dir = (x2_gesture_stop - x1_gesture_start);
 200057c:	e0ffed17 	ldw	r3,-76(fp)
 2000580:	e0bfec17 	ldw	r2,-80(fp)
 2000584:	1885c83a 	sub	r2,r3,r2
 2000588:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 200058c:	e0ffef17 	ldw	r3,-68(fp)
 2000590:	e0bfee17 	ldw	r2,-72(fp)
 2000594:	1885c83a 	sub	r2,r3,r2
 2000598:	e0bffe15 	stw	r2,-8(fp)
		DEBUG_PRINT("[Task 1] Send value : (%d, %d) - (%d, %d)\n", x_dir, y_dir,x,y);
 200059c:	e0fffd17 	ldw	r3,-12(fp)
 20005a0:	e13ffe17 	ldw	r4,-8(fp)
 20005a4:	e17ffb17 	ldw	r5,-20(fp)
 20005a8:	e0bffc17 	ldw	r2,-16(fp)
 20005ac:	d8800015 	stw	r2,0(sp)
 20005b0:	280f883a 	mov	r7,r5
 20005b4:	200d883a 	mov	r6,r4
 20005b8:	180b883a 	mov	r5,r3
 20005bc:	010080b4 	movhi	r4,514
 20005c0:	21078f04 	addi	r4,r4,7740
 20005c4:	20095400 	call	2009540 <printf>
		OSMboxPost(MailBox1, &x_dir);
 20005c8:	d0a79217 	ldw	r2,-25016(gp)
 20005cc:	e0fffd04 	addi	r3,fp,-12
 20005d0:	180b883a 	mov	r5,r3
 20005d4:	1009883a 	mov	r4,r2
 20005d8:	201b24c0 	call	201b24c <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 20005dc:	d0a78c17 	ldw	r2,-25040(gp)
 20005e0:	e0fffe04 	addi	r3,fp,-8
 20005e4:	180b883a 	mov	r5,r3
 20005e8:	1009883a 	mov	r4,r2
 20005ec:	201b24c0 	call	201b24c <OSMboxPost>
		OSMboxPost(MailBox10,&x);
 20005f0:	d0a78b17 	ldw	r2,-25044(gp)
 20005f4:	e0fffb04 	addi	r3,fp,-20
 20005f8:	180b883a 	mov	r5,r3
 20005fc:	1009883a 	mov	r4,r2
 2000600:	201b24c0 	call	201b24c <OSMboxPost>
		OSMboxPost(MailBox11,&y);
 2000604:	d0a79117 	ldw	r2,-25020(gp)
 2000608:	e0fffc04 	addi	r3,fp,-16
 200060c:	180b883a 	mov	r5,r3
 2000610:	1009883a 	mov	r4,r2
 2000614:	201b24c0 	call	201b24c <OSMboxPost>
		gesture_detected = 0;
 2000618:	e03ff015 	stw	zero,-64(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 200061c:	01c07d04 	movi	r7,500
 2000620:	000d883a 	mov	r6,zero
 2000624:	000b883a 	mov	r5,zero
 2000628:	0009883a 	mov	r4,zero
 200062c:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>
	}
 2000630:	003f2106 	br	20002b8 <task1+0x24>

02000634 <task2>:
}

void task2(void* pdata)
{
 2000634:	deff3804 	addi	sp,sp,-800
 2000638:	dfc0c715 	stw	ra,796(sp)
 200063c:	df00c615 	stw	fp,792(sp)
 2000640:	dd40c515 	stw	r21,788(sp)
 2000644:	dd00c415 	stw	r20,784(sp)
 2000648:	dcc0c315 	stw	r19,780(sp)
 200064c:	dc80c215 	stw	r18,776(sp)
 2000650:	dc40c115 	stw	r17,772(sp)
 2000654:	dc00c015 	stw	r16,768(sp)
 2000658:	df00c604 	addi	fp,sp,792
 200065c:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 2000660:	008000b4 	movhi	r2,2
 2000664:	e0bf4015 	stw	r2,-768(fp)

  float ball[10][2] =  {{266.0, 263.0}, // white
 2000668:	008080b4 	movhi	r2,514
 200066c:	1087bf04 	addi	r2,r2,7932
 2000670:	e0ff4c04 	addi	r3,fp,-720
 2000674:	1009883a 	mov	r4,r2
 2000678:	00801404 	movi	r2,80
 200067c:	100d883a 	mov	r6,r2
 2000680:	200b883a 	mov	r5,r4
 2000684:	1809883a 	mov	r4,r3
 2000688:	20091900 	call	2009190 <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 200068c:	e0bf4017 	ldw	r2,-768(fp)
 2000690:	10800104 	addi	r2,r2,4
 2000694:	e0ff4d17 	ldw	r3,-716(fp)
 2000698:	1807fe72 	custom	249,r3,r3,zero
 200069c:	180892ba 	slli	r4,r3,10
 20006a0:	e0ff4c17 	ldw	r3,-720(fp)
 20006a4:	1807fe72 	custom	249,r3,r3,zero
 20006a8:	20c7883a 	add	r3,r4,r3
 20006ac:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20006b0:	e0bf4017 	ldw	r2,-768(fp)
 20006b4:	10800204 	addi	r2,r2,8
 20006b8:	e0ff4f17 	ldw	r3,-708(fp)
 20006bc:	1807fe72 	custom	249,r3,r3,zero
 20006c0:	180892ba 	slli	r4,r3,10
 20006c4:	e0ff4e17 	ldw	r3,-712(fp)
 20006c8:	1807fe72 	custom	249,r3,r3,zero
 20006cc:	20c7883a 	add	r3,r4,r3
 20006d0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 20006d4:	e0bf4017 	ldw	r2,-768(fp)
 20006d8:	10800304 	addi	r2,r2,12
 20006dc:	e0ff5117 	ldw	r3,-700(fp)
 20006e0:	1807fe72 	custom	249,r3,r3,zero
 20006e4:	180892ba 	slli	r4,r3,10
 20006e8:	e0ff5017 	ldw	r3,-704(fp)
 20006ec:	1807fe72 	custom	249,r3,r3,zero
 20006f0:	20c7883a 	add	r3,r4,r3
 20006f4:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 20006f8:	e0bf4017 	ldw	r2,-768(fp)
 20006fc:	10800404 	addi	r2,r2,16
 2000700:	e0ff5317 	ldw	r3,-692(fp)
 2000704:	1807fe72 	custom	249,r3,r3,zero
 2000708:	180892ba 	slli	r4,r3,10
 200070c:	e0ff5217 	ldw	r3,-696(fp)
 2000710:	1807fe72 	custom	249,r3,r3,zero
 2000714:	20c7883a 	add	r3,r4,r3
 2000718:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 200071c:	e0bf4017 	ldw	r2,-768(fp)
 2000720:	10800504 	addi	r2,r2,20
 2000724:	e0ff5517 	ldw	r3,-684(fp)
 2000728:	1807fe72 	custom	249,r3,r3,zero
 200072c:	180892ba 	slli	r4,r3,10
 2000730:	e0ff5417 	ldw	r3,-688(fp)
 2000734:	1807fe72 	custom	249,r3,r3,zero
 2000738:	20c7883a 	add	r3,r4,r3
 200073c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2000740:	e0bf4017 	ldw	r2,-768(fp)
 2000744:	10800604 	addi	r2,r2,24
 2000748:	e0ff5717 	ldw	r3,-676(fp)
 200074c:	1807fe72 	custom	249,r3,r3,zero
 2000750:	180892ba 	slli	r4,r3,10
 2000754:	e0ff5617 	ldw	r3,-680(fp)
 2000758:	1807fe72 	custom	249,r3,r3,zero
 200075c:	20c7883a 	add	r3,r4,r3
 2000760:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 2000764:	e0bf4017 	ldw	r2,-768(fp)
 2000768:	10800704 	addi	r2,r2,28
 200076c:	e0ff5917 	ldw	r3,-668(fp)
 2000770:	1807fe72 	custom	249,r3,r3,zero
 2000774:	180892ba 	slli	r4,r3,10
 2000778:	e0ff5817 	ldw	r3,-672(fp)
 200077c:	1807fe72 	custom	249,r3,r3,zero
 2000780:	20c7883a 	add	r3,r4,r3
 2000784:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 2000788:	e0bf4017 	ldw	r2,-768(fp)
 200078c:	10800804 	addi	r2,r2,32
 2000790:	e0ff5b17 	ldw	r3,-660(fp)
 2000794:	1807fe72 	custom	249,r3,r3,zero
 2000798:	180892ba 	slli	r4,r3,10
 200079c:	e0ff5a17 	ldw	r3,-664(fp)
 20007a0:	1807fe72 	custom	249,r3,r3,zero
 20007a4:	20c7883a 	add	r3,r4,r3
 20007a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20007ac:	e0bf4017 	ldw	r2,-768(fp)
 20007b0:	10800904 	addi	r2,r2,36
 20007b4:	e0ff5d17 	ldw	r3,-652(fp)
 20007b8:	1807fe72 	custom	249,r3,r3,zero
 20007bc:	180892ba 	slli	r4,r3,10
 20007c0:	e0ff5c17 	ldw	r3,-656(fp)
 20007c4:	1807fe72 	custom	249,r3,r3,zero
 20007c8:	20c7883a 	add	r3,r4,r3
 20007cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 20007d0:	e0bf4017 	ldw	r2,-768(fp)
 20007d4:	10800a04 	addi	r2,r2,40
 20007d8:	e0ff5f17 	ldw	r3,-644(fp)
 20007dc:	1807fe72 	custom	249,r3,r3,zero
 20007e0:	180892ba 	slli	r4,r3,10
 20007e4:	e0ff5e17 	ldw	r3,-648(fp)
 20007e8:	1807fe72 	custom	249,r3,r3,zero
 20007ec:	20c7883a 	add	r3,r4,r3
 20007f0:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 20007f4:	e0bf6004 	addi	r2,fp,-640
 20007f8:	00c05a04 	movi	r3,360
 20007fc:	180d883a 	mov	r6,r3
 2000800:	000b883a 	mov	r5,zero
 2000804:	1009883a 	mov	r4,r2
 2000808:	20093180 	call	2009318 <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 200080c:	00800044 	movi	r2,1
 2000810:	e0bf4105 	stb	r2,-764(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000814:	d0a78817 	ldw	r2,-25056(gp)
 2000818:	e0ff4103 	ldbu	r3,-764(fp)
 200081c:	e13f4b04 	addi	r4,fp,-724
 2000820:	200f883a 	mov	r7,r4
 2000824:	180d883a 	mov	r6,r3
 2000828:	01400044 	movi	r5,1
 200082c:	1009883a 	mov	r4,r2
 2000830:	201a2d00 	call	201a2d0 <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 2000834:	d0a78f17 	ldw	r2,-25028(gp)
 2000838:	e0ff4b04 	addi	r3,fp,-724
 200083c:	180d883a 	mov	r6,r3
 2000840:	000b883a 	mov	r5,zero
 2000844:	1009883a 	mov	r4,r2
 2000848:	201aeac0 	call	201aeac <OSMboxPend>
 200084c:	e0bf4215 	stw	r2,-760(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 2000850:	d0a78917 	ldw	r2,-25052(gp)
 2000854:	e0ff4b04 	addi	r3,fp,-724
 2000858:	180d883a 	mov	r6,r3
 200085c:	000b883a 	mov	r5,zero
 2000860:	1009883a 	mov	r4,r2
 2000864:	201aeac0 	call	201aeac <OSMboxPend>
 2000868:	e0bf4315 	stw	r2,-756(fp)

   int *effect_x = OSMboxPend(MailBox12,0, &err);
 200086c:	d0a78d17 	ldw	r2,-25036(gp)
 2000870:	e0ff4b04 	addi	r3,fp,-724
 2000874:	180d883a 	mov	r6,r3
 2000878:	000b883a 	mov	r5,zero
 200087c:	1009883a 	mov	r4,r2
 2000880:	201aeac0 	call	201aeac <OSMboxPend>
 2000884:	e0bf4415 	stw	r2,-752(fp)
   int *effect_y = OSMboxPend(MailBox13,0, &err);
 2000888:	d0a78617 	ldw	r2,-25064(gp)
 200088c:	e0ff4b04 	addi	r3,fp,-724
 2000890:	180d883a 	mov	r6,r3
 2000894:	000b883a 	mov	r5,zero
 2000898:	1009883a 	mov	r4,r2
 200089c:	201aeac0 	call	201aeac <OSMboxPend>
 20008a0:	e0bf4515 	stw	r2,-748(fp)

   //int score = OSMboxPend(MailBox8,0,&err);
   int *nbr_ball = OSMboxPend(MailBox8,0,&err);
 20008a4:	d0a78e17 	ldw	r2,-25032(gp)
 20008a8:	e0ff4b04 	addi	r3,fp,-724
 20008ac:	180d883a 	mov	r6,r3
 20008b0:	000b883a 	mov	r5,zero
 20008b4:	1009883a 	mov	r4,r2
 20008b8:	201aeac0 	call	201aeac <OSMboxPend>
 20008bc:	e0bf4615 	stw	r2,-744(fp)
   int number_of_ball = *nbr_ball;
 20008c0:	e0bf4617 	ldw	r2,-744(fp)
 20008c4:	10800017 	ldw	r2,0(r2)
 20008c8:	e0bfba15 	stw	r2,-280(fp)


   float x = (float) *vector_x;
 20008cc:	e0bf4217 	ldw	r2,-760(fp)
 20008d0:	10800017 	ldw	r2,0(r2)
 20008d4:	1005feb2 	custom	250,r2,r2,zero
 20008d8:	e0bf4715 	stw	r2,-740(fp)
   float y = (float) *vector_y;
 20008dc:	e0bf4317 	ldw	r2,-756(fp)
 20008e0:	10800017 	ldw	r2,0(r2)
 20008e4:	1005feb2 	custom	250,r2,r2,zero
 20008e8:	e0bf4815 	stw	r2,-736(fp)

   float length = sqrt(x*x + y*y);
 20008ec:	e0ff4717 	ldw	r3,-740(fp)
 20008f0:	e0bf4717 	ldw	r2,-740(fp)
 20008f4:	1887ff32 	custom	252,r3,r3,r2
 20008f8:	e13f4817 	ldw	r4,-736(fp)
 20008fc:	e0bf4817 	ldw	r2,-736(fp)
 2000900:	2085ff32 	custom	252,r2,r4,r2
 2000904:	1885ff72 	custom	253,r2,r3,r2
 2000908:	1009883a 	mov	r4,r2
 200090c:	2008e540 	call	2008e54 <__extendsfdf2>
 2000910:	100b883a 	mov	r5,r2
 2000914:	180d883a 	mov	r6,r3
 2000918:	2809883a 	mov	r4,r5
 200091c:	300b883a 	mov	r5,r6
 2000920:	2003c2c0 	call	2003c2c <sqrt>
 2000924:	100b883a 	mov	r5,r2
 2000928:	180d883a 	mov	r6,r3
 200092c:	2809883a 	mov	r4,r5
 2000930:	300b883a 	mov	r5,r6
 2000934:	2008f640 	call	2008f64 <__truncdfsf2>
 2000938:	1007883a 	mov	r3,r2
 200093c:	e0ff4915 	stw	r3,-732(fp)
   float direction [] = {x/length, y/length};
 2000940:	e0ff4717 	ldw	r3,-740(fp)
 2000944:	e0bf4917 	ldw	r2,-732(fp)
 2000948:	1885fff2 	custom	255,r2,r3,r2
 200094c:	e0bfbb15 	stw	r2,-276(fp)
 2000950:	e0ff4817 	ldw	r3,-736(fp)
 2000954:	e0bf4917 	ldw	r2,-732(fp)
 2000958:	1885fff2 	custom	255,r2,r3,r2
 200095c:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 2.0, 400.0);
 2000960:	e13f4917 	ldw	r4,-732(fp)
 2000964:	2008e540 	call	2008e54 <__extendsfdf2>
 2000968:	1011883a 	mov	r8,r2
 200096c:	1813883a 	mov	r9,r3
 2000970:	000d883a 	mov	r6,zero
 2000974:	01d00034 	movhi	r7,16384
 2000978:	4009883a 	mov	r4,r8
 200097c:	480b883a 	mov	r5,r9
 2000980:	20073000 	call	2007300 <__divdf3>
 2000984:	1009883a 	mov	r4,r2
 2000988:	180b883a 	mov	r5,r3
 200098c:	2005883a 	mov	r2,r4
 2000990:	2807883a 	mov	r3,r5
 2000994:	000d883a 	mov	r6,zero
 2000998:	01d01e74 	movhi	r7,16505
 200099c:	1009883a 	mov	r4,r2
 20009a0:	180b883a 	mov	r5,r3
 20009a4:	20037f80 	call	20037f8 <fmin>
 20009a8:	100b883a 	mov	r5,r2
 20009ac:	180d883a 	mov	r6,r3
 20009b0:	2809883a 	mov	r4,r5
 20009b4:	300b883a 	mov	r5,r6
 20009b8:	2008f640 	call	2008f64 <__truncdfsf2>
 20009bc:	1007883a 	mov	r3,r2
 20009c0:	e0ff3f15 	stw	r3,-772(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20009c4:	e0bfe504 	addi	r2,fp,-108
 20009c8:	00c01404 	movi	r3,80
 20009cc:	180d883a 	mov	r6,r3
 20009d0:	000b883a 	mov	r5,zero
 20009d4:	1009883a 	mov	r4,r2
 20009d8:	20093180 	call	2009318 <memset>
 20009dc:	e0ffbb17 	ldw	r3,-276(fp)
 20009e0:	e0bf3f17 	ldw	r2,-772(fp)
 20009e4:	1887ff32 	custom	252,r3,r3,r2
 20009e8:	0090a834 	movhi	r2,17056
 20009ec:	1885fff2 	custom	255,r2,r3,r2
 20009f0:	e0bfe515 	stw	r2,-108(fp)
 20009f4:	e0ffbc17 	ldw	r3,-272(fp)
 20009f8:	e0bf3f17 	ldw	r2,-772(fp)
 20009fc:	1887ff32 	custom	252,r3,r3,r2
 2000a00:	0090a834 	movhi	r2,17056
 2000a04:	1885fff2 	custom	255,r2,r3,r2
 2000a08:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   DEBUG_PRINT("[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 2000a0c:	e0bf4217 	ldw	r2,-760(fp)
 2000a10:	15000017 	ldw	r20,0(r2)
 2000a14:	e0bf4317 	ldw	r2,-756(fp)
 2000a18:	15400017 	ldw	r21,0(r2)
 2000a1c:	e13f3f17 	ldw	r4,-772(fp)
 2000a20:	2008e540 	call	2008e54 <__extendsfdf2>
 2000a24:	1025883a 	mov	r18,r2
 2000a28:	1827883a 	mov	r19,r3
 2000a2c:	e0bfe517 	ldw	r2,-108(fp)
 2000a30:	1009883a 	mov	r4,r2
 2000a34:	2008e540 	call	2008e54 <__extendsfdf2>
 2000a38:	1021883a 	mov	r16,r2
 2000a3c:	1823883a 	mov	r17,r3
 2000a40:	e0bfe617 	ldw	r2,-104(fp)
 2000a44:	1009883a 	mov	r4,r2
 2000a48:	2008e540 	call	2008e54 <__extendsfdf2>
 2000a4c:	1009883a 	mov	r4,r2
 2000a50:	180b883a 	mov	r5,r3
 2000a54:	d9000315 	stw	r4,12(sp)
 2000a58:	d9400415 	stw	r5,16(sp)
 2000a5c:	dc000115 	stw	r16,4(sp)
 2000a60:	dc400215 	stw	r17,8(sp)
 2000a64:	dcc00015 	stw	r19,0(sp)
 2000a68:	900f883a 	mov	r7,r18
 2000a6c:	a80d883a 	mov	r6,r21
 2000a70:	a00b883a 	mov	r5,r20
 2000a74:	010080b4 	movhi	r4,514
 2000a78:	21079a04 	addi	r4,r4,7784
 2000a7c:	20095400 	call	2009540 <printf>
   DEBUG_PRINT(" effect : (%d, %d)\n",*effect_x, *effect_y);
 2000a80:	e0bf4417 	ldw	r2,-752(fp)
 2000a84:	10c00017 	ldw	r3,0(r2)
 2000a88:	e0bf4517 	ldw	r2,-748(fp)
 2000a8c:	10800017 	ldw	r2,0(r2)
 2000a90:	100d883a 	mov	r6,r2
 2000a94:	180b883a 	mov	r5,r3
 2000a98:	010080b4 	movhi	r4,514
 2000a9c:	2107b004 	addi	r4,r4,7872
 2000aa0:	20095400 	call	2009540 <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 2000aa4:	e0bfbd04 	addi	r2,fp,-268
 2000aa8:	00c02804 	movi	r3,160
 2000aac:	180d883a 	mov	r6,r3
 2000ab0:	000b883a 	mov	r5,zero
 2000ab4:	1009883a 	mov	r4,r2
 2000ab8:	20093180 	call	2009318 <memset>
   float theta = atan2f(*effect_x-446, *effect_y-263);
 2000abc:	e0bf4417 	ldw	r2,-752(fp)
 2000ac0:	10800017 	ldw	r2,0(r2)
 2000ac4:	10bf9084 	addi	r2,r2,-446
 2000ac8:	1007feb2 	custom	250,r3,r2,zero
 2000acc:	e0bf4517 	ldw	r2,-748(fp)
 2000ad0:	10800017 	ldw	r2,0(r2)
 2000ad4:	10bfbe44 	addi	r2,r2,-263
 2000ad8:	1005feb2 	custom	250,r2,r2,zero
 2000adc:	100b883a 	mov	r5,r2
 2000ae0:	1809883a 	mov	r4,r3
 2000ae4:	2003da00 	call	2003da0 <atan2f>
 2000ae8:	e0bf4a15 	stw	r2,-728(fp)
   DEBUG_PRINT("theta : %f",theta);
 2000aec:	e13f4a17 	ldw	r4,-728(fp)
 2000af0:	2008e540 	call	2008e54 <__extendsfdf2>
 2000af4:	100d883a 	mov	r6,r2
 2000af8:	180f883a 	mov	r7,r3
 2000afc:	300b883a 	mov	r5,r6
 2000b00:	380d883a 	mov	r6,r7
 2000b04:	010080b4 	movhi	r4,514
 2000b08:	2107b504 	addi	r4,r4,7892
 2000b0c:	20095400 	call	2009540 <printf>

   while(speed >= 0.1)
 2000b10:	0006bf06 	br	2002610 <task2+0x1fdc>
   {
	   //Border Collide

	   borderCollide(ball[0], border_collision[0], velocity[0]);
 2000b14:	e13fe504 	addi	r4,fp,-108
 2000b18:	e0ffbd04 	addi	r3,fp,-268
 2000b1c:	e0bf4c04 	addi	r2,fp,-720
 2000b20:	200d883a 	mov	r6,r4
 2000b24:	180b883a 	mov	r5,r3
 2000b28:	1009883a 	mov	r4,r2
 2000b2c:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 2000b30:	e0bfe504 	addi	r2,fp,-108
 2000b34:	11000204 	addi	r4,r2,8
 2000b38:	e0bfbd04 	addi	r2,fp,-268
 2000b3c:	10c00404 	addi	r3,r2,16
 2000b40:	e0bf4c04 	addi	r2,fp,-720
 2000b44:	10800204 	addi	r2,r2,8
 2000b48:	200d883a 	mov	r6,r4
 2000b4c:	180b883a 	mov	r5,r3
 2000b50:	1009883a 	mov	r4,r2
 2000b54:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 2000b58:	e0bfe504 	addi	r2,fp,-108
 2000b5c:	11000404 	addi	r4,r2,16
 2000b60:	e0bfbd04 	addi	r2,fp,-268
 2000b64:	10c00804 	addi	r3,r2,32
 2000b68:	e0bf4c04 	addi	r2,fp,-720
 2000b6c:	10800404 	addi	r2,r2,16
 2000b70:	200d883a 	mov	r6,r4
 2000b74:	180b883a 	mov	r5,r3
 2000b78:	1009883a 	mov	r4,r2
 2000b7c:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 2000b80:	e0bfe504 	addi	r2,fp,-108
 2000b84:	11000604 	addi	r4,r2,24
 2000b88:	e0bfbd04 	addi	r2,fp,-268
 2000b8c:	10c00c04 	addi	r3,r2,48
 2000b90:	e0bf4c04 	addi	r2,fp,-720
 2000b94:	10800604 	addi	r2,r2,24
 2000b98:	200d883a 	mov	r6,r4
 2000b9c:	180b883a 	mov	r5,r3
 2000ba0:	1009883a 	mov	r4,r2
 2000ba4:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 2000ba8:	e0bfe504 	addi	r2,fp,-108
 2000bac:	11000804 	addi	r4,r2,32
 2000bb0:	e0bfbd04 	addi	r2,fp,-268
 2000bb4:	10c01004 	addi	r3,r2,64
 2000bb8:	e0bf4c04 	addi	r2,fp,-720
 2000bbc:	10800804 	addi	r2,r2,32
 2000bc0:	200d883a 	mov	r6,r4
 2000bc4:	180b883a 	mov	r5,r3
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 2000bd0:	e0bfe504 	addi	r2,fp,-108
 2000bd4:	11000a04 	addi	r4,r2,40
 2000bd8:	e0bfbd04 	addi	r2,fp,-268
 2000bdc:	10c01404 	addi	r3,r2,80
 2000be0:	e0bf4c04 	addi	r2,fp,-720
 2000be4:	10800a04 	addi	r2,r2,40
 2000be8:	200d883a 	mov	r6,r4
 2000bec:	180b883a 	mov	r5,r3
 2000bf0:	1009883a 	mov	r4,r2
 2000bf4:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 2000bf8:	e0bfe504 	addi	r2,fp,-108
 2000bfc:	11000c04 	addi	r4,r2,48
 2000c00:	e0bfbd04 	addi	r2,fp,-268
 2000c04:	10c01804 	addi	r3,r2,96
 2000c08:	e0bf4c04 	addi	r2,fp,-720
 2000c0c:	10800c04 	addi	r2,r2,48
 2000c10:	200d883a 	mov	r6,r4
 2000c14:	180b883a 	mov	r5,r3
 2000c18:	1009883a 	mov	r4,r2
 2000c1c:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 2000c20:	e0bfe504 	addi	r2,fp,-108
 2000c24:	11000e04 	addi	r4,r2,56
 2000c28:	e0bfbd04 	addi	r2,fp,-268
 2000c2c:	10c01c04 	addi	r3,r2,112
 2000c30:	e0bf4c04 	addi	r2,fp,-720
 2000c34:	10800e04 	addi	r2,r2,56
 2000c38:	200d883a 	mov	r6,r4
 2000c3c:	180b883a 	mov	r5,r3
 2000c40:	1009883a 	mov	r4,r2
 2000c44:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 2000c48:	e0bfe504 	addi	r2,fp,-108
 2000c4c:	11001004 	addi	r4,r2,64
 2000c50:	e0bfbd04 	addi	r2,fp,-268
 2000c54:	10c02004 	addi	r3,r2,128
 2000c58:	e0bf4c04 	addi	r2,fp,-720
 2000c5c:	10801004 	addi	r2,r2,64
 2000c60:	200d883a 	mov	r6,r4
 2000c64:	180b883a 	mov	r5,r3
 2000c68:	1009883a 	mov	r4,r2
 2000c6c:	2002ffc0 	call	2002ffc <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 2000c70:	e0bfe504 	addi	r2,fp,-108
 2000c74:	11001204 	addi	r4,r2,72
 2000c78:	e0bfbd04 	addi	r2,fp,-268
 2000c7c:	10c02404 	addi	r3,r2,144
 2000c80:	e0bf4c04 	addi	r2,fp,-720
 2000c84:	10801204 	addi	r2,r2,72
 2000c88:	200d883a 	mov	r6,r4
 2000c8c:	180b883a 	mov	r5,r3
 2000c90:	1009883a 	mov	r4,r2
 2000c94:	2002ffc0 	call	2002ffc <borderCollide>

       //Move the ball

       if(theta < 0.1)
 2000c98:	e13f4a17 	ldw	r4,-728(fp)
 2000c9c:	2008e540 	call	2008e54 <__extendsfdf2>
 2000ca0:	1011883a 	mov	r8,r2
 2000ca4:	1813883a 	mov	r9,r3
 2000ca8:	01a666b4 	movhi	r6,39322
 2000cac:	31a66684 	addi	r6,r6,-26214
 2000cb0:	01cfeeb4 	movhi	r7,16314
 2000cb4:	39e66644 	addi	r7,r7,-26215
 2000cb8:	4009883a 	mov	r4,r8
 2000cbc:	480b883a 	mov	r5,r9
 2000cc0:	2007d4c0 	call	2007d4c <__ledf2>
 2000cc4:	1000080e 	bge	r2,zero,2000ce8 <task2+0x6b4>
    	   moveBall(ball[0], velocity[0], 0, 0);
 2000cc8:	e0ffe504 	addi	r3,fp,-108
 2000ccc:	e0bf4c04 	addi	r2,fp,-720
 2000cd0:	000f883a 	mov	r7,zero
 2000cd4:	000d883a 	mov	r6,zero
 2000cd8:	180b883a 	mov	r5,r3
 2000cdc:	1009883a 	mov	r4,r2
 2000ce0:	20036000 	call	2003600 <moveBall>
 2000ce4:	00000706 	br	2000d04 <task2+0x6d0>
       else
    	   moveBall(ball[0], velocity[0],theta,1);
 2000ce8:	e0ffe504 	addi	r3,fp,-108
 2000cec:	e0bf4c04 	addi	r2,fp,-720
 2000cf0:	01c00044 	movi	r7,1
 2000cf4:	e1bf4a17 	ldw	r6,-728(fp)
 2000cf8:	180b883a 	mov	r5,r3
 2000cfc:	1009883a 	mov	r4,r2
 2000d00:	20036000 	call	2003600 <moveBall>
       moveBall(ball[1], velocity[1],0,0);
 2000d04:	e0bfe504 	addi	r2,fp,-108
 2000d08:	10c00204 	addi	r3,r2,8
 2000d0c:	e0bf4c04 	addi	r2,fp,-720
 2000d10:	10800204 	addi	r2,r2,8
 2000d14:	000f883a 	mov	r7,zero
 2000d18:	000d883a 	mov	r6,zero
 2000d1c:	180b883a 	mov	r5,r3
 2000d20:	1009883a 	mov	r4,r2
 2000d24:	20036000 	call	2003600 <moveBall>
       moveBall(ball[2], velocity[2],0,0);
 2000d28:	e0bfe504 	addi	r2,fp,-108
 2000d2c:	10c00404 	addi	r3,r2,16
 2000d30:	e0bf4c04 	addi	r2,fp,-720
 2000d34:	10800404 	addi	r2,r2,16
 2000d38:	000f883a 	mov	r7,zero
 2000d3c:	000d883a 	mov	r6,zero
 2000d40:	180b883a 	mov	r5,r3
 2000d44:	1009883a 	mov	r4,r2
 2000d48:	20036000 	call	2003600 <moveBall>
       moveBall(ball[3], velocity[3],0,0);
 2000d4c:	e0bfe504 	addi	r2,fp,-108
 2000d50:	10c00604 	addi	r3,r2,24
 2000d54:	e0bf4c04 	addi	r2,fp,-720
 2000d58:	10800604 	addi	r2,r2,24
 2000d5c:	000f883a 	mov	r7,zero
 2000d60:	000d883a 	mov	r6,zero
 2000d64:	180b883a 	mov	r5,r3
 2000d68:	1009883a 	mov	r4,r2
 2000d6c:	20036000 	call	2003600 <moveBall>
       moveBall(ball[4], velocity[4],0,0);
 2000d70:	e0bfe504 	addi	r2,fp,-108
 2000d74:	10c00804 	addi	r3,r2,32
 2000d78:	e0bf4c04 	addi	r2,fp,-720
 2000d7c:	10800804 	addi	r2,r2,32
 2000d80:	000f883a 	mov	r7,zero
 2000d84:	000d883a 	mov	r6,zero
 2000d88:	180b883a 	mov	r5,r3
 2000d8c:	1009883a 	mov	r4,r2
 2000d90:	20036000 	call	2003600 <moveBall>
       moveBall(ball[5], velocity[5],0,0);
 2000d94:	e0bfe504 	addi	r2,fp,-108
 2000d98:	10c00a04 	addi	r3,r2,40
 2000d9c:	e0bf4c04 	addi	r2,fp,-720
 2000da0:	10800a04 	addi	r2,r2,40
 2000da4:	000f883a 	mov	r7,zero
 2000da8:	000d883a 	mov	r6,zero
 2000dac:	180b883a 	mov	r5,r3
 2000db0:	1009883a 	mov	r4,r2
 2000db4:	20036000 	call	2003600 <moveBall>
       moveBall(ball[6], velocity[6],0,0);
 2000db8:	e0bfe504 	addi	r2,fp,-108
 2000dbc:	10c00c04 	addi	r3,r2,48
 2000dc0:	e0bf4c04 	addi	r2,fp,-720
 2000dc4:	10800c04 	addi	r2,r2,48
 2000dc8:	000f883a 	mov	r7,zero
 2000dcc:	000d883a 	mov	r6,zero
 2000dd0:	180b883a 	mov	r5,r3
 2000dd4:	1009883a 	mov	r4,r2
 2000dd8:	20036000 	call	2003600 <moveBall>
       moveBall(ball[7], velocity[7],0,0);
 2000ddc:	e0bfe504 	addi	r2,fp,-108
 2000de0:	10c00e04 	addi	r3,r2,56
 2000de4:	e0bf4c04 	addi	r2,fp,-720
 2000de8:	10800e04 	addi	r2,r2,56
 2000dec:	000f883a 	mov	r7,zero
 2000df0:	000d883a 	mov	r6,zero
 2000df4:	180b883a 	mov	r5,r3
 2000df8:	1009883a 	mov	r4,r2
 2000dfc:	20036000 	call	2003600 <moveBall>
       moveBall(ball[8], velocity[8],0,0);
 2000e00:	e0bfe504 	addi	r2,fp,-108
 2000e04:	10c01004 	addi	r3,r2,64
 2000e08:	e0bf4c04 	addi	r2,fp,-720
 2000e0c:	10801004 	addi	r2,r2,64
 2000e10:	000f883a 	mov	r7,zero
 2000e14:	000d883a 	mov	r6,zero
 2000e18:	180b883a 	mov	r5,r3
 2000e1c:	1009883a 	mov	r4,r2
 2000e20:	20036000 	call	2003600 <moveBall>
       moveBall(ball[9], velocity[9],0,0);
 2000e24:	e0bfe504 	addi	r2,fp,-108
 2000e28:	10c01204 	addi	r3,r2,72
 2000e2c:	e0bf4c04 	addi	r2,fp,-720
 2000e30:	10801204 	addi	r2,r2,72
 2000e34:	000f883a 	mov	r7,zero
 2000e38:	000d883a 	mov	r6,zero
 2000e3c:	180b883a 	mov	r5,r3
 2000e40:	1009883a 	mov	r4,r2
 2000e44:	20036000 	call	2003600 <moveBall>

       //Whole collision

       if(whole_collide(ball[1],velocity[1])) number_of_ball -= 1;
 2000e48:	e0bfe504 	addi	r2,fp,-108
 2000e4c:	10c00204 	addi	r3,r2,8
 2000e50:	e0bf4c04 	addi	r2,fp,-720
 2000e54:	10800204 	addi	r2,r2,8
 2000e58:	180b883a 	mov	r5,r3
 2000e5c:	1009883a 	mov	r4,r2
 2000e60:	2002e880 	call	2002e88 <whole_collide>
 2000e64:	10000326 	beq	r2,zero,2000e74 <task2+0x840>
 2000e68:	e0bfba17 	ldw	r2,-280(fp)
 2000e6c:	10bfffc4 	addi	r2,r2,-1
 2000e70:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[2],velocity[2])) number_of_ball -= 1;
 2000e74:	e0bfe504 	addi	r2,fp,-108
 2000e78:	10c00404 	addi	r3,r2,16
 2000e7c:	e0bf4c04 	addi	r2,fp,-720
 2000e80:	10800404 	addi	r2,r2,16
 2000e84:	180b883a 	mov	r5,r3
 2000e88:	1009883a 	mov	r4,r2
 2000e8c:	2002e880 	call	2002e88 <whole_collide>
 2000e90:	10000326 	beq	r2,zero,2000ea0 <task2+0x86c>
 2000e94:	e0bfba17 	ldw	r2,-280(fp)
 2000e98:	10bfffc4 	addi	r2,r2,-1
 2000e9c:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[3],velocity[3])) number_of_ball -= 1;
 2000ea0:	e0bfe504 	addi	r2,fp,-108
 2000ea4:	10c00604 	addi	r3,r2,24
 2000ea8:	e0bf4c04 	addi	r2,fp,-720
 2000eac:	10800604 	addi	r2,r2,24
 2000eb0:	180b883a 	mov	r5,r3
 2000eb4:	1009883a 	mov	r4,r2
 2000eb8:	2002e880 	call	2002e88 <whole_collide>
 2000ebc:	10000326 	beq	r2,zero,2000ecc <task2+0x898>
 2000ec0:	e0bfba17 	ldw	r2,-280(fp)
 2000ec4:	10bfffc4 	addi	r2,r2,-1
 2000ec8:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[4],velocity[4])) number_of_ball -= 1;
 2000ecc:	e0bfe504 	addi	r2,fp,-108
 2000ed0:	10c00804 	addi	r3,r2,32
 2000ed4:	e0bf4c04 	addi	r2,fp,-720
 2000ed8:	10800804 	addi	r2,r2,32
 2000edc:	180b883a 	mov	r5,r3
 2000ee0:	1009883a 	mov	r4,r2
 2000ee4:	2002e880 	call	2002e88 <whole_collide>
 2000ee8:	10000326 	beq	r2,zero,2000ef8 <task2+0x8c4>
 2000eec:	e0bfba17 	ldw	r2,-280(fp)
 2000ef0:	10bfffc4 	addi	r2,r2,-1
 2000ef4:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[5],velocity[5])) number_of_ball -= 1;
 2000ef8:	e0bfe504 	addi	r2,fp,-108
 2000efc:	10c00a04 	addi	r3,r2,40
 2000f00:	e0bf4c04 	addi	r2,fp,-720
 2000f04:	10800a04 	addi	r2,r2,40
 2000f08:	180b883a 	mov	r5,r3
 2000f0c:	1009883a 	mov	r4,r2
 2000f10:	2002e880 	call	2002e88 <whole_collide>
 2000f14:	10000326 	beq	r2,zero,2000f24 <task2+0x8f0>
 2000f18:	e0bfba17 	ldw	r2,-280(fp)
 2000f1c:	10bfffc4 	addi	r2,r2,-1
 2000f20:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[6],velocity[6])) number_of_ball -= 1;
 2000f24:	e0bfe504 	addi	r2,fp,-108
 2000f28:	10c00c04 	addi	r3,r2,48
 2000f2c:	e0bf4c04 	addi	r2,fp,-720
 2000f30:	10800c04 	addi	r2,r2,48
 2000f34:	180b883a 	mov	r5,r3
 2000f38:	1009883a 	mov	r4,r2
 2000f3c:	2002e880 	call	2002e88 <whole_collide>
 2000f40:	10000326 	beq	r2,zero,2000f50 <task2+0x91c>
 2000f44:	e0bfba17 	ldw	r2,-280(fp)
 2000f48:	10bfffc4 	addi	r2,r2,-1
 2000f4c:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[7],velocity[7])) number_of_ball -= 1;
 2000f50:	e0bfe504 	addi	r2,fp,-108
 2000f54:	10c00e04 	addi	r3,r2,56
 2000f58:	e0bf4c04 	addi	r2,fp,-720
 2000f5c:	10800e04 	addi	r2,r2,56
 2000f60:	180b883a 	mov	r5,r3
 2000f64:	1009883a 	mov	r4,r2
 2000f68:	2002e880 	call	2002e88 <whole_collide>
 2000f6c:	10000326 	beq	r2,zero,2000f7c <task2+0x948>
 2000f70:	e0bfba17 	ldw	r2,-280(fp)
 2000f74:	10bfffc4 	addi	r2,r2,-1
 2000f78:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[8],velocity[8])) number_of_ball -= 1;
 2000f7c:	e0bfe504 	addi	r2,fp,-108
 2000f80:	10c01004 	addi	r3,r2,64
 2000f84:	e0bf4c04 	addi	r2,fp,-720
 2000f88:	10801004 	addi	r2,r2,64
 2000f8c:	180b883a 	mov	r5,r3
 2000f90:	1009883a 	mov	r4,r2
 2000f94:	2002e880 	call	2002e88 <whole_collide>
 2000f98:	10000326 	beq	r2,zero,2000fa8 <task2+0x974>
 2000f9c:	e0bfba17 	ldw	r2,-280(fp)
 2000fa0:	10bfffc4 	addi	r2,r2,-1
 2000fa4:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[9],velocity[9])) number_of_ball -= 1;
 2000fa8:	e0bfe504 	addi	r2,fp,-108
 2000fac:	10c01204 	addi	r3,r2,72
 2000fb0:	e0bf4c04 	addi	r2,fp,-720
 2000fb4:	10801204 	addi	r2,r2,72
 2000fb8:	180b883a 	mov	r5,r3
 2000fbc:	1009883a 	mov	r4,r2
 2000fc0:	2002e880 	call	2002e88 <whole_collide>
 2000fc4:	10000326 	beq	r2,zero,2000fd4 <task2+0x9a0>
 2000fc8:	e0bfba17 	ldw	r2,-280(fp)
 2000fcc:	10bfffc4 	addi	r2,r2,-1
 2000fd0:	e0bfba15 	stw	r2,-280(fp)

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000fd4:	e13f6004 	addi	r4,fp,-640
 2000fd8:	e0bf4c04 	addi	r2,fp,-720
 2000fdc:	10c00204 	addi	r3,r2,8
 2000fe0:	e0bf4c04 	addi	r2,fp,-720
 2000fe4:	200d883a 	mov	r6,r4
 2000fe8:	180b883a 	mov	r5,r3
 2000fec:	1009883a 	mov	r4,r2
 2000ff0:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000ff4:	e0bf6004 	addi	r2,fp,-640
 2000ff8:	11000204 	addi	r4,r2,8
 2000ffc:	e0bf4c04 	addi	r2,fp,-720
 2001000:	10c00404 	addi	r3,r2,16
 2001004:	e0bf4c04 	addi	r2,fp,-720
 2001008:	200d883a 	mov	r6,r4
 200100c:	180b883a 	mov	r5,r3
 2001010:	1009883a 	mov	r4,r2
 2001014:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2001018:	e0bf6004 	addi	r2,fp,-640
 200101c:	11000404 	addi	r4,r2,16
 2001020:	e0bf4c04 	addi	r2,fp,-720
 2001024:	10c00604 	addi	r3,r2,24
 2001028:	e0bf4c04 	addi	r2,fp,-720
 200102c:	200d883a 	mov	r6,r4
 2001030:	180b883a 	mov	r5,r3
 2001034:	1009883a 	mov	r4,r2
 2001038:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 200103c:	e0bf6004 	addi	r2,fp,-640
 2001040:	11000604 	addi	r4,r2,24
 2001044:	e0bf4c04 	addi	r2,fp,-720
 2001048:	10c00804 	addi	r3,r2,32
 200104c:	e0bf4c04 	addi	r2,fp,-720
 2001050:	200d883a 	mov	r6,r4
 2001054:	180b883a 	mov	r5,r3
 2001058:	1009883a 	mov	r4,r2
 200105c:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2001060:	e0bf6004 	addi	r2,fp,-640
 2001064:	11000804 	addi	r4,r2,32
 2001068:	e0bf4c04 	addi	r2,fp,-720
 200106c:	10c00a04 	addi	r3,r2,40
 2001070:	e0bf4c04 	addi	r2,fp,-720
 2001074:	200d883a 	mov	r6,r4
 2001078:	180b883a 	mov	r5,r3
 200107c:	1009883a 	mov	r4,r2
 2001080:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2001084:	e0bf6004 	addi	r2,fp,-640
 2001088:	11000a04 	addi	r4,r2,40
 200108c:	e0bf4c04 	addi	r2,fp,-720
 2001090:	10c00c04 	addi	r3,r2,48
 2001094:	e0bf4c04 	addi	r2,fp,-720
 2001098:	200d883a 	mov	r6,r4
 200109c:	180b883a 	mov	r5,r3
 20010a0:	1009883a 	mov	r4,r2
 20010a4:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 20010a8:	e0bf6004 	addi	r2,fp,-640
 20010ac:	11000c04 	addi	r4,r2,48
 20010b0:	e0bf4c04 	addi	r2,fp,-720
 20010b4:	10c00e04 	addi	r3,r2,56
 20010b8:	e0bf4c04 	addi	r2,fp,-720
 20010bc:	200d883a 	mov	r6,r4
 20010c0:	180b883a 	mov	r5,r3
 20010c4:	1009883a 	mov	r4,r2
 20010c8:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 20010cc:	e0bf6004 	addi	r2,fp,-640
 20010d0:	11000e04 	addi	r4,r2,56
 20010d4:	e0bf4c04 	addi	r2,fp,-720
 20010d8:	10c01004 	addi	r3,r2,64
 20010dc:	e0bf4c04 	addi	r2,fp,-720
 20010e0:	200d883a 	mov	r6,r4
 20010e4:	180b883a 	mov	r5,r3
 20010e8:	1009883a 	mov	r4,r2
 20010ec:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 20010f0:	e0bf6004 	addi	r2,fp,-640
 20010f4:	11001004 	addi	r4,r2,64
 20010f8:	e0bf4c04 	addi	r2,fp,-720
 20010fc:	10c01204 	addi	r3,r2,72
 2001100:	e0bf4c04 	addi	r2,fp,-720
 2001104:	200d883a 	mov	r6,r4
 2001108:	180b883a 	mov	r5,r3
 200110c:	1009883a 	mov	r4,r2
 2001110:	20031b80 	call	20031b8 <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2001114:	e0bf6004 	addi	r2,fp,-640
 2001118:	11001204 	addi	r4,r2,72
 200111c:	e0bf4c04 	addi	r2,fp,-720
 2001120:	10c00404 	addi	r3,r2,16
 2001124:	e0bf4c04 	addi	r2,fp,-720
 2001128:	10800204 	addi	r2,r2,8
 200112c:	200d883a 	mov	r6,r4
 2001130:	180b883a 	mov	r5,r3
 2001134:	1009883a 	mov	r4,r2
 2001138:	20031b80 	call	20031b8 <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 200113c:	e0bf6004 	addi	r2,fp,-640
 2001140:	11001404 	addi	r4,r2,80
 2001144:	e0bf4c04 	addi	r2,fp,-720
 2001148:	10c00604 	addi	r3,r2,24
 200114c:	e0bf4c04 	addi	r2,fp,-720
 2001150:	10800204 	addi	r2,r2,8
 2001154:	200d883a 	mov	r6,r4
 2001158:	180b883a 	mov	r5,r3
 200115c:	1009883a 	mov	r4,r2
 2001160:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2001164:	e0bf6004 	addi	r2,fp,-640
 2001168:	11001604 	addi	r4,r2,88
 200116c:	e0bf4c04 	addi	r2,fp,-720
 2001170:	10c00804 	addi	r3,r2,32
 2001174:	e0bf4c04 	addi	r2,fp,-720
 2001178:	10800204 	addi	r2,r2,8
 200117c:	200d883a 	mov	r6,r4
 2001180:	180b883a 	mov	r5,r3
 2001184:	1009883a 	mov	r4,r2
 2001188:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 200118c:	e0bf6004 	addi	r2,fp,-640
 2001190:	11001804 	addi	r4,r2,96
 2001194:	e0bf4c04 	addi	r2,fp,-720
 2001198:	10c00a04 	addi	r3,r2,40
 200119c:	e0bf4c04 	addi	r2,fp,-720
 20011a0:	10800204 	addi	r2,r2,8
 20011a4:	200d883a 	mov	r6,r4
 20011a8:	180b883a 	mov	r5,r3
 20011ac:	1009883a 	mov	r4,r2
 20011b0:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 20011b4:	e0bf6004 	addi	r2,fp,-640
 20011b8:	11001a04 	addi	r4,r2,104
 20011bc:	e0bf4c04 	addi	r2,fp,-720
 20011c0:	10c00c04 	addi	r3,r2,48
 20011c4:	e0bf4c04 	addi	r2,fp,-720
 20011c8:	10800204 	addi	r2,r2,8
 20011cc:	200d883a 	mov	r6,r4
 20011d0:	180b883a 	mov	r5,r3
 20011d4:	1009883a 	mov	r4,r2
 20011d8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 20011dc:	e0bf6004 	addi	r2,fp,-640
 20011e0:	11001c04 	addi	r4,r2,112
 20011e4:	e0bf4c04 	addi	r2,fp,-720
 20011e8:	10c00e04 	addi	r3,r2,56
 20011ec:	e0bf4c04 	addi	r2,fp,-720
 20011f0:	10800204 	addi	r2,r2,8
 20011f4:	200d883a 	mov	r6,r4
 20011f8:	180b883a 	mov	r5,r3
 20011fc:	1009883a 	mov	r4,r2
 2001200:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2001204:	e0bf6004 	addi	r2,fp,-640
 2001208:	11001e04 	addi	r4,r2,120
 200120c:	e0bf4c04 	addi	r2,fp,-720
 2001210:	10c01004 	addi	r3,r2,64
 2001214:	e0bf4c04 	addi	r2,fp,-720
 2001218:	10800204 	addi	r2,r2,8
 200121c:	200d883a 	mov	r6,r4
 2001220:	180b883a 	mov	r5,r3
 2001224:	1009883a 	mov	r4,r2
 2001228:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 200122c:	e0bf6004 	addi	r2,fp,-640
 2001230:	11002004 	addi	r4,r2,128
 2001234:	e0bf4c04 	addi	r2,fp,-720
 2001238:	10c01204 	addi	r3,r2,72
 200123c:	e0bf4c04 	addi	r2,fp,-720
 2001240:	10800204 	addi	r2,r2,8
 2001244:	200d883a 	mov	r6,r4
 2001248:	180b883a 	mov	r5,r3
 200124c:	1009883a 	mov	r4,r2
 2001250:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2001254:	e0bf6004 	addi	r2,fp,-640
 2001258:	11002204 	addi	r4,r2,136
 200125c:	e0bf4c04 	addi	r2,fp,-720
 2001260:	10c00604 	addi	r3,r2,24
 2001264:	e0bf4c04 	addi	r2,fp,-720
 2001268:	10800404 	addi	r2,r2,16
 200126c:	200d883a 	mov	r6,r4
 2001270:	180b883a 	mov	r5,r3
 2001274:	1009883a 	mov	r4,r2
 2001278:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 200127c:	e0bf6004 	addi	r2,fp,-640
 2001280:	11002404 	addi	r4,r2,144
 2001284:	e0bf4c04 	addi	r2,fp,-720
 2001288:	10c00804 	addi	r3,r2,32
 200128c:	e0bf4c04 	addi	r2,fp,-720
 2001290:	10800404 	addi	r2,r2,16
 2001294:	200d883a 	mov	r6,r4
 2001298:	180b883a 	mov	r5,r3
 200129c:	1009883a 	mov	r4,r2
 20012a0:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 20012a4:	e0bf6004 	addi	r2,fp,-640
 20012a8:	11002604 	addi	r4,r2,152
 20012ac:	e0bf4c04 	addi	r2,fp,-720
 20012b0:	10c00a04 	addi	r3,r2,40
 20012b4:	e0bf4c04 	addi	r2,fp,-720
 20012b8:	10800404 	addi	r2,r2,16
 20012bc:	200d883a 	mov	r6,r4
 20012c0:	180b883a 	mov	r5,r3
 20012c4:	1009883a 	mov	r4,r2
 20012c8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 20012cc:	e0bf6004 	addi	r2,fp,-640
 20012d0:	11002804 	addi	r4,r2,160
 20012d4:	e0bf4c04 	addi	r2,fp,-720
 20012d8:	10c00c04 	addi	r3,r2,48
 20012dc:	e0bf4c04 	addi	r2,fp,-720
 20012e0:	10800404 	addi	r2,r2,16
 20012e4:	200d883a 	mov	r6,r4
 20012e8:	180b883a 	mov	r5,r3
 20012ec:	1009883a 	mov	r4,r2
 20012f0:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 20012f4:	e0bf6004 	addi	r2,fp,-640
 20012f8:	11002a04 	addi	r4,r2,168
 20012fc:	e0bf4c04 	addi	r2,fp,-720
 2001300:	10c00e04 	addi	r3,r2,56
 2001304:	e0bf4c04 	addi	r2,fp,-720
 2001308:	10800404 	addi	r2,r2,16
 200130c:	200d883a 	mov	r6,r4
 2001310:	180b883a 	mov	r5,r3
 2001314:	1009883a 	mov	r4,r2
 2001318:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 200131c:	e0bf6004 	addi	r2,fp,-640
 2001320:	11002c04 	addi	r4,r2,176
 2001324:	e0bf4c04 	addi	r2,fp,-720
 2001328:	10c01004 	addi	r3,r2,64
 200132c:	e0bf4c04 	addi	r2,fp,-720
 2001330:	10800404 	addi	r2,r2,16
 2001334:	200d883a 	mov	r6,r4
 2001338:	180b883a 	mov	r5,r3
 200133c:	1009883a 	mov	r4,r2
 2001340:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2001344:	e0bf6004 	addi	r2,fp,-640
 2001348:	11002e04 	addi	r4,r2,184
 200134c:	e0bf4c04 	addi	r2,fp,-720
 2001350:	10c01204 	addi	r3,r2,72
 2001354:	e0bf4c04 	addi	r2,fp,-720
 2001358:	10800404 	addi	r2,r2,16
 200135c:	200d883a 	mov	r6,r4
 2001360:	180b883a 	mov	r5,r3
 2001364:	1009883a 	mov	r4,r2
 2001368:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 200136c:	e0bf6004 	addi	r2,fp,-640
 2001370:	11003004 	addi	r4,r2,192
 2001374:	e0bf4c04 	addi	r2,fp,-720
 2001378:	10c00804 	addi	r3,r2,32
 200137c:	e0bf4c04 	addi	r2,fp,-720
 2001380:	10800604 	addi	r2,r2,24
 2001384:	200d883a 	mov	r6,r4
 2001388:	180b883a 	mov	r5,r3
 200138c:	1009883a 	mov	r4,r2
 2001390:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2001394:	e0bf6004 	addi	r2,fp,-640
 2001398:	11003204 	addi	r4,r2,200
 200139c:	e0bf4c04 	addi	r2,fp,-720
 20013a0:	10c00a04 	addi	r3,r2,40
 20013a4:	e0bf4c04 	addi	r2,fp,-720
 20013a8:	10800604 	addi	r2,r2,24
 20013ac:	200d883a 	mov	r6,r4
 20013b0:	180b883a 	mov	r5,r3
 20013b4:	1009883a 	mov	r4,r2
 20013b8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 20013bc:	e0bf6004 	addi	r2,fp,-640
 20013c0:	11003404 	addi	r4,r2,208
 20013c4:	e0bf4c04 	addi	r2,fp,-720
 20013c8:	10c00c04 	addi	r3,r2,48
 20013cc:	e0bf4c04 	addi	r2,fp,-720
 20013d0:	10800604 	addi	r2,r2,24
 20013d4:	200d883a 	mov	r6,r4
 20013d8:	180b883a 	mov	r5,r3
 20013dc:	1009883a 	mov	r4,r2
 20013e0:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 20013e4:	e0bf6004 	addi	r2,fp,-640
 20013e8:	11003604 	addi	r4,r2,216
 20013ec:	e0bf4c04 	addi	r2,fp,-720
 20013f0:	10c00e04 	addi	r3,r2,56
 20013f4:	e0bf4c04 	addi	r2,fp,-720
 20013f8:	10800604 	addi	r2,r2,24
 20013fc:	200d883a 	mov	r6,r4
 2001400:	180b883a 	mov	r5,r3
 2001404:	1009883a 	mov	r4,r2
 2001408:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 200140c:	e0bf6004 	addi	r2,fp,-640
 2001410:	11003804 	addi	r4,r2,224
 2001414:	e0bf4c04 	addi	r2,fp,-720
 2001418:	10c01004 	addi	r3,r2,64
 200141c:	e0bf4c04 	addi	r2,fp,-720
 2001420:	10800604 	addi	r2,r2,24
 2001424:	200d883a 	mov	r6,r4
 2001428:	180b883a 	mov	r5,r3
 200142c:	1009883a 	mov	r4,r2
 2001430:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 2001434:	e0bf6004 	addi	r2,fp,-640
 2001438:	11003a04 	addi	r4,r2,232
 200143c:	e0bf4c04 	addi	r2,fp,-720
 2001440:	10c01204 	addi	r3,r2,72
 2001444:	e0bf4c04 	addi	r2,fp,-720
 2001448:	10800604 	addi	r2,r2,24
 200144c:	200d883a 	mov	r6,r4
 2001450:	180b883a 	mov	r5,r3
 2001454:	1009883a 	mov	r4,r2
 2001458:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 200145c:	e0bf6004 	addi	r2,fp,-640
 2001460:	11003c04 	addi	r4,r2,240
 2001464:	e0bf4c04 	addi	r2,fp,-720
 2001468:	10c00a04 	addi	r3,r2,40
 200146c:	e0bf4c04 	addi	r2,fp,-720
 2001470:	10800804 	addi	r2,r2,32
 2001474:	200d883a 	mov	r6,r4
 2001478:	180b883a 	mov	r5,r3
 200147c:	1009883a 	mov	r4,r2
 2001480:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 2001484:	e0bf6004 	addi	r2,fp,-640
 2001488:	11003e04 	addi	r4,r2,248
 200148c:	e0bf4c04 	addi	r2,fp,-720
 2001490:	10c00c04 	addi	r3,r2,48
 2001494:	e0bf4c04 	addi	r2,fp,-720
 2001498:	10800804 	addi	r2,r2,32
 200149c:	200d883a 	mov	r6,r4
 20014a0:	180b883a 	mov	r5,r3
 20014a4:	1009883a 	mov	r4,r2
 20014a8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 20014ac:	e0bf6004 	addi	r2,fp,-640
 20014b0:	11004004 	addi	r4,r2,256
 20014b4:	e0bf4c04 	addi	r2,fp,-720
 20014b8:	10c00e04 	addi	r3,r2,56
 20014bc:	e0bf4c04 	addi	r2,fp,-720
 20014c0:	10800804 	addi	r2,r2,32
 20014c4:	200d883a 	mov	r6,r4
 20014c8:	180b883a 	mov	r5,r3
 20014cc:	1009883a 	mov	r4,r2
 20014d0:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 20014d4:	e0bf6004 	addi	r2,fp,-640
 20014d8:	11004204 	addi	r4,r2,264
 20014dc:	e0bf4c04 	addi	r2,fp,-720
 20014e0:	10c01004 	addi	r3,r2,64
 20014e4:	e0bf4c04 	addi	r2,fp,-720
 20014e8:	10800804 	addi	r2,r2,32
 20014ec:	200d883a 	mov	r6,r4
 20014f0:	180b883a 	mov	r5,r3
 20014f4:	1009883a 	mov	r4,r2
 20014f8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 20014fc:	e0bf6004 	addi	r2,fp,-640
 2001500:	11004404 	addi	r4,r2,272
 2001504:	e0bf4c04 	addi	r2,fp,-720
 2001508:	10c01204 	addi	r3,r2,72
 200150c:	e0bf4c04 	addi	r2,fp,-720
 2001510:	10800804 	addi	r2,r2,32
 2001514:	200d883a 	mov	r6,r4
 2001518:	180b883a 	mov	r5,r3
 200151c:	1009883a 	mov	r4,r2
 2001520:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001524:	e0bf6004 	addi	r2,fp,-640
 2001528:	11004604 	addi	r4,r2,280
 200152c:	e0bf4c04 	addi	r2,fp,-720
 2001530:	10c00c04 	addi	r3,r2,48
 2001534:	e0bf4c04 	addi	r2,fp,-720
 2001538:	10800a04 	addi	r2,r2,40
 200153c:	200d883a 	mov	r6,r4
 2001540:	180b883a 	mov	r5,r3
 2001544:	1009883a 	mov	r4,r2
 2001548:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 200154c:	e0bf6004 	addi	r2,fp,-640
 2001550:	11004804 	addi	r4,r2,288
 2001554:	e0bf4c04 	addi	r2,fp,-720
 2001558:	10c00e04 	addi	r3,r2,56
 200155c:	e0bf4c04 	addi	r2,fp,-720
 2001560:	10800a04 	addi	r2,r2,40
 2001564:	200d883a 	mov	r6,r4
 2001568:	180b883a 	mov	r5,r3
 200156c:	1009883a 	mov	r4,r2
 2001570:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 2001574:	e0bf6004 	addi	r2,fp,-640
 2001578:	11004a04 	addi	r4,r2,296
 200157c:	e0bf4c04 	addi	r2,fp,-720
 2001580:	10c01004 	addi	r3,r2,64
 2001584:	e0bf4c04 	addi	r2,fp,-720
 2001588:	10800a04 	addi	r2,r2,40
 200158c:	200d883a 	mov	r6,r4
 2001590:	180b883a 	mov	r5,r3
 2001594:	1009883a 	mov	r4,r2
 2001598:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 200159c:	e0bf6004 	addi	r2,fp,-640
 20015a0:	11004c04 	addi	r4,r2,304
 20015a4:	e0bf4c04 	addi	r2,fp,-720
 20015a8:	10c01204 	addi	r3,r2,72
 20015ac:	e0bf4c04 	addi	r2,fp,-720
 20015b0:	10800a04 	addi	r2,r2,40
 20015b4:	200d883a 	mov	r6,r4
 20015b8:	180b883a 	mov	r5,r3
 20015bc:	1009883a 	mov	r4,r2
 20015c0:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 20015c4:	e0bf6004 	addi	r2,fp,-640
 20015c8:	11004e04 	addi	r4,r2,312
 20015cc:	e0bf4c04 	addi	r2,fp,-720
 20015d0:	10c00e04 	addi	r3,r2,56
 20015d4:	e0bf4c04 	addi	r2,fp,-720
 20015d8:	10800c04 	addi	r2,r2,48
 20015dc:	200d883a 	mov	r6,r4
 20015e0:	180b883a 	mov	r5,r3
 20015e4:	1009883a 	mov	r4,r2
 20015e8:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 20015ec:	e0bf6004 	addi	r2,fp,-640
 20015f0:	11005004 	addi	r4,r2,320
 20015f4:	e0bf4c04 	addi	r2,fp,-720
 20015f8:	10c01004 	addi	r3,r2,64
 20015fc:	e0bf4c04 	addi	r2,fp,-720
 2001600:	10800c04 	addi	r2,r2,48
 2001604:	200d883a 	mov	r6,r4
 2001608:	180b883a 	mov	r5,r3
 200160c:	1009883a 	mov	r4,r2
 2001610:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001614:	e0bf6004 	addi	r2,fp,-640
 2001618:	11005204 	addi	r4,r2,328
 200161c:	e0bf4c04 	addi	r2,fp,-720
 2001620:	10c01204 	addi	r3,r2,72
 2001624:	e0bf4c04 	addi	r2,fp,-720
 2001628:	10800c04 	addi	r2,r2,48
 200162c:	200d883a 	mov	r6,r4
 2001630:	180b883a 	mov	r5,r3
 2001634:	1009883a 	mov	r4,r2
 2001638:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 200163c:	e0bf6004 	addi	r2,fp,-640
 2001640:	11005404 	addi	r4,r2,336
 2001644:	e0bf4c04 	addi	r2,fp,-720
 2001648:	10c01004 	addi	r3,r2,64
 200164c:	e0bf4c04 	addi	r2,fp,-720
 2001650:	10800e04 	addi	r2,r2,56
 2001654:	200d883a 	mov	r6,r4
 2001658:	180b883a 	mov	r5,r3
 200165c:	1009883a 	mov	r4,r2
 2001660:	20031b80 	call	20031b8 <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 2001664:	e0bf6004 	addi	r2,fp,-640
 2001668:	11005604 	addi	r4,r2,344
 200166c:	e0bf4c04 	addi	r2,fp,-720
 2001670:	10c01204 	addi	r3,r2,72
 2001674:	e0bf4c04 	addi	r2,fp,-720
 2001678:	10800e04 	addi	r2,r2,56
 200167c:	200d883a 	mov	r6,r4
 2001680:	180b883a 	mov	r5,r3
 2001684:	1009883a 	mov	r4,r2
 2001688:	20031b80 	call	20031b8 <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 200168c:	e0bf6004 	addi	r2,fp,-640
 2001690:	11005804 	addi	r4,r2,352
 2001694:	e0bf4c04 	addi	r2,fp,-720
 2001698:	10c01204 	addi	r3,r2,72
 200169c:	e0bf4c04 	addi	r2,fp,-720
 20016a0:	10801004 	addi	r2,r2,64
 20016a4:	200d883a 	mov	r6,r4
 20016a8:	180b883a 	mov	r5,r3
 20016ac:	1009883a 	mov	r4,r2
 20016b0:	20031b80 	call	20031b8 <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 20016b4:	e0bfe504 	addi	r2,fp,-108
 20016b8:	11800204 	addi	r6,r2,8
 20016bc:	e17fe504 	addi	r5,fp,-108
 20016c0:	e0bf4c04 	addi	r2,fp,-720
 20016c4:	11000204 	addi	r4,r2,8
 20016c8:	e0ff4c04 	addi	r3,fp,-720
 20016cc:	d8000115 	stw	zero,4(sp)
 20016d0:	e0bf6004 	addi	r2,fp,-640
 20016d4:	d8800015 	stw	r2,0(sp)
 20016d8:	300f883a 	mov	r7,r6
 20016dc:	280d883a 	mov	r6,r5
 20016e0:	200b883a 	mov	r5,r4
 20016e4:	1809883a 	mov	r4,r3
 20016e8:	20032780 	call	2003278 <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 20016ec:	e0bfe504 	addi	r2,fp,-108
 20016f0:	11800404 	addi	r6,r2,16
 20016f4:	e17fe504 	addi	r5,fp,-108
 20016f8:	e0bf4c04 	addi	r2,fp,-720
 20016fc:	11000404 	addi	r4,r2,16
 2001700:	e0ff4c04 	addi	r3,fp,-720
 2001704:	00800044 	movi	r2,1
 2001708:	d8800115 	stw	r2,4(sp)
 200170c:	e0bf6004 	addi	r2,fp,-640
 2001710:	10800204 	addi	r2,r2,8
 2001714:	d8800015 	stw	r2,0(sp)
 2001718:	300f883a 	mov	r7,r6
 200171c:	280d883a 	mov	r6,r5
 2001720:	200b883a 	mov	r5,r4
 2001724:	1809883a 	mov	r4,r3
 2001728:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 200172c:	e0bfe504 	addi	r2,fp,-108
 2001730:	11800604 	addi	r6,r2,24
 2001734:	e17fe504 	addi	r5,fp,-108
 2001738:	e0bf4c04 	addi	r2,fp,-720
 200173c:	11000604 	addi	r4,r2,24
 2001740:	e0ff4c04 	addi	r3,fp,-720
 2001744:	00800084 	movi	r2,2
 2001748:	d8800115 	stw	r2,4(sp)
 200174c:	e0bf6004 	addi	r2,fp,-640
 2001750:	10800404 	addi	r2,r2,16
 2001754:	d8800015 	stw	r2,0(sp)
 2001758:	300f883a 	mov	r7,r6
 200175c:	280d883a 	mov	r6,r5
 2001760:	200b883a 	mov	r5,r4
 2001764:	1809883a 	mov	r4,r3
 2001768:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 200176c:	e0bfe504 	addi	r2,fp,-108
 2001770:	11800804 	addi	r6,r2,32
 2001774:	e17fe504 	addi	r5,fp,-108
 2001778:	e0bf4c04 	addi	r2,fp,-720
 200177c:	11000804 	addi	r4,r2,32
 2001780:	e0ff4c04 	addi	r3,fp,-720
 2001784:	008000c4 	movi	r2,3
 2001788:	d8800115 	stw	r2,4(sp)
 200178c:	e0bf6004 	addi	r2,fp,-640
 2001790:	10800604 	addi	r2,r2,24
 2001794:	d8800015 	stw	r2,0(sp)
 2001798:	300f883a 	mov	r7,r6
 200179c:	280d883a 	mov	r6,r5
 20017a0:	200b883a 	mov	r5,r4
 20017a4:	1809883a 	mov	r4,r3
 20017a8:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 20017ac:	e0bfe504 	addi	r2,fp,-108
 20017b0:	11800a04 	addi	r6,r2,40
 20017b4:	e17fe504 	addi	r5,fp,-108
 20017b8:	e0bf4c04 	addi	r2,fp,-720
 20017bc:	11000a04 	addi	r4,r2,40
 20017c0:	e0ff4c04 	addi	r3,fp,-720
 20017c4:	00800104 	movi	r2,4
 20017c8:	d8800115 	stw	r2,4(sp)
 20017cc:	e0bf6004 	addi	r2,fp,-640
 20017d0:	10800804 	addi	r2,r2,32
 20017d4:	d8800015 	stw	r2,0(sp)
 20017d8:	300f883a 	mov	r7,r6
 20017dc:	280d883a 	mov	r6,r5
 20017e0:	200b883a 	mov	r5,r4
 20017e4:	1809883a 	mov	r4,r3
 20017e8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 20017ec:	e0bfe504 	addi	r2,fp,-108
 20017f0:	11800c04 	addi	r6,r2,48
 20017f4:	e17fe504 	addi	r5,fp,-108
 20017f8:	e0bf4c04 	addi	r2,fp,-720
 20017fc:	11000c04 	addi	r4,r2,48
 2001800:	e0ff4c04 	addi	r3,fp,-720
 2001804:	00800144 	movi	r2,5
 2001808:	d8800115 	stw	r2,4(sp)
 200180c:	e0bf6004 	addi	r2,fp,-640
 2001810:	10800a04 	addi	r2,r2,40
 2001814:	d8800015 	stw	r2,0(sp)
 2001818:	300f883a 	mov	r7,r6
 200181c:	280d883a 	mov	r6,r5
 2001820:	200b883a 	mov	r5,r4
 2001824:	1809883a 	mov	r4,r3
 2001828:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 200182c:	e0bfe504 	addi	r2,fp,-108
 2001830:	11800e04 	addi	r6,r2,56
 2001834:	e17fe504 	addi	r5,fp,-108
 2001838:	e0bf4c04 	addi	r2,fp,-720
 200183c:	11000e04 	addi	r4,r2,56
 2001840:	e0ff4c04 	addi	r3,fp,-720
 2001844:	00800184 	movi	r2,6
 2001848:	d8800115 	stw	r2,4(sp)
 200184c:	e0bf6004 	addi	r2,fp,-640
 2001850:	10800c04 	addi	r2,r2,48
 2001854:	d8800015 	stw	r2,0(sp)
 2001858:	300f883a 	mov	r7,r6
 200185c:	280d883a 	mov	r6,r5
 2001860:	200b883a 	mov	r5,r4
 2001864:	1809883a 	mov	r4,r3
 2001868:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 200186c:	e0bfe504 	addi	r2,fp,-108
 2001870:	11801004 	addi	r6,r2,64
 2001874:	e17fe504 	addi	r5,fp,-108
 2001878:	e0bf4c04 	addi	r2,fp,-720
 200187c:	11001004 	addi	r4,r2,64
 2001880:	e0ff4c04 	addi	r3,fp,-720
 2001884:	008001c4 	movi	r2,7
 2001888:	d8800115 	stw	r2,4(sp)
 200188c:	e0bf6004 	addi	r2,fp,-640
 2001890:	10800e04 	addi	r2,r2,56
 2001894:	d8800015 	stw	r2,0(sp)
 2001898:	300f883a 	mov	r7,r6
 200189c:	280d883a 	mov	r6,r5
 20018a0:	200b883a 	mov	r5,r4
 20018a4:	1809883a 	mov	r4,r3
 20018a8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 20018ac:	e0bfe504 	addi	r2,fp,-108
 20018b0:	11801204 	addi	r6,r2,72
 20018b4:	e17fe504 	addi	r5,fp,-108
 20018b8:	e0bf4c04 	addi	r2,fp,-720
 20018bc:	11001204 	addi	r4,r2,72
 20018c0:	e0ff4c04 	addi	r3,fp,-720
 20018c4:	00800204 	movi	r2,8
 20018c8:	d8800115 	stw	r2,4(sp)
 20018cc:	e0bf6004 	addi	r2,fp,-640
 20018d0:	10801004 	addi	r2,r2,64
 20018d4:	d8800015 	stw	r2,0(sp)
 20018d8:	300f883a 	mov	r7,r6
 20018dc:	280d883a 	mov	r6,r5
 20018e0:	200b883a 	mov	r5,r4
 20018e4:	1809883a 	mov	r4,r3
 20018e8:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 20018ec:	e0bfe504 	addi	r2,fp,-108
 20018f0:	11800404 	addi	r6,r2,16
 20018f4:	e0bfe504 	addi	r2,fp,-108
 20018f8:	11400204 	addi	r5,r2,8
 20018fc:	e0bf4c04 	addi	r2,fp,-720
 2001900:	11000404 	addi	r4,r2,16
 2001904:	e0bf4c04 	addi	r2,fp,-720
 2001908:	10c00204 	addi	r3,r2,8
 200190c:	00800244 	movi	r2,9
 2001910:	d8800115 	stw	r2,4(sp)
 2001914:	e0bf6004 	addi	r2,fp,-640
 2001918:	10801204 	addi	r2,r2,72
 200191c:	d8800015 	stw	r2,0(sp)
 2001920:	300f883a 	mov	r7,r6
 2001924:	280d883a 	mov	r6,r5
 2001928:	200b883a 	mov	r5,r4
 200192c:	1809883a 	mov	r4,r3
 2001930:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 2001934:	e0bfe504 	addi	r2,fp,-108
 2001938:	11800604 	addi	r6,r2,24
 200193c:	e0bfe504 	addi	r2,fp,-108
 2001940:	11400204 	addi	r5,r2,8
 2001944:	e0bf4c04 	addi	r2,fp,-720
 2001948:	11000604 	addi	r4,r2,24
 200194c:	e0bf4c04 	addi	r2,fp,-720
 2001950:	10c00204 	addi	r3,r2,8
 2001954:	00800284 	movi	r2,10
 2001958:	d8800115 	stw	r2,4(sp)
 200195c:	e0bf6004 	addi	r2,fp,-640
 2001960:	10801404 	addi	r2,r2,80
 2001964:	d8800015 	stw	r2,0(sp)
 2001968:	300f883a 	mov	r7,r6
 200196c:	280d883a 	mov	r6,r5
 2001970:	200b883a 	mov	r5,r4
 2001974:	1809883a 	mov	r4,r3
 2001978:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 200197c:	e0bfe504 	addi	r2,fp,-108
 2001980:	11800804 	addi	r6,r2,32
 2001984:	e0bfe504 	addi	r2,fp,-108
 2001988:	11400204 	addi	r5,r2,8
 200198c:	e0bf4c04 	addi	r2,fp,-720
 2001990:	11000804 	addi	r4,r2,32
 2001994:	e0bf4c04 	addi	r2,fp,-720
 2001998:	10c00204 	addi	r3,r2,8
 200199c:	008002c4 	movi	r2,11
 20019a0:	d8800115 	stw	r2,4(sp)
 20019a4:	e0bf6004 	addi	r2,fp,-640
 20019a8:	10801604 	addi	r2,r2,88
 20019ac:	d8800015 	stw	r2,0(sp)
 20019b0:	300f883a 	mov	r7,r6
 20019b4:	280d883a 	mov	r6,r5
 20019b8:	200b883a 	mov	r5,r4
 20019bc:	1809883a 	mov	r4,r3
 20019c0:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 20019c4:	e0bfe504 	addi	r2,fp,-108
 20019c8:	11800a04 	addi	r6,r2,40
 20019cc:	e0bfe504 	addi	r2,fp,-108
 20019d0:	11400204 	addi	r5,r2,8
 20019d4:	e0bf4c04 	addi	r2,fp,-720
 20019d8:	11000a04 	addi	r4,r2,40
 20019dc:	e0bf4c04 	addi	r2,fp,-720
 20019e0:	10c00204 	addi	r3,r2,8
 20019e4:	00800304 	movi	r2,12
 20019e8:	d8800115 	stw	r2,4(sp)
 20019ec:	e0bf6004 	addi	r2,fp,-640
 20019f0:	10801804 	addi	r2,r2,96
 20019f4:	d8800015 	stw	r2,0(sp)
 20019f8:	300f883a 	mov	r7,r6
 20019fc:	280d883a 	mov	r6,r5
 2001a00:	200b883a 	mov	r5,r4
 2001a04:	1809883a 	mov	r4,r3
 2001a08:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 2001a0c:	e0bfe504 	addi	r2,fp,-108
 2001a10:	11800c04 	addi	r6,r2,48
 2001a14:	e0bfe504 	addi	r2,fp,-108
 2001a18:	11400204 	addi	r5,r2,8
 2001a1c:	e0bf4c04 	addi	r2,fp,-720
 2001a20:	11000c04 	addi	r4,r2,48
 2001a24:	e0bf4c04 	addi	r2,fp,-720
 2001a28:	10c00204 	addi	r3,r2,8
 2001a2c:	00800344 	movi	r2,13
 2001a30:	d8800115 	stw	r2,4(sp)
 2001a34:	e0bf6004 	addi	r2,fp,-640
 2001a38:	10801a04 	addi	r2,r2,104
 2001a3c:	d8800015 	stw	r2,0(sp)
 2001a40:	300f883a 	mov	r7,r6
 2001a44:	280d883a 	mov	r6,r5
 2001a48:	200b883a 	mov	r5,r4
 2001a4c:	1809883a 	mov	r4,r3
 2001a50:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 2001a54:	e0bfe504 	addi	r2,fp,-108
 2001a58:	11800e04 	addi	r6,r2,56
 2001a5c:	e0bfe504 	addi	r2,fp,-108
 2001a60:	11400204 	addi	r5,r2,8
 2001a64:	e0bf4c04 	addi	r2,fp,-720
 2001a68:	11000e04 	addi	r4,r2,56
 2001a6c:	e0bf4c04 	addi	r2,fp,-720
 2001a70:	10c00204 	addi	r3,r2,8
 2001a74:	00800384 	movi	r2,14
 2001a78:	d8800115 	stw	r2,4(sp)
 2001a7c:	e0bf6004 	addi	r2,fp,-640
 2001a80:	10801c04 	addi	r2,r2,112
 2001a84:	d8800015 	stw	r2,0(sp)
 2001a88:	300f883a 	mov	r7,r6
 2001a8c:	280d883a 	mov	r6,r5
 2001a90:	200b883a 	mov	r5,r4
 2001a94:	1809883a 	mov	r4,r3
 2001a98:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 2001a9c:	e0bfe504 	addi	r2,fp,-108
 2001aa0:	11801004 	addi	r6,r2,64
 2001aa4:	e0bfe504 	addi	r2,fp,-108
 2001aa8:	11400204 	addi	r5,r2,8
 2001aac:	e0bf4c04 	addi	r2,fp,-720
 2001ab0:	11001004 	addi	r4,r2,64
 2001ab4:	e0bf4c04 	addi	r2,fp,-720
 2001ab8:	10c00204 	addi	r3,r2,8
 2001abc:	008003c4 	movi	r2,15
 2001ac0:	d8800115 	stw	r2,4(sp)
 2001ac4:	e0bf6004 	addi	r2,fp,-640
 2001ac8:	10801e04 	addi	r2,r2,120
 2001acc:	d8800015 	stw	r2,0(sp)
 2001ad0:	300f883a 	mov	r7,r6
 2001ad4:	280d883a 	mov	r6,r5
 2001ad8:	200b883a 	mov	r5,r4
 2001adc:	1809883a 	mov	r4,r3
 2001ae0:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 2001ae4:	e0bfe504 	addi	r2,fp,-108
 2001ae8:	11801204 	addi	r6,r2,72
 2001aec:	e0bfe504 	addi	r2,fp,-108
 2001af0:	11400204 	addi	r5,r2,8
 2001af4:	e0bf4c04 	addi	r2,fp,-720
 2001af8:	11001204 	addi	r4,r2,72
 2001afc:	e0bf4c04 	addi	r2,fp,-720
 2001b00:	10c00204 	addi	r3,r2,8
 2001b04:	00800404 	movi	r2,16
 2001b08:	d8800115 	stw	r2,4(sp)
 2001b0c:	e0bf6004 	addi	r2,fp,-640
 2001b10:	10802004 	addi	r2,r2,128
 2001b14:	d8800015 	stw	r2,0(sp)
 2001b18:	300f883a 	mov	r7,r6
 2001b1c:	280d883a 	mov	r6,r5
 2001b20:	200b883a 	mov	r5,r4
 2001b24:	1809883a 	mov	r4,r3
 2001b28:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 2001b2c:	e0bfe504 	addi	r2,fp,-108
 2001b30:	11800604 	addi	r6,r2,24
 2001b34:	e0bfe504 	addi	r2,fp,-108
 2001b38:	11400404 	addi	r5,r2,16
 2001b3c:	e0bf4c04 	addi	r2,fp,-720
 2001b40:	11000604 	addi	r4,r2,24
 2001b44:	e0bf4c04 	addi	r2,fp,-720
 2001b48:	10c00404 	addi	r3,r2,16
 2001b4c:	00800444 	movi	r2,17
 2001b50:	d8800115 	stw	r2,4(sp)
 2001b54:	e0bf6004 	addi	r2,fp,-640
 2001b58:	10802204 	addi	r2,r2,136
 2001b5c:	d8800015 	stw	r2,0(sp)
 2001b60:	300f883a 	mov	r7,r6
 2001b64:	280d883a 	mov	r6,r5
 2001b68:	200b883a 	mov	r5,r4
 2001b6c:	1809883a 	mov	r4,r3
 2001b70:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 2001b74:	e0bfe504 	addi	r2,fp,-108
 2001b78:	11800804 	addi	r6,r2,32
 2001b7c:	e0bfe504 	addi	r2,fp,-108
 2001b80:	11400404 	addi	r5,r2,16
 2001b84:	e0bf4c04 	addi	r2,fp,-720
 2001b88:	11000804 	addi	r4,r2,32
 2001b8c:	e0bf4c04 	addi	r2,fp,-720
 2001b90:	10c00404 	addi	r3,r2,16
 2001b94:	00800484 	movi	r2,18
 2001b98:	d8800115 	stw	r2,4(sp)
 2001b9c:	e0bf6004 	addi	r2,fp,-640
 2001ba0:	10802404 	addi	r2,r2,144
 2001ba4:	d8800015 	stw	r2,0(sp)
 2001ba8:	300f883a 	mov	r7,r6
 2001bac:	280d883a 	mov	r6,r5
 2001bb0:	200b883a 	mov	r5,r4
 2001bb4:	1809883a 	mov	r4,r3
 2001bb8:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 2001bbc:	e0bfe504 	addi	r2,fp,-108
 2001bc0:	11800a04 	addi	r6,r2,40
 2001bc4:	e0bfe504 	addi	r2,fp,-108
 2001bc8:	11400404 	addi	r5,r2,16
 2001bcc:	e0bf4c04 	addi	r2,fp,-720
 2001bd0:	11000a04 	addi	r4,r2,40
 2001bd4:	e0bf4c04 	addi	r2,fp,-720
 2001bd8:	10c00404 	addi	r3,r2,16
 2001bdc:	008004c4 	movi	r2,19
 2001be0:	d8800115 	stw	r2,4(sp)
 2001be4:	e0bf6004 	addi	r2,fp,-640
 2001be8:	10802604 	addi	r2,r2,152
 2001bec:	d8800015 	stw	r2,0(sp)
 2001bf0:	300f883a 	mov	r7,r6
 2001bf4:	280d883a 	mov	r6,r5
 2001bf8:	200b883a 	mov	r5,r4
 2001bfc:	1809883a 	mov	r4,r3
 2001c00:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001c04:	e0bfe504 	addi	r2,fp,-108
 2001c08:	11800c04 	addi	r6,r2,48
 2001c0c:	e0bfe504 	addi	r2,fp,-108
 2001c10:	11400404 	addi	r5,r2,16
 2001c14:	e0bf4c04 	addi	r2,fp,-720
 2001c18:	11000c04 	addi	r4,r2,48
 2001c1c:	e0bf4c04 	addi	r2,fp,-720
 2001c20:	10c00404 	addi	r3,r2,16
 2001c24:	00800504 	movi	r2,20
 2001c28:	d8800115 	stw	r2,4(sp)
 2001c2c:	e0bf6004 	addi	r2,fp,-640
 2001c30:	10802804 	addi	r2,r2,160
 2001c34:	d8800015 	stw	r2,0(sp)
 2001c38:	300f883a 	mov	r7,r6
 2001c3c:	280d883a 	mov	r6,r5
 2001c40:	200b883a 	mov	r5,r4
 2001c44:	1809883a 	mov	r4,r3
 2001c48:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 2001c4c:	e0bfe504 	addi	r2,fp,-108
 2001c50:	11800e04 	addi	r6,r2,56
 2001c54:	e0bfe504 	addi	r2,fp,-108
 2001c58:	11400404 	addi	r5,r2,16
 2001c5c:	e0bf4c04 	addi	r2,fp,-720
 2001c60:	11000e04 	addi	r4,r2,56
 2001c64:	e0bf4c04 	addi	r2,fp,-720
 2001c68:	10c00404 	addi	r3,r2,16
 2001c6c:	00800544 	movi	r2,21
 2001c70:	d8800115 	stw	r2,4(sp)
 2001c74:	e0bf6004 	addi	r2,fp,-640
 2001c78:	10802a04 	addi	r2,r2,168
 2001c7c:	d8800015 	stw	r2,0(sp)
 2001c80:	300f883a 	mov	r7,r6
 2001c84:	280d883a 	mov	r6,r5
 2001c88:	200b883a 	mov	r5,r4
 2001c8c:	1809883a 	mov	r4,r3
 2001c90:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 2001c94:	e0bfe504 	addi	r2,fp,-108
 2001c98:	11801004 	addi	r6,r2,64
 2001c9c:	e0bfe504 	addi	r2,fp,-108
 2001ca0:	11400404 	addi	r5,r2,16
 2001ca4:	e0bf4c04 	addi	r2,fp,-720
 2001ca8:	11001004 	addi	r4,r2,64
 2001cac:	e0bf4c04 	addi	r2,fp,-720
 2001cb0:	10c00404 	addi	r3,r2,16
 2001cb4:	00800584 	movi	r2,22
 2001cb8:	d8800115 	stw	r2,4(sp)
 2001cbc:	e0bf6004 	addi	r2,fp,-640
 2001cc0:	10802c04 	addi	r2,r2,176
 2001cc4:	d8800015 	stw	r2,0(sp)
 2001cc8:	300f883a 	mov	r7,r6
 2001ccc:	280d883a 	mov	r6,r5
 2001cd0:	200b883a 	mov	r5,r4
 2001cd4:	1809883a 	mov	r4,r3
 2001cd8:	20032780 	call	2003278 <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 2001cdc:	e0bfe504 	addi	r2,fp,-108
 2001ce0:	11801204 	addi	r6,r2,72
 2001ce4:	e0bfe504 	addi	r2,fp,-108
 2001ce8:	11400404 	addi	r5,r2,16
 2001cec:	e0bf4c04 	addi	r2,fp,-720
 2001cf0:	11001204 	addi	r4,r2,72
 2001cf4:	e0bf4c04 	addi	r2,fp,-720
 2001cf8:	10c00404 	addi	r3,r2,16
 2001cfc:	008005c4 	movi	r2,23
 2001d00:	d8800115 	stw	r2,4(sp)
 2001d04:	e0bf6004 	addi	r2,fp,-640
 2001d08:	10802e04 	addi	r2,r2,184
 2001d0c:	d8800015 	stw	r2,0(sp)
 2001d10:	300f883a 	mov	r7,r6
 2001d14:	280d883a 	mov	r6,r5
 2001d18:	200b883a 	mov	r5,r4
 2001d1c:	1809883a 	mov	r4,r3
 2001d20:	20032780 	call	2003278 <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001d24:	e0bfe504 	addi	r2,fp,-108
 2001d28:	11800804 	addi	r6,r2,32
 2001d2c:	e0bfe504 	addi	r2,fp,-108
 2001d30:	11400604 	addi	r5,r2,24
 2001d34:	e0bf4c04 	addi	r2,fp,-720
 2001d38:	11000804 	addi	r4,r2,32
 2001d3c:	e0bf4c04 	addi	r2,fp,-720
 2001d40:	10c00604 	addi	r3,r2,24
 2001d44:	00800604 	movi	r2,24
 2001d48:	d8800115 	stw	r2,4(sp)
 2001d4c:	e0bf6004 	addi	r2,fp,-640
 2001d50:	10803004 	addi	r2,r2,192
 2001d54:	d8800015 	stw	r2,0(sp)
 2001d58:	300f883a 	mov	r7,r6
 2001d5c:	280d883a 	mov	r6,r5
 2001d60:	200b883a 	mov	r5,r4
 2001d64:	1809883a 	mov	r4,r3
 2001d68:	20032780 	call	2003278 <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 2001d6c:	e0bfe504 	addi	r2,fp,-108
 2001d70:	11800a04 	addi	r6,r2,40
 2001d74:	e0bfe504 	addi	r2,fp,-108
 2001d78:	11400604 	addi	r5,r2,24
 2001d7c:	e0bf4c04 	addi	r2,fp,-720
 2001d80:	11000a04 	addi	r4,r2,40
 2001d84:	e0bf4c04 	addi	r2,fp,-720
 2001d88:	10c00604 	addi	r3,r2,24
 2001d8c:	00800644 	movi	r2,25
 2001d90:	d8800115 	stw	r2,4(sp)
 2001d94:	e0bf6004 	addi	r2,fp,-640
 2001d98:	10803204 	addi	r2,r2,200
 2001d9c:	d8800015 	stw	r2,0(sp)
 2001da0:	300f883a 	mov	r7,r6
 2001da4:	280d883a 	mov	r6,r5
 2001da8:	200b883a 	mov	r5,r4
 2001dac:	1809883a 	mov	r4,r3
 2001db0:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 2001db4:	e0bfe504 	addi	r2,fp,-108
 2001db8:	11800c04 	addi	r6,r2,48
 2001dbc:	e0bfe504 	addi	r2,fp,-108
 2001dc0:	11400604 	addi	r5,r2,24
 2001dc4:	e0bf4c04 	addi	r2,fp,-720
 2001dc8:	11000c04 	addi	r4,r2,48
 2001dcc:	e0bf4c04 	addi	r2,fp,-720
 2001dd0:	10c00604 	addi	r3,r2,24
 2001dd4:	00800684 	movi	r2,26
 2001dd8:	d8800115 	stw	r2,4(sp)
 2001ddc:	e0bf6004 	addi	r2,fp,-640
 2001de0:	10803404 	addi	r2,r2,208
 2001de4:	d8800015 	stw	r2,0(sp)
 2001de8:	300f883a 	mov	r7,r6
 2001dec:	280d883a 	mov	r6,r5
 2001df0:	200b883a 	mov	r5,r4
 2001df4:	1809883a 	mov	r4,r3
 2001df8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001dfc:	e0bfe504 	addi	r2,fp,-108
 2001e00:	11800e04 	addi	r6,r2,56
 2001e04:	e0bfe504 	addi	r2,fp,-108
 2001e08:	11400604 	addi	r5,r2,24
 2001e0c:	e0bf4c04 	addi	r2,fp,-720
 2001e10:	11000e04 	addi	r4,r2,56
 2001e14:	e0bf4c04 	addi	r2,fp,-720
 2001e18:	10c00604 	addi	r3,r2,24
 2001e1c:	008006c4 	movi	r2,27
 2001e20:	d8800115 	stw	r2,4(sp)
 2001e24:	e0bf6004 	addi	r2,fp,-640
 2001e28:	10803604 	addi	r2,r2,216
 2001e2c:	d8800015 	stw	r2,0(sp)
 2001e30:	300f883a 	mov	r7,r6
 2001e34:	280d883a 	mov	r6,r5
 2001e38:	200b883a 	mov	r5,r4
 2001e3c:	1809883a 	mov	r4,r3
 2001e40:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001e44:	e0bfe504 	addi	r2,fp,-108
 2001e48:	11801004 	addi	r6,r2,64
 2001e4c:	e0bfe504 	addi	r2,fp,-108
 2001e50:	11400604 	addi	r5,r2,24
 2001e54:	e0bf4c04 	addi	r2,fp,-720
 2001e58:	11001004 	addi	r4,r2,64
 2001e5c:	e0bf4c04 	addi	r2,fp,-720
 2001e60:	10c00604 	addi	r3,r2,24
 2001e64:	00800704 	movi	r2,28
 2001e68:	d8800115 	stw	r2,4(sp)
 2001e6c:	e0bf6004 	addi	r2,fp,-640
 2001e70:	10803804 	addi	r2,r2,224
 2001e74:	d8800015 	stw	r2,0(sp)
 2001e78:	300f883a 	mov	r7,r6
 2001e7c:	280d883a 	mov	r6,r5
 2001e80:	200b883a 	mov	r5,r4
 2001e84:	1809883a 	mov	r4,r3
 2001e88:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001e8c:	e0bfe504 	addi	r2,fp,-108
 2001e90:	11801204 	addi	r6,r2,72
 2001e94:	e0bfe504 	addi	r2,fp,-108
 2001e98:	11400604 	addi	r5,r2,24
 2001e9c:	e0bf4c04 	addi	r2,fp,-720
 2001ea0:	11001204 	addi	r4,r2,72
 2001ea4:	e0bf4c04 	addi	r2,fp,-720
 2001ea8:	10c00604 	addi	r3,r2,24
 2001eac:	00800744 	movi	r2,29
 2001eb0:	d8800115 	stw	r2,4(sp)
 2001eb4:	e0bf6004 	addi	r2,fp,-640
 2001eb8:	10803a04 	addi	r2,r2,232
 2001ebc:	d8800015 	stw	r2,0(sp)
 2001ec0:	300f883a 	mov	r7,r6
 2001ec4:	280d883a 	mov	r6,r5
 2001ec8:	200b883a 	mov	r5,r4
 2001ecc:	1809883a 	mov	r4,r3
 2001ed0:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001ed4:	e0bfe504 	addi	r2,fp,-108
 2001ed8:	11800a04 	addi	r6,r2,40
 2001edc:	e0bfe504 	addi	r2,fp,-108
 2001ee0:	11400804 	addi	r5,r2,32
 2001ee4:	e0bf4c04 	addi	r2,fp,-720
 2001ee8:	11000a04 	addi	r4,r2,40
 2001eec:	e0bf4c04 	addi	r2,fp,-720
 2001ef0:	10c00804 	addi	r3,r2,32
 2001ef4:	00800784 	movi	r2,30
 2001ef8:	d8800115 	stw	r2,4(sp)
 2001efc:	e0bf6004 	addi	r2,fp,-640
 2001f00:	10803c04 	addi	r2,r2,240
 2001f04:	d8800015 	stw	r2,0(sp)
 2001f08:	300f883a 	mov	r7,r6
 2001f0c:	280d883a 	mov	r6,r5
 2001f10:	200b883a 	mov	r5,r4
 2001f14:	1809883a 	mov	r4,r3
 2001f18:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001f1c:	e0bfe504 	addi	r2,fp,-108
 2001f20:	11800c04 	addi	r6,r2,48
 2001f24:	e0bfe504 	addi	r2,fp,-108
 2001f28:	11400804 	addi	r5,r2,32
 2001f2c:	e0bf4c04 	addi	r2,fp,-720
 2001f30:	11000c04 	addi	r4,r2,48
 2001f34:	e0bf4c04 	addi	r2,fp,-720
 2001f38:	10c00804 	addi	r3,r2,32
 2001f3c:	008007c4 	movi	r2,31
 2001f40:	d8800115 	stw	r2,4(sp)
 2001f44:	e0bf6004 	addi	r2,fp,-640
 2001f48:	10803e04 	addi	r2,r2,248
 2001f4c:	d8800015 	stw	r2,0(sp)
 2001f50:	300f883a 	mov	r7,r6
 2001f54:	280d883a 	mov	r6,r5
 2001f58:	200b883a 	mov	r5,r4
 2001f5c:	1809883a 	mov	r4,r3
 2001f60:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001f64:	e0bfe504 	addi	r2,fp,-108
 2001f68:	11800e04 	addi	r6,r2,56
 2001f6c:	e0bfe504 	addi	r2,fp,-108
 2001f70:	11400804 	addi	r5,r2,32
 2001f74:	e0bf4c04 	addi	r2,fp,-720
 2001f78:	11000e04 	addi	r4,r2,56
 2001f7c:	e0bf4c04 	addi	r2,fp,-720
 2001f80:	10c00804 	addi	r3,r2,32
 2001f84:	00800804 	movi	r2,32
 2001f88:	d8800115 	stw	r2,4(sp)
 2001f8c:	e0bf6004 	addi	r2,fp,-640
 2001f90:	10804004 	addi	r2,r2,256
 2001f94:	d8800015 	stw	r2,0(sp)
 2001f98:	300f883a 	mov	r7,r6
 2001f9c:	280d883a 	mov	r6,r5
 2001fa0:	200b883a 	mov	r5,r4
 2001fa4:	1809883a 	mov	r4,r3
 2001fa8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001fac:	e0bfe504 	addi	r2,fp,-108
 2001fb0:	11801004 	addi	r6,r2,64
 2001fb4:	e0bfe504 	addi	r2,fp,-108
 2001fb8:	11400804 	addi	r5,r2,32
 2001fbc:	e0bf4c04 	addi	r2,fp,-720
 2001fc0:	11001004 	addi	r4,r2,64
 2001fc4:	e0bf4c04 	addi	r2,fp,-720
 2001fc8:	10c00804 	addi	r3,r2,32
 2001fcc:	00800844 	movi	r2,33
 2001fd0:	d8800115 	stw	r2,4(sp)
 2001fd4:	e0bf6004 	addi	r2,fp,-640
 2001fd8:	10804204 	addi	r2,r2,264
 2001fdc:	d8800015 	stw	r2,0(sp)
 2001fe0:	300f883a 	mov	r7,r6
 2001fe4:	280d883a 	mov	r6,r5
 2001fe8:	200b883a 	mov	r5,r4
 2001fec:	1809883a 	mov	r4,r3
 2001ff0:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001ff4:	e0bfe504 	addi	r2,fp,-108
 2001ff8:	11801204 	addi	r6,r2,72
 2001ffc:	e0bfe504 	addi	r2,fp,-108
 2002000:	11400804 	addi	r5,r2,32
 2002004:	e0bf4c04 	addi	r2,fp,-720
 2002008:	11001204 	addi	r4,r2,72
 200200c:	e0bf4c04 	addi	r2,fp,-720
 2002010:	10c00804 	addi	r3,r2,32
 2002014:	00800884 	movi	r2,34
 2002018:	d8800115 	stw	r2,4(sp)
 200201c:	e0bf6004 	addi	r2,fp,-640
 2002020:	10804404 	addi	r2,r2,272
 2002024:	d8800015 	stw	r2,0(sp)
 2002028:	300f883a 	mov	r7,r6
 200202c:	280d883a 	mov	r6,r5
 2002030:	200b883a 	mov	r5,r4
 2002034:	1809883a 	mov	r4,r3
 2002038:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 200203c:	e0bfe504 	addi	r2,fp,-108
 2002040:	11800c04 	addi	r6,r2,48
 2002044:	e0bfe504 	addi	r2,fp,-108
 2002048:	11400a04 	addi	r5,r2,40
 200204c:	e0bf4c04 	addi	r2,fp,-720
 2002050:	11000c04 	addi	r4,r2,48
 2002054:	e0bf4c04 	addi	r2,fp,-720
 2002058:	10c00a04 	addi	r3,r2,40
 200205c:	008008c4 	movi	r2,35
 2002060:	d8800115 	stw	r2,4(sp)
 2002064:	e0bf6004 	addi	r2,fp,-640
 2002068:	10804604 	addi	r2,r2,280
 200206c:	d8800015 	stw	r2,0(sp)
 2002070:	300f883a 	mov	r7,r6
 2002074:	280d883a 	mov	r6,r5
 2002078:	200b883a 	mov	r5,r4
 200207c:	1809883a 	mov	r4,r3
 2002080:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2002084:	e0bfe504 	addi	r2,fp,-108
 2002088:	11800e04 	addi	r6,r2,56
 200208c:	e0bfe504 	addi	r2,fp,-108
 2002090:	11400a04 	addi	r5,r2,40
 2002094:	e0bf4c04 	addi	r2,fp,-720
 2002098:	11000e04 	addi	r4,r2,56
 200209c:	e0bf4c04 	addi	r2,fp,-720
 20020a0:	10c00a04 	addi	r3,r2,40
 20020a4:	00800904 	movi	r2,36
 20020a8:	d8800115 	stw	r2,4(sp)
 20020ac:	e0bf6004 	addi	r2,fp,-640
 20020b0:	10804804 	addi	r2,r2,288
 20020b4:	d8800015 	stw	r2,0(sp)
 20020b8:	300f883a 	mov	r7,r6
 20020bc:	280d883a 	mov	r6,r5
 20020c0:	200b883a 	mov	r5,r4
 20020c4:	1809883a 	mov	r4,r3
 20020c8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 20020cc:	e0bfe504 	addi	r2,fp,-108
 20020d0:	11801004 	addi	r6,r2,64
 20020d4:	e0bfe504 	addi	r2,fp,-108
 20020d8:	11400a04 	addi	r5,r2,40
 20020dc:	e0bf4c04 	addi	r2,fp,-720
 20020e0:	11001004 	addi	r4,r2,64
 20020e4:	e0bf4c04 	addi	r2,fp,-720
 20020e8:	10c00a04 	addi	r3,r2,40
 20020ec:	00800944 	movi	r2,37
 20020f0:	d8800115 	stw	r2,4(sp)
 20020f4:	e0bf6004 	addi	r2,fp,-640
 20020f8:	10804a04 	addi	r2,r2,296
 20020fc:	d8800015 	stw	r2,0(sp)
 2002100:	300f883a 	mov	r7,r6
 2002104:	280d883a 	mov	r6,r5
 2002108:	200b883a 	mov	r5,r4
 200210c:	1809883a 	mov	r4,r3
 2002110:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2002114:	e0bfe504 	addi	r2,fp,-108
 2002118:	11801204 	addi	r6,r2,72
 200211c:	e0bfe504 	addi	r2,fp,-108
 2002120:	11400a04 	addi	r5,r2,40
 2002124:	e0bf4c04 	addi	r2,fp,-720
 2002128:	11001204 	addi	r4,r2,72
 200212c:	e0bf4c04 	addi	r2,fp,-720
 2002130:	10c00a04 	addi	r3,r2,40
 2002134:	00800984 	movi	r2,38
 2002138:	d8800115 	stw	r2,4(sp)
 200213c:	e0bf6004 	addi	r2,fp,-640
 2002140:	10804c04 	addi	r2,r2,304
 2002144:	d8800015 	stw	r2,0(sp)
 2002148:	300f883a 	mov	r7,r6
 200214c:	280d883a 	mov	r6,r5
 2002150:	200b883a 	mov	r5,r4
 2002154:	1809883a 	mov	r4,r3
 2002158:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 200215c:	e0bfe504 	addi	r2,fp,-108
 2002160:	11800e04 	addi	r6,r2,56
 2002164:	e0bfe504 	addi	r2,fp,-108
 2002168:	11400c04 	addi	r5,r2,48
 200216c:	e0bf4c04 	addi	r2,fp,-720
 2002170:	11000e04 	addi	r4,r2,56
 2002174:	e0bf4c04 	addi	r2,fp,-720
 2002178:	10c00c04 	addi	r3,r2,48
 200217c:	008009c4 	movi	r2,39
 2002180:	d8800115 	stw	r2,4(sp)
 2002184:	e0bf6004 	addi	r2,fp,-640
 2002188:	10804e04 	addi	r2,r2,312
 200218c:	d8800015 	stw	r2,0(sp)
 2002190:	300f883a 	mov	r7,r6
 2002194:	280d883a 	mov	r6,r5
 2002198:	200b883a 	mov	r5,r4
 200219c:	1809883a 	mov	r4,r3
 20021a0:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 20021a4:	e0bfe504 	addi	r2,fp,-108
 20021a8:	11801004 	addi	r6,r2,64
 20021ac:	e0bfe504 	addi	r2,fp,-108
 20021b0:	11400c04 	addi	r5,r2,48
 20021b4:	e0bf4c04 	addi	r2,fp,-720
 20021b8:	11001004 	addi	r4,r2,64
 20021bc:	e0bf4c04 	addi	r2,fp,-720
 20021c0:	10c00c04 	addi	r3,r2,48
 20021c4:	00800a04 	movi	r2,40
 20021c8:	d8800115 	stw	r2,4(sp)
 20021cc:	e0bf6004 	addi	r2,fp,-640
 20021d0:	10805004 	addi	r2,r2,320
 20021d4:	d8800015 	stw	r2,0(sp)
 20021d8:	300f883a 	mov	r7,r6
 20021dc:	280d883a 	mov	r6,r5
 20021e0:	200b883a 	mov	r5,r4
 20021e4:	1809883a 	mov	r4,r3
 20021e8:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 20021ec:	e0bfe504 	addi	r2,fp,-108
 20021f0:	11801204 	addi	r6,r2,72
 20021f4:	e0bfe504 	addi	r2,fp,-108
 20021f8:	11400c04 	addi	r5,r2,48
 20021fc:	e0bf4c04 	addi	r2,fp,-720
 2002200:	11001204 	addi	r4,r2,72
 2002204:	e0bf4c04 	addi	r2,fp,-720
 2002208:	10c00c04 	addi	r3,r2,48
 200220c:	00800a44 	movi	r2,41
 2002210:	d8800115 	stw	r2,4(sp)
 2002214:	e0bf6004 	addi	r2,fp,-640
 2002218:	10805204 	addi	r2,r2,328
 200221c:	d8800015 	stw	r2,0(sp)
 2002220:	300f883a 	mov	r7,r6
 2002224:	280d883a 	mov	r6,r5
 2002228:	200b883a 	mov	r5,r4
 200222c:	1809883a 	mov	r4,r3
 2002230:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2002234:	e0bfe504 	addi	r2,fp,-108
 2002238:	11801004 	addi	r6,r2,64
 200223c:	e0bfe504 	addi	r2,fp,-108
 2002240:	11400e04 	addi	r5,r2,56
 2002244:	e0bf4c04 	addi	r2,fp,-720
 2002248:	11001004 	addi	r4,r2,64
 200224c:	e0bf4c04 	addi	r2,fp,-720
 2002250:	10c00e04 	addi	r3,r2,56
 2002254:	00800a84 	movi	r2,42
 2002258:	d8800115 	stw	r2,4(sp)
 200225c:	e0bf6004 	addi	r2,fp,-640
 2002260:	10805404 	addi	r2,r2,336
 2002264:	d8800015 	stw	r2,0(sp)
 2002268:	300f883a 	mov	r7,r6
 200226c:	280d883a 	mov	r6,r5
 2002270:	200b883a 	mov	r5,r4
 2002274:	1809883a 	mov	r4,r3
 2002278:	20032780 	call	2003278 <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 200227c:	e0bfe504 	addi	r2,fp,-108
 2002280:	11801204 	addi	r6,r2,72
 2002284:	e0bfe504 	addi	r2,fp,-108
 2002288:	11400e04 	addi	r5,r2,56
 200228c:	e0bf4c04 	addi	r2,fp,-720
 2002290:	11001204 	addi	r4,r2,72
 2002294:	e0bf4c04 	addi	r2,fp,-720
 2002298:	10c00e04 	addi	r3,r2,56
 200229c:	00800ac4 	movi	r2,43
 20022a0:	d8800115 	stw	r2,4(sp)
 20022a4:	e0bf6004 	addi	r2,fp,-640
 20022a8:	10805604 	addi	r2,r2,344
 20022ac:	d8800015 	stw	r2,0(sp)
 20022b0:	300f883a 	mov	r7,r6
 20022b4:	280d883a 	mov	r6,r5
 20022b8:	200b883a 	mov	r5,r4
 20022bc:	1809883a 	mov	r4,r3
 20022c0:	20032780 	call	2003278 <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 20022c4:	e0bfe504 	addi	r2,fp,-108
 20022c8:	11801204 	addi	r6,r2,72
 20022cc:	e0bfe504 	addi	r2,fp,-108
 20022d0:	11400e04 	addi	r5,r2,56
 20022d4:	e0bf4c04 	addi	r2,fp,-720
 20022d8:	11001204 	addi	r4,r2,72
 20022dc:	e0bf4c04 	addi	r2,fp,-720
 20022e0:	10c01004 	addi	r3,r2,64
 20022e4:	00800b04 	movi	r2,44
 20022e8:	d8800115 	stw	r2,4(sp)
 20022ec:	e0bf6004 	addi	r2,fp,-640
 20022f0:	10805804 	addi	r2,r2,352
 20022f4:	d8800015 	stw	r2,0(sp)
 20022f8:	300f883a 	mov	r7,r6
 20022fc:	280d883a 	mov	r6,r5
 2002300:	200b883a 	mov	r5,r4
 2002304:	1809883a 	mov	r4,r3
 2002308:	20032780 	call	2003278 <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 200230c:	e0bfe504 	addi	r2,fp,-108
 2002310:	1009883a 	mov	r4,r2
 2002314:	20037040 	call	2003704 <damping>
  	   damping(velocity[1]);
 2002318:	e0bfe504 	addi	r2,fp,-108
 200231c:	10800204 	addi	r2,r2,8
 2002320:	1009883a 	mov	r4,r2
 2002324:	20037040 	call	2003704 <damping>
  	   damping(velocity[2]);
 2002328:	e0bfe504 	addi	r2,fp,-108
 200232c:	10800404 	addi	r2,r2,16
 2002330:	1009883a 	mov	r4,r2
 2002334:	20037040 	call	2003704 <damping>
  	   damping(velocity[3]);
 2002338:	e0bfe504 	addi	r2,fp,-108
 200233c:	10800604 	addi	r2,r2,24
 2002340:	1009883a 	mov	r4,r2
 2002344:	20037040 	call	2003704 <damping>
  	   damping(velocity[4]);
 2002348:	e0bfe504 	addi	r2,fp,-108
 200234c:	10800804 	addi	r2,r2,32
 2002350:	1009883a 	mov	r4,r2
 2002354:	20037040 	call	2003704 <damping>
  	   damping(velocity[5]);
 2002358:	e0bfe504 	addi	r2,fp,-108
 200235c:	10800a04 	addi	r2,r2,40
 2002360:	1009883a 	mov	r4,r2
 2002364:	20037040 	call	2003704 <damping>
  	   damping(velocity[6]);
 2002368:	e0bfe504 	addi	r2,fp,-108
 200236c:	10800c04 	addi	r2,r2,48
 2002370:	1009883a 	mov	r4,r2
 2002374:	20037040 	call	2003704 <damping>
  	   damping(velocity[7]);
 2002378:	e0bfe504 	addi	r2,fp,-108
 200237c:	10800e04 	addi	r2,r2,56
 2002380:	1009883a 	mov	r4,r2
 2002384:	20037040 	call	2003704 <damping>
  	   damping(velocity[8]);
 2002388:	e0bfe504 	addi	r2,fp,-108
 200238c:	10801004 	addi	r2,r2,64
 2002390:	1009883a 	mov	r4,r2
 2002394:	20037040 	call	2003704 <damping>
  	   damping(velocity[9]);
 2002398:	e0bfe504 	addi	r2,fp,-108
 200239c:	10801204 	addi	r2,r2,72
 20023a0:	1009883a 	mov	r4,r2
 20023a4:	20037040 	call	2003704 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20023a8:	e0bfe504 	addi	r2,fp,-108
 20023ac:	1009883a 	mov	r4,r2
 20023b0:	20031540 	call	2003154 <momentum>
 20023b4:	1021883a 	mov	r16,r2
 20023b8:	e0bfe504 	addi	r2,fp,-108
 20023bc:	10800204 	addi	r2,r2,8
 20023c0:	1009883a 	mov	r4,r2
 20023c4:	20031540 	call	2003154 <momentum>
 20023c8:	1007883a 	mov	r3,r2
 20023cc:	80e1ff72 	custom	253,r16,r16,r3
 20023d0:	e0bfe504 	addi	r2,fp,-108
 20023d4:	10800404 	addi	r2,r2,16
 20023d8:	1009883a 	mov	r4,r2
 20023dc:	20031540 	call	2003154 <momentum>
 20023e0:	1007883a 	mov	r3,r2
 20023e4:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 20023e8:	e0bfe504 	addi	r2,fp,-108
 20023ec:	10800604 	addi	r2,r2,24
 20023f0:	1009883a 	mov	r4,r2
 20023f4:	20031540 	call	2003154 <momentum>
 20023f8:	1007883a 	mov	r3,r2
 20023fc:	80e1ff72 	custom	253,r16,r16,r3
 2002400:	e0bfe504 	addi	r2,fp,-108
 2002404:	10800804 	addi	r2,r2,32
 2002408:	1009883a 	mov	r4,r2
 200240c:	20031540 	call	2003154 <momentum>
 2002410:	1007883a 	mov	r3,r2
 2002414:	80e1ff72 	custom	253,r16,r16,r3
 2002418:	e0bfe504 	addi	r2,fp,-108
 200241c:	10800a04 	addi	r2,r2,40
 2002420:	1009883a 	mov	r4,r2
 2002424:	20031540 	call	2003154 <momentum>
 2002428:	1007883a 	mov	r3,r2
 200242c:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 2002430:	e0bfe504 	addi	r2,fp,-108
 2002434:	10800c04 	addi	r2,r2,48
 2002438:	1009883a 	mov	r4,r2
 200243c:	20031540 	call	2003154 <momentum>
 2002440:	1007883a 	mov	r3,r2
 2002444:	80e1ff72 	custom	253,r16,r16,r3
 2002448:	e0bfe504 	addi	r2,fp,-108
 200244c:	10800e04 	addi	r2,r2,56
 2002450:	1009883a 	mov	r4,r2
 2002454:	20031540 	call	2003154 <momentum>
 2002458:	1007883a 	mov	r3,r2
 200245c:	80e1ff72 	custom	253,r16,r16,r3
 2002460:	e0bfe504 	addi	r2,fp,-108
 2002464:	10801004 	addi	r2,r2,64
 2002468:	1009883a 	mov	r4,r2
 200246c:	20031540 	call	2003154 <momentum>
 2002470:	1007883a 	mov	r3,r2
 2002474:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 2002478:	e0bfe504 	addi	r2,fp,-108
 200247c:	10801204 	addi	r2,r2,72
 2002480:	1009883a 	mov	r4,r2
 2002484:	20031540 	call	2003154 <momentum>
 2002488:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 200248c:	80c5ff72 	custom	253,r2,r16,r3
 2002490:	e0bf3f15 	stw	r2,-772(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 2002494:	e0bf4017 	ldw	r2,-768(fp)
 2002498:	10800104 	addi	r2,r2,4
 200249c:	e0ff4d17 	ldw	r3,-716(fp)
 20024a0:	1807fe72 	custom	249,r3,r3,zero
 20024a4:	180892ba 	slli	r4,r3,10
 20024a8:	e0ff4c17 	ldw	r3,-720(fp)
 20024ac:	1807fe72 	custom	249,r3,r3,zero
 20024b0:	20c7883a 	add	r3,r4,r3
 20024b4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20024b8:	e0bf4017 	ldw	r2,-768(fp)
 20024bc:	10800204 	addi	r2,r2,8
 20024c0:	e0ff4f17 	ldw	r3,-708(fp)
 20024c4:	1807fe72 	custom	249,r3,r3,zero
 20024c8:	180892ba 	slli	r4,r3,10
 20024cc:	e0ff4e17 	ldw	r3,-712(fp)
 20024d0:	1807fe72 	custom	249,r3,r3,zero
 20024d4:	20c7883a 	add	r3,r4,r3
 20024d8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 20024dc:	e0bf4017 	ldw	r2,-768(fp)
 20024e0:	10800304 	addi	r2,r2,12
 20024e4:	e0ff5117 	ldw	r3,-700(fp)
 20024e8:	1807fe72 	custom	249,r3,r3,zero
 20024ec:	180892ba 	slli	r4,r3,10
 20024f0:	e0ff5017 	ldw	r3,-704(fp)
 20024f4:	1807fe72 	custom	249,r3,r3,zero
 20024f8:	20c7883a 	add	r3,r4,r3
 20024fc:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2002500:	e0bf4017 	ldw	r2,-768(fp)
 2002504:	10800404 	addi	r2,r2,16
 2002508:	e0ff5317 	ldw	r3,-692(fp)
 200250c:	1807fe72 	custom	249,r3,r3,zero
 2002510:	180892ba 	slli	r4,r3,10
 2002514:	e0ff5217 	ldw	r3,-696(fp)
 2002518:	1807fe72 	custom	249,r3,r3,zero
 200251c:	20c7883a 	add	r3,r4,r3
 2002520:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002524:	e0bf4017 	ldw	r2,-768(fp)
 2002528:	10800504 	addi	r2,r2,20
 200252c:	e0ff5517 	ldw	r3,-684(fp)
 2002530:	1807fe72 	custom	249,r3,r3,zero
 2002534:	180892ba 	slli	r4,r3,10
 2002538:	e0ff5417 	ldw	r3,-688(fp)
 200253c:	1807fe72 	custom	249,r3,r3,zero
 2002540:	20c7883a 	add	r3,r4,r3
 2002544:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2002548:	e0bf4017 	ldw	r2,-768(fp)
 200254c:	10800604 	addi	r2,r2,24
 2002550:	e0ff5717 	ldw	r3,-676(fp)
 2002554:	1807fe72 	custom	249,r3,r3,zero
 2002558:	180892ba 	slli	r4,r3,10
 200255c:	e0ff5617 	ldw	r3,-680(fp)
 2002560:	1807fe72 	custom	249,r3,r3,zero
 2002564:	20c7883a 	add	r3,r4,r3
 2002568:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 200256c:	e0bf4017 	ldw	r2,-768(fp)
 2002570:	10800704 	addi	r2,r2,28
 2002574:	e0ff5917 	ldw	r3,-668(fp)
 2002578:	1807fe72 	custom	249,r3,r3,zero
 200257c:	180892ba 	slli	r4,r3,10
 2002580:	e0ff5817 	ldw	r3,-672(fp)
 2002584:	1807fe72 	custom	249,r3,r3,zero
 2002588:	20c7883a 	add	r3,r4,r3
 200258c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 2002590:	e0bf4017 	ldw	r2,-768(fp)
 2002594:	10800804 	addi	r2,r2,32
 2002598:	e0ff5b17 	ldw	r3,-660(fp)
 200259c:	1807fe72 	custom	249,r3,r3,zero
 20025a0:	180892ba 	slli	r4,r3,10
 20025a4:	e0ff5a17 	ldw	r3,-664(fp)
 20025a8:	1807fe72 	custom	249,r3,r3,zero
 20025ac:	20c7883a 	add	r3,r4,r3
 20025b0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20025b4:	e0bf4017 	ldw	r2,-768(fp)
 20025b8:	10800904 	addi	r2,r2,36
 20025bc:	e0ff5d17 	ldw	r3,-652(fp)
 20025c0:	1807fe72 	custom	249,r3,r3,zero
 20025c4:	180892ba 	slli	r4,r3,10
 20025c8:	e0ff5c17 	ldw	r3,-656(fp)
 20025cc:	1807fe72 	custom	249,r3,r3,zero
 20025d0:	20c7883a 	add	r3,r4,r3
 20025d4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 20025d8:	e0bf4017 	ldw	r2,-768(fp)
 20025dc:	10800a04 	addi	r2,r2,40
 20025e0:	e0ff5f17 	ldw	r3,-644(fp)
 20025e4:	1807fe72 	custom	249,r3,r3,zero
 20025e8:	180892ba 	slli	r4,r3,10
 20025ec:	e0ff5e17 	ldw	r3,-648(fp)
 20025f0:	1807fe72 	custom	249,r3,r3,zero
 20025f4:	20c7883a 	add	r3,r4,r3
 20025f8:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 20025fc:	01c00104 	movi	r7,4
 2002600:	000d883a 	mov	r6,zero
 2002604:	000b883a 	mov	r5,zero
 2002608:	0009883a 	mov	r4,zero
 200260c:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
   float theta = atan2f(*effect_x-446, *effect_y-263);
   DEBUG_PRINT("theta : %f",theta);

   while(speed >= 0.1)
 2002610:	e13f3f17 	ldw	r4,-772(fp)
 2002614:	2008e540 	call	2008e54 <__extendsfdf2>
 2002618:	1011883a 	mov	r8,r2
 200261c:	1813883a 	mov	r9,r3
 2002620:	01a666b4 	movhi	r6,39322
 2002624:	31a66684 	addi	r6,r6,-26214
 2002628:	01cfeeb4 	movhi	r7,16314
 200262c:	39e66644 	addi	r7,r7,-26215
 2002630:	4009883a 	mov	r4,r8
 2002634:	480b883a 	mov	r5,r9
 2002638:	2007c700 	call	2007c70 <__gedf2>
 200263c:	1039350e 	bge	r2,zero,2000b14 <task2+0x4e0>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 2002640:	01c07d04 	movi	r7,500
 2002644:	000d883a 	mov	r6,zero
 2002648:	000b883a 	mov	r5,zero
 200264c:	0009883a 	mov	r4,zero
 2002650:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>

   DEBUG_PRINT("[Task 2] Animation termine\n");
 2002654:	010080b4 	movhi	r4,514
 2002658:	2107b804 	addi	r4,r4,7904
 200265c:	20096c00 	call	20096c0 <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 2002660:	01c01904 	movi	r7,100
 2002664:	000d883a 	mov	r6,zero
 2002668:	000b883a 	mov	r5,zero
 200266c:	0009883a 	mov	r4,zero
 2002670:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 2002674:	e03f4105 	stb	zero,-764(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2002678:	d0a78817 	ldw	r2,-25056(gp)
 200267c:	e0ff4103 	ldbu	r3,-764(fp)
 2002680:	e13f4b04 	addi	r4,fp,-724
 2002684:	200f883a 	mov	r7,r4
 2002688:	180d883a 	mov	r6,r3
 200268c:	01400044 	movi	r5,1
 2002690:	1009883a 	mov	r4,r2
 2002694:	201a2d00 	call	201a2d0 <OSFlagPost>

   OSMboxPost(MailBox6, &number_of_ball);
 2002698:	d0a78517 	ldw	r2,-25068(gp)
 200269c:	e0ffba04 	addi	r3,fp,-280
 20026a0:	180b883a 	mov	r5,r3
 20026a4:	1009883a 	mov	r4,r2
 20026a8:	201b24c0 	call	201b24c <OSMboxPost>
   //OSMboxPost(MailBox7, &score);

  }
 20026ac:	00385706 	br	200080c <task2+0x1d8>

020026b0 <task3>:
}

void task3(void* pdata)
{
 20026b0:	deffe404 	addi	sp,sp,-112
 20026b4:	dfc01b15 	stw	ra,108(sp)
 20026b8:	df001a15 	stw	fp,104(sp)
 20026bc:	df001a04 	addi	fp,sp,104
 20026c0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U opt_task1;

	int activePlayer;
	//int * nbr_ball;
	int score [2] = {0,0};
 20026c4:	e03ffa15 	stw	zero,-24(fp)
 20026c8:	e03ffb15 	stw	zero,-20(fp)
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+11;
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+12;
	*/
	//intermediate variable//

	IOWR(MEM_NIOS_PI_BASE,0,0);
 20026cc:	0007883a 	mov	r3,zero
 20026d0:	00800834 	movhi	r2,32
 20026d4:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,1,0);
 20026d8:	0007883a 	mov	r3,zero
 20026dc:	00800834 	movhi	r2,32
 20026e0:	10800104 	addi	r2,r2,4
 20026e4:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,2,0);
 20026e8:	0007883a 	mov	r3,zero
 20026ec:	00800834 	movhi	r2,32
 20026f0:	10800204 	addi	r2,r2,8
 20026f4:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,3,0);
 20026f8:	0007883a 	mov	r3,zero
 20026fc:	00800834 	movhi	r2,32
 2002700:	10800304 	addi	r2,r2,12
 2002704:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,8,0);
 2002708:	0007883a 	mov	r3,zero
 200270c:	00800834 	movhi	r2,32
 2002710:	10800804 	addi	r2,r2,32
 2002714:	10c00035 	stwio	r3,0(r2)

	int ready,first_player,game_finish,ready_send;
	int all_rdy;

	ready=0;
 2002718:	e03fe915 	stw	zero,-92(fp)
	first_player=0;
 200271c:	e03fea15 	stw	zero,-88(fp)
	all_rdy=0;
 2002720:	e03feb15 	stw	zero,-84(fp)
	game_finish=0;
 2002724:	e03fec15 	stw	zero,-80(fp)
	ready_send=0;
 2002728:	e03fed15 	stw	zero,-76(fp)
	int number_of_ball = 10;
 200272c:	00800284 	movi	r2,10
 2002730:	e0bffc15 	stw	r2,-16(fp)
    int time_out = 0;
 2002734:	e03fe815 	stw	zero,-96(fp)
			while(!all_rdy && !time_out){
                time_out = IORD(MEM_NIOS_PI_BASE,15);
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}*/
			activePlayer = ID1;//first_player;
 2002738:	00800084 	movi	r2,2
 200273c:	e0bfe715 	stw	r2,-100(fp)
			game_finish = 0;
 2002740:	e03fec15 	stw	zero,-80(fp)
			DEBUG_PRINT("[Task 3] the game can start\n");
 2002744:	010080b4 	movhi	r4,514
 2002748:	2107d304 	addi	r4,r4,8012
 200274c:	20096c00 	call	20096c0 <puts>
			while(!game_finish && !time_out){
 2002750:	00010a06 	br	2002b7c <task3+0x4cc>
                time_out = IORD(MEM_NIOS_PI_BASE,15);
 2002754:	00800834 	movhi	r2,32
 2002758:	10800f04 	addi	r2,r2,60
 200275c:	10800037 	ldwio	r2,0(r2)
 2002760:	e0bfe815 	stw	r2,-96(fp)
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
 2002764:	e0bfe817 	ldw	r2,-96(fp)
 2002768:	10000426 	beq	r2,zero,200277c <task3+0xcc>
 200276c:	00c00044 	movi	r3,1
 2002770:	00800834 	movhi	r2,32
 2002774:	10800f04 	addi	r2,r2,60
 2002778:	10c00035 	stwio	r3,0(r2)
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8) && !time_out){
 200277c:	e0bfe717 	ldw	r2,-100(fp)
 2002780:	10800098 	cmpnei	r2,r2,2
 2002784:	1000851e 	bne	r2,zero,200299c <task3+0x2ec>
 2002788:	00800834 	movhi	r2,32
 200278c:	10800804 	addi	r2,r2,32
 2002790:	10800037 	ldwio	r2,0(r2)
 2002794:	1000811e 	bne	r2,zero,200299c <task3+0x2ec>
 2002798:	e0bfe817 	ldw	r2,-96(fp)
 200279c:	10007f1e 	bne	r2,zero,200299c <task3+0x2ec>
						OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 20027a0:	d0a79317 	ldw	r2,-25012(gp)
 20027a4:	e0fff904 	addi	r3,fp,-28
 20027a8:	180f883a 	mov	r7,r3
 20027ac:	01800044 	movi	r6,1
 20027b0:	01400044 	movi	r5,1
 20027b4:	1009883a 	mov	r4,r2
 20027b8:	201a2d00 	call	201a2d0 <OSFlagPost>
						DEBUG_PRINT("[Task 3] Wait for value from task 1\n");
 20027bc:	010080b4 	movhi	r4,514
 20027c0:	2107da04 	addi	r4,r4,8040
 20027c4:	20096c00 	call	20096c0 <puts>
						int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 20027c8:	d0a79217 	ldw	r2,-25016(gp)
 20027cc:	e0fff904 	addi	r3,fp,-28
 20027d0:	180d883a 	mov	r6,r3
 20027d4:	000b883a 	mov	r5,zero
 20027d8:	1009883a 	mov	r4,r2
 20027dc:	201aeac0 	call	201aeac <OSMboxPend>
 20027e0:	e0bfee15 	stw	r2,-72(fp)
						int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 20027e4:	d0a78c17 	ldw	r2,-25040(gp)
 20027e8:	e0fff904 	addi	r3,fp,-28
 20027ec:	180d883a 	mov	r6,r3
 20027f0:	000b883a 	mov	r5,zero
 20027f4:	1009883a 	mov	r4,r2
 20027f8:	201aeac0 	call	201aeac <OSMboxPend>
 20027fc:	e0bfef15 	stw	r2,-68(fp)
						int *effect_x = (int *) OSMboxPend(MailBox10,0,&err);
 2002800:	d0a78b17 	ldw	r2,-25044(gp)
 2002804:	e0fff904 	addi	r3,fp,-28
 2002808:	180d883a 	mov	r6,r3
 200280c:	000b883a 	mov	r5,zero
 2002810:	1009883a 	mov	r4,r2
 2002814:	201aeac0 	call	201aeac <OSMboxPend>
 2002818:	e0bff015 	stw	r2,-64(fp)
						int *effect_y = (int *) OSMboxPend(MailBox11,0,&err);
 200281c:	d0a79117 	ldw	r2,-25020(gp)
 2002820:	e0fff904 	addi	r3,fp,-28
 2002824:	180d883a 	mov	r6,r3
 2002828:	000b883a 	mov	r5,zero
 200282c:	1009883a 	mov	r4,r2
 2002830:	201aeac0 	call	201aeac <OSMboxPend>
 2002834:	e0bff115 	stw	r2,-60(fp)
						DEBUG_PRINT("[Task 3] Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 2002838:	e0bfee17 	ldw	r2,-72(fp)
 200283c:	10c00017 	ldw	r3,0(r2)
 2002840:	e0bfef17 	ldw	r2,-68(fp)
 2002844:	10800017 	ldw	r2,0(r2)
 2002848:	100d883a 	mov	r6,r2
 200284c:	180b883a 	mov	r5,r3
 2002850:	010080b4 	movhi	r4,514
 2002854:	2107e304 	addi	r4,r4,8076
 2002858:	20095400 	call	2009540 <printf>

						OSMboxPost(MailBox4, vector_x);
 200285c:	d0a78f17 	ldw	r2,-25028(gp)
 2002860:	e17fee17 	ldw	r5,-72(fp)
 2002864:	1009883a 	mov	r4,r2
 2002868:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox5, vector_y);
 200286c:	d0a78917 	ldw	r2,-25052(gp)
 2002870:	e17fef17 	ldw	r5,-68(fp)
 2002874:	1009883a 	mov	r4,r2
 2002878:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox12, effect_x);
 200287c:	d0a78d17 	ldw	r2,-25036(gp)
 2002880:	e17ff017 	ldw	r5,-64(fp)
 2002884:	1009883a 	mov	r4,r2
 2002888:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox13, effect_y);
 200288c:	d0a78617 	ldw	r2,-25064(gp)
 2002890:	e17ff117 	ldw	r5,-60(fp)
 2002894:	1009883a 	mov	r4,r2
 2002898:	201b24c0 	call	201b24c <OSMboxPost>

						OSMboxPost(MailBox8, &number_of_ball);                 //transmit nbr ball to task 2
 200289c:	d0a78e17 	ldw	r2,-25032(gp)
 20028a0:	e0fffc04 	addi	r3,fp,-16
 20028a4:	180b883a 	mov	r5,r3
 20028a8:	1009883a 	mov	r4,r2
 20028ac:	201b24c0 	call	201b24c <OSMboxPost>
						//OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));                //transmit score to task2

						DEBUG_PRINT("[Task 3] Send value to the SPI\n");
 20028b0:	010080b4 	movhi	r4,514
 20028b4:	2107ee04 	addi	r4,r4,8120
 20028b8:	20096c00 	call	20096c0 <puts>
						IOWR(MEM_NIOS_PI_BASE,4,number_of_ball);
 20028bc:	e0fffc17 	ldw	r3,-16(fp)
 20028c0:	00800834 	movhi	r2,32
 20028c4:	10800404 	addi	r2,r2,16
 20028c8:	10c00035 	stwio	r3,0(r2)
						//IOWR(MEM_NIOS_PI_BASE,5,*score);
						IOWR(MEM_NIOS_PI_BASE,6,(*vector_y<<10)+*vector_x);
 20028cc:	e0bfef17 	ldw	r2,-68(fp)
 20028d0:	10800017 	ldw	r2,0(r2)
 20028d4:	100692ba 	slli	r3,r2,10
 20028d8:	e0bfee17 	ldw	r2,-72(fp)
 20028dc:	10800017 	ldw	r2,0(r2)
 20028e0:	1887883a 	add	r3,r3,r2
 20028e4:	00800834 	movhi	r2,32
 20028e8:	10800604 	addi	r2,r2,24
 20028ec:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,7,(*effect_y<<10)+*effect_x);
 20028f0:	e0bff117 	ldw	r2,-60(fp)
 20028f4:	10800017 	ldw	r2,0(r2)
 20028f8:	100692ba 	slli	r3,r2,10
 20028fc:	e0bff017 	ldw	r2,-64(fp)
 2002900:	10800017 	ldw	r2,0(r2)
 2002904:	1887883a 	add	r3,r3,r2
 2002908:	00800834 	movhi	r2,32
 200290c:	10800704 	addi	r2,r2,28
 2002910:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,3,1);             						//*isSend = 1; // value are available
 2002914:	00c00044 	movi	r3,1
 2002918:	00800834 	movhi	r2,32
 200291c:	10800304 	addi	r2,r2,12
 2002920:	10c00035 	stwio	r3,0(r2)

						opt_task1=OS_FLAG_CLR;
 2002924:	e03ff205 	stb	zero,-56(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002928:	d0a79317 	ldw	r2,-25012(gp)
 200292c:	e0fff203 	ldbu	r3,-56(fp)
 2002930:	e13ff904 	addi	r4,fp,-28
 2002934:	200f883a 	mov	r7,r4
 2002938:	180d883a 	mov	r6,r3
 200293c:	01400044 	movi	r5,1
 2002940:	1009883a 	mov	r4,r2
 2002944:	201a2d00 	call	201a2d0 <OSFlagPost>
						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002948:	d0e78817 	ldw	r3,-25056(gp)
 200294c:	e0bff904 	addi	r2,fp,-28
 2002950:	d8800015 	stw	r2,0(sp)
 2002954:	000f883a 	mov	r7,zero
 2002958:	000d883a 	mov	r6,zero
 200295c:	01400044 	movi	r5,1
 2002960:	1809883a 	mov	r4,r3
 2002964:	2019cb80 	call	2019cb8 <OSFlagPend>

						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 2002968:	d0a78517 	ldw	r2,-25068(gp)
 200296c:	e0fff904 	addi	r3,fp,-28
 2002970:	180d883a 	mov	r6,r3
 2002974:	000b883a 	mov	r5,zero
 2002978:	1009883a 	mov	r4,r2
 200297c:	201aeac0 	call	201aeac <OSMboxPend>
 2002980:	e0bff315 	stw	r2,-52(fp)
						number_of_ball = *nbr_ball;
 2002984:	e0bff317 	ldw	r2,-52(fp)
 2002988:	10800017 	ldw	r2,0(r2)
 200298c:	e0bffc15 	stw	r2,-16(fp)
						//*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;
 2002990:	00800044 	movi	r2,1
 2002994:	e0bfe715 	stw	r2,-100(fp)
			game_finish = 0;
			DEBUG_PRINT("[Task 3] the game can start\n");
			while(!game_finish && !time_out){
                time_out = IORD(MEM_NIOS_PI_BASE,15);
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8) && !time_out){
 2002998:	00007306 	br	2002b68 <task3+0x4b8>
						//*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;

				}
				else if(activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE,8) && !time_out){
 200299c:	e0bfe717 	ldw	r2,-100(fp)
 20029a0:	10800058 	cmpnei	r2,r2,1
 20029a4:	10006b1e 	bne	r2,zero,2002b54 <task3+0x4a4>
 20029a8:	00800834 	movhi	r2,32
 20029ac:	10800804 	addi	r2,r2,32
 20029b0:	10800037 	ldwio	r2,0(r2)
 20029b4:	10006726 	beq	r2,zero,2002b54 <task3+0x4a4>
 20029b8:	e0bfe817 	ldw	r2,-96(fp)
 20029bc:	1000651e 	bne	r2,zero,2002b54 <task3+0x4a4>

						int dir = (int)(IORD(MEM_NIOS_PI_BASE,11));
 20029c0:	00800834 	movhi	r2,32
 20029c4:	10800b04 	addi	r2,r2,44
 20029c8:	10800037 	ldwio	r2,0(r2)
 20029cc:	e0bff415 	stw	r2,-48(fp)
						int effect = (int)(IORD(MEM_NIOS_PI_BASE,12));
 20029d0:	00800834 	movhi	r2,32
 20029d4:	10800c04 	addi	r2,r2,48
 20029d8:	10800037 	ldwio	r2,0(r2)
 20029dc:	e0bff515 	stw	r2,-44(fp)

						int x = dir & 0x3FF;
 20029e0:	e0bff417 	ldw	r2,-48(fp)
 20029e4:	1080ffcc 	andi	r2,r2,1023
 20029e8:	e0bffd15 	stw	r2,-12(fp)
						int y = (dir>>10) & 0x1FF;
 20029ec:	e0bff417 	ldw	r2,-48(fp)
 20029f0:	1005d2ba 	srai	r2,r2,10
 20029f4:	10807fcc 	andi	r2,r2,511
 20029f8:	e0bffe15 	stw	r2,-8(fp)

						int effect_x = effect & 0x3FF;
 20029fc:	e0bff517 	ldw	r2,-44(fp)
 2002a00:	1080ffcc 	andi	r2,r2,1023
 2002a04:	e0bff615 	stw	r2,-40(fp)
						int effect_y = (effect>>10) & 0x1FF;
 2002a08:	e0bff517 	ldw	r2,-44(fp)
 2002a0c:	1005d2ba 	srai	r2,r2,10
 2002a10:	10807fcc 	andi	r2,r2,511
 2002a14:	e0bff715 	stw	r2,-36(fp)

						DEBUG_PRINT("[Task 3] %x - %x \t effect : (%d, %d)\n",x,y, effect_x, effect_y);
 2002a18:	e0fffd17 	ldw	r3,-12(fp)
 2002a1c:	e13ffe17 	ldw	r4,-8(fp)
 2002a20:	e0bff717 	ldw	r2,-36(fp)
 2002a24:	d8800015 	stw	r2,0(sp)
 2002a28:	e1fff617 	ldw	r7,-40(fp)
 2002a2c:	200d883a 	mov	r6,r4
 2002a30:	180b883a 	mov	r5,r3
 2002a34:	010080b4 	movhi	r4,514
 2002a38:	2107f604 	addi	r4,r4,8152
 2002a3c:	20095400 	call	2009540 <printf>

						OSMboxPost(MailBox4, &x);
 2002a40:	d0a78f17 	ldw	r2,-25028(gp)
 2002a44:	e0fffd04 	addi	r3,fp,-12
 2002a48:	180b883a 	mov	r5,r3
 2002a4c:	1009883a 	mov	r4,r2
 2002a50:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox5, &y);
 2002a54:	d0a78917 	ldw	r2,-25052(gp)
 2002a58:	e0fffe04 	addi	r3,fp,-8
 2002a5c:	180b883a 	mov	r5,r3
 2002a60:	1009883a 	mov	r4,r2
 2002a64:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox8, IORD(MEM_NIOS_PI_BASE,9));
 2002a68:	d0e78e17 	ldw	r3,-25032(gp)
 2002a6c:	00800834 	movhi	r2,32
 2002a70:	10800904 	addi	r2,r2,36
 2002a74:	10800037 	ldwio	r2,0(r2)
 2002a78:	100b883a 	mov	r5,r2
 2002a7c:	1809883a 	mov	r4,r3
 2002a80:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));
 2002a84:	d0e78417 	ldw	r3,-25072(gp)
 2002a88:	00800834 	movhi	r2,32
 2002a8c:	10800a04 	addi	r2,r2,40
 2002a90:	10800037 	ldwio	r2,0(r2)
 2002a94:	100b883a 	mov	r5,r2
 2002a98:	1809883a 	mov	r4,r3
 2002a9c:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox12, effect_x);
 2002aa0:	d0a78d17 	ldw	r2,-25036(gp)
 2002aa4:	e0fff617 	ldw	r3,-40(fp)
 2002aa8:	180b883a 	mov	r5,r3
 2002aac:	1009883a 	mov	r4,r2
 2002ab0:	201b24c0 	call	201b24c <OSMboxPost>
						OSMboxPost(MailBox13, effect_y);
 2002ab4:	d0a78617 	ldw	r2,-25064(gp)
 2002ab8:	e0fff717 	ldw	r3,-36(fp)
 2002abc:	180b883a 	mov	r5,r3
 2002ac0:	1009883a 	mov	r4,r2
 2002ac4:	201b24c0 	call	201b24c <OSMboxPost>


						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002ac8:	d0e78817 	ldw	r3,-25056(gp)
 2002acc:	e0bff904 	addi	r2,fp,-28
 2002ad0:	d8800015 	stw	r2,0(sp)
 2002ad4:	000f883a 	mov	r7,zero
 2002ad8:	000d883a 	mov	r6,zero
 2002adc:	01400044 	movi	r5,1
 2002ae0:	1809883a 	mov	r4,r3
 2002ae4:	2019cb80 	call	2019cb8 <OSFlagPend>
						opt_task1=OS_FLAG_SET;
 2002ae8:	00800044 	movi	r2,1
 2002aec:	e0bff205 	stb	r2,-56(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002af0:	d0a79317 	ldw	r2,-25012(gp)
 2002af4:	e0fff203 	ldbu	r3,-56(fp)
 2002af8:	e13ff904 	addi	r4,fp,-28
 2002afc:	200f883a 	mov	r7,r4
 2002b00:	180d883a 	mov	r6,r3
 2002b04:	01400044 	movi	r5,1
 2002b08:	1009883a 	mov	r4,r2
 2002b0c:	201a2d00 	call	201a2d0 <OSFlagPost>

						IOWR(MEM_NIOS_PI_BASE,8,0);
 2002b10:	0007883a 	mov	r3,zero
 2002b14:	00800834 	movhi	r2,32
 2002b18:	10800804 	addi	r2,r2,32
 2002b1c:	10c00035 	stwio	r3,0(r2)
						activePlayer = ID1;
 2002b20:	00800084 	movi	r2,2
 2002b24:	e0bfe715 	stw	r2,-100(fp)
						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 2002b28:	d0a78517 	ldw	r2,-25068(gp)
 2002b2c:	e0fff904 	addi	r3,fp,-28
 2002b30:	180d883a 	mov	r6,r3
 2002b34:	000b883a 	mov	r5,zero
 2002b38:	1009883a 	mov	r4,r2
 2002b3c:	201aeac0 	call	201aeac <OSMboxPend>
 2002b40:	e0bff815 	stw	r2,-32(fp)
						number_of_ball = *nbr_ball;
 2002b44:	e0bff817 	ldw	r2,-32(fp)
 2002b48:	10800017 	ldw	r2,0(r2)
 2002b4c:	e0bffc15 	stw	r2,-16(fp)
						//*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;

				}
				else if(activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE,8) && !time_out){
 2002b50:	00000506 	br	2002b68 <task3+0x4b8>
						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						number_of_ball = *nbr_ball;
						//*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						//*score = (int *) OSMboxPend(MailBox7,0,&err);
				}
				else if(activePlayer == ID2)
 2002b54:	e0bfe717 	ldw	r2,-100(fp)
 2002b58:	10800058 	cmpnei	r2,r2,1
 2002b5c:	1000021e 	bne	r2,zero,2002b68 <task3+0x4b8>
				{
					activePlayer = ID1;
 2002b60:	00800084 	movi	r2,2
 2002b64:	e0bfe715 	stw	r2,-100(fp)
				}
				DEBUG_PRINT("[Task 3] Number of ball : %i\n",number_of_ball);
 2002b68:	e0bffc17 	ldw	r2,-16(fp)
 2002b6c:	100b883a 	mov	r5,r2
 2002b70:	010080b4 	movhi	r4,514
 2002b74:	21080004 	addi	r4,r4,8192
 2002b78:	20095400 	call	2009540 <printf>
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}*/
			activePlayer = ID1;//first_player;
			game_finish = 0;
			DEBUG_PRINT("[Task 3] the game can start\n");
			while(!game_finish && !time_out){
 2002b7c:	e0bfec17 	ldw	r2,-80(fp)
 2002b80:	103eed1e 	bne	r2,zero,2002738 <task3+0x88>
 2002b84:	e0bfe817 	ldw	r2,-96(fp)
 2002b88:	103ef226 	beq	r2,zero,2002754 <task3+0xa4>
					activePlayer = ID1;
				}
				DEBUG_PRINT("[Task 3] Number of ball : %i\n",number_of_ball);
			}

	}
 2002b8c:	003eea06 	br	2002738 <task3+0x88>

02002b90 <task4>:

}

void task4(void* pdata)
{
 2002b90:	defff704 	addi	sp,sp,-36
 2002b94:	dfc00815 	stw	ra,32(sp)
 2002b98:	df000715 	stw	fp,28(sp)
 2002b9c:	df000704 	addi	fp,sp,28
 2002ba0:	e13fff15 	stw	r4,-4(fp)

	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2002ba4:	008000b4 	movhi	r2,2
 2002ba8:	e0bffc15 	stw	r2,-16(fp)

	int count = 0;
 2002bac:	e03ffa15 	stw	zero,-24(fp)
	int count_old = 0;
 2002bb0:	e03ffd15 	stw	zero,-12(fp)

    int gesture_detected = 0;
 2002bb4:	e03ffb15 	stw	zero,-20(fp)

	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 2002bb8:	d0e78a17 	ldw	r3,-25048(gp)
 2002bbc:	e0bffe04 	addi	r2,fp,-8
 2002bc0:	d8800015 	stw	r2,0(sp)
 2002bc4:	000f883a 	mov	r7,zero
 2002bc8:	01802084 	movi	r6,130
 2002bcc:	01400044 	movi	r5,1
 2002bd0:	1809883a 	mov	r4,r3
 2002bd4:	2019cb80 	call	2019cb8 <OSFlagPend>
        while(!gesture_detected){
 2002bd8:	00001006 	br	2002c1c <task4+0x8c>
        count_old = count;
 2002bdc:	e0bffa17 	ldw	r2,-24(fp)
 2002be0:	e0bffd15 	stw	r2,-12(fp)
        count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 2002be4:	e0bffc17 	ldw	r2,-16(fp)
 2002be8:	10800a04 	addi	r2,r2,40
 2002bec:	10800037 	ldwio	r2,0(r2)
 2002bf0:	e0bffa15 	stw	r2,-24(fp)
		    if (count == 1 && count_old == 0){
 2002bf4:	e0bffa17 	ldw	r2,-24(fp)
 2002bf8:	10800058 	cmpnei	r2,r2,1
 2002bfc:	1000071e 	bne	r2,zero,2002c1c <task4+0x8c>
 2002c00:	e0bffd17 	ldw	r2,-12(fp)
 2002c04:	1000051e 	bne	r2,zero,2002c1c <task4+0x8c>
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
 2002c08:	010080b4 	movhi	r4,514
 2002c0c:	21080804 	addi	r4,r4,8224
 2002c10:	20096c00 	call	20096c0 <puts>
    			gesture_detected = 1;
 2002c14:	00800044 	movi	r2,1
 2002c18:	e0bffb15 	stw	r2,-20(fp)
	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
        while(!gesture_detected){
 2002c1c:	e0bffb17 	ldw	r2,-20(fp)
 2002c20:	103fee26 	beq	r2,zero,2002bdc <task4+0x4c>
		    if (count == 1 && count_old == 0){
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
    			gesture_detected = 1;
            }
		}
        gesture_detected = 0;
 2002c24:	e03ffb15 	stw	zero,-20(fp)
        OSFlagPost(StartGameGrp,START_THE_GAME,OS_FLAG_SET,&err);
 2002c28:	d0a79417 	ldw	r2,-25008(gp)
 2002c2c:	e0fffe04 	addi	r3,fp,-8
 2002c30:	180f883a 	mov	r7,r3
 2002c34:	01800044 	movi	r6,1
 2002c38:	01400044 	movi	r5,1
 2002c3c:	1009883a 	mov	r4,r2
 2002c40:	201a2d00 	call	201a2d0 <OSFlagPost>
        OSTimeDlyHMSM(0, 0, 0, 500);
 2002c44:	01c07d04 	movi	r7,500
 2002c48:	000d883a 	mov	r6,zero
 2002c4c:	000b883a 	mov	r5,zero
 2002c50:	0009883a 	mov	r4,zero
 2002c54:	201f0f00 	call	201f0f0 <OSTimeDlyHMSM>
	}
 2002c58:	003fd706 	br	2002bb8 <task4+0x28>

02002c5c <main>:
}


/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2002c5c:	defff804 	addi	sp,sp,-32
 2002c60:	dfc00715 	stw	ra,28(sp)
 2002c64:	df000615 	stw	fp,24(sp)
 2002c68:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 2002c6c:	0009883a 	mov	r4,zero
 2002c70:	201ab980 	call	201ab98 <OSMboxCreate>
 2002c74:	d0a79215 	stw	r2,-25016(gp)
  MailBox2 = OSMboxCreate(NULL);
 2002c78:	0009883a 	mov	r4,zero
 2002c7c:	201ab980 	call	201ab98 <OSMboxCreate>
 2002c80:	d0a78c15 	stw	r2,-25040(gp)
  MailBox3 = OSMboxCreate(NULL);
 2002c84:	0009883a 	mov	r4,zero
 2002c88:	201ab980 	call	201ab98 <OSMboxCreate>
 2002c8c:	d0a78715 	stw	r2,-25060(gp)

  MailBox4 = OSMboxCreate(NULL);
 2002c90:	0009883a 	mov	r4,zero
 2002c94:	201ab980 	call	201ab98 <OSMboxCreate>
 2002c98:	d0a78f15 	stw	r2,-25028(gp)
  MailBox5 = OSMboxCreate(NULL);
 2002c9c:	0009883a 	mov	r4,zero
 2002ca0:	201ab980 	call	201ab98 <OSMboxCreate>
 2002ca4:	d0a78915 	stw	r2,-25052(gp)
  MailBox6 = OSMboxCreate(NULL);
 2002ca8:	0009883a 	mov	r4,zero
 2002cac:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cb0:	d0a78515 	stw	r2,-25068(gp)


  MailBox7 = OSMboxCreate(NULL);
 2002cb4:	0009883a 	mov	r4,zero
 2002cb8:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cbc:	d0a79015 	stw	r2,-25024(gp)
  MailBox8 = OSMboxCreate(NULL);
 2002cc0:	0009883a 	mov	r4,zero
 2002cc4:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cc8:	d0a78e15 	stw	r2,-25032(gp)
  MailBox9 = OSMboxCreate(NULL);
 2002ccc:	0009883a 	mov	r4,zero
 2002cd0:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cd4:	d0a78415 	stw	r2,-25072(gp)

  MailBox10 = OSMboxCreate(NULL);
 2002cd8:	0009883a 	mov	r4,zero
 2002cdc:	201ab980 	call	201ab98 <OSMboxCreate>
 2002ce0:	d0a78b15 	stw	r2,-25044(gp)
  MailBox11 = OSMboxCreate(NULL);
 2002ce4:	0009883a 	mov	r4,zero
 2002ce8:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cec:	d0a79115 	stw	r2,-25020(gp)
  MailBox12 = OSMboxCreate(NULL);
 2002cf0:	0009883a 	mov	r4,zero
 2002cf4:	201ab980 	call	201ab98 <OSMboxCreate>
 2002cf8:	d0a78d15 	stw	r2,-25036(gp)
  MailBox13 = OSMboxCreate(NULL);
 2002cfc:	0009883a 	mov	r4,zero
 2002d00:	201ab980 	call	201ab98 <OSMboxCreate>
 2002d04:	d0a78615 	stw	r2,-25064(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 2002d08:	e17fff04 	addi	r5,fp,-4
 2002d0c:	0009883a 	mov	r4,zero
 2002d10:	20196f40 	call	20196f4 <OSFlagCreate>
 2002d14:	d0a79315 	stw	r2,-25012(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 2002d18:	e17fff04 	addi	r5,fp,-4
 2002d1c:	0009883a 	mov	r4,zero
 2002d20:	20196f40 	call	20196f4 <OSFlagCreate>
 2002d24:	d0a78815 	stw	r2,-25056(gp)
  ActivateTask4Grp = OSFlagCreate(0,&err);
 2002d28:	e17fff04 	addi	r5,fp,-4
 2002d2c:	0009883a 	mov	r4,zero
 2002d30:	20196f40 	call	20196f4 <OSFlagCreate>
 2002d34:	d0a78a15 	stw	r2,-25048(gp)
  StartGameGrp = OSFlagCreate(0,&err);
 2002d38:	e17fff04 	addi	r5,fp,-4
 2002d3c:	0009883a 	mov	r4,zero
 2002d40:	20196f40 	call	20196f4 <OSFlagCreate>
 2002d44:	d0a79415 	stw	r2,-25008(gp)

  accel_spi = alt_up_accelerometer_spi_open_dev(accel_name);
 2002d48:	d0a00017 	ldw	r2,-32768(gp)
 2002d4c:	1009883a 	mov	r4,r2
 2002d50:	20203c00 	call	20203c0 <alt_up_accelerometer_spi_open_dev>
 2002d54:	d0a78315 	stw	r2,-25076(gp)
  	if(accel_spi == NULL){
 2002d58:	d0a78317 	ldw	r2,-25076(gp)
 2002d5c:	1000031e 	bne	r2,zero,2002d6c <main+0x110>
  		printf("Accelerometer device not found.\n");
 2002d60:	010080b4 	movhi	r4,514
 2002d64:	21081104 	addi	r4,r4,8260
 2002d68:	20096c00 	call	20096c0 <puts>
  	}




  OSTaskCreateExt(task1,
 2002d6c:	d8000415 	stw	zero,16(sp)
 2002d70:	d8000315 	stw	zero,12(sp)
 2002d74:	00820004 	movi	r2,2048
 2002d78:	d8800215 	stw	r2,8(sp)
 2002d7c:	008080b4 	movhi	r2,514
 2002d80:	1098dc04 	addi	r2,r2,25456
 2002d84:	d8800115 	stw	r2,4(sp)
 2002d88:	00800044 	movi	r2,1
 2002d8c:	d8800015 	stw	r2,0(sp)
 2002d90:	01c00044 	movi	r7,1
 2002d94:	018080f4 	movhi	r6,515
 2002d98:	31a0db04 	addi	r6,r6,-31892
 2002d9c:	000b883a 	mov	r5,zero
 2002da0:	01008034 	movhi	r4,512
 2002da4:	2100a504 	addi	r4,r4,660
 2002da8:	201df1c0 	call	201df1c <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 2002dac:	d8000415 	stw	zero,16(sp)
 2002db0:	d8000315 	stw	zero,12(sp)
 2002db4:	00820004 	movi	r2,2048
 2002db8:	d8800215 	stw	r2,8(sp)
 2002dbc:	008080f4 	movhi	r2,515
 2002dc0:	10a8dc04 	addi	r2,r2,-23696
 2002dc4:	d8800115 	stw	r2,4(sp)
 2002dc8:	00800084 	movi	r2,2
 2002dcc:	d8800015 	stw	r2,0(sp)
 2002dd0:	01c00084 	movi	r7,2
 2002dd4:	018080f4 	movhi	r6,515
 2002dd8:	31b0db04 	addi	r6,r6,-15508
 2002ddc:	000b883a 	mov	r5,zero
 2002de0:	01008034 	movhi	r4,512
 2002de4:	21018d04 	addi	r4,r4,1588
 2002de8:	201df1c0 	call	201df1c <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2002dec:	d8000415 	stw	zero,16(sp)
 2002df0:	d8000315 	stw	zero,12(sp)
 2002df4:	00820004 	movi	r2,2048
 2002df8:	d8800215 	stw	r2,8(sp)
 2002dfc:	008080f4 	movhi	r2,515
 2002e00:	10b0dc04 	addi	r2,r2,-15504
 2002e04:	d8800115 	stw	r2,4(sp)
 2002e08:	008000c4 	movi	r2,3
 2002e0c:	d8800015 	stw	r2,0(sp)
 2002e10:	01c000c4 	movi	r7,3
 2002e14:	018080f4 	movhi	r6,515
 2002e18:	31b8db04 	addi	r6,r6,-7316
 2002e1c:	000b883a 	mov	r5,zero
 2002e20:	01008034 	movhi	r4,512
 2002e24:	2109ac04 	addi	r4,r4,9904
 2002e28:	201df1c0 	call	201df1c <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSTaskCreateExt(task4,
 2002e2c:	d8000415 	stw	zero,16(sp)
 2002e30:	d8000315 	stw	zero,12(sp)
 2002e34:	00820004 	movi	r2,2048
 2002e38:	d8800215 	stw	r2,8(sp)
 2002e3c:	008080f4 	movhi	r2,515
 2002e40:	10a0dc04 	addi	r2,r2,-31888
 2002e44:	d8800115 	stw	r2,4(sp)
 2002e48:	00800104 	movi	r2,4
 2002e4c:	d8800015 	stw	r2,0(sp)
 2002e50:	01c00104 	movi	r7,4
 2002e54:	018080f4 	movhi	r6,515
 2002e58:	31a8db04 	addi	r6,r6,-23700
 2002e5c:	000b883a 	mov	r5,zero
 2002e60:	01008034 	movhi	r4,512
 2002e64:	210ae404 	addi	r4,r4,11152
 2002e68:	201df1c0 	call	201df1c <OSTaskCreateExt>
                     TASK_STACKSIZE,
                     NULL,
                     0);


  OSStart();
 2002e6c:	2017dbc0 	call	2017dbc <OSStart>
  return 0;
 2002e70:	0005883a 	mov	r2,zero
}
 2002e74:	e037883a 	mov	sp,fp
 2002e78:	dfc00117 	ldw	ra,4(sp)
 2002e7c:	df000017 	ldw	fp,0(sp)
 2002e80:	dec00204 	addi	sp,sp,8
 2002e84:	f800283a 	ret

02002e88 <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 2002e88:	defff604 	addi	sp,sp,-40
 2002e8c:	dfc00915 	stw	ra,36(sp)
 2002e90:	df000815 	stw	fp,32(sp)
 2002e94:	df000804 	addi	fp,sp,32
 2002e98:	e13ffe15 	stw	r4,-8(fp)
 2002e9c:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 2002ea0:	e0bffe17 	ldw	r2,-8(fp)
 2002ea4:	10c00017 	ldw	r3,0(r2)
 2002ea8:	e13fff17 	ldw	r4,-4(fp)
 2002eac:	20800017 	ldw	r2,0(r4)
 2002eb0:	1885ff72 	custom	253,r2,r3,r2
 2002eb4:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 2002eb8:	e0bffe17 	ldw	r2,-8(fp)
 2002ebc:	10800104 	addi	r2,r2,4
 2002ec0:	10c00017 	ldw	r3,0(r2)
 2002ec4:	e0bfff17 	ldw	r2,-4(fp)
 2002ec8:	11000104 	addi	r4,r2,4
 2002ecc:	20800017 	ldw	r2,0(r4)
 2002ed0:	1885ff72 	custom	253,r2,r3,r2
 2002ed4:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 2002ed8:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002edc:	e03ff915 	stw	zero,-28(fp)
 2002ee0:	00003d06 	br	2002fd8 <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 2002ee4:	008080b4 	movhi	r2,514
 2002ee8:	108a4d04 	addi	r2,r2,10548
 2002eec:	e0fff917 	ldw	r3,-28(fp)
 2002ef0:	180690fa 	slli	r3,r3,3
 2002ef4:	10c5883a 	add	r2,r2,r3
 2002ef8:	10800017 	ldw	r2,0(r2)
 2002efc:	1007feb2 	custom	250,r3,r2,zero
 2002f00:	e0bffa17 	ldw	r2,-24(fp)
 2002f04:	1885ffb2 	custom	254,r2,r3,r2
 2002f08:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2002f0c:	008080b4 	movhi	r2,514
 2002f10:	108a4d04 	addi	r2,r2,10548
 2002f14:	e0fff917 	ldw	r3,-28(fp)
 2002f18:	180690fa 	slli	r3,r3,3
 2002f1c:	10c5883a 	add	r2,r2,r3
 2002f20:	10800104 	addi	r2,r2,4
 2002f24:	10800017 	ldw	r2,0(r2)
 2002f28:	1007feb2 	custom	250,r3,r2,zero
 2002f2c:	e0bffb17 	ldw	r2,-20(fp)
 2002f30:	1885ffb2 	custom	254,r2,r3,r2
 2002f34:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2002f38:	e0bff817 	ldw	r2,-32(fp)
 2002f3c:	1000131e 	bne	r2,zero,2002f8c <whole_collide+0x104>
 2002f40:	e0fffc17 	ldw	r3,-16(fp)
 2002f44:	e0bffc17 	ldw	r2,-16(fp)
 2002f48:	1887ff32 	custom	252,r3,r3,r2
 2002f4c:	e13ffd17 	ldw	r4,-12(fp)
 2002f50:	e0bffd17 	ldw	r2,-12(fp)
 2002f54:	2085ff32 	custom	252,r2,r4,r2
 2002f58:	1885ff72 	custom	253,r2,r3,r2
 2002f5c:	1009883a 	mov	r4,r2
 2002f60:	2008e540 	call	2008e54 <__extendsfdf2>
 2002f64:	1011883a 	mov	r8,r2
 2002f68:	1813883a 	mov	r9,r3
 2002f6c:	01b33374 	movhi	r6,52429
 2002f70:	31b33344 	addi	r6,r6,-13107
 2002f74:	01d021b4 	movhi	r7,16518
 2002f78:	39d5b304 	addi	r7,r7,22220
 2002f7c:	4009883a 	mov	r4,r8
 2002f80:	480b883a 	mov	r5,r9
 2002f84:	2007d4c0 	call	2007d4c <__ledf2>
 2002f88:	00800216 	blt	zero,r2,2002f94 <whole_collide+0x10c>
 2002f8c:	00800044 	movi	r2,1
 2002f90:	00000106 	br	2002f98 <whole_collide+0x110>
 2002f94:	0005883a 	mov	r2,zero
 2002f98:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 2002f9c:	e0bff817 	ldw	r2,-32(fp)
 2002fa0:	10000a26 	beq	r2,zero,2002fcc <whole_collide+0x144>
			ball[0]=0;
 2002fa4:	e0bffe17 	ldw	r2,-8(fp)
 2002fa8:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 2002fac:	e0bffe17 	ldw	r2,-8(fp)
 2002fb0:	10800104 	addi	r2,r2,4
 2002fb4:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 2002fb8:	e0bfff17 	ldw	r2,-4(fp)
 2002fbc:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 2002fc0:	e0bfff17 	ldw	r2,-4(fp)
 2002fc4:	10800104 	addi	r2,r2,4
 2002fc8:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002fcc:	e0bff917 	ldw	r2,-28(fp)
 2002fd0:	10800044 	addi	r2,r2,1
 2002fd4:	e0bff915 	stw	r2,-28(fp)
 2002fd8:	e0bff917 	ldw	r2,-28(fp)
 2002fdc:	10800190 	cmplti	r2,r2,6
 2002fe0:	103fc01e 	bne	r2,zero,2002ee4 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 2002fe4:	e0bff817 	ldw	r2,-32(fp)
}
 2002fe8:	e037883a 	mov	sp,fp
 2002fec:	dfc00117 	ldw	ra,4(sp)
 2002ff0:	df000017 	ldw	fp,0(sp)
 2002ff4:	dec00204 	addi	sp,sp,8
 2002ff8:	f800283a 	ret

02002ffc <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2002ffc:	defffa04 	addi	sp,sp,-24
 2003000:	df000515 	stw	fp,20(sp)
 2003004:	df000504 	addi	fp,sp,20
 2003008:	e13ffd15 	stw	r4,-12(fp)
 200300c:	e17ffe15 	stw	r5,-8(fp)
 2003010:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2003014:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2003018:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 200301c:	e0bffd17 	ldw	r2,-12(fp)
 2003020:	10c00017 	ldw	r3,0(r2)
 2003024:	0090b1b4 	movhi	r2,17094
 2003028:	1885f9f2 	custom	231,r2,r3,r2
 200302c:	1000061e 	bne	r2,zero,2003048 <borderCollide+0x4c>
 2003030:	e0bffd17 	ldw	r2,-12(fp)
 2003034:	10c00017 	ldw	r3,0(r2)
 2003038:	009111b4 	movhi	r2,17478
 200303c:	10900004 	addi	r2,r2,16384
 2003040:	1885f972 	custom	229,r2,r3,r2
 2003044:	10000226 	beq	r2,zero,2003050 <borderCollide+0x54>
 2003048:	00800044 	movi	r2,1
 200304c:	00000106 	br	2003054 <borderCollide+0x58>
 2003050:	0005883a 	mov	r2,zero
 2003054:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2003058:	e0bffd17 	ldw	r2,-12(fp)
 200305c:	10800104 	addi	r2,r2,4
 2003060:	10c00017 	ldw	r3,0(r2)
 2003064:	0090a634 	movhi	r2,17048
 2003068:	1885f9f2 	custom	231,r2,r3,r2
 200306c:	1000061e 	bne	r2,zero,2003088 <borderCollide+0x8c>
 2003070:	e0bffd17 	ldw	r2,-12(fp)
 2003074:	10800104 	addi	r2,r2,4
 2003078:	10c00017 	ldw	r3,0(r2)
 200307c:	0090f874 	movhi	r2,17377
 2003080:	1885f972 	custom	229,r2,r3,r2
 2003084:	10000226 	beq	r2,zero,2003090 <borderCollide+0x94>
 2003088:	00800044 	movi	r2,1
 200308c:	00000106 	br	2003094 <borderCollide+0x98>
 2003090:	0005883a 	mov	r2,zero
 2003094:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 2003098:	e0bffe17 	ldw	r2,-8(fp)
 200309c:	10800017 	ldw	r2,0(r2)
 20030a0:	1000081e 	bne	r2,zero,20030c4 <borderCollide+0xc8>
 20030a4:	e0bffb17 	ldw	r2,-20(fp)
 20030a8:	10000626 	beq	r2,zero,20030c4 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 20030ac:	e0ffff17 	ldw	r3,-4(fp)
 20030b0:	18800017 	ldw	r2,0(r3)
 20030b4:	0007883a 	mov	r3,zero
 20030b8:	1887ffb2 	custom	254,r3,r3,r2
 20030bc:	e0bfff17 	ldw	r2,-4(fp)
 20030c0:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 20030c4:	e0bffe17 	ldw	r2,-8(fp)
 20030c8:	10800204 	addi	r2,r2,8
 20030cc:	10800017 	ldw	r2,0(r2)
 20030d0:	10000a1e 	bne	r2,zero,20030fc <borderCollide+0x100>
 20030d4:	e0bffc17 	ldw	r2,-16(fp)
 20030d8:	10000826 	beq	r2,zero,20030fc <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 20030dc:	e0bfff17 	ldw	r2,-4(fp)
 20030e0:	10800104 	addi	r2,r2,4
 20030e4:	e0ffff17 	ldw	r3,-4(fp)
 20030e8:	19000104 	addi	r4,r3,4
 20030ec:	20c00017 	ldw	r3,0(r4)
 20030f0:	0009883a 	mov	r4,zero
 20030f4:	20c7ffb2 	custom	254,r3,r4,r3
 20030f8:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 20030fc:	e0bffe17 	ldw	r2,-8(fp)
 2003100:	10c00117 	ldw	r3,4(r2)
 2003104:	e0bffe17 	ldw	r2,-8(fp)
 2003108:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 200310c:	e0bffe17 	ldw	r2,-8(fp)
 2003110:	10800104 	addi	r2,r2,4
 2003114:	e0fffb17 	ldw	r3,-20(fp)
 2003118:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 200311c:	e0bffe17 	ldw	r2,-8(fp)
 2003120:	10800204 	addi	r2,r2,8
 2003124:	e0fffe17 	ldw	r3,-8(fp)
 2003128:	18c00317 	ldw	r3,12(r3)
 200312c:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2003130:	e0bffe17 	ldw	r2,-8(fp)
 2003134:	10800304 	addi	r2,r2,12
 2003138:	e0fffc17 	ldw	r3,-16(fp)
 200313c:	10c00015 	stw	r3,0(r2)
}
 2003140:	0001883a 	nop
 2003144:	e037883a 	mov	sp,fp
 2003148:	df000017 	ldw	fp,0(sp)
 200314c:	dec00104 	addi	sp,sp,4
 2003150:	f800283a 	ret

02003154 <momentum>:

float momentum (float* velocity){
 2003154:	defffd04 	addi	sp,sp,-12
 2003158:	df000215 	stw	fp,8(sp)
 200315c:	df000204 	addi	fp,sp,8
 2003160:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2003164:	e0bfff17 	ldw	r2,-4(fp)
 2003168:	10c00017 	ldw	r3,0(r2)
 200316c:	e13fff17 	ldw	r4,-4(fp)
 2003170:	20800017 	ldw	r2,0(r4)
 2003174:	1887ff32 	custom	252,r3,r3,r2
 2003178:	e0bfff17 	ldw	r2,-4(fp)
 200317c:	10800104 	addi	r2,r2,4
 2003180:	11000017 	ldw	r4,0(r2)
 2003184:	e0bfff17 	ldw	r2,-4(fp)
 2003188:	11400104 	addi	r5,r2,4
 200318c:	28800017 	ldw	r2,0(r5)
 2003190:	2085ff32 	custom	252,r2,r4,r2
 2003194:	1885ff72 	custom	253,r2,r3,r2
 2003198:	e0bffe15 	stw	r2,-8(fp)
	return result;
 200319c:	e0bffe17 	ldw	r2,-8(fp)
 20031a0:	1007883a 	mov	r3,r2
}
 20031a4:	1805883a 	mov	r2,r3
 20031a8:	e037883a 	mov	sp,fp
 20031ac:	df000017 	ldw	fp,0(sp)
 20031b0:	dec00104 	addi	sp,sp,4
 20031b4:	f800283a 	ret

020031b8 <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 20031b8:	defff604 	addi	sp,sp,-40
 20031bc:	df000915 	stw	fp,36(sp)
 20031c0:	df000904 	addi	fp,sp,36
 20031c4:	e13ffd15 	stw	r4,-12(fp)
 20031c8:	e17ffe15 	stw	r5,-8(fp)
 20031cc:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 20031d0:	e0bfff17 	ldw	r2,-4(fp)
 20031d4:	10c00117 	ldw	r3,4(r2)
 20031d8:	e0bfff17 	ldw	r2,-4(fp)
 20031dc:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 20031e0:	e0bffd17 	ldw	r2,-12(fp)
 20031e4:	10800017 	ldw	r2,0(r2)
 20031e8:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 20031ec:	e0bffe17 	ldw	r2,-8(fp)
 20031f0:	10800017 	ldw	r2,0(r2)
 20031f4:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 20031f8:	e0bffd17 	ldw	r2,-12(fp)
 20031fc:	10800117 	ldw	r2,4(r2)
 2003200:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2003204:	e0bffe17 	ldw	r2,-8(fp)
 2003208:	10800117 	ldw	r2,4(r2)
 200320c:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2003210:	e0fff817 	ldw	r3,-32(fp)
 2003214:	e0bff717 	ldw	r2,-36(fp)
 2003218:	1885ffb2 	custom	254,r2,r3,r2
 200321c:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2003220:	e0fffa17 	ldw	r3,-24(fp)
 2003224:	e0bff917 	ldw	r2,-28(fp)
 2003228:	1885ffb2 	custom	254,r2,r3,r2
 200322c:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2003230:	e0bfff17 	ldw	r2,-4(fp)
 2003234:	10800104 	addi	r2,r2,4
 2003238:	e13ffb17 	ldw	r4,-20(fp)
 200323c:	e0fffb17 	ldw	r3,-20(fp)
 2003240:	20c9ff32 	custom	252,r4,r4,r3
 2003244:	e17ffc17 	ldw	r5,-16(fp)
 2003248:	e0fffc17 	ldw	r3,-16(fp)
 200324c:	28c7ff32 	custom	252,r3,r5,r3
 2003250:	20c9ff72 	custom	253,r4,r4,r3
 2003254:	00d10a74 	movhi	r3,17449
 2003258:	20c7f9b2 	custom	230,r3,r4,r3
 200325c:	18c03fcc 	andi	r3,r3,255
 2003260:	10c00015 	stw	r3,0(r2)
}
 2003264:	0001883a 	nop
 2003268:	e037883a 	mov	sp,fp
 200326c:	df000017 	ldw	fp,0(sp)
 2003270:	dec00104 	addi	sp,sp,4
 2003274:	f800283a 	ret

02003278 <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2003278:	deffeb04 	addi	sp,sp,-84
 200327c:	dfc01415 	stw	ra,80(sp)
 2003280:	df001315 	stw	fp,76(sp)
 2003284:	dc401215 	stw	r17,72(sp)
 2003288:	dc001115 	stw	r16,68(sp)
 200328c:	df001304 	addi	fp,sp,76
 2003290:	e13ffa15 	stw	r4,-24(fp)
 2003294:	e17ffb15 	stw	r5,-20(fp)
 2003298:	e1bffc15 	stw	r6,-16(fp)
 200329c:	e1fffd15 	stw	r7,-12(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 20032a0:	e0800217 	ldw	r2,8(fp)
 20032a4:	10800017 	ldw	r2,0(r2)
 20032a8:	1000041e 	bne	r2,zero,20032bc <collide_calc+0x44>
 20032ac:	e0800217 	ldw	r2,8(fp)
 20032b0:	10800104 	addi	r2,r2,4
 20032b4:	10800017 	ldw	r2,0(r2)
 20032b8:	10001d1e 	bne	r2,zero,2003330 <collide_calc+0xb8>
 20032bc:	e0800217 	ldw	r2,8(fp)
 20032c0:	10800017 	ldw	r2,0(r2)
 20032c4:	1000c626 	beq	r2,zero,20035e0 <collide_calc+0x368>
 20032c8:	e0800217 	ldw	r2,8(fp)
 20032cc:	10800104 	addi	r2,r2,4
 20032d0:	10800017 	ldw	r2,0(r2)
 20032d4:	1000c226 	beq	r2,zero,20035e0 <collide_calc+0x368>
 20032d8:	e0fffa17 	ldw	r3,-24(fp)
 20032dc:	18800017 	ldw	r2,0(r3)
 20032e0:	0007883a 	mov	r3,zero
 20032e4:	10c5f8f2 	custom	227,r2,r2,r3
 20032e8:	1000bd1e 	bne	r2,zero,20035e0 <collide_calc+0x368>
 20032ec:	e0bffa17 	ldw	r2,-24(fp)
 20032f0:	10c00104 	addi	r3,r2,4
 20032f4:	18800017 	ldw	r2,0(r3)
 20032f8:	0007883a 	mov	r3,zero
 20032fc:	10c5f8f2 	custom	227,r2,r2,r3
 2003300:	1000b71e 	bne	r2,zero,20035e0 <collide_calc+0x368>
 2003304:	e0fffb17 	ldw	r3,-20(fp)
 2003308:	18800017 	ldw	r2,0(r3)
 200330c:	0007883a 	mov	r3,zero
 2003310:	10c5f8f2 	custom	227,r2,r2,r3
 2003314:	1000b21e 	bne	r2,zero,20035e0 <collide_calc+0x368>
 2003318:	e0bffb17 	ldw	r2,-20(fp)
 200331c:	10c00104 	addi	r3,r2,4
 2003320:	18800017 	ldw	r2,0(r3)
 2003324:	0007883a 	mov	r3,zero
 2003328:	10c5f8f2 	custom	227,r2,r2,r3
 200332c:	1000ac1e 	bne	r2,zero,20035e0 <collide_calc+0x368>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2003330:	e0bffa17 	ldw	r2,-24(fp)
 2003334:	10800017 	ldw	r2,0(r2)
 2003338:	e0bfef15 	stw	r2,-68(fp)
		x2=ball2[0];
 200333c:	e0bffb17 	ldw	r2,-20(fp)
 2003340:	10800017 	ldw	r2,0(r2)
 2003344:	e0bff015 	stw	r2,-64(fp)
		y1=ball1[1];
 2003348:	e0bffa17 	ldw	r2,-24(fp)
 200334c:	10800117 	ldw	r2,4(r2)
 2003350:	e0bff115 	stw	r2,-60(fp)
		y2=ball2[1];
 2003354:	e0bffb17 	ldw	r2,-20(fp)
 2003358:	10800117 	ldw	r2,4(r2)
 200335c:	e0bff215 	stw	r2,-56(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2003360:	008fe034 	movhi	r2,16256
 2003364:	e0bff315 	stw	r2,-52(fp)
		x21 = x2-x1;
 2003368:	e0fff017 	ldw	r3,-64(fp)
 200336c:	e0bfef17 	ldw	r2,-68(fp)
 2003370:	1885ffb2 	custom	254,r2,r3,r2
 2003374:	e0bfed15 	stw	r2,-76(fp)
		y21 = y2-y1;
 2003378:	e0fff217 	ldw	r3,-56(fp)
 200337c:	e0bff117 	ldw	r2,-60(fp)
 2003380:	1885ffb2 	custom	254,r2,r3,r2
 2003384:	e0bff415 	stw	r2,-48(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2003388:	e0bffd17 	ldw	r2,-12(fp)
 200338c:	10c00017 	ldw	r3,0(r2)
 2003390:	e13ffc17 	ldw	r4,-16(fp)
 2003394:	20800017 	ldw	r2,0(r4)
 2003398:	1885ffb2 	custom	254,r2,r3,r2
 200339c:	e0bff815 	stw	r2,-32(fp)
		v21[1]=velocity2[1]-velocity1[1];
 20033a0:	e0bffd17 	ldw	r2,-12(fp)
 20033a4:	10800104 	addi	r2,r2,4
 20033a8:	10c00017 	ldw	r3,0(r2)
 20033ac:	e0bffc17 	ldw	r2,-16(fp)
 20033b0:	11000104 	addi	r4,r2,4
 20033b4:	20800017 	ldw	r2,0(r4)
 20033b8:	1885ffb2 	custom	254,r2,r3,r2
 20033bc:	e0bff915 	stw	r2,-28(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 20033c0:	e0fff817 	ldw	r3,-32(fp)
 20033c4:	e0bfed17 	ldw	r2,-76(fp)
 20033c8:	1887ff32 	custom	252,r3,r3,r2
 20033cc:	e13ff917 	ldw	r4,-28(fp)
 20033d0:	e0bff417 	ldw	r2,-48(fp)
 20033d4:	2085ff32 	custom	252,r2,r4,r2
 20033d8:	1885ff72 	custom	253,r2,r3,r2
 20033dc:	0007883a 	mov	r3,zero
 20033e0:	10c5f932 	custom	228,r2,r2,r3
 20033e4:	10007e1e 	bne	r2,zero,20035e0 <collide_calc+0x368>
			//DEBUG_PRINT("error in collision\n");
		}
		else{
			fy21=0.000001*fabs(y21);
 20033e8:	e0bff417 	ldw	r2,-48(fp)
 20033ec:	1005f832 	custom	224,r2,r2,zero
 20033f0:	1009883a 	mov	r4,r2
 20033f4:	2008e540 	call	2008e54 <__extendsfdf2>
 20033f8:	1011883a 	mov	r8,r2
 20033fc:	1813883a 	mov	r9,r3
 2003400:	01a82db4 	movhi	r6,41142
 2003404:	31bb6344 	addi	r6,r6,-4723
 2003408:	01cfac74 	movhi	r7,16049
 200340c:	39f1bdc4 	addi	r7,r7,-14601
 2003410:	4009883a 	mov	r4,r8
 2003414:	480b883a 	mov	r5,r9
 2003418:	2007e400 	call	2007e40 <__muldf3>
 200341c:	1009883a 	mov	r4,r2
 2003420:	180b883a 	mov	r5,r3
 2003424:	2005883a 	mov	r2,r4
 2003428:	2807883a 	mov	r3,r5
 200342c:	1009883a 	mov	r4,r2
 2003430:	180b883a 	mov	r5,r3
 2003434:	2008f640 	call	2008f64 <__truncdfsf2>
 2003438:	1007883a 	mov	r3,r2
 200343c:	e0fff515 	stw	r3,-44(fp)
			if(fabs(x21) < fy21){
 2003440:	e0bfed17 	ldw	r2,-76(fp)
 2003444:	1007f832 	custom	224,r3,r2,zero
 2003448:	e0bff517 	ldw	r2,-44(fp)
 200344c:	1885f9f2 	custom	231,r2,r3,r2
 2003450:	10000e26 	beq	r2,zero,200348c <collide_calc+0x214>
				if (x21<0) sign = -1;
 2003454:	e0bfed17 	ldw	r2,-76(fp)
 2003458:	0007883a 	mov	r3,zero
 200345c:	10c5f9f2 	custom	231,r2,r2,r3
 2003460:	10000326 	beq	r2,zero,2003470 <collide_calc+0x1f8>
 2003464:	00bfffc4 	movi	r2,-1
 2003468:	e0bfee15 	stw	r2,-72(fp)
 200346c:	00000206 	br	2003478 <collide_calc+0x200>
				else sign=1;
 2003470:	00800044 	movi	r2,1
 2003474:	e0bfee15 	stw	r2,-72(fp)
				x21=fy21*sign;
 2003478:	e0bfee17 	ldw	r2,-72(fp)
 200347c:	1007feb2 	custom	250,r3,r2,zero
 2003480:	e0bff517 	ldw	r2,-44(fp)
 2003484:	1885ff32 	custom	252,r2,r3,r2
 2003488:	e0bfed15 	stw	r2,-76(fp)
			}
			a=y21/x21;
 200348c:	e0fff417 	ldw	r3,-48(fp)
 2003490:	e0bfed17 	ldw	r2,-76(fp)
 2003494:	1885fff2 	custom	255,r2,r3,r2
 2003498:	e0bff615 	stw	r2,-40(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 200349c:	e0fff817 	ldw	r3,-32(fp)
 20034a0:	e13ff917 	ldw	r4,-28(fp)
 20034a4:	e0bff617 	ldw	r2,-40(fp)
 20034a8:	2085ff32 	custom	252,r2,r4,r2
 20034ac:	1885ff72 	custom	253,r2,r3,r2
 20034b0:	1009883a 	mov	r4,r2
 20034b4:	2008e540 	call	2008e54 <__extendsfdf2>
 20034b8:	1011883a 	mov	r8,r2
 20034bc:	1813883a 	mov	r9,r3
 20034c0:	000d883a 	mov	r6,zero
 20034c4:	01f00034 	movhi	r7,49152
 20034c8:	4009883a 	mov	r4,r8
 20034cc:	480b883a 	mov	r5,r9
 20034d0:	2007e400 	call	2007e40 <__muldf3>
 20034d4:	1009883a 	mov	r4,r2
 20034d8:	180b883a 	mov	r5,r3
 20034dc:	2021883a 	mov	r16,r4
 20034e0:	2823883a 	mov	r17,r5
 20034e4:	e0fff617 	ldw	r3,-40(fp)
 20034e8:	e0bff617 	ldw	r2,-40(fp)
 20034ec:	1887ff32 	custom	252,r3,r3,r2
 20034f0:	008fe034 	movhi	r2,16256
 20034f4:	1887ff72 	custom	253,r3,r3,r2
 20034f8:	e13ff317 	ldw	r4,-52(fp)
 20034fc:	008fe034 	movhi	r2,16256
 2003500:	2085ff72 	custom	253,r2,r4,r2
 2003504:	1885ff32 	custom	252,r2,r3,r2
 2003508:	1009883a 	mov	r4,r2
 200350c:	2008e540 	call	2008e54 <__extendsfdf2>
 2003510:	1009883a 	mov	r4,r2
 2003514:	180b883a 	mov	r5,r3
 2003518:	200d883a 	mov	r6,r4
 200351c:	280f883a 	mov	r7,r5
 2003520:	8009883a 	mov	r4,r16
 2003524:	880b883a 	mov	r5,r17
 2003528:	20073000 	call	2007300 <__divdf3>
 200352c:	1009883a 	mov	r4,r2
 2003530:	180b883a 	mov	r5,r3
 2003534:	2005883a 	mov	r2,r4
 2003538:	2807883a 	mov	r3,r5
 200353c:	1009883a 	mov	r4,r2
 2003540:	180b883a 	mov	r5,r3
 2003544:	2008f640 	call	2008f64 <__truncdfsf2>
 2003548:	1007883a 	mov	r3,r2
 200354c:	e0fff715 	stw	r3,-36(fp)
            velocity2[0] += dv;
 2003550:	e0bffd17 	ldw	r2,-12(fp)
 2003554:	10c00017 	ldw	r3,0(r2)
 2003558:	e0bff717 	ldw	r2,-36(fp)
 200355c:	1887ff72 	custom	253,r3,r3,r2
 2003560:	e0bffd17 	ldw	r2,-12(fp)
 2003564:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 2003568:	e0bffd17 	ldw	r2,-12(fp)
 200356c:	10800104 	addi	r2,r2,4
 2003570:	e0fffd17 	ldw	r3,-12(fp)
 2003574:	18c00104 	addi	r3,r3,4
 2003578:	19000017 	ldw	r4,0(r3)
 200357c:	e17ff617 	ldw	r5,-40(fp)
 2003580:	e0fff717 	ldw	r3,-36(fp)
 2003584:	28c7ff32 	custom	252,r3,r5,r3
 2003588:	20c7ff72 	custom	253,r3,r4,r3
 200358c:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 2003590:	e0bffc17 	ldw	r2,-16(fp)
 2003594:	10c00017 	ldw	r3,0(r2)
 2003598:	e13ff317 	ldw	r4,-52(fp)
 200359c:	e0bff717 	ldw	r2,-36(fp)
 20035a0:	2085ff32 	custom	252,r2,r4,r2
 20035a4:	1887ffb2 	custom	254,r3,r3,r2
 20035a8:	e0bffc17 	ldw	r2,-16(fp)
 20035ac:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 20035b0:	e0bffc17 	ldw	r2,-16(fp)
 20035b4:	10800104 	addi	r2,r2,4
 20035b8:	e0fffc17 	ldw	r3,-16(fp)
 20035bc:	18c00104 	addi	r3,r3,4
 20035c0:	19000017 	ldw	r4,0(r3)
 20035c4:	e17ff617 	ldw	r5,-40(fp)
 20035c8:	e0fff317 	ldw	r3,-52(fp)
 20035cc:	28cbff32 	custom	252,r5,r5,r3
 20035d0:	e0fff717 	ldw	r3,-36(fp)
 20035d4:	28c7ff32 	custom	252,r3,r5,r3
 20035d8:	20c7ffb2 	custom	254,r3,r4,r3
 20035dc:	10c00015 	stw	r3,0(r2)
            //DEBUG_PRINT("collision - ball 1 [ %f, %f] - ball 2 [ %f, %f] - V1 [%f, %f] - V2 [%f,%f]\n", ball1[0],ball1[1],
            //					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
	}
}
 20035e0:	0001883a 	nop
 20035e4:	e6fffe04 	addi	sp,fp,-8
 20035e8:	dfc00317 	ldw	ra,12(sp)
 20035ec:	df000217 	ldw	fp,8(sp)
 20035f0:	dc400117 	ldw	r17,4(sp)
 20035f4:	dc000017 	ldw	r16,0(sp)
 20035f8:	dec00404 	addi	sp,sp,16
 20035fc:	f800283a 	ret

02003600 <moveBall>:


void moveBall(float* ball, float* velocity, float theta, int neutre){
 2003600:	defff704 	addi	sp,sp,-36
 2003604:	dfc00815 	stw	ra,32(sp)
 2003608:	df000715 	stw	fp,28(sp)
 200360c:	dc800615 	stw	r18,24(sp)
 2003610:	dc400515 	stw	r17,20(sp)
 2003614:	dc000415 	stw	r16,16(sp)
 2003618:	df000704 	addi	fp,sp,28
 200361c:	e13ff915 	stw	r4,-28(fp)
 2003620:	e17ffa15 	stw	r5,-24(fp)
 2003624:	e1bffb15 	stw	r6,-20(fp)
 2003628:	e1fffc15 	stw	r7,-16(fp)
	if(neutre != 0)
 200362c:	e0bffc17 	ldw	r2,-16(fp)
 2003630:	10001a26 	beq	r2,zero,200369c <moveBall+0x9c>
	{
		ball[0] += velocity[0]*cosf(theta);
 2003634:	e0bff917 	ldw	r2,-28(fp)
 2003638:	14000017 	ldw	r16,0(r2)
 200363c:	e0bffa17 	ldw	r2,-24(fp)
 2003640:	14400017 	ldw	r17,0(r2)
 2003644:	e13ffb17 	ldw	r4,-20(fp)
 2003648:	20039a80 	call	20039a8 <cosf>
 200364c:	1007883a 	mov	r3,r2
 2003650:	88c5ff32 	custom	252,r2,r17,r3
 2003654:	8087ff72 	custom	253,r3,r16,r2
 2003658:	e0bff917 	ldw	r2,-28(fp)
 200365c:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1]*sinf(theta);
 2003660:	e0bff917 	ldw	r2,-28(fp)
 2003664:	14000104 	addi	r16,r2,4
 2003668:	e0bff917 	ldw	r2,-28(fp)
 200366c:	10800104 	addi	r2,r2,4
 2003670:	14400017 	ldw	r17,0(r2)
 2003674:	e0bffa17 	ldw	r2,-24(fp)
 2003678:	10800104 	addi	r2,r2,4
 200367c:	14800017 	ldw	r18,0(r2)
 2003680:	e13ffb17 	ldw	r4,-20(fp)
 2003684:	2003ae80 	call	2003ae8 <sinf>
 2003688:	1007883a 	mov	r3,r2
 200368c:	90c5ff32 	custom	252,r2,r18,r3
 2003690:	8885ff72 	custom	253,r2,r17,r2
 2003694:	80800015 	stw	r2,0(r16)
	else
	{
		ball[0] += velocity[0];
		ball[1] += velocity[1];
	}
}
 2003698:	00001106 	br	20036e0 <moveBall+0xe0>
		ball[0] += velocity[0]*cosf(theta);
		ball[1] += velocity[1]*sinf(theta);
	}
	else
	{
		ball[0] += velocity[0];
 200369c:	e0bff917 	ldw	r2,-28(fp)
 20036a0:	10c00017 	ldw	r3,0(r2)
 20036a4:	e13ffa17 	ldw	r4,-24(fp)
 20036a8:	20800017 	ldw	r2,0(r4)
 20036ac:	1887ff72 	custom	253,r3,r3,r2
 20036b0:	e0bff917 	ldw	r2,-28(fp)
 20036b4:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1];
 20036b8:	e0bff917 	ldw	r2,-28(fp)
 20036bc:	10800104 	addi	r2,r2,4
 20036c0:	e0fff917 	ldw	r3,-28(fp)
 20036c4:	18c00104 	addi	r3,r3,4
 20036c8:	19000017 	ldw	r4,0(r3)
 20036cc:	e0fffa17 	ldw	r3,-24(fp)
 20036d0:	19400104 	addi	r5,r3,4
 20036d4:	28c00017 	ldw	r3,0(r5)
 20036d8:	20c7ff72 	custom	253,r3,r4,r3
 20036dc:	10c00015 	stw	r3,0(r2)
	}
}
 20036e0:	0001883a 	nop
 20036e4:	e6fffd04 	addi	sp,fp,-12
 20036e8:	dfc00417 	ldw	ra,16(sp)
 20036ec:	df000317 	ldw	fp,12(sp)
 20036f0:	dc800217 	ldw	r18,8(sp)
 20036f4:	dc400117 	ldw	r17,4(sp)
 20036f8:	dc000017 	ldw	r16,0(sp)
 20036fc:	dec00504 	addi	sp,sp,20
 2003700:	f800283a 	ret

02003704 <damping>:


void damping(float* velocity){
 2003704:	defffc04 	addi	sp,sp,-16
 2003708:	dfc00315 	stw	ra,12(sp)
 200370c:	df000215 	stw	fp,8(sp)
 2003710:	dc000115 	stw	r16,4(sp)
 2003714:	df000204 	addi	fp,sp,8
 2003718:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 200371c:	e0bffe17 	ldw	r2,-8(fp)
 2003720:	10c00017 	ldw	r3,0(r2)
 2003724:	1809883a 	mov	r4,r3
 2003728:	2008e540 	call	2008e54 <__extendsfdf2>
 200372c:	1011883a 	mov	r8,r2
 2003730:	1813883a 	mov	r9,r3
 2003734:	018f5c74 	movhi	r6,15729
 2003738:	31a8f5c4 	addi	r6,r6,-23593
 200373c:	01cffc34 	movhi	r7,16368
 2003740:	39f5c284 	addi	r7,r7,-10486
 2003744:	4009883a 	mov	r4,r8
 2003748:	480b883a 	mov	r5,r9
 200374c:	2007e400 	call	2007e40 <__muldf3>
 2003750:	1009883a 	mov	r4,r2
 2003754:	180b883a 	mov	r5,r3
 2003758:	2005883a 	mov	r2,r4
 200375c:	2807883a 	mov	r3,r5
 2003760:	1009883a 	mov	r4,r2
 2003764:	180b883a 	mov	r5,r3
 2003768:	2008f640 	call	2008f64 <__truncdfsf2>
 200376c:	1007883a 	mov	r3,r2
 2003770:	e0bffe17 	ldw	r2,-8(fp)
 2003774:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 2003778:	e0bffe17 	ldw	r2,-8(fp)
 200377c:	14000104 	addi	r16,r2,4
 2003780:	e0bffe17 	ldw	r2,-8(fp)
 2003784:	10800104 	addi	r2,r2,4
 2003788:	10c00017 	ldw	r3,0(r2)
 200378c:	1809883a 	mov	r4,r3
 2003790:	2008e540 	call	2008e54 <__extendsfdf2>
 2003794:	1011883a 	mov	r8,r2
 2003798:	1813883a 	mov	r9,r3
 200379c:	018f5c74 	movhi	r6,15729
 20037a0:	31a8f5c4 	addi	r6,r6,-23593
 20037a4:	01cffc34 	movhi	r7,16368
 20037a8:	39f5c284 	addi	r7,r7,-10486
 20037ac:	4009883a 	mov	r4,r8
 20037b0:	480b883a 	mov	r5,r9
 20037b4:	2007e400 	call	2007e40 <__muldf3>
 20037b8:	1009883a 	mov	r4,r2
 20037bc:	180b883a 	mov	r5,r3
 20037c0:	2005883a 	mov	r2,r4
 20037c4:	2807883a 	mov	r3,r5
 20037c8:	1009883a 	mov	r4,r2
 20037cc:	180b883a 	mov	r5,r3
 20037d0:	2008f640 	call	2008f64 <__truncdfsf2>
 20037d4:	1007883a 	mov	r3,r2
 20037d8:	80c00015 	stw	r3,0(r16)
}
 20037dc:	0001883a 	nop
 20037e0:	e6ffff04 	addi	sp,fp,-4
 20037e4:	dfc00217 	ldw	ra,8(sp)
 20037e8:	df000117 	ldw	fp,4(sp)
 20037ec:	dc000017 	ldw	r16,0(sp)
 20037f0:	dec00304 	addi	sp,sp,12
 20037f4:	f800283a 	ret

020037f8 <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 20037f8:	defffa04 	addi	sp,sp,-24
 20037fc:	dfc00515 	stw	ra,20(sp)
 2003800:	df000415 	stw	fp,16(sp)
 2003804:	df000404 	addi	fp,sp,16
 2003808:	e13ffc15 	stw	r4,-16(fp)
 200380c:	e17ffd15 	stw	r5,-12(fp)
 2003810:	e1bffe15 	stw	r6,-8(fp)
 2003814:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 2003818:	e13ffc17 	ldw	r4,-16(fp)
 200381c:	e17ffd17 	ldw	r5,-12(fp)
 2003820:	20038a40 	call	20038a4 <__fpclassifyd>
 2003824:	1000031e 	bne	r2,zero,2003834 <fmin+0x3c>
    return y;
 2003828:	e0bffe17 	ldw	r2,-8(fp)
 200382c:	e0ffff17 	ldw	r3,-4(fp)
 2003830:	00001306 	br	2003880 <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2003834:	e13ffe17 	ldw	r4,-8(fp)
 2003838:	e17fff17 	ldw	r5,-4(fp)
 200383c:	20038a40 	call	20038a4 <__fpclassifyd>
 2003840:	1000031e 	bne	r2,zero,2003850 <fmin+0x58>
    return x;
 2003844:	e0bffc17 	ldw	r2,-16(fp)
 2003848:	e0fffd17 	ldw	r3,-12(fp)
 200384c:	00000c06 	br	2003880 <fmin+0x88>
  
  return x < y ? x : y;
 2003850:	e1bffe17 	ldw	r6,-8(fp)
 2003854:	e1ffff17 	ldw	r7,-4(fp)
 2003858:	e13ffc17 	ldw	r4,-16(fp)
 200385c:	e17ffd17 	ldw	r5,-12(fp)
 2003860:	2007d4c0 	call	2007d4c <__ledf2>
 2003864:	1000030e 	bge	r2,zero,2003874 <fmin+0x7c>
 2003868:	e0bffc17 	ldw	r2,-16(fp)
 200386c:	e0fffd17 	ldw	r3,-12(fp)
 2003870:	00000206 	br	200387c <fmin+0x84>
 2003874:	e0bffe17 	ldw	r2,-8(fp)
 2003878:	e0ffff17 	ldw	r3,-4(fp)
 200387c:	0001883a 	nop
 2003880:	1009883a 	mov	r4,r2
 2003884:	180b883a 	mov	r5,r3
}
 2003888:	2005883a 	mov	r2,r4
 200388c:	2807883a 	mov	r3,r5
 2003890:	e037883a 	mov	sp,fp
 2003894:	dfc00117 	ldw	ra,4(sp)
 2003898:	df000017 	ldw	fp,0(sp)
 200389c:	dec00204 	addi	sp,sp,8
 20038a0:	f800283a 	ret

020038a4 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 20038a4:	defff904 	addi	sp,sp,-28
 20038a8:	df000615 	stw	fp,24(sp)
 20038ac:	df000604 	addi	fp,sp,24
 20038b0:	e13ffe15 	stw	r4,-8(fp)
 20038b4:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 20038b8:	e0bffe17 	ldw	r2,-8(fp)
 20038bc:	e0bffc15 	stw	r2,-16(fp)
 20038c0:	e0bfff17 	ldw	r2,-4(fp)
 20038c4:	e0bffd15 	stw	r2,-12(fp)
 20038c8:	e0bffd17 	ldw	r2,-12(fp)
 20038cc:	e0bffa15 	stw	r2,-24(fp)
 20038d0:	e0bffc17 	ldw	r2,-16(fp)
 20038d4:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 20038d8:	e0bffa17 	ldw	r2,-24(fp)
 20038dc:	1000021e 	bne	r2,zero,20038e8 <__fpclassifyd+0x44>
 20038e0:	e0bffb17 	ldw	r2,-20(fp)
 20038e4:	10000526 	beq	r2,zero,20038fc <__fpclassifyd+0x58>
 20038e8:	e0fffa17 	ldw	r3,-24(fp)
 20038ec:	00a00034 	movhi	r2,32768
 20038f0:	1880041e 	bne	r3,r2,2003904 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 20038f4:	e0bffb17 	ldw	r2,-20(fp)
 20038f8:	1000021e 	bne	r2,zero,2003904 <__fpclassifyd+0x60>
    return FP_ZERO;
 20038fc:	00800084 	movi	r2,2
 2003900:	00002506 	br	2003998 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 2003904:	e0fffa17 	ldw	r3,-24(fp)
 2003908:	00800434 	movhi	r2,16
 200390c:	18800336 	bltu	r3,r2,200391c <__fpclassifyd+0x78>
 2003910:	e0fffa17 	ldw	r3,-24(fp)
 2003914:	009ffc34 	movhi	r2,32752
 2003918:	18800636 	bltu	r3,r2,2003934 <__fpclassifyd+0x90>
 200391c:	e0fffa17 	ldw	r3,-24(fp)
 2003920:	00a00434 	movhi	r2,32784
 2003924:	18800536 	bltu	r3,r2,200393c <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 2003928:	e0fffa17 	ldw	r3,-24(fp)
 200392c:	00bffc34 	movhi	r2,65520
 2003930:	1880022e 	bgeu	r3,r2,200393c <__fpclassifyd+0x98>
    return FP_NORMAL;
 2003934:	00800104 	movi	r2,4
 2003938:	00001706 	br	2003998 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200393c:	e0fffa17 	ldw	r3,-24(fp)
 2003940:	00800434 	movhi	r2,16
 2003944:	18800536 	bltu	r3,r2,200395c <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003948:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200394c:	1000050e 	bge	r2,zero,2003964 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003950:	e0fffa17 	ldw	r3,-24(fp)
 2003954:	00a00434 	movhi	r2,32784
 2003958:	1880022e 	bgeu	r3,r2,2003964 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 200395c:	008000c4 	movi	r2,3
 2003960:	00000d06 	br	2003998 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2003964:	e0fffa17 	ldw	r3,-24(fp)
 2003968:	009ffc34 	movhi	r2,32752
 200396c:	1880021e 	bne	r3,r2,2003978 <__fpclassifyd+0xd4>
 2003970:	e0bffb17 	ldw	r2,-20(fp)
 2003974:	10000526 	beq	r2,zero,200398c <__fpclassifyd+0xe8>
 2003978:	e0fffa17 	ldw	r3,-24(fp)
 200397c:	00bffc34 	movhi	r2,65520
 2003980:	1880041e 	bne	r3,r2,2003994 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003984:	e0bffb17 	ldw	r2,-20(fp)
 2003988:	1000021e 	bne	r2,zero,2003994 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 200398c:	00800044 	movi	r2,1
 2003990:	00000106 	br	2003998 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2003994:	0005883a 	mov	r2,zero
}
 2003998:	e037883a 	mov	sp,fp
 200399c:	df000017 	ldw	fp,0(sp)
 20039a0:	dec00104 	addi	sp,sp,4
 20039a4:	f800283a 	ret

020039a8 <cosf>:
	float cosf(float x)
#else
	float cosf(x)
	float x;
#endif
{
 20039a8:	defff704 	addi	sp,sp,-36
 20039ac:	dfc00815 	stw	ra,32(sp)
 20039b0:	df000715 	stw	fp,28(sp)
 20039b4:	df000704 	addi	fp,sp,28
 20039b8:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 20039bc:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 20039c0:	e0bfff17 	ldw	r2,-4(fp)
 20039c4:	e0bffe15 	stw	r2,-8(fp)
 20039c8:	e0bffe17 	ldw	r2,-8(fp)
 20039cc:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 20039d0:	e0fffa17 	ldw	r3,-24(fp)
 20039d4:	00a00034 	movhi	r2,32768
 20039d8:	10bfffc4 	addi	r2,r2,-1
 20039dc:	1884703a 	and	r2,r3,r2
 20039e0:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
 20039e4:	e0fffa17 	ldw	r3,-24(fp)
 20039e8:	008fd274 	movhi	r2,16201
 20039ec:	1083f604 	addi	r2,r2,4056
 20039f0:	10c00516 	blt	r2,r3,2003a08 <cosf+0x60>
 20039f4:	e17ff917 	ldw	r5,-28(fp)
 20039f8:	e13fff17 	ldw	r4,-4(fp)
 20039fc:	2004eb00 	call	2004eb0 <__kernel_cosf>
 2003a00:	1007883a 	mov	r3,r2
 2003a04:	00003206 	br	2003ad0 <cosf+0x128>

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 2003a08:	e0fffa17 	ldw	r3,-24(fp)
 2003a0c:	009fe034 	movhi	r2,32640
 2003a10:	18800416 	blt	r3,r2,2003a24 <cosf+0x7c>
 2003a14:	e0ffff17 	ldw	r3,-4(fp)
 2003a18:	e0bfff17 	ldw	r2,-4(fp)
 2003a1c:	1887ffb2 	custom	254,r3,r3,r2
 2003a20:	00002b06 	br	2003ad0 <cosf+0x128>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2003a24:	e0bffc04 	addi	r2,fp,-16
 2003a28:	100b883a 	mov	r5,r2
 2003a2c:	e13fff17 	ldw	r4,-4(fp)
 2003a30:	200483c0 	call	200483c <__ieee754_rem_pio2f>
 2003a34:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003a38:	e0bffb17 	ldw	r2,-20(fp)
 2003a3c:	108000cc 	andi	r2,r2,3
 2003a40:	10c00060 	cmpeqi	r3,r2,1
 2003a44:	18000a1e 	bne	r3,zero,2003a70 <cosf+0xc8>
 2003a48:	10c000a0 	cmpeqi	r3,r2,2
 2003a4c:	1800111e 	bne	r3,zero,2003a94 <cosf+0xec>
 2003a50:	1000181e 	bne	r2,zero,2003ab4 <cosf+0x10c>
		case 0: return  __kernel_cosf(y[0],y[1]);
 2003a54:	e0bffc17 	ldw	r2,-16(fp)
 2003a58:	e0fffd17 	ldw	r3,-12(fp)
 2003a5c:	180b883a 	mov	r5,r3
 2003a60:	1009883a 	mov	r4,r2
 2003a64:	2004eb00 	call	2004eb0 <__kernel_cosf>
 2003a68:	1007883a 	mov	r3,r2
 2003a6c:	00001806 	br	2003ad0 <cosf+0x128>
		case 1: return -__kernel_sinf(y[0],y[1],1);
 2003a70:	e0bffc17 	ldw	r2,-16(fp)
 2003a74:	e0fffd17 	ldw	r3,-12(fp)
 2003a78:	01800044 	movi	r6,1
 2003a7c:	180b883a 	mov	r5,r3
 2003a80:	1009883a 	mov	r4,r2
 2003a84:	2005f140 	call	2005f14 <__kernel_sinf>
 2003a88:	1007883a 	mov	r3,r2
 2003a8c:	1807f872 	custom	225,r3,r3,zero
 2003a90:	00000f06 	br	2003ad0 <cosf+0x128>
		case 2: return -__kernel_cosf(y[0],y[1]);
 2003a94:	e0bffc17 	ldw	r2,-16(fp)
 2003a98:	e0fffd17 	ldw	r3,-12(fp)
 2003a9c:	180b883a 	mov	r5,r3
 2003aa0:	1009883a 	mov	r4,r2
 2003aa4:	2004eb00 	call	2004eb0 <__kernel_cosf>
 2003aa8:	1007883a 	mov	r3,r2
 2003aac:	1807f872 	custom	225,r3,r3,zero
 2003ab0:	00000706 	br	2003ad0 <cosf+0x128>
		default:
		        return  __kernel_sinf(y[0],y[1],1);
 2003ab4:	e0bffc17 	ldw	r2,-16(fp)
 2003ab8:	e0fffd17 	ldw	r3,-12(fp)
 2003abc:	01800044 	movi	r6,1
 2003ac0:	180b883a 	mov	r5,r3
 2003ac4:	1009883a 	mov	r4,r2
 2003ac8:	2005f140 	call	2005f14 <__kernel_sinf>
 2003acc:	1007883a 	mov	r3,r2
 2003ad0:	1805883a 	mov	r2,r3
	    }
	}
}
 2003ad4:	e037883a 	mov	sp,fp
 2003ad8:	dfc00117 	ldw	ra,4(sp)
 2003adc:	df000017 	ldw	fp,0(sp)
 2003ae0:	dec00204 	addi	sp,sp,8
 2003ae4:	f800283a 	ret

02003ae8 <sinf>:
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 2003ae8:	defff704 	addi	sp,sp,-36
 2003aec:	dfc00815 	stw	ra,32(sp)
 2003af0:	df000715 	stw	fp,28(sp)
 2003af4:	df000704 	addi	fp,sp,28
 2003af8:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 2003afc:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 2003b00:	e0bfff17 	ldw	r2,-4(fp)
 2003b04:	e0bffe15 	stw	r2,-8(fp)
 2003b08:	e0bffe17 	ldw	r2,-8(fp)
 2003b0c:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 2003b10:	e0fffa17 	ldw	r3,-24(fp)
 2003b14:	00a00034 	movhi	r2,32768
 2003b18:	10bfffc4 	addi	r2,r2,-1
 2003b1c:	1884703a 	and	r2,r3,r2
 2003b20:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 2003b24:	e0fffa17 	ldw	r3,-24(fp)
 2003b28:	008fd274 	movhi	r2,16201
 2003b2c:	1083f604 	addi	r2,r2,4056
 2003b30:	10c00616 	blt	r2,r3,2003b4c <sinf+0x64>
 2003b34:	000d883a 	mov	r6,zero
 2003b38:	e17ff917 	ldw	r5,-28(fp)
 2003b3c:	e13fff17 	ldw	r4,-4(fp)
 2003b40:	2005f140 	call	2005f14 <__kernel_sinf>
 2003b44:	1007883a 	mov	r3,r2
 2003b48:	00003206 	br	2003c14 <sinf+0x12c>

    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 2003b4c:	e0fffa17 	ldw	r3,-24(fp)
 2003b50:	009fe034 	movhi	r2,32640
 2003b54:	18800416 	blt	r3,r2,2003b68 <sinf+0x80>
 2003b58:	e0ffff17 	ldw	r3,-4(fp)
 2003b5c:	e0bfff17 	ldw	r2,-4(fp)
 2003b60:	1887ffb2 	custom	254,r3,r3,r2
 2003b64:	00002b06 	br	2003c14 <sinf+0x12c>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2003b68:	e0bffc04 	addi	r2,fp,-16
 2003b6c:	100b883a 	mov	r5,r2
 2003b70:	e13fff17 	ldw	r4,-4(fp)
 2003b74:	200483c0 	call	200483c <__ieee754_rem_pio2f>
 2003b78:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003b7c:	e0bffb17 	ldw	r2,-20(fp)
 2003b80:	108000cc 	andi	r2,r2,3
 2003b84:	10c00060 	cmpeqi	r3,r2,1
 2003b88:	18000b1e 	bne	r3,zero,2003bb8 <sinf+0xd0>
 2003b8c:	10c000a0 	cmpeqi	r3,r2,2
 2003b90:	1800101e 	bne	r3,zero,2003bd4 <sinf+0xec>
 2003b94:	1000181e 	bne	r2,zero,2003bf8 <sinf+0x110>
		case 0: return  __kernel_sinf(y[0],y[1],1);
 2003b98:	e0bffc17 	ldw	r2,-16(fp)
 2003b9c:	e0fffd17 	ldw	r3,-12(fp)
 2003ba0:	01800044 	movi	r6,1
 2003ba4:	180b883a 	mov	r5,r3
 2003ba8:	1009883a 	mov	r4,r2
 2003bac:	2005f140 	call	2005f14 <__kernel_sinf>
 2003bb0:	1007883a 	mov	r3,r2
 2003bb4:	00001706 	br	2003c14 <sinf+0x12c>
		case 1: return  __kernel_cosf(y[0],y[1]);
 2003bb8:	e0bffc17 	ldw	r2,-16(fp)
 2003bbc:	e0fffd17 	ldw	r3,-12(fp)
 2003bc0:	180b883a 	mov	r5,r3
 2003bc4:	1009883a 	mov	r4,r2
 2003bc8:	2004eb00 	call	2004eb0 <__kernel_cosf>
 2003bcc:	1007883a 	mov	r3,r2
 2003bd0:	00001006 	br	2003c14 <sinf+0x12c>
		case 2: return -__kernel_sinf(y[0],y[1],1);
 2003bd4:	e0bffc17 	ldw	r2,-16(fp)
 2003bd8:	e0fffd17 	ldw	r3,-12(fp)
 2003bdc:	01800044 	movi	r6,1
 2003be0:	180b883a 	mov	r5,r3
 2003be4:	1009883a 	mov	r4,r2
 2003be8:	2005f140 	call	2005f14 <__kernel_sinf>
 2003bec:	1007883a 	mov	r3,r2
 2003bf0:	1807f872 	custom	225,r3,r3,zero
 2003bf4:	00000706 	br	2003c14 <sinf+0x12c>
		default:
			return -__kernel_cosf(y[0],y[1]);
 2003bf8:	e0bffc17 	ldw	r2,-16(fp)
 2003bfc:	e0fffd17 	ldw	r3,-12(fp)
 2003c00:	180b883a 	mov	r5,r3
 2003c04:	1009883a 	mov	r4,r2
 2003c08:	2004eb00 	call	2004eb0 <__kernel_cosf>
 2003c0c:	1007883a 	mov	r3,r2
 2003c10:	1807f872 	custom	225,r3,r3,zero
 2003c14:	1805883a 	mov	r2,r3
	    }
	}
}
 2003c18:	e037883a 	mov	sp,fp
 2003c1c:	dfc00117 	ldw	ra,4(sp)
 2003c20:	df000017 	ldw	fp,0(sp)
 2003c24:	dec00204 	addi	sp,sp,8
 2003c28:	f800283a 	ret

02003c2c <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 2003c2c:	defff104 	addi	sp,sp,-60
 2003c30:	dfc00e15 	stw	ra,56(sp)
 2003c34:	df000d15 	stw	fp,52(sp)
 2003c38:	df000d04 	addi	fp,sp,52
 2003c3c:	e13ffe15 	stw	r4,-8(fp)
 2003c40:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 2003c44:	e13ffe17 	ldw	r4,-8(fp)
 2003c48:	e17fff17 	ldw	r5,-4(fp)
 2003c4c:	2003de00 	call	2003de0 <__ieee754_sqrt>
 2003c50:	e0bff315 	stw	r2,-52(fp)
 2003c54:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 2003c58:	d0a02817 	ldw	r2,-32608(gp)
 2003c5c:	10bfffe0 	cmpeqi	r2,r2,-1
 2003c60:	1000041e 	bne	r2,zero,2003c74 <sqrt+0x48>
 2003c64:	e13ffe17 	ldw	r4,-8(fp)
 2003c68:	e17fff17 	ldw	r5,-4(fp)
 2003c6c:	20038a40 	call	20038a4 <__fpclassifyd>
 2003c70:	1000031e 	bne	r2,zero,2003c80 <sqrt+0x54>
 2003c74:	e0bff317 	ldw	r2,-52(fp)
 2003c78:	e0fff417 	ldw	r3,-48(fp)
 2003c7c:	00003f06 	br	2003d7c <sqrt+0x150>
	if(x<0.0) {
 2003c80:	000d883a 	mov	r6,zero
 2003c84:	000f883a 	mov	r7,zero
 2003c88:	e13ffe17 	ldw	r4,-8(fp)
 2003c8c:	e17fff17 	ldw	r5,-4(fp)
 2003c90:	2007d4c0 	call	2007d4c <__ledf2>
 2003c94:	1000370e 	bge	r2,zero,2003d74 <sqrt+0x148>
	  exc.type = DOMAIN;
 2003c98:	00800044 	movi	r2,1
 2003c9c:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 2003ca0:	008080b4 	movhi	r2,514
 2003ca4:	10881904 	addi	r2,r2,8292
 2003ca8:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 2003cac:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 2003cb0:	e0bffe17 	ldw	r2,-8(fp)
 2003cb4:	e0bff915 	stw	r2,-28(fp)
 2003cb8:	e0bfff17 	ldw	r2,-4(fp)
 2003cbc:	e0bffa15 	stw	r2,-24(fp)
 2003cc0:	e0bff917 	ldw	r2,-28(fp)
 2003cc4:	e0fffa17 	ldw	r3,-24(fp)
 2003cc8:	e0bff715 	stw	r2,-36(fp)
 2003ccc:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 2003cd0:	d0a02817 	ldw	r2,-32608(gp)
 2003cd4:	1000031e 	bne	r2,zero,2003ce4 <sqrt+0xb8>
	    exc.retval = 0.0;
 2003cd8:	e03ffb15 	stw	zero,-20(fp)
 2003cdc:	e03ffc15 	stw	zero,-16(fp)
 2003ce0:	00000b06 	br	2003d10 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 2003ce4:	000d883a 	mov	r6,zero
 2003ce8:	000f883a 	mov	r7,zero
 2003cec:	0009883a 	mov	r4,zero
 2003cf0:	000b883a 	mov	r5,zero
 2003cf4:	20073000 	call	2007300 <__divdf3>
 2003cf8:	1009883a 	mov	r4,r2
 2003cfc:	180b883a 	mov	r5,r3
 2003d00:	2005883a 	mov	r2,r4
 2003d04:	2807883a 	mov	r3,r5
 2003d08:	e0bffb15 	stw	r2,-20(fp)
 2003d0c:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 2003d10:	d0a02817 	ldw	r2,-32608(gp)
 2003d14:	10800098 	cmpnei	r2,r2,2
 2003d18:	1000051e 	bne	r2,zero,2003d30 <sqrt+0x104>
            errno = EDOM;
 2003d1c:	20091700 	call	2009170 <__errno>
 2003d20:	1007883a 	mov	r3,r2
 2003d24:	00800844 	movi	r2,33
 2003d28:	18800015 	stw	r2,0(r3)
 2003d2c:	00000806 	br	2003d50 <sqrt+0x124>
          else if (!matherr(&exc)) {
 2003d30:	e0bff504 	addi	r2,fp,-44
 2003d34:	1009883a 	mov	r4,r2
 2003d38:	20060800 	call	2006080 <matherr>
 2003d3c:	1000041e 	bne	r2,zero,2003d50 <sqrt+0x124>
            errno = EDOM;
 2003d40:	20091700 	call	2009170 <__errno>
 2003d44:	1007883a 	mov	r3,r2
 2003d48:	00800844 	movi	r2,33
 2003d4c:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 2003d50:	e0bffd17 	ldw	r2,-12(fp)
 2003d54:	10000426 	beq	r2,zero,2003d68 <sqrt+0x13c>
	    errno = exc.err;
 2003d58:	20091700 	call	2009170 <__errno>
 2003d5c:	1007883a 	mov	r3,r2
 2003d60:	e0bffd17 	ldw	r2,-12(fp)
 2003d64:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 2003d68:	e0bffb17 	ldw	r2,-20(fp)
 2003d6c:	e0fffc17 	ldw	r3,-16(fp)
 2003d70:	00000206 	br	2003d7c <sqrt+0x150>
	} else
	    return z;
 2003d74:	e0bff317 	ldw	r2,-52(fp)
 2003d78:	e0fff417 	ldw	r3,-48(fp)
 2003d7c:	1009883a 	mov	r4,r2
 2003d80:	180b883a 	mov	r5,r3
#endif
}
 2003d84:	2005883a 	mov	r2,r4
 2003d88:	2807883a 	mov	r3,r5
 2003d8c:	e037883a 	mov	sp,fp
 2003d90:	dfc00117 	ldw	ra,4(sp)
 2003d94:	df000017 	ldw	fp,0(sp)
 2003d98:	dec00204 	addi	sp,sp,8
 2003d9c:	f800283a 	ret

02003da0 <atan2f>:
	float atan2f(float y, float x)		/* wrapper atan2f */
#else
	float atan2f(y,x)			/* wrapper atan2 */
	float y,x;
#endif
{
 2003da0:	defffc04 	addi	sp,sp,-16
 2003da4:	dfc00315 	stw	ra,12(sp)
 2003da8:	df000215 	stw	fp,8(sp)
 2003dac:	df000204 	addi	fp,sp,8
 2003db0:	e13ffe15 	stw	r4,-8(fp)
 2003db4:	e17fff15 	stw	r5,-4(fp)
	return __ieee754_atan2f(y,x);
 2003db8:	e17fff17 	ldw	r5,-4(fp)
 2003dbc:	e13ffe17 	ldw	r4,-8(fp)
 2003dc0:	20044280 	call	2004428 <__ieee754_atan2f>
 2003dc4:	1007883a 	mov	r3,r2
 2003dc8:	1805883a 	mov	r2,r3
}
 2003dcc:	e037883a 	mov	sp,fp
 2003dd0:	dfc00117 	ldw	ra,4(sp)
 2003dd4:	df000017 	ldw	fp,0(sp)
 2003dd8:	dec00204 	addi	sp,sp,8
 2003ddc:	f800283a 	ret

02003de0 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 2003de0:	deffe804 	addi	sp,sp,-96
 2003de4:	dfc01715 	stw	ra,92(sp)
 2003de8:	df001615 	stw	fp,88(sp)
 2003dec:	dc401515 	stw	r17,84(sp)
 2003df0:	dc001415 	stw	r16,80(sp)
 2003df4:	df001604 	addi	fp,sp,88
 2003df8:	e13ffc15 	stw	r4,-16(fp)
 2003dfc:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 2003e00:	00a00034 	movhi	r2,32768
 2003e04:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 2003e08:	e0bffc17 	ldw	r2,-16(fp)
 2003e0c:	e0bff815 	stw	r2,-32(fp)
 2003e10:	e0bffd17 	ldw	r2,-12(fp)
 2003e14:	e0bff915 	stw	r2,-28(fp)
 2003e18:	e0bff917 	ldw	r2,-28(fp)
 2003e1c:	e0bfee15 	stw	r2,-72(fp)
 2003e20:	e0bff817 	ldw	r2,-32(fp)
 2003e24:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 2003e28:	e0bfee17 	ldw	r2,-72(fp)
 2003e2c:	10dffc2c 	andhi	r3,r2,32752
 2003e30:	009ffc34 	movhi	r2,32752
 2003e34:	1880131e 	bne	r3,r2,2003e84 <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 2003e38:	e1bffc17 	ldw	r6,-16(fp)
 2003e3c:	e1fffd17 	ldw	r7,-12(fp)
 2003e40:	e13ffc17 	ldw	r4,-16(fp)
 2003e44:	e17ffd17 	ldw	r5,-12(fp)
 2003e48:	2007e400 	call	2007e40 <__muldf3>
 2003e4c:	1009883a 	mov	r4,r2
 2003e50:	180b883a 	mov	r5,r3
 2003e54:	2005883a 	mov	r2,r4
 2003e58:	2807883a 	mov	r3,r5
 2003e5c:	e1bffc17 	ldw	r6,-16(fp)
 2003e60:	e1fffd17 	ldw	r7,-12(fp)
 2003e64:	1009883a 	mov	r4,r2
 2003e68:	180b883a 	mov	r5,r3
 2003e6c:	2006a540 	call	2006a54 <__adddf3>
 2003e70:	1009883a 	mov	r4,r2
 2003e74:	180b883a 	mov	r5,r3
 2003e78:	2005883a 	mov	r2,r4
 2003e7c:	2807883a 	mov	r3,r5
 2003e80:	00015e06 	br	20043fc <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 2003e84:	e0bfee17 	ldw	r2,-72(fp)
 2003e88:	00802916 	blt	zero,r2,2003f30 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 2003e8c:	e0bff317 	ldw	r2,-52(fp)
 2003e90:	0086303a 	nor	r3,zero,r2
 2003e94:	e0bfee17 	ldw	r2,-72(fp)
 2003e98:	1884703a 	and	r2,r3,r2
 2003e9c:	1007883a 	mov	r3,r2
 2003ea0:	e0bfec17 	ldw	r2,-80(fp)
 2003ea4:	1884b03a 	or	r2,r3,r2
 2003ea8:	1000031e 	bne	r2,zero,2003eb8 <__ieee754_sqrt+0xd8>
 2003eac:	e0bffc17 	ldw	r2,-16(fp)
 2003eb0:	e0fffd17 	ldw	r3,-12(fp)
 2003eb4:	00015106 	br	20043fc <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 2003eb8:	e0bfee17 	ldw	r2,-72(fp)
 2003ebc:	10001c0e 	bge	r2,zero,2003f30 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 2003ec0:	e1bffc17 	ldw	r6,-16(fp)
 2003ec4:	e1fffd17 	ldw	r7,-12(fp)
 2003ec8:	e13ffc17 	ldw	r4,-16(fp)
 2003ecc:	e17ffd17 	ldw	r5,-12(fp)
 2003ed0:	20085580 	call	2008558 <__subdf3>
 2003ed4:	1009883a 	mov	r4,r2
 2003ed8:	180b883a 	mov	r5,r3
 2003edc:	2021883a 	mov	r16,r4
 2003ee0:	2823883a 	mov	r17,r5
 2003ee4:	e1bffc17 	ldw	r6,-16(fp)
 2003ee8:	e1fffd17 	ldw	r7,-12(fp)
 2003eec:	e13ffc17 	ldw	r4,-16(fp)
 2003ef0:	e17ffd17 	ldw	r5,-12(fp)
 2003ef4:	20085580 	call	2008558 <__subdf3>
 2003ef8:	1009883a 	mov	r4,r2
 2003efc:	180b883a 	mov	r5,r3
 2003f00:	2005883a 	mov	r2,r4
 2003f04:	2807883a 	mov	r3,r5
 2003f08:	100d883a 	mov	r6,r2
 2003f0c:	180f883a 	mov	r7,r3
 2003f10:	8009883a 	mov	r4,r16
 2003f14:	880b883a 	mov	r5,r17
 2003f18:	20073000 	call	2007300 <__divdf3>
 2003f1c:	1009883a 	mov	r4,r2
 2003f20:	180b883a 	mov	r5,r3
 2003f24:	2005883a 	mov	r2,r4
 2003f28:	2807883a 	mov	r3,r5
 2003f2c:	00013306 	br	20043fc <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 2003f30:	e0bfee17 	ldw	r2,-72(fp)
 2003f34:	1005d53a 	srai	r2,r2,20
 2003f38:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 2003f3c:	e0bff117 	ldw	r2,-60(fp)
 2003f40:	10002a1e 	bne	r2,zero,2003fec <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 2003f44:	00000b06 	br	2003f74 <__ieee754_sqrt+0x194>
		m -= 21;
 2003f48:	e0bff117 	ldw	r2,-60(fp)
 2003f4c:	10bffac4 	addi	r2,r2,-21
 2003f50:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 2003f54:	e0bfec17 	ldw	r2,-80(fp)
 2003f58:	1006d2fa 	srli	r3,r2,11
 2003f5c:	e0bfee17 	ldw	r2,-72(fp)
 2003f60:	1884b03a 	or	r2,r3,r2
 2003f64:	e0bfee15 	stw	r2,-72(fp)
 2003f68:	e0bfec17 	ldw	r2,-80(fp)
 2003f6c:	1004957a 	slli	r2,r2,21
 2003f70:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 2003f74:	e0bfee17 	ldw	r2,-72(fp)
 2003f78:	103ff326 	beq	r2,zero,2003f48 <__ieee754_sqrt+0x168>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 2003f7c:	e03ff215 	stw	zero,-56(fp)
 2003f80:	00000606 	br	2003f9c <__ieee754_sqrt+0x1bc>
 2003f84:	e0bfee17 	ldw	r2,-72(fp)
 2003f88:	1085883a 	add	r2,r2,r2
 2003f8c:	e0bfee15 	stw	r2,-72(fp)
 2003f90:	e0bff217 	ldw	r2,-56(fp)
 2003f94:	10800044 	addi	r2,r2,1
 2003f98:	e0bff215 	stw	r2,-56(fp)
 2003f9c:	e0bfee17 	ldw	r2,-72(fp)
 2003fa0:	1080042c 	andhi	r2,r2,16
 2003fa4:	103ff726 	beq	r2,zero,2003f84 <__ieee754_sqrt+0x1a4>
	    m -= i-1;
 2003fa8:	e0bff217 	ldw	r2,-56(fp)
 2003fac:	10bfffc4 	addi	r2,r2,-1
 2003fb0:	e0fff117 	ldw	r3,-60(fp)
 2003fb4:	1885c83a 	sub	r2,r3,r2
 2003fb8:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 2003fbc:	00c00804 	movi	r3,32
 2003fc0:	e0bff217 	ldw	r2,-56(fp)
 2003fc4:	1885c83a 	sub	r2,r3,r2
 2003fc8:	e0ffec17 	ldw	r3,-80(fp)
 2003fcc:	1886d83a 	srl	r3,r3,r2
 2003fd0:	e0bfee17 	ldw	r2,-72(fp)
 2003fd4:	1884b03a 	or	r2,r3,r2
 2003fd8:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 2003fdc:	e0ffec17 	ldw	r3,-80(fp)
 2003fe0:	e0bff217 	ldw	r2,-56(fp)
 2003fe4:	1884983a 	sll	r2,r3,r2
 2003fe8:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 2003fec:	e0bff117 	ldw	r2,-60(fp)
 2003ff0:	10bf0044 	addi	r2,r2,-1023
 2003ff4:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 2003ff8:	e0ffee17 	ldw	r3,-72(fp)
 2003ffc:	00800434 	movhi	r2,16
 2004000:	10bfffc4 	addi	r2,r2,-1
 2004004:	1884703a 	and	r2,r3,r2
 2004008:	10800434 	orhi	r2,r2,16
 200400c:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 2004010:	e0bff117 	ldw	r2,-60(fp)
 2004014:	1080004c 	andi	r2,r2,1
 2004018:	10000d26 	beq	r2,zero,2004050 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 200401c:	e0fff317 	ldw	r3,-52(fp)
 2004020:	e0bfec17 	ldw	r2,-80(fp)
 2004024:	1884703a 	and	r2,r3,r2
 2004028:	1006d7fa 	srli	r3,r2,31
 200402c:	e0bfee17 	ldw	r2,-72(fp)
 2004030:	1887883a 	add	r3,r3,r2
 2004034:	e0bfee17 	ldw	r2,-72(fp)
 2004038:	1885883a 	add	r2,r3,r2
 200403c:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004040:	e0ffec17 	ldw	r3,-80(fp)
 2004044:	e0bfec17 	ldw	r2,-80(fp)
 2004048:	1885883a 	add	r2,r3,r2
 200404c:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 2004050:	e0bff117 	ldw	r2,-60(fp)
 2004054:	1005d07a 	srai	r2,r2,1
 2004058:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 200405c:	e0fff317 	ldw	r3,-52(fp)
 2004060:	e0bfec17 	ldw	r2,-80(fp)
 2004064:	1884703a 	and	r2,r3,r2
 2004068:	1006d7fa 	srli	r3,r2,31
 200406c:	e0bfee17 	ldw	r2,-72(fp)
 2004070:	1887883a 	add	r3,r3,r2
 2004074:	e0bfee17 	ldw	r2,-72(fp)
 2004078:	1885883a 	add	r2,r3,r2
 200407c:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 2004080:	e0ffec17 	ldw	r3,-80(fp)
 2004084:	e0bfec17 	ldw	r2,-80(fp)
 2004088:	1885883a 	add	r2,r3,r2
 200408c:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 2004090:	e03feb15 	stw	zero,-84(fp)
 2004094:	e03fef15 	stw	zero,-68(fp)
 2004098:	e0bfef17 	ldw	r2,-68(fp)
 200409c:	e0bfed15 	stw	r2,-76(fp)
 20040a0:	e0bfed17 	ldw	r2,-76(fp)
 20040a4:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 20040a8:	00800834 	movhi	r2,32
 20040ac:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 20040b0:	00002306 	br	2004140 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 20040b4:	e0ffef17 	ldw	r3,-68(fp)
 20040b8:	e0bfea17 	ldw	r2,-88(fp)
 20040bc:	1885883a 	add	r2,r3,r2
 20040c0:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 20040c4:	e0bff417 	ldw	r2,-48(fp)
 20040c8:	e0ffee17 	ldw	r3,-72(fp)
 20040cc:	18800c16 	blt	r3,r2,2004100 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 20040d0:	e0fff417 	ldw	r3,-48(fp)
 20040d4:	e0bfea17 	ldw	r2,-88(fp)
 20040d8:	1885883a 	add	r2,r3,r2
 20040dc:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 20040e0:	e0ffee17 	ldw	r3,-72(fp)
 20040e4:	e0bff417 	ldw	r2,-48(fp)
 20040e8:	1885c83a 	sub	r2,r3,r2
 20040ec:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 20040f0:	e0fff017 	ldw	r3,-64(fp)
 20040f4:	e0bfea17 	ldw	r2,-88(fp)
 20040f8:	1885883a 	add	r2,r3,r2
 20040fc:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004100:	e0fff317 	ldw	r3,-52(fp)
 2004104:	e0bfec17 	ldw	r2,-80(fp)
 2004108:	1884703a 	and	r2,r3,r2
 200410c:	1006d7fa 	srli	r3,r2,31
 2004110:	e0bfee17 	ldw	r2,-72(fp)
 2004114:	1887883a 	add	r3,r3,r2
 2004118:	e0bfee17 	ldw	r2,-72(fp)
 200411c:	1885883a 	add	r2,r3,r2
 2004120:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004124:	e0ffec17 	ldw	r3,-80(fp)
 2004128:	e0bfec17 	ldw	r2,-80(fp)
 200412c:	1885883a 	add	r2,r3,r2
 2004130:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2004134:	e0bfea17 	ldw	r2,-88(fp)
 2004138:	1004d07a 	srli	r2,r2,1
 200413c:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 2004140:	e0bfea17 	ldw	r2,-88(fp)
 2004144:	103fdb1e 	bne	r2,zero,20040b4 <__ieee754_sqrt+0x2d4>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 2004148:	e0bff317 	ldw	r2,-52(fp)
 200414c:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 2004150:	00004106 	br	2004258 <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 2004154:	e0ffeb17 	ldw	r3,-84(fp)
 2004158:	e0bfea17 	ldw	r2,-88(fp)
 200415c:	1885883a 	add	r2,r3,r2
 2004160:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 2004164:	e0bfef17 	ldw	r2,-68(fp)
 2004168:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 200416c:	e0fff417 	ldw	r3,-48(fp)
 2004170:	e0bfee17 	ldw	r2,-72(fp)
 2004174:	18800616 	blt	r3,r2,2004190 <__ieee754_sqrt+0x3b0>
 2004178:	e0fff417 	ldw	r3,-48(fp)
 200417c:	e0bfee17 	ldw	r2,-72(fp)
 2004180:	1880251e 	bne	r3,r2,2004218 <__ieee754_sqrt+0x438>
 2004184:	e0bff517 	ldw	r2,-44(fp)
 2004188:	e0ffec17 	ldw	r3,-80(fp)
 200418c:	18802236 	bltu	r3,r2,2004218 <__ieee754_sqrt+0x438>
		s1  = t1+r;
 2004190:	e0fff517 	ldw	r3,-44(fp)
 2004194:	e0bfea17 	ldw	r2,-88(fp)
 2004198:	1885883a 	add	r2,r3,r2
 200419c:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 20041a0:	e0fff317 	ldw	r3,-52(fp)
 20041a4:	e0bff517 	ldw	r2,-44(fp)
 20041a8:	1886703a 	and	r3,r3,r2
 20041ac:	e0bff317 	ldw	r2,-52(fp)
 20041b0:	1880071e 	bne	r3,r2,20041d0 <__ieee754_sqrt+0x3f0>
 20041b4:	e0fff317 	ldw	r3,-52(fp)
 20041b8:	e0bfeb17 	ldw	r2,-84(fp)
 20041bc:	1884703a 	and	r2,r3,r2
 20041c0:	1000031e 	bne	r2,zero,20041d0 <__ieee754_sqrt+0x3f0>
 20041c4:	e0bfef17 	ldw	r2,-68(fp)
 20041c8:	10800044 	addi	r2,r2,1
 20041cc:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 20041d0:	e0ffee17 	ldw	r3,-72(fp)
 20041d4:	e0bff417 	ldw	r2,-48(fp)
 20041d8:	1885c83a 	sub	r2,r3,r2
 20041dc:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 20041e0:	e0ffec17 	ldw	r3,-80(fp)
 20041e4:	e0bff517 	ldw	r2,-44(fp)
 20041e8:	1880032e 	bgeu	r3,r2,20041f8 <__ieee754_sqrt+0x418>
 20041ec:	e0bfee17 	ldw	r2,-72(fp)
 20041f0:	10bfffc4 	addi	r2,r2,-1
 20041f4:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 20041f8:	e0ffec17 	ldw	r3,-80(fp)
 20041fc:	e0bff517 	ldw	r2,-44(fp)
 2004200:	1885c83a 	sub	r2,r3,r2
 2004204:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 2004208:	e0ffed17 	ldw	r3,-76(fp)
 200420c:	e0bfea17 	ldw	r2,-88(fp)
 2004210:	1885883a 	add	r2,r3,r2
 2004214:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004218:	e0fff317 	ldw	r3,-52(fp)
 200421c:	e0bfec17 	ldw	r2,-80(fp)
 2004220:	1884703a 	and	r2,r3,r2
 2004224:	1006d7fa 	srli	r3,r2,31
 2004228:	e0bfee17 	ldw	r2,-72(fp)
 200422c:	1887883a 	add	r3,r3,r2
 2004230:	e0bfee17 	ldw	r2,-72(fp)
 2004234:	1885883a 	add	r2,r3,r2
 2004238:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 200423c:	e0ffec17 	ldw	r3,-80(fp)
 2004240:	e0bfec17 	ldw	r2,-80(fp)
 2004244:	1885883a 	add	r2,r3,r2
 2004248:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 200424c:	e0bfea17 	ldw	r2,-88(fp)
 2004250:	1004d07a 	srli	r2,r2,1
 2004254:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 2004258:	e0bfea17 	ldw	r2,-88(fp)
 200425c:	103fbd1e 	bne	r2,zero,2004154 <__ieee754_sqrt+0x374>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 2004260:	e0ffee17 	ldw	r3,-72(fp)
 2004264:	e0bfec17 	ldw	r2,-80(fp)
 2004268:	1884b03a 	or	r2,r3,r2
 200426c:	10004526 	beq	r2,zero,2004384 <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 2004270:	0011883a 	mov	r8,zero
 2004274:	024ffc34 	movhi	r9,16368
 2004278:	00b0be74 	movhi	r2,49913
 200427c:	10bcd644 	addi	r2,r2,-3239
 2004280:	00c06974 	movhi	r3,421
 2004284:	18db87c4 	addi	r3,r3,28191
 2004288:	100d883a 	mov	r6,r2
 200428c:	180f883a 	mov	r7,r3
 2004290:	4009883a 	mov	r4,r8
 2004294:	480b883a 	mov	r5,r9
 2004298:	20085580 	call	2008558 <__subdf3>
 200429c:	1009883a 	mov	r4,r2
 20042a0:	180b883a 	mov	r5,r3
 20042a4:	e13ff615 	stw	r4,-40(fp)
 20042a8:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 20042ac:	0005883a 	mov	r2,zero
 20042b0:	00cffc34 	movhi	r3,16368
 20042b4:	100d883a 	mov	r6,r2
 20042b8:	180f883a 	mov	r7,r3
 20042bc:	e13ff617 	ldw	r4,-40(fp)
 20042c0:	e17ff717 	ldw	r5,-36(fp)
 20042c4:	2007c700 	call	2007c70 <__gedf2>
 20042c8:	10002e16 	blt	r2,zero,2004384 <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 20042cc:	0011883a 	mov	r8,zero
 20042d0:	024ffc34 	movhi	r9,16368
 20042d4:	00b0be74 	movhi	r2,49913
 20042d8:	10bcd644 	addi	r2,r2,-3239
 20042dc:	00c06974 	movhi	r3,421
 20042e0:	18db87c4 	addi	r3,r3,28191
 20042e4:	100d883a 	mov	r6,r2
 20042e8:	180f883a 	mov	r7,r3
 20042ec:	4009883a 	mov	r4,r8
 20042f0:	480b883a 	mov	r5,r9
 20042f4:	2006a540 	call	2006a54 <__adddf3>
 20042f8:	1009883a 	mov	r4,r2
 20042fc:	180b883a 	mov	r5,r3
 2004300:	e13ff615 	stw	r4,-40(fp)
 2004304:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 2004308:	e0bfed17 	ldw	r2,-76(fp)
 200430c:	10bfffd8 	cmpnei	r2,r2,-1
 2004310:	1000051e 	bne	r2,zero,2004328 <__ieee754_sqrt+0x548>
 2004314:	e03fed15 	stw	zero,-76(fp)
 2004318:	e0bff017 	ldw	r2,-64(fp)
 200431c:	10800044 	addi	r2,r2,1
 2004320:	e0bff015 	stw	r2,-64(fp)
 2004324:	00001706 	br	2004384 <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 2004328:	0005883a 	mov	r2,zero
 200432c:	00cffc34 	movhi	r3,16368
 2004330:	100d883a 	mov	r6,r2
 2004334:	180f883a 	mov	r7,r3
 2004338:	e13ff617 	ldw	r4,-40(fp)
 200433c:	e17ff717 	ldw	r5,-36(fp)
 2004340:	2007c700 	call	2007c70 <__gedf2>
 2004344:	00800a0e 	bge	zero,r2,2004370 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 2004348:	e0bfed17 	ldw	r2,-76(fp)
 200434c:	10bfff98 	cmpnei	r2,r2,-2
 2004350:	1000031e 	bne	r2,zero,2004360 <__ieee754_sqrt+0x580>
 2004354:	e0bff017 	ldw	r2,-64(fp)
 2004358:	10800044 	addi	r2,r2,1
 200435c:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 2004360:	e0bfed17 	ldw	r2,-76(fp)
 2004364:	10800084 	addi	r2,r2,2
 2004368:	e0bfed15 	stw	r2,-76(fp)
 200436c:	00000506 	br	2004384 <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 2004370:	e0bfed17 	ldw	r2,-76(fp)
 2004374:	1080004c 	andi	r2,r2,1
 2004378:	e0ffed17 	ldw	r3,-76(fp)
 200437c:	1885883a 	add	r2,r3,r2
 2004380:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 2004384:	e0bff017 	ldw	r2,-64(fp)
 2004388:	1007d07a 	srai	r3,r2,1
 200438c:	008ff834 	movhi	r2,16352
 2004390:	1885883a 	add	r2,r3,r2
 2004394:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 2004398:	e0bfed17 	ldw	r2,-76(fp)
 200439c:	1004d07a 	srli	r2,r2,1
 20043a0:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 20043a4:	e0bff017 	ldw	r2,-64(fp)
 20043a8:	1080004c 	andi	r2,r2,1
 20043ac:	10000426 	beq	r2,zero,20043c0 <__ieee754_sqrt+0x5e0>
 20043b0:	e0bff317 	ldw	r2,-52(fp)
 20043b4:	e0ffec17 	ldw	r3,-80(fp)
 20043b8:	1884b03a 	or	r2,r3,r2
 20043bc:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 20043c0:	e0bff117 	ldw	r2,-60(fp)
 20043c4:	1004953a 	slli	r2,r2,20
 20043c8:	e0ffee17 	ldw	r3,-72(fp)
 20043cc:	1885883a 	add	r2,r3,r2
 20043d0:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 20043d4:	e0bfee17 	ldw	r2,-72(fp)
 20043d8:	e0bffb15 	stw	r2,-20(fp)
 20043dc:	e0bfec17 	ldw	r2,-80(fp)
 20043e0:	e0bffa15 	stw	r2,-24(fp)
 20043e4:	e0bffa17 	ldw	r2,-24(fp)
 20043e8:	e0bff615 	stw	r2,-40(fp)
 20043ec:	e0bffb17 	ldw	r2,-20(fp)
 20043f0:	e0bff715 	stw	r2,-36(fp)
	return z;
 20043f4:	e0bff617 	ldw	r2,-40(fp)
 20043f8:	e0fff717 	ldw	r3,-36(fp)
 20043fc:	1009883a 	mov	r4,r2
 2004400:	180b883a 	mov	r5,r3
}
 2004404:	2005883a 	mov	r2,r4
 2004408:	2807883a 	mov	r3,r5
 200440c:	e6fffe04 	addi	sp,fp,-8
 2004410:	dfc00317 	ldw	ra,12(sp)
 2004414:	df000217 	ldw	fp,8(sp)
 2004418:	dc400117 	ldw	r17,4(sp)
 200441c:	dc000017 	ldw	r16,0(sp)
 2004420:	dec00404 	addi	sp,sp,16
 2004424:	f800283a 	ret

02004428 <__ieee754_atan2f>:
	float __ieee754_atan2f(float y, float x)
#else
	float __ieee754_atan2f(y,x)
	float  y,x;
#endif
{  
 2004428:	defff004 	addi	sp,sp,-64
 200442c:	dfc00f15 	stw	ra,60(sp)
 2004430:	df000e15 	stw	fp,56(sp)
 2004434:	df000e04 	addi	fp,sp,56
 2004438:	e13ffe15 	stw	r4,-8(fp)
 200443c:	e17fff15 	stw	r5,-4(fp)
	float z;
	__int32_t k,m,hx,hy,ix,iy;

	GET_FLOAT_WORD(hx,x);
 2004440:	e0bfff17 	ldw	r2,-4(fp)
 2004444:	e0bffa15 	stw	r2,-24(fp)
 2004448:	e0bffa17 	ldw	r2,-24(fp)
 200444c:	e0bff315 	stw	r2,-52(fp)
	ix = hx&0x7fffffff;
 2004450:	e0fff317 	ldw	r3,-52(fp)
 2004454:	00a00034 	movhi	r2,32768
 2004458:	10bfffc4 	addi	r2,r2,-1
 200445c:	1884703a 	and	r2,r3,r2
 2004460:	e0bff415 	stw	r2,-48(fp)
	GET_FLOAT_WORD(hy,y);
 2004464:	e0bffe17 	ldw	r2,-8(fp)
 2004468:	e0bffb15 	stw	r2,-20(fp)
 200446c:	e0bffb17 	ldw	r2,-20(fp)
 2004470:	e0bff515 	stw	r2,-44(fp)
	iy = hy&0x7fffffff;
 2004474:	e0fff517 	ldw	r3,-44(fp)
 2004478:	00a00034 	movhi	r2,32768
 200447c:	10bfffc4 	addi	r2,r2,-1
 2004480:	1884703a 	and	r2,r3,r2
 2004484:	e0bff615 	stw	r2,-40(fp)
	if(FLT_UWORD_IS_NAN(ix)||
 2004488:	e0bff417 	ldw	r2,-48(fp)
 200448c:	00dfe034 	movhi	r3,32640
 2004490:	18800316 	blt	r3,r2,20044a0 <__ieee754_atan2f+0x78>
 2004494:	e0bff617 	ldw	r2,-40(fp)
 2004498:	00dfe034 	movhi	r3,32640
 200449c:	1880040e 	bge	r3,r2,20044b0 <__ieee754_atan2f+0x88>
	   FLT_UWORD_IS_NAN(iy))	/* x or y is NaN */
	   return x+y;
 20044a0:	e0ffff17 	ldw	r3,-4(fp)
 20044a4:	e0bffe17 	ldw	r2,-8(fp)
 20044a8:	1887ff72 	custom	253,r3,r3,r2
 20044ac:	0000dd06 	br	2004824 <__ieee754_atan2f+0x3fc>
	if(hx==0x3f800000) return atanf(y);   /* x=1.0 */
 20044b0:	e0fff317 	ldw	r3,-52(fp)
 20044b4:	008fe034 	movhi	r2,16256
 20044b8:	1880041e 	bne	r3,r2,20044cc <__ieee754_atan2f+0xa4>
 20044bc:	e13ffe17 	ldw	r4,-8(fp)
 20044c0:	20060e80 	call	20060e8 <atanf>
 20044c4:	1007883a 	mov	r3,r2
 20044c8:	0000d606 	br	2004824 <__ieee754_atan2f+0x3fc>
	m = ((hy>>31)&1)|((hx>>30)&2);	/* 2*sign(x)+sign(y) */
 20044cc:	e0bff517 	ldw	r2,-44(fp)
 20044d0:	1004d7fa 	srli	r2,r2,31
 20044d4:	1007883a 	mov	r3,r2
 20044d8:	e0bff317 	ldw	r2,-52(fp)
 20044dc:	1005d7ba 	srai	r2,r2,30
 20044e0:	1080008c 	andi	r2,r2,2
 20044e4:	1884b03a 	or	r2,r3,r2
 20044e8:	e0bff715 	stw	r2,-36(fp)

    /* when y = 0 */
	if(FLT_UWORD_IS_ZERO(iy)) {
 20044ec:	e0bff617 	ldw	r2,-40(fp)
 20044f0:	1000191e 	bne	r2,zero,2004558 <__ieee754_atan2f+0x130>
	    switch(m) {
 20044f4:	e0bff717 	ldw	r2,-36(fp)
 20044f8:	10c000a0 	cmpeqi	r3,r2,2
 20044fc:	1800091e 	bne	r3,zero,2004524 <__ieee754_atan2f+0xfc>
 2004500:	10c000c8 	cmpgei	r3,r2,3
 2004504:	1800021e 	bne	r3,zero,2004510 <__ieee754_atan2f+0xe8>
 2004508:	10001316 	blt	r2,zero,2004558 <__ieee754_atan2f+0x130>
 200450c:	00000306 	br	200451c <__ieee754_atan2f+0xf4>
 2004510:	108000e0 	cmpeqi	r2,r2,3
 2004514:	1000091e 	bne	r2,zero,200453c <__ieee754_atan2f+0x114>
 2004518:	00000f06 	br	2004558 <__ieee754_atan2f+0x130>
		case 0: 
		case 1: return y; 	/* atan(+-0,+anything)=+-0 */
 200451c:	e0fffe17 	ldw	r3,-8(fp)
 2004520:	0000c006 	br	2004824 <__ieee754_atan2f+0x3fc>
		case 2: return  pi+tiny;/* atan(+0,-anything) = pi */
 2004524:	00d01274 	movhi	r3,16457
 2004528:	18c3f6c4 	addi	r3,r3,4059
 200452c:	008368b4 	movhi	r2,3490
 2004530:	10909804 	addi	r2,r2,16992
 2004534:	1887ff72 	custom	253,r3,r3,r2
 2004538:	0000ba06 	br	2004824 <__ieee754_atan2f+0x3fc>
		case 3: return -pi-tiny;/* atan(-0,-anything) =-pi */
 200453c:	00901274 	movhi	r2,16457
 2004540:	1083f6c4 	addi	r2,r2,4059
 2004544:	1007f872 	custom	225,r3,r2,zero
 2004548:	008368b4 	movhi	r2,3490
 200454c:	10909804 	addi	r2,r2,16992
 2004550:	1887ffb2 	custom	254,r3,r3,r2
 2004554:	0000b306 	br	2004824 <__ieee754_atan2f+0x3fc>
	    }
	}
    /* when x = 0 */
	if(FLT_UWORD_IS_ZERO(ix)) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;
 2004558:	e0bff417 	ldw	r2,-48(fp)
 200455c:	10000f1e 	bne	r2,zero,200459c <__ieee754_atan2f+0x174>
 2004560:	e0bff517 	ldw	r2,-44(fp)
 2004564:	1000070e 	bge	r2,zero,2004584 <__ieee754_atan2f+0x15c>
 2004568:	008ff274 	movhi	r2,16329
 200456c:	1083f6c4 	addi	r2,r2,4059
 2004570:	1007f872 	custom	225,r3,r2,zero
 2004574:	008368b4 	movhi	r2,3490
 2004578:	10909804 	addi	r2,r2,16992
 200457c:	1887ffb2 	custom	254,r3,r3,r2
 2004580:	0000a806 	br	2004824 <__ieee754_atan2f+0x3fc>
 2004584:	00cff274 	movhi	r3,16329
 2004588:	18c3f6c4 	addi	r3,r3,4059
 200458c:	008368b4 	movhi	r2,3490
 2004590:	10909804 	addi	r2,r2,16992
 2004594:	1887ff72 	custom	253,r3,r3,r2
 2004598:	0000a206 	br	2004824 <__ieee754_atan2f+0x3fc>
	    
    /* when x is INF */
	if(FLT_UWORD_IS_INFINITE(ix)) {
 200459c:	e0fff417 	ldw	r3,-48(fp)
 20045a0:	009fe034 	movhi	r2,32640
 20045a4:	18804a1e 	bne	r3,r2,20046d0 <__ieee754_atan2f+0x2a8>
	    if(FLT_UWORD_IS_INFINITE(iy)) {
 20045a8:	e0fff617 	ldw	r3,-40(fp)
 20045ac:	009fe034 	movhi	r2,32640
 20045b0:	1880291e 	bne	r3,r2,2004658 <__ieee754_atan2f+0x230>
		switch(m) {
 20045b4:	e0bff717 	ldw	r2,-36(fp)
 20045b8:	10c00060 	cmpeqi	r3,r2,1
 20045bc:	18000f1e 	bne	r3,zero,20045fc <__ieee754_atan2f+0x1d4>
 20045c0:	10c00088 	cmpgei	r3,r2,2
 20045c4:	1800021e 	bne	r3,zero,20045d0 <__ieee754_atan2f+0x1a8>
 20045c8:	10000626 	beq	r2,zero,20045e4 <__ieee754_atan2f+0x1bc>
 20045cc:	00004006 	br	20046d0 <__ieee754_atan2f+0x2a8>
 20045d0:	10c000a0 	cmpeqi	r3,r2,2
 20045d4:	1800101e 	bne	r3,zero,2004618 <__ieee754_atan2f+0x1f0>
 20045d8:	108000e0 	cmpeqi	r2,r2,3
 20045dc:	1000161e 	bne	r2,zero,2004638 <__ieee754_atan2f+0x210>
 20045e0:	00003b06 	br	20046d0 <__ieee754_atan2f+0x2a8>
		    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */
 20045e4:	00cfd274 	movhi	r3,16201
 20045e8:	18c3f6c4 	addi	r3,r3,4059
 20045ec:	008368b4 	movhi	r2,3490
 20045f0:	10909804 	addi	r2,r2,16992
 20045f4:	1887ff72 	custom	253,r3,r3,r2
 20045f8:	00008a06 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */
 20045fc:	008fd274 	movhi	r2,16201
 2004600:	1083f6c4 	addi	r2,r2,4059
 2004604:	1007f872 	custom	225,r3,r2,zero
 2004608:	008368b4 	movhi	r2,3490
 200460c:	10909804 	addi	r2,r2,16992
 2004610:	1887ffb2 	custom	254,r3,r3,r2
 2004614:	00008306 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 2: return  (float)3.0*pi_o_4+tiny;/*atan(+INF,-INF)*/
 2004618:	008fd274 	movhi	r2,16201
 200461c:	1083f6c4 	addi	r2,r2,4059
 2004620:	00d01034 	movhi	r3,16448
 2004624:	10c7ff32 	custom	252,r3,r2,r3
 2004628:	008368b4 	movhi	r2,3490
 200462c:	10909804 	addi	r2,r2,16992
 2004630:	1887ff72 	custom	253,r3,r3,r2
 2004634:	00007b06 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 3: return (float)-3.0*pi_o_4-tiny;/*atan(-INF,-INF)*/
 2004638:	008fd274 	movhi	r2,16201
 200463c:	1083f6c4 	addi	r2,r2,4059
 2004640:	00f01034 	movhi	r3,49216
 2004644:	10c7ff32 	custom	252,r3,r2,r3
 2004648:	008368b4 	movhi	r2,3490
 200464c:	10909804 	addi	r2,r2,16992
 2004650:	1887ffb2 	custom	254,r3,r3,r2
 2004654:	00007306 	br	2004824 <__ieee754_atan2f+0x3fc>
		}
	    } else {
		switch(m) {
 2004658:	e0bff717 	ldw	r2,-36(fp)
 200465c:	10c00060 	cmpeqi	r3,r2,1
 2004660:	18000b1e 	bne	r3,zero,2004690 <__ieee754_atan2f+0x268>
 2004664:	10c00088 	cmpgei	r3,r2,2
 2004668:	1800021e 	bne	r3,zero,2004674 <__ieee754_atan2f+0x24c>
 200466c:	10000626 	beq	r2,zero,2004688 <__ieee754_atan2f+0x260>
 2004670:	00001706 	br	20046d0 <__ieee754_atan2f+0x2a8>
 2004674:	10c000a0 	cmpeqi	r3,r2,2
 2004678:	1800081e 	bne	r3,zero,200469c <__ieee754_atan2f+0x274>
 200467c:	108000e0 	cmpeqi	r2,r2,3
 2004680:	10000c1e 	bne	r2,zero,20046b4 <__ieee754_atan2f+0x28c>
 2004684:	00001206 	br	20046d0 <__ieee754_atan2f+0x2a8>
		    case 0: return  zero  ;	/* atan(+...,+INF) */
 2004688:	0007883a 	mov	r3,zero
 200468c:	00006506 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 1: return -zero  ;	/* atan(-...,+INF) */
 2004690:	0005883a 	mov	r2,zero
 2004694:	1007f872 	custom	225,r3,r2,zero
 2004698:	00006206 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 2: return  pi+tiny  ;	/* atan(+...,-INF) */
 200469c:	00d01274 	movhi	r3,16457
 20046a0:	18c3f6c4 	addi	r3,r3,4059
 20046a4:	008368b4 	movhi	r2,3490
 20046a8:	10909804 	addi	r2,r2,16992
 20046ac:	1887ff72 	custom	253,r3,r3,r2
 20046b0:	00005c06 	br	2004824 <__ieee754_atan2f+0x3fc>
		    case 3: return -pi-tiny  ;	/* atan(-...,-INF) */
 20046b4:	00901274 	movhi	r2,16457
 20046b8:	1083f6c4 	addi	r2,r2,4059
 20046bc:	1007f872 	custom	225,r3,r2,zero
 20046c0:	008368b4 	movhi	r2,3490
 20046c4:	10909804 	addi	r2,r2,16992
 20046c8:	1887ffb2 	custom	254,r3,r3,r2
 20046cc:	00005506 	br	2004824 <__ieee754_atan2f+0x3fc>
		}
	    }
	}
    /* when y is INF */
	if(FLT_UWORD_IS_INFINITE(iy)) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;
 20046d0:	e0fff617 	ldw	r3,-40(fp)
 20046d4:	009fe034 	movhi	r2,32640
 20046d8:	18800f1e 	bne	r3,r2,2004718 <__ieee754_atan2f+0x2f0>
 20046dc:	e0bff517 	ldw	r2,-44(fp)
 20046e0:	1000070e 	bge	r2,zero,2004700 <__ieee754_atan2f+0x2d8>
 20046e4:	008ff274 	movhi	r2,16329
 20046e8:	1083f6c4 	addi	r2,r2,4059
 20046ec:	1007f872 	custom	225,r3,r2,zero
 20046f0:	008368b4 	movhi	r2,3490
 20046f4:	10909804 	addi	r2,r2,16992
 20046f8:	1887ffb2 	custom	254,r3,r3,r2
 20046fc:	00004906 	br	2004824 <__ieee754_atan2f+0x3fc>
 2004700:	00cff274 	movhi	r3,16329
 2004704:	18c3f6c4 	addi	r3,r3,4059
 2004708:	008368b4 	movhi	r2,3490
 200470c:	10909804 	addi	r2,r2,16992
 2004710:	1887ff72 	custom	253,r3,r3,r2
 2004714:	00004306 	br	2004824 <__ieee754_atan2f+0x3fc>

    /* compute y/x */
	k = (iy-ix)>>23;
 2004718:	e0fff617 	ldw	r3,-40(fp)
 200471c:	e0bff417 	ldw	r2,-48(fp)
 2004720:	1885c83a 	sub	r2,r3,r2
 2004724:	1005d5fa 	srai	r2,r2,23
 2004728:	e0bff815 	stw	r2,-32(fp)
	if(k > 60) z=pi_o_2+(float)0.5*pi_lo; 	/* |y/x| >  2**60 */
 200472c:	e0bff817 	ldw	r2,-32(fp)
 2004730:	10800f50 	cmplti	r2,r2,61
 2004734:	1000091e 	bne	r2,zero,200475c <__ieee754_atan2f+0x334>
 2004738:	00acef34 	movhi	r2,46012
 200473c:	10af4b84 	addi	r2,r2,-17106
 2004740:	00cfc034 	movhi	r3,16128
 2004744:	10c7ff32 	custom	252,r3,r2,r3
 2004748:	008ff274 	movhi	r2,16329
 200474c:	1083f6c4 	addi	r2,r2,4059
 2004750:	1885ff72 	custom	253,r2,r3,r2
 2004754:	e0bff215 	stw	r2,-56(fp)
 2004758:	00001006 	br	200479c <__ieee754_atan2f+0x374>
	else if(hx<0&&k<-60) z=0.0; 	/* |y|/x < -2**60 */
 200475c:	e0bff317 	ldw	r2,-52(fp)
 2004760:	1000050e 	bge	r2,zero,2004778 <__ieee754_atan2f+0x350>
 2004764:	e0bff817 	ldw	r2,-32(fp)
 2004768:	10bff108 	cmpgei	r2,r2,-60
 200476c:	1000021e 	bne	r2,zero,2004778 <__ieee754_atan2f+0x350>
 2004770:	e03ff215 	stw	zero,-56(fp)
 2004774:	00000906 	br	200479c <__ieee754_atan2f+0x374>
	else z=atanf(fabsf(y/x));	/* safe to do y/x */
 2004778:	e0fffe17 	ldw	r3,-8(fp)
 200477c:	e0bfff17 	ldw	r2,-4(fp)
 2004780:	1885fff2 	custom	255,r2,r3,r2
 2004784:	1009883a 	mov	r4,r2
 2004788:	20064580 	call	2006458 <fabsf>
 200478c:	1007883a 	mov	r3,r2
 2004790:	1809883a 	mov	r4,r3
 2004794:	20060e80 	call	20060e8 <atanf>
 2004798:	e0bff215 	stw	r2,-56(fp)
	switch (m) {
 200479c:	e0bff717 	ldw	r2,-36(fp)
 20047a0:	10c00060 	cmpeqi	r3,r2,1
 20047a4:	1800051e 	bne	r3,zero,20047bc <__ieee754_atan2f+0x394>
 20047a8:	10c000a0 	cmpeqi	r3,r2,2
 20047ac:	18000e1e 	bne	r3,zero,20047e8 <__ieee754_atan2f+0x3c0>
 20047b0:	1000151e 	bne	r2,zero,2004808 <__ieee754_atan2f+0x3e0>
	    case 0: return       z  ;	/* atan(+,+) */
 20047b4:	e0fff217 	ldw	r3,-56(fp)
 20047b8:	00001a06 	br	2004824 <__ieee754_atan2f+0x3fc>
	    case 1: {
	    	      __uint32_t zh;
		      GET_FLOAT_WORD(zh,z);
 20047bc:	e0bff217 	ldw	r2,-56(fp)
 20047c0:	e0bffc15 	stw	r2,-16(fp)
 20047c4:	e0bffc17 	ldw	r2,-16(fp)
 20047c8:	e0bff915 	stw	r2,-28(fp)
		      SET_FLOAT_WORD(z,zh ^ 0x80000000);
 20047cc:	e0bff917 	ldw	r2,-28(fp)
 20047d0:	10a0003c 	xorhi	r2,r2,32768
 20047d4:	e0bffd15 	stw	r2,-12(fp)
 20047d8:	e0bffd17 	ldw	r2,-12(fp)
 20047dc:	e0bff215 	stw	r2,-56(fp)
		    }
		    return       z  ;	/* atan(-,+) */
 20047e0:	e0fff217 	ldw	r3,-56(fp)
 20047e4:	00000f06 	br	2004824 <__ieee754_atan2f+0x3fc>
	    case 2: return  pi-(z-pi_lo);/* atan(+,-) */
 20047e8:	00901274 	movhi	r2,16457
 20047ec:	1083f6c4 	addi	r2,r2,4059
 20047f0:	00ecef34 	movhi	r3,46012
 20047f4:	18ef4b84 	addi	r3,r3,-17106
 20047f8:	e13ff217 	ldw	r4,-56(fp)
 20047fc:	20c7ffb2 	custom	254,r3,r4,r3
 2004800:	10c7ffb2 	custom	254,r3,r2,r3
 2004804:	00000706 	br	2004824 <__ieee754_atan2f+0x3fc>
	    default: /* case 3 */
	    	    return  (z-pi_lo)-pi;/* atan(-,-) */
 2004808:	00acef34 	movhi	r2,46012
 200480c:	10af4b84 	addi	r2,r2,-17106
 2004810:	e0fff217 	ldw	r3,-56(fp)
 2004814:	1887ffb2 	custom	254,r3,r3,r2
 2004818:	00901274 	movhi	r2,16457
 200481c:	1083f6c4 	addi	r2,r2,4059
 2004820:	1887ffb2 	custom	254,r3,r3,r2
 2004824:	1805883a 	mov	r2,r3
	}
}
 2004828:	e037883a 	mov	sp,fp
 200482c:	dfc00117 	ldw	ra,4(sp)
 2004830:	df000017 	ldw	fp,0(sp)
 2004834:	dec00204 	addi	sp,sp,8
 2004838:	f800283a 	ret

0200483c <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 200483c:	deffe604 	addi	sp,sp,-104
 2004840:	dfc01915 	stw	ra,100(sp)
 2004844:	df001815 	stw	fp,96(sp)
 2004848:	df001804 	addi	fp,sp,96
 200484c:	e13ffe15 	stw	r4,-8(fp)
 2004850:	e17fff15 	stw	r5,-4(fp)
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
 2004854:	e0bffe17 	ldw	r2,-8(fp)
 2004858:	e0bffa15 	stw	r2,-24(fp)
 200485c:	e0bffa17 	ldw	r2,-24(fp)
 2004860:	e0bfef15 	stw	r2,-68(fp)
	ix = hx&0x7fffffff;
 2004864:	e0ffef17 	ldw	r3,-68(fp)
 2004868:	00a00034 	movhi	r2,32768
 200486c:	10bfffc4 	addi	r2,r2,-1
 2004870:	1884703a 	and	r2,r3,r2
 2004874:	e0bff015 	stw	r2,-64(fp)
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 2004878:	e0fff017 	ldw	r3,-64(fp)
 200487c:	008fd274 	movhi	r2,16201
 2004880:	1083f604 	addi	r2,r2,4056
 2004884:	10c00816 	blt	r2,r3,20048a8 <__ieee754_rem_pio2f+0x6c>
	    {y[0] = x; y[1] = 0; return 0;}
 2004888:	e0bfff17 	ldw	r2,-4(fp)
 200488c:	e0fffe17 	ldw	r3,-8(fp)
 2004890:	10c00015 	stw	r3,0(r2)
 2004894:	e0bfff17 	ldw	r2,-4(fp)
 2004898:	10800104 	addi	r2,r2,4
 200489c:	10000015 	stw	zero,0(r2)
 20048a0:	0005883a 	mov	r2,zero
 20048a4:	00017d06 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
 20048a8:	e0fff017 	ldw	r3,-64(fp)
 20048ac:	009005f4 	movhi	r2,16407
 20048b0:	10b2f8c4 	addi	r2,r2,-13341
 20048b4:	10c06816 	blt	r2,r3,2004a58 <__ieee754_rem_pio2f+0x21c>
	    if(hx>0) { 
 20048b8:	e0bfef17 	ldw	r2,-68(fp)
 20048bc:	0080330e 	bge	zero,r2,200498c <__ieee754_rem_pio2f+0x150>
		z = x - pio2_1;
 20048c0:	008ff274 	movhi	r2,16329
 20048c4:	1083e004 	addi	r2,r2,3968
 20048c8:	e0fffe17 	ldw	r3,-8(fp)
 20048cc:	1885ffb2 	custom	254,r2,r3,r2
 20048d0:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 20048d4:	e0fff017 	ldw	r3,-64(fp)
 20048d8:	00bffc04 	movi	r2,-16
 20048dc:	1886703a 	and	r3,r3,r2
 20048e0:	008ff274 	movhi	r2,16329
 20048e4:	1083f404 	addi	r2,r2,4048
 20048e8:	18801126 	beq	r3,r2,2004930 <__ieee754_rem_pio2f+0xf4>
		    y[0] = z - pio2_1t;
 20048ec:	008dcd74 	movhi	r2,14133
 20048f0:	109110c4 	addi	r2,r2,17475
 20048f4:	e0ffea17 	ldw	r3,-88(fp)
 20048f8:	1887ffb2 	custom	254,r3,r3,r2
 20048fc:	e0bfff17 	ldw	r2,-4(fp)
 2004900:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_1t;
 2004904:	e0bfff17 	ldw	r2,-4(fp)
 2004908:	10c00104 	addi	r3,r2,4
 200490c:	e13fff17 	ldw	r4,-4(fp)
 2004910:	20800017 	ldw	r2,0(r4)
 2004914:	e13fea17 	ldw	r4,-88(fp)
 2004918:	2089ffb2 	custom	254,r4,r4,r2
 200491c:	008dcd74 	movhi	r2,14133
 2004920:	109110c4 	addi	r2,r2,17475
 2004924:	2085ffb2 	custom	254,r2,r4,r2
 2004928:	18800015 	stw	r2,0(r3)
 200492c:	00001506 	br	2004984 <__ieee754_rem_pio2f+0x148>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 2004930:	008dcd74 	movhi	r2,14133
 2004934:	10910004 	addi	r2,r2,17408
 2004938:	e0ffea17 	ldw	r3,-88(fp)
 200493c:	1885ffb2 	custom	254,r2,r3,r2
 2004940:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z - pio2_2t;
 2004944:	008ba1b4 	movhi	r2,11910
 2004948:	10a8c204 	addi	r2,r2,-23800
 200494c:	e0ffea17 	ldw	r3,-88(fp)
 2004950:	1887ffb2 	custom	254,r3,r3,r2
 2004954:	e0bfff17 	ldw	r2,-4(fp)
 2004958:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_2t;
 200495c:	e0bfff17 	ldw	r2,-4(fp)
 2004960:	10c00104 	addi	r3,r2,4
 2004964:	e13fff17 	ldw	r4,-4(fp)
 2004968:	20800017 	ldw	r2,0(r4)
 200496c:	e13fea17 	ldw	r4,-88(fp)
 2004970:	2089ffb2 	custom	254,r4,r4,r2
 2004974:	008ba1b4 	movhi	r2,11910
 2004978:	10a8c204 	addi	r2,r2,-23800
 200497c:	2085ffb2 	custom	254,r2,r4,r2
 2004980:	18800015 	stw	r2,0(r3)
		}
		return 1;
 2004984:	00800044 	movi	r2,1
 2004988:	00014406 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	    } else {	/* negative x */
		z = x + pio2_1;
 200498c:	008ff274 	movhi	r2,16329
 2004990:	1083e004 	addi	r2,r2,3968
 2004994:	e0fffe17 	ldw	r3,-8(fp)
 2004998:	1885ff72 	custom	253,r2,r3,r2
 200499c:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 20049a0:	e0fff017 	ldw	r3,-64(fp)
 20049a4:	00bffc04 	movi	r2,-16
 20049a8:	1886703a 	and	r3,r3,r2
 20049ac:	008ff274 	movhi	r2,16329
 20049b0:	1083f404 	addi	r2,r2,4048
 20049b4:	18801126 	beq	r3,r2,20049fc <__ieee754_rem_pio2f+0x1c0>
		    y[0] = z + pio2_1t;
 20049b8:	008dcd74 	movhi	r2,14133
 20049bc:	109110c4 	addi	r2,r2,17475
 20049c0:	e0ffea17 	ldw	r3,-88(fp)
 20049c4:	10c7ff72 	custom	253,r3,r2,r3
 20049c8:	e0bfff17 	ldw	r2,-4(fp)
 20049cc:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_1t;
 20049d0:	e0bfff17 	ldw	r2,-4(fp)
 20049d4:	10c00104 	addi	r3,r2,4
 20049d8:	e13fff17 	ldw	r4,-4(fp)
 20049dc:	20800017 	ldw	r2,0(r4)
 20049e0:	e13fea17 	ldw	r4,-88(fp)
 20049e4:	2089ffb2 	custom	254,r4,r4,r2
 20049e8:	008dcd74 	movhi	r2,14133
 20049ec:	109110c4 	addi	r2,r2,17475
 20049f0:	2085ff72 	custom	253,r2,r4,r2
 20049f4:	18800015 	stw	r2,0(r3)
 20049f8:	00001506 	br	2004a50 <__ieee754_rem_pio2f+0x214>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 20049fc:	008dcd74 	movhi	r2,14133
 2004a00:	10910004 	addi	r2,r2,17408
 2004a04:	e0ffea17 	ldw	r3,-88(fp)
 2004a08:	1885ff72 	custom	253,r2,r3,r2
 2004a0c:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z + pio2_2t;
 2004a10:	008ba1b4 	movhi	r2,11910
 2004a14:	10a8c204 	addi	r2,r2,-23800
 2004a18:	e0ffea17 	ldw	r3,-88(fp)
 2004a1c:	10c7ff72 	custom	253,r3,r2,r3
 2004a20:	e0bfff17 	ldw	r2,-4(fp)
 2004a24:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_2t;
 2004a28:	e0bfff17 	ldw	r2,-4(fp)
 2004a2c:	10c00104 	addi	r3,r2,4
 2004a30:	e13fff17 	ldw	r4,-4(fp)
 2004a34:	20800017 	ldw	r2,0(r4)
 2004a38:	e13fea17 	ldw	r4,-88(fp)
 2004a3c:	2089ffb2 	custom	254,r4,r4,r2
 2004a40:	008ba1b4 	movhi	r2,11910
 2004a44:	10a8c204 	addi	r2,r2,-23800
 2004a48:	2085ff72 	custom	253,r2,r4,r2
 2004a4c:	18800015 	stw	r2,0(r3)
		}
		return -1;
 2004a50:	00bfffc4 	movi	r2,-1
 2004a54:	00011106 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
 2004a58:	e0fff017 	ldw	r3,-64(fp)
 2004a5c:	0090d274 	movhi	r2,17225
 2004a60:	1083e004 	addi	r2,r2,3968
 2004a64:	10c0a516 	blt	r2,r3,2004cfc <__ieee754_rem_pio2f+0x4c0>
	    t  = fabsf(x);
 2004a68:	e13ffe17 	ldw	r4,-8(fp)
 2004a6c:	20064580 	call	2006458 <fabsf>
 2004a70:	e0bff115 	stw	r2,-60(fp)
	    n  = (__int32_t) (t*invpio2+half);
 2004a74:	008fc8f4 	movhi	r2,16163
 2004a78:	10be6104 	addi	r2,r2,-1660
 2004a7c:	e0fff117 	ldw	r3,-60(fp)
 2004a80:	10c7ff32 	custom	252,r3,r2,r3
 2004a84:	008fc034 	movhi	r2,16128
 2004a88:	1885ff72 	custom	253,r2,r3,r2
 2004a8c:	1005fe72 	custom	249,r2,r2,zero
 2004a90:	e0bff215 	stw	r2,-56(fp)
	    fn = (float)n;
 2004a94:	e0bff217 	ldw	r2,-56(fp)
 2004a98:	1005feb2 	custom	250,r2,r2,zero
 2004a9c:	e0bff315 	stw	r2,-52(fp)
	    r  = t-fn*pio2_1;
 2004aa0:	008ff274 	movhi	r2,16329
 2004aa4:	1083e004 	addi	r2,r2,3968
 2004aa8:	e0fff317 	ldw	r3,-52(fp)
 2004aac:	10c5ff32 	custom	252,r2,r2,r3
 2004ab0:	e0fff117 	ldw	r3,-60(fp)
 2004ab4:	1885ffb2 	custom	254,r2,r3,r2
 2004ab8:	e0bfec15 	stw	r2,-80(fp)
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 2004abc:	008dcd74 	movhi	r2,14133
 2004ac0:	109110c4 	addi	r2,r2,17475
 2004ac4:	e0fff317 	ldw	r3,-52(fp)
 2004ac8:	1885ff32 	custom	252,r2,r3,r2
 2004acc:	e0bfeb15 	stw	r2,-84(fp)
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
 2004ad0:	e0bff217 	ldw	r2,-56(fp)
 2004ad4:	10800808 	cmpgei	r2,r2,32
 2004ad8:	1000121e 	bne	r2,zero,2004b24 <__ieee754_rem_pio2f+0x2e8>
 2004adc:	e0fff017 	ldw	r3,-64(fp)
 2004ae0:	00bfc004 	movi	r2,-256
 2004ae4:	1888703a 	and	r4,r3,r2
 2004ae8:	e0bff217 	ldw	r2,-56(fp)
 2004aec:	10ffffc4 	addi	r3,r2,-1
 2004af0:	008080b4 	movhi	r2,514
 2004af4:	1088e104 	addi	r2,r2,9092
 2004af8:	18c7883a 	add	r3,r3,r3
 2004afc:	18c7883a 	add	r3,r3,r3
 2004b00:	10c5883a 	add	r2,r2,r3
 2004b04:	10800017 	ldw	r2,0(r2)
 2004b08:	20800626 	beq	r4,r2,2004b24 <__ieee754_rem_pio2f+0x2e8>
		y[0] = r-w;	/* quick check no cancellation */
 2004b0c:	e0ffec17 	ldw	r3,-80(fp)
 2004b10:	e0bfeb17 	ldw	r2,-84(fp)
 2004b14:	1887ffb2 	custom	254,r3,r3,r2
 2004b18:	e0bfff17 	ldw	r2,-4(fp)
 2004b1c:	10c00015 	stw	r3,0(r2)
 2004b20:	00005a06 	br	2004c8c <__ieee754_rem_pio2f+0x450>
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 2004b24:	e0bff017 	ldw	r2,-64(fp)
 2004b28:	1005d5fa 	srai	r2,r2,23
 2004b2c:	e0bff415 	stw	r2,-48(fp)
	        y[0] = r-w; 
 2004b30:	e0ffec17 	ldw	r3,-80(fp)
 2004b34:	e0bfeb17 	ldw	r2,-84(fp)
 2004b38:	1887ffb2 	custom	254,r3,r3,r2
 2004b3c:	e0bfff17 	ldw	r2,-4(fp)
 2004b40:	10c00015 	stw	r3,0(r2)
		GET_FLOAT_WORD(high,y[0]);
 2004b44:	e0ffff17 	ldw	r3,-4(fp)
 2004b48:	18800017 	ldw	r2,0(r3)
 2004b4c:	e0bffb15 	stw	r2,-20(fp)
 2004b50:	e0bffb17 	ldw	r2,-20(fp)
 2004b54:	e0bff515 	stw	r2,-44(fp)
	        i = j-((high>>23)&0xff);
 2004b58:	e0fff417 	ldw	r3,-48(fp)
 2004b5c:	e0bff517 	ldw	r2,-44(fp)
 2004b60:	1004d5fa 	srli	r2,r2,23
 2004b64:	10803fcc 	andi	r2,r2,255
 2004b68:	1885c83a 	sub	r2,r3,r2
 2004b6c:	e0bfed15 	stw	r2,-76(fp)
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
 2004b70:	e0bfed17 	ldw	r2,-76(fp)
 2004b74:	10800250 	cmplti	r2,r2,9
 2004b78:	1000441e 	bne	r2,zero,2004c8c <__ieee754_rem_pio2f+0x450>
		    t  = r;
 2004b7c:	e0bfec17 	ldw	r2,-80(fp)
 2004b80:	e0bff115 	stw	r2,-60(fp)
		    w  = fn*pio2_2;	
 2004b84:	008dcd74 	movhi	r2,14133
 2004b88:	10910004 	addi	r2,r2,17408
 2004b8c:	e0fff317 	ldw	r3,-52(fp)
 2004b90:	1885ff32 	custom	252,r2,r3,r2
 2004b94:	e0bfeb15 	stw	r2,-84(fp)
		    r  = t-w;
 2004b98:	e0fff117 	ldw	r3,-60(fp)
 2004b9c:	e0bfeb17 	ldw	r2,-84(fp)
 2004ba0:	1885ffb2 	custom	254,r2,r3,r2
 2004ba4:	e0bfec15 	stw	r2,-80(fp)
		    w  = fn*pio2_2t-((t-r)-w);	
 2004ba8:	008ba1b4 	movhi	r2,11910
 2004bac:	10a8c204 	addi	r2,r2,-23800
 2004bb0:	e0fff317 	ldw	r3,-52(fp)
 2004bb4:	10c7ff32 	custom	252,r3,r2,r3
 2004bb8:	e13ff117 	ldw	r4,-60(fp)
 2004bbc:	e0bfec17 	ldw	r2,-80(fp)
 2004bc0:	2089ffb2 	custom	254,r4,r4,r2
 2004bc4:	e0bfeb17 	ldw	r2,-84(fp)
 2004bc8:	2085ffb2 	custom	254,r2,r4,r2
 2004bcc:	1885ffb2 	custom	254,r2,r3,r2
 2004bd0:	e0bfeb15 	stw	r2,-84(fp)
		    y[0] = r-w;
 2004bd4:	e0ffec17 	ldw	r3,-80(fp)
 2004bd8:	e0bfeb17 	ldw	r2,-84(fp)
 2004bdc:	1887ffb2 	custom	254,r3,r3,r2
 2004be0:	e0bfff17 	ldw	r2,-4(fp)
 2004be4:	10c00015 	stw	r3,0(r2)
		    GET_FLOAT_WORD(high,y[0]);
 2004be8:	e0ffff17 	ldw	r3,-4(fp)
 2004bec:	18800017 	ldw	r2,0(r3)
 2004bf0:	e0bffc15 	stw	r2,-16(fp)
 2004bf4:	e0bffc17 	ldw	r2,-16(fp)
 2004bf8:	e0bff515 	stw	r2,-44(fp)
		    i = j-((high>>23)&0xff);
 2004bfc:	e0fff417 	ldw	r3,-48(fp)
 2004c00:	e0bff517 	ldw	r2,-44(fp)
 2004c04:	1004d5fa 	srli	r2,r2,23
 2004c08:	10803fcc 	andi	r2,r2,255
 2004c0c:	1885c83a 	sub	r2,r3,r2
 2004c10:	e0bfed15 	stw	r2,-76(fp)
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
 2004c14:	e0bfed17 	ldw	r2,-76(fp)
 2004c18:	10800690 	cmplti	r2,r2,26
 2004c1c:	10001b1e 	bne	r2,zero,2004c8c <__ieee754_rem_pio2f+0x450>
		    	t  = r;	/* will cover all possible cases */
 2004c20:	e0bfec17 	ldw	r2,-80(fp)
 2004c24:	e0bff115 	stw	r2,-60(fp)
		    	w  = fn*pio2_3;	
 2004c28:	008ba1b4 	movhi	r2,11910
 2004c2c:	10a8c004 	addi	r2,r2,-23808
 2004c30:	e0fff317 	ldw	r3,-52(fp)
 2004c34:	1885ff32 	custom	252,r2,r3,r2
 2004c38:	e0bfeb15 	stw	r2,-84(fp)
		    	r  = t-w;
 2004c3c:	e0fff117 	ldw	r3,-60(fp)
 2004c40:	e0bfeb17 	ldw	r2,-84(fp)
 2004c44:	1885ffb2 	custom	254,r2,r3,r2
 2004c48:	e0bfec15 	stw	r2,-80(fp)
		    	w  = fn*pio2_3t-((t-r)-w);	
 2004c4c:	00892374 	movhi	r2,9357
 2004c50:	108c4c84 	addi	r2,r2,12594
 2004c54:	e0fff317 	ldw	r3,-52(fp)
 2004c58:	10c7ff32 	custom	252,r3,r2,r3
 2004c5c:	e13ff117 	ldw	r4,-60(fp)
 2004c60:	e0bfec17 	ldw	r2,-80(fp)
 2004c64:	2089ffb2 	custom	254,r4,r4,r2
 2004c68:	e0bfeb17 	ldw	r2,-84(fp)
 2004c6c:	2085ffb2 	custom	254,r2,r4,r2
 2004c70:	1885ffb2 	custom	254,r2,r3,r2
 2004c74:	e0bfeb15 	stw	r2,-84(fp)
		    	y[0] = r-w;
 2004c78:	e0ffec17 	ldw	r3,-80(fp)
 2004c7c:	e0bfeb17 	ldw	r2,-84(fp)
 2004c80:	1887ffb2 	custom	254,r3,r3,r2
 2004c84:	e0bfff17 	ldw	r2,-4(fp)
 2004c88:	10c00015 	stw	r3,0(r2)
		    }
		}
	    }
	    y[1] = (r-y[0])-w;
 2004c8c:	e0bfff17 	ldw	r2,-4(fp)
 2004c90:	10800104 	addi	r2,r2,4
 2004c94:	e13fff17 	ldw	r4,-4(fp)
 2004c98:	20c00017 	ldw	r3,0(r4)
 2004c9c:	e13fec17 	ldw	r4,-80(fp)
 2004ca0:	20c9ffb2 	custom	254,r4,r4,r3
 2004ca4:	e0ffeb17 	ldw	r3,-84(fp)
 2004ca8:	20c7ffb2 	custom	254,r3,r4,r3
 2004cac:	10c00015 	stw	r3,0(r2)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2004cb0:	e0bfef17 	ldw	r2,-68(fp)
 2004cb4:	10000f0e 	bge	r2,zero,2004cf4 <__ieee754_rem_pio2f+0x4b8>
 2004cb8:	e0ffff17 	ldw	r3,-4(fp)
 2004cbc:	18800017 	ldw	r2,0(r3)
 2004cc0:	1007f872 	custom	225,r3,r2,zero
 2004cc4:	e0bfff17 	ldw	r2,-4(fp)
 2004cc8:	10c00015 	stw	r3,0(r2)
 2004ccc:	e0bfff17 	ldw	r2,-4(fp)
 2004cd0:	10800104 	addi	r2,r2,4
 2004cd4:	e0ffff17 	ldw	r3,-4(fp)
 2004cd8:	19000104 	addi	r4,r3,4
 2004cdc:	20c00017 	ldw	r3,0(r4)
 2004ce0:	1807f872 	custom	225,r3,r3,zero
 2004ce4:	10c00015 	stw	r3,0(r2)
 2004ce8:	e0bff217 	ldw	r2,-56(fp)
 2004cec:	0085c83a 	sub	r2,zero,r2
 2004cf0:	00006a06 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	    else	 return n;
 2004cf4:	e0bff217 	ldw	r2,-56(fp)
 2004cf8:	00006806 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
 2004cfc:	e0fff017 	ldw	r3,-64(fp)
 2004d00:	009fe034 	movhi	r2,32640
 2004d04:	18800b16 	blt	r3,r2,2004d34 <__ieee754_rem_pio2f+0x4f8>
	    y[0]=y[1]=x-x; return 0;
 2004d08:	e0bfff17 	ldw	r2,-4(fp)
 2004d0c:	10800104 	addi	r2,r2,4
 2004d10:	e13ffe17 	ldw	r4,-8(fp)
 2004d14:	e0fffe17 	ldw	r3,-8(fp)
 2004d18:	20c7ffb2 	custom	254,r3,r4,r3
 2004d1c:	10c00015 	stw	r3,0(r2)
 2004d20:	10c00017 	ldw	r3,0(r2)
 2004d24:	e0bfff17 	ldw	r2,-4(fp)
 2004d28:	10c00015 	stw	r3,0(r2)
 2004d2c:	0005883a 	mov	r2,zero
 2004d30:	00005a06 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 2004d34:	e0bff017 	ldw	r2,-64(fp)
 2004d38:	1005d5fa 	srai	r2,r2,23
 2004d3c:	10bfde84 	addi	r2,r2,-134
 2004d40:	e0bff615 	stw	r2,-40(fp)
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
 2004d44:	e0bff617 	ldw	r2,-40(fp)
 2004d48:	100495fa 	slli	r2,r2,23
 2004d4c:	e0fff017 	ldw	r3,-64(fp)
 2004d50:	1885c83a 	sub	r2,r3,r2
 2004d54:	e0bffd15 	stw	r2,-12(fp)
 2004d58:	e0bffd17 	ldw	r2,-12(fp)
 2004d5c:	e0bfea15 	stw	r2,-88(fp)
	for(i=0;i<2;i++) {
 2004d60:	e03fed15 	stw	zero,-76(fp)
 2004d64:	00001906 	br	2004dcc <__ieee754_rem_pio2f+0x590>
		tx[i] = (float)((__int32_t)(z));
 2004d68:	e0ffea17 	ldw	r3,-88(fp)
 2004d6c:	1805fe72 	custom	249,r2,r3,zero
 2004d70:	1007feb2 	custom	250,r3,r2,zero
 2004d74:	e0bfed17 	ldw	r2,-76(fp)
 2004d78:	1085883a 	add	r2,r2,r2
 2004d7c:	1085883a 	add	r2,r2,r2
 2004d80:	e13fea04 	addi	r4,fp,-88
 2004d84:	2085883a 	add	r2,r4,r2
 2004d88:	10800d04 	addi	r2,r2,52
 2004d8c:	10c00015 	stw	r3,0(r2)
		z     = (z-tx[i])*two8;
 2004d90:	e0bfed17 	ldw	r2,-76(fp)
 2004d94:	1085883a 	add	r2,r2,r2
 2004d98:	1085883a 	add	r2,r2,r2
 2004d9c:	e0ffea04 	addi	r3,fp,-88
 2004da0:	1885883a 	add	r2,r3,r2
 2004da4:	10c00d04 	addi	r3,r2,52
 2004da8:	18800017 	ldw	r2,0(r3)
 2004dac:	e0ffea17 	ldw	r3,-88(fp)
 2004db0:	1887ffb2 	custom	254,r3,r3,r2
 2004db4:	0090e034 	movhi	r2,17280
 2004db8:	1885ff32 	custom	252,r2,r3,r2
 2004dbc:	e0bfea15 	stw	r2,-88(fp)
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
 2004dc0:	e0bfed17 	ldw	r2,-76(fp)
 2004dc4:	10800044 	addi	r2,r2,1
 2004dc8:	e0bfed15 	stw	r2,-76(fp)
 2004dcc:	e0bfed17 	ldw	r2,-76(fp)
 2004dd0:	10800090 	cmplti	r2,r2,2
 2004dd4:	103fe41e 	bne	r2,zero,2004d68 <__ieee754_rem_pio2f+0x52c>
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
 2004dd8:	e0bfea17 	ldw	r2,-88(fp)
 2004ddc:	e0bff915 	stw	r2,-28(fp)
	nx = 3;
 2004de0:	008000c4 	movi	r2,3
 2004de4:	e0bfee15 	stw	r2,-72(fp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 2004de8:	00000306 	br	2004df8 <__ieee754_rem_pio2f+0x5bc>
 2004dec:	e0bfee17 	ldw	r2,-72(fp)
 2004df0:	10bfffc4 	addi	r2,r2,-1
 2004df4:	e0bfee15 	stw	r2,-72(fp)
 2004df8:	e0bfee17 	ldw	r2,-72(fp)
 2004dfc:	10bfffc4 	addi	r2,r2,-1
 2004e00:	1085883a 	add	r2,r2,r2
 2004e04:	1085883a 	add	r2,r2,r2
 2004e08:	e13fea04 	addi	r4,fp,-88
 2004e0c:	2085883a 	add	r2,r4,r2
 2004e10:	10c00d04 	addi	r3,r2,52
 2004e14:	18800017 	ldw	r2,0(r3)
 2004e18:	0007883a 	mov	r3,zero
 2004e1c:	10c5f8f2 	custom	227,r2,r2,r3
 2004e20:	103ff21e 	bne	r2,zero,2004dec <__ieee754_rem_pio2f+0x5b0>
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
 2004e24:	e0fff704 	addi	r3,fp,-36
 2004e28:	008080b4 	movhi	r2,514
 2004e2c:	10881b04 	addi	r2,r2,8300
 2004e30:	d8800115 	stw	r2,4(sp)
 2004e34:	00800084 	movi	r2,2
 2004e38:	d8800015 	stw	r2,0(sp)
 2004e3c:	e1ffee17 	ldw	r7,-72(fp)
 2004e40:	e1bff617 	ldw	r6,-40(fp)
 2004e44:	e17fff17 	ldw	r5,-4(fp)
 2004e48:	1809883a 	mov	r4,r3
 2004e4c:	20050740 	call	2005074 <__kernel_rem_pio2f>
 2004e50:	e0bff215 	stw	r2,-56(fp)
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2004e54:	e0bfef17 	ldw	r2,-68(fp)
 2004e58:	10000f0e 	bge	r2,zero,2004e98 <__ieee754_rem_pio2f+0x65c>
 2004e5c:	e0ffff17 	ldw	r3,-4(fp)
 2004e60:	18800017 	ldw	r2,0(r3)
 2004e64:	1007f872 	custom	225,r3,r2,zero
 2004e68:	e0bfff17 	ldw	r2,-4(fp)
 2004e6c:	10c00015 	stw	r3,0(r2)
 2004e70:	e0bfff17 	ldw	r2,-4(fp)
 2004e74:	10800104 	addi	r2,r2,4
 2004e78:	e0ffff17 	ldw	r3,-4(fp)
 2004e7c:	19000104 	addi	r4,r3,4
 2004e80:	20c00017 	ldw	r3,0(r4)
 2004e84:	1807f872 	custom	225,r3,r3,zero
 2004e88:	10c00015 	stw	r3,0(r2)
 2004e8c:	e0bff217 	ldw	r2,-56(fp)
 2004e90:	0085c83a 	sub	r2,zero,r2
 2004e94:	00000106 	br	2004e9c <__ieee754_rem_pio2f+0x660>
	return n;
 2004e98:	e0bff217 	ldw	r2,-56(fp)
}
 2004e9c:	e037883a 	mov	sp,fp
 2004ea0:	dfc00117 	ldw	ra,4(sp)
 2004ea4:	df000017 	ldw	fp,0(sp)
 2004ea8:	dec00204 	addi	sp,sp,8
 2004eac:	f800283a 	ret

02004eb0 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 2004eb0:	defff504 	addi	sp,sp,-44
 2004eb4:	df000a15 	stw	fp,40(sp)
 2004eb8:	df000a04 	addi	fp,sp,40
 2004ebc:	e13ffe15 	stw	r4,-8(fp)
 2004ec0:	e17fff15 	stw	r5,-4(fp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 2004ec4:	e0bffe17 	ldw	r2,-8(fp)
 2004ec8:	e0bffc15 	stw	r2,-16(fp)
 2004ecc:	e0bffc17 	ldw	r2,-16(fp)
 2004ed0:	e0bff715 	stw	r2,-36(fp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 2004ed4:	e0fff717 	ldw	r3,-36(fp)
 2004ed8:	00a00034 	movhi	r2,32768
 2004edc:	10bfffc4 	addi	r2,r2,-1
 2004ee0:	1884703a 	and	r2,r3,r2
 2004ee4:	e0bff715 	stw	r2,-36(fp)
	if(ix<0x32000000) {			/* if x < 2**27 */
 2004ee8:	e0fff717 	ldw	r3,-36(fp)
 2004eec:	008c8034 	movhi	r2,12800
 2004ef0:	1880050e 	bge	r3,r2,2004f08 <__kernel_cosf+0x58>
	    if(((int)x)==0) return one;		/* generate inexact */
 2004ef4:	e0fffe17 	ldw	r3,-8(fp)
 2004ef8:	1805fe72 	custom	249,r2,r3,zero
 2004efc:	1000021e 	bne	r2,zero,2004f08 <__kernel_cosf+0x58>
 2004f00:	008fe034 	movhi	r2,16256
 2004f04:	00005506 	br	200505c <__kernel_cosf+0x1ac>
	}
	z  = x*x;
 2004f08:	e0fffe17 	ldw	r3,-8(fp)
 2004f0c:	e0bffe17 	ldw	r2,-8(fp)
 2004f10:	1885ff32 	custom	252,r2,r3,r2
 2004f14:	e0bff815 	stw	r2,-32(fp)
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 2004f18:	00ab5234 	movhi	r2,44360
 2004f1c:	10b5d384 	addi	r2,r2,-10418
 2004f20:	e0fff817 	ldw	r3,-32(fp)
 2004f24:	10c7ff32 	custom	252,r3,r2,r3
 2004f28:	008c43f4 	movhi	r2,12559
 2004f2c:	109d3d84 	addi	r2,r2,29942
 2004f30:	1887ff72 	custom	253,r3,r3,r2
 2004f34:	e0bff817 	ldw	r2,-32(fp)
 2004f38:	1887ff32 	custom	252,r3,r3,r2
 2004f3c:	00ad2534 	movhi	r2,46228
 2004f40:	10bc9f04 	addi	r2,r2,-3460
 2004f44:	1887ff72 	custom	253,r3,r3,r2
 2004f48:	e0bff817 	ldw	r2,-32(fp)
 2004f4c:	1887ff32 	custom	252,r3,r3,r2
 2004f50:	008df434 	movhi	r2,14288
 2004f54:	10834044 	addi	r2,r2,3329
 2004f58:	1887ff72 	custom	253,r3,r3,r2
 2004f5c:	e0bff817 	ldw	r2,-32(fp)
 2004f60:	1887ff32 	custom	252,r3,r3,r2
 2004f64:	00aeadb4 	movhi	r2,47798
 2004f68:	1082d844 	addi	r2,r2,2913
 2004f6c:	1887ff72 	custom	253,r3,r3,r2
 2004f70:	e0bff817 	ldw	r2,-32(fp)
 2004f74:	1887ff32 	custom	252,r3,r3,r2
 2004f78:	008f4af4 	movhi	r2,15659
 2004f7c:	10aaaac4 	addi	r2,r2,-21845
 2004f80:	1887ff72 	custom	253,r3,r3,r2
 2004f84:	e0bff817 	ldw	r2,-32(fp)
 2004f88:	1885ff32 	custom	252,r2,r3,r2
 2004f8c:	e0bff915 	stw	r2,-28(fp)
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 2004f90:	e0fff717 	ldw	r3,-36(fp)
 2004f94:	008fa6b4 	movhi	r2,16026
 2004f98:	10a66644 	addi	r2,r2,-26215
 2004f9c:	10c00e16 	blt	r2,r3,2004fd8 <__kernel_cosf+0x128>
	    return one - ((float)0.5*z - (z*r - x*y));
 2004fa0:	00cfe034 	movhi	r3,16256
 2004fa4:	e13ff817 	ldw	r4,-32(fp)
 2004fa8:	008fc034 	movhi	r2,16128
 2004fac:	2089ff32 	custom	252,r4,r4,r2
 2004fb0:	e17ff817 	ldw	r5,-32(fp)
 2004fb4:	e0bff917 	ldw	r2,-28(fp)
 2004fb8:	288bff32 	custom	252,r5,r5,r2
 2004fbc:	e1bffe17 	ldw	r6,-8(fp)
 2004fc0:	e0bfff17 	ldw	r2,-4(fp)
 2004fc4:	3085ff32 	custom	252,r2,r6,r2
 2004fc8:	2885ffb2 	custom	254,r2,r5,r2
 2004fcc:	2085ffb2 	custom	254,r2,r4,r2
 2004fd0:	1885ffb2 	custom	254,r2,r3,r2
 2004fd4:	00002106 	br	200505c <__kernel_cosf+0x1ac>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 2004fd8:	e0bff717 	ldw	r2,-36(fp)
 2004fdc:	00cfd234 	movhi	r3,16200
 2004fe0:	1880030e 	bge	r3,r2,2004ff0 <__kernel_cosf+0x140>
		qx = (float)0.28125;
 2004fe4:	008fa434 	movhi	r2,16016
 2004fe8:	e0bff615 	stw	r2,-40(fp)
 2004fec:	00000606 	br	2005008 <__kernel_cosf+0x158>
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
 2004ff0:	e0fff717 	ldw	r3,-36(fp)
 2004ff4:	00bfc034 	movhi	r2,65280
 2004ff8:	1885883a 	add	r2,r3,r2
 2004ffc:	e0bffd15 	stw	r2,-12(fp)
 2005000:	e0bffd17 	ldw	r2,-12(fp)
 2005004:	e0bff615 	stw	r2,-40(fp)
	    }
	    hz = (float)0.5*z-qx;
 2005008:	e0fff817 	ldw	r3,-32(fp)
 200500c:	008fc034 	movhi	r2,16128
 2005010:	1887ff32 	custom	252,r3,r3,r2
 2005014:	e0bff617 	ldw	r2,-40(fp)
 2005018:	1885ffb2 	custom	254,r2,r3,r2
 200501c:	e0bffa15 	stw	r2,-24(fp)
	    a  = one-qx;
 2005020:	00cfe034 	movhi	r3,16256
 2005024:	e0bff617 	ldw	r2,-40(fp)
 2005028:	1885ffb2 	custom	254,r2,r3,r2
 200502c:	e0bffb15 	stw	r2,-20(fp)
	    return a - (hz - (z*r-x*y));
 2005030:	e0fff817 	ldw	r3,-32(fp)
 2005034:	e0bff917 	ldw	r2,-28(fp)
 2005038:	1887ff32 	custom	252,r3,r3,r2
 200503c:	e13ffe17 	ldw	r4,-8(fp)
 2005040:	e0bfff17 	ldw	r2,-4(fp)
 2005044:	2085ff32 	custom	252,r2,r4,r2
 2005048:	1885ffb2 	custom	254,r2,r3,r2
 200504c:	e0fffa17 	ldw	r3,-24(fp)
 2005050:	1885ffb2 	custom	254,r2,r3,r2
 2005054:	e0fffb17 	ldw	r3,-20(fp)
 2005058:	1885ffb2 	custom	254,r2,r3,r2
 200505c:	1007883a 	mov	r3,r2
	}
}
 2005060:	1805883a 	mov	r2,r3
 2005064:	e037883a 	mov	sp,fp
 2005068:	df000017 	ldw	fp,0(sp)
 200506c:	dec00104 	addi	sp,sp,4
 2005070:	f800283a 	ret

02005074 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 2005074:	deff9b04 	addi	sp,sp,-404
 2005078:	dfc06415 	stw	ra,400(sp)
 200507c:	df006315 	stw	fp,396(sp)
 2005080:	df006304 	addi	fp,sp,396
 2005084:	e13ffc15 	stw	r4,-16(fp)
 2005088:	e17ffd15 	stw	r5,-12(fp)
 200508c:	e1bffe15 	stw	r6,-8(fp)
 2005090:	e1ffff15 	stw	r7,-4(fp)
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 2005094:	008080b4 	movhi	r2,514
 2005098:	10890104 	addi	r2,r2,9220
 200509c:	e0c00217 	ldw	r3,8(fp)
 20050a0:	18c7883a 	add	r3,r3,r3
 20050a4:	18c7883a 	add	r3,r3,r3
 20050a8:	10c5883a 	add	r2,r2,r3
 20050ac:	10800017 	ldw	r2,0(r2)
 20050b0:	e0bfa815 	stw	r2,-352(fp)
	jp = jk;
 20050b4:	e0bfa817 	ldw	r2,-352(fp)
 20050b8:	e0bfa915 	stw	r2,-348(fp)

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 20050bc:	e0bfff17 	ldw	r2,-4(fp)
 20050c0:	10bfffc4 	addi	r2,r2,-1
 20050c4:	e0bfaa15 	stw	r2,-344(fp)
	jv = (e0-3)/8; if(jv<0) jv=0;
 20050c8:	e0bffe17 	ldw	r2,-8(fp)
 20050cc:	10bfff44 	addi	r2,r2,-3
 20050d0:	1000010e 	bge	r2,zero,20050d8 <__kernel_rem_pio2f+0x64>
 20050d4:	108001c4 	addi	r2,r2,7
 20050d8:	1005d0fa 	srai	r2,r2,3
 20050dc:	e0bf9e15 	stw	r2,-392(fp)
 20050e0:	e0bf9e17 	ldw	r2,-392(fp)
 20050e4:	1000010e 	bge	r2,zero,20050ec <__kernel_rem_pio2f+0x78>
 20050e8:	e03f9e15 	stw	zero,-392(fp)
	q0 =  e0-8*(jv+1);
 20050ec:	e0bf9e17 	ldw	r2,-392(fp)
 20050f0:	10800044 	addi	r2,r2,1
 20050f4:	100490fa 	slli	r2,r2,3
 20050f8:	e0fffe17 	ldw	r3,-8(fp)
 20050fc:	1885c83a 	sub	r2,r3,r2
 2005100:	e0bfa415 	stw	r2,-368(fp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 2005104:	e0ff9e17 	ldw	r3,-392(fp)
 2005108:	e0bfaa17 	ldw	r2,-344(fp)
 200510c:	1885c83a 	sub	r2,r3,r2
 2005110:	e0bfa215 	stw	r2,-376(fp)
 2005114:	e0ffaa17 	ldw	r3,-344(fp)
 2005118:	e0bfa817 	ldw	r2,-352(fp)
 200511c:	1885883a 	add	r2,r3,r2
 2005120:	e0bfab15 	stw	r2,-340(fp)
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 2005124:	e03fa115 	stw	zero,-380(fp)
 2005128:	00001906 	br	2005190 <__kernel_rem_pio2f+0x11c>
 200512c:	e0bfa217 	ldw	r2,-376(fp)
 2005130:	10000916 	blt	r2,zero,2005158 <__kernel_rem_pio2f+0xe4>
 2005134:	e0bfa217 	ldw	r2,-376(fp)
 2005138:	1085883a 	add	r2,r2,r2
 200513c:	1085883a 	add	r2,r2,r2
 2005140:	1007883a 	mov	r3,r2
 2005144:	e0800317 	ldw	r2,12(fp)
 2005148:	10c5883a 	add	r2,r2,r3
 200514c:	10800017 	ldw	r2,0(r2)
 2005150:	1005feb2 	custom	250,r2,r2,zero
 2005154:	00000106 	br	200515c <__kernel_rem_pio2f+0xe8>
 2005158:	0005883a 	mov	r2,zero
 200515c:	e0ffa117 	ldw	r3,-380(fp)
 2005160:	18c7883a 	add	r3,r3,r3
 2005164:	18c7883a 	add	r3,r3,r3
 2005168:	e13f9d04 	addi	r4,fp,-396
 200516c:	20c7883a 	add	r3,r4,r3
 2005170:	18c02304 	addi	r3,r3,140
 2005174:	18800015 	stw	r2,0(r3)
 2005178:	e0bfa117 	ldw	r2,-380(fp)
 200517c:	10800044 	addi	r2,r2,1
 2005180:	e0bfa115 	stw	r2,-380(fp)
 2005184:	e0bfa217 	ldw	r2,-376(fp)
 2005188:	10800044 	addi	r2,r2,1
 200518c:	e0bfa215 	stw	r2,-376(fp)
 2005190:	e0bfa117 	ldw	r2,-380(fp)
 2005194:	e0ffab17 	ldw	r3,-340(fp)
 2005198:	18bfe40e 	bge	r3,r2,200512c <__kernel_rem_pio2f+0xb8>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 200519c:	e03fa115 	stw	zero,-380(fp)
 20051a0:	00002a06 	br	200524c <__kernel_rem_pio2f+0x1d8>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 20051a4:	e03fa215 	stw	zero,-376(fp)
 20051a8:	e03fa715 	stw	zero,-356(fp)
 20051ac:	00001906 	br	2005214 <__kernel_rem_pio2f+0x1a0>
 20051b0:	e0bfa217 	ldw	r2,-376(fp)
 20051b4:	1085883a 	add	r2,r2,r2
 20051b8:	1085883a 	add	r2,r2,r2
 20051bc:	1007883a 	mov	r3,r2
 20051c0:	e0bffc17 	ldw	r2,-16(fp)
 20051c4:	10c5883a 	add	r2,r2,r3
 20051c8:	10c00017 	ldw	r3,0(r2)
 20051cc:	e13faa17 	ldw	r4,-344(fp)
 20051d0:	e0bfa117 	ldw	r2,-380(fp)
 20051d4:	2089883a 	add	r4,r4,r2
 20051d8:	e0bfa217 	ldw	r2,-376(fp)
 20051dc:	2085c83a 	sub	r2,r4,r2
 20051e0:	1085883a 	add	r2,r2,r2
 20051e4:	1085883a 	add	r2,r2,r2
 20051e8:	e13f9d04 	addi	r4,fp,-396
 20051ec:	2085883a 	add	r2,r4,r2
 20051f0:	11002304 	addi	r4,r2,140
 20051f4:	20800017 	ldw	r2,0(r4)
 20051f8:	1885ff32 	custom	252,r2,r3,r2
 20051fc:	e0ffa717 	ldw	r3,-356(fp)
 2005200:	1885ff72 	custom	253,r2,r3,r2
 2005204:	e0bfa715 	stw	r2,-356(fp)
 2005208:	e0bfa217 	ldw	r2,-376(fp)
 200520c:	10800044 	addi	r2,r2,1
 2005210:	e0bfa215 	stw	r2,-376(fp)
 2005214:	e0bfa217 	ldw	r2,-376(fp)
 2005218:	e0ffaa17 	ldw	r3,-344(fp)
 200521c:	18bfe40e 	bge	r3,r2,20051b0 <__kernel_rem_pio2f+0x13c>
 2005220:	e0bfa117 	ldw	r2,-380(fp)
 2005224:	1085883a 	add	r2,r2,r2
 2005228:	1085883a 	add	r2,r2,r2
 200522c:	e0ff9d04 	addi	r3,fp,-396
 2005230:	1885883a 	add	r2,r3,r2
 2005234:	10804b04 	addi	r2,r2,300
 2005238:	e0ffa717 	ldw	r3,-356(fp)
 200523c:	10c00015 	stw	r3,0(r2)
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 2005240:	e0bfa117 	ldw	r2,-380(fp)
 2005244:	10800044 	addi	r2,r2,1
 2005248:	e0bfa115 	stw	r2,-380(fp)
 200524c:	e0bfa117 	ldw	r2,-380(fp)
 2005250:	e0ffa817 	ldw	r3,-352(fp)
 2005254:	18bfd30e 	bge	r3,r2,20051a4 <__kernel_rem_pio2f+0x130>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
	}

	jz = jk;
 2005258:	e0bfa817 	ldw	r2,-352(fp)
 200525c:	e0bf9d15 	stw	r2,-396(fp)
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2005260:	e03fa115 	stw	zero,-380(fp)
 2005264:	e0bf9d17 	ldw	r2,-396(fp)
 2005268:	e0bfa215 	stw	r2,-376(fp)
 200526c:	e0bf9d17 	ldw	r2,-396(fp)
 2005270:	1085883a 	add	r2,r2,r2
 2005274:	1085883a 	add	r2,r2,r2
 2005278:	e13f9d04 	addi	r4,fp,-396
 200527c:	2085883a 	add	r2,r4,r2
 2005280:	10804b04 	addi	r2,r2,300
 2005284:	10800017 	ldw	r2,0(r2)
 2005288:	e0bfa615 	stw	r2,-360(fp)
 200528c:	00002406 	br	2005320 <__kernel_rem_pio2f+0x2ac>
	    fw    =  (float)((__int32_t)(twon8* z));
 2005290:	00cee034 	movhi	r3,15232
 2005294:	e0bfa617 	ldw	r2,-360(fp)
 2005298:	1885ff32 	custom	252,r2,r3,r2
 200529c:	1005fe72 	custom	249,r2,r2,zero
 20052a0:	1005feb2 	custom	250,r2,r2,zero
 20052a4:	e0bfa715 	stw	r2,-356(fp)
	    iq[i] =  (__int32_t)(z-two8*fw);
 20052a8:	00d0e034 	movhi	r3,17280
 20052ac:	e0bfa717 	ldw	r2,-356(fp)
 20052b0:	1885ff32 	custom	252,r2,r3,r2
 20052b4:	e0ffa617 	ldw	r3,-360(fp)
 20052b8:	1885ffb2 	custom	254,r2,r3,r2
 20052bc:	1007fe72 	custom	249,r3,r2,zero
 20052c0:	e0bfa117 	ldw	r2,-380(fp)
 20052c4:	1085883a 	add	r2,r2,r2
 20052c8:	1085883a 	add	r2,r2,r2
 20052cc:	e13f9d04 	addi	r4,fp,-396
 20052d0:	2085883a 	add	r2,r4,r2
 20052d4:	10800f04 	addi	r2,r2,60
 20052d8:	10c00015 	stw	r3,0(r2)
	    z     =  q[j-1]+fw;
 20052dc:	e0bfa217 	ldw	r2,-376(fp)
 20052e0:	10bfffc4 	addi	r2,r2,-1
 20052e4:	1085883a 	add	r2,r2,r2
 20052e8:	1085883a 	add	r2,r2,r2
 20052ec:	e0ff9d04 	addi	r3,fp,-396
 20052f0:	1885883a 	add	r2,r3,r2
 20052f4:	10804b04 	addi	r2,r2,300
 20052f8:	10c00017 	ldw	r3,0(r2)
 20052fc:	e0bfa717 	ldw	r2,-356(fp)
 2005300:	1885ff72 	custom	253,r2,r3,r2
 2005304:	e0bfa615 	stw	r2,-360(fp)
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2005308:	e0bfa117 	ldw	r2,-380(fp)
 200530c:	10800044 	addi	r2,r2,1
 2005310:	e0bfa115 	stw	r2,-380(fp)
 2005314:	e0bfa217 	ldw	r2,-376(fp)
 2005318:	10bfffc4 	addi	r2,r2,-1
 200531c:	e0bfa215 	stw	r2,-376(fp)
 2005320:	e0bfa217 	ldw	r2,-376(fp)
 2005324:	00bfda16 	blt	zero,r2,2005290 <__kernel_rem_pio2f+0x21c>
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 2005328:	e17fa417 	ldw	r5,-368(fp)
 200532c:	e13fa617 	ldw	r4,-360(fp)
 2005330:	20066140 	call	2006614 <scalbnf>
 2005334:	e0bfa615 	stw	r2,-360(fp)
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 2005338:	e0ffa617 	ldw	r3,-360(fp)
 200533c:	008f8034 	movhi	r2,15872
 2005340:	1885ff32 	custom	252,r2,r3,r2
 2005344:	1009883a 	mov	r4,r2
 2005348:	20064b00 	call	20064b0 <floorf>
 200534c:	1007883a 	mov	r3,r2
 2005350:	00904034 	movhi	r2,16640
 2005354:	1885ff32 	custom	252,r2,r3,r2
 2005358:	e0ffa617 	ldw	r3,-360(fp)
 200535c:	1885ffb2 	custom	254,r2,r3,r2
 2005360:	e0bfa615 	stw	r2,-360(fp)
	n  = (__int32_t) z;
 2005364:	e13fa617 	ldw	r4,-360(fp)
 2005368:	2005fe72 	custom	249,r2,r4,zero
 200536c:	e0bfa015 	stw	r2,-384(fp)
	z -= (float)n;
 2005370:	e0bfa017 	ldw	r2,-384(fp)
 2005374:	1005feb2 	custom	250,r2,r2,zero
 2005378:	e0ffa617 	ldw	r3,-360(fp)
 200537c:	1885ffb2 	custom	254,r2,r3,r2
 2005380:	e0bfa615 	stw	r2,-360(fp)
	ih = 0;
 2005384:	e03fa515 	stw	zero,-364(fp)
	if(q0>0) {	/* need iq[jz-1] to determine n */
 2005388:	e0bfa417 	ldw	r2,-368(fp)
 200538c:	0080350e 	bge	zero,r2,2005464 <__kernel_rem_pio2f+0x3f0>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
 2005390:	e0bf9d17 	ldw	r2,-396(fp)
 2005394:	10bfffc4 	addi	r2,r2,-1
 2005398:	1085883a 	add	r2,r2,r2
 200539c:	1085883a 	add	r2,r2,r2
 20053a0:	e0ff9d04 	addi	r3,fp,-396
 20053a4:	1885883a 	add	r2,r3,r2
 20053a8:	10800f04 	addi	r2,r2,60
 20053ac:	10c00017 	ldw	r3,0(r2)
 20053b0:	01000204 	movi	r4,8
 20053b4:	e0bfa417 	ldw	r2,-368(fp)
 20053b8:	2085c83a 	sub	r2,r4,r2
 20053bc:	1885d83a 	sra	r2,r3,r2
 20053c0:	e0bfa115 	stw	r2,-380(fp)
 20053c4:	e0ffa017 	ldw	r3,-384(fp)
 20053c8:	e0bfa117 	ldw	r2,-380(fp)
 20053cc:	1885883a 	add	r2,r3,r2
 20053d0:	e0bfa015 	stw	r2,-384(fp)
	    iq[jz-1] -= i<<(8-q0);
 20053d4:	e0bf9d17 	ldw	r2,-396(fp)
 20053d8:	10bfffc4 	addi	r2,r2,-1
 20053dc:	e0ff9d17 	ldw	r3,-396(fp)
 20053e0:	18ffffc4 	addi	r3,r3,-1
 20053e4:	18c7883a 	add	r3,r3,r3
 20053e8:	18c7883a 	add	r3,r3,r3
 20053ec:	e13f9d04 	addi	r4,fp,-396
 20053f0:	20c7883a 	add	r3,r4,r3
 20053f4:	18c00f04 	addi	r3,r3,60
 20053f8:	19000017 	ldw	r4,0(r3)
 20053fc:	01400204 	movi	r5,8
 2005400:	e0ffa417 	ldw	r3,-368(fp)
 2005404:	28c7c83a 	sub	r3,r5,r3
 2005408:	e17fa117 	ldw	r5,-380(fp)
 200540c:	28c6983a 	sll	r3,r5,r3
 2005410:	20c7c83a 	sub	r3,r4,r3
 2005414:	1085883a 	add	r2,r2,r2
 2005418:	1085883a 	add	r2,r2,r2
 200541c:	e13f9d04 	addi	r4,fp,-396
 2005420:	2085883a 	add	r2,r4,r2
 2005424:	10800f04 	addi	r2,r2,60
 2005428:	10c00015 	stw	r3,0(r2)
	    ih = iq[jz-1]>>(7-q0);
 200542c:	e0bf9d17 	ldw	r2,-396(fp)
 2005430:	10bfffc4 	addi	r2,r2,-1
 2005434:	1085883a 	add	r2,r2,r2
 2005438:	1085883a 	add	r2,r2,r2
 200543c:	e0ff9d04 	addi	r3,fp,-396
 2005440:	1885883a 	add	r2,r3,r2
 2005444:	10800f04 	addi	r2,r2,60
 2005448:	10c00017 	ldw	r3,0(r2)
 200544c:	010001c4 	movi	r4,7
 2005450:	e0bfa417 	ldw	r2,-368(fp)
 2005454:	2085c83a 	sub	r2,r4,r2
 2005458:	1885d83a 	sra	r2,r3,r2
 200545c:	e0bfa515 	stw	r2,-364(fp)
 2005460:	00001306 	br	20054b0 <__kernel_rem_pio2f+0x43c>
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
 2005464:	e0bfa417 	ldw	r2,-368(fp)
 2005468:	10000b1e 	bne	r2,zero,2005498 <__kernel_rem_pio2f+0x424>
 200546c:	e0bf9d17 	ldw	r2,-396(fp)
 2005470:	10bfffc4 	addi	r2,r2,-1
 2005474:	1085883a 	add	r2,r2,r2
 2005478:	1085883a 	add	r2,r2,r2
 200547c:	e13f9d04 	addi	r4,fp,-396
 2005480:	2085883a 	add	r2,r4,r2
 2005484:	10800f04 	addi	r2,r2,60
 2005488:	10800017 	ldw	r2,0(r2)
 200548c:	1005d23a 	srai	r2,r2,8
 2005490:	e0bfa515 	stw	r2,-364(fp)
 2005494:	00000606 	br	20054b0 <__kernel_rem_pio2f+0x43c>
	else if(z>=(float)0.5) ih=2;
 2005498:	e0ffa617 	ldw	r3,-360(fp)
 200549c:	008fc034 	movhi	r2,16128
 20054a0:	1885f932 	custom	228,r2,r3,r2
 20054a4:	10000226 	beq	r2,zero,20054b0 <__kernel_rem_pio2f+0x43c>
 20054a8:	00800084 	movi	r2,2
 20054ac:	e0bfa515 	stw	r2,-364(fp)

	if(ih>0) {	/* q > 0.5 */
 20054b0:	e0bfa517 	ldw	r2,-364(fp)
 20054b4:	00806c0e 	bge	zero,r2,2005668 <__kernel_rem_pio2f+0x5f4>
	    n += 1; carry = 0;
 20054b8:	e0bfa017 	ldw	r2,-384(fp)
 20054bc:	10800044 	addi	r2,r2,1
 20054c0:	e0bfa015 	stw	r2,-384(fp)
 20054c4:	e03f9f15 	stw	zero,-388(fp)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 20054c8:	e03fa115 	stw	zero,-380(fp)
 20054cc:	00002606 	br	2005568 <__kernel_rem_pio2f+0x4f4>
		j = iq[i];
 20054d0:	e0bfa117 	ldw	r2,-380(fp)
 20054d4:	1085883a 	add	r2,r2,r2
 20054d8:	1085883a 	add	r2,r2,r2
 20054dc:	e0ff9d04 	addi	r3,fp,-396
 20054e0:	1885883a 	add	r2,r3,r2
 20054e4:	10800f04 	addi	r2,r2,60
 20054e8:	10800017 	ldw	r2,0(r2)
 20054ec:	e0bfa215 	stw	r2,-376(fp)
		if(carry==0) {
 20054f0:	e0bf9f17 	ldw	r2,-388(fp)
 20054f4:	10000f1e 	bne	r2,zero,2005534 <__kernel_rem_pio2f+0x4c0>
		    if(j!=0) {
 20054f8:	e0bfa217 	ldw	r2,-376(fp)
 20054fc:	10001726 	beq	r2,zero,200555c <__kernel_rem_pio2f+0x4e8>
			carry = 1; iq[i] = 0x100- j;
 2005500:	00800044 	movi	r2,1
 2005504:	e0bf9f15 	stw	r2,-388(fp)
 2005508:	00c04004 	movi	r3,256
 200550c:	e0bfa217 	ldw	r2,-376(fp)
 2005510:	1887c83a 	sub	r3,r3,r2
 2005514:	e0bfa117 	ldw	r2,-380(fp)
 2005518:	1085883a 	add	r2,r2,r2
 200551c:	1085883a 	add	r2,r2,r2
 2005520:	e13f9d04 	addi	r4,fp,-396
 2005524:	2085883a 	add	r2,r4,r2
 2005528:	10800f04 	addi	r2,r2,60
 200552c:	10c00015 	stw	r3,0(r2)
 2005530:	00000a06 	br	200555c <__kernel_rem_pio2f+0x4e8>
		    }
		} else  iq[i] = 0xff - j;
 2005534:	00c03fc4 	movi	r3,255
 2005538:	e0bfa217 	ldw	r2,-376(fp)
 200553c:	1887c83a 	sub	r3,r3,r2
 2005540:	e0bfa117 	ldw	r2,-380(fp)
 2005544:	1085883a 	add	r2,r2,r2
 2005548:	1085883a 	add	r2,r2,r2
 200554c:	e13f9d04 	addi	r4,fp,-396
 2005550:	2085883a 	add	r2,r4,r2
 2005554:	10800f04 	addi	r2,r2,60
 2005558:	10c00015 	stw	r3,0(r2)
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 200555c:	e0bfa117 	ldw	r2,-380(fp)
 2005560:	10800044 	addi	r2,r2,1
 2005564:	e0bfa115 	stw	r2,-380(fp)
 2005568:	e0ffa117 	ldw	r3,-380(fp)
 200556c:	e0bf9d17 	ldw	r2,-396(fp)
 2005570:	18bfd716 	blt	r3,r2,20054d0 <__kernel_rem_pio2f+0x45c>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
 2005574:	e0bfa417 	ldw	r2,-368(fp)
 2005578:	00802a0e 	bge	zero,r2,2005624 <__kernel_rem_pio2f+0x5b0>
	        switch(q0) {
 200557c:	e0bfa417 	ldw	r2,-368(fp)
 2005580:	10c00060 	cmpeqi	r3,r2,1
 2005584:	1800031e 	bne	r3,zero,2005594 <__kernel_rem_pio2f+0x520>
 2005588:	108000a0 	cmpeqi	r2,r2,2
 200558c:	1000131e 	bne	r2,zero,20055dc <__kernel_rem_pio2f+0x568>
 2005590:	00002406 	br	2005624 <__kernel_rem_pio2f+0x5b0>
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
 2005594:	e0bf9d17 	ldw	r2,-396(fp)
 2005598:	10bfffc4 	addi	r2,r2,-1
 200559c:	e0ff9d17 	ldw	r3,-396(fp)
 20055a0:	18ffffc4 	addi	r3,r3,-1
 20055a4:	18c7883a 	add	r3,r3,r3
 20055a8:	18c7883a 	add	r3,r3,r3
 20055ac:	e13f9d04 	addi	r4,fp,-396
 20055b0:	20c7883a 	add	r3,r4,r3
 20055b4:	18c00f04 	addi	r3,r3,60
 20055b8:	18c00017 	ldw	r3,0(r3)
 20055bc:	18c01fcc 	andi	r3,r3,127
 20055c0:	1085883a 	add	r2,r2,r2
 20055c4:	1085883a 	add	r2,r2,r2
 20055c8:	e13f9d04 	addi	r4,fp,-396
 20055cc:	2085883a 	add	r2,r4,r2
 20055d0:	10800f04 	addi	r2,r2,60
 20055d4:	10c00015 	stw	r3,0(r2)
 20055d8:	00001206 	br	2005624 <__kernel_rem_pio2f+0x5b0>
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
 20055dc:	e0bf9d17 	ldw	r2,-396(fp)
 20055e0:	10bfffc4 	addi	r2,r2,-1
 20055e4:	e0ff9d17 	ldw	r3,-396(fp)
 20055e8:	18ffffc4 	addi	r3,r3,-1
 20055ec:	18c7883a 	add	r3,r3,r3
 20055f0:	18c7883a 	add	r3,r3,r3
 20055f4:	e13f9d04 	addi	r4,fp,-396
 20055f8:	20c7883a 	add	r3,r4,r3
 20055fc:	18c00f04 	addi	r3,r3,60
 2005600:	18c00017 	ldw	r3,0(r3)
 2005604:	18c00fcc 	andi	r3,r3,63
 2005608:	1085883a 	add	r2,r2,r2
 200560c:	1085883a 	add	r2,r2,r2
 2005610:	e13f9d04 	addi	r4,fp,-396
 2005614:	2085883a 	add	r2,r4,r2
 2005618:	10800f04 	addi	r2,r2,60
 200561c:	10c00015 	stw	r3,0(r2)
 2005620:	0001883a 	nop
	        }
	    }
	    if(ih==2) {
 2005624:	e0bfa517 	ldw	r2,-364(fp)
 2005628:	10800098 	cmpnei	r2,r2,2
 200562c:	10000e1e 	bne	r2,zero,2005668 <__kernel_rem_pio2f+0x5f4>
		z = one - z;
 2005630:	00cfe034 	movhi	r3,16256
 2005634:	e0bfa617 	ldw	r2,-360(fp)
 2005638:	1885ffb2 	custom	254,r2,r3,r2
 200563c:	e0bfa615 	stw	r2,-360(fp)
		if(carry!=0) z -= scalbnf(one,(int)q0);
 2005640:	e0bf9f17 	ldw	r2,-388(fp)
 2005644:	10000826 	beq	r2,zero,2005668 <__kernel_rem_pio2f+0x5f4>
 2005648:	008fe034 	movhi	r2,16256
 200564c:	e17fa417 	ldw	r5,-368(fp)
 2005650:	1009883a 	mov	r4,r2
 2005654:	20066140 	call	2006614 <scalbnf>
 2005658:	1007883a 	mov	r3,r2
 200565c:	e0bfa617 	ldw	r2,-360(fp)
 2005660:	10c5ffb2 	custom	254,r2,r2,r3
 2005664:	e0bfa615 	stw	r2,-360(fp)
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 2005668:	0007883a 	mov	r3,zero
 200566c:	e0bfa617 	ldw	r2,-360(fp)
 2005670:	10c5f8b2 	custom	226,r2,r2,r3
 2005674:	1000721e 	bne	r2,zero,2005840 <__kernel_rem_pio2f+0x7cc>
	    j = 0;
 2005678:	e03fa215 	stw	zero,-376(fp)
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 200567c:	e0bf9d17 	ldw	r2,-396(fp)
 2005680:	10bfffc4 	addi	r2,r2,-1
 2005684:	e0bfa115 	stw	r2,-380(fp)
 2005688:	00000d06 	br	20056c0 <__kernel_rem_pio2f+0x64c>
 200568c:	e0bfa117 	ldw	r2,-380(fp)
 2005690:	1085883a 	add	r2,r2,r2
 2005694:	1085883a 	add	r2,r2,r2
 2005698:	e0ff9d04 	addi	r3,fp,-396
 200569c:	1885883a 	add	r2,r3,r2
 20056a0:	10800f04 	addi	r2,r2,60
 20056a4:	10800017 	ldw	r2,0(r2)
 20056a8:	e0ffa217 	ldw	r3,-376(fp)
 20056ac:	1884b03a 	or	r2,r3,r2
 20056b0:	e0bfa215 	stw	r2,-376(fp)
 20056b4:	e0bfa117 	ldw	r2,-380(fp)
 20056b8:	10bfffc4 	addi	r2,r2,-1
 20056bc:	e0bfa115 	stw	r2,-380(fp)
 20056c0:	e0ffa117 	ldw	r3,-380(fp)
 20056c4:	e0bfa817 	ldw	r2,-352(fp)
 20056c8:	18bff00e 	bge	r3,r2,200568c <__kernel_rem_pio2f+0x618>
	    if(j==0) { /* need recomputation */
 20056cc:	e0bfa217 	ldw	r2,-376(fp)
 20056d0:	10005b1e 	bne	r2,zero,2005840 <__kernel_rem_pio2f+0x7cc>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 20056d4:	00800044 	movi	r2,1
 20056d8:	e0bfa315 	stw	r2,-372(fp)
 20056dc:	00000306 	br	20056ec <__kernel_rem_pio2f+0x678>
 20056e0:	e0bfa317 	ldw	r2,-372(fp)
 20056e4:	10800044 	addi	r2,r2,1
 20056e8:	e0bfa315 	stw	r2,-372(fp)
 20056ec:	e0ffa817 	ldw	r3,-352(fp)
 20056f0:	e0bfa317 	ldw	r2,-372(fp)
 20056f4:	1885c83a 	sub	r2,r3,r2
 20056f8:	1085883a 	add	r2,r2,r2
 20056fc:	1085883a 	add	r2,r2,r2
 2005700:	e13f9d04 	addi	r4,fp,-396
 2005704:	2085883a 	add	r2,r4,r2
 2005708:	10800f04 	addi	r2,r2,60
 200570c:	10800017 	ldw	r2,0(r2)
 2005710:	103ff326 	beq	r2,zero,20056e0 <__kernel_rem_pio2f+0x66c>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2005714:	e0bf9d17 	ldw	r2,-396(fp)
 2005718:	10800044 	addi	r2,r2,1
 200571c:	e0bfa115 	stw	r2,-380(fp)
 2005720:	00003d06 	br	2005818 <__kernel_rem_pio2f+0x7a4>
		    f[jx+i] = (float) ipio2[jv+i];
 2005724:	e0ffaa17 	ldw	r3,-344(fp)
 2005728:	e0bfa117 	ldw	r2,-380(fp)
 200572c:	1885883a 	add	r2,r3,r2
 2005730:	e13f9e17 	ldw	r4,-392(fp)
 2005734:	e0ffa117 	ldw	r3,-380(fp)
 2005738:	20c7883a 	add	r3,r4,r3
 200573c:	18c7883a 	add	r3,r3,r3
 2005740:	18c7883a 	add	r3,r3,r3
 2005744:	1809883a 	mov	r4,r3
 2005748:	e0c00317 	ldw	r3,12(fp)
 200574c:	1907883a 	add	r3,r3,r4
 2005750:	18c00017 	ldw	r3,0(r3)
 2005754:	1807feb2 	custom	250,r3,r3,zero
 2005758:	1085883a 	add	r2,r2,r2
 200575c:	1085883a 	add	r2,r2,r2
 2005760:	e13f9d04 	addi	r4,fp,-396
 2005764:	2085883a 	add	r2,r4,r2
 2005768:	10802304 	addi	r2,r2,140
 200576c:	10c00015 	stw	r3,0(r2)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 2005770:	e03fa215 	stw	zero,-376(fp)
 2005774:	e03fa715 	stw	zero,-356(fp)
 2005778:	00001906 	br	20057e0 <__kernel_rem_pio2f+0x76c>
 200577c:	e0bfa217 	ldw	r2,-376(fp)
 2005780:	1085883a 	add	r2,r2,r2
 2005784:	1085883a 	add	r2,r2,r2
 2005788:	1007883a 	mov	r3,r2
 200578c:	e0bffc17 	ldw	r2,-16(fp)
 2005790:	10c5883a 	add	r2,r2,r3
 2005794:	10c00017 	ldw	r3,0(r2)
 2005798:	e13faa17 	ldw	r4,-344(fp)
 200579c:	e0bfa117 	ldw	r2,-380(fp)
 20057a0:	2089883a 	add	r4,r4,r2
 20057a4:	e0bfa217 	ldw	r2,-376(fp)
 20057a8:	2085c83a 	sub	r2,r4,r2
 20057ac:	1085883a 	add	r2,r2,r2
 20057b0:	1085883a 	add	r2,r2,r2
 20057b4:	e13f9d04 	addi	r4,fp,-396
 20057b8:	2085883a 	add	r2,r4,r2
 20057bc:	11002304 	addi	r4,r2,140
 20057c0:	20800017 	ldw	r2,0(r4)
 20057c4:	1885ff32 	custom	252,r2,r3,r2
 20057c8:	e0ffa717 	ldw	r3,-356(fp)
 20057cc:	1885ff72 	custom	253,r2,r3,r2
 20057d0:	e0bfa715 	stw	r2,-356(fp)
 20057d4:	e0bfa217 	ldw	r2,-376(fp)
 20057d8:	10800044 	addi	r2,r2,1
 20057dc:	e0bfa215 	stw	r2,-376(fp)
 20057e0:	e0bfa217 	ldw	r2,-376(fp)
 20057e4:	e0ffaa17 	ldw	r3,-344(fp)
 20057e8:	18bfe40e 	bge	r3,r2,200577c <__kernel_rem_pio2f+0x708>
		    q[i] = fw;
 20057ec:	e0bfa117 	ldw	r2,-380(fp)
 20057f0:	1085883a 	add	r2,r2,r2
 20057f4:	1085883a 	add	r2,r2,r2
 20057f8:	e0ff9d04 	addi	r3,fp,-396
 20057fc:	1885883a 	add	r2,r3,r2
 2005800:	10804b04 	addi	r2,r2,300
 2005804:	e0ffa717 	ldw	r3,-356(fp)
 2005808:	10c00015 	stw	r3,0(r2)
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 200580c:	e0bfa117 	ldw	r2,-380(fp)
 2005810:	10800044 	addi	r2,r2,1
 2005814:	e0bfa115 	stw	r2,-380(fp)
 2005818:	e0ff9d17 	ldw	r3,-396(fp)
 200581c:	e0bfa317 	ldw	r2,-372(fp)
 2005820:	1887883a 	add	r3,r3,r2
 2005824:	e0bfa117 	ldw	r2,-380(fp)
 2005828:	18bfbe0e 	bge	r3,r2,2005724 <__kernel_rem_pio2f+0x6b0>
		    f[jx+i] = (float) ipio2[jv+i];
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
		    q[i] = fw;
		}
		jz += k;
 200582c:	e0ff9d17 	ldw	r3,-396(fp)
 2005830:	e0bfa317 	ldw	r2,-372(fp)
 2005834:	1885883a 	add	r2,r3,r2
 2005838:	e0bf9d15 	stw	r2,-396(fp)
		goto recompute;
 200583c:	003e8806 	br	2005260 <__kernel_rem_pio2f+0x1ec>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
 2005840:	e0bfa617 	ldw	r2,-360(fp)
 2005844:	0007883a 	mov	r3,zero
 2005848:	10c5f8b2 	custom	226,r2,r2,r3
 200584c:	1000161e 	bne	r2,zero,20058a8 <__kernel_rem_pio2f+0x834>
	    jz -= 1; q0 -= 8;
 2005850:	e0bf9d17 	ldw	r2,-396(fp)
 2005854:	10bfffc4 	addi	r2,r2,-1
 2005858:	e0bf9d15 	stw	r2,-396(fp)
 200585c:	e0bfa417 	ldw	r2,-368(fp)
 2005860:	10bffe04 	addi	r2,r2,-8
 2005864:	e0bfa415 	stw	r2,-368(fp)
	    while(iq[jz]==0) { jz--; q0-=8;}
 2005868:	00000606 	br	2005884 <__kernel_rem_pio2f+0x810>
 200586c:	e0bf9d17 	ldw	r2,-396(fp)
 2005870:	10bfffc4 	addi	r2,r2,-1
 2005874:	e0bf9d15 	stw	r2,-396(fp)
 2005878:	e0bfa417 	ldw	r2,-368(fp)
 200587c:	10bffe04 	addi	r2,r2,-8
 2005880:	e0bfa415 	stw	r2,-368(fp)
 2005884:	e0bf9d17 	ldw	r2,-396(fp)
 2005888:	1085883a 	add	r2,r2,r2
 200588c:	1085883a 	add	r2,r2,r2
 2005890:	e13f9d04 	addi	r4,fp,-396
 2005894:	2085883a 	add	r2,r4,r2
 2005898:	10800f04 	addi	r2,r2,60
 200589c:	10800017 	ldw	r2,0(r2)
 20058a0:	103ff226 	beq	r2,zero,200586c <__kernel_rem_pio2f+0x7f8>
 20058a4:	00003606 	br	2005980 <__kernel_rem_pio2f+0x90c>
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 20058a8:	e0bfa417 	ldw	r2,-368(fp)
 20058ac:	0085c83a 	sub	r2,zero,r2
 20058b0:	100b883a 	mov	r5,r2
 20058b4:	e13fa617 	ldw	r4,-360(fp)
 20058b8:	20066140 	call	2006614 <scalbnf>
 20058bc:	e0bfa615 	stw	r2,-360(fp)
	    if(z>=two8) { 
 20058c0:	0090e034 	movhi	r2,17280
 20058c4:	e0ffa617 	ldw	r3,-360(fp)
 20058c8:	1885f932 	custom	228,r2,r3,r2
 20058cc:	10002326 	beq	r2,zero,200595c <__kernel_rem_pio2f+0x8e8>
		fw = (float)((__int32_t)(twon8*z));
 20058d0:	00cee034 	movhi	r3,15232
 20058d4:	e0bfa617 	ldw	r2,-360(fp)
 20058d8:	1885ff32 	custom	252,r2,r3,r2
 20058dc:	1005fe72 	custom	249,r2,r2,zero
 20058e0:	1005feb2 	custom	250,r2,r2,zero
 20058e4:	e0bfa715 	stw	r2,-356(fp)
		iq[jz] = (__int32_t)(z-two8*fw);
 20058e8:	00d0e034 	movhi	r3,17280
 20058ec:	e0bfa717 	ldw	r2,-356(fp)
 20058f0:	1885ff32 	custom	252,r2,r3,r2
 20058f4:	e0ffa617 	ldw	r3,-360(fp)
 20058f8:	1885ffb2 	custom	254,r2,r3,r2
 20058fc:	1007fe72 	custom	249,r3,r2,zero
 2005900:	e0bf9d17 	ldw	r2,-396(fp)
 2005904:	1085883a 	add	r2,r2,r2
 2005908:	1085883a 	add	r2,r2,r2
 200590c:	e13f9d04 	addi	r4,fp,-396
 2005910:	2085883a 	add	r2,r4,r2
 2005914:	10800f04 	addi	r2,r2,60
 2005918:	10c00015 	stw	r3,0(r2)
		jz += 1; q0 += 8;
 200591c:	e0bf9d17 	ldw	r2,-396(fp)
 2005920:	10800044 	addi	r2,r2,1
 2005924:	e0bf9d15 	stw	r2,-396(fp)
 2005928:	e0bfa417 	ldw	r2,-368(fp)
 200592c:	10800204 	addi	r2,r2,8
 2005930:	e0bfa415 	stw	r2,-368(fp)
		iq[jz] = (__int32_t) fw;
 2005934:	e0bfa717 	ldw	r2,-356(fp)
 2005938:	1007fe72 	custom	249,r3,r2,zero
 200593c:	e0bf9d17 	ldw	r2,-396(fp)
 2005940:	1085883a 	add	r2,r2,r2
 2005944:	1085883a 	add	r2,r2,r2
 2005948:	e13f9d04 	addi	r4,fp,-396
 200594c:	2085883a 	add	r2,r4,r2
 2005950:	10800f04 	addi	r2,r2,60
 2005954:	10c00015 	stw	r3,0(r2)
 2005958:	00000906 	br	2005980 <__kernel_rem_pio2f+0x90c>
	    } else iq[jz] = (__int32_t) z ;
 200595c:	e0bfa617 	ldw	r2,-360(fp)
 2005960:	1007fe72 	custom	249,r3,r2,zero
 2005964:	e0bf9d17 	ldw	r2,-396(fp)
 2005968:	1085883a 	add	r2,r2,r2
 200596c:	1085883a 	add	r2,r2,r2
 2005970:	e13f9d04 	addi	r4,fp,-396
 2005974:	2085883a 	add	r2,r4,r2
 2005978:	10800f04 	addi	r2,r2,60
 200597c:	10c00015 	stw	r3,0(r2)
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
 2005980:	008fe034 	movhi	r2,16256
 2005984:	e17fa417 	ldw	r5,-368(fp)
 2005988:	1009883a 	mov	r4,r2
 200598c:	20066140 	call	2006614 <scalbnf>
 2005990:	e0bfa715 	stw	r2,-356(fp)
	for(i=jz;i>=0;i--) {
 2005994:	e0bf9d17 	ldw	r2,-396(fp)
 2005998:	e0bfa115 	stw	r2,-380(fp)
 200599c:	00001806 	br	2005a00 <__kernel_rem_pio2f+0x98c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
 20059a0:	e0bfa117 	ldw	r2,-380(fp)
 20059a4:	1085883a 	add	r2,r2,r2
 20059a8:	1085883a 	add	r2,r2,r2
 20059ac:	e0ff9d04 	addi	r3,fp,-396
 20059b0:	1885883a 	add	r2,r3,r2
 20059b4:	10800f04 	addi	r2,r2,60
 20059b8:	10800017 	ldw	r2,0(r2)
 20059bc:	1007feb2 	custom	250,r3,r2,zero
 20059c0:	e0bfa717 	ldw	r2,-356(fp)
 20059c4:	1887ff32 	custom	252,r3,r3,r2
 20059c8:	e0bfa117 	ldw	r2,-380(fp)
 20059cc:	1085883a 	add	r2,r2,r2
 20059d0:	1085883a 	add	r2,r2,r2
 20059d4:	e13f9d04 	addi	r4,fp,-396
 20059d8:	2085883a 	add	r2,r4,r2
 20059dc:	10804b04 	addi	r2,r2,300
 20059e0:	10c00015 	stw	r3,0(r2)
 20059e4:	008ee034 	movhi	r2,15232
 20059e8:	e0ffa717 	ldw	r3,-356(fp)
 20059ec:	1885ff32 	custom	252,r2,r3,r2
 20059f0:	e0bfa715 	stw	r2,-356(fp)
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
 20059f4:	e0bfa117 	ldw	r2,-380(fp)
 20059f8:	10bfffc4 	addi	r2,r2,-1
 20059fc:	e0bfa115 	stw	r2,-380(fp)
 2005a00:	e0bfa117 	ldw	r2,-380(fp)
 2005a04:	103fe60e 	bge	r2,zero,20059a0 <__kernel_rem_pio2f+0x92c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 2005a08:	e0bf9d17 	ldw	r2,-396(fp)
 2005a0c:	e0bfa115 	stw	r2,-380(fp)
 2005a10:	00002f06 	br	2005ad0 <__kernel_rem_pio2f+0xa5c>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 2005a14:	e03fa715 	stw	zero,-356(fp)
 2005a18:	e03fa315 	stw	zero,-372(fp)
 2005a1c:	00001706 	br	2005a7c <__kernel_rem_pio2f+0xa08>
 2005a20:	008080b4 	movhi	r2,514
 2005a24:	10890404 	addi	r2,r2,9232
 2005a28:	e0ffa317 	ldw	r3,-372(fp)
 2005a2c:	18c7883a 	add	r3,r3,r3
 2005a30:	18c7883a 	add	r3,r3,r3
 2005a34:	10c5883a 	add	r2,r2,r3
 2005a38:	10c00017 	ldw	r3,0(r2)
 2005a3c:	e13fa117 	ldw	r4,-380(fp)
 2005a40:	e0bfa317 	ldw	r2,-372(fp)
 2005a44:	2085883a 	add	r2,r4,r2
 2005a48:	1085883a 	add	r2,r2,r2
 2005a4c:	1085883a 	add	r2,r2,r2
 2005a50:	e13f9d04 	addi	r4,fp,-396
 2005a54:	2085883a 	add	r2,r4,r2
 2005a58:	11004b04 	addi	r4,r2,300
 2005a5c:	20800017 	ldw	r2,0(r4)
 2005a60:	1885ff32 	custom	252,r2,r3,r2
 2005a64:	e0ffa717 	ldw	r3,-356(fp)
 2005a68:	1885ff72 	custom	253,r2,r3,r2
 2005a6c:	e0bfa715 	stw	r2,-356(fp)
 2005a70:	e0bfa317 	ldw	r2,-372(fp)
 2005a74:	10800044 	addi	r2,r2,1
 2005a78:	e0bfa315 	stw	r2,-372(fp)
 2005a7c:	e0bfa317 	ldw	r2,-372(fp)
 2005a80:	e0ffa917 	ldw	r3,-348(fp)
 2005a84:	18800516 	blt	r3,r2,2005a9c <__kernel_rem_pio2f+0xa28>
 2005a88:	e0ff9d17 	ldw	r3,-396(fp)
 2005a8c:	e0bfa117 	ldw	r2,-380(fp)
 2005a90:	1887c83a 	sub	r3,r3,r2
 2005a94:	e0bfa317 	ldw	r2,-372(fp)
 2005a98:	18bfe10e 	bge	r3,r2,2005a20 <__kernel_rem_pio2f+0x9ac>
	    fq[jz-i] = fw;
 2005a9c:	e0ff9d17 	ldw	r3,-396(fp)
 2005aa0:	e0bfa117 	ldw	r2,-380(fp)
 2005aa4:	1885c83a 	sub	r2,r3,r2
 2005aa8:	1085883a 	add	r2,r2,r2
 2005aac:	1085883a 	add	r2,r2,r2
 2005ab0:	e0ff9d04 	addi	r3,fp,-396
 2005ab4:	1885883a 	add	r2,r3,r2
 2005ab8:	10803704 	addi	r2,r2,220
 2005abc:	e0ffa717 	ldw	r3,-356(fp)
 2005ac0:	10c00015 	stw	r3,0(r2)
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 2005ac4:	e0bfa117 	ldw	r2,-380(fp)
 2005ac8:	10bfffc4 	addi	r2,r2,-1
 2005acc:	e0bfa115 	stw	r2,-380(fp)
 2005ad0:	e0bfa117 	ldw	r2,-380(fp)
 2005ad4:	103fcf0e 	bge	r2,zero,2005a14 <__kernel_rem_pio2f+0x9a0>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 2005ad8:	e0800217 	ldw	r2,8(fp)
 2005adc:	10c000c8 	cmpgei	r3,r2,3
 2005ae0:	1800031e 	bne	r3,zero,2005af0 <__kernel_rem_pio2f+0xa7c>
 2005ae4:	00802116 	blt	zero,r2,2005b6c <__kernel_rem_pio2f+0xaf8>
 2005ae8:	10000426 	beq	r2,zero,2005afc <__kernel_rem_pio2f+0xa88>
 2005aec:	00010206 	br	2005ef8 <__kernel_rem_pio2f+0xe84>
 2005af0:	108000e0 	cmpeqi	r2,r2,3
 2005af4:	1000591e 	bne	r2,zero,2005c5c <__kernel_rem_pio2f+0xbe8>
 2005af8:	0000ff06 	br	2005ef8 <__kernel_rem_pio2f+0xe84>
	    case 0:
		fw = 0.0;
 2005afc:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i];
 2005b00:	e0bf9d17 	ldw	r2,-396(fp)
 2005b04:	e0bfa115 	stw	r2,-380(fp)
 2005b08:	00000d06 	br	2005b40 <__kernel_rem_pio2f+0xacc>
 2005b0c:	e0bfa117 	ldw	r2,-380(fp)
 2005b10:	1085883a 	add	r2,r2,r2
 2005b14:	1085883a 	add	r2,r2,r2
 2005b18:	e13f9d04 	addi	r4,fp,-396
 2005b1c:	2085883a 	add	r2,r4,r2
 2005b20:	10c03704 	addi	r3,r2,220
 2005b24:	18800017 	ldw	r2,0(r3)
 2005b28:	e0ffa717 	ldw	r3,-356(fp)
 2005b2c:	1885ff72 	custom	253,r2,r3,r2
 2005b30:	e0bfa715 	stw	r2,-356(fp)
 2005b34:	e0bfa117 	ldw	r2,-380(fp)
 2005b38:	10bfffc4 	addi	r2,r2,-1
 2005b3c:	e0bfa115 	stw	r2,-380(fp)
 2005b40:	e0bfa117 	ldw	r2,-380(fp)
 2005b44:	103ff10e 	bge	r2,zero,2005b0c <__kernel_rem_pio2f+0xa98>
		y[0] = (ih==0)? fw: -fw; 
 2005b48:	e0bfa517 	ldw	r2,-364(fp)
 2005b4c:	10000326 	beq	r2,zero,2005b5c <__kernel_rem_pio2f+0xae8>
 2005b50:	e0bfa717 	ldw	r2,-356(fp)
 2005b54:	1005f872 	custom	225,r2,r2,zero
 2005b58:	00000106 	br	2005b60 <__kernel_rem_pio2f+0xaec>
 2005b5c:	e0bfa717 	ldw	r2,-356(fp)
 2005b60:	e0fffd17 	ldw	r3,-12(fp)
 2005b64:	18800015 	stw	r2,0(r3)
		break;
 2005b68:	0000e306 	br	2005ef8 <__kernel_rem_pio2f+0xe84>
	    case 1:
	    case 2:
		fw = 0.0;
 2005b6c:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i]; 
 2005b70:	e0bf9d17 	ldw	r2,-396(fp)
 2005b74:	e0bfa115 	stw	r2,-380(fp)
 2005b78:	00000d06 	br	2005bb0 <__kernel_rem_pio2f+0xb3c>
 2005b7c:	e0bfa117 	ldw	r2,-380(fp)
 2005b80:	1085883a 	add	r2,r2,r2
 2005b84:	1085883a 	add	r2,r2,r2
 2005b88:	e0ff9d04 	addi	r3,fp,-396
 2005b8c:	1885883a 	add	r2,r3,r2
 2005b90:	10c03704 	addi	r3,r2,220
 2005b94:	18800017 	ldw	r2,0(r3)
 2005b98:	e0ffa717 	ldw	r3,-356(fp)
 2005b9c:	1885ff72 	custom	253,r2,r3,r2
 2005ba0:	e0bfa715 	stw	r2,-356(fp)
 2005ba4:	e0bfa117 	ldw	r2,-380(fp)
 2005ba8:	10bfffc4 	addi	r2,r2,-1
 2005bac:	e0bfa115 	stw	r2,-380(fp)
 2005bb0:	e0bfa117 	ldw	r2,-380(fp)
 2005bb4:	103ff10e 	bge	r2,zero,2005b7c <__kernel_rem_pio2f+0xb08>
		y[0] = (ih==0)? fw: -fw; 
 2005bb8:	e0bfa517 	ldw	r2,-364(fp)
 2005bbc:	10000326 	beq	r2,zero,2005bcc <__kernel_rem_pio2f+0xb58>
 2005bc0:	e0bfa717 	ldw	r2,-356(fp)
 2005bc4:	1005f872 	custom	225,r2,r2,zero
 2005bc8:	00000106 	br	2005bd0 <__kernel_rem_pio2f+0xb5c>
 2005bcc:	e0bfa717 	ldw	r2,-356(fp)
 2005bd0:	e0fffd17 	ldw	r3,-12(fp)
 2005bd4:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
 2005bd8:	e0ffd417 	ldw	r3,-176(fp)
 2005bdc:	e0bfa717 	ldw	r2,-356(fp)
 2005be0:	1885ffb2 	custom	254,r2,r3,r2
 2005be4:	e0bfa715 	stw	r2,-356(fp)
		for (i=1;i<=jz;i++) fw += fq[i];
 2005be8:	00800044 	movi	r2,1
 2005bec:	e0bfa115 	stw	r2,-380(fp)
 2005bf0:	00000d06 	br	2005c28 <__kernel_rem_pio2f+0xbb4>
 2005bf4:	e0bfa117 	ldw	r2,-380(fp)
 2005bf8:	1085883a 	add	r2,r2,r2
 2005bfc:	1085883a 	add	r2,r2,r2
 2005c00:	e13f9d04 	addi	r4,fp,-396
 2005c04:	2085883a 	add	r2,r4,r2
 2005c08:	10c03704 	addi	r3,r2,220
 2005c0c:	18800017 	ldw	r2,0(r3)
 2005c10:	e0ffa717 	ldw	r3,-356(fp)
 2005c14:	1885ff72 	custom	253,r2,r3,r2
 2005c18:	e0bfa715 	stw	r2,-356(fp)
 2005c1c:	e0bfa117 	ldw	r2,-380(fp)
 2005c20:	10800044 	addi	r2,r2,1
 2005c24:	e0bfa115 	stw	r2,-380(fp)
 2005c28:	e0bfa117 	ldw	r2,-380(fp)
 2005c2c:	e0ff9d17 	ldw	r3,-396(fp)
 2005c30:	18bff00e 	bge	r3,r2,2005bf4 <__kernel_rem_pio2f+0xb80>
		y[1] = (ih==0)? fw: -fw; 
 2005c34:	e0bffd17 	ldw	r2,-12(fp)
 2005c38:	10c00104 	addi	r3,r2,4
 2005c3c:	e0bfa517 	ldw	r2,-364(fp)
 2005c40:	10000326 	beq	r2,zero,2005c50 <__kernel_rem_pio2f+0xbdc>
 2005c44:	e0bfa717 	ldw	r2,-356(fp)
 2005c48:	1005f872 	custom	225,r2,r2,zero
 2005c4c:	00000106 	br	2005c54 <__kernel_rem_pio2f+0xbe0>
 2005c50:	e0bfa717 	ldw	r2,-356(fp)
 2005c54:	18800015 	stw	r2,0(r3)
		break;
 2005c58:	0000a706 	br	2005ef8 <__kernel_rem_pio2f+0xe84>
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005c5c:	e0bf9d17 	ldw	r2,-396(fp)
 2005c60:	e0bfa115 	stw	r2,-380(fp)
 2005c64:	00003606 	br	2005d40 <__kernel_rem_pio2f+0xccc>
		    fw      = fq[i-1]+fq[i]; 
 2005c68:	e0bfa117 	ldw	r2,-380(fp)
 2005c6c:	10bfffc4 	addi	r2,r2,-1
 2005c70:	1085883a 	add	r2,r2,r2
 2005c74:	1085883a 	add	r2,r2,r2
 2005c78:	e0ff9d04 	addi	r3,fp,-396
 2005c7c:	1885883a 	add	r2,r3,r2
 2005c80:	10803704 	addi	r2,r2,220
 2005c84:	10c00017 	ldw	r3,0(r2)
 2005c88:	e0bfa117 	ldw	r2,-380(fp)
 2005c8c:	1085883a 	add	r2,r2,r2
 2005c90:	1085883a 	add	r2,r2,r2
 2005c94:	e13f9d04 	addi	r4,fp,-396
 2005c98:	2085883a 	add	r2,r4,r2
 2005c9c:	11003704 	addi	r4,r2,220
 2005ca0:	20800017 	ldw	r2,0(r4)
 2005ca4:	1885ff72 	custom	253,r2,r3,r2
 2005ca8:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 2005cac:	e0bfa117 	ldw	r2,-380(fp)
 2005cb0:	1085883a 	add	r2,r2,r2
 2005cb4:	1085883a 	add	r2,r2,r2
 2005cb8:	e0ff9d04 	addi	r3,fp,-396
 2005cbc:	1885883a 	add	r2,r3,r2
 2005cc0:	10803704 	addi	r2,r2,220
 2005cc4:	10c00017 	ldw	r3,0(r2)
 2005cc8:	e0bfa117 	ldw	r2,-380(fp)
 2005ccc:	10bfffc4 	addi	r2,r2,-1
 2005cd0:	1085883a 	add	r2,r2,r2
 2005cd4:	1085883a 	add	r2,r2,r2
 2005cd8:	e13f9d04 	addi	r4,fp,-396
 2005cdc:	2085883a 	add	r2,r4,r2
 2005ce0:	10803704 	addi	r2,r2,220
 2005ce4:	11000017 	ldw	r4,0(r2)
 2005ce8:	e0bfa717 	ldw	r2,-356(fp)
 2005cec:	2085ffb2 	custom	254,r2,r4,r2
 2005cf0:	1887ff72 	custom	253,r3,r3,r2
 2005cf4:	e0bfa117 	ldw	r2,-380(fp)
 2005cf8:	1085883a 	add	r2,r2,r2
 2005cfc:	1085883a 	add	r2,r2,r2
 2005d00:	e13f9d04 	addi	r4,fp,-396
 2005d04:	2085883a 	add	r2,r4,r2
 2005d08:	10803704 	addi	r2,r2,220
 2005d0c:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2005d10:	e0bfa117 	ldw	r2,-380(fp)
 2005d14:	10bfffc4 	addi	r2,r2,-1
 2005d18:	1085883a 	add	r2,r2,r2
 2005d1c:	1085883a 	add	r2,r2,r2
 2005d20:	e0ff9d04 	addi	r3,fp,-396
 2005d24:	1885883a 	add	r2,r3,r2
 2005d28:	10803704 	addi	r2,r2,220
 2005d2c:	e0ffa717 	ldw	r3,-356(fp)
 2005d30:	10c00015 	stw	r3,0(r2)
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005d34:	e0bfa117 	ldw	r2,-380(fp)
 2005d38:	10bfffc4 	addi	r2,r2,-1
 2005d3c:	e0bfa115 	stw	r2,-380(fp)
 2005d40:	e0bfa117 	ldw	r2,-380(fp)
 2005d44:	00bfc816 	blt	zero,r2,2005c68 <__kernel_rem_pio2f+0xbf4>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2005d48:	e0bf9d17 	ldw	r2,-396(fp)
 2005d4c:	e0bfa115 	stw	r2,-380(fp)
 2005d50:	00003606 	br	2005e2c <__kernel_rem_pio2f+0xdb8>
		    fw      = fq[i-1]+fq[i]; 
 2005d54:	e0bfa117 	ldw	r2,-380(fp)
 2005d58:	10bfffc4 	addi	r2,r2,-1
 2005d5c:	1085883a 	add	r2,r2,r2
 2005d60:	1085883a 	add	r2,r2,r2
 2005d64:	e13f9d04 	addi	r4,fp,-396
 2005d68:	2085883a 	add	r2,r4,r2
 2005d6c:	10803704 	addi	r2,r2,220
 2005d70:	10c00017 	ldw	r3,0(r2)
 2005d74:	e0bfa117 	ldw	r2,-380(fp)
 2005d78:	1085883a 	add	r2,r2,r2
 2005d7c:	1085883a 	add	r2,r2,r2
 2005d80:	e13f9d04 	addi	r4,fp,-396
 2005d84:	2085883a 	add	r2,r4,r2
 2005d88:	11003704 	addi	r4,r2,220
 2005d8c:	20800017 	ldw	r2,0(r4)
 2005d90:	1885ff72 	custom	253,r2,r3,r2
 2005d94:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 2005d98:	e0bfa117 	ldw	r2,-380(fp)
 2005d9c:	1085883a 	add	r2,r2,r2
 2005da0:	1085883a 	add	r2,r2,r2
 2005da4:	e0ff9d04 	addi	r3,fp,-396
 2005da8:	1885883a 	add	r2,r3,r2
 2005dac:	10803704 	addi	r2,r2,220
 2005db0:	10c00017 	ldw	r3,0(r2)
 2005db4:	e0bfa117 	ldw	r2,-380(fp)
 2005db8:	10bfffc4 	addi	r2,r2,-1
 2005dbc:	1085883a 	add	r2,r2,r2
 2005dc0:	1085883a 	add	r2,r2,r2
 2005dc4:	e13f9d04 	addi	r4,fp,-396
 2005dc8:	2085883a 	add	r2,r4,r2
 2005dcc:	10803704 	addi	r2,r2,220
 2005dd0:	11000017 	ldw	r4,0(r2)
 2005dd4:	e0bfa717 	ldw	r2,-356(fp)
 2005dd8:	2085ffb2 	custom	254,r2,r4,r2
 2005ddc:	1887ff72 	custom	253,r3,r3,r2
 2005de0:	e0bfa117 	ldw	r2,-380(fp)
 2005de4:	1085883a 	add	r2,r2,r2
 2005de8:	1085883a 	add	r2,r2,r2
 2005dec:	e13f9d04 	addi	r4,fp,-396
 2005df0:	2085883a 	add	r2,r4,r2
 2005df4:	10803704 	addi	r2,r2,220
 2005df8:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2005dfc:	e0bfa117 	ldw	r2,-380(fp)
 2005e00:	10bfffc4 	addi	r2,r2,-1
 2005e04:	1085883a 	add	r2,r2,r2
 2005e08:	1085883a 	add	r2,r2,r2
 2005e0c:	e0ff9d04 	addi	r3,fp,-396
 2005e10:	1885883a 	add	r2,r3,r2
 2005e14:	10803704 	addi	r2,r2,220
 2005e18:	e0ffa717 	ldw	r3,-356(fp)
 2005e1c:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2005e20:	e0bfa117 	ldw	r2,-380(fp)
 2005e24:	10bfffc4 	addi	r2,r2,-1
 2005e28:	e0bfa115 	stw	r2,-380(fp)
 2005e2c:	e0bfa117 	ldw	r2,-380(fp)
 2005e30:	10800088 	cmpgei	r2,r2,2
 2005e34:	103fc71e 	bne	r2,zero,2005d54 <__kernel_rem_pio2f+0xce0>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
 2005e38:	e03fa715 	stw	zero,-356(fp)
 2005e3c:	e0bf9d17 	ldw	r2,-396(fp)
 2005e40:	e0bfa115 	stw	r2,-380(fp)
 2005e44:	00000d06 	br	2005e7c <__kernel_rem_pio2f+0xe08>
 2005e48:	e0bfa117 	ldw	r2,-380(fp)
 2005e4c:	1085883a 	add	r2,r2,r2
 2005e50:	1085883a 	add	r2,r2,r2
 2005e54:	e13f9d04 	addi	r4,fp,-396
 2005e58:	2085883a 	add	r2,r4,r2
 2005e5c:	10c03704 	addi	r3,r2,220
 2005e60:	18800017 	ldw	r2,0(r3)
 2005e64:	e0ffa717 	ldw	r3,-356(fp)
 2005e68:	1885ff72 	custom	253,r2,r3,r2
 2005e6c:	e0bfa715 	stw	r2,-356(fp)
 2005e70:	e0bfa117 	ldw	r2,-380(fp)
 2005e74:	10bfffc4 	addi	r2,r2,-1
 2005e78:	e0bfa115 	stw	r2,-380(fp)
 2005e7c:	e0bfa117 	ldw	r2,-380(fp)
 2005e80:	10800088 	cmpgei	r2,r2,2
 2005e84:	103ff01e 	bne	r2,zero,2005e48 <__kernel_rem_pio2f+0xdd4>
		if(ih==0) {
 2005e88:	e0bfa517 	ldw	r2,-364(fp)
 2005e8c:	10000c1e 	bne	r2,zero,2005ec0 <__kernel_rem_pio2f+0xe4c>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
 2005e90:	e0ffd417 	ldw	r3,-176(fp)
 2005e94:	e0bffd17 	ldw	r2,-12(fp)
 2005e98:	10c00015 	stw	r3,0(r2)
 2005e9c:	e0bffd17 	ldw	r2,-12(fp)
 2005ea0:	10800104 	addi	r2,r2,4
 2005ea4:	e0ffd517 	ldw	r3,-172(fp)
 2005ea8:	10c00015 	stw	r3,0(r2)
 2005eac:	e0bffd17 	ldw	r2,-12(fp)
 2005eb0:	10800204 	addi	r2,r2,8
 2005eb4:	e0ffa717 	ldw	r3,-356(fp)
 2005eb8:	10c00015 	stw	r3,0(r2)
 2005ebc:	00000e06 	br	2005ef8 <__kernel_rem_pio2f+0xe84>
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
 2005ec0:	e0bfd417 	ldw	r2,-176(fp)
 2005ec4:	1007f872 	custom	225,r3,r2,zero
 2005ec8:	e0bffd17 	ldw	r2,-12(fp)
 2005ecc:	10c00015 	stw	r3,0(r2)
 2005ed0:	e0bffd17 	ldw	r2,-12(fp)
 2005ed4:	10800104 	addi	r2,r2,4
 2005ed8:	e0ffd517 	ldw	r3,-172(fp)
 2005edc:	1807f872 	custom	225,r3,r3,zero
 2005ee0:	10c00015 	stw	r3,0(r2)
 2005ee4:	e0bffd17 	ldw	r2,-12(fp)
 2005ee8:	10800204 	addi	r2,r2,8
 2005eec:	e0ffa717 	ldw	r3,-356(fp)
 2005ef0:	1807f872 	custom	225,r3,r3,zero
 2005ef4:	10c00015 	stw	r3,0(r2)
		}
	}
	return n&7;
 2005ef8:	e0bfa017 	ldw	r2,-384(fp)
 2005efc:	108001cc 	andi	r2,r2,7
}
 2005f00:	e037883a 	mov	sp,fp
 2005f04:	dfc00117 	ldw	ra,4(sp)
 2005f08:	df000017 	ldw	fp,0(sp)
 2005f0c:	dec00204 	addi	sp,sp,8
 2005f10:	f800283a 	ret

02005f14 <__kernel_sinf>:
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 2005f14:	defff704 	addi	sp,sp,-36
 2005f18:	df000815 	stw	fp,32(sp)
 2005f1c:	df000804 	addi	fp,sp,32
 2005f20:	e13ffd15 	stw	r4,-12(fp)
 2005f24:	e17ffe15 	stw	r5,-8(fp)
 2005f28:	e1bfff15 	stw	r6,-4(fp)
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 2005f2c:	e0bffd17 	ldw	r2,-12(fp)
 2005f30:	e0bffc15 	stw	r2,-16(fp)
 2005f34:	e0bffc17 	ldw	r2,-16(fp)
 2005f38:	e0bff815 	stw	r2,-32(fp)
	ix &= 0x7fffffff;			/* high word of x */
 2005f3c:	e0fff817 	ldw	r3,-32(fp)
 2005f40:	00a00034 	movhi	r2,32768
 2005f44:	10bfffc4 	addi	r2,r2,-1
 2005f48:	1884703a 	and	r2,r3,r2
 2005f4c:	e0bff815 	stw	r2,-32(fp)
	if(ix<0x32000000)			/* |x| < 2**-27 */
 2005f50:	e0fff817 	ldw	r3,-32(fp)
 2005f54:	008c8034 	movhi	r2,12800
 2005f58:	1880050e 	bge	r3,r2,2005f70 <__kernel_sinf+0x5c>
	   {if((int)x==0) return x;}		/* generate inexact */
 2005f5c:	e0fffd17 	ldw	r3,-12(fp)
 2005f60:	1805fe72 	custom	249,r2,r3,zero
 2005f64:	1000021e 	bne	r2,zero,2005f70 <__kernel_sinf+0x5c>
 2005f68:	e0bffd17 	ldw	r2,-12(fp)
 2005f6c:	00003e06 	br	2006068 <__kernel_sinf+0x154>
	z	=  x*x;
 2005f70:	e0fffd17 	ldw	r3,-12(fp)
 2005f74:	e0bffd17 	ldw	r2,-12(fp)
 2005f78:	1885ff32 	custom	252,r2,r3,r2
 2005f7c:	e0bff915 	stw	r2,-28(fp)
	v	=  z*x;
 2005f80:	e0fff917 	ldw	r3,-28(fp)
 2005f84:	e0bffd17 	ldw	r2,-12(fp)
 2005f88:	1885ff32 	custom	252,r2,r3,r2
 2005f8c:	e0bffa15 	stw	r2,-24(fp)
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 2005f90:	008bcbf4 	movhi	r2,12079
 2005f94:	10b274c4 	addi	r2,r2,-13869
 2005f98:	e0fff917 	ldw	r3,-28(fp)
 2005f9c:	10c7ff32 	custom	252,r3,r2,r3
 2005fa0:	00acb5f4 	movhi	r2,45783
 2005fa4:	108bcd04 	addi	r2,r2,12084
 2005fa8:	1887ff72 	custom	253,r3,r3,r2
 2005fac:	e0bff917 	ldw	r2,-28(fp)
 2005fb0:	1887ff32 	custom	252,r3,r3,r2
 2005fb4:	008d8e74 	movhi	r2,13881
 2005fb8:	10bbc6c4 	addi	r2,r2,-4325
 2005fbc:	1887ff72 	custom	253,r3,r3,r2
 2005fc0:	e0bff917 	ldw	r2,-28(fp)
 2005fc4:	1887ff32 	custom	252,r3,r3,r2
 2005fc8:	00ae5434 	movhi	r2,47440
 2005fcc:	10834044 	addi	r2,r2,3329
 2005fd0:	1887ff72 	custom	253,r3,r3,r2
 2005fd4:	e0bff917 	ldw	r2,-28(fp)
 2005fd8:	1887ff32 	custom	252,r3,r3,r2
 2005fdc:	008f0274 	movhi	r2,15369
 2005fe0:	10a22244 	addi	r2,r2,-30583
 2005fe4:	1885ff72 	custom	253,r2,r3,r2
 2005fe8:	e0bffb15 	stw	r2,-20(fp)
	if(iy==0) return x+v*(S1+z*r);
 2005fec:	e0bfff17 	ldw	r2,-4(fp)
 2005ff0:	10000b1e 	bne	r2,zero,2006020 <__kernel_sinf+0x10c>
 2005ff4:	e0fff917 	ldw	r3,-28(fp)
 2005ff8:	e0bffb17 	ldw	r2,-20(fp)
 2005ffc:	1887ff32 	custom	252,r3,r3,r2
 2006000:	00af8af4 	movhi	r2,48683
 2006004:	10aaaac4 	addi	r2,r2,-21845
 2006008:	1887ff72 	custom	253,r3,r3,r2
 200600c:	e0bffa17 	ldw	r2,-24(fp)
 2006010:	1887ff32 	custom	252,r3,r3,r2
 2006014:	e0bffd17 	ldw	r2,-12(fp)
 2006018:	1885ff72 	custom	253,r2,r3,r2
 200601c:	00001206 	br	2006068 <__kernel_sinf+0x154>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
 2006020:	00cfc034 	movhi	r3,16128
 2006024:	e0bffe17 	ldw	r2,-8(fp)
 2006028:	1887ff32 	custom	252,r3,r3,r2
 200602c:	e13ffa17 	ldw	r4,-24(fp)
 2006030:	e0bffb17 	ldw	r2,-20(fp)
 2006034:	2085ff32 	custom	252,r2,r4,r2
 2006038:	1887ffb2 	custom	254,r3,r3,r2
 200603c:	e0bff917 	ldw	r2,-28(fp)
 2006040:	1887ff32 	custom	252,r3,r3,r2
 2006044:	e0bffe17 	ldw	r2,-8(fp)
 2006048:	1887ffb2 	custom	254,r3,r3,r2
 200604c:	00af8af4 	movhi	r2,48683
 2006050:	10aaaac4 	addi	r2,r2,-21845
 2006054:	e13ffa17 	ldw	r4,-24(fp)
 2006058:	1105ff32 	custom	252,r2,r2,r4
 200605c:	1885ffb2 	custom	254,r2,r3,r2
 2006060:	e0fffd17 	ldw	r3,-12(fp)
 2006064:	1885ffb2 	custom	254,r2,r3,r2
 2006068:	1007883a 	mov	r3,r2
}
 200606c:	1805883a 	mov	r2,r3
 2006070:	e037883a 	mov	sp,fp
 2006074:	df000017 	ldw	fp,0(sp)
 2006078:	dec00104 	addi	sp,sp,4
 200607c:	f800283a 	ret

02006080 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 2006080:	defffc04 	addi	sp,sp,-16
 2006084:	dfc00315 	stw	ra,12(sp)
 2006088:	df000215 	stw	fp,8(sp)
 200608c:	df000204 	addi	fp,sp,8
 2006090:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 2006094:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 2006098:	e13fff17 	ldw	r4,-4(fp)
 200609c:	20800217 	ldw	r2,8(r4)
 20060a0:	20c00317 	ldw	r3,12(r4)
 20060a4:	e1bfff17 	ldw	r6,-4(fp)
 20060a8:	31000217 	ldw	r4,8(r6)
 20060ac:	31400317 	ldw	r5,12(r6)
 20060b0:	200d883a 	mov	r6,r4
 20060b4:	280f883a 	mov	r7,r5
 20060b8:	1009883a 	mov	r4,r2
 20060bc:	180b883a 	mov	r5,r3
 20060c0:	2007be80 	call	2007be8 <__eqdf2>
 20060c4:	10000226 	beq	r2,zero,20060d0 <matherr+0x50>
 20060c8:	0005883a 	mov	r2,zero
 20060cc:	00000106 	br	20060d4 <matherr+0x54>
	return n;
 20060d0:	e0bffe17 	ldw	r2,-8(fp)
}
 20060d4:	e037883a 	mov	sp,fp
 20060d8:	dfc00117 	ldw	ra,4(sp)
 20060dc:	df000017 	ldw	fp,0(sp)
 20060e0:	dec00204 	addi	sp,sp,8
 20060e4:	f800283a 	ret

020060e8 <atanf>:
	float atanf(float x)
#else
	float atanf(x)
	float x;
#endif
{
 20060e8:	defff504 	addi	sp,sp,-44
 20060ec:	dfc00a15 	stw	ra,40(sp)
 20060f0:	df000915 	stw	fp,36(sp)
 20060f4:	df000904 	addi	fp,sp,36
 20060f8:	e13fff15 	stw	r4,-4(fp)
	float w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_FLOAT_WORD(hx,x);
 20060fc:	e0bfff17 	ldw	r2,-4(fp)
 2006100:	e0bffe15 	stw	r2,-8(fp)
 2006104:	e0bffe17 	ldw	r2,-8(fp)
 2006108:	e0bff815 	stw	r2,-32(fp)
	ix = hx&0x7fffffff;
 200610c:	e0fff817 	ldw	r3,-32(fp)
 2006110:	00a00034 	movhi	r2,32768
 2006114:	10bfffc4 	addi	r2,r2,-1
 2006118:	1884703a 	and	r2,r3,r2
 200611c:	e0bff915 	stw	r2,-28(fp)
	if(ix>=0x50800000) {	/* if |x| >= 2^34 */
 2006120:	e0fff917 	ldw	r3,-28(fp)
 2006124:	00942034 	movhi	r2,20608
 2006128:	18801516 	blt	r3,r2,2006180 <atanf+0x98>
	    if(FLT_UWORD_IS_NAN(ix))
 200612c:	e0bff917 	ldw	r2,-28(fp)
 2006130:	00dfe034 	movhi	r3,32640
 2006134:	1880030e 	bge	r3,r2,2006144 <atanf+0x5c>
		return x+x;		/* NaN */
 2006138:	e0bfff17 	ldw	r2,-4(fp)
 200613c:	1085ff72 	custom	253,r2,r2,r2
 2006140:	0000be06 	br	200643c <atanf+0x354>
	    if(hx>0) return  atanhi[3]+atanlo[3];
 2006144:	e0bff817 	ldw	r2,-32(fp)
 2006148:	0080060e 	bge	zero,r2,2006164 <atanf+0x7c>
 200614c:	00cff274 	movhi	r3,16329
 2006150:	18c3f684 	addi	r3,r3,4058
 2006154:	008ce8b4 	movhi	r2,13218
 2006158:	10885a04 	addi	r2,r2,8552
 200615c:	1885ff72 	custom	253,r2,r3,r2
 2006160:	0000b606 	br	200643c <atanf+0x354>
	    else     return -atanhi[3]-atanlo[3];
 2006164:	008ff274 	movhi	r2,16329
 2006168:	1083f684 	addi	r2,r2,4058
 200616c:	1007f872 	custom	225,r3,r2,zero
 2006170:	008ce8b4 	movhi	r2,13218
 2006174:	10885a04 	addi	r2,r2,8552
 2006178:	1885ffb2 	custom	254,r2,r3,r2
 200617c:	0000af06 	br	200643c <atanf+0x354>
	} if (ix < 0x3ee00000) {	/* |x| < 0.4375 */
 2006180:	e0fff917 	ldw	r3,-28(fp)
 2006184:	008fb834 	movhi	r2,16096
 2006188:	18800f0e 	bge	r3,r2,20061c8 <atanf+0xe0>
	    if (ix < 0x31000000) {	/* |x| < 2^-29 */
 200618c:	e0fff917 	ldw	r3,-28(fp)
 2006190:	008c4034 	movhi	r2,12544
 2006194:	1880090e 	bge	r3,r2,20061bc <atanf+0xd4>
		if(huge+x>one) return x;	/* raise inexact */
 2006198:	009c52b4 	movhi	r2,29002
 200619c:	10bcb284 	addi	r2,r2,-3382
 20061a0:	e0ffff17 	ldw	r3,-4(fp)
 20061a4:	10c7ff72 	custom	253,r3,r2,r3
 20061a8:	008fe034 	movhi	r2,16256
 20061ac:	1885f972 	custom	229,r2,r3,r2
 20061b0:	10000226 	beq	r2,zero,20061bc <atanf+0xd4>
 20061b4:	e0bfff17 	ldw	r2,-4(fp)
 20061b8:	0000a006 	br	200643c <atanf+0x354>
	    }
	    id = -1;
 20061bc:	00bfffc4 	movi	r2,-1
 20061c0:	e0bff715 	stw	r2,-36(fp)
 20061c4:	00003506 	br	200629c <atanf+0x1b4>
	} else {
	x = fabsf(x);
 20061c8:	e13fff17 	ldw	r4,-4(fp)
 20061cc:	20064580 	call	2006458 <fabsf>
 20061d0:	e0bfff15 	stw	r2,-4(fp)
	if (ix < 0x3f980000) {		/* |x| < 1.1875 */
 20061d4:	e0fff917 	ldw	r3,-28(fp)
 20061d8:	008fe634 	movhi	r2,16280
 20061dc:	1880190e 	bge	r3,r2,2006244 <atanf+0x15c>
	    if (ix < 0x3f300000) {	/* 7/16 <=|x|<11/16 */
 20061e0:	e0fff917 	ldw	r3,-28(fp)
 20061e4:	008fcc34 	movhi	r2,16176
 20061e8:	18800b0e 	bge	r3,r2,2006218 <atanf+0x130>
		id = 0; x = ((float)2.0*x-one)/((float)2.0+x); 
 20061ec:	e03ff715 	stw	zero,-36(fp)
 20061f0:	e0bfff17 	ldw	r2,-4(fp)
 20061f4:	1087ff72 	custom	253,r3,r2,r2
 20061f8:	008fe034 	movhi	r2,16256
 20061fc:	1887ffb2 	custom	254,r3,r3,r2
 2006200:	e13fff17 	ldw	r4,-4(fp)
 2006204:	00900034 	movhi	r2,16384
 2006208:	2085ff72 	custom	253,r2,r4,r2
 200620c:	1885fff2 	custom	255,r2,r3,r2
 2006210:	e0bfff15 	stw	r2,-4(fp)
 2006214:	00002106 	br	200629c <atanf+0x1b4>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
 2006218:	00800044 	movi	r2,1
 200621c:	e0bff715 	stw	r2,-36(fp)
 2006220:	008fe034 	movhi	r2,16256
 2006224:	e0ffff17 	ldw	r3,-4(fp)
 2006228:	1887ffb2 	custom	254,r3,r3,r2
 200622c:	010fe034 	movhi	r4,16256
 2006230:	e0bfff17 	ldw	r2,-4(fp)
 2006234:	2085ff72 	custom	253,r2,r4,r2
 2006238:	1885fff2 	custom	255,r2,r3,r2
 200623c:	e0bfff15 	stw	r2,-4(fp)
 2006240:	00001606 	br	200629c <atanf+0x1b4>
	    }
	} else {
	    if (ix < 0x401c0000) {	/* |x| < 2.4375 */
 2006244:	e0fff917 	ldw	r3,-28(fp)
 2006248:	00900734 	movhi	r2,16412
 200624c:	18800d0e 	bge	r3,r2,2006284 <atanf+0x19c>
		id = 2; x  = (x-(float)1.5)/(one+(float)1.5*x);
 2006250:	00800084 	movi	r2,2
 2006254:	e0bff715 	stw	r2,-36(fp)
 2006258:	e0ffff17 	ldw	r3,-4(fp)
 200625c:	008ff034 	movhi	r2,16320
 2006260:	1887ffb2 	custom	254,r3,r3,r2
 2006264:	e13fff17 	ldw	r4,-4(fp)
 2006268:	008ff034 	movhi	r2,16320
 200626c:	2089ff32 	custom	252,r4,r4,r2
 2006270:	008fe034 	movhi	r2,16256
 2006274:	2085ff72 	custom	253,r2,r4,r2
 2006278:	1885fff2 	custom	255,r2,r3,r2
 200627c:	e0bfff15 	stw	r2,-4(fp)
 2006280:	00000606 	br	200629c <atanf+0x1b4>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -(float)1.0/x;
 2006284:	008000c4 	movi	r2,3
 2006288:	e0bff715 	stw	r2,-36(fp)
 200628c:	00efe034 	movhi	r3,49024
 2006290:	e0bfff17 	ldw	r2,-4(fp)
 2006294:	1885fff2 	custom	255,r2,r3,r2
 2006298:	e0bfff15 	stw	r2,-4(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
 200629c:	e0ffff17 	ldw	r3,-4(fp)
 20062a0:	e0bfff17 	ldw	r2,-4(fp)
 20062a4:	1885ff32 	custom	252,r2,r3,r2
 20062a8:	e0bffa15 	stw	r2,-24(fp)
	w = z*z;
 20062ac:	e0fffa17 	ldw	r3,-24(fp)
 20062b0:	e0bffa17 	ldw	r2,-24(fp)
 20062b4:	1885ff32 	custom	252,r2,r3,r2
 20062b8:	e0bffb15 	stw	r2,-20(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
 20062bc:	008faaf4 	movhi	r2,16043
 20062c0:	10aaaac4 	addi	r2,r2,-21845
 20062c4:	00cf84b4 	movhi	r3,15890
 20062c8:	18d24944 	addi	r3,r3,18725
 20062cc:	010f6eb4 	movhi	r4,15802
 20062d0:	210b9b84 	addi	r4,r4,11886
 20062d4:	014f6234 	movhi	r5,15752
 20062d8:	295acd44 	addi	r5,r5,27445
 20062dc:	018f5334 	movhi	r6,15692
 20062e0:	31b69644 	addi	r6,r6,-9639
 20062e4:	01cf2174 	movhi	r7,15493
 20062e8:	39da75c4 	addi	r7,r7,27095
 20062ec:	e23ffb17 	ldw	r8,-20(fp)
 20062f0:	3a0fff32 	custom	252,r7,r7,r8
 20062f4:	31cfff72 	custom	253,r7,r6,r7
 20062f8:	e1bffb17 	ldw	r6,-20(fp)
 20062fc:	398dff32 	custom	252,r6,r7,r6
 2006300:	298dff72 	custom	253,r6,r5,r6
 2006304:	e17ffb17 	ldw	r5,-20(fp)
 2006308:	314bff32 	custom	252,r5,r6,r5
 200630c:	214bff72 	custom	253,r5,r4,r5
 2006310:	e13ffb17 	ldw	r4,-20(fp)
 2006314:	2909ff32 	custom	252,r4,r5,r4
 2006318:	1909ff72 	custom	253,r4,r3,r4
 200631c:	e0fffb17 	ldw	r3,-20(fp)
 2006320:	20c7ff32 	custom	252,r3,r4,r3
 2006324:	10c7ff72 	custom	253,r3,r2,r3
 2006328:	e0bffa17 	ldw	r2,-24(fp)
 200632c:	1885ff32 	custom	252,r2,r3,r2
 2006330:	e0bffc15 	stw	r2,-16(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
 2006334:	00af9374 	movhi	r2,48717
 2006338:	10b33344 	addi	r2,r2,-13107
 200633c:	00ef7934 	movhi	r3,48612
 2006340:	18e38e04 	addi	r3,r3,-29128
 2006344:	012f67b4 	movhi	r4,48542
 2006348:	2121e544 	addi	r4,r4,-30827
 200634c:	016f5bf4 	movhi	r5,48495
 2006350:	297c5ac4 	addi	r5,r5,-3733
 2006354:	01af45b4 	movhi	r6,48406
 2006358:	31a88844 	addi	r6,r6,-24031
 200635c:	e1fffb17 	ldw	r7,-20(fp)
 2006360:	31cdff32 	custom	252,r6,r6,r7
 2006364:	298dff72 	custom	253,r6,r5,r6
 2006368:	e17ffb17 	ldw	r5,-20(fp)
 200636c:	314bff32 	custom	252,r5,r6,r5
 2006370:	214bff72 	custom	253,r5,r4,r5
 2006374:	e13ffb17 	ldw	r4,-20(fp)
 2006378:	2909ff32 	custom	252,r4,r5,r4
 200637c:	1909ff72 	custom	253,r4,r3,r4
 2006380:	e0fffb17 	ldw	r3,-20(fp)
 2006384:	20c7ff32 	custom	252,r3,r4,r3
 2006388:	10c7ff72 	custom	253,r3,r2,r3
 200638c:	e0bffb17 	ldw	r2,-20(fp)
 2006390:	1885ff32 	custom	252,r2,r3,r2
 2006394:	e0bffd15 	stw	r2,-12(fp)
	if (id<0) return x - x*(s1+s2);
 2006398:	e0bff717 	ldw	r2,-36(fp)
 200639c:	1000080e 	bge	r2,zero,20063c0 <atanf+0x2d8>
 20063a0:	e0fffc17 	ldw	r3,-16(fp)
 20063a4:	e0bffd17 	ldw	r2,-12(fp)
 20063a8:	1887ff72 	custom	253,r3,r3,r2
 20063ac:	e0bfff17 	ldw	r2,-4(fp)
 20063b0:	1885ff32 	custom	252,r2,r3,r2
 20063b4:	e0ffff17 	ldw	r3,-4(fp)
 20063b8:	1885ffb2 	custom	254,r2,r3,r2
 20063bc:	00001f06 	br	200643c <atanf+0x354>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
 20063c0:	008080b4 	movhi	r2,514
 20063c4:	10890f04 	addi	r2,r2,9276
 20063c8:	e0fff717 	ldw	r3,-36(fp)
 20063cc:	18c7883a 	add	r3,r3,r3
 20063d0:	18c7883a 	add	r3,r3,r3
 20063d4:	10c5883a 	add	r2,r2,r3
 20063d8:	11000017 	ldw	r4,0(r2)
 20063dc:	e0fffc17 	ldw	r3,-16(fp)
 20063e0:	e0bffd17 	ldw	r2,-12(fp)
 20063e4:	1887ff72 	custom	253,r3,r3,r2
 20063e8:	e0bfff17 	ldw	r2,-4(fp)
 20063ec:	188bff32 	custom	252,r5,r3,r2
 20063f0:	008080b4 	movhi	r2,514
 20063f4:	10891304 	addi	r2,r2,9292
 20063f8:	e0fff717 	ldw	r3,-36(fp)
 20063fc:	18c7883a 	add	r3,r3,r3
 2006400:	18c7883a 	add	r3,r3,r3
 2006404:	10c7883a 	add	r3,r2,r3
 2006408:	18800017 	ldw	r2,0(r3)
 200640c:	2887ffb2 	custom	254,r3,r5,r2
 2006410:	e0bfff17 	ldw	r2,-4(fp)
 2006414:	1885ffb2 	custom	254,r2,r3,r2
 2006418:	2085ffb2 	custom	254,r2,r4,r2
 200641c:	e0bffa15 	stw	r2,-24(fp)
	    return (hx<0)? -z:z;
 2006420:	e0bff817 	ldw	r2,-32(fp)
 2006424:	1000030e 	bge	r2,zero,2006434 <atanf+0x34c>
 2006428:	e0bffa17 	ldw	r2,-24(fp)
 200642c:	1005f872 	custom	225,r2,r2,zero
 2006430:	00000106 	br	2006438 <atanf+0x350>
 2006434:	e0bffa17 	ldw	r2,-24(fp)
 2006438:	0001883a 	nop
 200643c:	1007883a 	mov	r3,r2
	}
}
 2006440:	1805883a 	mov	r2,r3
 2006444:	e037883a 	mov	sp,fp
 2006448:	dfc00117 	ldw	ra,4(sp)
 200644c:	df000017 	ldw	fp,0(sp)
 2006450:	dec00204 	addi	sp,sp,8
 2006454:	f800283a 	ret

02006458 <fabsf>:
	float fabsf(float x)
#else
	float fabsf(x)
	float x;
#endif
{
 2006458:	defffb04 	addi	sp,sp,-20
 200645c:	df000415 	stw	fp,16(sp)
 2006460:	df000404 	addi	fp,sp,16
 2006464:	e13fff15 	stw	r4,-4(fp)
	__uint32_t ix;
	GET_FLOAT_WORD(ix,x);
 2006468:	e0bfff17 	ldw	r2,-4(fp)
 200646c:	e0bffd15 	stw	r2,-12(fp)
 2006470:	e0bffd17 	ldw	r2,-12(fp)
 2006474:	e0bffc15 	stw	r2,-16(fp)
	SET_FLOAT_WORD(x,ix&0x7fffffff);
 2006478:	e0fffc17 	ldw	r3,-16(fp)
 200647c:	00a00034 	movhi	r2,32768
 2006480:	10bfffc4 	addi	r2,r2,-1
 2006484:	1884703a 	and	r2,r3,r2
 2006488:	e0bffe15 	stw	r2,-8(fp)
 200648c:	e0bffe17 	ldw	r2,-8(fp)
 2006490:	e0bfff15 	stw	r2,-4(fp)
        return x;
 2006494:	e0bfff17 	ldw	r2,-4(fp)
 2006498:	1007883a 	mov	r3,r2
}
 200649c:	1805883a 	mov	r2,r3
 20064a0:	e037883a 	mov	sp,fp
 20064a4:	df000017 	ldw	fp,0(sp)
 20064a8:	dec00104 	addi	sp,sp,4
 20064ac:	f800283a 	ret

020064b0 <floorf>:
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 20064b0:	defff804 	addi	sp,sp,-32
 20064b4:	df000715 	stw	fp,28(sp)
 20064b8:	df000704 	addi	fp,sp,28
 20064bc:	e13fff15 	stw	r4,-4(fp)
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 20064c0:	e0bfff17 	ldw	r2,-4(fp)
 20064c4:	e0bffd15 	stw	r2,-12(fp)
 20064c8:	e0bffd17 	ldw	r2,-12(fp)
 20064cc:	e0bff915 	stw	r2,-28(fp)
	ix = (i0&0x7fffffff);
 20064d0:	e0fff917 	ldw	r3,-28(fp)
 20064d4:	00a00034 	movhi	r2,32768
 20064d8:	10bfffc4 	addi	r2,r2,-1
 20064dc:	1884703a 	and	r2,r3,r2
 20064e0:	e0bffa15 	stw	r2,-24(fp)
	j0 = (ix>>23)-0x7f;
 20064e4:	e0bffa17 	ldw	r2,-24(fp)
 20064e8:	1004d5fa 	srli	r2,r2,23
 20064ec:	10bfe044 	addi	r2,r2,-127
 20064f0:	e0bffb15 	stw	r2,-20(fp)
	if(j0<23) {
 20064f4:	e0bffb17 	ldw	r2,-20(fp)
 20064f8:	108005c8 	cmpgei	r2,r2,23
 20064fc:	1000321e 	bne	r2,zero,20065c8 <floorf+0x118>
	    if(j0<0) { 	/* raise inexact if x != 0 */
 2006500:	e0bffb17 	ldw	r2,-20(fp)
 2006504:	1000100e 	bge	r2,zero,2006548 <floorf+0x98>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
 2006508:	009c52b4 	movhi	r2,29002
 200650c:	10bcb284 	addi	r2,r2,-3382
 2006510:	e0ffff17 	ldw	r3,-4(fp)
 2006514:	10c5ff72 	custom	253,r2,r2,r3
 2006518:	0007883a 	mov	r3,zero
 200651c:	10c5f972 	custom	229,r2,r2,r3
 2006520:	10003126 	beq	r2,zero,20065e8 <floorf+0x138>
		    if(i0>=0) {i0=0;} 
 2006524:	e0bff917 	ldw	r2,-28(fp)
 2006528:	10000216 	blt	r2,zero,2006534 <floorf+0x84>
 200652c:	e03ff915 	stw	zero,-28(fp)
 2006530:	00002d06 	br	20065e8 <floorf+0x138>
		    else if(!FLT_UWORD_IS_ZERO(ix))
 2006534:	e0bffa17 	ldw	r2,-24(fp)
 2006538:	10002b26 	beq	r2,zero,20065e8 <floorf+0x138>
			{ i0=0xbf800000;}
 200653c:	00afe034 	movhi	r2,49024
 2006540:	e0bff915 	stw	r2,-28(fp)
 2006544:	00002806 	br	20065e8 <floorf+0x138>
		}
	    } else {
		i = (0x007fffff)>>j0;
 2006548:	00802034 	movhi	r2,128
 200654c:	10bfffc4 	addi	r2,r2,-1
 2006550:	e0fffb17 	ldw	r3,-20(fp)
 2006554:	10c5d83a 	sra	r2,r2,r3
 2006558:	e0bffc15 	stw	r2,-16(fp)
		if((i0&i)==0) return x; /* x is integral */
 200655c:	e0fff917 	ldw	r3,-28(fp)
 2006560:	e0bffc17 	ldw	r2,-16(fp)
 2006564:	1884703a 	and	r2,r3,r2
 2006568:	1000021e 	bne	r2,zero,2006574 <floorf+0xc4>
 200656c:	e0bfff17 	ldw	r2,-4(fp)
 2006570:	00002206 	br	20065fc <floorf+0x14c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
 2006574:	009c52b4 	movhi	r2,29002
 2006578:	10bcb284 	addi	r2,r2,-3382
 200657c:	e0ffff17 	ldw	r3,-4(fp)
 2006580:	10c5ff72 	custom	253,r2,r2,r3
 2006584:	0007883a 	mov	r3,zero
 2006588:	10c5f972 	custom	229,r2,r2,r3
 200658c:	10001626 	beq	r2,zero,20065e8 <floorf+0x138>
		    if(i0<0) i0 += (0x00800000)>>j0;
 2006590:	e0bff917 	ldw	r2,-28(fp)
 2006594:	1000060e 	bge	r2,zero,20065b0 <floorf+0x100>
 2006598:	00c02034 	movhi	r3,128
 200659c:	e0bffb17 	ldw	r2,-20(fp)
 20065a0:	1885d83a 	sra	r2,r3,r2
 20065a4:	e0fff917 	ldw	r3,-28(fp)
 20065a8:	1885883a 	add	r2,r3,r2
 20065ac:	e0bff915 	stw	r2,-28(fp)
		    i0 &= (~i);
 20065b0:	e0bffc17 	ldw	r2,-16(fp)
 20065b4:	0086303a 	nor	r3,zero,r2
 20065b8:	e0bff917 	ldw	r2,-28(fp)
 20065bc:	1884703a 	and	r2,r3,r2
 20065c0:	e0bff915 	stw	r2,-28(fp)
 20065c4:	00000806 	br	20065e8 <floorf+0x138>
		}
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
 20065c8:	e0fffa17 	ldw	r3,-24(fp)
 20065cc:	009fe034 	movhi	r2,32640
 20065d0:	18800336 	bltu	r3,r2,20065e0 <floorf+0x130>
 20065d4:	e0bfff17 	ldw	r2,-4(fp)
 20065d8:	1085ff72 	custom	253,r2,r2,r2
 20065dc:	00000706 	br	20065fc <floorf+0x14c>
	    else return x;		/* x is integral */
 20065e0:	e0bfff17 	ldw	r2,-4(fp)
 20065e4:	00000506 	br	20065fc <floorf+0x14c>
	}
	SET_FLOAT_WORD(x,i0);
 20065e8:	e0bff917 	ldw	r2,-28(fp)
 20065ec:	e0bffe15 	stw	r2,-8(fp)
 20065f0:	e0bffe17 	ldw	r2,-8(fp)
 20065f4:	e0bfff15 	stw	r2,-4(fp)
	return x;
 20065f8:	e0bfff17 	ldw	r2,-4(fp)
 20065fc:	1007883a 	mov	r3,r2
}
 2006600:	1805883a 	mov	r2,r3
 2006604:	e037883a 	mov	sp,fp
 2006608:	df000017 	ldw	fp,0(sp)
 200660c:	dec00104 	addi	sp,sp,4
 2006610:	f800283a 	ret

02006614 <scalbnf>:
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 2006614:	defff504 	addi	sp,sp,-44
 2006618:	dfc00a15 	stw	ra,40(sp)
 200661c:	df000915 	stw	fp,36(sp)
 2006620:	df000904 	addi	fp,sp,36
 2006624:	e13ffe15 	stw	r4,-8(fp)
 2006628:	e17fff15 	stw	r5,-4(fp)
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
 200662c:	e0bffe17 	ldw	r2,-8(fp)
 2006630:	e0bffa15 	stw	r2,-24(fp)
 2006634:	e0bffa17 	ldw	r2,-24(fp)
 2006638:	e0bff815 	stw	r2,-32(fp)
	hx = ix&0x7fffffff;
 200663c:	e0fff817 	ldw	r3,-32(fp)
 2006640:	00a00034 	movhi	r2,32768
 2006644:	10bfffc4 	addi	r2,r2,-1
 2006648:	1884703a 	and	r2,r3,r2
 200664c:	e0bff915 	stw	r2,-28(fp)
        k = hx>>23;		/* extract exponent */
 2006650:	e0bff917 	ldw	r2,-28(fp)
 2006654:	1004d5fa 	srli	r2,r2,23
 2006658:	e0bff715 	stw	r2,-36(fp)
	if (FLT_UWORD_IS_ZERO(hx))
 200665c:	e0bff917 	ldw	r2,-28(fp)
 2006660:	1000021e 	bne	r2,zero,200666c <scalbnf+0x58>
	    return x;
 2006664:	e0bffe17 	ldw	r2,-8(fp)
 2006668:	00006806 	br	200680c <scalbnf+0x1f8>
        if (!FLT_UWORD_IS_FINITE(hx))
 200666c:	e0fff917 	ldw	r3,-28(fp)
 2006670:	009fe034 	movhi	r2,32640
 2006674:	18800336 	bltu	r3,r2,2006684 <scalbnf+0x70>
	    return x+x;		/* NaN or Inf */
 2006678:	e0bffe17 	ldw	r2,-8(fp)
 200667c:	1085ff72 	custom	253,r2,r2,r2
 2006680:	00006206 	br	200680c <scalbnf+0x1f8>
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
 2006684:	e0fff917 	ldw	r3,-28(fp)
 2006688:	00802034 	movhi	r2,128
 200668c:	1880162e 	bgeu	r3,r2,20066e8 <scalbnf+0xd4>
	    x *= two25;
 2006690:	00930034 	movhi	r2,19456
 2006694:	e0fffe17 	ldw	r3,-8(fp)
 2006698:	1885ff32 	custom	252,r2,r3,r2
 200669c:	e0bffe15 	stw	r2,-8(fp)
	    GET_FLOAT_WORD(ix,x);
 20066a0:	e0bffe17 	ldw	r2,-8(fp)
 20066a4:	e0bffb15 	stw	r2,-20(fp)
 20066a8:	e0bffb17 	ldw	r2,-20(fp)
 20066ac:	e0bff815 	stw	r2,-32(fp)
	    k = ((ix&0x7f800000)>>23) - 25; 
 20066b0:	e0bff817 	ldw	r2,-32(fp)
 20066b4:	109fe02c 	andhi	r2,r2,32640
 20066b8:	1005d5fa 	srai	r2,r2,23
 20066bc:	10bff9c4 	addi	r2,r2,-25
 20066c0:	e0bff715 	stw	r2,-36(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
 20066c4:	e0ffff17 	ldw	r3,-4(fp)
 20066c8:	00bffff4 	movhi	r2,65535
 20066cc:	108f2c04 	addi	r2,r2,15536
 20066d0:	1880050e 	bge	r3,r2,20066e8 <scalbnf+0xd4>
 20066d4:	008368b4 	movhi	r2,3490
 20066d8:	10909804 	addi	r2,r2,16992
 20066dc:	e0fffe17 	ldw	r3,-8(fp)
 20066e0:	10c5ff32 	custom	252,r2,r2,r3
 20066e4:	00004906 	br	200680c <scalbnf+0x1f8>
        }
        k = k+n; 
 20066e8:	e0fff717 	ldw	r3,-36(fp)
 20066ec:	e0bfff17 	ldw	r2,-4(fp)
 20066f0:	1885883a 	add	r2,r3,r2
 20066f4:	e0bff715 	stw	r2,-36(fp)
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
 20066f8:	e0bff717 	ldw	r2,-36(fp)
 20066fc:	10803fd0 	cmplti	r2,r2,255
 2006700:	10000a1e 	bne	r2,zero,200672c <scalbnf+0x118>
 2006704:	009c52b4 	movhi	r2,29002
 2006708:	10bcb284 	addi	r2,r2,-3382
 200670c:	e17ffe17 	ldw	r5,-8(fp)
 2006710:	1009883a 	mov	r4,r2
 2006714:	20068280 	call	2006828 <copysignf>
 2006718:	1007883a 	mov	r3,r2
 200671c:	009c52b4 	movhi	r2,29002
 2006720:	10bcb284 	addi	r2,r2,-3382
 2006724:	1885ff32 	custom	252,r2,r3,r2
 2006728:	00003806 	br	200680c <scalbnf+0x1f8>
        if (k > 0) 				/* normal result */
 200672c:	e0bff717 	ldw	r2,-36(fp)
 2006730:	00800c0e 	bge	zero,r2,2006764 <scalbnf+0x150>
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
 2006734:	e0fff817 	ldw	r3,-32(fp)
 2006738:	00a02034 	movhi	r2,32896
 200673c:	10bfffc4 	addi	r2,r2,-1
 2006740:	1884703a 	and	r2,r3,r2
 2006744:	e0fff717 	ldw	r3,-36(fp)
 2006748:	180695fa 	slli	r3,r3,23
 200674c:	10c4b03a 	or	r2,r2,r3
 2006750:	e0bffc15 	stw	r2,-16(fp)
 2006754:	e0bffc17 	ldw	r2,-16(fp)
 2006758:	e0bffe15 	stw	r2,-8(fp)
 200675c:	e0bffe17 	ldw	r2,-8(fp)
 2006760:	00002a06 	br	200680c <scalbnf+0x1f8>
        if (k < FLT_SMALLEST_EXP) {
 2006764:	e0bff717 	ldw	r2,-36(fp)
 2006768:	10bffa88 	cmpgei	r2,r2,-22
 200676c:	1000171e 	bne	r2,zero,20067cc <scalbnf+0x1b8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
 2006770:	e0bfff17 	ldw	r2,-4(fp)
 2006774:	00f0d414 	movui	r3,50000
 2006778:	18800a0e 	bge	r3,r2,20067a4 <scalbnf+0x190>
		return huge*copysignf(huge,x);	/*overflow*/
 200677c:	009c52b4 	movhi	r2,29002
 2006780:	10bcb284 	addi	r2,r2,-3382
 2006784:	e17ffe17 	ldw	r5,-8(fp)
 2006788:	1009883a 	mov	r4,r2
 200678c:	20068280 	call	2006828 <copysignf>
 2006790:	1007883a 	mov	r3,r2
 2006794:	009c52b4 	movhi	r2,29002
 2006798:	10bcb284 	addi	r2,r2,-3382
 200679c:	1885ff32 	custom	252,r2,r3,r2
 20067a0:	00001a06 	br	200680c <scalbnf+0x1f8>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
 20067a4:	008368b4 	movhi	r2,3490
 20067a8:	10909804 	addi	r2,r2,16992
 20067ac:	e17ffe17 	ldw	r5,-8(fp)
 20067b0:	1009883a 	mov	r4,r2
 20067b4:	20068280 	call	2006828 <copysignf>
 20067b8:	1007883a 	mov	r3,r2
 20067bc:	008368b4 	movhi	r2,3490
 20067c0:	10909804 	addi	r2,r2,16992
 20067c4:	1885ff32 	custom	252,r2,r3,r2
 20067c8:	00001006 	br	200680c <scalbnf+0x1f8>
        }
        k += 25;				/* subnormal result */
 20067cc:	e0bff717 	ldw	r2,-36(fp)
 20067d0:	10800644 	addi	r2,r2,25
 20067d4:	e0bff715 	stw	r2,-36(fp)
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 20067d8:	e0fff817 	ldw	r3,-32(fp)
 20067dc:	00a02034 	movhi	r2,32896
 20067e0:	10bfffc4 	addi	r2,r2,-1
 20067e4:	1884703a 	and	r2,r3,r2
 20067e8:	e0fff717 	ldw	r3,-36(fp)
 20067ec:	180695fa 	slli	r3,r3,23
 20067f0:	10c4b03a 	or	r2,r2,r3
 20067f4:	e0bffd15 	stw	r2,-12(fp)
 20067f8:	e0bffd17 	ldw	r2,-12(fp)
 20067fc:	e0bffe15 	stw	r2,-8(fp)
        return x*twom25;
 2006800:	00ccc034 	movhi	r3,13056
 2006804:	e0bffe17 	ldw	r2,-8(fp)
 2006808:	1885ff32 	custom	252,r2,r3,r2
 200680c:	1007883a 	mov	r3,r2
}
 2006810:	1805883a 	mov	r2,r3
 2006814:	e037883a 	mov	sp,fp
 2006818:	dfc00117 	ldw	ra,4(sp)
 200681c:	df000017 	ldw	fp,0(sp)
 2006820:	dec00204 	addi	sp,sp,8
 2006824:	f800283a 	ret

02006828 <copysignf>:
	float copysignf(float x, float y)
#else
	float copysignf(x,y)
	float x,y;
#endif
{
 2006828:	defff804 	addi	sp,sp,-32
 200682c:	df000715 	stw	fp,28(sp)
 2006830:	df000704 	addi	fp,sp,28
 2006834:	e13ffe15 	stw	r4,-8(fp)
 2006838:	e17fff15 	stw	r5,-4(fp)
	__uint32_t ix,iy;
	GET_FLOAT_WORD(ix,x);
 200683c:	e0bffe17 	ldw	r2,-8(fp)
 2006840:	e0bffb15 	stw	r2,-20(fp)
 2006844:	e0bffb17 	ldw	r2,-20(fp)
 2006848:	e0bff915 	stw	r2,-28(fp)
	GET_FLOAT_WORD(iy,y);
 200684c:	e0bfff17 	ldw	r2,-4(fp)
 2006850:	e0bffc15 	stw	r2,-16(fp)
 2006854:	e0bffc17 	ldw	r2,-16(fp)
 2006858:	e0bffa15 	stw	r2,-24(fp)
	SET_FLOAT_WORD(x,(ix&0x7fffffff)|(iy&0x80000000));
 200685c:	e0fff917 	ldw	r3,-28(fp)
 2006860:	00a00034 	movhi	r2,32768
 2006864:	10bfffc4 	addi	r2,r2,-1
 2006868:	1886703a 	and	r3,r3,r2
 200686c:	e0bffa17 	ldw	r2,-24(fp)
 2006870:	10a0002c 	andhi	r2,r2,32768
 2006874:	1884b03a 	or	r2,r3,r2
 2006878:	e0bffd15 	stw	r2,-12(fp)
 200687c:	e0bffd17 	ldw	r2,-12(fp)
 2006880:	e0bffe15 	stw	r2,-8(fp)
        return x;
 2006884:	e0bffe17 	ldw	r2,-8(fp)
 2006888:	1007883a 	mov	r3,r2
}
 200688c:	1805883a 	mov	r2,r3
 2006890:	e037883a 	mov	sp,fp
 2006894:	df000017 	ldw	fp,0(sp)
 2006898:	dec00104 	addi	sp,sp,4
 200689c:	f800283a 	ret

020068a0 <__divsi3>:
 20068a0:	20001b16 	blt	r4,zero,2006910 <__divsi3+0x70>
 20068a4:	000f883a 	mov	r7,zero
 20068a8:	28001616 	blt	r5,zero,2006904 <__divsi3+0x64>
 20068ac:	200d883a 	mov	r6,r4
 20068b0:	29001a2e 	bgeu	r5,r4,200691c <__divsi3+0x7c>
 20068b4:	00800804 	movi	r2,32
 20068b8:	00c00044 	movi	r3,1
 20068bc:	00000106 	br	20068c4 <__divsi3+0x24>
 20068c0:	10000d26 	beq	r2,zero,20068f8 <__divsi3+0x58>
 20068c4:	294b883a 	add	r5,r5,r5
 20068c8:	10bfffc4 	addi	r2,r2,-1
 20068cc:	18c7883a 	add	r3,r3,r3
 20068d0:	293ffb36 	bltu	r5,r4,20068c0 <__divsi3+0x20>
 20068d4:	0005883a 	mov	r2,zero
 20068d8:	18000726 	beq	r3,zero,20068f8 <__divsi3+0x58>
 20068dc:	0005883a 	mov	r2,zero
 20068e0:	31400236 	bltu	r6,r5,20068ec <__divsi3+0x4c>
 20068e4:	314dc83a 	sub	r6,r6,r5
 20068e8:	10c4b03a 	or	r2,r2,r3
 20068ec:	1806d07a 	srli	r3,r3,1
 20068f0:	280ad07a 	srli	r5,r5,1
 20068f4:	183ffa1e 	bne	r3,zero,20068e0 <__divsi3+0x40>
 20068f8:	38000126 	beq	r7,zero,2006900 <__divsi3+0x60>
 20068fc:	0085c83a 	sub	r2,zero,r2
 2006900:	f800283a 	ret
 2006904:	014bc83a 	sub	r5,zero,r5
 2006908:	39c0005c 	xori	r7,r7,1
 200690c:	003fe706 	br	20068ac <__divsi3+0xc>
 2006910:	0109c83a 	sub	r4,zero,r4
 2006914:	01c00044 	movi	r7,1
 2006918:	003fe306 	br	20068a8 <__divsi3+0x8>
 200691c:	00c00044 	movi	r3,1
 2006920:	003fee06 	br	20068dc <__divsi3+0x3c>

02006924 <__modsi3>:
 2006924:	20001716 	blt	r4,zero,2006984 <__modsi3+0x60>
 2006928:	000f883a 	mov	r7,zero
 200692c:	2005883a 	mov	r2,r4
 2006930:	28001216 	blt	r5,zero,200697c <__modsi3+0x58>
 2006934:	2900162e 	bgeu	r5,r4,2006990 <__modsi3+0x6c>
 2006938:	01800804 	movi	r6,32
 200693c:	00c00044 	movi	r3,1
 2006940:	00000106 	br	2006948 <__modsi3+0x24>
 2006944:	30000a26 	beq	r6,zero,2006970 <__modsi3+0x4c>
 2006948:	294b883a 	add	r5,r5,r5
 200694c:	31bfffc4 	addi	r6,r6,-1
 2006950:	18c7883a 	add	r3,r3,r3
 2006954:	293ffb36 	bltu	r5,r4,2006944 <__modsi3+0x20>
 2006958:	18000526 	beq	r3,zero,2006970 <__modsi3+0x4c>
 200695c:	1806d07a 	srli	r3,r3,1
 2006960:	11400136 	bltu	r2,r5,2006968 <__modsi3+0x44>
 2006964:	1145c83a 	sub	r2,r2,r5
 2006968:	280ad07a 	srli	r5,r5,1
 200696c:	183ffb1e 	bne	r3,zero,200695c <__modsi3+0x38>
 2006970:	38000126 	beq	r7,zero,2006978 <__modsi3+0x54>
 2006974:	0085c83a 	sub	r2,zero,r2
 2006978:	f800283a 	ret
 200697c:	014bc83a 	sub	r5,zero,r5
 2006980:	003fec06 	br	2006934 <__modsi3+0x10>
 2006984:	0109c83a 	sub	r4,zero,r4
 2006988:	01c00044 	movi	r7,1
 200698c:	003fe706 	br	200692c <__modsi3+0x8>
 2006990:	00c00044 	movi	r3,1
 2006994:	003ff106 	br	200695c <__modsi3+0x38>

02006998 <__udivsi3>:
 2006998:	200d883a 	mov	r6,r4
 200699c:	2900152e 	bgeu	r5,r4,20069f4 <__udivsi3+0x5c>
 20069a0:	28001416 	blt	r5,zero,20069f4 <__udivsi3+0x5c>
 20069a4:	00800804 	movi	r2,32
 20069a8:	00c00044 	movi	r3,1
 20069ac:	00000206 	br	20069b8 <__udivsi3+0x20>
 20069b0:	10000e26 	beq	r2,zero,20069ec <__udivsi3+0x54>
 20069b4:	28000516 	blt	r5,zero,20069cc <__udivsi3+0x34>
 20069b8:	294b883a 	add	r5,r5,r5
 20069bc:	10bfffc4 	addi	r2,r2,-1
 20069c0:	18c7883a 	add	r3,r3,r3
 20069c4:	293ffa36 	bltu	r5,r4,20069b0 <__udivsi3+0x18>
 20069c8:	18000826 	beq	r3,zero,20069ec <__udivsi3+0x54>
 20069cc:	0005883a 	mov	r2,zero
 20069d0:	31400236 	bltu	r6,r5,20069dc <__udivsi3+0x44>
 20069d4:	314dc83a 	sub	r6,r6,r5
 20069d8:	10c4b03a 	or	r2,r2,r3
 20069dc:	1806d07a 	srli	r3,r3,1
 20069e0:	280ad07a 	srli	r5,r5,1
 20069e4:	183ffa1e 	bne	r3,zero,20069d0 <__udivsi3+0x38>
 20069e8:	f800283a 	ret
 20069ec:	0005883a 	mov	r2,zero
 20069f0:	f800283a 	ret
 20069f4:	00c00044 	movi	r3,1
 20069f8:	003ff406 	br	20069cc <__udivsi3+0x34>

020069fc <__umodsi3>:
 20069fc:	2005883a 	mov	r2,r4
 2006a00:	2900122e 	bgeu	r5,r4,2006a4c <__umodsi3+0x50>
 2006a04:	28001116 	blt	r5,zero,2006a4c <__umodsi3+0x50>
 2006a08:	01800804 	movi	r6,32
 2006a0c:	00c00044 	movi	r3,1
 2006a10:	00000206 	br	2006a1c <__umodsi3+0x20>
 2006a14:	30000c26 	beq	r6,zero,2006a48 <__umodsi3+0x4c>
 2006a18:	28000516 	blt	r5,zero,2006a30 <__umodsi3+0x34>
 2006a1c:	294b883a 	add	r5,r5,r5
 2006a20:	31bfffc4 	addi	r6,r6,-1
 2006a24:	18c7883a 	add	r3,r3,r3
 2006a28:	293ffa36 	bltu	r5,r4,2006a14 <__umodsi3+0x18>
 2006a2c:	18000626 	beq	r3,zero,2006a48 <__umodsi3+0x4c>
 2006a30:	1806d07a 	srli	r3,r3,1
 2006a34:	11400136 	bltu	r2,r5,2006a3c <__umodsi3+0x40>
 2006a38:	1145c83a 	sub	r2,r2,r5
 2006a3c:	280ad07a 	srli	r5,r5,1
 2006a40:	183ffb1e 	bne	r3,zero,2006a30 <__umodsi3+0x34>
 2006a44:	f800283a 	ret
 2006a48:	f800283a 	ret
 2006a4c:	00c00044 	movi	r3,1
 2006a50:	003ff706 	br	2006a30 <__umodsi3+0x34>

02006a54 <__adddf3>:
 2006a54:	02c00434 	movhi	r11,16
 2006a58:	5affffc4 	addi	r11,r11,-1
 2006a5c:	2806d7fa 	srli	r3,r5,31
 2006a60:	2ad4703a 	and	r10,r5,r11
 2006a64:	3ad2703a 	and	r9,r7,r11
 2006a68:	3804d53a 	srli	r2,r7,20
 2006a6c:	3018d77a 	srli	r12,r6,29
 2006a70:	280ad53a 	srli	r5,r5,20
 2006a74:	501490fa 	slli	r10,r10,3
 2006a78:	2010d77a 	srli	r8,r4,29
 2006a7c:	481290fa 	slli	r9,r9,3
 2006a80:	380ed7fa 	srli	r7,r7,31
 2006a84:	defffb04 	addi	sp,sp,-20
 2006a88:	dc800215 	stw	r18,8(sp)
 2006a8c:	dc400115 	stw	r17,4(sp)
 2006a90:	dc000015 	stw	r16,0(sp)
 2006a94:	dfc00415 	stw	ra,16(sp)
 2006a98:	dcc00315 	stw	r19,12(sp)
 2006a9c:	1c803fcc 	andi	r18,r3,255
 2006aa0:	2c01ffcc 	andi	r16,r5,2047
 2006aa4:	5210b03a 	or	r8,r10,r8
 2006aa8:	202290fa 	slli	r17,r4,3
 2006aac:	1081ffcc 	andi	r2,r2,2047
 2006ab0:	4b12b03a 	or	r9,r9,r12
 2006ab4:	300c90fa 	slli	r6,r6,3
 2006ab8:	91c07526 	beq	r18,r7,2006c90 <__adddf3+0x23c>
 2006abc:	8087c83a 	sub	r3,r16,r2
 2006ac0:	00c0ab0e 	bge	zero,r3,2006d70 <__adddf3+0x31c>
 2006ac4:	10002a1e 	bne	r2,zero,2006b70 <__adddf3+0x11c>
 2006ac8:	4984b03a 	or	r2,r9,r6
 2006acc:	1000961e 	bne	r2,zero,2006d28 <__adddf3+0x2d4>
 2006ad0:	888001cc 	andi	r2,r17,7
 2006ad4:	10000726 	beq	r2,zero,2006af4 <__adddf3+0xa0>
 2006ad8:	888003cc 	andi	r2,r17,15
 2006adc:	00c00104 	movi	r3,4
 2006ae0:	10c00426 	beq	r2,r3,2006af4 <__adddf3+0xa0>
 2006ae4:	88c7883a 	add	r3,r17,r3
 2006ae8:	1c63803a 	cmpltu	r17,r3,r17
 2006aec:	4451883a 	add	r8,r8,r17
 2006af0:	1823883a 	mov	r17,r3
 2006af4:	4080202c 	andhi	r2,r8,128
 2006af8:	10005926 	beq	r2,zero,2006c60 <__adddf3+0x20c>
 2006afc:	84000044 	addi	r16,r16,1
 2006b00:	0081ffc4 	movi	r2,2047
 2006b04:	8080ba26 	beq	r16,r2,2006df0 <__adddf3+0x39c>
 2006b08:	00bfe034 	movhi	r2,65408
 2006b0c:	10bfffc4 	addi	r2,r2,-1
 2006b10:	4090703a 	and	r8,r8,r2
 2006b14:	4004977a 	slli	r2,r8,29
 2006b18:	4010927a 	slli	r8,r8,9
 2006b1c:	8822d0fa 	srli	r17,r17,3
 2006b20:	8401ffcc 	andi	r16,r16,2047
 2006b24:	4010d33a 	srli	r8,r8,12
 2006b28:	9007883a 	mov	r3,r18
 2006b2c:	1444b03a 	or	r2,r2,r17
 2006b30:	8401ffcc 	andi	r16,r16,2047
 2006b34:	8020953a 	slli	r16,r16,20
 2006b38:	18c03fcc 	andi	r3,r3,255
 2006b3c:	01000434 	movhi	r4,16
 2006b40:	213fffc4 	addi	r4,r4,-1
 2006b44:	180697fa 	slli	r3,r3,31
 2006b48:	4110703a 	and	r8,r8,r4
 2006b4c:	4410b03a 	or	r8,r8,r16
 2006b50:	40c6b03a 	or	r3,r8,r3
 2006b54:	dfc00417 	ldw	ra,16(sp)
 2006b58:	dcc00317 	ldw	r19,12(sp)
 2006b5c:	dc800217 	ldw	r18,8(sp)
 2006b60:	dc400117 	ldw	r17,4(sp)
 2006b64:	dc000017 	ldw	r16,0(sp)
 2006b68:	dec00504 	addi	sp,sp,20
 2006b6c:	f800283a 	ret
 2006b70:	0081ffc4 	movi	r2,2047
 2006b74:	80bfd626 	beq	r16,r2,2006ad0 <__adddf3+0x7c>
 2006b78:	4a402034 	orhi	r9,r9,128
 2006b7c:	00800e04 	movi	r2,56
 2006b80:	10c09f16 	blt	r2,r3,2006e00 <__adddf3+0x3ac>
 2006b84:	008007c4 	movi	r2,31
 2006b88:	10c0c216 	blt	r2,r3,2006e94 <__adddf3+0x440>
 2006b8c:	00800804 	movi	r2,32
 2006b90:	10c5c83a 	sub	r2,r2,r3
 2006b94:	488a983a 	sll	r5,r9,r2
 2006b98:	30c8d83a 	srl	r4,r6,r3
 2006b9c:	3084983a 	sll	r2,r6,r2
 2006ba0:	48c6d83a 	srl	r3,r9,r3
 2006ba4:	290cb03a 	or	r6,r5,r4
 2006ba8:	1004c03a 	cmpne	r2,r2,zero
 2006bac:	308cb03a 	or	r6,r6,r2
 2006bb0:	898dc83a 	sub	r6,r17,r6
 2006bb4:	89a3803a 	cmpltu	r17,r17,r6
 2006bb8:	40d1c83a 	sub	r8,r8,r3
 2006bbc:	4451c83a 	sub	r8,r8,r17
 2006bc0:	3023883a 	mov	r17,r6
 2006bc4:	4080202c 	andhi	r2,r8,128
 2006bc8:	10002326 	beq	r2,zero,2006c58 <__adddf3+0x204>
 2006bcc:	04c02034 	movhi	r19,128
 2006bd0:	9cffffc4 	addi	r19,r19,-1
 2006bd4:	44e6703a 	and	r19,r8,r19
 2006bd8:	98007626 	beq	r19,zero,2006db4 <__adddf3+0x360>
 2006bdc:	9809883a 	mov	r4,r19
 2006be0:	200910c0 	call	200910c <__clzsi2>
 2006be4:	10fffe04 	addi	r3,r2,-8
 2006be8:	010007c4 	movi	r4,31
 2006bec:	20c07716 	blt	r4,r3,2006dcc <__adddf3+0x378>
 2006bf0:	00800804 	movi	r2,32
 2006bf4:	10c5c83a 	sub	r2,r2,r3
 2006bf8:	8884d83a 	srl	r2,r17,r2
 2006bfc:	98d0983a 	sll	r8,r19,r3
 2006c00:	88e2983a 	sll	r17,r17,r3
 2006c04:	1204b03a 	or	r2,r2,r8
 2006c08:	1c007416 	blt	r3,r16,2006ddc <__adddf3+0x388>
 2006c0c:	1c21c83a 	sub	r16,r3,r16
 2006c10:	82000044 	addi	r8,r16,1
 2006c14:	00c007c4 	movi	r3,31
 2006c18:	1a009116 	blt	r3,r8,2006e60 <__adddf3+0x40c>
 2006c1c:	00c00804 	movi	r3,32
 2006c20:	1a07c83a 	sub	r3,r3,r8
 2006c24:	8a08d83a 	srl	r4,r17,r8
 2006c28:	88e2983a 	sll	r17,r17,r3
 2006c2c:	10c6983a 	sll	r3,r2,r3
 2006c30:	1210d83a 	srl	r8,r2,r8
 2006c34:	8804c03a 	cmpne	r2,r17,zero
 2006c38:	1906b03a 	or	r3,r3,r4
 2006c3c:	18a2b03a 	or	r17,r3,r2
 2006c40:	0021883a 	mov	r16,zero
 2006c44:	003fa206 	br	2006ad0 <__adddf3+0x7c>
 2006c48:	1890b03a 	or	r8,r3,r2
 2006c4c:	40017d26 	beq	r8,zero,2007244 <__adddf3+0x7f0>
 2006c50:	1011883a 	mov	r8,r2
 2006c54:	1823883a 	mov	r17,r3
 2006c58:	888001cc 	andi	r2,r17,7
 2006c5c:	103f9e1e 	bne	r2,zero,2006ad8 <__adddf3+0x84>
 2006c60:	4004977a 	slli	r2,r8,29
 2006c64:	8822d0fa 	srli	r17,r17,3
 2006c68:	4010d0fa 	srli	r8,r8,3
 2006c6c:	9007883a 	mov	r3,r18
 2006c70:	1444b03a 	or	r2,r2,r17
 2006c74:	0101ffc4 	movi	r4,2047
 2006c78:	81002426 	beq	r16,r4,2006d0c <__adddf3+0x2b8>
 2006c7c:	8120703a 	and	r16,r16,r4
 2006c80:	01000434 	movhi	r4,16
 2006c84:	213fffc4 	addi	r4,r4,-1
 2006c88:	4110703a 	and	r8,r8,r4
 2006c8c:	003fa806 	br	2006b30 <__adddf3+0xdc>
 2006c90:	8089c83a 	sub	r4,r16,r2
 2006c94:	01005e0e 	bge	zero,r4,2006e10 <__adddf3+0x3bc>
 2006c98:	10002b26 	beq	r2,zero,2006d48 <__adddf3+0x2f4>
 2006c9c:	0081ffc4 	movi	r2,2047
 2006ca0:	80bf8b26 	beq	r16,r2,2006ad0 <__adddf3+0x7c>
 2006ca4:	4a402034 	orhi	r9,r9,128
 2006ca8:	00800e04 	movi	r2,56
 2006cac:	1100a40e 	bge	r2,r4,2006f40 <__adddf3+0x4ec>
 2006cb0:	498cb03a 	or	r6,r9,r6
 2006cb4:	300ac03a 	cmpne	r5,r6,zero
 2006cb8:	0013883a 	mov	r9,zero
 2006cbc:	2c4b883a 	add	r5,r5,r17
 2006cc0:	2c63803a 	cmpltu	r17,r5,r17
 2006cc4:	4a11883a 	add	r8,r9,r8
 2006cc8:	8a11883a 	add	r8,r17,r8
 2006ccc:	2823883a 	mov	r17,r5
 2006cd0:	4080202c 	andhi	r2,r8,128
 2006cd4:	103fe026 	beq	r2,zero,2006c58 <__adddf3+0x204>
 2006cd8:	84000044 	addi	r16,r16,1
 2006cdc:	0081ffc4 	movi	r2,2047
 2006ce0:	8080d226 	beq	r16,r2,200702c <__adddf3+0x5d8>
 2006ce4:	00bfe034 	movhi	r2,65408
 2006ce8:	10bfffc4 	addi	r2,r2,-1
 2006cec:	4090703a 	and	r8,r8,r2
 2006cf0:	880ad07a 	srli	r5,r17,1
 2006cf4:	400897fa 	slli	r4,r8,31
 2006cf8:	88c0004c 	andi	r3,r17,1
 2006cfc:	28e2b03a 	or	r17,r5,r3
 2006d00:	4010d07a 	srli	r8,r8,1
 2006d04:	2462b03a 	or	r17,r4,r17
 2006d08:	003f7106 	br	2006ad0 <__adddf3+0x7c>
 2006d0c:	4088b03a 	or	r4,r8,r2
 2006d10:	20014526 	beq	r4,zero,2007228 <__adddf3+0x7d4>
 2006d14:	01000434 	movhi	r4,16
 2006d18:	42000234 	orhi	r8,r8,8
 2006d1c:	213fffc4 	addi	r4,r4,-1
 2006d20:	4110703a 	and	r8,r8,r4
 2006d24:	003f8206 	br	2006b30 <__adddf3+0xdc>
 2006d28:	18ffffc4 	addi	r3,r3,-1
 2006d2c:	1800491e 	bne	r3,zero,2006e54 <__adddf3+0x400>
 2006d30:	898bc83a 	sub	r5,r17,r6
 2006d34:	8963803a 	cmpltu	r17,r17,r5
 2006d38:	4251c83a 	sub	r8,r8,r9
 2006d3c:	4451c83a 	sub	r8,r8,r17
 2006d40:	2823883a 	mov	r17,r5
 2006d44:	003f9f06 	br	2006bc4 <__adddf3+0x170>
 2006d48:	4984b03a 	or	r2,r9,r6
 2006d4c:	103f6026 	beq	r2,zero,2006ad0 <__adddf3+0x7c>
 2006d50:	213fffc4 	addi	r4,r4,-1
 2006d54:	2000931e 	bne	r4,zero,2006fa4 <__adddf3+0x550>
 2006d58:	898d883a 	add	r6,r17,r6
 2006d5c:	3463803a 	cmpltu	r17,r6,r17
 2006d60:	4251883a 	add	r8,r8,r9
 2006d64:	8a11883a 	add	r8,r17,r8
 2006d68:	3023883a 	mov	r17,r6
 2006d6c:	003fd806 	br	2006cd0 <__adddf3+0x27c>
 2006d70:	1800541e 	bne	r3,zero,2006ec4 <__adddf3+0x470>
 2006d74:	80800044 	addi	r2,r16,1
 2006d78:	1081ffcc 	andi	r2,r2,2047
 2006d7c:	00c00044 	movi	r3,1
 2006d80:	1880a00e 	bge	r3,r2,2007004 <__adddf3+0x5b0>
 2006d84:	8989c83a 	sub	r4,r17,r6
 2006d88:	8905803a 	cmpltu	r2,r17,r4
 2006d8c:	4267c83a 	sub	r19,r8,r9
 2006d90:	98a7c83a 	sub	r19,r19,r2
 2006d94:	9880202c 	andhi	r2,r19,128
 2006d98:	10006326 	beq	r2,zero,2006f28 <__adddf3+0x4d4>
 2006d9c:	3463c83a 	sub	r17,r6,r17
 2006da0:	4a07c83a 	sub	r3,r9,r8
 2006da4:	344d803a 	cmpltu	r6,r6,r17
 2006da8:	19a7c83a 	sub	r19,r3,r6
 2006dac:	3825883a 	mov	r18,r7
 2006db0:	983f8a1e 	bne	r19,zero,2006bdc <__adddf3+0x188>
 2006db4:	8809883a 	mov	r4,r17
 2006db8:	200910c0 	call	200910c <__clzsi2>
 2006dbc:	10800804 	addi	r2,r2,32
 2006dc0:	10fffe04 	addi	r3,r2,-8
 2006dc4:	010007c4 	movi	r4,31
 2006dc8:	20ff890e 	bge	r4,r3,2006bf0 <__adddf3+0x19c>
 2006dcc:	10bff604 	addi	r2,r2,-40
 2006dd0:	8884983a 	sll	r2,r17,r2
 2006dd4:	0023883a 	mov	r17,zero
 2006dd8:	1c3f8c0e 	bge	r3,r16,2006c0c <__adddf3+0x1b8>
 2006ddc:	023fe034 	movhi	r8,65408
 2006de0:	423fffc4 	addi	r8,r8,-1
 2006de4:	80e1c83a 	sub	r16,r16,r3
 2006de8:	1210703a 	and	r8,r2,r8
 2006dec:	003f3806 	br	2006ad0 <__adddf3+0x7c>
 2006df0:	9007883a 	mov	r3,r18
 2006df4:	0011883a 	mov	r8,zero
 2006df8:	0005883a 	mov	r2,zero
 2006dfc:	003f4c06 	br	2006b30 <__adddf3+0xdc>
 2006e00:	498cb03a 	or	r6,r9,r6
 2006e04:	300cc03a 	cmpne	r6,r6,zero
 2006e08:	0007883a 	mov	r3,zero
 2006e0c:	003f6806 	br	2006bb0 <__adddf3+0x15c>
 2006e10:	20009c1e 	bne	r4,zero,2007084 <__adddf3+0x630>
 2006e14:	80800044 	addi	r2,r16,1
 2006e18:	1141ffcc 	andi	r5,r2,2047
 2006e1c:	01000044 	movi	r4,1
 2006e20:	2140670e 	bge	r4,r5,2006fc0 <__adddf3+0x56c>
 2006e24:	0101ffc4 	movi	r4,2047
 2006e28:	11007f26 	beq	r2,r4,2007028 <__adddf3+0x5d4>
 2006e2c:	898d883a 	add	r6,r17,r6
 2006e30:	4247883a 	add	r3,r8,r9
 2006e34:	3451803a 	cmpltu	r8,r6,r17
 2006e38:	40d1883a 	add	r8,r8,r3
 2006e3c:	402297fa 	slli	r17,r8,31
 2006e40:	300cd07a 	srli	r6,r6,1
 2006e44:	4010d07a 	srli	r8,r8,1
 2006e48:	1021883a 	mov	r16,r2
 2006e4c:	89a2b03a 	or	r17,r17,r6
 2006e50:	003f1f06 	br	2006ad0 <__adddf3+0x7c>
 2006e54:	0081ffc4 	movi	r2,2047
 2006e58:	80bf481e 	bne	r16,r2,2006b7c <__adddf3+0x128>
 2006e5c:	003f1c06 	br	2006ad0 <__adddf3+0x7c>
 2006e60:	843ff844 	addi	r16,r16,-31
 2006e64:	01000804 	movi	r4,32
 2006e68:	1406d83a 	srl	r3,r2,r16
 2006e6c:	41005026 	beq	r8,r4,2006fb0 <__adddf3+0x55c>
 2006e70:	01001004 	movi	r4,64
 2006e74:	2211c83a 	sub	r8,r4,r8
 2006e78:	1204983a 	sll	r2,r2,r8
 2006e7c:	88a2b03a 	or	r17,r17,r2
 2006e80:	8822c03a 	cmpne	r17,r17,zero
 2006e84:	1c62b03a 	or	r17,r3,r17
 2006e88:	0011883a 	mov	r8,zero
 2006e8c:	0021883a 	mov	r16,zero
 2006e90:	003f7106 	br	2006c58 <__adddf3+0x204>
 2006e94:	193ff804 	addi	r4,r3,-32
 2006e98:	00800804 	movi	r2,32
 2006e9c:	4908d83a 	srl	r4,r9,r4
 2006ea0:	18804526 	beq	r3,r2,2006fb8 <__adddf3+0x564>
 2006ea4:	00801004 	movi	r2,64
 2006ea8:	10c5c83a 	sub	r2,r2,r3
 2006eac:	4886983a 	sll	r3,r9,r2
 2006eb0:	198cb03a 	or	r6,r3,r6
 2006eb4:	300cc03a 	cmpne	r6,r6,zero
 2006eb8:	218cb03a 	or	r6,r4,r6
 2006ebc:	0007883a 	mov	r3,zero
 2006ec0:	003f3b06 	br	2006bb0 <__adddf3+0x15c>
 2006ec4:	80002a26 	beq	r16,zero,2006f70 <__adddf3+0x51c>
 2006ec8:	0101ffc4 	movi	r4,2047
 2006ecc:	11006826 	beq	r2,r4,2007070 <__adddf3+0x61c>
 2006ed0:	00c7c83a 	sub	r3,zero,r3
 2006ed4:	42002034 	orhi	r8,r8,128
 2006ed8:	01000e04 	movi	r4,56
 2006edc:	20c07c16 	blt	r4,r3,20070d0 <__adddf3+0x67c>
 2006ee0:	010007c4 	movi	r4,31
 2006ee4:	20c0da16 	blt	r4,r3,2007250 <__adddf3+0x7fc>
 2006ee8:	01000804 	movi	r4,32
 2006eec:	20c9c83a 	sub	r4,r4,r3
 2006ef0:	4114983a 	sll	r10,r8,r4
 2006ef4:	88cad83a 	srl	r5,r17,r3
 2006ef8:	8908983a 	sll	r4,r17,r4
 2006efc:	40c6d83a 	srl	r3,r8,r3
 2006f00:	5162b03a 	or	r17,r10,r5
 2006f04:	2008c03a 	cmpne	r4,r4,zero
 2006f08:	8922b03a 	or	r17,r17,r4
 2006f0c:	3463c83a 	sub	r17,r6,r17
 2006f10:	48c7c83a 	sub	r3,r9,r3
 2006f14:	344d803a 	cmpltu	r6,r6,r17
 2006f18:	1991c83a 	sub	r8,r3,r6
 2006f1c:	1021883a 	mov	r16,r2
 2006f20:	3825883a 	mov	r18,r7
 2006f24:	003f2706 	br	2006bc4 <__adddf3+0x170>
 2006f28:	24d0b03a 	or	r8,r4,r19
 2006f2c:	40001b1e 	bne	r8,zero,2006f9c <__adddf3+0x548>
 2006f30:	0005883a 	mov	r2,zero
 2006f34:	0007883a 	mov	r3,zero
 2006f38:	0021883a 	mov	r16,zero
 2006f3c:	003f4d06 	br	2006c74 <__adddf3+0x220>
 2006f40:	008007c4 	movi	r2,31
 2006f44:	11003c16 	blt	r2,r4,2007038 <__adddf3+0x5e4>
 2006f48:	00800804 	movi	r2,32
 2006f4c:	1105c83a 	sub	r2,r2,r4
 2006f50:	488e983a 	sll	r7,r9,r2
 2006f54:	310ad83a 	srl	r5,r6,r4
 2006f58:	3084983a 	sll	r2,r6,r2
 2006f5c:	4912d83a 	srl	r9,r9,r4
 2006f60:	394ab03a 	or	r5,r7,r5
 2006f64:	1004c03a 	cmpne	r2,r2,zero
 2006f68:	288ab03a 	or	r5,r5,r2
 2006f6c:	003f5306 	br	2006cbc <__adddf3+0x268>
 2006f70:	4448b03a 	or	r4,r8,r17
 2006f74:	20003e26 	beq	r4,zero,2007070 <__adddf3+0x61c>
 2006f78:	00c6303a 	nor	r3,zero,r3
 2006f7c:	18003a1e 	bne	r3,zero,2007068 <__adddf3+0x614>
 2006f80:	3463c83a 	sub	r17,r6,r17
 2006f84:	4a07c83a 	sub	r3,r9,r8
 2006f88:	344d803a 	cmpltu	r6,r6,r17
 2006f8c:	1991c83a 	sub	r8,r3,r6
 2006f90:	1021883a 	mov	r16,r2
 2006f94:	3825883a 	mov	r18,r7
 2006f98:	003f0a06 	br	2006bc4 <__adddf3+0x170>
 2006f9c:	2023883a 	mov	r17,r4
 2006fa0:	003f0d06 	br	2006bd8 <__adddf3+0x184>
 2006fa4:	0081ffc4 	movi	r2,2047
 2006fa8:	80bf3f1e 	bne	r16,r2,2006ca8 <__adddf3+0x254>
 2006fac:	003ec806 	br	2006ad0 <__adddf3+0x7c>
 2006fb0:	0005883a 	mov	r2,zero
 2006fb4:	003fb106 	br	2006e7c <__adddf3+0x428>
 2006fb8:	0007883a 	mov	r3,zero
 2006fbc:	003fbc06 	br	2006eb0 <__adddf3+0x45c>
 2006fc0:	4444b03a 	or	r2,r8,r17
 2006fc4:	8000871e 	bne	r16,zero,20071e4 <__adddf3+0x790>
 2006fc8:	1000ba26 	beq	r2,zero,20072b4 <__adddf3+0x860>
 2006fcc:	4984b03a 	or	r2,r9,r6
 2006fd0:	103ebf26 	beq	r2,zero,2006ad0 <__adddf3+0x7c>
 2006fd4:	8985883a 	add	r2,r17,r6
 2006fd8:	4247883a 	add	r3,r8,r9
 2006fdc:	1451803a 	cmpltu	r8,r2,r17
 2006fe0:	40d1883a 	add	r8,r8,r3
 2006fe4:	40c0202c 	andhi	r3,r8,128
 2006fe8:	1023883a 	mov	r17,r2
 2006fec:	183f1a26 	beq	r3,zero,2006c58 <__adddf3+0x204>
 2006ff0:	00bfe034 	movhi	r2,65408
 2006ff4:	10bfffc4 	addi	r2,r2,-1
 2006ff8:	2021883a 	mov	r16,r4
 2006ffc:	4090703a 	and	r8,r8,r2
 2007000:	003eb306 	br	2006ad0 <__adddf3+0x7c>
 2007004:	4444b03a 	or	r2,r8,r17
 2007008:	8000291e 	bne	r16,zero,20070b0 <__adddf3+0x65c>
 200700c:	10004b1e 	bne	r2,zero,200713c <__adddf3+0x6e8>
 2007010:	4990b03a 	or	r8,r9,r6
 2007014:	40008b26 	beq	r8,zero,2007244 <__adddf3+0x7f0>
 2007018:	4811883a 	mov	r8,r9
 200701c:	3023883a 	mov	r17,r6
 2007020:	3825883a 	mov	r18,r7
 2007024:	003eaa06 	br	2006ad0 <__adddf3+0x7c>
 2007028:	1021883a 	mov	r16,r2
 200702c:	0011883a 	mov	r8,zero
 2007030:	0005883a 	mov	r2,zero
 2007034:	003f0f06 	br	2006c74 <__adddf3+0x220>
 2007038:	217ff804 	addi	r5,r4,-32
 200703c:	00800804 	movi	r2,32
 2007040:	494ad83a 	srl	r5,r9,r5
 2007044:	20807d26 	beq	r4,r2,200723c <__adddf3+0x7e8>
 2007048:	00801004 	movi	r2,64
 200704c:	1109c83a 	sub	r4,r2,r4
 2007050:	4912983a 	sll	r9,r9,r4
 2007054:	498cb03a 	or	r6,r9,r6
 2007058:	300cc03a 	cmpne	r6,r6,zero
 200705c:	298ab03a 	or	r5,r5,r6
 2007060:	0013883a 	mov	r9,zero
 2007064:	003f1506 	br	2006cbc <__adddf3+0x268>
 2007068:	0101ffc4 	movi	r4,2047
 200706c:	113f9a1e 	bne	r2,r4,2006ed8 <__adddf3+0x484>
 2007070:	4811883a 	mov	r8,r9
 2007074:	3023883a 	mov	r17,r6
 2007078:	1021883a 	mov	r16,r2
 200707c:	3825883a 	mov	r18,r7
 2007080:	003e9306 	br	2006ad0 <__adddf3+0x7c>
 2007084:	8000161e 	bne	r16,zero,20070e0 <__adddf3+0x68c>
 2007088:	444ab03a 	or	r5,r8,r17
 200708c:	28005126 	beq	r5,zero,20071d4 <__adddf3+0x780>
 2007090:	0108303a 	nor	r4,zero,r4
 2007094:	20004d1e 	bne	r4,zero,20071cc <__adddf3+0x778>
 2007098:	89a3883a 	add	r17,r17,r6
 200709c:	4253883a 	add	r9,r8,r9
 20070a0:	898d803a 	cmpltu	r6,r17,r6
 20070a4:	3251883a 	add	r8,r6,r9
 20070a8:	1021883a 	mov	r16,r2
 20070ac:	003f0806 	br	2006cd0 <__adddf3+0x27c>
 20070b0:	1000301e 	bne	r2,zero,2007174 <__adddf3+0x720>
 20070b4:	4984b03a 	or	r2,r9,r6
 20070b8:	10007126 	beq	r2,zero,2007280 <__adddf3+0x82c>
 20070bc:	4811883a 	mov	r8,r9
 20070c0:	3023883a 	mov	r17,r6
 20070c4:	3825883a 	mov	r18,r7
 20070c8:	0401ffc4 	movi	r16,2047
 20070cc:	003e8006 	br	2006ad0 <__adddf3+0x7c>
 20070d0:	4462b03a 	or	r17,r8,r17
 20070d4:	8822c03a 	cmpne	r17,r17,zero
 20070d8:	0007883a 	mov	r3,zero
 20070dc:	003f8b06 	br	2006f0c <__adddf3+0x4b8>
 20070e0:	0141ffc4 	movi	r5,2047
 20070e4:	11403b26 	beq	r2,r5,20071d4 <__adddf3+0x780>
 20070e8:	0109c83a 	sub	r4,zero,r4
 20070ec:	42002034 	orhi	r8,r8,128
 20070f0:	01400e04 	movi	r5,56
 20070f4:	29006716 	blt	r5,r4,2007294 <__adddf3+0x840>
 20070f8:	014007c4 	movi	r5,31
 20070fc:	29007016 	blt	r5,r4,20072c0 <__adddf3+0x86c>
 2007100:	01400804 	movi	r5,32
 2007104:	290bc83a 	sub	r5,r5,r4
 2007108:	4154983a 	sll	r10,r8,r5
 200710c:	890ed83a 	srl	r7,r17,r4
 2007110:	894a983a 	sll	r5,r17,r5
 2007114:	4108d83a 	srl	r4,r8,r4
 2007118:	51e2b03a 	or	r17,r10,r7
 200711c:	280ac03a 	cmpne	r5,r5,zero
 2007120:	8962b03a 	or	r17,r17,r5
 2007124:	89a3883a 	add	r17,r17,r6
 2007128:	2253883a 	add	r9,r4,r9
 200712c:	898d803a 	cmpltu	r6,r17,r6
 2007130:	3251883a 	add	r8,r6,r9
 2007134:	1021883a 	mov	r16,r2
 2007138:	003ee506 	br	2006cd0 <__adddf3+0x27c>
 200713c:	4984b03a 	or	r2,r9,r6
 2007140:	103e6326 	beq	r2,zero,2006ad0 <__adddf3+0x7c>
 2007144:	8987c83a 	sub	r3,r17,r6
 2007148:	88c9803a 	cmpltu	r4,r17,r3
 200714c:	4245c83a 	sub	r2,r8,r9
 2007150:	1105c83a 	sub	r2,r2,r4
 2007154:	1100202c 	andhi	r4,r2,128
 2007158:	203ebb26 	beq	r4,zero,2006c48 <__adddf3+0x1f4>
 200715c:	3463c83a 	sub	r17,r6,r17
 2007160:	4a07c83a 	sub	r3,r9,r8
 2007164:	344d803a 	cmpltu	r6,r6,r17
 2007168:	1991c83a 	sub	r8,r3,r6
 200716c:	3825883a 	mov	r18,r7
 2007170:	003e5706 	br	2006ad0 <__adddf3+0x7c>
 2007174:	4984b03a 	or	r2,r9,r6
 2007178:	10002e26 	beq	r2,zero,2007234 <__adddf3+0x7e0>
 200717c:	4004d0fa 	srli	r2,r8,3
 2007180:	8822d0fa 	srli	r17,r17,3
 2007184:	4010977a 	slli	r8,r8,29
 2007188:	10c0022c 	andhi	r3,r2,8
 200718c:	4462b03a 	or	r17,r8,r17
 2007190:	18000826 	beq	r3,zero,20071b4 <__adddf3+0x760>
 2007194:	4808d0fa 	srli	r4,r9,3
 2007198:	20c0022c 	andhi	r3,r4,8
 200719c:	1800051e 	bne	r3,zero,20071b4 <__adddf3+0x760>
 20071a0:	300cd0fa 	srli	r6,r6,3
 20071a4:	4806977a 	slli	r3,r9,29
 20071a8:	2005883a 	mov	r2,r4
 20071ac:	3825883a 	mov	r18,r7
 20071b0:	19a2b03a 	or	r17,r3,r6
 20071b4:	8810d77a 	srli	r8,r17,29
 20071b8:	100490fa 	slli	r2,r2,3
 20071bc:	882290fa 	slli	r17,r17,3
 20071c0:	0401ffc4 	movi	r16,2047
 20071c4:	4090b03a 	or	r8,r8,r2
 20071c8:	003e4106 	br	2006ad0 <__adddf3+0x7c>
 20071cc:	0141ffc4 	movi	r5,2047
 20071d0:	117fc71e 	bne	r2,r5,20070f0 <__adddf3+0x69c>
 20071d4:	4811883a 	mov	r8,r9
 20071d8:	3023883a 	mov	r17,r6
 20071dc:	1021883a 	mov	r16,r2
 20071e0:	003e3b06 	br	2006ad0 <__adddf3+0x7c>
 20071e4:	10002f26 	beq	r2,zero,20072a4 <__adddf3+0x850>
 20071e8:	4984b03a 	or	r2,r9,r6
 20071ec:	10001126 	beq	r2,zero,2007234 <__adddf3+0x7e0>
 20071f0:	4004d0fa 	srli	r2,r8,3
 20071f4:	8822d0fa 	srli	r17,r17,3
 20071f8:	4010977a 	slli	r8,r8,29
 20071fc:	10c0022c 	andhi	r3,r2,8
 2007200:	4462b03a 	or	r17,r8,r17
 2007204:	183feb26 	beq	r3,zero,20071b4 <__adddf3+0x760>
 2007208:	4808d0fa 	srli	r4,r9,3
 200720c:	20c0022c 	andhi	r3,r4,8
 2007210:	183fe81e 	bne	r3,zero,20071b4 <__adddf3+0x760>
 2007214:	300cd0fa 	srli	r6,r6,3
 2007218:	4806977a 	slli	r3,r9,29
 200721c:	2005883a 	mov	r2,r4
 2007220:	19a2b03a 	or	r17,r3,r6
 2007224:	003fe306 	br	20071b4 <__adddf3+0x760>
 2007228:	0011883a 	mov	r8,zero
 200722c:	0005883a 	mov	r2,zero
 2007230:	003e3f06 	br	2006b30 <__adddf3+0xdc>
 2007234:	0401ffc4 	movi	r16,2047
 2007238:	003e2506 	br	2006ad0 <__adddf3+0x7c>
 200723c:	0013883a 	mov	r9,zero
 2007240:	003f8406 	br	2007054 <__adddf3+0x600>
 2007244:	0005883a 	mov	r2,zero
 2007248:	0007883a 	mov	r3,zero
 200724c:	003e8906 	br	2006c74 <__adddf3+0x220>
 2007250:	197ff804 	addi	r5,r3,-32
 2007254:	01000804 	movi	r4,32
 2007258:	414ad83a 	srl	r5,r8,r5
 200725c:	19002426 	beq	r3,r4,20072f0 <__adddf3+0x89c>
 2007260:	01001004 	movi	r4,64
 2007264:	20c7c83a 	sub	r3,r4,r3
 2007268:	40c6983a 	sll	r3,r8,r3
 200726c:	1c46b03a 	or	r3,r3,r17
 2007270:	1806c03a 	cmpne	r3,r3,zero
 2007274:	28e2b03a 	or	r17,r5,r3
 2007278:	0007883a 	mov	r3,zero
 200727c:	003f2306 	br	2006f0c <__adddf3+0x4b8>
 2007280:	0007883a 	mov	r3,zero
 2007284:	5811883a 	mov	r8,r11
 2007288:	00bfffc4 	movi	r2,-1
 200728c:	0401ffc4 	movi	r16,2047
 2007290:	003e7806 	br	2006c74 <__adddf3+0x220>
 2007294:	4462b03a 	or	r17,r8,r17
 2007298:	8822c03a 	cmpne	r17,r17,zero
 200729c:	0009883a 	mov	r4,zero
 20072a0:	003fa006 	br	2007124 <__adddf3+0x6d0>
 20072a4:	4811883a 	mov	r8,r9
 20072a8:	3023883a 	mov	r17,r6
 20072ac:	0401ffc4 	movi	r16,2047
 20072b0:	003e0706 	br	2006ad0 <__adddf3+0x7c>
 20072b4:	4811883a 	mov	r8,r9
 20072b8:	3023883a 	mov	r17,r6
 20072bc:	003e0406 	br	2006ad0 <__adddf3+0x7c>
 20072c0:	21fff804 	addi	r7,r4,-32
 20072c4:	01400804 	movi	r5,32
 20072c8:	41ced83a 	srl	r7,r8,r7
 20072cc:	21400a26 	beq	r4,r5,20072f8 <__adddf3+0x8a4>
 20072d0:	01401004 	movi	r5,64
 20072d4:	2909c83a 	sub	r4,r5,r4
 20072d8:	4108983a 	sll	r4,r8,r4
 20072dc:	2448b03a 	or	r4,r4,r17
 20072e0:	2008c03a 	cmpne	r4,r4,zero
 20072e4:	3922b03a 	or	r17,r7,r4
 20072e8:	0009883a 	mov	r4,zero
 20072ec:	003f8d06 	br	2007124 <__adddf3+0x6d0>
 20072f0:	0007883a 	mov	r3,zero
 20072f4:	003fdd06 	br	200726c <__adddf3+0x818>
 20072f8:	0009883a 	mov	r4,zero
 20072fc:	003ff706 	br	20072dc <__adddf3+0x888>

02007300 <__divdf3>:
 2007300:	defff204 	addi	sp,sp,-56
 2007304:	dd400915 	stw	r21,36(sp)
 2007308:	282ad53a 	srli	r21,r5,20
 200730c:	dd000815 	stw	r20,32(sp)
 2007310:	2828d7fa 	srli	r20,r5,31
 2007314:	dc000415 	stw	r16,16(sp)
 2007318:	04000434 	movhi	r16,16
 200731c:	df000c15 	stw	fp,48(sp)
 2007320:	843fffc4 	addi	r16,r16,-1
 2007324:	dfc00d15 	stw	ra,52(sp)
 2007328:	ddc00b15 	stw	r23,44(sp)
 200732c:	dd800a15 	stw	r22,40(sp)
 2007330:	dcc00715 	stw	r19,28(sp)
 2007334:	dc800615 	stw	r18,24(sp)
 2007338:	dc400515 	stw	r17,20(sp)
 200733c:	ad41ffcc 	andi	r21,r21,2047
 2007340:	2c20703a 	and	r16,r5,r16
 2007344:	a7003fcc 	andi	fp,r20,255
 2007348:	a8006126 	beq	r21,zero,20074d0 <__divdf3+0x1d0>
 200734c:	0081ffc4 	movi	r2,2047
 2007350:	2025883a 	mov	r18,r4
 2007354:	a8803726 	beq	r21,r2,2007434 <__divdf3+0x134>
 2007358:	80800434 	orhi	r2,r16,16
 200735c:	100490fa 	slli	r2,r2,3
 2007360:	2020d77a 	srli	r16,r4,29
 2007364:	202490fa 	slli	r18,r4,3
 2007368:	ad7f0044 	addi	r21,r21,-1023
 200736c:	80a0b03a 	or	r16,r16,r2
 2007370:	0027883a 	mov	r19,zero
 2007374:	0013883a 	mov	r9,zero
 2007378:	3804d53a 	srli	r2,r7,20
 200737c:	382cd7fa 	srli	r22,r7,31
 2007380:	04400434 	movhi	r17,16
 2007384:	8c7fffc4 	addi	r17,r17,-1
 2007388:	1081ffcc 	andi	r2,r2,2047
 200738c:	3011883a 	mov	r8,r6
 2007390:	3c62703a 	and	r17,r7,r17
 2007394:	b5c03fcc 	andi	r23,r22,255
 2007398:	10006c26 	beq	r2,zero,200754c <__divdf3+0x24c>
 200739c:	00c1ffc4 	movi	r3,2047
 20073a0:	10c06426 	beq	r2,r3,2007534 <__divdf3+0x234>
 20073a4:	88c00434 	orhi	r3,r17,16
 20073a8:	180690fa 	slli	r3,r3,3
 20073ac:	3022d77a 	srli	r17,r6,29
 20073b0:	301090fa 	slli	r8,r6,3
 20073b4:	10bf0044 	addi	r2,r2,-1023
 20073b8:	88e2b03a 	or	r17,r17,r3
 20073bc:	000f883a 	mov	r7,zero
 20073c0:	a58cf03a 	xor	r6,r20,r22
 20073c4:	3cc8b03a 	or	r4,r7,r19
 20073c8:	a8abc83a 	sub	r21,r21,r2
 20073cc:	008003c4 	movi	r2,15
 20073d0:	3007883a 	mov	r3,r6
 20073d4:	34c03fcc 	andi	r19,r6,255
 20073d8:	11009036 	bltu	r2,r4,200761c <__divdf3+0x31c>
 20073dc:	200890ba 	slli	r4,r4,2
 20073e0:	00808034 	movhi	r2,512
 20073e4:	109cfd04 	addi	r2,r2,29684
 20073e8:	2089883a 	add	r4,r4,r2
 20073ec:	20800017 	ldw	r2,0(r4)
 20073f0:	1000683a 	jmp	r2
 20073f4:	0200761c 	xori	r8,zero,472
 20073f8:	0200746c 	andhi	r8,zero,465
 20073fc:	0200760c 	andi	r8,zero,472
 2007400:	02007460 	cmpeqi	r8,zero,465
 2007404:	0200760c 	andi	r8,zero,472
 2007408:	020075e0 	cmpeqi	r8,zero,471
 200740c:	0200760c 	andi	r8,zero,472
 2007410:	02007460 	cmpeqi	r8,zero,465
 2007414:	0200746c 	andhi	r8,zero,465
 2007418:	0200746c 	andhi	r8,zero,465
 200741c:	020075e0 	cmpeqi	r8,zero,471
 2007420:	02007460 	cmpeqi	r8,zero,465
 2007424:	02007450 	cmplti	r8,zero,465
 2007428:	02007450 	cmplti	r8,zero,465
 200742c:	02007450 	cmplti	r8,zero,465
 2007430:	02007900 	call	200790 <__alt_mem_mem_Nios_PI+0x790>
 2007434:	2404b03a 	or	r2,r4,r16
 2007438:	1000661e 	bne	r2,zero,20075d4 <__divdf3+0x2d4>
 200743c:	04c00204 	movi	r19,8
 2007440:	0021883a 	mov	r16,zero
 2007444:	0025883a 	mov	r18,zero
 2007448:	02400084 	movi	r9,2
 200744c:	003fca06 	br	2007378 <__divdf3+0x78>
 2007450:	8023883a 	mov	r17,r16
 2007454:	9011883a 	mov	r8,r18
 2007458:	e02f883a 	mov	r23,fp
 200745c:	480f883a 	mov	r7,r9
 2007460:	00800084 	movi	r2,2
 2007464:	3881311e 	bne	r7,r2,200792c <__divdf3+0x62c>
 2007468:	b827883a 	mov	r19,r23
 200746c:	98c0004c 	andi	r3,r19,1
 2007470:	0081ffc4 	movi	r2,2047
 2007474:	000b883a 	mov	r5,zero
 2007478:	0025883a 	mov	r18,zero
 200747c:	1004953a 	slli	r2,r2,20
 2007480:	18c03fcc 	andi	r3,r3,255
 2007484:	04400434 	movhi	r17,16
 2007488:	8c7fffc4 	addi	r17,r17,-1
 200748c:	180697fa 	slli	r3,r3,31
 2007490:	2c4a703a 	and	r5,r5,r17
 2007494:	288ab03a 	or	r5,r5,r2
 2007498:	28c6b03a 	or	r3,r5,r3
 200749c:	9005883a 	mov	r2,r18
 20074a0:	dfc00d17 	ldw	ra,52(sp)
 20074a4:	df000c17 	ldw	fp,48(sp)
 20074a8:	ddc00b17 	ldw	r23,44(sp)
 20074ac:	dd800a17 	ldw	r22,40(sp)
 20074b0:	dd400917 	ldw	r21,36(sp)
 20074b4:	dd000817 	ldw	r20,32(sp)
 20074b8:	dcc00717 	ldw	r19,28(sp)
 20074bc:	dc800617 	ldw	r18,24(sp)
 20074c0:	dc400517 	ldw	r17,20(sp)
 20074c4:	dc000417 	ldw	r16,16(sp)
 20074c8:	dec00e04 	addi	sp,sp,56
 20074cc:	f800283a 	ret
 20074d0:	2404b03a 	or	r2,r4,r16
 20074d4:	2027883a 	mov	r19,r4
 20074d8:	10003926 	beq	r2,zero,20075c0 <__divdf3+0x2c0>
 20074dc:	80012e26 	beq	r16,zero,2007998 <__divdf3+0x698>
 20074e0:	8009883a 	mov	r4,r16
 20074e4:	d9800315 	stw	r6,12(sp)
 20074e8:	d9c00215 	stw	r7,8(sp)
 20074ec:	200910c0 	call	200910c <__clzsi2>
 20074f0:	d9800317 	ldw	r6,12(sp)
 20074f4:	d9c00217 	ldw	r7,8(sp)
 20074f8:	113ffd44 	addi	r4,r2,-11
 20074fc:	00c00704 	movi	r3,28
 2007500:	19012116 	blt	r3,r4,2007988 <__divdf3+0x688>
 2007504:	00c00744 	movi	r3,29
 2007508:	147ffe04 	addi	r17,r2,-8
 200750c:	1907c83a 	sub	r3,r3,r4
 2007510:	8460983a 	sll	r16,r16,r17
 2007514:	98c6d83a 	srl	r3,r19,r3
 2007518:	9c64983a 	sll	r18,r19,r17
 200751c:	1c20b03a 	or	r16,r3,r16
 2007520:	1080fcc4 	addi	r2,r2,1011
 2007524:	00abc83a 	sub	r21,zero,r2
 2007528:	0027883a 	mov	r19,zero
 200752c:	0013883a 	mov	r9,zero
 2007530:	003f9106 	br	2007378 <__divdf3+0x78>
 2007534:	3446b03a 	or	r3,r6,r17
 2007538:	18001f1e 	bne	r3,zero,20075b8 <__divdf3+0x2b8>
 200753c:	0023883a 	mov	r17,zero
 2007540:	0011883a 	mov	r8,zero
 2007544:	01c00084 	movi	r7,2
 2007548:	003f9d06 	br	20073c0 <__divdf3+0xc0>
 200754c:	3446b03a 	or	r3,r6,r17
 2007550:	18001526 	beq	r3,zero,20075a8 <__divdf3+0x2a8>
 2007554:	88011b26 	beq	r17,zero,20079c4 <__divdf3+0x6c4>
 2007558:	8809883a 	mov	r4,r17
 200755c:	d9800315 	stw	r6,12(sp)
 2007560:	da400115 	stw	r9,4(sp)
 2007564:	200910c0 	call	200910c <__clzsi2>
 2007568:	d9800317 	ldw	r6,12(sp)
 200756c:	da400117 	ldw	r9,4(sp)
 2007570:	113ffd44 	addi	r4,r2,-11
 2007574:	00c00704 	movi	r3,28
 2007578:	19010e16 	blt	r3,r4,20079b4 <__divdf3+0x6b4>
 200757c:	00c00744 	movi	r3,29
 2007580:	123ffe04 	addi	r8,r2,-8
 2007584:	1907c83a 	sub	r3,r3,r4
 2007588:	8a22983a 	sll	r17,r17,r8
 200758c:	30c6d83a 	srl	r3,r6,r3
 2007590:	3210983a 	sll	r8,r6,r8
 2007594:	1c62b03a 	or	r17,r3,r17
 2007598:	1080fcc4 	addi	r2,r2,1011
 200759c:	0085c83a 	sub	r2,zero,r2
 20075a0:	000f883a 	mov	r7,zero
 20075a4:	003f8606 	br	20073c0 <__divdf3+0xc0>
 20075a8:	0023883a 	mov	r17,zero
 20075ac:	0011883a 	mov	r8,zero
 20075b0:	01c00044 	movi	r7,1
 20075b4:	003f8206 	br	20073c0 <__divdf3+0xc0>
 20075b8:	01c000c4 	movi	r7,3
 20075bc:	003f8006 	br	20073c0 <__divdf3+0xc0>
 20075c0:	04c00104 	movi	r19,4
 20075c4:	0021883a 	mov	r16,zero
 20075c8:	0025883a 	mov	r18,zero
 20075cc:	02400044 	movi	r9,1
 20075d0:	003f6906 	br	2007378 <__divdf3+0x78>
 20075d4:	04c00304 	movi	r19,12
 20075d8:	024000c4 	movi	r9,3
 20075dc:	003f6606 	br	2007378 <__divdf3+0x78>
 20075e0:	01400434 	movhi	r5,16
 20075e4:	0007883a 	mov	r3,zero
 20075e8:	297fffc4 	addi	r5,r5,-1
 20075ec:	04bfffc4 	movi	r18,-1
 20075f0:	0081ffc4 	movi	r2,2047
 20075f4:	003fa106 	br	200747c <__divdf3+0x17c>
 20075f8:	00c00044 	movi	r3,1
 20075fc:	1887c83a 	sub	r3,r3,r2
 2007600:	01000e04 	movi	r4,56
 2007604:	20c1210e 	bge	r4,r3,2007a8c <__divdf3+0x78c>
 2007608:	98c0004c 	andi	r3,r19,1
 200760c:	0005883a 	mov	r2,zero
 2007610:	000b883a 	mov	r5,zero
 2007614:	0025883a 	mov	r18,zero
 2007618:	003f9806 	br	200747c <__divdf3+0x17c>
 200761c:	8c00fd36 	bltu	r17,r16,2007a14 <__divdf3+0x714>
 2007620:	8440fb26 	beq	r16,r17,2007a10 <__divdf3+0x710>
 2007624:	8007883a 	mov	r3,r16
 2007628:	ad7fffc4 	addi	r21,r21,-1
 200762c:	0021883a 	mov	r16,zero
 2007630:	4004d63a 	srli	r2,r8,24
 2007634:	8822923a 	slli	r17,r17,8
 2007638:	1809883a 	mov	r4,r3
 200763c:	402c923a 	slli	r22,r8,8
 2007640:	88b8b03a 	or	fp,r17,r2
 2007644:	e028d43a 	srli	r20,fp,16
 2007648:	d8c00015 	stw	r3,0(sp)
 200764c:	e5ffffcc 	andi	r23,fp,65535
 2007650:	a00b883a 	mov	r5,r20
 2007654:	20069980 	call	2006998 <__udivsi3>
 2007658:	d8c00017 	ldw	r3,0(sp)
 200765c:	a00b883a 	mov	r5,r20
 2007660:	d8800315 	stw	r2,12(sp)
 2007664:	1809883a 	mov	r4,r3
 2007668:	20069fc0 	call	20069fc <__umodsi3>
 200766c:	d9800317 	ldw	r6,12(sp)
 2007670:	1006943a 	slli	r3,r2,16
 2007674:	9004d43a 	srli	r2,r18,16
 2007678:	b9a3383a 	mul	r17,r23,r6
 200767c:	10c4b03a 	or	r2,r2,r3
 2007680:	1440062e 	bgeu	r2,r17,200769c <__divdf3+0x39c>
 2007684:	1705883a 	add	r2,r2,fp
 2007688:	30ffffc4 	addi	r3,r6,-1
 200768c:	1700ee36 	bltu	r2,fp,2007a48 <__divdf3+0x748>
 2007690:	1440ed2e 	bgeu	r2,r17,2007a48 <__divdf3+0x748>
 2007694:	31bfff84 	addi	r6,r6,-2
 2007698:	1705883a 	add	r2,r2,fp
 200769c:	1463c83a 	sub	r17,r2,r17
 20076a0:	a00b883a 	mov	r5,r20
 20076a4:	8809883a 	mov	r4,r17
 20076a8:	d9800315 	stw	r6,12(sp)
 20076ac:	20069980 	call	2006998 <__udivsi3>
 20076b0:	a00b883a 	mov	r5,r20
 20076b4:	8809883a 	mov	r4,r17
 20076b8:	d8800215 	stw	r2,8(sp)
 20076bc:	20069fc0 	call	20069fc <__umodsi3>
 20076c0:	d9c00217 	ldw	r7,8(sp)
 20076c4:	1004943a 	slli	r2,r2,16
 20076c8:	94bfffcc 	andi	r18,r18,65535
 20076cc:	b9d1383a 	mul	r8,r23,r7
 20076d0:	90a4b03a 	or	r18,r18,r2
 20076d4:	d9800317 	ldw	r6,12(sp)
 20076d8:	9200062e 	bgeu	r18,r8,20076f4 <__divdf3+0x3f4>
 20076dc:	9725883a 	add	r18,r18,fp
 20076e0:	38bfffc4 	addi	r2,r7,-1
 20076e4:	9700d636 	bltu	r18,fp,2007a40 <__divdf3+0x740>
 20076e8:	9200d52e 	bgeu	r18,r8,2007a40 <__divdf3+0x740>
 20076ec:	39ffff84 	addi	r7,r7,-2
 20076f0:	9725883a 	add	r18,r18,fp
 20076f4:	3004943a 	slli	r2,r6,16
 20076f8:	b012d43a 	srli	r9,r22,16
 20076fc:	b1bfffcc 	andi	r6,r22,65535
 2007700:	11e2b03a 	or	r17,r2,r7
 2007704:	8806d43a 	srli	r3,r17,16
 2007708:	893fffcc 	andi	r4,r17,65535
 200770c:	218b383a 	mul	r5,r4,r6
 2007710:	30c5383a 	mul	r2,r6,r3
 2007714:	2249383a 	mul	r4,r4,r9
 2007718:	280ed43a 	srli	r7,r5,16
 200771c:	9225c83a 	sub	r18,r18,r8
 2007720:	2089883a 	add	r4,r4,r2
 2007724:	3909883a 	add	r4,r7,r4
 2007728:	1a47383a 	mul	r3,r3,r9
 200772c:	2080022e 	bgeu	r4,r2,2007738 <__divdf3+0x438>
 2007730:	00800074 	movhi	r2,1
 2007734:	1887883a 	add	r3,r3,r2
 2007738:	2004d43a 	srli	r2,r4,16
 200773c:	2008943a 	slli	r4,r4,16
 2007740:	297fffcc 	andi	r5,r5,65535
 2007744:	10c7883a 	add	r3,r2,r3
 2007748:	2149883a 	add	r4,r4,r5
 200774c:	90c0a536 	bltu	r18,r3,20079e4 <__divdf3+0x6e4>
 2007750:	90c0bf26 	beq	r18,r3,2007a50 <__divdf3+0x750>
 2007754:	90c7c83a 	sub	r3,r18,r3
 2007758:	810fc83a 	sub	r7,r16,r4
 200775c:	81e5803a 	cmpltu	r18,r16,r7
 2007760:	1ca5c83a 	sub	r18,r3,r18
 2007764:	e480c126 	beq	fp,r18,2007a6c <__divdf3+0x76c>
 2007768:	a00b883a 	mov	r5,r20
 200776c:	9009883a 	mov	r4,r18
 2007770:	d9800315 	stw	r6,12(sp)
 2007774:	d9c00215 	stw	r7,8(sp)
 2007778:	da400115 	stw	r9,4(sp)
 200777c:	20069980 	call	2006998 <__udivsi3>
 2007780:	a00b883a 	mov	r5,r20
 2007784:	9009883a 	mov	r4,r18
 2007788:	d8800015 	stw	r2,0(sp)
 200778c:	20069fc0 	call	20069fc <__umodsi3>
 2007790:	d9c00217 	ldw	r7,8(sp)
 2007794:	da000017 	ldw	r8,0(sp)
 2007798:	1006943a 	slli	r3,r2,16
 200779c:	3804d43a 	srli	r2,r7,16
 20077a0:	ba21383a 	mul	r16,r23,r8
 20077a4:	d9800317 	ldw	r6,12(sp)
 20077a8:	10c4b03a 	or	r2,r2,r3
 20077ac:	da400117 	ldw	r9,4(sp)
 20077b0:	1400062e 	bgeu	r2,r16,20077cc <__divdf3+0x4cc>
 20077b4:	1705883a 	add	r2,r2,fp
 20077b8:	40ffffc4 	addi	r3,r8,-1
 20077bc:	1700ad36 	bltu	r2,fp,2007a74 <__divdf3+0x774>
 20077c0:	1400ac2e 	bgeu	r2,r16,2007a74 <__divdf3+0x774>
 20077c4:	423fff84 	addi	r8,r8,-2
 20077c8:	1705883a 	add	r2,r2,fp
 20077cc:	1421c83a 	sub	r16,r2,r16
 20077d0:	a00b883a 	mov	r5,r20
 20077d4:	8009883a 	mov	r4,r16
 20077d8:	d9800315 	stw	r6,12(sp)
 20077dc:	d9c00215 	stw	r7,8(sp)
 20077e0:	da000015 	stw	r8,0(sp)
 20077e4:	da400115 	stw	r9,4(sp)
 20077e8:	20069980 	call	2006998 <__udivsi3>
 20077ec:	8009883a 	mov	r4,r16
 20077f0:	a00b883a 	mov	r5,r20
 20077f4:	1025883a 	mov	r18,r2
 20077f8:	20069fc0 	call	20069fc <__umodsi3>
 20077fc:	d9c00217 	ldw	r7,8(sp)
 2007800:	1004943a 	slli	r2,r2,16
 2007804:	bcaf383a 	mul	r23,r23,r18
 2007808:	393fffcc 	andi	r4,r7,65535
 200780c:	2088b03a 	or	r4,r4,r2
 2007810:	d9800317 	ldw	r6,12(sp)
 2007814:	da000017 	ldw	r8,0(sp)
 2007818:	da400117 	ldw	r9,4(sp)
 200781c:	25c0062e 	bgeu	r4,r23,2007838 <__divdf3+0x538>
 2007820:	2709883a 	add	r4,r4,fp
 2007824:	90bfffc4 	addi	r2,r18,-1
 2007828:	27009436 	bltu	r4,fp,2007a7c <__divdf3+0x77c>
 200782c:	25c0932e 	bgeu	r4,r23,2007a7c <__divdf3+0x77c>
 2007830:	94bfff84 	addi	r18,r18,-2
 2007834:	2709883a 	add	r4,r4,fp
 2007838:	4004943a 	slli	r2,r8,16
 200783c:	25efc83a 	sub	r23,r4,r23
 2007840:	1490b03a 	or	r8,r2,r18
 2007844:	4008d43a 	srli	r4,r8,16
 2007848:	40ffffcc 	andi	r3,r8,65535
 200784c:	30c5383a 	mul	r2,r6,r3
 2007850:	1a47383a 	mul	r3,r3,r9
 2007854:	310d383a 	mul	r6,r6,r4
 2007858:	100ad43a 	srli	r5,r2,16
 200785c:	4913383a 	mul	r9,r9,r4
 2007860:	1987883a 	add	r3,r3,r6
 2007864:	28c7883a 	add	r3,r5,r3
 2007868:	1980022e 	bgeu	r3,r6,2007874 <__divdf3+0x574>
 200786c:	01000074 	movhi	r4,1
 2007870:	4913883a 	add	r9,r9,r4
 2007874:	1808d43a 	srli	r4,r3,16
 2007878:	1806943a 	slli	r3,r3,16
 200787c:	10bfffcc 	andi	r2,r2,65535
 2007880:	2253883a 	add	r9,r4,r9
 2007884:	1887883a 	add	r3,r3,r2
 2007888:	ba403836 	bltu	r23,r9,200796c <__divdf3+0x66c>
 200788c:	ba403626 	beq	r23,r9,2007968 <__divdf3+0x668>
 2007890:	42000054 	ori	r8,r8,1
 2007894:	a880ffc4 	addi	r2,r21,1023
 2007898:	00bf570e 	bge	zero,r2,20075f8 <__divdf3+0x2f8>
 200789c:	40c001cc 	andi	r3,r8,7
 20078a0:	18000726 	beq	r3,zero,20078c0 <__divdf3+0x5c0>
 20078a4:	40c003cc 	andi	r3,r8,15
 20078a8:	01000104 	movi	r4,4
 20078ac:	19000426 	beq	r3,r4,20078c0 <__divdf3+0x5c0>
 20078b0:	4107883a 	add	r3,r8,r4
 20078b4:	1a11803a 	cmpltu	r8,r3,r8
 20078b8:	8a23883a 	add	r17,r17,r8
 20078bc:	1811883a 	mov	r8,r3
 20078c0:	88c0402c 	andhi	r3,r17,256
 20078c4:	18000426 	beq	r3,zero,20078d8 <__divdf3+0x5d8>
 20078c8:	00ffc034 	movhi	r3,65280
 20078cc:	18ffffc4 	addi	r3,r3,-1
 20078d0:	a8810004 	addi	r2,r21,1024
 20078d4:	88e2703a 	and	r17,r17,r3
 20078d8:	00c1ff84 	movi	r3,2046
 20078dc:	18bee316 	blt	r3,r2,200746c <__divdf3+0x16c>
 20078e0:	8824977a 	slli	r18,r17,29
 20078e4:	4010d0fa 	srli	r8,r8,3
 20078e8:	8822927a 	slli	r17,r17,9
 20078ec:	1081ffcc 	andi	r2,r2,2047
 20078f0:	9224b03a 	or	r18,r18,r8
 20078f4:	880ad33a 	srli	r5,r17,12
 20078f8:	98c0004c 	andi	r3,r19,1
 20078fc:	003edf06 	br	200747c <__divdf3+0x17c>
 2007900:	8080022c 	andhi	r2,r16,8
 2007904:	10001226 	beq	r2,zero,2007950 <__divdf3+0x650>
 2007908:	8880022c 	andhi	r2,r17,8
 200790c:	1000101e 	bne	r2,zero,2007950 <__divdf3+0x650>
 2007910:	00800434 	movhi	r2,16
 2007914:	89400234 	orhi	r5,r17,8
 2007918:	10bfffc4 	addi	r2,r2,-1
 200791c:	b007883a 	mov	r3,r22
 2007920:	288a703a 	and	r5,r5,r2
 2007924:	4025883a 	mov	r18,r8
 2007928:	003f3106 	br	20075f0 <__divdf3+0x2f0>
 200792c:	008000c4 	movi	r2,3
 2007930:	3880a626 	beq	r7,r2,2007bcc <__divdf3+0x8cc>
 2007934:	00800044 	movi	r2,1
 2007938:	3880521e 	bne	r7,r2,2007a84 <__divdf3+0x784>
 200793c:	b807883a 	mov	r3,r23
 2007940:	0005883a 	mov	r2,zero
 2007944:	000b883a 	mov	r5,zero
 2007948:	0025883a 	mov	r18,zero
 200794c:	003ecb06 	br	200747c <__divdf3+0x17c>
 2007950:	00800434 	movhi	r2,16
 2007954:	81400234 	orhi	r5,r16,8
 2007958:	10bfffc4 	addi	r2,r2,-1
 200795c:	a007883a 	mov	r3,r20
 2007960:	288a703a 	and	r5,r5,r2
 2007964:	003f2206 	br	20075f0 <__divdf3+0x2f0>
 2007968:	183fca26 	beq	r3,zero,2007894 <__divdf3+0x594>
 200796c:	e5ef883a 	add	r23,fp,r23
 2007970:	40bfffc4 	addi	r2,r8,-1
 2007974:	bf00392e 	bgeu	r23,fp,2007a5c <__divdf3+0x75c>
 2007978:	1011883a 	mov	r8,r2
 200797c:	ba7fc41e 	bne	r23,r9,2007890 <__divdf3+0x590>
 2007980:	b0ffc31e 	bne	r22,r3,2007890 <__divdf3+0x590>
 2007984:	003fc306 	br	2007894 <__divdf3+0x594>
 2007988:	143ff604 	addi	r16,r2,-40
 200798c:	9c20983a 	sll	r16,r19,r16
 2007990:	0025883a 	mov	r18,zero
 2007994:	003ee206 	br	2007520 <__divdf3+0x220>
 2007998:	d9800315 	stw	r6,12(sp)
 200799c:	d9c00215 	stw	r7,8(sp)
 20079a0:	200910c0 	call	200910c <__clzsi2>
 20079a4:	10800804 	addi	r2,r2,32
 20079a8:	d9c00217 	ldw	r7,8(sp)
 20079ac:	d9800317 	ldw	r6,12(sp)
 20079b0:	003ed106 	br	20074f8 <__divdf3+0x1f8>
 20079b4:	147ff604 	addi	r17,r2,-40
 20079b8:	3462983a 	sll	r17,r6,r17
 20079bc:	0011883a 	mov	r8,zero
 20079c0:	003ef506 	br	2007598 <__divdf3+0x298>
 20079c4:	3009883a 	mov	r4,r6
 20079c8:	d9800315 	stw	r6,12(sp)
 20079cc:	da400115 	stw	r9,4(sp)
 20079d0:	200910c0 	call	200910c <__clzsi2>
 20079d4:	10800804 	addi	r2,r2,32
 20079d8:	da400117 	ldw	r9,4(sp)
 20079dc:	d9800317 	ldw	r6,12(sp)
 20079e0:	003ee306 	br	2007570 <__divdf3+0x270>
 20079e4:	85a1883a 	add	r16,r16,r22
 20079e8:	8585803a 	cmpltu	r2,r16,r22
 20079ec:	1705883a 	add	r2,r2,fp
 20079f0:	14a5883a 	add	r18,r2,r18
 20079f4:	88bfffc4 	addi	r2,r17,-1
 20079f8:	e4800c2e 	bgeu	fp,r18,2007a2c <__divdf3+0x72c>
 20079fc:	90c03e36 	bltu	r18,r3,2007af8 <__divdf3+0x7f8>
 2007a00:	1c806926 	beq	r3,r18,2007ba8 <__divdf3+0x8a8>
 2007a04:	90c7c83a 	sub	r3,r18,r3
 2007a08:	1023883a 	mov	r17,r2
 2007a0c:	003f5206 	br	2007758 <__divdf3+0x458>
 2007a10:	923f0436 	bltu	r18,r8,2007624 <__divdf3+0x324>
 2007a14:	800897fa 	slli	r4,r16,31
 2007a18:	9004d07a 	srli	r2,r18,1
 2007a1c:	8006d07a 	srli	r3,r16,1
 2007a20:	902097fa 	slli	r16,r18,31
 2007a24:	20a4b03a 	or	r18,r4,r2
 2007a28:	003f0106 	br	2007630 <__divdf3+0x330>
 2007a2c:	e4bff51e 	bne	fp,r18,2007a04 <__divdf3+0x704>
 2007a30:	85bff22e 	bgeu	r16,r22,20079fc <__divdf3+0x6fc>
 2007a34:	e0c7c83a 	sub	r3,fp,r3
 2007a38:	1023883a 	mov	r17,r2
 2007a3c:	003f4606 	br	2007758 <__divdf3+0x458>
 2007a40:	100f883a 	mov	r7,r2
 2007a44:	003f2b06 	br	20076f4 <__divdf3+0x3f4>
 2007a48:	180d883a 	mov	r6,r3
 2007a4c:	003f1306 	br	200769c <__divdf3+0x39c>
 2007a50:	813fe436 	bltu	r16,r4,20079e4 <__divdf3+0x6e4>
 2007a54:	0007883a 	mov	r3,zero
 2007a58:	003f3f06 	br	2007758 <__divdf3+0x458>
 2007a5c:	ba402c36 	bltu	r23,r9,2007b10 <__divdf3+0x810>
 2007a60:	4dc05426 	beq	r9,r23,2007bb4 <__divdf3+0x8b4>
 2007a64:	1011883a 	mov	r8,r2
 2007a68:	003f8906 	br	2007890 <__divdf3+0x590>
 2007a6c:	023fffc4 	movi	r8,-1
 2007a70:	003f8806 	br	2007894 <__divdf3+0x594>
 2007a74:	1811883a 	mov	r8,r3
 2007a78:	003f5406 	br	20077cc <__divdf3+0x4cc>
 2007a7c:	1025883a 	mov	r18,r2
 2007a80:	003f6d06 	br	2007838 <__divdf3+0x538>
 2007a84:	b827883a 	mov	r19,r23
 2007a88:	003f8206 	br	2007894 <__divdf3+0x594>
 2007a8c:	010007c4 	movi	r4,31
 2007a90:	20c02616 	blt	r4,r3,2007b2c <__divdf3+0x82c>
 2007a94:	00800804 	movi	r2,32
 2007a98:	10c5c83a 	sub	r2,r2,r3
 2007a9c:	888a983a 	sll	r5,r17,r2
 2007aa0:	40c8d83a 	srl	r4,r8,r3
 2007aa4:	4084983a 	sll	r2,r8,r2
 2007aa8:	88e2d83a 	srl	r17,r17,r3
 2007aac:	2906b03a 	or	r3,r5,r4
 2007ab0:	1004c03a 	cmpne	r2,r2,zero
 2007ab4:	1886b03a 	or	r3,r3,r2
 2007ab8:	188001cc 	andi	r2,r3,7
 2007abc:	10000726 	beq	r2,zero,2007adc <__divdf3+0x7dc>
 2007ac0:	188003cc 	andi	r2,r3,15
 2007ac4:	01000104 	movi	r4,4
 2007ac8:	11000426 	beq	r2,r4,2007adc <__divdf3+0x7dc>
 2007acc:	1805883a 	mov	r2,r3
 2007ad0:	10c00104 	addi	r3,r2,4
 2007ad4:	1885803a 	cmpltu	r2,r3,r2
 2007ad8:	88a3883a 	add	r17,r17,r2
 2007adc:	8880202c 	andhi	r2,r17,128
 2007ae0:	10002726 	beq	r2,zero,2007b80 <__divdf3+0x880>
 2007ae4:	98c0004c 	andi	r3,r19,1
 2007ae8:	00800044 	movi	r2,1
 2007aec:	000b883a 	mov	r5,zero
 2007af0:	0025883a 	mov	r18,zero
 2007af4:	003e6106 	br	200747c <__divdf3+0x17c>
 2007af8:	85a1883a 	add	r16,r16,r22
 2007afc:	8585803a 	cmpltu	r2,r16,r22
 2007b00:	1705883a 	add	r2,r2,fp
 2007b04:	14a5883a 	add	r18,r2,r18
 2007b08:	8c7fff84 	addi	r17,r17,-2
 2007b0c:	003f1106 	br	2007754 <__divdf3+0x454>
 2007b10:	b589883a 	add	r4,r22,r22
 2007b14:	25ad803a 	cmpltu	r22,r4,r22
 2007b18:	b739883a 	add	fp,r22,fp
 2007b1c:	40bfff84 	addi	r2,r8,-2
 2007b20:	bf2f883a 	add	r23,r23,fp
 2007b24:	202d883a 	mov	r22,r4
 2007b28:	003f9306 	br	2007978 <__divdf3+0x678>
 2007b2c:	013ff844 	movi	r4,-31
 2007b30:	2085c83a 	sub	r2,r4,r2
 2007b34:	8888d83a 	srl	r4,r17,r2
 2007b38:	00800804 	movi	r2,32
 2007b3c:	18802126 	beq	r3,r2,2007bc4 <__divdf3+0x8c4>
 2007b40:	00801004 	movi	r2,64
 2007b44:	10c5c83a 	sub	r2,r2,r3
 2007b48:	8884983a 	sll	r2,r17,r2
 2007b4c:	1204b03a 	or	r2,r2,r8
 2007b50:	1004c03a 	cmpne	r2,r2,zero
 2007b54:	2084b03a 	or	r2,r4,r2
 2007b58:	144001cc 	andi	r17,r2,7
 2007b5c:	88000d1e 	bne	r17,zero,2007b94 <__divdf3+0x894>
 2007b60:	000b883a 	mov	r5,zero
 2007b64:	1024d0fa 	srli	r18,r2,3
 2007b68:	98c0004c 	andi	r3,r19,1
 2007b6c:	0005883a 	mov	r2,zero
 2007b70:	9464b03a 	or	r18,r18,r17
 2007b74:	003e4106 	br	200747c <__divdf3+0x17c>
 2007b78:	1007883a 	mov	r3,r2
 2007b7c:	0023883a 	mov	r17,zero
 2007b80:	880a927a 	slli	r5,r17,9
 2007b84:	1805883a 	mov	r2,r3
 2007b88:	8822977a 	slli	r17,r17,29
 2007b8c:	280ad33a 	srli	r5,r5,12
 2007b90:	003ff406 	br	2007b64 <__divdf3+0x864>
 2007b94:	10c003cc 	andi	r3,r2,15
 2007b98:	01000104 	movi	r4,4
 2007b9c:	193ff626 	beq	r3,r4,2007b78 <__divdf3+0x878>
 2007ba0:	0023883a 	mov	r17,zero
 2007ba4:	003fca06 	br	2007ad0 <__divdf3+0x7d0>
 2007ba8:	813fd336 	bltu	r16,r4,2007af8 <__divdf3+0x7f8>
 2007bac:	1023883a 	mov	r17,r2
 2007bb0:	003fa806 	br	2007a54 <__divdf3+0x754>
 2007bb4:	b0ffd636 	bltu	r22,r3,2007b10 <__divdf3+0x810>
 2007bb8:	1011883a 	mov	r8,r2
 2007bbc:	b0ff341e 	bne	r22,r3,2007890 <__divdf3+0x590>
 2007bc0:	003f3406 	br	2007894 <__divdf3+0x594>
 2007bc4:	0005883a 	mov	r2,zero
 2007bc8:	003fe006 	br	2007b4c <__divdf3+0x84c>
 2007bcc:	00800434 	movhi	r2,16
 2007bd0:	89400234 	orhi	r5,r17,8
 2007bd4:	10bfffc4 	addi	r2,r2,-1
 2007bd8:	b807883a 	mov	r3,r23
 2007bdc:	288a703a 	and	r5,r5,r2
 2007be0:	4025883a 	mov	r18,r8
 2007be4:	003e8206 	br	20075f0 <__divdf3+0x2f0>

02007be8 <__eqdf2>:
 2007be8:	2804d53a 	srli	r2,r5,20
 2007bec:	3806d53a 	srli	r3,r7,20
 2007bf0:	02000434 	movhi	r8,16
 2007bf4:	423fffc4 	addi	r8,r8,-1
 2007bf8:	1081ffcc 	andi	r2,r2,2047
 2007bfc:	0281ffc4 	movi	r10,2047
 2007c00:	2a12703a 	and	r9,r5,r8
 2007c04:	18c1ffcc 	andi	r3,r3,2047
 2007c08:	3a10703a 	and	r8,r7,r8
 2007c0c:	280ad7fa 	srli	r5,r5,31
 2007c10:	380ed7fa 	srli	r7,r7,31
 2007c14:	12801026 	beq	r2,r10,2007c58 <__eqdf2+0x70>
 2007c18:	0281ffc4 	movi	r10,2047
 2007c1c:	1a800a26 	beq	r3,r10,2007c48 <__eqdf2+0x60>
 2007c20:	10c00226 	beq	r2,r3,2007c2c <__eqdf2+0x44>
 2007c24:	00800044 	movi	r2,1
 2007c28:	f800283a 	ret
 2007c2c:	4a3ffd1e 	bne	r9,r8,2007c24 <__eqdf2+0x3c>
 2007c30:	21bffc1e 	bne	r4,r6,2007c24 <__eqdf2+0x3c>
 2007c34:	29c00c26 	beq	r5,r7,2007c68 <__eqdf2+0x80>
 2007c38:	103ffa1e 	bne	r2,zero,2007c24 <__eqdf2+0x3c>
 2007c3c:	2244b03a 	or	r2,r4,r9
 2007c40:	1004c03a 	cmpne	r2,r2,zero
 2007c44:	f800283a 	ret
 2007c48:	3214b03a 	or	r10,r6,r8
 2007c4c:	503ff426 	beq	r10,zero,2007c20 <__eqdf2+0x38>
 2007c50:	00800044 	movi	r2,1
 2007c54:	f800283a 	ret
 2007c58:	2254b03a 	or	r10,r4,r9
 2007c5c:	503fee26 	beq	r10,zero,2007c18 <__eqdf2+0x30>
 2007c60:	00800044 	movi	r2,1
 2007c64:	f800283a 	ret
 2007c68:	0005883a 	mov	r2,zero
 2007c6c:	f800283a 	ret

02007c70 <__gedf2>:
 2007c70:	2804d53a 	srli	r2,r5,20
 2007c74:	3806d53a 	srli	r3,r7,20
 2007c78:	02000434 	movhi	r8,16
 2007c7c:	423fffc4 	addi	r8,r8,-1
 2007c80:	1081ffcc 	andi	r2,r2,2047
 2007c84:	0241ffc4 	movi	r9,2047
 2007c88:	2a14703a 	and	r10,r5,r8
 2007c8c:	18c1ffcc 	andi	r3,r3,2047
 2007c90:	3a10703a 	and	r8,r7,r8
 2007c94:	280ad7fa 	srli	r5,r5,31
 2007c98:	380ed7fa 	srli	r7,r7,31
 2007c9c:	12401d26 	beq	r2,r9,2007d14 <__gedf2+0xa4>
 2007ca0:	0241ffc4 	movi	r9,2047
 2007ca4:	1a401226 	beq	r3,r9,2007cf0 <__gedf2+0x80>
 2007ca8:	1000081e 	bne	r2,zero,2007ccc <__gedf2+0x5c>
 2007cac:	2296b03a 	or	r11,r4,r10
 2007cb0:	5813003a 	cmpeq	r9,r11,zero
 2007cb4:	1800091e 	bne	r3,zero,2007cdc <__gedf2+0x6c>
 2007cb8:	3218b03a 	or	r12,r6,r8
 2007cbc:	6000071e 	bne	r12,zero,2007cdc <__gedf2+0x6c>
 2007cc0:	0005883a 	mov	r2,zero
 2007cc4:	5800101e 	bne	r11,zero,2007d08 <__gedf2+0x98>
 2007cc8:	f800283a 	ret
 2007ccc:	18000c1e 	bne	r3,zero,2007d00 <__gedf2+0x90>
 2007cd0:	3212b03a 	or	r9,r6,r8
 2007cd4:	48000c26 	beq	r9,zero,2007d08 <__gedf2+0x98>
 2007cd8:	0013883a 	mov	r9,zero
 2007cdc:	39c03fcc 	andi	r7,r7,255
 2007ce0:	48000826 	beq	r9,zero,2007d04 <__gedf2+0x94>
 2007ce4:	38000926 	beq	r7,zero,2007d0c <__gedf2+0x9c>
 2007ce8:	00800044 	movi	r2,1
 2007cec:	f800283a 	ret
 2007cf0:	3212b03a 	or	r9,r6,r8
 2007cf4:	483fec26 	beq	r9,zero,2007ca8 <__gedf2+0x38>
 2007cf8:	00bfff84 	movi	r2,-2
 2007cfc:	f800283a 	ret
 2007d00:	39c03fcc 	andi	r7,r7,255
 2007d04:	29c00626 	beq	r5,r7,2007d20 <__gedf2+0xb0>
 2007d08:	283ff726 	beq	r5,zero,2007ce8 <__gedf2+0x78>
 2007d0c:	00bfffc4 	movi	r2,-1
 2007d10:	f800283a 	ret
 2007d14:	2292b03a 	or	r9,r4,r10
 2007d18:	483fe126 	beq	r9,zero,2007ca0 <__gedf2+0x30>
 2007d1c:	003ff606 	br	2007cf8 <__gedf2+0x88>
 2007d20:	18bff916 	blt	r3,r2,2007d08 <__gedf2+0x98>
 2007d24:	10c00316 	blt	r2,r3,2007d34 <__gedf2+0xc4>
 2007d28:	42bff736 	bltu	r8,r10,2007d08 <__gedf2+0x98>
 2007d2c:	52000326 	beq	r10,r8,2007d3c <__gedf2+0xcc>
 2007d30:	5200042e 	bgeu	r10,r8,2007d44 <__gedf2+0xd4>
 2007d34:	283fec1e 	bne	r5,zero,2007ce8 <__gedf2+0x78>
 2007d38:	003ff406 	br	2007d0c <__gedf2+0x9c>
 2007d3c:	313ff236 	bltu	r6,r4,2007d08 <__gedf2+0x98>
 2007d40:	21bffc36 	bltu	r4,r6,2007d34 <__gedf2+0xc4>
 2007d44:	0005883a 	mov	r2,zero
 2007d48:	f800283a 	ret

02007d4c <__ledf2>:
 2007d4c:	2804d53a 	srli	r2,r5,20
 2007d50:	3810d53a 	srli	r8,r7,20
 2007d54:	00c00434 	movhi	r3,16
 2007d58:	18ffffc4 	addi	r3,r3,-1
 2007d5c:	1081ffcc 	andi	r2,r2,2047
 2007d60:	0241ffc4 	movi	r9,2047
 2007d64:	28d4703a 	and	r10,r5,r3
 2007d68:	4201ffcc 	andi	r8,r8,2047
 2007d6c:	38c6703a 	and	r3,r7,r3
 2007d70:	280ad7fa 	srli	r5,r5,31
 2007d74:	380ed7fa 	srli	r7,r7,31
 2007d78:	12401f26 	beq	r2,r9,2007df8 <__ledf2+0xac>
 2007d7c:	0241ffc4 	movi	r9,2047
 2007d80:	42401426 	beq	r8,r9,2007dd4 <__ledf2+0x88>
 2007d84:	1000091e 	bne	r2,zero,2007dac <__ledf2+0x60>
 2007d88:	2296b03a 	or	r11,r4,r10
 2007d8c:	5813003a 	cmpeq	r9,r11,zero
 2007d90:	29403fcc 	andi	r5,r5,255
 2007d94:	40000a1e 	bne	r8,zero,2007dc0 <__ledf2+0x74>
 2007d98:	30d8b03a 	or	r12,r6,r3
 2007d9c:	6000081e 	bne	r12,zero,2007dc0 <__ledf2+0x74>
 2007da0:	0005883a 	mov	r2,zero
 2007da4:	5800111e 	bne	r11,zero,2007dec <__ledf2+0xa0>
 2007da8:	f800283a 	ret
 2007dac:	29403fcc 	andi	r5,r5,255
 2007db0:	40000c1e 	bne	r8,zero,2007de4 <__ledf2+0x98>
 2007db4:	30d2b03a 	or	r9,r6,r3
 2007db8:	48000c26 	beq	r9,zero,2007dec <__ledf2+0xa0>
 2007dbc:	0013883a 	mov	r9,zero
 2007dc0:	39c03fcc 	andi	r7,r7,255
 2007dc4:	48000826 	beq	r9,zero,2007de8 <__ledf2+0x9c>
 2007dc8:	38001126 	beq	r7,zero,2007e10 <__ledf2+0xc4>
 2007dcc:	00800044 	movi	r2,1
 2007dd0:	f800283a 	ret
 2007dd4:	30d2b03a 	or	r9,r6,r3
 2007dd8:	483fea26 	beq	r9,zero,2007d84 <__ledf2+0x38>
 2007ddc:	00800084 	movi	r2,2
 2007de0:	f800283a 	ret
 2007de4:	39c03fcc 	andi	r7,r7,255
 2007de8:	39400726 	beq	r7,r5,2007e08 <__ledf2+0xbc>
 2007dec:	2800081e 	bne	r5,zero,2007e10 <__ledf2+0xc4>
 2007df0:	00800044 	movi	r2,1
 2007df4:	f800283a 	ret
 2007df8:	2292b03a 	or	r9,r4,r10
 2007dfc:	483fdf26 	beq	r9,zero,2007d7c <__ledf2+0x30>
 2007e00:	00800084 	movi	r2,2
 2007e04:	f800283a 	ret
 2007e08:	4080030e 	bge	r8,r2,2007e18 <__ledf2+0xcc>
 2007e0c:	383fef26 	beq	r7,zero,2007dcc <__ledf2+0x80>
 2007e10:	00bfffc4 	movi	r2,-1
 2007e14:	f800283a 	ret
 2007e18:	123feb16 	blt	r2,r8,2007dc8 <__ledf2+0x7c>
 2007e1c:	1abff336 	bltu	r3,r10,2007dec <__ledf2+0xa0>
 2007e20:	50c00326 	beq	r10,r3,2007e30 <__ledf2+0xe4>
 2007e24:	50c0042e 	bgeu	r10,r3,2007e38 <__ledf2+0xec>
 2007e28:	283fe81e 	bne	r5,zero,2007dcc <__ledf2+0x80>
 2007e2c:	003ff806 	br	2007e10 <__ledf2+0xc4>
 2007e30:	313fee36 	bltu	r6,r4,2007dec <__ledf2+0xa0>
 2007e34:	21bffc36 	bltu	r4,r6,2007e28 <__ledf2+0xdc>
 2007e38:	0005883a 	mov	r2,zero
 2007e3c:	f800283a 	ret

02007e40 <__muldf3>:
 2007e40:	defff304 	addi	sp,sp,-52
 2007e44:	2804d53a 	srli	r2,r5,20
 2007e48:	dd800915 	stw	r22,36(sp)
 2007e4c:	282cd7fa 	srli	r22,r5,31
 2007e50:	dc000315 	stw	r16,12(sp)
 2007e54:	04000434 	movhi	r16,16
 2007e58:	dd400815 	stw	r21,32(sp)
 2007e5c:	dc800515 	stw	r18,20(sp)
 2007e60:	843fffc4 	addi	r16,r16,-1
 2007e64:	dfc00c15 	stw	ra,48(sp)
 2007e68:	df000b15 	stw	fp,44(sp)
 2007e6c:	ddc00a15 	stw	r23,40(sp)
 2007e70:	dd000715 	stw	r20,28(sp)
 2007e74:	dcc00615 	stw	r19,24(sp)
 2007e78:	dc400415 	stw	r17,16(sp)
 2007e7c:	1481ffcc 	andi	r18,r2,2047
 2007e80:	2c20703a 	and	r16,r5,r16
 2007e84:	b02b883a 	mov	r21,r22
 2007e88:	b2403fcc 	andi	r9,r22,255
 2007e8c:	90006026 	beq	r18,zero,2008010 <__muldf3+0x1d0>
 2007e90:	0081ffc4 	movi	r2,2047
 2007e94:	2029883a 	mov	r20,r4
 2007e98:	90803626 	beq	r18,r2,2007f74 <__muldf3+0x134>
 2007e9c:	80800434 	orhi	r2,r16,16
 2007ea0:	100490fa 	slli	r2,r2,3
 2007ea4:	2020d77a 	srli	r16,r4,29
 2007ea8:	202890fa 	slli	r20,r4,3
 2007eac:	94bf0044 	addi	r18,r18,-1023
 2007eb0:	80a0b03a 	or	r16,r16,r2
 2007eb4:	0027883a 	mov	r19,zero
 2007eb8:	0039883a 	mov	fp,zero
 2007ebc:	3804d53a 	srli	r2,r7,20
 2007ec0:	382ed7fa 	srli	r23,r7,31
 2007ec4:	04400434 	movhi	r17,16
 2007ec8:	8c7fffc4 	addi	r17,r17,-1
 2007ecc:	1081ffcc 	andi	r2,r2,2047
 2007ed0:	3011883a 	mov	r8,r6
 2007ed4:	3c62703a 	and	r17,r7,r17
 2007ed8:	ba803fcc 	andi	r10,r23,255
 2007edc:	10006d26 	beq	r2,zero,2008094 <__muldf3+0x254>
 2007ee0:	00c1ffc4 	movi	r3,2047
 2007ee4:	10c06526 	beq	r2,r3,200807c <__muldf3+0x23c>
 2007ee8:	88c00434 	orhi	r3,r17,16
 2007eec:	180690fa 	slli	r3,r3,3
 2007ef0:	3022d77a 	srli	r17,r6,29
 2007ef4:	301090fa 	slli	r8,r6,3
 2007ef8:	10bf0044 	addi	r2,r2,-1023
 2007efc:	88e2b03a 	or	r17,r17,r3
 2007f00:	000b883a 	mov	r5,zero
 2007f04:	9085883a 	add	r2,r18,r2
 2007f08:	2cc8b03a 	or	r4,r5,r19
 2007f0c:	00c003c4 	movi	r3,15
 2007f10:	bdacf03a 	xor	r22,r23,r22
 2007f14:	12c00044 	addi	r11,r2,1
 2007f18:	19009936 	bltu	r3,r4,2008180 <__muldf3+0x340>
 2007f1c:	200890ba 	slli	r4,r4,2
 2007f20:	00c08034 	movhi	r3,512
 2007f24:	18dfcd04 	addi	r3,r3,32564
 2007f28:	20c9883a 	add	r4,r4,r3
 2007f2c:	20c00017 	ldw	r3,0(r4)
 2007f30:	1800683a 	jmp	r3
 2007f34:	02008180 	call	200818 <__alt_mem_mem_Nios_PI+0x818>
 2007f38:	02007f94 	movui	r8,510
 2007f3c:	02007f94 	movui	r8,510
 2007f40:	02007f90 	cmplti	r8,zero,510
 2007f44:	0200815c 	xori	r8,zero,517
 2007f48:	0200815c 	xori	r8,zero,517
 2007f4c:	02008144 	movi	r8,517
 2007f50:	02007f90 	cmplti	r8,zero,510
 2007f54:	0200815c 	xori	r8,zero,517
 2007f58:	02008144 	movi	r8,517
 2007f5c:	0200815c 	xori	r8,zero,517
 2007f60:	02007f90 	cmplti	r8,zero,510
 2007f64:	0200816c 	andhi	r8,zero,517
 2007f68:	0200816c 	andhi	r8,zero,517
 2007f6c:	0200816c 	andhi	r8,zero,517
 2007f70:	02008388 	cmpgei	r8,zero,526
 2007f74:	2404b03a 	or	r2,r4,r16
 2007f78:	10006f1e 	bne	r2,zero,2008138 <__muldf3+0x2f8>
 2007f7c:	04c00204 	movi	r19,8
 2007f80:	0021883a 	mov	r16,zero
 2007f84:	0029883a 	mov	r20,zero
 2007f88:	07000084 	movi	fp,2
 2007f8c:	003fcb06 	br	2007ebc <__muldf3+0x7c>
 2007f90:	502d883a 	mov	r22,r10
 2007f94:	00800084 	movi	r2,2
 2007f98:	28805726 	beq	r5,r2,20080f8 <__muldf3+0x2b8>
 2007f9c:	008000c4 	movi	r2,3
 2007fa0:	28816626 	beq	r5,r2,200853c <__muldf3+0x6fc>
 2007fa4:	00800044 	movi	r2,1
 2007fa8:	2881411e 	bne	r5,r2,20084b0 <__muldf3+0x670>
 2007fac:	b02b883a 	mov	r21,r22
 2007fb0:	0005883a 	mov	r2,zero
 2007fb4:	000b883a 	mov	r5,zero
 2007fb8:	0029883a 	mov	r20,zero
 2007fbc:	1004953a 	slli	r2,r2,20
 2007fc0:	a8c03fcc 	andi	r3,r21,255
 2007fc4:	04400434 	movhi	r17,16
 2007fc8:	8c7fffc4 	addi	r17,r17,-1
 2007fcc:	180697fa 	slli	r3,r3,31
 2007fd0:	2c4a703a 	and	r5,r5,r17
 2007fd4:	288ab03a 	or	r5,r5,r2
 2007fd8:	28c6b03a 	or	r3,r5,r3
 2007fdc:	a005883a 	mov	r2,r20
 2007fe0:	dfc00c17 	ldw	ra,48(sp)
 2007fe4:	df000b17 	ldw	fp,44(sp)
 2007fe8:	ddc00a17 	ldw	r23,40(sp)
 2007fec:	dd800917 	ldw	r22,36(sp)
 2007ff0:	dd400817 	ldw	r21,32(sp)
 2007ff4:	dd000717 	ldw	r20,28(sp)
 2007ff8:	dcc00617 	ldw	r19,24(sp)
 2007ffc:	dc800517 	ldw	r18,20(sp)
 2008000:	dc400417 	ldw	r17,16(sp)
 2008004:	dc000317 	ldw	r16,12(sp)
 2008008:	dec00d04 	addi	sp,sp,52
 200800c:	f800283a 	ret
 2008010:	2404b03a 	or	r2,r4,r16
 2008014:	2027883a 	mov	r19,r4
 2008018:	10004226 	beq	r2,zero,2008124 <__muldf3+0x2e4>
 200801c:	8000fc26 	beq	r16,zero,2008410 <__muldf3+0x5d0>
 2008020:	8009883a 	mov	r4,r16
 2008024:	d9800215 	stw	r6,8(sp)
 2008028:	d9c00015 	stw	r7,0(sp)
 200802c:	da400115 	stw	r9,4(sp)
 2008030:	200910c0 	call	200910c <__clzsi2>
 2008034:	d9800217 	ldw	r6,8(sp)
 2008038:	d9c00017 	ldw	r7,0(sp)
 200803c:	da400117 	ldw	r9,4(sp)
 2008040:	113ffd44 	addi	r4,r2,-11
 2008044:	00c00704 	movi	r3,28
 2008048:	1900ed16 	blt	r3,r4,2008400 <__muldf3+0x5c0>
 200804c:	00c00744 	movi	r3,29
 2008050:	147ffe04 	addi	r17,r2,-8
 2008054:	1907c83a 	sub	r3,r3,r4
 2008058:	8460983a 	sll	r16,r16,r17
 200805c:	98c6d83a 	srl	r3,r19,r3
 2008060:	9c68983a 	sll	r20,r19,r17
 2008064:	1c20b03a 	or	r16,r3,r16
 2008068:	1080fcc4 	addi	r2,r2,1011
 200806c:	00a5c83a 	sub	r18,zero,r2
 2008070:	0027883a 	mov	r19,zero
 2008074:	0039883a 	mov	fp,zero
 2008078:	003f9006 	br	2007ebc <__muldf3+0x7c>
 200807c:	3446b03a 	or	r3,r6,r17
 2008080:	1800261e 	bne	r3,zero,200811c <__muldf3+0x2dc>
 2008084:	0023883a 	mov	r17,zero
 2008088:	0011883a 	mov	r8,zero
 200808c:	01400084 	movi	r5,2
 2008090:	003f9c06 	br	2007f04 <__muldf3+0xc4>
 2008094:	3446b03a 	or	r3,r6,r17
 2008098:	18001c26 	beq	r3,zero,200810c <__muldf3+0x2cc>
 200809c:	8800ce26 	beq	r17,zero,20083d8 <__muldf3+0x598>
 20080a0:	8809883a 	mov	r4,r17
 20080a4:	d9800215 	stw	r6,8(sp)
 20080a8:	da400115 	stw	r9,4(sp)
 20080ac:	da800015 	stw	r10,0(sp)
 20080b0:	200910c0 	call	200910c <__clzsi2>
 20080b4:	d9800217 	ldw	r6,8(sp)
 20080b8:	da400117 	ldw	r9,4(sp)
 20080bc:	da800017 	ldw	r10,0(sp)
 20080c0:	113ffd44 	addi	r4,r2,-11
 20080c4:	00c00704 	movi	r3,28
 20080c8:	1900bf16 	blt	r3,r4,20083c8 <__muldf3+0x588>
 20080cc:	00c00744 	movi	r3,29
 20080d0:	123ffe04 	addi	r8,r2,-8
 20080d4:	1907c83a 	sub	r3,r3,r4
 20080d8:	8a22983a 	sll	r17,r17,r8
 20080dc:	30c6d83a 	srl	r3,r6,r3
 20080e0:	3210983a 	sll	r8,r6,r8
 20080e4:	1c62b03a 	or	r17,r3,r17
 20080e8:	1080fcc4 	addi	r2,r2,1011
 20080ec:	0085c83a 	sub	r2,zero,r2
 20080f0:	000b883a 	mov	r5,zero
 20080f4:	003f8306 	br	2007f04 <__muldf3+0xc4>
 20080f8:	b02b883a 	mov	r21,r22
 20080fc:	0081ffc4 	movi	r2,2047
 2008100:	000b883a 	mov	r5,zero
 2008104:	0029883a 	mov	r20,zero
 2008108:	003fac06 	br	2007fbc <__muldf3+0x17c>
 200810c:	0023883a 	mov	r17,zero
 2008110:	0011883a 	mov	r8,zero
 2008114:	01400044 	movi	r5,1
 2008118:	003f7a06 	br	2007f04 <__muldf3+0xc4>
 200811c:	014000c4 	movi	r5,3
 2008120:	003f7806 	br	2007f04 <__muldf3+0xc4>
 2008124:	04c00104 	movi	r19,4
 2008128:	0021883a 	mov	r16,zero
 200812c:	0029883a 	mov	r20,zero
 2008130:	07000044 	movi	fp,1
 2008134:	003f6106 	br	2007ebc <__muldf3+0x7c>
 2008138:	04c00304 	movi	r19,12
 200813c:	070000c4 	movi	fp,3
 2008140:	003f5e06 	br	2007ebc <__muldf3+0x7c>
 2008144:	01400434 	movhi	r5,16
 2008148:	002b883a 	mov	r21,zero
 200814c:	297fffc4 	addi	r5,r5,-1
 2008150:	053fffc4 	movi	r20,-1
 2008154:	0081ffc4 	movi	r2,2047
 2008158:	003f9806 	br	2007fbc <__muldf3+0x17c>
 200815c:	8023883a 	mov	r17,r16
 2008160:	a011883a 	mov	r8,r20
 2008164:	e00b883a 	mov	r5,fp
 2008168:	003f8a06 	br	2007f94 <__muldf3+0x154>
 200816c:	8023883a 	mov	r17,r16
 2008170:	a011883a 	mov	r8,r20
 2008174:	482d883a 	mov	r22,r9
 2008178:	e00b883a 	mov	r5,fp
 200817c:	003f8506 	br	2007f94 <__muldf3+0x154>
 2008180:	a00ad43a 	srli	r5,r20,16
 2008184:	401ad43a 	srli	r13,r8,16
 2008188:	a53fffcc 	andi	r20,r20,65535
 200818c:	423fffcc 	andi	r8,r8,65535
 2008190:	4519383a 	mul	r12,r8,r20
 2008194:	4147383a 	mul	r3,r8,r5
 2008198:	6d09383a 	mul	r4,r13,r20
 200819c:	600cd43a 	srli	r6,r12,16
 20081a0:	2b5d383a 	mul	r14,r5,r13
 20081a4:	20c9883a 	add	r4,r4,r3
 20081a8:	310d883a 	add	r6,r6,r4
 20081ac:	30c0022e 	bgeu	r6,r3,20081b8 <__muldf3+0x378>
 20081b0:	00c00074 	movhi	r3,1
 20081b4:	70dd883a 	add	r14,r14,r3
 20081b8:	8826d43a 	srli	r19,r17,16
 20081bc:	8bffffcc 	andi	r15,r17,65535
 20081c0:	7d23383a 	mul	r17,r15,r20
 20081c4:	7949383a 	mul	r4,r15,r5
 20081c8:	9d29383a 	mul	r20,r19,r20
 20081cc:	8814d43a 	srli	r10,r17,16
 20081d0:	3012943a 	slli	r9,r6,16
 20081d4:	a129883a 	add	r20,r20,r4
 20081d8:	633fffcc 	andi	r12,r12,65535
 20081dc:	5515883a 	add	r10,r10,r20
 20081e0:	3006d43a 	srli	r3,r6,16
 20081e4:	4b13883a 	add	r9,r9,r12
 20081e8:	2ccb383a 	mul	r5,r5,r19
 20081ec:	5100022e 	bgeu	r10,r4,20081f8 <__muldf3+0x3b8>
 20081f0:	01000074 	movhi	r4,1
 20081f4:	290b883a 	add	r5,r5,r4
 20081f8:	802ad43a 	srli	r21,r16,16
 20081fc:	843fffcc 	andi	r16,r16,65535
 2008200:	440d383a 	mul	r6,r8,r16
 2008204:	4565383a 	mul	r18,r8,r21
 2008208:	8349383a 	mul	r4,r16,r13
 200820c:	500e943a 	slli	r7,r10,16
 2008210:	3010d43a 	srli	r8,r6,16
 2008214:	5028d43a 	srli	r20,r10,16
 2008218:	2489883a 	add	r4,r4,r18
 200821c:	8abfffcc 	andi	r10,r17,65535
 2008220:	3a95883a 	add	r10,r7,r10
 2008224:	4119883a 	add	r12,r8,r4
 2008228:	a169883a 	add	r20,r20,r5
 200822c:	1a87883a 	add	r3,r3,r10
 2008230:	6d5b383a 	mul	r13,r13,r21
 2008234:	6480022e 	bgeu	r12,r18,2008240 <__muldf3+0x400>
 2008238:	01000074 	movhi	r4,1
 200823c:	691b883a 	add	r13,r13,r4
 2008240:	7c25383a 	mul	r18,r15,r16
 2008244:	7d4b383a 	mul	r5,r15,r21
 2008248:	84cf383a 	mul	r7,r16,r19
 200824c:	901ed43a 	srli	r15,r18,16
 2008250:	6008d43a 	srli	r4,r12,16
 2008254:	6010943a 	slli	r8,r12,16
 2008258:	394f883a 	add	r7,r7,r5
 200825c:	333fffcc 	andi	r12,r6,65535
 2008260:	79df883a 	add	r15,r15,r7
 2008264:	235b883a 	add	r13,r4,r13
 2008268:	9d63383a 	mul	r17,r19,r21
 200826c:	4309883a 	add	r4,r8,r12
 2008270:	7940022e 	bgeu	r15,r5,200827c <__muldf3+0x43c>
 2008274:	01400074 	movhi	r5,1
 2008278:	8963883a 	add	r17,r17,r5
 200827c:	780a943a 	slli	r5,r15,16
 2008280:	91bfffcc 	andi	r6,r18,65535
 2008284:	70c7883a 	add	r3,r14,r3
 2008288:	298d883a 	add	r6,r5,r6
 200828c:	1a8f803a 	cmpltu	r7,r3,r10
 2008290:	350b883a 	add	r5,r6,r20
 2008294:	20c7883a 	add	r3,r4,r3
 2008298:	3955883a 	add	r10,r7,r5
 200829c:	1909803a 	cmpltu	r4,r3,r4
 20082a0:	6a91883a 	add	r8,r13,r10
 20082a4:	780cd43a 	srli	r6,r15,16
 20082a8:	2219883a 	add	r12,r4,r8
 20082ac:	2d0b803a 	cmpltu	r5,r5,r20
 20082b0:	51cf803a 	cmpltu	r7,r10,r7
 20082b4:	29ceb03a 	or	r7,r5,r7
 20082b8:	4351803a 	cmpltu	r8,r8,r13
 20082bc:	610b803a 	cmpltu	r5,r12,r4
 20082c0:	4148b03a 	or	r4,r8,r5
 20082c4:	398f883a 	add	r7,r7,r6
 20082c8:	3909883a 	add	r4,r7,r4
 20082cc:	1810927a 	slli	r8,r3,9
 20082d0:	2449883a 	add	r4,r4,r17
 20082d4:	2008927a 	slli	r4,r4,9
 20082d8:	6022d5fa 	srli	r17,r12,23
 20082dc:	1806d5fa 	srli	r3,r3,23
 20082e0:	4252b03a 	or	r9,r8,r9
 20082e4:	600a927a 	slli	r5,r12,9
 20082e8:	4810c03a 	cmpne	r8,r9,zero
 20082ec:	2462b03a 	or	r17,r4,r17
 20082f0:	40c6b03a 	or	r3,r8,r3
 20082f4:	8900402c 	andhi	r4,r17,256
 20082f8:	1950b03a 	or	r8,r3,r5
 20082fc:	20000726 	beq	r4,zero,200831c <__muldf3+0x4dc>
 2008300:	4006d07a 	srli	r3,r8,1
 2008304:	880497fa 	slli	r2,r17,31
 2008308:	4200004c 	andi	r8,r8,1
 200830c:	8822d07a 	srli	r17,r17,1
 2008310:	1a10b03a 	or	r8,r3,r8
 2008314:	1210b03a 	or	r8,r2,r8
 2008318:	5805883a 	mov	r2,r11
 200831c:	1140ffc4 	addi	r5,r2,1023
 2008320:	0140440e 	bge	zero,r5,2008434 <__muldf3+0x5f4>
 2008324:	40c001cc 	andi	r3,r8,7
 2008328:	18000726 	beq	r3,zero,2008348 <__muldf3+0x508>
 200832c:	40c003cc 	andi	r3,r8,15
 2008330:	01000104 	movi	r4,4
 2008334:	19000426 	beq	r3,r4,2008348 <__muldf3+0x508>
 2008338:	4107883a 	add	r3,r8,r4
 200833c:	1a11803a 	cmpltu	r8,r3,r8
 2008340:	8a23883a 	add	r17,r17,r8
 2008344:	1811883a 	mov	r8,r3
 2008348:	88c0402c 	andhi	r3,r17,256
 200834c:	18000426 	beq	r3,zero,2008360 <__muldf3+0x520>
 2008350:	11410004 	addi	r5,r2,1024
 2008354:	00bfc034 	movhi	r2,65280
 2008358:	10bfffc4 	addi	r2,r2,-1
 200835c:	88a2703a 	and	r17,r17,r2
 2008360:	0081ff84 	movi	r2,2046
 2008364:	117f6416 	blt	r2,r5,20080f8 <__muldf3+0x2b8>
 2008368:	8828977a 	slli	r20,r17,29
 200836c:	4010d0fa 	srli	r8,r8,3
 2008370:	8822927a 	slli	r17,r17,9
 2008374:	2881ffcc 	andi	r2,r5,2047
 2008378:	a228b03a 	or	r20,r20,r8
 200837c:	880ad33a 	srli	r5,r17,12
 2008380:	b02b883a 	mov	r21,r22
 2008384:	003f0d06 	br	2007fbc <__muldf3+0x17c>
 2008388:	8080022c 	andhi	r2,r16,8
 200838c:	10000926 	beq	r2,zero,20083b4 <__muldf3+0x574>
 2008390:	8880022c 	andhi	r2,r17,8
 2008394:	1000071e 	bne	r2,zero,20083b4 <__muldf3+0x574>
 2008398:	00800434 	movhi	r2,16
 200839c:	89400234 	orhi	r5,r17,8
 20083a0:	10bfffc4 	addi	r2,r2,-1
 20083a4:	b82b883a 	mov	r21,r23
 20083a8:	288a703a 	and	r5,r5,r2
 20083ac:	4029883a 	mov	r20,r8
 20083b0:	003f6806 	br	2008154 <__muldf3+0x314>
 20083b4:	00800434 	movhi	r2,16
 20083b8:	81400234 	orhi	r5,r16,8
 20083bc:	10bfffc4 	addi	r2,r2,-1
 20083c0:	288a703a 	and	r5,r5,r2
 20083c4:	003f6306 	br	2008154 <__muldf3+0x314>
 20083c8:	147ff604 	addi	r17,r2,-40
 20083cc:	3462983a 	sll	r17,r6,r17
 20083d0:	0011883a 	mov	r8,zero
 20083d4:	003f4406 	br	20080e8 <__muldf3+0x2a8>
 20083d8:	3009883a 	mov	r4,r6
 20083dc:	d9800215 	stw	r6,8(sp)
 20083e0:	da400115 	stw	r9,4(sp)
 20083e4:	da800015 	stw	r10,0(sp)
 20083e8:	200910c0 	call	200910c <__clzsi2>
 20083ec:	10800804 	addi	r2,r2,32
 20083f0:	da800017 	ldw	r10,0(sp)
 20083f4:	da400117 	ldw	r9,4(sp)
 20083f8:	d9800217 	ldw	r6,8(sp)
 20083fc:	003f3006 	br	20080c0 <__muldf3+0x280>
 2008400:	143ff604 	addi	r16,r2,-40
 2008404:	9c20983a 	sll	r16,r19,r16
 2008408:	0029883a 	mov	r20,zero
 200840c:	003f1606 	br	2008068 <__muldf3+0x228>
 2008410:	d9800215 	stw	r6,8(sp)
 2008414:	d9c00015 	stw	r7,0(sp)
 2008418:	da400115 	stw	r9,4(sp)
 200841c:	200910c0 	call	200910c <__clzsi2>
 2008420:	10800804 	addi	r2,r2,32
 2008424:	da400117 	ldw	r9,4(sp)
 2008428:	d9c00017 	ldw	r7,0(sp)
 200842c:	d9800217 	ldw	r6,8(sp)
 2008430:	003f0306 	br	2008040 <__muldf3+0x200>
 2008434:	00c00044 	movi	r3,1
 2008438:	1947c83a 	sub	r3,r3,r5
 200843c:	00800e04 	movi	r2,56
 2008440:	10feda16 	blt	r2,r3,2007fac <__muldf3+0x16c>
 2008444:	008007c4 	movi	r2,31
 2008448:	10c01b16 	blt	r2,r3,20084b8 <__muldf3+0x678>
 200844c:	00800804 	movi	r2,32
 2008450:	10c5c83a 	sub	r2,r2,r3
 2008454:	888a983a 	sll	r5,r17,r2
 2008458:	40c8d83a 	srl	r4,r8,r3
 200845c:	4084983a 	sll	r2,r8,r2
 2008460:	88e2d83a 	srl	r17,r17,r3
 2008464:	2906b03a 	or	r3,r5,r4
 2008468:	1004c03a 	cmpne	r2,r2,zero
 200846c:	1886b03a 	or	r3,r3,r2
 2008470:	188001cc 	andi	r2,r3,7
 2008474:	10000726 	beq	r2,zero,2008494 <__muldf3+0x654>
 2008478:	188003cc 	andi	r2,r3,15
 200847c:	01000104 	movi	r4,4
 2008480:	11000426 	beq	r2,r4,2008494 <__muldf3+0x654>
 2008484:	1805883a 	mov	r2,r3
 2008488:	10c00104 	addi	r3,r2,4
 200848c:	1885803a 	cmpltu	r2,r3,r2
 2008490:	88a3883a 	add	r17,r17,r2
 2008494:	8880202c 	andhi	r2,r17,128
 2008498:	10001c26 	beq	r2,zero,200850c <__muldf3+0x6cc>
 200849c:	b02b883a 	mov	r21,r22
 20084a0:	00800044 	movi	r2,1
 20084a4:	000b883a 	mov	r5,zero
 20084a8:	0029883a 	mov	r20,zero
 20084ac:	003ec306 	br	2007fbc <__muldf3+0x17c>
 20084b0:	5805883a 	mov	r2,r11
 20084b4:	003f9906 	br	200831c <__muldf3+0x4dc>
 20084b8:	00bff844 	movi	r2,-31
 20084bc:	1145c83a 	sub	r2,r2,r5
 20084c0:	8888d83a 	srl	r4,r17,r2
 20084c4:	00800804 	movi	r2,32
 20084c8:	18801a26 	beq	r3,r2,2008534 <__muldf3+0x6f4>
 20084cc:	00801004 	movi	r2,64
 20084d0:	10c5c83a 	sub	r2,r2,r3
 20084d4:	8884983a 	sll	r2,r17,r2
 20084d8:	1204b03a 	or	r2,r2,r8
 20084dc:	1004c03a 	cmpne	r2,r2,zero
 20084e0:	2084b03a 	or	r2,r4,r2
 20084e4:	144001cc 	andi	r17,r2,7
 20084e8:	88000d1e 	bne	r17,zero,2008520 <__muldf3+0x6e0>
 20084ec:	000b883a 	mov	r5,zero
 20084f0:	1028d0fa 	srli	r20,r2,3
 20084f4:	b02b883a 	mov	r21,r22
 20084f8:	0005883a 	mov	r2,zero
 20084fc:	a468b03a 	or	r20,r20,r17
 2008500:	003eae06 	br	2007fbc <__muldf3+0x17c>
 2008504:	1007883a 	mov	r3,r2
 2008508:	0023883a 	mov	r17,zero
 200850c:	880a927a 	slli	r5,r17,9
 2008510:	1805883a 	mov	r2,r3
 2008514:	8822977a 	slli	r17,r17,29
 2008518:	280ad33a 	srli	r5,r5,12
 200851c:	003ff406 	br	20084f0 <__muldf3+0x6b0>
 2008520:	10c003cc 	andi	r3,r2,15
 2008524:	01000104 	movi	r4,4
 2008528:	193ff626 	beq	r3,r4,2008504 <__muldf3+0x6c4>
 200852c:	0023883a 	mov	r17,zero
 2008530:	003fd506 	br	2008488 <__muldf3+0x648>
 2008534:	0005883a 	mov	r2,zero
 2008538:	003fe706 	br	20084d8 <__muldf3+0x698>
 200853c:	00800434 	movhi	r2,16
 2008540:	89400234 	orhi	r5,r17,8
 2008544:	10bfffc4 	addi	r2,r2,-1
 2008548:	b02b883a 	mov	r21,r22
 200854c:	288a703a 	and	r5,r5,r2
 2008550:	4029883a 	mov	r20,r8
 2008554:	003eff06 	br	2008154 <__muldf3+0x314>

02008558 <__subdf3>:
 2008558:	02000434 	movhi	r8,16
 200855c:	423fffc4 	addi	r8,r8,-1
 2008560:	defffb04 	addi	sp,sp,-20
 2008564:	2a14703a 	and	r10,r5,r8
 2008568:	3812d53a 	srli	r9,r7,20
 200856c:	3a10703a 	and	r8,r7,r8
 2008570:	2006d77a 	srli	r3,r4,29
 2008574:	3004d77a 	srli	r2,r6,29
 2008578:	dc000015 	stw	r16,0(sp)
 200857c:	501490fa 	slli	r10,r10,3
 2008580:	2820d53a 	srli	r16,r5,20
 2008584:	401090fa 	slli	r8,r8,3
 2008588:	dc800215 	stw	r18,8(sp)
 200858c:	dc400115 	stw	r17,4(sp)
 2008590:	dfc00415 	stw	ra,16(sp)
 2008594:	202290fa 	slli	r17,r4,3
 2008598:	dcc00315 	stw	r19,12(sp)
 200859c:	4a41ffcc 	andi	r9,r9,2047
 20085a0:	0101ffc4 	movi	r4,2047
 20085a4:	2824d7fa 	srli	r18,r5,31
 20085a8:	8401ffcc 	andi	r16,r16,2047
 20085ac:	50c6b03a 	or	r3,r10,r3
 20085b0:	380ed7fa 	srli	r7,r7,31
 20085b4:	408ab03a 	or	r5,r8,r2
 20085b8:	300c90fa 	slli	r6,r6,3
 20085bc:	49009626 	beq	r9,r4,2008818 <__subdf3+0x2c0>
 20085c0:	39c0005c 	xori	r7,r7,1
 20085c4:	8245c83a 	sub	r2,r16,r9
 20085c8:	3c807426 	beq	r7,r18,200879c <__subdf3+0x244>
 20085cc:	0080af0e 	bge	zero,r2,200888c <__subdf3+0x334>
 20085d0:	48002a1e 	bne	r9,zero,200867c <__subdf3+0x124>
 20085d4:	2988b03a 	or	r4,r5,r6
 20085d8:	20009a1e 	bne	r4,zero,2008844 <__subdf3+0x2ec>
 20085dc:	888001cc 	andi	r2,r17,7
 20085e0:	10000726 	beq	r2,zero,2008600 <__subdf3+0xa8>
 20085e4:	888003cc 	andi	r2,r17,15
 20085e8:	01000104 	movi	r4,4
 20085ec:	11000426 	beq	r2,r4,2008600 <__subdf3+0xa8>
 20085f0:	890b883a 	add	r5,r17,r4
 20085f4:	2c63803a 	cmpltu	r17,r5,r17
 20085f8:	1c47883a 	add	r3,r3,r17
 20085fc:	2823883a 	mov	r17,r5
 2008600:	1880202c 	andhi	r2,r3,128
 2008604:	10005926 	beq	r2,zero,200876c <__subdf3+0x214>
 2008608:	84000044 	addi	r16,r16,1
 200860c:	0081ffc4 	movi	r2,2047
 2008610:	8080be26 	beq	r16,r2,200890c <__subdf3+0x3b4>
 2008614:	017fe034 	movhi	r5,65408
 2008618:	297fffc4 	addi	r5,r5,-1
 200861c:	1946703a 	and	r3,r3,r5
 2008620:	1804977a 	slli	r2,r3,29
 2008624:	1806927a 	slli	r3,r3,9
 2008628:	8822d0fa 	srli	r17,r17,3
 200862c:	8401ffcc 	andi	r16,r16,2047
 2008630:	180ad33a 	srli	r5,r3,12
 2008634:	9100004c 	andi	r4,r18,1
 2008638:	1444b03a 	or	r2,r2,r17
 200863c:	80c1ffcc 	andi	r3,r16,2047
 2008640:	1820953a 	slli	r16,r3,20
 2008644:	20c03fcc 	andi	r3,r4,255
 2008648:	180897fa 	slli	r4,r3,31
 200864c:	00c00434 	movhi	r3,16
 2008650:	18ffffc4 	addi	r3,r3,-1
 2008654:	28c6703a 	and	r3,r5,r3
 2008658:	1c06b03a 	or	r3,r3,r16
 200865c:	1906b03a 	or	r3,r3,r4
 2008660:	dfc00417 	ldw	ra,16(sp)
 2008664:	dcc00317 	ldw	r19,12(sp)
 2008668:	dc800217 	ldw	r18,8(sp)
 200866c:	dc400117 	ldw	r17,4(sp)
 2008670:	dc000017 	ldw	r16,0(sp)
 2008674:	dec00504 	addi	sp,sp,20
 2008678:	f800283a 	ret
 200867c:	0101ffc4 	movi	r4,2047
 2008680:	813fd626 	beq	r16,r4,20085dc <__subdf3+0x84>
 2008684:	29402034 	orhi	r5,r5,128
 2008688:	01000e04 	movi	r4,56
 200868c:	2080a316 	blt	r4,r2,200891c <__subdf3+0x3c4>
 2008690:	010007c4 	movi	r4,31
 2008694:	2080c616 	blt	r4,r2,20089b0 <__subdf3+0x458>
 2008698:	01000804 	movi	r4,32
 200869c:	2089c83a 	sub	r4,r4,r2
 20086a0:	2910983a 	sll	r8,r5,r4
 20086a4:	308ed83a 	srl	r7,r6,r2
 20086a8:	3108983a 	sll	r4,r6,r4
 20086ac:	2884d83a 	srl	r2,r5,r2
 20086b0:	41ccb03a 	or	r6,r8,r7
 20086b4:	2008c03a 	cmpne	r4,r4,zero
 20086b8:	310cb03a 	or	r6,r6,r4
 20086bc:	898dc83a 	sub	r6,r17,r6
 20086c0:	89a3803a 	cmpltu	r17,r17,r6
 20086c4:	1887c83a 	sub	r3,r3,r2
 20086c8:	1c47c83a 	sub	r3,r3,r17
 20086cc:	3023883a 	mov	r17,r6
 20086d0:	1880202c 	andhi	r2,r3,128
 20086d4:	10002326 	beq	r2,zero,2008764 <__subdf3+0x20c>
 20086d8:	04c02034 	movhi	r19,128
 20086dc:	9cffffc4 	addi	r19,r19,-1
 20086e0:	1ce6703a 	and	r19,r3,r19
 20086e4:	98007a26 	beq	r19,zero,20088d0 <__subdf3+0x378>
 20086e8:	9809883a 	mov	r4,r19
 20086ec:	200910c0 	call	200910c <__clzsi2>
 20086f0:	113ffe04 	addi	r4,r2,-8
 20086f4:	00c007c4 	movi	r3,31
 20086f8:	19007b16 	blt	r3,r4,20088e8 <__subdf3+0x390>
 20086fc:	00800804 	movi	r2,32
 2008700:	1105c83a 	sub	r2,r2,r4
 2008704:	8884d83a 	srl	r2,r17,r2
 2008708:	9906983a 	sll	r3,r19,r4
 200870c:	8922983a 	sll	r17,r17,r4
 2008710:	10c4b03a 	or	r2,r2,r3
 2008714:	24007816 	blt	r4,r16,20088f8 <__subdf3+0x3a0>
 2008718:	2421c83a 	sub	r16,r4,r16
 200871c:	80c00044 	addi	r3,r16,1
 2008720:	010007c4 	movi	r4,31
 2008724:	20c09516 	blt	r4,r3,200897c <__subdf3+0x424>
 2008728:	01400804 	movi	r5,32
 200872c:	28cbc83a 	sub	r5,r5,r3
 2008730:	88c8d83a 	srl	r4,r17,r3
 2008734:	8962983a 	sll	r17,r17,r5
 2008738:	114a983a 	sll	r5,r2,r5
 200873c:	10c6d83a 	srl	r3,r2,r3
 2008740:	8804c03a 	cmpne	r2,r17,zero
 2008744:	290ab03a 	or	r5,r5,r4
 2008748:	28a2b03a 	or	r17,r5,r2
 200874c:	0021883a 	mov	r16,zero
 2008750:	003fa206 	br	20085dc <__subdf3+0x84>
 2008754:	2090b03a 	or	r8,r4,r2
 2008758:	40018e26 	beq	r8,zero,2008d94 <__subdf3+0x83c>
 200875c:	1007883a 	mov	r3,r2
 2008760:	2023883a 	mov	r17,r4
 2008764:	888001cc 	andi	r2,r17,7
 2008768:	103f9e1e 	bne	r2,zero,20085e4 <__subdf3+0x8c>
 200876c:	1804977a 	slli	r2,r3,29
 2008770:	8822d0fa 	srli	r17,r17,3
 2008774:	1810d0fa 	srli	r8,r3,3
 2008778:	9100004c 	andi	r4,r18,1
 200877c:	1444b03a 	or	r2,r2,r17
 2008780:	00c1ffc4 	movi	r3,2047
 2008784:	80c02826 	beq	r16,r3,2008828 <__subdf3+0x2d0>
 2008788:	01400434 	movhi	r5,16
 200878c:	297fffc4 	addi	r5,r5,-1
 2008790:	80e0703a 	and	r16,r16,r3
 2008794:	414a703a 	and	r5,r8,r5
 2008798:	003fa806 	br	200863c <__subdf3+0xe4>
 200879c:	0080630e 	bge	zero,r2,200892c <__subdf3+0x3d4>
 20087a0:	48003026 	beq	r9,zero,2008864 <__subdf3+0x30c>
 20087a4:	0101ffc4 	movi	r4,2047
 20087a8:	813f8c26 	beq	r16,r4,20085dc <__subdf3+0x84>
 20087ac:	29402034 	orhi	r5,r5,128
 20087b0:	01000e04 	movi	r4,56
 20087b4:	2080a90e 	bge	r4,r2,2008a5c <__subdf3+0x504>
 20087b8:	298cb03a 	or	r6,r5,r6
 20087bc:	3012c03a 	cmpne	r9,r6,zero
 20087c0:	0005883a 	mov	r2,zero
 20087c4:	4c53883a 	add	r9,r9,r17
 20087c8:	4c63803a 	cmpltu	r17,r9,r17
 20087cc:	10c7883a 	add	r3,r2,r3
 20087d0:	88c7883a 	add	r3,r17,r3
 20087d4:	4823883a 	mov	r17,r9
 20087d8:	1880202c 	andhi	r2,r3,128
 20087dc:	1000d026 	beq	r2,zero,2008b20 <__subdf3+0x5c8>
 20087e0:	84000044 	addi	r16,r16,1
 20087e4:	0081ffc4 	movi	r2,2047
 20087e8:	8080fe26 	beq	r16,r2,2008be4 <__subdf3+0x68c>
 20087ec:	00bfe034 	movhi	r2,65408
 20087f0:	10bfffc4 	addi	r2,r2,-1
 20087f4:	1886703a 	and	r3,r3,r2
 20087f8:	880ad07a 	srli	r5,r17,1
 20087fc:	180497fa 	slli	r2,r3,31
 2008800:	8900004c 	andi	r4,r17,1
 2008804:	2922b03a 	or	r17,r5,r4
 2008808:	1806d07a 	srli	r3,r3,1
 200880c:	1462b03a 	or	r17,r2,r17
 2008810:	3825883a 	mov	r18,r7
 2008814:	003f7106 	br	20085dc <__subdf3+0x84>
 2008818:	2984b03a 	or	r2,r5,r6
 200881c:	103f6826 	beq	r2,zero,20085c0 <__subdf3+0x68>
 2008820:	39c03fcc 	andi	r7,r7,255
 2008824:	003f6706 	br	20085c4 <__subdf3+0x6c>
 2008828:	4086b03a 	or	r3,r8,r2
 200882c:	18015226 	beq	r3,zero,2008d78 <__subdf3+0x820>
 2008830:	00c00434 	movhi	r3,16
 2008834:	41400234 	orhi	r5,r8,8
 2008838:	18ffffc4 	addi	r3,r3,-1
 200883c:	28ca703a 	and	r5,r5,r3
 2008840:	003f7e06 	br	200863c <__subdf3+0xe4>
 2008844:	10bfffc4 	addi	r2,r2,-1
 2008848:	1000491e 	bne	r2,zero,2008970 <__subdf3+0x418>
 200884c:	898fc83a 	sub	r7,r17,r6
 2008850:	89e3803a 	cmpltu	r17,r17,r7
 2008854:	1947c83a 	sub	r3,r3,r5
 2008858:	1c47c83a 	sub	r3,r3,r17
 200885c:	3823883a 	mov	r17,r7
 2008860:	003f9b06 	br	20086d0 <__subdf3+0x178>
 2008864:	2988b03a 	or	r4,r5,r6
 2008868:	203f5c26 	beq	r4,zero,20085dc <__subdf3+0x84>
 200886c:	10bfffc4 	addi	r2,r2,-1
 2008870:	1000931e 	bne	r2,zero,2008ac0 <__subdf3+0x568>
 2008874:	898d883a 	add	r6,r17,r6
 2008878:	3463803a 	cmpltu	r17,r6,r17
 200887c:	1947883a 	add	r3,r3,r5
 2008880:	88c7883a 	add	r3,r17,r3
 2008884:	3023883a 	mov	r17,r6
 2008888:	003fd306 	br	20087d8 <__subdf3+0x280>
 200888c:	1000541e 	bne	r2,zero,20089e0 <__subdf3+0x488>
 2008890:	80800044 	addi	r2,r16,1
 2008894:	1081ffcc 	andi	r2,r2,2047
 2008898:	01000044 	movi	r4,1
 200889c:	2080a20e 	bge	r4,r2,2008b28 <__subdf3+0x5d0>
 20088a0:	8989c83a 	sub	r4,r17,r6
 20088a4:	8905803a 	cmpltu	r2,r17,r4
 20088a8:	1967c83a 	sub	r19,r3,r5
 20088ac:	98a7c83a 	sub	r19,r19,r2
 20088b0:	9880202c 	andhi	r2,r19,128
 20088b4:	10006326 	beq	r2,zero,2008a44 <__subdf3+0x4ec>
 20088b8:	3463c83a 	sub	r17,r6,r17
 20088bc:	28c7c83a 	sub	r3,r5,r3
 20088c0:	344d803a 	cmpltu	r6,r6,r17
 20088c4:	19a7c83a 	sub	r19,r3,r6
 20088c8:	3825883a 	mov	r18,r7
 20088cc:	983f861e 	bne	r19,zero,20086e8 <__subdf3+0x190>
 20088d0:	8809883a 	mov	r4,r17
 20088d4:	200910c0 	call	200910c <__clzsi2>
 20088d8:	10800804 	addi	r2,r2,32
 20088dc:	113ffe04 	addi	r4,r2,-8
 20088e0:	00c007c4 	movi	r3,31
 20088e4:	193f850e 	bge	r3,r4,20086fc <__subdf3+0x1a4>
 20088e8:	10bff604 	addi	r2,r2,-40
 20088ec:	8884983a 	sll	r2,r17,r2
 20088f0:	0023883a 	mov	r17,zero
 20088f4:	243f880e 	bge	r4,r16,2008718 <__subdf3+0x1c0>
 20088f8:	00ffe034 	movhi	r3,65408
 20088fc:	18ffffc4 	addi	r3,r3,-1
 2008900:	8121c83a 	sub	r16,r16,r4
 2008904:	10c6703a 	and	r3,r2,r3
 2008908:	003f3406 	br	20085dc <__subdf3+0x84>
 200890c:	9100004c 	andi	r4,r18,1
 2008910:	000b883a 	mov	r5,zero
 2008914:	0005883a 	mov	r2,zero
 2008918:	003f4806 	br	200863c <__subdf3+0xe4>
 200891c:	298cb03a 	or	r6,r5,r6
 2008920:	300cc03a 	cmpne	r6,r6,zero
 2008924:	0005883a 	mov	r2,zero
 2008928:	003f6406 	br	20086bc <__subdf3+0x164>
 200892c:	10009a1e 	bne	r2,zero,2008b98 <__subdf3+0x640>
 2008930:	82400044 	addi	r9,r16,1
 2008934:	4881ffcc 	andi	r2,r9,2047
 2008938:	02800044 	movi	r10,1
 200893c:	5080670e 	bge	r10,r2,2008adc <__subdf3+0x584>
 2008940:	0081ffc4 	movi	r2,2047
 2008944:	4880af26 	beq	r9,r2,2008c04 <__subdf3+0x6ac>
 2008948:	898d883a 	add	r6,r17,r6
 200894c:	1945883a 	add	r2,r3,r5
 2008950:	3447803a 	cmpltu	r3,r6,r17
 2008954:	1887883a 	add	r3,r3,r2
 2008958:	182297fa 	slli	r17,r3,31
 200895c:	300cd07a 	srli	r6,r6,1
 2008960:	1806d07a 	srli	r3,r3,1
 2008964:	4821883a 	mov	r16,r9
 2008968:	89a2b03a 	or	r17,r17,r6
 200896c:	003f1b06 	br	20085dc <__subdf3+0x84>
 2008970:	0101ffc4 	movi	r4,2047
 2008974:	813f441e 	bne	r16,r4,2008688 <__subdf3+0x130>
 2008978:	003f1806 	br	20085dc <__subdf3+0x84>
 200897c:	843ff844 	addi	r16,r16,-31
 2008980:	01400804 	movi	r5,32
 2008984:	1408d83a 	srl	r4,r2,r16
 2008988:	19405026 	beq	r3,r5,2008acc <__subdf3+0x574>
 200898c:	01401004 	movi	r5,64
 2008990:	28c7c83a 	sub	r3,r5,r3
 2008994:	10c4983a 	sll	r2,r2,r3
 2008998:	88a2b03a 	or	r17,r17,r2
 200899c:	8822c03a 	cmpne	r17,r17,zero
 20089a0:	2462b03a 	or	r17,r4,r17
 20089a4:	0007883a 	mov	r3,zero
 20089a8:	0021883a 	mov	r16,zero
 20089ac:	003f6d06 	br	2008764 <__subdf3+0x20c>
 20089b0:	11fff804 	addi	r7,r2,-32
 20089b4:	01000804 	movi	r4,32
 20089b8:	29ced83a 	srl	r7,r5,r7
 20089bc:	11004526 	beq	r2,r4,2008ad4 <__subdf3+0x57c>
 20089c0:	01001004 	movi	r4,64
 20089c4:	2089c83a 	sub	r4,r4,r2
 20089c8:	2904983a 	sll	r2,r5,r4
 20089cc:	118cb03a 	or	r6,r2,r6
 20089d0:	300cc03a 	cmpne	r6,r6,zero
 20089d4:	398cb03a 	or	r6,r7,r6
 20089d8:	0005883a 	mov	r2,zero
 20089dc:	003f3706 	br	20086bc <__subdf3+0x164>
 20089e0:	80002a26 	beq	r16,zero,2008a8c <__subdf3+0x534>
 20089e4:	0101ffc4 	movi	r4,2047
 20089e8:	49006626 	beq	r9,r4,2008b84 <__subdf3+0x62c>
 20089ec:	0085c83a 	sub	r2,zero,r2
 20089f0:	18c02034 	orhi	r3,r3,128
 20089f4:	01000e04 	movi	r4,56
 20089f8:	20807e16 	blt	r4,r2,2008bf4 <__subdf3+0x69c>
 20089fc:	010007c4 	movi	r4,31
 2008a00:	2080e716 	blt	r4,r2,2008da0 <__subdf3+0x848>
 2008a04:	01000804 	movi	r4,32
 2008a08:	2089c83a 	sub	r4,r4,r2
 2008a0c:	1914983a 	sll	r10,r3,r4
 2008a10:	8890d83a 	srl	r8,r17,r2
 2008a14:	8908983a 	sll	r4,r17,r4
 2008a18:	1884d83a 	srl	r2,r3,r2
 2008a1c:	5222b03a 	or	r17,r10,r8
 2008a20:	2006c03a 	cmpne	r3,r4,zero
 2008a24:	88e2b03a 	or	r17,r17,r3
 2008a28:	3463c83a 	sub	r17,r6,r17
 2008a2c:	2885c83a 	sub	r2,r5,r2
 2008a30:	344d803a 	cmpltu	r6,r6,r17
 2008a34:	1187c83a 	sub	r3,r2,r6
 2008a38:	4821883a 	mov	r16,r9
 2008a3c:	3825883a 	mov	r18,r7
 2008a40:	003f2306 	br	20086d0 <__subdf3+0x178>
 2008a44:	24d0b03a 	or	r8,r4,r19
 2008a48:	40001b1e 	bne	r8,zero,2008ab8 <__subdf3+0x560>
 2008a4c:	0005883a 	mov	r2,zero
 2008a50:	0009883a 	mov	r4,zero
 2008a54:	0021883a 	mov	r16,zero
 2008a58:	003f4906 	br	2008780 <__subdf3+0x228>
 2008a5c:	010007c4 	movi	r4,31
 2008a60:	20803a16 	blt	r4,r2,2008b4c <__subdf3+0x5f4>
 2008a64:	01000804 	movi	r4,32
 2008a68:	2089c83a 	sub	r4,r4,r2
 2008a6c:	2912983a 	sll	r9,r5,r4
 2008a70:	3090d83a 	srl	r8,r6,r2
 2008a74:	3108983a 	sll	r4,r6,r4
 2008a78:	2884d83a 	srl	r2,r5,r2
 2008a7c:	4a12b03a 	or	r9,r9,r8
 2008a80:	2008c03a 	cmpne	r4,r4,zero
 2008a84:	4912b03a 	or	r9,r9,r4
 2008a88:	003f4e06 	br	20087c4 <__subdf3+0x26c>
 2008a8c:	1c48b03a 	or	r4,r3,r17
 2008a90:	20003c26 	beq	r4,zero,2008b84 <__subdf3+0x62c>
 2008a94:	0084303a 	nor	r2,zero,r2
 2008a98:	1000381e 	bne	r2,zero,2008b7c <__subdf3+0x624>
 2008a9c:	3463c83a 	sub	r17,r6,r17
 2008aa0:	28c5c83a 	sub	r2,r5,r3
 2008aa4:	344d803a 	cmpltu	r6,r6,r17
 2008aa8:	1187c83a 	sub	r3,r2,r6
 2008aac:	4821883a 	mov	r16,r9
 2008ab0:	3825883a 	mov	r18,r7
 2008ab4:	003f0606 	br	20086d0 <__subdf3+0x178>
 2008ab8:	2023883a 	mov	r17,r4
 2008abc:	003f0906 	br	20086e4 <__subdf3+0x18c>
 2008ac0:	0101ffc4 	movi	r4,2047
 2008ac4:	813f3a1e 	bne	r16,r4,20087b0 <__subdf3+0x258>
 2008ac8:	003ec406 	br	20085dc <__subdf3+0x84>
 2008acc:	0005883a 	mov	r2,zero
 2008ad0:	003fb106 	br	2008998 <__subdf3+0x440>
 2008ad4:	0005883a 	mov	r2,zero
 2008ad8:	003fbc06 	br	20089cc <__subdf3+0x474>
 2008adc:	1c44b03a 	or	r2,r3,r17
 2008ae0:	80008e1e 	bne	r16,zero,2008d1c <__subdf3+0x7c4>
 2008ae4:	1000c826 	beq	r2,zero,2008e08 <__subdf3+0x8b0>
 2008ae8:	2984b03a 	or	r2,r5,r6
 2008aec:	103ebb26 	beq	r2,zero,20085dc <__subdf3+0x84>
 2008af0:	8989883a 	add	r4,r17,r6
 2008af4:	1945883a 	add	r2,r3,r5
 2008af8:	2447803a 	cmpltu	r3,r4,r17
 2008afc:	1887883a 	add	r3,r3,r2
 2008b00:	1880202c 	andhi	r2,r3,128
 2008b04:	2023883a 	mov	r17,r4
 2008b08:	103f1626 	beq	r2,zero,2008764 <__subdf3+0x20c>
 2008b0c:	00bfe034 	movhi	r2,65408
 2008b10:	10bfffc4 	addi	r2,r2,-1
 2008b14:	5021883a 	mov	r16,r10
 2008b18:	1886703a 	and	r3,r3,r2
 2008b1c:	003eaf06 	br	20085dc <__subdf3+0x84>
 2008b20:	3825883a 	mov	r18,r7
 2008b24:	003f0f06 	br	2008764 <__subdf3+0x20c>
 2008b28:	1c44b03a 	or	r2,r3,r17
 2008b2c:	8000251e 	bne	r16,zero,2008bc4 <__subdf3+0x66c>
 2008b30:	1000661e 	bne	r2,zero,2008ccc <__subdf3+0x774>
 2008b34:	2990b03a 	or	r8,r5,r6
 2008b38:	40009626 	beq	r8,zero,2008d94 <__subdf3+0x83c>
 2008b3c:	2807883a 	mov	r3,r5
 2008b40:	3023883a 	mov	r17,r6
 2008b44:	3825883a 	mov	r18,r7
 2008b48:	003ea406 	br	20085dc <__subdf3+0x84>
 2008b4c:	127ff804 	addi	r9,r2,-32
 2008b50:	01000804 	movi	r4,32
 2008b54:	2a52d83a 	srl	r9,r5,r9
 2008b58:	11008c26 	beq	r2,r4,2008d8c <__subdf3+0x834>
 2008b5c:	01001004 	movi	r4,64
 2008b60:	2085c83a 	sub	r2,r4,r2
 2008b64:	2884983a 	sll	r2,r5,r2
 2008b68:	118cb03a 	or	r6,r2,r6
 2008b6c:	300cc03a 	cmpne	r6,r6,zero
 2008b70:	4992b03a 	or	r9,r9,r6
 2008b74:	0005883a 	mov	r2,zero
 2008b78:	003f1206 	br	20087c4 <__subdf3+0x26c>
 2008b7c:	0101ffc4 	movi	r4,2047
 2008b80:	493f9c1e 	bne	r9,r4,20089f4 <__subdf3+0x49c>
 2008b84:	2807883a 	mov	r3,r5
 2008b88:	3023883a 	mov	r17,r6
 2008b8c:	4821883a 	mov	r16,r9
 2008b90:	3825883a 	mov	r18,r7
 2008b94:	003e9106 	br	20085dc <__subdf3+0x84>
 2008b98:	80001f1e 	bne	r16,zero,2008c18 <__subdf3+0x6c0>
 2008b9c:	1c48b03a 	or	r4,r3,r17
 2008ba0:	20005a26 	beq	r4,zero,2008d0c <__subdf3+0x7b4>
 2008ba4:	0084303a 	nor	r2,zero,r2
 2008ba8:	1000561e 	bne	r2,zero,2008d04 <__subdf3+0x7ac>
 2008bac:	89a3883a 	add	r17,r17,r6
 2008bb0:	1945883a 	add	r2,r3,r5
 2008bb4:	898d803a 	cmpltu	r6,r17,r6
 2008bb8:	3087883a 	add	r3,r6,r2
 2008bbc:	4821883a 	mov	r16,r9
 2008bc0:	003f0506 	br	20087d8 <__subdf3+0x280>
 2008bc4:	10002b1e 	bne	r2,zero,2008c74 <__subdf3+0x71c>
 2008bc8:	2984b03a 	or	r2,r5,r6
 2008bcc:	10008026 	beq	r2,zero,2008dd0 <__subdf3+0x878>
 2008bd0:	2807883a 	mov	r3,r5
 2008bd4:	3023883a 	mov	r17,r6
 2008bd8:	3825883a 	mov	r18,r7
 2008bdc:	0401ffc4 	movi	r16,2047
 2008be0:	003e7e06 	br	20085dc <__subdf3+0x84>
 2008be4:	3809883a 	mov	r4,r7
 2008be8:	0011883a 	mov	r8,zero
 2008bec:	0005883a 	mov	r2,zero
 2008bf0:	003ee306 	br	2008780 <__subdf3+0x228>
 2008bf4:	1c62b03a 	or	r17,r3,r17
 2008bf8:	8822c03a 	cmpne	r17,r17,zero
 2008bfc:	0005883a 	mov	r2,zero
 2008c00:	003f8906 	br	2008a28 <__subdf3+0x4d0>
 2008c04:	3809883a 	mov	r4,r7
 2008c08:	4821883a 	mov	r16,r9
 2008c0c:	0011883a 	mov	r8,zero
 2008c10:	0005883a 	mov	r2,zero
 2008c14:	003eda06 	br	2008780 <__subdf3+0x228>
 2008c18:	0101ffc4 	movi	r4,2047
 2008c1c:	49003b26 	beq	r9,r4,2008d0c <__subdf3+0x7b4>
 2008c20:	0085c83a 	sub	r2,zero,r2
 2008c24:	18c02034 	orhi	r3,r3,128
 2008c28:	01000e04 	movi	r4,56
 2008c2c:	20806e16 	blt	r4,r2,2008de8 <__subdf3+0x890>
 2008c30:	010007c4 	movi	r4,31
 2008c34:	20807716 	blt	r4,r2,2008e14 <__subdf3+0x8bc>
 2008c38:	01000804 	movi	r4,32
 2008c3c:	2089c83a 	sub	r4,r4,r2
 2008c40:	1914983a 	sll	r10,r3,r4
 2008c44:	8890d83a 	srl	r8,r17,r2
 2008c48:	8908983a 	sll	r4,r17,r4
 2008c4c:	1884d83a 	srl	r2,r3,r2
 2008c50:	5222b03a 	or	r17,r10,r8
 2008c54:	2006c03a 	cmpne	r3,r4,zero
 2008c58:	88e2b03a 	or	r17,r17,r3
 2008c5c:	89a3883a 	add	r17,r17,r6
 2008c60:	1145883a 	add	r2,r2,r5
 2008c64:	898d803a 	cmpltu	r6,r17,r6
 2008c68:	3087883a 	add	r3,r6,r2
 2008c6c:	4821883a 	mov	r16,r9
 2008c70:	003ed906 	br	20087d8 <__subdf3+0x280>
 2008c74:	2984b03a 	or	r2,r5,r6
 2008c78:	10004226 	beq	r2,zero,2008d84 <__subdf3+0x82c>
 2008c7c:	1808d0fa 	srli	r4,r3,3
 2008c80:	8822d0fa 	srli	r17,r17,3
 2008c84:	1806977a 	slli	r3,r3,29
 2008c88:	2080022c 	andhi	r2,r4,8
 2008c8c:	1c62b03a 	or	r17,r3,r17
 2008c90:	10000826 	beq	r2,zero,2008cb4 <__subdf3+0x75c>
 2008c94:	2812d0fa 	srli	r9,r5,3
 2008c98:	4880022c 	andhi	r2,r9,8
 2008c9c:	1000051e 	bne	r2,zero,2008cb4 <__subdf3+0x75c>
 2008ca0:	300cd0fa 	srli	r6,r6,3
 2008ca4:	2804977a 	slli	r2,r5,29
 2008ca8:	4809883a 	mov	r4,r9
 2008cac:	3825883a 	mov	r18,r7
 2008cb0:	11a2b03a 	or	r17,r2,r6
 2008cb4:	8806d77a 	srli	r3,r17,29
 2008cb8:	200890fa 	slli	r4,r4,3
 2008cbc:	882290fa 	slli	r17,r17,3
 2008cc0:	0401ffc4 	movi	r16,2047
 2008cc4:	1906b03a 	or	r3,r3,r4
 2008cc8:	003e4406 	br	20085dc <__subdf3+0x84>
 2008ccc:	2984b03a 	or	r2,r5,r6
 2008cd0:	103e4226 	beq	r2,zero,20085dc <__subdf3+0x84>
 2008cd4:	8989c83a 	sub	r4,r17,r6
 2008cd8:	8911803a 	cmpltu	r8,r17,r4
 2008cdc:	1945c83a 	sub	r2,r3,r5
 2008ce0:	1205c83a 	sub	r2,r2,r8
 2008ce4:	1200202c 	andhi	r8,r2,128
 2008ce8:	403e9a26 	beq	r8,zero,2008754 <__subdf3+0x1fc>
 2008cec:	3463c83a 	sub	r17,r6,r17
 2008cf0:	28c5c83a 	sub	r2,r5,r3
 2008cf4:	344d803a 	cmpltu	r6,r6,r17
 2008cf8:	1187c83a 	sub	r3,r2,r6
 2008cfc:	3825883a 	mov	r18,r7
 2008d00:	003e3606 	br	20085dc <__subdf3+0x84>
 2008d04:	0101ffc4 	movi	r4,2047
 2008d08:	493fc71e 	bne	r9,r4,2008c28 <__subdf3+0x6d0>
 2008d0c:	2807883a 	mov	r3,r5
 2008d10:	3023883a 	mov	r17,r6
 2008d14:	4821883a 	mov	r16,r9
 2008d18:	003e3006 	br	20085dc <__subdf3+0x84>
 2008d1c:	10003626 	beq	r2,zero,2008df8 <__subdf3+0x8a0>
 2008d20:	2984b03a 	or	r2,r5,r6
 2008d24:	10001726 	beq	r2,zero,2008d84 <__subdf3+0x82c>
 2008d28:	1808d0fa 	srli	r4,r3,3
 2008d2c:	8822d0fa 	srli	r17,r17,3
 2008d30:	1806977a 	slli	r3,r3,29
 2008d34:	2080022c 	andhi	r2,r4,8
 2008d38:	1c62b03a 	or	r17,r3,r17
 2008d3c:	10000726 	beq	r2,zero,2008d5c <__subdf3+0x804>
 2008d40:	2812d0fa 	srli	r9,r5,3
 2008d44:	4880022c 	andhi	r2,r9,8
 2008d48:	1000041e 	bne	r2,zero,2008d5c <__subdf3+0x804>
 2008d4c:	300cd0fa 	srli	r6,r6,3
 2008d50:	2804977a 	slli	r2,r5,29
 2008d54:	4809883a 	mov	r4,r9
 2008d58:	11a2b03a 	or	r17,r2,r6
 2008d5c:	8806d77a 	srli	r3,r17,29
 2008d60:	200890fa 	slli	r4,r4,3
 2008d64:	882290fa 	slli	r17,r17,3
 2008d68:	3825883a 	mov	r18,r7
 2008d6c:	1906b03a 	or	r3,r3,r4
 2008d70:	0401ffc4 	movi	r16,2047
 2008d74:	003e1906 	br	20085dc <__subdf3+0x84>
 2008d78:	000b883a 	mov	r5,zero
 2008d7c:	0005883a 	mov	r2,zero
 2008d80:	003e2e06 	br	200863c <__subdf3+0xe4>
 2008d84:	0401ffc4 	movi	r16,2047
 2008d88:	003e1406 	br	20085dc <__subdf3+0x84>
 2008d8c:	0005883a 	mov	r2,zero
 2008d90:	003f7506 	br	2008b68 <__subdf3+0x610>
 2008d94:	0005883a 	mov	r2,zero
 2008d98:	0009883a 	mov	r4,zero
 2008d9c:	003e7806 	br	2008780 <__subdf3+0x228>
 2008da0:	123ff804 	addi	r8,r2,-32
 2008da4:	01000804 	movi	r4,32
 2008da8:	1a10d83a 	srl	r8,r3,r8
 2008dac:	11002526 	beq	r2,r4,2008e44 <__subdf3+0x8ec>
 2008db0:	01001004 	movi	r4,64
 2008db4:	2085c83a 	sub	r2,r4,r2
 2008db8:	1884983a 	sll	r2,r3,r2
 2008dbc:	1444b03a 	or	r2,r2,r17
 2008dc0:	1004c03a 	cmpne	r2,r2,zero
 2008dc4:	40a2b03a 	or	r17,r8,r2
 2008dc8:	0005883a 	mov	r2,zero
 2008dcc:	003f1606 	br	2008a28 <__subdf3+0x4d0>
 2008dd0:	02000434 	movhi	r8,16
 2008dd4:	0009883a 	mov	r4,zero
 2008dd8:	423fffc4 	addi	r8,r8,-1
 2008ddc:	00bfffc4 	movi	r2,-1
 2008de0:	0401ffc4 	movi	r16,2047
 2008de4:	003e6606 	br	2008780 <__subdf3+0x228>
 2008de8:	1c62b03a 	or	r17,r3,r17
 2008dec:	8822c03a 	cmpne	r17,r17,zero
 2008df0:	0005883a 	mov	r2,zero
 2008df4:	003f9906 	br	2008c5c <__subdf3+0x704>
 2008df8:	2807883a 	mov	r3,r5
 2008dfc:	3023883a 	mov	r17,r6
 2008e00:	0401ffc4 	movi	r16,2047
 2008e04:	003df506 	br	20085dc <__subdf3+0x84>
 2008e08:	2807883a 	mov	r3,r5
 2008e0c:	3023883a 	mov	r17,r6
 2008e10:	003df206 	br	20085dc <__subdf3+0x84>
 2008e14:	123ff804 	addi	r8,r2,-32
 2008e18:	01000804 	movi	r4,32
 2008e1c:	1a10d83a 	srl	r8,r3,r8
 2008e20:	11000a26 	beq	r2,r4,2008e4c <__subdf3+0x8f4>
 2008e24:	01001004 	movi	r4,64
 2008e28:	2085c83a 	sub	r2,r4,r2
 2008e2c:	1884983a 	sll	r2,r3,r2
 2008e30:	1444b03a 	or	r2,r2,r17
 2008e34:	1004c03a 	cmpne	r2,r2,zero
 2008e38:	40a2b03a 	or	r17,r8,r2
 2008e3c:	0005883a 	mov	r2,zero
 2008e40:	003f8606 	br	2008c5c <__subdf3+0x704>
 2008e44:	0005883a 	mov	r2,zero
 2008e48:	003fdc06 	br	2008dbc <__subdf3+0x864>
 2008e4c:	0005883a 	mov	r2,zero
 2008e50:	003ff706 	br	2008e30 <__subdf3+0x8d8>

02008e54 <__extendsfdf2>:
 2008e54:	200ad5fa 	srli	r5,r4,23
 2008e58:	defffd04 	addi	sp,sp,-12
 2008e5c:	dc400115 	stw	r17,4(sp)
 2008e60:	29403fcc 	andi	r5,r5,255
 2008e64:	29800044 	addi	r6,r5,1
 2008e68:	04402034 	movhi	r17,128
 2008e6c:	dc000015 	stw	r16,0(sp)
 2008e70:	8c7fffc4 	addi	r17,r17,-1
 2008e74:	dfc00215 	stw	ra,8(sp)
 2008e78:	31803fcc 	andi	r6,r6,255
 2008e7c:	00800044 	movi	r2,1
 2008e80:	8922703a 	and	r17,r17,r4
 2008e84:	2020d7fa 	srli	r16,r4,31
 2008e88:	1180110e 	bge	r2,r6,2008ed0 <__extendsfdf2+0x7c>
 2008e8c:	880cd0fa 	srli	r6,r17,3
 2008e90:	8822977a 	slli	r17,r17,29
 2008e94:	2940e004 	addi	r5,r5,896
 2008e98:	2941ffcc 	andi	r5,r5,2047
 2008e9c:	2804953a 	slli	r2,r5,20
 2008ea0:	01400434 	movhi	r5,16
 2008ea4:	800697fa 	slli	r3,r16,31
 2008ea8:	297fffc4 	addi	r5,r5,-1
 2008eac:	314a703a 	and	r5,r6,r5
 2008eb0:	288ab03a 	or	r5,r5,r2
 2008eb4:	28c6b03a 	or	r3,r5,r3
 2008eb8:	8805883a 	mov	r2,r17
 2008ebc:	dfc00217 	ldw	ra,8(sp)
 2008ec0:	dc400117 	ldw	r17,4(sp)
 2008ec4:	dc000017 	ldw	r16,0(sp)
 2008ec8:	dec00304 	addi	sp,sp,12
 2008ecc:	f800283a 	ret
 2008ed0:	2800111e 	bne	r5,zero,2008f18 <__extendsfdf2+0xc4>
 2008ed4:	88001c26 	beq	r17,zero,2008f48 <__extendsfdf2+0xf4>
 2008ed8:	8809883a 	mov	r4,r17
 2008edc:	200910c0 	call	200910c <__clzsi2>
 2008ee0:	00c00284 	movi	r3,10
 2008ee4:	18801b16 	blt	r3,r2,2008f54 <__extendsfdf2+0x100>
 2008ee8:	018002c4 	movi	r6,11
 2008eec:	308dc83a 	sub	r6,r6,r2
 2008ef0:	11000544 	addi	r4,r2,21
 2008ef4:	8986d83a 	srl	r3,r17,r6
 2008ef8:	8922983a 	sll	r17,r17,r4
 2008efc:	0180e244 	movi	r6,905
 2008f00:	01400434 	movhi	r5,16
 2008f04:	3085c83a 	sub	r2,r6,r2
 2008f08:	297fffc4 	addi	r5,r5,-1
 2008f0c:	194c703a 	and	r6,r3,r5
 2008f10:	1141ffcc 	andi	r5,r2,2047
 2008f14:	003fe006 	br	2008e98 <__extendsfdf2+0x44>
 2008f18:	88000826 	beq	r17,zero,2008f3c <__extendsfdf2+0xe8>
 2008f1c:	880cd0fa 	srli	r6,r17,3
 2008f20:	00800434 	movhi	r2,16
 2008f24:	10bfffc4 	addi	r2,r2,-1
 2008f28:	31800234 	orhi	r6,r6,8
 2008f2c:	8822977a 	slli	r17,r17,29
 2008f30:	308c703a 	and	r6,r6,r2
 2008f34:	0141ffc4 	movi	r5,2047
 2008f38:	003fd706 	br	2008e98 <__extendsfdf2+0x44>
 2008f3c:	0141ffc4 	movi	r5,2047
 2008f40:	000d883a 	mov	r6,zero
 2008f44:	003fd406 	br	2008e98 <__extendsfdf2+0x44>
 2008f48:	000b883a 	mov	r5,zero
 2008f4c:	000d883a 	mov	r6,zero
 2008f50:	003fd106 	br	2008e98 <__extendsfdf2+0x44>
 2008f54:	11bffd44 	addi	r6,r2,-11
 2008f58:	8986983a 	sll	r3,r17,r6
 2008f5c:	0023883a 	mov	r17,zero
 2008f60:	003fe606 	br	2008efc <__extendsfdf2+0xa8>

02008f64 <__truncdfsf2>:
 2008f64:	2810d53a 	srli	r8,r5,20
 2008f68:	01c00434 	movhi	r7,16
 2008f6c:	39ffffc4 	addi	r7,r7,-1
 2008f70:	29ce703a 	and	r7,r5,r7
 2008f74:	4201ffcc 	andi	r8,r8,2047
 2008f78:	380e90fa 	slli	r7,r7,3
 2008f7c:	200cd77a 	srli	r6,r4,29
 2008f80:	42400044 	addi	r9,r8,1
 2008f84:	4a41ffcc 	andi	r9,r9,2047
 2008f88:	00c00044 	movi	r3,1
 2008f8c:	280ad7fa 	srli	r5,r5,31
 2008f90:	31ceb03a 	or	r7,r6,r7
 2008f94:	200490fa 	slli	r2,r4,3
 2008f98:	1a40230e 	bge	r3,r9,2009028 <__truncdfsf2+0xc4>
 2008f9c:	40ff2004 	addi	r3,r8,-896
 2008fa0:	01803f84 	movi	r6,254
 2008fa4:	30c01516 	blt	r6,r3,2008ffc <__truncdfsf2+0x98>
 2008fa8:	00c0380e 	bge	zero,r3,200908c <__truncdfsf2+0x128>
 2008fac:	200c91ba 	slli	r6,r4,6
 2008fb0:	380e90fa 	slli	r7,r7,3
 2008fb4:	1004d77a 	srli	r2,r2,29
 2008fb8:	300cc03a 	cmpne	r6,r6,zero
 2008fbc:	31ccb03a 	or	r6,r6,r7
 2008fc0:	308cb03a 	or	r6,r6,r2
 2008fc4:	308001cc 	andi	r2,r6,7
 2008fc8:	10000426 	beq	r2,zero,2008fdc <__truncdfsf2+0x78>
 2008fcc:	308003cc 	andi	r2,r6,15
 2008fd0:	01000104 	movi	r4,4
 2008fd4:	11000126 	beq	r2,r4,2008fdc <__truncdfsf2+0x78>
 2008fd8:	31800104 	addi	r6,r6,4
 2008fdc:	3081002c 	andhi	r2,r6,1024
 2008fe0:	10001626 	beq	r2,zero,200903c <__truncdfsf2+0xd8>
 2008fe4:	18c00044 	addi	r3,r3,1
 2008fe8:	00803fc4 	movi	r2,255
 2008fec:	18800326 	beq	r3,r2,2008ffc <__truncdfsf2+0x98>
 2008ff0:	300c91ba 	slli	r6,r6,6
 2008ff4:	300cd27a 	srli	r6,r6,9
 2008ff8:	00000206 	br	2009004 <__truncdfsf2+0xa0>
 2008ffc:	00ffffc4 	movi	r3,-1
 2009000:	000d883a 	mov	r6,zero
 2009004:	18c03fcc 	andi	r3,r3,255
 2009008:	180895fa 	slli	r4,r3,23
 200900c:	00c02034 	movhi	r3,128
 2009010:	280a97fa 	slli	r5,r5,31
 2009014:	18ffffc4 	addi	r3,r3,-1
 2009018:	30c6703a 	and	r3,r6,r3
 200901c:	1906b03a 	or	r3,r3,r4
 2009020:	1944b03a 	or	r2,r3,r5
 2009024:	f800283a 	ret
 2009028:	40000b1e 	bne	r8,zero,2009058 <__truncdfsf2+0xf4>
 200902c:	388cb03a 	or	r6,r7,r2
 2009030:	0007883a 	mov	r3,zero
 2009034:	30000426 	beq	r6,zero,2009048 <__truncdfsf2+0xe4>
 2009038:	01800144 	movi	r6,5
 200903c:	00803fc4 	movi	r2,255
 2009040:	300cd0fa 	srli	r6,r6,3
 2009044:	18800a26 	beq	r3,r2,2009070 <__truncdfsf2+0x10c>
 2009048:	00802034 	movhi	r2,128
 200904c:	10bfffc4 	addi	r2,r2,-1
 2009050:	308c703a 	and	r6,r6,r2
 2009054:	003feb06 	br	2009004 <__truncdfsf2+0xa0>
 2009058:	3888b03a 	or	r4,r7,r2
 200905c:	203fe726 	beq	r4,zero,2008ffc <__truncdfsf2+0x98>
 2009060:	380c90fa 	slli	r6,r7,3
 2009064:	00c03fc4 	movi	r3,255
 2009068:	31808034 	orhi	r6,r6,512
 200906c:	003fd506 	br	2008fc4 <__truncdfsf2+0x60>
 2009070:	303fe226 	beq	r6,zero,2008ffc <__truncdfsf2+0x98>
 2009074:	00802034 	movhi	r2,128
 2009078:	31801034 	orhi	r6,r6,64
 200907c:	10bfffc4 	addi	r2,r2,-1
 2009080:	00ffffc4 	movi	r3,-1
 2009084:	308c703a 	and	r6,r6,r2
 2009088:	003fde06 	br	2009004 <__truncdfsf2+0xa0>
 200908c:	013ffa44 	movi	r4,-23
 2009090:	19000e16 	blt	r3,r4,20090cc <__truncdfsf2+0x168>
 2009094:	01000784 	movi	r4,30
 2009098:	20c9c83a 	sub	r4,r4,r3
 200909c:	018007c4 	movi	r6,31
 20090a0:	39c02034 	orhi	r7,r7,128
 20090a4:	31000b16 	blt	r6,r4,20090d4 <__truncdfsf2+0x170>
 20090a8:	423f2084 	addi	r8,r8,-894
 20090ac:	120c983a 	sll	r6,r2,r8
 20090b0:	3a0e983a 	sll	r7,r7,r8
 20090b4:	1104d83a 	srl	r2,r2,r4
 20090b8:	300cc03a 	cmpne	r6,r6,zero
 20090bc:	31ceb03a 	or	r7,r6,r7
 20090c0:	388cb03a 	or	r6,r7,r2
 20090c4:	0007883a 	mov	r3,zero
 20090c8:	003fbe06 	br	2008fc4 <__truncdfsf2+0x60>
 20090cc:	0007883a 	mov	r3,zero
 20090d0:	003fd906 	br	2009038 <__truncdfsf2+0xd4>
 20090d4:	01bfff84 	movi	r6,-2
 20090d8:	30cdc83a 	sub	r6,r6,r3
 20090dc:	00c00804 	movi	r3,32
 20090e0:	398cd83a 	srl	r6,r7,r6
 20090e4:	20c00726 	beq	r4,r3,2009104 <__truncdfsf2+0x1a0>
 20090e8:	423f2884 	addi	r8,r8,-862
 20090ec:	3a0e983a 	sll	r7,r7,r8
 20090f0:	3884b03a 	or	r2,r7,r2
 20090f4:	1004c03a 	cmpne	r2,r2,zero
 20090f8:	118cb03a 	or	r6,r2,r6
 20090fc:	0007883a 	mov	r3,zero
 2009100:	003fb006 	br	2008fc4 <__truncdfsf2+0x60>
 2009104:	000f883a 	mov	r7,zero
 2009108:	003ff906 	br	20090f0 <__truncdfsf2+0x18c>

0200910c <__clzsi2>:
 200910c:	00bfffd4 	movui	r2,65535
 2009110:	11000536 	bltu	r2,r4,2009128 <__clzsi2+0x1c>
 2009114:	00803fc4 	movi	r2,255
 2009118:	11000f36 	bltu	r2,r4,2009158 <__clzsi2+0x4c>
 200911c:	00800804 	movi	r2,32
 2009120:	0007883a 	mov	r3,zero
 2009124:	00000506 	br	200913c <__clzsi2+0x30>
 2009128:	00804034 	movhi	r2,256
 200912c:	10bfffc4 	addi	r2,r2,-1
 2009130:	11000c2e 	bgeu	r2,r4,2009164 <__clzsi2+0x58>
 2009134:	00800204 	movi	r2,8
 2009138:	00c00604 	movi	r3,24
 200913c:	20c8d83a 	srl	r4,r4,r3
 2009140:	00c080b4 	movhi	r3,514
 2009144:	18c92204 	addi	r3,r3,9352
 2009148:	1909883a 	add	r4,r3,r4
 200914c:	20c00003 	ldbu	r3,0(r4)
 2009150:	10c5c83a 	sub	r2,r2,r3
 2009154:	f800283a 	ret
 2009158:	00800604 	movi	r2,24
 200915c:	00c00204 	movi	r3,8
 2009160:	003ff606 	br	200913c <__clzsi2+0x30>
 2009164:	00800404 	movi	r2,16
 2009168:	1007883a 	mov	r3,r2
 200916c:	003ff306 	br	200913c <__clzsi2+0x30>

02009170 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 2009170:	deffff04 	addi	sp,sp,-4
 2009174:	df000015 	stw	fp,0(sp)
 2009178:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 200917c:	d0a03017 	ldw	r2,-32576(gp)
}
 2009180:	e037883a 	mov	sp,fp
 2009184:	df000017 	ldw	fp,0(sp)
 2009188:	dec00104 	addi	sp,sp,4
 200918c:	f800283a 	ret

02009190 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 2009190:	defff804 	addi	sp,sp,-32
 2009194:	df000715 	stw	fp,28(sp)
 2009198:	df000704 	addi	fp,sp,28
 200919c:	e13ffd15 	stw	r4,-12(fp)
 20091a0:	e17ffe15 	stw	r5,-8(fp)
 20091a4:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 20091a8:	e0bffd17 	ldw	r2,-12(fp)
 20091ac:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 20091b0:	e0bffe17 	ldw	r2,-8(fp)
 20091b4:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 20091b8:	e0bfff17 	ldw	r2,-4(fp)
 20091bc:	10800430 	cmpltui	r2,r2,16
 20091c0:	10004c1e 	bne	r2,zero,20092f4 <memcpy+0x164>
 20091c4:	e0fffa17 	ldw	r3,-24(fp)
 20091c8:	e0bff917 	ldw	r2,-28(fp)
 20091cc:	1884b03a 	or	r2,r3,r2
 20091d0:	108000cc 	andi	r2,r2,3
 20091d4:	1000471e 	bne	r2,zero,20092f4 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 20091d8:	e0bff917 	ldw	r2,-28(fp)
 20091dc:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 20091e0:	e0bffa17 	ldw	r2,-24(fp)
 20091e4:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 20091e8:	00002306 	br	2009278 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 20091ec:	e0bffb17 	ldw	r2,-20(fp)
 20091f0:	10c00104 	addi	r3,r2,4
 20091f4:	e0fffb15 	stw	r3,-20(fp)
 20091f8:	e0fffc17 	ldw	r3,-16(fp)
 20091fc:	19000104 	addi	r4,r3,4
 2009200:	e13ffc15 	stw	r4,-16(fp)
 2009204:	18c00017 	ldw	r3,0(r3)
 2009208:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200920c:	e0bffb17 	ldw	r2,-20(fp)
 2009210:	10c00104 	addi	r3,r2,4
 2009214:	e0fffb15 	stw	r3,-20(fp)
 2009218:	e0fffc17 	ldw	r3,-16(fp)
 200921c:	19000104 	addi	r4,r3,4
 2009220:	e13ffc15 	stw	r4,-16(fp)
 2009224:	18c00017 	ldw	r3,0(r3)
 2009228:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200922c:	e0bffb17 	ldw	r2,-20(fp)
 2009230:	10c00104 	addi	r3,r2,4
 2009234:	e0fffb15 	stw	r3,-20(fp)
 2009238:	e0fffc17 	ldw	r3,-16(fp)
 200923c:	19000104 	addi	r4,r3,4
 2009240:	e13ffc15 	stw	r4,-16(fp)
 2009244:	18c00017 	ldw	r3,0(r3)
 2009248:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200924c:	e0bffb17 	ldw	r2,-20(fp)
 2009250:	10c00104 	addi	r3,r2,4
 2009254:	e0fffb15 	stw	r3,-20(fp)
 2009258:	e0fffc17 	ldw	r3,-16(fp)
 200925c:	19000104 	addi	r4,r3,4
 2009260:	e13ffc15 	stw	r4,-16(fp)
 2009264:	18c00017 	ldw	r3,0(r3)
 2009268:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 200926c:	e0bfff17 	ldw	r2,-4(fp)
 2009270:	10bffc04 	addi	r2,r2,-16
 2009274:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2009278:	e0bfff17 	ldw	r2,-4(fp)
 200927c:	10800428 	cmpgeui	r2,r2,16
 2009280:	103fda1e 	bne	r2,zero,20091ec <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2009284:	00000b06 	br	20092b4 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2009288:	e0bffb17 	ldw	r2,-20(fp)
 200928c:	10c00104 	addi	r3,r2,4
 2009290:	e0fffb15 	stw	r3,-20(fp)
 2009294:	e0fffc17 	ldw	r3,-16(fp)
 2009298:	19000104 	addi	r4,r3,4
 200929c:	e13ffc15 	stw	r4,-16(fp)
 20092a0:	18c00017 	ldw	r3,0(r3)
 20092a4:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 20092a8:	e0bfff17 	ldw	r2,-4(fp)
 20092ac:	10bfff04 	addi	r2,r2,-4
 20092b0:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 20092b4:	e0bfff17 	ldw	r2,-4(fp)
 20092b8:	10800128 	cmpgeui	r2,r2,4
 20092bc:	103ff21e 	bne	r2,zero,2009288 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 20092c0:	e0bffb17 	ldw	r2,-20(fp)
 20092c4:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 20092c8:	e0bffc17 	ldw	r2,-16(fp)
 20092cc:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 20092d0:	00000806 	br	20092f4 <memcpy+0x164>
    *dst++ = *src++;
 20092d4:	e0bff917 	ldw	r2,-28(fp)
 20092d8:	10c00044 	addi	r3,r2,1
 20092dc:	e0fff915 	stw	r3,-28(fp)
 20092e0:	e0fffa17 	ldw	r3,-24(fp)
 20092e4:	19000044 	addi	r4,r3,1
 20092e8:	e13ffa15 	stw	r4,-24(fp)
 20092ec:	18c00003 	ldbu	r3,0(r3)
 20092f0:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 20092f4:	e0bfff17 	ldw	r2,-4(fp)
 20092f8:	10ffffc4 	addi	r3,r2,-1
 20092fc:	e0ffff15 	stw	r3,-4(fp)
 2009300:	103ff41e 	bne	r2,zero,20092d4 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2009304:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2009308:	e037883a 	mov	sp,fp
 200930c:	df000017 	ldw	fp,0(sp)
 2009310:	dec00104 	addi	sp,sp,4
 2009314:	f800283a 	ret

02009318 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2009318:	defff704 	addi	sp,sp,-36
 200931c:	df000815 	stw	fp,32(sp)
 2009320:	df000804 	addi	fp,sp,32
 2009324:	e13ffd15 	stw	r4,-12(fp)
 2009328:	e17ffe15 	stw	r5,-8(fp)
 200932c:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2009330:	e0bffd17 	ldw	r2,-12(fp)
 2009334:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2009338:	e0bffe17 	ldw	r2,-8(fp)
 200933c:	10803fcc 	andi	r2,r2,255
 2009340:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2009344:	00000c06 	br	2009378 <memset+0x60>
    {
      if (n--)
 2009348:	e0bfff17 	ldw	r2,-4(fp)
 200934c:	10ffffc4 	addi	r3,r2,-1
 2009350:	e0ffff15 	stw	r3,-4(fp)
 2009354:	10000626 	beq	r2,zero,2009370 <memset+0x58>
        *s++ = (char) c;
 2009358:	e0bff817 	ldw	r2,-32(fp)
 200935c:	10c00044 	addi	r3,r2,1
 2009360:	e0fff815 	stw	r3,-32(fp)
 2009364:	e0fffe17 	ldw	r3,-8(fp)
 2009368:	10c00005 	stb	r3,0(r2)
 200936c:	00000206 	br	2009378 <memset+0x60>
      else
        return m;
 2009370:	e0bffd17 	ldw	r2,-12(fp)
 2009374:	00005506 	br	20094cc <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2009378:	e0bff817 	ldw	r2,-32(fp)
 200937c:	108000cc 	andi	r2,r2,3
 2009380:	103ff11e 	bne	r2,zero,2009348 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2009384:	e0bfff17 	ldw	r2,-4(fp)
 2009388:	10800130 	cmpltui	r2,r2,4
 200938c:	10004a1e 	bne	r2,zero,20094b8 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2009390:	e0bff817 	ldw	r2,-32(fp)
 2009394:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2009398:	e0bffc17 	ldw	r2,-16(fp)
 200939c:	1006923a 	slli	r3,r2,8
 20093a0:	e0bffc17 	ldw	r2,-16(fp)
 20093a4:	1884b03a 	or	r2,r3,r2
 20093a8:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 20093ac:	e0bffa17 	ldw	r2,-24(fp)
 20093b0:	1004943a 	slli	r2,r2,16
 20093b4:	e0fffa17 	ldw	r3,-24(fp)
 20093b8:	1884b03a 	or	r2,r3,r2
 20093bc:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20093c0:	00800804 	movi	r2,32
 20093c4:	e0bff915 	stw	r2,-28(fp)
 20093c8:	00000906 	br	20093f0 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 20093cc:	e0fffa17 	ldw	r3,-24(fp)
 20093d0:	e0bff917 	ldw	r2,-28(fp)
 20093d4:	1884983a 	sll	r2,r3,r2
 20093d8:	e0fffa17 	ldw	r3,-24(fp)
 20093dc:	1884b03a 	or	r2,r3,r2
 20093e0:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20093e4:	e0bff917 	ldw	r2,-28(fp)
 20093e8:	1085883a 	add	r2,r2,r2
 20093ec:	e0bff915 	stw	r2,-28(fp)
 20093f0:	e0bff917 	ldw	r2,-28(fp)
 20093f4:	10800830 	cmpltui	r2,r2,32
 20093f8:	103ff41e 	bne	r2,zero,20093cc <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 20093fc:	00001706 	br	200945c <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2009400:	e0bffb17 	ldw	r2,-20(fp)
 2009404:	10c00104 	addi	r3,r2,4
 2009408:	e0fffb15 	stw	r3,-20(fp)
 200940c:	e0fffa17 	ldw	r3,-24(fp)
 2009410:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009414:	e0bffb17 	ldw	r2,-20(fp)
 2009418:	10c00104 	addi	r3,r2,4
 200941c:	e0fffb15 	stw	r3,-20(fp)
 2009420:	e0fffa17 	ldw	r3,-24(fp)
 2009424:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009428:	e0bffb17 	ldw	r2,-20(fp)
 200942c:	10c00104 	addi	r3,r2,4
 2009430:	e0fffb15 	stw	r3,-20(fp)
 2009434:	e0fffa17 	ldw	r3,-24(fp)
 2009438:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200943c:	e0bffb17 	ldw	r2,-20(fp)
 2009440:	10c00104 	addi	r3,r2,4
 2009444:	e0fffb15 	stw	r3,-20(fp)
 2009448:	e0fffa17 	ldw	r3,-24(fp)
 200944c:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2009450:	e0bfff17 	ldw	r2,-4(fp)
 2009454:	10bffc04 	addi	r2,r2,-16
 2009458:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 200945c:	e0bfff17 	ldw	r2,-4(fp)
 2009460:	10800428 	cmpgeui	r2,r2,16
 2009464:	103fe61e 	bne	r2,zero,2009400 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2009468:	00000806 	br	200948c <memset+0x174>
        {
          *aligned_addr++ = buffer;
 200946c:	e0bffb17 	ldw	r2,-20(fp)
 2009470:	10c00104 	addi	r3,r2,4
 2009474:	e0fffb15 	stw	r3,-20(fp)
 2009478:	e0fffa17 	ldw	r3,-24(fp)
 200947c:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2009480:	e0bfff17 	ldw	r2,-4(fp)
 2009484:	10bfff04 	addi	r2,r2,-4
 2009488:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 200948c:	e0bfff17 	ldw	r2,-4(fp)
 2009490:	10800128 	cmpgeui	r2,r2,4
 2009494:	103ff51e 	bne	r2,zero,200946c <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2009498:	e0bffb17 	ldw	r2,-20(fp)
 200949c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20094a0:	00000506 	br	20094b8 <memset+0x1a0>
    *s++ = (char) c;
 20094a4:	e0bff817 	ldw	r2,-32(fp)
 20094a8:	10c00044 	addi	r3,r2,1
 20094ac:	e0fff815 	stw	r3,-32(fp)
 20094b0:	e0fffe17 	ldw	r3,-8(fp)
 20094b4:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20094b8:	e0bfff17 	ldw	r2,-4(fp)
 20094bc:	10ffffc4 	addi	r3,r2,-1
 20094c0:	e0ffff15 	stw	r3,-4(fp)
 20094c4:	103ff71e 	bne	r2,zero,20094a4 <memset+0x18c>
    *s++ = (char) c;

  return m;
 20094c8:	e0bffd17 	ldw	r2,-12(fp)
}
 20094cc:	e037883a 	mov	sp,fp
 20094d0:	df000017 	ldw	fp,0(sp)
 20094d4:	dec00104 	addi	sp,sp,4
 20094d8:	f800283a 	ret

020094dc <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 20094dc:	defff804 	addi	sp,sp,-32
 20094e0:	dfc00515 	stw	ra,20(sp)
 20094e4:	df000415 	stw	fp,16(sp)
 20094e8:	df000404 	addi	fp,sp,16
 20094ec:	e13ffe15 	stw	r4,-8(fp)
 20094f0:	e17fff15 	stw	r5,-4(fp)
 20094f4:	e1800215 	stw	r6,8(fp)
 20094f8:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 20094fc:	e0800204 	addi	r2,fp,8
 2009500:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2009504:	e0bffe17 	ldw	r2,-8(fp)
 2009508:	10800217 	ldw	r2,8(r2)
 200950c:	e0fffd17 	ldw	r3,-12(fp)
 2009510:	180f883a 	mov	r7,r3
 2009514:	e1bfff17 	ldw	r6,-4(fp)
 2009518:	100b883a 	mov	r5,r2
 200951c:	e13ffe17 	ldw	r4,-8(fp)
 2009520:	200992c0 	call	200992c <___vfprintf_internal_r>
 2009524:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2009528:	e0bffc17 	ldw	r2,-16(fp)
}
 200952c:	e037883a 	mov	sp,fp
 2009530:	dfc00117 	ldw	ra,4(sp)
 2009534:	df000017 	ldw	fp,0(sp)
 2009538:	dec00404 	addi	sp,sp,16
 200953c:	f800283a 	ret

02009540 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2009540:	defff704 	addi	sp,sp,-36
 2009544:	dfc00515 	stw	ra,20(sp)
 2009548:	df000415 	stw	fp,16(sp)
 200954c:	df000404 	addi	fp,sp,16
 2009550:	e13fff15 	stw	r4,-4(fp)
 2009554:	e1400215 	stw	r5,8(fp)
 2009558:	e1800315 	stw	r6,12(fp)
 200955c:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2009560:	d0a03017 	ldw	r2,-32576(gp)
 2009564:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2009568:	e0800204 	addi	r2,fp,8
 200956c:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2009570:	d0a03017 	ldw	r2,-32576(gp)
 2009574:	10800217 	ldw	r2,8(r2)
 2009578:	e0fffe17 	ldw	r3,-8(fp)
 200957c:	180d883a 	mov	r6,r3
 2009580:	e17fff17 	ldw	r5,-4(fp)
 2009584:	1009883a 	mov	r4,r2
 2009588:	20098dc0 	call	20098dc <__vfprintf_internal>
 200958c:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 2009590:	e0bffd17 	ldw	r2,-12(fp)
}
 2009594:	e037883a 	mov	sp,fp
 2009598:	dfc00117 	ldw	ra,4(sp)
 200959c:	df000017 	ldw	fp,0(sp)
 20095a0:	dec00504 	addi	sp,sp,20
 20095a4:	f800283a 	ret

020095a8 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 20095a8:	defff104 	addi	sp,sp,-60
 20095ac:	dfc00e15 	stw	ra,56(sp)
 20095b0:	df000d15 	stw	fp,52(sp)
 20095b4:	df000d04 	addi	fp,sp,52
 20095b8:	e13ffe15 	stw	r4,-8(fp)
 20095bc:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 20095c0:	e13fff17 	ldw	r4,-4(fp)
 20095c4:	20096f80 	call	20096f8 <strlen>
 20095c8:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 20095cc:	e0bfff17 	ldw	r2,-4(fp)
 20095d0:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 20095d4:	e0bff317 	ldw	r2,-52(fp)
 20095d8:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 20095dc:	008080b4 	movhi	r2,514
 20095e0:	10896304 	addi	r2,r2,9612
 20095e4:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 20095e8:	00800044 	movi	r2,1
 20095ec:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 20095f0:	e0bff317 	ldw	r2,-52(fp)
 20095f4:	10800044 	addi	r2,r2,1
 20095f8:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 20095fc:	e0bffa04 	addi	r2,fp,-24
 2009600:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2009604:	00800084 	movi	r2,2
 2009608:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 200960c:	e0bffe17 	ldw	r2,-8(fp)
 2009610:	e0bff415 	stw	r2,-48(fp)
 2009614:	e0bff417 	ldw	r2,-48(fp)
 2009618:	10000526 	beq	r2,zero,2009630 <_puts_r+0x88>
 200961c:	e0bff417 	ldw	r2,-48(fp)
 2009620:	10800e17 	ldw	r2,56(r2)
 2009624:	1000021e 	bne	r2,zero,2009630 <_puts_r+0x88>
 2009628:	e13ff417 	ldw	r4,-48(fp)
 200962c:	200e5980 	call	200e598 <__sinit>
  fp = _stdout_r (ptr);
 2009630:	e0bffe17 	ldw	r2,-8(fp)
 2009634:	10800217 	ldw	r2,8(r2)
 2009638:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 200963c:	e0bff517 	ldw	r2,-44(fp)
 2009640:	1080030b 	ldhu	r2,12(r2)
 2009644:	10bfffcc 	andi	r2,r2,65535
 2009648:	1088000c 	andi	r2,r2,8192
 200964c:	10000c1e 	bne	r2,zero,2009680 <_puts_r+0xd8>
 2009650:	e0bff517 	ldw	r2,-44(fp)
 2009654:	1080030b 	ldhu	r2,12(r2)
 2009658:	10880014 	ori	r2,r2,8192
 200965c:	1007883a 	mov	r3,r2
 2009660:	e0bff517 	ldw	r2,-44(fp)
 2009664:	10c0030d 	sth	r3,12(r2)
 2009668:	e0bff517 	ldw	r2,-44(fp)
 200966c:	10c01917 	ldw	r3,100(r2)
 2009670:	00b7ffc4 	movi	r2,-8193
 2009674:	1886703a 	and	r3,r3,r2
 2009678:	e0bff517 	ldw	r2,-44(fp)
 200967c:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2009680:	e0bff704 	addi	r2,fp,-36
 2009684:	100d883a 	mov	r6,r2
 2009688:	e17ff517 	ldw	r5,-44(fp)
 200968c:	e13ffe17 	ldw	r4,-8(fp)
 2009690:	200eee40 	call	200eee4 <__sfvwrite_r>
 2009694:	10000226 	beq	r2,zero,20096a0 <_puts_r+0xf8>
 2009698:	00bfffc4 	movi	r2,-1
 200969c:	00000106 	br	20096a4 <_puts_r+0xfc>
 20096a0:	00800284 	movi	r2,10
 20096a4:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 20096a8:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 20096ac:	e037883a 	mov	sp,fp
 20096b0:	dfc00117 	ldw	ra,4(sp)
 20096b4:	df000017 	ldw	fp,0(sp)
 20096b8:	dec00204 	addi	sp,sp,8
 20096bc:	f800283a 	ret

020096c0 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 20096c0:	defffd04 	addi	sp,sp,-12
 20096c4:	dfc00215 	stw	ra,8(sp)
 20096c8:	df000115 	stw	fp,4(sp)
 20096cc:	df000104 	addi	fp,sp,4
 20096d0:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 20096d4:	d0a03017 	ldw	r2,-32576(gp)
 20096d8:	e17fff17 	ldw	r5,-4(fp)
 20096dc:	1009883a 	mov	r4,r2
 20096e0:	20095a80 	call	20095a8 <_puts_r>
}
 20096e4:	e037883a 	mov	sp,fp
 20096e8:	dfc00117 	ldw	ra,4(sp)
 20096ec:	df000017 	ldw	fp,0(sp)
 20096f0:	dec00204 	addi	sp,sp,8
 20096f4:	f800283a 	ret

020096f8 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 20096f8:	defffc04 	addi	sp,sp,-16
 20096fc:	df000315 	stw	fp,12(sp)
 2009700:	df000304 	addi	fp,sp,12
 2009704:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 2009708:	e0bfff17 	ldw	r2,-4(fp)
 200970c:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2009710:	00000d06 	br	2009748 <strlen+0x50>
    {
      if (!*str)
 2009714:	e0bfff17 	ldw	r2,-4(fp)
 2009718:	10800003 	ldbu	r2,0(r2)
 200971c:	10803fcc 	andi	r2,r2,255
 2009720:	1080201c 	xori	r2,r2,128
 2009724:	10bfe004 	addi	r2,r2,-128
 2009728:	1000041e 	bne	r2,zero,200973c <strlen+0x44>
	return str - start;
 200972c:	e0ffff17 	ldw	r3,-4(fp)
 2009730:	e0bffe17 	ldw	r2,-8(fp)
 2009734:	1885c83a 	sub	r2,r3,r2
 2009738:	00002806 	br	20097dc <strlen+0xe4>
      str++;
 200973c:	e0bfff17 	ldw	r2,-4(fp)
 2009740:	10800044 	addi	r2,r2,1
 2009744:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2009748:	e0bfff17 	ldw	r2,-4(fp)
 200974c:	108000cc 	andi	r2,r2,3
 2009750:	103ff01e 	bne	r2,zero,2009714 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2009754:	e0bfff17 	ldw	r2,-4(fp)
 2009758:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 200975c:	00000306 	br	200976c <strlen+0x74>
    aligned_addr++;
 2009760:	e0bffd17 	ldw	r2,-12(fp)
 2009764:	10800104 	addi	r2,r2,4
 2009768:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 200976c:	e0bffd17 	ldw	r2,-12(fp)
 2009770:	10c00017 	ldw	r3,0(r2)
 2009774:	00bfbff4 	movhi	r2,65279
 2009778:	10bfbfc4 	addi	r2,r2,-257
 200977c:	1887883a 	add	r3,r3,r2
 2009780:	e0bffd17 	ldw	r2,-12(fp)
 2009784:	10800017 	ldw	r2,0(r2)
 2009788:	0084303a 	nor	r2,zero,r2
 200978c:	1886703a 	and	r3,r3,r2
 2009790:	00a02074 	movhi	r2,32897
 2009794:	10a02004 	addi	r2,r2,-32640
 2009798:	1884703a 	and	r2,r3,r2
 200979c:	103ff026 	beq	r2,zero,2009760 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 20097a0:	e0bffd17 	ldw	r2,-12(fp)
 20097a4:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20097a8:	00000306 	br	20097b8 <strlen+0xc0>
    str++;
 20097ac:	e0bfff17 	ldw	r2,-4(fp)
 20097b0:	10800044 	addi	r2,r2,1
 20097b4:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20097b8:	e0bfff17 	ldw	r2,-4(fp)
 20097bc:	10800003 	ldbu	r2,0(r2)
 20097c0:	10803fcc 	andi	r2,r2,255
 20097c4:	1080201c 	xori	r2,r2,128
 20097c8:	10bfe004 	addi	r2,r2,-128
 20097cc:	103ff71e 	bne	r2,zero,20097ac <strlen+0xb4>
    str++;
  return str - start;
 20097d0:	e0ffff17 	ldw	r3,-4(fp)
 20097d4:	e0bffe17 	ldw	r2,-8(fp)
 20097d8:	1885c83a 	sub	r2,r3,r2
}
 20097dc:	e037883a 	mov	sp,fp
 20097e0:	df000017 	ldw	fp,0(sp)
 20097e4:	dec00104 	addi	sp,sp,4
 20097e8:	f800283a 	ret

020097ec <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 20097ec:	defedf04 	addi	sp,sp,-1156
 20097f0:	dfc12015 	stw	ra,1152(sp)
 20097f4:	df011f15 	stw	fp,1148(sp)
 20097f8:	dc011e15 	stw	r16,1144(sp)
 20097fc:	df011f04 	addi	fp,sp,1148
 2009800:	e13ffc15 	stw	r4,-16(fp)
 2009804:	2821883a 	mov	r16,r5
 2009808:	e1bffd15 	stw	r6,-12(fp)
 200980c:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2009810:	80c0030b 	ldhu	r3,12(r16)
 2009814:	00bfff44 	movi	r2,-3
 2009818:	1884703a 	and	r2,r3,r2
 200981c:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2009820:	80801917 	ldw	r2,100(r16)
 2009824:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2009828:	8080038b 	ldhu	r2,14(r16)
 200982c:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2009830:	80800717 	ldw	r2,28(r16)
 2009834:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2009838:	80800917 	ldw	r2,36(r16)
 200983c:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2009840:	e0befc04 	addi	r2,fp,-1040
 2009844:	e0bee215 	stw	r2,-1144(fp)
 2009848:	e0bee217 	ldw	r2,-1144(fp)
 200984c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2009850:	00810004 	movi	r2,1024
 2009854:	e0bee415 	stw	r2,-1136(fp)
 2009858:	e0bee417 	ldw	r2,-1136(fp)
 200985c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2009860:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2009864:	e0bee204 	addi	r2,fp,-1144
 2009868:	e1fffe17 	ldw	r7,-8(fp)
 200986c:	e1bffd17 	ldw	r6,-12(fp)
 2009870:	100b883a 	mov	r5,r2
 2009874:	e13ffc17 	ldw	r4,-16(fp)
 2009878:	200992c0 	call	200992c <___vfprintf_internal_r>
 200987c:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2009880:	e0bee117 	ldw	r2,-1148(fp)
 2009884:	10000716 	blt	r2,zero,20098a4 <__sbprintf+0xb8>
 2009888:	e0bee204 	addi	r2,fp,-1144
 200988c:	100b883a 	mov	r5,r2
 2009890:	e13ffc17 	ldw	r4,-16(fp)
 2009894:	200e1180 	call	200e118 <_fflush_r>
 2009898:	10000226 	beq	r2,zero,20098a4 <__sbprintf+0xb8>
		ret = EOF;
 200989c:	00bfffc4 	movi	r2,-1
 20098a0:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 20098a4:	e0bee50b 	ldhu	r2,-1132(fp)
 20098a8:	10bfffcc 	andi	r2,r2,65535
 20098ac:	1080100c 	andi	r2,r2,64
 20098b0:	10000326 	beq	r2,zero,20098c0 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 20098b4:	8080030b 	ldhu	r2,12(r16)
 20098b8:	10801014 	ori	r2,r2,64
 20098bc:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 20098c0:	e0bee117 	ldw	r2,-1148(fp)
}
 20098c4:	e6ffff04 	addi	sp,fp,-4
 20098c8:	dfc00217 	ldw	ra,8(sp)
 20098cc:	df000117 	ldw	fp,4(sp)
 20098d0:	dc000017 	ldw	r16,0(sp)
 20098d4:	dec00304 	addi	sp,sp,12
 20098d8:	f800283a 	ret

020098dc <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 20098dc:	defffa04 	addi	sp,sp,-24
 20098e0:	dfc00515 	stw	ra,20(sp)
 20098e4:	df000415 	stw	fp,16(sp)
 20098e8:	df000404 	addi	fp,sp,16
 20098ec:	e13ffd15 	stw	r4,-12(fp)
 20098f0:	e17ffe15 	stw	r5,-8(fp)
 20098f4:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 20098f8:	d0a03017 	ldw	r2,-32576(gp)
 20098fc:	e1ffff17 	ldw	r7,-4(fp)
 2009900:	e1bffe17 	ldw	r6,-8(fp)
 2009904:	e17ffd17 	ldw	r5,-12(fp)
 2009908:	1009883a 	mov	r4,r2
 200990c:	200992c0 	call	200992c <___vfprintf_internal_r>
 2009910:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2009914:	e0bffc17 	ldw	r2,-16(fp)
}
 2009918:	e037883a 	mov	sp,fp
 200991c:	dfc00117 	ldw	ra,4(sp)
 2009920:	df000017 	ldw	fp,0(sp)
 2009924:	dec00204 	addi	sp,sp,8
 2009928:	f800283a 	ret

0200992c <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200992c:	deffa404 	addi	sp,sp,-368
 2009930:	dfc05b15 	stw	ra,364(sp)
 2009934:	df005a15 	stw	fp,360(sp)
 2009938:	ddc05915 	stw	r23,356(sp)
 200993c:	dd805815 	stw	r22,352(sp)
 2009940:	dd405715 	stw	r21,348(sp)
 2009944:	dd005615 	stw	r20,344(sp)
 2009948:	dcc05515 	stw	r19,340(sp)
 200994c:	dc805415 	stw	r18,336(sp)
 2009950:	dc405315 	stw	r17,332(sp)
 2009954:	dc005215 	stw	r16,328(sp)
 2009958:	df005a04 	addi	fp,sp,360
 200995c:	e13fe615 	stw	r4,-104(fp)
 2009960:	e17fe715 	stw	r5,-100(fp)
 2009964:	e1bfe815 	stw	r6,-96(fp)
 2009968:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 200996c:	e13fe617 	ldw	r4,-104(fp)
 2009970:	200f7800 	call	200f780 <_localeconv_r>
 2009974:	10800017 	ldw	r2,0(r2)
 2009978:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 200997c:	e13fbb17 	ldw	r4,-276(fp)
 2009980:	20096f80 	call	20096f8 <strlen>
 2009984:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2009988:	e03fc215 	stw	zero,-248(fp)
 200998c:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 2009990:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2009994:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2009998:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200999c:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 20099a0:	e0bfe617 	ldw	r2,-104(fp)
 20099a4:	e0bfbd15 	stw	r2,-268(fp)
 20099a8:	e0bfbd17 	ldw	r2,-268(fp)
 20099ac:	10000526 	beq	r2,zero,20099c4 <___vfprintf_internal_r+0x98>
 20099b0:	e0bfbd17 	ldw	r2,-268(fp)
 20099b4:	10800e17 	ldw	r2,56(r2)
 20099b8:	1000021e 	bne	r2,zero,20099c4 <___vfprintf_internal_r+0x98>
 20099bc:	e13fbd17 	ldw	r4,-268(fp)
 20099c0:	200e5980 	call	200e598 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 20099c4:	e0bfe717 	ldw	r2,-100(fp)
 20099c8:	1080030b 	ldhu	r2,12(r2)
 20099cc:	10bfffcc 	andi	r2,r2,65535
 20099d0:	1088000c 	andi	r2,r2,8192
 20099d4:	10000c1e 	bne	r2,zero,2009a08 <___vfprintf_internal_r+0xdc>
 20099d8:	e0bfe717 	ldw	r2,-100(fp)
 20099dc:	1080030b 	ldhu	r2,12(r2)
 20099e0:	10880014 	ori	r2,r2,8192
 20099e4:	1007883a 	mov	r3,r2
 20099e8:	e0bfe717 	ldw	r2,-100(fp)
 20099ec:	10c0030d 	sth	r3,12(r2)
 20099f0:	e0bfe717 	ldw	r2,-100(fp)
 20099f4:	10c01917 	ldw	r3,100(r2)
 20099f8:	00b7ffc4 	movi	r2,-8193
 20099fc:	1886703a 	and	r3,r3,r2
 2009a00:	e0bfe717 	ldw	r2,-100(fp)
 2009a04:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2009a08:	e0bfe717 	ldw	r2,-100(fp)
 2009a0c:	1080030b 	ldhu	r2,12(r2)
 2009a10:	10bfffcc 	andi	r2,r2,65535
 2009a14:	1080020c 	andi	r2,r2,8
 2009a18:	10000326 	beq	r2,zero,2009a28 <___vfprintf_internal_r+0xfc>
 2009a1c:	e0bfe717 	ldw	r2,-100(fp)
 2009a20:	10800417 	ldw	r2,16(r2)
 2009a24:	1000061e 	bne	r2,zero,2009a40 <___vfprintf_internal_r+0x114>
 2009a28:	e17fe717 	ldw	r5,-100(fp)
 2009a2c:	e13fe617 	ldw	r4,-104(fp)
 2009a30:	200bd480 	call	200bd48 <__swsetup_r>
 2009a34:	10000226 	beq	r2,zero,2009a40 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2009a38:	00bfffc4 	movi	r2,-1
 2009a3c:	0007e206 	br	200b9c8 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2009a40:	e0bfe717 	ldw	r2,-100(fp)
 2009a44:	1080030b 	ldhu	r2,12(r2)
 2009a48:	10bfffcc 	andi	r2,r2,65535
 2009a4c:	1080068c 	andi	r2,r2,26
 2009a50:	10800298 	cmpnei	r2,r2,10
 2009a54:	10000c1e 	bne	r2,zero,2009a88 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2009a58:	e0bfe717 	ldw	r2,-100(fp)
 2009a5c:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2009a60:	10bfffcc 	andi	r2,r2,65535
 2009a64:	10a0001c 	xori	r2,r2,32768
 2009a68:	10a00004 	addi	r2,r2,-32768
 2009a6c:	10000616 	blt	r2,zero,2009a88 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2009a70:	e1ffe917 	ldw	r7,-92(fp)
 2009a74:	e1bfe817 	ldw	r6,-96(fp)
 2009a78:	e17fe717 	ldw	r5,-100(fp)
 2009a7c:	e13fe617 	ldw	r4,-104(fp)
 2009a80:	20097ec0 	call	20097ec <__sbprintf>
 2009a84:	0007d006 	br	200b9c8 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2009a88:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2009a8c:	e47fcb04 	addi	r17,fp,-212
 2009a90:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2009a94:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2009a98:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2009a9c:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2009aa0:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2009aa4:	00000106 	br	2009aac <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2009aa8:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2009aac:	a8800003 	ldbu	r2,0(r21)
 2009ab0:	10803fcc 	andi	r2,r2,255
 2009ab4:	1080201c 	xori	r2,r2,128
 2009ab8:	10bfe004 	addi	r2,r2,-128
 2009abc:	10000626 	beq	r2,zero,2009ad8 <___vfprintf_internal_r+0x1ac>
 2009ac0:	a8800003 	ldbu	r2,0(r21)
 2009ac4:	10803fcc 	andi	r2,r2,255
 2009ac8:	1080201c 	xori	r2,r2,128
 2009acc:	10bfe004 	addi	r2,r2,-128
 2009ad0:	10800958 	cmpnei	r2,r2,37
 2009ad4:	103ff41e 	bne	r2,zero,2009aa8 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2009ad8:	a807883a 	mov	r3,r21
 2009adc:	9005883a 	mov	r2,r18
 2009ae0:	18a1c83a 	sub	r16,r3,r2
 2009ae4:	80001826 	beq	r16,zero,2009b48 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 2009ae8:	8c800015 	stw	r18,0(r17)
 2009aec:	8005883a 	mov	r2,r16
 2009af0:	88800115 	stw	r2,4(r17)
 2009af4:	e0bfca17 	ldw	r2,-216(fp)
 2009af8:	8007883a 	mov	r3,r16
 2009afc:	10c5883a 	add	r2,r2,r3
 2009b00:	e0bfca15 	stw	r2,-216(fp)
 2009b04:	8c400204 	addi	r17,r17,8
 2009b08:	e0bfc917 	ldw	r2,-220(fp)
 2009b0c:	10800044 	addi	r2,r2,1
 2009b10:	e0bfc915 	stw	r2,-220(fp)
 2009b14:	e0bfc917 	ldw	r2,-220(fp)
 2009b18:	10800210 	cmplti	r2,r2,8
 2009b1c:	1000071e 	bne	r2,zero,2009b3c <___vfprintf_internal_r+0x210>
 2009b20:	e0bfc804 	addi	r2,fp,-224
 2009b24:	100d883a 	mov	r6,r2
 2009b28:	e17fe717 	ldw	r5,-100(fp)
 2009b2c:	e13fe617 	ldw	r4,-104(fp)
 2009b30:	20137b40 	call	20137b4 <__sprint_r>
 2009b34:	10074d1e 	bne	r2,zero,200b86c <___vfprintf_internal_r+0x1f40>
 2009b38:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2009b3c:	e0bfac17 	ldw	r2,-336(fp)
 2009b40:	1405883a 	add	r2,r2,r16
 2009b44:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2009b48:	a8800003 	ldbu	r2,0(r21)
 2009b4c:	10803fcc 	andi	r2,r2,255
 2009b50:	1080201c 	xori	r2,r2,128
 2009b54:	10bfe004 	addi	r2,r2,-128
 2009b58:	10073626 	beq	r2,zero,200b834 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2009b5c:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 2009b60:	ad400044 	addi	r21,r21,1

		flags = 0;
 2009b64:	0027883a 	mov	r19,zero
		dprec = 0;
 2009b68:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 2009b6c:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 2009b70:	00bfffc4 	movi	r2,-1
 2009b74:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 2009b78:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2009b7c:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2009b80:	a805883a 	mov	r2,r21
 2009b84:	15400044 	addi	r21,r2,1
 2009b88:	10800003 	ldbu	r2,0(r2)
 2009b8c:	15003fcc 	andi	r20,r2,255
 2009b90:	a500201c 	xori	r20,r20,128
 2009b94:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 2009b98:	a0bff804 	addi	r2,r20,-32
 2009b9c:	10c01668 	cmpgeui	r3,r2,89
 2009ba0:	1803491e 	bne	r3,zero,200a8c8 <___vfprintf_internal_r+0xf9c>
 2009ba4:	100690ba 	slli	r3,r2,2
 2009ba8:	00808074 	movhi	r2,513
 2009bac:	10a6ef04 	addi	r2,r2,-25668
 2009bb0:	1885883a 	add	r2,r3,r2
 2009bb4:	10800017 	ldw	r2,0(r2)
 2009bb8:	1000683a 	jmp	r2
 2009bbc:	02009d20 	cmpeqi	r8,zero,628
 2009bc0:	0200a8c8 	cmpgei	r8,zero,675
 2009bc4:	0200a8c8 	cmpgei	r8,zero,675
 2009bc8:	02009d40 	call	2009d4 <__alt_mem_mem_Nios_PI+0x9d4>
 2009bcc:	0200a8c8 	cmpgei	r8,zero,675
 2009bd0:	0200a8c8 	cmpgei	r8,zero,675
 2009bd4:	0200a8c8 	cmpgei	r8,zero,675
 2009bd8:	0200a8c8 	cmpgei	r8,zero,675
 2009bdc:	0200a8c8 	cmpgei	r8,zero,675
 2009be0:	0200a8c8 	cmpgei	r8,zero,675
 2009be4:	02009d48 	cmpgei	r8,zero,629
 2009be8:	02009d7c 	xorhi	r8,zero,629
 2009bec:	0200a8c8 	cmpgei	r8,zero,675
 2009bf0:	02009d74 	movhi	r8,629
 2009bf4:	02009d88 	cmpgei	r8,zero,630
 2009bf8:	0200a8c8 	cmpgei	r8,zero,675
 2009bfc:	02009e1c 	xori	r8,zero,632
 2009c00:	02009e24 	muli	r8,zero,632
 2009c04:	02009e24 	muli	r8,zero,632
 2009c08:	02009e24 	muli	r8,zero,632
 2009c0c:	02009e24 	muli	r8,zero,632
 2009c10:	02009e24 	muli	r8,zero,632
 2009c14:	02009e24 	muli	r8,zero,632
 2009c18:	02009e24 	muli	r8,zero,632
 2009c1c:	02009e24 	muli	r8,zero,632
 2009c20:	02009e24 	muli	r8,zero,632
 2009c24:	0200a8c8 	cmpgei	r8,zero,675
 2009c28:	0200a8c8 	cmpgei	r8,zero,675
 2009c2c:	0200a8c8 	cmpgei	r8,zero,675
 2009c30:	0200a8c8 	cmpgei	r8,zero,675
 2009c34:	0200a8c8 	cmpgei	r8,zero,675
 2009c38:	0200a8c8 	cmpgei	r8,zero,675
 2009c3c:	0200a8c8 	cmpgei	r8,zero,675
 2009c40:	0200a8c8 	cmpgei	r8,zero,675
 2009c44:	0200a8c8 	cmpgei	r8,zero,675
 2009c48:	0200a8c8 	cmpgei	r8,zero,675
 2009c4c:	02009ecc 	andi	r8,zero,635
 2009c50:	02009fcc 	andi	r8,zero,639
 2009c54:	0200a8c8 	cmpgei	r8,zero,675
 2009c58:	02009fcc 	andi	r8,zero,639
 2009c5c:	0200a8c8 	cmpgei	r8,zero,675
 2009c60:	0200a8c8 	cmpgei	r8,zero,675
 2009c64:	0200a8c8 	cmpgei	r8,zero,675
 2009c68:	0200a8c8 	cmpgei	r8,zero,675
 2009c6c:	02009e60 	cmpeqi	r8,zero,633
 2009c70:	0200a8c8 	cmpgei	r8,zero,675
 2009c74:	0200a8c8 	cmpgei	r8,zero,675
 2009c78:	0200a368 	cmpgeui	r8,zero,653
 2009c7c:	0200a8c8 	cmpgei	r8,zero,675
 2009c80:	0200a8c8 	cmpgei	r8,zero,675
 2009c84:	0200a8c8 	cmpgei	r8,zero,675
 2009c88:	0200a8c8 	cmpgei	r8,zero,675
 2009c8c:	0200a8c8 	cmpgei	r8,zero,675
 2009c90:	0200a4e4 	muli	r8,zero,659
 2009c94:	0200a8c8 	cmpgei	r8,zero,675
 2009c98:	0200a8c8 	cmpgei	r8,zero,675
 2009c9c:	0200a5a4 	muli	r8,zero,662
 2009ca0:	0200a8c8 	cmpgei	r8,zero,675
 2009ca4:	0200a8c8 	cmpgei	r8,zero,675
 2009ca8:	0200a8c8 	cmpgei	r8,zero,675
 2009cac:	0200a8c8 	cmpgei	r8,zero,675
 2009cb0:	0200a8c8 	cmpgei	r8,zero,675
 2009cb4:	0200a8c8 	cmpgei	r8,zero,675
 2009cb8:	0200a8c8 	cmpgei	r8,zero,675
 2009cbc:	0200a8c8 	cmpgei	r8,zero,675
 2009cc0:	0200a8c8 	cmpgei	r8,zero,675
 2009cc4:	0200a8c8 	cmpgei	r8,zero,675
 2009cc8:	02009ea4 	muli	r8,zero,634
 2009ccc:	02009ed0 	cmplti	r8,zero,635
 2009cd0:	02009fcc 	andi	r8,zero,639
 2009cd4:	02009fcc 	andi	r8,zero,639
 2009cd8:	02009fcc 	andi	r8,zero,639
 2009cdc:	02009e68 	cmpgeui	r8,zero,633
 2009ce0:	02009ed0 	cmplti	r8,zero,635
 2009ce4:	0200a8c8 	cmpgei	r8,zero,675
 2009ce8:	0200a8c8 	cmpgei	r8,zero,675
 2009cec:	02009e70 	cmpltui	r8,zero,633
 2009cf0:	0200a8c8 	cmpgei	r8,zero,675
 2009cf4:	0200a2c8 	cmpgei	r8,zero,651
 2009cf8:	0200a36c 	andhi	r8,zero,653
 2009cfc:	0200a40c 	andi	r8,zero,656
 2009d00:	02009e9c 	xori	r8,zero,634
 2009d04:	0200a8c8 	cmpgei	r8,zero,675
 2009d08:	0200a454 	movui	r8,657
 2009d0c:	0200a8c8 	cmpgei	r8,zero,675
 2009d10:	0200a4e8 	cmpgeui	r8,zero,659
 2009d14:	0200a8c8 	cmpgei	r8,zero,675
 2009d18:	0200a8c8 	cmpgei	r8,zero,675
 2009d1c:	0200a5b4 	movhi	r8,662
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2009d20:	e0bfc103 	ldbu	r2,-252(fp)
 2009d24:	10803fcc 	andi	r2,r2,255
 2009d28:	1080201c 	xori	r2,r2,128
 2009d2c:	10bfe004 	addi	r2,r2,-128
 2009d30:	103f931e 	bne	r2,zero,2009b80 <___vfprintf_internal_r+0x254>
				sign = ' ';
 2009d34:	00800804 	movi	r2,32
 2009d38:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2009d3c:	003f9006 	br	2009b80 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 2009d40:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2009d44:	003f8e06 	br	2009b80 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2009d48:	e0bfe917 	ldw	r2,-92(fp)
 2009d4c:	10c00104 	addi	r3,r2,4
 2009d50:	e0ffe915 	stw	r3,-92(fp)
 2009d54:	10800017 	ldw	r2,0(r2)
 2009d58:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2009d5c:	e0bfad17 	ldw	r2,-332(fp)
 2009d60:	10000116 	blt	r2,zero,2009d68 <___vfprintf_internal_r+0x43c>
				goto rflag;
 2009d64:	003f8606 	br	2009b80 <___vfprintf_internal_r+0x254>
			width = -width;
 2009d68:	e0bfad17 	ldw	r2,-332(fp)
 2009d6c:	0085c83a 	sub	r2,zero,r2
 2009d70:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2009d74:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2009d78:	003f8106 	br	2009b80 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2009d7c:	00800ac4 	movi	r2,43
 2009d80:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2009d84:	003f7e06 	br	2009b80 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 2009d88:	a805883a 	mov	r2,r21
 2009d8c:	15400044 	addi	r21,r2,1
 2009d90:	10800003 	ldbu	r2,0(r2)
 2009d94:	15003fcc 	andi	r20,r2,255
 2009d98:	a500201c 	xori	r20,r20,128
 2009d9c:	a53fe004 	addi	r20,r20,-128
 2009da0:	a0800a98 	cmpnei	r2,r20,42
 2009da4:	10000a1e 	bne	r2,zero,2009dd0 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2009da8:	e0bfe917 	ldw	r2,-92(fp)
 2009dac:	10c00104 	addi	r3,r2,4
 2009db0:	e0ffe915 	stw	r3,-92(fp)
 2009db4:	10800017 	ldw	r2,0(r2)
 2009db8:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2009dbc:	e0bfae17 	ldw	r2,-328(fp)
 2009dc0:	103f6f0e 	bge	r2,zero,2009b80 <___vfprintf_internal_r+0x254>
					prec = -1;
 2009dc4:	00bfffc4 	movi	r2,-1
 2009dc8:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2009dcc:	003f6c06 	br	2009b80 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2009dd0:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2009dd4:	00000906 	br	2009dfc <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 2009dd8:	80c002a4 	muli	r3,r16,10
 2009ddc:	a0bff404 	addi	r2,r20,-48
 2009de0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2009de4:	a805883a 	mov	r2,r21
 2009de8:	15400044 	addi	r21,r2,1
 2009dec:	10800003 	ldbu	r2,0(r2)
 2009df0:	15003fcc 	andi	r20,r2,255
 2009df4:	a500201c 	xori	r20,r20,128
 2009df8:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2009dfc:	a0bff404 	addi	r2,r20,-48
 2009e00:	108002b0 	cmpltui	r2,r2,10
 2009e04:	103ff41e 	bne	r2,zero,2009dd8 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 2009e08:	8005883a 	mov	r2,r16
 2009e0c:	1000010e 	bge	r2,zero,2009e14 <___vfprintf_internal_r+0x4e8>
 2009e10:	00bfffc4 	movi	r2,-1
 2009e14:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 2009e18:	003f5f06 	br	2009b98 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2009e1c:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2009e20:	003f5706 	br	2009b80 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 2009e24:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2009e28:	80c002a4 	muli	r3,r16,10
 2009e2c:	a0bff404 	addi	r2,r20,-48
 2009e30:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2009e34:	a805883a 	mov	r2,r21
 2009e38:	15400044 	addi	r21,r2,1
 2009e3c:	10800003 	ldbu	r2,0(r2)
 2009e40:	15003fcc 	andi	r20,r2,255
 2009e44:	a500201c 	xori	r20,r20,128
 2009e48:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 2009e4c:	a0bff404 	addi	r2,r20,-48
 2009e50:	108002b0 	cmpltui	r2,r2,10
 2009e54:	103ff41e 	bne	r2,zero,2009e28 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2009e58:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 2009e5c:	003f4e06 	br	2009b98 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 2009e60:	9cc00214 	ori	r19,r19,8
			goto rflag;
 2009e64:	003f4606 	br	2009b80 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2009e68:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2009e6c:	003f4406 	br	2009b80 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 2009e70:	a8800003 	ldbu	r2,0(r21)
 2009e74:	10803fcc 	andi	r2,r2,255
 2009e78:	1080201c 	xori	r2,r2,128
 2009e7c:	10bfe004 	addi	r2,r2,-128
 2009e80:	10801b18 	cmpnei	r2,r2,108
 2009e84:	1000031e 	bne	r2,zero,2009e94 <___vfprintf_internal_r+0x568>
				fmt++;
 2009e88:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2009e8c:	9cc00814 	ori	r19,r19,32
 2009e90:	003f3b06 	br	2009b80 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 2009e94:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2009e98:	003f3906 	br	2009b80 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 2009e9c:	9cc00814 	ori	r19,r19,32
			goto rflag;
 2009ea0:	003f3706 	br	2009b80 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2009ea4:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2009ea8:	e0bfe917 	ldw	r2,-92(fp)
 2009eac:	10c00104 	addi	r3,r2,4
 2009eb0:	e0ffe915 	stw	r3,-92(fp)
 2009eb4:	10800017 	ldw	r2,0(r2)
 2009eb8:	90800005 	stb	r2,0(r18)
				size = 1;
 2009ebc:	00800044 	movi	r2,1
 2009ec0:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 2009ec4:	e03fc105 	stb	zero,-252(fp)
			break;
 2009ec8:	00028806 	br	200a8ec <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2009ecc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2009ed0:	9880080c 	andi	r2,r19,32
 2009ed4:	10000826 	beq	r2,zero,2009ef8 <___vfprintf_internal_r+0x5cc>
 2009ed8:	e13fe917 	ldw	r4,-92(fp)
 2009edc:	20800204 	addi	r2,r4,8
 2009ee0:	e0bfe915 	stw	r2,-92(fp)
 2009ee4:	20800017 	ldw	r2,0(r4)
 2009ee8:	20c00117 	ldw	r3,4(r4)
 2009eec:	e0bfea15 	stw	r2,-88(fp)
 2009ef0:	e0ffeb15 	stw	r3,-84(fp)
 2009ef4:	00001e06 	br	2009f70 <___vfprintf_internal_r+0x644>
 2009ef8:	9880040c 	andi	r2,r19,16
 2009efc:	10000826 	beq	r2,zero,2009f20 <___vfprintf_internal_r+0x5f4>
 2009f00:	e0bfe917 	ldw	r2,-92(fp)
 2009f04:	10c00104 	addi	r3,r2,4
 2009f08:	e0ffe915 	stw	r3,-92(fp)
 2009f0c:	10800017 	ldw	r2,0(r2)
 2009f10:	e0bfea15 	stw	r2,-88(fp)
 2009f14:	1005d7fa 	srai	r2,r2,31
 2009f18:	e0bfeb15 	stw	r2,-84(fp)
 2009f1c:	00001406 	br	2009f70 <___vfprintf_internal_r+0x644>
 2009f20:	9880100c 	andi	r2,r19,64
 2009f24:	10000b26 	beq	r2,zero,2009f54 <___vfprintf_internal_r+0x628>
 2009f28:	e0bfe917 	ldw	r2,-92(fp)
 2009f2c:	10c00104 	addi	r3,r2,4
 2009f30:	e0ffe915 	stw	r3,-92(fp)
 2009f34:	10800017 	ldw	r2,0(r2)
 2009f38:	10bfffcc 	andi	r2,r2,65535
 2009f3c:	10a0001c 	xori	r2,r2,32768
 2009f40:	10a00004 	addi	r2,r2,-32768
 2009f44:	e0bfea15 	stw	r2,-88(fp)
 2009f48:	1005d7fa 	srai	r2,r2,31
 2009f4c:	e0bfeb15 	stw	r2,-84(fp)
 2009f50:	00000706 	br	2009f70 <___vfprintf_internal_r+0x644>
 2009f54:	e0bfe917 	ldw	r2,-92(fp)
 2009f58:	10c00104 	addi	r3,r2,4
 2009f5c:	e0ffe915 	stw	r3,-92(fp)
 2009f60:	10800017 	ldw	r2,0(r2)
 2009f64:	e0bfea15 	stw	r2,-88(fp)
 2009f68:	1005d7fa 	srai	r2,r2,31
 2009f6c:	e0bfeb15 	stw	r2,-84(fp)
 2009f70:	e0bfea17 	ldw	r2,-88(fp)
 2009f74:	e0bfb115 	stw	r2,-316(fp)
 2009f78:	e0ffeb17 	ldw	r3,-84(fp)
 2009f7c:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2009f80:	e0bfb117 	ldw	r2,-316(fp)
 2009f84:	e0ffb217 	ldw	r3,-312(fp)
 2009f88:	18000d0e 	bge	r3,zero,2009fc0 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2009f8c:	000f883a 	mov	r7,zero
 2009f90:	0011883a 	mov	r8,zero
 2009f94:	e13fb117 	ldw	r4,-316(fp)
 2009f98:	e17fb217 	ldw	r5,-312(fp)
 2009f9c:	3905c83a 	sub	r2,r7,r4
 2009fa0:	388d803a 	cmpltu	r6,r7,r2
 2009fa4:	4147c83a 	sub	r3,r8,r5
 2009fa8:	1989c83a 	sub	r4,r3,r6
 2009fac:	2007883a 	mov	r3,r4
 2009fb0:	e0bfb115 	stw	r2,-316(fp)
 2009fb4:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 2009fb8:	00800b44 	movi	r2,45
 2009fbc:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 2009fc0:	00800044 	movi	r2,1
 2009fc4:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2009fc8:	0001b706 	br	200a6a8 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2009fcc:	9880020c 	andi	r2,r19,8
 2009fd0:	10000826 	beq	r2,zero,2009ff4 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2009fd4:	e13fe917 	ldw	r4,-92(fp)
 2009fd8:	20800204 	addi	r2,r4,8
 2009fdc:	e0bfe915 	stw	r2,-92(fp)
 2009fe0:	20800017 	ldw	r2,0(r4)
 2009fe4:	20c00117 	ldw	r3,4(r4)
 2009fe8:	e0bfc215 	stw	r2,-248(fp)
 2009fec:	e0ffc315 	stw	r3,-244(fp)
 2009ff0:	00000706 	br	200a010 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 2009ff4:	e13fe917 	ldw	r4,-92(fp)
 2009ff8:	20800204 	addi	r2,r4,8
 2009ffc:	e0bfe915 	stw	r2,-92(fp)
 200a000:	20800017 	ldw	r2,0(r4)
 200a004:	20c00117 	ldw	r3,4(r4)
 200a008:	e0bfc215 	stw	r2,-248(fp)
 200a00c:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 200a010:	e0bfc217 	ldw	r2,-248(fp)
 200a014:	e0ffc317 	ldw	r3,-244(fp)
 200a018:	1009883a 	mov	r4,r2
 200a01c:	180b883a 	mov	r5,r3
 200a020:	20038a40 	call	20038a4 <__fpclassifyd>
 200a024:	10800058 	cmpnei	r2,r2,1
 200a028:	1000161e 	bne	r2,zero,200a084 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 200a02c:	e0bfc217 	ldw	r2,-248(fp)
 200a030:	e0ffc317 	ldw	r3,-244(fp)
 200a034:	000d883a 	mov	r6,zero
 200a038:	000f883a 	mov	r7,zero
 200a03c:	1009883a 	mov	r4,r2
 200a040:	180b883a 	mov	r5,r3
 200a044:	2007d4c0 	call	2007d4c <__ledf2>
 200a048:	1000020e 	bge	r2,zero,200a054 <___vfprintf_internal_r+0x728>
					sign = '-';
 200a04c:	00800b44 	movi	r2,45
 200a050:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200a054:	a0801208 	cmpgei	r2,r20,72
 200a058:	1000031e 	bne	r2,zero,200a068 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 200a05c:	048080b4 	movhi	r18,514
 200a060:	94896404 	addi	r18,r18,9616
 200a064:	00000206 	br	200a070 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 200a068:	048080b4 	movhi	r18,514
 200a06c:	94896504 	addi	r18,r18,9620
				size = 3;
 200a070:	008000c4 	movi	r2,3
 200a074:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200a078:	00bfdfc4 	movi	r2,-129
 200a07c:	98a6703a 	and	r19,r19,r2
				break;
 200a080:	00021a06 	br	200a8ec <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 200a084:	e0bfc217 	ldw	r2,-248(fp)
 200a088:	e0ffc317 	ldw	r3,-244(fp)
 200a08c:	1009883a 	mov	r4,r2
 200a090:	180b883a 	mov	r5,r3
 200a094:	20038a40 	call	20038a4 <__fpclassifyd>
 200a098:	10000c1e 	bne	r2,zero,200a0cc <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200a09c:	a0801208 	cmpgei	r2,r20,72
 200a0a0:	1000031e 	bne	r2,zero,200a0b0 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 200a0a4:	048080b4 	movhi	r18,514
 200a0a8:	94896604 	addi	r18,r18,9624
 200a0ac:	00000206 	br	200a0b8 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 200a0b0:	048080b4 	movhi	r18,514
 200a0b4:	94896704 	addi	r18,r18,9628
				size = 3;
 200a0b8:	008000c4 	movi	r2,3
 200a0bc:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200a0c0:	00bfdfc4 	movi	r2,-129
 200a0c4:	98a6703a 	and	r19,r19,r2
				break;
 200a0c8:	00020806 	br	200a8ec <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 200a0cc:	e0bfae17 	ldw	r2,-328(fp)
 200a0d0:	10bfffd8 	cmpnei	r2,r2,-1
 200a0d4:	1000031e 	bne	r2,zero,200a0e4 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 200a0d8:	00800184 	movi	r2,6
 200a0dc:	e0bfae15 	stw	r2,-328(fp)
 200a0e0:	00000806 	br	200a104 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 200a0e4:	a08019e0 	cmpeqi	r2,r20,103
 200a0e8:	1000021e 	bne	r2,zero,200a0f4 <___vfprintf_internal_r+0x7c8>
 200a0ec:	a08011d8 	cmpnei	r2,r20,71
 200a0f0:	1000041e 	bne	r2,zero,200a104 <___vfprintf_internal_r+0x7d8>
 200a0f4:	e0bfae17 	ldw	r2,-328(fp)
 200a0f8:	1000021e 	bne	r2,zero,200a104 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 200a0fc:	00800044 	movi	r2,1
 200a100:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 200a104:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 200a108:	e0bfc217 	ldw	r2,-248(fp)
 200a10c:	e0ffc317 	ldw	r3,-244(fp)
 200a110:	dc800515 	stw	r18,20(sp)
 200a114:	e13fc704 	addi	r4,fp,-228
 200a118:	d9000415 	stw	r4,16(sp)
 200a11c:	dd000315 	stw	r20,12(sp)
 200a120:	e13fc404 	addi	r4,fp,-240
 200a124:	d9000215 	stw	r4,8(sp)
 200a128:	e13fc144 	addi	r4,fp,-251
 200a12c:	d9000115 	stw	r4,4(sp)
 200a130:	dcc00015 	stw	r19,0(sp)
 200a134:	e1ffae17 	ldw	r7,-328(fp)
 200a138:	100b883a 	mov	r5,r2
 200a13c:	180d883a 	mov	r6,r3
 200a140:	e13fe617 	ldw	r4,-104(fp)
 200a144:	200b9fc0 	call	200b9fc <cvt>
 200a148:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 200a14c:	a08019e0 	cmpeqi	r2,r20,103
 200a150:	1000021e 	bne	r2,zero,200a15c <___vfprintf_internal_r+0x830>
 200a154:	a08011d8 	cmpnei	r2,r20,71
 200a158:	1000091e 	bne	r2,zero,200a180 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 200a15c:	e0bfc417 	ldw	r2,-240(fp)
 200a160:	10bfff50 	cmplti	r2,r2,-3
 200a164:	1000031e 	bne	r2,zero,200a174 <___vfprintf_internal_r+0x848>
 200a168:	e0bfc417 	ldw	r2,-240(fp)
 200a16c:	e0ffae17 	ldw	r3,-328(fp)
 200a170:	1880020e 	bge	r3,r2,200a17c <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 200a174:	a53fff84 	addi	r20,r20,-2
 200a178:	00000106 	br	200a180 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 200a17c:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 200a180:	a0801988 	cmpgei	r2,r20,102
 200a184:	1000171e 	bne	r2,zero,200a1e4 <___vfprintf_internal_r+0x8b8>
				--expt;
 200a188:	e0bfc417 	ldw	r2,-240(fp)
 200a18c:	10bfffc4 	addi	r2,r2,-1
 200a190:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 200a194:	e0bfc417 	ldw	r2,-240(fp)
 200a198:	e0ffc504 	addi	r3,fp,-236
 200a19c:	a00d883a 	mov	r6,r20
 200a1a0:	100b883a 	mov	r5,r2
 200a1a4:	1809883a 	mov	r4,r3
 200a1a8:	200bc080 	call	200bc08 <exponent>
 200a1ac:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 200a1b0:	e0bfc717 	ldw	r2,-228(fp)
 200a1b4:	e0ffaf17 	ldw	r3,-324(fp)
 200a1b8:	1885883a 	add	r2,r3,r2
 200a1bc:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 200a1c0:	e0bfc717 	ldw	r2,-228(fp)
 200a1c4:	10800088 	cmpgei	r2,r2,2
 200a1c8:	1000021e 	bne	r2,zero,200a1d4 <___vfprintf_internal_r+0x8a8>
 200a1cc:	9880004c 	andi	r2,r19,1
 200a1d0:	10003526 	beq	r2,zero,200a2a8 <___vfprintf_internal_r+0x97c>
					++size;
 200a1d4:	e0bfb617 	ldw	r2,-296(fp)
 200a1d8:	10800044 	addi	r2,r2,1
 200a1dc:	e0bfb615 	stw	r2,-296(fp)
 200a1e0:	00003106 	br	200a2a8 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 200a1e4:	a0801998 	cmpnei	r2,r20,102
 200a1e8:	1000181e 	bne	r2,zero,200a24c <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 200a1ec:	e0bfc417 	ldw	r2,-240(fp)
 200a1f0:	00800c0e 	bge	zero,r2,200a224 <___vfprintf_internal_r+0x8f8>
						size = expt;
 200a1f4:	e0bfc417 	ldw	r2,-240(fp)
 200a1f8:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 200a1fc:	e0bfae17 	ldw	r2,-328(fp)
 200a200:	1000021e 	bne	r2,zero,200a20c <___vfprintf_internal_r+0x8e0>
 200a204:	9880004c 	andi	r2,r19,1
 200a208:	10002526 	beq	r2,zero,200a2a0 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 200a20c:	e0bfae17 	ldw	r2,-328(fp)
 200a210:	10800044 	addi	r2,r2,1
 200a214:	e0ffb617 	ldw	r3,-296(fp)
 200a218:	1885883a 	add	r2,r3,r2
 200a21c:	e0bfb615 	stw	r2,-296(fp)
 200a220:	00001f06 	br	200a2a0 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 200a224:	e0bfae17 	ldw	r2,-328(fp)
 200a228:	1000021e 	bne	r2,zero,200a234 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200a22c:	9880004c 	andi	r2,r19,1
 200a230:	10000326 	beq	r2,zero,200a240 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 200a234:	e0bfae17 	ldw	r2,-328(fp)
 200a238:	10800084 	addi	r2,r2,2
 200a23c:	00000106 	br	200a244 <___vfprintf_internal_r+0x918>
 200a240:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200a244:	e0bfb615 	stw	r2,-296(fp)
 200a248:	00001506 	br	200a2a0 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 200a24c:	e0ffc417 	ldw	r3,-240(fp)
 200a250:	e0bfc717 	ldw	r2,-228(fp)
 200a254:	18800816 	blt	r3,r2,200a278 <___vfprintf_internal_r+0x94c>
					size = expt;
 200a258:	e0bfc417 	ldw	r2,-240(fp)
 200a25c:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 200a260:	9880004c 	andi	r2,r19,1
 200a264:	10000e26 	beq	r2,zero,200a2a0 <___vfprintf_internal_r+0x974>
						++size;
 200a268:	e0bfb617 	ldw	r2,-296(fp)
 200a26c:	10800044 	addi	r2,r2,1
 200a270:	e0bfb615 	stw	r2,-296(fp)
 200a274:	00000a06 	br	200a2a0 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 200a278:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 200a27c:	00800416 	blt	zero,r2,200a290 <___vfprintf_internal_r+0x964>
 200a280:	e0bfc417 	ldw	r2,-240(fp)
 200a284:	00c00084 	movi	r3,2
 200a288:	1885c83a 	sub	r2,r3,r2
 200a28c:	00000106 	br	200a294 <___vfprintf_internal_r+0x968>
 200a290:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 200a294:	e0ffc717 	ldw	r3,-228(fp)
 200a298:	10c5883a 	add	r2,r2,r3
 200a29c:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 200a2a0:	e0bfc417 	ldw	r2,-240(fp)
 200a2a4:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 200a2a8:	e0bfc143 	ldbu	r2,-251(fp)
 200a2ac:	10803fcc 	andi	r2,r2,255
 200a2b0:	1080201c 	xori	r2,r2,128
 200a2b4:	10bfe004 	addi	r2,r2,-128
 200a2b8:	10018b26 	beq	r2,zero,200a8e8 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 200a2bc:	00800b44 	movi	r2,45
 200a2c0:	e0bfc105 	stb	r2,-252(fp)
			break;
 200a2c4:	00018806 	br	200a8e8 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200a2c8:	9880080c 	andi	r2,r19,32
 200a2cc:	10000d26 	beq	r2,zero,200a304 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200a2d0:	e0bfe917 	ldw	r2,-92(fp)
 200a2d4:	10c00104 	addi	r3,r2,4
 200a2d8:	e0ffe915 	stw	r3,-92(fp)
 200a2dc:	10800017 	ldw	r2,0(r2)
 200a2e0:	e0ffac17 	ldw	r3,-336(fp)
 200a2e4:	e0fff015 	stw	r3,-64(fp)
 200a2e8:	1807d7fa 	srai	r3,r3,31
 200a2ec:	e0fff115 	stw	r3,-60(fp)
 200a2f0:	e0fff017 	ldw	r3,-64(fp)
 200a2f4:	10c00015 	stw	r3,0(r2)
 200a2f8:	e0fff117 	ldw	r3,-60(fp)
 200a2fc:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a300:	00054b06 	br	200b830 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200a304:	9880040c 	andi	r2,r19,16
 200a308:	10000726 	beq	r2,zero,200a328 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200a30c:	e0bfe917 	ldw	r2,-92(fp)
 200a310:	10c00104 	addi	r3,r2,4
 200a314:	e0ffe915 	stw	r3,-92(fp)
 200a318:	10800017 	ldw	r2,0(r2)
 200a31c:	e0ffac17 	ldw	r3,-336(fp)
 200a320:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a324:	00054206 	br	200b830 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200a328:	9880100c 	andi	r2,r19,64
 200a32c:	10000726 	beq	r2,zero,200a34c <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200a330:	e0bfe917 	ldw	r2,-92(fp)
 200a334:	10c00104 	addi	r3,r2,4
 200a338:	e0ffe915 	stw	r3,-92(fp)
 200a33c:	10800017 	ldw	r2,0(r2)
 200a340:	e0ffac17 	ldw	r3,-336(fp)
 200a344:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a348:	00053906 	br	200b830 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200a34c:	e0bfe917 	ldw	r2,-92(fp)
 200a350:	10c00104 	addi	r3,r2,4
 200a354:	e0ffe915 	stw	r3,-92(fp)
 200a358:	10800017 	ldw	r2,0(r2)
 200a35c:	e0ffac17 	ldw	r3,-336(fp)
 200a360:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200a364:	00053206 	br	200b830 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 200a368:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200a36c:	9880080c 	andi	r2,r19,32
 200a370:	10000626 	beq	r2,zero,200a38c <___vfprintf_internal_r+0xa60>
 200a374:	e0bfe917 	ldw	r2,-92(fp)
 200a378:	10c00204 	addi	r3,r2,8
 200a37c:	e0ffe915 	stw	r3,-92(fp)
 200a380:	15800017 	ldw	r22,0(r2)
 200a384:	15c00117 	ldw	r23,4(r2)
 200a388:	00001c06 	br	200a3fc <___vfprintf_internal_r+0xad0>
 200a38c:	9880040c 	andi	r2,r19,16
 200a390:	10000726 	beq	r2,zero,200a3b0 <___vfprintf_internal_r+0xa84>
 200a394:	e0bfe917 	ldw	r2,-92(fp)
 200a398:	10c00104 	addi	r3,r2,4
 200a39c:	e0ffe915 	stw	r3,-92(fp)
 200a3a0:	10800017 	ldw	r2,0(r2)
 200a3a4:	102d883a 	mov	r22,r2
 200a3a8:	002f883a 	mov	r23,zero
 200a3ac:	00001306 	br	200a3fc <___vfprintf_internal_r+0xad0>
 200a3b0:	9880100c 	andi	r2,r19,64
 200a3b4:	10000b26 	beq	r2,zero,200a3e4 <___vfprintf_internal_r+0xab8>
 200a3b8:	e0bfe917 	ldw	r2,-92(fp)
 200a3bc:	10c00104 	addi	r3,r2,4
 200a3c0:	e0ffe915 	stw	r3,-92(fp)
 200a3c4:	10800017 	ldw	r2,0(r2)
 200a3c8:	e0bff215 	stw	r2,-56(fp)
 200a3cc:	e03ff315 	stw	zero,-52(fp)
 200a3d0:	e0bff217 	ldw	r2,-56(fp)
 200a3d4:	15bfffcc 	andi	r22,r2,65535
 200a3d8:	e0fff317 	ldw	r3,-52(fp)
 200a3dc:	182e703a 	and	r23,r3,zero
 200a3e0:	00000606 	br	200a3fc <___vfprintf_internal_r+0xad0>
 200a3e4:	e0bfe917 	ldw	r2,-92(fp)
 200a3e8:	10c00104 	addi	r3,r2,4
 200a3ec:	e0ffe915 	stw	r3,-92(fp)
 200a3f0:	10800017 	ldw	r2,0(r2)
 200a3f4:	102d883a 	mov	r22,r2
 200a3f8:	002f883a 	mov	r23,zero
 200a3fc:	e5bfb115 	stw	r22,-316(fp)
 200a400:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 200a404:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200a408:	0000a606 	br	200a6a4 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200a40c:	e0bfe917 	ldw	r2,-92(fp)
 200a410:	10c00104 	addi	r3,r2,4
 200a414:	e0ffe915 	stw	r3,-92(fp)
 200a418:	10800017 	ldw	r2,0(r2)
 200a41c:	e0bfb115 	stw	r2,-316(fp)
 200a420:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 200a424:	00800084 	movi	r2,2
 200a428:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 200a42c:	008080b4 	movhi	r2,514
 200a430:	10896804 	addi	r2,r2,9632
 200a434:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 200a438:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200a43c:	00800c04 	movi	r2,48
 200a440:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200a444:	05001e04 	movi	r20,120
 200a448:	00801e04 	movi	r2,120
 200a44c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200a450:	00009406 	br	200a6a4 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200a454:	e0bfe917 	ldw	r2,-92(fp)
 200a458:	10c00104 	addi	r3,r2,4
 200a45c:	e0ffe915 	stw	r3,-92(fp)
 200a460:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200a464:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200a468:	9000081e 	bne	r18,zero,200a48c <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 200a46c:	048080b4 	movhi	r18,514
 200a470:	94896d04 	addi	r18,r18,9652
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200a474:	e0bfae17 	ldw	r2,-328(fp)
 200a478:	10c001f0 	cmpltui	r3,r2,7
 200a47c:	1800011e 	bne	r3,zero,200a484 <___vfprintf_internal_r+0xb58>
 200a480:	00800184 	movi	r2,6
 200a484:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200a488:	00011806 	br	200a8ec <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200a48c:	e0bfae17 	ldw	r2,-328(fp)
 200a490:	10001016 	blt	r2,zero,200a4d4 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200a494:	e0bfae17 	ldw	r2,-328(fp)
 200a498:	100d883a 	mov	r6,r2
 200a49c:	000b883a 	mov	r5,zero
 200a4a0:	9009883a 	mov	r4,r18
 200a4a4:	20109740 	call	2010974 <memchr>
 200a4a8:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 200a4ac:	e0bfbf17 	ldw	r2,-260(fp)
 200a4b0:	10000526 	beq	r2,zero,200a4c8 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 200a4b4:	e0bfbf17 	ldw	r2,-260(fp)
 200a4b8:	9007883a 	mov	r3,r18
 200a4bc:	10c5c83a 	sub	r2,r2,r3
 200a4c0:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200a4c4:	00010906 	br	200a8ec <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200a4c8:	e0bfae17 	ldw	r2,-328(fp)
 200a4cc:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 200a4d0:	00010606 	br	200a8ec <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200a4d4:	9009883a 	mov	r4,r18
 200a4d8:	20096f80 	call	20096f8 <strlen>
 200a4dc:	e0bfb615 	stw	r2,-296(fp)

			break;
 200a4e0:	00010206 	br	200a8ec <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 200a4e4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200a4e8:	9880080c 	andi	r2,r19,32
 200a4ec:	10000826 	beq	r2,zero,200a510 <___vfprintf_internal_r+0xbe4>
 200a4f0:	e0bfe917 	ldw	r2,-92(fp)
 200a4f4:	10c00204 	addi	r3,r2,8
 200a4f8:	e0ffe915 	stw	r3,-92(fp)
 200a4fc:	10c00017 	ldw	r3,0(r2)
 200a500:	e0ffec15 	stw	r3,-80(fp)
 200a504:	10c00117 	ldw	r3,4(r2)
 200a508:	e0ffed15 	stw	r3,-76(fp)
 200a50c:	00001e06 	br	200a588 <___vfprintf_internal_r+0xc5c>
 200a510:	9880040c 	andi	r2,r19,16
 200a514:	10000726 	beq	r2,zero,200a534 <___vfprintf_internal_r+0xc08>
 200a518:	e0bfe917 	ldw	r2,-92(fp)
 200a51c:	10c00104 	addi	r3,r2,4
 200a520:	e0ffe915 	stw	r3,-92(fp)
 200a524:	10800017 	ldw	r2,0(r2)
 200a528:	e0bfec15 	stw	r2,-80(fp)
 200a52c:	e03fed15 	stw	zero,-76(fp)
 200a530:	00001506 	br	200a588 <___vfprintf_internal_r+0xc5c>
 200a534:	9880100c 	andi	r2,r19,64
 200a538:	10000d26 	beq	r2,zero,200a570 <___vfprintf_internal_r+0xc44>
 200a53c:	e0bfe917 	ldw	r2,-92(fp)
 200a540:	10c00104 	addi	r3,r2,4
 200a544:	e0ffe915 	stw	r3,-92(fp)
 200a548:	10800017 	ldw	r2,0(r2)
 200a54c:	e0bff415 	stw	r2,-48(fp)
 200a550:	e03ff515 	stw	zero,-44(fp)
 200a554:	e0bff417 	ldw	r2,-48(fp)
 200a558:	10bfffcc 	andi	r2,r2,65535
 200a55c:	e0bfec15 	stw	r2,-80(fp)
 200a560:	e0fff517 	ldw	r3,-44(fp)
 200a564:	1806703a 	and	r3,r3,zero
 200a568:	e0ffed15 	stw	r3,-76(fp)
 200a56c:	00000606 	br	200a588 <___vfprintf_internal_r+0xc5c>
 200a570:	e0bfe917 	ldw	r2,-92(fp)
 200a574:	10c00104 	addi	r3,r2,4
 200a578:	e0ffe915 	stw	r3,-92(fp)
 200a57c:	10800017 	ldw	r2,0(r2)
 200a580:	e0bfec15 	stw	r2,-80(fp)
 200a584:	e03fed15 	stw	zero,-76(fp)
 200a588:	e0bfec17 	ldw	r2,-80(fp)
 200a58c:	e0bfb115 	stw	r2,-316(fp)
 200a590:	e0ffed17 	ldw	r3,-76(fp)
 200a594:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 200a598:	00800044 	movi	r2,1
 200a59c:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 200a5a0:	00004006 	br	200a6a4 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200a5a4:	008080b4 	movhi	r2,514
 200a5a8:	10896f04 	addi	r2,r2,9660
 200a5ac:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 200a5b0:	00000306 	br	200a5c0 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 200a5b4:	008080b4 	movhi	r2,514
 200a5b8:	10896804 	addi	r2,r2,9632
 200a5bc:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 200a5c0:	9880080c 	andi	r2,r19,32
 200a5c4:	10000826 	beq	r2,zero,200a5e8 <___vfprintf_internal_r+0xcbc>
 200a5c8:	e0bfe917 	ldw	r2,-92(fp)
 200a5cc:	10c00204 	addi	r3,r2,8
 200a5d0:	e0ffe915 	stw	r3,-92(fp)
 200a5d4:	10c00017 	ldw	r3,0(r2)
 200a5d8:	e0ffee15 	stw	r3,-72(fp)
 200a5dc:	10c00117 	ldw	r3,4(r2)
 200a5e0:	e0ffef15 	stw	r3,-68(fp)
 200a5e4:	00001e06 	br	200a660 <___vfprintf_internal_r+0xd34>
 200a5e8:	9880040c 	andi	r2,r19,16
 200a5ec:	10000726 	beq	r2,zero,200a60c <___vfprintf_internal_r+0xce0>
 200a5f0:	e0bfe917 	ldw	r2,-92(fp)
 200a5f4:	10c00104 	addi	r3,r2,4
 200a5f8:	e0ffe915 	stw	r3,-92(fp)
 200a5fc:	10800017 	ldw	r2,0(r2)
 200a600:	e0bfee15 	stw	r2,-72(fp)
 200a604:	e03fef15 	stw	zero,-68(fp)
 200a608:	00001506 	br	200a660 <___vfprintf_internal_r+0xd34>
 200a60c:	9880100c 	andi	r2,r19,64
 200a610:	10000d26 	beq	r2,zero,200a648 <___vfprintf_internal_r+0xd1c>
 200a614:	e0bfe917 	ldw	r2,-92(fp)
 200a618:	10c00104 	addi	r3,r2,4
 200a61c:	e0ffe915 	stw	r3,-92(fp)
 200a620:	10800017 	ldw	r2,0(r2)
 200a624:	e0bff615 	stw	r2,-40(fp)
 200a628:	e03ff715 	stw	zero,-36(fp)
 200a62c:	e0bff617 	ldw	r2,-40(fp)
 200a630:	10bfffcc 	andi	r2,r2,65535
 200a634:	e0bfee15 	stw	r2,-72(fp)
 200a638:	e0fff717 	ldw	r3,-36(fp)
 200a63c:	1806703a 	and	r3,r3,zero
 200a640:	e0ffef15 	stw	r3,-68(fp)
 200a644:	00000606 	br	200a660 <___vfprintf_internal_r+0xd34>
 200a648:	e0bfe917 	ldw	r2,-92(fp)
 200a64c:	10c00104 	addi	r3,r2,4
 200a650:	e0ffe915 	stw	r3,-92(fp)
 200a654:	10800017 	ldw	r2,0(r2)
 200a658:	e0bfee15 	stw	r2,-72(fp)
 200a65c:	e03fef15 	stw	zero,-68(fp)
 200a660:	e0bfee17 	ldw	r2,-72(fp)
 200a664:	e0bfb115 	stw	r2,-316(fp)
 200a668:	e0ffef17 	ldw	r3,-68(fp)
 200a66c:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 200a670:	00800084 	movi	r2,2
 200a674:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200a678:	9880004c 	andi	r2,r19,1
 200a67c:	10000926 	beq	r2,zero,200a6a4 <___vfprintf_internal_r+0xd78>
 200a680:	e0bfb117 	ldw	r2,-316(fp)
 200a684:	e0ffb217 	ldw	r3,-312(fp)
 200a688:	10c4b03a 	or	r2,r2,r3
 200a68c:	10000526 	beq	r2,zero,200a6a4 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 200a690:	00800c04 	movi	r2,48
 200a694:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200a698:	a005883a 	mov	r2,r20
 200a69c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200a6a0:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200a6a4:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200a6a8:	e0bfae17 	ldw	r2,-328(fp)
 200a6ac:	e0bfb415 	stw	r2,-304(fp)
 200a6b0:	e0bfb417 	ldw	r2,-304(fp)
 200a6b4:	10000216 	blt	r2,zero,200a6c0 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 200a6b8:	00bfdfc4 	movi	r2,-129
 200a6bc:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200a6c0:	e4bfdb04 	addi	r18,fp,-148
 200a6c4:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 200a6c8:	e0bfb117 	ldw	r2,-316(fp)
 200a6cc:	e0ffb217 	ldw	r3,-312(fp)
 200a6d0:	10c4b03a 	or	r2,r2,r3
 200a6d4:	1000021e 	bne	r2,zero,200a6e0 <___vfprintf_internal_r+0xdb4>
 200a6d8:	e0bfae17 	ldw	r2,-328(fp)
 200a6dc:	10006c26 	beq	r2,zero,200a890 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200a6e0:	e0bfb303 	ldbu	r2,-308(fp)
 200a6e4:	10c00060 	cmpeqi	r3,r2,1
 200a6e8:	1800211e 	bne	r3,zero,200a770 <___vfprintf_internal_r+0xe44>
 200a6ec:	10c000a0 	cmpeqi	r3,r2,2
 200a6f0:	1800491e 	bne	r3,zero,200a818 <___vfprintf_internal_r+0xeec>
 200a6f4:	10005d1e 	bne	r2,zero,200a86c <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200a6f8:	94bfffc4 	addi	r18,r18,-1
 200a6fc:	e0bfb117 	ldw	r2,-316(fp)
 200a700:	108001cc 	andi	r2,r2,7
 200a704:	10800c04 	addi	r2,r2,48
 200a708:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 200a70c:	e0bfb217 	ldw	r2,-312(fp)
 200a710:	1004977a 	slli	r2,r2,29
 200a714:	e0ffb117 	ldw	r3,-316(fp)
 200a718:	1806d0fa 	srli	r3,r3,3
 200a71c:	1884b03a 	or	r2,r3,r2
 200a720:	e0bfb115 	stw	r2,-316(fp)
 200a724:	e0bfb217 	ldw	r2,-312(fp)
 200a728:	1004d0fa 	srli	r2,r2,3
 200a72c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200a730:	e0bfb117 	ldw	r2,-316(fp)
 200a734:	e0ffb217 	ldw	r3,-312(fp)
 200a738:	10c4b03a 	or	r2,r2,r3
 200a73c:	103fee1e 	bne	r2,zero,200a6f8 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200a740:	9880004c 	andi	r2,r19,1
 200a744:	10005026 	beq	r2,zero,200a888 <___vfprintf_internal_r+0xf5c>
 200a748:	90800003 	ldbu	r2,0(r18)
 200a74c:	10803fcc 	andi	r2,r2,255
 200a750:	1080201c 	xori	r2,r2,128
 200a754:	10bfe004 	addi	r2,r2,-128
 200a758:	10800c20 	cmpeqi	r2,r2,48
 200a75c:	10004a1e 	bne	r2,zero,200a888 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 200a760:	94bfffc4 	addi	r18,r18,-1
 200a764:	00800c04 	movi	r2,48
 200a768:	90800005 	stb	r2,0(r18)
					break;
 200a76c:	00004606 	br	200a888 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200a770:	e0bfb217 	ldw	r2,-312(fp)
 200a774:	10000a1e 	bne	r2,zero,200a7a0 <___vfprintf_internal_r+0xe74>
 200a778:	e0bfb217 	ldw	r2,-312(fp)
 200a77c:	1000031e 	bne	r2,zero,200a78c <___vfprintf_internal_r+0xe60>
 200a780:	e0bfb117 	ldw	r2,-316(fp)
 200a784:	108002a8 	cmpgeui	r2,r2,10
 200a788:	1000051e 	bne	r2,zero,200a7a0 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 200a78c:	94bfffc4 	addi	r18,r18,-1
 200a790:	e0bfb117 	ldw	r2,-316(fp)
 200a794:	10800c04 	addi	r2,r2,48
 200a798:	90800005 	stb	r2,0(r18)
						break;
 200a79c:	00003b06 	br	200a88c <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200a7a0:	94bfffc4 	addi	r18,r18,-1
 200a7a4:	e0bfb117 	ldw	r2,-316(fp)
 200a7a8:	e0ffb217 	ldw	r3,-312(fp)
 200a7ac:	01800284 	movi	r6,10
 200a7b0:	000f883a 	mov	r7,zero
 200a7b4:	1009883a 	mov	r4,r2
 200a7b8:	180b883a 	mov	r5,r3
 200a7bc:	2015ec00 	call	2015ec0 <__umoddi3>
 200a7c0:	1009883a 	mov	r4,r2
 200a7c4:	180b883a 	mov	r5,r3
 200a7c8:	2005883a 	mov	r2,r4
 200a7cc:	2807883a 	mov	r3,r5
 200a7d0:	10800c04 	addi	r2,r2,48
 200a7d4:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200a7d8:	e0bfb117 	ldw	r2,-316(fp)
 200a7dc:	e0ffb217 	ldw	r3,-312(fp)
 200a7e0:	01800284 	movi	r6,10
 200a7e4:	000f883a 	mov	r7,zero
 200a7e8:	1009883a 	mov	r4,r2
 200a7ec:	180b883a 	mov	r5,r3
 200a7f0:	20159480 	call	2015948 <__udivdi3>
 200a7f4:	1009883a 	mov	r4,r2
 200a7f8:	180b883a 	mov	r5,r3
 200a7fc:	e13fb115 	stw	r4,-316(fp)
 200a800:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 200a804:	e0bfb117 	ldw	r2,-316(fp)
 200a808:	e0ffb217 	ldw	r3,-312(fp)
 200a80c:	10c4b03a 	or	r2,r2,r3
 200a810:	103fe31e 	bne	r2,zero,200a7a0 <___vfprintf_internal_r+0xe74>
					break;
 200a814:	00001d06 	br	200a88c <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200a818:	94bfffc4 	addi	r18,r18,-1
 200a81c:	e0bfb117 	ldw	r2,-316(fp)
 200a820:	108003cc 	andi	r2,r2,15
 200a824:	e0ffb717 	ldw	r3,-292(fp)
 200a828:	1885883a 	add	r2,r3,r2
 200a82c:	10800003 	ldbu	r2,0(r2)
 200a830:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 200a834:	e0bfb217 	ldw	r2,-312(fp)
 200a838:	1004973a 	slli	r2,r2,28
 200a83c:	e0ffb117 	ldw	r3,-316(fp)
 200a840:	1806d13a 	srli	r3,r3,4
 200a844:	1884b03a 	or	r2,r3,r2
 200a848:	e0bfb115 	stw	r2,-316(fp)
 200a84c:	e0bfb217 	ldw	r2,-312(fp)
 200a850:	1004d13a 	srli	r2,r2,4
 200a854:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200a858:	e0bfb117 	ldw	r2,-316(fp)
 200a85c:	e0ffb217 	ldw	r3,-312(fp)
 200a860:	10c4b03a 	or	r2,r2,r3
 200a864:	103fec1e 	bne	r2,zero,200a818 <___vfprintf_internal_r+0xeec>
					break;
 200a868:	00000806 	br	200a88c <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 200a86c:	048080b4 	movhi	r18,514
 200a870:	94897404 	addi	r18,r18,9680
					size = strlen (cp);
 200a874:	9009883a 	mov	r4,r18
 200a878:	20096f80 	call	20096f8 <strlen>
 200a87c:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 200a880:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200a884:	00001906 	br	200a8ec <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200a888:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200a88c:	00000706 	br	200a8ac <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200a890:	e0bfb303 	ldbu	r2,-308(fp)
 200a894:	1000051e 	bne	r2,zero,200a8ac <___vfprintf_internal_r+0xf80>
 200a898:	9880004c 	andi	r2,r19,1
 200a89c:	10000326 	beq	r2,zero,200a8ac <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 200a8a0:	94bfffc4 	addi	r18,r18,-1
 200a8a4:	00800c04 	movi	r2,48
 200a8a8:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 200a8ac:	e0bfdb04 	addi	r2,fp,-148
 200a8b0:	10800a04 	addi	r2,r2,40
 200a8b4:	1007883a 	mov	r3,r2
 200a8b8:	9005883a 	mov	r2,r18
 200a8bc:	1885c83a 	sub	r2,r3,r2
 200a8c0:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 200a8c4:	00000906 	br	200a8ec <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200a8c8:	a003dc26 	beq	r20,zero,200b83c <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200a8cc:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 200a8d0:	a005883a 	mov	r2,r20
 200a8d4:	90800005 	stb	r2,0(r18)
			size = 1;
 200a8d8:	00800044 	movi	r2,1
 200a8dc:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 200a8e0:	e03fc105 	stb	zero,-252(fp)
			break;
 200a8e4:	00000106 	br	200a8ec <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 200a8e8:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200a8ec:	e0ffb417 	ldw	r3,-304(fp)
 200a8f0:	e0bfb617 	ldw	r2,-296(fp)
 200a8f4:	10c0010e 	bge	r2,r3,200a8fc <___vfprintf_internal_r+0xfd0>
 200a8f8:	1805883a 	mov	r2,r3
 200a8fc:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 200a900:	e0bfc103 	ldbu	r2,-252(fp)
 200a904:	10803fcc 	andi	r2,r2,255
 200a908:	1080201c 	xori	r2,r2,128
 200a90c:	10bfe004 	addi	r2,r2,-128
 200a910:	10000326 	beq	r2,zero,200a920 <___vfprintf_internal_r+0xff4>
			realsz++;
 200a914:	e0bfb517 	ldw	r2,-300(fp)
 200a918:	10800044 	addi	r2,r2,1
 200a91c:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 200a920:	9880008c 	andi	r2,r19,2
 200a924:	10000326 	beq	r2,zero,200a934 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 200a928:	e0bfb517 	ldw	r2,-300(fp)
 200a92c:	10800084 	addi	r2,r2,2
 200a930:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200a934:	9880210c 	andi	r2,r19,132
 200a938:	1000351e 	bne	r2,zero,200aa10 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 200a93c:	e0ffad17 	ldw	r3,-332(fp)
 200a940:	e0bfb517 	ldw	r2,-300(fp)
 200a944:	18a1c83a 	sub	r16,r3,r2
 200a948:	0400310e 	bge	zero,r16,200aa10 <___vfprintf_internal_r+0x10e4>
 200a94c:	00001706 	br	200a9ac <___vfprintf_internal_r+0x1080>
 200a950:	008080b4 	movhi	r2,514
 200a954:	10897b84 	addi	r2,r2,9710
 200a958:	88800015 	stw	r2,0(r17)
 200a95c:	00800404 	movi	r2,16
 200a960:	88800115 	stw	r2,4(r17)
 200a964:	e0bfca17 	ldw	r2,-216(fp)
 200a968:	10800404 	addi	r2,r2,16
 200a96c:	e0bfca15 	stw	r2,-216(fp)
 200a970:	8c400204 	addi	r17,r17,8
 200a974:	e0bfc917 	ldw	r2,-220(fp)
 200a978:	10800044 	addi	r2,r2,1
 200a97c:	e0bfc915 	stw	r2,-220(fp)
 200a980:	e0bfc917 	ldw	r2,-220(fp)
 200a984:	10800210 	cmplti	r2,r2,8
 200a988:	1000071e 	bne	r2,zero,200a9a8 <___vfprintf_internal_r+0x107c>
 200a98c:	e0bfc804 	addi	r2,fp,-224
 200a990:	100d883a 	mov	r6,r2
 200a994:	e17fe717 	ldw	r5,-100(fp)
 200a998:	e13fe617 	ldw	r4,-104(fp)
 200a99c:	20137b40 	call	20137b4 <__sprint_r>
 200a9a0:	1003b41e 	bne	r2,zero,200b874 <___vfprintf_internal_r+0x1f48>
 200a9a4:	e47fcb04 	addi	r17,fp,-212
 200a9a8:	843ffc04 	addi	r16,r16,-16
 200a9ac:	80800448 	cmpgei	r2,r16,17
 200a9b0:	103fe71e 	bne	r2,zero,200a950 <___vfprintf_internal_r+0x1024>
 200a9b4:	008080b4 	movhi	r2,514
 200a9b8:	10897b84 	addi	r2,r2,9710
 200a9bc:	88800015 	stw	r2,0(r17)
 200a9c0:	8005883a 	mov	r2,r16
 200a9c4:	88800115 	stw	r2,4(r17)
 200a9c8:	e0bfca17 	ldw	r2,-216(fp)
 200a9cc:	8007883a 	mov	r3,r16
 200a9d0:	10c5883a 	add	r2,r2,r3
 200a9d4:	e0bfca15 	stw	r2,-216(fp)
 200a9d8:	8c400204 	addi	r17,r17,8
 200a9dc:	e0bfc917 	ldw	r2,-220(fp)
 200a9e0:	10800044 	addi	r2,r2,1
 200a9e4:	e0bfc915 	stw	r2,-220(fp)
 200a9e8:	e0bfc917 	ldw	r2,-220(fp)
 200a9ec:	10800210 	cmplti	r2,r2,8
 200a9f0:	1000071e 	bne	r2,zero,200aa10 <___vfprintf_internal_r+0x10e4>
 200a9f4:	e0bfc804 	addi	r2,fp,-224
 200a9f8:	100d883a 	mov	r6,r2
 200a9fc:	e17fe717 	ldw	r5,-100(fp)
 200aa00:	e13fe617 	ldw	r4,-104(fp)
 200aa04:	20137b40 	call	20137b4 <__sprint_r>
 200aa08:	10039c1e 	bne	r2,zero,200b87c <___vfprintf_internal_r+0x1f50>
 200aa0c:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 200aa10:	e0bfc103 	ldbu	r2,-252(fp)
 200aa14:	10803fcc 	andi	r2,r2,255
 200aa18:	1080201c 	xori	r2,r2,128
 200aa1c:	10bfe004 	addi	r2,r2,-128
 200aa20:	10001526 	beq	r2,zero,200aa78 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 200aa24:	e0bfc104 	addi	r2,fp,-252
 200aa28:	88800015 	stw	r2,0(r17)
 200aa2c:	00800044 	movi	r2,1
 200aa30:	88800115 	stw	r2,4(r17)
 200aa34:	e0bfca17 	ldw	r2,-216(fp)
 200aa38:	10800044 	addi	r2,r2,1
 200aa3c:	e0bfca15 	stw	r2,-216(fp)
 200aa40:	8c400204 	addi	r17,r17,8
 200aa44:	e0bfc917 	ldw	r2,-220(fp)
 200aa48:	10800044 	addi	r2,r2,1
 200aa4c:	e0bfc915 	stw	r2,-220(fp)
 200aa50:	e0bfc917 	ldw	r2,-220(fp)
 200aa54:	10800210 	cmplti	r2,r2,8
 200aa58:	1000071e 	bne	r2,zero,200aa78 <___vfprintf_internal_r+0x114c>
 200aa5c:	e0bfc804 	addi	r2,fp,-224
 200aa60:	100d883a 	mov	r6,r2
 200aa64:	e17fe717 	ldw	r5,-100(fp)
 200aa68:	e13fe617 	ldw	r4,-104(fp)
 200aa6c:	20137b40 	call	20137b4 <__sprint_r>
 200aa70:	1003841e 	bne	r2,zero,200b884 <___vfprintf_internal_r+0x1f58>
 200aa74:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 200aa78:	9880008c 	andi	r2,r19,2
 200aa7c:	10001526 	beq	r2,zero,200aad4 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 200aa80:	e0bfe504 	addi	r2,fp,-108
 200aa84:	88800015 	stw	r2,0(r17)
 200aa88:	00800084 	movi	r2,2
 200aa8c:	88800115 	stw	r2,4(r17)
 200aa90:	e0bfca17 	ldw	r2,-216(fp)
 200aa94:	10800084 	addi	r2,r2,2
 200aa98:	e0bfca15 	stw	r2,-216(fp)
 200aa9c:	8c400204 	addi	r17,r17,8
 200aaa0:	e0bfc917 	ldw	r2,-220(fp)
 200aaa4:	10800044 	addi	r2,r2,1
 200aaa8:	e0bfc915 	stw	r2,-220(fp)
 200aaac:	e0bfc917 	ldw	r2,-220(fp)
 200aab0:	10800210 	cmplti	r2,r2,8
 200aab4:	1000071e 	bne	r2,zero,200aad4 <___vfprintf_internal_r+0x11a8>
 200aab8:	e0bfc804 	addi	r2,fp,-224
 200aabc:	100d883a 	mov	r6,r2
 200aac0:	e17fe717 	ldw	r5,-100(fp)
 200aac4:	e13fe617 	ldw	r4,-104(fp)
 200aac8:	20137b40 	call	20137b4 <__sprint_r>
 200aacc:	10036f1e 	bne	r2,zero,200b88c <___vfprintf_internal_r+0x1f60>
 200aad0:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200aad4:	9880210c 	andi	r2,r19,132
 200aad8:	10802018 	cmpnei	r2,r2,128
 200aadc:	1000351e 	bne	r2,zero,200abb4 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 200aae0:	e0ffad17 	ldw	r3,-332(fp)
 200aae4:	e0bfb517 	ldw	r2,-300(fp)
 200aae8:	18a1c83a 	sub	r16,r3,r2
 200aaec:	0400310e 	bge	zero,r16,200abb4 <___vfprintf_internal_r+0x1288>
 200aaf0:	00001706 	br	200ab50 <___vfprintf_internal_r+0x1224>
 200aaf4:	008080b4 	movhi	r2,514
 200aaf8:	10897f84 	addi	r2,r2,9726
 200aafc:	88800015 	stw	r2,0(r17)
 200ab00:	00800404 	movi	r2,16
 200ab04:	88800115 	stw	r2,4(r17)
 200ab08:	e0bfca17 	ldw	r2,-216(fp)
 200ab0c:	10800404 	addi	r2,r2,16
 200ab10:	e0bfca15 	stw	r2,-216(fp)
 200ab14:	8c400204 	addi	r17,r17,8
 200ab18:	e0bfc917 	ldw	r2,-220(fp)
 200ab1c:	10800044 	addi	r2,r2,1
 200ab20:	e0bfc915 	stw	r2,-220(fp)
 200ab24:	e0bfc917 	ldw	r2,-220(fp)
 200ab28:	10800210 	cmplti	r2,r2,8
 200ab2c:	1000071e 	bne	r2,zero,200ab4c <___vfprintf_internal_r+0x1220>
 200ab30:	e0bfc804 	addi	r2,fp,-224
 200ab34:	100d883a 	mov	r6,r2
 200ab38:	e17fe717 	ldw	r5,-100(fp)
 200ab3c:	e13fe617 	ldw	r4,-104(fp)
 200ab40:	20137b40 	call	20137b4 <__sprint_r>
 200ab44:	1003531e 	bne	r2,zero,200b894 <___vfprintf_internal_r+0x1f68>
 200ab48:	e47fcb04 	addi	r17,fp,-212
 200ab4c:	843ffc04 	addi	r16,r16,-16
 200ab50:	80800448 	cmpgei	r2,r16,17
 200ab54:	103fe71e 	bne	r2,zero,200aaf4 <___vfprintf_internal_r+0x11c8>
 200ab58:	008080b4 	movhi	r2,514
 200ab5c:	10897f84 	addi	r2,r2,9726
 200ab60:	88800015 	stw	r2,0(r17)
 200ab64:	8005883a 	mov	r2,r16
 200ab68:	88800115 	stw	r2,4(r17)
 200ab6c:	e0bfca17 	ldw	r2,-216(fp)
 200ab70:	8007883a 	mov	r3,r16
 200ab74:	10c5883a 	add	r2,r2,r3
 200ab78:	e0bfca15 	stw	r2,-216(fp)
 200ab7c:	8c400204 	addi	r17,r17,8
 200ab80:	e0bfc917 	ldw	r2,-220(fp)
 200ab84:	10800044 	addi	r2,r2,1
 200ab88:	e0bfc915 	stw	r2,-220(fp)
 200ab8c:	e0bfc917 	ldw	r2,-220(fp)
 200ab90:	10800210 	cmplti	r2,r2,8
 200ab94:	1000071e 	bne	r2,zero,200abb4 <___vfprintf_internal_r+0x1288>
 200ab98:	e0bfc804 	addi	r2,fp,-224
 200ab9c:	100d883a 	mov	r6,r2
 200aba0:	e17fe717 	ldw	r5,-100(fp)
 200aba4:	e13fe617 	ldw	r4,-104(fp)
 200aba8:	20137b40 	call	20137b4 <__sprint_r>
 200abac:	10033b1e 	bne	r2,zero,200b89c <___vfprintf_internal_r+0x1f70>
 200abb0:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200abb4:	e0ffb417 	ldw	r3,-304(fp)
 200abb8:	e0bfb617 	ldw	r2,-296(fp)
 200abbc:	18a1c83a 	sub	r16,r3,r2
 200abc0:	0400310e 	bge	zero,r16,200ac88 <___vfprintf_internal_r+0x135c>
 200abc4:	00001706 	br	200ac24 <___vfprintf_internal_r+0x12f8>
 200abc8:	008080b4 	movhi	r2,514
 200abcc:	10897f84 	addi	r2,r2,9726
 200abd0:	88800015 	stw	r2,0(r17)
 200abd4:	00800404 	movi	r2,16
 200abd8:	88800115 	stw	r2,4(r17)
 200abdc:	e0bfca17 	ldw	r2,-216(fp)
 200abe0:	10800404 	addi	r2,r2,16
 200abe4:	e0bfca15 	stw	r2,-216(fp)
 200abe8:	8c400204 	addi	r17,r17,8
 200abec:	e0bfc917 	ldw	r2,-220(fp)
 200abf0:	10800044 	addi	r2,r2,1
 200abf4:	e0bfc915 	stw	r2,-220(fp)
 200abf8:	e0bfc917 	ldw	r2,-220(fp)
 200abfc:	10800210 	cmplti	r2,r2,8
 200ac00:	1000071e 	bne	r2,zero,200ac20 <___vfprintf_internal_r+0x12f4>
 200ac04:	e0bfc804 	addi	r2,fp,-224
 200ac08:	100d883a 	mov	r6,r2
 200ac0c:	e17fe717 	ldw	r5,-100(fp)
 200ac10:	e13fe617 	ldw	r4,-104(fp)
 200ac14:	20137b40 	call	20137b4 <__sprint_r>
 200ac18:	1003221e 	bne	r2,zero,200b8a4 <___vfprintf_internal_r+0x1f78>
 200ac1c:	e47fcb04 	addi	r17,fp,-212
 200ac20:	843ffc04 	addi	r16,r16,-16
 200ac24:	80800448 	cmpgei	r2,r16,17
 200ac28:	103fe71e 	bne	r2,zero,200abc8 <___vfprintf_internal_r+0x129c>
 200ac2c:	008080b4 	movhi	r2,514
 200ac30:	10897f84 	addi	r2,r2,9726
 200ac34:	88800015 	stw	r2,0(r17)
 200ac38:	8005883a 	mov	r2,r16
 200ac3c:	88800115 	stw	r2,4(r17)
 200ac40:	e0bfca17 	ldw	r2,-216(fp)
 200ac44:	8007883a 	mov	r3,r16
 200ac48:	10c5883a 	add	r2,r2,r3
 200ac4c:	e0bfca15 	stw	r2,-216(fp)
 200ac50:	8c400204 	addi	r17,r17,8
 200ac54:	e0bfc917 	ldw	r2,-220(fp)
 200ac58:	10800044 	addi	r2,r2,1
 200ac5c:	e0bfc915 	stw	r2,-220(fp)
 200ac60:	e0bfc917 	ldw	r2,-220(fp)
 200ac64:	10800210 	cmplti	r2,r2,8
 200ac68:	1000071e 	bne	r2,zero,200ac88 <___vfprintf_internal_r+0x135c>
 200ac6c:	e0bfc804 	addi	r2,fp,-224
 200ac70:	100d883a 	mov	r6,r2
 200ac74:	e17fe717 	ldw	r5,-100(fp)
 200ac78:	e13fe617 	ldw	r4,-104(fp)
 200ac7c:	20137b40 	call	20137b4 <__sprint_r>
 200ac80:	10030a1e 	bne	r2,zero,200b8ac <___vfprintf_internal_r+0x1f80>
 200ac84:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 200ac88:	9880400c 	andi	r2,r19,256
 200ac8c:	1000161e 	bne	r2,zero,200ace8 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 200ac90:	8c800015 	stw	r18,0(r17)
 200ac94:	e0bfb617 	ldw	r2,-296(fp)
 200ac98:	88800115 	stw	r2,4(r17)
 200ac9c:	e0ffca17 	ldw	r3,-216(fp)
 200aca0:	e0bfb617 	ldw	r2,-296(fp)
 200aca4:	1885883a 	add	r2,r3,r2
 200aca8:	e0bfca15 	stw	r2,-216(fp)
 200acac:	8c400204 	addi	r17,r17,8
 200acb0:	e0bfc917 	ldw	r2,-220(fp)
 200acb4:	10800044 	addi	r2,r2,1
 200acb8:	e0bfc915 	stw	r2,-220(fp)
 200acbc:	e0bfc917 	ldw	r2,-220(fp)
 200acc0:	10800210 	cmplti	r2,r2,8
 200acc4:	10028c1e 	bne	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200acc8:	e0bfc804 	addi	r2,fp,-224
 200accc:	100d883a 	mov	r6,r2
 200acd0:	e17fe717 	ldw	r5,-100(fp)
 200acd4:	e13fe617 	ldw	r4,-104(fp)
 200acd8:	20137b40 	call	20137b4 <__sprint_r>
 200acdc:	1002f51e 	bne	r2,zero,200b8b4 <___vfprintf_internal_r+0x1f88>
 200ace0:	e47fcb04 	addi	r17,fp,-212
 200ace4:	00028406 	br	200b6f8 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 200ace8:	a0801990 	cmplti	r2,r20,102
 200acec:	1001d11e 	bne	r2,zero,200b434 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 200acf0:	e0bfc217 	ldw	r2,-248(fp)
 200acf4:	e0ffc317 	ldw	r3,-244(fp)
 200acf8:	000d883a 	mov	r6,zero
 200acfc:	000f883a 	mov	r7,zero
 200ad00:	1009883a 	mov	r4,r2
 200ad04:	180b883a 	mov	r5,r3
 200ad08:	2007be80 	call	2007be8 <__eqdf2>
 200ad0c:	1000661e 	bne	r2,zero,200aea8 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200ad10:	008080b4 	movhi	r2,514
 200ad14:	10897b04 	addi	r2,r2,9708
 200ad18:	88800015 	stw	r2,0(r17)
 200ad1c:	00800044 	movi	r2,1
 200ad20:	88800115 	stw	r2,4(r17)
 200ad24:	e0bfca17 	ldw	r2,-216(fp)
 200ad28:	10800044 	addi	r2,r2,1
 200ad2c:	e0bfca15 	stw	r2,-216(fp)
 200ad30:	8c400204 	addi	r17,r17,8
 200ad34:	e0bfc917 	ldw	r2,-220(fp)
 200ad38:	10800044 	addi	r2,r2,1
 200ad3c:	e0bfc915 	stw	r2,-220(fp)
 200ad40:	e0bfc917 	ldw	r2,-220(fp)
 200ad44:	10800210 	cmplti	r2,r2,8
 200ad48:	1000071e 	bne	r2,zero,200ad68 <___vfprintf_internal_r+0x143c>
 200ad4c:	e0bfc804 	addi	r2,fp,-224
 200ad50:	100d883a 	mov	r6,r2
 200ad54:	e17fe717 	ldw	r5,-100(fp)
 200ad58:	e13fe617 	ldw	r4,-104(fp)
 200ad5c:	20137b40 	call	20137b4 <__sprint_r>
 200ad60:	1002d61e 	bne	r2,zero,200b8bc <___vfprintf_internal_r+0x1f90>
 200ad64:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 200ad68:	e0ffc417 	ldw	r3,-240(fp)
 200ad6c:	e0bfc717 	ldw	r2,-228(fp)
 200ad70:	18800216 	blt	r3,r2,200ad7c <___vfprintf_internal_r+0x1450>
 200ad74:	9880004c 	andi	r2,r19,1
 200ad78:	10025f26 	beq	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200ad7c:	e0bfbb17 	ldw	r2,-276(fp)
 200ad80:	88800015 	stw	r2,0(r17)
 200ad84:	e0bfbc17 	ldw	r2,-272(fp)
 200ad88:	88800115 	stw	r2,4(r17)
 200ad8c:	e0ffca17 	ldw	r3,-216(fp)
 200ad90:	e0bfbc17 	ldw	r2,-272(fp)
 200ad94:	1885883a 	add	r2,r3,r2
 200ad98:	e0bfca15 	stw	r2,-216(fp)
 200ad9c:	8c400204 	addi	r17,r17,8
 200ada0:	e0bfc917 	ldw	r2,-220(fp)
 200ada4:	10800044 	addi	r2,r2,1
 200ada8:	e0bfc915 	stw	r2,-220(fp)
 200adac:	e0bfc917 	ldw	r2,-220(fp)
 200adb0:	10800210 	cmplti	r2,r2,8
 200adb4:	1000071e 	bne	r2,zero,200add4 <___vfprintf_internal_r+0x14a8>
 200adb8:	e0bfc804 	addi	r2,fp,-224
 200adbc:	100d883a 	mov	r6,r2
 200adc0:	e17fe717 	ldw	r5,-100(fp)
 200adc4:	e13fe617 	ldw	r4,-104(fp)
 200adc8:	20137b40 	call	20137b4 <__sprint_r>
 200adcc:	1002bd1e 	bne	r2,zero,200b8c4 <___vfprintf_internal_r+0x1f98>
 200add0:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 200add4:	e0bfc717 	ldw	r2,-228(fp)
 200add8:	143fffc4 	addi	r16,r2,-1
 200addc:	0402460e 	bge	zero,r16,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200ade0:	00001706 	br	200ae40 <___vfprintf_internal_r+0x1514>
 200ade4:	008080b4 	movhi	r2,514
 200ade8:	10897f84 	addi	r2,r2,9726
 200adec:	88800015 	stw	r2,0(r17)
 200adf0:	00800404 	movi	r2,16
 200adf4:	88800115 	stw	r2,4(r17)
 200adf8:	e0bfca17 	ldw	r2,-216(fp)
 200adfc:	10800404 	addi	r2,r2,16
 200ae00:	e0bfca15 	stw	r2,-216(fp)
 200ae04:	8c400204 	addi	r17,r17,8
 200ae08:	e0bfc917 	ldw	r2,-220(fp)
 200ae0c:	10800044 	addi	r2,r2,1
 200ae10:	e0bfc915 	stw	r2,-220(fp)
 200ae14:	e0bfc917 	ldw	r2,-220(fp)
 200ae18:	10800210 	cmplti	r2,r2,8
 200ae1c:	1000071e 	bne	r2,zero,200ae3c <___vfprintf_internal_r+0x1510>
 200ae20:	e0bfc804 	addi	r2,fp,-224
 200ae24:	100d883a 	mov	r6,r2
 200ae28:	e17fe717 	ldw	r5,-100(fp)
 200ae2c:	e13fe617 	ldw	r4,-104(fp)
 200ae30:	20137b40 	call	20137b4 <__sprint_r>
 200ae34:	1002a51e 	bne	r2,zero,200b8cc <___vfprintf_internal_r+0x1fa0>
 200ae38:	e47fcb04 	addi	r17,fp,-212
 200ae3c:	843ffc04 	addi	r16,r16,-16
 200ae40:	80800448 	cmpgei	r2,r16,17
 200ae44:	103fe71e 	bne	r2,zero,200ade4 <___vfprintf_internal_r+0x14b8>
 200ae48:	008080b4 	movhi	r2,514
 200ae4c:	10897f84 	addi	r2,r2,9726
 200ae50:	88800015 	stw	r2,0(r17)
 200ae54:	8005883a 	mov	r2,r16
 200ae58:	88800115 	stw	r2,4(r17)
 200ae5c:	e0bfca17 	ldw	r2,-216(fp)
 200ae60:	8007883a 	mov	r3,r16
 200ae64:	10c5883a 	add	r2,r2,r3
 200ae68:	e0bfca15 	stw	r2,-216(fp)
 200ae6c:	8c400204 	addi	r17,r17,8
 200ae70:	e0bfc917 	ldw	r2,-220(fp)
 200ae74:	10800044 	addi	r2,r2,1
 200ae78:	e0bfc915 	stw	r2,-220(fp)
 200ae7c:	e0bfc917 	ldw	r2,-220(fp)
 200ae80:	10800210 	cmplti	r2,r2,8
 200ae84:	10021c1e 	bne	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200ae88:	e0bfc804 	addi	r2,fp,-224
 200ae8c:	100d883a 	mov	r6,r2
 200ae90:	e17fe717 	ldw	r5,-100(fp)
 200ae94:	e13fe617 	ldw	r4,-104(fp)
 200ae98:	20137b40 	call	20137b4 <__sprint_r>
 200ae9c:	10028d1e 	bne	r2,zero,200b8d4 <___vfprintf_internal_r+0x1fa8>
 200aea0:	e47fcb04 	addi	r17,fp,-212
 200aea4:	00021406 	br	200b6f8 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 200aea8:	e0bfc417 	ldw	r2,-240(fp)
 200aeac:	00807c16 	blt	zero,r2,200b0a0 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 200aeb0:	008080b4 	movhi	r2,514
 200aeb4:	10897b04 	addi	r2,r2,9708
 200aeb8:	88800015 	stw	r2,0(r17)
 200aebc:	00800044 	movi	r2,1
 200aec0:	88800115 	stw	r2,4(r17)
 200aec4:	e0bfca17 	ldw	r2,-216(fp)
 200aec8:	10800044 	addi	r2,r2,1
 200aecc:	e0bfca15 	stw	r2,-216(fp)
 200aed0:	8c400204 	addi	r17,r17,8
 200aed4:	e0bfc917 	ldw	r2,-220(fp)
 200aed8:	10800044 	addi	r2,r2,1
 200aedc:	e0bfc915 	stw	r2,-220(fp)
 200aee0:	e0bfc917 	ldw	r2,-220(fp)
 200aee4:	10800210 	cmplti	r2,r2,8
 200aee8:	1000071e 	bne	r2,zero,200af08 <___vfprintf_internal_r+0x15dc>
 200aeec:	e0bfc804 	addi	r2,fp,-224
 200aef0:	100d883a 	mov	r6,r2
 200aef4:	e17fe717 	ldw	r5,-100(fp)
 200aef8:	e13fe617 	ldw	r4,-104(fp)
 200aefc:	20137b40 	call	20137b4 <__sprint_r>
 200af00:	1002761e 	bne	r2,zero,200b8dc <___vfprintf_internal_r+0x1fb0>
 200af04:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 200af08:	e0bfc417 	ldw	r2,-240(fp)
 200af0c:	1000041e 	bne	r2,zero,200af20 <___vfprintf_internal_r+0x15f4>
 200af10:	e0bfc717 	ldw	r2,-228(fp)
 200af14:	1000021e 	bne	r2,zero,200af20 <___vfprintf_internal_r+0x15f4>
 200af18:	9880004c 	andi	r2,r19,1
 200af1c:	1001f626 	beq	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200af20:	e0bfbb17 	ldw	r2,-276(fp)
 200af24:	88800015 	stw	r2,0(r17)
 200af28:	e0bfbc17 	ldw	r2,-272(fp)
 200af2c:	88800115 	stw	r2,4(r17)
 200af30:	e0ffca17 	ldw	r3,-216(fp)
 200af34:	e0bfbc17 	ldw	r2,-272(fp)
 200af38:	1885883a 	add	r2,r3,r2
 200af3c:	e0bfca15 	stw	r2,-216(fp)
 200af40:	8c400204 	addi	r17,r17,8
 200af44:	e0bfc917 	ldw	r2,-220(fp)
 200af48:	10800044 	addi	r2,r2,1
 200af4c:	e0bfc915 	stw	r2,-220(fp)
 200af50:	e0bfc917 	ldw	r2,-220(fp)
 200af54:	10800210 	cmplti	r2,r2,8
 200af58:	1000071e 	bne	r2,zero,200af78 <___vfprintf_internal_r+0x164c>
 200af5c:	e0bfc804 	addi	r2,fp,-224
 200af60:	100d883a 	mov	r6,r2
 200af64:	e17fe717 	ldw	r5,-100(fp)
 200af68:	e13fe617 	ldw	r4,-104(fp)
 200af6c:	20137b40 	call	20137b4 <__sprint_r>
 200af70:	10025c1e 	bne	r2,zero,200b8e4 <___vfprintf_internal_r+0x1fb8>
 200af74:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 200af78:	e0bfc417 	ldw	r2,-240(fp)
 200af7c:	00a1c83a 	sub	r16,zero,r2
 200af80:	0400310e 	bge	zero,r16,200b048 <___vfprintf_internal_r+0x171c>
 200af84:	00001706 	br	200afe4 <___vfprintf_internal_r+0x16b8>
 200af88:	008080b4 	movhi	r2,514
 200af8c:	10897f84 	addi	r2,r2,9726
 200af90:	88800015 	stw	r2,0(r17)
 200af94:	00800404 	movi	r2,16
 200af98:	88800115 	stw	r2,4(r17)
 200af9c:	e0bfca17 	ldw	r2,-216(fp)
 200afa0:	10800404 	addi	r2,r2,16
 200afa4:	e0bfca15 	stw	r2,-216(fp)
 200afa8:	8c400204 	addi	r17,r17,8
 200afac:	e0bfc917 	ldw	r2,-220(fp)
 200afb0:	10800044 	addi	r2,r2,1
 200afb4:	e0bfc915 	stw	r2,-220(fp)
 200afb8:	e0bfc917 	ldw	r2,-220(fp)
 200afbc:	10800210 	cmplti	r2,r2,8
 200afc0:	1000071e 	bne	r2,zero,200afe0 <___vfprintf_internal_r+0x16b4>
 200afc4:	e0bfc804 	addi	r2,fp,-224
 200afc8:	100d883a 	mov	r6,r2
 200afcc:	e17fe717 	ldw	r5,-100(fp)
 200afd0:	e13fe617 	ldw	r4,-104(fp)
 200afd4:	20137b40 	call	20137b4 <__sprint_r>
 200afd8:	1002441e 	bne	r2,zero,200b8ec <___vfprintf_internal_r+0x1fc0>
 200afdc:	e47fcb04 	addi	r17,fp,-212
 200afe0:	843ffc04 	addi	r16,r16,-16
 200afe4:	80800448 	cmpgei	r2,r16,17
 200afe8:	103fe71e 	bne	r2,zero,200af88 <___vfprintf_internal_r+0x165c>
 200afec:	008080b4 	movhi	r2,514
 200aff0:	10897f84 	addi	r2,r2,9726
 200aff4:	88800015 	stw	r2,0(r17)
 200aff8:	8005883a 	mov	r2,r16
 200affc:	88800115 	stw	r2,4(r17)
 200b000:	e0bfca17 	ldw	r2,-216(fp)
 200b004:	8007883a 	mov	r3,r16
 200b008:	10c5883a 	add	r2,r2,r3
 200b00c:	e0bfca15 	stw	r2,-216(fp)
 200b010:	8c400204 	addi	r17,r17,8
 200b014:	e0bfc917 	ldw	r2,-220(fp)
 200b018:	10800044 	addi	r2,r2,1
 200b01c:	e0bfc915 	stw	r2,-220(fp)
 200b020:	e0bfc917 	ldw	r2,-220(fp)
 200b024:	10800210 	cmplti	r2,r2,8
 200b028:	1000071e 	bne	r2,zero,200b048 <___vfprintf_internal_r+0x171c>
 200b02c:	e0bfc804 	addi	r2,fp,-224
 200b030:	100d883a 	mov	r6,r2
 200b034:	e17fe717 	ldw	r5,-100(fp)
 200b038:	e13fe617 	ldw	r4,-104(fp)
 200b03c:	20137b40 	call	20137b4 <__sprint_r>
 200b040:	10022c1e 	bne	r2,zero,200b8f4 <___vfprintf_internal_r+0x1fc8>
 200b044:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 200b048:	8c800015 	stw	r18,0(r17)
 200b04c:	e0bfc717 	ldw	r2,-228(fp)
 200b050:	88800115 	stw	r2,4(r17)
 200b054:	e0bfca17 	ldw	r2,-216(fp)
 200b058:	e0ffc717 	ldw	r3,-228(fp)
 200b05c:	10c5883a 	add	r2,r2,r3
 200b060:	e0bfca15 	stw	r2,-216(fp)
 200b064:	8c400204 	addi	r17,r17,8
 200b068:	e0bfc917 	ldw	r2,-220(fp)
 200b06c:	10800044 	addi	r2,r2,1
 200b070:	e0bfc915 	stw	r2,-220(fp)
 200b074:	e0bfc917 	ldw	r2,-220(fp)
 200b078:	10800210 	cmplti	r2,r2,8
 200b07c:	10019e1e 	bne	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200b080:	e0bfc804 	addi	r2,fp,-224
 200b084:	100d883a 	mov	r6,r2
 200b088:	e17fe717 	ldw	r5,-100(fp)
 200b08c:	e13fe617 	ldw	r4,-104(fp)
 200b090:	20137b40 	call	20137b4 <__sprint_r>
 200b094:	1002191e 	bne	r2,zero,200b8fc <___vfprintf_internal_r+0x1fd0>
 200b098:	e47fcb04 	addi	r17,fp,-212
 200b09c:	00019606 	br	200b6f8 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 200b0a0:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 200b0a4:	e0bfc717 	ldw	r2,-228(fp)
 200b0a8:	1007883a 	mov	r3,r2
 200b0ac:	e0bfc017 	ldw	r2,-256(fp)
 200b0b0:	10c5883a 	add	r2,r2,r3
 200b0b4:	1007883a 	mov	r3,r2
 200b0b8:	9005883a 	mov	r2,r18
 200b0bc:	1885c83a 	sub	r2,r3,r2
 200b0c0:	e0bfb915 	stw	r2,-284(fp)
 200b0c4:	e0bfb917 	ldw	r2,-284(fp)
 200b0c8:	e0ffb017 	ldw	r3,-320(fp)
 200b0cc:	1880020e 	bge	r3,r2,200b0d8 <___vfprintf_internal_r+0x17ac>
 200b0d0:	e0bfb017 	ldw	r2,-320(fp)
 200b0d4:	e0bfb915 	stw	r2,-284(fp)
 200b0d8:	e0bfb917 	ldw	r2,-284(fp)
 200b0dc:	0080150e 	bge	zero,r2,200b134 <___vfprintf_internal_r+0x1808>
 200b0e0:	8c800015 	stw	r18,0(r17)
 200b0e4:	e0bfb917 	ldw	r2,-284(fp)
 200b0e8:	88800115 	stw	r2,4(r17)
 200b0ec:	e0ffca17 	ldw	r3,-216(fp)
 200b0f0:	e0bfb917 	ldw	r2,-284(fp)
 200b0f4:	1885883a 	add	r2,r3,r2
 200b0f8:	e0bfca15 	stw	r2,-216(fp)
 200b0fc:	8c400204 	addi	r17,r17,8
 200b100:	e0bfc917 	ldw	r2,-220(fp)
 200b104:	10800044 	addi	r2,r2,1
 200b108:	e0bfc915 	stw	r2,-220(fp)
 200b10c:	e0bfc917 	ldw	r2,-220(fp)
 200b110:	10800210 	cmplti	r2,r2,8
 200b114:	1000071e 	bne	r2,zero,200b134 <___vfprintf_internal_r+0x1808>
 200b118:	e0bfc804 	addi	r2,fp,-224
 200b11c:	100d883a 	mov	r6,r2
 200b120:	e17fe717 	ldw	r5,-100(fp)
 200b124:	e13fe617 	ldw	r4,-104(fp)
 200b128:	20137b40 	call	20137b4 <__sprint_r>
 200b12c:	1001f51e 	bne	r2,zero,200b904 <___vfprintf_internal_r+0x1fd8>
 200b130:	e47fcb04 	addi	r17,fp,-212
 200b134:	e0bfb917 	ldw	r2,-284(fp)
 200b138:	1000010e 	bge	r2,zero,200b140 <___vfprintf_internal_r+0x1814>
 200b13c:	0005883a 	mov	r2,zero
 200b140:	e0ffb017 	ldw	r3,-320(fp)
 200b144:	1885c83a 	sub	r2,r3,r2
 200b148:	e0bfb915 	stw	r2,-284(fp)
 200b14c:	e0bfb917 	ldw	r2,-284(fp)
 200b150:	0080340e 	bge	zero,r2,200b224 <___vfprintf_internal_r+0x18f8>
 200b154:	00001906 	br	200b1bc <___vfprintf_internal_r+0x1890>
 200b158:	008080b4 	movhi	r2,514
 200b15c:	10897f84 	addi	r2,r2,9726
 200b160:	88800015 	stw	r2,0(r17)
 200b164:	00800404 	movi	r2,16
 200b168:	88800115 	stw	r2,4(r17)
 200b16c:	e0bfca17 	ldw	r2,-216(fp)
 200b170:	10800404 	addi	r2,r2,16
 200b174:	e0bfca15 	stw	r2,-216(fp)
 200b178:	8c400204 	addi	r17,r17,8
 200b17c:	e0bfc917 	ldw	r2,-220(fp)
 200b180:	10800044 	addi	r2,r2,1
 200b184:	e0bfc915 	stw	r2,-220(fp)
 200b188:	e0bfc917 	ldw	r2,-220(fp)
 200b18c:	10800210 	cmplti	r2,r2,8
 200b190:	1000071e 	bne	r2,zero,200b1b0 <___vfprintf_internal_r+0x1884>
 200b194:	e0bfc804 	addi	r2,fp,-224
 200b198:	100d883a 	mov	r6,r2
 200b19c:	e17fe717 	ldw	r5,-100(fp)
 200b1a0:	e13fe617 	ldw	r4,-104(fp)
 200b1a4:	20137b40 	call	20137b4 <__sprint_r>
 200b1a8:	1001d81e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1fe0>
 200b1ac:	e47fcb04 	addi	r17,fp,-212
 200b1b0:	e0bfb917 	ldw	r2,-284(fp)
 200b1b4:	10bffc04 	addi	r2,r2,-16
 200b1b8:	e0bfb915 	stw	r2,-284(fp)
 200b1bc:	e0bfb917 	ldw	r2,-284(fp)
 200b1c0:	10800448 	cmpgei	r2,r2,17
 200b1c4:	103fe41e 	bne	r2,zero,200b158 <___vfprintf_internal_r+0x182c>
 200b1c8:	008080b4 	movhi	r2,514
 200b1cc:	10897f84 	addi	r2,r2,9726
 200b1d0:	88800015 	stw	r2,0(r17)
 200b1d4:	e0bfb917 	ldw	r2,-284(fp)
 200b1d8:	88800115 	stw	r2,4(r17)
 200b1dc:	e0ffca17 	ldw	r3,-216(fp)
 200b1e0:	e0bfb917 	ldw	r2,-284(fp)
 200b1e4:	1885883a 	add	r2,r3,r2
 200b1e8:	e0bfca15 	stw	r2,-216(fp)
 200b1ec:	8c400204 	addi	r17,r17,8
 200b1f0:	e0bfc917 	ldw	r2,-220(fp)
 200b1f4:	10800044 	addi	r2,r2,1
 200b1f8:	e0bfc915 	stw	r2,-220(fp)
 200b1fc:	e0bfc917 	ldw	r2,-220(fp)
 200b200:	10800210 	cmplti	r2,r2,8
 200b204:	1000071e 	bne	r2,zero,200b224 <___vfprintf_internal_r+0x18f8>
 200b208:	e0bfc804 	addi	r2,fp,-224
 200b20c:	100d883a 	mov	r6,r2
 200b210:	e17fe717 	ldw	r5,-100(fp)
 200b214:	e13fe617 	ldw	r4,-104(fp)
 200b218:	20137b40 	call	20137b4 <__sprint_r>
 200b21c:	1001bd1e 	bne	r2,zero,200b914 <___vfprintf_internal_r+0x1fe8>
 200b220:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 200b224:	e0bfb017 	ldw	r2,-320(fp)
 200b228:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 200b22c:	e0ffc417 	ldw	r3,-240(fp)
 200b230:	e0bfc717 	ldw	r2,-228(fp)
 200b234:	18800216 	blt	r3,r2,200b240 <___vfprintf_internal_r+0x1914>
 200b238:	9880004c 	andi	r2,r19,1
 200b23c:	10001626 	beq	r2,zero,200b298 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 200b240:	e0bfbb17 	ldw	r2,-276(fp)
 200b244:	88800015 	stw	r2,0(r17)
 200b248:	e0bfbc17 	ldw	r2,-272(fp)
 200b24c:	88800115 	stw	r2,4(r17)
 200b250:	e0ffca17 	ldw	r3,-216(fp)
 200b254:	e0bfbc17 	ldw	r2,-272(fp)
 200b258:	1885883a 	add	r2,r3,r2
 200b25c:	e0bfca15 	stw	r2,-216(fp)
 200b260:	8c400204 	addi	r17,r17,8
 200b264:	e0bfc917 	ldw	r2,-220(fp)
 200b268:	10800044 	addi	r2,r2,1
 200b26c:	e0bfc915 	stw	r2,-220(fp)
 200b270:	e0bfc917 	ldw	r2,-220(fp)
 200b274:	10800210 	cmplti	r2,r2,8
 200b278:	1000071e 	bne	r2,zero,200b298 <___vfprintf_internal_r+0x196c>
 200b27c:	e0bfc804 	addi	r2,fp,-224
 200b280:	100d883a 	mov	r6,r2
 200b284:	e17fe717 	ldw	r5,-100(fp)
 200b288:	e13fe617 	ldw	r4,-104(fp)
 200b28c:	20137b40 	call	20137b4 <__sprint_r>
 200b290:	1001a21e 	bne	r2,zero,200b91c <___vfprintf_internal_r+0x1ff0>
 200b294:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 200b298:	e0bfc717 	ldw	r2,-228(fp)
 200b29c:	1007883a 	mov	r3,r2
 200b2a0:	e0bfc017 	ldw	r2,-256(fp)
 200b2a4:	10c5883a 	add	r2,r2,r3
 200b2a8:	1007883a 	mov	r3,r2
 200b2ac:	9005883a 	mov	r2,r18
 200b2b0:	1885c83a 	sub	r2,r3,r2
 200b2b4:	e0bfba15 	stw	r2,-280(fp)
 200b2b8:	e0ffc717 	ldw	r3,-228(fp)
 200b2bc:	e0bfc417 	ldw	r2,-240(fp)
 200b2c0:	1887c83a 	sub	r3,r3,r2
 200b2c4:	e0bfba17 	ldw	r2,-280(fp)
 200b2c8:	1880040e 	bge	r3,r2,200b2dc <___vfprintf_internal_r+0x19b0>
 200b2cc:	e0ffc717 	ldw	r3,-228(fp)
 200b2d0:	e0bfc417 	ldw	r2,-240(fp)
 200b2d4:	1885c83a 	sub	r2,r3,r2
 200b2d8:	e0bfba15 	stw	r2,-280(fp)
 200b2dc:	e0bfba17 	ldw	r2,-280(fp)
 200b2e0:	0080150e 	bge	zero,r2,200b338 <___vfprintf_internal_r+0x1a0c>
 200b2e4:	8c800015 	stw	r18,0(r17)
 200b2e8:	e0bfba17 	ldw	r2,-280(fp)
 200b2ec:	88800115 	stw	r2,4(r17)
 200b2f0:	e0ffca17 	ldw	r3,-216(fp)
 200b2f4:	e0bfba17 	ldw	r2,-280(fp)
 200b2f8:	1885883a 	add	r2,r3,r2
 200b2fc:	e0bfca15 	stw	r2,-216(fp)
 200b300:	8c400204 	addi	r17,r17,8
 200b304:	e0bfc917 	ldw	r2,-220(fp)
 200b308:	10800044 	addi	r2,r2,1
 200b30c:	e0bfc915 	stw	r2,-220(fp)
 200b310:	e0bfc917 	ldw	r2,-220(fp)
 200b314:	10800210 	cmplti	r2,r2,8
 200b318:	1000071e 	bne	r2,zero,200b338 <___vfprintf_internal_r+0x1a0c>
 200b31c:	e0bfc804 	addi	r2,fp,-224
 200b320:	100d883a 	mov	r6,r2
 200b324:	e17fe717 	ldw	r5,-100(fp)
 200b328:	e13fe617 	ldw	r4,-104(fp)
 200b32c:	20137b40 	call	20137b4 <__sprint_r>
 200b330:	10017c1e 	bne	r2,zero,200b924 <___vfprintf_internal_r+0x1ff8>
 200b334:	e47fcb04 	addi	r17,fp,-212
 200b338:	e0ffc717 	ldw	r3,-228(fp)
 200b33c:	e0bfc417 	ldw	r2,-240(fp)
 200b340:	1887c83a 	sub	r3,r3,r2
 200b344:	e0bfba17 	ldw	r2,-280(fp)
 200b348:	1000010e 	bge	r2,zero,200b350 <___vfprintf_internal_r+0x1a24>
 200b34c:	0005883a 	mov	r2,zero
 200b350:	1885c83a 	sub	r2,r3,r2
 200b354:	e0bfba15 	stw	r2,-280(fp)
 200b358:	e0bfba17 	ldw	r2,-280(fp)
 200b35c:	0080e60e 	bge	zero,r2,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200b360:	00001906 	br	200b3c8 <___vfprintf_internal_r+0x1a9c>
 200b364:	008080b4 	movhi	r2,514
 200b368:	10897f84 	addi	r2,r2,9726
 200b36c:	88800015 	stw	r2,0(r17)
 200b370:	00800404 	movi	r2,16
 200b374:	88800115 	stw	r2,4(r17)
 200b378:	e0bfca17 	ldw	r2,-216(fp)
 200b37c:	10800404 	addi	r2,r2,16
 200b380:	e0bfca15 	stw	r2,-216(fp)
 200b384:	8c400204 	addi	r17,r17,8
 200b388:	e0bfc917 	ldw	r2,-220(fp)
 200b38c:	10800044 	addi	r2,r2,1
 200b390:	e0bfc915 	stw	r2,-220(fp)
 200b394:	e0bfc917 	ldw	r2,-220(fp)
 200b398:	10800210 	cmplti	r2,r2,8
 200b39c:	1000071e 	bne	r2,zero,200b3bc <___vfprintf_internal_r+0x1a90>
 200b3a0:	e0bfc804 	addi	r2,fp,-224
 200b3a4:	100d883a 	mov	r6,r2
 200b3a8:	e17fe717 	ldw	r5,-100(fp)
 200b3ac:	e13fe617 	ldw	r4,-104(fp)
 200b3b0:	20137b40 	call	20137b4 <__sprint_r>
 200b3b4:	10015d1e 	bne	r2,zero,200b92c <___vfprintf_internal_r+0x2000>
 200b3b8:	e47fcb04 	addi	r17,fp,-212
 200b3bc:	e0bfba17 	ldw	r2,-280(fp)
 200b3c0:	10bffc04 	addi	r2,r2,-16
 200b3c4:	e0bfba15 	stw	r2,-280(fp)
 200b3c8:	e0bfba17 	ldw	r2,-280(fp)
 200b3cc:	10800448 	cmpgei	r2,r2,17
 200b3d0:	103fe41e 	bne	r2,zero,200b364 <___vfprintf_internal_r+0x1a38>
 200b3d4:	008080b4 	movhi	r2,514
 200b3d8:	10897f84 	addi	r2,r2,9726
 200b3dc:	88800015 	stw	r2,0(r17)
 200b3e0:	e0bfba17 	ldw	r2,-280(fp)
 200b3e4:	88800115 	stw	r2,4(r17)
 200b3e8:	e0ffca17 	ldw	r3,-216(fp)
 200b3ec:	e0bfba17 	ldw	r2,-280(fp)
 200b3f0:	1885883a 	add	r2,r3,r2
 200b3f4:	e0bfca15 	stw	r2,-216(fp)
 200b3f8:	8c400204 	addi	r17,r17,8
 200b3fc:	e0bfc917 	ldw	r2,-220(fp)
 200b400:	10800044 	addi	r2,r2,1
 200b404:	e0bfc915 	stw	r2,-220(fp)
 200b408:	e0bfc917 	ldw	r2,-220(fp)
 200b40c:	10800210 	cmplti	r2,r2,8
 200b410:	1000b91e 	bne	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200b414:	e0bfc804 	addi	r2,fp,-224
 200b418:	100d883a 	mov	r6,r2
 200b41c:	e17fe717 	ldw	r5,-100(fp)
 200b420:	e13fe617 	ldw	r4,-104(fp)
 200b424:	20137b40 	call	20137b4 <__sprint_r>
 200b428:	1001421e 	bne	r2,zero,200b934 <___vfprintf_internal_r+0x2008>
 200b42c:	e47fcb04 	addi	r17,fp,-212
 200b430:	0000b106 	br	200b6f8 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 200b434:	e0bfc717 	ldw	r2,-228(fp)
 200b438:	10800088 	cmpgei	r2,r2,2
 200b43c:	1000021e 	bne	r2,zero,200b448 <___vfprintf_internal_r+0x1b1c>
 200b440:	9880004c 	andi	r2,r19,1
 200b444:	10008026 	beq	r2,zero,200b648 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 200b448:	8c800015 	stw	r18,0(r17)
 200b44c:	00800044 	movi	r2,1
 200b450:	88800115 	stw	r2,4(r17)
 200b454:	e0bfca17 	ldw	r2,-216(fp)
 200b458:	10800044 	addi	r2,r2,1
 200b45c:	e0bfca15 	stw	r2,-216(fp)
 200b460:	8c400204 	addi	r17,r17,8
 200b464:	e0bfc917 	ldw	r2,-220(fp)
 200b468:	10800044 	addi	r2,r2,1
 200b46c:	e0bfc915 	stw	r2,-220(fp)
 200b470:	e0bfc917 	ldw	r2,-220(fp)
 200b474:	10800210 	cmplti	r2,r2,8
 200b478:	1000071e 	bne	r2,zero,200b498 <___vfprintf_internal_r+0x1b6c>
 200b47c:	e0bfc804 	addi	r2,fp,-224
 200b480:	100d883a 	mov	r6,r2
 200b484:	e17fe717 	ldw	r5,-100(fp)
 200b488:	e13fe617 	ldw	r4,-104(fp)
 200b48c:	20137b40 	call	20137b4 <__sprint_r>
 200b490:	10012a1e 	bne	r2,zero,200b93c <___vfprintf_internal_r+0x2010>
 200b494:	e47fcb04 	addi	r17,fp,-212
					cp++;
 200b498:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 200b49c:	e0bfbb17 	ldw	r2,-276(fp)
 200b4a0:	88800015 	stw	r2,0(r17)
 200b4a4:	e0bfbc17 	ldw	r2,-272(fp)
 200b4a8:	88800115 	stw	r2,4(r17)
 200b4ac:	e0ffca17 	ldw	r3,-216(fp)
 200b4b0:	e0bfbc17 	ldw	r2,-272(fp)
 200b4b4:	1885883a 	add	r2,r3,r2
 200b4b8:	e0bfca15 	stw	r2,-216(fp)
 200b4bc:	8c400204 	addi	r17,r17,8
 200b4c0:	e0bfc917 	ldw	r2,-220(fp)
 200b4c4:	10800044 	addi	r2,r2,1
 200b4c8:	e0bfc915 	stw	r2,-220(fp)
 200b4cc:	e0bfc917 	ldw	r2,-220(fp)
 200b4d0:	10800210 	cmplti	r2,r2,8
 200b4d4:	1000071e 	bne	r2,zero,200b4f4 <___vfprintf_internal_r+0x1bc8>
 200b4d8:	e0bfc804 	addi	r2,fp,-224
 200b4dc:	100d883a 	mov	r6,r2
 200b4e0:	e17fe717 	ldw	r5,-100(fp)
 200b4e4:	e13fe617 	ldw	r4,-104(fp)
 200b4e8:	20137b40 	call	20137b4 <__sprint_r>
 200b4ec:	1001151e 	bne	r2,zero,200b944 <___vfprintf_internal_r+0x2018>
 200b4f0:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 200b4f4:	e0bfc217 	ldw	r2,-248(fp)
 200b4f8:	e0ffc317 	ldw	r3,-244(fp)
 200b4fc:	000d883a 	mov	r6,zero
 200b500:	000f883a 	mov	r7,zero
 200b504:	1009883a 	mov	r4,r2
 200b508:	180b883a 	mov	r5,r3
 200b50c:	2007be80 	call	2007be8 <__eqdf2>
 200b510:	10001826 	beq	r2,zero,200b574 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 200b514:	8c800015 	stw	r18,0(r17)
 200b518:	e0bfc717 	ldw	r2,-228(fp)
 200b51c:	10bfffc4 	addi	r2,r2,-1
 200b520:	88800115 	stw	r2,4(r17)
 200b524:	e0bfca17 	ldw	r2,-216(fp)
 200b528:	e0ffc717 	ldw	r3,-228(fp)
 200b52c:	10c5883a 	add	r2,r2,r3
 200b530:	10bfffc4 	addi	r2,r2,-1
 200b534:	e0bfca15 	stw	r2,-216(fp)
 200b538:	8c400204 	addi	r17,r17,8
 200b53c:	e0bfc917 	ldw	r2,-220(fp)
 200b540:	10800044 	addi	r2,r2,1
 200b544:	e0bfc915 	stw	r2,-220(fp)
 200b548:	e0bfc917 	ldw	r2,-220(fp)
 200b54c:	10800210 	cmplti	r2,r2,8
 200b550:	1000521e 	bne	r2,zero,200b69c <___vfprintf_internal_r+0x1d70>
 200b554:	e0bfc804 	addi	r2,fp,-224
 200b558:	100d883a 	mov	r6,r2
 200b55c:	e17fe717 	ldw	r5,-100(fp)
 200b560:	e13fe617 	ldw	r4,-104(fp)
 200b564:	20137b40 	call	20137b4 <__sprint_r>
 200b568:	1000f81e 	bne	r2,zero,200b94c <___vfprintf_internal_r+0x2020>
 200b56c:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b570:	00004a06 	br	200b69c <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200b574:	e0bfc717 	ldw	r2,-228(fp)
 200b578:	143fffc4 	addi	r16,r2,-1
 200b57c:	0400470e 	bge	zero,r16,200b69c <___vfprintf_internal_r+0x1d70>
 200b580:	00001706 	br	200b5e0 <___vfprintf_internal_r+0x1cb4>
 200b584:	008080b4 	movhi	r2,514
 200b588:	10897f84 	addi	r2,r2,9726
 200b58c:	88800015 	stw	r2,0(r17)
 200b590:	00800404 	movi	r2,16
 200b594:	88800115 	stw	r2,4(r17)
 200b598:	e0bfca17 	ldw	r2,-216(fp)
 200b59c:	10800404 	addi	r2,r2,16
 200b5a0:	e0bfca15 	stw	r2,-216(fp)
 200b5a4:	8c400204 	addi	r17,r17,8
 200b5a8:	e0bfc917 	ldw	r2,-220(fp)
 200b5ac:	10800044 	addi	r2,r2,1
 200b5b0:	e0bfc915 	stw	r2,-220(fp)
 200b5b4:	e0bfc917 	ldw	r2,-220(fp)
 200b5b8:	10800210 	cmplti	r2,r2,8
 200b5bc:	1000071e 	bne	r2,zero,200b5dc <___vfprintf_internal_r+0x1cb0>
 200b5c0:	e0bfc804 	addi	r2,fp,-224
 200b5c4:	100d883a 	mov	r6,r2
 200b5c8:	e17fe717 	ldw	r5,-100(fp)
 200b5cc:	e13fe617 	ldw	r4,-104(fp)
 200b5d0:	20137b40 	call	20137b4 <__sprint_r>
 200b5d4:	1000df1e 	bne	r2,zero,200b954 <___vfprintf_internal_r+0x2028>
 200b5d8:	e47fcb04 	addi	r17,fp,-212
 200b5dc:	843ffc04 	addi	r16,r16,-16
 200b5e0:	80800448 	cmpgei	r2,r16,17
 200b5e4:	103fe71e 	bne	r2,zero,200b584 <___vfprintf_internal_r+0x1c58>
 200b5e8:	008080b4 	movhi	r2,514
 200b5ec:	10897f84 	addi	r2,r2,9726
 200b5f0:	88800015 	stw	r2,0(r17)
 200b5f4:	8005883a 	mov	r2,r16
 200b5f8:	88800115 	stw	r2,4(r17)
 200b5fc:	e0bfca17 	ldw	r2,-216(fp)
 200b600:	8007883a 	mov	r3,r16
 200b604:	10c5883a 	add	r2,r2,r3
 200b608:	e0bfca15 	stw	r2,-216(fp)
 200b60c:	8c400204 	addi	r17,r17,8
 200b610:	e0bfc917 	ldw	r2,-220(fp)
 200b614:	10800044 	addi	r2,r2,1
 200b618:	e0bfc915 	stw	r2,-220(fp)
 200b61c:	e0bfc917 	ldw	r2,-220(fp)
 200b620:	10800210 	cmplti	r2,r2,8
 200b624:	10001d1e 	bne	r2,zero,200b69c <___vfprintf_internal_r+0x1d70>
 200b628:	e0bfc804 	addi	r2,fp,-224
 200b62c:	100d883a 	mov	r6,r2
 200b630:	e17fe717 	ldw	r5,-100(fp)
 200b634:	e13fe617 	ldw	r4,-104(fp)
 200b638:	20137b40 	call	20137b4 <__sprint_r>
 200b63c:	1000c71e 	bne	r2,zero,200b95c <___vfprintf_internal_r+0x2030>
 200b640:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b644:	00001506 	br	200b69c <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 200b648:	8c800015 	stw	r18,0(r17)
 200b64c:	00800044 	movi	r2,1
 200b650:	88800115 	stw	r2,4(r17)
 200b654:	e0bfca17 	ldw	r2,-216(fp)
 200b658:	10800044 	addi	r2,r2,1
 200b65c:	e0bfca15 	stw	r2,-216(fp)
 200b660:	8c400204 	addi	r17,r17,8
 200b664:	e0bfc917 	ldw	r2,-220(fp)
 200b668:	10800044 	addi	r2,r2,1
 200b66c:	e0bfc915 	stw	r2,-220(fp)
 200b670:	e0bfc917 	ldw	r2,-220(fp)
 200b674:	10800210 	cmplti	r2,r2,8
 200b678:	1000091e 	bne	r2,zero,200b6a0 <___vfprintf_internal_r+0x1d74>
 200b67c:	e0bfc804 	addi	r2,fp,-224
 200b680:	100d883a 	mov	r6,r2
 200b684:	e17fe717 	ldw	r5,-100(fp)
 200b688:	e13fe617 	ldw	r4,-104(fp)
 200b68c:	20137b40 	call	20137b4 <__sprint_r>
 200b690:	1000b41e 	bne	r2,zero,200b964 <___vfprintf_internal_r+0x2038>
 200b694:	e47fcb04 	addi	r17,fp,-212
 200b698:	00000106 	br	200b6a0 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b69c:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 200b6a0:	e0bfc504 	addi	r2,fp,-236
 200b6a4:	88800015 	stw	r2,0(r17)
 200b6a8:	e0bfaf17 	ldw	r2,-324(fp)
 200b6ac:	88800115 	stw	r2,4(r17)
 200b6b0:	e0ffca17 	ldw	r3,-216(fp)
 200b6b4:	e0bfaf17 	ldw	r2,-324(fp)
 200b6b8:	1885883a 	add	r2,r3,r2
 200b6bc:	e0bfca15 	stw	r2,-216(fp)
 200b6c0:	8c400204 	addi	r17,r17,8
 200b6c4:	e0bfc917 	ldw	r2,-220(fp)
 200b6c8:	10800044 	addi	r2,r2,1
 200b6cc:	e0bfc915 	stw	r2,-220(fp)
 200b6d0:	e0bfc917 	ldw	r2,-220(fp)
 200b6d4:	10800210 	cmplti	r2,r2,8
 200b6d8:	1000071e 	bne	r2,zero,200b6f8 <___vfprintf_internal_r+0x1dcc>
 200b6dc:	e0bfc804 	addi	r2,fp,-224
 200b6e0:	100d883a 	mov	r6,r2
 200b6e4:	e17fe717 	ldw	r5,-100(fp)
 200b6e8:	e13fe617 	ldw	r4,-104(fp)
 200b6ec:	20137b40 	call	20137b4 <__sprint_r>
 200b6f0:	10009e1e 	bne	r2,zero,200b96c <___vfprintf_internal_r+0x2040>
 200b6f4:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200b6f8:	9880010c 	andi	r2,r19,4
 200b6fc:	10003526 	beq	r2,zero,200b7d4 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 200b700:	e0ffad17 	ldw	r3,-332(fp)
 200b704:	e0bfb517 	ldw	r2,-300(fp)
 200b708:	18a1c83a 	sub	r16,r3,r2
 200b70c:	0400310e 	bge	zero,r16,200b7d4 <___vfprintf_internal_r+0x1ea8>
 200b710:	00001706 	br	200b770 <___vfprintf_internal_r+0x1e44>
 200b714:	008080b4 	movhi	r2,514
 200b718:	10897b84 	addi	r2,r2,9710
 200b71c:	88800015 	stw	r2,0(r17)
 200b720:	00800404 	movi	r2,16
 200b724:	88800115 	stw	r2,4(r17)
 200b728:	e0bfca17 	ldw	r2,-216(fp)
 200b72c:	10800404 	addi	r2,r2,16
 200b730:	e0bfca15 	stw	r2,-216(fp)
 200b734:	8c400204 	addi	r17,r17,8
 200b738:	e0bfc917 	ldw	r2,-220(fp)
 200b73c:	10800044 	addi	r2,r2,1
 200b740:	e0bfc915 	stw	r2,-220(fp)
 200b744:	e0bfc917 	ldw	r2,-220(fp)
 200b748:	10800210 	cmplti	r2,r2,8
 200b74c:	1000071e 	bne	r2,zero,200b76c <___vfprintf_internal_r+0x1e40>
 200b750:	e0bfc804 	addi	r2,fp,-224
 200b754:	100d883a 	mov	r6,r2
 200b758:	e17fe717 	ldw	r5,-100(fp)
 200b75c:	e13fe617 	ldw	r4,-104(fp)
 200b760:	20137b40 	call	20137b4 <__sprint_r>
 200b764:	1000831e 	bne	r2,zero,200b974 <___vfprintf_internal_r+0x2048>
 200b768:	e47fcb04 	addi	r17,fp,-212
 200b76c:	843ffc04 	addi	r16,r16,-16
 200b770:	80800448 	cmpgei	r2,r16,17
 200b774:	103fe71e 	bne	r2,zero,200b714 <___vfprintf_internal_r+0x1de8>
 200b778:	008080b4 	movhi	r2,514
 200b77c:	10897b84 	addi	r2,r2,9710
 200b780:	88800015 	stw	r2,0(r17)
 200b784:	8005883a 	mov	r2,r16
 200b788:	88800115 	stw	r2,4(r17)
 200b78c:	e0bfca17 	ldw	r2,-216(fp)
 200b790:	8007883a 	mov	r3,r16
 200b794:	10c5883a 	add	r2,r2,r3
 200b798:	e0bfca15 	stw	r2,-216(fp)
 200b79c:	8c400204 	addi	r17,r17,8
 200b7a0:	e0bfc917 	ldw	r2,-220(fp)
 200b7a4:	10800044 	addi	r2,r2,1
 200b7a8:	e0bfc915 	stw	r2,-220(fp)
 200b7ac:	e0bfc917 	ldw	r2,-220(fp)
 200b7b0:	10800210 	cmplti	r2,r2,8
 200b7b4:	1000071e 	bne	r2,zero,200b7d4 <___vfprintf_internal_r+0x1ea8>
 200b7b8:	e0bfc804 	addi	r2,fp,-224
 200b7bc:	100d883a 	mov	r6,r2
 200b7c0:	e17fe717 	ldw	r5,-100(fp)
 200b7c4:	e13fe617 	ldw	r4,-104(fp)
 200b7c8:	20137b40 	call	20137b4 <__sprint_r>
 200b7cc:	10006b1e 	bne	r2,zero,200b97c <___vfprintf_internal_r+0x2050>
 200b7d0:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 200b7d4:	e0ffad17 	ldw	r3,-332(fp)
 200b7d8:	e0bfb517 	ldw	r2,-300(fp)
 200b7dc:	10c0010e 	bge	r2,r3,200b7e4 <___vfprintf_internal_r+0x1eb8>
 200b7e0:	1805883a 	mov	r2,r3
 200b7e4:	e0ffac17 	ldw	r3,-336(fp)
 200b7e8:	1885883a 	add	r2,r3,r2
 200b7ec:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 200b7f0:	e0bfca17 	ldw	r2,-216(fp)
 200b7f4:	10000626 	beq	r2,zero,200b810 <___vfprintf_internal_r+0x1ee4>
 200b7f8:	e0bfc804 	addi	r2,fp,-224
 200b7fc:	100d883a 	mov	r6,r2
 200b800:	e17fe717 	ldw	r5,-100(fp)
 200b804:	e13fe617 	ldw	r4,-104(fp)
 200b808:	20137b40 	call	20137b4 <__sprint_r>
 200b80c:	10005d1e 	bne	r2,zero,200b984 <___vfprintf_internal_r+0x2058>
 200b810:	e03fc915 	stw	zero,-220(fp)
 200b814:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 200b818:	e0bfb817 	ldw	r2,-288(fp)
 200b81c:	1038a026 	beq	r2,zero,2009aa0 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 200b820:	e17fb817 	ldw	r5,-288(fp)
 200b824:	e13fe617 	ldw	r4,-104(fp)
 200b828:	200e7b80 	call	200e7b8 <_free_r>
			malloc_buf = NULL;
 200b82c:	e03fb815 	stw	zero,-288(fp)
		}
	}
 200b830:	00389b06 	br	2009aa0 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 200b834:	0001883a 	nop
 200b838:	00000106 	br	200b840 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 200b83c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200b840:	e0bfca17 	ldw	r2,-216(fp)
 200b844:	10000626 	beq	r2,zero,200b860 <___vfprintf_internal_r+0x1f34>
 200b848:	e0bfc804 	addi	r2,fp,-224
 200b84c:	100d883a 	mov	r6,r2
 200b850:	e17fe717 	ldw	r5,-100(fp)
 200b854:	e13fe617 	ldw	r4,-104(fp)
 200b858:	20137b40 	call	20137b4 <__sprint_r>
 200b85c:	10004b1e 	bne	r2,zero,200b98c <___vfprintf_internal_r+0x2060>
 200b860:	e03fc915 	stw	zero,-220(fp)
 200b864:	e47fcb04 	addi	r17,fp,-212
 200b868:	00004906 	br	200b990 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 200b86c:	0001883a 	nop
 200b870:	00004706 	br	200b990 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 200b874:	0001883a 	nop
 200b878:	00004506 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b87c:	0001883a 	nop
 200b880:	00004306 	br	200b990 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 200b884:	0001883a 	nop
 200b888:	00004106 	br	200b990 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 200b88c:	0001883a 	nop
 200b890:	00003f06 	br	200b990 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 200b894:	0001883a 	nop
 200b898:	00003d06 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b89c:	0001883a 	nop
 200b8a0:	00003b06 	br	200b990 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200b8a4:	0001883a 	nop
 200b8a8:	00003906 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b8ac:	0001883a 	nop
 200b8b0:	00003706 	br	200b990 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 200b8b4:	0001883a 	nop
 200b8b8:	00003506 	br	200b990 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200b8bc:	0001883a 	nop
 200b8c0:	00003306 	br	200b990 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200b8c4:	0001883a 	nop
 200b8c8:	00003106 	br	200b990 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 200b8cc:	0001883a 	nop
 200b8d0:	00002f06 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b8d4:	0001883a 	nop
 200b8d8:	00002d06 	br	200b990 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 200b8dc:	0001883a 	nop
 200b8e0:	00002b06 	br	200b990 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200b8e4:	0001883a 	nop
 200b8e8:	00002906 	br	200b990 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 200b8ec:	0001883a 	nop
 200b8f0:	00002706 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b8f4:	0001883a 	nop
 200b8f8:	00002506 	br	200b990 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 200b8fc:	0001883a 	nop
 200b900:	00002306 	br	200b990 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 200b904:	0001883a 	nop
 200b908:	00002106 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b90c:	0001883a 	nop
 200b910:	00001f06 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b914:	0001883a 	nop
 200b918:	00001d06 	br	200b990 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 200b91c:	0001883a 	nop
 200b920:	00001b06 	br	200b990 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 200b924:	0001883a 	nop
 200b928:	00001906 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b92c:	0001883a 	nop
 200b930:	00001706 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b934:	0001883a 	nop
 200b938:	00001506 	br	200b990 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 200b93c:	0001883a 	nop
 200b940:	00001306 	br	200b990 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 200b944:	0001883a 	nop
 200b948:	00001106 	br	200b990 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 200b94c:	0001883a 	nop
 200b950:	00000f06 	br	200b990 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200b954:	0001883a 	nop
 200b958:	00000d06 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b95c:	0001883a 	nop
 200b960:	00000b06 	br	200b990 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 200b964:	0001883a 	nop
 200b968:	00000906 	br	200b990 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 200b96c:	0001883a 	nop
 200b970:	00000706 	br	200b990 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 200b974:	0001883a 	nop
 200b978:	00000506 	br	200b990 <___vfprintf_internal_r+0x2064>
 200b97c:	0001883a 	nop
 200b980:	00000306 	br	200b990 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 200b984:	0001883a 	nop
 200b988:	00000106 	br	200b990 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200b98c:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200b990:	e0bfb817 	ldw	r2,-288(fp)
 200b994:	10000326 	beq	r2,zero,200b9a4 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 200b998:	e17fb817 	ldw	r5,-288(fp)
 200b99c:	e13fe617 	ldw	r4,-104(fp)
 200b9a0:	200e7b80 	call	200e7b8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 200b9a4:	e0bfe717 	ldw	r2,-100(fp)
 200b9a8:	1080030b 	ldhu	r2,12(r2)
 200b9ac:	10bfffcc 	andi	r2,r2,65535
 200b9b0:	1080100c 	andi	r2,r2,64
 200b9b4:	1000021e 	bne	r2,zero,200b9c0 <___vfprintf_internal_r+0x2094>
 200b9b8:	e0bfac17 	ldw	r2,-336(fp)
 200b9bc:	00000206 	br	200b9c8 <___vfprintf_internal_r+0x209c>
 200b9c0:	00bfffc4 	movi	r2,-1
 200b9c4:	0001883a 	nop
	/* NOTREACHED */
}
 200b9c8:	e6fff804 	addi	sp,fp,-32
 200b9cc:	dfc00917 	ldw	ra,36(sp)
 200b9d0:	df000817 	ldw	fp,32(sp)
 200b9d4:	ddc00717 	ldw	r23,28(sp)
 200b9d8:	dd800617 	ldw	r22,24(sp)
 200b9dc:	dd400517 	ldw	r21,20(sp)
 200b9e0:	dd000417 	ldw	r20,16(sp)
 200b9e4:	dcc00317 	ldw	r19,12(sp)
 200b9e8:	dc800217 	ldw	r18,8(sp)
 200b9ec:	dc400117 	ldw	r17,4(sp)
 200b9f0:	dc000017 	ldw	r16,0(sp)
 200b9f4:	dec00a04 	addi	sp,sp,40
 200b9f8:	f800283a 	ret

0200b9fc <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 200b9fc:	deffef04 	addi	sp,sp,-68
 200ba00:	dfc01015 	stw	ra,64(sp)
 200ba04:	df000f15 	stw	fp,60(sp)
 200ba08:	df000f04 	addi	fp,sp,60
 200ba0c:	e13ffc15 	stw	r4,-16(fp)
 200ba10:	e17ffd15 	stw	r5,-12(fp)
 200ba14:	e1bffe15 	stw	r6,-8(fp)
 200ba18:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 200ba1c:	e0bffd17 	ldw	r2,-12(fp)
 200ba20:	e0bffa15 	stw	r2,-24(fp)
 200ba24:	e0bffe17 	ldw	r2,-8(fp)
 200ba28:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 200ba2c:	e0bffb17 	ldw	r2,-20(fp)
 200ba30:	1000090e 	bge	r2,zero,200ba58 <cvt+0x5c>
		value = -value;
 200ba34:	e0bffd17 	ldw	r2,-12(fp)
 200ba38:	e0bffd15 	stw	r2,-12(fp)
 200ba3c:	e0bffe17 	ldw	r2,-8(fp)
 200ba40:	10a0003c 	xorhi	r2,r2,32768
 200ba44:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 200ba48:	e0800317 	ldw	r2,12(fp)
 200ba4c:	00c00b44 	movi	r3,45
 200ba50:	10c00005 	stb	r3,0(r2)
 200ba54:	00000206 	br	200ba60 <cvt+0x64>
	} else
		*sign = '\000';
 200ba58:	e0800317 	ldw	r2,12(fp)
 200ba5c:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 200ba60:	e0800517 	ldw	r2,20(fp)
 200ba64:	108019a0 	cmpeqi	r2,r2,102
 200ba68:	1000031e 	bne	r2,zero,200ba78 <cvt+0x7c>
 200ba6c:	e0800517 	ldw	r2,20(fp)
 200ba70:	10801198 	cmpnei	r2,r2,70
 200ba74:	1000031e 	bne	r2,zero,200ba84 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 200ba78:	008000c4 	movi	r2,3
 200ba7c:	e0bff515 	stw	r2,-44(fp)
 200ba80:	00000b06 	br	200bab0 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 200ba84:	e0800517 	ldw	r2,20(fp)
 200ba88:	10801960 	cmpeqi	r2,r2,101
 200ba8c:	1000031e 	bne	r2,zero,200ba9c <cvt+0xa0>
 200ba90:	e0800517 	ldw	r2,20(fp)
 200ba94:	10801158 	cmpnei	r2,r2,69
 200ba98:	1000031e 	bne	r2,zero,200baa8 <cvt+0xac>
			ndigits++;
 200ba9c:	e0bfff17 	ldw	r2,-4(fp)
 200baa0:	10800044 	addi	r2,r2,1
 200baa4:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 200baa8:	00800084 	movi	r2,2
 200baac:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 200bab0:	e0bff904 	addi	r2,fp,-28
 200bab4:	d8800315 	stw	r2,12(sp)
 200bab8:	e0bff804 	addi	r2,fp,-32
 200babc:	d8800215 	stw	r2,8(sp)
 200bac0:	e0800417 	ldw	r2,16(fp)
 200bac4:	d8800115 	stw	r2,4(sp)
 200bac8:	e0bfff17 	ldw	r2,-4(fp)
 200bacc:	d8800015 	stw	r2,0(sp)
 200bad0:	e1fff517 	ldw	r7,-44(fp)
 200bad4:	e17ffd17 	ldw	r5,-12(fp)
 200bad8:	e1bffe17 	ldw	r6,-8(fp)
 200badc:	e13ffc17 	ldw	r4,-16(fp)
 200bae0:	200c29c0 	call	200c29c <_dtoa_r>
 200bae4:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200bae8:	e0800517 	ldw	r2,20(fp)
 200baec:	108019e0 	cmpeqi	r2,r2,103
 200baf0:	1000031e 	bne	r2,zero,200bb00 <cvt+0x104>
 200baf4:	e0800517 	ldw	r2,20(fp)
 200baf8:	108011d8 	cmpnei	r2,r2,71
 200bafc:	1000031e 	bne	r2,zero,200bb0c <cvt+0x110>
 200bb00:	e0800217 	ldw	r2,8(fp)
 200bb04:	1080004c 	andi	r2,r2,1
 200bb08:	10003326 	beq	r2,zero,200bbd8 <cvt+0x1dc>
		bp = digits + ndigits;
 200bb0c:	e0bfff17 	ldw	r2,-4(fp)
 200bb10:	e0fff717 	ldw	r3,-36(fp)
 200bb14:	1885883a 	add	r2,r3,r2
 200bb18:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 200bb1c:	e0800517 	ldw	r2,20(fp)
 200bb20:	108019a0 	cmpeqi	r2,r2,102
 200bb24:	1000031e 	bne	r2,zero,200bb34 <cvt+0x138>
 200bb28:	e0800517 	ldw	r2,20(fp)
 200bb2c:	10801198 	cmpnei	r2,r2,70
 200bb30:	1000181e 	bne	r2,zero,200bb94 <cvt+0x198>
			if (*digits == '0' && value)
 200bb34:	e0bff717 	ldw	r2,-36(fp)
 200bb38:	10800003 	ldbu	r2,0(r2)
 200bb3c:	10803fcc 	andi	r2,r2,255
 200bb40:	1080201c 	xori	r2,r2,128
 200bb44:	10bfe004 	addi	r2,r2,-128
 200bb48:	10800c18 	cmpnei	r2,r2,48
 200bb4c:	10000b1e 	bne	r2,zero,200bb7c <cvt+0x180>
 200bb50:	000d883a 	mov	r6,zero
 200bb54:	000f883a 	mov	r7,zero
 200bb58:	e13ffd17 	ldw	r4,-12(fp)
 200bb5c:	e17ffe17 	ldw	r5,-8(fp)
 200bb60:	2007be80 	call	2007be8 <__eqdf2>
 200bb64:	10000526 	beq	r2,zero,200bb7c <cvt+0x180>
				*decpt = -ndigits + 1;
 200bb68:	00c00044 	movi	r3,1
 200bb6c:	e0bfff17 	ldw	r2,-4(fp)
 200bb70:	1887c83a 	sub	r3,r3,r2
 200bb74:	e0800417 	ldw	r2,16(fp)
 200bb78:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 200bb7c:	e0800417 	ldw	r2,16(fp)
 200bb80:	10800017 	ldw	r2,0(r2)
 200bb84:	1007883a 	mov	r3,r2
 200bb88:	e0bff617 	ldw	r2,-40(fp)
 200bb8c:	10c5883a 	add	r2,r2,r3
 200bb90:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 200bb94:	000d883a 	mov	r6,zero
 200bb98:	000f883a 	mov	r7,zero
 200bb9c:	e13ffd17 	ldw	r4,-12(fp)
 200bba0:	e17ffe17 	ldw	r5,-8(fp)
 200bba4:	2007be80 	call	2007be8 <__eqdf2>
 200bba8:	1000081e 	bne	r2,zero,200bbcc <cvt+0x1d0>
			rve = bp;
 200bbac:	e0bff617 	ldw	r2,-40(fp)
 200bbb0:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 200bbb4:	00000506 	br	200bbcc <cvt+0x1d0>
			*rve++ = '0';
 200bbb8:	e0bff917 	ldw	r2,-28(fp)
 200bbbc:	10c00044 	addi	r3,r2,1
 200bbc0:	e0fff915 	stw	r3,-28(fp)
 200bbc4:	00c00c04 	movi	r3,48
 200bbc8:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 200bbcc:	e0fff917 	ldw	r3,-28(fp)
 200bbd0:	e0bff617 	ldw	r2,-40(fp)
 200bbd4:	18bff836 	bltu	r3,r2,200bbb8 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200bbd8:	e0bff917 	ldw	r2,-28(fp)
 200bbdc:	1007883a 	mov	r3,r2
 200bbe0:	e0bff717 	ldw	r2,-36(fp)
 200bbe4:	1887c83a 	sub	r3,r3,r2
 200bbe8:	e0800617 	ldw	r2,24(fp)
 200bbec:	10c00015 	stw	r3,0(r2)
	return (digits);
 200bbf0:	e0bff717 	ldw	r2,-36(fp)
}
 200bbf4:	e037883a 	mov	sp,fp
 200bbf8:	dfc00117 	ldw	ra,4(sp)
 200bbfc:	df000017 	ldw	fp,0(sp)
 200bc00:	dec00204 	addi	sp,sp,8
 200bc04:	f800283a 	ret

0200bc08 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200bc08:	defff704 	addi	sp,sp,-36
 200bc0c:	dfc00815 	stw	ra,32(sp)
 200bc10:	df000715 	stw	fp,28(sp)
 200bc14:	dc400615 	stw	r17,24(sp)
 200bc18:	dc000515 	stw	r16,20(sp)
 200bc1c:	df000704 	addi	fp,sp,28
 200bc20:	e13ffb15 	stw	r4,-20(fp)
 200bc24:	e17ffc15 	stw	r5,-16(fp)
 200bc28:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 200bc2c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 200bc30:	8805883a 	mov	r2,r17
 200bc34:	14400044 	addi	r17,r2,1
 200bc38:	e0fffd17 	ldw	r3,-12(fp)
 200bc3c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 200bc40:	e0bffc17 	ldw	r2,-16(fp)
 200bc44:	1000080e 	bge	r2,zero,200bc68 <exponent+0x60>
		exp = -exp;
 200bc48:	e0bffc17 	ldw	r2,-16(fp)
 200bc4c:	0085c83a 	sub	r2,zero,r2
 200bc50:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 200bc54:	8805883a 	mov	r2,r17
 200bc58:	14400044 	addi	r17,r2,1
 200bc5c:	00c00b44 	movi	r3,45
 200bc60:	10c00005 	stb	r3,0(r2)
 200bc64:	00000406 	br	200bc78 <exponent+0x70>
	}
	else
		*p++ = '+';
 200bc68:	8805883a 	mov	r2,r17
 200bc6c:	14400044 	addi	r17,r2,1
 200bc70:	00c00ac4 	movi	r3,43
 200bc74:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 200bc78:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 200bc7c:	e0bffc17 	ldw	r2,-16(fp)
 200bc80:	10800290 	cmplti	r2,r2,10
 200bc84:	10001d1e 	bne	r2,zero,200bcfc <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 200bc88:	843fffc4 	addi	r16,r16,-1
 200bc8c:	e0bffc17 	ldw	r2,-16(fp)
 200bc90:	01400284 	movi	r5,10
 200bc94:	1009883a 	mov	r4,r2
 200bc98:	20069240 	call	2006924 <__modsi3>
 200bc9c:	10800c04 	addi	r2,r2,48
 200bca0:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 200bca4:	e0bffc17 	ldw	r2,-16(fp)
 200bca8:	01400284 	movi	r5,10
 200bcac:	1009883a 	mov	r4,r2
 200bcb0:	20068a00 	call	20068a0 <__divsi3>
 200bcb4:	e0bffc15 	stw	r2,-16(fp)
 200bcb8:	e0bffc17 	ldw	r2,-16(fp)
 200bcbc:	10800288 	cmpgei	r2,r2,10
 200bcc0:	103ff11e 	bne	r2,zero,200bc88 <exponent+0x80>
		*--t = to_char (exp);
 200bcc4:	843fffc4 	addi	r16,r16,-1
 200bcc8:	e0bffc17 	ldw	r2,-16(fp)
 200bccc:	10800c04 	addi	r2,r2,48
 200bcd0:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 200bcd4:	00000606 	br	200bcf0 <exponent+0xe8>
 200bcd8:	8805883a 	mov	r2,r17
 200bcdc:	14400044 	addi	r17,r2,1
 200bce0:	8007883a 	mov	r3,r16
 200bce4:	1c000044 	addi	r16,r3,1
 200bce8:	18c00003 	ldbu	r3,0(r3)
 200bcec:	10c00005 	stb	r3,0(r2)
 200bcf0:	e0bffac4 	addi	r2,fp,-21
 200bcf4:	80bff836 	bltu	r16,r2,200bcd8 <exponent+0xd0>
 200bcf8:	00000906 	br	200bd20 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 200bcfc:	8805883a 	mov	r2,r17
 200bd00:	14400044 	addi	r17,r2,1
 200bd04:	00c00c04 	movi	r3,48
 200bd08:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 200bd0c:	8805883a 	mov	r2,r17
 200bd10:	14400044 	addi	r17,r2,1
 200bd14:	e0fffc17 	ldw	r3,-16(fp)
 200bd18:	18c00c04 	addi	r3,r3,48
 200bd1c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 200bd20:	8807883a 	mov	r3,r17
 200bd24:	e0bffb17 	ldw	r2,-20(fp)
 200bd28:	1885c83a 	sub	r2,r3,r2
}
 200bd2c:	e6fffe04 	addi	sp,fp,-8
 200bd30:	dfc00317 	ldw	ra,12(sp)
 200bd34:	df000217 	ldw	fp,8(sp)
 200bd38:	dc400117 	ldw	r17,4(sp)
 200bd3c:	dc000017 	ldw	r16,0(sp)
 200bd40:	dec00404 	addi	sp,sp,16
 200bd44:	f800283a 	ret

0200bd48 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200bd48:	defffb04 	addi	sp,sp,-20
 200bd4c:	dfc00415 	stw	ra,16(sp)
 200bd50:	df000315 	stw	fp,12(sp)
 200bd54:	dc000215 	stw	r16,8(sp)
 200bd58:	df000304 	addi	fp,sp,12
 200bd5c:	e13ffe15 	stw	r4,-8(fp)
 200bd60:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 200bd64:	d0a03017 	ldw	r2,-32576(gp)
 200bd68:	e0bffd15 	stw	r2,-12(fp)
 200bd6c:	e0bffd17 	ldw	r2,-12(fp)
 200bd70:	10000526 	beq	r2,zero,200bd88 <__swsetup_r+0x40>
 200bd74:	e0bffd17 	ldw	r2,-12(fp)
 200bd78:	10800e17 	ldw	r2,56(r2)
 200bd7c:	1000021e 	bne	r2,zero,200bd88 <__swsetup_r+0x40>
 200bd80:	e13ffd17 	ldw	r4,-12(fp)
 200bd84:	200e5980 	call	200e598 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 200bd88:	8080030b 	ldhu	r2,12(r16)
 200bd8c:	10bfffcc 	andi	r2,r2,65535
 200bd90:	1080020c 	andi	r2,r2,8
 200bd94:	1000241e 	bne	r2,zero,200be28 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 200bd98:	8080030b 	ldhu	r2,12(r16)
 200bd9c:	10bfffcc 	andi	r2,r2,65535
 200bda0:	1080040c 	andi	r2,r2,16
 200bda4:	1000081e 	bne	r2,zero,200bdc8 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 200bda8:	e0bffe17 	ldw	r2,-8(fp)
 200bdac:	00c00244 	movi	r3,9
 200bdb0:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 200bdb4:	8080030b 	ldhu	r2,12(r16)
 200bdb8:	10801014 	ori	r2,r2,64
 200bdbc:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200bdc0:	00bfffc4 	movi	r2,-1
 200bdc4:	00004206 	br	200bed0 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 200bdc8:	8080030b 	ldhu	r2,12(r16)
 200bdcc:	10bfffcc 	andi	r2,r2,65535
 200bdd0:	1080010c 	andi	r2,r2,4
 200bdd4:	10001126 	beq	r2,zero,200be1c <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200bdd8:	80800c17 	ldw	r2,48(r16)
 200bddc:	10000826 	beq	r2,zero,200be00 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 200bde0:	80c00c17 	ldw	r3,48(r16)
 200bde4:	80801004 	addi	r2,r16,64
 200bde8:	18800426 	beq	r3,r2,200bdfc <__swsetup_r+0xb4>
 200bdec:	80800c17 	ldw	r2,48(r16)
 200bdf0:	100b883a 	mov	r5,r2
 200bdf4:	e13ffe17 	ldw	r4,-8(fp)
 200bdf8:	200e7b80 	call	200e7b8 <_free_r>
 200bdfc:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 200be00:	80c0030b 	ldhu	r3,12(r16)
 200be04:	00bff6c4 	movi	r2,-37
 200be08:	1884703a 	and	r2,r3,r2
 200be0c:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 200be10:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 200be14:	80800417 	ldw	r2,16(r16)
 200be18:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 200be1c:	8080030b 	ldhu	r2,12(r16)
 200be20:	10800214 	ori	r2,r2,8
 200be24:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 200be28:	80800417 	ldw	r2,16(r16)
 200be2c:	10000b1e 	bne	r2,zero,200be5c <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 200be30:	8080030b 	ldhu	r2,12(r16)
 200be34:	10bfffcc 	andi	r2,r2,65535
 200be38:	1080800c 	andi	r2,r2,512
 200be3c:	10000426 	beq	r2,zero,200be50 <__swsetup_r+0x108>
 200be40:	8080030b 	ldhu	r2,12(r16)
 200be44:	10bfffcc 	andi	r2,r2,65535
 200be48:	1080200c 	andi	r2,r2,128
 200be4c:	10000326 	beq	r2,zero,200be5c <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200be50:	800b883a 	mov	r5,r16
 200be54:	e13ffe17 	ldw	r4,-8(fp)
 200be58:	200f8180 	call	200f818 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 200be5c:	8080030b 	ldhu	r2,12(r16)
 200be60:	10bfffcc 	andi	r2,r2,65535
 200be64:	1080004c 	andi	r2,r2,1
 200be68:	10000526 	beq	r2,zero,200be80 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 200be6c:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200be70:	80800517 	ldw	r2,20(r16)
 200be74:	0085c83a 	sub	r2,zero,r2
 200be78:	80800615 	stw	r2,24(r16)
 200be7c:	00000806 	br	200bea0 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200be80:	8080030b 	ldhu	r2,12(r16)
 200be84:	10bfffcc 	andi	r2,r2,65535
 200be88:	1080008c 	andi	r2,r2,2
 200be8c:	1000021e 	bne	r2,zero,200be98 <__swsetup_r+0x150>
 200be90:	80800517 	ldw	r2,20(r16)
 200be94:	00000106 	br	200be9c <__swsetup_r+0x154>
 200be98:	0005883a 	mov	r2,zero
 200be9c:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200bea0:	80800417 	ldw	r2,16(r16)
 200bea4:	1000091e 	bne	r2,zero,200becc <__swsetup_r+0x184>
 200bea8:	8080030b 	ldhu	r2,12(r16)
 200beac:	10bfffcc 	andi	r2,r2,65535
 200beb0:	1080200c 	andi	r2,r2,128
 200beb4:	10000526 	beq	r2,zero,200becc <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 200beb8:	8080030b 	ldhu	r2,12(r16)
 200bebc:	10801014 	ori	r2,r2,64
 200bec0:	8080030d 	sth	r2,12(r16)
      return EOF;
 200bec4:	00bfffc4 	movi	r2,-1
 200bec8:	00000106 	br	200bed0 <__swsetup_r+0x188>
    }
  return 0;
 200becc:	0005883a 	mov	r2,zero
}
 200bed0:	e6ffff04 	addi	sp,fp,-4
 200bed4:	dfc00217 	ldw	ra,8(sp)
 200bed8:	df000117 	ldw	fp,4(sp)
 200bedc:	dc000017 	ldw	r16,0(sp)
 200bee0:	dec00304 	addi	sp,sp,12
 200bee4:	f800283a 	ret

0200bee8 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200bee8:	deffef04 	addi	sp,sp,-68
 200beec:	dfc01015 	stw	ra,64(sp)
 200bef0:	df000f15 	stw	fp,60(sp)
 200bef4:	df000f04 	addi	fp,sp,60
 200bef8:	e13ffe15 	stw	r4,-8(fp)
 200befc:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 200bf00:	e0bfff17 	ldw	r2,-4(fp)
 200bf04:	10800417 	ldw	r2,16(r2)
 200bf08:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 200bf0c:	e0bffe17 	ldw	r2,-8(fp)
 200bf10:	10c00417 	ldw	r3,16(r2)
 200bf14:	e0bff117 	ldw	r2,-60(fp)
 200bf18:	1880020e 	bge	r3,r2,200bf24 <quorem+0x3c>
    return 0;
 200bf1c:	0005883a 	mov	r2,zero
 200bf20:	0000d906 	br	200c288 <quorem+0x3a0>
  sx = S->_x;
 200bf24:	e0bfff17 	ldw	r2,-4(fp)
 200bf28:	10800504 	addi	r2,r2,20
 200bf2c:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 200bf30:	e0bff117 	ldw	r2,-60(fp)
 200bf34:	10bfffc4 	addi	r2,r2,-1
 200bf38:	e0bff115 	stw	r2,-60(fp)
 200bf3c:	e0bff117 	ldw	r2,-60(fp)
 200bf40:	1085883a 	add	r2,r2,r2
 200bf44:	1085883a 	add	r2,r2,r2
 200bf48:	1007883a 	mov	r3,r2
 200bf4c:	e0bff717 	ldw	r2,-36(fp)
 200bf50:	10c5883a 	add	r2,r2,r3
 200bf54:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 200bf58:	e0bffe17 	ldw	r2,-8(fp)
 200bf5c:	10800504 	addi	r2,r2,20
 200bf60:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 200bf64:	e0bff117 	ldw	r2,-60(fp)
 200bf68:	1085883a 	add	r2,r2,r2
 200bf6c:	1085883a 	add	r2,r2,r2
 200bf70:	1007883a 	mov	r3,r2
 200bf74:	e0bff517 	ldw	r2,-44(fp)
 200bf78:	10c5883a 	add	r2,r2,r3
 200bf7c:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 200bf80:	e0bff617 	ldw	r2,-40(fp)
 200bf84:	10c00017 	ldw	r3,0(r2)
 200bf88:	e0bff817 	ldw	r2,-32(fp)
 200bf8c:	10800017 	ldw	r2,0(r2)
 200bf90:	10800044 	addi	r2,r2,1
 200bf94:	100b883a 	mov	r5,r2
 200bf98:	1809883a 	mov	r4,r3
 200bf9c:	20069980 	call	2006998 <__udivsi3>
 200bfa0:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 200bfa4:	e0bff417 	ldw	r2,-48(fp)
 200bfa8:	10005326 	beq	r2,zero,200c0f8 <quorem+0x210>
    {
      borrow = 0;
 200bfac:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200bfb0:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200bfb4:	e0bff717 	ldw	r2,-36(fp)
 200bfb8:	10c00104 	addi	r3,r2,4
 200bfbc:	e0fff715 	stw	r3,-36(fp)
 200bfc0:	10800017 	ldw	r2,0(r2)
 200bfc4:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 200bfc8:	e0bff917 	ldw	r2,-28(fp)
 200bfcc:	10ffffcc 	andi	r3,r2,65535
 200bfd0:	e0bff417 	ldw	r2,-48(fp)
 200bfd4:	1887383a 	mul	r3,r3,r2
 200bfd8:	e0bff317 	ldw	r2,-52(fp)
 200bfdc:	1885883a 	add	r2,r3,r2
 200bfe0:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 200bfe4:	e0bff917 	ldw	r2,-28(fp)
 200bfe8:	1006d43a 	srli	r3,r2,16
 200bfec:	e0bff417 	ldw	r2,-48(fp)
 200bff0:	1887383a 	mul	r3,r3,r2
 200bff4:	e0bffa17 	ldw	r2,-24(fp)
 200bff8:	1004d43a 	srli	r2,r2,16
 200bffc:	1885883a 	add	r2,r3,r2
 200c000:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200c004:	e0bffb17 	ldw	r2,-20(fp)
 200c008:	1004d43a 	srli	r2,r2,16
 200c00c:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200c010:	e0bff517 	ldw	r2,-44(fp)
 200c014:	10800017 	ldw	r2,0(r2)
 200c018:	10ffffcc 	andi	r3,r2,65535
 200c01c:	e0bffa17 	ldw	r2,-24(fp)
 200c020:	10bfffcc 	andi	r2,r2,65535
 200c024:	1887c83a 	sub	r3,r3,r2
 200c028:	e0bff217 	ldw	r2,-56(fp)
 200c02c:	1885883a 	add	r2,r3,r2
 200c030:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200c034:	e0bffc17 	ldw	r2,-16(fp)
 200c038:	1005d43a 	srai	r2,r2,16
 200c03c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200c040:	e0bff517 	ldw	r2,-44(fp)
 200c044:	10800017 	ldw	r2,0(r2)
 200c048:	1006d43a 	srli	r3,r2,16
 200c04c:	e0bffb17 	ldw	r2,-20(fp)
 200c050:	10bfffcc 	andi	r2,r2,65535
 200c054:	1887c83a 	sub	r3,r3,r2
 200c058:	e0bff217 	ldw	r2,-56(fp)
 200c05c:	1885883a 	add	r2,r3,r2
 200c060:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200c064:	e0bffd17 	ldw	r2,-12(fp)
 200c068:	1005d43a 	srai	r2,r2,16
 200c06c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200c070:	e0bff517 	ldw	r2,-44(fp)
 200c074:	10c00104 	addi	r3,r2,4
 200c078:	e0fff515 	stw	r3,-44(fp)
 200c07c:	e0fffd17 	ldw	r3,-12(fp)
 200c080:	1808943a 	slli	r4,r3,16
 200c084:	e0fffc17 	ldw	r3,-16(fp)
 200c088:	18ffffcc 	andi	r3,r3,65535
 200c08c:	20c6b03a 	or	r3,r4,r3
 200c090:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200c094:	e0bff717 	ldw	r2,-36(fp)
 200c098:	e0fff817 	ldw	r3,-32(fp)
 200c09c:	18bfc52e 	bgeu	r3,r2,200bfb4 <quorem+0xcc>
      if (!*bxe)
 200c0a0:	e0bff617 	ldw	r2,-40(fp)
 200c0a4:	10800017 	ldw	r2,0(r2)
 200c0a8:	1000131e 	bne	r2,zero,200c0f8 <quorem+0x210>
	{
	  bx = b->_x;
 200c0ac:	e0bffe17 	ldw	r2,-8(fp)
 200c0b0:	10800504 	addi	r2,r2,20
 200c0b4:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 200c0b8:	00000306 	br	200c0c8 <quorem+0x1e0>
	    --n;
 200c0bc:	e0bff117 	ldw	r2,-60(fp)
 200c0c0:	10bfffc4 	addi	r2,r2,-1
 200c0c4:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 200c0c8:	e0bff617 	ldw	r2,-40(fp)
 200c0cc:	10bfff04 	addi	r2,r2,-4
 200c0d0:	e0bff615 	stw	r2,-40(fp)
 200c0d4:	e0bff617 	ldw	r2,-40(fp)
 200c0d8:	e0fff517 	ldw	r3,-44(fp)
 200c0dc:	1880032e 	bgeu	r3,r2,200c0ec <quorem+0x204>
 200c0e0:	e0bff617 	ldw	r2,-40(fp)
 200c0e4:	10800017 	ldw	r2,0(r2)
 200c0e8:	103ff426 	beq	r2,zero,200c0bc <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 200c0ec:	e0bffe17 	ldw	r2,-8(fp)
 200c0f0:	e0fff117 	ldw	r3,-60(fp)
 200c0f4:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 200c0f8:	e17fff17 	ldw	r5,-4(fp)
 200c0fc:	e13ffe17 	ldw	r4,-8(fp)
 200c100:	2011b180 	call	2011b18 <__mcmp>
 200c104:	10005f16 	blt	r2,zero,200c284 <quorem+0x39c>
    {
      q++;
 200c108:	e0bff417 	ldw	r2,-48(fp)
 200c10c:	10800044 	addi	r2,r2,1
 200c110:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 200c114:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200c118:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 200c11c:	e0bffe17 	ldw	r2,-8(fp)
 200c120:	10800504 	addi	r2,r2,20
 200c124:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 200c128:	e0bfff17 	ldw	r2,-4(fp)
 200c12c:	10800504 	addi	r2,r2,20
 200c130:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200c134:	e0bff717 	ldw	r2,-36(fp)
 200c138:	10c00104 	addi	r3,r2,4
 200c13c:	e0fff715 	stw	r3,-36(fp)
 200c140:	10800017 	ldw	r2,0(r2)
 200c144:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 200c148:	e0bff917 	ldw	r2,-28(fp)
 200c14c:	10ffffcc 	andi	r3,r2,65535
 200c150:	e0bff317 	ldw	r2,-52(fp)
 200c154:	1885883a 	add	r2,r3,r2
 200c158:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 200c15c:	e0bff917 	ldw	r2,-28(fp)
 200c160:	1006d43a 	srli	r3,r2,16
 200c164:	e0bffa17 	ldw	r2,-24(fp)
 200c168:	1004d43a 	srli	r2,r2,16
 200c16c:	1885883a 	add	r2,r3,r2
 200c170:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200c174:	e0bffb17 	ldw	r2,-20(fp)
 200c178:	1004d43a 	srli	r2,r2,16
 200c17c:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200c180:	e0bff517 	ldw	r2,-44(fp)
 200c184:	10800017 	ldw	r2,0(r2)
 200c188:	10ffffcc 	andi	r3,r2,65535
 200c18c:	e0bffa17 	ldw	r2,-24(fp)
 200c190:	10bfffcc 	andi	r2,r2,65535
 200c194:	1887c83a 	sub	r3,r3,r2
 200c198:	e0bff217 	ldw	r2,-56(fp)
 200c19c:	1885883a 	add	r2,r3,r2
 200c1a0:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200c1a4:	e0bffc17 	ldw	r2,-16(fp)
 200c1a8:	1005d43a 	srai	r2,r2,16
 200c1ac:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200c1b0:	e0bff517 	ldw	r2,-44(fp)
 200c1b4:	10800017 	ldw	r2,0(r2)
 200c1b8:	1006d43a 	srli	r3,r2,16
 200c1bc:	e0bffb17 	ldw	r2,-20(fp)
 200c1c0:	10bfffcc 	andi	r2,r2,65535
 200c1c4:	1887c83a 	sub	r3,r3,r2
 200c1c8:	e0bff217 	ldw	r2,-56(fp)
 200c1cc:	1885883a 	add	r2,r3,r2
 200c1d0:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200c1d4:	e0bffd17 	ldw	r2,-12(fp)
 200c1d8:	1005d43a 	srai	r2,r2,16
 200c1dc:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200c1e0:	e0bff517 	ldw	r2,-44(fp)
 200c1e4:	10c00104 	addi	r3,r2,4
 200c1e8:	e0fff515 	stw	r3,-44(fp)
 200c1ec:	e0fffd17 	ldw	r3,-12(fp)
 200c1f0:	1808943a 	slli	r4,r3,16
 200c1f4:	e0fffc17 	ldw	r3,-16(fp)
 200c1f8:	18ffffcc 	andi	r3,r3,65535
 200c1fc:	20c6b03a 	or	r3,r4,r3
 200c200:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200c204:	e0bff717 	ldw	r2,-36(fp)
 200c208:	e0fff817 	ldw	r3,-32(fp)
 200c20c:	18bfc92e 	bgeu	r3,r2,200c134 <quorem+0x24c>
      bx = b->_x;
 200c210:	e0bffe17 	ldw	r2,-8(fp)
 200c214:	10800504 	addi	r2,r2,20
 200c218:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 200c21c:	e0bff117 	ldw	r2,-60(fp)
 200c220:	1085883a 	add	r2,r2,r2
 200c224:	1085883a 	add	r2,r2,r2
 200c228:	1007883a 	mov	r3,r2
 200c22c:	e0bff517 	ldw	r2,-44(fp)
 200c230:	10c5883a 	add	r2,r2,r3
 200c234:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 200c238:	e0bff617 	ldw	r2,-40(fp)
 200c23c:	10800017 	ldw	r2,0(r2)
 200c240:	1000101e 	bne	r2,zero,200c284 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 200c244:	00000306 	br	200c254 <quorem+0x36c>
	    --n;
 200c248:	e0bff117 	ldw	r2,-60(fp)
 200c24c:	10bfffc4 	addi	r2,r2,-1
 200c250:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 200c254:	e0bff617 	ldw	r2,-40(fp)
 200c258:	10bfff04 	addi	r2,r2,-4
 200c25c:	e0bff615 	stw	r2,-40(fp)
 200c260:	e0bff617 	ldw	r2,-40(fp)
 200c264:	e0fff517 	ldw	r3,-44(fp)
 200c268:	1880032e 	bgeu	r3,r2,200c278 <quorem+0x390>
 200c26c:	e0bff617 	ldw	r2,-40(fp)
 200c270:	10800017 	ldw	r2,0(r2)
 200c274:	103ff426 	beq	r2,zero,200c248 <quorem+0x360>
	    --n;
	  b->_wds = n;
 200c278:	e0bffe17 	ldw	r2,-8(fp)
 200c27c:	e0fff117 	ldw	r3,-60(fp)
 200c280:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 200c284:	e0bff417 	ldw	r2,-48(fp)
}
 200c288:	e037883a 	mov	sp,fp
 200c28c:	dfc00117 	ldw	ra,4(sp)
 200c290:	df000017 	ldw	fp,0(sp)
 200c294:	dec00204 	addi	sp,sp,8
 200c298:	f800283a 	ret

0200c29c <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 200c29c:	deffcc04 	addi	sp,sp,-208
 200c2a0:	dfc03315 	stw	ra,204(sp)
 200c2a4:	df003215 	stw	fp,200(sp)
 200c2a8:	dcc03115 	stw	r19,196(sp)
 200c2ac:	dc803015 	stw	r18,192(sp)
 200c2b0:	dc402f15 	stw	r17,188(sp)
 200c2b4:	dc002e15 	stw	r16,184(sp)
 200c2b8:	df003204 	addi	fp,sp,200
 200c2bc:	e13ff815 	stw	r4,-32(fp)
 200c2c0:	e17ff915 	stw	r5,-28(fp)
 200c2c4:	e1bffa15 	stw	r6,-24(fp)
 200c2c8:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 200c2cc:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 200c2d0:	e0bff917 	ldw	r2,-28(fp)
 200c2d4:	e0bff215 	stw	r2,-56(fp)
 200c2d8:	e0bffa17 	ldw	r2,-24(fp)
 200c2dc:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 200c2e0:	e0bff817 	ldw	r2,-32(fp)
 200c2e4:	10801017 	ldw	r2,64(r2)
 200c2e8:	10001326 	beq	r2,zero,200c338 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 200c2ec:	e0bff817 	ldw	r2,-32(fp)
 200c2f0:	10801017 	ldw	r2,64(r2)
 200c2f4:	e0fff817 	ldw	r3,-32(fp)
 200c2f8:	18c01117 	ldw	r3,68(r3)
 200c2fc:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 200c300:	e0bff817 	ldw	r2,-32(fp)
 200c304:	10801017 	ldw	r2,64(r2)
 200c308:	e0fff817 	ldw	r3,-32(fp)
 200c30c:	18c01117 	ldw	r3,68(r3)
 200c310:	01000044 	movi	r4,1
 200c314:	20c6983a 	sll	r3,r4,r3
 200c318:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 200c31c:	e0bff817 	ldw	r2,-32(fp)
 200c320:	10801017 	ldw	r2,64(r2)
 200c324:	100b883a 	mov	r5,r2
 200c328:	e13ff817 	ldw	r4,-32(fp)
 200c32c:	2010e680 	call	2010e68 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 200c330:	e0bff817 	ldw	r2,-32(fp)
 200c334:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 200c338:	e0bff317 	ldw	r2,-52(fp)
 200c33c:	1000090e 	bge	r2,zero,200c364 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 200c340:	e0800417 	ldw	r2,16(fp)
 200c344:	00c00044 	movi	r3,1
 200c348:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 200c34c:	e0fff317 	ldw	r3,-52(fp)
 200c350:	00a00034 	movhi	r2,32768
 200c354:	10bfffc4 	addi	r2,r2,-1
 200c358:	1884703a 	and	r2,r3,r2
 200c35c:	e0bff315 	stw	r2,-52(fp)
 200c360:	00000206 	br	200c36c <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 200c364:	e0800417 	ldw	r2,16(fp)
 200c368:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 200c36c:	e0bff317 	ldw	r2,-52(fp)
 200c370:	10dffc2c 	andhi	r3,r2,32752
 200c374:	009ffc34 	movhi	r2,32752
 200c378:	1880221e 	bne	r3,r2,200c404 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 200c37c:	e0800317 	ldw	r2,12(fp)
 200c380:	00c9c3c4 	movi	r3,9999
 200c384:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 200c388:	e0bff217 	ldw	r2,-56(fp)
 200c38c:	1000081e 	bne	r2,zero,200c3b0 <_dtoa_r+0x114>
 200c390:	e0fff317 	ldw	r3,-52(fp)
 200c394:	00800434 	movhi	r2,16
 200c398:	10bfffc4 	addi	r2,r2,-1
 200c39c:	1884703a 	and	r2,r3,r2
 200c3a0:	1000031e 	bne	r2,zero,200c3b0 <_dtoa_r+0x114>
 200c3a4:	008080b4 	movhi	r2,514
 200c3a8:	10898404 	addi	r2,r2,9744
 200c3ac:	00000206 	br	200c3b8 <_dtoa_r+0x11c>
 200c3b0:	008080b4 	movhi	r2,514
 200c3b4:	10898704 	addi	r2,r2,9756
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 200c3b8:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 200c3bc:	e0800517 	ldw	r2,20(fp)
 200c3c0:	10000e26 	beq	r2,zero,200c3fc <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 200c3c4:	e0bfe717 	ldw	r2,-100(fp)
 200c3c8:	108000c4 	addi	r2,r2,3
 200c3cc:	10800003 	ldbu	r2,0(r2)
 200c3d0:	10803fcc 	andi	r2,r2,255
 200c3d4:	1080201c 	xori	r2,r2,128
 200c3d8:	10bfe004 	addi	r2,r2,-128
 200c3dc:	10000326 	beq	r2,zero,200c3ec <_dtoa_r+0x150>
 200c3e0:	e0bfe717 	ldw	r2,-100(fp)
 200c3e4:	10800204 	addi	r2,r2,8
 200c3e8:	00000206 	br	200c3f4 <_dtoa_r+0x158>
 200c3ec:	e0bfe717 	ldw	r2,-100(fp)
 200c3f0:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 200c3f4:	e0c00517 	ldw	r3,20(fp)
 200c3f8:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 200c3fc:	e0bfe717 	ldw	r2,-100(fp)
 200c400:	00067b06 	br	200ddf0 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 200c404:	e0bff217 	ldw	r2,-56(fp)
 200c408:	e0fff317 	ldw	r3,-52(fp)
 200c40c:	000d883a 	mov	r6,zero
 200c410:	000f883a 	mov	r7,zero
 200c414:	1009883a 	mov	r4,r2
 200c418:	180b883a 	mov	r5,r3
 200c41c:	2007be80 	call	2007be8 <__eqdf2>
 200c420:	10000e1e 	bne	r2,zero,200c45c <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 200c424:	e0800317 	ldw	r2,12(fp)
 200c428:	00c00044 	movi	r3,1
 200c42c:	10c00015 	stw	r3,0(r2)
      s = "0";
 200c430:	008080b4 	movhi	r2,514
 200c434:	10898804 	addi	r2,r2,9760
 200c438:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 200c43c:	e0800517 	ldw	r2,20(fp)
 200c440:	10000426 	beq	r2,zero,200c454 <_dtoa_r+0x1b8>
	*rve = s + 1;
 200c444:	e0bfe717 	ldw	r2,-100(fp)
 200c448:	10c00044 	addi	r3,r2,1
 200c44c:	e0800517 	ldw	r2,20(fp)
 200c450:	10c00015 	stw	r3,0(r2)
      return s;
 200c454:	e0bfe717 	ldw	r2,-100(fp)
 200c458:	00066506 	br	200ddf0 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 200c45c:	e0bff217 	ldw	r2,-56(fp)
 200c460:	e0fff317 	ldw	r3,-52(fp)
 200c464:	e17ff104 	addi	r5,fp,-60
 200c468:	e13ff004 	addi	r4,fp,-64
 200c46c:	d9000015 	stw	r4,0(sp)
 200c470:	280f883a 	mov	r7,r5
 200c474:	100b883a 	mov	r5,r2
 200c478:	180d883a 	mov	r6,r3
 200c47c:	e13ff817 	ldw	r4,-32(fp)
 200c480:	20121a00 	call	20121a0 <__d2b>
 200c484:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 200c488:	e0bff317 	ldw	r2,-52(fp)
 200c48c:	1004d53a 	srli	r2,r2,20
 200c490:	1081ffcc 	andi	r2,r2,2047
 200c494:	e0bfd215 	stw	r2,-184(fp)
 200c498:	e0bfd217 	ldw	r2,-184(fp)
 200c49c:	10001126 	beq	r2,zero,200c4e4 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 200c4a0:	e0bff217 	ldw	r2,-56(fp)
 200c4a4:	e0fff317 	ldw	r3,-52(fp)
 200c4a8:	e0bff415 	stw	r2,-48(fp)
 200c4ac:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 200c4b0:	e0fff517 	ldw	r3,-44(fp)
 200c4b4:	00800434 	movhi	r2,16
 200c4b8:	10bfffc4 	addi	r2,r2,-1
 200c4bc:	1884703a 	and	r2,r3,r2
 200c4c0:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 200c4c4:	e0bff517 	ldw	r2,-44(fp)
 200c4c8:	108ffc34 	orhi	r2,r2,16368
 200c4cc:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 200c4d0:	e0bfd217 	ldw	r2,-184(fp)
 200c4d4:	10bf0044 	addi	r2,r2,-1023
 200c4d8:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 200c4dc:	e03fe015 	stw	zero,-128(fp)
 200c4e0:	00002806 	br	200c584 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 200c4e4:	e0fff017 	ldw	r3,-64(fp)
 200c4e8:	e0bff117 	ldw	r2,-60(fp)
 200c4ec:	1885883a 	add	r2,r3,r2
 200c4f0:	10810c84 	addi	r2,r2,1074
 200c4f4:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 200c4f8:	e0bfd217 	ldw	r2,-184(fp)
 200c4fc:	10800850 	cmplti	r2,r2,33
 200c500:	10000b1e 	bne	r2,zero,200c530 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200c504:	e0fff317 	ldw	r3,-52(fp)
 200c508:	01001004 	movi	r4,64
 200c50c:	e0bfd217 	ldw	r2,-184(fp)
 200c510:	2085c83a 	sub	r2,r4,r2
 200c514:	1886983a 	sll	r3,r3,r2
 200c518:	e13ff217 	ldw	r4,-56(fp)
 200c51c:	e0bfd217 	ldw	r2,-184(fp)
 200c520:	10bff804 	addi	r2,r2,-32
 200c524:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 200c528:	1884b03a 	or	r2,r3,r2
 200c52c:	00000506 	br	200c544 <_dtoa_r+0x2a8>
 200c530:	e0fff217 	ldw	r3,-56(fp)
 200c534:	01000804 	movi	r4,32
 200c538:	e0bfd217 	ldw	r2,-184(fp)
 200c53c:	2085c83a 	sub	r2,r4,r2
 200c540:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200c544:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 200c548:	e13fe817 	ldw	r4,-96(fp)
 200c54c:	20165540 	call	2016554 <__floatunsidf>
 200c550:	1009883a 	mov	r4,r2
 200c554:	180b883a 	mov	r5,r3
 200c558:	e13ff415 	stw	r4,-48(fp)
 200c55c:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 200c560:	e0fff517 	ldw	r3,-44(fp)
 200c564:	00bf8434 	movhi	r2,65040
 200c568:	1885883a 	add	r2,r3,r2
 200c56c:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 200c570:	e0bfd217 	ldw	r2,-184(fp)
 200c574:	10bef344 	addi	r2,r2,-1075
 200c578:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 200c57c:	00800044 	movi	r2,1
 200c580:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 200c584:	e0bff417 	ldw	r2,-48(fp)
 200c588:	e0fff517 	ldw	r3,-44(fp)
 200c58c:	000d883a 	mov	r6,zero
 200c590:	01cffe34 	movhi	r7,16376
 200c594:	1009883a 	mov	r4,r2
 200c598:	180b883a 	mov	r5,r3
 200c59c:	20085580 	call	2008558 <__subdf3>
 200c5a0:	1009883a 	mov	r4,r2
 200c5a4:	180b883a 	mov	r5,r3
 200c5a8:	2005883a 	mov	r2,r4
 200c5ac:	2807883a 	mov	r3,r5
 200c5b0:	0198dbf4 	movhi	r6,25455
 200c5b4:	3190d844 	addi	r6,r6,17249
 200c5b8:	01cff4f4 	movhi	r7,16339
 200c5bc:	39e1e9c4 	addi	r7,r7,-30809
 200c5c0:	1009883a 	mov	r4,r2
 200c5c4:	180b883a 	mov	r5,r3
 200c5c8:	2007e400 	call	2007e40 <__muldf3>
 200c5cc:	1009883a 	mov	r4,r2
 200c5d0:	180b883a 	mov	r5,r3
 200c5d4:	2005883a 	mov	r2,r4
 200c5d8:	2807883a 	mov	r3,r5
 200c5dc:	01a2d874 	movhi	r6,35681
 200c5e0:	31b22cc4 	addi	r6,r6,-14157
 200c5e4:	01cff1f4 	movhi	r7,16327
 200c5e8:	39e28a04 	addi	r7,r7,-30168
 200c5ec:	1009883a 	mov	r4,r2
 200c5f0:	180b883a 	mov	r5,r3
 200c5f4:	2006a540 	call	2006a54 <__adddf3>
 200c5f8:	1009883a 	mov	r4,r2
 200c5fc:	180b883a 	mov	r5,r3
 200c600:	2025883a 	mov	r18,r4
 200c604:	2827883a 	mov	r19,r5
 200c608:	e13fd217 	ldw	r4,-184(fp)
 200c60c:	20164780 	call	2016478 <__floatsidf>
 200c610:	1011883a 	mov	r8,r2
 200c614:	1813883a 	mov	r9,r3
 200c618:	019427f4 	movhi	r6,20639
 200c61c:	319e7ec4 	addi	r6,r6,31227
 200c620:	01cff4f4 	movhi	r7,16339
 200c624:	39d104c4 	addi	r7,r7,17427
 200c628:	4009883a 	mov	r4,r8
 200c62c:	480b883a 	mov	r5,r9
 200c630:	2007e400 	call	2007e40 <__muldf3>
 200c634:	1009883a 	mov	r4,r2
 200c638:	180b883a 	mov	r5,r3
 200c63c:	2005883a 	mov	r2,r4
 200c640:	2807883a 	mov	r3,r5
 200c644:	100d883a 	mov	r6,r2
 200c648:	180f883a 	mov	r7,r3
 200c64c:	9009883a 	mov	r4,r18
 200c650:	980b883a 	mov	r5,r19
 200c654:	2006a540 	call	2006a54 <__adddf3>
 200c658:	1009883a 	mov	r4,r2
 200c65c:	180b883a 	mov	r5,r3
 200c660:	e13fe515 	stw	r4,-108(fp)
 200c664:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 200c668:	e13fe517 	ldw	r4,-108(fp)
 200c66c:	e17fe617 	ldw	r5,-104(fp)
 200c670:	20163f80 	call	20163f8 <__fixdfsi>
 200c674:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 200c678:	000d883a 	mov	r6,zero
 200c67c:	000f883a 	mov	r7,zero
 200c680:	e13fe517 	ldw	r4,-108(fp)
 200c684:	e17fe617 	ldw	r5,-104(fp)
 200c688:	2007d4c0 	call	2007d4c <__ledf2>
 200c68c:	10000d0e 	bge	r2,zero,200c6c4 <_dtoa_r+0x428>
 200c690:	e13fd717 	ldw	r4,-164(fp)
 200c694:	20164780 	call	2016478 <__floatsidf>
 200c698:	1011883a 	mov	r8,r2
 200c69c:	1813883a 	mov	r9,r3
 200c6a0:	e1bfe517 	ldw	r6,-108(fp)
 200c6a4:	e1ffe617 	ldw	r7,-104(fp)
 200c6a8:	4009883a 	mov	r4,r8
 200c6ac:	480b883a 	mov	r5,r9
 200c6b0:	2007be80 	call	2007be8 <__eqdf2>
 200c6b4:	10000326 	beq	r2,zero,200c6c4 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 200c6b8:	e0bfd717 	ldw	r2,-164(fp)
 200c6bc:	10bfffc4 	addi	r2,r2,-1
 200c6c0:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 200c6c4:	00800044 	movi	r2,1
 200c6c8:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 200c6cc:	e0bfd717 	ldw	r2,-164(fp)
 200c6d0:	10001616 	blt	r2,zero,200c72c <_dtoa_r+0x490>
 200c6d4:	e0bfd717 	ldw	r2,-164(fp)
 200c6d8:	108005c8 	cmpgei	r2,r2,23
 200c6dc:	1000131e 	bne	r2,zero,200c72c <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 200c6e0:	e0bff217 	ldw	r2,-56(fp)
 200c6e4:	e0fff317 	ldw	r3,-52(fp)
 200c6e8:	010080b4 	movhi	r4,514
 200c6ec:	21098e04 	addi	r4,r4,9784
 200c6f0:	e17fd717 	ldw	r5,-164(fp)
 200c6f4:	280a90fa 	slli	r5,r5,3
 200c6f8:	214d883a 	add	r6,r4,r5
 200c6fc:	31000017 	ldw	r4,0(r6)
 200c700:	31400117 	ldw	r5,4(r6)
 200c704:	200d883a 	mov	r6,r4
 200c708:	280f883a 	mov	r7,r5
 200c70c:	1009883a 	mov	r4,r2
 200c710:	180b883a 	mov	r5,r3
 200c714:	2007d4c0 	call	2007d4c <__ledf2>
 200c718:	1000030e 	bge	r2,zero,200c728 <_dtoa_r+0x48c>
	k--;
 200c71c:	e0bfd717 	ldw	r2,-164(fp)
 200c720:	10bfffc4 	addi	r2,r2,-1
 200c724:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 200c728:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 200c72c:	e0fff017 	ldw	r3,-64(fp)
 200c730:	e0bfd217 	ldw	r2,-184(fp)
 200c734:	1885c83a 	sub	r2,r3,r2
 200c738:	10bfffc4 	addi	r2,r2,-1
 200c73c:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 200c740:	e0bfd617 	ldw	r2,-168(fp)
 200c744:	10000416 	blt	r2,zero,200c758 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 200c748:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 200c74c:	e0bfd617 	ldw	r2,-168(fp)
 200c750:	e0bfdc15 	stw	r2,-144(fp)
 200c754:	00000406 	br	200c768 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 200c758:	e0bfd617 	ldw	r2,-168(fp)
 200c75c:	0085c83a 	sub	r2,zero,r2
 200c760:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 200c764:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 200c768:	e0bfd717 	ldw	r2,-164(fp)
 200c76c:	10000816 	blt	r2,zero,200c790 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 200c770:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 200c774:	e0bfd717 	ldw	r2,-164(fp)
 200c778:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 200c77c:	e0ffdc17 	ldw	r3,-144(fp)
 200c780:	e0bfd717 	ldw	r2,-164(fp)
 200c784:	1885883a 	add	r2,r3,r2
 200c788:	e0bfdc15 	stw	r2,-144(fp)
 200c78c:	00000806 	br	200c7b0 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 200c790:	e0ffcf17 	ldw	r3,-196(fp)
 200c794:	e0bfd717 	ldw	r2,-164(fp)
 200c798:	1885c83a 	sub	r2,r3,r2
 200c79c:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 200c7a0:	e0bfd717 	ldw	r2,-164(fp)
 200c7a4:	0085c83a 	sub	r2,zero,r2
 200c7a8:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 200c7ac:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 200c7b0:	e0bffb17 	ldw	r2,-20(fp)
 200c7b4:	10000316 	blt	r2,zero,200c7c4 <_dtoa_r+0x528>
 200c7b8:	e0bffb17 	ldw	r2,-20(fp)
 200c7bc:	10800290 	cmplti	r2,r2,10
 200c7c0:	1000011e 	bne	r2,zero,200c7c8 <_dtoa_r+0x52c>
    mode = 0;
 200c7c4:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 200c7c8:	00800044 	movi	r2,1
 200c7cc:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 200c7d0:	e0bffb17 	ldw	r2,-20(fp)
 200c7d4:	10800190 	cmplti	r2,r2,6
 200c7d8:	1000041e 	bne	r2,zero,200c7ec <_dtoa_r+0x550>
    {
      mode -= 4;
 200c7dc:	e0bffb17 	ldw	r2,-20(fp)
 200c7e0:	10bfff04 	addi	r2,r2,-4
 200c7e4:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200c7e8:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 200c7ec:	00800044 	movi	r2,1
 200c7f0:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 200c7f4:	00bfffc4 	movi	r2,-1
 200c7f8:	e0bfd515 	stw	r2,-172(fp)
 200c7fc:	e0bfd517 	ldw	r2,-172(fp)
 200c800:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 200c804:	e0bffb17 	ldw	r2,-20(fp)
 200c808:	108001a8 	cmpgeui	r2,r2,6
 200c80c:	10002c1e 	bne	r2,zero,200c8c0 <_dtoa_r+0x624>
 200c810:	e0bffb17 	ldw	r2,-20(fp)
 200c814:	100690ba 	slli	r3,r2,2
 200c818:	00808074 	movhi	r2,513
 200c81c:	10b20b04 	addi	r2,r2,-14292
 200c820:	1885883a 	add	r2,r3,r2
 200c824:	10800017 	ldw	r2,0(r2)
 200c828:	1000683a 	jmp	r2
 200c82c:	0200c844 	movi	r8,801
 200c830:	0200c844 	movi	r8,801
 200c834:	0200c854 	movui	r8,801
 200c838:	0200c884 	movi	r8,802
 200c83c:	0200c858 	cmpnei	r8,zero,801
 200c840:	0200c888 	cmpgei	r8,zero,802
    {
    case 0:
    case 1:
      i = 18;
 200c844:	00800484 	movi	r2,18
 200c848:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 200c84c:	e0000215 	stw	zero,8(fp)
      break;
 200c850:	00001b06 	br	200c8c0 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 200c854:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 200c858:	e0800217 	ldw	r2,8(fp)
 200c85c:	00800216 	blt	zero,r2,200c868 <_dtoa_r+0x5cc>
	ndigits = 1;
 200c860:	00800044 	movi	r2,1
 200c864:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 200c868:	e0800217 	ldw	r2,8(fp)
 200c86c:	e0bfd215 	stw	r2,-184(fp)
 200c870:	e0bfd217 	ldw	r2,-184(fp)
 200c874:	e0bfd515 	stw	r2,-172(fp)
 200c878:	e0bfd517 	ldw	r2,-172(fp)
 200c87c:	e0bfd415 	stw	r2,-176(fp)
      break;
 200c880:	00000f06 	br	200c8c0 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 200c884:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 200c888:	e0c00217 	ldw	r3,8(fp)
 200c88c:	e0bfd717 	ldw	r2,-164(fp)
 200c890:	1885883a 	add	r2,r3,r2
 200c894:	10800044 	addi	r2,r2,1
 200c898:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 200c89c:	e0bfd217 	ldw	r2,-184(fp)
 200c8a0:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 200c8a4:	e0bfd217 	ldw	r2,-184(fp)
 200c8a8:	10bfffc4 	addi	r2,r2,-1
 200c8ac:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200c8b0:	e0bfd217 	ldw	r2,-184(fp)
 200c8b4:	00800216 	blt	zero,r2,200c8c0 <_dtoa_r+0x624>
	i = 1;
 200c8b8:	00800044 	movi	r2,1
 200c8bc:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200c8c0:	00800104 	movi	r2,4
 200c8c4:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200c8c8:	e0bff817 	ldw	r2,-32(fp)
 200c8cc:	10001115 	stw	zero,68(r2)
 200c8d0:	00000806 	br	200c8f4 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 200c8d4:	e0bff817 	ldw	r2,-32(fp)
 200c8d8:	10801117 	ldw	r2,68(r2)
 200c8dc:	10c00044 	addi	r3,r2,1
 200c8e0:	e0bff817 	ldw	r2,-32(fp)
 200c8e4:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200c8e8:	e0bfd617 	ldw	r2,-168(fp)
 200c8ec:	1085883a 	add	r2,r2,r2
 200c8f0:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200c8f4:	e0bfd617 	ldw	r2,-168(fp)
 200c8f8:	10800504 	addi	r2,r2,20
 200c8fc:	e0ffd217 	ldw	r3,-184(fp)
 200c900:	18bff42e 	bgeu	r3,r2,200c8d4 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 200c904:	e0bff817 	ldw	r2,-32(fp)
 200c908:	10801117 	ldw	r2,68(r2)
 200c90c:	100b883a 	mov	r5,r2
 200c910:	e13ff817 	ldw	r4,-32(fp)
 200c914:	2010d380 	call	2010d38 <_Balloc>
 200c918:	1007883a 	mov	r3,r2
 200c91c:	e0bff817 	ldw	r2,-32(fp)
 200c920:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 200c924:	e0bff817 	ldw	r2,-32(fp)
 200c928:	10801017 	ldw	r2,64(r2)
 200c92c:	e0bfe915 	stw	r2,-92(fp)
 200c930:	e0bfe917 	ldw	r2,-92(fp)
 200c934:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 200c938:	e0bfd417 	ldw	r2,-176(fp)
 200c93c:	10021616 	blt	r2,zero,200d198 <_dtoa_r+0xefc>
 200c940:	e0bfd417 	ldw	r2,-176(fp)
 200c944:	108003c8 	cmpgei	r2,r2,15
 200c948:	1002131e 	bne	r2,zero,200d198 <_dtoa_r+0xefc>
 200c94c:	e0bfdf17 	ldw	r2,-132(fp)
 200c950:	10021126 	beq	r2,zero,200d198 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 200c954:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 200c958:	e0bff217 	ldw	r2,-56(fp)
 200c95c:	e0fff317 	ldw	r3,-52(fp)
 200c960:	e0bff415 	stw	r2,-48(fp)
 200c964:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 200c968:	e0bfd717 	ldw	r2,-164(fp)
 200c96c:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200c970:	e0bfd417 	ldw	r2,-176(fp)
 200c974:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 200c978:	00800084 	movi	r2,2
 200c97c:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200c980:	e0bfd717 	ldw	r2,-164(fp)
 200c984:	0080540e 	bge	zero,r2,200cad8 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 200c988:	e0bfd717 	ldw	r2,-164(fp)
 200c98c:	10c003cc 	andi	r3,r2,15
 200c990:	008080b4 	movhi	r2,514
 200c994:	10898e04 	addi	r2,r2,9784
 200c998:	180690fa 	slli	r3,r3,3
 200c99c:	10c5883a 	add	r2,r2,r3
 200c9a0:	10c00017 	ldw	r3,0(r2)
 200c9a4:	e0ffe515 	stw	r3,-108(fp)
 200c9a8:	10800117 	ldw	r2,4(r2)
 200c9ac:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200c9b0:	e0bfd717 	ldw	r2,-164(fp)
 200c9b4:	1005d13a 	srai	r2,r2,4
 200c9b8:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 200c9bc:	e0bfd617 	ldw	r2,-168(fp)
 200c9c0:	1080040c 	andi	r2,r2,16
 200c9c4:	10003426 	beq	r2,zero,200ca98 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 200c9c8:	e0bfd617 	ldw	r2,-168(fp)
 200c9cc:	108003cc 	andi	r2,r2,15
 200c9d0:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 200c9d4:	e0bff217 	ldw	r2,-56(fp)
 200c9d8:	e0fff317 	ldw	r3,-52(fp)
 200c9dc:	018080b4 	movhi	r6,514
 200c9e0:	3189c004 	addi	r6,r6,9984
 200c9e4:	31000817 	ldw	r4,32(r6)
 200c9e8:	31400917 	ldw	r5,36(r6)
 200c9ec:	200d883a 	mov	r6,r4
 200c9f0:	280f883a 	mov	r7,r5
 200c9f4:	1009883a 	mov	r4,r2
 200c9f8:	180b883a 	mov	r5,r3
 200c9fc:	20073000 	call	2007300 <__divdf3>
 200ca00:	1009883a 	mov	r4,r2
 200ca04:	180b883a 	mov	r5,r3
 200ca08:	2005883a 	mov	r2,r4
 200ca0c:	2807883a 	mov	r3,r5
 200ca10:	e0bff215 	stw	r2,-56(fp)
 200ca14:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200ca18:	e0bfd317 	ldw	r2,-180(fp)
 200ca1c:	10800044 	addi	r2,r2,1
 200ca20:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 200ca24:	00001c06 	br	200ca98 <_dtoa_r+0x7fc>
	    if (j & 1)
 200ca28:	e0bfd617 	ldw	r2,-168(fp)
 200ca2c:	1080004c 	andi	r2,r2,1
 200ca30:	10001326 	beq	r2,zero,200ca80 <_dtoa_r+0x7e4>
	      {
		ieps++;
 200ca34:	e0bfd317 	ldw	r2,-180(fp)
 200ca38:	10800044 	addi	r2,r2,1
 200ca3c:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 200ca40:	008080b4 	movhi	r2,514
 200ca44:	1089c004 	addi	r2,r2,9984
 200ca48:	e0ffd217 	ldw	r3,-184(fp)
 200ca4c:	180690fa 	slli	r3,r3,3
 200ca50:	10c9883a 	add	r4,r2,r3
 200ca54:	20800017 	ldw	r2,0(r4)
 200ca58:	20c00117 	ldw	r3,4(r4)
 200ca5c:	100d883a 	mov	r6,r2
 200ca60:	180f883a 	mov	r7,r3
 200ca64:	e13fe517 	ldw	r4,-108(fp)
 200ca68:	e17fe617 	ldw	r5,-104(fp)
 200ca6c:	2007e400 	call	2007e40 <__muldf3>
 200ca70:	1009883a 	mov	r4,r2
 200ca74:	180b883a 	mov	r5,r3
 200ca78:	e13fe515 	stw	r4,-108(fp)
 200ca7c:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200ca80:	e0bfd617 	ldw	r2,-168(fp)
 200ca84:	1005d07a 	srai	r2,r2,1
 200ca88:	e0bfd615 	stw	r2,-168(fp)
 200ca8c:	e0bfd217 	ldw	r2,-184(fp)
 200ca90:	10800044 	addi	r2,r2,1
 200ca94:	e0bfd215 	stw	r2,-184(fp)
 200ca98:	e0bfd617 	ldw	r2,-168(fp)
 200ca9c:	103fe21e 	bne	r2,zero,200ca28 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200caa0:	e0bff217 	ldw	r2,-56(fp)
 200caa4:	e0fff317 	ldw	r3,-52(fp)
 200caa8:	e1bfe517 	ldw	r6,-108(fp)
 200caac:	e1ffe617 	ldw	r7,-104(fp)
 200cab0:	1009883a 	mov	r4,r2
 200cab4:	180b883a 	mov	r5,r3
 200cab8:	20073000 	call	2007300 <__divdf3>
 200cabc:	1009883a 	mov	r4,r2
 200cac0:	180b883a 	mov	r5,r3
 200cac4:	2005883a 	mov	r2,r4
 200cac8:	2807883a 	mov	r3,r5
 200cacc:	e0bff215 	stw	r2,-56(fp)
 200cad0:	e0fff315 	stw	r3,-52(fp)
 200cad4:	00004006 	br	200cbd8 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200cad8:	e0bfd717 	ldw	r2,-164(fp)
 200cadc:	0085c83a 	sub	r2,zero,r2
 200cae0:	e0bfec15 	stw	r2,-80(fp)
 200cae4:	e0bfec17 	ldw	r2,-80(fp)
 200cae8:	10003b26 	beq	r2,zero,200cbd8 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 200caec:	e0bff217 	ldw	r2,-56(fp)
 200caf0:	e0fff317 	ldw	r3,-52(fp)
 200caf4:	e13fec17 	ldw	r4,-80(fp)
 200caf8:	214003cc 	andi	r5,r4,15
 200cafc:	010080b4 	movhi	r4,514
 200cb00:	21098e04 	addi	r4,r4,9784
 200cb04:	280a90fa 	slli	r5,r5,3
 200cb08:	214d883a 	add	r6,r4,r5
 200cb0c:	31000017 	ldw	r4,0(r6)
 200cb10:	31400117 	ldw	r5,4(r6)
 200cb14:	200d883a 	mov	r6,r4
 200cb18:	280f883a 	mov	r7,r5
 200cb1c:	1009883a 	mov	r4,r2
 200cb20:	180b883a 	mov	r5,r3
 200cb24:	2007e400 	call	2007e40 <__muldf3>
 200cb28:	1009883a 	mov	r4,r2
 200cb2c:	180b883a 	mov	r5,r3
 200cb30:	2005883a 	mov	r2,r4
 200cb34:	2807883a 	mov	r3,r5
 200cb38:	e0bff215 	stw	r2,-56(fp)
 200cb3c:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200cb40:	e0bfec17 	ldw	r2,-80(fp)
 200cb44:	1005d13a 	srai	r2,r2,4
 200cb48:	e0bfd615 	stw	r2,-168(fp)
 200cb4c:	00002006 	br	200cbd0 <_dtoa_r+0x934>
	    if (j & 1)
 200cb50:	e0bfd617 	ldw	r2,-168(fp)
 200cb54:	1080004c 	andi	r2,r2,1
 200cb58:	10001726 	beq	r2,zero,200cbb8 <_dtoa_r+0x91c>
	      {
		ieps++;
 200cb5c:	e0bfd317 	ldw	r2,-180(fp)
 200cb60:	10800044 	addi	r2,r2,1
 200cb64:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 200cb68:	e0bff217 	ldw	r2,-56(fp)
 200cb6c:	e0fff317 	ldw	r3,-52(fp)
 200cb70:	010080b4 	movhi	r4,514
 200cb74:	2109c004 	addi	r4,r4,9984
 200cb78:	e17fd217 	ldw	r5,-184(fp)
 200cb7c:	280a90fa 	slli	r5,r5,3
 200cb80:	214d883a 	add	r6,r4,r5
 200cb84:	31000017 	ldw	r4,0(r6)
 200cb88:	31400117 	ldw	r5,4(r6)
 200cb8c:	200d883a 	mov	r6,r4
 200cb90:	280f883a 	mov	r7,r5
 200cb94:	1009883a 	mov	r4,r2
 200cb98:	180b883a 	mov	r5,r3
 200cb9c:	2007e400 	call	2007e40 <__muldf3>
 200cba0:	1009883a 	mov	r4,r2
 200cba4:	180b883a 	mov	r5,r3
 200cba8:	2005883a 	mov	r2,r4
 200cbac:	2807883a 	mov	r3,r5
 200cbb0:	e0bff215 	stw	r2,-56(fp)
 200cbb4:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200cbb8:	e0bfd617 	ldw	r2,-168(fp)
 200cbbc:	1005d07a 	srai	r2,r2,1
 200cbc0:	e0bfd615 	stw	r2,-168(fp)
 200cbc4:	e0bfd217 	ldw	r2,-184(fp)
 200cbc8:	10800044 	addi	r2,r2,1
 200cbcc:	e0bfd215 	stw	r2,-184(fp)
 200cbd0:	e0bfd617 	ldw	r2,-168(fp)
 200cbd4:	103fde1e 	bne	r2,zero,200cb50 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200cbd8:	e0bfd817 	ldw	r2,-160(fp)
 200cbdc:	10002126 	beq	r2,zero,200cc64 <_dtoa_r+0x9c8>
 200cbe0:	e0bff217 	ldw	r2,-56(fp)
 200cbe4:	e0fff317 	ldw	r3,-52(fp)
 200cbe8:	000d883a 	mov	r6,zero
 200cbec:	01cffc34 	movhi	r7,16368
 200cbf0:	1009883a 	mov	r4,r2
 200cbf4:	180b883a 	mov	r5,r3
 200cbf8:	2007d4c0 	call	2007d4c <__ledf2>
 200cbfc:	1000190e 	bge	r2,zero,200cc64 <_dtoa_r+0x9c8>
 200cc00:	e0bfd417 	ldw	r2,-176(fp)
 200cc04:	0080170e 	bge	zero,r2,200cc64 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200cc08:	e0bfd517 	ldw	r2,-172(fp)
 200cc0c:	0081550e 	bge	zero,r2,200d164 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 200cc10:	e0bfd517 	ldw	r2,-172(fp)
 200cc14:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200cc18:	e0bfd717 	ldw	r2,-164(fp)
 200cc1c:	10bfffc4 	addi	r2,r2,-1
 200cc20:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 200cc24:	e0bff217 	ldw	r2,-56(fp)
 200cc28:	e0fff317 	ldw	r3,-52(fp)
 200cc2c:	000d883a 	mov	r6,zero
 200cc30:	01d00934 	movhi	r7,16420
 200cc34:	1009883a 	mov	r4,r2
 200cc38:	180b883a 	mov	r5,r3
 200cc3c:	2007e400 	call	2007e40 <__muldf3>
 200cc40:	1009883a 	mov	r4,r2
 200cc44:	180b883a 	mov	r5,r3
 200cc48:	2005883a 	mov	r2,r4
 200cc4c:	2807883a 	mov	r3,r5
 200cc50:	e0bff215 	stw	r2,-56(fp)
 200cc54:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 200cc58:	e0bfd317 	ldw	r2,-180(fp)
 200cc5c:	10800044 	addi	r2,r2,1
 200cc60:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 200cc64:	e13fd317 	ldw	r4,-180(fp)
 200cc68:	20164780 	call	2016478 <__floatsidf>
 200cc6c:	1011883a 	mov	r8,r2
 200cc70:	1813883a 	mov	r9,r3
 200cc74:	e0bff217 	ldw	r2,-56(fp)
 200cc78:	e0fff317 	ldw	r3,-52(fp)
 200cc7c:	100d883a 	mov	r6,r2
 200cc80:	180f883a 	mov	r7,r3
 200cc84:	4009883a 	mov	r4,r8
 200cc88:	480b883a 	mov	r5,r9
 200cc8c:	2007e400 	call	2007e40 <__muldf3>
 200cc90:	1009883a 	mov	r4,r2
 200cc94:	180b883a 	mov	r5,r3
 200cc98:	2005883a 	mov	r2,r4
 200cc9c:	2807883a 	mov	r3,r5
 200cca0:	000d883a 	mov	r6,zero
 200cca4:	01d00734 	movhi	r7,16412
 200cca8:	1009883a 	mov	r4,r2
 200ccac:	180b883a 	mov	r5,r3
 200ccb0:	2006a540 	call	2006a54 <__adddf3>
 200ccb4:	1009883a 	mov	r4,r2
 200ccb8:	180b883a 	mov	r5,r3
 200ccbc:	2005883a 	mov	r2,r4
 200ccc0:	2807883a 	mov	r3,r5
 200ccc4:	e0bff615 	stw	r2,-40(fp)
 200ccc8:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 200cccc:	e0fff717 	ldw	r3,-36(fp)
 200ccd0:	00bf3034 	movhi	r2,64704
 200ccd4:	1885883a 	add	r2,r3,r2
 200ccd8:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 200ccdc:	e0bfd417 	ldw	r2,-176(fp)
 200cce0:	1000271e 	bne	r2,zero,200cd80 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 200cce4:	e03fe315 	stw	zero,-116(fp)
 200cce8:	e0bfe317 	ldw	r2,-116(fp)
 200ccec:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 200ccf0:	e0bff217 	ldw	r2,-56(fp)
 200ccf4:	e0fff317 	ldw	r3,-52(fp)
 200ccf8:	000d883a 	mov	r6,zero
 200ccfc:	01d00534 	movhi	r7,16404
 200cd00:	1009883a 	mov	r4,r2
 200cd04:	180b883a 	mov	r5,r3
 200cd08:	20085580 	call	2008558 <__subdf3>
 200cd0c:	1009883a 	mov	r4,r2
 200cd10:	180b883a 	mov	r5,r3
 200cd14:	2005883a 	mov	r2,r4
 200cd18:	2807883a 	mov	r3,r5
 200cd1c:	e0bff215 	stw	r2,-56(fp)
 200cd20:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 200cd24:	e0bff217 	ldw	r2,-56(fp)
 200cd28:	e0fff317 	ldw	r3,-52(fp)
 200cd2c:	e13ff617 	ldw	r4,-40(fp)
 200cd30:	e17ff717 	ldw	r5,-36(fp)
 200cd34:	200d883a 	mov	r6,r4
 200cd38:	280f883a 	mov	r7,r5
 200cd3c:	1009883a 	mov	r4,r2
 200cd40:	180b883a 	mov	r5,r3
 200cd44:	2007c700 	call	2007c70 <__gedf2>
 200cd48:	0082eb16 	blt	zero,r2,200d8f8 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 200cd4c:	e23ff217 	ldw	r8,-56(fp)
 200cd50:	e27ff317 	ldw	r9,-52(fp)
 200cd54:	e0bff617 	ldw	r2,-40(fp)
 200cd58:	e0fff717 	ldw	r3,-36(fp)
 200cd5c:	1021883a 	mov	r16,r2
 200cd60:	1c60003c 	xorhi	r17,r3,32768
 200cd64:	800d883a 	mov	r6,r16
 200cd68:	880f883a 	mov	r7,r17
 200cd6c:	4009883a 	mov	r4,r8
 200cd70:	480b883a 	mov	r5,r9
 200cd74:	2007d4c0 	call	2007d4c <__ledf2>
 200cd78:	1002da16 	blt	r2,zero,200d8e4 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 200cd7c:	0000fc06 	br	200d170 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200cd80:	e0bfd917 	ldw	r2,-156(fp)
 200cd84:	10007a26 	beq	r2,zero,200cf70 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 200cd88:	e0bfd417 	ldw	r2,-176(fp)
 200cd8c:	10ffffc4 	addi	r3,r2,-1
 200cd90:	008080b4 	movhi	r2,514
 200cd94:	10898e04 	addi	r2,r2,9784
 200cd98:	180690fa 	slli	r3,r3,3
 200cd9c:	10c9883a 	add	r4,r2,r3
 200cda0:	20800017 	ldw	r2,0(r4)
 200cda4:	20c00117 	ldw	r3,4(r4)
 200cda8:	100d883a 	mov	r6,r2
 200cdac:	180f883a 	mov	r7,r3
 200cdb0:	0009883a 	mov	r4,zero
 200cdb4:	014ff834 	movhi	r5,16352
 200cdb8:	20073000 	call	2007300 <__divdf3>
 200cdbc:	1009883a 	mov	r4,r2
 200cdc0:	180b883a 	mov	r5,r3
 200cdc4:	2011883a 	mov	r8,r4
 200cdc8:	2813883a 	mov	r9,r5
 200cdcc:	e0bff617 	ldw	r2,-40(fp)
 200cdd0:	e0fff717 	ldw	r3,-36(fp)
 200cdd4:	100d883a 	mov	r6,r2
 200cdd8:	180f883a 	mov	r7,r3
 200cddc:	4009883a 	mov	r4,r8
 200cde0:	480b883a 	mov	r5,r9
 200cde4:	20085580 	call	2008558 <__subdf3>
 200cde8:	1009883a 	mov	r4,r2
 200cdec:	180b883a 	mov	r5,r3
 200cdf0:	2005883a 	mov	r2,r4
 200cdf4:	2807883a 	mov	r3,r5
 200cdf8:	e0bff615 	stw	r2,-40(fp)
 200cdfc:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 200ce00:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 200ce04:	e0bff217 	ldw	r2,-56(fp)
 200ce08:	e0fff317 	ldw	r3,-52(fp)
 200ce0c:	1009883a 	mov	r4,r2
 200ce10:	180b883a 	mov	r5,r3
 200ce14:	20163f80 	call	20163f8 <__fixdfsi>
 200ce18:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200ce1c:	e43ff217 	ldw	r16,-56(fp)
 200ce20:	e47ff317 	ldw	r17,-52(fp)
 200ce24:	e13fed17 	ldw	r4,-76(fp)
 200ce28:	20164780 	call	2016478 <__floatsidf>
 200ce2c:	1009883a 	mov	r4,r2
 200ce30:	180b883a 	mov	r5,r3
 200ce34:	200d883a 	mov	r6,r4
 200ce38:	280f883a 	mov	r7,r5
 200ce3c:	8009883a 	mov	r4,r16
 200ce40:	880b883a 	mov	r5,r17
 200ce44:	20085580 	call	2008558 <__subdf3>
 200ce48:	1009883a 	mov	r4,r2
 200ce4c:	180b883a 	mov	r5,r3
 200ce50:	2005883a 	mov	r2,r4
 200ce54:	2807883a 	mov	r3,r5
 200ce58:	e0bff215 	stw	r2,-56(fp)
 200ce5c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200ce60:	e0bfe717 	ldw	r2,-100(fp)
 200ce64:	10c00044 	addi	r3,r2,1
 200ce68:	e0ffe715 	stw	r3,-100(fp)
 200ce6c:	e0ffed17 	ldw	r3,-76(fp)
 200ce70:	18c00c04 	addi	r3,r3,48
 200ce74:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 200ce78:	e0bff217 	ldw	r2,-56(fp)
 200ce7c:	e0fff317 	ldw	r3,-52(fp)
 200ce80:	e13ff617 	ldw	r4,-40(fp)
 200ce84:	e17ff717 	ldw	r5,-36(fp)
 200ce88:	200d883a 	mov	r6,r4
 200ce8c:	280f883a 	mov	r7,r5
 200ce90:	1009883a 	mov	r4,r2
 200ce94:	180b883a 	mov	r5,r3
 200ce98:	2007d4c0 	call	2007d4c <__ledf2>
 200ce9c:	1003c416 	blt	r2,zero,200ddb0 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200cea0:	e0bff217 	ldw	r2,-56(fp)
 200cea4:	e0fff317 	ldw	r3,-52(fp)
 200cea8:	100d883a 	mov	r6,r2
 200ceac:	180f883a 	mov	r7,r3
 200ceb0:	0009883a 	mov	r4,zero
 200ceb4:	014ffc34 	movhi	r5,16368
 200ceb8:	20085580 	call	2008558 <__subdf3>
 200cebc:	1009883a 	mov	r4,r2
 200cec0:	180b883a 	mov	r5,r3
 200cec4:	2011883a 	mov	r8,r4
 200cec8:	2813883a 	mov	r9,r5
 200cecc:	e0bff617 	ldw	r2,-40(fp)
 200ced0:	e0fff717 	ldw	r3,-36(fp)
 200ced4:	100d883a 	mov	r6,r2
 200ced8:	180f883a 	mov	r7,r3
 200cedc:	4009883a 	mov	r4,r8
 200cee0:	480b883a 	mov	r5,r9
 200cee4:	2007d4c0 	call	2007d4c <__ledf2>
 200cee8:	10012916 	blt	r2,zero,200d390 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 200ceec:	e0bfd217 	ldw	r2,-184(fp)
 200cef0:	10800044 	addi	r2,r2,1
 200cef4:	e0bfd215 	stw	r2,-184(fp)
 200cef8:	e0ffd217 	ldw	r3,-184(fp)
 200cefc:	e0bfd417 	ldw	r2,-176(fp)
 200cf00:	18809a0e 	bge	r3,r2,200d16c <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 200cf04:	e0bff617 	ldw	r2,-40(fp)
 200cf08:	e0fff717 	ldw	r3,-36(fp)
 200cf0c:	000d883a 	mov	r6,zero
 200cf10:	01d00934 	movhi	r7,16420
 200cf14:	1009883a 	mov	r4,r2
 200cf18:	180b883a 	mov	r5,r3
 200cf1c:	2007e400 	call	2007e40 <__muldf3>
 200cf20:	1009883a 	mov	r4,r2
 200cf24:	180b883a 	mov	r5,r3
 200cf28:	2005883a 	mov	r2,r4
 200cf2c:	2807883a 	mov	r3,r5
 200cf30:	e0bff615 	stw	r2,-40(fp)
 200cf34:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 200cf38:	e0bff217 	ldw	r2,-56(fp)
 200cf3c:	e0fff317 	ldw	r3,-52(fp)
 200cf40:	000d883a 	mov	r6,zero
 200cf44:	01d00934 	movhi	r7,16420
 200cf48:	1009883a 	mov	r4,r2
 200cf4c:	180b883a 	mov	r5,r3
 200cf50:	2007e400 	call	2007e40 <__muldf3>
 200cf54:	1009883a 	mov	r4,r2
 200cf58:	180b883a 	mov	r5,r3
 200cf5c:	2005883a 	mov	r2,r4
 200cf60:	2807883a 	mov	r3,r5
 200cf64:	e0bff215 	stw	r2,-56(fp)
 200cf68:	e0fff315 	stw	r3,-52(fp)
	    }
 200cf6c:	003fa506 	br	200ce04 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 200cf70:	e0bff617 	ldw	r2,-40(fp)
 200cf74:	e0fff717 	ldw	r3,-36(fp)
 200cf78:	e13fd417 	ldw	r4,-176(fp)
 200cf7c:	217fffc4 	addi	r5,r4,-1
 200cf80:	010080b4 	movhi	r4,514
 200cf84:	21098e04 	addi	r4,r4,9784
 200cf88:	280a90fa 	slli	r5,r5,3
 200cf8c:	214d883a 	add	r6,r4,r5
 200cf90:	31000017 	ldw	r4,0(r6)
 200cf94:	31400117 	ldw	r5,4(r6)
 200cf98:	200d883a 	mov	r6,r4
 200cf9c:	280f883a 	mov	r7,r5
 200cfa0:	1009883a 	mov	r4,r2
 200cfa4:	180b883a 	mov	r5,r3
 200cfa8:	2007e400 	call	2007e40 <__muldf3>
 200cfac:	1009883a 	mov	r4,r2
 200cfb0:	180b883a 	mov	r5,r3
 200cfb4:	2005883a 	mov	r2,r4
 200cfb8:	2807883a 	mov	r3,r5
 200cfbc:	e0bff615 	stw	r2,-40(fp)
 200cfc0:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 200cfc4:	00800044 	movi	r2,1
 200cfc8:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 200cfcc:	e0bff217 	ldw	r2,-56(fp)
 200cfd0:	e0fff317 	ldw	r3,-52(fp)
 200cfd4:	1009883a 	mov	r4,r2
 200cfd8:	180b883a 	mov	r5,r3
 200cfdc:	20163f80 	call	20163f8 <__fixdfsi>
 200cfe0:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200cfe4:	e43ff217 	ldw	r16,-56(fp)
 200cfe8:	e47ff317 	ldw	r17,-52(fp)
 200cfec:	e13fed17 	ldw	r4,-76(fp)
 200cff0:	20164780 	call	2016478 <__floatsidf>
 200cff4:	1009883a 	mov	r4,r2
 200cff8:	180b883a 	mov	r5,r3
 200cffc:	200d883a 	mov	r6,r4
 200d000:	280f883a 	mov	r7,r5
 200d004:	8009883a 	mov	r4,r16
 200d008:	880b883a 	mov	r5,r17
 200d00c:	20085580 	call	2008558 <__subdf3>
 200d010:	1009883a 	mov	r4,r2
 200d014:	180b883a 	mov	r5,r3
 200d018:	2005883a 	mov	r2,r4
 200d01c:	2807883a 	mov	r3,r5
 200d020:	e0bff215 	stw	r2,-56(fp)
 200d024:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200d028:	e0bfe717 	ldw	r2,-100(fp)
 200d02c:	10c00044 	addi	r3,r2,1
 200d030:	e0ffe715 	stw	r3,-100(fp)
 200d034:	e0ffed17 	ldw	r3,-76(fp)
 200d038:	18c00c04 	addi	r3,r3,48
 200d03c:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 200d040:	e0ffd217 	ldw	r3,-184(fp)
 200d044:	e0bfd417 	ldw	r2,-176(fp)
 200d048:	1880351e 	bne	r3,r2,200d120 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 200d04c:	e43ff217 	ldw	r16,-56(fp)
 200d050:	e47ff317 	ldw	r17,-52(fp)
 200d054:	e0bff617 	ldw	r2,-40(fp)
 200d058:	e0fff717 	ldw	r3,-36(fp)
 200d05c:	000d883a 	mov	r6,zero
 200d060:	01cff834 	movhi	r7,16352
 200d064:	1009883a 	mov	r4,r2
 200d068:	180b883a 	mov	r5,r3
 200d06c:	2006a540 	call	2006a54 <__adddf3>
 200d070:	1009883a 	mov	r4,r2
 200d074:	180b883a 	mov	r5,r3
 200d078:	2005883a 	mov	r2,r4
 200d07c:	2807883a 	mov	r3,r5
 200d080:	100d883a 	mov	r6,r2
 200d084:	180f883a 	mov	r7,r3
 200d088:	8009883a 	mov	r4,r16
 200d08c:	880b883a 	mov	r5,r17
 200d090:	2007c700 	call	2007c70 <__gedf2>
 200d094:	0080c016 	blt	zero,r2,200d398 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 200d098:	e43ff217 	ldw	r16,-56(fp)
 200d09c:	e47ff317 	ldw	r17,-52(fp)
 200d0a0:	e0bff617 	ldw	r2,-40(fp)
 200d0a4:	e0fff717 	ldw	r3,-36(fp)
 200d0a8:	100d883a 	mov	r6,r2
 200d0ac:	180f883a 	mov	r7,r3
 200d0b0:	0009883a 	mov	r4,zero
 200d0b4:	014ff834 	movhi	r5,16352
 200d0b8:	20085580 	call	2008558 <__subdf3>
 200d0bc:	1009883a 	mov	r4,r2
 200d0c0:	180b883a 	mov	r5,r3
 200d0c4:	2005883a 	mov	r2,r4
 200d0c8:	2807883a 	mov	r3,r5
 200d0cc:	100d883a 	mov	r6,r2
 200d0d0:	180f883a 	mov	r7,r3
 200d0d4:	8009883a 	mov	r4,r16
 200d0d8:	880b883a 	mov	r5,r17
 200d0dc:	2007d4c0 	call	2007d4c <__ledf2>
 200d0e0:	10000116 	blt	r2,zero,200d0e8 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 200d0e4:	00002206 	br	200d170 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 200d0e8:	e0bfe717 	ldw	r2,-100(fp)
 200d0ec:	10bfffc4 	addi	r2,r2,-1
 200d0f0:	e0bfe715 	stw	r2,-100(fp)
 200d0f4:	e0bfe717 	ldw	r2,-100(fp)
 200d0f8:	10800003 	ldbu	r2,0(r2)
 200d0fc:	10803fcc 	andi	r2,r2,255
 200d100:	1080201c 	xori	r2,r2,128
 200d104:	10bfe004 	addi	r2,r2,-128
 200d108:	10800c20 	cmpeqi	r2,r2,48
 200d10c:	103ff61e 	bne	r2,zero,200d0e8 <_dtoa_r+0xe4c>
		      s++;
 200d110:	e0bfe717 	ldw	r2,-100(fp)
 200d114:	10800044 	addi	r2,r2,1
 200d118:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 200d11c:	00032506 	br	200ddb4 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 200d120:	e0bfd217 	ldw	r2,-184(fp)
 200d124:	10800044 	addi	r2,r2,1
 200d128:	e0bfd215 	stw	r2,-184(fp)
 200d12c:	e0bff217 	ldw	r2,-56(fp)
 200d130:	e0fff317 	ldw	r3,-52(fp)
 200d134:	000d883a 	mov	r6,zero
 200d138:	01d00934 	movhi	r7,16420
 200d13c:	1009883a 	mov	r4,r2
 200d140:	180b883a 	mov	r5,r3
 200d144:	2007e400 	call	2007e40 <__muldf3>
 200d148:	1009883a 	mov	r4,r2
 200d14c:	180b883a 	mov	r5,r3
 200d150:	2005883a 	mov	r2,r4
 200d154:	2807883a 	mov	r3,r5
 200d158:	e0bff215 	stw	r2,-56(fp)
 200d15c:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 200d160:	003f9a06 	br	200cfcc <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 200d164:	0001883a 	nop
 200d168:	00000106 	br	200d170 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 200d16c:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 200d170:	e0bfe917 	ldw	r2,-92(fp)
 200d174:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 200d178:	e0bff417 	ldw	r2,-48(fp)
 200d17c:	e0fff517 	ldw	r3,-44(fp)
 200d180:	e0bff215 	stw	r2,-56(fp)
 200d184:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 200d188:	e0bfea17 	ldw	r2,-88(fp)
 200d18c:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 200d190:	e0bfeb17 	ldw	r2,-84(fp)
 200d194:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 200d198:	e0bff117 	ldw	r2,-60(fp)
 200d19c:	1000b816 	blt	r2,zero,200d480 <_dtoa_r+0x11e4>
 200d1a0:	e0bfd717 	ldw	r2,-164(fp)
 200d1a4:	108003c8 	cmpgei	r2,r2,15
 200d1a8:	1000b51e 	bne	r2,zero,200d480 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 200d1ac:	008080b4 	movhi	r2,514
 200d1b0:	10898e04 	addi	r2,r2,9784
 200d1b4:	e0ffd717 	ldw	r3,-164(fp)
 200d1b8:	180690fa 	slli	r3,r3,3
 200d1bc:	10c5883a 	add	r2,r2,r3
 200d1c0:	10c00017 	ldw	r3,0(r2)
 200d1c4:	e0ffe515 	stw	r3,-108(fp)
 200d1c8:	10800117 	ldw	r2,4(r2)
 200d1cc:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 200d1d0:	e0800217 	ldw	r2,8(fp)
 200d1d4:	1000190e 	bge	r2,zero,200d23c <_dtoa_r+0xfa0>
 200d1d8:	e0bfd417 	ldw	r2,-176(fp)
 200d1dc:	00801716 	blt	zero,r2,200d23c <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 200d1e0:	e03fe315 	stw	zero,-116(fp)
 200d1e4:	e0bfe317 	ldw	r2,-116(fp)
 200d1e8:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 200d1ec:	e0bfd417 	ldw	r2,-176(fp)
 200d1f0:	1001bd16 	blt	r2,zero,200d8e8 <_dtoa_r+0x164c>
 200d1f4:	e43ff217 	ldw	r16,-56(fp)
 200d1f8:	e47ff317 	ldw	r17,-52(fp)
 200d1fc:	000d883a 	mov	r6,zero
 200d200:	01d00534 	movhi	r7,16404
 200d204:	e13fe517 	ldw	r4,-108(fp)
 200d208:	e17fe617 	ldw	r5,-104(fp)
 200d20c:	2007e400 	call	2007e40 <__muldf3>
 200d210:	1009883a 	mov	r4,r2
 200d214:	180b883a 	mov	r5,r3
 200d218:	2005883a 	mov	r2,r4
 200d21c:	2807883a 	mov	r3,r5
 200d220:	100d883a 	mov	r6,r2
 200d224:	180f883a 	mov	r7,r3
 200d228:	8009883a 	mov	r4,r16
 200d22c:	880b883a 	mov	r5,r17
 200d230:	2007d4c0 	call	2007d4c <__ledf2>
 200d234:	0081ac0e 	bge	zero,r2,200d8e8 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 200d238:	0001b006 	br	200d8fc <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 200d23c:	00800044 	movi	r2,1
 200d240:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 200d244:	e0bff217 	ldw	r2,-56(fp)
 200d248:	e0fff317 	ldw	r3,-52(fp)
 200d24c:	e1bfe517 	ldw	r6,-108(fp)
 200d250:	e1ffe617 	ldw	r7,-104(fp)
 200d254:	1009883a 	mov	r4,r2
 200d258:	180b883a 	mov	r5,r3
 200d25c:	20073000 	call	2007300 <__divdf3>
 200d260:	1009883a 	mov	r4,r2
 200d264:	180b883a 	mov	r5,r3
 200d268:	2005883a 	mov	r2,r4
 200d26c:	2807883a 	mov	r3,r5
 200d270:	1009883a 	mov	r4,r2
 200d274:	180b883a 	mov	r5,r3
 200d278:	20163f80 	call	20163f8 <__fixdfsi>
 200d27c:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 200d280:	e43ff217 	ldw	r16,-56(fp)
 200d284:	e47ff317 	ldw	r17,-52(fp)
 200d288:	e13fed17 	ldw	r4,-76(fp)
 200d28c:	20164780 	call	2016478 <__floatsidf>
 200d290:	1011883a 	mov	r8,r2
 200d294:	1813883a 	mov	r9,r3
 200d298:	e1bfe517 	ldw	r6,-108(fp)
 200d29c:	e1ffe617 	ldw	r7,-104(fp)
 200d2a0:	4009883a 	mov	r4,r8
 200d2a4:	480b883a 	mov	r5,r9
 200d2a8:	2007e400 	call	2007e40 <__muldf3>
 200d2ac:	1009883a 	mov	r4,r2
 200d2b0:	180b883a 	mov	r5,r3
 200d2b4:	2005883a 	mov	r2,r4
 200d2b8:	2807883a 	mov	r3,r5
 200d2bc:	100d883a 	mov	r6,r2
 200d2c0:	180f883a 	mov	r7,r3
 200d2c4:	8009883a 	mov	r4,r16
 200d2c8:	880b883a 	mov	r5,r17
 200d2cc:	20085580 	call	2008558 <__subdf3>
 200d2d0:	1009883a 	mov	r4,r2
 200d2d4:	180b883a 	mov	r5,r3
 200d2d8:	2005883a 	mov	r2,r4
 200d2dc:	2807883a 	mov	r3,r5
 200d2e0:	e0bff215 	stw	r2,-56(fp)
 200d2e4:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 200d2e8:	e0bfe717 	ldw	r2,-100(fp)
 200d2ec:	10c00044 	addi	r3,r2,1
 200d2f0:	e0ffe715 	stw	r3,-100(fp)
 200d2f4:	e0ffed17 	ldw	r3,-76(fp)
 200d2f8:	18c00c04 	addi	r3,r3,48
 200d2fc:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200d300:	e0ffd217 	ldw	r3,-184(fp)
 200d304:	e0bfd417 	ldw	r2,-176(fp)
 200d308:	1880401e 	bne	r3,r2,200d40c <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 200d30c:	e0bff217 	ldw	r2,-56(fp)
 200d310:	e0fff317 	ldw	r3,-52(fp)
 200d314:	100d883a 	mov	r6,r2
 200d318:	180f883a 	mov	r7,r3
 200d31c:	1009883a 	mov	r4,r2
 200d320:	180b883a 	mov	r5,r3
 200d324:	2006a540 	call	2006a54 <__adddf3>
 200d328:	1009883a 	mov	r4,r2
 200d32c:	180b883a 	mov	r5,r3
 200d330:	2005883a 	mov	r2,r4
 200d334:	2807883a 	mov	r3,r5
 200d338:	e0bff215 	stw	r2,-56(fp)
 200d33c:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 200d340:	e0bff217 	ldw	r2,-56(fp)
 200d344:	e0fff317 	ldw	r3,-52(fp)
 200d348:	e1bfe517 	ldw	r6,-108(fp)
 200d34c:	e1ffe617 	ldw	r7,-104(fp)
 200d350:	1009883a 	mov	r4,r2
 200d354:	180b883a 	mov	r5,r3
 200d358:	2007c700 	call	2007c70 <__gedf2>
 200d35c:	00801a16 	blt	zero,r2,200d3c8 <_dtoa_r+0x112c>
 200d360:	e0bff217 	ldw	r2,-56(fp)
 200d364:	e0fff317 	ldw	r3,-52(fp)
 200d368:	e1bfe517 	ldw	r6,-108(fp)
 200d36c:	e1ffe617 	ldw	r7,-104(fp)
 200d370:	1009883a 	mov	r4,r2
 200d374:	180b883a 	mov	r5,r3
 200d378:	2007be80 	call	2007be8 <__eqdf2>
 200d37c:	10003c1e 	bne	r2,zero,200d470 <_dtoa_r+0x11d4>
 200d380:	e0bfed17 	ldw	r2,-76(fp)
 200d384:	1080004c 	andi	r2,r2,1
 200d388:	10003926 	beq	r2,zero,200d470 <_dtoa_r+0x11d4>
 200d38c:	00000e06 	br	200d3c8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 200d390:	0001883a 	nop
 200d394:	00000c06 	br	200d3c8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 200d398:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200d39c:	00000a06 	br	200d3c8 <_dtoa_r+0x112c>
		    if (s == s0)
 200d3a0:	e0ffe717 	ldw	r3,-100(fp)
 200d3a4:	e0bfe917 	ldw	r2,-92(fp)
 200d3a8:	1880071e 	bne	r3,r2,200d3c8 <_dtoa_r+0x112c>
		      {
			k++;
 200d3ac:	e0bfd717 	ldw	r2,-164(fp)
 200d3b0:	10800044 	addi	r2,r2,1
 200d3b4:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 200d3b8:	e0bfe717 	ldw	r2,-100(fp)
 200d3bc:	00c00c04 	movi	r3,48
 200d3c0:	10c00005 	stb	r3,0(r2)
			break;
 200d3c4:	00000a06 	br	200d3f0 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200d3c8:	e0bfe717 	ldw	r2,-100(fp)
 200d3cc:	10bfffc4 	addi	r2,r2,-1
 200d3d0:	e0bfe715 	stw	r2,-100(fp)
 200d3d4:	e0bfe717 	ldw	r2,-100(fp)
 200d3d8:	10800003 	ldbu	r2,0(r2)
 200d3dc:	10803fcc 	andi	r2,r2,255
 200d3e0:	1080201c 	xori	r2,r2,128
 200d3e4:	10bfe004 	addi	r2,r2,-128
 200d3e8:	10800e60 	cmpeqi	r2,r2,57
 200d3ec:	103fec1e 	bne	r2,zero,200d3a0 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 200d3f0:	e0bfe717 	ldw	r2,-100(fp)
 200d3f4:	10c00044 	addi	r3,r2,1
 200d3f8:	e0ffe715 	stw	r3,-100(fp)
 200d3fc:	10c00003 	ldbu	r3,0(r2)
 200d400:	18c00044 	addi	r3,r3,1
 200d404:	10c00005 	stb	r3,0(r2)
		}
	      break;
 200d408:	00001906 	br	200d470 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 200d40c:	e0bff217 	ldw	r2,-56(fp)
 200d410:	e0fff317 	ldw	r3,-52(fp)
 200d414:	000d883a 	mov	r6,zero
 200d418:	01d00934 	movhi	r7,16420
 200d41c:	1009883a 	mov	r4,r2
 200d420:	180b883a 	mov	r5,r3
 200d424:	2007e400 	call	2007e40 <__muldf3>
 200d428:	1009883a 	mov	r4,r2
 200d42c:	180b883a 	mov	r5,r3
 200d430:	2005883a 	mov	r2,r4
 200d434:	2807883a 	mov	r3,r5
 200d438:	e0bff215 	stw	r2,-56(fp)
 200d43c:	e0fff315 	stw	r3,-52(fp)
 200d440:	e0bff217 	ldw	r2,-56(fp)
 200d444:	e0fff317 	ldw	r3,-52(fp)
 200d448:	000d883a 	mov	r6,zero
 200d44c:	000f883a 	mov	r7,zero
 200d450:	1009883a 	mov	r4,r2
 200d454:	180b883a 	mov	r5,r3
 200d458:	2007be80 	call	2007be8 <__eqdf2>
 200d45c:	10000626 	beq	r2,zero,200d478 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 200d460:	e0bfd217 	ldw	r2,-184(fp)
 200d464:	10800044 	addi	r2,r2,1
 200d468:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 200d46c:	003f7506 	br	200d244 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 200d470:	0001883a 	nop
 200d474:	00024f06 	br	200ddb4 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 200d478:	0001883a 	nop
	}
      goto ret1;
 200d47c:	00024d06 	br	200ddb4 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 200d480:	e0bfcf17 	ldw	r2,-196(fp)
 200d484:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 200d488:	e0bfd017 	ldw	r2,-192(fp)
 200d48c:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 200d490:	e03fe215 	stw	zero,-120(fp)
 200d494:	e0bfe217 	ldw	r2,-120(fp)
 200d498:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 200d49c:	e0bfd917 	ldw	r2,-156(fp)
 200d4a0:	10003a26 	beq	r2,zero,200d58c <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 200d4a4:	e0bffb17 	ldw	r2,-20(fp)
 200d4a8:	10800088 	cmpgei	r2,r2,2
 200d4ac:	10000a1e 	bne	r2,zero,200d4d8 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200d4b0:	e0bfe017 	ldw	r2,-128(fp)
 200d4b4:	10000326 	beq	r2,zero,200d4c4 <_dtoa_r+0x1228>
 200d4b8:	e0bff117 	ldw	r2,-60(fp)
 200d4bc:	10810cc4 	addi	r2,r2,1075
 200d4c0:	00000306 	br	200d4d0 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 200d4c4:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200d4c8:	00c00d84 	movi	r3,54
 200d4cc:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 200d4d0:	e0bfd215 	stw	r2,-184(fp)
 200d4d4:	00002106 	br	200d55c <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 200d4d8:	e0bfd417 	ldw	r2,-176(fp)
 200d4dc:	10bfffc4 	addi	r2,r2,-1
 200d4e0:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 200d4e4:	e0ffdb17 	ldw	r3,-148(fp)
 200d4e8:	e0bfd617 	ldw	r2,-168(fp)
 200d4ec:	18800516 	blt	r3,r2,200d504 <_dtoa_r+0x1268>
	    m5 -= j;
 200d4f0:	e0ffdb17 	ldw	r3,-148(fp)
 200d4f4:	e0bfd617 	ldw	r2,-168(fp)
 200d4f8:	1885c83a 	sub	r2,r3,r2
 200d4fc:	e0bfdb15 	stw	r2,-148(fp)
 200d500:	00000d06 	br	200d538 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 200d504:	e0ffd617 	ldw	r3,-168(fp)
 200d508:	e0bfdb17 	ldw	r2,-148(fp)
 200d50c:	1885c83a 	sub	r2,r3,r2
 200d510:	e0bfd615 	stw	r2,-168(fp)
 200d514:	e0bfd617 	ldw	r2,-168(fp)
 200d518:	e0ffdd17 	ldw	r3,-140(fp)
 200d51c:	1885883a 	add	r2,r3,r2
 200d520:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 200d524:	e0ffd017 	ldw	r3,-192(fp)
 200d528:	e0bfd617 	ldw	r2,-168(fp)
 200d52c:	1885883a 	add	r2,r3,r2
 200d530:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 200d534:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 200d538:	e0bfd417 	ldw	r2,-176(fp)
 200d53c:	e0bfd215 	stw	r2,-184(fp)
 200d540:	e0bfd217 	ldw	r2,-184(fp)
 200d544:	1000050e 	bge	r2,zero,200d55c <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 200d548:	e0ffda17 	ldw	r3,-152(fp)
 200d54c:	e0bfd217 	ldw	r2,-184(fp)
 200d550:	1885c83a 	sub	r2,r3,r2
 200d554:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 200d558:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 200d55c:	e0ffcf17 	ldw	r3,-196(fp)
 200d560:	e0bfd217 	ldw	r2,-184(fp)
 200d564:	1885883a 	add	r2,r3,r2
 200d568:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 200d56c:	e0ffdc17 	ldw	r3,-144(fp)
 200d570:	e0bfd217 	ldw	r2,-184(fp)
 200d574:	1885883a 	add	r2,r3,r2
 200d578:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 200d57c:	01400044 	movi	r5,1
 200d580:	e13ff817 	ldw	r4,-32(fp)
 200d584:	20113800 	call	2011380 <__i2b>
 200d588:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 200d58c:	e0bfda17 	ldw	r2,-152(fp)
 200d590:	0080130e 	bge	zero,r2,200d5e0 <_dtoa_r+0x1344>
 200d594:	e0bfdc17 	ldw	r2,-144(fp)
 200d598:	0080110e 	bge	zero,r2,200d5e0 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 200d59c:	e0ffda17 	ldw	r3,-152(fp)
 200d5a0:	e0bfdc17 	ldw	r2,-144(fp)
 200d5a4:	1880010e 	bge	r3,r2,200d5ac <_dtoa_r+0x1310>
 200d5a8:	1805883a 	mov	r2,r3
 200d5ac:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 200d5b0:	e0ffcf17 	ldw	r3,-196(fp)
 200d5b4:	e0bfd217 	ldw	r2,-184(fp)
 200d5b8:	1885c83a 	sub	r2,r3,r2
 200d5bc:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 200d5c0:	e0ffda17 	ldw	r3,-152(fp)
 200d5c4:	e0bfd217 	ldw	r2,-184(fp)
 200d5c8:	1885c83a 	sub	r2,r3,r2
 200d5cc:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 200d5d0:	e0ffdc17 	ldw	r3,-144(fp)
 200d5d4:	e0bfd217 	ldw	r2,-184(fp)
 200d5d8:	1885c83a 	sub	r2,r3,r2
 200d5dc:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 200d5e0:	e0bfd017 	ldw	r2,-192(fp)
 200d5e4:	0080240e 	bge	zero,r2,200d678 <_dtoa_r+0x13dc>
    {
      if (leftright)
 200d5e8:	e0bfd917 	ldw	r2,-156(fp)
 200d5ec:	10001d26 	beq	r2,zero,200d664 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 200d5f0:	e0bfdb17 	ldw	r2,-148(fp)
 200d5f4:	00800f0e 	bge	zero,r2,200d634 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 200d5f8:	e1bfdb17 	ldw	r6,-148(fp)
 200d5fc:	e17fe317 	ldw	r5,-116(fp)
 200d600:	e13ff817 	ldw	r4,-32(fp)
 200d604:	20117a80 	call	20117a8 <__pow5mult>
 200d608:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 200d60c:	e1bfe117 	ldw	r6,-124(fp)
 200d610:	e17fe317 	ldw	r5,-116(fp)
 200d614:	e13ff817 	ldw	r4,-32(fp)
 200d618:	20113d80 	call	20113d8 <__multiply>
 200d61c:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 200d620:	e17fe117 	ldw	r5,-124(fp)
 200d624:	e13ff817 	ldw	r4,-32(fp)
 200d628:	2010e680 	call	2010e68 <_Bfree>
	      b = b1;
 200d62c:	e0bfee17 	ldw	r2,-72(fp)
 200d630:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 200d634:	e0ffd017 	ldw	r3,-192(fp)
 200d638:	e0bfdb17 	ldw	r2,-148(fp)
 200d63c:	1885c83a 	sub	r2,r3,r2
 200d640:	e0bfd615 	stw	r2,-168(fp)
 200d644:	e0bfd617 	ldw	r2,-168(fp)
 200d648:	10000b26 	beq	r2,zero,200d678 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 200d64c:	e1bfd617 	ldw	r6,-168(fp)
 200d650:	e17fe117 	ldw	r5,-124(fp)
 200d654:	e13ff817 	ldw	r4,-32(fp)
 200d658:	20117a80 	call	20117a8 <__pow5mult>
 200d65c:	e0bfe115 	stw	r2,-124(fp)
 200d660:	00000506 	br	200d678 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 200d664:	e1bfd017 	ldw	r6,-192(fp)
 200d668:	e17fe117 	ldw	r5,-124(fp)
 200d66c:	e13ff817 	ldw	r4,-32(fp)
 200d670:	20117a80 	call	20117a8 <__pow5mult>
 200d674:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 200d678:	01400044 	movi	r5,1
 200d67c:	e13ff817 	ldw	r4,-32(fp)
 200d680:	20113800 	call	2011380 <__i2b>
 200d684:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 200d688:	e0bfdd17 	ldw	r2,-140(fp)
 200d68c:	0080050e 	bge	zero,r2,200d6a4 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 200d690:	e1bfdd17 	ldw	r6,-140(fp)
 200d694:	e17fe417 	ldw	r5,-112(fp)
 200d698:	e13ff817 	ldw	r4,-32(fp)
 200d69c:	20117a80 	call	20117a8 <__pow5mult>
 200d6a0:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 200d6a4:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 200d6a8:	e0bffb17 	ldw	r2,-20(fp)
 200d6ac:	10800088 	cmpgei	r2,r2,2
 200d6b0:	1000121e 	bne	r2,zero,200d6fc <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 200d6b4:	e0bff217 	ldw	r2,-56(fp)
 200d6b8:	1000101e 	bne	r2,zero,200d6fc <_dtoa_r+0x1460>
 200d6bc:	e0fff317 	ldw	r3,-52(fp)
 200d6c0:	00800434 	movhi	r2,16
 200d6c4:	10bfffc4 	addi	r2,r2,-1
 200d6c8:	1884703a 	and	r2,r3,r2
 200d6cc:	10000b1e 	bne	r2,zero,200d6fc <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 200d6d0:	e0bff317 	ldw	r2,-52(fp)
 200d6d4:	109ffc2c 	andhi	r2,r2,32752
 200d6d8:	10000826 	beq	r2,zero,200d6fc <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 200d6dc:	e0bfcf17 	ldw	r2,-196(fp)
 200d6e0:	10800044 	addi	r2,r2,1
 200d6e4:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200d6e8:	e0bfdc17 	ldw	r2,-144(fp)
 200d6ec:	10800044 	addi	r2,r2,1
 200d6f0:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 200d6f4:	00800044 	movi	r2,1
 200d6f8:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 200d6fc:	e0bfdd17 	ldw	r2,-140(fp)
 200d700:	10000f26 	beq	r2,zero,200d740 <_dtoa_r+0x14a4>
 200d704:	e0bfe417 	ldw	r2,-112(fp)
 200d708:	10800417 	ldw	r2,16(r2)
 200d70c:	10bfffc4 	addi	r2,r2,-1
 200d710:	e0ffe417 	ldw	r3,-112(fp)
 200d714:	10800144 	addi	r2,r2,5
 200d718:	1085883a 	add	r2,r2,r2
 200d71c:	1085883a 	add	r2,r2,r2
 200d720:	1885883a 	add	r2,r3,r2
 200d724:	10800017 	ldw	r2,0(r2)
 200d728:	1009883a 	mov	r4,r2
 200d72c:	20112040 	call	2011204 <__hi0bits>
 200d730:	1007883a 	mov	r3,r2
 200d734:	00800804 	movi	r2,32
 200d738:	10c5c83a 	sub	r2,r2,r3
 200d73c:	00000106 	br	200d744 <_dtoa_r+0x14a8>
 200d740:	00800044 	movi	r2,1
 200d744:	e0ffdc17 	ldw	r3,-144(fp)
 200d748:	10c5883a 	add	r2,r2,r3
 200d74c:	108007cc 	andi	r2,r2,31
 200d750:	e0bfd215 	stw	r2,-184(fp)
 200d754:	e0bfd217 	ldw	r2,-184(fp)
 200d758:	10000426 	beq	r2,zero,200d76c <_dtoa_r+0x14d0>
    i = 32 - i;
 200d75c:	00c00804 	movi	r3,32
 200d760:	e0bfd217 	ldw	r2,-184(fp)
 200d764:	1885c83a 	sub	r2,r3,r2
 200d768:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 200d76c:	e0bfd217 	ldw	r2,-184(fp)
 200d770:	10800150 	cmplti	r2,r2,5
 200d774:	1000101e 	bne	r2,zero,200d7b8 <_dtoa_r+0x151c>
    {
      i -= 4;
 200d778:	e0bfd217 	ldw	r2,-184(fp)
 200d77c:	10bfff04 	addi	r2,r2,-4
 200d780:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200d784:	e0ffcf17 	ldw	r3,-196(fp)
 200d788:	e0bfd217 	ldw	r2,-184(fp)
 200d78c:	1885883a 	add	r2,r3,r2
 200d790:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200d794:	e0ffda17 	ldw	r3,-152(fp)
 200d798:	e0bfd217 	ldw	r2,-184(fp)
 200d79c:	1885883a 	add	r2,r3,r2
 200d7a0:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200d7a4:	e0ffdc17 	ldw	r3,-144(fp)
 200d7a8:	e0bfd217 	ldw	r2,-184(fp)
 200d7ac:	1885883a 	add	r2,r3,r2
 200d7b0:	e0bfdc15 	stw	r2,-144(fp)
 200d7b4:	00001206 	br	200d800 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 200d7b8:	e0bfd217 	ldw	r2,-184(fp)
 200d7bc:	10800108 	cmpgei	r2,r2,4
 200d7c0:	10000f1e 	bne	r2,zero,200d800 <_dtoa_r+0x1564>
    {
      i += 28;
 200d7c4:	e0bfd217 	ldw	r2,-184(fp)
 200d7c8:	10800704 	addi	r2,r2,28
 200d7cc:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200d7d0:	e0ffcf17 	ldw	r3,-196(fp)
 200d7d4:	e0bfd217 	ldw	r2,-184(fp)
 200d7d8:	1885883a 	add	r2,r3,r2
 200d7dc:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200d7e0:	e0ffda17 	ldw	r3,-152(fp)
 200d7e4:	e0bfd217 	ldw	r2,-184(fp)
 200d7e8:	1885883a 	add	r2,r3,r2
 200d7ec:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200d7f0:	e0ffdc17 	ldw	r3,-144(fp)
 200d7f4:	e0bfd217 	ldw	r2,-184(fp)
 200d7f8:	1885883a 	add	r2,r3,r2
 200d7fc:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 200d800:	e0bfcf17 	ldw	r2,-196(fp)
 200d804:	0080050e 	bge	zero,r2,200d81c <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200d808:	e1bfcf17 	ldw	r6,-196(fp)
 200d80c:	e17fe117 	ldw	r5,-124(fp)
 200d810:	e13ff817 	ldw	r4,-32(fp)
 200d814:	20119200 	call	2011920 <__lshift>
 200d818:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 200d81c:	e0bfdc17 	ldw	r2,-144(fp)
 200d820:	0080050e 	bge	zero,r2,200d838 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 200d824:	e1bfdc17 	ldw	r6,-144(fp)
 200d828:	e17fe417 	ldw	r5,-112(fp)
 200d82c:	e13ff817 	ldw	r4,-32(fp)
 200d830:	20119200 	call	2011920 <__lshift>
 200d834:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 200d838:	e0bfd817 	ldw	r2,-160(fp)
 200d83c:	10001726 	beq	r2,zero,200d89c <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 200d840:	e17fe417 	ldw	r5,-112(fp)
 200d844:	e13fe117 	ldw	r4,-124(fp)
 200d848:	2011b180 	call	2011b18 <__mcmp>
 200d84c:	1000130e 	bge	r2,zero,200d89c <_dtoa_r+0x1600>
	{
	  k--;
 200d850:	e0bfd717 	ldw	r2,-164(fp)
 200d854:	10bfffc4 	addi	r2,r2,-1
 200d858:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 200d85c:	000f883a 	mov	r7,zero
 200d860:	01800284 	movi	r6,10
 200d864:	e17fe117 	ldw	r5,-124(fp)
 200d868:	e13ff817 	ldw	r4,-32(fp)
 200d86c:	2010ee40 	call	2010ee4 <__multadd>
 200d870:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 200d874:	e0bfd917 	ldw	r2,-156(fp)
 200d878:	10000626 	beq	r2,zero,200d894 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 200d87c:	000f883a 	mov	r7,zero
 200d880:	01800284 	movi	r6,10
 200d884:	e17fe317 	ldw	r5,-116(fp)
 200d888:	e13ff817 	ldw	r4,-32(fp)
 200d88c:	2010ee40 	call	2010ee4 <__multadd>
 200d890:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 200d894:	e0bfd517 	ldw	r2,-172(fp)
 200d898:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 200d89c:	e0bfd417 	ldw	r2,-176(fp)
 200d8a0:	00801f16 	blt	zero,r2,200d920 <_dtoa_r+0x1684>
 200d8a4:	e0bffb17 	ldw	r2,-20(fp)
 200d8a8:	108000d0 	cmplti	r2,r2,3
 200d8ac:	10001c1e 	bne	r2,zero,200d920 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200d8b0:	e0bfd417 	ldw	r2,-176(fp)
 200d8b4:	10000c16 	blt	r2,zero,200d8e8 <_dtoa_r+0x164c>
 200d8b8:	000f883a 	mov	r7,zero
 200d8bc:	01800144 	movi	r6,5
 200d8c0:	e17fe417 	ldw	r5,-112(fp)
 200d8c4:	e13ff817 	ldw	r4,-32(fp)
 200d8c8:	2010ee40 	call	2010ee4 <__multadd>
 200d8cc:	e0bfe415 	stw	r2,-112(fp)
 200d8d0:	e17fe417 	ldw	r5,-112(fp)
 200d8d4:	e13fe117 	ldw	r4,-124(fp)
 200d8d8:	2011b180 	call	2011b18 <__mcmp>
 200d8dc:	00800716 	blt	zero,r2,200d8fc <_dtoa_r+0x1660>
 200d8e0:	00000106 	br	200d8e8 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 200d8e4:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200d8e8:	e0800217 	ldw	r2,8(fp)
 200d8ec:	0084303a 	nor	r2,zero,r2
 200d8f0:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 200d8f4:	00011d06 	br	200dd6c <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200d8f8:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 200d8fc:	e0bfe717 	ldw	r2,-100(fp)
 200d900:	10c00044 	addi	r3,r2,1
 200d904:	e0ffe715 	stw	r3,-100(fp)
 200d908:	00c00c44 	movi	r3,49
 200d90c:	10c00005 	stb	r3,0(r2)
      k++;
 200d910:	e0bfd717 	ldw	r2,-164(fp)
 200d914:	10800044 	addi	r2,r2,1
 200d918:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 200d91c:	00011306 	br	200dd6c <_dtoa_r+0x1ad0>
    }
  if (leftright)
 200d920:	e0bfd917 	ldw	r2,-156(fp)
 200d924:	1000ba26 	beq	r2,zero,200dc10 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 200d928:	e0bfda17 	ldw	r2,-152(fp)
 200d92c:	0080050e 	bge	zero,r2,200d944 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 200d930:	e1bfda17 	ldw	r6,-152(fp)
 200d934:	e17fe317 	ldw	r5,-116(fp)
 200d938:	e13ff817 	ldw	r4,-32(fp)
 200d93c:	20119200 	call	2011920 <__lshift>
 200d940:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 200d944:	e0bfe317 	ldw	r2,-116(fp)
 200d948:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 200d94c:	e0bfde17 	ldw	r2,-136(fp)
 200d950:	10001826 	beq	r2,zero,200d9b4 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 200d954:	e0bfe317 	ldw	r2,-116(fp)
 200d958:	10800117 	ldw	r2,4(r2)
 200d95c:	100b883a 	mov	r5,r2
 200d960:	e13ff817 	ldw	r4,-32(fp)
 200d964:	2010d380 	call	2010d38 <_Balloc>
 200d968:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 200d96c:	e0bfe317 	ldw	r2,-116(fp)
 200d970:	10c00304 	addi	r3,r2,12
 200d974:	e0bfe217 	ldw	r2,-120(fp)
 200d978:	11000304 	addi	r4,r2,12
 200d97c:	e0bfe217 	ldw	r2,-120(fp)
 200d980:	10800417 	ldw	r2,16(r2)
 200d984:	10800084 	addi	r2,r2,2
 200d988:	1085883a 	add	r2,r2,r2
 200d98c:	1085883a 	add	r2,r2,r2
 200d990:	100d883a 	mov	r6,r2
 200d994:	200b883a 	mov	r5,r4
 200d998:	1809883a 	mov	r4,r3
 200d99c:	20091900 	call	2009190 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200d9a0:	01800044 	movi	r6,1
 200d9a4:	e17fe317 	ldw	r5,-116(fp)
 200d9a8:	e13ff817 	ldw	r4,-32(fp)
 200d9ac:	20119200 	call	2011920 <__lshift>
 200d9b0:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 200d9b4:	00800044 	movi	r2,1
 200d9b8:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 200d9bc:	e17fe417 	ldw	r5,-112(fp)
 200d9c0:	e13fe117 	ldw	r4,-124(fp)
 200d9c4:	200bee80 	call	200bee8 <quorem>
 200d9c8:	10800c04 	addi	r2,r2,48
 200d9cc:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200d9d0:	e17fe217 	ldw	r5,-120(fp)
 200d9d4:	e13fe117 	ldw	r4,-124(fp)
 200d9d8:	2011b180 	call	2011b18 <__mcmp>
 200d9dc:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 200d9e0:	e1bfe317 	ldw	r6,-116(fp)
 200d9e4:	e17fe417 	ldw	r5,-112(fp)
 200d9e8:	e13ff817 	ldw	r4,-32(fp)
 200d9ec:	2011c2c0 	call	2011c2c <__mdiff>
 200d9f0:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 200d9f4:	e0bfef17 	ldw	r2,-68(fp)
 200d9f8:	10800317 	ldw	r2,12(r2)
 200d9fc:	1000041e 	bne	r2,zero,200da10 <_dtoa_r+0x1774>
 200da00:	e17fef17 	ldw	r5,-68(fp)
 200da04:	e13fe117 	ldw	r4,-124(fp)
 200da08:	2011b180 	call	2011b18 <__mcmp>
 200da0c:	00000106 	br	200da14 <_dtoa_r+0x1778>
 200da10:	00800044 	movi	r2,1
 200da14:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200da18:	e17fef17 	ldw	r5,-68(fp)
 200da1c:	e13ff817 	ldw	r4,-32(fp)
 200da20:	2010e680 	call	2010e68 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 200da24:	e0bfec17 	ldw	r2,-80(fp)
 200da28:	1000131e 	bne	r2,zero,200da78 <_dtoa_r+0x17dc>
 200da2c:	e0bffb17 	ldw	r2,-20(fp)
 200da30:	1000111e 	bne	r2,zero,200da78 <_dtoa_r+0x17dc>
 200da34:	e0bff217 	ldw	r2,-56(fp)
 200da38:	1080004c 	andi	r2,r2,1
 200da3c:	10000e1e 	bne	r2,zero,200da78 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 200da40:	e0bfd117 	ldw	r2,-188(fp)
 200da44:	10800e58 	cmpnei	r2,r2,57
 200da48:	10003726 	beq	r2,zero,200db28 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 200da4c:	e0bfd617 	ldw	r2,-168(fp)
 200da50:	0080030e 	bge	zero,r2,200da60 <_dtoa_r+0x17c4>
		dig++;
 200da54:	e0bfd117 	ldw	r2,-188(fp)
 200da58:	10800044 	addi	r2,r2,1
 200da5c:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200da60:	e0bfe717 	ldw	r2,-100(fp)
 200da64:	10c00044 	addi	r3,r2,1
 200da68:	e0ffe715 	stw	r3,-100(fp)
 200da6c:	e0ffd117 	ldw	r3,-188(fp)
 200da70:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200da74:	0000bd06 	br	200dd6c <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 200da78:	e0bfd617 	ldw	r2,-168(fp)
 200da7c:	10000716 	blt	r2,zero,200da9c <_dtoa_r+0x1800>
 200da80:	e0bfd617 	ldw	r2,-168(fp)
 200da84:	1000221e 	bne	r2,zero,200db10 <_dtoa_r+0x1874>
 200da88:	e0bffb17 	ldw	r2,-20(fp)
 200da8c:	1000201e 	bne	r2,zero,200db10 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200da90:	e0bff217 	ldw	r2,-56(fp)
 200da94:	1080004c 	andi	r2,r2,1
 200da98:	10001d1e 	bne	r2,zero,200db10 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 200da9c:	e0bfec17 	ldw	r2,-80(fp)
 200daa0:	0080150e 	bge	zero,r2,200daf8 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 200daa4:	01800044 	movi	r6,1
 200daa8:	e17fe117 	ldw	r5,-124(fp)
 200daac:	e13ff817 	ldw	r4,-32(fp)
 200dab0:	20119200 	call	2011920 <__lshift>
 200dab4:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 200dab8:	e17fe417 	ldw	r5,-112(fp)
 200dabc:	e13fe117 	ldw	r4,-124(fp)
 200dac0:	2011b180 	call	2011b18 <__mcmp>
 200dac4:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 200dac8:	e0bfec17 	ldw	r2,-80(fp)
 200dacc:	00800516 	blt	zero,r2,200dae4 <_dtoa_r+0x1848>
 200dad0:	e0bfec17 	ldw	r2,-80(fp)
 200dad4:	1000081e 	bne	r2,zero,200daf8 <_dtoa_r+0x185c>
 200dad8:	e0bfd117 	ldw	r2,-188(fp)
 200dadc:	1080004c 	andi	r2,r2,1
 200dae0:	10000526 	beq	r2,zero,200daf8 <_dtoa_r+0x185c>
		      && dig++ == '9')
 200dae4:	e0bfd117 	ldw	r2,-188(fp)
 200dae8:	10c00044 	addi	r3,r2,1
 200daec:	e0ffd115 	stw	r3,-188(fp)
 200daf0:	10800e58 	cmpnei	r2,r2,57
 200daf4:	10000e26 	beq	r2,zero,200db30 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200daf8:	e0bfe717 	ldw	r2,-100(fp)
 200dafc:	10c00044 	addi	r3,r2,1
 200db00:	e0ffe715 	stw	r3,-100(fp)
 200db04:	e0ffd117 	ldw	r3,-188(fp)
 200db08:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200db0c:	00009706 	br	200dd6c <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 200db10:	e0bfec17 	ldw	r2,-80(fp)
 200db14:	0080140e 	bge	zero,r2,200db68 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200db18:	e0bfd117 	ldw	r2,-188(fp)
 200db1c:	10800e58 	cmpnei	r2,r2,57
 200db20:	10000a1e 	bne	r2,zero,200db4c <_dtoa_r+0x18b0>
 200db24:	00000306 	br	200db34 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 200db28:	0001883a 	nop
 200db2c:	00000106 	br	200db34 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 200db30:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 200db34:	e0bfe717 	ldw	r2,-100(fp)
 200db38:	10c00044 	addi	r3,r2,1
 200db3c:	e0ffe715 	stw	r3,-100(fp)
 200db40:	00c00e44 	movi	r3,57
 200db44:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 200db48:	00005d06 	br	200dcc0 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 200db4c:	e0bfe717 	ldw	r2,-100(fp)
 200db50:	10c00044 	addi	r3,r2,1
 200db54:	e0ffe715 	stw	r3,-100(fp)
 200db58:	e0ffd117 	ldw	r3,-188(fp)
 200db5c:	18c00044 	addi	r3,r3,1
 200db60:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200db64:	00008106 	br	200dd6c <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 200db68:	e0bfe717 	ldw	r2,-100(fp)
 200db6c:	10c00044 	addi	r3,r2,1
 200db70:	e0ffe715 	stw	r3,-100(fp)
 200db74:	e0ffd117 	ldw	r3,-188(fp)
 200db78:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200db7c:	e0ffd217 	ldw	r3,-184(fp)
 200db80:	e0bfd417 	ldw	r2,-176(fp)
 200db84:	18803b26 	beq	r3,r2,200dc74 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 200db88:	000f883a 	mov	r7,zero
 200db8c:	01800284 	movi	r6,10
 200db90:	e17fe117 	ldw	r5,-124(fp)
 200db94:	e13ff817 	ldw	r4,-32(fp)
 200db98:	2010ee40 	call	2010ee4 <__multadd>
 200db9c:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200dba0:	e0ffe217 	ldw	r3,-120(fp)
 200dba4:	e0bfe317 	ldw	r2,-116(fp)
 200dba8:	1880091e 	bne	r3,r2,200dbd0 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 200dbac:	000f883a 	mov	r7,zero
 200dbb0:	01800284 	movi	r6,10
 200dbb4:	e17fe317 	ldw	r5,-116(fp)
 200dbb8:	e13ff817 	ldw	r4,-32(fp)
 200dbbc:	2010ee40 	call	2010ee4 <__multadd>
 200dbc0:	e0bfe315 	stw	r2,-116(fp)
 200dbc4:	e0bfe317 	ldw	r2,-116(fp)
 200dbc8:	e0bfe215 	stw	r2,-120(fp)
 200dbcc:	00000c06 	br	200dc00 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200dbd0:	000f883a 	mov	r7,zero
 200dbd4:	01800284 	movi	r6,10
 200dbd8:	e17fe217 	ldw	r5,-120(fp)
 200dbdc:	e13ff817 	ldw	r4,-32(fp)
 200dbe0:	2010ee40 	call	2010ee4 <__multadd>
 200dbe4:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200dbe8:	000f883a 	mov	r7,zero
 200dbec:	01800284 	movi	r6,10
 200dbf0:	e17fe317 	ldw	r5,-116(fp)
 200dbf4:	e13ff817 	ldw	r4,-32(fp)
 200dbf8:	2010ee40 	call	2010ee4 <__multadd>
 200dbfc:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 200dc00:	e0bfd217 	ldw	r2,-184(fp)
 200dc04:	10800044 	addi	r2,r2,1
 200dc08:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 200dc0c:	003f6b06 	br	200d9bc <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 200dc10:	00800044 	movi	r2,1
 200dc14:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200dc18:	e43fe717 	ldw	r16,-100(fp)
 200dc1c:	80800044 	addi	r2,r16,1
 200dc20:	e0bfe715 	stw	r2,-100(fp)
 200dc24:	e17fe417 	ldw	r5,-112(fp)
 200dc28:	e13fe117 	ldw	r4,-124(fp)
 200dc2c:	200bee80 	call	200bee8 <quorem>
 200dc30:	10800c04 	addi	r2,r2,48
 200dc34:	e0bfd115 	stw	r2,-188(fp)
 200dc38:	e0bfd117 	ldw	r2,-188(fp)
 200dc3c:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 200dc40:	e0ffd217 	ldw	r3,-184(fp)
 200dc44:	e0bfd417 	ldw	r2,-176(fp)
 200dc48:	18800c0e 	bge	r3,r2,200dc7c <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 200dc4c:	000f883a 	mov	r7,zero
 200dc50:	01800284 	movi	r6,10
 200dc54:	e17fe117 	ldw	r5,-124(fp)
 200dc58:	e13ff817 	ldw	r4,-32(fp)
 200dc5c:	2010ee40 	call	2010ee4 <__multadd>
 200dc60:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 200dc64:	e0bfd217 	ldw	r2,-184(fp)
 200dc68:	10800044 	addi	r2,r2,1
 200dc6c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200dc70:	003fe906 	br	200dc18 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 200dc74:	0001883a 	nop
 200dc78:	00000106 	br	200dc80 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 200dc7c:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200dc80:	01800044 	movi	r6,1
 200dc84:	e17fe117 	ldw	r5,-124(fp)
 200dc88:	e13ff817 	ldw	r4,-32(fp)
 200dc8c:	20119200 	call	2011920 <__lshift>
 200dc90:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 200dc94:	e17fe417 	ldw	r5,-112(fp)
 200dc98:	e13fe117 	ldw	r4,-124(fp)
 200dc9c:	2011b180 	call	2011b18 <__mcmp>
 200dca0:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 200dca4:	e0bfd617 	ldw	r2,-168(fp)
 200dca8:	00801216 	blt	zero,r2,200dcf4 <_dtoa_r+0x1a58>
 200dcac:	e0bfd617 	ldw	r2,-168(fp)
 200dcb0:	1000211e 	bne	r2,zero,200dd38 <_dtoa_r+0x1a9c>
 200dcb4:	e0bfd117 	ldw	r2,-188(fp)
 200dcb8:	1080004c 	andi	r2,r2,1
 200dcbc:	10001e26 	beq	r2,zero,200dd38 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200dcc0:	00000c06 	br	200dcf4 <_dtoa_r+0x1a58>
	if (s == s0)
 200dcc4:	e0ffe717 	ldw	r3,-100(fp)
 200dcc8:	e0bfe917 	ldw	r2,-92(fp)
 200dccc:	1880091e 	bne	r3,r2,200dcf4 <_dtoa_r+0x1a58>
	  {
	    k++;
 200dcd0:	e0bfd717 	ldw	r2,-164(fp)
 200dcd4:	10800044 	addi	r2,r2,1
 200dcd8:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 200dcdc:	e0bfe717 	ldw	r2,-100(fp)
 200dce0:	10c00044 	addi	r3,r2,1
 200dce4:	e0ffe715 	stw	r3,-100(fp)
 200dce8:	00c00c44 	movi	r3,49
 200dcec:	10c00005 	stb	r3,0(r2)
	    goto ret;
 200dcf0:	00001e06 	br	200dd6c <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 200dcf4:	e0bfe717 	ldw	r2,-100(fp)
 200dcf8:	10bfffc4 	addi	r2,r2,-1
 200dcfc:	e0bfe715 	stw	r2,-100(fp)
 200dd00:	e0bfe717 	ldw	r2,-100(fp)
 200dd04:	10800003 	ldbu	r2,0(r2)
 200dd08:	10803fcc 	andi	r2,r2,255
 200dd0c:	1080201c 	xori	r2,r2,128
 200dd10:	10bfe004 	addi	r2,r2,-128
 200dd14:	10800e60 	cmpeqi	r2,r2,57
 200dd18:	103fea1e 	bne	r2,zero,200dcc4 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 200dd1c:	e0bfe717 	ldw	r2,-100(fp)
 200dd20:	10c00044 	addi	r3,r2,1
 200dd24:	e0ffe715 	stw	r3,-100(fp)
 200dd28:	10c00003 	ldbu	r3,0(r2)
 200dd2c:	18c00044 	addi	r3,r3,1
 200dd30:	10c00005 	stb	r3,0(r2)
 200dd34:	00000d06 	br	200dd6c <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 200dd38:	e0bfe717 	ldw	r2,-100(fp)
 200dd3c:	10bfffc4 	addi	r2,r2,-1
 200dd40:	e0bfe715 	stw	r2,-100(fp)
 200dd44:	e0bfe717 	ldw	r2,-100(fp)
 200dd48:	10800003 	ldbu	r2,0(r2)
 200dd4c:	10803fcc 	andi	r2,r2,255
 200dd50:	1080201c 	xori	r2,r2,128
 200dd54:	10bfe004 	addi	r2,r2,-128
 200dd58:	10800c20 	cmpeqi	r2,r2,48
 200dd5c:	103ff61e 	bne	r2,zero,200dd38 <_dtoa_r+0x1a9c>
      s++;
 200dd60:	e0bfe717 	ldw	r2,-100(fp)
 200dd64:	10800044 	addi	r2,r2,1
 200dd68:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 200dd6c:	e17fe417 	ldw	r5,-112(fp)
 200dd70:	e13ff817 	ldw	r4,-32(fp)
 200dd74:	2010e680 	call	2010e68 <_Bfree>
  if (mhi)
 200dd78:	e0bfe317 	ldw	r2,-116(fp)
 200dd7c:	10000d26 	beq	r2,zero,200ddb4 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200dd80:	e0bfe217 	ldw	r2,-120(fp)
 200dd84:	10000626 	beq	r2,zero,200dda0 <_dtoa_r+0x1b04>
 200dd88:	e0ffe217 	ldw	r3,-120(fp)
 200dd8c:	e0bfe317 	ldw	r2,-116(fp)
 200dd90:	18800326 	beq	r3,r2,200dda0 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 200dd94:	e17fe217 	ldw	r5,-120(fp)
 200dd98:	e13ff817 	ldw	r4,-32(fp)
 200dd9c:	2010e680 	call	2010e68 <_Bfree>
      Bfree (ptr, mhi);
 200dda0:	e17fe317 	ldw	r5,-116(fp)
 200dda4:	e13ff817 	ldw	r4,-32(fp)
 200dda8:	2010e680 	call	2010e68 <_Bfree>
 200ddac:	00000106 	br	200ddb4 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200ddb0:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 200ddb4:	e17fe117 	ldw	r5,-124(fp)
 200ddb8:	e13ff817 	ldw	r4,-32(fp)
 200ddbc:	2010e680 	call	2010e68 <_Bfree>
  *s = 0;
 200ddc0:	e0bfe717 	ldw	r2,-100(fp)
 200ddc4:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 200ddc8:	e0bfd717 	ldw	r2,-164(fp)
 200ddcc:	10c00044 	addi	r3,r2,1
 200ddd0:	e0800317 	ldw	r2,12(fp)
 200ddd4:	10c00015 	stw	r3,0(r2)
  if (rve)
 200ddd8:	e0800517 	ldw	r2,20(fp)
 200dddc:	10000326 	beq	r2,zero,200ddec <_dtoa_r+0x1b50>
    *rve = s;
 200dde0:	e0800517 	ldw	r2,20(fp)
 200dde4:	e0ffe717 	ldw	r3,-100(fp)
 200dde8:	10c00015 	stw	r3,0(r2)
  return s0;
 200ddec:	e0bfe917 	ldw	r2,-92(fp)
}
 200ddf0:	e6fffc04 	addi	sp,fp,-16
 200ddf4:	dfc00517 	ldw	ra,20(sp)
 200ddf8:	df000417 	ldw	fp,16(sp)
 200ddfc:	dcc00317 	ldw	r19,12(sp)
 200de00:	dc800217 	ldw	r18,8(sp)
 200de04:	dc400117 	ldw	r17,4(sp)
 200de08:	dc000017 	ldw	r16,0(sp)
 200de0c:	dec00604 	addi	sp,sp,24
 200de10:	f800283a 	ret

0200de14 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200de14:	defff504 	addi	sp,sp,-44
 200de18:	dfc00a15 	stw	ra,40(sp)
 200de1c:	df000915 	stw	fp,36(sp)
 200de20:	dcc00815 	stw	r19,32(sp)
 200de24:	dc800715 	stw	r18,28(sp)
 200de28:	dc400615 	stw	r17,24(sp)
 200de2c:	dc000515 	stw	r16,20(sp)
 200de30:	df000904 	addi	fp,sp,36
 200de34:	e13ffb15 	stw	r4,-20(fp)
 200de38:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 200de3c:	8080030b 	ldhu	r2,12(r16)
 200de40:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 200de44:	e0bff90b 	ldhu	r2,-28(fp)
 200de48:	10bfffcc 	andi	r2,r2,65535
 200de4c:	1080020c 	andi	r2,r2,8
 200de50:	1000831e 	bne	r2,zero,200e060 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 200de54:	8080030b 	ldhu	r2,12(r16)
 200de58:	10820014 	ori	r2,r2,2048
 200de5c:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200de60:	80800117 	ldw	r2,4(r16)
 200de64:	00800216 	blt	zero,r2,200de70 <__sflush_r+0x5c>
 200de68:	80800f17 	ldw	r2,60(r16)
 200de6c:	00807a0e 	bge	zero,r2,200e058 <__sflush_r+0x244>
 200de70:	80800a17 	ldw	r2,40(r16)
 200de74:	10007826 	beq	r2,zero,200e058 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 200de78:	e0bffb17 	ldw	r2,-20(fp)
 200de7c:	10800017 	ldw	r2,0(r2)
 200de80:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 200de84:	e0bffb17 	ldw	r2,-20(fp)
 200de88:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 200de8c:	8080030b 	ldhu	r2,12(r16)
 200de90:	10bfffcc 	andi	r2,r2,65535
 200de94:	1084000c 	andi	r2,r2,4096
 200de98:	10000326 	beq	r2,zero,200dea8 <__sflush_r+0x94>
	    curoff = fp->_offset;
 200de9c:	80801417 	ldw	r2,80(r16)
 200dea0:	e0bff715 	stw	r2,-36(fp)
 200dea4:	00002206 	br	200df30 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 200dea8:	80800a17 	ldw	r2,40(r16)
 200deac:	80c00717 	ldw	r3,28(r16)
 200deb0:	01c00044 	movi	r7,1
 200deb4:	000d883a 	mov	r6,zero
 200deb8:	180b883a 	mov	r5,r3
 200debc:	e13ffb17 	ldw	r4,-20(fp)
 200dec0:	103ee83a 	callr	r2
 200dec4:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 200dec8:	e0bff717 	ldw	r2,-36(fp)
 200decc:	10bfffd8 	cmpnei	r2,r2,-1
 200ded0:	1000171e 	bne	r2,zero,200df30 <__sflush_r+0x11c>
 200ded4:	e0bffb17 	ldw	r2,-20(fp)
 200ded8:	10800017 	ldw	r2,0(r2)
 200dedc:	10001426 	beq	r2,zero,200df30 <__sflush_r+0x11c>
		{
		  int result = EOF;
 200dee0:	00bfffc4 	movi	r2,-1
 200dee4:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200dee8:	e0bffb17 	ldw	r2,-20(fp)
 200deec:	10800017 	ldw	r2,0(r2)
 200def0:	10800760 	cmpeqi	r2,r2,29
 200def4:	1000041e 	bne	r2,zero,200df08 <__sflush_r+0xf4>
 200def8:	e0bffb17 	ldw	r2,-20(fp)
 200defc:	10800017 	ldw	r2,0(r2)
 200df00:	10800598 	cmpnei	r2,r2,22
 200df04:	1000051e 	bne	r2,zero,200df1c <__sflush_r+0x108>
		    {
		      result = 0;
 200df08:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 200df0c:	e0bffb17 	ldw	r2,-20(fp)
 200df10:	e0fffa17 	ldw	r3,-24(fp)
 200df14:	10c00015 	stw	r3,0(r2)
 200df18:	00000306 	br	200df28 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 200df1c:	8080030b 	ldhu	r2,12(r16)
 200df20:	10801014 	ori	r2,r2,64
 200df24:	8080030d 	sth	r2,12(r16)
		  return result;
 200df28:	e0bff817 	ldw	r2,-32(fp)
 200df2c:	00007106 	br	200e0f4 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 200df30:	8080030b 	ldhu	r2,12(r16)
 200df34:	10bfffcc 	andi	r2,r2,65535
 200df38:	1080010c 	andi	r2,r2,4
 200df3c:	10000a26 	beq	r2,zero,200df68 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 200df40:	80800117 	ldw	r2,4(r16)
 200df44:	e0fff717 	ldw	r3,-36(fp)
 200df48:	1885c83a 	sub	r2,r3,r2
 200df4c:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 200df50:	80800c17 	ldw	r2,48(r16)
 200df54:	10000426 	beq	r2,zero,200df68 <__sflush_r+0x154>
                curoff -= fp->_ur;
 200df58:	80800f17 	ldw	r2,60(r16)
 200df5c:	e0fff717 	ldw	r3,-36(fp)
 200df60:	1885c83a 	sub	r2,r3,r2
 200df64:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 200df68:	80800a17 	ldw	r2,40(r16)
 200df6c:	80c00717 	ldw	r3,28(r16)
 200df70:	000f883a 	mov	r7,zero
 200df74:	e1bff717 	ldw	r6,-36(fp)
 200df78:	180b883a 	mov	r5,r3
 200df7c:	e13ffb17 	ldw	r4,-20(fp)
 200df80:	103ee83a 	callr	r2
 200df84:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 200df88:	e0bff717 	ldw	r2,-36(fp)
 200df8c:	10bfffd8 	cmpnei	r2,r2,-1
 200df90:	10000b1e 	bne	r2,zero,200dfc0 <__sflush_r+0x1ac>
 200df94:	e0bffb17 	ldw	r2,-20(fp)
 200df98:	10800017 	ldw	r2,0(r2)
 200df9c:	10000826 	beq	r2,zero,200dfc0 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200dfa0:	e0bffb17 	ldw	r2,-20(fp)
 200dfa4:	10800017 	ldw	r2,0(r2)
 200dfa8:	10800760 	cmpeqi	r2,r2,29
 200dfac:	1000041e 	bne	r2,zero,200dfc0 <__sflush_r+0x1ac>
 200dfb0:	e0bffb17 	ldw	r2,-20(fp)
 200dfb4:	10800017 	ldw	r2,0(r2)
 200dfb8:	10800598 	cmpnei	r2,r2,22
 200dfbc:	1000211e 	bne	r2,zero,200e044 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 200dfc0:	80c0030b 	ldhu	r3,12(r16)
 200dfc4:	00bdffc4 	movi	r2,-2049
 200dfc8:	1884703a 	and	r2,r3,r2
 200dfcc:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 200dfd0:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 200dfd4:	80800417 	ldw	r2,16(r16)
 200dfd8:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 200dfdc:	8080030b 	ldhu	r2,12(r16)
 200dfe0:	10bfffcc 	andi	r2,r2,65535
 200dfe4:	1084000c 	andi	r2,r2,4096
 200dfe8:	10000826 	beq	r2,zero,200e00c <__sflush_r+0x1f8>
 200dfec:	e0bff717 	ldw	r2,-36(fp)
 200dff0:	10bfffd8 	cmpnei	r2,r2,-1
 200dff4:	1000031e 	bne	r2,zero,200e004 <__sflush_r+0x1f0>
 200dff8:	e0bffb17 	ldw	r2,-20(fp)
 200dffc:	10800017 	ldw	r2,0(r2)
 200e000:	1000021e 	bne	r2,zero,200e00c <__sflush_r+0x1f8>
		fp->_offset = curoff;
 200e004:	e0bff717 	ldw	r2,-36(fp)
 200e008:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 200e00c:	e0bffb17 	ldw	r2,-20(fp)
 200e010:	e0fffa17 	ldw	r3,-24(fp)
 200e014:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 200e018:	80800c17 	ldw	r2,48(r16)
 200e01c:	10000e26 	beq	r2,zero,200e058 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 200e020:	80c00c17 	ldw	r3,48(r16)
 200e024:	80801004 	addi	r2,r16,64
 200e028:	18800426 	beq	r3,r2,200e03c <__sflush_r+0x228>
 200e02c:	80800c17 	ldw	r2,48(r16)
 200e030:	100b883a 	mov	r5,r2
 200e034:	e13ffb17 	ldw	r4,-20(fp)
 200e038:	200e7b80 	call	200e7b8 <_free_r>
 200e03c:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 200e040:	00000506 	br	200e058 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 200e044:	8080030b 	ldhu	r2,12(r16)
 200e048:	10801014 	ori	r2,r2,64
 200e04c:	8080030d 	sth	r2,12(r16)
	      return EOF;
 200e050:	00bfffc4 	movi	r2,-1
 200e054:	00002706 	br	200e0f4 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 200e058:	0005883a 	mov	r2,zero
 200e05c:	00002506 	br	200e0f4 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 200e060:	84400417 	ldw	r17,16(r16)
 200e064:	8800021e 	bne	r17,zero,200e070 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 200e068:	0005883a 	mov	r2,zero
 200e06c:	00002106 	br	200e0f4 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 200e070:	80800017 	ldw	r2,0(r16)
 200e074:	1007883a 	mov	r3,r2
 200e078:	8805883a 	mov	r2,r17
 200e07c:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 200e080:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 200e084:	e0bff90b 	ldhu	r2,-28(fp)
 200e088:	10bfffcc 	andi	r2,r2,65535
 200e08c:	108000cc 	andi	r2,r2,3
 200e090:	1000021e 	bne	r2,zero,200e09c <__sflush_r+0x288>
 200e094:	80800517 	ldw	r2,20(r16)
 200e098:	00000106 	br	200e0a0 <__sflush_r+0x28c>
 200e09c:	0005883a 	mov	r2,zero
 200e0a0:	80800215 	stw	r2,8(r16)

  while (n > 0)
 200e0a4:	00001106 	br	200e0ec <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 200e0a8:	80800917 	ldw	r2,36(r16)
 200e0ac:	80c00717 	ldw	r3,28(r16)
 200e0b0:	900f883a 	mov	r7,r18
 200e0b4:	880d883a 	mov	r6,r17
 200e0b8:	180b883a 	mov	r5,r3
 200e0bc:	e13ffb17 	ldw	r4,-20(fp)
 200e0c0:	103ee83a 	callr	r2
 200e0c4:	1027883a 	mov	r19,r2
      if (t <= 0)
 200e0c8:	04c00516 	blt	zero,r19,200e0e0 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 200e0cc:	8080030b 	ldhu	r2,12(r16)
 200e0d0:	10801014 	ori	r2,r2,64
 200e0d4:	8080030d 	sth	r2,12(r16)
          return EOF;
 200e0d8:	00bfffc4 	movi	r2,-1
 200e0dc:	00000506 	br	200e0f4 <__sflush_r+0x2e0>
	}
      p += t;
 200e0e0:	9805883a 	mov	r2,r19
 200e0e4:	88a3883a 	add	r17,r17,r2
      n -= t;
 200e0e8:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 200e0ec:	04bfee16 	blt	zero,r18,200e0a8 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 200e0f0:	0005883a 	mov	r2,zero
}
 200e0f4:	e6fffc04 	addi	sp,fp,-16
 200e0f8:	dfc00517 	ldw	ra,20(sp)
 200e0fc:	df000417 	ldw	fp,16(sp)
 200e100:	dcc00317 	ldw	r19,12(sp)
 200e104:	dc800217 	ldw	r18,8(sp)
 200e108:	dc400117 	ldw	r17,4(sp)
 200e10c:	dc000017 	ldw	r16,0(sp)
 200e110:	dec00604 	addi	sp,sp,24
 200e114:	f800283a 	ret

0200e118 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200e118:	defffa04 	addi	sp,sp,-24
 200e11c:	dfc00515 	stw	ra,20(sp)
 200e120:	df000415 	stw	fp,16(sp)
 200e124:	dc000315 	stw	r16,12(sp)
 200e128:	df000404 	addi	fp,sp,16
 200e12c:	e13ffe15 	stw	r4,-8(fp)
 200e130:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 200e134:	e0bffe17 	ldw	r2,-8(fp)
 200e138:	e0bffc15 	stw	r2,-16(fp)
 200e13c:	e0bffc17 	ldw	r2,-16(fp)
 200e140:	10000526 	beq	r2,zero,200e158 <_fflush_r+0x40>
 200e144:	e0bffc17 	ldw	r2,-16(fp)
 200e148:	10800e17 	ldw	r2,56(r2)
 200e14c:	1000021e 	bne	r2,zero,200e158 <_fflush_r+0x40>
 200e150:	e13ffc17 	ldw	r4,-16(fp)
 200e154:	200e5980 	call	200e598 <__sinit>

  if (!fp->_flags)
 200e158:	8080030b 	ldhu	r2,12(r16)
 200e15c:	10bfffcc 	andi	r2,r2,65535
 200e160:	10a0001c 	xori	r2,r2,32768
 200e164:	10a00004 	addi	r2,r2,-32768
 200e168:	1000021e 	bne	r2,zero,200e174 <_fflush_r+0x5c>
    return 0;
 200e16c:	0005883a 	mov	r2,zero
 200e170:	00000506 	br	200e188 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 200e174:	800b883a 	mov	r5,r16
 200e178:	e13ffe17 	ldw	r4,-8(fp)
 200e17c:	200de140 	call	200de14 <__sflush_r>
 200e180:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 200e184:	e0bffd17 	ldw	r2,-12(fp)
}
 200e188:	e6ffff04 	addi	sp,fp,-4
 200e18c:	dfc00217 	ldw	ra,8(sp)
 200e190:	df000117 	ldw	fp,4(sp)
 200e194:	dc000017 	ldw	r16,0(sp)
 200e198:	dec00304 	addi	sp,sp,12
 200e19c:	f800283a 	ret

0200e1a0 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 200e1a0:	defffe04 	addi	sp,sp,-8
 200e1a4:	dfc00115 	stw	ra,4(sp)
 200e1a8:	df000015 	stw	fp,0(sp)
 200e1ac:	d839883a 	mov	fp,sp
 200e1b0:	2005883a 	mov	r2,r4
  if (fp == NULL)
 200e1b4:	1000061e 	bne	r2,zero,200e1d0 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 200e1b8:	d0a03117 	ldw	r2,-32572(gp)
 200e1bc:	01408074 	movhi	r5,513
 200e1c0:	29784604 	addi	r5,r5,-7912
 200e1c4:	1009883a 	mov	r4,r2
 200e1c8:	200f5980 	call	200f598 <_fwalk_reent>
 200e1cc:	00000406 	br	200e1e0 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 200e1d0:	d0e03017 	ldw	r3,-32576(gp)
 200e1d4:	100b883a 	mov	r5,r2
 200e1d8:	1809883a 	mov	r4,r3
 200e1dc:	200e1180 	call	200e118 <_fflush_r>
}
 200e1e0:	e037883a 	mov	sp,fp
 200e1e4:	dfc00117 	ldw	ra,4(sp)
 200e1e8:	df000017 	ldw	fp,0(sp)
 200e1ec:	dec00204 	addi	sp,sp,8
 200e1f0:	f800283a 	ret

0200e1f4 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 200e1f4:	defffa04 	addi	sp,sp,-24
 200e1f8:	dfc00515 	stw	ra,20(sp)
 200e1fc:	df000415 	stw	fp,16(sp)
 200e200:	df000404 	addi	fp,sp,16
 200e204:	e13ffc15 	stw	r4,-16(fp)
 200e208:	e17ffd15 	stw	r5,-12(fp)
 200e20c:	e1bffe15 	stw	r6,-8(fp)
 200e210:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 200e214:	e0bffc17 	ldw	r2,-16(fp)
 200e218:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 200e21c:	e0bffc17 	ldw	r2,-16(fp)
 200e220:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 200e224:	e0bffc17 	ldw	r2,-16(fp)
 200e228:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 200e22c:	e0bffd17 	ldw	r2,-12(fp)
 200e230:	1007883a 	mov	r3,r2
 200e234:	e0bffc17 	ldw	r2,-16(fp)
 200e238:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 200e23c:	e0bffc17 	ldw	r2,-16(fp)
 200e240:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 200e244:	e0bffe17 	ldw	r2,-8(fp)
 200e248:	1007883a 	mov	r3,r2
 200e24c:	e0bffc17 	ldw	r2,-16(fp)
 200e250:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 200e254:	e0bffc17 	ldw	r2,-16(fp)
 200e258:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 200e25c:	e0bffc17 	ldw	r2,-16(fp)
 200e260:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 200e264:	e0bffc17 	ldw	r2,-16(fp)
 200e268:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 200e26c:	e0bffc17 	ldw	r2,-16(fp)
 200e270:	10801704 	addi	r2,r2,92
 200e274:	01800204 	movi	r6,8
 200e278:	000b883a 	mov	r5,zero
 200e27c:	1009883a 	mov	r4,r2
 200e280:	20093180 	call	2009318 <memset>
  ptr->_cookie = ptr;
 200e284:	e0bffc17 	ldw	r2,-16(fp)
 200e288:	e0fffc17 	ldw	r3,-16(fp)
 200e28c:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 200e290:	e0fffc17 	ldw	r3,-16(fp)
 200e294:	00808074 	movhi	r2,513
 200e298:	108d0004 	addi	r2,r2,13312
 200e29c:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 200e2a0:	e0fffc17 	ldw	r3,-16(fp)
 200e2a4:	00808074 	movhi	r2,513
 200e2a8:	108d3304 	addi	r2,r2,13516
 200e2ac:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 200e2b0:	e0fffc17 	ldw	r3,-16(fp)
 200e2b4:	00808074 	movhi	r2,513
 200e2b8:	108d6004 	addi	r2,r2,13696
 200e2bc:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 200e2c0:	e0fffc17 	ldw	r3,-16(fp)
 200e2c4:	00808074 	movhi	r2,513
 200e2c8:	108d8804 	addi	r2,r2,13856
 200e2cc:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 200e2d0:	0001883a 	nop
 200e2d4:	e037883a 	mov	sp,fp
 200e2d8:	dfc00117 	ldw	ra,4(sp)
 200e2dc:	df000017 	ldw	fp,0(sp)
 200e2e0:	dec00204 	addi	sp,sp,8
 200e2e4:	f800283a 	ret

0200e2e8 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 200e2e8:	defffb04 	addi	sp,sp,-20
 200e2ec:	dfc00415 	stw	ra,16(sp)
 200e2f0:	df000315 	stw	fp,12(sp)
 200e2f4:	dc000215 	stw	r16,8(sp)
 200e2f8:	df000304 	addi	fp,sp,12
 200e2fc:	e13ffe15 	stw	r4,-8(fp)
 200e300:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 200e304:	80bfffc4 	addi	r2,r16,-1
 200e308:	10801a24 	muli	r2,r2,104
 200e30c:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 200e310:	100b883a 	mov	r5,r2
 200e314:	e13ffe17 	ldw	r4,-8(fp)
 200e318:	200fdf80 	call	200fdf8 <_malloc_r>
 200e31c:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 200e320:	e0bffd17 	ldw	r2,-12(fp)
 200e324:	1000021e 	bne	r2,zero,200e330 <__sfmoreglue+0x48>
    return NULL;
 200e328:	0005883a 	mov	r2,zero
 200e32c:	00001106 	br	200e374 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 200e330:	e0bffd17 	ldw	r2,-12(fp)
 200e334:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 200e338:	e0bffd17 	ldw	r2,-12(fp)
 200e33c:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 200e340:	e0bffd17 	ldw	r2,-12(fp)
 200e344:	10c00304 	addi	r3,r2,12
 200e348:	e0bffd17 	ldw	r2,-12(fp)
 200e34c:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 200e350:	e0bffd17 	ldw	r2,-12(fp)
 200e354:	10800304 	addi	r2,r2,12
 200e358:	8007883a 	mov	r3,r16
 200e35c:	18c01a24 	muli	r3,r3,104
 200e360:	180d883a 	mov	r6,r3
 200e364:	000b883a 	mov	r5,zero
 200e368:	1009883a 	mov	r4,r2
 200e36c:	20093180 	call	2009318 <memset>
  return &g->glue;
 200e370:	e0bffd17 	ldw	r2,-12(fp)
}
 200e374:	e6ffff04 	addi	sp,fp,-4
 200e378:	dfc00217 	ldw	ra,8(sp)
 200e37c:	df000117 	ldw	fp,4(sp)
 200e380:	dc000017 	ldw	r16,0(sp)
 200e384:	dec00304 	addi	sp,sp,12
 200e388:	f800283a 	ret

0200e38c <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 200e38c:	defffa04 	addi	sp,sp,-24
 200e390:	dfc00515 	stw	ra,20(sp)
 200e394:	df000415 	stw	fp,16(sp)
 200e398:	df000404 	addi	fp,sp,16
 200e39c:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 200e3a0:	200e6700 	call	200e670 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 200e3a4:	d0a03117 	ldw	r2,-32572(gp)
 200e3a8:	10800e17 	ldw	r2,56(r2)
 200e3ac:	1000031e 	bne	r2,zero,200e3bc <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 200e3b0:	d0a03117 	ldw	r2,-32572(gp)
 200e3b4:	1009883a 	mov	r4,r2
 200e3b8:	200e5980 	call	200e598 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200e3bc:	d0a03117 	ldw	r2,-32572(gp)
 200e3c0:	1080b804 	addi	r2,r2,736
 200e3c4:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200e3c8:	e0bffe17 	ldw	r2,-8(fp)
 200e3cc:	10800217 	ldw	r2,8(r2)
 200e3d0:	e0bffc15 	stw	r2,-16(fp)
 200e3d4:	e0bffe17 	ldw	r2,-8(fp)
 200e3d8:	10800117 	ldw	r2,4(r2)
 200e3dc:	e0bffd15 	stw	r2,-12(fp)
 200e3e0:	00000906 	br	200e408 <__sfp+0x7c>
	if (fp->_flags == 0)
 200e3e4:	e0bffc17 	ldw	r2,-16(fp)
 200e3e8:	1080030b 	ldhu	r2,12(r2)
 200e3ec:	10bfffcc 	andi	r2,r2,65535
 200e3f0:	10a0001c 	xori	r2,r2,32768
 200e3f4:	10a00004 	addi	r2,r2,-32768
 200e3f8:	10001f26 	beq	r2,zero,200e478 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200e3fc:	e0bffc17 	ldw	r2,-16(fp)
 200e400:	10801a04 	addi	r2,r2,104
 200e404:	e0bffc15 	stw	r2,-16(fp)
 200e408:	e0bffd17 	ldw	r2,-12(fp)
 200e40c:	10bfffc4 	addi	r2,r2,-1
 200e410:	e0bffd15 	stw	r2,-12(fp)
 200e414:	e0bffd17 	ldw	r2,-12(fp)
 200e418:	103ff20e 	bge	r2,zero,200e3e4 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200e41c:	e0bffe17 	ldw	r2,-8(fp)
 200e420:	10800017 	ldw	r2,0(r2)
 200e424:	1000091e 	bne	r2,zero,200e44c <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 200e428:	01400104 	movi	r5,4
 200e42c:	e13fff17 	ldw	r4,-4(fp)
 200e430:	200e2e80 	call	200e2e8 <__sfmoreglue>
 200e434:	1007883a 	mov	r3,r2
 200e438:	e0bffe17 	ldw	r2,-8(fp)
 200e43c:	10c00015 	stw	r3,0(r2)
 200e440:	e0bffe17 	ldw	r2,-8(fp)
 200e444:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200e448:	10000426 	beq	r2,zero,200e45c <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200e44c:	e0bffe17 	ldw	r2,-8(fp)
 200e450:	10800017 	ldw	r2,0(r2)
 200e454:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 200e458:	003fdb06 	br	200e3c8 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 200e45c:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 200e460:	200e6900 	call	200e690 <__sfp_lock_release>
  d->_errno = ENOMEM;
 200e464:	e0bfff17 	ldw	r2,-4(fp)
 200e468:	00c00304 	movi	r3,12
 200e46c:	10c00015 	stw	r3,0(r2)
  return NULL;
 200e470:	0005883a 	mov	r2,zero
 200e474:	00002506 	br	200e50c <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 200e478:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 200e47c:	e0bffc17 	ldw	r2,-16(fp)
 200e480:	00ffffc4 	movi	r3,-1
 200e484:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 200e488:	e0bffc17 	ldw	r2,-16(fp)
 200e48c:	00c00044 	movi	r3,1
 200e490:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 200e494:	e0bffc17 	ldw	r2,-16(fp)
 200e498:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 200e49c:	200e6900 	call	200e690 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 200e4a0:	e0bffc17 	ldw	r2,-16(fp)
 200e4a4:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 200e4a8:	e0bffc17 	ldw	r2,-16(fp)
 200e4ac:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 200e4b0:	e0bffc17 	ldw	r2,-16(fp)
 200e4b4:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 200e4b8:	e0bffc17 	ldw	r2,-16(fp)
 200e4bc:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 200e4c0:	e0bffc17 	ldw	r2,-16(fp)
 200e4c4:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 200e4c8:	e0bffc17 	ldw	r2,-16(fp)
 200e4cc:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 200e4d0:	e0bffc17 	ldw	r2,-16(fp)
 200e4d4:	10801704 	addi	r2,r2,92
 200e4d8:	01800204 	movi	r6,8
 200e4dc:	000b883a 	mov	r5,zero
 200e4e0:	1009883a 	mov	r4,r2
 200e4e4:	20093180 	call	2009318 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 200e4e8:	e0bffc17 	ldw	r2,-16(fp)
 200e4ec:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 200e4f0:	e0bffc17 	ldw	r2,-16(fp)
 200e4f4:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 200e4f8:	e0bffc17 	ldw	r2,-16(fp)
 200e4fc:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 200e500:	e0bffc17 	ldw	r2,-16(fp)
 200e504:	10001215 	stw	zero,72(r2)

  return fp;
 200e508:	e0bffc17 	ldw	r2,-16(fp)
}
 200e50c:	e037883a 	mov	sp,fp
 200e510:	dfc00117 	ldw	ra,4(sp)
 200e514:	df000017 	ldw	fp,0(sp)
 200e518:	dec00204 	addi	sp,sp,8
 200e51c:	f800283a 	ret

0200e520 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 200e520:	defffc04 	addi	sp,sp,-16
 200e524:	dfc00315 	stw	ra,12(sp)
 200e528:	df000215 	stw	fp,8(sp)
 200e52c:	df000204 	addi	fp,sp,8
 200e530:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 200e534:	00808074 	movhi	r2,513
 200e538:	1093ca04 	addi	r2,r2,20264
 200e53c:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 200e540:	e17ffe17 	ldw	r5,-8(fp)
 200e544:	e13fff17 	ldw	r4,-4(fp)
 200e548:	200f5980 	call	200f598 <_fwalk_reent>
}
 200e54c:	0001883a 	nop
 200e550:	e037883a 	mov	sp,fp
 200e554:	dfc00117 	ldw	ra,4(sp)
 200e558:	df000017 	ldw	fp,0(sp)
 200e55c:	dec00204 	addi	sp,sp,8
 200e560:	f800283a 	ret

0200e564 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 200e564:	defffe04 	addi	sp,sp,-8
 200e568:	dfc00115 	stw	ra,4(sp)
 200e56c:	df000015 	stw	fp,0(sp)
 200e570:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 200e574:	d0a03117 	ldw	r2,-32572(gp)
 200e578:	1009883a 	mov	r4,r2
 200e57c:	200e5200 	call	200e520 <_cleanup_r>
}
 200e580:	0001883a 	nop
 200e584:	e037883a 	mov	sp,fp
 200e588:	dfc00117 	ldw	ra,4(sp)
 200e58c:	df000017 	ldw	fp,0(sp)
 200e590:	dec00204 	addi	sp,sp,8
 200e594:	f800283a 	ret

0200e598 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200e598:	defffd04 	addi	sp,sp,-12
 200e59c:	dfc00215 	stw	ra,8(sp)
 200e5a0:	df000115 	stw	fp,4(sp)
 200e5a4:	df000104 	addi	fp,sp,4
 200e5a8:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 200e5ac:	200e6b00 	call	200e6b0 <__sinit_lock_acquire>

  if (s->__sdidinit)
 200e5b0:	e0bfff17 	ldw	r2,-4(fp)
 200e5b4:	10800e17 	ldw	r2,56(r2)
 200e5b8:	10000226 	beq	r2,zero,200e5c4 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 200e5bc:	200e6d00 	call	200e6d0 <__sinit_lock_release>
      return;
 200e5c0:	00002606 	br	200e65c <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 200e5c4:	e0ffff17 	ldw	r3,-4(fp)
 200e5c8:	00808074 	movhi	r2,513
 200e5cc:	10b94804 	addi	r2,r2,-6880
 200e5d0:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 200e5d4:	e0bfff17 	ldw	r2,-4(fp)
 200e5d8:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200e5dc:	e0bfff17 	ldw	r2,-4(fp)
 200e5e0:	00c000c4 	movi	r3,3
 200e5e4:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200e5e8:	e0bfff17 	ldw	r2,-4(fp)
 200e5ec:	10c0bb04 	addi	r3,r2,748
 200e5f0:	e0bfff17 	ldw	r2,-4(fp)
 200e5f4:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200e5f8:	e0bfff17 	ldw	r2,-4(fp)
 200e5fc:	10800117 	ldw	r2,4(r2)
 200e600:	e1ffff17 	ldw	r7,-4(fp)
 200e604:	000d883a 	mov	r6,zero
 200e608:	01400104 	movi	r5,4
 200e60c:	1009883a 	mov	r4,r2
 200e610:	200e1f40 	call	200e1f4 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 200e614:	e0bfff17 	ldw	r2,-4(fp)
 200e618:	10800217 	ldw	r2,8(r2)
 200e61c:	e1ffff17 	ldw	r7,-4(fp)
 200e620:	01800044 	movi	r6,1
 200e624:	01400284 	movi	r5,10
 200e628:	1009883a 	mov	r4,r2
 200e62c:	200e1f40 	call	200e1f4 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 200e630:	e0bfff17 	ldw	r2,-4(fp)
 200e634:	10800317 	ldw	r2,12(r2)
 200e638:	e1ffff17 	ldw	r7,-4(fp)
 200e63c:	01800084 	movi	r6,2
 200e640:	01400484 	movi	r5,18
 200e644:	1009883a 	mov	r4,r2
 200e648:	200e1f40 	call	200e1f4 <std>

  s->__sdidinit = 1;
 200e64c:	e0bfff17 	ldw	r2,-4(fp)
 200e650:	00c00044 	movi	r3,1
 200e654:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 200e658:	200e6d00 	call	200e6d0 <__sinit_lock_release>
}
 200e65c:	e037883a 	mov	sp,fp
 200e660:	dfc00117 	ldw	ra,4(sp)
 200e664:	df000017 	ldw	fp,0(sp)
 200e668:	dec00204 	addi	sp,sp,8
 200e66c:	f800283a 	ret

0200e670 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 200e670:	deffff04 	addi	sp,sp,-4
 200e674:	df000015 	stw	fp,0(sp)
 200e678:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 200e67c:	0001883a 	nop
 200e680:	e037883a 	mov	sp,fp
 200e684:	df000017 	ldw	fp,0(sp)
 200e688:	dec00104 	addi	sp,sp,4
 200e68c:	f800283a 	ret

0200e690 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 200e690:	deffff04 	addi	sp,sp,-4
 200e694:	df000015 	stw	fp,0(sp)
 200e698:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 200e69c:	0001883a 	nop
 200e6a0:	e037883a 	mov	sp,fp
 200e6a4:	df000017 	ldw	fp,0(sp)
 200e6a8:	dec00104 	addi	sp,sp,4
 200e6ac:	f800283a 	ret

0200e6b0 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 200e6b0:	deffff04 	addi	sp,sp,-4
 200e6b4:	df000015 	stw	fp,0(sp)
 200e6b8:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 200e6bc:	0001883a 	nop
 200e6c0:	e037883a 	mov	sp,fp
 200e6c4:	df000017 	ldw	fp,0(sp)
 200e6c8:	dec00104 	addi	sp,sp,4
 200e6cc:	f800283a 	ret

0200e6d0 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200e6d0:	deffff04 	addi	sp,sp,-4
 200e6d4:	df000015 	stw	fp,0(sp)
 200e6d8:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200e6dc:	0001883a 	nop
 200e6e0:	e037883a 	mov	sp,fp
 200e6e4:	df000017 	ldw	fp,0(sp)
 200e6e8:	dec00104 	addi	sp,sp,4
 200e6ec:	f800283a 	ret

0200e6f0 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200e6f0:	defffe04 	addi	sp,sp,-8
 200e6f4:	df000115 	stw	fp,4(sp)
 200e6f8:	df000104 	addi	fp,sp,4
 200e6fc:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200e700:	0005883a 	mov	r2,zero
}
 200e704:	e037883a 	mov	sp,fp
 200e708:	df000017 	ldw	fp,0(sp)
 200e70c:	dec00104 	addi	sp,sp,4
 200e710:	f800283a 	ret

0200e714 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200e714:	defffe04 	addi	sp,sp,-8
 200e718:	df000115 	stw	fp,4(sp)
 200e71c:	df000104 	addi	fp,sp,4
 200e720:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200e724:	0005883a 	mov	r2,zero
}
 200e728:	e037883a 	mov	sp,fp
 200e72c:	df000017 	ldw	fp,0(sp)
 200e730:	dec00104 	addi	sp,sp,4
 200e734:	f800283a 	ret

0200e738 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200e738:	defffe04 	addi	sp,sp,-8
 200e73c:	dfc00115 	stw	ra,4(sp)
 200e740:	df000015 	stw	fp,0(sp)
 200e744:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200e748:	200e6700 	call	200e670 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200e74c:	d0a03017 	ldw	r2,-32576(gp)
 200e750:	01408074 	movhi	r5,513
 200e754:	2979bc04 	addi	r5,r5,-6416
 200e758:	1009883a 	mov	r4,r2
 200e75c:	200f4c00 	call	200f4c0 <_fwalk>
}
 200e760:	0001883a 	nop
 200e764:	e037883a 	mov	sp,fp
 200e768:	dfc00117 	ldw	ra,4(sp)
 200e76c:	df000017 	ldw	fp,0(sp)
 200e770:	dec00204 	addi	sp,sp,8
 200e774:	f800283a 	ret

0200e778 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200e778:	defffe04 	addi	sp,sp,-8
 200e77c:	dfc00115 	stw	ra,4(sp)
 200e780:	df000015 	stw	fp,0(sp)
 200e784:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200e788:	d0a03017 	ldw	r2,-32576(gp)
 200e78c:	01408074 	movhi	r5,513
 200e790:	2979c504 	addi	r5,r5,-6380
 200e794:	1009883a 	mov	r4,r2
 200e798:	200f4c00 	call	200f4c0 <_fwalk>

  __sfp_lock_release ();
 200e79c:	200e6900 	call	200e690 <__sfp_lock_release>
}
 200e7a0:	0001883a 	nop
 200e7a4:	e037883a 	mov	sp,fp
 200e7a8:	dfc00117 	ldw	ra,4(sp)
 200e7ac:	df000017 	ldw	fp,0(sp)
 200e7b0:	dec00204 	addi	sp,sp,8
 200e7b4:	f800283a 	ret

0200e7b8 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200e7b8:	defff204 	addi	sp,sp,-56
 200e7bc:	dfc00d15 	stw	ra,52(sp)
 200e7c0:	df000c15 	stw	fp,48(sp)
 200e7c4:	df000c04 	addi	fp,sp,48
 200e7c8:	e13ffe15 	stw	r4,-8(fp)
 200e7cc:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200e7d0:	e0bfff17 	ldw	r2,-4(fp)
 200e7d4:	10014a26 	beq	r2,zero,200ed00 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200e7d8:	e13ffe17 	ldw	r4,-8(fp)
 200e7dc:	201705c0 	call	201705c <__malloc_lock>

  p = mem2chunk(mem);
 200e7e0:	e0bfff17 	ldw	r2,-4(fp)
 200e7e4:	10bffe04 	addi	r2,r2,-8
 200e7e8:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200e7ec:	e0bff417 	ldw	r2,-48(fp)
 200e7f0:	10800117 	ldw	r2,4(r2)
 200e7f4:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200e7f8:	e0fff917 	ldw	r3,-28(fp)
 200e7fc:	00bfff84 	movi	r2,-2
 200e800:	1884703a 	and	r2,r3,r2
 200e804:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200e808:	e0fff417 	ldw	r3,-48(fp)
 200e80c:	e0bff517 	ldw	r2,-44(fp)
 200e810:	1885883a 	add	r2,r3,r2
 200e814:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200e818:	e0bffa17 	ldw	r2,-24(fp)
 200e81c:	10c00117 	ldw	r3,4(r2)
 200e820:	00bfff04 	movi	r2,-4
 200e824:	1884703a 	and	r2,r3,r2
 200e828:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200e82c:	008080b4 	movhi	r2,514
 200e830:	108b8004 	addi	r2,r2,11776
 200e834:	10c00217 	ldw	r3,8(r2)
 200e838:	e0bffa17 	ldw	r2,-24(fp)
 200e83c:	1880311e 	bne	r3,r2,200e904 <_free_r+0x14c>
  {
    sz += nextsz;
 200e840:	e0fff517 	ldw	r3,-44(fp)
 200e844:	e0bffb17 	ldw	r2,-20(fp)
 200e848:	1885883a 	add	r2,r3,r2
 200e84c:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200e850:	e0bff917 	ldw	r2,-28(fp)
 200e854:	1080004c 	andi	r2,r2,1
 200e858:	1000181e 	bne	r2,zero,200e8bc <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200e85c:	e0bff417 	ldw	r2,-48(fp)
 200e860:	10800017 	ldw	r2,0(r2)
 200e864:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200e868:	e0bffc17 	ldw	r2,-16(fp)
 200e86c:	0085c83a 	sub	r2,zero,r2
 200e870:	e0fff417 	ldw	r3,-48(fp)
 200e874:	1885883a 	add	r2,r3,r2
 200e878:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200e87c:	e0fff517 	ldw	r3,-44(fp)
 200e880:	e0bffc17 	ldw	r2,-16(fp)
 200e884:	1885883a 	add	r2,r3,r2
 200e888:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200e88c:	e0bff417 	ldw	r2,-48(fp)
 200e890:	10800317 	ldw	r2,12(r2)
 200e894:	e0bff615 	stw	r2,-40(fp)
 200e898:	e0bff417 	ldw	r2,-48(fp)
 200e89c:	10800217 	ldw	r2,8(r2)
 200e8a0:	e0bff715 	stw	r2,-36(fp)
 200e8a4:	e0bff717 	ldw	r2,-36(fp)
 200e8a8:	e0fff617 	ldw	r3,-40(fp)
 200e8ac:	10c00315 	stw	r3,12(r2)
 200e8b0:	e0bff617 	ldw	r2,-40(fp)
 200e8b4:	e0fff717 	ldw	r3,-36(fp)
 200e8b8:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200e8bc:	e0bff517 	ldw	r2,-44(fp)
 200e8c0:	10c00054 	ori	r3,r2,1
 200e8c4:	e0bff417 	ldw	r2,-48(fp)
 200e8c8:	10c00115 	stw	r3,4(r2)
    top = p;
 200e8cc:	008080b4 	movhi	r2,514
 200e8d0:	108b8004 	addi	r2,r2,11776
 200e8d4:	e0fff417 	ldw	r3,-48(fp)
 200e8d8:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200e8dc:	d0a03317 	ldw	r2,-32564(gp)
 200e8e0:	e0fff517 	ldw	r3,-44(fp)
 200e8e4:	18800436 	bltu	r3,r2,200e8f8 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200e8e8:	d0a79b17 	ldw	r2,-24980(gp)
 200e8ec:	100b883a 	mov	r5,r2
 200e8f0:	e13ffe17 	ldw	r4,-8(fp)
 200e8f4:	200ed180 	call	200ed18 <_malloc_trim_r>
    MALLOC_UNLOCK;
 200e8f8:	e13ffe17 	ldw	r4,-8(fp)
 200e8fc:	201717c0 	call	201717c <__malloc_unlock>
    return;
 200e900:	00010006 	br	200ed04 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200e904:	e0bffa17 	ldw	r2,-24(fp)
 200e908:	e0fffb17 	ldw	r3,-20(fp)
 200e90c:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200e910:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200e914:	e0bff917 	ldw	r2,-28(fp)
 200e918:	1080004c 	andi	r2,r2,1
 200e91c:	1000201e 	bne	r2,zero,200e9a0 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200e920:	e0bff417 	ldw	r2,-48(fp)
 200e924:	10800017 	ldw	r2,0(r2)
 200e928:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200e92c:	e0bffc17 	ldw	r2,-16(fp)
 200e930:	0085c83a 	sub	r2,zero,r2
 200e934:	e0fff417 	ldw	r3,-48(fp)
 200e938:	1885883a 	add	r2,r3,r2
 200e93c:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200e940:	e0fff517 	ldw	r3,-44(fp)
 200e944:	e0bffc17 	ldw	r2,-16(fp)
 200e948:	1885883a 	add	r2,r3,r2
 200e94c:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200e950:	e0bff417 	ldw	r2,-48(fp)
 200e954:	10c00217 	ldw	r3,8(r2)
 200e958:	008080b4 	movhi	r2,514
 200e95c:	108b8204 	addi	r2,r2,11784
 200e960:	1880031e 	bne	r3,r2,200e970 <_free_r+0x1b8>
      islr = 1;
 200e964:	00800044 	movi	r2,1
 200e968:	e0bff815 	stw	r2,-32(fp)
 200e96c:	00000c06 	br	200e9a0 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200e970:	e0bff417 	ldw	r2,-48(fp)
 200e974:	10800317 	ldw	r2,12(r2)
 200e978:	e0bff615 	stw	r2,-40(fp)
 200e97c:	e0bff417 	ldw	r2,-48(fp)
 200e980:	10800217 	ldw	r2,8(r2)
 200e984:	e0bff715 	stw	r2,-36(fp)
 200e988:	e0bff717 	ldw	r2,-36(fp)
 200e98c:	e0fff617 	ldw	r3,-40(fp)
 200e990:	10c00315 	stw	r3,12(r2)
 200e994:	e0bff617 	ldw	r2,-40(fp)
 200e998:	e0fff717 	ldw	r3,-36(fp)
 200e99c:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200e9a0:	e0fffa17 	ldw	r3,-24(fp)
 200e9a4:	e0bffb17 	ldw	r2,-20(fp)
 200e9a8:	1885883a 	add	r2,r3,r2
 200e9ac:	10800117 	ldw	r2,4(r2)
 200e9b0:	1080004c 	andi	r2,r2,1
 200e9b4:	10002a1e 	bne	r2,zero,200ea60 <_free_r+0x2a8>
  {
    sz += nextsz;
 200e9b8:	e0fff517 	ldw	r3,-44(fp)
 200e9bc:	e0bffb17 	ldw	r2,-20(fp)
 200e9c0:	1885883a 	add	r2,r3,r2
 200e9c4:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200e9c8:	e0bff817 	ldw	r2,-32(fp)
 200e9cc:	1000181e 	bne	r2,zero,200ea30 <_free_r+0x278>
 200e9d0:	e0bffa17 	ldw	r2,-24(fp)
 200e9d4:	10c00217 	ldw	r3,8(r2)
 200e9d8:	008080b4 	movhi	r2,514
 200e9dc:	108b8204 	addi	r2,r2,11784
 200e9e0:	1880131e 	bne	r3,r2,200ea30 <_free_r+0x278>
    {
      islr = 1;
 200e9e4:	00800044 	movi	r2,1
 200e9e8:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200e9ec:	00c080b4 	movhi	r3,514
 200e9f0:	18cb8204 	addi	r3,r3,11784
 200e9f4:	008080b4 	movhi	r2,514
 200e9f8:	108b8204 	addi	r2,r2,11784
 200e9fc:	e13ff417 	ldw	r4,-48(fp)
 200ea00:	11000315 	stw	r4,12(r2)
 200ea04:	10800317 	ldw	r2,12(r2)
 200ea08:	18800215 	stw	r2,8(r3)
 200ea0c:	008080b4 	movhi	r2,514
 200ea10:	108b8204 	addi	r2,r2,11784
 200ea14:	e0fff417 	ldw	r3,-48(fp)
 200ea18:	18800315 	stw	r2,12(r3)
 200ea1c:	e0bff417 	ldw	r2,-48(fp)
 200ea20:	10c00317 	ldw	r3,12(r2)
 200ea24:	e0bff417 	ldw	r2,-48(fp)
 200ea28:	10c00215 	stw	r3,8(r2)
 200ea2c:	00000c06 	br	200ea60 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200ea30:	e0bffa17 	ldw	r2,-24(fp)
 200ea34:	10800317 	ldw	r2,12(r2)
 200ea38:	e0bff615 	stw	r2,-40(fp)
 200ea3c:	e0bffa17 	ldw	r2,-24(fp)
 200ea40:	10800217 	ldw	r2,8(r2)
 200ea44:	e0bff715 	stw	r2,-36(fp)
 200ea48:	e0bff717 	ldw	r2,-36(fp)
 200ea4c:	e0fff617 	ldw	r3,-40(fp)
 200ea50:	10c00315 	stw	r3,12(r2)
 200ea54:	e0bff617 	ldw	r2,-40(fp)
 200ea58:	e0fff717 	ldw	r3,-36(fp)
 200ea5c:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200ea60:	e0bff517 	ldw	r2,-44(fp)
 200ea64:	10c00054 	ori	r3,r2,1
 200ea68:	e0bff417 	ldw	r2,-48(fp)
 200ea6c:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200ea70:	e0fff417 	ldw	r3,-48(fp)
 200ea74:	e0bff517 	ldw	r2,-44(fp)
 200ea78:	1885883a 	add	r2,r3,r2
 200ea7c:	e0fff517 	ldw	r3,-44(fp)
 200ea80:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200ea84:	e0bff817 	ldw	r2,-32(fp)
 200ea88:	10009a1e 	bne	r2,zero,200ecf4 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200ea8c:	e0bff517 	ldw	r2,-44(fp)
 200ea90:	10808028 	cmpgeui	r2,r2,512
 200ea94:	10002c1e 	bne	r2,zero,200eb48 <_free_r+0x390>
 200ea98:	e0bff517 	ldw	r2,-44(fp)
 200ea9c:	1004d0fa 	srli	r2,r2,3
 200eaa0:	e0bffd15 	stw	r2,-12(fp)
 200eaa4:	00c080b4 	movhi	r3,514
 200eaa8:	18cb8004 	addi	r3,r3,11776
 200eaac:	008080b4 	movhi	r2,514
 200eab0:	108b8004 	addi	r2,r2,11776
 200eab4:	11000117 	ldw	r4,4(r2)
 200eab8:	e0bffd17 	ldw	r2,-12(fp)
 200eabc:	1000010e 	bge	r2,zero,200eac4 <_free_r+0x30c>
 200eac0:	108000c4 	addi	r2,r2,3
 200eac4:	1005d0ba 	srai	r2,r2,2
 200eac8:	100b883a 	mov	r5,r2
 200eacc:	00800044 	movi	r2,1
 200ead0:	1144983a 	sll	r2,r2,r5
 200ead4:	2084b03a 	or	r2,r4,r2
 200ead8:	18800115 	stw	r2,4(r3)
 200eadc:	e0bffd17 	ldw	r2,-12(fp)
 200eae0:	10800044 	addi	r2,r2,1
 200eae4:	1085883a 	add	r2,r2,r2
 200eae8:	1085883a 	add	r2,r2,r2
 200eaec:	1087883a 	add	r3,r2,r2
 200eaf0:	008080b4 	movhi	r2,514
 200eaf4:	108b8004 	addi	r2,r2,11776
 200eaf8:	1885883a 	add	r2,r3,r2
 200eafc:	10bffe04 	addi	r2,r2,-8
 200eb00:	e0bff615 	stw	r2,-40(fp)
 200eb04:	e0bff617 	ldw	r2,-40(fp)
 200eb08:	10800217 	ldw	r2,8(r2)
 200eb0c:	e0bff715 	stw	r2,-36(fp)
 200eb10:	e0bff417 	ldw	r2,-48(fp)
 200eb14:	e0fff617 	ldw	r3,-40(fp)
 200eb18:	10c00315 	stw	r3,12(r2)
 200eb1c:	e0bff417 	ldw	r2,-48(fp)
 200eb20:	e0fff717 	ldw	r3,-36(fp)
 200eb24:	10c00215 	stw	r3,8(r2)
 200eb28:	e0bff617 	ldw	r2,-40(fp)
 200eb2c:	e0fff417 	ldw	r3,-48(fp)
 200eb30:	10c00215 	stw	r3,8(r2)
 200eb34:	e0bff617 	ldw	r2,-40(fp)
 200eb38:	10c00217 	ldw	r3,8(r2)
 200eb3c:	e0bff717 	ldw	r2,-36(fp)
 200eb40:	10c00315 	stw	r3,12(r2)
 200eb44:	00006b06 	br	200ecf4 <_free_r+0x53c>
 200eb48:	e0bff517 	ldw	r2,-44(fp)
 200eb4c:	1004d27a 	srli	r2,r2,9
 200eb50:	1000031e 	bne	r2,zero,200eb60 <_free_r+0x3a8>
 200eb54:	e0bff517 	ldw	r2,-44(fp)
 200eb58:	1004d0fa 	srli	r2,r2,3
 200eb5c:	00002906 	br	200ec04 <_free_r+0x44c>
 200eb60:	e0bff517 	ldw	r2,-44(fp)
 200eb64:	1004d27a 	srli	r2,r2,9
 200eb68:	10800168 	cmpgeui	r2,r2,5
 200eb6c:	1000041e 	bne	r2,zero,200eb80 <_free_r+0x3c8>
 200eb70:	e0bff517 	ldw	r2,-44(fp)
 200eb74:	1004d1ba 	srli	r2,r2,6
 200eb78:	10800e04 	addi	r2,r2,56
 200eb7c:	00002106 	br	200ec04 <_free_r+0x44c>
 200eb80:	e0bff517 	ldw	r2,-44(fp)
 200eb84:	1004d27a 	srli	r2,r2,9
 200eb88:	10800568 	cmpgeui	r2,r2,21
 200eb8c:	1000041e 	bne	r2,zero,200eba0 <_free_r+0x3e8>
 200eb90:	e0bff517 	ldw	r2,-44(fp)
 200eb94:	1004d27a 	srli	r2,r2,9
 200eb98:	108016c4 	addi	r2,r2,91
 200eb9c:	00001906 	br	200ec04 <_free_r+0x44c>
 200eba0:	e0bff517 	ldw	r2,-44(fp)
 200eba4:	1004d27a 	srli	r2,r2,9
 200eba8:	10801568 	cmpgeui	r2,r2,85
 200ebac:	1000041e 	bne	r2,zero,200ebc0 <_free_r+0x408>
 200ebb0:	e0bff517 	ldw	r2,-44(fp)
 200ebb4:	1004d33a 	srli	r2,r2,12
 200ebb8:	10801b84 	addi	r2,r2,110
 200ebbc:	00001106 	br	200ec04 <_free_r+0x44c>
 200ebc0:	e0bff517 	ldw	r2,-44(fp)
 200ebc4:	1004d27a 	srli	r2,r2,9
 200ebc8:	10805568 	cmpgeui	r2,r2,341
 200ebcc:	1000041e 	bne	r2,zero,200ebe0 <_free_r+0x428>
 200ebd0:	e0bff517 	ldw	r2,-44(fp)
 200ebd4:	1004d3fa 	srli	r2,r2,15
 200ebd8:	10801dc4 	addi	r2,r2,119
 200ebdc:	00000906 	br	200ec04 <_free_r+0x44c>
 200ebe0:	e0bff517 	ldw	r2,-44(fp)
 200ebe4:	1004d27a 	srli	r2,r2,9
 200ebe8:	10815568 	cmpgeui	r2,r2,1365
 200ebec:	1000041e 	bne	r2,zero,200ec00 <_free_r+0x448>
 200ebf0:	e0bff517 	ldw	r2,-44(fp)
 200ebf4:	1004d4ba 	srli	r2,r2,18
 200ebf8:	10801f04 	addi	r2,r2,124
 200ebfc:	00000106 	br	200ec04 <_free_r+0x44c>
 200ec00:	00801f84 	movi	r2,126
 200ec04:	e0bffd15 	stw	r2,-12(fp)
 200ec08:	e0bffd17 	ldw	r2,-12(fp)
 200ec0c:	10800044 	addi	r2,r2,1
 200ec10:	1085883a 	add	r2,r2,r2
 200ec14:	1085883a 	add	r2,r2,r2
 200ec18:	1087883a 	add	r3,r2,r2
 200ec1c:	008080b4 	movhi	r2,514
 200ec20:	108b8004 	addi	r2,r2,11776
 200ec24:	1885883a 	add	r2,r3,r2
 200ec28:	10bffe04 	addi	r2,r2,-8
 200ec2c:	e0bff615 	stw	r2,-40(fp)
 200ec30:	e0bff617 	ldw	r2,-40(fp)
 200ec34:	10800217 	ldw	r2,8(r2)
 200ec38:	e0bff715 	stw	r2,-36(fp)
 200ec3c:	e0fff717 	ldw	r3,-36(fp)
 200ec40:	e0bff617 	ldw	r2,-40(fp)
 200ec44:	1880121e 	bne	r3,r2,200ec90 <_free_r+0x4d8>
 200ec48:	00c080b4 	movhi	r3,514
 200ec4c:	18cb8004 	addi	r3,r3,11776
 200ec50:	008080b4 	movhi	r2,514
 200ec54:	108b8004 	addi	r2,r2,11776
 200ec58:	11000117 	ldw	r4,4(r2)
 200ec5c:	e0bffd17 	ldw	r2,-12(fp)
 200ec60:	1000010e 	bge	r2,zero,200ec68 <_free_r+0x4b0>
 200ec64:	108000c4 	addi	r2,r2,3
 200ec68:	1005d0ba 	srai	r2,r2,2
 200ec6c:	100b883a 	mov	r5,r2
 200ec70:	00800044 	movi	r2,1
 200ec74:	1144983a 	sll	r2,r2,r5
 200ec78:	2084b03a 	or	r2,r4,r2
 200ec7c:	18800115 	stw	r2,4(r3)
 200ec80:	00000f06 	br	200ecc0 <_free_r+0x508>
 200ec84:	e0bff717 	ldw	r2,-36(fp)
 200ec88:	10800217 	ldw	r2,8(r2)
 200ec8c:	e0bff715 	stw	r2,-36(fp)
 200ec90:	e0fff717 	ldw	r3,-36(fp)
 200ec94:	e0bff617 	ldw	r2,-40(fp)
 200ec98:	18800626 	beq	r3,r2,200ecb4 <_free_r+0x4fc>
 200ec9c:	e0bff717 	ldw	r2,-36(fp)
 200eca0:	10c00117 	ldw	r3,4(r2)
 200eca4:	00bfff04 	movi	r2,-4
 200eca8:	1884703a 	and	r2,r3,r2
 200ecac:	e0fff517 	ldw	r3,-44(fp)
 200ecb0:	18bff436 	bltu	r3,r2,200ec84 <_free_r+0x4cc>
 200ecb4:	e0bff717 	ldw	r2,-36(fp)
 200ecb8:	10800317 	ldw	r2,12(r2)
 200ecbc:	e0bff615 	stw	r2,-40(fp)
 200ecc0:	e0bff417 	ldw	r2,-48(fp)
 200ecc4:	e0fff617 	ldw	r3,-40(fp)
 200ecc8:	10c00315 	stw	r3,12(r2)
 200eccc:	e0bff417 	ldw	r2,-48(fp)
 200ecd0:	e0fff717 	ldw	r3,-36(fp)
 200ecd4:	10c00215 	stw	r3,8(r2)
 200ecd8:	e0bff617 	ldw	r2,-40(fp)
 200ecdc:	e0fff417 	ldw	r3,-48(fp)
 200ece0:	10c00215 	stw	r3,8(r2)
 200ece4:	e0bff617 	ldw	r2,-40(fp)
 200ece8:	10c00217 	ldw	r3,8(r2)
 200ecec:	e0bff717 	ldw	r2,-36(fp)
 200ecf0:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200ecf4:	e13ffe17 	ldw	r4,-8(fp)
 200ecf8:	201717c0 	call	201717c <__malloc_unlock>
 200ecfc:	00000106 	br	200ed04 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200ed00:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200ed04:	e037883a 	mov	sp,fp
 200ed08:	dfc00117 	ldw	ra,4(sp)
 200ed0c:	df000017 	ldw	fp,0(sp)
 200ed10:	dec00204 	addi	sp,sp,8
 200ed14:	f800283a 	ret

0200ed18 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200ed18:	defff704 	addi	sp,sp,-36
 200ed1c:	dfc00815 	stw	ra,32(sp)
 200ed20:	df000715 	stw	fp,28(sp)
 200ed24:	df000704 	addi	fp,sp,28
 200ed28:	e13ffe15 	stw	r4,-8(fp)
 200ed2c:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200ed30:	00840004 	movi	r2,4096
 200ed34:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200ed38:	e13ffe17 	ldw	r4,-8(fp)
 200ed3c:	201705c0 	call	201705c <__malloc_lock>

  top_size = chunksize(top);
 200ed40:	008080b4 	movhi	r2,514
 200ed44:	108b8004 	addi	r2,r2,11776
 200ed48:	10800217 	ldw	r2,8(r2)
 200ed4c:	10800117 	ldw	r2,4(r2)
 200ed50:	1007883a 	mov	r3,r2
 200ed54:	00bfff04 	movi	r2,-4
 200ed58:	1884703a 	and	r2,r3,r2
 200ed5c:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200ed60:	e0fffa17 	ldw	r3,-24(fp)
 200ed64:	e0bfff17 	ldw	r2,-4(fp)
 200ed68:	1887c83a 	sub	r3,r3,r2
 200ed6c:	e0bff917 	ldw	r2,-28(fp)
 200ed70:	1885883a 	add	r2,r3,r2
 200ed74:	10bffbc4 	addi	r2,r2,-17
 200ed78:	e17ff917 	ldw	r5,-28(fp)
 200ed7c:	1009883a 	mov	r4,r2
 200ed80:	20069980 	call	2006998 <__udivsi3>
 200ed84:	10ffffc4 	addi	r3,r2,-1
 200ed88:	e0bff917 	ldw	r2,-28(fp)
 200ed8c:	1885383a 	mul	r2,r3,r2
 200ed90:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200ed94:	e0bff917 	ldw	r2,-28(fp)
 200ed98:	e0fffb17 	ldw	r3,-20(fp)
 200ed9c:	1880040e 	bge	r3,r2,200edb0 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200eda0:	e13ffe17 	ldw	r4,-8(fp)
 200eda4:	201717c0 	call	201717c <__malloc_unlock>
    return 0;
 200eda8:	0005883a 	mov	r2,zero
 200edac:	00004806 	br	200eed0 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200edb0:	000b883a 	mov	r5,zero
 200edb4:	e13ffe17 	ldw	r4,-8(fp)
 200edb8:	20133a00 	call	20133a0 <_sbrk_r>
 200edbc:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200edc0:	008080b4 	movhi	r2,514
 200edc4:	108b8004 	addi	r2,r2,11776
 200edc8:	10c00217 	ldw	r3,8(r2)
 200edcc:	e0bffa17 	ldw	r2,-24(fp)
 200edd0:	1887883a 	add	r3,r3,r2
 200edd4:	e0bffc17 	ldw	r2,-16(fp)
 200edd8:	18800426 	beq	r3,r2,200edec <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200eddc:	e13ffe17 	ldw	r4,-8(fp)
 200ede0:	201717c0 	call	201717c <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200ede4:	0005883a 	mov	r2,zero
 200ede8:	00003906 	br	200eed0 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200edec:	e0bffb17 	ldw	r2,-20(fp)
 200edf0:	0085c83a 	sub	r2,zero,r2
 200edf4:	100b883a 	mov	r5,r2
 200edf8:	e13ffe17 	ldw	r4,-8(fp)
 200edfc:	20133a00 	call	20133a0 <_sbrk_r>
 200ee00:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200ee04:	e0bffd17 	ldw	r2,-12(fp)
 200ee08:	10bfffd8 	cmpnei	r2,r2,-1
 200ee0c:	10001d1e 	bne	r2,zero,200ee84 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200ee10:	000b883a 	mov	r5,zero
 200ee14:	e13ffe17 	ldw	r4,-8(fp)
 200ee18:	20133a00 	call	20133a0 <_sbrk_r>
 200ee1c:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200ee20:	e0fffc17 	ldw	r3,-16(fp)
 200ee24:	008080b4 	movhi	r2,514
 200ee28:	108b8004 	addi	r2,r2,11776
 200ee2c:	10800217 	ldw	r2,8(r2)
 200ee30:	1885c83a 	sub	r2,r3,r2
 200ee34:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200ee38:	e0bffa17 	ldw	r2,-24(fp)
 200ee3c:	10800410 	cmplti	r2,r2,16
 200ee40:	10000c1e 	bne	r2,zero,200ee74 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200ee44:	e0bffc17 	ldw	r2,-16(fp)
 200ee48:	d0e03417 	ldw	r3,-32560(gp)
 200ee4c:	10c7c83a 	sub	r3,r2,r3
 200ee50:	008080b4 	movhi	r2,514
 200ee54:	1098d204 	addi	r2,r2,25416
 200ee58:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200ee5c:	008080b4 	movhi	r2,514
 200ee60:	108b8004 	addi	r2,r2,11776
 200ee64:	10800217 	ldw	r2,8(r2)
 200ee68:	e0fffa17 	ldw	r3,-24(fp)
 200ee6c:	18c00054 	ori	r3,r3,1
 200ee70:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200ee74:	e13ffe17 	ldw	r4,-8(fp)
 200ee78:	201717c0 	call	201717c <__malloc_unlock>
        return 0; 
 200ee7c:	0005883a 	mov	r2,zero
 200ee80:	00001306 	br	200eed0 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200ee84:	008080b4 	movhi	r2,514
 200ee88:	108b8004 	addi	r2,r2,11776
 200ee8c:	10800217 	ldw	r2,8(r2)
 200ee90:	e13ffa17 	ldw	r4,-24(fp)
 200ee94:	e0fffb17 	ldw	r3,-20(fp)
 200ee98:	20c7c83a 	sub	r3,r4,r3
 200ee9c:	18c00054 	ori	r3,r3,1
 200eea0:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200eea4:	008080b4 	movhi	r2,514
 200eea8:	1098d204 	addi	r2,r2,25416
 200eeac:	10c00017 	ldw	r3,0(r2)
 200eeb0:	e0bffb17 	ldw	r2,-20(fp)
 200eeb4:	1887c83a 	sub	r3,r3,r2
 200eeb8:	008080b4 	movhi	r2,514
 200eebc:	1098d204 	addi	r2,r2,25416
 200eec0:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200eec4:	e13ffe17 	ldw	r4,-8(fp)
 200eec8:	201717c0 	call	201717c <__malloc_unlock>
        return 1;
 200eecc:	00800044 	movi	r2,1
      }
    }
  }
}
 200eed0:	e037883a 	mov	sp,fp
 200eed4:	dfc00117 	ldw	ra,4(sp)
 200eed8:	df000017 	ldw	fp,0(sp)
 200eedc:	dec00204 	addi	sp,sp,8
 200eee0:	f800283a 	ret

0200eee4 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200eee4:	defff004 	addi	sp,sp,-64
 200eee8:	dfc00f15 	stw	ra,60(sp)
 200eeec:	df000e15 	stw	fp,56(sp)
 200eef0:	dd800d15 	stw	r22,52(sp)
 200eef4:	dd400c15 	stw	r21,48(sp)
 200eef8:	dd000b15 	stw	r20,44(sp)
 200eefc:	dcc00a15 	stw	r19,40(sp)
 200ef00:	dc800915 	stw	r18,36(sp)
 200ef04:	dc400815 	stw	r17,32(sp)
 200ef08:	dc000715 	stw	r16,28(sp)
 200ef0c:	df000e04 	addi	fp,sp,56
 200ef10:	e13ff815 	stw	r4,-32(fp)
 200ef14:	2821883a 	mov	r16,r5
 200ef18:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200ef1c:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200ef20:	ac800217 	ldw	r18,8(r21)
 200ef24:	9000021e 	bne	r18,zero,200ef30 <__sfvwrite_r+0x4c>
    return 0;
 200ef28:	0005883a 	mov	r2,zero
 200ef2c:	00015806 	br	200f490 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200ef30:	8080030b 	ldhu	r2,12(r16)
 200ef34:	10bfffcc 	andi	r2,r2,65535
 200ef38:	1080020c 	andi	r2,r2,8
 200ef3c:	10000226 	beq	r2,zero,200ef48 <__sfvwrite_r+0x64>
 200ef40:	80800417 	ldw	r2,16(r16)
 200ef44:	1000061e 	bne	r2,zero,200ef60 <__sfvwrite_r+0x7c>
 200ef48:	800b883a 	mov	r5,r16
 200ef4c:	e13ff817 	ldw	r4,-32(fp)
 200ef50:	200bd480 	call	200bd48 <__swsetup_r>
 200ef54:	10000226 	beq	r2,zero,200ef60 <__sfvwrite_r+0x7c>
    return EOF;
 200ef58:	00bfffc4 	movi	r2,-1
 200ef5c:	00014c06 	br	200f490 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200ef60:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200ef64:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200ef68:	8080030b 	ldhu	r2,12(r16)
 200ef6c:	10bfffcc 	andi	r2,r2,65535
 200ef70:	1080008c 	andi	r2,r2,2
 200ef74:	10001f26 	beq	r2,zero,200eff4 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200ef78:	00000306 	br	200ef88 <__sfvwrite_r+0xa4>
 200ef7c:	a4c00017 	ldw	r19,0(r20)
 200ef80:	a4800117 	ldw	r18,4(r20)
 200ef84:	a5000204 	addi	r20,r20,8
 200ef88:	903ffc26 	beq	r18,zero,200ef7c <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200ef8c:	82000917 	ldw	r8,36(r16)
 200ef90:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200ef94:	9005883a 	mov	r2,r18
 200ef98:	00e00034 	movhi	r3,32768
 200ef9c:	18ff0004 	addi	r3,r3,-1024
 200efa0:	1880022e 	bgeu	r3,r2,200efac <__sfvwrite_r+0xc8>
 200efa4:	00a00034 	movhi	r2,32768
 200efa8:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200efac:	100f883a 	mov	r7,r2
 200efb0:	980d883a 	mov	r6,r19
 200efb4:	200b883a 	mov	r5,r4
 200efb8:	e13ff817 	ldw	r4,-32(fp)
 200efbc:	403ee83a 	callr	r8
 200efc0:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200efc4:	0441290e 	bge	zero,r17,200f46c <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200efc8:	8805883a 	mov	r2,r17
 200efcc:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200efd0:	8805883a 	mov	r2,r17
 200efd4:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200efd8:	a8800217 	ldw	r2,8(r21)
 200efdc:	8807883a 	mov	r3,r17
 200efe0:	10c5c83a 	sub	r2,r2,r3
 200efe4:	a8800215 	stw	r2,8(r21)
 200efe8:	a8800217 	ldw	r2,8(r21)
 200efec:	103fe61e 	bne	r2,zero,200ef88 <__sfvwrite_r+0xa4>
 200eff0:	00011c06 	br	200f464 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200eff4:	8080030b 	ldhu	r2,12(r16)
 200eff8:	10bfffcc 	andi	r2,r2,65535
 200effc:	1080004c 	andi	r2,r2,1
 200f000:	1000b51e 	bne	r2,zero,200f2d8 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200f004:	00000306 	br	200f014 <__sfvwrite_r+0x130>
 200f008:	a4c00017 	ldw	r19,0(r20)
 200f00c:	a4800117 	ldw	r18,4(r20)
 200f010:	a5000204 	addi	r20,r20,8
 200f014:	903ffc26 	beq	r18,zero,200f008 <__sfvwrite_r+0x124>
	  w = fp->_w;
 200f018:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200f01c:	8080030b 	ldhu	r2,12(r16)
 200f020:	10bfffcc 	andi	r2,r2,65535
 200f024:	1080800c 	andi	r2,r2,512
 200f028:	10006b26 	beq	r2,zero,200f1d8 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200f02c:	8805883a 	mov	r2,r17
 200f030:	90805736 	bltu	r18,r2,200f190 <__sfvwrite_r+0x2ac>
 200f034:	8080030b 	ldhu	r2,12(r16)
 200f038:	10bfffcc 	andi	r2,r2,65535
 200f03c:	1081200c 	andi	r2,r2,1152
 200f040:	10005326 	beq	r2,zero,200f190 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200f044:	80800017 	ldw	r2,0(r16)
 200f048:	1007883a 	mov	r3,r2
 200f04c:	80800417 	ldw	r2,16(r16)
 200f050:	1885c83a 	sub	r2,r3,r2
 200f054:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200f058:	80c00517 	ldw	r3,20(r16)
 200f05c:	1805883a 	mov	r2,r3
 200f060:	1085883a 	add	r2,r2,r2
 200f064:	10c5883a 	add	r2,r2,r3
 200f068:	1006d7fa 	srli	r3,r2,31
 200f06c:	1885883a 	add	r2,r3,r2
 200f070:	1005d07a 	srai	r2,r2,1
 200f074:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200f078:	e0bff617 	ldw	r2,-40(fp)
 200f07c:	1485883a 	add	r2,r2,r18
 200f080:	10800044 	addi	r2,r2,1
 200f084:	e0fff517 	ldw	r3,-44(fp)
 200f088:	1880042e 	bgeu	r3,r2,200f09c <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200f08c:	e0bff617 	ldw	r2,-40(fp)
 200f090:	1485883a 	add	r2,r2,r18
 200f094:	10800044 	addi	r2,r2,1
 200f098:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200f09c:	8080030b 	ldhu	r2,12(r16)
 200f0a0:	10bfffcc 	andi	r2,r2,65535
 200f0a4:	1081000c 	andi	r2,r2,1024
 200f0a8:	10001726 	beq	r2,zero,200f108 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200f0ac:	e0bff517 	ldw	r2,-44(fp)
 200f0b0:	100b883a 	mov	r5,r2
 200f0b4:	e13ff817 	ldw	r4,-32(fp)
 200f0b8:	200fdf80 	call	200fdf8 <_malloc_r>
 200f0bc:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200f0c0:	e0bff417 	ldw	r2,-48(fp)
 200f0c4:	1000041e 	bne	r2,zero,200f0d8 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200f0c8:	e0bff817 	ldw	r2,-32(fp)
 200f0cc:	00c00304 	movi	r3,12
 200f0d0:	10c00015 	stw	r3,0(r2)
			  goto err;
 200f0d4:	0000ea06 	br	200f480 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200f0d8:	80800417 	ldw	r2,16(r16)
 200f0dc:	e0fff617 	ldw	r3,-40(fp)
 200f0e0:	180d883a 	mov	r6,r3
 200f0e4:	100b883a 	mov	r5,r2
 200f0e8:	e13ff417 	ldw	r4,-48(fp)
 200f0ec:	20091900 	call	2009190 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200f0f0:	80c0030b 	ldhu	r3,12(r16)
 200f0f4:	00bedfc4 	movi	r2,-1153
 200f0f8:	1884703a 	and	r2,r3,r2
 200f0fc:	10802014 	ori	r2,r2,128
 200f100:	8080030d 	sth	r2,12(r16)
 200f104:	00001506 	br	200f15c <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200f108:	80800417 	ldw	r2,16(r16)
 200f10c:	e0fff517 	ldw	r3,-44(fp)
 200f110:	180d883a 	mov	r6,r3
 200f114:	100b883a 	mov	r5,r2
 200f118:	e13ff817 	ldw	r4,-32(fp)
 200f11c:	20127b00 	call	20127b0 <_realloc_r>
 200f120:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200f124:	e0bff417 	ldw	r2,-48(fp)
 200f128:	10000c1e 	bne	r2,zero,200f15c <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200f12c:	80800417 	ldw	r2,16(r16)
 200f130:	100b883a 	mov	r5,r2
 200f134:	e13ff817 	ldw	r4,-32(fp)
 200f138:	200e7b80 	call	200e7b8 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200f13c:	80c0030b 	ldhu	r3,12(r16)
 200f140:	00bfdfc4 	movi	r2,-129
 200f144:	1884703a 	and	r2,r3,r2
 200f148:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200f14c:	e0bff817 	ldw	r2,-32(fp)
 200f150:	00c00304 	movi	r3,12
 200f154:	10c00015 	stw	r3,0(r2)
			  goto err;
 200f158:	0000c906 	br	200f480 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200f15c:	e0bff417 	ldw	r2,-48(fp)
 200f160:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200f164:	e0bff617 	ldw	r2,-40(fp)
 200f168:	e0fff417 	ldw	r3,-48(fp)
 200f16c:	1885883a 	add	r2,r3,r2
 200f170:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200f174:	e0bff517 	ldw	r2,-44(fp)
 200f178:	80800515 	stw	r2,20(r16)
		  w = len;
 200f17c:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200f180:	e0fff517 	ldw	r3,-44(fp)
 200f184:	e0bff617 	ldw	r2,-40(fp)
 200f188:	1885c83a 	sub	r2,r3,r2
 200f18c:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200f190:	8805883a 	mov	r2,r17
 200f194:	9080012e 	bgeu	r18,r2,200f19c <__sfvwrite_r+0x2b8>
		w = len;
 200f198:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200f19c:	80800017 	ldw	r2,0(r16)
 200f1a0:	8807883a 	mov	r3,r17
 200f1a4:	180d883a 	mov	r6,r3
 200f1a8:	980b883a 	mov	r5,r19
 200f1ac:	1009883a 	mov	r4,r2
 200f1b0:	2010b300 	call	2010b30 <memmove>
	      fp->_w -= w;
 200f1b4:	80800217 	ldw	r2,8(r16)
 200f1b8:	1445c83a 	sub	r2,r2,r17
 200f1bc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f1c0:	80800017 	ldw	r2,0(r16)
 200f1c4:	8807883a 	mov	r3,r17
 200f1c8:	10c5883a 	add	r2,r2,r3
 200f1cc:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200f1d0:	9023883a 	mov	r17,r18
 200f1d4:	00003506 	br	200f2ac <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200f1d8:	80800017 	ldw	r2,0(r16)
 200f1dc:	80c00417 	ldw	r3,16(r16)
 200f1e0:	18800236 	bltu	r3,r2,200f1ec <__sfvwrite_r+0x308>
 200f1e4:	80800517 	ldw	r2,20(r16)
 200f1e8:	9080182e 	bgeu	r18,r2,200f24c <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200f1ec:	8805883a 	mov	r2,r17
 200f1f0:	9080012e 	bgeu	r18,r2,200f1f8 <__sfvwrite_r+0x314>
 200f1f4:	9005883a 	mov	r2,r18
 200f1f8:	1023883a 	mov	r17,r2
	      COPY (w);
 200f1fc:	80800017 	ldw	r2,0(r16)
 200f200:	8807883a 	mov	r3,r17
 200f204:	180d883a 	mov	r6,r3
 200f208:	980b883a 	mov	r5,r19
 200f20c:	1009883a 	mov	r4,r2
 200f210:	2010b300 	call	2010b30 <memmove>
	      fp->_w -= w;
 200f214:	80800217 	ldw	r2,8(r16)
 200f218:	1445c83a 	sub	r2,r2,r17
 200f21c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f220:	80800017 	ldw	r2,0(r16)
 200f224:	8807883a 	mov	r3,r17
 200f228:	10c5883a 	add	r2,r2,r3
 200f22c:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200f230:	80800217 	ldw	r2,8(r16)
 200f234:	10001c1e 	bne	r2,zero,200f2a8 <__sfvwrite_r+0x3c4>
 200f238:	800b883a 	mov	r5,r16
 200f23c:	e13ff817 	ldw	r4,-32(fp)
 200f240:	200e1180 	call	200e118 <_fflush_r>
 200f244:	10001826 	beq	r2,zero,200f2a8 <__sfvwrite_r+0x3c4>
		goto err;
 200f248:	00008d06 	br	200f480 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200f24c:	9005883a 	mov	r2,r18
 200f250:	00e00034 	movhi	r3,32768
 200f254:	10c00236 	bltu	r2,r3,200f260 <__sfvwrite_r+0x37c>
 200f258:	00a00034 	movhi	r2,32768
 200f25c:	10bfffc4 	addi	r2,r2,-1
 200f260:	1007883a 	mov	r3,r2
 200f264:	80800517 	ldw	r2,20(r16)
 200f268:	100b883a 	mov	r5,r2
 200f26c:	1809883a 	mov	r4,r3
 200f270:	20068a00 	call	20068a0 <__divsi3>
 200f274:	1007883a 	mov	r3,r2
 200f278:	80800517 	ldw	r2,20(r16)
 200f27c:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200f280:	80800917 	ldw	r2,36(r16)
 200f284:	80c00717 	ldw	r3,28(r16)
 200f288:	880f883a 	mov	r7,r17
 200f28c:	980d883a 	mov	r6,r19
 200f290:	180b883a 	mov	r5,r3
 200f294:	e13ff817 	ldw	r4,-32(fp)
 200f298:	103ee83a 	callr	r2
 200f29c:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200f2a0:	0440740e 	bge	zero,r17,200f474 <__sfvwrite_r+0x590>
 200f2a4:	00000106 	br	200f2ac <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200f2a8:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200f2ac:	8805883a 	mov	r2,r17
 200f2b0:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200f2b4:	8805883a 	mov	r2,r17
 200f2b8:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200f2bc:	a8800217 	ldw	r2,8(r21)
 200f2c0:	8807883a 	mov	r3,r17
 200f2c4:	10c5c83a 	sub	r2,r2,r3
 200f2c8:	a8800215 	stw	r2,8(r21)
 200f2cc:	a8800217 	ldw	r2,8(r21)
 200f2d0:	103f501e 	bne	r2,zero,200f014 <__sfvwrite_r+0x130>
 200f2d4:	00006306 	br	200f464 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200f2d8:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200f2dc:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200f2e0:	00000406 	br	200f2f4 <__sfvwrite_r+0x410>
 200f2e4:	e03ff215 	stw	zero,-56(fp)
 200f2e8:	a4c00017 	ldw	r19,0(r20)
 200f2ec:	a4800117 	ldw	r18,4(r20)
 200f2f0:	a5000204 	addi	r20,r20,8
 200f2f4:	903ffb26 	beq	r18,zero,200f2e4 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200f2f8:	e0bff217 	ldw	r2,-56(fp)
 200f2fc:	1000111e 	bne	r2,zero,200f344 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200f300:	900d883a 	mov	r6,r18
 200f304:	01400284 	movi	r5,10
 200f308:	9809883a 	mov	r4,r19
 200f30c:	20109740 	call	2010974 <memchr>
 200f310:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200f314:	e0bff717 	ldw	r2,-36(fp)
 200f318:	10000626 	beq	r2,zero,200f334 <__sfvwrite_r+0x450>
 200f31c:	e0bff717 	ldw	r2,-36(fp)
 200f320:	10800044 	addi	r2,r2,1
 200f324:	1007883a 	mov	r3,r2
 200f328:	9805883a 	mov	r2,r19
 200f32c:	1885c83a 	sub	r2,r3,r2
 200f330:	00000106 	br	200f338 <__sfvwrite_r+0x454>
 200f334:	90800044 	addi	r2,r18,1
 200f338:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200f33c:	00800044 	movi	r2,1
 200f340:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200f344:	e0bff317 	ldw	r2,-52(fp)
 200f348:	9080012e 	bgeu	r18,r2,200f350 <__sfvwrite_r+0x46c>
 200f34c:	9005883a 	mov	r2,r18
 200f350:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200f354:	80c00217 	ldw	r3,8(r16)
 200f358:	80800517 	ldw	r2,20(r16)
 200f35c:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200f360:	80800017 	ldw	r2,0(r16)
 200f364:	80c00417 	ldw	r3,16(r16)
 200f368:	1880102e 	bgeu	r3,r2,200f3ac <__sfvwrite_r+0x4c8>
 200f36c:	8d800f0e 	bge	r17,r22,200f3ac <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200f370:	80800017 	ldw	r2,0(r16)
 200f374:	8807883a 	mov	r3,r17
 200f378:	180d883a 	mov	r6,r3
 200f37c:	980b883a 	mov	r5,r19
 200f380:	1009883a 	mov	r4,r2
 200f384:	2010b300 	call	2010b30 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200f388:	80800017 	ldw	r2,0(r16)
 200f38c:	8807883a 	mov	r3,r17
 200f390:	10c5883a 	add	r2,r2,r3
 200f394:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200f398:	800b883a 	mov	r5,r16
 200f39c:	e13ff817 	ldw	r4,-32(fp)
 200f3a0:	200e1180 	call	200e118 <_fflush_r>
 200f3a4:	10001b26 	beq	r2,zero,200f414 <__sfvwrite_r+0x530>
		goto err;
 200f3a8:	00003506 	br	200f480 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200f3ac:	84400517 	ldw	r17,20(r16)
 200f3b0:	b4400a16 	blt	r22,r17,200f3dc <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200f3b4:	80800917 	ldw	r2,36(r16)
 200f3b8:	80c00717 	ldw	r3,28(r16)
 200f3bc:	880f883a 	mov	r7,r17
 200f3c0:	980d883a 	mov	r6,r19
 200f3c4:	180b883a 	mov	r5,r3
 200f3c8:	e13ff817 	ldw	r4,-32(fp)
 200f3cc:	103ee83a 	callr	r2
 200f3d0:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200f3d4:	04400f16 	blt	zero,r17,200f414 <__sfvwrite_r+0x530>
		goto err;
 200f3d8:	00002906 	br	200f480 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200f3dc:	b023883a 	mov	r17,r22
	      COPY (w);
 200f3e0:	80800017 	ldw	r2,0(r16)
 200f3e4:	8807883a 	mov	r3,r17
 200f3e8:	180d883a 	mov	r6,r3
 200f3ec:	980b883a 	mov	r5,r19
 200f3f0:	1009883a 	mov	r4,r2
 200f3f4:	2010b300 	call	2010b30 <memmove>
	      fp->_w -= w;
 200f3f8:	80800217 	ldw	r2,8(r16)
 200f3fc:	1445c83a 	sub	r2,r2,r17
 200f400:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f404:	80800017 	ldw	r2,0(r16)
 200f408:	8807883a 	mov	r3,r17
 200f40c:	10c5883a 	add	r2,r2,r3
 200f410:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200f414:	e0bff317 	ldw	r2,-52(fp)
 200f418:	1445c83a 	sub	r2,r2,r17
 200f41c:	e0bff315 	stw	r2,-52(fp)
 200f420:	e0bff317 	ldw	r2,-52(fp)
 200f424:	1000051e 	bne	r2,zero,200f43c <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200f428:	800b883a 	mov	r5,r16
 200f42c:	e13ff817 	ldw	r4,-32(fp)
 200f430:	200e1180 	call	200e118 <_fflush_r>
 200f434:	1000111e 	bne	r2,zero,200f47c <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200f438:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200f43c:	8805883a 	mov	r2,r17
 200f440:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200f444:	8805883a 	mov	r2,r17
 200f448:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200f44c:	a8800217 	ldw	r2,8(r21)
 200f450:	8807883a 	mov	r3,r17
 200f454:	10c5c83a 	sub	r2,r2,r3
 200f458:	a8800215 	stw	r2,8(r21)
 200f45c:	a8800217 	ldw	r2,8(r21)
 200f460:	103fa41e 	bne	r2,zero,200f2f4 <__sfvwrite_r+0x410>
    }
  return 0;
 200f464:	0005883a 	mov	r2,zero
 200f468:	00000906 	br	200f490 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200f46c:	0001883a 	nop
 200f470:	00000306 	br	200f480 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200f474:	0001883a 	nop
 200f478:	00000106 	br	200f480 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200f47c:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200f480:	8080030b 	ldhu	r2,12(r16)
 200f484:	10801014 	ori	r2,r2,64
 200f488:	8080030d 	sth	r2,12(r16)
  return EOF;
 200f48c:	00bfffc4 	movi	r2,-1
}
 200f490:	e6fff904 	addi	sp,fp,-28
 200f494:	dfc00817 	ldw	ra,32(sp)
 200f498:	df000717 	ldw	fp,28(sp)
 200f49c:	dd800617 	ldw	r22,24(sp)
 200f4a0:	dd400517 	ldw	r21,20(sp)
 200f4a4:	dd000417 	ldw	r20,16(sp)
 200f4a8:	dcc00317 	ldw	r19,12(sp)
 200f4ac:	dc800217 	ldw	r18,8(sp)
 200f4b0:	dc400117 	ldw	r17,4(sp)
 200f4b4:	dc000017 	ldw	r16,0(sp)
 200f4b8:	dec00904 	addi	sp,sp,36
 200f4bc:	f800283a 	ret

0200f4c0 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200f4c0:	defff804 	addi	sp,sp,-32
 200f4c4:	dfc00715 	stw	ra,28(sp)
 200f4c8:	df000615 	stw	fp,24(sp)
 200f4cc:	dd000515 	stw	r20,20(sp)
 200f4d0:	dcc00415 	stw	r19,16(sp)
 200f4d4:	dc800315 	stw	r18,12(sp)
 200f4d8:	dc400215 	stw	r17,8(sp)
 200f4dc:	dc000115 	stw	r16,4(sp)
 200f4e0:	df000604 	addi	fp,sp,24
 200f4e4:	e13ffa15 	stw	r4,-24(fp)
 200f4e8:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200f4ec:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f4f0:	e0bffa17 	ldw	r2,-24(fp)
 200f4f4:	1440b804 	addi	r17,r2,736
 200f4f8:	00001b06 	br	200f568 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f4fc:	8c000217 	ldw	r16,8(r17)
 200f500:	8c800117 	ldw	r18,4(r17)
 200f504:	00001506 	br	200f55c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200f508:	8080030b 	ldhu	r2,12(r16)
 200f50c:	10bfffcc 	andi	r2,r2,65535
 200f510:	10a0001c 	xori	r2,r2,32768
 200f514:	10a00004 	addi	r2,r2,-32768
 200f518:	10000f26 	beq	r2,zero,200f558 <_fwalk+0x98>
 200f51c:	8080030b 	ldhu	r2,12(r16)
 200f520:	10bfffcc 	andi	r2,r2,65535
 200f524:	10a0001c 	xori	r2,r2,32768
 200f528:	10a00004 	addi	r2,r2,-32768
 200f52c:	10800060 	cmpeqi	r2,r2,1
 200f530:	1000091e 	bne	r2,zero,200f558 <_fwalk+0x98>
 200f534:	8080038b 	ldhu	r2,14(r16)
 200f538:	10bfffcc 	andi	r2,r2,65535
 200f53c:	10a0001c 	xori	r2,r2,32768
 200f540:	10a00004 	addi	r2,r2,-32768
 200f544:	10bfffe0 	cmpeqi	r2,r2,-1
 200f548:	1000031e 	bne	r2,zero,200f558 <_fwalk+0x98>
	ret |= (*function) (fp);
 200f54c:	8009883a 	mov	r4,r16
 200f550:	a03ee83a 	callr	r20
 200f554:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f558:	84001a04 	addi	r16,r16,104
 200f55c:	94bfffc4 	addi	r18,r18,-1
 200f560:	903fe90e 	bge	r18,zero,200f508 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f564:	8c400017 	ldw	r17,0(r17)
 200f568:	883fe41e 	bne	r17,zero,200f4fc <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200f56c:	9805883a 	mov	r2,r19
}
 200f570:	e6fffb04 	addi	sp,fp,-20
 200f574:	dfc00617 	ldw	ra,24(sp)
 200f578:	df000517 	ldw	fp,20(sp)
 200f57c:	dd000417 	ldw	r20,16(sp)
 200f580:	dcc00317 	ldw	r19,12(sp)
 200f584:	dc800217 	ldw	r18,8(sp)
 200f588:	dc400117 	ldw	r17,4(sp)
 200f58c:	dc000017 	ldw	r16,0(sp)
 200f590:	dec00704 	addi	sp,sp,28
 200f594:	f800283a 	ret

0200f598 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200f598:	defff804 	addi	sp,sp,-32
 200f59c:	dfc00715 	stw	ra,28(sp)
 200f5a0:	df000615 	stw	fp,24(sp)
 200f5a4:	dd000515 	stw	r20,20(sp)
 200f5a8:	dcc00415 	stw	r19,16(sp)
 200f5ac:	dc800315 	stw	r18,12(sp)
 200f5b0:	dc400215 	stw	r17,8(sp)
 200f5b4:	dc000115 	stw	r16,4(sp)
 200f5b8:	df000604 	addi	fp,sp,24
 200f5bc:	e13ffa15 	stw	r4,-24(fp)
 200f5c0:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200f5c4:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f5c8:	e0bffa17 	ldw	r2,-24(fp)
 200f5cc:	1440b804 	addi	r17,r2,736
 200f5d0:	00001c06 	br	200f644 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f5d4:	8c000217 	ldw	r16,8(r17)
 200f5d8:	8c800117 	ldw	r18,4(r17)
 200f5dc:	00001606 	br	200f638 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200f5e0:	8080030b 	ldhu	r2,12(r16)
 200f5e4:	10bfffcc 	andi	r2,r2,65535
 200f5e8:	10a0001c 	xori	r2,r2,32768
 200f5ec:	10a00004 	addi	r2,r2,-32768
 200f5f0:	10001026 	beq	r2,zero,200f634 <_fwalk_reent+0x9c>
 200f5f4:	8080030b 	ldhu	r2,12(r16)
 200f5f8:	10bfffcc 	andi	r2,r2,65535
 200f5fc:	10a0001c 	xori	r2,r2,32768
 200f600:	10a00004 	addi	r2,r2,-32768
 200f604:	10800060 	cmpeqi	r2,r2,1
 200f608:	10000a1e 	bne	r2,zero,200f634 <_fwalk_reent+0x9c>
 200f60c:	8080038b 	ldhu	r2,14(r16)
 200f610:	10bfffcc 	andi	r2,r2,65535
 200f614:	10a0001c 	xori	r2,r2,32768
 200f618:	10a00004 	addi	r2,r2,-32768
 200f61c:	10bfffe0 	cmpeqi	r2,r2,-1
 200f620:	1000041e 	bne	r2,zero,200f634 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200f624:	800b883a 	mov	r5,r16
 200f628:	e13ffa17 	ldw	r4,-24(fp)
 200f62c:	a03ee83a 	callr	r20
 200f630:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f634:	84001a04 	addi	r16,r16,104
 200f638:	94bfffc4 	addi	r18,r18,-1
 200f63c:	903fe80e 	bge	r18,zero,200f5e0 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f640:	8c400017 	ldw	r17,0(r17)
 200f644:	883fe31e 	bne	r17,zero,200f5d4 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200f648:	9805883a 	mov	r2,r19
}
 200f64c:	e6fffb04 	addi	sp,fp,-20
 200f650:	dfc00617 	ldw	ra,24(sp)
 200f654:	df000517 	ldw	fp,20(sp)
 200f658:	dd000417 	ldw	r20,16(sp)
 200f65c:	dcc00317 	ldw	r19,12(sp)
 200f660:	dc800217 	ldw	r18,8(sp)
 200f664:	dc400117 	ldw	r17,4(sp)
 200f668:	dc000017 	ldw	r16,0(sp)
 200f66c:	dec00704 	addi	sp,sp,28
 200f670:	f800283a 	ret

0200f674 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200f674:	defffb04 	addi	sp,sp,-20
 200f678:	dfc00415 	stw	ra,16(sp)
 200f67c:	df000315 	stw	fp,12(sp)
 200f680:	df000304 	addi	fp,sp,12
 200f684:	e13ffd15 	stw	r4,-12(fp)
 200f688:	e17ffe15 	stw	r5,-8(fp)
 200f68c:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200f690:	e0bfff17 	ldw	r2,-4(fp)
 200f694:	10001126 	beq	r2,zero,200f6dc <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200f698:	014080b4 	movhi	r5,514
 200f69c:	29498b04 	addi	r5,r5,9772
 200f6a0:	e13fff17 	ldw	r4,-4(fp)
 200f6a4:	20136740 	call	2013674 <strcmp>
 200f6a8:	10000c26 	beq	r2,zero,200f6dc <_setlocale_r+0x68>
 200f6ac:	014080b4 	movhi	r5,514
 200f6b0:	29498d04 	addi	r5,r5,9780
 200f6b4:	e13fff17 	ldw	r4,-4(fp)
 200f6b8:	20136740 	call	2013674 <strcmp>
 200f6bc:	10000726 	beq	r2,zero,200f6dc <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200f6c0:	014080b4 	movhi	r5,514
 200f6c4:	29498a04 	addi	r5,r5,9768
 200f6c8:	e13fff17 	ldw	r4,-4(fp)
 200f6cc:	20136740 	call	2013674 <strcmp>
 200f6d0:	10000226 	beq	r2,zero,200f6dc <_setlocale_r+0x68>
        return NULL;
 200f6d4:	0005883a 	mov	r2,zero
 200f6d8:	00000206 	br	200f6e4 <_setlocale_r+0x70>
    }
  return "C";
 200f6dc:	008080b4 	movhi	r2,514
 200f6e0:	10898d04 	addi	r2,r2,9780
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200f6e4:	e037883a 	mov	sp,fp
 200f6e8:	dfc00117 	ldw	ra,4(sp)
 200f6ec:	df000017 	ldw	fp,0(sp)
 200f6f0:	dec00204 	addi	sp,sp,8
 200f6f4:	f800283a 	ret

0200f6f8 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200f6f8:	deffff04 	addi	sp,sp,-4
 200f6fc:	df000015 	stw	fp,0(sp)
 200f700:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200f704:	008080b4 	movhi	r2,514
 200f708:	108b7004 	addi	r2,r2,11712
#endif
}
 200f70c:	e037883a 	mov	sp,fp
 200f710:	df000017 	ldw	fp,0(sp)
 200f714:	dec00104 	addi	sp,sp,4
 200f718:	f800283a 	ret

0200f71c <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200f71c:	deffff04 	addi	sp,sp,-4
 200f720:	df000015 	stw	fp,0(sp)
 200f724:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200f728:	d0a03217 	ldw	r2,-32568(gp)
#endif
}
 200f72c:	e037883a 	mov	sp,fp
 200f730:	df000017 	ldw	fp,0(sp)
 200f734:	dec00104 	addi	sp,sp,4
 200f738:	f800283a 	ret

0200f73c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200f73c:	deffff04 	addi	sp,sp,-4
 200f740:	df000015 	stw	fp,0(sp)
 200f744:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200f748:	008080b4 	movhi	r2,514
 200f74c:	108b7804 	addi	r2,r2,11744
#endif
}
 200f750:	e037883a 	mov	sp,fp
 200f754:	df000017 	ldw	fp,0(sp)
 200f758:	dec00104 	addi	sp,sp,4
 200f75c:	f800283a 	ret

0200f760 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200f760:	deffff04 	addi	sp,sp,-4
 200f764:	df000015 	stw	fp,0(sp)
 200f768:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200f76c:	d0a79a17 	ldw	r2,-24984(gp)
}
 200f770:	e037883a 	mov	sp,fp
 200f774:	df000017 	ldw	fp,0(sp)
 200f778:	dec00104 	addi	sp,sp,4
 200f77c:	f800283a 	ret

0200f780 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200f780:	defffe04 	addi	sp,sp,-8
 200f784:	df000115 	stw	fp,4(sp)
 200f788:	df000104 	addi	fp,sp,4
 200f78c:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200f790:	008080b4 	movhi	r2,514
 200f794:	108b6204 	addi	r2,r2,11656
}
 200f798:	e037883a 	mov	sp,fp
 200f79c:	df000017 	ldw	fp,0(sp)
 200f7a0:	dec00104 	addi	sp,sp,4
 200f7a4:	f800283a 	ret

0200f7a8 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200f7a8:	defffc04 	addi	sp,sp,-16
 200f7ac:	dfc00315 	stw	ra,12(sp)
 200f7b0:	df000215 	stw	fp,8(sp)
 200f7b4:	df000204 	addi	fp,sp,8
 200f7b8:	e13ffe15 	stw	r4,-8(fp)
 200f7bc:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200f7c0:	d0a03017 	ldw	r2,-32576(gp)
 200f7c4:	e1bfff17 	ldw	r6,-4(fp)
 200f7c8:	e17ffe17 	ldw	r5,-8(fp)
 200f7cc:	1009883a 	mov	r4,r2
 200f7d0:	200f6740 	call	200f674 <_setlocale_r>
}
 200f7d4:	e037883a 	mov	sp,fp
 200f7d8:	dfc00117 	ldw	ra,4(sp)
 200f7dc:	df000017 	ldw	fp,0(sp)
 200f7e0:	dec00204 	addi	sp,sp,8
 200f7e4:	f800283a 	ret

0200f7e8 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200f7e8:	defffe04 	addi	sp,sp,-8
 200f7ec:	dfc00115 	stw	ra,4(sp)
 200f7f0:	df000015 	stw	fp,0(sp)
 200f7f4:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200f7f8:	d0a03017 	ldw	r2,-32576(gp)
 200f7fc:	1009883a 	mov	r4,r2
 200f800:	200f7800 	call	200f780 <_localeconv_r>
}
 200f804:	e037883a 	mov	sp,fp
 200f808:	dfc00117 	ldw	ra,4(sp)
 200f80c:	df000017 	ldw	fp,0(sp)
 200f810:	dec00204 	addi	sp,sp,8
 200f814:	f800283a 	ret

0200f818 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200f818:	deffea04 	addi	sp,sp,-88
 200f81c:	dfc01515 	stw	ra,84(sp)
 200f820:	df001415 	stw	fp,80(sp)
 200f824:	dcc01315 	stw	r19,76(sp)
 200f828:	dc801215 	stw	r18,72(sp)
 200f82c:	dc401115 	stw	r17,68(sp)
 200f830:	dc001015 	stw	r16,64(sp)
 200f834:	df001404 	addi	fp,sp,80
 200f838:	e13ffb15 	stw	r4,-20(fp)
 200f83c:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200f840:	8080030b 	ldhu	r2,12(r16)
 200f844:	10bfffcc 	andi	r2,r2,65535
 200f848:	1080008c 	andi	r2,r2,2
 200f84c:	10000726 	beq	r2,zero,200f86c <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200f850:	808010c4 	addi	r2,r16,67
 200f854:	80800015 	stw	r2,0(r16)
 200f858:	80800017 	ldw	r2,0(r16)
 200f85c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200f860:	00800044 	movi	r2,1
 200f864:	80800515 	stw	r2,20(r16)
 200f868:	00006d06 	br	200fa20 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200f86c:	8080038b 	ldhu	r2,14(r16)
 200f870:	10bfffcc 	andi	r2,r2,65535
 200f874:	10a0001c 	xori	r2,r2,32768
 200f878:	10a00004 	addi	r2,r2,-32768
 200f87c:	10000916 	blt	r2,zero,200f8a4 <__smakebuf_r+0x8c>
 200f880:	8080038b 	ldhu	r2,14(r16)
 200f884:	10bfffcc 	andi	r2,r2,65535
 200f888:	10a0001c 	xori	r2,r2,32768
 200f88c:	10a00004 	addi	r2,r2,-32768
 200f890:	e1bfec04 	addi	r6,fp,-80
 200f894:	100b883a 	mov	r5,r2
 200f898:	e13ffb17 	ldw	r4,-20(fp)
 200f89c:	20153700 	call	2015370 <_fstat_r>
 200f8a0:	10000c0e 	bge	r2,zero,200f8d4 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200f8a4:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200f8a8:	8080030b 	ldhu	r2,12(r16)
 200f8ac:	10bfffcc 	andi	r2,r2,65535
 200f8b0:	1080200c 	andi	r2,r2,128
 200f8b4:	10000226 	beq	r2,zero,200f8c0 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200f8b8:	04401004 	movi	r17,64
 200f8bc:	00000106 	br	200f8c4 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200f8c0:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200f8c4:	8080030b 	ldhu	r2,12(r16)
 200f8c8:	10820014 	ori	r2,r2,2048
 200f8cc:	8080030d 	sth	r2,12(r16)
 200f8d0:	00001606 	br	200f92c <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200f8d4:	e0bfed17 	ldw	r2,-76(fp)
 200f8d8:	10bc000c 	andi	r2,r2,61440
 200f8dc:	10880020 	cmpeqi	r2,r2,8192
 200f8e0:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200f8e4:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200f8e8:	e0bfed17 	ldw	r2,-76(fp)
 200f8ec:	10fc000c 	andi	r3,r2,61440
 200f8f0:	00a00014 	movui	r2,32768
 200f8f4:	18800a1e 	bne	r3,r2,200f920 <__smakebuf_r+0x108>
 200f8f8:	80c00a17 	ldw	r3,40(r16)
 200f8fc:	00808074 	movhi	r2,513
 200f900:	108d6004 	addi	r2,r2,13696
 200f904:	1880061e 	bne	r3,r2,200f920 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200f908:	8080030b 	ldhu	r2,12(r16)
 200f90c:	10810014 	ori	r2,r2,1024
 200f910:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200f914:	00810004 	movi	r2,1024
 200f918:	80801315 	stw	r2,76(r16)
 200f91c:	00000306 	br	200f92c <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200f920:	8080030b 	ldhu	r2,12(r16)
 200f924:	10820014 	ori	r2,r2,2048
 200f928:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200f92c:	90001126 	beq	r18,zero,200f974 <__smakebuf_r+0x15c>
 200f930:	8080038b 	ldhu	r2,14(r16)
 200f934:	10bfffcc 	andi	r2,r2,65535
 200f938:	10a0001c 	xori	r2,r2,32768
 200f93c:	10a00004 	addi	r2,r2,-32768
 200f940:	100b883a 	mov	r5,r2
 200f944:	e13ffb17 	ldw	r4,-20(fp)
 200f948:	20153d80 	call	20153d8 <_isatty_r>
 200f94c:	10000926 	beq	r2,zero,200f974 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200f950:	8080030b 	ldhu	r2,12(r16)
 200f954:	10800054 	ori	r2,r2,1
 200f958:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200f95c:	808010c4 	addi	r2,r16,67
 200f960:	80800015 	stw	r2,0(r16)
 200f964:	80800017 	ldw	r2,0(r16)
 200f968:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200f96c:	00800044 	movi	r2,1
 200f970:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200f974:	880b883a 	mov	r5,r17
 200f978:	e13ffb17 	ldw	r4,-20(fp)
 200f97c:	200fdf80 	call	200fdf8 <_malloc_r>
 200f980:	1027883a 	mov	r19,r2
 200f984:	98000e1e 	bne	r19,zero,200f9c0 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200f988:	8080030b 	ldhu	r2,12(r16)
 200f98c:	10bfffcc 	andi	r2,r2,65535
 200f990:	1080800c 	andi	r2,r2,512
 200f994:	1000221e 	bne	r2,zero,200fa20 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200f998:	8080030b 	ldhu	r2,12(r16)
 200f99c:	10800094 	ori	r2,r2,2
 200f9a0:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200f9a4:	808010c4 	addi	r2,r16,67
 200f9a8:	80800015 	stw	r2,0(r16)
 200f9ac:	80800017 	ldw	r2,0(r16)
 200f9b0:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200f9b4:	00800044 	movi	r2,1
 200f9b8:	80800515 	stw	r2,20(r16)
 200f9bc:	00001806 	br	200fa20 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200f9c0:	e0fffb17 	ldw	r3,-20(fp)
 200f9c4:	00808074 	movhi	r2,513
 200f9c8:	10b94804 	addi	r2,r2,-6880
 200f9cc:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200f9d0:	8080030b 	ldhu	r2,12(r16)
 200f9d4:	10802014 	ori	r2,r2,128
 200f9d8:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200f9dc:	84c00015 	stw	r19,0(r16)
 200f9e0:	80800017 	ldw	r2,0(r16)
 200f9e4:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200f9e8:	8805883a 	mov	r2,r17
 200f9ec:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200f9f0:	90000b26 	beq	r18,zero,200fa20 <__smakebuf_r+0x208>
 200f9f4:	8080038b 	ldhu	r2,14(r16)
 200f9f8:	10bfffcc 	andi	r2,r2,65535
 200f9fc:	10a0001c 	xori	r2,r2,32768
 200fa00:	10a00004 	addi	r2,r2,-32768
 200fa04:	100b883a 	mov	r5,r2
 200fa08:	e13ffb17 	ldw	r4,-20(fp)
 200fa0c:	20153d80 	call	20153d8 <_isatty_r>
 200fa10:	10000326 	beq	r2,zero,200fa20 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200fa14:	8080030b 	ldhu	r2,12(r16)
 200fa18:	10800054 	ori	r2,r2,1
 200fa1c:	8080030d 	sth	r2,12(r16)
    }
}
 200fa20:	e6fffc04 	addi	sp,fp,-16
 200fa24:	dfc00517 	ldw	ra,20(sp)
 200fa28:	df000417 	ldw	fp,16(sp)
 200fa2c:	dcc00317 	ldw	r19,12(sp)
 200fa30:	dc800217 	ldw	r18,8(sp)
 200fa34:	dc400117 	ldw	r17,4(sp)
 200fa38:	dc000017 	ldw	r16,0(sp)
 200fa3c:	dec00604 	addi	sp,sp,24
 200fa40:	f800283a 	ret

0200fa44 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200fa44:	defff104 	addi	sp,sp,-60
 200fa48:	dfc00e15 	stw	ra,56(sp)
 200fa4c:	df000d15 	stw	fp,52(sp)
 200fa50:	df000d04 	addi	fp,sp,52
 200fa54:	e13ffe15 	stw	r4,-8(fp)
 200fa58:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200fa5c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200fa60:	008080b4 	movhi	r2,514
 200fa64:	108b8004 	addi	r2,r2,11776
 200fa68:	10800217 	ldw	r2,8(r2)
 200fa6c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200fa70:	e0bff817 	ldw	r2,-32(fp)
 200fa74:	10c00117 	ldw	r3,4(r2)
 200fa78:	00bfff04 	movi	r2,-4
 200fa7c:	1884703a 	and	r2,r3,r2
 200fa80:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200fa84:	e0fff817 	ldw	r3,-32(fp)
 200fa88:	e0bff917 	ldw	r2,-28(fp)
 200fa8c:	1885883a 	add	r2,r3,r2
 200fa90:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200fa94:	d0e79b17 	ldw	r3,-24980(gp)
 200fa98:	e0bfff17 	ldw	r2,-4(fp)
 200fa9c:	1885883a 	add	r2,r3,r2
 200faa0:	10800404 	addi	r2,r2,16
 200faa4:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200faa8:	00840004 	movi	r2,4096
 200faac:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200fab0:	d0a03417 	ldw	r2,-32560(gp)
 200fab4:	10bfffe0 	cmpeqi	r2,r2,-1
 200fab8:	1000081e 	bne	r2,zero,200fadc <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200fabc:	e0fffb17 	ldw	r3,-20(fp)
 200fac0:	e0bff617 	ldw	r2,-40(fp)
 200fac4:	1885883a 	add	r2,r3,r2
 200fac8:	10ffffc4 	addi	r3,r2,-1
 200facc:	e0bffb17 	ldw	r2,-20(fp)
 200fad0:	0085c83a 	sub	r2,zero,r2
 200fad4:	1884703a 	and	r2,r3,r2
 200fad8:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200fadc:	e0bff617 	ldw	r2,-40(fp)
 200fae0:	100b883a 	mov	r5,r2
 200fae4:	e13ffe17 	ldw	r4,-8(fp)
 200fae8:	20133a00 	call	20133a0 <_sbrk_r>
 200faec:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200faf0:	e0bff317 	ldw	r2,-52(fp)
 200faf4:	10bfffe0 	cmpeqi	r2,r2,-1
 200faf8:	1000b91e 	bne	r2,zero,200fde0 <malloc_extend_top+0x39c>
 200fafc:	e0fff317 	ldw	r3,-52(fp)
 200fb00:	e0bffa17 	ldw	r2,-24(fp)
 200fb04:	1880042e 	bgeu	r3,r2,200fb18 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200fb08:	008080b4 	movhi	r2,514
 200fb0c:	108b8004 	addi	r2,r2,11776
 200fb10:	e0fff817 	ldw	r3,-32(fp)
 200fb14:	1880b21e 	bne	r3,r2,200fde0 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200fb18:	008080b4 	movhi	r2,514
 200fb1c:	1098d204 	addi	r2,r2,25416
 200fb20:	10800017 	ldw	r2,0(r2)
 200fb24:	1007883a 	mov	r3,r2
 200fb28:	e0bff617 	ldw	r2,-40(fp)
 200fb2c:	1885883a 	add	r2,r3,r2
 200fb30:	1007883a 	mov	r3,r2
 200fb34:	008080b4 	movhi	r2,514
 200fb38:	1098d204 	addi	r2,r2,25416
 200fb3c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200fb40:	e0fff317 	ldw	r3,-52(fp)
 200fb44:	e0bffa17 	ldw	r2,-24(fp)
 200fb48:	1880101e 	bne	r3,r2,200fb8c <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200fb4c:	e0bffb17 	ldw	r2,-20(fp)
 200fb50:	10ffffc4 	addi	r3,r2,-1
 200fb54:	e0bffa17 	ldw	r2,-24(fp)
 200fb58:	1884703a 	and	r2,r3,r2
 200fb5c:	10000b1e 	bne	r2,zero,200fb8c <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200fb60:	e0fff617 	ldw	r3,-40(fp)
 200fb64:	e0bff917 	ldw	r2,-28(fp)
 200fb68:	1885883a 	add	r2,r3,r2
 200fb6c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200fb70:	008080b4 	movhi	r2,514
 200fb74:	108b8004 	addi	r2,r2,11776
 200fb78:	10800217 	ldw	r2,8(r2)
 200fb7c:	e0fffc17 	ldw	r3,-16(fp)
 200fb80:	18c00054 	ori	r3,r3,1
 200fb84:	10c00115 	stw	r3,4(r2)
 200fb88:	00008006 	br	200fd8c <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200fb8c:	d0a03417 	ldw	r2,-32560(gp)
 200fb90:	10bfffd8 	cmpnei	r2,r2,-1
 200fb94:	1000031e 	bne	r2,zero,200fba4 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200fb98:	e0bff317 	ldw	r2,-52(fp)
 200fb9c:	d0a03415 	stw	r2,-32560(gp)
 200fba0:	00000a06 	br	200fbcc <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200fba4:	008080b4 	movhi	r2,514
 200fba8:	1098d204 	addi	r2,r2,25416
 200fbac:	10c00017 	ldw	r3,0(r2)
 200fbb0:	e13ff317 	ldw	r4,-52(fp)
 200fbb4:	e0bffa17 	ldw	r2,-24(fp)
 200fbb8:	2085c83a 	sub	r2,r4,r2
 200fbbc:	1887883a 	add	r3,r3,r2
 200fbc0:	008080b4 	movhi	r2,514
 200fbc4:	1098d204 	addi	r2,r2,25416
 200fbc8:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200fbcc:	e0bff317 	ldw	r2,-52(fp)
 200fbd0:	10800204 	addi	r2,r2,8
 200fbd4:	108001cc 	andi	r2,r2,7
 200fbd8:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200fbdc:	e0bffd17 	ldw	r2,-12(fp)
 200fbe0:	10000926 	beq	r2,zero,200fc08 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200fbe4:	00c00204 	movi	r3,8
 200fbe8:	e0bffd17 	ldw	r2,-12(fp)
 200fbec:	1885c83a 	sub	r2,r3,r2
 200fbf0:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200fbf4:	e0fff317 	ldw	r3,-52(fp)
 200fbf8:	e0bff417 	ldw	r2,-48(fp)
 200fbfc:	1885883a 	add	r2,r3,r2
 200fc00:	e0bff315 	stw	r2,-52(fp)
 200fc04:	00000106 	br	200fc0c <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200fc08:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200fc0c:	e0fff317 	ldw	r3,-52(fp)
 200fc10:	e0bff617 	ldw	r2,-40(fp)
 200fc14:	1885883a 	add	r2,r3,r2
 200fc18:	1007883a 	mov	r3,r2
 200fc1c:	e0bffb17 	ldw	r2,-20(fp)
 200fc20:	10bfffc4 	addi	r2,r2,-1
 200fc24:	1884703a 	and	r2,r3,r2
 200fc28:	e0fffb17 	ldw	r3,-20(fp)
 200fc2c:	1885c83a 	sub	r2,r3,r2
 200fc30:	e0fff417 	ldw	r3,-48(fp)
 200fc34:	1885883a 	add	r2,r3,r2
 200fc38:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200fc3c:	e0bff417 	ldw	r2,-48(fp)
 200fc40:	100b883a 	mov	r5,r2
 200fc44:	e13ffe17 	ldw	r4,-8(fp)
 200fc48:	20133a00 	call	20133a0 <_sbrk_r>
 200fc4c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200fc50:	e0bff517 	ldw	r2,-44(fp)
 200fc54:	10bfffd8 	cmpnei	r2,r2,-1
 200fc58:	1000051e 	bne	r2,zero,200fc70 <malloc_extend_top+0x22c>
      {
	correction = 0;
 200fc5c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200fc60:	00800044 	movi	r2,1
 200fc64:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200fc68:	e0bff317 	ldw	r2,-52(fp)
 200fc6c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200fc70:	008080b4 	movhi	r2,514
 200fc74:	1098d204 	addi	r2,r2,25416
 200fc78:	10800017 	ldw	r2,0(r2)
 200fc7c:	1007883a 	mov	r3,r2
 200fc80:	e0bff417 	ldw	r2,-48(fp)
 200fc84:	1885883a 	add	r2,r3,r2
 200fc88:	1007883a 	mov	r3,r2
 200fc8c:	008080b4 	movhi	r2,514
 200fc90:	1098d204 	addi	r2,r2,25416
 200fc94:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200fc98:	008080b4 	movhi	r2,514
 200fc9c:	108b8004 	addi	r2,r2,11776
 200fca0:	e0fff317 	ldw	r3,-52(fp)
 200fca4:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200fca8:	e0fff517 	ldw	r3,-44(fp)
 200fcac:	e0bff317 	ldw	r2,-52(fp)
 200fcb0:	1885c83a 	sub	r2,r3,r2
 200fcb4:	1007883a 	mov	r3,r2
 200fcb8:	e0bff417 	ldw	r2,-48(fp)
 200fcbc:	1885883a 	add	r2,r3,r2
 200fcc0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200fcc4:	008080b4 	movhi	r2,514
 200fcc8:	108b8004 	addi	r2,r2,11776
 200fccc:	10800217 	ldw	r2,8(r2)
 200fcd0:	e0fffc17 	ldw	r3,-16(fp)
 200fcd4:	18c00054 	ori	r3,r3,1
 200fcd8:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200fcdc:	008080b4 	movhi	r2,514
 200fce0:	108b8004 	addi	r2,r2,11776
 200fce4:	e0fff817 	ldw	r3,-32(fp)
 200fce8:	18802826 	beq	r3,r2,200fd8c <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200fcec:	e0bff917 	ldw	r2,-28(fp)
 200fcf0:	10800428 	cmpgeui	r2,r2,16
 200fcf4:	1000061e 	bne	r2,zero,200fd10 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200fcf8:	008080b4 	movhi	r2,514
 200fcfc:	108b8004 	addi	r2,r2,11776
 200fd00:	10800217 	ldw	r2,8(r2)
 200fd04:	00c00044 	movi	r3,1
 200fd08:	10c00115 	stw	r3,4(r2)
        return;
 200fd0c:	00003506 	br	200fde4 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200fd10:	e0bff917 	ldw	r2,-28(fp)
 200fd14:	10fffd04 	addi	r3,r2,-12
 200fd18:	00bffe04 	movi	r2,-8
 200fd1c:	1884703a 	and	r2,r3,r2
 200fd20:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200fd24:	e0bff817 	ldw	r2,-32(fp)
 200fd28:	10800117 	ldw	r2,4(r2)
 200fd2c:	10c0004c 	andi	r3,r2,1
 200fd30:	e0bff917 	ldw	r2,-28(fp)
 200fd34:	1886b03a 	or	r3,r3,r2
 200fd38:	e0bff817 	ldw	r2,-32(fp)
 200fd3c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200fd40:	e0fff817 	ldw	r3,-32(fp)
 200fd44:	e0bff917 	ldw	r2,-28(fp)
 200fd48:	1885883a 	add	r2,r3,r2
 200fd4c:	00c00144 	movi	r3,5
 200fd50:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200fd54:	e0bff917 	ldw	r2,-28(fp)
 200fd58:	10800104 	addi	r2,r2,4
 200fd5c:	e0fff817 	ldw	r3,-32(fp)
 200fd60:	1885883a 	add	r2,r3,r2
 200fd64:	00c00144 	movi	r3,5
 200fd68:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200fd6c:	e0bff917 	ldw	r2,-28(fp)
 200fd70:	10800430 	cmpltui	r2,r2,16
 200fd74:	1000051e 	bne	r2,zero,200fd8c <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200fd78:	e0bff817 	ldw	r2,-32(fp)
 200fd7c:	10800204 	addi	r2,r2,8
 200fd80:	100b883a 	mov	r5,r2
 200fd84:	e13ffe17 	ldw	r4,-8(fp)
 200fd88:	200e7b80 	call	200e7b8 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200fd8c:	008080b4 	movhi	r2,514
 200fd90:	1098d204 	addi	r2,r2,25416
 200fd94:	10800017 	ldw	r2,0(r2)
 200fd98:	1007883a 	mov	r3,r2
 200fd9c:	d0a79c17 	ldw	r2,-24976(gp)
 200fda0:	10c0042e 	bgeu	r2,r3,200fdb4 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200fda4:	008080b4 	movhi	r2,514
 200fda8:	1098d204 	addi	r2,r2,25416
 200fdac:	10800017 	ldw	r2,0(r2)
 200fdb0:	d0a79c15 	stw	r2,-24976(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200fdb4:	008080b4 	movhi	r2,514
 200fdb8:	1098d204 	addi	r2,r2,25416
 200fdbc:	10800017 	ldw	r2,0(r2)
 200fdc0:	1007883a 	mov	r3,r2
 200fdc4:	d0a79d17 	ldw	r2,-24972(gp)
 200fdc8:	10c0062e 	bgeu	r2,r3,200fde4 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200fdcc:	008080b4 	movhi	r2,514
 200fdd0:	1098d204 	addi	r2,r2,25416
 200fdd4:	10800017 	ldw	r2,0(r2)
 200fdd8:	d0a79d15 	stw	r2,-24972(gp)
 200fddc:	00000106 	br	200fde4 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200fde0:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200fde4:	e037883a 	mov	sp,fp
 200fde8:	dfc00117 	ldw	ra,4(sp)
 200fdec:	df000017 	ldw	fp,0(sp)
 200fdf0:	dec00204 	addi	sp,sp,8
 200fdf4:	f800283a 	ret

0200fdf8 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200fdf8:	deffef04 	addi	sp,sp,-68
 200fdfc:	dfc01015 	stw	ra,64(sp)
 200fe00:	df000f15 	stw	fp,60(sp)
 200fe04:	df000f04 	addi	fp,sp,60
 200fe08:	e13ffe15 	stw	r4,-8(fp)
 200fe0c:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200fe10:	e0bfff17 	ldw	r2,-4(fp)
 200fe14:	108002c4 	addi	r2,r2,11
 200fe18:	108005f0 	cmpltui	r2,r2,23
 200fe1c:	1000051e 	bne	r2,zero,200fe34 <_malloc_r+0x3c>
 200fe20:	e0bfff17 	ldw	r2,-4(fp)
 200fe24:	10c002c4 	addi	r3,r2,11
 200fe28:	00bffe04 	movi	r2,-8
 200fe2c:	1884703a 	and	r2,r3,r2
 200fe30:	00000106 	br	200fe38 <_malloc_r+0x40>
 200fe34:	00800404 	movi	r2,16
 200fe38:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200fe3c:	e0bffa17 	ldw	r2,-24(fp)
 200fe40:	10000316 	blt	r2,zero,200fe50 <_malloc_r+0x58>
 200fe44:	e0fffa17 	ldw	r3,-24(fp)
 200fe48:	e0bfff17 	ldw	r2,-4(fp)
 200fe4c:	1880052e 	bgeu	r3,r2,200fe64 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200fe50:	e0bffe17 	ldw	r2,-8(fp)
 200fe54:	00c00304 	movi	r3,12
 200fe58:	10c00015 	stw	r3,0(r2)
    return 0;
 200fe5c:	0005883a 	mov	r2,zero
 200fe60:	0002bf06 	br	2010960 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200fe64:	e13ffe17 	ldw	r4,-8(fp)
 200fe68:	201705c0 	call	201705c <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200fe6c:	e0bffa17 	ldw	r2,-24(fp)
 200fe70:	10807e28 	cmpgeui	r2,r2,504
 200fe74:	10003f1e 	bne	r2,zero,200ff74 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200fe78:	e0bffa17 	ldw	r2,-24(fp)
 200fe7c:	1004d0fa 	srli	r2,r2,3
 200fe80:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200fe84:	e0bff217 	ldw	r2,-56(fp)
 200fe88:	10800044 	addi	r2,r2,1
 200fe8c:	1085883a 	add	r2,r2,r2
 200fe90:	1085883a 	add	r2,r2,r2
 200fe94:	1087883a 	add	r3,r2,r2
 200fe98:	008080b4 	movhi	r2,514
 200fe9c:	108b8004 	addi	r2,r2,11776
 200fea0:	1885883a 	add	r2,r3,r2
 200fea4:	10bffe04 	addi	r2,r2,-8
 200fea8:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200feac:	e0bff917 	ldw	r2,-28(fp)
 200feb0:	10800317 	ldw	r2,12(r2)
 200feb4:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200feb8:	e0fff117 	ldw	r3,-60(fp)
 200febc:	e0bff917 	ldw	r2,-28(fp)
 200fec0:	1880061e 	bne	r3,r2,200fedc <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200fec4:	e0bff917 	ldw	r2,-28(fp)
 200fec8:	10800204 	addi	r2,r2,8
 200fecc:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200fed0:	e0bff917 	ldw	r2,-28(fp)
 200fed4:	10800317 	ldw	r2,12(r2)
 200fed8:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200fedc:	e0fff117 	ldw	r3,-60(fp)
 200fee0:	e0bff917 	ldw	r2,-28(fp)
 200fee4:	18801f26 	beq	r3,r2,200ff64 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200fee8:	e0bff117 	ldw	r2,-60(fp)
 200feec:	10c00117 	ldw	r3,4(r2)
 200fef0:	00bfff04 	movi	r2,-4
 200fef4:	1884703a 	and	r2,r3,r2
 200fef8:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200fefc:	e0bff117 	ldw	r2,-60(fp)
 200ff00:	10800317 	ldw	r2,12(r2)
 200ff04:	e0bff815 	stw	r2,-32(fp)
 200ff08:	e0bff117 	ldw	r2,-60(fp)
 200ff0c:	10800217 	ldw	r2,8(r2)
 200ff10:	e0bff715 	stw	r2,-36(fp)
 200ff14:	e0bff717 	ldw	r2,-36(fp)
 200ff18:	e0fff817 	ldw	r3,-32(fp)
 200ff1c:	10c00315 	stw	r3,12(r2)
 200ff20:	e0bff817 	ldw	r2,-32(fp)
 200ff24:	e0fff717 	ldw	r3,-36(fp)
 200ff28:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200ff2c:	e0fff117 	ldw	r3,-60(fp)
 200ff30:	e0bffb17 	ldw	r2,-20(fp)
 200ff34:	1885883a 	add	r2,r3,r2
 200ff38:	e13ff117 	ldw	r4,-60(fp)
 200ff3c:	e0fffb17 	ldw	r3,-20(fp)
 200ff40:	20c7883a 	add	r3,r4,r3
 200ff44:	18c00117 	ldw	r3,4(r3)
 200ff48:	18c00054 	ori	r3,r3,1
 200ff4c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200ff50:	e13ffe17 	ldw	r4,-8(fp)
 200ff54:	201717c0 	call	201717c <__malloc_unlock>
      return chunk2mem(victim);
 200ff58:	e0bff117 	ldw	r2,-60(fp)
 200ff5c:	10800204 	addi	r2,r2,8
 200ff60:	00027f06 	br	2010960 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200ff64:	e0bff217 	ldw	r2,-56(fp)
 200ff68:	10800084 	addi	r2,r2,2
 200ff6c:	e0bff215 	stw	r2,-56(fp)
 200ff70:	00007306 	br	2010140 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200ff74:	e0bffa17 	ldw	r2,-24(fp)
 200ff78:	1004d27a 	srli	r2,r2,9
 200ff7c:	1000031e 	bne	r2,zero,200ff8c <_malloc_r+0x194>
 200ff80:	e0bffa17 	ldw	r2,-24(fp)
 200ff84:	1004d0fa 	srli	r2,r2,3
 200ff88:	00002906 	br	2010030 <_malloc_r+0x238>
 200ff8c:	e0bffa17 	ldw	r2,-24(fp)
 200ff90:	1004d27a 	srli	r2,r2,9
 200ff94:	10800168 	cmpgeui	r2,r2,5
 200ff98:	1000041e 	bne	r2,zero,200ffac <_malloc_r+0x1b4>
 200ff9c:	e0bffa17 	ldw	r2,-24(fp)
 200ffa0:	1004d1ba 	srli	r2,r2,6
 200ffa4:	10800e04 	addi	r2,r2,56
 200ffa8:	00002106 	br	2010030 <_malloc_r+0x238>
 200ffac:	e0bffa17 	ldw	r2,-24(fp)
 200ffb0:	1004d27a 	srli	r2,r2,9
 200ffb4:	10800568 	cmpgeui	r2,r2,21
 200ffb8:	1000041e 	bne	r2,zero,200ffcc <_malloc_r+0x1d4>
 200ffbc:	e0bffa17 	ldw	r2,-24(fp)
 200ffc0:	1004d27a 	srli	r2,r2,9
 200ffc4:	108016c4 	addi	r2,r2,91
 200ffc8:	00001906 	br	2010030 <_malloc_r+0x238>
 200ffcc:	e0bffa17 	ldw	r2,-24(fp)
 200ffd0:	1004d27a 	srli	r2,r2,9
 200ffd4:	10801568 	cmpgeui	r2,r2,85
 200ffd8:	1000041e 	bne	r2,zero,200ffec <_malloc_r+0x1f4>
 200ffdc:	e0bffa17 	ldw	r2,-24(fp)
 200ffe0:	1004d33a 	srli	r2,r2,12
 200ffe4:	10801b84 	addi	r2,r2,110
 200ffe8:	00001106 	br	2010030 <_malloc_r+0x238>
 200ffec:	e0bffa17 	ldw	r2,-24(fp)
 200fff0:	1004d27a 	srli	r2,r2,9
 200fff4:	10805568 	cmpgeui	r2,r2,341
 200fff8:	1000041e 	bne	r2,zero,201000c <_malloc_r+0x214>
 200fffc:	e0bffa17 	ldw	r2,-24(fp)
 2010000:	1004d3fa 	srli	r2,r2,15
 2010004:	10801dc4 	addi	r2,r2,119
 2010008:	00000906 	br	2010030 <_malloc_r+0x238>
 201000c:	e0bffa17 	ldw	r2,-24(fp)
 2010010:	1004d27a 	srli	r2,r2,9
 2010014:	10815568 	cmpgeui	r2,r2,1365
 2010018:	1000041e 	bne	r2,zero,201002c <_malloc_r+0x234>
 201001c:	e0bffa17 	ldw	r2,-24(fp)
 2010020:	1004d4ba 	srli	r2,r2,18
 2010024:	10801f04 	addi	r2,r2,124
 2010028:	00000106 	br	2010030 <_malloc_r+0x238>
 201002c:	00801f84 	movi	r2,126
 2010030:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 2010034:	e0bff217 	ldw	r2,-56(fp)
 2010038:	10800044 	addi	r2,r2,1
 201003c:	1085883a 	add	r2,r2,r2
 2010040:	1085883a 	add	r2,r2,r2
 2010044:	1087883a 	add	r3,r2,r2
 2010048:	008080b4 	movhi	r2,514
 201004c:	108b8004 	addi	r2,r2,11776
 2010050:	1885883a 	add	r2,r3,r2
 2010054:	10bffe04 	addi	r2,r2,-8
 2010058:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 201005c:	e0bff317 	ldw	r2,-52(fp)
 2010060:	10800317 	ldw	r2,12(r2)
 2010064:	e0bff115 	stw	r2,-60(fp)
 2010068:	00002f06 	br	2010128 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 201006c:	e0bff117 	ldw	r2,-60(fp)
 2010070:	10c00117 	ldw	r3,4(r2)
 2010074:	00bfff04 	movi	r2,-4
 2010078:	1884703a 	and	r2,r3,r2
 201007c:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 2010080:	e0fffb17 	ldw	r3,-20(fp)
 2010084:	e0bffa17 	ldw	r2,-24(fp)
 2010088:	1885c83a 	sub	r2,r3,r2
 201008c:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 2010090:	e0bff417 	ldw	r2,-48(fp)
 2010094:	10800410 	cmplti	r2,r2,16
 2010098:	1000041e 	bne	r2,zero,20100ac <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 201009c:	e0bff217 	ldw	r2,-56(fp)
 20100a0:	10bfffc4 	addi	r2,r2,-1
 20100a4:	e0bff215 	stw	r2,-56(fp)
        break;   
 20100a8:	00002206 	br	2010134 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 20100ac:	e0bff417 	ldw	r2,-48(fp)
 20100b0:	10001a16 	blt	r2,zero,201011c <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 20100b4:	e0bff117 	ldw	r2,-60(fp)
 20100b8:	10800317 	ldw	r2,12(r2)
 20100bc:	e0bff815 	stw	r2,-32(fp)
 20100c0:	e0bff117 	ldw	r2,-60(fp)
 20100c4:	10800217 	ldw	r2,8(r2)
 20100c8:	e0bff715 	stw	r2,-36(fp)
 20100cc:	e0bff717 	ldw	r2,-36(fp)
 20100d0:	e0fff817 	ldw	r3,-32(fp)
 20100d4:	10c00315 	stw	r3,12(r2)
 20100d8:	e0bff817 	ldw	r2,-32(fp)
 20100dc:	e0fff717 	ldw	r3,-36(fp)
 20100e0:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 20100e4:	e0fff117 	ldw	r3,-60(fp)
 20100e8:	e0bffb17 	ldw	r2,-20(fp)
 20100ec:	1885883a 	add	r2,r3,r2
 20100f0:	e13ff117 	ldw	r4,-60(fp)
 20100f4:	e0fffb17 	ldw	r3,-20(fp)
 20100f8:	20c7883a 	add	r3,r4,r3
 20100fc:	18c00117 	ldw	r3,4(r3)
 2010100:	18c00054 	ori	r3,r3,1
 2010104:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 2010108:	e13ffe17 	ldw	r4,-8(fp)
 201010c:	201717c0 	call	201717c <__malloc_unlock>
        return chunk2mem(victim);
 2010110:	e0bff117 	ldw	r2,-60(fp)
 2010114:	10800204 	addi	r2,r2,8
 2010118:	00021106 	br	2010960 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 201011c:	e0bff117 	ldw	r2,-60(fp)
 2010120:	10800317 	ldw	r2,12(r2)
 2010124:	e0bff115 	stw	r2,-60(fp)
 2010128:	e0fff117 	ldw	r3,-60(fp)
 201012c:	e0bff317 	ldw	r2,-52(fp)
 2010130:	18bfce1e 	bne	r3,r2,201006c <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 2010134:	e0bff217 	ldw	r2,-56(fp)
 2010138:	10800044 	addi	r2,r2,1
 201013c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 2010140:	008080b4 	movhi	r2,514
 2010144:	108b8204 	addi	r2,r2,11784
 2010148:	10800217 	ldw	r2,8(r2)
 201014c:	e0bff115 	stw	r2,-60(fp)
 2010150:	008080b4 	movhi	r2,514
 2010154:	108b8204 	addi	r2,r2,11784
 2010158:	e0fff117 	ldw	r3,-60(fp)
 201015c:	1880e626 	beq	r3,r2,20104f8 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 2010160:	e0bff117 	ldw	r2,-60(fp)
 2010164:	10c00117 	ldw	r3,4(r2)
 2010168:	00bfff04 	movi	r2,-4
 201016c:	1884703a 	and	r2,r3,r2
 2010170:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 2010174:	e0fffb17 	ldw	r3,-20(fp)
 2010178:	e0bffa17 	ldw	r2,-24(fp)
 201017c:	1885c83a 	sub	r2,r3,r2
 2010180:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 2010184:	e0bff417 	ldw	r2,-48(fp)
 2010188:	10800410 	cmplti	r2,r2,16
 201018c:	1000271e 	bne	r2,zero,201022c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 2010190:	e0fff117 	ldw	r3,-60(fp)
 2010194:	e0bffa17 	ldw	r2,-24(fp)
 2010198:	1885883a 	add	r2,r3,r2
 201019c:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 20101a0:	e0bffa17 	ldw	r2,-24(fp)
 20101a4:	10c00054 	ori	r3,r2,1
 20101a8:	e0bff117 	ldw	r2,-60(fp)
 20101ac:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 20101b0:	00c080b4 	movhi	r3,514
 20101b4:	18cb8204 	addi	r3,r3,11784
 20101b8:	008080b4 	movhi	r2,514
 20101bc:	108b8204 	addi	r2,r2,11784
 20101c0:	e13ffc17 	ldw	r4,-16(fp)
 20101c4:	11000315 	stw	r4,12(r2)
 20101c8:	10800317 	ldw	r2,12(r2)
 20101cc:	18800215 	stw	r2,8(r3)
 20101d0:	008080b4 	movhi	r2,514
 20101d4:	108b8204 	addi	r2,r2,11784
 20101d8:	e0fffc17 	ldw	r3,-16(fp)
 20101dc:	18800315 	stw	r2,12(r3)
 20101e0:	e0bffc17 	ldw	r2,-16(fp)
 20101e4:	10c00317 	ldw	r3,12(r2)
 20101e8:	e0bffc17 	ldw	r2,-16(fp)
 20101ec:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 20101f0:	e0bff417 	ldw	r2,-48(fp)
 20101f4:	10800054 	ori	r2,r2,1
 20101f8:	1007883a 	mov	r3,r2
 20101fc:	e0bffc17 	ldw	r2,-16(fp)
 2010200:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 2010204:	e0bff417 	ldw	r2,-48(fp)
 2010208:	e0fffc17 	ldw	r3,-16(fp)
 201020c:	1885883a 	add	r2,r3,r2
 2010210:	e0fff417 	ldw	r3,-48(fp)
 2010214:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010218:	e13ffe17 	ldw	r4,-8(fp)
 201021c:	201717c0 	call	201717c <__malloc_unlock>
      return chunk2mem(victim);
 2010220:	e0bff117 	ldw	r2,-60(fp)
 2010224:	10800204 	addi	r2,r2,8
 2010228:	0001cd06 	br	2010960 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 201022c:	00c080b4 	movhi	r3,514
 2010230:	18cb8204 	addi	r3,r3,11784
 2010234:	008080b4 	movhi	r2,514
 2010238:	108b8204 	addi	r2,r2,11784
 201023c:	010080b4 	movhi	r4,514
 2010240:	210b8204 	addi	r4,r4,11784
 2010244:	11000315 	stw	r4,12(r2)
 2010248:	10800317 	ldw	r2,12(r2)
 201024c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 2010250:	e0bff417 	ldw	r2,-48(fp)
 2010254:	10000e16 	blt	r2,zero,2010290 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 2010258:	e0fff117 	ldw	r3,-60(fp)
 201025c:	e0bffb17 	ldw	r2,-20(fp)
 2010260:	1885883a 	add	r2,r3,r2
 2010264:	e13ff117 	ldw	r4,-60(fp)
 2010268:	e0fffb17 	ldw	r3,-20(fp)
 201026c:	20c7883a 	add	r3,r4,r3
 2010270:	18c00117 	ldw	r3,4(r3)
 2010274:	18c00054 	ori	r3,r3,1
 2010278:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 201027c:	e13ffe17 	ldw	r4,-8(fp)
 2010280:	201717c0 	call	201717c <__malloc_unlock>
      return chunk2mem(victim);
 2010284:	e0bff117 	ldw	r2,-60(fp)
 2010288:	10800204 	addi	r2,r2,8
 201028c:	0001b406 	br	2010960 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 2010290:	e0bffb17 	ldw	r2,-20(fp)
 2010294:	10808028 	cmpgeui	r2,r2,512
 2010298:	10002c1e 	bne	r2,zero,201034c <_malloc_r+0x554>
 201029c:	e0bffb17 	ldw	r2,-20(fp)
 20102a0:	1004d0fa 	srli	r2,r2,3
 20102a4:	e0bffd15 	stw	r2,-12(fp)
 20102a8:	00c080b4 	movhi	r3,514
 20102ac:	18cb8004 	addi	r3,r3,11776
 20102b0:	008080b4 	movhi	r2,514
 20102b4:	108b8004 	addi	r2,r2,11776
 20102b8:	11000117 	ldw	r4,4(r2)
 20102bc:	e0bffd17 	ldw	r2,-12(fp)
 20102c0:	1000010e 	bge	r2,zero,20102c8 <_malloc_r+0x4d0>
 20102c4:	108000c4 	addi	r2,r2,3
 20102c8:	1005d0ba 	srai	r2,r2,2
 20102cc:	100b883a 	mov	r5,r2
 20102d0:	00800044 	movi	r2,1
 20102d4:	1144983a 	sll	r2,r2,r5
 20102d8:	2084b03a 	or	r2,r4,r2
 20102dc:	18800115 	stw	r2,4(r3)
 20102e0:	e0bffd17 	ldw	r2,-12(fp)
 20102e4:	10800044 	addi	r2,r2,1
 20102e8:	1085883a 	add	r2,r2,r2
 20102ec:	1085883a 	add	r2,r2,r2
 20102f0:	1087883a 	add	r3,r2,r2
 20102f4:	008080b4 	movhi	r2,514
 20102f8:	108b8004 	addi	r2,r2,11776
 20102fc:	1885883a 	add	r2,r3,r2
 2010300:	10bffe04 	addi	r2,r2,-8
 2010304:	e0bff815 	stw	r2,-32(fp)
 2010308:	e0bff817 	ldw	r2,-32(fp)
 201030c:	10800217 	ldw	r2,8(r2)
 2010310:	e0bff715 	stw	r2,-36(fp)
 2010314:	e0bff117 	ldw	r2,-60(fp)
 2010318:	e0fff817 	ldw	r3,-32(fp)
 201031c:	10c00315 	stw	r3,12(r2)
 2010320:	e0bff117 	ldw	r2,-60(fp)
 2010324:	e0fff717 	ldw	r3,-36(fp)
 2010328:	10c00215 	stw	r3,8(r2)
 201032c:	e0bff817 	ldw	r2,-32(fp)
 2010330:	e0fff117 	ldw	r3,-60(fp)
 2010334:	10c00215 	stw	r3,8(r2)
 2010338:	e0bff817 	ldw	r2,-32(fp)
 201033c:	10c00217 	ldw	r3,8(r2)
 2010340:	e0bff717 	ldw	r2,-36(fp)
 2010344:	10c00315 	stw	r3,12(r2)
 2010348:	00006b06 	br	20104f8 <_malloc_r+0x700>
 201034c:	e0bffb17 	ldw	r2,-20(fp)
 2010350:	1004d27a 	srli	r2,r2,9
 2010354:	1000031e 	bne	r2,zero,2010364 <_malloc_r+0x56c>
 2010358:	e0bffb17 	ldw	r2,-20(fp)
 201035c:	1004d0fa 	srli	r2,r2,3
 2010360:	00002906 	br	2010408 <_malloc_r+0x610>
 2010364:	e0bffb17 	ldw	r2,-20(fp)
 2010368:	1004d27a 	srli	r2,r2,9
 201036c:	10800168 	cmpgeui	r2,r2,5
 2010370:	1000041e 	bne	r2,zero,2010384 <_malloc_r+0x58c>
 2010374:	e0bffb17 	ldw	r2,-20(fp)
 2010378:	1004d1ba 	srli	r2,r2,6
 201037c:	10800e04 	addi	r2,r2,56
 2010380:	00002106 	br	2010408 <_malloc_r+0x610>
 2010384:	e0bffb17 	ldw	r2,-20(fp)
 2010388:	1004d27a 	srli	r2,r2,9
 201038c:	10800568 	cmpgeui	r2,r2,21
 2010390:	1000041e 	bne	r2,zero,20103a4 <_malloc_r+0x5ac>
 2010394:	e0bffb17 	ldw	r2,-20(fp)
 2010398:	1004d27a 	srli	r2,r2,9
 201039c:	108016c4 	addi	r2,r2,91
 20103a0:	00001906 	br	2010408 <_malloc_r+0x610>
 20103a4:	e0bffb17 	ldw	r2,-20(fp)
 20103a8:	1004d27a 	srli	r2,r2,9
 20103ac:	10801568 	cmpgeui	r2,r2,85
 20103b0:	1000041e 	bne	r2,zero,20103c4 <_malloc_r+0x5cc>
 20103b4:	e0bffb17 	ldw	r2,-20(fp)
 20103b8:	1004d33a 	srli	r2,r2,12
 20103bc:	10801b84 	addi	r2,r2,110
 20103c0:	00001106 	br	2010408 <_malloc_r+0x610>
 20103c4:	e0bffb17 	ldw	r2,-20(fp)
 20103c8:	1004d27a 	srli	r2,r2,9
 20103cc:	10805568 	cmpgeui	r2,r2,341
 20103d0:	1000041e 	bne	r2,zero,20103e4 <_malloc_r+0x5ec>
 20103d4:	e0bffb17 	ldw	r2,-20(fp)
 20103d8:	1004d3fa 	srli	r2,r2,15
 20103dc:	10801dc4 	addi	r2,r2,119
 20103e0:	00000906 	br	2010408 <_malloc_r+0x610>
 20103e4:	e0bffb17 	ldw	r2,-20(fp)
 20103e8:	1004d27a 	srli	r2,r2,9
 20103ec:	10815568 	cmpgeui	r2,r2,1365
 20103f0:	1000041e 	bne	r2,zero,2010404 <_malloc_r+0x60c>
 20103f4:	e0bffb17 	ldw	r2,-20(fp)
 20103f8:	1004d4ba 	srli	r2,r2,18
 20103fc:	10801f04 	addi	r2,r2,124
 2010400:	00000106 	br	2010408 <_malloc_r+0x610>
 2010404:	00801f84 	movi	r2,126
 2010408:	e0bffd15 	stw	r2,-12(fp)
 201040c:	e0bffd17 	ldw	r2,-12(fp)
 2010410:	10800044 	addi	r2,r2,1
 2010414:	1085883a 	add	r2,r2,r2
 2010418:	1085883a 	add	r2,r2,r2
 201041c:	1087883a 	add	r3,r2,r2
 2010420:	008080b4 	movhi	r2,514
 2010424:	108b8004 	addi	r2,r2,11776
 2010428:	1885883a 	add	r2,r3,r2
 201042c:	10bffe04 	addi	r2,r2,-8
 2010430:	e0bff815 	stw	r2,-32(fp)
 2010434:	e0bff817 	ldw	r2,-32(fp)
 2010438:	10800217 	ldw	r2,8(r2)
 201043c:	e0bff715 	stw	r2,-36(fp)
 2010440:	e0fff717 	ldw	r3,-36(fp)
 2010444:	e0bff817 	ldw	r2,-32(fp)
 2010448:	1880121e 	bne	r3,r2,2010494 <_malloc_r+0x69c>
 201044c:	00c080b4 	movhi	r3,514
 2010450:	18cb8004 	addi	r3,r3,11776
 2010454:	008080b4 	movhi	r2,514
 2010458:	108b8004 	addi	r2,r2,11776
 201045c:	11000117 	ldw	r4,4(r2)
 2010460:	e0bffd17 	ldw	r2,-12(fp)
 2010464:	1000010e 	bge	r2,zero,201046c <_malloc_r+0x674>
 2010468:	108000c4 	addi	r2,r2,3
 201046c:	1005d0ba 	srai	r2,r2,2
 2010470:	100b883a 	mov	r5,r2
 2010474:	00800044 	movi	r2,1
 2010478:	1144983a 	sll	r2,r2,r5
 201047c:	2084b03a 	or	r2,r4,r2
 2010480:	18800115 	stw	r2,4(r3)
 2010484:	00000f06 	br	20104c4 <_malloc_r+0x6cc>
 2010488:	e0bff717 	ldw	r2,-36(fp)
 201048c:	10800217 	ldw	r2,8(r2)
 2010490:	e0bff715 	stw	r2,-36(fp)
 2010494:	e0fff717 	ldw	r3,-36(fp)
 2010498:	e0bff817 	ldw	r2,-32(fp)
 201049c:	18800626 	beq	r3,r2,20104b8 <_malloc_r+0x6c0>
 20104a0:	e0bff717 	ldw	r2,-36(fp)
 20104a4:	10c00117 	ldw	r3,4(r2)
 20104a8:	00bfff04 	movi	r2,-4
 20104ac:	1884703a 	and	r2,r3,r2
 20104b0:	e0fffb17 	ldw	r3,-20(fp)
 20104b4:	18bff436 	bltu	r3,r2,2010488 <_malloc_r+0x690>
 20104b8:	e0bff717 	ldw	r2,-36(fp)
 20104bc:	10800317 	ldw	r2,12(r2)
 20104c0:	e0bff815 	stw	r2,-32(fp)
 20104c4:	e0bff117 	ldw	r2,-60(fp)
 20104c8:	e0fff817 	ldw	r3,-32(fp)
 20104cc:	10c00315 	stw	r3,12(r2)
 20104d0:	e0bff117 	ldw	r2,-60(fp)
 20104d4:	e0fff717 	ldw	r3,-36(fp)
 20104d8:	10c00215 	stw	r3,8(r2)
 20104dc:	e0bff817 	ldw	r2,-32(fp)
 20104e0:	e0fff117 	ldw	r3,-60(fp)
 20104e4:	10c00215 	stw	r3,8(r2)
 20104e8:	e0bff817 	ldw	r2,-32(fp)
 20104ec:	10c00217 	ldw	r3,8(r2)
 20104f0:	e0bff717 	ldw	r2,-36(fp)
 20104f4:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 20104f8:	e0bff217 	ldw	r2,-56(fp)
 20104fc:	1000010e 	bge	r2,zero,2010504 <_malloc_r+0x70c>
 2010500:	108000c4 	addi	r2,r2,3
 2010504:	1005d0ba 	srai	r2,r2,2
 2010508:	1007883a 	mov	r3,r2
 201050c:	00800044 	movi	r2,1
 2010510:	10c4983a 	sll	r2,r2,r3
 2010514:	e0bff515 	stw	r2,-44(fp)
 2010518:	008080b4 	movhi	r2,514
 201051c:	108b8004 	addi	r2,r2,11776
 2010520:	10c00117 	ldw	r3,4(r2)
 2010524:	e0bff517 	ldw	r2,-44(fp)
 2010528:	1880c636 	bltu	r3,r2,2010844 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 201052c:	008080b4 	movhi	r2,514
 2010530:	108b8004 	addi	r2,r2,11776
 2010534:	10c00117 	ldw	r3,4(r2)
 2010538:	e0bff517 	ldw	r2,-44(fp)
 201053c:	1884703a 	and	r2,r3,r2
 2010540:	1000151e 	bne	r2,zero,2010598 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 2010544:	e0fff217 	ldw	r3,-56(fp)
 2010548:	00bfff04 	movi	r2,-4
 201054c:	1884703a 	and	r2,r3,r2
 2010550:	10800104 	addi	r2,r2,4
 2010554:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 2010558:	e0bff517 	ldw	r2,-44(fp)
 201055c:	1085883a 	add	r2,r2,r2
 2010560:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 2010564:	00000606 	br	2010580 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 2010568:	e0bff217 	ldw	r2,-56(fp)
 201056c:	10800104 	addi	r2,r2,4
 2010570:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 2010574:	e0bff517 	ldw	r2,-44(fp)
 2010578:	1085883a 	add	r2,r2,r2
 201057c:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 2010580:	008080b4 	movhi	r2,514
 2010584:	108b8004 	addi	r2,r2,11776
 2010588:	10c00117 	ldw	r3,4(r2)
 201058c:	e0bff517 	ldw	r2,-44(fp)
 2010590:	1884703a 	and	r2,r3,r2
 2010594:	103ff426 	beq	r2,zero,2010568 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 2010598:	e0bff217 	ldw	r2,-56(fp)
 201059c:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 20105a0:	e0bff217 	ldw	r2,-56(fp)
 20105a4:	10800044 	addi	r2,r2,1
 20105a8:	1085883a 	add	r2,r2,r2
 20105ac:	1085883a 	add	r2,r2,r2
 20105b0:	1087883a 	add	r3,r2,r2
 20105b4:	008080b4 	movhi	r2,514
 20105b8:	108b8004 	addi	r2,r2,11776
 20105bc:	1885883a 	add	r2,r3,r2
 20105c0:	10bffe04 	addi	r2,r2,-8
 20105c4:	e0bff315 	stw	r2,-52(fp)
 20105c8:	e0bff317 	ldw	r2,-52(fp)
 20105cc:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 20105d0:	e0bff317 	ldw	r2,-52(fp)
 20105d4:	10800317 	ldw	r2,12(r2)
 20105d8:	e0bff115 	stw	r2,-60(fp)
 20105dc:	00005e06 	br	2010758 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 20105e0:	e0bff117 	ldw	r2,-60(fp)
 20105e4:	10c00117 	ldw	r3,4(r2)
 20105e8:	00bfff04 	movi	r2,-4
 20105ec:	1884703a 	and	r2,r3,r2
 20105f0:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 20105f4:	e0fffb17 	ldw	r3,-20(fp)
 20105f8:	e0bffa17 	ldw	r2,-24(fp)
 20105fc:	1885c83a 	sub	r2,r3,r2
 2010600:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 2010604:	e0bff417 	ldw	r2,-48(fp)
 2010608:	10800410 	cmplti	r2,r2,16
 201060c:	1000331e 	bne	r2,zero,20106dc <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 2010610:	e0fff117 	ldw	r3,-60(fp)
 2010614:	e0bffa17 	ldw	r2,-24(fp)
 2010618:	1885883a 	add	r2,r3,r2
 201061c:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 2010620:	e0bffa17 	ldw	r2,-24(fp)
 2010624:	10c00054 	ori	r3,r2,1
 2010628:	e0bff117 	ldw	r2,-60(fp)
 201062c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2010630:	e0bff117 	ldw	r2,-60(fp)
 2010634:	10800317 	ldw	r2,12(r2)
 2010638:	e0bff815 	stw	r2,-32(fp)
 201063c:	e0bff117 	ldw	r2,-60(fp)
 2010640:	10800217 	ldw	r2,8(r2)
 2010644:	e0bff715 	stw	r2,-36(fp)
 2010648:	e0bff717 	ldw	r2,-36(fp)
 201064c:	e0fff817 	ldw	r3,-32(fp)
 2010650:	10c00315 	stw	r3,12(r2)
 2010654:	e0bff817 	ldw	r2,-32(fp)
 2010658:	e0fff717 	ldw	r3,-36(fp)
 201065c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 2010660:	00c080b4 	movhi	r3,514
 2010664:	18cb8204 	addi	r3,r3,11784
 2010668:	008080b4 	movhi	r2,514
 201066c:	108b8204 	addi	r2,r2,11784
 2010670:	e13ffc17 	ldw	r4,-16(fp)
 2010674:	11000315 	stw	r4,12(r2)
 2010678:	10800317 	ldw	r2,12(r2)
 201067c:	18800215 	stw	r2,8(r3)
 2010680:	008080b4 	movhi	r2,514
 2010684:	108b8204 	addi	r2,r2,11784
 2010688:	e0fffc17 	ldw	r3,-16(fp)
 201068c:	18800315 	stw	r2,12(r3)
 2010690:	e0bffc17 	ldw	r2,-16(fp)
 2010694:	10c00317 	ldw	r3,12(r2)
 2010698:	e0bffc17 	ldw	r2,-16(fp)
 201069c:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 20106a0:	e0bff417 	ldw	r2,-48(fp)
 20106a4:	10800054 	ori	r2,r2,1
 20106a8:	1007883a 	mov	r3,r2
 20106ac:	e0bffc17 	ldw	r2,-16(fp)
 20106b0:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 20106b4:	e0bff417 	ldw	r2,-48(fp)
 20106b8:	e0fffc17 	ldw	r3,-16(fp)
 20106bc:	1885883a 	add	r2,r3,r2
 20106c0:	e0fff417 	ldw	r3,-48(fp)
 20106c4:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 20106c8:	e13ffe17 	ldw	r4,-8(fp)
 20106cc:	201717c0 	call	201717c <__malloc_unlock>
            return chunk2mem(victim);
 20106d0:	e0bff117 	ldw	r2,-60(fp)
 20106d4:	10800204 	addi	r2,r2,8
 20106d8:	0000a106 	br	2010960 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 20106dc:	e0bff417 	ldw	r2,-48(fp)
 20106e0:	10001a16 	blt	r2,zero,201074c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 20106e4:	e0fff117 	ldw	r3,-60(fp)
 20106e8:	e0bffb17 	ldw	r2,-20(fp)
 20106ec:	1885883a 	add	r2,r3,r2
 20106f0:	e13ff117 	ldw	r4,-60(fp)
 20106f4:	e0fffb17 	ldw	r3,-20(fp)
 20106f8:	20c7883a 	add	r3,r4,r3
 20106fc:	18c00117 	ldw	r3,4(r3)
 2010700:	18c00054 	ori	r3,r3,1
 2010704:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2010708:	e0bff117 	ldw	r2,-60(fp)
 201070c:	10800317 	ldw	r2,12(r2)
 2010710:	e0bff815 	stw	r2,-32(fp)
 2010714:	e0bff117 	ldw	r2,-60(fp)
 2010718:	10800217 	ldw	r2,8(r2)
 201071c:	e0bff715 	stw	r2,-36(fp)
 2010720:	e0bff717 	ldw	r2,-36(fp)
 2010724:	e0fff817 	ldw	r3,-32(fp)
 2010728:	10c00315 	stw	r3,12(r2)
 201072c:	e0bff817 	ldw	r2,-32(fp)
 2010730:	e0fff717 	ldw	r3,-36(fp)
 2010734:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 2010738:	e13ffe17 	ldw	r4,-8(fp)
 201073c:	201717c0 	call	201717c <__malloc_unlock>
            return chunk2mem(victim);
 2010740:	e0bff117 	ldw	r2,-60(fp)
 2010744:	10800204 	addi	r2,r2,8
 2010748:	00008506 	br	2010960 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 201074c:	e0bff117 	ldw	r2,-60(fp)
 2010750:	10800317 	ldw	r2,12(r2)
 2010754:	e0bff115 	stw	r2,-60(fp)
 2010758:	e0fff117 	ldw	r3,-60(fp)
 201075c:	e0bff317 	ldw	r2,-52(fp)
 2010760:	18bf9f1e 	bne	r3,r2,20105e0 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 2010764:	e0bff317 	ldw	r2,-52(fp)
 2010768:	10800204 	addi	r2,r2,8
 201076c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 2010770:	e0bff217 	ldw	r2,-56(fp)
 2010774:	10800044 	addi	r2,r2,1
 2010778:	e0bff215 	stw	r2,-56(fp)
 201077c:	e0bff217 	ldw	r2,-56(fp)
 2010780:	108000cc 	andi	r2,r2,3
 2010784:	103f921e 	bne	r2,zero,20105d0 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 2010788:	e0bff617 	ldw	r2,-40(fp)
 201078c:	108000cc 	andi	r2,r2,3
 2010790:	10000a1e 	bne	r2,zero,20107bc <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 2010794:	008080b4 	movhi	r2,514
 2010798:	108b8004 	addi	r2,r2,11776
 201079c:	00c080b4 	movhi	r3,514
 20107a0:	18cb8004 	addi	r3,r3,11776
 20107a4:	19000117 	ldw	r4,4(r3)
 20107a8:	e0fff517 	ldw	r3,-44(fp)
 20107ac:	00c6303a 	nor	r3,zero,r3
 20107b0:	20c6703a 	and	r3,r4,r3
 20107b4:	10c00115 	stw	r3,4(r2)
          break;
 20107b8:	00000a06 	br	20107e4 <_malloc_r+0x9ec>
        }
        --startidx;
 20107bc:	e0bff617 	ldw	r2,-40(fp)
 20107c0:	10bfffc4 	addi	r2,r2,-1
 20107c4:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 20107c8:	e0bff917 	ldw	r2,-28(fp)
 20107cc:	10bffe04 	addi	r2,r2,-8
 20107d0:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 20107d4:	e0bff917 	ldw	r2,-28(fp)
 20107d8:	10c00217 	ldw	r3,8(r2)
 20107dc:	e0bff917 	ldw	r2,-28(fp)
 20107e0:	18bfe926 	beq	r3,r2,2010788 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 20107e4:	e0bff517 	ldw	r2,-44(fp)
 20107e8:	1085883a 	add	r2,r2,r2
 20107ec:	e0bff515 	stw	r2,-44(fp)
 20107f0:	008080b4 	movhi	r2,514
 20107f4:	108b8004 	addi	r2,r2,11776
 20107f8:	10c00117 	ldw	r3,4(r2)
 20107fc:	e0bff517 	ldw	r2,-44(fp)
 2010800:	18801036 	bltu	r3,r2,2010844 <_malloc_r+0xa4c>
 2010804:	e0bff517 	ldw	r2,-44(fp)
 2010808:	10000e26 	beq	r2,zero,2010844 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 201080c:	00000606 	br	2010828 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 2010810:	e0bff217 	ldw	r2,-56(fp)
 2010814:	10800104 	addi	r2,r2,4
 2010818:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 201081c:	e0bff517 	ldw	r2,-44(fp)
 2010820:	1085883a 	add	r2,r2,r2
 2010824:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 2010828:	008080b4 	movhi	r2,514
 201082c:	108b8004 	addi	r2,r2,11776
 2010830:	10c00117 	ldw	r3,4(r2)
 2010834:	e0bff517 	ldw	r2,-44(fp)
 2010838:	1884703a 	and	r2,r3,r2
 201083c:	103ff426 	beq	r2,zero,2010810 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 2010840:	003f5506 	br	2010598 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 2010844:	008080b4 	movhi	r2,514
 2010848:	108b8004 	addi	r2,r2,11776
 201084c:	10800217 	ldw	r2,8(r2)
 2010850:	10c00117 	ldw	r3,4(r2)
 2010854:	00bfff04 	movi	r2,-4
 2010858:	1886703a 	and	r3,r3,r2
 201085c:	e0bffa17 	ldw	r2,-24(fp)
 2010860:	1885c83a 	sub	r2,r3,r2
 2010864:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2010868:	008080b4 	movhi	r2,514
 201086c:	108b8004 	addi	r2,r2,11776
 2010870:	10800217 	ldw	r2,8(r2)
 2010874:	10c00117 	ldw	r3,4(r2)
 2010878:	00bfff04 	movi	r2,-4
 201087c:	1886703a 	and	r3,r3,r2
 2010880:	e0bffa17 	ldw	r2,-24(fp)
 2010884:	18800336 	bltu	r3,r2,2010894 <_malloc_r+0xa9c>
 2010888:	e0bff417 	ldw	r2,-48(fp)
 201088c:	10800408 	cmpgei	r2,r2,16
 2010890:	10001b1e 	bne	r2,zero,2010900 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 2010894:	e17ffa17 	ldw	r5,-24(fp)
 2010898:	e13ffe17 	ldw	r4,-8(fp)
 201089c:	200fa440 	call	200fa44 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 20108a0:	008080b4 	movhi	r2,514
 20108a4:	108b8004 	addi	r2,r2,11776
 20108a8:	10800217 	ldw	r2,8(r2)
 20108ac:	10c00117 	ldw	r3,4(r2)
 20108b0:	00bfff04 	movi	r2,-4
 20108b4:	1886703a 	and	r3,r3,r2
 20108b8:	e0bffa17 	ldw	r2,-24(fp)
 20108bc:	1885c83a 	sub	r2,r3,r2
 20108c0:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 20108c4:	008080b4 	movhi	r2,514
 20108c8:	108b8004 	addi	r2,r2,11776
 20108cc:	10800217 	ldw	r2,8(r2)
 20108d0:	10c00117 	ldw	r3,4(r2)
 20108d4:	00bfff04 	movi	r2,-4
 20108d8:	1886703a 	and	r3,r3,r2
 20108dc:	e0bffa17 	ldw	r2,-24(fp)
 20108e0:	18800336 	bltu	r3,r2,20108f0 <_malloc_r+0xaf8>
 20108e4:	e0bff417 	ldw	r2,-48(fp)
 20108e8:	10800408 	cmpgei	r2,r2,16
 20108ec:	1000041e 	bne	r2,zero,2010900 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 20108f0:	e13ffe17 	ldw	r4,-8(fp)
 20108f4:	201717c0 	call	201717c <__malloc_unlock>
      return 0; /* propagate failure */
 20108f8:	0005883a 	mov	r2,zero
 20108fc:	00001806 	br	2010960 <_malloc_r+0xb68>
    }
  }

  victim = top;
 2010900:	008080b4 	movhi	r2,514
 2010904:	108b8004 	addi	r2,r2,11776
 2010908:	10800217 	ldw	r2,8(r2)
 201090c:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 2010910:	e0bffa17 	ldw	r2,-24(fp)
 2010914:	10c00054 	ori	r3,r2,1
 2010918:	e0bff117 	ldw	r2,-60(fp)
 201091c:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 2010920:	008080b4 	movhi	r2,514
 2010924:	108b8004 	addi	r2,r2,11776
 2010928:	e13ff117 	ldw	r4,-60(fp)
 201092c:	e0fffa17 	ldw	r3,-24(fp)
 2010930:	20c7883a 	add	r3,r4,r3
 2010934:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 2010938:	008080b4 	movhi	r2,514
 201093c:	108b8004 	addi	r2,r2,11776
 2010940:	10800217 	ldw	r2,8(r2)
 2010944:	e0fff417 	ldw	r3,-48(fp)
 2010948:	18c00054 	ori	r3,r3,1
 201094c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 2010950:	e13ffe17 	ldw	r4,-8(fp)
 2010954:	201717c0 	call	201717c <__malloc_unlock>
  return chunk2mem(victim);
 2010958:	e0bff117 	ldw	r2,-60(fp)
 201095c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 2010960:	e037883a 	mov	sp,fp
 2010964:	dfc00117 	ldw	ra,4(sp)
 2010968:	df000017 	ldw	fp,0(sp)
 201096c:	dec00204 	addi	sp,sp,8
 2010970:	f800283a 	ret

02010974 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 2010974:	defff704 	addi	sp,sp,-36
 2010978:	df000815 	stw	fp,32(sp)
 201097c:	df000804 	addi	fp,sp,32
 2010980:	e13ffd15 	stw	r4,-12(fp)
 2010984:	e17ffe15 	stw	r5,-8(fp)
 2010988:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 201098c:	e0bffd17 	ldw	r2,-12(fp)
 2010990:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 2010994:	e0bffe17 	ldw	r2,-8(fp)
 2010998:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 201099c:	00001006 	br	20109e0 <memchr+0x6c>
    {
      if (!length--)
 20109a0:	e0bfff17 	ldw	r2,-4(fp)
 20109a4:	10ffffc4 	addi	r3,r2,-1
 20109a8:	e0ffff15 	stw	r3,-4(fp)
 20109ac:	1000021e 	bne	r2,zero,20109b8 <memchr+0x44>
        return NULL;
 20109b0:	0005883a 	mov	r2,zero
 20109b4:	00005a06 	br	2010b20 <memchr+0x1ac>
      if (*src == d)
 20109b8:	e0bff817 	ldw	r2,-32(fp)
 20109bc:	10800003 	ldbu	r2,0(r2)
 20109c0:	10c03fcc 	andi	r3,r2,255
 20109c4:	e0bffc03 	ldbu	r2,-16(fp)
 20109c8:	1880021e 	bne	r3,r2,20109d4 <memchr+0x60>
        return (void *) src;
 20109cc:	e0bff817 	ldw	r2,-32(fp)
 20109d0:	00005306 	br	2010b20 <memchr+0x1ac>
      src++;
 20109d4:	e0bff817 	ldw	r2,-32(fp)
 20109d8:	10800044 	addi	r2,r2,1
 20109dc:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 20109e0:	e0bff817 	ldw	r2,-32(fp)
 20109e4:	108000cc 	andi	r2,r2,3
 20109e8:	103fed1e 	bne	r2,zero,20109a0 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 20109ec:	e0bfff17 	ldw	r2,-4(fp)
 20109f0:	10800130 	cmpltui	r2,r2,4
 20109f4:	1000451e 	bne	r2,zero,2010b0c <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 20109f8:	e0bff817 	ldw	r2,-32(fp)
 20109fc:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 2010a00:	e0bffc03 	ldbu	r2,-16(fp)
 2010a04:	1006923a 	slli	r3,r2,8
 2010a08:	e0bffc03 	ldbu	r2,-16(fp)
 2010a0c:	1884b03a 	or	r2,r3,r2
 2010a10:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 2010a14:	e0bffa17 	ldw	r2,-24(fp)
 2010a18:	1004943a 	slli	r2,r2,16
 2010a1c:	e0fffa17 	ldw	r3,-24(fp)
 2010a20:	1884b03a 	or	r2,r3,r2
 2010a24:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2010a28:	00800804 	movi	r2,32
 2010a2c:	e0bffb15 	stw	r2,-20(fp)
 2010a30:	00000906 	br	2010a58 <memchr+0xe4>
        mask = (mask << i) | mask;
 2010a34:	e0fffa17 	ldw	r3,-24(fp)
 2010a38:	e0bffb17 	ldw	r2,-20(fp)
 2010a3c:	1884983a 	sll	r2,r3,r2
 2010a40:	e0fffa17 	ldw	r3,-24(fp)
 2010a44:	1884b03a 	or	r2,r3,r2
 2010a48:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2010a4c:	e0bffb17 	ldw	r2,-20(fp)
 2010a50:	1085883a 	add	r2,r2,r2
 2010a54:	e0bffb15 	stw	r2,-20(fp)
 2010a58:	e0bffb17 	ldw	r2,-20(fp)
 2010a5c:	10800830 	cmpltui	r2,r2,32
 2010a60:	103ff41e 	bne	r2,zero,2010a34 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2010a64:	00001706 	br	2010ac4 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 2010a68:	e0bff917 	ldw	r2,-28(fp)
 2010a6c:	10c00017 	ldw	r3,0(r2)
 2010a70:	e0bffa17 	ldw	r2,-24(fp)
 2010a74:	1886f03a 	xor	r3,r3,r2
 2010a78:	00bfbff4 	movhi	r2,65279
 2010a7c:	10bfbfc4 	addi	r2,r2,-257
 2010a80:	1887883a 	add	r3,r3,r2
 2010a84:	e0bff917 	ldw	r2,-28(fp)
 2010a88:	11000017 	ldw	r4,0(r2)
 2010a8c:	e0bffa17 	ldw	r2,-24(fp)
 2010a90:	2084f03a 	xor	r2,r4,r2
 2010a94:	0084303a 	nor	r2,zero,r2
 2010a98:	1886703a 	and	r3,r3,r2
 2010a9c:	00a02074 	movhi	r2,32897
 2010aa0:	10a02004 	addi	r2,r2,-32640
 2010aa4:	1884703a 	and	r2,r3,r2
 2010aa8:	10000a1e 	bne	r2,zero,2010ad4 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 2010aac:	e0bfff17 	ldw	r2,-4(fp)
 2010ab0:	10bfff04 	addi	r2,r2,-4
 2010ab4:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 2010ab8:	e0bff917 	ldw	r2,-28(fp)
 2010abc:	10800104 	addi	r2,r2,4
 2010ac0:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2010ac4:	e0bfff17 	ldw	r2,-4(fp)
 2010ac8:	10800128 	cmpgeui	r2,r2,4
 2010acc:	103fe61e 	bne	r2,zero,2010a68 <memchr+0xf4>
 2010ad0:	00000106 	br	2010ad8 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 2010ad4:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 2010ad8:	e0bff917 	ldw	r2,-28(fp)
 2010adc:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2010ae0:	00000a06 	br	2010b0c <memchr+0x198>
    {
      if (*src == d)
 2010ae4:	e0bff817 	ldw	r2,-32(fp)
 2010ae8:	10800003 	ldbu	r2,0(r2)
 2010aec:	10c03fcc 	andi	r3,r2,255
 2010af0:	e0bffc03 	ldbu	r2,-16(fp)
 2010af4:	1880021e 	bne	r3,r2,2010b00 <memchr+0x18c>
        return (void *) src;
 2010af8:	e0bff817 	ldw	r2,-32(fp)
 2010afc:	00000806 	br	2010b20 <memchr+0x1ac>
      src++;
 2010b00:	e0bff817 	ldw	r2,-32(fp)
 2010b04:	10800044 	addi	r2,r2,1
 2010b08:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2010b0c:	e0bfff17 	ldw	r2,-4(fp)
 2010b10:	10ffffc4 	addi	r3,r2,-1
 2010b14:	e0ffff15 	stw	r3,-4(fp)
 2010b18:	103ff21e 	bne	r2,zero,2010ae4 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 2010b1c:	0005883a 	mov	r2,zero
}
 2010b20:	e037883a 	mov	sp,fp
 2010b24:	df000017 	ldw	fp,0(sp)
 2010b28:	dec00104 	addi	sp,sp,4
 2010b2c:	f800283a 	ret

02010b30 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 2010b30:	defff804 	addi	sp,sp,-32
 2010b34:	df000715 	stw	fp,28(sp)
 2010b38:	df000704 	addi	fp,sp,28
 2010b3c:	e13ffd15 	stw	r4,-12(fp)
 2010b40:	e17ffe15 	stw	r5,-8(fp)
 2010b44:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 2010b48:	e0bffd17 	ldw	r2,-12(fp)
 2010b4c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 2010b50:	e0bffe17 	ldw	r2,-8(fp)
 2010b54:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2010b58:	e0fffa17 	ldw	r3,-24(fp)
 2010b5c:	e0bff917 	ldw	r2,-28(fp)
 2010b60:	18801d2e 	bgeu	r3,r2,2010bd8 <memmove+0xa8>
 2010b64:	e0fffa17 	ldw	r3,-24(fp)
 2010b68:	e0bfff17 	ldw	r2,-4(fp)
 2010b6c:	1885883a 	add	r2,r3,r2
 2010b70:	e0fff917 	ldw	r3,-28(fp)
 2010b74:	1880182e 	bgeu	r3,r2,2010bd8 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 2010b78:	e0fffa17 	ldw	r3,-24(fp)
 2010b7c:	e0bfff17 	ldw	r2,-4(fp)
 2010b80:	1885883a 	add	r2,r3,r2
 2010b84:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 2010b88:	e0fff917 	ldw	r3,-28(fp)
 2010b8c:	e0bfff17 	ldw	r2,-4(fp)
 2010b90:	1885883a 	add	r2,r3,r2
 2010b94:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 2010b98:	00000a06 	br	2010bc4 <memmove+0x94>
	{
	  *--dst = *--src;
 2010b9c:	e0bff917 	ldw	r2,-28(fp)
 2010ba0:	10bfffc4 	addi	r2,r2,-1
 2010ba4:	e0bff915 	stw	r2,-28(fp)
 2010ba8:	e0bffa17 	ldw	r2,-24(fp)
 2010bac:	10bfffc4 	addi	r2,r2,-1
 2010bb0:	e0bffa15 	stw	r2,-24(fp)
 2010bb4:	e0bffa17 	ldw	r2,-24(fp)
 2010bb8:	10c00003 	ldbu	r3,0(r2)
 2010bbc:	e0bff917 	ldw	r2,-28(fp)
 2010bc0:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 2010bc4:	e0bfff17 	ldw	r2,-4(fp)
 2010bc8:	10ffffc4 	addi	r3,r2,-1
 2010bcc:	e0ffff15 	stw	r3,-4(fp)
 2010bd0:	103ff21e 	bne	r2,zero,2010b9c <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2010bd4:	00005306 	br	2010d24 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 2010bd8:	e0bfff17 	ldw	r2,-4(fp)
 2010bdc:	10800430 	cmpltui	r2,r2,16
 2010be0:	10004c1e 	bne	r2,zero,2010d14 <memmove+0x1e4>
 2010be4:	e0fffa17 	ldw	r3,-24(fp)
 2010be8:	e0bff917 	ldw	r2,-28(fp)
 2010bec:	1884b03a 	or	r2,r3,r2
 2010bf0:	108000cc 	andi	r2,r2,3
 2010bf4:	1000471e 	bne	r2,zero,2010d14 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 2010bf8:	e0bff917 	ldw	r2,-28(fp)
 2010bfc:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 2010c00:	e0bffa17 	ldw	r2,-24(fp)
 2010c04:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2010c08:	00002306 	br	2010c98 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 2010c0c:	e0bffb17 	ldw	r2,-20(fp)
 2010c10:	10c00104 	addi	r3,r2,4
 2010c14:	e0fffb15 	stw	r3,-20(fp)
 2010c18:	e0fffc17 	ldw	r3,-16(fp)
 2010c1c:	19000104 	addi	r4,r3,4
 2010c20:	e13ffc15 	stw	r4,-16(fp)
 2010c24:	18c00017 	ldw	r3,0(r3)
 2010c28:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010c2c:	e0bffb17 	ldw	r2,-20(fp)
 2010c30:	10c00104 	addi	r3,r2,4
 2010c34:	e0fffb15 	stw	r3,-20(fp)
 2010c38:	e0fffc17 	ldw	r3,-16(fp)
 2010c3c:	19000104 	addi	r4,r3,4
 2010c40:	e13ffc15 	stw	r4,-16(fp)
 2010c44:	18c00017 	ldw	r3,0(r3)
 2010c48:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010c4c:	e0bffb17 	ldw	r2,-20(fp)
 2010c50:	10c00104 	addi	r3,r2,4
 2010c54:	e0fffb15 	stw	r3,-20(fp)
 2010c58:	e0fffc17 	ldw	r3,-16(fp)
 2010c5c:	19000104 	addi	r4,r3,4
 2010c60:	e13ffc15 	stw	r4,-16(fp)
 2010c64:	18c00017 	ldw	r3,0(r3)
 2010c68:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010c6c:	e0bffb17 	ldw	r2,-20(fp)
 2010c70:	10c00104 	addi	r3,r2,4
 2010c74:	e0fffb15 	stw	r3,-20(fp)
 2010c78:	e0fffc17 	ldw	r3,-16(fp)
 2010c7c:	19000104 	addi	r4,r3,4
 2010c80:	e13ffc15 	stw	r4,-16(fp)
 2010c84:	18c00017 	ldw	r3,0(r3)
 2010c88:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 2010c8c:	e0bfff17 	ldw	r2,-4(fp)
 2010c90:	10bffc04 	addi	r2,r2,-16
 2010c94:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2010c98:	e0bfff17 	ldw	r2,-4(fp)
 2010c9c:	10800428 	cmpgeui	r2,r2,16
 2010ca0:	103fda1e 	bne	r2,zero,2010c0c <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 2010ca4:	00000b06 	br	2010cd4 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 2010ca8:	e0bffb17 	ldw	r2,-20(fp)
 2010cac:	10c00104 	addi	r3,r2,4
 2010cb0:	e0fffb15 	stw	r3,-20(fp)
 2010cb4:	e0fffc17 	ldw	r3,-16(fp)
 2010cb8:	19000104 	addi	r4,r3,4
 2010cbc:	e13ffc15 	stw	r4,-16(fp)
 2010cc0:	18c00017 	ldw	r3,0(r3)
 2010cc4:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 2010cc8:	e0bfff17 	ldw	r2,-4(fp)
 2010ccc:	10bfff04 	addi	r2,r2,-4
 2010cd0:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 2010cd4:	e0bfff17 	ldw	r2,-4(fp)
 2010cd8:	10800128 	cmpgeui	r2,r2,4
 2010cdc:	103ff21e 	bne	r2,zero,2010ca8 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 2010ce0:	e0bffb17 	ldw	r2,-20(fp)
 2010ce4:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 2010ce8:	e0bffc17 	ldw	r2,-16(fp)
 2010cec:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 2010cf0:	00000806 	br	2010d14 <memmove+0x1e4>
        {
          *dst++ = *src++;
 2010cf4:	e0bff917 	ldw	r2,-28(fp)
 2010cf8:	10c00044 	addi	r3,r2,1
 2010cfc:	e0fff915 	stw	r3,-28(fp)
 2010d00:	e0fffa17 	ldw	r3,-24(fp)
 2010d04:	19000044 	addi	r4,r3,1
 2010d08:	e13ffa15 	stw	r4,-24(fp)
 2010d0c:	18c00003 	ldbu	r3,0(r3)
 2010d10:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 2010d14:	e0bfff17 	ldw	r2,-4(fp)
 2010d18:	10ffffc4 	addi	r3,r2,-1
 2010d1c:	e0ffff15 	stw	r3,-4(fp)
 2010d20:	103ff41e 	bne	r2,zero,2010cf4 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 2010d24:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2010d28:	e037883a 	mov	sp,fp
 2010d2c:	df000017 	ldw	fp,0(sp)
 2010d30:	dec00104 	addi	sp,sp,4
 2010d34:	f800283a 	ret

02010d38 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 2010d38:	defffa04 	addi	sp,sp,-24
 2010d3c:	dfc00515 	stw	ra,20(sp)
 2010d40:	df000415 	stw	fp,16(sp)
 2010d44:	df000404 	addi	fp,sp,16
 2010d48:	e13ffe15 	stw	r4,-8(fp)
 2010d4c:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 2010d50:	e0bffe17 	ldw	r2,-8(fp)
 2010d54:	10801317 	ldw	r2,76(r2)
 2010d58:	10000c1e 	bne	r2,zero,2010d8c <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 2010d5c:	01800844 	movi	r6,33
 2010d60:	01400104 	movi	r5,4
 2010d64:	e13ffe17 	ldw	r4,-8(fp)
 2010d68:	2014dc40 	call	2014dc4 <_calloc_r>
 2010d6c:	1007883a 	mov	r3,r2
 2010d70:	e0bffe17 	ldw	r2,-8(fp)
 2010d74:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 2010d78:	e0bffe17 	ldw	r2,-8(fp)
 2010d7c:	10801317 	ldw	r2,76(r2)
 2010d80:	1000021e 	bne	r2,zero,2010d8c <_Balloc+0x54>
	{
	  return NULL;
 2010d84:	0005883a 	mov	r2,zero
 2010d88:	00003206 	br	2010e54 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 2010d8c:	e0bffe17 	ldw	r2,-8(fp)
 2010d90:	10c01317 	ldw	r3,76(r2)
 2010d94:	e0bfff17 	ldw	r2,-4(fp)
 2010d98:	1085883a 	add	r2,r2,r2
 2010d9c:	1085883a 	add	r2,r2,r2
 2010da0:	1885883a 	add	r2,r3,r2
 2010da4:	10800017 	ldw	r2,0(r2)
 2010da8:	e0bffc15 	stw	r2,-16(fp)
 2010dac:	e0bffc17 	ldw	r2,-16(fp)
 2010db0:	10000a26 	beq	r2,zero,2010ddc <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 2010db4:	e0bffe17 	ldw	r2,-8(fp)
 2010db8:	10c01317 	ldw	r3,76(r2)
 2010dbc:	e0bfff17 	ldw	r2,-4(fp)
 2010dc0:	1085883a 	add	r2,r2,r2
 2010dc4:	1085883a 	add	r2,r2,r2
 2010dc8:	1885883a 	add	r2,r3,r2
 2010dcc:	e0fffc17 	ldw	r3,-16(fp)
 2010dd0:	18c00017 	ldw	r3,0(r3)
 2010dd4:	10c00015 	stw	r3,0(r2)
 2010dd8:	00001706 	br	2010e38 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 2010ddc:	00c00044 	movi	r3,1
 2010de0:	e0bfff17 	ldw	r2,-4(fp)
 2010de4:	1884983a 	sll	r2,r3,r2
 2010de8:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 2010dec:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 2010df0:	10800144 	addi	r2,r2,5
 2010df4:	1085883a 	add	r2,r2,r2
 2010df8:	1085883a 	add	r2,r2,r2
 2010dfc:	100d883a 	mov	r6,r2
 2010e00:	01400044 	movi	r5,1
 2010e04:	e13ffe17 	ldw	r4,-8(fp)
 2010e08:	2014dc40 	call	2014dc4 <_calloc_r>
 2010e0c:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 2010e10:	e0bffc17 	ldw	r2,-16(fp)
 2010e14:	1000021e 	bne	r2,zero,2010e20 <_Balloc+0xe8>
 2010e18:	0005883a 	mov	r2,zero
 2010e1c:	00000d06 	br	2010e54 <_Balloc+0x11c>
      rv->_k = k;
 2010e20:	e0bffc17 	ldw	r2,-16(fp)
 2010e24:	e0ffff17 	ldw	r3,-4(fp)
 2010e28:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 2010e2c:	e0bffc17 	ldw	r2,-16(fp)
 2010e30:	e0fffd17 	ldw	r3,-12(fp)
 2010e34:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 2010e38:	e0bffc17 	ldw	r2,-16(fp)
 2010e3c:	10000415 	stw	zero,16(r2)
 2010e40:	e0bffc17 	ldw	r2,-16(fp)
 2010e44:	10c00417 	ldw	r3,16(r2)
 2010e48:	e0bffc17 	ldw	r2,-16(fp)
 2010e4c:	10c00315 	stw	r3,12(r2)
  return rv;
 2010e50:	e0bffc17 	ldw	r2,-16(fp)
}
 2010e54:	e037883a 	mov	sp,fp
 2010e58:	dfc00117 	ldw	ra,4(sp)
 2010e5c:	df000017 	ldw	fp,0(sp)
 2010e60:	dec00204 	addi	sp,sp,8
 2010e64:	f800283a 	ret

02010e68 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 2010e68:	defffd04 	addi	sp,sp,-12
 2010e6c:	df000215 	stw	fp,8(sp)
 2010e70:	df000204 	addi	fp,sp,8
 2010e74:	e13ffe15 	stw	r4,-8(fp)
 2010e78:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 2010e7c:	e0bfff17 	ldw	r2,-4(fp)
 2010e80:	10001326 	beq	r2,zero,2010ed0 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 2010e84:	e0bffe17 	ldw	r2,-8(fp)
 2010e88:	10c01317 	ldw	r3,76(r2)
 2010e8c:	e0bfff17 	ldw	r2,-4(fp)
 2010e90:	10800117 	ldw	r2,4(r2)
 2010e94:	1085883a 	add	r2,r2,r2
 2010e98:	1085883a 	add	r2,r2,r2
 2010e9c:	1885883a 	add	r2,r3,r2
 2010ea0:	10c00017 	ldw	r3,0(r2)
 2010ea4:	e0bfff17 	ldw	r2,-4(fp)
 2010ea8:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 2010eac:	e0bffe17 	ldw	r2,-8(fp)
 2010eb0:	10c01317 	ldw	r3,76(r2)
 2010eb4:	e0bfff17 	ldw	r2,-4(fp)
 2010eb8:	10800117 	ldw	r2,4(r2)
 2010ebc:	1085883a 	add	r2,r2,r2
 2010ec0:	1085883a 	add	r2,r2,r2
 2010ec4:	1885883a 	add	r2,r3,r2
 2010ec8:	e0ffff17 	ldw	r3,-4(fp)
 2010ecc:	10c00015 	stw	r3,0(r2)
    }
}
 2010ed0:	0001883a 	nop
 2010ed4:	e037883a 	mov	sp,fp
 2010ed8:	df000017 	ldw	fp,0(sp)
 2010edc:	dec00104 	addi	sp,sp,4
 2010ee0:	f800283a 	ret

02010ee4 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 2010ee4:	defff304 	addi	sp,sp,-52
 2010ee8:	dfc00c15 	stw	ra,48(sp)
 2010eec:	df000b15 	stw	fp,44(sp)
 2010ef0:	df000b04 	addi	fp,sp,44
 2010ef4:	e13ffc15 	stw	r4,-16(fp)
 2010ef8:	e17ffd15 	stw	r5,-12(fp)
 2010efc:	e1bffe15 	stw	r6,-8(fp)
 2010f00:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 2010f04:	e0bffd17 	ldw	r2,-12(fp)
 2010f08:	10800417 	ldw	r2,16(r2)
 2010f0c:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 2010f10:	e0bffd17 	ldw	r2,-12(fp)
 2010f14:	10800504 	addi	r2,r2,20
 2010f18:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 2010f1c:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 2010f20:	e0bff617 	ldw	r2,-40(fp)
 2010f24:	10800017 	ldw	r2,0(r2)
 2010f28:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 2010f2c:	e0bff817 	ldw	r2,-32(fp)
 2010f30:	10ffffcc 	andi	r3,r2,65535
 2010f34:	e0bffe17 	ldw	r2,-8(fp)
 2010f38:	1887383a 	mul	r3,r3,r2
 2010f3c:	e0bfff17 	ldw	r2,-4(fp)
 2010f40:	1885883a 	add	r2,r3,r2
 2010f44:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 2010f48:	e0bff817 	ldw	r2,-32(fp)
 2010f4c:	1006d43a 	srli	r3,r2,16
 2010f50:	e0bffe17 	ldw	r2,-8(fp)
 2010f54:	1887383a 	mul	r3,r3,r2
 2010f58:	e0bff917 	ldw	r2,-28(fp)
 2010f5c:	1004d43a 	srli	r2,r2,16
 2010f60:	1885883a 	add	r2,r3,r2
 2010f64:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 2010f68:	e0bffa17 	ldw	r2,-24(fp)
 2010f6c:	1004d43a 	srli	r2,r2,16
 2010f70:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 2010f74:	e0bff617 	ldw	r2,-40(fp)
 2010f78:	10c00104 	addi	r3,r2,4
 2010f7c:	e0fff615 	stw	r3,-40(fp)
 2010f80:	e0fffa17 	ldw	r3,-24(fp)
 2010f84:	1808943a 	slli	r4,r3,16
 2010f88:	e0fff917 	ldw	r3,-28(fp)
 2010f8c:	18ffffcc 	andi	r3,r3,65535
 2010f90:	20c7883a 	add	r3,r4,r3
 2010f94:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 2010f98:	e0bff517 	ldw	r2,-44(fp)
 2010f9c:	10800044 	addi	r2,r2,1
 2010fa0:	e0bff515 	stw	r2,-44(fp)
 2010fa4:	e0fff517 	ldw	r3,-44(fp)
 2010fa8:	e0bff717 	ldw	r2,-36(fp)
 2010fac:	18bfdc16 	blt	r3,r2,2010f20 <__multadd+0x3c>
  if (a)
 2010fb0:	e0bfff17 	ldw	r2,-4(fp)
 2010fb4:	10002a26 	beq	r2,zero,2011060 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 2010fb8:	e0bffd17 	ldw	r2,-12(fp)
 2010fbc:	10800217 	ldw	r2,8(r2)
 2010fc0:	e0fff717 	ldw	r3,-36(fp)
 2010fc4:	18801916 	blt	r3,r2,201102c <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 2010fc8:	e0bffd17 	ldw	r2,-12(fp)
 2010fcc:	10800117 	ldw	r2,4(r2)
 2010fd0:	10800044 	addi	r2,r2,1
 2010fd4:	100b883a 	mov	r5,r2
 2010fd8:	e13ffc17 	ldw	r4,-16(fp)
 2010fdc:	2010d380 	call	2010d38 <_Balloc>
 2010fe0:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 2010fe4:	e0bffb17 	ldw	r2,-20(fp)
 2010fe8:	10c00304 	addi	r3,r2,12
 2010fec:	e0bffd17 	ldw	r2,-12(fp)
 2010ff0:	11000304 	addi	r4,r2,12
 2010ff4:	e0bffd17 	ldw	r2,-12(fp)
 2010ff8:	10800417 	ldw	r2,16(r2)
 2010ffc:	10800084 	addi	r2,r2,2
 2011000:	1085883a 	add	r2,r2,r2
 2011004:	1085883a 	add	r2,r2,r2
 2011008:	100d883a 	mov	r6,r2
 201100c:	200b883a 	mov	r5,r4
 2011010:	1809883a 	mov	r4,r3
 2011014:	20091900 	call	2009190 <memcpy>
	  Bfree (ptr, b);
 2011018:	e17ffd17 	ldw	r5,-12(fp)
 201101c:	e13ffc17 	ldw	r4,-16(fp)
 2011020:	2010e680 	call	2010e68 <_Bfree>
	  b = b1;
 2011024:	e0bffb17 	ldw	r2,-20(fp)
 2011028:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 201102c:	e0bff717 	ldw	r2,-36(fp)
 2011030:	10c00044 	addi	r3,r2,1
 2011034:	e0fff715 	stw	r3,-36(fp)
 2011038:	e0ffff17 	ldw	r3,-4(fp)
 201103c:	e13ffd17 	ldw	r4,-12(fp)
 2011040:	10800144 	addi	r2,r2,5
 2011044:	1085883a 	add	r2,r2,r2
 2011048:	1085883a 	add	r2,r2,r2
 201104c:	2085883a 	add	r2,r4,r2
 2011050:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 2011054:	e0bffd17 	ldw	r2,-12(fp)
 2011058:	e0fff717 	ldw	r3,-36(fp)
 201105c:	10c00415 	stw	r3,16(r2)
    }
  return b;
 2011060:	e0bffd17 	ldw	r2,-12(fp)
}
 2011064:	e037883a 	mov	sp,fp
 2011068:	dfc00117 	ldw	ra,4(sp)
 201106c:	df000017 	ldw	fp,0(sp)
 2011070:	dec00204 	addi	sp,sp,8
 2011074:	f800283a 	ret

02011078 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 2011078:	defff504 	addi	sp,sp,-44
 201107c:	dfc00a15 	stw	ra,40(sp)
 2011080:	df000915 	stw	fp,36(sp)
 2011084:	df000904 	addi	fp,sp,36
 2011088:	e13ffc15 	stw	r4,-16(fp)
 201108c:	e17ffd15 	stw	r5,-12(fp)
 2011090:	e1bffe15 	stw	r6,-8(fp)
 2011094:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 2011098:	e0bfff17 	ldw	r2,-4(fp)
 201109c:	10800204 	addi	r2,r2,8
 20110a0:	01400244 	movi	r5,9
 20110a4:	1009883a 	mov	r4,r2
 20110a8:	20068a00 	call	20068a0 <__divsi3>
 20110ac:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 20110b0:	e03ff915 	stw	zero,-28(fp)
 20110b4:	00800044 	movi	r2,1
 20110b8:	e0bffa15 	stw	r2,-24(fp)
 20110bc:	00000606 	br	20110d8 <__s2b+0x60>
 20110c0:	e0bffa17 	ldw	r2,-24(fp)
 20110c4:	1085883a 	add	r2,r2,r2
 20110c8:	e0bffa15 	stw	r2,-24(fp)
 20110cc:	e0bff917 	ldw	r2,-28(fp)
 20110d0:	10800044 	addi	r2,r2,1
 20110d4:	e0bff915 	stw	r2,-28(fp)
 20110d8:	e0bffb17 	ldw	r2,-20(fp)
 20110dc:	e0fffa17 	ldw	r3,-24(fp)
 20110e0:	18bff716 	blt	r3,r2,20110c0 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 20110e4:	e17ff917 	ldw	r5,-28(fp)
 20110e8:	e13ffc17 	ldw	r4,-16(fp)
 20110ec:	2010d380 	call	2010d38 <_Balloc>
 20110f0:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 20110f4:	e0bff717 	ldw	r2,-36(fp)
 20110f8:	e0c00217 	ldw	r3,8(fp)
 20110fc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 2011100:	e0bff717 	ldw	r2,-36(fp)
 2011104:	00c00044 	movi	r3,1
 2011108:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 201110c:	00800244 	movi	r2,9
 2011110:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 2011114:	e0bffe17 	ldw	r2,-8(fp)
 2011118:	10800290 	cmplti	r2,r2,10
 201111c:	10001b1e 	bne	r2,zero,201118c <__s2b+0x114>
    {
      s += 9;
 2011120:	e0bffd17 	ldw	r2,-12(fp)
 2011124:	10800244 	addi	r2,r2,9
 2011128:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 201112c:	e0bffd17 	ldw	r2,-12(fp)
 2011130:	10c00044 	addi	r3,r2,1
 2011134:	e0fffd15 	stw	r3,-12(fp)
 2011138:	10800003 	ldbu	r2,0(r2)
 201113c:	10803fcc 	andi	r2,r2,255
 2011140:	1080201c 	xori	r2,r2,128
 2011144:	10bfe004 	addi	r2,r2,-128
 2011148:	10bff404 	addi	r2,r2,-48
 201114c:	100f883a 	mov	r7,r2
 2011150:	01800284 	movi	r6,10
 2011154:	e17ff717 	ldw	r5,-36(fp)
 2011158:	e13ffc17 	ldw	r4,-16(fp)
 201115c:	2010ee40 	call	2010ee4 <__multadd>
 2011160:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 2011164:	e0bff817 	ldw	r2,-32(fp)
 2011168:	10800044 	addi	r2,r2,1
 201116c:	e0bff815 	stw	r2,-32(fp)
 2011170:	e0fff817 	ldw	r3,-32(fp)
 2011174:	e0bffe17 	ldw	r2,-8(fp)
 2011178:	18bfec16 	blt	r3,r2,201112c <__s2b+0xb4>
      s++;
 201117c:	e0bffd17 	ldw	r2,-12(fp)
 2011180:	10800044 	addi	r2,r2,1
 2011184:	e0bffd15 	stw	r2,-12(fp)
 2011188:	00001506 	br	20111e0 <__s2b+0x168>
    }
  else
    s += 10;
 201118c:	e0bffd17 	ldw	r2,-12(fp)
 2011190:	10800284 	addi	r2,r2,10
 2011194:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 2011198:	00001106 	br	20111e0 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 201119c:	e0bffd17 	ldw	r2,-12(fp)
 20111a0:	10c00044 	addi	r3,r2,1
 20111a4:	e0fffd15 	stw	r3,-12(fp)
 20111a8:	10800003 	ldbu	r2,0(r2)
 20111ac:	10803fcc 	andi	r2,r2,255
 20111b0:	1080201c 	xori	r2,r2,128
 20111b4:	10bfe004 	addi	r2,r2,-128
 20111b8:	10bff404 	addi	r2,r2,-48
 20111bc:	100f883a 	mov	r7,r2
 20111c0:	01800284 	movi	r6,10
 20111c4:	e17ff717 	ldw	r5,-36(fp)
 20111c8:	e13ffc17 	ldw	r4,-16(fp)
 20111cc:	2010ee40 	call	2010ee4 <__multadd>
 20111d0:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 20111d4:	e0bff817 	ldw	r2,-32(fp)
 20111d8:	10800044 	addi	r2,r2,1
 20111dc:	e0bff815 	stw	r2,-32(fp)
 20111e0:	e0fff817 	ldw	r3,-32(fp)
 20111e4:	e0bfff17 	ldw	r2,-4(fp)
 20111e8:	18bfec16 	blt	r3,r2,201119c <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 20111ec:	e0bff717 	ldw	r2,-36(fp)
}
 20111f0:	e037883a 	mov	sp,fp
 20111f4:	dfc00117 	ldw	ra,4(sp)
 20111f8:	df000017 	ldw	fp,0(sp)
 20111fc:	dec00204 	addi	sp,sp,8
 2011200:	f800283a 	ret

02011204 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 2011204:	defffe04 	addi	sp,sp,-8
 2011208:	df000115 	stw	fp,4(sp)
 201120c:	dc000015 	stw	r16,0(sp)
 2011210:	df000104 	addi	fp,sp,4
 2011214:	2005883a 	mov	r2,r4
  register int k = 0;
 2011218:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 201121c:	10ffffec 	andhi	r3,r2,65535
 2011220:	1800021e 	bne	r3,zero,201122c <__hi0bits+0x28>
    {
      k = 16;
 2011224:	04000404 	movi	r16,16
      x <<= 16;
 2011228:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 201122c:	10ffc02c 	andhi	r3,r2,65280
 2011230:	1800021e 	bne	r3,zero,201123c <__hi0bits+0x38>
    {
      k += 8;
 2011234:	84000204 	addi	r16,r16,8
      x <<= 8;
 2011238:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 201123c:	10fc002c 	andhi	r3,r2,61440
 2011240:	1800021e 	bne	r3,zero,201124c <__hi0bits+0x48>
    {
      k += 4;
 2011244:	84000104 	addi	r16,r16,4
      x <<= 4;
 2011248:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 201124c:	10f0002c 	andhi	r3,r2,49152
 2011250:	1800031e 	bne	r3,zero,2011260 <__hi0bits+0x5c>
    {
      k += 2;
 2011254:	84000084 	addi	r16,r16,2
      x <<= 2;
 2011258:	1085883a 	add	r2,r2,r2
 201125c:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 2011260:	1007883a 	mov	r3,r2
 2011264:	18000516 	blt	r3,zero,201127c <__hi0bits+0x78>
    {
      k++;
 2011268:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 201126c:	1090002c 	andhi	r2,r2,16384
 2011270:	1000021e 	bne	r2,zero,201127c <__hi0bits+0x78>
	return 32;
 2011274:	00800804 	movi	r2,32
 2011278:	00000106 	br	2011280 <__hi0bits+0x7c>
    }
  return k;
 201127c:	8005883a 	mov	r2,r16
}
 2011280:	e6ffff04 	addi	sp,fp,-4
 2011284:	df000117 	ldw	fp,4(sp)
 2011288:	dc000017 	ldw	r16,0(sp)
 201128c:	dec00204 	addi	sp,sp,8
 2011290:	f800283a 	ret

02011294 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 2011294:	defffc04 	addi	sp,sp,-16
 2011298:	df000315 	stw	fp,12(sp)
 201129c:	dc400215 	stw	r17,8(sp)
 20112a0:	dc000115 	stw	r16,4(sp)
 20112a4:	df000304 	addi	fp,sp,12
 20112a8:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 20112ac:	e0bffd17 	ldw	r2,-12(fp)
 20112b0:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 20112b4:	808001cc 	andi	r2,r16,7
 20112b8:	10001026 	beq	r2,zero,20112fc <__lo0bits+0x68>
    {
      if (x & 1)
 20112bc:	8080004c 	andi	r2,r16,1
 20112c0:	10000226 	beq	r2,zero,20112cc <__lo0bits+0x38>
	return 0;
 20112c4:	0005883a 	mov	r2,zero
 20112c8:	00002706 	br	2011368 <__lo0bits+0xd4>
      if (x & 2)
 20112cc:	8080008c 	andi	r2,r16,2
 20112d0:	10000526 	beq	r2,zero,20112e8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 20112d4:	8006d07a 	srli	r3,r16,1
 20112d8:	e0bffd17 	ldw	r2,-12(fp)
 20112dc:	10c00015 	stw	r3,0(r2)
	  return 1;
 20112e0:	00800044 	movi	r2,1
 20112e4:	00002006 	br	2011368 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 20112e8:	8006d0ba 	srli	r3,r16,2
 20112ec:	e0bffd17 	ldw	r2,-12(fp)
 20112f0:	10c00015 	stw	r3,0(r2)
      return 2;
 20112f4:	00800084 	movi	r2,2
 20112f8:	00001b06 	br	2011368 <__lo0bits+0xd4>
    }
  k = 0;
 20112fc:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 2011300:	80bfffcc 	andi	r2,r16,65535
 2011304:	1000021e 	bne	r2,zero,2011310 <__lo0bits+0x7c>
    {
      k = 16;
 2011308:	04400404 	movi	r17,16
      x >>= 16;
 201130c:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 2011310:	80803fcc 	andi	r2,r16,255
 2011314:	1000021e 	bne	r2,zero,2011320 <__lo0bits+0x8c>
    {
      k += 8;
 2011318:	8c400204 	addi	r17,r17,8
      x >>= 8;
 201131c:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 2011320:	808003cc 	andi	r2,r16,15
 2011324:	1000021e 	bne	r2,zero,2011330 <__lo0bits+0x9c>
    {
      k += 4;
 2011328:	8c400104 	addi	r17,r17,4
      x >>= 4;
 201132c:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 2011330:	808000cc 	andi	r2,r16,3
 2011334:	1000021e 	bne	r2,zero,2011340 <__lo0bits+0xac>
    {
      k += 2;
 2011338:	8c400084 	addi	r17,r17,2
      x >>= 2;
 201133c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 2011340:	8080004c 	andi	r2,r16,1
 2011344:	1000051e 	bne	r2,zero,201135c <__lo0bits+0xc8>
    {
      k++;
 2011348:	8c400044 	addi	r17,r17,1
      x >>= 1;
 201134c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 2011350:	8000021e 	bne	r16,zero,201135c <__lo0bits+0xc8>
	return 32;
 2011354:	00800804 	movi	r2,32
 2011358:	00000306 	br	2011368 <__lo0bits+0xd4>
    }
  *y = x;
 201135c:	e0bffd17 	ldw	r2,-12(fp)
 2011360:	14000015 	stw	r16,0(r2)
  return k;
 2011364:	8805883a 	mov	r2,r17
}
 2011368:	e6fffe04 	addi	sp,fp,-8
 201136c:	df000217 	ldw	fp,8(sp)
 2011370:	dc400117 	ldw	r17,4(sp)
 2011374:	dc000017 	ldw	r16,0(sp)
 2011378:	dec00304 	addi	sp,sp,12
 201137c:	f800283a 	ret

02011380 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 2011380:	defffb04 	addi	sp,sp,-20
 2011384:	dfc00415 	stw	ra,16(sp)
 2011388:	df000315 	stw	fp,12(sp)
 201138c:	df000304 	addi	fp,sp,12
 2011390:	e13ffe15 	stw	r4,-8(fp)
 2011394:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 2011398:	01400044 	movi	r5,1
 201139c:	e13ffe17 	ldw	r4,-8(fp)
 20113a0:	2010d380 	call	2010d38 <_Balloc>
 20113a4:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 20113a8:	e0ffff17 	ldw	r3,-4(fp)
 20113ac:	e0bffd17 	ldw	r2,-12(fp)
 20113b0:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 20113b4:	e0bffd17 	ldw	r2,-12(fp)
 20113b8:	00c00044 	movi	r3,1
 20113bc:	10c00415 	stw	r3,16(r2)
  return b;
 20113c0:	e0bffd17 	ldw	r2,-12(fp)
}
 20113c4:	e037883a 	mov	sp,fp
 20113c8:	dfc00117 	ldw	ra,4(sp)
 20113cc:	df000017 	ldw	fp,0(sp)
 20113d0:	dec00204 	addi	sp,sp,8
 20113d4:	f800283a 	ret

020113d8 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 20113d8:	deffeb04 	addi	sp,sp,-84
 20113dc:	dfc01415 	stw	ra,80(sp)
 20113e0:	df001315 	stw	fp,76(sp)
 20113e4:	df001304 	addi	fp,sp,76
 20113e8:	e13ffd15 	stw	r4,-12(fp)
 20113ec:	e17ffe15 	stw	r5,-8(fp)
 20113f0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 20113f4:	e0bffe17 	ldw	r2,-8(fp)
 20113f8:	10c00417 	ldw	r3,16(r2)
 20113fc:	e0bfff17 	ldw	r2,-4(fp)
 2011400:	10800417 	ldw	r2,16(r2)
 2011404:	1880060e 	bge	r3,r2,2011420 <__multiply+0x48>
    {
      c = a;
 2011408:	e0bffe17 	ldw	r2,-8(fp)
 201140c:	e0bff515 	stw	r2,-44(fp)
      a = b;
 2011410:	e0bfff17 	ldw	r2,-4(fp)
 2011414:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2011418:	e0bff517 	ldw	r2,-44(fp)
 201141c:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 2011420:	e0bffe17 	ldw	r2,-8(fp)
 2011424:	10800117 	ldw	r2,4(r2)
 2011428:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 201142c:	e0bffe17 	ldw	r2,-8(fp)
 2011430:	10800417 	ldw	r2,16(r2)
 2011434:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 2011438:	e0bfff17 	ldw	r2,-4(fp)
 201143c:	10800417 	ldw	r2,16(r2)
 2011440:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 2011444:	e0fff617 	ldw	r3,-40(fp)
 2011448:	e0bff717 	ldw	r2,-36(fp)
 201144c:	1885883a 	add	r2,r3,r2
 2011450:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 2011454:	e0bffe17 	ldw	r2,-8(fp)
 2011458:	10c00217 	ldw	r3,8(r2)
 201145c:	e0bfee17 	ldw	r2,-72(fp)
 2011460:	1880030e 	bge	r3,r2,2011470 <__multiply+0x98>
    k++;
 2011464:	e0bfed17 	ldw	r2,-76(fp)
 2011468:	10800044 	addi	r2,r2,1
 201146c:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 2011470:	e17fed17 	ldw	r5,-76(fp)
 2011474:	e13ffd17 	ldw	r4,-12(fp)
 2011478:	2010d380 	call	2010d38 <_Balloc>
 201147c:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2011480:	e0bff517 	ldw	r2,-44(fp)
 2011484:	10800504 	addi	r2,r2,20
 2011488:	e0bff015 	stw	r2,-64(fp)
 201148c:	e0bfee17 	ldw	r2,-72(fp)
 2011490:	1085883a 	add	r2,r2,r2
 2011494:	1085883a 	add	r2,r2,r2
 2011498:	1007883a 	mov	r3,r2
 201149c:	e0bff017 	ldw	r2,-64(fp)
 20114a0:	10c5883a 	add	r2,r2,r3
 20114a4:	e0bff815 	stw	r2,-32(fp)
 20114a8:	00000506 	br	20114c0 <__multiply+0xe8>
    *x = 0;
 20114ac:	e0bff017 	ldw	r2,-64(fp)
 20114b0:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 20114b4:	e0bff017 	ldw	r2,-64(fp)
 20114b8:	10800104 	addi	r2,r2,4
 20114bc:	e0bff015 	stw	r2,-64(fp)
 20114c0:	e0fff017 	ldw	r3,-64(fp)
 20114c4:	e0bff817 	ldw	r2,-32(fp)
 20114c8:	18bff836 	bltu	r3,r2,20114ac <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 20114cc:	e0bffe17 	ldw	r2,-8(fp)
 20114d0:	10800504 	addi	r2,r2,20
 20114d4:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 20114d8:	e0bff617 	ldw	r2,-40(fp)
 20114dc:	1085883a 	add	r2,r2,r2
 20114e0:	1085883a 	add	r2,r2,r2
 20114e4:	1007883a 	mov	r3,r2
 20114e8:	e0bff817 	ldw	r2,-32(fp)
 20114ec:	10c5883a 	add	r2,r2,r3
 20114f0:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 20114f4:	e0bfff17 	ldw	r2,-4(fp)
 20114f8:	10800504 	addi	r2,r2,20
 20114fc:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 2011500:	e0bff717 	ldw	r2,-36(fp)
 2011504:	1085883a 	add	r2,r2,r2
 2011508:	1085883a 	add	r2,r2,r2
 201150c:	1007883a 	mov	r3,r2
 2011510:	e0bff117 	ldw	r2,-60(fp)
 2011514:	10c5883a 	add	r2,r2,r3
 2011518:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 201151c:	e0bff517 	ldw	r2,-44(fp)
 2011520:	10800504 	addi	r2,r2,20
 2011524:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 2011528:	00007d06 	br	2011720 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 201152c:	e0bff117 	ldw	r2,-60(fp)
 2011530:	10800017 	ldw	r2,0(r2)
 2011534:	10bfffcc 	andi	r2,r2,65535
 2011538:	e0bffb15 	stw	r2,-20(fp)
 201153c:	e0bffb17 	ldw	r2,-20(fp)
 2011540:	10003426 	beq	r2,zero,2011614 <__multiply+0x23c>
	{
	  x = xa;
 2011544:	e0bff817 	ldw	r2,-32(fp)
 2011548:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 201154c:	e0bff317 	ldw	r2,-52(fp)
 2011550:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2011554:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 2011558:	e0bff017 	ldw	r2,-64(fp)
 201155c:	10800017 	ldw	r2,0(r2)
 2011560:	10ffffcc 	andi	r3,r2,65535
 2011564:	e0bffb17 	ldw	r2,-20(fp)
 2011568:	1887383a 	mul	r3,r3,r2
 201156c:	e0bff217 	ldw	r2,-56(fp)
 2011570:	10800017 	ldw	r2,0(r2)
 2011574:	10bfffcc 	andi	r2,r2,65535
 2011578:	1887883a 	add	r3,r3,r2
 201157c:	e0bfef17 	ldw	r2,-68(fp)
 2011580:	1885883a 	add	r2,r3,r2
 2011584:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 2011588:	e0bffc17 	ldw	r2,-16(fp)
 201158c:	1004d43a 	srli	r2,r2,16
 2011590:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 2011594:	e0bff017 	ldw	r2,-64(fp)
 2011598:	10c00104 	addi	r3,r2,4
 201159c:	e0fff015 	stw	r3,-64(fp)
 20115a0:	10800017 	ldw	r2,0(r2)
 20115a4:	1006d43a 	srli	r3,r2,16
 20115a8:	e0bffb17 	ldw	r2,-20(fp)
 20115ac:	1887383a 	mul	r3,r3,r2
 20115b0:	e0bff217 	ldw	r2,-56(fp)
 20115b4:	10800017 	ldw	r2,0(r2)
 20115b8:	1004d43a 	srli	r2,r2,16
 20115bc:	1887883a 	add	r3,r3,r2
 20115c0:	e0bfef17 	ldw	r2,-68(fp)
 20115c4:	1885883a 	add	r2,r3,r2
 20115c8:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20115cc:	e0bff417 	ldw	r2,-48(fp)
 20115d0:	1004d43a 	srli	r2,r2,16
 20115d4:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 20115d8:	e0bff217 	ldw	r2,-56(fp)
 20115dc:	10c00104 	addi	r3,r2,4
 20115e0:	e0fff215 	stw	r3,-56(fp)
 20115e4:	e0fff417 	ldw	r3,-48(fp)
 20115e8:	1808943a 	slli	r4,r3,16
 20115ec:	e0fffc17 	ldw	r3,-16(fp)
 20115f0:	18ffffcc 	andi	r3,r3,65535
 20115f4:	20c6b03a 	or	r3,r4,r3
 20115f8:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 20115fc:	e0fff017 	ldw	r3,-64(fp)
 2011600:	e0bff917 	ldw	r2,-28(fp)
 2011604:	18bfd436 	bltu	r3,r2,2011558 <__multiply+0x180>
	  *xc = carry;
 2011608:	e0bff217 	ldw	r2,-56(fp)
 201160c:	e0ffef17 	ldw	r3,-68(fp)
 2011610:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 2011614:	e0bff117 	ldw	r2,-60(fp)
 2011618:	10800017 	ldw	r2,0(r2)
 201161c:	1004d43a 	srli	r2,r2,16
 2011620:	e0bffb15 	stw	r2,-20(fp)
 2011624:	e0bffb17 	ldw	r2,-20(fp)
 2011628:	10003726 	beq	r2,zero,2011708 <__multiply+0x330>
	{
	  x = xa;
 201162c:	e0bff817 	ldw	r2,-32(fp)
 2011630:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2011634:	e0bff317 	ldw	r2,-52(fp)
 2011638:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 201163c:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 2011640:	e0bff217 	ldw	r2,-56(fp)
 2011644:	10800017 	ldw	r2,0(r2)
 2011648:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 201164c:	e0bff017 	ldw	r2,-64(fp)
 2011650:	10800017 	ldw	r2,0(r2)
 2011654:	10ffffcc 	andi	r3,r2,65535
 2011658:	e0bffb17 	ldw	r2,-20(fp)
 201165c:	1887383a 	mul	r3,r3,r2
 2011660:	e0bff217 	ldw	r2,-56(fp)
 2011664:	10800017 	ldw	r2,0(r2)
 2011668:	1004d43a 	srli	r2,r2,16
 201166c:	1887883a 	add	r3,r3,r2
 2011670:	e0bfef17 	ldw	r2,-68(fp)
 2011674:	1885883a 	add	r2,r3,r2
 2011678:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 201167c:	e0bffc17 	ldw	r2,-16(fp)
 2011680:	1004d43a 	srli	r2,r2,16
 2011684:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 2011688:	e0bff217 	ldw	r2,-56(fp)
 201168c:	10c00104 	addi	r3,r2,4
 2011690:	e0fff215 	stw	r3,-56(fp)
 2011694:	e0fffc17 	ldw	r3,-16(fp)
 2011698:	1808943a 	slli	r4,r3,16
 201169c:	e0fff417 	ldw	r3,-48(fp)
 20116a0:	18ffffcc 	andi	r3,r3,65535
 20116a4:	20c6b03a 	or	r3,r4,r3
 20116a8:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 20116ac:	e0bff017 	ldw	r2,-64(fp)
 20116b0:	10c00104 	addi	r3,r2,4
 20116b4:	e0fff015 	stw	r3,-64(fp)
 20116b8:	10800017 	ldw	r2,0(r2)
 20116bc:	1006d43a 	srli	r3,r2,16
 20116c0:	e0bffb17 	ldw	r2,-20(fp)
 20116c4:	1887383a 	mul	r3,r3,r2
 20116c8:	e0bff217 	ldw	r2,-56(fp)
 20116cc:	10800017 	ldw	r2,0(r2)
 20116d0:	10bfffcc 	andi	r2,r2,65535
 20116d4:	1887883a 	add	r3,r3,r2
 20116d8:	e0bfef17 	ldw	r2,-68(fp)
 20116dc:	1885883a 	add	r2,r3,r2
 20116e0:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20116e4:	e0bff417 	ldw	r2,-48(fp)
 20116e8:	1004d43a 	srli	r2,r2,16
 20116ec:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 20116f0:	e0fff017 	ldw	r3,-64(fp)
 20116f4:	e0bff917 	ldw	r2,-28(fp)
 20116f8:	18bfd436 	bltu	r3,r2,201164c <__multiply+0x274>
	  *xc = z2;
 20116fc:	e0bff217 	ldw	r2,-56(fp)
 2011700:	e0fff417 	ldw	r3,-48(fp)
 2011704:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 2011708:	e0bff117 	ldw	r2,-60(fp)
 201170c:	10800104 	addi	r2,r2,4
 2011710:	e0bff115 	stw	r2,-60(fp)
 2011714:	e0bff317 	ldw	r2,-52(fp)
 2011718:	10800104 	addi	r2,r2,4
 201171c:	e0bff315 	stw	r2,-52(fp)
 2011720:	e0fff117 	ldw	r3,-60(fp)
 2011724:	e0bffa17 	ldw	r2,-24(fp)
 2011728:	18bf8036 	bltu	r3,r2,201152c <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 201172c:	e0bff517 	ldw	r2,-44(fp)
 2011730:	10800504 	addi	r2,r2,20
 2011734:	e0bff315 	stw	r2,-52(fp)
 2011738:	e0bfee17 	ldw	r2,-72(fp)
 201173c:	1085883a 	add	r2,r2,r2
 2011740:	1085883a 	add	r2,r2,r2
 2011744:	1007883a 	mov	r3,r2
 2011748:	e0bff317 	ldw	r2,-52(fp)
 201174c:	10c5883a 	add	r2,r2,r3
 2011750:	e0bff215 	stw	r2,-56(fp)
 2011754:	00000306 	br	2011764 <__multiply+0x38c>
 2011758:	e0bfee17 	ldw	r2,-72(fp)
 201175c:	10bfffc4 	addi	r2,r2,-1
 2011760:	e0bfee15 	stw	r2,-72(fp)
 2011764:	e0bfee17 	ldw	r2,-72(fp)
 2011768:	0080060e 	bge	zero,r2,2011784 <__multiply+0x3ac>
 201176c:	e0bff217 	ldw	r2,-56(fp)
 2011770:	10bfff04 	addi	r2,r2,-4
 2011774:	e0bff215 	stw	r2,-56(fp)
 2011778:	e0bff217 	ldw	r2,-56(fp)
 201177c:	10800017 	ldw	r2,0(r2)
 2011780:	103ff526 	beq	r2,zero,2011758 <__multiply+0x380>
  c->_wds = wc;
 2011784:	e0bff517 	ldw	r2,-44(fp)
 2011788:	e0ffee17 	ldw	r3,-72(fp)
 201178c:	10c00415 	stw	r3,16(r2)
  return c;
 2011790:	e0bff517 	ldw	r2,-44(fp)
}
 2011794:	e037883a 	mov	sp,fp
 2011798:	dfc00117 	ldw	ra,4(sp)
 201179c:	df000017 	ldw	fp,0(sp)
 20117a0:	dec00204 	addi	sp,sp,8
 20117a4:	f800283a 	ret

020117a8 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 20117a8:	defff704 	addi	sp,sp,-36
 20117ac:	dfc00815 	stw	ra,32(sp)
 20117b0:	df000715 	stw	fp,28(sp)
 20117b4:	df000704 	addi	fp,sp,28
 20117b8:	e13ffd15 	stw	r4,-12(fp)
 20117bc:	e17ffe15 	stw	r5,-8(fp)
 20117c0:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 20117c4:	e0bfff17 	ldw	r2,-4(fp)
 20117c8:	108000cc 	andi	r2,r2,3
 20117cc:	e0bffb15 	stw	r2,-20(fp)
 20117d0:	e0bffb17 	ldw	r2,-20(fp)
 20117d4:	10000e26 	beq	r2,zero,2011810 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 20117d8:	e0bffb17 	ldw	r2,-20(fp)
 20117dc:	10ffffc4 	addi	r3,r2,-1
 20117e0:	008080b4 	movhi	r2,514
 20117e4:	1089d404 	addi	r2,r2,10064
 20117e8:	18c7883a 	add	r3,r3,r3
 20117ec:	18c7883a 	add	r3,r3,r3
 20117f0:	10c5883a 	add	r2,r2,r3
 20117f4:	10800017 	ldw	r2,0(r2)
 20117f8:	000f883a 	mov	r7,zero
 20117fc:	100d883a 	mov	r6,r2
 2011800:	e17ffe17 	ldw	r5,-8(fp)
 2011804:	e13ffd17 	ldw	r4,-12(fp)
 2011808:	2010ee40 	call	2010ee4 <__multadd>
 201180c:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 2011810:	e0bfff17 	ldw	r2,-4(fp)
 2011814:	1005d0ba 	srai	r2,r2,2
 2011818:	e0bfff15 	stw	r2,-4(fp)
 201181c:	e0bfff17 	ldw	r2,-4(fp)
 2011820:	1000021e 	bne	r2,zero,201182c <__pow5mult+0x84>
    return b;
 2011824:	e0bffe17 	ldw	r2,-8(fp)
 2011828:	00003806 	br	201190c <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 201182c:	e0bffd17 	ldw	r2,-12(fp)
 2011830:	10801217 	ldw	r2,72(r2)
 2011834:	e0bff915 	stw	r2,-28(fp)
 2011838:	e0bff917 	ldw	r2,-28(fp)
 201183c:	10000b1e 	bne	r2,zero,201186c <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 2011840:	01409c44 	movi	r5,625
 2011844:	e13ffd17 	ldw	r4,-12(fp)
 2011848:	20113800 	call	2011380 <__i2b>
 201184c:	1007883a 	mov	r3,r2
 2011850:	e0bffd17 	ldw	r2,-12(fp)
 2011854:	10c01215 	stw	r3,72(r2)
 2011858:	e0bffd17 	ldw	r2,-12(fp)
 201185c:	10801217 	ldw	r2,72(r2)
 2011860:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 2011864:	e0bff917 	ldw	r2,-28(fp)
 2011868:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 201186c:	e0bfff17 	ldw	r2,-4(fp)
 2011870:	1080004c 	andi	r2,r2,1
 2011874:	10000a26 	beq	r2,zero,20118a0 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 2011878:	e1bff917 	ldw	r6,-28(fp)
 201187c:	e17ffe17 	ldw	r5,-8(fp)
 2011880:	e13ffd17 	ldw	r4,-12(fp)
 2011884:	20113d80 	call	20113d8 <__multiply>
 2011888:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 201188c:	e17ffe17 	ldw	r5,-8(fp)
 2011890:	e13ffd17 	ldw	r4,-12(fp)
 2011894:	2010e680 	call	2010e68 <_Bfree>
	  b = b1;
 2011898:	e0bffc17 	ldw	r2,-16(fp)
 201189c:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 20118a0:	e0bfff17 	ldw	r2,-4(fp)
 20118a4:	1005d07a 	srai	r2,r2,1
 20118a8:	e0bfff15 	stw	r2,-4(fp)
 20118ac:	e0bfff17 	ldw	r2,-4(fp)
 20118b0:	10001426 	beq	r2,zero,2011904 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 20118b4:	e0bff917 	ldw	r2,-28(fp)
 20118b8:	10800017 	ldw	r2,0(r2)
 20118bc:	e0bffa15 	stw	r2,-24(fp)
 20118c0:	e0bffa17 	ldw	r2,-24(fp)
 20118c4:	10000c1e 	bne	r2,zero,20118f8 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 20118c8:	e1bff917 	ldw	r6,-28(fp)
 20118cc:	e17ff917 	ldw	r5,-28(fp)
 20118d0:	e13ffd17 	ldw	r4,-12(fp)
 20118d4:	20113d80 	call	20113d8 <__multiply>
 20118d8:	1007883a 	mov	r3,r2
 20118dc:	e0bff917 	ldw	r2,-28(fp)
 20118e0:	10c00015 	stw	r3,0(r2)
 20118e4:	e0bff917 	ldw	r2,-28(fp)
 20118e8:	10800017 	ldw	r2,0(r2)
 20118ec:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 20118f0:	e0bffa17 	ldw	r2,-24(fp)
 20118f4:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 20118f8:	e0bffa17 	ldw	r2,-24(fp)
 20118fc:	e0bff915 	stw	r2,-28(fp)
    }
 2011900:	003fda06 	br	201186c <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 2011904:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 2011908:	e0bffe17 	ldw	r2,-8(fp)
}
 201190c:	e037883a 	mov	sp,fp
 2011910:	dfc00117 	ldw	ra,4(sp)
 2011914:	df000017 	ldw	fp,0(sp)
 2011918:	dec00204 	addi	sp,sp,8
 201191c:	f800283a 	ret

02011920 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2011920:	defff204 	addi	sp,sp,-56
 2011924:	dfc00d15 	stw	ra,52(sp)
 2011928:	df000c15 	stw	fp,48(sp)
 201192c:	df000c04 	addi	fp,sp,48
 2011930:	e13ffd15 	stw	r4,-12(fp)
 2011934:	e17ffe15 	stw	r5,-8(fp)
 2011938:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 201193c:	e0bfff17 	ldw	r2,-4(fp)
 2011940:	1005d17a 	srai	r2,r2,5
 2011944:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 2011948:	e0bffe17 	ldw	r2,-8(fp)
 201194c:	10800117 	ldw	r2,4(r2)
 2011950:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 2011954:	e0bffe17 	ldw	r2,-8(fp)
 2011958:	10c00417 	ldw	r3,16(r2)
 201195c:	e0bffa17 	ldw	r2,-24(fp)
 2011960:	1885883a 	add	r2,r3,r2
 2011964:	10800044 	addi	r2,r2,1
 2011968:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 201196c:	e0bffe17 	ldw	r2,-8(fp)
 2011970:	10800217 	ldw	r2,8(r2)
 2011974:	e0bff415 	stw	r2,-48(fp)
 2011978:	00000606 	br	2011994 <__lshift+0x74>
    k1++;
 201197c:	e0bff517 	ldw	r2,-44(fp)
 2011980:	10800044 	addi	r2,r2,1
 2011984:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2011988:	e0bff417 	ldw	r2,-48(fp)
 201198c:	1085883a 	add	r2,r2,r2
 2011990:	e0bff415 	stw	r2,-48(fp)
 2011994:	e0bff617 	ldw	r2,-40(fp)
 2011998:	e0fff417 	ldw	r3,-48(fp)
 201199c:	18bff716 	blt	r3,r2,201197c <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 20119a0:	e17ff517 	ldw	r5,-44(fp)
 20119a4:	e13ffd17 	ldw	r4,-12(fp)
 20119a8:	2010d380 	call	2010d38 <_Balloc>
 20119ac:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 20119b0:	e0bffb17 	ldw	r2,-20(fp)
 20119b4:	10800504 	addi	r2,r2,20
 20119b8:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 20119bc:	e03ff415 	stw	zero,-48(fp)
 20119c0:	00000706 	br	20119e0 <__lshift+0xc0>
    *x1++ = 0;
 20119c4:	e0bff817 	ldw	r2,-32(fp)
 20119c8:	10c00104 	addi	r3,r2,4
 20119cc:	e0fff815 	stw	r3,-32(fp)
 20119d0:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 20119d4:	e0bff417 	ldw	r2,-48(fp)
 20119d8:	10800044 	addi	r2,r2,1
 20119dc:	e0bff415 	stw	r2,-48(fp)
 20119e0:	e0fff417 	ldw	r3,-48(fp)
 20119e4:	e0bffa17 	ldw	r2,-24(fp)
 20119e8:	18bff616 	blt	r3,r2,20119c4 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 20119ec:	e0bffe17 	ldw	r2,-8(fp)
 20119f0:	10800504 	addi	r2,r2,20
 20119f4:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 20119f8:	e0bffe17 	ldw	r2,-8(fp)
 20119fc:	10800417 	ldw	r2,16(r2)
 2011a00:	1085883a 	add	r2,r2,r2
 2011a04:	1085883a 	add	r2,r2,r2
 2011a08:	1007883a 	mov	r3,r2
 2011a0c:	e0bff717 	ldw	r2,-36(fp)
 2011a10:	10c5883a 	add	r2,r2,r3
 2011a14:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 2011a18:	e0bfff17 	ldw	r2,-4(fp)
 2011a1c:	108007cc 	andi	r2,r2,31
 2011a20:	e0bfff15 	stw	r2,-4(fp)
 2011a24:	e0bfff17 	ldw	r2,-4(fp)
 2011a28:	10002326 	beq	r2,zero,2011ab8 <__lshift+0x198>
    {
      k1 = 32 - k;
 2011a2c:	00c00804 	movi	r3,32
 2011a30:	e0bfff17 	ldw	r2,-4(fp)
 2011a34:	1885c83a 	sub	r2,r3,r2
 2011a38:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 2011a3c:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 2011a40:	e0bff817 	ldw	r2,-32(fp)
 2011a44:	10c00104 	addi	r3,r2,4
 2011a48:	e0fff815 	stw	r3,-32(fp)
 2011a4c:	e0fff717 	ldw	r3,-36(fp)
 2011a50:	19000017 	ldw	r4,0(r3)
 2011a54:	e0ffff17 	ldw	r3,-4(fp)
 2011a58:	20c8983a 	sll	r4,r4,r3
 2011a5c:	e0fff917 	ldw	r3,-28(fp)
 2011a60:	20c6b03a 	or	r3,r4,r3
 2011a64:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 2011a68:	e0bff717 	ldw	r2,-36(fp)
 2011a6c:	10c00104 	addi	r3,r2,4
 2011a70:	e0fff715 	stw	r3,-36(fp)
 2011a74:	10c00017 	ldw	r3,0(r2)
 2011a78:	e0bff517 	ldw	r2,-44(fp)
 2011a7c:	1884d83a 	srl	r2,r3,r2
 2011a80:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 2011a84:	e0fff717 	ldw	r3,-36(fp)
 2011a88:	e0bffc17 	ldw	r2,-16(fp)
 2011a8c:	18bfec36 	bltu	r3,r2,2011a40 <__lshift+0x120>
      if ((*x1 = z) != 0)
 2011a90:	e0bff817 	ldw	r2,-32(fp)
 2011a94:	e0fff917 	ldw	r3,-28(fp)
 2011a98:	10c00015 	stw	r3,0(r2)
 2011a9c:	e0bff817 	ldw	r2,-32(fp)
 2011aa0:	10800017 	ldw	r2,0(r2)
 2011aa4:	10000f26 	beq	r2,zero,2011ae4 <__lshift+0x1c4>
	++n1;
 2011aa8:	e0bff617 	ldw	r2,-40(fp)
 2011aac:	10800044 	addi	r2,r2,1
 2011ab0:	e0bff615 	stw	r2,-40(fp)
 2011ab4:	00000b06 	br	2011ae4 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 2011ab8:	e0bff817 	ldw	r2,-32(fp)
 2011abc:	10c00104 	addi	r3,r2,4
 2011ac0:	e0fff815 	stw	r3,-32(fp)
 2011ac4:	e0fff717 	ldw	r3,-36(fp)
 2011ac8:	19000104 	addi	r4,r3,4
 2011acc:	e13ff715 	stw	r4,-36(fp)
 2011ad0:	18c00017 	ldw	r3,0(r3)
 2011ad4:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 2011ad8:	e0fff717 	ldw	r3,-36(fp)
 2011adc:	e0bffc17 	ldw	r2,-16(fp)
 2011ae0:	18bff536 	bltu	r3,r2,2011ab8 <__lshift+0x198>
  b1->_wds = n1 - 1;
 2011ae4:	e0bff617 	ldw	r2,-40(fp)
 2011ae8:	10ffffc4 	addi	r3,r2,-1
 2011aec:	e0bffb17 	ldw	r2,-20(fp)
 2011af0:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 2011af4:	e17ffe17 	ldw	r5,-8(fp)
 2011af8:	e13ffd17 	ldw	r4,-12(fp)
 2011afc:	2010e680 	call	2010e68 <_Bfree>
  return b1;
 2011b00:	e0bffb17 	ldw	r2,-20(fp)
}
 2011b04:	e037883a 	mov	sp,fp
 2011b08:	dfc00117 	ldw	ra,4(sp)
 2011b0c:	df000017 	ldw	fp,0(sp)
 2011b10:	dec00204 	addi	sp,sp,8
 2011b14:	f800283a 	ret

02011b18 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 2011b18:	defff704 	addi	sp,sp,-36
 2011b1c:	df000815 	stw	fp,32(sp)
 2011b20:	df000804 	addi	fp,sp,32
 2011b24:	e13ffe15 	stw	r4,-8(fp)
 2011b28:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 2011b2c:	e0bffe17 	ldw	r2,-8(fp)
 2011b30:	10800417 	ldw	r2,16(r2)
 2011b34:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 2011b38:	e0bfff17 	ldw	r2,-4(fp)
 2011b3c:	10800417 	ldw	r2,16(r2)
 2011b40:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 2011b44:	e0fffa17 	ldw	r3,-24(fp)
 2011b48:	e0bffb17 	ldw	r2,-20(fp)
 2011b4c:	1885c83a 	sub	r2,r3,r2
 2011b50:	e0bffa15 	stw	r2,-24(fp)
 2011b54:	e0bffa17 	ldw	r2,-24(fp)
 2011b58:	10000226 	beq	r2,zero,2011b64 <__mcmp+0x4c>
    return i;
 2011b5c:	e0bffa17 	ldw	r2,-24(fp)
 2011b60:	00002e06 	br	2011c1c <__mcmp+0x104>
  xa0 = a->_x;
 2011b64:	e0bffe17 	ldw	r2,-8(fp)
 2011b68:	10800504 	addi	r2,r2,20
 2011b6c:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 2011b70:	e0bffb17 	ldw	r2,-20(fp)
 2011b74:	1085883a 	add	r2,r2,r2
 2011b78:	1085883a 	add	r2,r2,r2
 2011b7c:	1007883a 	mov	r3,r2
 2011b80:	e0bffc17 	ldw	r2,-16(fp)
 2011b84:	10c5883a 	add	r2,r2,r3
 2011b88:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 2011b8c:	e0bfff17 	ldw	r2,-4(fp)
 2011b90:	10800504 	addi	r2,r2,20
 2011b94:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 2011b98:	e0bffb17 	ldw	r2,-20(fp)
 2011b9c:	1085883a 	add	r2,r2,r2
 2011ba0:	1085883a 	add	r2,r2,r2
 2011ba4:	1007883a 	mov	r3,r2
 2011ba8:	e0bffd17 	ldw	r2,-12(fp)
 2011bac:	10c5883a 	add	r2,r2,r3
 2011bb0:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 2011bb4:	e0bff817 	ldw	r2,-32(fp)
 2011bb8:	10bfff04 	addi	r2,r2,-4
 2011bbc:	e0bff815 	stw	r2,-32(fp)
 2011bc0:	e0bff817 	ldw	r2,-32(fp)
 2011bc4:	10c00017 	ldw	r3,0(r2)
 2011bc8:	e0bff917 	ldw	r2,-28(fp)
 2011bcc:	10bfff04 	addi	r2,r2,-4
 2011bd0:	e0bff915 	stw	r2,-28(fp)
 2011bd4:	e0bff917 	ldw	r2,-28(fp)
 2011bd8:	10800017 	ldw	r2,0(r2)
 2011bdc:	18800926 	beq	r3,r2,2011c04 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 2011be0:	e0bff817 	ldw	r2,-32(fp)
 2011be4:	10c00017 	ldw	r3,0(r2)
 2011be8:	e0bff917 	ldw	r2,-28(fp)
 2011bec:	10800017 	ldw	r2,0(r2)
 2011bf0:	1880022e 	bgeu	r3,r2,2011bfc <__mcmp+0xe4>
 2011bf4:	00bfffc4 	movi	r2,-1
 2011bf8:	00000806 	br	2011c1c <__mcmp+0x104>
 2011bfc:	00800044 	movi	r2,1
 2011c00:	00000606 	br	2011c1c <__mcmp+0x104>
      if (xa <= xa0)
 2011c04:	e0bff817 	ldw	r2,-32(fp)
 2011c08:	e0fffc17 	ldw	r3,-16(fp)
 2011c0c:	1880012e 	bgeu	r3,r2,2011c14 <__mcmp+0xfc>
	break;
    }
 2011c10:	003fe806 	br	2011bb4 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 2011c14:	0001883a 	nop
    }
  return 0;
 2011c18:	0005883a 	mov	r2,zero
}
 2011c1c:	e037883a 	mov	sp,fp
 2011c20:	df000017 	ldw	fp,0(sp)
 2011c24:	dec00104 	addi	sp,sp,4
 2011c28:	f800283a 	ret

02011c2c <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 2011c2c:	deffef04 	addi	sp,sp,-68
 2011c30:	dfc01015 	stw	ra,64(sp)
 2011c34:	df000f15 	stw	fp,60(sp)
 2011c38:	df000f04 	addi	fp,sp,60
 2011c3c:	e13ffd15 	stw	r4,-12(fp)
 2011c40:	e17ffe15 	stw	r5,-8(fp)
 2011c44:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 2011c48:	e17fff17 	ldw	r5,-4(fp)
 2011c4c:	e13ffe17 	ldw	r4,-8(fp)
 2011c50:	2011b180 	call	2011b18 <__mcmp>
 2011c54:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 2011c58:	e0bff117 	ldw	r2,-60(fp)
 2011c5c:	10000b1e 	bne	r2,zero,2011c8c <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 2011c60:	000b883a 	mov	r5,zero
 2011c64:	e13ffd17 	ldw	r4,-12(fp)
 2011c68:	2010d380 	call	2010d38 <_Balloc>
 2011c6c:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 2011c70:	e0bff717 	ldw	r2,-36(fp)
 2011c74:	00c00044 	movi	r3,1
 2011c78:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 2011c7c:	e0bff717 	ldw	r2,-36(fp)
 2011c80:	10000515 	stw	zero,20(r2)
      return c;
 2011c84:	e0bff717 	ldw	r2,-36(fp)
 2011c88:	00008c06 	br	2011ebc <__mdiff+0x290>
    }
  if (i < 0)
 2011c8c:	e0bff117 	ldw	r2,-60(fp)
 2011c90:	1000090e 	bge	r2,zero,2011cb8 <__mdiff+0x8c>
    {
      c = a;
 2011c94:	e0bffe17 	ldw	r2,-8(fp)
 2011c98:	e0bff715 	stw	r2,-36(fp)
      a = b;
 2011c9c:	e0bfff17 	ldw	r2,-4(fp)
 2011ca0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2011ca4:	e0bff717 	ldw	r2,-36(fp)
 2011ca8:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 2011cac:	00800044 	movi	r2,1
 2011cb0:	e0bff115 	stw	r2,-60(fp)
 2011cb4:	00000106 	br	2011cbc <__mdiff+0x90>
    }
  else
    i = 0;
 2011cb8:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 2011cbc:	e0bffe17 	ldw	r2,-8(fp)
 2011cc0:	10800117 	ldw	r2,4(r2)
 2011cc4:	100b883a 	mov	r5,r2
 2011cc8:	e13ffd17 	ldw	r4,-12(fp)
 2011ccc:	2010d380 	call	2010d38 <_Balloc>
 2011cd0:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 2011cd4:	e0bff717 	ldw	r2,-36(fp)
 2011cd8:	e0fff117 	ldw	r3,-60(fp)
 2011cdc:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 2011ce0:	e0bffe17 	ldw	r2,-8(fp)
 2011ce4:	10800417 	ldw	r2,16(r2)
 2011ce8:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 2011cec:	e0bffe17 	ldw	r2,-8(fp)
 2011cf0:	10800504 	addi	r2,r2,20
 2011cf4:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 2011cf8:	e0bff217 	ldw	r2,-56(fp)
 2011cfc:	1085883a 	add	r2,r2,r2
 2011d00:	1085883a 	add	r2,r2,r2
 2011d04:	1007883a 	mov	r3,r2
 2011d08:	e0bff417 	ldw	r2,-48(fp)
 2011d0c:	10c5883a 	add	r2,r2,r3
 2011d10:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 2011d14:	e0bfff17 	ldw	r2,-4(fp)
 2011d18:	10800417 	ldw	r2,16(r2)
 2011d1c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2011d20:	e0bfff17 	ldw	r2,-4(fp)
 2011d24:	10800504 	addi	r2,r2,20
 2011d28:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 2011d2c:	e0bff917 	ldw	r2,-28(fp)
 2011d30:	1085883a 	add	r2,r2,r2
 2011d34:	1085883a 	add	r2,r2,r2
 2011d38:	1007883a 	mov	r3,r2
 2011d3c:	e0bff517 	ldw	r2,-44(fp)
 2011d40:	10c5883a 	add	r2,r2,r3
 2011d44:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 2011d48:	e0bff717 	ldw	r2,-36(fp)
 2011d4c:	10800504 	addi	r2,r2,20
 2011d50:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 2011d54:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 2011d58:	e0bff417 	ldw	r2,-48(fp)
 2011d5c:	10800017 	ldw	r2,0(r2)
 2011d60:	10ffffcc 	andi	r3,r2,65535
 2011d64:	e0bff517 	ldw	r2,-44(fp)
 2011d68:	10800017 	ldw	r2,0(r2)
 2011d6c:	10bfffcc 	andi	r2,r2,65535
 2011d70:	1887c83a 	sub	r3,r3,r2
 2011d74:	e0bff317 	ldw	r2,-52(fp)
 2011d78:	1885883a 	add	r2,r3,r2
 2011d7c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2011d80:	e0bffb17 	ldw	r2,-20(fp)
 2011d84:	1005d43a 	srai	r2,r2,16
 2011d88:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 2011d8c:	e0bff417 	ldw	r2,-48(fp)
 2011d90:	10c00104 	addi	r3,r2,4
 2011d94:	e0fff415 	stw	r3,-48(fp)
 2011d98:	10800017 	ldw	r2,0(r2)
 2011d9c:	1006d43a 	srli	r3,r2,16
 2011da0:	e0bff517 	ldw	r2,-44(fp)
 2011da4:	11000104 	addi	r4,r2,4
 2011da8:	e13ff515 	stw	r4,-44(fp)
 2011dac:	10800017 	ldw	r2,0(r2)
 2011db0:	1004d43a 	srli	r2,r2,16
 2011db4:	1887c83a 	sub	r3,r3,r2
 2011db8:	e0bff317 	ldw	r2,-52(fp)
 2011dbc:	1885883a 	add	r2,r3,r2
 2011dc0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2011dc4:	e0bffc17 	ldw	r2,-16(fp)
 2011dc8:	1005d43a 	srai	r2,r2,16
 2011dcc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2011dd0:	e0bff617 	ldw	r2,-40(fp)
 2011dd4:	10c00104 	addi	r3,r2,4
 2011dd8:	e0fff615 	stw	r3,-40(fp)
 2011ddc:	e0fffc17 	ldw	r3,-16(fp)
 2011de0:	1808943a 	slli	r4,r3,16
 2011de4:	e0fffb17 	ldw	r3,-20(fp)
 2011de8:	18ffffcc 	andi	r3,r3,65535
 2011dec:	20c6b03a 	or	r3,r4,r3
 2011df0:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 2011df4:	e0fff517 	ldw	r3,-44(fp)
 2011df8:	e0bffa17 	ldw	r2,-24(fp)
 2011dfc:	18bfd636 	bltu	r3,r2,2011d58 <__mdiff+0x12c>
  while (xa < xae)
 2011e00:	00001d06 	br	2011e78 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 2011e04:	e0bff417 	ldw	r2,-48(fp)
 2011e08:	10800017 	ldw	r2,0(r2)
 2011e0c:	10ffffcc 	andi	r3,r2,65535
 2011e10:	e0bff317 	ldw	r2,-52(fp)
 2011e14:	1885883a 	add	r2,r3,r2
 2011e18:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2011e1c:	e0bffb17 	ldw	r2,-20(fp)
 2011e20:	1005d43a 	srai	r2,r2,16
 2011e24:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 2011e28:	e0bff417 	ldw	r2,-48(fp)
 2011e2c:	10c00104 	addi	r3,r2,4
 2011e30:	e0fff415 	stw	r3,-48(fp)
 2011e34:	10800017 	ldw	r2,0(r2)
 2011e38:	1006d43a 	srli	r3,r2,16
 2011e3c:	e0bff317 	ldw	r2,-52(fp)
 2011e40:	1885883a 	add	r2,r3,r2
 2011e44:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2011e48:	e0bffc17 	ldw	r2,-16(fp)
 2011e4c:	1005d43a 	srai	r2,r2,16
 2011e50:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2011e54:	e0bff617 	ldw	r2,-40(fp)
 2011e58:	10c00104 	addi	r3,r2,4
 2011e5c:	e0fff615 	stw	r3,-40(fp)
 2011e60:	e0fffc17 	ldw	r3,-16(fp)
 2011e64:	1808943a 	slli	r4,r3,16
 2011e68:	e0fffb17 	ldw	r3,-20(fp)
 2011e6c:	18ffffcc 	andi	r3,r3,65535
 2011e70:	20c6b03a 	or	r3,r4,r3
 2011e74:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 2011e78:	e0fff417 	ldw	r3,-48(fp)
 2011e7c:	e0bff817 	ldw	r2,-32(fp)
 2011e80:	18bfe036 	bltu	r3,r2,2011e04 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2011e84:	00000306 	br	2011e94 <__mdiff+0x268>
    wa--;
 2011e88:	e0bff217 	ldw	r2,-56(fp)
 2011e8c:	10bfffc4 	addi	r2,r2,-1
 2011e90:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2011e94:	e0bff617 	ldw	r2,-40(fp)
 2011e98:	10bfff04 	addi	r2,r2,-4
 2011e9c:	e0bff615 	stw	r2,-40(fp)
 2011ea0:	e0bff617 	ldw	r2,-40(fp)
 2011ea4:	10800017 	ldw	r2,0(r2)
 2011ea8:	103ff726 	beq	r2,zero,2011e88 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 2011eac:	e0bff717 	ldw	r2,-36(fp)
 2011eb0:	e0fff217 	ldw	r3,-56(fp)
 2011eb4:	10c00415 	stw	r3,16(r2)
  return c;
 2011eb8:	e0bff717 	ldw	r2,-36(fp)
}
 2011ebc:	e037883a 	mov	sp,fp
 2011ec0:	dfc00117 	ldw	ra,4(sp)
 2011ec4:	df000017 	ldw	fp,0(sp)
 2011ec8:	dec00204 	addi	sp,sp,8
 2011ecc:	f800283a 	ret

02011ed0 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 2011ed0:	defff804 	addi	sp,sp,-32
 2011ed4:	df000715 	stw	fp,28(sp)
 2011ed8:	dc000615 	stw	r16,24(sp)
 2011edc:	df000704 	addi	fp,sp,28
 2011ee0:	e13ffd15 	stw	r4,-12(fp)
 2011ee4:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 2011ee8:	e0bffd17 	ldw	r2,-12(fp)
 2011eec:	e0bff915 	stw	r2,-28(fp)
 2011ef0:	e0bffe17 	ldw	r2,-8(fp)
 2011ef4:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 2011ef8:	e0bffa17 	ldw	r2,-24(fp)
 2011efc:	10dffc2c 	andhi	r3,r2,32752
 2011f00:	00bf3034 	movhi	r2,64704
 2011f04:	1885883a 	add	r2,r3,r2
 2011f08:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 2011f0c:	0400040e 	bge	zero,r16,2011f20 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 2011f10:	8005883a 	mov	r2,r16
 2011f14:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 2011f18:	e03ffb15 	stw	zero,-20(fp)
 2011f1c:	00001406 	br	2011f70 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 2011f20:	0405c83a 	sub	r2,zero,r16
 2011f24:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 2011f28:	80800508 	cmpgei	r2,r16,20
 2011f2c:	1000051e 	bne	r2,zero,2011f44 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 2011f30:	00800234 	movhi	r2,8
 2011f34:	1405d83a 	sra	r2,r2,r16
 2011f38:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 2011f3c:	e03ffb15 	stw	zero,-20(fp)
 2011f40:	00000b06 	br	2011f70 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 2011f44:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 2011f48:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 2011f4c:	808007c8 	cmpgei	r2,r16,31
 2011f50:	1000051e 	bne	r2,zero,2011f68 <__ulp+0x98>
 2011f54:	008007c4 	movi	r2,31
 2011f58:	1405c83a 	sub	r2,r2,r16
 2011f5c:	00c00044 	movi	r3,1
 2011f60:	1884983a 	sll	r2,r3,r2
 2011f64:	00000106 	br	2011f6c <__ulp+0x9c>
 2011f68:	00800044 	movi	r2,1
 2011f6c:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 2011f70:	e0bffb17 	ldw	r2,-20(fp)
 2011f74:	e0fffc17 	ldw	r3,-16(fp)
 2011f78:	1009883a 	mov	r4,r2
 2011f7c:	180b883a 	mov	r5,r3
}
 2011f80:	2005883a 	mov	r2,r4
 2011f84:	2807883a 	mov	r3,r5
 2011f88:	e6ffff04 	addi	sp,fp,-4
 2011f8c:	df000117 	ldw	fp,4(sp)
 2011f90:	dc000017 	ldw	r16,0(sp)
 2011f94:	dec00204 	addi	sp,sp,8
 2011f98:	f800283a 	ret

02011f9c <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 2011f9c:	defff404 	addi	sp,sp,-48
 2011fa0:	dfc00b15 	stw	ra,44(sp)
 2011fa4:	df000a15 	stw	fp,40(sp)
 2011fa8:	df000a04 	addi	fp,sp,40
 2011fac:	e13ffe15 	stw	r4,-8(fp)
 2011fb0:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 2011fb4:	e0bffe17 	ldw	r2,-8(fp)
 2011fb8:	10800504 	addi	r2,r2,20
 2011fbc:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 2011fc0:	e0bffe17 	ldw	r2,-8(fp)
 2011fc4:	10800417 	ldw	r2,16(r2)
 2011fc8:	1085883a 	add	r2,r2,r2
 2011fcc:	1085883a 	add	r2,r2,r2
 2011fd0:	1007883a 	mov	r3,r2
 2011fd4:	e0bff717 	ldw	r2,-36(fp)
 2011fd8:	10c5883a 	add	r2,r2,r3
 2011fdc:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 2011fe0:	e0bff617 	ldw	r2,-40(fp)
 2011fe4:	10bfff04 	addi	r2,r2,-4
 2011fe8:	e0bff615 	stw	r2,-40(fp)
 2011fec:	e0bff617 	ldw	r2,-40(fp)
 2011ff0:	10800017 	ldw	r2,0(r2)
 2011ff4:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 2011ff8:	e13ff817 	ldw	r4,-32(fp)
 2011ffc:	20112040 	call	2011204 <__hi0bits>
 2012000:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 2012004:	00c00804 	movi	r3,32
 2012008:	e0bff917 	ldw	r2,-28(fp)
 201200c:	1887c83a 	sub	r3,r3,r2
 2012010:	e0bfff17 	ldw	r2,-4(fp)
 2012014:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 2012018:	e0bff917 	ldw	r2,-28(fp)
 201201c:	108002c8 	cmpgei	r2,r2,11
 2012020:	10001e1e 	bne	r2,zero,201209c <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 2012024:	00c002c4 	movi	r3,11
 2012028:	e0bff917 	ldw	r2,-28(fp)
 201202c:	1885c83a 	sub	r2,r3,r2
 2012030:	e0fff817 	ldw	r3,-32(fp)
 2012034:	1884d83a 	srl	r2,r3,r2
 2012038:	108ffc34 	orhi	r2,r2,16368
 201203c:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 2012040:	e0bff617 	ldw	r2,-40(fp)
 2012044:	e0fff717 	ldw	r3,-36(fp)
 2012048:	1880062e 	bgeu	r3,r2,2012064 <__b2d+0xc8>
 201204c:	e0bff617 	ldw	r2,-40(fp)
 2012050:	10bfff04 	addi	r2,r2,-4
 2012054:	e0bff615 	stw	r2,-40(fp)
 2012058:	e0bff617 	ldw	r2,-40(fp)
 201205c:	10800017 	ldw	r2,0(r2)
 2012060:	00000106 	br	2012068 <__b2d+0xcc>
 2012064:	0005883a 	mov	r2,zero
 2012068:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 201206c:	e0bff917 	ldw	r2,-28(fp)
 2012070:	10800544 	addi	r2,r2,21
 2012074:	e0fff817 	ldw	r3,-32(fp)
 2012078:	1886983a 	sll	r3,r3,r2
 201207c:	010002c4 	movi	r4,11
 2012080:	e0bff917 	ldw	r2,-28(fp)
 2012084:	2085c83a 	sub	r2,r4,r2
 2012088:	e13ffa17 	ldw	r4,-24(fp)
 201208c:	2084d83a 	srl	r2,r4,r2
 2012090:	1884b03a 	or	r2,r3,r2
 2012094:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 2012098:	00003606 	br	2012174 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 201209c:	e0bff617 	ldw	r2,-40(fp)
 20120a0:	e0fff717 	ldw	r3,-36(fp)
 20120a4:	1880062e 	bgeu	r3,r2,20120c0 <__b2d+0x124>
 20120a8:	e0bff617 	ldw	r2,-40(fp)
 20120ac:	10bfff04 	addi	r2,r2,-4
 20120b0:	e0bff615 	stw	r2,-40(fp)
 20120b4:	e0bff617 	ldw	r2,-40(fp)
 20120b8:	10800017 	ldw	r2,0(r2)
 20120bc:	00000106 	br	20120c4 <__b2d+0x128>
 20120c0:	0005883a 	mov	r2,zero
 20120c4:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 20120c8:	e0bff917 	ldw	r2,-28(fp)
 20120cc:	10bffd44 	addi	r2,r2,-11
 20120d0:	e0bff915 	stw	r2,-28(fp)
 20120d4:	e0bff917 	ldw	r2,-28(fp)
 20120d8:	10002126 	beq	r2,zero,2012160 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 20120dc:	e0fff817 	ldw	r3,-32(fp)
 20120e0:	e0bff917 	ldw	r2,-28(fp)
 20120e4:	1886983a 	sll	r3,r3,r2
 20120e8:	01000804 	movi	r4,32
 20120ec:	e0bff917 	ldw	r2,-28(fp)
 20120f0:	2085c83a 	sub	r2,r4,r2
 20120f4:	e13ffb17 	ldw	r4,-20(fp)
 20120f8:	2084d83a 	srl	r2,r4,r2
 20120fc:	1884b03a 	or	r2,r3,r2
 2012100:	108ffc34 	orhi	r2,r2,16368
 2012104:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 2012108:	e0bff617 	ldw	r2,-40(fp)
 201210c:	e0fff717 	ldw	r3,-36(fp)
 2012110:	1880062e 	bgeu	r3,r2,201212c <__b2d+0x190>
 2012114:	e0bff617 	ldw	r2,-40(fp)
 2012118:	10bfff04 	addi	r2,r2,-4
 201211c:	e0bff615 	stw	r2,-40(fp)
 2012120:	e0bff617 	ldw	r2,-40(fp)
 2012124:	10800017 	ldw	r2,0(r2)
 2012128:	00000106 	br	2012130 <__b2d+0x194>
 201212c:	0005883a 	mov	r2,zero
 2012130:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 2012134:	e0fffb17 	ldw	r3,-20(fp)
 2012138:	e0bff917 	ldw	r2,-28(fp)
 201213c:	1886983a 	sll	r3,r3,r2
 2012140:	01000804 	movi	r4,32
 2012144:	e0bff917 	ldw	r2,-28(fp)
 2012148:	2085c83a 	sub	r2,r4,r2
 201214c:	e13ff817 	ldw	r4,-32(fp)
 2012150:	2084d83a 	srl	r2,r4,r2
 2012154:	1884b03a 	or	r2,r3,r2
 2012158:	e0bffc15 	stw	r2,-16(fp)
 201215c:	00000506 	br	2012174 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 2012160:	e0bff817 	ldw	r2,-32(fp)
 2012164:	108ffc34 	orhi	r2,r2,16368
 2012168:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 201216c:	e0bffb17 	ldw	r2,-20(fp)
 2012170:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 2012174:	e0bffc17 	ldw	r2,-16(fp)
 2012178:	e0fffd17 	ldw	r3,-12(fp)
 201217c:	1009883a 	mov	r4,r2
 2012180:	180b883a 	mov	r5,r3
}
 2012184:	2005883a 	mov	r2,r4
 2012188:	2807883a 	mov	r3,r5
 201218c:	e037883a 	mov	sp,fp
 2012190:	dfc00117 	ldw	ra,4(sp)
 2012194:	df000017 	ldw	fp,0(sp)
 2012198:	dec00204 	addi	sp,sp,8
 201219c:	f800283a 	ret

020121a0 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 20121a0:	defff004 	addi	sp,sp,-64
 20121a4:	dfc00f15 	stw	ra,60(sp)
 20121a8:	df000e15 	stw	fp,56(sp)
 20121ac:	dc000d15 	stw	r16,52(sp)
 20121b0:	df000e04 	addi	fp,sp,56
 20121b4:	e13ffb15 	stw	r4,-20(fp)
 20121b8:	e17ffc15 	stw	r5,-16(fp)
 20121bc:	e1bffd15 	stw	r6,-12(fp)
 20121c0:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 20121c4:	e0bffc17 	ldw	r2,-16(fp)
 20121c8:	e0bff715 	stw	r2,-36(fp)
 20121cc:	e0bffd17 	ldw	r2,-12(fp)
 20121d0:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 20121d4:	e0bffc17 	ldw	r2,-16(fp)
 20121d8:	e0bff715 	stw	r2,-36(fp)
 20121dc:	e0bffd17 	ldw	r2,-12(fp)
 20121e0:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 20121e4:	01400044 	movi	r5,1
 20121e8:	e13ffb17 	ldw	r4,-20(fp)
 20121ec:	2010d380 	call	2010d38 <_Balloc>
 20121f0:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 20121f4:	e0bff417 	ldw	r2,-48(fp)
 20121f8:	10800504 	addi	r2,r2,20
 20121fc:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 2012200:	e0fff817 	ldw	r3,-32(fp)
 2012204:	00800434 	movhi	r2,16
 2012208:	10bfffc4 	addi	r2,r2,-1
 201220c:	1884703a 	and	r2,r3,r2
 2012210:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 2012214:	e0fff817 	ldw	r3,-32(fp)
 2012218:	00a00034 	movhi	r2,32768
 201221c:	10bfffc4 	addi	r2,r2,-1
 2012220:	1884703a 	and	r2,r3,r2
 2012224:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 2012228:	e0bff817 	ldw	r2,-32(fp)
 201222c:	1004d53a 	srli	r2,r2,20
 2012230:	e0bff615 	stw	r2,-40(fp)
 2012234:	e0bff617 	ldw	r2,-40(fp)
 2012238:	10000326 	beq	r2,zero,2012248 <__d2b+0xa8>
    z |= Exp_msk1;
 201223c:	e0bffa17 	ldw	r2,-24(fp)
 2012240:	10800434 	orhi	r2,r2,16
 2012244:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 2012248:	e0bff717 	ldw	r2,-36(fp)
 201224c:	10002826 	beq	r2,zero,20122f0 <__d2b+0x150>
    {
      y = d1;
 2012250:	e0bff717 	ldw	r2,-36(fp)
 2012254:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 2012258:	e0bff904 	addi	r2,fp,-28
 201225c:	1009883a 	mov	r4,r2
 2012260:	20112940 	call	2011294 <__lo0bits>
 2012264:	e0bff315 	stw	r2,-52(fp)
      if (k)
 2012268:	e0bff317 	ldw	r2,-52(fp)
 201226c:	10000e26 	beq	r2,zero,20122a8 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 2012270:	e0fffa17 	ldw	r3,-24(fp)
 2012274:	01000804 	movi	r4,32
 2012278:	e0bff317 	ldw	r2,-52(fp)
 201227c:	2085c83a 	sub	r2,r4,r2
 2012280:	1886983a 	sll	r3,r3,r2
 2012284:	e0bff917 	ldw	r2,-28(fp)
 2012288:	1886b03a 	or	r3,r3,r2
 201228c:	e0bff517 	ldw	r2,-44(fp)
 2012290:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 2012294:	e0fffa17 	ldw	r3,-24(fp)
 2012298:	e0bff317 	ldw	r2,-52(fp)
 201229c:	1884d83a 	srl	r2,r3,r2
 20122a0:	e0bffa15 	stw	r2,-24(fp)
 20122a4:	00000306 	br	20122b4 <__d2b+0x114>
	}
      else
	x[0] = y;
 20122a8:	e0fff917 	ldw	r3,-28(fp)
 20122ac:	e0bff517 	ldw	r2,-44(fp)
 20122b0:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 20122b4:	e0bff517 	ldw	r2,-44(fp)
 20122b8:	10800104 	addi	r2,r2,4
 20122bc:	e0fffa17 	ldw	r3,-24(fp)
 20122c0:	10c00015 	stw	r3,0(r2)
 20122c4:	10800017 	ldw	r2,0(r2)
 20122c8:	10000226 	beq	r2,zero,20122d4 <__d2b+0x134>
 20122cc:	00800084 	movi	r2,2
 20122d0:	00000106 	br	20122d8 <__d2b+0x138>
 20122d4:	00800044 	movi	r2,1
 20122d8:	e0fff417 	ldw	r3,-48(fp)
 20122dc:	18800415 	stw	r2,16(r3)
 20122e0:	e0bff417 	ldw	r2,-48(fp)
 20122e4:	10800417 	ldw	r2,16(r2)
 20122e8:	e0bff215 	stw	r2,-56(fp)
 20122ec:	00001006 	br	2012330 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 20122f0:	e0bffa04 	addi	r2,fp,-24
 20122f4:	1009883a 	mov	r4,r2
 20122f8:	20112940 	call	2011294 <__lo0bits>
 20122fc:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 2012300:	e0fffa17 	ldw	r3,-24(fp)
 2012304:	e0bff517 	ldw	r2,-44(fp)
 2012308:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 201230c:	e0bff417 	ldw	r2,-48(fp)
 2012310:	00c00044 	movi	r3,1
 2012314:	10c00415 	stw	r3,16(r2)
 2012318:	e0bff417 	ldw	r2,-48(fp)
 201231c:	10800417 	ldw	r2,16(r2)
 2012320:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 2012324:	e0bff317 	ldw	r2,-52(fp)
 2012328:	10800804 	addi	r2,r2,32
 201232c:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 2012330:	e0bff617 	ldw	r2,-40(fp)
 2012334:	10000c26 	beq	r2,zero,2012368 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 2012338:	e0bff617 	ldw	r2,-40(fp)
 201233c:	10fef344 	addi	r3,r2,-1075
 2012340:	e0bff317 	ldw	r2,-52(fp)
 2012344:	1887883a 	add	r3,r3,r2
 2012348:	e0bffe17 	ldw	r2,-8(fp)
 201234c:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 2012350:	00c00d44 	movi	r3,53
 2012354:	e0bff317 	ldw	r2,-52(fp)
 2012358:	1887c83a 	sub	r3,r3,r2
 201235c:	e0800217 	ldw	r2,8(fp)
 2012360:	10c00015 	stw	r3,0(r2)
 2012364:	00001706 	br	20123c4 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 2012368:	e0bff617 	ldw	r2,-40(fp)
 201236c:	10fef384 	addi	r3,r2,-1074
 2012370:	e0bff317 	ldw	r2,-52(fp)
 2012374:	1887883a 	add	r3,r3,r2
 2012378:	e0bffe17 	ldw	r2,-8(fp)
 201237c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 2012380:	e0bff217 	ldw	r2,-56(fp)
 2012384:	1020917a 	slli	r16,r2,5
 2012388:	e0fff217 	ldw	r3,-56(fp)
 201238c:	00900034 	movhi	r2,16384
 2012390:	10bfffc4 	addi	r2,r2,-1
 2012394:	1885883a 	add	r2,r3,r2
 2012398:	1085883a 	add	r2,r2,r2
 201239c:	1085883a 	add	r2,r2,r2
 20123a0:	1007883a 	mov	r3,r2
 20123a4:	e0bff517 	ldw	r2,-44(fp)
 20123a8:	10c5883a 	add	r2,r2,r3
 20123ac:	10800017 	ldw	r2,0(r2)
 20123b0:	1009883a 	mov	r4,r2
 20123b4:	20112040 	call	2011204 <__hi0bits>
 20123b8:	8087c83a 	sub	r3,r16,r2
 20123bc:	e0800217 	ldw	r2,8(fp)
 20123c0:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 20123c4:	e0bff417 	ldw	r2,-48(fp)
}
 20123c8:	e6ffff04 	addi	sp,fp,-4
 20123cc:	dfc00217 	ldw	ra,8(sp)
 20123d0:	df000117 	ldw	fp,4(sp)
 20123d4:	dc000017 	ldw	r16,0(sp)
 20123d8:	dec00304 	addi	sp,sp,12
 20123dc:	f800283a 	ret

020123e0 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 20123e0:	defff504 	addi	sp,sp,-44
 20123e4:	dfc00a15 	stw	ra,40(sp)
 20123e8:	df000915 	stw	fp,36(sp)
 20123ec:	df000904 	addi	fp,sp,36
 20123f0:	e13ffe15 	stw	r4,-8(fp)
 20123f4:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 20123f8:	e0bffc04 	addi	r2,fp,-16
 20123fc:	100b883a 	mov	r5,r2
 2012400:	e13ffe17 	ldw	r4,-8(fp)
 2012404:	2011f9c0 	call	2011f9c <__b2d>
 2012408:	1009883a 	mov	r4,r2
 201240c:	180b883a 	mov	r5,r3
 2012410:	e13ff815 	stw	r4,-32(fp)
 2012414:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 2012418:	e0bffd04 	addi	r2,fp,-12
 201241c:	100b883a 	mov	r5,r2
 2012420:	e13fff17 	ldw	r4,-4(fp)
 2012424:	2011f9c0 	call	2011f9c <__b2d>
 2012428:	1009883a 	mov	r4,r2
 201242c:	180b883a 	mov	r5,r3
 2012430:	e13ffa15 	stw	r4,-24(fp)
 2012434:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 2012438:	e0fffc17 	ldw	r3,-16(fp)
 201243c:	e0bffd17 	ldw	r2,-12(fp)
 2012440:	1887c83a 	sub	r3,r3,r2
 2012444:	e0bffe17 	ldw	r2,-8(fp)
 2012448:	11000417 	ldw	r4,16(r2)
 201244c:	e0bfff17 	ldw	r2,-4(fp)
 2012450:	10800417 	ldw	r2,16(r2)
 2012454:	2085c83a 	sub	r2,r4,r2
 2012458:	1004917a 	slli	r2,r2,5
 201245c:	1885883a 	add	r2,r3,r2
 2012460:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 2012464:	e0bff717 	ldw	r2,-36(fp)
 2012468:	0080060e 	bge	zero,r2,2012484 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 201246c:	e0fff917 	ldw	r3,-28(fp)
 2012470:	e0bff717 	ldw	r2,-36(fp)
 2012474:	1004953a 	slli	r2,r2,20
 2012478:	1885883a 	add	r2,r3,r2
 201247c:	e0bff915 	stw	r2,-28(fp)
 2012480:	00000806 	br	20124a4 <__ratio+0xc4>
  else
    {
      k = -k;
 2012484:	e0bff717 	ldw	r2,-36(fp)
 2012488:	0085c83a 	sub	r2,zero,r2
 201248c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 2012490:	e0fffb17 	ldw	r3,-20(fp)
 2012494:	e0bff717 	ldw	r2,-36(fp)
 2012498:	1004953a 	slli	r2,r2,20
 201249c:	1885883a 	add	r2,r3,r2
 20124a0:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 20124a4:	e0bff817 	ldw	r2,-32(fp)
 20124a8:	e0fff917 	ldw	r3,-28(fp)
 20124ac:	e13ffa17 	ldw	r4,-24(fp)
 20124b0:	e17ffb17 	ldw	r5,-20(fp)
 20124b4:	200d883a 	mov	r6,r4
 20124b8:	280f883a 	mov	r7,r5
 20124bc:	1009883a 	mov	r4,r2
 20124c0:	180b883a 	mov	r5,r3
 20124c4:	20073000 	call	2007300 <__divdf3>
 20124c8:	100f883a 	mov	r7,r2
 20124cc:	1811883a 	mov	r8,r3
 20124d0:	380b883a 	mov	r5,r7
 20124d4:	400d883a 	mov	r6,r8
 20124d8:	2807883a 	mov	r3,r5
 20124dc:	3009883a 	mov	r4,r6
}
 20124e0:	1805883a 	mov	r2,r3
 20124e4:	2007883a 	mov	r3,r4
 20124e8:	e037883a 	mov	sp,fp
 20124ec:	dfc00117 	ldw	ra,4(sp)
 20124f0:	df000017 	ldw	fp,0(sp)
 20124f4:	dec00204 	addi	sp,sp,8
 20124f8:	f800283a 	ret

020124fc <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 20124fc:	defffb04 	addi	sp,sp,-20
 2012500:	dfc00415 	stw	ra,16(sp)
 2012504:	df000315 	stw	fp,12(sp)
 2012508:	df000304 	addi	fp,sp,12
 201250c:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 2012510:	e03ffd15 	stw	zero,-12(fp)
 2012514:	008ffc34 	movhi	r2,16368
 2012518:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 201251c:	e0bfff17 	ldw	r2,-4(fp)
 2012520:	10800608 	cmpgei	r2,r2,24
 2012524:	1000141e 	bne	r2,zero,2012578 <_mprec_log10+0x7c>
    return tens[dig];
 2012528:	008080b4 	movhi	r2,514
 201252c:	10898e04 	addi	r2,r2,9784
 2012530:	e0ffff17 	ldw	r3,-4(fp)
 2012534:	180690fa 	slli	r3,r3,3
 2012538:	10c9883a 	add	r4,r2,r3
 201253c:	20800017 	ldw	r2,0(r4)
 2012540:	20c00117 	ldw	r3,4(r4)
 2012544:	00001006 	br	2012588 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 2012548:	000d883a 	mov	r6,zero
 201254c:	01d00934 	movhi	r7,16420
 2012550:	e13ffd17 	ldw	r4,-12(fp)
 2012554:	e17ffe17 	ldw	r5,-8(fp)
 2012558:	2007e400 	call	2007e40 <__muldf3>
 201255c:	1009883a 	mov	r4,r2
 2012560:	180b883a 	mov	r5,r3
 2012564:	e13ffd15 	stw	r4,-12(fp)
 2012568:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 201256c:	e0bfff17 	ldw	r2,-4(fp)
 2012570:	10bfffc4 	addi	r2,r2,-1
 2012574:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 2012578:	e0bfff17 	ldw	r2,-4(fp)
 201257c:	00bff216 	blt	zero,r2,2012548 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 2012580:	e0bffd17 	ldw	r2,-12(fp)
 2012584:	e0fffe17 	ldw	r3,-8(fp)
 2012588:	1009883a 	mov	r4,r2
 201258c:	180b883a 	mov	r5,r3
}
 2012590:	2005883a 	mov	r2,r4
 2012594:	2807883a 	mov	r3,r5
 2012598:	e037883a 	mov	sp,fp
 201259c:	dfc00117 	ldw	ra,4(sp)
 20125a0:	df000017 	ldw	fp,0(sp)
 20125a4:	dec00204 	addi	sp,sp,8
 20125a8:	f800283a 	ret

020125ac <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 20125ac:	defff904 	addi	sp,sp,-28
 20125b0:	df000615 	stw	fp,24(sp)
 20125b4:	df000604 	addi	fp,sp,24
 20125b8:	e13ffd15 	stw	r4,-12(fp)
 20125bc:	e17ffe15 	stw	r5,-8(fp)
 20125c0:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 20125c4:	e0bffe17 	ldw	r2,-8(fp)
 20125c8:	10bfffc4 	addi	r2,r2,-1
 20125cc:	1005d17a 	srai	r2,r2,5
 20125d0:	10800044 	addi	r2,r2,1
 20125d4:	1085883a 	add	r2,r2,r2
 20125d8:	1085883a 	add	r2,r2,r2
 20125dc:	1007883a 	mov	r3,r2
 20125e0:	e0bffd17 	ldw	r2,-12(fp)
 20125e4:	10c5883a 	add	r2,r2,r3
 20125e8:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 20125ec:	e0bfff17 	ldw	r2,-4(fp)
 20125f0:	10800504 	addi	r2,r2,20
 20125f4:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 20125f8:	e0bfff17 	ldw	r2,-4(fp)
 20125fc:	10800417 	ldw	r2,16(r2)
 2012600:	1085883a 	add	r2,r2,r2
 2012604:	1085883a 	add	r2,r2,r2
 2012608:	1007883a 	mov	r3,r2
 201260c:	e0bffa17 	ldw	r2,-24(fp)
 2012610:	10c5883a 	add	r2,r2,r3
 2012614:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 2012618:	00000806 	br	201263c <__copybits+0x90>
		*c++ = *x++;
 201261c:	e0bffd17 	ldw	r2,-12(fp)
 2012620:	10c00104 	addi	r3,r2,4
 2012624:	e0fffd15 	stw	r3,-12(fp)
 2012628:	e0fffa17 	ldw	r3,-24(fp)
 201262c:	19000104 	addi	r4,r3,4
 2012630:	e13ffa15 	stw	r4,-24(fp)
 2012634:	18c00017 	ldw	r3,0(r3)
 2012638:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 201263c:	e0fffa17 	ldw	r3,-24(fp)
 2012640:	e0bffc17 	ldw	r2,-16(fp)
 2012644:	18bff536 	bltu	r3,r2,201261c <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2012648:	00000406 	br	201265c <__copybits+0xb0>
		*c++ = 0;
 201264c:	e0bffd17 	ldw	r2,-12(fp)
 2012650:	10c00104 	addi	r3,r2,4
 2012654:	e0fffd15 	stw	r3,-12(fp)
 2012658:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 201265c:	e0fffd17 	ldw	r3,-12(fp)
 2012660:	e0bffb17 	ldw	r2,-20(fp)
 2012664:	18bff936 	bltu	r3,r2,201264c <__copybits+0xa0>
		*c++ = 0;
}
 2012668:	0001883a 	nop
 201266c:	e037883a 	mov	sp,fp
 2012670:	df000017 	ldw	fp,0(sp)
 2012674:	dec00104 	addi	sp,sp,4
 2012678:	f800283a 	ret

0201267c <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 201267c:	defff704 	addi	sp,sp,-36
 2012680:	df000815 	stw	fp,32(sp)
 2012684:	df000804 	addi	fp,sp,32
 2012688:	e13ffe15 	stw	r4,-8(fp)
 201268c:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 2012690:	e0bffe17 	ldw	r2,-8(fp)
 2012694:	10800504 	addi	r2,r2,20
 2012698:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 201269c:	e0bffe17 	ldw	r2,-8(fp)
 20126a0:	10800417 	ldw	r2,16(r2)
 20126a4:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 20126a8:	e0bfff17 	ldw	r2,-4(fp)
 20126ac:	1005d17a 	srai	r2,r2,5
 20126b0:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 20126b4:	e0bff817 	ldw	r2,-32(fp)
 20126b8:	e0fffa17 	ldw	r3,-24(fp)
 20126bc:	1880030e 	bge	r3,r2,20126cc <__any_on+0x50>
		n = nwds;
 20126c0:	e0bffa17 	ldw	r2,-24(fp)
 20126c4:	e0bff815 	stw	r2,-32(fp)
 20126c8:	00001f06 	br	2012748 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 20126cc:	e0fff817 	ldw	r3,-32(fp)
 20126d0:	e0bffa17 	ldw	r2,-24(fp)
 20126d4:	18801c0e 	bge	r3,r2,2012748 <__any_on+0xcc>
 20126d8:	e0bfff17 	ldw	r2,-4(fp)
 20126dc:	108007cc 	andi	r2,r2,31
 20126e0:	e0bfff15 	stw	r2,-4(fp)
 20126e4:	e0bfff17 	ldw	r2,-4(fp)
 20126e8:	10001726 	beq	r2,zero,2012748 <__any_on+0xcc>
		x1 = x2 = x[n];
 20126ec:	e0bff817 	ldw	r2,-32(fp)
 20126f0:	1085883a 	add	r2,r2,r2
 20126f4:	1085883a 	add	r2,r2,r2
 20126f8:	1007883a 	mov	r3,r2
 20126fc:	e0bff917 	ldw	r2,-28(fp)
 2012700:	10c5883a 	add	r2,r2,r3
 2012704:	10800017 	ldw	r2,0(r2)
 2012708:	e0bffb15 	stw	r2,-20(fp)
 201270c:	e0bffb17 	ldw	r2,-20(fp)
 2012710:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 2012714:	e0fffc17 	ldw	r3,-16(fp)
 2012718:	e0bfff17 	ldw	r2,-4(fp)
 201271c:	1884d83a 	srl	r2,r3,r2
 2012720:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 2012724:	e0fffc17 	ldw	r3,-16(fp)
 2012728:	e0bfff17 	ldw	r2,-4(fp)
 201272c:	1884983a 	sll	r2,r3,r2
 2012730:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 2012734:	e0fffc17 	ldw	r3,-16(fp)
 2012738:	e0bffb17 	ldw	r2,-20(fp)
 201273c:	18800226 	beq	r3,r2,2012748 <__any_on+0xcc>
			return 1;
 2012740:	00800044 	movi	r2,1
 2012744:	00001606 	br	20127a0 <__any_on+0x124>
		}
	x0 = x;
 2012748:	e0bff917 	ldw	r2,-28(fp)
 201274c:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 2012750:	e0bff817 	ldw	r2,-32(fp)
 2012754:	1085883a 	add	r2,r2,r2
 2012758:	1085883a 	add	r2,r2,r2
 201275c:	1007883a 	mov	r3,r2
 2012760:	e0bff917 	ldw	r2,-28(fp)
 2012764:	10c5883a 	add	r2,r2,r3
 2012768:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 201276c:	00000806 	br	2012790 <__any_on+0x114>
		if (*--x)
 2012770:	e0bff917 	ldw	r2,-28(fp)
 2012774:	10bfff04 	addi	r2,r2,-4
 2012778:	e0bff915 	stw	r2,-28(fp)
 201277c:	e0bff917 	ldw	r2,-28(fp)
 2012780:	10800017 	ldw	r2,0(r2)
 2012784:	10000226 	beq	r2,zero,2012790 <__any_on+0x114>
			return 1;
 2012788:	00800044 	movi	r2,1
 201278c:	00000406 	br	20127a0 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 2012790:	e0bff917 	ldw	r2,-28(fp)
 2012794:	e0fffd17 	ldw	r3,-12(fp)
 2012798:	18bff536 	bltu	r3,r2,2012770 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 201279c:	0005883a 	mov	r2,zero
}
 20127a0:	e037883a 	mov	sp,fp
 20127a4:	df000017 	ldw	fp,0(sp)
 20127a8:	dec00104 	addi	sp,sp,4
 20127ac:	f800283a 	ret

020127b0 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 20127b0:	deffe104 	addi	sp,sp,-124
 20127b4:	dfc01e15 	stw	ra,120(sp)
 20127b8:	df001d15 	stw	fp,116(sp)
 20127bc:	df001d04 	addi	fp,sp,116
 20127c0:	e13ffd15 	stw	r4,-12(fp)
 20127c4:	e17ffe15 	stw	r5,-8(fp)
 20127c8:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 20127cc:	e0bffe17 	ldw	r2,-8(fp)
 20127d0:	1000041e 	bne	r2,zero,20127e4 <_realloc_r+0x34>
 20127d4:	e17fff17 	ldw	r5,-4(fp)
 20127d8:	e13ffd17 	ldw	r4,-12(fp)
 20127dc:	200fdf80 	call	200fdf8 <_malloc_r>
 20127e0:	0002ea06 	br	201338c <_realloc_r+0xbdc>

  MALLOC_LOCK;
 20127e4:	e13ffd17 	ldw	r4,-12(fp)
 20127e8:	201705c0 	call	201705c <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 20127ec:	e0bffe17 	ldw	r2,-8(fp)
 20127f0:	10bffe04 	addi	r2,r2,-8
 20127f4:	e0bfef15 	stw	r2,-68(fp)
 20127f8:	e0bfef17 	ldw	r2,-68(fp)
 20127fc:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 2012800:	e0bfef17 	ldw	r2,-68(fp)
 2012804:	10c00117 	ldw	r3,4(r2)
 2012808:	00bfff04 	movi	r2,-4
 201280c:	1884703a 	and	r2,r3,r2
 2012810:	e0bff015 	stw	r2,-64(fp)
 2012814:	e0bff017 	ldw	r2,-64(fp)
 2012818:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 201281c:	e0bfff17 	ldw	r2,-4(fp)
 2012820:	108002c4 	addi	r2,r2,11
 2012824:	108005f0 	cmpltui	r2,r2,23
 2012828:	1000051e 	bne	r2,zero,2012840 <_realloc_r+0x90>
 201282c:	e0bfff17 	ldw	r2,-4(fp)
 2012830:	10c002c4 	addi	r3,r2,11
 2012834:	00bffe04 	movi	r2,-8
 2012838:	1884703a 	and	r2,r3,r2
 201283c:	00000106 	br	2012844 <_realloc_r+0x94>
 2012840:	00800404 	movi	r2,16
 2012844:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2012848:	e0bff117 	ldw	r2,-60(fp)
 201284c:	10000316 	blt	r2,zero,201285c <_realloc_r+0xac>
 2012850:	e0fff117 	ldw	r3,-60(fp)
 2012854:	e0bfff17 	ldw	r2,-4(fp)
 2012858:	1880052e 	bgeu	r3,r2,2012870 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 201285c:	e0bffd17 	ldw	r2,-12(fp)
 2012860:	00c00304 	movi	r3,12
 2012864:	10c00015 	stw	r3,0(r2)
    return 0;
 2012868:	0005883a 	mov	r2,zero
 201286c:	0002c706 	br	201338c <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 2012870:	e0fff017 	ldw	r3,-64(fp)
 2012874:	e0bff117 	ldw	r2,-60(fp)
 2012878:	18828b0e 	bge	r3,r2,20132a8 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 201287c:	e0ffef17 	ldw	r3,-68(fp)
 2012880:	e0bff017 	ldw	r2,-64(fp)
 2012884:	1885883a 	add	r2,r3,r2
 2012888:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 201288c:	008080b4 	movhi	r2,514
 2012890:	108b8004 	addi	r2,r2,11776
 2012894:	10c00217 	ldw	r3,8(r2)
 2012898:	e0bfe517 	ldw	r2,-108(fp)
 201289c:	18800926 	beq	r3,r2,20128c4 <_realloc_r+0x114>
 20128a0:	e0bfe517 	ldw	r2,-108(fp)
 20128a4:	10c00117 	ldw	r3,4(r2)
 20128a8:	00bfff84 	movi	r2,-2
 20128ac:	1884703a 	and	r2,r3,r2
 20128b0:	e0ffe517 	ldw	r3,-108(fp)
 20128b4:	1885883a 	add	r2,r3,r2
 20128b8:	10800117 	ldw	r2,4(r2)
 20128bc:	1080004c 	andi	r2,r2,1
 20128c0:	1000461e 	bne	r2,zero,20129dc <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 20128c4:	e0bfe517 	ldw	r2,-108(fp)
 20128c8:	10c00117 	ldw	r3,4(r2)
 20128cc:	00bfff04 	movi	r2,-4
 20128d0:	1884703a 	and	r2,r3,r2
 20128d4:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 20128d8:	008080b4 	movhi	r2,514
 20128dc:	108b8004 	addi	r2,r2,11776
 20128e0:	10c00217 	ldw	r3,8(r2)
 20128e4:	e0bfe517 	ldw	r2,-108(fp)
 20128e8:	1880251e 	bne	r3,r2,2012980 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 20128ec:	e0ffe617 	ldw	r3,-104(fp)
 20128f0:	e0bfe417 	ldw	r2,-112(fp)
 20128f4:	1885883a 	add	r2,r3,r2
 20128f8:	1007883a 	mov	r3,r2
 20128fc:	e0bff117 	ldw	r2,-60(fp)
 2012900:	10800404 	addi	r2,r2,16
 2012904:	18803816 	blt	r3,r2,20129e8 <_realloc_r+0x238>
        {
          newsize += nextsize;
 2012908:	e0ffe417 	ldw	r3,-112(fp)
 201290c:	e0bfe617 	ldw	r2,-104(fp)
 2012910:	1885883a 	add	r2,r3,r2
 2012914:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 2012918:	008080b4 	movhi	r2,514
 201291c:	108b8004 	addi	r2,r2,11776
 2012920:	e13fef17 	ldw	r4,-68(fp)
 2012924:	e0fff117 	ldw	r3,-60(fp)
 2012928:	20c7883a 	add	r3,r4,r3
 201292c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 2012930:	008080b4 	movhi	r2,514
 2012934:	108b8004 	addi	r2,r2,11776
 2012938:	10800217 	ldw	r2,8(r2)
 201293c:	e13fe417 	ldw	r4,-112(fp)
 2012940:	e0fff117 	ldw	r3,-60(fp)
 2012944:	20c7c83a 	sub	r3,r4,r3
 2012948:	18c00054 	ori	r3,r3,1
 201294c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 2012950:	e0bfef17 	ldw	r2,-68(fp)
 2012954:	10800117 	ldw	r2,4(r2)
 2012958:	10c0004c 	andi	r3,r2,1
 201295c:	e0bff117 	ldw	r2,-60(fp)
 2012960:	1886b03a 	or	r3,r3,r2
 2012964:	e0bfef17 	ldw	r2,-68(fp)
 2012968:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 201296c:	e13ffd17 	ldw	r4,-12(fp)
 2012970:	201717c0 	call	201717c <__malloc_unlock>
          return chunk2mem(oldp);
 2012974:	e0bfef17 	ldw	r2,-68(fp)
 2012978:	10800204 	addi	r2,r2,8
 201297c:	00028306 	br	201338c <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 2012980:	e0ffe617 	ldw	r3,-104(fp)
 2012984:	e0bfe417 	ldw	r2,-112(fp)
 2012988:	1885883a 	add	r2,r3,r2
 201298c:	1007883a 	mov	r3,r2
 2012990:	e0bff117 	ldw	r2,-60(fp)
 2012994:	18801416 	blt	r3,r2,20129e8 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 2012998:	e0bfe517 	ldw	r2,-108(fp)
 201299c:	10800317 	ldw	r2,12(r2)
 20129a0:	e0bff215 	stw	r2,-56(fp)
 20129a4:	e0bfe517 	ldw	r2,-108(fp)
 20129a8:	10800217 	ldw	r2,8(r2)
 20129ac:	e0bff315 	stw	r2,-52(fp)
 20129b0:	e0bff317 	ldw	r2,-52(fp)
 20129b4:	e0fff217 	ldw	r3,-56(fp)
 20129b8:	10c00315 	stw	r3,12(r2)
 20129bc:	e0bff217 	ldw	r2,-56(fp)
 20129c0:	e0fff317 	ldw	r3,-52(fp)
 20129c4:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 20129c8:	e0ffe417 	ldw	r3,-112(fp)
 20129cc:	e0bfe617 	ldw	r2,-104(fp)
 20129d0:	1885883a 	add	r2,r3,r2
 20129d4:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 20129d8:	00023306 	br	20132a8 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 20129dc:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 20129e0:	e03fe615 	stw	zero,-104(fp)
 20129e4:	00000106 	br	20129ec <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 20129e8:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 20129ec:	e0bfef17 	ldw	r2,-68(fp)
 20129f0:	10800117 	ldw	r2,4(r2)
 20129f4:	1080004c 	andi	r2,r2,1
 20129f8:	1001a91e 	bne	r2,zero,20130a0 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 20129fc:	e0bfef17 	ldw	r2,-68(fp)
 2012a00:	10800017 	ldw	r2,0(r2)
 2012a04:	0085c83a 	sub	r2,zero,r2
 2012a08:	e0ffef17 	ldw	r3,-68(fp)
 2012a0c:	1885883a 	add	r2,r3,r2
 2012a10:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 2012a14:	e0bff417 	ldw	r2,-48(fp)
 2012a18:	10c00117 	ldw	r3,4(r2)
 2012a1c:	00bfff04 	movi	r2,-4
 2012a20:	1884703a 	and	r2,r3,r2
 2012a24:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 2012a28:	e0bfe517 	ldw	r2,-108(fp)
 2012a2c:	10012226 	beq	r2,zero,2012eb8 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 2012a30:	008080b4 	movhi	r2,514
 2012a34:	108b8004 	addi	r2,r2,11776
 2012a38:	10c00217 	ldw	r3,8(r2)
 2012a3c:	e0bfe517 	ldw	r2,-108(fp)
 2012a40:	1880951e 	bne	r3,r2,2012c98 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 2012a44:	e0ffe617 	ldw	r3,-104(fp)
 2012a48:	e0bff517 	ldw	r2,-44(fp)
 2012a4c:	1887883a 	add	r3,r3,r2
 2012a50:	e0bfe417 	ldw	r2,-112(fp)
 2012a54:	1885883a 	add	r2,r3,r2
 2012a58:	1007883a 	mov	r3,r2
 2012a5c:	e0bff117 	ldw	r2,-60(fp)
 2012a60:	10800404 	addi	r2,r2,16
 2012a64:	18811416 	blt	r3,r2,2012eb8 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 2012a68:	e0bff417 	ldw	r2,-48(fp)
 2012a6c:	10800317 	ldw	r2,12(r2)
 2012a70:	e0bff215 	stw	r2,-56(fp)
 2012a74:	e0bff417 	ldw	r2,-48(fp)
 2012a78:	10800217 	ldw	r2,8(r2)
 2012a7c:	e0bff315 	stw	r2,-52(fp)
 2012a80:	e0bff317 	ldw	r2,-52(fp)
 2012a84:	e0fff217 	ldw	r3,-56(fp)
 2012a88:	10c00315 	stw	r3,12(r2)
 2012a8c:	e0bff217 	ldw	r2,-56(fp)
 2012a90:	e0fff317 	ldw	r3,-52(fp)
 2012a94:	10c00215 	stw	r3,8(r2)
            newp = prev;
 2012a98:	e0bff417 	ldw	r2,-48(fp)
 2012a9c:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 2012aa0:	e0fff517 	ldw	r3,-44(fp)
 2012aa4:	e0bfe617 	ldw	r2,-104(fp)
 2012aa8:	1885883a 	add	r2,r3,r2
 2012aac:	e0ffe417 	ldw	r3,-112(fp)
 2012ab0:	1885883a 	add	r2,r3,r2
 2012ab4:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 2012ab8:	e0bfe317 	ldw	r2,-116(fp)
 2012abc:	10800204 	addi	r2,r2,8
 2012ac0:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012ac4:	e0bff017 	ldw	r2,-64(fp)
 2012ac8:	10bfff04 	addi	r2,r2,-4
 2012acc:	e0bff715 	stw	r2,-36(fp)
 2012ad0:	e0bff717 	ldw	r2,-36(fp)
 2012ad4:	10800968 	cmpgeui	r2,r2,37
 2012ad8:	1000521e 	bne	r2,zero,2012c24 <_realloc_r+0x474>
 2012adc:	e0bffe17 	ldw	r2,-8(fp)
 2012ae0:	e0bfe715 	stw	r2,-100(fp)
 2012ae4:	e0bff617 	ldw	r2,-40(fp)
 2012ae8:	e0bfe815 	stw	r2,-96(fp)
 2012aec:	e0bff717 	ldw	r2,-36(fp)
 2012af0:	10800530 	cmpltui	r2,r2,20
 2012af4:	1000361e 	bne	r2,zero,2012bd0 <_realloc_r+0x420>
 2012af8:	e0bfe817 	ldw	r2,-96(fp)
 2012afc:	10c00104 	addi	r3,r2,4
 2012b00:	e0ffe815 	stw	r3,-96(fp)
 2012b04:	e0ffe717 	ldw	r3,-100(fp)
 2012b08:	19000104 	addi	r4,r3,4
 2012b0c:	e13fe715 	stw	r4,-100(fp)
 2012b10:	18c00017 	ldw	r3,0(r3)
 2012b14:	10c00015 	stw	r3,0(r2)
 2012b18:	e0bfe817 	ldw	r2,-96(fp)
 2012b1c:	10c00104 	addi	r3,r2,4
 2012b20:	e0ffe815 	stw	r3,-96(fp)
 2012b24:	e0ffe717 	ldw	r3,-100(fp)
 2012b28:	19000104 	addi	r4,r3,4
 2012b2c:	e13fe715 	stw	r4,-100(fp)
 2012b30:	18c00017 	ldw	r3,0(r3)
 2012b34:	10c00015 	stw	r3,0(r2)
 2012b38:	e0bff717 	ldw	r2,-36(fp)
 2012b3c:	10800730 	cmpltui	r2,r2,28
 2012b40:	1000231e 	bne	r2,zero,2012bd0 <_realloc_r+0x420>
 2012b44:	e0bfe817 	ldw	r2,-96(fp)
 2012b48:	10c00104 	addi	r3,r2,4
 2012b4c:	e0ffe815 	stw	r3,-96(fp)
 2012b50:	e0ffe717 	ldw	r3,-100(fp)
 2012b54:	19000104 	addi	r4,r3,4
 2012b58:	e13fe715 	stw	r4,-100(fp)
 2012b5c:	18c00017 	ldw	r3,0(r3)
 2012b60:	10c00015 	stw	r3,0(r2)
 2012b64:	e0bfe817 	ldw	r2,-96(fp)
 2012b68:	10c00104 	addi	r3,r2,4
 2012b6c:	e0ffe815 	stw	r3,-96(fp)
 2012b70:	e0ffe717 	ldw	r3,-100(fp)
 2012b74:	19000104 	addi	r4,r3,4
 2012b78:	e13fe715 	stw	r4,-100(fp)
 2012b7c:	18c00017 	ldw	r3,0(r3)
 2012b80:	10c00015 	stw	r3,0(r2)
 2012b84:	e0bff717 	ldw	r2,-36(fp)
 2012b88:	10800930 	cmpltui	r2,r2,36
 2012b8c:	1000101e 	bne	r2,zero,2012bd0 <_realloc_r+0x420>
 2012b90:	e0bfe817 	ldw	r2,-96(fp)
 2012b94:	10c00104 	addi	r3,r2,4
 2012b98:	e0ffe815 	stw	r3,-96(fp)
 2012b9c:	e0ffe717 	ldw	r3,-100(fp)
 2012ba0:	19000104 	addi	r4,r3,4
 2012ba4:	e13fe715 	stw	r4,-100(fp)
 2012ba8:	18c00017 	ldw	r3,0(r3)
 2012bac:	10c00015 	stw	r3,0(r2)
 2012bb0:	e0bfe817 	ldw	r2,-96(fp)
 2012bb4:	10c00104 	addi	r3,r2,4
 2012bb8:	e0ffe815 	stw	r3,-96(fp)
 2012bbc:	e0ffe717 	ldw	r3,-100(fp)
 2012bc0:	19000104 	addi	r4,r3,4
 2012bc4:	e13fe715 	stw	r4,-100(fp)
 2012bc8:	18c00017 	ldw	r3,0(r3)
 2012bcc:	10c00015 	stw	r3,0(r2)
 2012bd0:	e0bfe817 	ldw	r2,-96(fp)
 2012bd4:	10c00104 	addi	r3,r2,4
 2012bd8:	e0ffe815 	stw	r3,-96(fp)
 2012bdc:	e0ffe717 	ldw	r3,-100(fp)
 2012be0:	19000104 	addi	r4,r3,4
 2012be4:	e13fe715 	stw	r4,-100(fp)
 2012be8:	18c00017 	ldw	r3,0(r3)
 2012bec:	10c00015 	stw	r3,0(r2)
 2012bf0:	e0bfe817 	ldw	r2,-96(fp)
 2012bf4:	10c00104 	addi	r3,r2,4
 2012bf8:	e0ffe815 	stw	r3,-96(fp)
 2012bfc:	e0ffe717 	ldw	r3,-100(fp)
 2012c00:	19000104 	addi	r4,r3,4
 2012c04:	e13fe715 	stw	r4,-100(fp)
 2012c08:	18c00017 	ldw	r3,0(r3)
 2012c0c:	10c00015 	stw	r3,0(r2)
 2012c10:	e0bfe717 	ldw	r2,-100(fp)
 2012c14:	10c00017 	ldw	r3,0(r2)
 2012c18:	e0bfe817 	ldw	r2,-96(fp)
 2012c1c:	10c00015 	stw	r3,0(r2)
 2012c20:	00000406 	br	2012c34 <_realloc_r+0x484>
 2012c24:	e1bff717 	ldw	r6,-36(fp)
 2012c28:	e17ffe17 	ldw	r5,-8(fp)
 2012c2c:	e13ff617 	ldw	r4,-40(fp)
 2012c30:	2010b300 	call	2010b30 <memmove>
            top = chunk_at_offset(newp, nb);
 2012c34:	008080b4 	movhi	r2,514
 2012c38:	108b8004 	addi	r2,r2,11776
 2012c3c:	e13fe317 	ldw	r4,-116(fp)
 2012c40:	e0fff117 	ldw	r3,-60(fp)
 2012c44:	20c7883a 	add	r3,r4,r3
 2012c48:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 2012c4c:	008080b4 	movhi	r2,514
 2012c50:	108b8004 	addi	r2,r2,11776
 2012c54:	10800217 	ldw	r2,8(r2)
 2012c58:	e13fe417 	ldw	r4,-112(fp)
 2012c5c:	e0fff117 	ldw	r3,-60(fp)
 2012c60:	20c7c83a 	sub	r3,r4,r3
 2012c64:	18c00054 	ori	r3,r3,1
 2012c68:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 2012c6c:	e0bfe317 	ldw	r2,-116(fp)
 2012c70:	10800117 	ldw	r2,4(r2)
 2012c74:	10c0004c 	andi	r3,r2,1
 2012c78:	e0bff117 	ldw	r2,-60(fp)
 2012c7c:	1886b03a 	or	r3,r3,r2
 2012c80:	e0bfe317 	ldw	r2,-116(fp)
 2012c84:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 2012c88:	e13ffd17 	ldw	r4,-12(fp)
 2012c8c:	201717c0 	call	201717c <__malloc_unlock>
            return newmem;
 2012c90:	e0bff617 	ldw	r2,-40(fp)
 2012c94:	0001bd06 	br	201338c <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 2012c98:	e0ffe617 	ldw	r3,-104(fp)
 2012c9c:	e0bff517 	ldw	r2,-44(fp)
 2012ca0:	1887883a 	add	r3,r3,r2
 2012ca4:	e0bfe417 	ldw	r2,-112(fp)
 2012ca8:	1885883a 	add	r2,r3,r2
 2012cac:	1007883a 	mov	r3,r2
 2012cb0:	e0bff117 	ldw	r2,-60(fp)
 2012cb4:	18808016 	blt	r3,r2,2012eb8 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 2012cb8:	e0bfe517 	ldw	r2,-108(fp)
 2012cbc:	10800317 	ldw	r2,12(r2)
 2012cc0:	e0bff215 	stw	r2,-56(fp)
 2012cc4:	e0bfe517 	ldw	r2,-108(fp)
 2012cc8:	10800217 	ldw	r2,8(r2)
 2012ccc:	e0bff315 	stw	r2,-52(fp)
 2012cd0:	e0bff317 	ldw	r2,-52(fp)
 2012cd4:	e0fff217 	ldw	r3,-56(fp)
 2012cd8:	10c00315 	stw	r3,12(r2)
 2012cdc:	e0bff217 	ldw	r2,-56(fp)
 2012ce0:	e0fff317 	ldw	r3,-52(fp)
 2012ce4:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 2012ce8:	e0bff417 	ldw	r2,-48(fp)
 2012cec:	10800317 	ldw	r2,12(r2)
 2012cf0:	e0bff215 	stw	r2,-56(fp)
 2012cf4:	e0bff417 	ldw	r2,-48(fp)
 2012cf8:	10800217 	ldw	r2,8(r2)
 2012cfc:	e0bff315 	stw	r2,-52(fp)
 2012d00:	e0bff317 	ldw	r2,-52(fp)
 2012d04:	e0fff217 	ldw	r3,-56(fp)
 2012d08:	10c00315 	stw	r3,12(r2)
 2012d0c:	e0bff217 	ldw	r2,-56(fp)
 2012d10:	e0fff317 	ldw	r3,-52(fp)
 2012d14:	10c00215 	stw	r3,8(r2)
          newp = prev;
 2012d18:	e0bff417 	ldw	r2,-48(fp)
 2012d1c:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 2012d20:	e0ffe617 	ldw	r3,-104(fp)
 2012d24:	e0bff517 	ldw	r2,-44(fp)
 2012d28:	1885883a 	add	r2,r3,r2
 2012d2c:	e0ffe417 	ldw	r3,-112(fp)
 2012d30:	1885883a 	add	r2,r3,r2
 2012d34:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 2012d38:	e0bfe317 	ldw	r2,-116(fp)
 2012d3c:	10800204 	addi	r2,r2,8
 2012d40:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012d44:	e0bff017 	ldw	r2,-64(fp)
 2012d48:	10bfff04 	addi	r2,r2,-4
 2012d4c:	e0bff815 	stw	r2,-32(fp)
 2012d50:	e0bff817 	ldw	r2,-32(fp)
 2012d54:	10800968 	cmpgeui	r2,r2,37
 2012d58:	1000521e 	bne	r2,zero,2012ea4 <_realloc_r+0x6f4>
 2012d5c:	e0bffe17 	ldw	r2,-8(fp)
 2012d60:	e0bfe915 	stw	r2,-92(fp)
 2012d64:	e0bff617 	ldw	r2,-40(fp)
 2012d68:	e0bfea15 	stw	r2,-88(fp)
 2012d6c:	e0bff817 	ldw	r2,-32(fp)
 2012d70:	10800530 	cmpltui	r2,r2,20
 2012d74:	1000361e 	bne	r2,zero,2012e50 <_realloc_r+0x6a0>
 2012d78:	e0bfea17 	ldw	r2,-88(fp)
 2012d7c:	10c00104 	addi	r3,r2,4
 2012d80:	e0ffea15 	stw	r3,-88(fp)
 2012d84:	e0ffe917 	ldw	r3,-92(fp)
 2012d88:	19000104 	addi	r4,r3,4
 2012d8c:	e13fe915 	stw	r4,-92(fp)
 2012d90:	18c00017 	ldw	r3,0(r3)
 2012d94:	10c00015 	stw	r3,0(r2)
 2012d98:	e0bfea17 	ldw	r2,-88(fp)
 2012d9c:	10c00104 	addi	r3,r2,4
 2012da0:	e0ffea15 	stw	r3,-88(fp)
 2012da4:	e0ffe917 	ldw	r3,-92(fp)
 2012da8:	19000104 	addi	r4,r3,4
 2012dac:	e13fe915 	stw	r4,-92(fp)
 2012db0:	18c00017 	ldw	r3,0(r3)
 2012db4:	10c00015 	stw	r3,0(r2)
 2012db8:	e0bff817 	ldw	r2,-32(fp)
 2012dbc:	10800730 	cmpltui	r2,r2,28
 2012dc0:	1000231e 	bne	r2,zero,2012e50 <_realloc_r+0x6a0>
 2012dc4:	e0bfea17 	ldw	r2,-88(fp)
 2012dc8:	10c00104 	addi	r3,r2,4
 2012dcc:	e0ffea15 	stw	r3,-88(fp)
 2012dd0:	e0ffe917 	ldw	r3,-92(fp)
 2012dd4:	19000104 	addi	r4,r3,4
 2012dd8:	e13fe915 	stw	r4,-92(fp)
 2012ddc:	18c00017 	ldw	r3,0(r3)
 2012de0:	10c00015 	stw	r3,0(r2)
 2012de4:	e0bfea17 	ldw	r2,-88(fp)
 2012de8:	10c00104 	addi	r3,r2,4
 2012dec:	e0ffea15 	stw	r3,-88(fp)
 2012df0:	e0ffe917 	ldw	r3,-92(fp)
 2012df4:	19000104 	addi	r4,r3,4
 2012df8:	e13fe915 	stw	r4,-92(fp)
 2012dfc:	18c00017 	ldw	r3,0(r3)
 2012e00:	10c00015 	stw	r3,0(r2)
 2012e04:	e0bff817 	ldw	r2,-32(fp)
 2012e08:	10800930 	cmpltui	r2,r2,36
 2012e0c:	1000101e 	bne	r2,zero,2012e50 <_realloc_r+0x6a0>
 2012e10:	e0bfea17 	ldw	r2,-88(fp)
 2012e14:	10c00104 	addi	r3,r2,4
 2012e18:	e0ffea15 	stw	r3,-88(fp)
 2012e1c:	e0ffe917 	ldw	r3,-92(fp)
 2012e20:	19000104 	addi	r4,r3,4
 2012e24:	e13fe915 	stw	r4,-92(fp)
 2012e28:	18c00017 	ldw	r3,0(r3)
 2012e2c:	10c00015 	stw	r3,0(r2)
 2012e30:	e0bfea17 	ldw	r2,-88(fp)
 2012e34:	10c00104 	addi	r3,r2,4
 2012e38:	e0ffea15 	stw	r3,-88(fp)
 2012e3c:	e0ffe917 	ldw	r3,-92(fp)
 2012e40:	19000104 	addi	r4,r3,4
 2012e44:	e13fe915 	stw	r4,-92(fp)
 2012e48:	18c00017 	ldw	r3,0(r3)
 2012e4c:	10c00015 	stw	r3,0(r2)
 2012e50:	e0bfea17 	ldw	r2,-88(fp)
 2012e54:	10c00104 	addi	r3,r2,4
 2012e58:	e0ffea15 	stw	r3,-88(fp)
 2012e5c:	e0ffe917 	ldw	r3,-92(fp)
 2012e60:	19000104 	addi	r4,r3,4
 2012e64:	e13fe915 	stw	r4,-92(fp)
 2012e68:	18c00017 	ldw	r3,0(r3)
 2012e6c:	10c00015 	stw	r3,0(r2)
 2012e70:	e0bfea17 	ldw	r2,-88(fp)
 2012e74:	10c00104 	addi	r3,r2,4
 2012e78:	e0ffea15 	stw	r3,-88(fp)
 2012e7c:	e0ffe917 	ldw	r3,-92(fp)
 2012e80:	19000104 	addi	r4,r3,4
 2012e84:	e13fe915 	stw	r4,-92(fp)
 2012e88:	18c00017 	ldw	r3,0(r3)
 2012e8c:	10c00015 	stw	r3,0(r2)
 2012e90:	e0bfe917 	ldw	r2,-92(fp)
 2012e94:	10c00017 	ldw	r3,0(r2)
 2012e98:	e0bfea17 	ldw	r2,-88(fp)
 2012e9c:	10c00015 	stw	r3,0(r2)
          goto split;
 2012ea0:	00010106 	br	20132a8 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012ea4:	e1bff817 	ldw	r6,-32(fp)
 2012ea8:	e17ffe17 	ldw	r5,-8(fp)
 2012eac:	e13ff617 	ldw	r4,-40(fp)
 2012eb0:	2010b300 	call	2010b30 <memmove>
          goto split;
 2012eb4:	0000fc06 	br	20132a8 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 2012eb8:	e0bff417 	ldw	r2,-48(fp)
 2012ebc:	10007826 	beq	r2,zero,20130a0 <_realloc_r+0x8f0>
 2012ec0:	e0fff517 	ldw	r3,-44(fp)
 2012ec4:	e0bfe417 	ldw	r2,-112(fp)
 2012ec8:	1885883a 	add	r2,r3,r2
 2012ecc:	1007883a 	mov	r3,r2
 2012ed0:	e0bff117 	ldw	r2,-60(fp)
 2012ed4:	18807216 	blt	r3,r2,20130a0 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 2012ed8:	e0bff417 	ldw	r2,-48(fp)
 2012edc:	10800317 	ldw	r2,12(r2)
 2012ee0:	e0bff215 	stw	r2,-56(fp)
 2012ee4:	e0bff417 	ldw	r2,-48(fp)
 2012ee8:	10800217 	ldw	r2,8(r2)
 2012eec:	e0bff315 	stw	r2,-52(fp)
 2012ef0:	e0bff317 	ldw	r2,-52(fp)
 2012ef4:	e0fff217 	ldw	r3,-56(fp)
 2012ef8:	10c00315 	stw	r3,12(r2)
 2012efc:	e0bff217 	ldw	r2,-56(fp)
 2012f00:	e0fff317 	ldw	r3,-52(fp)
 2012f04:	10c00215 	stw	r3,8(r2)
        newp = prev;
 2012f08:	e0bff417 	ldw	r2,-48(fp)
 2012f0c:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 2012f10:	e0ffe417 	ldw	r3,-112(fp)
 2012f14:	e0bff517 	ldw	r2,-44(fp)
 2012f18:	1885883a 	add	r2,r3,r2
 2012f1c:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 2012f20:	e0bfe317 	ldw	r2,-116(fp)
 2012f24:	10800204 	addi	r2,r2,8
 2012f28:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012f2c:	e0bff017 	ldw	r2,-64(fp)
 2012f30:	10bfff04 	addi	r2,r2,-4
 2012f34:	e0bff915 	stw	r2,-28(fp)
 2012f38:	e0bff917 	ldw	r2,-28(fp)
 2012f3c:	10800968 	cmpgeui	r2,r2,37
 2012f40:	1000521e 	bne	r2,zero,201308c <_realloc_r+0x8dc>
 2012f44:	e0bffe17 	ldw	r2,-8(fp)
 2012f48:	e0bfeb15 	stw	r2,-84(fp)
 2012f4c:	e0bff617 	ldw	r2,-40(fp)
 2012f50:	e0bfec15 	stw	r2,-80(fp)
 2012f54:	e0bff917 	ldw	r2,-28(fp)
 2012f58:	10800530 	cmpltui	r2,r2,20
 2012f5c:	1000361e 	bne	r2,zero,2013038 <_realloc_r+0x888>
 2012f60:	e0bfec17 	ldw	r2,-80(fp)
 2012f64:	10c00104 	addi	r3,r2,4
 2012f68:	e0ffec15 	stw	r3,-80(fp)
 2012f6c:	e0ffeb17 	ldw	r3,-84(fp)
 2012f70:	19000104 	addi	r4,r3,4
 2012f74:	e13feb15 	stw	r4,-84(fp)
 2012f78:	18c00017 	ldw	r3,0(r3)
 2012f7c:	10c00015 	stw	r3,0(r2)
 2012f80:	e0bfec17 	ldw	r2,-80(fp)
 2012f84:	10c00104 	addi	r3,r2,4
 2012f88:	e0ffec15 	stw	r3,-80(fp)
 2012f8c:	e0ffeb17 	ldw	r3,-84(fp)
 2012f90:	19000104 	addi	r4,r3,4
 2012f94:	e13feb15 	stw	r4,-84(fp)
 2012f98:	18c00017 	ldw	r3,0(r3)
 2012f9c:	10c00015 	stw	r3,0(r2)
 2012fa0:	e0bff917 	ldw	r2,-28(fp)
 2012fa4:	10800730 	cmpltui	r2,r2,28
 2012fa8:	1000231e 	bne	r2,zero,2013038 <_realloc_r+0x888>
 2012fac:	e0bfec17 	ldw	r2,-80(fp)
 2012fb0:	10c00104 	addi	r3,r2,4
 2012fb4:	e0ffec15 	stw	r3,-80(fp)
 2012fb8:	e0ffeb17 	ldw	r3,-84(fp)
 2012fbc:	19000104 	addi	r4,r3,4
 2012fc0:	e13feb15 	stw	r4,-84(fp)
 2012fc4:	18c00017 	ldw	r3,0(r3)
 2012fc8:	10c00015 	stw	r3,0(r2)
 2012fcc:	e0bfec17 	ldw	r2,-80(fp)
 2012fd0:	10c00104 	addi	r3,r2,4
 2012fd4:	e0ffec15 	stw	r3,-80(fp)
 2012fd8:	e0ffeb17 	ldw	r3,-84(fp)
 2012fdc:	19000104 	addi	r4,r3,4
 2012fe0:	e13feb15 	stw	r4,-84(fp)
 2012fe4:	18c00017 	ldw	r3,0(r3)
 2012fe8:	10c00015 	stw	r3,0(r2)
 2012fec:	e0bff917 	ldw	r2,-28(fp)
 2012ff0:	10800930 	cmpltui	r2,r2,36
 2012ff4:	1000101e 	bne	r2,zero,2013038 <_realloc_r+0x888>
 2012ff8:	e0bfec17 	ldw	r2,-80(fp)
 2012ffc:	10c00104 	addi	r3,r2,4
 2013000:	e0ffec15 	stw	r3,-80(fp)
 2013004:	e0ffeb17 	ldw	r3,-84(fp)
 2013008:	19000104 	addi	r4,r3,4
 201300c:	e13feb15 	stw	r4,-84(fp)
 2013010:	18c00017 	ldw	r3,0(r3)
 2013014:	10c00015 	stw	r3,0(r2)
 2013018:	e0bfec17 	ldw	r2,-80(fp)
 201301c:	10c00104 	addi	r3,r2,4
 2013020:	e0ffec15 	stw	r3,-80(fp)
 2013024:	e0ffeb17 	ldw	r3,-84(fp)
 2013028:	19000104 	addi	r4,r3,4
 201302c:	e13feb15 	stw	r4,-84(fp)
 2013030:	18c00017 	ldw	r3,0(r3)
 2013034:	10c00015 	stw	r3,0(r2)
 2013038:	e0bfec17 	ldw	r2,-80(fp)
 201303c:	10c00104 	addi	r3,r2,4
 2013040:	e0ffec15 	stw	r3,-80(fp)
 2013044:	e0ffeb17 	ldw	r3,-84(fp)
 2013048:	19000104 	addi	r4,r3,4
 201304c:	e13feb15 	stw	r4,-84(fp)
 2013050:	18c00017 	ldw	r3,0(r3)
 2013054:	10c00015 	stw	r3,0(r2)
 2013058:	e0bfec17 	ldw	r2,-80(fp)
 201305c:	10c00104 	addi	r3,r2,4
 2013060:	e0ffec15 	stw	r3,-80(fp)
 2013064:	e0ffeb17 	ldw	r3,-84(fp)
 2013068:	19000104 	addi	r4,r3,4
 201306c:	e13feb15 	stw	r4,-84(fp)
 2013070:	18c00017 	ldw	r3,0(r3)
 2013074:	10c00015 	stw	r3,0(r2)
 2013078:	e0bfeb17 	ldw	r2,-84(fp)
 201307c:	10c00017 	ldw	r3,0(r2)
 2013080:	e0bfec17 	ldw	r2,-80(fp)
 2013084:	10c00015 	stw	r3,0(r2)
        goto split;
 2013088:	00008706 	br	20132a8 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 201308c:	e1bff917 	ldw	r6,-28(fp)
 2013090:	e17ffe17 	ldw	r5,-8(fp)
 2013094:	e13ff617 	ldw	r4,-40(fp)
 2013098:	2010b300 	call	2010b30 <memmove>
        goto split;
 201309c:	00008206 	br	20132a8 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 20130a0:	e17fff17 	ldw	r5,-4(fp)
 20130a4:	e13ffd17 	ldw	r4,-12(fp)
 20130a8:	200fdf80 	call	200fdf8 <_malloc_r>
 20130ac:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 20130b0:	e0bff617 	ldw	r2,-40(fp)
 20130b4:	1000041e 	bne	r2,zero,20130c8 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 20130b8:	e13ffd17 	ldw	r4,-12(fp)
 20130bc:	201717c0 	call	201717c <__malloc_unlock>
      return 0;
 20130c0:	0005883a 	mov	r2,zero
 20130c4:	0000b106 	br	201338c <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 20130c8:	e0bff617 	ldw	r2,-40(fp)
 20130cc:	10bffe04 	addi	r2,r2,-8
 20130d0:	e0bfe315 	stw	r2,-116(fp)
 20130d4:	e0bfef17 	ldw	r2,-68(fp)
 20130d8:	10c00117 	ldw	r3,4(r2)
 20130dc:	00bfff84 	movi	r2,-2
 20130e0:	1884703a 	and	r2,r3,r2
 20130e4:	e0ffef17 	ldw	r3,-68(fp)
 20130e8:	1885883a 	add	r2,r3,r2
 20130ec:	e0ffe317 	ldw	r3,-116(fp)
 20130f0:	18800a1e 	bne	r3,r2,201311c <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 20130f4:	e0bfe317 	ldw	r2,-116(fp)
 20130f8:	10c00117 	ldw	r3,4(r2)
 20130fc:	00bfff04 	movi	r2,-4
 2013100:	1884703a 	and	r2,r3,r2
 2013104:	e0ffe417 	ldw	r3,-112(fp)
 2013108:	1885883a 	add	r2,r3,r2
 201310c:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 2013110:	e0bfef17 	ldw	r2,-68(fp)
 2013114:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 2013118:	00006306 	br	20132a8 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 201311c:	e0bff017 	ldw	r2,-64(fp)
 2013120:	10bfff04 	addi	r2,r2,-4
 2013124:	e0bffa15 	stw	r2,-24(fp)
 2013128:	e0bffa17 	ldw	r2,-24(fp)
 201312c:	10800968 	cmpgeui	r2,r2,37
 2013130:	1000521e 	bne	r2,zero,201327c <_realloc_r+0xacc>
 2013134:	e0bffe17 	ldw	r2,-8(fp)
 2013138:	e0bfed15 	stw	r2,-76(fp)
 201313c:	e0bff617 	ldw	r2,-40(fp)
 2013140:	e0bfee15 	stw	r2,-72(fp)
 2013144:	e0bffa17 	ldw	r2,-24(fp)
 2013148:	10800530 	cmpltui	r2,r2,20
 201314c:	1000361e 	bne	r2,zero,2013228 <_realloc_r+0xa78>
 2013150:	e0bfee17 	ldw	r2,-72(fp)
 2013154:	10c00104 	addi	r3,r2,4
 2013158:	e0ffee15 	stw	r3,-72(fp)
 201315c:	e0ffed17 	ldw	r3,-76(fp)
 2013160:	19000104 	addi	r4,r3,4
 2013164:	e13fed15 	stw	r4,-76(fp)
 2013168:	18c00017 	ldw	r3,0(r3)
 201316c:	10c00015 	stw	r3,0(r2)
 2013170:	e0bfee17 	ldw	r2,-72(fp)
 2013174:	10c00104 	addi	r3,r2,4
 2013178:	e0ffee15 	stw	r3,-72(fp)
 201317c:	e0ffed17 	ldw	r3,-76(fp)
 2013180:	19000104 	addi	r4,r3,4
 2013184:	e13fed15 	stw	r4,-76(fp)
 2013188:	18c00017 	ldw	r3,0(r3)
 201318c:	10c00015 	stw	r3,0(r2)
 2013190:	e0bffa17 	ldw	r2,-24(fp)
 2013194:	10800730 	cmpltui	r2,r2,28
 2013198:	1000231e 	bne	r2,zero,2013228 <_realloc_r+0xa78>
 201319c:	e0bfee17 	ldw	r2,-72(fp)
 20131a0:	10c00104 	addi	r3,r2,4
 20131a4:	e0ffee15 	stw	r3,-72(fp)
 20131a8:	e0ffed17 	ldw	r3,-76(fp)
 20131ac:	19000104 	addi	r4,r3,4
 20131b0:	e13fed15 	stw	r4,-76(fp)
 20131b4:	18c00017 	ldw	r3,0(r3)
 20131b8:	10c00015 	stw	r3,0(r2)
 20131bc:	e0bfee17 	ldw	r2,-72(fp)
 20131c0:	10c00104 	addi	r3,r2,4
 20131c4:	e0ffee15 	stw	r3,-72(fp)
 20131c8:	e0ffed17 	ldw	r3,-76(fp)
 20131cc:	19000104 	addi	r4,r3,4
 20131d0:	e13fed15 	stw	r4,-76(fp)
 20131d4:	18c00017 	ldw	r3,0(r3)
 20131d8:	10c00015 	stw	r3,0(r2)
 20131dc:	e0bffa17 	ldw	r2,-24(fp)
 20131e0:	10800930 	cmpltui	r2,r2,36
 20131e4:	1000101e 	bne	r2,zero,2013228 <_realloc_r+0xa78>
 20131e8:	e0bfee17 	ldw	r2,-72(fp)
 20131ec:	10c00104 	addi	r3,r2,4
 20131f0:	e0ffee15 	stw	r3,-72(fp)
 20131f4:	e0ffed17 	ldw	r3,-76(fp)
 20131f8:	19000104 	addi	r4,r3,4
 20131fc:	e13fed15 	stw	r4,-76(fp)
 2013200:	18c00017 	ldw	r3,0(r3)
 2013204:	10c00015 	stw	r3,0(r2)
 2013208:	e0bfee17 	ldw	r2,-72(fp)
 201320c:	10c00104 	addi	r3,r2,4
 2013210:	e0ffee15 	stw	r3,-72(fp)
 2013214:	e0ffed17 	ldw	r3,-76(fp)
 2013218:	19000104 	addi	r4,r3,4
 201321c:	e13fed15 	stw	r4,-76(fp)
 2013220:	18c00017 	ldw	r3,0(r3)
 2013224:	10c00015 	stw	r3,0(r2)
 2013228:	e0bfee17 	ldw	r2,-72(fp)
 201322c:	10c00104 	addi	r3,r2,4
 2013230:	e0ffee15 	stw	r3,-72(fp)
 2013234:	e0ffed17 	ldw	r3,-76(fp)
 2013238:	19000104 	addi	r4,r3,4
 201323c:	e13fed15 	stw	r4,-76(fp)
 2013240:	18c00017 	ldw	r3,0(r3)
 2013244:	10c00015 	stw	r3,0(r2)
 2013248:	e0bfee17 	ldw	r2,-72(fp)
 201324c:	10c00104 	addi	r3,r2,4
 2013250:	e0ffee15 	stw	r3,-72(fp)
 2013254:	e0ffed17 	ldw	r3,-76(fp)
 2013258:	19000104 	addi	r4,r3,4
 201325c:	e13fed15 	stw	r4,-76(fp)
 2013260:	18c00017 	ldw	r3,0(r3)
 2013264:	10c00015 	stw	r3,0(r2)
 2013268:	e0bfed17 	ldw	r2,-76(fp)
 201326c:	10c00017 	ldw	r3,0(r2)
 2013270:	e0bfee17 	ldw	r2,-72(fp)
 2013274:	10c00015 	stw	r3,0(r2)
 2013278:	00000406 	br	201328c <_realloc_r+0xadc>
 201327c:	e1bffa17 	ldw	r6,-24(fp)
 2013280:	e17ffe17 	ldw	r5,-8(fp)
 2013284:	e13ff617 	ldw	r4,-40(fp)
 2013288:	2010b300 	call	2010b30 <memmove>
    fREe(RCALL oldmem);
 201328c:	e17ffe17 	ldw	r5,-8(fp)
 2013290:	e13ffd17 	ldw	r4,-12(fp)
 2013294:	200e7b80 	call	200e7b8 <_free_r>
    MALLOC_UNLOCK;
 2013298:	e13ffd17 	ldw	r4,-12(fp)
 201329c:	201717c0 	call	201717c <__malloc_unlock>
    return newmem;
 20132a0:	e0bff617 	ldw	r2,-40(fp)
 20132a4:	00003906 	br	201338c <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 20132a8:	e0ffe417 	ldw	r3,-112(fp)
 20132ac:	e0bff117 	ldw	r2,-60(fp)
 20132b0:	1885c83a 	sub	r2,r3,r2
 20132b4:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 20132b8:	e0bffb17 	ldw	r2,-20(fp)
 20132bc:	10800430 	cmpltui	r2,r2,16
 20132c0:	10001e1e 	bne	r2,zero,201333c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 20132c4:	e0ffe317 	ldw	r3,-116(fp)
 20132c8:	e0bff117 	ldw	r2,-60(fp)
 20132cc:	1885883a 	add	r2,r3,r2
 20132d0:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 20132d4:	e0bfe317 	ldw	r2,-116(fp)
 20132d8:	10800117 	ldw	r2,4(r2)
 20132dc:	10c0004c 	andi	r3,r2,1
 20132e0:	e0bff117 	ldw	r2,-60(fp)
 20132e4:	1886b03a 	or	r3,r3,r2
 20132e8:	e0bfe317 	ldw	r2,-116(fp)
 20132ec:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 20132f0:	e0bffb17 	ldw	r2,-20(fp)
 20132f4:	10c00054 	ori	r3,r2,1
 20132f8:	e0bffc17 	ldw	r2,-16(fp)
 20132fc:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 2013300:	e0fffc17 	ldw	r3,-16(fp)
 2013304:	e0bffb17 	ldw	r2,-20(fp)
 2013308:	1885883a 	add	r2,r3,r2
 201330c:	e13ffc17 	ldw	r4,-16(fp)
 2013310:	e0fffb17 	ldw	r3,-20(fp)
 2013314:	20c7883a 	add	r3,r4,r3
 2013318:	18c00117 	ldw	r3,4(r3)
 201331c:	18c00054 	ori	r3,r3,1
 2013320:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 2013324:	e0bffc17 	ldw	r2,-16(fp)
 2013328:	10800204 	addi	r2,r2,8
 201332c:	100b883a 	mov	r5,r2
 2013330:	e13ffd17 	ldw	r4,-12(fp)
 2013334:	200e7b80 	call	200e7b8 <_free_r>
 2013338:	00001006 	br	201337c <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 201333c:	e0bfe317 	ldw	r2,-116(fp)
 2013340:	10800117 	ldw	r2,4(r2)
 2013344:	10c0004c 	andi	r3,r2,1
 2013348:	e0bfe417 	ldw	r2,-112(fp)
 201334c:	1886b03a 	or	r3,r3,r2
 2013350:	e0bfe317 	ldw	r2,-116(fp)
 2013354:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 2013358:	e0ffe317 	ldw	r3,-116(fp)
 201335c:	e0bfe417 	ldw	r2,-112(fp)
 2013360:	1885883a 	add	r2,r3,r2
 2013364:	e13fe317 	ldw	r4,-116(fp)
 2013368:	e0ffe417 	ldw	r3,-112(fp)
 201336c:	20c7883a 	add	r3,r4,r3
 2013370:	18c00117 	ldw	r3,4(r3)
 2013374:	18c00054 	ori	r3,r3,1
 2013378:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 201337c:	e13ffd17 	ldw	r4,-12(fp)
 2013380:	201717c0 	call	201717c <__malloc_unlock>
  return chunk2mem(newp);
 2013384:	e0bfe317 	ldw	r2,-116(fp)
 2013388:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 201338c:	e037883a 	mov	sp,fp
 2013390:	dfc00117 	ldw	ra,4(sp)
 2013394:	df000017 	ldw	fp,0(sp)
 2013398:	dec00204 	addi	sp,sp,8
 201339c:	f800283a 	ret

020133a0 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 20133a0:	defffb04 	addi	sp,sp,-20
 20133a4:	dfc00415 	stw	ra,16(sp)
 20133a8:	df000315 	stw	fp,12(sp)
 20133ac:	df000304 	addi	fp,sp,12
 20133b0:	e13ffe15 	stw	r4,-8(fp)
 20133b4:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 20133b8:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 20133bc:	e13fff17 	ldw	r4,-4(fp)
 20133c0:	2016d540 	call	2016d54 <sbrk>
 20133c4:	e0bffd15 	stw	r2,-12(fp)
 20133c8:	e0bffd17 	ldw	r2,-12(fp)
 20133cc:	10bfffd8 	cmpnei	r2,r2,-1
 20133d0:	1000051e 	bne	r2,zero,20133e8 <_sbrk_r+0x48>
 20133d4:	d0a79e17 	ldw	r2,-24968(gp)
 20133d8:	10000326 	beq	r2,zero,20133e8 <_sbrk_r+0x48>
    ptr->_errno = errno;
 20133dc:	d0e79e17 	ldw	r3,-24968(gp)
 20133e0:	e0bffe17 	ldw	r2,-8(fp)
 20133e4:	10c00015 	stw	r3,0(r2)
  return ret;
 20133e8:	e0bffd17 	ldw	r2,-12(fp)
}
 20133ec:	e037883a 	mov	sp,fp
 20133f0:	dfc00117 	ldw	ra,4(sp)
 20133f4:	df000017 	ldw	fp,0(sp)
 20133f8:	dec00204 	addi	sp,sp,8
 20133fc:	f800283a 	ret

02013400 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2013400:	defff804 	addi	sp,sp,-32
 2013404:	dfc00715 	stw	ra,28(sp)
 2013408:	df000615 	stw	fp,24(sp)
 201340c:	dc400515 	stw	r17,20(sp)
 2013410:	dc000415 	stw	r16,16(sp)
 2013414:	df000604 	addi	fp,sp,24
 2013418:	e13ffa15 	stw	r4,-24(fp)
 201341c:	e17ffb15 	stw	r5,-20(fp)
 2013420:	e1bffc15 	stw	r6,-16(fp)
 2013424:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 2013428:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 201342c:	8080038b 	ldhu	r2,14(r16)
 2013430:	10bfffcc 	andi	r2,r2,65535
 2013434:	10a0001c 	xori	r2,r2,32768
 2013438:	10a00004 	addi	r2,r2,-32768
 201343c:	e0fffd17 	ldw	r3,-12(fp)
 2013440:	180f883a 	mov	r7,r3
 2013444:	e1bffc17 	ldw	r6,-16(fp)
 2013448:	100b883a 	mov	r5,r2
 201344c:	e13ffa17 	ldw	r4,-24(fp)
 2013450:	20154a80 	call	20154a8 <_read_r>
 2013454:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 2013458:	88000416 	blt	r17,zero,201346c <__sread+0x6c>
    fp->_offset += ret;
 201345c:	80801417 	ldw	r2,80(r16)
 2013460:	1445883a 	add	r2,r2,r17
 2013464:	80801415 	stw	r2,80(r16)
 2013468:	00000406 	br	201347c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 201346c:	80c0030b 	ldhu	r3,12(r16)
 2013470:	00bbffc4 	movi	r2,-4097
 2013474:	1884703a 	and	r2,r3,r2
 2013478:	8080030d 	sth	r2,12(r16)
  return ret;
 201347c:	8805883a 	mov	r2,r17
}
 2013480:	e6fffe04 	addi	sp,fp,-8
 2013484:	dfc00317 	ldw	ra,12(sp)
 2013488:	df000217 	ldw	fp,8(sp)
 201348c:	dc400117 	ldw	r17,4(sp)
 2013490:	dc000017 	ldw	r16,0(sp)
 2013494:	dec00404 	addi	sp,sp,16
 2013498:	f800283a 	ret

0201349c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 201349c:	defffb04 	addi	sp,sp,-20
 20134a0:	df000415 	stw	fp,16(sp)
 20134a4:	df000404 	addi	fp,sp,16
 20134a8:	e13ffc15 	stw	r4,-16(fp)
 20134ac:	e17ffd15 	stw	r5,-12(fp)
 20134b0:	e1bffe15 	stw	r6,-8(fp)
 20134b4:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 20134b8:	0005883a 	mov	r2,zero
}
 20134bc:	e037883a 	mov	sp,fp
 20134c0:	df000017 	ldw	fp,0(sp)
 20134c4:	dec00104 	addi	sp,sp,4
 20134c8:	f800283a 	ret

020134cc <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 20134cc:	defff804 	addi	sp,sp,-32
 20134d0:	dfc00715 	stw	ra,28(sp)
 20134d4:	df000615 	stw	fp,24(sp)
 20134d8:	dc000515 	stw	r16,20(sp)
 20134dc:	df000604 	addi	fp,sp,24
 20134e0:	e13ffb15 	stw	r4,-20(fp)
 20134e4:	e17ffc15 	stw	r5,-16(fp)
 20134e8:	e1bffd15 	stw	r6,-12(fp)
 20134ec:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 20134f0:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 20134f4:	8080030b 	ldhu	r2,12(r16)
 20134f8:	10bfffcc 	andi	r2,r2,65535
 20134fc:	1080400c 	andi	r2,r2,256
 2013500:	10000926 	beq	r2,zero,2013528 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 2013504:	8080038b 	ldhu	r2,14(r16)
 2013508:	10bfffcc 	andi	r2,r2,65535
 201350c:	10a0001c 	xori	r2,r2,32768
 2013510:	10a00004 	addi	r2,r2,-32768
 2013514:	01c00084 	movi	r7,2
 2013518:	000d883a 	mov	r6,zero
 201351c:	100b883a 	mov	r5,r2
 2013520:	e13ffb17 	ldw	r4,-20(fp)
 2013524:	20154380 	call	2015438 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 2013528:	80c0030b 	ldhu	r3,12(r16)
 201352c:	00bbffc4 	movi	r2,-4097
 2013530:	1884703a 	and	r2,r3,r2
 2013534:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 2013538:	8080038b 	ldhu	r2,14(r16)
 201353c:	10bfffcc 	andi	r2,r2,65535
 2013540:	10a0001c 	xori	r2,r2,32768
 2013544:	10a00004 	addi	r2,r2,-32768
 2013548:	e0fffe17 	ldw	r3,-8(fp)
 201354c:	180f883a 	mov	r7,r3
 2013550:	e1bffd17 	ldw	r6,-12(fp)
 2013554:	100b883a 	mov	r5,r2
 2013558:	e13ffb17 	ldw	r4,-20(fp)
 201355c:	2014cf40 	call	2014cf4 <_write_r>
 2013560:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 2013564:	e0bffa17 	ldw	r2,-24(fp)
}
 2013568:	e6ffff04 	addi	sp,fp,-4
 201356c:	dfc00217 	ldw	ra,8(sp)
 2013570:	df000117 	ldw	fp,4(sp)
 2013574:	dc000017 	ldw	r16,0(sp)
 2013578:	dec00304 	addi	sp,sp,12
 201357c:	f800283a 	ret

02013580 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 2013580:	defff804 	addi	sp,sp,-32
 2013584:	dfc00715 	stw	ra,28(sp)
 2013588:	df000615 	stw	fp,24(sp)
 201358c:	dc400515 	stw	r17,20(sp)
 2013590:	dc000415 	stw	r16,16(sp)
 2013594:	df000604 	addi	fp,sp,24
 2013598:	e13ffa15 	stw	r4,-24(fp)
 201359c:	e17ffb15 	stw	r5,-20(fp)
 20135a0:	e1bffc15 	stw	r6,-16(fp)
 20135a4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 20135a8:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 20135ac:	8080038b 	ldhu	r2,14(r16)
 20135b0:	10bfffcc 	andi	r2,r2,65535
 20135b4:	10a0001c 	xori	r2,r2,32768
 20135b8:	10a00004 	addi	r2,r2,-32768
 20135bc:	e1fffd17 	ldw	r7,-12(fp)
 20135c0:	e1bffc17 	ldw	r6,-16(fp)
 20135c4:	100b883a 	mov	r5,r2
 20135c8:	e13ffa17 	ldw	r4,-24(fp)
 20135cc:	20154380 	call	2015438 <_lseek_r>
 20135d0:	1023883a 	mov	r17,r2
  if (ret == -1L)
 20135d4:	88bfffd8 	cmpnei	r2,r17,-1
 20135d8:	1000051e 	bne	r2,zero,20135f0 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 20135dc:	80c0030b 	ldhu	r3,12(r16)
 20135e0:	00bbffc4 	movi	r2,-4097
 20135e4:	1884703a 	and	r2,r3,r2
 20135e8:	8080030d 	sth	r2,12(r16)
 20135ec:	00000406 	br	2013600 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 20135f0:	8080030b 	ldhu	r2,12(r16)
 20135f4:	10840014 	ori	r2,r2,4096
 20135f8:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 20135fc:	84401415 	stw	r17,80(r16)
    }
  return ret;
 2013600:	8805883a 	mov	r2,r17
}
 2013604:	e6fffe04 	addi	sp,fp,-8
 2013608:	dfc00317 	ldw	ra,12(sp)
 201360c:	df000217 	ldw	fp,8(sp)
 2013610:	dc400117 	ldw	r17,4(sp)
 2013614:	dc000017 	ldw	r16,0(sp)
 2013618:	dec00404 	addi	sp,sp,16
 201361c:	f800283a 	ret

02013620 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 2013620:	defffb04 	addi	sp,sp,-20
 2013624:	dfc00415 	stw	ra,16(sp)
 2013628:	df000315 	stw	fp,12(sp)
 201362c:	df000304 	addi	fp,sp,12
 2013630:	e13ffe15 	stw	r4,-8(fp)
 2013634:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 2013638:	e0bfff17 	ldw	r2,-4(fp)
 201363c:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 2013640:	e0bffd17 	ldw	r2,-12(fp)
 2013644:	1080038b 	ldhu	r2,14(r2)
 2013648:	10bfffcc 	andi	r2,r2,65535
 201364c:	10a0001c 	xori	r2,r2,32768
 2013650:	10a00004 	addi	r2,r2,-32768
 2013654:	100b883a 	mov	r5,r2
 2013658:	e13ffe17 	ldw	r4,-8(fp)
 201365c:	2014d640 	call	2014d64 <_close_r>
}
 2013660:	e037883a 	mov	sp,fp
 2013664:	dfc00117 	ldw	ra,4(sp)
 2013668:	df000017 	ldw	fp,0(sp)
 201366c:	dec00204 	addi	sp,sp,8
 2013670:	f800283a 	ret

02013674 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 2013674:	defffb04 	addi	sp,sp,-20
 2013678:	df000415 	stw	fp,16(sp)
 201367c:	df000404 	addi	fp,sp,16
 2013680:	e13ffe15 	stw	r4,-8(fp)
 2013684:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 2013688:	e0fffe17 	ldw	r3,-8(fp)
 201368c:	e0bfff17 	ldw	r2,-4(fp)
 2013690:	1884b03a 	or	r2,r3,r2
 2013694:	108000cc 	andi	r2,r2,3
 2013698:	10002a1e 	bne	r2,zero,2013744 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 201369c:	e0bffe17 	ldw	r2,-8(fp)
 20136a0:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 20136a4:	e0bfff17 	ldw	r2,-4(fp)
 20136a8:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 20136ac:	00001506 	br	2013704 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 20136b0:	e0bffc17 	ldw	r2,-16(fp)
 20136b4:	10c00017 	ldw	r3,0(r2)
 20136b8:	00bfbff4 	movhi	r2,65279
 20136bc:	10bfbfc4 	addi	r2,r2,-257
 20136c0:	1887883a 	add	r3,r3,r2
 20136c4:	e0bffc17 	ldw	r2,-16(fp)
 20136c8:	10800017 	ldw	r2,0(r2)
 20136cc:	0084303a 	nor	r2,zero,r2
 20136d0:	1886703a 	and	r3,r3,r2
 20136d4:	00a02074 	movhi	r2,32897
 20136d8:	10a02004 	addi	r2,r2,-32640
 20136dc:	1884703a 	and	r2,r3,r2
 20136e0:	10000226 	beq	r2,zero,20136ec <strcmp+0x78>
	    return 0;
 20136e4:	0005883a 	mov	r2,zero
 20136e8:	00002e06 	br	20137a4 <strcmp+0x130>

          a1++;
 20136ec:	e0bffc17 	ldw	r2,-16(fp)
 20136f0:	10800104 	addi	r2,r2,4
 20136f4:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 20136f8:	e0bffd17 	ldw	r2,-12(fp)
 20136fc:	10800104 	addi	r2,r2,4
 2013700:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 2013704:	e0bffc17 	ldw	r2,-16(fp)
 2013708:	10c00017 	ldw	r3,0(r2)
 201370c:	e0bffd17 	ldw	r2,-12(fp)
 2013710:	10800017 	ldw	r2,0(r2)
 2013714:	18bfe626 	beq	r3,r2,20136b0 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 2013718:	e0bffc17 	ldw	r2,-16(fp)
 201371c:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 2013720:	e0bffd17 	ldw	r2,-12(fp)
 2013724:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 2013728:	00000606 	br	2013744 <strcmp+0xd0>
    {
      s1++;
 201372c:	e0bffe17 	ldw	r2,-8(fp)
 2013730:	10800044 	addi	r2,r2,1
 2013734:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 2013738:	e0bfff17 	ldw	r2,-4(fp)
 201373c:	10800044 	addi	r2,r2,1
 2013740:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 2013744:	e0bffe17 	ldw	r2,-8(fp)
 2013748:	10800003 	ldbu	r2,0(r2)
 201374c:	10803fcc 	andi	r2,r2,255
 2013750:	1080201c 	xori	r2,r2,128
 2013754:	10bfe004 	addi	r2,r2,-128
 2013758:	10000b26 	beq	r2,zero,2013788 <strcmp+0x114>
 201375c:	e0bffe17 	ldw	r2,-8(fp)
 2013760:	10c00003 	ldbu	r3,0(r2)
 2013764:	e0bfff17 	ldw	r2,-4(fp)
 2013768:	10800003 	ldbu	r2,0(r2)
 201376c:	18c03fcc 	andi	r3,r3,255
 2013770:	18c0201c 	xori	r3,r3,128
 2013774:	18ffe004 	addi	r3,r3,-128
 2013778:	10803fcc 	andi	r2,r2,255
 201377c:	1080201c 	xori	r2,r2,128
 2013780:	10bfe004 	addi	r2,r2,-128
 2013784:	18bfe926 	beq	r3,r2,201372c <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 2013788:	e0bffe17 	ldw	r2,-8(fp)
 201378c:	10800003 	ldbu	r2,0(r2)
 2013790:	10c03fcc 	andi	r3,r2,255
 2013794:	e0bfff17 	ldw	r2,-4(fp)
 2013798:	10800003 	ldbu	r2,0(r2)
 201379c:	10803fcc 	andi	r2,r2,255
 20137a0:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 20137a4:	e037883a 	mov	sp,fp
 20137a8:	df000017 	ldw	fp,0(sp)
 20137ac:	dec00104 	addi	sp,sp,4
 20137b0:	f800283a 	ret

020137b4 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 20137b4:	defff604 	addi	sp,sp,-40
 20137b8:	dfc00915 	stw	ra,36(sp)
 20137bc:	df000815 	stw	fp,32(sp)
 20137c0:	dc400715 	stw	r17,28(sp)
 20137c4:	dc000615 	stw	r16,24(sp)
 20137c8:	df000804 	addi	fp,sp,32
 20137cc:	e13ffc15 	stw	r4,-16(fp)
 20137d0:	e17ffd15 	stw	r5,-12(fp)
 20137d4:	3021883a 	mov	r16,r6
	register int err = 0;
 20137d8:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 20137dc:	80800217 	ldw	r2,8(r16)
 20137e0:	1000031e 	bne	r2,zero,20137f0 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 20137e4:	80000115 	stw	zero,4(r16)
		return (0);
 20137e8:	0005883a 	mov	r2,zero
 20137ec:	00003906 	br	20138d4 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 20137f0:	e0bffd17 	ldw	r2,-12(fp)
 20137f4:	10801917 	ldw	r2,100(r2)
 20137f8:	1088000c 	andi	r2,r2,8192
 20137fc:	10002d26 	beq	r2,zero,20138b4 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 2013800:	80800017 	ldw	r2,0(r16)
 2013804:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 2013808:	00002706 	br	20138a8 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 201380c:	e0bff817 	ldw	r2,-32(fp)
 2013810:	10800017 	ldw	r2,0(r2)
 2013814:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 2013818:	e0bff817 	ldw	r2,-32(fp)
 201381c:	10800117 	ldw	r2,4(r2)
 2013820:	1004d0ba 	srli	r2,r2,2
 2013824:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 2013828:	e03ff915 	stw	zero,-28(fp)
 201382c:	00001206 	br	2013878 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 2013830:	e0bff917 	ldw	r2,-28(fp)
 2013834:	1085883a 	add	r2,r2,r2
 2013838:	1085883a 	add	r2,r2,r2
 201383c:	1007883a 	mov	r3,r2
 2013840:	e0bffa17 	ldw	r2,-24(fp)
 2013844:	10c5883a 	add	r2,r2,r3
 2013848:	10800017 	ldw	r2,0(r2)
 201384c:	e1bffd17 	ldw	r6,-12(fp)
 2013850:	100b883a 	mov	r5,r2
 2013854:	e13ffc17 	ldw	r4,-16(fp)
 2013858:	20152800 	call	2015280 <_fputwc_r>
 201385c:	10bfffd8 	cmpnei	r2,r2,-1
 2013860:	1000021e 	bne	r2,zero,201386c <__sprint_r+0xb8>
					err = -1;
 2013864:	047fffc4 	movi	r17,-1
					goto out;
 2013868:	00001706 	br	20138c8 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 201386c:	e0bff917 	ldw	r2,-28(fp)
 2013870:	10800044 	addi	r2,r2,1
 2013874:	e0bff915 	stw	r2,-28(fp)
 2013878:	e0fff917 	ldw	r3,-28(fp)
 201387c:	e0bffb17 	ldw	r2,-20(fp)
 2013880:	18bfeb16 	blt	r3,r2,2013830 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 2013884:	80c00217 	ldw	r3,8(r16)
 2013888:	e0bffb17 	ldw	r2,-20(fp)
 201388c:	1085883a 	add	r2,r2,r2
 2013890:	1085883a 	add	r2,r2,r2
 2013894:	1885c83a 	sub	r2,r3,r2
 2013898:	80800215 	stw	r2,8(r16)
 201389c:	e0bff817 	ldw	r2,-32(fp)
 20138a0:	10800204 	addi	r2,r2,8
 20138a4:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 20138a8:	80800217 	ldw	r2,8(r16)
 20138ac:	103fd71e 	bne	r2,zero,201380c <__sprint_r+0x58>
 20138b0:	00000506 	br	20138c8 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 20138b4:	800d883a 	mov	r6,r16
 20138b8:	e17ffd17 	ldw	r5,-12(fp)
 20138bc:	e13ffc17 	ldw	r4,-16(fp)
 20138c0:	200eee40 	call	200eee4 <__sfvwrite_r>
 20138c4:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 20138c8:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 20138cc:	80000115 	stw	zero,4(r16)
	return (err);
 20138d0:	8805883a 	mov	r2,r17
}
 20138d4:	e6fffe04 	addi	sp,fp,-8
 20138d8:	dfc00317 	ldw	ra,12(sp)
 20138dc:	df000217 	ldw	fp,8(sp)
 20138e0:	dc400117 	ldw	r17,4(sp)
 20138e4:	dc000017 	ldw	r16,0(sp)
 20138e8:	dec00404 	addi	sp,sp,16
 20138ec:	f800283a 	ret

020138f0 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 20138f0:	defedf04 	addi	sp,sp,-1156
 20138f4:	dfc12015 	stw	ra,1152(sp)
 20138f8:	df011f15 	stw	fp,1148(sp)
 20138fc:	dc011e15 	stw	r16,1144(sp)
 2013900:	df011f04 	addi	fp,sp,1148
 2013904:	e13ffc15 	stw	r4,-16(fp)
 2013908:	2821883a 	mov	r16,r5
 201390c:	e1bffd15 	stw	r6,-12(fp)
 2013910:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2013914:	80c0030b 	ldhu	r3,12(r16)
 2013918:	00bfff44 	movi	r2,-3
 201391c:	1884703a 	and	r2,r3,r2
 2013920:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2013924:	80801917 	ldw	r2,100(r16)
 2013928:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 201392c:	8080038b 	ldhu	r2,14(r16)
 2013930:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2013934:	80800717 	ldw	r2,28(r16)
 2013938:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 201393c:	80800917 	ldw	r2,36(r16)
 2013940:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2013944:	e0befc04 	addi	r2,fp,-1040
 2013948:	e0bee215 	stw	r2,-1144(fp)
 201394c:	e0bee217 	ldw	r2,-1144(fp)
 2013950:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2013954:	00810004 	movi	r2,1024
 2013958:	e0bee415 	stw	r2,-1136(fp)
 201395c:	e0bee417 	ldw	r2,-1136(fp)
 2013960:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2013964:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2013968:	e0bee204 	addi	r2,fp,-1144
 201396c:	e1fffe17 	ldw	r7,-8(fp)
 2013970:	e1bffd17 	ldw	r6,-12(fp)
 2013974:	100b883a 	mov	r5,r2
 2013978:	e13ffc17 	ldw	r4,-16(fp)
 201397c:	2013a300 	call	2013a30 <___vfiprintf_internal_r>
 2013980:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2013984:	e0bee117 	ldw	r2,-1148(fp)
 2013988:	10000716 	blt	r2,zero,20139a8 <__sbprintf+0xb8>
 201398c:	e0bee204 	addi	r2,fp,-1144
 2013990:	100b883a 	mov	r5,r2
 2013994:	e13ffc17 	ldw	r4,-16(fp)
 2013998:	200e1180 	call	200e118 <_fflush_r>
 201399c:	10000226 	beq	r2,zero,20139a8 <__sbprintf+0xb8>
		ret = EOF;
 20139a0:	00bfffc4 	movi	r2,-1
 20139a4:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 20139a8:	e0bee50b 	ldhu	r2,-1132(fp)
 20139ac:	10bfffcc 	andi	r2,r2,65535
 20139b0:	1080100c 	andi	r2,r2,64
 20139b4:	10000326 	beq	r2,zero,20139c4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 20139b8:	8080030b 	ldhu	r2,12(r16)
 20139bc:	10801014 	ori	r2,r2,64
 20139c0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 20139c4:	e0bee117 	ldw	r2,-1148(fp)
}
 20139c8:	e6ffff04 	addi	sp,fp,-4
 20139cc:	dfc00217 	ldw	ra,8(sp)
 20139d0:	df000117 	ldw	fp,4(sp)
 20139d4:	dc000017 	ldw	r16,0(sp)
 20139d8:	dec00304 	addi	sp,sp,12
 20139dc:	f800283a 	ret

020139e0 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 20139e0:	defffa04 	addi	sp,sp,-24
 20139e4:	dfc00515 	stw	ra,20(sp)
 20139e8:	df000415 	stw	fp,16(sp)
 20139ec:	df000404 	addi	fp,sp,16
 20139f0:	e13ffd15 	stw	r4,-12(fp)
 20139f4:	e17ffe15 	stw	r5,-8(fp)
 20139f8:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 20139fc:	d0a03017 	ldw	r2,-32576(gp)
 2013a00:	e1ffff17 	ldw	r7,-4(fp)
 2013a04:	e1bffe17 	ldw	r6,-8(fp)
 2013a08:	e17ffd17 	ldw	r5,-12(fp)
 2013a0c:	1009883a 	mov	r4,r2
 2013a10:	2013a300 	call	2013a30 <___vfiprintf_internal_r>
 2013a14:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2013a18:	e0bffc17 	ldw	r2,-16(fp)
}
 2013a1c:	e037883a 	mov	sp,fp
 2013a20:	dfc00117 	ldw	ra,4(sp)
 2013a24:	df000017 	ldw	fp,0(sp)
 2013a28:	dec00204 	addi	sp,sp,8
 2013a2c:	f800283a 	ret

02013a30 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2013a30:	deffb704 	addi	sp,sp,-292
 2013a34:	dfc04815 	stw	ra,288(sp)
 2013a38:	df004715 	stw	fp,284(sp)
 2013a3c:	ddc04615 	stw	r23,280(sp)
 2013a40:	dd804515 	stw	r22,276(sp)
 2013a44:	dd404415 	stw	r21,272(sp)
 2013a48:	dd004315 	stw	r20,268(sp)
 2013a4c:	dcc04215 	stw	r19,264(sp)
 2013a50:	dc804115 	stw	r18,260(sp)
 2013a54:	dc404015 	stw	r17,256(sp)
 2013a58:	dc003f15 	stw	r16,252(sp)
 2013a5c:	df004704 	addi	fp,sp,284
 2013a60:	e13fe615 	stw	r4,-104(fp)
 2013a64:	e17fe715 	stw	r5,-100(fp)
 2013a68:	e1bfe815 	stw	r6,-96(fp)
 2013a6c:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2013a70:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2013a74:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2013a78:	e0bfe617 	ldw	r2,-104(fp)
 2013a7c:	e0bfc415 	stw	r2,-240(fp)
 2013a80:	e0bfc417 	ldw	r2,-240(fp)
 2013a84:	10000526 	beq	r2,zero,2013a9c <___vfiprintf_internal_r+0x6c>
 2013a88:	e0bfc417 	ldw	r2,-240(fp)
 2013a8c:	10800e17 	ldw	r2,56(r2)
 2013a90:	1000021e 	bne	r2,zero,2013a9c <___vfiprintf_internal_r+0x6c>
 2013a94:	e13fc417 	ldw	r4,-240(fp)
 2013a98:	200e5980 	call	200e598 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2013a9c:	e0bfe717 	ldw	r2,-100(fp)
 2013aa0:	1080030b 	ldhu	r2,12(r2)
 2013aa4:	10bfffcc 	andi	r2,r2,65535
 2013aa8:	1088000c 	andi	r2,r2,8192
 2013aac:	10000c1e 	bne	r2,zero,2013ae0 <___vfiprintf_internal_r+0xb0>
 2013ab0:	e0bfe717 	ldw	r2,-100(fp)
 2013ab4:	1080030b 	ldhu	r2,12(r2)
 2013ab8:	10880014 	ori	r2,r2,8192
 2013abc:	1007883a 	mov	r3,r2
 2013ac0:	e0bfe717 	ldw	r2,-100(fp)
 2013ac4:	10c0030d 	sth	r3,12(r2)
 2013ac8:	e0bfe717 	ldw	r2,-100(fp)
 2013acc:	10c01917 	ldw	r3,100(r2)
 2013ad0:	00b7ffc4 	movi	r2,-8193
 2013ad4:	1886703a 	and	r3,r3,r2
 2013ad8:	e0bfe717 	ldw	r2,-100(fp)
 2013adc:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2013ae0:	e0bfe717 	ldw	r2,-100(fp)
 2013ae4:	1080030b 	ldhu	r2,12(r2)
 2013ae8:	10bfffcc 	andi	r2,r2,65535
 2013aec:	1080020c 	andi	r2,r2,8
 2013af0:	10000326 	beq	r2,zero,2013b00 <___vfiprintf_internal_r+0xd0>
 2013af4:	e0bfe717 	ldw	r2,-100(fp)
 2013af8:	10800417 	ldw	r2,16(r2)
 2013afc:	1000061e 	bne	r2,zero,2013b18 <___vfiprintf_internal_r+0xe8>
 2013b00:	e17fe717 	ldw	r5,-100(fp)
 2013b04:	e13fe617 	ldw	r4,-104(fp)
 2013b08:	200bd480 	call	200bd48 <__swsetup_r>
 2013b0c:	10000226 	beq	r2,zero,2013b18 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2013b10:	00bfffc4 	movi	r2,-1
 2013b14:	00046a06 	br	2014cc0 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2013b18:	e0bfe717 	ldw	r2,-100(fp)
 2013b1c:	1080030b 	ldhu	r2,12(r2)
 2013b20:	10bfffcc 	andi	r2,r2,65535
 2013b24:	1080068c 	andi	r2,r2,26
 2013b28:	10800298 	cmpnei	r2,r2,10
 2013b2c:	10000c1e 	bne	r2,zero,2013b60 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 2013b30:	e0bfe717 	ldw	r2,-100(fp)
 2013b34:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2013b38:	10bfffcc 	andi	r2,r2,65535
 2013b3c:	10a0001c 	xori	r2,r2,32768
 2013b40:	10a00004 	addi	r2,r2,-32768
 2013b44:	10000616 	blt	r2,zero,2013b60 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2013b48:	e1ffe917 	ldw	r7,-92(fp)
 2013b4c:	e1bfe817 	ldw	r6,-96(fp)
 2013b50:	e17fe717 	ldw	r5,-100(fp)
 2013b54:	e13fe617 	ldw	r4,-104(fp)
 2013b58:	20138f00 	call	20138f0 <__sbprintf>
 2013b5c:	00045806 	br	2014cc0 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2013b60:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2013b64:	e4bfcb04 	addi	r18,fp,-212
 2013b68:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 2013b6c:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2013b70:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2013b74:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2013b78:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2013b7c:	00000106 	br	2013b84 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 2013b80:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2013b84:	a8800003 	ldbu	r2,0(r21)
 2013b88:	10803fcc 	andi	r2,r2,255
 2013b8c:	1080201c 	xori	r2,r2,128
 2013b90:	10bfe004 	addi	r2,r2,-128
 2013b94:	10000626 	beq	r2,zero,2013bb0 <___vfiprintf_internal_r+0x180>
 2013b98:	a8800003 	ldbu	r2,0(r21)
 2013b9c:	10803fcc 	andi	r2,r2,255
 2013ba0:	1080201c 	xori	r2,r2,128
 2013ba4:	10bfe004 	addi	r2,r2,-128
 2013ba8:	10800958 	cmpnei	r2,r2,37
 2013bac:	103ff41e 	bne	r2,zero,2013b80 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2013bb0:	a807883a 	mov	r3,r21
 2013bb4:	a005883a 	mov	r2,r20
 2013bb8:	18a1c83a 	sub	r16,r3,r2
 2013bbc:	80001826 	beq	r16,zero,2013c20 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 2013bc0:	95000015 	stw	r20,0(r18)
 2013bc4:	8005883a 	mov	r2,r16
 2013bc8:	90800115 	stw	r2,4(r18)
 2013bcc:	e0bfca17 	ldw	r2,-216(fp)
 2013bd0:	8007883a 	mov	r3,r16
 2013bd4:	10c5883a 	add	r2,r2,r3
 2013bd8:	e0bfca15 	stw	r2,-216(fp)
 2013bdc:	94800204 	addi	r18,r18,8
 2013be0:	e0bfc917 	ldw	r2,-220(fp)
 2013be4:	10800044 	addi	r2,r2,1
 2013be8:	e0bfc915 	stw	r2,-220(fp)
 2013bec:	e0bfc917 	ldw	r2,-220(fp)
 2013bf0:	10800210 	cmplti	r2,r2,8
 2013bf4:	1000071e 	bne	r2,zero,2013c14 <___vfiprintf_internal_r+0x1e4>
 2013bf8:	e0bfc804 	addi	r2,fp,-224
 2013bfc:	100d883a 	mov	r6,r2
 2013c00:	e17fe717 	ldw	r5,-100(fp)
 2013c04:	e13fe617 	ldw	r4,-104(fp)
 2013c08:	20137b40 	call	20137b4 <__sprint_r>
 2013c0c:	1004031e 	bne	r2,zero,2014c1c <___vfiprintf_internal_r+0x11ec>
 2013c10:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 2013c14:	e0bfb917 	ldw	r2,-284(fp)
 2013c18:	1405883a 	add	r2,r2,r16
 2013c1c:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2013c20:	a8800003 	ldbu	r2,0(r21)
 2013c24:	10803fcc 	andi	r2,r2,255
 2013c28:	1080201c 	xori	r2,r2,128
 2013c2c:	10bfe004 	addi	r2,r2,-128
 2013c30:	1003ec26 	beq	r2,zero,2014be4 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 2013c34:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 2013c38:	ad400044 	addi	r21,r21,1

		flags = 0;
 2013c3c:	0027883a 	mov	r19,zero
		dprec = 0;
 2013c40:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 2013c44:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 2013c48:	00bfffc4 	movi	r2,-1
 2013c4c:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 2013c50:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2013c54:	a805883a 	mov	r2,r21
 2013c58:	15400044 	addi	r21,r2,1
 2013c5c:	10800003 	ldbu	r2,0(r2)
 2013c60:	14403fcc 	andi	r17,r2,255
 2013c64:	8c40201c 	xori	r17,r17,128
 2013c68:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 2013c6c:	88bff804 	addi	r2,r17,-32
 2013c70:	10c01668 	cmpgeui	r3,r2,89
 2013c74:	1802881e 	bne	r3,zero,2014698 <___vfiprintf_internal_r+0xc68>
 2013c78:	100690ba 	slli	r3,r2,2
 2013c7c:	00808074 	movhi	r2,513
 2013c80:	108f2404 	addi	r2,r2,15504
 2013c84:	1885883a 	add	r2,r3,r2
 2013c88:	10800017 	ldw	r2,0(r2)
 2013c8c:	1000683a 	jmp	r2
 2013c90:	02013df4 	movhi	r8,1271
 2013c94:	02014698 	cmpnei	r8,zero,1306
 2013c98:	02014698 	cmpnei	r8,zero,1306
 2013c9c:	02013e14 	movui	r8,1272
 2013ca0:	02014698 	cmpnei	r8,zero,1306
 2013ca4:	02014698 	cmpnei	r8,zero,1306
 2013ca8:	02014698 	cmpnei	r8,zero,1306
 2013cac:	02014698 	cmpnei	r8,zero,1306
 2013cb0:	02014698 	cmpnei	r8,zero,1306
 2013cb4:	02014698 	cmpnei	r8,zero,1306
 2013cb8:	02013e1c 	xori	r8,zero,1272
 2013cbc:	02013e50 	cmplti	r8,zero,1273
 2013cc0:	02014698 	cmpnei	r8,zero,1306
 2013cc4:	02013e48 	cmpgei	r8,zero,1273
 2013cc8:	02013e5c 	xori	r8,zero,1273
 2013ccc:	02014698 	cmpnei	r8,zero,1306
 2013cd0:	02013ef0 	cmpltui	r8,zero,1275
 2013cd4:	02013ef8 	rdprs	r8,zero,1275
 2013cd8:	02013ef8 	rdprs	r8,zero,1275
 2013cdc:	02013ef8 	rdprs	r8,zero,1275
 2013ce0:	02013ef8 	rdprs	r8,zero,1275
 2013ce4:	02013ef8 	rdprs	r8,zero,1275
 2013ce8:	02013ef8 	rdprs	r8,zero,1275
 2013cec:	02013ef8 	rdprs	r8,zero,1275
 2013cf0:	02013ef8 	rdprs	r8,zero,1275
 2013cf4:	02013ef8 	rdprs	r8,zero,1275
 2013cf8:	02014698 	cmpnei	r8,zero,1306
 2013cfc:	02014698 	cmpnei	r8,zero,1306
 2013d00:	02014698 	cmpnei	r8,zero,1306
 2013d04:	02014698 	cmpnei	r8,zero,1306
 2013d08:	02014698 	cmpnei	r8,zero,1306
 2013d0c:	02014698 	cmpnei	r8,zero,1306
 2013d10:	02014698 	cmpnei	r8,zero,1306
 2013d14:	02014698 	cmpnei	r8,zero,1306
 2013d18:	02014698 	cmpnei	r8,zero,1306
 2013d1c:	02014698 	cmpnei	r8,zero,1306
 2013d20:	02013f98 	cmpnei	r8,zero,1278
 2013d24:	02014698 	cmpnei	r8,zero,1306
 2013d28:	02014698 	cmpnei	r8,zero,1306
 2013d2c:	02014698 	cmpnei	r8,zero,1306
 2013d30:	02014698 	cmpnei	r8,zero,1306
 2013d34:	02014698 	cmpnei	r8,zero,1306
 2013d38:	02014698 	cmpnei	r8,zero,1306
 2013d3c:	02014698 	cmpnei	r8,zero,1306
 2013d40:	02014698 	cmpnei	r8,zero,1306
 2013d44:	02014698 	cmpnei	r8,zero,1306
 2013d48:	02014698 	cmpnei	r8,zero,1306
 2013d4c:	02014138 	rdprs	r8,zero,1284
 2013d50:	02014698 	cmpnei	r8,zero,1306
 2013d54:	02014698 	cmpnei	r8,zero,1306
 2013d58:	02014698 	cmpnei	r8,zero,1306
 2013d5c:	02014698 	cmpnei	r8,zero,1306
 2013d60:	02014698 	cmpnei	r8,zero,1306
 2013d64:	020142b4 	movhi	r8,1290
 2013d68:	02014698 	cmpnei	r8,zero,1306
 2013d6c:	02014698 	cmpnei	r8,zero,1306
 2013d70:	02014374 	movhi	r8,1293
 2013d74:	02014698 	cmpnei	r8,zero,1306
 2013d78:	02014698 	cmpnei	r8,zero,1306
 2013d7c:	02014698 	cmpnei	r8,zero,1306
 2013d80:	02014698 	cmpnei	r8,zero,1306
 2013d84:	02014698 	cmpnei	r8,zero,1306
 2013d88:	02014698 	cmpnei	r8,zero,1306
 2013d8c:	02014698 	cmpnei	r8,zero,1306
 2013d90:	02014698 	cmpnei	r8,zero,1306
 2013d94:	02014698 	cmpnei	r8,zero,1306
 2013d98:	02014698 	cmpnei	r8,zero,1306
 2013d9c:	02013f70 	cmpltui	r8,zero,1277
 2013da0:	02013f9c 	xori	r8,zero,1278
 2013da4:	02014698 	cmpnei	r8,zero,1306
 2013da8:	02014698 	cmpnei	r8,zero,1306
 2013dac:	02014698 	cmpnei	r8,zero,1306
 2013db0:	02013f34 	movhi	r8,1276
 2013db4:	02013f9c 	xori	r8,zero,1278
 2013db8:	02014698 	cmpnei	r8,zero,1306
 2013dbc:	02014698 	cmpnei	r8,zero,1306
 2013dc0:	02013f3c 	xorhi	r8,zero,1276
 2013dc4:	02014698 	cmpnei	r8,zero,1306
 2013dc8:	02014098 	cmpnei	r8,zero,1282
 2013dcc:	0201413c 	xorhi	r8,zero,1284
 2013dd0:	020141dc 	xori	r8,zero,1287
 2013dd4:	02013f68 	cmpgeui	r8,zero,1277
 2013dd8:	02014698 	cmpnei	r8,zero,1306
 2013ddc:	02014224 	muli	r8,zero,1288
 2013de0:	02014698 	cmpnei	r8,zero,1306
 2013de4:	020142b8 	rdprs	r8,zero,1290
 2013de8:	02014698 	cmpnei	r8,zero,1306
 2013dec:	02014698 	cmpnei	r8,zero,1306
 2013df0:	02014384 	movi	r8,1294
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2013df4:	e0bfc703 	ldbu	r2,-228(fp)
 2013df8:	10803fcc 	andi	r2,r2,255
 2013dfc:	1080201c 	xori	r2,r2,128
 2013e00:	10bfe004 	addi	r2,r2,-128
 2013e04:	103f931e 	bne	r2,zero,2013c54 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 2013e08:	00800804 	movi	r2,32
 2013e0c:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2013e10:	003f9006 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 2013e14:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2013e18:	003f8e06 	br	2013c54 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2013e1c:	e0bfe917 	ldw	r2,-92(fp)
 2013e20:	10c00104 	addi	r3,r2,4
 2013e24:	e0ffe915 	stw	r3,-92(fp)
 2013e28:	10800017 	ldw	r2,0(r2)
 2013e2c:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2013e30:	e0bfba17 	ldw	r2,-280(fp)
 2013e34:	10000116 	blt	r2,zero,2013e3c <___vfiprintf_internal_r+0x40c>
				goto rflag;
 2013e38:	003f8606 	br	2013c54 <___vfiprintf_internal_r+0x224>
			width = -width;
 2013e3c:	e0bfba17 	ldw	r2,-280(fp)
 2013e40:	0085c83a 	sub	r2,zero,r2
 2013e44:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2013e48:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2013e4c:	003f8106 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 2013e50:	00800ac4 	movi	r2,43
 2013e54:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2013e58:	003f7e06 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 2013e5c:	a805883a 	mov	r2,r21
 2013e60:	15400044 	addi	r21,r2,1
 2013e64:	10800003 	ldbu	r2,0(r2)
 2013e68:	14403fcc 	andi	r17,r2,255
 2013e6c:	8c40201c 	xori	r17,r17,128
 2013e70:	8c7fe004 	addi	r17,r17,-128
 2013e74:	88800a98 	cmpnei	r2,r17,42
 2013e78:	10000a1e 	bne	r2,zero,2013ea4 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2013e7c:	e0bfe917 	ldw	r2,-92(fp)
 2013e80:	10c00104 	addi	r3,r2,4
 2013e84:	e0ffe915 	stw	r3,-92(fp)
 2013e88:	10800017 	ldw	r2,0(r2)
 2013e8c:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2013e90:	e0bfbb17 	ldw	r2,-276(fp)
 2013e94:	103f6f0e 	bge	r2,zero,2013c54 <___vfiprintf_internal_r+0x224>
					prec = -1;
 2013e98:	00bfffc4 	movi	r2,-1
 2013e9c:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 2013ea0:	003f6c06 	br	2013c54 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 2013ea4:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2013ea8:	00000906 	br	2013ed0 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 2013eac:	80c002a4 	muli	r3,r16,10
 2013eb0:	88bff404 	addi	r2,r17,-48
 2013eb4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2013eb8:	a805883a 	mov	r2,r21
 2013ebc:	15400044 	addi	r21,r2,1
 2013ec0:	10800003 	ldbu	r2,0(r2)
 2013ec4:	14403fcc 	andi	r17,r2,255
 2013ec8:	8c40201c 	xori	r17,r17,128
 2013ecc:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2013ed0:	88bff404 	addi	r2,r17,-48
 2013ed4:	108002b0 	cmpltui	r2,r2,10
 2013ed8:	103ff41e 	bne	r2,zero,2013eac <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 2013edc:	8005883a 	mov	r2,r16
 2013ee0:	1000010e 	bge	r2,zero,2013ee8 <___vfiprintf_internal_r+0x4b8>
 2013ee4:	00bfffc4 	movi	r2,-1
 2013ee8:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 2013eec:	003f5f06 	br	2013c6c <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2013ef0:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2013ef4:	003f5706 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 2013ef8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2013efc:	80c002a4 	muli	r3,r16,10
 2013f00:	88bff404 	addi	r2,r17,-48
 2013f04:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2013f08:	a805883a 	mov	r2,r21
 2013f0c:	15400044 	addi	r21,r2,1
 2013f10:	10800003 	ldbu	r2,0(r2)
 2013f14:	14403fcc 	andi	r17,r2,255
 2013f18:	8c40201c 	xori	r17,r17,128
 2013f1c:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 2013f20:	88bff404 	addi	r2,r17,-48
 2013f24:	108002b0 	cmpltui	r2,r2,10
 2013f28:	103ff41e 	bne	r2,zero,2013efc <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2013f2c:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 2013f30:	003f4e06 	br	2013c6c <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2013f34:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2013f38:	003f4606 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 2013f3c:	a8800003 	ldbu	r2,0(r21)
 2013f40:	10803fcc 	andi	r2,r2,255
 2013f44:	1080201c 	xori	r2,r2,128
 2013f48:	10bfe004 	addi	r2,r2,-128
 2013f4c:	10801b18 	cmpnei	r2,r2,108
 2013f50:	1000031e 	bne	r2,zero,2013f60 <___vfiprintf_internal_r+0x530>
				fmt++;
 2013f54:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2013f58:	9cc00814 	ori	r19,r19,32
 2013f5c:	003f3d06 	br	2013c54 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 2013f60:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2013f64:	003f3b06 	br	2013c54 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 2013f68:	9cc00814 	ori	r19,r19,32
			goto rflag;
 2013f6c:	003f3906 	br	2013c54 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2013f70:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2013f74:	e0bfe917 	ldw	r2,-92(fp)
 2013f78:	10c00104 	addi	r3,r2,4
 2013f7c:	e0ffe915 	stw	r3,-92(fp)
 2013f80:	10800017 	ldw	r2,0(r2)
 2013f84:	a0800005 	stb	r2,0(r20)
				size = 1;
 2013f88:	00800044 	movi	r2,1
 2013f8c:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 2013f90:	e03fc705 	stb	zero,-228(fp)
			break;
 2013f94:	0001c806 	br	20146b8 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 2013f98:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2013f9c:	9880080c 	andi	r2,r19,32
 2013fa0:	10000826 	beq	r2,zero,2013fc4 <___vfiprintf_internal_r+0x594>
 2013fa4:	e13fe917 	ldw	r4,-92(fp)
 2013fa8:	20800204 	addi	r2,r4,8
 2013fac:	e0bfe915 	stw	r2,-92(fp)
 2013fb0:	20800017 	ldw	r2,0(r4)
 2013fb4:	20c00117 	ldw	r3,4(r4)
 2013fb8:	e0bfea15 	stw	r2,-88(fp)
 2013fbc:	e0ffeb15 	stw	r3,-84(fp)
 2013fc0:	00001e06 	br	201403c <___vfiprintf_internal_r+0x60c>
 2013fc4:	9880040c 	andi	r2,r19,16
 2013fc8:	10000826 	beq	r2,zero,2013fec <___vfiprintf_internal_r+0x5bc>
 2013fcc:	e0bfe917 	ldw	r2,-92(fp)
 2013fd0:	10c00104 	addi	r3,r2,4
 2013fd4:	e0ffe915 	stw	r3,-92(fp)
 2013fd8:	10800017 	ldw	r2,0(r2)
 2013fdc:	e0bfea15 	stw	r2,-88(fp)
 2013fe0:	1005d7fa 	srai	r2,r2,31
 2013fe4:	e0bfeb15 	stw	r2,-84(fp)
 2013fe8:	00001406 	br	201403c <___vfiprintf_internal_r+0x60c>
 2013fec:	9880100c 	andi	r2,r19,64
 2013ff0:	10000b26 	beq	r2,zero,2014020 <___vfiprintf_internal_r+0x5f0>
 2013ff4:	e0bfe917 	ldw	r2,-92(fp)
 2013ff8:	10c00104 	addi	r3,r2,4
 2013ffc:	e0ffe915 	stw	r3,-92(fp)
 2014000:	10800017 	ldw	r2,0(r2)
 2014004:	10bfffcc 	andi	r2,r2,65535
 2014008:	10a0001c 	xori	r2,r2,32768
 201400c:	10a00004 	addi	r2,r2,-32768
 2014010:	e0bfea15 	stw	r2,-88(fp)
 2014014:	1005d7fa 	srai	r2,r2,31
 2014018:	e0bfeb15 	stw	r2,-84(fp)
 201401c:	00000706 	br	201403c <___vfiprintf_internal_r+0x60c>
 2014020:	e0bfe917 	ldw	r2,-92(fp)
 2014024:	10c00104 	addi	r3,r2,4
 2014028:	e0ffe915 	stw	r3,-92(fp)
 201402c:	10800017 	ldw	r2,0(r2)
 2014030:	e0bfea15 	stw	r2,-88(fp)
 2014034:	1005d7fa 	srai	r2,r2,31
 2014038:	e0bfeb15 	stw	r2,-84(fp)
 201403c:	e0bfea17 	ldw	r2,-88(fp)
 2014040:	e0bfbc15 	stw	r2,-272(fp)
 2014044:	e0ffeb17 	ldw	r3,-84(fp)
 2014048:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 201404c:	e0bfbc17 	ldw	r2,-272(fp)
 2014050:	e0ffbd17 	ldw	r3,-268(fp)
 2014054:	18000d0e 	bge	r3,zero,201408c <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2014058:	000d883a 	mov	r6,zero
 201405c:	000f883a 	mov	r7,zero
 2014060:	e13fbc17 	ldw	r4,-272(fp)
 2014064:	e17fbd17 	ldw	r5,-268(fp)
 2014068:	3105c83a 	sub	r2,r6,r4
 201406c:	3091803a 	cmpltu	r8,r6,r2
 2014070:	3947c83a 	sub	r3,r7,r5
 2014074:	1a09c83a 	sub	r4,r3,r8
 2014078:	2007883a 	mov	r3,r4
 201407c:	e0bfbc15 	stw	r2,-272(fp)
 2014080:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 2014084:	00800b44 	movi	r2,45
 2014088:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 201408c:	00800044 	movi	r2,1
 2014090:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 2014094:	0000f806 	br	2014478 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2014098:	9880080c 	andi	r2,r19,32
 201409c:	10000d26 	beq	r2,zero,20140d4 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 20140a0:	e0bfe917 	ldw	r2,-92(fp)
 20140a4:	10c00104 	addi	r3,r2,4
 20140a8:	e0ffe915 	stw	r3,-92(fp)
 20140ac:	10800017 	ldw	r2,0(r2)
 20140b0:	e0ffb917 	ldw	r3,-284(fp)
 20140b4:	e0fff015 	stw	r3,-64(fp)
 20140b8:	1807d7fa 	srai	r3,r3,31
 20140bc:	e0fff115 	stw	r3,-60(fp)
 20140c0:	e0fff017 	ldw	r3,-64(fp)
 20140c4:	10c00015 	stw	r3,0(r2)
 20140c8:	e0fff117 	ldw	r3,-60(fp)
 20140cc:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 20140d0:	0002c306 	br	2014be0 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 20140d4:	9880040c 	andi	r2,r19,16
 20140d8:	10000726 	beq	r2,zero,20140f8 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 20140dc:	e0bfe917 	ldw	r2,-92(fp)
 20140e0:	10c00104 	addi	r3,r2,4
 20140e4:	e0ffe915 	stw	r3,-92(fp)
 20140e8:	10800017 	ldw	r2,0(r2)
 20140ec:	e0ffb917 	ldw	r3,-284(fp)
 20140f0:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 20140f4:	0002ba06 	br	2014be0 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 20140f8:	9880100c 	andi	r2,r19,64
 20140fc:	10000726 	beq	r2,zero,201411c <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2014100:	e0bfe917 	ldw	r2,-92(fp)
 2014104:	10c00104 	addi	r3,r2,4
 2014108:	e0ffe915 	stw	r3,-92(fp)
 201410c:	10800017 	ldw	r2,0(r2)
 2014110:	e0ffb917 	ldw	r3,-284(fp)
 2014114:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2014118:	0002b106 	br	2014be0 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 201411c:	e0bfe917 	ldw	r2,-92(fp)
 2014120:	10c00104 	addi	r3,r2,4
 2014124:	e0ffe915 	stw	r3,-92(fp)
 2014128:	10800017 	ldw	r2,0(r2)
 201412c:	e0ffb917 	ldw	r3,-284(fp)
 2014130:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2014134:	0002aa06 	br	2014be0 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 2014138:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 201413c:	9880080c 	andi	r2,r19,32
 2014140:	10000626 	beq	r2,zero,201415c <___vfiprintf_internal_r+0x72c>
 2014144:	e0bfe917 	ldw	r2,-92(fp)
 2014148:	10c00204 	addi	r3,r2,8
 201414c:	e0ffe915 	stw	r3,-92(fp)
 2014150:	15800017 	ldw	r22,0(r2)
 2014154:	15c00117 	ldw	r23,4(r2)
 2014158:	00001c06 	br	20141cc <___vfiprintf_internal_r+0x79c>
 201415c:	9880040c 	andi	r2,r19,16
 2014160:	10000726 	beq	r2,zero,2014180 <___vfiprintf_internal_r+0x750>
 2014164:	e0bfe917 	ldw	r2,-92(fp)
 2014168:	10c00104 	addi	r3,r2,4
 201416c:	e0ffe915 	stw	r3,-92(fp)
 2014170:	10800017 	ldw	r2,0(r2)
 2014174:	102d883a 	mov	r22,r2
 2014178:	002f883a 	mov	r23,zero
 201417c:	00001306 	br	20141cc <___vfiprintf_internal_r+0x79c>
 2014180:	9880100c 	andi	r2,r19,64
 2014184:	10000b26 	beq	r2,zero,20141b4 <___vfiprintf_internal_r+0x784>
 2014188:	e0bfe917 	ldw	r2,-92(fp)
 201418c:	10c00104 	addi	r3,r2,4
 2014190:	e0ffe915 	stw	r3,-92(fp)
 2014194:	10800017 	ldw	r2,0(r2)
 2014198:	e0bff215 	stw	r2,-56(fp)
 201419c:	e03ff315 	stw	zero,-52(fp)
 20141a0:	e0bff217 	ldw	r2,-56(fp)
 20141a4:	15bfffcc 	andi	r22,r2,65535
 20141a8:	e0fff317 	ldw	r3,-52(fp)
 20141ac:	182e703a 	and	r23,r3,zero
 20141b0:	00000606 	br	20141cc <___vfiprintf_internal_r+0x79c>
 20141b4:	e0bfe917 	ldw	r2,-92(fp)
 20141b8:	10c00104 	addi	r3,r2,4
 20141bc:	e0ffe915 	stw	r3,-92(fp)
 20141c0:	10800017 	ldw	r2,0(r2)
 20141c4:	102d883a 	mov	r22,r2
 20141c8:	002f883a 	mov	r23,zero
 20141cc:	e5bfbc15 	stw	r22,-272(fp)
 20141d0:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 20141d4:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 20141d8:	0000a606 	br	2014474 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 20141dc:	e0bfe917 	ldw	r2,-92(fp)
 20141e0:	10c00104 	addi	r3,r2,4
 20141e4:	e0ffe915 	stw	r3,-92(fp)
 20141e8:	10800017 	ldw	r2,0(r2)
 20141ec:	e0bfbc15 	stw	r2,-272(fp)
 20141f0:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 20141f4:	00800084 	movi	r2,2
 20141f8:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 20141fc:	008080b4 	movhi	r2,514
 2014200:	1089d704 	addi	r2,r2,10076
 2014204:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 2014208:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 201420c:	00800c04 	movi	r2,48
 2014210:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2014214:	04401e04 	movi	r17,120
 2014218:	00801e04 	movi	r2,120
 201421c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2014220:	00009406 	br	2014474 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2014224:	e0bfe917 	ldw	r2,-92(fp)
 2014228:	10c00104 	addi	r3,r2,4
 201422c:	e0ffe915 	stw	r3,-92(fp)
 2014230:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2014234:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2014238:	a000081e 	bne	r20,zero,201425c <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 201423c:	050080b4 	movhi	r20,514
 2014240:	a509dc04 	addi	r20,r20,10096
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2014244:	e0bfbb17 	ldw	r2,-276(fp)
 2014248:	10c001f0 	cmpltui	r3,r2,7
 201424c:	1800011e 	bne	r3,zero,2014254 <___vfiprintf_internal_r+0x824>
 2014250:	00800184 	movi	r2,6
 2014254:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2014258:	00011706 	br	20146b8 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 201425c:	e0bfbb17 	ldw	r2,-276(fp)
 2014260:	10001016 	blt	r2,zero,20142a4 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2014264:	e0bfbb17 	ldw	r2,-276(fp)
 2014268:	100d883a 	mov	r6,r2
 201426c:	000b883a 	mov	r5,zero
 2014270:	a009883a 	mov	r4,r20
 2014274:	20109740 	call	2010974 <memchr>
 2014278:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 201427c:	e0bfc617 	ldw	r2,-232(fp)
 2014280:	10000526 	beq	r2,zero,2014298 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 2014284:	e0bfc617 	ldw	r2,-232(fp)
 2014288:	a007883a 	mov	r3,r20
 201428c:	10c5c83a 	sub	r2,r2,r3
 2014290:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2014294:	00010806 	br	20146b8 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2014298:	e0bfbb17 	ldw	r2,-276(fp)
 201429c:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 20142a0:	00010506 	br	20146b8 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 20142a4:	a009883a 	mov	r4,r20
 20142a8:	20096f80 	call	20096f8 <strlen>
 20142ac:	e0bfc115 	stw	r2,-252(fp)

			break;
 20142b0:	00010106 	br	20146b8 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 20142b4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 20142b8:	9880080c 	andi	r2,r19,32
 20142bc:	10000826 	beq	r2,zero,20142e0 <___vfiprintf_internal_r+0x8b0>
 20142c0:	e0bfe917 	ldw	r2,-92(fp)
 20142c4:	10c00204 	addi	r3,r2,8
 20142c8:	e0ffe915 	stw	r3,-92(fp)
 20142cc:	10c00017 	ldw	r3,0(r2)
 20142d0:	e0ffec15 	stw	r3,-80(fp)
 20142d4:	10c00117 	ldw	r3,4(r2)
 20142d8:	e0ffed15 	stw	r3,-76(fp)
 20142dc:	00001e06 	br	2014358 <___vfiprintf_internal_r+0x928>
 20142e0:	9880040c 	andi	r2,r19,16
 20142e4:	10000726 	beq	r2,zero,2014304 <___vfiprintf_internal_r+0x8d4>
 20142e8:	e0bfe917 	ldw	r2,-92(fp)
 20142ec:	10c00104 	addi	r3,r2,4
 20142f0:	e0ffe915 	stw	r3,-92(fp)
 20142f4:	10800017 	ldw	r2,0(r2)
 20142f8:	e0bfec15 	stw	r2,-80(fp)
 20142fc:	e03fed15 	stw	zero,-76(fp)
 2014300:	00001506 	br	2014358 <___vfiprintf_internal_r+0x928>
 2014304:	9880100c 	andi	r2,r19,64
 2014308:	10000d26 	beq	r2,zero,2014340 <___vfiprintf_internal_r+0x910>
 201430c:	e0bfe917 	ldw	r2,-92(fp)
 2014310:	10c00104 	addi	r3,r2,4
 2014314:	e0ffe915 	stw	r3,-92(fp)
 2014318:	10800017 	ldw	r2,0(r2)
 201431c:	e0bff415 	stw	r2,-48(fp)
 2014320:	e03ff515 	stw	zero,-44(fp)
 2014324:	e0bff417 	ldw	r2,-48(fp)
 2014328:	10bfffcc 	andi	r2,r2,65535
 201432c:	e0bfec15 	stw	r2,-80(fp)
 2014330:	e0fff517 	ldw	r3,-44(fp)
 2014334:	1806703a 	and	r3,r3,zero
 2014338:	e0ffed15 	stw	r3,-76(fp)
 201433c:	00000606 	br	2014358 <___vfiprintf_internal_r+0x928>
 2014340:	e0bfe917 	ldw	r2,-92(fp)
 2014344:	10c00104 	addi	r3,r2,4
 2014348:	e0ffe915 	stw	r3,-92(fp)
 201434c:	10800017 	ldw	r2,0(r2)
 2014350:	e0bfec15 	stw	r2,-80(fp)
 2014354:	e03fed15 	stw	zero,-76(fp)
 2014358:	e0bfec17 	ldw	r2,-80(fp)
 201435c:	e0bfbc15 	stw	r2,-272(fp)
 2014360:	e0ffed17 	ldw	r3,-76(fp)
 2014364:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 2014368:	00800044 	movi	r2,1
 201436c:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 2014370:	00004006 	br	2014474 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2014374:	008080b4 	movhi	r2,514
 2014378:	1089de04 	addi	r2,r2,10104
 201437c:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 2014380:	00000306 	br	2014390 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 2014384:	008080b4 	movhi	r2,514
 2014388:	1089d704 	addi	r2,r2,10076
 201438c:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 2014390:	9880080c 	andi	r2,r19,32
 2014394:	10000826 	beq	r2,zero,20143b8 <___vfiprintf_internal_r+0x988>
 2014398:	e0bfe917 	ldw	r2,-92(fp)
 201439c:	10c00204 	addi	r3,r2,8
 20143a0:	e0ffe915 	stw	r3,-92(fp)
 20143a4:	10c00017 	ldw	r3,0(r2)
 20143a8:	e0ffee15 	stw	r3,-72(fp)
 20143ac:	10c00117 	ldw	r3,4(r2)
 20143b0:	e0ffef15 	stw	r3,-68(fp)
 20143b4:	00001e06 	br	2014430 <___vfiprintf_internal_r+0xa00>
 20143b8:	9880040c 	andi	r2,r19,16
 20143bc:	10000726 	beq	r2,zero,20143dc <___vfiprintf_internal_r+0x9ac>
 20143c0:	e0bfe917 	ldw	r2,-92(fp)
 20143c4:	10c00104 	addi	r3,r2,4
 20143c8:	e0ffe915 	stw	r3,-92(fp)
 20143cc:	10800017 	ldw	r2,0(r2)
 20143d0:	e0bfee15 	stw	r2,-72(fp)
 20143d4:	e03fef15 	stw	zero,-68(fp)
 20143d8:	00001506 	br	2014430 <___vfiprintf_internal_r+0xa00>
 20143dc:	9880100c 	andi	r2,r19,64
 20143e0:	10000d26 	beq	r2,zero,2014418 <___vfiprintf_internal_r+0x9e8>
 20143e4:	e0bfe917 	ldw	r2,-92(fp)
 20143e8:	10c00104 	addi	r3,r2,4
 20143ec:	e0ffe915 	stw	r3,-92(fp)
 20143f0:	10800017 	ldw	r2,0(r2)
 20143f4:	e0bff615 	stw	r2,-40(fp)
 20143f8:	e03ff715 	stw	zero,-36(fp)
 20143fc:	e0bff617 	ldw	r2,-40(fp)
 2014400:	10bfffcc 	andi	r2,r2,65535
 2014404:	e0bfee15 	stw	r2,-72(fp)
 2014408:	e0fff717 	ldw	r3,-36(fp)
 201440c:	1806703a 	and	r3,r3,zero
 2014410:	e0ffef15 	stw	r3,-68(fp)
 2014414:	00000606 	br	2014430 <___vfiprintf_internal_r+0xa00>
 2014418:	e0bfe917 	ldw	r2,-92(fp)
 201441c:	10c00104 	addi	r3,r2,4
 2014420:	e0ffe915 	stw	r3,-92(fp)
 2014424:	10800017 	ldw	r2,0(r2)
 2014428:	e0bfee15 	stw	r2,-72(fp)
 201442c:	e03fef15 	stw	zero,-68(fp)
 2014430:	e0bfee17 	ldw	r2,-72(fp)
 2014434:	e0bfbc15 	stw	r2,-272(fp)
 2014438:	e0ffef17 	ldw	r3,-68(fp)
 201443c:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 2014440:	00800084 	movi	r2,2
 2014444:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2014448:	9880004c 	andi	r2,r19,1
 201444c:	10000926 	beq	r2,zero,2014474 <___vfiprintf_internal_r+0xa44>
 2014450:	e0bfbc17 	ldw	r2,-272(fp)
 2014454:	e0ffbd17 	ldw	r3,-268(fp)
 2014458:	10c4b03a 	or	r2,r2,r3
 201445c:	10000526 	beq	r2,zero,2014474 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 2014460:	00800c04 	movi	r2,48
 2014464:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2014468:	8805883a 	mov	r2,r17
 201446c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2014470:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2014474:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2014478:	e0bfbb17 	ldw	r2,-276(fp)
 201447c:	e0bfbf15 	stw	r2,-260(fp)
 2014480:	e0bfbf17 	ldw	r2,-260(fp)
 2014484:	10000216 	blt	r2,zero,2014490 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 2014488:	00bfdfc4 	movi	r2,-129
 201448c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2014490:	e53fdb04 	addi	r20,fp,-148
 2014494:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 2014498:	e0bfbc17 	ldw	r2,-272(fp)
 201449c:	e0ffbd17 	ldw	r3,-268(fp)
 20144a0:	10c4b03a 	or	r2,r2,r3
 20144a4:	1000021e 	bne	r2,zero,20144b0 <___vfiprintf_internal_r+0xa80>
 20144a8:	e0bfbb17 	ldw	r2,-276(fp)
 20144ac:	10006c26 	beq	r2,zero,2014660 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 20144b0:	e0bfbe03 	ldbu	r2,-264(fp)
 20144b4:	10c00060 	cmpeqi	r3,r2,1
 20144b8:	1800211e 	bne	r3,zero,2014540 <___vfiprintf_internal_r+0xb10>
 20144bc:	10c000a0 	cmpeqi	r3,r2,2
 20144c0:	1800491e 	bne	r3,zero,20145e8 <___vfiprintf_internal_r+0xbb8>
 20144c4:	10005d1e 	bne	r2,zero,201463c <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 20144c8:	a53fffc4 	addi	r20,r20,-1
 20144cc:	e0bfbc17 	ldw	r2,-272(fp)
 20144d0:	108001cc 	andi	r2,r2,7
 20144d4:	10800c04 	addi	r2,r2,48
 20144d8:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 20144dc:	e0bfbd17 	ldw	r2,-268(fp)
 20144e0:	1004977a 	slli	r2,r2,29
 20144e4:	e0ffbc17 	ldw	r3,-272(fp)
 20144e8:	1806d0fa 	srli	r3,r3,3
 20144ec:	1884b03a 	or	r2,r3,r2
 20144f0:	e0bfbc15 	stw	r2,-272(fp)
 20144f4:	e0bfbd17 	ldw	r2,-268(fp)
 20144f8:	1004d0fa 	srli	r2,r2,3
 20144fc:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2014500:	e0bfbc17 	ldw	r2,-272(fp)
 2014504:	e0ffbd17 	ldw	r3,-268(fp)
 2014508:	10c4b03a 	or	r2,r2,r3
 201450c:	103fee1e 	bne	r2,zero,20144c8 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2014510:	9880004c 	andi	r2,r19,1
 2014514:	10005026 	beq	r2,zero,2014658 <___vfiprintf_internal_r+0xc28>
 2014518:	a0800003 	ldbu	r2,0(r20)
 201451c:	10803fcc 	andi	r2,r2,255
 2014520:	1080201c 	xori	r2,r2,128
 2014524:	10bfe004 	addi	r2,r2,-128
 2014528:	10800c20 	cmpeqi	r2,r2,48
 201452c:	10004a1e 	bne	r2,zero,2014658 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 2014530:	a53fffc4 	addi	r20,r20,-1
 2014534:	00800c04 	movi	r2,48
 2014538:	a0800005 	stb	r2,0(r20)
					break;
 201453c:	00004606 	br	2014658 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2014540:	e0bfbd17 	ldw	r2,-268(fp)
 2014544:	10000a1e 	bne	r2,zero,2014570 <___vfiprintf_internal_r+0xb40>
 2014548:	e0bfbd17 	ldw	r2,-268(fp)
 201454c:	1000031e 	bne	r2,zero,201455c <___vfiprintf_internal_r+0xb2c>
 2014550:	e0bfbc17 	ldw	r2,-272(fp)
 2014554:	108002a8 	cmpgeui	r2,r2,10
 2014558:	1000051e 	bne	r2,zero,2014570 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 201455c:	a53fffc4 	addi	r20,r20,-1
 2014560:	e0bfbc17 	ldw	r2,-272(fp)
 2014564:	10800c04 	addi	r2,r2,48
 2014568:	a0800005 	stb	r2,0(r20)
						break;
 201456c:	00003b06 	br	201465c <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2014570:	a53fffc4 	addi	r20,r20,-1
 2014574:	e0bfbc17 	ldw	r2,-272(fp)
 2014578:	e0ffbd17 	ldw	r3,-268(fp)
 201457c:	01800284 	movi	r6,10
 2014580:	000f883a 	mov	r7,zero
 2014584:	1009883a 	mov	r4,r2
 2014588:	180b883a 	mov	r5,r3
 201458c:	2015ec00 	call	2015ec0 <__umoddi3>
 2014590:	1009883a 	mov	r4,r2
 2014594:	180b883a 	mov	r5,r3
 2014598:	2005883a 	mov	r2,r4
 201459c:	2807883a 	mov	r3,r5
 20145a0:	10800c04 	addi	r2,r2,48
 20145a4:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 20145a8:	e0bfbc17 	ldw	r2,-272(fp)
 20145ac:	e0ffbd17 	ldw	r3,-268(fp)
 20145b0:	01800284 	movi	r6,10
 20145b4:	000f883a 	mov	r7,zero
 20145b8:	1009883a 	mov	r4,r2
 20145bc:	180b883a 	mov	r5,r3
 20145c0:	20159480 	call	2015948 <__udivdi3>
 20145c4:	1009883a 	mov	r4,r2
 20145c8:	180b883a 	mov	r5,r3
 20145cc:	e13fbc15 	stw	r4,-272(fp)
 20145d0:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 20145d4:	e0bfbc17 	ldw	r2,-272(fp)
 20145d8:	e0ffbd17 	ldw	r3,-268(fp)
 20145dc:	10c4b03a 	or	r2,r2,r3
 20145e0:	103fe31e 	bne	r2,zero,2014570 <___vfiprintf_internal_r+0xb40>
					break;
 20145e4:	00001d06 	br	201465c <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 20145e8:	a53fffc4 	addi	r20,r20,-1
 20145ec:	e0bfbc17 	ldw	r2,-272(fp)
 20145f0:	108003cc 	andi	r2,r2,15
 20145f4:	e0ffc217 	ldw	r3,-248(fp)
 20145f8:	1885883a 	add	r2,r3,r2
 20145fc:	10800003 	ldbu	r2,0(r2)
 2014600:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 2014604:	e0bfbd17 	ldw	r2,-268(fp)
 2014608:	1004973a 	slli	r2,r2,28
 201460c:	e0ffbc17 	ldw	r3,-272(fp)
 2014610:	1806d13a 	srli	r3,r3,4
 2014614:	1884b03a 	or	r2,r3,r2
 2014618:	e0bfbc15 	stw	r2,-272(fp)
 201461c:	e0bfbd17 	ldw	r2,-268(fp)
 2014620:	1004d13a 	srli	r2,r2,4
 2014624:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2014628:	e0bfbc17 	ldw	r2,-272(fp)
 201462c:	e0ffbd17 	ldw	r3,-268(fp)
 2014630:	10c4b03a 	or	r2,r2,r3
 2014634:	103fec1e 	bne	r2,zero,20145e8 <___vfiprintf_internal_r+0xbb8>
					break;
 2014638:	00000806 	br	201465c <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 201463c:	050080b4 	movhi	r20,514
 2014640:	a509e304 	addi	r20,r20,10124
					size = strlen (cp);
 2014644:	a009883a 	mov	r4,r20
 2014648:	20096f80 	call	20096f8 <strlen>
 201464c:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 2014650:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2014654:	00001806 	br	20146b8 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2014658:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 201465c:	00000706 	br	201467c <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2014660:	e0bfbe03 	ldbu	r2,-264(fp)
 2014664:	1000051e 	bne	r2,zero,201467c <___vfiprintf_internal_r+0xc4c>
 2014668:	9880004c 	andi	r2,r19,1
 201466c:	10000326 	beq	r2,zero,201467c <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 2014670:	a53fffc4 	addi	r20,r20,-1
 2014674:	00800c04 	movi	r2,48
 2014678:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 201467c:	e0bfdb04 	addi	r2,fp,-148
 2014680:	10800a04 	addi	r2,r2,40
 2014684:	1007883a 	mov	r3,r2
 2014688:	a005883a 	mov	r2,r20
 201468c:	1885c83a 	sub	r2,r3,r2
 2014690:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 2014694:	00000806 	br	20146b8 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2014698:	88015426 	beq	r17,zero,2014bec <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 201469c:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 20146a0:	8805883a 	mov	r2,r17
 20146a4:	a0800005 	stb	r2,0(r20)
			size = 1;
 20146a8:	00800044 	movi	r2,1
 20146ac:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 20146b0:	e03fc705 	stb	zero,-228(fp)
			break;
 20146b4:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 20146b8:	e0ffbf17 	ldw	r3,-260(fp)
 20146bc:	e0bfc117 	ldw	r2,-252(fp)
 20146c0:	10c0010e 	bge	r2,r3,20146c8 <___vfiprintf_internal_r+0xc98>
 20146c4:	1805883a 	mov	r2,r3
 20146c8:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 20146cc:	e0bfc703 	ldbu	r2,-228(fp)
 20146d0:	10803fcc 	andi	r2,r2,255
 20146d4:	1080201c 	xori	r2,r2,128
 20146d8:	10bfe004 	addi	r2,r2,-128
 20146dc:	10000326 	beq	r2,zero,20146ec <___vfiprintf_internal_r+0xcbc>
			realsz++;
 20146e0:	e0bfc017 	ldw	r2,-256(fp)
 20146e4:	10800044 	addi	r2,r2,1
 20146e8:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 20146ec:	9880008c 	andi	r2,r19,2
 20146f0:	10000326 	beq	r2,zero,2014700 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 20146f4:	e0bfc017 	ldw	r2,-256(fp)
 20146f8:	10800084 	addi	r2,r2,2
 20146fc:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2014700:	9880210c 	andi	r2,r19,132
 2014704:	1000351e 	bne	r2,zero,20147dc <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 2014708:	e0ffba17 	ldw	r3,-280(fp)
 201470c:	e0bfc017 	ldw	r2,-256(fp)
 2014710:	18a1c83a 	sub	r16,r3,r2
 2014714:	0400310e 	bge	zero,r16,20147dc <___vfiprintf_internal_r+0xdac>
 2014718:	00001706 	br	2014778 <___vfiprintf_internal_r+0xd48>
 201471c:	008080b4 	movhi	r2,514
 2014720:	1089e984 	addi	r2,r2,10150
 2014724:	90800015 	stw	r2,0(r18)
 2014728:	00800404 	movi	r2,16
 201472c:	90800115 	stw	r2,4(r18)
 2014730:	e0bfca17 	ldw	r2,-216(fp)
 2014734:	10800404 	addi	r2,r2,16
 2014738:	e0bfca15 	stw	r2,-216(fp)
 201473c:	94800204 	addi	r18,r18,8
 2014740:	e0bfc917 	ldw	r2,-220(fp)
 2014744:	10800044 	addi	r2,r2,1
 2014748:	e0bfc915 	stw	r2,-220(fp)
 201474c:	e0bfc917 	ldw	r2,-220(fp)
 2014750:	10800210 	cmplti	r2,r2,8
 2014754:	1000071e 	bne	r2,zero,2014774 <___vfiprintf_internal_r+0xd44>
 2014758:	e0bfc804 	addi	r2,fp,-224
 201475c:	100d883a 	mov	r6,r2
 2014760:	e17fe717 	ldw	r5,-100(fp)
 2014764:	e13fe617 	ldw	r4,-104(fp)
 2014768:	20137b40 	call	20137b4 <__sprint_r>
 201476c:	10012d1e 	bne	r2,zero,2014c24 <___vfiprintf_internal_r+0x11f4>
 2014770:	e4bfcb04 	addi	r18,fp,-212
 2014774:	843ffc04 	addi	r16,r16,-16
 2014778:	80800448 	cmpgei	r2,r16,17
 201477c:	103fe71e 	bne	r2,zero,201471c <___vfiprintf_internal_r+0xcec>
 2014780:	008080b4 	movhi	r2,514
 2014784:	1089e984 	addi	r2,r2,10150
 2014788:	90800015 	stw	r2,0(r18)
 201478c:	8005883a 	mov	r2,r16
 2014790:	90800115 	stw	r2,4(r18)
 2014794:	e0bfca17 	ldw	r2,-216(fp)
 2014798:	8007883a 	mov	r3,r16
 201479c:	10c5883a 	add	r2,r2,r3
 20147a0:	e0bfca15 	stw	r2,-216(fp)
 20147a4:	94800204 	addi	r18,r18,8
 20147a8:	e0bfc917 	ldw	r2,-220(fp)
 20147ac:	10800044 	addi	r2,r2,1
 20147b0:	e0bfc915 	stw	r2,-220(fp)
 20147b4:	e0bfc917 	ldw	r2,-220(fp)
 20147b8:	10800210 	cmplti	r2,r2,8
 20147bc:	1000071e 	bne	r2,zero,20147dc <___vfiprintf_internal_r+0xdac>
 20147c0:	e0bfc804 	addi	r2,fp,-224
 20147c4:	100d883a 	mov	r6,r2
 20147c8:	e17fe717 	ldw	r5,-100(fp)
 20147cc:	e13fe617 	ldw	r4,-104(fp)
 20147d0:	20137b40 	call	20137b4 <__sprint_r>
 20147d4:	1001151e 	bne	r2,zero,2014c2c <___vfiprintf_internal_r+0x11fc>
 20147d8:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 20147dc:	e0bfc703 	ldbu	r2,-228(fp)
 20147e0:	10803fcc 	andi	r2,r2,255
 20147e4:	1080201c 	xori	r2,r2,128
 20147e8:	10bfe004 	addi	r2,r2,-128
 20147ec:	10001526 	beq	r2,zero,2014844 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 20147f0:	e0bfc704 	addi	r2,fp,-228
 20147f4:	90800015 	stw	r2,0(r18)
 20147f8:	00800044 	movi	r2,1
 20147fc:	90800115 	stw	r2,4(r18)
 2014800:	e0bfca17 	ldw	r2,-216(fp)
 2014804:	10800044 	addi	r2,r2,1
 2014808:	e0bfca15 	stw	r2,-216(fp)
 201480c:	94800204 	addi	r18,r18,8
 2014810:	e0bfc917 	ldw	r2,-220(fp)
 2014814:	10800044 	addi	r2,r2,1
 2014818:	e0bfc915 	stw	r2,-220(fp)
 201481c:	e0bfc917 	ldw	r2,-220(fp)
 2014820:	10800210 	cmplti	r2,r2,8
 2014824:	1000071e 	bne	r2,zero,2014844 <___vfiprintf_internal_r+0xe14>
 2014828:	e0bfc804 	addi	r2,fp,-224
 201482c:	100d883a 	mov	r6,r2
 2014830:	e17fe717 	ldw	r5,-100(fp)
 2014834:	e13fe617 	ldw	r4,-104(fp)
 2014838:	20137b40 	call	20137b4 <__sprint_r>
 201483c:	1000fd1e 	bne	r2,zero,2014c34 <___vfiprintf_internal_r+0x1204>
 2014840:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2014844:	9880008c 	andi	r2,r19,2
 2014848:	10001526 	beq	r2,zero,20148a0 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 201484c:	e0bfe504 	addi	r2,fp,-108
 2014850:	90800015 	stw	r2,0(r18)
 2014854:	00800084 	movi	r2,2
 2014858:	90800115 	stw	r2,4(r18)
 201485c:	e0bfca17 	ldw	r2,-216(fp)
 2014860:	10800084 	addi	r2,r2,2
 2014864:	e0bfca15 	stw	r2,-216(fp)
 2014868:	94800204 	addi	r18,r18,8
 201486c:	e0bfc917 	ldw	r2,-220(fp)
 2014870:	10800044 	addi	r2,r2,1
 2014874:	e0bfc915 	stw	r2,-220(fp)
 2014878:	e0bfc917 	ldw	r2,-220(fp)
 201487c:	10800210 	cmplti	r2,r2,8
 2014880:	1000071e 	bne	r2,zero,20148a0 <___vfiprintf_internal_r+0xe70>
 2014884:	e0bfc804 	addi	r2,fp,-224
 2014888:	100d883a 	mov	r6,r2
 201488c:	e17fe717 	ldw	r5,-100(fp)
 2014890:	e13fe617 	ldw	r4,-104(fp)
 2014894:	20137b40 	call	20137b4 <__sprint_r>
 2014898:	1000e81e 	bne	r2,zero,2014c3c <___vfiprintf_internal_r+0x120c>
 201489c:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 20148a0:	9880210c 	andi	r2,r19,132
 20148a4:	10802018 	cmpnei	r2,r2,128
 20148a8:	1000351e 	bne	r2,zero,2014980 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 20148ac:	e0ffba17 	ldw	r3,-280(fp)
 20148b0:	e0bfc017 	ldw	r2,-256(fp)
 20148b4:	18a1c83a 	sub	r16,r3,r2
 20148b8:	0400310e 	bge	zero,r16,2014980 <___vfiprintf_internal_r+0xf50>
 20148bc:	00001706 	br	201491c <___vfiprintf_internal_r+0xeec>
 20148c0:	008080b4 	movhi	r2,514
 20148c4:	1089ed84 	addi	r2,r2,10166
 20148c8:	90800015 	stw	r2,0(r18)
 20148cc:	00800404 	movi	r2,16
 20148d0:	90800115 	stw	r2,4(r18)
 20148d4:	e0bfca17 	ldw	r2,-216(fp)
 20148d8:	10800404 	addi	r2,r2,16
 20148dc:	e0bfca15 	stw	r2,-216(fp)
 20148e0:	94800204 	addi	r18,r18,8
 20148e4:	e0bfc917 	ldw	r2,-220(fp)
 20148e8:	10800044 	addi	r2,r2,1
 20148ec:	e0bfc915 	stw	r2,-220(fp)
 20148f0:	e0bfc917 	ldw	r2,-220(fp)
 20148f4:	10800210 	cmplti	r2,r2,8
 20148f8:	1000071e 	bne	r2,zero,2014918 <___vfiprintf_internal_r+0xee8>
 20148fc:	e0bfc804 	addi	r2,fp,-224
 2014900:	100d883a 	mov	r6,r2
 2014904:	e17fe717 	ldw	r5,-100(fp)
 2014908:	e13fe617 	ldw	r4,-104(fp)
 201490c:	20137b40 	call	20137b4 <__sprint_r>
 2014910:	1000cc1e 	bne	r2,zero,2014c44 <___vfiprintf_internal_r+0x1214>
 2014914:	e4bfcb04 	addi	r18,fp,-212
 2014918:	843ffc04 	addi	r16,r16,-16
 201491c:	80800448 	cmpgei	r2,r16,17
 2014920:	103fe71e 	bne	r2,zero,20148c0 <___vfiprintf_internal_r+0xe90>
 2014924:	008080b4 	movhi	r2,514
 2014928:	1089ed84 	addi	r2,r2,10166
 201492c:	90800015 	stw	r2,0(r18)
 2014930:	8005883a 	mov	r2,r16
 2014934:	90800115 	stw	r2,4(r18)
 2014938:	e0bfca17 	ldw	r2,-216(fp)
 201493c:	8007883a 	mov	r3,r16
 2014940:	10c5883a 	add	r2,r2,r3
 2014944:	e0bfca15 	stw	r2,-216(fp)
 2014948:	94800204 	addi	r18,r18,8
 201494c:	e0bfc917 	ldw	r2,-220(fp)
 2014950:	10800044 	addi	r2,r2,1
 2014954:	e0bfc915 	stw	r2,-220(fp)
 2014958:	e0bfc917 	ldw	r2,-220(fp)
 201495c:	10800210 	cmplti	r2,r2,8
 2014960:	1000071e 	bne	r2,zero,2014980 <___vfiprintf_internal_r+0xf50>
 2014964:	e0bfc804 	addi	r2,fp,-224
 2014968:	100d883a 	mov	r6,r2
 201496c:	e17fe717 	ldw	r5,-100(fp)
 2014970:	e13fe617 	ldw	r4,-104(fp)
 2014974:	20137b40 	call	20137b4 <__sprint_r>
 2014978:	1000b41e 	bne	r2,zero,2014c4c <___vfiprintf_internal_r+0x121c>
 201497c:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2014980:	e0ffbf17 	ldw	r3,-260(fp)
 2014984:	e0bfc117 	ldw	r2,-252(fp)
 2014988:	18a1c83a 	sub	r16,r3,r2
 201498c:	0400310e 	bge	zero,r16,2014a54 <___vfiprintf_internal_r+0x1024>
 2014990:	00001706 	br	20149f0 <___vfiprintf_internal_r+0xfc0>
 2014994:	008080b4 	movhi	r2,514
 2014998:	1089ed84 	addi	r2,r2,10166
 201499c:	90800015 	stw	r2,0(r18)
 20149a0:	00800404 	movi	r2,16
 20149a4:	90800115 	stw	r2,4(r18)
 20149a8:	e0bfca17 	ldw	r2,-216(fp)
 20149ac:	10800404 	addi	r2,r2,16
 20149b0:	e0bfca15 	stw	r2,-216(fp)
 20149b4:	94800204 	addi	r18,r18,8
 20149b8:	e0bfc917 	ldw	r2,-220(fp)
 20149bc:	10800044 	addi	r2,r2,1
 20149c0:	e0bfc915 	stw	r2,-220(fp)
 20149c4:	e0bfc917 	ldw	r2,-220(fp)
 20149c8:	10800210 	cmplti	r2,r2,8
 20149cc:	1000071e 	bne	r2,zero,20149ec <___vfiprintf_internal_r+0xfbc>
 20149d0:	e0bfc804 	addi	r2,fp,-224
 20149d4:	100d883a 	mov	r6,r2
 20149d8:	e17fe717 	ldw	r5,-100(fp)
 20149dc:	e13fe617 	ldw	r4,-104(fp)
 20149e0:	20137b40 	call	20137b4 <__sprint_r>
 20149e4:	10009b1e 	bne	r2,zero,2014c54 <___vfiprintf_internal_r+0x1224>
 20149e8:	e4bfcb04 	addi	r18,fp,-212
 20149ec:	843ffc04 	addi	r16,r16,-16
 20149f0:	80800448 	cmpgei	r2,r16,17
 20149f4:	103fe71e 	bne	r2,zero,2014994 <___vfiprintf_internal_r+0xf64>
 20149f8:	008080b4 	movhi	r2,514
 20149fc:	1089ed84 	addi	r2,r2,10166
 2014a00:	90800015 	stw	r2,0(r18)
 2014a04:	8005883a 	mov	r2,r16
 2014a08:	90800115 	stw	r2,4(r18)
 2014a0c:	e0bfca17 	ldw	r2,-216(fp)
 2014a10:	8007883a 	mov	r3,r16
 2014a14:	10c5883a 	add	r2,r2,r3
 2014a18:	e0bfca15 	stw	r2,-216(fp)
 2014a1c:	94800204 	addi	r18,r18,8
 2014a20:	e0bfc917 	ldw	r2,-220(fp)
 2014a24:	10800044 	addi	r2,r2,1
 2014a28:	e0bfc915 	stw	r2,-220(fp)
 2014a2c:	e0bfc917 	ldw	r2,-220(fp)
 2014a30:	10800210 	cmplti	r2,r2,8
 2014a34:	1000071e 	bne	r2,zero,2014a54 <___vfiprintf_internal_r+0x1024>
 2014a38:	e0bfc804 	addi	r2,fp,-224
 2014a3c:	100d883a 	mov	r6,r2
 2014a40:	e17fe717 	ldw	r5,-100(fp)
 2014a44:	e13fe617 	ldw	r4,-104(fp)
 2014a48:	20137b40 	call	20137b4 <__sprint_r>
 2014a4c:	1000831e 	bne	r2,zero,2014c5c <___vfiprintf_internal_r+0x122c>
 2014a50:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2014a54:	95000015 	stw	r20,0(r18)
 2014a58:	e0bfc117 	ldw	r2,-252(fp)
 2014a5c:	90800115 	stw	r2,4(r18)
 2014a60:	e0ffca17 	ldw	r3,-216(fp)
 2014a64:	e0bfc117 	ldw	r2,-252(fp)
 2014a68:	1885883a 	add	r2,r3,r2
 2014a6c:	e0bfca15 	stw	r2,-216(fp)
 2014a70:	94800204 	addi	r18,r18,8
 2014a74:	e0bfc917 	ldw	r2,-220(fp)
 2014a78:	10800044 	addi	r2,r2,1
 2014a7c:	e0bfc915 	stw	r2,-220(fp)
 2014a80:	e0bfc917 	ldw	r2,-220(fp)
 2014a84:	10800210 	cmplti	r2,r2,8
 2014a88:	1000071e 	bne	r2,zero,2014aa8 <___vfiprintf_internal_r+0x1078>
 2014a8c:	e0bfc804 	addi	r2,fp,-224
 2014a90:	100d883a 	mov	r6,r2
 2014a94:	e17fe717 	ldw	r5,-100(fp)
 2014a98:	e13fe617 	ldw	r4,-104(fp)
 2014a9c:	20137b40 	call	20137b4 <__sprint_r>
 2014aa0:	1000701e 	bne	r2,zero,2014c64 <___vfiprintf_internal_r+0x1234>
 2014aa4:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2014aa8:	9880010c 	andi	r2,r19,4
 2014aac:	10003526 	beq	r2,zero,2014b84 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 2014ab0:	e0ffba17 	ldw	r3,-280(fp)
 2014ab4:	e0bfc017 	ldw	r2,-256(fp)
 2014ab8:	18a1c83a 	sub	r16,r3,r2
 2014abc:	0400310e 	bge	zero,r16,2014b84 <___vfiprintf_internal_r+0x1154>
 2014ac0:	00001706 	br	2014b20 <___vfiprintf_internal_r+0x10f0>
 2014ac4:	008080b4 	movhi	r2,514
 2014ac8:	1089e984 	addi	r2,r2,10150
 2014acc:	90800015 	stw	r2,0(r18)
 2014ad0:	00800404 	movi	r2,16
 2014ad4:	90800115 	stw	r2,4(r18)
 2014ad8:	e0bfca17 	ldw	r2,-216(fp)
 2014adc:	10800404 	addi	r2,r2,16
 2014ae0:	e0bfca15 	stw	r2,-216(fp)
 2014ae4:	94800204 	addi	r18,r18,8
 2014ae8:	e0bfc917 	ldw	r2,-220(fp)
 2014aec:	10800044 	addi	r2,r2,1
 2014af0:	e0bfc915 	stw	r2,-220(fp)
 2014af4:	e0bfc917 	ldw	r2,-220(fp)
 2014af8:	10800210 	cmplti	r2,r2,8
 2014afc:	1000071e 	bne	r2,zero,2014b1c <___vfiprintf_internal_r+0x10ec>
 2014b00:	e0bfc804 	addi	r2,fp,-224
 2014b04:	100d883a 	mov	r6,r2
 2014b08:	e17fe717 	ldw	r5,-100(fp)
 2014b0c:	e13fe617 	ldw	r4,-104(fp)
 2014b10:	20137b40 	call	20137b4 <__sprint_r>
 2014b14:	1000551e 	bne	r2,zero,2014c6c <___vfiprintf_internal_r+0x123c>
 2014b18:	e4bfcb04 	addi	r18,fp,-212
 2014b1c:	843ffc04 	addi	r16,r16,-16
 2014b20:	80800448 	cmpgei	r2,r16,17
 2014b24:	103fe71e 	bne	r2,zero,2014ac4 <___vfiprintf_internal_r+0x1094>
 2014b28:	008080b4 	movhi	r2,514
 2014b2c:	1089e984 	addi	r2,r2,10150
 2014b30:	90800015 	stw	r2,0(r18)
 2014b34:	8005883a 	mov	r2,r16
 2014b38:	90800115 	stw	r2,4(r18)
 2014b3c:	e0bfca17 	ldw	r2,-216(fp)
 2014b40:	8007883a 	mov	r3,r16
 2014b44:	10c5883a 	add	r2,r2,r3
 2014b48:	e0bfca15 	stw	r2,-216(fp)
 2014b4c:	94800204 	addi	r18,r18,8
 2014b50:	e0bfc917 	ldw	r2,-220(fp)
 2014b54:	10800044 	addi	r2,r2,1
 2014b58:	e0bfc915 	stw	r2,-220(fp)
 2014b5c:	e0bfc917 	ldw	r2,-220(fp)
 2014b60:	10800210 	cmplti	r2,r2,8
 2014b64:	1000071e 	bne	r2,zero,2014b84 <___vfiprintf_internal_r+0x1154>
 2014b68:	e0bfc804 	addi	r2,fp,-224
 2014b6c:	100d883a 	mov	r6,r2
 2014b70:	e17fe717 	ldw	r5,-100(fp)
 2014b74:	e13fe617 	ldw	r4,-104(fp)
 2014b78:	20137b40 	call	20137b4 <__sprint_r>
 2014b7c:	10003d1e 	bne	r2,zero,2014c74 <___vfiprintf_internal_r+0x1244>
 2014b80:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2014b84:	e0ffba17 	ldw	r3,-280(fp)
 2014b88:	e0bfc017 	ldw	r2,-256(fp)
 2014b8c:	10c0010e 	bge	r2,r3,2014b94 <___vfiprintf_internal_r+0x1164>
 2014b90:	1805883a 	mov	r2,r3
 2014b94:	e0ffb917 	ldw	r3,-284(fp)
 2014b98:	1885883a 	add	r2,r3,r2
 2014b9c:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2014ba0:	e0bfca17 	ldw	r2,-216(fp)
 2014ba4:	10000626 	beq	r2,zero,2014bc0 <___vfiprintf_internal_r+0x1190>
 2014ba8:	e0bfc804 	addi	r2,fp,-224
 2014bac:	100d883a 	mov	r6,r2
 2014bb0:	e17fe717 	ldw	r5,-100(fp)
 2014bb4:	e13fe617 	ldw	r4,-104(fp)
 2014bb8:	20137b40 	call	20137b4 <__sprint_r>
 2014bbc:	10002f1e 	bne	r2,zero,2014c7c <___vfiprintf_internal_r+0x124c>
 2014bc0:	e03fc915 	stw	zero,-220(fp)
 2014bc4:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 2014bc8:	e0bfc317 	ldw	r2,-244(fp)
 2014bcc:	103bea26 	beq	r2,zero,2013b78 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 2014bd0:	e17fc317 	ldw	r5,-244(fp)
 2014bd4:	e13fe617 	ldw	r4,-104(fp)
 2014bd8:	200e7b80 	call	200e7b8 <_free_r>
			malloc_buf = NULL;
 2014bdc:	e03fc315 	stw	zero,-244(fp)
		}
	}
 2014be0:	003be506 	br	2013b78 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2014be4:	0001883a 	nop
 2014be8:	00000106 	br	2014bf0 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2014bec:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2014bf0:	e0bfca17 	ldw	r2,-216(fp)
 2014bf4:	10000626 	beq	r2,zero,2014c10 <___vfiprintf_internal_r+0x11e0>
 2014bf8:	e0bfc804 	addi	r2,fp,-224
 2014bfc:	100d883a 	mov	r6,r2
 2014c00:	e17fe717 	ldw	r5,-100(fp)
 2014c04:	e13fe617 	ldw	r4,-104(fp)
 2014c08:	20137b40 	call	20137b4 <__sprint_r>
 2014c0c:	10001d1e 	bne	r2,zero,2014c84 <___vfiprintf_internal_r+0x1254>
 2014c10:	e03fc915 	stw	zero,-220(fp)
 2014c14:	e4bfcb04 	addi	r18,fp,-212
 2014c18:	00001b06 	br	2014c88 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2014c1c:	0001883a 	nop
 2014c20:	00001906 	br	2014c88 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2014c24:	0001883a 	nop
 2014c28:	00001706 	br	2014c88 <___vfiprintf_internal_r+0x1258>
 2014c2c:	0001883a 	nop
 2014c30:	00001506 	br	2014c88 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2014c34:	0001883a 	nop
 2014c38:	00001306 	br	2014c88 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2014c3c:	0001883a 	nop
 2014c40:	00001106 	br	2014c88 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2014c44:	0001883a 	nop
 2014c48:	00000f06 	br	2014c88 <___vfiprintf_internal_r+0x1258>
 2014c4c:	0001883a 	nop
 2014c50:	00000d06 	br	2014c88 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2014c54:	0001883a 	nop
 2014c58:	00000b06 	br	2014c88 <___vfiprintf_internal_r+0x1258>
 2014c5c:	0001883a 	nop
 2014c60:	00000906 	br	2014c88 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2014c64:	0001883a 	nop
 2014c68:	00000706 	br	2014c88 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2014c6c:	0001883a 	nop
 2014c70:	00000506 	br	2014c88 <___vfiprintf_internal_r+0x1258>
 2014c74:	0001883a 	nop
 2014c78:	00000306 	br	2014c88 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2014c7c:	0001883a 	nop
 2014c80:	00000106 	br	2014c88 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2014c84:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2014c88:	e0bfc317 	ldw	r2,-244(fp)
 2014c8c:	10000326 	beq	r2,zero,2014c9c <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 2014c90:	e17fc317 	ldw	r5,-244(fp)
 2014c94:	e13fe617 	ldw	r4,-104(fp)
 2014c98:	200e7b80 	call	200e7b8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2014c9c:	e0bfe717 	ldw	r2,-100(fp)
 2014ca0:	1080030b 	ldhu	r2,12(r2)
 2014ca4:	10bfffcc 	andi	r2,r2,65535
 2014ca8:	1080100c 	andi	r2,r2,64
 2014cac:	1000021e 	bne	r2,zero,2014cb8 <___vfiprintf_internal_r+0x1288>
 2014cb0:	e0bfb917 	ldw	r2,-284(fp)
 2014cb4:	00000206 	br	2014cc0 <___vfiprintf_internal_r+0x1290>
 2014cb8:	00bfffc4 	movi	r2,-1
 2014cbc:	0001883a 	nop
	/* NOTREACHED */
}
 2014cc0:	e6fff804 	addi	sp,fp,-32
 2014cc4:	dfc00917 	ldw	ra,36(sp)
 2014cc8:	df000817 	ldw	fp,32(sp)
 2014ccc:	ddc00717 	ldw	r23,28(sp)
 2014cd0:	dd800617 	ldw	r22,24(sp)
 2014cd4:	dd400517 	ldw	r21,20(sp)
 2014cd8:	dd000417 	ldw	r20,16(sp)
 2014cdc:	dcc00317 	ldw	r19,12(sp)
 2014ce0:	dc800217 	ldw	r18,8(sp)
 2014ce4:	dc400117 	ldw	r17,4(sp)
 2014ce8:	dc000017 	ldw	r16,0(sp)
 2014cec:	dec00a04 	addi	sp,sp,40
 2014cf0:	f800283a 	ret

02014cf4 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 2014cf4:	defff904 	addi	sp,sp,-28
 2014cf8:	dfc00615 	stw	ra,24(sp)
 2014cfc:	df000515 	stw	fp,20(sp)
 2014d00:	df000504 	addi	fp,sp,20
 2014d04:	e13ffc15 	stw	r4,-16(fp)
 2014d08:	e17ffd15 	stw	r5,-12(fp)
 2014d0c:	e1bffe15 	stw	r6,-8(fp)
 2014d10:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2014d14:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 2014d18:	e1bfff17 	ldw	r6,-4(fp)
 2014d1c:	e17ffe17 	ldw	r5,-8(fp)
 2014d20:	e13ffd17 	ldw	r4,-12(fp)
 2014d24:	2016e400 	call	2016e40 <write>
 2014d28:	e0bffb15 	stw	r2,-20(fp)
 2014d2c:	e0bffb17 	ldw	r2,-20(fp)
 2014d30:	10bfffd8 	cmpnei	r2,r2,-1
 2014d34:	1000051e 	bne	r2,zero,2014d4c <_write_r+0x58>
 2014d38:	d0a79e17 	ldw	r2,-24968(gp)
 2014d3c:	10000326 	beq	r2,zero,2014d4c <_write_r+0x58>
    ptr->_errno = errno;
 2014d40:	d0e79e17 	ldw	r3,-24968(gp)
 2014d44:	e0bffc17 	ldw	r2,-16(fp)
 2014d48:	10c00015 	stw	r3,0(r2)
  return ret;
 2014d4c:	e0bffb17 	ldw	r2,-20(fp)
}
 2014d50:	e037883a 	mov	sp,fp
 2014d54:	dfc00117 	ldw	ra,4(sp)
 2014d58:	df000017 	ldw	fp,0(sp)
 2014d5c:	dec00204 	addi	sp,sp,8
 2014d60:	f800283a 	ret

02014d64 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2014d64:	defffb04 	addi	sp,sp,-20
 2014d68:	dfc00415 	stw	ra,16(sp)
 2014d6c:	df000315 	stw	fp,12(sp)
 2014d70:	df000304 	addi	fp,sp,12
 2014d74:	e13ffe15 	stw	r4,-8(fp)
 2014d78:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2014d7c:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 2014d80:	e13fff17 	ldw	r4,-4(fp)
 2014d84:	20166380 	call	2016638 <close>
 2014d88:	e0bffd15 	stw	r2,-12(fp)
 2014d8c:	e0bffd17 	ldw	r2,-12(fp)
 2014d90:	10bfffd8 	cmpnei	r2,r2,-1
 2014d94:	1000051e 	bne	r2,zero,2014dac <_close_r+0x48>
 2014d98:	d0a79e17 	ldw	r2,-24968(gp)
 2014d9c:	10000326 	beq	r2,zero,2014dac <_close_r+0x48>
    ptr->_errno = errno;
 2014da0:	d0e79e17 	ldw	r3,-24968(gp)
 2014da4:	e0bffe17 	ldw	r2,-8(fp)
 2014da8:	10c00015 	stw	r3,0(r2)
  return ret;
 2014dac:	e0bffd17 	ldw	r2,-12(fp)
}
 2014db0:	e037883a 	mov	sp,fp
 2014db4:	dfc00117 	ldw	ra,4(sp)
 2014db8:	df000017 	ldw	fp,0(sp)
 2014dbc:	dec00204 	addi	sp,sp,8
 2014dc0:	f800283a 	ret

02014dc4 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 2014dc4:	defff504 	addi	sp,sp,-44
 2014dc8:	dfc00a15 	stw	ra,40(sp)
 2014dcc:	df000915 	stw	fp,36(sp)
 2014dd0:	df000904 	addi	fp,sp,36
 2014dd4:	e13ffd15 	stw	r4,-12(fp)
 2014dd8:	e17ffe15 	stw	r5,-8(fp)
 2014ddc:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 2014de0:	e0fffe17 	ldw	r3,-8(fp)
 2014de4:	e0bfff17 	ldw	r2,-4(fp)
 2014de8:	1885383a 	mul	r2,r3,r2
 2014dec:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 2014df0:	e17ff817 	ldw	r5,-32(fp)
 2014df4:	e13ffd17 	ldw	r4,-12(fp)
 2014df8:	200fdf80 	call	200fdf8 <_malloc_r>
 2014dfc:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 2014e00:	e0bff917 	ldw	r2,-28(fp)
 2014e04:	1000021e 	bne	r2,zero,2014e10 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 2014e08:	0005883a 	mov	r2,zero
 2014e0c:	00004106 	br	2014f14 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 2014e10:	e0bff917 	ldw	r2,-28(fp)
 2014e14:	10bffe04 	addi	r2,r2,-8
 2014e18:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 2014e1c:	e0bffa17 	ldw	r2,-24(fp)
 2014e20:	10c00117 	ldw	r3,4(r2)
 2014e24:	00bfff04 	movi	r2,-4
 2014e28:	1884703a 	and	r2,r3,r2
 2014e2c:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 2014e30:	e0bffb17 	ldw	r2,-20(fp)
 2014e34:	10bfff04 	addi	r2,r2,-4
 2014e38:	e0bffc15 	stw	r2,-16(fp)
 2014e3c:	e0bffc17 	ldw	r2,-16(fp)
 2014e40:	10800968 	cmpgeui	r2,r2,37
 2014e44:	10002e1e 	bne	r2,zero,2014f00 <_calloc_r+0x13c>
 2014e48:	e0bff917 	ldw	r2,-28(fp)
 2014e4c:	e0bff715 	stw	r2,-36(fp)
 2014e50:	e0bffc17 	ldw	r2,-16(fp)
 2014e54:	10800530 	cmpltui	r2,r2,20
 2014e58:	10001e1e 	bne	r2,zero,2014ed4 <_calloc_r+0x110>
 2014e5c:	e0bff717 	ldw	r2,-36(fp)
 2014e60:	10c00104 	addi	r3,r2,4
 2014e64:	e0fff715 	stw	r3,-36(fp)
 2014e68:	10000015 	stw	zero,0(r2)
 2014e6c:	e0bff717 	ldw	r2,-36(fp)
 2014e70:	10c00104 	addi	r3,r2,4
 2014e74:	e0fff715 	stw	r3,-36(fp)
 2014e78:	10000015 	stw	zero,0(r2)
 2014e7c:	e0bffc17 	ldw	r2,-16(fp)
 2014e80:	10800730 	cmpltui	r2,r2,28
 2014e84:	1000131e 	bne	r2,zero,2014ed4 <_calloc_r+0x110>
 2014e88:	e0bff717 	ldw	r2,-36(fp)
 2014e8c:	10c00104 	addi	r3,r2,4
 2014e90:	e0fff715 	stw	r3,-36(fp)
 2014e94:	10000015 	stw	zero,0(r2)
 2014e98:	e0bff717 	ldw	r2,-36(fp)
 2014e9c:	10c00104 	addi	r3,r2,4
 2014ea0:	e0fff715 	stw	r3,-36(fp)
 2014ea4:	10000015 	stw	zero,0(r2)
 2014ea8:	e0bffc17 	ldw	r2,-16(fp)
 2014eac:	10800930 	cmpltui	r2,r2,36
 2014eb0:	1000081e 	bne	r2,zero,2014ed4 <_calloc_r+0x110>
 2014eb4:	e0bff717 	ldw	r2,-36(fp)
 2014eb8:	10c00104 	addi	r3,r2,4
 2014ebc:	e0fff715 	stw	r3,-36(fp)
 2014ec0:	10000015 	stw	zero,0(r2)
 2014ec4:	e0bff717 	ldw	r2,-36(fp)
 2014ec8:	10c00104 	addi	r3,r2,4
 2014ecc:	e0fff715 	stw	r3,-36(fp)
 2014ed0:	10000015 	stw	zero,0(r2)
 2014ed4:	e0bff717 	ldw	r2,-36(fp)
 2014ed8:	10c00104 	addi	r3,r2,4
 2014edc:	e0fff715 	stw	r3,-36(fp)
 2014ee0:	10000015 	stw	zero,0(r2)
 2014ee4:	e0bff717 	ldw	r2,-36(fp)
 2014ee8:	10c00104 	addi	r3,r2,4
 2014eec:	e0fff715 	stw	r3,-36(fp)
 2014ef0:	10000015 	stw	zero,0(r2)
 2014ef4:	e0bff717 	ldw	r2,-36(fp)
 2014ef8:	10000015 	stw	zero,0(r2)
 2014efc:	00000406 	br	2014f10 <_calloc_r+0x14c>
 2014f00:	e1bffc17 	ldw	r6,-16(fp)
 2014f04:	000b883a 	mov	r5,zero
 2014f08:	e13ff917 	ldw	r4,-28(fp)
 2014f0c:	20093180 	call	2009318 <memset>
    return mem;
 2014f10:	e0bff917 	ldw	r2,-28(fp)
  }
}
 2014f14:	e037883a 	mov	sp,fp
 2014f18:	dfc00117 	ldw	ra,4(sp)
 2014f1c:	df000017 	ldw	fp,0(sp)
 2014f20:	dec00204 	addi	sp,sp,8
 2014f24:	f800283a 	ret

02014f28 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 2014f28:	defffa04 	addi	sp,sp,-24
 2014f2c:	dfc00515 	stw	ra,20(sp)
 2014f30:	df000415 	stw	fp,16(sp)
 2014f34:	dc000315 	stw	r16,12(sp)
 2014f38:	df000404 	addi	fp,sp,16
 2014f3c:	e13ffe15 	stw	r4,-8(fp)
 2014f40:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2014f44:	8000021e 	bne	r16,zero,2014f50 <_fclose_r+0x28>
    return (0);			/* on NULL */
 2014f48:	0005883a 	mov	r2,zero
 2014f4c:	00003b06 	br	201503c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2014f50:	e0bffe17 	ldw	r2,-8(fp)
 2014f54:	e0bffd15 	stw	r2,-12(fp)
 2014f58:	e0bffd17 	ldw	r2,-12(fp)
 2014f5c:	10000526 	beq	r2,zero,2014f74 <_fclose_r+0x4c>
 2014f60:	e0bffd17 	ldw	r2,-12(fp)
 2014f64:	10800e17 	ldw	r2,56(r2)
 2014f68:	1000021e 	bne	r2,zero,2014f74 <_fclose_r+0x4c>
 2014f6c:	e13ffd17 	ldw	r4,-12(fp)
 2014f70:	200e5980 	call	200e598 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 2014f74:	8080030b 	ldhu	r2,12(r16)
 2014f78:	10bfffcc 	andi	r2,r2,65535
 2014f7c:	10a0001c 	xori	r2,r2,32768
 2014f80:	10a00004 	addi	r2,r2,-32768
 2014f84:	1000021e 	bne	r2,zero,2014f90 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 2014f88:	0005883a 	mov	r2,zero
 2014f8c:	00002b06 	br	201503c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 2014f90:	800b883a 	mov	r5,r16
 2014f94:	e13ffe17 	ldw	r4,-8(fp)
 2014f98:	200de140 	call	200de14 <__sflush_r>
 2014f9c:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 2014fa0:	80800b17 	ldw	r2,44(r16)
 2014fa4:	10000826 	beq	r2,zero,2014fc8 <_fclose_r+0xa0>
 2014fa8:	80800b17 	ldw	r2,44(r16)
 2014fac:	80c00717 	ldw	r3,28(r16)
 2014fb0:	180b883a 	mov	r5,r3
 2014fb4:	e13ffe17 	ldw	r4,-8(fp)
 2014fb8:	103ee83a 	callr	r2
 2014fbc:	1000020e 	bge	r2,zero,2014fc8 <_fclose_r+0xa0>
    r = EOF;
 2014fc0:	00bfffc4 	movi	r2,-1
 2014fc4:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 2014fc8:	8080030b 	ldhu	r2,12(r16)
 2014fcc:	10bfffcc 	andi	r2,r2,65535
 2014fd0:	1080200c 	andi	r2,r2,128
 2014fd4:	10000426 	beq	r2,zero,2014fe8 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 2014fd8:	80800417 	ldw	r2,16(r16)
 2014fdc:	100b883a 	mov	r5,r2
 2014fe0:	e13ffe17 	ldw	r4,-8(fp)
 2014fe4:	200e7b80 	call	200e7b8 <_free_r>
  if (HASUB (fp))
 2014fe8:	80800c17 	ldw	r2,48(r16)
 2014fec:	10000826 	beq	r2,zero,2015010 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2014ff0:	80c00c17 	ldw	r3,48(r16)
 2014ff4:	80801004 	addi	r2,r16,64
 2014ff8:	18800426 	beq	r3,r2,201500c <_fclose_r+0xe4>
 2014ffc:	80800c17 	ldw	r2,48(r16)
 2015000:	100b883a 	mov	r5,r2
 2015004:	e13ffe17 	ldw	r4,-8(fp)
 2015008:	200e7b80 	call	200e7b8 <_free_r>
 201500c:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2015010:	80801117 	ldw	r2,68(r16)
 2015014:	10000526 	beq	r2,zero,201502c <_fclose_r+0x104>
    FREELB (rptr, fp);
 2015018:	80801117 	ldw	r2,68(r16)
 201501c:	100b883a 	mov	r5,r2
 2015020:	e13ffe17 	ldw	r4,-8(fp)
 2015024:	200e7b80 	call	200e7b8 <_free_r>
 2015028:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 201502c:	200e6700 	call	200e670 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2015030:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 2015034:	200e6900 	call	200e690 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 2015038:	e0bffc17 	ldw	r2,-16(fp)
}
 201503c:	e6ffff04 	addi	sp,fp,-4
 2015040:	dfc00217 	ldw	ra,8(sp)
 2015044:	df000117 	ldw	fp,4(sp)
 2015048:	dc000017 	ldw	r16,0(sp)
 201504c:	dec00304 	addi	sp,sp,12
 2015050:	f800283a 	ret

02015054 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2015054:	defffe04 	addi	sp,sp,-8
 2015058:	dfc00115 	stw	ra,4(sp)
 201505c:	df000015 	stw	fp,0(sp)
 2015060:	d839883a 	mov	fp,sp
 2015064:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 2015068:	d0a03017 	ldw	r2,-32576(gp)
 201506c:	180b883a 	mov	r5,r3
 2015070:	1009883a 	mov	r4,r2
 2015074:	2014f280 	call	2014f28 <_fclose_r>
}
 2015078:	e037883a 	mov	sp,fp
 201507c:	dfc00117 	ldw	ra,4(sp)
 2015080:	df000017 	ldw	fp,0(sp)
 2015084:	dec00204 	addi	sp,sp,8
 2015088:	f800283a 	ret

0201508c <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 201508c:	defff804 	addi	sp,sp,-32
 2015090:	dfc00715 	stw	ra,28(sp)
 2015094:	df000615 	stw	fp,24(sp)
 2015098:	df000604 	addi	fp,sp,24
 201509c:	e13ffd15 	stw	r4,-12(fp)
 20150a0:	e17ffe15 	stw	r5,-8(fp)
 20150a4:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 20150a8:	200f71c0 	call	200f71c <__locale_mb_cur_max>
 20150ac:	10800058 	cmpnei	r2,r2,1
 20150b0:	10000a1e 	bne	r2,zero,20150dc <__fputwc+0x50>
 20150b4:	e0bffe17 	ldw	r2,-8(fp)
 20150b8:	0080080e 	bge	zero,r2,20150dc <__fputwc+0x50>
 20150bc:	e0bffe17 	ldw	r2,-8(fp)
 20150c0:	10804008 	cmpgei	r2,r2,256
 20150c4:	1000051e 	bne	r2,zero,20150dc <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 20150c8:	e0bffe17 	ldw	r2,-8(fp)
 20150cc:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 20150d0:	00800044 	movi	r2,1
 20150d4:	e0bffb15 	stw	r2,-20(fp)
 20150d8:	00001406 	br	201512c <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 20150dc:	e0bfff17 	ldw	r2,-4(fp)
 20150e0:	10c01704 	addi	r3,r2,92
 20150e4:	e0bffc04 	addi	r2,fp,-16
 20150e8:	180f883a 	mov	r7,r3
 20150ec:	e1bffe17 	ldw	r6,-8(fp)
 20150f0:	100b883a 	mov	r5,r2
 20150f4:	e13ffd17 	ldw	r4,-12(fp)
 20150f8:	20156c00 	call	20156c0 <_wcrtomb_r>
 20150fc:	e0bffb15 	stw	r2,-20(fp)
 2015100:	e0bffb17 	ldw	r2,-20(fp)
 2015104:	10bfffd8 	cmpnei	r2,r2,-1
 2015108:	1000081e 	bne	r2,zero,201512c <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 201510c:	e0bfff17 	ldw	r2,-4(fp)
 2015110:	1080030b 	ldhu	r2,12(r2)
 2015114:	10801014 	ori	r2,r2,64
 2015118:	1007883a 	mov	r3,r2
 201511c:	e0bfff17 	ldw	r2,-4(fp)
 2015120:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 2015124:	00bfffc4 	movi	r2,-1
 2015128:	00005006 	br	201526c <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 201512c:	e03ffa15 	stw	zero,-24(fp)
 2015130:	00004a06 	br	201525c <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 2015134:	e0bfff17 	ldw	r2,-4(fp)
 2015138:	10800217 	ldw	r2,8(r2)
 201513c:	10ffffc4 	addi	r3,r2,-1
 2015140:	e0bfff17 	ldw	r2,-4(fp)
 2015144:	10c00215 	stw	r3,8(r2)
 2015148:	e0bfff17 	ldw	r2,-4(fp)
 201514c:	10800217 	ldw	r2,8(r2)
 2015150:	10002c0e 	bge	r2,zero,2015204 <__fputwc+0x178>
 2015154:	e0bfff17 	ldw	r2,-4(fp)
 2015158:	10c00217 	ldw	r3,8(r2)
 201515c:	e0bfff17 	ldw	r2,-4(fp)
 2015160:	10800617 	ldw	r2,24(r2)
 2015164:	18801c16 	blt	r3,r2,20151d8 <__fputwc+0x14c>
 2015168:	e0bfff17 	ldw	r2,-4(fp)
 201516c:	10800017 	ldw	r2,0(r2)
 2015170:	e13ffc04 	addi	r4,fp,-16
 2015174:	e0fffa17 	ldw	r3,-24(fp)
 2015178:	20c7883a 	add	r3,r4,r3
 201517c:	18c00003 	ldbu	r3,0(r3)
 2015180:	10c00005 	stb	r3,0(r2)
 2015184:	e0bfff17 	ldw	r2,-4(fp)
 2015188:	10800017 	ldw	r2,0(r2)
 201518c:	10800003 	ldbu	r2,0(r2)
 2015190:	10803fcc 	andi	r2,r2,255
 2015194:	108002a0 	cmpeqi	r2,r2,10
 2015198:	1000091e 	bne	r2,zero,20151c0 <__fputwc+0x134>
 201519c:	e0bfff17 	ldw	r2,-4(fp)
 20151a0:	10800017 	ldw	r2,0(r2)
 20151a4:	11000044 	addi	r4,r2,1
 20151a8:	e0ffff17 	ldw	r3,-4(fp)
 20151ac:	19000015 	stw	r4,0(r3)
 20151b0:	10800003 	ldbu	r2,0(r2)
 20151b4:	10803fcc 	andi	r2,r2,255
 20151b8:	10bfffe0 	cmpeqi	r2,r2,-1
 20151bc:	00002006 	br	2015240 <__fputwc+0x1b4>
 20151c0:	e1bfff17 	ldw	r6,-4(fp)
 20151c4:	01400284 	movi	r5,10
 20151c8:	e13ffd17 	ldw	r4,-12(fp)
 20151cc:	20155180 	call	2015518 <__swbuf_r>
 20151d0:	10bfffe0 	cmpeqi	r2,r2,-1
 20151d4:	00001a06 	br	2015240 <__fputwc+0x1b4>
 20151d8:	e0fffc04 	addi	r3,fp,-16
 20151dc:	e0bffa17 	ldw	r2,-24(fp)
 20151e0:	1885883a 	add	r2,r3,r2
 20151e4:	10800003 	ldbu	r2,0(r2)
 20151e8:	10803fcc 	andi	r2,r2,255
 20151ec:	e1bfff17 	ldw	r6,-4(fp)
 20151f0:	100b883a 	mov	r5,r2
 20151f4:	e13ffd17 	ldw	r4,-12(fp)
 20151f8:	20155180 	call	2015518 <__swbuf_r>
 20151fc:	10bfffe0 	cmpeqi	r2,r2,-1
 2015200:	00000f06 	br	2015240 <__fputwc+0x1b4>
 2015204:	e0bfff17 	ldw	r2,-4(fp)
 2015208:	10800017 	ldw	r2,0(r2)
 201520c:	e13ffc04 	addi	r4,fp,-16
 2015210:	e0fffa17 	ldw	r3,-24(fp)
 2015214:	20c7883a 	add	r3,r4,r3
 2015218:	18c00003 	ldbu	r3,0(r3)
 201521c:	10c00005 	stb	r3,0(r2)
 2015220:	e0bfff17 	ldw	r2,-4(fp)
 2015224:	10800017 	ldw	r2,0(r2)
 2015228:	11000044 	addi	r4,r2,1
 201522c:	e0ffff17 	ldw	r3,-4(fp)
 2015230:	19000015 	stw	r4,0(r3)
 2015234:	10800003 	ldbu	r2,0(r2)
 2015238:	10803fcc 	andi	r2,r2,255
 201523c:	10bfffe0 	cmpeqi	r2,r2,-1
 2015240:	10803fcc 	andi	r2,r2,255
 2015244:	10000226 	beq	r2,zero,2015250 <__fputwc+0x1c4>
      return WEOF;
 2015248:	00bfffc4 	movi	r2,-1
 201524c:	00000706 	br	201526c <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2015250:	e0bffa17 	ldw	r2,-24(fp)
 2015254:	10800044 	addi	r2,r2,1
 2015258:	e0bffa15 	stw	r2,-24(fp)
 201525c:	e0fffa17 	ldw	r3,-24(fp)
 2015260:	e0bffb17 	ldw	r2,-20(fp)
 2015264:	18bfb336 	bltu	r3,r2,2015134 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2015268:	e0bffe17 	ldw	r2,-8(fp)
}
 201526c:	e037883a 	mov	sp,fp
 2015270:	dfc00117 	ldw	ra,4(sp)
 2015274:	df000017 	ldw	fp,0(sp)
 2015278:	dec00204 	addi	sp,sp,8
 201527c:	f800283a 	ret

02015280 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2015280:	defffa04 	addi	sp,sp,-24
 2015284:	dfc00515 	stw	ra,20(sp)
 2015288:	df000415 	stw	fp,16(sp)
 201528c:	df000404 	addi	fp,sp,16
 2015290:	e13ffd15 	stw	r4,-12(fp)
 2015294:	e17ffe15 	stw	r5,-8(fp)
 2015298:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 201529c:	e0bfff17 	ldw	r2,-4(fp)
 20152a0:	1080030b 	ldhu	r2,12(r2)
 20152a4:	10bfffcc 	andi	r2,r2,65535
 20152a8:	1088000c 	andi	r2,r2,8192
 20152ac:	10000b1e 	bne	r2,zero,20152dc <_fputwc_r+0x5c>
 20152b0:	e0bfff17 	ldw	r2,-4(fp)
 20152b4:	1080030b 	ldhu	r2,12(r2)
 20152b8:	10880014 	ori	r2,r2,8192
 20152bc:	1007883a 	mov	r3,r2
 20152c0:	e0bfff17 	ldw	r2,-4(fp)
 20152c4:	10c0030d 	sth	r3,12(r2)
 20152c8:	e0bfff17 	ldw	r2,-4(fp)
 20152cc:	10801917 	ldw	r2,100(r2)
 20152d0:	10c80014 	ori	r3,r2,8192
 20152d4:	e0bfff17 	ldw	r2,-4(fp)
 20152d8:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 20152dc:	e1bfff17 	ldw	r6,-4(fp)
 20152e0:	e17ffe17 	ldw	r5,-8(fp)
 20152e4:	e13ffd17 	ldw	r4,-12(fp)
 20152e8:	201508c0 	call	201508c <__fputwc>
 20152ec:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 20152f0:	e0bffc17 	ldw	r2,-16(fp)
}
 20152f4:	e037883a 	mov	sp,fp
 20152f8:	dfc00117 	ldw	ra,4(sp)
 20152fc:	df000017 	ldw	fp,0(sp)
 2015300:	dec00204 	addi	sp,sp,8
 2015304:	f800283a 	ret

02015308 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2015308:	defffa04 	addi	sp,sp,-24
 201530c:	dfc00515 	stw	ra,20(sp)
 2015310:	df000415 	stw	fp,16(sp)
 2015314:	df000404 	addi	fp,sp,16
 2015318:	e13ffe15 	stw	r4,-8(fp)
 201531c:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2015320:	d0a03017 	ldw	r2,-32576(gp)
 2015324:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2015328:	e0bffc17 	ldw	r2,-16(fp)
 201532c:	e0bffd15 	stw	r2,-12(fp)
 2015330:	e0bffd17 	ldw	r2,-12(fp)
 2015334:	10000526 	beq	r2,zero,201534c <fputwc+0x44>
 2015338:	e0bffd17 	ldw	r2,-12(fp)
 201533c:	10800e17 	ldw	r2,56(r2)
 2015340:	1000021e 	bne	r2,zero,201534c <fputwc+0x44>
 2015344:	e13ffd17 	ldw	r4,-12(fp)
 2015348:	200e5980 	call	200e598 <__sinit>
  return _fputwc_r (reent, wc, fp);
 201534c:	e1bfff17 	ldw	r6,-4(fp)
 2015350:	e17ffe17 	ldw	r5,-8(fp)
 2015354:	e13ffc17 	ldw	r4,-16(fp)
 2015358:	20152800 	call	2015280 <_fputwc_r>
}
 201535c:	e037883a 	mov	sp,fp
 2015360:	dfc00117 	ldw	ra,4(sp)
 2015364:	df000017 	ldw	fp,0(sp)
 2015368:	dec00204 	addi	sp,sp,8
 201536c:	f800283a 	ret

02015370 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2015370:	defffa04 	addi	sp,sp,-24
 2015374:	dfc00515 	stw	ra,20(sp)
 2015378:	df000415 	stw	fp,16(sp)
 201537c:	df000404 	addi	fp,sp,16
 2015380:	e13ffd15 	stw	r4,-12(fp)
 2015384:	e17ffe15 	stw	r5,-8(fp)
 2015388:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 201538c:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2015390:	e17fff17 	ldw	r5,-4(fp)
 2015394:	e13ffe17 	ldw	r4,-8(fp)
 2015398:	20167700 	call	2016770 <fstat>
 201539c:	e0bffc15 	stw	r2,-16(fp)
 20153a0:	e0bffc17 	ldw	r2,-16(fp)
 20153a4:	10bfffd8 	cmpnei	r2,r2,-1
 20153a8:	1000051e 	bne	r2,zero,20153c0 <_fstat_r+0x50>
 20153ac:	d0a79e17 	ldw	r2,-24968(gp)
 20153b0:	10000326 	beq	r2,zero,20153c0 <_fstat_r+0x50>
    ptr->_errno = errno;
 20153b4:	d0e79e17 	ldw	r3,-24968(gp)
 20153b8:	e0bffd17 	ldw	r2,-12(fp)
 20153bc:	10c00015 	stw	r3,0(r2)
  return ret;
 20153c0:	e0bffc17 	ldw	r2,-16(fp)
}
 20153c4:	e037883a 	mov	sp,fp
 20153c8:	dfc00117 	ldw	ra,4(sp)
 20153cc:	df000017 	ldw	fp,0(sp)
 20153d0:	dec00204 	addi	sp,sp,8
 20153d4:	f800283a 	ret

020153d8 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 20153d8:	defffb04 	addi	sp,sp,-20
 20153dc:	dfc00415 	stw	ra,16(sp)
 20153e0:	df000315 	stw	fp,12(sp)
 20153e4:	df000304 	addi	fp,sp,12
 20153e8:	e13ffe15 	stw	r4,-8(fp)
 20153ec:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 20153f0:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 20153f4:	e13fff17 	ldw	r4,-4(fp)
 20153f8:	201685c0 	call	201685c <isatty>
 20153fc:	e0bffd15 	stw	r2,-12(fp)
 2015400:	e0bffd17 	ldw	r2,-12(fp)
 2015404:	10bfffd8 	cmpnei	r2,r2,-1
 2015408:	1000051e 	bne	r2,zero,2015420 <_isatty_r+0x48>
 201540c:	d0a79e17 	ldw	r2,-24968(gp)
 2015410:	10000326 	beq	r2,zero,2015420 <_isatty_r+0x48>
    ptr->_errno = errno;
 2015414:	d0e79e17 	ldw	r3,-24968(gp)
 2015418:	e0bffe17 	ldw	r2,-8(fp)
 201541c:	10c00015 	stw	r3,0(r2)
  return ret;
 2015420:	e0bffd17 	ldw	r2,-12(fp)
}
 2015424:	e037883a 	mov	sp,fp
 2015428:	dfc00117 	ldw	ra,4(sp)
 201542c:	df000017 	ldw	fp,0(sp)
 2015430:	dec00204 	addi	sp,sp,8
 2015434:	f800283a 	ret

02015438 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2015438:	defff904 	addi	sp,sp,-28
 201543c:	dfc00615 	stw	ra,24(sp)
 2015440:	df000515 	stw	fp,20(sp)
 2015444:	df000504 	addi	fp,sp,20
 2015448:	e13ffc15 	stw	r4,-16(fp)
 201544c:	e17ffd15 	stw	r5,-12(fp)
 2015450:	e1bffe15 	stw	r6,-8(fp)
 2015454:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2015458:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 201545c:	e1bfff17 	ldw	r6,-4(fp)
 2015460:	e17ffe17 	ldw	r5,-8(fp)
 2015464:	e13ffd17 	ldw	r4,-12(fp)
 2015468:	2016a280 	call	2016a28 <lseek>
 201546c:	e0bffb15 	stw	r2,-20(fp)
 2015470:	e0bffb17 	ldw	r2,-20(fp)
 2015474:	10bfffd8 	cmpnei	r2,r2,-1
 2015478:	1000051e 	bne	r2,zero,2015490 <_lseek_r+0x58>
 201547c:	d0a79e17 	ldw	r2,-24968(gp)
 2015480:	10000326 	beq	r2,zero,2015490 <_lseek_r+0x58>
    ptr->_errno = errno;
 2015484:	d0e79e17 	ldw	r3,-24968(gp)
 2015488:	e0bffc17 	ldw	r2,-16(fp)
 201548c:	10c00015 	stw	r3,0(r2)
  return ret;
 2015490:	e0bffb17 	ldw	r2,-20(fp)
}
 2015494:	e037883a 	mov	sp,fp
 2015498:	dfc00117 	ldw	ra,4(sp)
 201549c:	df000017 	ldw	fp,0(sp)
 20154a0:	dec00204 	addi	sp,sp,8
 20154a4:	f800283a 	ret

020154a8 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 20154a8:	defff904 	addi	sp,sp,-28
 20154ac:	dfc00615 	stw	ra,24(sp)
 20154b0:	df000515 	stw	fp,20(sp)
 20154b4:	df000504 	addi	fp,sp,20
 20154b8:	e13ffc15 	stw	r4,-16(fp)
 20154bc:	e17ffd15 	stw	r5,-12(fp)
 20154c0:	e1bffe15 	stw	r6,-8(fp)
 20154c4:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 20154c8:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 20154cc:	e1bfff17 	ldw	r6,-4(fp)
 20154d0:	e17ffe17 	ldw	r5,-8(fp)
 20154d4:	e13ffd17 	ldw	r4,-12(fp)
 20154d8:	2016bf40 	call	2016bf4 <read>
 20154dc:	e0bffb15 	stw	r2,-20(fp)
 20154e0:	e0bffb17 	ldw	r2,-20(fp)
 20154e4:	10bfffd8 	cmpnei	r2,r2,-1
 20154e8:	1000051e 	bne	r2,zero,2015500 <_read_r+0x58>
 20154ec:	d0a79e17 	ldw	r2,-24968(gp)
 20154f0:	10000326 	beq	r2,zero,2015500 <_read_r+0x58>
    ptr->_errno = errno;
 20154f4:	d0e79e17 	ldw	r3,-24968(gp)
 20154f8:	e0bffc17 	ldw	r2,-16(fp)
 20154fc:	10c00015 	stw	r3,0(r2)
  return ret;
 2015500:	e0bffb17 	ldw	r2,-20(fp)
}
 2015504:	e037883a 	mov	sp,fp
 2015508:	dfc00117 	ldw	ra,4(sp)
 201550c:	df000017 	ldw	fp,0(sp)
 2015510:	dec00204 	addi	sp,sp,8
 2015514:	f800283a 	ret

02015518 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2015518:	defff904 	addi	sp,sp,-28
 201551c:	dfc00615 	stw	ra,24(sp)
 2015520:	df000515 	stw	fp,20(sp)
 2015524:	dc800415 	stw	r18,16(sp)
 2015528:	dc400315 	stw	r17,12(sp)
 201552c:	dc000215 	stw	r16,8(sp)
 2015530:	df000504 	addi	fp,sp,20
 2015534:	e13ffc15 	stw	r4,-16(fp)
 2015538:	2825883a 	mov	r18,r5
 201553c:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2015540:	e0bffc17 	ldw	r2,-16(fp)
 2015544:	e0bffb15 	stw	r2,-20(fp)
 2015548:	e0bffb17 	ldw	r2,-20(fp)
 201554c:	10000526 	beq	r2,zero,2015564 <__swbuf_r+0x4c>
 2015550:	e0bffb17 	ldw	r2,-20(fp)
 2015554:	10800e17 	ldw	r2,56(r2)
 2015558:	1000021e 	bne	r2,zero,2015564 <__swbuf_r+0x4c>
 201555c:	e13ffb17 	ldw	r4,-20(fp)
 2015560:	200e5980 	call	200e598 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2015564:	80800617 	ldw	r2,24(r16)
 2015568:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 201556c:	8080030b 	ldhu	r2,12(r16)
 2015570:	10bfffcc 	andi	r2,r2,65535
 2015574:	1080020c 	andi	r2,r2,8
 2015578:	10000226 	beq	r2,zero,2015584 <__swbuf_r+0x6c>
 201557c:	80800417 	ldw	r2,16(r16)
 2015580:	1000061e 	bne	r2,zero,201559c <__swbuf_r+0x84>
 2015584:	800b883a 	mov	r5,r16
 2015588:	e13ffc17 	ldw	r4,-16(fp)
 201558c:	200bd480 	call	200bd48 <__swsetup_r>
 2015590:	10000226 	beq	r2,zero,201559c <__swbuf_r+0x84>
    return EOF;
 2015594:	00bfffc4 	movi	r2,-1
 2015598:	00003106 	br	2015660 <__swbuf_r+0x148>
  c = (unsigned char) c;
 201559c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 20155a0:	8080030b 	ldhu	r2,12(r16)
 20155a4:	10bfffcc 	andi	r2,r2,65535
 20155a8:	1088000c 	andi	r2,r2,8192
 20155ac:	1000071e 	bne	r2,zero,20155cc <__swbuf_r+0xb4>
 20155b0:	8080030b 	ldhu	r2,12(r16)
 20155b4:	10880014 	ori	r2,r2,8192
 20155b8:	8080030d 	sth	r2,12(r16)
 20155bc:	80c01917 	ldw	r3,100(r16)
 20155c0:	00b7ffc4 	movi	r2,-8193
 20155c4:	1884703a 	and	r2,r3,r2
 20155c8:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 20155cc:	80800017 	ldw	r2,0(r16)
 20155d0:	1007883a 	mov	r3,r2
 20155d4:	80800417 	ldw	r2,16(r16)
 20155d8:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 20155dc:	80800517 	ldw	r2,20(r16)
 20155e0:	88800716 	blt	r17,r2,2015600 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 20155e4:	800b883a 	mov	r5,r16
 20155e8:	e13ffc17 	ldw	r4,-16(fp)
 20155ec:	200e1180 	call	200e118 <_fflush_r>
 20155f0:	10000226 	beq	r2,zero,20155fc <__swbuf_r+0xe4>
	return EOF;
 20155f4:	00bfffc4 	movi	r2,-1
 20155f8:	00001906 	br	2015660 <__swbuf_r+0x148>
      n = 0;
 20155fc:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 2015600:	80800217 	ldw	r2,8(r16)
 2015604:	10bfffc4 	addi	r2,r2,-1
 2015608:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 201560c:	80800017 	ldw	r2,0(r16)
 2015610:	10c00044 	addi	r3,r2,1
 2015614:	80c00015 	stw	r3,0(r16)
 2015618:	9007883a 	mov	r3,r18
 201561c:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2015620:	8c400044 	addi	r17,r17,1
 2015624:	80800517 	ldw	r2,20(r16)
 2015628:	88800626 	beq	r17,r2,2015644 <__swbuf_r+0x12c>
 201562c:	8080030b 	ldhu	r2,12(r16)
 2015630:	10bfffcc 	andi	r2,r2,65535
 2015634:	1080004c 	andi	r2,r2,1
 2015638:	10000826 	beq	r2,zero,201565c <__swbuf_r+0x144>
 201563c:	90800298 	cmpnei	r2,r18,10
 2015640:	1000061e 	bne	r2,zero,201565c <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2015644:	800b883a 	mov	r5,r16
 2015648:	e13ffc17 	ldw	r4,-16(fp)
 201564c:	200e1180 	call	200e118 <_fflush_r>
 2015650:	10000226 	beq	r2,zero,201565c <__swbuf_r+0x144>
      return EOF;
 2015654:	00bfffc4 	movi	r2,-1
 2015658:	00000106 	br	2015660 <__swbuf_r+0x148>
  return c;
 201565c:	9005883a 	mov	r2,r18
}
 2015660:	e6fffd04 	addi	sp,fp,-12
 2015664:	dfc00417 	ldw	ra,16(sp)
 2015668:	df000317 	ldw	fp,12(sp)
 201566c:	dc800217 	ldw	r18,8(sp)
 2015670:	dc400117 	ldw	r17,4(sp)
 2015674:	dc000017 	ldw	r16,0(sp)
 2015678:	dec00504 	addi	sp,sp,20
 201567c:	f800283a 	ret

02015680 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2015680:	defffe04 	addi	sp,sp,-8
 2015684:	dfc00115 	stw	ra,4(sp)
 2015688:	df000015 	stw	fp,0(sp)
 201568c:	d839883a 	mov	fp,sp
 2015690:	2007883a 	mov	r3,r4
 2015694:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2015698:	d0a03017 	ldw	r2,-32576(gp)
 201569c:	200d883a 	mov	r6,r4
 20156a0:	180b883a 	mov	r5,r3
 20156a4:	1009883a 	mov	r4,r2
 20156a8:	20155180 	call	2015518 <__swbuf_r>
}
 20156ac:	e037883a 	mov	sp,fp
 20156b0:	dfc00117 	ldw	ra,4(sp)
 20156b4:	df000017 	ldw	fp,0(sp)
 20156b8:	dec00204 	addi	sp,sp,8
 20156bc:	f800283a 	ret

020156c0 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 20156c0:	defff404 	addi	sp,sp,-48
 20156c4:	dfc00b15 	stw	ra,44(sp)
 20156c8:	df000a15 	stw	fp,40(sp)
 20156cc:	dc000915 	stw	r16,36(sp)
 20156d0:	df000a04 	addi	fp,sp,40
 20156d4:	e13ffb15 	stw	r4,-20(fp)
 20156d8:	e17ffc15 	stw	r5,-16(fp)
 20156dc:	e1bffd15 	stw	r6,-12(fp)
 20156e0:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 20156e4:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 20156e8:	e0bffc17 	ldw	r2,-16(fp)
 20156ec:	10000d1e 	bne	r2,zero,2015724 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 20156f0:	d4203517 	ldw	r16,-32556(gp)
 20156f4:	200f6f80 	call	200f6f8 <__locale_charset>
 20156f8:	1009883a 	mov	r4,r2
 20156fc:	e0fff804 	addi	r3,fp,-32
 2015700:	e0bffe17 	ldw	r2,-8(fp)
 2015704:	d8800015 	stw	r2,0(sp)
 2015708:	200f883a 	mov	r7,r4
 201570c:	000d883a 	mov	r6,zero
 2015710:	180b883a 	mov	r5,r3
 2015714:	e13ffb17 	ldw	r4,-20(fp)
 2015718:	803ee83a 	callr	r16
 201571c:	e0bff715 	stw	r2,-36(fp)
 2015720:	00000b06 	br	2015750 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2015724:	d4203517 	ldw	r16,-32556(gp)
 2015728:	200f6f80 	call	200f6f8 <__locale_charset>
 201572c:	1007883a 	mov	r3,r2
 2015730:	e0bffe17 	ldw	r2,-8(fp)
 2015734:	d8800015 	stw	r2,0(sp)
 2015738:	180f883a 	mov	r7,r3
 201573c:	e1bffd17 	ldw	r6,-12(fp)
 2015740:	e17ffc17 	ldw	r5,-16(fp)
 2015744:	e13ffb17 	ldw	r4,-20(fp)
 2015748:	803ee83a 	callr	r16
 201574c:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2015750:	e0bff717 	ldw	r2,-36(fp)
 2015754:	10bfffd8 	cmpnei	r2,r2,-1
 2015758:	1000071e 	bne	r2,zero,2015778 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 201575c:	e0bffe17 	ldw	r2,-8(fp)
 2015760:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2015764:	e0bffb17 	ldw	r2,-20(fp)
 2015768:	00c02284 	movi	r3,138
 201576c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2015770:	00bfffc4 	movi	r2,-1
 2015774:	00000106 	br	201577c <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2015778:	e0bff717 	ldw	r2,-36(fp)
}
 201577c:	e6ffff04 	addi	sp,fp,-4
 2015780:	dfc00217 	ldw	ra,8(sp)
 2015784:	df000117 	ldw	fp,4(sp)
 2015788:	dc000017 	ldw	r16,0(sp)
 201578c:	dec00304 	addi	sp,sp,12
 2015790:	f800283a 	ret

02015794 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2015794:	defff404 	addi	sp,sp,-48
 2015798:	dfc00b15 	stw	ra,44(sp)
 201579c:	df000a15 	stw	fp,40(sp)
 20157a0:	dc000915 	stw	r16,36(sp)
 20157a4:	df000a04 	addi	fp,sp,40
 20157a8:	e13ffc15 	stw	r4,-16(fp)
 20157ac:	e17ffd15 	stw	r5,-12(fp)
 20157b0:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 20157b4:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 20157b8:	d0a03017 	ldw	r2,-32576(gp)
 20157bc:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 20157c0:	e0bffc17 	ldw	r2,-16(fp)
 20157c4:	10000d1e 	bne	r2,zero,20157fc <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 20157c8:	d4203517 	ldw	r16,-32556(gp)
 20157cc:	200f6f80 	call	200f6f8 <__locale_charset>
 20157d0:	1009883a 	mov	r4,r2
 20157d4:	e0fff904 	addi	r3,fp,-28
 20157d8:	e0bffe17 	ldw	r2,-8(fp)
 20157dc:	d8800015 	stw	r2,0(sp)
 20157e0:	200f883a 	mov	r7,r4
 20157e4:	000d883a 	mov	r6,zero
 20157e8:	180b883a 	mov	r5,r3
 20157ec:	e13ff817 	ldw	r4,-32(fp)
 20157f0:	803ee83a 	callr	r16
 20157f4:	e0bff715 	stw	r2,-36(fp)
 20157f8:	00000b06 	br	2015828 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 20157fc:	d4203517 	ldw	r16,-32556(gp)
 2015800:	200f6f80 	call	200f6f8 <__locale_charset>
 2015804:	1007883a 	mov	r3,r2
 2015808:	e0bffe17 	ldw	r2,-8(fp)
 201580c:	d8800015 	stw	r2,0(sp)
 2015810:	180f883a 	mov	r7,r3
 2015814:	e1bffd17 	ldw	r6,-12(fp)
 2015818:	e17ffc17 	ldw	r5,-16(fp)
 201581c:	e13ff817 	ldw	r4,-32(fp)
 2015820:	803ee83a 	callr	r16
 2015824:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2015828:	e0bff717 	ldw	r2,-36(fp)
 201582c:	10bfffd8 	cmpnei	r2,r2,-1
 2015830:	1000071e 	bne	r2,zero,2015850 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2015834:	e0bffe17 	ldw	r2,-8(fp)
 2015838:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 201583c:	e0bff817 	ldw	r2,-32(fp)
 2015840:	00c02284 	movi	r3,138
 2015844:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2015848:	00bfffc4 	movi	r2,-1
 201584c:	00000106 	br	2015854 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2015850:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2015854:	e6ffff04 	addi	sp,fp,-4
 2015858:	dfc00217 	ldw	ra,8(sp)
 201585c:	df000117 	ldw	fp,4(sp)
 2015860:	dc000017 	ldw	r16,0(sp)
 2015864:	dec00304 	addi	sp,sp,12
 2015868:	f800283a 	ret

0201586c <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 201586c:	defff804 	addi	sp,sp,-32
 2015870:	dfc00715 	stw	ra,28(sp)
 2015874:	df000615 	stw	fp,24(sp)
 2015878:	dc000515 	stw	r16,20(sp)
 201587c:	df000604 	addi	fp,sp,24
 2015880:	e13ffb15 	stw	r4,-20(fp)
 2015884:	e17ffc15 	stw	r5,-16(fp)
 2015888:	e1bffd15 	stw	r6,-12(fp)
 201588c:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 2015890:	d4203517 	ldw	r16,-32556(gp)
 2015894:	200f6f80 	call	200f6f8 <__locale_charset>
 2015898:	1007883a 	mov	r3,r2
 201589c:	e0bffe17 	ldw	r2,-8(fp)
 20158a0:	d8800015 	stw	r2,0(sp)
 20158a4:	180f883a 	mov	r7,r3
 20158a8:	e1bffd17 	ldw	r6,-12(fp)
 20158ac:	e17ffc17 	ldw	r5,-16(fp)
 20158b0:	e13ffb17 	ldw	r4,-20(fp)
 20158b4:	803ee83a 	callr	r16
}
 20158b8:	e6ffff04 	addi	sp,fp,-4
 20158bc:	dfc00217 	ldw	ra,8(sp)
 20158c0:	df000117 	ldw	fp,4(sp)
 20158c4:	dc000017 	ldw	r16,0(sp)
 20158c8:	dec00304 	addi	sp,sp,12
 20158cc:	f800283a 	ret

020158d0 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 20158d0:	defffa04 	addi	sp,sp,-24
 20158d4:	df000515 	stw	fp,20(sp)
 20158d8:	df000504 	addi	fp,sp,20
 20158dc:	e13ffc15 	stw	r4,-16(fp)
 20158e0:	e17ffd15 	stw	r5,-12(fp)
 20158e4:	e1bffe15 	stw	r6,-8(fp)
 20158e8:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 20158ec:	e0bffe17 	ldw	r2,-8(fp)
 20158f0:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 20158f4:	e0bffd17 	ldw	r2,-12(fp)
 20158f8:	1000021e 	bne	r2,zero,2015904 <__ascii_wctomb+0x34>
    return 0;
 20158fc:	0005883a 	mov	r2,zero
 2015900:	00000d06 	br	2015938 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 2015904:	e0bffb17 	ldw	r2,-20(fp)
 2015908:	10804030 	cmpltui	r2,r2,256
 201590c:	1000051e 	bne	r2,zero,2015924 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 2015910:	e0bffc17 	ldw	r2,-16(fp)
 2015914:	00c02284 	movi	r3,138
 2015918:	10c00015 	stw	r3,0(r2)
      return -1;
 201591c:	00bfffc4 	movi	r2,-1
 2015920:	00000506 	br	2015938 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 2015924:	e0bffb17 	ldw	r2,-20(fp)
 2015928:	1007883a 	mov	r3,r2
 201592c:	e0bffd17 	ldw	r2,-12(fp)
 2015930:	10c00005 	stb	r3,0(r2)
  return 1;
 2015934:	00800044 	movi	r2,1
}
 2015938:	e037883a 	mov	sp,fp
 201593c:	df000017 	ldw	fp,0(sp)
 2015940:	dec00104 	addi	sp,sp,4
 2015944:	f800283a 	ret

02015948 <__udivdi3>:
 2015948:	defff504 	addi	sp,sp,-44
 201594c:	dcc00415 	stw	r19,16(sp)
 2015950:	dc000115 	stw	r16,4(sp)
 2015954:	dfc00a15 	stw	ra,40(sp)
 2015958:	df000915 	stw	fp,36(sp)
 201595c:	ddc00815 	stw	r23,32(sp)
 2015960:	dd800715 	stw	r22,28(sp)
 2015964:	dd400615 	stw	r21,24(sp)
 2015968:	dd000515 	stw	r20,20(sp)
 201596c:	dc800315 	stw	r18,12(sp)
 2015970:	dc400215 	stw	r17,8(sp)
 2015974:	2027883a 	mov	r19,r4
 2015978:	2821883a 	mov	r16,r5
 201597c:	3800411e 	bne	r7,zero,2015a84 <__udivdi3+0x13c>
 2015980:	3023883a 	mov	r17,r6
 2015984:	2025883a 	mov	r18,r4
 2015988:	2980522e 	bgeu	r5,r6,2015ad4 <__udivdi3+0x18c>
 201598c:	00bfffd4 	movui	r2,65535
 2015990:	282d883a 	mov	r22,r5
 2015994:	1180a836 	bltu	r2,r6,2015c38 <__udivdi3+0x2f0>
 2015998:	00803fc4 	movi	r2,255
 201599c:	1185803a 	cmpltu	r2,r2,r6
 20159a0:	100490fa 	slli	r2,r2,3
 20159a4:	3086d83a 	srl	r3,r6,r2
 20159a8:	010080b4 	movhi	r4,514
 20159ac:	21092204 	addi	r4,r4,9352
 20159b0:	20c7883a 	add	r3,r4,r3
 20159b4:	18c00003 	ldbu	r3,0(r3)
 20159b8:	1885883a 	add	r2,r3,r2
 20159bc:	00c00804 	movi	r3,32
 20159c0:	1887c83a 	sub	r3,r3,r2
 20159c4:	18000526 	beq	r3,zero,20159dc <__udivdi3+0x94>
 20159c8:	80e0983a 	sll	r16,r16,r3
 20159cc:	9884d83a 	srl	r2,r19,r2
 20159d0:	30e2983a 	sll	r17,r6,r3
 20159d4:	98e4983a 	sll	r18,r19,r3
 20159d8:	142cb03a 	or	r22,r2,r16
 20159dc:	882ad43a 	srli	r21,r17,16
 20159e0:	b009883a 	mov	r4,r22
 20159e4:	8d3fffcc 	andi	r20,r17,65535
 20159e8:	a80b883a 	mov	r5,r21
 20159ec:	20069fc0 	call	20069fc <__umodsi3>
 20159f0:	b009883a 	mov	r4,r22
 20159f4:	a80b883a 	mov	r5,r21
 20159f8:	1027883a 	mov	r19,r2
 20159fc:	20069980 	call	2006998 <__udivsi3>
 2015a00:	102d883a 	mov	r22,r2
 2015a04:	9826943a 	slli	r19,r19,16
 2015a08:	9004d43a 	srli	r2,r18,16
 2015a0c:	a5a1383a 	mul	r16,r20,r22
 2015a10:	14c4b03a 	or	r2,r2,r19
 2015a14:	1400052e 	bgeu	r2,r16,2015a2c <__udivdi3+0xe4>
 2015a18:	1445883a 	add	r2,r2,r17
 2015a1c:	b0ffffc4 	addi	r3,r22,-1
 2015a20:	14400136 	bltu	r2,r17,2015a28 <__udivdi3+0xe0>
 2015a24:	14012336 	bltu	r2,r16,2015eb4 <__udivdi3+0x56c>
 2015a28:	182d883a 	mov	r22,r3
 2015a2c:	1421c83a 	sub	r16,r2,r16
 2015a30:	a80b883a 	mov	r5,r21
 2015a34:	8009883a 	mov	r4,r16
 2015a38:	20069fc0 	call	20069fc <__umodsi3>
 2015a3c:	1027883a 	mov	r19,r2
 2015a40:	a80b883a 	mov	r5,r21
 2015a44:	8009883a 	mov	r4,r16
 2015a48:	20069980 	call	2006998 <__udivsi3>
 2015a4c:	9826943a 	slli	r19,r19,16
 2015a50:	a0a9383a 	mul	r20,r20,r2
 2015a54:	94bfffcc 	andi	r18,r18,65535
 2015a58:	94e4b03a 	or	r18,r18,r19
 2015a5c:	9500052e 	bgeu	r18,r20,2015a74 <__udivdi3+0x12c>
 2015a60:	8ca5883a 	add	r18,r17,r18
 2015a64:	10ffffc4 	addi	r3,r2,-1
 2015a68:	9440f136 	bltu	r18,r17,2015e30 <__udivdi3+0x4e8>
 2015a6c:	9500f02e 	bgeu	r18,r20,2015e30 <__udivdi3+0x4e8>
 2015a70:	10bfff84 	addi	r2,r2,-2
 2015a74:	b00c943a 	slli	r6,r22,16
 2015a78:	0007883a 	mov	r3,zero
 2015a7c:	3084b03a 	or	r2,r6,r2
 2015a80:	00005906 	br	2015be8 <__udivdi3+0x2a0>
 2015a84:	29c05636 	bltu	r5,r7,2015be0 <__udivdi3+0x298>
 2015a88:	00bfffd4 	movui	r2,65535
 2015a8c:	11c0622e 	bgeu	r2,r7,2015c18 <__udivdi3+0x2d0>
 2015a90:	00804034 	movhi	r2,256
 2015a94:	10bfffc4 	addi	r2,r2,-1
 2015a98:	11c0ee36 	bltu	r2,r7,2015e54 <__udivdi3+0x50c>
 2015a9c:	00800404 	movi	r2,16
 2015aa0:	3886d83a 	srl	r3,r7,r2
 2015aa4:	010080b4 	movhi	r4,514
 2015aa8:	21092204 	addi	r4,r4,9352
 2015aac:	20c7883a 	add	r3,r4,r3
 2015ab0:	18c00003 	ldbu	r3,0(r3)
 2015ab4:	05400804 	movi	r21,32
 2015ab8:	1885883a 	add	r2,r3,r2
 2015abc:	a8abc83a 	sub	r21,r21,r2
 2015ac0:	a800621e 	bne	r21,zero,2015c4c <__udivdi3+0x304>
 2015ac4:	3c00e936 	bltu	r7,r16,2015e6c <__udivdi3+0x524>
 2015ac8:	9985403a 	cmpgeu	r2,r19,r6
 2015acc:	0007883a 	mov	r3,zero
 2015ad0:	00004506 	br	2015be8 <__udivdi3+0x2a0>
 2015ad4:	3000041e 	bne	r6,zero,2015ae8 <__udivdi3+0x1a0>
 2015ad8:	000b883a 	mov	r5,zero
 2015adc:	01000044 	movi	r4,1
 2015ae0:	20069980 	call	2006998 <__udivsi3>
 2015ae4:	1023883a 	mov	r17,r2
 2015ae8:	00bfffd4 	movui	r2,65535
 2015aec:	14404e2e 	bgeu	r2,r17,2015c28 <__udivdi3+0x2e0>
 2015af0:	00804034 	movhi	r2,256
 2015af4:	10bfffc4 	addi	r2,r2,-1
 2015af8:	1440d836 	bltu	r2,r17,2015e5c <__udivdi3+0x514>
 2015afc:	00800404 	movi	r2,16
 2015b00:	8886d83a 	srl	r3,r17,r2
 2015b04:	010080b4 	movhi	r4,514
 2015b08:	21092204 	addi	r4,r4,9352
 2015b0c:	20c7883a 	add	r3,r4,r3
 2015b10:	18c00003 	ldbu	r3,0(r3)
 2015b14:	1885883a 	add	r2,r3,r2
 2015b18:	00c00804 	movi	r3,32
 2015b1c:	1887c83a 	sub	r3,r3,r2
 2015b20:	18008f1e 	bne	r3,zero,2015d60 <__udivdi3+0x418>
 2015b24:	882ad43a 	srli	r21,r17,16
 2015b28:	8461c83a 	sub	r16,r16,r17
 2015b2c:	8d3fffcc 	andi	r20,r17,65535
 2015b30:	00c00044 	movi	r3,1
 2015b34:	8009883a 	mov	r4,r16
 2015b38:	a80b883a 	mov	r5,r21
 2015b3c:	d8c00015 	stw	r3,0(sp)
 2015b40:	20069fc0 	call	20069fc <__umodsi3>
 2015b44:	8009883a 	mov	r4,r16
 2015b48:	a80b883a 	mov	r5,r21
 2015b4c:	1027883a 	mov	r19,r2
 2015b50:	20069980 	call	2006998 <__udivsi3>
 2015b54:	9826943a 	slli	r19,r19,16
 2015b58:	9008d43a 	srli	r4,r18,16
 2015b5c:	1521383a 	mul	r16,r2,r20
 2015b60:	102d883a 	mov	r22,r2
 2015b64:	24c8b03a 	or	r4,r4,r19
 2015b68:	d8c00017 	ldw	r3,0(sp)
 2015b6c:	2400052e 	bgeu	r4,r16,2015b84 <__udivdi3+0x23c>
 2015b70:	2449883a 	add	r4,r4,r17
 2015b74:	b0bfffc4 	addi	r2,r22,-1
 2015b78:	24400136 	bltu	r4,r17,2015b80 <__udivdi3+0x238>
 2015b7c:	2400ca36 	bltu	r4,r16,2015ea8 <__udivdi3+0x560>
 2015b80:	102d883a 	mov	r22,r2
 2015b84:	2421c83a 	sub	r16,r4,r16
 2015b88:	a80b883a 	mov	r5,r21
 2015b8c:	8009883a 	mov	r4,r16
 2015b90:	d8c00015 	stw	r3,0(sp)
 2015b94:	20069fc0 	call	20069fc <__umodsi3>
 2015b98:	1027883a 	mov	r19,r2
 2015b9c:	a80b883a 	mov	r5,r21
 2015ba0:	8009883a 	mov	r4,r16
 2015ba4:	20069980 	call	2006998 <__udivsi3>
 2015ba8:	9826943a 	slli	r19,r19,16
 2015bac:	1529383a 	mul	r20,r2,r20
 2015bb0:	94bfffcc 	andi	r18,r18,65535
 2015bb4:	94e4b03a 	or	r18,r18,r19
 2015bb8:	d8c00017 	ldw	r3,0(sp)
 2015bbc:	9500052e 	bgeu	r18,r20,2015bd4 <__udivdi3+0x28c>
 2015bc0:	8ca5883a 	add	r18,r17,r18
 2015bc4:	113fffc4 	addi	r4,r2,-1
 2015bc8:	94409736 	bltu	r18,r17,2015e28 <__udivdi3+0x4e0>
 2015bcc:	9500962e 	bgeu	r18,r20,2015e28 <__udivdi3+0x4e0>
 2015bd0:	10bfff84 	addi	r2,r2,-2
 2015bd4:	b00c943a 	slli	r6,r22,16
 2015bd8:	3084b03a 	or	r2,r6,r2
 2015bdc:	00000206 	br	2015be8 <__udivdi3+0x2a0>
 2015be0:	0007883a 	mov	r3,zero
 2015be4:	0005883a 	mov	r2,zero
 2015be8:	dfc00a17 	ldw	ra,40(sp)
 2015bec:	df000917 	ldw	fp,36(sp)
 2015bf0:	ddc00817 	ldw	r23,32(sp)
 2015bf4:	dd800717 	ldw	r22,28(sp)
 2015bf8:	dd400617 	ldw	r21,24(sp)
 2015bfc:	dd000517 	ldw	r20,20(sp)
 2015c00:	dcc00417 	ldw	r19,16(sp)
 2015c04:	dc800317 	ldw	r18,12(sp)
 2015c08:	dc400217 	ldw	r17,8(sp)
 2015c0c:	dc000117 	ldw	r16,4(sp)
 2015c10:	dec00b04 	addi	sp,sp,44
 2015c14:	f800283a 	ret
 2015c18:	00803fc4 	movi	r2,255
 2015c1c:	11c5803a 	cmpltu	r2,r2,r7
 2015c20:	100490fa 	slli	r2,r2,3
 2015c24:	003f9e06 	br	2015aa0 <__udivdi3+0x158>
 2015c28:	00803fc4 	movi	r2,255
 2015c2c:	1445803a 	cmpltu	r2,r2,r17
 2015c30:	100490fa 	slli	r2,r2,3
 2015c34:	003fb206 	br	2015b00 <__udivdi3+0x1b8>
 2015c38:	00804034 	movhi	r2,256
 2015c3c:	10bfffc4 	addi	r2,r2,-1
 2015c40:	11808836 	bltu	r2,r6,2015e64 <__udivdi3+0x51c>
 2015c44:	00800404 	movi	r2,16
 2015c48:	003f5606 	br	20159a4 <__udivdi3+0x5c>
 2015c4c:	30aed83a 	srl	r23,r6,r2
 2015c50:	3d4e983a 	sll	r7,r7,r21
 2015c54:	80acd83a 	srl	r22,r16,r2
 2015c58:	9884d83a 	srl	r2,r19,r2
 2015c5c:	3deeb03a 	or	r23,r7,r23
 2015c60:	b824d43a 	srli	r18,r23,16
 2015c64:	8560983a 	sll	r16,r16,r21
 2015c68:	b009883a 	mov	r4,r22
 2015c6c:	900b883a 	mov	r5,r18
 2015c70:	3568983a 	sll	r20,r6,r21
 2015c74:	1420b03a 	or	r16,r2,r16
 2015c78:	20069fc0 	call	20069fc <__umodsi3>
 2015c7c:	b009883a 	mov	r4,r22
 2015c80:	900b883a 	mov	r5,r18
 2015c84:	1023883a 	mov	r17,r2
 2015c88:	20069980 	call	2006998 <__udivsi3>
 2015c8c:	8808943a 	slli	r4,r17,16
 2015c90:	bf3fffcc 	andi	fp,r23,65535
 2015c94:	8006d43a 	srli	r3,r16,16
 2015c98:	e0a3383a 	mul	r17,fp,r2
 2015c9c:	100d883a 	mov	r6,r2
 2015ca0:	1906b03a 	or	r3,r3,r4
 2015ca4:	1c40042e 	bgeu	r3,r17,2015cb8 <__udivdi3+0x370>
 2015ca8:	1dc7883a 	add	r3,r3,r23
 2015cac:	10bfffc4 	addi	r2,r2,-1
 2015cb0:	1dc0752e 	bgeu	r3,r23,2015e88 <__udivdi3+0x540>
 2015cb4:	100d883a 	mov	r6,r2
 2015cb8:	1c63c83a 	sub	r17,r3,r17
 2015cbc:	900b883a 	mov	r5,r18
 2015cc0:	8809883a 	mov	r4,r17
 2015cc4:	d9800015 	stw	r6,0(sp)
 2015cc8:	20069fc0 	call	20069fc <__umodsi3>
 2015ccc:	102d883a 	mov	r22,r2
 2015cd0:	8809883a 	mov	r4,r17
 2015cd4:	900b883a 	mov	r5,r18
 2015cd8:	20069980 	call	2006998 <__udivsi3>
 2015cdc:	b02c943a 	slli	r22,r22,16
 2015ce0:	e089383a 	mul	r4,fp,r2
 2015ce4:	843fffcc 	andi	r16,r16,65535
 2015ce8:	85a0b03a 	or	r16,r16,r22
 2015cec:	d9800017 	ldw	r6,0(sp)
 2015cf0:	8100042e 	bgeu	r16,r4,2015d04 <__udivdi3+0x3bc>
 2015cf4:	85e1883a 	add	r16,r16,r23
 2015cf8:	10ffffc4 	addi	r3,r2,-1
 2015cfc:	85c05e2e 	bgeu	r16,r23,2015e78 <__udivdi3+0x530>
 2015d00:	1805883a 	mov	r2,r3
 2015d04:	300c943a 	slli	r6,r6,16
 2015d08:	a17fffcc 	andi	r5,r20,65535
 2015d0c:	a028d43a 	srli	r20,r20,16
 2015d10:	3084b03a 	or	r2,r6,r2
 2015d14:	10ffffcc 	andi	r3,r2,65535
 2015d18:	100cd43a 	srli	r6,r2,16
 2015d1c:	194f383a 	mul	r7,r3,r5
 2015d20:	1d07383a 	mul	r3,r3,r20
 2015d24:	314b383a 	mul	r5,r6,r5
 2015d28:	3810d43a 	srli	r8,r7,16
 2015d2c:	8121c83a 	sub	r16,r16,r4
 2015d30:	1947883a 	add	r3,r3,r5
 2015d34:	40c7883a 	add	r3,r8,r3
 2015d38:	350d383a 	mul	r6,r6,r20
 2015d3c:	1940022e 	bgeu	r3,r5,2015d48 <__udivdi3+0x400>
 2015d40:	01000074 	movhi	r4,1
 2015d44:	310d883a 	add	r6,r6,r4
 2015d48:	1828d43a 	srli	r20,r3,16
 2015d4c:	a18d883a 	add	r6,r20,r6
 2015d50:	81803e36 	bltu	r16,r6,2015e4c <__udivdi3+0x504>
 2015d54:	81803826 	beq	r16,r6,2015e38 <__udivdi3+0x4f0>
 2015d58:	0007883a 	mov	r3,zero
 2015d5c:	003fa206 	br	2015be8 <__udivdi3+0x2a0>
 2015d60:	88e2983a 	sll	r17,r17,r3
 2015d64:	80a8d83a 	srl	r20,r16,r2
 2015d68:	80e0983a 	sll	r16,r16,r3
 2015d6c:	882ad43a 	srli	r21,r17,16
 2015d70:	9884d83a 	srl	r2,r19,r2
 2015d74:	a009883a 	mov	r4,r20
 2015d78:	a80b883a 	mov	r5,r21
 2015d7c:	142eb03a 	or	r23,r2,r16
 2015d80:	98e4983a 	sll	r18,r19,r3
 2015d84:	20069fc0 	call	20069fc <__umodsi3>
 2015d88:	a009883a 	mov	r4,r20
 2015d8c:	a80b883a 	mov	r5,r21
 2015d90:	1021883a 	mov	r16,r2
 2015d94:	20069980 	call	2006998 <__udivsi3>
 2015d98:	1039883a 	mov	fp,r2
 2015d9c:	8d3fffcc 	andi	r20,r17,65535
 2015da0:	8020943a 	slli	r16,r16,16
 2015da4:	b804d43a 	srli	r2,r23,16
 2015da8:	a72d383a 	mul	r22,r20,fp
 2015dac:	1404b03a 	or	r2,r2,r16
 2015db0:	1580062e 	bgeu	r2,r22,2015dcc <__udivdi3+0x484>
 2015db4:	1445883a 	add	r2,r2,r17
 2015db8:	e0ffffc4 	addi	r3,fp,-1
 2015dbc:	14403836 	bltu	r2,r17,2015ea0 <__udivdi3+0x558>
 2015dc0:	1580372e 	bgeu	r2,r22,2015ea0 <__udivdi3+0x558>
 2015dc4:	e73fff84 	addi	fp,fp,-2
 2015dc8:	1445883a 	add	r2,r2,r17
 2015dcc:	15adc83a 	sub	r22,r2,r22
 2015dd0:	a80b883a 	mov	r5,r21
 2015dd4:	b009883a 	mov	r4,r22
 2015dd8:	20069fc0 	call	20069fc <__umodsi3>
 2015ddc:	1027883a 	mov	r19,r2
 2015de0:	b009883a 	mov	r4,r22
 2015de4:	a80b883a 	mov	r5,r21
 2015de8:	20069980 	call	2006998 <__udivsi3>
 2015dec:	9826943a 	slli	r19,r19,16
 2015df0:	a0a1383a 	mul	r16,r20,r2
 2015df4:	b93fffcc 	andi	r4,r23,65535
 2015df8:	24c8b03a 	or	r4,r4,r19
 2015dfc:	2400062e 	bgeu	r4,r16,2015e18 <__udivdi3+0x4d0>
 2015e00:	2449883a 	add	r4,r4,r17
 2015e04:	10ffffc4 	addi	r3,r2,-1
 2015e08:	24402336 	bltu	r4,r17,2015e98 <__udivdi3+0x550>
 2015e0c:	2400222e 	bgeu	r4,r16,2015e98 <__udivdi3+0x550>
 2015e10:	10bfff84 	addi	r2,r2,-2
 2015e14:	2449883a 	add	r4,r4,r17
 2015e18:	e038943a 	slli	fp,fp,16
 2015e1c:	2421c83a 	sub	r16,r4,r16
 2015e20:	e086b03a 	or	r3,fp,r2
 2015e24:	003f4306 	br	2015b34 <__udivdi3+0x1ec>
 2015e28:	2005883a 	mov	r2,r4
 2015e2c:	003f6906 	br	2015bd4 <__udivdi3+0x28c>
 2015e30:	1805883a 	mov	r2,r3
 2015e34:	003f0f06 	br	2015a74 <__udivdi3+0x12c>
 2015e38:	1806943a 	slli	r3,r3,16
 2015e3c:	9d66983a 	sll	r19,r19,r21
 2015e40:	39ffffcc 	andi	r7,r7,65535
 2015e44:	19c7883a 	add	r3,r3,r7
 2015e48:	98ffc32e 	bgeu	r19,r3,2015d58 <__udivdi3+0x410>
 2015e4c:	10bfffc4 	addi	r2,r2,-1
 2015e50:	003fc106 	br	2015d58 <__udivdi3+0x410>
 2015e54:	00800604 	movi	r2,24
 2015e58:	003f1106 	br	2015aa0 <__udivdi3+0x158>
 2015e5c:	00800604 	movi	r2,24
 2015e60:	003f2706 	br	2015b00 <__udivdi3+0x1b8>
 2015e64:	00800604 	movi	r2,24
 2015e68:	003ece06 	br	20159a4 <__udivdi3+0x5c>
 2015e6c:	0007883a 	mov	r3,zero
 2015e70:	00800044 	movi	r2,1
 2015e74:	003f5c06 	br	2015be8 <__udivdi3+0x2a0>
 2015e78:	813fa12e 	bgeu	r16,r4,2015d00 <__udivdi3+0x3b8>
 2015e7c:	10bfff84 	addi	r2,r2,-2
 2015e80:	85e1883a 	add	r16,r16,r23
 2015e84:	003f9f06 	br	2015d04 <__udivdi3+0x3bc>
 2015e88:	1c7f8a2e 	bgeu	r3,r17,2015cb4 <__udivdi3+0x36c>
 2015e8c:	31bfff84 	addi	r6,r6,-2
 2015e90:	1dc7883a 	add	r3,r3,r23
 2015e94:	003f8806 	br	2015cb8 <__udivdi3+0x370>
 2015e98:	1805883a 	mov	r2,r3
 2015e9c:	003fde06 	br	2015e18 <__udivdi3+0x4d0>
 2015ea0:	1839883a 	mov	fp,r3
 2015ea4:	003fc906 	br	2015dcc <__udivdi3+0x484>
 2015ea8:	b5bfff84 	addi	r22,r22,-2
 2015eac:	2449883a 	add	r4,r4,r17
 2015eb0:	003f3406 	br	2015b84 <__udivdi3+0x23c>
 2015eb4:	b5bfff84 	addi	r22,r22,-2
 2015eb8:	1445883a 	add	r2,r2,r17
 2015ebc:	003edb06 	br	2015a2c <__udivdi3+0xe4>

02015ec0 <__umoddi3>:
 2015ec0:	defff404 	addi	sp,sp,-48
 2015ec4:	df000a15 	stw	fp,40(sp)
 2015ec8:	dc400315 	stw	r17,12(sp)
 2015ecc:	dc000215 	stw	r16,8(sp)
 2015ed0:	dfc00b15 	stw	ra,44(sp)
 2015ed4:	ddc00915 	stw	r23,36(sp)
 2015ed8:	dd800815 	stw	r22,32(sp)
 2015edc:	dd400715 	stw	r21,28(sp)
 2015ee0:	dd000615 	stw	r20,24(sp)
 2015ee4:	dcc00515 	stw	r19,20(sp)
 2015ee8:	dc800415 	stw	r18,16(sp)
 2015eec:	2021883a 	mov	r16,r4
 2015ef0:	2823883a 	mov	r17,r5
 2015ef4:	2839883a 	mov	fp,r5
 2015ef8:	38003c1e 	bne	r7,zero,2015fec <__umoddi3+0x12c>
 2015efc:	3027883a 	mov	r19,r6
 2015f00:	2029883a 	mov	r20,r4
 2015f04:	2980512e 	bgeu	r5,r6,201604c <__umoddi3+0x18c>
 2015f08:	00bfffd4 	movui	r2,65535
 2015f0c:	11809a36 	bltu	r2,r6,2016178 <__umoddi3+0x2b8>
 2015f10:	01003fc4 	movi	r4,255
 2015f14:	2189803a 	cmpltu	r4,r4,r6
 2015f18:	200890fa 	slli	r4,r4,3
 2015f1c:	3104d83a 	srl	r2,r6,r4
 2015f20:	00c080b4 	movhi	r3,514
 2015f24:	18c92204 	addi	r3,r3,9352
 2015f28:	1885883a 	add	r2,r3,r2
 2015f2c:	10c00003 	ldbu	r3,0(r2)
 2015f30:	00800804 	movi	r2,32
 2015f34:	1909883a 	add	r4,r3,r4
 2015f38:	1125c83a 	sub	r18,r2,r4
 2015f3c:	90000526 	beq	r18,zero,2015f54 <__umoddi3+0x94>
 2015f40:	8ca2983a 	sll	r17,r17,r18
 2015f44:	8108d83a 	srl	r4,r16,r4
 2015f48:	34a6983a 	sll	r19,r6,r18
 2015f4c:	84a8983a 	sll	r20,r16,r18
 2015f50:	2478b03a 	or	fp,r4,r17
 2015f54:	982ed43a 	srli	r23,r19,16
 2015f58:	e009883a 	mov	r4,fp
 2015f5c:	9dbfffcc 	andi	r22,r19,65535
 2015f60:	b80b883a 	mov	r5,r23
 2015f64:	20069fc0 	call	20069fc <__umodsi3>
 2015f68:	e009883a 	mov	r4,fp
 2015f6c:	b80b883a 	mov	r5,r23
 2015f70:	102b883a 	mov	r21,r2
 2015f74:	20069980 	call	2006998 <__udivsi3>
 2015f78:	a806943a 	slli	r3,r21,16
 2015f7c:	a008d43a 	srli	r4,r20,16
 2015f80:	b085383a 	mul	r2,r22,r2
 2015f84:	20c8b03a 	or	r4,r4,r3
 2015f88:	2080032e 	bgeu	r4,r2,2015f98 <__umoddi3+0xd8>
 2015f8c:	24c9883a 	add	r4,r4,r19
 2015f90:	24c00136 	bltu	r4,r19,2015f98 <__umoddi3+0xd8>
 2015f94:	20811036 	bltu	r4,r2,20163d8 <__umoddi3+0x518>
 2015f98:	20abc83a 	sub	r21,r4,r2
 2015f9c:	b80b883a 	mov	r5,r23
 2015fa0:	a809883a 	mov	r4,r21
 2015fa4:	20069fc0 	call	20069fc <__umodsi3>
 2015fa8:	1023883a 	mov	r17,r2
 2015fac:	b80b883a 	mov	r5,r23
 2015fb0:	a809883a 	mov	r4,r21
 2015fb4:	20069980 	call	2006998 <__udivsi3>
 2015fb8:	8822943a 	slli	r17,r17,16
 2015fbc:	b085383a 	mul	r2,r22,r2
 2015fc0:	a0ffffcc 	andi	r3,r20,65535
 2015fc4:	1c46b03a 	or	r3,r3,r17
 2015fc8:	1880042e 	bgeu	r3,r2,2015fdc <__umoddi3+0x11c>
 2015fcc:	1cc7883a 	add	r3,r3,r19
 2015fd0:	1cc00236 	bltu	r3,r19,2015fdc <__umoddi3+0x11c>
 2015fd4:	1880012e 	bgeu	r3,r2,2015fdc <__umoddi3+0x11c>
 2015fd8:	1cc7883a 	add	r3,r3,r19
 2015fdc:	1885c83a 	sub	r2,r3,r2
 2015fe0:	1484d83a 	srl	r2,r2,r18
 2015fe4:	0007883a 	mov	r3,zero
 2015fe8:	00004f06 	br	2016128 <__umoddi3+0x268>
 2015fec:	29c04c36 	bltu	r5,r7,2016120 <__umoddi3+0x260>
 2015ff0:	00bfffd4 	movui	r2,65535
 2015ff4:	11c0582e 	bgeu	r2,r7,2016158 <__umoddi3+0x298>
 2015ff8:	00804034 	movhi	r2,256
 2015ffc:	10bfffc4 	addi	r2,r2,-1
 2016000:	11c0e736 	bltu	r2,r7,20163a0 <__umoddi3+0x4e0>
 2016004:	01000404 	movi	r4,16
 2016008:	3904d83a 	srl	r2,r7,r4
 201600c:	00c080b4 	movhi	r3,514
 2016010:	18c92204 	addi	r3,r3,9352
 2016014:	1885883a 	add	r2,r3,r2
 2016018:	14c00003 	ldbu	r19,0(r2)
 201601c:	00c00804 	movi	r3,32
 2016020:	9927883a 	add	r19,r19,r4
 2016024:	1ce9c83a 	sub	r20,r3,r19
 2016028:	a000581e 	bne	r20,zero,201618c <__umoddi3+0x2cc>
 201602c:	3c400136 	bltu	r7,r17,2016034 <__umoddi3+0x174>
 2016030:	8180eb36 	bltu	r16,r6,20163e0 <__umoddi3+0x520>
 2016034:	8185c83a 	sub	r2,r16,r6
 2016038:	89e3c83a 	sub	r17,r17,r7
 201603c:	8089803a 	cmpltu	r4,r16,r2
 2016040:	8939c83a 	sub	fp,r17,r4
 2016044:	e007883a 	mov	r3,fp
 2016048:	00003706 	br	2016128 <__umoddi3+0x268>
 201604c:	3000041e 	bne	r6,zero,2016060 <__umoddi3+0x1a0>
 2016050:	000b883a 	mov	r5,zero
 2016054:	01000044 	movi	r4,1
 2016058:	20069980 	call	2006998 <__udivsi3>
 201605c:	1027883a 	mov	r19,r2
 2016060:	00bfffd4 	movui	r2,65535
 2016064:	14c0402e 	bgeu	r2,r19,2016168 <__umoddi3+0x2a8>
 2016068:	00804034 	movhi	r2,256
 201606c:	10bfffc4 	addi	r2,r2,-1
 2016070:	14c0cd36 	bltu	r2,r19,20163a8 <__umoddi3+0x4e8>
 2016074:	00800404 	movi	r2,16
 2016078:	9886d83a 	srl	r3,r19,r2
 201607c:	010080b4 	movhi	r4,514
 2016080:	21092204 	addi	r4,r4,9352
 2016084:	20c7883a 	add	r3,r4,r3
 2016088:	18c00003 	ldbu	r3,0(r3)
 201608c:	1887883a 	add	r3,r3,r2
 2016090:	00800804 	movi	r2,32
 2016094:	10e5c83a 	sub	r18,r2,r3
 2016098:	9000901e 	bne	r18,zero,20162dc <__umoddi3+0x41c>
 201609c:	982cd43a 	srli	r22,r19,16
 20160a0:	8ce3c83a 	sub	r17,r17,r19
 20160a4:	9d7fffcc 	andi	r21,r19,65535
 20160a8:	b00b883a 	mov	r5,r22
 20160ac:	8809883a 	mov	r4,r17
 20160b0:	20069fc0 	call	20069fc <__umodsi3>
 20160b4:	8809883a 	mov	r4,r17
 20160b8:	b00b883a 	mov	r5,r22
 20160bc:	1021883a 	mov	r16,r2
 20160c0:	20069980 	call	2006998 <__udivsi3>
 20160c4:	8006943a 	slli	r3,r16,16
 20160c8:	a008d43a 	srli	r4,r20,16
 20160cc:	1545383a 	mul	r2,r2,r21
 20160d0:	20c8b03a 	or	r4,r4,r3
 20160d4:	2080042e 	bgeu	r4,r2,20160e8 <__umoddi3+0x228>
 20160d8:	24c9883a 	add	r4,r4,r19
 20160dc:	24c00236 	bltu	r4,r19,20160e8 <__umoddi3+0x228>
 20160e0:	2080012e 	bgeu	r4,r2,20160e8 <__umoddi3+0x228>
 20160e4:	24c9883a 	add	r4,r4,r19
 20160e8:	20a1c83a 	sub	r16,r4,r2
 20160ec:	b00b883a 	mov	r5,r22
 20160f0:	8009883a 	mov	r4,r16
 20160f4:	20069fc0 	call	20069fc <__umodsi3>
 20160f8:	1023883a 	mov	r17,r2
 20160fc:	b00b883a 	mov	r5,r22
 2016100:	8009883a 	mov	r4,r16
 2016104:	20069980 	call	2006998 <__udivsi3>
 2016108:	8822943a 	slli	r17,r17,16
 201610c:	1545383a 	mul	r2,r2,r21
 2016110:	a53fffcc 	andi	r20,r20,65535
 2016114:	a446b03a 	or	r3,r20,r17
 2016118:	18bfb02e 	bgeu	r3,r2,2015fdc <__umoddi3+0x11c>
 201611c:	003fab06 	br	2015fcc <__umoddi3+0x10c>
 2016120:	2005883a 	mov	r2,r4
 2016124:	2807883a 	mov	r3,r5
 2016128:	dfc00b17 	ldw	ra,44(sp)
 201612c:	df000a17 	ldw	fp,40(sp)
 2016130:	ddc00917 	ldw	r23,36(sp)
 2016134:	dd800817 	ldw	r22,32(sp)
 2016138:	dd400717 	ldw	r21,28(sp)
 201613c:	dd000617 	ldw	r20,24(sp)
 2016140:	dcc00517 	ldw	r19,20(sp)
 2016144:	dc800417 	ldw	r18,16(sp)
 2016148:	dc400317 	ldw	r17,12(sp)
 201614c:	dc000217 	ldw	r16,8(sp)
 2016150:	dec00c04 	addi	sp,sp,48
 2016154:	f800283a 	ret
 2016158:	04c03fc4 	movi	r19,255
 201615c:	99c9803a 	cmpltu	r4,r19,r7
 2016160:	200890fa 	slli	r4,r4,3
 2016164:	003fa806 	br	2016008 <__umoddi3+0x148>
 2016168:	00803fc4 	movi	r2,255
 201616c:	14c5803a 	cmpltu	r2,r2,r19
 2016170:	100490fa 	slli	r2,r2,3
 2016174:	003fc006 	br	2016078 <__umoddi3+0x1b8>
 2016178:	00804034 	movhi	r2,256
 201617c:	10bfffc4 	addi	r2,r2,-1
 2016180:	11808b36 	bltu	r2,r6,20163b0 <__umoddi3+0x4f0>
 2016184:	01000404 	movi	r4,16
 2016188:	003f6406 	br	2015f1c <__umoddi3+0x5c>
 201618c:	34c4d83a 	srl	r2,r6,r19
 2016190:	3d0e983a 	sll	r7,r7,r20
 2016194:	8cf8d83a 	srl	fp,r17,r19
 2016198:	8d10983a 	sll	r8,r17,r20
 201619c:	38aab03a 	or	r21,r7,r2
 20161a0:	a82cd43a 	srli	r22,r21,16
 20161a4:	84e2d83a 	srl	r17,r16,r19
 20161a8:	e009883a 	mov	r4,fp
 20161ac:	b00b883a 	mov	r5,r22
 20161b0:	8a22b03a 	or	r17,r17,r8
 20161b4:	3524983a 	sll	r18,r6,r20
 20161b8:	20069fc0 	call	20069fc <__umodsi3>
 20161bc:	e009883a 	mov	r4,fp
 20161c0:	b00b883a 	mov	r5,r22
 20161c4:	102f883a 	mov	r23,r2
 20161c8:	20069980 	call	2006998 <__udivsi3>
 20161cc:	100d883a 	mov	r6,r2
 20161d0:	b808943a 	slli	r4,r23,16
 20161d4:	aa3fffcc 	andi	r8,r21,65535
 20161d8:	8804d43a 	srli	r2,r17,16
 20161dc:	41af383a 	mul	r23,r8,r6
 20161e0:	8520983a 	sll	r16,r16,r20
 20161e4:	1104b03a 	or	r2,r2,r4
 20161e8:	15c0042e 	bgeu	r2,r23,20161fc <__umoddi3+0x33c>
 20161ec:	1545883a 	add	r2,r2,r21
 20161f0:	30ffffc4 	addi	r3,r6,-1
 20161f4:	1540742e 	bgeu	r2,r21,20163c8 <__umoddi3+0x508>
 20161f8:	180d883a 	mov	r6,r3
 20161fc:	15efc83a 	sub	r23,r2,r23
 2016200:	b00b883a 	mov	r5,r22
 2016204:	b809883a 	mov	r4,r23
 2016208:	d9800115 	stw	r6,4(sp)
 201620c:	da000015 	stw	r8,0(sp)
 2016210:	20069fc0 	call	20069fc <__umodsi3>
 2016214:	b00b883a 	mov	r5,r22
 2016218:	b809883a 	mov	r4,r23
 201621c:	1039883a 	mov	fp,r2
 2016220:	20069980 	call	2006998 <__udivsi3>
 2016224:	da000017 	ldw	r8,0(sp)
 2016228:	e038943a 	slli	fp,fp,16
 201622c:	100b883a 	mov	r5,r2
 2016230:	4089383a 	mul	r4,r8,r2
 2016234:	8a3fffcc 	andi	r8,r17,65535
 2016238:	4710b03a 	or	r8,r8,fp
 201623c:	d9800117 	ldw	r6,4(sp)
 2016240:	4100042e 	bgeu	r8,r4,2016254 <__umoddi3+0x394>
 2016244:	4551883a 	add	r8,r8,r21
 2016248:	10bfffc4 	addi	r2,r2,-1
 201624c:	45405a2e 	bgeu	r8,r21,20163b8 <__umoddi3+0x4f8>
 2016250:	100b883a 	mov	r5,r2
 2016254:	300c943a 	slli	r6,r6,16
 2016258:	91ffffcc 	andi	r7,r18,65535
 201625c:	9004d43a 	srli	r2,r18,16
 2016260:	314cb03a 	or	r6,r6,r5
 2016264:	317fffcc 	andi	r5,r6,65535
 2016268:	300cd43a 	srli	r6,r6,16
 201626c:	29d3383a 	mul	r9,r5,r7
 2016270:	288b383a 	mul	r5,r5,r2
 2016274:	31cf383a 	mul	r7,r6,r7
 2016278:	4806d43a 	srli	r3,r9,16
 201627c:	4111c83a 	sub	r8,r8,r4
 2016280:	29cb883a 	add	r5,r5,r7
 2016284:	194b883a 	add	r5,r3,r5
 2016288:	3085383a 	mul	r2,r6,r2
 201628c:	29c0022e 	bgeu	r5,r7,2016298 <__umoddi3+0x3d8>
 2016290:	00c00074 	movhi	r3,1
 2016294:	10c5883a 	add	r2,r2,r3
 2016298:	2808d43a 	srli	r4,r5,16
 201629c:	280a943a 	slli	r5,r5,16
 20162a0:	4a7fffcc 	andi	r9,r9,65535
 20162a4:	2085883a 	add	r2,r4,r2
 20162a8:	2a4b883a 	add	r5,r5,r9
 20162ac:	40803636 	bltu	r8,r2,2016388 <__umoddi3+0x4c8>
 20162b0:	40804d26 	beq	r8,r2,20163e8 <__umoddi3+0x528>
 20162b4:	4089c83a 	sub	r4,r8,r2
 20162b8:	280f883a 	mov	r7,r5
 20162bc:	81cfc83a 	sub	r7,r16,r7
 20162c0:	81c7803a 	cmpltu	r3,r16,r7
 20162c4:	20c7c83a 	sub	r3,r4,r3
 20162c8:	1cc4983a 	sll	r2,r3,r19
 20162cc:	3d0ed83a 	srl	r7,r7,r20
 20162d0:	1d06d83a 	srl	r3,r3,r20
 20162d4:	11c4b03a 	or	r2,r2,r7
 20162d8:	003f9306 	br	2016128 <__umoddi3+0x268>
 20162dc:	9ca6983a 	sll	r19,r19,r18
 20162e0:	88e8d83a 	srl	r20,r17,r3
 20162e4:	80c4d83a 	srl	r2,r16,r3
 20162e8:	982cd43a 	srli	r22,r19,16
 20162ec:	8ca2983a 	sll	r17,r17,r18
 20162f0:	a009883a 	mov	r4,r20
 20162f4:	b00b883a 	mov	r5,r22
 20162f8:	1478b03a 	or	fp,r2,r17
 20162fc:	20069fc0 	call	20069fc <__umodsi3>
 2016300:	a009883a 	mov	r4,r20
 2016304:	b00b883a 	mov	r5,r22
 2016308:	1023883a 	mov	r17,r2
 201630c:	20069980 	call	2006998 <__udivsi3>
 2016310:	9d7fffcc 	andi	r21,r19,65535
 2016314:	880a943a 	slli	r5,r17,16
 2016318:	e008d43a 	srli	r4,fp,16
 201631c:	a885383a 	mul	r2,r21,r2
 2016320:	84a8983a 	sll	r20,r16,r18
 2016324:	2148b03a 	or	r4,r4,r5
 2016328:	2080042e 	bgeu	r4,r2,201633c <__umoddi3+0x47c>
 201632c:	24c9883a 	add	r4,r4,r19
 2016330:	24c00236 	bltu	r4,r19,201633c <__umoddi3+0x47c>
 2016334:	2080012e 	bgeu	r4,r2,201633c <__umoddi3+0x47c>
 2016338:	24c9883a 	add	r4,r4,r19
 201633c:	20a3c83a 	sub	r17,r4,r2
 2016340:	b00b883a 	mov	r5,r22
 2016344:	8809883a 	mov	r4,r17
 2016348:	20069fc0 	call	20069fc <__umodsi3>
 201634c:	102f883a 	mov	r23,r2
 2016350:	8809883a 	mov	r4,r17
 2016354:	b00b883a 	mov	r5,r22
 2016358:	20069980 	call	2006998 <__udivsi3>
 201635c:	b82e943a 	slli	r23,r23,16
 2016360:	a885383a 	mul	r2,r21,r2
 2016364:	e13fffcc 	andi	r4,fp,65535
 2016368:	25c8b03a 	or	r4,r4,r23
 201636c:	2080042e 	bgeu	r4,r2,2016380 <__umoddi3+0x4c0>
 2016370:	24c9883a 	add	r4,r4,r19
 2016374:	24c00236 	bltu	r4,r19,2016380 <__umoddi3+0x4c0>
 2016378:	2080012e 	bgeu	r4,r2,2016380 <__umoddi3+0x4c0>
 201637c:	24c9883a 	add	r4,r4,r19
 2016380:	20a3c83a 	sub	r17,r4,r2
 2016384:	003f4806 	br	20160a8 <__umoddi3+0x1e8>
 2016388:	2c8fc83a 	sub	r7,r5,r18
 201638c:	1545c83a 	sub	r2,r2,r21
 2016390:	29cb803a 	cmpltu	r5,r5,r7
 2016394:	1145c83a 	sub	r2,r2,r5
 2016398:	4089c83a 	sub	r4,r8,r2
 201639c:	003fc706 	br	20162bc <__umoddi3+0x3fc>
 20163a0:	01000604 	movi	r4,24
 20163a4:	003f1806 	br	2016008 <__umoddi3+0x148>
 20163a8:	00800604 	movi	r2,24
 20163ac:	003f3206 	br	2016078 <__umoddi3+0x1b8>
 20163b0:	01000604 	movi	r4,24
 20163b4:	003ed906 	br	2015f1c <__umoddi3+0x5c>
 20163b8:	413fa52e 	bgeu	r8,r4,2016250 <__umoddi3+0x390>
 20163bc:	297fff84 	addi	r5,r5,-2
 20163c0:	4551883a 	add	r8,r8,r21
 20163c4:	003fa306 	br	2016254 <__umoddi3+0x394>
 20163c8:	15ff8b2e 	bgeu	r2,r23,20161f8 <__umoddi3+0x338>
 20163cc:	31bfff84 	addi	r6,r6,-2
 20163d0:	1545883a 	add	r2,r2,r21
 20163d4:	003f8906 	br	20161fc <__umoddi3+0x33c>
 20163d8:	24c9883a 	add	r4,r4,r19
 20163dc:	003eee06 	br	2015f98 <__umoddi3+0xd8>
 20163e0:	8005883a 	mov	r2,r16
 20163e4:	003f1706 	br	2016044 <__umoddi3+0x184>
 20163e8:	817fe736 	bltu	r16,r5,2016388 <__umoddi3+0x4c8>
 20163ec:	280f883a 	mov	r7,r5
 20163f0:	0009883a 	mov	r4,zero
 20163f4:	003fb106 	br	20162bc <__umoddi3+0x3fc>

020163f8 <__fixdfsi>:
 20163f8:	280cd53a 	srli	r6,r5,20
 20163fc:	00c00434 	movhi	r3,16
 2016400:	18ffffc4 	addi	r3,r3,-1
 2016404:	3181ffcc 	andi	r6,r6,2047
 2016408:	01c0ff84 	movi	r7,1022
 201640c:	28c6703a 	and	r3,r5,r3
 2016410:	280ad7fa 	srli	r5,r5,31
 2016414:	3980120e 	bge	r7,r6,2016460 <__fixdfsi+0x68>
 2016418:	00810744 	movi	r2,1053
 201641c:	11800c16 	blt	r2,r6,2016450 <__fixdfsi+0x58>
 2016420:	00810cc4 	movi	r2,1075
 2016424:	1185c83a 	sub	r2,r2,r6
 2016428:	01c007c4 	movi	r7,31
 201642c:	18c00434 	orhi	r3,r3,16
 2016430:	38800d16 	blt	r7,r2,2016468 <__fixdfsi+0x70>
 2016434:	31befb44 	addi	r6,r6,-1043
 2016438:	2084d83a 	srl	r2,r4,r2
 201643c:	1986983a 	sll	r3,r3,r6
 2016440:	1884b03a 	or	r2,r3,r2
 2016444:	28000726 	beq	r5,zero,2016464 <__fixdfsi+0x6c>
 2016448:	0085c83a 	sub	r2,zero,r2
 201644c:	f800283a 	ret
 2016450:	00a00034 	movhi	r2,32768
 2016454:	10bfffc4 	addi	r2,r2,-1
 2016458:	2885883a 	add	r2,r5,r2
 201645c:	f800283a 	ret
 2016460:	0005883a 	mov	r2,zero
 2016464:	f800283a 	ret
 2016468:	008104c4 	movi	r2,1043
 201646c:	1185c83a 	sub	r2,r2,r6
 2016470:	1884d83a 	srl	r2,r3,r2
 2016474:	003ff306 	br	2016444 <__fixdfsi+0x4c>

02016478 <__floatsidf>:
 2016478:	defffd04 	addi	sp,sp,-12
 201647c:	dfc00215 	stw	ra,8(sp)
 2016480:	dc400115 	stw	r17,4(sp)
 2016484:	dc000015 	stw	r16,0(sp)
 2016488:	20002b26 	beq	r4,zero,2016538 <__floatsidf+0xc0>
 201648c:	2023883a 	mov	r17,r4
 2016490:	2020d7fa 	srli	r16,r4,31
 2016494:	20002d16 	blt	r4,zero,201654c <__floatsidf+0xd4>
 2016498:	8809883a 	mov	r4,r17
 201649c:	200910c0 	call	200910c <__clzsi2>
 20164a0:	01410784 	movi	r5,1054
 20164a4:	288bc83a 	sub	r5,r5,r2
 20164a8:	01010cc4 	movi	r4,1075
 20164ac:	2149c83a 	sub	r4,r4,r5
 20164b0:	00c007c4 	movi	r3,31
 20164b4:	1900160e 	bge	r3,r4,2016510 <__floatsidf+0x98>
 20164b8:	00c104c4 	movi	r3,1043
 20164bc:	1947c83a 	sub	r3,r3,r5
 20164c0:	88c6983a 	sll	r3,r17,r3
 20164c4:	00800434 	movhi	r2,16
 20164c8:	10bfffc4 	addi	r2,r2,-1
 20164cc:	1886703a 	and	r3,r3,r2
 20164d0:	2941ffcc 	andi	r5,r5,2047
 20164d4:	800d883a 	mov	r6,r16
 20164d8:	0005883a 	mov	r2,zero
 20164dc:	280a953a 	slli	r5,r5,20
 20164e0:	31803fcc 	andi	r6,r6,255
 20164e4:	01000434 	movhi	r4,16
 20164e8:	300c97fa 	slli	r6,r6,31
 20164ec:	213fffc4 	addi	r4,r4,-1
 20164f0:	1906703a 	and	r3,r3,r4
 20164f4:	1946b03a 	or	r3,r3,r5
 20164f8:	1986b03a 	or	r3,r3,r6
 20164fc:	dfc00217 	ldw	ra,8(sp)
 2016500:	dc400117 	ldw	r17,4(sp)
 2016504:	dc000017 	ldw	r16,0(sp)
 2016508:	dec00304 	addi	sp,sp,12
 201650c:	f800283a 	ret
 2016510:	00c002c4 	movi	r3,11
 2016514:	1887c83a 	sub	r3,r3,r2
 2016518:	88c6d83a 	srl	r3,r17,r3
 201651c:	8904983a 	sll	r2,r17,r4
 2016520:	01000434 	movhi	r4,16
 2016524:	213fffc4 	addi	r4,r4,-1
 2016528:	2941ffcc 	andi	r5,r5,2047
 201652c:	1906703a 	and	r3,r3,r4
 2016530:	800d883a 	mov	r6,r16
 2016534:	003fe906 	br	20164dc <__floatsidf+0x64>
 2016538:	000d883a 	mov	r6,zero
 201653c:	000b883a 	mov	r5,zero
 2016540:	0007883a 	mov	r3,zero
 2016544:	0005883a 	mov	r2,zero
 2016548:	003fe406 	br	20164dc <__floatsidf+0x64>
 201654c:	0123c83a 	sub	r17,zero,r4
 2016550:	003fd106 	br	2016498 <__floatsidf+0x20>

02016554 <__floatunsidf>:
 2016554:	defffe04 	addi	sp,sp,-8
 2016558:	dc000015 	stw	r16,0(sp)
 201655c:	dfc00115 	stw	ra,4(sp)
 2016560:	2021883a 	mov	r16,r4
 2016564:	20002226 	beq	r4,zero,20165f0 <__floatunsidf+0x9c>
 2016568:	200910c0 	call	200910c <__clzsi2>
 201656c:	01010784 	movi	r4,1054
 2016570:	2089c83a 	sub	r4,r4,r2
 2016574:	01810cc4 	movi	r6,1075
 2016578:	310dc83a 	sub	r6,r6,r4
 201657c:	00c007c4 	movi	r3,31
 2016580:	1980120e 	bge	r3,r6,20165cc <__floatunsidf+0x78>
 2016584:	00c104c4 	movi	r3,1043
 2016588:	1907c83a 	sub	r3,r3,r4
 201658c:	80ca983a 	sll	r5,r16,r3
 2016590:	00800434 	movhi	r2,16
 2016594:	10bfffc4 	addi	r2,r2,-1
 2016598:	2101ffcc 	andi	r4,r4,2047
 201659c:	0021883a 	mov	r16,zero
 20165a0:	288a703a 	and	r5,r5,r2
 20165a4:	2008953a 	slli	r4,r4,20
 20165a8:	00c00434 	movhi	r3,16
 20165ac:	18ffffc4 	addi	r3,r3,-1
 20165b0:	28c6703a 	and	r3,r5,r3
 20165b4:	8005883a 	mov	r2,r16
 20165b8:	1906b03a 	or	r3,r3,r4
 20165bc:	dfc00117 	ldw	ra,4(sp)
 20165c0:	dc000017 	ldw	r16,0(sp)
 20165c4:	dec00204 	addi	sp,sp,8
 20165c8:	f800283a 	ret
 20165cc:	00c002c4 	movi	r3,11
 20165d0:	188bc83a 	sub	r5,r3,r2
 20165d4:	814ad83a 	srl	r5,r16,r5
 20165d8:	00c00434 	movhi	r3,16
 20165dc:	18ffffc4 	addi	r3,r3,-1
 20165e0:	81a0983a 	sll	r16,r16,r6
 20165e4:	2101ffcc 	andi	r4,r4,2047
 20165e8:	28ca703a 	and	r5,r5,r3
 20165ec:	003fed06 	br	20165a4 <__floatunsidf+0x50>
 20165f0:	0009883a 	mov	r4,zero
 20165f4:	000b883a 	mov	r5,zero
 20165f8:	003fea06 	br	20165a4 <__floatunsidf+0x50>

020165fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20165fc:	defffe04 	addi	sp,sp,-8
 2016600:	dfc00115 	stw	ra,4(sp)
 2016604:	df000015 	stw	fp,0(sp)
 2016608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201660c:	d0a03b17 	ldw	r2,-32532(gp)
 2016610:	10000326 	beq	r2,zero,2016620 <alt_get_errno+0x24>
 2016614:	d0a03b17 	ldw	r2,-32532(gp)
 2016618:	103ee83a 	callr	r2
 201661c:	00000106 	br	2016624 <alt_get_errno+0x28>
 2016620:	d0a79e04 	addi	r2,gp,-24968
}
 2016624:	e037883a 	mov	sp,fp
 2016628:	dfc00117 	ldw	ra,4(sp)
 201662c:	df000017 	ldw	fp,0(sp)
 2016630:	dec00204 	addi	sp,sp,8
 2016634:	f800283a 	ret

02016638 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2016638:	defffb04 	addi	sp,sp,-20
 201663c:	dfc00415 	stw	ra,16(sp)
 2016640:	df000315 	stw	fp,12(sp)
 2016644:	df000304 	addi	fp,sp,12
 2016648:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 201664c:	e0bfff17 	ldw	r2,-4(fp)
 2016650:	10000616 	blt	r2,zero,201666c <close+0x34>
 2016654:	e0bfff17 	ldw	r2,-4(fp)
 2016658:	10c00324 	muli	r3,r2,12
 201665c:	008080b4 	movhi	r2,514
 2016660:	108c8c04 	addi	r2,r2,12848
 2016664:	1885883a 	add	r2,r3,r2
 2016668:	00000106 	br	2016670 <close+0x38>
 201666c:	0005883a 	mov	r2,zero
 2016670:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2016674:	e0bffd17 	ldw	r2,-12(fp)
 2016678:	10001926 	beq	r2,zero,20166e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 201667c:	e0bffd17 	ldw	r2,-12(fp)
 2016680:	10800017 	ldw	r2,0(r2)
 2016684:	10800417 	ldw	r2,16(r2)
 2016688:	10000626 	beq	r2,zero,20166a4 <close+0x6c>
 201668c:	e0bffd17 	ldw	r2,-12(fp)
 2016690:	10800017 	ldw	r2,0(r2)
 2016694:	10800417 	ldw	r2,16(r2)
 2016698:	e13ffd17 	ldw	r4,-12(fp)
 201669c:	103ee83a 	callr	r2
 20166a0:	00000106 	br	20166a8 <close+0x70>
 20166a4:	0005883a 	mov	r2,zero
 20166a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20166ac:	e13fff17 	ldw	r4,-4(fp)
 20166b0:	2016cf00 	call	2016cf0 <alt_release_fd>
    if (rval < 0)
 20166b4:	e0bffe17 	ldw	r2,-8(fp)
 20166b8:	1000070e 	bge	r2,zero,20166d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20166bc:	20165fc0 	call	20165fc <alt_get_errno>
 20166c0:	1007883a 	mov	r3,r2
 20166c4:	e0bffe17 	ldw	r2,-8(fp)
 20166c8:	0085c83a 	sub	r2,zero,r2
 20166cc:	18800015 	stw	r2,0(r3)
      return -1;
 20166d0:	00bfffc4 	movi	r2,-1
 20166d4:	00000706 	br	20166f4 <close+0xbc>
    }
    return 0;
 20166d8:	0005883a 	mov	r2,zero
 20166dc:	00000506 	br	20166f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20166e0:	20165fc0 	call	20165fc <alt_get_errno>
 20166e4:	1007883a 	mov	r3,r2
 20166e8:	00801444 	movi	r2,81
 20166ec:	18800015 	stw	r2,0(r3)
    return -1;
 20166f0:	00bfffc4 	movi	r2,-1
  }
}
 20166f4:	e037883a 	mov	sp,fp
 20166f8:	dfc00117 	ldw	ra,4(sp)
 20166fc:	df000017 	ldw	fp,0(sp)
 2016700:	dec00204 	addi	sp,sp,8
 2016704:	f800283a 	ret

02016708 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2016708:	defffc04 	addi	sp,sp,-16
 201670c:	df000315 	stw	fp,12(sp)
 2016710:	df000304 	addi	fp,sp,12
 2016714:	e13ffd15 	stw	r4,-12(fp)
 2016718:	e17ffe15 	stw	r5,-8(fp)
 201671c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2016720:	e0bfff17 	ldw	r2,-4(fp)
}
 2016724:	e037883a 	mov	sp,fp
 2016728:	df000017 	ldw	fp,0(sp)
 201672c:	dec00104 	addi	sp,sp,4
 2016730:	f800283a 	ret

02016734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016734:	defffe04 	addi	sp,sp,-8
 2016738:	dfc00115 	stw	ra,4(sp)
 201673c:	df000015 	stw	fp,0(sp)
 2016740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016744:	d0a03b17 	ldw	r2,-32532(gp)
 2016748:	10000326 	beq	r2,zero,2016758 <alt_get_errno+0x24>
 201674c:	d0a03b17 	ldw	r2,-32532(gp)
 2016750:	103ee83a 	callr	r2
 2016754:	00000106 	br	201675c <alt_get_errno+0x28>
 2016758:	d0a79e04 	addi	r2,gp,-24968
}
 201675c:	e037883a 	mov	sp,fp
 2016760:	dfc00117 	ldw	ra,4(sp)
 2016764:	df000017 	ldw	fp,0(sp)
 2016768:	dec00204 	addi	sp,sp,8
 201676c:	f800283a 	ret

02016770 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2016770:	defffb04 	addi	sp,sp,-20
 2016774:	dfc00415 	stw	ra,16(sp)
 2016778:	df000315 	stw	fp,12(sp)
 201677c:	df000304 	addi	fp,sp,12
 2016780:	e13ffe15 	stw	r4,-8(fp)
 2016784:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016788:	e0bffe17 	ldw	r2,-8(fp)
 201678c:	10000616 	blt	r2,zero,20167a8 <fstat+0x38>
 2016790:	e0bffe17 	ldw	r2,-8(fp)
 2016794:	10c00324 	muli	r3,r2,12
 2016798:	008080b4 	movhi	r2,514
 201679c:	108c8c04 	addi	r2,r2,12848
 20167a0:	1885883a 	add	r2,r3,r2
 20167a4:	00000106 	br	20167ac <fstat+0x3c>
 20167a8:	0005883a 	mov	r2,zero
 20167ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20167b0:	e0bffd17 	ldw	r2,-12(fp)
 20167b4:	10001026 	beq	r2,zero,20167f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20167b8:	e0bffd17 	ldw	r2,-12(fp)
 20167bc:	10800017 	ldw	r2,0(r2)
 20167c0:	10800817 	ldw	r2,32(r2)
 20167c4:	10000726 	beq	r2,zero,20167e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20167c8:	e0bffd17 	ldw	r2,-12(fp)
 20167cc:	10800017 	ldw	r2,0(r2)
 20167d0:	10800817 	ldw	r2,32(r2)
 20167d4:	e17fff17 	ldw	r5,-4(fp)
 20167d8:	e13ffd17 	ldw	r4,-12(fp)
 20167dc:	103ee83a 	callr	r2
 20167e0:	00000a06 	br	201680c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20167e4:	e0bfff17 	ldw	r2,-4(fp)
 20167e8:	00c80004 	movi	r3,8192
 20167ec:	10c00115 	stw	r3,4(r2)
      return 0;
 20167f0:	0005883a 	mov	r2,zero
 20167f4:	00000506 	br	201680c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20167f8:	20167340 	call	2016734 <alt_get_errno>
 20167fc:	1007883a 	mov	r3,r2
 2016800:	00801444 	movi	r2,81
 2016804:	18800015 	stw	r2,0(r3)
    return -1;
 2016808:	00bfffc4 	movi	r2,-1
  }
}
 201680c:	e037883a 	mov	sp,fp
 2016810:	dfc00117 	ldw	ra,4(sp)
 2016814:	df000017 	ldw	fp,0(sp)
 2016818:	dec00204 	addi	sp,sp,8
 201681c:	f800283a 	ret

02016820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016820:	defffe04 	addi	sp,sp,-8
 2016824:	dfc00115 	stw	ra,4(sp)
 2016828:	df000015 	stw	fp,0(sp)
 201682c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016830:	d0a03b17 	ldw	r2,-32532(gp)
 2016834:	10000326 	beq	r2,zero,2016844 <alt_get_errno+0x24>
 2016838:	d0a03b17 	ldw	r2,-32532(gp)
 201683c:	103ee83a 	callr	r2
 2016840:	00000106 	br	2016848 <alt_get_errno+0x28>
 2016844:	d0a79e04 	addi	r2,gp,-24968
}
 2016848:	e037883a 	mov	sp,fp
 201684c:	dfc00117 	ldw	ra,4(sp)
 2016850:	df000017 	ldw	fp,0(sp)
 2016854:	dec00204 	addi	sp,sp,8
 2016858:	f800283a 	ret

0201685c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201685c:	deffed04 	addi	sp,sp,-76
 2016860:	dfc01215 	stw	ra,72(sp)
 2016864:	df001115 	stw	fp,68(sp)
 2016868:	df001104 	addi	fp,sp,68
 201686c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016870:	e0bfff17 	ldw	r2,-4(fp)
 2016874:	10000616 	blt	r2,zero,2016890 <isatty+0x34>
 2016878:	e0bfff17 	ldw	r2,-4(fp)
 201687c:	10c00324 	muli	r3,r2,12
 2016880:	008080b4 	movhi	r2,514
 2016884:	108c8c04 	addi	r2,r2,12848
 2016888:	1885883a 	add	r2,r3,r2
 201688c:	00000106 	br	2016894 <isatty+0x38>
 2016890:	0005883a 	mov	r2,zero
 2016894:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2016898:	e0bfef17 	ldw	r2,-68(fp)
 201689c:	10000e26 	beq	r2,zero,20168d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 20168a0:	e0bfef17 	ldw	r2,-68(fp)
 20168a4:	10800017 	ldw	r2,0(r2)
 20168a8:	10800817 	ldw	r2,32(r2)
 20168ac:	1000021e 	bne	r2,zero,20168b8 <isatty+0x5c>
    {
      return 1;
 20168b0:	00800044 	movi	r2,1
 20168b4:	00000d06 	br	20168ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20168b8:	e0bff004 	addi	r2,fp,-64
 20168bc:	100b883a 	mov	r5,r2
 20168c0:	e13fff17 	ldw	r4,-4(fp)
 20168c4:	20167700 	call	2016770 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20168c8:	e0bff117 	ldw	r2,-60(fp)
 20168cc:	10880020 	cmpeqi	r2,r2,8192
 20168d0:	10803fcc 	andi	r2,r2,255
 20168d4:	00000506 	br	20168ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20168d8:	20168200 	call	2016820 <alt_get_errno>
 20168dc:	1007883a 	mov	r3,r2
 20168e0:	00801444 	movi	r2,81
 20168e4:	18800015 	stw	r2,0(r3)
    return 0;
 20168e8:	0005883a 	mov	r2,zero
  }
}
 20168ec:	e037883a 	mov	sp,fp
 20168f0:	dfc00117 	ldw	ra,4(sp)
 20168f4:	df000017 	ldw	fp,0(sp)
 20168f8:	dec00204 	addi	sp,sp,8
 20168fc:	f800283a 	ret

02016900 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2016900:	defffc04 	addi	sp,sp,-16
 2016904:	df000315 	stw	fp,12(sp)
 2016908:	df000304 	addi	fp,sp,12
 201690c:	e13ffd15 	stw	r4,-12(fp)
 2016910:	e17ffe15 	stw	r5,-8(fp)
 2016914:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2016918:	e0fffe17 	ldw	r3,-8(fp)
 201691c:	e0bffd17 	ldw	r2,-12(fp)
 2016920:	18800c26 	beq	r3,r2,2016954 <alt_load_section+0x54>
  {
    while( to != end )
 2016924:	00000806 	br	2016948 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2016928:	e0bffe17 	ldw	r2,-8(fp)
 201692c:	10c00104 	addi	r3,r2,4
 2016930:	e0fffe15 	stw	r3,-8(fp)
 2016934:	e0fffd17 	ldw	r3,-12(fp)
 2016938:	19000104 	addi	r4,r3,4
 201693c:	e13ffd15 	stw	r4,-12(fp)
 2016940:	18c00017 	ldw	r3,0(r3)
 2016944:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2016948:	e0fffe17 	ldw	r3,-8(fp)
 201694c:	e0bfff17 	ldw	r2,-4(fp)
 2016950:	18bff51e 	bne	r3,r2,2016928 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2016954:	0001883a 	nop
 2016958:	e037883a 	mov	sp,fp
 201695c:	df000017 	ldw	fp,0(sp)
 2016960:	dec00104 	addi	sp,sp,4
 2016964:	f800283a 	ret

02016968 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2016968:	defffe04 	addi	sp,sp,-8
 201696c:	dfc00115 	stw	ra,4(sp)
 2016970:	df000015 	stw	fp,0(sp)
 2016974:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2016978:	018080b4 	movhi	r6,514
 201697c:	31917104 	addi	r6,r6,17860
 2016980:	014080b4 	movhi	r5,514
 2016984:	294a4d04 	addi	r5,r5,10548
 2016988:	010080b4 	movhi	r4,514
 201698c:	21117104 	addi	r4,r4,17860
 2016990:	20169000 	call	2016900 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2016994:	01808034 	movhi	r6,512
 2016998:	31809204 	addi	r6,r6,584
 201699c:	01408034 	movhi	r5,512
 20169a0:	29400804 	addi	r5,r5,32
 20169a4:	01008034 	movhi	r4,512
 20169a8:	21000804 	addi	r4,r4,32
 20169ac:	20169000 	call	2016900 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20169b0:	018080b4 	movhi	r6,514
 20169b4:	318a4d04 	addi	r6,r6,10548
 20169b8:	014080b4 	movhi	r5,514
 20169bc:	29477504 	addi	r5,r5,7636
 20169c0:	010080b4 	movhi	r4,514
 20169c4:	21077504 	addi	r4,r4,7636
 20169c8:	20169000 	call	2016900 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20169cc:	202089c0 	call	202089c <alt_dcache_flush_all>
  alt_icache_flush_all();
 20169d0:	2020b140 	call	2020b14 <alt_icache_flush_all>
}
 20169d4:	0001883a 	nop
 20169d8:	e037883a 	mov	sp,fp
 20169dc:	dfc00117 	ldw	ra,4(sp)
 20169e0:	df000017 	ldw	fp,0(sp)
 20169e4:	dec00204 	addi	sp,sp,8
 20169e8:	f800283a 	ret

020169ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20169ec:	defffe04 	addi	sp,sp,-8
 20169f0:	dfc00115 	stw	ra,4(sp)
 20169f4:	df000015 	stw	fp,0(sp)
 20169f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20169fc:	d0a03b17 	ldw	r2,-32532(gp)
 2016a00:	10000326 	beq	r2,zero,2016a10 <alt_get_errno+0x24>
 2016a04:	d0a03b17 	ldw	r2,-32532(gp)
 2016a08:	103ee83a 	callr	r2
 2016a0c:	00000106 	br	2016a14 <alt_get_errno+0x28>
 2016a10:	d0a79e04 	addi	r2,gp,-24968
}
 2016a14:	e037883a 	mov	sp,fp
 2016a18:	dfc00117 	ldw	ra,4(sp)
 2016a1c:	df000017 	ldw	fp,0(sp)
 2016a20:	dec00204 	addi	sp,sp,8
 2016a24:	f800283a 	ret

02016a28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2016a28:	defff904 	addi	sp,sp,-28
 2016a2c:	dfc00615 	stw	ra,24(sp)
 2016a30:	df000515 	stw	fp,20(sp)
 2016a34:	df000504 	addi	fp,sp,20
 2016a38:	e13ffd15 	stw	r4,-12(fp)
 2016a3c:	e17ffe15 	stw	r5,-8(fp)
 2016a40:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2016a44:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016a48:	e0bffd17 	ldw	r2,-12(fp)
 2016a4c:	10000616 	blt	r2,zero,2016a68 <lseek+0x40>
 2016a50:	e0bffd17 	ldw	r2,-12(fp)
 2016a54:	10c00324 	muli	r3,r2,12
 2016a58:	008080b4 	movhi	r2,514
 2016a5c:	108c8c04 	addi	r2,r2,12848
 2016a60:	1885883a 	add	r2,r3,r2
 2016a64:	00000106 	br	2016a6c <lseek+0x44>
 2016a68:	0005883a 	mov	r2,zero
 2016a6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2016a70:	e0bffc17 	ldw	r2,-16(fp)
 2016a74:	10001026 	beq	r2,zero,2016ab8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2016a78:	e0bffc17 	ldw	r2,-16(fp)
 2016a7c:	10800017 	ldw	r2,0(r2)
 2016a80:	10800717 	ldw	r2,28(r2)
 2016a84:	10000926 	beq	r2,zero,2016aac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2016a88:	e0bffc17 	ldw	r2,-16(fp)
 2016a8c:	10800017 	ldw	r2,0(r2)
 2016a90:	10800717 	ldw	r2,28(r2)
 2016a94:	e1bfff17 	ldw	r6,-4(fp)
 2016a98:	e17ffe17 	ldw	r5,-8(fp)
 2016a9c:	e13ffc17 	ldw	r4,-16(fp)
 2016aa0:	103ee83a 	callr	r2
 2016aa4:	e0bffb15 	stw	r2,-20(fp)
 2016aa8:	00000506 	br	2016ac0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2016aac:	00bfde84 	movi	r2,-134
 2016ab0:	e0bffb15 	stw	r2,-20(fp)
 2016ab4:	00000206 	br	2016ac0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2016ab8:	00bfebc4 	movi	r2,-81
 2016abc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2016ac0:	e0bffb17 	ldw	r2,-20(fp)
 2016ac4:	1000070e 	bge	r2,zero,2016ae4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 2016ac8:	20169ec0 	call	20169ec <alt_get_errno>
 2016acc:	1007883a 	mov	r3,r2
 2016ad0:	e0bffb17 	ldw	r2,-20(fp)
 2016ad4:	0085c83a 	sub	r2,zero,r2
 2016ad8:	18800015 	stw	r2,0(r3)
    rc = -1;
 2016adc:	00bfffc4 	movi	r2,-1
 2016ae0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2016ae4:	e0bffb17 	ldw	r2,-20(fp)
}
 2016ae8:	e037883a 	mov	sp,fp
 2016aec:	dfc00117 	ldw	ra,4(sp)
 2016af0:	df000017 	ldw	fp,0(sp)
 2016af4:	dec00204 	addi	sp,sp,8
 2016af8:	f800283a 	ret

02016afc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2016afc:	defff904 	addi	sp,sp,-28
 2016b00:	dfc00615 	stw	ra,24(sp)
 2016b04:	df000515 	stw	fp,20(sp)
 2016b08:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2016b0c:	0009883a 	mov	r4,zero
 2016b10:	201f5080 	call	201f508 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2016b14:	2017ab80 	call	2017ab8 <OSInit>
 2016b18:	01000044 	movi	r4,1
 2016b1c:	201ced00 	call	201ced0 <OSSemCreate>
 2016b20:	d0a7a415 	stw	r2,-24944(gp)
 2016b24:	01000044 	movi	r4,1
 2016b28:	201ced00 	call	201ced0 <OSSemCreate>
 2016b2c:	d0a7a615 	stw	r2,-24936(gp)
 2016b30:	d0a79f04 	addi	r2,gp,-24964
 2016b34:	e0bffc15 	stw	r2,-16(fp)
 2016b38:	00800044 	movi	r2,1
 2016b3c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2016b40:	e0bffd0b 	ldhu	r2,-12(fp)
 2016b44:	1009883a 	mov	r4,r2
 2016b48:	201ced00 	call	201ced0 <OSSemCreate>
 2016b4c:	1007883a 	mov	r3,r2
 2016b50:	e0bffc17 	ldw	r2,-16(fp)
 2016b54:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2016b58:	201f5400 	call	201f540 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2016b5c:	018080b4 	movhi	r6,514
 2016b60:	3189f504 	addi	r6,r6,10196
 2016b64:	014080b4 	movhi	r5,514
 2016b68:	2949f504 	addi	r5,r5,10196
 2016b6c:	010080b4 	movhi	r4,514
 2016b70:	2109f504 	addi	r4,r4,10196
 2016b74:	2020c0c0 	call	2020c0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2016b78:	20209c40 	call	20209c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2016b7c:	010080b4 	movhi	r4,514
 2016b80:	21028904 	addi	r4,r4,2596
 2016b84:	202188c0 	call	202188c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2016b88:	d0a7a017 	ldw	r2,-24960(gp)
 2016b8c:	d0e7a117 	ldw	r3,-24956(gp)
 2016b90:	d127a217 	ldw	r4,-24952(gp)
 2016b94:	200d883a 	mov	r6,r4
 2016b98:	180b883a 	mov	r5,r3
 2016b9c:	1009883a 	mov	r4,r2
 2016ba0:	2002c5c0 	call	2002c5c <main>
 2016ba4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2016ba8:	01000044 	movi	r4,1
 2016bac:	20166380 	call	2016638 <close>
  exit (result);
 2016bb0:	e13ffb17 	ldw	r4,-20(fp)
 2016bb4:	20218c80 	call	20218c8 <exit>

02016bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016bb8:	defffe04 	addi	sp,sp,-8
 2016bbc:	dfc00115 	stw	ra,4(sp)
 2016bc0:	df000015 	stw	fp,0(sp)
 2016bc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016bc8:	d0a03b17 	ldw	r2,-32532(gp)
 2016bcc:	10000326 	beq	r2,zero,2016bdc <alt_get_errno+0x24>
 2016bd0:	d0a03b17 	ldw	r2,-32532(gp)
 2016bd4:	103ee83a 	callr	r2
 2016bd8:	00000106 	br	2016be0 <alt_get_errno+0x28>
 2016bdc:	d0a79e04 	addi	r2,gp,-24968
}
 2016be0:	e037883a 	mov	sp,fp
 2016be4:	dfc00117 	ldw	ra,4(sp)
 2016be8:	df000017 	ldw	fp,0(sp)
 2016bec:	dec00204 	addi	sp,sp,8
 2016bf0:	f800283a 	ret

02016bf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2016bf4:	defff904 	addi	sp,sp,-28
 2016bf8:	dfc00615 	stw	ra,24(sp)
 2016bfc:	df000515 	stw	fp,20(sp)
 2016c00:	df000504 	addi	fp,sp,20
 2016c04:	e13ffd15 	stw	r4,-12(fp)
 2016c08:	e17ffe15 	stw	r5,-8(fp)
 2016c0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016c10:	e0bffd17 	ldw	r2,-12(fp)
 2016c14:	10000616 	blt	r2,zero,2016c30 <read+0x3c>
 2016c18:	e0bffd17 	ldw	r2,-12(fp)
 2016c1c:	10c00324 	muli	r3,r2,12
 2016c20:	008080b4 	movhi	r2,514
 2016c24:	108c8c04 	addi	r2,r2,12848
 2016c28:	1885883a 	add	r2,r3,r2
 2016c2c:	00000106 	br	2016c34 <read+0x40>
 2016c30:	0005883a 	mov	r2,zero
 2016c34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2016c38:	e0bffb17 	ldw	r2,-20(fp)
 2016c3c:	10002226 	beq	r2,zero,2016cc8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016c40:	e0bffb17 	ldw	r2,-20(fp)
 2016c44:	10800217 	ldw	r2,8(r2)
 2016c48:	108000cc 	andi	r2,r2,3
 2016c4c:	10800060 	cmpeqi	r2,r2,1
 2016c50:	1000181e 	bne	r2,zero,2016cb4 <read+0xc0>
        (fd->dev->read))
 2016c54:	e0bffb17 	ldw	r2,-20(fp)
 2016c58:	10800017 	ldw	r2,0(r2)
 2016c5c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016c60:	10001426 	beq	r2,zero,2016cb4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2016c64:	e0bffb17 	ldw	r2,-20(fp)
 2016c68:	10800017 	ldw	r2,0(r2)
 2016c6c:	10800517 	ldw	r2,20(r2)
 2016c70:	e0ffff17 	ldw	r3,-4(fp)
 2016c74:	180d883a 	mov	r6,r3
 2016c78:	e17ffe17 	ldw	r5,-8(fp)
 2016c7c:	e13ffb17 	ldw	r4,-20(fp)
 2016c80:	103ee83a 	callr	r2
 2016c84:	e0bffc15 	stw	r2,-16(fp)
 2016c88:	e0bffc17 	ldw	r2,-16(fp)
 2016c8c:	1000070e 	bge	r2,zero,2016cac <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2016c90:	2016bb80 	call	2016bb8 <alt_get_errno>
 2016c94:	1007883a 	mov	r3,r2
 2016c98:	e0bffc17 	ldw	r2,-16(fp)
 2016c9c:	0085c83a 	sub	r2,zero,r2
 2016ca0:	18800015 	stw	r2,0(r3)
          return -1;
 2016ca4:	00bfffc4 	movi	r2,-1
 2016ca8:	00000c06 	br	2016cdc <read+0xe8>
        }
        return rval;
 2016cac:	e0bffc17 	ldw	r2,-16(fp)
 2016cb0:	00000a06 	br	2016cdc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2016cb4:	2016bb80 	call	2016bb8 <alt_get_errno>
 2016cb8:	1007883a 	mov	r3,r2
 2016cbc:	00800344 	movi	r2,13
 2016cc0:	18800015 	stw	r2,0(r3)
 2016cc4:	00000406 	br	2016cd8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2016cc8:	2016bb80 	call	2016bb8 <alt_get_errno>
 2016ccc:	1007883a 	mov	r3,r2
 2016cd0:	00801444 	movi	r2,81
 2016cd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016cd8:	00bfffc4 	movi	r2,-1
}
 2016cdc:	e037883a 	mov	sp,fp
 2016ce0:	dfc00117 	ldw	ra,4(sp)
 2016ce4:	df000017 	ldw	fp,0(sp)
 2016ce8:	dec00204 	addi	sp,sp,8
 2016cec:	f800283a 	ret

02016cf0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2016cf0:	defffe04 	addi	sp,sp,-8
 2016cf4:	df000115 	stw	fp,4(sp)
 2016cf8:	df000104 	addi	fp,sp,4
 2016cfc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2016d00:	e0bfff17 	ldw	r2,-4(fp)
 2016d04:	108000d0 	cmplti	r2,r2,3
 2016d08:	10000d1e 	bne	r2,zero,2016d40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2016d0c:	008080b4 	movhi	r2,514
 2016d10:	108c8c04 	addi	r2,r2,12848
 2016d14:	e0ffff17 	ldw	r3,-4(fp)
 2016d18:	18c00324 	muli	r3,r3,12
 2016d1c:	10c5883a 	add	r2,r2,r3
 2016d20:	10800204 	addi	r2,r2,8
 2016d24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2016d28:	008080b4 	movhi	r2,514
 2016d2c:	108c8c04 	addi	r2,r2,12848
 2016d30:	e0ffff17 	ldw	r3,-4(fp)
 2016d34:	18c00324 	muli	r3,r3,12
 2016d38:	10c5883a 	add	r2,r2,r3
 2016d3c:	10000015 	stw	zero,0(r2)
  }
}
 2016d40:	0001883a 	nop
 2016d44:	e037883a 	mov	sp,fp
 2016d48:	df000017 	ldw	fp,0(sp)
 2016d4c:	dec00104 	addi	sp,sp,4
 2016d50:	f800283a 	ret

02016d54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2016d54:	defff904 	addi	sp,sp,-28
 2016d58:	df000615 	stw	fp,24(sp)
 2016d5c:	df000604 	addi	fp,sp,24
 2016d60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d64:	0005303a 	rdctl	r2,status
 2016d68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d6c:	e0fffe17 	ldw	r3,-8(fp)
 2016d70:	00bfff84 	movi	r2,-2
 2016d74:	1884703a 	and	r2,r3,r2
 2016d78:	1001703a 	wrctl	status,r2
  
  return context;
 2016d7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2016d80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2016d84:	d0a03c17 	ldw	r2,-32528(gp)
 2016d88:	10c000c4 	addi	r3,r2,3
 2016d8c:	00bfff04 	movi	r2,-4
 2016d90:	1884703a 	and	r2,r3,r2
 2016d94:	d0a03c15 	stw	r2,-32528(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2016d98:	d0e03c17 	ldw	r3,-32528(gp)
 2016d9c:	e0bfff17 	ldw	r2,-4(fp)
 2016da0:	1887883a 	add	r3,r3,r2
 2016da4:	00810034 	movhi	r2,1024
 2016da8:	10800004 	addi	r2,r2,0
 2016dac:	10c0062e 	bgeu	r2,r3,2016dc8 <sbrk+0x74>
 2016db0:	e0bffb17 	ldw	r2,-20(fp)
 2016db4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016db8:	e0bffa17 	ldw	r2,-24(fp)
 2016dbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2016dc0:	00bfffc4 	movi	r2,-1
 2016dc4:	00000b06 	br	2016df4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2016dc8:	d0a03c17 	ldw	r2,-32528(gp)
 2016dcc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2016dd0:	d0e03c17 	ldw	r3,-32528(gp)
 2016dd4:	e0bfff17 	ldw	r2,-4(fp)
 2016dd8:	1885883a 	add	r2,r3,r2
 2016ddc:	d0a03c15 	stw	r2,-32528(gp)
 2016de0:	e0bffb17 	ldw	r2,-20(fp)
 2016de4:	e0bffc15 	stw	r2,-16(fp)
 2016de8:	e0bffc17 	ldw	r2,-16(fp)
 2016dec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2016df0:	e0bffd17 	ldw	r2,-12(fp)
} 
 2016df4:	e037883a 	mov	sp,fp
 2016df8:	df000017 	ldw	fp,0(sp)
 2016dfc:	dec00104 	addi	sp,sp,4
 2016e00:	f800283a 	ret

02016e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016e04:	defffe04 	addi	sp,sp,-8
 2016e08:	dfc00115 	stw	ra,4(sp)
 2016e0c:	df000015 	stw	fp,0(sp)
 2016e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016e14:	d0a03b17 	ldw	r2,-32532(gp)
 2016e18:	10000326 	beq	r2,zero,2016e28 <alt_get_errno+0x24>
 2016e1c:	d0a03b17 	ldw	r2,-32532(gp)
 2016e20:	103ee83a 	callr	r2
 2016e24:	00000106 	br	2016e2c <alt_get_errno+0x28>
 2016e28:	d0a79e04 	addi	r2,gp,-24968
}
 2016e2c:	e037883a 	mov	sp,fp
 2016e30:	dfc00117 	ldw	ra,4(sp)
 2016e34:	df000017 	ldw	fp,0(sp)
 2016e38:	dec00204 	addi	sp,sp,8
 2016e3c:	f800283a 	ret

02016e40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2016e40:	defff904 	addi	sp,sp,-28
 2016e44:	dfc00615 	stw	ra,24(sp)
 2016e48:	df000515 	stw	fp,20(sp)
 2016e4c:	df000504 	addi	fp,sp,20
 2016e50:	e13ffd15 	stw	r4,-12(fp)
 2016e54:	e17ffe15 	stw	r5,-8(fp)
 2016e58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016e5c:	e0bffd17 	ldw	r2,-12(fp)
 2016e60:	10000616 	blt	r2,zero,2016e7c <write+0x3c>
 2016e64:	e0bffd17 	ldw	r2,-12(fp)
 2016e68:	10c00324 	muli	r3,r2,12
 2016e6c:	008080b4 	movhi	r2,514
 2016e70:	108c8c04 	addi	r2,r2,12848
 2016e74:	1885883a 	add	r2,r3,r2
 2016e78:	00000106 	br	2016e80 <write+0x40>
 2016e7c:	0005883a 	mov	r2,zero
 2016e80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2016e84:	e0bffb17 	ldw	r2,-20(fp)
 2016e88:	10002126 	beq	r2,zero,2016f10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2016e8c:	e0bffb17 	ldw	r2,-20(fp)
 2016e90:	10800217 	ldw	r2,8(r2)
 2016e94:	108000cc 	andi	r2,r2,3
 2016e98:	10001826 	beq	r2,zero,2016efc <write+0xbc>
 2016e9c:	e0bffb17 	ldw	r2,-20(fp)
 2016ea0:	10800017 	ldw	r2,0(r2)
 2016ea4:	10800617 	ldw	r2,24(r2)
 2016ea8:	10001426 	beq	r2,zero,2016efc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2016eac:	e0bffb17 	ldw	r2,-20(fp)
 2016eb0:	10800017 	ldw	r2,0(r2)
 2016eb4:	10800617 	ldw	r2,24(r2)
 2016eb8:	e0ffff17 	ldw	r3,-4(fp)
 2016ebc:	180d883a 	mov	r6,r3
 2016ec0:	e17ffe17 	ldw	r5,-8(fp)
 2016ec4:	e13ffb17 	ldw	r4,-20(fp)
 2016ec8:	103ee83a 	callr	r2
 2016ecc:	e0bffc15 	stw	r2,-16(fp)
 2016ed0:	e0bffc17 	ldw	r2,-16(fp)
 2016ed4:	1000070e 	bge	r2,zero,2016ef4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2016ed8:	2016e040 	call	2016e04 <alt_get_errno>
 2016edc:	1007883a 	mov	r3,r2
 2016ee0:	e0bffc17 	ldw	r2,-16(fp)
 2016ee4:	0085c83a 	sub	r2,zero,r2
 2016ee8:	18800015 	stw	r2,0(r3)
        return -1;
 2016eec:	00bfffc4 	movi	r2,-1
 2016ef0:	00000c06 	br	2016f24 <write+0xe4>
      }
      return rval;
 2016ef4:	e0bffc17 	ldw	r2,-16(fp)
 2016ef8:	00000a06 	br	2016f24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2016efc:	2016e040 	call	2016e04 <alt_get_errno>
 2016f00:	1007883a 	mov	r3,r2
 2016f04:	00800344 	movi	r2,13
 2016f08:	18800015 	stw	r2,0(r3)
 2016f0c:	00000406 	br	2016f20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2016f10:	2016e040 	call	2016e04 <alt_get_errno>
 2016f14:	1007883a 	mov	r3,r2
 2016f18:	00801444 	movi	r2,81
 2016f1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016f20:	00bfffc4 	movi	r2,-1
}
 2016f24:	e037883a 	mov	sp,fp
 2016f28:	dfc00117 	ldw	ra,4(sp)
 2016f2c:	df000017 	ldw	fp,0(sp)
 2016f30:	dec00204 	addi	sp,sp,8
 2016f34:	f800283a 	ret

02016f38 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2016f38:	deffdf04 	addi	sp,sp,-132
 2016f3c:	dfc02015 	stw	ra,128(sp)
 2016f40:	df001f15 	stw	fp,124(sp)
 2016f44:	df001f04 	addi	fp,sp,124
 2016f48:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2016f4c:	e0bfe204 	addi	r2,fp,-120
 2016f50:	100b883a 	mov	r5,r2
 2016f54:	01003fc4 	movi	r4,255
 2016f58:	201ee580 	call	201ee58 <OSTaskQuery>
 2016f5c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2016f60:	e0bffe83 	ldbu	r2,-6(fp)
 2016f64:	10803fcc 	andi	r2,r2,255
 2016f68:	10001e1e 	bne	r2,zero,2016fe4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2016f6c:	e0bfee83 	ldbu	r2,-70(fp)
 2016f70:	10803fcc 	andi	r2,r2,255
 2016f74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2016f78:	d0a7a417 	ldw	r2,-24944(gp)
 2016f7c:	e0fffd04 	addi	r3,fp,-12
 2016f80:	180b883a 	mov	r5,r3
 2016f84:	1009883a 	mov	r4,r2
 2016f88:	201d6700 	call	201d670 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2016f8c:	e0bffe43 	ldbu	r2,-7(fp)
 2016f90:	10803fcc 	andi	r2,r2,255
 2016f94:	10000726 	beq	r2,zero,2016fb4 <__env_lock+0x7c>
 2016f98:	d0a03d17 	ldw	r2,-32524(gp)
 2016f9c:	e0ffe117 	ldw	r3,-124(fp)
 2016fa0:	1880041e 	bne	r3,r2,2016fb4 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2016fa4:	d0a7a317 	ldw	r2,-24948(gp)
 2016fa8:	10800044 	addi	r2,r2,1
 2016fac:	d0a7a315 	stw	r2,-24948(gp)
 2016fb0:	00000a06 	br	2016fdc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2016fb4:	d0a7a417 	ldw	r2,-24944(gp)
 2016fb8:	e0fffe84 	addi	r3,fp,-6
 2016fbc:	180d883a 	mov	r6,r3
 2016fc0:	000b883a 	mov	r5,zero
 2016fc4:	1009883a 	mov	r4,r2
 2016fc8:	201d1e80 	call	201d1e8 <OSSemPend>
    locks  = 1;
 2016fcc:	00800044 	movi	r2,1
 2016fd0:	d0a7a315 	stw	r2,-24948(gp)
    lockid = id;
 2016fd4:	e0bfe117 	ldw	r2,-124(fp)
 2016fd8:	d0a03d15 	stw	r2,-32524(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2016fdc:	0001883a 	nop
 2016fe0:	00000106 	br	2016fe8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2016fe4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2016fe8:	e037883a 	mov	sp,fp
 2016fec:	dfc00117 	ldw	ra,4(sp)
 2016ff0:	df000017 	ldw	fp,0(sp)
 2016ff4:	dec00204 	addi	sp,sp,8
 2016ff8:	f800283a 	ret

02016ffc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2016ffc:	defffd04 	addi	sp,sp,-12
 2017000:	dfc00215 	stw	ra,8(sp)
 2017004:	df000115 	stw	fp,4(sp)
 2017008:	df000104 	addi	fp,sp,4
 201700c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2017010:	d0a7a317 	ldw	r2,-24948(gp)
 2017014:	10000b26 	beq	r2,zero,2017044 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2017018:	d0a7a317 	ldw	r2,-24948(gp)
 201701c:	10bfffc4 	addi	r2,r2,-1
 2017020:	d0a7a315 	stw	r2,-24948(gp)
 2017024:	d0a7a317 	ldw	r2,-24948(gp)
 2017028:	1000071e 	bne	r2,zero,2017048 <__env_unlock+0x4c>
  {
    lockid = -1;
 201702c:	00bfffc4 	movi	r2,-1
 2017030:	d0a03d15 	stw	r2,-32524(gp)
    OSSemPost( alt_envsem );
 2017034:	d0a7a417 	ldw	r2,-24944(gp)
 2017038:	1009883a 	mov	r4,r2
 201703c:	201d5600 	call	201d560 <OSSemPost>
 2017040:	00000106 	br	2017048 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2017044:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2017048:	e037883a 	mov	sp,fp
 201704c:	dfc00117 	ldw	ra,4(sp)
 2017050:	df000017 	ldw	fp,0(sp)
 2017054:	dec00204 	addi	sp,sp,8
 2017058:	f800283a 	ret

0201705c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 201705c:	deffdb04 	addi	sp,sp,-148
 2017060:	dfc02415 	stw	ra,144(sp)
 2017064:	df002315 	stw	fp,140(sp)
 2017068:	df002304 	addi	fp,sp,140
 201706c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017070:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2017074:	d0a7a743 	ldbu	r2,-24931(gp)
 2017078:	10803fcc 	andi	r2,r2,255
 201707c:	10800060 	cmpeqi	r2,r2,1
 2017080:	10003626 	beq	r2,zero,201715c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2017084:	e0bfe204 	addi	r2,fp,-120
 2017088:	100b883a 	mov	r5,r2
 201708c:	01003fc4 	movi	r4,255
 2017090:	201ee580 	call	201ee58 <OSTaskQuery>
 2017094:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2017098:	e0bffe83 	ldbu	r2,-6(fp)
 201709c:	10803fcc 	andi	r2,r2,255
 20170a0:	1000301e 	bne	r2,zero,2017164 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 20170a4:	e0bfee83 	ldbu	r2,-70(fp)
 20170a8:	10803fcc 	andi	r2,r2,255
 20170ac:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 20170b0:	d0a7a617 	ldw	r2,-24936(gp)
 20170b4:	e0fffd04 	addi	r3,fp,-12
 20170b8:	180b883a 	mov	r5,r3
 20170bc:	1009883a 	mov	r4,r2
 20170c0:	201d6700 	call	201d670 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20170c4:	0005303a 	rdctl	r2,status
 20170c8:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20170cc:	e0ffe117 	ldw	r3,-124(fp)
 20170d0:	00bfff84 	movi	r2,-2
 20170d4:	1884703a 	and	r2,r3,r2
 20170d8:	1001703a 	wrctl	status,r2
  
  return context;
 20170dc:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 20170e0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 20170e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20170e8:	10bfffcc 	andi	r2,r2,65535
 20170ec:	10000b1e 	bne	r2,zero,201711c <__malloc_lock+0xc0>
 20170f0:	d0a03e17 	ldw	r2,-32520(gp)
 20170f4:	e0ffde17 	ldw	r3,-136(fp)
 20170f8:	1880081e 	bne	r3,r2,201711c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 20170fc:	d0a7a517 	ldw	r2,-24940(gp)
 2017100:	10800044 	addi	r2,r2,1
 2017104:	d0a7a515 	stw	r2,-24940(gp)
 2017108:	e0bfdd17 	ldw	r2,-140(fp)
 201710c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017110:	e0bfdf17 	ldw	r2,-132(fp)
 2017114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2017118:	00000e06 	br	2017154 <__malloc_lock+0xf8>
 201711c:	e0bfdd17 	ldw	r2,-140(fp)
 2017120:	e0bfe015 	stw	r2,-128(fp)
 2017124:	e0bfe017 	ldw	r2,-128(fp)
 2017128:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 201712c:	d0a7a617 	ldw	r2,-24936(gp)
 2017130:	e0fffe84 	addi	r3,fp,-6
 2017134:	180d883a 	mov	r6,r3
 2017138:	000b883a 	mov	r5,zero
 201713c:	1009883a 	mov	r4,r2
 2017140:	201d1e80 	call	201d1e8 <OSSemPend>
    locks  = 1;
 2017144:	00800044 	movi	r2,1
 2017148:	d0a7a515 	stw	r2,-24940(gp)
    lockid = id;
 201714c:	e0bfde17 	ldw	r2,-136(fp)
 2017150:	d0a03e15 	stw	r2,-32520(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2017154:	0001883a 	nop
 2017158:	00000306 	br	2017168 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 201715c:	0001883a 	nop
 2017160:	00000106 	br	2017168 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2017164:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2017168:	e037883a 	mov	sp,fp
 201716c:	dfc00117 	ldw	ra,4(sp)
 2017170:	df000017 	ldw	fp,0(sp)
 2017174:	dec00204 	addi	sp,sp,8
 2017178:	f800283a 	ret

0201717c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 201717c:	defff804 	addi	sp,sp,-32
 2017180:	dfc00715 	stw	ra,28(sp)
 2017184:	df000615 	stw	fp,24(sp)
 2017188:	df000604 	addi	fp,sp,24
 201718c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017190:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2017194:	d0a7a743 	ldbu	r2,-24931(gp)
 2017198:	10803fcc 	andi	r2,r2,255
 201719c:	10800060 	cmpeqi	r2,r2,1
 20171a0:	10002326 	beq	r2,zero,2017230 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20171a4:	0005303a 	rdctl	r2,status
 20171a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20171ac:	e0fffe17 	ldw	r3,-8(fp)
 20171b0:	00bfff84 	movi	r2,-2
 20171b4:	1884703a 	and	r2,r3,r2
 20171b8:	1001703a 	wrctl	status,r2
  
  return context;
 20171bc:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 20171c0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 20171c4:	d0a7a517 	ldw	r2,-24940(gp)
 20171c8:	1000051e 	bne	r2,zero,20171e0 <__malloc_unlock+0x64>
 20171cc:	e0bffa17 	ldw	r2,-24(fp)
 20171d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20171d4:	e0bffb17 	ldw	r2,-20(fp)
 20171d8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 20171dc:	00001506 	br	2017234 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 20171e0:	d0a7a517 	ldw	r2,-24940(gp)
 20171e4:	10bfffc4 	addi	r2,r2,-1
 20171e8:	d0a7a515 	stw	r2,-24940(gp)
 20171ec:	d0a7a517 	ldw	r2,-24940(gp)
 20171f0:	10000a1e 	bne	r2,zero,201721c <__malloc_unlock+0xa0>
  {
    lockid = -1;
 20171f4:	00bfffc4 	movi	r2,-1
 20171f8:	d0a03e15 	stw	r2,-32520(gp)
 20171fc:	e0bffa17 	ldw	r2,-24(fp)
 2017200:	e0bffc15 	stw	r2,-16(fp)
 2017204:	e0bffc17 	ldw	r2,-16(fp)
 2017208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 201720c:	d0a7a617 	ldw	r2,-24936(gp)
 2017210:	1009883a 	mov	r4,r2
 2017214:	201d5600 	call	201d560 <OSSemPost>
 2017218:	00000606 	br	2017234 <__malloc_unlock+0xb8>
 201721c:	e0bffa17 	ldw	r2,-24(fp)
 2017220:	e0bffd15 	stw	r2,-12(fp)
 2017224:	e0bffd17 	ldw	r2,-12(fp)
 2017228:	1001703a 	wrctl	status,r2
 201722c:	00000106 	br	2017234 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2017230:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2017234:	e037883a 	mov	sp,fp
 2017238:	dfc00117 	ldw	ra,4(sp)
 201723c:	df000017 	ldw	fp,0(sp)
 2017240:	dec00204 	addi	sp,sp,8
 2017244:	f800283a 	ret

02017248 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2017248:	defff704 	addi	sp,sp,-36
 201724c:	dfc00815 	stw	ra,32(sp)
 2017250:	df000715 	stw	fp,28(sp)
 2017254:	df000704 	addi	fp,sp,28
 2017258:	e13ffd15 	stw	r4,-12(fp)
 201725c:	e17ffe15 	stw	r5,-8(fp)
 2017260:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017264:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017268:	e0bfff17 	ldw	r2,-4(fp)
 201726c:	1000021e 	bne	r2,zero,2017278 <OSEventNameGet+0x30>
        return (0);
 2017270:	0005883a 	mov	r2,zero
 2017274:	00003706 	br	2017354 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2017278:	e0bffd17 	ldw	r2,-12(fp)
 201727c:	1000051e 	bne	r2,zero,2017294 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2017280:	e0bfff17 	ldw	r2,-4(fp)
 2017284:	00c00104 	movi	r3,4
 2017288:	10c00005 	stb	r3,0(r2)
        return (0);
 201728c:	0005883a 	mov	r2,zero
 2017290:	00003006 	br	2017354 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2017294:	e0bffe17 	ldw	r2,-8(fp)
 2017298:	1000051e 	bne	r2,zero,20172b0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201729c:	e0bfff17 	ldw	r2,-4(fp)
 20172a0:	00c00304 	movi	r3,12
 20172a4:	10c00005 	stb	r3,0(r2)
        return (0);
 20172a8:	0005883a 	mov	r2,zero
 20172ac:	00002906 	br	2017354 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20172b0:	d0a7b503 	ldbu	r2,-24876(gp)
 20172b4:	10803fcc 	andi	r2,r2,255
 20172b8:	10000526 	beq	r2,zero,20172d0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 20172bc:	e0bfff17 	ldw	r2,-4(fp)
 20172c0:	00c00444 	movi	r3,17
 20172c4:	10c00005 	stb	r3,0(r2)
        return (0);
 20172c8:	0005883a 	mov	r2,zero
 20172cc:	00002106 	br	2017354 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 20172d0:	e0bffd17 	ldw	r2,-12(fp)
 20172d4:	10800003 	ldbu	r2,0(r2)
 20172d8:	10803fcc 	andi	r2,r2,255
 20172dc:	10bfffc4 	addi	r2,r2,-1
 20172e0:	10800128 	cmpgeui	r2,r2,4
 20172e4:	10000526 	beq	r2,zero,20172fc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20172e8:	e0bfff17 	ldw	r2,-4(fp)
 20172ec:	00c00044 	movi	r3,1
 20172f0:	10c00005 	stb	r3,0(r2)
             return (0);
 20172f4:	0005883a 	mov	r2,zero
 20172f8:	00001606 	br	2017354 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 20172fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017300:	0005303a 	rdctl	r2,status
 2017304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017308:	e0fffb17 	ldw	r3,-20(fp)
 201730c:	00bfff84 	movi	r2,-2
 2017310:	1884703a 	and	r2,r3,r2
 2017314:	1001703a 	wrctl	status,r2
  
  return context;
 2017318:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 201731c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2017320:	e0bffd17 	ldw	r2,-12(fp)
 2017324:	10800384 	addi	r2,r2,14
 2017328:	100b883a 	mov	r5,r2
 201732c:	e13ffe17 	ldw	r4,-8(fp)
 2017330:	2018ccc0 	call	2018ccc <OS_StrCopy>
 2017334:	e0bffa05 	stb	r2,-24(fp)
 2017338:	e0bff917 	ldw	r2,-28(fp)
 201733c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017340:	e0bffc17 	ldw	r2,-16(fp)
 2017344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017348:	e0bfff17 	ldw	r2,-4(fp)
 201734c:	10000005 	stb	zero,0(r2)
    return (len);
 2017350:	e0bffa03 	ldbu	r2,-24(fp)
}
 2017354:	e037883a 	mov	sp,fp
 2017358:	dfc00117 	ldw	ra,4(sp)
 201735c:	df000017 	ldw	fp,0(sp)
 2017360:	dec00204 	addi	sp,sp,8
 2017364:	f800283a 	ret

02017368 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2017368:	defff604 	addi	sp,sp,-40
 201736c:	dfc00915 	stw	ra,36(sp)
 2017370:	df000815 	stw	fp,32(sp)
 2017374:	df000804 	addi	fp,sp,32
 2017378:	e13ffd15 	stw	r4,-12(fp)
 201737c:	e17ffe15 	stw	r5,-8(fp)
 2017380:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017388:	e0bfff17 	ldw	r2,-4(fp)
 201738c:	10004026 	beq	r2,zero,2017490 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2017390:	e0bffd17 	ldw	r2,-12(fp)
 2017394:	1000041e 	bne	r2,zero,20173a8 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2017398:	e0bfff17 	ldw	r2,-4(fp)
 201739c:	00c00104 	movi	r3,4
 20173a0:	10c00005 	stb	r3,0(r2)
        return;
 20173a4:	00003b06 	br	2017494 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20173a8:	e0bffe17 	ldw	r2,-8(fp)
 20173ac:	1000041e 	bne	r2,zero,20173c0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20173b0:	e0bfff17 	ldw	r2,-4(fp)
 20173b4:	00c00304 	movi	r3,12
 20173b8:	10c00005 	stb	r3,0(r2)
        return;
 20173bc:	00003506 	br	2017494 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20173c0:	d0a7b503 	ldbu	r2,-24876(gp)
 20173c4:	10803fcc 	andi	r2,r2,255
 20173c8:	10000426 	beq	r2,zero,20173dc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20173cc:	e0bfff17 	ldw	r2,-4(fp)
 20173d0:	00c00484 	movi	r3,18
 20173d4:	10c00005 	stb	r3,0(r2)
        return;
 20173d8:	00002e06 	br	2017494 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 20173dc:	e0bffd17 	ldw	r2,-12(fp)
 20173e0:	10800003 	ldbu	r2,0(r2)
 20173e4:	10803fcc 	andi	r2,r2,255
 20173e8:	10bfffc4 	addi	r2,r2,-1
 20173ec:	10800128 	cmpgeui	r2,r2,4
 20173f0:	10000426 	beq	r2,zero,2017404 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20173f4:	e0bfff17 	ldw	r2,-4(fp)
 20173f8:	00c00044 	movi	r3,1
 20173fc:	10c00005 	stb	r3,0(r2)
             return;
 2017400:	00002406 	br	2017494 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2017404:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017408:	0005303a 	rdctl	r2,status
 201740c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017410:	e0fffc17 	ldw	r3,-16(fp)
 2017414:	00bfff84 	movi	r2,-2
 2017418:	1884703a 	and	r2,r3,r2
 201741c:	1001703a 	wrctl	status,r2
  
  return context;
 2017420:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2017424:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2017428:	e13ffe17 	ldw	r4,-8(fp)
 201742c:	2018d400 	call	2018d40 <OS_StrLen>
 2017430:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2017434:	e0bffa03 	ldbu	r2,-24(fp)
 2017438:	10800830 	cmpltui	r2,r2,32
 201743c:	1000081e 	bne	r2,zero,2017460 <OSEventNameSet+0xf8>
 2017440:	e0bff817 	ldw	r2,-32(fp)
 2017444:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017448:	e0bff917 	ldw	r2,-28(fp)
 201744c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2017450:	e0bfff17 	ldw	r2,-4(fp)
 2017454:	00c002c4 	movi	r3,11
 2017458:	10c00005 	stb	r3,0(r2)
        return;
 201745c:	00000d06 	br	2017494 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2017460:	e0bffd17 	ldw	r2,-12(fp)
 2017464:	10800384 	addi	r2,r2,14
 2017468:	e17ffe17 	ldw	r5,-8(fp)
 201746c:	1009883a 	mov	r4,r2
 2017470:	2018ccc0 	call	2018ccc <OS_StrCopy>
 2017474:	e0bff817 	ldw	r2,-32(fp)
 2017478:	e0bffb15 	stw	r2,-20(fp)
 201747c:	e0bffb17 	ldw	r2,-20(fp)
 2017480:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017484:	e0bfff17 	ldw	r2,-4(fp)
 2017488:	10000005 	stb	zero,0(r2)
 201748c:	00000106 	br	2017494 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2017490:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2017494:	e037883a 	mov	sp,fp
 2017498:	dfc00117 	ldw	ra,4(sp)
 201749c:	df000017 	ldw	fp,0(sp)
 20174a0:	dec00204 	addi	sp,sp,8
 20174a4:	f800283a 	ret

020174a8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 20174a8:	deffed04 	addi	sp,sp,-76
 20174ac:	dfc01215 	stw	ra,72(sp)
 20174b0:	df001115 	stw	fp,68(sp)
 20174b4:	df001104 	addi	fp,sp,68
 20174b8:	e13ffc15 	stw	r4,-16(fp)
 20174bc:	e17ffd15 	stw	r5,-12(fp)
 20174c0:	e1bffe15 	stw	r6,-8(fp)
 20174c4:	3805883a 	mov	r2,r7
 20174c8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 20174cc:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 20174d0:	e0800217 	ldw	r2,8(fp)
 20174d4:	1000021e 	bne	r2,zero,20174e0 <OSEventPendMulti+0x38>
        return (0);
 20174d8:	0005883a 	mov	r2,zero
 20174dc:	00017106 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 20174e0:	e0bffc17 	ldw	r2,-16(fp)
 20174e4:	1000051e 	bne	r2,zero,20174fc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 20174e8:	e0800217 	ldw	r2,8(fp)
 20174ec:	00c00104 	movi	r3,4
 20174f0:	10c00005 	stb	r3,0(r2)
        return (0);
 20174f4:	0005883a 	mov	r2,zero
 20174f8:	00016a06 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 20174fc:	e0bffd17 	ldw	r2,-12(fp)
 2017500:	1000051e 	bne	r2,zero,2017518 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2017504:	e0800217 	ldw	r2,8(fp)
 2017508:	00c00104 	movi	r3,4
 201750c:	10c00005 	stb	r3,0(r2)
        return (0);
 2017510:	0005883a 	mov	r2,zero
 2017514:	00016306 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2017518:	e0bffe17 	ldw	r2,-8(fp)
 201751c:	1000051e 	bne	r2,zero,2017534 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2017520:	e0800217 	ldw	r2,8(fp)
 2017524:	00c00104 	movi	r3,4
 2017528:	10c00005 	stb	r3,0(r2)
        return (0);
 201752c:	0005883a 	mov	r2,zero
 2017530:	00015c06 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2017534:	e0bffd17 	ldw	r2,-12(fp)
 2017538:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 201753c:	e0bffc17 	ldw	r2,-16(fp)
 2017540:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2017544:	e0bfef17 	ldw	r2,-68(fp)
 2017548:	10800017 	ldw	r2,0(r2)
 201754c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2017550:	00001906 	br	20175b8 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2017554:	e0bff017 	ldw	r2,-64(fp)
 2017558:	10800003 	ldbu	r2,0(r2)
 201755c:	10803fcc 	andi	r2,r2,255
 2017560:	10c000a0 	cmpeqi	r3,r2,2
 2017564:	1800091e 	bne	r3,zero,201758c <OSEventPendMulti+0xe4>
 2017568:	10c000e0 	cmpeqi	r3,r2,3
 201756c:	1800091e 	bne	r3,zero,2017594 <OSEventPendMulti+0xec>
 2017570:	10800060 	cmpeqi	r2,r2,1
 2017574:	1000091e 	bne	r2,zero,201759c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2017578:	e0800217 	ldw	r2,8(fp)
 201757c:	00c00044 	movi	r3,1
 2017580:	10c00005 	stb	r3,0(r2)
                 return (0);
 2017584:	0005883a 	mov	r2,zero
 2017588:	00014606 	br	2017aa4 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 201758c:	0001883a 	nop
 2017590:	00000306 	br	20175a0 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2017594:	0001883a 	nop
 2017598:	00000106 	br	20175a0 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 201759c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 20175a0:	e0bfef17 	ldw	r2,-68(fp)
 20175a4:	10800104 	addi	r2,r2,4
 20175a8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20175ac:	e0bfef17 	ldw	r2,-68(fp)
 20175b0:	10800017 	ldw	r2,0(r2)
 20175b4:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20175b8:	e0bff017 	ldw	r2,-64(fp)
 20175bc:	103fe51e 	bne	r2,zero,2017554 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20175c0:	d0a7b503 	ldbu	r2,-24876(gp)
 20175c4:	10803fcc 	andi	r2,r2,255
 20175c8:	10000526 	beq	r2,zero,20175e0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20175cc:	e0800217 	ldw	r2,8(fp)
 20175d0:	00c00084 	movi	r3,2
 20175d4:	10c00005 	stb	r3,0(r2)
        return (0);
 20175d8:	0005883a 	mov	r2,zero
 20175dc:	00013106 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20175e0:	d0a7a703 	ldbu	r2,-24932(gp)
 20175e4:	10803fcc 	andi	r2,r2,255
 20175e8:	10000526 	beq	r2,zero,2017600 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20175ec:	e0800217 	ldw	r2,8(fp)
 20175f0:	00c00344 	movi	r3,13
 20175f4:	10c00005 	stb	r3,0(r2)
        return (0);
 20175f8:	0005883a 	mov	r2,zero
 20175fc:	00012906 	br	2017aa4 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017600:	0005303a 	rdctl	r2,status
 2017604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017608:	e0fffb17 	ldw	r3,-20(fp)
 201760c:	00bfff84 	movi	r2,-2
 2017610:	1884703a 	and	r2,r3,r2
 2017614:	1001703a 	wrctl	status,r2
  
  return context;
 2017618:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201761c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2017620:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2017624:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2017628:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 201762c:	e0bffc17 	ldw	r2,-16(fp)
 2017630:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2017634:	e0bfef17 	ldw	r2,-68(fp)
 2017638:	10800017 	ldw	r2,0(r2)
 201763c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2017640:	00008106 	br	2017848 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2017644:	e0bff017 	ldw	r2,-64(fp)
 2017648:	10800003 	ldbu	r2,0(r2)
 201764c:	10803fcc 	andi	r2,r2,255
 2017650:	10c000a0 	cmpeqi	r3,r2,2
 2017654:	18003c1e 	bne	r3,zero,2017748 <OSEventPendMulti+0x2a0>
 2017658:	10c000e0 	cmpeqi	r3,r2,3
 201765c:	1800031e 	bne	r3,zero,201766c <OSEventPendMulti+0x1c4>
 2017660:	10800060 	cmpeqi	r2,r2,1
 2017664:	10001e1e 	bne	r2,zero,20176e0 <OSEventPendMulti+0x238>
 2017668:	00006606 	br	2017804 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 201766c:	e0bff017 	ldw	r2,-64(fp)
 2017670:	1080020b 	ldhu	r2,8(r2)
 2017674:	10bfffcc 	andi	r2,r2,65535
 2017678:	10001526 	beq	r2,zero,20176d0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 201767c:	e0bff017 	ldw	r2,-64(fp)
 2017680:	1080020b 	ldhu	r2,8(r2)
 2017684:	10bfffc4 	addi	r2,r2,-1
 2017688:	1007883a 	mov	r3,r2
 201768c:	e0bff017 	ldw	r2,-64(fp)
 2017690:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2017694:	e0bffd17 	ldw	r2,-12(fp)
 2017698:	10c00104 	addi	r3,r2,4
 201769c:	e0fffd15 	stw	r3,-12(fp)
 20176a0:	e0fff017 	ldw	r3,-64(fp)
 20176a4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 20176a8:	00800044 	movi	r2,1
 20176ac:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20176b0:	e0bffe17 	ldw	r2,-8(fp)
 20176b4:	10c00104 	addi	r3,r2,4
 20176b8:	e0fffe15 	stw	r3,-8(fp)
 20176bc:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20176c0:	e0bff18b 	ldhu	r2,-58(fp)
 20176c4:	10800044 	addi	r2,r2,1
 20176c8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20176cc:	00005806 	br	2017830 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20176d0:	e0bff203 	ldbu	r2,-56(fp)
 20176d4:	10800054 	ori	r2,r2,1
 20176d8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20176dc:	00005406 	br	2017830 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20176e0:	e0bff017 	ldw	r2,-64(fp)
 20176e4:	10800117 	ldw	r2,4(r2)
 20176e8:	10001326 	beq	r2,zero,2017738 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20176ec:	e0bffe17 	ldw	r2,-8(fp)
 20176f0:	10c00104 	addi	r3,r2,4
 20176f4:	e0fffe15 	stw	r3,-8(fp)
 20176f8:	e0fff017 	ldw	r3,-64(fp)
 20176fc:	18c00117 	ldw	r3,4(r3)
 2017700:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2017704:	e0bff017 	ldw	r2,-64(fp)
 2017708:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 201770c:	e0bffd17 	ldw	r2,-12(fp)
 2017710:	10c00104 	addi	r3,r2,4
 2017714:	e0fffd15 	stw	r3,-12(fp)
 2017718:	e0fff017 	ldw	r3,-64(fp)
 201771c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2017720:	00800044 	movi	r2,1
 2017724:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2017728:	e0bff18b 	ldhu	r2,-58(fp)
 201772c:	10800044 	addi	r2,r2,1
 2017730:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2017734:	00003e06 	br	2017830 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2017738:	e0bff203 	ldbu	r2,-56(fp)
 201773c:	10800094 	ori	r2,r2,2
 2017740:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2017744:	00003a06 	br	2017830 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2017748:	e0bff017 	ldw	r2,-64(fp)
 201774c:	10800117 	ldw	r2,4(r2)
 2017750:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2017754:	e0bff517 	ldw	r2,-44(fp)
 2017758:	1080058b 	ldhu	r2,22(r2)
 201775c:	10bfffcc 	andi	r2,r2,65535
 2017760:	10002426 	beq	r2,zero,20177f4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2017764:	e0bffe17 	ldw	r2,-8(fp)
 2017768:	10c00104 	addi	r3,r2,4
 201776c:	e0fffe15 	stw	r3,-8(fp)
 2017770:	e0fff517 	ldw	r3,-44(fp)
 2017774:	18c00417 	ldw	r3,16(r3)
 2017778:	19400104 	addi	r5,r3,4
 201777c:	e13ff517 	ldw	r4,-44(fp)
 2017780:	21400415 	stw	r5,16(r4)
 2017784:	18c00017 	ldw	r3,0(r3)
 2017788:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 201778c:	e0bff517 	ldw	r2,-44(fp)
 2017790:	10c00417 	ldw	r3,16(r2)
 2017794:	e0bff517 	ldw	r2,-44(fp)
 2017798:	10800217 	ldw	r2,8(r2)
 201779c:	1880041e 	bne	r3,r2,20177b0 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 20177a0:	e0bff517 	ldw	r2,-44(fp)
 20177a4:	10c00117 	ldw	r3,4(r2)
 20177a8:	e0bff517 	ldw	r2,-44(fp)
 20177ac:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20177b0:	e0bff517 	ldw	r2,-44(fp)
 20177b4:	1080058b 	ldhu	r2,22(r2)
 20177b8:	10bfffc4 	addi	r2,r2,-1
 20177bc:	1007883a 	mov	r3,r2
 20177c0:	e0bff517 	ldw	r2,-44(fp)
 20177c4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20177c8:	e0bffd17 	ldw	r2,-12(fp)
 20177cc:	10c00104 	addi	r3,r2,4
 20177d0:	e0fffd15 	stw	r3,-12(fp)
 20177d4:	e0fff017 	ldw	r3,-64(fp)
 20177d8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20177dc:	00800044 	movi	r2,1
 20177e0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20177e4:	e0bff18b 	ldhu	r2,-58(fp)
 20177e8:	10800044 	addi	r2,r2,1
 20177ec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20177f0:	00000f06 	br	2017830 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20177f4:	e0bff203 	ldbu	r2,-56(fp)
 20177f8:	10800114 	ori	r2,r2,4
 20177fc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2017800:	00000b06 	br	2017830 <OSEventPendMulti+0x388>
 2017804:	e0bff317 	ldw	r2,-52(fp)
 2017808:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201780c:	e0bff417 	ldw	r2,-48(fp)
 2017810:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2017814:	e0bffd17 	ldw	r2,-12(fp)
 2017818:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 201781c:	e0800217 	ldw	r2,8(fp)
 2017820:	00c00044 	movi	r3,1
 2017824:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2017828:	e0bff18b 	ldhu	r2,-58(fp)
 201782c:	00009d06 	br	2017aa4 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2017830:	e0bfef17 	ldw	r2,-68(fp)
 2017834:	10800104 	addi	r2,r2,4
 2017838:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 201783c:	e0bfef17 	ldw	r2,-68(fp)
 2017840:	10800017 	ldw	r2,0(r2)
 2017844:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2017848:	e0bff017 	ldw	r2,-64(fp)
 201784c:	103f7d1e 	bne	r2,zero,2017644 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2017850:	e0bff103 	ldbu	r2,-60(fp)
 2017854:	10800058 	cmpnei	r2,r2,1
 2017858:	10000a1e 	bne	r2,zero,2017884 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 201785c:	e0bffd17 	ldw	r2,-12(fp)
 2017860:	10000015 	stw	zero,0(r2)
 2017864:	e0bff317 	ldw	r2,-52(fp)
 2017868:	e0bff615 	stw	r2,-40(fp)
 201786c:	e0bff617 	ldw	r2,-40(fp)
 2017870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2017874:	e0800217 	ldw	r2,8(fp)
 2017878:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 201787c:	e0bff18b 	ldhu	r2,-58(fp)
 2017880:	00008806 	br	2017aa4 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2017884:	d0a7b617 	ldw	r2,-24872(gp)
 2017888:	d0e7b617 	ldw	r3,-24872(gp)
 201788c:	19000c03 	ldbu	r4,48(r3)
 2017890:	e0fff203 	ldbu	r3,-56(fp)
 2017894:	20c6b03a 	or	r3,r4,r3
 2017898:	1809883a 	mov	r4,r3
 201789c:	00ffe004 	movi	r3,-128
 20178a0:	20c6b03a 	or	r3,r4,r3
 20178a4:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20178a8:	d0a7b617 	ldw	r2,-24872(gp)
 20178ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 20178b0:	d0a7b617 	ldw	r2,-24872(gp)
 20178b4:	e0ffff0b 	ldhu	r3,-4(fp)
 20178b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20178bc:	e13ffc17 	ldw	r4,-16(fp)
 20178c0:	20183e40 	call	20183e4 <OS_EventTaskWaitMulti>
 20178c4:	e0bff317 	ldw	r2,-52(fp)
 20178c8:	e0bff915 	stw	r2,-28(fp)
 20178cc:	e0bff917 	ldw	r2,-28(fp)
 20178d0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20178d4:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20178d8:	0005303a 	rdctl	r2,status
 20178dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20178e0:	e0fff717 	ldw	r3,-36(fp)
 20178e4:	00bfff84 	movi	r2,-2
 20178e8:	1884703a 	and	r2,r3,r2
 20178ec:	1001703a 	wrctl	status,r2
  
  return context;
 20178f0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20178f4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 20178f8:	d0a7b617 	ldw	r2,-24872(gp)
 20178fc:	10800c43 	ldbu	r2,49(r2)
 2017900:	10803fcc 	andi	r2,r2,255
 2017904:	10000226 	beq	r2,zero,2017910 <OSEventPendMulti+0x468>
 2017908:	108000a0 	cmpeqi	r2,r2,2
 201790c:	10001826 	beq	r2,zero,2017970 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2017910:	d0a7b617 	ldw	r2,-24872(gp)
 2017914:	10800717 	ldw	r2,28(r2)
 2017918:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 201791c:	e0bff017 	ldw	r2,-64(fp)
 2017920:	10000b26 	beq	r2,zero,2017950 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2017924:	e0bffd17 	ldw	r2,-12(fp)
 2017928:	10c00104 	addi	r3,r2,4
 201792c:	e0fffd15 	stw	r3,-12(fp)
 2017930:	e0fff017 	ldw	r3,-64(fp)
 2017934:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2017938:	e0bffd17 	ldw	r2,-12(fp)
 201793c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2017940:	e0bff18b 	ldhu	r2,-58(fp)
 2017944:	10800044 	addi	r2,r2,1
 2017948:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 201794c:	00000d06 	br	2017984 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2017950:	d0a7b617 	ldw	r2,-24872(gp)
 2017954:	00c00044 	movi	r3,1
 2017958:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201795c:	d0a7b617 	ldw	r2,-24872(gp)
 2017960:	e17ffc17 	ldw	r5,-16(fp)
 2017964:	1009883a 	mov	r4,r2
 2017968:	20185ec0 	call	20185ec <OS_EventTaskRemoveMulti>
             }
			 break;
 201796c:	00000506 	br	2017984 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2017970:	d0a7b617 	ldw	r2,-24872(gp)
 2017974:	e17ffc17 	ldw	r5,-16(fp)
 2017978:	1009883a 	mov	r4,r2
 201797c:	20185ec0 	call	20185ec <OS_EventTaskRemoveMulti>
             break;
 2017980:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2017984:	d0a7b617 	ldw	r2,-24872(gp)
 2017988:	10800c43 	ldbu	r2,49(r2)
 201798c:	10803fcc 	andi	r2,r2,255
 2017990:	10000326 	beq	r2,zero,20179a0 <OSEventPendMulti+0x4f8>
 2017994:	108000a0 	cmpeqi	r2,r2,2
 2017998:	1000231e 	bne	r2,zero,2017a28 <OSEventPendMulti+0x580>
 201799c:	00002a06 	br	2017a48 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 20179a0:	e0bff017 	ldw	r2,-64(fp)
 20179a4:	10800003 	ldbu	r2,0(r2)
 20179a8:	10803fcc 	andi	r2,r2,255
 20179ac:	0080100e 	bge	zero,r2,20179f0 <OSEventPendMulti+0x548>
 20179b0:	10c000d0 	cmplti	r3,r2,3
 20179b4:	1800071e 	bne	r3,zero,20179d4 <OSEventPendMulti+0x52c>
 20179b8:	108000e0 	cmpeqi	r2,r2,3
 20179bc:	10000c26 	beq	r2,zero,20179f0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20179c0:	e0bffe17 	ldw	r2,-8(fp)
 20179c4:	10c00104 	addi	r3,r2,4
 20179c8:	e0fffe15 	stw	r3,-8(fp)
 20179cc:	10000015 	stw	zero,0(r2)
                      break;
 20179d0:	00001206 	br	2017a1c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20179d4:	e0bffe17 	ldw	r2,-8(fp)
 20179d8:	10c00104 	addi	r3,r2,4
 20179dc:	e0fffe15 	stw	r3,-8(fp)
 20179e0:	d0e7b617 	ldw	r3,-24872(gp)
 20179e4:	18c00917 	ldw	r3,36(r3)
 20179e8:	10c00015 	stw	r3,0(r2)
                      break;
 20179ec:	00000b06 	br	2017a1c <OSEventPendMulti+0x574>
 20179f0:	e0bff317 	ldw	r2,-52(fp)
 20179f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20179f8:	e0bff817 	ldw	r2,-32(fp)
 20179fc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2017a00:	e0bffd17 	ldw	r2,-12(fp)
 2017a04:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2017a08:	e0800217 	ldw	r2,8(fp)
 2017a0c:	00c00044 	movi	r3,1
 2017a10:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2017a14:	e0bff18b 	ldhu	r2,-58(fp)
 2017a18:	00002206 	br	2017aa4 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2017a1c:	e0800217 	ldw	r2,8(fp)
 2017a20:	10000005 	stb	zero,0(r2)
             break;
 2017a24:	00001006 	br	2017a68 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2017a28:	e0bffe17 	ldw	r2,-8(fp)
 2017a2c:	10c00104 	addi	r3,r2,4
 2017a30:	e0fffe15 	stw	r3,-8(fp)
 2017a34:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2017a38:	e0800217 	ldw	r2,8(fp)
 2017a3c:	00c00384 	movi	r3,14
 2017a40:	10c00005 	stb	r3,0(r2)
             break;
 2017a44:	00000806 	br	2017a68 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2017a48:	e0bffe17 	ldw	r2,-8(fp)
 2017a4c:	10c00104 	addi	r3,r2,4
 2017a50:	e0fffe15 	stw	r3,-8(fp)
 2017a54:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2017a58:	e0800217 	ldw	r2,8(fp)
 2017a5c:	00c00284 	movi	r3,10
 2017a60:	10c00005 	stb	r3,0(r2)
             break;
 2017a64:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2017a68:	d0a7b617 	ldw	r2,-24872(gp)
 2017a6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2017a70:	d0a7b617 	ldw	r2,-24872(gp)
 2017a74:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2017a78:	d0a7b617 	ldw	r2,-24872(gp)
 2017a7c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017a80:	d0a7b617 	ldw	r2,-24872(gp)
 2017a84:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2017a88:	d0a7b617 	ldw	r2,-24872(gp)
 2017a8c:	10000915 	stw	zero,36(r2)
 2017a90:	e0bff317 	ldw	r2,-52(fp)
 2017a94:	e0bffa15 	stw	r2,-24(fp)
 2017a98:	e0bffa17 	ldw	r2,-24(fp)
 2017a9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2017aa0:	e0bff18b 	ldhu	r2,-58(fp)
}
 2017aa4:	e037883a 	mov	sp,fp
 2017aa8:	dfc00117 	ldw	ra,4(sp)
 2017aac:	df000017 	ldw	fp,0(sp)
 2017ab0:	dec00204 	addi	sp,sp,8
 2017ab4:	f800283a 	ret

02017ab8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 2017ab8:	defffe04 	addi	sp,sp,-8
 2017abc:	dfc00115 	stw	ra,4(sp)
 2017ac0:	df000015 	stw	fp,0(sp)
 2017ac4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 2017ac8:	20214f80 	call	20214f8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 2017acc:	20188340 	call	2018834 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 2017ad0:	201887c0 	call	201887c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 2017ad4:	20189e80 	call	20189e8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 2017ad8:	20187540 	call	2018754 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 2017adc:	201a8880 	call	201a888 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2017ae0:	201bc500 	call	201bc50 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2017ae4:	201cd780 	call	201cd78 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 2017ae8:	20188e80 	call	20188e8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2017aec:	20189680 	call	2018968 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2017af0:	20215180 	call	2021518 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2017af4:	201925c0 	call	201925c <OSDebugInit>
#endif
}
 2017af8:	0001883a 	nop
 2017afc:	e037883a 	mov	sp,fp
 2017b00:	dfc00117 	ldw	ra,4(sp)
 2017b04:	df000017 	ldw	fp,0(sp)
 2017b08:	dec00204 	addi	sp,sp,8
 2017b0c:	f800283a 	ret

02017b10 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2017b10:	deffff04 	addi	sp,sp,-4
 2017b14:	df000015 	stw	fp,0(sp)
 2017b18:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2017b1c:	d0a7a743 	ldbu	r2,-24931(gp)
 2017b20:	10803fcc 	andi	r2,r2,255
 2017b24:	10800058 	cmpnei	r2,r2,1
 2017b28:	1000071e 	bne	r2,zero,2017b48 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2017b2c:	d0a7b503 	ldbu	r2,-24876(gp)
 2017b30:	10803fcc 	andi	r2,r2,255
 2017b34:	10803fe0 	cmpeqi	r2,r2,255
 2017b38:	1000031e 	bne	r2,zero,2017b48 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2017b3c:	d0a7b503 	ldbu	r2,-24876(gp)
 2017b40:	10800044 	addi	r2,r2,1
 2017b44:	d0a7b505 	stb	r2,-24876(gp)
        }
    }
}
 2017b48:	0001883a 	nop
 2017b4c:	e037883a 	mov	sp,fp
 2017b50:	df000017 	ldw	fp,0(sp)
 2017b54:	dec00104 	addi	sp,sp,4
 2017b58:	f800283a 	ret

02017b5c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2017b5c:	defffb04 	addi	sp,sp,-20
 2017b60:	dfc00415 	stw	ra,16(sp)
 2017b64:	df000315 	stw	fp,12(sp)
 2017b68:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017b6c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2017b70:	d0a7a743 	ldbu	r2,-24931(gp)
 2017b74:	10803fcc 	andi	r2,r2,255
 2017b78:	10800058 	cmpnei	r2,r2,1
 2017b7c:	10002f1e 	bne	r2,zero,2017c3c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b80:	0005303a 	rdctl	r2,status
 2017b84:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b88:	e0ffff17 	ldw	r3,-4(fp)
 2017b8c:	00bfff84 	movi	r2,-2
 2017b90:	1884703a 	and	r2,r3,r2
 2017b94:	1001703a 	wrctl	status,r2
  
  return context;
 2017b98:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017b9c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2017ba0:	d0a7b503 	ldbu	r2,-24876(gp)
 2017ba4:	10803fcc 	andi	r2,r2,255
 2017ba8:	10000326 	beq	r2,zero,2017bb8 <OSIntExit+0x5c>
            OSIntNesting--;
 2017bac:	d0a7b503 	ldbu	r2,-24876(gp)
 2017bb0:	10bfffc4 	addi	r2,r2,-1
 2017bb4:	d0a7b505 	stb	r2,-24876(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2017bb8:	d0a7b503 	ldbu	r2,-24876(gp)
 2017bbc:	10803fcc 	andi	r2,r2,255
 2017bc0:	10001a1e 	bne	r2,zero,2017c2c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2017bc4:	d0a7a703 	ldbu	r2,-24932(gp)
 2017bc8:	10803fcc 	andi	r2,r2,255
 2017bcc:	1000171e 	bne	r2,zero,2017c2c <OSIntExit+0xd0>
                OS_SchedNew();
 2017bd0:	2018c580 	call	2018c58 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2017bd4:	d0e7a903 	ldbu	r3,-24924(gp)
 2017bd8:	d0a7a943 	ldbu	r2,-24923(gp)
 2017bdc:	18c03fcc 	andi	r3,r3,255
 2017be0:	10803fcc 	andi	r2,r2,255
 2017be4:	18801126 	beq	r3,r2,2017c2c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2017be8:	d0a7a903 	ldbu	r2,-24924(gp)
 2017bec:	10c03fcc 	andi	r3,r2,255
 2017bf0:	008080f4 	movhi	r2,515
 2017bf4:	10855004 	addi	r2,r2,5440
 2017bf8:	18c7883a 	add	r3,r3,r3
 2017bfc:	18c7883a 	add	r3,r3,r3
 2017c00:	10c5883a 	add	r2,r2,r3
 2017c04:	10800017 	ldw	r2,0(r2)
 2017c08:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2017c0c:	d0a7b117 	ldw	r2,-24892(gp)
 2017c10:	10c00e17 	ldw	r3,56(r2)
 2017c14:	18c00044 	addi	r3,r3,1
 2017c18:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2017c1c:	d0a7ac17 	ldw	r2,-24912(gp)
 2017c20:	10800044 	addi	r2,r2,1
 2017c24:	d0a7ac15 	stw	r2,-24912(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2017c28:	20212240 	call	2021224 <OSCtxSw>
 2017c2c:	e0bffd17 	ldw	r2,-12(fp)
 2017c30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c34:	e0bffe17 	ldw	r2,-8(fp)
 2017c38:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2017c3c:	0001883a 	nop
 2017c40:	e037883a 	mov	sp,fp
 2017c44:	dfc00117 	ldw	ra,4(sp)
 2017c48:	df000017 	ldw	fp,0(sp)
 2017c4c:	dec00204 	addi	sp,sp,8
 2017c50:	f800283a 	ret

02017c54 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2017c54:	defffc04 	addi	sp,sp,-16
 2017c58:	df000315 	stw	fp,12(sp)
 2017c5c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017c60:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2017c64:	d0a7a743 	ldbu	r2,-24931(gp)
 2017c68:	10803fcc 	andi	r2,r2,255
 2017c6c:	10800058 	cmpnei	r2,r2,1
 2017c70:	1000161e 	bne	r2,zero,2017ccc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017c74:	0005303a 	rdctl	r2,status
 2017c78:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017c7c:	e0ffff17 	ldw	r3,-4(fp)
 2017c80:	00bfff84 	movi	r2,-2
 2017c84:	1884703a 	and	r2,r3,r2
 2017c88:	1001703a 	wrctl	status,r2
  
  return context;
 2017c8c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017c90:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2017c94:	d0a7b503 	ldbu	r2,-24876(gp)
 2017c98:	10803fcc 	andi	r2,r2,255
 2017c9c:	1000071e 	bne	r2,zero,2017cbc <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2017ca0:	d0a7a703 	ldbu	r2,-24932(gp)
 2017ca4:	10803fcc 	andi	r2,r2,255
 2017ca8:	10803fe0 	cmpeqi	r2,r2,255
 2017cac:	1000031e 	bne	r2,zero,2017cbc <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2017cb0:	d0a7a703 	ldbu	r2,-24932(gp)
 2017cb4:	10800044 	addi	r2,r2,1
 2017cb8:	d0a7a705 	stb	r2,-24932(gp)
 2017cbc:	e0bffd17 	ldw	r2,-12(fp)
 2017cc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017cc4:	e0bffe17 	ldw	r2,-8(fp)
 2017cc8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2017ccc:	0001883a 	nop
 2017cd0:	e037883a 	mov	sp,fp
 2017cd4:	df000017 	ldw	fp,0(sp)
 2017cd8:	dec00104 	addi	sp,sp,4
 2017cdc:	f800283a 	ret

02017ce0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2017ce0:	defff804 	addi	sp,sp,-32
 2017ce4:	dfc00715 	stw	ra,28(sp)
 2017ce8:	df000615 	stw	fp,24(sp)
 2017cec:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017cf0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2017cf4:	d0a7a743 	ldbu	r2,-24931(gp)
 2017cf8:	10803fcc 	andi	r2,r2,255
 2017cfc:	10800058 	cmpnei	r2,r2,1
 2017d00:	1000281e 	bne	r2,zero,2017da4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017d04:	0005303a 	rdctl	r2,status
 2017d08:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017d0c:	e0ffff17 	ldw	r3,-4(fp)
 2017d10:	00bfff84 	movi	r2,-2
 2017d14:	1884703a 	and	r2,r3,r2
 2017d18:	1001703a 	wrctl	status,r2
  
  return context;
 2017d1c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017d20:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2017d24:	d0a7a703 	ldbu	r2,-24932(gp)
 2017d28:	10803fcc 	andi	r2,r2,255
 2017d2c:	10001926 	beq	r2,zero,2017d94 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2017d30:	d0a7a703 	ldbu	r2,-24932(gp)
 2017d34:	10bfffc4 	addi	r2,r2,-1
 2017d38:	d0a7a705 	stb	r2,-24932(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2017d3c:	d0a7a703 	ldbu	r2,-24932(gp)
 2017d40:	10803fcc 	andi	r2,r2,255
 2017d44:	10000e1e 	bne	r2,zero,2017d80 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2017d48:	d0a7b503 	ldbu	r2,-24876(gp)
 2017d4c:	10803fcc 	andi	r2,r2,255
 2017d50:	1000061e 	bne	r2,zero,2017d6c <OSSchedUnlock+0x8c>
 2017d54:	e0bffa17 	ldw	r2,-24(fp)
 2017d58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017d5c:	e0bffb17 	ldw	r2,-20(fp)
 2017d60:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2017d64:	2018b880 	call	2018b88 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2017d68:	00000e06 	br	2017da4 <OSSchedUnlock+0xc4>
 2017d6c:	e0bffa17 	ldw	r2,-24(fp)
 2017d70:	e0bffc15 	stw	r2,-16(fp)
 2017d74:	e0bffc17 	ldw	r2,-16(fp)
 2017d78:	1001703a 	wrctl	status,r2
 2017d7c:	00000906 	br	2017da4 <OSSchedUnlock+0xc4>
 2017d80:	e0bffa17 	ldw	r2,-24(fp)
 2017d84:	e0bffd15 	stw	r2,-12(fp)
 2017d88:	e0bffd17 	ldw	r2,-12(fp)
 2017d8c:	1001703a 	wrctl	status,r2
 2017d90:	00000406 	br	2017da4 <OSSchedUnlock+0xc4>
 2017d94:	e0bffa17 	ldw	r2,-24(fp)
 2017d98:	e0bffe15 	stw	r2,-8(fp)
 2017d9c:	e0bffe17 	ldw	r2,-8(fp)
 2017da0:	1001703a 	wrctl	status,r2
 2017da4:	0001883a 	nop
 2017da8:	e037883a 	mov	sp,fp
 2017dac:	dfc00117 	ldw	ra,4(sp)
 2017db0:	df000017 	ldw	fp,0(sp)
 2017db4:	dec00204 	addi	sp,sp,8
 2017db8:	f800283a 	ret

02017dbc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2017dbc:	defffe04 	addi	sp,sp,-8
 2017dc0:	dfc00115 	stw	ra,4(sp)
 2017dc4:	df000015 	stw	fp,0(sp)
 2017dc8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2017dcc:	d0a7a743 	ldbu	r2,-24931(gp)
 2017dd0:	10803fcc 	andi	r2,r2,255
 2017dd4:	10000f1e 	bne	r2,zero,2017e14 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2017dd8:	2018c580 	call	2018c58 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2017ddc:	d0a7a903 	ldbu	r2,-24924(gp)
 2017de0:	d0a7a945 	stb	r2,-24923(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2017de4:	d0a7a903 	ldbu	r2,-24924(gp)
 2017de8:	10c03fcc 	andi	r3,r2,255
 2017dec:	008080f4 	movhi	r2,515
 2017df0:	10855004 	addi	r2,r2,5440
 2017df4:	18c7883a 	add	r3,r3,r3
 2017df8:	18c7883a 	add	r3,r3,r3
 2017dfc:	10c5883a 	add	r2,r2,r3
 2017e00:	10800017 	ldw	r2,0(r2)
 2017e04:	d0a7b115 	stw	r2,-24892(gp)
        OSTCBCur      = OSTCBHighRdy;
 2017e08:	d0a7b117 	ldw	r2,-24892(gp)
 2017e0c:	d0a7b615 	stw	r2,-24872(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2017e10:	20212b00 	call	20212b0 <OSStartHighRdy>
    }
}
 2017e14:	0001883a 	nop
 2017e18:	e037883a 	mov	sp,fp
 2017e1c:	dfc00117 	ldw	ra,4(sp)
 2017e20:	df000017 	ldw	fp,0(sp)
 2017e24:	dec00204 	addi	sp,sp,8
 2017e28:	f800283a 	ret

02017e2c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2017e2c:	defff904 	addi	sp,sp,-28
 2017e30:	dfc00615 	stw	ra,24(sp)
 2017e34:	df000515 	stw	fp,20(sp)
 2017e38:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017e3c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2017e40:	01000084 	movi	r4,2
 2017e44:	201efec0 	call	201efec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e48:	0005303a 	rdctl	r2,status
 2017e4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e50:	e0fffc17 	ldw	r3,-16(fp)
 2017e54:	00bfff84 	movi	r2,-2
 2017e58:	1884703a 	and	r2,r3,r2
 2017e5c:	1001703a 	wrctl	status,r2
  
  return context;
 2017e60:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2017e64:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2017e68:	d027a815 	stw	zero,-24928(gp)
 2017e6c:	e0bffb17 	ldw	r2,-20(fp)
 2017e70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e74:	e0bffd17 	ldw	r2,-12(fp)
 2017e78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2017e7c:	01001904 	movi	r4,100
 2017e80:	201efec0 	call	201efec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e84:	0005303a 	rdctl	r2,status
 2017e88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e8c:	e0fffe17 	ldw	r3,-8(fp)
 2017e90:	00bfff84 	movi	r2,-2
 2017e94:	1884703a 	and	r2,r3,r2
 2017e98:	1001703a 	wrctl	status,r2
  
  return context;
 2017e9c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2017ea0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2017ea4:	d0a7a817 	ldw	r2,-24928(gp)
 2017ea8:	d0a7ad15 	stw	r2,-24908(gp)
    OSStatRdy    = OS_TRUE;
 2017eac:	00800044 	movi	r2,1
 2017eb0:	d0a7b905 	stb	r2,-24860(gp)
 2017eb4:	e0bffb17 	ldw	r2,-20(fp)
 2017eb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ebc:	e0bfff17 	ldw	r2,-4(fp)
 2017ec0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2017ec4:	0001883a 	nop
 2017ec8:	e037883a 	mov	sp,fp
 2017ecc:	dfc00117 	ldw	ra,4(sp)
 2017ed0:	df000017 	ldw	fp,0(sp)
 2017ed4:	dec00204 	addi	sp,sp,8
 2017ed8:	f800283a 	ret

02017edc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2017edc:	defff704 	addi	sp,sp,-36
 2017ee0:	dfc00815 	stw	ra,32(sp)
 2017ee4:	df000715 	stw	fp,28(sp)
 2017ee8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2017eec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2017ef0:	20214d80 	call	20214d8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ef4:	0005303a 	rdctl	r2,status
 2017ef8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017efc:	e0fffd17 	ldw	r3,-12(fp)
 2017f00:	00bfff84 	movi	r2,-2
 2017f04:	1884703a 	and	r2,r3,r2
 2017f08:	1001703a 	wrctl	status,r2
  
  return context;
 2017f0c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2017f10:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2017f14:	d0a7b717 	ldw	r2,-24868(gp)
 2017f18:	10800044 	addi	r2,r2,1
 2017f1c:	d0a7b715 	stw	r2,-24868(gp)
 2017f20:	e0bffb17 	ldw	r2,-20(fp)
 2017f24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f28:	e0bfff17 	ldw	r2,-4(fp)
 2017f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2017f30:	d0a7a743 	ldbu	r2,-24931(gp)
 2017f34:	10803fcc 	andi	r2,r2,255
 2017f38:	10800058 	cmpnei	r2,r2,1
 2017f3c:	10006a1e 	bne	r2,zero,20180e8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2017f40:	d0a7ab03 	ldbu	r2,-24916(gp)
 2017f44:	10803fcc 	andi	r2,r2,255
 2017f48:	10c00060 	cmpeqi	r3,r2,1
 2017f4c:	1800061e 	bne	r3,zero,2017f68 <OSTimeTick+0x8c>
 2017f50:	10c000a0 	cmpeqi	r3,r2,2
 2017f54:	1800061e 	bne	r3,zero,2017f70 <OSTimeTick+0x94>
 2017f58:	10000a1e 	bne	r2,zero,2017f84 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2017f5c:	00800044 	movi	r2,1
 2017f60:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2017f64:	00000b06 	br	2017f94 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2017f68:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2017f6c:	00000906 	br	2017f94 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2017f70:	00800044 	movi	r2,1
 2017f74:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2017f78:	00800044 	movi	r2,1
 2017f7c:	d0a7ab05 	stb	r2,-24916(gp)
                 break;
 2017f80:	00000406 	br	2017f94 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2017f84:	00800044 	movi	r2,1
 2017f88:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2017f8c:	d027ab05 	stb	zero,-24916(gp)
                 break;
 2017f90:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2017f94:	e0bffa03 	ldbu	r2,-24(fp)
 2017f98:	10005226 	beq	r2,zero,20180e4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2017f9c:	d0a7aa17 	ldw	r2,-24920(gp)
 2017fa0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2017fa4:	00004906 	br	20180cc <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017fa8:	0005303a 	rdctl	r2,status
 2017fac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017fb0:	e0fffc17 	ldw	r3,-16(fp)
 2017fb4:	00bfff84 	movi	r2,-2
 2017fb8:	1884703a 	and	r2,r3,r2
 2017fbc:	1001703a 	wrctl	status,r2
  
  return context;
 2017fc0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2017fc4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2017fc8:	e0bff917 	ldw	r2,-28(fp)
 2017fcc:	10800b8b 	ldhu	r2,46(r2)
 2017fd0:	10bfffcc 	andi	r2,r2,65535
 2017fd4:	10003626 	beq	r2,zero,20180b0 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2017fd8:	e0bff917 	ldw	r2,-28(fp)
 2017fdc:	10800b8b 	ldhu	r2,46(r2)
 2017fe0:	10bfffc4 	addi	r2,r2,-1
 2017fe4:	1007883a 	mov	r3,r2
 2017fe8:	e0bff917 	ldw	r2,-28(fp)
 2017fec:	10c00b8d 	sth	r3,46(r2)
 2017ff0:	e0bff917 	ldw	r2,-28(fp)
 2017ff4:	10800b8b 	ldhu	r2,46(r2)
 2017ff8:	10bfffcc 	andi	r2,r2,65535
 2017ffc:	10002c1e 	bne	r2,zero,20180b0 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2018000:	e0bff917 	ldw	r2,-28(fp)
 2018004:	10800c03 	ldbu	r2,48(r2)
 2018008:	10803fcc 	andi	r2,r2,255
 201800c:	10800dcc 	andi	r2,r2,55
 2018010:	10000b26 	beq	r2,zero,2018040 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2018014:	e0bff917 	ldw	r2,-28(fp)
 2018018:	10c00c03 	ldbu	r3,48(r2)
 201801c:	00bff204 	movi	r2,-56
 2018020:	1884703a 	and	r2,r3,r2
 2018024:	1007883a 	mov	r3,r2
 2018028:	e0bff917 	ldw	r2,-28(fp)
 201802c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2018030:	e0bff917 	ldw	r2,-28(fp)
 2018034:	00c00044 	movi	r3,1
 2018038:	10c00c45 	stb	r3,49(r2)
 201803c:	00000206 	br	2018048 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2018040:	e0bff917 	ldw	r2,-28(fp)
 2018044:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2018048:	e0bff917 	ldw	r2,-28(fp)
 201804c:	10800c03 	ldbu	r2,48(r2)
 2018050:	10803fcc 	andi	r2,r2,255
 2018054:	1080020c 	andi	r2,r2,8
 2018058:	1000151e 	bne	r2,zero,20180b0 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 201805c:	e0bff917 	ldw	r2,-28(fp)
 2018060:	10c00d83 	ldbu	r3,54(r2)
 2018064:	d0a7b303 	ldbu	r2,-24884(gp)
 2018068:	1884b03a 	or	r2,r3,r2
 201806c:	d0a7b305 	stb	r2,-24884(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2018070:	e0bff917 	ldw	r2,-28(fp)
 2018074:	10800d03 	ldbu	r2,52(r2)
 2018078:	10c03fcc 	andi	r3,r2,255
 201807c:	e0bff917 	ldw	r2,-28(fp)
 2018080:	10800d03 	ldbu	r2,52(r2)
 2018084:	11003fcc 	andi	r4,r2,255
 2018088:	d0a7b344 	addi	r2,gp,-24883
 201808c:	2085883a 	add	r2,r4,r2
 2018090:	11000003 	ldbu	r4,0(r2)
 2018094:	e0bff917 	ldw	r2,-28(fp)
 2018098:	10800d43 	ldbu	r2,53(r2)
 201809c:	2084b03a 	or	r2,r4,r2
 20180a0:	1009883a 	mov	r4,r2
 20180a4:	d0a7b344 	addi	r2,gp,-24883
 20180a8:	1885883a 	add	r2,r3,r2
 20180ac:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 20180b0:	e0bff917 	ldw	r2,-28(fp)
 20180b4:	10800517 	ldw	r2,20(r2)
 20180b8:	e0bff915 	stw	r2,-28(fp)
 20180bc:	e0bffb17 	ldw	r2,-20(fp)
 20180c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20180c4:	e0bffe17 	ldw	r2,-8(fp)
 20180c8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20180cc:	e0bff917 	ldw	r2,-28(fp)
 20180d0:	10800c83 	ldbu	r2,50(r2)
 20180d4:	10803fcc 	andi	r2,r2,255
 20180d8:	10800518 	cmpnei	r2,r2,20
 20180dc:	103fb21e 	bne	r2,zero,2017fa8 <OSTimeTick+0xcc>
 20180e0:	00000106 	br	20180e8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 20180e4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 20180e8:	e037883a 	mov	sp,fp
 20180ec:	dfc00117 	ldw	ra,4(sp)
 20180f0:	df000017 	ldw	fp,0(sp)
 20180f4:	dec00204 	addi	sp,sp,8
 20180f8:	f800283a 	ret

020180fc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 20180fc:	deffff04 	addi	sp,sp,-4
 2018100:	df000015 	stw	fp,0(sp)
 2018104:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2018108:	00804784 	movi	r2,286
}
 201810c:	e037883a 	mov	sp,fp
 2018110:	df000017 	ldw	fp,0(sp)
 2018114:	dec00104 	addi	sp,sp,4
 2018118:	f800283a 	ret

0201811c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 201811c:	deffff04 	addi	sp,sp,-4
 2018120:	df000015 	stw	fp,0(sp)
 2018124:	d839883a 	mov	fp,sp
}
 2018128:	0001883a 	nop
 201812c:	e037883a 	mov	sp,fp
 2018130:	df000017 	ldw	fp,0(sp)
 2018134:	dec00104 	addi	sp,sp,4
 2018138:	f800283a 	ret

0201813c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 201813c:	defff804 	addi	sp,sp,-32
 2018140:	dfc00715 	stw	ra,28(sp)
 2018144:	df000615 	stw	fp,24(sp)
 2018148:	df000604 	addi	fp,sp,24
 201814c:	e13ffc15 	stw	r4,-16(fp)
 2018150:	e17ffd15 	stw	r5,-12(fp)
 2018154:	3007883a 	mov	r3,r6
 2018158:	3805883a 	mov	r2,r7
 201815c:	e0fffe05 	stb	r3,-8(fp)
 2018160:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2018164:	e0bffc17 	ldw	r2,-16(fp)
 2018168:	10800283 	ldbu	r2,10(r2)
 201816c:	10c03fcc 	andi	r3,r2,255
 2018170:	008080b4 	movhi	r2,514
 2018174:	1089f904 	addi	r2,r2,10212
 2018178:	10c5883a 	add	r2,r2,r3
 201817c:	10800003 	ldbu	r2,0(r2)
 2018180:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2018184:	e0bffa03 	ldbu	r2,-24(fp)
 2018188:	e0fffc17 	ldw	r3,-16(fp)
 201818c:	1885883a 	add	r2,r3,r2
 2018190:	108002c4 	addi	r2,r2,11
 2018194:	10800003 	ldbu	r2,0(r2)
 2018198:	10c03fcc 	andi	r3,r2,255
 201819c:	008080b4 	movhi	r2,514
 20181a0:	1089f904 	addi	r2,r2,10212
 20181a4:	10c5883a 	add	r2,r2,r3
 20181a8:	10800003 	ldbu	r2,0(r2)
 20181ac:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 20181b0:	e0bffa03 	ldbu	r2,-24(fp)
 20181b4:	100490fa 	slli	r2,r2,3
 20181b8:	1007883a 	mov	r3,r2
 20181bc:	e0bffa43 	ldbu	r2,-23(fp)
 20181c0:	1885883a 	add	r2,r3,r2
 20181c4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20181c8:	e0fffa83 	ldbu	r3,-22(fp)
 20181cc:	008080f4 	movhi	r2,515
 20181d0:	10855004 	addi	r2,r2,5440
 20181d4:	18c7883a 	add	r3,r3,r3
 20181d8:	18c7883a 	add	r3,r3,r3
 20181dc:	10c5883a 	add	r2,r2,r3
 20181e0:	10800017 	ldw	r2,0(r2)
 20181e4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 20181e8:	e0bffb17 	ldw	r2,-20(fp)
 20181ec:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 20181f0:	e0bffb17 	ldw	r2,-20(fp)
 20181f4:	e0fffd17 	ldw	r3,-12(fp)
 20181f8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 20181fc:	e0bffb17 	ldw	r2,-20(fp)
 2018200:	10800c03 	ldbu	r2,48(r2)
 2018204:	1007883a 	mov	r3,r2
 2018208:	e0bffe03 	ldbu	r2,-8(fp)
 201820c:	0084303a 	nor	r2,zero,r2
 2018210:	1884703a 	and	r2,r3,r2
 2018214:	1007883a 	mov	r3,r2
 2018218:	e0bffb17 	ldw	r2,-20(fp)
 201821c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2018220:	e0bffb17 	ldw	r2,-20(fp)
 2018224:	e0ffff03 	ldbu	r3,-4(fp)
 2018228:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 201822c:	e0bffb17 	ldw	r2,-20(fp)
 2018230:	10800c03 	ldbu	r2,48(r2)
 2018234:	10803fcc 	andi	r2,r2,255
 2018238:	1080020c 	andi	r2,r2,8
 201823c:	1000111e 	bne	r2,zero,2018284 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2018240:	e0bffb17 	ldw	r2,-20(fp)
 2018244:	10c00d83 	ldbu	r3,54(r2)
 2018248:	d0a7b303 	ldbu	r2,-24884(gp)
 201824c:	1884b03a 	or	r2,r3,r2
 2018250:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2018254:	e0fffa03 	ldbu	r3,-24(fp)
 2018258:	e13ffa03 	ldbu	r4,-24(fp)
 201825c:	d0a7b344 	addi	r2,gp,-24883
 2018260:	2085883a 	add	r2,r4,r2
 2018264:	11000003 	ldbu	r4,0(r2)
 2018268:	e0bffb17 	ldw	r2,-20(fp)
 201826c:	10800d43 	ldbu	r2,53(r2)
 2018270:	2084b03a 	or	r2,r4,r2
 2018274:	1009883a 	mov	r4,r2
 2018278:	d0a7b344 	addi	r2,gp,-24883
 201827c:	1885883a 	add	r2,r3,r2
 2018280:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2018284:	e17ffc17 	ldw	r5,-16(fp)
 2018288:	e13ffb17 	ldw	r4,-20(fp)
 201828c:	20185340 	call	2018534 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2018290:	e0bffb17 	ldw	r2,-20(fp)
 2018294:	10800817 	ldw	r2,32(r2)
 2018298:	10000826 	beq	r2,zero,20182bc <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201829c:	e0bffb17 	ldw	r2,-20(fp)
 20182a0:	10800817 	ldw	r2,32(r2)
 20182a4:	100b883a 	mov	r5,r2
 20182a8:	e13ffb17 	ldw	r4,-20(fp)
 20182ac:	20185ec0 	call	20185ec <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 20182b0:	e0bffb17 	ldw	r2,-20(fp)
 20182b4:	e0fffc17 	ldw	r3,-16(fp)
 20182b8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 20182bc:	e0bffa83 	ldbu	r2,-22(fp)
}
 20182c0:	e037883a 	mov	sp,fp
 20182c4:	dfc00117 	ldw	ra,4(sp)
 20182c8:	df000017 	ldw	fp,0(sp)
 20182cc:	dec00204 	addi	sp,sp,8
 20182d0:	f800283a 	ret

020182d4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 20182d4:	defffd04 	addi	sp,sp,-12
 20182d8:	df000215 	stw	fp,8(sp)
 20182dc:	df000204 	addi	fp,sp,8
 20182e0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 20182e4:	d0a7b617 	ldw	r2,-24872(gp)
 20182e8:	e0ffff17 	ldw	r3,-4(fp)
 20182ec:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 20182f0:	d0a7b617 	ldw	r2,-24872(gp)
 20182f4:	10800d03 	ldbu	r2,52(r2)
 20182f8:	10803fcc 	andi	r2,r2,255
 20182fc:	d0e7b617 	ldw	r3,-24872(gp)
 2018300:	18c00d03 	ldbu	r3,52(r3)
 2018304:	18c03fcc 	andi	r3,r3,255
 2018308:	e13fff17 	ldw	r4,-4(fp)
 201830c:	20c7883a 	add	r3,r4,r3
 2018310:	18c002c4 	addi	r3,r3,11
 2018314:	19000003 	ldbu	r4,0(r3)
 2018318:	d0e7b617 	ldw	r3,-24872(gp)
 201831c:	18c00d43 	ldbu	r3,53(r3)
 2018320:	20c6b03a 	or	r3,r4,r3
 2018324:	1809883a 	mov	r4,r3
 2018328:	e0ffff17 	ldw	r3,-4(fp)
 201832c:	1885883a 	add	r2,r3,r2
 2018330:	108002c4 	addi	r2,r2,11
 2018334:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2018338:	e0bfff17 	ldw	r2,-4(fp)
 201833c:	10c00283 	ldbu	r3,10(r2)
 2018340:	d0a7b617 	ldw	r2,-24872(gp)
 2018344:	10800d83 	ldbu	r2,54(r2)
 2018348:	1884b03a 	or	r2,r3,r2
 201834c:	1007883a 	mov	r3,r2
 2018350:	e0bfff17 	ldw	r2,-4(fp)
 2018354:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2018358:	d0a7b617 	ldw	r2,-24872(gp)
 201835c:	10800d03 	ldbu	r2,52(r2)
 2018360:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2018364:	e0fffe03 	ldbu	r3,-8(fp)
 2018368:	e13ffe03 	ldbu	r4,-8(fp)
 201836c:	d0a7b344 	addi	r2,gp,-24883
 2018370:	2085883a 	add	r2,r4,r2
 2018374:	10800003 	ldbu	r2,0(r2)
 2018378:	1009883a 	mov	r4,r2
 201837c:	d0a7b617 	ldw	r2,-24872(gp)
 2018380:	10800d43 	ldbu	r2,53(r2)
 2018384:	0084303a 	nor	r2,zero,r2
 2018388:	2084703a 	and	r2,r4,r2
 201838c:	1009883a 	mov	r4,r2
 2018390:	d0a7b344 	addi	r2,gp,-24883
 2018394:	1885883a 	add	r2,r3,r2
 2018398:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201839c:	e0fffe03 	ldbu	r3,-8(fp)
 20183a0:	d0a7b344 	addi	r2,gp,-24883
 20183a4:	1885883a 	add	r2,r3,r2
 20183a8:	10800003 	ldbu	r2,0(r2)
 20183ac:	10803fcc 	andi	r2,r2,255
 20183b0:	1000071e 	bne	r2,zero,20183d0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20183b4:	d0a7b617 	ldw	r2,-24872(gp)
 20183b8:	10800d83 	ldbu	r2,54(r2)
 20183bc:	0084303a 	nor	r2,zero,r2
 20183c0:	1007883a 	mov	r3,r2
 20183c4:	d0a7b303 	ldbu	r2,-24884(gp)
 20183c8:	1884703a 	and	r2,r3,r2
 20183cc:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 20183d0:	0001883a 	nop
 20183d4:	e037883a 	mov	sp,fp
 20183d8:	df000017 	ldw	fp,0(sp)
 20183dc:	dec00104 	addi	sp,sp,4
 20183e0:	f800283a 	ret

020183e4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 20183e4:	defffb04 	addi	sp,sp,-20
 20183e8:	df000415 	stw	fp,16(sp)
 20183ec:	df000404 	addi	fp,sp,16
 20183f0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 20183f4:	d0a7b617 	ldw	r2,-24872(gp)
 20183f8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 20183fc:	d0a7b617 	ldw	r2,-24872(gp)
 2018400:	e0ffff17 	ldw	r3,-4(fp)
 2018404:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2018408:	e0bfff17 	ldw	r2,-4(fp)
 201840c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2018410:	e0bffc17 	ldw	r2,-16(fp)
 2018414:	10800017 	ldw	r2,0(r2)
 2018418:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 201841c:	00002006 	br	20184a0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2018420:	d0a7b617 	ldw	r2,-24872(gp)
 2018424:	10800d03 	ldbu	r2,52(r2)
 2018428:	10803fcc 	andi	r2,r2,255
 201842c:	d0e7b617 	ldw	r3,-24872(gp)
 2018430:	18c00d03 	ldbu	r3,52(r3)
 2018434:	18c03fcc 	andi	r3,r3,255
 2018438:	e13ffd17 	ldw	r4,-12(fp)
 201843c:	20c7883a 	add	r3,r4,r3
 2018440:	18c002c4 	addi	r3,r3,11
 2018444:	19000003 	ldbu	r4,0(r3)
 2018448:	d0e7b617 	ldw	r3,-24872(gp)
 201844c:	18c00d43 	ldbu	r3,53(r3)
 2018450:	20c6b03a 	or	r3,r4,r3
 2018454:	1809883a 	mov	r4,r3
 2018458:	e0fffd17 	ldw	r3,-12(fp)
 201845c:	1885883a 	add	r2,r3,r2
 2018460:	108002c4 	addi	r2,r2,11
 2018464:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2018468:	e0bffd17 	ldw	r2,-12(fp)
 201846c:	10c00283 	ldbu	r3,10(r2)
 2018470:	d0a7b617 	ldw	r2,-24872(gp)
 2018474:	10800d83 	ldbu	r2,54(r2)
 2018478:	1884b03a 	or	r2,r3,r2
 201847c:	1007883a 	mov	r3,r2
 2018480:	e0bffd17 	ldw	r2,-12(fp)
 2018484:	10c00285 	stb	r3,10(r2)
        pevents++;
 2018488:	e0bffc17 	ldw	r2,-16(fp)
 201848c:	10800104 	addi	r2,r2,4
 2018490:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2018494:	e0bffc17 	ldw	r2,-16(fp)
 2018498:	10800017 	ldw	r2,0(r2)
 201849c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 20184a0:	e0bffd17 	ldw	r2,-12(fp)
 20184a4:	103fde1e 	bne	r2,zero,2018420 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20184a8:	d0a7b617 	ldw	r2,-24872(gp)
 20184ac:	10800d03 	ldbu	r2,52(r2)
 20184b0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20184b4:	e0fffe03 	ldbu	r3,-8(fp)
 20184b8:	e13ffe03 	ldbu	r4,-8(fp)
 20184bc:	d0a7b344 	addi	r2,gp,-24883
 20184c0:	2085883a 	add	r2,r4,r2
 20184c4:	10800003 	ldbu	r2,0(r2)
 20184c8:	1009883a 	mov	r4,r2
 20184cc:	d0a7b617 	ldw	r2,-24872(gp)
 20184d0:	10800d43 	ldbu	r2,53(r2)
 20184d4:	0084303a 	nor	r2,zero,r2
 20184d8:	2084703a 	and	r2,r4,r2
 20184dc:	1009883a 	mov	r4,r2
 20184e0:	d0a7b344 	addi	r2,gp,-24883
 20184e4:	1885883a 	add	r2,r3,r2
 20184e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20184ec:	e0fffe03 	ldbu	r3,-8(fp)
 20184f0:	d0a7b344 	addi	r2,gp,-24883
 20184f4:	1885883a 	add	r2,r3,r2
 20184f8:	10800003 	ldbu	r2,0(r2)
 20184fc:	10803fcc 	andi	r2,r2,255
 2018500:	1000071e 	bne	r2,zero,2018520 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2018504:	d0a7b617 	ldw	r2,-24872(gp)
 2018508:	10800d83 	ldbu	r2,54(r2)
 201850c:	0084303a 	nor	r2,zero,r2
 2018510:	1007883a 	mov	r3,r2
 2018514:	d0a7b303 	ldbu	r2,-24884(gp)
 2018518:	1884703a 	and	r2,r3,r2
 201851c:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 2018520:	0001883a 	nop
 2018524:	e037883a 	mov	sp,fp
 2018528:	df000017 	ldw	fp,0(sp)
 201852c:	dec00104 	addi	sp,sp,4
 2018530:	f800283a 	ret

02018534 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2018534:	defffc04 	addi	sp,sp,-16
 2018538:	df000315 	stw	fp,12(sp)
 201853c:	df000304 	addi	fp,sp,12
 2018540:	e13ffe15 	stw	r4,-8(fp)
 2018544:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2018548:	e0bffe17 	ldw	r2,-8(fp)
 201854c:	10800d03 	ldbu	r2,52(r2)
 2018550:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2018554:	e0bffd03 	ldbu	r2,-12(fp)
 2018558:	e0fffd03 	ldbu	r3,-12(fp)
 201855c:	e13fff17 	ldw	r4,-4(fp)
 2018560:	20c7883a 	add	r3,r4,r3
 2018564:	18c002c4 	addi	r3,r3,11
 2018568:	18c00003 	ldbu	r3,0(r3)
 201856c:	1809883a 	mov	r4,r3
 2018570:	e0fffe17 	ldw	r3,-8(fp)
 2018574:	18c00d43 	ldbu	r3,53(r3)
 2018578:	00c6303a 	nor	r3,zero,r3
 201857c:	20c6703a 	and	r3,r4,r3
 2018580:	1809883a 	mov	r4,r3
 2018584:	e0ffff17 	ldw	r3,-4(fp)
 2018588:	1885883a 	add	r2,r3,r2
 201858c:	108002c4 	addi	r2,r2,11
 2018590:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2018594:	e0bffd03 	ldbu	r2,-12(fp)
 2018598:	e0ffff17 	ldw	r3,-4(fp)
 201859c:	1885883a 	add	r2,r3,r2
 20185a0:	108002c4 	addi	r2,r2,11
 20185a4:	10800003 	ldbu	r2,0(r2)
 20185a8:	10803fcc 	andi	r2,r2,255
 20185ac:	10000a1e 	bne	r2,zero,20185d8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20185b0:	e0bfff17 	ldw	r2,-4(fp)
 20185b4:	10800283 	ldbu	r2,10(r2)
 20185b8:	1007883a 	mov	r3,r2
 20185bc:	e0bffe17 	ldw	r2,-8(fp)
 20185c0:	10800d83 	ldbu	r2,54(r2)
 20185c4:	0084303a 	nor	r2,zero,r2
 20185c8:	1884703a 	and	r2,r3,r2
 20185cc:	1007883a 	mov	r3,r2
 20185d0:	e0bfff17 	ldw	r2,-4(fp)
 20185d4:	10c00285 	stb	r3,10(r2)
    }
}
 20185d8:	0001883a 	nop
 20185dc:	e037883a 	mov	sp,fp
 20185e0:	df000017 	ldw	fp,0(sp)
 20185e4:	dec00104 	addi	sp,sp,4
 20185e8:	f800283a 	ret

020185ec <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20185ec:	defffa04 	addi	sp,sp,-24
 20185f0:	df000515 	stw	fp,20(sp)
 20185f4:	df000504 	addi	fp,sp,20
 20185f8:	e13ffe15 	stw	r4,-8(fp)
 20185fc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2018600:	e0bffe17 	ldw	r2,-8(fp)
 2018604:	10800d03 	ldbu	r2,52(r2)
 2018608:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 201860c:	e0bffe17 	ldw	r2,-8(fp)
 2018610:	10800d83 	ldbu	r2,54(r2)
 2018614:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2018618:	e0bffe17 	ldw	r2,-8(fp)
 201861c:	10800d43 	ldbu	r2,53(r2)
 2018620:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2018624:	e0bfff17 	ldw	r2,-4(fp)
 2018628:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 201862c:	e0bffb17 	ldw	r2,-20(fp)
 2018630:	10800017 	ldw	r2,0(r2)
 2018634:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2018638:	00002506 	br	20186d0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 201863c:	e0bffd03 	ldbu	r2,-12(fp)
 2018640:	e0fffd03 	ldbu	r3,-12(fp)
 2018644:	e13ffc17 	ldw	r4,-16(fp)
 2018648:	20c7883a 	add	r3,r4,r3
 201864c:	18c002c4 	addi	r3,r3,11
 2018650:	18c00003 	ldbu	r3,0(r3)
 2018654:	1809883a 	mov	r4,r3
 2018658:	e0fffd83 	ldbu	r3,-10(fp)
 201865c:	00c6303a 	nor	r3,zero,r3
 2018660:	20c6703a 	and	r3,r4,r3
 2018664:	1809883a 	mov	r4,r3
 2018668:	e0fffc17 	ldw	r3,-16(fp)
 201866c:	1885883a 	add	r2,r3,r2
 2018670:	108002c4 	addi	r2,r2,11
 2018674:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2018678:	e0bffd03 	ldbu	r2,-12(fp)
 201867c:	e0fffc17 	ldw	r3,-16(fp)
 2018680:	1885883a 	add	r2,r3,r2
 2018684:	108002c4 	addi	r2,r2,11
 2018688:	10800003 	ldbu	r2,0(r2)
 201868c:	10803fcc 	andi	r2,r2,255
 2018690:	1000091e 	bne	r2,zero,20186b8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2018694:	e0bffc17 	ldw	r2,-16(fp)
 2018698:	10800283 	ldbu	r2,10(r2)
 201869c:	1007883a 	mov	r3,r2
 20186a0:	e0bffd43 	ldbu	r2,-11(fp)
 20186a4:	0084303a 	nor	r2,zero,r2
 20186a8:	1884703a 	and	r2,r3,r2
 20186ac:	1007883a 	mov	r3,r2
 20186b0:	e0bffc17 	ldw	r2,-16(fp)
 20186b4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20186b8:	e0bffb17 	ldw	r2,-20(fp)
 20186bc:	10800104 	addi	r2,r2,4
 20186c0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20186c4:	e0bffb17 	ldw	r2,-20(fp)
 20186c8:	10800017 	ldw	r2,0(r2)
 20186cc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20186d0:	e0bffc17 	ldw	r2,-16(fp)
 20186d4:	103fd91e 	bne	r2,zero,201863c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20186d8:	0001883a 	nop
 20186dc:	e037883a 	mov	sp,fp
 20186e0:	df000017 	ldw	fp,0(sp)
 20186e4:	dec00104 	addi	sp,sp,4
 20186e8:	f800283a 	ret

020186ec <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20186ec:	defffc04 	addi	sp,sp,-16
 20186f0:	df000315 	stw	fp,12(sp)
 20186f4:	df000304 	addi	fp,sp,12
 20186f8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 20186fc:	e0bfff17 	ldw	r2,-4(fp)
 2018700:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2018704:	e0bfff17 	ldw	r2,-4(fp)
 2018708:	108002c4 	addi	r2,r2,11
 201870c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018710:	e03ffe05 	stb	zero,-8(fp)
 2018714:	00000706 	br	2018734 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2018718:	e0bffd17 	ldw	r2,-12(fp)
 201871c:	10c00044 	addi	r3,r2,1
 2018720:	e0fffd15 	stw	r3,-12(fp)
 2018724:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018728:	e0bffe03 	ldbu	r2,-8(fp)
 201872c:	10800044 	addi	r2,r2,1
 2018730:	e0bffe05 	stb	r2,-8(fp)
 2018734:	e0bffe03 	ldbu	r2,-8(fp)
 2018738:	108000f0 	cmpltui	r2,r2,3
 201873c:	103ff61e 	bne	r2,zero,2018718 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2018740:	0001883a 	nop
 2018744:	e037883a 	mov	sp,fp
 2018748:	df000017 	ldw	fp,0(sp)
 201874c:	dec00104 	addi	sp,sp,4
 2018750:	f800283a 	ret

02018754 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2018754:	defffb04 	addi	sp,sp,-20
 2018758:	dfc00415 	stw	ra,16(sp)
 201875c:	df000315 	stw	fp,12(sp)
 2018760:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2018764:	0142d004 	movi	r5,2880
 2018768:	010080f4 	movhi	r4,515
 201876c:	21013c04 	addi	r4,r4,1264
 2018770:	2018acc0 	call	2018acc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2018774:	008080f4 	movhi	r2,515
 2018778:	10813c04 	addi	r2,r2,1264
 201877c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2018780:	008080f4 	movhi	r2,515
 2018784:	10814804 	addi	r2,r2,1312
 2018788:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 201878c:	e03ffd0d 	sth	zero,-12(fp)
 2018790:	00001306 	br	20187e0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018794:	e0bffe17 	ldw	r2,-8(fp)
 2018798:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 201879c:	e0bffe17 	ldw	r2,-8(fp)
 20187a0:	e0ffff17 	ldw	r3,-4(fp)
 20187a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20187a8:	e0bffe17 	ldw	r2,-8(fp)
 20187ac:	00c00fc4 	movi	r3,63
 20187b0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20187b4:	e0bffe17 	ldw	r2,-8(fp)
 20187b8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20187bc:	e0bffe17 	ldw	r2,-8(fp)
 20187c0:	10800c04 	addi	r2,r2,48
 20187c4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20187c8:	e0bfff17 	ldw	r2,-4(fp)
 20187cc:	10800c04 	addi	r2,r2,48
 20187d0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20187d4:	e0bffd0b 	ldhu	r2,-12(fp)
 20187d8:	10800044 	addi	r2,r2,1
 20187dc:	e0bffd0d 	sth	r2,-12(fp)
 20187e0:	e0bffd0b 	ldhu	r2,-12(fp)
 20187e4:	10800ef0 	cmpltui	r2,r2,59
 20187e8:	103fea1e 	bne	r2,zero,2018794 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20187ec:	e0bffe17 	ldw	r2,-8(fp)
 20187f0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20187f4:	e0bffe17 	ldw	r2,-8(fp)
 20187f8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 20187fc:	e0bffe17 	ldw	r2,-8(fp)
 2018800:	00c00fc4 	movi	r3,63
 2018804:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2018808:	e0bffe17 	ldw	r2,-8(fp)
 201880c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2018810:	008080f4 	movhi	r2,515
 2018814:	10813c04 	addi	r2,r2,1264
 2018818:	d0a7b415 	stw	r2,-24880(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 201881c:	0001883a 	nop
 2018820:	e037883a 	mov	sp,fp
 2018824:	dfc00117 	ldw	ra,4(sp)
 2018828:	df000017 	ldw	fp,0(sp)
 201882c:	dec00204 	addi	sp,sp,8
 2018830:	f800283a 	ret

02018834 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2018834:	deffff04 	addi	sp,sp,-4
 2018838:	df000015 	stw	fp,0(sp)
 201883c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2018840:	d027b715 	stw	zero,-24868(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2018844:	d027b505 	stb	zero,-24876(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2018848:	d027a705 	stb	zero,-24932(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 201884c:	d027af45 	stb	zero,-24899(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2018850:	d027a745 	stb	zero,-24931(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2018854:	d027ac15 	stw	zero,-24912(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2018858:	d027a815 	stw	zero,-24928(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 201885c:	d027ba15 	stw	zero,-24856(gp)
    OSIdleCtrMax  = 0L;
 2018860:	d027ad15 	stw	zero,-24908(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2018864:	d027b905 	stb	zero,-24860(gp)
#endif
}
 2018868:	0001883a 	nop
 201886c:	e037883a 	mov	sp,fp
 2018870:	df000017 	ldw	fp,0(sp)
 2018874:	dec00104 	addi	sp,sp,4
 2018878:	f800283a 	ret

0201887c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 201887c:	defffd04 	addi	sp,sp,-12
 2018880:	df000215 	stw	fp,8(sp)
 2018884:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2018888:	d027b305 	stb	zero,-24884(gp)
    prdytbl       = &OSRdyTbl[0];
 201888c:	d0a7b344 	addi	r2,gp,-24883
 2018890:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2018894:	e03ffe05 	stb	zero,-8(fp)
 2018898:	00000706 	br	20188b8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 201889c:	e0bfff17 	ldw	r2,-4(fp)
 20188a0:	10c00044 	addi	r3,r2,1
 20188a4:	e0ffff15 	stw	r3,-4(fp)
 20188a8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20188ac:	e0bffe03 	ldbu	r2,-8(fp)
 20188b0:	10800044 	addi	r2,r2,1
 20188b4:	e0bffe05 	stb	r2,-8(fp)
 20188b8:	e0bffe03 	ldbu	r2,-8(fp)
 20188bc:	108000f0 	cmpltui	r2,r2,3
 20188c0:	103ff61e 	bne	r2,zero,201889c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20188c4:	d027a945 	stb	zero,-24923(gp)
    OSPrioHighRdy = 0;
 20188c8:	d027a905 	stb	zero,-24924(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20188cc:	d027b115 	stw	zero,-24892(gp)
    OSTCBCur      = (OS_TCB *)0;
 20188d0:	d027b615 	stw	zero,-24872(gp)
}
 20188d4:	0001883a 	nop
 20188d8:	e037883a 	mov	sp,fp
 20188dc:	df000017 	ldw	fp,0(sp)
 20188e0:	dec00104 	addi	sp,sp,4
 20188e4:	f800283a 	ret

020188e8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20188e8:	defff804 	addi	sp,sp,-32
 20188ec:	dfc00715 	stw	ra,28(sp)
 20188f0:	df000615 	stw	fp,24(sp)
 20188f4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 20188f8:	008000c4 	movi	r2,3
 20188fc:	d8800415 	stw	r2,16(sp)
 2018900:	d8000315 	stw	zero,12(sp)
 2018904:	00808004 	movi	r2,512
 2018908:	d8800215 	stw	r2,8(sp)
 201890c:	008080f4 	movhi	r2,515
 2018910:	10bf3c04 	addi	r2,r2,-784
 2018914:	d8800115 	stw	r2,4(sp)
 2018918:	00bfffd4 	movui	r2,65535
 201891c:	d8800015 	stw	r2,0(sp)
 2018920:	01c00504 	movi	r7,20
 2018924:	018080f4 	movhi	r6,515
 2018928:	31813b04 	addi	r6,r6,1260
 201892c:	000b883a 	mov	r5,zero
 2018930:	010080b4 	movhi	r4,514
 2018934:	21236504 	addi	r4,r4,-29292
 2018938:	201df1c0 	call	201df1c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 201893c:	e1bfff04 	addi	r6,fp,-4
 2018940:	014080b4 	movhi	r5,514
 2018944:	294a3904 	addi	r5,r5,10468
 2018948:	01000504 	movi	r4,20
 201894c:	201e72c0 	call	201e72c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2018950:	0001883a 	nop
 2018954:	e037883a 	mov	sp,fp
 2018958:	dfc00117 	ldw	ra,4(sp)
 201895c:	df000017 	ldw	fp,0(sp)
 2018960:	dec00204 	addi	sp,sp,8
 2018964:	f800283a 	ret

02018968 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2018968:	defff804 	addi	sp,sp,-32
 201896c:	dfc00715 	stw	ra,28(sp)
 2018970:	df000615 	stw	fp,24(sp)
 2018974:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2018978:	008000c4 	movi	r2,3
 201897c:	d8800415 	stw	r2,16(sp)
 2018980:	d8000315 	stw	zero,12(sp)
 2018984:	00808004 	movi	r2,512
 2018988:	d8800215 	stw	r2,8(sp)
 201898c:	008080f4 	movhi	r2,515
 2018990:	10bcc404 	addi	r2,r2,-3312
 2018994:	d8800115 	stw	r2,4(sp)
 2018998:	00bfff94 	movui	r2,65534
 201899c:	d8800015 	stw	r2,0(sp)
 20189a0:	01c004c4 	movi	r7,19
 20189a4:	018080f4 	movhi	r6,515
 20189a8:	31bec304 	addi	r6,r6,-1268
 20189ac:	000b883a 	mov	r5,zero
 20189b0:	010080b4 	movhi	r4,514
 20189b4:	21237c04 	addi	r4,r4,-29200
 20189b8:	201df1c0 	call	201df1c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20189bc:	e1bfff04 	addi	r6,fp,-4
 20189c0:	014080b4 	movhi	r5,514
 20189c4:	294a3d04 	addi	r5,r5,10484
 20189c8:	010004c4 	movi	r4,19
 20189cc:	201e72c0 	call	201e72c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20189d0:	0001883a 	nop
 20189d4:	e037883a 	mov	sp,fp
 20189d8:	dfc00117 	ldw	ra,4(sp)
 20189dc:	df000017 	ldw	fp,0(sp)
 20189e0:	dec00204 	addi	sp,sp,8
 20189e4:	f800283a 	ret

020189e8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20189e8:	defffb04 	addi	sp,sp,-20
 20189ec:	dfc00415 	stw	ra,16(sp)
 20189f0:	df000315 	stw	fp,12(sp)
 20189f4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20189f8:	01414404 	movi	r5,1296
 20189fc:	010080f4 	movhi	r4,515
 2018a00:	21040c04 	addi	r4,r4,4144
 2018a04:	2018acc0 	call	2018acc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2018a08:	01401504 	movi	r5,84
 2018a0c:	010080f4 	movhi	r4,515
 2018a10:	21055004 	addi	r4,r4,5440
 2018a14:	2018acc0 	call	2018acc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2018a18:	008080f4 	movhi	r2,515
 2018a1c:	10840c04 	addi	r2,r2,4144
 2018a20:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2018a24:	008080f4 	movhi	r2,515
 2018a28:	10842704 	addi	r2,r2,4252
 2018a2c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018a30:	e03ffd05 	stb	zero,-12(fp)
 2018a34:	00001106 	br	2018a7c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2018a38:	e0bffe17 	ldw	r2,-8(fp)
 2018a3c:	e0ffff17 	ldw	r3,-4(fp)
 2018a40:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2018a44:	e0bffe17 	ldw	r2,-8(fp)
 2018a48:	00c00fc4 	movi	r3,63
 2018a4c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018a50:	e0bffe17 	ldw	r2,-8(fp)
 2018a54:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2018a58:	e0bffe17 	ldw	r2,-8(fp)
 2018a5c:	10801b04 	addi	r2,r2,108
 2018a60:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2018a64:	e0bfff17 	ldw	r2,-4(fp)
 2018a68:	10801b04 	addi	r2,r2,108
 2018a6c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018a70:	e0bffd03 	ldbu	r2,-12(fp)
 2018a74:	10800044 	addi	r2,r2,1
 2018a78:	e0bffd05 	stb	r2,-12(fp)
 2018a7c:	e0bffd03 	ldbu	r2,-12(fp)
 2018a80:	108002f0 	cmpltui	r2,r2,11
 2018a84:	103fec1e 	bne	r2,zero,2018a38 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2018a88:	e0bffe17 	ldw	r2,-8(fp)
 2018a8c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2018a90:	e0bffe17 	ldw	r2,-8(fp)
 2018a94:	00c00fc4 	movi	r3,63
 2018a98:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018a9c:	e0bffe17 	ldw	r2,-8(fp)
 2018aa0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2018aa4:	d027aa15 	stw	zero,-24920(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2018aa8:	008080f4 	movhi	r2,515
 2018aac:	10840c04 	addi	r2,r2,4144
 2018ab0:	d0a7ae15 	stw	r2,-24904(gp)
}
 2018ab4:	0001883a 	nop
 2018ab8:	e037883a 	mov	sp,fp
 2018abc:	dfc00117 	ldw	ra,4(sp)
 2018ac0:	df000017 	ldw	fp,0(sp)
 2018ac4:	dec00204 	addi	sp,sp,8
 2018ac8:	f800283a 	ret

02018acc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2018acc:	defffd04 	addi	sp,sp,-12
 2018ad0:	df000215 	stw	fp,8(sp)
 2018ad4:	df000204 	addi	fp,sp,8
 2018ad8:	e13ffe15 	stw	r4,-8(fp)
 2018adc:	2805883a 	mov	r2,r5
 2018ae0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2018ae4:	00000706 	br	2018b04 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2018ae8:	e0bffe17 	ldw	r2,-8(fp)
 2018aec:	10c00044 	addi	r3,r2,1
 2018af0:	e0fffe15 	stw	r3,-8(fp)
 2018af4:	10000005 	stb	zero,0(r2)
        size--;
 2018af8:	e0bfff0b 	ldhu	r2,-4(fp)
 2018afc:	10bfffc4 	addi	r2,r2,-1
 2018b00:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2018b04:	e0bfff0b 	ldhu	r2,-4(fp)
 2018b08:	103ff71e 	bne	r2,zero,2018ae8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2018b0c:	0001883a 	nop
 2018b10:	e037883a 	mov	sp,fp
 2018b14:	df000017 	ldw	fp,0(sp)
 2018b18:	dec00104 	addi	sp,sp,4
 2018b1c:	f800283a 	ret

02018b20 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2018b20:	defffc04 	addi	sp,sp,-16
 2018b24:	df000315 	stw	fp,12(sp)
 2018b28:	df000304 	addi	fp,sp,12
 2018b2c:	e13ffd15 	stw	r4,-12(fp)
 2018b30:	e17ffe15 	stw	r5,-8(fp)
 2018b34:	3005883a 	mov	r2,r6
 2018b38:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2018b3c:	00000b06 	br	2018b6c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2018b40:	e0bffd17 	ldw	r2,-12(fp)
 2018b44:	10c00044 	addi	r3,r2,1
 2018b48:	e0fffd15 	stw	r3,-12(fp)
 2018b4c:	e0fffe17 	ldw	r3,-8(fp)
 2018b50:	19000044 	addi	r4,r3,1
 2018b54:	e13ffe15 	stw	r4,-8(fp)
 2018b58:	18c00003 	ldbu	r3,0(r3)
 2018b5c:	10c00005 	stb	r3,0(r2)
        size--;
 2018b60:	e0bfff0b 	ldhu	r2,-4(fp)
 2018b64:	10bfffc4 	addi	r2,r2,-1
 2018b68:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2018b6c:	e0bfff0b 	ldhu	r2,-4(fp)
 2018b70:	103ff31e 	bne	r2,zero,2018b40 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2018b74:	0001883a 	nop
 2018b78:	e037883a 	mov	sp,fp
 2018b7c:	df000017 	ldw	fp,0(sp)
 2018b80:	dec00104 	addi	sp,sp,4
 2018b84:	f800283a 	ret

02018b88 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2018b88:	defffb04 	addi	sp,sp,-20
 2018b8c:	dfc00415 	stw	ra,16(sp)
 2018b90:	df000315 	stw	fp,12(sp)
 2018b94:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2018b98:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018b9c:	0005303a 	rdctl	r2,status
 2018ba0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018ba4:	e0ffff17 	ldw	r3,-4(fp)
 2018ba8:	00bfff84 	movi	r2,-2
 2018bac:	1884703a 	and	r2,r3,r2
 2018bb0:	1001703a 	wrctl	status,r2
  
  return context;
 2018bb4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 2018bb8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2018bbc:	d0a7b503 	ldbu	r2,-24876(gp)
 2018bc0:	10803fcc 	andi	r2,r2,255
 2018bc4:	10001a1e 	bne	r2,zero,2018c30 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2018bc8:	d0a7a703 	ldbu	r2,-24932(gp)
 2018bcc:	10803fcc 	andi	r2,r2,255
 2018bd0:	1000171e 	bne	r2,zero,2018c30 <OS_Sched+0xa8>
            OS_SchedNew();
 2018bd4:	2018c580 	call	2018c58 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2018bd8:	d0e7a903 	ldbu	r3,-24924(gp)
 2018bdc:	d0a7a943 	ldbu	r2,-24923(gp)
 2018be0:	18c03fcc 	andi	r3,r3,255
 2018be4:	10803fcc 	andi	r2,r2,255
 2018be8:	18801126 	beq	r3,r2,2018c30 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2018bec:	d0a7a903 	ldbu	r2,-24924(gp)
 2018bf0:	10c03fcc 	andi	r3,r2,255
 2018bf4:	008080f4 	movhi	r2,515
 2018bf8:	10855004 	addi	r2,r2,5440
 2018bfc:	18c7883a 	add	r3,r3,r3
 2018c00:	18c7883a 	add	r3,r3,r3
 2018c04:	10c5883a 	add	r2,r2,r3
 2018c08:	10800017 	ldw	r2,0(r2)
 2018c0c:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2018c10:	d0a7b117 	ldw	r2,-24892(gp)
 2018c14:	10c00e17 	ldw	r3,56(r2)
 2018c18:	18c00044 	addi	r3,r3,1
 2018c1c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2018c20:	d0a7ac17 	ldw	r2,-24912(gp)
 2018c24:	10800044 	addi	r2,r2,1
 2018c28:	d0a7ac15 	stw	r2,-24912(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2018c2c:	20212240 	call	2021224 <OSCtxSw>
 2018c30:	e0bffd17 	ldw	r2,-12(fp)
 2018c34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018c38:	e0bffe17 	ldw	r2,-8(fp)
 2018c3c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2018c40:	0001883a 	nop
 2018c44:	e037883a 	mov	sp,fp
 2018c48:	dfc00117 	ldw	ra,4(sp)
 2018c4c:	df000017 	ldw	fp,0(sp)
 2018c50:	dec00204 	addi	sp,sp,8
 2018c54:	f800283a 	ret

02018c58 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2018c58:	defffe04 	addi	sp,sp,-8
 2018c5c:	df000115 	stw	fp,4(sp)
 2018c60:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2018c64:	d0a7b303 	ldbu	r2,-24884(gp)
 2018c68:	10c03fcc 	andi	r3,r2,255
 2018c6c:	008080b4 	movhi	r2,514
 2018c70:	1089f904 	addi	r2,r2,10212
 2018c74:	10c5883a 	add	r2,r2,r3
 2018c78:	10800003 	ldbu	r2,0(r2)
 2018c7c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2018c80:	e0bfff03 	ldbu	r2,-4(fp)
 2018c84:	100490fa 	slli	r2,r2,3
 2018c88:	1009883a 	mov	r4,r2
 2018c8c:	e0ffff03 	ldbu	r3,-4(fp)
 2018c90:	d0a7b344 	addi	r2,gp,-24883
 2018c94:	1885883a 	add	r2,r3,r2
 2018c98:	10800003 	ldbu	r2,0(r2)
 2018c9c:	10c03fcc 	andi	r3,r2,255
 2018ca0:	008080b4 	movhi	r2,514
 2018ca4:	1089f904 	addi	r2,r2,10212
 2018ca8:	10c5883a 	add	r2,r2,r3
 2018cac:	10800003 	ldbu	r2,0(r2)
 2018cb0:	2085883a 	add	r2,r4,r2
 2018cb4:	d0a7a905 	stb	r2,-24924(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2018cb8:	0001883a 	nop
 2018cbc:	e037883a 	mov	sp,fp
 2018cc0:	df000017 	ldw	fp,0(sp)
 2018cc4:	dec00104 	addi	sp,sp,4
 2018cc8:	f800283a 	ret

02018ccc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2018ccc:	defffc04 	addi	sp,sp,-16
 2018cd0:	df000315 	stw	fp,12(sp)
 2018cd4:	df000304 	addi	fp,sp,12
 2018cd8:	e13ffe15 	stw	r4,-8(fp)
 2018cdc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2018ce0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2018ce4:	00000b06 	br	2018d14 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 2018ce8:	e0bffe17 	ldw	r2,-8(fp)
 2018cec:	10c00044 	addi	r3,r2,1
 2018cf0:	e0fffe15 	stw	r3,-8(fp)
 2018cf4:	e0ffff17 	ldw	r3,-4(fp)
 2018cf8:	19000044 	addi	r4,r3,1
 2018cfc:	e13fff15 	stw	r4,-4(fp)
 2018d00:	18c00003 	ldbu	r3,0(r3)
 2018d04:	10c00005 	stb	r3,0(r2)
        len++;
 2018d08:	e0bffd03 	ldbu	r2,-12(fp)
 2018d0c:	10800044 	addi	r2,r2,1
 2018d10:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2018d14:	e0bfff17 	ldw	r2,-4(fp)
 2018d18:	10800003 	ldbu	r2,0(r2)
 2018d1c:	10803fcc 	andi	r2,r2,255
 2018d20:	103ff11e 	bne	r2,zero,2018ce8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2018d24:	e0bffe17 	ldw	r2,-8(fp)
 2018d28:	10000005 	stb	zero,0(r2)
    return (len);
 2018d2c:	e0bffd03 	ldbu	r2,-12(fp)
}
 2018d30:	e037883a 	mov	sp,fp
 2018d34:	df000017 	ldw	fp,0(sp)
 2018d38:	dec00104 	addi	sp,sp,4
 2018d3c:	f800283a 	ret

02018d40 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2018d40:	defffd04 	addi	sp,sp,-12
 2018d44:	df000215 	stw	fp,8(sp)
 2018d48:	df000204 	addi	fp,sp,8
 2018d4c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2018d50:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2018d54:	00000606 	br	2018d70 <OS_StrLen+0x30>
        psrc++;
 2018d58:	e0bfff17 	ldw	r2,-4(fp)
 2018d5c:	10800044 	addi	r2,r2,1
 2018d60:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2018d64:	e0bffe03 	ldbu	r2,-8(fp)
 2018d68:	10800044 	addi	r2,r2,1
 2018d6c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2018d70:	e0bfff17 	ldw	r2,-4(fp)
 2018d74:	10800003 	ldbu	r2,0(r2)
 2018d78:	10803fcc 	andi	r2,r2,255
 2018d7c:	103ff61e 	bne	r2,zero,2018d58 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2018d80:	e0bffe03 	ldbu	r2,-8(fp)
}
 2018d84:	e037883a 	mov	sp,fp
 2018d88:	df000017 	ldw	fp,0(sp)
 2018d8c:	dec00104 	addi	sp,sp,4
 2018d90:	f800283a 	ret

02018d94 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2018d94:	defffa04 	addi	sp,sp,-24
 2018d98:	dfc00515 	stw	ra,20(sp)
 2018d9c:	df000415 	stw	fp,16(sp)
 2018da0:	df000404 	addi	fp,sp,16
 2018da4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018da8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018dac:	0005303a 	rdctl	r2,status
 2018db0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018db4:	e0fffd17 	ldw	r3,-12(fp)
 2018db8:	00bfff84 	movi	r2,-2
 2018dbc:	1884703a 	and	r2,r3,r2
 2018dc0:	1001703a 	wrctl	status,r2
  
  return context;
 2018dc4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2018dc8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2018dcc:	d0a7a817 	ldw	r2,-24928(gp)
 2018dd0:	10800044 	addi	r2,r2,1
 2018dd4:	d0a7a815 	stw	r2,-24928(gp)
 2018dd8:	e0bffc17 	ldw	r2,-16(fp)
 2018ddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018de0:	e0bffe17 	ldw	r2,-8(fp)
 2018de4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2018de8:	20215380 	call	2021538 <OSTaskIdleHook>
    }
 2018dec:	003fef06 	br	2018dac <OS_TaskIdle+0x18>

02018df0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2018df0:	defffa04 	addi	sp,sp,-24
 2018df4:	dfc00515 	stw	ra,20(sp)
 2018df8:	df000415 	stw	fp,16(sp)
 2018dfc:	df000404 	addi	fp,sp,16
 2018e00:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018e04:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2018e08:	00000206 	br	2018e14 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2018e0c:	01003204 	movi	r4,200
 2018e10:	201efec0 	call	201efec <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2018e14:	d0a7b903 	ldbu	r2,-24860(gp)
 2018e18:	10803fcc 	andi	r2,r2,255
 2018e1c:	103ffb26 	beq	r2,zero,2018e0c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2018e20:	d0a7ad17 	ldw	r2,-24908(gp)
 2018e24:	01401904 	movi	r5,100
 2018e28:	1009883a 	mov	r4,r2
 2018e2c:	20069980 	call	2006998 <__udivsi3>
 2018e30:	d0a7ad15 	stw	r2,-24908(gp)
    if (OSIdleCtrMax == 0L) {
 2018e34:	d0a7ad17 	ldw	r2,-24908(gp)
 2018e38:	1000031e 	bne	r2,zero,2018e48 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2018e3c:	d027af05 	stb	zero,-24900(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2018e40:	01003fc4 	movi	r4,255
 2018e44:	201ec740 	call	201ec74 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018e48:	0005303a 	rdctl	r2,status
 2018e4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018e50:	e0fffd17 	ldw	r3,-12(fp)
 2018e54:	00bfff84 	movi	r2,-2
 2018e58:	1884703a 	and	r2,r3,r2
 2018e5c:	1001703a 	wrctl	status,r2
  
  return context;
 2018e60:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2018e64:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2018e68:	d0a7a817 	ldw	r2,-24928(gp)
 2018e6c:	d0a7ba15 	stw	r2,-24856(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2018e70:	d027a815 	stw	zero,-24928(gp)
 2018e74:	e0bffc17 	ldw	r2,-16(fp)
 2018e78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e7c:	e0bffe17 	ldw	r2,-8(fp)
 2018e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2018e84:	d0a7ba17 	ldw	r2,-24856(gp)
 2018e88:	d0e7ad17 	ldw	r3,-24908(gp)
 2018e8c:	180b883a 	mov	r5,r3
 2018e90:	1009883a 	mov	r4,r2
 2018e94:	20069980 	call	2006998 <__udivsi3>
 2018e98:	1007883a 	mov	r3,r2
 2018e9c:	00801904 	movi	r2,100
 2018ea0:	10c5c83a 	sub	r2,r2,r3
 2018ea4:	d0a7af05 	stb	r2,-24900(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2018ea8:	20214b80 	call	20214b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2018eac:	2018ebc0 	call	2018ebc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2018eb0:	01001904 	movi	r4,100
 2018eb4:	201efec0 	call	201efec <OSTimeDly>
    }
 2018eb8:	003fe306 	br	2018e48 <OS_TaskStat+0x58>

02018ebc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2018ebc:	defffa04 	addi	sp,sp,-24
 2018ec0:	dfc00515 	stw	ra,20(sp)
 2018ec4:	df000415 	stw	fp,16(sp)
 2018ec8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2018ecc:	e03ffc05 	stb	zero,-16(fp)
 2018ed0:	00002406 	br	2018f64 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2018ed4:	e0bffc03 	ldbu	r2,-16(fp)
 2018ed8:	e0fffe04 	addi	r3,fp,-8
 2018edc:	180b883a 	mov	r5,r3
 2018ee0:	1009883a 	mov	r4,r2
 2018ee4:	201eab40 	call	201eab4 <OSTaskStkChk>
 2018ee8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2018eec:	e0bffc43 	ldbu	r2,-15(fp)
 2018ef0:	1000191e 	bne	r2,zero,2018f58 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2018ef4:	e0fffc03 	ldbu	r3,-16(fp)
 2018ef8:	008080f4 	movhi	r2,515
 2018efc:	10855004 	addi	r2,r2,5440
 2018f00:	18c7883a 	add	r3,r3,r3
 2018f04:	18c7883a 	add	r3,r3,r3
 2018f08:	10c5883a 	add	r2,r2,r3
 2018f0c:	10800017 	ldw	r2,0(r2)
 2018f10:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2018f14:	e0bffd17 	ldw	r2,-12(fp)
 2018f18:	10000f26 	beq	r2,zero,2018f58 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2018f1c:	e0bffd17 	ldw	r2,-12(fp)
 2018f20:	10800060 	cmpeqi	r2,r2,1
 2018f24:	10000c1e 	bne	r2,zero,2018f58 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2018f28:	e0bffd17 	ldw	r2,-12(fp)
 2018f2c:	10c00217 	ldw	r3,8(r2)
 2018f30:	e0bffd17 	ldw	r2,-12(fp)
 2018f34:	10800317 	ldw	r2,12(r2)
 2018f38:	1085883a 	add	r2,r2,r2
 2018f3c:	1085883a 	add	r2,r2,r2
 2018f40:	1887883a 	add	r3,r3,r2
 2018f44:	e0bffd17 	ldw	r2,-12(fp)
 2018f48:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2018f4c:	e0ffff17 	ldw	r3,-4(fp)
 2018f50:	e0bffd17 	ldw	r2,-12(fp)
 2018f54:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2018f58:	e0bffc03 	ldbu	r2,-16(fp)
 2018f5c:	10800044 	addi	r2,r2,1
 2018f60:	e0bffc05 	stb	r2,-16(fp)
 2018f64:	e0bffc03 	ldbu	r2,-16(fp)
 2018f68:	10800570 	cmpltui	r2,r2,21
 2018f6c:	103fd91e 	bne	r2,zero,2018ed4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2018f70:	0001883a 	nop
 2018f74:	e037883a 	mov	sp,fp
 2018f78:	dfc00117 	ldw	ra,4(sp)
 2018f7c:	df000017 	ldw	fp,0(sp)
 2018f80:	dec00204 	addi	sp,sp,8
 2018f84:	f800283a 	ret

02018f88 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2018f88:	defff204 	addi	sp,sp,-56
 2018f8c:	dfc00d15 	stw	ra,52(sp)
 2018f90:	df000c15 	stw	fp,48(sp)
 2018f94:	df000c04 	addi	fp,sp,48
 2018f98:	e17ffc15 	stw	r5,-16(fp)
 2018f9c:	e1bffd15 	stw	r6,-12(fp)
 2018fa0:	3807883a 	mov	r3,r7
 2018fa4:	e0800417 	ldw	r2,16(fp)
 2018fa8:	e13ffb05 	stb	r4,-20(fp)
 2018fac:	e0fffe0d 	sth	r3,-8(fp)
 2018fb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018fb4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018fb8:	0005303a 	rdctl	r2,status
 2018fbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018fc0:	e0fffa17 	ldw	r3,-24(fp)
 2018fc4:	00bfff84 	movi	r2,-2
 2018fc8:	1884703a 	and	r2,r3,r2
 2018fcc:	1001703a 	wrctl	status,r2
  
  return context;
 2018fd0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2018fd4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2018fd8:	d0a7ae17 	ldw	r2,-24904(gp)
 2018fdc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2018fe0:	e0bff617 	ldw	r2,-40(fp)
 2018fe4:	10009326 	beq	r2,zero,2019234 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2018fe8:	e0bff617 	ldw	r2,-40(fp)
 2018fec:	10800517 	ldw	r2,20(r2)
 2018ff0:	d0a7ae15 	stw	r2,-24904(gp)
 2018ff4:	e0bff417 	ldw	r2,-48(fp)
 2018ff8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018ffc:	e0bff817 	ldw	r2,-32(fp)
 2019000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2019004:	e0bff617 	ldw	r2,-40(fp)
 2019008:	e0fffc17 	ldw	r3,-16(fp)
 201900c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2019010:	e0bff617 	ldw	r2,-40(fp)
 2019014:	e0fffb03 	ldbu	r3,-20(fp)
 2019018:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 201901c:	e0bff617 	ldw	r2,-40(fp)
 2019020:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2019024:	e0bff617 	ldw	r2,-40(fp)
 2019028:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 201902c:	e0bff617 	ldw	r2,-40(fp)
 2019030:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2019034:	e0bff617 	ldw	r2,-40(fp)
 2019038:	e0c00317 	ldw	r3,12(fp)
 201903c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2019040:	e0bff617 	ldw	r2,-40(fp)
 2019044:	e0c00217 	ldw	r3,8(fp)
 2019048:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 201904c:	e0bff617 	ldw	r2,-40(fp)
 2019050:	e0fffd17 	ldw	r3,-12(fp)
 2019054:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2019058:	e0bff617 	ldw	r2,-40(fp)
 201905c:	e0ffff0b 	ldhu	r3,-4(fp)
 2019060:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2019064:	e0bff617 	ldw	r2,-40(fp)
 2019068:	e0fffe0b 	ldhu	r3,-8(fp)
 201906c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2019070:	e0bff617 	ldw	r2,-40(fp)
 2019074:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2019078:	e0bffb03 	ldbu	r2,-20(fp)
 201907c:	1004d0fa 	srli	r2,r2,3
 2019080:	1007883a 	mov	r3,r2
 2019084:	e0bff617 	ldw	r2,-40(fp)
 2019088:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 201908c:	e0bffb03 	ldbu	r2,-20(fp)
 2019090:	108001cc 	andi	r2,r2,7
 2019094:	1007883a 	mov	r3,r2
 2019098:	e0bff617 	ldw	r2,-40(fp)
 201909c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 20190a0:	e0bff617 	ldw	r2,-40(fp)
 20190a4:	10800d03 	ldbu	r2,52(r2)
 20190a8:	10803fcc 	andi	r2,r2,255
 20190ac:	00c00044 	movi	r3,1
 20190b0:	1884983a 	sll	r2,r3,r2
 20190b4:	1007883a 	mov	r3,r2
 20190b8:	e0bff617 	ldw	r2,-40(fp)
 20190bc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 20190c0:	e0bff617 	ldw	r2,-40(fp)
 20190c4:	10800cc3 	ldbu	r2,51(r2)
 20190c8:	10803fcc 	andi	r2,r2,255
 20190cc:	00c00044 	movi	r3,1
 20190d0:	1884983a 	sll	r2,r3,r2
 20190d4:	1007883a 	mov	r3,r2
 20190d8:	e0bff617 	ldw	r2,-40(fp)
 20190dc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 20190e0:	e0bff617 	ldw	r2,-40(fp)
 20190e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 20190e8:	e0bff617 	ldw	r2,-40(fp)
 20190ec:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 20190f0:	e0bff617 	ldw	r2,-40(fp)
 20190f4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 20190f8:	e0bff617 	ldw	r2,-40(fp)
 20190fc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2019100:	e0bff617 	ldw	r2,-40(fp)
 2019104:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2019108:	e0bff617 	ldw	r2,-40(fp)
 201910c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2019110:	e0bff617 	ldw	r2,-40(fp)
 2019114:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2019118:	e0bff617 	ldw	r2,-40(fp)
 201911c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2019120:	e0bff617 	ldw	r2,-40(fp)
 2019124:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2019128:	e0bff617 	ldw	r2,-40(fp)
 201912c:	00c00fc4 	movi	r3,63
 2019130:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2019134:	e0bff617 	ldw	r2,-40(fp)
 2019138:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 201913c:	e13ff617 	ldw	r4,-40(fp)
 2019140:	20215580 	call	2021558 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2019144:	e13ff617 	ldw	r4,-40(fp)
 2019148:	20214500 	call	2021450 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201914c:	0005303a 	rdctl	r2,status
 2019150:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019154:	e0fff517 	ldw	r3,-44(fp)
 2019158:	00bfff84 	movi	r2,-2
 201915c:	1884703a 	and	r2,r3,r2
 2019160:	1001703a 	wrctl	status,r2
  
  return context;
 2019164:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2019168:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 201916c:	e0fffb03 	ldbu	r3,-20(fp)
 2019170:	008080f4 	movhi	r2,515
 2019174:	10855004 	addi	r2,r2,5440
 2019178:	18c7883a 	add	r3,r3,r3
 201917c:	18c7883a 	add	r3,r3,r3
 2019180:	10c5883a 	add	r2,r2,r3
 2019184:	e0fff617 	ldw	r3,-40(fp)
 2019188:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 201918c:	d0e7aa17 	ldw	r3,-24920(gp)
 2019190:	e0bff617 	ldw	r2,-40(fp)
 2019194:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2019198:	e0bff617 	ldw	r2,-40(fp)
 201919c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 20191a0:	d0a7aa17 	ldw	r2,-24920(gp)
 20191a4:	10000326 	beq	r2,zero,20191b4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 20191a8:	d0a7aa17 	ldw	r2,-24920(gp)
 20191ac:	e0fff617 	ldw	r3,-40(fp)
 20191b0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 20191b4:	e0bff617 	ldw	r2,-40(fp)
 20191b8:	d0a7aa15 	stw	r2,-24920(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 20191bc:	e0bff617 	ldw	r2,-40(fp)
 20191c0:	10c00d83 	ldbu	r3,54(r2)
 20191c4:	d0a7b303 	ldbu	r2,-24884(gp)
 20191c8:	1884b03a 	or	r2,r3,r2
 20191cc:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20191d0:	e0bff617 	ldw	r2,-40(fp)
 20191d4:	10800d03 	ldbu	r2,52(r2)
 20191d8:	10c03fcc 	andi	r3,r2,255
 20191dc:	e0bff617 	ldw	r2,-40(fp)
 20191e0:	10800d03 	ldbu	r2,52(r2)
 20191e4:	11003fcc 	andi	r4,r2,255
 20191e8:	d0a7b344 	addi	r2,gp,-24883
 20191ec:	2085883a 	add	r2,r4,r2
 20191f0:	11000003 	ldbu	r4,0(r2)
 20191f4:	e0bff617 	ldw	r2,-40(fp)
 20191f8:	10800d43 	ldbu	r2,53(r2)
 20191fc:	2084b03a 	or	r2,r4,r2
 2019200:	1009883a 	mov	r4,r2
 2019204:	d0a7b344 	addi	r2,gp,-24883
 2019208:	1885883a 	add	r2,r3,r2
 201920c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2019210:	d0a7af43 	ldbu	r2,-24899(gp)
 2019214:	10800044 	addi	r2,r2,1
 2019218:	d0a7af45 	stb	r2,-24899(gp)
 201921c:	e0bff417 	ldw	r2,-48(fp)
 2019220:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019224:	e0bff717 	ldw	r2,-36(fp)
 2019228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201922c:	0005883a 	mov	r2,zero
 2019230:	00000506 	br	2019248 <OS_TCBInit+0x2c0>
 2019234:	e0bff417 	ldw	r2,-48(fp)
 2019238:	e0bff915 	stw	r2,-28(fp)
 201923c:	e0bff917 	ldw	r2,-28(fp)
 2019240:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2019244:	00801084 	movi	r2,66
}
 2019248:	e037883a 	mov	sp,fp
 201924c:	dfc00117 	ldw	ra,4(sp)
 2019250:	df000017 	ldw	fp,0(sp)
 2019254:	dec00204 	addi	sp,sp,8
 2019258:	f800283a 	ret

0201925c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 201925c:	defffe04 	addi	sp,sp,-8
 2019260:	df000115 	stw	fp,4(sp)
 2019264:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2019268:	d0a03f04 	addi	r2,gp,-32516
 201926c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2019270:	d0a04004 	addi	r2,gp,-32512
 2019274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2019278:	d0a04184 	addi	r2,gp,-32506
 201927c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2019280:	d0a04204 	addi	r2,gp,-32504
 2019284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2019288:	d0a04104 	addi	r2,gp,-32508
 201928c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2019290:	d0a04284 	addi	r2,gp,-32502
 2019294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2019298:	d0a04304 	addi	r2,gp,-32500
 201929c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 20192a0:	d0a04384 	addi	r2,gp,-32498
 20192a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 20192a8:	d0a04404 	addi	r2,gp,-32496
 20192ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 20192b0:	d0a04484 	addi	r2,gp,-32494
 20192b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 20192b8:	d0a04504 	addi	r2,gp,-32492
 20192bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20192c0:	d0a04584 	addi	r2,gp,-32490
 20192c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20192c8:	d0a04604 	addi	r2,gp,-32488
 20192cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20192d0:	d0a04684 	addi	r2,gp,-32486
 20192d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20192d8:	d0a04704 	addi	r2,gp,-32484
 20192dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20192e0:	d0a04784 	addi	r2,gp,-32482
 20192e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20192e8:	d0a04804 	addi	r2,gp,-32480
 20192ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20192f0:	d0a04884 	addi	r2,gp,-32478
 20192f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 20192f8:	d0a04904 	addi	r2,gp,-32476
 20192fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2019300:	d0a04984 	addi	r2,gp,-32474
 2019304:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2019308:	d0a04a04 	addi	r2,gp,-32472
 201930c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2019310:	d0a04a84 	addi	r2,gp,-32470
 2019314:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2019318:	d0a04b04 	addi	r2,gp,-32468
 201931c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2019320:	d0a04b84 	addi	r2,gp,-32466
 2019324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2019328:	d0a04c04 	addi	r2,gp,-32464
 201932c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2019330:	d0a04c84 	addi	r2,gp,-32462
 2019334:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2019338:	d0a04d04 	addi	r2,gp,-32460
 201933c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2019340:	d0a04d84 	addi	r2,gp,-32458
 2019344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2019348:	d0a04e04 	addi	r2,gp,-32456
 201934c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2019350:	d0a04e84 	addi	r2,gp,-32454
 2019354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2019358:	d0a04f04 	addi	r2,gp,-32452
 201935c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2019360:	d0a04f84 	addi	r2,gp,-32450
 2019364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2019368:	d0a05004 	addi	r2,gp,-32448
 201936c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2019370:	d0a05084 	addi	r2,gp,-32446
 2019374:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2019378:	d0a05104 	addi	r2,gp,-32444
 201937c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2019380:	d0a05184 	addi	r2,gp,-32442
 2019384:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2019388:	d0a05204 	addi	r2,gp,-32440
 201938c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2019390:	d0a05284 	addi	r2,gp,-32438
 2019394:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2019398:	d0a05304 	addi	r2,gp,-32436
 201939c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 20193a0:	d0a05384 	addi	r2,gp,-32434
 20193a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20193a8:	d0a05404 	addi	r2,gp,-32432
 20193ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20193b0:	d0a05484 	addi	r2,gp,-32430
 20193b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20193b8:	d0a05504 	addi	r2,gp,-32428
 20193bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20193c0:	d0a05584 	addi	r2,gp,-32426
 20193c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20193c8:	d0a05604 	addi	r2,gp,-32424
 20193cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20193d0:	d0a05b04 	addi	r2,gp,-32404
 20193d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20193d8:	0001883a 	nop
 20193dc:	e037883a 	mov	sp,fp
 20193e0:	df000017 	ldw	fp,0(sp)
 20193e4:	dec00104 	addi	sp,sp,4
 20193e8:	f800283a 	ret

020193ec <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20193ec:	defff204 	addi	sp,sp,-56
 20193f0:	df000d15 	stw	fp,52(sp)
 20193f4:	df000d04 	addi	fp,sp,52
 20193f8:	e13ffc15 	stw	r4,-16(fp)
 20193fc:	2807883a 	mov	r3,r5
 2019400:	3005883a 	mov	r2,r6
 2019404:	e1ffff15 	stw	r7,-4(fp)
 2019408:	e0fffd0d 	sth	r3,-12(fp)
 201940c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019410:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019414:	e0bfff17 	ldw	r2,-4(fp)
 2019418:	1000021e 	bne	r2,zero,2019424 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 201941c:	0005883a 	mov	r2,zero
 2019420:	0000b006 	br	20196e4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019424:	e0bffc17 	ldw	r2,-16(fp)
 2019428:	1000051e 	bne	r2,zero,2019440 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201942c:	e0bfff17 	ldw	r2,-4(fp)
 2019430:	00c01b84 	movi	r3,110
 2019434:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019438:	0005883a 	mov	r2,zero
 201943c:	0000a906 	br	20196e4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019440:	e0bffc17 	ldw	r2,-16(fp)
 2019444:	10800003 	ldbu	r2,0(r2)
 2019448:	10803fcc 	andi	r2,r2,255
 201944c:	10800160 	cmpeqi	r2,r2,5
 2019450:	1000051e 	bne	r2,zero,2019468 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2019454:	e0bfff17 	ldw	r2,-4(fp)
 2019458:	00c00044 	movi	r3,1
 201945c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019460:	0005883a 	mov	r2,zero
 2019464:	00009f06 	br	20196e4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2019468:	e0fffe03 	ldbu	r3,-8(fp)
 201946c:	00bfe004 	movi	r2,-128
 2019470:	1884703a 	and	r2,r3,r2
 2019474:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2019478:	e0bff503 	ldbu	r2,-44(fp)
 201947c:	10000626 	beq	r2,zero,2019498 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2019480:	e0bffe03 	ldbu	r2,-8(fp)
 2019484:	10801fcc 	andi	r2,r2,127
 2019488:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 201948c:	00800044 	movi	r2,1
 2019490:	e0bff385 	stb	r2,-50(fp)
 2019494:	00000106 	br	201949c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2019498:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 201949c:	e0bfff17 	ldw	r2,-4(fp)
 20194a0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20194a4:	0005303a 	rdctl	r2,status
 20194a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20194ac:	e0fffb17 	ldw	r3,-20(fp)
 20194b0:	00bfff84 	movi	r2,-2
 20194b4:	1884703a 	and	r2,r3,r2
 20194b8:	1001703a 	wrctl	status,r2
  
  return context;
 20194bc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 20194c0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20194c4:	e0bffe03 	ldbu	r2,-8(fp)
 20194c8:	10c00060 	cmpeqi	r3,r2,1
 20194cc:	18005f1e 	bne	r3,zero,201964c <OSFlagAccept+0x260>
 20194d0:	10c00088 	cmpgei	r3,r2,2
 20194d4:	1800021e 	bne	r3,zero,20194e0 <OSFlagAccept+0xf4>
 20194d8:	10003f26 	beq	r2,zero,20195d8 <OSFlagAccept+0x1ec>
 20194dc:	00007706 	br	20196bc <OSFlagAccept+0x2d0>
 20194e0:	10c000a0 	cmpeqi	r3,r2,2
 20194e4:	1800031e 	bne	r3,zero,20194f4 <OSFlagAccept+0x108>
 20194e8:	108000e0 	cmpeqi	r2,r2,3
 20194ec:	10001e1e 	bne	r2,zero,2019568 <OSFlagAccept+0x17c>
 20194f0:	00007206 	br	20196bc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20194f4:	e0bffc17 	ldw	r2,-16(fp)
 20194f8:	10c0020b 	ldhu	r3,8(r2)
 20194fc:	e0bffd0b 	ldhu	r2,-12(fp)
 2019500:	1884703a 	and	r2,r3,r2
 2019504:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019508:	e0fff30b 	ldhu	r3,-52(fp)
 201950c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019510:	18800d1e 	bne	r3,r2,2019548 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019514:	e0bff383 	ldbu	r2,-50(fp)
 2019518:	10800058 	cmpnei	r2,r2,1
 201951c:	10000d1e 	bne	r2,zero,2019554 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2019520:	e0bffc17 	ldw	r2,-16(fp)
 2019524:	1080020b 	ldhu	r2,8(r2)
 2019528:	1007883a 	mov	r3,r2
 201952c:	e0bff30b 	ldhu	r2,-52(fp)
 2019530:	0084303a 	nor	r2,zero,r2
 2019534:	1884703a 	and	r2,r3,r2
 2019538:	1007883a 	mov	r3,r2
 201953c:	e0bffc17 	ldw	r2,-16(fp)
 2019540:	10c0020d 	sth	r3,8(r2)
 2019544:	00000306 	br	2019554 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2019548:	e0bfff17 	ldw	r2,-4(fp)
 201954c:	00c01c04 	movi	r3,112
 2019550:	10c00005 	stb	r3,0(r2)
 2019554:	e0bff417 	ldw	r2,-48(fp)
 2019558:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201955c:	e0bff617 	ldw	r2,-40(fp)
 2019560:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2019564:	00005e06 	br	20196e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2019568:	e0bffc17 	ldw	r2,-16(fp)
 201956c:	10c0020b 	ldhu	r3,8(r2)
 2019570:	e0bffd0b 	ldhu	r2,-12(fp)
 2019574:	1884703a 	and	r2,r3,r2
 2019578:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 201957c:	e0bff30b 	ldhu	r2,-52(fp)
 2019580:	10000d26 	beq	r2,zero,20195b8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019584:	e0bff383 	ldbu	r2,-50(fp)
 2019588:	10800058 	cmpnei	r2,r2,1
 201958c:	10000d1e 	bne	r2,zero,20195c4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2019590:	e0bffc17 	ldw	r2,-16(fp)
 2019594:	1080020b 	ldhu	r2,8(r2)
 2019598:	1007883a 	mov	r3,r2
 201959c:	e0bff30b 	ldhu	r2,-52(fp)
 20195a0:	0084303a 	nor	r2,zero,r2
 20195a4:	1884703a 	and	r2,r3,r2
 20195a8:	1007883a 	mov	r3,r2
 20195ac:	e0bffc17 	ldw	r2,-16(fp)
 20195b0:	10c0020d 	sth	r3,8(r2)
 20195b4:	00000306 	br	20195c4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20195b8:	e0bfff17 	ldw	r2,-4(fp)
 20195bc:	00c01c04 	movi	r3,112
 20195c0:	10c00005 	stb	r3,0(r2)
 20195c4:	e0bff417 	ldw	r2,-48(fp)
 20195c8:	e0bff715 	stw	r2,-36(fp)
 20195cc:	e0bff717 	ldw	r2,-36(fp)
 20195d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20195d4:	00004206 	br	20196e0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20195d8:	e0bffc17 	ldw	r2,-16(fp)
 20195dc:	1080020b 	ldhu	r2,8(r2)
 20195e0:	0084303a 	nor	r2,zero,r2
 20195e4:	1007883a 	mov	r3,r2
 20195e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20195ec:	1884703a 	and	r2,r3,r2
 20195f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20195f4:	e0fff30b 	ldhu	r3,-52(fp)
 20195f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20195fc:	18800b1e 	bne	r3,r2,201962c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019600:	e0bff383 	ldbu	r2,-50(fp)
 2019604:	10800058 	cmpnei	r2,r2,1
 2019608:	10000b1e 	bne	r2,zero,2019638 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201960c:	e0bffc17 	ldw	r2,-16(fp)
 2019610:	10c0020b 	ldhu	r3,8(r2)
 2019614:	e0bff30b 	ldhu	r2,-52(fp)
 2019618:	1884b03a 	or	r2,r3,r2
 201961c:	1007883a 	mov	r3,r2
 2019620:	e0bffc17 	ldw	r2,-16(fp)
 2019624:	10c0020d 	sth	r3,8(r2)
 2019628:	00000306 	br	2019638 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201962c:	e0bfff17 	ldw	r2,-4(fp)
 2019630:	00c01c04 	movi	r3,112
 2019634:	10c00005 	stb	r3,0(r2)
 2019638:	e0bff417 	ldw	r2,-48(fp)
 201963c:	e0bff815 	stw	r2,-32(fp)
 2019640:	e0bff817 	ldw	r2,-32(fp)
 2019644:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2019648:	00002506 	br	20196e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 201964c:	e0bffc17 	ldw	r2,-16(fp)
 2019650:	1080020b 	ldhu	r2,8(r2)
 2019654:	0084303a 	nor	r2,zero,r2
 2019658:	1007883a 	mov	r3,r2
 201965c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019660:	1884703a 	and	r2,r3,r2
 2019664:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2019668:	e0bff30b 	ldhu	r2,-52(fp)
 201966c:	10000b26 	beq	r2,zero,201969c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019670:	e0bff383 	ldbu	r2,-50(fp)
 2019674:	10800058 	cmpnei	r2,r2,1
 2019678:	10000b1e 	bne	r2,zero,20196a8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201967c:	e0bffc17 	ldw	r2,-16(fp)
 2019680:	10c0020b 	ldhu	r3,8(r2)
 2019684:	e0bff30b 	ldhu	r2,-52(fp)
 2019688:	1884b03a 	or	r2,r3,r2
 201968c:	1007883a 	mov	r3,r2
 2019690:	e0bffc17 	ldw	r2,-16(fp)
 2019694:	10c0020d 	sth	r3,8(r2)
 2019698:	00000306 	br	20196a8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201969c:	e0bfff17 	ldw	r2,-4(fp)
 20196a0:	00c01c04 	movi	r3,112
 20196a4:	10c00005 	stb	r3,0(r2)
 20196a8:	e0bff417 	ldw	r2,-48(fp)
 20196ac:	e0bff915 	stw	r2,-28(fp)
 20196b0:	e0bff917 	ldw	r2,-28(fp)
 20196b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20196b8:	00000906 	br	20196e0 <OSFlagAccept+0x2f4>
 20196bc:	e0bff417 	ldw	r2,-48(fp)
 20196c0:	e0bffa15 	stw	r2,-24(fp)
 20196c4:	e0bffa17 	ldw	r2,-24(fp)
 20196c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20196cc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20196d0:	e0bfff17 	ldw	r2,-4(fp)
 20196d4:	00c01bc4 	movi	r3,111
 20196d8:	10c00005 	stb	r3,0(r2)
             break;
 20196dc:	0001883a 	nop
    }
    return (flags_rdy);
 20196e0:	e0bff30b 	ldhu	r2,-52(fp)
}
 20196e4:	e037883a 	mov	sp,fp
 20196e8:	df000017 	ldw	fp,0(sp)
 20196ec:	dec00104 	addi	sp,sp,4
 20196f0:	f800283a 	ret

020196f4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20196f4:	defff804 	addi	sp,sp,-32
 20196f8:	df000715 	stw	fp,28(sp)
 20196fc:	df000704 	addi	fp,sp,28
 2019700:	2005883a 	mov	r2,r4
 2019704:	e17fff15 	stw	r5,-4(fp)
 2019708:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 201970c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2019710:	e0bfff17 	ldw	r2,-4(fp)
 2019714:	1000021e 	bne	r2,zero,2019720 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2019718:	0005883a 	mov	r2,zero
 201971c:	00003306 	br	20197ec <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2019720:	d0a7b503 	ldbu	r2,-24876(gp)
 2019724:	10803fcc 	andi	r2,r2,255
 2019728:	10000526 	beq	r2,zero,2019740 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 201972c:	e0bfff17 	ldw	r2,-4(fp)
 2019730:	00c00404 	movi	r3,16
 2019734:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2019738:	0005883a 	mov	r2,zero
 201973c:	00002b06 	br	20197ec <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019740:	0005303a 	rdctl	r2,status
 2019744:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019748:	e0fffd17 	ldw	r3,-12(fp)
 201974c:	00bfff84 	movi	r2,-2
 2019750:	1884703a 	and	r2,r3,r2
 2019754:	1001703a 	wrctl	status,r2
  
  return context;
 2019758:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201975c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2019760:	d0a7b817 	ldw	r2,-24864(gp)
 2019764:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2019768:	e0bffb17 	ldw	r2,-20(fp)
 201976c:	10001726 	beq	r2,zero,20197cc <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2019770:	d0a7b817 	ldw	r2,-24864(gp)
 2019774:	10800117 	ldw	r2,4(r2)
 2019778:	d0a7b815 	stw	r2,-24864(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 201977c:	e0bffb17 	ldw	r2,-20(fp)
 2019780:	00c00144 	movi	r3,5
 2019784:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2019788:	e0bffb17 	ldw	r2,-20(fp)
 201978c:	e0fffe0b 	ldhu	r3,-8(fp)
 2019790:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2019794:	e0bffb17 	ldw	r2,-20(fp)
 2019798:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 201979c:	e0bffb17 	ldw	r2,-20(fp)
 20197a0:	00c00fc4 	movi	r3,63
 20197a4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20197a8:	e0bffb17 	ldw	r2,-20(fp)
 20197ac:	100002c5 	stb	zero,11(r2)
 20197b0:	e0bff917 	ldw	r2,-28(fp)
 20197b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20197b8:	e0bffa17 	ldw	r2,-24(fp)
 20197bc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20197c0:	e0bfff17 	ldw	r2,-4(fp)
 20197c4:	10000005 	stb	zero,0(r2)
 20197c8:	00000706 	br	20197e8 <OSFlagCreate+0xf4>
 20197cc:	e0bff917 	ldw	r2,-28(fp)
 20197d0:	e0bffc15 	stw	r2,-16(fp)
 20197d4:	e0bffc17 	ldw	r2,-16(fp)
 20197d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20197dc:	e0bfff17 	ldw	r2,-4(fp)
 20197e0:	00c01c84 	movi	r3,114
 20197e4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20197e8:	e0bffb17 	ldw	r2,-20(fp)
}
 20197ec:	e037883a 	mov	sp,fp
 20197f0:	df000017 	ldw	fp,0(sp)
 20197f4:	dec00104 	addi	sp,sp,4
 20197f8:	f800283a 	ret

020197fc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 20197fc:	defff204 	addi	sp,sp,-56
 2019800:	dfc00d15 	stw	ra,52(sp)
 2019804:	df000c15 	stw	fp,48(sp)
 2019808:	df000c04 	addi	fp,sp,48
 201980c:	e13ffd15 	stw	r4,-12(fp)
 2019810:	2805883a 	mov	r2,r5
 2019814:	e1bfff15 	stw	r6,-4(fp)
 2019818:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201981c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019820:	e0bfff17 	ldw	r2,-4(fp)
 2019824:	1000021e 	bne	r2,zero,2019830 <OSFlagDel+0x34>
        return (pgrp);
 2019828:	e0bffd17 	ldw	r2,-12(fp)
 201982c:	00008006 	br	2019a30 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019830:	e0bffd17 	ldw	r2,-12(fp)
 2019834:	1000051e 	bne	r2,zero,201984c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019838:	e0bfff17 	ldw	r2,-4(fp)
 201983c:	00c01b84 	movi	r3,110
 2019840:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2019844:	e0bffd17 	ldw	r2,-12(fp)
 2019848:	00007906 	br	2019a30 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201984c:	d0a7b503 	ldbu	r2,-24876(gp)
 2019850:	10803fcc 	andi	r2,r2,255
 2019854:	10000526 	beq	r2,zero,201986c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2019858:	e0bfff17 	ldw	r2,-4(fp)
 201985c:	00c003c4 	movi	r3,15
 2019860:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2019864:	e0bffd17 	ldw	r2,-12(fp)
 2019868:	00007106 	br	2019a30 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 201986c:	e0bffd17 	ldw	r2,-12(fp)
 2019870:	10800003 	ldbu	r2,0(r2)
 2019874:	10803fcc 	andi	r2,r2,255
 2019878:	10800160 	cmpeqi	r2,r2,5
 201987c:	1000051e 	bne	r2,zero,2019894 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2019880:	e0bfff17 	ldw	r2,-4(fp)
 2019884:	00c00044 	movi	r3,1
 2019888:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 201988c:	e0bffd17 	ldw	r2,-12(fp)
 2019890:	00006706 	br	2019a30 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019894:	0005303a 	rdctl	r2,status
 2019898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201989c:	e0fffc17 	ldw	r3,-16(fp)
 20198a0:	00bfff84 	movi	r2,-2
 20198a4:	1884703a 	and	r2,r3,r2
 20198a8:	1001703a 	wrctl	status,r2
  
  return context;
 20198ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20198b0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20198b4:	e0bffd17 	ldw	r2,-12(fp)
 20198b8:	10800117 	ldw	r2,4(r2)
 20198bc:	10000326 	beq	r2,zero,20198cc <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20198c0:	00800044 	movi	r2,1
 20198c4:	e0bff405 	stb	r2,-48(fp)
 20198c8:	00000106 	br	20198d0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20198cc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20198d0:	e0bffe03 	ldbu	r2,-8(fp)
 20198d4:	10000326 	beq	r2,zero,20198e4 <OSFlagDel+0xe8>
 20198d8:	10800060 	cmpeqi	r2,r2,1
 20198dc:	1000231e 	bne	r2,zero,201996c <OSFlagDel+0x170>
 20198e0:	00004806 	br	2019a04 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20198e4:	e0bff403 	ldbu	r2,-48(fp)
 20198e8:	1000161e 	bne	r2,zero,2019944 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20198ec:	e0bffd17 	ldw	r2,-12(fp)
 20198f0:	00c00fc4 	movi	r3,63
 20198f4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20198f8:	e0bffd17 	ldw	r2,-12(fp)
 20198fc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2019900:	e0bffd17 	ldw	r2,-12(fp)
 2019904:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2019908:	d0e7b817 	ldw	r3,-24864(gp)
 201990c:	e0bffd17 	ldw	r2,-12(fp)
 2019910:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2019914:	e0bffd17 	ldw	r2,-12(fp)
 2019918:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 201991c:	e0bffd17 	ldw	r2,-12(fp)
 2019920:	d0a7b815 	stw	r2,-24864(gp)
 2019924:	e0bff717 	ldw	r2,-36(fp)
 2019928:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201992c:	e0bff817 	ldw	r2,-32(fp)
 2019930:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2019934:	e0bfff17 	ldw	r2,-4(fp)
 2019938:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 201993c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2019940:	00003a06 	br	2019a2c <OSFlagDel+0x230>
 2019944:	e0bff717 	ldw	r2,-36(fp)
 2019948:	e0bff915 	stw	r2,-28(fp)
 201994c:	e0bff917 	ldw	r2,-28(fp)
 2019950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2019954:	e0bfff17 	ldw	r2,-4(fp)
 2019958:	00c01244 	movi	r3,73
 201995c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2019960:	e0bffd17 	ldw	r2,-12(fp)
 2019964:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019968:	00003006 	br	2019a2c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201996c:	e0bffd17 	ldw	r2,-12(fp)
 2019970:	10800117 	ldw	r2,4(r2)
 2019974:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019978:	00000606 	br	2019994 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 201997c:	000b883a 	mov	r5,zero
 2019980:	e13ff517 	ldw	r4,-44(fp)
 2019984:	201a9680 	call	201a968 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2019988:	e0bff517 	ldw	r2,-44(fp)
 201998c:	10800017 	ldw	r2,0(r2)
 2019990:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019994:	e0bff517 	ldw	r2,-44(fp)
 2019998:	103ff81e 	bne	r2,zero,201997c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 201999c:	e0bffd17 	ldw	r2,-12(fp)
 20199a0:	00c00fc4 	movi	r3,63
 20199a4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20199a8:	e0bffd17 	ldw	r2,-12(fp)
 20199ac:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20199b0:	e0bffd17 	ldw	r2,-12(fp)
 20199b4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 20199b8:	d0e7b817 	ldw	r3,-24864(gp)
 20199bc:	e0bffd17 	ldw	r2,-12(fp)
 20199c0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20199c4:	e0bffd17 	ldw	r2,-12(fp)
 20199c8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20199cc:	e0bffd17 	ldw	r2,-12(fp)
 20199d0:	d0a7b815 	stw	r2,-24864(gp)
 20199d4:	e0bff717 	ldw	r2,-36(fp)
 20199d8:	e0bffa15 	stw	r2,-24(fp)
 20199dc:	e0bffa17 	ldw	r2,-24(fp)
 20199e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20199e4:	e0bff403 	ldbu	r2,-48(fp)
 20199e8:	10800058 	cmpnei	r2,r2,1
 20199ec:	1000011e 	bne	r2,zero,20199f4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20199f0:	2018b880 	call	2018b88 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20199f4:	e0bfff17 	ldw	r2,-4(fp)
 20199f8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20199fc:	e03ff615 	stw	zero,-40(fp)
             break;
 2019a00:	00000a06 	br	2019a2c <OSFlagDel+0x230>
 2019a04:	e0bff717 	ldw	r2,-36(fp)
 2019a08:	e0bffb15 	stw	r2,-20(fp)
 2019a0c:	e0bffb17 	ldw	r2,-20(fp)
 2019a10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2019a14:	e0bfff17 	ldw	r2,-4(fp)
 2019a18:	00c001c4 	movi	r3,7
 2019a1c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2019a20:	e0bffd17 	ldw	r2,-12(fp)
 2019a24:	e0bff615 	stw	r2,-40(fp)
             break;
 2019a28:	0001883a 	nop
    }
    return (pgrp_return);
 2019a2c:	e0bff617 	ldw	r2,-40(fp)
}
 2019a30:	e037883a 	mov	sp,fp
 2019a34:	dfc00117 	ldw	ra,4(sp)
 2019a38:	df000017 	ldw	fp,0(sp)
 2019a3c:	dec00204 	addi	sp,sp,8
 2019a40:	f800283a 	ret

02019a44 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2019a44:	defff604 	addi	sp,sp,-40
 2019a48:	dfc00915 	stw	ra,36(sp)
 2019a4c:	df000815 	stw	fp,32(sp)
 2019a50:	df000804 	addi	fp,sp,32
 2019a54:	e13ffd15 	stw	r4,-12(fp)
 2019a58:	e17ffe15 	stw	r5,-8(fp)
 2019a5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019a60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019a64:	e0bfff17 	ldw	r2,-4(fp)
 2019a68:	1000021e 	bne	r2,zero,2019a74 <OSFlagNameGet+0x30>
        return (0);
 2019a6c:	0005883a 	mov	r2,zero
 2019a70:	00003906 	br	2019b58 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019a74:	e0bffd17 	ldw	r2,-12(fp)
 2019a78:	1000051e 	bne	r2,zero,2019a90 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019a7c:	e0bfff17 	ldw	r2,-4(fp)
 2019a80:	00c01b84 	movi	r3,110
 2019a84:	10c00005 	stb	r3,0(r2)
        return (0);
 2019a88:	0005883a 	mov	r2,zero
 2019a8c:	00003206 	br	2019b58 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2019a90:	e0bffe17 	ldw	r2,-8(fp)
 2019a94:	1000051e 	bne	r2,zero,2019aac <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2019a98:	e0bfff17 	ldw	r2,-4(fp)
 2019a9c:	00c00304 	movi	r3,12
 2019aa0:	10c00005 	stb	r3,0(r2)
        return (0);
 2019aa4:	0005883a 	mov	r2,zero
 2019aa8:	00002b06 	br	2019b58 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019aac:	d0a7b503 	ldbu	r2,-24876(gp)
 2019ab0:	10803fcc 	andi	r2,r2,255
 2019ab4:	10000526 	beq	r2,zero,2019acc <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2019ab8:	e0bfff17 	ldw	r2,-4(fp)
 2019abc:	00c00444 	movi	r3,17
 2019ac0:	10c00005 	stb	r3,0(r2)
        return (0);
 2019ac4:	0005883a 	mov	r2,zero
 2019ac8:	00002306 	br	2019b58 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019acc:	0005303a 	rdctl	r2,status
 2019ad0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ad4:	e0fffc17 	ldw	r3,-16(fp)
 2019ad8:	00bfff84 	movi	r2,-2
 2019adc:	1884703a 	and	r2,r3,r2
 2019ae0:	1001703a 	wrctl	status,r2
  
  return context;
 2019ae4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019ae8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2019aec:	e0bffd17 	ldw	r2,-12(fp)
 2019af0:	10800003 	ldbu	r2,0(r2)
 2019af4:	10803fcc 	andi	r2,r2,255
 2019af8:	10800160 	cmpeqi	r2,r2,5
 2019afc:	1000091e 	bne	r2,zero,2019b24 <OSFlagNameGet+0xe0>
 2019b00:	e0bff817 	ldw	r2,-32(fp)
 2019b04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019b08:	e0bff917 	ldw	r2,-28(fp)
 2019b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2019b10:	e0bfff17 	ldw	r2,-4(fp)
 2019b14:	00c00044 	movi	r3,1
 2019b18:	10c00005 	stb	r3,0(r2)
        return (0);
 2019b1c:	0005883a 	mov	r2,zero
 2019b20:	00000d06 	br	2019b58 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2019b24:	e0bffd17 	ldw	r2,-12(fp)
 2019b28:	10800284 	addi	r2,r2,10
 2019b2c:	100b883a 	mov	r5,r2
 2019b30:	e13ffe17 	ldw	r4,-8(fp)
 2019b34:	2018ccc0 	call	2018ccc <OS_StrCopy>
 2019b38:	e0bffb05 	stb	r2,-20(fp)
 2019b3c:	e0bff817 	ldw	r2,-32(fp)
 2019b40:	e0bffa15 	stw	r2,-24(fp)
 2019b44:	e0bffa17 	ldw	r2,-24(fp)
 2019b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019b4c:	e0bfff17 	ldw	r2,-4(fp)
 2019b50:	10000005 	stb	zero,0(r2)
    return (len);
 2019b54:	e0bffb03 	ldbu	r2,-20(fp)
}
 2019b58:	e037883a 	mov	sp,fp
 2019b5c:	dfc00117 	ldw	ra,4(sp)
 2019b60:	df000017 	ldw	fp,0(sp)
 2019b64:	dec00204 	addi	sp,sp,8
 2019b68:	f800283a 	ret

02019b6c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2019b6c:	defff504 	addi	sp,sp,-44
 2019b70:	dfc00a15 	stw	ra,40(sp)
 2019b74:	df000915 	stw	fp,36(sp)
 2019b78:	df000904 	addi	fp,sp,36
 2019b7c:	e13ffd15 	stw	r4,-12(fp)
 2019b80:	e17ffe15 	stw	r5,-8(fp)
 2019b84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019b88:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019b8c:	e0bfff17 	ldw	r2,-4(fp)
 2019b90:	10004326 	beq	r2,zero,2019ca0 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019b94:	e0bffd17 	ldw	r2,-12(fp)
 2019b98:	1000041e 	bne	r2,zero,2019bac <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019b9c:	e0bfff17 	ldw	r2,-4(fp)
 2019ba0:	00c01b84 	movi	r3,110
 2019ba4:	10c00005 	stb	r3,0(r2)
        return;
 2019ba8:	00003e06 	br	2019ca4 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2019bac:	e0bffe17 	ldw	r2,-8(fp)
 2019bb0:	1000041e 	bne	r2,zero,2019bc4 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2019bb4:	e0bfff17 	ldw	r2,-4(fp)
 2019bb8:	00c00304 	movi	r3,12
 2019bbc:	10c00005 	stb	r3,0(r2)
        return;
 2019bc0:	00003806 	br	2019ca4 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019bc4:	d0a7b503 	ldbu	r2,-24876(gp)
 2019bc8:	10803fcc 	andi	r2,r2,255
 2019bcc:	10000426 	beq	r2,zero,2019be0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2019bd0:	e0bfff17 	ldw	r2,-4(fp)
 2019bd4:	00c00484 	movi	r3,18
 2019bd8:	10c00005 	stb	r3,0(r2)
        return;
 2019bdc:	00003106 	br	2019ca4 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019be0:	0005303a 	rdctl	r2,status
 2019be4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019be8:	e0fffc17 	ldw	r3,-16(fp)
 2019bec:	00bfff84 	movi	r2,-2
 2019bf0:	1884703a 	and	r2,r3,r2
 2019bf4:	1001703a 	wrctl	status,r2
  
  return context;
 2019bf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019bfc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2019c00:	e0bffd17 	ldw	r2,-12(fp)
 2019c04:	10800003 	ldbu	r2,0(r2)
 2019c08:	10803fcc 	andi	r2,r2,255
 2019c0c:	10800160 	cmpeqi	r2,r2,5
 2019c10:	1000081e 	bne	r2,zero,2019c34 <OSFlagNameSet+0xc8>
 2019c14:	e0bff717 	ldw	r2,-36(fp)
 2019c18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019c1c:	e0bff817 	ldw	r2,-32(fp)
 2019c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2019c24:	e0bfff17 	ldw	r2,-4(fp)
 2019c28:	00c00044 	movi	r3,1
 2019c2c:	10c00005 	stb	r3,0(r2)
        return;
 2019c30:	00001c06 	br	2019ca4 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2019c34:	e13ffe17 	ldw	r4,-8(fp)
 2019c38:	2018d400 	call	2018d40 <OS_StrLen>
 2019c3c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2019c40:	e0bffa03 	ldbu	r2,-24(fp)
 2019c44:	10800830 	cmpltui	r2,r2,32
 2019c48:	1000081e 	bne	r2,zero,2019c6c <OSFlagNameSet+0x100>
 2019c4c:	e0bff717 	ldw	r2,-36(fp)
 2019c50:	e0bff915 	stw	r2,-28(fp)
 2019c54:	e0bff917 	ldw	r2,-28(fp)
 2019c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2019c5c:	e0bfff17 	ldw	r2,-4(fp)
 2019c60:	00c01cc4 	movi	r3,115
 2019c64:	10c00005 	stb	r3,0(r2)
        return;
 2019c68:	00000e06 	br	2019ca4 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2019c6c:	e0bffd17 	ldw	r2,-12(fp)
 2019c70:	10800284 	addi	r2,r2,10
 2019c74:	e17ffe17 	ldw	r5,-8(fp)
 2019c78:	1009883a 	mov	r4,r2
 2019c7c:	2018ccc0 	call	2018ccc <OS_StrCopy>
 2019c80:	e0bff717 	ldw	r2,-36(fp)
 2019c84:	e0bffb15 	stw	r2,-20(fp)
 2019c88:	e0bffb17 	ldw	r2,-20(fp)
 2019c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019c90:	e0bfff17 	ldw	r2,-4(fp)
 2019c94:	10000005 	stb	zero,0(r2)
    return;
 2019c98:	0001883a 	nop
 2019c9c:	00000106 	br	2019ca4 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2019ca0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2019ca4:	e037883a 	mov	sp,fp
 2019ca8:	dfc00117 	ldw	ra,4(sp)
 2019cac:	df000017 	ldw	fp,0(sp)
 2019cb0:	dec00204 	addi	sp,sp,8
 2019cb4:	f800283a 	ret

02019cb8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2019cb8:	deffe104 	addi	sp,sp,-124
 2019cbc:	dfc01e15 	stw	ra,120(sp)
 2019cc0:	df001d15 	stw	fp,116(sp)
 2019cc4:	df001d04 	addi	fp,sp,116
 2019cc8:	e13ffc15 	stw	r4,-16(fp)
 2019ccc:	2809883a 	mov	r4,r5
 2019cd0:	3007883a 	mov	r3,r6
 2019cd4:	3805883a 	mov	r2,r7
 2019cd8:	e13ffd0d 	sth	r4,-12(fp)
 2019cdc:	e0fffe05 	stb	r3,-8(fp)
 2019ce0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019ce4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019ce8:	e0800217 	ldw	r2,8(fp)
 2019cec:	1000021e 	bne	r2,zero,2019cf8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2019cf0:	0005883a 	mov	r2,zero
 2019cf4:	00015906 	br	201a25c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019cf8:	e0bffc17 	ldw	r2,-16(fp)
 2019cfc:	1000051e 	bne	r2,zero,2019d14 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019d00:	e0800217 	ldw	r2,8(fp)
 2019d04:	00c01b84 	movi	r3,110
 2019d08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019d0c:	0005883a 	mov	r2,zero
 2019d10:	00015206 	br	201a25c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019d14:	d0a7b503 	ldbu	r2,-24876(gp)
 2019d18:	10803fcc 	andi	r2,r2,255
 2019d1c:	10000526 	beq	r2,zero,2019d34 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2019d20:	e0800217 	ldw	r2,8(fp)
 2019d24:	00c00084 	movi	r3,2
 2019d28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019d2c:	0005883a 	mov	r2,zero
 2019d30:	00014a06 	br	201a25c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2019d34:	d0a7a703 	ldbu	r2,-24932(gp)
 2019d38:	10803fcc 	andi	r2,r2,255
 2019d3c:	10000526 	beq	r2,zero,2019d54 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2019d40:	e0800217 	ldw	r2,8(fp)
 2019d44:	00c00344 	movi	r3,13
 2019d48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019d4c:	0005883a 	mov	r2,zero
 2019d50:	00014206 	br	201a25c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019d54:	e0bffc17 	ldw	r2,-16(fp)
 2019d58:	10800003 	ldbu	r2,0(r2)
 2019d5c:	10803fcc 	andi	r2,r2,255
 2019d60:	10800160 	cmpeqi	r2,r2,5
 2019d64:	1000051e 	bne	r2,zero,2019d7c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2019d68:	e0800217 	ldw	r2,8(fp)
 2019d6c:	00c00044 	movi	r3,1
 2019d70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019d74:	0005883a 	mov	r2,zero
 2019d78:	00013806 	br	201a25c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2019d7c:	e0fffe03 	ldbu	r3,-8(fp)
 2019d80:	00bfe004 	movi	r2,-128
 2019d84:	1884703a 	and	r2,r3,r2
 2019d88:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2019d8c:	e0bfe603 	ldbu	r2,-104(fp)
 2019d90:	10000626 	beq	r2,zero,2019dac <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2019d94:	e0bffe03 	ldbu	r2,-8(fp)
 2019d98:	10801fcc 	andi	r2,r2,127
 2019d9c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2019da0:	00800044 	movi	r2,1
 2019da4:	e0bfe405 	stb	r2,-112(fp)
 2019da8:	00000106 	br	2019db0 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2019dac:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019db0:	0005303a 	rdctl	r2,status
 2019db4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019db8:	e0fff617 	ldw	r3,-40(fp)
 2019dbc:	00bfff84 	movi	r2,-2
 2019dc0:	1884703a 	and	r2,r3,r2
 2019dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2019dc8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2019dcc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2019dd0:	e0bffe03 	ldbu	r2,-8(fp)
 2019dd4:	10c00060 	cmpeqi	r3,r2,1
 2019dd8:	1800921e 	bne	r3,zero,201a024 <OSFlagPend+0x36c>
 2019ddc:	10c00088 	cmpgei	r3,r2,2
 2019de0:	1800021e 	bne	r3,zero,2019dec <OSFlagPend+0x134>
 2019de4:	10006126 	beq	r2,zero,2019f6c <OSFlagPend+0x2b4>
 2019de8:	0000bb06 	br	201a0d8 <OSFlagPend+0x420>
 2019dec:	10c000a0 	cmpeqi	r3,r2,2
 2019df0:	1800031e 	bne	r3,zero,2019e00 <OSFlagPend+0x148>
 2019df4:	108000e0 	cmpeqi	r2,r2,3
 2019df8:	10002f1e 	bne	r2,zero,2019eb8 <OSFlagPend+0x200>
 2019dfc:	0000b606 	br	201a0d8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2019e00:	e0bffc17 	ldw	r2,-16(fp)
 2019e04:	10c0020b 	ldhu	r3,8(r2)
 2019e08:	e0bffd0b 	ldhu	r2,-12(fp)
 2019e0c:	1884703a 	and	r2,r3,r2
 2019e10:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019e14:	e0ffe80b 	ldhu	r3,-96(fp)
 2019e18:	e0bffd0b 	ldhu	r2,-12(fp)
 2019e1c:	1880171e 	bne	r3,r2,2019e7c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019e20:	e0bfe403 	ldbu	r2,-112(fp)
 2019e24:	10800058 	cmpnei	r2,r2,1
 2019e28:	1000091e 	bne	r2,zero,2019e50 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2019e2c:	e0bffc17 	ldw	r2,-16(fp)
 2019e30:	1080020b 	ldhu	r2,8(r2)
 2019e34:	1007883a 	mov	r3,r2
 2019e38:	e0bfe80b 	ldhu	r2,-96(fp)
 2019e3c:	0084303a 	nor	r2,zero,r2
 2019e40:	1884703a 	and	r2,r3,r2
 2019e44:	1007883a 	mov	r3,r2
 2019e48:	e0bffc17 	ldw	r2,-16(fp)
 2019e4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2019e50:	d0a7b617 	ldw	r2,-24872(gp)
 2019e54:	e0ffe80b 	ldhu	r3,-96(fp)
 2019e58:	10c00b0d 	sth	r3,44(r2)
 2019e5c:	e0bfe517 	ldw	r2,-108(fp)
 2019e60:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019e64:	e0bfe717 	ldw	r2,-100(fp)
 2019e68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2019e6c:	e0800217 	ldw	r2,8(fp)
 2019e70:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019e74:	e0bfe80b 	ldhu	r2,-96(fp)
 2019e78:	0000f806 	br	201a25c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2019e7c:	e13ffd0b 	ldhu	r4,-12(fp)
 2019e80:	e17ffe03 	ldbu	r5,-8(fp)
 2019e84:	e0bfff0b 	ldhu	r2,-4(fp)
 2019e88:	e0fff704 	addi	r3,fp,-36
 2019e8c:	d8800015 	stw	r2,0(sp)
 2019e90:	280f883a 	mov	r7,r5
 2019e94:	200d883a 	mov	r6,r4
 2019e98:	180b883a 	mov	r5,r3
 2019e9c:	e13ffc17 	ldw	r4,-16(fp)
 2019ea0:	201a7280 	call	201a728 <OS_FlagBlock>
 2019ea4:	e0bfe517 	ldw	r2,-108(fp)
 2019ea8:	e0bfe915 	stw	r2,-92(fp)
 2019eac:	e0bfe917 	ldw	r2,-92(fp)
 2019eb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2019eb4:	00009206 	br	201a100 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2019eb8:	e0bffc17 	ldw	r2,-16(fp)
 2019ebc:	10c0020b 	ldhu	r3,8(r2)
 2019ec0:	e0bffd0b 	ldhu	r2,-12(fp)
 2019ec4:	1884703a 	and	r2,r3,r2
 2019ec8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2019ecc:	e0bfe80b 	ldhu	r2,-96(fp)
 2019ed0:	10001726 	beq	r2,zero,2019f30 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019ed4:	e0bfe403 	ldbu	r2,-112(fp)
 2019ed8:	10800058 	cmpnei	r2,r2,1
 2019edc:	1000091e 	bne	r2,zero,2019f04 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2019ee0:	e0bffc17 	ldw	r2,-16(fp)
 2019ee4:	1080020b 	ldhu	r2,8(r2)
 2019ee8:	1007883a 	mov	r3,r2
 2019eec:	e0bfe80b 	ldhu	r2,-96(fp)
 2019ef0:	0084303a 	nor	r2,zero,r2
 2019ef4:	1884703a 	and	r2,r3,r2
 2019ef8:	1007883a 	mov	r3,r2
 2019efc:	e0bffc17 	ldw	r2,-16(fp)
 2019f00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2019f04:	d0a7b617 	ldw	r2,-24872(gp)
 2019f08:	e0ffe80b 	ldhu	r3,-96(fp)
 2019f0c:	10c00b0d 	sth	r3,44(r2)
 2019f10:	e0bfe517 	ldw	r2,-108(fp)
 2019f14:	e0bfea15 	stw	r2,-88(fp)
 2019f18:	e0bfea17 	ldw	r2,-88(fp)
 2019f1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2019f20:	e0800217 	ldw	r2,8(fp)
 2019f24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019f28:	e0bfe80b 	ldhu	r2,-96(fp)
 2019f2c:	0000cb06 	br	201a25c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2019f30:	e13ffd0b 	ldhu	r4,-12(fp)
 2019f34:	e17ffe03 	ldbu	r5,-8(fp)
 2019f38:	e0bfff0b 	ldhu	r2,-4(fp)
 2019f3c:	e0fff704 	addi	r3,fp,-36
 2019f40:	d8800015 	stw	r2,0(sp)
 2019f44:	280f883a 	mov	r7,r5
 2019f48:	200d883a 	mov	r6,r4
 2019f4c:	180b883a 	mov	r5,r3
 2019f50:	e13ffc17 	ldw	r4,-16(fp)
 2019f54:	201a7280 	call	201a728 <OS_FlagBlock>
 2019f58:	e0bfe517 	ldw	r2,-108(fp)
 2019f5c:	e0bfeb15 	stw	r2,-84(fp)
 2019f60:	e0bfeb17 	ldw	r2,-84(fp)
 2019f64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2019f68:	00006506 	br	201a100 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2019f6c:	e0bffc17 	ldw	r2,-16(fp)
 2019f70:	1080020b 	ldhu	r2,8(r2)
 2019f74:	0084303a 	nor	r2,zero,r2
 2019f78:	1007883a 	mov	r3,r2
 2019f7c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019f80:	1884703a 	and	r2,r3,r2
 2019f84:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019f88:	e0ffe80b 	ldhu	r3,-96(fp)
 2019f8c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019f90:	1880151e 	bne	r3,r2,2019fe8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019f94:	e0bfe403 	ldbu	r2,-112(fp)
 2019f98:	10800058 	cmpnei	r2,r2,1
 2019f9c:	1000071e 	bne	r2,zero,2019fbc <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2019fa0:	e0bffc17 	ldw	r2,-16(fp)
 2019fa4:	10c0020b 	ldhu	r3,8(r2)
 2019fa8:	e0bfe80b 	ldhu	r2,-96(fp)
 2019fac:	1884b03a 	or	r2,r3,r2
 2019fb0:	1007883a 	mov	r3,r2
 2019fb4:	e0bffc17 	ldw	r2,-16(fp)
 2019fb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2019fbc:	d0a7b617 	ldw	r2,-24872(gp)
 2019fc0:	e0ffe80b 	ldhu	r3,-96(fp)
 2019fc4:	10c00b0d 	sth	r3,44(r2)
 2019fc8:	e0bfe517 	ldw	r2,-108(fp)
 2019fcc:	e0bfec15 	stw	r2,-80(fp)
 2019fd0:	e0bfec17 	ldw	r2,-80(fp)
 2019fd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2019fd8:	e0800217 	ldw	r2,8(fp)
 2019fdc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019fe0:	e0bfe80b 	ldhu	r2,-96(fp)
 2019fe4:	00009d06 	br	201a25c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2019fe8:	e13ffd0b 	ldhu	r4,-12(fp)
 2019fec:	e17ffe03 	ldbu	r5,-8(fp)
 2019ff0:	e0bfff0b 	ldhu	r2,-4(fp)
 2019ff4:	e0fff704 	addi	r3,fp,-36
 2019ff8:	d8800015 	stw	r2,0(sp)
 2019ffc:	280f883a 	mov	r7,r5
 201a000:	200d883a 	mov	r6,r4
 201a004:	180b883a 	mov	r5,r3
 201a008:	e13ffc17 	ldw	r4,-16(fp)
 201a00c:	201a7280 	call	201a728 <OS_FlagBlock>
 201a010:	e0bfe517 	ldw	r2,-108(fp)
 201a014:	e0bfed15 	stw	r2,-76(fp)
 201a018:	e0bfed17 	ldw	r2,-76(fp)
 201a01c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a020:	00003706 	br	201a100 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 201a024:	e0bffc17 	ldw	r2,-16(fp)
 201a028:	1080020b 	ldhu	r2,8(r2)
 201a02c:	0084303a 	nor	r2,zero,r2
 201a030:	1007883a 	mov	r3,r2
 201a034:	e0bffd0b 	ldhu	r2,-12(fp)
 201a038:	1884703a 	and	r2,r3,r2
 201a03c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201a040:	e0bfe80b 	ldhu	r2,-96(fp)
 201a044:	10001526 	beq	r2,zero,201a09c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a048:	e0bfe403 	ldbu	r2,-112(fp)
 201a04c:	10800058 	cmpnei	r2,r2,1
 201a050:	1000071e 	bne	r2,zero,201a070 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201a054:	e0bffc17 	ldw	r2,-16(fp)
 201a058:	10c0020b 	ldhu	r3,8(r2)
 201a05c:	e0bfe80b 	ldhu	r2,-96(fp)
 201a060:	1884b03a 	or	r2,r3,r2
 201a064:	1007883a 	mov	r3,r2
 201a068:	e0bffc17 	ldw	r2,-16(fp)
 201a06c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a070:	d0a7b617 	ldw	r2,-24872(gp)
 201a074:	e0ffe80b 	ldhu	r3,-96(fp)
 201a078:	10c00b0d 	sth	r3,44(r2)
 201a07c:	e0bfe517 	ldw	r2,-108(fp)
 201a080:	e0bfee15 	stw	r2,-72(fp)
 201a084:	e0bfee17 	ldw	r2,-72(fp)
 201a088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a08c:	e0800217 	ldw	r2,8(fp)
 201a090:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a094:	e0bfe80b 	ldhu	r2,-96(fp)
 201a098:	00007006 	br	201a25c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a09c:	e13ffd0b 	ldhu	r4,-12(fp)
 201a0a0:	e17ffe03 	ldbu	r5,-8(fp)
 201a0a4:	e0bfff0b 	ldhu	r2,-4(fp)
 201a0a8:	e0fff704 	addi	r3,fp,-36
 201a0ac:	d8800015 	stw	r2,0(sp)
 201a0b0:	280f883a 	mov	r7,r5
 201a0b4:	200d883a 	mov	r6,r4
 201a0b8:	180b883a 	mov	r5,r3
 201a0bc:	e13ffc17 	ldw	r4,-16(fp)
 201a0c0:	201a7280 	call	201a728 <OS_FlagBlock>
 201a0c4:	e0bfe517 	ldw	r2,-108(fp)
 201a0c8:	e0bfef15 	stw	r2,-68(fp)
 201a0cc:	e0bfef17 	ldw	r2,-68(fp)
 201a0d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a0d4:	00000a06 	br	201a100 <OSFlagPend+0x448>
 201a0d8:	e0bfe517 	ldw	r2,-108(fp)
 201a0dc:	e0bff015 	stw	r2,-64(fp)
 201a0e0:	e0bff017 	ldw	r2,-64(fp)
 201a0e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 201a0e8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 201a0ec:	e0800217 	ldw	r2,8(fp)
 201a0f0:	00c01bc4 	movi	r3,111
 201a0f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 201a0f8:	e0bfe80b 	ldhu	r2,-96(fp)
 201a0fc:	00005706 	br	201a25c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 201a100:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a104:	0005303a 	rdctl	r2,status
 201a108:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a10c:	e0fff117 	ldw	r3,-60(fp)
 201a110:	00bfff84 	movi	r2,-2
 201a114:	1884703a 	and	r2,r3,r2
 201a118:	1001703a 	wrctl	status,r2
  
  return context;
 201a11c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 201a120:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 201a124:	d0a7b617 	ldw	r2,-24872(gp)
 201a128:	10800c43 	ldbu	r2,49(r2)
 201a12c:	10803fcc 	andi	r2,r2,255
 201a130:	10001c26 	beq	r2,zero,201a1a4 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 201a134:	d0a7b617 	ldw	r2,-24872(gp)
 201a138:	10800c43 	ldbu	r2,49(r2)
 201a13c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a140:	d0a7b617 	ldw	r2,-24872(gp)
 201a144:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 201a148:	e0bff704 	addi	r2,fp,-36
 201a14c:	1009883a 	mov	r4,r2
 201a150:	201aa5c0 	call	201aa5c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 201a154:	d0a7b617 	ldw	r2,-24872(gp)
 201a158:	10000c05 	stb	zero,48(r2)
 201a15c:	e0bfe517 	ldw	r2,-108(fp)
 201a160:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a164:	e0bff217 	ldw	r2,-56(fp)
 201a168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 201a16c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 201a170:	e0bff303 	ldbu	r2,-52(fp)
 201a174:	108000a0 	cmpeqi	r2,r2,2
 201a178:	10000426 	beq	r2,zero,201a18c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 201a17c:	e0800217 	ldw	r2,8(fp)
 201a180:	00c00384 	movi	r3,14
 201a184:	10c00005 	stb	r3,0(r2)
                 break;
 201a188:	00000406 	br	201a19c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 201a18c:	e0800217 	ldw	r2,8(fp)
 201a190:	00c00284 	movi	r3,10
 201a194:	10c00005 	stb	r3,0(r2)
                 break;
 201a198:	0001883a 	nop
        }
        return (flags_rdy);
 201a19c:	e0bfe80b 	ldhu	r2,-96(fp)
 201a1a0:	00002e06 	br	201a25c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 201a1a4:	d0a7b617 	ldw	r2,-24872(gp)
 201a1a8:	10800b0b 	ldhu	r2,44(r2)
 201a1ac:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 201a1b0:	e0bfe403 	ldbu	r2,-112(fp)
 201a1b4:	10800058 	cmpnei	r2,r2,1
 201a1b8:	1000211e 	bne	r2,zero,201a240 <OSFlagPend+0x588>
        switch (wait_type) {
 201a1bc:	e0bffe03 	ldbu	r2,-8(fp)
 201a1c0:	10001616 	blt	r2,zero,201a21c <OSFlagPend+0x564>
 201a1c4:	10c00090 	cmplti	r3,r2,2
 201a1c8:	18000c1e 	bne	r3,zero,201a1fc <OSFlagPend+0x544>
 201a1cc:	10800108 	cmpgei	r2,r2,4
 201a1d0:	1000121e 	bne	r2,zero,201a21c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 201a1d4:	e0bffc17 	ldw	r2,-16(fp)
 201a1d8:	1080020b 	ldhu	r2,8(r2)
 201a1dc:	1007883a 	mov	r3,r2
 201a1e0:	e0bfe80b 	ldhu	r2,-96(fp)
 201a1e4:	0084303a 	nor	r2,zero,r2
 201a1e8:	1884703a 	and	r2,r3,r2
 201a1ec:	1007883a 	mov	r3,r2
 201a1f0:	e0bffc17 	ldw	r2,-16(fp)
 201a1f4:	10c0020d 	sth	r3,8(r2)
                 break;
 201a1f8:	00001106 	br	201a240 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 201a1fc:	e0bffc17 	ldw	r2,-16(fp)
 201a200:	10c0020b 	ldhu	r3,8(r2)
 201a204:	e0bfe80b 	ldhu	r2,-96(fp)
 201a208:	1884b03a 	or	r2,r3,r2
 201a20c:	1007883a 	mov	r3,r2
 201a210:	e0bffc17 	ldw	r2,-16(fp)
 201a214:	10c0020d 	sth	r3,8(r2)
                 break;
 201a218:	00000906 	br	201a240 <OSFlagPend+0x588>
 201a21c:	e0bfe517 	ldw	r2,-108(fp)
 201a220:	e0bff415 	stw	r2,-48(fp)
 201a224:	e0bff417 	ldw	r2,-48(fp)
 201a228:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201a22c:	e0800217 	ldw	r2,8(fp)
 201a230:	00c01bc4 	movi	r3,111
 201a234:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201a238:	0005883a 	mov	r2,zero
 201a23c:	00000706 	br	201a25c <OSFlagPend+0x5a4>
 201a240:	e0bfe517 	ldw	r2,-108(fp)
 201a244:	e0bff515 	stw	r2,-44(fp)
 201a248:	e0bff517 	ldw	r2,-44(fp)
 201a24c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 201a250:	e0800217 	ldw	r2,8(fp)
 201a254:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 201a258:	e0bfe80b 	ldhu	r2,-96(fp)
}
 201a25c:	e037883a 	mov	sp,fp
 201a260:	dfc00117 	ldw	ra,4(sp)
 201a264:	df000017 	ldw	fp,0(sp)
 201a268:	dec00204 	addi	sp,sp,8
 201a26c:	f800283a 	ret

0201a270 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 201a270:	defffb04 	addi	sp,sp,-20
 201a274:	df000415 	stw	fp,16(sp)
 201a278:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201a27c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a280:	0005303a 	rdctl	r2,status
 201a284:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a288:	e0fffe17 	ldw	r3,-8(fp)
 201a28c:	00bfff84 	movi	r2,-2
 201a290:	1884703a 	and	r2,r3,r2
 201a294:	1001703a 	wrctl	status,r2
  
  return context;
 201a298:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201a29c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 201a2a0:	d0a7b617 	ldw	r2,-24872(gp)
 201a2a4:	10800b0b 	ldhu	r2,44(r2)
 201a2a8:	e0bffd0d 	sth	r2,-12(fp)
 201a2ac:	e0bffc17 	ldw	r2,-16(fp)
 201a2b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2b4:	e0bfff17 	ldw	r2,-4(fp)
 201a2b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 201a2bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201a2c0:	e037883a 	mov	sp,fp
 201a2c4:	df000017 	ldw	fp,0(sp)
 201a2c8:	dec00104 	addi	sp,sp,4
 201a2cc:	f800283a 	ret

0201a2d0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 201a2d0:	deffef04 	addi	sp,sp,-68
 201a2d4:	dfc01015 	stw	ra,64(sp)
 201a2d8:	df000f15 	stw	fp,60(sp)
 201a2dc:	df000f04 	addi	fp,sp,60
 201a2e0:	e13ffc15 	stw	r4,-16(fp)
 201a2e4:	2807883a 	mov	r3,r5
 201a2e8:	3005883a 	mov	r2,r6
 201a2ec:	e1ffff15 	stw	r7,-4(fp)
 201a2f0:	e0fffd0d 	sth	r3,-12(fp)
 201a2f4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 201a2f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201a2fc:	e0bfff17 	ldw	r2,-4(fp)
 201a300:	1000021e 	bne	r2,zero,201a30c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 201a304:	0005883a 	mov	r2,zero
 201a308:	0000d106 	br	201a650 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 201a30c:	e0bffc17 	ldw	r2,-16(fp)
 201a310:	1000051e 	bne	r2,zero,201a328 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a314:	e0bfff17 	ldw	r2,-4(fp)
 201a318:	00c01b84 	movi	r3,110
 201a31c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a320:	0005883a 	mov	r2,zero
 201a324:	0000ca06 	br	201a650 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 201a328:	e0bffc17 	ldw	r2,-16(fp)
 201a32c:	10800003 	ldbu	r2,0(r2)
 201a330:	10803fcc 	andi	r2,r2,255
 201a334:	10800160 	cmpeqi	r2,r2,5
 201a338:	1000051e 	bne	r2,zero,201a350 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 201a33c:	e0bfff17 	ldw	r2,-4(fp)
 201a340:	00c00044 	movi	r3,1
 201a344:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a348:	0005883a 	mov	r2,zero
 201a34c:	0000c006 	br	201a650 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a350:	0005303a 	rdctl	r2,status
 201a354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a358:	e0fffb17 	ldw	r3,-20(fp)
 201a35c:	00bfff84 	movi	r2,-2
 201a360:	1884703a 	and	r2,r3,r2
 201a364:	1001703a 	wrctl	status,r2
  
  return context;
 201a368:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 201a36c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 201a370:	e0bffe03 	ldbu	r2,-8(fp)
 201a374:	10000326 	beq	r2,zero,201a384 <OSFlagPost+0xb4>
 201a378:	10800060 	cmpeqi	r2,r2,1
 201a37c:	10000b1e 	bne	r2,zero,201a3ac <OSFlagPost+0xdc>
 201a380:	00001206 	br	201a3cc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 201a384:	e0bffc17 	ldw	r2,-16(fp)
 201a388:	1080020b 	ldhu	r2,8(r2)
 201a38c:	1007883a 	mov	r3,r2
 201a390:	e0bffd0b 	ldhu	r2,-12(fp)
 201a394:	0084303a 	nor	r2,zero,r2
 201a398:	1884703a 	and	r2,r3,r2
 201a39c:	1007883a 	mov	r3,r2
 201a3a0:	e0bffc17 	ldw	r2,-16(fp)
 201a3a4:	10c0020d 	sth	r3,8(r2)
             break;
 201a3a8:	00001106 	br	201a3f0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 201a3ac:	e0bffc17 	ldw	r2,-16(fp)
 201a3b0:	10c0020b 	ldhu	r3,8(r2)
 201a3b4:	e0bffd0b 	ldhu	r2,-12(fp)
 201a3b8:	1884b03a 	or	r2,r3,r2
 201a3bc:	1007883a 	mov	r3,r2
 201a3c0:	e0bffc17 	ldw	r2,-16(fp)
 201a3c4:	10c0020d 	sth	r3,8(r2)
             break;
 201a3c8:	00000906 	br	201a3f0 <OSFlagPost+0x120>
 201a3cc:	e0bff317 	ldw	r2,-52(fp)
 201a3d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a3d4:	e0bff417 	ldw	r2,-48(fp)
 201a3d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 201a3dc:	e0bfff17 	ldw	r2,-4(fp)
 201a3e0:	00c01c44 	movi	r3,113
 201a3e4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 201a3e8:	0005883a 	mov	r2,zero
 201a3ec:	00009806 	br	201a650 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 201a3f0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201a3f4:	e0bffc17 	ldw	r2,-16(fp)
 201a3f8:	10800117 	ldw	r2,4(r2)
 201a3fc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201a400:	00007706 	br	201a5e0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 201a404:	e0bff117 	ldw	r2,-60(fp)
 201a408:	10800483 	ldbu	r2,18(r2)
 201a40c:	10803fcc 	andi	r2,r2,255
 201a410:	10c00060 	cmpeqi	r3,r2,1
 201a414:	18004a1e 	bne	r3,zero,201a540 <OSFlagPost+0x270>
 201a418:	10c00088 	cmpgei	r3,r2,2
 201a41c:	1800021e 	bne	r3,zero,201a428 <OSFlagPost+0x158>
 201a420:	10002f26 	beq	r2,zero,201a4e0 <OSFlagPost+0x210>
 201a424:	00005b06 	br	201a594 <OSFlagPost+0x2c4>
 201a428:	10c000a0 	cmpeqi	r3,r2,2
 201a42c:	1800031e 	bne	r3,zero,201a43c <OSFlagPost+0x16c>
 201a430:	108000e0 	cmpeqi	r2,r2,3
 201a434:	1000171e 	bne	r2,zero,201a494 <OSFlagPost+0x1c4>
 201a438:	00005606 	br	201a594 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a43c:	e0bffc17 	ldw	r2,-16(fp)
 201a440:	10c0020b 	ldhu	r3,8(r2)
 201a444:	e0bff117 	ldw	r2,-60(fp)
 201a448:	1080040b 	ldhu	r2,16(r2)
 201a44c:	1884703a 	and	r2,r3,r2
 201a450:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201a454:	e0bff117 	ldw	r2,-60(fp)
 201a458:	1080040b 	ldhu	r2,16(r2)
 201a45c:	10ffffcc 	andi	r3,r2,65535
 201a460:	e0bff60b 	ldhu	r2,-40(fp)
 201a464:	1880541e 	bne	r3,r2,201a5b8 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a468:	e0bff60b 	ldhu	r2,-40(fp)
 201a46c:	100b883a 	mov	r5,r2
 201a470:	e13ff117 	ldw	r4,-60(fp)
 201a474:	201a9680 	call	201a968 <OS_FlagTaskRdy>
 201a478:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a47c:	e0bff683 	ldbu	r2,-38(fp)
 201a480:	10800058 	cmpnei	r2,r2,1
 201a484:	10004c1e 	bne	r2,zero,201a5b8 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a488:	00800044 	movi	r2,1
 201a48c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a490:	00004906 	br	201a5b8 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a494:	e0bffc17 	ldw	r2,-16(fp)
 201a498:	10c0020b 	ldhu	r3,8(r2)
 201a49c:	e0bff117 	ldw	r2,-60(fp)
 201a4a0:	1080040b 	ldhu	r2,16(r2)
 201a4a4:	1884703a 	and	r2,r3,r2
 201a4a8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201a4ac:	e0bff60b 	ldhu	r2,-40(fp)
 201a4b0:	10004326 	beq	r2,zero,201a5c0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a4b4:	e0bff60b 	ldhu	r2,-40(fp)
 201a4b8:	100b883a 	mov	r5,r2
 201a4bc:	e13ff117 	ldw	r4,-60(fp)
 201a4c0:	201a9680 	call	201a968 <OS_FlagTaskRdy>
 201a4c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a4c8:	e0bff683 	ldbu	r2,-38(fp)
 201a4cc:	10800058 	cmpnei	r2,r2,1
 201a4d0:	10003b1e 	bne	r2,zero,201a5c0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a4d4:	00800044 	movi	r2,1
 201a4d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a4dc:	00003806 	br	201a5c0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a4e0:	e0bffc17 	ldw	r2,-16(fp)
 201a4e4:	1080020b 	ldhu	r2,8(r2)
 201a4e8:	0084303a 	nor	r2,zero,r2
 201a4ec:	1007883a 	mov	r3,r2
 201a4f0:	e0bff117 	ldw	r2,-60(fp)
 201a4f4:	1080040b 	ldhu	r2,16(r2)
 201a4f8:	1884703a 	and	r2,r3,r2
 201a4fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201a500:	e0bff117 	ldw	r2,-60(fp)
 201a504:	1080040b 	ldhu	r2,16(r2)
 201a508:	10ffffcc 	andi	r3,r2,65535
 201a50c:	e0bff60b 	ldhu	r2,-40(fp)
 201a510:	18802d1e 	bne	r3,r2,201a5c8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a514:	e0bff60b 	ldhu	r2,-40(fp)
 201a518:	100b883a 	mov	r5,r2
 201a51c:	e13ff117 	ldw	r4,-60(fp)
 201a520:	201a9680 	call	201a968 <OS_FlagTaskRdy>
 201a524:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a528:	e0bff683 	ldbu	r2,-38(fp)
 201a52c:	10800058 	cmpnei	r2,r2,1
 201a530:	1000251e 	bne	r2,zero,201a5c8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a534:	00800044 	movi	r2,1
 201a538:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a53c:	00002206 	br	201a5c8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a540:	e0bffc17 	ldw	r2,-16(fp)
 201a544:	1080020b 	ldhu	r2,8(r2)
 201a548:	0084303a 	nor	r2,zero,r2
 201a54c:	1007883a 	mov	r3,r2
 201a550:	e0bff117 	ldw	r2,-60(fp)
 201a554:	1080040b 	ldhu	r2,16(r2)
 201a558:	1884703a 	and	r2,r3,r2
 201a55c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201a560:	e0bff60b 	ldhu	r2,-40(fp)
 201a564:	10001a26 	beq	r2,zero,201a5d0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a568:	e0bff60b 	ldhu	r2,-40(fp)
 201a56c:	100b883a 	mov	r5,r2
 201a570:	e13ff117 	ldw	r4,-60(fp)
 201a574:	201a9680 	call	201a968 <OS_FlagTaskRdy>
 201a578:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a57c:	e0bff683 	ldbu	r2,-38(fp)
 201a580:	10800058 	cmpnei	r2,r2,1
 201a584:	1000121e 	bne	r2,zero,201a5d0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a588:	00800044 	movi	r2,1
 201a58c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a590:	00000f06 	br	201a5d0 <OSFlagPost+0x300>
 201a594:	e0bff317 	ldw	r2,-52(fp)
 201a598:	e0bff515 	stw	r2,-44(fp)
 201a59c:	e0bff517 	ldw	r2,-44(fp)
 201a5a0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201a5a4:	e0bfff17 	ldw	r2,-4(fp)
 201a5a8:	00c01bc4 	movi	r3,111
 201a5ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201a5b0:	0005883a 	mov	r2,zero
 201a5b4:	00002606 	br	201a650 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a5b8:	0001883a 	nop
 201a5bc:	00000506 	br	201a5d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a5c0:	0001883a 	nop
 201a5c4:	00000306 	br	201a5d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a5c8:	0001883a 	nop
 201a5cc:	00000106 	br	201a5d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a5d0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 201a5d4:	e0bff117 	ldw	r2,-60(fp)
 201a5d8:	10800017 	ldw	r2,0(r2)
 201a5dc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201a5e0:	e0bff117 	ldw	r2,-60(fp)
 201a5e4:	103f871e 	bne	r2,zero,201a404 <OSFlagPost+0x134>
 201a5e8:	e0bff317 	ldw	r2,-52(fp)
 201a5ec:	e0bff715 	stw	r2,-36(fp)
 201a5f0:	e0bff717 	ldw	r2,-36(fp)
 201a5f4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201a5f8:	e0bff203 	ldbu	r2,-56(fp)
 201a5fc:	10800058 	cmpnei	r2,r2,1
 201a600:	1000011e 	bne	r2,zero,201a608 <OSFlagPost+0x338>
        OS_Sched();
 201a604:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a608:	0005303a 	rdctl	r2,status
 201a60c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a610:	e0fffa17 	ldw	r3,-24(fp)
 201a614:	00bfff84 	movi	r2,-2
 201a618:	1884703a 	and	r2,r3,r2
 201a61c:	1001703a 	wrctl	status,r2
  
  return context;
 201a620:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 201a624:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 201a628:	e0bffc17 	ldw	r2,-16(fp)
 201a62c:	1080020b 	ldhu	r2,8(r2)
 201a630:	e0bff90d 	sth	r2,-28(fp)
 201a634:	e0bff317 	ldw	r2,-52(fp)
 201a638:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a63c:	e0bff817 	ldw	r2,-32(fp)
 201a640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 201a644:	e0bfff17 	ldw	r2,-4(fp)
 201a648:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 201a64c:	e0bff90b 	ldhu	r2,-28(fp)
}
 201a650:	e037883a 	mov	sp,fp
 201a654:	dfc00117 	ldw	ra,4(sp)
 201a658:	df000017 	ldw	fp,0(sp)
 201a65c:	dec00204 	addi	sp,sp,8
 201a660:	f800283a 	ret

0201a664 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 201a664:	defff904 	addi	sp,sp,-28
 201a668:	df000615 	stw	fp,24(sp)
 201a66c:	df000604 	addi	fp,sp,24
 201a670:	e13ffe15 	stw	r4,-8(fp)
 201a674:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 201a678:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 201a67c:	e0bfff17 	ldw	r2,-4(fp)
 201a680:	1000021e 	bne	r2,zero,201a68c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 201a684:	0005883a 	mov	r2,zero
 201a688:	00002306 	br	201a718 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 201a68c:	e0bffe17 	ldw	r2,-8(fp)
 201a690:	1000051e 	bne	r2,zero,201a6a8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a694:	e0bfff17 	ldw	r2,-4(fp)
 201a698:	00c01b84 	movi	r3,110
 201a69c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a6a0:	0005883a 	mov	r2,zero
 201a6a4:	00001c06 	br	201a718 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201a6a8:	e0bffe17 	ldw	r2,-8(fp)
 201a6ac:	10800003 	ldbu	r2,0(r2)
 201a6b0:	10803fcc 	andi	r2,r2,255
 201a6b4:	10800160 	cmpeqi	r2,r2,5
 201a6b8:	1000051e 	bne	r2,zero,201a6d0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201a6bc:	e0bfff17 	ldw	r2,-4(fp)
 201a6c0:	00c00044 	movi	r3,1
 201a6c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a6c8:	0005883a 	mov	r2,zero
 201a6cc:	00001206 	br	201a718 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a6d0:	0005303a 	rdctl	r2,status
 201a6d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a6d8:	e0fffc17 	ldw	r3,-16(fp)
 201a6dc:	00bfff84 	movi	r2,-2
 201a6e0:	1884703a 	and	r2,r3,r2
 201a6e4:	1001703a 	wrctl	status,r2
  
  return context;
 201a6e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a6ec:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 201a6f0:	e0bffe17 	ldw	r2,-8(fp)
 201a6f4:	1080020b 	ldhu	r2,8(r2)
 201a6f8:	e0bffb0d 	sth	r2,-20(fp)
 201a6fc:	e0bffa17 	ldw	r2,-24(fp)
 201a700:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a704:	e0bffd17 	ldw	r2,-12(fp)
 201a708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a70c:	e0bfff17 	ldw	r2,-4(fp)
 201a710:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 201a714:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201a718:	e037883a 	mov	sp,fp
 201a71c:	df000017 	ldw	fp,0(sp)
 201a720:	dec00104 	addi	sp,sp,4
 201a724:	f800283a 	ret

0201a728 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 201a728:	defff804 	addi	sp,sp,-32
 201a72c:	df000715 	stw	fp,28(sp)
 201a730:	df000704 	addi	fp,sp,28
 201a734:	e13ffb15 	stw	r4,-20(fp)
 201a738:	e17ffc15 	stw	r5,-16(fp)
 201a73c:	3009883a 	mov	r4,r6
 201a740:	3807883a 	mov	r3,r7
 201a744:	e0800117 	ldw	r2,4(fp)
 201a748:	e13ffd0d 	sth	r4,-12(fp)
 201a74c:	e0fffe05 	stb	r3,-8(fp)
 201a750:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 201a754:	d0a7b617 	ldw	r2,-24872(gp)
 201a758:	d0e7b617 	ldw	r3,-24872(gp)
 201a75c:	18c00c03 	ldbu	r3,48(r3)
 201a760:	18c00814 	ori	r3,r3,32
 201a764:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201a768:	d0a7b617 	ldw	r2,-24872(gp)
 201a76c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201a770:	d0a7b617 	ldw	r2,-24872(gp)
 201a774:	e0ffff0b 	ldhu	r3,-4(fp)
 201a778:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 201a77c:	d0a7b617 	ldw	r2,-24872(gp)
 201a780:	e0fffc17 	ldw	r3,-16(fp)
 201a784:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 201a788:	e0bffc17 	ldw	r2,-16(fp)
 201a78c:	e0fffd0b 	ldhu	r3,-12(fp)
 201a790:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 201a794:	e0bffc17 	ldw	r2,-16(fp)
 201a798:	e0fffe03 	ldbu	r3,-8(fp)
 201a79c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201a7a0:	d0e7b617 	ldw	r3,-24872(gp)
 201a7a4:	e0bffc17 	ldw	r2,-16(fp)
 201a7a8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 201a7ac:	e0bffb17 	ldw	r2,-20(fp)
 201a7b0:	10c00117 	ldw	r3,4(r2)
 201a7b4:	e0bffc17 	ldw	r2,-16(fp)
 201a7b8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 201a7bc:	e0bffc17 	ldw	r2,-16(fp)
 201a7c0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 201a7c4:	e0bffc17 	ldw	r2,-16(fp)
 201a7c8:	e0fffb17 	ldw	r3,-20(fp)
 201a7cc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201a7d0:	e0bffb17 	ldw	r2,-20(fp)
 201a7d4:	10800117 	ldw	r2,4(r2)
 201a7d8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 201a7dc:	e0bff917 	ldw	r2,-28(fp)
 201a7e0:	10000326 	beq	r2,zero,201a7f0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 201a7e4:	e0bff917 	ldw	r2,-28(fp)
 201a7e8:	e0fffc17 	ldw	r3,-16(fp)
 201a7ec:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 201a7f0:	e0bffb17 	ldw	r2,-20(fp)
 201a7f4:	e0fffc17 	ldw	r3,-16(fp)
 201a7f8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 201a7fc:	d0a7b617 	ldw	r2,-24872(gp)
 201a800:	10800d03 	ldbu	r2,52(r2)
 201a804:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201a808:	e0fffa03 	ldbu	r3,-24(fp)
 201a80c:	e13ffa03 	ldbu	r4,-24(fp)
 201a810:	d0a7b344 	addi	r2,gp,-24883
 201a814:	2085883a 	add	r2,r4,r2
 201a818:	10800003 	ldbu	r2,0(r2)
 201a81c:	1009883a 	mov	r4,r2
 201a820:	d0a7b617 	ldw	r2,-24872(gp)
 201a824:	10800d43 	ldbu	r2,53(r2)
 201a828:	0084303a 	nor	r2,zero,r2
 201a82c:	2084703a 	and	r2,r4,r2
 201a830:	1009883a 	mov	r4,r2
 201a834:	d0a7b344 	addi	r2,gp,-24883
 201a838:	1885883a 	add	r2,r3,r2
 201a83c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 201a840:	e0fffa03 	ldbu	r3,-24(fp)
 201a844:	d0a7b344 	addi	r2,gp,-24883
 201a848:	1885883a 	add	r2,r3,r2
 201a84c:	10800003 	ldbu	r2,0(r2)
 201a850:	10803fcc 	andi	r2,r2,255
 201a854:	1000071e 	bne	r2,zero,201a874 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201a858:	d0a7b617 	ldw	r2,-24872(gp)
 201a85c:	10800d83 	ldbu	r2,54(r2)
 201a860:	0084303a 	nor	r2,zero,r2
 201a864:	1007883a 	mov	r3,r2
 201a868:	d0a7b303 	ldbu	r2,-24884(gp)
 201a86c:	1884703a 	and	r2,r3,r2
 201a870:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 201a874:	0001883a 	nop
 201a878:	e037883a 	mov	sp,fp
 201a87c:	df000017 	ldw	fp,0(sp)
 201a880:	dec00104 	addi	sp,sp,4
 201a884:	f800283a 	ret

0201a888 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 201a888:	defffb04 	addi	sp,sp,-20
 201a88c:	dfc00415 	stw	ra,16(sp)
 201a890:	df000315 	stw	fp,12(sp)
 201a894:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201a898:	0140dc04 	movi	r5,880
 201a89c:	010080f4 	movhi	r4,515
 201a8a0:	2138dc04 	addi	r4,r4,-7312
 201a8a4:	2018acc0 	call	2018acc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201a8a8:	008080f4 	movhi	r2,515
 201a8ac:	10b8dc04 	addi	r2,r2,-7312
 201a8b0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 201a8b4:	008080f4 	movhi	r2,515
 201a8b8:	10b8e704 	addi	r2,r2,-7268
 201a8bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201a8c0:	e03ffd0d 	sth	zero,-12(fp)
 201a8c4:	00001306 	br	201a914 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201a8c8:	e0bffe17 	ldw	r2,-8(fp)
 201a8cc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 201a8d0:	e0bffe17 	ldw	r2,-8(fp)
 201a8d4:	e0ffff17 	ldw	r3,-4(fp)
 201a8d8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 201a8dc:	e0bffe17 	ldw	r2,-8(fp)
 201a8e0:	00c00fc4 	movi	r3,63
 201a8e4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201a8e8:	e0bffe17 	ldw	r2,-8(fp)
 201a8ec:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 201a8f0:	e0bffe17 	ldw	r2,-8(fp)
 201a8f4:	10800b04 	addi	r2,r2,44
 201a8f8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 201a8fc:	e0bfff17 	ldw	r2,-4(fp)
 201a900:	10800b04 	addi	r2,r2,44
 201a904:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201a908:	e0bffd0b 	ldhu	r2,-12(fp)
 201a90c:	10800044 	addi	r2,r2,1
 201a910:	e0bffd0d 	sth	r2,-12(fp)
 201a914:	e0bffd0b 	ldhu	r2,-12(fp)
 201a918:	108004f0 	cmpltui	r2,r2,19
 201a91c:	103fea1e 	bne	r2,zero,201a8c8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201a920:	e0bffe17 	ldw	r2,-8(fp)
 201a924:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201a928:	e0bffe17 	ldw	r2,-8(fp)
 201a92c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201a930:	e0bffe17 	ldw	r2,-8(fp)
 201a934:	00c00fc4 	movi	r3,63
 201a938:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201a93c:	e0bffe17 	ldw	r2,-8(fp)
 201a940:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 201a944:	008080f4 	movhi	r2,515
 201a948:	10b8dc04 	addi	r2,r2,-7312
 201a94c:	d0a7b815 	stw	r2,-24864(gp)
#endif
}
 201a950:	0001883a 	nop
 201a954:	e037883a 	mov	sp,fp
 201a958:	dfc00117 	ldw	ra,4(sp)
 201a95c:	df000017 	ldw	fp,0(sp)
 201a960:	dec00204 	addi	sp,sp,8
 201a964:	f800283a 	ret

0201a968 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201a968:	defffa04 	addi	sp,sp,-24
 201a96c:	dfc00515 	stw	ra,20(sp)
 201a970:	df000415 	stw	fp,16(sp)
 201a974:	df000404 	addi	fp,sp,16
 201a978:	e13ffe15 	stw	r4,-8(fp)
 201a97c:	2805883a 	mov	r2,r5
 201a980:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 201a984:	e0bffe17 	ldw	r2,-8(fp)
 201a988:	10800217 	ldw	r2,8(r2)
 201a98c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201a990:	e0bffd17 	ldw	r2,-12(fp)
 201a994:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201a998:	e0bffd17 	ldw	r2,-12(fp)
 201a99c:	e0ffff0b 	ldhu	r3,-4(fp)
 201a9a0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 201a9a4:	e0bffd17 	ldw	r2,-12(fp)
 201a9a8:	10c00c03 	ldbu	r3,48(r2)
 201a9ac:	00bff7c4 	movi	r2,-33
 201a9b0:	1884703a 	and	r2,r3,r2
 201a9b4:	1007883a 	mov	r3,r2
 201a9b8:	e0bffd17 	ldw	r2,-12(fp)
 201a9bc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a9c0:	e0bffd17 	ldw	r2,-12(fp)
 201a9c4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201a9c8:	e0bffd17 	ldw	r2,-12(fp)
 201a9cc:	10800c03 	ldbu	r2,48(r2)
 201a9d0:	10803fcc 	andi	r2,r2,255
 201a9d4:	1000181e 	bne	r2,zero,201aa38 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201a9d8:	e0bffd17 	ldw	r2,-12(fp)
 201a9dc:	10c00d83 	ldbu	r3,54(r2)
 201a9e0:	d0a7b303 	ldbu	r2,-24884(gp)
 201a9e4:	1884b03a 	or	r2,r3,r2
 201a9e8:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201a9ec:	e0bffd17 	ldw	r2,-12(fp)
 201a9f0:	10800d03 	ldbu	r2,52(r2)
 201a9f4:	10c03fcc 	andi	r3,r2,255
 201a9f8:	e0bffd17 	ldw	r2,-12(fp)
 201a9fc:	10800d03 	ldbu	r2,52(r2)
 201aa00:	11003fcc 	andi	r4,r2,255
 201aa04:	d0a7b344 	addi	r2,gp,-24883
 201aa08:	2085883a 	add	r2,r4,r2
 201aa0c:	11000003 	ldbu	r4,0(r2)
 201aa10:	e0bffd17 	ldw	r2,-12(fp)
 201aa14:	10800d43 	ldbu	r2,53(r2)
 201aa18:	2084b03a 	or	r2,r4,r2
 201aa1c:	1009883a 	mov	r4,r2
 201aa20:	d0a7b344 	addi	r2,gp,-24883
 201aa24:	1885883a 	add	r2,r3,r2
 201aa28:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 201aa2c:	00800044 	movi	r2,1
 201aa30:	e0bffc05 	stb	r2,-16(fp)
 201aa34:	00000106 	br	201aa3c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201aa38:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 201aa3c:	e13ffe17 	ldw	r4,-8(fp)
 201aa40:	201aa5c0 	call	201aa5c <OS_FlagUnlink>
    return (sched);
 201aa44:	e0bffc03 	ldbu	r2,-16(fp)
}
 201aa48:	e037883a 	mov	sp,fp
 201aa4c:	dfc00117 	ldw	ra,4(sp)
 201aa50:	df000017 	ldw	fp,0(sp)
 201aa54:	dec00204 	addi	sp,sp,8
 201aa58:	f800283a 	ret

0201aa5c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 201aa5c:	defffa04 	addi	sp,sp,-24
 201aa60:	df000515 	stw	fp,20(sp)
 201aa64:	df000504 	addi	fp,sp,20
 201aa68:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 201aa6c:	e0bfff17 	ldw	r2,-4(fp)
 201aa70:	10800117 	ldw	r2,4(r2)
 201aa74:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201aa78:	e0bfff17 	ldw	r2,-4(fp)
 201aa7c:	10800017 	ldw	r2,0(r2)
 201aa80:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 201aa84:	e0bffb17 	ldw	r2,-20(fp)
 201aa88:	10000b1e 	bne	r2,zero,201aab8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 201aa8c:	e0bfff17 	ldw	r2,-4(fp)
 201aa90:	10800317 	ldw	r2,12(r2)
 201aa94:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201aa98:	e0bffd17 	ldw	r2,-12(fp)
 201aa9c:	e0fffc17 	ldw	r3,-16(fp)
 201aaa0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 201aaa4:	e0bffc17 	ldw	r2,-16(fp)
 201aaa8:	10000b26 	beq	r2,zero,201aad8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 201aaac:	e0bffc17 	ldw	r2,-16(fp)
 201aab0:	10000115 	stw	zero,4(r2)
 201aab4:	00000806 	br	201aad8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201aab8:	e0bffb17 	ldw	r2,-20(fp)
 201aabc:	e0fffc17 	ldw	r3,-16(fp)
 201aac0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201aac4:	e0bffc17 	ldw	r2,-16(fp)
 201aac8:	10000326 	beq	r2,zero,201aad8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 201aacc:	e0bffc17 	ldw	r2,-16(fp)
 201aad0:	e0fffb17 	ldw	r3,-20(fp)
 201aad4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201aad8:	e0bfff17 	ldw	r2,-4(fp)
 201aadc:	10800217 	ldw	r2,8(r2)
 201aae0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 201aae4:	e0bffe17 	ldw	r2,-8(fp)
 201aae8:	10000a15 	stw	zero,40(r2)
#endif
}
 201aaec:	0001883a 	nop
 201aaf0:	e037883a 	mov	sp,fp
 201aaf4:	df000017 	ldw	fp,0(sp)
 201aaf8:	dec00104 	addi	sp,sp,4
 201aafc:	f800283a 	ret

0201ab00 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 201ab00:	defffa04 	addi	sp,sp,-24
 201ab04:	df000515 	stw	fp,20(sp)
 201ab08:	df000504 	addi	fp,sp,20
 201ab0c:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 201ab10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 201ab14:	e0bfff17 	ldw	r2,-4(fp)
 201ab18:	1000021e 	bne	r2,zero,201ab24 <OSMboxAccept+0x24>
        return ((void *)0);
 201ab1c:	0005883a 	mov	r2,zero
 201ab20:	00001906 	br	201ab88 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 201ab24:	e0bfff17 	ldw	r2,-4(fp)
 201ab28:	10800003 	ldbu	r2,0(r2)
 201ab2c:	10803fcc 	andi	r2,r2,255
 201ab30:	10800060 	cmpeqi	r2,r2,1
 201ab34:	1000021e 	bne	r2,zero,201ab40 <OSMboxAccept+0x40>
        return ((void *)0);
 201ab38:	0005883a 	mov	r2,zero
 201ab3c:	00001206 	br	201ab88 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ab40:	0005303a 	rdctl	r2,status
 201ab44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ab48:	e0fffd17 	ldw	r3,-12(fp)
 201ab4c:	00bfff84 	movi	r2,-2
 201ab50:	1884703a 	and	r2,r3,r2
 201ab54:	1001703a 	wrctl	status,r2
  
  return context;
 201ab58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201ab5c:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201ab60:	e0bfff17 	ldw	r2,-4(fp)
 201ab64:	10800117 	ldw	r2,4(r2)
 201ab68:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 201ab6c:	e0bfff17 	ldw	r2,-4(fp)
 201ab70:	10000115 	stw	zero,4(r2)
 201ab74:	e0bffb17 	ldw	r2,-20(fp)
 201ab78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ab7c:	e0bffe17 	ldw	r2,-8(fp)
 201ab80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 201ab84:	e0bffc17 	ldw	r2,-16(fp)
}
 201ab88:	e037883a 	mov	sp,fp
 201ab8c:	df000017 	ldw	fp,0(sp)
 201ab90:	dec00104 	addi	sp,sp,4
 201ab94:	f800283a 	ret

0201ab98 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201ab98:	defff904 	addi	sp,sp,-28
 201ab9c:	dfc00615 	stw	ra,24(sp)
 201aba0:	df000515 	stw	fp,20(sp)
 201aba4:	df000504 	addi	fp,sp,20
 201aba8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201abac:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201abb0:	d0a7b503 	ldbu	r2,-24876(gp)
 201abb4:	10803fcc 	andi	r2,r2,255
 201abb8:	10000226 	beq	r2,zero,201abc4 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201abbc:	0005883a 	mov	r2,zero
 201abc0:	00002506 	br	201ac58 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201abc4:	0005303a 	rdctl	r2,status
 201abc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201abcc:	e0fffe17 	ldw	r3,-8(fp)
 201abd0:	00bfff84 	movi	r2,-2
 201abd4:	1884703a 	and	r2,r3,r2
 201abd8:	1001703a 	wrctl	status,r2
  
  return context;
 201abdc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201abe0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201abe4:	d0a7b417 	ldw	r2,-24880(gp)
 201abe8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201abec:	d0a7b417 	ldw	r2,-24880(gp)
 201abf0:	10000326 	beq	r2,zero,201ac00 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201abf4:	d0a7b417 	ldw	r2,-24880(gp)
 201abf8:	10800117 	ldw	r2,4(r2)
 201abfc:	d0a7b415 	stw	r2,-24880(gp)
 201ac00:	e0bffb17 	ldw	r2,-20(fp)
 201ac04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac08:	e0bffc17 	ldw	r2,-16(fp)
 201ac0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 201ac10:	e0bffd17 	ldw	r2,-12(fp)
 201ac14:	10000f26 	beq	r2,zero,201ac54 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201ac18:	e0bffd17 	ldw	r2,-12(fp)
 201ac1c:	00c00044 	movi	r3,1
 201ac20:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 201ac24:	e0bffd17 	ldw	r2,-12(fp)
 201ac28:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 201ac2c:	e0bffd17 	ldw	r2,-12(fp)
 201ac30:	e0ffff17 	ldw	r3,-4(fp)
 201ac34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201ac38:	e0bffd17 	ldw	r2,-12(fp)
 201ac3c:	00c00fc4 	movi	r3,63
 201ac40:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201ac44:	e0bffd17 	ldw	r2,-12(fp)
 201ac48:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 201ac4c:	e13ffd17 	ldw	r4,-12(fp)
 201ac50:	20186ec0 	call	20186ec <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 201ac54:	e0bffd17 	ldw	r2,-12(fp)
}
 201ac58:	e037883a 	mov	sp,fp
 201ac5c:	dfc00117 	ldw	ra,4(sp)
 201ac60:	df000017 	ldw	fp,0(sp)
 201ac64:	dec00204 	addi	sp,sp,8
 201ac68:	f800283a 	ret

0201ac6c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201ac6c:	defff304 	addi	sp,sp,-52
 201ac70:	dfc00c15 	stw	ra,48(sp)
 201ac74:	df000b15 	stw	fp,44(sp)
 201ac78:	df000b04 	addi	fp,sp,44
 201ac7c:	e13ffd15 	stw	r4,-12(fp)
 201ac80:	2805883a 	mov	r2,r5
 201ac84:	e1bfff15 	stw	r6,-4(fp)
 201ac88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201ac8c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201ac90:	e0bfff17 	ldw	r2,-4(fp)
 201ac94:	1000021e 	bne	r2,zero,201aca0 <OSMboxDel+0x34>
        return (pevent);
 201ac98:	e0bffd17 	ldw	r2,-12(fp)
 201ac9c:	00007e06 	br	201ae98 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201aca0:	e0bffd17 	ldw	r2,-12(fp)
 201aca4:	1000051e 	bne	r2,zero,201acbc <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201aca8:	e0bfff17 	ldw	r2,-4(fp)
 201acac:	00c00104 	movi	r3,4
 201acb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201acb4:	e0bffd17 	ldw	r2,-12(fp)
 201acb8:	00007706 	br	201ae98 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201acbc:	e0bffd17 	ldw	r2,-12(fp)
 201acc0:	10800003 	ldbu	r2,0(r2)
 201acc4:	10803fcc 	andi	r2,r2,255
 201acc8:	10800060 	cmpeqi	r2,r2,1
 201accc:	1000051e 	bne	r2,zero,201ace4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201acd0:	e0bfff17 	ldw	r2,-4(fp)
 201acd4:	00c00044 	movi	r3,1
 201acd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201acdc:	e0bffd17 	ldw	r2,-12(fp)
 201ace0:	00006d06 	br	201ae98 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201ace4:	d0a7b503 	ldbu	r2,-24876(gp)
 201ace8:	10803fcc 	andi	r2,r2,255
 201acec:	10000526 	beq	r2,zero,201ad04 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201acf0:	e0bfff17 	ldw	r2,-4(fp)
 201acf4:	00c003c4 	movi	r3,15
 201acf8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201acfc:	e0bffd17 	ldw	r2,-12(fp)
 201ad00:	00006506 	br	201ae98 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad04:	0005303a 	rdctl	r2,status
 201ad08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad0c:	e0fffc17 	ldw	r3,-16(fp)
 201ad10:	00bfff84 	movi	r2,-2
 201ad14:	1884703a 	and	r2,r3,r2
 201ad18:	1001703a 	wrctl	status,r2
  
  return context;
 201ad1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201ad20:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 201ad24:	e0bffd17 	ldw	r2,-12(fp)
 201ad28:	10800283 	ldbu	r2,10(r2)
 201ad2c:	10803fcc 	andi	r2,r2,255
 201ad30:	10000326 	beq	r2,zero,201ad40 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201ad34:	00800044 	movi	r2,1
 201ad38:	e0bff505 	stb	r2,-44(fp)
 201ad3c:	00000106 	br	201ad44 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201ad40:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201ad44:	e0bffe03 	ldbu	r2,-8(fp)
 201ad48:	10000326 	beq	r2,zero,201ad58 <OSMboxDel+0xec>
 201ad4c:	10800060 	cmpeqi	r2,r2,1
 201ad50:	1000281e 	bne	r2,zero,201adf4 <OSMboxDel+0x188>
 201ad54:	00004506 	br	201ae6c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 201ad58:	e0bff503 	ldbu	r2,-44(fp)
 201ad5c:	1000161e 	bne	r2,zero,201adb8 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201ad60:	e0bffd17 	ldw	r2,-12(fp)
 201ad64:	00c00fc4 	movi	r3,63
 201ad68:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201ad6c:	e0bffd17 	ldw	r2,-12(fp)
 201ad70:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 201ad74:	e0bffd17 	ldw	r2,-12(fp)
 201ad78:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 201ad7c:	d0e7b417 	ldw	r3,-24880(gp)
 201ad80:	e0bffd17 	ldw	r2,-12(fp)
 201ad84:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 201ad88:	e0bffd17 	ldw	r2,-12(fp)
 201ad8c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201ad90:	e0bffd17 	ldw	r2,-12(fp)
 201ad94:	d0a7b415 	stw	r2,-24880(gp)
 201ad98:	e0bff717 	ldw	r2,-36(fp)
 201ad9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ada0:	e0bff817 	ldw	r2,-32(fp)
 201ada4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201ada8:	e0bfff17 	ldw	r2,-4(fp)
 201adac:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201adb0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 201adb4:	00003706 	br	201ae94 <OSMboxDel+0x228>
 201adb8:	e0bff717 	ldw	r2,-36(fp)
 201adbc:	e0bff915 	stw	r2,-28(fp)
 201adc0:	e0bff917 	ldw	r2,-28(fp)
 201adc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201adc8:	e0bfff17 	ldw	r2,-4(fp)
 201adcc:	00c01244 	movi	r3,73
 201add0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 201add4:	e0bffd17 	ldw	r2,-12(fp)
 201add8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201addc:	00002d06 	br	201ae94 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201ade0:	000f883a 	mov	r7,zero
 201ade4:	01800084 	movi	r6,2
 201ade8:	000b883a 	mov	r5,zero
 201adec:	e13ffd17 	ldw	r4,-12(fp)
 201adf0:	201813c0 	call	201813c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 201adf4:	e0bffd17 	ldw	r2,-12(fp)
 201adf8:	10800283 	ldbu	r2,10(r2)
 201adfc:	10803fcc 	andi	r2,r2,255
 201ae00:	103ff71e 	bne	r2,zero,201ade0 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201ae04:	e0bffd17 	ldw	r2,-12(fp)
 201ae08:	00c00fc4 	movi	r3,63
 201ae0c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201ae10:	e0bffd17 	ldw	r2,-12(fp)
 201ae14:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201ae18:	e0bffd17 	ldw	r2,-12(fp)
 201ae1c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201ae20:	d0e7b417 	ldw	r3,-24880(gp)
 201ae24:	e0bffd17 	ldw	r2,-12(fp)
 201ae28:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201ae2c:	e0bffd17 	ldw	r2,-12(fp)
 201ae30:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201ae34:	e0bffd17 	ldw	r2,-12(fp)
 201ae38:	d0a7b415 	stw	r2,-24880(gp)
 201ae3c:	e0bff717 	ldw	r2,-36(fp)
 201ae40:	e0bffa15 	stw	r2,-24(fp)
 201ae44:	e0bffa17 	ldw	r2,-24(fp)
 201ae48:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201ae4c:	e0bff503 	ldbu	r2,-44(fp)
 201ae50:	10800058 	cmpnei	r2,r2,1
 201ae54:	1000011e 	bne	r2,zero,201ae5c <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201ae58:	2018b880 	call	2018b88 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 201ae5c:	e0bfff17 	ldw	r2,-4(fp)
 201ae60:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 201ae64:	e03ff615 	stw	zero,-40(fp)
             break;
 201ae68:	00000a06 	br	201ae94 <OSMboxDel+0x228>
 201ae6c:	e0bff717 	ldw	r2,-36(fp)
 201ae70:	e0bffb15 	stw	r2,-20(fp)
 201ae74:	e0bffb17 	ldw	r2,-20(fp)
 201ae78:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 201ae7c:	e0bfff17 	ldw	r2,-4(fp)
 201ae80:	00c001c4 	movi	r3,7
 201ae84:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 201ae88:	e0bffd17 	ldw	r2,-12(fp)
 201ae8c:	e0bff615 	stw	r2,-40(fp)
             break;
 201ae90:	0001883a 	nop
    }
    return (pevent_return);
 201ae94:	e0bff617 	ldw	r2,-40(fp)
}
 201ae98:	e037883a 	mov	sp,fp
 201ae9c:	dfc00117 	ldw	ra,4(sp)
 201aea0:	df000017 	ldw	fp,0(sp)
 201aea4:	dec00204 	addi	sp,sp,8
 201aea8:	f800283a 	ret

0201aeac <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201aeac:	defff404 	addi	sp,sp,-48
 201aeb0:	dfc00b15 	stw	ra,44(sp)
 201aeb4:	df000a15 	stw	fp,40(sp)
 201aeb8:	df000a04 	addi	fp,sp,40
 201aebc:	e13ffd15 	stw	r4,-12(fp)
 201aec0:	2805883a 	mov	r2,r5
 201aec4:	e1bfff15 	stw	r6,-4(fp)
 201aec8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201aecc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201aed0:	e0bfff17 	ldw	r2,-4(fp)
 201aed4:	1000021e 	bne	r2,zero,201aee0 <OSMboxPend+0x34>
        return ((void *)0);
 201aed8:	0005883a 	mov	r2,zero
 201aedc:	00007b06 	br	201b0cc <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201aee0:	e0bffd17 	ldw	r2,-12(fp)
 201aee4:	1000051e 	bne	r2,zero,201aefc <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201aee8:	e0bfff17 	ldw	r2,-4(fp)
 201aeec:	00c00104 	movi	r3,4
 201aef0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201aef4:	0005883a 	mov	r2,zero
 201aef8:	00007406 	br	201b0cc <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201aefc:	e0bffd17 	ldw	r2,-12(fp)
 201af00:	10800003 	ldbu	r2,0(r2)
 201af04:	10803fcc 	andi	r2,r2,255
 201af08:	10800060 	cmpeqi	r2,r2,1
 201af0c:	1000051e 	bne	r2,zero,201af24 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201af10:	e0bfff17 	ldw	r2,-4(fp)
 201af14:	00c00044 	movi	r3,1
 201af18:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201af1c:	0005883a 	mov	r2,zero
 201af20:	00006a06 	br	201b0cc <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201af24:	d0a7b503 	ldbu	r2,-24876(gp)
 201af28:	10803fcc 	andi	r2,r2,255
 201af2c:	10000526 	beq	r2,zero,201af44 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201af30:	e0bfff17 	ldw	r2,-4(fp)
 201af34:	00c00084 	movi	r3,2
 201af38:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201af3c:	0005883a 	mov	r2,zero
 201af40:	00006206 	br	201b0cc <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201af44:	d0a7a703 	ldbu	r2,-24932(gp)
 201af48:	10803fcc 	andi	r2,r2,255
 201af4c:	10000526 	beq	r2,zero,201af64 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201af50:	e0bfff17 	ldw	r2,-4(fp)
 201af54:	00c00344 	movi	r3,13
 201af58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201af5c:	0005883a 	mov	r2,zero
 201af60:	00005a06 	br	201b0cc <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201af64:	0005303a 	rdctl	r2,status
 201af68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201af6c:	e0fffc17 	ldw	r3,-16(fp)
 201af70:	00bfff84 	movi	r2,-2
 201af74:	1884703a 	and	r2,r3,r2
 201af78:	1001703a 	wrctl	status,r2
  
  return context;
 201af7c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201af80:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 201af84:	e0bffd17 	ldw	r2,-12(fp)
 201af88:	10800117 	ldw	r2,4(r2)
 201af8c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201af90:	e0bff617 	ldw	r2,-40(fp)
 201af94:	10000a26 	beq	r2,zero,201afc0 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 201af98:	e0bffd17 	ldw	r2,-12(fp)
 201af9c:	10000115 	stw	zero,4(r2)
 201afa0:	e0bff717 	ldw	r2,-36(fp)
 201afa4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201afa8:	e0bff817 	ldw	r2,-32(fp)
 201afac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201afb0:	e0bfff17 	ldw	r2,-4(fp)
 201afb4:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 201afb8:	e0bff617 	ldw	r2,-40(fp)
 201afbc:	00004306 	br	201b0cc <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 201afc0:	d0a7b617 	ldw	r2,-24872(gp)
 201afc4:	d0e7b617 	ldw	r3,-24872(gp)
 201afc8:	18c00c03 	ldbu	r3,48(r3)
 201afcc:	18c00094 	ori	r3,r3,2
 201afd0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201afd4:	d0a7b617 	ldw	r2,-24872(gp)
 201afd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 201afdc:	d0a7b617 	ldw	r2,-24872(gp)
 201afe0:	e0fffe0b 	ldhu	r3,-8(fp)
 201afe4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201afe8:	e13ffd17 	ldw	r4,-12(fp)
 201afec:	20182d40 	call	20182d4 <OS_EventTaskWait>
 201aff0:	e0bff717 	ldw	r2,-36(fp)
 201aff4:	e0bffb15 	stw	r2,-20(fp)
 201aff8:	e0bffb17 	ldw	r2,-20(fp)
 201affc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 201b000:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b004:	0005303a 	rdctl	r2,status
 201b008:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b00c:	e0fff917 	ldw	r3,-28(fp)
 201b010:	00bfff84 	movi	r2,-2
 201b014:	1884703a 	and	r2,r3,r2
 201b018:	1001703a 	wrctl	status,r2
  
  return context;
 201b01c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201b020:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201b024:	d0a7b617 	ldw	r2,-24872(gp)
 201b028:	10800c43 	ldbu	r2,49(r2)
 201b02c:	10803fcc 	andi	r2,r2,255
 201b030:	10000326 	beq	r2,zero,201b040 <OSMboxPend+0x194>
 201b034:	108000a0 	cmpeqi	r2,r2,2
 201b038:	1000071e 	bne	r2,zero,201b058 <OSMboxPend+0x1ac>
 201b03c:	00000b06 	br	201b06c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 201b040:	d0a7b617 	ldw	r2,-24872(gp)
 201b044:	10800917 	ldw	r2,36(r2)
 201b048:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 201b04c:	e0bfff17 	ldw	r2,-4(fp)
 201b050:	10000005 	stb	zero,0(r2)
             break;
 201b054:	00000e06 	br	201b090 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201b058:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201b05c:	e0bfff17 	ldw	r2,-4(fp)
 201b060:	00c00384 	movi	r3,14
 201b064:	10c00005 	stb	r3,0(r2)
             break;
 201b068:	00000906 	br	201b090 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201b06c:	d0a7b617 	ldw	r2,-24872(gp)
 201b070:	e17ffd17 	ldw	r5,-12(fp)
 201b074:	1009883a 	mov	r4,r2
 201b078:	20185340 	call	2018534 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201b07c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201b080:	e0bfff17 	ldw	r2,-4(fp)
 201b084:	00c00284 	movi	r3,10
 201b088:	10c00005 	stb	r3,0(r2)
             break;
 201b08c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201b090:	d0a7b617 	ldw	r2,-24872(gp)
 201b094:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201b098:	d0a7b617 	ldw	r2,-24872(gp)
 201b09c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201b0a0:	d0a7b617 	ldw	r2,-24872(gp)
 201b0a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201b0a8:	d0a7b617 	ldw	r2,-24872(gp)
 201b0ac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201b0b0:	d0a7b617 	ldw	r2,-24872(gp)
 201b0b4:	10000915 	stw	zero,36(r2)
 201b0b8:	e0bff717 	ldw	r2,-36(fp)
 201b0bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b0c0:	e0bffa17 	ldw	r2,-24(fp)
 201b0c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201b0c8:	e0bff617 	ldw	r2,-40(fp)
}
 201b0cc:	e037883a 	mov	sp,fp
 201b0d0:	dfc00117 	ldw	ra,4(sp)
 201b0d4:	df000017 	ldw	fp,0(sp)
 201b0d8:	dec00204 	addi	sp,sp,8
 201b0dc:	f800283a 	ret

0201b0e0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201b0e0:	defff604 	addi	sp,sp,-40
 201b0e4:	dfc00915 	stw	ra,36(sp)
 201b0e8:	df000815 	stw	fp,32(sp)
 201b0ec:	df000804 	addi	fp,sp,32
 201b0f0:	e13ffd15 	stw	r4,-12(fp)
 201b0f4:	2805883a 	mov	r2,r5
 201b0f8:	e1bfff15 	stw	r6,-4(fp)
 201b0fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b100:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201b104:	e0bfff17 	ldw	r2,-4(fp)
 201b108:	1000021e 	bne	r2,zero,201b114 <OSMboxPendAbort+0x34>
        return (0);
 201b10c:	0005883a 	mov	r2,zero
 201b110:	00004906 	br	201b238 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b114:	e0bffd17 	ldw	r2,-12(fp)
 201b118:	1000051e 	bne	r2,zero,201b130 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b11c:	e0bfff17 	ldw	r2,-4(fp)
 201b120:	00c00104 	movi	r3,4
 201b124:	10c00005 	stb	r3,0(r2)
        return (0);
 201b128:	0005883a 	mov	r2,zero
 201b12c:	00004206 	br	201b238 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201b130:	e0bffd17 	ldw	r2,-12(fp)
 201b134:	10800003 	ldbu	r2,0(r2)
 201b138:	10803fcc 	andi	r2,r2,255
 201b13c:	10800060 	cmpeqi	r2,r2,1
 201b140:	1000051e 	bne	r2,zero,201b158 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201b144:	e0bfff17 	ldw	r2,-4(fp)
 201b148:	00c00044 	movi	r3,1
 201b14c:	10c00005 	stb	r3,0(r2)
        return (0);
 201b150:	0005883a 	mov	r2,zero
 201b154:	00003806 	br	201b238 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b158:	0005303a 	rdctl	r2,status
 201b15c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b160:	e0fffc17 	ldw	r3,-16(fp)
 201b164:	00bfff84 	movi	r2,-2
 201b168:	1884703a 	and	r2,r3,r2
 201b16c:	1001703a 	wrctl	status,r2
  
  return context;
 201b170:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b174:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 201b178:	e0bffd17 	ldw	r2,-12(fp)
 201b17c:	10800283 	ldbu	r2,10(r2)
 201b180:	10803fcc 	andi	r2,r2,255
 201b184:	10002526 	beq	r2,zero,201b21c <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 201b188:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201b18c:	e0bffe03 	ldbu	r2,-8(fp)
 201b190:	10800060 	cmpeqi	r2,r2,1
 201b194:	10000e26 	beq	r2,zero,201b1d0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201b198:	00000806 	br	201b1bc <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201b19c:	01c00084 	movi	r7,2
 201b1a0:	01800084 	movi	r6,2
 201b1a4:	000b883a 	mov	r5,zero
 201b1a8:	e13ffd17 	ldw	r4,-12(fp)
 201b1ac:	201813c0 	call	201813c <OS_EventTaskRdy>
                     nbr_tasks++;
 201b1b0:	e0bff803 	ldbu	r2,-32(fp)
 201b1b4:	10800044 	addi	r2,r2,1
 201b1b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201b1bc:	e0bffd17 	ldw	r2,-12(fp)
 201b1c0:	10800283 	ldbu	r2,10(r2)
 201b1c4:	10803fcc 	andi	r2,r2,255
 201b1c8:	103ff41e 	bne	r2,zero,201b19c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201b1cc:	00000906 	br	201b1f4 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201b1d0:	01c00084 	movi	r7,2
 201b1d4:	01800084 	movi	r6,2
 201b1d8:	000b883a 	mov	r5,zero
 201b1dc:	e13ffd17 	ldw	r4,-12(fp)
 201b1e0:	201813c0 	call	201813c <OS_EventTaskRdy>
                 nbr_tasks++;
 201b1e4:	e0bff803 	ldbu	r2,-32(fp)
 201b1e8:	10800044 	addi	r2,r2,1
 201b1ec:	e0bff805 	stb	r2,-32(fp)
                 break;
 201b1f0:	0001883a 	nop
 201b1f4:	e0bff917 	ldw	r2,-28(fp)
 201b1f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1fc:	e0bffa17 	ldw	r2,-24(fp)
 201b200:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201b204:	2018b880 	call	2018b88 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201b208:	e0bfff17 	ldw	r2,-4(fp)
 201b20c:	00c00384 	movi	r3,14
 201b210:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201b214:	e0bff803 	ldbu	r2,-32(fp)
 201b218:	00000706 	br	201b238 <OSMboxPendAbort+0x158>
 201b21c:	e0bff917 	ldw	r2,-28(fp)
 201b220:	e0bffb15 	stw	r2,-20(fp)
 201b224:	e0bffb17 	ldw	r2,-20(fp)
 201b228:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b22c:	e0bfff17 	ldw	r2,-4(fp)
 201b230:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 201b234:	0005883a 	mov	r2,zero
}
 201b238:	e037883a 	mov	sp,fp
 201b23c:	dfc00117 	ldw	ra,4(sp)
 201b240:	df000017 	ldw	fp,0(sp)
 201b244:	dec00204 	addi	sp,sp,8
 201b248:	f800283a 	ret

0201b24c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 201b24c:	defff704 	addi	sp,sp,-36
 201b250:	dfc00815 	stw	ra,32(sp)
 201b254:	df000715 	stw	fp,28(sp)
 201b258:	df000704 	addi	fp,sp,28
 201b25c:	e13ffe15 	stw	r4,-8(fp)
 201b260:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b264:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b268:	e0bffe17 	ldw	r2,-8(fp)
 201b26c:	1000021e 	bne	r2,zero,201b278 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201b270:	00800104 	movi	r2,4
 201b274:	00003406 	br	201b348 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201b278:	e0bfff17 	ldw	r2,-4(fp)
 201b27c:	1000021e 	bne	r2,zero,201b288 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 201b280:	008000c4 	movi	r2,3
 201b284:	00003006 	br	201b348 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b288:	e0bffe17 	ldw	r2,-8(fp)
 201b28c:	10800003 	ldbu	r2,0(r2)
 201b290:	10803fcc 	andi	r2,r2,255
 201b294:	10800060 	cmpeqi	r2,r2,1
 201b298:	1000021e 	bne	r2,zero,201b2a4 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 201b29c:	00800044 	movi	r2,1
 201b2a0:	00002906 	br	201b348 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b2a4:	0005303a 	rdctl	r2,status
 201b2a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b2ac:	e0fffd17 	ldw	r3,-12(fp)
 201b2b0:	00bfff84 	movi	r2,-2
 201b2b4:	1884703a 	and	r2,r3,r2
 201b2b8:	1001703a 	wrctl	status,r2
  
  return context;
 201b2bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b2c0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201b2c4:	e0bffe17 	ldw	r2,-8(fp)
 201b2c8:	10800283 	ldbu	r2,10(r2)
 201b2cc:	10803fcc 	andi	r2,r2,255
 201b2d0:	10000c26 	beq	r2,zero,201b304 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b2d4:	000f883a 	mov	r7,zero
 201b2d8:	01800084 	movi	r6,2
 201b2dc:	e17fff17 	ldw	r5,-4(fp)
 201b2e0:	e13ffe17 	ldw	r4,-8(fp)
 201b2e4:	201813c0 	call	201813c <OS_EventTaskRdy>
 201b2e8:	e0bff917 	ldw	r2,-28(fp)
 201b2ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b2f0:	e0bffa17 	ldw	r2,-24(fp)
 201b2f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201b2f8:	2018b880 	call	2018b88 <OS_Sched>
        return (OS_ERR_NONE);
 201b2fc:	0005883a 	mov	r2,zero
 201b300:	00001106 	br	201b348 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201b304:	e0bffe17 	ldw	r2,-8(fp)
 201b308:	10800117 	ldw	r2,4(r2)
 201b30c:	10000626 	beq	r2,zero,201b328 <OSMboxPost+0xdc>
 201b310:	e0bff917 	ldw	r2,-28(fp)
 201b314:	e0bffb15 	stw	r2,-20(fp)
 201b318:	e0bffb17 	ldw	r2,-20(fp)
 201b31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201b320:	00800504 	movi	r2,20
 201b324:	00000806 	br	201b348 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201b328:	e0bffe17 	ldw	r2,-8(fp)
 201b32c:	e0ffff17 	ldw	r3,-4(fp)
 201b330:	10c00115 	stw	r3,4(r2)
 201b334:	e0bff917 	ldw	r2,-28(fp)
 201b338:	e0bffc15 	stw	r2,-16(fp)
 201b33c:	e0bffc17 	ldw	r2,-16(fp)
 201b340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b344:	0005883a 	mov	r2,zero
}
 201b348:	e037883a 	mov	sp,fp
 201b34c:	dfc00117 	ldw	ra,4(sp)
 201b350:	df000017 	ldw	fp,0(sp)
 201b354:	dec00204 	addi	sp,sp,8
 201b358:	f800283a 	ret

0201b35c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201b35c:	defff604 	addi	sp,sp,-40
 201b360:	dfc00915 	stw	ra,36(sp)
 201b364:	df000815 	stw	fp,32(sp)
 201b368:	df000804 	addi	fp,sp,32
 201b36c:	e13ffd15 	stw	r4,-12(fp)
 201b370:	e17ffe15 	stw	r5,-8(fp)
 201b374:	3005883a 	mov	r2,r6
 201b378:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b37c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b380:	e0bffd17 	ldw	r2,-12(fp)
 201b384:	1000021e 	bne	r2,zero,201b390 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201b388:	00800104 	movi	r2,4
 201b38c:	00004506 	br	201b4a4 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201b390:	e0bffe17 	ldw	r2,-8(fp)
 201b394:	1000021e 	bne	r2,zero,201b3a0 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 201b398:	008000c4 	movi	r2,3
 201b39c:	00004106 	br	201b4a4 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b3a0:	e0bffd17 	ldw	r2,-12(fp)
 201b3a4:	10800003 	ldbu	r2,0(r2)
 201b3a8:	10803fcc 	andi	r2,r2,255
 201b3ac:	10800060 	cmpeqi	r2,r2,1
 201b3b0:	1000021e 	bne	r2,zero,201b3bc <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 201b3b4:	00800044 	movi	r2,1
 201b3b8:	00003a06 	br	201b4a4 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b3bc:	0005303a 	rdctl	r2,status
 201b3c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b3c4:	e0fffc17 	ldw	r3,-16(fp)
 201b3c8:	00bfff84 	movi	r2,-2
 201b3cc:	1884703a 	and	r2,r3,r2
 201b3d0:	1001703a 	wrctl	status,r2
  
  return context;
 201b3d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b3d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201b3dc:	e0bffd17 	ldw	r2,-12(fp)
 201b3e0:	10800283 	ldbu	r2,10(r2)
 201b3e4:	10803fcc 	andi	r2,r2,255
 201b3e8:	10001d26 	beq	r2,zero,201b460 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201b3ec:	e0bfff03 	ldbu	r2,-4(fp)
 201b3f0:	1080004c 	andi	r2,r2,1
 201b3f4:	10000b26 	beq	r2,zero,201b424 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201b3f8:	00000506 	br	201b410 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b3fc:	000f883a 	mov	r7,zero
 201b400:	01800084 	movi	r6,2
 201b404:	e17ffe17 	ldw	r5,-8(fp)
 201b408:	e13ffd17 	ldw	r4,-12(fp)
 201b40c:	201813c0 	call	201813c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201b410:	e0bffd17 	ldw	r2,-12(fp)
 201b414:	10800283 	ldbu	r2,10(r2)
 201b418:	10803fcc 	andi	r2,r2,255
 201b41c:	103ff71e 	bne	r2,zero,201b3fc <OSMboxPostOpt+0xa0>
 201b420:	00000506 	br	201b438 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b424:	000f883a 	mov	r7,zero
 201b428:	01800084 	movi	r6,2
 201b42c:	e17ffe17 	ldw	r5,-8(fp)
 201b430:	e13ffd17 	ldw	r4,-12(fp)
 201b434:	201813c0 	call	201813c <OS_EventTaskRdy>
 201b438:	e0bff817 	ldw	r2,-32(fp)
 201b43c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b440:	e0bff917 	ldw	r2,-28(fp)
 201b444:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201b448:	e0bfff03 	ldbu	r2,-4(fp)
 201b44c:	1080010c 	andi	r2,r2,4
 201b450:	1000011e 	bne	r2,zero,201b458 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 201b454:	2018b880 	call	2018b88 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201b458:	0005883a 	mov	r2,zero
 201b45c:	00001106 	br	201b4a4 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201b460:	e0bffd17 	ldw	r2,-12(fp)
 201b464:	10800117 	ldw	r2,4(r2)
 201b468:	10000626 	beq	r2,zero,201b484 <OSMboxPostOpt+0x128>
 201b46c:	e0bff817 	ldw	r2,-32(fp)
 201b470:	e0bffa15 	stw	r2,-24(fp)
 201b474:	e0bffa17 	ldw	r2,-24(fp)
 201b478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201b47c:	00800504 	movi	r2,20
 201b480:	00000806 	br	201b4a4 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201b484:	e0bffd17 	ldw	r2,-12(fp)
 201b488:	e0fffe17 	ldw	r3,-8(fp)
 201b48c:	10c00115 	stw	r3,4(r2)
 201b490:	e0bff817 	ldw	r2,-32(fp)
 201b494:	e0bffb15 	stw	r2,-20(fp)
 201b498:	e0bffb17 	ldw	r2,-20(fp)
 201b49c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b4a0:	0005883a 	mov	r2,zero
}
 201b4a4:	e037883a 	mov	sp,fp
 201b4a8:	dfc00117 	ldw	ra,4(sp)
 201b4ac:	df000017 	ldw	fp,0(sp)
 201b4b0:	dec00204 	addi	sp,sp,8
 201b4b4:	f800283a 	ret

0201b4b8 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201b4b8:	defff704 	addi	sp,sp,-36
 201b4bc:	df000815 	stw	fp,32(sp)
 201b4c0:	df000804 	addi	fp,sp,32
 201b4c4:	e13ffe15 	stw	r4,-8(fp)
 201b4c8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b4cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b4d0:	e0bffe17 	ldw	r2,-8(fp)
 201b4d4:	1000021e 	bne	r2,zero,201b4e0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201b4d8:	00800104 	movi	r2,4
 201b4dc:	00003606 	br	201b5b8 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 201b4e0:	e0bfff17 	ldw	r2,-4(fp)
 201b4e4:	1000021e 	bne	r2,zero,201b4f0 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201b4e8:	00800244 	movi	r2,9
 201b4ec:	00003206 	br	201b5b8 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201b4f0:	e0bffe17 	ldw	r2,-8(fp)
 201b4f4:	10800003 	ldbu	r2,0(r2)
 201b4f8:	10803fcc 	andi	r2,r2,255
 201b4fc:	10800060 	cmpeqi	r2,r2,1
 201b500:	1000021e 	bne	r2,zero,201b50c <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201b504:	00800044 	movi	r2,1
 201b508:	00002b06 	br	201b5b8 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b50c:	0005303a 	rdctl	r2,status
 201b510:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b514:	e0fffd17 	ldw	r3,-12(fp)
 201b518:	00bfff84 	movi	r2,-2
 201b51c:	1884703a 	and	r2,r3,r2
 201b520:	1001703a 	wrctl	status,r2
  
  return context;
 201b524:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b528:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 201b52c:	e0bffe17 	ldw	r2,-8(fp)
 201b530:	10c00283 	ldbu	r3,10(r2)
 201b534:	e0bfff17 	ldw	r2,-4(fp)
 201b538:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 201b53c:	e0bffe17 	ldw	r2,-8(fp)
 201b540:	108002c4 	addi	r2,r2,11
 201b544:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 201b548:	e0bfff17 	ldw	r2,-4(fp)
 201b54c:	10800104 	addi	r2,r2,4
 201b550:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201b554:	e03ff805 	stb	zero,-32(fp)
 201b558:	00000b06 	br	201b588 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 201b55c:	e0bffa17 	ldw	r2,-24(fp)
 201b560:	10c00044 	addi	r3,r2,1
 201b564:	e0fffa15 	stw	r3,-24(fp)
 201b568:	e0fff917 	ldw	r3,-28(fp)
 201b56c:	19000044 	addi	r4,r3,1
 201b570:	e13ff915 	stw	r4,-28(fp)
 201b574:	18c00003 	ldbu	r3,0(r3)
 201b578:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201b57c:	e0bff803 	ldbu	r2,-32(fp)
 201b580:	10800044 	addi	r2,r2,1
 201b584:	e0bff805 	stb	r2,-32(fp)
 201b588:	e0bff803 	ldbu	r2,-32(fp)
 201b58c:	108000f0 	cmpltui	r2,r2,3
 201b590:	103ff21e 	bne	r2,zero,201b55c <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 201b594:	e0bffe17 	ldw	r2,-8(fp)
 201b598:	10c00117 	ldw	r3,4(r2)
 201b59c:	e0bfff17 	ldw	r2,-4(fp)
 201b5a0:	10c00015 	stw	r3,0(r2)
 201b5a4:	e0bffb17 	ldw	r2,-20(fp)
 201b5a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b5ac:	e0bffc17 	ldw	r2,-16(fp)
 201b5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b5b4:	0005883a 	mov	r2,zero
}
 201b5b8:	e037883a 	mov	sp,fp
 201b5bc:	df000017 	ldw	fp,0(sp)
 201b5c0:	dec00104 	addi	sp,sp,4
 201b5c4:	f800283a 	ret

0201b5c8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201b5c8:	defff404 	addi	sp,sp,-48
 201b5cc:	df000b15 	stw	fp,44(sp)
 201b5d0:	df000b04 	addi	fp,sp,44
 201b5d4:	e13ffc15 	stw	r4,-16(fp)
 201b5d8:	e17ffd15 	stw	r5,-12(fp)
 201b5dc:	e1bffe15 	stw	r6,-8(fp)
 201b5e0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b5e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b5e8:	e0bfff17 	ldw	r2,-4(fp)
 201b5ec:	1000021e 	bne	r2,zero,201b5f8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 201b5f0:	0005883a 	mov	r2,zero
 201b5f4:	00006506 	br	201b78c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201b5f8:	e0bffc17 	ldw	r2,-16(fp)
 201b5fc:	1000051e 	bne	r2,zero,201b614 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201b600:	e0bfff17 	ldw	r2,-4(fp)
 201b604:	00c01884 	movi	r3,98
 201b608:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b60c:	0005883a 	mov	r2,zero
 201b610:	00005e06 	br	201b78c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 201b614:	e0bffc17 	ldw	r2,-16(fp)
 201b618:	108000cc 	andi	r2,r2,3
 201b61c:	10000526 	beq	r2,zero,201b634 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201b620:	e0bfff17 	ldw	r2,-4(fp)
 201b624:	00c01884 	movi	r3,98
 201b628:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b62c:	0005883a 	mov	r2,zero
 201b630:	00005606 	br	201b78c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 201b634:	e0bffd17 	ldw	r2,-12(fp)
 201b638:	108000a8 	cmpgeui	r2,r2,2
 201b63c:	1000051e 	bne	r2,zero,201b654 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201b640:	e0bfff17 	ldw	r2,-4(fp)
 201b644:	00c016c4 	movi	r3,91
 201b648:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b64c:	0005883a 	mov	r2,zero
 201b650:	00004e06 	br	201b78c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 201b654:	e0bffe17 	ldw	r2,-8(fp)
 201b658:	10800128 	cmpgeui	r2,r2,4
 201b65c:	1000051e 	bne	r2,zero,201b674 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201b660:	e0bfff17 	ldw	r2,-4(fp)
 201b664:	00c01704 	movi	r3,92
 201b668:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b66c:	0005883a 	mov	r2,zero
 201b670:	00004606 	br	201b78c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b674:	0005303a 	rdctl	r2,status
 201b678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b67c:	e0fffb17 	ldw	r3,-20(fp)
 201b680:	00bfff84 	movi	r2,-2
 201b684:	1884703a 	and	r2,r3,r2
 201b688:	1001703a 	wrctl	status,r2
  
  return context;
 201b68c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b690:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 201b694:	d0a7b017 	ldw	r2,-24896(gp)
 201b698:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 201b69c:	d0a7b017 	ldw	r2,-24896(gp)
 201b6a0:	10000326 	beq	r2,zero,201b6b0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 201b6a4:	d0a7b017 	ldw	r2,-24896(gp)
 201b6a8:	10800117 	ldw	r2,4(r2)
 201b6ac:	d0a7b015 	stw	r2,-24896(gp)
 201b6b0:	e0bff817 	ldw	r2,-32(fp)
 201b6b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b6b8:	e0bff917 	ldw	r2,-28(fp)
 201b6bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 201b6c0:	e0bffa17 	ldw	r2,-24(fp)
 201b6c4:	1000051e 	bne	r2,zero,201b6dc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201b6c8:	e0bfff17 	ldw	r2,-4(fp)
 201b6cc:	00c01684 	movi	r3,90
 201b6d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b6d4:	0005883a 	mov	r2,zero
 201b6d8:	00002c06 	br	201b78c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 201b6dc:	e0bffc17 	ldw	r2,-16(fp)
 201b6e0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 201b6e4:	e0fffc17 	ldw	r3,-16(fp)
 201b6e8:	e0bffe17 	ldw	r2,-8(fp)
 201b6ec:	1885883a 	add	r2,r3,r2
 201b6f0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 201b6f4:	e03ff715 	stw	zero,-36(fp)
 201b6f8:	00000c06 	br	201b72c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 201b6fc:	e0bff617 	ldw	r2,-40(fp)
 201b700:	e0fff517 	ldw	r3,-44(fp)
 201b704:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201b708:	e0bff517 	ldw	r2,-44(fp)
 201b70c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 201b710:	e0fff517 	ldw	r3,-44(fp)
 201b714:	e0bffe17 	ldw	r2,-8(fp)
 201b718:	1885883a 	add	r2,r3,r2
 201b71c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201b720:	e0bff717 	ldw	r2,-36(fp)
 201b724:	10800044 	addi	r2,r2,1
 201b728:	e0bff715 	stw	r2,-36(fp)
 201b72c:	e0bffd17 	ldw	r2,-12(fp)
 201b730:	10bfffc4 	addi	r2,r2,-1
 201b734:	e0fff717 	ldw	r3,-36(fp)
 201b738:	18bff036 	bltu	r3,r2,201b6fc <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 201b73c:	e0bff617 	ldw	r2,-40(fp)
 201b740:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 201b744:	e0bffa17 	ldw	r2,-24(fp)
 201b748:	e0fffc17 	ldw	r3,-16(fp)
 201b74c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201b750:	e0bffa17 	ldw	r2,-24(fp)
 201b754:	e0fffc17 	ldw	r3,-16(fp)
 201b758:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 201b75c:	e0bffa17 	ldw	r2,-24(fp)
 201b760:	e0fffd17 	ldw	r3,-12(fp)
 201b764:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 201b768:	e0bffa17 	ldw	r2,-24(fp)
 201b76c:	e0fffd17 	ldw	r3,-12(fp)
 201b770:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 201b774:	e0bffa17 	ldw	r2,-24(fp)
 201b778:	e0fffe17 	ldw	r3,-8(fp)
 201b77c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201b780:	e0bfff17 	ldw	r2,-4(fp)
 201b784:	10000005 	stb	zero,0(r2)
    return (pmem);
 201b788:	e0bffa17 	ldw	r2,-24(fp)
}
 201b78c:	e037883a 	mov	sp,fp
 201b790:	df000017 	ldw	fp,0(sp)
 201b794:	dec00104 	addi	sp,sp,4
 201b798:	f800283a 	ret

0201b79c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 201b79c:	defff804 	addi	sp,sp,-32
 201b7a0:	df000715 	stw	fp,28(sp)
 201b7a4:	df000704 	addi	fp,sp,28
 201b7a8:	e13ffe15 	stw	r4,-8(fp)
 201b7ac:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b7b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b7b4:	e0bfff17 	ldw	r2,-4(fp)
 201b7b8:	1000021e 	bne	r2,zero,201b7c4 <OSMemGet+0x28>
        return ((void *)0);
 201b7bc:	0005883a 	mov	r2,zero
 201b7c0:	00002e06 	br	201b87c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 201b7c4:	e0bffe17 	ldw	r2,-8(fp)
 201b7c8:	1000051e 	bne	r2,zero,201b7e0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201b7cc:	e0bfff17 	ldw	r2,-4(fp)
 201b7d0:	00c01804 	movi	r3,96
 201b7d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b7d8:	0005883a 	mov	r2,zero
 201b7dc:	00002706 	br	201b87c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b7e0:	0005303a 	rdctl	r2,status
 201b7e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b7e8:	e0fffd17 	ldw	r3,-12(fp)
 201b7ec:	00bfff84 	movi	r2,-2
 201b7f0:	1884703a 	and	r2,r3,r2
 201b7f4:	1001703a 	wrctl	status,r2
  
  return context;
 201b7f8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b7fc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 201b800:	e0bffe17 	ldw	r2,-8(fp)
 201b804:	10800417 	ldw	r2,16(r2)
 201b808:	10001426 	beq	r2,zero,201b85c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 201b80c:	e0bffe17 	ldw	r2,-8(fp)
 201b810:	10800117 	ldw	r2,4(r2)
 201b814:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201b818:	e0bffb17 	ldw	r2,-20(fp)
 201b81c:	10c00017 	ldw	r3,0(r2)
 201b820:	e0bffe17 	ldw	r2,-8(fp)
 201b824:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201b828:	e0bffe17 	ldw	r2,-8(fp)
 201b82c:	10800417 	ldw	r2,16(r2)
 201b830:	10ffffc4 	addi	r3,r2,-1
 201b834:	e0bffe17 	ldw	r2,-8(fp)
 201b838:	10c00415 	stw	r3,16(r2)
 201b83c:	e0bff917 	ldw	r2,-28(fp)
 201b840:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b844:	e0bffa17 	ldw	r2,-24(fp)
 201b848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 201b84c:	e0bfff17 	ldw	r2,-4(fp)
 201b850:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 201b854:	e0bffb17 	ldw	r2,-20(fp)
 201b858:	00000806 	br	201b87c <OSMemGet+0xe0>
 201b85c:	e0bff917 	ldw	r2,-28(fp)
 201b860:	e0bffc15 	stw	r2,-16(fp)
 201b864:	e0bffc17 	ldw	r2,-16(fp)
 201b868:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 201b86c:	e0bfff17 	ldw	r2,-4(fp)
 201b870:	00c01744 	movi	r3,93
 201b874:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 201b878:	0005883a 	mov	r2,zero
}
 201b87c:	e037883a 	mov	sp,fp
 201b880:	df000017 	ldw	fp,0(sp)
 201b884:	dec00104 	addi	sp,sp,4
 201b888:	f800283a 	ret

0201b88c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201b88c:	defff704 	addi	sp,sp,-36
 201b890:	dfc00815 	stw	ra,32(sp)
 201b894:	df000715 	stw	fp,28(sp)
 201b898:	df000704 	addi	fp,sp,28
 201b89c:	e13ffd15 	stw	r4,-12(fp)
 201b8a0:	e17ffe15 	stw	r5,-8(fp)
 201b8a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b8a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201b8ac:	e0bfff17 	ldw	r2,-4(fp)
 201b8b0:	1000021e 	bne	r2,zero,201b8bc <OSMemNameGet+0x30>
        return (0);
 201b8b4:	0005883a 	mov	r2,zero
 201b8b8:	00002b06 	br	201b968 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201b8bc:	e0bffd17 	ldw	r2,-12(fp)
 201b8c0:	1000051e 	bne	r2,zero,201b8d8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201b8c4:	e0bfff17 	ldw	r2,-4(fp)
 201b8c8:	00c01804 	movi	r3,96
 201b8cc:	10c00005 	stb	r3,0(r2)
        return (0);
 201b8d0:	0005883a 	mov	r2,zero
 201b8d4:	00002406 	br	201b968 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201b8d8:	e0bffe17 	ldw	r2,-8(fp)
 201b8dc:	1000051e 	bne	r2,zero,201b8f4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201b8e0:	e0bfff17 	ldw	r2,-4(fp)
 201b8e4:	00c00304 	movi	r3,12
 201b8e8:	10c00005 	stb	r3,0(r2)
        return (0);
 201b8ec:	0005883a 	mov	r2,zero
 201b8f0:	00001d06 	br	201b968 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201b8f4:	d0a7b503 	ldbu	r2,-24876(gp)
 201b8f8:	10803fcc 	andi	r2,r2,255
 201b8fc:	10000526 	beq	r2,zero,201b914 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201b900:	e0bfff17 	ldw	r2,-4(fp)
 201b904:	00c00444 	movi	r3,17
 201b908:	10c00005 	stb	r3,0(r2)
        return (0);
 201b90c:	0005883a 	mov	r2,zero
 201b910:	00001506 	br	201b968 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b914:	0005303a 	rdctl	r2,status
 201b918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b91c:	e0fffb17 	ldw	r3,-20(fp)
 201b920:	00bfff84 	movi	r2,-2
 201b924:	1884703a 	and	r2,r3,r2
 201b928:	1001703a 	wrctl	status,r2
  
  return context;
 201b92c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201b930:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 201b934:	e0bffd17 	ldw	r2,-12(fp)
 201b938:	10800504 	addi	r2,r2,20
 201b93c:	100b883a 	mov	r5,r2
 201b940:	e13ffe17 	ldw	r4,-8(fp)
 201b944:	2018ccc0 	call	2018ccc <OS_StrCopy>
 201b948:	e0bffa05 	stb	r2,-24(fp)
 201b94c:	e0bff917 	ldw	r2,-28(fp)
 201b950:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b954:	e0bffc17 	ldw	r2,-16(fp)
 201b958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b95c:	e0bfff17 	ldw	r2,-4(fp)
 201b960:	10000005 	stb	zero,0(r2)
    return (len);
 201b964:	e0bffa03 	ldbu	r2,-24(fp)
}
 201b968:	e037883a 	mov	sp,fp
 201b96c:	dfc00117 	ldw	ra,4(sp)
 201b970:	df000017 	ldw	fp,0(sp)
 201b974:	dec00204 	addi	sp,sp,8
 201b978:	f800283a 	ret

0201b97c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201b97c:	defff604 	addi	sp,sp,-40
 201b980:	dfc00915 	stw	ra,36(sp)
 201b984:	df000815 	stw	fp,32(sp)
 201b988:	df000804 	addi	fp,sp,32
 201b98c:	e13ffd15 	stw	r4,-12(fp)
 201b990:	e17ffe15 	stw	r5,-8(fp)
 201b994:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b998:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201b99c:	e0bfff17 	ldw	r2,-4(fp)
 201b9a0:	10003526 	beq	r2,zero,201ba78 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201b9a4:	e0bffd17 	ldw	r2,-12(fp)
 201b9a8:	1000041e 	bne	r2,zero,201b9bc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201b9ac:	e0bfff17 	ldw	r2,-4(fp)
 201b9b0:	00c01804 	movi	r3,96
 201b9b4:	10c00005 	stb	r3,0(r2)
        return;
 201b9b8:	00003006 	br	201ba7c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201b9bc:	e0bffe17 	ldw	r2,-8(fp)
 201b9c0:	1000041e 	bne	r2,zero,201b9d4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201b9c4:	e0bfff17 	ldw	r2,-4(fp)
 201b9c8:	00c00304 	movi	r3,12
 201b9cc:	10c00005 	stb	r3,0(r2)
        return;
 201b9d0:	00002a06 	br	201ba7c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201b9d4:	d0a7b503 	ldbu	r2,-24876(gp)
 201b9d8:	10803fcc 	andi	r2,r2,255
 201b9dc:	10000426 	beq	r2,zero,201b9f0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 201b9e0:	e0bfff17 	ldw	r2,-4(fp)
 201b9e4:	00c00484 	movi	r3,18
 201b9e8:	10c00005 	stb	r3,0(r2)
        return;
 201b9ec:	00002306 	br	201ba7c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b9f0:	0005303a 	rdctl	r2,status
 201b9f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b9f8:	e0fffc17 	ldw	r3,-16(fp)
 201b9fc:	00bfff84 	movi	r2,-2
 201ba00:	1884703a 	and	r2,r3,r2
 201ba04:	1001703a 	wrctl	status,r2
  
  return context;
 201ba08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201ba0c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201ba10:	e13ffe17 	ldw	r4,-8(fp)
 201ba14:	2018d400 	call	2018d40 <OS_StrLen>
 201ba18:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 201ba1c:	e0bffa03 	ldbu	r2,-24(fp)
 201ba20:	10800830 	cmpltui	r2,r2,32
 201ba24:	1000081e 	bne	r2,zero,201ba48 <OSMemNameSet+0xcc>
 201ba28:	e0bff817 	ldw	r2,-32(fp)
 201ba2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba30:	e0bff917 	ldw	r2,-28(fp)
 201ba34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201ba38:	e0bfff17 	ldw	r2,-4(fp)
 201ba3c:	00c018c4 	movi	r3,99
 201ba40:	10c00005 	stb	r3,0(r2)
        return;
 201ba44:	00000d06 	br	201ba7c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201ba48:	e0bffd17 	ldw	r2,-12(fp)
 201ba4c:	10800504 	addi	r2,r2,20
 201ba50:	e17ffe17 	ldw	r5,-8(fp)
 201ba54:	1009883a 	mov	r4,r2
 201ba58:	2018ccc0 	call	2018ccc <OS_StrCopy>
 201ba5c:	e0bff817 	ldw	r2,-32(fp)
 201ba60:	e0bffb15 	stw	r2,-20(fp)
 201ba64:	e0bffb17 	ldw	r2,-20(fp)
 201ba68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201ba6c:	e0bfff17 	ldw	r2,-4(fp)
 201ba70:	10000005 	stb	zero,0(r2)
 201ba74:	00000106 	br	201ba7c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201ba78:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201ba7c:	e037883a 	mov	sp,fp
 201ba80:	dfc00117 	ldw	ra,4(sp)
 201ba84:	df000017 	ldw	fp,0(sp)
 201ba88:	dec00204 	addi	sp,sp,8
 201ba8c:	f800283a 	ret

0201ba90 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201ba90:	defff904 	addi	sp,sp,-28
 201ba94:	df000615 	stw	fp,24(sp)
 201ba98:	df000604 	addi	fp,sp,24
 201ba9c:	e13ffe15 	stw	r4,-8(fp)
 201baa0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201baa4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201baa8:	e0bffe17 	ldw	r2,-8(fp)
 201baac:	1000021e 	bne	r2,zero,201bab8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201bab0:	00801804 	movi	r2,96
 201bab4:	00002806 	br	201bb58 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201bab8:	e0bfff17 	ldw	r2,-4(fp)
 201babc:	1000021e 	bne	r2,zero,201bac8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 201bac0:	008017c4 	movi	r2,95
 201bac4:	00002406 	br	201bb58 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bac8:	0005303a 	rdctl	r2,status
 201bacc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bad0:	e0fffd17 	ldw	r3,-12(fp)
 201bad4:	00bfff84 	movi	r2,-2
 201bad8:	1884703a 	and	r2,r3,r2
 201badc:	1001703a 	wrctl	status,r2
  
  return context;
 201bae0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bae4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201bae8:	e0bffe17 	ldw	r2,-8(fp)
 201baec:	10c00417 	ldw	r3,16(r2)
 201baf0:	e0bffe17 	ldw	r2,-8(fp)
 201baf4:	10800317 	ldw	r2,12(r2)
 201baf8:	18800636 	bltu	r3,r2,201bb14 <OSMemPut+0x84>
 201bafc:	e0bffa17 	ldw	r2,-24(fp)
 201bb00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bb04:	e0bffb17 	ldw	r2,-20(fp)
 201bb08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 201bb0c:	00801784 	movi	r2,94
 201bb10:	00001106 	br	201bb58 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 201bb14:	e0bffe17 	ldw	r2,-8(fp)
 201bb18:	10c00117 	ldw	r3,4(r2)
 201bb1c:	e0bfff17 	ldw	r2,-4(fp)
 201bb20:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 201bb24:	e0bffe17 	ldw	r2,-8(fp)
 201bb28:	e0ffff17 	ldw	r3,-4(fp)
 201bb2c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201bb30:	e0bffe17 	ldw	r2,-8(fp)
 201bb34:	10800417 	ldw	r2,16(r2)
 201bb38:	10c00044 	addi	r3,r2,1
 201bb3c:	e0bffe17 	ldw	r2,-8(fp)
 201bb40:	10c00415 	stw	r3,16(r2)
 201bb44:	e0bffa17 	ldw	r2,-24(fp)
 201bb48:	e0bffc15 	stw	r2,-16(fp)
 201bb4c:	e0bffc17 	ldw	r2,-16(fp)
 201bb50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 201bb54:	0005883a 	mov	r2,zero
}
 201bb58:	e037883a 	mov	sp,fp
 201bb5c:	df000017 	ldw	fp,0(sp)
 201bb60:	dec00104 	addi	sp,sp,4
 201bb64:	f800283a 	ret

0201bb68 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 201bb68:	defffa04 	addi	sp,sp,-24
 201bb6c:	df000515 	stw	fp,20(sp)
 201bb70:	df000504 	addi	fp,sp,20
 201bb74:	e13ffe15 	stw	r4,-8(fp)
 201bb78:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bb7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201bb80:	e0bffe17 	ldw	r2,-8(fp)
 201bb84:	1000021e 	bne	r2,zero,201bb90 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201bb88:	00801804 	movi	r2,96
 201bb8c:	00002c06 	br	201bc40 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201bb90:	e0bfff17 	ldw	r2,-4(fp)
 201bb94:	1000021e 	bne	r2,zero,201bba0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201bb98:	00801844 	movi	r2,97
 201bb9c:	00002806 	br	201bc40 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bba0:	0005303a 	rdctl	r2,status
 201bba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bba8:	e0fffc17 	ldw	r3,-16(fp)
 201bbac:	00bfff84 	movi	r2,-2
 201bbb0:	1884703a 	and	r2,r3,r2
 201bbb4:	1001703a 	wrctl	status,r2
  
  return context;
 201bbb8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bbbc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 201bbc0:	e0bffe17 	ldw	r2,-8(fp)
 201bbc4:	10c00017 	ldw	r3,0(r2)
 201bbc8:	e0bfff17 	ldw	r2,-4(fp)
 201bbcc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 201bbd0:	e0bffe17 	ldw	r2,-8(fp)
 201bbd4:	10c00117 	ldw	r3,4(r2)
 201bbd8:	e0bfff17 	ldw	r2,-4(fp)
 201bbdc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 201bbe0:	e0bffe17 	ldw	r2,-8(fp)
 201bbe4:	10c00217 	ldw	r3,8(r2)
 201bbe8:	e0bfff17 	ldw	r2,-4(fp)
 201bbec:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 201bbf0:	e0bffe17 	ldw	r2,-8(fp)
 201bbf4:	10c00317 	ldw	r3,12(r2)
 201bbf8:	e0bfff17 	ldw	r2,-4(fp)
 201bbfc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 201bc00:	e0bffe17 	ldw	r2,-8(fp)
 201bc04:	10c00417 	ldw	r3,16(r2)
 201bc08:	e0bfff17 	ldw	r2,-4(fp)
 201bc0c:	10c00415 	stw	r3,16(r2)
 201bc10:	e0bffb17 	ldw	r2,-20(fp)
 201bc14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bc18:	e0bffd17 	ldw	r2,-12(fp)
 201bc1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201bc20:	e0bfff17 	ldw	r2,-4(fp)
 201bc24:	10c00317 	ldw	r3,12(r2)
 201bc28:	e0bfff17 	ldw	r2,-4(fp)
 201bc2c:	10800417 	ldw	r2,16(r2)
 201bc30:	1887c83a 	sub	r3,r3,r2
 201bc34:	e0bfff17 	ldw	r2,-4(fp)
 201bc38:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 201bc3c:	0005883a 	mov	r2,zero
}
 201bc40:	e037883a 	mov	sp,fp
 201bc44:	df000017 	ldw	fp,0(sp)
 201bc48:	dec00104 	addi	sp,sp,4
 201bc4c:	f800283a 	ret

0201bc50 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201bc50:	defffc04 	addi	sp,sp,-16
 201bc54:	dfc00315 	stw	ra,12(sp)
 201bc58:	df000215 	stw	fp,8(sp)
 201bc5c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201bc60:	01430c04 	movi	r5,3120
 201bc64:	010080f4 	movhi	r4,515
 201bc68:	2139b804 	addi	r4,r4,-6432
 201bc6c:	2018acc0 	call	2018acc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201bc70:	008080f4 	movhi	r2,515
 201bc74:	10b9b804 	addi	r2,r2,-6432
 201bc78:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201bc7c:	e03fff0d 	sth	zero,-4(fp)
 201bc80:	00001306 	br	201bcd0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 201bc84:	e0bfff0b 	ldhu	r2,-4(fp)
 201bc88:	10800044 	addi	r2,r2,1
 201bc8c:	10c00d24 	muli	r3,r2,52
 201bc90:	008080f4 	movhi	r2,515
 201bc94:	10b9b804 	addi	r2,r2,-6432
 201bc98:	1887883a 	add	r3,r3,r2
 201bc9c:	e0bffe17 	ldw	r2,-8(fp)
 201bca0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 201bca4:	e0bffe17 	ldw	r2,-8(fp)
 201bca8:	00c00fc4 	movi	r3,63
 201bcac:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201bcb0:	e0bffe17 	ldw	r2,-8(fp)
 201bcb4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201bcb8:	e0bffe17 	ldw	r2,-8(fp)
 201bcbc:	10800d04 	addi	r2,r2,52
 201bcc0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201bcc4:	e0bfff0b 	ldhu	r2,-4(fp)
 201bcc8:	10800044 	addi	r2,r2,1
 201bccc:	e0bfff0d 	sth	r2,-4(fp)
 201bcd0:	e0bfff0b 	ldhu	r2,-4(fp)
 201bcd4:	10800ef0 	cmpltui	r2,r2,59
 201bcd8:	103fea1e 	bne	r2,zero,201bc84 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 201bcdc:	e0bffe17 	ldw	r2,-8(fp)
 201bce0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 201bce4:	e0bffe17 	ldw	r2,-8(fp)
 201bce8:	00c00fc4 	movi	r3,63
 201bcec:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 201bcf0:	e0bffe17 	ldw	r2,-8(fp)
 201bcf4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201bcf8:	008080f4 	movhi	r2,515
 201bcfc:	10b9b804 	addi	r2,r2,-6432
 201bd00:	d0a7b015 	stw	r2,-24896(gp)
#endif
}
 201bd04:	0001883a 	nop
 201bd08:	e037883a 	mov	sp,fp
 201bd0c:	dfc00117 	ldw	ra,4(sp)
 201bd10:	df000017 	ldw	fp,0(sp)
 201bd14:	dec00204 	addi	sp,sp,8
 201bd18:	f800283a 	ret

0201bd1c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 201bd1c:	defff804 	addi	sp,sp,-32
 201bd20:	df000715 	stw	fp,28(sp)
 201bd24:	df000704 	addi	fp,sp,28
 201bd28:	e13ffe15 	stw	r4,-8(fp)
 201bd2c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bd30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201bd34:	e0bfff17 	ldw	r2,-4(fp)
 201bd38:	1000021e 	bne	r2,zero,201bd44 <OSQAccept+0x28>
        return ((void *)0);
 201bd3c:	0005883a 	mov	r2,zero
 201bd40:	00004206 	br	201be4c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201bd44:	e0bffe17 	ldw	r2,-8(fp)
 201bd48:	1000051e 	bne	r2,zero,201bd60 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201bd4c:	e0bfff17 	ldw	r2,-4(fp)
 201bd50:	00c00104 	movi	r3,4
 201bd54:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bd58:	0005883a 	mov	r2,zero
 201bd5c:	00003b06 	br	201be4c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201bd60:	e0bffe17 	ldw	r2,-8(fp)
 201bd64:	10800003 	ldbu	r2,0(r2)
 201bd68:	10803fcc 	andi	r2,r2,255
 201bd6c:	108000a0 	cmpeqi	r2,r2,2
 201bd70:	1000051e 	bne	r2,zero,201bd88 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201bd74:	e0bfff17 	ldw	r2,-4(fp)
 201bd78:	00c00044 	movi	r3,1
 201bd7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bd80:	0005883a 	mov	r2,zero
 201bd84:	00003106 	br	201be4c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bd88:	0005303a 	rdctl	r2,status
 201bd8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bd90:	e0fffd17 	ldw	r3,-12(fp)
 201bd94:	00bfff84 	movi	r2,-2
 201bd98:	1884703a 	and	r2,r3,r2
 201bd9c:	1001703a 	wrctl	status,r2
  
  return context;
 201bda0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201bda4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201bda8:	e0bffe17 	ldw	r2,-8(fp)
 201bdac:	10800117 	ldw	r2,4(r2)
 201bdb0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201bdb4:	e0bffc17 	ldw	r2,-16(fp)
 201bdb8:	1080058b 	ldhu	r2,22(r2)
 201bdbc:	10bfffcc 	andi	r2,r2,65535
 201bdc0:	10001926 	beq	r2,zero,201be28 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201bdc4:	e0bffc17 	ldw	r2,-16(fp)
 201bdc8:	10800417 	ldw	r2,16(r2)
 201bdcc:	11000104 	addi	r4,r2,4
 201bdd0:	e0fffc17 	ldw	r3,-16(fp)
 201bdd4:	19000415 	stw	r4,16(r3)
 201bdd8:	10800017 	ldw	r2,0(r2)
 201bddc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201bde0:	e0bffc17 	ldw	r2,-16(fp)
 201bde4:	1080058b 	ldhu	r2,22(r2)
 201bde8:	10bfffc4 	addi	r2,r2,-1
 201bdec:	1007883a 	mov	r3,r2
 201bdf0:	e0bffc17 	ldw	r2,-16(fp)
 201bdf4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201bdf8:	e0bffc17 	ldw	r2,-16(fp)
 201bdfc:	10c00417 	ldw	r3,16(r2)
 201be00:	e0bffc17 	ldw	r2,-16(fp)
 201be04:	10800217 	ldw	r2,8(r2)
 201be08:	1880041e 	bne	r3,r2,201be1c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 201be0c:	e0bffc17 	ldw	r2,-16(fp)
 201be10:	10c00117 	ldw	r3,4(r2)
 201be14:	e0bffc17 	ldw	r2,-16(fp)
 201be18:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 201be1c:	e0bfff17 	ldw	r2,-4(fp)
 201be20:	10000005 	stb	zero,0(r2)
 201be24:	00000406 	br	201be38 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201be28:	e0bfff17 	ldw	r2,-4(fp)
 201be2c:	00c007c4 	movi	r3,31
 201be30:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 201be34:	e03ff915 	stw	zero,-28(fp)
 201be38:	e0bffa17 	ldw	r2,-24(fp)
 201be3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201be40:	e0bffb17 	ldw	r2,-20(fp)
 201be44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 201be48:	e0bff917 	ldw	r2,-28(fp)
}
 201be4c:	e037883a 	mov	sp,fp
 201be50:	df000017 	ldw	fp,0(sp)
 201be54:	dec00104 	addi	sp,sp,4
 201be58:	f800283a 	ret

0201be5c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 201be5c:	defff404 	addi	sp,sp,-48
 201be60:	dfc00b15 	stw	ra,44(sp)
 201be64:	df000a15 	stw	fp,40(sp)
 201be68:	df000a04 	addi	fp,sp,40
 201be6c:	e13ffe15 	stw	r4,-8(fp)
 201be70:	2805883a 	mov	r2,r5
 201be74:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201be78:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201be7c:	d0a7b503 	ldbu	r2,-24876(gp)
 201be80:	10803fcc 	andi	r2,r2,255
 201be84:	10000226 	beq	r2,zero,201be90 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201be88:	0005883a 	mov	r2,zero
 201be8c:	00005906 	br	201bff4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201be90:	0005303a 	rdctl	r2,status
 201be94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201be98:	e0fffd17 	ldw	r3,-12(fp)
 201be9c:	00bfff84 	movi	r2,-2
 201bea0:	1884703a 	and	r2,r3,r2
 201bea4:	1001703a 	wrctl	status,r2
  
  return context;
 201bea8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201beac:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201beb0:	d0a7b417 	ldw	r2,-24880(gp)
 201beb4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201beb8:	d0a7b417 	ldw	r2,-24880(gp)
 201bebc:	10000326 	beq	r2,zero,201becc <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201bec0:	d0a7b417 	ldw	r2,-24880(gp)
 201bec4:	10800117 	ldw	r2,4(r2)
 201bec8:	d0a7b415 	stw	r2,-24880(gp)
 201becc:	e0bff717 	ldw	r2,-36(fp)
 201bed0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bed4:	e0bff817 	ldw	r2,-32(fp)
 201bed8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 201bedc:	e0bff617 	ldw	r2,-40(fp)
 201bee0:	10004326 	beq	r2,zero,201bff0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bee4:	0005303a 	rdctl	r2,status
 201bee8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201beec:	e0fff917 	ldw	r3,-28(fp)
 201bef0:	00bfff84 	movi	r2,-2
 201bef4:	1884703a 	and	r2,r3,r2
 201bef8:	1001703a 	wrctl	status,r2
  
  return context;
 201befc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 201bf00:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 201bf04:	d0a7b217 	ldw	r2,-24888(gp)
 201bf08:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 201bf0c:	e0bffb17 	ldw	r2,-20(fp)
 201bf10:	10002d26 	beq	r2,zero,201bfc8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 201bf14:	d0a7b217 	ldw	r2,-24888(gp)
 201bf18:	10800017 	ldw	r2,0(r2)
 201bf1c:	d0a7b215 	stw	r2,-24888(gp)
 201bf20:	e0bff717 	ldw	r2,-36(fp)
 201bf24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bf28:	e0bffa17 	ldw	r2,-24(fp)
 201bf2c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 201bf30:	e0bffb17 	ldw	r2,-20(fp)
 201bf34:	e0fffe17 	ldw	r3,-8(fp)
 201bf38:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 201bf3c:	e0bfff0b 	ldhu	r2,-4(fp)
 201bf40:	1085883a 	add	r2,r2,r2
 201bf44:	1085883a 	add	r2,r2,r2
 201bf48:	1007883a 	mov	r3,r2
 201bf4c:	e0bffe17 	ldw	r2,-8(fp)
 201bf50:	10c7883a 	add	r3,r2,r3
 201bf54:	e0bffb17 	ldw	r2,-20(fp)
 201bf58:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 201bf5c:	e0bffb17 	ldw	r2,-20(fp)
 201bf60:	e0fffe17 	ldw	r3,-8(fp)
 201bf64:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 201bf68:	e0bffb17 	ldw	r2,-20(fp)
 201bf6c:	e0fffe17 	ldw	r3,-8(fp)
 201bf70:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 201bf74:	e0bffb17 	ldw	r2,-20(fp)
 201bf78:	e0ffff0b 	ldhu	r3,-4(fp)
 201bf7c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201bf80:	e0bffb17 	ldw	r2,-20(fp)
 201bf84:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 201bf88:	e0bff617 	ldw	r2,-40(fp)
 201bf8c:	00c00084 	movi	r3,2
 201bf90:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 201bf94:	e0bff617 	ldw	r2,-40(fp)
 201bf98:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 201bf9c:	e0bff617 	ldw	r2,-40(fp)
 201bfa0:	e0fffb17 	ldw	r3,-20(fp)
 201bfa4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 201bfa8:	e0bff617 	ldw	r2,-40(fp)
 201bfac:	00c00fc4 	movi	r3,63
 201bfb0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201bfb4:	e0bff617 	ldw	r2,-40(fp)
 201bfb8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 201bfbc:	e13ff617 	ldw	r4,-40(fp)
 201bfc0:	20186ec0 	call	20186ec <OS_EventWaitListInit>
 201bfc4:	00000a06 	br	201bff0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 201bfc8:	d0e7b417 	ldw	r3,-24880(gp)
 201bfcc:	e0bff617 	ldw	r2,-40(fp)
 201bfd0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 201bfd4:	e0bff617 	ldw	r2,-40(fp)
 201bfd8:	d0a7b415 	stw	r2,-24880(gp)
 201bfdc:	e0bff717 	ldw	r2,-36(fp)
 201bfe0:	e0bffc15 	stw	r2,-16(fp)
 201bfe4:	e0bffc17 	ldw	r2,-16(fp)
 201bfe8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 201bfec:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 201bff0:	e0bff617 	ldw	r2,-40(fp)
}
 201bff4:	e037883a 	mov	sp,fp
 201bff8:	dfc00117 	ldw	ra,4(sp)
 201bffc:	df000017 	ldw	fp,0(sp)
 201c000:	dec00204 	addi	sp,sp,8
 201c004:	f800283a 	ret

0201c008 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201c008:	defff204 	addi	sp,sp,-56
 201c00c:	dfc00d15 	stw	ra,52(sp)
 201c010:	df000c15 	stw	fp,48(sp)
 201c014:	df000c04 	addi	fp,sp,48
 201c018:	e13ffd15 	stw	r4,-12(fp)
 201c01c:	2805883a 	mov	r2,r5
 201c020:	e1bfff15 	stw	r6,-4(fp)
 201c024:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c028:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201c02c:	e0bfff17 	ldw	r2,-4(fp)
 201c030:	1000021e 	bne	r2,zero,201c03c <OSQDel+0x34>
        return (pevent);
 201c034:	e0bffd17 	ldw	r2,-12(fp)
 201c038:	00008e06 	br	201c274 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201c03c:	e0bffd17 	ldw	r2,-12(fp)
 201c040:	1000051e 	bne	r2,zero,201c058 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c044:	e0bfff17 	ldw	r2,-4(fp)
 201c048:	00c00104 	movi	r3,4
 201c04c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c050:	e0bffd17 	ldw	r2,-12(fp)
 201c054:	00008706 	br	201c274 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201c058:	e0bffd17 	ldw	r2,-12(fp)
 201c05c:	10800003 	ldbu	r2,0(r2)
 201c060:	10803fcc 	andi	r2,r2,255
 201c064:	108000a0 	cmpeqi	r2,r2,2
 201c068:	1000051e 	bne	r2,zero,201c080 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c06c:	e0bfff17 	ldw	r2,-4(fp)
 201c070:	00c00044 	movi	r3,1
 201c074:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c078:	e0bffd17 	ldw	r2,-12(fp)
 201c07c:	00007d06 	br	201c274 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201c080:	d0a7b503 	ldbu	r2,-24876(gp)
 201c084:	10803fcc 	andi	r2,r2,255
 201c088:	10000526 	beq	r2,zero,201c0a0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201c08c:	e0bfff17 	ldw	r2,-4(fp)
 201c090:	00c003c4 	movi	r3,15
 201c094:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c098:	e0bffd17 	ldw	r2,-12(fp)
 201c09c:	00007506 	br	201c274 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c0a0:	0005303a 	rdctl	r2,status
 201c0a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c0a8:	e0fffc17 	ldw	r3,-16(fp)
 201c0ac:	00bfff84 	movi	r2,-2
 201c0b0:	1884703a 	and	r2,r3,r2
 201c0b4:	1001703a 	wrctl	status,r2
  
  return context;
 201c0b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c0bc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 201c0c0:	e0bffd17 	ldw	r2,-12(fp)
 201c0c4:	10800283 	ldbu	r2,10(r2)
 201c0c8:	10803fcc 	andi	r2,r2,255
 201c0cc:	10000326 	beq	r2,zero,201c0dc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201c0d0:	00800044 	movi	r2,1
 201c0d4:	e0bff405 	stb	r2,-48(fp)
 201c0d8:	00000106 	br	201c0e0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201c0dc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 201c0e0:	e0bffe03 	ldbu	r2,-8(fp)
 201c0e4:	10000326 	beq	r2,zero,201c0f4 <OSQDel+0xec>
 201c0e8:	10800060 	cmpeqi	r2,r2,1
 201c0ec:	1000301e 	bne	r2,zero,201c1b0 <OSQDel+0x1a8>
 201c0f0:	00005506 	br	201c248 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 201c0f4:	e0bff403 	ldbu	r2,-48(fp)
 201c0f8:	10001e1e 	bne	r2,zero,201c174 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201c0fc:	e0bffd17 	ldw	r2,-12(fp)
 201c100:	00c00fc4 	movi	r3,63
 201c104:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201c108:	e0bffd17 	ldw	r2,-12(fp)
 201c10c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 201c110:	e0bffd17 	ldw	r2,-12(fp)
 201c114:	10800117 	ldw	r2,4(r2)
 201c118:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 201c11c:	d0e7b217 	ldw	r3,-24888(gp)
 201c120:	e0bff817 	ldw	r2,-32(fp)
 201c124:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 201c128:	e0bff817 	ldw	r2,-32(fp)
 201c12c:	d0a7b215 	stw	r2,-24888(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c130:	e0bffd17 	ldw	r2,-12(fp)
 201c134:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201c138:	d0e7b417 	ldw	r3,-24880(gp)
 201c13c:	e0bffd17 	ldw	r2,-12(fp)
 201c140:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201c144:	e0bffd17 	ldw	r2,-12(fp)
 201c148:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201c14c:	e0bffd17 	ldw	r2,-12(fp)
 201c150:	d0a7b415 	stw	r2,-24880(gp)
 201c154:	e0bff617 	ldw	r2,-40(fp)
 201c158:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c15c:	e0bff717 	ldw	r2,-36(fp)
 201c160:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201c164:	e0bfff17 	ldw	r2,-4(fp)
 201c168:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 201c16c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201c170:	00003f06 	br	201c270 <OSQDel+0x268>
 201c174:	e0bff617 	ldw	r2,-40(fp)
 201c178:	e0bff915 	stw	r2,-28(fp)
 201c17c:	e0bff917 	ldw	r2,-28(fp)
 201c180:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201c184:	e0bfff17 	ldw	r2,-4(fp)
 201c188:	00c01244 	movi	r3,73
 201c18c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201c190:	e0bffd17 	ldw	r2,-12(fp)
 201c194:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 201c198:	00003506 	br	201c270 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 201c19c:	000f883a 	mov	r7,zero
 201c1a0:	01800104 	movi	r6,4
 201c1a4:	000b883a 	mov	r5,zero
 201c1a8:	e13ffd17 	ldw	r4,-12(fp)
 201c1ac:	201813c0 	call	201813c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 201c1b0:	e0bffd17 	ldw	r2,-12(fp)
 201c1b4:	10800283 	ldbu	r2,10(r2)
 201c1b8:	10803fcc 	andi	r2,r2,255
 201c1bc:	103ff71e 	bne	r2,zero,201c19c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201c1c0:	e0bffd17 	ldw	r2,-12(fp)
 201c1c4:	00c00fc4 	movi	r3,63
 201c1c8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201c1cc:	e0bffd17 	ldw	r2,-12(fp)
 201c1d0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 201c1d4:	e0bffd17 	ldw	r2,-12(fp)
 201c1d8:	10800117 	ldw	r2,4(r2)
 201c1dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 201c1e0:	d0e7b217 	ldw	r3,-24888(gp)
 201c1e4:	e0bff817 	ldw	r2,-32(fp)
 201c1e8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 201c1ec:	e0bff817 	ldw	r2,-32(fp)
 201c1f0:	d0a7b215 	stw	r2,-24888(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c1f4:	e0bffd17 	ldw	r2,-12(fp)
 201c1f8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201c1fc:	d0e7b417 	ldw	r3,-24880(gp)
 201c200:	e0bffd17 	ldw	r2,-12(fp)
 201c204:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201c208:	e0bffd17 	ldw	r2,-12(fp)
 201c20c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201c210:	e0bffd17 	ldw	r2,-12(fp)
 201c214:	d0a7b415 	stw	r2,-24880(gp)
 201c218:	e0bff617 	ldw	r2,-40(fp)
 201c21c:	e0bffa15 	stw	r2,-24(fp)
 201c220:	e0bffa17 	ldw	r2,-24(fp)
 201c224:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201c228:	e0bff403 	ldbu	r2,-48(fp)
 201c22c:	10800058 	cmpnei	r2,r2,1
 201c230:	1000011e 	bne	r2,zero,201c238 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201c234:	2018b880 	call	2018b88 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201c238:	e0bfff17 	ldw	r2,-4(fp)
 201c23c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201c240:	e03ff515 	stw	zero,-44(fp)
             break;
 201c244:	00000a06 	br	201c270 <OSQDel+0x268>
 201c248:	e0bff617 	ldw	r2,-40(fp)
 201c24c:	e0bffb15 	stw	r2,-20(fp)
 201c250:	e0bffb17 	ldw	r2,-20(fp)
 201c254:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201c258:	e0bfff17 	ldw	r2,-4(fp)
 201c25c:	00c001c4 	movi	r3,7
 201c260:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201c264:	e0bffd17 	ldw	r2,-12(fp)
 201c268:	e0bff515 	stw	r2,-44(fp)
             break;
 201c26c:	0001883a 	nop
    }
    return (pevent_return);
 201c270:	e0bff517 	ldw	r2,-44(fp)
}
 201c274:	e037883a 	mov	sp,fp
 201c278:	dfc00117 	ldw	ra,4(sp)
 201c27c:	df000017 	ldw	fp,0(sp)
 201c280:	dec00204 	addi	sp,sp,8
 201c284:	f800283a 	ret

0201c288 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 201c288:	defffa04 	addi	sp,sp,-24
 201c28c:	df000515 	stw	fp,20(sp)
 201c290:	df000504 	addi	fp,sp,20
 201c294:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c298:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c29c:	e0bfff17 	ldw	r2,-4(fp)
 201c2a0:	1000021e 	bne	r2,zero,201c2ac <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 201c2a4:	00800104 	movi	r2,4
 201c2a8:	00002106 	br	201c330 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201c2ac:	e0bfff17 	ldw	r2,-4(fp)
 201c2b0:	10800003 	ldbu	r2,0(r2)
 201c2b4:	10803fcc 	andi	r2,r2,255
 201c2b8:	108000a0 	cmpeqi	r2,r2,2
 201c2bc:	1000021e 	bne	r2,zero,201c2c8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 201c2c0:	00800044 	movi	r2,1
 201c2c4:	00001a06 	br	201c330 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c2c8:	0005303a 	rdctl	r2,status
 201c2cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c2d0:	e0fffd17 	ldw	r3,-12(fp)
 201c2d4:	00bfff84 	movi	r2,-2
 201c2d8:	1884703a 	and	r2,r3,r2
 201c2dc:	1001703a 	wrctl	status,r2
  
  return context;
 201c2e0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c2e4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 201c2e8:	e0bfff17 	ldw	r2,-4(fp)
 201c2ec:	10800117 	ldw	r2,4(r2)
 201c2f0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 201c2f4:	e0bffc17 	ldw	r2,-16(fp)
 201c2f8:	10c00117 	ldw	r3,4(r2)
 201c2fc:	e0bffc17 	ldw	r2,-16(fp)
 201c300:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 201c304:	e0bffc17 	ldw	r2,-16(fp)
 201c308:	10c00117 	ldw	r3,4(r2)
 201c30c:	e0bffc17 	ldw	r2,-16(fp)
 201c310:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 201c314:	e0bffc17 	ldw	r2,-16(fp)
 201c318:	1000058d 	sth	zero,22(r2)
 201c31c:	e0bffb17 	ldw	r2,-20(fp)
 201c320:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c324:	e0bffe17 	ldw	r2,-8(fp)
 201c328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c32c:	0005883a 	mov	r2,zero
}
 201c330:	e037883a 	mov	sp,fp
 201c334:	df000017 	ldw	fp,0(sp)
 201c338:	dec00104 	addi	sp,sp,4
 201c33c:	f800283a 	ret

0201c340 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201c340:	defff304 	addi	sp,sp,-52
 201c344:	dfc00c15 	stw	ra,48(sp)
 201c348:	df000b15 	stw	fp,44(sp)
 201c34c:	df000b04 	addi	fp,sp,44
 201c350:	e13ffd15 	stw	r4,-12(fp)
 201c354:	2805883a 	mov	r2,r5
 201c358:	e1bfff15 	stw	r6,-4(fp)
 201c35c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c360:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201c364:	e0bfff17 	ldw	r2,-4(fp)
 201c368:	1000021e 	bne	r2,zero,201c374 <OSQPend+0x34>
        return ((void *)0);
 201c36c:	0005883a 	mov	r2,zero
 201c370:	00009106 	br	201c5b8 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201c374:	e0bffd17 	ldw	r2,-12(fp)
 201c378:	1000051e 	bne	r2,zero,201c390 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c37c:	e0bfff17 	ldw	r2,-4(fp)
 201c380:	00c00104 	movi	r3,4
 201c384:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c388:	0005883a 	mov	r2,zero
 201c38c:	00008a06 	br	201c5b8 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201c390:	e0bffd17 	ldw	r2,-12(fp)
 201c394:	10800003 	ldbu	r2,0(r2)
 201c398:	10803fcc 	andi	r2,r2,255
 201c39c:	108000a0 	cmpeqi	r2,r2,2
 201c3a0:	1000051e 	bne	r2,zero,201c3b8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c3a4:	e0bfff17 	ldw	r2,-4(fp)
 201c3a8:	00c00044 	movi	r3,1
 201c3ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c3b0:	0005883a 	mov	r2,zero
 201c3b4:	00008006 	br	201c5b8 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201c3b8:	d0a7b503 	ldbu	r2,-24876(gp)
 201c3bc:	10803fcc 	andi	r2,r2,255
 201c3c0:	10000526 	beq	r2,zero,201c3d8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 201c3c4:	e0bfff17 	ldw	r2,-4(fp)
 201c3c8:	00c00084 	movi	r3,2
 201c3cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c3d0:	0005883a 	mov	r2,zero
 201c3d4:	00007806 	br	201c5b8 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 201c3d8:	d0a7a703 	ldbu	r2,-24932(gp)
 201c3dc:	10803fcc 	andi	r2,r2,255
 201c3e0:	10000526 	beq	r2,zero,201c3f8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 201c3e4:	e0bfff17 	ldw	r2,-4(fp)
 201c3e8:	00c00344 	movi	r3,13
 201c3ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c3f0:	0005883a 	mov	r2,zero
 201c3f4:	00007006 	br	201c5b8 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c3f8:	0005303a 	rdctl	r2,status
 201c3fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c400:	e0fffc17 	ldw	r3,-16(fp)
 201c404:	00bfff84 	movi	r2,-2
 201c408:	1884703a 	and	r2,r3,r2
 201c40c:	1001703a 	wrctl	status,r2
  
  return context;
 201c410:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c414:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201c418:	e0bffd17 	ldw	r2,-12(fp)
 201c41c:	10800117 	ldw	r2,4(r2)
 201c420:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201c424:	e0bff817 	ldw	r2,-32(fp)
 201c428:	1080058b 	ldhu	r2,22(r2)
 201c42c:	10bfffcc 	andi	r2,r2,65535
 201c430:	10001e26 	beq	r2,zero,201c4ac <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201c434:	e0bff817 	ldw	r2,-32(fp)
 201c438:	10800417 	ldw	r2,16(r2)
 201c43c:	11000104 	addi	r4,r2,4
 201c440:	e0fff817 	ldw	r3,-32(fp)
 201c444:	19000415 	stw	r4,16(r3)
 201c448:	10800017 	ldw	r2,0(r2)
 201c44c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201c450:	e0bff817 	ldw	r2,-32(fp)
 201c454:	1080058b 	ldhu	r2,22(r2)
 201c458:	10bfffc4 	addi	r2,r2,-1
 201c45c:	1007883a 	mov	r3,r2
 201c460:	e0bff817 	ldw	r2,-32(fp)
 201c464:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201c468:	e0bff817 	ldw	r2,-32(fp)
 201c46c:	10c00417 	ldw	r3,16(r2)
 201c470:	e0bff817 	ldw	r2,-32(fp)
 201c474:	10800217 	ldw	r2,8(r2)
 201c478:	1880041e 	bne	r3,r2,201c48c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 201c47c:	e0bff817 	ldw	r2,-32(fp)
 201c480:	10c00117 	ldw	r3,4(r2)
 201c484:	e0bff817 	ldw	r2,-32(fp)
 201c488:	10c00415 	stw	r3,16(r2)
 201c48c:	e0bff617 	ldw	r2,-40(fp)
 201c490:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c494:	e0bff717 	ldw	r2,-36(fp)
 201c498:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201c49c:	e0bfff17 	ldw	r2,-4(fp)
 201c4a0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 201c4a4:	e0bff517 	ldw	r2,-44(fp)
 201c4a8:	00004306 	br	201c5b8 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 201c4ac:	d0a7b617 	ldw	r2,-24872(gp)
 201c4b0:	d0e7b617 	ldw	r3,-24872(gp)
 201c4b4:	18c00c03 	ldbu	r3,48(r3)
 201c4b8:	18c00114 	ori	r3,r3,4
 201c4bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201c4c0:	d0a7b617 	ldw	r2,-24872(gp)
 201c4c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201c4c8:	d0a7b617 	ldw	r2,-24872(gp)
 201c4cc:	e0fffe0b 	ldhu	r3,-8(fp)
 201c4d0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 201c4d4:	e13ffd17 	ldw	r4,-12(fp)
 201c4d8:	20182d40 	call	20182d4 <OS_EventTaskWait>
 201c4dc:	e0bff617 	ldw	r2,-40(fp)
 201c4e0:	e0bffb15 	stw	r2,-20(fp)
 201c4e4:	e0bffb17 	ldw	r2,-20(fp)
 201c4e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 201c4ec:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c4f0:	0005303a 	rdctl	r2,status
 201c4f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c4f8:	e0fff917 	ldw	r3,-28(fp)
 201c4fc:	00bfff84 	movi	r2,-2
 201c500:	1884703a 	and	r2,r3,r2
 201c504:	1001703a 	wrctl	status,r2
  
  return context;
 201c508:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201c50c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201c510:	d0a7b617 	ldw	r2,-24872(gp)
 201c514:	10800c43 	ldbu	r2,49(r2)
 201c518:	10803fcc 	andi	r2,r2,255
 201c51c:	10000326 	beq	r2,zero,201c52c <OSQPend+0x1ec>
 201c520:	108000a0 	cmpeqi	r2,r2,2
 201c524:	1000071e 	bne	r2,zero,201c544 <OSQPend+0x204>
 201c528:	00000b06 	br	201c558 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 201c52c:	d0a7b617 	ldw	r2,-24872(gp)
 201c530:	10800917 	ldw	r2,36(r2)
 201c534:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 201c538:	e0bfff17 	ldw	r2,-4(fp)
 201c53c:	10000005 	stb	zero,0(r2)
             break;
 201c540:	00000e06 	br	201c57c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201c544:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201c548:	e0bfff17 	ldw	r2,-4(fp)
 201c54c:	00c00384 	movi	r3,14
 201c550:	10c00005 	stb	r3,0(r2)
             break;
 201c554:	00000906 	br	201c57c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201c558:	d0a7b617 	ldw	r2,-24872(gp)
 201c55c:	e17ffd17 	ldw	r5,-12(fp)
 201c560:	1009883a 	mov	r4,r2
 201c564:	20185340 	call	2018534 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201c568:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201c56c:	e0bfff17 	ldw	r2,-4(fp)
 201c570:	00c00284 	movi	r3,10
 201c574:	10c00005 	stb	r3,0(r2)
             break;
 201c578:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201c57c:	d0a7b617 	ldw	r2,-24872(gp)
 201c580:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201c584:	d0a7b617 	ldw	r2,-24872(gp)
 201c588:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201c58c:	d0a7b617 	ldw	r2,-24872(gp)
 201c590:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201c594:	d0a7b617 	ldw	r2,-24872(gp)
 201c598:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201c59c:	d0a7b617 	ldw	r2,-24872(gp)
 201c5a0:	10000915 	stw	zero,36(r2)
 201c5a4:	e0bff617 	ldw	r2,-40(fp)
 201c5a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c5ac:	e0bffa17 	ldw	r2,-24(fp)
 201c5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201c5b4:	e0bff517 	ldw	r2,-44(fp)
}
 201c5b8:	e037883a 	mov	sp,fp
 201c5bc:	dfc00117 	ldw	ra,4(sp)
 201c5c0:	df000017 	ldw	fp,0(sp)
 201c5c4:	dec00204 	addi	sp,sp,8
 201c5c8:	f800283a 	ret

0201c5cc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201c5cc:	defff604 	addi	sp,sp,-40
 201c5d0:	dfc00915 	stw	ra,36(sp)
 201c5d4:	df000815 	stw	fp,32(sp)
 201c5d8:	df000804 	addi	fp,sp,32
 201c5dc:	e13ffd15 	stw	r4,-12(fp)
 201c5e0:	2805883a 	mov	r2,r5
 201c5e4:	e1bfff15 	stw	r6,-4(fp)
 201c5e8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c5ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201c5f0:	e0bfff17 	ldw	r2,-4(fp)
 201c5f4:	1000021e 	bne	r2,zero,201c600 <OSQPendAbort+0x34>
        return (0);
 201c5f8:	0005883a 	mov	r2,zero
 201c5fc:	00004906 	br	201c724 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201c600:	e0bffd17 	ldw	r2,-12(fp)
 201c604:	1000051e 	bne	r2,zero,201c61c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c608:	e0bfff17 	ldw	r2,-4(fp)
 201c60c:	00c00104 	movi	r3,4
 201c610:	10c00005 	stb	r3,0(r2)
        return (0);
 201c614:	0005883a 	mov	r2,zero
 201c618:	00004206 	br	201c724 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201c61c:	e0bffd17 	ldw	r2,-12(fp)
 201c620:	10800003 	ldbu	r2,0(r2)
 201c624:	10803fcc 	andi	r2,r2,255
 201c628:	108000a0 	cmpeqi	r2,r2,2
 201c62c:	1000051e 	bne	r2,zero,201c644 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c630:	e0bfff17 	ldw	r2,-4(fp)
 201c634:	00c00044 	movi	r3,1
 201c638:	10c00005 	stb	r3,0(r2)
        return (0);
 201c63c:	0005883a 	mov	r2,zero
 201c640:	00003806 	br	201c724 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c644:	0005303a 	rdctl	r2,status
 201c648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c64c:	e0fffc17 	ldw	r3,-16(fp)
 201c650:	00bfff84 	movi	r2,-2
 201c654:	1884703a 	and	r2,r3,r2
 201c658:	1001703a 	wrctl	status,r2
  
  return context;
 201c65c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c660:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201c664:	e0bffd17 	ldw	r2,-12(fp)
 201c668:	10800283 	ldbu	r2,10(r2)
 201c66c:	10803fcc 	andi	r2,r2,255
 201c670:	10002526 	beq	r2,zero,201c708 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 201c674:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201c678:	e0bffe03 	ldbu	r2,-8(fp)
 201c67c:	10800060 	cmpeqi	r2,r2,1
 201c680:	10000e26 	beq	r2,zero,201c6bc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201c684:	00000806 	br	201c6a8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201c688:	01c00084 	movi	r7,2
 201c68c:	01800104 	movi	r6,4
 201c690:	000b883a 	mov	r5,zero
 201c694:	e13ffd17 	ldw	r4,-12(fp)
 201c698:	201813c0 	call	201813c <OS_EventTaskRdy>
                     nbr_tasks++;
 201c69c:	e0bff803 	ldbu	r2,-32(fp)
 201c6a0:	10800044 	addi	r2,r2,1
 201c6a4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201c6a8:	e0bffd17 	ldw	r2,-12(fp)
 201c6ac:	10800283 	ldbu	r2,10(r2)
 201c6b0:	10803fcc 	andi	r2,r2,255
 201c6b4:	103ff41e 	bne	r2,zero,201c688 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201c6b8:	00000906 	br	201c6e0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201c6bc:	01c00084 	movi	r7,2
 201c6c0:	01800104 	movi	r6,4
 201c6c4:	000b883a 	mov	r5,zero
 201c6c8:	e13ffd17 	ldw	r4,-12(fp)
 201c6cc:	201813c0 	call	201813c <OS_EventTaskRdy>
                 nbr_tasks++;
 201c6d0:	e0bff803 	ldbu	r2,-32(fp)
 201c6d4:	10800044 	addi	r2,r2,1
 201c6d8:	e0bff805 	stb	r2,-32(fp)
                 break;
 201c6dc:	0001883a 	nop
 201c6e0:	e0bff917 	ldw	r2,-28(fp)
 201c6e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c6e8:	e0bffa17 	ldw	r2,-24(fp)
 201c6ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201c6f0:	2018b880 	call	2018b88 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201c6f4:	e0bfff17 	ldw	r2,-4(fp)
 201c6f8:	00c00384 	movi	r3,14
 201c6fc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201c700:	e0bff803 	ldbu	r2,-32(fp)
 201c704:	00000706 	br	201c724 <OSQPendAbort+0x158>
 201c708:	e0bff917 	ldw	r2,-28(fp)
 201c70c:	e0bffb15 	stw	r2,-20(fp)
 201c710:	e0bffb17 	ldw	r2,-20(fp)
 201c714:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201c718:	e0bfff17 	ldw	r2,-4(fp)
 201c71c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201c720:	0005883a 	mov	r2,zero
}
 201c724:	e037883a 	mov	sp,fp
 201c728:	dfc00117 	ldw	ra,4(sp)
 201c72c:	df000017 	ldw	fp,0(sp)
 201c730:	dec00204 	addi	sp,sp,8
 201c734:	f800283a 	ret

0201c738 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201c738:	defff604 	addi	sp,sp,-40
 201c73c:	dfc00915 	stw	ra,36(sp)
 201c740:	df000815 	stw	fp,32(sp)
 201c744:	df000804 	addi	fp,sp,32
 201c748:	e13ffe15 	stw	r4,-8(fp)
 201c74c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201c750:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201c754:	e0bffe17 	ldw	r2,-8(fp)
 201c758:	1000021e 	bne	r2,zero,201c764 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201c75c:	00800104 	movi	r2,4
 201c760:	00004a06 	br	201c88c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201c764:	e0bffe17 	ldw	r2,-8(fp)
 201c768:	10800003 	ldbu	r2,0(r2)
 201c76c:	10803fcc 	andi	r2,r2,255
 201c770:	108000a0 	cmpeqi	r2,r2,2
 201c774:	1000021e 	bne	r2,zero,201c780 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 201c778:	00800044 	movi	r2,1
 201c77c:	00004306 	br	201c88c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c780:	0005303a 	rdctl	r2,status
 201c784:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c788:	e0fffd17 	ldw	r3,-12(fp)
 201c78c:	00bfff84 	movi	r2,-2
 201c790:	1884703a 	and	r2,r3,r2
 201c794:	1001703a 	wrctl	status,r2
  
  return context;
 201c798:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c79c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201c7a0:	e0bffe17 	ldw	r2,-8(fp)
 201c7a4:	10800283 	ldbu	r2,10(r2)
 201c7a8:	10803fcc 	andi	r2,r2,255
 201c7ac:	10000c26 	beq	r2,zero,201c7e0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201c7b0:	000f883a 	mov	r7,zero
 201c7b4:	01800104 	movi	r6,4
 201c7b8:	e17fff17 	ldw	r5,-4(fp)
 201c7bc:	e13ffe17 	ldw	r4,-8(fp)
 201c7c0:	201813c0 	call	201813c <OS_EventTaskRdy>
 201c7c4:	e0bff817 	ldw	r2,-32(fp)
 201c7c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c7cc:	e0bff917 	ldw	r2,-28(fp)
 201c7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 201c7d4:	2018b880 	call	2018b88 <OS_Sched>
        return (OS_ERR_NONE);
 201c7d8:	0005883a 	mov	r2,zero
 201c7dc:	00002b06 	br	201c88c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 201c7e0:	e0bffe17 	ldw	r2,-8(fp)
 201c7e4:	10800117 	ldw	r2,4(r2)
 201c7e8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 201c7ec:	e0bffb17 	ldw	r2,-20(fp)
 201c7f0:	10c0058b 	ldhu	r3,22(r2)
 201c7f4:	e0bffb17 	ldw	r2,-20(fp)
 201c7f8:	1080050b 	ldhu	r2,20(r2)
 201c7fc:	18ffffcc 	andi	r3,r3,65535
 201c800:	10bfffcc 	andi	r2,r2,65535
 201c804:	18800636 	bltu	r3,r2,201c820 <OSQPost+0xe8>
 201c808:	e0bff817 	ldw	r2,-32(fp)
 201c80c:	e0bffa15 	stw	r2,-24(fp)
 201c810:	e0bffa17 	ldw	r2,-24(fp)
 201c814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201c818:	00800784 	movi	r2,30
 201c81c:	00001b06 	br	201c88c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201c820:	e0bffb17 	ldw	r2,-20(fp)
 201c824:	10800317 	ldw	r2,12(r2)
 201c828:	11000104 	addi	r4,r2,4
 201c82c:	e0fffb17 	ldw	r3,-20(fp)
 201c830:	19000315 	stw	r4,12(r3)
 201c834:	e0ffff17 	ldw	r3,-4(fp)
 201c838:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201c83c:	e0bffb17 	ldw	r2,-20(fp)
 201c840:	1080058b 	ldhu	r2,22(r2)
 201c844:	10800044 	addi	r2,r2,1
 201c848:	1007883a 	mov	r3,r2
 201c84c:	e0bffb17 	ldw	r2,-20(fp)
 201c850:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 201c854:	e0bffb17 	ldw	r2,-20(fp)
 201c858:	10c00317 	ldw	r3,12(r2)
 201c85c:	e0bffb17 	ldw	r2,-20(fp)
 201c860:	10800217 	ldw	r2,8(r2)
 201c864:	1880041e 	bne	r3,r2,201c878 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 201c868:	e0bffb17 	ldw	r2,-20(fp)
 201c86c:	10c00117 	ldw	r3,4(r2)
 201c870:	e0bffb17 	ldw	r2,-20(fp)
 201c874:	10c00315 	stw	r3,12(r2)
 201c878:	e0bff817 	ldw	r2,-32(fp)
 201c87c:	e0bffc15 	stw	r2,-16(fp)
 201c880:	e0bffc17 	ldw	r2,-16(fp)
 201c884:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c888:	0005883a 	mov	r2,zero
}
 201c88c:	e037883a 	mov	sp,fp
 201c890:	dfc00117 	ldw	ra,4(sp)
 201c894:	df000017 	ldw	fp,0(sp)
 201c898:	dec00204 	addi	sp,sp,8
 201c89c:	f800283a 	ret

0201c8a0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201c8a0:	defff604 	addi	sp,sp,-40
 201c8a4:	dfc00915 	stw	ra,36(sp)
 201c8a8:	df000815 	stw	fp,32(sp)
 201c8ac:	df000804 	addi	fp,sp,32
 201c8b0:	e13ffe15 	stw	r4,-8(fp)
 201c8b4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c8b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c8bc:	e0bffe17 	ldw	r2,-8(fp)
 201c8c0:	1000021e 	bne	r2,zero,201c8cc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201c8c4:	00800104 	movi	r2,4
 201c8c8:	00004c06 	br	201c9fc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201c8cc:	e0bffe17 	ldw	r2,-8(fp)
 201c8d0:	10800003 	ldbu	r2,0(r2)
 201c8d4:	10803fcc 	andi	r2,r2,255
 201c8d8:	108000a0 	cmpeqi	r2,r2,2
 201c8dc:	1000021e 	bne	r2,zero,201c8e8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 201c8e0:	00800044 	movi	r2,1
 201c8e4:	00004506 	br	201c9fc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c8e8:	0005303a 	rdctl	r2,status
 201c8ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c8f0:	e0fffd17 	ldw	r3,-12(fp)
 201c8f4:	00bfff84 	movi	r2,-2
 201c8f8:	1884703a 	and	r2,r3,r2
 201c8fc:	1001703a 	wrctl	status,r2
  
  return context;
 201c900:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c904:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201c908:	e0bffe17 	ldw	r2,-8(fp)
 201c90c:	10800283 	ldbu	r2,10(r2)
 201c910:	10803fcc 	andi	r2,r2,255
 201c914:	10000c26 	beq	r2,zero,201c948 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201c918:	000f883a 	mov	r7,zero
 201c91c:	01800104 	movi	r6,4
 201c920:	e17fff17 	ldw	r5,-4(fp)
 201c924:	e13ffe17 	ldw	r4,-8(fp)
 201c928:	201813c0 	call	201813c <OS_EventTaskRdy>
 201c92c:	e0bff817 	ldw	r2,-32(fp)
 201c930:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c934:	e0bff917 	ldw	r2,-28(fp)
 201c938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201c93c:	2018b880 	call	2018b88 <OS_Sched>
        return (OS_ERR_NONE);
 201c940:	0005883a 	mov	r2,zero
 201c944:	00002d06 	br	201c9fc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201c948:	e0bffe17 	ldw	r2,-8(fp)
 201c94c:	10800117 	ldw	r2,4(r2)
 201c950:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201c954:	e0bffb17 	ldw	r2,-20(fp)
 201c958:	10c0058b 	ldhu	r3,22(r2)
 201c95c:	e0bffb17 	ldw	r2,-20(fp)
 201c960:	1080050b 	ldhu	r2,20(r2)
 201c964:	18ffffcc 	andi	r3,r3,65535
 201c968:	10bfffcc 	andi	r2,r2,65535
 201c96c:	18800636 	bltu	r3,r2,201c988 <OSQPostFront+0xe8>
 201c970:	e0bff817 	ldw	r2,-32(fp)
 201c974:	e0bffa15 	stw	r2,-24(fp)
 201c978:	e0bffa17 	ldw	r2,-24(fp)
 201c97c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201c980:	00800784 	movi	r2,30
 201c984:	00001d06 	br	201c9fc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 201c988:	e0bffb17 	ldw	r2,-20(fp)
 201c98c:	10c00417 	ldw	r3,16(r2)
 201c990:	e0bffb17 	ldw	r2,-20(fp)
 201c994:	10800117 	ldw	r2,4(r2)
 201c998:	1880041e 	bne	r3,r2,201c9ac <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 201c99c:	e0bffb17 	ldw	r2,-20(fp)
 201c9a0:	10c00217 	ldw	r3,8(r2)
 201c9a4:	e0bffb17 	ldw	r2,-20(fp)
 201c9a8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 201c9ac:	e0bffb17 	ldw	r2,-20(fp)
 201c9b0:	10800417 	ldw	r2,16(r2)
 201c9b4:	10ffff04 	addi	r3,r2,-4
 201c9b8:	e0bffb17 	ldw	r2,-20(fp)
 201c9bc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 201c9c0:	e0bffb17 	ldw	r2,-20(fp)
 201c9c4:	10800417 	ldw	r2,16(r2)
 201c9c8:	e0ffff17 	ldw	r3,-4(fp)
 201c9cc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201c9d0:	e0bffb17 	ldw	r2,-20(fp)
 201c9d4:	1080058b 	ldhu	r2,22(r2)
 201c9d8:	10800044 	addi	r2,r2,1
 201c9dc:	1007883a 	mov	r3,r2
 201c9e0:	e0bffb17 	ldw	r2,-20(fp)
 201c9e4:	10c0058d 	sth	r3,22(r2)
 201c9e8:	e0bff817 	ldw	r2,-32(fp)
 201c9ec:	e0bffc15 	stw	r2,-16(fp)
 201c9f0:	e0bffc17 	ldw	r2,-16(fp)
 201c9f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c9f8:	0005883a 	mov	r2,zero
}
 201c9fc:	e037883a 	mov	sp,fp
 201ca00:	dfc00117 	ldw	ra,4(sp)
 201ca04:	df000017 	ldw	fp,0(sp)
 201ca08:	dec00204 	addi	sp,sp,8
 201ca0c:	f800283a 	ret

0201ca10 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201ca10:	defff504 	addi	sp,sp,-44
 201ca14:	dfc00a15 	stw	ra,40(sp)
 201ca18:	df000915 	stw	fp,36(sp)
 201ca1c:	df000904 	addi	fp,sp,36
 201ca20:	e13ffd15 	stw	r4,-12(fp)
 201ca24:	e17ffe15 	stw	r5,-8(fp)
 201ca28:	3005883a 	mov	r2,r6
 201ca2c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ca30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201ca34:	e0bffd17 	ldw	r2,-12(fp)
 201ca38:	1000021e 	bne	r2,zero,201ca44 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201ca3c:	00800104 	movi	r2,4
 201ca40:	00007106 	br	201cc08 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201ca44:	e0bffd17 	ldw	r2,-12(fp)
 201ca48:	10800003 	ldbu	r2,0(r2)
 201ca4c:	10803fcc 	andi	r2,r2,255
 201ca50:	108000a0 	cmpeqi	r2,r2,2
 201ca54:	1000021e 	bne	r2,zero,201ca60 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 201ca58:	00800044 	movi	r2,1
 201ca5c:	00006a06 	br	201cc08 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ca60:	0005303a 	rdctl	r2,status
 201ca64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ca68:	e0fffc17 	ldw	r3,-16(fp)
 201ca6c:	00bfff84 	movi	r2,-2
 201ca70:	1884703a 	and	r2,r3,r2
 201ca74:	1001703a 	wrctl	status,r2
  
  return context;
 201ca78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201ca7c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201ca80:	e0bffd17 	ldw	r2,-12(fp)
 201ca84:	10800283 	ldbu	r2,10(r2)
 201ca88:	10803fcc 	andi	r2,r2,255
 201ca8c:	10001d26 	beq	r2,zero,201cb04 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201ca90:	e0bfff03 	ldbu	r2,-4(fp)
 201ca94:	1080004c 	andi	r2,r2,1
 201ca98:	10000b26 	beq	r2,zero,201cac8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201ca9c:	00000506 	br	201cab4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201caa0:	000f883a 	mov	r7,zero
 201caa4:	01800104 	movi	r6,4
 201caa8:	e17ffe17 	ldw	r5,-8(fp)
 201caac:	e13ffd17 	ldw	r4,-12(fp)
 201cab0:	201813c0 	call	201813c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201cab4:	e0bffd17 	ldw	r2,-12(fp)
 201cab8:	10800283 	ldbu	r2,10(r2)
 201cabc:	10803fcc 	andi	r2,r2,255
 201cac0:	103ff71e 	bne	r2,zero,201caa0 <OSQPostOpt+0x90>
 201cac4:	00000506 	br	201cadc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201cac8:	000f883a 	mov	r7,zero
 201cacc:	01800104 	movi	r6,4
 201cad0:	e17ffe17 	ldw	r5,-8(fp)
 201cad4:	e13ffd17 	ldw	r4,-12(fp)
 201cad8:	201813c0 	call	201813c <OS_EventTaskRdy>
 201cadc:	e0bff717 	ldw	r2,-36(fp)
 201cae0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cae4:	e0bff817 	ldw	r2,-32(fp)
 201cae8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201caec:	e0bfff03 	ldbu	r2,-4(fp)
 201caf0:	1080010c 	andi	r2,r2,4
 201caf4:	1000011e 	bne	r2,zero,201cafc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201caf8:	2018b880 	call	2018b88 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201cafc:	0005883a 	mov	r2,zero
 201cb00:	00004106 	br	201cc08 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201cb04:	e0bffd17 	ldw	r2,-12(fp)
 201cb08:	10800117 	ldw	r2,4(r2)
 201cb0c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201cb10:	e0bffa17 	ldw	r2,-24(fp)
 201cb14:	10c0058b 	ldhu	r3,22(r2)
 201cb18:	e0bffa17 	ldw	r2,-24(fp)
 201cb1c:	1080050b 	ldhu	r2,20(r2)
 201cb20:	18ffffcc 	andi	r3,r3,65535
 201cb24:	10bfffcc 	andi	r2,r2,65535
 201cb28:	18800636 	bltu	r3,r2,201cb44 <OSQPostOpt+0x134>
 201cb2c:	e0bff717 	ldw	r2,-36(fp)
 201cb30:	e0bff915 	stw	r2,-28(fp)
 201cb34:	e0bff917 	ldw	r2,-28(fp)
 201cb38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201cb3c:	00800784 	movi	r2,30
 201cb40:	00003106 	br	201cc08 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 201cb44:	e0bfff03 	ldbu	r2,-4(fp)
 201cb48:	1080008c 	andi	r2,r2,2
 201cb4c:	10001326 	beq	r2,zero,201cb9c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201cb50:	e0bffa17 	ldw	r2,-24(fp)
 201cb54:	10c00417 	ldw	r3,16(r2)
 201cb58:	e0bffa17 	ldw	r2,-24(fp)
 201cb5c:	10800117 	ldw	r2,4(r2)
 201cb60:	1880041e 	bne	r3,r2,201cb74 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 201cb64:	e0bffa17 	ldw	r2,-24(fp)
 201cb68:	10c00217 	ldw	r3,8(r2)
 201cb6c:	e0bffa17 	ldw	r2,-24(fp)
 201cb70:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 201cb74:	e0bffa17 	ldw	r2,-24(fp)
 201cb78:	10800417 	ldw	r2,16(r2)
 201cb7c:	10ffff04 	addi	r3,r2,-4
 201cb80:	e0bffa17 	ldw	r2,-24(fp)
 201cb84:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 201cb88:	e0bffa17 	ldw	r2,-24(fp)
 201cb8c:	10800417 	ldw	r2,16(r2)
 201cb90:	e0fffe17 	ldw	r3,-8(fp)
 201cb94:	10c00015 	stw	r3,0(r2)
 201cb98:	00001006 	br	201cbdc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 201cb9c:	e0bffa17 	ldw	r2,-24(fp)
 201cba0:	10800317 	ldw	r2,12(r2)
 201cba4:	11000104 	addi	r4,r2,4
 201cba8:	e0fffa17 	ldw	r3,-24(fp)
 201cbac:	19000315 	stw	r4,12(r3)
 201cbb0:	e0fffe17 	ldw	r3,-8(fp)
 201cbb4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201cbb8:	e0bffa17 	ldw	r2,-24(fp)
 201cbbc:	10c00317 	ldw	r3,12(r2)
 201cbc0:	e0bffa17 	ldw	r2,-24(fp)
 201cbc4:	10800217 	ldw	r2,8(r2)
 201cbc8:	1880041e 	bne	r3,r2,201cbdc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 201cbcc:	e0bffa17 	ldw	r2,-24(fp)
 201cbd0:	10c00117 	ldw	r3,4(r2)
 201cbd4:	e0bffa17 	ldw	r2,-24(fp)
 201cbd8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201cbdc:	e0bffa17 	ldw	r2,-24(fp)
 201cbe0:	1080058b 	ldhu	r2,22(r2)
 201cbe4:	10800044 	addi	r2,r2,1
 201cbe8:	1007883a 	mov	r3,r2
 201cbec:	e0bffa17 	ldw	r2,-24(fp)
 201cbf0:	10c0058d 	sth	r3,22(r2)
 201cbf4:	e0bff717 	ldw	r2,-36(fp)
 201cbf8:	e0bffb15 	stw	r2,-20(fp)
 201cbfc:	e0bffb17 	ldw	r2,-20(fp)
 201cc00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201cc04:	0005883a 	mov	r2,zero
}
 201cc08:	e037883a 	mov	sp,fp
 201cc0c:	dfc00117 	ldw	ra,4(sp)
 201cc10:	df000017 	ldw	fp,0(sp)
 201cc14:	dec00204 	addi	sp,sp,8
 201cc18:	f800283a 	ret

0201cc1c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 201cc1c:	defff604 	addi	sp,sp,-40
 201cc20:	df000915 	stw	fp,36(sp)
 201cc24:	df000904 	addi	fp,sp,36
 201cc28:	e13ffe15 	stw	r4,-8(fp)
 201cc2c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201cc30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201cc34:	e0bffe17 	ldw	r2,-8(fp)
 201cc38:	1000021e 	bne	r2,zero,201cc44 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201cc3c:	00800104 	movi	r2,4
 201cc40:	00004906 	br	201cd68 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 201cc44:	e0bfff17 	ldw	r2,-4(fp)
 201cc48:	1000021e 	bne	r2,zero,201cc54 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201cc4c:	00800244 	movi	r2,9
 201cc50:	00004506 	br	201cd68 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201cc54:	e0bffe17 	ldw	r2,-8(fp)
 201cc58:	10800003 	ldbu	r2,0(r2)
 201cc5c:	10803fcc 	andi	r2,r2,255
 201cc60:	108000a0 	cmpeqi	r2,r2,2
 201cc64:	1000021e 	bne	r2,zero,201cc70 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201cc68:	00800044 	movi	r2,1
 201cc6c:	00003e06 	br	201cd68 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cc70:	0005303a 	rdctl	r2,status
 201cc74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cc78:	e0fffd17 	ldw	r3,-12(fp)
 201cc7c:	00bfff84 	movi	r2,-2
 201cc80:	1884703a 	and	r2,r3,r2
 201cc84:	1001703a 	wrctl	status,r2
  
  return context;
 201cc88:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201cc8c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201cc90:	e0bffe17 	ldw	r2,-8(fp)
 201cc94:	10c00283 	ldbu	r3,10(r2)
 201cc98:	e0bfff17 	ldw	r2,-4(fp)
 201cc9c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201cca0:	e0bffe17 	ldw	r2,-8(fp)
 201cca4:	108002c4 	addi	r2,r2,11
 201cca8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201ccac:	e0bfff17 	ldw	r2,-4(fp)
 201ccb0:	10800204 	addi	r2,r2,8
 201ccb4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201ccb8:	e03ff705 	stb	zero,-36(fp)
 201ccbc:	00000b06 	br	201ccec <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 201ccc0:	e0bff917 	ldw	r2,-28(fp)
 201ccc4:	10c00044 	addi	r3,r2,1
 201ccc8:	e0fff915 	stw	r3,-28(fp)
 201cccc:	e0fff817 	ldw	r3,-32(fp)
 201ccd0:	19000044 	addi	r4,r3,1
 201ccd4:	e13ff815 	stw	r4,-32(fp)
 201ccd8:	18c00003 	ldbu	r3,0(r3)
 201ccdc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201cce0:	e0bff703 	ldbu	r2,-36(fp)
 201cce4:	10800044 	addi	r2,r2,1
 201cce8:	e0bff705 	stb	r2,-36(fp)
 201ccec:	e0bff703 	ldbu	r2,-36(fp)
 201ccf0:	108000f0 	cmpltui	r2,r2,3
 201ccf4:	103ff21e 	bne	r2,zero,201ccc0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201ccf8:	e0bffe17 	ldw	r2,-8(fp)
 201ccfc:	10800117 	ldw	r2,4(r2)
 201cd00:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 201cd04:	e0bffc17 	ldw	r2,-16(fp)
 201cd08:	1080058b 	ldhu	r2,22(r2)
 201cd0c:	10bfffcc 	andi	r2,r2,65535
 201cd10:	10000626 	beq	r2,zero,201cd2c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 201cd14:	e0bffc17 	ldw	r2,-16(fp)
 201cd18:	10800417 	ldw	r2,16(r2)
 201cd1c:	10c00017 	ldw	r3,0(r2)
 201cd20:	e0bfff17 	ldw	r2,-4(fp)
 201cd24:	10c00015 	stw	r3,0(r2)
 201cd28:	00000206 	br	201cd34 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 201cd2c:	e0bfff17 	ldw	r2,-4(fp)
 201cd30:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201cd34:	e0bffc17 	ldw	r2,-16(fp)
 201cd38:	10c0058b 	ldhu	r3,22(r2)
 201cd3c:	e0bfff17 	ldw	r2,-4(fp)
 201cd40:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201cd44:	e0bffc17 	ldw	r2,-16(fp)
 201cd48:	10c0050b 	ldhu	r3,20(r2)
 201cd4c:	e0bfff17 	ldw	r2,-4(fp)
 201cd50:	10c0018d 	sth	r3,6(r2)
 201cd54:	e0bffa17 	ldw	r2,-24(fp)
 201cd58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cd5c:	e0bffb17 	ldw	r2,-20(fp)
 201cd60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201cd64:	0005883a 	mov	r2,zero
}
 201cd68:	e037883a 	mov	sp,fp
 201cd6c:	df000017 	ldw	fp,0(sp)
 201cd70:	dec00104 	addi	sp,sp,4
 201cd74:	f800283a 	ret

0201cd78 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 201cd78:	defffb04 	addi	sp,sp,-20
 201cd7c:	dfc00415 	stw	ra,16(sp)
 201cd80:	df000315 	stw	fp,12(sp)
 201cd84:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 201cd88:	01407804 	movi	r5,480
 201cd8c:	010080f4 	movhi	r4,515
 201cd90:	213ec404 	addi	r4,r4,-1264
 201cd94:	2018acc0 	call	2018acc <OS_MemClr>
    pq1 = &OSQTbl[0];
 201cd98:	008080f4 	movhi	r2,515
 201cd9c:	10bec404 	addi	r2,r2,-1264
 201cda0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201cda4:	008080f4 	movhi	r2,515
 201cda8:	10beca04 	addi	r2,r2,-1240
 201cdac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201cdb0:	e03ffd0d 	sth	zero,-12(fp)
 201cdb4:	00000c06 	br	201cde8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201cdb8:	e0bffe17 	ldw	r2,-8(fp)
 201cdbc:	e0ffff17 	ldw	r3,-4(fp)
 201cdc0:	10c00015 	stw	r3,0(r2)
        pq1++;
 201cdc4:	e0bffe17 	ldw	r2,-8(fp)
 201cdc8:	10800604 	addi	r2,r2,24
 201cdcc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201cdd0:	e0bfff17 	ldw	r2,-4(fp)
 201cdd4:	10800604 	addi	r2,r2,24
 201cdd8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201cddc:	e0bffd0b 	ldhu	r2,-12(fp)
 201cde0:	10800044 	addi	r2,r2,1
 201cde4:	e0bffd0d 	sth	r2,-12(fp)
 201cde8:	e0bffd0b 	ldhu	r2,-12(fp)
 201cdec:	108004f0 	cmpltui	r2,r2,19
 201cdf0:	103ff11e 	bne	r2,zero,201cdb8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 201cdf4:	e0bffe17 	ldw	r2,-8(fp)
 201cdf8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 201cdfc:	008080f4 	movhi	r2,515
 201ce00:	10bec404 	addi	r2,r2,-1264
 201ce04:	d0a7b215 	stw	r2,-24888(gp)
#endif
}
 201ce08:	0001883a 	nop
 201ce0c:	e037883a 	mov	sp,fp
 201ce10:	dfc00117 	ldw	ra,4(sp)
 201ce14:	df000017 	ldw	fp,0(sp)
 201ce18:	dec00204 	addi	sp,sp,8
 201ce1c:	f800283a 	ret

0201ce20 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201ce20:	defffa04 	addi	sp,sp,-24
 201ce24:	df000515 	stw	fp,20(sp)
 201ce28:	df000504 	addi	fp,sp,20
 201ce2c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ce30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201ce34:	e0bfff17 	ldw	r2,-4(fp)
 201ce38:	1000021e 	bne	r2,zero,201ce44 <OSSemAccept+0x24>
        return (0);
 201ce3c:	0005883a 	mov	r2,zero
 201ce40:	00001f06 	br	201cec0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201ce44:	e0bfff17 	ldw	r2,-4(fp)
 201ce48:	10800003 	ldbu	r2,0(r2)
 201ce4c:	10803fcc 	andi	r2,r2,255
 201ce50:	108000e0 	cmpeqi	r2,r2,3
 201ce54:	1000021e 	bne	r2,zero,201ce60 <OSSemAccept+0x40>
        return (0);
 201ce58:	0005883a 	mov	r2,zero
 201ce5c:	00001806 	br	201cec0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ce60:	0005303a 	rdctl	r2,status
 201ce64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ce68:	e0fffe17 	ldw	r3,-8(fp)
 201ce6c:	00bfff84 	movi	r2,-2
 201ce70:	1884703a 	and	r2,r3,r2
 201ce74:	1001703a 	wrctl	status,r2
  
  return context;
 201ce78:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201ce7c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 201ce80:	e0bfff17 	ldw	r2,-4(fp)
 201ce84:	1080020b 	ldhu	r2,8(r2)
 201ce88:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201ce8c:	e0bffd0b 	ldhu	r2,-12(fp)
 201ce90:	10000626 	beq	r2,zero,201ceac <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201ce94:	e0bfff17 	ldw	r2,-4(fp)
 201ce98:	1080020b 	ldhu	r2,8(r2)
 201ce9c:	10bfffc4 	addi	r2,r2,-1
 201cea0:	1007883a 	mov	r3,r2
 201cea4:	e0bfff17 	ldw	r2,-4(fp)
 201cea8:	10c0020d 	sth	r3,8(r2)
 201ceac:	e0bffb17 	ldw	r2,-20(fp)
 201ceb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ceb4:	e0bffc17 	ldw	r2,-16(fp)
 201ceb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201cebc:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201cec0:	e037883a 	mov	sp,fp
 201cec4:	df000017 	ldw	fp,0(sp)
 201cec8:	dec00104 	addi	sp,sp,4
 201cecc:	f800283a 	ret

0201ced0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 201ced0:	defff904 	addi	sp,sp,-28
 201ced4:	dfc00615 	stw	ra,24(sp)
 201ced8:	df000515 	stw	fp,20(sp)
 201cedc:	df000504 	addi	fp,sp,20
 201cee0:	2005883a 	mov	r2,r4
 201cee4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201cee8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201ceec:	d0a7b503 	ldbu	r2,-24876(gp)
 201cef0:	10803fcc 	andi	r2,r2,255
 201cef4:	10000226 	beq	r2,zero,201cf00 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201cef8:	0005883a 	mov	r2,zero
 201cefc:	00002506 	br	201cf94 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cf00:	0005303a 	rdctl	r2,status
 201cf04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cf08:	e0fffe17 	ldw	r3,-8(fp)
 201cf0c:	00bfff84 	movi	r2,-2
 201cf10:	1884703a 	and	r2,r3,r2
 201cf14:	1001703a 	wrctl	status,r2
  
  return context;
 201cf18:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201cf1c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201cf20:	d0a7b417 	ldw	r2,-24880(gp)
 201cf24:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201cf28:	d0a7b417 	ldw	r2,-24880(gp)
 201cf2c:	10000326 	beq	r2,zero,201cf3c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201cf30:	d0a7b417 	ldw	r2,-24880(gp)
 201cf34:	10800117 	ldw	r2,4(r2)
 201cf38:	d0a7b415 	stw	r2,-24880(gp)
 201cf3c:	e0bffb17 	ldw	r2,-20(fp)
 201cf40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cf44:	e0bffc17 	ldw	r2,-16(fp)
 201cf48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 201cf4c:	e0bffd17 	ldw	r2,-12(fp)
 201cf50:	10000f26 	beq	r2,zero,201cf90 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201cf54:	e0bffd17 	ldw	r2,-12(fp)
 201cf58:	00c000c4 	movi	r3,3
 201cf5c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201cf60:	e0bffd17 	ldw	r2,-12(fp)
 201cf64:	e0ffff0b 	ldhu	r3,-4(fp)
 201cf68:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 201cf6c:	e0bffd17 	ldw	r2,-12(fp)
 201cf70:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201cf74:	e0bffd17 	ldw	r2,-12(fp)
 201cf78:	00c00fc4 	movi	r3,63
 201cf7c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201cf80:	e0bffd17 	ldw	r2,-12(fp)
 201cf84:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 201cf88:	e13ffd17 	ldw	r4,-12(fp)
 201cf8c:	20186ec0 	call	20186ec <OS_EventWaitListInit>
    }
    return (pevent);
 201cf90:	e0bffd17 	ldw	r2,-12(fp)
}
 201cf94:	e037883a 	mov	sp,fp
 201cf98:	dfc00117 	ldw	ra,4(sp)
 201cf9c:	df000017 	ldw	fp,0(sp)
 201cfa0:	dec00204 	addi	sp,sp,8
 201cfa4:	f800283a 	ret

0201cfa8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201cfa8:	defff304 	addi	sp,sp,-52
 201cfac:	dfc00c15 	stw	ra,48(sp)
 201cfb0:	df000b15 	stw	fp,44(sp)
 201cfb4:	df000b04 	addi	fp,sp,44
 201cfb8:	e13ffd15 	stw	r4,-12(fp)
 201cfbc:	2805883a 	mov	r2,r5
 201cfc0:	e1bfff15 	stw	r6,-4(fp)
 201cfc4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201cfc8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201cfcc:	e0bfff17 	ldw	r2,-4(fp)
 201cfd0:	1000021e 	bne	r2,zero,201cfdc <OSSemDel+0x34>
        return (pevent);
 201cfd4:	e0bffd17 	ldw	r2,-12(fp)
 201cfd8:	00007e06 	br	201d1d4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201cfdc:	e0bffd17 	ldw	r2,-12(fp)
 201cfe0:	1000051e 	bne	r2,zero,201cff8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201cfe4:	e0bfff17 	ldw	r2,-4(fp)
 201cfe8:	00c00104 	movi	r3,4
 201cfec:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201cff0:	e0bffd17 	ldw	r2,-12(fp)
 201cff4:	00007706 	br	201d1d4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201cff8:	e0bffd17 	ldw	r2,-12(fp)
 201cffc:	10800003 	ldbu	r2,0(r2)
 201d000:	10803fcc 	andi	r2,r2,255
 201d004:	108000e0 	cmpeqi	r2,r2,3
 201d008:	1000051e 	bne	r2,zero,201d020 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201d00c:	e0bfff17 	ldw	r2,-4(fp)
 201d010:	00c00044 	movi	r3,1
 201d014:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201d018:	e0bffd17 	ldw	r2,-12(fp)
 201d01c:	00006d06 	br	201d1d4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201d020:	d0a7b503 	ldbu	r2,-24876(gp)
 201d024:	10803fcc 	andi	r2,r2,255
 201d028:	10000526 	beq	r2,zero,201d040 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201d02c:	e0bfff17 	ldw	r2,-4(fp)
 201d030:	00c003c4 	movi	r3,15
 201d034:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201d038:	e0bffd17 	ldw	r2,-12(fp)
 201d03c:	00006506 	br	201d1d4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d040:	0005303a 	rdctl	r2,status
 201d044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d048:	e0fffc17 	ldw	r3,-16(fp)
 201d04c:	00bfff84 	movi	r2,-2
 201d050:	1884703a 	and	r2,r3,r2
 201d054:	1001703a 	wrctl	status,r2
  
  return context;
 201d058:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d05c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 201d060:	e0bffd17 	ldw	r2,-12(fp)
 201d064:	10800283 	ldbu	r2,10(r2)
 201d068:	10803fcc 	andi	r2,r2,255
 201d06c:	10000326 	beq	r2,zero,201d07c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201d070:	00800044 	movi	r2,1
 201d074:	e0bff505 	stb	r2,-44(fp)
 201d078:	00000106 	br	201d080 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201d07c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201d080:	e0bffe03 	ldbu	r2,-8(fp)
 201d084:	10000326 	beq	r2,zero,201d094 <OSSemDel+0xec>
 201d088:	10800060 	cmpeqi	r2,r2,1
 201d08c:	1000281e 	bne	r2,zero,201d130 <OSSemDel+0x188>
 201d090:	00004506 	br	201d1a8 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201d094:	e0bff503 	ldbu	r2,-44(fp)
 201d098:	1000161e 	bne	r2,zero,201d0f4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201d09c:	e0bffd17 	ldw	r2,-12(fp)
 201d0a0:	00c00fc4 	movi	r3,63
 201d0a4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201d0a8:	e0bffd17 	ldw	r2,-12(fp)
 201d0ac:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201d0b0:	e0bffd17 	ldw	r2,-12(fp)
 201d0b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201d0b8:	d0e7b417 	ldw	r3,-24880(gp)
 201d0bc:	e0bffd17 	ldw	r2,-12(fp)
 201d0c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201d0c4:	e0bffd17 	ldw	r2,-12(fp)
 201d0c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201d0cc:	e0bffd17 	ldw	r2,-12(fp)
 201d0d0:	d0a7b415 	stw	r2,-24880(gp)
 201d0d4:	e0bff717 	ldw	r2,-36(fp)
 201d0d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d0dc:	e0bff817 	ldw	r2,-32(fp)
 201d0e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201d0e4:	e0bfff17 	ldw	r2,-4(fp)
 201d0e8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 201d0ec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201d0f0:	00003706 	br	201d1d0 <OSSemDel+0x228>
 201d0f4:	e0bff717 	ldw	r2,-36(fp)
 201d0f8:	e0bff915 	stw	r2,-28(fp)
 201d0fc:	e0bff917 	ldw	r2,-28(fp)
 201d100:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201d104:	e0bfff17 	ldw	r2,-4(fp)
 201d108:	00c01244 	movi	r3,73
 201d10c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201d110:	e0bffd17 	ldw	r2,-12(fp)
 201d114:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201d118:	00002d06 	br	201d1d0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201d11c:	000f883a 	mov	r7,zero
 201d120:	01800044 	movi	r6,1
 201d124:	000b883a 	mov	r5,zero
 201d128:	e13ffd17 	ldw	r4,-12(fp)
 201d12c:	201813c0 	call	201813c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 201d130:	e0bffd17 	ldw	r2,-12(fp)
 201d134:	10800283 	ldbu	r2,10(r2)
 201d138:	10803fcc 	andi	r2,r2,255
 201d13c:	103ff71e 	bne	r2,zero,201d11c <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201d140:	e0bffd17 	ldw	r2,-12(fp)
 201d144:	00c00fc4 	movi	r3,63
 201d148:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201d14c:	e0bffd17 	ldw	r2,-12(fp)
 201d150:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201d154:	e0bffd17 	ldw	r2,-12(fp)
 201d158:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201d15c:	d0e7b417 	ldw	r3,-24880(gp)
 201d160:	e0bffd17 	ldw	r2,-12(fp)
 201d164:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201d168:	e0bffd17 	ldw	r2,-12(fp)
 201d16c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201d170:	e0bffd17 	ldw	r2,-12(fp)
 201d174:	d0a7b415 	stw	r2,-24880(gp)
 201d178:	e0bff717 	ldw	r2,-36(fp)
 201d17c:	e0bffa15 	stw	r2,-24(fp)
 201d180:	e0bffa17 	ldw	r2,-24(fp)
 201d184:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201d188:	e0bff503 	ldbu	r2,-44(fp)
 201d18c:	10800058 	cmpnei	r2,r2,1
 201d190:	1000011e 	bne	r2,zero,201d198 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201d194:	2018b880 	call	2018b88 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201d198:	e0bfff17 	ldw	r2,-4(fp)
 201d19c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 201d1a0:	e03ff615 	stw	zero,-40(fp)
             break;
 201d1a4:	00000a06 	br	201d1d0 <OSSemDel+0x228>
 201d1a8:	e0bff717 	ldw	r2,-36(fp)
 201d1ac:	e0bffb15 	stw	r2,-20(fp)
 201d1b0:	e0bffb17 	ldw	r2,-20(fp)
 201d1b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201d1b8:	e0bfff17 	ldw	r2,-4(fp)
 201d1bc:	00c001c4 	movi	r3,7
 201d1c0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201d1c4:	e0bffd17 	ldw	r2,-12(fp)
 201d1c8:	e0bff615 	stw	r2,-40(fp)
             break;
 201d1cc:	0001883a 	nop
    }
    return (pevent_return);
 201d1d0:	e0bff617 	ldw	r2,-40(fp)
}
 201d1d4:	e037883a 	mov	sp,fp
 201d1d8:	dfc00117 	ldw	ra,4(sp)
 201d1dc:	df000017 	ldw	fp,0(sp)
 201d1e0:	dec00204 	addi	sp,sp,8
 201d1e4:	f800283a 	ret

0201d1e8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201d1e8:	defff504 	addi	sp,sp,-44
 201d1ec:	dfc00a15 	stw	ra,40(sp)
 201d1f0:	df000915 	stw	fp,36(sp)
 201d1f4:	df000904 	addi	fp,sp,36
 201d1f8:	e13ffd15 	stw	r4,-12(fp)
 201d1fc:	2805883a 	mov	r2,r5
 201d200:	e1bfff15 	stw	r6,-4(fp)
 201d204:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d208:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d20c:	e0bfff17 	ldw	r2,-4(fp)
 201d210:	10007226 	beq	r2,zero,201d3dc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d214:	e0bffd17 	ldw	r2,-12(fp)
 201d218:	1000041e 	bne	r2,zero,201d22c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201d21c:	e0bfff17 	ldw	r2,-4(fp)
 201d220:	00c00104 	movi	r3,4
 201d224:	10c00005 	stb	r3,0(r2)
        return;
 201d228:	00006d06 	br	201d3e0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d22c:	e0bffd17 	ldw	r2,-12(fp)
 201d230:	10800003 	ldbu	r2,0(r2)
 201d234:	10803fcc 	andi	r2,r2,255
 201d238:	108000e0 	cmpeqi	r2,r2,3
 201d23c:	1000041e 	bne	r2,zero,201d250 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 201d240:	e0bfff17 	ldw	r2,-4(fp)
 201d244:	00c00044 	movi	r3,1
 201d248:	10c00005 	stb	r3,0(r2)
        return;
 201d24c:	00006406 	br	201d3e0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201d250:	d0a7b503 	ldbu	r2,-24876(gp)
 201d254:	10803fcc 	andi	r2,r2,255
 201d258:	10000426 	beq	r2,zero,201d26c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201d25c:	e0bfff17 	ldw	r2,-4(fp)
 201d260:	00c00084 	movi	r3,2
 201d264:	10c00005 	stb	r3,0(r2)
        return;
 201d268:	00005d06 	br	201d3e0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201d26c:	d0a7a703 	ldbu	r2,-24932(gp)
 201d270:	10803fcc 	andi	r2,r2,255
 201d274:	10000426 	beq	r2,zero,201d288 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201d278:	e0bfff17 	ldw	r2,-4(fp)
 201d27c:	00c00344 	movi	r3,13
 201d280:	10c00005 	stb	r3,0(r2)
        return;
 201d284:	00005606 	br	201d3e0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d288:	0005303a 	rdctl	r2,status
 201d28c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d290:	e0fffc17 	ldw	r3,-16(fp)
 201d294:	00bfff84 	movi	r2,-2
 201d298:	1884703a 	and	r2,r3,r2
 201d29c:	1001703a 	wrctl	status,r2
  
  return context;
 201d2a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d2a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 201d2a8:	e0bffd17 	ldw	r2,-12(fp)
 201d2ac:	1080020b 	ldhu	r2,8(r2)
 201d2b0:	10bfffcc 	andi	r2,r2,65535
 201d2b4:	10000d26 	beq	r2,zero,201d2ec <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 201d2b8:	e0bffd17 	ldw	r2,-12(fp)
 201d2bc:	1080020b 	ldhu	r2,8(r2)
 201d2c0:	10bfffc4 	addi	r2,r2,-1
 201d2c4:	1007883a 	mov	r3,r2
 201d2c8:	e0bffd17 	ldw	r2,-12(fp)
 201d2cc:	10c0020d 	sth	r3,8(r2)
 201d2d0:	e0bff717 	ldw	r2,-36(fp)
 201d2d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d2d8:	e0bff817 	ldw	r2,-32(fp)
 201d2dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201d2e0:	e0bfff17 	ldw	r2,-4(fp)
 201d2e4:	10000005 	stb	zero,0(r2)
        return;
 201d2e8:	00003d06 	br	201d3e0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 201d2ec:	d0a7b617 	ldw	r2,-24872(gp)
 201d2f0:	d0e7b617 	ldw	r3,-24872(gp)
 201d2f4:	18c00c03 	ldbu	r3,48(r3)
 201d2f8:	18c00054 	ori	r3,r3,1
 201d2fc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201d300:	d0a7b617 	ldw	r2,-24872(gp)
 201d304:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201d308:	d0a7b617 	ldw	r2,-24872(gp)
 201d30c:	e0fffe0b 	ldhu	r3,-8(fp)
 201d310:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201d314:	e13ffd17 	ldw	r4,-12(fp)
 201d318:	20182d40 	call	20182d4 <OS_EventTaskWait>
 201d31c:	e0bff717 	ldw	r2,-36(fp)
 201d320:	e0bffb15 	stw	r2,-20(fp)
 201d324:	e0bffb17 	ldw	r2,-20(fp)
 201d328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201d32c:	2018b880 	call	2018b88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d330:	0005303a 	rdctl	r2,status
 201d334:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d338:	e0fff917 	ldw	r3,-28(fp)
 201d33c:	00bfff84 	movi	r2,-2
 201d340:	1884703a 	and	r2,r3,r2
 201d344:	1001703a 	wrctl	status,r2
  
  return context;
 201d348:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201d34c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201d350:	d0a7b617 	ldw	r2,-24872(gp)
 201d354:	10800c43 	ldbu	r2,49(r2)
 201d358:	10803fcc 	andi	r2,r2,255
 201d35c:	10000326 	beq	r2,zero,201d36c <OSSemPend+0x184>
 201d360:	108000a0 	cmpeqi	r2,r2,2
 201d364:	1000041e 	bne	r2,zero,201d378 <OSSemPend+0x190>
 201d368:	00000706 	br	201d388 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201d36c:	e0bfff17 	ldw	r2,-4(fp)
 201d370:	10000005 	stb	zero,0(r2)
             break;
 201d374:	00000c06 	br	201d3a8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201d378:	e0bfff17 	ldw	r2,-4(fp)
 201d37c:	00c00384 	movi	r3,14
 201d380:	10c00005 	stb	r3,0(r2)
             break;
 201d384:	00000806 	br	201d3a8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201d388:	d0a7b617 	ldw	r2,-24872(gp)
 201d38c:	e17ffd17 	ldw	r5,-12(fp)
 201d390:	1009883a 	mov	r4,r2
 201d394:	20185340 	call	2018534 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201d398:	e0bfff17 	ldw	r2,-4(fp)
 201d39c:	00c00284 	movi	r3,10
 201d3a0:	10c00005 	stb	r3,0(r2)
             break;
 201d3a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201d3a8:	d0a7b617 	ldw	r2,-24872(gp)
 201d3ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201d3b0:	d0a7b617 	ldw	r2,-24872(gp)
 201d3b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201d3b8:	d0a7b617 	ldw	r2,-24872(gp)
 201d3bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201d3c0:	d0a7b617 	ldw	r2,-24872(gp)
 201d3c4:	10000815 	stw	zero,32(r2)
 201d3c8:	e0bff717 	ldw	r2,-36(fp)
 201d3cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d3d0:	e0bffa17 	ldw	r2,-24(fp)
 201d3d4:	1001703a 	wrctl	status,r2
 201d3d8:	00000106 	br	201d3e0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201d3dc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 201d3e0:	e037883a 	mov	sp,fp
 201d3e4:	dfc00117 	ldw	ra,4(sp)
 201d3e8:	df000017 	ldw	fp,0(sp)
 201d3ec:	dec00204 	addi	sp,sp,8
 201d3f0:	f800283a 	ret

0201d3f4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201d3f4:	defff604 	addi	sp,sp,-40
 201d3f8:	dfc00915 	stw	ra,36(sp)
 201d3fc:	df000815 	stw	fp,32(sp)
 201d400:	df000804 	addi	fp,sp,32
 201d404:	e13ffd15 	stw	r4,-12(fp)
 201d408:	2805883a 	mov	r2,r5
 201d40c:	e1bfff15 	stw	r6,-4(fp)
 201d410:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d414:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d418:	e0bfff17 	ldw	r2,-4(fp)
 201d41c:	1000021e 	bne	r2,zero,201d428 <OSSemPendAbort+0x34>
        return (0);
 201d420:	0005883a 	mov	r2,zero
 201d424:	00004906 	br	201d54c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d428:	e0bffd17 	ldw	r2,-12(fp)
 201d42c:	1000051e 	bne	r2,zero,201d444 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201d430:	e0bfff17 	ldw	r2,-4(fp)
 201d434:	00c00104 	movi	r3,4
 201d438:	10c00005 	stb	r3,0(r2)
        return (0);
 201d43c:	0005883a 	mov	r2,zero
 201d440:	00004206 	br	201d54c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d444:	e0bffd17 	ldw	r2,-12(fp)
 201d448:	10800003 	ldbu	r2,0(r2)
 201d44c:	10803fcc 	andi	r2,r2,255
 201d450:	108000e0 	cmpeqi	r2,r2,3
 201d454:	1000051e 	bne	r2,zero,201d46c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201d458:	e0bfff17 	ldw	r2,-4(fp)
 201d45c:	00c00044 	movi	r3,1
 201d460:	10c00005 	stb	r3,0(r2)
        return (0);
 201d464:	0005883a 	mov	r2,zero
 201d468:	00003806 	br	201d54c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d46c:	0005303a 	rdctl	r2,status
 201d470:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d474:	e0fffc17 	ldw	r3,-16(fp)
 201d478:	00bfff84 	movi	r2,-2
 201d47c:	1884703a 	and	r2,r3,r2
 201d480:	1001703a 	wrctl	status,r2
  
  return context;
 201d484:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d488:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201d48c:	e0bffd17 	ldw	r2,-12(fp)
 201d490:	10800283 	ldbu	r2,10(r2)
 201d494:	10803fcc 	andi	r2,r2,255
 201d498:	10002526 	beq	r2,zero,201d530 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201d49c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201d4a0:	e0bffe03 	ldbu	r2,-8(fp)
 201d4a4:	10800060 	cmpeqi	r2,r2,1
 201d4a8:	10000e26 	beq	r2,zero,201d4e4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201d4ac:	00000806 	br	201d4d0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201d4b0:	01c00084 	movi	r7,2
 201d4b4:	01800044 	movi	r6,1
 201d4b8:	000b883a 	mov	r5,zero
 201d4bc:	e13ffd17 	ldw	r4,-12(fp)
 201d4c0:	201813c0 	call	201813c <OS_EventTaskRdy>
                     nbr_tasks++;
 201d4c4:	e0bff803 	ldbu	r2,-32(fp)
 201d4c8:	10800044 	addi	r2,r2,1
 201d4cc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201d4d0:	e0bffd17 	ldw	r2,-12(fp)
 201d4d4:	10800283 	ldbu	r2,10(r2)
 201d4d8:	10803fcc 	andi	r2,r2,255
 201d4dc:	103ff41e 	bne	r2,zero,201d4b0 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201d4e0:	00000906 	br	201d508 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201d4e4:	01c00084 	movi	r7,2
 201d4e8:	01800044 	movi	r6,1
 201d4ec:	000b883a 	mov	r5,zero
 201d4f0:	e13ffd17 	ldw	r4,-12(fp)
 201d4f4:	201813c0 	call	201813c <OS_EventTaskRdy>
                 nbr_tasks++;
 201d4f8:	e0bff803 	ldbu	r2,-32(fp)
 201d4fc:	10800044 	addi	r2,r2,1
 201d500:	e0bff805 	stb	r2,-32(fp)
                 break;
 201d504:	0001883a 	nop
 201d508:	e0bff917 	ldw	r2,-28(fp)
 201d50c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d510:	e0bffa17 	ldw	r2,-24(fp)
 201d514:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201d518:	2018b880 	call	2018b88 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201d51c:	e0bfff17 	ldw	r2,-4(fp)
 201d520:	00c00384 	movi	r3,14
 201d524:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201d528:	e0bff803 	ldbu	r2,-32(fp)
 201d52c:	00000706 	br	201d54c <OSSemPendAbort+0x158>
 201d530:	e0bff917 	ldw	r2,-28(fp)
 201d534:	e0bffb15 	stw	r2,-20(fp)
 201d538:	e0bffb17 	ldw	r2,-20(fp)
 201d53c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201d540:	e0bfff17 	ldw	r2,-4(fp)
 201d544:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201d548:	0005883a 	mov	r2,zero
}
 201d54c:	e037883a 	mov	sp,fp
 201d550:	dfc00117 	ldw	ra,4(sp)
 201d554:	df000017 	ldw	fp,0(sp)
 201d558:	dec00204 	addi	sp,sp,8
 201d55c:	f800283a 	ret

0201d560 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201d560:	defff804 	addi	sp,sp,-32
 201d564:	dfc00715 	stw	ra,28(sp)
 201d568:	df000615 	stw	fp,24(sp)
 201d56c:	df000604 	addi	fp,sp,24
 201d570:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d574:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d578:	e0bfff17 	ldw	r2,-4(fp)
 201d57c:	1000021e 	bne	r2,zero,201d588 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201d580:	00800104 	movi	r2,4
 201d584:	00003506 	br	201d65c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d588:	e0bfff17 	ldw	r2,-4(fp)
 201d58c:	10800003 	ldbu	r2,0(r2)
 201d590:	10803fcc 	andi	r2,r2,255
 201d594:	108000e0 	cmpeqi	r2,r2,3
 201d598:	1000021e 	bne	r2,zero,201d5a4 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201d59c:	00800044 	movi	r2,1
 201d5a0:	00002e06 	br	201d65c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d5a4:	0005303a 	rdctl	r2,status
 201d5a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d5ac:	e0fffe17 	ldw	r3,-8(fp)
 201d5b0:	00bfff84 	movi	r2,-2
 201d5b4:	1884703a 	and	r2,r3,r2
 201d5b8:	1001703a 	wrctl	status,r2
  
  return context;
 201d5bc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201d5c0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201d5c4:	e0bfff17 	ldw	r2,-4(fp)
 201d5c8:	10800283 	ldbu	r2,10(r2)
 201d5cc:	10803fcc 	andi	r2,r2,255
 201d5d0:	10000c26 	beq	r2,zero,201d604 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201d5d4:	000f883a 	mov	r7,zero
 201d5d8:	01800044 	movi	r6,1
 201d5dc:	000b883a 	mov	r5,zero
 201d5e0:	e13fff17 	ldw	r4,-4(fp)
 201d5e4:	201813c0 	call	201813c <OS_EventTaskRdy>
 201d5e8:	e0bffa17 	ldw	r2,-24(fp)
 201d5ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d5f0:	e0bffb17 	ldw	r2,-20(fp)
 201d5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201d5f8:	2018b880 	call	2018b88 <OS_Sched>
        return (OS_ERR_NONE);
 201d5fc:	0005883a 	mov	r2,zero
 201d600:	00001606 	br	201d65c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201d604:	e0bfff17 	ldw	r2,-4(fp)
 201d608:	1080020b 	ldhu	r2,8(r2)
 201d60c:	10ffffcc 	andi	r3,r2,65535
 201d610:	00bfffd4 	movui	r2,65535
 201d614:	18800c26 	beq	r3,r2,201d648 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201d618:	e0bfff17 	ldw	r2,-4(fp)
 201d61c:	1080020b 	ldhu	r2,8(r2)
 201d620:	10800044 	addi	r2,r2,1
 201d624:	1007883a 	mov	r3,r2
 201d628:	e0bfff17 	ldw	r2,-4(fp)
 201d62c:	10c0020d 	sth	r3,8(r2)
 201d630:	e0bffa17 	ldw	r2,-24(fp)
 201d634:	e0bffc15 	stw	r2,-16(fp)
 201d638:	e0bffc17 	ldw	r2,-16(fp)
 201d63c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201d640:	0005883a 	mov	r2,zero
 201d644:	00000506 	br	201d65c <OSSemPost+0xfc>
 201d648:	e0bffa17 	ldw	r2,-24(fp)
 201d64c:	e0bffd15 	stw	r2,-12(fp)
 201d650:	e0bffd17 	ldw	r2,-12(fp)
 201d654:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201d658:	00800c84 	movi	r2,50
}
 201d65c:	e037883a 	mov	sp,fp
 201d660:	dfc00117 	ldw	ra,4(sp)
 201d664:	df000017 	ldw	fp,0(sp)
 201d668:	dec00204 	addi	sp,sp,8
 201d66c:	f800283a 	ret

0201d670 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201d670:	defff704 	addi	sp,sp,-36
 201d674:	df000815 	stw	fp,32(sp)
 201d678:	df000804 	addi	fp,sp,32
 201d67c:	e13ffe15 	stw	r4,-8(fp)
 201d680:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d684:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201d688:	e0bffe17 	ldw	r2,-8(fp)
 201d68c:	1000021e 	bne	r2,zero,201d698 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201d690:	00800104 	movi	r2,4
 201d694:	00003606 	br	201d770 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201d698:	e0bfff17 	ldw	r2,-4(fp)
 201d69c:	1000021e 	bne	r2,zero,201d6a8 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201d6a0:	00800244 	movi	r2,9
 201d6a4:	00003206 	br	201d770 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201d6a8:	e0bffe17 	ldw	r2,-8(fp)
 201d6ac:	10800003 	ldbu	r2,0(r2)
 201d6b0:	10803fcc 	andi	r2,r2,255
 201d6b4:	108000e0 	cmpeqi	r2,r2,3
 201d6b8:	1000021e 	bne	r2,zero,201d6c4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201d6bc:	00800044 	movi	r2,1
 201d6c0:	00002b06 	br	201d770 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d6c4:	0005303a 	rdctl	r2,status
 201d6c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d6cc:	e0fffd17 	ldw	r3,-12(fp)
 201d6d0:	00bfff84 	movi	r2,-2
 201d6d4:	1884703a 	and	r2,r3,r2
 201d6d8:	1001703a 	wrctl	status,r2
  
  return context;
 201d6dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201d6e0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201d6e4:	e0bffe17 	ldw	r2,-8(fp)
 201d6e8:	10c00283 	ldbu	r3,10(r2)
 201d6ec:	e0bfff17 	ldw	r2,-4(fp)
 201d6f0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201d6f4:	e0bffe17 	ldw	r2,-8(fp)
 201d6f8:	108002c4 	addi	r2,r2,11
 201d6fc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201d700:	e0bfff17 	ldw	r2,-4(fp)
 201d704:	10800084 	addi	r2,r2,2
 201d708:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d70c:	e03ffa05 	stb	zero,-24(fp)
 201d710:	00000b06 	br	201d740 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201d714:	e0bff917 	ldw	r2,-28(fp)
 201d718:	10c00044 	addi	r3,r2,1
 201d71c:	e0fff915 	stw	r3,-28(fp)
 201d720:	e0fff817 	ldw	r3,-32(fp)
 201d724:	19000044 	addi	r4,r3,1
 201d728:	e13ff815 	stw	r4,-32(fp)
 201d72c:	18c00003 	ldbu	r3,0(r3)
 201d730:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d734:	e0bffa03 	ldbu	r2,-24(fp)
 201d738:	10800044 	addi	r2,r2,1
 201d73c:	e0bffa05 	stb	r2,-24(fp)
 201d740:	e0bffa03 	ldbu	r2,-24(fp)
 201d744:	108000f0 	cmpltui	r2,r2,3
 201d748:	103ff21e 	bne	r2,zero,201d714 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201d74c:	e0bffe17 	ldw	r2,-8(fp)
 201d750:	10c0020b 	ldhu	r3,8(r2)
 201d754:	e0bfff17 	ldw	r2,-4(fp)
 201d758:	10c0000d 	sth	r3,0(r2)
 201d75c:	e0bffb17 	ldw	r2,-20(fp)
 201d760:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d764:	e0bffc17 	ldw	r2,-16(fp)
 201d768:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d76c:	0005883a 	mov	r2,zero
}
 201d770:	e037883a 	mov	sp,fp
 201d774:	df000017 	ldw	fp,0(sp)
 201d778:	dec00104 	addi	sp,sp,4
 201d77c:	f800283a 	ret

0201d780 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201d780:	defff904 	addi	sp,sp,-28
 201d784:	df000615 	stw	fp,24(sp)
 201d788:	df000604 	addi	fp,sp,24
 201d78c:	e13ffd15 	stw	r4,-12(fp)
 201d790:	2805883a 	mov	r2,r5
 201d794:	e1bfff15 	stw	r6,-4(fp)
 201d798:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d79c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d7a0:	e0bfff17 	ldw	r2,-4(fp)
 201d7a4:	10003126 	beq	r2,zero,201d86c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d7a8:	e0bffd17 	ldw	r2,-12(fp)
 201d7ac:	1000041e 	bne	r2,zero,201d7c0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201d7b0:	e0bfff17 	ldw	r2,-4(fp)
 201d7b4:	00c00104 	movi	r3,4
 201d7b8:	10c00005 	stb	r3,0(r2)
        return;
 201d7bc:	00002c06 	br	201d870 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d7c0:	e0bffd17 	ldw	r2,-12(fp)
 201d7c4:	10800003 	ldbu	r2,0(r2)
 201d7c8:	10803fcc 	andi	r2,r2,255
 201d7cc:	108000e0 	cmpeqi	r2,r2,3
 201d7d0:	1000041e 	bne	r2,zero,201d7e4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201d7d4:	e0bfff17 	ldw	r2,-4(fp)
 201d7d8:	00c00044 	movi	r3,1
 201d7dc:	10c00005 	stb	r3,0(r2)
        return;
 201d7e0:	00002306 	br	201d870 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d7e4:	0005303a 	rdctl	r2,status
 201d7e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d7ec:	e0fffc17 	ldw	r3,-16(fp)
 201d7f0:	00bfff84 	movi	r2,-2
 201d7f4:	1884703a 	and	r2,r3,r2
 201d7f8:	1001703a 	wrctl	status,r2
  
  return context;
 201d7fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d800:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201d804:	e0bfff17 	ldw	r2,-4(fp)
 201d808:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201d80c:	e0bffd17 	ldw	r2,-12(fp)
 201d810:	1080020b 	ldhu	r2,8(r2)
 201d814:	10bfffcc 	andi	r2,r2,65535
 201d818:	10000426 	beq	r2,zero,201d82c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201d81c:	e0bffd17 	ldw	r2,-12(fp)
 201d820:	e0fffe0b 	ldhu	r3,-8(fp)
 201d824:	10c0020d 	sth	r3,8(r2)
 201d828:	00000b06 	br	201d858 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201d82c:	e0bffd17 	ldw	r2,-12(fp)
 201d830:	10800283 	ldbu	r2,10(r2)
 201d834:	10803fcc 	andi	r2,r2,255
 201d838:	1000041e 	bne	r2,zero,201d84c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201d83c:	e0bffd17 	ldw	r2,-12(fp)
 201d840:	e0fffe0b 	ldhu	r3,-8(fp)
 201d844:	10c0020d 	sth	r3,8(r2)
 201d848:	00000306 	br	201d858 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201d84c:	e0bfff17 	ldw	r2,-4(fp)
 201d850:	00c01244 	movi	r3,73
 201d854:	10c00005 	stb	r3,0(r2)
 201d858:	e0bffa17 	ldw	r2,-24(fp)
 201d85c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d860:	e0bffb17 	ldw	r2,-20(fp)
 201d864:	1001703a 	wrctl	status,r2
 201d868:	00000106 	br	201d870 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201d86c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201d870:	e037883a 	mov	sp,fp
 201d874:	df000017 	ldw	fp,0(sp)
 201d878:	dec00104 	addi	sp,sp,4
 201d87c:	f800283a 	ret

0201d880 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201d880:	defff104 	addi	sp,sp,-60
 201d884:	dfc00e15 	stw	ra,56(sp)
 201d888:	df000d15 	stw	fp,52(sp)
 201d88c:	df000d04 	addi	fp,sp,52
 201d890:	2007883a 	mov	r3,r4
 201d894:	2805883a 	mov	r2,r5
 201d898:	e0fffe05 	stb	r3,-8(fp)
 201d89c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201d8a0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201d8a4:	e0bffe03 	ldbu	r2,-8(fp)
 201d8a8:	10800530 	cmpltui	r2,r2,20
 201d8ac:	1000051e 	bne	r2,zero,201d8c4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201d8b0:	e0bffe03 	ldbu	r2,-8(fp)
 201d8b4:	10803fe0 	cmpeqi	r2,r2,255
 201d8b8:	1000021e 	bne	r2,zero,201d8c4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201d8bc:	00800a84 	movi	r2,42
 201d8c0:	00012606 	br	201dd5c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201d8c4:	e0bfff03 	ldbu	r2,-4(fp)
 201d8c8:	10800530 	cmpltui	r2,r2,20
 201d8cc:	1000021e 	bne	r2,zero,201d8d8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201d8d0:	00800a84 	movi	r2,42
 201d8d4:	00012106 	br	201dd5c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d8d8:	0005303a 	rdctl	r2,status
 201d8dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d8e0:	e0fffd17 	ldw	r3,-12(fp)
 201d8e4:	00bfff84 	movi	r2,-2
 201d8e8:	1884703a 	and	r2,r3,r2
 201d8ec:	1001703a 	wrctl	status,r2
  
  return context;
 201d8f0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201d8f4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201d8f8:	e0ffff03 	ldbu	r3,-4(fp)
 201d8fc:	008080f4 	movhi	r2,515
 201d900:	10855004 	addi	r2,r2,5440
 201d904:	18c7883a 	add	r3,r3,r3
 201d908:	18c7883a 	add	r3,r3,r3
 201d90c:	10c5883a 	add	r2,r2,r3
 201d910:	10800017 	ldw	r2,0(r2)
 201d914:	10000626 	beq	r2,zero,201d930 <OSTaskChangePrio+0xb0>
 201d918:	e0bff517 	ldw	r2,-44(fp)
 201d91c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d920:	e0bff617 	ldw	r2,-40(fp)
 201d924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201d928:	00800a04 	movi	r2,40
 201d92c:	00010b06 	br	201dd5c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201d930:	e0bffe03 	ldbu	r2,-8(fp)
 201d934:	10803fd8 	cmpnei	r2,r2,255
 201d938:	1000031e 	bne	r2,zero,201d948 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201d93c:	d0a7b617 	ldw	r2,-24872(gp)
 201d940:	10800c83 	ldbu	r2,50(r2)
 201d944:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201d948:	e0fffe03 	ldbu	r3,-8(fp)
 201d94c:	008080f4 	movhi	r2,515
 201d950:	10855004 	addi	r2,r2,5440
 201d954:	18c7883a 	add	r3,r3,r3
 201d958:	18c7883a 	add	r3,r3,r3
 201d95c:	10c5883a 	add	r2,r2,r3
 201d960:	10800017 	ldw	r2,0(r2)
 201d964:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201d968:	e0bff817 	ldw	r2,-32(fp)
 201d96c:	1000061e 	bne	r2,zero,201d988 <OSTaskChangePrio+0x108>
 201d970:	e0bff517 	ldw	r2,-44(fp)
 201d974:	e0bff715 	stw	r2,-36(fp)
 201d978:	e0bff717 	ldw	r2,-36(fp)
 201d97c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201d980:	00800a44 	movi	r2,41
 201d984:	0000f506 	br	201dd5c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201d988:	e0bff817 	ldw	r2,-32(fp)
 201d98c:	10800058 	cmpnei	r2,r2,1
 201d990:	1000061e 	bne	r2,zero,201d9ac <OSTaskChangePrio+0x12c>
 201d994:	e0bff517 	ldw	r2,-44(fp)
 201d998:	e0bff915 	stw	r2,-28(fp)
 201d99c:	e0bff917 	ldw	r2,-28(fp)
 201d9a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201d9a4:	008010c4 	movi	r2,67
 201d9a8:	0000ec06 	br	201dd5c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201d9ac:	e0bfff03 	ldbu	r2,-4(fp)
 201d9b0:	1004d0fa 	srli	r2,r2,3
 201d9b4:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201d9b8:	e0bfff03 	ldbu	r2,-4(fp)
 201d9bc:	108001cc 	andi	r2,r2,7
 201d9c0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201d9c4:	e0bffb03 	ldbu	r2,-20(fp)
 201d9c8:	00c00044 	movi	r3,1
 201d9cc:	1884983a 	sll	r2,r3,r2
 201d9d0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201d9d4:	e0bffb43 	ldbu	r2,-19(fp)
 201d9d8:	00c00044 	movi	r3,1
 201d9dc:	1884983a 	sll	r2,r3,r2
 201d9e0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201d9e4:	e0fffe03 	ldbu	r3,-8(fp)
 201d9e8:	008080f4 	movhi	r2,515
 201d9ec:	10855004 	addi	r2,r2,5440
 201d9f0:	18c7883a 	add	r3,r3,r3
 201d9f4:	18c7883a 	add	r3,r3,r3
 201d9f8:	10c5883a 	add	r2,r2,r3
 201d9fc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201da00:	e0ffff03 	ldbu	r3,-4(fp)
 201da04:	008080f4 	movhi	r2,515
 201da08:	10855004 	addi	r2,r2,5440
 201da0c:	18c7883a 	add	r3,r3,r3
 201da10:	18c7883a 	add	r3,r3,r3
 201da14:	10c5883a 	add	r2,r2,r3
 201da18:	e0fff817 	ldw	r3,-32(fp)
 201da1c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201da20:	e0bff817 	ldw	r2,-32(fp)
 201da24:	10800d03 	ldbu	r2,52(r2)
 201da28:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201da2c:	e0bff817 	ldw	r2,-32(fp)
 201da30:	10800d83 	ldbu	r2,54(r2)
 201da34:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201da38:	e0bff817 	ldw	r2,-32(fp)
 201da3c:	10800d43 	ldbu	r2,53(r2)
 201da40:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201da44:	e0fffc03 	ldbu	r3,-16(fp)
 201da48:	d0a7b344 	addi	r2,gp,-24883
 201da4c:	1885883a 	add	r2,r3,r2
 201da50:	10c00003 	ldbu	r3,0(r2)
 201da54:	e0bffc83 	ldbu	r2,-14(fp)
 201da58:	1884703a 	and	r2,r3,r2
 201da5c:	10803fcc 	andi	r2,r2,255
 201da60:	10002826 	beq	r2,zero,201db04 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201da64:	e0fffc03 	ldbu	r3,-16(fp)
 201da68:	e13ffc03 	ldbu	r4,-16(fp)
 201da6c:	d0a7b344 	addi	r2,gp,-24883
 201da70:	2085883a 	add	r2,r4,r2
 201da74:	10800003 	ldbu	r2,0(r2)
 201da78:	1009883a 	mov	r4,r2
 201da7c:	e0bffc83 	ldbu	r2,-14(fp)
 201da80:	0084303a 	nor	r2,zero,r2
 201da84:	2084703a 	and	r2,r4,r2
 201da88:	1009883a 	mov	r4,r2
 201da8c:	d0a7b344 	addi	r2,gp,-24883
 201da90:	1885883a 	add	r2,r3,r2
 201da94:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201da98:	e0fffc03 	ldbu	r3,-16(fp)
 201da9c:	d0a7b344 	addi	r2,gp,-24883
 201daa0:	1885883a 	add	r2,r3,r2
 201daa4:	10800003 	ldbu	r2,0(r2)
 201daa8:	10803fcc 	andi	r2,r2,255
 201daac:	1000061e 	bne	r2,zero,201dac8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201dab0:	e0bffc43 	ldbu	r2,-15(fp)
 201dab4:	0084303a 	nor	r2,zero,r2
 201dab8:	1007883a 	mov	r3,r2
 201dabc:	d0a7b303 	ldbu	r2,-24884(gp)
 201dac0:	1884703a 	and	r2,r3,r2
 201dac4:	d0a7b305 	stb	r2,-24884(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201dac8:	d0e7b303 	ldbu	r3,-24884(gp)
 201dacc:	e0bffb83 	ldbu	r2,-18(fp)
 201dad0:	1884b03a 	or	r2,r3,r2
 201dad4:	d0a7b305 	stb	r2,-24884(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201dad8:	e0fffb03 	ldbu	r3,-20(fp)
 201dadc:	e13ffb03 	ldbu	r4,-20(fp)
 201dae0:	d0a7b344 	addi	r2,gp,-24883
 201dae4:	2085883a 	add	r2,r4,r2
 201dae8:	11000003 	ldbu	r4,0(r2)
 201daec:	e0bffbc3 	ldbu	r2,-17(fp)
 201daf0:	2084b03a 	or	r2,r4,r2
 201daf4:	1009883a 	mov	r4,r2
 201daf8:	d0a7b344 	addi	r2,gp,-24883
 201dafc:	1885883a 	add	r2,r3,r2
 201db00:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201db04:	e0bff817 	ldw	r2,-32(fp)
 201db08:	10800717 	ldw	r2,28(r2)
 201db0c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201db10:	e0bff317 	ldw	r2,-52(fp)
 201db14:	10003326 	beq	r2,zero,201dbe4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201db18:	e0bffc03 	ldbu	r2,-16(fp)
 201db1c:	e0fffc03 	ldbu	r3,-16(fp)
 201db20:	e13ff317 	ldw	r4,-52(fp)
 201db24:	20c7883a 	add	r3,r4,r3
 201db28:	18c002c4 	addi	r3,r3,11
 201db2c:	18c00003 	ldbu	r3,0(r3)
 201db30:	1809883a 	mov	r4,r3
 201db34:	e0fffc83 	ldbu	r3,-14(fp)
 201db38:	00c6303a 	nor	r3,zero,r3
 201db3c:	20c6703a 	and	r3,r4,r3
 201db40:	1809883a 	mov	r4,r3
 201db44:	e0fff317 	ldw	r3,-52(fp)
 201db48:	1885883a 	add	r2,r3,r2
 201db4c:	108002c4 	addi	r2,r2,11
 201db50:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201db54:	e0bffc03 	ldbu	r2,-16(fp)
 201db58:	e0fff317 	ldw	r3,-52(fp)
 201db5c:	1885883a 	add	r2,r3,r2
 201db60:	108002c4 	addi	r2,r2,11
 201db64:	10800003 	ldbu	r2,0(r2)
 201db68:	10803fcc 	andi	r2,r2,255
 201db6c:	1000091e 	bne	r2,zero,201db94 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201db70:	e0bff317 	ldw	r2,-52(fp)
 201db74:	10800283 	ldbu	r2,10(r2)
 201db78:	1007883a 	mov	r3,r2
 201db7c:	e0bffc43 	ldbu	r2,-15(fp)
 201db80:	0084303a 	nor	r2,zero,r2
 201db84:	1884703a 	and	r2,r3,r2
 201db88:	1007883a 	mov	r3,r2
 201db8c:	e0bff317 	ldw	r2,-52(fp)
 201db90:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201db94:	e0bff317 	ldw	r2,-52(fp)
 201db98:	10c00283 	ldbu	r3,10(r2)
 201db9c:	e0bffb83 	ldbu	r2,-18(fp)
 201dba0:	1884b03a 	or	r2,r3,r2
 201dba4:	1007883a 	mov	r3,r2
 201dba8:	e0bff317 	ldw	r2,-52(fp)
 201dbac:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201dbb0:	e0bffb03 	ldbu	r2,-20(fp)
 201dbb4:	e0fffb03 	ldbu	r3,-20(fp)
 201dbb8:	e13ff317 	ldw	r4,-52(fp)
 201dbbc:	20c7883a 	add	r3,r4,r3
 201dbc0:	18c002c4 	addi	r3,r3,11
 201dbc4:	19000003 	ldbu	r4,0(r3)
 201dbc8:	e0fffbc3 	ldbu	r3,-17(fp)
 201dbcc:	20c6b03a 	or	r3,r4,r3
 201dbd0:	1809883a 	mov	r4,r3
 201dbd4:	e0fff317 	ldw	r3,-52(fp)
 201dbd8:	1885883a 	add	r2,r3,r2
 201dbdc:	108002c4 	addi	r2,r2,11
 201dbe0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201dbe4:	e0bff817 	ldw	r2,-32(fp)
 201dbe8:	10800817 	ldw	r2,32(r2)
 201dbec:	10004226 	beq	r2,zero,201dcf8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201dbf0:	e0bff817 	ldw	r2,-32(fp)
 201dbf4:	10800817 	ldw	r2,32(r2)
 201dbf8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201dbfc:	e0bff417 	ldw	r2,-48(fp)
 201dc00:	10800017 	ldw	r2,0(r2)
 201dc04:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201dc08:	00003906 	br	201dcf0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201dc0c:	e0bffc03 	ldbu	r2,-16(fp)
 201dc10:	e0fffc03 	ldbu	r3,-16(fp)
 201dc14:	e13ff317 	ldw	r4,-52(fp)
 201dc18:	20c7883a 	add	r3,r4,r3
 201dc1c:	18c002c4 	addi	r3,r3,11
 201dc20:	18c00003 	ldbu	r3,0(r3)
 201dc24:	1809883a 	mov	r4,r3
 201dc28:	e0fffc83 	ldbu	r3,-14(fp)
 201dc2c:	00c6303a 	nor	r3,zero,r3
 201dc30:	20c6703a 	and	r3,r4,r3
 201dc34:	1809883a 	mov	r4,r3
 201dc38:	e0fff317 	ldw	r3,-52(fp)
 201dc3c:	1885883a 	add	r2,r3,r2
 201dc40:	108002c4 	addi	r2,r2,11
 201dc44:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201dc48:	e0bffc03 	ldbu	r2,-16(fp)
 201dc4c:	e0fff317 	ldw	r3,-52(fp)
 201dc50:	1885883a 	add	r2,r3,r2
 201dc54:	108002c4 	addi	r2,r2,11
 201dc58:	10800003 	ldbu	r2,0(r2)
 201dc5c:	10803fcc 	andi	r2,r2,255
 201dc60:	1000091e 	bne	r2,zero,201dc88 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201dc64:	e0bff317 	ldw	r2,-52(fp)
 201dc68:	10800283 	ldbu	r2,10(r2)
 201dc6c:	1007883a 	mov	r3,r2
 201dc70:	e0bffc43 	ldbu	r2,-15(fp)
 201dc74:	0084303a 	nor	r2,zero,r2
 201dc78:	1884703a 	and	r2,r3,r2
 201dc7c:	1007883a 	mov	r3,r2
 201dc80:	e0bff317 	ldw	r2,-52(fp)
 201dc84:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201dc88:	e0bff317 	ldw	r2,-52(fp)
 201dc8c:	10c00283 	ldbu	r3,10(r2)
 201dc90:	e0bffb83 	ldbu	r2,-18(fp)
 201dc94:	1884b03a 	or	r2,r3,r2
 201dc98:	1007883a 	mov	r3,r2
 201dc9c:	e0bff317 	ldw	r2,-52(fp)
 201dca0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201dca4:	e0bffb03 	ldbu	r2,-20(fp)
 201dca8:	e0fffb03 	ldbu	r3,-20(fp)
 201dcac:	e13ff317 	ldw	r4,-52(fp)
 201dcb0:	20c7883a 	add	r3,r4,r3
 201dcb4:	18c002c4 	addi	r3,r3,11
 201dcb8:	19000003 	ldbu	r4,0(r3)
 201dcbc:	e0fffbc3 	ldbu	r3,-17(fp)
 201dcc0:	20c6b03a 	or	r3,r4,r3
 201dcc4:	1809883a 	mov	r4,r3
 201dcc8:	e0fff317 	ldw	r3,-52(fp)
 201dccc:	1885883a 	add	r2,r3,r2
 201dcd0:	108002c4 	addi	r2,r2,11
 201dcd4:	11000005 	stb	r4,0(r2)
            pevents++;
 201dcd8:	e0bff417 	ldw	r2,-48(fp)
 201dcdc:	10800104 	addi	r2,r2,4
 201dce0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201dce4:	e0bff417 	ldw	r2,-48(fp)
 201dce8:	10800017 	ldw	r2,0(r2)
 201dcec:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201dcf0:	e0bff317 	ldw	r2,-52(fp)
 201dcf4:	103fc51e 	bne	r2,zero,201dc0c <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201dcf8:	e0bff817 	ldw	r2,-32(fp)
 201dcfc:	e0ffff03 	ldbu	r3,-4(fp)
 201dd00:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201dd04:	e0bff817 	ldw	r2,-32(fp)
 201dd08:	e0fffb03 	ldbu	r3,-20(fp)
 201dd0c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201dd10:	e0bff817 	ldw	r2,-32(fp)
 201dd14:	e0fffb43 	ldbu	r3,-19(fp)
 201dd18:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201dd1c:	e0bff817 	ldw	r2,-32(fp)
 201dd20:	e0fffb83 	ldbu	r3,-18(fp)
 201dd24:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201dd28:	e0bff817 	ldw	r2,-32(fp)
 201dd2c:	e0fffbc3 	ldbu	r3,-17(fp)
 201dd30:	10c00d45 	stb	r3,53(r2)
 201dd34:	e0bff517 	ldw	r2,-44(fp)
 201dd38:	e0bffa15 	stw	r2,-24(fp)
 201dd3c:	e0bffa17 	ldw	r2,-24(fp)
 201dd40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201dd44:	d0a7a743 	ldbu	r2,-24931(gp)
 201dd48:	10803fcc 	andi	r2,r2,255
 201dd4c:	10800058 	cmpnei	r2,r2,1
 201dd50:	1000011e 	bne	r2,zero,201dd58 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201dd54:	2018b880 	call	2018b88 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201dd58:	0005883a 	mov	r2,zero
}
 201dd5c:	e037883a 	mov	sp,fp
 201dd60:	dfc00117 	ldw	ra,4(sp)
 201dd64:	df000017 	ldw	fp,0(sp)
 201dd68:	dec00204 	addi	sp,sp,8
 201dd6c:	f800283a 	ret

0201dd70 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201dd70:	deffee04 	addi	sp,sp,-72
 201dd74:	dfc01115 	stw	ra,68(sp)
 201dd78:	df001015 	stw	fp,64(sp)
 201dd7c:	df001004 	addi	fp,sp,64
 201dd80:	e13ffc15 	stw	r4,-16(fp)
 201dd84:	e17ffd15 	stw	r5,-12(fp)
 201dd88:	e1bffe15 	stw	r6,-8(fp)
 201dd8c:	3805883a 	mov	r2,r7
 201dd90:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201dd94:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201dd98:	e0bfff03 	ldbu	r2,-4(fp)
 201dd9c:	10800570 	cmpltui	r2,r2,21
 201dda0:	1000021e 	bne	r2,zero,201ddac <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201dda4:	00800a84 	movi	r2,42
 201dda8:	00005706 	br	201df08 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ddac:	0005303a 	rdctl	r2,status
 201ddb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ddb4:	e0fffb17 	ldw	r3,-20(fp)
 201ddb8:	00bfff84 	movi	r2,-2
 201ddbc:	1884703a 	and	r2,r3,r2
 201ddc0:	1001703a 	wrctl	status,r2
  
  return context;
 201ddc4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ddc8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201ddcc:	d0a7b503 	ldbu	r2,-24876(gp)
 201ddd0:	10803fcc 	andi	r2,r2,255
 201ddd4:	10000626 	beq	r2,zero,201ddf0 <OSTaskCreate+0x80>
 201ddd8:	e0bff317 	ldw	r2,-52(fp)
 201dddc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dde0:	e0bff417 	ldw	r2,-48(fp)
 201dde4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201dde8:	00800f04 	movi	r2,60
 201ddec:	00004606 	br	201df08 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201ddf0:	e0ffff03 	ldbu	r3,-4(fp)
 201ddf4:	008080f4 	movhi	r2,515
 201ddf8:	10855004 	addi	r2,r2,5440
 201ddfc:	18c7883a 	add	r3,r3,r3
 201de00:	18c7883a 	add	r3,r3,r3
 201de04:	10c5883a 	add	r2,r2,r3
 201de08:	10800017 	ldw	r2,0(r2)
 201de0c:	1000391e 	bne	r2,zero,201def4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201de10:	e0ffff03 	ldbu	r3,-4(fp)
 201de14:	008080f4 	movhi	r2,515
 201de18:	10855004 	addi	r2,r2,5440
 201de1c:	18c7883a 	add	r3,r3,r3
 201de20:	18c7883a 	add	r3,r3,r3
 201de24:	10c5883a 	add	r2,r2,r3
 201de28:	00c00044 	movi	r3,1
 201de2c:	10c00015 	stw	r3,0(r2)
 201de30:	e0bff317 	ldw	r2,-52(fp)
 201de34:	e0bff515 	stw	r2,-44(fp)
 201de38:	e0bff517 	ldw	r2,-44(fp)
 201de3c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201de40:	000f883a 	mov	r7,zero
 201de44:	e1bffe17 	ldw	r6,-8(fp)
 201de48:	e17ffd17 	ldw	r5,-12(fp)
 201de4c:	e13ffc17 	ldw	r4,-16(fp)
 201de50:	20212f40 	call	20212f4 <OSTaskStkInit>
 201de54:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201de58:	e0bfff03 	ldbu	r2,-4(fp)
 201de5c:	d8000215 	stw	zero,8(sp)
 201de60:	d8000115 	stw	zero,4(sp)
 201de64:	d8000015 	stw	zero,0(sp)
 201de68:	000f883a 	mov	r7,zero
 201de6c:	000d883a 	mov	r6,zero
 201de70:	e17ff717 	ldw	r5,-36(fp)
 201de74:	1009883a 	mov	r4,r2
 201de78:	2018f880 	call	2018f88 <OS_TCBInit>
 201de7c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201de80:	e0bff803 	ldbu	r2,-32(fp)
 201de84:	1000061e 	bne	r2,zero,201dea0 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201de88:	d0a7a743 	ldbu	r2,-24931(gp)
 201de8c:	10803fcc 	andi	r2,r2,255
 201de90:	10800058 	cmpnei	r2,r2,1
 201de94:	1000151e 	bne	r2,zero,201deec <OSTaskCreate+0x17c>
                OS_Sched();
 201de98:	2018b880 	call	2018b88 <OS_Sched>
 201de9c:	00001306 	br	201deec <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dea0:	0005303a 	rdctl	r2,status
 201dea4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dea8:	e0fffa17 	ldw	r3,-24(fp)
 201deac:	00bfff84 	movi	r2,-2
 201deb0:	1884703a 	and	r2,r3,r2
 201deb4:	1001703a 	wrctl	status,r2
  
  return context;
 201deb8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201debc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201dec0:	e0ffff03 	ldbu	r3,-4(fp)
 201dec4:	008080f4 	movhi	r2,515
 201dec8:	10855004 	addi	r2,r2,5440
 201decc:	18c7883a 	add	r3,r3,r3
 201ded0:	18c7883a 	add	r3,r3,r3
 201ded4:	10c5883a 	add	r2,r2,r3
 201ded8:	10000015 	stw	zero,0(r2)
 201dedc:	e0bff317 	ldw	r2,-52(fp)
 201dee0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dee4:	e0bff617 	ldw	r2,-40(fp)
 201dee8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201deec:	e0bff803 	ldbu	r2,-32(fp)
 201def0:	00000506 	br	201df08 <OSTaskCreate+0x198>
 201def4:	e0bff317 	ldw	r2,-52(fp)
 201def8:	e0bff915 	stw	r2,-28(fp)
 201defc:	e0bff917 	ldw	r2,-28(fp)
 201df00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201df04:	00800a04 	movi	r2,40
}
 201df08:	e037883a 	mov	sp,fp
 201df0c:	dfc00117 	ldw	ra,4(sp)
 201df10:	df000017 	ldw	fp,0(sp)
 201df14:	dec00204 	addi	sp,sp,8
 201df18:	f800283a 	ret

0201df1c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201df1c:	deffec04 	addi	sp,sp,-80
 201df20:	dfc01315 	stw	ra,76(sp)
 201df24:	df001215 	stw	fp,72(sp)
 201df28:	df001204 	addi	fp,sp,72
 201df2c:	e13ffa15 	stw	r4,-24(fp)
 201df30:	e17ffb15 	stw	r5,-20(fp)
 201df34:	e1bffc15 	stw	r6,-16(fp)
 201df38:	3809883a 	mov	r4,r7
 201df3c:	e0c00217 	ldw	r3,8(fp)
 201df40:	e0800617 	ldw	r2,24(fp)
 201df44:	e13ffd05 	stb	r4,-12(fp)
 201df48:	e0fffe0d 	sth	r3,-8(fp)
 201df4c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201df50:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201df54:	e0bffd03 	ldbu	r2,-12(fp)
 201df58:	10800570 	cmpltui	r2,r2,21
 201df5c:	1000021e 	bne	r2,zero,201df68 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201df60:	00800a84 	movi	r2,42
 201df64:	00006106 	br	201e0ec <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201df68:	0005303a 	rdctl	r2,status
 201df6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201df70:	e0fff917 	ldw	r3,-28(fp)
 201df74:	00bfff84 	movi	r2,-2
 201df78:	1884703a 	and	r2,r3,r2
 201df7c:	1001703a 	wrctl	status,r2
  
  return context;
 201df80:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201df84:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201df88:	d0a7b503 	ldbu	r2,-24876(gp)
 201df8c:	10803fcc 	andi	r2,r2,255
 201df90:	10000626 	beq	r2,zero,201dfac <OSTaskCreateExt+0x90>
 201df94:	e0bff117 	ldw	r2,-60(fp)
 201df98:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201df9c:	e0bff217 	ldw	r2,-56(fp)
 201dfa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201dfa4:	00800f04 	movi	r2,60
 201dfa8:	00005006 	br	201e0ec <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201dfac:	e0fffd03 	ldbu	r3,-12(fp)
 201dfb0:	008080f4 	movhi	r2,515
 201dfb4:	10855004 	addi	r2,r2,5440
 201dfb8:	18c7883a 	add	r3,r3,r3
 201dfbc:	18c7883a 	add	r3,r3,r3
 201dfc0:	10c5883a 	add	r2,r2,r3
 201dfc4:	10800017 	ldw	r2,0(r2)
 201dfc8:	1000431e 	bne	r2,zero,201e0d8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201dfcc:	e0fffd03 	ldbu	r3,-12(fp)
 201dfd0:	008080f4 	movhi	r2,515
 201dfd4:	10855004 	addi	r2,r2,5440
 201dfd8:	18c7883a 	add	r3,r3,r3
 201dfdc:	18c7883a 	add	r3,r3,r3
 201dfe0:	10c5883a 	add	r2,r2,r3
 201dfe4:	00c00044 	movi	r3,1
 201dfe8:	10c00015 	stw	r3,0(r2)
 201dfec:	e0bff117 	ldw	r2,-60(fp)
 201dff0:	e0bff315 	stw	r2,-52(fp)
 201dff4:	e0bff317 	ldw	r2,-52(fp)
 201dff8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201dffc:	e0bfff0b 	ldhu	r2,-4(fp)
 201e000:	100d883a 	mov	r6,r2
 201e004:	e1400417 	ldw	r5,16(fp)
 201e008:	e1000317 	ldw	r4,12(fp)
 201e00c:	201ef7c0 	call	201ef7c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201e010:	e0bfff0b 	ldhu	r2,-4(fp)
 201e014:	100f883a 	mov	r7,r2
 201e018:	e1bffc17 	ldw	r6,-16(fp)
 201e01c:	e17ffb17 	ldw	r5,-20(fp)
 201e020:	e13ffa17 	ldw	r4,-24(fp)
 201e024:	20212f40 	call	20212f4 <OSTaskStkInit>
 201e028:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201e02c:	e0fffd03 	ldbu	r3,-12(fp)
 201e030:	e13ffe0b 	ldhu	r4,-8(fp)
 201e034:	e0bfff0b 	ldhu	r2,-4(fp)
 201e038:	d8800215 	stw	r2,8(sp)
 201e03c:	e0800517 	ldw	r2,20(fp)
 201e040:	d8800115 	stw	r2,4(sp)
 201e044:	e0800417 	ldw	r2,16(fp)
 201e048:	d8800015 	stw	r2,0(sp)
 201e04c:	200f883a 	mov	r7,r4
 201e050:	e1800317 	ldw	r6,12(fp)
 201e054:	e17ff517 	ldw	r5,-44(fp)
 201e058:	1809883a 	mov	r4,r3
 201e05c:	2018f880 	call	2018f88 <OS_TCBInit>
 201e060:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201e064:	e0bff603 	ldbu	r2,-40(fp)
 201e068:	1000061e 	bne	r2,zero,201e084 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201e06c:	d0a7a743 	ldbu	r2,-24931(gp)
 201e070:	10803fcc 	andi	r2,r2,255
 201e074:	10800058 	cmpnei	r2,r2,1
 201e078:	1000151e 	bne	r2,zero,201e0d0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201e07c:	2018b880 	call	2018b88 <OS_Sched>
 201e080:	00001306 	br	201e0d0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e084:	0005303a 	rdctl	r2,status
 201e088:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e08c:	e0fff817 	ldw	r3,-32(fp)
 201e090:	00bfff84 	movi	r2,-2
 201e094:	1884703a 	and	r2,r3,r2
 201e098:	1001703a 	wrctl	status,r2
  
  return context;
 201e09c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201e0a0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201e0a4:	e0fffd03 	ldbu	r3,-12(fp)
 201e0a8:	008080f4 	movhi	r2,515
 201e0ac:	10855004 	addi	r2,r2,5440
 201e0b0:	18c7883a 	add	r3,r3,r3
 201e0b4:	18c7883a 	add	r3,r3,r3
 201e0b8:	10c5883a 	add	r2,r2,r3
 201e0bc:	10000015 	stw	zero,0(r2)
 201e0c0:	e0bff117 	ldw	r2,-60(fp)
 201e0c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e0c8:	e0bff417 	ldw	r2,-48(fp)
 201e0cc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201e0d0:	e0bff603 	ldbu	r2,-40(fp)
 201e0d4:	00000506 	br	201e0ec <OSTaskCreateExt+0x1d0>
 201e0d8:	e0bff117 	ldw	r2,-60(fp)
 201e0dc:	e0bff715 	stw	r2,-36(fp)
 201e0e0:	e0bff717 	ldw	r2,-36(fp)
 201e0e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201e0e8:	00800a04 	movi	r2,40
}
 201e0ec:	e037883a 	mov	sp,fp
 201e0f0:	dfc00117 	ldw	ra,4(sp)
 201e0f4:	df000017 	ldw	fp,0(sp)
 201e0f8:	dec00204 	addi	sp,sp,8
 201e0fc:	f800283a 	ret

0201e100 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201e100:	defff404 	addi	sp,sp,-48
 201e104:	dfc00b15 	stw	ra,44(sp)
 201e108:	df000a15 	stw	fp,40(sp)
 201e10c:	df000a04 	addi	fp,sp,40
 201e110:	2005883a 	mov	r2,r4
 201e114:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201e118:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201e11c:	d0a7b503 	ldbu	r2,-24876(gp)
 201e120:	10803fcc 	andi	r2,r2,255
 201e124:	10000226 	beq	r2,zero,201e130 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201e128:	00801004 	movi	r2,64
 201e12c:	0000c006 	br	201e430 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201e130:	e0bfff03 	ldbu	r2,-4(fp)
 201e134:	10800518 	cmpnei	r2,r2,20
 201e138:	1000021e 	bne	r2,zero,201e144 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201e13c:	00800f84 	movi	r2,62
 201e140:	0000bb06 	br	201e430 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201e144:	e0bfff03 	ldbu	r2,-4(fp)
 201e148:	10800530 	cmpltui	r2,r2,20
 201e14c:	1000051e 	bne	r2,zero,201e164 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201e150:	e0bfff03 	ldbu	r2,-4(fp)
 201e154:	10803fe0 	cmpeqi	r2,r2,255
 201e158:	1000021e 	bne	r2,zero,201e164 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201e15c:	00800a84 	movi	r2,42
 201e160:	0000b306 	br	201e430 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e164:	0005303a 	rdctl	r2,status
 201e168:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e16c:	e0fffe17 	ldw	r3,-8(fp)
 201e170:	00bfff84 	movi	r2,-2
 201e174:	1884703a 	and	r2,r3,r2
 201e178:	1001703a 	wrctl	status,r2
  
  return context;
 201e17c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201e180:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201e184:	e0bfff03 	ldbu	r2,-4(fp)
 201e188:	10803fd8 	cmpnei	r2,r2,255
 201e18c:	1000031e 	bne	r2,zero,201e19c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201e190:	d0a7b617 	ldw	r2,-24872(gp)
 201e194:	10800c83 	ldbu	r2,50(r2)
 201e198:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e19c:	e0ffff03 	ldbu	r3,-4(fp)
 201e1a0:	008080f4 	movhi	r2,515
 201e1a4:	10855004 	addi	r2,r2,5440
 201e1a8:	18c7883a 	add	r3,r3,r3
 201e1ac:	18c7883a 	add	r3,r3,r3
 201e1b0:	10c5883a 	add	r2,r2,r3
 201e1b4:	10800017 	ldw	r2,0(r2)
 201e1b8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201e1bc:	e0bff817 	ldw	r2,-32(fp)
 201e1c0:	1000061e 	bne	r2,zero,201e1dc <OSTaskDel+0xdc>
 201e1c4:	e0bff617 	ldw	r2,-40(fp)
 201e1c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e1cc:	e0bff717 	ldw	r2,-36(fp)
 201e1d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e1d4:	008010c4 	movi	r2,67
 201e1d8:	00009506 	br	201e430 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201e1dc:	e0bff817 	ldw	r2,-32(fp)
 201e1e0:	10800058 	cmpnei	r2,r2,1
 201e1e4:	1000061e 	bne	r2,zero,201e200 <OSTaskDel+0x100>
 201e1e8:	e0bff617 	ldw	r2,-40(fp)
 201e1ec:	e0bff915 	stw	r2,-28(fp)
 201e1f0:	e0bff917 	ldw	r2,-28(fp)
 201e1f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201e1f8:	00800f44 	movi	r2,61
 201e1fc:	00008c06 	br	201e430 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201e200:	e0bff817 	ldw	r2,-32(fp)
 201e204:	10800d03 	ldbu	r2,52(r2)
 201e208:	10c03fcc 	andi	r3,r2,255
 201e20c:	e0bff817 	ldw	r2,-32(fp)
 201e210:	10800d03 	ldbu	r2,52(r2)
 201e214:	11003fcc 	andi	r4,r2,255
 201e218:	d0a7b344 	addi	r2,gp,-24883
 201e21c:	2085883a 	add	r2,r4,r2
 201e220:	10800003 	ldbu	r2,0(r2)
 201e224:	1009883a 	mov	r4,r2
 201e228:	e0bff817 	ldw	r2,-32(fp)
 201e22c:	10800d43 	ldbu	r2,53(r2)
 201e230:	0084303a 	nor	r2,zero,r2
 201e234:	2084703a 	and	r2,r4,r2
 201e238:	1009883a 	mov	r4,r2
 201e23c:	d0a7b344 	addi	r2,gp,-24883
 201e240:	1885883a 	add	r2,r3,r2
 201e244:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201e248:	e0bff817 	ldw	r2,-32(fp)
 201e24c:	10800d03 	ldbu	r2,52(r2)
 201e250:	10c03fcc 	andi	r3,r2,255
 201e254:	d0a7b344 	addi	r2,gp,-24883
 201e258:	1885883a 	add	r2,r3,r2
 201e25c:	10800003 	ldbu	r2,0(r2)
 201e260:	10803fcc 	andi	r2,r2,255
 201e264:	1000071e 	bne	r2,zero,201e284 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201e268:	e0bff817 	ldw	r2,-32(fp)
 201e26c:	10800d83 	ldbu	r2,54(r2)
 201e270:	0084303a 	nor	r2,zero,r2
 201e274:	1007883a 	mov	r3,r2
 201e278:	d0a7b303 	ldbu	r2,-24884(gp)
 201e27c:	1884703a 	and	r2,r3,r2
 201e280:	d0a7b305 	stb	r2,-24884(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201e284:	e0bff817 	ldw	r2,-32(fp)
 201e288:	10800717 	ldw	r2,28(r2)
 201e28c:	10000526 	beq	r2,zero,201e2a4 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201e290:	e0bff817 	ldw	r2,-32(fp)
 201e294:	10800717 	ldw	r2,28(r2)
 201e298:	100b883a 	mov	r5,r2
 201e29c:	e13ff817 	ldw	r4,-32(fp)
 201e2a0:	20185340 	call	2018534 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201e2a4:	e0bff817 	ldw	r2,-32(fp)
 201e2a8:	10800817 	ldw	r2,32(r2)
 201e2ac:	10000526 	beq	r2,zero,201e2c4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201e2b0:	e0bff817 	ldw	r2,-32(fp)
 201e2b4:	10800817 	ldw	r2,32(r2)
 201e2b8:	100b883a 	mov	r5,r2
 201e2bc:	e13ff817 	ldw	r4,-32(fp)
 201e2c0:	20185ec0 	call	20185ec <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201e2c4:	e0bff817 	ldw	r2,-32(fp)
 201e2c8:	10800a17 	ldw	r2,40(r2)
 201e2cc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201e2d0:	e0bffb17 	ldw	r2,-20(fp)
 201e2d4:	10000226 	beq	r2,zero,201e2e0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201e2d8:	e13ffb17 	ldw	r4,-20(fp)
 201e2dc:	201aa5c0 	call	201aa5c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201e2e0:	e0bff817 	ldw	r2,-32(fp)
 201e2e4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201e2e8:	e0bff817 	ldw	r2,-32(fp)
 201e2ec:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201e2f0:	e0bff817 	ldw	r2,-32(fp)
 201e2f4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201e2f8:	d0a7a703 	ldbu	r2,-24932(gp)
 201e2fc:	10803fcc 	andi	r2,r2,255
 201e300:	10803fe0 	cmpeqi	r2,r2,255
 201e304:	1000031e 	bne	r2,zero,201e314 <OSTaskDel+0x214>
        OSLockNesting++;
 201e308:	d0a7a703 	ldbu	r2,-24932(gp)
 201e30c:	10800044 	addi	r2,r2,1
 201e310:	d0a7a705 	stb	r2,-24932(gp)
 201e314:	e0bff617 	ldw	r2,-40(fp)
 201e318:	e0bffd15 	stw	r2,-12(fp)
 201e31c:	e0bffd17 	ldw	r2,-12(fp)
 201e320:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201e324:	201811c0 	call	201811c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e328:	0005303a 	rdctl	r2,status
 201e32c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e330:	e0fffa17 	ldw	r3,-24(fp)
 201e334:	00bfff84 	movi	r2,-2
 201e338:	1884703a 	and	r2,r3,r2
 201e33c:	1001703a 	wrctl	status,r2
  
  return context;
 201e340:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201e344:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201e348:	d0a7a703 	ldbu	r2,-24932(gp)
 201e34c:	10803fcc 	andi	r2,r2,255
 201e350:	10000326 	beq	r2,zero,201e360 <OSTaskDel+0x260>
        OSLockNesting--;
 201e354:	d0a7a703 	ldbu	r2,-24932(gp)
 201e358:	10bfffc4 	addi	r2,r2,-1
 201e35c:	d0a7a705 	stb	r2,-24932(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201e360:	e13ff817 	ldw	r4,-32(fp)
 201e364:	20214740 	call	2021474 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201e368:	d0a7af43 	ldbu	r2,-24899(gp)
 201e36c:	10bfffc4 	addi	r2,r2,-1
 201e370:	d0a7af45 	stb	r2,-24899(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201e374:	e0ffff03 	ldbu	r3,-4(fp)
 201e378:	008080f4 	movhi	r2,515
 201e37c:	10855004 	addi	r2,r2,5440
 201e380:	18c7883a 	add	r3,r3,r3
 201e384:	18c7883a 	add	r3,r3,r3
 201e388:	10c5883a 	add	r2,r2,r3
 201e38c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201e390:	e0bff817 	ldw	r2,-32(fp)
 201e394:	10800617 	ldw	r2,24(r2)
 201e398:	1000071e 	bne	r2,zero,201e3b8 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201e39c:	e0bff817 	ldw	r2,-32(fp)
 201e3a0:	10800517 	ldw	r2,20(r2)
 201e3a4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201e3a8:	e0bff817 	ldw	r2,-32(fp)
 201e3ac:	10800517 	ldw	r2,20(r2)
 201e3b0:	d0a7aa15 	stw	r2,-24920(gp)
 201e3b4:	00000a06 	br	201e3e0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201e3b8:	e0bff817 	ldw	r2,-32(fp)
 201e3bc:	10800617 	ldw	r2,24(r2)
 201e3c0:	e0fff817 	ldw	r3,-32(fp)
 201e3c4:	18c00517 	ldw	r3,20(r3)
 201e3c8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201e3cc:	e0bff817 	ldw	r2,-32(fp)
 201e3d0:	10800517 	ldw	r2,20(r2)
 201e3d4:	e0fff817 	ldw	r3,-32(fp)
 201e3d8:	18c00617 	ldw	r3,24(r3)
 201e3dc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201e3e0:	d0e7ae17 	ldw	r3,-24904(gp)
 201e3e4:	e0bff817 	ldw	r2,-32(fp)
 201e3e8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201e3ec:	e0bff817 	ldw	r2,-32(fp)
 201e3f0:	d0a7ae15 	stw	r2,-24904(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201e3f4:	e0bff817 	ldw	r2,-32(fp)
 201e3f8:	00c00fc4 	movi	r3,63
 201e3fc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201e400:	e0bff817 	ldw	r2,-32(fp)
 201e404:	10001345 	stb	zero,77(r2)
 201e408:	e0bff617 	ldw	r2,-40(fp)
 201e40c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e410:	e0bffc17 	ldw	r2,-16(fp)
 201e414:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201e418:	d0a7a743 	ldbu	r2,-24931(gp)
 201e41c:	10803fcc 	andi	r2,r2,255
 201e420:	10800058 	cmpnei	r2,r2,1
 201e424:	1000011e 	bne	r2,zero,201e42c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201e428:	2018b880 	call	2018b88 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201e42c:	0005883a 	mov	r2,zero
}
 201e430:	e037883a 	mov	sp,fp
 201e434:	dfc00117 	ldw	ra,4(sp)
 201e438:	df000017 	ldw	fp,0(sp)
 201e43c:	dec00204 	addi	sp,sp,8
 201e440:	f800283a 	ret

0201e444 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201e444:	defff504 	addi	sp,sp,-44
 201e448:	df000a15 	stw	fp,40(sp)
 201e44c:	df000a04 	addi	fp,sp,40
 201e450:	2005883a 	mov	r2,r4
 201e454:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201e458:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201e45c:	e0bfff03 	ldbu	r2,-4(fp)
 201e460:	10800518 	cmpnei	r2,r2,20
 201e464:	1000021e 	bne	r2,zero,201e470 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201e468:	00800f84 	movi	r2,62
 201e46c:	00004506 	br	201e584 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201e470:	e0bfff03 	ldbu	r2,-4(fp)
 201e474:	10800530 	cmpltui	r2,r2,20
 201e478:	1000051e 	bne	r2,zero,201e490 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201e47c:	e0bfff03 	ldbu	r2,-4(fp)
 201e480:	10803fe0 	cmpeqi	r2,r2,255
 201e484:	1000021e 	bne	r2,zero,201e490 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201e488:	00800a84 	movi	r2,42
 201e48c:	00003d06 	br	201e584 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201e490:	e0bfff03 	ldbu	r2,-4(fp)
 201e494:	10803fd8 	cmpnei	r2,r2,255
 201e498:	1000111e 	bne	r2,zero,201e4e0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e49c:	0005303a 	rdctl	r2,status
 201e4a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e4a4:	e0fff917 	ldw	r3,-28(fp)
 201e4a8:	00bfff84 	movi	r2,-2
 201e4ac:	1884703a 	and	r2,r3,r2
 201e4b0:	1001703a 	wrctl	status,r2
  
  return context;
 201e4b4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201e4b8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201e4bc:	d0a7b617 	ldw	r2,-24872(gp)
 201e4c0:	10800dc3 	ldbu	r2,55(r2)
 201e4c4:	e0bff805 	stb	r2,-32(fp)
 201e4c8:	e0bff617 	ldw	r2,-40(fp)
 201e4cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e4d0:	e0bffe17 	ldw	r2,-8(fp)
 201e4d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201e4d8:	e0bff803 	ldbu	r2,-32(fp)
 201e4dc:	00002906 	br	201e584 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e4e0:	0005303a 	rdctl	r2,status
 201e4e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e4e8:	e0fff717 	ldw	r3,-36(fp)
 201e4ec:	00bfff84 	movi	r2,-2
 201e4f0:	1884703a 	and	r2,r3,r2
 201e4f4:	1001703a 	wrctl	status,r2
  
  return context;
 201e4f8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201e4fc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201e500:	e0ffff03 	ldbu	r3,-4(fp)
 201e504:	008080f4 	movhi	r2,515
 201e508:	10855004 	addi	r2,r2,5440
 201e50c:	18c7883a 	add	r3,r3,r3
 201e510:	18c7883a 	add	r3,r3,r3
 201e514:	10c5883a 	add	r2,r2,r3
 201e518:	10800017 	ldw	r2,0(r2)
 201e51c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201e520:	e0bffb17 	ldw	r2,-20(fp)
 201e524:	1000061e 	bne	r2,zero,201e540 <OSTaskDelReq+0xfc>
 201e528:	e0bff617 	ldw	r2,-40(fp)
 201e52c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e530:	e0bffa17 	ldw	r2,-24(fp)
 201e534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201e538:	008010c4 	movi	r2,67
 201e53c:	00001106 	br	201e584 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201e540:	e0bffb17 	ldw	r2,-20(fp)
 201e544:	10800058 	cmpnei	r2,r2,1
 201e548:	1000061e 	bne	r2,zero,201e564 <OSTaskDelReq+0x120>
 201e54c:	e0bff617 	ldw	r2,-40(fp)
 201e550:	e0bffc15 	stw	r2,-16(fp)
 201e554:	e0bffc17 	ldw	r2,-16(fp)
 201e558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201e55c:	00800f44 	movi	r2,61
 201e560:	00000806 	br	201e584 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201e564:	e0bffb17 	ldw	r2,-20(fp)
 201e568:	00c00fc4 	movi	r3,63
 201e56c:	10c00dc5 	stb	r3,55(r2)
 201e570:	e0bff617 	ldw	r2,-40(fp)
 201e574:	e0bffd15 	stw	r2,-12(fp)
 201e578:	e0bffd17 	ldw	r2,-12(fp)
 201e57c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201e580:	0005883a 	mov	r2,zero
}
 201e584:	e037883a 	mov	sp,fp
 201e588:	df000017 	ldw	fp,0(sp)
 201e58c:	dec00104 	addi	sp,sp,4
 201e590:	f800283a 	ret

0201e594 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201e594:	defff404 	addi	sp,sp,-48
 201e598:	dfc00b15 	stw	ra,44(sp)
 201e59c:	df000a15 	stw	fp,40(sp)
 201e5a0:	df000a04 	addi	fp,sp,40
 201e5a4:	2005883a 	mov	r2,r4
 201e5a8:	e17ffe15 	stw	r5,-8(fp)
 201e5ac:	e1bfff15 	stw	r6,-4(fp)
 201e5b0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201e5b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201e5b8:	e0bfff17 	ldw	r2,-4(fp)
 201e5bc:	1000021e 	bne	r2,zero,201e5c8 <OSTaskNameGet+0x34>
        return (0);
 201e5c0:	0005883a 	mov	r2,zero
 201e5c4:	00005406 	br	201e718 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201e5c8:	e0bffd03 	ldbu	r2,-12(fp)
 201e5cc:	10800570 	cmpltui	r2,r2,21
 201e5d0:	1000081e 	bne	r2,zero,201e5f4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201e5d4:	e0bffd03 	ldbu	r2,-12(fp)
 201e5d8:	10803fe0 	cmpeqi	r2,r2,255
 201e5dc:	1000051e 	bne	r2,zero,201e5f4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201e5e0:	e0bfff17 	ldw	r2,-4(fp)
 201e5e4:	00c00a84 	movi	r3,42
 201e5e8:	10c00005 	stb	r3,0(r2)
            return (0);
 201e5ec:	0005883a 	mov	r2,zero
 201e5f0:	00004906 	br	201e718 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201e5f4:	e0bffe17 	ldw	r2,-8(fp)
 201e5f8:	1000051e 	bne	r2,zero,201e610 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201e5fc:	e0bfff17 	ldw	r2,-4(fp)
 201e600:	00c00304 	movi	r3,12
 201e604:	10c00005 	stb	r3,0(r2)
        return (0);
 201e608:	0005883a 	mov	r2,zero
 201e60c:	00004206 	br	201e718 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201e610:	d0a7b503 	ldbu	r2,-24876(gp)
 201e614:	10803fcc 	andi	r2,r2,255
 201e618:	10000526 	beq	r2,zero,201e630 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201e61c:	e0bfff17 	ldw	r2,-4(fp)
 201e620:	00c00444 	movi	r3,17
 201e624:	10c00005 	stb	r3,0(r2)
        return (0);
 201e628:	0005883a 	mov	r2,zero
 201e62c:	00003a06 	br	201e718 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e630:	0005303a 	rdctl	r2,status
 201e634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e638:	e0fffc17 	ldw	r3,-16(fp)
 201e63c:	00bfff84 	movi	r2,-2
 201e640:	1884703a 	and	r2,r3,r2
 201e644:	1001703a 	wrctl	status,r2
  
  return context;
 201e648:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201e64c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201e650:	e0bffd03 	ldbu	r2,-12(fp)
 201e654:	10803fd8 	cmpnei	r2,r2,255
 201e658:	1000031e 	bne	r2,zero,201e668 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201e65c:	d0a7b617 	ldw	r2,-24872(gp)
 201e660:	10800c83 	ldbu	r2,50(r2)
 201e664:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e668:	e0fffd03 	ldbu	r3,-12(fp)
 201e66c:	008080f4 	movhi	r2,515
 201e670:	10855004 	addi	r2,r2,5440
 201e674:	18c7883a 	add	r3,r3,r3
 201e678:	18c7883a 	add	r3,r3,r3
 201e67c:	10c5883a 	add	r2,r2,r3
 201e680:	10800017 	ldw	r2,0(r2)
 201e684:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201e688:	e0bff817 	ldw	r2,-32(fp)
 201e68c:	1000091e 	bne	r2,zero,201e6b4 <OSTaskNameGet+0x120>
 201e690:	e0bff617 	ldw	r2,-40(fp)
 201e694:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e698:	e0bff717 	ldw	r2,-36(fp)
 201e69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e6a0:	e0bfff17 	ldw	r2,-4(fp)
 201e6a4:	00c010c4 	movi	r3,67
 201e6a8:	10c00005 	stb	r3,0(r2)
        return (0);
 201e6ac:	0005883a 	mov	r2,zero
 201e6b0:	00001906 	br	201e718 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201e6b4:	e0bff817 	ldw	r2,-32(fp)
 201e6b8:	10800058 	cmpnei	r2,r2,1
 201e6bc:	1000091e 	bne	r2,zero,201e6e4 <OSTaskNameGet+0x150>
 201e6c0:	e0bff617 	ldw	r2,-40(fp)
 201e6c4:	e0bff915 	stw	r2,-28(fp)
 201e6c8:	e0bff917 	ldw	r2,-28(fp)
 201e6cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e6d0:	e0bfff17 	ldw	r2,-4(fp)
 201e6d4:	00c010c4 	movi	r3,67
 201e6d8:	10c00005 	stb	r3,0(r2)
        return (0);
 201e6dc:	0005883a 	mov	r2,zero
 201e6e0:	00000d06 	br	201e718 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201e6e4:	e0bff817 	ldw	r2,-32(fp)
 201e6e8:	10801304 	addi	r2,r2,76
 201e6ec:	100b883a 	mov	r5,r2
 201e6f0:	e13ffe17 	ldw	r4,-8(fp)
 201e6f4:	2018ccc0 	call	2018ccc <OS_StrCopy>
 201e6f8:	e0bffb05 	stb	r2,-20(fp)
 201e6fc:	e0bff617 	ldw	r2,-40(fp)
 201e700:	e0bffa15 	stw	r2,-24(fp)
 201e704:	e0bffa17 	ldw	r2,-24(fp)
 201e708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201e70c:	e0bfff17 	ldw	r2,-4(fp)
 201e710:	10000005 	stb	zero,0(r2)
    return (len);
 201e714:	e0bffb03 	ldbu	r2,-20(fp)
}
 201e718:	e037883a 	mov	sp,fp
 201e71c:	dfc00117 	ldw	ra,4(sp)
 201e720:	df000017 	ldw	fp,0(sp)
 201e724:	dec00204 	addi	sp,sp,8
 201e728:	f800283a 	ret

0201e72c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201e72c:	defff304 	addi	sp,sp,-52
 201e730:	dfc00c15 	stw	ra,48(sp)
 201e734:	df000b15 	stw	fp,44(sp)
 201e738:	df000b04 	addi	fp,sp,44
 201e73c:	2005883a 	mov	r2,r4
 201e740:	e17ffe15 	stw	r5,-8(fp)
 201e744:	e1bfff15 	stw	r6,-4(fp)
 201e748:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201e74c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201e750:	e0bfff17 	ldw	r2,-4(fp)
 201e754:	10005c26 	beq	r2,zero,201e8c8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201e758:	e0bffd03 	ldbu	r2,-12(fp)
 201e75c:	10800570 	cmpltui	r2,r2,21
 201e760:	1000071e 	bne	r2,zero,201e780 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201e764:	e0bffd03 	ldbu	r2,-12(fp)
 201e768:	10803fe0 	cmpeqi	r2,r2,255
 201e76c:	1000041e 	bne	r2,zero,201e780 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201e770:	e0bfff17 	ldw	r2,-4(fp)
 201e774:	00c00a84 	movi	r3,42
 201e778:	10c00005 	stb	r3,0(r2)
            return;
 201e77c:	00005306 	br	201e8cc <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201e780:	e0bffe17 	ldw	r2,-8(fp)
 201e784:	1000041e 	bne	r2,zero,201e798 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201e788:	e0bfff17 	ldw	r2,-4(fp)
 201e78c:	00c00304 	movi	r3,12
 201e790:	10c00005 	stb	r3,0(r2)
        return;
 201e794:	00004d06 	br	201e8cc <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201e798:	d0a7b503 	ldbu	r2,-24876(gp)
 201e79c:	10803fcc 	andi	r2,r2,255
 201e7a0:	10000426 	beq	r2,zero,201e7b4 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201e7a4:	e0bfff17 	ldw	r2,-4(fp)
 201e7a8:	00c00484 	movi	r3,18
 201e7ac:	10c00005 	stb	r3,0(r2)
        return;
 201e7b0:	00004606 	br	201e8cc <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e7b4:	0005303a 	rdctl	r2,status
 201e7b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e7bc:	e0fffc17 	ldw	r3,-16(fp)
 201e7c0:	00bfff84 	movi	r2,-2
 201e7c4:	1884703a 	and	r2,r3,r2
 201e7c8:	1001703a 	wrctl	status,r2
  
  return context;
 201e7cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201e7d0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201e7d4:	e0bffd03 	ldbu	r2,-12(fp)
 201e7d8:	10803fd8 	cmpnei	r2,r2,255
 201e7dc:	1000031e 	bne	r2,zero,201e7ec <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201e7e0:	d0a7b617 	ldw	r2,-24872(gp)
 201e7e4:	10800c83 	ldbu	r2,50(r2)
 201e7e8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e7ec:	e0fffd03 	ldbu	r3,-12(fp)
 201e7f0:	008080f4 	movhi	r2,515
 201e7f4:	10855004 	addi	r2,r2,5440
 201e7f8:	18c7883a 	add	r3,r3,r3
 201e7fc:	18c7883a 	add	r3,r3,r3
 201e800:	10c5883a 	add	r2,r2,r3
 201e804:	10800017 	ldw	r2,0(r2)
 201e808:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201e80c:	e0bff717 	ldw	r2,-36(fp)
 201e810:	1000081e 	bne	r2,zero,201e834 <OSTaskNameSet+0x108>
 201e814:	e0bff517 	ldw	r2,-44(fp)
 201e818:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e81c:	e0bff617 	ldw	r2,-40(fp)
 201e820:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e824:	e0bfff17 	ldw	r2,-4(fp)
 201e828:	00c010c4 	movi	r3,67
 201e82c:	10c00005 	stb	r3,0(r2)
        return;
 201e830:	00002606 	br	201e8cc <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201e834:	e0bff717 	ldw	r2,-36(fp)
 201e838:	10800058 	cmpnei	r2,r2,1
 201e83c:	1000081e 	bne	r2,zero,201e860 <OSTaskNameSet+0x134>
 201e840:	e0bff517 	ldw	r2,-44(fp)
 201e844:	e0bff815 	stw	r2,-32(fp)
 201e848:	e0bff817 	ldw	r2,-32(fp)
 201e84c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e850:	e0bfff17 	ldw	r2,-4(fp)
 201e854:	00c010c4 	movi	r3,67
 201e858:	10c00005 	stb	r3,0(r2)
        return;
 201e85c:	00001b06 	br	201e8cc <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201e860:	e13ffe17 	ldw	r4,-8(fp)
 201e864:	2018d400 	call	2018d40 <OS_StrLen>
 201e868:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201e86c:	e0bffa03 	ldbu	r2,-24(fp)
 201e870:	10800830 	cmpltui	r2,r2,32
 201e874:	1000081e 	bne	r2,zero,201e898 <OSTaskNameSet+0x16c>
 201e878:	e0bff517 	ldw	r2,-44(fp)
 201e87c:	e0bff915 	stw	r2,-28(fp)
 201e880:	e0bff917 	ldw	r2,-28(fp)
 201e884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201e888:	e0bfff17 	ldw	r2,-4(fp)
 201e88c:	00c01044 	movi	r3,65
 201e890:	10c00005 	stb	r3,0(r2)
        return;
 201e894:	00000d06 	br	201e8cc <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201e898:	e0bff717 	ldw	r2,-36(fp)
 201e89c:	10801304 	addi	r2,r2,76
 201e8a0:	e17ffe17 	ldw	r5,-8(fp)
 201e8a4:	1009883a 	mov	r4,r2
 201e8a8:	2018ccc0 	call	2018ccc <OS_StrCopy>
 201e8ac:	e0bff517 	ldw	r2,-44(fp)
 201e8b0:	e0bffb15 	stw	r2,-20(fp)
 201e8b4:	e0bffb17 	ldw	r2,-20(fp)
 201e8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201e8bc:	e0bfff17 	ldw	r2,-4(fp)
 201e8c0:	10000005 	stb	zero,0(r2)
 201e8c4:	00000106 	br	201e8cc <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201e8c8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201e8cc:	e037883a 	mov	sp,fp
 201e8d0:	dfc00117 	ldw	ra,4(sp)
 201e8d4:	df000017 	ldw	fp,0(sp)
 201e8d8:	dec00204 	addi	sp,sp,8
 201e8dc:	f800283a 	ret

0201e8e0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201e8e0:	defff404 	addi	sp,sp,-48
 201e8e4:	dfc00b15 	stw	ra,44(sp)
 201e8e8:	df000a15 	stw	fp,40(sp)
 201e8ec:	df000a04 	addi	fp,sp,40
 201e8f0:	2005883a 	mov	r2,r4
 201e8f4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201e8f8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201e8fc:	e0bfff03 	ldbu	r2,-4(fp)
 201e900:	10800530 	cmpltui	r2,r2,20
 201e904:	1000021e 	bne	r2,zero,201e910 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201e908:	00800a84 	movi	r2,42
 201e90c:	00006406 	br	201eaa0 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e910:	0005303a 	rdctl	r2,status
 201e914:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e918:	e0fffe17 	ldw	r3,-8(fp)
 201e91c:	00bfff84 	movi	r2,-2
 201e920:	1884703a 	and	r2,r3,r2
 201e924:	1001703a 	wrctl	status,r2
  
  return context;
 201e928:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e92c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201e930:	e0ffff03 	ldbu	r3,-4(fp)
 201e934:	008080f4 	movhi	r2,515
 201e938:	10855004 	addi	r2,r2,5440
 201e93c:	18c7883a 	add	r3,r3,r3
 201e940:	18c7883a 	add	r3,r3,r3
 201e944:	10c5883a 	add	r2,r2,r3
 201e948:	10800017 	ldw	r2,0(r2)
 201e94c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201e950:	e0bff817 	ldw	r2,-32(fp)
 201e954:	1000061e 	bne	r2,zero,201e970 <OSTaskResume+0x90>
 201e958:	e0bff617 	ldw	r2,-40(fp)
 201e95c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e960:	e0bff717 	ldw	r2,-36(fp)
 201e964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201e968:	00801184 	movi	r2,70
 201e96c:	00004c06 	br	201eaa0 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201e970:	e0bff817 	ldw	r2,-32(fp)
 201e974:	10800058 	cmpnei	r2,r2,1
 201e978:	1000061e 	bne	r2,zero,201e994 <OSTaskResume+0xb4>
 201e97c:	e0bff617 	ldw	r2,-40(fp)
 201e980:	e0bff915 	stw	r2,-28(fp)
 201e984:	e0bff917 	ldw	r2,-28(fp)
 201e988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e98c:	008010c4 	movi	r2,67
 201e990:	00004306 	br	201eaa0 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201e994:	e0bff817 	ldw	r2,-32(fp)
 201e998:	10800c03 	ldbu	r2,48(r2)
 201e99c:	10803fcc 	andi	r2,r2,255
 201e9a0:	1080020c 	andi	r2,r2,8
 201e9a4:	10003926 	beq	r2,zero,201ea8c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201e9a8:	e0bff817 	ldw	r2,-32(fp)
 201e9ac:	10c00c03 	ldbu	r3,48(r2)
 201e9b0:	00bffdc4 	movi	r2,-9
 201e9b4:	1884703a 	and	r2,r3,r2
 201e9b8:	1007883a 	mov	r3,r2
 201e9bc:	e0bff817 	ldw	r2,-32(fp)
 201e9c0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201e9c4:	e0bff817 	ldw	r2,-32(fp)
 201e9c8:	10800c03 	ldbu	r2,48(r2)
 201e9cc:	10803fcc 	andi	r2,r2,255
 201e9d0:	1000281e 	bne	r2,zero,201ea74 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201e9d4:	e0bff817 	ldw	r2,-32(fp)
 201e9d8:	10800b8b 	ldhu	r2,46(r2)
 201e9dc:	10bfffcc 	andi	r2,r2,65535
 201e9e0:	10001f1e 	bne	r2,zero,201ea60 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201e9e4:	e0bff817 	ldw	r2,-32(fp)
 201e9e8:	10c00d83 	ldbu	r3,54(r2)
 201e9ec:	d0a7b303 	ldbu	r2,-24884(gp)
 201e9f0:	1884b03a 	or	r2,r3,r2
 201e9f4:	d0a7b305 	stb	r2,-24884(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201e9f8:	e0bff817 	ldw	r2,-32(fp)
 201e9fc:	10800d03 	ldbu	r2,52(r2)
 201ea00:	10c03fcc 	andi	r3,r2,255
 201ea04:	e0bff817 	ldw	r2,-32(fp)
 201ea08:	10800d03 	ldbu	r2,52(r2)
 201ea0c:	11003fcc 	andi	r4,r2,255
 201ea10:	d0a7b344 	addi	r2,gp,-24883
 201ea14:	2085883a 	add	r2,r4,r2
 201ea18:	11000003 	ldbu	r4,0(r2)
 201ea1c:	e0bff817 	ldw	r2,-32(fp)
 201ea20:	10800d43 	ldbu	r2,53(r2)
 201ea24:	2084b03a 	or	r2,r4,r2
 201ea28:	1009883a 	mov	r4,r2
 201ea2c:	d0a7b344 	addi	r2,gp,-24883
 201ea30:	1885883a 	add	r2,r3,r2
 201ea34:	11000005 	stb	r4,0(r2)
 201ea38:	e0bff617 	ldw	r2,-40(fp)
 201ea3c:	e0bffa15 	stw	r2,-24(fp)
 201ea40:	e0bffa17 	ldw	r2,-24(fp)
 201ea44:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201ea48:	d0a7a743 	ldbu	r2,-24931(gp)
 201ea4c:	10803fcc 	andi	r2,r2,255
 201ea50:	10800058 	cmpnei	r2,r2,1
 201ea54:	10000b1e 	bne	r2,zero,201ea84 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201ea58:	2018b880 	call	2018b88 <OS_Sched>
 201ea5c:	00000906 	br	201ea84 <OSTaskResume+0x1a4>
 201ea60:	e0bff617 	ldw	r2,-40(fp)
 201ea64:	e0bffb15 	stw	r2,-20(fp)
 201ea68:	e0bffb17 	ldw	r2,-20(fp)
 201ea6c:	1001703a 	wrctl	status,r2
 201ea70:	00000406 	br	201ea84 <OSTaskResume+0x1a4>
 201ea74:	e0bff617 	ldw	r2,-40(fp)
 201ea78:	e0bffc15 	stw	r2,-16(fp)
 201ea7c:	e0bffc17 	ldw	r2,-16(fp)
 201ea80:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201ea84:	0005883a 	mov	r2,zero
 201ea88:	00000506 	br	201eaa0 <OSTaskResume+0x1c0>
 201ea8c:	e0bff617 	ldw	r2,-40(fp)
 201ea90:	e0bffd15 	stw	r2,-12(fp)
 201ea94:	e0bffd17 	ldw	r2,-12(fp)
 201ea98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201ea9c:	00801104 	movi	r2,68
}
 201eaa0:	e037883a 	mov	sp,fp
 201eaa4:	dfc00117 	ldw	ra,4(sp)
 201eaa8:	df000017 	ldw	fp,0(sp)
 201eaac:	dec00204 	addi	sp,sp,8
 201eab0:	f800283a 	ret

0201eab4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201eab4:	defff304 	addi	sp,sp,-52
 201eab8:	df000c15 	stw	fp,48(sp)
 201eabc:	df000c04 	addi	fp,sp,48
 201eac0:	2005883a 	mov	r2,r4
 201eac4:	e17fff15 	stw	r5,-4(fp)
 201eac8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201eacc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201ead0:	e0bffe03 	ldbu	r2,-8(fp)
 201ead4:	10800570 	cmpltui	r2,r2,21
 201ead8:	1000051e 	bne	r2,zero,201eaf0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201eadc:	e0bffe03 	ldbu	r2,-8(fp)
 201eae0:	10803fe0 	cmpeqi	r2,r2,255
 201eae4:	1000021e 	bne	r2,zero,201eaf0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201eae8:	00800a84 	movi	r2,42
 201eaec:	00005d06 	br	201ec64 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201eaf0:	e0bfff17 	ldw	r2,-4(fp)
 201eaf4:	1000021e 	bne	r2,zero,201eb00 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201eaf8:	00800244 	movi	r2,9
 201eafc:	00005906 	br	201ec64 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201eb00:	e0bfff17 	ldw	r2,-4(fp)
 201eb04:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201eb08:	e0bfff17 	ldw	r2,-4(fp)
 201eb0c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eb10:	0005303a 	rdctl	r2,status
 201eb14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eb18:	e0fffd17 	ldw	r3,-12(fp)
 201eb1c:	00bfff84 	movi	r2,-2
 201eb20:	1884703a 	and	r2,r3,r2
 201eb24:	1001703a 	wrctl	status,r2
  
  return context;
 201eb28:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201eb2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201eb30:	e0bffe03 	ldbu	r2,-8(fp)
 201eb34:	10803fd8 	cmpnei	r2,r2,255
 201eb38:	1000031e 	bne	r2,zero,201eb48 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201eb3c:	d0a7b617 	ldw	r2,-24872(gp)
 201eb40:	10800c83 	ldbu	r2,50(r2)
 201eb44:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201eb48:	e0fffe03 	ldbu	r3,-8(fp)
 201eb4c:	008080f4 	movhi	r2,515
 201eb50:	10855004 	addi	r2,r2,5440
 201eb54:	18c7883a 	add	r3,r3,r3
 201eb58:	18c7883a 	add	r3,r3,r3
 201eb5c:	10c5883a 	add	r2,r2,r3
 201eb60:	10800017 	ldw	r2,0(r2)
 201eb64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201eb68:	e0bff817 	ldw	r2,-32(fp)
 201eb6c:	1000061e 	bne	r2,zero,201eb88 <OSTaskStkChk+0xd4>
 201eb70:	e0bff617 	ldw	r2,-40(fp)
 201eb74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201eb78:	e0bff717 	ldw	r2,-36(fp)
 201eb7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201eb80:	008010c4 	movi	r2,67
 201eb84:	00003706 	br	201ec64 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201eb88:	e0bff817 	ldw	r2,-32(fp)
 201eb8c:	10800058 	cmpnei	r2,r2,1
 201eb90:	1000061e 	bne	r2,zero,201ebac <OSTaskStkChk+0xf8>
 201eb94:	e0bff617 	ldw	r2,-40(fp)
 201eb98:	e0bff915 	stw	r2,-28(fp)
 201eb9c:	e0bff917 	ldw	r2,-28(fp)
 201eba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201eba4:	008010c4 	movi	r2,67
 201eba8:	00002e06 	br	201ec64 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201ebac:	e0bff817 	ldw	r2,-32(fp)
 201ebb0:	1080040b 	ldhu	r2,16(r2)
 201ebb4:	10bfffcc 	andi	r2,r2,65535
 201ebb8:	1080004c 	andi	r2,r2,1
 201ebbc:	1000061e 	bne	r2,zero,201ebd8 <OSTaskStkChk+0x124>
 201ebc0:	e0bff617 	ldw	r2,-40(fp)
 201ebc4:	e0bffa15 	stw	r2,-24(fp)
 201ebc8:	e0bffa17 	ldw	r2,-24(fp)
 201ebcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201ebd0:	00801144 	movi	r2,69
 201ebd4:	00002306 	br	201ec64 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201ebd8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201ebdc:	e0bff817 	ldw	r2,-32(fp)
 201ebe0:	10800317 	ldw	r2,12(r2)
 201ebe4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201ebe8:	e0bff817 	ldw	r2,-32(fp)
 201ebec:	10800217 	ldw	r2,8(r2)
 201ebf0:	e0bff415 	stw	r2,-48(fp)
 201ebf4:	e0bff617 	ldw	r2,-40(fp)
 201ebf8:	e0bffb15 	stw	r2,-20(fp)
 201ebfc:	e0bffb17 	ldw	r2,-20(fp)
 201ec00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201ec04:	00000306 	br	201ec14 <OSTaskStkChk+0x160>
        nfree++;
 201ec08:	e0bff517 	ldw	r2,-44(fp)
 201ec0c:	10800044 	addi	r2,r2,1
 201ec10:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201ec14:	e0bff417 	ldw	r2,-48(fp)
 201ec18:	10c00104 	addi	r3,r2,4
 201ec1c:	e0fff415 	stw	r3,-48(fp)
 201ec20:	10800017 	ldw	r2,0(r2)
 201ec24:	103ff826 	beq	r2,zero,201ec08 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201ec28:	e0bff517 	ldw	r2,-44(fp)
 201ec2c:	1085883a 	add	r2,r2,r2
 201ec30:	1085883a 	add	r2,r2,r2
 201ec34:	1007883a 	mov	r3,r2
 201ec38:	e0bfff17 	ldw	r2,-4(fp)
 201ec3c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201ec40:	e0fffc17 	ldw	r3,-16(fp)
 201ec44:	e0bff517 	ldw	r2,-44(fp)
 201ec48:	1885c83a 	sub	r2,r3,r2
 201ec4c:	1085883a 	add	r2,r2,r2
 201ec50:	1085883a 	add	r2,r2,r2
 201ec54:	1007883a 	mov	r3,r2
 201ec58:	e0bfff17 	ldw	r2,-4(fp)
 201ec5c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201ec60:	0005883a 	mov	r2,zero
}
 201ec64:	e037883a 	mov	sp,fp
 201ec68:	df000017 	ldw	fp,0(sp)
 201ec6c:	dec00104 	addi	sp,sp,4
 201ec70:	f800283a 	ret

0201ec74 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201ec74:	defff504 	addi	sp,sp,-44
 201ec78:	dfc00a15 	stw	ra,40(sp)
 201ec7c:	df000915 	stw	fp,36(sp)
 201ec80:	df000904 	addi	fp,sp,36
 201ec84:	2005883a 	mov	r2,r4
 201ec88:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ec8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201ec90:	e0bfff03 	ldbu	r2,-4(fp)
 201ec94:	10800518 	cmpnei	r2,r2,20
 201ec98:	1000021e 	bne	r2,zero,201eca4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201ec9c:	008011c4 	movi	r2,71
 201eca0:	00006806 	br	201ee44 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201eca4:	e0bfff03 	ldbu	r2,-4(fp)
 201eca8:	10800530 	cmpltui	r2,r2,20
 201ecac:	1000051e 	bne	r2,zero,201ecc4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201ecb0:	e0bfff03 	ldbu	r2,-4(fp)
 201ecb4:	10803fe0 	cmpeqi	r2,r2,255
 201ecb8:	1000021e 	bne	r2,zero,201ecc4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201ecbc:	00800a84 	movi	r2,42
 201ecc0:	00006006 	br	201ee44 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ecc4:	0005303a 	rdctl	r2,status
 201ecc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eccc:	e0fffe17 	ldw	r3,-8(fp)
 201ecd0:	00bfff84 	movi	r2,-2
 201ecd4:	1884703a 	and	r2,r3,r2
 201ecd8:	1001703a 	wrctl	status,r2
  
  return context;
 201ecdc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201ece0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201ece4:	e0bfff03 	ldbu	r2,-4(fp)
 201ece8:	10803fd8 	cmpnei	r2,r2,255
 201ecec:	1000061e 	bne	r2,zero,201ed08 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201ecf0:	d0a7b617 	ldw	r2,-24872(gp)
 201ecf4:	10800c83 	ldbu	r2,50(r2)
 201ecf8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201ecfc:	00800044 	movi	r2,1
 201ed00:	e0bff705 	stb	r2,-36(fp)
 201ed04:	00000906 	br	201ed2c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201ed08:	d0a7b617 	ldw	r2,-24872(gp)
 201ed0c:	10800c83 	ldbu	r2,50(r2)
 201ed10:	10c03fcc 	andi	r3,r2,255
 201ed14:	e0bfff03 	ldbu	r2,-4(fp)
 201ed18:	1880031e 	bne	r3,r2,201ed28 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201ed1c:	00800044 	movi	r2,1
 201ed20:	e0bff705 	stb	r2,-36(fp)
 201ed24:	00000106 	br	201ed2c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201ed28:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ed2c:	e0ffff03 	ldbu	r3,-4(fp)
 201ed30:	008080f4 	movhi	r2,515
 201ed34:	10855004 	addi	r2,r2,5440
 201ed38:	18c7883a 	add	r3,r3,r3
 201ed3c:	18c7883a 	add	r3,r3,r3
 201ed40:	10c5883a 	add	r2,r2,r3
 201ed44:	10800017 	ldw	r2,0(r2)
 201ed48:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201ed4c:	e0bffa17 	ldw	r2,-24(fp)
 201ed50:	1000061e 	bne	r2,zero,201ed6c <OSTaskSuspend+0xf8>
 201ed54:	e0bff817 	ldw	r2,-32(fp)
 201ed58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ed5c:	e0bff917 	ldw	r2,-28(fp)
 201ed60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201ed64:	00801204 	movi	r2,72
 201ed68:	00003606 	br	201ee44 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201ed6c:	e0bffa17 	ldw	r2,-24(fp)
 201ed70:	10800058 	cmpnei	r2,r2,1
 201ed74:	1000061e 	bne	r2,zero,201ed90 <OSTaskSuspend+0x11c>
 201ed78:	e0bff817 	ldw	r2,-32(fp)
 201ed7c:	e0bffb15 	stw	r2,-20(fp)
 201ed80:	e0bffb17 	ldw	r2,-20(fp)
 201ed84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ed88:	008010c4 	movi	r2,67
 201ed8c:	00002d06 	br	201ee44 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201ed90:	e0bffa17 	ldw	r2,-24(fp)
 201ed94:	10800d03 	ldbu	r2,52(r2)
 201ed98:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201ed9c:	e0fffd03 	ldbu	r3,-12(fp)
 201eda0:	e13ffd03 	ldbu	r4,-12(fp)
 201eda4:	d0a7b344 	addi	r2,gp,-24883
 201eda8:	2085883a 	add	r2,r4,r2
 201edac:	10800003 	ldbu	r2,0(r2)
 201edb0:	1009883a 	mov	r4,r2
 201edb4:	e0bffa17 	ldw	r2,-24(fp)
 201edb8:	10800d43 	ldbu	r2,53(r2)
 201edbc:	0084303a 	nor	r2,zero,r2
 201edc0:	2084703a 	and	r2,r4,r2
 201edc4:	1009883a 	mov	r4,r2
 201edc8:	d0a7b344 	addi	r2,gp,-24883
 201edcc:	1885883a 	add	r2,r3,r2
 201edd0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201edd4:	e0fffd03 	ldbu	r3,-12(fp)
 201edd8:	d0a7b344 	addi	r2,gp,-24883
 201eddc:	1885883a 	add	r2,r3,r2
 201ede0:	10800003 	ldbu	r2,0(r2)
 201ede4:	10803fcc 	andi	r2,r2,255
 201ede8:	1000071e 	bne	r2,zero,201ee08 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201edec:	e0bffa17 	ldw	r2,-24(fp)
 201edf0:	10800d83 	ldbu	r2,54(r2)
 201edf4:	0084303a 	nor	r2,zero,r2
 201edf8:	1007883a 	mov	r3,r2
 201edfc:	d0a7b303 	ldbu	r2,-24884(gp)
 201ee00:	1884703a 	and	r2,r3,r2
 201ee04:	d0a7b305 	stb	r2,-24884(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201ee08:	e0bffa17 	ldw	r2,-24(fp)
 201ee0c:	10800c03 	ldbu	r2,48(r2)
 201ee10:	10800214 	ori	r2,r2,8
 201ee14:	1007883a 	mov	r3,r2
 201ee18:	e0bffa17 	ldw	r2,-24(fp)
 201ee1c:	10c00c05 	stb	r3,48(r2)
 201ee20:	e0bff817 	ldw	r2,-32(fp)
 201ee24:	e0bffc15 	stw	r2,-16(fp)
 201ee28:	e0bffc17 	ldw	r2,-16(fp)
 201ee2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201ee30:	e0bff703 	ldbu	r2,-36(fp)
 201ee34:	10800058 	cmpnei	r2,r2,1
 201ee38:	1000011e 	bne	r2,zero,201ee40 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201ee3c:	2018b880 	call	2018b88 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201ee40:	0005883a 	mov	r2,zero
}
 201ee44:	e037883a 	mov	sp,fp
 201ee48:	dfc00117 	ldw	ra,4(sp)
 201ee4c:	df000017 	ldw	fp,0(sp)
 201ee50:	dec00204 	addi	sp,sp,8
 201ee54:	f800283a 	ret

0201ee58 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201ee58:	defff604 	addi	sp,sp,-40
 201ee5c:	dfc00915 	stw	ra,36(sp)
 201ee60:	df000815 	stw	fp,32(sp)
 201ee64:	df000804 	addi	fp,sp,32
 201ee68:	2005883a 	mov	r2,r4
 201ee6c:	e17fff15 	stw	r5,-4(fp)
 201ee70:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ee74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201ee78:	e0bffe03 	ldbu	r2,-8(fp)
 201ee7c:	10800570 	cmpltui	r2,r2,21
 201ee80:	1000051e 	bne	r2,zero,201ee98 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201ee84:	e0bffe03 	ldbu	r2,-8(fp)
 201ee88:	10803fe0 	cmpeqi	r2,r2,255
 201ee8c:	1000021e 	bne	r2,zero,201ee98 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201ee90:	00800a84 	movi	r2,42
 201ee94:	00003406 	br	201ef68 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201ee98:	e0bfff17 	ldw	r2,-4(fp)
 201ee9c:	1000021e 	bne	r2,zero,201eea8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201eea0:	00800244 	movi	r2,9
 201eea4:	00003006 	br	201ef68 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eea8:	0005303a 	rdctl	r2,status
 201eeac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eeb0:	e0fffd17 	ldw	r3,-12(fp)
 201eeb4:	00bfff84 	movi	r2,-2
 201eeb8:	1884703a 	and	r2,r3,r2
 201eebc:	1001703a 	wrctl	status,r2
  
  return context;
 201eec0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201eec4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201eec8:	e0bffe03 	ldbu	r2,-8(fp)
 201eecc:	10803fd8 	cmpnei	r2,r2,255
 201eed0:	1000031e 	bne	r2,zero,201eee0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201eed4:	d0a7b617 	ldw	r2,-24872(gp)
 201eed8:	10800c83 	ldbu	r2,50(r2)
 201eedc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201eee0:	e0fffe03 	ldbu	r3,-8(fp)
 201eee4:	008080f4 	movhi	r2,515
 201eee8:	10855004 	addi	r2,r2,5440
 201eeec:	18c7883a 	add	r3,r3,r3
 201eef0:	18c7883a 	add	r3,r3,r3
 201eef4:	10c5883a 	add	r2,r2,r3
 201eef8:	10800017 	ldw	r2,0(r2)
 201eefc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201ef00:	e0bffa17 	ldw	r2,-24(fp)
 201ef04:	1000061e 	bne	r2,zero,201ef20 <OSTaskQuery+0xc8>
 201ef08:	e0bff817 	ldw	r2,-32(fp)
 201ef0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ef10:	e0bff917 	ldw	r2,-28(fp)
 201ef14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201ef18:	00800a44 	movi	r2,41
 201ef1c:	00001206 	br	201ef68 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201ef20:	e0bffa17 	ldw	r2,-24(fp)
 201ef24:	10800058 	cmpnei	r2,r2,1
 201ef28:	1000061e 	bne	r2,zero,201ef44 <OSTaskQuery+0xec>
 201ef2c:	e0bff817 	ldw	r2,-32(fp)
 201ef30:	e0bffb15 	stw	r2,-20(fp)
 201ef34:	e0bffb17 	ldw	r2,-20(fp)
 201ef38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ef3c:	008010c4 	movi	r2,67
 201ef40:	00000906 	br	201ef68 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201ef44:	01801b04 	movi	r6,108
 201ef48:	e17ffa17 	ldw	r5,-24(fp)
 201ef4c:	e13fff17 	ldw	r4,-4(fp)
 201ef50:	2018b200 	call	2018b20 <OS_MemCopy>
 201ef54:	e0bff817 	ldw	r2,-32(fp)
 201ef58:	e0bffc15 	stw	r2,-16(fp)
 201ef5c:	e0bffc17 	ldw	r2,-16(fp)
 201ef60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ef64:	0005883a 	mov	r2,zero
}
 201ef68:	e037883a 	mov	sp,fp
 201ef6c:	dfc00117 	ldw	ra,4(sp)
 201ef70:	df000017 	ldw	fp,0(sp)
 201ef74:	dec00204 	addi	sp,sp,8
 201ef78:	f800283a 	ret

0201ef7c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201ef7c:	defffc04 	addi	sp,sp,-16
 201ef80:	df000315 	stw	fp,12(sp)
 201ef84:	df000304 	addi	fp,sp,12
 201ef88:	e13ffd15 	stw	r4,-12(fp)
 201ef8c:	e17ffe15 	stw	r5,-8(fp)
 201ef90:	3005883a 	mov	r2,r6
 201ef94:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201ef98:	e0bfff0b 	ldhu	r2,-4(fp)
 201ef9c:	1080004c 	andi	r2,r2,1
 201efa0:	10000d26 	beq	r2,zero,201efd8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201efa4:	e0bfff0b 	ldhu	r2,-4(fp)
 201efa8:	1080008c 	andi	r2,r2,2
 201efac:	10000a26 	beq	r2,zero,201efd8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201efb0:	00000706 	br	201efd0 <OS_TaskStkClr+0x54>
                size--;
 201efb4:	e0bffe17 	ldw	r2,-8(fp)
 201efb8:	10bfffc4 	addi	r2,r2,-1
 201efbc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201efc0:	e0bffd17 	ldw	r2,-12(fp)
 201efc4:	10c00104 	addi	r3,r2,4
 201efc8:	e0fffd15 	stw	r3,-12(fp)
 201efcc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201efd0:	e0bffe17 	ldw	r2,-8(fp)
 201efd4:	103ff71e 	bne	r2,zero,201efb4 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201efd8:	0001883a 	nop
 201efdc:	e037883a 	mov	sp,fp
 201efe0:	df000017 	ldw	fp,0(sp)
 201efe4:	dec00104 	addi	sp,sp,4
 201efe8:	f800283a 	ret

0201efec <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201efec:	defff904 	addi	sp,sp,-28
 201eff0:	dfc00615 	stw	ra,24(sp)
 201eff4:	df000515 	stw	fp,20(sp)
 201eff8:	df000504 	addi	fp,sp,20
 201effc:	2005883a 	mov	r2,r4
 201f000:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f004:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201f008:	d0a7b503 	ldbu	r2,-24876(gp)
 201f00c:	10803fcc 	andi	r2,r2,255
 201f010:	1000311e 	bne	r2,zero,201f0d8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201f014:	e0bfff0b 	ldhu	r2,-4(fp)
 201f018:	10003026 	beq	r2,zero,201f0dc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f01c:	0005303a 	rdctl	r2,status
 201f020:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f024:	e0fffe17 	ldw	r3,-8(fp)
 201f028:	00bfff84 	movi	r2,-2
 201f02c:	1884703a 	and	r2,r3,r2
 201f030:	1001703a 	wrctl	status,r2
  
  return context;
 201f034:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201f038:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201f03c:	d0a7b617 	ldw	r2,-24872(gp)
 201f040:	10800d03 	ldbu	r2,52(r2)
 201f044:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201f048:	e0fffd03 	ldbu	r3,-12(fp)
 201f04c:	e13ffd03 	ldbu	r4,-12(fp)
 201f050:	d0a7b344 	addi	r2,gp,-24883
 201f054:	2085883a 	add	r2,r4,r2
 201f058:	10800003 	ldbu	r2,0(r2)
 201f05c:	1009883a 	mov	r4,r2
 201f060:	d0a7b617 	ldw	r2,-24872(gp)
 201f064:	10800d43 	ldbu	r2,53(r2)
 201f068:	0084303a 	nor	r2,zero,r2
 201f06c:	2084703a 	and	r2,r4,r2
 201f070:	1009883a 	mov	r4,r2
 201f074:	d0a7b344 	addi	r2,gp,-24883
 201f078:	1885883a 	add	r2,r3,r2
 201f07c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201f080:	e0fffd03 	ldbu	r3,-12(fp)
 201f084:	d0a7b344 	addi	r2,gp,-24883
 201f088:	1885883a 	add	r2,r3,r2
 201f08c:	10800003 	ldbu	r2,0(r2)
 201f090:	10803fcc 	andi	r2,r2,255
 201f094:	1000071e 	bne	r2,zero,201f0b4 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201f098:	d0a7b617 	ldw	r2,-24872(gp)
 201f09c:	10800d83 	ldbu	r2,54(r2)
 201f0a0:	0084303a 	nor	r2,zero,r2
 201f0a4:	1007883a 	mov	r3,r2
 201f0a8:	d0a7b303 	ldbu	r2,-24884(gp)
 201f0ac:	1884703a 	and	r2,r3,r2
 201f0b0:	d0a7b305 	stb	r2,-24884(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201f0b4:	d0a7b617 	ldw	r2,-24872(gp)
 201f0b8:	e0ffff0b 	ldhu	r3,-4(fp)
 201f0bc:	10c00b8d 	sth	r3,46(r2)
 201f0c0:	e0bffb17 	ldw	r2,-20(fp)
 201f0c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f0c8:	e0bffc17 	ldw	r2,-16(fp)
 201f0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201f0d0:	2018b880 	call	2018b88 <OS_Sched>
 201f0d4:	00000106 	br	201f0dc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201f0d8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201f0dc:	e037883a 	mov	sp,fp
 201f0e0:	dfc00117 	ldw	ra,4(sp)
 201f0e4:	df000017 	ldw	fp,0(sp)
 201f0e8:	dec00204 	addi	sp,sp,8
 201f0ec:	f800283a 	ret

0201f0f0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201f0f0:	defff704 	addi	sp,sp,-36
 201f0f4:	dfc00815 	stw	ra,32(sp)
 201f0f8:	df000715 	stw	fp,28(sp)
 201f0fc:	dc000615 	stw	r16,24(sp)
 201f100:	df000704 	addi	fp,sp,28
 201f104:	2011883a 	mov	r8,r4
 201f108:	2809883a 	mov	r4,r5
 201f10c:	3007883a 	mov	r3,r6
 201f110:	3805883a 	mov	r2,r7
 201f114:	e23ffb05 	stb	r8,-20(fp)
 201f118:	e13ffc05 	stb	r4,-16(fp)
 201f11c:	e0fffd05 	stb	r3,-12(fp)
 201f120:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201f124:	d0a7b503 	ldbu	r2,-24876(gp)
 201f128:	10803fcc 	andi	r2,r2,255
 201f12c:	10000226 	beq	r2,zero,201f138 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201f130:	00801544 	movi	r2,85
 201f134:	00003d06 	br	201f22c <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201f138:	e0bffb03 	ldbu	r2,-20(fp)
 201f13c:	1000081e 	bne	r2,zero,201f160 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201f140:	e0bffc03 	ldbu	r2,-16(fp)
 201f144:	1000061e 	bne	r2,zero,201f160 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201f148:	e0bffd03 	ldbu	r2,-12(fp)
 201f14c:	1000041e 	bne	r2,zero,201f160 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201f150:	e0bffe0b 	ldhu	r2,-8(fp)
 201f154:	1000021e 	bne	r2,zero,201f160 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201f158:	00801504 	movi	r2,84
 201f15c:	00003306 	br	201f22c <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201f160:	e0bffc03 	ldbu	r2,-16(fp)
 201f164:	10800f30 	cmpltui	r2,r2,60
 201f168:	1000021e 	bne	r2,zero,201f174 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201f16c:	00801444 	movi	r2,81
 201f170:	00002e06 	br	201f22c <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201f174:	e0bffd03 	ldbu	r2,-12(fp)
 201f178:	10800f30 	cmpltui	r2,r2,60
 201f17c:	1000021e 	bne	r2,zero,201f188 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201f180:	00801484 	movi	r2,82
 201f184:	00002906 	br	201f22c <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201f188:	e0bffe0b 	ldhu	r2,-8(fp)
 201f18c:	1080fa30 	cmpltui	r2,r2,1000
 201f190:	1000021e 	bne	r2,zero,201f19c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201f194:	008014c4 	movi	r2,83
 201f198:	00002406 	br	201f22c <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201f19c:	e0bffb03 	ldbu	r2,-20(fp)
 201f1a0:	10c38424 	muli	r3,r2,3600
 201f1a4:	e0bffc03 	ldbu	r2,-16(fp)
 201f1a8:	10800f24 	muli	r2,r2,60
 201f1ac:	1887883a 	add	r3,r3,r2
 201f1b0:	e0bffd03 	ldbu	r2,-12(fp)
 201f1b4:	1885883a 	add	r2,r3,r2
 201f1b8:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201f1bc:	e0bffe0b 	ldhu	r2,-8(fp)
 201f1c0:	1080fa24 	muli	r2,r2,1000
 201f1c4:	0140fa04 	movi	r5,1000
 201f1c8:	1009883a 	mov	r4,r2
 201f1cc:	20069980 	call	2006998 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201f1d0:	8085883a 	add	r2,r16,r2
 201f1d4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201f1d8:	e0bffa17 	ldw	r2,-24(fp)
 201f1dc:	1004d43a 	srli	r2,r2,16
 201f1e0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201f1e4:	e0bffa17 	ldw	r2,-24(fp)
 201f1e8:	10bfffcc 	andi	r2,r2,65535
 201f1ec:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201f1f0:	e0bffa17 	ldw	r2,-24(fp)
 201f1f4:	10bfffcc 	andi	r2,r2,65535
 201f1f8:	1009883a 	mov	r4,r2
 201f1fc:	201efec0 	call	201efec <OSTimeDly>
    while (loops > 0) {
 201f200:	00000706 	br	201f220 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201f204:	01200014 	movui	r4,32768
 201f208:	201efec0 	call	201efec <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201f20c:	01200014 	movui	r4,32768
 201f210:	201efec0 	call	201efec <OSTimeDly>
        loops--;
 201f214:	e0bff90b 	ldhu	r2,-28(fp)
 201f218:	10bfffc4 	addi	r2,r2,-1
 201f21c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201f220:	e0bff90b 	ldhu	r2,-28(fp)
 201f224:	103ff71e 	bne	r2,zero,201f204 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201f228:	0005883a 	mov	r2,zero
}
 201f22c:	e6ffff04 	addi	sp,fp,-4
 201f230:	dfc00217 	ldw	ra,8(sp)
 201f234:	df000117 	ldw	fp,4(sp)
 201f238:	dc000017 	ldw	r16,0(sp)
 201f23c:	dec00304 	addi	sp,sp,12
 201f240:	f800283a 	ret

0201f244 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201f244:	defff504 	addi	sp,sp,-44
 201f248:	dfc00a15 	stw	ra,40(sp)
 201f24c:	df000915 	stw	fp,36(sp)
 201f250:	df000904 	addi	fp,sp,36
 201f254:	2005883a 	mov	r2,r4
 201f258:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201f25c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201f260:	e0bfff03 	ldbu	r2,-4(fp)
 201f264:	10800530 	cmpltui	r2,r2,20
 201f268:	1000021e 	bne	r2,zero,201f274 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201f26c:	00800a84 	movi	r2,42
 201f270:	00006406 	br	201f404 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f274:	0005303a 	rdctl	r2,status
 201f278:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f27c:	e0fffe17 	ldw	r3,-8(fp)
 201f280:	00bfff84 	movi	r2,-2
 201f284:	1884703a 	and	r2,r3,r2
 201f288:	1001703a 	wrctl	status,r2
  
  return context;
 201f28c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201f290:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201f294:	e0ffff03 	ldbu	r3,-4(fp)
 201f298:	008080f4 	movhi	r2,515
 201f29c:	10855004 	addi	r2,r2,5440
 201f2a0:	18c7883a 	add	r3,r3,r3
 201f2a4:	18c7883a 	add	r3,r3,r3
 201f2a8:	10c5883a 	add	r2,r2,r3
 201f2ac:	10800017 	ldw	r2,0(r2)
 201f2b0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201f2b4:	e0bff917 	ldw	r2,-28(fp)
 201f2b8:	1000061e 	bne	r2,zero,201f2d4 <OSTimeDlyResume+0x90>
 201f2bc:	e0bff717 	ldw	r2,-36(fp)
 201f2c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f2c4:	e0bff817 	ldw	r2,-32(fp)
 201f2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201f2cc:	008010c4 	movi	r2,67
 201f2d0:	00004c06 	br	201f404 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201f2d4:	e0bff917 	ldw	r2,-28(fp)
 201f2d8:	10800058 	cmpnei	r2,r2,1
 201f2dc:	1000061e 	bne	r2,zero,201f2f8 <OSTimeDlyResume+0xb4>
 201f2e0:	e0bff717 	ldw	r2,-36(fp)
 201f2e4:	e0bffa15 	stw	r2,-24(fp)
 201f2e8:	e0bffa17 	ldw	r2,-24(fp)
 201f2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201f2f0:	008010c4 	movi	r2,67
 201f2f4:	00004306 	br	201f404 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201f2f8:	e0bff917 	ldw	r2,-28(fp)
 201f2fc:	10800b8b 	ldhu	r2,46(r2)
 201f300:	10bfffcc 	andi	r2,r2,65535
 201f304:	1000061e 	bne	r2,zero,201f320 <OSTimeDlyResume+0xdc>
 201f308:	e0bff717 	ldw	r2,-36(fp)
 201f30c:	e0bffb15 	stw	r2,-20(fp)
 201f310:	e0bffb17 	ldw	r2,-20(fp)
 201f314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201f318:	00801404 	movi	r2,80
 201f31c:	00003906 	br	201f404 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201f320:	e0bff917 	ldw	r2,-28(fp)
 201f324:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201f328:	e0bff917 	ldw	r2,-28(fp)
 201f32c:	10800c03 	ldbu	r2,48(r2)
 201f330:	10803fcc 	andi	r2,r2,255
 201f334:	10800dcc 	andi	r2,r2,55
 201f338:	10000b26 	beq	r2,zero,201f368 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201f33c:	e0bff917 	ldw	r2,-28(fp)
 201f340:	10c00c03 	ldbu	r3,48(r2)
 201f344:	00bff204 	movi	r2,-56
 201f348:	1884703a 	and	r2,r3,r2
 201f34c:	1007883a 	mov	r3,r2
 201f350:	e0bff917 	ldw	r2,-28(fp)
 201f354:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201f358:	e0bff917 	ldw	r2,-28(fp)
 201f35c:	00c00044 	movi	r3,1
 201f360:	10c00c45 	stb	r3,49(r2)
 201f364:	00000206 	br	201f370 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201f368:	e0bff917 	ldw	r2,-28(fp)
 201f36c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201f370:	e0bff917 	ldw	r2,-28(fp)
 201f374:	10800c03 	ldbu	r2,48(r2)
 201f378:	10803fcc 	andi	r2,r2,255
 201f37c:	1080020c 	andi	r2,r2,8
 201f380:	10001b1e 	bne	r2,zero,201f3f0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201f384:	e0bff917 	ldw	r2,-28(fp)
 201f388:	10c00d83 	ldbu	r3,54(r2)
 201f38c:	d0a7b303 	ldbu	r2,-24884(gp)
 201f390:	1884b03a 	or	r2,r3,r2
 201f394:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201f398:	e0bff917 	ldw	r2,-28(fp)
 201f39c:	10800d03 	ldbu	r2,52(r2)
 201f3a0:	10c03fcc 	andi	r3,r2,255
 201f3a4:	e0bff917 	ldw	r2,-28(fp)
 201f3a8:	10800d03 	ldbu	r2,52(r2)
 201f3ac:	11003fcc 	andi	r4,r2,255
 201f3b0:	d0a7b344 	addi	r2,gp,-24883
 201f3b4:	2085883a 	add	r2,r4,r2
 201f3b8:	11000003 	ldbu	r4,0(r2)
 201f3bc:	e0bff917 	ldw	r2,-28(fp)
 201f3c0:	10800d43 	ldbu	r2,53(r2)
 201f3c4:	2084b03a 	or	r2,r4,r2
 201f3c8:	1009883a 	mov	r4,r2
 201f3cc:	d0a7b344 	addi	r2,gp,-24883
 201f3d0:	1885883a 	add	r2,r3,r2
 201f3d4:	11000005 	stb	r4,0(r2)
 201f3d8:	e0bff717 	ldw	r2,-36(fp)
 201f3dc:	e0bffc15 	stw	r2,-16(fp)
 201f3e0:	e0bffc17 	ldw	r2,-16(fp)
 201f3e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201f3e8:	2018b880 	call	2018b88 <OS_Sched>
 201f3ec:	00000406 	br	201f400 <OSTimeDlyResume+0x1bc>
 201f3f0:	e0bff717 	ldw	r2,-36(fp)
 201f3f4:	e0bffd15 	stw	r2,-12(fp)
 201f3f8:	e0bffd17 	ldw	r2,-12(fp)
 201f3fc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201f400:	0005883a 	mov	r2,zero
}
 201f404:	e037883a 	mov	sp,fp
 201f408:	dfc00117 	ldw	ra,4(sp)
 201f40c:	df000017 	ldw	fp,0(sp)
 201f410:	dec00204 	addi	sp,sp,8
 201f414:	f800283a 	ret

0201f418 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201f418:	defffb04 	addi	sp,sp,-20
 201f41c:	df000415 	stw	fp,16(sp)
 201f420:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f424:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f428:	0005303a 	rdctl	r2,status
 201f42c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f430:	e0fffe17 	ldw	r3,-8(fp)
 201f434:	00bfff84 	movi	r2,-2
 201f438:	1884703a 	and	r2,r3,r2
 201f43c:	1001703a 	wrctl	status,r2
  
  return context;
 201f440:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201f444:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201f448:	d0a7b717 	ldw	r2,-24868(gp)
 201f44c:	e0bffd15 	stw	r2,-12(fp)
 201f450:	e0bffc17 	ldw	r2,-16(fp)
 201f454:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f458:	e0bfff17 	ldw	r2,-4(fp)
 201f45c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201f460:	e0bffd17 	ldw	r2,-12(fp)
}
 201f464:	e037883a 	mov	sp,fp
 201f468:	df000017 	ldw	fp,0(sp)
 201f46c:	dec00104 	addi	sp,sp,4
 201f470:	f800283a 	ret

0201f474 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201f474:	defffb04 	addi	sp,sp,-20
 201f478:	df000415 	stw	fp,16(sp)
 201f47c:	df000404 	addi	fp,sp,16
 201f480:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f484:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f488:	0005303a 	rdctl	r2,status
 201f48c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f490:	e0fffd17 	ldw	r3,-12(fp)
 201f494:	00bfff84 	movi	r2,-2
 201f498:	1884703a 	and	r2,r3,r2
 201f49c:	1001703a 	wrctl	status,r2
  
  return context;
 201f4a0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201f4a4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201f4a8:	e0bfff17 	ldw	r2,-4(fp)
 201f4ac:	d0a7b715 	stw	r2,-24868(gp)
 201f4b0:	e0bffc17 	ldw	r2,-16(fp)
 201f4b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f4b8:	e0bffe17 	ldw	r2,-8(fp)
 201f4bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201f4c0:	0001883a 	nop
 201f4c4:	e037883a 	mov	sp,fp
 201f4c8:	df000017 	ldw	fp,0(sp)
 201f4cc:	dec00104 	addi	sp,sp,4
 201f4d0:	f800283a 	ret

0201f4d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201f4d4:	defffd04 	addi	sp,sp,-12
 201f4d8:	dfc00215 	stw	ra,8(sp)
 201f4dc:	df000115 	stw	fp,4(sp)
 201f4e0:	df000104 	addi	fp,sp,4
 201f4e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201f4e8:	d1603804 	addi	r5,gp,-32544
 201f4ec:	e13fff17 	ldw	r4,-4(fp)
 201f4f0:	20209200 	call	2020920 <alt_dev_llist_insert>
}
 201f4f4:	e037883a 	mov	sp,fp
 201f4f8:	dfc00117 	ldw	ra,4(sp)
 201f4fc:	df000017 	ldw	fp,0(sp)
 201f500:	dec00204 	addi	sp,sp,8
 201f504:	f800283a 	ret

0201f508 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201f508:	defffd04 	addi	sp,sp,-12
 201f50c:	dfc00215 	stw	ra,8(sp)
 201f510:	df000115 	stw	fp,4(sp)
 201f514:	df000104 	addi	fp,sp,4
 201f518:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201f51c:	20212000 	call	2021200 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201f520:	00800044 	movi	r2,1
 201f524:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201f528:	0001883a 	nop
 201f52c:	e037883a 	mov	sp,fp
 201f530:	dfc00117 	ldw	ra,4(sp)
 201f534:	df000017 	ldw	fp,0(sp)
 201f538:	dec00204 	addi	sp,sp,8
 201f53c:	f800283a 	ret

0201f540 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201f540:	defffe04 	addi	sp,sp,-8
 201f544:	dfc00115 	stw	ra,4(sp)
 201f548:	df000015 	stw	fp,0(sp)
 201f54c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201f550:	01c0fa04 	movi	r7,1000
 201f554:	01800044 	movi	r6,1
 201f558:	000b883a 	mov	r5,zero
 201f55c:	0009883a 	mov	r4,zero
 201f560:	202034c0 	call	202034c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201f564:	000d883a 	mov	r6,zero
 201f568:	000b883a 	mov	r5,zero
 201f56c:	010080b4 	movhi	r4,514
 201f570:	210cf604 	addi	r4,r4,13272
 201f574:	201f7100 	call	201f710 <altera_avalon_jtag_uart_init>
 201f578:	010080b4 	movhi	r4,514
 201f57c:	210cec04 	addi	r4,r4,13232
 201f580:	201f4d40 	call	201f4d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201f584:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 201f588:	010080b4 	movhi	r4,514
 201f58c:	21110704 	addi	r4,r4,17436
 201f590:	201f4d40 	call	201f4d4 <alt_dev_reg>
}
 201f594:	0001883a 	nop
 201f598:	e037883a 	mov	sp,fp
 201f59c:	dfc00117 	ldw	ra,4(sp)
 201f5a0:	df000017 	ldw	fp,0(sp)
 201f5a4:	dec00204 	addi	sp,sp,8
 201f5a8:	f800283a 	ret

0201f5ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201f5ac:	defffa04 	addi	sp,sp,-24
 201f5b0:	dfc00515 	stw	ra,20(sp)
 201f5b4:	df000415 	stw	fp,16(sp)
 201f5b8:	df000404 	addi	fp,sp,16
 201f5bc:	e13ffd15 	stw	r4,-12(fp)
 201f5c0:	e17ffe15 	stw	r5,-8(fp)
 201f5c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f5c8:	e0bffd17 	ldw	r2,-12(fp)
 201f5cc:	10800017 	ldw	r2,0(r2)
 201f5d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201f5d4:	e0bffc17 	ldw	r2,-16(fp)
 201f5d8:	10c00a04 	addi	r3,r2,40
 201f5dc:	e0bffd17 	ldw	r2,-12(fp)
 201f5e0:	10800217 	ldw	r2,8(r2)
 201f5e4:	100f883a 	mov	r7,r2
 201f5e8:	e1bfff17 	ldw	r6,-4(fp)
 201f5ec:	e17ffe17 	ldw	r5,-8(fp)
 201f5f0:	1809883a 	mov	r4,r3
 201f5f4:	201fd500 	call	201fd50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201f5f8:	e037883a 	mov	sp,fp
 201f5fc:	dfc00117 	ldw	ra,4(sp)
 201f600:	df000017 	ldw	fp,0(sp)
 201f604:	dec00204 	addi	sp,sp,8
 201f608:	f800283a 	ret

0201f60c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201f60c:	defffa04 	addi	sp,sp,-24
 201f610:	dfc00515 	stw	ra,20(sp)
 201f614:	df000415 	stw	fp,16(sp)
 201f618:	df000404 	addi	fp,sp,16
 201f61c:	e13ffd15 	stw	r4,-12(fp)
 201f620:	e17ffe15 	stw	r5,-8(fp)
 201f624:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f628:	e0bffd17 	ldw	r2,-12(fp)
 201f62c:	10800017 	ldw	r2,0(r2)
 201f630:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201f634:	e0bffc17 	ldw	r2,-16(fp)
 201f638:	10c00a04 	addi	r3,r2,40
 201f63c:	e0bffd17 	ldw	r2,-12(fp)
 201f640:	10800217 	ldw	r2,8(r2)
 201f644:	100f883a 	mov	r7,r2
 201f648:	e1bfff17 	ldw	r6,-4(fp)
 201f64c:	e17ffe17 	ldw	r5,-8(fp)
 201f650:	1809883a 	mov	r4,r3
 201f654:	202000c0 	call	202000c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201f658:	e037883a 	mov	sp,fp
 201f65c:	dfc00117 	ldw	ra,4(sp)
 201f660:	df000017 	ldw	fp,0(sp)
 201f664:	dec00204 	addi	sp,sp,8
 201f668:	f800283a 	ret

0201f66c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201f66c:	defffc04 	addi	sp,sp,-16
 201f670:	dfc00315 	stw	ra,12(sp)
 201f674:	df000215 	stw	fp,8(sp)
 201f678:	df000204 	addi	fp,sp,8
 201f67c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f680:	e0bfff17 	ldw	r2,-4(fp)
 201f684:	10800017 	ldw	r2,0(r2)
 201f688:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201f68c:	e0bffe17 	ldw	r2,-8(fp)
 201f690:	10c00a04 	addi	r3,r2,40
 201f694:	e0bfff17 	ldw	r2,-4(fp)
 201f698:	10800217 	ldw	r2,8(r2)
 201f69c:	100b883a 	mov	r5,r2
 201f6a0:	1809883a 	mov	r4,r3
 201f6a4:	201fbf80 	call	201fbf8 <altera_avalon_jtag_uart_close>
}
 201f6a8:	e037883a 	mov	sp,fp
 201f6ac:	dfc00117 	ldw	ra,4(sp)
 201f6b0:	df000017 	ldw	fp,0(sp)
 201f6b4:	dec00204 	addi	sp,sp,8
 201f6b8:	f800283a 	ret

0201f6bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201f6bc:	defffa04 	addi	sp,sp,-24
 201f6c0:	dfc00515 	stw	ra,20(sp)
 201f6c4:	df000415 	stw	fp,16(sp)
 201f6c8:	df000404 	addi	fp,sp,16
 201f6cc:	e13ffd15 	stw	r4,-12(fp)
 201f6d0:	e17ffe15 	stw	r5,-8(fp)
 201f6d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201f6d8:	e0bffd17 	ldw	r2,-12(fp)
 201f6dc:	10800017 	ldw	r2,0(r2)
 201f6e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201f6e4:	e0bffc17 	ldw	r2,-16(fp)
 201f6e8:	10800a04 	addi	r2,r2,40
 201f6ec:	e1bfff17 	ldw	r6,-4(fp)
 201f6f0:	e17ffe17 	ldw	r5,-8(fp)
 201f6f4:	1009883a 	mov	r4,r2
 201f6f8:	201fc600 	call	201fc60 <altera_avalon_jtag_uart_ioctl>
}
 201f6fc:	e037883a 	mov	sp,fp
 201f700:	dfc00117 	ldw	ra,4(sp)
 201f704:	df000017 	ldw	fp,0(sp)
 201f708:	dec00204 	addi	sp,sp,8
 201f70c:	f800283a 	ret

0201f710 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201f710:	defff204 	addi	sp,sp,-56
 201f714:	dfc00d15 	stw	ra,52(sp)
 201f718:	df000c15 	stw	fp,48(sp)
 201f71c:	df000c04 	addi	fp,sp,48
 201f720:	e13ff915 	stw	r4,-28(fp)
 201f724:	e17ffa15 	stw	r5,-24(fp)
 201f728:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201f72c:	e0bff917 	ldw	r2,-28(fp)
 201f730:	10800c04 	addi	r2,r2,48
 201f734:	e0bff415 	stw	r2,-48(fp)
 201f738:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201f73c:	e0bff80b 	ldhu	r2,-32(fp)
 201f740:	e0fff884 	addi	r3,fp,-30
 201f744:	180b883a 	mov	r5,r3
 201f748:	1009883a 	mov	r4,r2
 201f74c:	20196f40 	call	20196f4 <OSFlagCreate>
 201f750:	1007883a 	mov	r3,r2
 201f754:	e0bff417 	ldw	r2,-48(fp)
 201f758:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201f75c:	e0bff917 	ldw	r2,-28(fp)
 201f760:	10800a04 	addi	r2,r2,40
 201f764:	e0bff515 	stw	r2,-44(fp)
 201f768:	00800044 	movi	r2,1
 201f76c:	e0bff78d 	sth	r2,-34(fp)
 201f770:	e0bff78b 	ldhu	r2,-34(fp)
 201f774:	1009883a 	mov	r4,r2
 201f778:	201ced00 	call	201ced0 <OSSemCreate>
 201f77c:	1007883a 	mov	r3,r2
 201f780:	e0bff517 	ldw	r2,-44(fp)
 201f784:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201f788:	e0bff917 	ldw	r2,-28(fp)
 201f78c:	10800b04 	addi	r2,r2,44
 201f790:	e0bff615 	stw	r2,-40(fp)
 201f794:	00800044 	movi	r2,1
 201f798:	e0bff70d 	sth	r2,-36(fp)
 201f79c:	e0bff70b 	ldhu	r2,-36(fp)
 201f7a0:	1009883a 	mov	r4,r2
 201f7a4:	201ced00 	call	201ced0 <OSSemCreate>
 201f7a8:	1007883a 	mov	r3,r2
 201f7ac:	e0bff617 	ldw	r2,-40(fp)
 201f7b0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201f7b4:	e0bff917 	ldw	r2,-28(fp)
 201f7b8:	00c00044 	movi	r3,1
 201f7bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201f7c0:	e0bff917 	ldw	r2,-28(fp)
 201f7c4:	10800017 	ldw	r2,0(r2)
 201f7c8:	10800104 	addi	r2,r2,4
 201f7cc:	1007883a 	mov	r3,r2
 201f7d0:	e0bff917 	ldw	r2,-28(fp)
 201f7d4:	10800817 	ldw	r2,32(r2)
 201f7d8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 201f7dc:	e0bffb17 	ldw	r2,-20(fp)
 201f7e0:	018080b4 	movhi	r6,514
 201f7e4:	31be1304 	addi	r6,r6,-1972
 201f7e8:	e17ff917 	ldw	r5,-28(fp)
 201f7ec:	1009883a 	mov	r4,r2
 201f7f0:	2020c880 	call	2020c88 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201f7f4:	e0bff917 	ldw	r2,-28(fp)
 201f7f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201f7fc:	e0bff917 	ldw	r2,-28(fp)
 201f800:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201f804:	d0e7bc17 	ldw	r3,-24848(gp)
 201f808:	e1fff917 	ldw	r7,-28(fp)
 201f80c:	018080b4 	movhi	r6,514
 201f810:	31bebd04 	addi	r6,r6,-1292
 201f814:	180b883a 	mov	r5,r3
 201f818:	1009883a 	mov	r4,r2
 201f81c:	20207700 	call	2020770 <alt_alarm_start>
 201f820:	1000040e 	bge	r2,zero,201f834 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201f824:	e0fff917 	ldw	r3,-28(fp)
 201f828:	00a00034 	movhi	r2,32768
 201f82c:	10bfffc4 	addi	r2,r2,-1
 201f830:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201f834:	0001883a 	nop
 201f838:	e037883a 	mov	sp,fp
 201f83c:	dfc00117 	ldw	ra,4(sp)
 201f840:	df000017 	ldw	fp,0(sp)
 201f844:	dec00204 	addi	sp,sp,8
 201f848:	f800283a 	ret

0201f84c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201f84c:	defff104 	addi	sp,sp,-60
 201f850:	dfc00e15 	stw	ra,56(sp)
 201f854:	df000d15 	stw	fp,52(sp)
 201f858:	df000d04 	addi	fp,sp,52
 201f85c:	e13ffe15 	stw	r4,-8(fp)
 201f860:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201f864:	e0bffe17 	ldw	r2,-8(fp)
 201f868:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
 201f86c:	e0bff517 	ldw	r2,-44(fp)
 201f870:	10800017 	ldw	r2,0(r2)
 201f874:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201f878:	e0bff617 	ldw	r2,-40(fp)
 201f87c:	10800104 	addi	r2,r2,4
 201f880:	10800037 	ldwio	r2,0(r2)
 201f884:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201f888:	e0bff717 	ldw	r2,-36(fp)
 201f88c:	1080c00c 	andi	r2,r2,768
 201f890:	10009126 	beq	r2,zero,201fad8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201f894:	e0bff717 	ldw	r2,-36(fp)
 201f898:	1080400c 	andi	r2,r2,256
 201f89c:	10004726 	beq	r2,zero,201f9bc <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201f8a0:	00800074 	movhi	r2,1
 201f8a4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201f8a8:	e0bff517 	ldw	r2,-44(fp)
 201f8ac:	10800d17 	ldw	r2,52(r2)
 201f8b0:	10800044 	addi	r2,r2,1
 201f8b4:	1081ffcc 	andi	r2,r2,2047
 201f8b8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 201f8bc:	e0bff517 	ldw	r2,-44(fp)
 201f8c0:	10c00e17 	ldw	r3,56(r2)
 201f8c4:	e0bff817 	ldw	r2,-32(fp)
 201f8c8:	18802726 	beq	r3,r2,201f968 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201f8cc:	e0bff617 	ldw	r2,-40(fp)
 201f8d0:	10800037 	ldwio	r2,0(r2)
 201f8d4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201f8d8:	e0bff317 	ldw	r2,-52(fp)
 201f8dc:	10a0000c 	andi	r2,r2,32768
 201f8e0:	10002326 	beq	r2,zero,201f970 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201f8e4:	e0bff517 	ldw	r2,-44(fp)
 201f8e8:	10800d17 	ldw	r2,52(r2)
 201f8ec:	e0fff317 	ldw	r3,-52(fp)
 201f8f0:	1809883a 	mov	r4,r3
 201f8f4:	e0fff517 	ldw	r3,-44(fp)
 201f8f8:	1885883a 	add	r2,r3,r2
 201f8fc:	10801104 	addi	r2,r2,68
 201f900:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201f904:	e0bff517 	ldw	r2,-44(fp)
 201f908:	10800d17 	ldw	r2,52(r2)
 201f90c:	10800044 	addi	r2,r2,1
 201f910:	10c1ffcc 	andi	r3,r2,2047
 201f914:	e0bff517 	ldw	r2,-44(fp)
 201f918:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201f91c:	e0bff517 	ldw	r2,-44(fp)
 201f920:	10800c17 	ldw	r2,48(r2)
 201f924:	e0bffa15 	stw	r2,-24(fp)
 201f928:	00800044 	movi	r2,1
 201f92c:	e0bffb0d 	sth	r2,-20(fp)
 201f930:	00800044 	movi	r2,1
 201f934:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201f938:	d0a7a743 	ldbu	r2,-24931(gp)
 201f93c:	10803fcc 	andi	r2,r2,255
 201f940:	103fd926 	beq	r2,zero,201f8a8 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
 201f944:	e0bffb0b 	ldhu	r2,-20(fp)
 201f948:	e0fffb83 	ldbu	r3,-18(fp)
 201f94c:	e13ffcc4 	addi	r4,fp,-13
 201f950:	200f883a 	mov	r7,r4
 201f954:	180d883a 	mov	r6,r3
 201f958:	100b883a 	mov	r5,r2
 201f95c:	e13ffa17 	ldw	r4,-24(fp)
 201f960:	201a2d00 	call	201a2d0 <OSFlagPost>
      }
 201f964:	003fd006 	br	201f8a8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201f968:	0001883a 	nop
 201f96c:	00000106 	br	201f974 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201f970:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201f974:	e0bff317 	ldw	r2,-52(fp)
 201f978:	10bfffec 	andhi	r2,r2,65535
 201f97c:	10000f26 	beq	r2,zero,201f9bc <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201f980:	e0bff517 	ldw	r2,-44(fp)
 201f984:	10c00817 	ldw	r3,32(r2)
 201f988:	00bfff84 	movi	r2,-2
 201f98c:	1886703a 	and	r3,r3,r2
 201f990:	e0bff517 	ldw	r2,-44(fp)
 201f994:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201f998:	e0bff617 	ldw	r2,-40(fp)
 201f99c:	10800104 	addi	r2,r2,4
 201f9a0:	1007883a 	mov	r3,r2
 201f9a4:	e0bff517 	ldw	r2,-44(fp)
 201f9a8:	10800817 	ldw	r2,32(r2)
 201f9ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201f9b0:	e0bff617 	ldw	r2,-40(fp)
 201f9b4:	10800104 	addi	r2,r2,4
 201f9b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201f9bc:	e0bff717 	ldw	r2,-36(fp)
 201f9c0:	1080800c 	andi	r2,r2,512
 201f9c4:	103fac26 	beq	r2,zero,201f878 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201f9c8:	e0bff717 	ldw	r2,-36(fp)
 201f9cc:	1004d43a 	srli	r2,r2,16
 201f9d0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201f9d4:	00002606 	br	201fa70 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201f9d8:	e0bff617 	ldw	r2,-40(fp)
 201f9dc:	e0fff517 	ldw	r3,-44(fp)
 201f9e0:	18c01017 	ldw	r3,64(r3)
 201f9e4:	e13ff517 	ldw	r4,-44(fp)
 201f9e8:	20c7883a 	add	r3,r4,r3
 201f9ec:	18c21104 	addi	r3,r3,2116
 201f9f0:	18c00003 	ldbu	r3,0(r3)
 201f9f4:	18c03fcc 	andi	r3,r3,255
 201f9f8:	18c0201c 	xori	r3,r3,128
 201f9fc:	18ffe004 	addi	r3,r3,-128
 201fa00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201fa04:	e0bff517 	ldw	r2,-44(fp)
 201fa08:	10801017 	ldw	r2,64(r2)
 201fa0c:	10800044 	addi	r2,r2,1
 201fa10:	10c1ffcc 	andi	r3,r2,2047
 201fa14:	e0bff517 	ldw	r2,-44(fp)
 201fa18:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201fa1c:	e0bff517 	ldw	r2,-44(fp)
 201fa20:	10800c17 	ldw	r2,48(r2)
 201fa24:	e0bff915 	stw	r2,-28(fp)
 201fa28:	00800084 	movi	r2,2
 201fa2c:	e0bffc0d 	sth	r2,-16(fp)
 201fa30:	00800044 	movi	r2,1
 201fa34:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201fa38:	d0a7a743 	ldbu	r2,-24931(gp)
 201fa3c:	10803fcc 	andi	r2,r2,255
 201fa40:	10000826 	beq	r2,zero,201fa64 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
 201fa44:	e0bffc0b 	ldhu	r2,-16(fp)
 201fa48:	e0fffc83 	ldbu	r3,-14(fp)
 201fa4c:	e13ffd04 	addi	r4,fp,-12
 201fa50:	200f883a 	mov	r7,r4
 201fa54:	180d883a 	mov	r6,r3
 201fa58:	100b883a 	mov	r5,r2
 201fa5c:	e13ff917 	ldw	r4,-28(fp)
 201fa60:	201a2d00 	call	201a2d0 <OSFlagPost>

        space--;
 201fa64:	e0bff417 	ldw	r2,-48(fp)
 201fa68:	10bfffc4 	addi	r2,r2,-1
 201fa6c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201fa70:	e0bff417 	ldw	r2,-48(fp)
 201fa74:	10000526 	beq	r2,zero,201fa8c <altera_avalon_jtag_uart_irq+0x240>
 201fa78:	e0bff517 	ldw	r2,-44(fp)
 201fa7c:	10c01017 	ldw	r3,64(r2)
 201fa80:	e0bff517 	ldw	r2,-44(fp)
 201fa84:	10800f17 	ldw	r2,60(r2)
 201fa88:	18bfd31e 	bne	r3,r2,201f9d8 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201fa8c:	e0bff417 	ldw	r2,-48(fp)
 201fa90:	103f7926 	beq	r2,zero,201f878 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201fa94:	e0bff517 	ldw	r2,-44(fp)
 201fa98:	10c00817 	ldw	r3,32(r2)
 201fa9c:	00bfff44 	movi	r2,-3
 201faa0:	1886703a 	and	r3,r3,r2
 201faa4:	e0bff517 	ldw	r2,-44(fp)
 201faa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201faac:	e0bff517 	ldw	r2,-44(fp)
 201fab0:	10800017 	ldw	r2,0(r2)
 201fab4:	10800104 	addi	r2,r2,4
 201fab8:	1007883a 	mov	r3,r2
 201fabc:	e0bff517 	ldw	r2,-44(fp)
 201fac0:	10800817 	ldw	r2,32(r2)
 201fac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201fac8:	e0bff617 	ldw	r2,-40(fp)
 201facc:	10800104 	addi	r2,r2,4
 201fad0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201fad4:	003f6806 	br	201f878 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201fad8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201fadc:	0001883a 	nop
 201fae0:	e037883a 	mov	sp,fp
 201fae4:	dfc00117 	ldw	ra,4(sp)
 201fae8:	df000017 	ldw	fp,0(sp)
 201faec:	dec00204 	addi	sp,sp,8
 201faf0:	f800283a 	ret

0201faf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201faf4:	defff904 	addi	sp,sp,-28
 201faf8:	dfc00615 	stw	ra,24(sp)
 201fafc:	df000515 	stw	fp,20(sp)
 201fb00:	df000504 	addi	fp,sp,20
 201fb04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201fb08:	e0bfff17 	ldw	r2,-4(fp)
 201fb0c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201fb10:	e0bffb17 	ldw	r2,-20(fp)
 201fb14:	10800017 	ldw	r2,0(r2)
 201fb18:	10800104 	addi	r2,r2,4
 201fb1c:	10800037 	ldwio	r2,0(r2)
 201fb20:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201fb24:	e0bffc17 	ldw	r2,-16(fp)
 201fb28:	1081000c 	andi	r2,r2,1024
 201fb2c:	10000b26 	beq	r2,zero,201fb5c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201fb30:	e0bffb17 	ldw	r2,-20(fp)
 201fb34:	10800017 	ldw	r2,0(r2)
 201fb38:	10800104 	addi	r2,r2,4
 201fb3c:	1007883a 	mov	r3,r2
 201fb40:	e0bffb17 	ldw	r2,-20(fp)
 201fb44:	10800817 	ldw	r2,32(r2)
 201fb48:	10810014 	ori	r2,r2,1024
 201fb4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201fb50:	e0bffb17 	ldw	r2,-20(fp)
 201fb54:	10000915 	stw	zero,36(r2)
 201fb58:	00002106 	br	201fbe0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201fb5c:	e0bffb17 	ldw	r2,-20(fp)
 201fb60:	10c00917 	ldw	r3,36(r2)
 201fb64:	00a00034 	movhi	r2,32768
 201fb68:	10bfff04 	addi	r2,r2,-4
 201fb6c:	10c01c36 	bltu	r2,r3,201fbe0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201fb70:	e0bffb17 	ldw	r2,-20(fp)
 201fb74:	10800917 	ldw	r2,36(r2)
 201fb78:	10c00044 	addi	r3,r2,1
 201fb7c:	e0bffb17 	ldw	r2,-20(fp)
 201fb80:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201fb84:	e0bffb17 	ldw	r2,-20(fp)
 201fb88:	10c00917 	ldw	r3,36(r2)
 201fb8c:	e0bffb17 	ldw	r2,-20(fp)
 201fb90:	10800117 	ldw	r2,4(r2)
 201fb94:	18801236 	bltu	r3,r2,201fbe0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201fb98:	e0bffb17 	ldw	r2,-20(fp)
 201fb9c:	10800c17 	ldw	r2,48(r2)
 201fba0:	e0bffd15 	stw	r2,-12(fp)
 201fba4:	00800104 	movi	r2,4
 201fba8:	e0bffe0d 	sth	r2,-8(fp)
 201fbac:	00800044 	movi	r2,1
 201fbb0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201fbb4:	d0a7a743 	ldbu	r2,-24931(gp)
 201fbb8:	10803fcc 	andi	r2,r2,255
 201fbbc:	10000826 	beq	r2,zero,201fbe0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201fbc0:	e0bffe0b 	ldhu	r2,-8(fp)
 201fbc4:	e0fffe83 	ldbu	r3,-6(fp)
 201fbc8:	e13ffec4 	addi	r4,fp,-5
 201fbcc:	200f883a 	mov	r7,r4
 201fbd0:	180d883a 	mov	r6,r3
 201fbd4:	100b883a 	mov	r5,r2
 201fbd8:	e13ffd17 	ldw	r4,-12(fp)
 201fbdc:	201a2d00 	call	201a2d0 <OSFlagPost>
 201fbe0:	d0a7bc17 	ldw	r2,-24848(gp)
    }
  }

  return alt_ticks_per_second();
}
 201fbe4:	e037883a 	mov	sp,fp
 201fbe8:	dfc00117 	ldw	ra,4(sp)
 201fbec:	df000017 	ldw	fp,0(sp)
 201fbf0:	dec00204 	addi	sp,sp,8
 201fbf4:	f800283a 	ret

0201fbf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201fbf8:	defffd04 	addi	sp,sp,-12
 201fbfc:	df000215 	stw	fp,8(sp)
 201fc00:	df000204 	addi	fp,sp,8
 201fc04:	e13ffe15 	stw	r4,-8(fp)
 201fc08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201fc0c:	00000506 	br	201fc24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201fc10:	e0bfff17 	ldw	r2,-4(fp)
 201fc14:	1090000c 	andi	r2,r2,16384
 201fc18:	10000226 	beq	r2,zero,201fc24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201fc1c:	00bffd44 	movi	r2,-11
 201fc20:	00000b06 	br	201fc50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201fc24:	e0bffe17 	ldw	r2,-8(fp)
 201fc28:	10c01017 	ldw	r3,64(r2)
 201fc2c:	e0bffe17 	ldw	r2,-8(fp)
 201fc30:	10800f17 	ldw	r2,60(r2)
 201fc34:	18800526 	beq	r3,r2,201fc4c <altera_avalon_jtag_uart_close+0x54>
 201fc38:	e0bffe17 	ldw	r2,-8(fp)
 201fc3c:	10c00917 	ldw	r3,36(r2)
 201fc40:	e0bffe17 	ldw	r2,-8(fp)
 201fc44:	10800117 	ldw	r2,4(r2)
 201fc48:	18bff136 	bltu	r3,r2,201fc10 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201fc4c:	0005883a 	mov	r2,zero
}
 201fc50:	e037883a 	mov	sp,fp
 201fc54:	df000017 	ldw	fp,0(sp)
 201fc58:	dec00104 	addi	sp,sp,4
 201fc5c:	f800283a 	ret

0201fc60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201fc60:	defffa04 	addi	sp,sp,-24
 201fc64:	df000515 	stw	fp,20(sp)
 201fc68:	df000504 	addi	fp,sp,20
 201fc6c:	e13ffd15 	stw	r4,-12(fp)
 201fc70:	e17ffe15 	stw	r5,-8(fp)
 201fc74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201fc78:	00bff9c4 	movi	r2,-25
 201fc7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201fc80:	e0bffe17 	ldw	r2,-8(fp)
 201fc84:	10da8060 	cmpeqi	r3,r2,27137
 201fc88:	1800031e 	bne	r3,zero,201fc98 <altera_avalon_jtag_uart_ioctl+0x38>
 201fc8c:	109a80a0 	cmpeqi	r2,r2,27138
 201fc90:	1000181e 	bne	r2,zero,201fcf4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201fc94:	00002906 	br	201fd3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201fc98:	e0bffd17 	ldw	r2,-12(fp)
 201fc9c:	10c00117 	ldw	r3,4(r2)
 201fca0:	00a00034 	movhi	r2,32768
 201fca4:	10bfffc4 	addi	r2,r2,-1
 201fca8:	18802126 	beq	r3,r2,201fd30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201fcac:	e0bfff17 	ldw	r2,-4(fp)
 201fcb0:	10800017 	ldw	r2,0(r2)
 201fcb4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201fcb8:	e0bffc17 	ldw	r2,-16(fp)
 201fcbc:	10800090 	cmplti	r2,r2,2
 201fcc0:	1000061e 	bne	r2,zero,201fcdc <altera_avalon_jtag_uart_ioctl+0x7c>
 201fcc4:	e0fffc17 	ldw	r3,-16(fp)
 201fcc8:	00a00034 	movhi	r2,32768
 201fccc:	10bfffc4 	addi	r2,r2,-1
 201fcd0:	18800226 	beq	r3,r2,201fcdc <altera_avalon_jtag_uart_ioctl+0x7c>
 201fcd4:	e0bffc17 	ldw	r2,-16(fp)
 201fcd8:	00000206 	br	201fce4 <altera_avalon_jtag_uart_ioctl+0x84>
 201fcdc:	00a00034 	movhi	r2,32768
 201fce0:	10bfff84 	addi	r2,r2,-2
 201fce4:	e0fffd17 	ldw	r3,-12(fp)
 201fce8:	18800115 	stw	r2,4(r3)
      rc = 0;
 201fcec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201fcf0:	00000f06 	br	201fd30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201fcf4:	e0bffd17 	ldw	r2,-12(fp)
 201fcf8:	10c00117 	ldw	r3,4(r2)
 201fcfc:	00a00034 	movhi	r2,32768
 201fd00:	10bfffc4 	addi	r2,r2,-1
 201fd04:	18800c26 	beq	r3,r2,201fd38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201fd08:	e0bffd17 	ldw	r2,-12(fp)
 201fd0c:	10c00917 	ldw	r3,36(r2)
 201fd10:	e0bffd17 	ldw	r2,-12(fp)
 201fd14:	10800117 	ldw	r2,4(r2)
 201fd18:	1885803a 	cmpltu	r2,r3,r2
 201fd1c:	10c03fcc 	andi	r3,r2,255
 201fd20:	e0bfff17 	ldw	r2,-4(fp)
 201fd24:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201fd28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201fd2c:	00000206 	br	201fd38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201fd30:	0001883a 	nop
 201fd34:	00000106 	br	201fd3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201fd38:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201fd3c:	e0bffb17 	ldw	r2,-20(fp)
}
 201fd40:	e037883a 	mov	sp,fp
 201fd44:	df000017 	ldw	fp,0(sp)
 201fd48:	dec00104 	addi	sp,sp,4
 201fd4c:	f800283a 	ret

0201fd50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201fd50:	deffed04 	addi	sp,sp,-76
 201fd54:	dfc01215 	stw	ra,72(sp)
 201fd58:	df001115 	stw	fp,68(sp)
 201fd5c:	df001104 	addi	fp,sp,68
 201fd60:	e13ffc15 	stw	r4,-16(fp)
 201fd64:	e17ffd15 	stw	r5,-12(fp)
 201fd68:	e1bffe15 	stw	r6,-8(fp)
 201fd6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201fd70:	e0bffd17 	ldw	r2,-12(fp)
 201fd74:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201fd78:	e0bffc17 	ldw	r2,-16(fp)
 201fd7c:	10800a17 	ldw	r2,40(r2)
 201fd80:	e0bff815 	stw	r2,-32(fp)
 201fd84:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201fd88:	e0bff90b 	ldhu	r2,-28(fp)
 201fd8c:	e0fffb04 	addi	r3,fp,-20
 201fd90:	180d883a 	mov	r6,r3
 201fd94:	100b883a 	mov	r5,r2
 201fd98:	e13ff817 	ldw	r4,-32(fp)
 201fd9c:	201d1e80 	call	201d1e8 <OSSemPend>

  while (space > 0)
 201fda0:	00006106 	br	201ff28 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201fda4:	e0bffc17 	ldw	r2,-16(fp)
 201fda8:	10800d17 	ldw	r2,52(r2)
 201fdac:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201fdb0:	e0bffc17 	ldw	r2,-16(fp)
 201fdb4:	10800e17 	ldw	r2,56(r2)
 201fdb8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201fdbc:	e0fff317 	ldw	r3,-52(fp)
 201fdc0:	e0bff417 	ldw	r2,-48(fp)
 201fdc4:	18800536 	bltu	r3,r2,201fddc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201fdc8:	e0fff317 	ldw	r3,-52(fp)
 201fdcc:	e0bff417 	ldw	r2,-48(fp)
 201fdd0:	1885c83a 	sub	r2,r3,r2
 201fdd4:	e0bff115 	stw	r2,-60(fp)
 201fdd8:	00000406 	br	201fdec <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201fddc:	00c20004 	movi	r3,2048
 201fde0:	e0bff417 	ldw	r2,-48(fp)
 201fde4:	1885c83a 	sub	r2,r3,r2
 201fde8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201fdec:	e0bff117 	ldw	r2,-60(fp)
 201fdf0:	10001e26 	beq	r2,zero,201fe6c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201fdf4:	e0fffe17 	ldw	r3,-8(fp)
 201fdf8:	e0bff117 	ldw	r2,-60(fp)
 201fdfc:	1880022e 	bgeu	r3,r2,201fe08 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201fe00:	e0bffe17 	ldw	r2,-8(fp)
 201fe04:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201fe08:	e0bffc17 	ldw	r2,-16(fp)
 201fe0c:	10c01104 	addi	r3,r2,68
 201fe10:	e0bff417 	ldw	r2,-48(fp)
 201fe14:	1885883a 	add	r2,r3,r2
 201fe18:	e1bff117 	ldw	r6,-60(fp)
 201fe1c:	100b883a 	mov	r5,r2
 201fe20:	e13ff017 	ldw	r4,-64(fp)
 201fe24:	20091900 	call	2009190 <memcpy>
      ptr   += n;
 201fe28:	e0fff017 	ldw	r3,-64(fp)
 201fe2c:	e0bff117 	ldw	r2,-60(fp)
 201fe30:	1885883a 	add	r2,r3,r2
 201fe34:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201fe38:	e0fffe17 	ldw	r3,-8(fp)
 201fe3c:	e0bff117 	ldw	r2,-60(fp)
 201fe40:	1885c83a 	sub	r2,r3,r2
 201fe44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201fe48:	e0fff417 	ldw	r3,-48(fp)
 201fe4c:	e0bff117 	ldw	r2,-60(fp)
 201fe50:	1885883a 	add	r2,r3,r2
 201fe54:	10c1ffcc 	andi	r3,r2,2047
 201fe58:	e0bffc17 	ldw	r2,-16(fp)
 201fe5c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201fe60:	e0bffe17 	ldw	r2,-8(fp)
 201fe64:	00bfcf16 	blt	zero,r2,201fda4 <altera_avalon_jtag_uart_read+0x54>
 201fe68:	00000106 	br	201fe70 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201fe6c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201fe70:	e0fff017 	ldw	r3,-64(fp)
 201fe74:	e0bffd17 	ldw	r2,-12(fp)
 201fe78:	18802e1e 	bne	r3,r2,201ff34 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201fe7c:	e0bfff17 	ldw	r2,-4(fp)
 201fe80:	1090000c 	andi	r2,r2,16384
 201fe84:	10002d1e 	bne	r2,zero,201ff3c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201fe88:	d0a7a743 	ldbu	r2,-24931(gp)
 201fe8c:	10803fcc 	andi	r2,r2,255
 201fe90:	10800058 	cmpnei	r2,r2,1
 201fe94:	1000161e 	bne	r2,zero,201fef0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201fe98:	e0bffc17 	ldw	r2,-16(fp)
 201fe9c:	10800c17 	ldw	r2,48(r2)
 201fea0:	e0bff215 	stw	r2,-56(fp)
 201fea4:	00800144 	movi	r2,5
 201fea8:	e0bff98d 	sth	r2,-26(fp)
 201feac:	00bfe0c4 	movi	r2,-125
 201feb0:	e0bffa05 	stb	r2,-24(fp)
 201feb4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201feb8:	d0a7a743 	ldbu	r2,-24931(gp)
 201febc:	10803fcc 	andi	r2,r2,255
 201fec0:	10001526 	beq	r2,zero,201ff18 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201fec4:	e0fff98b 	ldhu	r3,-26(fp)
 201fec8:	e13ffa03 	ldbu	r4,-24(fp)
 201fecc:	e17ffa8b 	ldhu	r5,-22(fp)
 201fed0:	e0bffb44 	addi	r2,fp,-19
 201fed4:	d8800015 	stw	r2,0(sp)
 201fed8:	280f883a 	mov	r7,r5
 201fedc:	200d883a 	mov	r6,r4
 201fee0:	180b883a 	mov	r5,r3
 201fee4:	e13ff217 	ldw	r4,-56(fp)
 201fee8:	2019cb80 	call	2019cb8 <OSFlagPend>
 201feec:	00000a06 	br	201ff18 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201fef0:	0001883a 	nop
 201fef4:	e0bffc17 	ldw	r2,-16(fp)
 201fef8:	10c00d17 	ldw	r3,52(r2)
 201fefc:	e0bff317 	ldw	r2,-52(fp)
 201ff00:	1880051e 	bne	r3,r2,201ff18 <altera_avalon_jtag_uart_read+0x1c8>
 201ff04:	e0bffc17 	ldw	r2,-16(fp)
 201ff08:	10c00917 	ldw	r3,36(r2)
 201ff0c:	e0bffc17 	ldw	r2,-16(fp)
 201ff10:	10800117 	ldw	r2,4(r2)
 201ff14:	18bff736 	bltu	r3,r2,201fef4 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201ff18:	e0bffc17 	ldw	r2,-16(fp)
 201ff1c:	10c00d17 	ldw	r3,52(r2)
 201ff20:	e0bff317 	ldw	r2,-52(fp)
 201ff24:	18800726 	beq	r3,r2,201ff44 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201ff28:	e0bffe17 	ldw	r2,-8(fp)
 201ff2c:	00bf9d16 	blt	zero,r2,201fda4 <altera_avalon_jtag_uart_read+0x54>
 201ff30:	00000506 	br	201ff48 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201ff34:	0001883a 	nop
 201ff38:	00000306 	br	201ff48 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201ff3c:	0001883a 	nop
 201ff40:	00000106 	br	201ff48 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201ff44:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201ff48:	e0bffc17 	ldw	r2,-16(fp)
 201ff4c:	10800a17 	ldw	r2,40(r2)
 201ff50:	1009883a 	mov	r4,r2
 201ff54:	201d5600 	call	201d560 <OSSemPost>

  if (ptr != buffer)
 201ff58:	e0fff017 	ldw	r3,-64(fp)
 201ff5c:	e0bffd17 	ldw	r2,-12(fp)
 201ff60:	18801826 	beq	r3,r2,201ffc4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ff64:	0005303a 	rdctl	r2,status
 201ff68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ff6c:	e0fff717 	ldw	r3,-36(fp)
 201ff70:	00bfff84 	movi	r2,-2
 201ff74:	1884703a 	and	r2,r3,r2
 201ff78:	1001703a 	wrctl	status,r2
  
  return context;
 201ff7c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201ff80:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201ff84:	e0bffc17 	ldw	r2,-16(fp)
 201ff88:	10800817 	ldw	r2,32(r2)
 201ff8c:	10c00054 	ori	r3,r2,1
 201ff90:	e0bffc17 	ldw	r2,-16(fp)
 201ff94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201ff98:	e0bffc17 	ldw	r2,-16(fp)
 201ff9c:	10800017 	ldw	r2,0(r2)
 201ffa0:	10800104 	addi	r2,r2,4
 201ffa4:	1007883a 	mov	r3,r2
 201ffa8:	e0bffc17 	ldw	r2,-16(fp)
 201ffac:	10800817 	ldw	r2,32(r2)
 201ffb0:	18800035 	stwio	r2,0(r3)
 201ffb4:	e0bff617 	ldw	r2,-40(fp)
 201ffb8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ffbc:	e0bff517 	ldw	r2,-44(fp)
 201ffc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201ffc4:	e0fff017 	ldw	r3,-64(fp)
 201ffc8:	e0bffd17 	ldw	r2,-12(fp)
 201ffcc:	18800426 	beq	r3,r2,201ffe0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201ffd0:	e0fff017 	ldw	r3,-64(fp)
 201ffd4:	e0bffd17 	ldw	r2,-12(fp)
 201ffd8:	1885c83a 	sub	r2,r3,r2
 201ffdc:	00000606 	br	201fff8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201ffe0:	e0bfff17 	ldw	r2,-4(fp)
 201ffe4:	1090000c 	andi	r2,r2,16384
 201ffe8:	10000226 	beq	r2,zero,201fff4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201ffec:	00bffd44 	movi	r2,-11
 201fff0:	00000106 	br	201fff8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201fff4:	00bffec4 	movi	r2,-5
}
 201fff8:	e037883a 	mov	sp,fp
 201fffc:	dfc00117 	ldw	ra,4(sp)
 2020000:	df000017 	ldw	fp,0(sp)
 2020004:	dec00204 	addi	sp,sp,8
 2020008:	f800283a 	ret

0202000c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 202000c:	deffed04 	addi	sp,sp,-76
 2020010:	dfc01215 	stw	ra,72(sp)
 2020014:	df001115 	stw	fp,68(sp)
 2020018:	df001104 	addi	fp,sp,68
 202001c:	e13ffc15 	stw	r4,-16(fp)
 2020020:	e17ffd15 	stw	r5,-12(fp)
 2020024:	e1bffe15 	stw	r6,-8(fp)
 2020028:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 202002c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2020030:	e0bffd17 	ldw	r2,-12(fp)
 2020034:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2020038:	e0bffc17 	ldw	r2,-16(fp)
 202003c:	10800b17 	ldw	r2,44(r2)
 2020040:	e0bff815 	stw	r2,-32(fp)
 2020044:	e03ff90d 	sth	zero,-28(fp)
 2020048:	e0bff90b 	ldhu	r2,-28(fp)
 202004c:	e0fffb44 	addi	r3,fp,-19
 2020050:	180d883a 	mov	r6,r3
 2020054:	100b883a 	mov	r5,r2
 2020058:	e13ff817 	ldw	r4,-32(fp)
 202005c:	201d1e80 	call	201d1e8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020060:	00003706 	br	2020140 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2020064:	e0bffc17 	ldw	r2,-16(fp)
 2020068:	10800f17 	ldw	r2,60(r2)
 202006c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 2020070:	e0bffc17 	ldw	r2,-16(fp)
 2020074:	10801017 	ldw	r2,64(r2)
 2020078:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 202007c:	e0fff417 	ldw	r3,-48(fp)
 2020080:	e0bff017 	ldw	r2,-64(fp)
 2020084:	1880062e 	bgeu	r3,r2,20200a0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 2020088:	e0fff017 	ldw	r3,-64(fp)
 202008c:	e0bff417 	ldw	r2,-48(fp)
 2020090:	1885c83a 	sub	r2,r3,r2
 2020094:	10bfffc4 	addi	r2,r2,-1
 2020098:	e0bff115 	stw	r2,-60(fp)
 202009c:	00000b06 	br	20200cc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 20200a0:	e0bff017 	ldw	r2,-64(fp)
 20200a4:	10000526 	beq	r2,zero,20200bc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20200a8:	00c20004 	movi	r3,2048
 20200ac:	e0bff417 	ldw	r2,-48(fp)
 20200b0:	1885c83a 	sub	r2,r3,r2
 20200b4:	e0bff115 	stw	r2,-60(fp)
 20200b8:	00000406 	br	20200cc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20200bc:	00c1ffc4 	movi	r3,2047
 20200c0:	e0bff417 	ldw	r2,-48(fp)
 20200c4:	1885c83a 	sub	r2,r3,r2
 20200c8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20200cc:	e0bff117 	ldw	r2,-60(fp)
 20200d0:	10001e26 	beq	r2,zero,202014c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 20200d4:	e0fffe17 	ldw	r3,-8(fp)
 20200d8:	e0bff117 	ldw	r2,-60(fp)
 20200dc:	1880022e 	bgeu	r3,r2,20200e8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 20200e0:	e0bffe17 	ldw	r2,-8(fp)
 20200e4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20200e8:	e0bffc17 	ldw	r2,-16(fp)
 20200ec:	10c21104 	addi	r3,r2,2116
 20200f0:	e0bff417 	ldw	r2,-48(fp)
 20200f4:	1885883a 	add	r2,r3,r2
 20200f8:	e1bff117 	ldw	r6,-60(fp)
 20200fc:	e17ffd17 	ldw	r5,-12(fp)
 2020100:	1009883a 	mov	r4,r2
 2020104:	20091900 	call	2009190 <memcpy>
      ptr   += n;
 2020108:	e0fffd17 	ldw	r3,-12(fp)
 202010c:	e0bff117 	ldw	r2,-60(fp)
 2020110:	1885883a 	add	r2,r3,r2
 2020114:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2020118:	e0fffe17 	ldw	r3,-8(fp)
 202011c:	e0bff117 	ldw	r2,-60(fp)
 2020120:	1885c83a 	sub	r2,r3,r2
 2020124:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020128:	e0fff417 	ldw	r3,-48(fp)
 202012c:	e0bff117 	ldw	r2,-60(fp)
 2020130:	1885883a 	add	r2,r3,r2
 2020134:	10c1ffcc 	andi	r3,r2,2047
 2020138:	e0bffc17 	ldw	r2,-16(fp)
 202013c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020140:	e0bffe17 	ldw	r2,-8(fp)
 2020144:	00bfc716 	blt	zero,r2,2020064 <altera_avalon_jtag_uart_write+0x58>
 2020148:	00000106 	br	2020150 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 202014c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020150:	0005303a 	rdctl	r2,status
 2020154:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020158:	e0fff717 	ldw	r3,-36(fp)
 202015c:	00bfff84 	movi	r2,-2
 2020160:	1884703a 	and	r2,r3,r2
 2020164:	1001703a 	wrctl	status,r2
  
  return context;
 2020168:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 202016c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020170:	e0bffc17 	ldw	r2,-16(fp)
 2020174:	10800817 	ldw	r2,32(r2)
 2020178:	10c00094 	ori	r3,r2,2
 202017c:	e0bffc17 	ldw	r2,-16(fp)
 2020180:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020184:	e0bffc17 	ldw	r2,-16(fp)
 2020188:	10800017 	ldw	r2,0(r2)
 202018c:	10800104 	addi	r2,r2,4
 2020190:	1007883a 	mov	r3,r2
 2020194:	e0bffc17 	ldw	r2,-16(fp)
 2020198:	10800817 	ldw	r2,32(r2)
 202019c:	18800035 	stwio	r2,0(r3)
 20201a0:	e0bff617 	ldw	r2,-40(fp)
 20201a4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20201a8:	e0bff317 	ldw	r2,-52(fp)
 20201ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20201b0:	e0bffe17 	ldw	r2,-8(fp)
 20201b4:	00802a0e 	bge	zero,r2,2020260 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 20201b8:	e0bfff17 	ldw	r2,-4(fp)
 20201bc:	1090000c 	andi	r2,r2,16384
 20201c0:	10002a1e 	bne	r2,zero,202026c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 20201c4:	d0a7a743 	ldbu	r2,-24931(gp)
 20201c8:	10803fcc 	andi	r2,r2,255
 20201cc:	10800058 	cmpnei	r2,r2,1
 20201d0:	1000161e 	bne	r2,zero,202022c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 20201d4:	e0bffc17 	ldw	r2,-16(fp)
 20201d8:	10800c17 	ldw	r2,48(r2)
 20201dc:	e0bff515 	stw	r2,-44(fp)
 20201e0:	00800184 	movi	r2,6
 20201e4:	e0bff98d 	sth	r2,-26(fp)
 20201e8:	00bfe0c4 	movi	r2,-125
 20201ec:	e0bffa05 	stb	r2,-24(fp)
 20201f0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 20201f4:	d0a7a743 	ldbu	r2,-24931(gp)
 20201f8:	10803fcc 	andi	r2,r2,255
 20201fc:	10001526 	beq	r2,zero,2020254 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2020200:	e0fff98b 	ldhu	r3,-26(fp)
 2020204:	e13ffa03 	ldbu	r4,-24(fp)
 2020208:	e17ffa8b 	ldhu	r5,-22(fp)
 202020c:	e0bffb04 	addi	r2,fp,-20
 2020210:	d8800015 	stw	r2,0(sp)
 2020214:	280f883a 	mov	r7,r5
 2020218:	200d883a 	mov	r6,r4
 202021c:	180b883a 	mov	r5,r3
 2020220:	e13ff517 	ldw	r4,-44(fp)
 2020224:	2019cb80 	call	2019cb8 <OSFlagPend>
 2020228:	00000a06 	br	2020254 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 202022c:	0001883a 	nop
 2020230:	e0bffc17 	ldw	r2,-16(fp)
 2020234:	10c01017 	ldw	r3,64(r2)
 2020238:	e0bff017 	ldw	r2,-64(fp)
 202023c:	1880051e 	bne	r3,r2,2020254 <altera_avalon_jtag_uart_write+0x248>
 2020240:	e0bffc17 	ldw	r2,-16(fp)
 2020244:	10c00917 	ldw	r3,36(r2)
 2020248:	e0bffc17 	ldw	r2,-16(fp)
 202024c:	10800117 	ldw	r2,4(r2)
 2020250:	18bff736 	bltu	r3,r2,2020230 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2020254:	e0bffc17 	ldw	r2,-16(fp)
 2020258:	10800917 	ldw	r2,36(r2)
 202025c:	1000051e 	bne	r2,zero,2020274 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 2020260:	e0bffe17 	ldw	r2,-8(fp)
 2020264:	00bfb616 	blt	zero,r2,2020140 <altera_avalon_jtag_uart_write+0x134>
 2020268:	00000306 	br	2020278 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 202026c:	0001883a 	nop
 2020270:	00000106 	br	2020278 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2020274:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2020278:	e0bffc17 	ldw	r2,-16(fp)
 202027c:	10800b17 	ldw	r2,44(r2)
 2020280:	1009883a 	mov	r4,r2
 2020284:	201d5600 	call	201d560 <OSSemPost>

  if (ptr != start)
 2020288:	e0fffd17 	ldw	r3,-12(fp)
 202028c:	e0bff217 	ldw	r2,-56(fp)
 2020290:	18800426 	beq	r3,r2,20202a4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 2020294:	e0fffd17 	ldw	r3,-12(fp)
 2020298:	e0bff217 	ldw	r2,-56(fp)
 202029c:	1885c83a 	sub	r2,r3,r2
 20202a0:	00000606 	br	20202bc <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 20202a4:	e0bfff17 	ldw	r2,-4(fp)
 20202a8:	1090000c 	andi	r2,r2,16384
 20202ac:	10000226 	beq	r2,zero,20202b8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 20202b0:	00bffd44 	movi	r2,-11
 20202b4:	00000106 	br	20202bc <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20202b8:	00bffec4 	movi	r2,-5
}
 20202bc:	e037883a 	mov	sp,fp
 20202c0:	dfc00117 	ldw	ra,4(sp)
 20202c4:	df000017 	ldw	fp,0(sp)
 20202c8:	dec00204 	addi	sp,sp,8
 20202cc:	f800283a 	ret

020202d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20202d0:	defff904 	addi	sp,sp,-28
 20202d4:	dfc00615 	stw	ra,24(sp)
 20202d8:	df000515 	stw	fp,20(sp)
 20202dc:	df000504 	addi	fp,sp,20
 20202e0:	e13ffe15 	stw	r4,-8(fp)
 20202e4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20202e8:	0007883a 	mov	r3,zero
 20202ec:	e0bffe17 	ldw	r2,-8(fp)
 20202f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20202f4:	e0bffe17 	ldw	r2,-8(fp)
 20202f8:	10800104 	addi	r2,r2,4
 20202fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020300:	0005303a 	rdctl	r2,status
 2020304:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020308:	e0fffc17 	ldw	r3,-16(fp)
 202030c:	00bfff84 	movi	r2,-2
 2020310:	1884703a 	and	r2,r3,r2
 2020314:	1001703a 	wrctl	status,r2
  
  return context;
 2020318:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 202031c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 2020320:	20210f80 	call	20210f8 <alt_tick>
 2020324:	e0bffb17 	ldw	r2,-20(fp)
 2020328:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 202032c:	e0bffd17 	ldw	r2,-12(fp)
 2020330:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2020334:	0001883a 	nop
 2020338:	e037883a 	mov	sp,fp
 202033c:	dfc00117 	ldw	ra,4(sp)
 2020340:	df000017 	ldw	fp,0(sp)
 2020344:	dec00204 	addi	sp,sp,8
 2020348:	f800283a 	ret

0202034c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 202034c:	defff904 	addi	sp,sp,-28
 2020350:	dfc00615 	stw	ra,24(sp)
 2020354:	df000515 	stw	fp,20(sp)
 2020358:	df000504 	addi	fp,sp,20
 202035c:	e13ffc15 	stw	r4,-16(fp)
 2020360:	e17ffd15 	stw	r5,-12(fp)
 2020364:	e1bffe15 	stw	r6,-8(fp)
 2020368:	e1ffff15 	stw	r7,-4(fp)
 202036c:	e0bfff17 	ldw	r2,-4(fp)
 2020370:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2020374:	d0a7bc17 	ldw	r2,-24848(gp)
 2020378:	1000021e 	bne	r2,zero,2020384 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 202037c:	e0bffb17 	ldw	r2,-20(fp)
 2020380:	d0a7bc15 	stw	r2,-24848(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2020384:	e0bffc17 	ldw	r2,-16(fp)
 2020388:	10800104 	addi	r2,r2,4
 202038c:	00c001c4 	movi	r3,7
 2020390:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 2020394:	018080b4 	movhi	r6,514
 2020398:	3180b404 	addi	r6,r6,720
 202039c:	e17ffc17 	ldw	r5,-16(fp)
 20203a0:	e13ffe17 	ldw	r4,-8(fp)
 20203a4:	2020c880 	call	2020c88 <alt_irq_register>
#endif  
}
 20203a8:	0001883a 	nop
 20203ac:	e037883a 	mov	sp,fp
 20203b0:	dfc00117 	ldw	ra,4(sp)
 20203b4:	df000017 	ldw	fp,0(sp)
 20203b8:	dec00204 	addi	sp,sp,8
 20203bc:	f800283a 	ret

020203c0 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 20203c0:	defffc04 	addi	sp,sp,-16
 20203c4:	dfc00315 	stw	ra,12(sp)
 20203c8:	df000215 	stw	fp,8(sp)
 20203cc:	df000204 	addi	fp,sp,8
 20203d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 20203d4:	d1603804 	addi	r5,gp,-32544
 20203d8:	e13fff17 	ldw	r4,-4(fp)
 20203dc:	2020a840 	call	2020a84 <alt_find_dev>
 20203e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 20203e4:	e0bffe17 	ldw	r2,-8(fp)
}
 20203e8:	e037883a 	mov	sp,fp
 20203ec:	dfc00117 	ldw	ra,4(sp)
 20203f0:	df000017 	ldw	fp,0(sp)
 20203f4:	dec00204 	addi	sp,sp,8
 20203f8:	f800283a 	ret

020203fc <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 20203fc:	defffd04 	addi	sp,sp,-12
 2020400:	df000215 	stw	fp,8(sp)
 2020404:	df000204 	addi	fp,sp,8
 2020408:	e13ffe15 	stw	r4,-8(fp)
 202040c:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 2020410:	e0bffe17 	ldw	r2,-8(fp)
 2020414:	10800a17 	ldw	r2,40(r2)
 2020418:	10800023 	ldbuio	r2,0(r2)
 202041c:	10803fcc 	andi	r2,r2,255
 2020420:	1007883a 	mov	r3,r2
 2020424:	e0bfff17 	ldw	r2,-4(fp)
 2020428:	10c00005 	stb	r3,0(r2)

	return 0;
 202042c:	0005883a 	mov	r2,zero
}
 2020430:	e037883a 	mov	sp,fp
 2020434:	df000017 	ldw	fp,0(sp)
 2020438:	dec00104 	addi	sp,sp,4
 202043c:	f800283a 	ret

02020440 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 2020440:	defffc04 	addi	sp,sp,-16
 2020444:	df000315 	stw	fp,12(sp)
 2020448:	df000304 	addi	fp,sp,12
 202044c:	e13ffd15 	stw	r4,-12(fp)
 2020450:	2805883a 	mov	r2,r5
 2020454:	e1bfff15 	stw	r6,-4(fp)
 2020458:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 202045c:	e0bffd17 	ldw	r2,-12(fp)
 2020460:	10800a17 	ldw	r2,40(r2)
 2020464:	1007883a 	mov	r3,r2
 2020468:	e0bffe03 	ldbu	r2,-8(fp)
 202046c:	10800fcc 	andi	r2,r2,63
 2020470:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020474:	e0bffd17 	ldw	r2,-12(fp)
 2020478:	10800a17 	ldw	r2,40(r2)
 202047c:	10800044 	addi	r2,r2,1
 2020480:	10800023 	ldbuio	r2,0(r2)
 2020484:	10803fcc 	andi	r2,r2,255
 2020488:	1007883a 	mov	r3,r2
 202048c:	e0bfff17 	ldw	r2,-4(fp)
 2020490:	10c00005 	stb	r3,0(r2)

	return 0;
 2020494:	0005883a 	mov	r2,zero
}
 2020498:	e037883a 	mov	sp,fp
 202049c:	df000017 	ldw	fp,0(sp)
 20204a0:	dec00104 	addi	sp,sp,4
 20204a4:	f800283a 	ret

020204a8 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 20204a8:	defffc04 	addi	sp,sp,-16
 20204ac:	df000315 	stw	fp,12(sp)
 20204b0:	df000304 	addi	fp,sp,12
 20204b4:	e13ffd15 	stw	r4,-12(fp)
 20204b8:	2807883a 	mov	r3,r5
 20204bc:	3005883a 	mov	r2,r6
 20204c0:	e0fffe05 	stb	r3,-8(fp)
 20204c4:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20204c8:	e0bffd17 	ldw	r2,-12(fp)
 20204cc:	10800a17 	ldw	r2,40(r2)
 20204d0:	1007883a 	mov	r3,r2
 20204d4:	e0bffe03 	ldbu	r2,-8(fp)
 20204d8:	10800fcc 	andi	r2,r2,63
 20204dc:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 20204e0:	e0bffd17 	ldw	r2,-12(fp)
 20204e4:	10800a17 	ldw	r2,40(r2)
 20204e8:	10800044 	addi	r2,r2,1
 20204ec:	1007883a 	mov	r3,r2
 20204f0:	e0bfff03 	ldbu	r2,-4(fp)
 20204f4:	18800025 	stbio	r2,0(r3)

	return 0;
 20204f8:	0005883a 	mov	r2,zero
}
 20204fc:	e037883a 	mov	sp,fp
 2020500:	df000017 	ldw	fp,0(sp)
 2020504:	dec00104 	addi	sp,sp,4
 2020508:	f800283a 	ret

0202050c <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 202050c:	defffd04 	addi	sp,sp,-12
 2020510:	df000215 	stw	fp,8(sp)
 2020514:	df000204 	addi	fp,sp,8
 2020518:	e13ffe15 	stw	r4,-8(fp)
 202051c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020520:	e0bffe17 	ldw	r2,-8(fp)
 2020524:	10800a17 	ldw	r2,40(r2)
 2020528:	1007883a 	mov	r3,r2
 202052c:	00800c84 	movi	r2,50
 2020530:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020534:	e0bffe17 	ldw	r2,-8(fp)
 2020538:	10800a17 	ldw	r2,40(r2)
 202053c:	10800044 	addi	r2,r2,1
 2020540:	10800023 	ldbuio	r2,0(r2)
 2020544:	10803fcc 	andi	r2,r2,255
 2020548:	10ffffcc 	andi	r3,r2,65535
 202054c:	e0bfff17 	ldw	r2,-4(fp)
 2020550:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020554:	e0bffe17 	ldw	r2,-8(fp)
 2020558:	10800a17 	ldw	r2,40(r2)
 202055c:	1007883a 	mov	r3,r2
 2020560:	00800cc4 	movi	r2,51
 2020564:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2020568:	e0bffe17 	ldw	r2,-8(fp)
 202056c:	10800a17 	ldw	r2,40(r2)
 2020570:	10800044 	addi	r2,r2,1
 2020574:	10800023 	ldbuio	r2,0(r2)
 2020578:	10803fcc 	andi	r2,r2,255
 202057c:	10bfffcc 	andi	r2,r2,65535
 2020580:	1004923a 	slli	r2,r2,8
 2020584:	e0ffff17 	ldw	r3,-4(fp)
 2020588:	18c00017 	ldw	r3,0(r3)
 202058c:	1885883a 	add	r2,r3,r2
 2020590:	1007883a 	mov	r3,r2
 2020594:	e0bfff17 	ldw	r2,-4(fp)
 2020598:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 202059c:	e0bfff17 	ldw	r2,-4(fp)
 20205a0:	10800017 	ldw	r2,0(r2)
 20205a4:	10a0000c 	andi	r2,r2,32768
 20205a8:	10000626 	beq	r2,zero,20205c4 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 20205ac:	e0bfff17 	ldw	r2,-4(fp)
 20205b0:	10800017 	ldw	r2,0(r2)
 20205b4:	10bffff4 	orhi	r2,r2,65535
 20205b8:	1007883a 	mov	r3,r2
 20205bc:	e0bfff17 	ldw	r2,-4(fp)
 20205c0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20205c4:	0005883a 	mov	r2,zero
}
 20205c8:	e037883a 	mov	sp,fp
 20205cc:	df000017 	ldw	fp,0(sp)
 20205d0:	dec00104 	addi	sp,sp,4
 20205d4:	f800283a 	ret

020205d8 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 20205d8:	defffd04 	addi	sp,sp,-12
 20205dc:	df000215 	stw	fp,8(sp)
 20205e0:	df000204 	addi	fp,sp,8
 20205e4:	e13ffe15 	stw	r4,-8(fp)
 20205e8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20205ec:	e0bffe17 	ldw	r2,-8(fp)
 20205f0:	10800a17 	ldw	r2,40(r2)
 20205f4:	1007883a 	mov	r3,r2
 20205f8:	00800d04 	movi	r2,52
 20205fc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020600:	e0bffe17 	ldw	r2,-8(fp)
 2020604:	10800a17 	ldw	r2,40(r2)
 2020608:	10800044 	addi	r2,r2,1
 202060c:	10800023 	ldbuio	r2,0(r2)
 2020610:	10803fcc 	andi	r2,r2,255
 2020614:	10ffffcc 	andi	r3,r2,65535
 2020618:	e0bfff17 	ldw	r2,-4(fp)
 202061c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020620:	e0bffe17 	ldw	r2,-8(fp)
 2020624:	10800a17 	ldw	r2,40(r2)
 2020628:	1007883a 	mov	r3,r2
 202062c:	00800d44 	movi	r2,53
 2020630:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2020634:	e0bffe17 	ldw	r2,-8(fp)
 2020638:	10800a17 	ldw	r2,40(r2)
 202063c:	10800044 	addi	r2,r2,1
 2020640:	10800023 	ldbuio	r2,0(r2)
 2020644:	10803fcc 	andi	r2,r2,255
 2020648:	10bfffcc 	andi	r2,r2,65535
 202064c:	1004923a 	slli	r2,r2,8
 2020650:	e0ffff17 	ldw	r3,-4(fp)
 2020654:	18c00017 	ldw	r3,0(r3)
 2020658:	1885883a 	add	r2,r3,r2
 202065c:	1007883a 	mov	r3,r2
 2020660:	e0bfff17 	ldw	r2,-4(fp)
 2020664:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 2020668:	e0bfff17 	ldw	r2,-4(fp)
 202066c:	10800017 	ldw	r2,0(r2)
 2020670:	10a0000c 	andi	r2,r2,32768
 2020674:	10000626 	beq	r2,zero,2020690 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 2020678:	e0bfff17 	ldw	r2,-4(fp)
 202067c:	10800017 	ldw	r2,0(r2)
 2020680:	10bffff4 	orhi	r2,r2,65535
 2020684:	1007883a 	mov	r3,r2
 2020688:	e0bfff17 	ldw	r2,-4(fp)
 202068c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 2020690:	0005883a 	mov	r2,zero
}
 2020694:	e037883a 	mov	sp,fp
 2020698:	df000017 	ldw	fp,0(sp)
 202069c:	dec00104 	addi	sp,sp,4
 20206a0:	f800283a 	ret

020206a4 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 20206a4:	defffd04 	addi	sp,sp,-12
 20206a8:	df000215 	stw	fp,8(sp)
 20206ac:	df000204 	addi	fp,sp,8
 20206b0:	e13ffe15 	stw	r4,-8(fp)
 20206b4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20206b8:	e0bffe17 	ldw	r2,-8(fp)
 20206bc:	10800a17 	ldw	r2,40(r2)
 20206c0:	1007883a 	mov	r3,r2
 20206c4:	00800d84 	movi	r2,54
 20206c8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 20206cc:	e0bffe17 	ldw	r2,-8(fp)
 20206d0:	10800a17 	ldw	r2,40(r2)
 20206d4:	10800044 	addi	r2,r2,1
 20206d8:	10800023 	ldbuio	r2,0(r2)
 20206dc:	10803fcc 	andi	r2,r2,255
 20206e0:	10ffffcc 	andi	r3,r2,65535
 20206e4:	e0bfff17 	ldw	r2,-4(fp)
 20206e8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20206ec:	e0bffe17 	ldw	r2,-8(fp)
 20206f0:	10800a17 	ldw	r2,40(r2)
 20206f4:	1007883a 	mov	r3,r2
 20206f8:	00800dc4 	movi	r2,55
 20206fc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2020700:	e0bffe17 	ldw	r2,-8(fp)
 2020704:	10800a17 	ldw	r2,40(r2)
 2020708:	10800044 	addi	r2,r2,1
 202070c:	10800023 	ldbuio	r2,0(r2)
 2020710:	10803fcc 	andi	r2,r2,255
 2020714:	10bfffcc 	andi	r2,r2,65535
 2020718:	1004923a 	slli	r2,r2,8
 202071c:	e0ffff17 	ldw	r3,-4(fp)
 2020720:	18c00017 	ldw	r3,0(r3)
 2020724:	1885883a 	add	r2,r3,r2
 2020728:	1007883a 	mov	r3,r2
 202072c:	e0bfff17 	ldw	r2,-4(fp)
 2020730:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 2020734:	e0bfff17 	ldw	r2,-4(fp)
 2020738:	10800017 	ldw	r2,0(r2)
 202073c:	10a0000c 	andi	r2,r2,32768
 2020740:	10000626 	beq	r2,zero,202075c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 2020744:	e0bfff17 	ldw	r2,-4(fp)
 2020748:	10800017 	ldw	r2,0(r2)
 202074c:	10bffff4 	orhi	r2,r2,65535
 2020750:	1007883a 	mov	r3,r2
 2020754:	e0bfff17 	ldw	r2,-4(fp)
 2020758:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 202075c:	0005883a 	mov	r2,zero
}
 2020760:	e037883a 	mov	sp,fp
 2020764:	df000017 	ldw	fp,0(sp)
 2020768:	dec00104 	addi	sp,sp,4
 202076c:	f800283a 	ret

02020770 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2020770:	defff504 	addi	sp,sp,-44
 2020774:	df000a15 	stw	fp,40(sp)
 2020778:	df000a04 	addi	fp,sp,40
 202077c:	e13ffc15 	stw	r4,-16(fp)
 2020780:	e17ffd15 	stw	r5,-12(fp)
 2020784:	e1bffe15 	stw	r6,-8(fp)
 2020788:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 202078c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2020790:	d0a7bc17 	ldw	r2,-24848(gp)
  
  if (alt_ticks_per_second ())
 2020794:	10003c26 	beq	r2,zero,2020888 <alt_alarm_start+0x118>
  {
    if (alarm)
 2020798:	e0bffc17 	ldw	r2,-16(fp)
 202079c:	10003826 	beq	r2,zero,2020880 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 20207a0:	e0bffc17 	ldw	r2,-16(fp)
 20207a4:	e0fffe17 	ldw	r3,-8(fp)
 20207a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20207ac:	e0bffc17 	ldw	r2,-16(fp)
 20207b0:	e0ffff17 	ldw	r3,-4(fp)
 20207b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20207b8:	0005303a 	rdctl	r2,status
 20207bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20207c0:	e0fff917 	ldw	r3,-28(fp)
 20207c4:	00bfff84 	movi	r2,-2
 20207c8:	1884703a 	and	r2,r3,r2
 20207cc:	1001703a 	wrctl	status,r2
  
  return context;
 20207d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20207d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20207d8:	d0a7bd17 	ldw	r2,-24844(gp)
      
      current_nticks = alt_nticks();
 20207dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20207e0:	e0fffd17 	ldw	r3,-12(fp)
 20207e4:	e0bff617 	ldw	r2,-40(fp)
 20207e8:	1885883a 	add	r2,r3,r2
 20207ec:	10c00044 	addi	r3,r2,1
 20207f0:	e0bffc17 	ldw	r2,-16(fp)
 20207f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20207f8:	e0bffc17 	ldw	r2,-16(fp)
 20207fc:	10c00217 	ldw	r3,8(r2)
 2020800:	e0bff617 	ldw	r2,-40(fp)
 2020804:	1880042e 	bgeu	r3,r2,2020818 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2020808:	e0bffc17 	ldw	r2,-16(fp)
 202080c:	00c00044 	movi	r3,1
 2020810:	10c00405 	stb	r3,16(r2)
 2020814:	00000206 	br	2020820 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2020818:	e0bffc17 	ldw	r2,-16(fp)
 202081c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2020820:	e0bffc17 	ldw	r2,-16(fp)
 2020824:	d0e05d04 	addi	r3,gp,-32396
 2020828:	e0fffa15 	stw	r3,-24(fp)
 202082c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2020830:	e0bffb17 	ldw	r2,-20(fp)
 2020834:	e0fffa17 	ldw	r3,-24(fp)
 2020838:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 202083c:	e0bffa17 	ldw	r2,-24(fp)
 2020840:	10c00017 	ldw	r3,0(r2)
 2020844:	e0bffb17 	ldw	r2,-20(fp)
 2020848:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 202084c:	e0bffa17 	ldw	r2,-24(fp)
 2020850:	10800017 	ldw	r2,0(r2)
 2020854:	e0fffb17 	ldw	r3,-20(fp)
 2020858:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 202085c:	e0bffa17 	ldw	r2,-24(fp)
 2020860:	e0fffb17 	ldw	r3,-20(fp)
 2020864:	10c00015 	stw	r3,0(r2)
 2020868:	e0bff817 	ldw	r2,-32(fp)
 202086c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020870:	e0bff717 	ldw	r2,-36(fp)
 2020874:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2020878:	0005883a 	mov	r2,zero
 202087c:	00000306 	br	202088c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2020880:	00bffa84 	movi	r2,-22
 2020884:	00000106 	br	202088c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2020888:	00bfde84 	movi	r2,-134
  }
}
 202088c:	e037883a 	mov	sp,fp
 2020890:	df000017 	ldw	fp,0(sp)
 2020894:	dec00104 	addi	sp,sp,4
 2020898:	f800283a 	ret

0202089c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 202089c:	defffe04 	addi	sp,sp,-8
 20208a0:	df000115 	stw	fp,4(sp)
 20208a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20208a8:	e03fff15 	stw	zero,-4(fp)
 20208ac:	00000506 	br	20208c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 20208b0:	e0bfff17 	ldw	r2,-4(fp)
 20208b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20208b8:	e0bfff17 	ldw	r2,-4(fp)
 20208bc:	10800804 	addi	r2,r2,32
 20208c0:	e0bfff15 	stw	r2,-4(fp)
 20208c4:	e0bfff17 	ldw	r2,-4(fp)
 20208c8:	10820030 	cmpltui	r2,r2,2048
 20208cc:	103ff81e 	bne	r2,zero,20208b0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20208d0:	0001883a 	nop
 20208d4:	e037883a 	mov	sp,fp
 20208d8:	df000017 	ldw	fp,0(sp)
 20208dc:	dec00104 	addi	sp,sp,4
 20208e0:	f800283a 	ret

020208e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20208e4:	defffe04 	addi	sp,sp,-8
 20208e8:	dfc00115 	stw	ra,4(sp)
 20208ec:	df000015 	stw	fp,0(sp)
 20208f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20208f4:	d0a03b17 	ldw	r2,-32532(gp)
 20208f8:	10000326 	beq	r2,zero,2020908 <alt_get_errno+0x24>
 20208fc:	d0a03b17 	ldw	r2,-32532(gp)
 2020900:	103ee83a 	callr	r2
 2020904:	00000106 	br	202090c <alt_get_errno+0x28>
 2020908:	d0a79e04 	addi	r2,gp,-24968
}
 202090c:	e037883a 	mov	sp,fp
 2020910:	dfc00117 	ldw	ra,4(sp)
 2020914:	df000017 	ldw	fp,0(sp)
 2020918:	dec00204 	addi	sp,sp,8
 202091c:	f800283a 	ret

02020920 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2020920:	defffa04 	addi	sp,sp,-24
 2020924:	dfc00515 	stw	ra,20(sp)
 2020928:	df000415 	stw	fp,16(sp)
 202092c:	df000404 	addi	fp,sp,16
 2020930:	e13ffe15 	stw	r4,-8(fp)
 2020934:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2020938:	e0bffe17 	ldw	r2,-8(fp)
 202093c:	10000326 	beq	r2,zero,202094c <alt_dev_llist_insert+0x2c>
 2020940:	e0bffe17 	ldw	r2,-8(fp)
 2020944:	10800217 	ldw	r2,8(r2)
 2020948:	1000061e 	bne	r2,zero,2020964 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 202094c:	20208e40 	call	20208e4 <alt_get_errno>
 2020950:	1007883a 	mov	r3,r2
 2020954:	00800584 	movi	r2,22
 2020958:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 202095c:	00bffa84 	movi	r2,-22
 2020960:	00001306 	br	20209b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2020964:	e0bffe17 	ldw	r2,-8(fp)
 2020968:	e0ffff17 	ldw	r3,-4(fp)
 202096c:	e0fffc15 	stw	r3,-16(fp)
 2020970:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2020974:	e0bffd17 	ldw	r2,-12(fp)
 2020978:	e0fffc17 	ldw	r3,-16(fp)
 202097c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2020980:	e0bffc17 	ldw	r2,-16(fp)
 2020984:	10c00017 	ldw	r3,0(r2)
 2020988:	e0bffd17 	ldw	r2,-12(fp)
 202098c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2020990:	e0bffc17 	ldw	r2,-16(fp)
 2020994:	10800017 	ldw	r2,0(r2)
 2020998:	e0fffd17 	ldw	r3,-12(fp)
 202099c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20209a0:	e0bffc17 	ldw	r2,-16(fp)
 20209a4:	e0fffd17 	ldw	r3,-12(fp)
 20209a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 20209ac:	0005883a 	mov	r2,zero
}
 20209b0:	e037883a 	mov	sp,fp
 20209b4:	dfc00117 	ldw	ra,4(sp)
 20209b8:	df000017 	ldw	fp,0(sp)
 20209bc:	dec00204 	addi	sp,sp,8
 20209c0:	f800283a 	ret

020209c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20209c4:	defffd04 	addi	sp,sp,-12
 20209c8:	dfc00215 	stw	ra,8(sp)
 20209cc:	df000115 	stw	fp,4(sp)
 20209d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20209d4:	008080b4 	movhi	r2,514
 20209d8:	10877404 	addi	r2,r2,7632
 20209dc:	e0bfff15 	stw	r2,-4(fp)
 20209e0:	00000606 	br	20209fc <_do_ctors+0x38>
        (*ctor) (); 
 20209e4:	e0bfff17 	ldw	r2,-4(fp)
 20209e8:	10800017 	ldw	r2,0(r2)
 20209ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20209f0:	e0bfff17 	ldw	r2,-4(fp)
 20209f4:	10bfff04 	addi	r2,r2,-4
 20209f8:	e0bfff15 	stw	r2,-4(fp)
 20209fc:	e0ffff17 	ldw	r3,-4(fp)
 2020a00:	008080b4 	movhi	r2,514
 2020a04:	10877504 	addi	r2,r2,7636
 2020a08:	18bff62e 	bgeu	r3,r2,20209e4 <_do_ctors+0x20>
        (*ctor) (); 
}
 2020a0c:	0001883a 	nop
 2020a10:	e037883a 	mov	sp,fp
 2020a14:	dfc00117 	ldw	ra,4(sp)
 2020a18:	df000017 	ldw	fp,0(sp)
 2020a1c:	dec00204 	addi	sp,sp,8
 2020a20:	f800283a 	ret

02020a24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2020a24:	defffd04 	addi	sp,sp,-12
 2020a28:	dfc00215 	stw	ra,8(sp)
 2020a2c:	df000115 	stw	fp,4(sp)
 2020a30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020a34:	008080b4 	movhi	r2,514
 2020a38:	10877404 	addi	r2,r2,7632
 2020a3c:	e0bfff15 	stw	r2,-4(fp)
 2020a40:	00000606 	br	2020a5c <_do_dtors+0x38>
        (*dtor) (); 
 2020a44:	e0bfff17 	ldw	r2,-4(fp)
 2020a48:	10800017 	ldw	r2,0(r2)
 2020a4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020a50:	e0bfff17 	ldw	r2,-4(fp)
 2020a54:	10bfff04 	addi	r2,r2,-4
 2020a58:	e0bfff15 	stw	r2,-4(fp)
 2020a5c:	e0ffff17 	ldw	r3,-4(fp)
 2020a60:	008080b4 	movhi	r2,514
 2020a64:	10877504 	addi	r2,r2,7636
 2020a68:	18bff62e 	bgeu	r3,r2,2020a44 <_do_dtors+0x20>
        (*dtor) (); 
}
 2020a6c:	0001883a 	nop
 2020a70:	e037883a 	mov	sp,fp
 2020a74:	dfc00117 	ldw	ra,4(sp)
 2020a78:	df000017 	ldw	fp,0(sp)
 2020a7c:	dec00204 	addi	sp,sp,8
 2020a80:	f800283a 	ret

02020a84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2020a84:	defffa04 	addi	sp,sp,-24
 2020a88:	dfc00515 	stw	ra,20(sp)
 2020a8c:	df000415 	stw	fp,16(sp)
 2020a90:	df000404 	addi	fp,sp,16
 2020a94:	e13ffe15 	stw	r4,-8(fp)
 2020a98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2020a9c:	e0bfff17 	ldw	r2,-4(fp)
 2020aa0:	10800017 	ldw	r2,0(r2)
 2020aa4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2020aa8:	e13ffe17 	ldw	r4,-8(fp)
 2020aac:	20096f80 	call	20096f8 <strlen>
 2020ab0:	10800044 	addi	r2,r2,1
 2020ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2020ab8:	00000d06 	br	2020af0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2020abc:	e0bffc17 	ldw	r2,-16(fp)
 2020ac0:	10800217 	ldw	r2,8(r2)
 2020ac4:	e0fffd17 	ldw	r3,-12(fp)
 2020ac8:	180d883a 	mov	r6,r3
 2020acc:	e17ffe17 	ldw	r5,-8(fp)
 2020ad0:	1009883a 	mov	r4,r2
 2020ad4:	20219100 	call	2021910 <memcmp>
 2020ad8:	1000021e 	bne	r2,zero,2020ae4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2020adc:	e0bffc17 	ldw	r2,-16(fp)
 2020ae0:	00000706 	br	2020b00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2020ae4:	e0bffc17 	ldw	r2,-16(fp)
 2020ae8:	10800017 	ldw	r2,0(r2)
 2020aec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2020af0:	e0fffc17 	ldw	r3,-16(fp)
 2020af4:	e0bfff17 	ldw	r2,-4(fp)
 2020af8:	18bff01e 	bne	r3,r2,2020abc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2020afc:	0005883a 	mov	r2,zero
}
 2020b00:	e037883a 	mov	sp,fp
 2020b04:	dfc00117 	ldw	ra,4(sp)
 2020b08:	df000017 	ldw	fp,0(sp)
 2020b0c:	dec00204 	addi	sp,sp,8
 2020b10:	f800283a 	ret

02020b14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2020b14:	defffe04 	addi	sp,sp,-8
 2020b18:	dfc00115 	stw	ra,4(sp)
 2020b1c:	df000015 	stw	fp,0(sp)
 2020b20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2020b24:	01440004 	movi	r5,4096
 2020b28:	0009883a 	mov	r4,zero
 2020b2c:	20217600 	call	2021760 <alt_icache_flush>
#endif
}
 2020b30:	0001883a 	nop
 2020b34:	e037883a 	mov	sp,fp
 2020b38:	dfc00117 	ldw	ra,4(sp)
 2020b3c:	df000017 	ldw	fp,0(sp)
 2020b40:	dec00204 	addi	sp,sp,8
 2020b44:	f800283a 	ret

02020b48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2020b48:	defff904 	addi	sp,sp,-28
 2020b4c:	dfc00615 	stw	ra,24(sp)
 2020b50:	df000515 	stw	fp,20(sp)
 2020b54:	df000504 	addi	fp,sp,20
 2020b58:	e13ffc15 	stw	r4,-16(fp)
 2020b5c:	e17ffd15 	stw	r5,-12(fp)
 2020b60:	e1bffe15 	stw	r6,-8(fp)
 2020b64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2020b68:	e1bfff17 	ldw	r6,-4(fp)
 2020b6c:	e17ffe17 	ldw	r5,-8(fp)
 2020b70:	e13ffd17 	ldw	r4,-12(fp)
 2020b74:	2020f080 	call	2020f08 <open>
 2020b78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2020b7c:	e0bffb17 	ldw	r2,-20(fp)
 2020b80:	10001c16 	blt	r2,zero,2020bf4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2020b84:	008080b4 	movhi	r2,514
 2020b88:	108c8c04 	addi	r2,r2,12848
 2020b8c:	e0fffb17 	ldw	r3,-20(fp)
 2020b90:	18c00324 	muli	r3,r3,12
 2020b94:	10c5883a 	add	r2,r2,r3
 2020b98:	10c00017 	ldw	r3,0(r2)
 2020b9c:	e0bffc17 	ldw	r2,-16(fp)
 2020ba0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2020ba4:	008080b4 	movhi	r2,514
 2020ba8:	108c8c04 	addi	r2,r2,12848
 2020bac:	e0fffb17 	ldw	r3,-20(fp)
 2020bb0:	18c00324 	muli	r3,r3,12
 2020bb4:	10c5883a 	add	r2,r2,r3
 2020bb8:	10800104 	addi	r2,r2,4
 2020bbc:	10c00017 	ldw	r3,0(r2)
 2020bc0:	e0bffc17 	ldw	r2,-16(fp)
 2020bc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2020bc8:	008080b4 	movhi	r2,514
 2020bcc:	108c8c04 	addi	r2,r2,12848
 2020bd0:	e0fffb17 	ldw	r3,-20(fp)
 2020bd4:	18c00324 	muli	r3,r3,12
 2020bd8:	10c5883a 	add	r2,r2,r3
 2020bdc:	10800204 	addi	r2,r2,8
 2020be0:	10c00017 	ldw	r3,0(r2)
 2020be4:	e0bffc17 	ldw	r2,-16(fp)
 2020be8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2020bec:	e13ffb17 	ldw	r4,-20(fp)
 2020bf0:	2016cf00 	call	2016cf0 <alt_release_fd>
  }
} 
 2020bf4:	0001883a 	nop
 2020bf8:	e037883a 	mov	sp,fp
 2020bfc:	dfc00117 	ldw	ra,4(sp)
 2020c00:	df000017 	ldw	fp,0(sp)
 2020c04:	dec00204 	addi	sp,sp,8
 2020c08:	f800283a 	ret

02020c0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2020c0c:	defffb04 	addi	sp,sp,-20
 2020c10:	dfc00415 	stw	ra,16(sp)
 2020c14:	df000315 	stw	fp,12(sp)
 2020c18:	df000304 	addi	fp,sp,12
 2020c1c:	e13ffd15 	stw	r4,-12(fp)
 2020c20:	e17ffe15 	stw	r5,-8(fp)
 2020c24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2020c28:	01c07fc4 	movi	r7,511
 2020c2c:	01800044 	movi	r6,1
 2020c30:	e17ffd17 	ldw	r5,-12(fp)
 2020c34:	010080b4 	movhi	r4,514
 2020c38:	210c8f04 	addi	r4,r4,12860
 2020c3c:	2020b480 	call	2020b48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2020c40:	01c07fc4 	movi	r7,511
 2020c44:	000d883a 	mov	r6,zero
 2020c48:	e17ffe17 	ldw	r5,-8(fp)
 2020c4c:	010080b4 	movhi	r4,514
 2020c50:	210c8c04 	addi	r4,r4,12848
 2020c54:	2020b480 	call	2020b48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2020c58:	01c07fc4 	movi	r7,511
 2020c5c:	01800044 	movi	r6,1
 2020c60:	e17fff17 	ldw	r5,-4(fp)
 2020c64:	010080b4 	movhi	r4,514
 2020c68:	210c9204 	addi	r4,r4,12872
 2020c6c:	2020b480 	call	2020b48 <alt_open_fd>
}  
 2020c70:	0001883a 	nop
 2020c74:	e037883a 	mov	sp,fp
 2020c78:	dfc00117 	ldw	ra,4(sp)
 2020c7c:	df000017 	ldw	fp,0(sp)
 2020c80:	dec00204 	addi	sp,sp,8
 2020c84:	f800283a 	ret

02020c88 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2020c88:	defff004 	addi	sp,sp,-64
 2020c8c:	df000f15 	stw	fp,60(sp)
 2020c90:	df000f04 	addi	fp,sp,60
 2020c94:	e13ffd15 	stw	r4,-12(fp)
 2020c98:	e17ffe15 	stw	r5,-8(fp)
 2020c9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2020ca0:	00bffa84 	movi	r2,-22
 2020ca4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2020ca8:	e0bffd17 	ldw	r2,-12(fp)
 2020cac:	10800828 	cmpgeui	r2,r2,32
 2020cb0:	1000501e 	bne	r2,zero,2020df4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020cb4:	0005303a 	rdctl	r2,status
 2020cb8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020cbc:	e0fff617 	ldw	r3,-40(fp)
 2020cc0:	00bfff84 	movi	r2,-2
 2020cc4:	1884703a 	and	r2,r3,r2
 2020cc8:	1001703a 	wrctl	status,r2
  
  return context;
 2020ccc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 2020cd0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 2020cd4:	008080f4 	movhi	r2,515
 2020cd8:	10856504 	addi	r2,r2,5524
 2020cdc:	e0fffd17 	ldw	r3,-12(fp)
 2020ce0:	180690fa 	slli	r3,r3,3
 2020ce4:	10c5883a 	add	r2,r2,r3
 2020ce8:	e0ffff17 	ldw	r3,-4(fp)
 2020cec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 2020cf0:	008080f4 	movhi	r2,515
 2020cf4:	10856504 	addi	r2,r2,5524
 2020cf8:	e0fffd17 	ldw	r3,-12(fp)
 2020cfc:	180690fa 	slli	r3,r3,3
 2020d00:	10c5883a 	add	r2,r2,r3
 2020d04:	10800104 	addi	r2,r2,4
 2020d08:	e0fffe17 	ldw	r3,-8(fp)
 2020d0c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 2020d10:	e0bfff17 	ldw	r2,-4(fp)
 2020d14:	10001926 	beq	r2,zero,2020d7c <alt_irq_register+0xf4>
 2020d18:	e0bffd17 	ldw	r2,-12(fp)
 2020d1c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020d20:	0005303a 	rdctl	r2,status
 2020d24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020d28:	e0fff717 	ldw	r3,-36(fp)
 2020d2c:	00bfff84 	movi	r2,-2
 2020d30:	1884703a 	and	r2,r3,r2
 2020d34:	1001703a 	wrctl	status,r2
  
  return context;
 2020d38:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2020d3c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2020d40:	00c00044 	movi	r3,1
 2020d44:	e0bff217 	ldw	r2,-56(fp)
 2020d48:	1884983a 	sll	r2,r3,r2
 2020d4c:	1007883a 	mov	r3,r2
 2020d50:	d0a7bb17 	ldw	r2,-24852(gp)
 2020d54:	1884b03a 	or	r2,r3,r2
 2020d58:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2020d5c:	d0a7bb17 	ldw	r2,-24852(gp)
 2020d60:	100170fa 	wrctl	ienable,r2
 2020d64:	e0bff817 	ldw	r2,-32(fp)
 2020d68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020d6c:	e0bff917 	ldw	r2,-28(fp)
 2020d70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2020d74:	0005883a 	mov	r2,zero
 2020d78:	00001906 	br	2020de0 <alt_irq_register+0x158>
 2020d7c:	e0bffd17 	ldw	r2,-12(fp)
 2020d80:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020d84:	0005303a 	rdctl	r2,status
 2020d88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020d8c:	e0fffa17 	ldw	r3,-24(fp)
 2020d90:	00bfff84 	movi	r2,-2
 2020d94:	1884703a 	and	r2,r3,r2
 2020d98:	1001703a 	wrctl	status,r2
  
  return context;
 2020d9c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2020da0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2020da4:	00c00044 	movi	r3,1
 2020da8:	e0bff417 	ldw	r2,-48(fp)
 2020dac:	1884983a 	sll	r2,r3,r2
 2020db0:	0084303a 	nor	r2,zero,r2
 2020db4:	1007883a 	mov	r3,r2
 2020db8:	d0a7bb17 	ldw	r2,-24852(gp)
 2020dbc:	1884703a 	and	r2,r3,r2
 2020dc0:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2020dc4:	d0a7bb17 	ldw	r2,-24852(gp)
 2020dc8:	100170fa 	wrctl	ienable,r2
 2020dcc:	e0bffb17 	ldw	r2,-20(fp)
 2020dd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020dd4:	e0bffc17 	ldw	r2,-16(fp)
 2020dd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2020ddc:	0005883a 	mov	r2,zero
 2020de0:	e0bff115 	stw	r2,-60(fp)
 2020de4:	e0bff317 	ldw	r2,-52(fp)
 2020de8:	e0bff515 	stw	r2,-44(fp)
 2020dec:	e0bff517 	ldw	r2,-44(fp)
 2020df0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 2020df4:	e0bff117 	ldw	r2,-60(fp)
}
 2020df8:	e037883a 	mov	sp,fp
 2020dfc:	df000017 	ldw	fp,0(sp)
 2020e00:	dec00104 	addi	sp,sp,4
 2020e04:	f800283a 	ret

02020e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2020e08:	defffe04 	addi	sp,sp,-8
 2020e0c:	dfc00115 	stw	ra,4(sp)
 2020e10:	df000015 	stw	fp,0(sp)
 2020e14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2020e18:	d0a03b17 	ldw	r2,-32532(gp)
 2020e1c:	10000326 	beq	r2,zero,2020e2c <alt_get_errno+0x24>
 2020e20:	d0a03b17 	ldw	r2,-32532(gp)
 2020e24:	103ee83a 	callr	r2
 2020e28:	00000106 	br	2020e30 <alt_get_errno+0x28>
 2020e2c:	d0a79e04 	addi	r2,gp,-24968
}
 2020e30:	e037883a 	mov	sp,fp
 2020e34:	dfc00117 	ldw	ra,4(sp)
 2020e38:	df000017 	ldw	fp,0(sp)
 2020e3c:	dec00204 	addi	sp,sp,8
 2020e40:	f800283a 	ret

02020e44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2020e44:	defffd04 	addi	sp,sp,-12
 2020e48:	df000215 	stw	fp,8(sp)
 2020e4c:	df000204 	addi	fp,sp,8
 2020e50:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2020e54:	e0bfff17 	ldw	r2,-4(fp)
 2020e58:	10800217 	ldw	r2,8(r2)
 2020e5c:	10d00034 	orhi	r3,r2,16384
 2020e60:	e0bfff17 	ldw	r2,-4(fp)
 2020e64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2020e68:	e03ffe15 	stw	zero,-8(fp)
 2020e6c:	00001d06 	br	2020ee4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2020e70:	008080b4 	movhi	r2,514
 2020e74:	108c8c04 	addi	r2,r2,12848
 2020e78:	e0fffe17 	ldw	r3,-8(fp)
 2020e7c:	18c00324 	muli	r3,r3,12
 2020e80:	10c5883a 	add	r2,r2,r3
 2020e84:	10c00017 	ldw	r3,0(r2)
 2020e88:	e0bfff17 	ldw	r2,-4(fp)
 2020e8c:	10800017 	ldw	r2,0(r2)
 2020e90:	1880111e 	bne	r3,r2,2020ed8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2020e94:	008080b4 	movhi	r2,514
 2020e98:	108c8c04 	addi	r2,r2,12848
 2020e9c:	e0fffe17 	ldw	r3,-8(fp)
 2020ea0:	18c00324 	muli	r3,r3,12
 2020ea4:	10c5883a 	add	r2,r2,r3
 2020ea8:	10800204 	addi	r2,r2,8
 2020eac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2020eb0:	1000090e 	bge	r2,zero,2020ed8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2020eb4:	e0bffe17 	ldw	r2,-8(fp)
 2020eb8:	10c00324 	muli	r3,r2,12
 2020ebc:	008080b4 	movhi	r2,514
 2020ec0:	108c8c04 	addi	r2,r2,12848
 2020ec4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2020ec8:	e0bfff17 	ldw	r2,-4(fp)
 2020ecc:	18800226 	beq	r3,r2,2020ed8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2020ed0:	00bffcc4 	movi	r2,-13
 2020ed4:	00000806 	br	2020ef8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2020ed8:	e0bffe17 	ldw	r2,-8(fp)
 2020edc:	10800044 	addi	r2,r2,1
 2020ee0:	e0bffe15 	stw	r2,-8(fp)
 2020ee4:	d0a03a17 	ldw	r2,-32536(gp)
 2020ee8:	1007883a 	mov	r3,r2
 2020eec:	e0bffe17 	ldw	r2,-8(fp)
 2020ef0:	18bfdf2e 	bgeu	r3,r2,2020e70 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2020ef4:	0005883a 	mov	r2,zero
}
 2020ef8:	e037883a 	mov	sp,fp
 2020efc:	df000017 	ldw	fp,0(sp)
 2020f00:	dec00104 	addi	sp,sp,4
 2020f04:	f800283a 	ret

02020f08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2020f08:	defff604 	addi	sp,sp,-40
 2020f0c:	dfc00915 	stw	ra,36(sp)
 2020f10:	df000815 	stw	fp,32(sp)
 2020f14:	df000804 	addi	fp,sp,32
 2020f18:	e13ffd15 	stw	r4,-12(fp)
 2020f1c:	e17ffe15 	stw	r5,-8(fp)
 2020f20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2020f24:	00bfffc4 	movi	r2,-1
 2020f28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2020f2c:	00bffb44 	movi	r2,-19
 2020f30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2020f34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2020f38:	d1603804 	addi	r5,gp,-32544
 2020f3c:	e13ffd17 	ldw	r4,-12(fp)
 2020f40:	2020a840 	call	2020a84 <alt_find_dev>
 2020f44:	e0bff815 	stw	r2,-32(fp)
 2020f48:	e0bff817 	ldw	r2,-32(fp)
 2020f4c:	1000051e 	bne	r2,zero,2020f64 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2020f50:	e13ffd17 	ldw	r4,-12(fp)
 2020f54:	202157c0 	call	202157c <alt_find_file>
 2020f58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2020f5c:	00800044 	movi	r2,1
 2020f60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2020f64:	e0bff817 	ldw	r2,-32(fp)
 2020f68:	10002926 	beq	r2,zero,2021010 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2020f6c:	e13ff817 	ldw	r4,-32(fp)
 2020f70:	20216840 	call	2021684 <alt_get_fd>
 2020f74:	e0bff915 	stw	r2,-28(fp)
 2020f78:	e0bff917 	ldw	r2,-28(fp)
 2020f7c:	1000030e 	bge	r2,zero,2020f8c <open+0x84>
    {
      status = index;
 2020f80:	e0bff917 	ldw	r2,-28(fp)
 2020f84:	e0bffa15 	stw	r2,-24(fp)
 2020f88:	00002306 	br	2021018 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 2020f8c:	e0bff917 	ldw	r2,-28(fp)
 2020f90:	10c00324 	muli	r3,r2,12
 2020f94:	008080b4 	movhi	r2,514
 2020f98:	108c8c04 	addi	r2,r2,12848
 2020f9c:	1885883a 	add	r2,r3,r2
 2020fa0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2020fa4:	e0fffe17 	ldw	r3,-8(fp)
 2020fa8:	00900034 	movhi	r2,16384
 2020fac:	10bfffc4 	addi	r2,r2,-1
 2020fb0:	1886703a 	and	r3,r3,r2
 2020fb4:	e0bffc17 	ldw	r2,-16(fp)
 2020fb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2020fbc:	e0bffb17 	ldw	r2,-20(fp)
 2020fc0:	1000051e 	bne	r2,zero,2020fd8 <open+0xd0>
 2020fc4:	e13ffc17 	ldw	r4,-16(fp)
 2020fc8:	2020e440 	call	2020e44 <alt_file_locked>
 2020fcc:	e0bffa15 	stw	r2,-24(fp)
 2020fd0:	e0bffa17 	ldw	r2,-24(fp)
 2020fd4:	10001016 	blt	r2,zero,2021018 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2020fd8:	e0bff817 	ldw	r2,-32(fp)
 2020fdc:	10800317 	ldw	r2,12(r2)
 2020fe0:	10000826 	beq	r2,zero,2021004 <open+0xfc>
 2020fe4:	e0bff817 	ldw	r2,-32(fp)
 2020fe8:	10800317 	ldw	r2,12(r2)
 2020fec:	e1ffff17 	ldw	r7,-4(fp)
 2020ff0:	e1bffe17 	ldw	r6,-8(fp)
 2020ff4:	e17ffd17 	ldw	r5,-12(fp)
 2020ff8:	e13ffc17 	ldw	r4,-16(fp)
 2020ffc:	103ee83a 	callr	r2
 2021000:	00000106 	br	2021008 <open+0x100>
 2021004:	0005883a 	mov	r2,zero
 2021008:	e0bffa15 	stw	r2,-24(fp)
 202100c:	00000206 	br	2021018 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2021010:	00bffb44 	movi	r2,-19
 2021014:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2021018:	e0bffa17 	ldw	r2,-24(fp)
 202101c:	1000090e 	bge	r2,zero,2021044 <open+0x13c>
  {
    alt_release_fd (index);  
 2021020:	e13ff917 	ldw	r4,-28(fp)
 2021024:	2016cf00 	call	2016cf0 <alt_release_fd>
    ALT_ERRNO = -status;
 2021028:	2020e080 	call	2020e08 <alt_get_errno>
 202102c:	1007883a 	mov	r3,r2
 2021030:	e0bffa17 	ldw	r2,-24(fp)
 2021034:	0085c83a 	sub	r2,zero,r2
 2021038:	18800015 	stw	r2,0(r3)
    return -1;
 202103c:	00bfffc4 	movi	r2,-1
 2021040:	00000106 	br	2021048 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2021044:	e0bff917 	ldw	r2,-28(fp)
}
 2021048:	e037883a 	mov	sp,fp
 202104c:	dfc00117 	ldw	ra,4(sp)
 2021050:	df000017 	ldw	fp,0(sp)
 2021054:	dec00204 	addi	sp,sp,8
 2021058:	f800283a 	ret

0202105c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 202105c:	defffa04 	addi	sp,sp,-24
 2021060:	df000515 	stw	fp,20(sp)
 2021064:	df000504 	addi	fp,sp,20
 2021068:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202106c:	0005303a 	rdctl	r2,status
 2021070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021074:	e0fffc17 	ldw	r3,-16(fp)
 2021078:	00bfff84 	movi	r2,-2
 202107c:	1884703a 	and	r2,r3,r2
 2021080:	1001703a 	wrctl	status,r2
  
  return context;
 2021084:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2021088:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 202108c:	e0bfff17 	ldw	r2,-4(fp)
 2021090:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2021094:	e0bffd17 	ldw	r2,-12(fp)
 2021098:	10800017 	ldw	r2,0(r2)
 202109c:	e0fffd17 	ldw	r3,-12(fp)
 20210a0:	18c00117 	ldw	r3,4(r3)
 20210a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 20210a8:	e0bffd17 	ldw	r2,-12(fp)
 20210ac:	10800117 	ldw	r2,4(r2)
 20210b0:	e0fffd17 	ldw	r3,-12(fp)
 20210b4:	18c00017 	ldw	r3,0(r3)
 20210b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20210bc:	e0bffd17 	ldw	r2,-12(fp)
 20210c0:	e0fffd17 	ldw	r3,-12(fp)
 20210c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20210c8:	e0bffd17 	ldw	r2,-12(fp)
 20210cc:	e0fffd17 	ldw	r3,-12(fp)
 20210d0:	10c00015 	stw	r3,0(r2)
 20210d4:	e0bffb17 	ldw	r2,-20(fp)
 20210d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20210dc:	e0bffe17 	ldw	r2,-8(fp)
 20210e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20210e4:	0001883a 	nop
 20210e8:	e037883a 	mov	sp,fp
 20210ec:	df000017 	ldw	fp,0(sp)
 20210f0:	dec00104 	addi	sp,sp,4
 20210f4:	f800283a 	ret

020210f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20210f8:	defffb04 	addi	sp,sp,-20
 20210fc:	dfc00415 	stw	ra,16(sp)
 2021100:	df000315 	stw	fp,12(sp)
 2021104:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2021108:	d0a05d17 	ldw	r2,-32396(gp)
 202110c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2021110:	d0a7bd17 	ldw	r2,-24844(gp)
 2021114:	10800044 	addi	r2,r2,1
 2021118:	d0a7bd15 	stw	r2,-24844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 202111c:	00002e06 	br	20211d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2021120:	e0bffd17 	ldw	r2,-12(fp)
 2021124:	10800017 	ldw	r2,0(r2)
 2021128:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 202112c:	e0bffd17 	ldw	r2,-12(fp)
 2021130:	10800403 	ldbu	r2,16(r2)
 2021134:	10803fcc 	andi	r2,r2,255
 2021138:	10000426 	beq	r2,zero,202114c <alt_tick+0x54>
 202113c:	d0a7bd17 	ldw	r2,-24844(gp)
 2021140:	1000021e 	bne	r2,zero,202114c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2021144:	e0bffd17 	ldw	r2,-12(fp)
 2021148:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 202114c:	e0bffd17 	ldw	r2,-12(fp)
 2021150:	10800217 	ldw	r2,8(r2)
 2021154:	d0e7bd17 	ldw	r3,-24844(gp)
 2021158:	18801d36 	bltu	r3,r2,20211d0 <alt_tick+0xd8>
 202115c:	e0bffd17 	ldw	r2,-12(fp)
 2021160:	10800403 	ldbu	r2,16(r2)
 2021164:	10803fcc 	andi	r2,r2,255
 2021168:	1000191e 	bne	r2,zero,20211d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 202116c:	e0bffd17 	ldw	r2,-12(fp)
 2021170:	10800317 	ldw	r2,12(r2)
 2021174:	e0fffd17 	ldw	r3,-12(fp)
 2021178:	18c00517 	ldw	r3,20(r3)
 202117c:	1809883a 	mov	r4,r3
 2021180:	103ee83a 	callr	r2
 2021184:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2021188:	e0bfff17 	ldw	r2,-4(fp)
 202118c:	1000031e 	bne	r2,zero,202119c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2021190:	e13ffd17 	ldw	r4,-12(fp)
 2021194:	202105c0 	call	202105c <alt_alarm_stop>
 2021198:	00000d06 	br	20211d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 202119c:	e0bffd17 	ldw	r2,-12(fp)
 20211a0:	10c00217 	ldw	r3,8(r2)
 20211a4:	e0bfff17 	ldw	r2,-4(fp)
 20211a8:	1887883a 	add	r3,r3,r2
 20211ac:	e0bffd17 	ldw	r2,-12(fp)
 20211b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20211b4:	e0bffd17 	ldw	r2,-12(fp)
 20211b8:	10c00217 	ldw	r3,8(r2)
 20211bc:	d0a7bd17 	ldw	r2,-24844(gp)
 20211c0:	1880032e 	bgeu	r3,r2,20211d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20211c4:	e0bffd17 	ldw	r2,-12(fp)
 20211c8:	00c00044 	movi	r3,1
 20211cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20211d0:	e0bffe17 	ldw	r2,-8(fp)
 20211d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20211d8:	e0fffd17 	ldw	r3,-12(fp)
 20211dc:	d0a05d04 	addi	r2,gp,-32396
 20211e0:	18bfcf1e 	bne	r3,r2,2021120 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20211e4:	2017edc0 	call	2017edc <OSTimeTick>
}
 20211e8:	0001883a 	nop
 20211ec:	e037883a 	mov	sp,fp
 20211f0:	dfc00117 	ldw	ra,4(sp)
 20211f4:	df000017 	ldw	fp,0(sp)
 20211f8:	dec00204 	addi	sp,sp,8
 20211fc:	f800283a 	ret

02021200 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2021200:	deffff04 	addi	sp,sp,-4
 2021204:	df000015 	stw	fp,0(sp)
 2021208:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 202120c:	000170fa 	wrctl	ienable,zero
}
 2021210:	0001883a 	nop
 2021214:	e037883a 	mov	sp,fp
 2021218:	df000017 	ldw	fp,0(sp)
 202121c:	dec00104 	addi	sp,sp,4
 2021220:	f800283a 	ret

02021224 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2021224:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 2021228:	d0e03017 	ldw	r3,-32576(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 202122c:	d127b617 	ldw	r4,-24872(gp)

      stw ra,  0(sp)
 2021230:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 2021234:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 2021238:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 202123c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2021240:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2021244:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 2021248:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 202124c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2021250:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2021254:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 2021258:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 202125c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2021260:	20214980 	call	2021498 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2021264:	d127b117 	ldw	r4,-24892(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 2021268:	d167a907 	ldb	r5,-24924(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 202126c:	d127b615 	stw	r4,-24872(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2021270:	d167a945 	stb	r5,-24923(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2021274:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 2021278:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 202127c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2021280:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2021284:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 2021288:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 202128c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2021290:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2021294:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 2021298:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 202129c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 20212a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 20212a4:	d0e03015 	stw	r3,-32576(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 20212a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 20212ac:	f800283a 	ret

020212b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 20212b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 20212b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 20212b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 20212bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 20212c0:	20214980 	call	2021498 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 20212c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 20212c8:	d4a7a745 	stb	r18,-24931(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 20212cc:	003fe506 	br	2021264 <OSCtxSw+0x40>

020212d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 20212d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 20212d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 20212d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 20212dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 20212e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 20212e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 20212e8:	dec00204 	addi	sp,sp,8

      callr r2
 20212ec:	103ee83a 	callr	r2

      nop
 20212f0:	0001883a 	nop

020212f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 20212f4:	defff704 	addi	sp,sp,-36
 20212f8:	dfc00815 	stw	ra,32(sp)
 20212fc:	df000715 	stw	fp,28(sp)
 2021300:	df000704 	addi	fp,sp,28
 2021304:	e13ffc15 	stw	r4,-16(fp)
 2021308:	e17ffd15 	stw	r5,-12(fp)
 202130c:	e1bffe15 	stw	r6,-8(fp)
 2021310:	3805883a 	mov	r2,r7
 2021314:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 2021318:	e0fffe17 	ldw	r3,-8(fp)
 202131c:	00bfff04 	movi	r2,-4
 2021320:	1884703a 	and	r2,r3,r2
 2021324:	10bef704 	addi	r2,r2,-1060
 2021328:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 202132c:	01810904 	movi	r6,1060
 2021330:	000b883a 	mov	r5,zero
 2021334:	e13ff917 	ldw	r4,-28(fp)
 2021338:	20093180 	call	2009318 <memset>
 202133c:	e0bff917 	ldw	r2,-28(fp)
 2021340:	10c0bb04 	addi	r3,r2,748
 2021344:	e0bff917 	ldw	r2,-28(fp)
 2021348:	10c00115 	stw	r3,4(r2)
 202134c:	e0bff917 	ldw	r2,-28(fp)
 2021350:	10c0d504 	addi	r3,r2,852
 2021354:	e0bff917 	ldw	r2,-28(fp)
 2021358:	10c00215 	stw	r3,8(r2)
 202135c:	e0bff917 	ldw	r2,-28(fp)
 2021360:	10c0ef04 	addi	r3,r2,956
 2021364:	e0bff917 	ldw	r2,-28(fp)
 2021368:	10c00315 	stw	r3,12(r2)
 202136c:	e0fff917 	ldw	r3,-28(fp)
 2021370:	008080b4 	movhi	r2,514
 2021374:	108a4c04 	addi	r2,r2,10544
 2021378:	18800d15 	stw	r2,52(r3)
 202137c:	e0bff917 	ldw	r2,-28(fp)
 2021380:	00c00044 	movi	r3,1
 2021384:	10c02915 	stw	r3,164(r2)
 2021388:	10002a15 	stw	zero,168(r2)
 202138c:	e0bff917 	ldw	r2,-28(fp)
 2021390:	00ccc384 	movi	r3,13070
 2021394:	10c02b0d 	sth	r3,172(r2)
 2021398:	e0bff917 	ldw	r2,-28(fp)
 202139c:	00eaf344 	movi	r3,-21555
 20213a0:	10c02b8d 	sth	r3,174(r2)
 20213a4:	e0bff917 	ldw	r2,-28(fp)
 20213a8:	00c48d04 	movi	r3,4660
 20213ac:	10c02c0d 	sth	r3,176(r2)
 20213b0:	e0bff917 	ldw	r2,-28(fp)
 20213b4:	00f99b44 	movi	r3,-6547
 20213b8:	10c02c8d 	sth	r3,178(r2)
 20213bc:	e0bff917 	ldw	r2,-28(fp)
 20213c0:	00f7bb04 	movi	r3,-8468
 20213c4:	10c02d0d 	sth	r3,180(r2)
 20213c8:	e0bff917 	ldw	r2,-28(fp)
 20213cc:	00c00144 	movi	r3,5
 20213d0:	10c02d8d 	sth	r3,182(r2)
 20213d4:	e0bff917 	ldw	r2,-28(fp)
 20213d8:	00c002c4 	movi	r3,11
 20213dc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 20213e0:	e0bff917 	ldw	r2,-28(fp)
 20213e4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 20213e8:	e0bffa17 	ldw	r2,-24(fp)
 20213ec:	10bff304 	addi	r2,r2,-52
 20213f0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 20213f4:	e0bffb17 	ldw	r2,-20(fp)
 20213f8:	10800c04 	addi	r2,r2,48
 20213fc:	e0fffc17 	ldw	r3,-16(fp)
 2021400:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2021404:	e0bffb17 	ldw	r2,-20(fp)
 2021408:	10800b04 	addi	r2,r2,44
 202140c:	e0fffd17 	ldw	r3,-12(fp)
 2021410:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2021414:	e0bffb17 	ldw	r2,-20(fp)
 2021418:	10800a04 	addi	r2,r2,40
 202141c:	e0fff917 	ldw	r3,-28(fp)
 2021420:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2021424:	008080b4 	movhi	r2,514
 2021428:	1084b404 	addi	r2,r2,4816
 202142c:	10c00104 	addi	r3,r2,4
 2021430:	e0bffb17 	ldw	r2,-20(fp)
 2021434:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 2021438:	e0bffb17 	ldw	r2,-20(fp)
}
 202143c:	e037883a 	mov	sp,fp
 2021440:	dfc00117 	ldw	ra,4(sp)
 2021444:	df000017 	ldw	fp,0(sp)
 2021448:	dec00204 	addi	sp,sp,8
 202144c:	f800283a 	ret

02021450 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2021450:	defffe04 	addi	sp,sp,-8
 2021454:	df000115 	stw	fp,4(sp)
 2021458:	df000104 	addi	fp,sp,4
 202145c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2021460:	0001883a 	nop
 2021464:	e037883a 	mov	sp,fp
 2021468:	df000017 	ldw	fp,0(sp)
 202146c:	dec00104 	addi	sp,sp,4
 2021470:	f800283a 	ret

02021474 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2021474:	defffe04 	addi	sp,sp,-8
 2021478:	df000115 	stw	fp,4(sp)
 202147c:	df000104 	addi	fp,sp,4
 2021480:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2021484:	0001883a 	nop
 2021488:	e037883a 	mov	sp,fp
 202148c:	df000017 	ldw	fp,0(sp)
 2021490:	dec00104 	addi	sp,sp,4
 2021494:	f800283a 	ret

02021498 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 2021498:	deffff04 	addi	sp,sp,-4
 202149c:	df000015 	stw	fp,0(sp)
 20214a0:	d839883a 	mov	fp,sp
}
 20214a4:	0001883a 	nop
 20214a8:	e037883a 	mov	sp,fp
 20214ac:	df000017 	ldw	fp,0(sp)
 20214b0:	dec00104 	addi	sp,sp,4
 20214b4:	f800283a 	ret

020214b8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 20214b8:	deffff04 	addi	sp,sp,-4
 20214bc:	df000015 	stw	fp,0(sp)
 20214c0:	d839883a 	mov	fp,sp
}
 20214c4:	0001883a 	nop
 20214c8:	e037883a 	mov	sp,fp
 20214cc:	df000017 	ldw	fp,0(sp)
 20214d0:	dec00104 	addi	sp,sp,4
 20214d4:	f800283a 	ret

020214d8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 20214d8:	deffff04 	addi	sp,sp,-4
 20214dc:	df000015 	stw	fp,0(sp)
 20214e0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 20214e4:	0001883a 	nop
 20214e8:	e037883a 	mov	sp,fp
 20214ec:	df000017 	ldw	fp,0(sp)
 20214f0:	dec00104 	addi	sp,sp,4
 20214f4:	f800283a 	ret

020214f8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 20214f8:	deffff04 	addi	sp,sp,-4
 20214fc:	df000015 	stw	fp,0(sp)
 2021500:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2021504:	0001883a 	nop
 2021508:	e037883a 	mov	sp,fp
 202150c:	df000017 	ldw	fp,0(sp)
 2021510:	dec00104 	addi	sp,sp,4
 2021514:	f800283a 	ret

02021518 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 2021518:	deffff04 	addi	sp,sp,-4
 202151c:	df000015 	stw	fp,0(sp)
 2021520:	d839883a 	mov	fp,sp
}
 2021524:	0001883a 	nop
 2021528:	e037883a 	mov	sp,fp
 202152c:	df000017 	ldw	fp,0(sp)
 2021530:	dec00104 	addi	sp,sp,4
 2021534:	f800283a 	ret

02021538 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 2021538:	deffff04 	addi	sp,sp,-4
 202153c:	df000015 	stw	fp,0(sp)
 2021540:	d839883a 	mov	fp,sp
}
 2021544:	0001883a 	nop
 2021548:	e037883a 	mov	sp,fp
 202154c:	df000017 	ldw	fp,0(sp)
 2021550:	dec00104 	addi	sp,sp,4
 2021554:	f800283a 	ret

02021558 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 2021558:	defffe04 	addi	sp,sp,-8
 202155c:	df000115 	stw	fp,4(sp)
 2021560:	df000104 	addi	fp,sp,4
 2021564:	e13fff15 	stw	r4,-4(fp)
}
 2021568:	0001883a 	nop
 202156c:	e037883a 	mov	sp,fp
 2021570:	df000017 	ldw	fp,0(sp)
 2021574:	dec00104 	addi	sp,sp,4
 2021578:	f800283a 	ret

0202157c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 202157c:	defffb04 	addi	sp,sp,-20
 2021580:	dfc00415 	stw	ra,16(sp)
 2021584:	df000315 	stw	fp,12(sp)
 2021588:	df000304 	addi	fp,sp,12
 202158c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2021590:	d0a03617 	ldw	r2,-32552(gp)
 2021594:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2021598:	00003106 	br	2021660 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 202159c:	e0bffd17 	ldw	r2,-12(fp)
 20215a0:	10800217 	ldw	r2,8(r2)
 20215a4:	1009883a 	mov	r4,r2
 20215a8:	20096f80 	call	20096f8 <strlen>
 20215ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20215b0:	e0bffd17 	ldw	r2,-12(fp)
 20215b4:	10c00217 	ldw	r3,8(r2)
 20215b8:	e0bffe17 	ldw	r2,-8(fp)
 20215bc:	10bfffc4 	addi	r2,r2,-1
 20215c0:	1885883a 	add	r2,r3,r2
 20215c4:	10800003 	ldbu	r2,0(r2)
 20215c8:	10803fcc 	andi	r2,r2,255
 20215cc:	1080201c 	xori	r2,r2,128
 20215d0:	10bfe004 	addi	r2,r2,-128
 20215d4:	10800bd8 	cmpnei	r2,r2,47
 20215d8:	1000031e 	bne	r2,zero,20215e8 <alt_find_file+0x6c>
    {
      len -= 1;
 20215dc:	e0bffe17 	ldw	r2,-8(fp)
 20215e0:	10bfffc4 	addi	r2,r2,-1
 20215e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20215e8:	e0bffe17 	ldw	r2,-8(fp)
 20215ec:	e0ffff17 	ldw	r3,-4(fp)
 20215f0:	1885883a 	add	r2,r3,r2
 20215f4:	10800003 	ldbu	r2,0(r2)
 20215f8:	10803fcc 	andi	r2,r2,255
 20215fc:	1080201c 	xori	r2,r2,128
 2021600:	10bfe004 	addi	r2,r2,-128
 2021604:	10800be0 	cmpeqi	r2,r2,47
 2021608:	1000081e 	bne	r2,zero,202162c <alt_find_file+0xb0>
 202160c:	e0bffe17 	ldw	r2,-8(fp)
 2021610:	e0ffff17 	ldw	r3,-4(fp)
 2021614:	1885883a 	add	r2,r3,r2
 2021618:	10800003 	ldbu	r2,0(r2)
 202161c:	10803fcc 	andi	r2,r2,255
 2021620:	1080201c 	xori	r2,r2,128
 2021624:	10bfe004 	addi	r2,r2,-128
 2021628:	10000a1e 	bne	r2,zero,2021654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 202162c:	e0bffd17 	ldw	r2,-12(fp)
 2021630:	10800217 	ldw	r2,8(r2)
 2021634:	e0fffe17 	ldw	r3,-8(fp)
 2021638:	180d883a 	mov	r6,r3
 202163c:	e17fff17 	ldw	r5,-4(fp)
 2021640:	1009883a 	mov	r4,r2
 2021644:	20219100 	call	2021910 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2021648:	1000021e 	bne	r2,zero,2021654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 202164c:	e0bffd17 	ldw	r2,-12(fp)
 2021650:	00000706 	br	2021670 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2021654:	e0bffd17 	ldw	r2,-12(fp)
 2021658:	10800017 	ldw	r2,0(r2)
 202165c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2021660:	e0fffd17 	ldw	r3,-12(fp)
 2021664:	d0a03604 	addi	r2,gp,-32552
 2021668:	18bfcc1e 	bne	r3,r2,202159c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 202166c:	0005883a 	mov	r2,zero
}
 2021670:	e037883a 	mov	sp,fp
 2021674:	dfc00117 	ldw	ra,4(sp)
 2021678:	df000017 	ldw	fp,0(sp)
 202167c:	dec00204 	addi	sp,sp,8
 2021680:	f800283a 	ret

02021684 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2021684:	defff904 	addi	sp,sp,-28
 2021688:	dfc00615 	stw	ra,24(sp)
 202168c:	df000515 	stw	fp,20(sp)
 2021690:	df000504 	addi	fp,sp,20
 2021694:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2021698:	00bffa04 	movi	r2,-24
 202169c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 20216a0:	d0a79f17 	ldw	r2,-24964(gp)
 20216a4:	e0bffd15 	stw	r2,-12(fp)
 20216a8:	e03ffe0d 	sth	zero,-8(fp)
 20216ac:	e0bffe0b 	ldhu	r2,-8(fp)
 20216b0:	e0fffe84 	addi	r3,fp,-6
 20216b4:	180d883a 	mov	r6,r3
 20216b8:	100b883a 	mov	r5,r2
 20216bc:	e13ffd17 	ldw	r4,-12(fp)
 20216c0:	201d1e80 	call	201d1e8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20216c4:	e03ffb15 	stw	zero,-20(fp)
 20216c8:	00001906 	br	2021730 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20216cc:	008080b4 	movhi	r2,514
 20216d0:	108c8c04 	addi	r2,r2,12848
 20216d4:	e0fffb17 	ldw	r3,-20(fp)
 20216d8:	18c00324 	muli	r3,r3,12
 20216dc:	10c5883a 	add	r2,r2,r3
 20216e0:	10800017 	ldw	r2,0(r2)
 20216e4:	10000f1e 	bne	r2,zero,2021724 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 20216e8:	008080b4 	movhi	r2,514
 20216ec:	108c8c04 	addi	r2,r2,12848
 20216f0:	e0fffb17 	ldw	r3,-20(fp)
 20216f4:	18c00324 	muli	r3,r3,12
 20216f8:	10c5883a 	add	r2,r2,r3
 20216fc:	e0ffff17 	ldw	r3,-4(fp)
 2021700:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2021704:	d0e03a17 	ldw	r3,-32536(gp)
 2021708:	e0bffb17 	ldw	r2,-20(fp)
 202170c:	1880020e 	bge	r3,r2,2021718 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2021710:	e0bffb17 	ldw	r2,-20(fp)
 2021714:	d0a03a15 	stw	r2,-32536(gp)
      }
      rc = i;
 2021718:	e0bffb17 	ldw	r2,-20(fp)
 202171c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2021720:	00000606 	br	202173c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2021724:	e0bffb17 	ldw	r2,-20(fp)
 2021728:	10800044 	addi	r2,r2,1
 202172c:	e0bffb15 	stw	r2,-20(fp)
 2021730:	e0bffb17 	ldw	r2,-20(fp)
 2021734:	10800810 	cmplti	r2,r2,32
 2021738:	103fe41e 	bne	r2,zero,20216cc <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 202173c:	d0a79f17 	ldw	r2,-24964(gp)
 2021740:	1009883a 	mov	r4,r2
 2021744:	201d5600 	call	201d560 <OSSemPost>

  return rc;
 2021748:	e0bffc17 	ldw	r2,-16(fp)
}
 202174c:	e037883a 	mov	sp,fp
 2021750:	dfc00117 	ldw	ra,4(sp)
 2021754:	df000017 	ldw	fp,0(sp)
 2021758:	dec00204 	addi	sp,sp,8
 202175c:	f800283a 	ret

02021760 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2021760:	defffb04 	addi	sp,sp,-20
 2021764:	df000415 	stw	fp,16(sp)
 2021768:	df000404 	addi	fp,sp,16
 202176c:	e13ffe15 	stw	r4,-8(fp)
 2021770:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2021774:	e0bfff17 	ldw	r2,-4(fp)
 2021778:	10840070 	cmpltui	r2,r2,4097
 202177c:	1000021e 	bne	r2,zero,2021788 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2021780:	00840004 	movi	r2,4096
 2021784:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2021788:	e0fffe17 	ldw	r3,-8(fp)
 202178c:	e0bfff17 	ldw	r2,-4(fp)
 2021790:	1885883a 	add	r2,r3,r2
 2021794:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2021798:	e0bffe17 	ldw	r2,-8(fp)
 202179c:	e0bffc15 	stw	r2,-16(fp)
 20217a0:	00000506 	br	20217b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 20217a4:	e0bffc17 	ldw	r2,-16(fp)
 20217a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20217ac:	e0bffc17 	ldw	r2,-16(fp)
 20217b0:	10800804 	addi	r2,r2,32
 20217b4:	e0bffc15 	stw	r2,-16(fp)
 20217b8:	e0fffc17 	ldw	r3,-16(fp)
 20217bc:	e0bffd17 	ldw	r2,-12(fp)
 20217c0:	18bff836 	bltu	r3,r2,20217a4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 20217c4:	e0bffe17 	ldw	r2,-8(fp)
 20217c8:	108007cc 	andi	r2,r2,31
 20217cc:	10000226 	beq	r2,zero,20217d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20217d0:	e0bffc17 	ldw	r2,-16(fp)
 20217d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20217d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 20217dc:	0001883a 	nop
 20217e0:	e037883a 	mov	sp,fp
 20217e4:	df000017 	ldw	fp,0(sp)
 20217e8:	dec00104 	addi	sp,sp,4
 20217ec:	f800283a 	ret

020217f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 20217f0:	defffe04 	addi	sp,sp,-8
 20217f4:	df000115 	stw	fp,4(sp)
 20217f8:	df000104 	addi	fp,sp,4
 20217fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2021800:	e0bfff17 	ldw	r2,-4(fp)
 2021804:	10bffe84 	addi	r2,r2,-6
 2021808:	10c00428 	cmpgeui	r3,r2,16
 202180c:	18001a1e 	bne	r3,zero,2021878 <alt_exception_cause_generated_bad_addr+0x88>
 2021810:	100690ba 	slli	r3,r2,2
 2021814:	008080b4 	movhi	r2,514
 2021818:	10860a04 	addi	r2,r2,6184
 202181c:	1885883a 	add	r2,r3,r2
 2021820:	10800017 	ldw	r2,0(r2)
 2021824:	1000683a 	jmp	r2
 2021828:	02021868 	cmpgeui	r8,zero,2145
 202182c:	02021868 	cmpgeui	r8,zero,2145
 2021830:	02021878 	rdprs	r8,zero,2145
 2021834:	02021878 	rdprs	r8,zero,2145
 2021838:	02021878 	rdprs	r8,zero,2145
 202183c:	02021868 	cmpgeui	r8,zero,2145
 2021840:	02021870 	cmpltui	r8,zero,2145
 2021844:	02021878 	rdprs	r8,zero,2145
 2021848:	02021868 	cmpgeui	r8,zero,2145
 202184c:	02021868 	cmpgeui	r8,zero,2145
 2021850:	02021878 	rdprs	r8,zero,2145
 2021854:	02021868 	cmpgeui	r8,zero,2145
 2021858:	02021870 	cmpltui	r8,zero,2145
 202185c:	02021878 	rdprs	r8,zero,2145
 2021860:	02021878 	rdprs	r8,zero,2145
 2021864:	02021868 	cmpgeui	r8,zero,2145
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2021868:	00800044 	movi	r2,1
 202186c:	00000306 	br	202187c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2021870:	0005883a 	mov	r2,zero
 2021874:	00000106 	br	202187c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2021878:	0005883a 	mov	r2,zero
  }
}
 202187c:	e037883a 	mov	sp,fp
 2021880:	df000017 	ldw	fp,0(sp)
 2021884:	dec00104 	addi	sp,sp,4
 2021888:	f800283a 	ret

0202188c <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 202188c:	defffd04 	addi	sp,sp,-12
 2021890:	dfc00215 	stw	ra,8(sp)
 2021894:	df000115 	stw	fp,4(sp)
 2021898:	df000104 	addi	fp,sp,4
 202189c:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 20218a0:	000f883a 	mov	r7,zero
 20218a4:	000d883a 	mov	r6,zero
 20218a8:	e17fff17 	ldw	r5,-4(fp)
 20218ac:	0009883a 	mov	r4,zero
 20218b0:	2021a440 	call	2021a44 <__register_exitproc>
}
 20218b4:	e037883a 	mov	sp,fp
 20218b8:	dfc00117 	ldw	ra,4(sp)
 20218bc:	df000017 	ldw	fp,0(sp)
 20218c0:	dec00204 	addi	sp,sp,8
 20218c4:	f800283a 	ret

020218c8 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 20218c8:	defffd04 	addi	sp,sp,-12
 20218cc:	dfc00215 	stw	ra,8(sp)
 20218d0:	df000115 	stw	fp,4(sp)
 20218d4:	df000104 	addi	fp,sp,4
 20218d8:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 20218dc:	000b883a 	mov	r5,zero
 20218e0:	e13fff17 	ldw	r4,-4(fp)
 20218e4:	2021bb40 	call	2021bb4 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 20218e8:	d0a03117 	ldw	r2,-32572(gp)
 20218ec:	10800f17 	ldw	r2,60(r2)
 20218f0:	10000526 	beq	r2,zero,2021908 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 20218f4:	d0a03117 	ldw	r2,-32572(gp)
 20218f8:	10800f17 	ldw	r2,60(r2)
 20218fc:	d0e03117 	ldw	r3,-32572(gp)
 2021900:	1809883a 	mov	r4,r3
 2021904:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 2021908:	e13fff17 	ldw	r4,-4(fp)
 202190c:	2021da00 	call	2021da0 <_exit>

02021910 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 2021910:	defff804 	addi	sp,sp,-32
 2021914:	df000715 	stw	fp,28(sp)
 2021918:	df000704 	addi	fp,sp,28
 202191c:	e13ffd15 	stw	r4,-12(fp)
 2021920:	e17ffe15 	stw	r5,-8(fp)
 2021924:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 2021928:	e0bffd17 	ldw	r2,-12(fp)
 202192c:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 2021930:	e0bffe17 	ldw	r2,-8(fp)
 2021934:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 2021938:	e0bfff17 	ldw	r2,-4(fp)
 202193c:	10800130 	cmpltui	r2,r2,4
 2021940:	1000371e 	bne	r2,zero,2021a20 <memcmp+0x110>
 2021944:	e0fff917 	ldw	r3,-28(fp)
 2021948:	e0bffa17 	ldw	r2,-24(fp)
 202194c:	1884b03a 	or	r2,r3,r2
 2021950:	108000cc 	andi	r2,r2,3
 2021954:	1000321e 	bne	r2,zero,2021a20 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 2021958:	e0bff917 	ldw	r2,-28(fp)
 202195c:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 2021960:	e0bffa17 	ldw	r2,-24(fp)
 2021964:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 2021968:	00000e06 	br	20219a4 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 202196c:	e0bffb17 	ldw	r2,-20(fp)
 2021970:	10c00017 	ldw	r3,0(r2)
 2021974:	e0bffc17 	ldw	r2,-16(fp)
 2021978:	10800017 	ldw	r2,0(r2)
 202197c:	18800d1e 	bne	r3,r2,20219b4 <memcmp+0xa4>
   	    break;
          a1++;
 2021980:	e0bffb17 	ldw	r2,-20(fp)
 2021984:	10800104 	addi	r2,r2,4
 2021988:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 202198c:	e0bffc17 	ldw	r2,-16(fp)
 2021990:	10800104 	addi	r2,r2,4
 2021994:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 2021998:	e0bfff17 	ldw	r2,-4(fp)
 202199c:	10bfff04 	addi	r2,r2,-4
 20219a0:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 20219a4:	e0bfff17 	ldw	r2,-4(fp)
 20219a8:	10800128 	cmpgeui	r2,r2,4
 20219ac:	103fef1e 	bne	r2,zero,202196c <memcmp+0x5c>
 20219b0:	00000106 	br	20219b8 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 20219b4:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 20219b8:	e0bffb17 	ldw	r2,-20(fp)
 20219bc:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 20219c0:	e0bffc17 	ldw	r2,-16(fp)
 20219c4:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 20219c8:	00001506 	br	2021a20 <memcmp+0x110>
    {
      if (*s1 != *s2)
 20219cc:	e0bff917 	ldw	r2,-28(fp)
 20219d0:	10c00003 	ldbu	r3,0(r2)
 20219d4:	e0bffa17 	ldw	r2,-24(fp)
 20219d8:	10800003 	ldbu	r2,0(r2)
 20219dc:	18c03fcc 	andi	r3,r3,255
 20219e0:	10803fcc 	andi	r2,r2,255
 20219e4:	18800826 	beq	r3,r2,2021a08 <memcmp+0xf8>
	return *s1 - *s2;
 20219e8:	e0bff917 	ldw	r2,-28(fp)
 20219ec:	10800003 	ldbu	r2,0(r2)
 20219f0:	10c03fcc 	andi	r3,r2,255
 20219f4:	e0bffa17 	ldw	r2,-24(fp)
 20219f8:	10800003 	ldbu	r2,0(r2)
 20219fc:	10803fcc 	andi	r2,r2,255
 2021a00:	1885c83a 	sub	r2,r3,r2
 2021a04:	00000b06 	br	2021a34 <memcmp+0x124>
      s1++;
 2021a08:	e0bff917 	ldw	r2,-28(fp)
 2021a0c:	10800044 	addi	r2,r2,1
 2021a10:	e0bff915 	stw	r2,-28(fp)
      s2++;
 2021a14:	e0bffa17 	ldw	r2,-24(fp)
 2021a18:	10800044 	addi	r2,r2,1
 2021a1c:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 2021a20:	e0bfff17 	ldw	r2,-4(fp)
 2021a24:	10ffffc4 	addi	r3,r2,-1
 2021a28:	e0ffff15 	stw	r3,-4(fp)
 2021a2c:	103fe71e 	bne	r2,zero,20219cc <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 2021a30:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2021a34:	e037883a 	mov	sp,fp
 2021a38:	df000017 	ldw	fp,0(sp)
 2021a3c:	dec00104 	addi	sp,sp,4
 2021a40:	f800283a 	ret

02021a44 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 2021a44:	defff804 	addi	sp,sp,-32
 2021a48:	dfc00715 	stw	ra,28(sp)
 2021a4c:	df000615 	stw	fp,24(sp)
 2021a50:	dc000515 	stw	r16,20(sp)
 2021a54:	df000604 	addi	fp,sp,24
 2021a58:	e13ffb15 	stw	r4,-20(fp)
 2021a5c:	e17ffc15 	stw	r5,-16(fp)
 2021a60:	e1bffd15 	stw	r6,-12(fp)
 2021a64:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 2021a68:	d0a03117 	ldw	r2,-32572(gp)
 2021a6c:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 2021a70:	8000041e 	bne	r16,zero,2021a84 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 2021a74:	d0a03117 	ldw	r2,-32572(gp)
 2021a78:	d0e03117 	ldw	r3,-32572(gp)
 2021a7c:	1c005304 	addi	r16,r3,332
 2021a80:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 2021a84:	80800117 	ldw	r2,4(r16)
 2021a88:	10800810 	cmplti	r2,r2,32
 2021a8c:	1000131e 	bne	r2,zero,2021adc <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 2021a90:	00800034 	movhi	r2,0
 2021a94:	10800004 	addi	r2,r2,0
 2021a98:	1000021e 	bne	r2,zero,2021aa4 <__register_exitproc+0x60>
	return -1;
 2021a9c:	00bfffc4 	movi	r2,-1
 2021aa0:	00003e06 	br	2021b9c <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 2021aa4:	01006404 	movi	r4,400
 2021aa8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 2021aac:	1021883a 	mov	r16,r2
      if (p == NULL)
 2021ab0:	8000021e 	bne	r16,zero,2021abc <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 2021ab4:	00bfffc4 	movi	r2,-1
 2021ab8:	00003806 	br	2021b9c <__register_exitproc+0x158>
	}
      p->_ind = 0;
 2021abc:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 2021ac0:	d0a03117 	ldw	r2,-32572(gp)
 2021ac4:	10805217 	ldw	r2,328(r2)
 2021ac8:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 2021acc:	d0a03117 	ldw	r2,-32572(gp)
 2021ad0:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 2021ad4:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 2021ad8:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 2021adc:	e0bffb17 	ldw	r2,-20(fp)
 2021ae0:	10002426 	beq	r2,zero,2021b74 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 2021ae4:	80802204 	addi	r2,r16,136
 2021ae8:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 2021aec:	80800117 	ldw	r2,4(r16)
 2021af0:	e0fffa17 	ldw	r3,-24(fp)
 2021af4:	1085883a 	add	r2,r2,r2
 2021af8:	1085883a 	add	r2,r2,r2
 2021afc:	1885883a 	add	r2,r3,r2
 2021b00:	e0fffd17 	ldw	r3,-12(fp)
 2021b04:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 2021b08:	e0bffa17 	ldw	r2,-24(fp)
 2021b0c:	10804017 	ldw	r2,256(r2)
 2021b10:	80c00117 	ldw	r3,4(r16)
 2021b14:	01000044 	movi	r4,1
 2021b18:	20c6983a 	sll	r3,r4,r3
 2021b1c:	10c6b03a 	or	r3,r2,r3
 2021b20:	e0bffa17 	ldw	r2,-24(fp)
 2021b24:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 2021b28:	80800117 	ldw	r2,4(r16)
 2021b2c:	e0fffa17 	ldw	r3,-24(fp)
 2021b30:	10800804 	addi	r2,r2,32
 2021b34:	1085883a 	add	r2,r2,r2
 2021b38:	1085883a 	add	r2,r2,r2
 2021b3c:	1885883a 	add	r2,r3,r2
 2021b40:	e0fffe17 	ldw	r3,-8(fp)
 2021b44:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 2021b48:	e0bffb17 	ldw	r2,-20(fp)
 2021b4c:	10800098 	cmpnei	r2,r2,2
 2021b50:	1000081e 	bne	r2,zero,2021b74 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 2021b54:	e0bffa17 	ldw	r2,-24(fp)
 2021b58:	10804117 	ldw	r2,260(r2)
 2021b5c:	80c00117 	ldw	r3,4(r16)
 2021b60:	01000044 	movi	r4,1
 2021b64:	20c6983a 	sll	r3,r4,r3
 2021b68:	10c6b03a 	or	r3,r2,r3
 2021b6c:	e0bffa17 	ldw	r2,-24(fp)
 2021b70:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 2021b74:	80800117 	ldw	r2,4(r16)
 2021b78:	10c00044 	addi	r3,r2,1
 2021b7c:	80c00115 	stw	r3,4(r16)
 2021b80:	10800084 	addi	r2,r2,2
 2021b84:	1085883a 	add	r2,r2,r2
 2021b88:	1085883a 	add	r2,r2,r2
 2021b8c:	8085883a 	add	r2,r16,r2
 2021b90:	e0fffc17 	ldw	r3,-16(fp)
 2021b94:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 2021b98:	0005883a 	mov	r2,zero
}
 2021b9c:	e6ffff04 	addi	sp,fp,-4
 2021ba0:	dfc00217 	ldw	ra,8(sp)
 2021ba4:	df000117 	ldw	fp,4(sp)
 2021ba8:	dc000017 	ldw	r16,0(sp)
 2021bac:	dec00304 	addi	sp,sp,12
 2021bb0:	f800283a 	ret

02021bb4 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 2021bb4:	defff504 	addi	sp,sp,-44
 2021bb8:	dfc00a15 	stw	ra,40(sp)
 2021bbc:	df000915 	stw	fp,36(sp)
 2021bc0:	dc800815 	stw	r18,32(sp)
 2021bc4:	dc400715 	stw	r17,28(sp)
 2021bc8:	dc000615 	stw	r16,24(sp)
 2021bcc:	df000904 	addi	fp,sp,36
 2021bd0:	e13ffb15 	stw	r4,-20(fp)
 2021bd4:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 2021bd8:	d0a03117 	ldw	r2,-32572(gp)
 2021bdc:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 2021be0:	d0a03117 	ldw	r2,-32572(gp)
 2021be4:	10805204 	addi	r2,r2,328
 2021be8:	e0bff715 	stw	r2,-36(fp)
  while (p)
 2021bec:	00006006 	br	2021d70 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 2021bf0:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2021bf4:	80800117 	ldw	r2,4(r16)
 2021bf8:	147fffc4 	addi	r17,r2,-1
 2021bfc:	00004a06 	br	2021d28 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 2021c00:	00800044 	movi	r2,1
 2021c04:	1444983a 	sll	r2,r2,r17
 2021c08:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 2021c0c:	e0bffc17 	ldw	r2,-16(fp)
 2021c10:	10000826 	beq	r2,zero,2021c34 <__call_exitprocs+0x80>
 2021c14:	90004026 	beq	r18,zero,2021d18 <__call_exitprocs+0x164>
 2021c18:	88800804 	addi	r2,r17,32
 2021c1c:	1085883a 	add	r2,r2,r2
 2021c20:	1085883a 	add	r2,r2,r2
 2021c24:	9085883a 	add	r2,r18,r2
 2021c28:	10c00017 	ldw	r3,0(r2)
 2021c2c:	e0bffc17 	ldw	r2,-16(fp)
 2021c30:	1880391e 	bne	r3,r2,2021d18 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 2021c34:	88800084 	addi	r2,r17,2
 2021c38:	1085883a 	add	r2,r2,r2
 2021c3c:	1085883a 	add	r2,r2,r2
 2021c40:	8085883a 	add	r2,r16,r2
 2021c44:	10800017 	ldw	r2,0(r2)
 2021c48:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 2021c4c:	80800117 	ldw	r2,4(r16)
 2021c50:	10bfffc4 	addi	r2,r2,-1
 2021c54:	1440041e 	bne	r2,r17,2021c68 <__call_exitprocs+0xb4>
	    p->_ind--;
 2021c58:	80800117 	ldw	r2,4(r16)
 2021c5c:	10bfffc4 	addi	r2,r2,-1
 2021c60:	80800115 	stw	r2,4(r16)
 2021c64:	00000506 	br	2021c7c <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 2021c68:	88800084 	addi	r2,r17,2
 2021c6c:	1085883a 	add	r2,r2,r2
 2021c70:	1085883a 	add	r2,r2,r2
 2021c74:	8085883a 	add	r2,r16,r2
 2021c78:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 2021c7c:	e0bff917 	ldw	r2,-28(fp)
 2021c80:	10002726 	beq	r2,zero,2021d20 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 2021c84:	80800117 	ldw	r2,4(r16)
 2021c88:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 2021c8c:	90000426 	beq	r18,zero,2021ca0 <__call_exitprocs+0xec>
 2021c90:	90c04017 	ldw	r3,256(r18)
 2021c94:	e0bff817 	ldw	r2,-32(fp)
 2021c98:	1884703a 	and	r2,r3,r2
 2021c9c:	1000031e 	bne	r2,zero,2021cac <__call_exitprocs+0xf8>
	    fn ();
 2021ca0:	e0bff917 	ldw	r2,-28(fp)
 2021ca4:	103ee83a 	callr	r2
 2021ca8:	00001406 	br	2021cfc <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 2021cac:	90c04117 	ldw	r3,260(r18)
 2021cb0:	e0bff817 	ldw	r2,-32(fp)
 2021cb4:	1884703a 	and	r2,r3,r2
 2021cb8:	1000091e 	bne	r2,zero,2021ce0 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 2021cbc:	8c45883a 	add	r2,r17,r17
 2021cc0:	1085883a 	add	r2,r2,r2
 2021cc4:	9085883a 	add	r2,r18,r2
 2021cc8:	10c00017 	ldw	r3,0(r2)
 2021ccc:	e0bff917 	ldw	r2,-28(fp)
 2021cd0:	180b883a 	mov	r5,r3
 2021cd4:	e13ffb17 	ldw	r4,-20(fp)
 2021cd8:	103ee83a 	callr	r2
 2021cdc:	00000706 	br	2021cfc <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 2021ce0:	8c45883a 	add	r2,r17,r17
 2021ce4:	1085883a 	add	r2,r2,r2
 2021ce8:	9085883a 	add	r2,r18,r2
 2021cec:	10c00017 	ldw	r3,0(r2)
 2021cf0:	e0bff917 	ldw	r2,-28(fp)
 2021cf4:	1809883a 	mov	r4,r3
 2021cf8:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 2021cfc:	80c00117 	ldw	r3,4(r16)
 2021d00:	e0bffa17 	ldw	r2,-24(fp)
 2021d04:	18bfb41e 	bne	r3,r2,2021bd8 <__call_exitprocs+0x24>
 2021d08:	e0bff717 	ldw	r2,-36(fp)
 2021d0c:	10800017 	ldw	r2,0(r2)
 2021d10:	143fb11e 	bne	r2,r16,2021bd8 <__call_exitprocs+0x24>
 2021d14:	00000306 	br	2021d24 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 2021d18:	0001883a 	nop
 2021d1c:	00000106 	br	2021d24 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 2021d20:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2021d24:	8c7fffc4 	addi	r17,r17,-1
 2021d28:	883fb50e 	bge	r17,zero,2021c00 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 2021d2c:	00800034 	movhi	r2,0
 2021d30:	10800004 	addi	r2,r2,0
 2021d34:	10001026 	beq	r2,zero,2021d78 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 2021d38:	80800117 	ldw	r2,4(r16)
 2021d3c:	10000a1e 	bne	r2,zero,2021d68 <__call_exitprocs+0x1b4>
 2021d40:	80800017 	ldw	r2,0(r16)
 2021d44:	10000826 	beq	r2,zero,2021d68 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 2021d48:	80c00017 	ldw	r3,0(r16)
 2021d4c:	e0bff717 	ldw	r2,-36(fp)
 2021d50:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 2021d54:	8009883a 	mov	r4,r16
 2021d58:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 2021d5c:	e0bff717 	ldw	r2,-36(fp)
 2021d60:	14000017 	ldw	r16,0(r2)
 2021d64:	00000206 	br	2021d70 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 2021d68:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 2021d6c:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 2021d70:	803f9f1e 	bne	r16,zero,2021bf0 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2021d74:	00000106 	br	2021d7c <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 2021d78:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2021d7c:	0001883a 	nop
 2021d80:	e6fffd04 	addi	sp,fp,-12
 2021d84:	dfc00417 	ldw	ra,16(sp)
 2021d88:	df000317 	ldw	fp,12(sp)
 2021d8c:	dc800217 	ldw	r18,8(sp)
 2021d90:	dc400117 	ldw	r17,4(sp)
 2021d94:	dc000017 	ldw	r16,0(sp)
 2021d98:	dec00504 	addi	sp,sp,20
 2021d9c:	f800283a 	ret

02021da0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2021da0:	defffd04 	addi	sp,sp,-12
 2021da4:	df000215 	stw	fp,8(sp)
 2021da8:	df000204 	addi	fp,sp,8
 2021dac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2021db0:	d027a745 	stb	zero,-24931(gp)
 2021db4:	e0bfff17 	ldw	r2,-4(fp)
 2021db8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2021dbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2021dc0:	10000226 	beq	r2,zero,2021dcc <_exit+0x2c>
    ALT_SIM_FAIL();
 2021dc4:	002af070 	cmpltui	zero,zero,43969
 2021dc8:	00000106 	br	2021dd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2021dcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2021dd0:	003fff06 	br	2021dd0 <_exit+0x30>
