
Test_NetWork.elf:     file format elf32-littlenios2
Test_NetWork.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00019104 memsz 0x00019104 flags r-x
    LOAD off    0x0001a124 vaddr 0x02019124 paddr 0x0201ac98 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001c80c vaddr 0x0201c80c paddr 0x0201c80c align 2**12
         filesz 0x00000000 memsz 0x00009408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018a0c  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e8  02018c3c  02018c3c  00019c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  02019124  0201ac98  0001a124  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009408  0201c80c  0201c80c  0001c80c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0001bc98  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02025c14  02025c14  0001bc98  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001bc98  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001038  00000000  00000000  0001bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d999  00000000  00000000  0001ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000acc2  00000000  00000000  0004a691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000defe  00000000  00000000  00055353  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003260  00000000  00000000  00063254  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004c26  00000000  00000000  000664b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  0006b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00082948  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  00082958  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00088dfa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00088e00  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088e03  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088e04  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088e05  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088e09  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088e0d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00088e11  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00088e1a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00088e23  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00088e2c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  00088e35  2**0
                  CONTENTS, READONLY
 30 .jdi          0000380b  00000000  00000000  00088e69  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005203d  00000000  00000000  0008c674  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
02018c3c l    d  .rodata	00000000 .rodata
02019124 l    d  .rwdata	00000000 .rwdata
0201c80c l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02025c14 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Test_NetWork_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02018d4e l     O .rodata	00000010 zeroes.4404
02002e18 l     F .text	000000bc __sbprintf
02018d5e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02003028 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02004b80 l     F .text	00000008 __fp_unlock
02004b94 l     F .text	0000019c __sinit.part.1
02004d30 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02019124 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
02019568 l     O .rwdata	00000020 lc_ctype_charset
02019548 l     O .rwdata	00000020 lc_message_charset
02019588 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02018d90 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02008204 l     F .text	000000fc __sprint_r.part.0
02018eb4 l     O .rodata	00000010 zeroes.4349
02009840 l     F .text	000000bc __sbprintf
02018ec4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200d888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200d99c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200d9c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200dabc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200dba4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200dc90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0200de64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201ac0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0200e0d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201ac10 l     O .rwdata	00000004 lockid
0201c858 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201ac14 l     O .rwdata	00000004 lockid
0201c860 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0200fb10 l     F .text	00000048 OS_InitMisc
0200fb58 l     F .text	0000006c OS_InitRdyList
0200fcc4 l     F .text	000000e4 OS_InitTCBList
0200fa30 l     F .text	000000e0 OS_InitEventList
0200fbc4 l     F .text	00000080 OS_InitTaskIdle
0200fc44 l     F .text	00000080 OS_InitTaskStat
0200ff34 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02011c44 l     F .text	000000f4 OS_FlagTaskRdy
02011a04 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
020167e4 l     F .text	00000034 alt_dev_reg
02019b70 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02016b5c l     F .text	000002a4 altera_avalon_jtag_uart_irq
02016e00 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020175dc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201781c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02017c7c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02017ddc l     F .text	0000003c alt_get_errno
02017e18 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0201c8c4 g     O .bss	00000004 alt_instruction_exception_handler
02007848 g     F .text	00000074 _mprec_log10
0201ac62 g     O .rwdata	00000002 OSTaskNameSize
02007934 g     F .text	0000008c __any_on
02009df4 g     F .text	00000054 _isatty_r
02018d9c g     O .rodata	00000028 __mprec_tinytens
0200dda8 g     F .text	000000bc alt_main
020009b4 g     F .text	000000c0 _puts_r
02025b14 g     O .bss	00000100 alt_irq
0201c80c g     O .bss	00000004 MailBox6
02009e48 g     F .text	00000060 _lseek_r
02012f2c g     F .text	000000d8 OS_MemInit
0201ac98 g       *ABS*	00000000 __flash_rwdata_start
02016784 g     F .text	00000060 OSTimeSet
0200c260 g     F .text	00000088 .hidden __eqdf2
0200e784 g     F .text	00000610 OSEventPendMulti
02025c14 g       *ABS*	00000000 __alt_heap_start
02018454 g     F .text	00000024 OSTaskCreateHook
0201c8f0 g     O .bss	00002000 task1_stk
02000978 g     F .text	0000003c printf
0201ac3a g     O .rwdata	00000002 OSMboxEn
0200edec g     F .text	0000004c OSIntEnter
0200a060 g     F .text	0000009c _wcrtomb_r
020080c4 g     F .text	0000005c __sseek
02004ee0 g     F .text	00000010 __sinit
02009f08 g     F .text	00000140 __swbuf_r
0201ac4a g     O .rwdata	00000002 OSQEn
020059b4 g     F .text	0000007c _setlocale_r
02004d38 g     F .text	00000078 __sfmoreglue
0200e458 g     F .text	000000cc __malloc_unlock
020184bc g     F .text	00000020 OSTaskStatHook
0201c868 g     O .bss	00000001 OSLockNesting
0201ac88 g     O .rwdata	00000002 OSDataSize
0201c869 g     O .bss	00000001 OSRunning
02006684 g     F .text	0000015c memmove
020184fc g     F .text	00000020 OSInitHookBegin
0201ac80 g     O .rwdata	00000002 OSTmrSize
02004ec8 g     F .text	00000018 _cleanup
02006908 g     F .text	000000a8 _Balloc
0201c86c g     O .bss	00000004 OSIdleCtr
0200c2e8 g     F .text	000000dc .hidden __gtdf2
02018204 g     F .text	00000024 altera_nios2_gen2_irq_init
020182d4 g       .text	00000000 OSStartTsk
02010264 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000000c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0201ac86 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201ac26 g     O .rwdata	00000002 OSEventSize
0201c870 g     O .bss	00000001 OSPrioHighRdy
02009d98 g     F .text	0000005c _fstat_r
02018478 g     F .text	00000024 OSTaskDelHook
0201c844 g     O .bss	00000004 errno
02008040 g     F .text	00000008 __seofread
020182b4 g       .text	00000000 OSStartHighRdy
02015204 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0201154c g     F .text	00000060 OSFlagPendGetFlagsRdy
0201ac66 g     O .rwdata	00000002 OSTaskStatStkSize
020106c8 g     F .text	00000308 OSFlagAccept
02013570 g     F .text	000000b8 OSQFlush
02013004 g     F .text	00000140 OSQAccept
0201c850 g     O .bss	00000004 alt_argv
02022bdc g       *ABS*	00000000 _gp
02015058 g     F .text	000001ac OSTaskCreate
02014b68 g     F .text	000004f0 OSTaskChangePrio
0201c864 g     O .bss	00000004 alt_heapsem
02010538 g     F .text	00000190 OSDebugInit
020153e8 g     F .text	00000344 OSTaskDel
020199f0 g     O .rwdata	00000180 alt_fd_list
020228f0 g     O .bss	00000370 OSFlagTbl
0200f810 g     F .text	000000b8 OS_EventTaskRemove
02018580 g     F .text	00000090 alt_find_dev
0200653c g     F .text	00000148 memcpy
0201ac50 g     O .rwdata	00000002 OSRdyTblSize
0201c810 g     O .bss	00000004 MailBox3
02004b88 g     F .text	0000000c _cleanup_r
0200d6a0 g     F .text	000000dc .hidden __floatsidf
02017d60 g     F .text	0000007c alt_io_redirect
0200c3c4 g     F .text	000000f4 .hidden __ltdf2
02018c3c g       *ABS*	00000000 __DTOR_END__
02000a74 g     F .text	00000014 puts
0201880c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0200e524 g     F .text	00000120 OSEventNameGet
0201ac34 g     O .rwdata	00000002 OSFlagMax
02007f24 g     F .text	00000074 __fpclassifyd
020077a4 g     F .text	000000a4 __ratio
0200ee38 g     F .text	000000f8 OSIntExit
02009824 g     F .text	0000001c __vfiprintf_internal
0201ac6e g     O .rwdata	00000002 OSTCBSize
0201c871 g     O .bss	00000001 OSPrioCur
0201705c g     F .text	000002bc altera_avalon_jtag_uart_read
02000948 g     F .text	00000030 _printf_r
0200af00 g     F .text	00000064 .hidden __udivsi3
0200daf8 g     F .text	000000ac isatty
0201ac54 g     O .rwdata	00000002 OSStkWidth
02018dec g     O .rodata	000000c8 __mprec_tens
0201ac48 g     O .rwdata	00000002 OSPtrSize
02005a30 g     F .text	0000000c __locale_charset
0201ac28 g     O .rwdata	00000002 OSEventTblSize
02018228 g       .text	00000000 OSCtxSw
0201c840 g     O .bss	00000004 __malloc_top_pad
0201c874 g     O .bss	00000004 OSTCBList
0201c848 g     O .bss	00000004 alt_fd_list_lock
0201abe4 g     O .rwdata	00000004 __mb_cur_max
02005a60 g     F .text	0000000c _localeconv_r
02006d3c g     F .text	0000003c __i2b
02005364 g     F .text	000004c8 __sfvwrite_r
02022c60 g     O .bss	00000c30 OSMemTbl
0201c878 g     O .bss	00000001 OSTickStepState
02007f98 g     F .text	00000054 _sbrk_r
0201ac4c g     O .rwdata	00000002 OSQMax
02023890 g     O .bss	00000800 OSTaskStatStk
02012b68 g     F .text	000000f0 OSMemNameGet
0201ac2c g     O .rwdata	00000002 OSFlagEn
02009ea8 g     F .text	00000060 _read_r
0201ac72 g     O .rwdata	00000002 OSTimeTickHookEn
02013a20 g     F .text	00000168 OSQPost
02011d38 g     F .text	000000a4 OS_FlagUnlink
0201ac04 g     O .rwdata	00000004 alt_max_fd
0200fdfc g     F .text	00000068 OS_MemCopy
0200fe64 g     F .text	000000d0 OS_Sched
02009a8c g     F .text	000000f0 _fclose_r
02012a78 g     F .text	000000f0 OSMemGet
02012794 g     F .text	00000110 OSMboxQuery
02015a14 g     F .text	000001b4 OSTaskNameSet
02004b50 g     F .text	00000030 fflush
0201c83c g     O .bss	00000004 __malloc_max_sbrked_mem
0201c87c g     O .bss	00000004 OSCtxSwCtr
020184dc g     F .text	00000020 OSTimeTickHook
0201ac36 g     O .rwdata	00000002 OSFlagNameSize
0201c814 g     O .bss	00000004 AnimationFlagGrp
0200f8c8 g     F .text	00000100 OS_EventTaskRemoveMulti
0200afe4 g     F .text	000008ac .hidden __adddf3
0200f6c0 g     F .text	00000150 OS_EventTaskWaitMulti
0200754c g     F .text	0000010c __b2d
0201ac4e g     O .rwdata	00000002 OSQSize
0200a844 g     F .text	000005c4 .hidden __umoddi3
0200dccc g     F .text	000000dc lseek
020144d0 g     F .text	0000020c OSSemPend
0201abdc g     O .rwdata	00000004 _global_impure_ptr
020079c0 g     F .text	00000564 _realloc_r
0201ac38 g     O .rwdata	00000002 OSLowestPrio
02025c14 g       *ABS*	00000000 __bss_end
02017b8c g     F .text	000000f0 alt_iic_isr_register
0201855c g     F .text	00000024 OSTCBInitHook
0201ac7e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
020180fc g     F .text	00000108 alt_tick
02012528 g     F .text	00000110 OSMboxPost
0200a248 g     F .text	000005fc .hidden __udivdi3
02009cf4 g     F .text	00000024 _fputwc_r
0201ac20 g     O .rwdata	00000002 OSEventEn
02018dc4 g     O .rodata	00000028 __mprec_bigtens
02006b20 g     F .text	00000104 __s2b
0201ac7a g     O .rwdata	00000002 OSTmrCfgNameSize
0200d77c g     F .text	000000a8 .hidden __floatunsidf
0200728c g     F .text	00000060 __mcmp
02004f00 g     F .text	00000018 __fp_lock_all
02017b40 g     F .text	0000004c alt_ic_irq_enabled
0201c818 g     O .bss	00000004 MailBox5
02011b64 g     F .text	000000e0 OS_FlagInit
02018060 g     F .text	0000009c alt_alarm_stop
0201ac5c g     O .rwdata	00000002 OSTaskIdleStkSize
0201c8b8 g     O .bss	00000004 alt_irq_active
02014108 g     F .text	000000b0 OSSemAccept
02012d6c g     F .text	000000d8 OSMemPut
020128a4 g     F .text	000001d4 OSMemCreate
0201c880 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
020199c8 g     O .rwdata	00000028 alt_dev_null
0201ac70 g     O .rwdata	00000002 OSTicksPerSec
02018228 g       .text	00000000 OSIntCtxSw
020177fc g     F .text	00000020 alt_dcache_flush_all
02006c24 g     F .text	00000068 __hi0bits
0200d620 g     F .text	00000080 .hidden __fixdfsi
0201c884 g     O .bss	00000004 OSTCBFreeList
0201ac98 g       *ABS*	00000000 __ram_rwdata_end
020146dc g     F .text	0000016c OSSemPendAbort
0201abfc g     O .rwdata	00000008 alt_dev_list
0200e114 g     F .text	00000100 write
0201ac74 g     O .rwdata	00000002 OSVersionNbr
02019124 g       *ABS*	00000000 __ram_rodata_end
0200da04 g     F .text	000000b8 fstat
0200c3c4 g     F .text	000000f4 .hidden __ledf2
0201ac1c g     O .rwdata	00000004 OSEndiannessTest
02007004 g     F .text	00000140 __pow5mult
02008318 g     F .text	0000150c ___vfiprintf_internal_r
0201c834 g     O .bss	00000004 __nlocale_changed
0200af64 g     F .text	00000058 .hidden __umodsi3
0201ac2e g     O .rwdata	00000002 OSFlagGrpSize
02025c14 g       *ABS*	00000000 end
02016a14 g     F .text	00000148 altera_avalon_jtag_uart_init
020100cc g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
02018c3c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02017654 g     F .text	0000007c alt_avalon_timer_sc_init
0200d824 g     F .text	00000064 .hidden __clzsi2
02017318 g     F .text	000002c4 altera_avalon_jtag_uart_write
02004ef0 g     F .text	00000004 __sfp_lock_acquire
02006458 g     F .text	000000e4 memchr
0200fda8 g     F .text	00000054 OS_MemClr
02000b20 g     F .text	000022dc ___vfprintf_internal_r
020182f8 g     F .text	0000015c OSTaskStkInit
0200026c g     F .text	00000258 task1
02005054 g     F .text	00000310 _free_r
02005a3c g     F .text	00000010 __locale_mb_cur_max
0200f418 g     F .text	00000198 OS_EventTaskRdy
02018a88 g     F .text	00000180 __call_exitprocs
0201c888 g     O .bss	00000001 OSCPUUsage
0201c830 g     O .bss	00000004 __mlocale_changed
0201abe8 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
020004c4 g     F .text	000000d4 task2
0201c8bc g     O .bss	00000004 _alt_tick_rate
02013628 g     F .text	0000028c OSQPend
020162d4 g     F .text	00000104 OSTimeDly
02007144 g     F .text	00000148 __lshift
0201c8c0 g     O .bss	00000004 _alt_nticks
0200dea0 g     F .text	00000104 read
02016850 g     F .text	00000060 alt_sys_init
02018970 g     F .text	00000118 __register_exitproc
0201c889 g     O .bss	00000001 OSTaskCtr
0201c81c g     O .bss	00000004 MailBox2
020163d8 g     F .text	0000017c OSTimeDlyHMSM
02006d78 g     F .text	0000028c __multiply
02016f04 g     F .text	00000068 altera_avalon_jtag_uart_close
0200afbc g     F .text	00000028 .hidden __mulsi3
02019124 g       *ABS*	00000000 __ram_rwdata_start
02018c3c g       *ABS*	00000000 __ram_rodata_start
0201c8c8 g     O .bss	00000028 __malloc_current_mallinfo
0201ac22 g     O .rwdata	00000002 OSEventMax
02007658 g     F .text	0000014c __d2b
02014848 g     F .text	00000110 OSSemPost
0200efbc g     F .text	000000dc OSSchedUnlock
020168b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02018718 g     F .text	000000f4 alt_get_fd
0201c88c g     O .bss	00000004 OSMemFreeList
0200f108 g     F .text	000000b0 OSStatInit
02011940 g     F .text	000000c4 OSFlagQuery
0201ac58 g     O .rwdata	00000002 OSTaskCreateExtEn
0200995c g     F .text	00000054 _close_r
020188f4 g     F .text	0000007c memcmp
0200f3f8 g     F .text	00000020 OS_Dummy
02016970 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02025c14 g       *ABS*	00000000 __alt_stack_base
020169c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02002ed4 g     F .text	00000154 __swsetup_r
02024090 g     O .bss	000001e0 OSQTbl
0200b890 g     F .text	000009d0 .hidden __divdf3
02004db0 g     F .text	00000118 __sfp
020078bc g     F .text	00000078 __copybits
020195c0 g     O .rwdata	00000408 __malloc_av_
02004efc g     F .text	00000004 __sinit_lock_release
0201c890 g     O .bss	00000004 OSTCBHighRdy
0200c4b8 g     F .text	0000086c .hidden __muldf3
02007fec g     F .text	00000054 __sread
0201c894 g     O .bss	00000004 OSQFreeList
02018610 g     F .text	00000108 alt_find_file
02017858 g     F .text	000000a4 alt_dev_llist_insert
0200e338 g     F .text	00000120 __malloc_lock
0200e028 g     F .text	000000b0 sbrk
0200e644 g     F .text	00000140 OSEventNameSet
02004af4 g     F .text	0000005c _fflush_r
020099b0 g     F .text	000000dc _calloc_r
0201c898 g     O .bss	00000001 OSRdyGrp
0201c80c g       *ABS*	00000000 __bss_start
020067e0 g     F .text	00000128 memset
020007f4 g     F .text	00000154 main
0201c854 g     O .bss	00000004 alt_envp
0201c838 g     O .bss	00000004 __malloc_max_total_mem
02016910 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200a048 g     F .text	00000018 __swbuf
02018ff0 g     O .rodata	00000100 OSUnMapTbl
0201ac52 g     O .rwdata	00000002 OSSemEn
020115ac g     F .text	00000394 OSFlagPost
02008120 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02009b7c g     F .text	00000014 fclose
0200f5b0 g     F .text	00000110 OS_EventTaskWait
0201e8f0 g     O .bss	00002000 task2_stk
02010198 g     F .text	000000cc OS_TaskStatStkChk
0201572c g     F .text	00000150 OSTaskDelReq
02003250 g     F .text	00001688 _dtoa_r
02005c4c g     F .text	0000080c _malloc_r
0200a1bc g     F .text	00000030 __ascii_wctomb
0201ac08 g     O .rwdata	00000004 alt_errno
0200f098 g     F .text	00000070 OSStart
020208f0 g     O .bss	00002000 task3_stk
0200e2d8 g     F .text	00000060 __env_unlock
0200582c g     F .text	000000c4 _fwalk
02015bc8 g     F .text	000001d4 OSTaskResume
02012e44 g     F .text	000000e8 OSMemQuery
0201ac64 g     O .rwdata	00000002 OSTaskStatEn
0201ac3e g     O .rwdata	00000002 OSMemMax
02013b88 g     F .text	00000170 OSQPostFront
0200ae08 g     F .text	00000084 .hidden __divsi3
0201c899 g     O .bss	00000003 OSRdyTbl
0201ac18 g     O .rwdata	00000002 OSDebugEn
02004f30 g     F .text	00000124 _malloc_trim_r
0201c820 g     O .bss	00000004 MailBox4
02018c3c g       *ABS*	00000000 __CTOR_END__
0201ac30 g     O .rwdata	00000002 OSFlagNodeSize
0201ac78 g     O .rwdata	00000002 OSTmrCfgMax
02008128 g     F .text	000000dc strcmp
02013144 g     F .text	000001ac OSQCreate
0201587c g     F .text	00000198 OSTaskNameGet
02018c3c g       *ABS*	00000000 __flash_rodata_start
02013cf8 g     F .text	0000020c OSQPostOpt
0200f1b8 g     F .text	00000220 OSTimeTick
0201ac60 g     O .rwdata	00000002 OSTaskMax
02018c3c g       *ABS*	00000000 __DTOR_LIST__
020141b8 g     F .text	000000d8 OSSemCreate
0201ac84 g     O .rwdata	00000002 OSTmrWheelSize
0200c260 g     F .text	00000088 .hidden __nedf2
0201ac5a g     O .rwdata	00000002 OSTaskDelEn
02014958 g     F .text	00000110 OSSemQuery
020132f0 g     F .text	00000280 OSQDel
020138b4 g     F .text	0000016c OSQPendAbort
02016818 g     F .text	00000038 alt_irq_init
0200dfa4 g     F .text	00000084 alt_release_fd
02018ed4 g     O .rodata	00000100 .hidden __clz_tab
0201c82c g     O .bss	00000004 _PathLocale
020188a8 g     F .text	00000014 atexit
020098fc g     F .text	00000060 _write_r
0200ef30 g     F .text	0000008c OSSchedLock
02005a6c g     F .text	00000018 setlocale
020109d0 g     F .text	00000108 OSFlagCreate
0201abe0 g     O .rwdata	00000004 _impure_ptr
0201c84c g     O .bss	00000004 alt_argc
020048d8 g     F .text	0000021c __sflush_r
0201795c g     F .text	00000060 _do_dtors
02005a58 g     F .text	00000008 __locale_cjk_lang
0201ac2a g     O .rwdata	00000002 OSEventMultiEn
02010ad8 g     F .text	00000248 OSFlagDel
0201c89c g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
020123bc g     F .text	0000016c OSMboxPendAbort
020074e8 g     F .text	00000064 __ulp
0201ac76 g     O .rwdata	00000002 OSTmrEn
02010f94 g     F .text	000005b8 OSFlagPend
02004f18 g     F .text	00000018 __fp_unlock_all
0201abf4 g     O .rwdata	00000008 alt_fs_list
0200ffa8 g     F .text	00000074 OS_StrCopy
0201ac40 g     O .rwdata	00000002 OSMemNameSize
0201851c g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201ac6c g     O .rwdata	00000002 OSTCBPrioTblMax
02005a84 g     F .text	0000000c localeconv
0201ac68 g     O .rwdata	00000002 OSTaskStatStkChkEn
02011e74 g     F .text	000000d4 OSMboxCreate
020179dc g     F .text	00000050 alt_ic_isr_register
0201ac3c g     O .rwdata	00000002 OSMemEn
0201ac46 g     O .rwdata	00000002 OSMutexEn
0201ac98 g       *ABS*	00000000 _edata
02025c14 g       *ABS*	00000000 _end
0201c8a0 g     O .bss	00000001 OSIntNesting
02009b90 g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
02016f6c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02016554 g     F .text	000001d4 OSTimeDlyResume
02010e48 g     F .text	0000014c OSFlagNameSet
02012188 g     F .text	00000234 OSMboxPend
02015d9c g     F .text	000001c0 OSTaskStkChk
02017ab4 g     F .text	0000008c alt_ic_irq_disable
0201ac42 g     O .rwdata	00000002 OSMemSize
02008048 g     F .text	0000007c __swrite
0201abec g     O .rwdata	00000004 __malloc_trim_threshold
02005a4c g     F .text	0000000c __locale_msgcharset
0201c8a4 g     O .bss	00000004 OSTCBCur
020188bc g     F .text	00000038 exit
0201ac44 g     O .rwdata	00000002 OSMemTblSize
020058f0 g     F .text	000000c4 _fwalk_reent
0201c824 g     O .bss	00000004 MailBox1
020072ec g     F .text	000001fc __mdiff
0200ae8c g     F .text	00000074 .hidden __modsi3
02011ddc g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02004ef4 g     F .text	00000004 __sfp_lock_release
0200ed94 g     F .text	00000058 OSInit
02016140 g     F .text	00000124 OSTaskQuery
02014060 g     F .text	000000a8 OS_QInit
0201001c g     F .text	00000054 OS_StrLen
02012c58 g     F .text	00000114 OSMemNameSet
0201ac5e g     O .rwdata	00000002 OSTaskProfileEn
0201c8a8 g     O .bss	00000004 OSTime
0201c828 g     O .bss	00000004 isActiveFlagGrp
02024270 g     O .bss	00000800 OSTaskIdleStk
02018c08 g     F .text	00000034 _exit
02012638 g     F .text	0000015c OSMboxPostOpt
020176d0 g     F .text	0000012c alt_alarm_start
02010d20 g     F .text	00000128 OSFlagNameGet
02016728 g     F .text	0000005c OSTimeGet
02005a90 g     F .text	000001bc __smakebuf_r
02000a88 g     F .text	00000098 strlen
0201849c g     F .text	00000020 OSTaskSwHook
02017f04 g     F .text	0000015c open
02024a70 g     O .bss	00000b40 OSEventTbl
0200c2e8 g     F .text	000000dc .hidden __gedf2
020255b0 g     O .bss	00000510 OSTCBTbl
02014a68 g     F .text	00000100 OSSemSet
0201abf0 g     O .rwdata	00000004 __wctomb
02008300 g     F .text	00000018 __sprint_r
020179bc g     F .text	00000020 alt_icache_flush_all
0201ac8c g     O .rwdata	00000004 alt_priority_mask
02014290 g     F .text	00000240 OSSemDel
0201c8ac g     O .bss	00000004 OSFlagFreeList
02000598 g     F .text	0000025c task3
02017a2c g     F .text	00000088 alt_ic_irq_enable
0201ac24 g     O .rwdata	00000002 OSEventNameSize
02011f48 g     F .text	00000240 OSMboxDel
02002dfc g     F .text	0000001c __vfprintf_internal
0201c8b0 g     O .bss	00000001 OSStatRdy
02025ac0 g     O .bss	00000054 OSTCBPrioTbl
0200a1ec g     F .text	0000005c _wctomb_r
0200e214 g     F .text	000000c4 __env_lock
0201ac6a g     O .rwdata	00000002 OSTaskSwHookEn
0200cd24 g     F .text	000008fc .hidden __subdf3
02006c8c g     F .text	000000b0 __lo0bits
0201ac90 g     O .rwdata	00000008 alt_alarm_list
0201ac32 g     O .rwdata	00000002 OSFlagWidth
020178fc g     F .text	00000060 _do_ctors
0200a0fc g     F .text	000000c0 wcrtomb
0200d8c4 g     F .text	000000d8 close
0201c85c g     O .bss	00000004 alt_envsem
0201c8b4 g     O .bss	00000004 OSIdleCtrRun
0200f3d8 g     F .text	00000020 OSVersion
0201ac7c g     O .rwdata	00000002 OSTmrCfgWheelSize
0200dc0c g     F .text	00000084 alt_load
02016264 g     F .text	00000070 OS_TaskStkClr
0201ac56 g     O .rwdata	00000002 OSTaskCreateEn
0200f9c8 g     F .text	00000068 OS_EventWaitListInit
02009d18 g     F .text	00000080 fputwc
0201853c g     F .text	00000020 OSTaskIdleHook
02004ef8 g     F .text	00000004 __sinit_lock_acquire
020069d8 g     F .text	00000148 __multadd
02015f5c g     F .text	000001e4 OSTaskSuspend
020069b0 g     F .text	00000028 _Bfree
02010070 g     F .text	0000005c OS_TaskIdle
0201ac82 g     O .rwdata	00000002 OSTmrTblSize
02013f04 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	200edec0 	call	200edec <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080b4 	movhi	r2,514
 2000140:	1096c504 	addi	r2,r2,23316
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080b4 	movhi	r2,514
 2000158:	1096c504 	addi	r2,r2,23316
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	200ee380 	call	200ee38 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a73a17 	ldw	r2,-25368(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a73a17 	ldw	r2,-25368(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 200023c:	d68af714 	ori	gp,gp,11228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10b20314 	ori	r2,r2,51212

    movhi r3, %hi(__bss_end)
 2000248:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 200024c:	18d70514 	ori	r3,r3,23572

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200dc0c0 	call	200dc0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	200dda80 	call	200dda8 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <alt_after_alt_main>

0200026c <task1>:
#define IS_ACTIVE (OS_FLAGS) 0x0001
#define ANIMATION (OS_FLAGS) 0x0001

/*  */
void task1(void* pdata)
{
 200026c:	deffeb04 	addi	sp,sp,-84
 2000270:	dfc01415 	stw	ra,80(sp)
 2000274:	df001315 	stw	fp,76(sp)
 2000278:	df001304 	addi	fp,sp,76
 200027c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2000280:	008000b4 	movhi	r2,2
 2000284:	e0bff615 	stw	r2,-40(fp)
	int count_old = 0;
 2000288:	e03ff715 	stw	zero,-36(fp)
	int count = 0;
 200028c:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 2000290:	e03ff515 	stw	zero,-44(fp)

	while (1)
	{
		printf("wait for isActive\n");
 2000294:	010080b4 	movhi	r4,514
 2000298:	21230f04 	addi	r4,r4,-29636
 200029c:	2000a740 	call	2000a74 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002a0:	d0e71317 	ldw	r3,-25524(gp)
 20002a4:	e0bffc04 	addi	r2,fp,-16
 20002a8:	d8800015 	stw	r2,0(sp)
 20002ac:	000f883a 	mov	r7,zero
 20002b0:	01802084 	movi	r6,130
 20002b4:	01400044 	movi	r5,1
 20002b8:	1809883a 	mov	r4,r3
 20002bc:	2010f940 	call	2010f94 <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002c0:	00005e06 	br	200043c <task1+0x1d0>
		{
			count_old = count;
 20002c4:	e0bfee17 	ldw	r2,-72(fp)
 20002c8:	e0bff715 	stw	r2,-36(fp)
			count = *(MTL_controller + 10); // récupère le nombre de doigts présent sur l'écran
 20002cc:	e0bff617 	ldw	r2,-40(fp)
 20002d0:	10800a17 	ldw	r2,40(r2)
 20002d4:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = *(MTL_controller + 11);
 20002d8:	e0bff617 	ldw	r2,-40(fp)
 20002dc:	10800b17 	ldw	r2,44(r2)
 20002e0:	e0bff815 	stw	r2,-32(fp)
			int pos2 = *(MTL_controller + 12);
 20002e4:	e0bff617 	ldw	r2,-40(fp)
 20002e8:	10800c17 	ldw	r2,48(r2)
 20002ec:	e0bff915 	stw	r2,-28(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 20002f0:	e0bff717 	ldw	r2,-36(fp)
 20002f4:	10800058 	cmpnei	r2,r2,1
 20002f8:	1000121e 	bne	r2,zero,2000344 <task1+0xd8>
 20002fc:	e0bfee17 	ldw	r2,-72(fp)
 2000300:	10800098 	cmpnei	r2,r2,2
 2000304:	10000f1e 	bne	r2,zero,2000344 <task1+0xd8>
			{
				printf("start gesture\n");
 2000308:	010080b4 	movhi	r4,514
 200030c:	21231404 	addi	r4,r4,-29616
 2000310:	2000a740 	call	2000a74 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000314:	e0bff817 	ldw	r2,-32(fp)
 2000318:	1080ffcc 	andi	r2,r2,1023
 200031c:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000320:	e0bff817 	ldw	r2,-32(fp)
 2000324:	1005d2ba 	srai	r2,r2,10
 2000328:	e0bff215 	stw	r2,-56(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200032c:	e0bff917 	ldw	r2,-28(fp)
 2000330:	1080ffcc 	andi	r2,r2,1023
 2000334:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_start = pos2 >> 10;
 2000338:	e0bff917 	ldw	r2,-28(fp)
 200033c:	1005d2ba 	srai	r2,r2,10
 2000340:	e0bff315 	stw	r2,-52(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000344:	e0bff717 	ldw	r2,-36(fp)
 2000348:	10800098 	cmpnei	r2,r2,2
 200034c:	1000261e 	bne	r2,zero,20003e8 <task1+0x17c>
 2000350:	e0bfee17 	ldw	r2,-72(fp)
 2000354:	10800058 	cmpnei	r2,r2,1
 2000358:	1000231e 	bne	r2,zero,20003e8 <task1+0x17c>
			{
				printf("stop gesture\n");
 200035c:	010080b4 	movhi	r4,514
 2000360:	21231804 	addi	r4,r4,-29600
 2000364:	2000a740 	call	2000a74 <puts>
				x1_gesture_stop = pos1 & 0x0003FF;
 2000368:	e0bff817 	ldw	r2,-32(fp)
 200036c:	1080ffcc 	andi	r2,r2,1023
 2000370:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 2000374:	e0bff817 	ldw	r2,-32(fp)
 2000378:	1005d2ba 	srai	r2,r2,10
 200037c:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 2000380:	e0bff917 	ldw	r2,-28(fp)
 2000384:	1080ffcc 	andi	r2,r2,1023
 2000388:	e0bff115 	stw	r2,-60(fp)
				y2_gesture_stop = pos2 >> 10;
 200038c:	e0bff917 	ldw	r2,-28(fp)
 2000390:	1005d2ba 	srai	r2,r2,10
 2000394:	e0bff415 	stw	r2,-48(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000398:	e0bfef17 	ldw	r2,-68(fp)
 200039c:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003a0:	e0fffa17 	ldw	r3,-24(fp)
 20003a4:	18800e16 	blt	r3,r2,20003e0 <task1+0x174>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003a8:	e0bfef17 	ldw	r2,-68(fp)
 20003ac:	10c00784 	addi	r3,r2,30
 20003b0:	e0bffa17 	ldw	r2,-24(fp)
 20003b4:	18800a16 	blt	r3,r2,20003e0 <task1+0x174>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003b8:	e0bff217 	ldw	r2,-56(fp)
 20003bc:	10bff884 	addi	r2,r2,-30
 20003c0:	e0fffb17 	ldw	r3,-20(fp)
 20003c4:	18800616 	blt	r3,r2,20003e0 <task1+0x174>
 20003c8:	e0bff217 	ldw	r2,-56(fp)
 20003cc:	10c00784 	addi	r3,r2,30
 20003d0:	e0bffb17 	ldw	r2,-20(fp)
 20003d4:	18800216 	blt	r3,r2,20003e0 <task1+0x174>
 20003d8:	00800044 	movi	r2,1
 20003dc:	00000106 	br	20003e4 <task1+0x178>
 20003e0:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003e4:	e0bff515 	stw	r2,-44(fp)
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
			}

			*(MTL_controller + 1) = (y1_gesture_start << 10) + x1_gesture_start;
 20003e8:	e0bff617 	ldw	r2,-40(fp)
 20003ec:	10800104 	addi	r2,r2,4
 20003f0:	e0fff217 	ldw	r3,-56(fp)
 20003f4:	180892ba 	slli	r4,r3,10
 20003f8:	e0ffef17 	ldw	r3,-68(fp)
 20003fc:	20c7883a 	add	r3,r4,r3
 2000400:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 2) = (y2_gesture_start << 10) + x2_gesture_start;
 2000404:	e0bff617 	ldw	r2,-40(fp)
 2000408:	10800204 	addi	r2,r2,8
 200040c:	e0fff317 	ldw	r3,-52(fp)
 2000410:	180892ba 	slli	r4,r3,10
 2000414:	e0fff017 	ldw	r3,-64(fp)
 2000418:	20c7883a 	add	r3,r4,r3
 200041c:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 3) = (y2_gesture_stop << 10) + x2_gesture_stop;
 2000420:	e0bff617 	ldw	r2,-40(fp)
 2000424:	10800304 	addi	r2,r2,12
 2000428:	e0fff417 	ldw	r3,-48(fp)
 200042c:	180892ba 	slli	r4,r3,10
 2000430:	e0fff117 	ldw	r3,-60(fp)
 2000434:	20c7883a 	add	r3,r4,r3
 2000438:	10c00015 	stw	r3,0(r2)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 200043c:	e0bff517 	ldw	r2,-44(fp)
 2000440:	103fa026 	beq	r2,zero,20002c4 <task1+0x58>

			*(MTL_controller + 1) = (y1_gesture_start << 10) + x1_gesture_start;
			*(MTL_controller + 2) = (y2_gesture_start << 10) + x2_gesture_start;
			*(MTL_controller + 3) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000444:	e0fff117 	ldw	r3,-60(fp)
 2000448:	e0bfef17 	ldw	r2,-68(fp)
 200044c:	1885c83a 	sub	r2,r3,r2
 2000450:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000454:	e0fff417 	ldw	r3,-48(fp)
 2000458:	e0bff217 	ldw	r2,-56(fp)
 200045c:	1885c83a 	sub	r2,r3,r2
 2000460:	e0bffe15 	stw	r2,-8(fp)
		printf("Send value : (%d, %d)\n", x_dir, y_dir);
 2000464:	e0bffd17 	ldw	r2,-12(fp)
 2000468:	e0fffe17 	ldw	r3,-8(fp)
 200046c:	180d883a 	mov	r6,r3
 2000470:	100b883a 	mov	r5,r2
 2000474:	010080b4 	movhi	r4,514
 2000478:	21231c04 	addi	r4,r4,-29584
 200047c:	20009780 	call	2000978 <printf>
		OSMboxPost(MailBox1, &x_dir);
 2000480:	d0a71217 	ldw	r2,-25528(gp)
 2000484:	e0fffd04 	addi	r3,fp,-12
 2000488:	180b883a 	mov	r5,r3
 200048c:	1009883a 	mov	r4,r2
 2000490:	20125280 	call	2012528 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000494:	d0a71017 	ldw	r2,-25536(gp)
 2000498:	e0fffe04 	addi	r3,fp,-8
 200049c:	180b883a 	mov	r5,r3
 20004a0:	1009883a 	mov	r4,r2
 20004a4:	20125280 	call	2012528 <OSMboxPost>
		gesture_detected = 0;
 20004a8:	e03ff515 	stw	zero,-44(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 20004ac:	01c07d04 	movi	r7,500
 20004b0:	000d883a 	mov	r6,zero
 20004b4:	000b883a 	mov	r5,zero
 20004b8:	0009883a 	mov	r4,zero
 20004bc:	20163d80 	call	20163d8 <OSTimeDlyHMSM>
	}
 20004c0:	003f7406 	br	2000294 <task1+0x28>

020004c4 <task2>:
}

void task2(void* pdata)
{
 20004c4:	defff904 	addi	sp,sp,-28
 20004c8:	dfc00615 	stw	ra,24(sp)
 20004cc:	df000515 	stw	fp,20(sp)
 20004d0:	df000504 	addi	fp,sp,20
 20004d4:	e13fff15 	stw	r4,-4(fp)

  INT8U err;
  INT8U opt_task2;
  while (1)
  {
   opt_task2= OS_FLAG_SET;
 20004d8:	00800044 	movi	r2,1
 20004dc:	e0bffb05 	stb	r2,-20(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20004e0:	d0a70e17 	ldw	r2,-25544(gp)
 20004e4:	e0fffb03 	ldbu	r3,-20(fp)
 20004e8:	e13ffe04 	addi	r4,fp,-8
 20004ec:	200f883a 	mov	r7,r4
 20004f0:	180d883a 	mov	r6,r3
 20004f4:	01400044 	movi	r5,1
 20004f8:	1009883a 	mov	r4,r2
 20004fc:	20115ac0 	call	20115ac <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 2000500:	d0a71117 	ldw	r2,-25532(gp)
 2000504:	e0fffe04 	addi	r3,fp,-8
 2000508:	180d883a 	mov	r6,r3
 200050c:	000b883a 	mov	r5,zero
 2000510:	1009883a 	mov	r4,r2
 2000514:	20121880 	call	2012188 <OSMboxPend>
 2000518:	e0bffc15 	stw	r2,-16(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 200051c:	d0a70f17 	ldw	r2,-25540(gp)
 2000520:	e0fffe04 	addi	r3,fp,-8
 2000524:	180d883a 	mov	r6,r3
 2000528:	000b883a 	mov	r5,zero
 200052c:	1009883a 	mov	r4,r2
 2000530:	20121880 	call	2012188 <OSMboxPend>
 2000534:	e0bffd15 	stw	r2,-12(fp)

   printf("Launch animation : (%d, %d)\n",*vector_x, *vector_y);
 2000538:	e0bffc17 	ldw	r2,-16(fp)
 200053c:	10c00017 	ldw	r3,0(r2)
 2000540:	e0bffd17 	ldw	r2,-12(fp)
 2000544:	10800017 	ldw	r2,0(r2)
 2000548:	100d883a 	mov	r6,r2
 200054c:	180b883a 	mov	r5,r3
 2000550:	010080b4 	movhi	r4,514
 2000554:	21232204 	addi	r4,r4,-29560
 2000558:	20009780 	call	2000978 <printf>
   OSTimeDlyHMSM(0, 0, 5, 0);
 200055c:	000f883a 	mov	r7,zero
 2000560:	01800144 	movi	r6,5
 2000564:	000b883a 	mov	r5,zero
 2000568:	0009883a 	mov	r4,zero
 200056c:	20163d80 	call	20163d8 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 2000570:	e03ffb05 	stb	zero,-20(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000574:	d0a70e17 	ldw	r2,-25544(gp)
 2000578:	e0fffb03 	ldbu	r3,-20(fp)
 200057c:	e13ffe04 	addi	r4,fp,-8
 2000580:	200f883a 	mov	r7,r4
 2000584:	180d883a 	mov	r6,r3
 2000588:	01400044 	movi	r5,1
 200058c:	1009883a 	mov	r4,r2
 2000590:	20115ac0 	call	20115ac <OSFlagPost>
  }
 2000594:	003fd006 	br	20004d8 <task2+0x14>

02000598 <task3>:
}


void task3(void* pdata)
{
 2000598:	defff204 	addi	sp,sp,-56
 200059c:	dfc00d15 	stw	ra,52(sp)
 20005a0:	df000c15 	stw	fp,48(sp)
 20005a4:	df000c04 	addi	fp,sp,48
 20005a8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U opt_task1;

	int activePlayer = 1;
 20005ac:	00800044 	movi	r2,1
 20005b0:	e0bff515 	stw	r2,-44(fp)

	int * XdirSend = (int*) MEM_NIOS_PI_BASE+1;
 20005b4:	00800834 	movhi	r2,32
 20005b8:	10800104 	addi	r2,r2,4
 20005bc:	e0bff615 	stw	r2,-40(fp)
	int * YdirSend = (int*) MEM_NIOS_PI_BASE+2;
 20005c0:	00800834 	movhi	r2,32
 20005c4:	10800204 	addi	r2,r2,8
 20005c8:	e0bff715 	stw	r2,-36(fp)
	int * isSend = (int*) MEM_NIOS_PI_BASE+3;
 20005cc:	00800834 	movhi	r2,32
 20005d0:	10800304 	addi	r2,r2,12
 20005d4:	e0bff815 	stw	r2,-32(fp)
	int * isReceived = (int*) MEM_NIOS_PI_BASE+4;
 20005d8:	00800834 	movhi	r2,32
 20005dc:	10800404 	addi	r2,r2,16
 20005e0:	e0bff915 	stw	r2,-28(fp)
	//int * AckSend     = (int*) MEM_NIOS_PI_BASE+5;
	//int * AckReceived     = (int*) MEM_NIOS_PI_BASE+6;
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+7;
 20005e4:	00800834 	movhi	r2,32
 20005e8:	10800704 	addi	r2,r2,28
 20005ec:	e0bffa15 	stw	r2,-24(fp)
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+8;
 20005f0:	00800834 	movhi	r2,32
 20005f4:	10800804 	addi	r2,r2,32
 20005f8:	e0bffb15 	stw	r2,-20(fp)
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 20005fc:	e0bff917 	ldw	r2,-28(fp)
 2000600:	10800017 	ldw	r2,0(r2)
 2000604:	1000491e 	bne	r2,zero,200072c <task3+0x194>
 2000608:	e0bff517 	ldw	r2,-44(fp)
 200060c:	10004726 	beq	r2,zero,200072c <task3+0x194>
		  OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2000610:	d0a71317 	ldw	r2,-25524(gp)
 2000614:	e0fffe44 	addi	r3,fp,-7
 2000618:	180f883a 	mov	r7,r3
 200061c:	01800044 	movi	r6,1
 2000620:	01400044 	movi	r5,1
 2000624:	1009883a 	mov	r4,r2
 2000628:	20115ac0 	call	20115ac <OSFlagPost>
		  printf("Wait for value from task 1\n");
 200062c:	010080b4 	movhi	r4,514
 2000630:	21232a04 	addi	r4,r4,-29528
 2000634:	2000a740 	call	2000a74 <puts>
		  int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 2000638:	d0a71217 	ldw	r2,-25528(gp)
 200063c:	e0fffe44 	addi	r3,fp,-7
 2000640:	180d883a 	mov	r6,r3
 2000644:	000b883a 	mov	r5,zero
 2000648:	1009883a 	mov	r4,r2
 200064c:	20121880 	call	2012188 <OSMboxPend>
 2000650:	e0bffc15 	stw	r2,-16(fp)
		  int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 2000654:	d0a71017 	ldw	r2,-25536(gp)
 2000658:	e0fffe44 	addi	r3,fp,-7
 200065c:	180d883a 	mov	r6,r3
 2000660:	000b883a 	mov	r5,zero
 2000664:	1009883a 	mov	r4,r2
 2000668:	20121880 	call	2012188 <OSMboxPend>
 200066c:	e0bffd15 	stw	r2,-12(fp)
		  printf("Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 2000670:	e0bffc17 	ldw	r2,-16(fp)
 2000674:	10c00017 	ldw	r3,0(r2)
 2000678:	e0bffd17 	ldw	r2,-12(fp)
 200067c:	10800017 	ldw	r2,0(r2)
 2000680:	100d883a 	mov	r6,r2
 2000684:	180b883a 	mov	r5,r3
 2000688:	010080b4 	movhi	r4,514
 200068c:	21233104 	addi	r4,r4,-29500
 2000690:	20009780 	call	2000978 <printf>

		  OSMboxPost(MailBox4, vector_x);
 2000694:	d0a71117 	ldw	r2,-25532(gp)
 2000698:	e17ffc17 	ldw	r5,-16(fp)
 200069c:	1009883a 	mov	r4,r2
 20006a0:	20125280 	call	2012528 <OSMboxPost>
		  OSMboxPost(MailBox5, vector_y);
 20006a4:	d0a70f17 	ldw	r2,-25540(gp)
 20006a8:	e17ffd17 	ldw	r5,-12(fp)
 20006ac:	1009883a 	mov	r4,r2
 20006b0:	20125280 	call	2012528 <OSMboxPost>

		  *XdirSend = *vector_x;
 20006b4:	e0bffc17 	ldw	r2,-16(fp)
 20006b8:	10c00017 	ldw	r3,0(r2)
 20006bc:	e0bff617 	ldw	r2,-40(fp)
 20006c0:	10c00015 	stw	r3,0(r2)
		  *YdirSend = *vector_y;
 20006c4:	e0bffd17 	ldw	r2,-12(fp)
 20006c8:	10c00017 	ldw	r3,0(r2)
 20006cc:	e0bff717 	ldw	r2,-36(fp)
 20006d0:	10c00015 	stw	r3,0(r2)
		  *isSend = 1; // value are available
 20006d4:	e0bff817 	ldw	r2,-32(fp)
 20006d8:	00c00044 	movi	r3,1
 20006dc:	10c00015 	stw	r3,0(r2)
		  activePlayer = 0;
 20006e0:	e03ff515 	stw	zero,-44(fp)

		  opt_task1=OS_FLAG_CLR;
 20006e4:	e03ffe05 	stb	zero,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20006e8:	d0a71317 	ldw	r2,-25524(gp)
 20006ec:	e0fffe03 	ldbu	r3,-8(fp)
 20006f0:	e13ffe44 	addi	r4,fp,-7
 20006f4:	200f883a 	mov	r7,r4
 20006f8:	180d883a 	mov	r6,r3
 20006fc:	01400044 	movi	r5,1
 2000700:	1009883a 	mov	r4,r2
 2000704:	20115ac0 	call	20115ac <OSFlagPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2000708:	d0e70e17 	ldw	r3,-25544(gp)
 200070c:	e0bffe44 	addi	r2,fp,-7
 2000710:	d8800015 	stw	r2,0(sp)
 2000714:	000f883a 	mov	r7,zero
 2000718:	000d883a 	mov	r6,zero
 200071c:	01400044 	movi	r5,1
 2000720:	1809883a 	mov	r4,r3
 2000724:	2010f940 	call	2010f94 <OSFlagPend>
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 2000728:	00002c06 	br	20007dc <task3+0x244>
	 /* Si on n'est pas le joueur actif, on attend le signal donnée disponible
	  * -> lit les donnée
	  * -> envoi les données à la tâche 3 + lance l'animation
	  * -> passe en mode joueur actif
	  */
	 else if (!activePlayer && *isReceived){
 200072c:	e0bff517 	ldw	r2,-44(fp)
 2000730:	10002a1e 	bne	r2,zero,20007dc <task3+0x244>
 2000734:	e0bff917 	ldw	r2,-28(fp)
 2000738:	10800017 	ldw	r2,0(r2)
 200073c:	10002726 	beq	r2,zero,20007dc <task3+0x244>
		  printf("Get value from SPI : (%d, %d)\n",*XdirRec, *YdirRec);
 2000740:	e0bffa17 	ldw	r2,-24(fp)
 2000744:	10c00017 	ldw	r3,0(r2)
 2000748:	e0bffb17 	ldw	r2,-20(fp)
 200074c:	10800017 	ldw	r2,0(r2)
 2000750:	100d883a 	mov	r6,r2
 2000754:	180b883a 	mov	r5,r3
 2000758:	010080b4 	movhi	r4,514
 200075c:	21233a04 	addi	r4,r4,-29464
 2000760:	20009780 	call	2000978 <printf>
		  OSMboxPost(MailBox4, XdirRec);
 2000764:	d0a71117 	ldw	r2,-25532(gp)
 2000768:	e17ffa17 	ldw	r5,-24(fp)
 200076c:	1009883a 	mov	r4,r2
 2000770:	20125280 	call	2012528 <OSMboxPost>
		  OSMboxPost(MailBox5, YdirRec);
 2000774:	d0a70f17 	ldw	r2,-25540(gp)
 2000778:	e17ffb17 	ldw	r5,-20(fp)
 200077c:	1009883a 	mov	r4,r2
 2000780:	20125280 	call	2012528 <OSMboxPost>
		  opt_task1=OS_FLAG_SET;
 2000784:	00800044 	movi	r2,1
 2000788:	e0bffe05 	stb	r2,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 200078c:	d0a71317 	ldw	r2,-25524(gp)
 2000790:	e0fffe03 	ldbu	r3,-8(fp)
 2000794:	e13ffe44 	addi	r4,fp,-7
 2000798:	200f883a 	mov	r7,r4
 200079c:	180d883a 	mov	r6,r3
 20007a0:	01400044 	movi	r5,1
 20007a4:	1009883a 	mov	r4,r2
 20007a8:	20115ac0 	call	20115ac <OSFlagPost>
		  *isReceived = 0; // we are the actif player
 20007ac:	e0bff917 	ldw	r2,-28(fp)
 20007b0:	10000015 	stw	zero,0(r2)
		  activePlayer = 1;
 20007b4:	00800044 	movi	r2,1
 20007b8:	e0bff515 	stw	r2,-44(fp)
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20007bc:	d0e70e17 	ldw	r3,-25544(gp)
 20007c0:	e0bffe44 	addi	r2,fp,-7
 20007c4:	d8800015 	stw	r2,0(sp)
 20007c8:	000f883a 	mov	r7,zero
 20007cc:	000d883a 	mov	r6,zero
 20007d0:	01400044 	movi	r5,1
 20007d4:	1809883a 	mov	r4,r3
 20007d8:	2010f940 	call	2010f94 <OSFlagPend>
	  }
	  OSTimeDlyHMSM(0,0,0,100);
 20007dc:	01c01904 	movi	r7,100
 20007e0:	000d883a 	mov	r6,zero
 20007e4:	000b883a 	mov	r5,zero
 20007e8:	0009883a 	mov	r4,zero
 20007ec:	20163d80 	call	20163d8 <OSTimeDlyHMSM>
  }
 20007f0:	003f8206 	br	20005fc <task3+0x64>

020007f4 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 20007f4:	defff804 	addi	sp,sp,-32
 20007f8:	dfc00715 	stw	ra,28(sp)
 20007fc:	df000615 	stw	fp,24(sp)
 2000800:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 2000804:	0009883a 	mov	r4,zero
 2000808:	2011e740 	call	2011e74 <OSMboxCreate>
 200080c:	d0a71215 	stw	r2,-25528(gp)
  MailBox2 = OSMboxCreate(NULL);
 2000810:	0009883a 	mov	r4,zero
 2000814:	2011e740 	call	2011e74 <OSMboxCreate>
 2000818:	d0a71015 	stw	r2,-25536(gp)
  MailBox3 = OSMboxCreate(NULL);
 200081c:	0009883a 	mov	r4,zero
 2000820:	2011e740 	call	2011e74 <OSMboxCreate>
 2000824:	d0a70d15 	stw	r2,-25548(gp)

  MailBox4 = OSMboxCreate(NULL);
 2000828:	0009883a 	mov	r4,zero
 200082c:	2011e740 	call	2011e74 <OSMboxCreate>
 2000830:	d0a71115 	stw	r2,-25532(gp)
  MailBox5 = OSMboxCreate(NULL);
 2000834:	0009883a 	mov	r4,zero
 2000838:	2011e740 	call	2011e74 <OSMboxCreate>
 200083c:	d0a70f15 	stw	r2,-25540(gp)
  MailBox6 = OSMboxCreate(NULL);
 2000840:	0009883a 	mov	r4,zero
 2000844:	2011e740 	call	2011e74 <OSMboxCreate>
 2000848:	d0a70c15 	stw	r2,-25552(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 200084c:	e17fff04 	addi	r5,fp,-4
 2000850:	0009883a 	mov	r4,zero
 2000854:	20109d00 	call	20109d0 <OSFlagCreate>
 2000858:	d0a71315 	stw	r2,-25524(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 200085c:	e17fff04 	addi	r5,fp,-4
 2000860:	0009883a 	mov	r4,zero
 2000864:	20109d00 	call	20109d0 <OSFlagCreate>
 2000868:	d0a70e15 	stw	r2,-25544(gp)

  OSTaskCreateExt(task1,
 200086c:	d8000415 	stw	zero,16(sp)
 2000870:	d8000315 	stw	zero,12(sp)
 2000874:	00820004 	movi	r2,2048
 2000878:	d8800215 	stw	r2,8(sp)
 200087c:	008080b4 	movhi	r2,514
 2000880:	10b23c04 	addi	r2,r2,-14096
 2000884:	d8800115 	stw	r2,4(sp)
 2000888:	00800044 	movi	r2,1
 200088c:	d8800015 	stw	r2,0(sp)
 2000890:	01c00044 	movi	r7,1
 2000894:	018080b4 	movhi	r6,514
 2000898:	31ba3b04 	addi	r6,r6,-5908
 200089c:	000b883a 	mov	r5,zero
 20008a0:	01008034 	movhi	r4,512
 20008a4:	21009b04 	addi	r4,r4,620
 20008a8:	20152040 	call	2015204 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 20008ac:	d8000415 	stw	zero,16(sp)
 20008b0:	d8000315 	stw	zero,12(sp)
 20008b4:	00820004 	movi	r2,2048
 20008b8:	d8800215 	stw	r2,8(sp)
 20008bc:	008080b4 	movhi	r2,514
 20008c0:	10ba3c04 	addi	r2,r2,-5904
 20008c4:	d8800115 	stw	r2,4(sp)
 20008c8:	00800084 	movi	r2,2
 20008cc:	d8800015 	stw	r2,0(sp)
 20008d0:	01c00084 	movi	r7,2
 20008d4:	018080b4 	movhi	r6,514
 20008d8:	31823b04 	addi	r6,r6,2284
 20008dc:	000b883a 	mov	r5,zero
 20008e0:	01008034 	movhi	r4,512
 20008e4:	21013104 	addi	r4,r4,1220
 20008e8:	20152040 	call	2015204 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 20008ec:	d8000415 	stw	zero,16(sp)
 20008f0:	d8000315 	stw	zero,12(sp)
 20008f4:	00820004 	movi	r2,2048
 20008f8:	d8800215 	stw	r2,8(sp)
 20008fc:	008080b4 	movhi	r2,514
 2000900:	10823c04 	addi	r2,r2,2288
 2000904:	d8800115 	stw	r2,4(sp)
 2000908:	008000c4 	movi	r2,3
 200090c:	d8800015 	stw	r2,0(sp)
 2000910:	01c000c4 	movi	r7,3
 2000914:	018080b4 	movhi	r6,514
 2000918:	318a3b04 	addi	r6,r6,10476
 200091c:	000b883a 	mov	r5,zero
 2000920:	01008034 	movhi	r4,512
 2000924:	21016604 	addi	r4,r4,1432
 2000928:	20152040 	call	2015204 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
 200092c:	200f0980 	call	200f098 <OSStart>
  return 0;
 2000930:	0005883a 	mov	r2,zero
}
 2000934:	e037883a 	mov	sp,fp
 2000938:	dfc00117 	ldw	ra,4(sp)
 200093c:	df000017 	ldw	fp,0(sp)
 2000940:	dec00204 	addi	sp,sp,8
 2000944:	f800283a 	ret

02000948 <_printf_r>:
 2000948:	defffd04 	addi	sp,sp,-12
 200094c:	2805883a 	mov	r2,r5
 2000950:	dfc00015 	stw	ra,0(sp)
 2000954:	d9800115 	stw	r6,4(sp)
 2000958:	d9c00215 	stw	r7,8(sp)
 200095c:	21400217 	ldw	r5,8(r4)
 2000960:	d9c00104 	addi	r7,sp,4
 2000964:	100d883a 	mov	r6,r2
 2000968:	2000b200 	call	2000b20 <___vfprintf_internal_r>
 200096c:	dfc00017 	ldw	ra,0(sp)
 2000970:	dec00304 	addi	sp,sp,12
 2000974:	f800283a 	ret

02000978 <printf>:
 2000978:	defffc04 	addi	sp,sp,-16
 200097c:	dfc00015 	stw	ra,0(sp)
 2000980:	d9400115 	stw	r5,4(sp)
 2000984:	d9800215 	stw	r6,8(sp)
 2000988:	d9c00315 	stw	r7,12(sp)
 200098c:	008080b4 	movhi	r2,514
 2000990:	10aaf804 	addi	r2,r2,-21536
 2000994:	10800017 	ldw	r2,0(r2)
 2000998:	200b883a 	mov	r5,r4
 200099c:	d9800104 	addi	r6,sp,4
 20009a0:	11000217 	ldw	r4,8(r2)
 20009a4:	2002dfc0 	call	2002dfc <__vfprintf_internal>
 20009a8:	dfc00017 	ldw	ra,0(sp)
 20009ac:	dec00404 	addi	sp,sp,16
 20009b0:	f800283a 	ret

020009b4 <_puts_r>:
 20009b4:	defff604 	addi	sp,sp,-40
 20009b8:	dc000715 	stw	r16,28(sp)
 20009bc:	2021883a 	mov	r16,r4
 20009c0:	2809883a 	mov	r4,r5
 20009c4:	dc400815 	stw	r17,32(sp)
 20009c8:	dfc00915 	stw	ra,36(sp)
 20009cc:	2823883a 	mov	r17,r5
 20009d0:	2000a880 	call	2000a88 <strlen>
 20009d4:	10c00044 	addi	r3,r2,1
 20009d8:	d8800115 	stw	r2,4(sp)
 20009dc:	008080b4 	movhi	r2,514
 20009e0:	10a34204 	addi	r2,r2,-29432
 20009e4:	d8800215 	stw	r2,8(sp)
 20009e8:	00800044 	movi	r2,1
 20009ec:	d8800315 	stw	r2,12(sp)
 20009f0:	00800084 	movi	r2,2
 20009f4:	dc400015 	stw	r17,0(sp)
 20009f8:	d8c00615 	stw	r3,24(sp)
 20009fc:	dec00415 	stw	sp,16(sp)
 2000a00:	d8800515 	stw	r2,20(sp)
 2000a04:	80000226 	beq	r16,zero,2000a10 <_puts_r+0x5c>
 2000a08:	80800e17 	ldw	r2,56(r16)
 2000a0c:	10001426 	beq	r2,zero,2000a60 <_puts_r+0xac>
 2000a10:	81400217 	ldw	r5,8(r16)
 2000a14:	2880030b 	ldhu	r2,12(r5)
 2000a18:	10c8000c 	andi	r3,r2,8192
 2000a1c:	1800061e 	bne	r3,zero,2000a38 <_puts_r+0x84>
 2000a20:	29001917 	ldw	r4,100(r5)
 2000a24:	00f7ffc4 	movi	r3,-8193
 2000a28:	10880014 	ori	r2,r2,8192
 2000a2c:	20c6703a 	and	r3,r4,r3
 2000a30:	2880030d 	sth	r2,12(r5)
 2000a34:	28c01915 	stw	r3,100(r5)
 2000a38:	d9800404 	addi	r6,sp,16
 2000a3c:	8009883a 	mov	r4,r16
 2000a40:	20053640 	call	2005364 <__sfvwrite_r>
 2000a44:	1000091e 	bne	r2,zero,2000a6c <_puts_r+0xb8>
 2000a48:	00800284 	movi	r2,10
 2000a4c:	dfc00917 	ldw	ra,36(sp)
 2000a50:	dc400817 	ldw	r17,32(sp)
 2000a54:	dc000717 	ldw	r16,28(sp)
 2000a58:	dec00a04 	addi	sp,sp,40
 2000a5c:	f800283a 	ret
 2000a60:	8009883a 	mov	r4,r16
 2000a64:	2004ee00 	call	2004ee0 <__sinit>
 2000a68:	003fe906 	br	2000a10 <_puts_r+0x5c>
 2000a6c:	00bfffc4 	movi	r2,-1
 2000a70:	003ff606 	br	2000a4c <_puts_r+0x98>

02000a74 <puts>:
 2000a74:	008080b4 	movhi	r2,514
 2000a78:	10aaf804 	addi	r2,r2,-21536
 2000a7c:	200b883a 	mov	r5,r4
 2000a80:	11000017 	ldw	r4,0(r2)
 2000a84:	20009b41 	jmpi	20009b4 <_puts_r>

02000a88 <strlen>:
 2000a88:	208000cc 	andi	r2,r4,3
 2000a8c:	10002026 	beq	r2,zero,2000b10 <strlen+0x88>
 2000a90:	20800007 	ldb	r2,0(r4)
 2000a94:	10002026 	beq	r2,zero,2000b18 <strlen+0x90>
 2000a98:	2005883a 	mov	r2,r4
 2000a9c:	00000206 	br	2000aa8 <strlen+0x20>
 2000aa0:	10c00007 	ldb	r3,0(r2)
 2000aa4:	18001826 	beq	r3,zero,2000b08 <strlen+0x80>
 2000aa8:	10800044 	addi	r2,r2,1
 2000aac:	10c000cc 	andi	r3,r2,3
 2000ab0:	183ffb1e 	bne	r3,zero,2000aa0 <strlen+0x18>
 2000ab4:	10c00017 	ldw	r3,0(r2)
 2000ab8:	01ffbff4 	movhi	r7,65279
 2000abc:	39ffbfc4 	addi	r7,r7,-257
 2000ac0:	00ca303a 	nor	r5,zero,r3
 2000ac4:	01a02074 	movhi	r6,32897
 2000ac8:	19c7883a 	add	r3,r3,r7
 2000acc:	31a02004 	addi	r6,r6,-32640
 2000ad0:	1946703a 	and	r3,r3,r5
 2000ad4:	1986703a 	and	r3,r3,r6
 2000ad8:	1800091e 	bne	r3,zero,2000b00 <strlen+0x78>
 2000adc:	10800104 	addi	r2,r2,4
 2000ae0:	10c00017 	ldw	r3,0(r2)
 2000ae4:	19cb883a 	add	r5,r3,r7
 2000ae8:	00c6303a 	nor	r3,zero,r3
 2000aec:	28c6703a 	and	r3,r5,r3
 2000af0:	1986703a 	and	r3,r3,r6
 2000af4:	183ff926 	beq	r3,zero,2000adc <strlen+0x54>
 2000af8:	00000106 	br	2000b00 <strlen+0x78>
 2000afc:	10800044 	addi	r2,r2,1
 2000b00:	10c00007 	ldb	r3,0(r2)
 2000b04:	183ffd1e 	bne	r3,zero,2000afc <strlen+0x74>
 2000b08:	1105c83a 	sub	r2,r2,r4
 2000b0c:	f800283a 	ret
 2000b10:	2005883a 	mov	r2,r4
 2000b14:	003fe706 	br	2000ab4 <strlen+0x2c>
 2000b18:	0005883a 	mov	r2,zero
 2000b1c:	f800283a 	ret

02000b20 <___vfprintf_internal_r>:
 2000b20:	deffb804 	addi	sp,sp,-288
 2000b24:	dfc04715 	stw	ra,284(sp)
 2000b28:	ddc04515 	stw	r23,276(sp)
 2000b2c:	dd404315 	stw	r21,268(sp)
 2000b30:	d9002d15 	stw	r4,180(sp)
 2000b34:	282f883a 	mov	r23,r5
 2000b38:	302b883a 	mov	r21,r6
 2000b3c:	d9c02e15 	stw	r7,184(sp)
 2000b40:	df004615 	stw	fp,280(sp)
 2000b44:	dd804415 	stw	r22,272(sp)
 2000b48:	dd004215 	stw	r20,264(sp)
 2000b4c:	dcc04115 	stw	r19,260(sp)
 2000b50:	dc804015 	stw	r18,256(sp)
 2000b54:	dc403f15 	stw	r17,252(sp)
 2000b58:	dc003e15 	stw	r16,248(sp)
 2000b5c:	2005a600 	call	2005a60 <_localeconv_r>
 2000b60:	10800017 	ldw	r2,0(r2)
 2000b64:	1009883a 	mov	r4,r2
 2000b68:	d8803415 	stw	r2,208(sp)
 2000b6c:	2000a880 	call	2000a88 <strlen>
 2000b70:	d8803715 	stw	r2,220(sp)
 2000b74:	d8802d17 	ldw	r2,180(sp)
 2000b78:	10000226 	beq	r2,zero,2000b84 <___vfprintf_internal_r+0x64>
 2000b7c:	10800e17 	ldw	r2,56(r2)
 2000b80:	1000fb26 	beq	r2,zero,2000f70 <___vfprintf_internal_r+0x450>
 2000b84:	b880030b 	ldhu	r2,12(r23)
 2000b88:	10c8000c 	andi	r3,r2,8192
 2000b8c:	1800061e 	bne	r3,zero,2000ba8 <___vfprintf_internal_r+0x88>
 2000b90:	b9001917 	ldw	r4,100(r23)
 2000b94:	00f7ffc4 	movi	r3,-8193
 2000b98:	10880014 	ori	r2,r2,8192
 2000b9c:	20c6703a 	and	r3,r4,r3
 2000ba0:	b880030d 	sth	r2,12(r23)
 2000ba4:	b8c01915 	stw	r3,100(r23)
 2000ba8:	10c0020c 	andi	r3,r2,8
 2000bac:	1800c326 	beq	r3,zero,2000ebc <___vfprintf_internal_r+0x39c>
 2000bb0:	b8c00417 	ldw	r3,16(r23)
 2000bb4:	1800c126 	beq	r3,zero,2000ebc <___vfprintf_internal_r+0x39c>
 2000bb8:	1080068c 	andi	r2,r2,26
 2000bbc:	00c00284 	movi	r3,10
 2000bc0:	10c0c626 	beq	r2,r3,2000edc <___vfprintf_internal_r+0x3bc>
 2000bc4:	d8c00404 	addi	r3,sp,16
 2000bc8:	050080b4 	movhi	r20,514
 2000bcc:	d9001e04 	addi	r4,sp,120
 2000bd0:	a5235384 	addi	r20,r20,-29362
 2000bd4:	d8c01e15 	stw	r3,120(sp)
 2000bd8:	d8002015 	stw	zero,128(sp)
 2000bdc:	d8001f15 	stw	zero,124(sp)
 2000be0:	d8003315 	stw	zero,204(sp)
 2000be4:	d8003615 	stw	zero,216(sp)
 2000be8:	d8003815 	stw	zero,224(sp)
 2000bec:	1811883a 	mov	r8,r3
 2000bf0:	d8003915 	stw	zero,228(sp)
 2000bf4:	d8003a15 	stw	zero,232(sp)
 2000bf8:	d8002f15 	stw	zero,188(sp)
 2000bfc:	d9002815 	stw	r4,160(sp)
 2000c00:	a8800007 	ldb	r2,0(r21)
 2000c04:	10028b26 	beq	r2,zero,2001634 <___vfprintf_internal_r+0xb14>
 2000c08:	00c00944 	movi	r3,37
 2000c0c:	a823883a 	mov	r17,r21
 2000c10:	10c0021e 	bne	r2,r3,2000c1c <___vfprintf_internal_r+0xfc>
 2000c14:	00001406 	br	2000c68 <___vfprintf_internal_r+0x148>
 2000c18:	10c00326 	beq	r2,r3,2000c28 <___vfprintf_internal_r+0x108>
 2000c1c:	8c400044 	addi	r17,r17,1
 2000c20:	88800007 	ldb	r2,0(r17)
 2000c24:	103ffc1e 	bne	r2,zero,2000c18 <___vfprintf_internal_r+0xf8>
 2000c28:	8d61c83a 	sub	r16,r17,r21
 2000c2c:	80000e26 	beq	r16,zero,2000c68 <___vfprintf_internal_r+0x148>
 2000c30:	d8c02017 	ldw	r3,128(sp)
 2000c34:	d8801f17 	ldw	r2,124(sp)
 2000c38:	45400015 	stw	r21,0(r8)
 2000c3c:	1c07883a 	add	r3,r3,r16
 2000c40:	10800044 	addi	r2,r2,1
 2000c44:	d8c02015 	stw	r3,128(sp)
 2000c48:	44000115 	stw	r16,4(r8)
 2000c4c:	d8801f15 	stw	r2,124(sp)
 2000c50:	00c001c4 	movi	r3,7
 2000c54:	1880a916 	blt	r3,r2,2000efc <___vfprintf_internal_r+0x3dc>
 2000c58:	42000204 	addi	r8,r8,8
 2000c5c:	d9402f17 	ldw	r5,188(sp)
 2000c60:	2c0b883a 	add	r5,r5,r16
 2000c64:	d9402f15 	stw	r5,188(sp)
 2000c68:	88800007 	ldb	r2,0(r17)
 2000c6c:	1000aa26 	beq	r2,zero,2000f18 <___vfprintf_internal_r+0x3f8>
 2000c70:	8d400044 	addi	r21,r17,1
 2000c74:	8c400047 	ldb	r17,1(r17)
 2000c78:	0021883a 	mov	r16,zero
 2000c7c:	00bfffc4 	movi	r2,-1
 2000c80:	0025883a 	mov	r18,zero
 2000c84:	dc002905 	stb	r16,164(sp)
 2000c88:	d8002785 	stb	zero,158(sp)
 2000c8c:	d8002b05 	stb	zero,172(sp)
 2000c90:	d8802a15 	stw	r2,168(sp)
 2000c94:	d8003115 	stw	zero,196(sp)
 2000c98:	04c01604 	movi	r19,88
 2000c9c:	05800244 	movi	r22,9
 2000ca0:	9021883a 	mov	r16,r18
 2000ca4:	4039883a 	mov	fp,r8
 2000ca8:	ad400044 	addi	r21,r21,1
 2000cac:	88bff804 	addi	r2,r17,-32
 2000cb0:	98833236 	bltu	r19,r2,200197c <___vfprintf_internal_r+0xe5c>
 2000cb4:	100490ba 	slli	r2,r2,2
 2000cb8:	00c08034 	movhi	r3,512
 2000cbc:	18c33304 	addi	r3,r3,3276
 2000cc0:	10c5883a 	add	r2,r2,r3
 2000cc4:	10800017 	ldw	r2,0(r2)
 2000cc8:	1000683a 	jmp	r2
 2000ccc:	02001874 	movhi	r8,97
 2000cd0:	0200197c 	xorhi	r8,zero,101
 2000cd4:	0200197c 	xorhi	r8,zero,101
 2000cd8:	02001894 	movui	r8,98
 2000cdc:	0200197c 	xorhi	r8,zero,101
 2000ce0:	0200197c 	xorhi	r8,zero,101
 2000ce4:	0200197c 	xorhi	r8,zero,101
 2000ce8:	0200197c 	xorhi	r8,zero,101
 2000cec:	0200197c 	xorhi	r8,zero,101
 2000cf0:	0200197c 	xorhi	r8,zero,101
 2000cf4:	02000f7c 	xorhi	r8,zero,61
 2000cf8:	02001784 	movi	r8,94
 2000cfc:	0200197c 	xorhi	r8,zero,101
 2000d00:	02000e40 	call	2000e4 <__alt_mem_mem_Nios_PI+0xe4>
 2000d04:	02000fa0 	cmpeqi	r8,zero,62
 2000d08:	0200197c 	xorhi	r8,zero,101
 2000d0c:	02000ff0 	cmpltui	r8,zero,63
 2000d10:	02000ffc 	xorhi	r8,zero,63
 2000d14:	02000ffc 	xorhi	r8,zero,63
 2000d18:	02000ffc 	xorhi	r8,zero,63
 2000d1c:	02000ffc 	xorhi	r8,zero,63
 2000d20:	02000ffc 	xorhi	r8,zero,63
 2000d24:	02000ffc 	xorhi	r8,zero,63
 2000d28:	02000ffc 	xorhi	r8,zero,63
 2000d2c:	02000ffc 	xorhi	r8,zero,63
 2000d30:	02000ffc 	xorhi	r8,zero,63
 2000d34:	0200197c 	xorhi	r8,zero,101
 2000d38:	0200197c 	xorhi	r8,zero,101
 2000d3c:	0200197c 	xorhi	r8,zero,101
 2000d40:	0200197c 	xorhi	r8,zero,101
 2000d44:	0200197c 	xorhi	r8,zero,101
 2000d48:	0200197c 	xorhi	r8,zero,101
 2000d4c:	0200197c 	xorhi	r8,zero,101
 2000d50:	0200197c 	xorhi	r8,zero,101
 2000d54:	0200197c 	xorhi	r8,zero,101
 2000d58:	0200197c 	xorhi	r8,zero,101
 2000d5c:	02001038 	rdprs	r8,zero,64
 2000d60:	02001100 	call	200110 <__alt_mem_mem_Nios_PI+0x110>
 2000d64:	0200197c 	xorhi	r8,zero,101
 2000d68:	02001100 	call	200110 <__alt_mem_mem_Nios_PI+0x110>
 2000d6c:	0200197c 	xorhi	r8,zero,101
 2000d70:	0200197c 	xorhi	r8,zero,101
 2000d74:	0200197c 	xorhi	r8,zero,101
 2000d78:	0200197c 	xorhi	r8,zero,101
 2000d7c:	020011ac 	andhi	r8,zero,70
 2000d80:	0200197c 	xorhi	r8,zero,101
 2000d84:	0200197c 	xorhi	r8,zero,101
 2000d88:	020011b8 	rdprs	r8,zero,70
 2000d8c:	0200197c 	xorhi	r8,zero,101
 2000d90:	0200197c 	xorhi	r8,zero,101
 2000d94:	0200197c 	xorhi	r8,zero,101
 2000d98:	0200197c 	xorhi	r8,zero,101
 2000d9c:	0200197c 	xorhi	r8,zero,101
 2000da0:	0200163c 	xorhi	r8,zero,88
 2000da4:	0200197c 	xorhi	r8,zero,101
 2000da8:	0200197c 	xorhi	r8,zero,101
 2000dac:	020016a8 	cmpgeui	r8,zero,90
 2000db0:	0200197c 	xorhi	r8,zero,101
 2000db4:	0200197c 	xorhi	r8,zero,101
 2000db8:	0200197c 	xorhi	r8,zero,101
 2000dbc:	0200197c 	xorhi	r8,zero,101
 2000dc0:	0200197c 	xorhi	r8,zero,101
 2000dc4:	0200197c 	xorhi	r8,zero,101
 2000dc8:	0200197c 	xorhi	r8,zero,101
 2000dcc:	0200197c 	xorhi	r8,zero,101
 2000dd0:	0200197c 	xorhi	r8,zero,101
 2000dd4:	0200197c 	xorhi	r8,zero,101
 2000dd8:	02001920 	cmpeqi	r8,zero,100
 2000ddc:	020018a0 	cmpeqi	r8,zero,98
 2000de0:	02001100 	call	200110 <__alt_mem_mem_Nios_PI+0x110>
 2000de4:	02001100 	call	200110 <__alt_mem_mem_Nios_PI+0x110>
 2000de8:	02001100 	call	200110 <__alt_mem_mem_Nios_PI+0x110>
 2000dec:	020018c0 	call	20018c <__alt_mem_mem_Nios_PI+0x18c>
 2000df0:	020018a0 	cmpeqi	r8,zero,98
 2000df4:	0200197c 	xorhi	r8,zero,101
 2000df8:	0200197c 	xorhi	r8,zero,101
 2000dfc:	020018cc 	andi	r8,zero,99
 2000e00:	0200197c 	xorhi	r8,zero,101
 2000e04:	020018e0 	cmpeqi	r8,zero,99
 2000e08:	02001764 	muli	r8,zero,93
 2000e0c:	02000e4c 	andi	r8,zero,57
 2000e10:	0200179c 	xori	r8,zero,94
 2000e14:	0200197c 	xorhi	r8,zero,101
 2000e18:	020017a8 	cmpgeui	r8,zero,94
 2000e1c:	0200197c 	xorhi	r8,zero,101
 2000e20:	0200180c 	andi	r8,zero,96
 2000e24:	0200197c 	xorhi	r8,zero,101
 2000e28:	0200197c 	xorhi	r8,zero,101
 2000e2c:	0200182c 	andhi	r8,zero,96
 2000e30:	d8c03117 	ldw	r3,196(sp)
 2000e34:	d8802e15 	stw	r2,184(sp)
 2000e38:	00c7c83a 	sub	r3,zero,r3
 2000e3c:	d8c03115 	stw	r3,196(sp)
 2000e40:	84000114 	ori	r16,r16,4
 2000e44:	ac400007 	ldb	r17,0(r21)
 2000e48:	003f9706 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2000e4c:	00800c04 	movi	r2,48
 2000e50:	d8802705 	stb	r2,156(sp)
 2000e54:	00801e04 	movi	r2,120
 2000e58:	d8802745 	stb	r2,157(sp)
 2000e5c:	d9002a17 	ldw	r4,168(sp)
 2000e60:	d8802e17 	ldw	r2,184(sp)
 2000e64:	d8002785 	stb	zero,158(sp)
 2000e68:	e011883a 	mov	r8,fp
 2000e6c:	10c00104 	addi	r3,r2,4
 2000e70:	14c00017 	ldw	r19,0(r2)
 2000e74:	002d883a 	mov	r22,zero
 2000e78:	80800094 	ori	r2,r16,2
 2000e7c:	2002ca16 	blt	r4,zero,20019a8 <___vfprintf_internal_r+0xe88>
 2000e80:	00bfdfc4 	movi	r2,-129
 2000e84:	80a4703a 	and	r18,r16,r2
 2000e88:	d8c02e15 	stw	r3,184(sp)
 2000e8c:	94800094 	ori	r18,r18,2
 2000e90:	9802b41e 	bne	r19,zero,2001964 <___vfprintf_internal_r+0xe44>
 2000e94:	014080b4 	movhi	r5,514
 2000e98:	29634c04 	addi	r5,r5,-29392
 2000e9c:	d9403915 	stw	r5,228(sp)
 2000ea0:	04401e04 	movi	r17,120
 2000ea4:	d8802a17 	ldw	r2,168(sp)
 2000ea8:	0039883a 	mov	fp,zero
 2000eac:	1001fa26 	beq	r2,zero,2001698 <___vfprintf_internal_r+0xb78>
 2000eb0:	0027883a 	mov	r19,zero
 2000eb4:	002d883a 	mov	r22,zero
 2000eb8:	00021906 	br	2001720 <___vfprintf_internal_r+0xc00>
 2000ebc:	d9002d17 	ldw	r4,180(sp)
 2000ec0:	b80b883a 	mov	r5,r23
 2000ec4:	2002ed40 	call	2002ed4 <__swsetup_r>
 2000ec8:	1005dc1e 	bne	r2,zero,200263c <___vfprintf_internal_r+0x1b1c>
 2000ecc:	b880030b 	ldhu	r2,12(r23)
 2000ed0:	00c00284 	movi	r3,10
 2000ed4:	1080068c 	andi	r2,r2,26
 2000ed8:	10ff3a1e 	bne	r2,r3,2000bc4 <___vfprintf_internal_r+0xa4>
 2000edc:	b880038f 	ldh	r2,14(r23)
 2000ee0:	103f3816 	blt	r2,zero,2000bc4 <___vfprintf_internal_r+0xa4>
 2000ee4:	d9c02e17 	ldw	r7,184(sp)
 2000ee8:	d9002d17 	ldw	r4,180(sp)
 2000eec:	a80d883a 	mov	r6,r21
 2000ef0:	b80b883a 	mov	r5,r23
 2000ef4:	2002e180 	call	2002e18 <__sbprintf>
 2000ef8:	00001106 	br	2000f40 <___vfprintf_internal_r+0x420>
 2000efc:	d9002d17 	ldw	r4,180(sp)
 2000f00:	d9801e04 	addi	r6,sp,120
 2000f04:	b80b883a 	mov	r5,r23
 2000f08:	20083000 	call	2008300 <__sprint_r>
 2000f0c:	1000081e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2000f10:	da000404 	addi	r8,sp,16
 2000f14:	003f5106 	br	2000c5c <___vfprintf_internal_r+0x13c>
 2000f18:	d8802017 	ldw	r2,128(sp)
 2000f1c:	10000426 	beq	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2000f20:	d9002d17 	ldw	r4,180(sp)
 2000f24:	d9801e04 	addi	r6,sp,120
 2000f28:	b80b883a 	mov	r5,r23
 2000f2c:	20083000 	call	2008300 <__sprint_r>
 2000f30:	b880030b 	ldhu	r2,12(r23)
 2000f34:	1080100c 	andi	r2,r2,64
 2000f38:	1005c01e 	bne	r2,zero,200263c <___vfprintf_internal_r+0x1b1c>
 2000f3c:	d8802f17 	ldw	r2,188(sp)
 2000f40:	dfc04717 	ldw	ra,284(sp)
 2000f44:	df004617 	ldw	fp,280(sp)
 2000f48:	ddc04517 	ldw	r23,276(sp)
 2000f4c:	dd804417 	ldw	r22,272(sp)
 2000f50:	dd404317 	ldw	r21,268(sp)
 2000f54:	dd004217 	ldw	r20,264(sp)
 2000f58:	dcc04117 	ldw	r19,260(sp)
 2000f5c:	dc804017 	ldw	r18,256(sp)
 2000f60:	dc403f17 	ldw	r17,252(sp)
 2000f64:	dc003e17 	ldw	r16,248(sp)
 2000f68:	dec04804 	addi	sp,sp,288
 2000f6c:	f800283a 	ret
 2000f70:	d9002d17 	ldw	r4,180(sp)
 2000f74:	2004ee00 	call	2004ee0 <__sinit>
 2000f78:	003f0206 	br	2000b84 <___vfprintf_internal_r+0x64>
 2000f7c:	d9002e17 	ldw	r4,184(sp)
 2000f80:	d9402e17 	ldw	r5,184(sp)
 2000f84:	21000017 	ldw	r4,0(r4)
 2000f88:	28800104 	addi	r2,r5,4
 2000f8c:	d9003115 	stw	r4,196(sp)
 2000f90:	203fa716 	blt	r4,zero,2000e30 <___vfprintf_internal_r+0x310>
 2000f94:	d8802e15 	stw	r2,184(sp)
 2000f98:	ac400007 	ldb	r17,0(r21)
 2000f9c:	003f4206 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2000fa0:	ac400007 	ldb	r17,0(r21)
 2000fa4:	01000a84 	movi	r4,42
 2000fa8:	a8c00044 	addi	r3,r21,1
 2000fac:	89075826 	beq	r17,r4,2002d10 <___vfprintf_internal_r+0x21f0>
 2000fb0:	8cbff404 	addi	r18,r17,-48
 2000fb4:	b486ae36 	bltu	r22,r18,2002a70 <___vfprintf_internal_r+0x1f50>
 2000fb8:	0009883a 	mov	r4,zero
 2000fbc:	1823883a 	mov	r17,r3
 2000fc0:	01400284 	movi	r5,10
 2000fc4:	200afbc0 	call	200afbc <__mulsi3>
 2000fc8:	88c00007 	ldb	r3,0(r17)
 2000fcc:	1489883a 	add	r4,r2,r18
 2000fd0:	8d400044 	addi	r21,r17,1
 2000fd4:	1cbff404 	addi	r18,r3,-48
 2000fd8:	a823883a 	mov	r17,r21
 2000fdc:	b4bff82e 	bgeu	r22,r18,2000fc0 <___vfprintf_internal_r+0x4a0>
 2000fe0:	1823883a 	mov	r17,r3
 2000fe4:	2005f616 	blt	r4,zero,20027c0 <___vfprintf_internal_r+0x1ca0>
 2000fe8:	d9002a15 	stw	r4,168(sp)
 2000fec:	003f2f06 	br	2000cac <___vfprintf_internal_r+0x18c>
 2000ff0:	84002014 	ori	r16,r16,128
 2000ff4:	ac400007 	ldb	r17,0(r21)
 2000ff8:	003f2b06 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2000ffc:	8cbff404 	addi	r18,r17,-48
 2001000:	d8003115 	stw	zero,196(sp)
 2001004:	0009883a 	mov	r4,zero
 2001008:	a823883a 	mov	r17,r21
 200100c:	01400284 	movi	r5,10
 2001010:	200afbc0 	call	200afbc <__mulsi3>
 2001014:	88c00007 	ldb	r3,0(r17)
 2001018:	9089883a 	add	r4,r18,r2
 200101c:	ad400044 	addi	r21,r21,1
 2001020:	1cbff404 	addi	r18,r3,-48
 2001024:	a823883a 	mov	r17,r21
 2001028:	b4bff82e 	bgeu	r22,r18,200100c <___vfprintf_internal_r+0x4ec>
 200102c:	1823883a 	mov	r17,r3
 2001030:	d9003115 	stw	r4,196(sp)
 2001034:	003f1d06 	br	2000cac <___vfprintf_internal_r+0x18c>
 2001038:	8025883a 	mov	r18,r16
 200103c:	dc002903 	ldbu	r16,164(sp)
 2001040:	e011883a 	mov	r8,fp
 2001044:	84003fcc 	andi	r16,r16,255
 2001048:	8007531e 	bne	r16,zero,2002d98 <___vfprintf_internal_r+0x2278>
 200104c:	94800414 	ori	r18,r18,16
 2001050:	9080080c 	andi	r2,r18,32
 2001054:	1003a326 	beq	r2,zero,2001ee4 <___vfprintf_internal_r+0x13c4>
 2001058:	d9002e17 	ldw	r4,184(sp)
 200105c:	20800117 	ldw	r2,4(r4)
 2001060:	24c00017 	ldw	r19,0(r4)
 2001064:	21000204 	addi	r4,r4,8
 2001068:	d9002e15 	stw	r4,184(sp)
 200106c:	102d883a 	mov	r22,r2
 2001070:	10047316 	blt	r2,zero,2002240 <___vfprintf_internal_r+0x1720>
 2001074:	d9002a17 	ldw	r4,168(sp)
 2001078:	df002783 	ldbu	fp,158(sp)
 200107c:	2003e416 	blt	r4,zero,2002010 <___vfprintf_internal_r+0x14f0>
 2001080:	00ffdfc4 	movi	r3,-129
 2001084:	9d84b03a 	or	r2,r19,r22
 2001088:	90e4703a 	and	r18,r18,r3
 200108c:	10018026 	beq	r2,zero,2001690 <___vfprintf_internal_r+0xb70>
 2001090:	b003ab26 	beq	r22,zero,2001f40 <___vfprintf_internal_r+0x1420>
 2001094:	dc402915 	stw	r17,164(sp)
 2001098:	dc001e04 	addi	r16,sp,120
 200109c:	b023883a 	mov	r17,r22
 20010a0:	402d883a 	mov	r22,r8
 20010a4:	9809883a 	mov	r4,r19
 20010a8:	880b883a 	mov	r5,r17
 20010ac:	01800284 	movi	r6,10
 20010b0:	000f883a 	mov	r7,zero
 20010b4:	200a8440 	call	200a844 <__umoddi3>
 20010b8:	10800c04 	addi	r2,r2,48
 20010bc:	843fffc4 	addi	r16,r16,-1
 20010c0:	9809883a 	mov	r4,r19
 20010c4:	880b883a 	mov	r5,r17
 20010c8:	80800005 	stb	r2,0(r16)
 20010cc:	01800284 	movi	r6,10
 20010d0:	000f883a 	mov	r7,zero
 20010d4:	200a2480 	call	200a248 <__udivdi3>
 20010d8:	1027883a 	mov	r19,r2
 20010dc:	10c4b03a 	or	r2,r2,r3
 20010e0:	1823883a 	mov	r17,r3
 20010e4:	103fef1e 	bne	r2,zero,20010a4 <___vfprintf_internal_r+0x584>
 20010e8:	d8c02817 	ldw	r3,160(sp)
 20010ec:	dc402917 	ldw	r17,164(sp)
 20010f0:	b011883a 	mov	r8,r22
 20010f4:	1c07c83a 	sub	r3,r3,r16
 20010f8:	d8c02b15 	stw	r3,172(sp)
 20010fc:	00005f06 	br	200127c <___vfprintf_internal_r+0x75c>
 2001100:	8025883a 	mov	r18,r16
 2001104:	dc002903 	ldbu	r16,164(sp)
 2001108:	e011883a 	mov	r8,fp
 200110c:	84003fcc 	andi	r16,r16,255
 2001110:	80071e1e 	bne	r16,zero,2002d8c <___vfprintf_internal_r+0x226c>
 2001114:	9080020c 	andi	r2,r18,8
 2001118:	1004af26 	beq	r2,zero,20023d8 <___vfprintf_internal_r+0x18b8>
 200111c:	d9002e17 	ldw	r4,184(sp)
 2001120:	d9402e17 	ldw	r5,184(sp)
 2001124:	d8802e17 	ldw	r2,184(sp)
 2001128:	21000017 	ldw	r4,0(r4)
 200112c:	29400117 	ldw	r5,4(r5)
 2001130:	10800204 	addi	r2,r2,8
 2001134:	d9003615 	stw	r4,216(sp)
 2001138:	d9403815 	stw	r5,224(sp)
 200113c:	d8802e15 	stw	r2,184(sp)
 2001140:	d9003617 	ldw	r4,216(sp)
 2001144:	d9403817 	ldw	r5,224(sp)
 2001148:	da003d15 	stw	r8,244(sp)
 200114c:	04000044 	movi	r16,1
 2001150:	2007f240 	call	2007f24 <__fpclassifyd>
 2001154:	da003d17 	ldw	r8,244(sp)
 2001158:	1404441e 	bne	r2,r16,200226c <___vfprintf_internal_r+0x174c>
 200115c:	d9003617 	ldw	r4,216(sp)
 2001160:	d9403817 	ldw	r5,224(sp)
 2001164:	000d883a 	mov	r6,zero
 2001168:	000f883a 	mov	r7,zero
 200116c:	200c3c40 	call	200c3c4 <__ledf2>
 2001170:	da003d17 	ldw	r8,244(sp)
 2001174:	1005e316 	blt	r2,zero,2002904 <___vfprintf_internal_r+0x1de4>
 2001178:	df002783 	ldbu	fp,158(sp)
 200117c:	008011c4 	movi	r2,71
 2001180:	1445580e 	bge	r2,r17,20026e4 <___vfprintf_internal_r+0x1bc4>
 2001184:	040080b4 	movhi	r16,514
 2001188:	84234404 	addi	r16,r16,-29424
 200118c:	00c000c4 	movi	r3,3
 2001190:	00bfdfc4 	movi	r2,-129
 2001194:	d8c02915 	stw	r3,164(sp)
 2001198:	90a4703a 	and	r18,r18,r2
 200119c:	d8c02b15 	stw	r3,172(sp)
 20011a0:	d8002a15 	stw	zero,168(sp)
 20011a4:	d8003215 	stw	zero,200(sp)
 20011a8:	00003a06 	br	2001294 <___vfprintf_internal_r+0x774>
 20011ac:	84000214 	ori	r16,r16,8
 20011b0:	ac400007 	ldb	r17,0(r21)
 20011b4:	003ebc06 	br	2000ca8 <___vfprintf_internal_r+0x188>
 20011b8:	8025883a 	mov	r18,r16
 20011bc:	dc002903 	ldbu	r16,164(sp)
 20011c0:	e011883a 	mov	r8,fp
 20011c4:	84003fcc 	andi	r16,r16,255
 20011c8:	8007001e 	bne	r16,zero,2002dcc <___vfprintf_internal_r+0x22ac>
 20011cc:	94800414 	ori	r18,r18,16
 20011d0:	9080080c 	andi	r2,r18,32
 20011d4:	1002fa26 	beq	r2,zero,2001dc0 <___vfprintf_internal_r+0x12a0>
 20011d8:	d9002e17 	ldw	r4,184(sp)
 20011dc:	d9402a17 	ldw	r5,168(sp)
 20011e0:	d8002785 	stb	zero,158(sp)
 20011e4:	20800204 	addi	r2,r4,8
 20011e8:	24c00017 	ldw	r19,0(r4)
 20011ec:	25800117 	ldw	r22,4(r4)
 20011f0:	2804b116 	blt	r5,zero,20024b8 <___vfprintf_internal_r+0x1998>
 20011f4:	013fdfc4 	movi	r4,-129
 20011f8:	9d86b03a 	or	r3,r19,r22
 20011fc:	d8802e15 	stw	r2,184(sp)
 2001200:	9124703a 	and	r18,r18,r4
 2001204:	1802fb1e 	bne	r3,zero,2001df4 <___vfprintf_internal_r+0x12d4>
 2001208:	d8c02a17 	ldw	r3,168(sp)
 200120c:	0039883a 	mov	fp,zero
 2001210:	1805e526 	beq	r3,zero,20029a8 <___vfprintf_internal_r+0x1e88>
 2001214:	0027883a 	mov	r19,zero
 2001218:	002d883a 	mov	r22,zero
 200121c:	dc001e04 	addi	r16,sp,120
 2001220:	9806d0fa 	srli	r3,r19,3
 2001224:	b008977a 	slli	r4,r22,29
 2001228:	b02cd0fa 	srli	r22,r22,3
 200122c:	9cc001cc 	andi	r19,r19,7
 2001230:	98800c04 	addi	r2,r19,48
 2001234:	843fffc4 	addi	r16,r16,-1
 2001238:	20e6b03a 	or	r19,r4,r3
 200123c:	80800005 	stb	r2,0(r16)
 2001240:	9d86b03a 	or	r3,r19,r22
 2001244:	183ff61e 	bne	r3,zero,2001220 <___vfprintf_internal_r+0x700>
 2001248:	90c0004c 	andi	r3,r18,1
 200124c:	18014126 	beq	r3,zero,2001754 <___vfprintf_internal_r+0xc34>
 2001250:	10803fcc 	andi	r2,r2,255
 2001254:	1080201c 	xori	r2,r2,128
 2001258:	10bfe004 	addi	r2,r2,-128
 200125c:	00c00c04 	movi	r3,48
 2001260:	10c13c26 	beq	r2,r3,2001754 <___vfprintf_internal_r+0xc34>
 2001264:	80ffffc5 	stb	r3,-1(r16)
 2001268:	d8c02817 	ldw	r3,160(sp)
 200126c:	80bfffc4 	addi	r2,r16,-1
 2001270:	1021883a 	mov	r16,r2
 2001274:	1887c83a 	sub	r3,r3,r2
 2001278:	d8c02b15 	stw	r3,172(sp)
 200127c:	d8802b17 	ldw	r2,172(sp)
 2001280:	d9002a17 	ldw	r4,168(sp)
 2001284:	1100010e 	bge	r2,r4,200128c <___vfprintf_internal_r+0x76c>
 2001288:	2005883a 	mov	r2,r4
 200128c:	d8802915 	stw	r2,164(sp)
 2001290:	d8003215 	stw	zero,200(sp)
 2001294:	e7003fcc 	andi	fp,fp,255
 2001298:	e700201c 	xori	fp,fp,128
 200129c:	e73fe004 	addi	fp,fp,-128
 20012a0:	e0000326 	beq	fp,zero,20012b0 <___vfprintf_internal_r+0x790>
 20012a4:	d8c02917 	ldw	r3,164(sp)
 20012a8:	18c00044 	addi	r3,r3,1
 20012ac:	d8c02915 	stw	r3,164(sp)
 20012b0:	90c0008c 	andi	r3,r18,2
 20012b4:	d8c02c15 	stw	r3,176(sp)
 20012b8:	18000326 	beq	r3,zero,20012c8 <___vfprintf_internal_r+0x7a8>
 20012bc:	d8c02917 	ldw	r3,164(sp)
 20012c0:	18c00084 	addi	r3,r3,2
 20012c4:	d8c02915 	stw	r3,164(sp)
 20012c8:	90c0210c 	andi	r3,r18,132
 20012cc:	d8c03015 	stw	r3,192(sp)
 20012d0:	1801c51e 	bne	r3,zero,20019e8 <___vfprintf_internal_r+0xec8>
 20012d4:	d9003117 	ldw	r4,196(sp)
 20012d8:	d8c02917 	ldw	r3,164(sp)
 20012dc:	20e7c83a 	sub	r19,r4,r3
 20012e0:	04c1c10e 	bge	zero,r19,20019e8 <___vfprintf_internal_r+0xec8>
 20012e4:	02400404 	movi	r9,16
 20012e8:	d8c02017 	ldw	r3,128(sp)
 20012ec:	d8801f17 	ldw	r2,124(sp)
 20012f0:	4cc52f0e 	bge	r9,r19,20027b0 <___vfprintf_internal_r+0x1c90>
 20012f4:	014080b4 	movhi	r5,514
 20012f8:	29635784 	addi	r5,r5,-29346
 20012fc:	dc403b15 	stw	r17,236(sp)
 2001300:	d9403515 	stw	r5,212(sp)
 2001304:	9823883a 	mov	r17,r19
 2001308:	482d883a 	mov	r22,r9
 200130c:	9027883a 	mov	r19,r18
 2001310:	070001c4 	movi	fp,7
 2001314:	8025883a 	mov	r18,r16
 2001318:	dc002d17 	ldw	r16,180(sp)
 200131c:	00000306 	br	200132c <___vfprintf_internal_r+0x80c>
 2001320:	8c7ffc04 	addi	r17,r17,-16
 2001324:	42000204 	addi	r8,r8,8
 2001328:	b440130e 	bge	r22,r17,2001378 <___vfprintf_internal_r+0x858>
 200132c:	010080b4 	movhi	r4,514
 2001330:	18c00404 	addi	r3,r3,16
 2001334:	10800044 	addi	r2,r2,1
 2001338:	21235784 	addi	r4,r4,-29346
 200133c:	41000015 	stw	r4,0(r8)
 2001340:	45800115 	stw	r22,4(r8)
 2001344:	d8c02015 	stw	r3,128(sp)
 2001348:	d8801f15 	stw	r2,124(sp)
 200134c:	e0bff40e 	bge	fp,r2,2001320 <___vfprintf_internal_r+0x800>
 2001350:	d9801e04 	addi	r6,sp,120
 2001354:	b80b883a 	mov	r5,r23
 2001358:	8009883a 	mov	r4,r16
 200135c:	20083000 	call	2008300 <__sprint_r>
 2001360:	103ef31e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001364:	8c7ffc04 	addi	r17,r17,-16
 2001368:	d8c02017 	ldw	r3,128(sp)
 200136c:	d8801f17 	ldw	r2,124(sp)
 2001370:	da000404 	addi	r8,sp,16
 2001374:	b47fed16 	blt	r22,r17,200132c <___vfprintf_internal_r+0x80c>
 2001378:	9021883a 	mov	r16,r18
 200137c:	9825883a 	mov	r18,r19
 2001380:	8827883a 	mov	r19,r17
 2001384:	dc403b17 	ldw	r17,236(sp)
 2001388:	d9403517 	ldw	r5,212(sp)
 200138c:	98c7883a 	add	r3,r19,r3
 2001390:	10800044 	addi	r2,r2,1
 2001394:	41400015 	stw	r5,0(r8)
 2001398:	44c00115 	stw	r19,4(r8)
 200139c:	d8c02015 	stw	r3,128(sp)
 20013a0:	d8801f15 	stw	r2,124(sp)
 20013a4:	010001c4 	movi	r4,7
 20013a8:	2082c516 	blt	r4,r2,2001ec0 <___vfprintf_internal_r+0x13a0>
 20013ac:	df002787 	ldb	fp,158(sp)
 20013b0:	42000204 	addi	r8,r8,8
 20013b4:	e0000c26 	beq	fp,zero,20013e8 <___vfprintf_internal_r+0x8c8>
 20013b8:	d8801f17 	ldw	r2,124(sp)
 20013bc:	d9002784 	addi	r4,sp,158
 20013c0:	18c00044 	addi	r3,r3,1
 20013c4:	10800044 	addi	r2,r2,1
 20013c8:	41000015 	stw	r4,0(r8)
 20013cc:	01000044 	movi	r4,1
 20013d0:	41000115 	stw	r4,4(r8)
 20013d4:	d8c02015 	stw	r3,128(sp)
 20013d8:	d8801f15 	stw	r2,124(sp)
 20013dc:	010001c4 	movi	r4,7
 20013e0:	20825e16 	blt	r4,r2,2001d5c <___vfprintf_internal_r+0x123c>
 20013e4:	42000204 	addi	r8,r8,8
 20013e8:	d8802c17 	ldw	r2,176(sp)
 20013ec:	10000c26 	beq	r2,zero,2001420 <___vfprintf_internal_r+0x900>
 20013f0:	d8801f17 	ldw	r2,124(sp)
 20013f4:	d9002704 	addi	r4,sp,156
 20013f8:	18c00084 	addi	r3,r3,2
 20013fc:	10800044 	addi	r2,r2,1
 2001400:	41000015 	stw	r4,0(r8)
 2001404:	01000084 	movi	r4,2
 2001408:	41000115 	stw	r4,4(r8)
 200140c:	d8c02015 	stw	r3,128(sp)
 2001410:	d8801f15 	stw	r2,124(sp)
 2001414:	010001c4 	movi	r4,7
 2001418:	20825816 	blt	r4,r2,2001d7c <___vfprintf_internal_r+0x125c>
 200141c:	42000204 	addi	r8,r8,8
 2001420:	d9003017 	ldw	r4,192(sp)
 2001424:	00802004 	movi	r2,128
 2001428:	2081bb26 	beq	r4,r2,2001b18 <___vfprintf_internal_r+0xff8>
 200142c:	d9402a17 	ldw	r5,168(sp)
 2001430:	d8802b17 	ldw	r2,172(sp)
 2001434:	28adc83a 	sub	r22,r5,r2
 2001438:	0580310e 	bge	zero,r22,2001500 <___vfprintf_internal_r+0x9e0>
 200143c:	07000404 	movi	fp,16
 2001440:	d8801f17 	ldw	r2,124(sp)
 2001444:	e584360e 	bge	fp,r22,2002520 <___vfprintf_internal_r+0x1a00>
 2001448:	014080b4 	movhi	r5,514
 200144c:	29635384 	addi	r5,r5,-29362
 2001450:	dc402a15 	stw	r17,168(sp)
 2001454:	d9402c15 	stw	r5,176(sp)
 2001458:	b023883a 	mov	r17,r22
 200145c:	04c001c4 	movi	r19,7
 2001460:	a82d883a 	mov	r22,r21
 2001464:	902b883a 	mov	r21,r18
 2001468:	8025883a 	mov	r18,r16
 200146c:	dc002d17 	ldw	r16,180(sp)
 2001470:	00000306 	br	2001480 <___vfprintf_internal_r+0x960>
 2001474:	8c7ffc04 	addi	r17,r17,-16
 2001478:	42000204 	addi	r8,r8,8
 200147c:	e440110e 	bge	fp,r17,20014c4 <___vfprintf_internal_r+0x9a4>
 2001480:	18c00404 	addi	r3,r3,16
 2001484:	10800044 	addi	r2,r2,1
 2001488:	45000015 	stw	r20,0(r8)
 200148c:	47000115 	stw	fp,4(r8)
 2001490:	d8c02015 	stw	r3,128(sp)
 2001494:	d8801f15 	stw	r2,124(sp)
 2001498:	98bff60e 	bge	r19,r2,2001474 <___vfprintf_internal_r+0x954>
 200149c:	d9801e04 	addi	r6,sp,120
 20014a0:	b80b883a 	mov	r5,r23
 20014a4:	8009883a 	mov	r4,r16
 20014a8:	20083000 	call	2008300 <__sprint_r>
 20014ac:	103ea01e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20014b0:	8c7ffc04 	addi	r17,r17,-16
 20014b4:	d8c02017 	ldw	r3,128(sp)
 20014b8:	d8801f17 	ldw	r2,124(sp)
 20014bc:	da000404 	addi	r8,sp,16
 20014c0:	e47fef16 	blt	fp,r17,2001480 <___vfprintf_internal_r+0x960>
 20014c4:	9021883a 	mov	r16,r18
 20014c8:	a825883a 	mov	r18,r21
 20014cc:	b02b883a 	mov	r21,r22
 20014d0:	882d883a 	mov	r22,r17
 20014d4:	dc402a17 	ldw	r17,168(sp)
 20014d8:	d9002c17 	ldw	r4,176(sp)
 20014dc:	1d87883a 	add	r3,r3,r22
 20014e0:	10800044 	addi	r2,r2,1
 20014e4:	41000015 	stw	r4,0(r8)
 20014e8:	45800115 	stw	r22,4(r8)
 20014ec:	d8c02015 	stw	r3,128(sp)
 20014f0:	d8801f15 	stw	r2,124(sp)
 20014f4:	010001c4 	movi	r4,7
 20014f8:	20821016 	blt	r4,r2,2001d3c <___vfprintf_internal_r+0x121c>
 20014fc:	42000204 	addi	r8,r8,8
 2001500:	9080400c 	andi	r2,r18,256
 2001504:	10013a1e 	bne	r2,zero,20019f0 <___vfprintf_internal_r+0xed0>
 2001508:	d9402b17 	ldw	r5,172(sp)
 200150c:	d8801f17 	ldw	r2,124(sp)
 2001510:	44000015 	stw	r16,0(r8)
 2001514:	1947883a 	add	r3,r3,r5
 2001518:	10800044 	addi	r2,r2,1
 200151c:	41400115 	stw	r5,4(r8)
 2001520:	d8c02015 	stw	r3,128(sp)
 2001524:	d8801f15 	stw	r2,124(sp)
 2001528:	010001c4 	movi	r4,7
 200152c:	2081f516 	blt	r4,r2,2001d04 <___vfprintf_internal_r+0x11e4>
 2001530:	42000204 	addi	r8,r8,8
 2001534:	9480010c 	andi	r18,r18,4
 2001538:	90003226 	beq	r18,zero,2001604 <___vfprintf_internal_r+0xae4>
 200153c:	d9403117 	ldw	r5,196(sp)
 2001540:	d8802917 	ldw	r2,164(sp)
 2001544:	28a1c83a 	sub	r16,r5,r2
 2001548:	04002e0e 	bge	zero,r16,2001604 <___vfprintf_internal_r+0xae4>
 200154c:	04400404 	movi	r17,16
 2001550:	d8801f17 	ldw	r2,124(sp)
 2001554:	8c04c40e 	bge	r17,r16,2002868 <___vfprintf_internal_r+0x1d48>
 2001558:	014080b4 	movhi	r5,514
 200155c:	29635784 	addi	r5,r5,-29346
 2001560:	d9403515 	stw	r5,212(sp)
 2001564:	048001c4 	movi	r18,7
 2001568:	dcc02d17 	ldw	r19,180(sp)
 200156c:	00000306 	br	200157c <___vfprintf_internal_r+0xa5c>
 2001570:	843ffc04 	addi	r16,r16,-16
 2001574:	42000204 	addi	r8,r8,8
 2001578:	8c00130e 	bge	r17,r16,20015c8 <___vfprintf_internal_r+0xaa8>
 200157c:	010080b4 	movhi	r4,514
 2001580:	18c00404 	addi	r3,r3,16
 2001584:	10800044 	addi	r2,r2,1
 2001588:	21235784 	addi	r4,r4,-29346
 200158c:	41000015 	stw	r4,0(r8)
 2001590:	44400115 	stw	r17,4(r8)
 2001594:	d8c02015 	stw	r3,128(sp)
 2001598:	d8801f15 	stw	r2,124(sp)
 200159c:	90bff40e 	bge	r18,r2,2001570 <___vfprintf_internal_r+0xa50>
 20015a0:	d9801e04 	addi	r6,sp,120
 20015a4:	b80b883a 	mov	r5,r23
 20015a8:	9809883a 	mov	r4,r19
 20015ac:	20083000 	call	2008300 <__sprint_r>
 20015b0:	103e5f1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20015b4:	843ffc04 	addi	r16,r16,-16
 20015b8:	d8c02017 	ldw	r3,128(sp)
 20015bc:	d8801f17 	ldw	r2,124(sp)
 20015c0:	da000404 	addi	r8,sp,16
 20015c4:	8c3fed16 	blt	r17,r16,200157c <___vfprintf_internal_r+0xa5c>
 20015c8:	d9403517 	ldw	r5,212(sp)
 20015cc:	1c07883a 	add	r3,r3,r16
 20015d0:	10800044 	addi	r2,r2,1
 20015d4:	41400015 	stw	r5,0(r8)
 20015d8:	44000115 	stw	r16,4(r8)
 20015dc:	d8c02015 	stw	r3,128(sp)
 20015e0:	d8801f15 	stw	r2,124(sp)
 20015e4:	010001c4 	movi	r4,7
 20015e8:	2080060e 	bge	r4,r2,2001604 <___vfprintf_internal_r+0xae4>
 20015ec:	d9002d17 	ldw	r4,180(sp)
 20015f0:	d9801e04 	addi	r6,sp,120
 20015f4:	b80b883a 	mov	r5,r23
 20015f8:	20083000 	call	2008300 <__sprint_r>
 20015fc:	103e4c1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001600:	d8c02017 	ldw	r3,128(sp)
 2001604:	d8803117 	ldw	r2,196(sp)
 2001608:	d9002917 	ldw	r4,164(sp)
 200160c:	1100010e 	bge	r2,r4,2001614 <___vfprintf_internal_r+0xaf4>
 2001610:	2005883a 	mov	r2,r4
 2001614:	d9402f17 	ldw	r5,188(sp)
 2001618:	288b883a 	add	r5,r5,r2
 200161c:	d9402f15 	stw	r5,188(sp)
 2001620:	1801c01e 	bne	r3,zero,2001d24 <___vfprintf_internal_r+0x1204>
 2001624:	a8800007 	ldb	r2,0(r21)
 2001628:	d8001f15 	stw	zero,124(sp)
 200162c:	da000404 	addi	r8,sp,16
 2001630:	103d751e 	bne	r2,zero,2000c08 <___vfprintf_internal_r+0xe8>
 2001634:	a823883a 	mov	r17,r21
 2001638:	003d8b06 	br	2000c68 <___vfprintf_internal_r+0x148>
 200163c:	8025883a 	mov	r18,r16
 2001640:	dc002903 	ldbu	r16,164(sp)
 2001644:	e011883a 	mov	r8,fp
 2001648:	84003fcc 	andi	r16,r16,255
 200164c:	8005e51e 	bne	r16,zero,2002de4 <___vfprintf_internal_r+0x22c4>
 2001650:	94800414 	ori	r18,r18,16
 2001654:	9080080c 	andi	r2,r18,32
 2001658:	10022b26 	beq	r2,zero,2001f08 <___vfprintf_internal_r+0x13e8>
 200165c:	d9002e17 	ldw	r4,184(sp)
 2001660:	d9402a17 	ldw	r5,168(sp)
 2001664:	d8002785 	stb	zero,158(sp)
 2001668:	20c00204 	addi	r3,r4,8
 200166c:	24c00017 	ldw	r19,0(r4)
 2001670:	25800117 	ldw	r22,4(r4)
 2001674:	28042e16 	blt	r5,zero,2002730 <___vfprintf_internal_r+0x1c10>
 2001678:	013fdfc4 	movi	r4,-129
 200167c:	9d84b03a 	or	r2,r19,r22
 2001680:	d8c02e15 	stw	r3,184(sp)
 2001684:	9124703a 	and	r18,r18,r4
 2001688:	0039883a 	mov	fp,zero
 200168c:	103e801e 	bne	r2,zero,2001090 <___vfprintf_internal_r+0x570>
 2001690:	d9002a17 	ldw	r4,168(sp)
 2001694:	2002e01e 	bne	r4,zero,2002218 <___vfprintf_internal_r+0x16f8>
 2001698:	d8002a15 	stw	zero,168(sp)
 200169c:	d8002b15 	stw	zero,172(sp)
 20016a0:	dc001e04 	addi	r16,sp,120
 20016a4:	003ef506 	br	200127c <___vfprintf_internal_r+0x75c>
 20016a8:	8025883a 	mov	r18,r16
 20016ac:	dc002903 	ldbu	r16,164(sp)
 20016b0:	e011883a 	mov	r8,fp
 20016b4:	84003fcc 	andi	r16,r16,255
 20016b8:	8005ba1e 	bne	r16,zero,2002da4 <___vfprintf_internal_r+0x2284>
 20016bc:	010080b4 	movhi	r4,514
 20016c0:	21234704 	addi	r4,r4,-29412
 20016c4:	d9003915 	stw	r4,228(sp)
 20016c8:	9080080c 	andi	r2,r18,32
 20016cc:	10006126 	beq	r2,zero,2001854 <___vfprintf_internal_r+0xd34>
 20016d0:	d9402e17 	ldw	r5,184(sp)
 20016d4:	2cc00017 	ldw	r19,0(r5)
 20016d8:	2d800117 	ldw	r22,4(r5)
 20016dc:	29400204 	addi	r5,r5,8
 20016e0:	d9402e15 	stw	r5,184(sp)
 20016e4:	9080004c 	andi	r2,r18,1
 20016e8:	1001ac26 	beq	r2,zero,2001d9c <___vfprintf_internal_r+0x127c>
 20016ec:	9d84b03a 	or	r2,r19,r22
 20016f0:	10038526 	beq	r2,zero,2002508 <___vfprintf_internal_r+0x19e8>
 20016f4:	d8c02a17 	ldw	r3,168(sp)
 20016f8:	00800c04 	movi	r2,48
 20016fc:	d8802705 	stb	r2,156(sp)
 2001700:	dc402745 	stb	r17,157(sp)
 2001704:	d8002785 	stb	zero,158(sp)
 2001708:	90800094 	ori	r2,r18,2
 200170c:	18047916 	blt	r3,zero,20028f4 <___vfprintf_internal_r+0x1dd4>
 2001710:	00bfdfc4 	movi	r2,-129
 2001714:	90a4703a 	and	r18,r18,r2
 2001718:	94800094 	ori	r18,r18,2
 200171c:	0039883a 	mov	fp,zero
 2001720:	d9003917 	ldw	r4,228(sp)
 2001724:	dc001e04 	addi	r16,sp,120
 2001728:	988003cc 	andi	r2,r19,15
 200172c:	b006973a 	slli	r3,r22,28
 2001730:	2085883a 	add	r2,r4,r2
 2001734:	9826d13a 	srli	r19,r19,4
 2001738:	10800003 	ldbu	r2,0(r2)
 200173c:	b02cd13a 	srli	r22,r22,4
 2001740:	843fffc4 	addi	r16,r16,-1
 2001744:	1ce6b03a 	or	r19,r3,r19
 2001748:	80800005 	stb	r2,0(r16)
 200174c:	9d84b03a 	or	r2,r19,r22
 2001750:	103ff51e 	bne	r2,zero,2001728 <___vfprintf_internal_r+0xc08>
 2001754:	d8c02817 	ldw	r3,160(sp)
 2001758:	1c07c83a 	sub	r3,r3,r16
 200175c:	d8c02b15 	stw	r3,172(sp)
 2001760:	003ec606 	br	200127c <___vfprintf_internal_r+0x75c>
 2001764:	8025883a 	mov	r18,r16
 2001768:	dc002903 	ldbu	r16,164(sp)
 200176c:	e011883a 	mov	r8,fp
 2001770:	84003fcc 	andi	r16,r16,255
 2001774:	803e9626 	beq	r16,zero,20011d0 <___vfprintf_internal_r+0x6b0>
 2001778:	d8c02b03 	ldbu	r3,172(sp)
 200177c:	d8c02785 	stb	r3,158(sp)
 2001780:	003e9306 	br	20011d0 <___vfprintf_internal_r+0x6b0>
 2001784:	00c00044 	movi	r3,1
 2001788:	d8c02905 	stb	r3,164(sp)
 200178c:	00c00ac4 	movi	r3,43
 2001790:	d8c02b05 	stb	r3,172(sp)
 2001794:	ac400007 	ldb	r17,0(r21)
 2001798:	003d4306 	br	2000ca8 <___vfprintf_internal_r+0x188>
 200179c:	84000814 	ori	r16,r16,32
 20017a0:	ac400007 	ldb	r17,0(r21)
 20017a4:	003d4006 	br	2000ca8 <___vfprintf_internal_r+0x188>
 20017a8:	d8802e17 	ldw	r2,184(sp)
 20017ac:	8025883a 	mov	r18,r16
 20017b0:	d8002785 	stb	zero,158(sp)
 20017b4:	14000017 	ldw	r16,0(r2)
 20017b8:	e011883a 	mov	r8,fp
 20017bc:	14c00104 	addi	r19,r2,4
 20017c0:	80042d26 	beq	r16,zero,2002878 <___vfprintf_internal_r+0x1d58>
 20017c4:	d8c02a17 	ldw	r3,168(sp)
 20017c8:	1803e416 	blt	r3,zero,200275c <___vfprintf_internal_r+0x1c3c>
 20017cc:	180d883a 	mov	r6,r3
 20017d0:	000b883a 	mov	r5,zero
 20017d4:	8009883a 	mov	r4,r16
 20017d8:	df003d15 	stw	fp,244(sp)
 20017dc:	20064580 	call	2006458 <memchr>
 20017e0:	da003d17 	ldw	r8,244(sp)
 20017e4:	10046826 	beq	r2,zero,2002988 <___vfprintf_internal_r+0x1e68>
 20017e8:	1405c83a 	sub	r2,r2,r16
 20017ec:	d8802b15 	stw	r2,172(sp)
 20017f0:	1003e016 	blt	r2,zero,2002774 <___vfprintf_internal_r+0x1c54>
 20017f4:	df002783 	ldbu	fp,158(sp)
 20017f8:	d8802915 	stw	r2,164(sp)
 20017fc:	dcc02e15 	stw	r19,184(sp)
 2001800:	d8002a15 	stw	zero,168(sp)
 2001804:	d8003215 	stw	zero,200(sp)
 2001808:	003ea206 	br	2001294 <___vfprintf_internal_r+0x774>
 200180c:	8025883a 	mov	r18,r16
 2001810:	dc002903 	ldbu	r16,164(sp)
 2001814:	e011883a 	mov	r8,fp
 2001818:	84003fcc 	andi	r16,r16,255
 200181c:	803f8d26 	beq	r16,zero,2001654 <___vfprintf_internal_r+0xb34>
 2001820:	d8c02b03 	ldbu	r3,172(sp)
 2001824:	d8c02785 	stb	r3,158(sp)
 2001828:	003f8a06 	br	2001654 <___vfprintf_internal_r+0xb34>
 200182c:	8025883a 	mov	r18,r16
 2001830:	dc002903 	ldbu	r16,164(sp)
 2001834:	e011883a 	mov	r8,fp
 2001838:	84003fcc 	andi	r16,r16,255
 200183c:	8005661e 	bne	r16,zero,2002dd8 <___vfprintf_internal_r+0x22b8>
 2001840:	010080b4 	movhi	r4,514
 2001844:	21234c04 	addi	r4,r4,-29392
 2001848:	d9003915 	stw	r4,228(sp)
 200184c:	9080080c 	andi	r2,r18,32
 2001850:	103f9f1e 	bne	r2,zero,20016d0 <___vfprintf_internal_r+0xbb0>
 2001854:	9080040c 	andi	r2,r18,16
 2001858:	1002eb26 	beq	r2,zero,2002408 <___vfprintf_internal_r+0x18e8>
 200185c:	d8802e17 	ldw	r2,184(sp)
 2001860:	002d883a 	mov	r22,zero
 2001864:	14c00017 	ldw	r19,0(r2)
 2001868:	10800104 	addi	r2,r2,4
 200186c:	d8802e15 	stw	r2,184(sp)
 2001870:	003f9c06 	br	20016e4 <___vfprintf_internal_r+0xbc4>
 2001874:	d8802b07 	ldb	r2,172(sp)
 2001878:	1002e11e 	bne	r2,zero,2002400 <___vfprintf_internal_r+0x18e0>
 200187c:	00c00044 	movi	r3,1
 2001880:	d8c02905 	stb	r3,164(sp)
 2001884:	00c00804 	movi	r3,32
 2001888:	d8c02b05 	stb	r3,172(sp)
 200188c:	ac400007 	ldb	r17,0(r21)
 2001890:	003d0506 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2001894:	84000054 	ori	r16,r16,1
 2001898:	ac400007 	ldb	r17,0(r21)
 200189c:	003d0206 	br	2000ca8 <___vfprintf_internal_r+0x188>
 20018a0:	8025883a 	mov	r18,r16
 20018a4:	dc002903 	ldbu	r16,164(sp)
 20018a8:	e011883a 	mov	r8,fp
 20018ac:	84003fcc 	andi	r16,r16,255
 20018b0:	803de726 	beq	r16,zero,2001050 <___vfprintf_internal_r+0x530>
 20018b4:	d8c02b03 	ldbu	r3,172(sp)
 20018b8:	d8c02785 	stb	r3,158(sp)
 20018bc:	003de406 	br	2001050 <___vfprintf_internal_r+0x530>
 20018c0:	84001014 	ori	r16,r16,64
 20018c4:	ac400007 	ldb	r17,0(r21)
 20018c8:	003cf706 	br	2000ca8 <___vfprintf_internal_r+0x188>
 20018cc:	ac400007 	ldb	r17,0(r21)
 20018d0:	00801b04 	movi	r2,108
 20018d4:	88838f26 	beq	r17,r2,2002714 <___vfprintf_internal_r+0x1bf4>
 20018d8:	84000414 	ori	r16,r16,16
 20018dc:	003cf206 	br	2000ca8 <___vfprintf_internal_r+0x188>
 20018e0:	8025883a 	mov	r18,r16
 20018e4:	dc002903 	ldbu	r16,164(sp)
 20018e8:	e011883a 	mov	r8,fp
 20018ec:	84003fcc 	andi	r16,r16,255
 20018f0:	80053f1e 	bne	r16,zero,2002df0 <___vfprintf_internal_r+0x22d0>
 20018f4:	9080080c 	andi	r2,r18,32
 20018f8:	1002d226 	beq	r2,zero,2002444 <___vfprintf_internal_r+0x1924>
 20018fc:	d9002e17 	ldw	r4,184(sp)
 2001900:	d9402f17 	ldw	r5,188(sp)
 2001904:	20800017 	ldw	r2,0(r4)
 2001908:	2807d7fa 	srai	r3,r5,31
 200190c:	21000104 	addi	r4,r4,4
 2001910:	d9002e15 	stw	r4,184(sp)
 2001914:	11400015 	stw	r5,0(r2)
 2001918:	10c00115 	stw	r3,4(r2)
 200191c:	003cb806 	br	2000c00 <___vfprintf_internal_r+0xe0>
 2001920:	d8c02e17 	ldw	r3,184(sp)
 2001924:	d9002e17 	ldw	r4,184(sp)
 2001928:	8025883a 	mov	r18,r16
 200192c:	18800017 	ldw	r2,0(r3)
 2001930:	21000104 	addi	r4,r4,4
 2001934:	00c00044 	movi	r3,1
 2001938:	e011883a 	mov	r8,fp
 200193c:	d8c02915 	stw	r3,164(sp)
 2001940:	d8002785 	stb	zero,158(sp)
 2001944:	d8801405 	stb	r2,80(sp)
 2001948:	d9002e15 	stw	r4,184(sp)
 200194c:	d8c02b15 	stw	r3,172(sp)
 2001950:	d8002a15 	stw	zero,168(sp)
 2001954:	d8003215 	stw	zero,200(sp)
 2001958:	dc001404 	addi	r16,sp,80
 200195c:	0039883a 	mov	fp,zero
 2001960:	003e5306 	br	20012b0 <___vfprintf_internal_r+0x790>
 2001964:	010080b4 	movhi	r4,514
 2001968:	21234c04 	addi	r4,r4,-29392
 200196c:	0039883a 	mov	fp,zero
 2001970:	d9003915 	stw	r4,228(sp)
 2001974:	04401e04 	movi	r17,120
 2001978:	003f6906 	br	2001720 <___vfprintf_internal_r+0xc00>
 200197c:	8025883a 	mov	r18,r16
 2001980:	dc002903 	ldbu	r16,164(sp)
 2001984:	e011883a 	mov	r8,fp
 2001988:	84003fcc 	andi	r16,r16,255
 200198c:	8005081e 	bne	r16,zero,2002db0 <___vfprintf_internal_r+0x2290>
 2001990:	883d6126 	beq	r17,zero,2000f18 <___vfprintf_internal_r+0x3f8>
 2001994:	00c00044 	movi	r3,1
 2001998:	d8c02915 	stw	r3,164(sp)
 200199c:	dc401405 	stb	r17,80(sp)
 20019a0:	d8002785 	stb	zero,158(sp)
 20019a4:	003fe906 	br	200194c <___vfprintf_internal_r+0xe2c>
 20019a8:	014080b4 	movhi	r5,514
 20019ac:	29634c04 	addi	r5,r5,-29392
 20019b0:	d9403915 	stw	r5,228(sp)
 20019b4:	d8c02e15 	stw	r3,184(sp)
 20019b8:	1025883a 	mov	r18,r2
 20019bc:	04401e04 	movi	r17,120
 20019c0:	9d84b03a 	or	r2,r19,r22
 20019c4:	1000fc1e 	bne	r2,zero,2001db8 <___vfprintf_internal_r+0x1298>
 20019c8:	0039883a 	mov	fp,zero
 20019cc:	00800084 	movi	r2,2
 20019d0:	10803fcc 	andi	r2,r2,255
 20019d4:	00c00044 	movi	r3,1
 20019d8:	10c20f26 	beq	r2,r3,2002218 <___vfprintf_internal_r+0x16f8>
 20019dc:	00c00084 	movi	r3,2
 20019e0:	10fd3326 	beq	r2,r3,2000eb0 <___vfprintf_internal_r+0x390>
 20019e4:	003e0b06 	br	2001214 <___vfprintf_internal_r+0x6f4>
 20019e8:	d8c02017 	ldw	r3,128(sp)
 20019ec:	003e7106 	br	20013b4 <___vfprintf_internal_r+0x894>
 20019f0:	00801944 	movi	r2,101
 20019f4:	14407e0e 	bge	r2,r17,2001bf0 <___vfprintf_internal_r+0x10d0>
 20019f8:	d9003617 	ldw	r4,216(sp)
 20019fc:	d9403817 	ldw	r5,224(sp)
 2001a00:	000d883a 	mov	r6,zero
 2001a04:	000f883a 	mov	r7,zero
 2001a08:	d8c03c15 	stw	r3,240(sp)
 2001a0c:	da003d15 	stw	r8,244(sp)
 2001a10:	200c2600 	call	200c260 <__eqdf2>
 2001a14:	d8c03c17 	ldw	r3,240(sp)
 2001a18:	da003d17 	ldw	r8,244(sp)
 2001a1c:	1000f71e 	bne	r2,zero,2001dfc <___vfprintf_internal_r+0x12dc>
 2001a20:	d8801f17 	ldw	r2,124(sp)
 2001a24:	010080b4 	movhi	r4,514
 2001a28:	21235304 	addi	r4,r4,-29364
 2001a2c:	18c00044 	addi	r3,r3,1
 2001a30:	10800044 	addi	r2,r2,1
 2001a34:	41000015 	stw	r4,0(r8)
 2001a38:	01000044 	movi	r4,1
 2001a3c:	41000115 	stw	r4,4(r8)
 2001a40:	d8c02015 	stw	r3,128(sp)
 2001a44:	d8801f15 	stw	r2,124(sp)
 2001a48:	010001c4 	movi	r4,7
 2001a4c:	2082b816 	blt	r4,r2,2002530 <___vfprintf_internal_r+0x1a10>
 2001a50:	42000204 	addi	r8,r8,8
 2001a54:	d8802617 	ldw	r2,152(sp)
 2001a58:	d9403317 	ldw	r5,204(sp)
 2001a5c:	11400216 	blt	r2,r5,2001a68 <___vfprintf_internal_r+0xf48>
 2001a60:	9080004c 	andi	r2,r18,1
 2001a64:	103eb326 	beq	r2,zero,2001534 <___vfprintf_internal_r+0xa14>
 2001a68:	d8803717 	ldw	r2,220(sp)
 2001a6c:	d9003417 	ldw	r4,208(sp)
 2001a70:	d9403717 	ldw	r5,220(sp)
 2001a74:	1887883a 	add	r3,r3,r2
 2001a78:	d8801f17 	ldw	r2,124(sp)
 2001a7c:	41000015 	stw	r4,0(r8)
 2001a80:	41400115 	stw	r5,4(r8)
 2001a84:	10800044 	addi	r2,r2,1
 2001a88:	d8c02015 	stw	r3,128(sp)
 2001a8c:	d8801f15 	stw	r2,124(sp)
 2001a90:	010001c4 	movi	r4,7
 2001a94:	20832916 	blt	r4,r2,200273c <___vfprintf_internal_r+0x1c1c>
 2001a98:	42000204 	addi	r8,r8,8
 2001a9c:	d8803317 	ldw	r2,204(sp)
 2001aa0:	143fffc4 	addi	r16,r2,-1
 2001aa4:	043ea30e 	bge	zero,r16,2001534 <___vfprintf_internal_r+0xa14>
 2001aa8:	04400404 	movi	r17,16
 2001aac:	d8801f17 	ldw	r2,124(sp)
 2001ab0:	8c00880e 	bge	r17,r16,2001cd4 <___vfprintf_internal_r+0x11b4>
 2001ab4:	014080b4 	movhi	r5,514
 2001ab8:	29635384 	addi	r5,r5,-29362
 2001abc:	d9402c15 	stw	r5,176(sp)
 2001ac0:	058001c4 	movi	r22,7
 2001ac4:	dcc02d17 	ldw	r19,180(sp)
 2001ac8:	00000306 	br	2001ad8 <___vfprintf_internal_r+0xfb8>
 2001acc:	42000204 	addi	r8,r8,8
 2001ad0:	843ffc04 	addi	r16,r16,-16
 2001ad4:	8c00820e 	bge	r17,r16,2001ce0 <___vfprintf_internal_r+0x11c0>
 2001ad8:	18c00404 	addi	r3,r3,16
 2001adc:	10800044 	addi	r2,r2,1
 2001ae0:	45000015 	stw	r20,0(r8)
 2001ae4:	44400115 	stw	r17,4(r8)
 2001ae8:	d8c02015 	stw	r3,128(sp)
 2001aec:	d8801f15 	stw	r2,124(sp)
 2001af0:	b0bff60e 	bge	r22,r2,2001acc <___vfprintf_internal_r+0xfac>
 2001af4:	d9801e04 	addi	r6,sp,120
 2001af8:	b80b883a 	mov	r5,r23
 2001afc:	9809883a 	mov	r4,r19
 2001b00:	20083000 	call	2008300 <__sprint_r>
 2001b04:	103d0a1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001b08:	d8c02017 	ldw	r3,128(sp)
 2001b0c:	d8801f17 	ldw	r2,124(sp)
 2001b10:	da000404 	addi	r8,sp,16
 2001b14:	003fee06 	br	2001ad0 <___vfprintf_internal_r+0xfb0>
 2001b18:	d9403117 	ldw	r5,196(sp)
 2001b1c:	d8802917 	ldw	r2,164(sp)
 2001b20:	28adc83a 	sub	r22,r5,r2
 2001b24:	05be410e 	bge	zero,r22,200142c <___vfprintf_internal_r+0x90c>
 2001b28:	07000404 	movi	fp,16
 2001b2c:	d8801f17 	ldw	r2,124(sp)
 2001b30:	e5838f0e 	bge	fp,r22,2002970 <___vfprintf_internal_r+0x1e50>
 2001b34:	014080b4 	movhi	r5,514
 2001b38:	29635384 	addi	r5,r5,-29362
 2001b3c:	dc403015 	stw	r17,192(sp)
 2001b40:	d9402c15 	stw	r5,176(sp)
 2001b44:	b023883a 	mov	r17,r22
 2001b48:	04c001c4 	movi	r19,7
 2001b4c:	a82d883a 	mov	r22,r21
 2001b50:	902b883a 	mov	r21,r18
 2001b54:	8025883a 	mov	r18,r16
 2001b58:	dc002d17 	ldw	r16,180(sp)
 2001b5c:	00000306 	br	2001b6c <___vfprintf_internal_r+0x104c>
 2001b60:	8c7ffc04 	addi	r17,r17,-16
 2001b64:	42000204 	addi	r8,r8,8
 2001b68:	e440110e 	bge	fp,r17,2001bb0 <___vfprintf_internal_r+0x1090>
 2001b6c:	18c00404 	addi	r3,r3,16
 2001b70:	10800044 	addi	r2,r2,1
 2001b74:	45000015 	stw	r20,0(r8)
 2001b78:	47000115 	stw	fp,4(r8)
 2001b7c:	d8c02015 	stw	r3,128(sp)
 2001b80:	d8801f15 	stw	r2,124(sp)
 2001b84:	98bff60e 	bge	r19,r2,2001b60 <___vfprintf_internal_r+0x1040>
 2001b88:	d9801e04 	addi	r6,sp,120
 2001b8c:	b80b883a 	mov	r5,r23
 2001b90:	8009883a 	mov	r4,r16
 2001b94:	20083000 	call	2008300 <__sprint_r>
 2001b98:	103ce51e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001b9c:	8c7ffc04 	addi	r17,r17,-16
 2001ba0:	d8c02017 	ldw	r3,128(sp)
 2001ba4:	d8801f17 	ldw	r2,124(sp)
 2001ba8:	da000404 	addi	r8,sp,16
 2001bac:	e47fef16 	blt	fp,r17,2001b6c <___vfprintf_internal_r+0x104c>
 2001bb0:	9021883a 	mov	r16,r18
 2001bb4:	a825883a 	mov	r18,r21
 2001bb8:	b02b883a 	mov	r21,r22
 2001bbc:	882d883a 	mov	r22,r17
 2001bc0:	dc403017 	ldw	r17,192(sp)
 2001bc4:	d9002c17 	ldw	r4,176(sp)
 2001bc8:	1d87883a 	add	r3,r3,r22
 2001bcc:	10800044 	addi	r2,r2,1
 2001bd0:	41000015 	stw	r4,0(r8)
 2001bd4:	45800115 	stw	r22,4(r8)
 2001bd8:	d8c02015 	stw	r3,128(sp)
 2001bdc:	d8801f15 	stw	r2,124(sp)
 2001be0:	010001c4 	movi	r4,7
 2001be4:	20818e16 	blt	r4,r2,2002220 <___vfprintf_internal_r+0x1700>
 2001be8:	42000204 	addi	r8,r8,8
 2001bec:	003e0f06 	br	200142c <___vfprintf_internal_r+0x90c>
 2001bf0:	d9403317 	ldw	r5,204(sp)
 2001bf4:	00800044 	movi	r2,1
 2001bf8:	18c00044 	addi	r3,r3,1
 2001bfc:	1141530e 	bge	r2,r5,200214c <___vfprintf_internal_r+0x162c>
 2001c00:	dc401f17 	ldw	r17,124(sp)
 2001c04:	00800044 	movi	r2,1
 2001c08:	40800115 	stw	r2,4(r8)
 2001c0c:	8c400044 	addi	r17,r17,1
 2001c10:	44000015 	stw	r16,0(r8)
 2001c14:	d8c02015 	stw	r3,128(sp)
 2001c18:	dc401f15 	stw	r17,124(sp)
 2001c1c:	008001c4 	movi	r2,7
 2001c20:	14416b16 	blt	r2,r17,20021d0 <___vfprintf_internal_r+0x16b0>
 2001c24:	42000204 	addi	r8,r8,8
 2001c28:	d8803717 	ldw	r2,220(sp)
 2001c2c:	d9003417 	ldw	r4,208(sp)
 2001c30:	8c400044 	addi	r17,r17,1
 2001c34:	10c7883a 	add	r3,r2,r3
 2001c38:	40800115 	stw	r2,4(r8)
 2001c3c:	41000015 	stw	r4,0(r8)
 2001c40:	d8c02015 	stw	r3,128(sp)
 2001c44:	dc401f15 	stw	r17,124(sp)
 2001c48:	008001c4 	movi	r2,7
 2001c4c:	14416916 	blt	r2,r17,20021f4 <___vfprintf_internal_r+0x16d4>
 2001c50:	45800204 	addi	r22,r8,8
 2001c54:	d9003617 	ldw	r4,216(sp)
 2001c58:	d9403817 	ldw	r5,224(sp)
 2001c5c:	000d883a 	mov	r6,zero
 2001c60:	000f883a 	mov	r7,zero
 2001c64:	d8c03c15 	stw	r3,240(sp)
 2001c68:	200c2600 	call	200c260 <__eqdf2>
 2001c6c:	d8c03c17 	ldw	r3,240(sp)
 2001c70:	1000bc26 	beq	r2,zero,2001f64 <___vfprintf_internal_r+0x1444>
 2001c74:	d9403317 	ldw	r5,204(sp)
 2001c78:	84000044 	addi	r16,r16,1
 2001c7c:	8c400044 	addi	r17,r17,1
 2001c80:	28bfffc4 	addi	r2,r5,-1
 2001c84:	1887883a 	add	r3,r3,r2
 2001c88:	b0800115 	stw	r2,4(r22)
 2001c8c:	b4000015 	stw	r16,0(r22)
 2001c90:	d8c02015 	stw	r3,128(sp)
 2001c94:	dc401f15 	stw	r17,124(sp)
 2001c98:	008001c4 	movi	r2,7
 2001c9c:	14414316 	blt	r2,r17,20021ac <___vfprintf_internal_r+0x168c>
 2001ca0:	b5800204 	addi	r22,r22,8
 2001ca4:	d9003a17 	ldw	r4,232(sp)
 2001ca8:	df0022c4 	addi	fp,sp,139
 2001cac:	8c400044 	addi	r17,r17,1
 2001cb0:	20c7883a 	add	r3,r4,r3
 2001cb4:	b7000015 	stw	fp,0(r22)
 2001cb8:	b1000115 	stw	r4,4(r22)
 2001cbc:	d8c02015 	stw	r3,128(sp)
 2001cc0:	dc401f15 	stw	r17,124(sp)
 2001cc4:	008001c4 	movi	r2,7
 2001cc8:	14400e16 	blt	r2,r17,2001d04 <___vfprintf_internal_r+0x11e4>
 2001ccc:	b2000204 	addi	r8,r22,8
 2001cd0:	003e1806 	br	2001534 <___vfprintf_internal_r+0xa14>
 2001cd4:	010080b4 	movhi	r4,514
 2001cd8:	21235384 	addi	r4,r4,-29362
 2001cdc:	d9002c15 	stw	r4,176(sp)
 2001ce0:	d9002c17 	ldw	r4,176(sp)
 2001ce4:	1c07883a 	add	r3,r3,r16
 2001ce8:	44000115 	stw	r16,4(r8)
 2001cec:	41000015 	stw	r4,0(r8)
 2001cf0:	10800044 	addi	r2,r2,1
 2001cf4:	d8c02015 	stw	r3,128(sp)
 2001cf8:	d8801f15 	stw	r2,124(sp)
 2001cfc:	010001c4 	movi	r4,7
 2001d00:	20be0b0e 	bge	r4,r2,2001530 <___vfprintf_internal_r+0xa10>
 2001d04:	d9002d17 	ldw	r4,180(sp)
 2001d08:	d9801e04 	addi	r6,sp,120
 2001d0c:	b80b883a 	mov	r5,r23
 2001d10:	20083000 	call	2008300 <__sprint_r>
 2001d14:	103c861e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001d18:	d8c02017 	ldw	r3,128(sp)
 2001d1c:	da000404 	addi	r8,sp,16
 2001d20:	003e0406 	br	2001534 <___vfprintf_internal_r+0xa14>
 2001d24:	d9002d17 	ldw	r4,180(sp)
 2001d28:	d9801e04 	addi	r6,sp,120
 2001d2c:	b80b883a 	mov	r5,r23
 2001d30:	20083000 	call	2008300 <__sprint_r>
 2001d34:	103e3b26 	beq	r2,zero,2001624 <___vfprintf_internal_r+0xb04>
 2001d38:	003c7d06 	br	2000f30 <___vfprintf_internal_r+0x410>
 2001d3c:	d9002d17 	ldw	r4,180(sp)
 2001d40:	d9801e04 	addi	r6,sp,120
 2001d44:	b80b883a 	mov	r5,r23
 2001d48:	20083000 	call	2008300 <__sprint_r>
 2001d4c:	103c781e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001d50:	d8c02017 	ldw	r3,128(sp)
 2001d54:	da000404 	addi	r8,sp,16
 2001d58:	003de906 	br	2001500 <___vfprintf_internal_r+0x9e0>
 2001d5c:	d9002d17 	ldw	r4,180(sp)
 2001d60:	d9801e04 	addi	r6,sp,120
 2001d64:	b80b883a 	mov	r5,r23
 2001d68:	20083000 	call	2008300 <__sprint_r>
 2001d6c:	103c701e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001d70:	d8c02017 	ldw	r3,128(sp)
 2001d74:	da000404 	addi	r8,sp,16
 2001d78:	003d9b06 	br	20013e8 <___vfprintf_internal_r+0x8c8>
 2001d7c:	d9002d17 	ldw	r4,180(sp)
 2001d80:	d9801e04 	addi	r6,sp,120
 2001d84:	b80b883a 	mov	r5,r23
 2001d88:	20083000 	call	2008300 <__sprint_r>
 2001d8c:	103c681e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001d90:	d8c02017 	ldw	r3,128(sp)
 2001d94:	da000404 	addi	r8,sp,16
 2001d98:	003da106 	br	2001420 <___vfprintf_internal_r+0x900>
 2001d9c:	d9402a17 	ldw	r5,168(sp)
 2001da0:	d8002785 	stb	zero,158(sp)
 2001da4:	283f0616 	blt	r5,zero,20019c0 <___vfprintf_internal_r+0xea0>
 2001da8:	00ffdfc4 	movi	r3,-129
 2001dac:	9d84b03a 	or	r2,r19,r22
 2001db0:	90e4703a 	and	r18,r18,r3
 2001db4:	103c3b26 	beq	r2,zero,2000ea4 <___vfprintf_internal_r+0x384>
 2001db8:	0039883a 	mov	fp,zero
 2001dbc:	003e5806 	br	2001720 <___vfprintf_internal_r+0xc00>
 2001dc0:	9080040c 	andi	r2,r18,16
 2001dc4:	1001b326 	beq	r2,zero,2002494 <___vfprintf_internal_r+0x1974>
 2001dc8:	d8c02e17 	ldw	r3,184(sp)
 2001dcc:	d9002a17 	ldw	r4,168(sp)
 2001dd0:	d8002785 	stb	zero,158(sp)
 2001dd4:	18800104 	addi	r2,r3,4
 2001dd8:	1cc00017 	ldw	r19,0(r3)
 2001ddc:	002d883a 	mov	r22,zero
 2001de0:	2001b516 	blt	r4,zero,20024b8 <___vfprintf_internal_r+0x1998>
 2001de4:	00ffdfc4 	movi	r3,-129
 2001de8:	d8802e15 	stw	r2,184(sp)
 2001dec:	90e4703a 	and	r18,r18,r3
 2001df0:	983d0526 	beq	r19,zero,2001208 <___vfprintf_internal_r+0x6e8>
 2001df4:	0039883a 	mov	fp,zero
 2001df8:	003d0806 	br	200121c <___vfprintf_internal_r+0x6fc>
 2001dfc:	dc402617 	ldw	r17,152(sp)
 2001e00:	0441d30e 	bge	zero,r17,2002550 <___vfprintf_internal_r+0x1a30>
 2001e04:	dc403217 	ldw	r17,200(sp)
 2001e08:	d8803317 	ldw	r2,204(sp)
 2001e0c:	1440010e 	bge	r2,r17,2001e14 <___vfprintf_internal_r+0x12f4>
 2001e10:	1023883a 	mov	r17,r2
 2001e14:	04400a0e 	bge	zero,r17,2001e40 <___vfprintf_internal_r+0x1320>
 2001e18:	d8801f17 	ldw	r2,124(sp)
 2001e1c:	1c47883a 	add	r3,r3,r17
 2001e20:	44000015 	stw	r16,0(r8)
 2001e24:	10800044 	addi	r2,r2,1
 2001e28:	44400115 	stw	r17,4(r8)
 2001e2c:	d8c02015 	stw	r3,128(sp)
 2001e30:	d8801f15 	stw	r2,124(sp)
 2001e34:	010001c4 	movi	r4,7
 2001e38:	20826516 	blt	r4,r2,20027d0 <___vfprintf_internal_r+0x1cb0>
 2001e3c:	42000204 	addi	r8,r8,8
 2001e40:	88026116 	blt	r17,zero,20027c8 <___vfprintf_internal_r+0x1ca8>
 2001e44:	d9003217 	ldw	r4,200(sp)
 2001e48:	2463c83a 	sub	r17,r4,r17
 2001e4c:	04407b0e 	bge	zero,r17,200203c <___vfprintf_internal_r+0x151c>
 2001e50:	05800404 	movi	r22,16
 2001e54:	d8801f17 	ldw	r2,124(sp)
 2001e58:	b4419d0e 	bge	r22,r17,20024d0 <___vfprintf_internal_r+0x19b0>
 2001e5c:	010080b4 	movhi	r4,514
 2001e60:	21235384 	addi	r4,r4,-29362
 2001e64:	d9002c15 	stw	r4,176(sp)
 2001e68:	070001c4 	movi	fp,7
 2001e6c:	dcc02d17 	ldw	r19,180(sp)
 2001e70:	00000306 	br	2001e80 <___vfprintf_internal_r+0x1360>
 2001e74:	42000204 	addi	r8,r8,8
 2001e78:	8c7ffc04 	addi	r17,r17,-16
 2001e7c:	b441970e 	bge	r22,r17,20024dc <___vfprintf_internal_r+0x19bc>
 2001e80:	18c00404 	addi	r3,r3,16
 2001e84:	10800044 	addi	r2,r2,1
 2001e88:	45000015 	stw	r20,0(r8)
 2001e8c:	45800115 	stw	r22,4(r8)
 2001e90:	d8c02015 	stw	r3,128(sp)
 2001e94:	d8801f15 	stw	r2,124(sp)
 2001e98:	e0bff60e 	bge	fp,r2,2001e74 <___vfprintf_internal_r+0x1354>
 2001e9c:	d9801e04 	addi	r6,sp,120
 2001ea0:	b80b883a 	mov	r5,r23
 2001ea4:	9809883a 	mov	r4,r19
 2001ea8:	20083000 	call	2008300 <__sprint_r>
 2001eac:	103c201e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001eb0:	d8c02017 	ldw	r3,128(sp)
 2001eb4:	d8801f17 	ldw	r2,124(sp)
 2001eb8:	da000404 	addi	r8,sp,16
 2001ebc:	003fee06 	br	2001e78 <___vfprintf_internal_r+0x1358>
 2001ec0:	d9002d17 	ldw	r4,180(sp)
 2001ec4:	d9801e04 	addi	r6,sp,120
 2001ec8:	b80b883a 	mov	r5,r23
 2001ecc:	20083000 	call	2008300 <__sprint_r>
 2001ed0:	103c171e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001ed4:	d8c02017 	ldw	r3,128(sp)
 2001ed8:	df002787 	ldb	fp,158(sp)
 2001edc:	da000404 	addi	r8,sp,16
 2001ee0:	003d3406 	br	20013b4 <___vfprintf_internal_r+0x894>
 2001ee4:	9080040c 	andi	r2,r18,16
 2001ee8:	10016126 	beq	r2,zero,2002470 <___vfprintf_internal_r+0x1950>
 2001eec:	d9402e17 	ldw	r5,184(sp)
 2001ef0:	2cc00017 	ldw	r19,0(r5)
 2001ef4:	29400104 	addi	r5,r5,4
 2001ef8:	d9402e15 	stw	r5,184(sp)
 2001efc:	982dd7fa 	srai	r22,r19,31
 2001f00:	b005883a 	mov	r2,r22
 2001f04:	003c5a06 	br	2001070 <___vfprintf_internal_r+0x550>
 2001f08:	9080040c 	andi	r2,r18,16
 2001f0c:	10003526 	beq	r2,zero,2001fe4 <___vfprintf_internal_r+0x14c4>
 2001f10:	d8c02e17 	ldw	r3,184(sp)
 2001f14:	d9002a17 	ldw	r4,168(sp)
 2001f18:	d8002785 	stb	zero,158(sp)
 2001f1c:	18800104 	addi	r2,r3,4
 2001f20:	1cc00017 	ldw	r19,0(r3)
 2001f24:	002d883a 	mov	r22,zero
 2001f28:	20003716 	blt	r4,zero,2002008 <___vfprintf_internal_r+0x14e8>
 2001f2c:	00ffdfc4 	movi	r3,-129
 2001f30:	d8802e15 	stw	r2,184(sp)
 2001f34:	90e4703a 	and	r18,r18,r3
 2001f38:	0039883a 	mov	fp,zero
 2001f3c:	983dd426 	beq	r19,zero,2001690 <___vfprintf_internal_r+0xb70>
 2001f40:	00800244 	movi	r2,9
 2001f44:	14fc5336 	bltu	r2,r19,2001094 <___vfprintf_internal_r+0x574>
 2001f48:	d8c02817 	ldw	r3,160(sp)
 2001f4c:	dc001dc4 	addi	r16,sp,119
 2001f50:	9cc00c04 	addi	r19,r19,48
 2001f54:	1c07c83a 	sub	r3,r3,r16
 2001f58:	dcc01dc5 	stb	r19,119(sp)
 2001f5c:	d8c02b15 	stw	r3,172(sp)
 2001f60:	003cc606 	br	200127c <___vfprintf_internal_r+0x75c>
 2001f64:	d8803317 	ldw	r2,204(sp)
 2001f68:	143fffc4 	addi	r16,r2,-1
 2001f6c:	043f4d0e 	bge	zero,r16,2001ca4 <___vfprintf_internal_r+0x1184>
 2001f70:	07000404 	movi	fp,16
 2001f74:	e400810e 	bge	fp,r16,200217c <___vfprintf_internal_r+0x165c>
 2001f78:	014080b4 	movhi	r5,514
 2001f7c:	29635384 	addi	r5,r5,-29362
 2001f80:	d9402c15 	stw	r5,176(sp)
 2001f84:	01c001c4 	movi	r7,7
 2001f88:	dcc02d17 	ldw	r19,180(sp)
 2001f8c:	00000306 	br	2001f9c <___vfprintf_internal_r+0x147c>
 2001f90:	b5800204 	addi	r22,r22,8
 2001f94:	843ffc04 	addi	r16,r16,-16
 2001f98:	e4007b0e 	bge	fp,r16,2002188 <___vfprintf_internal_r+0x1668>
 2001f9c:	18c00404 	addi	r3,r3,16
 2001fa0:	8c400044 	addi	r17,r17,1
 2001fa4:	b5000015 	stw	r20,0(r22)
 2001fa8:	b7000115 	stw	fp,4(r22)
 2001fac:	d8c02015 	stw	r3,128(sp)
 2001fb0:	dc401f15 	stw	r17,124(sp)
 2001fb4:	3c7ff60e 	bge	r7,r17,2001f90 <___vfprintf_internal_r+0x1470>
 2001fb8:	d9801e04 	addi	r6,sp,120
 2001fbc:	b80b883a 	mov	r5,r23
 2001fc0:	9809883a 	mov	r4,r19
 2001fc4:	d9c03c15 	stw	r7,240(sp)
 2001fc8:	20083000 	call	2008300 <__sprint_r>
 2001fcc:	d9c03c17 	ldw	r7,240(sp)
 2001fd0:	103bd71e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2001fd4:	d8c02017 	ldw	r3,128(sp)
 2001fd8:	dc401f17 	ldw	r17,124(sp)
 2001fdc:	dd800404 	addi	r22,sp,16
 2001fe0:	003fec06 	br	2001f94 <___vfprintf_internal_r+0x1474>
 2001fe4:	9080100c 	andi	r2,r18,64
 2001fe8:	d8002785 	stb	zero,158(sp)
 2001fec:	10010e26 	beq	r2,zero,2002428 <___vfprintf_internal_r+0x1908>
 2001ff0:	d9402e17 	ldw	r5,184(sp)
 2001ff4:	d8c02a17 	ldw	r3,168(sp)
 2001ff8:	002d883a 	mov	r22,zero
 2001ffc:	28800104 	addi	r2,r5,4
 2002000:	2cc0000b 	ldhu	r19,0(r5)
 2002004:	183fc90e 	bge	r3,zero,2001f2c <___vfprintf_internal_r+0x140c>
 2002008:	d8802e15 	stw	r2,184(sp)
 200200c:	0039883a 	mov	fp,zero
 2002010:	9d84b03a 	or	r2,r19,r22
 2002014:	103c1e1e 	bne	r2,zero,2001090 <___vfprintf_internal_r+0x570>
 2002018:	00800044 	movi	r2,1
 200201c:	003e6c06 	br	20019d0 <___vfprintf_internal_r+0xeb0>
 2002020:	d9002d17 	ldw	r4,180(sp)
 2002024:	d9801e04 	addi	r6,sp,120
 2002028:	b80b883a 	mov	r5,r23
 200202c:	20083000 	call	2008300 <__sprint_r>
 2002030:	103bbf1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002034:	d8c02017 	ldw	r3,128(sp)
 2002038:	da000404 	addi	r8,sp,16
 200203c:	d9003217 	ldw	r4,200(sp)
 2002040:	d8802617 	ldw	r2,152(sp)
 2002044:	d9403317 	ldw	r5,204(sp)
 2002048:	8123883a 	add	r17,r16,r4
 200204c:	11400216 	blt	r2,r5,2002058 <___vfprintf_internal_r+0x1538>
 2002050:	9100004c 	andi	r4,r18,1
 2002054:	20000d26 	beq	r4,zero,200208c <___vfprintf_internal_r+0x156c>
 2002058:	d9003717 	ldw	r4,220(sp)
 200205c:	d9403417 	ldw	r5,208(sp)
 2002060:	1907883a 	add	r3,r3,r4
 2002064:	d9001f17 	ldw	r4,124(sp)
 2002068:	41400015 	stw	r5,0(r8)
 200206c:	d9403717 	ldw	r5,220(sp)
 2002070:	21000044 	addi	r4,r4,1
 2002074:	d8c02015 	stw	r3,128(sp)
 2002078:	41400115 	stw	r5,4(r8)
 200207c:	d9001f15 	stw	r4,124(sp)
 2002080:	014001c4 	movi	r5,7
 2002084:	2901e816 	blt	r5,r4,2002828 <___vfprintf_internal_r+0x1d08>
 2002088:	42000204 	addi	r8,r8,8
 200208c:	d9003317 	ldw	r4,204(sp)
 2002090:	8121883a 	add	r16,r16,r4
 2002094:	2085c83a 	sub	r2,r4,r2
 2002098:	8461c83a 	sub	r16,r16,r17
 200209c:	1400010e 	bge	r2,r16,20020a4 <___vfprintf_internal_r+0x1584>
 20020a0:	1021883a 	mov	r16,r2
 20020a4:	04000a0e 	bge	zero,r16,20020d0 <___vfprintf_internal_r+0x15b0>
 20020a8:	d9001f17 	ldw	r4,124(sp)
 20020ac:	1c07883a 	add	r3,r3,r16
 20020b0:	44400015 	stw	r17,0(r8)
 20020b4:	21000044 	addi	r4,r4,1
 20020b8:	44000115 	stw	r16,4(r8)
 20020bc:	d8c02015 	stw	r3,128(sp)
 20020c0:	d9001f15 	stw	r4,124(sp)
 20020c4:	014001c4 	movi	r5,7
 20020c8:	2901fb16 	blt	r5,r4,20028b8 <___vfprintf_internal_r+0x1d98>
 20020cc:	42000204 	addi	r8,r8,8
 20020d0:	8001f716 	blt	r16,zero,20028b0 <___vfprintf_internal_r+0x1d90>
 20020d4:	1421c83a 	sub	r16,r2,r16
 20020d8:	043d160e 	bge	zero,r16,2001534 <___vfprintf_internal_r+0xa14>
 20020dc:	04400404 	movi	r17,16
 20020e0:	d8801f17 	ldw	r2,124(sp)
 20020e4:	8c3efb0e 	bge	r17,r16,2001cd4 <___vfprintf_internal_r+0x11b4>
 20020e8:	014080b4 	movhi	r5,514
 20020ec:	29635384 	addi	r5,r5,-29362
 20020f0:	d9402c15 	stw	r5,176(sp)
 20020f4:	058001c4 	movi	r22,7
 20020f8:	dcc02d17 	ldw	r19,180(sp)
 20020fc:	00000306 	br	200210c <___vfprintf_internal_r+0x15ec>
 2002100:	42000204 	addi	r8,r8,8
 2002104:	843ffc04 	addi	r16,r16,-16
 2002108:	8c3ef50e 	bge	r17,r16,2001ce0 <___vfprintf_internal_r+0x11c0>
 200210c:	18c00404 	addi	r3,r3,16
 2002110:	10800044 	addi	r2,r2,1
 2002114:	45000015 	stw	r20,0(r8)
 2002118:	44400115 	stw	r17,4(r8)
 200211c:	d8c02015 	stw	r3,128(sp)
 2002120:	d8801f15 	stw	r2,124(sp)
 2002124:	b0bff60e 	bge	r22,r2,2002100 <___vfprintf_internal_r+0x15e0>
 2002128:	d9801e04 	addi	r6,sp,120
 200212c:	b80b883a 	mov	r5,r23
 2002130:	9809883a 	mov	r4,r19
 2002134:	20083000 	call	2008300 <__sprint_r>
 2002138:	103b7d1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 200213c:	d8c02017 	ldw	r3,128(sp)
 2002140:	d8801f17 	ldw	r2,124(sp)
 2002144:	da000404 	addi	r8,sp,16
 2002148:	003fee06 	br	2002104 <___vfprintf_internal_r+0x15e4>
 200214c:	9088703a 	and	r4,r18,r2
 2002150:	203eab1e 	bne	r4,zero,2001c00 <___vfprintf_internal_r+0x10e0>
 2002154:	dc401f17 	ldw	r17,124(sp)
 2002158:	40800115 	stw	r2,4(r8)
 200215c:	44000015 	stw	r16,0(r8)
 2002160:	8c400044 	addi	r17,r17,1
 2002164:	d8c02015 	stw	r3,128(sp)
 2002168:	dc401f15 	stw	r17,124(sp)
 200216c:	008001c4 	movi	r2,7
 2002170:	14400e16 	blt	r2,r17,20021ac <___vfprintf_internal_r+0x168c>
 2002174:	45800204 	addi	r22,r8,8
 2002178:	003eca06 	br	2001ca4 <___vfprintf_internal_r+0x1184>
 200217c:	010080b4 	movhi	r4,514
 2002180:	21235384 	addi	r4,r4,-29362
 2002184:	d9002c15 	stw	r4,176(sp)
 2002188:	d8802c17 	ldw	r2,176(sp)
 200218c:	1c07883a 	add	r3,r3,r16
 2002190:	8c400044 	addi	r17,r17,1
 2002194:	b0800015 	stw	r2,0(r22)
 2002198:	b4000115 	stw	r16,4(r22)
 200219c:	d8c02015 	stw	r3,128(sp)
 20021a0:	dc401f15 	stw	r17,124(sp)
 20021a4:	008001c4 	movi	r2,7
 20021a8:	147ebd0e 	bge	r2,r17,2001ca0 <___vfprintf_internal_r+0x1180>
 20021ac:	d9002d17 	ldw	r4,180(sp)
 20021b0:	d9801e04 	addi	r6,sp,120
 20021b4:	b80b883a 	mov	r5,r23
 20021b8:	20083000 	call	2008300 <__sprint_r>
 20021bc:	103b5c1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20021c0:	d8c02017 	ldw	r3,128(sp)
 20021c4:	dc401f17 	ldw	r17,124(sp)
 20021c8:	dd800404 	addi	r22,sp,16
 20021cc:	003eb506 	br	2001ca4 <___vfprintf_internal_r+0x1184>
 20021d0:	d9002d17 	ldw	r4,180(sp)
 20021d4:	d9801e04 	addi	r6,sp,120
 20021d8:	b80b883a 	mov	r5,r23
 20021dc:	20083000 	call	2008300 <__sprint_r>
 20021e0:	103b531e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20021e4:	d8c02017 	ldw	r3,128(sp)
 20021e8:	dc401f17 	ldw	r17,124(sp)
 20021ec:	da000404 	addi	r8,sp,16
 20021f0:	003e8d06 	br	2001c28 <___vfprintf_internal_r+0x1108>
 20021f4:	d9002d17 	ldw	r4,180(sp)
 20021f8:	d9801e04 	addi	r6,sp,120
 20021fc:	b80b883a 	mov	r5,r23
 2002200:	20083000 	call	2008300 <__sprint_r>
 2002204:	103b4a1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002208:	d8c02017 	ldw	r3,128(sp)
 200220c:	dc401f17 	ldw	r17,124(sp)
 2002210:	dd800404 	addi	r22,sp,16
 2002214:	003e8f06 	br	2001c54 <___vfprintf_internal_r+0x1134>
 2002218:	0027883a 	mov	r19,zero
 200221c:	003f4a06 	br	2001f48 <___vfprintf_internal_r+0x1428>
 2002220:	d9002d17 	ldw	r4,180(sp)
 2002224:	d9801e04 	addi	r6,sp,120
 2002228:	b80b883a 	mov	r5,r23
 200222c:	20083000 	call	2008300 <__sprint_r>
 2002230:	103b3f1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002234:	d8c02017 	ldw	r3,128(sp)
 2002238:	da000404 	addi	r8,sp,16
 200223c:	003c7b06 	br	200142c <___vfprintf_internal_r+0x90c>
 2002240:	d9402a17 	ldw	r5,168(sp)
 2002244:	04e7c83a 	sub	r19,zero,r19
 2002248:	07000b44 	movi	fp,45
 200224c:	9804c03a 	cmpne	r2,r19,zero
 2002250:	05adc83a 	sub	r22,zero,r22
 2002254:	df002785 	stb	fp,158(sp)
 2002258:	b0adc83a 	sub	r22,r22,r2
 200225c:	28017b16 	blt	r5,zero,200284c <___vfprintf_internal_r+0x1d2c>
 2002260:	00bfdfc4 	movi	r2,-129
 2002264:	90a4703a 	and	r18,r18,r2
 2002268:	003b8906 	br	2001090 <___vfprintf_internal_r+0x570>
 200226c:	d9003617 	ldw	r4,216(sp)
 2002270:	d9403817 	ldw	r5,224(sp)
 2002274:	da003d15 	stw	r8,244(sp)
 2002278:	2007f240 	call	2007f24 <__fpclassifyd>
 200227c:	da003d17 	ldw	r8,244(sp)
 2002280:	1000f026 	beq	r2,zero,2002644 <___vfprintf_internal_r+0x1b24>
 2002284:	d9002a17 	ldw	r4,168(sp)
 2002288:	05bff7c4 	movi	r22,-33
 200228c:	00bfffc4 	movi	r2,-1
 2002290:	8dac703a 	and	r22,r17,r22
 2002294:	20820026 	beq	r4,r2,2002a98 <___vfprintf_internal_r+0x1f78>
 2002298:	008011c4 	movi	r2,71
 200229c:	b081f726 	beq	r22,r2,2002a7c <___vfprintf_internal_r+0x1f5c>
 20022a0:	d9003817 	ldw	r4,224(sp)
 20022a4:	90c04014 	ori	r3,r18,256
 20022a8:	d8c02c15 	stw	r3,176(sp)
 20022ac:	20021516 	blt	r4,zero,2002b04 <___vfprintf_internal_r+0x1fe4>
 20022b0:	dcc03817 	ldw	r19,224(sp)
 20022b4:	d8002905 	stb	zero,164(sp)
 20022b8:	00801984 	movi	r2,102
 20022bc:	8881f926 	beq	r17,r2,2002aa4 <___vfprintf_internal_r+0x1f84>
 20022c0:	00801184 	movi	r2,70
 20022c4:	88821c26 	beq	r17,r2,2002b38 <___vfprintf_internal_r+0x2018>
 20022c8:	00801144 	movi	r2,69
 20022cc:	b081ef26 	beq	r22,r2,2002a8c <___vfprintf_internal_r+0x1f6c>
 20022d0:	d8c02a17 	ldw	r3,168(sp)
 20022d4:	d8802104 	addi	r2,sp,132
 20022d8:	d8800315 	stw	r2,12(sp)
 20022dc:	d9403617 	ldw	r5,216(sp)
 20022e0:	d8802504 	addi	r2,sp,148
 20022e4:	d9002d17 	ldw	r4,180(sp)
 20022e8:	d8800215 	stw	r2,8(sp)
 20022ec:	d8802604 	addi	r2,sp,152
 20022f0:	d8c00015 	stw	r3,0(sp)
 20022f4:	d8800115 	stw	r2,4(sp)
 20022f8:	01c00084 	movi	r7,2
 20022fc:	980d883a 	mov	r6,r19
 2002300:	d8c03c15 	stw	r3,240(sp)
 2002304:	da003d15 	stw	r8,244(sp)
 2002308:	20032500 	call	2003250 <_dtoa_r>
 200230c:	1021883a 	mov	r16,r2
 2002310:	008019c4 	movi	r2,103
 2002314:	d8c03c17 	ldw	r3,240(sp)
 2002318:	da003d17 	ldw	r8,244(sp)
 200231c:	88817126 	beq	r17,r2,20028e4 <___vfprintf_internal_r+0x1dc4>
 2002320:	008011c4 	movi	r2,71
 2002324:	88829126 	beq	r17,r2,2002d6c <___vfprintf_internal_r+0x224c>
 2002328:	80f9883a 	add	fp,r16,r3
 200232c:	d9003617 	ldw	r4,216(sp)
 2002330:	000d883a 	mov	r6,zero
 2002334:	000f883a 	mov	r7,zero
 2002338:	980b883a 	mov	r5,r19
 200233c:	da003d15 	stw	r8,244(sp)
 2002340:	200c2600 	call	200c260 <__eqdf2>
 2002344:	da003d17 	ldw	r8,244(sp)
 2002348:	10018d26 	beq	r2,zero,2002980 <___vfprintf_internal_r+0x1e60>
 200234c:	d8802117 	ldw	r2,132(sp)
 2002350:	1700062e 	bgeu	r2,fp,200236c <___vfprintf_internal_r+0x184c>
 2002354:	01000c04 	movi	r4,48
 2002358:	10c00044 	addi	r3,r2,1
 200235c:	d8c02115 	stw	r3,132(sp)
 2002360:	11000005 	stb	r4,0(r2)
 2002364:	d8802117 	ldw	r2,132(sp)
 2002368:	173ffb36 	bltu	r2,fp,2002358 <___vfprintf_internal_r+0x1838>
 200236c:	1405c83a 	sub	r2,r2,r16
 2002370:	d8803315 	stw	r2,204(sp)
 2002374:	008011c4 	movi	r2,71
 2002378:	b0817626 	beq	r22,r2,2002954 <___vfprintf_internal_r+0x1e34>
 200237c:	00801944 	movi	r2,101
 2002380:	1442800e 	bge	r2,r17,2002d84 <___vfprintf_internal_r+0x2264>
 2002384:	d8c02617 	ldw	r3,152(sp)
 2002388:	00801984 	movi	r2,102
 200238c:	d8c03215 	stw	r3,200(sp)
 2002390:	8881fe26 	beq	r17,r2,2002b8c <___vfprintf_internal_r+0x206c>
 2002394:	d8c03217 	ldw	r3,200(sp)
 2002398:	d9003317 	ldw	r4,204(sp)
 200239c:	1901dd16 	blt	r3,r4,2002b14 <___vfprintf_internal_r+0x1ff4>
 20023a0:	9480004c 	andi	r18,r18,1
 20023a4:	90022b1e 	bne	r18,zero,2002c54 <___vfprintf_internal_r+0x2134>
 20023a8:	1805883a 	mov	r2,r3
 20023ac:	18028316 	blt	r3,zero,2002dbc <___vfprintf_internal_r+0x229c>
 20023b0:	d8c03217 	ldw	r3,200(sp)
 20023b4:	044019c4 	movi	r17,103
 20023b8:	d8c02b15 	stw	r3,172(sp)
 20023bc:	df002907 	ldb	fp,164(sp)
 20023c0:	e001531e 	bne	fp,zero,2002910 <___vfprintf_internal_r+0x1df0>
 20023c4:	df002783 	ldbu	fp,158(sp)
 20023c8:	d8802915 	stw	r2,164(sp)
 20023cc:	dc802c17 	ldw	r18,176(sp)
 20023d0:	d8002a15 	stw	zero,168(sp)
 20023d4:	003baf06 	br	2001294 <___vfprintf_internal_r+0x774>
 20023d8:	d8c02e17 	ldw	r3,184(sp)
 20023dc:	d9002e17 	ldw	r4,184(sp)
 20023e0:	d9402e17 	ldw	r5,184(sp)
 20023e4:	18c00017 	ldw	r3,0(r3)
 20023e8:	21000117 	ldw	r4,4(r4)
 20023ec:	29400204 	addi	r5,r5,8
 20023f0:	d8c03615 	stw	r3,216(sp)
 20023f4:	d9003815 	stw	r4,224(sp)
 20023f8:	d9402e15 	stw	r5,184(sp)
 20023fc:	003b5006 	br	2001140 <___vfprintf_internal_r+0x620>
 2002400:	ac400007 	ldb	r17,0(r21)
 2002404:	003a2806 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2002408:	9080100c 	andi	r2,r18,64
 200240c:	1000a826 	beq	r2,zero,20026b0 <___vfprintf_internal_r+0x1b90>
 2002410:	d8c02e17 	ldw	r3,184(sp)
 2002414:	002d883a 	mov	r22,zero
 2002418:	1cc0000b 	ldhu	r19,0(r3)
 200241c:	18c00104 	addi	r3,r3,4
 2002420:	d8c02e15 	stw	r3,184(sp)
 2002424:	003caf06 	br	20016e4 <___vfprintf_internal_r+0xbc4>
 2002428:	d9002e17 	ldw	r4,184(sp)
 200242c:	d9402a17 	ldw	r5,168(sp)
 2002430:	002d883a 	mov	r22,zero
 2002434:	20800104 	addi	r2,r4,4
 2002438:	24c00017 	ldw	r19,0(r4)
 200243c:	283ebb0e 	bge	r5,zero,2001f2c <___vfprintf_internal_r+0x140c>
 2002440:	003ef106 	br	2002008 <___vfprintf_internal_r+0x14e8>
 2002444:	9080040c 	andi	r2,r18,16
 2002448:	1000921e 	bne	r2,zero,2002694 <___vfprintf_internal_r+0x1b74>
 200244c:	9480100c 	andi	r18,r18,64
 2002450:	90013926 	beq	r18,zero,2002938 <___vfprintf_internal_r+0x1e18>
 2002454:	d9402e17 	ldw	r5,184(sp)
 2002458:	d8c02f17 	ldw	r3,188(sp)
 200245c:	28800017 	ldw	r2,0(r5)
 2002460:	29400104 	addi	r5,r5,4
 2002464:	d9402e15 	stw	r5,184(sp)
 2002468:	10c0000d 	sth	r3,0(r2)
 200246c:	0039e406 	br	2000c00 <___vfprintf_internal_r+0xe0>
 2002470:	9080100c 	andi	r2,r18,64
 2002474:	10008026 	beq	r2,zero,2002678 <___vfprintf_internal_r+0x1b58>
 2002478:	d8802e17 	ldw	r2,184(sp)
 200247c:	14c0000f 	ldh	r19,0(r2)
 2002480:	10800104 	addi	r2,r2,4
 2002484:	d8802e15 	stw	r2,184(sp)
 2002488:	982dd7fa 	srai	r22,r19,31
 200248c:	b005883a 	mov	r2,r22
 2002490:	003af706 	br	2001070 <___vfprintf_internal_r+0x550>
 2002494:	9080100c 	andi	r2,r18,64
 2002498:	d8002785 	stb	zero,158(sp)
 200249c:	10008a1e 	bne	r2,zero,20026c8 <___vfprintf_internal_r+0x1ba8>
 20024a0:	d9002e17 	ldw	r4,184(sp)
 20024a4:	d9402a17 	ldw	r5,168(sp)
 20024a8:	002d883a 	mov	r22,zero
 20024ac:	20800104 	addi	r2,r4,4
 20024b0:	24c00017 	ldw	r19,0(r4)
 20024b4:	283e4b0e 	bge	r5,zero,2001de4 <___vfprintf_internal_r+0x12c4>
 20024b8:	9d86b03a 	or	r3,r19,r22
 20024bc:	d8802e15 	stw	r2,184(sp)
 20024c0:	183e4c1e 	bne	r3,zero,2001df4 <___vfprintf_internal_r+0x12d4>
 20024c4:	0039883a 	mov	fp,zero
 20024c8:	0005883a 	mov	r2,zero
 20024cc:	003d4006 	br	20019d0 <___vfprintf_internal_r+0xeb0>
 20024d0:	014080b4 	movhi	r5,514
 20024d4:	29635384 	addi	r5,r5,-29362
 20024d8:	d9402c15 	stw	r5,176(sp)
 20024dc:	d9402c17 	ldw	r5,176(sp)
 20024e0:	1c47883a 	add	r3,r3,r17
 20024e4:	10800044 	addi	r2,r2,1
 20024e8:	41400015 	stw	r5,0(r8)
 20024ec:	44400115 	stw	r17,4(r8)
 20024f0:	d8c02015 	stw	r3,128(sp)
 20024f4:	d8801f15 	stw	r2,124(sp)
 20024f8:	010001c4 	movi	r4,7
 20024fc:	20bec816 	blt	r4,r2,2002020 <___vfprintf_internal_r+0x1500>
 2002500:	42000204 	addi	r8,r8,8
 2002504:	003ecd06 	br	200203c <___vfprintf_internal_r+0x151c>
 2002508:	d9002a17 	ldw	r4,168(sp)
 200250c:	d8002785 	stb	zero,158(sp)
 2002510:	203d2d16 	blt	r4,zero,20019c8 <___vfprintf_internal_r+0xea8>
 2002514:	00bfdfc4 	movi	r2,-129
 2002518:	90a4703a 	and	r18,r18,r2
 200251c:	003a6106 	br	2000ea4 <___vfprintf_internal_r+0x384>
 2002520:	010080b4 	movhi	r4,514
 2002524:	21235384 	addi	r4,r4,-29362
 2002528:	d9002c15 	stw	r4,176(sp)
 200252c:	003bea06 	br	20014d8 <___vfprintf_internal_r+0x9b8>
 2002530:	d9002d17 	ldw	r4,180(sp)
 2002534:	d9801e04 	addi	r6,sp,120
 2002538:	b80b883a 	mov	r5,r23
 200253c:	20083000 	call	2008300 <__sprint_r>
 2002540:	103a7b1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002544:	d8c02017 	ldw	r3,128(sp)
 2002548:	da000404 	addi	r8,sp,16
 200254c:	003d4106 	br	2001a54 <___vfprintf_internal_r+0xf34>
 2002550:	d8801f17 	ldw	r2,124(sp)
 2002554:	014080b4 	movhi	r5,514
 2002558:	01000044 	movi	r4,1
 200255c:	18c00044 	addi	r3,r3,1
 2002560:	10800044 	addi	r2,r2,1
 2002564:	29635304 	addi	r5,r5,-29364
 2002568:	41000115 	stw	r4,4(r8)
 200256c:	41400015 	stw	r5,0(r8)
 2002570:	d8c02015 	stw	r3,128(sp)
 2002574:	d8801f15 	stw	r2,124(sp)
 2002578:	010001c4 	movi	r4,7
 200257c:	20805c16 	blt	r4,r2,20026f0 <___vfprintf_internal_r+0x1bd0>
 2002580:	42000204 	addi	r8,r8,8
 2002584:	8800041e 	bne	r17,zero,2002598 <___vfprintf_internal_r+0x1a78>
 2002588:	d8803317 	ldw	r2,204(sp)
 200258c:	1000021e 	bne	r2,zero,2002598 <___vfprintf_internal_r+0x1a78>
 2002590:	9080004c 	andi	r2,r18,1
 2002594:	103be726 	beq	r2,zero,2001534 <___vfprintf_internal_r+0xa14>
 2002598:	d9003717 	ldw	r4,220(sp)
 200259c:	d8801f17 	ldw	r2,124(sp)
 20025a0:	d9403417 	ldw	r5,208(sp)
 20025a4:	20c7883a 	add	r3,r4,r3
 20025a8:	10800044 	addi	r2,r2,1
 20025ac:	41000115 	stw	r4,4(r8)
 20025b0:	41400015 	stw	r5,0(r8)
 20025b4:	d8c02015 	stw	r3,128(sp)
 20025b8:	d8801f15 	stw	r2,124(sp)
 20025bc:	010001c4 	movi	r4,7
 20025c0:	20812116 	blt	r4,r2,2002a48 <___vfprintf_internal_r+0x1f28>
 20025c4:	42000204 	addi	r8,r8,8
 20025c8:	0463c83a 	sub	r17,zero,r17
 20025cc:	0440730e 	bge	zero,r17,200279c <___vfprintf_internal_r+0x1c7c>
 20025d0:	05800404 	movi	r22,16
 20025d4:	b440860e 	bge	r22,r17,20027f0 <___vfprintf_internal_r+0x1cd0>
 20025d8:	014080b4 	movhi	r5,514
 20025dc:	29635384 	addi	r5,r5,-29362
 20025e0:	d9402c15 	stw	r5,176(sp)
 20025e4:	070001c4 	movi	fp,7
 20025e8:	dcc02d17 	ldw	r19,180(sp)
 20025ec:	00000306 	br	20025fc <___vfprintf_internal_r+0x1adc>
 20025f0:	42000204 	addi	r8,r8,8
 20025f4:	8c7ffc04 	addi	r17,r17,-16
 20025f8:	b440800e 	bge	r22,r17,20027fc <___vfprintf_internal_r+0x1cdc>
 20025fc:	18c00404 	addi	r3,r3,16
 2002600:	10800044 	addi	r2,r2,1
 2002604:	45000015 	stw	r20,0(r8)
 2002608:	45800115 	stw	r22,4(r8)
 200260c:	d8c02015 	stw	r3,128(sp)
 2002610:	d8801f15 	stw	r2,124(sp)
 2002614:	e0bff60e 	bge	fp,r2,20025f0 <___vfprintf_internal_r+0x1ad0>
 2002618:	d9801e04 	addi	r6,sp,120
 200261c:	b80b883a 	mov	r5,r23
 2002620:	9809883a 	mov	r4,r19
 2002624:	20083000 	call	2008300 <__sprint_r>
 2002628:	103a411e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 200262c:	d8c02017 	ldw	r3,128(sp)
 2002630:	d8801f17 	ldw	r2,124(sp)
 2002634:	da000404 	addi	r8,sp,16
 2002638:	003fee06 	br	20025f4 <___vfprintf_internal_r+0x1ad4>
 200263c:	00bfffc4 	movi	r2,-1
 2002640:	003a3f06 	br	2000f40 <___vfprintf_internal_r+0x420>
 2002644:	008011c4 	movi	r2,71
 2002648:	1440b816 	blt	r2,r17,200292c <___vfprintf_internal_r+0x1e0c>
 200264c:	040080b4 	movhi	r16,514
 2002650:	84234504 	addi	r16,r16,-29420
 2002654:	00c000c4 	movi	r3,3
 2002658:	00bfdfc4 	movi	r2,-129
 200265c:	d8c02915 	stw	r3,164(sp)
 2002660:	90a4703a 	and	r18,r18,r2
 2002664:	df002783 	ldbu	fp,158(sp)
 2002668:	d8c02b15 	stw	r3,172(sp)
 200266c:	d8002a15 	stw	zero,168(sp)
 2002670:	d8003215 	stw	zero,200(sp)
 2002674:	003b0706 	br	2001294 <___vfprintf_internal_r+0x774>
 2002678:	d8c02e17 	ldw	r3,184(sp)
 200267c:	1cc00017 	ldw	r19,0(r3)
 2002680:	18c00104 	addi	r3,r3,4
 2002684:	d8c02e15 	stw	r3,184(sp)
 2002688:	982dd7fa 	srai	r22,r19,31
 200268c:	b005883a 	mov	r2,r22
 2002690:	003a7706 	br	2001070 <___vfprintf_internal_r+0x550>
 2002694:	d8c02e17 	ldw	r3,184(sp)
 2002698:	d9002f17 	ldw	r4,188(sp)
 200269c:	18800017 	ldw	r2,0(r3)
 20026a0:	18c00104 	addi	r3,r3,4
 20026a4:	d8c02e15 	stw	r3,184(sp)
 20026a8:	11000015 	stw	r4,0(r2)
 20026ac:	00395406 	br	2000c00 <___vfprintf_internal_r+0xe0>
 20026b0:	d9002e17 	ldw	r4,184(sp)
 20026b4:	002d883a 	mov	r22,zero
 20026b8:	24c00017 	ldw	r19,0(r4)
 20026bc:	21000104 	addi	r4,r4,4
 20026c0:	d9002e15 	stw	r4,184(sp)
 20026c4:	003c0706 	br	20016e4 <___vfprintf_internal_r+0xbc4>
 20026c8:	d9402e17 	ldw	r5,184(sp)
 20026cc:	d8c02a17 	ldw	r3,168(sp)
 20026d0:	002d883a 	mov	r22,zero
 20026d4:	28800104 	addi	r2,r5,4
 20026d8:	2cc0000b 	ldhu	r19,0(r5)
 20026dc:	183dc10e 	bge	r3,zero,2001de4 <___vfprintf_internal_r+0x12c4>
 20026e0:	003f7506 	br	20024b8 <___vfprintf_internal_r+0x1998>
 20026e4:	040080b4 	movhi	r16,514
 20026e8:	84234304 	addi	r16,r16,-29428
 20026ec:	003aa706 	br	200118c <___vfprintf_internal_r+0x66c>
 20026f0:	d9002d17 	ldw	r4,180(sp)
 20026f4:	d9801e04 	addi	r6,sp,120
 20026f8:	b80b883a 	mov	r5,r23
 20026fc:	20083000 	call	2008300 <__sprint_r>
 2002700:	103a0b1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002704:	dc402617 	ldw	r17,152(sp)
 2002708:	d8c02017 	ldw	r3,128(sp)
 200270c:	da000404 	addi	r8,sp,16
 2002710:	003f9c06 	br	2002584 <___vfprintf_internal_r+0x1a64>
 2002714:	ac400043 	ldbu	r17,1(r21)
 2002718:	84000814 	ori	r16,r16,32
 200271c:	ad400044 	addi	r21,r21,1
 2002720:	8c403fcc 	andi	r17,r17,255
 2002724:	8c40201c 	xori	r17,r17,128
 2002728:	8c7fe004 	addi	r17,r17,-128
 200272c:	00395e06 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2002730:	d8c02e15 	stw	r3,184(sp)
 2002734:	0039883a 	mov	fp,zero
 2002738:	003e3506 	br	2002010 <___vfprintf_internal_r+0x14f0>
 200273c:	d9002d17 	ldw	r4,180(sp)
 2002740:	d9801e04 	addi	r6,sp,120
 2002744:	b80b883a 	mov	r5,r23
 2002748:	20083000 	call	2008300 <__sprint_r>
 200274c:	1039f81e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002750:	d8c02017 	ldw	r3,128(sp)
 2002754:	da000404 	addi	r8,sp,16
 2002758:	003cd006 	br	2001a9c <___vfprintf_internal_r+0xf7c>
 200275c:	8009883a 	mov	r4,r16
 2002760:	df003d15 	stw	fp,244(sp)
 2002764:	2000a880 	call	2000a88 <strlen>
 2002768:	d8802b15 	stw	r2,172(sp)
 200276c:	da003d17 	ldw	r8,244(sp)
 2002770:	103c200e 	bge	r2,zero,20017f4 <___vfprintf_internal_r+0xcd4>
 2002774:	0005883a 	mov	r2,zero
 2002778:	003c1e06 	br	20017f4 <___vfprintf_internal_r+0xcd4>
 200277c:	d9002d17 	ldw	r4,180(sp)
 2002780:	d9801e04 	addi	r6,sp,120
 2002784:	b80b883a 	mov	r5,r23
 2002788:	20083000 	call	2008300 <__sprint_r>
 200278c:	1039e81e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002790:	d8c02017 	ldw	r3,128(sp)
 2002794:	d8801f17 	ldw	r2,124(sp)
 2002798:	da000404 	addi	r8,sp,16
 200279c:	d9403317 	ldw	r5,204(sp)
 20027a0:	10800044 	addi	r2,r2,1
 20027a4:	44000015 	stw	r16,0(r8)
 20027a8:	28c7883a 	add	r3,r5,r3
 20027ac:	003b5b06 	br	200151c <___vfprintf_internal_r+0x9fc>
 20027b0:	010080b4 	movhi	r4,514
 20027b4:	21235784 	addi	r4,r4,-29346
 20027b8:	d9003515 	stw	r4,212(sp)
 20027bc:	003af206 	br	2001388 <___vfprintf_internal_r+0x868>
 20027c0:	013fffc4 	movi	r4,-1
 20027c4:	003a0806 	br	2000fe8 <___vfprintf_internal_r+0x4c8>
 20027c8:	0023883a 	mov	r17,zero
 20027cc:	003d9d06 	br	2001e44 <___vfprintf_internal_r+0x1324>
 20027d0:	d9002d17 	ldw	r4,180(sp)
 20027d4:	d9801e04 	addi	r6,sp,120
 20027d8:	b80b883a 	mov	r5,r23
 20027dc:	20083000 	call	2008300 <__sprint_r>
 20027e0:	1039d31e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20027e4:	d8c02017 	ldw	r3,128(sp)
 20027e8:	da000404 	addi	r8,sp,16
 20027ec:	003d9406 	br	2001e40 <___vfprintf_internal_r+0x1320>
 20027f0:	010080b4 	movhi	r4,514
 20027f4:	21235384 	addi	r4,r4,-29362
 20027f8:	d9002c15 	stw	r4,176(sp)
 20027fc:	d9002c17 	ldw	r4,176(sp)
 2002800:	1c47883a 	add	r3,r3,r17
 2002804:	10800044 	addi	r2,r2,1
 2002808:	41000015 	stw	r4,0(r8)
 200280c:	44400115 	stw	r17,4(r8)
 2002810:	d8c02015 	stw	r3,128(sp)
 2002814:	d8801f15 	stw	r2,124(sp)
 2002818:	010001c4 	movi	r4,7
 200281c:	20bfd716 	blt	r4,r2,200277c <___vfprintf_internal_r+0x1c5c>
 2002820:	42000204 	addi	r8,r8,8
 2002824:	003fdd06 	br	200279c <___vfprintf_internal_r+0x1c7c>
 2002828:	d9002d17 	ldw	r4,180(sp)
 200282c:	d9801e04 	addi	r6,sp,120
 2002830:	b80b883a 	mov	r5,r23
 2002834:	20083000 	call	2008300 <__sprint_r>
 2002838:	1039bd1e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 200283c:	d8802617 	ldw	r2,152(sp)
 2002840:	d8c02017 	ldw	r3,128(sp)
 2002844:	da000404 	addi	r8,sp,16
 2002848:	003e1006 	br	200208c <___vfprintf_internal_r+0x156c>
 200284c:	00800044 	movi	r2,1
 2002850:	10803fcc 	andi	r2,r2,255
 2002854:	00c00044 	movi	r3,1
 2002858:	10fa0d26 	beq	r2,r3,2001090 <___vfprintf_internal_r+0x570>
 200285c:	00c00084 	movi	r3,2
 2002860:	10fbaf26 	beq	r2,r3,2001720 <___vfprintf_internal_r+0xc00>
 2002864:	003a6d06 	br	200121c <___vfprintf_internal_r+0x6fc>
 2002868:	010080b4 	movhi	r4,514
 200286c:	21235784 	addi	r4,r4,-29346
 2002870:	d9003515 	stw	r4,212(sp)
 2002874:	003b5406 	br	20015c8 <___vfprintf_internal_r+0xaa8>
 2002878:	d8802a17 	ldw	r2,168(sp)
 200287c:	00c00184 	movi	r3,6
 2002880:	1880012e 	bgeu	r3,r2,2002888 <___vfprintf_internal_r+0x1d68>
 2002884:	1805883a 	mov	r2,r3
 2002888:	d8802b15 	stw	r2,172(sp)
 200288c:	1000ef16 	blt	r2,zero,2002c4c <___vfprintf_internal_r+0x212c>
 2002890:	040080b4 	movhi	r16,514
 2002894:	d8802915 	stw	r2,164(sp)
 2002898:	dcc02e15 	stw	r19,184(sp)
 200289c:	d8002a15 	stw	zero,168(sp)
 20028a0:	d8003215 	stw	zero,200(sp)
 20028a4:	84235104 	addi	r16,r16,-29372
 20028a8:	0039883a 	mov	fp,zero
 20028ac:	003a8006 	br	20012b0 <___vfprintf_internal_r+0x790>
 20028b0:	0021883a 	mov	r16,zero
 20028b4:	003e0706 	br	20020d4 <___vfprintf_internal_r+0x15b4>
 20028b8:	d9002d17 	ldw	r4,180(sp)
 20028bc:	d9801e04 	addi	r6,sp,120
 20028c0:	b80b883a 	mov	r5,r23
 20028c4:	20083000 	call	2008300 <__sprint_r>
 20028c8:	1039991e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 20028cc:	d8802617 	ldw	r2,152(sp)
 20028d0:	d9403317 	ldw	r5,204(sp)
 20028d4:	d8c02017 	ldw	r3,128(sp)
 20028d8:	da000404 	addi	r8,sp,16
 20028dc:	2885c83a 	sub	r2,r5,r2
 20028e0:	003dfb06 	br	20020d0 <___vfprintf_internal_r+0x15b0>
 20028e4:	9080004c 	andi	r2,r18,1
 20028e8:	103e8f1e 	bne	r2,zero,2002328 <___vfprintf_internal_r+0x1808>
 20028ec:	d8802117 	ldw	r2,132(sp)
 20028f0:	003e9e06 	br	200236c <___vfprintf_internal_r+0x184c>
 20028f4:	1025883a 	mov	r18,r2
 20028f8:	0039883a 	mov	fp,zero
 20028fc:	00800084 	movi	r2,2
 2002900:	003fd306 	br	2002850 <___vfprintf_internal_r+0x1d30>
 2002904:	07000b44 	movi	fp,45
 2002908:	df002785 	stb	fp,158(sp)
 200290c:	003a1b06 	br	200117c <___vfprintf_internal_r+0x65c>
 2002910:	00c00b44 	movi	r3,45
 2002914:	d8c02785 	stb	r3,158(sp)
 2002918:	d8802915 	stw	r2,164(sp)
 200291c:	dc802c17 	ldw	r18,176(sp)
 2002920:	d8002a15 	stw	zero,168(sp)
 2002924:	07000b44 	movi	fp,45
 2002928:	003a5e06 	br	20012a4 <___vfprintf_internal_r+0x784>
 200292c:	040080b4 	movhi	r16,514
 2002930:	84234604 	addi	r16,r16,-29416
 2002934:	003f4706 	br	2002654 <___vfprintf_internal_r+0x1b34>
 2002938:	d9002e17 	ldw	r4,184(sp)
 200293c:	d9402f17 	ldw	r5,188(sp)
 2002940:	20800017 	ldw	r2,0(r4)
 2002944:	21000104 	addi	r4,r4,4
 2002948:	d9002e15 	stw	r4,184(sp)
 200294c:	11400015 	stw	r5,0(r2)
 2002950:	0038ab06 	br	2000c00 <___vfprintf_internal_r+0xe0>
 2002954:	dd802617 	ldw	r22,152(sp)
 2002958:	00bfff44 	movi	r2,-3
 200295c:	b0801c16 	blt	r22,r2,20029d0 <___vfprintf_internal_r+0x1eb0>
 2002960:	d9402a17 	ldw	r5,168(sp)
 2002964:	2d801a16 	blt	r5,r22,20029d0 <___vfprintf_internal_r+0x1eb0>
 2002968:	dd803215 	stw	r22,200(sp)
 200296c:	003e8906 	br	2002394 <___vfprintf_internal_r+0x1874>
 2002970:	010080b4 	movhi	r4,514
 2002974:	21235384 	addi	r4,r4,-29362
 2002978:	d9002c15 	stw	r4,176(sp)
 200297c:	003c9106 	br	2001bc4 <___vfprintf_internal_r+0x10a4>
 2002980:	e005883a 	mov	r2,fp
 2002984:	003e7906 	br	200236c <___vfprintf_internal_r+0x184c>
 2002988:	d9002a17 	ldw	r4,168(sp)
 200298c:	df002783 	ldbu	fp,158(sp)
 2002990:	dcc02e15 	stw	r19,184(sp)
 2002994:	d9002915 	stw	r4,164(sp)
 2002998:	d9002b15 	stw	r4,172(sp)
 200299c:	d8002a15 	stw	zero,168(sp)
 20029a0:	d8003215 	stw	zero,200(sp)
 20029a4:	003a3b06 	br	2001294 <___vfprintf_internal_r+0x774>
 20029a8:	9080004c 	andi	r2,r18,1
 20029ac:	0039883a 	mov	fp,zero
 20029b0:	10000426 	beq	r2,zero,20029c4 <___vfprintf_internal_r+0x1ea4>
 20029b4:	00800c04 	movi	r2,48
 20029b8:	dc001dc4 	addi	r16,sp,119
 20029bc:	d8801dc5 	stb	r2,119(sp)
 20029c0:	003b6406 	br	2001754 <___vfprintf_internal_r+0xc34>
 20029c4:	d8002b15 	stw	zero,172(sp)
 20029c8:	dc001e04 	addi	r16,sp,120
 20029cc:	003a2b06 	br	200127c <___vfprintf_internal_r+0x75c>
 20029d0:	8c7fff84 	addi	r17,r17,-2
 20029d4:	b5bfffc4 	addi	r22,r22,-1
 20029d8:	dd802615 	stw	r22,152(sp)
 20029dc:	dc4022c5 	stb	r17,139(sp)
 20029e0:	b000bf16 	blt	r22,zero,2002ce0 <___vfprintf_internal_r+0x21c0>
 20029e4:	00800ac4 	movi	r2,43
 20029e8:	d8802305 	stb	r2,140(sp)
 20029ec:	00800244 	movi	r2,9
 20029f0:	15807016 	blt	r2,r22,2002bb4 <___vfprintf_internal_r+0x2094>
 20029f4:	00800c04 	movi	r2,48
 20029f8:	b5800c04 	addi	r22,r22,48
 20029fc:	d8802345 	stb	r2,141(sp)
 2002a00:	dd802385 	stb	r22,142(sp)
 2002a04:	d88023c4 	addi	r2,sp,143
 2002a08:	df0022c4 	addi	fp,sp,139
 2002a0c:	d8c03317 	ldw	r3,204(sp)
 2002a10:	1739c83a 	sub	fp,r2,fp
 2002a14:	d9003317 	ldw	r4,204(sp)
 2002a18:	e0c7883a 	add	r3,fp,r3
 2002a1c:	df003a15 	stw	fp,232(sp)
 2002a20:	d8c02b15 	stw	r3,172(sp)
 2002a24:	00800044 	movi	r2,1
 2002a28:	1100b30e 	bge	r2,r4,2002cf8 <___vfprintf_internal_r+0x21d8>
 2002a2c:	d8c02b17 	ldw	r3,172(sp)
 2002a30:	18c00044 	addi	r3,r3,1
 2002a34:	d8c02b15 	stw	r3,172(sp)
 2002a38:	1805883a 	mov	r2,r3
 2002a3c:	1800ac16 	blt	r3,zero,2002cf0 <___vfprintf_internal_r+0x21d0>
 2002a40:	d8003215 	stw	zero,200(sp)
 2002a44:	003e5d06 	br	20023bc <___vfprintf_internal_r+0x189c>
 2002a48:	d9002d17 	ldw	r4,180(sp)
 2002a4c:	d9801e04 	addi	r6,sp,120
 2002a50:	b80b883a 	mov	r5,r23
 2002a54:	20083000 	call	2008300 <__sprint_r>
 2002a58:	1039351e 	bne	r2,zero,2000f30 <___vfprintf_internal_r+0x410>
 2002a5c:	dc402617 	ldw	r17,152(sp)
 2002a60:	d8c02017 	ldw	r3,128(sp)
 2002a64:	d8801f17 	ldw	r2,124(sp)
 2002a68:	da000404 	addi	r8,sp,16
 2002a6c:	003ed606 	br	20025c8 <___vfprintf_internal_r+0x1aa8>
 2002a70:	182b883a 	mov	r21,r3
 2002a74:	d8002a15 	stw	zero,168(sp)
 2002a78:	00388c06 	br	2000cac <___vfprintf_internal_r+0x18c>
 2002a7c:	d8802a17 	ldw	r2,168(sp)
 2002a80:	103e071e 	bne	r2,zero,20022a0 <___vfprintf_internal_r+0x1780>
 2002a84:	dc002a15 	stw	r16,168(sp)
 2002a88:	003e0506 	br	20022a0 <___vfprintf_internal_r+0x1780>
 2002a8c:	d9002a17 	ldw	r4,168(sp)
 2002a90:	20c00044 	addi	r3,r4,1
 2002a94:	003e0f06 	br	20022d4 <___vfprintf_internal_r+0x17b4>
 2002a98:	01400184 	movi	r5,6
 2002a9c:	d9402a15 	stw	r5,168(sp)
 2002aa0:	003dff06 	br	20022a0 <___vfprintf_internal_r+0x1780>
 2002aa4:	d8802104 	addi	r2,sp,132
 2002aa8:	d8800315 	stw	r2,12(sp)
 2002aac:	d8802504 	addi	r2,sp,148
 2002ab0:	d8800215 	stw	r2,8(sp)
 2002ab4:	d8802604 	addi	r2,sp,152
 2002ab8:	d8800115 	stw	r2,4(sp)
 2002abc:	d8802a17 	ldw	r2,168(sp)
 2002ac0:	d9403617 	ldw	r5,216(sp)
 2002ac4:	d9002d17 	ldw	r4,180(sp)
 2002ac8:	d8800015 	stw	r2,0(sp)
 2002acc:	01c000c4 	movi	r7,3
 2002ad0:	980d883a 	mov	r6,r19
 2002ad4:	da003d15 	stw	r8,244(sp)
 2002ad8:	20032500 	call	2003250 <_dtoa_r>
 2002adc:	d8c02a17 	ldw	r3,168(sp)
 2002ae0:	da003d17 	ldw	r8,244(sp)
 2002ae4:	1021883a 	mov	r16,r2
 2002ae8:	10f9883a 	add	fp,r2,r3
 2002aec:	81000007 	ldb	r4,0(r16)
 2002af0:	00800c04 	movi	r2,48
 2002af4:	20805e26 	beq	r4,r2,2002c70 <___vfprintf_internal_r+0x2150>
 2002af8:	d8c02617 	ldw	r3,152(sp)
 2002afc:	e0f9883a 	add	fp,fp,r3
 2002b00:	003e0a06 	br	200232c <___vfprintf_internal_r+0x180c>
 2002b04:	00c00b44 	movi	r3,45
 2002b08:	24e0003c 	xorhi	r19,r4,32768
 2002b0c:	d8c02905 	stb	r3,164(sp)
 2002b10:	003de906 	br	20022b8 <___vfprintf_internal_r+0x1798>
 2002b14:	d8c03217 	ldw	r3,200(sp)
 2002b18:	00c07a0e 	bge	zero,r3,2002d04 <___vfprintf_internal_r+0x21e4>
 2002b1c:	00800044 	movi	r2,1
 2002b20:	d9003317 	ldw	r4,204(sp)
 2002b24:	1105883a 	add	r2,r2,r4
 2002b28:	d8802b15 	stw	r2,172(sp)
 2002b2c:	10004e16 	blt	r2,zero,2002c68 <___vfprintf_internal_r+0x2148>
 2002b30:	044019c4 	movi	r17,103
 2002b34:	003e2106 	br	20023bc <___vfprintf_internal_r+0x189c>
 2002b38:	d9002a17 	ldw	r4,168(sp)
 2002b3c:	d8802104 	addi	r2,sp,132
 2002b40:	d8800315 	stw	r2,12(sp)
 2002b44:	d9000015 	stw	r4,0(sp)
 2002b48:	d8802504 	addi	r2,sp,148
 2002b4c:	d9403617 	ldw	r5,216(sp)
 2002b50:	d9002d17 	ldw	r4,180(sp)
 2002b54:	d8800215 	stw	r2,8(sp)
 2002b58:	d8802604 	addi	r2,sp,152
 2002b5c:	d8800115 	stw	r2,4(sp)
 2002b60:	01c000c4 	movi	r7,3
 2002b64:	980d883a 	mov	r6,r19
 2002b68:	da003d15 	stw	r8,244(sp)
 2002b6c:	20032500 	call	2003250 <_dtoa_r>
 2002b70:	d8c02a17 	ldw	r3,168(sp)
 2002b74:	da003d17 	ldw	r8,244(sp)
 2002b78:	1021883a 	mov	r16,r2
 2002b7c:	00801184 	movi	r2,70
 2002b80:	80f9883a 	add	fp,r16,r3
 2002b84:	88bfd926 	beq	r17,r2,2002aec <___vfprintf_internal_r+0x1fcc>
 2002b88:	003de806 	br	200232c <___vfprintf_internal_r+0x180c>
 2002b8c:	d9002a17 	ldw	r4,168(sp)
 2002b90:	00c04d0e 	bge	zero,r3,2002cc8 <___vfprintf_internal_r+0x21a8>
 2002b94:	2000441e 	bne	r4,zero,2002ca8 <___vfprintf_internal_r+0x2188>
 2002b98:	9480004c 	andi	r18,r18,1
 2002b9c:	9000421e 	bne	r18,zero,2002ca8 <___vfprintf_internal_r+0x2188>
 2002ba0:	1805883a 	mov	r2,r3
 2002ba4:	18006f16 	blt	r3,zero,2002d64 <___vfprintf_internal_r+0x2244>
 2002ba8:	d8c03217 	ldw	r3,200(sp)
 2002bac:	d8c02b15 	stw	r3,172(sp)
 2002bb0:	003e0206 	br	20023bc <___vfprintf_internal_r+0x189c>
 2002bb4:	df0022c4 	addi	fp,sp,139
 2002bb8:	dc002a15 	stw	r16,168(sp)
 2002bbc:	4027883a 	mov	r19,r8
 2002bc0:	e021883a 	mov	r16,fp
 2002bc4:	b009883a 	mov	r4,r22
 2002bc8:	01400284 	movi	r5,10
 2002bcc:	200ae8c0 	call	200ae8c <__modsi3>
 2002bd0:	10800c04 	addi	r2,r2,48
 2002bd4:	843fffc4 	addi	r16,r16,-1
 2002bd8:	b009883a 	mov	r4,r22
 2002bdc:	01400284 	movi	r5,10
 2002be0:	80800005 	stb	r2,0(r16)
 2002be4:	200ae080 	call	200ae08 <__divsi3>
 2002be8:	102d883a 	mov	r22,r2
 2002bec:	00800244 	movi	r2,9
 2002bf0:	15bff416 	blt	r2,r22,2002bc4 <___vfprintf_internal_r+0x20a4>
 2002bf4:	9811883a 	mov	r8,r19
 2002bf8:	b0800c04 	addi	r2,r22,48
 2002bfc:	8027883a 	mov	r19,r16
 2002c00:	997fffc4 	addi	r5,r19,-1
 2002c04:	98bfffc5 	stb	r2,-1(r19)
 2002c08:	dc002a17 	ldw	r16,168(sp)
 2002c0c:	2f006d2e 	bgeu	r5,fp,2002dc4 <___vfprintf_internal_r+0x22a4>
 2002c10:	d9c02384 	addi	r7,sp,142
 2002c14:	3ccfc83a 	sub	r7,r7,r19
 2002c18:	d9002344 	addi	r4,sp,141
 2002c1c:	e1cf883a 	add	r7,fp,r7
 2002c20:	00000106 	br	2002c28 <___vfprintf_internal_r+0x2108>
 2002c24:	28800003 	ldbu	r2,0(r5)
 2002c28:	20800005 	stb	r2,0(r4)
 2002c2c:	21000044 	addi	r4,r4,1
 2002c30:	29400044 	addi	r5,r5,1
 2002c34:	393ffb1e 	bne	r7,r4,2002c24 <___vfprintf_internal_r+0x2104>
 2002c38:	d8802304 	addi	r2,sp,140
 2002c3c:	14c5c83a 	sub	r2,r2,r19
 2002c40:	d8c02344 	addi	r3,sp,141
 2002c44:	1885883a 	add	r2,r3,r2
 2002c48:	003f7006 	br	2002a0c <___vfprintf_internal_r+0x1eec>
 2002c4c:	0005883a 	mov	r2,zero
 2002c50:	003f0f06 	br	2002890 <___vfprintf_internal_r+0x1d70>
 2002c54:	d8c03217 	ldw	r3,200(sp)
 2002c58:	18c00044 	addi	r3,r3,1
 2002c5c:	d8c02b15 	stw	r3,172(sp)
 2002c60:	1805883a 	mov	r2,r3
 2002c64:	183fb20e 	bge	r3,zero,2002b30 <___vfprintf_internal_r+0x2010>
 2002c68:	0005883a 	mov	r2,zero
 2002c6c:	003fb006 	br	2002b30 <___vfprintf_internal_r+0x2010>
 2002c70:	d9003617 	ldw	r4,216(sp)
 2002c74:	000d883a 	mov	r6,zero
 2002c78:	000f883a 	mov	r7,zero
 2002c7c:	980b883a 	mov	r5,r19
 2002c80:	d8c03c15 	stw	r3,240(sp)
 2002c84:	da003d15 	stw	r8,244(sp)
 2002c88:	200c2600 	call	200c260 <__eqdf2>
 2002c8c:	d8c03c17 	ldw	r3,240(sp)
 2002c90:	da003d17 	ldw	r8,244(sp)
 2002c94:	103f9826 	beq	r2,zero,2002af8 <___vfprintf_internal_r+0x1fd8>
 2002c98:	00800044 	movi	r2,1
 2002c9c:	10c7c83a 	sub	r3,r2,r3
 2002ca0:	d8c02615 	stw	r3,152(sp)
 2002ca4:	003f9506 	br	2002afc <___vfprintf_internal_r+0x1fdc>
 2002ca8:	d9002a17 	ldw	r4,168(sp)
 2002cac:	d8c03217 	ldw	r3,200(sp)
 2002cb0:	20800044 	addi	r2,r4,1
 2002cb4:	1885883a 	add	r2,r3,r2
 2002cb8:	d8802b15 	stw	r2,172(sp)
 2002cbc:	103dbf0e 	bge	r2,zero,20023bc <___vfprintf_internal_r+0x189c>
 2002cc0:	0005883a 	mov	r2,zero
 2002cc4:	003dbd06 	br	20023bc <___vfprintf_internal_r+0x189c>
 2002cc8:	2000201e 	bne	r4,zero,2002d4c <___vfprintf_internal_r+0x222c>
 2002ccc:	9480004c 	andi	r18,r18,1
 2002cd0:	90001e1e 	bne	r18,zero,2002d4c <___vfprintf_internal_r+0x222c>
 2002cd4:	00800044 	movi	r2,1
 2002cd8:	d8802b15 	stw	r2,172(sp)
 2002cdc:	003db706 	br	20023bc <___vfprintf_internal_r+0x189c>
 2002ce0:	00800b44 	movi	r2,45
 2002ce4:	05adc83a 	sub	r22,zero,r22
 2002ce8:	d8802305 	stb	r2,140(sp)
 2002cec:	003f3f06 	br	20029ec <___vfprintf_internal_r+0x1ecc>
 2002cf0:	0005883a 	mov	r2,zero
 2002cf4:	003f5206 	br	2002a40 <___vfprintf_internal_r+0x1f20>
 2002cf8:	90a4703a 	and	r18,r18,r2
 2002cfc:	903f4e26 	beq	r18,zero,2002a38 <___vfprintf_internal_r+0x1f18>
 2002d00:	003f4a06 	br	2002a2c <___vfprintf_internal_r+0x1f0c>
 2002d04:	00800084 	movi	r2,2
 2002d08:	10c5c83a 	sub	r2,r2,r3
 2002d0c:	003f8406 	br	2002b20 <___vfprintf_internal_r+0x2000>
 2002d10:	d9402e17 	ldw	r5,184(sp)
 2002d14:	d9002e17 	ldw	r4,184(sp)
 2002d18:	ac400043 	ldbu	r17,1(r21)
 2002d1c:	29400017 	ldw	r5,0(r5)
 2002d20:	20800104 	addi	r2,r4,4
 2002d24:	d8802e15 	stw	r2,184(sp)
 2002d28:	d9402a15 	stw	r5,168(sp)
 2002d2c:	182b883a 	mov	r21,r3
 2002d30:	283e7b0e 	bge	r5,zero,2002720 <___vfprintf_internal_r+0x1c00>
 2002d34:	8c403fcc 	andi	r17,r17,255
 2002d38:	017fffc4 	movi	r5,-1
 2002d3c:	8c40201c 	xori	r17,r17,128
 2002d40:	d9402a15 	stw	r5,168(sp)
 2002d44:	8c7fe004 	addi	r17,r17,-128
 2002d48:	0037d706 	br	2000ca8 <___vfprintf_internal_r+0x188>
 2002d4c:	d8c02a17 	ldw	r3,168(sp)
 2002d50:	18c00084 	addi	r3,r3,2
 2002d54:	d8c02b15 	stw	r3,172(sp)
 2002d58:	1805883a 	mov	r2,r3
 2002d5c:	183d970e 	bge	r3,zero,20023bc <___vfprintf_internal_r+0x189c>
 2002d60:	003fd706 	br	2002cc0 <___vfprintf_internal_r+0x21a0>
 2002d64:	0005883a 	mov	r2,zero
 2002d68:	003f8f06 	br	2002ba8 <___vfprintf_internal_r+0x2088>
 2002d6c:	9080004c 	andi	r2,r18,1
 2002d70:	103f821e 	bne	r2,zero,2002b7c <___vfprintf_internal_r+0x205c>
 2002d74:	d8802117 	ldw	r2,132(sp)
 2002d78:	1405c83a 	sub	r2,r2,r16
 2002d7c:	d8803315 	stw	r2,204(sp)
 2002d80:	b47ef426 	beq	r22,r17,2002954 <___vfprintf_internal_r+0x1e34>
 2002d84:	dd802617 	ldw	r22,152(sp)
 2002d88:	003f1206 	br	20029d4 <___vfprintf_internal_r+0x1eb4>
 2002d8c:	d8c02b03 	ldbu	r3,172(sp)
 2002d90:	d8c02785 	stb	r3,158(sp)
 2002d94:	0038df06 	br	2001114 <___vfprintf_internal_r+0x5f4>
 2002d98:	d8c02b03 	ldbu	r3,172(sp)
 2002d9c:	d8c02785 	stb	r3,158(sp)
 2002da0:	0038aa06 	br	200104c <___vfprintf_internal_r+0x52c>
 2002da4:	d8c02b03 	ldbu	r3,172(sp)
 2002da8:	d8c02785 	stb	r3,158(sp)
 2002dac:	003a4306 	br	20016bc <___vfprintf_internal_r+0xb9c>
 2002db0:	d8c02b03 	ldbu	r3,172(sp)
 2002db4:	d8c02785 	stb	r3,158(sp)
 2002db8:	003af506 	br	2001990 <___vfprintf_internal_r+0xe70>
 2002dbc:	0005883a 	mov	r2,zero
 2002dc0:	003d7b06 	br	20023b0 <___vfprintf_internal_r+0x1890>
 2002dc4:	d8802344 	addi	r2,sp,141
 2002dc8:	003f1006 	br	2002a0c <___vfprintf_internal_r+0x1eec>
 2002dcc:	d8c02b03 	ldbu	r3,172(sp)
 2002dd0:	d8c02785 	stb	r3,158(sp)
 2002dd4:	0038fd06 	br	20011cc <___vfprintf_internal_r+0x6ac>
 2002dd8:	d8c02b03 	ldbu	r3,172(sp)
 2002ddc:	d8c02785 	stb	r3,158(sp)
 2002de0:	003a9706 	br	2001840 <___vfprintf_internal_r+0xd20>
 2002de4:	d8c02b03 	ldbu	r3,172(sp)
 2002de8:	d8c02785 	stb	r3,158(sp)
 2002dec:	003a1806 	br	2001650 <___vfprintf_internal_r+0xb30>
 2002df0:	d8c02b03 	ldbu	r3,172(sp)
 2002df4:	d8c02785 	stb	r3,158(sp)
 2002df8:	003abe06 	br	20018f4 <___vfprintf_internal_r+0xdd4>

02002dfc <__vfprintf_internal>:
 2002dfc:	008080b4 	movhi	r2,514
 2002e00:	10aaf804 	addi	r2,r2,-21536
 2002e04:	300f883a 	mov	r7,r6
 2002e08:	280d883a 	mov	r6,r5
 2002e0c:	200b883a 	mov	r5,r4
 2002e10:	11000017 	ldw	r4,0(r2)
 2002e14:	2000b201 	jmpi	2000b20 <___vfprintf_internal_r>

02002e18 <__sbprintf>:
 2002e18:	2880030b 	ldhu	r2,12(r5)
 2002e1c:	2ac01917 	ldw	r11,100(r5)
 2002e20:	2a80038b 	ldhu	r10,14(r5)
 2002e24:	2a400717 	ldw	r9,28(r5)
 2002e28:	2a000917 	ldw	r8,36(r5)
 2002e2c:	defee204 	addi	sp,sp,-1144
 2002e30:	00c10004 	movi	r3,1024
 2002e34:	dc011a15 	stw	r16,1128(sp)
 2002e38:	10bfff4c 	andi	r2,r2,65533
 2002e3c:	2821883a 	mov	r16,r5
 2002e40:	d8cb883a 	add	r5,sp,r3
 2002e44:	dc811c15 	stw	r18,1136(sp)
 2002e48:	dc411b15 	stw	r17,1132(sp)
 2002e4c:	dfc11d15 	stw	ra,1140(sp)
 2002e50:	2025883a 	mov	r18,r4
 2002e54:	d881030d 	sth	r2,1036(sp)
 2002e58:	dac11915 	stw	r11,1124(sp)
 2002e5c:	da81038d 	sth	r10,1038(sp)
 2002e60:	da410715 	stw	r9,1052(sp)
 2002e64:	da010915 	stw	r8,1060(sp)
 2002e68:	dec10015 	stw	sp,1024(sp)
 2002e6c:	dec10415 	stw	sp,1040(sp)
 2002e70:	d8c10215 	stw	r3,1032(sp)
 2002e74:	d8c10515 	stw	r3,1044(sp)
 2002e78:	d8010615 	stw	zero,1048(sp)
 2002e7c:	2000b200 	call	2000b20 <___vfprintf_internal_r>
 2002e80:	1023883a 	mov	r17,r2
 2002e84:	10000416 	blt	r2,zero,2002e98 <__sbprintf+0x80>
 2002e88:	d9410004 	addi	r5,sp,1024
 2002e8c:	9009883a 	mov	r4,r18
 2002e90:	2004af40 	call	2004af4 <_fflush_r>
 2002e94:	10000d1e 	bne	r2,zero,2002ecc <__sbprintf+0xb4>
 2002e98:	d881030b 	ldhu	r2,1036(sp)
 2002e9c:	1080100c 	andi	r2,r2,64
 2002ea0:	10000326 	beq	r2,zero,2002eb0 <__sbprintf+0x98>
 2002ea4:	8080030b 	ldhu	r2,12(r16)
 2002ea8:	10801014 	ori	r2,r2,64
 2002eac:	8080030d 	sth	r2,12(r16)
 2002eb0:	8805883a 	mov	r2,r17
 2002eb4:	dfc11d17 	ldw	ra,1140(sp)
 2002eb8:	dc811c17 	ldw	r18,1136(sp)
 2002ebc:	dc411b17 	ldw	r17,1132(sp)
 2002ec0:	dc011a17 	ldw	r16,1128(sp)
 2002ec4:	dec11e04 	addi	sp,sp,1144
 2002ec8:	f800283a 	ret
 2002ecc:	047fffc4 	movi	r17,-1
 2002ed0:	003ff106 	br	2002e98 <__sbprintf+0x80>

02002ed4 <__swsetup_r>:
 2002ed4:	008080b4 	movhi	r2,514
 2002ed8:	defffd04 	addi	sp,sp,-12
 2002edc:	10aaf804 	addi	r2,r2,-21536
 2002ee0:	dc400115 	stw	r17,4(sp)
 2002ee4:	2023883a 	mov	r17,r4
 2002ee8:	11000017 	ldw	r4,0(r2)
 2002eec:	dc000015 	stw	r16,0(sp)
 2002ef0:	dfc00215 	stw	ra,8(sp)
 2002ef4:	2821883a 	mov	r16,r5
 2002ef8:	20000226 	beq	r4,zero,2002f04 <__swsetup_r+0x30>
 2002efc:	20800e17 	ldw	r2,56(r4)
 2002f00:	10003126 	beq	r2,zero,2002fc8 <__swsetup_r+0xf4>
 2002f04:	8080030b 	ldhu	r2,12(r16)
 2002f08:	10c0020c 	andi	r3,r2,8
 2002f0c:	1009883a 	mov	r4,r2
 2002f10:	18000f26 	beq	r3,zero,2002f50 <__swsetup_r+0x7c>
 2002f14:	80c00417 	ldw	r3,16(r16)
 2002f18:	18001526 	beq	r3,zero,2002f70 <__swsetup_r+0x9c>
 2002f1c:	1100004c 	andi	r4,r2,1
 2002f20:	20001c1e 	bne	r4,zero,2002f94 <__swsetup_r+0xc0>
 2002f24:	1080008c 	andi	r2,r2,2
 2002f28:	1000291e 	bne	r2,zero,2002fd0 <__swsetup_r+0xfc>
 2002f2c:	80800517 	ldw	r2,20(r16)
 2002f30:	80800215 	stw	r2,8(r16)
 2002f34:	18001c26 	beq	r3,zero,2002fa8 <__swsetup_r+0xd4>
 2002f38:	0005883a 	mov	r2,zero
 2002f3c:	dfc00217 	ldw	ra,8(sp)
 2002f40:	dc400117 	ldw	r17,4(sp)
 2002f44:	dc000017 	ldw	r16,0(sp)
 2002f48:	dec00304 	addi	sp,sp,12
 2002f4c:	f800283a 	ret
 2002f50:	2080040c 	andi	r2,r4,16
 2002f54:	10002e26 	beq	r2,zero,2003010 <__swsetup_r+0x13c>
 2002f58:	2080010c 	andi	r2,r4,4
 2002f5c:	10001e1e 	bne	r2,zero,2002fd8 <__swsetup_r+0x104>
 2002f60:	80c00417 	ldw	r3,16(r16)
 2002f64:	20800214 	ori	r2,r4,8
 2002f68:	8080030d 	sth	r2,12(r16)
 2002f6c:	183feb1e 	bne	r3,zero,2002f1c <__swsetup_r+0x48>
 2002f70:	1100a00c 	andi	r4,r2,640
 2002f74:	01408004 	movi	r5,512
 2002f78:	217fe826 	beq	r4,r5,2002f1c <__swsetup_r+0x48>
 2002f7c:	800b883a 	mov	r5,r16
 2002f80:	8809883a 	mov	r4,r17
 2002f84:	2005a900 	call	2005a90 <__smakebuf_r>
 2002f88:	8080030b 	ldhu	r2,12(r16)
 2002f8c:	80c00417 	ldw	r3,16(r16)
 2002f90:	003fe206 	br	2002f1c <__swsetup_r+0x48>
 2002f94:	80800517 	ldw	r2,20(r16)
 2002f98:	80000215 	stw	zero,8(r16)
 2002f9c:	0085c83a 	sub	r2,zero,r2
 2002fa0:	80800615 	stw	r2,24(r16)
 2002fa4:	183fe41e 	bne	r3,zero,2002f38 <__swsetup_r+0x64>
 2002fa8:	80c0030b 	ldhu	r3,12(r16)
 2002fac:	0005883a 	mov	r2,zero
 2002fb0:	1900200c 	andi	r4,r3,128
 2002fb4:	203fe126 	beq	r4,zero,2002f3c <__swsetup_r+0x68>
 2002fb8:	18c01014 	ori	r3,r3,64
 2002fbc:	80c0030d 	sth	r3,12(r16)
 2002fc0:	00bfffc4 	movi	r2,-1
 2002fc4:	003fdd06 	br	2002f3c <__swsetup_r+0x68>
 2002fc8:	2004ee00 	call	2004ee0 <__sinit>
 2002fcc:	003fcd06 	br	2002f04 <__swsetup_r+0x30>
 2002fd0:	0005883a 	mov	r2,zero
 2002fd4:	003fd606 	br	2002f30 <__swsetup_r+0x5c>
 2002fd8:	81400c17 	ldw	r5,48(r16)
 2002fdc:	28000626 	beq	r5,zero,2002ff8 <__swsetup_r+0x124>
 2002fe0:	80801004 	addi	r2,r16,64
 2002fe4:	28800326 	beq	r5,r2,2002ff4 <__swsetup_r+0x120>
 2002fe8:	8809883a 	mov	r4,r17
 2002fec:	20050540 	call	2005054 <_free_r>
 2002ff0:	8100030b 	ldhu	r4,12(r16)
 2002ff4:	80000c15 	stw	zero,48(r16)
 2002ff8:	80c00417 	ldw	r3,16(r16)
 2002ffc:	00bff6c4 	movi	r2,-37
 2003000:	1108703a 	and	r4,r2,r4
 2003004:	80000115 	stw	zero,4(r16)
 2003008:	80c00015 	stw	r3,0(r16)
 200300c:	003fd506 	br	2002f64 <__swsetup_r+0x90>
 2003010:	00800244 	movi	r2,9
 2003014:	88800015 	stw	r2,0(r17)
 2003018:	20801014 	ori	r2,r4,64
 200301c:	8080030d 	sth	r2,12(r16)
 2003020:	00bfffc4 	movi	r2,-1
 2003024:	003fc506 	br	2002f3c <__swsetup_r+0x68>

02003028 <quorem>:
 2003028:	defff204 	addi	sp,sp,-56
 200302c:	ddc00b15 	stw	r23,44(sp)
 2003030:	20800417 	ldw	r2,16(r4)
 2003034:	2dc00417 	ldw	r23,16(r5)
 2003038:	dfc00d15 	stw	ra,52(sp)
 200303c:	df000c15 	stw	fp,48(sp)
 2003040:	dd800a15 	stw	r22,40(sp)
 2003044:	dd400915 	stw	r21,36(sp)
 2003048:	dd000815 	stw	r20,32(sp)
 200304c:	dcc00715 	stw	r19,28(sp)
 2003050:	dc800615 	stw	r18,24(sp)
 2003054:	dc400515 	stw	r17,20(sp)
 2003058:	dc000415 	stw	r16,16(sp)
 200305c:	15c07a16 	blt	r2,r23,2003248 <quorem+0x220>
 2003060:	bdffffc4 	addi	r23,r23,-1
 2003064:	bde9883a 	add	r20,r23,r23
 2003068:	28c00504 	addi	r3,r5,20
 200306c:	a529883a 	add	r20,r20,r20
 2003070:	1d39883a 	add	fp,r3,r20
 2003074:	24c00504 	addi	r19,r4,20
 2003078:	d9400215 	stw	r5,8(sp)
 200307c:	9d29883a 	add	r20,r19,r20
 2003080:	e1400017 	ldw	r5,0(fp)
 2003084:	d9000015 	stw	r4,0(sp)
 2003088:	a1000017 	ldw	r4,0(r20)
 200308c:	29400044 	addi	r5,r5,1
 2003090:	d8c00115 	stw	r3,4(sp)
 2003094:	dd000315 	stw	r20,12(sp)
 2003098:	200af000 	call	200af00 <__udivsi3>
 200309c:	1025883a 	mov	r18,r2
 20030a0:	10003026 	beq	r2,zero,2003164 <quorem+0x13c>
 20030a4:	dc400117 	ldw	r17,4(sp)
 20030a8:	9829883a 	mov	r20,r19
 20030ac:	002d883a 	mov	r22,zero
 20030b0:	0021883a 	mov	r16,zero
 20030b4:	8d400017 	ldw	r21,0(r17)
 20030b8:	900b883a 	mov	r5,r18
 20030bc:	8c400104 	addi	r17,r17,4
 20030c0:	a93fffcc 	andi	r4,r21,65535
 20030c4:	200afbc0 	call	200afbc <__mulsi3>
 20030c8:	a808d43a 	srli	r4,r21,16
 20030cc:	900b883a 	mov	r5,r18
 20030d0:	15ad883a 	add	r22,r2,r22
 20030d4:	200afbc0 	call	200afbc <__mulsi3>
 20030d8:	a1000017 	ldw	r4,0(r20)
 20030dc:	b00cd43a 	srli	r6,r22,16
 20030e0:	b0ffffcc 	andi	r3,r22,65535
 20030e4:	217fffcc 	andi	r5,r4,65535
 20030e8:	2c21883a 	add	r16,r5,r16
 20030ec:	80c7c83a 	sub	r3,r16,r3
 20030f0:	2008d43a 	srli	r4,r4,16
 20030f4:	1185883a 	add	r2,r2,r6
 20030f8:	1821d43a 	srai	r16,r3,16
 20030fc:	117fffcc 	andi	r5,r2,65535
 2003100:	2149c83a 	sub	r4,r4,r5
 2003104:	2421883a 	add	r16,r4,r16
 2003108:	8008943a 	slli	r4,r16,16
 200310c:	18ffffcc 	andi	r3,r3,65535
 2003110:	102cd43a 	srli	r22,r2,16
 2003114:	20c8b03a 	or	r4,r4,r3
 2003118:	a1000015 	stw	r4,0(r20)
 200311c:	8021d43a 	srai	r16,r16,16
 2003120:	a5000104 	addi	r20,r20,4
 2003124:	e47fe32e 	bgeu	fp,r17,20030b4 <quorem+0x8c>
 2003128:	d8c00317 	ldw	r3,12(sp)
 200312c:	18800017 	ldw	r2,0(r3)
 2003130:	10000c1e 	bne	r2,zero,2003164 <quorem+0x13c>
 2003134:	18bfff04 	addi	r2,r3,-4
 2003138:	9880082e 	bgeu	r19,r2,200315c <quorem+0x134>
 200313c:	18ffff17 	ldw	r3,-4(r3)
 2003140:	18000326 	beq	r3,zero,2003150 <quorem+0x128>
 2003144:	00000506 	br	200315c <quorem+0x134>
 2003148:	10c00017 	ldw	r3,0(r2)
 200314c:	1800031e 	bne	r3,zero,200315c <quorem+0x134>
 2003150:	10bfff04 	addi	r2,r2,-4
 2003154:	bdffffc4 	addi	r23,r23,-1
 2003158:	98bffb36 	bltu	r19,r2,2003148 <quorem+0x120>
 200315c:	d8c00017 	ldw	r3,0(sp)
 2003160:	1dc00415 	stw	r23,16(r3)
 2003164:	d9400217 	ldw	r5,8(sp)
 2003168:	d9000017 	ldw	r4,0(sp)
 200316c:	200728c0 	call	200728c <__mcmp>
 2003170:	10002816 	blt	r2,zero,2003214 <quorem+0x1ec>
 2003174:	dc400117 	ldw	r17,4(sp)
 2003178:	94800044 	addi	r18,r18,1
 200317c:	980d883a 	mov	r6,r19
 2003180:	0007883a 	mov	r3,zero
 2003184:	31000017 	ldw	r4,0(r6)
 2003188:	89400017 	ldw	r5,0(r17)
 200318c:	31800104 	addi	r6,r6,4
 2003190:	20bfffcc 	andi	r2,r4,65535
 2003194:	10c7883a 	add	r3,r2,r3
 2003198:	28bfffcc 	andi	r2,r5,65535
 200319c:	1885c83a 	sub	r2,r3,r2
 20031a0:	280ad43a 	srli	r5,r5,16
 20031a4:	2008d43a 	srli	r4,r4,16
 20031a8:	1007d43a 	srai	r3,r2,16
 20031ac:	10bfffcc 	andi	r2,r2,65535
 20031b0:	2149c83a 	sub	r4,r4,r5
 20031b4:	20c9883a 	add	r4,r4,r3
 20031b8:	200a943a 	slli	r5,r4,16
 20031bc:	8c400104 	addi	r17,r17,4
 20031c0:	2007d43a 	srai	r3,r4,16
 20031c4:	2884b03a 	or	r2,r5,r2
 20031c8:	30bfff15 	stw	r2,-4(r6)
 20031cc:	e47fed2e 	bgeu	fp,r17,2003184 <quorem+0x15c>
 20031d0:	bdc5883a 	add	r2,r23,r23
 20031d4:	1085883a 	add	r2,r2,r2
 20031d8:	9887883a 	add	r3,r19,r2
 20031dc:	18800017 	ldw	r2,0(r3)
 20031e0:	10000c1e 	bne	r2,zero,2003214 <quorem+0x1ec>
 20031e4:	18bfff04 	addi	r2,r3,-4
 20031e8:	9880082e 	bgeu	r19,r2,200320c <quorem+0x1e4>
 20031ec:	18ffff17 	ldw	r3,-4(r3)
 20031f0:	18000326 	beq	r3,zero,2003200 <quorem+0x1d8>
 20031f4:	00000506 	br	200320c <quorem+0x1e4>
 20031f8:	10c00017 	ldw	r3,0(r2)
 20031fc:	1800031e 	bne	r3,zero,200320c <quorem+0x1e4>
 2003200:	10bfff04 	addi	r2,r2,-4
 2003204:	bdffffc4 	addi	r23,r23,-1
 2003208:	98bffb36 	bltu	r19,r2,20031f8 <quorem+0x1d0>
 200320c:	d8c00017 	ldw	r3,0(sp)
 2003210:	1dc00415 	stw	r23,16(r3)
 2003214:	9005883a 	mov	r2,r18
 2003218:	dfc00d17 	ldw	ra,52(sp)
 200321c:	df000c17 	ldw	fp,48(sp)
 2003220:	ddc00b17 	ldw	r23,44(sp)
 2003224:	dd800a17 	ldw	r22,40(sp)
 2003228:	dd400917 	ldw	r21,36(sp)
 200322c:	dd000817 	ldw	r20,32(sp)
 2003230:	dcc00717 	ldw	r19,28(sp)
 2003234:	dc800617 	ldw	r18,24(sp)
 2003238:	dc400517 	ldw	r17,20(sp)
 200323c:	dc000417 	ldw	r16,16(sp)
 2003240:	dec00e04 	addi	sp,sp,56
 2003244:	f800283a 	ret
 2003248:	0005883a 	mov	r2,zero
 200324c:	003ff206 	br	2003218 <quorem+0x1f0>

02003250 <_dtoa_r>:
 2003250:	20801017 	ldw	r2,64(r4)
 2003254:	deffde04 	addi	sp,sp,-136
 2003258:	df002015 	stw	fp,128(sp)
 200325c:	dcc01b15 	stw	r19,108(sp)
 2003260:	dc801a15 	stw	r18,104(sp)
 2003264:	dc401915 	stw	r17,100(sp)
 2003268:	dc001815 	stw	r16,96(sp)
 200326c:	dfc02115 	stw	ra,132(sp)
 2003270:	ddc01f15 	stw	r23,124(sp)
 2003274:	dd801e15 	stw	r22,120(sp)
 2003278:	dd401d15 	stw	r21,116(sp)
 200327c:	dd001c15 	stw	r20,112(sp)
 2003280:	d9c00315 	stw	r7,12(sp)
 2003284:	2039883a 	mov	fp,r4
 2003288:	3023883a 	mov	r17,r6
 200328c:	2825883a 	mov	r18,r5
 2003290:	dc002417 	ldw	r16,144(sp)
 2003294:	3027883a 	mov	r19,r6
 2003298:	10000826 	beq	r2,zero,20032bc <_dtoa_r+0x6c>
 200329c:	21801117 	ldw	r6,68(r4)
 20032a0:	00c00044 	movi	r3,1
 20032a4:	100b883a 	mov	r5,r2
 20032a8:	1986983a 	sll	r3,r3,r6
 20032ac:	11800115 	stw	r6,4(r2)
 20032b0:	10c00215 	stw	r3,8(r2)
 20032b4:	20069b00 	call	20069b0 <_Bfree>
 20032b8:	e0001015 	stw	zero,64(fp)
 20032bc:	88002e16 	blt	r17,zero,2003378 <_dtoa_r+0x128>
 20032c0:	80000015 	stw	zero,0(r16)
 20032c4:	889ffc2c 	andhi	r2,r17,32752
 20032c8:	00dffc34 	movhi	r3,32752
 20032cc:	10c01c26 	beq	r2,r3,2003340 <_dtoa_r+0xf0>
 20032d0:	000d883a 	mov	r6,zero
 20032d4:	000f883a 	mov	r7,zero
 20032d8:	9009883a 	mov	r4,r18
 20032dc:	980b883a 	mov	r5,r19
 20032e0:	200c2600 	call	200c260 <__eqdf2>
 20032e4:	10002b1e 	bne	r2,zero,2003394 <_dtoa_r+0x144>
 20032e8:	d9c02317 	ldw	r7,140(sp)
 20032ec:	00800044 	movi	r2,1
 20032f0:	38800015 	stw	r2,0(r7)
 20032f4:	d8802517 	ldw	r2,148(sp)
 20032f8:	10019e26 	beq	r2,zero,2003974 <_dtoa_r+0x724>
 20032fc:	d8c02517 	ldw	r3,148(sp)
 2003300:	008080b4 	movhi	r2,514
 2003304:	10a35344 	addi	r2,r2,-29363
 2003308:	18800015 	stw	r2,0(r3)
 200330c:	10bfffc4 	addi	r2,r2,-1
 2003310:	dfc02117 	ldw	ra,132(sp)
 2003314:	df002017 	ldw	fp,128(sp)
 2003318:	ddc01f17 	ldw	r23,124(sp)
 200331c:	dd801e17 	ldw	r22,120(sp)
 2003320:	dd401d17 	ldw	r21,116(sp)
 2003324:	dd001c17 	ldw	r20,112(sp)
 2003328:	dcc01b17 	ldw	r19,108(sp)
 200332c:	dc801a17 	ldw	r18,104(sp)
 2003330:	dc401917 	ldw	r17,100(sp)
 2003334:	dc001817 	ldw	r16,96(sp)
 2003338:	dec02204 	addi	sp,sp,136
 200333c:	f800283a 	ret
 2003340:	d8c02317 	ldw	r3,140(sp)
 2003344:	0089c3c4 	movi	r2,9999
 2003348:	18800015 	stw	r2,0(r3)
 200334c:	90017726 	beq	r18,zero,200392c <_dtoa_r+0x6dc>
 2003350:	008080b4 	movhi	r2,514
 2003354:	10a35f04 	addi	r2,r2,-29316
 2003358:	d9002517 	ldw	r4,148(sp)
 200335c:	203fec26 	beq	r4,zero,2003310 <_dtoa_r+0xc0>
 2003360:	10c000c7 	ldb	r3,3(r2)
 2003364:	1801781e 	bne	r3,zero,2003948 <_dtoa_r+0x6f8>
 2003368:	10c000c4 	addi	r3,r2,3
 200336c:	d9802517 	ldw	r6,148(sp)
 2003370:	30c00015 	stw	r3,0(r6)
 2003374:	003fe606 	br	2003310 <_dtoa_r+0xc0>
 2003378:	04e00034 	movhi	r19,32768
 200337c:	9cffffc4 	addi	r19,r19,-1
 2003380:	00800044 	movi	r2,1
 2003384:	8ce6703a 	and	r19,r17,r19
 2003388:	80800015 	stw	r2,0(r16)
 200338c:	9823883a 	mov	r17,r19
 2003390:	003fcc06 	br	20032c4 <_dtoa_r+0x74>
 2003394:	d8800204 	addi	r2,sp,8
 2003398:	d8800015 	stw	r2,0(sp)
 200339c:	d9c00104 	addi	r7,sp,4
 20033a0:	900b883a 	mov	r5,r18
 20033a4:	980d883a 	mov	r6,r19
 20033a8:	e009883a 	mov	r4,fp
 20033ac:	8820d53a 	srli	r16,r17,20
 20033b0:	20076580 	call	2007658 <__d2b>
 20033b4:	d8800915 	stw	r2,36(sp)
 20033b8:	8001651e 	bne	r16,zero,2003950 <_dtoa_r+0x700>
 20033bc:	dd800217 	ldw	r22,8(sp)
 20033c0:	dc000117 	ldw	r16,4(sp)
 20033c4:	00800804 	movi	r2,32
 20033c8:	b421883a 	add	r16,r22,r16
 20033cc:	80c10c84 	addi	r3,r16,1074
 20033d0:	10c2d10e 	bge	r2,r3,2003f18 <_dtoa_r+0xcc8>
 20033d4:	00801004 	movi	r2,64
 20033d8:	81010484 	addi	r4,r16,1042
 20033dc:	10c7c83a 	sub	r3,r2,r3
 20033e0:	9108d83a 	srl	r4,r18,r4
 20033e4:	88e2983a 	sll	r17,r17,r3
 20033e8:	2448b03a 	or	r4,r4,r17
 20033ec:	200d77c0 	call	200d77c <__floatunsidf>
 20033f0:	017f8434 	movhi	r5,65040
 20033f4:	01800044 	movi	r6,1
 20033f8:	1009883a 	mov	r4,r2
 20033fc:	194b883a 	add	r5,r3,r5
 2003400:	843fffc4 	addi	r16,r16,-1
 2003404:	d9801115 	stw	r6,68(sp)
 2003408:	000d883a 	mov	r6,zero
 200340c:	01cffe34 	movhi	r7,16376
 2003410:	200cd240 	call	200cd24 <__subdf3>
 2003414:	0198dbf4 	movhi	r6,25455
 2003418:	01cff4f4 	movhi	r7,16339
 200341c:	3190d844 	addi	r6,r6,17249
 2003420:	39e1e9c4 	addi	r7,r7,-30809
 2003424:	1009883a 	mov	r4,r2
 2003428:	180b883a 	mov	r5,r3
 200342c:	200c4b80 	call	200c4b8 <__muldf3>
 2003430:	01a2d874 	movhi	r6,35681
 2003434:	01cff1f4 	movhi	r7,16327
 2003438:	31b22cc4 	addi	r6,r6,-14157
 200343c:	39e28a04 	addi	r7,r7,-30168
 2003440:	180b883a 	mov	r5,r3
 2003444:	1009883a 	mov	r4,r2
 2003448:	200afe40 	call	200afe4 <__adddf3>
 200344c:	8009883a 	mov	r4,r16
 2003450:	1029883a 	mov	r20,r2
 2003454:	1823883a 	mov	r17,r3
 2003458:	200d6a00 	call	200d6a0 <__floatsidf>
 200345c:	019427f4 	movhi	r6,20639
 2003460:	01cff4f4 	movhi	r7,16339
 2003464:	319e7ec4 	addi	r6,r6,31227
 2003468:	39d104c4 	addi	r7,r7,17427
 200346c:	1009883a 	mov	r4,r2
 2003470:	180b883a 	mov	r5,r3
 2003474:	200c4b80 	call	200c4b8 <__muldf3>
 2003478:	100d883a 	mov	r6,r2
 200347c:	180f883a 	mov	r7,r3
 2003480:	a009883a 	mov	r4,r20
 2003484:	880b883a 	mov	r5,r17
 2003488:	200afe40 	call	200afe4 <__adddf3>
 200348c:	1009883a 	mov	r4,r2
 2003490:	180b883a 	mov	r5,r3
 2003494:	1029883a 	mov	r20,r2
 2003498:	1823883a 	mov	r17,r3
 200349c:	200d6200 	call	200d620 <__fixdfsi>
 20034a0:	000d883a 	mov	r6,zero
 20034a4:	000f883a 	mov	r7,zero
 20034a8:	a009883a 	mov	r4,r20
 20034ac:	880b883a 	mov	r5,r17
 20034b0:	d8800515 	stw	r2,20(sp)
 20034b4:	200c3c40 	call	200c3c4 <__ledf2>
 20034b8:	10028716 	blt	r2,zero,2003ed8 <_dtoa_r+0xc88>
 20034bc:	d8c00517 	ldw	r3,20(sp)
 20034c0:	00800584 	movi	r2,22
 20034c4:	10c27536 	bltu	r2,r3,2003e9c <_dtoa_r+0xc4c>
 20034c8:	180490fa 	slli	r2,r3,3
 20034cc:	00c080b4 	movhi	r3,514
 20034d0:	18e37b04 	addi	r3,r3,-29204
 20034d4:	1885883a 	add	r2,r3,r2
 20034d8:	11000017 	ldw	r4,0(r2)
 20034dc:	11400117 	ldw	r5,4(r2)
 20034e0:	900d883a 	mov	r6,r18
 20034e4:	980f883a 	mov	r7,r19
 20034e8:	200c2e80 	call	200c2e8 <__gedf2>
 20034ec:	00828d0e 	bge	zero,r2,2003f24 <_dtoa_r+0xcd4>
 20034f0:	d9000517 	ldw	r4,20(sp)
 20034f4:	d8000e15 	stw	zero,56(sp)
 20034f8:	213fffc4 	addi	r4,r4,-1
 20034fc:	d9000515 	stw	r4,20(sp)
 2003500:	b42dc83a 	sub	r22,r22,r16
 2003504:	b5bfffc4 	addi	r22,r22,-1
 2003508:	b0026f16 	blt	r22,zero,2003ec8 <_dtoa_r+0xc78>
 200350c:	d8000815 	stw	zero,32(sp)
 2003510:	d9c00517 	ldw	r7,20(sp)
 2003514:	38026416 	blt	r7,zero,2003ea8 <_dtoa_r+0xc58>
 2003518:	b1ed883a 	add	r22,r22,r7
 200351c:	d9c00d15 	stw	r7,52(sp)
 2003520:	d8000a15 	stw	zero,40(sp)
 2003524:	d9800317 	ldw	r6,12(sp)
 2003528:	00800244 	movi	r2,9
 200352c:	11811436 	bltu	r2,r6,2003980 <_dtoa_r+0x730>
 2003530:	00800144 	movi	r2,5
 2003534:	1184e10e 	bge	r2,r6,20048bc <_dtoa_r+0x166c>
 2003538:	31bfff04 	addi	r6,r6,-4
 200353c:	d9800315 	stw	r6,12(sp)
 2003540:	0023883a 	mov	r17,zero
 2003544:	d9800317 	ldw	r6,12(sp)
 2003548:	008000c4 	movi	r2,3
 200354c:	30836726 	beq	r6,r2,20042ec <_dtoa_r+0x109c>
 2003550:	1183410e 	bge	r2,r6,2004258 <_dtoa_r+0x1008>
 2003554:	d9c00317 	ldw	r7,12(sp)
 2003558:	00800104 	movi	r2,4
 200355c:	38827c26 	beq	r7,r2,2003f50 <_dtoa_r+0xd00>
 2003560:	00800144 	movi	r2,5
 2003564:	3884c41e 	bne	r7,r2,2004878 <_dtoa_r+0x1628>
 2003568:	00800044 	movi	r2,1
 200356c:	d8800b15 	stw	r2,44(sp)
 2003570:	d8c00517 	ldw	r3,20(sp)
 2003574:	d9002217 	ldw	r4,136(sp)
 2003578:	1907883a 	add	r3,r3,r4
 200357c:	19800044 	addi	r6,r3,1
 2003580:	d8c00c15 	stw	r3,48(sp)
 2003584:	d9800615 	stw	r6,24(sp)
 2003588:	0183a40e 	bge	zero,r6,200441c <_dtoa_r+0x11cc>
 200358c:	d9800617 	ldw	r6,24(sp)
 2003590:	3021883a 	mov	r16,r6
 2003594:	e0001115 	stw	zero,68(fp)
 2003598:	008005c4 	movi	r2,23
 200359c:	1184c92e 	bgeu	r2,r6,20048c4 <_dtoa_r+0x1674>
 20035a0:	00c00044 	movi	r3,1
 20035a4:	00800104 	movi	r2,4
 20035a8:	1085883a 	add	r2,r2,r2
 20035ac:	11000504 	addi	r4,r2,20
 20035b0:	180b883a 	mov	r5,r3
 20035b4:	18c00044 	addi	r3,r3,1
 20035b8:	313ffb2e 	bgeu	r6,r4,20035a8 <_dtoa_r+0x358>
 20035bc:	e1401115 	stw	r5,68(fp)
 20035c0:	e009883a 	mov	r4,fp
 20035c4:	20069080 	call	2006908 <_Balloc>
 20035c8:	d8800715 	stw	r2,28(sp)
 20035cc:	e0801015 	stw	r2,64(fp)
 20035d0:	00800384 	movi	r2,14
 20035d4:	1400f736 	bltu	r2,r16,20039b4 <_dtoa_r+0x764>
 20035d8:	8800f626 	beq	r17,zero,20039b4 <_dtoa_r+0x764>
 20035dc:	d9c00517 	ldw	r7,20(sp)
 20035e0:	01c39a0e 	bge	zero,r7,200444c <_dtoa_r+0x11fc>
 20035e4:	388003cc 	andi	r2,r7,15
 20035e8:	100490fa 	slli	r2,r2,3
 20035ec:	382bd13a 	srai	r21,r7,4
 20035f0:	00c080b4 	movhi	r3,514
 20035f4:	18e37b04 	addi	r3,r3,-29204
 20035f8:	1885883a 	add	r2,r3,r2
 20035fc:	a8c0040c 	andi	r3,r21,16
 2003600:	12400017 	ldw	r9,0(r2)
 2003604:	12000117 	ldw	r8,4(r2)
 2003608:	18037926 	beq	r3,zero,20043f0 <_dtoa_r+0x11a0>
 200360c:	008080b4 	movhi	r2,514
 2003610:	10a37104 	addi	r2,r2,-29244
 2003614:	11800817 	ldw	r6,32(r2)
 2003618:	11c00917 	ldw	r7,36(r2)
 200361c:	9009883a 	mov	r4,r18
 2003620:	980b883a 	mov	r5,r19
 2003624:	da001715 	stw	r8,92(sp)
 2003628:	da401615 	stw	r9,88(sp)
 200362c:	200b8900 	call	200b890 <__divdf3>
 2003630:	da001717 	ldw	r8,92(sp)
 2003634:	da401617 	ldw	r9,88(sp)
 2003638:	ad4003cc 	andi	r21,r21,15
 200363c:	040000c4 	movi	r16,3
 2003640:	1023883a 	mov	r17,r2
 2003644:	1829883a 	mov	r20,r3
 2003648:	a8001126 	beq	r21,zero,2003690 <_dtoa_r+0x440>
 200364c:	05c080b4 	movhi	r23,514
 2003650:	bde37104 	addi	r23,r23,-29244
 2003654:	4805883a 	mov	r2,r9
 2003658:	4007883a 	mov	r3,r8
 200365c:	a980004c 	andi	r6,r21,1
 2003660:	1009883a 	mov	r4,r2
 2003664:	a82bd07a 	srai	r21,r21,1
 2003668:	180b883a 	mov	r5,r3
 200366c:	30000426 	beq	r6,zero,2003680 <_dtoa_r+0x430>
 2003670:	b9800017 	ldw	r6,0(r23)
 2003674:	b9c00117 	ldw	r7,4(r23)
 2003678:	84000044 	addi	r16,r16,1
 200367c:	200c4b80 	call	200c4b8 <__muldf3>
 2003680:	bdc00204 	addi	r23,r23,8
 2003684:	a83ff51e 	bne	r21,zero,200365c <_dtoa_r+0x40c>
 2003688:	1013883a 	mov	r9,r2
 200368c:	1811883a 	mov	r8,r3
 2003690:	480d883a 	mov	r6,r9
 2003694:	400f883a 	mov	r7,r8
 2003698:	8809883a 	mov	r4,r17
 200369c:	a00b883a 	mov	r5,r20
 20036a0:	200b8900 	call	200b890 <__divdf3>
 20036a4:	d8800f15 	stw	r2,60(sp)
 20036a8:	d8c01015 	stw	r3,64(sp)
 20036ac:	d8c00e17 	ldw	r3,56(sp)
 20036b0:	18000626 	beq	r3,zero,20036cc <_dtoa_r+0x47c>
 20036b4:	d9000f17 	ldw	r4,60(sp)
 20036b8:	d9401017 	ldw	r5,64(sp)
 20036bc:	000d883a 	mov	r6,zero
 20036c0:	01cffc34 	movhi	r7,16368
 20036c4:	200c3c40 	call	200c3c4 <__ledf2>
 20036c8:	10040b16 	blt	r2,zero,20046f8 <_dtoa_r+0x14a8>
 20036cc:	8009883a 	mov	r4,r16
 20036d0:	200d6a00 	call	200d6a0 <__floatsidf>
 20036d4:	d9800f17 	ldw	r6,60(sp)
 20036d8:	d9c01017 	ldw	r7,64(sp)
 20036dc:	1009883a 	mov	r4,r2
 20036e0:	180b883a 	mov	r5,r3
 20036e4:	200c4b80 	call	200c4b8 <__muldf3>
 20036e8:	000d883a 	mov	r6,zero
 20036ec:	01d00734 	movhi	r7,16412
 20036f0:	1009883a 	mov	r4,r2
 20036f4:	180b883a 	mov	r5,r3
 20036f8:	200afe40 	call	200afe4 <__adddf3>
 20036fc:	1021883a 	mov	r16,r2
 2003700:	d8800617 	ldw	r2,24(sp)
 2003704:	047f3034 	movhi	r17,64704
 2003708:	1c63883a 	add	r17,r3,r17
 200370c:	10031826 	beq	r2,zero,2004370 <_dtoa_r+0x1120>
 2003710:	d8c00517 	ldw	r3,20(sp)
 2003714:	db000617 	ldw	r12,24(sp)
 2003718:	d8c01315 	stw	r3,76(sp)
 200371c:	d9000b17 	ldw	r4,44(sp)
 2003720:	20038f26 	beq	r4,zero,2004560 <_dtoa_r+0x1310>
 2003724:	60bfffc4 	addi	r2,r12,-1
 2003728:	100490fa 	slli	r2,r2,3
 200372c:	00c080b4 	movhi	r3,514
 2003730:	18e37b04 	addi	r3,r3,-29204
 2003734:	1885883a 	add	r2,r3,r2
 2003738:	11800017 	ldw	r6,0(r2)
 200373c:	11c00117 	ldw	r7,4(r2)
 2003740:	d8800717 	ldw	r2,28(sp)
 2003744:	0009883a 	mov	r4,zero
 2003748:	014ff834 	movhi	r5,16352
 200374c:	db001615 	stw	r12,88(sp)
 2003750:	15c00044 	addi	r23,r2,1
 2003754:	200b8900 	call	200b890 <__divdf3>
 2003758:	800d883a 	mov	r6,r16
 200375c:	880f883a 	mov	r7,r17
 2003760:	1009883a 	mov	r4,r2
 2003764:	180b883a 	mov	r5,r3
 2003768:	200cd240 	call	200cd24 <__subdf3>
 200376c:	d9401017 	ldw	r5,64(sp)
 2003770:	d9000f17 	ldw	r4,60(sp)
 2003774:	102b883a 	mov	r21,r2
 2003778:	d8c01215 	stw	r3,72(sp)
 200377c:	200d6200 	call	200d620 <__fixdfsi>
 2003780:	1009883a 	mov	r4,r2
 2003784:	1029883a 	mov	r20,r2
 2003788:	200d6a00 	call	200d6a0 <__floatsidf>
 200378c:	d9000f17 	ldw	r4,60(sp)
 2003790:	d9401017 	ldw	r5,64(sp)
 2003794:	100d883a 	mov	r6,r2
 2003798:	180f883a 	mov	r7,r3
 200379c:	200cd240 	call	200cd24 <__subdf3>
 20037a0:	1823883a 	mov	r17,r3
 20037a4:	d8c00717 	ldw	r3,28(sp)
 20037a8:	d9401217 	ldw	r5,72(sp)
 20037ac:	a2000c04 	addi	r8,r20,48
 20037b0:	1021883a 	mov	r16,r2
 20037b4:	1a000005 	stb	r8,0(r3)
 20037b8:	800d883a 	mov	r6,r16
 20037bc:	880f883a 	mov	r7,r17
 20037c0:	a809883a 	mov	r4,r21
 20037c4:	4029883a 	mov	r20,r8
 20037c8:	200c2e80 	call	200c2e8 <__gedf2>
 20037cc:	00841d16 	blt	zero,r2,2004844 <_dtoa_r+0x15f4>
 20037d0:	800d883a 	mov	r6,r16
 20037d4:	880f883a 	mov	r7,r17
 20037d8:	0009883a 	mov	r4,zero
 20037dc:	014ffc34 	movhi	r5,16368
 20037e0:	200cd240 	call	200cd24 <__subdf3>
 20037e4:	d9401217 	ldw	r5,72(sp)
 20037e8:	100d883a 	mov	r6,r2
 20037ec:	180f883a 	mov	r7,r3
 20037f0:	a809883a 	mov	r4,r21
 20037f4:	200c2e80 	call	200c2e8 <__gedf2>
 20037f8:	db001617 	ldw	r12,88(sp)
 20037fc:	00840e16 	blt	zero,r2,2004838 <_dtoa_r+0x15e8>
 2003800:	00800044 	movi	r2,1
 2003804:	13006b0e 	bge	r2,r12,20039b4 <_dtoa_r+0x764>
 2003808:	d9000717 	ldw	r4,28(sp)
 200380c:	dd800f15 	stw	r22,60(sp)
 2003810:	dcc01015 	stw	r19,64(sp)
 2003814:	2319883a 	add	r12,r4,r12
 2003818:	dcc01217 	ldw	r19,72(sp)
 200381c:	602d883a 	mov	r22,r12
 2003820:	dc801215 	stw	r18,72(sp)
 2003824:	b825883a 	mov	r18,r23
 2003828:	00000906 	br	2003850 <_dtoa_r+0x600>
 200382c:	200cd240 	call	200cd24 <__subdf3>
 2003830:	a80d883a 	mov	r6,r21
 2003834:	980f883a 	mov	r7,r19
 2003838:	1009883a 	mov	r4,r2
 200383c:	180b883a 	mov	r5,r3
 2003840:	200c3c40 	call	200c3c4 <__ledf2>
 2003844:	1003e816 	blt	r2,zero,20047e8 <_dtoa_r+0x1598>
 2003848:	b825883a 	mov	r18,r23
 200384c:	bd83e926 	beq	r23,r22,20047f4 <_dtoa_r+0x15a4>
 2003850:	a809883a 	mov	r4,r21
 2003854:	980b883a 	mov	r5,r19
 2003858:	000d883a 	mov	r6,zero
 200385c:	01d00934 	movhi	r7,16420
 2003860:	200c4b80 	call	200c4b8 <__muldf3>
 2003864:	000d883a 	mov	r6,zero
 2003868:	01d00934 	movhi	r7,16420
 200386c:	8009883a 	mov	r4,r16
 2003870:	880b883a 	mov	r5,r17
 2003874:	102b883a 	mov	r21,r2
 2003878:	1827883a 	mov	r19,r3
 200387c:	200c4b80 	call	200c4b8 <__muldf3>
 2003880:	180b883a 	mov	r5,r3
 2003884:	1009883a 	mov	r4,r2
 2003888:	1821883a 	mov	r16,r3
 200388c:	1023883a 	mov	r17,r2
 2003890:	200d6200 	call	200d620 <__fixdfsi>
 2003894:	1009883a 	mov	r4,r2
 2003898:	1029883a 	mov	r20,r2
 200389c:	200d6a00 	call	200d6a0 <__floatsidf>
 20038a0:	8809883a 	mov	r4,r17
 20038a4:	800b883a 	mov	r5,r16
 20038a8:	100d883a 	mov	r6,r2
 20038ac:	180f883a 	mov	r7,r3
 20038b0:	200cd240 	call	200cd24 <__subdf3>
 20038b4:	a5000c04 	addi	r20,r20,48
 20038b8:	a80d883a 	mov	r6,r21
 20038bc:	980f883a 	mov	r7,r19
 20038c0:	1009883a 	mov	r4,r2
 20038c4:	180b883a 	mov	r5,r3
 20038c8:	95000005 	stb	r20,0(r18)
 20038cc:	1021883a 	mov	r16,r2
 20038d0:	1823883a 	mov	r17,r3
 20038d4:	200c3c40 	call	200c3c4 <__ledf2>
 20038d8:	bdc00044 	addi	r23,r23,1
 20038dc:	800d883a 	mov	r6,r16
 20038e0:	880f883a 	mov	r7,r17
 20038e4:	0009883a 	mov	r4,zero
 20038e8:	014ffc34 	movhi	r5,16368
 20038ec:	103fcf0e 	bge	r2,zero,200382c <_dtoa_r+0x5dc>
 20038f0:	d8c01317 	ldw	r3,76(sp)
 20038f4:	d8c00515 	stw	r3,20(sp)
 20038f8:	d9400917 	ldw	r5,36(sp)
 20038fc:	e009883a 	mov	r4,fp
 2003900:	20069b00 	call	20069b0 <_Bfree>
 2003904:	d9000517 	ldw	r4,20(sp)
 2003908:	d9802317 	ldw	r6,140(sp)
 200390c:	d9c02517 	ldw	r7,148(sp)
 2003910:	b8000005 	stb	zero,0(r23)
 2003914:	20800044 	addi	r2,r4,1
 2003918:	30800015 	stw	r2,0(r6)
 200391c:	3802aa26 	beq	r7,zero,20043c8 <_dtoa_r+0x1178>
 2003920:	3dc00015 	stw	r23,0(r7)
 2003924:	d8800717 	ldw	r2,28(sp)
 2003928:	003e7906 	br	2003310 <_dtoa_r+0xc0>
 200392c:	00800434 	movhi	r2,16
 2003930:	10bfffc4 	addi	r2,r2,-1
 2003934:	88a2703a 	and	r17,r17,r2
 2003938:	883e851e 	bne	r17,zero,2003350 <_dtoa_r+0x100>
 200393c:	008080b4 	movhi	r2,514
 2003940:	10a35c04 	addi	r2,r2,-29328
 2003944:	003e8406 	br	2003358 <_dtoa_r+0x108>
 2003948:	10c00204 	addi	r3,r2,8
 200394c:	003e8706 	br	200336c <_dtoa_r+0x11c>
 2003950:	01400434 	movhi	r5,16
 2003954:	297fffc4 	addi	r5,r5,-1
 2003958:	994a703a 	and	r5,r19,r5
 200395c:	9009883a 	mov	r4,r18
 2003960:	843f0044 	addi	r16,r16,-1023
 2003964:	294ffc34 	orhi	r5,r5,16368
 2003968:	dd800217 	ldw	r22,8(sp)
 200396c:	d8001115 	stw	zero,68(sp)
 2003970:	003ea506 	br	2003408 <_dtoa_r+0x1b8>
 2003974:	008080b4 	movhi	r2,514
 2003978:	10a35304 	addi	r2,r2,-29364
 200397c:	003e6406 	br	2003310 <_dtoa_r+0xc0>
 2003980:	e0001115 	stw	zero,68(fp)
 2003984:	000b883a 	mov	r5,zero
 2003988:	e009883a 	mov	r4,fp
 200398c:	20069080 	call	2006908 <_Balloc>
 2003990:	01bfffc4 	movi	r6,-1
 2003994:	01c00044 	movi	r7,1
 2003998:	d8800715 	stw	r2,28(sp)
 200399c:	d9800c15 	stw	r6,48(sp)
 20039a0:	e0801015 	stw	r2,64(fp)
 20039a4:	d8000315 	stw	zero,12(sp)
 20039a8:	d9c00b15 	stw	r7,44(sp)
 20039ac:	d9800615 	stw	r6,24(sp)
 20039b0:	d8002215 	stw	zero,136(sp)
 20039b4:	d8800117 	ldw	r2,4(sp)
 20039b8:	10008916 	blt	r2,zero,2003be0 <_dtoa_r+0x990>
 20039bc:	d9000517 	ldw	r4,20(sp)
 20039c0:	00c00384 	movi	r3,14
 20039c4:	19008616 	blt	r3,r4,2003be0 <_dtoa_r+0x990>
 20039c8:	200490fa 	slli	r2,r4,3
 20039cc:	00c080b4 	movhi	r3,514
 20039d0:	d9802217 	ldw	r6,136(sp)
 20039d4:	18e37b04 	addi	r3,r3,-29204
 20039d8:	1885883a 	add	r2,r3,r2
 20039dc:	14000017 	ldw	r16,0(r2)
 20039e0:	14400117 	ldw	r17,4(r2)
 20039e4:	30016316 	blt	r6,zero,2003f74 <_dtoa_r+0xd24>
 20039e8:	800d883a 	mov	r6,r16
 20039ec:	880f883a 	mov	r7,r17
 20039f0:	9009883a 	mov	r4,r18
 20039f4:	980b883a 	mov	r5,r19
 20039f8:	200b8900 	call	200b890 <__divdf3>
 20039fc:	180b883a 	mov	r5,r3
 2003a00:	1009883a 	mov	r4,r2
 2003a04:	200d6200 	call	200d620 <__fixdfsi>
 2003a08:	1009883a 	mov	r4,r2
 2003a0c:	102b883a 	mov	r21,r2
 2003a10:	200d6a00 	call	200d6a0 <__floatsidf>
 2003a14:	800d883a 	mov	r6,r16
 2003a18:	880f883a 	mov	r7,r17
 2003a1c:	1009883a 	mov	r4,r2
 2003a20:	180b883a 	mov	r5,r3
 2003a24:	200c4b80 	call	200c4b8 <__muldf3>
 2003a28:	100d883a 	mov	r6,r2
 2003a2c:	180f883a 	mov	r7,r3
 2003a30:	9009883a 	mov	r4,r18
 2003a34:	980b883a 	mov	r5,r19
 2003a38:	200cd240 	call	200cd24 <__subdf3>
 2003a3c:	d9c00717 	ldw	r7,28(sp)
 2003a40:	1009883a 	mov	r4,r2
 2003a44:	a8800c04 	addi	r2,r21,48
 2003a48:	38800005 	stb	r2,0(r7)
 2003a4c:	3dc00044 	addi	r23,r7,1
 2003a50:	d9c00617 	ldw	r7,24(sp)
 2003a54:	01800044 	movi	r6,1
 2003a58:	180b883a 	mov	r5,r3
 2003a5c:	2005883a 	mov	r2,r4
 2003a60:	39803826 	beq	r7,r6,2003b44 <_dtoa_r+0x8f4>
 2003a64:	000d883a 	mov	r6,zero
 2003a68:	01d00934 	movhi	r7,16420
 2003a6c:	200c4b80 	call	200c4b8 <__muldf3>
 2003a70:	000d883a 	mov	r6,zero
 2003a74:	000f883a 	mov	r7,zero
 2003a78:	1009883a 	mov	r4,r2
 2003a7c:	180b883a 	mov	r5,r3
 2003a80:	1025883a 	mov	r18,r2
 2003a84:	1827883a 	mov	r19,r3
 2003a88:	200c2600 	call	200c260 <__eqdf2>
 2003a8c:	103f9a26 	beq	r2,zero,20038f8 <_dtoa_r+0x6a8>
 2003a90:	d9c00617 	ldw	r7,24(sp)
 2003a94:	d8c00717 	ldw	r3,28(sp)
 2003a98:	b829883a 	mov	r20,r23
 2003a9c:	38bfffc4 	addi	r2,r7,-1
 2003aa0:	18ad883a 	add	r22,r3,r2
 2003aa4:	00000a06 	br	2003ad0 <_dtoa_r+0x880>
 2003aa8:	200c4b80 	call	200c4b8 <__muldf3>
 2003aac:	000d883a 	mov	r6,zero
 2003ab0:	000f883a 	mov	r7,zero
 2003ab4:	1009883a 	mov	r4,r2
 2003ab8:	180b883a 	mov	r5,r3
 2003abc:	1025883a 	mov	r18,r2
 2003ac0:	1827883a 	mov	r19,r3
 2003ac4:	b829883a 	mov	r20,r23
 2003ac8:	200c2600 	call	200c260 <__eqdf2>
 2003acc:	103f8a26 	beq	r2,zero,20038f8 <_dtoa_r+0x6a8>
 2003ad0:	800d883a 	mov	r6,r16
 2003ad4:	880f883a 	mov	r7,r17
 2003ad8:	9009883a 	mov	r4,r18
 2003adc:	980b883a 	mov	r5,r19
 2003ae0:	200b8900 	call	200b890 <__divdf3>
 2003ae4:	180b883a 	mov	r5,r3
 2003ae8:	1009883a 	mov	r4,r2
 2003aec:	200d6200 	call	200d620 <__fixdfsi>
 2003af0:	1009883a 	mov	r4,r2
 2003af4:	102b883a 	mov	r21,r2
 2003af8:	200d6a00 	call	200d6a0 <__floatsidf>
 2003afc:	800d883a 	mov	r6,r16
 2003b00:	880f883a 	mov	r7,r17
 2003b04:	1009883a 	mov	r4,r2
 2003b08:	180b883a 	mov	r5,r3
 2003b0c:	200c4b80 	call	200c4b8 <__muldf3>
 2003b10:	100d883a 	mov	r6,r2
 2003b14:	180f883a 	mov	r7,r3
 2003b18:	9009883a 	mov	r4,r18
 2003b1c:	980b883a 	mov	r5,r19
 2003b20:	200cd240 	call	200cd24 <__subdf3>
 2003b24:	aa000c04 	addi	r8,r21,48
 2003b28:	a2000005 	stb	r8,0(r20)
 2003b2c:	000d883a 	mov	r6,zero
 2003b30:	01d00934 	movhi	r7,16420
 2003b34:	1009883a 	mov	r4,r2
 2003b38:	180b883a 	mov	r5,r3
 2003b3c:	a5c00044 	addi	r23,r20,1
 2003b40:	b53fd91e 	bne	r22,r20,2003aa8 <_dtoa_r+0x858>
 2003b44:	100d883a 	mov	r6,r2
 2003b48:	180f883a 	mov	r7,r3
 2003b4c:	1009883a 	mov	r4,r2
 2003b50:	180b883a 	mov	r5,r3
 2003b54:	200afe40 	call	200afe4 <__adddf3>
 2003b58:	100d883a 	mov	r6,r2
 2003b5c:	180f883a 	mov	r7,r3
 2003b60:	8009883a 	mov	r4,r16
 2003b64:	880b883a 	mov	r5,r17
 2003b68:	1027883a 	mov	r19,r2
 2003b6c:	1825883a 	mov	r18,r3
 2003b70:	200c3c40 	call	200c3c4 <__ledf2>
 2003b74:	10000816 	blt	r2,zero,2003b98 <_dtoa_r+0x948>
 2003b78:	980d883a 	mov	r6,r19
 2003b7c:	900f883a 	mov	r7,r18
 2003b80:	8009883a 	mov	r4,r16
 2003b84:	880b883a 	mov	r5,r17
 2003b88:	200c2600 	call	200c260 <__eqdf2>
 2003b8c:	103f5a1e 	bne	r2,zero,20038f8 <_dtoa_r+0x6a8>
 2003b90:	ad40004c 	andi	r21,r21,1
 2003b94:	a83f5826 	beq	r21,zero,20038f8 <_dtoa_r+0x6a8>
 2003b98:	bd3fffc3 	ldbu	r20,-1(r23)
 2003b9c:	b8bfffc4 	addi	r2,r23,-1
 2003ba0:	1007883a 	mov	r3,r2
 2003ba4:	01400e44 	movi	r5,57
 2003ba8:	d9800717 	ldw	r6,28(sp)
 2003bac:	00000506 	br	2003bc4 <_dtoa_r+0x974>
 2003bb0:	18ffffc4 	addi	r3,r3,-1
 2003bb4:	11824726 	beq	r2,r6,20044d4 <_dtoa_r+0x1284>
 2003bb8:	1d000003 	ldbu	r20,0(r3)
 2003bbc:	102f883a 	mov	r23,r2
 2003bc0:	10bfffc4 	addi	r2,r2,-1
 2003bc4:	a1003fcc 	andi	r4,r20,255
 2003bc8:	2100201c 	xori	r4,r4,128
 2003bcc:	213fe004 	addi	r4,r4,-128
 2003bd0:	217ff726 	beq	r4,r5,2003bb0 <_dtoa_r+0x960>
 2003bd4:	a2000044 	addi	r8,r20,1
 2003bd8:	12000005 	stb	r8,0(r2)
 2003bdc:	003f4606 	br	20038f8 <_dtoa_r+0x6a8>
 2003be0:	d9000b17 	ldw	r4,44(sp)
 2003be4:	2000c826 	beq	r4,zero,2003f08 <_dtoa_r+0xcb8>
 2003be8:	d9800317 	ldw	r6,12(sp)
 2003bec:	00c00044 	movi	r3,1
 2003bf0:	1980f90e 	bge	r3,r6,2003fd8 <_dtoa_r+0xd88>
 2003bf4:	d8800617 	ldw	r2,24(sp)
 2003bf8:	d8c00a17 	ldw	r3,40(sp)
 2003bfc:	157fffc4 	addi	r21,r2,-1
 2003c00:	1d41f316 	blt	r3,r21,20043d0 <_dtoa_r+0x1180>
 2003c04:	1d6bc83a 	sub	r21,r3,r21
 2003c08:	d9c00617 	ldw	r7,24(sp)
 2003c0c:	3802aa16 	blt	r7,zero,20046b8 <_dtoa_r+0x1468>
 2003c10:	dd000817 	ldw	r20,32(sp)
 2003c14:	d8800617 	ldw	r2,24(sp)
 2003c18:	d8c00817 	ldw	r3,32(sp)
 2003c1c:	01400044 	movi	r5,1
 2003c20:	e009883a 	mov	r4,fp
 2003c24:	1887883a 	add	r3,r3,r2
 2003c28:	d8c00815 	stw	r3,32(sp)
 2003c2c:	b0ad883a 	add	r22,r22,r2
 2003c30:	2006d3c0 	call	2006d3c <__i2b>
 2003c34:	1023883a 	mov	r17,r2
 2003c38:	a0000826 	beq	r20,zero,2003c5c <_dtoa_r+0xa0c>
 2003c3c:	0580070e 	bge	zero,r22,2003c5c <_dtoa_r+0xa0c>
 2003c40:	a005883a 	mov	r2,r20
 2003c44:	b500b916 	blt	r22,r20,2003f2c <_dtoa_r+0xcdc>
 2003c48:	d9000817 	ldw	r4,32(sp)
 2003c4c:	a0a9c83a 	sub	r20,r20,r2
 2003c50:	b0adc83a 	sub	r22,r22,r2
 2003c54:	2089c83a 	sub	r4,r4,r2
 2003c58:	d9000815 	stw	r4,32(sp)
 2003c5c:	d9800a17 	ldw	r6,40(sp)
 2003c60:	0181810e 	bge	zero,r6,2004268 <_dtoa_r+0x1018>
 2003c64:	d9c00b17 	ldw	r7,44(sp)
 2003c68:	3800b326 	beq	r7,zero,2003f38 <_dtoa_r+0xce8>
 2003c6c:	a800b226 	beq	r21,zero,2003f38 <_dtoa_r+0xce8>
 2003c70:	880b883a 	mov	r5,r17
 2003c74:	a80d883a 	mov	r6,r21
 2003c78:	e009883a 	mov	r4,fp
 2003c7c:	20070040 	call	2007004 <__pow5mult>
 2003c80:	d9800917 	ldw	r6,36(sp)
 2003c84:	100b883a 	mov	r5,r2
 2003c88:	e009883a 	mov	r4,fp
 2003c8c:	1023883a 	mov	r17,r2
 2003c90:	2006d780 	call	2006d78 <__multiply>
 2003c94:	1021883a 	mov	r16,r2
 2003c98:	d8800a17 	ldw	r2,40(sp)
 2003c9c:	d9400917 	ldw	r5,36(sp)
 2003ca0:	e009883a 	mov	r4,fp
 2003ca4:	1545c83a 	sub	r2,r2,r21
 2003ca8:	d8800a15 	stw	r2,40(sp)
 2003cac:	20069b00 	call	20069b0 <_Bfree>
 2003cb0:	d8c00a17 	ldw	r3,40(sp)
 2003cb4:	18009f1e 	bne	r3,zero,2003f34 <_dtoa_r+0xce4>
 2003cb8:	05c00044 	movi	r23,1
 2003cbc:	e009883a 	mov	r4,fp
 2003cc0:	b80b883a 	mov	r5,r23
 2003cc4:	2006d3c0 	call	2006d3c <__i2b>
 2003cc8:	d9000d17 	ldw	r4,52(sp)
 2003ccc:	102b883a 	mov	r21,r2
 2003cd0:	2000ce26 	beq	r4,zero,200400c <_dtoa_r+0xdbc>
 2003cd4:	200d883a 	mov	r6,r4
 2003cd8:	100b883a 	mov	r5,r2
 2003cdc:	e009883a 	mov	r4,fp
 2003ce0:	20070040 	call	2007004 <__pow5mult>
 2003ce4:	d9800317 	ldw	r6,12(sp)
 2003ce8:	102b883a 	mov	r21,r2
 2003cec:	b981810e 	bge	r23,r6,20042f4 <_dtoa_r+0x10a4>
 2003cf0:	0027883a 	mov	r19,zero
 2003cf4:	a8800417 	ldw	r2,16(r21)
 2003cf8:	05c00804 	movi	r23,32
 2003cfc:	10800104 	addi	r2,r2,4
 2003d00:	1085883a 	add	r2,r2,r2
 2003d04:	1085883a 	add	r2,r2,r2
 2003d08:	a885883a 	add	r2,r21,r2
 2003d0c:	11000017 	ldw	r4,0(r2)
 2003d10:	2006c240 	call	2006c24 <__hi0bits>
 2003d14:	b885c83a 	sub	r2,r23,r2
 2003d18:	1585883a 	add	r2,r2,r22
 2003d1c:	108007cc 	andi	r2,r2,31
 2003d20:	1000b326 	beq	r2,zero,2003ff0 <_dtoa_r+0xda0>
 2003d24:	00c00804 	movi	r3,32
 2003d28:	1887c83a 	sub	r3,r3,r2
 2003d2c:	01000104 	movi	r4,4
 2003d30:	20c2cd0e 	bge	r4,r3,2004868 <_dtoa_r+0x1618>
 2003d34:	00c00704 	movi	r3,28
 2003d38:	1885c83a 	sub	r2,r3,r2
 2003d3c:	d8c00817 	ldw	r3,32(sp)
 2003d40:	a0a9883a 	add	r20,r20,r2
 2003d44:	b0ad883a 	add	r22,r22,r2
 2003d48:	1887883a 	add	r3,r3,r2
 2003d4c:	d8c00815 	stw	r3,32(sp)
 2003d50:	d9800817 	ldw	r6,32(sp)
 2003d54:	0180040e 	bge	zero,r6,2003d68 <_dtoa_r+0xb18>
 2003d58:	800b883a 	mov	r5,r16
 2003d5c:	e009883a 	mov	r4,fp
 2003d60:	20071440 	call	2007144 <__lshift>
 2003d64:	1021883a 	mov	r16,r2
 2003d68:	0580050e 	bge	zero,r22,2003d80 <_dtoa_r+0xb30>
 2003d6c:	a80b883a 	mov	r5,r21
 2003d70:	b00d883a 	mov	r6,r22
 2003d74:	e009883a 	mov	r4,fp
 2003d78:	20071440 	call	2007144 <__lshift>
 2003d7c:	102b883a 	mov	r21,r2
 2003d80:	d9c00e17 	ldw	r7,56(sp)
 2003d84:	3801211e 	bne	r7,zero,200420c <_dtoa_r+0xfbc>
 2003d88:	d9800617 	ldw	r6,24(sp)
 2003d8c:	0181380e 	bge	zero,r6,2004270 <_dtoa_r+0x1020>
 2003d90:	d8c00b17 	ldw	r3,44(sp)
 2003d94:	1800ab1e 	bne	r3,zero,2004044 <_dtoa_r+0xdf4>
 2003d98:	dc800717 	ldw	r18,28(sp)
 2003d9c:	dcc00617 	ldw	r19,24(sp)
 2003da0:	9029883a 	mov	r20,r18
 2003da4:	00000206 	br	2003db0 <_dtoa_r+0xb60>
 2003da8:	20069d80 	call	20069d8 <__multadd>
 2003dac:	1021883a 	mov	r16,r2
 2003db0:	a80b883a 	mov	r5,r21
 2003db4:	8009883a 	mov	r4,r16
 2003db8:	20030280 	call	2003028 <quorem>
 2003dbc:	10800c04 	addi	r2,r2,48
 2003dc0:	90800005 	stb	r2,0(r18)
 2003dc4:	94800044 	addi	r18,r18,1
 2003dc8:	9507c83a 	sub	r3,r18,r20
 2003dcc:	000f883a 	mov	r7,zero
 2003dd0:	01800284 	movi	r6,10
 2003dd4:	800b883a 	mov	r5,r16
 2003dd8:	e009883a 	mov	r4,fp
 2003ddc:	1cfff216 	blt	r3,r19,2003da8 <_dtoa_r+0xb58>
 2003de0:	1011883a 	mov	r8,r2
 2003de4:	d8800617 	ldw	r2,24(sp)
 2003de8:	0082370e 	bge	zero,r2,20046c8 <_dtoa_r+0x1478>
 2003dec:	d9000717 	ldw	r4,28(sp)
 2003df0:	0025883a 	mov	r18,zero
 2003df4:	20af883a 	add	r23,r4,r2
 2003df8:	01800044 	movi	r6,1
 2003dfc:	800b883a 	mov	r5,r16
 2003e00:	e009883a 	mov	r4,fp
 2003e04:	da001715 	stw	r8,92(sp)
 2003e08:	20071440 	call	2007144 <__lshift>
 2003e0c:	a80b883a 	mov	r5,r21
 2003e10:	1009883a 	mov	r4,r2
 2003e14:	d8800915 	stw	r2,36(sp)
 2003e18:	200728c0 	call	200728c <__mcmp>
 2003e1c:	da001717 	ldw	r8,92(sp)
 2003e20:	0081800e 	bge	zero,r2,2004424 <_dtoa_r+0x11d4>
 2003e24:	b93fffc3 	ldbu	r4,-1(r23)
 2003e28:	b8bfffc4 	addi	r2,r23,-1
 2003e2c:	1007883a 	mov	r3,r2
 2003e30:	01800e44 	movi	r6,57
 2003e34:	d9c00717 	ldw	r7,28(sp)
 2003e38:	00000506 	br	2003e50 <_dtoa_r+0xc00>
 2003e3c:	18ffffc4 	addi	r3,r3,-1
 2003e40:	11c12326 	beq	r2,r7,20042d0 <_dtoa_r+0x1080>
 2003e44:	19000003 	ldbu	r4,0(r3)
 2003e48:	102f883a 	mov	r23,r2
 2003e4c:	10bfffc4 	addi	r2,r2,-1
 2003e50:	21403fcc 	andi	r5,r4,255
 2003e54:	2940201c 	xori	r5,r5,128
 2003e58:	297fe004 	addi	r5,r5,-128
 2003e5c:	29bff726 	beq	r5,r6,2003e3c <_dtoa_r+0xbec>
 2003e60:	21000044 	addi	r4,r4,1
 2003e64:	11000005 	stb	r4,0(r2)
 2003e68:	a80b883a 	mov	r5,r21
 2003e6c:	e009883a 	mov	r4,fp
 2003e70:	20069b00 	call	20069b0 <_Bfree>
 2003e74:	883ea026 	beq	r17,zero,20038f8 <_dtoa_r+0x6a8>
 2003e78:	90000426 	beq	r18,zero,2003e8c <_dtoa_r+0xc3c>
 2003e7c:	94400326 	beq	r18,r17,2003e8c <_dtoa_r+0xc3c>
 2003e80:	900b883a 	mov	r5,r18
 2003e84:	e009883a 	mov	r4,fp
 2003e88:	20069b00 	call	20069b0 <_Bfree>
 2003e8c:	880b883a 	mov	r5,r17
 2003e90:	e009883a 	mov	r4,fp
 2003e94:	20069b00 	call	20069b0 <_Bfree>
 2003e98:	003e9706 	br	20038f8 <_dtoa_r+0x6a8>
 2003e9c:	01800044 	movi	r6,1
 2003ea0:	d9800e15 	stw	r6,56(sp)
 2003ea4:	003d9606 	br	2003500 <_dtoa_r+0x2b0>
 2003ea8:	d8800817 	ldw	r2,32(sp)
 2003eac:	d8c00517 	ldw	r3,20(sp)
 2003eb0:	d8000d15 	stw	zero,52(sp)
 2003eb4:	10c5c83a 	sub	r2,r2,r3
 2003eb8:	00c9c83a 	sub	r4,zero,r3
 2003ebc:	d8800815 	stw	r2,32(sp)
 2003ec0:	d9000a15 	stw	r4,40(sp)
 2003ec4:	003d9706 	br	2003524 <_dtoa_r+0x2d4>
 2003ec8:	05adc83a 	sub	r22,zero,r22
 2003ecc:	dd800815 	stw	r22,32(sp)
 2003ed0:	002d883a 	mov	r22,zero
 2003ed4:	003d8e06 	br	2003510 <_dtoa_r+0x2c0>
 2003ed8:	d9000517 	ldw	r4,20(sp)
 2003edc:	200d6a00 	call	200d6a0 <__floatsidf>
 2003ee0:	100d883a 	mov	r6,r2
 2003ee4:	180f883a 	mov	r7,r3
 2003ee8:	a009883a 	mov	r4,r20
 2003eec:	880b883a 	mov	r5,r17
 2003ef0:	200c2600 	call	200c260 <__eqdf2>
 2003ef4:	103d7126 	beq	r2,zero,20034bc <_dtoa_r+0x26c>
 2003ef8:	d9c00517 	ldw	r7,20(sp)
 2003efc:	39ffffc4 	addi	r7,r7,-1
 2003f00:	d9c00515 	stw	r7,20(sp)
 2003f04:	003d6d06 	br	20034bc <_dtoa_r+0x26c>
 2003f08:	dd400a17 	ldw	r21,40(sp)
 2003f0c:	dd000817 	ldw	r20,32(sp)
 2003f10:	0023883a 	mov	r17,zero
 2003f14:	003f4806 	br	2003c38 <_dtoa_r+0x9e8>
 2003f18:	10e3c83a 	sub	r17,r2,r3
 2003f1c:	9448983a 	sll	r4,r18,r17
 2003f20:	003d3206 	br	20033ec <_dtoa_r+0x19c>
 2003f24:	d8000e15 	stw	zero,56(sp)
 2003f28:	003d7506 	br	2003500 <_dtoa_r+0x2b0>
 2003f2c:	b005883a 	mov	r2,r22
 2003f30:	003f4506 	br	2003c48 <_dtoa_r+0x9f8>
 2003f34:	dc000915 	stw	r16,36(sp)
 2003f38:	d9800a17 	ldw	r6,40(sp)
 2003f3c:	d9400917 	ldw	r5,36(sp)
 2003f40:	e009883a 	mov	r4,fp
 2003f44:	20070040 	call	2007004 <__pow5mult>
 2003f48:	1021883a 	mov	r16,r2
 2003f4c:	003f5a06 	br	2003cb8 <_dtoa_r+0xa68>
 2003f50:	01c00044 	movi	r7,1
 2003f54:	d9c00b15 	stw	r7,44(sp)
 2003f58:	d8802217 	ldw	r2,136(sp)
 2003f5c:	0081280e 	bge	zero,r2,2004400 <_dtoa_r+0x11b0>
 2003f60:	100d883a 	mov	r6,r2
 2003f64:	1021883a 	mov	r16,r2
 2003f68:	d8800c15 	stw	r2,48(sp)
 2003f6c:	d8800615 	stw	r2,24(sp)
 2003f70:	003d8806 	br	2003594 <_dtoa_r+0x344>
 2003f74:	d8800617 	ldw	r2,24(sp)
 2003f78:	00be9b16 	blt	zero,r2,20039e8 <_dtoa_r+0x798>
 2003f7c:	10010f1e 	bne	r2,zero,20043bc <_dtoa_r+0x116c>
 2003f80:	880b883a 	mov	r5,r17
 2003f84:	000d883a 	mov	r6,zero
 2003f88:	01d00534 	movhi	r7,16404
 2003f8c:	8009883a 	mov	r4,r16
 2003f90:	200c4b80 	call	200c4b8 <__muldf3>
 2003f94:	900d883a 	mov	r6,r18
 2003f98:	980f883a 	mov	r7,r19
 2003f9c:	1009883a 	mov	r4,r2
 2003fa0:	180b883a 	mov	r5,r3
 2003fa4:	200c2e80 	call	200c2e8 <__gedf2>
 2003fa8:	002b883a 	mov	r21,zero
 2003fac:	0023883a 	mov	r17,zero
 2003fb0:	1000bf16 	blt	r2,zero,20042b0 <_dtoa_r+0x1060>
 2003fb4:	d9802217 	ldw	r6,136(sp)
 2003fb8:	ddc00717 	ldw	r23,28(sp)
 2003fbc:	018c303a 	nor	r6,zero,r6
 2003fc0:	d9800515 	stw	r6,20(sp)
 2003fc4:	a80b883a 	mov	r5,r21
 2003fc8:	e009883a 	mov	r4,fp
 2003fcc:	20069b00 	call	20069b0 <_Bfree>
 2003fd0:	883e4926 	beq	r17,zero,20038f8 <_dtoa_r+0x6a8>
 2003fd4:	003fad06 	br	2003e8c <_dtoa_r+0xc3c>
 2003fd8:	d9c01117 	ldw	r7,68(sp)
 2003fdc:	3801bc26 	beq	r7,zero,20046d0 <_dtoa_r+0x1480>
 2003fe0:	10810cc4 	addi	r2,r2,1075
 2003fe4:	dd400a17 	ldw	r21,40(sp)
 2003fe8:	dd000817 	ldw	r20,32(sp)
 2003fec:	003f0a06 	br	2003c18 <_dtoa_r+0x9c8>
 2003ff0:	00800704 	movi	r2,28
 2003ff4:	d9000817 	ldw	r4,32(sp)
 2003ff8:	a0a9883a 	add	r20,r20,r2
 2003ffc:	b0ad883a 	add	r22,r22,r2
 2004000:	2089883a 	add	r4,r4,r2
 2004004:	d9000815 	stw	r4,32(sp)
 2004008:	003f5106 	br	2003d50 <_dtoa_r+0xb00>
 200400c:	d8c00317 	ldw	r3,12(sp)
 2004010:	b8c1fc0e 	bge	r23,r3,2004804 <_dtoa_r+0x15b4>
 2004014:	0027883a 	mov	r19,zero
 2004018:	b805883a 	mov	r2,r23
 200401c:	003f3e06 	br	2003d18 <_dtoa_r+0xac8>
 2004020:	880b883a 	mov	r5,r17
 2004024:	e009883a 	mov	r4,fp
 2004028:	000f883a 	mov	r7,zero
 200402c:	01800284 	movi	r6,10
 2004030:	20069d80 	call	20069d8 <__multadd>
 2004034:	d9000c17 	ldw	r4,48(sp)
 2004038:	1023883a 	mov	r17,r2
 200403c:	0102040e 	bge	zero,r4,2004850 <_dtoa_r+0x1600>
 2004040:	d9000615 	stw	r4,24(sp)
 2004044:	0500050e 	bge	zero,r20,200405c <_dtoa_r+0xe0c>
 2004048:	880b883a 	mov	r5,r17
 200404c:	a00d883a 	mov	r6,r20
 2004050:	e009883a 	mov	r4,fp
 2004054:	20071440 	call	2007144 <__lshift>
 2004058:	1023883a 	mov	r17,r2
 200405c:	9801241e 	bne	r19,zero,20044f0 <_dtoa_r+0x12a0>
 2004060:	8829883a 	mov	r20,r17
 2004064:	d9000617 	ldw	r4,24(sp)
 2004068:	dcc00717 	ldw	r19,28(sp)
 200406c:	9480004c 	andi	r18,r18,1
 2004070:	20bfffc4 	addi	r2,r4,-1
 2004074:	9885883a 	add	r2,r19,r2
 2004078:	d8800415 	stw	r2,16(sp)
 200407c:	dc800615 	stw	r18,24(sp)
 2004080:	a80b883a 	mov	r5,r21
 2004084:	8009883a 	mov	r4,r16
 2004088:	20030280 	call	2003028 <quorem>
 200408c:	880b883a 	mov	r5,r17
 2004090:	8009883a 	mov	r4,r16
 2004094:	102f883a 	mov	r23,r2
 2004098:	200728c0 	call	200728c <__mcmp>
 200409c:	a80b883a 	mov	r5,r21
 20040a0:	a00d883a 	mov	r6,r20
 20040a4:	e009883a 	mov	r4,fp
 20040a8:	102d883a 	mov	r22,r2
 20040ac:	20072ec0 	call	20072ec <__mdiff>
 20040b0:	1007883a 	mov	r3,r2
 20040b4:	10800317 	ldw	r2,12(r2)
 20040b8:	bc800c04 	addi	r18,r23,48
 20040bc:	180b883a 	mov	r5,r3
 20040c0:	10004e1e 	bne	r2,zero,20041fc <_dtoa_r+0xfac>
 20040c4:	8009883a 	mov	r4,r16
 20040c8:	d8c01615 	stw	r3,88(sp)
 20040cc:	200728c0 	call	200728c <__mcmp>
 20040d0:	d8c01617 	ldw	r3,88(sp)
 20040d4:	e009883a 	mov	r4,fp
 20040d8:	d8801615 	stw	r2,88(sp)
 20040dc:	180b883a 	mov	r5,r3
 20040e0:	20069b00 	call	20069b0 <_Bfree>
 20040e4:	d8801617 	ldw	r2,88(sp)
 20040e8:	1000041e 	bne	r2,zero,20040fc <_dtoa_r+0xeac>
 20040ec:	d9800317 	ldw	r6,12(sp)
 20040f0:	3000021e 	bne	r6,zero,20040fc <_dtoa_r+0xeac>
 20040f4:	d8c00617 	ldw	r3,24(sp)
 20040f8:	18003726 	beq	r3,zero,20041d8 <_dtoa_r+0xf88>
 20040fc:	b0002016 	blt	r22,zero,2004180 <_dtoa_r+0xf30>
 2004100:	b000041e 	bne	r22,zero,2004114 <_dtoa_r+0xec4>
 2004104:	d9000317 	ldw	r4,12(sp)
 2004108:	2000021e 	bne	r4,zero,2004114 <_dtoa_r+0xec4>
 200410c:	d8c00617 	ldw	r3,24(sp)
 2004110:	18001b26 	beq	r3,zero,2004180 <_dtoa_r+0xf30>
 2004114:	00810716 	blt	zero,r2,2004534 <_dtoa_r+0x12e4>
 2004118:	d8c00417 	ldw	r3,16(sp)
 200411c:	9d800044 	addi	r22,r19,1
 2004120:	9c800005 	stb	r18,0(r19)
 2004124:	b02f883a 	mov	r23,r22
 2004128:	98c10626 	beq	r19,r3,2004544 <_dtoa_r+0x12f4>
 200412c:	800b883a 	mov	r5,r16
 2004130:	000f883a 	mov	r7,zero
 2004134:	01800284 	movi	r6,10
 2004138:	e009883a 	mov	r4,fp
 200413c:	20069d80 	call	20069d8 <__multadd>
 2004140:	1021883a 	mov	r16,r2
 2004144:	000f883a 	mov	r7,zero
 2004148:	01800284 	movi	r6,10
 200414c:	880b883a 	mov	r5,r17
 2004150:	e009883a 	mov	r4,fp
 2004154:	8d002526 	beq	r17,r20,20041ec <_dtoa_r+0xf9c>
 2004158:	20069d80 	call	20069d8 <__multadd>
 200415c:	a00b883a 	mov	r5,r20
 2004160:	000f883a 	mov	r7,zero
 2004164:	01800284 	movi	r6,10
 2004168:	e009883a 	mov	r4,fp
 200416c:	1023883a 	mov	r17,r2
 2004170:	20069d80 	call	20069d8 <__multadd>
 2004174:	1029883a 	mov	r20,r2
 2004178:	b027883a 	mov	r19,r22
 200417c:	003fc006 	br	2004080 <_dtoa_r+0xe30>
 2004180:	9011883a 	mov	r8,r18
 2004184:	00800e0e 	bge	zero,r2,20041c0 <_dtoa_r+0xf70>
 2004188:	800b883a 	mov	r5,r16
 200418c:	01800044 	movi	r6,1
 2004190:	e009883a 	mov	r4,fp
 2004194:	da001715 	stw	r8,92(sp)
 2004198:	20071440 	call	2007144 <__lshift>
 200419c:	a80b883a 	mov	r5,r21
 20041a0:	1009883a 	mov	r4,r2
 20041a4:	1021883a 	mov	r16,r2
 20041a8:	200728c0 	call	200728c <__mcmp>
 20041ac:	da001717 	ldw	r8,92(sp)
 20041b0:	0081960e 	bge	zero,r2,200480c <_dtoa_r+0x15bc>
 20041b4:	00800e44 	movi	r2,57
 20041b8:	40817026 	beq	r8,r2,200477c <_dtoa_r+0x152c>
 20041bc:	ba000c44 	addi	r8,r23,49
 20041c0:	8825883a 	mov	r18,r17
 20041c4:	9dc00044 	addi	r23,r19,1
 20041c8:	9a000005 	stb	r8,0(r19)
 20041cc:	a023883a 	mov	r17,r20
 20041d0:	dc000915 	stw	r16,36(sp)
 20041d4:	003f2406 	br	2003e68 <_dtoa_r+0xc18>
 20041d8:	00800e44 	movi	r2,57
 20041dc:	9011883a 	mov	r8,r18
 20041e0:	90816626 	beq	r18,r2,200477c <_dtoa_r+0x152c>
 20041e4:	05bff516 	blt	zero,r22,20041bc <_dtoa_r+0xf6c>
 20041e8:	003ff506 	br	20041c0 <_dtoa_r+0xf70>
 20041ec:	20069d80 	call	20069d8 <__multadd>
 20041f0:	1023883a 	mov	r17,r2
 20041f4:	1029883a 	mov	r20,r2
 20041f8:	003fdf06 	br	2004178 <_dtoa_r+0xf28>
 20041fc:	e009883a 	mov	r4,fp
 2004200:	20069b00 	call	20069b0 <_Bfree>
 2004204:	00800044 	movi	r2,1
 2004208:	003fbc06 	br	20040fc <_dtoa_r+0xeac>
 200420c:	a80b883a 	mov	r5,r21
 2004210:	8009883a 	mov	r4,r16
 2004214:	200728c0 	call	200728c <__mcmp>
 2004218:	103edb0e 	bge	r2,zero,2003d88 <_dtoa_r+0xb38>
 200421c:	800b883a 	mov	r5,r16
 2004220:	000f883a 	mov	r7,zero
 2004224:	01800284 	movi	r6,10
 2004228:	e009883a 	mov	r4,fp
 200422c:	20069d80 	call	20069d8 <__multadd>
 2004230:	1021883a 	mov	r16,r2
 2004234:	d8800517 	ldw	r2,20(sp)
 2004238:	d8c00b17 	ldw	r3,44(sp)
 200423c:	10bfffc4 	addi	r2,r2,-1
 2004240:	d8800515 	stw	r2,20(sp)
 2004244:	183f761e 	bne	r3,zero,2004020 <_dtoa_r+0xdd0>
 2004248:	d9000c17 	ldw	r4,48(sp)
 200424c:	0101730e 	bge	zero,r4,200481c <_dtoa_r+0x15cc>
 2004250:	d9000615 	stw	r4,24(sp)
 2004254:	003ed006 	br	2003d98 <_dtoa_r+0xb48>
 2004258:	00800084 	movi	r2,2
 200425c:	3081861e 	bne	r6,r2,2004878 <_dtoa_r+0x1628>
 2004260:	d8000b15 	stw	zero,44(sp)
 2004264:	003f3c06 	br	2003f58 <_dtoa_r+0xd08>
 2004268:	dc000917 	ldw	r16,36(sp)
 200426c:	003e9206 	br	2003cb8 <_dtoa_r+0xa68>
 2004270:	d9c00317 	ldw	r7,12(sp)
 2004274:	00800084 	movi	r2,2
 2004278:	11fec50e 	bge	r2,r7,2003d90 <_dtoa_r+0xb40>
 200427c:	d9000617 	ldw	r4,24(sp)
 2004280:	20013c1e 	bne	r4,zero,2004774 <_dtoa_r+0x1524>
 2004284:	a80b883a 	mov	r5,r21
 2004288:	000f883a 	mov	r7,zero
 200428c:	01800144 	movi	r6,5
 2004290:	e009883a 	mov	r4,fp
 2004294:	20069d80 	call	20069d8 <__multadd>
 2004298:	100b883a 	mov	r5,r2
 200429c:	8009883a 	mov	r4,r16
 20042a0:	102b883a 	mov	r21,r2
 20042a4:	200728c0 	call	200728c <__mcmp>
 20042a8:	dc000915 	stw	r16,36(sp)
 20042ac:	00bf410e 	bge	zero,r2,2003fb4 <_dtoa_r+0xd64>
 20042b0:	d9c00717 	ldw	r7,28(sp)
 20042b4:	00800c44 	movi	r2,49
 20042b8:	38800005 	stb	r2,0(r7)
 20042bc:	d8800517 	ldw	r2,20(sp)
 20042c0:	3dc00044 	addi	r23,r7,1
 20042c4:	10800044 	addi	r2,r2,1
 20042c8:	d8800515 	stw	r2,20(sp)
 20042cc:	003f3d06 	br	2003fc4 <_dtoa_r+0xd74>
 20042d0:	d9800517 	ldw	r6,20(sp)
 20042d4:	d9c00717 	ldw	r7,28(sp)
 20042d8:	00800c44 	movi	r2,49
 20042dc:	31800044 	addi	r6,r6,1
 20042e0:	d9800515 	stw	r6,20(sp)
 20042e4:	38800005 	stb	r2,0(r7)
 20042e8:	003edf06 	br	2003e68 <_dtoa_r+0xc18>
 20042ec:	d8000b15 	stw	zero,44(sp)
 20042f0:	003c9f06 	br	2003570 <_dtoa_r+0x320>
 20042f4:	903e7e1e 	bne	r18,zero,2003cf0 <_dtoa_r+0xaa0>
 20042f8:	00800434 	movhi	r2,16
 20042fc:	10bfffc4 	addi	r2,r2,-1
 2004300:	9884703a 	and	r2,r19,r2
 2004304:	1000ea1e 	bne	r2,zero,20046b0 <_dtoa_r+0x1460>
 2004308:	9cdffc2c 	andhi	r19,r19,32752
 200430c:	9800e826 	beq	r19,zero,20046b0 <_dtoa_r+0x1460>
 2004310:	d9c00817 	ldw	r7,32(sp)
 2004314:	b5800044 	addi	r22,r22,1
 2004318:	04c00044 	movi	r19,1
 200431c:	39c00044 	addi	r7,r7,1
 2004320:	d9c00815 	stw	r7,32(sp)
 2004324:	d8800d17 	ldw	r2,52(sp)
 2004328:	103e721e 	bne	r2,zero,2003cf4 <_dtoa_r+0xaa4>
 200432c:	00800044 	movi	r2,1
 2004330:	003e7906 	br	2003d18 <_dtoa_r+0xac8>
 2004334:	8009883a 	mov	r4,r16
 2004338:	200d6a00 	call	200d6a0 <__floatsidf>
 200433c:	d9800f17 	ldw	r6,60(sp)
 2004340:	d9c01017 	ldw	r7,64(sp)
 2004344:	1009883a 	mov	r4,r2
 2004348:	180b883a 	mov	r5,r3
 200434c:	200c4b80 	call	200c4b8 <__muldf3>
 2004350:	000d883a 	mov	r6,zero
 2004354:	01d00734 	movhi	r7,16412
 2004358:	1009883a 	mov	r4,r2
 200435c:	180b883a 	mov	r5,r3
 2004360:	200afe40 	call	200afe4 <__adddf3>
 2004364:	047f3034 	movhi	r17,64704
 2004368:	1021883a 	mov	r16,r2
 200436c:	1c63883a 	add	r17,r3,r17
 2004370:	d9000f17 	ldw	r4,60(sp)
 2004374:	d9401017 	ldw	r5,64(sp)
 2004378:	000d883a 	mov	r6,zero
 200437c:	01d00534 	movhi	r7,16404
 2004380:	200cd240 	call	200cd24 <__subdf3>
 2004384:	800d883a 	mov	r6,r16
 2004388:	880f883a 	mov	r7,r17
 200438c:	1009883a 	mov	r4,r2
 2004390:	180b883a 	mov	r5,r3
 2004394:	102b883a 	mov	r21,r2
 2004398:	1829883a 	mov	r20,r3
 200439c:	200c2e80 	call	200c2e8 <__gedf2>
 20043a0:	00806c16 	blt	zero,r2,2004554 <_dtoa_r+0x1304>
 20043a4:	89e0003c 	xorhi	r7,r17,32768
 20043a8:	800d883a 	mov	r6,r16
 20043ac:	a809883a 	mov	r4,r21
 20043b0:	a00b883a 	mov	r5,r20
 20043b4:	200c3c40 	call	200c3c4 <__ledf2>
 20043b8:	103d7e0e 	bge	r2,zero,20039b4 <_dtoa_r+0x764>
 20043bc:	002b883a 	mov	r21,zero
 20043c0:	0023883a 	mov	r17,zero
 20043c4:	003efb06 	br	2003fb4 <_dtoa_r+0xd64>
 20043c8:	d8800717 	ldw	r2,28(sp)
 20043cc:	003bd006 	br	2003310 <_dtoa_r+0xc0>
 20043d0:	d9000a17 	ldw	r4,40(sp)
 20043d4:	d9800d17 	ldw	r6,52(sp)
 20043d8:	dd400a15 	stw	r21,40(sp)
 20043dc:	a905c83a 	sub	r2,r21,r4
 20043e0:	308d883a 	add	r6,r6,r2
 20043e4:	d9800d15 	stw	r6,52(sp)
 20043e8:	002b883a 	mov	r21,zero
 20043ec:	003e0606 	br	2003c08 <_dtoa_r+0x9b8>
 20043f0:	9023883a 	mov	r17,r18
 20043f4:	9829883a 	mov	r20,r19
 20043f8:	04000084 	movi	r16,2
 20043fc:	003c9206 	br	2003648 <_dtoa_r+0x3f8>
 2004400:	04000044 	movi	r16,1
 2004404:	dc000c15 	stw	r16,48(sp)
 2004408:	dc000615 	stw	r16,24(sp)
 200440c:	dc002215 	stw	r16,136(sp)
 2004410:	e0001115 	stw	zero,68(fp)
 2004414:	000b883a 	mov	r5,zero
 2004418:	003c6906 	br	20035c0 <_dtoa_r+0x370>
 200441c:	3021883a 	mov	r16,r6
 2004420:	003ffb06 	br	2004410 <_dtoa_r+0x11c0>
 2004424:	1000021e 	bne	r2,zero,2004430 <_dtoa_r+0x11e0>
 2004428:	4200004c 	andi	r8,r8,1
 200442c:	403e7d1e 	bne	r8,zero,2003e24 <_dtoa_r+0xbd4>
 2004430:	01000c04 	movi	r4,48
 2004434:	00000106 	br	200443c <_dtoa_r+0x11ec>
 2004438:	102f883a 	mov	r23,r2
 200443c:	b8bfffc4 	addi	r2,r23,-1
 2004440:	10c00007 	ldb	r3,0(r2)
 2004444:	193ffc26 	beq	r3,r4,2004438 <_dtoa_r+0x11e8>
 2004448:	003e8706 	br	2003e68 <_dtoa_r+0xc18>
 200444c:	d8800517 	ldw	r2,20(sp)
 2004450:	00a3c83a 	sub	r17,zero,r2
 2004454:	8800a426 	beq	r17,zero,20046e8 <_dtoa_r+0x1498>
 2004458:	888003cc 	andi	r2,r17,15
 200445c:	100490fa 	slli	r2,r2,3
 2004460:	00c080b4 	movhi	r3,514
 2004464:	18e37b04 	addi	r3,r3,-29204
 2004468:	1885883a 	add	r2,r3,r2
 200446c:	11800017 	ldw	r6,0(r2)
 2004470:	11c00117 	ldw	r7,4(r2)
 2004474:	9009883a 	mov	r4,r18
 2004478:	980b883a 	mov	r5,r19
 200447c:	8823d13a 	srai	r17,r17,4
 2004480:	200c4b80 	call	200c4b8 <__muldf3>
 2004484:	d8800f15 	stw	r2,60(sp)
 2004488:	d8c01015 	stw	r3,64(sp)
 200448c:	8800e826 	beq	r17,zero,2004830 <_dtoa_r+0x15e0>
 2004490:	050080b4 	movhi	r20,514
 2004494:	a5237104 	addi	r20,r20,-29244
 2004498:	04000084 	movi	r16,2
 200449c:	8980004c 	andi	r6,r17,1
 20044a0:	1009883a 	mov	r4,r2
 20044a4:	8823d07a 	srai	r17,r17,1
 20044a8:	180b883a 	mov	r5,r3
 20044ac:	30000426 	beq	r6,zero,20044c0 <_dtoa_r+0x1270>
 20044b0:	a1800017 	ldw	r6,0(r20)
 20044b4:	a1c00117 	ldw	r7,4(r20)
 20044b8:	84000044 	addi	r16,r16,1
 20044bc:	200c4b80 	call	200c4b8 <__muldf3>
 20044c0:	a5000204 	addi	r20,r20,8
 20044c4:	883ff51e 	bne	r17,zero,200449c <_dtoa_r+0x124c>
 20044c8:	d8800f15 	stw	r2,60(sp)
 20044cc:	d8c01015 	stw	r3,64(sp)
 20044d0:	003c7606 	br	20036ac <_dtoa_r+0x45c>
 20044d4:	00c00c04 	movi	r3,48
 20044d8:	10c00005 	stb	r3,0(r2)
 20044dc:	d8c00517 	ldw	r3,20(sp)
 20044e0:	bd3fffc3 	ldbu	r20,-1(r23)
 20044e4:	18c00044 	addi	r3,r3,1
 20044e8:	d8c00515 	stw	r3,20(sp)
 20044ec:	003db906 	br	2003bd4 <_dtoa_r+0x984>
 20044f0:	89400117 	ldw	r5,4(r17)
 20044f4:	e009883a 	mov	r4,fp
 20044f8:	20069080 	call	2006908 <_Balloc>
 20044fc:	89800417 	ldw	r6,16(r17)
 2004500:	89400304 	addi	r5,r17,12
 2004504:	11000304 	addi	r4,r2,12
 2004508:	31800084 	addi	r6,r6,2
 200450c:	318d883a 	add	r6,r6,r6
 2004510:	318d883a 	add	r6,r6,r6
 2004514:	1027883a 	mov	r19,r2
 2004518:	200653c0 	call	200653c <memcpy>
 200451c:	01800044 	movi	r6,1
 2004520:	980b883a 	mov	r5,r19
 2004524:	e009883a 	mov	r4,fp
 2004528:	20071440 	call	2007144 <__lshift>
 200452c:	1029883a 	mov	r20,r2
 2004530:	003ecc06 	br	2004064 <_dtoa_r+0xe14>
 2004534:	00800e44 	movi	r2,57
 2004538:	90809026 	beq	r18,r2,200477c <_dtoa_r+0x152c>
 200453c:	92000044 	addi	r8,r18,1
 2004540:	003f1f06 	br	20041c0 <_dtoa_r+0xf70>
 2004544:	9011883a 	mov	r8,r18
 2004548:	8825883a 	mov	r18,r17
 200454c:	a023883a 	mov	r17,r20
 2004550:	003e2906 	br	2003df8 <_dtoa_r+0xba8>
 2004554:	002b883a 	mov	r21,zero
 2004558:	0023883a 	mov	r17,zero
 200455c:	003f5406 	br	20042b0 <_dtoa_r+0x1060>
 2004560:	61bfffc4 	addi	r6,r12,-1
 2004564:	300490fa 	slli	r2,r6,3
 2004568:	00c080b4 	movhi	r3,514
 200456c:	18e37b04 	addi	r3,r3,-29204
 2004570:	1885883a 	add	r2,r3,r2
 2004574:	11000017 	ldw	r4,0(r2)
 2004578:	11400117 	ldw	r5,4(r2)
 200457c:	d8800717 	ldw	r2,28(sp)
 2004580:	880f883a 	mov	r7,r17
 2004584:	d9801215 	stw	r6,72(sp)
 2004588:	800d883a 	mov	r6,r16
 200458c:	db001615 	stw	r12,88(sp)
 2004590:	15c00044 	addi	r23,r2,1
 2004594:	200c4b80 	call	200c4b8 <__muldf3>
 2004598:	d9401017 	ldw	r5,64(sp)
 200459c:	d9000f17 	ldw	r4,60(sp)
 20045a0:	d8c01515 	stw	r3,84(sp)
 20045a4:	d8801415 	stw	r2,80(sp)
 20045a8:	200d6200 	call	200d620 <__fixdfsi>
 20045ac:	1009883a 	mov	r4,r2
 20045b0:	1021883a 	mov	r16,r2
 20045b4:	200d6a00 	call	200d6a0 <__floatsidf>
 20045b8:	d9000f17 	ldw	r4,60(sp)
 20045bc:	d9401017 	ldw	r5,64(sp)
 20045c0:	100d883a 	mov	r6,r2
 20045c4:	180f883a 	mov	r7,r3
 20045c8:	200cd240 	call	200cd24 <__subdf3>
 20045cc:	1829883a 	mov	r20,r3
 20045d0:	d8c00717 	ldw	r3,28(sp)
 20045d4:	84000c04 	addi	r16,r16,48
 20045d8:	1023883a 	mov	r17,r2
 20045dc:	1c000005 	stb	r16,0(r3)
 20045e0:	db001617 	ldw	r12,88(sp)
 20045e4:	00800044 	movi	r2,1
 20045e8:	60802226 	beq	r12,r2,2004674 <_dtoa_r+0x1424>
 20045ec:	d9c00717 	ldw	r7,28(sp)
 20045f0:	8805883a 	mov	r2,r17
 20045f4:	b82b883a 	mov	r21,r23
 20045f8:	3b19883a 	add	r12,r7,r12
 20045fc:	6023883a 	mov	r17,r12
 2004600:	a007883a 	mov	r3,r20
 2004604:	dc800f15 	stw	r18,60(sp)
 2004608:	000d883a 	mov	r6,zero
 200460c:	01d00934 	movhi	r7,16420
 2004610:	1009883a 	mov	r4,r2
 2004614:	180b883a 	mov	r5,r3
 2004618:	200c4b80 	call	200c4b8 <__muldf3>
 200461c:	180b883a 	mov	r5,r3
 2004620:	1009883a 	mov	r4,r2
 2004624:	1829883a 	mov	r20,r3
 2004628:	1025883a 	mov	r18,r2
 200462c:	200d6200 	call	200d620 <__fixdfsi>
 2004630:	1009883a 	mov	r4,r2
 2004634:	1021883a 	mov	r16,r2
 2004638:	200d6a00 	call	200d6a0 <__floatsidf>
 200463c:	100d883a 	mov	r6,r2
 2004640:	180f883a 	mov	r7,r3
 2004644:	9009883a 	mov	r4,r18
 2004648:	a00b883a 	mov	r5,r20
 200464c:	84000c04 	addi	r16,r16,48
 2004650:	200cd240 	call	200cd24 <__subdf3>
 2004654:	ad400044 	addi	r21,r21,1
 2004658:	ac3fffc5 	stb	r16,-1(r21)
 200465c:	ac7fea1e 	bne	r21,r17,2004608 <_dtoa_r+0x13b8>
 2004660:	1023883a 	mov	r17,r2
 2004664:	d8801217 	ldw	r2,72(sp)
 2004668:	dc800f17 	ldw	r18,60(sp)
 200466c:	1829883a 	mov	r20,r3
 2004670:	b8af883a 	add	r23,r23,r2
 2004674:	d9001417 	ldw	r4,80(sp)
 2004678:	d9401517 	ldw	r5,84(sp)
 200467c:	000d883a 	mov	r6,zero
 2004680:	01cff834 	movhi	r7,16352
 2004684:	200afe40 	call	200afe4 <__adddf3>
 2004688:	880d883a 	mov	r6,r17
 200468c:	a00f883a 	mov	r7,r20
 2004690:	1009883a 	mov	r4,r2
 2004694:	180b883a 	mov	r5,r3
 2004698:	200c3c40 	call	200c3c4 <__ledf2>
 200469c:	10003e0e 	bge	r2,zero,2004798 <_dtoa_r+0x1548>
 20046a0:	d9001317 	ldw	r4,76(sp)
 20046a4:	bd3fffc3 	ldbu	r20,-1(r23)
 20046a8:	d9000515 	stw	r4,20(sp)
 20046ac:	003d3b06 	br	2003b9c <_dtoa_r+0x94c>
 20046b0:	0027883a 	mov	r19,zero
 20046b4:	003f1b06 	br	2004324 <_dtoa_r+0x10d4>
 20046b8:	d8800817 	ldw	r2,32(sp)
 20046bc:	11e9c83a 	sub	r20,r2,r7
 20046c0:	0005883a 	mov	r2,zero
 20046c4:	003d5406 	br	2003c18 <_dtoa_r+0x9c8>
 20046c8:	00800044 	movi	r2,1
 20046cc:	003dc706 	br	2003dec <_dtoa_r+0xb9c>
 20046d0:	d8c00217 	ldw	r3,8(sp)
 20046d4:	00800d84 	movi	r2,54
 20046d8:	dd400a17 	ldw	r21,40(sp)
 20046dc:	10c5c83a 	sub	r2,r2,r3
 20046e0:	dd000817 	ldw	r20,32(sp)
 20046e4:	003d4c06 	br	2003c18 <_dtoa_r+0x9c8>
 20046e8:	dc800f15 	stw	r18,60(sp)
 20046ec:	dcc01015 	stw	r19,64(sp)
 20046f0:	04000084 	movi	r16,2
 20046f4:	003bed06 	br	20036ac <_dtoa_r+0x45c>
 20046f8:	d9000617 	ldw	r4,24(sp)
 20046fc:	203f0d26 	beq	r4,zero,2004334 <_dtoa_r+0x10e4>
 2004700:	d9800c17 	ldw	r6,48(sp)
 2004704:	01bcab0e 	bge	zero,r6,20039b4 <_dtoa_r+0x764>
 2004708:	d9401017 	ldw	r5,64(sp)
 200470c:	d9000f17 	ldw	r4,60(sp)
 2004710:	000d883a 	mov	r6,zero
 2004714:	01d00934 	movhi	r7,16420
 2004718:	200c4b80 	call	200c4b8 <__muldf3>
 200471c:	81000044 	addi	r4,r16,1
 2004720:	d8800f15 	stw	r2,60(sp)
 2004724:	d8c01015 	stw	r3,64(sp)
 2004728:	200d6a00 	call	200d6a0 <__floatsidf>
 200472c:	d9800f17 	ldw	r6,60(sp)
 2004730:	d9c01017 	ldw	r7,64(sp)
 2004734:	1009883a 	mov	r4,r2
 2004738:	180b883a 	mov	r5,r3
 200473c:	200c4b80 	call	200c4b8 <__muldf3>
 2004740:	01d00734 	movhi	r7,16412
 2004744:	000d883a 	mov	r6,zero
 2004748:	1009883a 	mov	r4,r2
 200474c:	180b883a 	mov	r5,r3
 2004750:	200afe40 	call	200afe4 <__adddf3>
 2004754:	d9c00517 	ldw	r7,20(sp)
 2004758:	047f3034 	movhi	r17,64704
 200475c:	1021883a 	mov	r16,r2
 2004760:	39ffffc4 	addi	r7,r7,-1
 2004764:	d9c01315 	stw	r7,76(sp)
 2004768:	1c63883a 	add	r17,r3,r17
 200476c:	db000c17 	ldw	r12,48(sp)
 2004770:	003bea06 	br	200371c <_dtoa_r+0x4cc>
 2004774:	dc000915 	stw	r16,36(sp)
 2004778:	003e0e06 	br	2003fb4 <_dtoa_r+0xd64>
 200477c:	01000e44 	movi	r4,57
 2004780:	8825883a 	mov	r18,r17
 2004784:	9dc00044 	addi	r23,r19,1
 2004788:	99000005 	stb	r4,0(r19)
 200478c:	a023883a 	mov	r17,r20
 2004790:	dc000915 	stw	r16,36(sp)
 2004794:	003da406 	br	2003e28 <_dtoa_r+0xbd8>
 2004798:	d9801417 	ldw	r6,80(sp)
 200479c:	d9c01517 	ldw	r7,84(sp)
 20047a0:	0009883a 	mov	r4,zero
 20047a4:	014ff834 	movhi	r5,16352
 20047a8:	200cd240 	call	200cd24 <__subdf3>
 20047ac:	880d883a 	mov	r6,r17
 20047b0:	a00f883a 	mov	r7,r20
 20047b4:	1009883a 	mov	r4,r2
 20047b8:	180b883a 	mov	r5,r3
 20047bc:	200c2e80 	call	200c2e8 <__gedf2>
 20047c0:	00bc7c0e 	bge	zero,r2,20039b4 <_dtoa_r+0x764>
 20047c4:	01000c04 	movi	r4,48
 20047c8:	00000106 	br	20047d0 <_dtoa_r+0x1580>
 20047cc:	102f883a 	mov	r23,r2
 20047d0:	b8bfffc4 	addi	r2,r23,-1
 20047d4:	10c00007 	ldb	r3,0(r2)
 20047d8:	193ffc26 	beq	r3,r4,20047cc <_dtoa_r+0x157c>
 20047dc:	d9801317 	ldw	r6,76(sp)
 20047e0:	d9800515 	stw	r6,20(sp)
 20047e4:	003c4406 	br	20038f8 <_dtoa_r+0x6a8>
 20047e8:	d9801317 	ldw	r6,76(sp)
 20047ec:	d9800515 	stw	r6,20(sp)
 20047f0:	003cea06 	br	2003b9c <_dtoa_r+0x94c>
 20047f4:	dd800f17 	ldw	r22,60(sp)
 20047f8:	dcc01017 	ldw	r19,64(sp)
 20047fc:	dc801217 	ldw	r18,72(sp)
 2004800:	003c6c06 	br	20039b4 <_dtoa_r+0x764>
 2004804:	903e031e 	bne	r18,zero,2004014 <_dtoa_r+0xdc4>
 2004808:	003ebb06 	br	20042f8 <_dtoa_r+0x10a8>
 200480c:	103e6c1e 	bne	r2,zero,20041c0 <_dtoa_r+0xf70>
 2004810:	4080004c 	andi	r2,r8,1
 2004814:	103e6a26 	beq	r2,zero,20041c0 <_dtoa_r+0xf70>
 2004818:	003e6606 	br	20041b4 <_dtoa_r+0xf64>
 200481c:	d8c00317 	ldw	r3,12(sp)
 2004820:	00800084 	movi	r2,2
 2004824:	10c02916 	blt	r2,r3,20048cc <_dtoa_r+0x167c>
 2004828:	d9000c17 	ldw	r4,48(sp)
 200482c:	003e8806 	br	2004250 <_dtoa_r+0x1000>
 2004830:	04000084 	movi	r16,2
 2004834:	003b9d06 	br	20036ac <_dtoa_r+0x45c>
 2004838:	d9001317 	ldw	r4,76(sp)
 200483c:	d9000515 	stw	r4,20(sp)
 2004840:	003cd606 	br	2003b9c <_dtoa_r+0x94c>
 2004844:	d8801317 	ldw	r2,76(sp)
 2004848:	d8800515 	stw	r2,20(sp)
 200484c:	003c2a06 	br	20038f8 <_dtoa_r+0x6a8>
 2004850:	d9800317 	ldw	r6,12(sp)
 2004854:	00800084 	movi	r2,2
 2004858:	11801516 	blt	r2,r6,20048b0 <_dtoa_r+0x1660>
 200485c:	d9c00c17 	ldw	r7,48(sp)
 2004860:	d9c00615 	stw	r7,24(sp)
 2004864:	003df706 	br	2004044 <_dtoa_r+0xdf4>
 2004868:	193d3926 	beq	r3,r4,2003d50 <_dtoa_r+0xb00>
 200486c:	00c00f04 	movi	r3,60
 2004870:	1885c83a 	sub	r2,r3,r2
 2004874:	003ddf06 	br	2003ff4 <_dtoa_r+0xda4>
 2004878:	e009883a 	mov	r4,fp
 200487c:	e0001115 	stw	zero,68(fp)
 2004880:	000b883a 	mov	r5,zero
 2004884:	20069080 	call	2006908 <_Balloc>
 2004888:	d8800715 	stw	r2,28(sp)
 200488c:	d8c00717 	ldw	r3,28(sp)
 2004890:	00bfffc4 	movi	r2,-1
 2004894:	01000044 	movi	r4,1
 2004898:	d8800c15 	stw	r2,48(sp)
 200489c:	e0c01015 	stw	r3,64(fp)
 20048a0:	d9000b15 	stw	r4,44(sp)
 20048a4:	d8800615 	stw	r2,24(sp)
 20048a8:	d8002215 	stw	zero,136(sp)
 20048ac:	003c4106 	br	20039b4 <_dtoa_r+0x764>
 20048b0:	d8c00c17 	ldw	r3,48(sp)
 20048b4:	d8c00615 	stw	r3,24(sp)
 20048b8:	003e7006 	br	200427c <_dtoa_r+0x102c>
 20048bc:	04400044 	movi	r17,1
 20048c0:	003b2006 	br	2003544 <_dtoa_r+0x2f4>
 20048c4:	000b883a 	mov	r5,zero
 20048c8:	003b3d06 	br	20035c0 <_dtoa_r+0x370>
 20048cc:	d8800c17 	ldw	r2,48(sp)
 20048d0:	d8800615 	stw	r2,24(sp)
 20048d4:	003e6906 	br	200427c <_dtoa_r+0x102c>

020048d8 <__sflush_r>:
 20048d8:	2880030b 	ldhu	r2,12(r5)
 20048dc:	defffb04 	addi	sp,sp,-20
 20048e0:	dcc00315 	stw	r19,12(sp)
 20048e4:	dc400115 	stw	r17,4(sp)
 20048e8:	dfc00415 	stw	ra,16(sp)
 20048ec:	dc800215 	stw	r18,8(sp)
 20048f0:	dc000015 	stw	r16,0(sp)
 20048f4:	10c0020c 	andi	r3,r2,8
 20048f8:	2823883a 	mov	r17,r5
 20048fc:	2027883a 	mov	r19,r4
 2004900:	1800311e 	bne	r3,zero,20049c8 <__sflush_r+0xf0>
 2004904:	28c00117 	ldw	r3,4(r5)
 2004908:	10820014 	ori	r2,r2,2048
 200490c:	2880030d 	sth	r2,12(r5)
 2004910:	00c04b0e 	bge	zero,r3,2004a40 <__sflush_r+0x168>
 2004914:	8a000a17 	ldw	r8,40(r17)
 2004918:	40002326 	beq	r8,zero,20049a8 <__sflush_r+0xd0>
 200491c:	9c000017 	ldw	r16,0(r19)
 2004920:	10c4000c 	andi	r3,r2,4096
 2004924:	98000015 	stw	zero,0(r19)
 2004928:	18004826 	beq	r3,zero,2004a4c <__sflush_r+0x174>
 200492c:	89801417 	ldw	r6,80(r17)
 2004930:	10c0010c 	andi	r3,r2,4
 2004934:	18000626 	beq	r3,zero,2004950 <__sflush_r+0x78>
 2004938:	88c00117 	ldw	r3,4(r17)
 200493c:	88800c17 	ldw	r2,48(r17)
 2004940:	30cdc83a 	sub	r6,r6,r3
 2004944:	10000226 	beq	r2,zero,2004950 <__sflush_r+0x78>
 2004948:	88800f17 	ldw	r2,60(r17)
 200494c:	308dc83a 	sub	r6,r6,r2
 2004950:	89400717 	ldw	r5,28(r17)
 2004954:	000f883a 	mov	r7,zero
 2004958:	9809883a 	mov	r4,r19
 200495c:	403ee83a 	callr	r8
 2004960:	00ffffc4 	movi	r3,-1
 2004964:	10c04426 	beq	r2,r3,2004a78 <__sflush_r+0x1a0>
 2004968:	88c0030b 	ldhu	r3,12(r17)
 200496c:	89000417 	ldw	r4,16(r17)
 2004970:	88000115 	stw	zero,4(r17)
 2004974:	197dffcc 	andi	r5,r3,63487
 2004978:	8940030d 	sth	r5,12(r17)
 200497c:	89000015 	stw	r4,0(r17)
 2004980:	18c4000c 	andi	r3,r3,4096
 2004984:	18002c1e 	bne	r3,zero,2004a38 <__sflush_r+0x160>
 2004988:	89400c17 	ldw	r5,48(r17)
 200498c:	9c000015 	stw	r16,0(r19)
 2004990:	28000526 	beq	r5,zero,20049a8 <__sflush_r+0xd0>
 2004994:	88801004 	addi	r2,r17,64
 2004998:	28800226 	beq	r5,r2,20049a4 <__sflush_r+0xcc>
 200499c:	9809883a 	mov	r4,r19
 20049a0:	20050540 	call	2005054 <_free_r>
 20049a4:	88000c15 	stw	zero,48(r17)
 20049a8:	0005883a 	mov	r2,zero
 20049ac:	dfc00417 	ldw	ra,16(sp)
 20049b0:	dcc00317 	ldw	r19,12(sp)
 20049b4:	dc800217 	ldw	r18,8(sp)
 20049b8:	dc400117 	ldw	r17,4(sp)
 20049bc:	dc000017 	ldw	r16,0(sp)
 20049c0:	dec00504 	addi	sp,sp,20
 20049c4:	f800283a 	ret
 20049c8:	2c800417 	ldw	r18,16(r5)
 20049cc:	903ff626 	beq	r18,zero,20049a8 <__sflush_r+0xd0>
 20049d0:	2c000017 	ldw	r16,0(r5)
 20049d4:	108000cc 	andi	r2,r2,3
 20049d8:	2c800015 	stw	r18,0(r5)
 20049dc:	84a1c83a 	sub	r16,r16,r18
 20049e0:	1000131e 	bne	r2,zero,2004a30 <__sflush_r+0x158>
 20049e4:	28800517 	ldw	r2,20(r5)
 20049e8:	88800215 	stw	r2,8(r17)
 20049ec:	04000316 	blt	zero,r16,20049fc <__sflush_r+0x124>
 20049f0:	003fed06 	br	20049a8 <__sflush_r+0xd0>
 20049f4:	90a5883a 	add	r18,r18,r2
 20049f8:	043feb0e 	bge	zero,r16,20049a8 <__sflush_r+0xd0>
 20049fc:	88800917 	ldw	r2,36(r17)
 2004a00:	89400717 	ldw	r5,28(r17)
 2004a04:	800f883a 	mov	r7,r16
 2004a08:	900d883a 	mov	r6,r18
 2004a0c:	9809883a 	mov	r4,r19
 2004a10:	103ee83a 	callr	r2
 2004a14:	80a1c83a 	sub	r16,r16,r2
 2004a18:	00bff616 	blt	zero,r2,20049f4 <__sflush_r+0x11c>
 2004a1c:	88c0030b 	ldhu	r3,12(r17)
 2004a20:	00bfffc4 	movi	r2,-1
 2004a24:	18c01014 	ori	r3,r3,64
 2004a28:	88c0030d 	sth	r3,12(r17)
 2004a2c:	003fdf06 	br	20049ac <__sflush_r+0xd4>
 2004a30:	0005883a 	mov	r2,zero
 2004a34:	003fec06 	br	20049e8 <__sflush_r+0x110>
 2004a38:	88801415 	stw	r2,80(r17)
 2004a3c:	003fd206 	br	2004988 <__sflush_r+0xb0>
 2004a40:	28c00f17 	ldw	r3,60(r5)
 2004a44:	00ffb316 	blt	zero,r3,2004914 <__sflush_r+0x3c>
 2004a48:	003fd706 	br	20049a8 <__sflush_r+0xd0>
 2004a4c:	89400717 	ldw	r5,28(r17)
 2004a50:	000d883a 	mov	r6,zero
 2004a54:	01c00044 	movi	r7,1
 2004a58:	9809883a 	mov	r4,r19
 2004a5c:	403ee83a 	callr	r8
 2004a60:	100d883a 	mov	r6,r2
 2004a64:	00bfffc4 	movi	r2,-1
 2004a68:	30801426 	beq	r6,r2,2004abc <__sflush_r+0x1e4>
 2004a6c:	8880030b 	ldhu	r2,12(r17)
 2004a70:	8a000a17 	ldw	r8,40(r17)
 2004a74:	003fae06 	br	2004930 <__sflush_r+0x58>
 2004a78:	98c00017 	ldw	r3,0(r19)
 2004a7c:	183fba26 	beq	r3,zero,2004968 <__sflush_r+0x90>
 2004a80:	01000744 	movi	r4,29
 2004a84:	19000626 	beq	r3,r4,2004aa0 <__sflush_r+0x1c8>
 2004a88:	01000584 	movi	r4,22
 2004a8c:	19000426 	beq	r3,r4,2004aa0 <__sflush_r+0x1c8>
 2004a90:	88c0030b 	ldhu	r3,12(r17)
 2004a94:	18c01014 	ori	r3,r3,64
 2004a98:	88c0030d 	sth	r3,12(r17)
 2004a9c:	003fc306 	br	20049ac <__sflush_r+0xd4>
 2004aa0:	8880030b 	ldhu	r2,12(r17)
 2004aa4:	88c00417 	ldw	r3,16(r17)
 2004aa8:	88000115 	stw	zero,4(r17)
 2004aac:	10bdffcc 	andi	r2,r2,63487
 2004ab0:	8880030d 	sth	r2,12(r17)
 2004ab4:	88c00015 	stw	r3,0(r17)
 2004ab8:	003fb306 	br	2004988 <__sflush_r+0xb0>
 2004abc:	98800017 	ldw	r2,0(r19)
 2004ac0:	103fea26 	beq	r2,zero,2004a6c <__sflush_r+0x194>
 2004ac4:	00c00744 	movi	r3,29
 2004ac8:	10c00226 	beq	r2,r3,2004ad4 <__sflush_r+0x1fc>
 2004acc:	00c00584 	movi	r3,22
 2004ad0:	10c0031e 	bne	r2,r3,2004ae0 <__sflush_r+0x208>
 2004ad4:	9c000015 	stw	r16,0(r19)
 2004ad8:	0005883a 	mov	r2,zero
 2004adc:	003fb306 	br	20049ac <__sflush_r+0xd4>
 2004ae0:	88c0030b 	ldhu	r3,12(r17)
 2004ae4:	3005883a 	mov	r2,r6
 2004ae8:	18c01014 	ori	r3,r3,64
 2004aec:	88c0030d 	sth	r3,12(r17)
 2004af0:	003fae06 	br	20049ac <__sflush_r+0xd4>

02004af4 <_fflush_r>:
 2004af4:	defffd04 	addi	sp,sp,-12
 2004af8:	dc000115 	stw	r16,4(sp)
 2004afc:	dfc00215 	stw	ra,8(sp)
 2004b00:	2021883a 	mov	r16,r4
 2004b04:	20000226 	beq	r4,zero,2004b10 <_fflush_r+0x1c>
 2004b08:	20800e17 	ldw	r2,56(r4)
 2004b0c:	10000c26 	beq	r2,zero,2004b40 <_fflush_r+0x4c>
 2004b10:	2880030f 	ldh	r2,12(r5)
 2004b14:	1000051e 	bne	r2,zero,2004b2c <_fflush_r+0x38>
 2004b18:	0005883a 	mov	r2,zero
 2004b1c:	dfc00217 	ldw	ra,8(sp)
 2004b20:	dc000117 	ldw	r16,4(sp)
 2004b24:	dec00304 	addi	sp,sp,12
 2004b28:	f800283a 	ret
 2004b2c:	8009883a 	mov	r4,r16
 2004b30:	dfc00217 	ldw	ra,8(sp)
 2004b34:	dc000117 	ldw	r16,4(sp)
 2004b38:	dec00304 	addi	sp,sp,12
 2004b3c:	20048d81 	jmpi	20048d8 <__sflush_r>
 2004b40:	d9400015 	stw	r5,0(sp)
 2004b44:	2004ee00 	call	2004ee0 <__sinit>
 2004b48:	d9400017 	ldw	r5,0(sp)
 2004b4c:	003ff006 	br	2004b10 <_fflush_r+0x1c>

02004b50 <fflush>:
 2004b50:	20000526 	beq	r4,zero,2004b68 <fflush+0x18>
 2004b54:	008080b4 	movhi	r2,514
 2004b58:	10aaf804 	addi	r2,r2,-21536
 2004b5c:	200b883a 	mov	r5,r4
 2004b60:	11000017 	ldw	r4,0(r2)
 2004b64:	2004af41 	jmpi	2004af4 <_fflush_r>
 2004b68:	008080b4 	movhi	r2,514
 2004b6c:	10aaf704 	addi	r2,r2,-21540
 2004b70:	11000017 	ldw	r4,0(r2)
 2004b74:	01408034 	movhi	r5,512
 2004b78:	2952bd04 	addi	r5,r5,19188
 2004b7c:	20058f01 	jmpi	20058f0 <_fwalk_reent>

02004b80 <__fp_unlock>:
 2004b80:	0005883a 	mov	r2,zero
 2004b84:	f800283a 	ret

02004b88 <_cleanup_r>:
 2004b88:	01408074 	movhi	r5,513
 2004b8c:	2966a304 	addi	r5,r5,-25972
 2004b90:	20058f01 	jmpi	20058f0 <_fwalk_reent>

02004b94 <__sinit.part.1>:
 2004b94:	defff704 	addi	sp,sp,-36
 2004b98:	00c08034 	movhi	r3,512
 2004b9c:	dfc00815 	stw	ra,32(sp)
 2004ba0:	ddc00715 	stw	r23,28(sp)
 2004ba4:	dd800615 	stw	r22,24(sp)
 2004ba8:	dd400515 	stw	r21,20(sp)
 2004bac:	dd000415 	stw	r20,16(sp)
 2004bb0:	dcc00315 	stw	r19,12(sp)
 2004bb4:	dc800215 	stw	r18,8(sp)
 2004bb8:	dc400115 	stw	r17,4(sp)
 2004bbc:	dc000015 	stw	r16,0(sp)
 2004bc0:	18d2e204 	addi	r3,r3,19336
 2004bc4:	24000117 	ldw	r16,4(r4)
 2004bc8:	20c00f15 	stw	r3,60(r4)
 2004bcc:	2080bb04 	addi	r2,r4,748
 2004bd0:	00c000c4 	movi	r3,3
 2004bd4:	20c0b915 	stw	r3,740(r4)
 2004bd8:	2080ba15 	stw	r2,744(r4)
 2004bdc:	2000b815 	stw	zero,736(r4)
 2004be0:	05c00204 	movi	r23,8
 2004be4:	00800104 	movi	r2,4
 2004be8:	2025883a 	mov	r18,r4
 2004bec:	b80d883a 	mov	r6,r23
 2004bf0:	81001704 	addi	r4,r16,92
 2004bf4:	000b883a 	mov	r5,zero
 2004bf8:	80000015 	stw	zero,0(r16)
 2004bfc:	80000115 	stw	zero,4(r16)
 2004c00:	80000215 	stw	zero,8(r16)
 2004c04:	8080030d 	sth	r2,12(r16)
 2004c08:	80001915 	stw	zero,100(r16)
 2004c0c:	8000038d 	sth	zero,14(r16)
 2004c10:	80000415 	stw	zero,16(r16)
 2004c14:	80000515 	stw	zero,20(r16)
 2004c18:	80000615 	stw	zero,24(r16)
 2004c1c:	20067e00 	call	20067e0 <memset>
 2004c20:	05808034 	movhi	r22,512
 2004c24:	94400217 	ldw	r17,8(r18)
 2004c28:	05408074 	movhi	r21,513
 2004c2c:	05008074 	movhi	r20,513
 2004c30:	04c08074 	movhi	r19,513
 2004c34:	b59ffb04 	addi	r22,r22,32748
 2004c38:	ad601204 	addi	r21,r21,-32696
 2004c3c:	a5203104 	addi	r20,r20,-32572
 2004c40:	9ce04804 	addi	r19,r19,-32480
 2004c44:	85800815 	stw	r22,32(r16)
 2004c48:	85400915 	stw	r21,36(r16)
 2004c4c:	85000a15 	stw	r20,40(r16)
 2004c50:	84c00b15 	stw	r19,44(r16)
 2004c54:	84000715 	stw	r16,28(r16)
 2004c58:	00800284 	movi	r2,10
 2004c5c:	8880030d 	sth	r2,12(r17)
 2004c60:	00800044 	movi	r2,1
 2004c64:	b80d883a 	mov	r6,r23
 2004c68:	89001704 	addi	r4,r17,92
 2004c6c:	000b883a 	mov	r5,zero
 2004c70:	88000015 	stw	zero,0(r17)
 2004c74:	88000115 	stw	zero,4(r17)
 2004c78:	88000215 	stw	zero,8(r17)
 2004c7c:	88001915 	stw	zero,100(r17)
 2004c80:	8880038d 	sth	r2,14(r17)
 2004c84:	88000415 	stw	zero,16(r17)
 2004c88:	88000515 	stw	zero,20(r17)
 2004c8c:	88000615 	stw	zero,24(r17)
 2004c90:	20067e00 	call	20067e0 <memset>
 2004c94:	94000317 	ldw	r16,12(r18)
 2004c98:	00800484 	movi	r2,18
 2004c9c:	8c400715 	stw	r17,28(r17)
 2004ca0:	8d800815 	stw	r22,32(r17)
 2004ca4:	8d400915 	stw	r21,36(r17)
 2004ca8:	8d000a15 	stw	r20,40(r17)
 2004cac:	8cc00b15 	stw	r19,44(r17)
 2004cb0:	8080030d 	sth	r2,12(r16)
 2004cb4:	00800084 	movi	r2,2
 2004cb8:	80000015 	stw	zero,0(r16)
 2004cbc:	80000115 	stw	zero,4(r16)
 2004cc0:	80000215 	stw	zero,8(r16)
 2004cc4:	80001915 	stw	zero,100(r16)
 2004cc8:	8080038d 	sth	r2,14(r16)
 2004ccc:	80000415 	stw	zero,16(r16)
 2004cd0:	80000515 	stw	zero,20(r16)
 2004cd4:	80000615 	stw	zero,24(r16)
 2004cd8:	b80d883a 	mov	r6,r23
 2004cdc:	000b883a 	mov	r5,zero
 2004ce0:	81001704 	addi	r4,r16,92
 2004ce4:	20067e00 	call	20067e0 <memset>
 2004ce8:	00800044 	movi	r2,1
 2004cec:	84000715 	stw	r16,28(r16)
 2004cf0:	85800815 	stw	r22,32(r16)
 2004cf4:	85400915 	stw	r21,36(r16)
 2004cf8:	85000a15 	stw	r20,40(r16)
 2004cfc:	84c00b15 	stw	r19,44(r16)
 2004d00:	90800e15 	stw	r2,56(r18)
 2004d04:	dfc00817 	ldw	ra,32(sp)
 2004d08:	ddc00717 	ldw	r23,28(sp)
 2004d0c:	dd800617 	ldw	r22,24(sp)
 2004d10:	dd400517 	ldw	r21,20(sp)
 2004d14:	dd000417 	ldw	r20,16(sp)
 2004d18:	dcc00317 	ldw	r19,12(sp)
 2004d1c:	dc800217 	ldw	r18,8(sp)
 2004d20:	dc400117 	ldw	r17,4(sp)
 2004d24:	dc000017 	ldw	r16,0(sp)
 2004d28:	dec00904 	addi	sp,sp,36
 2004d2c:	f800283a 	ret

02004d30 <__fp_lock>:
 2004d30:	0005883a 	mov	r2,zero
 2004d34:	f800283a 	ret

02004d38 <__sfmoreglue>:
 2004d38:	defffc04 	addi	sp,sp,-16
 2004d3c:	dc800215 	stw	r18,8(sp)
 2004d40:	2825883a 	mov	r18,r5
 2004d44:	dc000015 	stw	r16,0(sp)
 2004d48:	01401a04 	movi	r5,104
 2004d4c:	2021883a 	mov	r16,r4
 2004d50:	913fffc4 	addi	r4,r18,-1
 2004d54:	dfc00315 	stw	ra,12(sp)
 2004d58:	dc400115 	stw	r17,4(sp)
 2004d5c:	200afbc0 	call	200afbc <__mulsi3>
 2004d60:	8009883a 	mov	r4,r16
 2004d64:	11401d04 	addi	r5,r2,116
 2004d68:	1023883a 	mov	r17,r2
 2004d6c:	2005c4c0 	call	2005c4c <_malloc_r>
 2004d70:	1021883a 	mov	r16,r2
 2004d74:	10000726 	beq	r2,zero,2004d94 <__sfmoreglue+0x5c>
 2004d78:	11000304 	addi	r4,r2,12
 2004d7c:	10000015 	stw	zero,0(r2)
 2004d80:	14800115 	stw	r18,4(r2)
 2004d84:	11000215 	stw	r4,8(r2)
 2004d88:	89801a04 	addi	r6,r17,104
 2004d8c:	000b883a 	mov	r5,zero
 2004d90:	20067e00 	call	20067e0 <memset>
 2004d94:	8005883a 	mov	r2,r16
 2004d98:	dfc00317 	ldw	ra,12(sp)
 2004d9c:	dc800217 	ldw	r18,8(sp)
 2004da0:	dc400117 	ldw	r17,4(sp)
 2004da4:	dc000017 	ldw	r16,0(sp)
 2004da8:	dec00404 	addi	sp,sp,16
 2004dac:	f800283a 	ret

02004db0 <__sfp>:
 2004db0:	defffb04 	addi	sp,sp,-20
 2004db4:	dc000015 	stw	r16,0(sp)
 2004db8:	040080b4 	movhi	r16,514
 2004dbc:	842af704 	addi	r16,r16,-21540
 2004dc0:	dcc00315 	stw	r19,12(sp)
 2004dc4:	2027883a 	mov	r19,r4
 2004dc8:	81000017 	ldw	r4,0(r16)
 2004dcc:	dfc00415 	stw	ra,16(sp)
 2004dd0:	dc800215 	stw	r18,8(sp)
 2004dd4:	20800e17 	ldw	r2,56(r4)
 2004dd8:	dc400115 	stw	r17,4(sp)
 2004ddc:	1000021e 	bne	r2,zero,2004de8 <__sfp+0x38>
 2004de0:	2004b940 	call	2004b94 <__sinit.part.1>
 2004de4:	81000017 	ldw	r4,0(r16)
 2004de8:	2480b804 	addi	r18,r4,736
 2004dec:	047fffc4 	movi	r17,-1
 2004df0:	91000117 	ldw	r4,4(r18)
 2004df4:	94000217 	ldw	r16,8(r18)
 2004df8:	213fffc4 	addi	r4,r4,-1
 2004dfc:	20000a16 	blt	r4,zero,2004e28 <__sfp+0x78>
 2004e00:	8080030f 	ldh	r2,12(r16)
 2004e04:	10000c26 	beq	r2,zero,2004e38 <__sfp+0x88>
 2004e08:	80c01d04 	addi	r3,r16,116
 2004e0c:	00000206 	br	2004e18 <__sfp+0x68>
 2004e10:	18bfe60f 	ldh	r2,-104(r3)
 2004e14:	10000826 	beq	r2,zero,2004e38 <__sfp+0x88>
 2004e18:	213fffc4 	addi	r4,r4,-1
 2004e1c:	1c3ffd04 	addi	r16,r3,-12
 2004e20:	18c01a04 	addi	r3,r3,104
 2004e24:	247ffa1e 	bne	r4,r17,2004e10 <__sfp+0x60>
 2004e28:	90800017 	ldw	r2,0(r18)
 2004e2c:	10001d26 	beq	r2,zero,2004ea4 <__sfp+0xf4>
 2004e30:	1025883a 	mov	r18,r2
 2004e34:	003fee06 	br	2004df0 <__sfp+0x40>
 2004e38:	00bfffc4 	movi	r2,-1
 2004e3c:	8080038d 	sth	r2,14(r16)
 2004e40:	00800044 	movi	r2,1
 2004e44:	8080030d 	sth	r2,12(r16)
 2004e48:	80001915 	stw	zero,100(r16)
 2004e4c:	80000015 	stw	zero,0(r16)
 2004e50:	80000215 	stw	zero,8(r16)
 2004e54:	80000115 	stw	zero,4(r16)
 2004e58:	80000415 	stw	zero,16(r16)
 2004e5c:	80000515 	stw	zero,20(r16)
 2004e60:	80000615 	stw	zero,24(r16)
 2004e64:	01800204 	movi	r6,8
 2004e68:	000b883a 	mov	r5,zero
 2004e6c:	81001704 	addi	r4,r16,92
 2004e70:	20067e00 	call	20067e0 <memset>
 2004e74:	8005883a 	mov	r2,r16
 2004e78:	80000c15 	stw	zero,48(r16)
 2004e7c:	80000d15 	stw	zero,52(r16)
 2004e80:	80001115 	stw	zero,68(r16)
 2004e84:	80001215 	stw	zero,72(r16)
 2004e88:	dfc00417 	ldw	ra,16(sp)
 2004e8c:	dcc00317 	ldw	r19,12(sp)
 2004e90:	dc800217 	ldw	r18,8(sp)
 2004e94:	dc400117 	ldw	r17,4(sp)
 2004e98:	dc000017 	ldw	r16,0(sp)
 2004e9c:	dec00504 	addi	sp,sp,20
 2004ea0:	f800283a 	ret
 2004ea4:	01400104 	movi	r5,4
 2004ea8:	9809883a 	mov	r4,r19
 2004eac:	2004d380 	call	2004d38 <__sfmoreglue>
 2004eb0:	90800015 	stw	r2,0(r18)
 2004eb4:	103fde1e 	bne	r2,zero,2004e30 <__sfp+0x80>
 2004eb8:	00800304 	movi	r2,12
 2004ebc:	98800015 	stw	r2,0(r19)
 2004ec0:	0005883a 	mov	r2,zero
 2004ec4:	003ff006 	br	2004e88 <__sfp+0xd8>

02004ec8 <_cleanup>:
 2004ec8:	008080b4 	movhi	r2,514
 2004ecc:	10aaf704 	addi	r2,r2,-21540
 2004ed0:	11000017 	ldw	r4,0(r2)
 2004ed4:	01408074 	movhi	r5,513
 2004ed8:	2966a304 	addi	r5,r5,-25972
 2004edc:	20058f01 	jmpi	20058f0 <_fwalk_reent>

02004ee0 <__sinit>:
 2004ee0:	20800e17 	ldw	r2,56(r4)
 2004ee4:	10000126 	beq	r2,zero,2004eec <__sinit+0xc>
 2004ee8:	f800283a 	ret
 2004eec:	2004b941 	jmpi	2004b94 <__sinit.part.1>

02004ef0 <__sfp_lock_acquire>:
 2004ef0:	f800283a 	ret

02004ef4 <__sfp_lock_release>:
 2004ef4:	f800283a 	ret

02004ef8 <__sinit_lock_acquire>:
 2004ef8:	f800283a 	ret

02004efc <__sinit_lock_release>:
 2004efc:	f800283a 	ret

02004f00 <__fp_lock_all>:
 2004f00:	008080b4 	movhi	r2,514
 2004f04:	10aaf804 	addi	r2,r2,-21536
 2004f08:	11000017 	ldw	r4,0(r2)
 2004f0c:	01408034 	movhi	r5,512
 2004f10:	29534c04 	addi	r5,r5,19760
 2004f14:	200582c1 	jmpi	200582c <_fwalk>

02004f18 <__fp_unlock_all>:
 2004f18:	008080b4 	movhi	r2,514
 2004f1c:	10aaf804 	addi	r2,r2,-21536
 2004f20:	11000017 	ldw	r4,0(r2)
 2004f24:	01408034 	movhi	r5,512
 2004f28:	2952e004 	addi	r5,r5,19328
 2004f2c:	200582c1 	jmpi	200582c <_fwalk>

02004f30 <_malloc_trim_r>:
 2004f30:	defffb04 	addi	sp,sp,-20
 2004f34:	dcc00315 	stw	r19,12(sp)
 2004f38:	04c080b4 	movhi	r19,514
 2004f3c:	dc800215 	stw	r18,8(sp)
 2004f40:	dc400115 	stw	r17,4(sp)
 2004f44:	dc000015 	stw	r16,0(sp)
 2004f48:	dfc00415 	stw	ra,16(sp)
 2004f4c:	2821883a 	mov	r16,r5
 2004f50:	9ce57004 	addi	r19,r19,-27200
 2004f54:	2025883a 	mov	r18,r4
 2004f58:	200e3380 	call	200e338 <__malloc_lock>
 2004f5c:	98800217 	ldw	r2,8(r19)
 2004f60:	14400117 	ldw	r17,4(r2)
 2004f64:	00bfff04 	movi	r2,-4
 2004f68:	88a2703a 	and	r17,r17,r2
 2004f6c:	8c21c83a 	sub	r16,r17,r16
 2004f70:	8403fbc4 	addi	r16,r16,4079
 2004f74:	8020d33a 	srli	r16,r16,12
 2004f78:	0083ffc4 	movi	r2,4095
 2004f7c:	843fffc4 	addi	r16,r16,-1
 2004f80:	8020933a 	slli	r16,r16,12
 2004f84:	1400060e 	bge	r2,r16,2004fa0 <_malloc_trim_r+0x70>
 2004f88:	000b883a 	mov	r5,zero
 2004f8c:	9009883a 	mov	r4,r18
 2004f90:	2007f980 	call	2007f98 <_sbrk_r>
 2004f94:	98c00217 	ldw	r3,8(r19)
 2004f98:	1c47883a 	add	r3,r3,r17
 2004f9c:	10c00a26 	beq	r2,r3,2004fc8 <_malloc_trim_r+0x98>
 2004fa0:	9009883a 	mov	r4,r18
 2004fa4:	200e4580 	call	200e458 <__malloc_unlock>
 2004fa8:	0005883a 	mov	r2,zero
 2004fac:	dfc00417 	ldw	ra,16(sp)
 2004fb0:	dcc00317 	ldw	r19,12(sp)
 2004fb4:	dc800217 	ldw	r18,8(sp)
 2004fb8:	dc400117 	ldw	r17,4(sp)
 2004fbc:	dc000017 	ldw	r16,0(sp)
 2004fc0:	dec00504 	addi	sp,sp,20
 2004fc4:	f800283a 	ret
 2004fc8:	040bc83a 	sub	r5,zero,r16
 2004fcc:	9009883a 	mov	r4,r18
 2004fd0:	2007f980 	call	2007f98 <_sbrk_r>
 2004fd4:	00ffffc4 	movi	r3,-1
 2004fd8:	10c00d26 	beq	r2,r3,2005010 <_malloc_trim_r+0xe0>
 2004fdc:	00c080b4 	movhi	r3,514
 2004fe0:	18f23204 	addi	r3,r3,-14136
 2004fe4:	18800017 	ldw	r2,0(r3)
 2004fe8:	99000217 	ldw	r4,8(r19)
 2004fec:	8c23c83a 	sub	r17,r17,r16
 2004ff0:	8c400054 	ori	r17,r17,1
 2004ff4:	1421c83a 	sub	r16,r2,r16
 2004ff8:	24400115 	stw	r17,4(r4)
 2004ffc:	9009883a 	mov	r4,r18
 2005000:	1c000015 	stw	r16,0(r3)
 2005004:	200e4580 	call	200e458 <__malloc_unlock>
 2005008:	00800044 	movi	r2,1
 200500c:	003fe706 	br	2004fac <_malloc_trim_r+0x7c>
 2005010:	000b883a 	mov	r5,zero
 2005014:	9009883a 	mov	r4,r18
 2005018:	2007f980 	call	2007f98 <_sbrk_r>
 200501c:	99000217 	ldw	r4,8(r19)
 2005020:	014003c4 	movi	r5,15
 2005024:	1107c83a 	sub	r3,r2,r4
 2005028:	28ffdd0e 	bge	r5,r3,2004fa0 <_malloc_trim_r+0x70>
 200502c:	014080b4 	movhi	r5,514
 2005030:	296afa04 	addi	r5,r5,-21528
 2005034:	29400017 	ldw	r5,0(r5)
 2005038:	18c00054 	ori	r3,r3,1
 200503c:	20c00115 	stw	r3,4(r4)
 2005040:	00c080b4 	movhi	r3,514
 2005044:	1145c83a 	sub	r2,r2,r5
 2005048:	18f23204 	addi	r3,r3,-14136
 200504c:	18800015 	stw	r2,0(r3)
 2005050:	003fd306 	br	2004fa0 <_malloc_trim_r+0x70>

02005054 <_free_r>:
 2005054:	28004126 	beq	r5,zero,200515c <_free_r+0x108>
 2005058:	defffd04 	addi	sp,sp,-12
 200505c:	dc400115 	stw	r17,4(sp)
 2005060:	dc000015 	stw	r16,0(sp)
 2005064:	2023883a 	mov	r17,r4
 2005068:	2821883a 	mov	r16,r5
 200506c:	dfc00215 	stw	ra,8(sp)
 2005070:	200e3380 	call	200e338 <__malloc_lock>
 2005074:	81ffff17 	ldw	r7,-4(r16)
 2005078:	00bfff84 	movi	r2,-2
 200507c:	010080b4 	movhi	r4,514
 2005080:	81bffe04 	addi	r6,r16,-8
 2005084:	3884703a 	and	r2,r7,r2
 2005088:	21257004 	addi	r4,r4,-27200
 200508c:	308b883a 	add	r5,r6,r2
 2005090:	2a400117 	ldw	r9,4(r5)
 2005094:	22000217 	ldw	r8,8(r4)
 2005098:	00ffff04 	movi	r3,-4
 200509c:	48c6703a 	and	r3,r9,r3
 20050a0:	2a005726 	beq	r5,r8,2005200 <_free_r+0x1ac>
 20050a4:	28c00115 	stw	r3,4(r5)
 20050a8:	39c0004c 	andi	r7,r7,1
 20050ac:	3800091e 	bne	r7,zero,20050d4 <_free_r+0x80>
 20050b0:	823ffe17 	ldw	r8,-8(r16)
 20050b4:	22400204 	addi	r9,r4,8
 20050b8:	320dc83a 	sub	r6,r6,r8
 20050bc:	31c00217 	ldw	r7,8(r6)
 20050c0:	1205883a 	add	r2,r2,r8
 20050c4:	3a406526 	beq	r7,r9,200525c <_free_r+0x208>
 20050c8:	32000317 	ldw	r8,12(r6)
 20050cc:	3a000315 	stw	r8,12(r7)
 20050d0:	41c00215 	stw	r7,8(r8)
 20050d4:	28cf883a 	add	r7,r5,r3
 20050d8:	39c00117 	ldw	r7,4(r7)
 20050dc:	39c0004c 	andi	r7,r7,1
 20050e0:	38003a26 	beq	r7,zero,20051cc <_free_r+0x178>
 20050e4:	10c00054 	ori	r3,r2,1
 20050e8:	30c00115 	stw	r3,4(r6)
 20050ec:	3087883a 	add	r3,r6,r2
 20050f0:	18800015 	stw	r2,0(r3)
 20050f4:	00c07fc4 	movi	r3,511
 20050f8:	18801936 	bltu	r3,r2,2005160 <_free_r+0x10c>
 20050fc:	1004d0fa 	srli	r2,r2,3
 2005100:	01c00044 	movi	r7,1
 2005104:	21400117 	ldw	r5,4(r4)
 2005108:	10c00044 	addi	r3,r2,1
 200510c:	18c7883a 	add	r3,r3,r3
 2005110:	1005d0ba 	srai	r2,r2,2
 2005114:	18c7883a 	add	r3,r3,r3
 2005118:	18c7883a 	add	r3,r3,r3
 200511c:	1907883a 	add	r3,r3,r4
 2005120:	3884983a 	sll	r2,r7,r2
 2005124:	19c00017 	ldw	r7,0(r3)
 2005128:	1a3ffe04 	addi	r8,r3,-8
 200512c:	1144b03a 	or	r2,r2,r5
 2005130:	32000315 	stw	r8,12(r6)
 2005134:	31c00215 	stw	r7,8(r6)
 2005138:	20800115 	stw	r2,4(r4)
 200513c:	19800015 	stw	r6,0(r3)
 2005140:	39800315 	stw	r6,12(r7)
 2005144:	8809883a 	mov	r4,r17
 2005148:	dfc00217 	ldw	ra,8(sp)
 200514c:	dc400117 	ldw	r17,4(sp)
 2005150:	dc000017 	ldw	r16,0(sp)
 2005154:	dec00304 	addi	sp,sp,12
 2005158:	200e4581 	jmpi	200e458 <__malloc_unlock>
 200515c:	f800283a 	ret
 2005160:	100ad27a 	srli	r5,r2,9
 2005164:	00c00104 	movi	r3,4
 2005168:	19404a36 	bltu	r3,r5,2005294 <_free_r+0x240>
 200516c:	100ad1ba 	srli	r5,r2,6
 2005170:	28c00e44 	addi	r3,r5,57
 2005174:	18c7883a 	add	r3,r3,r3
 2005178:	29400e04 	addi	r5,r5,56
 200517c:	18c7883a 	add	r3,r3,r3
 2005180:	18c7883a 	add	r3,r3,r3
 2005184:	1909883a 	add	r4,r3,r4
 2005188:	20c00017 	ldw	r3,0(r4)
 200518c:	01c080b4 	movhi	r7,514
 2005190:	213ffe04 	addi	r4,r4,-8
 2005194:	39e57004 	addi	r7,r7,-27200
 2005198:	20c04426 	beq	r4,r3,20052ac <_free_r+0x258>
 200519c:	01ffff04 	movi	r7,-4
 20051a0:	19400117 	ldw	r5,4(r3)
 20051a4:	29ca703a 	and	r5,r5,r7
 20051a8:	1140022e 	bgeu	r2,r5,20051b4 <_free_r+0x160>
 20051ac:	18c00217 	ldw	r3,8(r3)
 20051b0:	20fffb1e 	bne	r4,r3,20051a0 <_free_r+0x14c>
 20051b4:	19000317 	ldw	r4,12(r3)
 20051b8:	31000315 	stw	r4,12(r6)
 20051bc:	30c00215 	stw	r3,8(r6)
 20051c0:	21800215 	stw	r6,8(r4)
 20051c4:	19800315 	stw	r6,12(r3)
 20051c8:	003fde06 	br	2005144 <_free_r+0xf0>
 20051cc:	29c00217 	ldw	r7,8(r5)
 20051d0:	10c5883a 	add	r2,r2,r3
 20051d4:	00c080b4 	movhi	r3,514
 20051d8:	18e57204 	addi	r3,r3,-27192
 20051dc:	38c03b26 	beq	r7,r3,20052cc <_free_r+0x278>
 20051e0:	2a000317 	ldw	r8,12(r5)
 20051e4:	11400054 	ori	r5,r2,1
 20051e8:	3087883a 	add	r3,r6,r2
 20051ec:	3a000315 	stw	r8,12(r7)
 20051f0:	41c00215 	stw	r7,8(r8)
 20051f4:	31400115 	stw	r5,4(r6)
 20051f8:	18800015 	stw	r2,0(r3)
 20051fc:	003fbd06 	br	20050f4 <_free_r+0xa0>
 2005200:	39c0004c 	andi	r7,r7,1
 2005204:	10c5883a 	add	r2,r2,r3
 2005208:	3800071e 	bne	r7,zero,2005228 <_free_r+0x1d4>
 200520c:	81fffe17 	ldw	r7,-8(r16)
 2005210:	31cdc83a 	sub	r6,r6,r7
 2005214:	30c00317 	ldw	r3,12(r6)
 2005218:	31400217 	ldw	r5,8(r6)
 200521c:	11c5883a 	add	r2,r2,r7
 2005220:	28c00315 	stw	r3,12(r5)
 2005224:	19400215 	stw	r5,8(r3)
 2005228:	10c00054 	ori	r3,r2,1
 200522c:	30c00115 	stw	r3,4(r6)
 2005230:	00c080b4 	movhi	r3,514
 2005234:	18eafb04 	addi	r3,r3,-21524
 2005238:	18c00017 	ldw	r3,0(r3)
 200523c:	21800215 	stw	r6,8(r4)
 2005240:	10ffc036 	bltu	r2,r3,2005144 <_free_r+0xf0>
 2005244:	008080b4 	movhi	r2,514
 2005248:	10b21004 	addi	r2,r2,-14272
 200524c:	11400017 	ldw	r5,0(r2)
 2005250:	8809883a 	mov	r4,r17
 2005254:	2004f300 	call	2004f30 <_malloc_trim_r>
 2005258:	003fba06 	br	2005144 <_free_r+0xf0>
 200525c:	28c9883a 	add	r4,r5,r3
 2005260:	21000117 	ldw	r4,4(r4)
 2005264:	2100004c 	andi	r4,r4,1
 2005268:	2000391e 	bne	r4,zero,2005350 <_free_r+0x2fc>
 200526c:	29c00217 	ldw	r7,8(r5)
 2005270:	29000317 	ldw	r4,12(r5)
 2005274:	1885883a 	add	r2,r3,r2
 2005278:	10c00054 	ori	r3,r2,1
 200527c:	39000315 	stw	r4,12(r7)
 2005280:	21c00215 	stw	r7,8(r4)
 2005284:	30c00115 	stw	r3,4(r6)
 2005288:	308d883a 	add	r6,r6,r2
 200528c:	30800015 	stw	r2,0(r6)
 2005290:	003fac06 	br	2005144 <_free_r+0xf0>
 2005294:	00c00504 	movi	r3,20
 2005298:	19401536 	bltu	r3,r5,20052f0 <_free_r+0x29c>
 200529c:	28c01704 	addi	r3,r5,92
 20052a0:	18c7883a 	add	r3,r3,r3
 20052a4:	294016c4 	addi	r5,r5,91
 20052a8:	003fb406 	br	200517c <_free_r+0x128>
 20052ac:	280bd0ba 	srai	r5,r5,2
 20052b0:	00c00044 	movi	r3,1
 20052b4:	38800117 	ldw	r2,4(r7)
 20052b8:	194a983a 	sll	r5,r3,r5
 20052bc:	2007883a 	mov	r3,r4
 20052c0:	2884b03a 	or	r2,r5,r2
 20052c4:	38800115 	stw	r2,4(r7)
 20052c8:	003fbb06 	br	20051b8 <_free_r+0x164>
 20052cc:	21800515 	stw	r6,20(r4)
 20052d0:	21800415 	stw	r6,16(r4)
 20052d4:	10c00054 	ori	r3,r2,1
 20052d8:	31c00315 	stw	r7,12(r6)
 20052dc:	31c00215 	stw	r7,8(r6)
 20052e0:	30c00115 	stw	r3,4(r6)
 20052e4:	308d883a 	add	r6,r6,r2
 20052e8:	30800015 	stw	r2,0(r6)
 20052ec:	003f9506 	br	2005144 <_free_r+0xf0>
 20052f0:	00c01504 	movi	r3,84
 20052f4:	19400536 	bltu	r3,r5,200530c <_free_r+0x2b8>
 20052f8:	100ad33a 	srli	r5,r2,12
 20052fc:	28c01bc4 	addi	r3,r5,111
 2005300:	18c7883a 	add	r3,r3,r3
 2005304:	29401b84 	addi	r5,r5,110
 2005308:	003f9c06 	br	200517c <_free_r+0x128>
 200530c:	00c05504 	movi	r3,340
 2005310:	19400536 	bltu	r3,r5,2005328 <_free_r+0x2d4>
 2005314:	100ad3fa 	srli	r5,r2,15
 2005318:	28c01e04 	addi	r3,r5,120
 200531c:	18c7883a 	add	r3,r3,r3
 2005320:	29401dc4 	addi	r5,r5,119
 2005324:	003f9506 	br	200517c <_free_r+0x128>
 2005328:	00c15504 	movi	r3,1364
 200532c:	19400536 	bltu	r3,r5,2005344 <_free_r+0x2f0>
 2005330:	100ad4ba 	srli	r5,r2,18
 2005334:	28c01f44 	addi	r3,r5,125
 2005338:	18c7883a 	add	r3,r3,r3
 200533c:	29401f04 	addi	r5,r5,124
 2005340:	003f8e06 	br	200517c <_free_r+0x128>
 2005344:	00c03f84 	movi	r3,254
 2005348:	01401f84 	movi	r5,126
 200534c:	003f8b06 	br	200517c <_free_r+0x128>
 2005350:	10c00054 	ori	r3,r2,1
 2005354:	30c00115 	stw	r3,4(r6)
 2005358:	308d883a 	add	r6,r6,r2
 200535c:	30800015 	stw	r2,0(r6)
 2005360:	003f7806 	br	2005144 <_free_r+0xf0>

02005364 <__sfvwrite_r>:
 2005364:	30800217 	ldw	r2,8(r6)
 2005368:	10006726 	beq	r2,zero,2005508 <__sfvwrite_r+0x1a4>
 200536c:	28c0030b 	ldhu	r3,12(r5)
 2005370:	defff404 	addi	sp,sp,-48
 2005374:	dd400715 	stw	r21,28(sp)
 2005378:	dd000615 	stw	r20,24(sp)
 200537c:	dc000215 	stw	r16,8(sp)
 2005380:	dfc00b15 	stw	ra,44(sp)
 2005384:	df000a15 	stw	fp,40(sp)
 2005388:	ddc00915 	stw	r23,36(sp)
 200538c:	dd800815 	stw	r22,32(sp)
 2005390:	dcc00515 	stw	r19,20(sp)
 2005394:	dc800415 	stw	r18,16(sp)
 2005398:	dc400315 	stw	r17,12(sp)
 200539c:	1880020c 	andi	r2,r3,8
 20053a0:	2821883a 	mov	r16,r5
 20053a4:	202b883a 	mov	r21,r4
 20053a8:	3029883a 	mov	r20,r6
 20053ac:	10002726 	beq	r2,zero,200544c <__sfvwrite_r+0xe8>
 20053b0:	28800417 	ldw	r2,16(r5)
 20053b4:	10002526 	beq	r2,zero,200544c <__sfvwrite_r+0xe8>
 20053b8:	1880008c 	andi	r2,r3,2
 20053bc:	a4400017 	ldw	r17,0(r20)
 20053c0:	10002a26 	beq	r2,zero,200546c <__sfvwrite_r+0x108>
 20053c4:	05a00034 	movhi	r22,32768
 20053c8:	0027883a 	mov	r19,zero
 20053cc:	0025883a 	mov	r18,zero
 20053d0:	b5bf0004 	addi	r22,r22,-1024
 20053d4:	980d883a 	mov	r6,r19
 20053d8:	a809883a 	mov	r4,r21
 20053dc:	90004626 	beq	r18,zero,20054f8 <__sfvwrite_r+0x194>
 20053e0:	900f883a 	mov	r7,r18
 20053e4:	b480022e 	bgeu	r22,r18,20053f0 <__sfvwrite_r+0x8c>
 20053e8:	01e00034 	movhi	r7,32768
 20053ec:	39ff0004 	addi	r7,r7,-1024
 20053f0:	80800917 	ldw	r2,36(r16)
 20053f4:	81400717 	ldw	r5,28(r16)
 20053f8:	103ee83a 	callr	r2
 20053fc:	00805a0e 	bge	zero,r2,2005568 <__sfvwrite_r+0x204>
 2005400:	a0c00217 	ldw	r3,8(r20)
 2005404:	98a7883a 	add	r19,r19,r2
 2005408:	90a5c83a 	sub	r18,r18,r2
 200540c:	1885c83a 	sub	r2,r3,r2
 2005410:	a0800215 	stw	r2,8(r20)
 2005414:	103fef1e 	bne	r2,zero,20053d4 <__sfvwrite_r+0x70>
 2005418:	0005883a 	mov	r2,zero
 200541c:	dfc00b17 	ldw	ra,44(sp)
 2005420:	df000a17 	ldw	fp,40(sp)
 2005424:	ddc00917 	ldw	r23,36(sp)
 2005428:	dd800817 	ldw	r22,32(sp)
 200542c:	dd400717 	ldw	r21,28(sp)
 2005430:	dd000617 	ldw	r20,24(sp)
 2005434:	dcc00517 	ldw	r19,20(sp)
 2005438:	dc800417 	ldw	r18,16(sp)
 200543c:	dc400317 	ldw	r17,12(sp)
 2005440:	dc000217 	ldw	r16,8(sp)
 2005444:	dec00c04 	addi	sp,sp,48
 2005448:	f800283a 	ret
 200544c:	800b883a 	mov	r5,r16
 2005450:	a809883a 	mov	r4,r21
 2005454:	2002ed40 	call	2002ed4 <__swsetup_r>
 2005458:	1000ee1e 	bne	r2,zero,2005814 <__sfvwrite_r+0x4b0>
 200545c:	80c0030b 	ldhu	r3,12(r16)
 2005460:	a4400017 	ldw	r17,0(r20)
 2005464:	1880008c 	andi	r2,r3,2
 2005468:	103fd61e 	bne	r2,zero,20053c4 <__sfvwrite_r+0x60>
 200546c:	1880004c 	andi	r2,r3,1
 2005470:	1000421e 	bne	r2,zero,200557c <__sfvwrite_r+0x218>
 2005474:	0039883a 	mov	fp,zero
 2005478:	0025883a 	mov	r18,zero
 200547c:	90001a26 	beq	r18,zero,20054e8 <__sfvwrite_r+0x184>
 2005480:	1880800c 	andi	r2,r3,512
 2005484:	84c00217 	ldw	r19,8(r16)
 2005488:	10002126 	beq	r2,zero,2005510 <__sfvwrite_r+0x1ac>
 200548c:	982f883a 	mov	r23,r19
 2005490:	94c09636 	bltu	r18,r19,20056ec <__sfvwrite_r+0x388>
 2005494:	1881200c 	andi	r2,r3,1152
 2005498:	1000a11e 	bne	r2,zero,2005720 <__sfvwrite_r+0x3bc>
 200549c:	81000017 	ldw	r4,0(r16)
 20054a0:	b80d883a 	mov	r6,r23
 20054a4:	e00b883a 	mov	r5,fp
 20054a8:	20066840 	call	2006684 <memmove>
 20054ac:	80c00217 	ldw	r3,8(r16)
 20054b0:	81000017 	ldw	r4,0(r16)
 20054b4:	9005883a 	mov	r2,r18
 20054b8:	1ce7c83a 	sub	r19,r3,r19
 20054bc:	25cf883a 	add	r7,r4,r23
 20054c0:	84c00215 	stw	r19,8(r16)
 20054c4:	81c00015 	stw	r7,0(r16)
 20054c8:	a0c00217 	ldw	r3,8(r20)
 20054cc:	e0b9883a 	add	fp,fp,r2
 20054d0:	90a5c83a 	sub	r18,r18,r2
 20054d4:	18a7c83a 	sub	r19,r3,r2
 20054d8:	a4c00215 	stw	r19,8(r20)
 20054dc:	983fce26 	beq	r19,zero,2005418 <__sfvwrite_r+0xb4>
 20054e0:	80c0030b 	ldhu	r3,12(r16)
 20054e4:	903fe61e 	bne	r18,zero,2005480 <__sfvwrite_r+0x11c>
 20054e8:	8f000017 	ldw	fp,0(r17)
 20054ec:	8c800117 	ldw	r18,4(r17)
 20054f0:	8c400204 	addi	r17,r17,8
 20054f4:	003fe106 	br	200547c <__sfvwrite_r+0x118>
 20054f8:	8cc00017 	ldw	r19,0(r17)
 20054fc:	8c800117 	ldw	r18,4(r17)
 2005500:	8c400204 	addi	r17,r17,8
 2005504:	003fb306 	br	20053d4 <__sfvwrite_r+0x70>
 2005508:	0005883a 	mov	r2,zero
 200550c:	f800283a 	ret
 2005510:	81000017 	ldw	r4,0(r16)
 2005514:	80800417 	ldw	r2,16(r16)
 2005518:	11005a36 	bltu	r2,r4,2005684 <__sfvwrite_r+0x320>
 200551c:	85c00517 	ldw	r23,20(r16)
 2005520:	95c05836 	bltu	r18,r23,2005684 <__sfvwrite_r+0x320>
 2005524:	00a00034 	movhi	r2,32768
 2005528:	10bfffc4 	addi	r2,r2,-1
 200552c:	9009883a 	mov	r4,r18
 2005530:	1480012e 	bgeu	r2,r18,2005538 <__sfvwrite_r+0x1d4>
 2005534:	1009883a 	mov	r4,r2
 2005538:	b80b883a 	mov	r5,r23
 200553c:	200ae080 	call	200ae08 <__divsi3>
 2005540:	b80b883a 	mov	r5,r23
 2005544:	1009883a 	mov	r4,r2
 2005548:	200afbc0 	call	200afbc <__mulsi3>
 200554c:	81400717 	ldw	r5,28(r16)
 2005550:	80c00917 	ldw	r3,36(r16)
 2005554:	100f883a 	mov	r7,r2
 2005558:	e00d883a 	mov	r6,fp
 200555c:	a809883a 	mov	r4,r21
 2005560:	183ee83a 	callr	r3
 2005564:	00bfd816 	blt	zero,r2,20054c8 <__sfvwrite_r+0x164>
 2005568:	8080030b 	ldhu	r2,12(r16)
 200556c:	10801014 	ori	r2,r2,64
 2005570:	8080030d 	sth	r2,12(r16)
 2005574:	00bfffc4 	movi	r2,-1
 2005578:	003fa806 	br	200541c <__sfvwrite_r+0xb8>
 200557c:	0027883a 	mov	r19,zero
 2005580:	0011883a 	mov	r8,zero
 2005584:	0039883a 	mov	fp,zero
 2005588:	0025883a 	mov	r18,zero
 200558c:	90001f26 	beq	r18,zero,200560c <__sfvwrite_r+0x2a8>
 2005590:	40005a26 	beq	r8,zero,20056fc <__sfvwrite_r+0x398>
 2005594:	982d883a 	mov	r22,r19
 2005598:	94c0012e 	bgeu	r18,r19,20055a0 <__sfvwrite_r+0x23c>
 200559c:	902d883a 	mov	r22,r18
 20055a0:	81000017 	ldw	r4,0(r16)
 20055a4:	80800417 	ldw	r2,16(r16)
 20055a8:	b02f883a 	mov	r23,r22
 20055ac:	81c00517 	ldw	r7,20(r16)
 20055b0:	1100032e 	bgeu	r2,r4,20055c0 <__sfvwrite_r+0x25c>
 20055b4:	80c00217 	ldw	r3,8(r16)
 20055b8:	38c7883a 	add	r3,r7,r3
 20055bc:	1d801816 	blt	r3,r22,2005620 <__sfvwrite_r+0x2bc>
 20055c0:	b1c03e16 	blt	r22,r7,20056bc <__sfvwrite_r+0x358>
 20055c4:	80800917 	ldw	r2,36(r16)
 20055c8:	81400717 	ldw	r5,28(r16)
 20055cc:	e00d883a 	mov	r6,fp
 20055d0:	da000115 	stw	r8,4(sp)
 20055d4:	a809883a 	mov	r4,r21
 20055d8:	103ee83a 	callr	r2
 20055dc:	102f883a 	mov	r23,r2
 20055e0:	da000117 	ldw	r8,4(sp)
 20055e4:	00bfe00e 	bge	zero,r2,2005568 <__sfvwrite_r+0x204>
 20055e8:	9de7c83a 	sub	r19,r19,r23
 20055ec:	98001f26 	beq	r19,zero,200566c <__sfvwrite_r+0x308>
 20055f0:	a0800217 	ldw	r2,8(r20)
 20055f4:	e5f9883a 	add	fp,fp,r23
 20055f8:	95e5c83a 	sub	r18,r18,r23
 20055fc:	15efc83a 	sub	r23,r2,r23
 2005600:	a5c00215 	stw	r23,8(r20)
 2005604:	b83f8426 	beq	r23,zero,2005418 <__sfvwrite_r+0xb4>
 2005608:	903fe11e 	bne	r18,zero,2005590 <__sfvwrite_r+0x22c>
 200560c:	8f000017 	ldw	fp,0(r17)
 2005610:	8c800117 	ldw	r18,4(r17)
 2005614:	0011883a 	mov	r8,zero
 2005618:	8c400204 	addi	r17,r17,8
 200561c:	003fdb06 	br	200558c <__sfvwrite_r+0x228>
 2005620:	180d883a 	mov	r6,r3
 2005624:	e00b883a 	mov	r5,fp
 2005628:	da000115 	stw	r8,4(sp)
 200562c:	d8c00015 	stw	r3,0(sp)
 2005630:	20066840 	call	2006684 <memmove>
 2005634:	d8c00017 	ldw	r3,0(sp)
 2005638:	80800017 	ldw	r2,0(r16)
 200563c:	800b883a 	mov	r5,r16
 2005640:	a809883a 	mov	r4,r21
 2005644:	10c5883a 	add	r2,r2,r3
 2005648:	80800015 	stw	r2,0(r16)
 200564c:	d8c00015 	stw	r3,0(sp)
 2005650:	2004af40 	call	2004af4 <_fflush_r>
 2005654:	d8c00017 	ldw	r3,0(sp)
 2005658:	da000117 	ldw	r8,4(sp)
 200565c:	103fc21e 	bne	r2,zero,2005568 <__sfvwrite_r+0x204>
 2005660:	182f883a 	mov	r23,r3
 2005664:	9de7c83a 	sub	r19,r19,r23
 2005668:	983fe11e 	bne	r19,zero,20055f0 <__sfvwrite_r+0x28c>
 200566c:	800b883a 	mov	r5,r16
 2005670:	a809883a 	mov	r4,r21
 2005674:	2004af40 	call	2004af4 <_fflush_r>
 2005678:	103fbb1e 	bne	r2,zero,2005568 <__sfvwrite_r+0x204>
 200567c:	0011883a 	mov	r8,zero
 2005680:	003fdb06 	br	20055f0 <__sfvwrite_r+0x28c>
 2005684:	94c0012e 	bgeu	r18,r19,200568c <__sfvwrite_r+0x328>
 2005688:	9027883a 	mov	r19,r18
 200568c:	980d883a 	mov	r6,r19
 2005690:	e00b883a 	mov	r5,fp
 2005694:	20066840 	call	2006684 <memmove>
 2005698:	80800217 	ldw	r2,8(r16)
 200569c:	80c00017 	ldw	r3,0(r16)
 20056a0:	14c5c83a 	sub	r2,r2,r19
 20056a4:	1cc7883a 	add	r3,r3,r19
 20056a8:	80800215 	stw	r2,8(r16)
 20056ac:	80c00015 	stw	r3,0(r16)
 20056b0:	10004326 	beq	r2,zero,20057c0 <__sfvwrite_r+0x45c>
 20056b4:	9805883a 	mov	r2,r19
 20056b8:	003f8306 	br	20054c8 <__sfvwrite_r+0x164>
 20056bc:	b00d883a 	mov	r6,r22
 20056c0:	e00b883a 	mov	r5,fp
 20056c4:	da000115 	stw	r8,4(sp)
 20056c8:	20066840 	call	2006684 <memmove>
 20056cc:	80800217 	ldw	r2,8(r16)
 20056d0:	80c00017 	ldw	r3,0(r16)
 20056d4:	da000117 	ldw	r8,4(sp)
 20056d8:	1585c83a 	sub	r2,r2,r22
 20056dc:	1dad883a 	add	r22,r3,r22
 20056e0:	80800215 	stw	r2,8(r16)
 20056e4:	85800015 	stw	r22,0(r16)
 20056e8:	003fbf06 	br	20055e8 <__sfvwrite_r+0x284>
 20056ec:	81000017 	ldw	r4,0(r16)
 20056f0:	9027883a 	mov	r19,r18
 20056f4:	902f883a 	mov	r23,r18
 20056f8:	003f6906 	br	20054a0 <__sfvwrite_r+0x13c>
 20056fc:	900d883a 	mov	r6,r18
 2005700:	01400284 	movi	r5,10
 2005704:	e009883a 	mov	r4,fp
 2005708:	20064580 	call	2006458 <memchr>
 200570c:	10003e26 	beq	r2,zero,2005808 <__sfvwrite_r+0x4a4>
 2005710:	10800044 	addi	r2,r2,1
 2005714:	1727c83a 	sub	r19,r2,fp
 2005718:	02000044 	movi	r8,1
 200571c:	003f9d06 	br	2005594 <__sfvwrite_r+0x230>
 2005720:	80800517 	ldw	r2,20(r16)
 2005724:	81400417 	ldw	r5,16(r16)
 2005728:	81c00017 	ldw	r7,0(r16)
 200572c:	10a7883a 	add	r19,r2,r2
 2005730:	9885883a 	add	r2,r19,r2
 2005734:	1026d7fa 	srli	r19,r2,31
 2005738:	396dc83a 	sub	r22,r7,r5
 200573c:	b1000044 	addi	r4,r22,1
 2005740:	9885883a 	add	r2,r19,r2
 2005744:	1027d07a 	srai	r19,r2,1
 2005748:	2485883a 	add	r2,r4,r18
 200574c:	980d883a 	mov	r6,r19
 2005750:	9880022e 	bgeu	r19,r2,200575c <__sfvwrite_r+0x3f8>
 2005754:	1027883a 	mov	r19,r2
 2005758:	100d883a 	mov	r6,r2
 200575c:	18c1000c 	andi	r3,r3,1024
 2005760:	18001c26 	beq	r3,zero,20057d4 <__sfvwrite_r+0x470>
 2005764:	300b883a 	mov	r5,r6
 2005768:	a809883a 	mov	r4,r21
 200576c:	2005c4c0 	call	2005c4c <_malloc_r>
 2005770:	102f883a 	mov	r23,r2
 2005774:	10002926 	beq	r2,zero,200581c <__sfvwrite_r+0x4b8>
 2005778:	81400417 	ldw	r5,16(r16)
 200577c:	b00d883a 	mov	r6,r22
 2005780:	1009883a 	mov	r4,r2
 2005784:	200653c0 	call	200653c <memcpy>
 2005788:	8080030b 	ldhu	r2,12(r16)
 200578c:	00fedfc4 	movi	r3,-1153
 2005790:	10c4703a 	and	r2,r2,r3
 2005794:	10802014 	ori	r2,r2,128
 2005798:	8080030d 	sth	r2,12(r16)
 200579c:	bd89883a 	add	r4,r23,r22
 20057a0:	9d8fc83a 	sub	r7,r19,r22
 20057a4:	85c00415 	stw	r23,16(r16)
 20057a8:	84c00515 	stw	r19,20(r16)
 20057ac:	81000015 	stw	r4,0(r16)
 20057b0:	9027883a 	mov	r19,r18
 20057b4:	81c00215 	stw	r7,8(r16)
 20057b8:	902f883a 	mov	r23,r18
 20057bc:	003f3806 	br	20054a0 <__sfvwrite_r+0x13c>
 20057c0:	800b883a 	mov	r5,r16
 20057c4:	a809883a 	mov	r4,r21
 20057c8:	2004af40 	call	2004af4 <_fflush_r>
 20057cc:	103fb926 	beq	r2,zero,20056b4 <__sfvwrite_r+0x350>
 20057d0:	003f6506 	br	2005568 <__sfvwrite_r+0x204>
 20057d4:	a809883a 	mov	r4,r21
 20057d8:	20079c00 	call	20079c0 <_realloc_r>
 20057dc:	102f883a 	mov	r23,r2
 20057e0:	103fee1e 	bne	r2,zero,200579c <__sfvwrite_r+0x438>
 20057e4:	81400417 	ldw	r5,16(r16)
 20057e8:	a809883a 	mov	r4,r21
 20057ec:	20050540 	call	2005054 <_free_r>
 20057f0:	8080030b 	ldhu	r2,12(r16)
 20057f4:	00ffdfc4 	movi	r3,-129
 20057f8:	1884703a 	and	r2,r3,r2
 20057fc:	00c00304 	movi	r3,12
 2005800:	a8c00015 	stw	r3,0(r21)
 2005804:	003f5906 	br	200556c <__sfvwrite_r+0x208>
 2005808:	94c00044 	addi	r19,r18,1
 200580c:	02000044 	movi	r8,1
 2005810:	003f6006 	br	2005594 <__sfvwrite_r+0x230>
 2005814:	00bfffc4 	movi	r2,-1
 2005818:	003f0006 	br	200541c <__sfvwrite_r+0xb8>
 200581c:	00800304 	movi	r2,12
 2005820:	a8800015 	stw	r2,0(r21)
 2005824:	8080030b 	ldhu	r2,12(r16)
 2005828:	003f5006 	br	200556c <__sfvwrite_r+0x208>

0200582c <_fwalk>:
 200582c:	defff704 	addi	sp,sp,-36
 2005830:	dd000415 	stw	r20,16(sp)
 2005834:	dfc00815 	stw	ra,32(sp)
 2005838:	ddc00715 	stw	r23,28(sp)
 200583c:	dd800615 	stw	r22,24(sp)
 2005840:	dd400515 	stw	r21,20(sp)
 2005844:	dcc00315 	stw	r19,12(sp)
 2005848:	dc800215 	stw	r18,8(sp)
 200584c:	dc400115 	stw	r17,4(sp)
 2005850:	dc000015 	stw	r16,0(sp)
 2005854:	2500b804 	addi	r20,r4,736
 2005858:	a0002326 	beq	r20,zero,20058e8 <_fwalk+0xbc>
 200585c:	282b883a 	mov	r21,r5
 2005860:	002f883a 	mov	r23,zero
 2005864:	05800044 	movi	r22,1
 2005868:	04ffffc4 	movi	r19,-1
 200586c:	a4400117 	ldw	r17,4(r20)
 2005870:	a4800217 	ldw	r18,8(r20)
 2005874:	8c7fffc4 	addi	r17,r17,-1
 2005878:	88000d16 	blt	r17,zero,20058b0 <_fwalk+0x84>
 200587c:	94000304 	addi	r16,r18,12
 2005880:	94800384 	addi	r18,r18,14
 2005884:	8080000b 	ldhu	r2,0(r16)
 2005888:	8c7fffc4 	addi	r17,r17,-1
 200588c:	813ffd04 	addi	r4,r16,-12
 2005890:	b080042e 	bgeu	r22,r2,20058a4 <_fwalk+0x78>
 2005894:	9080000f 	ldh	r2,0(r18)
 2005898:	14c00226 	beq	r2,r19,20058a4 <_fwalk+0x78>
 200589c:	a83ee83a 	callr	r21
 20058a0:	b8aeb03a 	or	r23,r23,r2
 20058a4:	84001a04 	addi	r16,r16,104
 20058a8:	94801a04 	addi	r18,r18,104
 20058ac:	8cfff51e 	bne	r17,r19,2005884 <_fwalk+0x58>
 20058b0:	a5000017 	ldw	r20,0(r20)
 20058b4:	a03fed1e 	bne	r20,zero,200586c <_fwalk+0x40>
 20058b8:	b805883a 	mov	r2,r23
 20058bc:	dfc00817 	ldw	ra,32(sp)
 20058c0:	ddc00717 	ldw	r23,28(sp)
 20058c4:	dd800617 	ldw	r22,24(sp)
 20058c8:	dd400517 	ldw	r21,20(sp)
 20058cc:	dd000417 	ldw	r20,16(sp)
 20058d0:	dcc00317 	ldw	r19,12(sp)
 20058d4:	dc800217 	ldw	r18,8(sp)
 20058d8:	dc400117 	ldw	r17,4(sp)
 20058dc:	dc000017 	ldw	r16,0(sp)
 20058e0:	dec00904 	addi	sp,sp,36
 20058e4:	f800283a 	ret
 20058e8:	002f883a 	mov	r23,zero
 20058ec:	003ff206 	br	20058b8 <_fwalk+0x8c>

020058f0 <_fwalk_reent>:
 20058f0:	defff704 	addi	sp,sp,-36
 20058f4:	dd000415 	stw	r20,16(sp)
 20058f8:	dfc00815 	stw	ra,32(sp)
 20058fc:	ddc00715 	stw	r23,28(sp)
 2005900:	dd800615 	stw	r22,24(sp)
 2005904:	dd400515 	stw	r21,20(sp)
 2005908:	dcc00315 	stw	r19,12(sp)
 200590c:	dc800215 	stw	r18,8(sp)
 2005910:	dc400115 	stw	r17,4(sp)
 2005914:	dc000015 	stw	r16,0(sp)
 2005918:	2500b804 	addi	r20,r4,736
 200591c:	a0002326 	beq	r20,zero,20059ac <_fwalk_reent+0xbc>
 2005920:	282b883a 	mov	r21,r5
 2005924:	2027883a 	mov	r19,r4
 2005928:	002f883a 	mov	r23,zero
 200592c:	05800044 	movi	r22,1
 2005930:	04bfffc4 	movi	r18,-1
 2005934:	a4400117 	ldw	r17,4(r20)
 2005938:	a4000217 	ldw	r16,8(r20)
 200593c:	8c7fffc4 	addi	r17,r17,-1
 2005940:	88000c16 	blt	r17,zero,2005974 <_fwalk_reent+0x84>
 2005944:	84000304 	addi	r16,r16,12
 2005948:	8080000b 	ldhu	r2,0(r16)
 200594c:	8c7fffc4 	addi	r17,r17,-1
 2005950:	817ffd04 	addi	r5,r16,-12
 2005954:	b080052e 	bgeu	r22,r2,200596c <_fwalk_reent+0x7c>
 2005958:	8080008f 	ldh	r2,2(r16)
 200595c:	9809883a 	mov	r4,r19
 2005960:	14800226 	beq	r2,r18,200596c <_fwalk_reent+0x7c>
 2005964:	a83ee83a 	callr	r21
 2005968:	b8aeb03a 	or	r23,r23,r2
 200596c:	84001a04 	addi	r16,r16,104
 2005970:	8cbff51e 	bne	r17,r18,2005948 <_fwalk_reent+0x58>
 2005974:	a5000017 	ldw	r20,0(r20)
 2005978:	a03fee1e 	bne	r20,zero,2005934 <_fwalk_reent+0x44>
 200597c:	b805883a 	mov	r2,r23
 2005980:	dfc00817 	ldw	ra,32(sp)
 2005984:	ddc00717 	ldw	r23,28(sp)
 2005988:	dd800617 	ldw	r22,24(sp)
 200598c:	dd400517 	ldw	r21,20(sp)
 2005990:	dd000417 	ldw	r20,16(sp)
 2005994:	dcc00317 	ldw	r19,12(sp)
 2005998:	dc800217 	ldw	r18,8(sp)
 200599c:	dc400117 	ldw	r17,4(sp)
 20059a0:	dc000017 	ldw	r16,0(sp)
 20059a4:	dec00904 	addi	sp,sp,36
 20059a8:	f800283a 	ret
 20059ac:	002f883a 	mov	r23,zero
 20059b0:	003ff206 	br	200597c <_fwalk_reent+0x8c>

020059b4 <_setlocale_r>:
 20059b4:	30001b26 	beq	r6,zero,2005a24 <_setlocale_r+0x70>
 20059b8:	014080b4 	movhi	r5,514
 20059bc:	defffe04 	addi	sp,sp,-8
 20059c0:	29636104 	addi	r5,r5,-29308
 20059c4:	3009883a 	mov	r4,r6
 20059c8:	dc000015 	stw	r16,0(sp)
 20059cc:	dfc00115 	stw	ra,4(sp)
 20059d0:	3021883a 	mov	r16,r6
 20059d4:	20081280 	call	2008128 <strcmp>
 20059d8:	1000061e 	bne	r2,zero,20059f4 <_setlocale_r+0x40>
 20059dc:	008080b4 	movhi	r2,514
 20059e0:	10a36004 	addi	r2,r2,-29312
 20059e4:	dfc00117 	ldw	ra,4(sp)
 20059e8:	dc000017 	ldw	r16,0(sp)
 20059ec:	dec00204 	addi	sp,sp,8
 20059f0:	f800283a 	ret
 20059f4:	014080b4 	movhi	r5,514
 20059f8:	29636004 	addi	r5,r5,-29312
 20059fc:	8009883a 	mov	r4,r16
 2005a00:	20081280 	call	2008128 <strcmp>
 2005a04:	103ff526 	beq	r2,zero,20059dc <_setlocale_r+0x28>
 2005a08:	014080b4 	movhi	r5,514
 2005a0c:	29634b04 	addi	r5,r5,-29396
 2005a10:	8009883a 	mov	r4,r16
 2005a14:	20081280 	call	2008128 <strcmp>
 2005a18:	103ff026 	beq	r2,zero,20059dc <_setlocale_r+0x28>
 2005a1c:	0005883a 	mov	r2,zero
 2005a20:	003ff006 	br	20059e4 <_setlocale_r+0x30>
 2005a24:	008080b4 	movhi	r2,514
 2005a28:	10a36004 	addi	r2,r2,-29312
 2005a2c:	f800283a 	ret

02005a30 <__locale_charset>:
 2005a30:	008080b4 	movhi	r2,514
 2005a34:	10a55a04 	addi	r2,r2,-27288
 2005a38:	f800283a 	ret

02005a3c <__locale_mb_cur_max>:
 2005a3c:	008080b4 	movhi	r2,514
 2005a40:	10aaf904 	addi	r2,r2,-21532
 2005a44:	10800017 	ldw	r2,0(r2)
 2005a48:	f800283a 	ret

02005a4c <__locale_msgcharset>:
 2005a4c:	008080b4 	movhi	r2,514
 2005a50:	10a55204 	addi	r2,r2,-27320
 2005a54:	f800283a 	ret

02005a58 <__locale_cjk_lang>:
 2005a58:	0005883a 	mov	r2,zero
 2005a5c:	f800283a 	ret

02005a60 <_localeconv_r>:
 2005a60:	008080b4 	movhi	r2,514
 2005a64:	10a56204 	addi	r2,r2,-27256
 2005a68:	f800283a 	ret

02005a6c <setlocale>:
 2005a6c:	008080b4 	movhi	r2,514
 2005a70:	10aaf804 	addi	r2,r2,-21536
 2005a74:	280d883a 	mov	r6,r5
 2005a78:	200b883a 	mov	r5,r4
 2005a7c:	11000017 	ldw	r4,0(r2)
 2005a80:	20059b41 	jmpi	20059b4 <_setlocale_r>

02005a84 <localeconv>:
 2005a84:	008080b4 	movhi	r2,514
 2005a88:	10a56204 	addi	r2,r2,-27256
 2005a8c:	f800283a 	ret

02005a90 <__smakebuf_r>:
 2005a90:	2880030b 	ldhu	r2,12(r5)
 2005a94:	10c0008c 	andi	r3,r2,2
 2005a98:	1800411e 	bne	r3,zero,2005ba0 <__smakebuf_r+0x110>
 2005a9c:	deffec04 	addi	sp,sp,-80
 2005aa0:	dc000f15 	stw	r16,60(sp)
 2005aa4:	2821883a 	mov	r16,r5
 2005aa8:	2940038f 	ldh	r5,14(r5)
 2005aac:	dc401015 	stw	r17,64(sp)
 2005ab0:	dfc01315 	stw	ra,76(sp)
 2005ab4:	dcc01215 	stw	r19,72(sp)
 2005ab8:	dc801115 	stw	r18,68(sp)
 2005abc:	2023883a 	mov	r17,r4
 2005ac0:	28001c16 	blt	r5,zero,2005b34 <__smakebuf_r+0xa4>
 2005ac4:	d80d883a 	mov	r6,sp
 2005ac8:	2009d980 	call	2009d98 <_fstat_r>
 2005acc:	10001816 	blt	r2,zero,2005b30 <__smakebuf_r+0xa0>
 2005ad0:	d8800117 	ldw	r2,4(sp)
 2005ad4:	00e00014 	movui	r3,32768
 2005ad8:	10bc000c 	andi	r2,r2,61440
 2005adc:	14c80020 	cmpeqi	r19,r2,8192
 2005ae0:	10c03726 	beq	r2,r3,2005bc0 <__smakebuf_r+0x130>
 2005ae4:	80c0030b 	ldhu	r3,12(r16)
 2005ae8:	18c20014 	ori	r3,r3,2048
 2005aec:	80c0030d 	sth	r3,12(r16)
 2005af0:	00c80004 	movi	r3,8192
 2005af4:	10c0521e 	bne	r2,r3,2005c40 <__smakebuf_r+0x1b0>
 2005af8:	8140038f 	ldh	r5,14(r16)
 2005afc:	8809883a 	mov	r4,r17
 2005b00:	2009df40 	call	2009df4 <_isatty_r>
 2005b04:	10004c26 	beq	r2,zero,2005c38 <__smakebuf_r+0x1a8>
 2005b08:	8080030b 	ldhu	r2,12(r16)
 2005b0c:	80c010c4 	addi	r3,r16,67
 2005b10:	80c00015 	stw	r3,0(r16)
 2005b14:	10800054 	ori	r2,r2,1
 2005b18:	8080030d 	sth	r2,12(r16)
 2005b1c:	00800044 	movi	r2,1
 2005b20:	80c00415 	stw	r3,16(r16)
 2005b24:	80800515 	stw	r2,20(r16)
 2005b28:	04810004 	movi	r18,1024
 2005b2c:	00000706 	br	2005b4c <__smakebuf_r+0xbc>
 2005b30:	8080030b 	ldhu	r2,12(r16)
 2005b34:	10c0200c 	andi	r3,r2,128
 2005b38:	18001f1e 	bne	r3,zero,2005bb8 <__smakebuf_r+0x128>
 2005b3c:	04810004 	movi	r18,1024
 2005b40:	10820014 	ori	r2,r2,2048
 2005b44:	8080030d 	sth	r2,12(r16)
 2005b48:	0027883a 	mov	r19,zero
 2005b4c:	900b883a 	mov	r5,r18
 2005b50:	8809883a 	mov	r4,r17
 2005b54:	2005c4c0 	call	2005c4c <_malloc_r>
 2005b58:	10002c26 	beq	r2,zero,2005c0c <__smakebuf_r+0x17c>
 2005b5c:	80c0030b 	ldhu	r3,12(r16)
 2005b60:	01008034 	movhi	r4,512
 2005b64:	2112e204 	addi	r4,r4,19336
 2005b68:	89000f15 	stw	r4,60(r17)
 2005b6c:	18c02014 	ori	r3,r3,128
 2005b70:	80c0030d 	sth	r3,12(r16)
 2005b74:	80800015 	stw	r2,0(r16)
 2005b78:	80800415 	stw	r2,16(r16)
 2005b7c:	84800515 	stw	r18,20(r16)
 2005b80:	98001a1e 	bne	r19,zero,2005bec <__smakebuf_r+0x15c>
 2005b84:	dfc01317 	ldw	ra,76(sp)
 2005b88:	dcc01217 	ldw	r19,72(sp)
 2005b8c:	dc801117 	ldw	r18,68(sp)
 2005b90:	dc401017 	ldw	r17,64(sp)
 2005b94:	dc000f17 	ldw	r16,60(sp)
 2005b98:	dec01404 	addi	sp,sp,80
 2005b9c:	f800283a 	ret
 2005ba0:	288010c4 	addi	r2,r5,67
 2005ba4:	28800015 	stw	r2,0(r5)
 2005ba8:	28800415 	stw	r2,16(r5)
 2005bac:	00800044 	movi	r2,1
 2005bb0:	28800515 	stw	r2,20(r5)
 2005bb4:	f800283a 	ret
 2005bb8:	04801004 	movi	r18,64
 2005bbc:	003fe006 	br	2005b40 <__smakebuf_r+0xb0>
 2005bc0:	81000a17 	ldw	r4,40(r16)
 2005bc4:	00c08074 	movhi	r3,513
 2005bc8:	18e03104 	addi	r3,r3,-32572
 2005bcc:	20ffc51e 	bne	r4,r3,2005ae4 <__smakebuf_r+0x54>
 2005bd0:	8080030b 	ldhu	r2,12(r16)
 2005bd4:	04810004 	movi	r18,1024
 2005bd8:	84801315 	stw	r18,76(r16)
 2005bdc:	1484b03a 	or	r2,r2,r18
 2005be0:	8080030d 	sth	r2,12(r16)
 2005be4:	0027883a 	mov	r19,zero
 2005be8:	003fd806 	br	2005b4c <__smakebuf_r+0xbc>
 2005bec:	8140038f 	ldh	r5,14(r16)
 2005bf0:	8809883a 	mov	r4,r17
 2005bf4:	2009df40 	call	2009df4 <_isatty_r>
 2005bf8:	103fe226 	beq	r2,zero,2005b84 <__smakebuf_r+0xf4>
 2005bfc:	8080030b 	ldhu	r2,12(r16)
 2005c00:	10800054 	ori	r2,r2,1
 2005c04:	8080030d 	sth	r2,12(r16)
 2005c08:	003fde06 	br	2005b84 <__smakebuf_r+0xf4>
 2005c0c:	8080030b 	ldhu	r2,12(r16)
 2005c10:	10c0800c 	andi	r3,r2,512
 2005c14:	183fdb1e 	bne	r3,zero,2005b84 <__smakebuf_r+0xf4>
 2005c18:	10800094 	ori	r2,r2,2
 2005c1c:	80c010c4 	addi	r3,r16,67
 2005c20:	8080030d 	sth	r2,12(r16)
 2005c24:	00800044 	movi	r2,1
 2005c28:	80c00015 	stw	r3,0(r16)
 2005c2c:	80c00415 	stw	r3,16(r16)
 2005c30:	80800515 	stw	r2,20(r16)
 2005c34:	003fd306 	br	2005b84 <__smakebuf_r+0xf4>
 2005c38:	04810004 	movi	r18,1024
 2005c3c:	003fc306 	br	2005b4c <__smakebuf_r+0xbc>
 2005c40:	0027883a 	mov	r19,zero
 2005c44:	04810004 	movi	r18,1024
 2005c48:	003fc006 	br	2005b4c <__smakebuf_r+0xbc>

02005c4c <_malloc_r>:
 2005c4c:	defff504 	addi	sp,sp,-44
 2005c50:	dc800315 	stw	r18,12(sp)
 2005c54:	dfc00a15 	stw	ra,40(sp)
 2005c58:	df000915 	stw	fp,36(sp)
 2005c5c:	ddc00815 	stw	r23,32(sp)
 2005c60:	dd800715 	stw	r22,28(sp)
 2005c64:	dd400615 	stw	r21,24(sp)
 2005c68:	dd000515 	stw	r20,20(sp)
 2005c6c:	dcc00415 	stw	r19,16(sp)
 2005c70:	dc400215 	stw	r17,8(sp)
 2005c74:	dc000115 	stw	r16,4(sp)
 2005c78:	288002c4 	addi	r2,r5,11
 2005c7c:	00c00584 	movi	r3,22
 2005c80:	2025883a 	mov	r18,r4
 2005c84:	18807f2e 	bgeu	r3,r2,2005e84 <_malloc_r+0x238>
 2005c88:	047ffe04 	movi	r17,-8
 2005c8c:	1462703a 	and	r17,r2,r17
 2005c90:	8800a316 	blt	r17,zero,2005f20 <_malloc_r+0x2d4>
 2005c94:	8940a236 	bltu	r17,r5,2005f20 <_malloc_r+0x2d4>
 2005c98:	200e3380 	call	200e338 <__malloc_lock>
 2005c9c:	00807dc4 	movi	r2,503
 2005ca0:	1441e92e 	bgeu	r2,r17,2006448 <_malloc_r+0x7fc>
 2005ca4:	8804d27a 	srli	r2,r17,9
 2005ca8:	1000a126 	beq	r2,zero,2005f30 <_malloc_r+0x2e4>
 2005cac:	00c00104 	movi	r3,4
 2005cb0:	18811e36 	bltu	r3,r2,200612c <_malloc_r+0x4e0>
 2005cb4:	8804d1ba 	srli	r2,r17,6
 2005cb8:	12000e44 	addi	r8,r2,57
 2005cbc:	11c00e04 	addi	r7,r2,56
 2005cc0:	4209883a 	add	r4,r8,r8
 2005cc4:	04c080b4 	movhi	r19,514
 2005cc8:	2109883a 	add	r4,r4,r4
 2005ccc:	9ce57004 	addi	r19,r19,-27200
 2005cd0:	2109883a 	add	r4,r4,r4
 2005cd4:	9909883a 	add	r4,r19,r4
 2005cd8:	24000117 	ldw	r16,4(r4)
 2005cdc:	213ffe04 	addi	r4,r4,-8
 2005ce0:	24009726 	beq	r4,r16,2005f40 <_malloc_r+0x2f4>
 2005ce4:	80800117 	ldw	r2,4(r16)
 2005ce8:	01bfff04 	movi	r6,-4
 2005cec:	014003c4 	movi	r5,15
 2005cf0:	1184703a 	and	r2,r2,r6
 2005cf4:	1447c83a 	sub	r3,r2,r17
 2005cf8:	28c00716 	blt	r5,r3,2005d18 <_malloc_r+0xcc>
 2005cfc:	1800920e 	bge	r3,zero,2005f48 <_malloc_r+0x2fc>
 2005d00:	84000317 	ldw	r16,12(r16)
 2005d04:	24008e26 	beq	r4,r16,2005f40 <_malloc_r+0x2f4>
 2005d08:	80800117 	ldw	r2,4(r16)
 2005d0c:	1184703a 	and	r2,r2,r6
 2005d10:	1447c83a 	sub	r3,r2,r17
 2005d14:	28fff90e 	bge	r5,r3,2005cfc <_malloc_r+0xb0>
 2005d18:	3809883a 	mov	r4,r7
 2005d1c:	018080b4 	movhi	r6,514
 2005d20:	9c000417 	ldw	r16,16(r19)
 2005d24:	31a57004 	addi	r6,r6,-27200
 2005d28:	32000204 	addi	r8,r6,8
 2005d2c:	82013426 	beq	r16,r8,2006200 <_malloc_r+0x5b4>
 2005d30:	80c00117 	ldw	r3,4(r16)
 2005d34:	00bfff04 	movi	r2,-4
 2005d38:	188e703a 	and	r7,r3,r2
 2005d3c:	3c45c83a 	sub	r2,r7,r17
 2005d40:	00c003c4 	movi	r3,15
 2005d44:	18811f16 	blt	r3,r2,20061c4 <_malloc_r+0x578>
 2005d48:	32000515 	stw	r8,20(r6)
 2005d4c:	32000415 	stw	r8,16(r6)
 2005d50:	10007f0e 	bge	r2,zero,2005f50 <_malloc_r+0x304>
 2005d54:	00807fc4 	movi	r2,511
 2005d58:	11c0fd36 	bltu	r2,r7,2006150 <_malloc_r+0x504>
 2005d5c:	3806d0fa 	srli	r3,r7,3
 2005d60:	01c00044 	movi	r7,1
 2005d64:	30800117 	ldw	r2,4(r6)
 2005d68:	19400044 	addi	r5,r3,1
 2005d6c:	294b883a 	add	r5,r5,r5
 2005d70:	1807d0ba 	srai	r3,r3,2
 2005d74:	294b883a 	add	r5,r5,r5
 2005d78:	294b883a 	add	r5,r5,r5
 2005d7c:	298b883a 	add	r5,r5,r6
 2005d80:	38c6983a 	sll	r3,r7,r3
 2005d84:	29c00017 	ldw	r7,0(r5)
 2005d88:	2a7ffe04 	addi	r9,r5,-8
 2005d8c:	1886b03a 	or	r3,r3,r2
 2005d90:	82400315 	stw	r9,12(r16)
 2005d94:	81c00215 	stw	r7,8(r16)
 2005d98:	30c00115 	stw	r3,4(r6)
 2005d9c:	2c000015 	stw	r16,0(r5)
 2005da0:	3c000315 	stw	r16,12(r7)
 2005da4:	2005d0ba 	srai	r2,r4,2
 2005da8:	01400044 	movi	r5,1
 2005dac:	288a983a 	sll	r5,r5,r2
 2005db0:	19406f36 	bltu	r3,r5,2005f70 <_malloc_r+0x324>
 2005db4:	28c4703a 	and	r2,r5,r3
 2005db8:	10000a1e 	bne	r2,zero,2005de4 <_malloc_r+0x198>
 2005dbc:	00bfff04 	movi	r2,-4
 2005dc0:	294b883a 	add	r5,r5,r5
 2005dc4:	2088703a 	and	r4,r4,r2
 2005dc8:	28c4703a 	and	r2,r5,r3
 2005dcc:	21000104 	addi	r4,r4,4
 2005dd0:	1000041e 	bne	r2,zero,2005de4 <_malloc_r+0x198>
 2005dd4:	294b883a 	add	r5,r5,r5
 2005dd8:	28c4703a 	and	r2,r5,r3
 2005ddc:	21000104 	addi	r4,r4,4
 2005de0:	103ffc26 	beq	r2,zero,2005dd4 <_malloc_r+0x188>
 2005de4:	02bfff04 	movi	r10,-4
 2005de8:	024003c4 	movi	r9,15
 2005dec:	21800044 	addi	r6,r4,1
 2005df0:	318d883a 	add	r6,r6,r6
 2005df4:	318d883a 	add	r6,r6,r6
 2005df8:	318d883a 	add	r6,r6,r6
 2005dfc:	998d883a 	add	r6,r19,r6
 2005e00:	333ffe04 	addi	r12,r6,-8
 2005e04:	2017883a 	mov	r11,r4
 2005e08:	31800104 	addi	r6,r6,4
 2005e0c:	34000017 	ldw	r16,0(r6)
 2005e10:	31fffd04 	addi	r7,r6,-12
 2005e14:	81c0041e 	bne	r16,r7,2005e28 <_malloc_r+0x1dc>
 2005e18:	0000fb06 	br	2006208 <_malloc_r+0x5bc>
 2005e1c:	1801030e 	bge	r3,zero,200622c <_malloc_r+0x5e0>
 2005e20:	84000317 	ldw	r16,12(r16)
 2005e24:	81c0f826 	beq	r16,r7,2006208 <_malloc_r+0x5bc>
 2005e28:	80800117 	ldw	r2,4(r16)
 2005e2c:	1284703a 	and	r2,r2,r10
 2005e30:	1447c83a 	sub	r3,r2,r17
 2005e34:	48fff90e 	bge	r9,r3,2005e1c <_malloc_r+0x1d0>
 2005e38:	80800317 	ldw	r2,12(r16)
 2005e3c:	81000217 	ldw	r4,8(r16)
 2005e40:	89400054 	ori	r5,r17,1
 2005e44:	81400115 	stw	r5,4(r16)
 2005e48:	20800315 	stw	r2,12(r4)
 2005e4c:	11000215 	stw	r4,8(r2)
 2005e50:	8463883a 	add	r17,r16,r17
 2005e54:	9c400515 	stw	r17,20(r19)
 2005e58:	9c400415 	stw	r17,16(r19)
 2005e5c:	18800054 	ori	r2,r3,1
 2005e60:	88800115 	stw	r2,4(r17)
 2005e64:	8a000315 	stw	r8,12(r17)
 2005e68:	8a000215 	stw	r8,8(r17)
 2005e6c:	88e3883a 	add	r17,r17,r3
 2005e70:	88c00015 	stw	r3,0(r17)
 2005e74:	9009883a 	mov	r4,r18
 2005e78:	200e4580 	call	200e458 <__malloc_unlock>
 2005e7c:	80800204 	addi	r2,r16,8
 2005e80:	00001b06 	br	2005ef0 <_malloc_r+0x2a4>
 2005e84:	04400404 	movi	r17,16
 2005e88:	89402536 	bltu	r17,r5,2005f20 <_malloc_r+0x2d4>
 2005e8c:	200e3380 	call	200e338 <__malloc_lock>
 2005e90:	00800184 	movi	r2,6
 2005e94:	01000084 	movi	r4,2
 2005e98:	04c080b4 	movhi	r19,514
 2005e9c:	1085883a 	add	r2,r2,r2
 2005ea0:	9ce57004 	addi	r19,r19,-27200
 2005ea4:	1085883a 	add	r2,r2,r2
 2005ea8:	9885883a 	add	r2,r19,r2
 2005eac:	14000117 	ldw	r16,4(r2)
 2005eb0:	10fffe04 	addi	r3,r2,-8
 2005eb4:	80c0d926 	beq	r16,r3,200621c <_malloc_r+0x5d0>
 2005eb8:	80c00117 	ldw	r3,4(r16)
 2005ebc:	81000317 	ldw	r4,12(r16)
 2005ec0:	00bfff04 	movi	r2,-4
 2005ec4:	1884703a 	and	r2,r3,r2
 2005ec8:	81400217 	ldw	r5,8(r16)
 2005ecc:	8085883a 	add	r2,r16,r2
 2005ed0:	10c00117 	ldw	r3,4(r2)
 2005ed4:	29000315 	stw	r4,12(r5)
 2005ed8:	21400215 	stw	r5,8(r4)
 2005edc:	18c00054 	ori	r3,r3,1
 2005ee0:	10c00115 	stw	r3,4(r2)
 2005ee4:	9009883a 	mov	r4,r18
 2005ee8:	200e4580 	call	200e458 <__malloc_unlock>
 2005eec:	80800204 	addi	r2,r16,8
 2005ef0:	dfc00a17 	ldw	ra,40(sp)
 2005ef4:	df000917 	ldw	fp,36(sp)
 2005ef8:	ddc00817 	ldw	r23,32(sp)
 2005efc:	dd800717 	ldw	r22,28(sp)
 2005f00:	dd400617 	ldw	r21,24(sp)
 2005f04:	dd000517 	ldw	r20,20(sp)
 2005f08:	dcc00417 	ldw	r19,16(sp)
 2005f0c:	dc800317 	ldw	r18,12(sp)
 2005f10:	dc400217 	ldw	r17,8(sp)
 2005f14:	dc000117 	ldw	r16,4(sp)
 2005f18:	dec00b04 	addi	sp,sp,44
 2005f1c:	f800283a 	ret
 2005f20:	00800304 	movi	r2,12
 2005f24:	90800015 	stw	r2,0(r18)
 2005f28:	0005883a 	mov	r2,zero
 2005f2c:	003ff006 	br	2005ef0 <_malloc_r+0x2a4>
 2005f30:	01002004 	movi	r4,128
 2005f34:	02001004 	movi	r8,64
 2005f38:	01c00fc4 	movi	r7,63
 2005f3c:	003f6106 	br	2005cc4 <_malloc_r+0x78>
 2005f40:	4009883a 	mov	r4,r8
 2005f44:	003f7506 	br	2005d1c <_malloc_r+0xd0>
 2005f48:	81000317 	ldw	r4,12(r16)
 2005f4c:	003fde06 	br	2005ec8 <_malloc_r+0x27c>
 2005f50:	81c5883a 	add	r2,r16,r7
 2005f54:	11400117 	ldw	r5,4(r2)
 2005f58:	9009883a 	mov	r4,r18
 2005f5c:	29400054 	ori	r5,r5,1
 2005f60:	11400115 	stw	r5,4(r2)
 2005f64:	200e4580 	call	200e458 <__malloc_unlock>
 2005f68:	80800204 	addi	r2,r16,8
 2005f6c:	003fe006 	br	2005ef0 <_malloc_r+0x2a4>
 2005f70:	9c000217 	ldw	r16,8(r19)
 2005f74:	00bfff04 	movi	r2,-4
 2005f78:	85800117 	ldw	r22,4(r16)
 2005f7c:	b0ac703a 	and	r22,r22,r2
 2005f80:	b4400336 	bltu	r22,r17,2005f90 <_malloc_r+0x344>
 2005f84:	b445c83a 	sub	r2,r22,r17
 2005f88:	00c003c4 	movi	r3,15
 2005f8c:	18805d16 	blt	r3,r2,2006104 <_malloc_r+0x4b8>
 2005f90:	05c080b4 	movhi	r23,514
 2005f94:	008080b4 	movhi	r2,514
 2005f98:	10b21004 	addi	r2,r2,-14272
 2005f9c:	bdeafa04 	addi	r23,r23,-21528
 2005fa0:	15400017 	ldw	r21,0(r2)
 2005fa4:	b8c00017 	ldw	r3,0(r23)
 2005fa8:	00bfffc4 	movi	r2,-1
 2005fac:	858d883a 	add	r6,r16,r22
 2005fb0:	8d6b883a 	add	r21,r17,r21
 2005fb4:	1880ea26 	beq	r3,r2,2006360 <_malloc_r+0x714>
 2005fb8:	ad4403c4 	addi	r21,r21,4111
 2005fbc:	00bc0004 	movi	r2,-4096
 2005fc0:	a8aa703a 	and	r21,r21,r2
 2005fc4:	a80b883a 	mov	r5,r21
 2005fc8:	9009883a 	mov	r4,r18
 2005fcc:	d9800015 	stw	r6,0(sp)
 2005fd0:	2007f980 	call	2007f98 <_sbrk_r>
 2005fd4:	1029883a 	mov	r20,r2
 2005fd8:	00bfffc4 	movi	r2,-1
 2005fdc:	d9800017 	ldw	r6,0(sp)
 2005fe0:	a080e826 	beq	r20,r2,2006384 <_malloc_r+0x738>
 2005fe4:	a180a636 	bltu	r20,r6,2006280 <_malloc_r+0x634>
 2005fe8:	070080b4 	movhi	fp,514
 2005fec:	e7323204 	addi	fp,fp,-14136
 2005ff0:	e0800017 	ldw	r2,0(fp)
 2005ff4:	a887883a 	add	r3,r21,r2
 2005ff8:	e0c00015 	stw	r3,0(fp)
 2005ffc:	3500e626 	beq	r6,r20,2006398 <_malloc_r+0x74c>
 2006000:	b9000017 	ldw	r4,0(r23)
 2006004:	00bfffc4 	movi	r2,-1
 2006008:	2080ee26 	beq	r4,r2,20063c4 <_malloc_r+0x778>
 200600c:	a185c83a 	sub	r2,r20,r6
 2006010:	10c5883a 	add	r2,r2,r3
 2006014:	e0800015 	stw	r2,0(fp)
 2006018:	a0c001cc 	andi	r3,r20,7
 200601c:	1800bc26 	beq	r3,zero,2006310 <_malloc_r+0x6c4>
 2006020:	a0e9c83a 	sub	r20,r20,r3
 2006024:	00840204 	movi	r2,4104
 2006028:	a5000204 	addi	r20,r20,8
 200602c:	10c7c83a 	sub	r3,r2,r3
 2006030:	a545883a 	add	r2,r20,r21
 2006034:	1083ffcc 	andi	r2,r2,4095
 2006038:	18abc83a 	sub	r21,r3,r2
 200603c:	a80b883a 	mov	r5,r21
 2006040:	9009883a 	mov	r4,r18
 2006044:	2007f980 	call	2007f98 <_sbrk_r>
 2006048:	00ffffc4 	movi	r3,-1
 200604c:	10c0e126 	beq	r2,r3,20063d4 <_malloc_r+0x788>
 2006050:	1505c83a 	sub	r2,r2,r20
 2006054:	1545883a 	add	r2,r2,r21
 2006058:	10800054 	ori	r2,r2,1
 200605c:	e0c00017 	ldw	r3,0(fp)
 2006060:	9d000215 	stw	r20,8(r19)
 2006064:	a0800115 	stw	r2,4(r20)
 2006068:	a8c7883a 	add	r3,r21,r3
 200606c:	e0c00015 	stw	r3,0(fp)
 2006070:	84c00e26 	beq	r16,r19,20060ac <_malloc_r+0x460>
 2006074:	018003c4 	movi	r6,15
 2006078:	3580a72e 	bgeu	r6,r22,2006318 <_malloc_r+0x6cc>
 200607c:	81400117 	ldw	r5,4(r16)
 2006080:	013ffe04 	movi	r4,-8
 2006084:	b0bffd04 	addi	r2,r22,-12
 2006088:	1104703a 	and	r2,r2,r4
 200608c:	2900004c 	andi	r4,r5,1
 2006090:	2088b03a 	or	r4,r4,r2
 2006094:	81000115 	stw	r4,4(r16)
 2006098:	01400144 	movi	r5,5
 200609c:	8089883a 	add	r4,r16,r2
 20060a0:	21400115 	stw	r5,4(r4)
 20060a4:	21400215 	stw	r5,8(r4)
 20060a8:	3080cd36 	bltu	r6,r2,20063e0 <_malloc_r+0x794>
 20060ac:	008080b4 	movhi	r2,514
 20060b0:	10b20f04 	addi	r2,r2,-14276
 20060b4:	11000017 	ldw	r4,0(r2)
 20060b8:	20c0012e 	bgeu	r4,r3,20060c0 <_malloc_r+0x474>
 20060bc:	10c00015 	stw	r3,0(r2)
 20060c0:	008080b4 	movhi	r2,514
 20060c4:	10b20e04 	addi	r2,r2,-14280
 20060c8:	11000017 	ldw	r4,0(r2)
 20060cc:	9c000217 	ldw	r16,8(r19)
 20060d0:	20c0012e 	bgeu	r4,r3,20060d8 <_malloc_r+0x48c>
 20060d4:	10c00015 	stw	r3,0(r2)
 20060d8:	80c00117 	ldw	r3,4(r16)
 20060dc:	00bfff04 	movi	r2,-4
 20060e0:	1886703a 	and	r3,r3,r2
 20060e4:	1c45c83a 	sub	r2,r3,r17
 20060e8:	1c400236 	bltu	r3,r17,20060f4 <_malloc_r+0x4a8>
 20060ec:	00c003c4 	movi	r3,15
 20060f0:	18800416 	blt	r3,r2,2006104 <_malloc_r+0x4b8>
 20060f4:	9009883a 	mov	r4,r18
 20060f8:	200e4580 	call	200e458 <__malloc_unlock>
 20060fc:	0005883a 	mov	r2,zero
 2006100:	003f7b06 	br	2005ef0 <_malloc_r+0x2a4>
 2006104:	88c00054 	ori	r3,r17,1
 2006108:	80c00115 	stw	r3,4(r16)
 200610c:	8463883a 	add	r17,r16,r17
 2006110:	10800054 	ori	r2,r2,1
 2006114:	9c400215 	stw	r17,8(r19)
 2006118:	88800115 	stw	r2,4(r17)
 200611c:	9009883a 	mov	r4,r18
 2006120:	200e4580 	call	200e458 <__malloc_unlock>
 2006124:	80800204 	addi	r2,r16,8
 2006128:	003f7106 	br	2005ef0 <_malloc_r+0x2a4>
 200612c:	00c00504 	movi	r3,20
 2006130:	18804a2e 	bgeu	r3,r2,200625c <_malloc_r+0x610>
 2006134:	00c01504 	movi	r3,84
 2006138:	18806e36 	bltu	r3,r2,20062f4 <_malloc_r+0x6a8>
 200613c:	8804d33a 	srli	r2,r17,12
 2006140:	12001bc4 	addi	r8,r2,111
 2006144:	11c01b84 	addi	r7,r2,110
 2006148:	4209883a 	add	r4,r8,r8
 200614c:	003edd06 	br	2005cc4 <_malloc_r+0x78>
 2006150:	3804d27a 	srli	r2,r7,9
 2006154:	00c00104 	movi	r3,4
 2006158:	1880442e 	bgeu	r3,r2,200626c <_malloc_r+0x620>
 200615c:	00c00504 	movi	r3,20
 2006160:	18808136 	bltu	r3,r2,2006368 <_malloc_r+0x71c>
 2006164:	11401704 	addi	r5,r2,92
 2006168:	10c016c4 	addi	r3,r2,91
 200616c:	294b883a 	add	r5,r5,r5
 2006170:	294b883a 	add	r5,r5,r5
 2006174:	294b883a 	add	r5,r5,r5
 2006178:	994b883a 	add	r5,r19,r5
 200617c:	28800017 	ldw	r2,0(r5)
 2006180:	018080b4 	movhi	r6,514
 2006184:	297ffe04 	addi	r5,r5,-8
 2006188:	31a57004 	addi	r6,r6,-27200
 200618c:	28806526 	beq	r5,r2,2006324 <_malloc_r+0x6d8>
 2006190:	01bfff04 	movi	r6,-4
 2006194:	10c00117 	ldw	r3,4(r2)
 2006198:	1986703a 	and	r3,r3,r6
 200619c:	38c0022e 	bgeu	r7,r3,20061a8 <_malloc_r+0x55c>
 20061a0:	10800217 	ldw	r2,8(r2)
 20061a4:	28bffb1e 	bne	r5,r2,2006194 <_malloc_r+0x548>
 20061a8:	11400317 	ldw	r5,12(r2)
 20061ac:	98c00117 	ldw	r3,4(r19)
 20061b0:	81400315 	stw	r5,12(r16)
 20061b4:	80800215 	stw	r2,8(r16)
 20061b8:	2c000215 	stw	r16,8(r5)
 20061bc:	14000315 	stw	r16,12(r2)
 20061c0:	003ef806 	br	2005da4 <_malloc_r+0x158>
 20061c4:	88c00054 	ori	r3,r17,1
 20061c8:	80c00115 	stw	r3,4(r16)
 20061cc:	8463883a 	add	r17,r16,r17
 20061d0:	34400515 	stw	r17,20(r6)
 20061d4:	34400415 	stw	r17,16(r6)
 20061d8:	10c00054 	ori	r3,r2,1
 20061dc:	8a000315 	stw	r8,12(r17)
 20061e0:	8a000215 	stw	r8,8(r17)
 20061e4:	88c00115 	stw	r3,4(r17)
 20061e8:	88a3883a 	add	r17,r17,r2
 20061ec:	88800015 	stw	r2,0(r17)
 20061f0:	9009883a 	mov	r4,r18
 20061f4:	200e4580 	call	200e458 <__malloc_unlock>
 20061f8:	80800204 	addi	r2,r16,8
 20061fc:	003f3c06 	br	2005ef0 <_malloc_r+0x2a4>
 2006200:	30c00117 	ldw	r3,4(r6)
 2006204:	003ee706 	br	2005da4 <_malloc_r+0x158>
 2006208:	5ac00044 	addi	r11,r11,1
 200620c:	588000cc 	andi	r2,r11,3
 2006210:	31800204 	addi	r6,r6,8
 2006214:	103efd1e 	bne	r2,zero,2005e0c <_malloc_r+0x1c0>
 2006218:	00002406 	br	20062ac <_malloc_r+0x660>
 200621c:	14000317 	ldw	r16,12(r2)
 2006220:	143f251e 	bne	r2,r16,2005eb8 <_malloc_r+0x26c>
 2006224:	21000084 	addi	r4,r4,2
 2006228:	003ebc06 	br	2005d1c <_malloc_r+0xd0>
 200622c:	8085883a 	add	r2,r16,r2
 2006230:	10c00117 	ldw	r3,4(r2)
 2006234:	81000317 	ldw	r4,12(r16)
 2006238:	81400217 	ldw	r5,8(r16)
 200623c:	18c00054 	ori	r3,r3,1
 2006240:	10c00115 	stw	r3,4(r2)
 2006244:	29000315 	stw	r4,12(r5)
 2006248:	21400215 	stw	r5,8(r4)
 200624c:	9009883a 	mov	r4,r18
 2006250:	200e4580 	call	200e458 <__malloc_unlock>
 2006254:	80800204 	addi	r2,r16,8
 2006258:	003f2506 	br	2005ef0 <_malloc_r+0x2a4>
 200625c:	12001704 	addi	r8,r2,92
 2006260:	11c016c4 	addi	r7,r2,91
 2006264:	4209883a 	add	r4,r8,r8
 2006268:	003e9606 	br	2005cc4 <_malloc_r+0x78>
 200626c:	3804d1ba 	srli	r2,r7,6
 2006270:	11400e44 	addi	r5,r2,57
 2006274:	10c00e04 	addi	r3,r2,56
 2006278:	294b883a 	add	r5,r5,r5
 200627c:	003fbc06 	br	2006170 <_malloc_r+0x524>
 2006280:	84ff5926 	beq	r16,r19,2005fe8 <_malloc_r+0x39c>
 2006284:	008080b4 	movhi	r2,514
 2006288:	10a57004 	addi	r2,r2,-27200
 200628c:	14000217 	ldw	r16,8(r2)
 2006290:	00bfff04 	movi	r2,-4
 2006294:	80c00117 	ldw	r3,4(r16)
 2006298:	1886703a 	and	r3,r3,r2
 200629c:	003f9106 	br	20060e4 <_malloc_r+0x498>
 20062a0:	60800217 	ldw	r2,8(r12)
 20062a4:	213fffc4 	addi	r4,r4,-1
 20062a8:	1300651e 	bne	r2,r12,2006440 <_malloc_r+0x7f4>
 20062ac:	208000cc 	andi	r2,r4,3
 20062b0:	633ffe04 	addi	r12,r12,-8
 20062b4:	103ffa1e 	bne	r2,zero,20062a0 <_malloc_r+0x654>
 20062b8:	98800117 	ldw	r2,4(r19)
 20062bc:	0146303a 	nor	r3,zero,r5
 20062c0:	1884703a 	and	r2,r3,r2
 20062c4:	98800115 	stw	r2,4(r19)
 20062c8:	294b883a 	add	r5,r5,r5
 20062cc:	117f2836 	bltu	r2,r5,2005f70 <_malloc_r+0x324>
 20062d0:	283f2726 	beq	r5,zero,2005f70 <_malloc_r+0x324>
 20062d4:	2886703a 	and	r3,r5,r2
 20062d8:	5809883a 	mov	r4,r11
 20062dc:	183ec31e 	bne	r3,zero,2005dec <_malloc_r+0x1a0>
 20062e0:	294b883a 	add	r5,r5,r5
 20062e4:	2886703a 	and	r3,r5,r2
 20062e8:	21000104 	addi	r4,r4,4
 20062ec:	183ffc26 	beq	r3,zero,20062e0 <_malloc_r+0x694>
 20062f0:	003ebe06 	br	2005dec <_malloc_r+0x1a0>
 20062f4:	00c05504 	movi	r3,340
 20062f8:	18801236 	bltu	r3,r2,2006344 <_malloc_r+0x6f8>
 20062fc:	8804d3fa 	srli	r2,r17,15
 2006300:	12001e04 	addi	r8,r2,120
 2006304:	11c01dc4 	addi	r7,r2,119
 2006308:	4209883a 	add	r4,r8,r8
 200630c:	003e6d06 	br	2005cc4 <_malloc_r+0x78>
 2006310:	00c40004 	movi	r3,4096
 2006314:	003f4606 	br	2006030 <_malloc_r+0x3e4>
 2006318:	00800044 	movi	r2,1
 200631c:	a0800115 	stw	r2,4(r20)
 2006320:	003f7406 	br	20060f4 <_malloc_r+0x4a8>
 2006324:	1805d0ba 	srai	r2,r3,2
 2006328:	01c00044 	movi	r7,1
 200632c:	30c00117 	ldw	r3,4(r6)
 2006330:	388e983a 	sll	r7,r7,r2
 2006334:	2805883a 	mov	r2,r5
 2006338:	38c6b03a 	or	r3,r7,r3
 200633c:	30c00115 	stw	r3,4(r6)
 2006340:	003f9b06 	br	20061b0 <_malloc_r+0x564>
 2006344:	00c15504 	movi	r3,1364
 2006348:	18801a36 	bltu	r3,r2,20063b4 <_malloc_r+0x768>
 200634c:	8804d4ba 	srli	r2,r17,18
 2006350:	12001f44 	addi	r8,r2,125
 2006354:	11c01f04 	addi	r7,r2,124
 2006358:	4209883a 	add	r4,r8,r8
 200635c:	003e5906 	br	2005cc4 <_malloc_r+0x78>
 2006360:	ad400404 	addi	r21,r21,16
 2006364:	003f1706 	br	2005fc4 <_malloc_r+0x378>
 2006368:	00c01504 	movi	r3,84
 200636c:	18802336 	bltu	r3,r2,20063fc <_malloc_r+0x7b0>
 2006370:	3804d33a 	srli	r2,r7,12
 2006374:	11401bc4 	addi	r5,r2,111
 2006378:	10c01b84 	addi	r3,r2,110
 200637c:	294b883a 	add	r5,r5,r5
 2006380:	003f7b06 	br	2006170 <_malloc_r+0x524>
 2006384:	9c000217 	ldw	r16,8(r19)
 2006388:	00bfff04 	movi	r2,-4
 200638c:	80c00117 	ldw	r3,4(r16)
 2006390:	1886703a 	and	r3,r3,r2
 2006394:	003f5306 	br	20060e4 <_malloc_r+0x498>
 2006398:	3083ffcc 	andi	r2,r6,4095
 200639c:	103f181e 	bne	r2,zero,2006000 <_malloc_r+0x3b4>
 20063a0:	99000217 	ldw	r4,8(r19)
 20063a4:	b545883a 	add	r2,r22,r21
 20063a8:	10800054 	ori	r2,r2,1
 20063ac:	20800115 	stw	r2,4(r4)
 20063b0:	003f3e06 	br	20060ac <_malloc_r+0x460>
 20063b4:	01003f84 	movi	r4,254
 20063b8:	02001fc4 	movi	r8,127
 20063bc:	01c01f84 	movi	r7,126
 20063c0:	003e4006 	br	2005cc4 <_malloc_r+0x78>
 20063c4:	008080b4 	movhi	r2,514
 20063c8:	10aafa04 	addi	r2,r2,-21528
 20063cc:	15000015 	stw	r20,0(r2)
 20063d0:	003f1106 	br	2006018 <_malloc_r+0x3cc>
 20063d4:	00800044 	movi	r2,1
 20063d8:	002b883a 	mov	r21,zero
 20063dc:	003f1f06 	br	200605c <_malloc_r+0x410>
 20063e0:	81400204 	addi	r5,r16,8
 20063e4:	9009883a 	mov	r4,r18
 20063e8:	20050540 	call	2005054 <_free_r>
 20063ec:	008080b4 	movhi	r2,514
 20063f0:	10b23204 	addi	r2,r2,-14136
 20063f4:	10c00017 	ldw	r3,0(r2)
 20063f8:	003f2c06 	br	20060ac <_malloc_r+0x460>
 20063fc:	00c05504 	movi	r3,340
 2006400:	18800536 	bltu	r3,r2,2006418 <_malloc_r+0x7cc>
 2006404:	3804d3fa 	srli	r2,r7,15
 2006408:	11401e04 	addi	r5,r2,120
 200640c:	10c01dc4 	addi	r3,r2,119
 2006410:	294b883a 	add	r5,r5,r5
 2006414:	003f5606 	br	2006170 <_malloc_r+0x524>
 2006418:	00c15504 	movi	r3,1364
 200641c:	18800536 	bltu	r3,r2,2006434 <_malloc_r+0x7e8>
 2006420:	3804d4ba 	srli	r2,r7,18
 2006424:	11401f44 	addi	r5,r2,125
 2006428:	10c01f04 	addi	r3,r2,124
 200642c:	294b883a 	add	r5,r5,r5
 2006430:	003f4f06 	br	2006170 <_malloc_r+0x524>
 2006434:	01403f84 	movi	r5,254
 2006438:	00c01f84 	movi	r3,126
 200643c:	003f4c06 	br	2006170 <_malloc_r+0x524>
 2006440:	98800117 	ldw	r2,4(r19)
 2006444:	003fa006 	br	20062c8 <_malloc_r+0x67c>
 2006448:	8808d0fa 	srli	r4,r17,3
 200644c:	20800044 	addi	r2,r4,1
 2006450:	1085883a 	add	r2,r2,r2
 2006454:	003e9006 	br	2005e98 <_malloc_r+0x24c>

02006458 <memchr>:
 2006458:	208000cc 	andi	r2,r4,3
 200645c:	280f883a 	mov	r7,r5
 2006460:	10003426 	beq	r2,zero,2006534 <memchr+0xdc>
 2006464:	30bfffc4 	addi	r2,r6,-1
 2006468:	30001a26 	beq	r6,zero,20064d4 <memchr+0x7c>
 200646c:	20c00003 	ldbu	r3,0(r4)
 2006470:	29803fcc 	andi	r6,r5,255
 2006474:	30c0051e 	bne	r6,r3,200648c <memchr+0x34>
 2006478:	00001806 	br	20064dc <memchr+0x84>
 200647c:	10001526 	beq	r2,zero,20064d4 <memchr+0x7c>
 2006480:	20c00003 	ldbu	r3,0(r4)
 2006484:	10bfffc4 	addi	r2,r2,-1
 2006488:	30c01426 	beq	r6,r3,20064dc <memchr+0x84>
 200648c:	21000044 	addi	r4,r4,1
 2006490:	20c000cc 	andi	r3,r4,3
 2006494:	183ff91e 	bne	r3,zero,200647c <memchr+0x24>
 2006498:	020000c4 	movi	r8,3
 200649c:	40801136 	bltu	r8,r2,20064e4 <memchr+0x8c>
 20064a0:	10000c26 	beq	r2,zero,20064d4 <memchr+0x7c>
 20064a4:	20c00003 	ldbu	r3,0(r4)
 20064a8:	29403fcc 	andi	r5,r5,255
 20064ac:	28c00b26 	beq	r5,r3,20064dc <memchr+0x84>
 20064b0:	20c00044 	addi	r3,r4,1
 20064b4:	39803fcc 	andi	r6,r7,255
 20064b8:	2089883a 	add	r4,r4,r2
 20064bc:	00000306 	br	20064cc <memchr+0x74>
 20064c0:	18c00044 	addi	r3,r3,1
 20064c4:	197fffc3 	ldbu	r5,-1(r3)
 20064c8:	31400526 	beq	r6,r5,20064e0 <memchr+0x88>
 20064cc:	1805883a 	mov	r2,r3
 20064d0:	20fffb1e 	bne	r4,r3,20064c0 <memchr+0x68>
 20064d4:	0005883a 	mov	r2,zero
 20064d8:	f800283a 	ret
 20064dc:	2005883a 	mov	r2,r4
 20064e0:	f800283a 	ret
 20064e4:	28c03fcc 	andi	r3,r5,255
 20064e8:	1812923a 	slli	r9,r3,8
 20064ec:	02ffbff4 	movhi	r11,65279
 20064f0:	02a02074 	movhi	r10,32897
 20064f4:	48d2b03a 	or	r9,r9,r3
 20064f8:	4806943a 	slli	r3,r9,16
 20064fc:	5affbfc4 	addi	r11,r11,-257
 2006500:	52a02004 	addi	r10,r10,-32640
 2006504:	48d2b03a 	or	r9,r9,r3
 2006508:	20c00017 	ldw	r3,0(r4)
 200650c:	48c6f03a 	xor	r3,r9,r3
 2006510:	1acd883a 	add	r6,r3,r11
 2006514:	00c6303a 	nor	r3,zero,r3
 2006518:	30c6703a 	and	r3,r6,r3
 200651c:	1a86703a 	and	r3,r3,r10
 2006520:	183fe01e 	bne	r3,zero,20064a4 <memchr+0x4c>
 2006524:	10bfff04 	addi	r2,r2,-4
 2006528:	21000104 	addi	r4,r4,4
 200652c:	40bff636 	bltu	r8,r2,2006508 <memchr+0xb0>
 2006530:	003fdb06 	br	20064a0 <memchr+0x48>
 2006534:	3005883a 	mov	r2,r6
 2006538:	003fd706 	br	2006498 <memchr+0x40>

0200653c <memcpy>:
 200653c:	defffd04 	addi	sp,sp,-12
 2006540:	dfc00215 	stw	ra,8(sp)
 2006544:	dc400115 	stw	r17,4(sp)
 2006548:	dc000015 	stw	r16,0(sp)
 200654c:	00c003c4 	movi	r3,15
 2006550:	2005883a 	mov	r2,r4
 2006554:	1980452e 	bgeu	r3,r6,200666c <memcpy+0x130>
 2006558:	2906b03a 	or	r3,r5,r4
 200655c:	18c000cc 	andi	r3,r3,3
 2006560:	1800441e 	bne	r3,zero,2006674 <memcpy+0x138>
 2006564:	347ffc04 	addi	r17,r6,-16
 2006568:	8822d13a 	srli	r17,r17,4
 200656c:	28c00104 	addi	r3,r5,4
 2006570:	23400104 	addi	r13,r4,4
 2006574:	8820913a 	slli	r16,r17,4
 2006578:	2b000204 	addi	r12,r5,8
 200657c:	22c00204 	addi	r11,r4,8
 2006580:	84000504 	addi	r16,r16,20
 2006584:	2a800304 	addi	r10,r5,12
 2006588:	22400304 	addi	r9,r4,12
 200658c:	2c21883a 	add	r16,r5,r16
 2006590:	2811883a 	mov	r8,r5
 2006594:	200f883a 	mov	r7,r4
 2006598:	41000017 	ldw	r4,0(r8)
 200659c:	1fc00017 	ldw	ra,0(r3)
 20065a0:	63c00017 	ldw	r15,0(r12)
 20065a4:	39000015 	stw	r4,0(r7)
 20065a8:	53800017 	ldw	r14,0(r10)
 20065ac:	6fc00015 	stw	ra,0(r13)
 20065b0:	5bc00015 	stw	r15,0(r11)
 20065b4:	4b800015 	stw	r14,0(r9)
 20065b8:	18c00404 	addi	r3,r3,16
 20065bc:	39c00404 	addi	r7,r7,16
 20065c0:	42000404 	addi	r8,r8,16
 20065c4:	6b400404 	addi	r13,r13,16
 20065c8:	63000404 	addi	r12,r12,16
 20065cc:	5ac00404 	addi	r11,r11,16
 20065d0:	52800404 	addi	r10,r10,16
 20065d4:	4a400404 	addi	r9,r9,16
 20065d8:	1c3fef1e 	bne	r3,r16,2006598 <memcpy+0x5c>
 20065dc:	89c00044 	addi	r7,r17,1
 20065e0:	380e913a 	slli	r7,r7,4
 20065e4:	310003cc 	andi	r4,r6,15
 20065e8:	02c000c4 	movi	r11,3
 20065ec:	11c7883a 	add	r3,r2,r7
 20065f0:	29cb883a 	add	r5,r5,r7
 20065f4:	5900212e 	bgeu	r11,r4,200667c <memcpy+0x140>
 20065f8:	1813883a 	mov	r9,r3
 20065fc:	2811883a 	mov	r8,r5
 2006600:	200f883a 	mov	r7,r4
 2006604:	42800017 	ldw	r10,0(r8)
 2006608:	4a400104 	addi	r9,r9,4
 200660c:	39ffff04 	addi	r7,r7,-4
 2006610:	4abfff15 	stw	r10,-4(r9)
 2006614:	42000104 	addi	r8,r8,4
 2006618:	59fffa36 	bltu	r11,r7,2006604 <memcpy+0xc8>
 200661c:	213fff04 	addi	r4,r4,-4
 2006620:	2008d0ba 	srli	r4,r4,2
 2006624:	318000cc 	andi	r6,r6,3
 2006628:	21000044 	addi	r4,r4,1
 200662c:	2109883a 	add	r4,r4,r4
 2006630:	2109883a 	add	r4,r4,r4
 2006634:	1907883a 	add	r3,r3,r4
 2006638:	290b883a 	add	r5,r5,r4
 200663c:	30000626 	beq	r6,zero,2006658 <memcpy+0x11c>
 2006640:	198d883a 	add	r6,r3,r6
 2006644:	29c00003 	ldbu	r7,0(r5)
 2006648:	18c00044 	addi	r3,r3,1
 200664c:	29400044 	addi	r5,r5,1
 2006650:	19ffffc5 	stb	r7,-1(r3)
 2006654:	19bffb1e 	bne	r3,r6,2006644 <memcpy+0x108>
 2006658:	dfc00217 	ldw	ra,8(sp)
 200665c:	dc400117 	ldw	r17,4(sp)
 2006660:	dc000017 	ldw	r16,0(sp)
 2006664:	dec00304 	addi	sp,sp,12
 2006668:	f800283a 	ret
 200666c:	2007883a 	mov	r3,r4
 2006670:	003ff206 	br	200663c <memcpy+0x100>
 2006674:	2007883a 	mov	r3,r4
 2006678:	003ff106 	br	2006640 <memcpy+0x104>
 200667c:	200d883a 	mov	r6,r4
 2006680:	003fee06 	br	200663c <memcpy+0x100>

02006684 <memmove>:
 2006684:	2005883a 	mov	r2,r4
 2006688:	29000b2e 	bgeu	r5,r4,20066b8 <memmove+0x34>
 200668c:	298f883a 	add	r7,r5,r6
 2006690:	21c0092e 	bgeu	r4,r7,20066b8 <memmove+0x34>
 2006694:	2187883a 	add	r3,r4,r6
 2006698:	198bc83a 	sub	r5,r3,r6
 200669c:	30004826 	beq	r6,zero,20067c0 <memmove+0x13c>
 20066a0:	39ffffc4 	addi	r7,r7,-1
 20066a4:	39000003 	ldbu	r4,0(r7)
 20066a8:	18ffffc4 	addi	r3,r3,-1
 20066ac:	19000005 	stb	r4,0(r3)
 20066b0:	28fffb1e 	bne	r5,r3,20066a0 <memmove+0x1c>
 20066b4:	f800283a 	ret
 20066b8:	00c003c4 	movi	r3,15
 20066bc:	1980412e 	bgeu	r3,r6,20067c4 <memmove+0x140>
 20066c0:	2886b03a 	or	r3,r5,r2
 20066c4:	18c000cc 	andi	r3,r3,3
 20066c8:	1800401e 	bne	r3,zero,20067cc <memmove+0x148>
 20066cc:	33fffc04 	addi	r15,r6,-16
 20066d0:	781ed13a 	srli	r15,r15,4
 20066d4:	28c00104 	addi	r3,r5,4
 20066d8:	13400104 	addi	r13,r2,4
 20066dc:	781c913a 	slli	r14,r15,4
 20066e0:	2b000204 	addi	r12,r5,8
 20066e4:	12c00204 	addi	r11,r2,8
 20066e8:	73800504 	addi	r14,r14,20
 20066ec:	2a800304 	addi	r10,r5,12
 20066f0:	12400304 	addi	r9,r2,12
 20066f4:	2b9d883a 	add	r14,r5,r14
 20066f8:	2811883a 	mov	r8,r5
 20066fc:	100f883a 	mov	r7,r2
 2006700:	41000017 	ldw	r4,0(r8)
 2006704:	39c00404 	addi	r7,r7,16
 2006708:	18c00404 	addi	r3,r3,16
 200670c:	393ffc15 	stw	r4,-16(r7)
 2006710:	193ffc17 	ldw	r4,-16(r3)
 2006714:	6b400404 	addi	r13,r13,16
 2006718:	5ac00404 	addi	r11,r11,16
 200671c:	693ffc15 	stw	r4,-16(r13)
 2006720:	61000017 	ldw	r4,0(r12)
 2006724:	4a400404 	addi	r9,r9,16
 2006728:	42000404 	addi	r8,r8,16
 200672c:	593ffc15 	stw	r4,-16(r11)
 2006730:	51000017 	ldw	r4,0(r10)
 2006734:	63000404 	addi	r12,r12,16
 2006738:	52800404 	addi	r10,r10,16
 200673c:	493ffc15 	stw	r4,-16(r9)
 2006740:	1bbfef1e 	bne	r3,r14,2006700 <memmove+0x7c>
 2006744:	79000044 	addi	r4,r15,1
 2006748:	2008913a 	slli	r4,r4,4
 200674c:	328003cc 	andi	r10,r6,15
 2006750:	02c000c4 	movi	r11,3
 2006754:	1107883a 	add	r3,r2,r4
 2006758:	290b883a 	add	r5,r5,r4
 200675c:	5a801e2e 	bgeu	r11,r10,20067d8 <memmove+0x154>
 2006760:	1813883a 	mov	r9,r3
 2006764:	2811883a 	mov	r8,r5
 2006768:	500f883a 	mov	r7,r10
 200676c:	41000017 	ldw	r4,0(r8)
 2006770:	4a400104 	addi	r9,r9,4
 2006774:	39ffff04 	addi	r7,r7,-4
 2006778:	493fff15 	stw	r4,-4(r9)
 200677c:	42000104 	addi	r8,r8,4
 2006780:	59fffa36 	bltu	r11,r7,200676c <memmove+0xe8>
 2006784:	513fff04 	addi	r4,r10,-4
 2006788:	2008d0ba 	srli	r4,r4,2
 200678c:	318000cc 	andi	r6,r6,3
 2006790:	21000044 	addi	r4,r4,1
 2006794:	2109883a 	add	r4,r4,r4
 2006798:	2109883a 	add	r4,r4,r4
 200679c:	1907883a 	add	r3,r3,r4
 20067a0:	290b883a 	add	r5,r5,r4
 20067a4:	30000b26 	beq	r6,zero,20067d4 <memmove+0x150>
 20067a8:	198d883a 	add	r6,r3,r6
 20067ac:	29c00003 	ldbu	r7,0(r5)
 20067b0:	18c00044 	addi	r3,r3,1
 20067b4:	29400044 	addi	r5,r5,1
 20067b8:	19ffffc5 	stb	r7,-1(r3)
 20067bc:	19bffb1e 	bne	r3,r6,20067ac <memmove+0x128>
 20067c0:	f800283a 	ret
 20067c4:	1007883a 	mov	r3,r2
 20067c8:	003ff606 	br	20067a4 <memmove+0x120>
 20067cc:	1007883a 	mov	r3,r2
 20067d0:	003ff506 	br	20067a8 <memmove+0x124>
 20067d4:	f800283a 	ret
 20067d8:	500d883a 	mov	r6,r10
 20067dc:	003ff106 	br	20067a4 <memmove+0x120>

020067e0 <memset>:
 20067e0:	20c000cc 	andi	r3,r4,3
 20067e4:	2005883a 	mov	r2,r4
 20067e8:	18004426 	beq	r3,zero,20068fc <memset+0x11c>
 20067ec:	31ffffc4 	addi	r7,r6,-1
 20067f0:	30004026 	beq	r6,zero,20068f4 <memset+0x114>
 20067f4:	2813883a 	mov	r9,r5
 20067f8:	200d883a 	mov	r6,r4
 20067fc:	2007883a 	mov	r3,r4
 2006800:	00000406 	br	2006814 <memset+0x34>
 2006804:	3a3fffc4 	addi	r8,r7,-1
 2006808:	31800044 	addi	r6,r6,1
 200680c:	38003926 	beq	r7,zero,20068f4 <memset+0x114>
 2006810:	400f883a 	mov	r7,r8
 2006814:	18c00044 	addi	r3,r3,1
 2006818:	32400005 	stb	r9,0(r6)
 200681c:	1a0000cc 	andi	r8,r3,3
 2006820:	403ff81e 	bne	r8,zero,2006804 <memset+0x24>
 2006824:	010000c4 	movi	r4,3
 2006828:	21c02d2e 	bgeu	r4,r7,20068e0 <memset+0x100>
 200682c:	29003fcc 	andi	r4,r5,255
 2006830:	200c923a 	slli	r6,r4,8
 2006834:	3108b03a 	or	r4,r6,r4
 2006838:	200c943a 	slli	r6,r4,16
 200683c:	218cb03a 	or	r6,r4,r6
 2006840:	010003c4 	movi	r4,15
 2006844:	21c0182e 	bgeu	r4,r7,20068a8 <memset+0xc8>
 2006848:	3b3ffc04 	addi	r12,r7,-16
 200684c:	6018d13a 	srli	r12,r12,4
 2006850:	1a000104 	addi	r8,r3,4
 2006854:	1ac00204 	addi	r11,r3,8
 2006858:	6008913a 	slli	r4,r12,4
 200685c:	1a800304 	addi	r10,r3,12
 2006860:	1813883a 	mov	r9,r3
 2006864:	21000504 	addi	r4,r4,20
 2006868:	1909883a 	add	r4,r3,r4
 200686c:	49800015 	stw	r6,0(r9)
 2006870:	41800015 	stw	r6,0(r8)
 2006874:	59800015 	stw	r6,0(r11)
 2006878:	51800015 	stw	r6,0(r10)
 200687c:	42000404 	addi	r8,r8,16
 2006880:	4a400404 	addi	r9,r9,16
 2006884:	5ac00404 	addi	r11,r11,16
 2006888:	52800404 	addi	r10,r10,16
 200688c:	413ff71e 	bne	r8,r4,200686c <memset+0x8c>
 2006890:	63000044 	addi	r12,r12,1
 2006894:	6018913a 	slli	r12,r12,4
 2006898:	39c003cc 	andi	r7,r7,15
 200689c:	010000c4 	movi	r4,3
 20068a0:	1b07883a 	add	r3,r3,r12
 20068a4:	21c00e2e 	bgeu	r4,r7,20068e0 <memset+0x100>
 20068a8:	1813883a 	mov	r9,r3
 20068ac:	3811883a 	mov	r8,r7
 20068b0:	010000c4 	movi	r4,3
 20068b4:	49800015 	stw	r6,0(r9)
 20068b8:	423fff04 	addi	r8,r8,-4
 20068bc:	4a400104 	addi	r9,r9,4
 20068c0:	223ffc36 	bltu	r4,r8,20068b4 <memset+0xd4>
 20068c4:	393fff04 	addi	r4,r7,-4
 20068c8:	2008d0ba 	srli	r4,r4,2
 20068cc:	39c000cc 	andi	r7,r7,3
 20068d0:	21000044 	addi	r4,r4,1
 20068d4:	2109883a 	add	r4,r4,r4
 20068d8:	2109883a 	add	r4,r4,r4
 20068dc:	1907883a 	add	r3,r3,r4
 20068e0:	38000526 	beq	r7,zero,20068f8 <memset+0x118>
 20068e4:	19cf883a 	add	r7,r3,r7
 20068e8:	19400005 	stb	r5,0(r3)
 20068ec:	18c00044 	addi	r3,r3,1
 20068f0:	38fffd1e 	bne	r7,r3,20068e8 <memset+0x108>
 20068f4:	f800283a 	ret
 20068f8:	f800283a 	ret
 20068fc:	2007883a 	mov	r3,r4
 2006900:	300f883a 	mov	r7,r6
 2006904:	003fc706 	br	2006824 <memset+0x44>

02006908 <_Balloc>:
 2006908:	20801317 	ldw	r2,76(r4)
 200690c:	defffc04 	addi	sp,sp,-16
 2006910:	dc400115 	stw	r17,4(sp)
 2006914:	dc000015 	stw	r16,0(sp)
 2006918:	dfc00315 	stw	ra,12(sp)
 200691c:	dc800215 	stw	r18,8(sp)
 2006920:	2023883a 	mov	r17,r4
 2006924:	2821883a 	mov	r16,r5
 2006928:	10000f26 	beq	r2,zero,2006968 <_Balloc+0x60>
 200692c:	8407883a 	add	r3,r16,r16
 2006930:	18c7883a 	add	r3,r3,r3
 2006934:	10c7883a 	add	r3,r2,r3
 2006938:	18800017 	ldw	r2,0(r3)
 200693c:	10001126 	beq	r2,zero,2006984 <_Balloc+0x7c>
 2006940:	11000017 	ldw	r4,0(r2)
 2006944:	19000015 	stw	r4,0(r3)
 2006948:	10000415 	stw	zero,16(r2)
 200694c:	10000315 	stw	zero,12(r2)
 2006950:	dfc00317 	ldw	ra,12(sp)
 2006954:	dc800217 	ldw	r18,8(sp)
 2006958:	dc400117 	ldw	r17,4(sp)
 200695c:	dc000017 	ldw	r16,0(sp)
 2006960:	dec00404 	addi	sp,sp,16
 2006964:	f800283a 	ret
 2006968:	01800844 	movi	r6,33
 200696c:	01400104 	movi	r5,4
 2006970:	20099b00 	call	20099b0 <_calloc_r>
 2006974:	88801315 	stw	r2,76(r17)
 2006978:	103fec1e 	bne	r2,zero,200692c <_Balloc+0x24>
 200697c:	0005883a 	mov	r2,zero
 2006980:	003ff306 	br	2006950 <_Balloc+0x48>
 2006984:	01400044 	movi	r5,1
 2006988:	2c24983a 	sll	r18,r5,r16
 200698c:	8809883a 	mov	r4,r17
 2006990:	91800144 	addi	r6,r18,5
 2006994:	318d883a 	add	r6,r6,r6
 2006998:	318d883a 	add	r6,r6,r6
 200699c:	20099b00 	call	20099b0 <_calloc_r>
 20069a0:	103ff626 	beq	r2,zero,200697c <_Balloc+0x74>
 20069a4:	14000115 	stw	r16,4(r2)
 20069a8:	14800215 	stw	r18,8(r2)
 20069ac:	003fe606 	br	2006948 <_Balloc+0x40>

020069b0 <_Bfree>:
 20069b0:	28000826 	beq	r5,zero,20069d4 <_Bfree+0x24>
 20069b4:	28c00117 	ldw	r3,4(r5)
 20069b8:	20801317 	ldw	r2,76(r4)
 20069bc:	18c7883a 	add	r3,r3,r3
 20069c0:	18c7883a 	add	r3,r3,r3
 20069c4:	10c5883a 	add	r2,r2,r3
 20069c8:	10c00017 	ldw	r3,0(r2)
 20069cc:	28c00015 	stw	r3,0(r5)
 20069d0:	11400015 	stw	r5,0(r2)
 20069d4:	f800283a 	ret

020069d8 <__multadd>:
 20069d8:	defff704 	addi	sp,sp,-36
 20069dc:	dc800215 	stw	r18,8(sp)
 20069e0:	2c800417 	ldw	r18,16(r5)
 20069e4:	dd800615 	stw	r22,24(sp)
 20069e8:	dd400515 	stw	r21,20(sp)
 20069ec:	dd000415 	stw	r20,16(sp)
 20069f0:	dcc00315 	stw	r19,12(sp)
 20069f4:	dc400115 	stw	r17,4(sp)
 20069f8:	dc000015 	stw	r16,0(sp)
 20069fc:	dfc00815 	stw	ra,32(sp)
 2006a00:	ddc00715 	stw	r23,28(sp)
 2006a04:	2827883a 	mov	r19,r5
 2006a08:	2029883a 	mov	r20,r4
 2006a0c:	3023883a 	mov	r17,r6
 2006a10:	3821883a 	mov	r16,r7
 2006a14:	2d400504 	addi	r21,r5,20
 2006a18:	002d883a 	mov	r22,zero
 2006a1c:	adc00017 	ldw	r23,0(r21)
 2006a20:	880b883a 	mov	r5,r17
 2006a24:	ad400104 	addi	r21,r21,4
 2006a28:	b93fffcc 	andi	r4,r23,65535
 2006a2c:	200afbc0 	call	200afbc <__mulsi3>
 2006a30:	b808d43a 	srli	r4,r23,16
 2006a34:	880b883a 	mov	r5,r17
 2006a38:	1421883a 	add	r16,r2,r16
 2006a3c:	200afbc0 	call	200afbc <__mulsi3>
 2006a40:	800ed43a 	srli	r7,r16,16
 2006a44:	80ffffcc 	andi	r3,r16,65535
 2006a48:	b5800044 	addi	r22,r22,1
 2006a4c:	11c5883a 	add	r2,r2,r7
 2006a50:	100e943a 	slli	r7,r2,16
 2006a54:	1020d43a 	srli	r16,r2,16
 2006a58:	38c7883a 	add	r3,r7,r3
 2006a5c:	a8ffff15 	stw	r3,-4(r21)
 2006a60:	b4bfee16 	blt	r22,r18,2006a1c <__multadd+0x44>
 2006a64:	80000926 	beq	r16,zero,2006a8c <__multadd+0xb4>
 2006a68:	98800217 	ldw	r2,8(r19)
 2006a6c:	9080130e 	bge	r18,r2,2006abc <__multadd+0xe4>
 2006a70:	90800144 	addi	r2,r18,5
 2006a74:	1085883a 	add	r2,r2,r2
 2006a78:	1085883a 	add	r2,r2,r2
 2006a7c:	9885883a 	add	r2,r19,r2
 2006a80:	14000015 	stw	r16,0(r2)
 2006a84:	94800044 	addi	r18,r18,1
 2006a88:	9c800415 	stw	r18,16(r19)
 2006a8c:	9805883a 	mov	r2,r19
 2006a90:	dfc00817 	ldw	ra,32(sp)
 2006a94:	ddc00717 	ldw	r23,28(sp)
 2006a98:	dd800617 	ldw	r22,24(sp)
 2006a9c:	dd400517 	ldw	r21,20(sp)
 2006aa0:	dd000417 	ldw	r20,16(sp)
 2006aa4:	dcc00317 	ldw	r19,12(sp)
 2006aa8:	dc800217 	ldw	r18,8(sp)
 2006aac:	dc400117 	ldw	r17,4(sp)
 2006ab0:	dc000017 	ldw	r16,0(sp)
 2006ab4:	dec00904 	addi	sp,sp,36
 2006ab8:	f800283a 	ret
 2006abc:	99400117 	ldw	r5,4(r19)
 2006ac0:	a009883a 	mov	r4,r20
 2006ac4:	29400044 	addi	r5,r5,1
 2006ac8:	20069080 	call	2006908 <_Balloc>
 2006acc:	99800417 	ldw	r6,16(r19)
 2006ad0:	99400304 	addi	r5,r19,12
 2006ad4:	11000304 	addi	r4,r2,12
 2006ad8:	31800084 	addi	r6,r6,2
 2006adc:	318d883a 	add	r6,r6,r6
 2006ae0:	318d883a 	add	r6,r6,r6
 2006ae4:	1023883a 	mov	r17,r2
 2006ae8:	200653c0 	call	200653c <memcpy>
 2006aec:	98000a26 	beq	r19,zero,2006b18 <__multadd+0x140>
 2006af0:	98c00117 	ldw	r3,4(r19)
 2006af4:	a0801317 	ldw	r2,76(r20)
 2006af8:	18c7883a 	add	r3,r3,r3
 2006afc:	18c7883a 	add	r3,r3,r3
 2006b00:	10c5883a 	add	r2,r2,r3
 2006b04:	10c00017 	ldw	r3,0(r2)
 2006b08:	98c00015 	stw	r3,0(r19)
 2006b0c:	14c00015 	stw	r19,0(r2)
 2006b10:	8827883a 	mov	r19,r17
 2006b14:	003fd606 	br	2006a70 <__multadd+0x98>
 2006b18:	8827883a 	mov	r19,r17
 2006b1c:	003fd406 	br	2006a70 <__multadd+0x98>

02006b20 <__s2b>:
 2006b20:	defff904 	addi	sp,sp,-28
 2006b24:	dc400115 	stw	r17,4(sp)
 2006b28:	dc000015 	stw	r16,0(sp)
 2006b2c:	2023883a 	mov	r17,r4
 2006b30:	2821883a 	mov	r16,r5
 2006b34:	39000204 	addi	r4,r7,8
 2006b38:	01400244 	movi	r5,9
 2006b3c:	dcc00315 	stw	r19,12(sp)
 2006b40:	dc800215 	stw	r18,8(sp)
 2006b44:	dfc00615 	stw	ra,24(sp)
 2006b48:	dd400515 	stw	r21,20(sp)
 2006b4c:	dd000415 	stw	r20,16(sp)
 2006b50:	3825883a 	mov	r18,r7
 2006b54:	3027883a 	mov	r19,r6
 2006b58:	200ae080 	call	200ae08 <__divsi3>
 2006b5c:	00c00044 	movi	r3,1
 2006b60:	000b883a 	mov	r5,zero
 2006b64:	1880030e 	bge	r3,r2,2006b74 <__s2b+0x54>
 2006b68:	18c7883a 	add	r3,r3,r3
 2006b6c:	29400044 	addi	r5,r5,1
 2006b70:	18bffd16 	blt	r3,r2,2006b68 <__s2b+0x48>
 2006b74:	8809883a 	mov	r4,r17
 2006b78:	20069080 	call	2006908 <_Balloc>
 2006b7c:	d8c00717 	ldw	r3,28(sp)
 2006b80:	10c00515 	stw	r3,20(r2)
 2006b84:	00c00044 	movi	r3,1
 2006b88:	10c00415 	stw	r3,16(r2)
 2006b8c:	00c00244 	movi	r3,9
 2006b90:	1cc0210e 	bge	r3,r19,2006c18 <__s2b+0xf8>
 2006b94:	80eb883a 	add	r21,r16,r3
 2006b98:	a829883a 	mov	r20,r21
 2006b9c:	84e1883a 	add	r16,r16,r19
 2006ba0:	a1c00007 	ldb	r7,0(r20)
 2006ba4:	01800284 	movi	r6,10
 2006ba8:	a5000044 	addi	r20,r20,1
 2006bac:	100b883a 	mov	r5,r2
 2006bb0:	39fff404 	addi	r7,r7,-48
 2006bb4:	8809883a 	mov	r4,r17
 2006bb8:	20069d80 	call	20069d8 <__multadd>
 2006bbc:	a43ff81e 	bne	r20,r16,2006ba0 <__s2b+0x80>
 2006bc0:	ace1883a 	add	r16,r21,r19
 2006bc4:	843ffe04 	addi	r16,r16,-8
 2006bc8:	9c800a0e 	bge	r19,r18,2006bf4 <__s2b+0xd4>
 2006bcc:	94e5c83a 	sub	r18,r18,r19
 2006bd0:	84a5883a 	add	r18,r16,r18
 2006bd4:	81c00007 	ldb	r7,0(r16)
 2006bd8:	01800284 	movi	r6,10
 2006bdc:	84000044 	addi	r16,r16,1
 2006be0:	100b883a 	mov	r5,r2
 2006be4:	39fff404 	addi	r7,r7,-48
 2006be8:	8809883a 	mov	r4,r17
 2006bec:	20069d80 	call	20069d8 <__multadd>
 2006bf0:	84bff81e 	bne	r16,r18,2006bd4 <__s2b+0xb4>
 2006bf4:	dfc00617 	ldw	ra,24(sp)
 2006bf8:	dd400517 	ldw	r21,20(sp)
 2006bfc:	dd000417 	ldw	r20,16(sp)
 2006c00:	dcc00317 	ldw	r19,12(sp)
 2006c04:	dc800217 	ldw	r18,8(sp)
 2006c08:	dc400117 	ldw	r17,4(sp)
 2006c0c:	dc000017 	ldw	r16,0(sp)
 2006c10:	dec00704 	addi	sp,sp,28
 2006c14:	f800283a 	ret
 2006c18:	84000284 	addi	r16,r16,10
 2006c1c:	1827883a 	mov	r19,r3
 2006c20:	003fe906 	br	2006bc8 <__s2b+0xa8>

02006c24 <__hi0bits>:
 2006c24:	20bfffec 	andhi	r2,r4,65535
 2006c28:	1000141e 	bne	r2,zero,2006c7c <__hi0bits+0x58>
 2006c2c:	2008943a 	slli	r4,r4,16
 2006c30:	00800404 	movi	r2,16
 2006c34:	20ffc02c 	andhi	r3,r4,65280
 2006c38:	1800021e 	bne	r3,zero,2006c44 <__hi0bits+0x20>
 2006c3c:	2008923a 	slli	r4,r4,8
 2006c40:	10800204 	addi	r2,r2,8
 2006c44:	20fc002c 	andhi	r3,r4,61440
 2006c48:	1800021e 	bne	r3,zero,2006c54 <__hi0bits+0x30>
 2006c4c:	2008913a 	slli	r4,r4,4
 2006c50:	10800104 	addi	r2,r2,4
 2006c54:	20f0002c 	andhi	r3,r4,49152
 2006c58:	1800031e 	bne	r3,zero,2006c68 <__hi0bits+0x44>
 2006c5c:	2109883a 	add	r4,r4,r4
 2006c60:	10800084 	addi	r2,r2,2
 2006c64:	2109883a 	add	r4,r4,r4
 2006c68:	20000316 	blt	r4,zero,2006c78 <__hi0bits+0x54>
 2006c6c:	2110002c 	andhi	r4,r4,16384
 2006c70:	2000041e 	bne	r4,zero,2006c84 <__hi0bits+0x60>
 2006c74:	00800804 	movi	r2,32
 2006c78:	f800283a 	ret
 2006c7c:	0005883a 	mov	r2,zero
 2006c80:	003fec06 	br	2006c34 <__hi0bits+0x10>
 2006c84:	10800044 	addi	r2,r2,1
 2006c88:	f800283a 	ret

02006c8c <__lo0bits>:
 2006c8c:	20c00017 	ldw	r3,0(r4)
 2006c90:	188001cc 	andi	r2,r3,7
 2006c94:	10000826 	beq	r2,zero,2006cb8 <__lo0bits+0x2c>
 2006c98:	1880004c 	andi	r2,r3,1
 2006c9c:	1000211e 	bne	r2,zero,2006d24 <__lo0bits+0x98>
 2006ca0:	1880008c 	andi	r2,r3,2
 2006ca4:	1000211e 	bne	r2,zero,2006d2c <__lo0bits+0xa0>
 2006ca8:	1806d0ba 	srli	r3,r3,2
 2006cac:	00800084 	movi	r2,2
 2006cb0:	20c00015 	stw	r3,0(r4)
 2006cb4:	f800283a 	ret
 2006cb8:	18bfffcc 	andi	r2,r3,65535
 2006cbc:	10001326 	beq	r2,zero,2006d0c <__lo0bits+0x80>
 2006cc0:	0005883a 	mov	r2,zero
 2006cc4:	19403fcc 	andi	r5,r3,255
 2006cc8:	2800021e 	bne	r5,zero,2006cd4 <__lo0bits+0x48>
 2006ccc:	1806d23a 	srli	r3,r3,8
 2006cd0:	10800204 	addi	r2,r2,8
 2006cd4:	194003cc 	andi	r5,r3,15
 2006cd8:	2800021e 	bne	r5,zero,2006ce4 <__lo0bits+0x58>
 2006cdc:	1806d13a 	srli	r3,r3,4
 2006ce0:	10800104 	addi	r2,r2,4
 2006ce4:	194000cc 	andi	r5,r3,3
 2006ce8:	2800021e 	bne	r5,zero,2006cf4 <__lo0bits+0x68>
 2006cec:	1806d0ba 	srli	r3,r3,2
 2006cf0:	10800084 	addi	r2,r2,2
 2006cf4:	1940004c 	andi	r5,r3,1
 2006cf8:	2800081e 	bne	r5,zero,2006d1c <__lo0bits+0x90>
 2006cfc:	1806d07a 	srli	r3,r3,1
 2006d00:	1800051e 	bne	r3,zero,2006d18 <__lo0bits+0x8c>
 2006d04:	00800804 	movi	r2,32
 2006d08:	f800283a 	ret
 2006d0c:	1806d43a 	srli	r3,r3,16
 2006d10:	00800404 	movi	r2,16
 2006d14:	003feb06 	br	2006cc4 <__lo0bits+0x38>
 2006d18:	10800044 	addi	r2,r2,1
 2006d1c:	20c00015 	stw	r3,0(r4)
 2006d20:	f800283a 	ret
 2006d24:	0005883a 	mov	r2,zero
 2006d28:	f800283a 	ret
 2006d2c:	1806d07a 	srli	r3,r3,1
 2006d30:	00800044 	movi	r2,1
 2006d34:	20c00015 	stw	r3,0(r4)
 2006d38:	f800283a 	ret

02006d3c <__i2b>:
 2006d3c:	defffd04 	addi	sp,sp,-12
 2006d40:	dc000015 	stw	r16,0(sp)
 2006d44:	04000044 	movi	r16,1
 2006d48:	dc400115 	stw	r17,4(sp)
 2006d4c:	2823883a 	mov	r17,r5
 2006d50:	800b883a 	mov	r5,r16
 2006d54:	dfc00215 	stw	ra,8(sp)
 2006d58:	20069080 	call	2006908 <_Balloc>
 2006d5c:	14400515 	stw	r17,20(r2)
 2006d60:	14000415 	stw	r16,16(r2)
 2006d64:	dfc00217 	ldw	ra,8(sp)
 2006d68:	dc400117 	ldw	r17,4(sp)
 2006d6c:	dc000017 	ldw	r16,0(sp)
 2006d70:	dec00304 	addi	sp,sp,12
 2006d74:	f800283a 	ret

02006d78 <__multiply>:
 2006d78:	deffef04 	addi	sp,sp,-68
 2006d7c:	dc400815 	stw	r17,32(sp)
 2006d80:	dc000715 	stw	r16,28(sp)
 2006d84:	34400417 	ldw	r17,16(r6)
 2006d88:	2c000417 	ldw	r16,16(r5)
 2006d8c:	dd800d15 	stw	r22,52(sp)
 2006d90:	dc800915 	stw	r18,36(sp)
 2006d94:	dfc01015 	stw	ra,64(sp)
 2006d98:	df000f15 	stw	fp,60(sp)
 2006d9c:	ddc00e15 	stw	r23,56(sp)
 2006da0:	dd400c15 	stw	r21,48(sp)
 2006da4:	dd000b15 	stw	r20,44(sp)
 2006da8:	dcc00a15 	stw	r19,40(sp)
 2006dac:	2825883a 	mov	r18,r5
 2006db0:	302d883a 	mov	r22,r6
 2006db4:	8440050e 	bge	r16,r17,2006dcc <__multiply+0x54>
 2006db8:	8007883a 	mov	r3,r16
 2006dbc:	3025883a 	mov	r18,r6
 2006dc0:	8821883a 	mov	r16,r17
 2006dc4:	282d883a 	mov	r22,r5
 2006dc8:	1823883a 	mov	r17,r3
 2006dcc:	90800217 	ldw	r2,8(r18)
 2006dd0:	8447883a 	add	r3,r16,r17
 2006dd4:	d8c00215 	stw	r3,8(sp)
 2006dd8:	91400117 	ldw	r5,4(r18)
 2006ddc:	10c0010e 	bge	r2,r3,2006de4 <__multiply+0x6c>
 2006de0:	29400044 	addi	r5,r5,1
 2006de4:	20069080 	call	2006908 <_Balloc>
 2006de8:	d8c00217 	ldw	r3,8(sp)
 2006dec:	d8800615 	stw	r2,24(sp)
 2006df0:	18eb883a 	add	r21,r3,r3
 2006df4:	ad6b883a 	add	r21,r21,r21
 2006df8:	10c00504 	addi	r3,r2,20
 2006dfc:	1d6b883a 	add	r21,r3,r21
 2006e00:	d8c00115 	stw	r3,4(sp)
 2006e04:	dd400315 	stw	r21,12(sp)
 2006e08:	1805883a 	mov	r2,r3
 2006e0c:	1d40042e 	bgeu	r3,r21,2006e20 <__multiply+0xa8>
 2006e10:	d8c00317 	ldw	r3,12(sp)
 2006e14:	10000015 	stw	zero,0(r2)
 2006e18:	10800104 	addi	r2,r2,4
 2006e1c:	10fffc36 	bltu	r2,r3,2006e10 <__multiply+0x98>
 2006e20:	8c63883a 	add	r17,r17,r17
 2006e24:	b5800504 	addi	r22,r22,20
 2006e28:	8c63883a 	add	r17,r17,r17
 2006e2c:	94800504 	addi	r18,r18,20
 2006e30:	8421883a 	add	r16,r16,r16
 2006e34:	b463883a 	add	r17,r22,r17
 2006e38:	8421883a 	add	r16,r16,r16
 2006e3c:	dd800015 	stw	r22,0(sp)
 2006e40:	dc800415 	stw	r18,16(sp)
 2006e44:	dc400515 	stw	r17,20(sp)
 2006e48:	9429883a 	add	r20,r18,r16
 2006e4c:	b4404f2e 	bgeu	r22,r17,2006f8c <__multiply+0x214>
 2006e50:	d8c00017 	ldw	r3,0(sp)
 2006e54:	1c800017 	ldw	r18,0(r3)
 2006e58:	947fffcc 	andi	r17,r18,65535
 2006e5c:	88001e26 	beq	r17,zero,2006ed8 <__multiply+0x160>
 2006e60:	dd800117 	ldw	r22,4(sp)
 2006e64:	dd400417 	ldw	r21,16(sp)
 2006e68:	0027883a 	mov	r19,zero
 2006e6c:	ac800017 	ldw	r18,0(r21)
 2006e70:	b4000017 	ldw	r16,0(r22)
 2006e74:	880b883a 	mov	r5,r17
 2006e78:	913fffcc 	andi	r4,r18,65535
 2006e7c:	200afbc0 	call	200afbc <__mulsi3>
 2006e80:	9008d43a 	srli	r4,r18,16
 2006e84:	84bfffcc 	andi	r18,r16,65535
 2006e88:	1485883a 	add	r2,r2,r18
 2006e8c:	14e5883a 	add	r18,r2,r19
 2006e90:	8020d43a 	srli	r16,r16,16
 2006e94:	9026d43a 	srli	r19,r18,16
 2006e98:	880b883a 	mov	r5,r17
 2006e9c:	200afbc0 	call	200afbc <__mulsi3>
 2006ea0:	1405883a 	add	r2,r2,r16
 2006ea4:	14e1883a 	add	r16,r2,r19
 2006ea8:	90ffffcc 	andi	r3,r18,65535
 2006eac:	8024943a 	slli	r18,r16,16
 2006eb0:	ad400104 	addi	r21,r21,4
 2006eb4:	b005883a 	mov	r2,r22
 2006eb8:	90c6b03a 	or	r3,r18,r3
 2006ebc:	b0c00015 	stw	r3,0(r22)
 2006ec0:	8026d43a 	srli	r19,r16,16
 2006ec4:	b5800104 	addi	r22,r22,4
 2006ec8:	ad3fe836 	bltu	r21,r20,2006e6c <__multiply+0xf4>
 2006ecc:	d8c00017 	ldw	r3,0(sp)
 2006ed0:	14c00115 	stw	r19,4(r2)
 2006ed4:	1c800017 	ldw	r18,0(r3)
 2006ed8:	9024d43a 	srli	r18,r18,16
 2006edc:	90002226 	beq	r18,zero,2006f68 <__multiply+0x1f0>
 2006ee0:	d8c00117 	ldw	r3,4(sp)
 2006ee4:	dd800417 	ldw	r22,16(sp)
 2006ee8:	002f883a 	mov	r23,zero
 2006eec:	1f000017 	ldw	fp,0(r3)
 2006ef0:	1823883a 	mov	r17,r3
 2006ef4:	182b883a 	mov	r21,r3
 2006ef8:	e021883a 	mov	r16,fp
 2006efc:	00000106 	br	2006f04 <__multiply+0x18c>
 2006f00:	982b883a 	mov	r21,r19
 2006f04:	b100000b 	ldhu	r4,0(r22)
 2006f08:	8020d43a 	srli	r16,r16,16
 2006f0c:	900b883a 	mov	r5,r18
 2006f10:	200afbc0 	call	200afbc <__mulsi3>
 2006f14:	1405883a 	add	r2,r2,r16
 2006f18:	15ef883a 	add	r23,r2,r23
 2006f1c:	b804943a 	slli	r2,r23,16
 2006f20:	e0ffffcc 	andi	r3,fp,65535
 2006f24:	8c400104 	addi	r17,r17,4
 2006f28:	10c6b03a 	or	r3,r2,r3
 2006f2c:	88ffff15 	stw	r3,-4(r17)
 2006f30:	b5800104 	addi	r22,r22,4
 2006f34:	b13fff17 	ldw	r4,-4(r22)
 2006f38:	acc00104 	addi	r19,r21,4
 2006f3c:	900b883a 	mov	r5,r18
 2006f40:	2008d43a 	srli	r4,r4,16
 2006f44:	9c000017 	ldw	r16,0(r19)
 2006f48:	200afbc0 	call	200afbc <__mulsi3>
 2006f4c:	b806d43a 	srli	r3,r23,16
 2006f50:	813fffcc 	andi	r4,r16,65535
 2006f54:	1105883a 	add	r2,r2,r4
 2006f58:	10f9883a 	add	fp,r2,r3
 2006f5c:	e02ed43a 	srli	r23,fp,16
 2006f60:	b53fe736 	bltu	r22,r20,2006f00 <__multiply+0x188>
 2006f64:	af000115 	stw	fp,4(r21)
 2006f68:	d8c00017 	ldw	r3,0(sp)
 2006f6c:	d9000517 	ldw	r4,20(sp)
 2006f70:	18c00104 	addi	r3,r3,4
 2006f74:	d8c00015 	stw	r3,0(sp)
 2006f78:	d8c00117 	ldw	r3,4(sp)
 2006f7c:	18c00104 	addi	r3,r3,4
 2006f80:	d8c00115 	stw	r3,4(sp)
 2006f84:	d8c00017 	ldw	r3,0(sp)
 2006f88:	193fb136 	bltu	r3,r4,2006e50 <__multiply+0xd8>
 2006f8c:	d8c00217 	ldw	r3,8(sp)
 2006f90:	00c00c0e 	bge	zero,r3,2006fc4 <__multiply+0x24c>
 2006f94:	d8c00317 	ldw	r3,12(sp)
 2006f98:	18bfff17 	ldw	r2,-4(r3)
 2006f9c:	1d7fff04 	addi	r21,r3,-4
 2006fa0:	10000326 	beq	r2,zero,2006fb0 <__multiply+0x238>
 2006fa4:	00000706 	br	2006fc4 <__multiply+0x24c>
 2006fa8:	a8800017 	ldw	r2,0(r21)
 2006fac:	1000051e 	bne	r2,zero,2006fc4 <__multiply+0x24c>
 2006fb0:	d8c00217 	ldw	r3,8(sp)
 2006fb4:	ad7fff04 	addi	r21,r21,-4
 2006fb8:	18ffffc4 	addi	r3,r3,-1
 2006fbc:	d8c00215 	stw	r3,8(sp)
 2006fc0:	183ff91e 	bne	r3,zero,2006fa8 <__multiply+0x230>
 2006fc4:	d8c00617 	ldw	r3,24(sp)
 2006fc8:	d9000217 	ldw	r4,8(sp)
 2006fcc:	1805883a 	mov	r2,r3
 2006fd0:	19000415 	stw	r4,16(r3)
 2006fd4:	dfc01017 	ldw	ra,64(sp)
 2006fd8:	df000f17 	ldw	fp,60(sp)
 2006fdc:	ddc00e17 	ldw	r23,56(sp)
 2006fe0:	dd800d17 	ldw	r22,52(sp)
 2006fe4:	dd400c17 	ldw	r21,48(sp)
 2006fe8:	dd000b17 	ldw	r20,44(sp)
 2006fec:	dcc00a17 	ldw	r19,40(sp)
 2006ff0:	dc800917 	ldw	r18,36(sp)
 2006ff4:	dc400817 	ldw	r17,32(sp)
 2006ff8:	dc000717 	ldw	r16,28(sp)
 2006ffc:	dec01104 	addi	sp,sp,68
 2007000:	f800283a 	ret

02007004 <__pow5mult>:
 2007004:	defffa04 	addi	sp,sp,-24
 2007008:	dcc00315 	stw	r19,12(sp)
 200700c:	dc000015 	stw	r16,0(sp)
 2007010:	dfc00515 	stw	ra,20(sp)
 2007014:	dd000415 	stw	r20,16(sp)
 2007018:	dc800215 	stw	r18,8(sp)
 200701c:	dc400115 	stw	r17,4(sp)
 2007020:	308000cc 	andi	r2,r6,3
 2007024:	3021883a 	mov	r16,r6
 2007028:	2027883a 	mov	r19,r4
 200702c:	10002f1e 	bne	r2,zero,20070ec <__pow5mult+0xe8>
 2007030:	2825883a 	mov	r18,r5
 2007034:	8021d0ba 	srai	r16,r16,2
 2007038:	80001a26 	beq	r16,zero,20070a4 <__pow5mult+0xa0>
 200703c:	9c401217 	ldw	r17,72(r19)
 2007040:	8800061e 	bne	r17,zero,200705c <__pow5mult+0x58>
 2007044:	00003406 	br	2007118 <__pow5mult+0x114>
 2007048:	8021d07a 	srai	r16,r16,1
 200704c:	80001526 	beq	r16,zero,20070a4 <__pow5mult+0xa0>
 2007050:	88800017 	ldw	r2,0(r17)
 2007054:	10001c26 	beq	r2,zero,20070c8 <__pow5mult+0xc4>
 2007058:	1023883a 	mov	r17,r2
 200705c:	8080004c 	andi	r2,r16,1
 2007060:	103ff926 	beq	r2,zero,2007048 <__pow5mult+0x44>
 2007064:	880d883a 	mov	r6,r17
 2007068:	900b883a 	mov	r5,r18
 200706c:	9809883a 	mov	r4,r19
 2007070:	2006d780 	call	2006d78 <__multiply>
 2007074:	90001b26 	beq	r18,zero,20070e4 <__pow5mult+0xe0>
 2007078:	91000117 	ldw	r4,4(r18)
 200707c:	98c01317 	ldw	r3,76(r19)
 2007080:	8021d07a 	srai	r16,r16,1
 2007084:	2109883a 	add	r4,r4,r4
 2007088:	2109883a 	add	r4,r4,r4
 200708c:	1907883a 	add	r3,r3,r4
 2007090:	19000017 	ldw	r4,0(r3)
 2007094:	91000015 	stw	r4,0(r18)
 2007098:	1c800015 	stw	r18,0(r3)
 200709c:	1025883a 	mov	r18,r2
 20070a0:	803feb1e 	bne	r16,zero,2007050 <__pow5mult+0x4c>
 20070a4:	9005883a 	mov	r2,r18
 20070a8:	dfc00517 	ldw	ra,20(sp)
 20070ac:	dd000417 	ldw	r20,16(sp)
 20070b0:	dcc00317 	ldw	r19,12(sp)
 20070b4:	dc800217 	ldw	r18,8(sp)
 20070b8:	dc400117 	ldw	r17,4(sp)
 20070bc:	dc000017 	ldw	r16,0(sp)
 20070c0:	dec00604 	addi	sp,sp,24
 20070c4:	f800283a 	ret
 20070c8:	880d883a 	mov	r6,r17
 20070cc:	880b883a 	mov	r5,r17
 20070d0:	9809883a 	mov	r4,r19
 20070d4:	2006d780 	call	2006d78 <__multiply>
 20070d8:	88800015 	stw	r2,0(r17)
 20070dc:	10000015 	stw	zero,0(r2)
 20070e0:	003fdd06 	br	2007058 <__pow5mult+0x54>
 20070e4:	1025883a 	mov	r18,r2
 20070e8:	003fd706 	br	2007048 <__pow5mult+0x44>
 20070ec:	10bfffc4 	addi	r2,r2,-1
 20070f0:	1085883a 	add	r2,r2,r2
 20070f4:	00c080b4 	movhi	r3,514
 20070f8:	18e36404 	addi	r3,r3,-29296
 20070fc:	1085883a 	add	r2,r2,r2
 2007100:	1885883a 	add	r2,r3,r2
 2007104:	11800017 	ldw	r6,0(r2)
 2007108:	000f883a 	mov	r7,zero
 200710c:	20069d80 	call	20069d8 <__multadd>
 2007110:	1025883a 	mov	r18,r2
 2007114:	003fc706 	br	2007034 <__pow5mult+0x30>
 2007118:	05000044 	movi	r20,1
 200711c:	a00b883a 	mov	r5,r20
 2007120:	9809883a 	mov	r4,r19
 2007124:	20069080 	call	2006908 <_Balloc>
 2007128:	1023883a 	mov	r17,r2
 200712c:	00809c44 	movi	r2,625
 2007130:	88800515 	stw	r2,20(r17)
 2007134:	8d000415 	stw	r20,16(r17)
 2007138:	9c401215 	stw	r17,72(r19)
 200713c:	88000015 	stw	zero,0(r17)
 2007140:	003fc606 	br	200705c <__pow5mult+0x58>

02007144 <__lshift>:
 2007144:	defff904 	addi	sp,sp,-28
 2007148:	dd400515 	stw	r21,20(sp)
 200714c:	dcc00315 	stw	r19,12(sp)
 2007150:	302bd17a 	srai	r21,r6,5
 2007154:	2cc00417 	ldw	r19,16(r5)
 2007158:	28800217 	ldw	r2,8(r5)
 200715c:	dd000415 	stw	r20,16(sp)
 2007160:	ace7883a 	add	r19,r21,r19
 2007164:	dc800215 	stw	r18,8(sp)
 2007168:	dc400115 	stw	r17,4(sp)
 200716c:	dc000015 	stw	r16,0(sp)
 2007170:	dfc00615 	stw	ra,24(sp)
 2007174:	9c000044 	addi	r16,r19,1
 2007178:	2823883a 	mov	r17,r5
 200717c:	3029883a 	mov	r20,r6
 2007180:	2025883a 	mov	r18,r4
 2007184:	29400117 	ldw	r5,4(r5)
 2007188:	1400030e 	bge	r2,r16,2007198 <__lshift+0x54>
 200718c:	1085883a 	add	r2,r2,r2
 2007190:	29400044 	addi	r5,r5,1
 2007194:	143ffd16 	blt	r2,r16,200718c <__lshift+0x48>
 2007198:	9009883a 	mov	r4,r18
 200719c:	20069080 	call	2006908 <_Balloc>
 20071a0:	10c00504 	addi	r3,r2,20
 20071a4:	0540070e 	bge	zero,r21,20071c4 <__lshift+0x80>
 20071a8:	ad6b883a 	add	r21,r21,r21
 20071ac:	ad6b883a 	add	r21,r21,r21
 20071b0:	1809883a 	mov	r4,r3
 20071b4:	1d47883a 	add	r3,r3,r21
 20071b8:	20000015 	stw	zero,0(r4)
 20071bc:	21000104 	addi	r4,r4,4
 20071c0:	193ffd1e 	bne	r3,r4,20071b8 <__lshift+0x74>
 20071c4:	8a000417 	ldw	r8,16(r17)
 20071c8:	89000504 	addi	r4,r17,20
 20071cc:	a18007cc 	andi	r6,r20,31
 20071d0:	4211883a 	add	r8,r8,r8
 20071d4:	4211883a 	add	r8,r8,r8
 20071d8:	2211883a 	add	r8,r4,r8
 20071dc:	30002326 	beq	r6,zero,200726c <__lshift+0x128>
 20071e0:	02400804 	movi	r9,32
 20071e4:	4993c83a 	sub	r9,r9,r6
 20071e8:	000b883a 	mov	r5,zero
 20071ec:	21c00017 	ldw	r7,0(r4)
 20071f0:	1815883a 	mov	r10,r3
 20071f4:	18c00104 	addi	r3,r3,4
 20071f8:	398e983a 	sll	r7,r7,r6
 20071fc:	21000104 	addi	r4,r4,4
 2007200:	394ab03a 	or	r5,r7,r5
 2007204:	197fff15 	stw	r5,-4(r3)
 2007208:	217fff17 	ldw	r5,-4(r4)
 200720c:	2a4ad83a 	srl	r5,r5,r9
 2007210:	223ff636 	bltu	r4,r8,20071ec <__lshift+0xa8>
 2007214:	51400115 	stw	r5,4(r10)
 2007218:	28001a1e 	bne	r5,zero,2007284 <__lshift+0x140>
 200721c:	843fffc4 	addi	r16,r16,-1
 2007220:	14000415 	stw	r16,16(r2)
 2007224:	88000826 	beq	r17,zero,2007248 <__lshift+0x104>
 2007228:	89000117 	ldw	r4,4(r17)
 200722c:	90c01317 	ldw	r3,76(r18)
 2007230:	2109883a 	add	r4,r4,r4
 2007234:	2109883a 	add	r4,r4,r4
 2007238:	1907883a 	add	r3,r3,r4
 200723c:	19000017 	ldw	r4,0(r3)
 2007240:	89000015 	stw	r4,0(r17)
 2007244:	1c400015 	stw	r17,0(r3)
 2007248:	dfc00617 	ldw	ra,24(sp)
 200724c:	dd400517 	ldw	r21,20(sp)
 2007250:	dd000417 	ldw	r20,16(sp)
 2007254:	dcc00317 	ldw	r19,12(sp)
 2007258:	dc800217 	ldw	r18,8(sp)
 200725c:	dc400117 	ldw	r17,4(sp)
 2007260:	dc000017 	ldw	r16,0(sp)
 2007264:	dec00704 	addi	sp,sp,28
 2007268:	f800283a 	ret
 200726c:	21400017 	ldw	r5,0(r4)
 2007270:	18c00104 	addi	r3,r3,4
 2007274:	21000104 	addi	r4,r4,4
 2007278:	197fff15 	stw	r5,-4(r3)
 200727c:	223ffb36 	bltu	r4,r8,200726c <__lshift+0x128>
 2007280:	003fe606 	br	200721c <__lshift+0xd8>
 2007284:	9c000084 	addi	r16,r19,2
 2007288:	003fe406 	br	200721c <__lshift+0xd8>

0200728c <__mcmp>:
 200728c:	20800417 	ldw	r2,16(r4)
 2007290:	28c00417 	ldw	r3,16(r5)
 2007294:	10c5c83a 	sub	r2,r2,r3
 2007298:	1000111e 	bne	r2,zero,20072e0 <__mcmp+0x54>
 200729c:	18c7883a 	add	r3,r3,r3
 20072a0:	18c7883a 	add	r3,r3,r3
 20072a4:	21000504 	addi	r4,r4,20
 20072a8:	29400504 	addi	r5,r5,20
 20072ac:	20c5883a 	add	r2,r4,r3
 20072b0:	28cb883a 	add	r5,r5,r3
 20072b4:	00000106 	br	20072bc <__mcmp+0x30>
 20072b8:	20800a2e 	bgeu	r4,r2,20072e4 <__mcmp+0x58>
 20072bc:	10bfff04 	addi	r2,r2,-4
 20072c0:	297fff04 	addi	r5,r5,-4
 20072c4:	11800017 	ldw	r6,0(r2)
 20072c8:	28c00017 	ldw	r3,0(r5)
 20072cc:	30fffa26 	beq	r6,r3,20072b8 <__mcmp+0x2c>
 20072d0:	30c00236 	bltu	r6,r3,20072dc <__mcmp+0x50>
 20072d4:	00800044 	movi	r2,1
 20072d8:	f800283a 	ret
 20072dc:	00bfffc4 	movi	r2,-1
 20072e0:	f800283a 	ret
 20072e4:	0005883a 	mov	r2,zero
 20072e8:	f800283a 	ret

020072ec <__mdiff>:
 20072ec:	28c00417 	ldw	r3,16(r5)
 20072f0:	30800417 	ldw	r2,16(r6)
 20072f4:	defffa04 	addi	sp,sp,-24
 20072f8:	dcc00315 	stw	r19,12(sp)
 20072fc:	dc800215 	stw	r18,8(sp)
 2007300:	dfc00515 	stw	ra,20(sp)
 2007304:	dd000415 	stw	r20,16(sp)
 2007308:	dc400115 	stw	r17,4(sp)
 200730c:	dc000015 	stw	r16,0(sp)
 2007310:	1887c83a 	sub	r3,r3,r2
 2007314:	2825883a 	mov	r18,r5
 2007318:	3027883a 	mov	r19,r6
 200731c:	1800141e 	bne	r3,zero,2007370 <__mdiff+0x84>
 2007320:	1085883a 	add	r2,r2,r2
 2007324:	1085883a 	add	r2,r2,r2
 2007328:	2a000504 	addi	r8,r5,20
 200732c:	34000504 	addi	r16,r6,20
 2007330:	4087883a 	add	r3,r8,r2
 2007334:	8085883a 	add	r2,r16,r2
 2007338:	00000106 	br	2007340 <__mdiff+0x54>
 200733c:	40c0592e 	bgeu	r8,r3,20074a4 <__mdiff+0x1b8>
 2007340:	18ffff04 	addi	r3,r3,-4
 2007344:	10bfff04 	addi	r2,r2,-4
 2007348:	19c00017 	ldw	r7,0(r3)
 200734c:	11400017 	ldw	r5,0(r2)
 2007350:	397ffa26 	beq	r7,r5,200733c <__mdiff+0x50>
 2007354:	3940592e 	bgeu	r7,r5,20074bc <__mdiff+0x1d0>
 2007358:	9005883a 	mov	r2,r18
 200735c:	4023883a 	mov	r17,r8
 2007360:	9825883a 	mov	r18,r19
 2007364:	05000044 	movi	r20,1
 2007368:	1027883a 	mov	r19,r2
 200736c:	00000406 	br	2007380 <__mdiff+0x94>
 2007370:	18005616 	blt	r3,zero,20074cc <__mdiff+0x1e0>
 2007374:	34400504 	addi	r17,r6,20
 2007378:	2c000504 	addi	r16,r5,20
 200737c:	0029883a 	mov	r20,zero
 2007380:	91400117 	ldw	r5,4(r18)
 2007384:	20069080 	call	2006908 <_Balloc>
 2007388:	92400417 	ldw	r9,16(r18)
 200738c:	9b000417 	ldw	r12,16(r19)
 2007390:	12c00504 	addi	r11,r2,20
 2007394:	4a51883a 	add	r8,r9,r9
 2007398:	6319883a 	add	r12,r12,r12
 200739c:	4211883a 	add	r8,r8,r8
 20073a0:	6319883a 	add	r12,r12,r12
 20073a4:	15000315 	stw	r20,12(r2)
 20073a8:	8211883a 	add	r8,r16,r8
 20073ac:	8b19883a 	add	r12,r17,r12
 20073b0:	0007883a 	mov	r3,zero
 20073b4:	81400017 	ldw	r5,0(r16)
 20073b8:	89c00017 	ldw	r7,0(r17)
 20073bc:	59800104 	addi	r6,r11,4
 20073c0:	293fffcc 	andi	r4,r5,65535
 20073c4:	20c7883a 	add	r3,r4,r3
 20073c8:	393fffcc 	andi	r4,r7,65535
 20073cc:	1909c83a 	sub	r4,r3,r4
 20073d0:	280ad43a 	srli	r5,r5,16
 20073d4:	380ed43a 	srli	r7,r7,16
 20073d8:	2007d43a 	srai	r3,r4,16
 20073dc:	213fffcc 	andi	r4,r4,65535
 20073e0:	29cbc83a 	sub	r5,r5,r7
 20073e4:	28c7883a 	add	r3,r5,r3
 20073e8:	180a943a 	slli	r5,r3,16
 20073ec:	8c400104 	addi	r17,r17,4
 20073f0:	84000104 	addi	r16,r16,4
 20073f4:	2908b03a 	or	r4,r5,r4
 20073f8:	59000015 	stw	r4,0(r11)
 20073fc:	1807d43a 	srai	r3,r3,16
 2007400:	3015883a 	mov	r10,r6
 2007404:	3017883a 	mov	r11,r6
 2007408:	8b3fea36 	bltu	r17,r12,20073b4 <__mdiff+0xc8>
 200740c:	8200162e 	bgeu	r16,r8,2007468 <__mdiff+0x17c>
 2007410:	8017883a 	mov	r11,r16
 2007414:	59400017 	ldw	r5,0(r11)
 2007418:	31800104 	addi	r6,r6,4
 200741c:	5ac00104 	addi	r11,r11,4
 2007420:	293fffcc 	andi	r4,r5,65535
 2007424:	20c7883a 	add	r3,r4,r3
 2007428:	280ed43a 	srli	r7,r5,16
 200742c:	180bd43a 	srai	r5,r3,16
 2007430:	193fffcc 	andi	r4,r3,65535
 2007434:	3947883a 	add	r3,r7,r5
 2007438:	180a943a 	slli	r5,r3,16
 200743c:	1807d43a 	srai	r3,r3,16
 2007440:	2908b03a 	or	r4,r5,r4
 2007444:	313fff15 	stw	r4,-4(r6)
 2007448:	5a3ff236 	bltu	r11,r8,2007414 <__mdiff+0x128>
 200744c:	0406303a 	nor	r3,zero,r16
 2007450:	1a07883a 	add	r3,r3,r8
 2007454:	1806d0ba 	srli	r3,r3,2
 2007458:	18c00044 	addi	r3,r3,1
 200745c:	18c7883a 	add	r3,r3,r3
 2007460:	18c7883a 	add	r3,r3,r3
 2007464:	50d5883a 	add	r10,r10,r3
 2007468:	50ffff04 	addi	r3,r10,-4
 200746c:	2000041e 	bne	r4,zero,2007480 <__mdiff+0x194>
 2007470:	18ffff04 	addi	r3,r3,-4
 2007474:	19000017 	ldw	r4,0(r3)
 2007478:	4a7fffc4 	addi	r9,r9,-1
 200747c:	203ffc26 	beq	r4,zero,2007470 <__mdiff+0x184>
 2007480:	12400415 	stw	r9,16(r2)
 2007484:	dfc00517 	ldw	ra,20(sp)
 2007488:	dd000417 	ldw	r20,16(sp)
 200748c:	dcc00317 	ldw	r19,12(sp)
 2007490:	dc800217 	ldw	r18,8(sp)
 2007494:	dc400117 	ldw	r17,4(sp)
 2007498:	dc000017 	ldw	r16,0(sp)
 200749c:	dec00604 	addi	sp,sp,24
 20074a0:	f800283a 	ret
 20074a4:	000b883a 	mov	r5,zero
 20074a8:	20069080 	call	2006908 <_Balloc>
 20074ac:	00c00044 	movi	r3,1
 20074b0:	10c00415 	stw	r3,16(r2)
 20074b4:	10000515 	stw	zero,20(r2)
 20074b8:	003ff206 	br	2007484 <__mdiff+0x198>
 20074bc:	8023883a 	mov	r17,r16
 20074c0:	0029883a 	mov	r20,zero
 20074c4:	4021883a 	mov	r16,r8
 20074c8:	003fad06 	br	2007380 <__mdiff+0x94>
 20074cc:	9005883a 	mov	r2,r18
 20074d0:	94400504 	addi	r17,r18,20
 20074d4:	9c000504 	addi	r16,r19,20
 20074d8:	9825883a 	mov	r18,r19
 20074dc:	05000044 	movi	r20,1
 20074e0:	1027883a 	mov	r19,r2
 20074e4:	003fa606 	br	2007380 <__mdiff+0x94>

020074e8 <__ulp>:
 20074e8:	295ffc2c 	andhi	r5,r5,32752
 20074ec:	00bf3034 	movhi	r2,64704
 20074f0:	2887883a 	add	r3,r5,r2
 20074f4:	00c0020e 	bge	zero,r3,2007500 <__ulp+0x18>
 20074f8:	0005883a 	mov	r2,zero
 20074fc:	f800283a 	ret
 2007500:	00c7c83a 	sub	r3,zero,r3
 2007504:	1807d53a 	srai	r3,r3,20
 2007508:	008004c4 	movi	r2,19
 200750c:	10c00b0e 	bge	r2,r3,200753c <__ulp+0x54>
 2007510:	18bffb04 	addi	r2,r3,-20
 2007514:	01000784 	movi	r4,30
 2007518:	0007883a 	mov	r3,zero
 200751c:	20800516 	blt	r4,r2,2007534 <__ulp+0x4c>
 2007520:	010007c4 	movi	r4,31
 2007524:	2089c83a 	sub	r4,r4,r2
 2007528:	00800044 	movi	r2,1
 200752c:	1104983a 	sll	r2,r2,r4
 2007530:	f800283a 	ret
 2007534:	00800044 	movi	r2,1
 2007538:	f800283a 	ret
 200753c:	01400234 	movhi	r5,8
 2007540:	28c7d83a 	sra	r3,r5,r3
 2007544:	0005883a 	mov	r2,zero
 2007548:	f800283a 	ret

0200754c <__b2d>:
 200754c:	defffa04 	addi	sp,sp,-24
 2007550:	dc000015 	stw	r16,0(sp)
 2007554:	24000417 	ldw	r16,16(r4)
 2007558:	dc400115 	stw	r17,4(sp)
 200755c:	24400504 	addi	r17,r4,20
 2007560:	8421883a 	add	r16,r16,r16
 2007564:	8421883a 	add	r16,r16,r16
 2007568:	8c21883a 	add	r16,r17,r16
 200756c:	dc800215 	stw	r18,8(sp)
 2007570:	84bfff17 	ldw	r18,-4(r16)
 2007574:	dd000415 	stw	r20,16(sp)
 2007578:	dcc00315 	stw	r19,12(sp)
 200757c:	9009883a 	mov	r4,r18
 2007580:	2829883a 	mov	r20,r5
 2007584:	dfc00515 	stw	ra,20(sp)
 2007588:	2006c240 	call	2006c24 <__hi0bits>
 200758c:	00c00804 	movi	r3,32
 2007590:	1889c83a 	sub	r4,r3,r2
 2007594:	a1000015 	stw	r4,0(r20)
 2007598:	01000284 	movi	r4,10
 200759c:	84ffff04 	addi	r19,r16,-4
 20075a0:	20801216 	blt	r4,r2,20075ec <__b2d+0xa0>
 20075a4:	018002c4 	movi	r6,11
 20075a8:	308dc83a 	sub	r6,r6,r2
 20075ac:	9186d83a 	srl	r3,r18,r6
 20075b0:	18cffc34 	orhi	r3,r3,16368
 20075b4:	8cc0212e 	bgeu	r17,r19,200763c <__b2d+0xf0>
 20075b8:	813ffe17 	ldw	r4,-8(r16)
 20075bc:	218cd83a 	srl	r6,r4,r6
 20075c0:	10800544 	addi	r2,r2,21
 20075c4:	9084983a 	sll	r2,r18,r2
 20075c8:	1184b03a 	or	r2,r2,r6
 20075cc:	dfc00517 	ldw	ra,20(sp)
 20075d0:	dd000417 	ldw	r20,16(sp)
 20075d4:	dcc00317 	ldw	r19,12(sp)
 20075d8:	dc800217 	ldw	r18,8(sp)
 20075dc:	dc400117 	ldw	r17,4(sp)
 20075e0:	dc000017 	ldw	r16,0(sp)
 20075e4:	dec00604 	addi	sp,sp,24
 20075e8:	f800283a 	ret
 20075ec:	8cc00f2e 	bgeu	r17,r19,200762c <__b2d+0xe0>
 20075f0:	117ffd44 	addi	r5,r2,-11
 20075f4:	80bffe17 	ldw	r2,-8(r16)
 20075f8:	28000e26 	beq	r5,zero,2007634 <__b2d+0xe8>
 20075fc:	1949c83a 	sub	r4,r3,r5
 2007600:	9164983a 	sll	r18,r18,r5
 2007604:	1106d83a 	srl	r3,r2,r4
 2007608:	81bffe04 	addi	r6,r16,-8
 200760c:	948ffc34 	orhi	r18,r18,16368
 2007610:	90c6b03a 	or	r3,r18,r3
 2007614:	89800e2e 	bgeu	r17,r6,2007650 <__b2d+0x104>
 2007618:	81bffd17 	ldw	r6,-12(r16)
 200761c:	1144983a 	sll	r2,r2,r5
 2007620:	310ad83a 	srl	r5,r6,r4
 2007624:	2884b03a 	or	r2,r5,r2
 2007628:	003fe806 	br	20075cc <__b2d+0x80>
 200762c:	10bffd44 	addi	r2,r2,-11
 2007630:	1000041e 	bne	r2,zero,2007644 <__b2d+0xf8>
 2007634:	90cffc34 	orhi	r3,r18,16368
 2007638:	003fe406 	br	20075cc <__b2d+0x80>
 200763c:	000d883a 	mov	r6,zero
 2007640:	003fdf06 	br	20075c0 <__b2d+0x74>
 2007644:	90a4983a 	sll	r18,r18,r2
 2007648:	0005883a 	mov	r2,zero
 200764c:	003ff906 	br	2007634 <__b2d+0xe8>
 2007650:	1144983a 	sll	r2,r2,r5
 2007654:	003fdd06 	br	20075cc <__b2d+0x80>

02007658 <__d2b>:
 2007658:	defff804 	addi	sp,sp,-32
 200765c:	dc000215 	stw	r16,8(sp)
 2007660:	3021883a 	mov	r16,r6
 2007664:	dc400315 	stw	r17,12(sp)
 2007668:	8022907a 	slli	r17,r16,1
 200766c:	dd000615 	stw	r20,24(sp)
 2007670:	2829883a 	mov	r20,r5
 2007674:	01400044 	movi	r5,1
 2007678:	dcc00515 	stw	r19,20(sp)
 200767c:	dc800415 	stw	r18,16(sp)
 2007680:	dfc00715 	stw	ra,28(sp)
 2007684:	3825883a 	mov	r18,r7
 2007688:	8822d57a 	srli	r17,r17,21
 200768c:	20069080 	call	2006908 <_Balloc>
 2007690:	1027883a 	mov	r19,r2
 2007694:	00800434 	movhi	r2,16
 2007698:	10bfffc4 	addi	r2,r2,-1
 200769c:	808c703a 	and	r6,r16,r2
 20076a0:	88000126 	beq	r17,zero,20076a8 <__d2b+0x50>
 20076a4:	31800434 	orhi	r6,r6,16
 20076a8:	d9800015 	stw	r6,0(sp)
 20076ac:	a0002426 	beq	r20,zero,2007740 <__d2b+0xe8>
 20076b0:	d9000104 	addi	r4,sp,4
 20076b4:	dd000115 	stw	r20,4(sp)
 20076b8:	2006c8c0 	call	2006c8c <__lo0bits>
 20076bc:	d8c00017 	ldw	r3,0(sp)
 20076c0:	10002f1e 	bne	r2,zero,2007780 <__d2b+0x128>
 20076c4:	d9000117 	ldw	r4,4(sp)
 20076c8:	99000515 	stw	r4,20(r19)
 20076cc:	1821003a 	cmpeq	r16,r3,zero
 20076d0:	01000084 	movi	r4,2
 20076d4:	2421c83a 	sub	r16,r4,r16
 20076d8:	98c00615 	stw	r3,24(r19)
 20076dc:	9c000415 	stw	r16,16(r19)
 20076e0:	88001f1e 	bne	r17,zero,2007760 <__d2b+0x108>
 20076e4:	10bef384 	addi	r2,r2,-1074
 20076e8:	90800015 	stw	r2,0(r18)
 20076ec:	00900034 	movhi	r2,16384
 20076f0:	10bfffc4 	addi	r2,r2,-1
 20076f4:	8085883a 	add	r2,r16,r2
 20076f8:	1085883a 	add	r2,r2,r2
 20076fc:	1085883a 	add	r2,r2,r2
 2007700:	9885883a 	add	r2,r19,r2
 2007704:	11000517 	ldw	r4,20(r2)
 2007708:	8020917a 	slli	r16,r16,5
 200770c:	2006c240 	call	2006c24 <__hi0bits>
 2007710:	d8c00817 	ldw	r3,32(sp)
 2007714:	8085c83a 	sub	r2,r16,r2
 2007718:	18800015 	stw	r2,0(r3)
 200771c:	9805883a 	mov	r2,r19
 2007720:	dfc00717 	ldw	ra,28(sp)
 2007724:	dd000617 	ldw	r20,24(sp)
 2007728:	dcc00517 	ldw	r19,20(sp)
 200772c:	dc800417 	ldw	r18,16(sp)
 2007730:	dc400317 	ldw	r17,12(sp)
 2007734:	dc000217 	ldw	r16,8(sp)
 2007738:	dec00804 	addi	sp,sp,32
 200773c:	f800283a 	ret
 2007740:	d809883a 	mov	r4,sp
 2007744:	2006c8c0 	call	2006c8c <__lo0bits>
 2007748:	d8c00017 	ldw	r3,0(sp)
 200774c:	04000044 	movi	r16,1
 2007750:	9c000415 	stw	r16,16(r19)
 2007754:	98c00515 	stw	r3,20(r19)
 2007758:	10800804 	addi	r2,r2,32
 200775c:	883fe126 	beq	r17,zero,20076e4 <__d2b+0x8c>
 2007760:	00c00d44 	movi	r3,53
 2007764:	8c7ef344 	addi	r17,r17,-1075
 2007768:	88a3883a 	add	r17,r17,r2
 200776c:	1885c83a 	sub	r2,r3,r2
 2007770:	d8c00817 	ldw	r3,32(sp)
 2007774:	94400015 	stw	r17,0(r18)
 2007778:	18800015 	stw	r2,0(r3)
 200777c:	003fe706 	br	200771c <__d2b+0xc4>
 2007780:	01000804 	movi	r4,32
 2007784:	2089c83a 	sub	r4,r4,r2
 2007788:	1908983a 	sll	r4,r3,r4
 200778c:	d9400117 	ldw	r5,4(sp)
 2007790:	1886d83a 	srl	r3,r3,r2
 2007794:	2148b03a 	or	r4,r4,r5
 2007798:	99000515 	stw	r4,20(r19)
 200779c:	d8c00015 	stw	r3,0(sp)
 20077a0:	003fca06 	br	20076cc <__d2b+0x74>

020077a4 <__ratio>:
 20077a4:	defff904 	addi	sp,sp,-28
 20077a8:	dc400315 	stw	r17,12(sp)
 20077ac:	2823883a 	mov	r17,r5
 20077b0:	d9400104 	addi	r5,sp,4
 20077b4:	dfc00615 	stw	ra,24(sp)
 20077b8:	dcc00515 	stw	r19,20(sp)
 20077bc:	dc800415 	stw	r18,16(sp)
 20077c0:	2027883a 	mov	r19,r4
 20077c4:	dc000215 	stw	r16,8(sp)
 20077c8:	200754c0 	call	200754c <__b2d>
 20077cc:	d80b883a 	mov	r5,sp
 20077d0:	8809883a 	mov	r4,r17
 20077d4:	1025883a 	mov	r18,r2
 20077d8:	1821883a 	mov	r16,r3
 20077dc:	200754c0 	call	200754c <__b2d>
 20077e0:	8a000417 	ldw	r8,16(r17)
 20077e4:	99000417 	ldw	r4,16(r19)
 20077e8:	d9400117 	ldw	r5,4(sp)
 20077ec:	2209c83a 	sub	r4,r4,r8
 20077f0:	2010917a 	slli	r8,r4,5
 20077f4:	d9000017 	ldw	r4,0(sp)
 20077f8:	2909c83a 	sub	r4,r5,r4
 20077fc:	4109883a 	add	r4,r8,r4
 2007800:	01000e0e 	bge	zero,r4,200783c <__ratio+0x98>
 2007804:	2008953a 	slli	r4,r4,20
 2007808:	2421883a 	add	r16,r4,r16
 200780c:	100d883a 	mov	r6,r2
 2007810:	180f883a 	mov	r7,r3
 2007814:	9009883a 	mov	r4,r18
 2007818:	800b883a 	mov	r5,r16
 200781c:	200b8900 	call	200b890 <__divdf3>
 2007820:	dfc00617 	ldw	ra,24(sp)
 2007824:	dcc00517 	ldw	r19,20(sp)
 2007828:	dc800417 	ldw	r18,16(sp)
 200782c:	dc400317 	ldw	r17,12(sp)
 2007830:	dc000217 	ldw	r16,8(sp)
 2007834:	dec00704 	addi	sp,sp,28
 2007838:	f800283a 	ret
 200783c:	2008953a 	slli	r4,r4,20
 2007840:	1907c83a 	sub	r3,r3,r4
 2007844:	003ff106 	br	200780c <__ratio+0x68>

02007848 <_mprec_log10>:
 2007848:	defffe04 	addi	sp,sp,-8
 200784c:	dc000015 	stw	r16,0(sp)
 2007850:	dfc00115 	stw	ra,4(sp)
 2007854:	008005c4 	movi	r2,23
 2007858:	2021883a 	mov	r16,r4
 200785c:	11000d0e 	bge	r2,r4,2007894 <_mprec_log10+0x4c>
 2007860:	0005883a 	mov	r2,zero
 2007864:	00cffc34 	movhi	r3,16368
 2007868:	843fffc4 	addi	r16,r16,-1
 200786c:	000d883a 	mov	r6,zero
 2007870:	01d00934 	movhi	r7,16420
 2007874:	1009883a 	mov	r4,r2
 2007878:	180b883a 	mov	r5,r3
 200787c:	200c4b80 	call	200c4b8 <__muldf3>
 2007880:	803ff91e 	bne	r16,zero,2007868 <_mprec_log10+0x20>
 2007884:	dfc00117 	ldw	ra,4(sp)
 2007888:	dc000017 	ldw	r16,0(sp)
 200788c:	dec00204 	addi	sp,sp,8
 2007890:	f800283a 	ret
 2007894:	202090fa 	slli	r16,r4,3
 2007898:	008080b4 	movhi	r2,514
 200789c:	10a37b04 	addi	r2,r2,-29204
 20078a0:	1421883a 	add	r16,r2,r16
 20078a4:	80800017 	ldw	r2,0(r16)
 20078a8:	80c00117 	ldw	r3,4(r16)
 20078ac:	dfc00117 	ldw	ra,4(sp)
 20078b0:	dc000017 	ldw	r16,0(sp)
 20078b4:	dec00204 	addi	sp,sp,8
 20078b8:	f800283a 	ret

020078bc <__copybits>:
 20078bc:	297fffc4 	addi	r5,r5,-1
 20078c0:	280fd17a 	srai	r7,r5,5
 20078c4:	30c00417 	ldw	r3,16(r6)
 20078c8:	30800504 	addi	r2,r6,20
 20078cc:	39c00044 	addi	r7,r7,1
 20078d0:	18c7883a 	add	r3,r3,r3
 20078d4:	39cf883a 	add	r7,r7,r7
 20078d8:	18c7883a 	add	r3,r3,r3
 20078dc:	39cf883a 	add	r7,r7,r7
 20078e0:	10c7883a 	add	r3,r2,r3
 20078e4:	21cf883a 	add	r7,r4,r7
 20078e8:	10c00d2e 	bgeu	r2,r3,2007920 <__copybits+0x64>
 20078ec:	200b883a 	mov	r5,r4
 20078f0:	12000017 	ldw	r8,0(r2)
 20078f4:	29400104 	addi	r5,r5,4
 20078f8:	10800104 	addi	r2,r2,4
 20078fc:	2a3fff15 	stw	r8,-4(r5)
 2007900:	10fffb36 	bltu	r2,r3,20078f0 <__copybits+0x34>
 2007904:	1985c83a 	sub	r2,r3,r6
 2007908:	10bffac4 	addi	r2,r2,-21
 200790c:	1004d0ba 	srli	r2,r2,2
 2007910:	10800044 	addi	r2,r2,1
 2007914:	1085883a 	add	r2,r2,r2
 2007918:	1085883a 	add	r2,r2,r2
 200791c:	2089883a 	add	r4,r4,r2
 2007920:	21c0032e 	bgeu	r4,r7,2007930 <__copybits+0x74>
 2007924:	20000015 	stw	zero,0(r4)
 2007928:	21000104 	addi	r4,r4,4
 200792c:	21fffd36 	bltu	r4,r7,2007924 <__copybits+0x68>
 2007930:	f800283a 	ret

02007934 <__any_on>:
 2007934:	20c00417 	ldw	r3,16(r4)
 2007938:	2805d17a 	srai	r2,r5,5
 200793c:	21000504 	addi	r4,r4,20
 2007940:	18800d0e 	bge	r3,r2,2007978 <__any_on+0x44>
 2007944:	18c7883a 	add	r3,r3,r3
 2007948:	18c7883a 	add	r3,r3,r3
 200794c:	20c7883a 	add	r3,r4,r3
 2007950:	20c0192e 	bgeu	r4,r3,20079b8 <__any_on+0x84>
 2007954:	18bfff17 	ldw	r2,-4(r3)
 2007958:	18ffff04 	addi	r3,r3,-4
 200795c:	1000041e 	bne	r2,zero,2007970 <__any_on+0x3c>
 2007960:	20c0142e 	bgeu	r4,r3,20079b4 <__any_on+0x80>
 2007964:	18ffff04 	addi	r3,r3,-4
 2007968:	19400017 	ldw	r5,0(r3)
 200796c:	283ffc26 	beq	r5,zero,2007960 <__any_on+0x2c>
 2007970:	00800044 	movi	r2,1
 2007974:	f800283a 	ret
 2007978:	10c00a0e 	bge	r2,r3,20079a4 <__any_on+0x70>
 200797c:	1085883a 	add	r2,r2,r2
 2007980:	1085883a 	add	r2,r2,r2
 2007984:	294007cc 	andi	r5,r5,31
 2007988:	2087883a 	add	r3,r4,r2
 200798c:	283ff026 	beq	r5,zero,2007950 <__any_on+0x1c>
 2007990:	19800017 	ldw	r6,0(r3)
 2007994:	3144d83a 	srl	r2,r6,r5
 2007998:	114a983a 	sll	r5,r2,r5
 200799c:	317ff41e 	bne	r6,r5,2007970 <__any_on+0x3c>
 20079a0:	003feb06 	br	2007950 <__any_on+0x1c>
 20079a4:	1085883a 	add	r2,r2,r2
 20079a8:	1085883a 	add	r2,r2,r2
 20079ac:	2087883a 	add	r3,r4,r2
 20079b0:	003fe706 	br	2007950 <__any_on+0x1c>
 20079b4:	f800283a 	ret
 20079b8:	0005883a 	mov	r2,zero
 20079bc:	f800283a 	ret

020079c0 <_realloc_r>:
 20079c0:	defff604 	addi	sp,sp,-40
 20079c4:	dc800215 	stw	r18,8(sp)
 20079c8:	dfc00915 	stw	ra,36(sp)
 20079cc:	df000815 	stw	fp,32(sp)
 20079d0:	ddc00715 	stw	r23,28(sp)
 20079d4:	dd800615 	stw	r22,24(sp)
 20079d8:	dd400515 	stw	r21,20(sp)
 20079dc:	dd000415 	stw	r20,16(sp)
 20079e0:	dcc00315 	stw	r19,12(sp)
 20079e4:	dc400115 	stw	r17,4(sp)
 20079e8:	dc000015 	stw	r16,0(sp)
 20079ec:	3025883a 	mov	r18,r6
 20079f0:	2800b726 	beq	r5,zero,2007cd0 <_realloc_r+0x310>
 20079f4:	282b883a 	mov	r21,r5
 20079f8:	2029883a 	mov	r20,r4
 20079fc:	200e3380 	call	200e338 <__malloc_lock>
 2007a00:	a8bfff17 	ldw	r2,-4(r21)
 2007a04:	043fff04 	movi	r16,-4
 2007a08:	90c002c4 	addi	r3,r18,11
 2007a0c:	01000584 	movi	r4,22
 2007a10:	acfffe04 	addi	r19,r21,-8
 2007a14:	1420703a 	and	r16,r2,r16
 2007a18:	20c0332e 	bgeu	r4,r3,2007ae8 <_realloc_r+0x128>
 2007a1c:	047ffe04 	movi	r17,-8
 2007a20:	1c62703a 	and	r17,r3,r17
 2007a24:	8807883a 	mov	r3,r17
 2007a28:	88005816 	blt	r17,zero,2007b8c <_realloc_r+0x1cc>
 2007a2c:	8c805736 	bltu	r17,r18,2007b8c <_realloc_r+0x1cc>
 2007a30:	80c0300e 	bge	r16,r3,2007af4 <_realloc_r+0x134>
 2007a34:	070080b4 	movhi	fp,514
 2007a38:	e7257004 	addi	fp,fp,-27200
 2007a3c:	e1c00217 	ldw	r7,8(fp)
 2007a40:	9c09883a 	add	r4,r19,r16
 2007a44:	22000117 	ldw	r8,4(r4)
 2007a48:	21c06326 	beq	r4,r7,2007bd8 <_realloc_r+0x218>
 2007a4c:	017fff84 	movi	r5,-2
 2007a50:	414a703a 	and	r5,r8,r5
 2007a54:	214b883a 	add	r5,r4,r5
 2007a58:	29800117 	ldw	r6,4(r5)
 2007a5c:	3180004c 	andi	r6,r6,1
 2007a60:	30003f26 	beq	r6,zero,2007b60 <_realloc_r+0x1a0>
 2007a64:	1080004c 	andi	r2,r2,1
 2007a68:	10008326 	beq	r2,zero,2007c78 <_realloc_r+0x2b8>
 2007a6c:	900b883a 	mov	r5,r18
 2007a70:	a009883a 	mov	r4,r20
 2007a74:	2005c4c0 	call	2005c4c <_malloc_r>
 2007a78:	1025883a 	mov	r18,r2
 2007a7c:	10011e26 	beq	r2,zero,2007ef8 <_realloc_r+0x538>
 2007a80:	a93fff17 	ldw	r4,-4(r21)
 2007a84:	10fffe04 	addi	r3,r2,-8
 2007a88:	00bfff84 	movi	r2,-2
 2007a8c:	2084703a 	and	r2,r4,r2
 2007a90:	9885883a 	add	r2,r19,r2
 2007a94:	1880ee26 	beq	r3,r2,2007e50 <_realloc_r+0x490>
 2007a98:	81bfff04 	addi	r6,r16,-4
 2007a9c:	00800904 	movi	r2,36
 2007aa0:	1180b836 	bltu	r2,r6,2007d84 <_realloc_r+0x3c4>
 2007aa4:	00c004c4 	movi	r3,19
 2007aa8:	19809636 	bltu	r3,r6,2007d04 <_realloc_r+0x344>
 2007aac:	9005883a 	mov	r2,r18
 2007ab0:	a807883a 	mov	r3,r21
 2007ab4:	19000017 	ldw	r4,0(r3)
 2007ab8:	11000015 	stw	r4,0(r2)
 2007abc:	19000117 	ldw	r4,4(r3)
 2007ac0:	11000115 	stw	r4,4(r2)
 2007ac4:	18c00217 	ldw	r3,8(r3)
 2007ac8:	10c00215 	stw	r3,8(r2)
 2007acc:	a80b883a 	mov	r5,r21
 2007ad0:	a009883a 	mov	r4,r20
 2007ad4:	20050540 	call	2005054 <_free_r>
 2007ad8:	a009883a 	mov	r4,r20
 2007adc:	200e4580 	call	200e458 <__malloc_unlock>
 2007ae0:	9005883a 	mov	r2,r18
 2007ae4:	00001206 	br	2007b30 <_realloc_r+0x170>
 2007ae8:	00c00404 	movi	r3,16
 2007aec:	1823883a 	mov	r17,r3
 2007af0:	003fce06 	br	2007a2c <_realloc_r+0x6c>
 2007af4:	a825883a 	mov	r18,r21
 2007af8:	8445c83a 	sub	r2,r16,r17
 2007afc:	00c003c4 	movi	r3,15
 2007b00:	18802636 	bltu	r3,r2,2007b9c <_realloc_r+0x1dc>
 2007b04:	99800117 	ldw	r6,4(r19)
 2007b08:	9c07883a 	add	r3,r19,r16
 2007b0c:	3180004c 	andi	r6,r6,1
 2007b10:	3420b03a 	or	r16,r6,r16
 2007b14:	9c000115 	stw	r16,4(r19)
 2007b18:	18800117 	ldw	r2,4(r3)
 2007b1c:	10800054 	ori	r2,r2,1
 2007b20:	18800115 	stw	r2,4(r3)
 2007b24:	a009883a 	mov	r4,r20
 2007b28:	200e4580 	call	200e458 <__malloc_unlock>
 2007b2c:	9005883a 	mov	r2,r18
 2007b30:	dfc00917 	ldw	ra,36(sp)
 2007b34:	df000817 	ldw	fp,32(sp)
 2007b38:	ddc00717 	ldw	r23,28(sp)
 2007b3c:	dd800617 	ldw	r22,24(sp)
 2007b40:	dd400517 	ldw	r21,20(sp)
 2007b44:	dd000417 	ldw	r20,16(sp)
 2007b48:	dcc00317 	ldw	r19,12(sp)
 2007b4c:	dc800217 	ldw	r18,8(sp)
 2007b50:	dc400117 	ldw	r17,4(sp)
 2007b54:	dc000017 	ldw	r16,0(sp)
 2007b58:	dec00a04 	addi	sp,sp,40
 2007b5c:	f800283a 	ret
 2007b60:	017fff04 	movi	r5,-4
 2007b64:	414a703a 	and	r5,r8,r5
 2007b68:	814d883a 	add	r6,r16,r5
 2007b6c:	30c01f16 	blt	r6,r3,2007bec <_realloc_r+0x22c>
 2007b70:	20800317 	ldw	r2,12(r4)
 2007b74:	20c00217 	ldw	r3,8(r4)
 2007b78:	a825883a 	mov	r18,r21
 2007b7c:	3021883a 	mov	r16,r6
 2007b80:	18800315 	stw	r2,12(r3)
 2007b84:	10c00215 	stw	r3,8(r2)
 2007b88:	003fdb06 	br	2007af8 <_realloc_r+0x138>
 2007b8c:	00800304 	movi	r2,12
 2007b90:	a0800015 	stw	r2,0(r20)
 2007b94:	0005883a 	mov	r2,zero
 2007b98:	003fe506 	br	2007b30 <_realloc_r+0x170>
 2007b9c:	98c00117 	ldw	r3,4(r19)
 2007ba0:	9c4b883a 	add	r5,r19,r17
 2007ba4:	11000054 	ori	r4,r2,1
 2007ba8:	18c0004c 	andi	r3,r3,1
 2007bac:	1c62b03a 	or	r17,r3,r17
 2007bb0:	9c400115 	stw	r17,4(r19)
 2007bb4:	29000115 	stw	r4,4(r5)
 2007bb8:	2885883a 	add	r2,r5,r2
 2007bbc:	10c00117 	ldw	r3,4(r2)
 2007bc0:	29400204 	addi	r5,r5,8
 2007bc4:	a009883a 	mov	r4,r20
 2007bc8:	18c00054 	ori	r3,r3,1
 2007bcc:	10c00115 	stw	r3,4(r2)
 2007bd0:	20050540 	call	2005054 <_free_r>
 2007bd4:	003fd306 	br	2007b24 <_realloc_r+0x164>
 2007bd8:	017fff04 	movi	r5,-4
 2007bdc:	414a703a 	and	r5,r8,r5
 2007be0:	89800404 	addi	r6,r17,16
 2007be4:	8151883a 	add	r8,r16,r5
 2007be8:	4180590e 	bge	r8,r6,2007d50 <_realloc_r+0x390>
 2007bec:	1080004c 	andi	r2,r2,1
 2007bf0:	103f9e1e 	bne	r2,zero,2007a6c <_realloc_r+0xac>
 2007bf4:	adbffe17 	ldw	r22,-8(r21)
 2007bf8:	00bfff04 	movi	r2,-4
 2007bfc:	9dadc83a 	sub	r22,r19,r22
 2007c00:	b1800117 	ldw	r6,4(r22)
 2007c04:	3084703a 	and	r2,r6,r2
 2007c08:	20002026 	beq	r4,zero,2007c8c <_realloc_r+0x2cc>
 2007c0c:	80af883a 	add	r23,r16,r2
 2007c10:	b96f883a 	add	r23,r23,r5
 2007c14:	21c05f26 	beq	r4,r7,2007d94 <_realloc_r+0x3d4>
 2007c18:	b8c01c16 	blt	r23,r3,2007c8c <_realloc_r+0x2cc>
 2007c1c:	20800317 	ldw	r2,12(r4)
 2007c20:	20c00217 	ldw	r3,8(r4)
 2007c24:	81bfff04 	addi	r6,r16,-4
 2007c28:	01000904 	movi	r4,36
 2007c2c:	18800315 	stw	r2,12(r3)
 2007c30:	10c00215 	stw	r3,8(r2)
 2007c34:	b0c00217 	ldw	r3,8(r22)
 2007c38:	b0800317 	ldw	r2,12(r22)
 2007c3c:	b4800204 	addi	r18,r22,8
 2007c40:	18800315 	stw	r2,12(r3)
 2007c44:	10c00215 	stw	r3,8(r2)
 2007c48:	21801b36 	bltu	r4,r6,2007cb8 <_realloc_r+0x2f8>
 2007c4c:	008004c4 	movi	r2,19
 2007c50:	1180352e 	bgeu	r2,r6,2007d28 <_realloc_r+0x368>
 2007c54:	a8800017 	ldw	r2,0(r21)
 2007c58:	b0800215 	stw	r2,8(r22)
 2007c5c:	a8800117 	ldw	r2,4(r21)
 2007c60:	b0800315 	stw	r2,12(r22)
 2007c64:	008006c4 	movi	r2,27
 2007c68:	11807f36 	bltu	r2,r6,2007e68 <_realloc_r+0x4a8>
 2007c6c:	b0800404 	addi	r2,r22,16
 2007c70:	ad400204 	addi	r21,r21,8
 2007c74:	00002d06 	br	2007d2c <_realloc_r+0x36c>
 2007c78:	adbffe17 	ldw	r22,-8(r21)
 2007c7c:	00bfff04 	movi	r2,-4
 2007c80:	9dadc83a 	sub	r22,r19,r22
 2007c84:	b1000117 	ldw	r4,4(r22)
 2007c88:	2084703a 	and	r2,r4,r2
 2007c8c:	b03f7726 	beq	r22,zero,2007a6c <_realloc_r+0xac>
 2007c90:	80af883a 	add	r23,r16,r2
 2007c94:	b8ff7516 	blt	r23,r3,2007a6c <_realloc_r+0xac>
 2007c98:	b0800317 	ldw	r2,12(r22)
 2007c9c:	b0c00217 	ldw	r3,8(r22)
 2007ca0:	81bfff04 	addi	r6,r16,-4
 2007ca4:	01000904 	movi	r4,36
 2007ca8:	18800315 	stw	r2,12(r3)
 2007cac:	10c00215 	stw	r3,8(r2)
 2007cb0:	b4800204 	addi	r18,r22,8
 2007cb4:	21bfe52e 	bgeu	r4,r6,2007c4c <_realloc_r+0x28c>
 2007cb8:	a80b883a 	mov	r5,r21
 2007cbc:	9009883a 	mov	r4,r18
 2007cc0:	20066840 	call	2006684 <memmove>
 2007cc4:	b821883a 	mov	r16,r23
 2007cc8:	b027883a 	mov	r19,r22
 2007ccc:	003f8a06 	br	2007af8 <_realloc_r+0x138>
 2007cd0:	300b883a 	mov	r5,r6
 2007cd4:	dfc00917 	ldw	ra,36(sp)
 2007cd8:	df000817 	ldw	fp,32(sp)
 2007cdc:	ddc00717 	ldw	r23,28(sp)
 2007ce0:	dd800617 	ldw	r22,24(sp)
 2007ce4:	dd400517 	ldw	r21,20(sp)
 2007ce8:	dd000417 	ldw	r20,16(sp)
 2007cec:	dcc00317 	ldw	r19,12(sp)
 2007cf0:	dc800217 	ldw	r18,8(sp)
 2007cf4:	dc400117 	ldw	r17,4(sp)
 2007cf8:	dc000017 	ldw	r16,0(sp)
 2007cfc:	dec00a04 	addi	sp,sp,40
 2007d00:	2005c4c1 	jmpi	2005c4c <_malloc_r>
 2007d04:	a8c00017 	ldw	r3,0(r21)
 2007d08:	90c00015 	stw	r3,0(r18)
 2007d0c:	a8c00117 	ldw	r3,4(r21)
 2007d10:	90c00115 	stw	r3,4(r18)
 2007d14:	00c006c4 	movi	r3,27
 2007d18:	19804536 	bltu	r3,r6,2007e30 <_realloc_r+0x470>
 2007d1c:	90800204 	addi	r2,r18,8
 2007d20:	a8c00204 	addi	r3,r21,8
 2007d24:	003f6306 	br	2007ab4 <_realloc_r+0xf4>
 2007d28:	9005883a 	mov	r2,r18
 2007d2c:	a8c00017 	ldw	r3,0(r21)
 2007d30:	b821883a 	mov	r16,r23
 2007d34:	b027883a 	mov	r19,r22
 2007d38:	10c00015 	stw	r3,0(r2)
 2007d3c:	a8c00117 	ldw	r3,4(r21)
 2007d40:	10c00115 	stw	r3,4(r2)
 2007d44:	a8c00217 	ldw	r3,8(r21)
 2007d48:	10c00215 	stw	r3,8(r2)
 2007d4c:	003f6a06 	br	2007af8 <_realloc_r+0x138>
 2007d50:	9c67883a 	add	r19,r19,r17
 2007d54:	4445c83a 	sub	r2,r8,r17
 2007d58:	e4c00215 	stw	r19,8(fp)
 2007d5c:	10800054 	ori	r2,r2,1
 2007d60:	98800115 	stw	r2,4(r19)
 2007d64:	a8bfff17 	ldw	r2,-4(r21)
 2007d68:	a009883a 	mov	r4,r20
 2007d6c:	1080004c 	andi	r2,r2,1
 2007d70:	1462b03a 	or	r17,r2,r17
 2007d74:	ac7fff15 	stw	r17,-4(r21)
 2007d78:	200e4580 	call	200e458 <__malloc_unlock>
 2007d7c:	a805883a 	mov	r2,r21
 2007d80:	003f6b06 	br	2007b30 <_realloc_r+0x170>
 2007d84:	a80b883a 	mov	r5,r21
 2007d88:	9009883a 	mov	r4,r18
 2007d8c:	20066840 	call	2006684 <memmove>
 2007d90:	003f4e06 	br	2007acc <_realloc_r+0x10c>
 2007d94:	89000404 	addi	r4,r17,16
 2007d98:	b93fbc16 	blt	r23,r4,2007c8c <_realloc_r+0x2cc>
 2007d9c:	b0800317 	ldw	r2,12(r22)
 2007da0:	b0c00217 	ldw	r3,8(r22)
 2007da4:	81bfff04 	addi	r6,r16,-4
 2007da8:	01000904 	movi	r4,36
 2007dac:	18800315 	stw	r2,12(r3)
 2007db0:	10c00215 	stw	r3,8(r2)
 2007db4:	b4800204 	addi	r18,r22,8
 2007db8:	21804336 	bltu	r4,r6,2007ec8 <_realloc_r+0x508>
 2007dbc:	008004c4 	movi	r2,19
 2007dc0:	11803f2e 	bgeu	r2,r6,2007ec0 <_realloc_r+0x500>
 2007dc4:	a8800017 	ldw	r2,0(r21)
 2007dc8:	b0800215 	stw	r2,8(r22)
 2007dcc:	a8800117 	ldw	r2,4(r21)
 2007dd0:	b0800315 	stw	r2,12(r22)
 2007dd4:	008006c4 	movi	r2,27
 2007dd8:	11803f36 	bltu	r2,r6,2007ed8 <_realloc_r+0x518>
 2007ddc:	b0800404 	addi	r2,r22,16
 2007de0:	ad400204 	addi	r21,r21,8
 2007de4:	a8c00017 	ldw	r3,0(r21)
 2007de8:	10c00015 	stw	r3,0(r2)
 2007dec:	a8c00117 	ldw	r3,4(r21)
 2007df0:	10c00115 	stw	r3,4(r2)
 2007df4:	a8c00217 	ldw	r3,8(r21)
 2007df8:	10c00215 	stw	r3,8(r2)
 2007dfc:	b447883a 	add	r3,r22,r17
 2007e00:	bc45c83a 	sub	r2,r23,r17
 2007e04:	e0c00215 	stw	r3,8(fp)
 2007e08:	10800054 	ori	r2,r2,1
 2007e0c:	18800115 	stw	r2,4(r3)
 2007e10:	b0800117 	ldw	r2,4(r22)
 2007e14:	a009883a 	mov	r4,r20
 2007e18:	1080004c 	andi	r2,r2,1
 2007e1c:	1462b03a 	or	r17,r2,r17
 2007e20:	b4400115 	stw	r17,4(r22)
 2007e24:	200e4580 	call	200e458 <__malloc_unlock>
 2007e28:	9005883a 	mov	r2,r18
 2007e2c:	003f4006 	br	2007b30 <_realloc_r+0x170>
 2007e30:	a8c00217 	ldw	r3,8(r21)
 2007e34:	90c00215 	stw	r3,8(r18)
 2007e38:	a8c00317 	ldw	r3,12(r21)
 2007e3c:	90c00315 	stw	r3,12(r18)
 2007e40:	30801126 	beq	r6,r2,2007e88 <_realloc_r+0x4c8>
 2007e44:	90800404 	addi	r2,r18,16
 2007e48:	a8c00404 	addi	r3,r21,16
 2007e4c:	003f1906 	br	2007ab4 <_realloc_r+0xf4>
 2007e50:	90ffff17 	ldw	r3,-4(r18)
 2007e54:	00bfff04 	movi	r2,-4
 2007e58:	a825883a 	mov	r18,r21
 2007e5c:	1884703a 	and	r2,r3,r2
 2007e60:	80a1883a 	add	r16,r16,r2
 2007e64:	003f2406 	br	2007af8 <_realloc_r+0x138>
 2007e68:	a8800217 	ldw	r2,8(r21)
 2007e6c:	b0800415 	stw	r2,16(r22)
 2007e70:	a8800317 	ldw	r2,12(r21)
 2007e74:	b0800515 	stw	r2,20(r22)
 2007e78:	31000a26 	beq	r6,r4,2007ea4 <_realloc_r+0x4e4>
 2007e7c:	b0800604 	addi	r2,r22,24
 2007e80:	ad400404 	addi	r21,r21,16
 2007e84:	003fa906 	br	2007d2c <_realloc_r+0x36c>
 2007e88:	a9000417 	ldw	r4,16(r21)
 2007e8c:	90800604 	addi	r2,r18,24
 2007e90:	a8c00604 	addi	r3,r21,24
 2007e94:	91000415 	stw	r4,16(r18)
 2007e98:	a9000517 	ldw	r4,20(r21)
 2007e9c:	91000515 	stw	r4,20(r18)
 2007ea0:	003f0406 	br	2007ab4 <_realloc_r+0xf4>
 2007ea4:	a8c00417 	ldw	r3,16(r21)
 2007ea8:	ad400604 	addi	r21,r21,24
 2007eac:	b0800804 	addi	r2,r22,32
 2007eb0:	b0c00615 	stw	r3,24(r22)
 2007eb4:	a8ffff17 	ldw	r3,-4(r21)
 2007eb8:	b0c00715 	stw	r3,28(r22)
 2007ebc:	003f9b06 	br	2007d2c <_realloc_r+0x36c>
 2007ec0:	9005883a 	mov	r2,r18
 2007ec4:	003fc706 	br	2007de4 <_realloc_r+0x424>
 2007ec8:	a80b883a 	mov	r5,r21
 2007ecc:	9009883a 	mov	r4,r18
 2007ed0:	20066840 	call	2006684 <memmove>
 2007ed4:	003fc906 	br	2007dfc <_realloc_r+0x43c>
 2007ed8:	a8800217 	ldw	r2,8(r21)
 2007edc:	b0800415 	stw	r2,16(r22)
 2007ee0:	a8800317 	ldw	r2,12(r21)
 2007ee4:	b0800515 	stw	r2,20(r22)
 2007ee8:	31000726 	beq	r6,r4,2007f08 <_realloc_r+0x548>
 2007eec:	b0800604 	addi	r2,r22,24
 2007ef0:	ad400404 	addi	r21,r21,16
 2007ef4:	003fbb06 	br	2007de4 <_realloc_r+0x424>
 2007ef8:	a009883a 	mov	r4,r20
 2007efc:	200e4580 	call	200e458 <__malloc_unlock>
 2007f00:	0005883a 	mov	r2,zero
 2007f04:	003f0a06 	br	2007b30 <_realloc_r+0x170>
 2007f08:	a8c00417 	ldw	r3,16(r21)
 2007f0c:	ad400604 	addi	r21,r21,24
 2007f10:	b0800804 	addi	r2,r22,32
 2007f14:	b0c00615 	stw	r3,24(r22)
 2007f18:	a8ffff17 	ldw	r3,-4(r21)
 2007f1c:	b0c00715 	stw	r3,28(r22)
 2007f20:	003fb006 	br	2007de4 <_realloc_r+0x424>

02007f24 <__fpclassifyd>:
 2007f24:	00a00034 	movhi	r2,32768
 2007f28:	10bfffc4 	addi	r2,r2,-1
 2007f2c:	2884703a 	and	r2,r5,r2
 2007f30:	10000726 	beq	r2,zero,2007f50 <__fpclassifyd+0x2c>
 2007f34:	00fffc34 	movhi	r3,65520
 2007f38:	019ff834 	movhi	r6,32736
 2007f3c:	28c7883a 	add	r3,r5,r3
 2007f40:	31bfffc4 	addi	r6,r6,-1
 2007f44:	30c00536 	bltu	r6,r3,2007f5c <__fpclassifyd+0x38>
 2007f48:	00800104 	movi	r2,4
 2007f4c:	f800283a 	ret
 2007f50:	2000021e 	bne	r4,zero,2007f5c <__fpclassifyd+0x38>
 2007f54:	00800084 	movi	r2,2
 2007f58:	f800283a 	ret
 2007f5c:	00dffc34 	movhi	r3,32752
 2007f60:	019ff834 	movhi	r6,32736
 2007f64:	28cb883a 	add	r5,r5,r3
 2007f68:	31bfffc4 	addi	r6,r6,-1
 2007f6c:	317ff62e 	bgeu	r6,r5,2007f48 <__fpclassifyd+0x24>
 2007f70:	01400434 	movhi	r5,16
 2007f74:	297fffc4 	addi	r5,r5,-1
 2007f78:	28800236 	bltu	r5,r2,2007f84 <__fpclassifyd+0x60>
 2007f7c:	008000c4 	movi	r2,3
 2007f80:	f800283a 	ret
 2007f84:	10c00226 	beq	r2,r3,2007f90 <__fpclassifyd+0x6c>
 2007f88:	0005883a 	mov	r2,zero
 2007f8c:	f800283a 	ret
 2007f90:	2005003a 	cmpeq	r2,r4,zero
 2007f94:	f800283a 	ret

02007f98 <_sbrk_r>:
 2007f98:	defffd04 	addi	sp,sp,-12
 2007f9c:	dc000015 	stw	r16,0(sp)
 2007fa0:	040080b4 	movhi	r16,514
 2007fa4:	dc400115 	stw	r17,4(sp)
 2007fa8:	84321104 	addi	r16,r16,-14268
 2007fac:	2023883a 	mov	r17,r4
 2007fb0:	2809883a 	mov	r4,r5
 2007fb4:	dfc00215 	stw	ra,8(sp)
 2007fb8:	80000015 	stw	zero,0(r16)
 2007fbc:	200e0280 	call	200e028 <sbrk>
 2007fc0:	00ffffc4 	movi	r3,-1
 2007fc4:	10c00526 	beq	r2,r3,2007fdc <_sbrk_r+0x44>
 2007fc8:	dfc00217 	ldw	ra,8(sp)
 2007fcc:	dc400117 	ldw	r17,4(sp)
 2007fd0:	dc000017 	ldw	r16,0(sp)
 2007fd4:	dec00304 	addi	sp,sp,12
 2007fd8:	f800283a 	ret
 2007fdc:	80c00017 	ldw	r3,0(r16)
 2007fe0:	183ff926 	beq	r3,zero,2007fc8 <_sbrk_r+0x30>
 2007fe4:	88c00015 	stw	r3,0(r17)
 2007fe8:	003ff706 	br	2007fc8 <_sbrk_r+0x30>

02007fec <__sread>:
 2007fec:	defffe04 	addi	sp,sp,-8
 2007ff0:	dc000015 	stw	r16,0(sp)
 2007ff4:	2821883a 	mov	r16,r5
 2007ff8:	2940038f 	ldh	r5,14(r5)
 2007ffc:	dfc00115 	stw	ra,4(sp)
 2008000:	2009ea80 	call	2009ea8 <_read_r>
 2008004:	10000716 	blt	r2,zero,2008024 <__sread+0x38>
 2008008:	80c01417 	ldw	r3,80(r16)
 200800c:	1887883a 	add	r3,r3,r2
 2008010:	80c01415 	stw	r3,80(r16)
 2008014:	dfc00117 	ldw	ra,4(sp)
 2008018:	dc000017 	ldw	r16,0(sp)
 200801c:	dec00204 	addi	sp,sp,8
 2008020:	f800283a 	ret
 2008024:	80c0030b 	ldhu	r3,12(r16)
 2008028:	18fbffcc 	andi	r3,r3,61439
 200802c:	80c0030d 	sth	r3,12(r16)
 2008030:	dfc00117 	ldw	ra,4(sp)
 2008034:	dc000017 	ldw	r16,0(sp)
 2008038:	dec00204 	addi	sp,sp,8
 200803c:	f800283a 	ret

02008040 <__seofread>:
 2008040:	0005883a 	mov	r2,zero
 2008044:	f800283a 	ret

02008048 <__swrite>:
 2008048:	2880030b 	ldhu	r2,12(r5)
 200804c:	defffb04 	addi	sp,sp,-20
 2008050:	dcc00315 	stw	r19,12(sp)
 2008054:	dc800215 	stw	r18,8(sp)
 2008058:	dc400115 	stw	r17,4(sp)
 200805c:	dc000015 	stw	r16,0(sp)
 2008060:	dfc00415 	stw	ra,16(sp)
 2008064:	10c0400c 	andi	r3,r2,256
 2008068:	2821883a 	mov	r16,r5
 200806c:	2023883a 	mov	r17,r4
 2008070:	3025883a 	mov	r18,r6
 2008074:	3827883a 	mov	r19,r7
 2008078:	18000526 	beq	r3,zero,2008090 <__swrite+0x48>
 200807c:	2940038f 	ldh	r5,14(r5)
 2008080:	01c00084 	movi	r7,2
 2008084:	000d883a 	mov	r6,zero
 2008088:	2009e480 	call	2009e48 <_lseek_r>
 200808c:	8080030b 	ldhu	r2,12(r16)
 2008090:	8140038f 	ldh	r5,14(r16)
 2008094:	10bbffcc 	andi	r2,r2,61439
 2008098:	980f883a 	mov	r7,r19
 200809c:	900d883a 	mov	r6,r18
 20080a0:	8809883a 	mov	r4,r17
 20080a4:	8080030d 	sth	r2,12(r16)
 20080a8:	dfc00417 	ldw	ra,16(sp)
 20080ac:	dcc00317 	ldw	r19,12(sp)
 20080b0:	dc800217 	ldw	r18,8(sp)
 20080b4:	dc400117 	ldw	r17,4(sp)
 20080b8:	dc000017 	ldw	r16,0(sp)
 20080bc:	dec00504 	addi	sp,sp,20
 20080c0:	20098fc1 	jmpi	20098fc <_write_r>

020080c4 <__sseek>:
 20080c4:	defffe04 	addi	sp,sp,-8
 20080c8:	dc000015 	stw	r16,0(sp)
 20080cc:	2821883a 	mov	r16,r5
 20080d0:	2940038f 	ldh	r5,14(r5)
 20080d4:	dfc00115 	stw	ra,4(sp)
 20080d8:	2009e480 	call	2009e48 <_lseek_r>
 20080dc:	00ffffc4 	movi	r3,-1
 20080e0:	10c00826 	beq	r2,r3,2008104 <__sseek+0x40>
 20080e4:	80c0030b 	ldhu	r3,12(r16)
 20080e8:	80801415 	stw	r2,80(r16)
 20080ec:	18c40014 	ori	r3,r3,4096
 20080f0:	80c0030d 	sth	r3,12(r16)
 20080f4:	dfc00117 	ldw	ra,4(sp)
 20080f8:	dc000017 	ldw	r16,0(sp)
 20080fc:	dec00204 	addi	sp,sp,8
 2008100:	f800283a 	ret
 2008104:	80c0030b 	ldhu	r3,12(r16)
 2008108:	18fbffcc 	andi	r3,r3,61439
 200810c:	80c0030d 	sth	r3,12(r16)
 2008110:	dfc00117 	ldw	ra,4(sp)
 2008114:	dc000017 	ldw	r16,0(sp)
 2008118:	dec00204 	addi	sp,sp,8
 200811c:	f800283a 	ret

02008120 <__sclose>:
 2008120:	2940038f 	ldh	r5,14(r5)
 2008124:	200995c1 	jmpi	200995c <_close_r>

02008128 <strcmp>:
 2008128:	2144b03a 	or	r2,r4,r5
 200812c:	108000cc 	andi	r2,r2,3
 2008130:	1000171e 	bne	r2,zero,2008190 <strcmp+0x68>
 2008134:	20800017 	ldw	r2,0(r4)
 2008138:	28c00017 	ldw	r3,0(r5)
 200813c:	10c0141e 	bne	r2,r3,2008190 <strcmp+0x68>
 2008140:	027fbff4 	movhi	r9,65279
 2008144:	4a7fbfc4 	addi	r9,r9,-257
 2008148:	0086303a 	nor	r3,zero,r2
 200814c:	02202074 	movhi	r8,32897
 2008150:	1245883a 	add	r2,r2,r9
 2008154:	42202004 	addi	r8,r8,-32640
 2008158:	10c4703a 	and	r2,r2,r3
 200815c:	1204703a 	and	r2,r2,r8
 2008160:	10000226 	beq	r2,zero,200816c <strcmp+0x44>
 2008164:	00002306 	br	20081f4 <strcmp+0xcc>
 2008168:	1000221e 	bne	r2,zero,20081f4 <strcmp+0xcc>
 200816c:	21000104 	addi	r4,r4,4
 2008170:	20c00017 	ldw	r3,0(r4)
 2008174:	29400104 	addi	r5,r5,4
 2008178:	29800017 	ldw	r6,0(r5)
 200817c:	1a4f883a 	add	r7,r3,r9
 2008180:	00c4303a 	nor	r2,zero,r3
 2008184:	3884703a 	and	r2,r7,r2
 2008188:	1204703a 	and	r2,r2,r8
 200818c:	19bff626 	beq	r3,r6,2008168 <strcmp+0x40>
 2008190:	20800003 	ldbu	r2,0(r4)
 2008194:	10c03fcc 	andi	r3,r2,255
 2008198:	18c0201c 	xori	r3,r3,128
 200819c:	18ffe004 	addi	r3,r3,-128
 20081a0:	18000c26 	beq	r3,zero,20081d4 <strcmp+0xac>
 20081a4:	29800007 	ldb	r6,0(r5)
 20081a8:	19800326 	beq	r3,r6,20081b8 <strcmp+0x90>
 20081ac:	00001306 	br	20081fc <strcmp+0xd4>
 20081b0:	29800007 	ldb	r6,0(r5)
 20081b4:	11800b1e 	bne	r2,r6,20081e4 <strcmp+0xbc>
 20081b8:	21000044 	addi	r4,r4,1
 20081bc:	20c00003 	ldbu	r3,0(r4)
 20081c0:	29400044 	addi	r5,r5,1
 20081c4:	18803fcc 	andi	r2,r3,255
 20081c8:	1080201c 	xori	r2,r2,128
 20081cc:	10bfe004 	addi	r2,r2,-128
 20081d0:	103ff71e 	bne	r2,zero,20081b0 <strcmp+0x88>
 20081d4:	0007883a 	mov	r3,zero
 20081d8:	28800003 	ldbu	r2,0(r5)
 20081dc:	1885c83a 	sub	r2,r3,r2
 20081e0:	f800283a 	ret
 20081e4:	28800003 	ldbu	r2,0(r5)
 20081e8:	18c03fcc 	andi	r3,r3,255
 20081ec:	1885c83a 	sub	r2,r3,r2
 20081f0:	f800283a 	ret
 20081f4:	0005883a 	mov	r2,zero
 20081f8:	f800283a 	ret
 20081fc:	10c03fcc 	andi	r3,r2,255
 2008200:	003ff506 	br	20081d8 <strcmp+0xb0>

02008204 <__sprint_r.part.0>:
 2008204:	28801917 	ldw	r2,100(r5)
 2008208:	defff604 	addi	sp,sp,-40
 200820c:	dd400515 	stw	r21,20(sp)
 2008210:	dfc00915 	stw	ra,36(sp)
 2008214:	df000815 	stw	fp,32(sp)
 2008218:	ddc00715 	stw	r23,28(sp)
 200821c:	dd800615 	stw	r22,24(sp)
 2008220:	dd000415 	stw	r20,16(sp)
 2008224:	dcc00315 	stw	r19,12(sp)
 2008228:	dc800215 	stw	r18,8(sp)
 200822c:	dc400115 	stw	r17,4(sp)
 2008230:	dc000015 	stw	r16,0(sp)
 2008234:	1088000c 	andi	r2,r2,8192
 2008238:	302b883a 	mov	r21,r6
 200823c:	10002e26 	beq	r2,zero,20082f8 <__sprint_r.part.0+0xf4>
 2008240:	30800217 	ldw	r2,8(r6)
 2008244:	35800017 	ldw	r22,0(r6)
 2008248:	10002926 	beq	r2,zero,20082f0 <__sprint_r.part.0+0xec>
 200824c:	2827883a 	mov	r19,r5
 2008250:	2029883a 	mov	r20,r4
 2008254:	b5c00104 	addi	r23,r22,4
 2008258:	04bfffc4 	movi	r18,-1
 200825c:	bc400017 	ldw	r17,0(r23)
 2008260:	b4000017 	ldw	r16,0(r22)
 2008264:	0039883a 	mov	fp,zero
 2008268:	8822d0ba 	srli	r17,r17,2
 200826c:	8800031e 	bne	r17,zero,200827c <__sprint_r.part.0+0x78>
 2008270:	00001806 	br	20082d4 <__sprint_r.part.0+0xd0>
 2008274:	84000104 	addi	r16,r16,4
 2008278:	8f001526 	beq	r17,fp,20082d0 <__sprint_r.part.0+0xcc>
 200827c:	81400017 	ldw	r5,0(r16)
 2008280:	980d883a 	mov	r6,r19
 2008284:	a009883a 	mov	r4,r20
 2008288:	2009cf40 	call	2009cf4 <_fputwc_r>
 200828c:	e7000044 	addi	fp,fp,1
 2008290:	14bff81e 	bne	r2,r18,2008274 <__sprint_r.part.0+0x70>
 2008294:	9005883a 	mov	r2,r18
 2008298:	a8000215 	stw	zero,8(r21)
 200829c:	a8000115 	stw	zero,4(r21)
 20082a0:	dfc00917 	ldw	ra,36(sp)
 20082a4:	df000817 	ldw	fp,32(sp)
 20082a8:	ddc00717 	ldw	r23,28(sp)
 20082ac:	dd800617 	ldw	r22,24(sp)
 20082b0:	dd400517 	ldw	r21,20(sp)
 20082b4:	dd000417 	ldw	r20,16(sp)
 20082b8:	dcc00317 	ldw	r19,12(sp)
 20082bc:	dc800217 	ldw	r18,8(sp)
 20082c0:	dc400117 	ldw	r17,4(sp)
 20082c4:	dc000017 	ldw	r16,0(sp)
 20082c8:	dec00a04 	addi	sp,sp,40
 20082cc:	f800283a 	ret
 20082d0:	a8800217 	ldw	r2,8(r21)
 20082d4:	8c63883a 	add	r17,r17,r17
 20082d8:	8c63883a 	add	r17,r17,r17
 20082dc:	1445c83a 	sub	r2,r2,r17
 20082e0:	a8800215 	stw	r2,8(r21)
 20082e4:	b5800204 	addi	r22,r22,8
 20082e8:	bdc00204 	addi	r23,r23,8
 20082ec:	103fdb1e 	bne	r2,zero,200825c <__sprint_r.part.0+0x58>
 20082f0:	0005883a 	mov	r2,zero
 20082f4:	003fe806 	br	2008298 <__sprint_r.part.0+0x94>
 20082f8:	20053640 	call	2005364 <__sfvwrite_r>
 20082fc:	003fe606 	br	2008298 <__sprint_r.part.0+0x94>

02008300 <__sprint_r>:
 2008300:	30c00217 	ldw	r3,8(r6)
 2008304:	18000126 	beq	r3,zero,200830c <__sprint_r+0xc>
 2008308:	20082041 	jmpi	2008204 <__sprint_r.part.0>
 200830c:	30000115 	stw	zero,4(r6)
 2008310:	0005883a 	mov	r2,zero
 2008314:	f800283a 	ret

02008318 <___vfiprintf_internal_r>:
 2008318:	deffca04 	addi	sp,sp,-216
 200831c:	dd403115 	stw	r21,196(sp)
 2008320:	dfc03515 	stw	ra,212(sp)
 2008324:	df003415 	stw	fp,208(sp)
 2008328:	ddc03315 	stw	r23,204(sp)
 200832c:	dd803215 	stw	r22,200(sp)
 2008330:	dd003015 	stw	r20,192(sp)
 2008334:	dcc02f15 	stw	r19,188(sp)
 2008338:	dc802e15 	stw	r18,184(sp)
 200833c:	dc402d15 	stw	r17,180(sp)
 2008340:	dc002c15 	stw	r16,176(sp)
 2008344:	d9002115 	stw	r4,132(sp)
 2008348:	d9402015 	stw	r5,128(sp)
 200834c:	d9c02215 	stw	r7,136(sp)
 2008350:	302b883a 	mov	r21,r6
 2008354:	20000226 	beq	r4,zero,2008360 <___vfiprintf_internal_r+0x48>
 2008358:	20800e17 	ldw	r2,56(r4)
 200835c:	1000cf26 	beq	r2,zero,200869c <___vfiprintf_internal_r+0x384>
 2008360:	d8c02017 	ldw	r3,128(sp)
 2008364:	1880030b 	ldhu	r2,12(r3)
 2008368:	10c8000c 	andi	r3,r2,8192
 200836c:	1800071e 	bne	r3,zero,200838c <___vfiprintf_internal_r+0x74>
 2008370:	d9402017 	ldw	r5,128(sp)
 2008374:	00f7ffc4 	movi	r3,-8193
 2008378:	10880014 	ori	r2,r2,8192
 200837c:	29001917 	ldw	r4,100(r5)
 2008380:	2880030d 	sth	r2,12(r5)
 2008384:	20c6703a 	and	r3,r4,r3
 2008388:	28c01915 	stw	r3,100(r5)
 200838c:	10c0020c 	andi	r3,r2,8
 2008390:	1800a526 	beq	r3,zero,2008628 <___vfiprintf_internal_r+0x310>
 2008394:	d9002017 	ldw	r4,128(sp)
 2008398:	20c00417 	ldw	r3,16(r4)
 200839c:	1800a226 	beq	r3,zero,2008628 <___vfiprintf_internal_r+0x310>
 20083a0:	1080068c 	andi	r2,r2,26
 20083a4:	00c00284 	movi	r3,10
 20083a8:	10c0a826 	beq	r2,r3,200864c <___vfiprintf_internal_r+0x334>
 20083ac:	d9001a04 	addi	r4,sp,104
 20083b0:	d94019c4 	addi	r5,sp,103
 20083b4:	048080b4 	movhi	r18,514
 20083b8:	2145c83a 	sub	r2,r4,r5
 20083bc:	94a3ad04 	addi	r18,r18,-29004
 20083c0:	d9001e15 	stw	r4,120(sp)
 20083c4:	d9401f15 	stw	r5,124(sp)
 20083c8:	dec01a15 	stw	sp,104(sp)
 20083cc:	d8001c15 	stw	zero,112(sp)
 20083d0:	d8001b15 	stw	zero,108(sp)
 20083d4:	d811883a 	mov	r8,sp
 20083d8:	d8002615 	stw	zero,152(sp)
 20083dc:	d8002415 	stw	zero,144(sp)
 20083e0:	d8802815 	stw	r2,160(sp)
 20083e4:	a82d883a 	mov	r22,r21
 20083e8:	b0800007 	ldb	r2,0(r22)
 20083ec:	10040d26 	beq	r2,zero,2009424 <___vfiprintf_internal_r+0x110c>
 20083f0:	00c00944 	movi	r3,37
 20083f4:	b029883a 	mov	r20,r22
 20083f8:	10c0021e 	bne	r2,r3,2008404 <___vfiprintf_internal_r+0xec>
 20083fc:	00001606 	br	2008458 <___vfiprintf_internal_r+0x140>
 2008400:	10c00326 	beq	r2,r3,2008410 <___vfiprintf_internal_r+0xf8>
 2008404:	a5000044 	addi	r20,r20,1
 2008408:	a0800007 	ldb	r2,0(r20)
 200840c:	103ffc1e 	bne	r2,zero,2008400 <___vfiprintf_internal_r+0xe8>
 2008410:	a5a1c83a 	sub	r16,r20,r22
 2008414:	80001026 	beq	r16,zero,2008458 <___vfiprintf_internal_r+0x140>
 2008418:	d8c01c17 	ldw	r3,112(sp)
 200841c:	d8801b17 	ldw	r2,108(sp)
 2008420:	45800015 	stw	r22,0(r8)
 2008424:	80c7883a 	add	r3,r16,r3
 2008428:	10800044 	addi	r2,r2,1
 200842c:	44000115 	stw	r16,4(r8)
 2008430:	d8c01c15 	stw	r3,112(sp)
 2008434:	d8801b15 	stw	r2,108(sp)
 2008438:	010001c4 	movi	r4,7
 200843c:	2080750e 	bge	r4,r2,2008614 <___vfiprintf_internal_r+0x2fc>
 2008440:	1803951e 	bne	r3,zero,2009298 <___vfiprintf_internal_r+0xf80>
 2008444:	d8c02417 	ldw	r3,144(sp)
 2008448:	d8001b15 	stw	zero,108(sp)
 200844c:	d811883a 	mov	r8,sp
 2008450:	1c07883a 	add	r3,r3,r16
 2008454:	d8c02415 	stw	r3,144(sp)
 2008458:	a0800007 	ldb	r2,0(r20)
 200845c:	1002e026 	beq	r2,zero,2008fe0 <___vfiprintf_internal_r+0xcc8>
 2008460:	a5800044 	addi	r22,r20,1
 2008464:	a0c00047 	ldb	r3,1(r20)
 2008468:	d8001d85 	stb	zero,118(sp)
 200846c:	0027883a 	mov	r19,zero
 2008470:	d8002305 	stb	zero,140(sp)
 2008474:	043fffc4 	movi	r16,-1
 2008478:	d8002515 	stw	zero,148(sp)
 200847c:	0023883a 	mov	r17,zero
 2008480:	05001604 	movi	r20,88
 2008484:	05400244 	movi	r21,9
 2008488:	402f883a 	mov	r23,r8
 200848c:	b5800044 	addi	r22,r22,1
 2008490:	18bff804 	addi	r2,r3,-32
 2008494:	a0827736 	bltu	r20,r2,2008e74 <___vfiprintf_internal_r+0xb5c>
 2008498:	100490ba 	slli	r2,r2,2
 200849c:	01008074 	movhi	r4,513
 20084a0:	21212c04 	addi	r4,r4,-31568
 20084a4:	1105883a 	add	r2,r2,r4
 20084a8:	10800017 	ldw	r2,0(r2)
 20084ac:	1000683a 	jmp	r2
 20084b0:	02008b74 	movhi	r8,557
 20084b4:	02008e74 	movhi	r8,569
 20084b8:	02008e74 	movhi	r8,569
 20084bc:	02008b90 	cmplti	r8,zero,558
 20084c0:	02008e74 	movhi	r8,569
 20084c4:	02008e74 	movhi	r8,569
 20084c8:	02008e74 	movhi	r8,569
 20084cc:	02008e74 	movhi	r8,569
 20084d0:	02008e74 	movhi	r8,569
 20084d4:	02008e74 	movhi	r8,569
 20084d8:	02008d98 	cmpnei	r8,zero,566
 20084dc:	02008dbc 	xorhi	r8,zero,566
 20084e0:	02008e74 	movhi	r8,569
 20084e4:	020086b4 	movhi	r8,538
 20084e8:	02008dd0 	cmplti	r8,zero,567
 20084ec:	02008e74 	movhi	r8,569
 20084f0:	02008b9c 	xori	r8,zero,558
 20084f4:	02008ba8 	cmpgeui	r8,zero,558
 20084f8:	02008ba8 	cmpgeui	r8,zero,558
 20084fc:	02008ba8 	cmpgeui	r8,zero,558
 2008500:	02008ba8 	cmpgeui	r8,zero,558
 2008504:	02008ba8 	cmpgeui	r8,zero,558
 2008508:	02008ba8 	cmpgeui	r8,zero,558
 200850c:	02008ba8 	cmpgeui	r8,zero,558
 2008510:	02008ba8 	cmpgeui	r8,zero,558
 2008514:	02008ba8 	cmpgeui	r8,zero,558
 2008518:	02008e74 	movhi	r8,569
 200851c:	02008e74 	movhi	r8,569
 2008520:	02008e74 	movhi	r8,569
 2008524:	02008e74 	movhi	r8,569
 2008528:	02008e74 	movhi	r8,569
 200852c:	02008e74 	movhi	r8,569
 2008530:	02008e74 	movhi	r8,569
 2008534:	02008e74 	movhi	r8,569
 2008538:	02008e74 	movhi	r8,569
 200853c:	02008e74 	movhi	r8,569
 2008540:	02008be8 	cmpgeui	r8,zero,559
 2008544:	02008e74 	movhi	r8,569
 2008548:	02008e74 	movhi	r8,569
 200854c:	02008e74 	movhi	r8,569
 2008550:	02008e74 	movhi	r8,569
 2008554:	02008e74 	movhi	r8,569
 2008558:	02008e74 	movhi	r8,569
 200855c:	02008e74 	movhi	r8,569
 2008560:	02008e74 	movhi	r8,569
 2008564:	02008e74 	movhi	r8,569
 2008568:	02008e74 	movhi	r8,569
 200856c:	02008c24 	muli	r8,zero,560
 2008570:	02008e74 	movhi	r8,569
 2008574:	02008e74 	movhi	r8,569
 2008578:	02008e74 	movhi	r8,569
 200857c:	02008e74 	movhi	r8,569
 2008580:	02008e74 	movhi	r8,569
 2008584:	02008c80 	call	2008c8 <__alt_mem_mem_Nios_PI+0x8c8>
 2008588:	02008e74 	movhi	r8,569
 200858c:	02008e74 	movhi	r8,569
 2008590:	02008cf4 	movhi	r8,563
 2008594:	02008e74 	movhi	r8,569
 2008598:	02008e74 	movhi	r8,569
 200859c:	02008e74 	movhi	r8,569
 20085a0:	02008e74 	movhi	r8,569
 20085a4:	02008e74 	movhi	r8,569
 20085a8:	02008e74 	movhi	r8,569
 20085ac:	02008e74 	movhi	r8,569
 20085b0:	02008e74 	movhi	r8,569
 20085b4:	02008e74 	movhi	r8,569
 20085b8:	02008e74 	movhi	r8,569
 20085bc:	02008a9c 	xori	r8,zero,554
 20085c0:	02008acc 	andi	r8,zero,555
 20085c4:	02008e74 	movhi	r8,569
 20085c8:	02008e74 	movhi	r8,569
 20085cc:	02008e74 	movhi	r8,569
 20085d0:	02008e1c 	xori	r8,zero,568
 20085d4:	02008acc 	andi	r8,zero,555
 20085d8:	02008e74 	movhi	r8,569
 20085dc:	02008e74 	movhi	r8,569
 20085e0:	02008974 	movhi	r8,549
 20085e4:	02008e74 	movhi	r8,569
 20085e8:	02008988 	cmpgei	r8,zero,550
 20085ec:	020089c0 	call	20089c <__alt_mem_mem_Nios_PI+0x89c>
 20085f0:	020086c0 	call	20086c <__alt_mem_mem_Nios_PI+0x86c>
 20085f4:	02008968 	cmpgeui	r8,zero,549
 20085f8:	02008e74 	movhi	r8,569
 20085fc:	02008d34 	movhi	r8,564
 2008600:	02008e74 	movhi	r8,569
 2008604:	02008d80 	call	2008d8 <__alt_mem_mem_Nios_PI+0x8d8>
 2008608:	02008e74 	movhi	r8,569
 200860c:	02008e74 	movhi	r8,569
 2008610:	02008a44 	movi	r8,553
 2008614:	42000204 	addi	r8,r8,8
 2008618:	d8c02417 	ldw	r3,144(sp)
 200861c:	1c07883a 	add	r3,r3,r16
 2008620:	d8c02415 	stw	r3,144(sp)
 2008624:	003f8c06 	br	2008458 <___vfiprintf_internal_r+0x140>
 2008628:	d9402017 	ldw	r5,128(sp)
 200862c:	d9002117 	ldw	r4,132(sp)
 2008630:	2002ed40 	call	2002ed4 <__swsetup_r>
 2008634:	1003c11e 	bne	r2,zero,200953c <___vfiprintf_internal_r+0x1224>
 2008638:	d9402017 	ldw	r5,128(sp)
 200863c:	00c00284 	movi	r3,10
 2008640:	2880030b 	ldhu	r2,12(r5)
 2008644:	1080068c 	andi	r2,r2,26
 2008648:	10ff581e 	bne	r2,r3,20083ac <___vfiprintf_internal_r+0x94>
 200864c:	d8c02017 	ldw	r3,128(sp)
 2008650:	1880038f 	ldh	r2,14(r3)
 2008654:	103f5516 	blt	r2,zero,20083ac <___vfiprintf_internal_r+0x94>
 2008658:	d9c02217 	ldw	r7,136(sp)
 200865c:	d9002117 	ldw	r4,132(sp)
 2008660:	a80d883a 	mov	r6,r21
 2008664:	180b883a 	mov	r5,r3
 2008668:	20098400 	call	2009840 <__sbprintf>
 200866c:	dfc03517 	ldw	ra,212(sp)
 2008670:	df003417 	ldw	fp,208(sp)
 2008674:	ddc03317 	ldw	r23,204(sp)
 2008678:	dd803217 	ldw	r22,200(sp)
 200867c:	dd403117 	ldw	r21,196(sp)
 2008680:	dd003017 	ldw	r20,192(sp)
 2008684:	dcc02f17 	ldw	r19,188(sp)
 2008688:	dc802e17 	ldw	r18,184(sp)
 200868c:	dc402d17 	ldw	r17,180(sp)
 2008690:	dc002c17 	ldw	r16,176(sp)
 2008694:	dec03604 	addi	sp,sp,216
 2008698:	f800283a 	ret
 200869c:	2004ee00 	call	2004ee0 <__sinit>
 20086a0:	003f2f06 	br	2008360 <___vfiprintf_internal_r+0x48>
 20086a4:	d8c02517 	ldw	r3,148(sp)
 20086a8:	d8802215 	stw	r2,136(sp)
 20086ac:	00c7c83a 	sub	r3,zero,r3
 20086b0:	d8c02515 	stw	r3,148(sp)
 20086b4:	8c400114 	ori	r17,r17,4
 20086b8:	b0c00007 	ldb	r3,0(r22)
 20086bc:	003f7306 	br	200848c <___vfiprintf_internal_r+0x174>
 20086c0:	00800c04 	movi	r2,48
 20086c4:	d9402217 	ldw	r5,136(sp)
 20086c8:	d8801d05 	stb	r2,116(sp)
 20086cc:	00801e04 	movi	r2,120
 20086d0:	d8801d45 	stb	r2,117(sp)
 20086d4:	d8001d85 	stb	zero,118(sp)
 20086d8:	b811883a 	mov	r8,r23
 20086dc:	28c00104 	addi	r3,r5,4
 20086e0:	2cc00017 	ldw	r19,0(r5)
 20086e4:	0029883a 	mov	r20,zero
 20086e8:	88800094 	ori	r2,r17,2
 20086ec:	80032516 	blt	r16,zero,2009384 <___vfiprintf_internal_r+0x106c>
 20086f0:	00bfdfc4 	movi	r2,-129
 20086f4:	88a2703a 	and	r17,r17,r2
 20086f8:	d8c02215 	stw	r3,136(sp)
 20086fc:	8c400094 	ori	r17,r17,2
 2008700:	98032a1e 	bne	r19,zero,20093ac <___vfiprintf_internal_r+0x1094>
 2008704:	008080b4 	movhi	r2,514
 2008708:	10a34c04 	addi	r2,r2,-29392
 200870c:	d8802615 	stw	r2,152(sp)
 2008710:	002b883a 	mov	r21,zero
 2008714:	8001741e 	bne	r16,zero,2008ce8 <___vfiprintf_internal_r+0x9d0>
 2008718:	0021883a 	mov	r16,zero
 200871c:	0029883a 	mov	r20,zero
 2008720:	ddc01a04 	addi	r23,sp,104
 2008724:	8027883a 	mov	r19,r16
 2008728:	8500010e 	bge	r16,r20,2008730 <___vfiprintf_internal_r+0x418>
 200872c:	a027883a 	mov	r19,r20
 2008730:	ad403fcc 	andi	r21,r21,255
 2008734:	ad40201c 	xori	r21,r21,128
 2008738:	ad7fe004 	addi	r21,r21,-128
 200873c:	a8000126 	beq	r21,zero,2008744 <___vfiprintf_internal_r+0x42c>
 2008740:	9cc00044 	addi	r19,r19,1
 2008744:	89c0008c 	andi	r7,r17,2
 2008748:	38000126 	beq	r7,zero,2008750 <___vfiprintf_internal_r+0x438>
 200874c:	9cc00084 	addi	r19,r19,2
 2008750:	88c0210c 	andi	r3,r17,132
 2008754:	1801dd1e 	bne	r3,zero,2008ecc <___vfiprintf_internal_r+0xbb4>
 2008758:	d9402517 	ldw	r5,148(sp)
 200875c:	2cebc83a 	sub	r21,r5,r19
 2008760:	0541da0e 	bge	zero,r21,2008ecc <___vfiprintf_internal_r+0xbb4>
 2008764:	07000404 	movi	fp,16
 2008768:	d8801c17 	ldw	r2,112(sp)
 200876c:	e543be0e 	bge	fp,r21,2009668 <___vfiprintf_internal_r+0x1350>
 2008770:	014080b4 	movhi	r5,514
 2008774:	2963b104 	addi	r5,r5,-28988
 2008778:	dc002715 	stw	r16,156(sp)
 200877c:	d9801b17 	ldw	r6,108(sp)
 2008780:	a821883a 	mov	r16,r21
 2008784:	d9402315 	stw	r5,140(sp)
 2008788:	028001c4 	movi	r10,7
 200878c:	d9c02915 	stw	r7,164(sp)
 2008790:	182b883a 	mov	r21,r3
 2008794:	00000506 	br	20087ac <___vfiprintf_internal_r+0x494>
 2008798:	31000084 	addi	r4,r6,2
 200879c:	42000204 	addi	r8,r8,8
 20087a0:	180d883a 	mov	r6,r3
 20087a4:	843ffc04 	addi	r16,r16,-16
 20087a8:	e4000f0e 	bge	fp,r16,20087e8 <___vfiprintf_internal_r+0x4d0>
 20087ac:	010080b4 	movhi	r4,514
 20087b0:	10800404 	addi	r2,r2,16
 20087b4:	30c00044 	addi	r3,r6,1
 20087b8:	2123b104 	addi	r4,r4,-28988
 20087bc:	41000015 	stw	r4,0(r8)
 20087c0:	47000115 	stw	fp,4(r8)
 20087c4:	d8801c15 	stw	r2,112(sp)
 20087c8:	d8c01b15 	stw	r3,108(sp)
 20087cc:	50fff20e 	bge	r10,r3,2008798 <___vfiprintf_internal_r+0x480>
 20087d0:	1001b21e 	bne	r2,zero,2008e9c <___vfiprintf_internal_r+0xb84>
 20087d4:	843ffc04 	addi	r16,r16,-16
 20087d8:	000d883a 	mov	r6,zero
 20087dc:	01000044 	movi	r4,1
 20087e0:	d811883a 	mov	r8,sp
 20087e4:	e43ff116 	blt	fp,r16,20087ac <___vfiprintf_internal_r+0x494>
 20087e8:	a807883a 	mov	r3,r21
 20087ec:	d9c02917 	ldw	r7,164(sp)
 20087f0:	802b883a 	mov	r21,r16
 20087f4:	dc002717 	ldw	r16,156(sp)
 20087f8:	d9402317 	ldw	r5,140(sp)
 20087fc:	a885883a 	add	r2,r21,r2
 2008800:	45400115 	stw	r21,4(r8)
 2008804:	41400015 	stw	r5,0(r8)
 2008808:	d8801c15 	stw	r2,112(sp)
 200880c:	d9001b15 	stw	r4,108(sp)
 2008810:	014001c4 	movi	r5,7
 2008814:	29026216 	blt	r5,r4,20091a0 <___vfiprintf_internal_r+0xe88>
 2008818:	d9801d87 	ldb	r6,118(sp)
 200881c:	42000204 	addi	r8,r8,8
 2008820:	21400044 	addi	r5,r4,1
 2008824:	3001ae1e 	bne	r6,zero,2008ee0 <___vfiprintf_internal_r+0xbc8>
 2008828:	3801bb26 	beq	r7,zero,2008f18 <___vfiprintf_internal_r+0xc00>
 200882c:	d9001d04 	addi	r4,sp,116
 2008830:	10800084 	addi	r2,r2,2
 2008834:	41000015 	stw	r4,0(r8)
 2008838:	01000084 	movi	r4,2
 200883c:	41000115 	stw	r4,4(r8)
 2008840:	d8801c15 	stw	r2,112(sp)
 2008844:	d9401b15 	stw	r5,108(sp)
 2008848:	010001c4 	movi	r4,7
 200884c:	2142680e 	bge	r4,r5,20091f0 <___vfiprintf_internal_r+0xed8>
 2008850:	1002b11e 	bne	r2,zero,2009318 <___vfiprintf_internal_r+0x1000>
 2008854:	01802004 	movi	r6,128
 2008858:	01400044 	movi	r5,1
 200885c:	0009883a 	mov	r4,zero
 2008860:	d811883a 	mov	r8,sp
 2008864:	1981ae1e 	bne	r3,r6,2008f20 <___vfiprintf_internal_r+0xc08>
 2008868:	d8c02517 	ldw	r3,148(sp)
 200886c:	1cf9c83a 	sub	fp,r3,r19
 2008870:	0701ab0e 	bge	zero,fp,2008f20 <___vfiprintf_internal_r+0xc08>
 2008874:	05400404 	movi	r21,16
 2008878:	af03a90e 	bge	r21,fp,2009720 <___vfiprintf_internal_r+0x1408>
 200887c:	014080b4 	movhi	r5,514
 2008880:	2963ad04 	addi	r5,r5,-29004
 2008884:	d9402315 	stw	r5,140(sp)
 2008888:	01c001c4 	movi	r7,7
 200888c:	00000506 	br	20088a4 <___vfiprintf_internal_r+0x58c>
 2008890:	21800084 	addi	r6,r4,2
 2008894:	42000204 	addi	r8,r8,8
 2008898:	1809883a 	mov	r4,r3
 200889c:	e73ffc04 	addi	fp,fp,-16
 20088a0:	af000d0e 	bge	r21,fp,20088d8 <___vfiprintf_internal_r+0x5c0>
 20088a4:	10800404 	addi	r2,r2,16
 20088a8:	20c00044 	addi	r3,r4,1
 20088ac:	44800015 	stw	r18,0(r8)
 20088b0:	45400115 	stw	r21,4(r8)
 20088b4:	d8801c15 	stw	r2,112(sp)
 20088b8:	d8c01b15 	stw	r3,108(sp)
 20088bc:	38fff40e 	bge	r7,r3,2008890 <___vfiprintf_internal_r+0x578>
 20088c0:	10022b1e 	bne	r2,zero,2009170 <___vfiprintf_internal_r+0xe58>
 20088c4:	e73ffc04 	addi	fp,fp,-16
 20088c8:	01800044 	movi	r6,1
 20088cc:	0009883a 	mov	r4,zero
 20088d0:	d811883a 	mov	r8,sp
 20088d4:	af3ff316 	blt	r21,fp,20088a4 <___vfiprintf_internal_r+0x58c>
 20088d8:	d8c02317 	ldw	r3,140(sp)
 20088dc:	1705883a 	add	r2,r2,fp
 20088e0:	47000115 	stw	fp,4(r8)
 20088e4:	40c00015 	stw	r3,0(r8)
 20088e8:	d8801c15 	stw	r2,112(sp)
 20088ec:	d9801b15 	stw	r6,108(sp)
 20088f0:	00c001c4 	movi	r3,7
 20088f4:	19829416 	blt	r3,r6,2009348 <___vfiprintf_internal_r+0x1030>
 20088f8:	8521c83a 	sub	r16,r16,r20
 20088fc:	42000204 	addi	r8,r8,8
 2008900:	31400044 	addi	r5,r6,1
 2008904:	3009883a 	mov	r4,r6
 2008908:	04018716 	blt	zero,r16,2008f28 <___vfiprintf_internal_r+0xc10>
 200890c:	a085883a 	add	r2,r20,r2
 2008910:	45c00015 	stw	r23,0(r8)
 2008914:	45000115 	stw	r20,4(r8)
 2008918:	d8801c15 	stw	r2,112(sp)
 200891c:	d9401b15 	stw	r5,108(sp)
 2008920:	00c001c4 	movi	r3,7
 2008924:	1941c20e 	bge	r3,r5,2009030 <___vfiprintf_internal_r+0xd18>
 2008928:	1002531e 	bne	r2,zero,2009278 <___vfiprintf_internal_r+0xf60>
 200892c:	d8001b15 	stw	zero,108(sp)
 2008930:	8c40010c 	andi	r17,r17,4
 2008934:	88023226 	beq	r17,zero,2009200 <___vfiprintf_internal_r+0xee8>
 2008938:	d9002517 	ldw	r4,148(sp)
 200893c:	24e3c83a 	sub	r17,r4,r19
 2008940:	04432916 	blt	zero,r17,20095e8 <___vfiprintf_internal_r+0x12d0>
 2008944:	d8802517 	ldw	r2,148(sp)
 2008948:	14c0010e 	bge	r2,r19,2008950 <___vfiprintf_internal_r+0x638>
 200894c:	9805883a 	mov	r2,r19
 2008950:	d8c02417 	ldw	r3,144(sp)
 2008954:	1887883a 	add	r3,r3,r2
 2008958:	d8c02415 	stw	r3,144(sp)
 200895c:	d8001b15 	stw	zero,108(sp)
 2008960:	d811883a 	mov	r8,sp
 2008964:	003ea006 	br	20083e8 <___vfiprintf_internal_r+0xd0>
 2008968:	8c400814 	ori	r17,r17,32
 200896c:	b0c00007 	ldb	r3,0(r22)
 2008970:	003ec606 	br	200848c <___vfiprintf_internal_r+0x174>
 2008974:	b0c00007 	ldb	r3,0(r22)
 2008978:	00801b04 	movi	r2,108
 200897c:	18832026 	beq	r3,r2,2009600 <___vfiprintf_internal_r+0x12e8>
 2008980:	8c400414 	ori	r17,r17,16
 2008984:	003ec106 	br	200848c <___vfiprintf_internal_r+0x174>
 2008988:	9cc03fcc 	andi	r19,r19,255
 200898c:	b811883a 	mov	r8,r23
 2008990:	9803981e 	bne	r19,zero,20097f4 <___vfiprintf_internal_r+0x14dc>
 2008994:	8880080c 	andi	r2,r17,32
 2008998:	1002be26 	beq	r2,zero,2009494 <___vfiprintf_internal_r+0x117c>
 200899c:	d9002217 	ldw	r4,136(sp)
 20089a0:	d9402417 	ldw	r5,144(sp)
 20089a4:	20800017 	ldw	r2,0(r4)
 20089a8:	2807d7fa 	srai	r3,r5,31
 20089ac:	21000104 	addi	r4,r4,4
 20089b0:	d9002215 	stw	r4,136(sp)
 20089b4:	11400015 	stw	r5,0(r2)
 20089b8:	10c00115 	stw	r3,4(r2)
 20089bc:	003e8a06 	br	20083e8 <___vfiprintf_internal_r+0xd0>
 20089c0:	9cc03fcc 	andi	r19,r19,255
 20089c4:	b811883a 	mov	r8,r23
 20089c8:	9803871e 	bne	r19,zero,20097e8 <___vfiprintf_internal_r+0x14d0>
 20089cc:	8880080c 	andi	r2,r17,32
 20089d0:	10009a26 	beq	r2,zero,2008c3c <___vfiprintf_internal_r+0x924>
 20089d4:	d9002217 	ldw	r4,136(sp)
 20089d8:	d8001d85 	stb	zero,118(sp)
 20089dc:	20800204 	addi	r2,r4,8
 20089e0:	24c00017 	ldw	r19,0(r4)
 20089e4:	25000117 	ldw	r20,4(r4)
 20089e8:	8002a416 	blt	r16,zero,200947c <___vfiprintf_internal_r+0x1164>
 20089ec:	013fdfc4 	movi	r4,-129
 20089f0:	9d06b03a 	or	r3,r19,r20
 20089f4:	d8802215 	stw	r2,136(sp)
 20089f8:	8922703a 	and	r17,r17,r4
 20089fc:	18009b26 	beq	r3,zero,2008c6c <___vfiprintf_internal_r+0x954>
 2008a00:	002b883a 	mov	r21,zero
 2008a04:	ddc01a04 	addi	r23,sp,104
 2008a08:	9806d0fa 	srli	r3,r19,3
 2008a0c:	a008977a 	slli	r4,r20,29
 2008a10:	a028d0fa 	srli	r20,r20,3
 2008a14:	9cc001cc 	andi	r19,r19,7
 2008a18:	98800c04 	addi	r2,r19,48
 2008a1c:	bdffffc4 	addi	r23,r23,-1
 2008a20:	20e6b03a 	or	r19,r4,r3
 2008a24:	b8800005 	stb	r2,0(r23)
 2008a28:	9d06b03a 	or	r3,r19,r20
 2008a2c:	183ff61e 	bne	r3,zero,2008a08 <___vfiprintf_internal_r+0x6f0>
 2008a30:	88c0004c 	andi	r3,r17,1
 2008a34:	18021f1e 	bne	r3,zero,20092b4 <___vfiprintf_internal_r+0xf9c>
 2008a38:	d9401e17 	ldw	r5,120(sp)
 2008a3c:	2de9c83a 	sub	r20,r5,r23
 2008a40:	003f3806 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2008a44:	9cc03fcc 	andi	r19,r19,255
 2008a48:	b811883a 	mov	r8,r23
 2008a4c:	98034f1e 	bne	r19,zero,200978c <___vfiprintf_internal_r+0x1474>
 2008a50:	008080b4 	movhi	r2,514
 2008a54:	10a34c04 	addi	r2,r2,-29392
 2008a58:	d8802615 	stw	r2,152(sp)
 2008a5c:	8880080c 	andi	r2,r17,32
 2008a60:	1000ac26 	beq	r2,zero,2008d14 <___vfiprintf_internal_r+0x9fc>
 2008a64:	d9002217 	ldw	r4,136(sp)
 2008a68:	24c00017 	ldw	r19,0(r4)
 2008a6c:	25000117 	ldw	r20,4(r4)
 2008a70:	21000204 	addi	r4,r4,8
 2008a74:	d9002215 	stw	r4,136(sp)
 2008a78:	8880004c 	andi	r2,r17,1
 2008a7c:	1001e726 	beq	r2,zero,200921c <___vfiprintf_internal_r+0xf04>
 2008a80:	9d04b03a 	or	r2,r19,r20
 2008a84:	10025c1e 	bne	r2,zero,20093f8 <___vfiprintf_internal_r+0x10e0>
 2008a88:	d8001d85 	stb	zero,118(sp)
 2008a8c:	80024416 	blt	r16,zero,20093a0 <___vfiprintf_internal_r+0x1088>
 2008a90:	00bfdfc4 	movi	r2,-129
 2008a94:	88a2703a 	and	r17,r17,r2
 2008a98:	003f1d06 	br	2008710 <___vfiprintf_internal_r+0x3f8>
 2008a9c:	d8c02217 	ldw	r3,136(sp)
 2008aa0:	04c00044 	movi	r19,1
 2008aa4:	b811883a 	mov	r8,r23
 2008aa8:	18800017 	ldw	r2,0(r3)
 2008aac:	18c00104 	addi	r3,r3,4
 2008ab0:	d8001d85 	stb	zero,118(sp)
 2008ab4:	d8801005 	stb	r2,64(sp)
 2008ab8:	d8c02215 	stw	r3,136(sp)
 2008abc:	9829883a 	mov	r20,r19
 2008ac0:	ddc01004 	addi	r23,sp,64
 2008ac4:	0021883a 	mov	r16,zero
 2008ac8:	003f1e06 	br	2008744 <___vfiprintf_internal_r+0x42c>
 2008acc:	9cc03fcc 	andi	r19,r19,255
 2008ad0:	b811883a 	mov	r8,r23
 2008ad4:	9803331e 	bne	r19,zero,20097a4 <___vfiprintf_internal_r+0x148c>
 2008ad8:	8880080c 	andi	r2,r17,32
 2008adc:	10004826 	beq	r2,zero,2008c00 <___vfiprintf_internal_r+0x8e8>
 2008ae0:	d9002217 	ldw	r4,136(sp)
 2008ae4:	20800117 	ldw	r2,4(r4)
 2008ae8:	24c00017 	ldw	r19,0(r4)
 2008aec:	21000204 	addi	r4,r4,8
 2008af0:	d9002215 	stw	r4,136(sp)
 2008af4:	1029883a 	mov	r20,r2
 2008af8:	10024c16 	blt	r2,zero,200942c <___vfiprintf_internal_r+0x1114>
 2008afc:	dd401d83 	ldbu	r21,118(sp)
 2008b00:	80007116 	blt	r16,zero,2008cc8 <___vfiprintf_internal_r+0x9b0>
 2008b04:	00ffdfc4 	movi	r3,-129
 2008b08:	9d04b03a 	or	r2,r19,r20
 2008b0c:	88e2703a 	and	r17,r17,r3
 2008b10:	1000d126 	beq	r2,zero,2008e58 <___vfiprintf_internal_r+0xb40>
 2008b14:	a0023526 	beq	r20,zero,20093ec <___vfiprintf_internal_r+0x10d4>
 2008b18:	ddc01a04 	addi	r23,sp,104
 2008b1c:	4039883a 	mov	fp,r8
 2008b20:	9809883a 	mov	r4,r19
 2008b24:	a00b883a 	mov	r5,r20
 2008b28:	01800284 	movi	r6,10
 2008b2c:	000f883a 	mov	r7,zero
 2008b30:	200a8440 	call	200a844 <__umoddi3>
 2008b34:	10800c04 	addi	r2,r2,48
 2008b38:	bdffffc4 	addi	r23,r23,-1
 2008b3c:	9809883a 	mov	r4,r19
 2008b40:	a00b883a 	mov	r5,r20
 2008b44:	b8800005 	stb	r2,0(r23)
 2008b48:	01800284 	movi	r6,10
 2008b4c:	000f883a 	mov	r7,zero
 2008b50:	200a2480 	call	200a248 <__udivdi3>
 2008b54:	1027883a 	mov	r19,r2
 2008b58:	10c4b03a 	or	r2,r2,r3
 2008b5c:	1829883a 	mov	r20,r3
 2008b60:	103fef1e 	bne	r2,zero,2008b20 <___vfiprintf_internal_r+0x808>
 2008b64:	d9001e17 	ldw	r4,120(sp)
 2008b68:	e011883a 	mov	r8,fp
 2008b6c:	25e9c83a 	sub	r20,r4,r23
 2008b70:	003eec06 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2008b74:	d8802307 	ldb	r2,140(sp)
 2008b78:	1002361e 	bne	r2,zero,2009454 <___vfiprintf_internal_r+0x113c>
 2008b7c:	00c00804 	movi	r3,32
 2008b80:	d8c02305 	stb	r3,140(sp)
 2008b84:	04c00044 	movi	r19,1
 2008b88:	b0c00007 	ldb	r3,0(r22)
 2008b8c:	003e3f06 	br	200848c <___vfiprintf_internal_r+0x174>
 2008b90:	8c400054 	ori	r17,r17,1
 2008b94:	b0c00007 	ldb	r3,0(r22)
 2008b98:	003e3c06 	br	200848c <___vfiprintf_internal_r+0x174>
 2008b9c:	8c402014 	ori	r17,r17,128
 2008ba0:	b0c00007 	ldb	r3,0(r22)
 2008ba4:	003e3906 	br	200848c <___vfiprintf_internal_r+0x174>
 2008ba8:	dc002715 	stw	r16,156(sp)
 2008bac:	d8002515 	stw	zero,148(sp)
 2008bb0:	1f3ff404 	addi	fp,r3,-48
 2008bb4:	0009883a 	mov	r4,zero
 2008bb8:	b021883a 	mov	r16,r22
 2008bbc:	01400284 	movi	r5,10
 2008bc0:	200afbc0 	call	200afbc <__mulsi3>
 2008bc4:	80c00007 	ldb	r3,0(r16)
 2008bc8:	e089883a 	add	r4,fp,r2
 2008bcc:	b5800044 	addi	r22,r22,1
 2008bd0:	1f3ff404 	addi	fp,r3,-48
 2008bd4:	b021883a 	mov	r16,r22
 2008bd8:	af3ff82e 	bgeu	r21,fp,2008bbc <___vfiprintf_internal_r+0x8a4>
 2008bdc:	d9002515 	stw	r4,148(sp)
 2008be0:	dc002717 	ldw	r16,156(sp)
 2008be4:	003e2a06 	br	2008490 <___vfiprintf_internal_r+0x178>
 2008be8:	9cc03fcc 	andi	r19,r19,255
 2008bec:	b811883a 	mov	r8,r23
 2008bf0:	9802e91e 	bne	r19,zero,2009798 <___vfiprintf_internal_r+0x1480>
 2008bf4:	8c400414 	ori	r17,r17,16
 2008bf8:	8880080c 	andi	r2,r17,32
 2008bfc:	103fb81e 	bne	r2,zero,2008ae0 <___vfiprintf_internal_r+0x7c8>
 2008c00:	8880040c 	andi	r2,r17,16
 2008c04:	10022e26 	beq	r2,zero,20094c0 <___vfiprintf_internal_r+0x11a8>
 2008c08:	d9402217 	ldw	r5,136(sp)
 2008c0c:	2cc00017 	ldw	r19,0(r5)
 2008c10:	29400104 	addi	r5,r5,4
 2008c14:	d9402215 	stw	r5,136(sp)
 2008c18:	9829d7fa 	srai	r20,r19,31
 2008c1c:	a005883a 	mov	r2,r20
 2008c20:	003fb506 	br	2008af8 <___vfiprintf_internal_r+0x7e0>
 2008c24:	9cc03fcc 	andi	r19,r19,255
 2008c28:	b811883a 	mov	r8,r23
 2008c2c:	9802fa1e 	bne	r19,zero,2009818 <___vfiprintf_internal_r+0x1500>
 2008c30:	8c400414 	ori	r17,r17,16
 2008c34:	8880080c 	andi	r2,r17,32
 2008c38:	103f661e 	bne	r2,zero,20089d4 <___vfiprintf_internal_r+0x6bc>
 2008c3c:	8880040c 	andi	r2,r17,16
 2008c40:	10020626 	beq	r2,zero,200945c <___vfiprintf_internal_r+0x1144>
 2008c44:	d9402217 	ldw	r5,136(sp)
 2008c48:	d8001d85 	stb	zero,118(sp)
 2008c4c:	0029883a 	mov	r20,zero
 2008c50:	28800104 	addi	r2,r5,4
 2008c54:	2cc00017 	ldw	r19,0(r5)
 2008c58:	80020816 	blt	r16,zero,200947c <___vfiprintf_internal_r+0x1164>
 2008c5c:	00ffdfc4 	movi	r3,-129
 2008c60:	d8802215 	stw	r2,136(sp)
 2008c64:	88e2703a 	and	r17,r17,r3
 2008c68:	983f651e 	bne	r19,zero,2008a00 <___vfiprintf_internal_r+0x6e8>
 2008c6c:	002b883a 	mov	r21,zero
 2008c70:	8002cf26 	beq	r16,zero,20097b0 <___vfiprintf_internal_r+0x1498>
 2008c74:	0027883a 	mov	r19,zero
 2008c78:	0029883a 	mov	r20,zero
 2008c7c:	003f6106 	br	2008a04 <___vfiprintf_internal_r+0x6ec>
 2008c80:	9cc03fcc 	andi	r19,r19,255
 2008c84:	b811883a 	mov	r8,r23
 2008c88:	9802e01e 	bne	r19,zero,200980c <___vfiprintf_internal_r+0x14f4>
 2008c8c:	8c400414 	ori	r17,r17,16
 2008c90:	8880080c 	andi	r2,r17,32
 2008c94:	1000641e 	bne	r2,zero,2008e28 <___vfiprintf_internal_r+0xb10>
 2008c98:	8880040c 	andi	r2,r17,16
 2008c9c:	1001c81e 	bne	r2,zero,20093c0 <___vfiprintf_internal_r+0x10a8>
 2008ca0:	8880100c 	andi	r2,r17,64
 2008ca4:	d8001d85 	stb	zero,118(sp)
 2008ca8:	1002281e 	bne	r2,zero,200954c <___vfiprintf_internal_r+0x1234>
 2008cac:	d9002217 	ldw	r4,136(sp)
 2008cb0:	0029883a 	mov	r20,zero
 2008cb4:	20800104 	addi	r2,r4,4
 2008cb8:	24c00017 	ldw	r19,0(r4)
 2008cbc:	8001c60e 	bge	r16,zero,20093d8 <___vfiprintf_internal_r+0x10c0>
 2008cc0:	d8802215 	stw	r2,136(sp)
 2008cc4:	002b883a 	mov	r21,zero
 2008cc8:	9d04b03a 	or	r2,r19,r20
 2008ccc:	103f911e 	bne	r2,zero,2008b14 <___vfiprintf_internal_r+0x7fc>
 2008cd0:	00800044 	movi	r2,1
 2008cd4:	10803fcc 	andi	r2,r2,255
 2008cd8:	00c00044 	movi	r3,1
 2008cdc:	10c05f26 	beq	r2,r3,2008e5c <___vfiprintf_internal_r+0xb44>
 2008ce0:	00c00084 	movi	r3,2
 2008ce4:	10ffe31e 	bne	r2,r3,2008c74 <___vfiprintf_internal_r+0x95c>
 2008ce8:	0027883a 	mov	r19,zero
 2008cec:	0029883a 	mov	r20,zero
 2008cf0:	00015106 	br	2009238 <___vfiprintf_internal_r+0xf20>
 2008cf4:	9cc03fcc 	andi	r19,r19,255
 2008cf8:	b811883a 	mov	r8,r23
 2008cfc:	9802c01e 	bne	r19,zero,2009800 <___vfiprintf_internal_r+0x14e8>
 2008d00:	014080b4 	movhi	r5,514
 2008d04:	29634704 	addi	r5,r5,-29412
 2008d08:	d9402615 	stw	r5,152(sp)
 2008d0c:	8880080c 	andi	r2,r17,32
 2008d10:	103f541e 	bne	r2,zero,2008a64 <___vfiprintf_internal_r+0x74c>
 2008d14:	8880040c 	andi	r2,r17,16
 2008d18:	1001f226 	beq	r2,zero,20094e4 <___vfiprintf_internal_r+0x11cc>
 2008d1c:	d9402217 	ldw	r5,136(sp)
 2008d20:	0029883a 	mov	r20,zero
 2008d24:	2cc00017 	ldw	r19,0(r5)
 2008d28:	29400104 	addi	r5,r5,4
 2008d2c:	d9402215 	stw	r5,136(sp)
 2008d30:	003f5106 	br	2008a78 <___vfiprintf_internal_r+0x760>
 2008d34:	d8c02217 	ldw	r3,136(sp)
 2008d38:	b811883a 	mov	r8,r23
 2008d3c:	d8001d85 	stb	zero,118(sp)
 2008d40:	1dc00017 	ldw	r23,0(r3)
 2008d44:	1f000104 	addi	fp,r3,4
 2008d48:	b8025926 	beq	r23,zero,20096b0 <___vfiprintf_internal_r+0x1398>
 2008d4c:	80023316 	blt	r16,zero,200961c <___vfiprintf_internal_r+0x1304>
 2008d50:	800d883a 	mov	r6,r16
 2008d54:	000b883a 	mov	r5,zero
 2008d58:	b809883a 	mov	r4,r23
 2008d5c:	da002a15 	stw	r8,168(sp)
 2008d60:	20064580 	call	2006458 <memchr>
 2008d64:	da002a17 	ldw	r8,168(sp)
 2008d68:	10026826 	beq	r2,zero,200970c <___vfiprintf_internal_r+0x13f4>
 2008d6c:	15e9c83a 	sub	r20,r2,r23
 2008d70:	dd401d83 	ldbu	r21,118(sp)
 2008d74:	df002215 	stw	fp,136(sp)
 2008d78:	0021883a 	mov	r16,zero
 2008d7c:	003e6906 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2008d80:	9cc03fcc 	andi	r19,r19,255
 2008d84:	b811883a 	mov	r8,r23
 2008d88:	983fc126 	beq	r19,zero,2008c90 <___vfiprintf_internal_r+0x978>
 2008d8c:	d8c02303 	ldbu	r3,140(sp)
 2008d90:	d8c01d85 	stb	r3,118(sp)
 2008d94:	003fbe06 	br	2008c90 <___vfiprintf_internal_r+0x978>
 2008d98:	d9002217 	ldw	r4,136(sp)
 2008d9c:	d9402217 	ldw	r5,136(sp)
 2008da0:	21000017 	ldw	r4,0(r4)
 2008da4:	28800104 	addi	r2,r5,4
 2008da8:	d9002515 	stw	r4,148(sp)
 2008dac:	203e3d16 	blt	r4,zero,20086a4 <___vfiprintf_internal_r+0x38c>
 2008db0:	d8802215 	stw	r2,136(sp)
 2008db4:	b0c00007 	ldb	r3,0(r22)
 2008db8:	003db406 	br	200848c <___vfiprintf_internal_r+0x174>
 2008dbc:	00c00ac4 	movi	r3,43
 2008dc0:	d8c02305 	stb	r3,140(sp)
 2008dc4:	04c00044 	movi	r19,1
 2008dc8:	b0c00007 	ldb	r3,0(r22)
 2008dcc:	003daf06 	br	200848c <___vfiprintf_internal_r+0x174>
 2008dd0:	b0c00007 	ldb	r3,0(r22)
 2008dd4:	01000a84 	movi	r4,42
 2008dd8:	b4000044 	addi	r16,r22,1
 2008ddc:	19025e26 	beq	r3,r4,2009758 <___vfiprintf_internal_r+0x1440>
 2008de0:	1f3ff404 	addi	fp,r3,-48
 2008de4:	0009883a 	mov	r4,zero
 2008de8:	af025236 	bltu	r21,fp,2009734 <___vfiprintf_internal_r+0x141c>
 2008dec:	01400284 	movi	r5,10
 2008df0:	200afbc0 	call	200afbc <__mulsi3>
 2008df4:	80c00007 	ldb	r3,0(r16)
 2008df8:	1709883a 	add	r4,r2,fp
 2008dfc:	85800044 	addi	r22,r16,1
 2008e00:	1f3ff404 	addi	fp,r3,-48
 2008e04:	b021883a 	mov	r16,r22
 2008e08:	af3ff82e 	bgeu	r21,fp,2008dec <___vfiprintf_internal_r+0xad4>
 2008e0c:	2021883a 	mov	r16,r4
 2008e10:	203d9f0e 	bge	r4,zero,2008490 <___vfiprintf_internal_r+0x178>
 2008e14:	043fffc4 	movi	r16,-1
 2008e18:	003d9d06 	br	2008490 <___vfiprintf_internal_r+0x178>
 2008e1c:	8c401014 	ori	r17,r17,64
 2008e20:	b0c00007 	ldb	r3,0(r22)
 2008e24:	003d9906 	br	200848c <___vfiprintf_internal_r+0x174>
 2008e28:	d9002217 	ldw	r4,136(sp)
 2008e2c:	d8001d85 	stb	zero,118(sp)
 2008e30:	20c00204 	addi	r3,r4,8
 2008e34:	24c00017 	ldw	r19,0(r4)
 2008e38:	25000117 	ldw	r20,4(r4)
 2008e3c:	8001e716 	blt	r16,zero,20095dc <___vfiprintf_internal_r+0x12c4>
 2008e40:	013fdfc4 	movi	r4,-129
 2008e44:	9d04b03a 	or	r2,r19,r20
 2008e48:	d8c02215 	stw	r3,136(sp)
 2008e4c:	8922703a 	and	r17,r17,r4
 2008e50:	002b883a 	mov	r21,zero
 2008e54:	103f2f1e 	bne	r2,zero,2008b14 <___vfiprintf_internal_r+0x7fc>
 2008e58:	803e2f26 	beq	r16,zero,2008718 <___vfiprintf_internal_r+0x400>
 2008e5c:	0027883a 	mov	r19,zero
 2008e60:	9cc00c04 	addi	r19,r19,48
 2008e64:	dcc019c5 	stb	r19,103(sp)
 2008e68:	dd002817 	ldw	r20,160(sp)
 2008e6c:	ddc019c4 	addi	r23,sp,103
 2008e70:	003e2c06 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2008e74:	9cc03fcc 	andi	r19,r19,255
 2008e78:	b811883a 	mov	r8,r23
 2008e7c:	9802571e 	bne	r19,zero,20097dc <___vfiprintf_internal_r+0x14c4>
 2008e80:	18005726 	beq	r3,zero,2008fe0 <___vfiprintf_internal_r+0xcc8>
 2008e84:	04c00044 	movi	r19,1
 2008e88:	d8c01005 	stb	r3,64(sp)
 2008e8c:	d8001d85 	stb	zero,118(sp)
 2008e90:	9829883a 	mov	r20,r19
 2008e94:	ddc01004 	addi	r23,sp,64
 2008e98:	003f0a06 	br	2008ac4 <___vfiprintf_internal_r+0x7ac>
 2008e9c:	d9402017 	ldw	r5,128(sp)
 2008ea0:	d9002117 	ldw	r4,132(sp)
 2008ea4:	d9801a04 	addi	r6,sp,104
 2008ea8:	da802a15 	stw	r10,168(sp)
 2008eac:	20082040 	call	2008204 <__sprint_r.part.0>
 2008eb0:	da802a17 	ldw	r10,168(sp)
 2008eb4:	1000501e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2008eb8:	d9801b17 	ldw	r6,108(sp)
 2008ebc:	d8801c17 	ldw	r2,112(sp)
 2008ec0:	d811883a 	mov	r8,sp
 2008ec4:	31000044 	addi	r4,r6,1
 2008ec8:	003e3606 	br	20087a4 <___vfiprintf_internal_r+0x48c>
 2008ecc:	d9001b17 	ldw	r4,108(sp)
 2008ed0:	d8801c17 	ldw	r2,112(sp)
 2008ed4:	21400044 	addi	r5,r4,1
 2008ed8:	d9801d87 	ldb	r6,118(sp)
 2008edc:	303e5226 	beq	r6,zero,2008828 <___vfiprintf_internal_r+0x510>
 2008ee0:	01800044 	movi	r6,1
 2008ee4:	d9001d84 	addi	r4,sp,118
 2008ee8:	1185883a 	add	r2,r2,r6
 2008eec:	41000015 	stw	r4,0(r8)
 2008ef0:	41800115 	stw	r6,4(r8)
 2008ef4:	d8801c15 	stw	r2,112(sp)
 2008ef8:	d9401b15 	stw	r5,108(sp)
 2008efc:	010001c4 	movi	r4,7
 2008f00:	2140b00e 	bge	r4,r5,20091c4 <___vfiprintf_internal_r+0xeac>
 2008f04:	1000f61e 	bne	r2,zero,20092e0 <___vfiprintf_internal_r+0xfc8>
 2008f08:	3800b31e 	bne	r7,zero,20091d8 <___vfiprintf_internal_r+0xec0>
 2008f0c:	0009883a 	mov	r4,zero
 2008f10:	300b883a 	mov	r5,r6
 2008f14:	d811883a 	mov	r8,sp
 2008f18:	01802004 	movi	r6,128
 2008f1c:	19be5226 	beq	r3,r6,2008868 <___vfiprintf_internal_r+0x550>
 2008f20:	8521c83a 	sub	r16,r16,r20
 2008f24:	043e790e 	bge	zero,r16,200890c <___vfiprintf_internal_r+0x5f4>
 2008f28:	05400404 	movi	r21,16
 2008f2c:	ac01b00e 	bge	r21,r16,20095f0 <___vfiprintf_internal_r+0x12d8>
 2008f30:	014080b4 	movhi	r5,514
 2008f34:	2963ad04 	addi	r5,r5,-29004
 2008f38:	d9402315 	stw	r5,140(sp)
 2008f3c:	070001c4 	movi	fp,7
 2008f40:	00000506 	br	2008f58 <___vfiprintf_internal_r+0xc40>
 2008f44:	21400084 	addi	r5,r4,2
 2008f48:	42000204 	addi	r8,r8,8
 2008f4c:	1809883a 	mov	r4,r3
 2008f50:	843ffc04 	addi	r16,r16,-16
 2008f54:	ac000d0e 	bge	r21,r16,2008f8c <___vfiprintf_internal_r+0xc74>
 2008f58:	10800404 	addi	r2,r2,16
 2008f5c:	20c00044 	addi	r3,r4,1
 2008f60:	44800015 	stw	r18,0(r8)
 2008f64:	45400115 	stw	r21,4(r8)
 2008f68:	d8801c15 	stw	r2,112(sp)
 2008f6c:	d8c01b15 	stw	r3,108(sp)
 2008f70:	e0fff40e 	bge	fp,r3,2008f44 <___vfiprintf_internal_r+0xc2c>
 2008f74:	1000101e 	bne	r2,zero,2008fb8 <___vfiprintf_internal_r+0xca0>
 2008f78:	843ffc04 	addi	r16,r16,-16
 2008f7c:	01400044 	movi	r5,1
 2008f80:	0009883a 	mov	r4,zero
 2008f84:	d811883a 	mov	r8,sp
 2008f88:	ac3ff316 	blt	r21,r16,2008f58 <___vfiprintf_internal_r+0xc40>
 2008f8c:	d8c02317 	ldw	r3,140(sp)
 2008f90:	1405883a 	add	r2,r2,r16
 2008f94:	44000115 	stw	r16,4(r8)
 2008f98:	40c00015 	stw	r3,0(r8)
 2008f9c:	d8801c15 	stw	r2,112(sp)
 2008fa0:	d9401b15 	stw	r5,108(sp)
 2008fa4:	00c001c4 	movi	r3,7
 2008fa8:	19401916 	blt	r3,r5,2009010 <___vfiprintf_internal_r+0xcf8>
 2008fac:	42000204 	addi	r8,r8,8
 2008fb0:	29400044 	addi	r5,r5,1
 2008fb4:	003e5506 	br	200890c <___vfiprintf_internal_r+0x5f4>
 2008fb8:	d9402017 	ldw	r5,128(sp)
 2008fbc:	d9002117 	ldw	r4,132(sp)
 2008fc0:	d9801a04 	addi	r6,sp,104
 2008fc4:	20082040 	call	2008204 <__sprint_r.part.0>
 2008fc8:	10000b1e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2008fcc:	d9001b17 	ldw	r4,108(sp)
 2008fd0:	d8801c17 	ldw	r2,112(sp)
 2008fd4:	d811883a 	mov	r8,sp
 2008fd8:	21400044 	addi	r5,r4,1
 2008fdc:	003fdc06 	br	2008f50 <___vfiprintf_internal_r+0xc38>
 2008fe0:	d8801c17 	ldw	r2,112(sp)
 2008fe4:	10000426 	beq	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2008fe8:	d9402017 	ldw	r5,128(sp)
 2008fec:	d9002117 	ldw	r4,132(sp)
 2008ff0:	d9801a04 	addi	r6,sp,104
 2008ff4:	20082040 	call	2008204 <__sprint_r.part.0>
 2008ff8:	d9402017 	ldw	r5,128(sp)
 2008ffc:	2880030b 	ldhu	r2,12(r5)
 2009000:	1080100c 	andi	r2,r2,64
 2009004:	10014d1e 	bne	r2,zero,200953c <___vfiprintf_internal_r+0x1224>
 2009008:	d8802417 	ldw	r2,144(sp)
 200900c:	003d9706 	br	200866c <___vfiprintf_internal_r+0x354>
 2009010:	1000d21e 	bne	r2,zero,200935c <___vfiprintf_internal_r+0x1044>
 2009014:	00c00044 	movi	r3,1
 2009018:	a005883a 	mov	r2,r20
 200901c:	ddc00015 	stw	r23,0(sp)
 2009020:	dd000115 	stw	r20,4(sp)
 2009024:	dd001c15 	stw	r20,112(sp)
 2009028:	d8c01b15 	stw	r3,108(sp)
 200902c:	d811883a 	mov	r8,sp
 2009030:	42000204 	addi	r8,r8,8
 2009034:	8c40010c 	andi	r17,r17,4
 2009038:	88004026 	beq	r17,zero,200913c <___vfiprintf_internal_r+0xe24>
 200903c:	d9002517 	ldw	r4,148(sp)
 2009040:	24e3c83a 	sub	r17,r4,r19
 2009044:	04403d0e 	bge	zero,r17,200913c <___vfiprintf_internal_r+0xe24>
 2009048:	04000404 	movi	r16,16
 200904c:	8441a90e 	bge	r16,r17,20096f4 <___vfiprintf_internal_r+0x13dc>
 2009050:	00c080b4 	movhi	r3,514
 2009054:	18e3b104 	addi	r3,r3,-28988
 2009058:	d9001b17 	ldw	r4,108(sp)
 200905c:	d8c02315 	stw	r3,140(sp)
 2009060:	050001c4 	movi	r20,7
 2009064:	dd402117 	ldw	r21,132(sp)
 2009068:	ddc02017 	ldw	r23,128(sp)
 200906c:	00000506 	br	2009084 <___vfiprintf_internal_r+0xd6c>
 2009070:	21400084 	addi	r5,r4,2
 2009074:	42000204 	addi	r8,r8,8
 2009078:	1809883a 	mov	r4,r3
 200907c:	8c7ffc04 	addi	r17,r17,-16
 2009080:	84400f0e 	bge	r16,r17,20090c0 <___vfiprintf_internal_r+0xda8>
 2009084:	014080b4 	movhi	r5,514
 2009088:	10800404 	addi	r2,r2,16
 200908c:	20c00044 	addi	r3,r4,1
 2009090:	2963b104 	addi	r5,r5,-28988
 2009094:	41400015 	stw	r5,0(r8)
 2009098:	44000115 	stw	r16,4(r8)
 200909c:	d8801c15 	stw	r2,112(sp)
 20090a0:	d8c01b15 	stw	r3,108(sp)
 20090a4:	a0fff20e 	bge	r20,r3,2009070 <___vfiprintf_internal_r+0xd58>
 20090a8:	1000141e 	bne	r2,zero,20090fc <___vfiprintf_internal_r+0xde4>
 20090ac:	8c7ffc04 	addi	r17,r17,-16
 20090b0:	01400044 	movi	r5,1
 20090b4:	0009883a 	mov	r4,zero
 20090b8:	d811883a 	mov	r8,sp
 20090bc:	847ff116 	blt	r16,r17,2009084 <___vfiprintf_internal_r+0xd6c>
 20090c0:	d8c02317 	ldw	r3,140(sp)
 20090c4:	1445883a 	add	r2,r2,r17
 20090c8:	44400115 	stw	r17,4(r8)
 20090cc:	40c00015 	stw	r3,0(r8)
 20090d0:	d8801c15 	stw	r2,112(sp)
 20090d4:	d9401b15 	stw	r5,108(sp)
 20090d8:	00c001c4 	movi	r3,7
 20090dc:	1940170e 	bge	r3,r5,200913c <___vfiprintf_internal_r+0xe24>
 20090e0:	1000101e 	bne	r2,zero,2009124 <___vfiprintf_internal_r+0xe0c>
 20090e4:	d8802517 	ldw	r2,148(sp)
 20090e8:	14c11616 	blt	r2,r19,2009544 <___vfiprintf_internal_r+0x122c>
 20090ec:	d9002417 	ldw	r4,144(sp)
 20090f0:	2089883a 	add	r4,r4,r2
 20090f4:	d9002415 	stw	r4,144(sp)
 20090f8:	003e1806 	br	200895c <___vfiprintf_internal_r+0x644>
 20090fc:	d9801a04 	addi	r6,sp,104
 2009100:	b80b883a 	mov	r5,r23
 2009104:	a809883a 	mov	r4,r21
 2009108:	20082040 	call	2008204 <__sprint_r.part.0>
 200910c:	103fba1e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009110:	d9001b17 	ldw	r4,108(sp)
 2009114:	d8801c17 	ldw	r2,112(sp)
 2009118:	d811883a 	mov	r8,sp
 200911c:	21400044 	addi	r5,r4,1
 2009120:	003fd606 	br	200907c <___vfiprintf_internal_r+0xd64>
 2009124:	d9402017 	ldw	r5,128(sp)
 2009128:	d9002117 	ldw	r4,132(sp)
 200912c:	d9801a04 	addi	r6,sp,104
 2009130:	20082040 	call	2008204 <__sprint_r.part.0>
 2009134:	103fb01e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009138:	d8801c17 	ldw	r2,112(sp)
 200913c:	d8c02517 	ldw	r3,148(sp)
 2009140:	1cc0010e 	bge	r3,r19,2009148 <___vfiprintf_internal_r+0xe30>
 2009144:	9807883a 	mov	r3,r19
 2009148:	d9002417 	ldw	r4,144(sp)
 200914c:	20c9883a 	add	r4,r4,r3
 2009150:	d9002415 	stw	r4,144(sp)
 2009154:	103e0126 	beq	r2,zero,200895c <___vfiprintf_internal_r+0x644>
 2009158:	d9402017 	ldw	r5,128(sp)
 200915c:	d9002117 	ldw	r4,132(sp)
 2009160:	d9801a04 	addi	r6,sp,104
 2009164:	20082040 	call	2008204 <__sprint_r.part.0>
 2009168:	103dfc26 	beq	r2,zero,200895c <___vfiprintf_internal_r+0x644>
 200916c:	003fa206 	br	2008ff8 <___vfiprintf_internal_r+0xce0>
 2009170:	d9402017 	ldw	r5,128(sp)
 2009174:	d9002117 	ldw	r4,132(sp)
 2009178:	d9801a04 	addi	r6,sp,104
 200917c:	d9c02b15 	stw	r7,172(sp)
 2009180:	20082040 	call	2008204 <__sprint_r.part.0>
 2009184:	d9c02b17 	ldw	r7,172(sp)
 2009188:	103f9b1e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 200918c:	d9001b17 	ldw	r4,108(sp)
 2009190:	d8801c17 	ldw	r2,112(sp)
 2009194:	d811883a 	mov	r8,sp
 2009198:	21800044 	addi	r6,r4,1
 200919c:	003dbf06 	br	200889c <___vfiprintf_internal_r+0x584>
 20091a0:	1000d81e 	bne	r2,zero,2009504 <___vfiprintf_internal_r+0x11ec>
 20091a4:	d9001d87 	ldb	r4,118(sp)
 20091a8:	20000a26 	beq	r4,zero,20091d4 <___vfiprintf_internal_r+0xebc>
 20091ac:	00800044 	movi	r2,1
 20091b0:	d9001d84 	addi	r4,sp,118
 20091b4:	100b883a 	mov	r5,r2
 20091b8:	d9000015 	stw	r4,0(sp)
 20091bc:	d8800115 	stw	r2,4(sp)
 20091c0:	d811883a 	mov	r8,sp
 20091c4:	2809883a 	mov	r4,r5
 20091c8:	42000204 	addi	r8,r8,8
 20091cc:	29400044 	addi	r5,r5,1
 20091d0:	003d9506 	br	2008828 <___vfiprintf_internal_r+0x510>
 20091d4:	3800fd26 	beq	r7,zero,20095cc <___vfiprintf_internal_r+0x12b4>
 20091d8:	00800084 	movi	r2,2
 20091dc:	d9001d04 	addi	r4,sp,116
 20091e0:	d9000015 	stw	r4,0(sp)
 20091e4:	d8800115 	stw	r2,4(sp)
 20091e8:	01400044 	movi	r5,1
 20091ec:	d811883a 	mov	r8,sp
 20091f0:	2809883a 	mov	r4,r5
 20091f4:	42000204 	addi	r8,r8,8
 20091f8:	29400044 	addi	r5,r5,1
 20091fc:	003f4606 	br	2008f18 <___vfiprintf_internal_r+0xc00>
 2009200:	d8802517 	ldw	r2,148(sp)
 2009204:	14c0010e 	bge	r2,r19,200920c <___vfiprintf_internal_r+0xef4>
 2009208:	9805883a 	mov	r2,r19
 200920c:	d9402417 	ldw	r5,144(sp)
 2009210:	288b883a 	add	r5,r5,r2
 2009214:	d9402415 	stw	r5,144(sp)
 2009218:	003dd006 	br	200895c <___vfiprintf_internal_r+0x644>
 200921c:	d8001d85 	stb	zero,118(sp)
 2009220:	80005d16 	blt	r16,zero,2009398 <___vfiprintf_internal_r+0x1080>
 2009224:	00ffdfc4 	movi	r3,-129
 2009228:	9d04b03a 	or	r2,r19,r20
 200922c:	88e2703a 	and	r17,r17,r3
 2009230:	103d3726 	beq	r2,zero,2008710 <___vfiprintf_internal_r+0x3f8>
 2009234:	002b883a 	mov	r21,zero
 2009238:	d9002617 	ldw	r4,152(sp)
 200923c:	ddc01a04 	addi	r23,sp,104
 2009240:	988003cc 	andi	r2,r19,15
 2009244:	a006973a 	slli	r3,r20,28
 2009248:	2085883a 	add	r2,r4,r2
 200924c:	9826d13a 	srli	r19,r19,4
 2009250:	10800003 	ldbu	r2,0(r2)
 2009254:	a028d13a 	srli	r20,r20,4
 2009258:	bdffffc4 	addi	r23,r23,-1
 200925c:	1ce6b03a 	or	r19,r3,r19
 2009260:	b8800005 	stb	r2,0(r23)
 2009264:	9d04b03a 	or	r2,r19,r20
 2009268:	103ff51e 	bne	r2,zero,2009240 <___vfiprintf_internal_r+0xf28>
 200926c:	d8801e17 	ldw	r2,120(sp)
 2009270:	15e9c83a 	sub	r20,r2,r23
 2009274:	003d2b06 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2009278:	d9402017 	ldw	r5,128(sp)
 200927c:	d9002117 	ldw	r4,132(sp)
 2009280:	d9801a04 	addi	r6,sp,104
 2009284:	20082040 	call	2008204 <__sprint_r.part.0>
 2009288:	103f5b1e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 200928c:	d8801c17 	ldw	r2,112(sp)
 2009290:	d811883a 	mov	r8,sp
 2009294:	003f6706 	br	2009034 <___vfiprintf_internal_r+0xd1c>
 2009298:	d9402017 	ldw	r5,128(sp)
 200929c:	d9002117 	ldw	r4,132(sp)
 20092a0:	d9801a04 	addi	r6,sp,104
 20092a4:	20082040 	call	2008204 <__sprint_r.part.0>
 20092a8:	103f531e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 20092ac:	d811883a 	mov	r8,sp
 20092b0:	003cd906 	br	2008618 <___vfiprintf_internal_r+0x300>
 20092b4:	10803fcc 	andi	r2,r2,255
 20092b8:	1080201c 	xori	r2,r2,128
 20092bc:	10bfe004 	addi	r2,r2,-128
 20092c0:	00c00c04 	movi	r3,48
 20092c4:	10ffe926 	beq	r2,r3,200926c <___vfiprintf_internal_r+0xf54>
 20092c8:	b8ffffc5 	stb	r3,-1(r23)
 20092cc:	d8c01e17 	ldw	r3,120(sp)
 20092d0:	b8bfffc4 	addi	r2,r23,-1
 20092d4:	102f883a 	mov	r23,r2
 20092d8:	18a9c83a 	sub	r20,r3,r2
 20092dc:	003d1106 	br	2008724 <___vfiprintf_internal_r+0x40c>
 20092e0:	d9402017 	ldw	r5,128(sp)
 20092e4:	d9002117 	ldw	r4,132(sp)
 20092e8:	d9801a04 	addi	r6,sp,104
 20092ec:	d8c02a15 	stw	r3,168(sp)
 20092f0:	d9c02b15 	stw	r7,172(sp)
 20092f4:	20082040 	call	2008204 <__sprint_r.part.0>
 20092f8:	d8c02a17 	ldw	r3,168(sp)
 20092fc:	d9c02b17 	ldw	r7,172(sp)
 2009300:	103f3d1e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009304:	d9001b17 	ldw	r4,108(sp)
 2009308:	d8801c17 	ldw	r2,112(sp)
 200930c:	d811883a 	mov	r8,sp
 2009310:	21400044 	addi	r5,r4,1
 2009314:	003d4406 	br	2008828 <___vfiprintf_internal_r+0x510>
 2009318:	d9402017 	ldw	r5,128(sp)
 200931c:	d9002117 	ldw	r4,132(sp)
 2009320:	d9801a04 	addi	r6,sp,104
 2009324:	d8c02a15 	stw	r3,168(sp)
 2009328:	20082040 	call	2008204 <__sprint_r.part.0>
 200932c:	d8c02a17 	ldw	r3,168(sp)
 2009330:	103f311e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009334:	d9001b17 	ldw	r4,108(sp)
 2009338:	d8801c17 	ldw	r2,112(sp)
 200933c:	d811883a 	mov	r8,sp
 2009340:	21400044 	addi	r5,r4,1
 2009344:	003ef406 	br	2008f18 <___vfiprintf_internal_r+0xc00>
 2009348:	1000bd1e 	bne	r2,zero,2009640 <___vfiprintf_internal_r+0x1328>
 200934c:	01400044 	movi	r5,1
 2009350:	0009883a 	mov	r4,zero
 2009354:	d811883a 	mov	r8,sp
 2009358:	003ef106 	br	2008f20 <___vfiprintf_internal_r+0xc08>
 200935c:	d9402017 	ldw	r5,128(sp)
 2009360:	d9002117 	ldw	r4,132(sp)
 2009364:	d9801a04 	addi	r6,sp,104
 2009368:	20082040 	call	2008204 <__sprint_r.part.0>
 200936c:	103f221e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009370:	d9401b17 	ldw	r5,108(sp)
 2009374:	d8801c17 	ldw	r2,112(sp)
 2009378:	d811883a 	mov	r8,sp
 200937c:	29400044 	addi	r5,r5,1
 2009380:	003d6206 	br	200890c <___vfiprintf_internal_r+0x5f4>
 2009384:	014080b4 	movhi	r5,514
 2009388:	29634c04 	addi	r5,r5,-29392
 200938c:	d9402615 	stw	r5,152(sp)
 2009390:	d8c02215 	stw	r3,136(sp)
 2009394:	1023883a 	mov	r17,r2
 2009398:	9d04b03a 	or	r2,r19,r20
 200939c:	103fa51e 	bne	r2,zero,2009234 <___vfiprintf_internal_r+0xf1c>
 20093a0:	002b883a 	mov	r21,zero
 20093a4:	00800084 	movi	r2,2
 20093a8:	003e4a06 	br	2008cd4 <___vfiprintf_internal_r+0x9bc>
 20093ac:	014080b4 	movhi	r5,514
 20093b0:	29634c04 	addi	r5,r5,-29392
 20093b4:	002b883a 	mov	r21,zero
 20093b8:	d9402615 	stw	r5,152(sp)
 20093bc:	003f9e06 	br	2009238 <___vfiprintf_internal_r+0xf20>
 20093c0:	d9402217 	ldw	r5,136(sp)
 20093c4:	d8001d85 	stb	zero,118(sp)
 20093c8:	0029883a 	mov	r20,zero
 20093cc:	28800104 	addi	r2,r5,4
 20093d0:	2cc00017 	ldw	r19,0(r5)
 20093d4:	803e3a16 	blt	r16,zero,2008cc0 <___vfiprintf_internal_r+0x9a8>
 20093d8:	00ffdfc4 	movi	r3,-129
 20093dc:	d8802215 	stw	r2,136(sp)
 20093e0:	88e2703a 	and	r17,r17,r3
 20093e4:	002b883a 	mov	r21,zero
 20093e8:	983e9b26 	beq	r19,zero,2008e58 <___vfiprintf_internal_r+0xb40>
 20093ec:	00800244 	movi	r2,9
 20093f0:	14fdc936 	bltu	r2,r19,2008b18 <___vfiprintf_internal_r+0x800>
 20093f4:	003e9a06 	br	2008e60 <___vfiprintf_internal_r+0xb48>
 20093f8:	00800c04 	movi	r2,48
 20093fc:	d8c01d45 	stb	r3,117(sp)
 2009400:	d8801d05 	stb	r2,116(sp)
 2009404:	d8001d85 	stb	zero,118(sp)
 2009408:	88c00094 	ori	r3,r17,2
 200940c:	80009c16 	blt	r16,zero,2009680 <___vfiprintf_internal_r+0x1368>
 2009410:	00bfdfc4 	movi	r2,-129
 2009414:	88a2703a 	and	r17,r17,r2
 2009418:	8c400094 	ori	r17,r17,2
 200941c:	002b883a 	mov	r21,zero
 2009420:	003f8506 	br	2009238 <___vfiprintf_internal_r+0xf20>
 2009424:	b029883a 	mov	r20,r22
 2009428:	003c0b06 	br	2008458 <___vfiprintf_internal_r+0x140>
 200942c:	04e7c83a 	sub	r19,zero,r19
 2009430:	05400b44 	movi	r21,45
 2009434:	9804c03a 	cmpne	r2,r19,zero
 2009438:	0529c83a 	sub	r20,zero,r20
 200943c:	dd401d85 	stb	r21,118(sp)
 2009440:	a0a9c83a 	sub	r20,r20,r2
 2009444:	80009716 	blt	r16,zero,20096a4 <___vfiprintf_internal_r+0x138c>
 2009448:	00bfdfc4 	movi	r2,-129
 200944c:	88a2703a 	and	r17,r17,r2
 2009450:	003db006 	br	2008b14 <___vfiprintf_internal_r+0x7fc>
 2009454:	b0c00007 	ldb	r3,0(r22)
 2009458:	003c0c06 	br	200848c <___vfiprintf_internal_r+0x174>
 200945c:	8880100c 	andi	r2,r17,64
 2009460:	d8001d85 	stb	zero,118(sp)
 2009464:	1000461e 	bne	r2,zero,2009580 <___vfiprintf_internal_r+0x1268>
 2009468:	d9002217 	ldw	r4,136(sp)
 200946c:	0029883a 	mov	r20,zero
 2009470:	20800104 	addi	r2,r4,4
 2009474:	24c00017 	ldw	r19,0(r4)
 2009478:	803df80e 	bge	r16,zero,2008c5c <___vfiprintf_internal_r+0x944>
 200947c:	9d06b03a 	or	r3,r19,r20
 2009480:	d8802215 	stw	r2,136(sp)
 2009484:	183d5e1e 	bne	r3,zero,2008a00 <___vfiprintf_internal_r+0x6e8>
 2009488:	002b883a 	mov	r21,zero
 200948c:	0005883a 	mov	r2,zero
 2009490:	003e1006 	br	2008cd4 <___vfiprintf_internal_r+0x9bc>
 2009494:	8880040c 	andi	r2,r17,16
 2009498:	1000321e 	bne	r2,zero,2009564 <___vfiprintf_internal_r+0x124c>
 200949c:	8c40100c 	andi	r17,r17,64
 20094a0:	88008d26 	beq	r17,zero,20096d8 <___vfiprintf_internal_r+0x13c0>
 20094a4:	d9402217 	ldw	r5,136(sp)
 20094a8:	d8c02417 	ldw	r3,144(sp)
 20094ac:	28800017 	ldw	r2,0(r5)
 20094b0:	29400104 	addi	r5,r5,4
 20094b4:	d9402215 	stw	r5,136(sp)
 20094b8:	10c0000d 	sth	r3,0(r2)
 20094bc:	003bca06 	br	20083e8 <___vfiprintf_internal_r+0xd0>
 20094c0:	8880100c 	andi	r2,r17,64
 20094c4:	10003a26 	beq	r2,zero,20095b0 <___vfiprintf_internal_r+0x1298>
 20094c8:	d8802217 	ldw	r2,136(sp)
 20094cc:	14c0000f 	ldh	r19,0(r2)
 20094d0:	10800104 	addi	r2,r2,4
 20094d4:	d8802215 	stw	r2,136(sp)
 20094d8:	9829d7fa 	srai	r20,r19,31
 20094dc:	a005883a 	mov	r2,r20
 20094e0:	003d8506 	br	2008af8 <___vfiprintf_internal_r+0x7e0>
 20094e4:	8880100c 	andi	r2,r17,64
 20094e8:	10002b26 	beq	r2,zero,2009598 <___vfiprintf_internal_r+0x1280>
 20094ec:	d8802217 	ldw	r2,136(sp)
 20094f0:	0029883a 	mov	r20,zero
 20094f4:	14c0000b 	ldhu	r19,0(r2)
 20094f8:	10800104 	addi	r2,r2,4
 20094fc:	d8802215 	stw	r2,136(sp)
 2009500:	003d5d06 	br	2008a78 <___vfiprintf_internal_r+0x760>
 2009504:	d9402017 	ldw	r5,128(sp)
 2009508:	d9002117 	ldw	r4,132(sp)
 200950c:	d9801a04 	addi	r6,sp,104
 2009510:	d8c02a15 	stw	r3,168(sp)
 2009514:	d9c02b15 	stw	r7,172(sp)
 2009518:	20082040 	call	2008204 <__sprint_r.part.0>
 200951c:	d8c02a17 	ldw	r3,168(sp)
 2009520:	d9c02b17 	ldw	r7,172(sp)
 2009524:	103eb41e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009528:	d9001b17 	ldw	r4,108(sp)
 200952c:	d8801c17 	ldw	r2,112(sp)
 2009530:	d811883a 	mov	r8,sp
 2009534:	21400044 	addi	r5,r4,1
 2009538:	003e6706 	br	2008ed8 <___vfiprintf_internal_r+0xbc0>
 200953c:	00bfffc4 	movi	r2,-1
 2009540:	003c4a06 	br	200866c <___vfiprintf_internal_r+0x354>
 2009544:	9805883a 	mov	r2,r19
 2009548:	003ee806 	br	20090ec <___vfiprintf_internal_r+0xdd4>
 200954c:	d8c02217 	ldw	r3,136(sp)
 2009550:	0029883a 	mov	r20,zero
 2009554:	18800104 	addi	r2,r3,4
 2009558:	1cc0000b 	ldhu	r19,0(r3)
 200955c:	803f9e0e 	bge	r16,zero,20093d8 <___vfiprintf_internal_r+0x10c0>
 2009560:	003dd706 	br	2008cc0 <___vfiprintf_internal_r+0x9a8>
 2009564:	d8c02217 	ldw	r3,136(sp)
 2009568:	d9002417 	ldw	r4,144(sp)
 200956c:	18800017 	ldw	r2,0(r3)
 2009570:	18c00104 	addi	r3,r3,4
 2009574:	d8c02215 	stw	r3,136(sp)
 2009578:	11000015 	stw	r4,0(r2)
 200957c:	003b9a06 	br	20083e8 <___vfiprintf_internal_r+0xd0>
 2009580:	d8c02217 	ldw	r3,136(sp)
 2009584:	0029883a 	mov	r20,zero
 2009588:	18800104 	addi	r2,r3,4
 200958c:	1cc0000b 	ldhu	r19,0(r3)
 2009590:	803db20e 	bge	r16,zero,2008c5c <___vfiprintf_internal_r+0x944>
 2009594:	003fb906 	br	200947c <___vfiprintf_internal_r+0x1164>
 2009598:	d9002217 	ldw	r4,136(sp)
 200959c:	0029883a 	mov	r20,zero
 20095a0:	24c00017 	ldw	r19,0(r4)
 20095a4:	21000104 	addi	r4,r4,4
 20095a8:	d9002215 	stw	r4,136(sp)
 20095ac:	003d3206 	br	2008a78 <___vfiprintf_internal_r+0x760>
 20095b0:	d8c02217 	ldw	r3,136(sp)
 20095b4:	1cc00017 	ldw	r19,0(r3)
 20095b8:	18c00104 	addi	r3,r3,4
 20095bc:	d8c02215 	stw	r3,136(sp)
 20095c0:	9829d7fa 	srai	r20,r19,31
 20095c4:	a005883a 	mov	r2,r20
 20095c8:	003d4b06 	br	2008af8 <___vfiprintf_internal_r+0x7e0>
 20095cc:	0009883a 	mov	r4,zero
 20095d0:	01400044 	movi	r5,1
 20095d4:	d811883a 	mov	r8,sp
 20095d8:	003e4f06 	br	2008f18 <___vfiprintf_internal_r+0xc00>
 20095dc:	d8c02215 	stw	r3,136(sp)
 20095e0:	002b883a 	mov	r21,zero
 20095e4:	003db806 	br	2008cc8 <___vfiprintf_internal_r+0x9b0>
 20095e8:	d811883a 	mov	r8,sp
 20095ec:	003e9606 	br	2009048 <___vfiprintf_internal_r+0xd30>
 20095f0:	010080b4 	movhi	r4,514
 20095f4:	2123ad04 	addi	r4,r4,-29004
 20095f8:	d9002315 	stw	r4,140(sp)
 20095fc:	003e6306 	br	2008f8c <___vfiprintf_internal_r+0xc74>
 2009600:	b0c00043 	ldbu	r3,1(r22)
 2009604:	8c400814 	ori	r17,r17,32
 2009608:	b5800044 	addi	r22,r22,1
 200960c:	18c03fcc 	andi	r3,r3,255
 2009610:	18c0201c 	xori	r3,r3,128
 2009614:	18ffe004 	addi	r3,r3,-128
 2009618:	003b9c06 	br	200848c <___vfiprintf_internal_r+0x174>
 200961c:	b809883a 	mov	r4,r23
 2009620:	da002a15 	stw	r8,168(sp)
 2009624:	2000a880 	call	2000a88 <strlen>
 2009628:	1029883a 	mov	r20,r2
 200962c:	dd401d83 	ldbu	r21,118(sp)
 2009630:	df002215 	stw	fp,136(sp)
 2009634:	0021883a 	mov	r16,zero
 2009638:	da002a17 	ldw	r8,168(sp)
 200963c:	003c3906 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2009640:	d9402017 	ldw	r5,128(sp)
 2009644:	d9002117 	ldw	r4,132(sp)
 2009648:	d9801a04 	addi	r6,sp,104
 200964c:	20082040 	call	2008204 <__sprint_r.part.0>
 2009650:	103e691e 	bne	r2,zero,2008ff8 <___vfiprintf_internal_r+0xce0>
 2009654:	d9001b17 	ldw	r4,108(sp)
 2009658:	d8801c17 	ldw	r2,112(sp)
 200965c:	d811883a 	mov	r8,sp
 2009660:	21400044 	addi	r5,r4,1
 2009664:	003e2e06 	br	2008f20 <___vfiprintf_internal_r+0xc08>
 2009668:	010080b4 	movhi	r4,514
 200966c:	2123b104 	addi	r4,r4,-28988
 2009670:	d9002315 	stw	r4,140(sp)
 2009674:	d9001b17 	ldw	r4,108(sp)
 2009678:	21000044 	addi	r4,r4,1
 200967c:	003c5e06 	br	20087f8 <___vfiprintf_internal_r+0x4e0>
 2009680:	002b883a 	mov	r21,zero
 2009684:	00800084 	movi	r2,2
 2009688:	10803fcc 	andi	r2,r2,255
 200968c:	01000044 	movi	r4,1
 2009690:	11002b26 	beq	r2,r4,2009740 <___vfiprintf_internal_r+0x1428>
 2009694:	01000084 	movi	r4,2
 2009698:	11002b1e 	bne	r2,r4,2009748 <___vfiprintf_internal_r+0x1430>
 200969c:	1823883a 	mov	r17,r3
 20096a0:	003ee506 	br	2009238 <___vfiprintf_internal_r+0xf20>
 20096a4:	8807883a 	mov	r3,r17
 20096a8:	00800044 	movi	r2,1
 20096ac:	003ff606 	br	2009688 <___vfiprintf_internal_r+0x1370>
 20096b0:	00800184 	movi	r2,6
 20096b4:	1400012e 	bgeu	r2,r16,20096bc <___vfiprintf_internal_r+0x13a4>
 20096b8:	1021883a 	mov	r16,r2
 20096bc:	8029883a 	mov	r20,r16
 20096c0:	8027883a 	mov	r19,r16
 20096c4:	80002216 	blt	r16,zero,2009750 <___vfiprintf_internal_r+0x1438>
 20096c8:	05c080b4 	movhi	r23,514
 20096cc:	df002215 	stw	fp,136(sp)
 20096d0:	bde35104 	addi	r23,r23,-29372
 20096d4:	003cfb06 	br	2008ac4 <___vfiprintf_internal_r+0x7ac>
 20096d8:	d9002217 	ldw	r4,136(sp)
 20096dc:	d9402417 	ldw	r5,144(sp)
 20096e0:	20800017 	ldw	r2,0(r4)
 20096e4:	21000104 	addi	r4,r4,4
 20096e8:	d9002215 	stw	r4,136(sp)
 20096ec:	11400015 	stw	r5,0(r2)
 20096f0:	003b3d06 	br	20083e8 <___vfiprintf_internal_r+0xd0>
 20096f4:	014080b4 	movhi	r5,514
 20096f8:	2963b104 	addi	r5,r5,-28988
 20096fc:	d9402315 	stw	r5,140(sp)
 2009700:	d9401b17 	ldw	r5,108(sp)
 2009704:	29400044 	addi	r5,r5,1
 2009708:	003e6d06 	br	20090c0 <___vfiprintf_internal_r+0xda8>
 200970c:	8029883a 	mov	r20,r16
 2009710:	dd401d83 	ldbu	r21,118(sp)
 2009714:	df002215 	stw	fp,136(sp)
 2009718:	0021883a 	mov	r16,zero
 200971c:	003c0106 	br	2008724 <___vfiprintf_internal_r+0x40c>
 2009720:	00c080b4 	movhi	r3,514
 2009724:	18e3ad04 	addi	r3,r3,-29004
 2009728:	d8c02315 	stw	r3,140(sp)
 200972c:	280d883a 	mov	r6,r5
 2009730:	003c6906 	br	20088d8 <___vfiprintf_internal_r+0x5c0>
 2009734:	802d883a 	mov	r22,r16
 2009738:	0021883a 	mov	r16,zero
 200973c:	003b5406 	br	2008490 <___vfiprintf_internal_r+0x178>
 2009740:	1823883a 	mov	r17,r3
 2009744:	003cf306 	br	2008b14 <___vfiprintf_internal_r+0x7fc>
 2009748:	1823883a 	mov	r17,r3
 200974c:	003cad06 	br	2008a04 <___vfiprintf_internal_r+0x6ec>
 2009750:	0027883a 	mov	r19,zero
 2009754:	003fdc06 	br	20096c8 <___vfiprintf_internal_r+0x13b0>
 2009758:	d9402217 	ldw	r5,136(sp)
 200975c:	8005883a 	mov	r2,r16
 2009760:	b0c00043 	ldbu	r3,1(r22)
 2009764:	2c000017 	ldw	r16,0(r5)
 2009768:	29000104 	addi	r4,r5,4
 200976c:	d9002215 	stw	r4,136(sp)
 2009770:	102d883a 	mov	r22,r2
 2009774:	803fa50e 	bge	r16,zero,200960c <___vfiprintf_internal_r+0x12f4>
 2009778:	18c03fcc 	andi	r3,r3,255
 200977c:	18c0201c 	xori	r3,r3,128
 2009780:	043fffc4 	movi	r16,-1
 2009784:	18ffe004 	addi	r3,r3,-128
 2009788:	003b4006 	br	200848c <___vfiprintf_internal_r+0x174>
 200978c:	d9402303 	ldbu	r5,140(sp)
 2009790:	d9401d85 	stb	r5,118(sp)
 2009794:	003cae06 	br	2008a50 <___vfiprintf_internal_r+0x738>
 2009798:	d8c02303 	ldbu	r3,140(sp)
 200979c:	d8c01d85 	stb	r3,118(sp)
 20097a0:	003d1406 	br	2008bf4 <___vfiprintf_internal_r+0x8dc>
 20097a4:	d8c02303 	ldbu	r3,140(sp)
 20097a8:	d8c01d85 	stb	r3,118(sp)
 20097ac:	003cca06 	br	2008ad8 <___vfiprintf_internal_r+0x7c0>
 20097b0:	8880004c 	andi	r2,r17,1
 20097b4:	002b883a 	mov	r21,zero
 20097b8:	10000526 	beq	r2,zero,20097d0 <___vfiprintf_internal_r+0x14b8>
 20097bc:	00800c04 	movi	r2,48
 20097c0:	d88019c5 	stb	r2,103(sp)
 20097c4:	dd002817 	ldw	r20,160(sp)
 20097c8:	ddc019c4 	addi	r23,sp,103
 20097cc:	003bd506 	br	2008724 <___vfiprintf_internal_r+0x40c>
 20097d0:	0029883a 	mov	r20,zero
 20097d4:	ddc01a04 	addi	r23,sp,104
 20097d8:	003bd206 	br	2008724 <___vfiprintf_internal_r+0x40c>
 20097dc:	d9002303 	ldbu	r4,140(sp)
 20097e0:	d9001d85 	stb	r4,118(sp)
 20097e4:	003da606 	br	2008e80 <___vfiprintf_internal_r+0xb68>
 20097e8:	d8c02303 	ldbu	r3,140(sp)
 20097ec:	d8c01d85 	stb	r3,118(sp)
 20097f0:	003c7606 	br	20089cc <___vfiprintf_internal_r+0x6b4>
 20097f4:	d8c02303 	ldbu	r3,140(sp)
 20097f8:	d8c01d85 	stb	r3,118(sp)
 20097fc:	003c6506 	br	2008994 <___vfiprintf_internal_r+0x67c>
 2009800:	d9002303 	ldbu	r4,140(sp)
 2009804:	d9001d85 	stb	r4,118(sp)
 2009808:	003d3d06 	br	2008d00 <___vfiprintf_internal_r+0x9e8>
 200980c:	d8c02303 	ldbu	r3,140(sp)
 2009810:	d8c01d85 	stb	r3,118(sp)
 2009814:	003d1d06 	br	2008c8c <___vfiprintf_internal_r+0x974>
 2009818:	d8c02303 	ldbu	r3,140(sp)
 200981c:	d8c01d85 	stb	r3,118(sp)
 2009820:	003d0306 	br	2008c30 <___vfiprintf_internal_r+0x918>

02009824 <__vfiprintf_internal>:
 2009824:	008080b4 	movhi	r2,514
 2009828:	10aaf804 	addi	r2,r2,-21536
 200982c:	300f883a 	mov	r7,r6
 2009830:	280d883a 	mov	r6,r5
 2009834:	200b883a 	mov	r5,r4
 2009838:	11000017 	ldw	r4,0(r2)
 200983c:	20083181 	jmpi	2008318 <___vfiprintf_internal_r>

02009840 <__sbprintf>:
 2009840:	2880030b 	ldhu	r2,12(r5)
 2009844:	2ac01917 	ldw	r11,100(r5)
 2009848:	2a80038b 	ldhu	r10,14(r5)
 200984c:	2a400717 	ldw	r9,28(r5)
 2009850:	2a000917 	ldw	r8,36(r5)
 2009854:	defee204 	addi	sp,sp,-1144
 2009858:	00c10004 	movi	r3,1024
 200985c:	dc011a15 	stw	r16,1128(sp)
 2009860:	10bfff4c 	andi	r2,r2,65533
 2009864:	2821883a 	mov	r16,r5
 2009868:	d8cb883a 	add	r5,sp,r3
 200986c:	dc811c15 	stw	r18,1136(sp)
 2009870:	dc411b15 	stw	r17,1132(sp)
 2009874:	dfc11d15 	stw	ra,1140(sp)
 2009878:	2025883a 	mov	r18,r4
 200987c:	d881030d 	sth	r2,1036(sp)
 2009880:	dac11915 	stw	r11,1124(sp)
 2009884:	da81038d 	sth	r10,1038(sp)
 2009888:	da410715 	stw	r9,1052(sp)
 200988c:	da010915 	stw	r8,1060(sp)
 2009890:	dec10015 	stw	sp,1024(sp)
 2009894:	dec10415 	stw	sp,1040(sp)
 2009898:	d8c10215 	stw	r3,1032(sp)
 200989c:	d8c10515 	stw	r3,1044(sp)
 20098a0:	d8010615 	stw	zero,1048(sp)
 20098a4:	20083180 	call	2008318 <___vfiprintf_internal_r>
 20098a8:	1023883a 	mov	r17,r2
 20098ac:	10000416 	blt	r2,zero,20098c0 <__sbprintf+0x80>
 20098b0:	d9410004 	addi	r5,sp,1024
 20098b4:	9009883a 	mov	r4,r18
 20098b8:	2004af40 	call	2004af4 <_fflush_r>
 20098bc:	10000d1e 	bne	r2,zero,20098f4 <__sbprintf+0xb4>
 20098c0:	d881030b 	ldhu	r2,1036(sp)
 20098c4:	1080100c 	andi	r2,r2,64
 20098c8:	10000326 	beq	r2,zero,20098d8 <__sbprintf+0x98>
 20098cc:	8080030b 	ldhu	r2,12(r16)
 20098d0:	10801014 	ori	r2,r2,64
 20098d4:	8080030d 	sth	r2,12(r16)
 20098d8:	8805883a 	mov	r2,r17
 20098dc:	dfc11d17 	ldw	ra,1140(sp)
 20098e0:	dc811c17 	ldw	r18,1136(sp)
 20098e4:	dc411b17 	ldw	r17,1132(sp)
 20098e8:	dc011a17 	ldw	r16,1128(sp)
 20098ec:	dec11e04 	addi	sp,sp,1144
 20098f0:	f800283a 	ret
 20098f4:	047fffc4 	movi	r17,-1
 20098f8:	003ff106 	br	20098c0 <__sbprintf+0x80>

020098fc <_write_r>:
 20098fc:	defffd04 	addi	sp,sp,-12
 2009900:	2805883a 	mov	r2,r5
 2009904:	dc000015 	stw	r16,0(sp)
 2009908:	040080b4 	movhi	r16,514
 200990c:	dc400115 	stw	r17,4(sp)
 2009910:	300b883a 	mov	r5,r6
 2009914:	84321104 	addi	r16,r16,-14268
 2009918:	2023883a 	mov	r17,r4
 200991c:	380d883a 	mov	r6,r7
 2009920:	1009883a 	mov	r4,r2
 2009924:	dfc00215 	stw	ra,8(sp)
 2009928:	80000015 	stw	zero,0(r16)
 200992c:	200e1140 	call	200e114 <write>
 2009930:	00ffffc4 	movi	r3,-1
 2009934:	10c00526 	beq	r2,r3,200994c <_write_r+0x50>
 2009938:	dfc00217 	ldw	ra,8(sp)
 200993c:	dc400117 	ldw	r17,4(sp)
 2009940:	dc000017 	ldw	r16,0(sp)
 2009944:	dec00304 	addi	sp,sp,12
 2009948:	f800283a 	ret
 200994c:	80c00017 	ldw	r3,0(r16)
 2009950:	183ff926 	beq	r3,zero,2009938 <_write_r+0x3c>
 2009954:	88c00015 	stw	r3,0(r17)
 2009958:	003ff706 	br	2009938 <_write_r+0x3c>

0200995c <_close_r>:
 200995c:	defffd04 	addi	sp,sp,-12
 2009960:	dc000015 	stw	r16,0(sp)
 2009964:	040080b4 	movhi	r16,514
 2009968:	dc400115 	stw	r17,4(sp)
 200996c:	84321104 	addi	r16,r16,-14268
 2009970:	2023883a 	mov	r17,r4
 2009974:	2809883a 	mov	r4,r5
 2009978:	dfc00215 	stw	ra,8(sp)
 200997c:	80000015 	stw	zero,0(r16)
 2009980:	200d8c40 	call	200d8c4 <close>
 2009984:	00ffffc4 	movi	r3,-1
 2009988:	10c00526 	beq	r2,r3,20099a0 <_close_r+0x44>
 200998c:	dfc00217 	ldw	ra,8(sp)
 2009990:	dc400117 	ldw	r17,4(sp)
 2009994:	dc000017 	ldw	r16,0(sp)
 2009998:	dec00304 	addi	sp,sp,12
 200999c:	f800283a 	ret
 20099a0:	80c00017 	ldw	r3,0(r16)
 20099a4:	183ff926 	beq	r3,zero,200998c <_close_r+0x30>
 20099a8:	88c00015 	stw	r3,0(r17)
 20099ac:	003ff706 	br	200998c <_close_r+0x30>

020099b0 <_calloc_r>:
 20099b0:	defffe04 	addi	sp,sp,-8
 20099b4:	2805883a 	mov	r2,r5
 20099b8:	dc000015 	stw	r16,0(sp)
 20099bc:	300b883a 	mov	r5,r6
 20099c0:	2021883a 	mov	r16,r4
 20099c4:	1009883a 	mov	r4,r2
 20099c8:	dfc00115 	stw	ra,4(sp)
 20099cc:	200afbc0 	call	200afbc <__mulsi3>
 20099d0:	100b883a 	mov	r5,r2
 20099d4:	8009883a 	mov	r4,r16
 20099d8:	2005c4c0 	call	2005c4c <_malloc_r>
 20099dc:	10002926 	beq	r2,zero,2009a84 <_calloc_r+0xd4>
 20099e0:	11bfff17 	ldw	r6,-4(r2)
 20099e4:	1021883a 	mov	r16,r2
 20099e8:	00bfff04 	movi	r2,-4
 20099ec:	308c703a 	and	r6,r6,r2
 20099f0:	00c00904 	movi	r3,36
 20099f4:	308d883a 	add	r6,r6,r2
 20099f8:	19801636 	bltu	r3,r6,2009a54 <_calloc_r+0xa4>
 20099fc:	008004c4 	movi	r2,19
 2009a00:	11800b2e 	bgeu	r2,r6,2009a30 <_calloc_r+0x80>
 2009a04:	80000015 	stw	zero,0(r16)
 2009a08:	80000115 	stw	zero,4(r16)
 2009a0c:	008006c4 	movi	r2,27
 2009a10:	11801a2e 	bgeu	r2,r6,2009a7c <_calloc_r+0xcc>
 2009a14:	80000215 	stw	zero,8(r16)
 2009a18:	80000315 	stw	zero,12(r16)
 2009a1c:	30c0151e 	bne	r6,r3,2009a74 <_calloc_r+0xc4>
 2009a20:	80000415 	stw	zero,16(r16)
 2009a24:	80800604 	addi	r2,r16,24
 2009a28:	80000515 	stw	zero,20(r16)
 2009a2c:	00000106 	br	2009a34 <_calloc_r+0x84>
 2009a30:	8005883a 	mov	r2,r16
 2009a34:	10000015 	stw	zero,0(r2)
 2009a38:	10000115 	stw	zero,4(r2)
 2009a3c:	10000215 	stw	zero,8(r2)
 2009a40:	8005883a 	mov	r2,r16
 2009a44:	dfc00117 	ldw	ra,4(sp)
 2009a48:	dc000017 	ldw	r16,0(sp)
 2009a4c:	dec00204 	addi	sp,sp,8
 2009a50:	f800283a 	ret
 2009a54:	000b883a 	mov	r5,zero
 2009a58:	8009883a 	mov	r4,r16
 2009a5c:	20067e00 	call	20067e0 <memset>
 2009a60:	8005883a 	mov	r2,r16
 2009a64:	dfc00117 	ldw	ra,4(sp)
 2009a68:	dc000017 	ldw	r16,0(sp)
 2009a6c:	dec00204 	addi	sp,sp,8
 2009a70:	f800283a 	ret
 2009a74:	80800404 	addi	r2,r16,16
 2009a78:	003fee06 	br	2009a34 <_calloc_r+0x84>
 2009a7c:	80800204 	addi	r2,r16,8
 2009a80:	003fec06 	br	2009a34 <_calloc_r+0x84>
 2009a84:	0005883a 	mov	r2,zero
 2009a88:	003fee06 	br	2009a44 <_calloc_r+0x94>

02009a8c <_fclose_r>:
 2009a8c:	28003926 	beq	r5,zero,2009b74 <_fclose_r+0xe8>
 2009a90:	defffc04 	addi	sp,sp,-16
 2009a94:	dc400115 	stw	r17,4(sp)
 2009a98:	dc000015 	stw	r16,0(sp)
 2009a9c:	dfc00315 	stw	ra,12(sp)
 2009aa0:	dc800215 	stw	r18,8(sp)
 2009aa4:	2023883a 	mov	r17,r4
 2009aa8:	2821883a 	mov	r16,r5
 2009aac:	20000226 	beq	r4,zero,2009ab8 <_fclose_r+0x2c>
 2009ab0:	20800e17 	ldw	r2,56(r4)
 2009ab4:	10002726 	beq	r2,zero,2009b54 <_fclose_r+0xc8>
 2009ab8:	8080030f 	ldh	r2,12(r16)
 2009abc:	1000071e 	bne	r2,zero,2009adc <_fclose_r+0x50>
 2009ac0:	0005883a 	mov	r2,zero
 2009ac4:	dfc00317 	ldw	ra,12(sp)
 2009ac8:	dc800217 	ldw	r18,8(sp)
 2009acc:	dc400117 	ldw	r17,4(sp)
 2009ad0:	dc000017 	ldw	r16,0(sp)
 2009ad4:	dec00404 	addi	sp,sp,16
 2009ad8:	f800283a 	ret
 2009adc:	800b883a 	mov	r5,r16
 2009ae0:	8809883a 	mov	r4,r17
 2009ae4:	20048d80 	call	20048d8 <__sflush_r>
 2009ae8:	1025883a 	mov	r18,r2
 2009aec:	80800b17 	ldw	r2,44(r16)
 2009af0:	10000426 	beq	r2,zero,2009b04 <_fclose_r+0x78>
 2009af4:	81400717 	ldw	r5,28(r16)
 2009af8:	8809883a 	mov	r4,r17
 2009afc:	103ee83a 	callr	r2
 2009b00:	10001616 	blt	r2,zero,2009b5c <_fclose_r+0xd0>
 2009b04:	8080030b 	ldhu	r2,12(r16)
 2009b08:	1080200c 	andi	r2,r2,128
 2009b0c:	1000151e 	bne	r2,zero,2009b64 <_fclose_r+0xd8>
 2009b10:	81400c17 	ldw	r5,48(r16)
 2009b14:	28000526 	beq	r5,zero,2009b2c <_fclose_r+0xa0>
 2009b18:	80801004 	addi	r2,r16,64
 2009b1c:	28800226 	beq	r5,r2,2009b28 <_fclose_r+0x9c>
 2009b20:	8809883a 	mov	r4,r17
 2009b24:	20050540 	call	2005054 <_free_r>
 2009b28:	80000c15 	stw	zero,48(r16)
 2009b2c:	81401117 	ldw	r5,68(r16)
 2009b30:	28000326 	beq	r5,zero,2009b40 <_fclose_r+0xb4>
 2009b34:	8809883a 	mov	r4,r17
 2009b38:	20050540 	call	2005054 <_free_r>
 2009b3c:	80001115 	stw	zero,68(r16)
 2009b40:	2004ef00 	call	2004ef0 <__sfp_lock_acquire>
 2009b44:	8000030d 	sth	zero,12(r16)
 2009b48:	2004ef40 	call	2004ef4 <__sfp_lock_release>
 2009b4c:	9005883a 	mov	r2,r18
 2009b50:	003fdc06 	br	2009ac4 <_fclose_r+0x38>
 2009b54:	2004ee00 	call	2004ee0 <__sinit>
 2009b58:	003fd706 	br	2009ab8 <_fclose_r+0x2c>
 2009b5c:	04bfffc4 	movi	r18,-1
 2009b60:	003fe806 	br	2009b04 <_fclose_r+0x78>
 2009b64:	81400417 	ldw	r5,16(r16)
 2009b68:	8809883a 	mov	r4,r17
 2009b6c:	20050540 	call	2005054 <_free_r>
 2009b70:	003fe706 	br	2009b10 <_fclose_r+0x84>
 2009b74:	0005883a 	mov	r2,zero
 2009b78:	f800283a 	ret

02009b7c <fclose>:
 2009b7c:	008080b4 	movhi	r2,514
 2009b80:	10aaf804 	addi	r2,r2,-21536
 2009b84:	200b883a 	mov	r5,r4
 2009b88:	11000017 	ldw	r4,0(r2)
 2009b8c:	2009a8c1 	jmpi	2009a8c <_fclose_r>

02009b90 <__fputwc>:
 2009b90:	defff804 	addi	sp,sp,-32
 2009b94:	dcc00415 	stw	r19,16(sp)
 2009b98:	dc800315 	stw	r18,12(sp)
 2009b9c:	dc000115 	stw	r16,4(sp)
 2009ba0:	dfc00715 	stw	ra,28(sp)
 2009ba4:	dd400615 	stw	r21,24(sp)
 2009ba8:	dd000515 	stw	r20,20(sp)
 2009bac:	dc400215 	stw	r17,8(sp)
 2009bb0:	2027883a 	mov	r19,r4
 2009bb4:	2825883a 	mov	r18,r5
 2009bb8:	3021883a 	mov	r16,r6
 2009bbc:	2005a3c0 	call	2005a3c <__locale_mb_cur_max>
 2009bc0:	00c00044 	movi	r3,1
 2009bc4:	10c03e26 	beq	r2,r3,2009cc0 <__fputwc+0x130>
 2009bc8:	81c01704 	addi	r7,r16,92
 2009bcc:	900d883a 	mov	r6,r18
 2009bd0:	d80b883a 	mov	r5,sp
 2009bd4:	9809883a 	mov	r4,r19
 2009bd8:	200a0600 	call	200a060 <_wcrtomb_r>
 2009bdc:	1029883a 	mov	r20,r2
 2009be0:	00bfffc4 	movi	r2,-1
 2009be4:	a0802026 	beq	r20,r2,2009c68 <__fputwc+0xd8>
 2009be8:	d9400003 	ldbu	r5,0(sp)
 2009bec:	a0001c26 	beq	r20,zero,2009c60 <__fputwc+0xd0>
 2009bf0:	0023883a 	mov	r17,zero
 2009bf4:	05400284 	movi	r21,10
 2009bf8:	00000906 	br	2009c20 <__fputwc+0x90>
 2009bfc:	80800017 	ldw	r2,0(r16)
 2009c00:	11400005 	stb	r5,0(r2)
 2009c04:	80c00017 	ldw	r3,0(r16)
 2009c08:	18c00044 	addi	r3,r3,1
 2009c0c:	80c00015 	stw	r3,0(r16)
 2009c10:	8c400044 	addi	r17,r17,1
 2009c14:	dc45883a 	add	r2,sp,r17
 2009c18:	8d00112e 	bgeu	r17,r20,2009c60 <__fputwc+0xd0>
 2009c1c:	11400003 	ldbu	r5,0(r2)
 2009c20:	80c00217 	ldw	r3,8(r16)
 2009c24:	18ffffc4 	addi	r3,r3,-1
 2009c28:	80c00215 	stw	r3,8(r16)
 2009c2c:	183ff30e 	bge	r3,zero,2009bfc <__fputwc+0x6c>
 2009c30:	80800617 	ldw	r2,24(r16)
 2009c34:	18801916 	blt	r3,r2,2009c9c <__fputwc+0x10c>
 2009c38:	80800017 	ldw	r2,0(r16)
 2009c3c:	11400005 	stb	r5,0(r2)
 2009c40:	80800017 	ldw	r2,0(r16)
 2009c44:	10c00003 	ldbu	r3,0(r2)
 2009c48:	10800044 	addi	r2,r2,1
 2009c4c:	1d402326 	beq	r3,r21,2009cdc <__fputwc+0x14c>
 2009c50:	80800015 	stw	r2,0(r16)
 2009c54:	8c400044 	addi	r17,r17,1
 2009c58:	dc45883a 	add	r2,sp,r17
 2009c5c:	8d3fef36 	bltu	r17,r20,2009c1c <__fputwc+0x8c>
 2009c60:	9005883a 	mov	r2,r18
 2009c64:	00000406 	br	2009c78 <__fputwc+0xe8>
 2009c68:	80c0030b 	ldhu	r3,12(r16)
 2009c6c:	a005883a 	mov	r2,r20
 2009c70:	18c01014 	ori	r3,r3,64
 2009c74:	80c0030d 	sth	r3,12(r16)
 2009c78:	dfc00717 	ldw	ra,28(sp)
 2009c7c:	dd400617 	ldw	r21,24(sp)
 2009c80:	dd000517 	ldw	r20,20(sp)
 2009c84:	dcc00417 	ldw	r19,16(sp)
 2009c88:	dc800317 	ldw	r18,12(sp)
 2009c8c:	dc400217 	ldw	r17,8(sp)
 2009c90:	dc000117 	ldw	r16,4(sp)
 2009c94:	dec00804 	addi	sp,sp,32
 2009c98:	f800283a 	ret
 2009c9c:	800d883a 	mov	r6,r16
 2009ca0:	29403fcc 	andi	r5,r5,255
 2009ca4:	9809883a 	mov	r4,r19
 2009ca8:	2009f080 	call	2009f08 <__swbuf_r>
 2009cac:	10bfffe0 	cmpeqi	r2,r2,-1
 2009cb0:	10803fcc 	andi	r2,r2,255
 2009cb4:	103fd626 	beq	r2,zero,2009c10 <__fputwc+0x80>
 2009cb8:	00bfffc4 	movi	r2,-1
 2009cbc:	003fee06 	br	2009c78 <__fputwc+0xe8>
 2009cc0:	90ffffc4 	addi	r3,r18,-1
 2009cc4:	01003f84 	movi	r4,254
 2009cc8:	20ffbf36 	bltu	r4,r3,2009bc8 <__fputwc+0x38>
 2009ccc:	900b883a 	mov	r5,r18
 2009cd0:	dc800005 	stb	r18,0(sp)
 2009cd4:	1029883a 	mov	r20,r2
 2009cd8:	003fc506 	br	2009bf0 <__fputwc+0x60>
 2009cdc:	800d883a 	mov	r6,r16
 2009ce0:	a80b883a 	mov	r5,r21
 2009ce4:	9809883a 	mov	r4,r19
 2009ce8:	2009f080 	call	2009f08 <__swbuf_r>
 2009cec:	10bfffe0 	cmpeqi	r2,r2,-1
 2009cf0:	003fef06 	br	2009cb0 <__fputwc+0x120>

02009cf4 <_fputwc_r>:
 2009cf4:	3080030b 	ldhu	r2,12(r6)
 2009cf8:	10c8000c 	andi	r3,r2,8192
 2009cfc:	1800051e 	bne	r3,zero,2009d14 <_fputwc_r+0x20>
 2009d00:	30c01917 	ldw	r3,100(r6)
 2009d04:	10880014 	ori	r2,r2,8192
 2009d08:	3080030d 	sth	r2,12(r6)
 2009d0c:	18880014 	ori	r2,r3,8192
 2009d10:	30801915 	stw	r2,100(r6)
 2009d14:	2009b901 	jmpi	2009b90 <__fputwc>

02009d18 <fputwc>:
 2009d18:	008080b4 	movhi	r2,514
 2009d1c:	defffc04 	addi	sp,sp,-16
 2009d20:	10aaf804 	addi	r2,r2,-21536
 2009d24:	dc000115 	stw	r16,4(sp)
 2009d28:	14000017 	ldw	r16,0(r2)
 2009d2c:	dc400215 	stw	r17,8(sp)
 2009d30:	dfc00315 	stw	ra,12(sp)
 2009d34:	2023883a 	mov	r17,r4
 2009d38:	80000226 	beq	r16,zero,2009d44 <fputwc+0x2c>
 2009d3c:	80800e17 	ldw	r2,56(r16)
 2009d40:	10001026 	beq	r2,zero,2009d84 <fputwc+0x6c>
 2009d44:	2880030b 	ldhu	r2,12(r5)
 2009d48:	10c8000c 	andi	r3,r2,8192
 2009d4c:	1800051e 	bne	r3,zero,2009d64 <fputwc+0x4c>
 2009d50:	28c01917 	ldw	r3,100(r5)
 2009d54:	10880014 	ori	r2,r2,8192
 2009d58:	2880030d 	sth	r2,12(r5)
 2009d5c:	18880014 	ori	r2,r3,8192
 2009d60:	28801915 	stw	r2,100(r5)
 2009d64:	280d883a 	mov	r6,r5
 2009d68:	8009883a 	mov	r4,r16
 2009d6c:	880b883a 	mov	r5,r17
 2009d70:	dfc00317 	ldw	ra,12(sp)
 2009d74:	dc400217 	ldw	r17,8(sp)
 2009d78:	dc000117 	ldw	r16,4(sp)
 2009d7c:	dec00404 	addi	sp,sp,16
 2009d80:	2009b901 	jmpi	2009b90 <__fputwc>
 2009d84:	8009883a 	mov	r4,r16
 2009d88:	d9400015 	stw	r5,0(sp)
 2009d8c:	2004ee00 	call	2004ee0 <__sinit>
 2009d90:	d9400017 	ldw	r5,0(sp)
 2009d94:	003feb06 	br	2009d44 <fputwc+0x2c>

02009d98 <_fstat_r>:
 2009d98:	defffd04 	addi	sp,sp,-12
 2009d9c:	2805883a 	mov	r2,r5
 2009da0:	dc000015 	stw	r16,0(sp)
 2009da4:	040080b4 	movhi	r16,514
 2009da8:	dc400115 	stw	r17,4(sp)
 2009dac:	84321104 	addi	r16,r16,-14268
 2009db0:	2023883a 	mov	r17,r4
 2009db4:	300b883a 	mov	r5,r6
 2009db8:	1009883a 	mov	r4,r2
 2009dbc:	dfc00215 	stw	ra,8(sp)
 2009dc0:	80000015 	stw	zero,0(r16)
 2009dc4:	200da040 	call	200da04 <fstat>
 2009dc8:	00ffffc4 	movi	r3,-1
 2009dcc:	10c00526 	beq	r2,r3,2009de4 <_fstat_r+0x4c>
 2009dd0:	dfc00217 	ldw	ra,8(sp)
 2009dd4:	dc400117 	ldw	r17,4(sp)
 2009dd8:	dc000017 	ldw	r16,0(sp)
 2009ddc:	dec00304 	addi	sp,sp,12
 2009de0:	f800283a 	ret
 2009de4:	80c00017 	ldw	r3,0(r16)
 2009de8:	183ff926 	beq	r3,zero,2009dd0 <_fstat_r+0x38>
 2009dec:	88c00015 	stw	r3,0(r17)
 2009df0:	003ff706 	br	2009dd0 <_fstat_r+0x38>

02009df4 <_isatty_r>:
 2009df4:	defffd04 	addi	sp,sp,-12
 2009df8:	dc000015 	stw	r16,0(sp)
 2009dfc:	040080b4 	movhi	r16,514
 2009e00:	dc400115 	stw	r17,4(sp)
 2009e04:	84321104 	addi	r16,r16,-14268
 2009e08:	2023883a 	mov	r17,r4
 2009e0c:	2809883a 	mov	r4,r5
 2009e10:	dfc00215 	stw	ra,8(sp)
 2009e14:	80000015 	stw	zero,0(r16)
 2009e18:	200daf80 	call	200daf8 <isatty>
 2009e1c:	00ffffc4 	movi	r3,-1
 2009e20:	10c00526 	beq	r2,r3,2009e38 <_isatty_r+0x44>
 2009e24:	dfc00217 	ldw	ra,8(sp)
 2009e28:	dc400117 	ldw	r17,4(sp)
 2009e2c:	dc000017 	ldw	r16,0(sp)
 2009e30:	dec00304 	addi	sp,sp,12
 2009e34:	f800283a 	ret
 2009e38:	80c00017 	ldw	r3,0(r16)
 2009e3c:	183ff926 	beq	r3,zero,2009e24 <_isatty_r+0x30>
 2009e40:	88c00015 	stw	r3,0(r17)
 2009e44:	003ff706 	br	2009e24 <_isatty_r+0x30>

02009e48 <_lseek_r>:
 2009e48:	defffd04 	addi	sp,sp,-12
 2009e4c:	2805883a 	mov	r2,r5
 2009e50:	dc000015 	stw	r16,0(sp)
 2009e54:	040080b4 	movhi	r16,514
 2009e58:	dc400115 	stw	r17,4(sp)
 2009e5c:	300b883a 	mov	r5,r6
 2009e60:	84321104 	addi	r16,r16,-14268
 2009e64:	2023883a 	mov	r17,r4
 2009e68:	380d883a 	mov	r6,r7
 2009e6c:	1009883a 	mov	r4,r2
 2009e70:	dfc00215 	stw	ra,8(sp)
 2009e74:	80000015 	stw	zero,0(r16)
 2009e78:	200dccc0 	call	200dccc <lseek>
 2009e7c:	00ffffc4 	movi	r3,-1
 2009e80:	10c00526 	beq	r2,r3,2009e98 <_lseek_r+0x50>
 2009e84:	dfc00217 	ldw	ra,8(sp)
 2009e88:	dc400117 	ldw	r17,4(sp)
 2009e8c:	dc000017 	ldw	r16,0(sp)
 2009e90:	dec00304 	addi	sp,sp,12
 2009e94:	f800283a 	ret
 2009e98:	80c00017 	ldw	r3,0(r16)
 2009e9c:	183ff926 	beq	r3,zero,2009e84 <_lseek_r+0x3c>
 2009ea0:	88c00015 	stw	r3,0(r17)
 2009ea4:	003ff706 	br	2009e84 <_lseek_r+0x3c>

02009ea8 <_read_r>:
 2009ea8:	defffd04 	addi	sp,sp,-12
 2009eac:	2805883a 	mov	r2,r5
 2009eb0:	dc000015 	stw	r16,0(sp)
 2009eb4:	040080b4 	movhi	r16,514
 2009eb8:	dc400115 	stw	r17,4(sp)
 2009ebc:	300b883a 	mov	r5,r6
 2009ec0:	84321104 	addi	r16,r16,-14268
 2009ec4:	2023883a 	mov	r17,r4
 2009ec8:	380d883a 	mov	r6,r7
 2009ecc:	1009883a 	mov	r4,r2
 2009ed0:	dfc00215 	stw	ra,8(sp)
 2009ed4:	80000015 	stw	zero,0(r16)
 2009ed8:	200dea00 	call	200dea0 <read>
 2009edc:	00ffffc4 	movi	r3,-1
 2009ee0:	10c00526 	beq	r2,r3,2009ef8 <_read_r+0x50>
 2009ee4:	dfc00217 	ldw	ra,8(sp)
 2009ee8:	dc400117 	ldw	r17,4(sp)
 2009eec:	dc000017 	ldw	r16,0(sp)
 2009ef0:	dec00304 	addi	sp,sp,12
 2009ef4:	f800283a 	ret
 2009ef8:	80c00017 	ldw	r3,0(r16)
 2009efc:	183ff926 	beq	r3,zero,2009ee4 <_read_r+0x3c>
 2009f00:	88c00015 	stw	r3,0(r17)
 2009f04:	003ff706 	br	2009ee4 <_read_r+0x3c>

02009f08 <__swbuf_r>:
 2009f08:	defffb04 	addi	sp,sp,-20
 2009f0c:	dcc00315 	stw	r19,12(sp)
 2009f10:	dc800215 	stw	r18,8(sp)
 2009f14:	dc000015 	stw	r16,0(sp)
 2009f18:	dfc00415 	stw	ra,16(sp)
 2009f1c:	dc400115 	stw	r17,4(sp)
 2009f20:	2025883a 	mov	r18,r4
 2009f24:	2827883a 	mov	r19,r5
 2009f28:	3021883a 	mov	r16,r6
 2009f2c:	20000226 	beq	r4,zero,2009f38 <__swbuf_r+0x30>
 2009f30:	20800e17 	ldw	r2,56(r4)
 2009f34:	10004226 	beq	r2,zero,200a040 <__swbuf_r+0x138>
 2009f38:	80800617 	ldw	r2,24(r16)
 2009f3c:	8100030b 	ldhu	r4,12(r16)
 2009f40:	80800215 	stw	r2,8(r16)
 2009f44:	2080020c 	andi	r2,r4,8
 2009f48:	10003626 	beq	r2,zero,200a024 <__swbuf_r+0x11c>
 2009f4c:	80c00417 	ldw	r3,16(r16)
 2009f50:	18003426 	beq	r3,zero,200a024 <__swbuf_r+0x11c>
 2009f54:	2088000c 	andi	r2,r4,8192
 2009f58:	9c403fcc 	andi	r17,r19,255
 2009f5c:	10001a26 	beq	r2,zero,2009fc8 <__swbuf_r+0xc0>
 2009f60:	80800017 	ldw	r2,0(r16)
 2009f64:	81000517 	ldw	r4,20(r16)
 2009f68:	10c7c83a 	sub	r3,r2,r3
 2009f6c:	1900200e 	bge	r3,r4,2009ff0 <__swbuf_r+0xe8>
 2009f70:	18c00044 	addi	r3,r3,1
 2009f74:	81000217 	ldw	r4,8(r16)
 2009f78:	11400044 	addi	r5,r2,1
 2009f7c:	81400015 	stw	r5,0(r16)
 2009f80:	213fffc4 	addi	r4,r4,-1
 2009f84:	81000215 	stw	r4,8(r16)
 2009f88:	14c00005 	stb	r19,0(r2)
 2009f8c:	80800517 	ldw	r2,20(r16)
 2009f90:	10c01e26 	beq	r2,r3,200a00c <__swbuf_r+0x104>
 2009f94:	8080030b 	ldhu	r2,12(r16)
 2009f98:	1080004c 	andi	r2,r2,1
 2009f9c:	10000226 	beq	r2,zero,2009fa8 <__swbuf_r+0xa0>
 2009fa0:	00800284 	movi	r2,10
 2009fa4:	88801926 	beq	r17,r2,200a00c <__swbuf_r+0x104>
 2009fa8:	8805883a 	mov	r2,r17
 2009fac:	dfc00417 	ldw	ra,16(sp)
 2009fb0:	dcc00317 	ldw	r19,12(sp)
 2009fb4:	dc800217 	ldw	r18,8(sp)
 2009fb8:	dc400117 	ldw	r17,4(sp)
 2009fbc:	dc000017 	ldw	r16,0(sp)
 2009fc0:	dec00504 	addi	sp,sp,20
 2009fc4:	f800283a 	ret
 2009fc8:	81401917 	ldw	r5,100(r16)
 2009fcc:	00b7ffc4 	movi	r2,-8193
 2009fd0:	21080014 	ori	r4,r4,8192
 2009fd4:	2884703a 	and	r2,r5,r2
 2009fd8:	80801915 	stw	r2,100(r16)
 2009fdc:	80800017 	ldw	r2,0(r16)
 2009fe0:	8100030d 	sth	r4,12(r16)
 2009fe4:	81000517 	ldw	r4,20(r16)
 2009fe8:	10c7c83a 	sub	r3,r2,r3
 2009fec:	193fe016 	blt	r3,r4,2009f70 <__swbuf_r+0x68>
 2009ff0:	800b883a 	mov	r5,r16
 2009ff4:	9009883a 	mov	r4,r18
 2009ff8:	2004af40 	call	2004af4 <_fflush_r>
 2009ffc:	1000071e 	bne	r2,zero,200a01c <__swbuf_r+0x114>
 200a000:	80800017 	ldw	r2,0(r16)
 200a004:	00c00044 	movi	r3,1
 200a008:	003fda06 	br	2009f74 <__swbuf_r+0x6c>
 200a00c:	800b883a 	mov	r5,r16
 200a010:	9009883a 	mov	r4,r18
 200a014:	2004af40 	call	2004af4 <_fflush_r>
 200a018:	103fe326 	beq	r2,zero,2009fa8 <__swbuf_r+0xa0>
 200a01c:	00bfffc4 	movi	r2,-1
 200a020:	003fe206 	br	2009fac <__swbuf_r+0xa4>
 200a024:	800b883a 	mov	r5,r16
 200a028:	9009883a 	mov	r4,r18
 200a02c:	2002ed40 	call	2002ed4 <__swsetup_r>
 200a030:	103ffa1e 	bne	r2,zero,200a01c <__swbuf_r+0x114>
 200a034:	8100030b 	ldhu	r4,12(r16)
 200a038:	80c00417 	ldw	r3,16(r16)
 200a03c:	003fc506 	br	2009f54 <__swbuf_r+0x4c>
 200a040:	2004ee00 	call	2004ee0 <__sinit>
 200a044:	003fbc06 	br	2009f38 <__swbuf_r+0x30>

0200a048 <__swbuf>:
 200a048:	008080b4 	movhi	r2,514
 200a04c:	10aaf804 	addi	r2,r2,-21536
 200a050:	280d883a 	mov	r6,r5
 200a054:	200b883a 	mov	r5,r4
 200a058:	11000017 	ldw	r4,0(r2)
 200a05c:	2009f081 	jmpi	2009f08 <__swbuf_r>

0200a060 <_wcrtomb_r>:
 200a060:	defff604 	addi	sp,sp,-40
 200a064:	008080b4 	movhi	r2,514
 200a068:	dc800815 	stw	r18,32(sp)
 200a06c:	dc400715 	stw	r17,28(sp)
 200a070:	dc000615 	stw	r16,24(sp)
 200a074:	10aafc04 	addi	r2,r2,-21520
 200a078:	dfc00915 	stw	ra,36(sp)
 200a07c:	2021883a 	mov	r16,r4
 200a080:	3823883a 	mov	r17,r7
 200a084:	14800017 	ldw	r18,0(r2)
 200a088:	28001426 	beq	r5,zero,200a0dc <_wcrtomb_r+0x7c>
 200a08c:	d9400415 	stw	r5,16(sp)
 200a090:	d9800515 	stw	r6,20(sp)
 200a094:	2005a300 	call	2005a30 <__locale_charset>
 200a098:	d9800517 	ldw	r6,20(sp)
 200a09c:	d9400417 	ldw	r5,16(sp)
 200a0a0:	100f883a 	mov	r7,r2
 200a0a4:	dc400015 	stw	r17,0(sp)
 200a0a8:	8009883a 	mov	r4,r16
 200a0ac:	903ee83a 	callr	r18
 200a0b0:	00ffffc4 	movi	r3,-1
 200a0b4:	10c0031e 	bne	r2,r3,200a0c4 <_wcrtomb_r+0x64>
 200a0b8:	88000015 	stw	zero,0(r17)
 200a0bc:	00c02284 	movi	r3,138
 200a0c0:	80c00015 	stw	r3,0(r16)
 200a0c4:	dfc00917 	ldw	ra,36(sp)
 200a0c8:	dc800817 	ldw	r18,32(sp)
 200a0cc:	dc400717 	ldw	r17,28(sp)
 200a0d0:	dc000617 	ldw	r16,24(sp)
 200a0d4:	dec00a04 	addi	sp,sp,40
 200a0d8:	f800283a 	ret
 200a0dc:	2005a300 	call	2005a30 <__locale_charset>
 200a0e0:	100f883a 	mov	r7,r2
 200a0e4:	dc400015 	stw	r17,0(sp)
 200a0e8:	000d883a 	mov	r6,zero
 200a0ec:	d9400104 	addi	r5,sp,4
 200a0f0:	8009883a 	mov	r4,r16
 200a0f4:	903ee83a 	callr	r18
 200a0f8:	003fed06 	br	200a0b0 <_wcrtomb_r+0x50>

0200a0fc <wcrtomb>:
 200a0fc:	defff604 	addi	sp,sp,-40
 200a100:	008080b4 	movhi	r2,514
 200a104:	dc800615 	stw	r18,24(sp)
 200a108:	dc400515 	stw	r17,20(sp)
 200a10c:	10aaf804 	addi	r2,r2,-21536
 200a110:	dfc00915 	stw	ra,36(sp)
 200a114:	dd000815 	stw	r20,32(sp)
 200a118:	dcc00715 	stw	r19,28(sp)
 200a11c:	dc000415 	stw	r16,16(sp)
 200a120:	3025883a 	mov	r18,r6
 200a124:	14400017 	ldw	r17,0(r2)
 200a128:	20001926 	beq	r4,zero,200a190 <wcrtomb+0x94>
 200a12c:	008080b4 	movhi	r2,514
 200a130:	10aafc04 	addi	r2,r2,-21520
 200a134:	15000017 	ldw	r20,0(r2)
 200a138:	2021883a 	mov	r16,r4
 200a13c:	2827883a 	mov	r19,r5
 200a140:	2005a300 	call	2005a30 <__locale_charset>
 200a144:	100f883a 	mov	r7,r2
 200a148:	dc800015 	stw	r18,0(sp)
 200a14c:	980d883a 	mov	r6,r19
 200a150:	800b883a 	mov	r5,r16
 200a154:	8809883a 	mov	r4,r17
 200a158:	a03ee83a 	callr	r20
 200a15c:	00ffffc4 	movi	r3,-1
 200a160:	10c0031e 	bne	r2,r3,200a170 <wcrtomb+0x74>
 200a164:	90000015 	stw	zero,0(r18)
 200a168:	00c02284 	movi	r3,138
 200a16c:	88c00015 	stw	r3,0(r17)
 200a170:	dfc00917 	ldw	ra,36(sp)
 200a174:	dd000817 	ldw	r20,32(sp)
 200a178:	dcc00717 	ldw	r19,28(sp)
 200a17c:	dc800617 	ldw	r18,24(sp)
 200a180:	dc400517 	ldw	r17,20(sp)
 200a184:	dc000417 	ldw	r16,16(sp)
 200a188:	dec00a04 	addi	sp,sp,40
 200a18c:	f800283a 	ret
 200a190:	008080b4 	movhi	r2,514
 200a194:	10aafc04 	addi	r2,r2,-21520
 200a198:	14000017 	ldw	r16,0(r2)
 200a19c:	2005a300 	call	2005a30 <__locale_charset>
 200a1a0:	100f883a 	mov	r7,r2
 200a1a4:	dc800015 	stw	r18,0(sp)
 200a1a8:	000d883a 	mov	r6,zero
 200a1ac:	d9400104 	addi	r5,sp,4
 200a1b0:	8809883a 	mov	r4,r17
 200a1b4:	803ee83a 	callr	r16
 200a1b8:	003fe806 	br	200a15c <wcrtomb+0x60>

0200a1bc <__ascii_wctomb>:
 200a1bc:	28000526 	beq	r5,zero,200a1d4 <__ascii_wctomb+0x18>
 200a1c0:	00803fc4 	movi	r2,255
 200a1c4:	11800536 	bltu	r2,r6,200a1dc <__ascii_wctomb+0x20>
 200a1c8:	29800005 	stb	r6,0(r5)
 200a1cc:	00800044 	movi	r2,1
 200a1d0:	f800283a 	ret
 200a1d4:	0005883a 	mov	r2,zero
 200a1d8:	f800283a 	ret
 200a1dc:	00802284 	movi	r2,138
 200a1e0:	20800015 	stw	r2,0(r4)
 200a1e4:	00bfffc4 	movi	r2,-1
 200a1e8:	f800283a 	ret

0200a1ec <_wctomb_r>:
 200a1ec:	008080b4 	movhi	r2,514
 200a1f0:	defff904 	addi	sp,sp,-28
 200a1f4:	10aafc04 	addi	r2,r2,-21520
 200a1f8:	dfc00615 	stw	ra,24(sp)
 200a1fc:	dc400515 	stw	r17,20(sp)
 200a200:	dc000415 	stw	r16,16(sp)
 200a204:	3823883a 	mov	r17,r7
 200a208:	14000017 	ldw	r16,0(r2)
 200a20c:	d9000115 	stw	r4,4(sp)
 200a210:	d9400215 	stw	r5,8(sp)
 200a214:	d9800315 	stw	r6,12(sp)
 200a218:	2005a300 	call	2005a30 <__locale_charset>
 200a21c:	d9800317 	ldw	r6,12(sp)
 200a220:	d9400217 	ldw	r5,8(sp)
 200a224:	d9000117 	ldw	r4,4(sp)
 200a228:	100f883a 	mov	r7,r2
 200a22c:	dc400015 	stw	r17,0(sp)
 200a230:	803ee83a 	callr	r16
 200a234:	dfc00617 	ldw	ra,24(sp)
 200a238:	dc400517 	ldw	r17,20(sp)
 200a23c:	dc000417 	ldw	r16,16(sp)
 200a240:	dec00704 	addi	sp,sp,28
 200a244:	f800283a 	ret

0200a248 <__udivdi3>:
 200a248:	defff404 	addi	sp,sp,-48
 200a24c:	dcc00515 	stw	r19,20(sp)
 200a250:	dc000215 	stw	r16,8(sp)
 200a254:	dfc00b15 	stw	ra,44(sp)
 200a258:	df000a15 	stw	fp,40(sp)
 200a25c:	ddc00915 	stw	r23,36(sp)
 200a260:	dd800815 	stw	r22,32(sp)
 200a264:	dd400715 	stw	r21,28(sp)
 200a268:	dd000615 	stw	r20,24(sp)
 200a26c:	dc800415 	stw	r18,16(sp)
 200a270:	dc400315 	stw	r17,12(sp)
 200a274:	2027883a 	mov	r19,r4
 200a278:	2821883a 	mov	r16,r5
 200a27c:	3800461e 	bne	r7,zero,200a398 <__udivdi3+0x150>
 200a280:	3023883a 	mov	r17,r6
 200a284:	2025883a 	mov	r18,r4
 200a288:	2980572e 	bgeu	r5,r6,200a3e8 <__udivdi3+0x1a0>
 200a28c:	00bfffd4 	movui	r2,65535
 200a290:	282d883a 	mov	r22,r5
 200a294:	1180b236 	bltu	r2,r6,200a560 <__udivdi3+0x318>
 200a298:	00803fc4 	movi	r2,255
 200a29c:	1185803a 	cmpltu	r2,r2,r6
 200a2a0:	100490fa 	slli	r2,r2,3
 200a2a4:	3086d83a 	srl	r3,r6,r2
 200a2a8:	010080b4 	movhi	r4,514
 200a2ac:	2123b504 	addi	r4,r4,-28972
 200a2b0:	20c7883a 	add	r3,r4,r3
 200a2b4:	18c00003 	ldbu	r3,0(r3)
 200a2b8:	1885883a 	add	r2,r3,r2
 200a2bc:	00c00804 	movi	r3,32
 200a2c0:	1887c83a 	sub	r3,r3,r2
 200a2c4:	18000526 	beq	r3,zero,200a2dc <__udivdi3+0x94>
 200a2c8:	80e0983a 	sll	r16,r16,r3
 200a2cc:	9884d83a 	srl	r2,r19,r2
 200a2d0:	30e2983a 	sll	r17,r6,r3
 200a2d4:	98e4983a 	sll	r18,r19,r3
 200a2d8:	142cb03a 	or	r22,r2,r16
 200a2dc:	882ad43a 	srli	r21,r17,16
 200a2e0:	b009883a 	mov	r4,r22
 200a2e4:	8d3fffcc 	andi	r20,r17,65535
 200a2e8:	a80b883a 	mov	r5,r21
 200a2ec:	200af640 	call	200af64 <__umodsi3>
 200a2f0:	b009883a 	mov	r4,r22
 200a2f4:	a80b883a 	mov	r5,r21
 200a2f8:	1027883a 	mov	r19,r2
 200a2fc:	200af000 	call	200af00 <__udivsi3>
 200a300:	100b883a 	mov	r5,r2
 200a304:	a009883a 	mov	r4,r20
 200a308:	102d883a 	mov	r22,r2
 200a30c:	200afbc0 	call	200afbc <__mulsi3>
 200a310:	9826943a 	slli	r19,r19,16
 200a314:	9006d43a 	srli	r3,r18,16
 200a318:	1cc6b03a 	or	r3,r3,r19
 200a31c:	1880052e 	bgeu	r3,r2,200a334 <__udivdi3+0xec>
 200a320:	1c47883a 	add	r3,r3,r17
 200a324:	b13fffc4 	addi	r4,r22,-1
 200a328:	1c400136 	bltu	r3,r17,200a330 <__udivdi3+0xe8>
 200a32c:	18814236 	bltu	r3,r2,200a838 <__udivdi3+0x5f0>
 200a330:	202d883a 	mov	r22,r4
 200a334:	18a1c83a 	sub	r16,r3,r2
 200a338:	8009883a 	mov	r4,r16
 200a33c:	a80b883a 	mov	r5,r21
 200a340:	200af640 	call	200af64 <__umodsi3>
 200a344:	1027883a 	mov	r19,r2
 200a348:	8009883a 	mov	r4,r16
 200a34c:	a80b883a 	mov	r5,r21
 200a350:	9826943a 	slli	r19,r19,16
 200a354:	200af000 	call	200af00 <__udivsi3>
 200a358:	100b883a 	mov	r5,r2
 200a35c:	a009883a 	mov	r4,r20
 200a360:	94bfffcc 	andi	r18,r18,65535
 200a364:	1021883a 	mov	r16,r2
 200a368:	94e4b03a 	or	r18,r18,r19
 200a36c:	200afbc0 	call	200afbc <__mulsi3>
 200a370:	9080052e 	bgeu	r18,r2,200a388 <__udivdi3+0x140>
 200a374:	8ca5883a 	add	r18,r17,r18
 200a378:	80ffffc4 	addi	r3,r16,-1
 200a37c:	94410c36 	bltu	r18,r17,200a7b0 <__udivdi3+0x568>
 200a380:	90810b2e 	bgeu	r18,r2,200a7b0 <__udivdi3+0x568>
 200a384:	843fff84 	addi	r16,r16,-2
 200a388:	b004943a 	slli	r2,r22,16
 200a38c:	0007883a 	mov	r3,zero
 200a390:	1404b03a 	or	r2,r2,r16
 200a394:	00005e06 	br	200a510 <__udivdi3+0x2c8>
 200a398:	29c05b36 	bltu	r5,r7,200a508 <__udivdi3+0x2c0>
 200a39c:	00bfffd4 	movui	r2,65535
 200a3a0:	11c0672e 	bgeu	r2,r7,200a540 <__udivdi3+0x2f8>
 200a3a4:	00804034 	movhi	r2,256
 200a3a8:	10bfffc4 	addi	r2,r2,-1
 200a3ac:	11c10a36 	bltu	r2,r7,200a7d8 <__udivdi3+0x590>
 200a3b0:	00800404 	movi	r2,16
 200a3b4:	3886d83a 	srl	r3,r7,r2
 200a3b8:	010080b4 	movhi	r4,514
 200a3bc:	2123b504 	addi	r4,r4,-28972
 200a3c0:	20c7883a 	add	r3,r4,r3
 200a3c4:	18c00003 	ldbu	r3,0(r3)
 200a3c8:	05c00804 	movi	r23,32
 200a3cc:	1885883a 	add	r2,r3,r2
 200a3d0:	b8afc83a 	sub	r23,r23,r2
 200a3d4:	b800671e 	bne	r23,zero,200a574 <__udivdi3+0x32c>
 200a3d8:	3c010536 	bltu	r7,r16,200a7f0 <__udivdi3+0x5a8>
 200a3dc:	9985403a 	cmpgeu	r2,r19,r6
 200a3e0:	0007883a 	mov	r3,zero
 200a3e4:	00004a06 	br	200a510 <__udivdi3+0x2c8>
 200a3e8:	3000041e 	bne	r6,zero,200a3fc <__udivdi3+0x1b4>
 200a3ec:	000b883a 	mov	r5,zero
 200a3f0:	01000044 	movi	r4,1
 200a3f4:	200af000 	call	200af00 <__udivsi3>
 200a3f8:	1023883a 	mov	r17,r2
 200a3fc:	00bfffd4 	movui	r2,65535
 200a400:	1440532e 	bgeu	r2,r17,200a550 <__udivdi3+0x308>
 200a404:	00804034 	movhi	r2,256
 200a408:	10bfffc4 	addi	r2,r2,-1
 200a40c:	1440f436 	bltu	r2,r17,200a7e0 <__udivdi3+0x598>
 200a410:	00800404 	movi	r2,16
 200a414:	8886d83a 	srl	r3,r17,r2
 200a418:	010080b4 	movhi	r4,514
 200a41c:	2123b504 	addi	r4,r4,-28972
 200a420:	20c7883a 	add	r3,r4,r3
 200a424:	18c00003 	ldbu	r3,0(r3)
 200a428:	1885883a 	add	r2,r3,r2
 200a42c:	00c00804 	movi	r3,32
 200a430:	1887c83a 	sub	r3,r3,r2
 200a434:	1800a51e 	bne	r3,zero,200a6cc <__udivdi3+0x484>
 200a438:	882ad43a 	srli	r21,r17,16
 200a43c:	8461c83a 	sub	r16,r16,r17
 200a440:	8d3fffcc 	andi	r20,r17,65535
 200a444:	00c00044 	movi	r3,1
 200a448:	a80b883a 	mov	r5,r21
 200a44c:	8009883a 	mov	r4,r16
 200a450:	d8c00115 	stw	r3,4(sp)
 200a454:	200af640 	call	200af64 <__umodsi3>
 200a458:	a80b883a 	mov	r5,r21
 200a45c:	8009883a 	mov	r4,r16
 200a460:	1027883a 	mov	r19,r2
 200a464:	200af000 	call	200af00 <__udivsi3>
 200a468:	a00b883a 	mov	r5,r20
 200a46c:	1009883a 	mov	r4,r2
 200a470:	102d883a 	mov	r22,r2
 200a474:	200afbc0 	call	200afbc <__mulsi3>
 200a478:	9826943a 	slli	r19,r19,16
 200a47c:	900ed43a 	srli	r7,r18,16
 200a480:	d8c00117 	ldw	r3,4(sp)
 200a484:	3cceb03a 	or	r7,r7,r19
 200a488:	3880052e 	bgeu	r7,r2,200a4a0 <__udivdi3+0x258>
 200a48c:	3c4f883a 	add	r7,r7,r17
 200a490:	b13fffc4 	addi	r4,r22,-1
 200a494:	3c400136 	bltu	r7,r17,200a49c <__udivdi3+0x254>
 200a498:	3880e436 	bltu	r7,r2,200a82c <__udivdi3+0x5e4>
 200a49c:	202d883a 	mov	r22,r4
 200a4a0:	38a1c83a 	sub	r16,r7,r2
 200a4a4:	8009883a 	mov	r4,r16
 200a4a8:	a80b883a 	mov	r5,r21
 200a4ac:	d8c00115 	stw	r3,4(sp)
 200a4b0:	200af640 	call	200af64 <__umodsi3>
 200a4b4:	1027883a 	mov	r19,r2
 200a4b8:	8009883a 	mov	r4,r16
 200a4bc:	a80b883a 	mov	r5,r21
 200a4c0:	9826943a 	slli	r19,r19,16
 200a4c4:	200af000 	call	200af00 <__udivsi3>
 200a4c8:	a00b883a 	mov	r5,r20
 200a4cc:	1009883a 	mov	r4,r2
 200a4d0:	94bfffcc 	andi	r18,r18,65535
 200a4d4:	1021883a 	mov	r16,r2
 200a4d8:	94e4b03a 	or	r18,r18,r19
 200a4dc:	200afbc0 	call	200afbc <__mulsi3>
 200a4e0:	d8c00117 	ldw	r3,4(sp)
 200a4e4:	9080052e 	bgeu	r18,r2,200a4fc <__udivdi3+0x2b4>
 200a4e8:	8ca5883a 	add	r18,r17,r18
 200a4ec:	813fffc4 	addi	r4,r16,-1
 200a4f0:	9440ad36 	bltu	r18,r17,200a7a8 <__udivdi3+0x560>
 200a4f4:	9080ac2e 	bgeu	r18,r2,200a7a8 <__udivdi3+0x560>
 200a4f8:	843fff84 	addi	r16,r16,-2
 200a4fc:	b004943a 	slli	r2,r22,16
 200a500:	1404b03a 	or	r2,r2,r16
 200a504:	00000206 	br	200a510 <__udivdi3+0x2c8>
 200a508:	0007883a 	mov	r3,zero
 200a50c:	0005883a 	mov	r2,zero
 200a510:	dfc00b17 	ldw	ra,44(sp)
 200a514:	df000a17 	ldw	fp,40(sp)
 200a518:	ddc00917 	ldw	r23,36(sp)
 200a51c:	dd800817 	ldw	r22,32(sp)
 200a520:	dd400717 	ldw	r21,28(sp)
 200a524:	dd000617 	ldw	r20,24(sp)
 200a528:	dcc00517 	ldw	r19,20(sp)
 200a52c:	dc800417 	ldw	r18,16(sp)
 200a530:	dc400317 	ldw	r17,12(sp)
 200a534:	dc000217 	ldw	r16,8(sp)
 200a538:	dec00c04 	addi	sp,sp,48
 200a53c:	f800283a 	ret
 200a540:	00803fc4 	movi	r2,255
 200a544:	11c5803a 	cmpltu	r2,r2,r7
 200a548:	100490fa 	slli	r2,r2,3
 200a54c:	003f9906 	br	200a3b4 <__udivdi3+0x16c>
 200a550:	00803fc4 	movi	r2,255
 200a554:	1445803a 	cmpltu	r2,r2,r17
 200a558:	100490fa 	slli	r2,r2,3
 200a55c:	003fad06 	br	200a414 <__udivdi3+0x1cc>
 200a560:	00804034 	movhi	r2,256
 200a564:	10bfffc4 	addi	r2,r2,-1
 200a568:	11809f36 	bltu	r2,r6,200a7e8 <__udivdi3+0x5a0>
 200a56c:	00800404 	movi	r2,16
 200a570:	003f4c06 	br	200a2a4 <__udivdi3+0x5c>
 200a574:	3dce983a 	sll	r7,r7,r23
 200a578:	30b8d83a 	srl	fp,r6,r2
 200a57c:	80a2d83a 	srl	r17,r16,r2
 200a580:	35cc983a 	sll	r6,r6,r23
 200a584:	3f38b03a 	or	fp,r7,fp
 200a588:	e024d43a 	srli	r18,fp,16
 200a58c:	9884d83a 	srl	r2,r19,r2
 200a590:	85e0983a 	sll	r16,r16,r23
 200a594:	8809883a 	mov	r4,r17
 200a598:	900b883a 	mov	r5,r18
 200a59c:	d9800015 	stw	r6,0(sp)
 200a5a0:	1420b03a 	or	r16,r2,r16
 200a5a4:	200af640 	call	200af64 <__umodsi3>
 200a5a8:	900b883a 	mov	r5,r18
 200a5ac:	8809883a 	mov	r4,r17
 200a5b0:	1029883a 	mov	r20,r2
 200a5b4:	e5bfffcc 	andi	r22,fp,65535
 200a5b8:	200af000 	call	200af00 <__udivsi3>
 200a5bc:	100b883a 	mov	r5,r2
 200a5c0:	b009883a 	mov	r4,r22
 200a5c4:	102b883a 	mov	r21,r2
 200a5c8:	200afbc0 	call	200afbc <__mulsi3>
 200a5cc:	a028943a 	slli	r20,r20,16
 200a5d0:	8006d43a 	srli	r3,r16,16
 200a5d4:	1d06b03a 	or	r3,r3,r20
 200a5d8:	1880042e 	bgeu	r3,r2,200a5ec <__udivdi3+0x3a4>
 200a5dc:	1f07883a 	add	r3,r3,fp
 200a5e0:	a93fffc4 	addi	r4,r21,-1
 200a5e4:	1f00892e 	bgeu	r3,fp,200a80c <__udivdi3+0x5c4>
 200a5e8:	202b883a 	mov	r21,r4
 200a5ec:	18a3c83a 	sub	r17,r3,r2
 200a5f0:	8809883a 	mov	r4,r17
 200a5f4:	900b883a 	mov	r5,r18
 200a5f8:	200af640 	call	200af64 <__umodsi3>
 200a5fc:	1029883a 	mov	r20,r2
 200a600:	8809883a 	mov	r4,r17
 200a604:	900b883a 	mov	r5,r18
 200a608:	a028943a 	slli	r20,r20,16
 200a60c:	200af000 	call	200af00 <__udivsi3>
 200a610:	100b883a 	mov	r5,r2
 200a614:	b009883a 	mov	r4,r22
 200a618:	843fffcc 	andi	r16,r16,65535
 200a61c:	1023883a 	mov	r17,r2
 200a620:	8520b03a 	or	r16,r16,r20
 200a624:	200afbc0 	call	200afbc <__mulsi3>
 200a628:	8080042e 	bgeu	r16,r2,200a63c <__udivdi3+0x3f4>
 200a62c:	8721883a 	add	r16,r16,fp
 200a630:	88ffffc4 	addi	r3,r17,-1
 200a634:	8700712e 	bgeu	r16,fp,200a7fc <__udivdi3+0x5b4>
 200a638:	1823883a 	mov	r17,r3
 200a63c:	a80e943a 	slli	r7,r21,16
 200a640:	d8c00017 	ldw	r3,0(sp)
 200a644:	80a1c83a 	sub	r16,r16,r2
 200a648:	3c64b03a 	or	r18,r7,r17
 200a64c:	1d3fffcc 	andi	r20,r3,65535
 200a650:	9022d43a 	srli	r17,r18,16
 200a654:	95bfffcc 	andi	r22,r18,65535
 200a658:	a00b883a 	mov	r5,r20
 200a65c:	b009883a 	mov	r4,r22
 200a660:	182ad43a 	srli	r21,r3,16
 200a664:	200afbc0 	call	200afbc <__mulsi3>
 200a668:	a00b883a 	mov	r5,r20
 200a66c:	8809883a 	mov	r4,r17
 200a670:	1039883a 	mov	fp,r2
 200a674:	200afbc0 	call	200afbc <__mulsi3>
 200a678:	8809883a 	mov	r4,r17
 200a67c:	a80b883a 	mov	r5,r21
 200a680:	1029883a 	mov	r20,r2
 200a684:	200afbc0 	call	200afbc <__mulsi3>
 200a688:	a80b883a 	mov	r5,r21
 200a68c:	b009883a 	mov	r4,r22
 200a690:	1023883a 	mov	r17,r2
 200a694:	200afbc0 	call	200afbc <__mulsi3>
 200a698:	e006d43a 	srli	r3,fp,16
 200a69c:	1505883a 	add	r2,r2,r20
 200a6a0:	1887883a 	add	r3,r3,r2
 200a6a4:	1d00022e 	bgeu	r3,r20,200a6b0 <__udivdi3+0x468>
 200a6a8:	00800074 	movhi	r2,1
 200a6ac:	88a3883a 	add	r17,r17,r2
 200a6b0:	1804d43a 	srli	r2,r3,16
 200a6b4:	1463883a 	add	r17,r2,r17
 200a6b8:	84404436 	bltu	r16,r17,200a7cc <__udivdi3+0x584>
 200a6bc:	84403e26 	beq	r16,r17,200a7b8 <__udivdi3+0x570>
 200a6c0:	9005883a 	mov	r2,r18
 200a6c4:	0007883a 	mov	r3,zero
 200a6c8:	003f9106 	br	200a510 <__udivdi3+0x2c8>
 200a6cc:	88e2983a 	sll	r17,r17,r3
 200a6d0:	80aed83a 	srl	r23,r16,r2
 200a6d4:	80e0983a 	sll	r16,r16,r3
 200a6d8:	882ad43a 	srli	r21,r17,16
 200a6dc:	9884d83a 	srl	r2,r19,r2
 200a6e0:	b809883a 	mov	r4,r23
 200a6e4:	a80b883a 	mov	r5,r21
 200a6e8:	98e4983a 	sll	r18,r19,r3
 200a6ec:	142cb03a 	or	r22,r2,r16
 200a6f0:	200af640 	call	200af64 <__umodsi3>
 200a6f4:	b809883a 	mov	r4,r23
 200a6f8:	a80b883a 	mov	r5,r21
 200a6fc:	1027883a 	mov	r19,r2
 200a700:	8d3fffcc 	andi	r20,r17,65535
 200a704:	200af000 	call	200af00 <__udivsi3>
 200a708:	a009883a 	mov	r4,r20
 200a70c:	100b883a 	mov	r5,r2
 200a710:	102f883a 	mov	r23,r2
 200a714:	200afbc0 	call	200afbc <__mulsi3>
 200a718:	9826943a 	slli	r19,r19,16
 200a71c:	b008d43a 	srli	r4,r22,16
 200a720:	24c8b03a 	or	r4,r4,r19
 200a724:	2080062e 	bgeu	r4,r2,200a740 <__udivdi3+0x4f8>
 200a728:	2449883a 	add	r4,r4,r17
 200a72c:	b8ffffc4 	addi	r3,r23,-1
 200a730:	24403c36 	bltu	r4,r17,200a824 <__udivdi3+0x5dc>
 200a734:	20803b2e 	bgeu	r4,r2,200a824 <__udivdi3+0x5dc>
 200a738:	bdffff84 	addi	r23,r23,-2
 200a73c:	2449883a 	add	r4,r4,r17
 200a740:	20a1c83a 	sub	r16,r4,r2
 200a744:	a80b883a 	mov	r5,r21
 200a748:	8009883a 	mov	r4,r16
 200a74c:	200af640 	call	200af64 <__umodsi3>
 200a750:	a80b883a 	mov	r5,r21
 200a754:	8009883a 	mov	r4,r16
 200a758:	1027883a 	mov	r19,r2
 200a75c:	200af000 	call	200af00 <__udivsi3>
 200a760:	a009883a 	mov	r4,r20
 200a764:	100b883a 	mov	r5,r2
 200a768:	9826943a 	slli	r19,r19,16
 200a76c:	1039883a 	mov	fp,r2
 200a770:	200afbc0 	call	200afbc <__mulsi3>
 200a774:	b13fffcc 	andi	r4,r22,65535
 200a778:	24c8b03a 	or	r4,r4,r19
 200a77c:	2080062e 	bgeu	r4,r2,200a798 <__udivdi3+0x550>
 200a780:	2449883a 	add	r4,r4,r17
 200a784:	e0ffffc4 	addi	r3,fp,-1
 200a788:	24402436 	bltu	r4,r17,200a81c <__udivdi3+0x5d4>
 200a78c:	2080232e 	bgeu	r4,r2,200a81c <__udivdi3+0x5d4>
 200a790:	e73fff84 	addi	fp,fp,-2
 200a794:	2449883a 	add	r4,r4,r17
 200a798:	b82e943a 	slli	r23,r23,16
 200a79c:	20a1c83a 	sub	r16,r4,r2
 200a7a0:	bf06b03a 	or	r3,r23,fp
 200a7a4:	003f2806 	br	200a448 <__udivdi3+0x200>
 200a7a8:	2021883a 	mov	r16,r4
 200a7ac:	003f5306 	br	200a4fc <__udivdi3+0x2b4>
 200a7b0:	1821883a 	mov	r16,r3
 200a7b4:	003ef406 	br	200a388 <__udivdi3+0x140>
 200a7b8:	1806943a 	slli	r3,r3,16
 200a7bc:	9de6983a 	sll	r19,r19,r23
 200a7c0:	e73fffcc 	andi	fp,fp,65535
 200a7c4:	1f07883a 	add	r3,r3,fp
 200a7c8:	98ffbd2e 	bgeu	r19,r3,200a6c0 <__udivdi3+0x478>
 200a7cc:	90bfffc4 	addi	r2,r18,-1
 200a7d0:	0007883a 	mov	r3,zero
 200a7d4:	003f4e06 	br	200a510 <__udivdi3+0x2c8>
 200a7d8:	00800604 	movi	r2,24
 200a7dc:	003ef506 	br	200a3b4 <__udivdi3+0x16c>
 200a7e0:	00800604 	movi	r2,24
 200a7e4:	003f0b06 	br	200a414 <__udivdi3+0x1cc>
 200a7e8:	00800604 	movi	r2,24
 200a7ec:	003ead06 	br	200a2a4 <__udivdi3+0x5c>
 200a7f0:	0007883a 	mov	r3,zero
 200a7f4:	00800044 	movi	r2,1
 200a7f8:	003f4506 	br	200a510 <__udivdi3+0x2c8>
 200a7fc:	80bf8e2e 	bgeu	r16,r2,200a638 <__udivdi3+0x3f0>
 200a800:	8c7fff84 	addi	r17,r17,-2
 200a804:	8721883a 	add	r16,r16,fp
 200a808:	003f8c06 	br	200a63c <__udivdi3+0x3f4>
 200a80c:	18bf762e 	bgeu	r3,r2,200a5e8 <__udivdi3+0x3a0>
 200a810:	ad7fff84 	addi	r21,r21,-2
 200a814:	1f07883a 	add	r3,r3,fp
 200a818:	003f7406 	br	200a5ec <__udivdi3+0x3a4>
 200a81c:	1839883a 	mov	fp,r3
 200a820:	003fdd06 	br	200a798 <__udivdi3+0x550>
 200a824:	182f883a 	mov	r23,r3
 200a828:	003fc506 	br	200a740 <__udivdi3+0x4f8>
 200a82c:	b5bfff84 	addi	r22,r22,-2
 200a830:	3c4f883a 	add	r7,r7,r17
 200a834:	003f1a06 	br	200a4a0 <__udivdi3+0x258>
 200a838:	b5bfff84 	addi	r22,r22,-2
 200a83c:	1c47883a 	add	r3,r3,r17
 200a840:	003ebc06 	br	200a334 <__udivdi3+0xec>

0200a844 <__umoddi3>:
 200a844:	defff304 	addi	sp,sp,-52
 200a848:	df000b15 	stw	fp,44(sp)
 200a84c:	dc400415 	stw	r17,16(sp)
 200a850:	dc000315 	stw	r16,12(sp)
 200a854:	dfc00c15 	stw	ra,48(sp)
 200a858:	ddc00a15 	stw	r23,40(sp)
 200a85c:	dd800915 	stw	r22,36(sp)
 200a860:	dd400815 	stw	r21,32(sp)
 200a864:	dd000715 	stw	r20,28(sp)
 200a868:	dcc00615 	stw	r19,24(sp)
 200a86c:	dc800515 	stw	r18,20(sp)
 200a870:	2021883a 	mov	r16,r4
 200a874:	2823883a 	mov	r17,r5
 200a878:	2839883a 	mov	fp,r5
 200a87c:	3800401e 	bne	r7,zero,200a980 <__umoddi3+0x13c>
 200a880:	3027883a 	mov	r19,r6
 200a884:	2029883a 	mov	r20,r4
 200a888:	2980552e 	bgeu	r5,r6,200a9e0 <__umoddi3+0x19c>
 200a88c:	00bfffd4 	movui	r2,65535
 200a890:	1180a236 	bltu	r2,r6,200ab1c <__umoddi3+0x2d8>
 200a894:	01003fc4 	movi	r4,255
 200a898:	2189803a 	cmpltu	r4,r4,r6
 200a89c:	200890fa 	slli	r4,r4,3
 200a8a0:	3104d83a 	srl	r2,r6,r4
 200a8a4:	00c080b4 	movhi	r3,514
 200a8a8:	18e3b504 	addi	r3,r3,-28972
 200a8ac:	1885883a 	add	r2,r3,r2
 200a8b0:	10c00003 	ldbu	r3,0(r2)
 200a8b4:	00800804 	movi	r2,32
 200a8b8:	1909883a 	add	r4,r3,r4
 200a8bc:	1125c83a 	sub	r18,r2,r4
 200a8c0:	90000526 	beq	r18,zero,200a8d8 <__umoddi3+0x94>
 200a8c4:	8ca2983a 	sll	r17,r17,r18
 200a8c8:	8108d83a 	srl	r4,r16,r4
 200a8cc:	34a6983a 	sll	r19,r6,r18
 200a8d0:	84a8983a 	sll	r20,r16,r18
 200a8d4:	2478b03a 	or	fp,r4,r17
 200a8d8:	982cd43a 	srli	r22,r19,16
 200a8dc:	e009883a 	mov	r4,fp
 200a8e0:	9dffffcc 	andi	r23,r19,65535
 200a8e4:	b00b883a 	mov	r5,r22
 200a8e8:	200af640 	call	200af64 <__umodsi3>
 200a8ec:	b00b883a 	mov	r5,r22
 200a8f0:	e009883a 	mov	r4,fp
 200a8f4:	102b883a 	mov	r21,r2
 200a8f8:	200af000 	call	200af00 <__udivsi3>
 200a8fc:	100b883a 	mov	r5,r2
 200a900:	b809883a 	mov	r4,r23
 200a904:	200afbc0 	call	200afbc <__mulsi3>
 200a908:	a82a943a 	slli	r21,r21,16
 200a90c:	a006d43a 	srli	r3,r20,16
 200a910:	1d46b03a 	or	r3,r3,r21
 200a914:	1880032e 	bgeu	r3,r2,200a924 <__umoddi3+0xe0>
 200a918:	1cc7883a 	add	r3,r3,r19
 200a91c:	1cc00136 	bltu	r3,r19,200a924 <__umoddi3+0xe0>
 200a920:	18813136 	bltu	r3,r2,200ade8 <__umoddi3+0x5a4>
 200a924:	18a1c83a 	sub	r16,r3,r2
 200a928:	b00b883a 	mov	r5,r22
 200a92c:	8009883a 	mov	r4,r16
 200a930:	200af640 	call	200af64 <__umodsi3>
 200a934:	b00b883a 	mov	r5,r22
 200a938:	8009883a 	mov	r4,r16
 200a93c:	1023883a 	mov	r17,r2
 200a940:	200af000 	call	200af00 <__udivsi3>
 200a944:	100b883a 	mov	r5,r2
 200a948:	b809883a 	mov	r4,r23
 200a94c:	8822943a 	slli	r17,r17,16
 200a950:	200afbc0 	call	200afbc <__mulsi3>
 200a954:	a0ffffcc 	andi	r3,r20,65535
 200a958:	1c46b03a 	or	r3,r3,r17
 200a95c:	1880042e 	bgeu	r3,r2,200a970 <__umoddi3+0x12c>
 200a960:	1cc7883a 	add	r3,r3,r19
 200a964:	1cc00236 	bltu	r3,r19,200a970 <__umoddi3+0x12c>
 200a968:	1880012e 	bgeu	r3,r2,200a970 <__umoddi3+0x12c>
 200a96c:	1cc7883a 	add	r3,r3,r19
 200a970:	1885c83a 	sub	r2,r3,r2
 200a974:	1484d83a 	srl	r2,r2,r18
 200a978:	0007883a 	mov	r3,zero
 200a97c:	00005306 	br	200aacc <__umoddi3+0x288>
 200a980:	29c05036 	bltu	r5,r7,200aac4 <__umoddi3+0x280>
 200a984:	00bfffd4 	movui	r2,65535
 200a988:	11c05c2e 	bgeu	r2,r7,200aafc <__umoddi3+0x2b8>
 200a98c:	00804034 	movhi	r2,256
 200a990:	10bfffc4 	addi	r2,r2,-1
 200a994:	11c10636 	bltu	r2,r7,200adb0 <__umoddi3+0x56c>
 200a998:	01000404 	movi	r4,16
 200a99c:	3904d83a 	srl	r2,r7,r4
 200a9a0:	00c080b4 	movhi	r3,514
 200a9a4:	18e3b504 	addi	r3,r3,-28972
 200a9a8:	1885883a 	add	r2,r3,r2
 200a9ac:	14c00003 	ldbu	r19,0(r2)
 200a9b0:	00c00804 	movi	r3,32
 200a9b4:	9927883a 	add	r19,r19,r4
 200a9b8:	1ce9c83a 	sub	r20,r3,r19
 200a9bc:	a0005c1e 	bne	r20,zero,200ab30 <__umoddi3+0x2ec>
 200a9c0:	3c400136 	bltu	r7,r17,200a9c8 <__umoddi3+0x184>
 200a9c4:	81810a36 	bltu	r16,r6,200adf0 <__umoddi3+0x5ac>
 200a9c8:	8185c83a 	sub	r2,r16,r6
 200a9cc:	89e3c83a 	sub	r17,r17,r7
 200a9d0:	8089803a 	cmpltu	r4,r16,r2
 200a9d4:	8939c83a 	sub	fp,r17,r4
 200a9d8:	e007883a 	mov	r3,fp
 200a9dc:	00003b06 	br	200aacc <__umoddi3+0x288>
 200a9e0:	3000041e 	bne	r6,zero,200a9f4 <__umoddi3+0x1b0>
 200a9e4:	000b883a 	mov	r5,zero
 200a9e8:	01000044 	movi	r4,1
 200a9ec:	200af000 	call	200af00 <__udivsi3>
 200a9f0:	1027883a 	mov	r19,r2
 200a9f4:	00bfffd4 	movui	r2,65535
 200a9f8:	14c0442e 	bgeu	r2,r19,200ab0c <__umoddi3+0x2c8>
 200a9fc:	00804034 	movhi	r2,256
 200aa00:	10bfffc4 	addi	r2,r2,-1
 200aa04:	14c0ec36 	bltu	r2,r19,200adb8 <__umoddi3+0x574>
 200aa08:	00800404 	movi	r2,16
 200aa0c:	9886d83a 	srl	r3,r19,r2
 200aa10:	010080b4 	movhi	r4,514
 200aa14:	2123b504 	addi	r4,r4,-28972
 200aa18:	20c7883a 	add	r3,r4,r3
 200aa1c:	18c00003 	ldbu	r3,0(r3)
 200aa20:	1887883a 	add	r3,r3,r2
 200aa24:	00800804 	movi	r2,32
 200aa28:	10e5c83a 	sub	r18,r2,r3
 200aa2c:	9000ab1e 	bne	r18,zero,200acdc <__umoddi3+0x498>
 200aa30:	982cd43a 	srli	r22,r19,16
 200aa34:	8ce3c83a 	sub	r17,r17,r19
 200aa38:	9dffffcc 	andi	r23,r19,65535
 200aa3c:	b00b883a 	mov	r5,r22
 200aa40:	8809883a 	mov	r4,r17
 200aa44:	200af640 	call	200af64 <__umodsi3>
 200aa48:	b00b883a 	mov	r5,r22
 200aa4c:	8809883a 	mov	r4,r17
 200aa50:	102b883a 	mov	r21,r2
 200aa54:	200af000 	call	200af00 <__udivsi3>
 200aa58:	b80b883a 	mov	r5,r23
 200aa5c:	1009883a 	mov	r4,r2
 200aa60:	200afbc0 	call	200afbc <__mulsi3>
 200aa64:	a82a943a 	slli	r21,r21,16
 200aa68:	a006d43a 	srli	r3,r20,16
 200aa6c:	1d46b03a 	or	r3,r3,r21
 200aa70:	1880042e 	bgeu	r3,r2,200aa84 <__umoddi3+0x240>
 200aa74:	1cc7883a 	add	r3,r3,r19
 200aa78:	1cc00236 	bltu	r3,r19,200aa84 <__umoddi3+0x240>
 200aa7c:	1880012e 	bgeu	r3,r2,200aa84 <__umoddi3+0x240>
 200aa80:	1cc7883a 	add	r3,r3,r19
 200aa84:	18a1c83a 	sub	r16,r3,r2
 200aa88:	b00b883a 	mov	r5,r22
 200aa8c:	8009883a 	mov	r4,r16
 200aa90:	200af640 	call	200af64 <__umodsi3>
 200aa94:	1023883a 	mov	r17,r2
 200aa98:	b00b883a 	mov	r5,r22
 200aa9c:	8009883a 	mov	r4,r16
 200aaa0:	200af000 	call	200af00 <__udivsi3>
 200aaa4:	8822943a 	slli	r17,r17,16
 200aaa8:	b80b883a 	mov	r5,r23
 200aaac:	1009883a 	mov	r4,r2
 200aab0:	200afbc0 	call	200afbc <__mulsi3>
 200aab4:	a53fffcc 	andi	r20,r20,65535
 200aab8:	a446b03a 	or	r3,r20,r17
 200aabc:	18bfac2e 	bgeu	r3,r2,200a970 <__umoddi3+0x12c>
 200aac0:	003fa706 	br	200a960 <__umoddi3+0x11c>
 200aac4:	2005883a 	mov	r2,r4
 200aac8:	2807883a 	mov	r3,r5
 200aacc:	dfc00c17 	ldw	ra,48(sp)
 200aad0:	df000b17 	ldw	fp,44(sp)
 200aad4:	ddc00a17 	ldw	r23,40(sp)
 200aad8:	dd800917 	ldw	r22,36(sp)
 200aadc:	dd400817 	ldw	r21,32(sp)
 200aae0:	dd000717 	ldw	r20,28(sp)
 200aae4:	dcc00617 	ldw	r19,24(sp)
 200aae8:	dc800517 	ldw	r18,20(sp)
 200aaec:	dc400417 	ldw	r17,16(sp)
 200aaf0:	dc000317 	ldw	r16,12(sp)
 200aaf4:	dec00d04 	addi	sp,sp,52
 200aaf8:	f800283a 	ret
 200aafc:	04c03fc4 	movi	r19,255
 200ab00:	99c9803a 	cmpltu	r4,r19,r7
 200ab04:	200890fa 	slli	r4,r4,3
 200ab08:	003fa406 	br	200a99c <__umoddi3+0x158>
 200ab0c:	00803fc4 	movi	r2,255
 200ab10:	14c5803a 	cmpltu	r2,r2,r19
 200ab14:	100490fa 	slli	r2,r2,3
 200ab18:	003fbc06 	br	200aa0c <__umoddi3+0x1c8>
 200ab1c:	00804034 	movhi	r2,256
 200ab20:	10bfffc4 	addi	r2,r2,-1
 200ab24:	1180a636 	bltu	r2,r6,200adc0 <__umoddi3+0x57c>
 200ab28:	01000404 	movi	r4,16
 200ab2c:	003f5c06 	br	200a8a0 <__umoddi3+0x5c>
 200ab30:	3d0e983a 	sll	r7,r7,r20
 200ab34:	34ead83a 	srl	r21,r6,r19
 200ab38:	8cc6d83a 	srl	r3,r17,r19
 200ab3c:	8d10983a 	sll	r8,r17,r20
 200ab40:	3d6ab03a 	or	r21,r7,r21
 200ab44:	a82cd43a 	srli	r22,r21,16
 200ab48:	84e2d83a 	srl	r17,r16,r19
 200ab4c:	1809883a 	mov	r4,r3
 200ab50:	b00b883a 	mov	r5,r22
 200ab54:	8a22b03a 	or	r17,r17,r8
 200ab58:	3524983a 	sll	r18,r6,r20
 200ab5c:	dc400015 	stw	r17,0(sp)
 200ab60:	d8c00115 	stw	r3,4(sp)
 200ab64:	200af640 	call	200af64 <__umodsi3>
 200ab68:	d8c00117 	ldw	r3,4(sp)
 200ab6c:	b00b883a 	mov	r5,r22
 200ab70:	1039883a 	mov	fp,r2
 200ab74:	1809883a 	mov	r4,r3
 200ab78:	200af000 	call	200af00 <__udivsi3>
 200ab7c:	adffffcc 	andi	r23,r21,65535
 200ab80:	100b883a 	mov	r5,r2
 200ab84:	b809883a 	mov	r4,r23
 200ab88:	1023883a 	mov	r17,r2
 200ab8c:	200afbc0 	call	200afbc <__mulsi3>
 200ab90:	d9400017 	ldw	r5,0(sp)
 200ab94:	e008943a 	slli	r4,fp,16
 200ab98:	8520983a 	sll	r16,r16,r20
 200ab9c:	2806d43a 	srli	r3,r5,16
 200aba0:	1906b03a 	or	r3,r3,r4
 200aba4:	1880042e 	bgeu	r3,r2,200abb8 <__umoddi3+0x374>
 200aba8:	1d47883a 	add	r3,r3,r21
 200abac:	893fffc4 	addi	r4,r17,-1
 200abb0:	1d40892e 	bgeu	r3,r21,200add8 <__umoddi3+0x594>
 200abb4:	2023883a 	mov	r17,r4
 200abb8:	18b9c83a 	sub	fp,r3,r2
 200abbc:	b00b883a 	mov	r5,r22
 200abc0:	e009883a 	mov	r4,fp
 200abc4:	200af640 	call	200af64 <__umodsi3>
 200abc8:	b00b883a 	mov	r5,r22
 200abcc:	e009883a 	mov	r4,fp
 200abd0:	d8800215 	stw	r2,8(sp)
 200abd4:	200af000 	call	200af00 <__udivsi3>
 200abd8:	100b883a 	mov	r5,r2
 200abdc:	b809883a 	mov	r4,r23
 200abe0:	102d883a 	mov	r22,r2
 200abe4:	200afbc0 	call	200afbc <__mulsi3>
 200abe8:	d9800217 	ldw	r6,8(sp)
 200abec:	d8c00017 	ldw	r3,0(sp)
 200abf0:	300c943a 	slli	r6,r6,16
 200abf4:	1a3fffcc 	andi	r8,r3,65535
 200abf8:	4190b03a 	or	r8,r8,r6
 200abfc:	4080042e 	bgeu	r8,r2,200ac10 <__umoddi3+0x3cc>
 200ac00:	4551883a 	add	r8,r8,r21
 200ac04:	b0ffffc4 	addi	r3,r22,-1
 200ac08:	45406f2e 	bgeu	r8,r21,200adc8 <__umoddi3+0x584>
 200ac0c:	182d883a 	mov	r22,r3
 200ac10:	880e943a 	slli	r7,r17,16
 200ac14:	9006d43a 	srli	r3,r18,16
 200ac18:	91bfffcc 	andi	r6,r18,65535
 200ac1c:	3dacb03a 	or	r22,r7,r22
 200ac20:	b02ed43a 	srli	r23,r22,16
 200ac24:	b5bfffcc 	andi	r22,r22,65535
 200ac28:	300b883a 	mov	r5,r6
 200ac2c:	b009883a 	mov	r4,r22
 200ac30:	40a3c83a 	sub	r17,r8,r2
 200ac34:	d8c00115 	stw	r3,4(sp)
 200ac38:	d9800215 	stw	r6,8(sp)
 200ac3c:	200afbc0 	call	200afbc <__mulsi3>
 200ac40:	d9800217 	ldw	r6,8(sp)
 200ac44:	b809883a 	mov	r4,r23
 200ac48:	1039883a 	mov	fp,r2
 200ac4c:	300b883a 	mov	r5,r6
 200ac50:	200afbc0 	call	200afbc <__mulsi3>
 200ac54:	d8c00117 	ldw	r3,4(sp)
 200ac58:	b809883a 	mov	r4,r23
 200ac5c:	d8800215 	stw	r2,8(sp)
 200ac60:	180b883a 	mov	r5,r3
 200ac64:	200afbc0 	call	200afbc <__mulsi3>
 200ac68:	d8c00117 	ldw	r3,4(sp)
 200ac6c:	b009883a 	mov	r4,r22
 200ac70:	102f883a 	mov	r23,r2
 200ac74:	180b883a 	mov	r5,r3
 200ac78:	200afbc0 	call	200afbc <__mulsi3>
 200ac7c:	d9800217 	ldw	r6,8(sp)
 200ac80:	e006d43a 	srli	r3,fp,16
 200ac84:	1185883a 	add	r2,r2,r6
 200ac88:	1885883a 	add	r2,r3,r2
 200ac8c:	1180022e 	bgeu	r2,r6,200ac98 <__umoddi3+0x454>
 200ac90:	00c00074 	movhi	r3,1
 200ac94:	b8ef883a 	add	r23,r23,r3
 200ac98:	1006d43a 	srli	r3,r2,16
 200ac9c:	1004943a 	slli	r2,r2,16
 200aca0:	e73fffcc 	andi	fp,fp,65535
 200aca4:	1dc7883a 	add	r3,r3,r23
 200aca8:	1739883a 	add	fp,r2,fp
 200acac:	88c03a36 	bltu	r17,r3,200ad98 <__umoddi3+0x554>
 200acb0:	88c05126 	beq	r17,r3,200adf8 <__umoddi3+0x5b4>
 200acb4:	88c9c83a 	sub	r4,r17,r3
 200acb8:	e00f883a 	mov	r7,fp
 200acbc:	81cfc83a 	sub	r7,r16,r7
 200acc0:	81c7803a 	cmpltu	r3,r16,r7
 200acc4:	20c7c83a 	sub	r3,r4,r3
 200acc8:	1cc4983a 	sll	r2,r3,r19
 200accc:	3d0ed83a 	srl	r7,r7,r20
 200acd0:	1d06d83a 	srl	r3,r3,r20
 200acd4:	11c4b03a 	or	r2,r2,r7
 200acd8:	003f7c06 	br	200aacc <__umoddi3+0x288>
 200acdc:	9ca6983a 	sll	r19,r19,r18
 200ace0:	88f8d83a 	srl	fp,r17,r3
 200ace4:	80c4d83a 	srl	r2,r16,r3
 200ace8:	982cd43a 	srli	r22,r19,16
 200acec:	8ca2983a 	sll	r17,r17,r18
 200acf0:	e009883a 	mov	r4,fp
 200acf4:	b00b883a 	mov	r5,r22
 200acf8:	146ab03a 	or	r21,r2,r17
 200acfc:	200af640 	call	200af64 <__umodsi3>
 200ad00:	b00b883a 	mov	r5,r22
 200ad04:	e009883a 	mov	r4,fp
 200ad08:	1029883a 	mov	r20,r2
 200ad0c:	9dffffcc 	andi	r23,r19,65535
 200ad10:	200af000 	call	200af00 <__udivsi3>
 200ad14:	b809883a 	mov	r4,r23
 200ad18:	100b883a 	mov	r5,r2
 200ad1c:	200afbc0 	call	200afbc <__mulsi3>
 200ad20:	a008943a 	slli	r4,r20,16
 200ad24:	a806d43a 	srli	r3,r21,16
 200ad28:	84a8983a 	sll	r20,r16,r18
 200ad2c:	1906b03a 	or	r3,r3,r4
 200ad30:	1880042e 	bgeu	r3,r2,200ad44 <__umoddi3+0x500>
 200ad34:	1cc7883a 	add	r3,r3,r19
 200ad38:	1cc00236 	bltu	r3,r19,200ad44 <__umoddi3+0x500>
 200ad3c:	1880012e 	bgeu	r3,r2,200ad44 <__umoddi3+0x500>
 200ad40:	1cc7883a 	add	r3,r3,r19
 200ad44:	18a3c83a 	sub	r17,r3,r2
 200ad48:	b00b883a 	mov	r5,r22
 200ad4c:	8809883a 	mov	r4,r17
 200ad50:	200af640 	call	200af64 <__umodsi3>
 200ad54:	b00b883a 	mov	r5,r22
 200ad58:	8809883a 	mov	r4,r17
 200ad5c:	1021883a 	mov	r16,r2
 200ad60:	200af000 	call	200af00 <__udivsi3>
 200ad64:	100b883a 	mov	r5,r2
 200ad68:	b809883a 	mov	r4,r23
 200ad6c:	8020943a 	slli	r16,r16,16
 200ad70:	200afbc0 	call	200afbc <__mulsi3>
 200ad74:	a8ffffcc 	andi	r3,r21,65535
 200ad78:	1c06b03a 	or	r3,r3,r16
 200ad7c:	1880042e 	bgeu	r3,r2,200ad90 <__umoddi3+0x54c>
 200ad80:	1cc7883a 	add	r3,r3,r19
 200ad84:	1cc00236 	bltu	r3,r19,200ad90 <__umoddi3+0x54c>
 200ad88:	1880012e 	bgeu	r3,r2,200ad90 <__umoddi3+0x54c>
 200ad8c:	1cc7883a 	add	r3,r3,r19
 200ad90:	18a3c83a 	sub	r17,r3,r2
 200ad94:	003f2906 	br	200aa3c <__umoddi3+0x1f8>
 200ad98:	e48fc83a 	sub	r7,fp,r18
 200ad9c:	1d49c83a 	sub	r4,r3,r21
 200ada0:	e1f9803a 	cmpltu	fp,fp,r7
 200ada4:	2739c83a 	sub	fp,r4,fp
 200ada8:	8f09c83a 	sub	r4,r17,fp
 200adac:	003fc306 	br	200acbc <__umoddi3+0x478>
 200adb0:	01000604 	movi	r4,24
 200adb4:	003ef906 	br	200a99c <__umoddi3+0x158>
 200adb8:	00800604 	movi	r2,24
 200adbc:	003f1306 	br	200aa0c <__umoddi3+0x1c8>
 200adc0:	01000604 	movi	r4,24
 200adc4:	003eb606 	br	200a8a0 <__umoddi3+0x5c>
 200adc8:	40bf902e 	bgeu	r8,r2,200ac0c <__umoddi3+0x3c8>
 200adcc:	b5bfff84 	addi	r22,r22,-2
 200add0:	4551883a 	add	r8,r8,r21
 200add4:	003f8e06 	br	200ac10 <__umoddi3+0x3cc>
 200add8:	18bf762e 	bgeu	r3,r2,200abb4 <__umoddi3+0x370>
 200addc:	8c7fff84 	addi	r17,r17,-2
 200ade0:	1d47883a 	add	r3,r3,r21
 200ade4:	003f7406 	br	200abb8 <__umoddi3+0x374>
 200ade8:	1cc7883a 	add	r3,r3,r19
 200adec:	003ecd06 	br	200a924 <__umoddi3+0xe0>
 200adf0:	8005883a 	mov	r2,r16
 200adf4:	003ef806 	br	200a9d8 <__umoddi3+0x194>
 200adf8:	873fe736 	bltu	r16,fp,200ad98 <__umoddi3+0x554>
 200adfc:	e00f883a 	mov	r7,fp
 200ae00:	0009883a 	mov	r4,zero
 200ae04:	003fad06 	br	200acbc <__umoddi3+0x478>

0200ae08 <__divsi3>:
 200ae08:	20001b16 	blt	r4,zero,200ae78 <__divsi3+0x70>
 200ae0c:	000f883a 	mov	r7,zero
 200ae10:	28001616 	blt	r5,zero,200ae6c <__divsi3+0x64>
 200ae14:	200d883a 	mov	r6,r4
 200ae18:	29001a2e 	bgeu	r5,r4,200ae84 <__divsi3+0x7c>
 200ae1c:	00800804 	movi	r2,32
 200ae20:	00c00044 	movi	r3,1
 200ae24:	00000106 	br	200ae2c <__divsi3+0x24>
 200ae28:	10000d26 	beq	r2,zero,200ae60 <__divsi3+0x58>
 200ae2c:	294b883a 	add	r5,r5,r5
 200ae30:	10bfffc4 	addi	r2,r2,-1
 200ae34:	18c7883a 	add	r3,r3,r3
 200ae38:	293ffb36 	bltu	r5,r4,200ae28 <__divsi3+0x20>
 200ae3c:	0005883a 	mov	r2,zero
 200ae40:	18000726 	beq	r3,zero,200ae60 <__divsi3+0x58>
 200ae44:	0005883a 	mov	r2,zero
 200ae48:	31400236 	bltu	r6,r5,200ae54 <__divsi3+0x4c>
 200ae4c:	314dc83a 	sub	r6,r6,r5
 200ae50:	10c4b03a 	or	r2,r2,r3
 200ae54:	1806d07a 	srli	r3,r3,1
 200ae58:	280ad07a 	srli	r5,r5,1
 200ae5c:	183ffa1e 	bne	r3,zero,200ae48 <__divsi3+0x40>
 200ae60:	38000126 	beq	r7,zero,200ae68 <__divsi3+0x60>
 200ae64:	0085c83a 	sub	r2,zero,r2
 200ae68:	f800283a 	ret
 200ae6c:	014bc83a 	sub	r5,zero,r5
 200ae70:	39c0005c 	xori	r7,r7,1
 200ae74:	003fe706 	br	200ae14 <__divsi3+0xc>
 200ae78:	0109c83a 	sub	r4,zero,r4
 200ae7c:	01c00044 	movi	r7,1
 200ae80:	003fe306 	br	200ae10 <__divsi3+0x8>
 200ae84:	00c00044 	movi	r3,1
 200ae88:	003fee06 	br	200ae44 <__divsi3+0x3c>

0200ae8c <__modsi3>:
 200ae8c:	20001716 	blt	r4,zero,200aeec <__modsi3+0x60>
 200ae90:	000f883a 	mov	r7,zero
 200ae94:	2005883a 	mov	r2,r4
 200ae98:	28001216 	blt	r5,zero,200aee4 <__modsi3+0x58>
 200ae9c:	2900162e 	bgeu	r5,r4,200aef8 <__modsi3+0x6c>
 200aea0:	01800804 	movi	r6,32
 200aea4:	00c00044 	movi	r3,1
 200aea8:	00000106 	br	200aeb0 <__modsi3+0x24>
 200aeac:	30000a26 	beq	r6,zero,200aed8 <__modsi3+0x4c>
 200aeb0:	294b883a 	add	r5,r5,r5
 200aeb4:	31bfffc4 	addi	r6,r6,-1
 200aeb8:	18c7883a 	add	r3,r3,r3
 200aebc:	293ffb36 	bltu	r5,r4,200aeac <__modsi3+0x20>
 200aec0:	18000526 	beq	r3,zero,200aed8 <__modsi3+0x4c>
 200aec4:	1806d07a 	srli	r3,r3,1
 200aec8:	11400136 	bltu	r2,r5,200aed0 <__modsi3+0x44>
 200aecc:	1145c83a 	sub	r2,r2,r5
 200aed0:	280ad07a 	srli	r5,r5,1
 200aed4:	183ffb1e 	bne	r3,zero,200aec4 <__modsi3+0x38>
 200aed8:	38000126 	beq	r7,zero,200aee0 <__modsi3+0x54>
 200aedc:	0085c83a 	sub	r2,zero,r2
 200aee0:	f800283a 	ret
 200aee4:	014bc83a 	sub	r5,zero,r5
 200aee8:	003fec06 	br	200ae9c <__modsi3+0x10>
 200aeec:	0109c83a 	sub	r4,zero,r4
 200aef0:	01c00044 	movi	r7,1
 200aef4:	003fe706 	br	200ae94 <__modsi3+0x8>
 200aef8:	00c00044 	movi	r3,1
 200aefc:	003ff106 	br	200aec4 <__modsi3+0x38>

0200af00 <__udivsi3>:
 200af00:	200d883a 	mov	r6,r4
 200af04:	2900152e 	bgeu	r5,r4,200af5c <__udivsi3+0x5c>
 200af08:	28001416 	blt	r5,zero,200af5c <__udivsi3+0x5c>
 200af0c:	00800804 	movi	r2,32
 200af10:	00c00044 	movi	r3,1
 200af14:	00000206 	br	200af20 <__udivsi3+0x20>
 200af18:	10000e26 	beq	r2,zero,200af54 <__udivsi3+0x54>
 200af1c:	28000516 	blt	r5,zero,200af34 <__udivsi3+0x34>
 200af20:	294b883a 	add	r5,r5,r5
 200af24:	10bfffc4 	addi	r2,r2,-1
 200af28:	18c7883a 	add	r3,r3,r3
 200af2c:	293ffa36 	bltu	r5,r4,200af18 <__udivsi3+0x18>
 200af30:	18000826 	beq	r3,zero,200af54 <__udivsi3+0x54>
 200af34:	0005883a 	mov	r2,zero
 200af38:	31400236 	bltu	r6,r5,200af44 <__udivsi3+0x44>
 200af3c:	314dc83a 	sub	r6,r6,r5
 200af40:	10c4b03a 	or	r2,r2,r3
 200af44:	1806d07a 	srli	r3,r3,1
 200af48:	280ad07a 	srli	r5,r5,1
 200af4c:	183ffa1e 	bne	r3,zero,200af38 <__udivsi3+0x38>
 200af50:	f800283a 	ret
 200af54:	0005883a 	mov	r2,zero
 200af58:	f800283a 	ret
 200af5c:	00c00044 	movi	r3,1
 200af60:	003ff406 	br	200af34 <__udivsi3+0x34>

0200af64 <__umodsi3>:
 200af64:	2005883a 	mov	r2,r4
 200af68:	2900122e 	bgeu	r5,r4,200afb4 <__umodsi3+0x50>
 200af6c:	28001116 	blt	r5,zero,200afb4 <__umodsi3+0x50>
 200af70:	01800804 	movi	r6,32
 200af74:	00c00044 	movi	r3,1
 200af78:	00000206 	br	200af84 <__umodsi3+0x20>
 200af7c:	30000c26 	beq	r6,zero,200afb0 <__umodsi3+0x4c>
 200af80:	28000516 	blt	r5,zero,200af98 <__umodsi3+0x34>
 200af84:	294b883a 	add	r5,r5,r5
 200af88:	31bfffc4 	addi	r6,r6,-1
 200af8c:	18c7883a 	add	r3,r3,r3
 200af90:	293ffa36 	bltu	r5,r4,200af7c <__umodsi3+0x18>
 200af94:	18000626 	beq	r3,zero,200afb0 <__umodsi3+0x4c>
 200af98:	1806d07a 	srli	r3,r3,1
 200af9c:	11400136 	bltu	r2,r5,200afa4 <__umodsi3+0x40>
 200afa0:	1145c83a 	sub	r2,r2,r5
 200afa4:	280ad07a 	srli	r5,r5,1
 200afa8:	183ffb1e 	bne	r3,zero,200af98 <__umodsi3+0x34>
 200afac:	f800283a 	ret
 200afb0:	f800283a 	ret
 200afb4:	00c00044 	movi	r3,1
 200afb8:	003ff706 	br	200af98 <__umodsi3+0x34>

0200afbc <__mulsi3>:
 200afbc:	0005883a 	mov	r2,zero
 200afc0:	20000726 	beq	r4,zero,200afe0 <__mulsi3+0x24>
 200afc4:	20c0004c 	andi	r3,r4,1
 200afc8:	2008d07a 	srli	r4,r4,1
 200afcc:	18000126 	beq	r3,zero,200afd4 <__mulsi3+0x18>
 200afd0:	1145883a 	add	r2,r2,r5
 200afd4:	294b883a 	add	r5,r5,r5
 200afd8:	203ffa1e 	bne	r4,zero,200afc4 <__mulsi3+0x8>
 200afdc:	f800283a 	ret
 200afe0:	f800283a 	ret

0200afe4 <__adddf3>:
 200afe4:	02c00434 	movhi	r11,16
 200afe8:	5affffc4 	addi	r11,r11,-1
 200afec:	2806d7fa 	srli	r3,r5,31
 200aff0:	2ad4703a 	and	r10,r5,r11
 200aff4:	3ad2703a 	and	r9,r7,r11
 200aff8:	3804d53a 	srli	r2,r7,20
 200affc:	3018d77a 	srli	r12,r6,29
 200b000:	280ad53a 	srli	r5,r5,20
 200b004:	501490fa 	slli	r10,r10,3
 200b008:	2010d77a 	srli	r8,r4,29
 200b00c:	481290fa 	slli	r9,r9,3
 200b010:	380ed7fa 	srli	r7,r7,31
 200b014:	defffb04 	addi	sp,sp,-20
 200b018:	dc800215 	stw	r18,8(sp)
 200b01c:	dc400115 	stw	r17,4(sp)
 200b020:	dc000015 	stw	r16,0(sp)
 200b024:	dfc00415 	stw	ra,16(sp)
 200b028:	dcc00315 	stw	r19,12(sp)
 200b02c:	1c803fcc 	andi	r18,r3,255
 200b030:	2c01ffcc 	andi	r16,r5,2047
 200b034:	5210b03a 	or	r8,r10,r8
 200b038:	202290fa 	slli	r17,r4,3
 200b03c:	1081ffcc 	andi	r2,r2,2047
 200b040:	4b12b03a 	or	r9,r9,r12
 200b044:	300c90fa 	slli	r6,r6,3
 200b048:	91c07526 	beq	r18,r7,200b220 <__adddf3+0x23c>
 200b04c:	8087c83a 	sub	r3,r16,r2
 200b050:	00c0ab0e 	bge	zero,r3,200b300 <__adddf3+0x31c>
 200b054:	10002a1e 	bne	r2,zero,200b100 <__adddf3+0x11c>
 200b058:	4984b03a 	or	r2,r9,r6
 200b05c:	1000961e 	bne	r2,zero,200b2b8 <__adddf3+0x2d4>
 200b060:	888001cc 	andi	r2,r17,7
 200b064:	10000726 	beq	r2,zero,200b084 <__adddf3+0xa0>
 200b068:	888003cc 	andi	r2,r17,15
 200b06c:	00c00104 	movi	r3,4
 200b070:	10c00426 	beq	r2,r3,200b084 <__adddf3+0xa0>
 200b074:	88c7883a 	add	r3,r17,r3
 200b078:	1c63803a 	cmpltu	r17,r3,r17
 200b07c:	4451883a 	add	r8,r8,r17
 200b080:	1823883a 	mov	r17,r3
 200b084:	4080202c 	andhi	r2,r8,128
 200b088:	10005926 	beq	r2,zero,200b1f0 <__adddf3+0x20c>
 200b08c:	84000044 	addi	r16,r16,1
 200b090:	0081ffc4 	movi	r2,2047
 200b094:	8080ba26 	beq	r16,r2,200b380 <__adddf3+0x39c>
 200b098:	00bfe034 	movhi	r2,65408
 200b09c:	10bfffc4 	addi	r2,r2,-1
 200b0a0:	4090703a 	and	r8,r8,r2
 200b0a4:	4004977a 	slli	r2,r8,29
 200b0a8:	4010927a 	slli	r8,r8,9
 200b0ac:	8822d0fa 	srli	r17,r17,3
 200b0b0:	8401ffcc 	andi	r16,r16,2047
 200b0b4:	4010d33a 	srli	r8,r8,12
 200b0b8:	9007883a 	mov	r3,r18
 200b0bc:	1444b03a 	or	r2,r2,r17
 200b0c0:	8401ffcc 	andi	r16,r16,2047
 200b0c4:	8020953a 	slli	r16,r16,20
 200b0c8:	18c03fcc 	andi	r3,r3,255
 200b0cc:	01000434 	movhi	r4,16
 200b0d0:	213fffc4 	addi	r4,r4,-1
 200b0d4:	180697fa 	slli	r3,r3,31
 200b0d8:	4110703a 	and	r8,r8,r4
 200b0dc:	4410b03a 	or	r8,r8,r16
 200b0e0:	40c6b03a 	or	r3,r8,r3
 200b0e4:	dfc00417 	ldw	ra,16(sp)
 200b0e8:	dcc00317 	ldw	r19,12(sp)
 200b0ec:	dc800217 	ldw	r18,8(sp)
 200b0f0:	dc400117 	ldw	r17,4(sp)
 200b0f4:	dc000017 	ldw	r16,0(sp)
 200b0f8:	dec00504 	addi	sp,sp,20
 200b0fc:	f800283a 	ret
 200b100:	0081ffc4 	movi	r2,2047
 200b104:	80bfd626 	beq	r16,r2,200b060 <__adddf3+0x7c>
 200b108:	4a402034 	orhi	r9,r9,128
 200b10c:	00800e04 	movi	r2,56
 200b110:	10c09f16 	blt	r2,r3,200b390 <__adddf3+0x3ac>
 200b114:	008007c4 	movi	r2,31
 200b118:	10c0c216 	blt	r2,r3,200b424 <__adddf3+0x440>
 200b11c:	00800804 	movi	r2,32
 200b120:	10c5c83a 	sub	r2,r2,r3
 200b124:	488a983a 	sll	r5,r9,r2
 200b128:	30c8d83a 	srl	r4,r6,r3
 200b12c:	3084983a 	sll	r2,r6,r2
 200b130:	48c6d83a 	srl	r3,r9,r3
 200b134:	290cb03a 	or	r6,r5,r4
 200b138:	1004c03a 	cmpne	r2,r2,zero
 200b13c:	308cb03a 	or	r6,r6,r2
 200b140:	898dc83a 	sub	r6,r17,r6
 200b144:	89a3803a 	cmpltu	r17,r17,r6
 200b148:	40d1c83a 	sub	r8,r8,r3
 200b14c:	4451c83a 	sub	r8,r8,r17
 200b150:	3023883a 	mov	r17,r6
 200b154:	4080202c 	andhi	r2,r8,128
 200b158:	10002326 	beq	r2,zero,200b1e8 <__adddf3+0x204>
 200b15c:	04c02034 	movhi	r19,128
 200b160:	9cffffc4 	addi	r19,r19,-1
 200b164:	44e6703a 	and	r19,r8,r19
 200b168:	98007626 	beq	r19,zero,200b344 <__adddf3+0x360>
 200b16c:	9809883a 	mov	r4,r19
 200b170:	200d8240 	call	200d824 <__clzsi2>
 200b174:	10fffe04 	addi	r3,r2,-8
 200b178:	010007c4 	movi	r4,31
 200b17c:	20c07716 	blt	r4,r3,200b35c <__adddf3+0x378>
 200b180:	00800804 	movi	r2,32
 200b184:	10c5c83a 	sub	r2,r2,r3
 200b188:	8884d83a 	srl	r2,r17,r2
 200b18c:	98d0983a 	sll	r8,r19,r3
 200b190:	88e2983a 	sll	r17,r17,r3
 200b194:	1204b03a 	or	r2,r2,r8
 200b198:	1c007416 	blt	r3,r16,200b36c <__adddf3+0x388>
 200b19c:	1c21c83a 	sub	r16,r3,r16
 200b1a0:	82000044 	addi	r8,r16,1
 200b1a4:	00c007c4 	movi	r3,31
 200b1a8:	1a009116 	blt	r3,r8,200b3f0 <__adddf3+0x40c>
 200b1ac:	00c00804 	movi	r3,32
 200b1b0:	1a07c83a 	sub	r3,r3,r8
 200b1b4:	8a08d83a 	srl	r4,r17,r8
 200b1b8:	88e2983a 	sll	r17,r17,r3
 200b1bc:	10c6983a 	sll	r3,r2,r3
 200b1c0:	1210d83a 	srl	r8,r2,r8
 200b1c4:	8804c03a 	cmpne	r2,r17,zero
 200b1c8:	1906b03a 	or	r3,r3,r4
 200b1cc:	18a2b03a 	or	r17,r3,r2
 200b1d0:	0021883a 	mov	r16,zero
 200b1d4:	003fa206 	br	200b060 <__adddf3+0x7c>
 200b1d8:	1890b03a 	or	r8,r3,r2
 200b1dc:	40017d26 	beq	r8,zero,200b7d4 <__adddf3+0x7f0>
 200b1e0:	1011883a 	mov	r8,r2
 200b1e4:	1823883a 	mov	r17,r3
 200b1e8:	888001cc 	andi	r2,r17,7
 200b1ec:	103f9e1e 	bne	r2,zero,200b068 <__adddf3+0x84>
 200b1f0:	4004977a 	slli	r2,r8,29
 200b1f4:	8822d0fa 	srli	r17,r17,3
 200b1f8:	4010d0fa 	srli	r8,r8,3
 200b1fc:	9007883a 	mov	r3,r18
 200b200:	1444b03a 	or	r2,r2,r17
 200b204:	0101ffc4 	movi	r4,2047
 200b208:	81002426 	beq	r16,r4,200b29c <__adddf3+0x2b8>
 200b20c:	8120703a 	and	r16,r16,r4
 200b210:	01000434 	movhi	r4,16
 200b214:	213fffc4 	addi	r4,r4,-1
 200b218:	4110703a 	and	r8,r8,r4
 200b21c:	003fa806 	br	200b0c0 <__adddf3+0xdc>
 200b220:	8089c83a 	sub	r4,r16,r2
 200b224:	01005e0e 	bge	zero,r4,200b3a0 <__adddf3+0x3bc>
 200b228:	10002b26 	beq	r2,zero,200b2d8 <__adddf3+0x2f4>
 200b22c:	0081ffc4 	movi	r2,2047
 200b230:	80bf8b26 	beq	r16,r2,200b060 <__adddf3+0x7c>
 200b234:	4a402034 	orhi	r9,r9,128
 200b238:	00800e04 	movi	r2,56
 200b23c:	1100a40e 	bge	r2,r4,200b4d0 <__adddf3+0x4ec>
 200b240:	498cb03a 	or	r6,r9,r6
 200b244:	300ac03a 	cmpne	r5,r6,zero
 200b248:	0013883a 	mov	r9,zero
 200b24c:	2c4b883a 	add	r5,r5,r17
 200b250:	2c63803a 	cmpltu	r17,r5,r17
 200b254:	4a11883a 	add	r8,r9,r8
 200b258:	8a11883a 	add	r8,r17,r8
 200b25c:	2823883a 	mov	r17,r5
 200b260:	4080202c 	andhi	r2,r8,128
 200b264:	103fe026 	beq	r2,zero,200b1e8 <__adddf3+0x204>
 200b268:	84000044 	addi	r16,r16,1
 200b26c:	0081ffc4 	movi	r2,2047
 200b270:	8080d226 	beq	r16,r2,200b5bc <__adddf3+0x5d8>
 200b274:	00bfe034 	movhi	r2,65408
 200b278:	10bfffc4 	addi	r2,r2,-1
 200b27c:	4090703a 	and	r8,r8,r2
 200b280:	880ad07a 	srli	r5,r17,1
 200b284:	400897fa 	slli	r4,r8,31
 200b288:	88c0004c 	andi	r3,r17,1
 200b28c:	28e2b03a 	or	r17,r5,r3
 200b290:	4010d07a 	srli	r8,r8,1
 200b294:	2462b03a 	or	r17,r4,r17
 200b298:	003f7106 	br	200b060 <__adddf3+0x7c>
 200b29c:	4088b03a 	or	r4,r8,r2
 200b2a0:	20014526 	beq	r4,zero,200b7b8 <__adddf3+0x7d4>
 200b2a4:	01000434 	movhi	r4,16
 200b2a8:	42000234 	orhi	r8,r8,8
 200b2ac:	213fffc4 	addi	r4,r4,-1
 200b2b0:	4110703a 	and	r8,r8,r4
 200b2b4:	003f8206 	br	200b0c0 <__adddf3+0xdc>
 200b2b8:	18ffffc4 	addi	r3,r3,-1
 200b2bc:	1800491e 	bne	r3,zero,200b3e4 <__adddf3+0x400>
 200b2c0:	898bc83a 	sub	r5,r17,r6
 200b2c4:	8963803a 	cmpltu	r17,r17,r5
 200b2c8:	4251c83a 	sub	r8,r8,r9
 200b2cc:	4451c83a 	sub	r8,r8,r17
 200b2d0:	2823883a 	mov	r17,r5
 200b2d4:	003f9f06 	br	200b154 <__adddf3+0x170>
 200b2d8:	4984b03a 	or	r2,r9,r6
 200b2dc:	103f6026 	beq	r2,zero,200b060 <__adddf3+0x7c>
 200b2e0:	213fffc4 	addi	r4,r4,-1
 200b2e4:	2000931e 	bne	r4,zero,200b534 <__adddf3+0x550>
 200b2e8:	898d883a 	add	r6,r17,r6
 200b2ec:	3463803a 	cmpltu	r17,r6,r17
 200b2f0:	4251883a 	add	r8,r8,r9
 200b2f4:	8a11883a 	add	r8,r17,r8
 200b2f8:	3023883a 	mov	r17,r6
 200b2fc:	003fd806 	br	200b260 <__adddf3+0x27c>
 200b300:	1800541e 	bne	r3,zero,200b454 <__adddf3+0x470>
 200b304:	80800044 	addi	r2,r16,1
 200b308:	1081ffcc 	andi	r2,r2,2047
 200b30c:	00c00044 	movi	r3,1
 200b310:	1880a00e 	bge	r3,r2,200b594 <__adddf3+0x5b0>
 200b314:	8989c83a 	sub	r4,r17,r6
 200b318:	8905803a 	cmpltu	r2,r17,r4
 200b31c:	4267c83a 	sub	r19,r8,r9
 200b320:	98a7c83a 	sub	r19,r19,r2
 200b324:	9880202c 	andhi	r2,r19,128
 200b328:	10006326 	beq	r2,zero,200b4b8 <__adddf3+0x4d4>
 200b32c:	3463c83a 	sub	r17,r6,r17
 200b330:	4a07c83a 	sub	r3,r9,r8
 200b334:	344d803a 	cmpltu	r6,r6,r17
 200b338:	19a7c83a 	sub	r19,r3,r6
 200b33c:	3825883a 	mov	r18,r7
 200b340:	983f8a1e 	bne	r19,zero,200b16c <__adddf3+0x188>
 200b344:	8809883a 	mov	r4,r17
 200b348:	200d8240 	call	200d824 <__clzsi2>
 200b34c:	10800804 	addi	r2,r2,32
 200b350:	10fffe04 	addi	r3,r2,-8
 200b354:	010007c4 	movi	r4,31
 200b358:	20ff890e 	bge	r4,r3,200b180 <__adddf3+0x19c>
 200b35c:	10bff604 	addi	r2,r2,-40
 200b360:	8884983a 	sll	r2,r17,r2
 200b364:	0023883a 	mov	r17,zero
 200b368:	1c3f8c0e 	bge	r3,r16,200b19c <__adddf3+0x1b8>
 200b36c:	023fe034 	movhi	r8,65408
 200b370:	423fffc4 	addi	r8,r8,-1
 200b374:	80e1c83a 	sub	r16,r16,r3
 200b378:	1210703a 	and	r8,r2,r8
 200b37c:	003f3806 	br	200b060 <__adddf3+0x7c>
 200b380:	9007883a 	mov	r3,r18
 200b384:	0011883a 	mov	r8,zero
 200b388:	0005883a 	mov	r2,zero
 200b38c:	003f4c06 	br	200b0c0 <__adddf3+0xdc>
 200b390:	498cb03a 	or	r6,r9,r6
 200b394:	300cc03a 	cmpne	r6,r6,zero
 200b398:	0007883a 	mov	r3,zero
 200b39c:	003f6806 	br	200b140 <__adddf3+0x15c>
 200b3a0:	20009c1e 	bne	r4,zero,200b614 <__adddf3+0x630>
 200b3a4:	80800044 	addi	r2,r16,1
 200b3a8:	1141ffcc 	andi	r5,r2,2047
 200b3ac:	01000044 	movi	r4,1
 200b3b0:	2140670e 	bge	r4,r5,200b550 <__adddf3+0x56c>
 200b3b4:	0101ffc4 	movi	r4,2047
 200b3b8:	11007f26 	beq	r2,r4,200b5b8 <__adddf3+0x5d4>
 200b3bc:	898d883a 	add	r6,r17,r6
 200b3c0:	4247883a 	add	r3,r8,r9
 200b3c4:	3451803a 	cmpltu	r8,r6,r17
 200b3c8:	40d1883a 	add	r8,r8,r3
 200b3cc:	402297fa 	slli	r17,r8,31
 200b3d0:	300cd07a 	srli	r6,r6,1
 200b3d4:	4010d07a 	srli	r8,r8,1
 200b3d8:	1021883a 	mov	r16,r2
 200b3dc:	89a2b03a 	or	r17,r17,r6
 200b3e0:	003f1f06 	br	200b060 <__adddf3+0x7c>
 200b3e4:	0081ffc4 	movi	r2,2047
 200b3e8:	80bf481e 	bne	r16,r2,200b10c <__adddf3+0x128>
 200b3ec:	003f1c06 	br	200b060 <__adddf3+0x7c>
 200b3f0:	843ff844 	addi	r16,r16,-31
 200b3f4:	01000804 	movi	r4,32
 200b3f8:	1406d83a 	srl	r3,r2,r16
 200b3fc:	41005026 	beq	r8,r4,200b540 <__adddf3+0x55c>
 200b400:	01001004 	movi	r4,64
 200b404:	2211c83a 	sub	r8,r4,r8
 200b408:	1204983a 	sll	r2,r2,r8
 200b40c:	88a2b03a 	or	r17,r17,r2
 200b410:	8822c03a 	cmpne	r17,r17,zero
 200b414:	1c62b03a 	or	r17,r3,r17
 200b418:	0011883a 	mov	r8,zero
 200b41c:	0021883a 	mov	r16,zero
 200b420:	003f7106 	br	200b1e8 <__adddf3+0x204>
 200b424:	193ff804 	addi	r4,r3,-32
 200b428:	00800804 	movi	r2,32
 200b42c:	4908d83a 	srl	r4,r9,r4
 200b430:	18804526 	beq	r3,r2,200b548 <__adddf3+0x564>
 200b434:	00801004 	movi	r2,64
 200b438:	10c5c83a 	sub	r2,r2,r3
 200b43c:	4886983a 	sll	r3,r9,r2
 200b440:	198cb03a 	or	r6,r3,r6
 200b444:	300cc03a 	cmpne	r6,r6,zero
 200b448:	218cb03a 	or	r6,r4,r6
 200b44c:	0007883a 	mov	r3,zero
 200b450:	003f3b06 	br	200b140 <__adddf3+0x15c>
 200b454:	80002a26 	beq	r16,zero,200b500 <__adddf3+0x51c>
 200b458:	0101ffc4 	movi	r4,2047
 200b45c:	11006826 	beq	r2,r4,200b600 <__adddf3+0x61c>
 200b460:	00c7c83a 	sub	r3,zero,r3
 200b464:	42002034 	orhi	r8,r8,128
 200b468:	01000e04 	movi	r4,56
 200b46c:	20c07c16 	blt	r4,r3,200b660 <__adddf3+0x67c>
 200b470:	010007c4 	movi	r4,31
 200b474:	20c0da16 	blt	r4,r3,200b7e0 <__adddf3+0x7fc>
 200b478:	01000804 	movi	r4,32
 200b47c:	20c9c83a 	sub	r4,r4,r3
 200b480:	4114983a 	sll	r10,r8,r4
 200b484:	88cad83a 	srl	r5,r17,r3
 200b488:	8908983a 	sll	r4,r17,r4
 200b48c:	40c6d83a 	srl	r3,r8,r3
 200b490:	5162b03a 	or	r17,r10,r5
 200b494:	2008c03a 	cmpne	r4,r4,zero
 200b498:	8922b03a 	or	r17,r17,r4
 200b49c:	3463c83a 	sub	r17,r6,r17
 200b4a0:	48c7c83a 	sub	r3,r9,r3
 200b4a4:	344d803a 	cmpltu	r6,r6,r17
 200b4a8:	1991c83a 	sub	r8,r3,r6
 200b4ac:	1021883a 	mov	r16,r2
 200b4b0:	3825883a 	mov	r18,r7
 200b4b4:	003f2706 	br	200b154 <__adddf3+0x170>
 200b4b8:	24d0b03a 	or	r8,r4,r19
 200b4bc:	40001b1e 	bne	r8,zero,200b52c <__adddf3+0x548>
 200b4c0:	0005883a 	mov	r2,zero
 200b4c4:	0007883a 	mov	r3,zero
 200b4c8:	0021883a 	mov	r16,zero
 200b4cc:	003f4d06 	br	200b204 <__adddf3+0x220>
 200b4d0:	008007c4 	movi	r2,31
 200b4d4:	11003c16 	blt	r2,r4,200b5c8 <__adddf3+0x5e4>
 200b4d8:	00800804 	movi	r2,32
 200b4dc:	1105c83a 	sub	r2,r2,r4
 200b4e0:	488e983a 	sll	r7,r9,r2
 200b4e4:	310ad83a 	srl	r5,r6,r4
 200b4e8:	3084983a 	sll	r2,r6,r2
 200b4ec:	4912d83a 	srl	r9,r9,r4
 200b4f0:	394ab03a 	or	r5,r7,r5
 200b4f4:	1004c03a 	cmpne	r2,r2,zero
 200b4f8:	288ab03a 	or	r5,r5,r2
 200b4fc:	003f5306 	br	200b24c <__adddf3+0x268>
 200b500:	4448b03a 	or	r4,r8,r17
 200b504:	20003e26 	beq	r4,zero,200b600 <__adddf3+0x61c>
 200b508:	00c6303a 	nor	r3,zero,r3
 200b50c:	18003a1e 	bne	r3,zero,200b5f8 <__adddf3+0x614>
 200b510:	3463c83a 	sub	r17,r6,r17
 200b514:	4a07c83a 	sub	r3,r9,r8
 200b518:	344d803a 	cmpltu	r6,r6,r17
 200b51c:	1991c83a 	sub	r8,r3,r6
 200b520:	1021883a 	mov	r16,r2
 200b524:	3825883a 	mov	r18,r7
 200b528:	003f0a06 	br	200b154 <__adddf3+0x170>
 200b52c:	2023883a 	mov	r17,r4
 200b530:	003f0d06 	br	200b168 <__adddf3+0x184>
 200b534:	0081ffc4 	movi	r2,2047
 200b538:	80bf3f1e 	bne	r16,r2,200b238 <__adddf3+0x254>
 200b53c:	003ec806 	br	200b060 <__adddf3+0x7c>
 200b540:	0005883a 	mov	r2,zero
 200b544:	003fb106 	br	200b40c <__adddf3+0x428>
 200b548:	0007883a 	mov	r3,zero
 200b54c:	003fbc06 	br	200b440 <__adddf3+0x45c>
 200b550:	4444b03a 	or	r2,r8,r17
 200b554:	8000871e 	bne	r16,zero,200b774 <__adddf3+0x790>
 200b558:	1000ba26 	beq	r2,zero,200b844 <__adddf3+0x860>
 200b55c:	4984b03a 	or	r2,r9,r6
 200b560:	103ebf26 	beq	r2,zero,200b060 <__adddf3+0x7c>
 200b564:	8985883a 	add	r2,r17,r6
 200b568:	4247883a 	add	r3,r8,r9
 200b56c:	1451803a 	cmpltu	r8,r2,r17
 200b570:	40d1883a 	add	r8,r8,r3
 200b574:	40c0202c 	andhi	r3,r8,128
 200b578:	1023883a 	mov	r17,r2
 200b57c:	183f1a26 	beq	r3,zero,200b1e8 <__adddf3+0x204>
 200b580:	00bfe034 	movhi	r2,65408
 200b584:	10bfffc4 	addi	r2,r2,-1
 200b588:	2021883a 	mov	r16,r4
 200b58c:	4090703a 	and	r8,r8,r2
 200b590:	003eb306 	br	200b060 <__adddf3+0x7c>
 200b594:	4444b03a 	or	r2,r8,r17
 200b598:	8000291e 	bne	r16,zero,200b640 <__adddf3+0x65c>
 200b59c:	10004b1e 	bne	r2,zero,200b6cc <__adddf3+0x6e8>
 200b5a0:	4990b03a 	or	r8,r9,r6
 200b5a4:	40008b26 	beq	r8,zero,200b7d4 <__adddf3+0x7f0>
 200b5a8:	4811883a 	mov	r8,r9
 200b5ac:	3023883a 	mov	r17,r6
 200b5b0:	3825883a 	mov	r18,r7
 200b5b4:	003eaa06 	br	200b060 <__adddf3+0x7c>
 200b5b8:	1021883a 	mov	r16,r2
 200b5bc:	0011883a 	mov	r8,zero
 200b5c0:	0005883a 	mov	r2,zero
 200b5c4:	003f0f06 	br	200b204 <__adddf3+0x220>
 200b5c8:	217ff804 	addi	r5,r4,-32
 200b5cc:	00800804 	movi	r2,32
 200b5d0:	494ad83a 	srl	r5,r9,r5
 200b5d4:	20807d26 	beq	r4,r2,200b7cc <__adddf3+0x7e8>
 200b5d8:	00801004 	movi	r2,64
 200b5dc:	1109c83a 	sub	r4,r2,r4
 200b5e0:	4912983a 	sll	r9,r9,r4
 200b5e4:	498cb03a 	or	r6,r9,r6
 200b5e8:	300cc03a 	cmpne	r6,r6,zero
 200b5ec:	298ab03a 	or	r5,r5,r6
 200b5f0:	0013883a 	mov	r9,zero
 200b5f4:	003f1506 	br	200b24c <__adddf3+0x268>
 200b5f8:	0101ffc4 	movi	r4,2047
 200b5fc:	113f9a1e 	bne	r2,r4,200b468 <__adddf3+0x484>
 200b600:	4811883a 	mov	r8,r9
 200b604:	3023883a 	mov	r17,r6
 200b608:	1021883a 	mov	r16,r2
 200b60c:	3825883a 	mov	r18,r7
 200b610:	003e9306 	br	200b060 <__adddf3+0x7c>
 200b614:	8000161e 	bne	r16,zero,200b670 <__adddf3+0x68c>
 200b618:	444ab03a 	or	r5,r8,r17
 200b61c:	28005126 	beq	r5,zero,200b764 <__adddf3+0x780>
 200b620:	0108303a 	nor	r4,zero,r4
 200b624:	20004d1e 	bne	r4,zero,200b75c <__adddf3+0x778>
 200b628:	89a3883a 	add	r17,r17,r6
 200b62c:	4253883a 	add	r9,r8,r9
 200b630:	898d803a 	cmpltu	r6,r17,r6
 200b634:	3251883a 	add	r8,r6,r9
 200b638:	1021883a 	mov	r16,r2
 200b63c:	003f0806 	br	200b260 <__adddf3+0x27c>
 200b640:	1000301e 	bne	r2,zero,200b704 <__adddf3+0x720>
 200b644:	4984b03a 	or	r2,r9,r6
 200b648:	10007126 	beq	r2,zero,200b810 <__adddf3+0x82c>
 200b64c:	4811883a 	mov	r8,r9
 200b650:	3023883a 	mov	r17,r6
 200b654:	3825883a 	mov	r18,r7
 200b658:	0401ffc4 	movi	r16,2047
 200b65c:	003e8006 	br	200b060 <__adddf3+0x7c>
 200b660:	4462b03a 	or	r17,r8,r17
 200b664:	8822c03a 	cmpne	r17,r17,zero
 200b668:	0007883a 	mov	r3,zero
 200b66c:	003f8b06 	br	200b49c <__adddf3+0x4b8>
 200b670:	0141ffc4 	movi	r5,2047
 200b674:	11403b26 	beq	r2,r5,200b764 <__adddf3+0x780>
 200b678:	0109c83a 	sub	r4,zero,r4
 200b67c:	42002034 	orhi	r8,r8,128
 200b680:	01400e04 	movi	r5,56
 200b684:	29006716 	blt	r5,r4,200b824 <__adddf3+0x840>
 200b688:	014007c4 	movi	r5,31
 200b68c:	29007016 	blt	r5,r4,200b850 <__adddf3+0x86c>
 200b690:	01400804 	movi	r5,32
 200b694:	290bc83a 	sub	r5,r5,r4
 200b698:	4154983a 	sll	r10,r8,r5
 200b69c:	890ed83a 	srl	r7,r17,r4
 200b6a0:	894a983a 	sll	r5,r17,r5
 200b6a4:	4108d83a 	srl	r4,r8,r4
 200b6a8:	51e2b03a 	or	r17,r10,r7
 200b6ac:	280ac03a 	cmpne	r5,r5,zero
 200b6b0:	8962b03a 	or	r17,r17,r5
 200b6b4:	89a3883a 	add	r17,r17,r6
 200b6b8:	2253883a 	add	r9,r4,r9
 200b6bc:	898d803a 	cmpltu	r6,r17,r6
 200b6c0:	3251883a 	add	r8,r6,r9
 200b6c4:	1021883a 	mov	r16,r2
 200b6c8:	003ee506 	br	200b260 <__adddf3+0x27c>
 200b6cc:	4984b03a 	or	r2,r9,r6
 200b6d0:	103e6326 	beq	r2,zero,200b060 <__adddf3+0x7c>
 200b6d4:	8987c83a 	sub	r3,r17,r6
 200b6d8:	88c9803a 	cmpltu	r4,r17,r3
 200b6dc:	4245c83a 	sub	r2,r8,r9
 200b6e0:	1105c83a 	sub	r2,r2,r4
 200b6e4:	1100202c 	andhi	r4,r2,128
 200b6e8:	203ebb26 	beq	r4,zero,200b1d8 <__adddf3+0x1f4>
 200b6ec:	3463c83a 	sub	r17,r6,r17
 200b6f0:	4a07c83a 	sub	r3,r9,r8
 200b6f4:	344d803a 	cmpltu	r6,r6,r17
 200b6f8:	1991c83a 	sub	r8,r3,r6
 200b6fc:	3825883a 	mov	r18,r7
 200b700:	003e5706 	br	200b060 <__adddf3+0x7c>
 200b704:	4984b03a 	or	r2,r9,r6
 200b708:	10002e26 	beq	r2,zero,200b7c4 <__adddf3+0x7e0>
 200b70c:	4004d0fa 	srli	r2,r8,3
 200b710:	8822d0fa 	srli	r17,r17,3
 200b714:	4010977a 	slli	r8,r8,29
 200b718:	10c0022c 	andhi	r3,r2,8
 200b71c:	4462b03a 	or	r17,r8,r17
 200b720:	18000826 	beq	r3,zero,200b744 <__adddf3+0x760>
 200b724:	4808d0fa 	srli	r4,r9,3
 200b728:	20c0022c 	andhi	r3,r4,8
 200b72c:	1800051e 	bne	r3,zero,200b744 <__adddf3+0x760>
 200b730:	300cd0fa 	srli	r6,r6,3
 200b734:	4806977a 	slli	r3,r9,29
 200b738:	2005883a 	mov	r2,r4
 200b73c:	3825883a 	mov	r18,r7
 200b740:	19a2b03a 	or	r17,r3,r6
 200b744:	8810d77a 	srli	r8,r17,29
 200b748:	100490fa 	slli	r2,r2,3
 200b74c:	882290fa 	slli	r17,r17,3
 200b750:	0401ffc4 	movi	r16,2047
 200b754:	4090b03a 	or	r8,r8,r2
 200b758:	003e4106 	br	200b060 <__adddf3+0x7c>
 200b75c:	0141ffc4 	movi	r5,2047
 200b760:	117fc71e 	bne	r2,r5,200b680 <__adddf3+0x69c>
 200b764:	4811883a 	mov	r8,r9
 200b768:	3023883a 	mov	r17,r6
 200b76c:	1021883a 	mov	r16,r2
 200b770:	003e3b06 	br	200b060 <__adddf3+0x7c>
 200b774:	10002f26 	beq	r2,zero,200b834 <__adddf3+0x850>
 200b778:	4984b03a 	or	r2,r9,r6
 200b77c:	10001126 	beq	r2,zero,200b7c4 <__adddf3+0x7e0>
 200b780:	4004d0fa 	srli	r2,r8,3
 200b784:	8822d0fa 	srli	r17,r17,3
 200b788:	4010977a 	slli	r8,r8,29
 200b78c:	10c0022c 	andhi	r3,r2,8
 200b790:	4462b03a 	or	r17,r8,r17
 200b794:	183feb26 	beq	r3,zero,200b744 <__adddf3+0x760>
 200b798:	4808d0fa 	srli	r4,r9,3
 200b79c:	20c0022c 	andhi	r3,r4,8
 200b7a0:	183fe81e 	bne	r3,zero,200b744 <__adddf3+0x760>
 200b7a4:	300cd0fa 	srli	r6,r6,3
 200b7a8:	4806977a 	slli	r3,r9,29
 200b7ac:	2005883a 	mov	r2,r4
 200b7b0:	19a2b03a 	or	r17,r3,r6
 200b7b4:	003fe306 	br	200b744 <__adddf3+0x760>
 200b7b8:	0011883a 	mov	r8,zero
 200b7bc:	0005883a 	mov	r2,zero
 200b7c0:	003e3f06 	br	200b0c0 <__adddf3+0xdc>
 200b7c4:	0401ffc4 	movi	r16,2047
 200b7c8:	003e2506 	br	200b060 <__adddf3+0x7c>
 200b7cc:	0013883a 	mov	r9,zero
 200b7d0:	003f8406 	br	200b5e4 <__adddf3+0x600>
 200b7d4:	0005883a 	mov	r2,zero
 200b7d8:	0007883a 	mov	r3,zero
 200b7dc:	003e8906 	br	200b204 <__adddf3+0x220>
 200b7e0:	197ff804 	addi	r5,r3,-32
 200b7e4:	01000804 	movi	r4,32
 200b7e8:	414ad83a 	srl	r5,r8,r5
 200b7ec:	19002426 	beq	r3,r4,200b880 <__adddf3+0x89c>
 200b7f0:	01001004 	movi	r4,64
 200b7f4:	20c7c83a 	sub	r3,r4,r3
 200b7f8:	40c6983a 	sll	r3,r8,r3
 200b7fc:	1c46b03a 	or	r3,r3,r17
 200b800:	1806c03a 	cmpne	r3,r3,zero
 200b804:	28e2b03a 	or	r17,r5,r3
 200b808:	0007883a 	mov	r3,zero
 200b80c:	003f2306 	br	200b49c <__adddf3+0x4b8>
 200b810:	0007883a 	mov	r3,zero
 200b814:	5811883a 	mov	r8,r11
 200b818:	00bfffc4 	movi	r2,-1
 200b81c:	0401ffc4 	movi	r16,2047
 200b820:	003e7806 	br	200b204 <__adddf3+0x220>
 200b824:	4462b03a 	or	r17,r8,r17
 200b828:	8822c03a 	cmpne	r17,r17,zero
 200b82c:	0009883a 	mov	r4,zero
 200b830:	003fa006 	br	200b6b4 <__adddf3+0x6d0>
 200b834:	4811883a 	mov	r8,r9
 200b838:	3023883a 	mov	r17,r6
 200b83c:	0401ffc4 	movi	r16,2047
 200b840:	003e0706 	br	200b060 <__adddf3+0x7c>
 200b844:	4811883a 	mov	r8,r9
 200b848:	3023883a 	mov	r17,r6
 200b84c:	003e0406 	br	200b060 <__adddf3+0x7c>
 200b850:	21fff804 	addi	r7,r4,-32
 200b854:	01400804 	movi	r5,32
 200b858:	41ced83a 	srl	r7,r8,r7
 200b85c:	21400a26 	beq	r4,r5,200b888 <__adddf3+0x8a4>
 200b860:	01401004 	movi	r5,64
 200b864:	2909c83a 	sub	r4,r5,r4
 200b868:	4108983a 	sll	r4,r8,r4
 200b86c:	2448b03a 	or	r4,r4,r17
 200b870:	2008c03a 	cmpne	r4,r4,zero
 200b874:	3922b03a 	or	r17,r7,r4
 200b878:	0009883a 	mov	r4,zero
 200b87c:	003f8d06 	br	200b6b4 <__adddf3+0x6d0>
 200b880:	0007883a 	mov	r3,zero
 200b884:	003fdd06 	br	200b7fc <__adddf3+0x818>
 200b888:	0009883a 	mov	r4,zero
 200b88c:	003ff706 	br	200b86c <__adddf3+0x888>

0200b890 <__divdf3>:
 200b890:	defff004 	addi	sp,sp,-64
 200b894:	dc800815 	stw	r18,32(sp)
 200b898:	2824d53a 	srli	r18,r5,20
 200b89c:	dd800c15 	stw	r22,48(sp)
 200b8a0:	282cd7fa 	srli	r22,r5,31
 200b8a4:	dc000615 	stw	r16,24(sp)
 200b8a8:	04000434 	movhi	r16,16
 200b8ac:	843fffc4 	addi	r16,r16,-1
 200b8b0:	dfc00f15 	stw	ra,60(sp)
 200b8b4:	df000e15 	stw	fp,56(sp)
 200b8b8:	ddc00d15 	stw	r23,52(sp)
 200b8bc:	dd400b15 	stw	r21,44(sp)
 200b8c0:	dd000a15 	stw	r20,40(sp)
 200b8c4:	dcc00915 	stw	r19,36(sp)
 200b8c8:	dc400715 	stw	r17,28(sp)
 200b8cc:	9481ffcc 	andi	r18,r18,2047
 200b8d0:	2c20703a 	and	r16,r5,r16
 200b8d4:	b2003fcc 	andi	r8,r22,255
 200b8d8:	90006126 	beq	r18,zero,200ba60 <__divdf3+0x1d0>
 200b8dc:	0081ffc4 	movi	r2,2047
 200b8e0:	202b883a 	mov	r21,r4
 200b8e4:	90803726 	beq	r18,r2,200b9c4 <__divdf3+0x134>
 200b8e8:	80800434 	orhi	r2,r16,16
 200b8ec:	100490fa 	slli	r2,r2,3
 200b8f0:	2020d77a 	srli	r16,r4,29
 200b8f4:	202a90fa 	slli	r21,r4,3
 200b8f8:	94bf0044 	addi	r18,r18,-1023
 200b8fc:	80a0b03a 	or	r16,r16,r2
 200b900:	0013883a 	mov	r9,zero
 200b904:	000b883a 	mov	r5,zero
 200b908:	3806d53a 	srli	r3,r7,20
 200b90c:	382ed7fa 	srli	r23,r7,31
 200b910:	04400434 	movhi	r17,16
 200b914:	8c7fffc4 	addi	r17,r17,-1
 200b918:	18c1ffcc 	andi	r3,r3,2047
 200b91c:	3029883a 	mov	r20,r6
 200b920:	3c62703a 	and	r17,r7,r17
 200b924:	bf003fcc 	andi	fp,r23,255
 200b928:	18006e26 	beq	r3,zero,200bae4 <__divdf3+0x254>
 200b92c:	0081ffc4 	movi	r2,2047
 200b930:	18806626 	beq	r3,r2,200bacc <__divdf3+0x23c>
 200b934:	88800434 	orhi	r2,r17,16
 200b938:	100490fa 	slli	r2,r2,3
 200b93c:	3022d77a 	srli	r17,r6,29
 200b940:	302890fa 	slli	r20,r6,3
 200b944:	18ff0044 	addi	r3,r3,-1023
 200b948:	88a2b03a 	or	r17,r17,r2
 200b94c:	000f883a 	mov	r7,zero
 200b950:	b5e6f03a 	xor	r19,r22,r23
 200b954:	3a4cb03a 	or	r6,r7,r9
 200b958:	008003c4 	movi	r2,15
 200b95c:	9809883a 	mov	r4,r19
 200b960:	90c7c83a 	sub	r3,r18,r3
 200b964:	9cc03fcc 	andi	r19,r19,255
 200b968:	11809636 	bltu	r2,r6,200bbc4 <__divdf3+0x334>
 200b96c:	300c90ba 	slli	r6,r6,2
 200b970:	00808074 	movhi	r2,513
 200b974:	10ae6104 	addi	r2,r2,-18044
 200b978:	308d883a 	add	r6,r6,r2
 200b97c:	30800017 	ldw	r2,0(r6)
 200b980:	1000683a 	jmp	r2
 200b984:	0200bbc4 	movi	r8,751
 200b988:	0200b9fc 	xorhi	r8,zero,743
 200b98c:	0200bbb4 	movhi	r8,750
 200b990:	0200b9f0 	cmpltui	r8,zero,743
 200b994:	0200bbb4 	movhi	r8,750
 200b998:	0200bb88 	cmpgei	r8,zero,750
 200b99c:	0200bbb4 	movhi	r8,750
 200b9a0:	0200b9f0 	cmpltui	r8,zero,743
 200b9a4:	0200b9fc 	xorhi	r8,zero,743
 200b9a8:	0200b9fc 	xorhi	r8,zero,743
 200b9ac:	0200bb88 	cmpgei	r8,zero,750
 200b9b0:	0200b9f0 	cmpltui	r8,zero,743
 200b9b4:	0200b9e0 	cmpeqi	r8,zero,743
 200b9b8:	0200b9e0 	cmpeqi	r8,zero,743
 200b9bc:	0200b9e0 	cmpeqi	r8,zero,743
 200b9c0:	0200bf4c 	andi	r8,zero,765
 200b9c4:	2404b03a 	or	r2,r4,r16
 200b9c8:	10006c1e 	bne	r2,zero,200bb7c <__divdf3+0x2ec>
 200b9cc:	02400204 	movi	r9,8
 200b9d0:	0021883a 	mov	r16,zero
 200b9d4:	002b883a 	mov	r21,zero
 200b9d8:	01400084 	movi	r5,2
 200b9dc:	003fca06 	br	200b908 <__divdf3+0x78>
 200b9e0:	8023883a 	mov	r17,r16
 200b9e4:	a829883a 	mov	r20,r21
 200b9e8:	4039883a 	mov	fp,r8
 200b9ec:	280f883a 	mov	r7,r5
 200b9f0:	00800084 	movi	r2,2
 200b9f4:	3881601e 	bne	r7,r2,200bf78 <__divdf3+0x6e8>
 200b9f8:	e027883a 	mov	r19,fp
 200b9fc:	9900004c 	andi	r4,r19,1
 200ba00:	0081ffc4 	movi	r2,2047
 200ba04:	0021883a 	mov	r16,zero
 200ba08:	002b883a 	mov	r21,zero
 200ba0c:	1004953a 	slli	r2,r2,20
 200ba10:	20c03fcc 	andi	r3,r4,255
 200ba14:	01400434 	movhi	r5,16
 200ba18:	297fffc4 	addi	r5,r5,-1
 200ba1c:	180697fa 	slli	r3,r3,31
 200ba20:	8160703a 	and	r16,r16,r5
 200ba24:	80a0b03a 	or	r16,r16,r2
 200ba28:	80c6b03a 	or	r3,r16,r3
 200ba2c:	a805883a 	mov	r2,r21
 200ba30:	dfc00f17 	ldw	ra,60(sp)
 200ba34:	df000e17 	ldw	fp,56(sp)
 200ba38:	ddc00d17 	ldw	r23,52(sp)
 200ba3c:	dd800c17 	ldw	r22,48(sp)
 200ba40:	dd400b17 	ldw	r21,44(sp)
 200ba44:	dd000a17 	ldw	r20,40(sp)
 200ba48:	dcc00917 	ldw	r19,36(sp)
 200ba4c:	dc800817 	ldw	r18,32(sp)
 200ba50:	dc400717 	ldw	r17,28(sp)
 200ba54:	dc000617 	ldw	r16,24(sp)
 200ba58:	dec01004 	addi	sp,sp,64
 200ba5c:	f800283a 	ret
 200ba60:	2404b03a 	or	r2,r4,r16
 200ba64:	2023883a 	mov	r17,r4
 200ba68:	10003f26 	beq	r2,zero,200bb68 <__divdf3+0x2d8>
 200ba6c:	80015e26 	beq	r16,zero,200bfe8 <__divdf3+0x758>
 200ba70:	8009883a 	mov	r4,r16
 200ba74:	d9800215 	stw	r6,8(sp)
 200ba78:	d9c00515 	stw	r7,20(sp)
 200ba7c:	da000415 	stw	r8,16(sp)
 200ba80:	200d8240 	call	200d824 <__clzsi2>
 200ba84:	d9800217 	ldw	r6,8(sp)
 200ba88:	d9c00517 	ldw	r7,20(sp)
 200ba8c:	da000417 	ldw	r8,16(sp)
 200ba90:	113ffd44 	addi	r4,r2,-11
 200ba94:	00c00704 	movi	r3,28
 200ba98:	19014f16 	blt	r3,r4,200bfd8 <__divdf3+0x748>
 200ba9c:	00c00744 	movi	r3,29
 200baa0:	157ffe04 	addi	r21,r2,-8
 200baa4:	1907c83a 	sub	r3,r3,r4
 200baa8:	8560983a 	sll	r16,r16,r21
 200baac:	88c6d83a 	srl	r3,r17,r3
 200bab0:	8d6a983a 	sll	r21,r17,r21
 200bab4:	1c20b03a 	or	r16,r3,r16
 200bab8:	1080fcc4 	addi	r2,r2,1011
 200babc:	00a5c83a 	sub	r18,zero,r2
 200bac0:	0013883a 	mov	r9,zero
 200bac4:	000b883a 	mov	r5,zero
 200bac8:	003f8f06 	br	200b908 <__divdf3+0x78>
 200bacc:	3444b03a 	or	r2,r6,r17
 200bad0:	1000231e 	bne	r2,zero,200bb60 <__divdf3+0x2d0>
 200bad4:	0023883a 	mov	r17,zero
 200bad8:	0029883a 	mov	r20,zero
 200badc:	01c00084 	movi	r7,2
 200bae0:	003f9b06 	br	200b950 <__divdf3+0xc0>
 200bae4:	3444b03a 	or	r2,r6,r17
 200bae8:	10001926 	beq	r2,zero,200bb50 <__divdf3+0x2c0>
 200baec:	88014b26 	beq	r17,zero,200c01c <__divdf3+0x78c>
 200baf0:	8809883a 	mov	r4,r17
 200baf4:	d9400115 	stw	r5,4(sp)
 200baf8:	d9800215 	stw	r6,8(sp)
 200bafc:	da000415 	stw	r8,16(sp)
 200bb00:	da400315 	stw	r9,12(sp)
 200bb04:	200d8240 	call	200d824 <__clzsi2>
 200bb08:	d9400117 	ldw	r5,4(sp)
 200bb0c:	d9800217 	ldw	r6,8(sp)
 200bb10:	da000417 	ldw	r8,16(sp)
 200bb14:	da400317 	ldw	r9,12(sp)
 200bb18:	113ffd44 	addi	r4,r2,-11
 200bb1c:	00c00704 	movi	r3,28
 200bb20:	19013a16 	blt	r3,r4,200c00c <__divdf3+0x77c>
 200bb24:	00c00744 	movi	r3,29
 200bb28:	153ffe04 	addi	r20,r2,-8
 200bb2c:	1907c83a 	sub	r3,r3,r4
 200bb30:	8d22983a 	sll	r17,r17,r20
 200bb34:	30c6d83a 	srl	r3,r6,r3
 200bb38:	3528983a 	sll	r20,r6,r20
 200bb3c:	1c62b03a 	or	r17,r3,r17
 200bb40:	1080fcc4 	addi	r2,r2,1011
 200bb44:	0087c83a 	sub	r3,zero,r2
 200bb48:	000f883a 	mov	r7,zero
 200bb4c:	003f8006 	br	200b950 <__divdf3+0xc0>
 200bb50:	0023883a 	mov	r17,zero
 200bb54:	0029883a 	mov	r20,zero
 200bb58:	01c00044 	movi	r7,1
 200bb5c:	003f7c06 	br	200b950 <__divdf3+0xc0>
 200bb60:	01c000c4 	movi	r7,3
 200bb64:	003f7a06 	br	200b950 <__divdf3+0xc0>
 200bb68:	02400104 	movi	r9,4
 200bb6c:	0021883a 	mov	r16,zero
 200bb70:	002b883a 	mov	r21,zero
 200bb74:	01400044 	movi	r5,1
 200bb78:	003f6306 	br	200b908 <__divdf3+0x78>
 200bb7c:	02400304 	movi	r9,12
 200bb80:	014000c4 	movi	r5,3
 200bb84:	003f6006 	br	200b908 <__divdf3+0x78>
 200bb88:	04000434 	movhi	r16,16
 200bb8c:	0009883a 	mov	r4,zero
 200bb90:	843fffc4 	addi	r16,r16,-1
 200bb94:	057fffc4 	movi	r21,-1
 200bb98:	0081ffc4 	movi	r2,2047
 200bb9c:	003f9b06 	br	200ba0c <__divdf3+0x17c>
 200bba0:	00c00044 	movi	r3,1
 200bba4:	1887c83a 	sub	r3,r3,r2
 200bba8:	01000e04 	movi	r4,56
 200bbac:	20c1530e 	bge	r4,r3,200c0fc <__divdf3+0x86c>
 200bbb0:	9900004c 	andi	r4,r19,1
 200bbb4:	0005883a 	mov	r2,zero
 200bbb8:	0021883a 	mov	r16,zero
 200bbbc:	002b883a 	mov	r21,zero
 200bbc0:	003f9206 	br	200ba0c <__divdf3+0x17c>
 200bbc4:	8c012e36 	bltu	r17,r16,200c080 <__divdf3+0x7f0>
 200bbc8:	84412c26 	beq	r16,r17,200c07c <__divdf3+0x7ec>
 200bbcc:	a82f883a 	mov	r23,r21
 200bbd0:	18ffffc4 	addi	r3,r3,-1
 200bbd4:	002b883a 	mov	r21,zero
 200bbd8:	a004d63a 	srli	r2,r20,24
 200bbdc:	8822923a 	slli	r17,r17,8
 200bbe0:	a028923a 	slli	r20,r20,8
 200bbe4:	8009883a 	mov	r4,r16
 200bbe8:	88acb03a 	or	r22,r17,r2
 200bbec:	dd000015 	stw	r20,0(sp)
 200bbf0:	b028d43a 	srli	r20,r22,16
 200bbf4:	d8c00215 	stw	r3,8(sp)
 200bbf8:	b4bfffcc 	andi	r18,r22,65535
 200bbfc:	a00b883a 	mov	r5,r20
 200bc00:	200af000 	call	200af00 <__udivsi3>
 200bc04:	100b883a 	mov	r5,r2
 200bc08:	9009883a 	mov	r4,r18
 200bc0c:	1023883a 	mov	r17,r2
 200bc10:	200afbc0 	call	200afbc <__mulsi3>
 200bc14:	8009883a 	mov	r4,r16
 200bc18:	a00b883a 	mov	r5,r20
 200bc1c:	1039883a 	mov	fp,r2
 200bc20:	200af640 	call	200af64 <__umodsi3>
 200bc24:	1004943a 	slli	r2,r2,16
 200bc28:	b808d43a 	srli	r4,r23,16
 200bc2c:	d8c00217 	ldw	r3,8(sp)
 200bc30:	2084b03a 	or	r2,r4,r2
 200bc34:	1700062e 	bgeu	r2,fp,200bc50 <__divdf3+0x3c0>
 200bc38:	1585883a 	add	r2,r2,r22
 200bc3c:	893fffc4 	addi	r4,r17,-1
 200bc40:	15811d36 	bltu	r2,r22,200c0b8 <__divdf3+0x828>
 200bc44:	17011c2e 	bgeu	r2,fp,200c0b8 <__divdf3+0x828>
 200bc48:	8c7fff84 	addi	r17,r17,-2
 200bc4c:	1585883a 	add	r2,r2,r22
 200bc50:	1739c83a 	sub	fp,r2,fp
 200bc54:	a00b883a 	mov	r5,r20
 200bc58:	e009883a 	mov	r4,fp
 200bc5c:	d8c00215 	stw	r3,8(sp)
 200bc60:	200af000 	call	200af00 <__udivsi3>
 200bc64:	100b883a 	mov	r5,r2
 200bc68:	9009883a 	mov	r4,r18
 200bc6c:	1021883a 	mov	r16,r2
 200bc70:	200afbc0 	call	200afbc <__mulsi3>
 200bc74:	a00b883a 	mov	r5,r20
 200bc78:	e009883a 	mov	r4,fp
 200bc7c:	d8800415 	stw	r2,16(sp)
 200bc80:	200af640 	call	200af64 <__umodsi3>
 200bc84:	1004943a 	slli	r2,r2,16
 200bc88:	da000417 	ldw	r8,16(sp)
 200bc8c:	bdffffcc 	andi	r23,r23,65535
 200bc90:	b884b03a 	or	r2,r23,r2
 200bc94:	d8c00217 	ldw	r3,8(sp)
 200bc98:	1200062e 	bgeu	r2,r8,200bcb4 <__divdf3+0x424>
 200bc9c:	1585883a 	add	r2,r2,r22
 200bca0:	813fffc4 	addi	r4,r16,-1
 200bca4:	15810236 	bltu	r2,r22,200c0b0 <__divdf3+0x820>
 200bca8:	1201012e 	bgeu	r2,r8,200c0b0 <__divdf3+0x820>
 200bcac:	843fff84 	addi	r16,r16,-2
 200bcb0:	1585883a 	add	r2,r2,r22
 200bcb4:	8822943a 	slli	r17,r17,16
 200bcb8:	d9800017 	ldw	r6,0(sp)
 200bcbc:	1211c83a 	sub	r8,r2,r8
 200bcc0:	8c22b03a 	or	r17,r17,r16
 200bcc4:	373fffcc 	andi	fp,r6,65535
 200bcc8:	8abfffcc 	andi	r10,r17,65535
 200bccc:	8820d43a 	srli	r16,r17,16
 200bcd0:	5009883a 	mov	r4,r10
 200bcd4:	e00b883a 	mov	r5,fp
 200bcd8:	302ed43a 	srli	r23,r6,16
 200bcdc:	d8c00215 	stw	r3,8(sp)
 200bce0:	da000415 	stw	r8,16(sp)
 200bce4:	da800115 	stw	r10,4(sp)
 200bce8:	200afbc0 	call	200afbc <__mulsi3>
 200bcec:	800b883a 	mov	r5,r16
 200bcf0:	e009883a 	mov	r4,fp
 200bcf4:	d8800515 	stw	r2,20(sp)
 200bcf8:	200afbc0 	call	200afbc <__mulsi3>
 200bcfc:	8009883a 	mov	r4,r16
 200bd00:	b80b883a 	mov	r5,r23
 200bd04:	d8800315 	stw	r2,12(sp)
 200bd08:	200afbc0 	call	200afbc <__mulsi3>
 200bd0c:	da800117 	ldw	r10,4(sp)
 200bd10:	b80b883a 	mov	r5,r23
 200bd14:	1021883a 	mov	r16,r2
 200bd18:	5009883a 	mov	r4,r10
 200bd1c:	200afbc0 	call	200afbc <__mulsi3>
 200bd20:	d9c00517 	ldw	r7,20(sp)
 200bd24:	da400317 	ldw	r9,12(sp)
 200bd28:	d8c00217 	ldw	r3,8(sp)
 200bd2c:	3808d43a 	srli	r4,r7,16
 200bd30:	1245883a 	add	r2,r2,r9
 200bd34:	da000417 	ldw	r8,16(sp)
 200bd38:	2085883a 	add	r2,r4,r2
 200bd3c:	1240022e 	bgeu	r2,r9,200bd48 <__divdf3+0x4b8>
 200bd40:	01000074 	movhi	r4,1
 200bd44:	8121883a 	add	r16,r16,r4
 200bd48:	1008d43a 	srli	r4,r2,16
 200bd4c:	1004943a 	slli	r2,r2,16
 200bd50:	39ffffcc 	andi	r7,r7,65535
 200bd54:	2409883a 	add	r4,r4,r16
 200bd58:	11c5883a 	add	r2,r2,r7
 200bd5c:	4100bb36 	bltu	r8,r4,200c04c <__divdf3+0x7bc>
 200bd60:	4100d726 	beq	r8,r4,200c0c0 <__divdf3+0x830>
 200bd64:	4109c83a 	sub	r4,r8,r4
 200bd68:	a8a1c83a 	sub	r16,r21,r2
 200bd6c:	ac2b803a 	cmpltu	r21,r21,r16
 200bd70:	256bc83a 	sub	r21,r4,r21
 200bd74:	b540d926 	beq	r22,r21,200c0dc <__divdf3+0x84c>
 200bd78:	a00b883a 	mov	r5,r20
 200bd7c:	a809883a 	mov	r4,r21
 200bd80:	d8c00215 	stw	r3,8(sp)
 200bd84:	200af000 	call	200af00 <__udivsi3>
 200bd88:	100b883a 	mov	r5,r2
 200bd8c:	9009883a 	mov	r4,r18
 200bd90:	d8800515 	stw	r2,20(sp)
 200bd94:	200afbc0 	call	200afbc <__mulsi3>
 200bd98:	a809883a 	mov	r4,r21
 200bd9c:	a00b883a 	mov	r5,r20
 200bda0:	d8800415 	stw	r2,16(sp)
 200bda4:	200af640 	call	200af64 <__umodsi3>
 200bda8:	1004943a 	slli	r2,r2,16
 200bdac:	8008d43a 	srli	r4,r16,16
 200bdb0:	da000417 	ldw	r8,16(sp)
 200bdb4:	d8c00217 	ldw	r3,8(sp)
 200bdb8:	2084b03a 	or	r2,r4,r2
 200bdbc:	d9c00517 	ldw	r7,20(sp)
 200bdc0:	1200062e 	bgeu	r2,r8,200bddc <__divdf3+0x54c>
 200bdc4:	1585883a 	add	r2,r2,r22
 200bdc8:	393fffc4 	addi	r4,r7,-1
 200bdcc:	1580c536 	bltu	r2,r22,200c0e4 <__divdf3+0x854>
 200bdd0:	1200c42e 	bgeu	r2,r8,200c0e4 <__divdf3+0x854>
 200bdd4:	39ffff84 	addi	r7,r7,-2
 200bdd8:	1585883a 	add	r2,r2,r22
 200bddc:	122bc83a 	sub	r21,r2,r8
 200bde0:	a00b883a 	mov	r5,r20
 200bde4:	a809883a 	mov	r4,r21
 200bde8:	d8c00215 	stw	r3,8(sp)
 200bdec:	d9c00515 	stw	r7,20(sp)
 200bdf0:	200af000 	call	200af00 <__udivsi3>
 200bdf4:	9009883a 	mov	r4,r18
 200bdf8:	100b883a 	mov	r5,r2
 200bdfc:	d8800415 	stw	r2,16(sp)
 200be00:	200afbc0 	call	200afbc <__mulsi3>
 200be04:	a809883a 	mov	r4,r21
 200be08:	a00b883a 	mov	r5,r20
 200be0c:	1025883a 	mov	r18,r2
 200be10:	200af640 	call	200af64 <__umodsi3>
 200be14:	1004943a 	slli	r2,r2,16
 200be18:	813fffcc 	andi	r4,r16,65535
 200be1c:	d8c00217 	ldw	r3,8(sp)
 200be20:	20a0b03a 	or	r16,r4,r2
 200be24:	d9c00517 	ldw	r7,20(sp)
 200be28:	da000417 	ldw	r8,16(sp)
 200be2c:	8480062e 	bgeu	r16,r18,200be48 <__divdf3+0x5b8>
 200be30:	85a1883a 	add	r16,r16,r22
 200be34:	40bfffc4 	addi	r2,r8,-1
 200be38:	8580ac36 	bltu	r16,r22,200c0ec <__divdf3+0x85c>
 200be3c:	8480ab2e 	bgeu	r16,r18,200c0ec <__divdf3+0x85c>
 200be40:	423fff84 	addi	r8,r8,-2
 200be44:	85a1883a 	add	r16,r16,r22
 200be48:	3804943a 	slli	r2,r7,16
 200be4c:	84a1c83a 	sub	r16,r16,r18
 200be50:	e009883a 	mov	r4,fp
 200be54:	1228b03a 	or	r20,r2,r8
 200be58:	a1ffffcc 	andi	r7,r20,65535
 200be5c:	a024d43a 	srli	r18,r20,16
 200be60:	380b883a 	mov	r5,r7
 200be64:	d8c00215 	stw	r3,8(sp)
 200be68:	d9c00515 	stw	r7,20(sp)
 200be6c:	200afbc0 	call	200afbc <__mulsi3>
 200be70:	900b883a 	mov	r5,r18
 200be74:	e009883a 	mov	r4,fp
 200be78:	102b883a 	mov	r21,r2
 200be7c:	200afbc0 	call	200afbc <__mulsi3>
 200be80:	900b883a 	mov	r5,r18
 200be84:	b809883a 	mov	r4,r23
 200be88:	1039883a 	mov	fp,r2
 200be8c:	200afbc0 	call	200afbc <__mulsi3>
 200be90:	d9c00517 	ldw	r7,20(sp)
 200be94:	b80b883a 	mov	r5,r23
 200be98:	1025883a 	mov	r18,r2
 200be9c:	3809883a 	mov	r4,r7
 200bea0:	200afbc0 	call	200afbc <__mulsi3>
 200bea4:	a808d43a 	srli	r4,r21,16
 200bea8:	1705883a 	add	r2,r2,fp
 200beac:	d8c00217 	ldw	r3,8(sp)
 200beb0:	2085883a 	add	r2,r4,r2
 200beb4:	1700022e 	bgeu	r2,fp,200bec0 <__divdf3+0x630>
 200beb8:	01000074 	movhi	r4,1
 200bebc:	9125883a 	add	r18,r18,r4
 200bec0:	1008d43a 	srli	r4,r2,16
 200bec4:	1004943a 	slli	r2,r2,16
 200bec8:	ad7fffcc 	andi	r21,r21,65535
 200becc:	2489883a 	add	r4,r4,r18
 200bed0:	1545883a 	add	r2,r2,r21
 200bed4:	81003836 	bltu	r16,r4,200bfb8 <__divdf3+0x728>
 200bed8:	81003626 	beq	r16,r4,200bfb4 <__divdf3+0x724>
 200bedc:	a5000054 	ori	r20,r20,1
 200bee0:	1880ffc4 	addi	r2,r3,1023
 200bee4:	00bf2e0e 	bge	zero,r2,200bba0 <__divdf3+0x310>
 200bee8:	a10001cc 	andi	r4,r20,7
 200beec:	20000726 	beq	r4,zero,200bf0c <__divdf3+0x67c>
 200bef0:	a10003cc 	andi	r4,r20,15
 200bef4:	01400104 	movi	r5,4
 200bef8:	21400426 	beq	r4,r5,200bf0c <__divdf3+0x67c>
 200befc:	a149883a 	add	r4,r20,r5
 200bf00:	2529803a 	cmpltu	r20,r4,r20
 200bf04:	8d23883a 	add	r17,r17,r20
 200bf08:	2029883a 	mov	r20,r4
 200bf0c:	8900402c 	andhi	r4,r17,256
 200bf10:	20000426 	beq	r4,zero,200bf24 <__divdf3+0x694>
 200bf14:	18810004 	addi	r2,r3,1024
 200bf18:	00ffc034 	movhi	r3,65280
 200bf1c:	18ffffc4 	addi	r3,r3,-1
 200bf20:	88e2703a 	and	r17,r17,r3
 200bf24:	00c1ff84 	movi	r3,2046
 200bf28:	18beb416 	blt	r3,r2,200b9fc <__divdf3+0x16c>
 200bf2c:	a028d0fa 	srli	r20,r20,3
 200bf30:	882a977a 	slli	r21,r17,29
 200bf34:	8820927a 	slli	r16,r17,9
 200bf38:	1081ffcc 	andi	r2,r2,2047
 200bf3c:	ad2ab03a 	or	r21,r21,r20
 200bf40:	8020d33a 	srli	r16,r16,12
 200bf44:	9900004c 	andi	r4,r19,1
 200bf48:	003eb006 	br	200ba0c <__divdf3+0x17c>
 200bf4c:	8080022c 	andhi	r2,r16,8
 200bf50:	10001226 	beq	r2,zero,200bf9c <__divdf3+0x70c>
 200bf54:	8880022c 	andhi	r2,r17,8
 200bf58:	1000101e 	bne	r2,zero,200bf9c <__divdf3+0x70c>
 200bf5c:	00800434 	movhi	r2,16
 200bf60:	8c000234 	orhi	r16,r17,8
 200bf64:	10bfffc4 	addi	r2,r2,-1
 200bf68:	b809883a 	mov	r4,r23
 200bf6c:	80a0703a 	and	r16,r16,r2
 200bf70:	a02b883a 	mov	r21,r20
 200bf74:	003f0806 	br	200bb98 <__divdf3+0x308>
 200bf78:	008000c4 	movi	r2,3
 200bf7c:	3880b126 	beq	r7,r2,200c244 <__divdf3+0x9b4>
 200bf80:	00800044 	movi	r2,1
 200bf84:	38805b1e 	bne	r7,r2,200c0f4 <__divdf3+0x864>
 200bf88:	e009883a 	mov	r4,fp
 200bf8c:	0005883a 	mov	r2,zero
 200bf90:	0021883a 	mov	r16,zero
 200bf94:	002b883a 	mov	r21,zero
 200bf98:	003e9c06 	br	200ba0c <__divdf3+0x17c>
 200bf9c:	00800434 	movhi	r2,16
 200bfa0:	84000234 	orhi	r16,r16,8
 200bfa4:	10bfffc4 	addi	r2,r2,-1
 200bfa8:	b009883a 	mov	r4,r22
 200bfac:	80a0703a 	and	r16,r16,r2
 200bfb0:	003ef906 	br	200bb98 <__divdf3+0x308>
 200bfb4:	103fca26 	beq	r2,zero,200bee0 <__divdf3+0x650>
 200bfb8:	b421883a 	add	r16,r22,r16
 200bfbc:	a17fffc4 	addi	r5,r20,-1
 200bfc0:	8580422e 	bgeu	r16,r22,200c0cc <__divdf3+0x83c>
 200bfc4:	2829883a 	mov	r20,r5
 200bfc8:	813fc41e 	bne	r16,r4,200bedc <__divdf3+0x64c>
 200bfcc:	d9800017 	ldw	r6,0(sp)
 200bfd0:	30bfc21e 	bne	r6,r2,200bedc <__divdf3+0x64c>
 200bfd4:	003fc206 	br	200bee0 <__divdf3+0x650>
 200bfd8:	143ff604 	addi	r16,r2,-40
 200bfdc:	8c20983a 	sll	r16,r17,r16
 200bfe0:	002b883a 	mov	r21,zero
 200bfe4:	003eb406 	br	200bab8 <__divdf3+0x228>
 200bfe8:	d9800215 	stw	r6,8(sp)
 200bfec:	d9c00515 	stw	r7,20(sp)
 200bff0:	da000415 	stw	r8,16(sp)
 200bff4:	200d8240 	call	200d824 <__clzsi2>
 200bff8:	10800804 	addi	r2,r2,32
 200bffc:	da000417 	ldw	r8,16(sp)
 200c000:	d9c00517 	ldw	r7,20(sp)
 200c004:	d9800217 	ldw	r6,8(sp)
 200c008:	003ea106 	br	200ba90 <__divdf3+0x200>
 200c00c:	147ff604 	addi	r17,r2,-40
 200c010:	3462983a 	sll	r17,r6,r17
 200c014:	0029883a 	mov	r20,zero
 200c018:	003ec906 	br	200bb40 <__divdf3+0x2b0>
 200c01c:	3009883a 	mov	r4,r6
 200c020:	d9400115 	stw	r5,4(sp)
 200c024:	d9800215 	stw	r6,8(sp)
 200c028:	da000415 	stw	r8,16(sp)
 200c02c:	da400315 	stw	r9,12(sp)
 200c030:	200d8240 	call	200d824 <__clzsi2>
 200c034:	10800804 	addi	r2,r2,32
 200c038:	da400317 	ldw	r9,12(sp)
 200c03c:	da000417 	ldw	r8,16(sp)
 200c040:	d9800217 	ldw	r6,8(sp)
 200c044:	d9400117 	ldw	r5,4(sp)
 200c048:	003eb306 	br	200bb18 <__divdf3+0x288>
 200c04c:	d9800017 	ldw	r6,0(sp)
 200c050:	a9ab883a 	add	r21,r21,r6
 200c054:	a98b803a 	cmpltu	r5,r21,r6
 200c058:	2d8b883a 	add	r5,r5,r22
 200c05c:	2a11883a 	add	r8,r5,r8
 200c060:	897fffc4 	addi	r5,r17,-1
 200c064:	b2000c2e 	bgeu	r22,r8,200c098 <__divdf3+0x808>
 200c068:	41003f36 	bltu	r8,r4,200c168 <__divdf3+0x8d8>
 200c06c:	22006c26 	beq	r4,r8,200c220 <__divdf3+0x990>
 200c070:	4109c83a 	sub	r4,r8,r4
 200c074:	2823883a 	mov	r17,r5
 200c078:	003f3b06 	br	200bd68 <__divdf3+0x4d8>
 200c07c:	ad3ed336 	bltu	r21,r20,200bbcc <__divdf3+0x33c>
 200c080:	a804d07a 	srli	r2,r21,1
 200c084:	802e97fa 	slli	r23,r16,31
 200c088:	a82a97fa 	slli	r21,r21,31
 200c08c:	8020d07a 	srli	r16,r16,1
 200c090:	b8aeb03a 	or	r23,r23,r2
 200c094:	003ed006 	br	200bbd8 <__divdf3+0x348>
 200c098:	b23ff51e 	bne	r22,r8,200c070 <__divdf3+0x7e0>
 200c09c:	d9800017 	ldw	r6,0(sp)
 200c0a0:	a9bff12e 	bgeu	r21,r6,200c068 <__divdf3+0x7d8>
 200c0a4:	b109c83a 	sub	r4,r22,r4
 200c0a8:	2823883a 	mov	r17,r5
 200c0ac:	003f2e06 	br	200bd68 <__divdf3+0x4d8>
 200c0b0:	2021883a 	mov	r16,r4
 200c0b4:	003eff06 	br	200bcb4 <__divdf3+0x424>
 200c0b8:	2023883a 	mov	r17,r4
 200c0bc:	003ee406 	br	200bc50 <__divdf3+0x3c0>
 200c0c0:	a8bfe236 	bltu	r21,r2,200c04c <__divdf3+0x7bc>
 200c0c4:	0009883a 	mov	r4,zero
 200c0c8:	003f2706 	br	200bd68 <__divdf3+0x4d8>
 200c0cc:	81002d36 	bltu	r16,r4,200c184 <__divdf3+0x8f4>
 200c0d0:	24005626 	beq	r4,r16,200c22c <__divdf3+0x99c>
 200c0d4:	2829883a 	mov	r20,r5
 200c0d8:	003f8006 	br	200bedc <__divdf3+0x64c>
 200c0dc:	053fffc4 	movi	r20,-1
 200c0e0:	003f7f06 	br	200bee0 <__divdf3+0x650>
 200c0e4:	200f883a 	mov	r7,r4
 200c0e8:	003f3c06 	br	200bddc <__divdf3+0x54c>
 200c0ec:	1011883a 	mov	r8,r2
 200c0f0:	003f5506 	br	200be48 <__divdf3+0x5b8>
 200c0f4:	e027883a 	mov	r19,fp
 200c0f8:	003f7906 	br	200bee0 <__divdf3+0x650>
 200c0fc:	010007c4 	movi	r4,31
 200c100:	20c02816 	blt	r4,r3,200c1a4 <__divdf3+0x914>
 200c104:	00800804 	movi	r2,32
 200c108:	10c5c83a 	sub	r2,r2,r3
 200c10c:	888a983a 	sll	r5,r17,r2
 200c110:	a0c8d83a 	srl	r4,r20,r3
 200c114:	a084983a 	sll	r2,r20,r2
 200c118:	88e2d83a 	srl	r17,r17,r3
 200c11c:	2906b03a 	or	r3,r5,r4
 200c120:	1004c03a 	cmpne	r2,r2,zero
 200c124:	1886b03a 	or	r3,r3,r2
 200c128:	188001cc 	andi	r2,r3,7
 200c12c:	10000726 	beq	r2,zero,200c14c <__divdf3+0x8bc>
 200c130:	188003cc 	andi	r2,r3,15
 200c134:	01000104 	movi	r4,4
 200c138:	11000426 	beq	r2,r4,200c14c <__divdf3+0x8bc>
 200c13c:	1805883a 	mov	r2,r3
 200c140:	10c00104 	addi	r3,r2,4
 200c144:	1885803a 	cmpltu	r2,r3,r2
 200c148:	88a3883a 	add	r17,r17,r2
 200c14c:	8880202c 	andhi	r2,r17,128
 200c150:	10002926 	beq	r2,zero,200c1f8 <__divdf3+0x968>
 200c154:	9900004c 	andi	r4,r19,1
 200c158:	00800044 	movi	r2,1
 200c15c:	0021883a 	mov	r16,zero
 200c160:	002b883a 	mov	r21,zero
 200c164:	003e2906 	br	200ba0c <__divdf3+0x17c>
 200c168:	d9800017 	ldw	r6,0(sp)
 200c16c:	8c7fff84 	addi	r17,r17,-2
 200c170:	a9ab883a 	add	r21,r21,r6
 200c174:	a98b803a 	cmpltu	r5,r21,r6
 200c178:	2d8b883a 	add	r5,r5,r22
 200c17c:	2a11883a 	add	r8,r5,r8
 200c180:	003ef806 	br	200bd64 <__divdf3+0x4d4>
 200c184:	d9800017 	ldw	r6,0(sp)
 200c188:	318f883a 	add	r7,r6,r6
 200c18c:	398b803a 	cmpltu	r5,r7,r6
 200c190:	2d8d883a 	add	r6,r5,r22
 200c194:	81a1883a 	add	r16,r16,r6
 200c198:	a17fff84 	addi	r5,r20,-2
 200c19c:	d9c00015 	stw	r7,0(sp)
 200c1a0:	003f8806 	br	200bfc4 <__divdf3+0x734>
 200c1a4:	013ff844 	movi	r4,-31
 200c1a8:	2085c83a 	sub	r2,r4,r2
 200c1ac:	8888d83a 	srl	r4,r17,r2
 200c1b0:	00800804 	movi	r2,32
 200c1b4:	18802126 	beq	r3,r2,200c23c <__divdf3+0x9ac>
 200c1b8:	04001004 	movi	r16,64
 200c1bc:	80c7c83a 	sub	r3,r16,r3
 200c1c0:	88e0983a 	sll	r16,r17,r3
 200c1c4:	8504b03a 	or	r2,r16,r20
 200c1c8:	1004c03a 	cmpne	r2,r2,zero
 200c1cc:	2084b03a 	or	r2,r4,r2
 200c1d0:	144001cc 	andi	r17,r2,7
 200c1d4:	88000d1e 	bne	r17,zero,200c20c <__divdf3+0x97c>
 200c1d8:	0021883a 	mov	r16,zero
 200c1dc:	102ad0fa 	srli	r21,r2,3
 200c1e0:	9900004c 	andi	r4,r19,1
 200c1e4:	0005883a 	mov	r2,zero
 200c1e8:	ac6ab03a 	or	r21,r21,r17
 200c1ec:	003e0706 	br	200ba0c <__divdf3+0x17c>
 200c1f0:	1007883a 	mov	r3,r2
 200c1f4:	0023883a 	mov	r17,zero
 200c1f8:	8820927a 	slli	r16,r17,9
 200c1fc:	1805883a 	mov	r2,r3
 200c200:	8822977a 	slli	r17,r17,29
 200c204:	8020d33a 	srli	r16,r16,12
 200c208:	003ff406 	br	200c1dc <__divdf3+0x94c>
 200c20c:	10c003cc 	andi	r3,r2,15
 200c210:	01000104 	movi	r4,4
 200c214:	193ff626 	beq	r3,r4,200c1f0 <__divdf3+0x960>
 200c218:	0023883a 	mov	r17,zero
 200c21c:	003fc806 	br	200c140 <__divdf3+0x8b0>
 200c220:	a8bfd136 	bltu	r21,r2,200c168 <__divdf3+0x8d8>
 200c224:	2823883a 	mov	r17,r5
 200c228:	003fa606 	br	200c0c4 <__divdf3+0x834>
 200c22c:	d9800017 	ldw	r6,0(sp)
 200c230:	30bfd436 	bltu	r6,r2,200c184 <__divdf3+0x8f4>
 200c234:	2829883a 	mov	r20,r5
 200c238:	003f6406 	br	200bfcc <__divdf3+0x73c>
 200c23c:	0021883a 	mov	r16,zero
 200c240:	003fe006 	br	200c1c4 <__divdf3+0x934>
 200c244:	00800434 	movhi	r2,16
 200c248:	8c000234 	orhi	r16,r17,8
 200c24c:	10bfffc4 	addi	r2,r2,-1
 200c250:	e009883a 	mov	r4,fp
 200c254:	80a0703a 	and	r16,r16,r2
 200c258:	a02b883a 	mov	r21,r20
 200c25c:	003e4e06 	br	200bb98 <__divdf3+0x308>

0200c260 <__eqdf2>:
 200c260:	2804d53a 	srli	r2,r5,20
 200c264:	3806d53a 	srli	r3,r7,20
 200c268:	02000434 	movhi	r8,16
 200c26c:	423fffc4 	addi	r8,r8,-1
 200c270:	1081ffcc 	andi	r2,r2,2047
 200c274:	0281ffc4 	movi	r10,2047
 200c278:	2a12703a 	and	r9,r5,r8
 200c27c:	18c1ffcc 	andi	r3,r3,2047
 200c280:	3a10703a 	and	r8,r7,r8
 200c284:	280ad7fa 	srli	r5,r5,31
 200c288:	380ed7fa 	srli	r7,r7,31
 200c28c:	12801026 	beq	r2,r10,200c2d0 <__eqdf2+0x70>
 200c290:	0281ffc4 	movi	r10,2047
 200c294:	1a800a26 	beq	r3,r10,200c2c0 <__eqdf2+0x60>
 200c298:	10c00226 	beq	r2,r3,200c2a4 <__eqdf2+0x44>
 200c29c:	00800044 	movi	r2,1
 200c2a0:	f800283a 	ret
 200c2a4:	4a3ffd1e 	bne	r9,r8,200c29c <__eqdf2+0x3c>
 200c2a8:	21bffc1e 	bne	r4,r6,200c29c <__eqdf2+0x3c>
 200c2ac:	29c00c26 	beq	r5,r7,200c2e0 <__eqdf2+0x80>
 200c2b0:	103ffa1e 	bne	r2,zero,200c29c <__eqdf2+0x3c>
 200c2b4:	2244b03a 	or	r2,r4,r9
 200c2b8:	1004c03a 	cmpne	r2,r2,zero
 200c2bc:	f800283a 	ret
 200c2c0:	3214b03a 	or	r10,r6,r8
 200c2c4:	503ff426 	beq	r10,zero,200c298 <__eqdf2+0x38>
 200c2c8:	00800044 	movi	r2,1
 200c2cc:	f800283a 	ret
 200c2d0:	2254b03a 	or	r10,r4,r9
 200c2d4:	503fee26 	beq	r10,zero,200c290 <__eqdf2+0x30>
 200c2d8:	00800044 	movi	r2,1
 200c2dc:	f800283a 	ret
 200c2e0:	0005883a 	mov	r2,zero
 200c2e4:	f800283a 	ret

0200c2e8 <__gedf2>:
 200c2e8:	2804d53a 	srli	r2,r5,20
 200c2ec:	3806d53a 	srli	r3,r7,20
 200c2f0:	02000434 	movhi	r8,16
 200c2f4:	423fffc4 	addi	r8,r8,-1
 200c2f8:	1081ffcc 	andi	r2,r2,2047
 200c2fc:	0241ffc4 	movi	r9,2047
 200c300:	2a14703a 	and	r10,r5,r8
 200c304:	18c1ffcc 	andi	r3,r3,2047
 200c308:	3a10703a 	and	r8,r7,r8
 200c30c:	280ad7fa 	srli	r5,r5,31
 200c310:	380ed7fa 	srli	r7,r7,31
 200c314:	12401d26 	beq	r2,r9,200c38c <__gedf2+0xa4>
 200c318:	0241ffc4 	movi	r9,2047
 200c31c:	1a401226 	beq	r3,r9,200c368 <__gedf2+0x80>
 200c320:	1000081e 	bne	r2,zero,200c344 <__gedf2+0x5c>
 200c324:	2296b03a 	or	r11,r4,r10
 200c328:	5813003a 	cmpeq	r9,r11,zero
 200c32c:	1800091e 	bne	r3,zero,200c354 <__gedf2+0x6c>
 200c330:	3218b03a 	or	r12,r6,r8
 200c334:	6000071e 	bne	r12,zero,200c354 <__gedf2+0x6c>
 200c338:	0005883a 	mov	r2,zero
 200c33c:	5800101e 	bne	r11,zero,200c380 <__gedf2+0x98>
 200c340:	f800283a 	ret
 200c344:	18000c1e 	bne	r3,zero,200c378 <__gedf2+0x90>
 200c348:	3212b03a 	or	r9,r6,r8
 200c34c:	48000c26 	beq	r9,zero,200c380 <__gedf2+0x98>
 200c350:	0013883a 	mov	r9,zero
 200c354:	39c03fcc 	andi	r7,r7,255
 200c358:	48000826 	beq	r9,zero,200c37c <__gedf2+0x94>
 200c35c:	38000926 	beq	r7,zero,200c384 <__gedf2+0x9c>
 200c360:	00800044 	movi	r2,1
 200c364:	f800283a 	ret
 200c368:	3212b03a 	or	r9,r6,r8
 200c36c:	483fec26 	beq	r9,zero,200c320 <__gedf2+0x38>
 200c370:	00bfff84 	movi	r2,-2
 200c374:	f800283a 	ret
 200c378:	39c03fcc 	andi	r7,r7,255
 200c37c:	29c00626 	beq	r5,r7,200c398 <__gedf2+0xb0>
 200c380:	283ff726 	beq	r5,zero,200c360 <__gedf2+0x78>
 200c384:	00bfffc4 	movi	r2,-1
 200c388:	f800283a 	ret
 200c38c:	2292b03a 	or	r9,r4,r10
 200c390:	483fe126 	beq	r9,zero,200c318 <__gedf2+0x30>
 200c394:	003ff606 	br	200c370 <__gedf2+0x88>
 200c398:	18bff916 	blt	r3,r2,200c380 <__gedf2+0x98>
 200c39c:	10c00316 	blt	r2,r3,200c3ac <__gedf2+0xc4>
 200c3a0:	42bff736 	bltu	r8,r10,200c380 <__gedf2+0x98>
 200c3a4:	52000326 	beq	r10,r8,200c3b4 <__gedf2+0xcc>
 200c3a8:	5200042e 	bgeu	r10,r8,200c3bc <__gedf2+0xd4>
 200c3ac:	283fec1e 	bne	r5,zero,200c360 <__gedf2+0x78>
 200c3b0:	003ff406 	br	200c384 <__gedf2+0x9c>
 200c3b4:	313ff236 	bltu	r6,r4,200c380 <__gedf2+0x98>
 200c3b8:	21bffc36 	bltu	r4,r6,200c3ac <__gedf2+0xc4>
 200c3bc:	0005883a 	mov	r2,zero
 200c3c0:	f800283a 	ret

0200c3c4 <__ledf2>:
 200c3c4:	2804d53a 	srli	r2,r5,20
 200c3c8:	3810d53a 	srli	r8,r7,20
 200c3cc:	00c00434 	movhi	r3,16
 200c3d0:	18ffffc4 	addi	r3,r3,-1
 200c3d4:	1081ffcc 	andi	r2,r2,2047
 200c3d8:	0241ffc4 	movi	r9,2047
 200c3dc:	28d4703a 	and	r10,r5,r3
 200c3e0:	4201ffcc 	andi	r8,r8,2047
 200c3e4:	38c6703a 	and	r3,r7,r3
 200c3e8:	280ad7fa 	srli	r5,r5,31
 200c3ec:	380ed7fa 	srli	r7,r7,31
 200c3f0:	12401f26 	beq	r2,r9,200c470 <__ledf2+0xac>
 200c3f4:	0241ffc4 	movi	r9,2047
 200c3f8:	42401426 	beq	r8,r9,200c44c <__ledf2+0x88>
 200c3fc:	1000091e 	bne	r2,zero,200c424 <__ledf2+0x60>
 200c400:	2296b03a 	or	r11,r4,r10
 200c404:	5813003a 	cmpeq	r9,r11,zero
 200c408:	29403fcc 	andi	r5,r5,255
 200c40c:	40000a1e 	bne	r8,zero,200c438 <__ledf2+0x74>
 200c410:	30d8b03a 	or	r12,r6,r3
 200c414:	6000081e 	bne	r12,zero,200c438 <__ledf2+0x74>
 200c418:	0005883a 	mov	r2,zero
 200c41c:	5800111e 	bne	r11,zero,200c464 <__ledf2+0xa0>
 200c420:	f800283a 	ret
 200c424:	29403fcc 	andi	r5,r5,255
 200c428:	40000c1e 	bne	r8,zero,200c45c <__ledf2+0x98>
 200c42c:	30d2b03a 	or	r9,r6,r3
 200c430:	48000c26 	beq	r9,zero,200c464 <__ledf2+0xa0>
 200c434:	0013883a 	mov	r9,zero
 200c438:	39c03fcc 	andi	r7,r7,255
 200c43c:	48000826 	beq	r9,zero,200c460 <__ledf2+0x9c>
 200c440:	38001126 	beq	r7,zero,200c488 <__ledf2+0xc4>
 200c444:	00800044 	movi	r2,1
 200c448:	f800283a 	ret
 200c44c:	30d2b03a 	or	r9,r6,r3
 200c450:	483fea26 	beq	r9,zero,200c3fc <__ledf2+0x38>
 200c454:	00800084 	movi	r2,2
 200c458:	f800283a 	ret
 200c45c:	39c03fcc 	andi	r7,r7,255
 200c460:	39400726 	beq	r7,r5,200c480 <__ledf2+0xbc>
 200c464:	2800081e 	bne	r5,zero,200c488 <__ledf2+0xc4>
 200c468:	00800044 	movi	r2,1
 200c46c:	f800283a 	ret
 200c470:	2292b03a 	or	r9,r4,r10
 200c474:	483fdf26 	beq	r9,zero,200c3f4 <__ledf2+0x30>
 200c478:	00800084 	movi	r2,2
 200c47c:	f800283a 	ret
 200c480:	4080030e 	bge	r8,r2,200c490 <__ledf2+0xcc>
 200c484:	383fef26 	beq	r7,zero,200c444 <__ledf2+0x80>
 200c488:	00bfffc4 	movi	r2,-1
 200c48c:	f800283a 	ret
 200c490:	123feb16 	blt	r2,r8,200c440 <__ledf2+0x7c>
 200c494:	1abff336 	bltu	r3,r10,200c464 <__ledf2+0xa0>
 200c498:	50c00326 	beq	r10,r3,200c4a8 <__ledf2+0xe4>
 200c49c:	50c0042e 	bgeu	r10,r3,200c4b0 <__ledf2+0xec>
 200c4a0:	283fe81e 	bne	r5,zero,200c444 <__ledf2+0x80>
 200c4a4:	003ff806 	br	200c488 <__ledf2+0xc4>
 200c4a8:	313fee36 	bltu	r6,r4,200c464 <__ledf2+0xa0>
 200c4ac:	21bffc36 	bltu	r4,r6,200c4a0 <__ledf2+0xdc>
 200c4b0:	0005883a 	mov	r2,zero
 200c4b4:	f800283a 	ret

0200c4b8 <__muldf3>:
 200c4b8:	deffee04 	addi	sp,sp,-72
 200c4bc:	dd000c15 	stw	r20,48(sp)
 200c4c0:	2828d53a 	srli	r20,r5,20
 200c4c4:	ddc00f15 	stw	r23,60(sp)
 200c4c8:	282ed7fa 	srli	r23,r5,31
 200c4cc:	dc000815 	stw	r16,32(sp)
 200c4d0:	04000434 	movhi	r16,16
 200c4d4:	dcc00b15 	stw	r19,44(sp)
 200c4d8:	843fffc4 	addi	r16,r16,-1
 200c4dc:	dfc01115 	stw	ra,68(sp)
 200c4e0:	df001015 	stw	fp,64(sp)
 200c4e4:	dd800e15 	stw	r22,56(sp)
 200c4e8:	dd400d15 	stw	r21,52(sp)
 200c4ec:	dc800a15 	stw	r18,40(sp)
 200c4f0:	dc400915 	stw	r17,36(sp)
 200c4f4:	a501ffcc 	andi	r20,r20,2047
 200c4f8:	2c20703a 	and	r16,r5,r16
 200c4fc:	b827883a 	mov	r19,r23
 200c500:	ba403fcc 	andi	r9,r23,255
 200c504:	a0006026 	beq	r20,zero,200c688 <__muldf3+0x1d0>
 200c508:	0081ffc4 	movi	r2,2047
 200c50c:	202d883a 	mov	r22,r4
 200c510:	a0803626 	beq	r20,r2,200c5ec <__muldf3+0x134>
 200c514:	84000434 	orhi	r16,r16,16
 200c518:	200ad77a 	srli	r5,r4,29
 200c51c:	800490fa 	slli	r2,r16,3
 200c520:	202c90fa 	slli	r22,r4,3
 200c524:	a53f0044 	addi	r20,r20,-1023
 200c528:	28a0b03a 	or	r16,r5,r2
 200c52c:	002b883a 	mov	r21,zero
 200c530:	000b883a 	mov	r5,zero
 200c534:	3804d53a 	srli	r2,r7,20
 200c538:	3838d7fa 	srli	fp,r7,31
 200c53c:	04400434 	movhi	r17,16
 200c540:	8c7fffc4 	addi	r17,r17,-1
 200c544:	1081ffcc 	andi	r2,r2,2047
 200c548:	3025883a 	mov	r18,r6
 200c54c:	3c62703a 	and	r17,r7,r17
 200c550:	e2803fcc 	andi	r10,fp,255
 200c554:	10006d26 	beq	r2,zero,200c70c <__muldf3+0x254>
 200c558:	00c1ffc4 	movi	r3,2047
 200c55c:	10c06526 	beq	r2,r3,200c6f4 <__muldf3+0x23c>
 200c560:	8c400434 	orhi	r17,r17,16
 200c564:	300ed77a 	srli	r7,r6,29
 200c568:	880690fa 	slli	r3,r17,3
 200c56c:	302490fa 	slli	r18,r6,3
 200c570:	10bf0044 	addi	r2,r2,-1023
 200c574:	38e2b03a 	or	r17,r7,r3
 200c578:	000f883a 	mov	r7,zero
 200c57c:	a087883a 	add	r3,r20,r2
 200c580:	010003c4 	movi	r4,15
 200c584:	3d44b03a 	or	r2,r7,r21
 200c588:	e5ccf03a 	xor	r6,fp,r23
 200c58c:	1a000044 	addi	r8,r3,1
 200c590:	20809b36 	bltu	r4,r2,200c800 <__muldf3+0x348>
 200c594:	100490ba 	slli	r2,r2,2
 200c598:	01008074 	movhi	r4,513
 200c59c:	21316b04 	addi	r4,r4,-14932
 200c5a0:	1105883a 	add	r2,r2,r4
 200c5a4:	10800017 	ldw	r2,0(r2)
 200c5a8:	1000683a 	jmp	r2
 200c5ac:	0200c800 	call	200c80 <__alt_mem_mem_Nios_PI+0xc80>
 200c5b0:	0200c60c 	andi	r8,zero,792
 200c5b4:	0200c60c 	andi	r8,zero,792
 200c5b8:	0200c608 	cmpgei	r8,zero,792
 200c5bc:	0200c7dc 	xori	r8,zero,799
 200c5c0:	0200c7dc 	xori	r8,zero,799
 200c5c4:	0200c7c4 	movi	r8,799
 200c5c8:	0200c608 	cmpgei	r8,zero,792
 200c5cc:	0200c7dc 	xori	r8,zero,799
 200c5d0:	0200c7c4 	movi	r8,799
 200c5d4:	0200c7dc 	xori	r8,zero,799
 200c5d8:	0200c608 	cmpgei	r8,zero,792
 200c5dc:	0200c7ec 	andhi	r8,zero,799
 200c5e0:	0200c7ec 	andhi	r8,zero,799
 200c5e4:	0200c7ec 	andhi	r8,zero,799
 200c5e8:	0200cb4c 	andi	r8,zero,813
 200c5ec:	2404b03a 	or	r2,r4,r16
 200c5f0:	1000711e 	bne	r2,zero,200c7b8 <__muldf3+0x300>
 200c5f4:	05400204 	movi	r21,8
 200c5f8:	0021883a 	mov	r16,zero
 200c5fc:	002d883a 	mov	r22,zero
 200c600:	01400084 	movi	r5,2
 200c604:	003fcb06 	br	200c534 <__muldf3+0x7c>
 200c608:	500d883a 	mov	r6,r10
 200c60c:	00800084 	movi	r2,2
 200c610:	38805926 	beq	r7,r2,200c778 <__muldf3+0x2c0>
 200c614:	008000c4 	movi	r2,3
 200c618:	3881bb26 	beq	r7,r2,200cd08 <__muldf3+0x850>
 200c61c:	00800044 	movi	r2,1
 200c620:	3881961e 	bne	r7,r2,200cc7c <__muldf3+0x7c4>
 200c624:	3027883a 	mov	r19,r6
 200c628:	0005883a 	mov	r2,zero
 200c62c:	0021883a 	mov	r16,zero
 200c630:	002d883a 	mov	r22,zero
 200c634:	1004953a 	slli	r2,r2,20
 200c638:	98c03fcc 	andi	r3,r19,255
 200c63c:	04400434 	movhi	r17,16
 200c640:	8c7fffc4 	addi	r17,r17,-1
 200c644:	180697fa 	slli	r3,r3,31
 200c648:	8460703a 	and	r16,r16,r17
 200c64c:	80a0b03a 	or	r16,r16,r2
 200c650:	80c6b03a 	or	r3,r16,r3
 200c654:	b005883a 	mov	r2,r22
 200c658:	dfc01117 	ldw	ra,68(sp)
 200c65c:	df001017 	ldw	fp,64(sp)
 200c660:	ddc00f17 	ldw	r23,60(sp)
 200c664:	dd800e17 	ldw	r22,56(sp)
 200c668:	dd400d17 	ldw	r21,52(sp)
 200c66c:	dd000c17 	ldw	r20,48(sp)
 200c670:	dcc00b17 	ldw	r19,44(sp)
 200c674:	dc800a17 	ldw	r18,40(sp)
 200c678:	dc400917 	ldw	r17,36(sp)
 200c67c:	dc000817 	ldw	r16,32(sp)
 200c680:	dec01204 	addi	sp,sp,72
 200c684:	f800283a 	ret
 200c688:	2404b03a 	or	r2,r4,r16
 200c68c:	202b883a 	mov	r21,r4
 200c690:	10004426 	beq	r2,zero,200c7a4 <__muldf3+0x2ec>
 200c694:	80015126 	beq	r16,zero,200cbdc <__muldf3+0x724>
 200c698:	8009883a 	mov	r4,r16
 200c69c:	d9800715 	stw	r6,28(sp)
 200c6a0:	d9c00215 	stw	r7,8(sp)
 200c6a4:	da400415 	stw	r9,16(sp)
 200c6a8:	200d8240 	call	200d824 <__clzsi2>
 200c6ac:	d9800717 	ldw	r6,28(sp)
 200c6b0:	d9c00217 	ldw	r7,8(sp)
 200c6b4:	da400417 	ldw	r9,16(sp)
 200c6b8:	113ffd44 	addi	r4,r2,-11
 200c6bc:	00c00704 	movi	r3,28
 200c6c0:	19014216 	blt	r3,r4,200cbcc <__muldf3+0x714>
 200c6c4:	00c00744 	movi	r3,29
 200c6c8:	15bffe04 	addi	r22,r2,-8
 200c6cc:	1907c83a 	sub	r3,r3,r4
 200c6d0:	85a0983a 	sll	r16,r16,r22
 200c6d4:	a8c6d83a 	srl	r3,r21,r3
 200c6d8:	adac983a 	sll	r22,r21,r22
 200c6dc:	1c20b03a 	or	r16,r3,r16
 200c6e0:	1080fcc4 	addi	r2,r2,1011
 200c6e4:	00a9c83a 	sub	r20,zero,r2
 200c6e8:	002b883a 	mov	r21,zero
 200c6ec:	000b883a 	mov	r5,zero
 200c6f0:	003f9006 	br	200c534 <__muldf3+0x7c>
 200c6f4:	3446b03a 	or	r3,r6,r17
 200c6f8:	1800281e 	bne	r3,zero,200c79c <__muldf3+0x2e4>
 200c6fc:	0023883a 	mov	r17,zero
 200c700:	0025883a 	mov	r18,zero
 200c704:	01c00084 	movi	r7,2
 200c708:	003f9c06 	br	200c57c <__muldf3+0xc4>
 200c70c:	3446b03a 	or	r3,r6,r17
 200c710:	18001e26 	beq	r3,zero,200c78c <__muldf3+0x2d4>
 200c714:	88012126 	beq	r17,zero,200cb9c <__muldf3+0x6e4>
 200c718:	8809883a 	mov	r4,r17
 200c71c:	d9400215 	stw	r5,8(sp)
 200c720:	d9800715 	stw	r6,28(sp)
 200c724:	da400415 	stw	r9,16(sp)
 200c728:	da800315 	stw	r10,12(sp)
 200c72c:	200d8240 	call	200d824 <__clzsi2>
 200c730:	d9400217 	ldw	r5,8(sp)
 200c734:	d9800717 	ldw	r6,28(sp)
 200c738:	da400417 	ldw	r9,16(sp)
 200c73c:	da800317 	ldw	r10,12(sp)
 200c740:	113ffd44 	addi	r4,r2,-11
 200c744:	00c00704 	movi	r3,28
 200c748:	19011016 	blt	r3,r4,200cb8c <__muldf3+0x6d4>
 200c74c:	00c00744 	movi	r3,29
 200c750:	14bffe04 	addi	r18,r2,-8
 200c754:	1907c83a 	sub	r3,r3,r4
 200c758:	8ca2983a 	sll	r17,r17,r18
 200c75c:	30c6d83a 	srl	r3,r6,r3
 200c760:	34a4983a 	sll	r18,r6,r18
 200c764:	1c62b03a 	or	r17,r3,r17
 200c768:	1080fcc4 	addi	r2,r2,1011
 200c76c:	0085c83a 	sub	r2,zero,r2
 200c770:	000f883a 	mov	r7,zero
 200c774:	003f8106 	br	200c57c <__muldf3+0xc4>
 200c778:	3027883a 	mov	r19,r6
 200c77c:	0081ffc4 	movi	r2,2047
 200c780:	0021883a 	mov	r16,zero
 200c784:	002d883a 	mov	r22,zero
 200c788:	003faa06 	br	200c634 <__muldf3+0x17c>
 200c78c:	0023883a 	mov	r17,zero
 200c790:	0025883a 	mov	r18,zero
 200c794:	01c00044 	movi	r7,1
 200c798:	003f7806 	br	200c57c <__muldf3+0xc4>
 200c79c:	01c000c4 	movi	r7,3
 200c7a0:	003f7606 	br	200c57c <__muldf3+0xc4>
 200c7a4:	05400104 	movi	r21,4
 200c7a8:	0021883a 	mov	r16,zero
 200c7ac:	002d883a 	mov	r22,zero
 200c7b0:	01400044 	movi	r5,1
 200c7b4:	003f5f06 	br	200c534 <__muldf3+0x7c>
 200c7b8:	05400304 	movi	r21,12
 200c7bc:	014000c4 	movi	r5,3
 200c7c0:	003f5c06 	br	200c534 <__muldf3+0x7c>
 200c7c4:	04000434 	movhi	r16,16
 200c7c8:	0027883a 	mov	r19,zero
 200c7cc:	843fffc4 	addi	r16,r16,-1
 200c7d0:	05bfffc4 	movi	r22,-1
 200c7d4:	0081ffc4 	movi	r2,2047
 200c7d8:	003f9606 	br	200c634 <__muldf3+0x17c>
 200c7dc:	8023883a 	mov	r17,r16
 200c7e0:	b025883a 	mov	r18,r22
 200c7e4:	280f883a 	mov	r7,r5
 200c7e8:	003f8806 	br	200c60c <__muldf3+0x154>
 200c7ec:	8023883a 	mov	r17,r16
 200c7f0:	b025883a 	mov	r18,r22
 200c7f4:	480d883a 	mov	r6,r9
 200c7f8:	280f883a 	mov	r7,r5
 200c7fc:	003f8306 	br	200c60c <__muldf3+0x154>
 200c800:	b026d43a 	srli	r19,r22,16
 200c804:	902ed43a 	srli	r23,r18,16
 200c808:	b5bfffcc 	andi	r22,r22,65535
 200c80c:	94bfffcc 	andi	r18,r18,65535
 200c810:	b00b883a 	mov	r5,r22
 200c814:	9009883a 	mov	r4,r18
 200c818:	d8c00515 	stw	r3,20(sp)
 200c81c:	d9800715 	stw	r6,28(sp)
 200c820:	da000615 	stw	r8,24(sp)
 200c824:	200afbc0 	call	200afbc <__mulsi3>
 200c828:	980b883a 	mov	r5,r19
 200c82c:	9009883a 	mov	r4,r18
 200c830:	1029883a 	mov	r20,r2
 200c834:	200afbc0 	call	200afbc <__mulsi3>
 200c838:	b80b883a 	mov	r5,r23
 200c83c:	9809883a 	mov	r4,r19
 200c840:	102b883a 	mov	r21,r2
 200c844:	200afbc0 	call	200afbc <__mulsi3>
 200c848:	b809883a 	mov	r4,r23
 200c84c:	b00b883a 	mov	r5,r22
 200c850:	1039883a 	mov	fp,r2
 200c854:	200afbc0 	call	200afbc <__mulsi3>
 200c858:	a008d43a 	srli	r4,r20,16
 200c85c:	1545883a 	add	r2,r2,r21
 200c860:	d8c00517 	ldw	r3,20(sp)
 200c864:	2085883a 	add	r2,r4,r2
 200c868:	d9800717 	ldw	r6,28(sp)
 200c86c:	da000617 	ldw	r8,24(sp)
 200c870:	1540022e 	bgeu	r2,r21,200c87c <__muldf3+0x3c4>
 200c874:	01000074 	movhi	r4,1
 200c878:	e139883a 	add	fp,fp,r4
 200c87c:	100e943a 	slli	r7,r2,16
 200c880:	1004d43a 	srli	r2,r2,16
 200c884:	882ad43a 	srli	r21,r17,16
 200c888:	a53fffcc 	andi	r20,r20,65535
 200c88c:	8c7fffcc 	andi	r17,r17,65535
 200c890:	3d29883a 	add	r20,r7,r20
 200c894:	b00b883a 	mov	r5,r22
 200c898:	8809883a 	mov	r4,r17
 200c89c:	d8c00515 	stw	r3,20(sp)
 200c8a0:	d9800715 	stw	r6,28(sp)
 200c8a4:	da000615 	stw	r8,24(sp)
 200c8a8:	dd000115 	stw	r20,4(sp)
 200c8ac:	d8800015 	stw	r2,0(sp)
 200c8b0:	200afbc0 	call	200afbc <__mulsi3>
 200c8b4:	980b883a 	mov	r5,r19
 200c8b8:	8809883a 	mov	r4,r17
 200c8bc:	d8800215 	stw	r2,8(sp)
 200c8c0:	200afbc0 	call	200afbc <__mulsi3>
 200c8c4:	9809883a 	mov	r4,r19
 200c8c8:	a80b883a 	mov	r5,r21
 200c8cc:	1029883a 	mov	r20,r2
 200c8d0:	200afbc0 	call	200afbc <__mulsi3>
 200c8d4:	b00b883a 	mov	r5,r22
 200c8d8:	a809883a 	mov	r4,r21
 200c8dc:	d8800415 	stw	r2,16(sp)
 200c8e0:	200afbc0 	call	200afbc <__mulsi3>
 200c8e4:	d9c00217 	ldw	r7,8(sp)
 200c8e8:	1505883a 	add	r2,r2,r20
 200c8ec:	d8c00517 	ldw	r3,20(sp)
 200c8f0:	3826d43a 	srli	r19,r7,16
 200c8f4:	d9800717 	ldw	r6,28(sp)
 200c8f8:	da000617 	ldw	r8,24(sp)
 200c8fc:	9885883a 	add	r2,r19,r2
 200c900:	da400417 	ldw	r9,16(sp)
 200c904:	1500022e 	bgeu	r2,r20,200c910 <__muldf3+0x458>
 200c908:	01000074 	movhi	r4,1
 200c90c:	4913883a 	add	r9,r9,r4
 200c910:	1028d43a 	srli	r20,r2,16
 200c914:	1004943a 	slli	r2,r2,16
 200c918:	802cd43a 	srli	r22,r16,16
 200c91c:	843fffcc 	andi	r16,r16,65535
 200c920:	3cffffcc 	andi	r19,r7,65535
 200c924:	9009883a 	mov	r4,r18
 200c928:	800b883a 	mov	r5,r16
 200c92c:	a269883a 	add	r20,r20,r9
 200c930:	d8c00515 	stw	r3,20(sp)
 200c934:	d9800715 	stw	r6,28(sp)
 200c938:	da000615 	stw	r8,24(sp)
 200c93c:	14e7883a 	add	r19,r2,r19
 200c940:	200afbc0 	call	200afbc <__mulsi3>
 200c944:	9009883a 	mov	r4,r18
 200c948:	b00b883a 	mov	r5,r22
 200c94c:	d8800315 	stw	r2,12(sp)
 200c950:	200afbc0 	call	200afbc <__mulsi3>
 200c954:	b809883a 	mov	r4,r23
 200c958:	b00b883a 	mov	r5,r22
 200c95c:	d8800215 	stw	r2,8(sp)
 200c960:	200afbc0 	call	200afbc <__mulsi3>
 200c964:	b80b883a 	mov	r5,r23
 200c968:	8009883a 	mov	r4,r16
 200c96c:	d8800415 	stw	r2,16(sp)
 200c970:	200afbc0 	call	200afbc <__mulsi3>
 200c974:	da800317 	ldw	r10,12(sp)
 200c978:	d9c00217 	ldw	r7,8(sp)
 200c97c:	d9000017 	ldw	r4,0(sp)
 200c980:	502ed43a 	srli	r23,r10,16
 200c984:	11c5883a 	add	r2,r2,r7
 200c988:	24e5883a 	add	r18,r4,r19
 200c98c:	b885883a 	add	r2,r23,r2
 200c990:	d8c00517 	ldw	r3,20(sp)
 200c994:	d9800717 	ldw	r6,28(sp)
 200c998:	da000617 	ldw	r8,24(sp)
 200c99c:	da400417 	ldw	r9,16(sp)
 200c9a0:	11c0022e 	bgeu	r2,r7,200c9ac <__muldf3+0x4f4>
 200c9a4:	01000074 	movhi	r4,1
 200c9a8:	4913883a 	add	r9,r9,r4
 200c9ac:	100ed43a 	srli	r7,r2,16
 200c9b0:	1004943a 	slli	r2,r2,16
 200c9b4:	55ffffcc 	andi	r23,r10,65535
 200c9b8:	3a53883a 	add	r9,r7,r9
 200c9bc:	8809883a 	mov	r4,r17
 200c9c0:	800b883a 	mov	r5,r16
 200c9c4:	d8c00515 	stw	r3,20(sp)
 200c9c8:	d9800715 	stw	r6,28(sp)
 200c9cc:	da000615 	stw	r8,24(sp)
 200c9d0:	da400415 	stw	r9,16(sp)
 200c9d4:	15ef883a 	add	r23,r2,r23
 200c9d8:	200afbc0 	call	200afbc <__mulsi3>
 200c9dc:	8809883a 	mov	r4,r17
 200c9e0:	b00b883a 	mov	r5,r22
 200c9e4:	d8800215 	stw	r2,8(sp)
 200c9e8:	200afbc0 	call	200afbc <__mulsi3>
 200c9ec:	b00b883a 	mov	r5,r22
 200c9f0:	a809883a 	mov	r4,r21
 200c9f4:	d8800315 	stw	r2,12(sp)
 200c9f8:	200afbc0 	call	200afbc <__mulsi3>
 200c9fc:	8009883a 	mov	r4,r16
 200ca00:	a80b883a 	mov	r5,r21
 200ca04:	1023883a 	mov	r17,r2
 200ca08:	200afbc0 	call	200afbc <__mulsi3>
 200ca0c:	d9c00217 	ldw	r7,8(sp)
 200ca10:	da800317 	ldw	r10,12(sp)
 200ca14:	d8c00517 	ldw	r3,20(sp)
 200ca18:	3808d43a 	srli	r4,r7,16
 200ca1c:	1285883a 	add	r2,r2,r10
 200ca20:	d9800717 	ldw	r6,28(sp)
 200ca24:	2085883a 	add	r2,r4,r2
 200ca28:	da000617 	ldw	r8,24(sp)
 200ca2c:	da400417 	ldw	r9,16(sp)
 200ca30:	1280022e 	bgeu	r2,r10,200ca3c <__muldf3+0x584>
 200ca34:	01000074 	movhi	r4,1
 200ca38:	8923883a 	add	r17,r17,r4
 200ca3c:	1008943a 	slli	r4,r2,16
 200ca40:	39ffffcc 	andi	r7,r7,65535
 200ca44:	e4b9883a 	add	fp,fp,r18
 200ca48:	21cf883a 	add	r7,r4,r7
 200ca4c:	e4e7803a 	cmpltu	r19,fp,r19
 200ca50:	3d0f883a 	add	r7,r7,r20
 200ca54:	bf39883a 	add	fp,r23,fp
 200ca58:	99c9883a 	add	r4,r19,r7
 200ca5c:	e5ef803a 	cmpltu	r23,fp,r23
 200ca60:	490b883a 	add	r5,r9,r4
 200ca64:	1004d43a 	srli	r2,r2,16
 200ca68:	b965883a 	add	r18,r23,r5
 200ca6c:	24c9803a 	cmpltu	r4,r4,r19
 200ca70:	3d29803a 	cmpltu	r20,r7,r20
 200ca74:	a128b03a 	or	r20,r20,r4
 200ca78:	95ef803a 	cmpltu	r23,r18,r23
 200ca7c:	2a53803a 	cmpltu	r9,r5,r9
 200ca80:	a0a9883a 	add	r20,r20,r2
 200ca84:	4deeb03a 	or	r23,r9,r23
 200ca88:	a5ef883a 	add	r23,r20,r23
 200ca8c:	bc63883a 	add	r17,r23,r17
 200ca90:	e004927a 	slli	r2,fp,9
 200ca94:	d9000117 	ldw	r4,4(sp)
 200ca98:	882e927a 	slli	r23,r17,9
 200ca9c:	9022d5fa 	srli	r17,r18,23
 200caa0:	e038d5fa 	srli	fp,fp,23
 200caa4:	1104b03a 	or	r2,r2,r4
 200caa8:	9024927a 	slli	r18,r18,9
 200caac:	1004c03a 	cmpne	r2,r2,zero
 200cab0:	bc62b03a 	or	r17,r23,r17
 200cab4:	1738b03a 	or	fp,r2,fp
 200cab8:	8880402c 	andhi	r2,r17,256
 200cabc:	e4a4b03a 	or	r18,fp,r18
 200cac0:	10000726 	beq	r2,zero,200cae0 <__muldf3+0x628>
 200cac4:	9006d07a 	srli	r3,r18,1
 200cac8:	880497fa 	slli	r2,r17,31
 200cacc:	9480004c 	andi	r18,r18,1
 200cad0:	8822d07a 	srli	r17,r17,1
 200cad4:	1ca4b03a 	or	r18,r3,r18
 200cad8:	14a4b03a 	or	r18,r2,r18
 200cadc:	4007883a 	mov	r3,r8
 200cae0:	1880ffc4 	addi	r2,r3,1023
 200cae4:	0080460e 	bge	zero,r2,200cc00 <__muldf3+0x748>
 200cae8:	910001cc 	andi	r4,r18,7
 200caec:	20000726 	beq	r4,zero,200cb0c <__muldf3+0x654>
 200caf0:	910003cc 	andi	r4,r18,15
 200caf4:	01400104 	movi	r5,4
 200caf8:	21400426 	beq	r4,r5,200cb0c <__muldf3+0x654>
 200cafc:	9149883a 	add	r4,r18,r5
 200cb00:	24a5803a 	cmpltu	r18,r4,r18
 200cb04:	8ca3883a 	add	r17,r17,r18
 200cb08:	2025883a 	mov	r18,r4
 200cb0c:	8900402c 	andhi	r4,r17,256
 200cb10:	20000426 	beq	r4,zero,200cb24 <__muldf3+0x66c>
 200cb14:	18810004 	addi	r2,r3,1024
 200cb18:	00ffc034 	movhi	r3,65280
 200cb1c:	18ffffc4 	addi	r3,r3,-1
 200cb20:	88e2703a 	and	r17,r17,r3
 200cb24:	00c1ff84 	movi	r3,2046
 200cb28:	18bf1316 	blt	r3,r2,200c778 <__muldf3+0x2c0>
 200cb2c:	882c977a 	slli	r22,r17,29
 200cb30:	9024d0fa 	srli	r18,r18,3
 200cb34:	8822927a 	slli	r17,r17,9
 200cb38:	1081ffcc 	andi	r2,r2,2047
 200cb3c:	b4acb03a 	or	r22,r22,r18
 200cb40:	8820d33a 	srli	r16,r17,12
 200cb44:	3027883a 	mov	r19,r6
 200cb48:	003eba06 	br	200c634 <__muldf3+0x17c>
 200cb4c:	8080022c 	andhi	r2,r16,8
 200cb50:	10000926 	beq	r2,zero,200cb78 <__muldf3+0x6c0>
 200cb54:	8880022c 	andhi	r2,r17,8
 200cb58:	1000071e 	bne	r2,zero,200cb78 <__muldf3+0x6c0>
 200cb5c:	00800434 	movhi	r2,16
 200cb60:	8c000234 	orhi	r16,r17,8
 200cb64:	10bfffc4 	addi	r2,r2,-1
 200cb68:	e027883a 	mov	r19,fp
 200cb6c:	80a0703a 	and	r16,r16,r2
 200cb70:	902d883a 	mov	r22,r18
 200cb74:	003f1706 	br	200c7d4 <__muldf3+0x31c>
 200cb78:	00800434 	movhi	r2,16
 200cb7c:	84000234 	orhi	r16,r16,8
 200cb80:	10bfffc4 	addi	r2,r2,-1
 200cb84:	80a0703a 	and	r16,r16,r2
 200cb88:	003f1206 	br	200c7d4 <__muldf3+0x31c>
 200cb8c:	147ff604 	addi	r17,r2,-40
 200cb90:	3462983a 	sll	r17,r6,r17
 200cb94:	0025883a 	mov	r18,zero
 200cb98:	003ef306 	br	200c768 <__muldf3+0x2b0>
 200cb9c:	3009883a 	mov	r4,r6
 200cba0:	d9400215 	stw	r5,8(sp)
 200cba4:	d9800715 	stw	r6,28(sp)
 200cba8:	da400415 	stw	r9,16(sp)
 200cbac:	da800315 	stw	r10,12(sp)
 200cbb0:	200d8240 	call	200d824 <__clzsi2>
 200cbb4:	10800804 	addi	r2,r2,32
 200cbb8:	da800317 	ldw	r10,12(sp)
 200cbbc:	da400417 	ldw	r9,16(sp)
 200cbc0:	d9800717 	ldw	r6,28(sp)
 200cbc4:	d9400217 	ldw	r5,8(sp)
 200cbc8:	003edd06 	br	200c740 <__muldf3+0x288>
 200cbcc:	143ff604 	addi	r16,r2,-40
 200cbd0:	ac20983a 	sll	r16,r21,r16
 200cbd4:	002d883a 	mov	r22,zero
 200cbd8:	003ec106 	br	200c6e0 <__muldf3+0x228>
 200cbdc:	d9800715 	stw	r6,28(sp)
 200cbe0:	d9c00215 	stw	r7,8(sp)
 200cbe4:	da400415 	stw	r9,16(sp)
 200cbe8:	200d8240 	call	200d824 <__clzsi2>
 200cbec:	10800804 	addi	r2,r2,32
 200cbf0:	da400417 	ldw	r9,16(sp)
 200cbf4:	d9c00217 	ldw	r7,8(sp)
 200cbf8:	d9800717 	ldw	r6,28(sp)
 200cbfc:	003eae06 	br	200c6b8 <__muldf3+0x200>
 200cc00:	00c00044 	movi	r3,1
 200cc04:	1887c83a 	sub	r3,r3,r2
 200cc08:	01000e04 	movi	r4,56
 200cc0c:	20fe8516 	blt	r4,r3,200c624 <__muldf3+0x16c>
 200cc10:	010007c4 	movi	r4,31
 200cc14:	20c01b16 	blt	r4,r3,200cc84 <__muldf3+0x7cc>
 200cc18:	00800804 	movi	r2,32
 200cc1c:	10c5c83a 	sub	r2,r2,r3
 200cc20:	888a983a 	sll	r5,r17,r2
 200cc24:	90c8d83a 	srl	r4,r18,r3
 200cc28:	9084983a 	sll	r2,r18,r2
 200cc2c:	88e2d83a 	srl	r17,r17,r3
 200cc30:	2906b03a 	or	r3,r5,r4
 200cc34:	1004c03a 	cmpne	r2,r2,zero
 200cc38:	1886b03a 	or	r3,r3,r2
 200cc3c:	188001cc 	andi	r2,r3,7
 200cc40:	10000726 	beq	r2,zero,200cc60 <__muldf3+0x7a8>
 200cc44:	188003cc 	andi	r2,r3,15
 200cc48:	01000104 	movi	r4,4
 200cc4c:	11000426 	beq	r2,r4,200cc60 <__muldf3+0x7a8>
 200cc50:	1805883a 	mov	r2,r3
 200cc54:	10c00104 	addi	r3,r2,4
 200cc58:	1885803a 	cmpltu	r2,r3,r2
 200cc5c:	88a3883a 	add	r17,r17,r2
 200cc60:	8880202c 	andhi	r2,r17,128
 200cc64:	10001c26 	beq	r2,zero,200ccd8 <__muldf3+0x820>
 200cc68:	3027883a 	mov	r19,r6
 200cc6c:	00800044 	movi	r2,1
 200cc70:	0021883a 	mov	r16,zero
 200cc74:	002d883a 	mov	r22,zero
 200cc78:	003e6e06 	br	200c634 <__muldf3+0x17c>
 200cc7c:	4007883a 	mov	r3,r8
 200cc80:	003f9706 	br	200cae0 <__muldf3+0x628>
 200cc84:	017ff844 	movi	r5,-31
 200cc88:	2885c83a 	sub	r2,r5,r2
 200cc8c:	888ad83a 	srl	r5,r17,r2
 200cc90:	00800804 	movi	r2,32
 200cc94:	18801a26 	beq	r3,r2,200cd00 <__muldf3+0x848>
 200cc98:	01001004 	movi	r4,64
 200cc9c:	20c7c83a 	sub	r3,r4,r3
 200cca0:	88e2983a 	sll	r17,r17,r3
 200cca4:	8ca4b03a 	or	r18,r17,r18
 200cca8:	9004c03a 	cmpne	r2,r18,zero
 200ccac:	2884b03a 	or	r2,r5,r2
 200ccb0:	144001cc 	andi	r17,r2,7
 200ccb4:	88000d1e 	bne	r17,zero,200ccec <__muldf3+0x834>
 200ccb8:	0021883a 	mov	r16,zero
 200ccbc:	102cd0fa 	srli	r22,r2,3
 200ccc0:	3027883a 	mov	r19,r6
 200ccc4:	0005883a 	mov	r2,zero
 200ccc8:	b46cb03a 	or	r22,r22,r17
 200cccc:	003e5906 	br	200c634 <__muldf3+0x17c>
 200ccd0:	1007883a 	mov	r3,r2
 200ccd4:	0023883a 	mov	r17,zero
 200ccd8:	8820927a 	slli	r16,r17,9
 200ccdc:	1805883a 	mov	r2,r3
 200cce0:	8822977a 	slli	r17,r17,29
 200cce4:	8020d33a 	srli	r16,r16,12
 200cce8:	003ff406 	br	200ccbc <__muldf3+0x804>
 200ccec:	10c003cc 	andi	r3,r2,15
 200ccf0:	01000104 	movi	r4,4
 200ccf4:	193ff626 	beq	r3,r4,200ccd0 <__muldf3+0x818>
 200ccf8:	0023883a 	mov	r17,zero
 200ccfc:	003fd506 	br	200cc54 <__muldf3+0x79c>
 200cd00:	0023883a 	mov	r17,zero
 200cd04:	003fe706 	br	200cca4 <__muldf3+0x7ec>
 200cd08:	00800434 	movhi	r2,16
 200cd0c:	8c000234 	orhi	r16,r17,8
 200cd10:	10bfffc4 	addi	r2,r2,-1
 200cd14:	3027883a 	mov	r19,r6
 200cd18:	80a0703a 	and	r16,r16,r2
 200cd1c:	902d883a 	mov	r22,r18
 200cd20:	003eac06 	br	200c7d4 <__muldf3+0x31c>

0200cd24 <__subdf3>:
 200cd24:	02000434 	movhi	r8,16
 200cd28:	423fffc4 	addi	r8,r8,-1
 200cd2c:	defffb04 	addi	sp,sp,-20
 200cd30:	2a14703a 	and	r10,r5,r8
 200cd34:	3812d53a 	srli	r9,r7,20
 200cd38:	3a10703a 	and	r8,r7,r8
 200cd3c:	2006d77a 	srli	r3,r4,29
 200cd40:	3004d77a 	srli	r2,r6,29
 200cd44:	dc000015 	stw	r16,0(sp)
 200cd48:	501490fa 	slli	r10,r10,3
 200cd4c:	2820d53a 	srli	r16,r5,20
 200cd50:	401090fa 	slli	r8,r8,3
 200cd54:	dc800215 	stw	r18,8(sp)
 200cd58:	dc400115 	stw	r17,4(sp)
 200cd5c:	dfc00415 	stw	ra,16(sp)
 200cd60:	202290fa 	slli	r17,r4,3
 200cd64:	dcc00315 	stw	r19,12(sp)
 200cd68:	4a41ffcc 	andi	r9,r9,2047
 200cd6c:	0101ffc4 	movi	r4,2047
 200cd70:	2824d7fa 	srli	r18,r5,31
 200cd74:	8401ffcc 	andi	r16,r16,2047
 200cd78:	50c6b03a 	or	r3,r10,r3
 200cd7c:	380ed7fa 	srli	r7,r7,31
 200cd80:	408ab03a 	or	r5,r8,r2
 200cd84:	300c90fa 	slli	r6,r6,3
 200cd88:	49009626 	beq	r9,r4,200cfe4 <__subdf3+0x2c0>
 200cd8c:	39c0005c 	xori	r7,r7,1
 200cd90:	8245c83a 	sub	r2,r16,r9
 200cd94:	3c807426 	beq	r7,r18,200cf68 <__subdf3+0x244>
 200cd98:	0080af0e 	bge	zero,r2,200d058 <__subdf3+0x334>
 200cd9c:	48002a1e 	bne	r9,zero,200ce48 <__subdf3+0x124>
 200cda0:	2988b03a 	or	r4,r5,r6
 200cda4:	20009a1e 	bne	r4,zero,200d010 <__subdf3+0x2ec>
 200cda8:	888001cc 	andi	r2,r17,7
 200cdac:	10000726 	beq	r2,zero,200cdcc <__subdf3+0xa8>
 200cdb0:	888003cc 	andi	r2,r17,15
 200cdb4:	01000104 	movi	r4,4
 200cdb8:	11000426 	beq	r2,r4,200cdcc <__subdf3+0xa8>
 200cdbc:	890b883a 	add	r5,r17,r4
 200cdc0:	2c63803a 	cmpltu	r17,r5,r17
 200cdc4:	1c47883a 	add	r3,r3,r17
 200cdc8:	2823883a 	mov	r17,r5
 200cdcc:	1880202c 	andhi	r2,r3,128
 200cdd0:	10005926 	beq	r2,zero,200cf38 <__subdf3+0x214>
 200cdd4:	84000044 	addi	r16,r16,1
 200cdd8:	0081ffc4 	movi	r2,2047
 200cddc:	8080be26 	beq	r16,r2,200d0d8 <__subdf3+0x3b4>
 200cde0:	017fe034 	movhi	r5,65408
 200cde4:	297fffc4 	addi	r5,r5,-1
 200cde8:	1946703a 	and	r3,r3,r5
 200cdec:	1804977a 	slli	r2,r3,29
 200cdf0:	1806927a 	slli	r3,r3,9
 200cdf4:	8822d0fa 	srli	r17,r17,3
 200cdf8:	8401ffcc 	andi	r16,r16,2047
 200cdfc:	180ad33a 	srli	r5,r3,12
 200ce00:	9100004c 	andi	r4,r18,1
 200ce04:	1444b03a 	or	r2,r2,r17
 200ce08:	80c1ffcc 	andi	r3,r16,2047
 200ce0c:	1820953a 	slli	r16,r3,20
 200ce10:	20c03fcc 	andi	r3,r4,255
 200ce14:	180897fa 	slli	r4,r3,31
 200ce18:	00c00434 	movhi	r3,16
 200ce1c:	18ffffc4 	addi	r3,r3,-1
 200ce20:	28c6703a 	and	r3,r5,r3
 200ce24:	1c06b03a 	or	r3,r3,r16
 200ce28:	1906b03a 	or	r3,r3,r4
 200ce2c:	dfc00417 	ldw	ra,16(sp)
 200ce30:	dcc00317 	ldw	r19,12(sp)
 200ce34:	dc800217 	ldw	r18,8(sp)
 200ce38:	dc400117 	ldw	r17,4(sp)
 200ce3c:	dc000017 	ldw	r16,0(sp)
 200ce40:	dec00504 	addi	sp,sp,20
 200ce44:	f800283a 	ret
 200ce48:	0101ffc4 	movi	r4,2047
 200ce4c:	813fd626 	beq	r16,r4,200cda8 <__subdf3+0x84>
 200ce50:	29402034 	orhi	r5,r5,128
 200ce54:	01000e04 	movi	r4,56
 200ce58:	2080a316 	blt	r4,r2,200d0e8 <__subdf3+0x3c4>
 200ce5c:	010007c4 	movi	r4,31
 200ce60:	2080c616 	blt	r4,r2,200d17c <__subdf3+0x458>
 200ce64:	01000804 	movi	r4,32
 200ce68:	2089c83a 	sub	r4,r4,r2
 200ce6c:	2910983a 	sll	r8,r5,r4
 200ce70:	308ed83a 	srl	r7,r6,r2
 200ce74:	3108983a 	sll	r4,r6,r4
 200ce78:	2884d83a 	srl	r2,r5,r2
 200ce7c:	41ccb03a 	or	r6,r8,r7
 200ce80:	2008c03a 	cmpne	r4,r4,zero
 200ce84:	310cb03a 	or	r6,r6,r4
 200ce88:	898dc83a 	sub	r6,r17,r6
 200ce8c:	89a3803a 	cmpltu	r17,r17,r6
 200ce90:	1887c83a 	sub	r3,r3,r2
 200ce94:	1c47c83a 	sub	r3,r3,r17
 200ce98:	3023883a 	mov	r17,r6
 200ce9c:	1880202c 	andhi	r2,r3,128
 200cea0:	10002326 	beq	r2,zero,200cf30 <__subdf3+0x20c>
 200cea4:	04c02034 	movhi	r19,128
 200cea8:	9cffffc4 	addi	r19,r19,-1
 200ceac:	1ce6703a 	and	r19,r3,r19
 200ceb0:	98007a26 	beq	r19,zero,200d09c <__subdf3+0x378>
 200ceb4:	9809883a 	mov	r4,r19
 200ceb8:	200d8240 	call	200d824 <__clzsi2>
 200cebc:	113ffe04 	addi	r4,r2,-8
 200cec0:	00c007c4 	movi	r3,31
 200cec4:	19007b16 	blt	r3,r4,200d0b4 <__subdf3+0x390>
 200cec8:	00800804 	movi	r2,32
 200cecc:	1105c83a 	sub	r2,r2,r4
 200ced0:	8884d83a 	srl	r2,r17,r2
 200ced4:	9906983a 	sll	r3,r19,r4
 200ced8:	8922983a 	sll	r17,r17,r4
 200cedc:	10c4b03a 	or	r2,r2,r3
 200cee0:	24007816 	blt	r4,r16,200d0c4 <__subdf3+0x3a0>
 200cee4:	2421c83a 	sub	r16,r4,r16
 200cee8:	80c00044 	addi	r3,r16,1
 200ceec:	010007c4 	movi	r4,31
 200cef0:	20c09516 	blt	r4,r3,200d148 <__subdf3+0x424>
 200cef4:	01400804 	movi	r5,32
 200cef8:	28cbc83a 	sub	r5,r5,r3
 200cefc:	88c8d83a 	srl	r4,r17,r3
 200cf00:	8962983a 	sll	r17,r17,r5
 200cf04:	114a983a 	sll	r5,r2,r5
 200cf08:	10c6d83a 	srl	r3,r2,r3
 200cf0c:	8804c03a 	cmpne	r2,r17,zero
 200cf10:	290ab03a 	or	r5,r5,r4
 200cf14:	28a2b03a 	or	r17,r5,r2
 200cf18:	0021883a 	mov	r16,zero
 200cf1c:	003fa206 	br	200cda8 <__subdf3+0x84>
 200cf20:	2090b03a 	or	r8,r4,r2
 200cf24:	40018e26 	beq	r8,zero,200d560 <__subdf3+0x83c>
 200cf28:	1007883a 	mov	r3,r2
 200cf2c:	2023883a 	mov	r17,r4
 200cf30:	888001cc 	andi	r2,r17,7
 200cf34:	103f9e1e 	bne	r2,zero,200cdb0 <__subdf3+0x8c>
 200cf38:	1804977a 	slli	r2,r3,29
 200cf3c:	8822d0fa 	srli	r17,r17,3
 200cf40:	1810d0fa 	srli	r8,r3,3
 200cf44:	9100004c 	andi	r4,r18,1
 200cf48:	1444b03a 	or	r2,r2,r17
 200cf4c:	00c1ffc4 	movi	r3,2047
 200cf50:	80c02826 	beq	r16,r3,200cff4 <__subdf3+0x2d0>
 200cf54:	01400434 	movhi	r5,16
 200cf58:	297fffc4 	addi	r5,r5,-1
 200cf5c:	80e0703a 	and	r16,r16,r3
 200cf60:	414a703a 	and	r5,r8,r5
 200cf64:	003fa806 	br	200ce08 <__subdf3+0xe4>
 200cf68:	0080630e 	bge	zero,r2,200d0f8 <__subdf3+0x3d4>
 200cf6c:	48003026 	beq	r9,zero,200d030 <__subdf3+0x30c>
 200cf70:	0101ffc4 	movi	r4,2047
 200cf74:	813f8c26 	beq	r16,r4,200cda8 <__subdf3+0x84>
 200cf78:	29402034 	orhi	r5,r5,128
 200cf7c:	01000e04 	movi	r4,56
 200cf80:	2080a90e 	bge	r4,r2,200d228 <__subdf3+0x504>
 200cf84:	298cb03a 	or	r6,r5,r6
 200cf88:	3012c03a 	cmpne	r9,r6,zero
 200cf8c:	0005883a 	mov	r2,zero
 200cf90:	4c53883a 	add	r9,r9,r17
 200cf94:	4c63803a 	cmpltu	r17,r9,r17
 200cf98:	10c7883a 	add	r3,r2,r3
 200cf9c:	88c7883a 	add	r3,r17,r3
 200cfa0:	4823883a 	mov	r17,r9
 200cfa4:	1880202c 	andhi	r2,r3,128
 200cfa8:	1000d026 	beq	r2,zero,200d2ec <__subdf3+0x5c8>
 200cfac:	84000044 	addi	r16,r16,1
 200cfb0:	0081ffc4 	movi	r2,2047
 200cfb4:	8080fe26 	beq	r16,r2,200d3b0 <__subdf3+0x68c>
 200cfb8:	00bfe034 	movhi	r2,65408
 200cfbc:	10bfffc4 	addi	r2,r2,-1
 200cfc0:	1886703a 	and	r3,r3,r2
 200cfc4:	880ad07a 	srli	r5,r17,1
 200cfc8:	180497fa 	slli	r2,r3,31
 200cfcc:	8900004c 	andi	r4,r17,1
 200cfd0:	2922b03a 	or	r17,r5,r4
 200cfd4:	1806d07a 	srli	r3,r3,1
 200cfd8:	1462b03a 	or	r17,r2,r17
 200cfdc:	3825883a 	mov	r18,r7
 200cfe0:	003f7106 	br	200cda8 <__subdf3+0x84>
 200cfe4:	2984b03a 	or	r2,r5,r6
 200cfe8:	103f6826 	beq	r2,zero,200cd8c <__subdf3+0x68>
 200cfec:	39c03fcc 	andi	r7,r7,255
 200cff0:	003f6706 	br	200cd90 <__subdf3+0x6c>
 200cff4:	4086b03a 	or	r3,r8,r2
 200cff8:	18015226 	beq	r3,zero,200d544 <__subdf3+0x820>
 200cffc:	00c00434 	movhi	r3,16
 200d000:	41400234 	orhi	r5,r8,8
 200d004:	18ffffc4 	addi	r3,r3,-1
 200d008:	28ca703a 	and	r5,r5,r3
 200d00c:	003f7e06 	br	200ce08 <__subdf3+0xe4>
 200d010:	10bfffc4 	addi	r2,r2,-1
 200d014:	1000491e 	bne	r2,zero,200d13c <__subdf3+0x418>
 200d018:	898fc83a 	sub	r7,r17,r6
 200d01c:	89e3803a 	cmpltu	r17,r17,r7
 200d020:	1947c83a 	sub	r3,r3,r5
 200d024:	1c47c83a 	sub	r3,r3,r17
 200d028:	3823883a 	mov	r17,r7
 200d02c:	003f9b06 	br	200ce9c <__subdf3+0x178>
 200d030:	2988b03a 	or	r4,r5,r6
 200d034:	203f5c26 	beq	r4,zero,200cda8 <__subdf3+0x84>
 200d038:	10bfffc4 	addi	r2,r2,-1
 200d03c:	1000931e 	bne	r2,zero,200d28c <__subdf3+0x568>
 200d040:	898d883a 	add	r6,r17,r6
 200d044:	3463803a 	cmpltu	r17,r6,r17
 200d048:	1947883a 	add	r3,r3,r5
 200d04c:	88c7883a 	add	r3,r17,r3
 200d050:	3023883a 	mov	r17,r6
 200d054:	003fd306 	br	200cfa4 <__subdf3+0x280>
 200d058:	1000541e 	bne	r2,zero,200d1ac <__subdf3+0x488>
 200d05c:	80800044 	addi	r2,r16,1
 200d060:	1081ffcc 	andi	r2,r2,2047
 200d064:	01000044 	movi	r4,1
 200d068:	2080a20e 	bge	r4,r2,200d2f4 <__subdf3+0x5d0>
 200d06c:	8989c83a 	sub	r4,r17,r6
 200d070:	8905803a 	cmpltu	r2,r17,r4
 200d074:	1967c83a 	sub	r19,r3,r5
 200d078:	98a7c83a 	sub	r19,r19,r2
 200d07c:	9880202c 	andhi	r2,r19,128
 200d080:	10006326 	beq	r2,zero,200d210 <__subdf3+0x4ec>
 200d084:	3463c83a 	sub	r17,r6,r17
 200d088:	28c7c83a 	sub	r3,r5,r3
 200d08c:	344d803a 	cmpltu	r6,r6,r17
 200d090:	19a7c83a 	sub	r19,r3,r6
 200d094:	3825883a 	mov	r18,r7
 200d098:	983f861e 	bne	r19,zero,200ceb4 <__subdf3+0x190>
 200d09c:	8809883a 	mov	r4,r17
 200d0a0:	200d8240 	call	200d824 <__clzsi2>
 200d0a4:	10800804 	addi	r2,r2,32
 200d0a8:	113ffe04 	addi	r4,r2,-8
 200d0ac:	00c007c4 	movi	r3,31
 200d0b0:	193f850e 	bge	r3,r4,200cec8 <__subdf3+0x1a4>
 200d0b4:	10bff604 	addi	r2,r2,-40
 200d0b8:	8884983a 	sll	r2,r17,r2
 200d0bc:	0023883a 	mov	r17,zero
 200d0c0:	243f880e 	bge	r4,r16,200cee4 <__subdf3+0x1c0>
 200d0c4:	00ffe034 	movhi	r3,65408
 200d0c8:	18ffffc4 	addi	r3,r3,-1
 200d0cc:	8121c83a 	sub	r16,r16,r4
 200d0d0:	10c6703a 	and	r3,r2,r3
 200d0d4:	003f3406 	br	200cda8 <__subdf3+0x84>
 200d0d8:	9100004c 	andi	r4,r18,1
 200d0dc:	000b883a 	mov	r5,zero
 200d0e0:	0005883a 	mov	r2,zero
 200d0e4:	003f4806 	br	200ce08 <__subdf3+0xe4>
 200d0e8:	298cb03a 	or	r6,r5,r6
 200d0ec:	300cc03a 	cmpne	r6,r6,zero
 200d0f0:	0005883a 	mov	r2,zero
 200d0f4:	003f6406 	br	200ce88 <__subdf3+0x164>
 200d0f8:	10009a1e 	bne	r2,zero,200d364 <__subdf3+0x640>
 200d0fc:	82400044 	addi	r9,r16,1
 200d100:	4881ffcc 	andi	r2,r9,2047
 200d104:	02800044 	movi	r10,1
 200d108:	5080670e 	bge	r10,r2,200d2a8 <__subdf3+0x584>
 200d10c:	0081ffc4 	movi	r2,2047
 200d110:	4880af26 	beq	r9,r2,200d3d0 <__subdf3+0x6ac>
 200d114:	898d883a 	add	r6,r17,r6
 200d118:	1945883a 	add	r2,r3,r5
 200d11c:	3447803a 	cmpltu	r3,r6,r17
 200d120:	1887883a 	add	r3,r3,r2
 200d124:	182297fa 	slli	r17,r3,31
 200d128:	300cd07a 	srli	r6,r6,1
 200d12c:	1806d07a 	srli	r3,r3,1
 200d130:	4821883a 	mov	r16,r9
 200d134:	89a2b03a 	or	r17,r17,r6
 200d138:	003f1b06 	br	200cda8 <__subdf3+0x84>
 200d13c:	0101ffc4 	movi	r4,2047
 200d140:	813f441e 	bne	r16,r4,200ce54 <__subdf3+0x130>
 200d144:	003f1806 	br	200cda8 <__subdf3+0x84>
 200d148:	843ff844 	addi	r16,r16,-31
 200d14c:	01400804 	movi	r5,32
 200d150:	1408d83a 	srl	r4,r2,r16
 200d154:	19405026 	beq	r3,r5,200d298 <__subdf3+0x574>
 200d158:	01401004 	movi	r5,64
 200d15c:	28c7c83a 	sub	r3,r5,r3
 200d160:	10c4983a 	sll	r2,r2,r3
 200d164:	88a2b03a 	or	r17,r17,r2
 200d168:	8822c03a 	cmpne	r17,r17,zero
 200d16c:	2462b03a 	or	r17,r4,r17
 200d170:	0007883a 	mov	r3,zero
 200d174:	0021883a 	mov	r16,zero
 200d178:	003f6d06 	br	200cf30 <__subdf3+0x20c>
 200d17c:	11fff804 	addi	r7,r2,-32
 200d180:	01000804 	movi	r4,32
 200d184:	29ced83a 	srl	r7,r5,r7
 200d188:	11004526 	beq	r2,r4,200d2a0 <__subdf3+0x57c>
 200d18c:	01001004 	movi	r4,64
 200d190:	2089c83a 	sub	r4,r4,r2
 200d194:	2904983a 	sll	r2,r5,r4
 200d198:	118cb03a 	or	r6,r2,r6
 200d19c:	300cc03a 	cmpne	r6,r6,zero
 200d1a0:	398cb03a 	or	r6,r7,r6
 200d1a4:	0005883a 	mov	r2,zero
 200d1a8:	003f3706 	br	200ce88 <__subdf3+0x164>
 200d1ac:	80002a26 	beq	r16,zero,200d258 <__subdf3+0x534>
 200d1b0:	0101ffc4 	movi	r4,2047
 200d1b4:	49006626 	beq	r9,r4,200d350 <__subdf3+0x62c>
 200d1b8:	0085c83a 	sub	r2,zero,r2
 200d1bc:	18c02034 	orhi	r3,r3,128
 200d1c0:	01000e04 	movi	r4,56
 200d1c4:	20807e16 	blt	r4,r2,200d3c0 <__subdf3+0x69c>
 200d1c8:	010007c4 	movi	r4,31
 200d1cc:	2080e716 	blt	r4,r2,200d56c <__subdf3+0x848>
 200d1d0:	01000804 	movi	r4,32
 200d1d4:	2089c83a 	sub	r4,r4,r2
 200d1d8:	1914983a 	sll	r10,r3,r4
 200d1dc:	8890d83a 	srl	r8,r17,r2
 200d1e0:	8908983a 	sll	r4,r17,r4
 200d1e4:	1884d83a 	srl	r2,r3,r2
 200d1e8:	5222b03a 	or	r17,r10,r8
 200d1ec:	2006c03a 	cmpne	r3,r4,zero
 200d1f0:	88e2b03a 	or	r17,r17,r3
 200d1f4:	3463c83a 	sub	r17,r6,r17
 200d1f8:	2885c83a 	sub	r2,r5,r2
 200d1fc:	344d803a 	cmpltu	r6,r6,r17
 200d200:	1187c83a 	sub	r3,r2,r6
 200d204:	4821883a 	mov	r16,r9
 200d208:	3825883a 	mov	r18,r7
 200d20c:	003f2306 	br	200ce9c <__subdf3+0x178>
 200d210:	24d0b03a 	or	r8,r4,r19
 200d214:	40001b1e 	bne	r8,zero,200d284 <__subdf3+0x560>
 200d218:	0005883a 	mov	r2,zero
 200d21c:	0009883a 	mov	r4,zero
 200d220:	0021883a 	mov	r16,zero
 200d224:	003f4906 	br	200cf4c <__subdf3+0x228>
 200d228:	010007c4 	movi	r4,31
 200d22c:	20803a16 	blt	r4,r2,200d318 <__subdf3+0x5f4>
 200d230:	01000804 	movi	r4,32
 200d234:	2089c83a 	sub	r4,r4,r2
 200d238:	2912983a 	sll	r9,r5,r4
 200d23c:	3090d83a 	srl	r8,r6,r2
 200d240:	3108983a 	sll	r4,r6,r4
 200d244:	2884d83a 	srl	r2,r5,r2
 200d248:	4a12b03a 	or	r9,r9,r8
 200d24c:	2008c03a 	cmpne	r4,r4,zero
 200d250:	4912b03a 	or	r9,r9,r4
 200d254:	003f4e06 	br	200cf90 <__subdf3+0x26c>
 200d258:	1c48b03a 	or	r4,r3,r17
 200d25c:	20003c26 	beq	r4,zero,200d350 <__subdf3+0x62c>
 200d260:	0084303a 	nor	r2,zero,r2
 200d264:	1000381e 	bne	r2,zero,200d348 <__subdf3+0x624>
 200d268:	3463c83a 	sub	r17,r6,r17
 200d26c:	28c5c83a 	sub	r2,r5,r3
 200d270:	344d803a 	cmpltu	r6,r6,r17
 200d274:	1187c83a 	sub	r3,r2,r6
 200d278:	4821883a 	mov	r16,r9
 200d27c:	3825883a 	mov	r18,r7
 200d280:	003f0606 	br	200ce9c <__subdf3+0x178>
 200d284:	2023883a 	mov	r17,r4
 200d288:	003f0906 	br	200ceb0 <__subdf3+0x18c>
 200d28c:	0101ffc4 	movi	r4,2047
 200d290:	813f3a1e 	bne	r16,r4,200cf7c <__subdf3+0x258>
 200d294:	003ec406 	br	200cda8 <__subdf3+0x84>
 200d298:	0005883a 	mov	r2,zero
 200d29c:	003fb106 	br	200d164 <__subdf3+0x440>
 200d2a0:	0005883a 	mov	r2,zero
 200d2a4:	003fbc06 	br	200d198 <__subdf3+0x474>
 200d2a8:	1c44b03a 	or	r2,r3,r17
 200d2ac:	80008e1e 	bne	r16,zero,200d4e8 <__subdf3+0x7c4>
 200d2b0:	1000c826 	beq	r2,zero,200d5d4 <__subdf3+0x8b0>
 200d2b4:	2984b03a 	or	r2,r5,r6
 200d2b8:	103ebb26 	beq	r2,zero,200cda8 <__subdf3+0x84>
 200d2bc:	8989883a 	add	r4,r17,r6
 200d2c0:	1945883a 	add	r2,r3,r5
 200d2c4:	2447803a 	cmpltu	r3,r4,r17
 200d2c8:	1887883a 	add	r3,r3,r2
 200d2cc:	1880202c 	andhi	r2,r3,128
 200d2d0:	2023883a 	mov	r17,r4
 200d2d4:	103f1626 	beq	r2,zero,200cf30 <__subdf3+0x20c>
 200d2d8:	00bfe034 	movhi	r2,65408
 200d2dc:	10bfffc4 	addi	r2,r2,-1
 200d2e0:	5021883a 	mov	r16,r10
 200d2e4:	1886703a 	and	r3,r3,r2
 200d2e8:	003eaf06 	br	200cda8 <__subdf3+0x84>
 200d2ec:	3825883a 	mov	r18,r7
 200d2f0:	003f0f06 	br	200cf30 <__subdf3+0x20c>
 200d2f4:	1c44b03a 	or	r2,r3,r17
 200d2f8:	8000251e 	bne	r16,zero,200d390 <__subdf3+0x66c>
 200d2fc:	1000661e 	bne	r2,zero,200d498 <__subdf3+0x774>
 200d300:	2990b03a 	or	r8,r5,r6
 200d304:	40009626 	beq	r8,zero,200d560 <__subdf3+0x83c>
 200d308:	2807883a 	mov	r3,r5
 200d30c:	3023883a 	mov	r17,r6
 200d310:	3825883a 	mov	r18,r7
 200d314:	003ea406 	br	200cda8 <__subdf3+0x84>
 200d318:	127ff804 	addi	r9,r2,-32
 200d31c:	01000804 	movi	r4,32
 200d320:	2a52d83a 	srl	r9,r5,r9
 200d324:	11008c26 	beq	r2,r4,200d558 <__subdf3+0x834>
 200d328:	01001004 	movi	r4,64
 200d32c:	2085c83a 	sub	r2,r4,r2
 200d330:	2884983a 	sll	r2,r5,r2
 200d334:	118cb03a 	or	r6,r2,r6
 200d338:	300cc03a 	cmpne	r6,r6,zero
 200d33c:	4992b03a 	or	r9,r9,r6
 200d340:	0005883a 	mov	r2,zero
 200d344:	003f1206 	br	200cf90 <__subdf3+0x26c>
 200d348:	0101ffc4 	movi	r4,2047
 200d34c:	493f9c1e 	bne	r9,r4,200d1c0 <__subdf3+0x49c>
 200d350:	2807883a 	mov	r3,r5
 200d354:	3023883a 	mov	r17,r6
 200d358:	4821883a 	mov	r16,r9
 200d35c:	3825883a 	mov	r18,r7
 200d360:	003e9106 	br	200cda8 <__subdf3+0x84>
 200d364:	80001f1e 	bne	r16,zero,200d3e4 <__subdf3+0x6c0>
 200d368:	1c48b03a 	or	r4,r3,r17
 200d36c:	20005a26 	beq	r4,zero,200d4d8 <__subdf3+0x7b4>
 200d370:	0084303a 	nor	r2,zero,r2
 200d374:	1000561e 	bne	r2,zero,200d4d0 <__subdf3+0x7ac>
 200d378:	89a3883a 	add	r17,r17,r6
 200d37c:	1945883a 	add	r2,r3,r5
 200d380:	898d803a 	cmpltu	r6,r17,r6
 200d384:	3087883a 	add	r3,r6,r2
 200d388:	4821883a 	mov	r16,r9
 200d38c:	003f0506 	br	200cfa4 <__subdf3+0x280>
 200d390:	10002b1e 	bne	r2,zero,200d440 <__subdf3+0x71c>
 200d394:	2984b03a 	or	r2,r5,r6
 200d398:	10008026 	beq	r2,zero,200d59c <__subdf3+0x878>
 200d39c:	2807883a 	mov	r3,r5
 200d3a0:	3023883a 	mov	r17,r6
 200d3a4:	3825883a 	mov	r18,r7
 200d3a8:	0401ffc4 	movi	r16,2047
 200d3ac:	003e7e06 	br	200cda8 <__subdf3+0x84>
 200d3b0:	3809883a 	mov	r4,r7
 200d3b4:	0011883a 	mov	r8,zero
 200d3b8:	0005883a 	mov	r2,zero
 200d3bc:	003ee306 	br	200cf4c <__subdf3+0x228>
 200d3c0:	1c62b03a 	or	r17,r3,r17
 200d3c4:	8822c03a 	cmpne	r17,r17,zero
 200d3c8:	0005883a 	mov	r2,zero
 200d3cc:	003f8906 	br	200d1f4 <__subdf3+0x4d0>
 200d3d0:	3809883a 	mov	r4,r7
 200d3d4:	4821883a 	mov	r16,r9
 200d3d8:	0011883a 	mov	r8,zero
 200d3dc:	0005883a 	mov	r2,zero
 200d3e0:	003eda06 	br	200cf4c <__subdf3+0x228>
 200d3e4:	0101ffc4 	movi	r4,2047
 200d3e8:	49003b26 	beq	r9,r4,200d4d8 <__subdf3+0x7b4>
 200d3ec:	0085c83a 	sub	r2,zero,r2
 200d3f0:	18c02034 	orhi	r3,r3,128
 200d3f4:	01000e04 	movi	r4,56
 200d3f8:	20806e16 	blt	r4,r2,200d5b4 <__subdf3+0x890>
 200d3fc:	010007c4 	movi	r4,31
 200d400:	20807716 	blt	r4,r2,200d5e0 <__subdf3+0x8bc>
 200d404:	01000804 	movi	r4,32
 200d408:	2089c83a 	sub	r4,r4,r2
 200d40c:	1914983a 	sll	r10,r3,r4
 200d410:	8890d83a 	srl	r8,r17,r2
 200d414:	8908983a 	sll	r4,r17,r4
 200d418:	1884d83a 	srl	r2,r3,r2
 200d41c:	5222b03a 	or	r17,r10,r8
 200d420:	2006c03a 	cmpne	r3,r4,zero
 200d424:	88e2b03a 	or	r17,r17,r3
 200d428:	89a3883a 	add	r17,r17,r6
 200d42c:	1145883a 	add	r2,r2,r5
 200d430:	898d803a 	cmpltu	r6,r17,r6
 200d434:	3087883a 	add	r3,r6,r2
 200d438:	4821883a 	mov	r16,r9
 200d43c:	003ed906 	br	200cfa4 <__subdf3+0x280>
 200d440:	2984b03a 	or	r2,r5,r6
 200d444:	10004226 	beq	r2,zero,200d550 <__subdf3+0x82c>
 200d448:	1808d0fa 	srli	r4,r3,3
 200d44c:	8822d0fa 	srli	r17,r17,3
 200d450:	1806977a 	slli	r3,r3,29
 200d454:	2080022c 	andhi	r2,r4,8
 200d458:	1c62b03a 	or	r17,r3,r17
 200d45c:	10000826 	beq	r2,zero,200d480 <__subdf3+0x75c>
 200d460:	2812d0fa 	srli	r9,r5,3
 200d464:	4880022c 	andhi	r2,r9,8
 200d468:	1000051e 	bne	r2,zero,200d480 <__subdf3+0x75c>
 200d46c:	300cd0fa 	srli	r6,r6,3
 200d470:	2804977a 	slli	r2,r5,29
 200d474:	4809883a 	mov	r4,r9
 200d478:	3825883a 	mov	r18,r7
 200d47c:	11a2b03a 	or	r17,r2,r6
 200d480:	8806d77a 	srli	r3,r17,29
 200d484:	200890fa 	slli	r4,r4,3
 200d488:	882290fa 	slli	r17,r17,3
 200d48c:	0401ffc4 	movi	r16,2047
 200d490:	1906b03a 	or	r3,r3,r4
 200d494:	003e4406 	br	200cda8 <__subdf3+0x84>
 200d498:	2984b03a 	or	r2,r5,r6
 200d49c:	103e4226 	beq	r2,zero,200cda8 <__subdf3+0x84>
 200d4a0:	8989c83a 	sub	r4,r17,r6
 200d4a4:	8911803a 	cmpltu	r8,r17,r4
 200d4a8:	1945c83a 	sub	r2,r3,r5
 200d4ac:	1205c83a 	sub	r2,r2,r8
 200d4b0:	1200202c 	andhi	r8,r2,128
 200d4b4:	403e9a26 	beq	r8,zero,200cf20 <__subdf3+0x1fc>
 200d4b8:	3463c83a 	sub	r17,r6,r17
 200d4bc:	28c5c83a 	sub	r2,r5,r3
 200d4c0:	344d803a 	cmpltu	r6,r6,r17
 200d4c4:	1187c83a 	sub	r3,r2,r6
 200d4c8:	3825883a 	mov	r18,r7
 200d4cc:	003e3606 	br	200cda8 <__subdf3+0x84>
 200d4d0:	0101ffc4 	movi	r4,2047
 200d4d4:	493fc71e 	bne	r9,r4,200d3f4 <__subdf3+0x6d0>
 200d4d8:	2807883a 	mov	r3,r5
 200d4dc:	3023883a 	mov	r17,r6
 200d4e0:	4821883a 	mov	r16,r9
 200d4e4:	003e3006 	br	200cda8 <__subdf3+0x84>
 200d4e8:	10003626 	beq	r2,zero,200d5c4 <__subdf3+0x8a0>
 200d4ec:	2984b03a 	or	r2,r5,r6
 200d4f0:	10001726 	beq	r2,zero,200d550 <__subdf3+0x82c>
 200d4f4:	1808d0fa 	srli	r4,r3,3
 200d4f8:	8822d0fa 	srli	r17,r17,3
 200d4fc:	1806977a 	slli	r3,r3,29
 200d500:	2080022c 	andhi	r2,r4,8
 200d504:	1c62b03a 	or	r17,r3,r17
 200d508:	10000726 	beq	r2,zero,200d528 <__subdf3+0x804>
 200d50c:	2812d0fa 	srli	r9,r5,3
 200d510:	4880022c 	andhi	r2,r9,8
 200d514:	1000041e 	bne	r2,zero,200d528 <__subdf3+0x804>
 200d518:	300cd0fa 	srli	r6,r6,3
 200d51c:	2804977a 	slli	r2,r5,29
 200d520:	4809883a 	mov	r4,r9
 200d524:	11a2b03a 	or	r17,r2,r6
 200d528:	8806d77a 	srli	r3,r17,29
 200d52c:	200890fa 	slli	r4,r4,3
 200d530:	882290fa 	slli	r17,r17,3
 200d534:	3825883a 	mov	r18,r7
 200d538:	1906b03a 	or	r3,r3,r4
 200d53c:	0401ffc4 	movi	r16,2047
 200d540:	003e1906 	br	200cda8 <__subdf3+0x84>
 200d544:	000b883a 	mov	r5,zero
 200d548:	0005883a 	mov	r2,zero
 200d54c:	003e2e06 	br	200ce08 <__subdf3+0xe4>
 200d550:	0401ffc4 	movi	r16,2047
 200d554:	003e1406 	br	200cda8 <__subdf3+0x84>
 200d558:	0005883a 	mov	r2,zero
 200d55c:	003f7506 	br	200d334 <__subdf3+0x610>
 200d560:	0005883a 	mov	r2,zero
 200d564:	0009883a 	mov	r4,zero
 200d568:	003e7806 	br	200cf4c <__subdf3+0x228>
 200d56c:	123ff804 	addi	r8,r2,-32
 200d570:	01000804 	movi	r4,32
 200d574:	1a10d83a 	srl	r8,r3,r8
 200d578:	11002526 	beq	r2,r4,200d610 <__subdf3+0x8ec>
 200d57c:	01001004 	movi	r4,64
 200d580:	2085c83a 	sub	r2,r4,r2
 200d584:	1884983a 	sll	r2,r3,r2
 200d588:	1444b03a 	or	r2,r2,r17
 200d58c:	1004c03a 	cmpne	r2,r2,zero
 200d590:	40a2b03a 	or	r17,r8,r2
 200d594:	0005883a 	mov	r2,zero
 200d598:	003f1606 	br	200d1f4 <__subdf3+0x4d0>
 200d59c:	02000434 	movhi	r8,16
 200d5a0:	0009883a 	mov	r4,zero
 200d5a4:	423fffc4 	addi	r8,r8,-1
 200d5a8:	00bfffc4 	movi	r2,-1
 200d5ac:	0401ffc4 	movi	r16,2047
 200d5b0:	003e6606 	br	200cf4c <__subdf3+0x228>
 200d5b4:	1c62b03a 	or	r17,r3,r17
 200d5b8:	8822c03a 	cmpne	r17,r17,zero
 200d5bc:	0005883a 	mov	r2,zero
 200d5c0:	003f9906 	br	200d428 <__subdf3+0x704>
 200d5c4:	2807883a 	mov	r3,r5
 200d5c8:	3023883a 	mov	r17,r6
 200d5cc:	0401ffc4 	movi	r16,2047
 200d5d0:	003df506 	br	200cda8 <__subdf3+0x84>
 200d5d4:	2807883a 	mov	r3,r5
 200d5d8:	3023883a 	mov	r17,r6
 200d5dc:	003df206 	br	200cda8 <__subdf3+0x84>
 200d5e0:	123ff804 	addi	r8,r2,-32
 200d5e4:	01000804 	movi	r4,32
 200d5e8:	1a10d83a 	srl	r8,r3,r8
 200d5ec:	11000a26 	beq	r2,r4,200d618 <__subdf3+0x8f4>
 200d5f0:	01001004 	movi	r4,64
 200d5f4:	2085c83a 	sub	r2,r4,r2
 200d5f8:	1884983a 	sll	r2,r3,r2
 200d5fc:	1444b03a 	or	r2,r2,r17
 200d600:	1004c03a 	cmpne	r2,r2,zero
 200d604:	40a2b03a 	or	r17,r8,r2
 200d608:	0005883a 	mov	r2,zero
 200d60c:	003f8606 	br	200d428 <__subdf3+0x704>
 200d610:	0005883a 	mov	r2,zero
 200d614:	003fdc06 	br	200d588 <__subdf3+0x864>
 200d618:	0005883a 	mov	r2,zero
 200d61c:	003ff706 	br	200d5fc <__subdf3+0x8d8>

0200d620 <__fixdfsi>:
 200d620:	280cd53a 	srli	r6,r5,20
 200d624:	00c00434 	movhi	r3,16
 200d628:	18ffffc4 	addi	r3,r3,-1
 200d62c:	3181ffcc 	andi	r6,r6,2047
 200d630:	01c0ff84 	movi	r7,1022
 200d634:	28c6703a 	and	r3,r5,r3
 200d638:	280ad7fa 	srli	r5,r5,31
 200d63c:	3980120e 	bge	r7,r6,200d688 <__fixdfsi+0x68>
 200d640:	00810744 	movi	r2,1053
 200d644:	11800c16 	blt	r2,r6,200d678 <__fixdfsi+0x58>
 200d648:	00810cc4 	movi	r2,1075
 200d64c:	1185c83a 	sub	r2,r2,r6
 200d650:	01c007c4 	movi	r7,31
 200d654:	18c00434 	orhi	r3,r3,16
 200d658:	38800d16 	blt	r7,r2,200d690 <__fixdfsi+0x70>
 200d65c:	31befb44 	addi	r6,r6,-1043
 200d660:	2084d83a 	srl	r2,r4,r2
 200d664:	1986983a 	sll	r3,r3,r6
 200d668:	1884b03a 	or	r2,r3,r2
 200d66c:	28000726 	beq	r5,zero,200d68c <__fixdfsi+0x6c>
 200d670:	0085c83a 	sub	r2,zero,r2
 200d674:	f800283a 	ret
 200d678:	00a00034 	movhi	r2,32768
 200d67c:	10bfffc4 	addi	r2,r2,-1
 200d680:	2885883a 	add	r2,r5,r2
 200d684:	f800283a 	ret
 200d688:	0005883a 	mov	r2,zero
 200d68c:	f800283a 	ret
 200d690:	008104c4 	movi	r2,1043
 200d694:	1185c83a 	sub	r2,r2,r6
 200d698:	1884d83a 	srl	r2,r3,r2
 200d69c:	003ff306 	br	200d66c <__fixdfsi+0x4c>

0200d6a0 <__floatsidf>:
 200d6a0:	defffd04 	addi	sp,sp,-12
 200d6a4:	dfc00215 	stw	ra,8(sp)
 200d6a8:	dc400115 	stw	r17,4(sp)
 200d6ac:	dc000015 	stw	r16,0(sp)
 200d6b0:	20002b26 	beq	r4,zero,200d760 <__floatsidf+0xc0>
 200d6b4:	2023883a 	mov	r17,r4
 200d6b8:	2020d7fa 	srli	r16,r4,31
 200d6bc:	20002d16 	blt	r4,zero,200d774 <__floatsidf+0xd4>
 200d6c0:	8809883a 	mov	r4,r17
 200d6c4:	200d8240 	call	200d824 <__clzsi2>
 200d6c8:	01410784 	movi	r5,1054
 200d6cc:	288bc83a 	sub	r5,r5,r2
 200d6d0:	01010cc4 	movi	r4,1075
 200d6d4:	2149c83a 	sub	r4,r4,r5
 200d6d8:	00c007c4 	movi	r3,31
 200d6dc:	1900160e 	bge	r3,r4,200d738 <__floatsidf+0x98>
 200d6e0:	00c104c4 	movi	r3,1043
 200d6e4:	1947c83a 	sub	r3,r3,r5
 200d6e8:	88c6983a 	sll	r3,r17,r3
 200d6ec:	00800434 	movhi	r2,16
 200d6f0:	10bfffc4 	addi	r2,r2,-1
 200d6f4:	1886703a 	and	r3,r3,r2
 200d6f8:	2941ffcc 	andi	r5,r5,2047
 200d6fc:	800d883a 	mov	r6,r16
 200d700:	0005883a 	mov	r2,zero
 200d704:	280a953a 	slli	r5,r5,20
 200d708:	31803fcc 	andi	r6,r6,255
 200d70c:	01000434 	movhi	r4,16
 200d710:	300c97fa 	slli	r6,r6,31
 200d714:	213fffc4 	addi	r4,r4,-1
 200d718:	1906703a 	and	r3,r3,r4
 200d71c:	1946b03a 	or	r3,r3,r5
 200d720:	1986b03a 	or	r3,r3,r6
 200d724:	dfc00217 	ldw	ra,8(sp)
 200d728:	dc400117 	ldw	r17,4(sp)
 200d72c:	dc000017 	ldw	r16,0(sp)
 200d730:	dec00304 	addi	sp,sp,12
 200d734:	f800283a 	ret
 200d738:	00c002c4 	movi	r3,11
 200d73c:	1887c83a 	sub	r3,r3,r2
 200d740:	88c6d83a 	srl	r3,r17,r3
 200d744:	8904983a 	sll	r2,r17,r4
 200d748:	01000434 	movhi	r4,16
 200d74c:	213fffc4 	addi	r4,r4,-1
 200d750:	2941ffcc 	andi	r5,r5,2047
 200d754:	1906703a 	and	r3,r3,r4
 200d758:	800d883a 	mov	r6,r16
 200d75c:	003fe906 	br	200d704 <__floatsidf+0x64>
 200d760:	000d883a 	mov	r6,zero
 200d764:	000b883a 	mov	r5,zero
 200d768:	0007883a 	mov	r3,zero
 200d76c:	0005883a 	mov	r2,zero
 200d770:	003fe406 	br	200d704 <__floatsidf+0x64>
 200d774:	0123c83a 	sub	r17,zero,r4
 200d778:	003fd106 	br	200d6c0 <__floatsidf+0x20>

0200d77c <__floatunsidf>:
 200d77c:	defffe04 	addi	sp,sp,-8
 200d780:	dc000015 	stw	r16,0(sp)
 200d784:	dfc00115 	stw	ra,4(sp)
 200d788:	2021883a 	mov	r16,r4
 200d78c:	20002226 	beq	r4,zero,200d818 <__floatunsidf+0x9c>
 200d790:	200d8240 	call	200d824 <__clzsi2>
 200d794:	01010784 	movi	r4,1054
 200d798:	2089c83a 	sub	r4,r4,r2
 200d79c:	01810cc4 	movi	r6,1075
 200d7a0:	310dc83a 	sub	r6,r6,r4
 200d7a4:	00c007c4 	movi	r3,31
 200d7a8:	1980120e 	bge	r3,r6,200d7f4 <__floatunsidf+0x78>
 200d7ac:	00c104c4 	movi	r3,1043
 200d7b0:	1907c83a 	sub	r3,r3,r4
 200d7b4:	80ca983a 	sll	r5,r16,r3
 200d7b8:	00800434 	movhi	r2,16
 200d7bc:	10bfffc4 	addi	r2,r2,-1
 200d7c0:	2101ffcc 	andi	r4,r4,2047
 200d7c4:	0021883a 	mov	r16,zero
 200d7c8:	288a703a 	and	r5,r5,r2
 200d7cc:	2008953a 	slli	r4,r4,20
 200d7d0:	00c00434 	movhi	r3,16
 200d7d4:	18ffffc4 	addi	r3,r3,-1
 200d7d8:	28c6703a 	and	r3,r5,r3
 200d7dc:	8005883a 	mov	r2,r16
 200d7e0:	1906b03a 	or	r3,r3,r4
 200d7e4:	dfc00117 	ldw	ra,4(sp)
 200d7e8:	dc000017 	ldw	r16,0(sp)
 200d7ec:	dec00204 	addi	sp,sp,8
 200d7f0:	f800283a 	ret
 200d7f4:	00c002c4 	movi	r3,11
 200d7f8:	188bc83a 	sub	r5,r3,r2
 200d7fc:	814ad83a 	srl	r5,r16,r5
 200d800:	00c00434 	movhi	r3,16
 200d804:	18ffffc4 	addi	r3,r3,-1
 200d808:	81a0983a 	sll	r16,r16,r6
 200d80c:	2101ffcc 	andi	r4,r4,2047
 200d810:	28ca703a 	and	r5,r5,r3
 200d814:	003fed06 	br	200d7cc <__floatunsidf+0x50>
 200d818:	0009883a 	mov	r4,zero
 200d81c:	000b883a 	mov	r5,zero
 200d820:	003fea06 	br	200d7cc <__floatunsidf+0x50>

0200d824 <__clzsi2>:
 200d824:	00bfffd4 	movui	r2,65535
 200d828:	11000536 	bltu	r2,r4,200d840 <__clzsi2+0x1c>
 200d82c:	00803fc4 	movi	r2,255
 200d830:	11000f36 	bltu	r2,r4,200d870 <__clzsi2+0x4c>
 200d834:	00800804 	movi	r2,32
 200d838:	0007883a 	mov	r3,zero
 200d83c:	00000506 	br	200d854 <__clzsi2+0x30>
 200d840:	00804034 	movhi	r2,256
 200d844:	10bfffc4 	addi	r2,r2,-1
 200d848:	11000c2e 	bgeu	r2,r4,200d87c <__clzsi2+0x58>
 200d84c:	00800204 	movi	r2,8
 200d850:	00c00604 	movi	r3,24
 200d854:	20c8d83a 	srl	r4,r4,r3
 200d858:	00c080b4 	movhi	r3,514
 200d85c:	18e3b504 	addi	r3,r3,-28972
 200d860:	1909883a 	add	r4,r3,r4
 200d864:	20c00003 	ldbu	r3,0(r4)
 200d868:	10c5c83a 	sub	r2,r2,r3
 200d86c:	f800283a 	ret
 200d870:	00800604 	movi	r2,24
 200d874:	00c00204 	movi	r3,8
 200d878:	003ff606 	br	200d854 <__clzsi2+0x30>
 200d87c:	00800404 	movi	r2,16
 200d880:	1007883a 	mov	r3,r2
 200d884:	003ff306 	br	200d854 <__clzsi2+0x30>

0200d888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d888:	defffe04 	addi	sp,sp,-8
 200d88c:	dfc00115 	stw	ra,4(sp)
 200d890:	df000015 	stw	fp,0(sp)
 200d894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200d898:	d0a00b17 	ldw	r2,-32724(gp)
 200d89c:	10000326 	beq	r2,zero,200d8ac <alt_get_errno+0x24>
 200d8a0:	d0a00b17 	ldw	r2,-32724(gp)
 200d8a4:	103ee83a 	callr	r2
 200d8a8:	00000106 	br	200d8b0 <alt_get_errno+0x28>
 200d8ac:	d0a71a04 	addi	r2,gp,-25496
}
 200d8b0:	e037883a 	mov	sp,fp
 200d8b4:	dfc00117 	ldw	ra,4(sp)
 200d8b8:	df000017 	ldw	fp,0(sp)
 200d8bc:	dec00204 	addi	sp,sp,8
 200d8c0:	f800283a 	ret

0200d8c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200d8c4:	defffb04 	addi	sp,sp,-20
 200d8c8:	dfc00415 	stw	ra,16(sp)
 200d8cc:	df000315 	stw	fp,12(sp)
 200d8d0:	df000304 	addi	fp,sp,12
 200d8d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200d8d8:	e0bfff17 	ldw	r2,-4(fp)
 200d8dc:	10000816 	blt	r2,zero,200d900 <close+0x3c>
 200d8e0:	01400304 	movi	r5,12
 200d8e4:	e13fff17 	ldw	r4,-4(fp)
 200d8e8:	200afbc0 	call	200afbc <__mulsi3>
 200d8ec:	1007883a 	mov	r3,r2
 200d8f0:	008080b4 	movhi	r2,514
 200d8f4:	10a67c04 	addi	r2,r2,-26128
 200d8f8:	1885883a 	add	r2,r3,r2
 200d8fc:	00000106 	br	200d904 <close+0x40>
 200d900:	0005883a 	mov	r2,zero
 200d904:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200d908:	e0bffd17 	ldw	r2,-12(fp)
 200d90c:	10001926 	beq	r2,zero,200d974 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200d910:	e0bffd17 	ldw	r2,-12(fp)
 200d914:	10800017 	ldw	r2,0(r2)
 200d918:	10800417 	ldw	r2,16(r2)
 200d91c:	10000626 	beq	r2,zero,200d938 <close+0x74>
 200d920:	e0bffd17 	ldw	r2,-12(fp)
 200d924:	10800017 	ldw	r2,0(r2)
 200d928:	10800417 	ldw	r2,16(r2)
 200d92c:	e13ffd17 	ldw	r4,-12(fp)
 200d930:	103ee83a 	callr	r2
 200d934:	00000106 	br	200d93c <close+0x78>
 200d938:	0005883a 	mov	r2,zero
 200d93c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200d940:	e13fff17 	ldw	r4,-4(fp)
 200d944:	200dfa40 	call	200dfa4 <alt_release_fd>
    if (rval < 0)
 200d948:	e0bffe17 	ldw	r2,-8(fp)
 200d94c:	1000070e 	bge	r2,zero,200d96c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200d950:	200d8880 	call	200d888 <alt_get_errno>
 200d954:	1007883a 	mov	r3,r2
 200d958:	e0bffe17 	ldw	r2,-8(fp)
 200d95c:	0085c83a 	sub	r2,zero,r2
 200d960:	18800015 	stw	r2,0(r3)
      return -1;
 200d964:	00bfffc4 	movi	r2,-1
 200d968:	00000706 	br	200d988 <close+0xc4>
    }
    return 0;
 200d96c:	0005883a 	mov	r2,zero
 200d970:	00000506 	br	200d988 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d974:	200d8880 	call	200d888 <alt_get_errno>
 200d978:	1007883a 	mov	r3,r2
 200d97c:	00801444 	movi	r2,81
 200d980:	18800015 	stw	r2,0(r3)
    return -1;
 200d984:	00bfffc4 	movi	r2,-1
  }
}
 200d988:	e037883a 	mov	sp,fp
 200d98c:	dfc00117 	ldw	ra,4(sp)
 200d990:	df000017 	ldw	fp,0(sp)
 200d994:	dec00204 	addi	sp,sp,8
 200d998:	f800283a 	ret

0200d99c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200d99c:	defffc04 	addi	sp,sp,-16
 200d9a0:	df000315 	stw	fp,12(sp)
 200d9a4:	df000304 	addi	fp,sp,12
 200d9a8:	e13ffd15 	stw	r4,-12(fp)
 200d9ac:	e17ffe15 	stw	r5,-8(fp)
 200d9b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200d9b4:	e0bfff17 	ldw	r2,-4(fp)
}
 200d9b8:	e037883a 	mov	sp,fp
 200d9bc:	df000017 	ldw	fp,0(sp)
 200d9c0:	dec00104 	addi	sp,sp,4
 200d9c4:	f800283a 	ret

0200d9c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d9c8:	defffe04 	addi	sp,sp,-8
 200d9cc:	dfc00115 	stw	ra,4(sp)
 200d9d0:	df000015 	stw	fp,0(sp)
 200d9d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200d9d8:	d0a00b17 	ldw	r2,-32724(gp)
 200d9dc:	10000326 	beq	r2,zero,200d9ec <alt_get_errno+0x24>
 200d9e0:	d0a00b17 	ldw	r2,-32724(gp)
 200d9e4:	103ee83a 	callr	r2
 200d9e8:	00000106 	br	200d9f0 <alt_get_errno+0x28>
 200d9ec:	d0a71a04 	addi	r2,gp,-25496
}
 200d9f0:	e037883a 	mov	sp,fp
 200d9f4:	dfc00117 	ldw	ra,4(sp)
 200d9f8:	df000017 	ldw	fp,0(sp)
 200d9fc:	dec00204 	addi	sp,sp,8
 200da00:	f800283a 	ret

0200da04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200da04:	defffb04 	addi	sp,sp,-20
 200da08:	dfc00415 	stw	ra,16(sp)
 200da0c:	df000315 	stw	fp,12(sp)
 200da10:	df000304 	addi	fp,sp,12
 200da14:	e13ffe15 	stw	r4,-8(fp)
 200da18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200da1c:	e0bffe17 	ldw	r2,-8(fp)
 200da20:	10000816 	blt	r2,zero,200da44 <fstat+0x40>
 200da24:	01400304 	movi	r5,12
 200da28:	e13ffe17 	ldw	r4,-8(fp)
 200da2c:	200afbc0 	call	200afbc <__mulsi3>
 200da30:	1007883a 	mov	r3,r2
 200da34:	008080b4 	movhi	r2,514
 200da38:	10a67c04 	addi	r2,r2,-26128
 200da3c:	1885883a 	add	r2,r3,r2
 200da40:	00000106 	br	200da48 <fstat+0x44>
 200da44:	0005883a 	mov	r2,zero
 200da48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200da4c:	e0bffd17 	ldw	r2,-12(fp)
 200da50:	10001026 	beq	r2,zero,200da94 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200da54:	e0bffd17 	ldw	r2,-12(fp)
 200da58:	10800017 	ldw	r2,0(r2)
 200da5c:	10800817 	ldw	r2,32(r2)
 200da60:	10000726 	beq	r2,zero,200da80 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200da64:	e0bffd17 	ldw	r2,-12(fp)
 200da68:	10800017 	ldw	r2,0(r2)
 200da6c:	10800817 	ldw	r2,32(r2)
 200da70:	e17fff17 	ldw	r5,-4(fp)
 200da74:	e13ffd17 	ldw	r4,-12(fp)
 200da78:	103ee83a 	callr	r2
 200da7c:	00000a06 	br	200daa8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200da80:	e0bfff17 	ldw	r2,-4(fp)
 200da84:	00c80004 	movi	r3,8192
 200da88:	10c00115 	stw	r3,4(r2)
      return 0;
 200da8c:	0005883a 	mov	r2,zero
 200da90:	00000506 	br	200daa8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200da94:	200d9c80 	call	200d9c8 <alt_get_errno>
 200da98:	1007883a 	mov	r3,r2
 200da9c:	00801444 	movi	r2,81
 200daa0:	18800015 	stw	r2,0(r3)
    return -1;
 200daa4:	00bfffc4 	movi	r2,-1
  }
}
 200daa8:	e037883a 	mov	sp,fp
 200daac:	dfc00117 	ldw	ra,4(sp)
 200dab0:	df000017 	ldw	fp,0(sp)
 200dab4:	dec00204 	addi	sp,sp,8
 200dab8:	f800283a 	ret

0200dabc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dabc:	defffe04 	addi	sp,sp,-8
 200dac0:	dfc00115 	stw	ra,4(sp)
 200dac4:	df000015 	stw	fp,0(sp)
 200dac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200dacc:	d0a00b17 	ldw	r2,-32724(gp)
 200dad0:	10000326 	beq	r2,zero,200dae0 <alt_get_errno+0x24>
 200dad4:	d0a00b17 	ldw	r2,-32724(gp)
 200dad8:	103ee83a 	callr	r2
 200dadc:	00000106 	br	200dae4 <alt_get_errno+0x28>
 200dae0:	d0a71a04 	addi	r2,gp,-25496
}
 200dae4:	e037883a 	mov	sp,fp
 200dae8:	dfc00117 	ldw	ra,4(sp)
 200daec:	df000017 	ldw	fp,0(sp)
 200daf0:	dec00204 	addi	sp,sp,8
 200daf4:	f800283a 	ret

0200daf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200daf8:	deffed04 	addi	sp,sp,-76
 200dafc:	dfc01215 	stw	ra,72(sp)
 200db00:	df001115 	stw	fp,68(sp)
 200db04:	df001104 	addi	fp,sp,68
 200db08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200db0c:	e0bfff17 	ldw	r2,-4(fp)
 200db10:	10000816 	blt	r2,zero,200db34 <isatty+0x3c>
 200db14:	01400304 	movi	r5,12
 200db18:	e13fff17 	ldw	r4,-4(fp)
 200db1c:	200afbc0 	call	200afbc <__mulsi3>
 200db20:	1007883a 	mov	r3,r2
 200db24:	008080b4 	movhi	r2,514
 200db28:	10a67c04 	addi	r2,r2,-26128
 200db2c:	1885883a 	add	r2,r3,r2
 200db30:	00000106 	br	200db38 <isatty+0x40>
 200db34:	0005883a 	mov	r2,zero
 200db38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200db3c:	e0bfef17 	ldw	r2,-68(fp)
 200db40:	10000e26 	beq	r2,zero,200db7c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200db44:	e0bfef17 	ldw	r2,-68(fp)
 200db48:	10800017 	ldw	r2,0(r2)
 200db4c:	10800817 	ldw	r2,32(r2)
 200db50:	1000021e 	bne	r2,zero,200db5c <isatty+0x64>
    {
      return 1;
 200db54:	00800044 	movi	r2,1
 200db58:	00000d06 	br	200db90 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200db5c:	e0bff004 	addi	r2,fp,-64
 200db60:	100b883a 	mov	r5,r2
 200db64:	e13fff17 	ldw	r4,-4(fp)
 200db68:	200da040 	call	200da04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200db6c:	e0bff117 	ldw	r2,-60(fp)
 200db70:	10880020 	cmpeqi	r2,r2,8192
 200db74:	10803fcc 	andi	r2,r2,255
 200db78:	00000506 	br	200db90 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200db7c:	200dabc0 	call	200dabc <alt_get_errno>
 200db80:	1007883a 	mov	r3,r2
 200db84:	00801444 	movi	r2,81
 200db88:	18800015 	stw	r2,0(r3)
    return 0;
 200db8c:	0005883a 	mov	r2,zero
  }
}
 200db90:	e037883a 	mov	sp,fp
 200db94:	dfc00117 	ldw	ra,4(sp)
 200db98:	df000017 	ldw	fp,0(sp)
 200db9c:	dec00204 	addi	sp,sp,8
 200dba0:	f800283a 	ret

0200dba4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200dba4:	defffc04 	addi	sp,sp,-16
 200dba8:	df000315 	stw	fp,12(sp)
 200dbac:	df000304 	addi	fp,sp,12
 200dbb0:	e13ffd15 	stw	r4,-12(fp)
 200dbb4:	e17ffe15 	stw	r5,-8(fp)
 200dbb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200dbbc:	e0fffe17 	ldw	r3,-8(fp)
 200dbc0:	e0bffd17 	ldw	r2,-12(fp)
 200dbc4:	18800c26 	beq	r3,r2,200dbf8 <alt_load_section+0x54>
  {
    while( to != end )
 200dbc8:	00000806 	br	200dbec <alt_load_section+0x48>
    {
      *to++ = *from++;
 200dbcc:	e0bffe17 	ldw	r2,-8(fp)
 200dbd0:	10c00104 	addi	r3,r2,4
 200dbd4:	e0fffe15 	stw	r3,-8(fp)
 200dbd8:	e0fffd17 	ldw	r3,-12(fp)
 200dbdc:	19000104 	addi	r4,r3,4
 200dbe0:	e13ffd15 	stw	r4,-12(fp)
 200dbe4:	18c00017 	ldw	r3,0(r3)
 200dbe8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200dbec:	e0fffe17 	ldw	r3,-8(fp)
 200dbf0:	e0bfff17 	ldw	r2,-4(fp)
 200dbf4:	18bff51e 	bne	r3,r2,200dbcc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200dbf8:	0001883a 	nop
 200dbfc:	e037883a 	mov	sp,fp
 200dc00:	df000017 	ldw	fp,0(sp)
 200dc04:	dec00104 	addi	sp,sp,4
 200dc08:	f800283a 	ret

0200dc0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200dc0c:	defffe04 	addi	sp,sp,-8
 200dc10:	dfc00115 	stw	ra,4(sp)
 200dc14:	df000015 	stw	fp,0(sp)
 200dc18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200dc1c:	018080b4 	movhi	r6,514
 200dc20:	31ab2604 	addi	r6,r6,-21352
 200dc24:	014080b4 	movhi	r5,514
 200dc28:	29644904 	addi	r5,r5,-28380
 200dc2c:	010080b4 	movhi	r4,514
 200dc30:	212b2604 	addi	r4,r4,-21352
 200dc34:	200dba40 	call	200dba4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200dc38:	01808034 	movhi	r6,512
 200dc3c:	31808c04 	addi	r6,r6,560
 200dc40:	01408034 	movhi	r5,512
 200dc44:	29400804 	addi	r5,r5,32
 200dc48:	01008034 	movhi	r4,512
 200dc4c:	21000804 	addi	r4,r4,32
 200dc50:	200dba40 	call	200dba4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200dc54:	018080b4 	movhi	r6,514
 200dc58:	31a44904 	addi	r6,r6,-28380
 200dc5c:	014080b4 	movhi	r5,514
 200dc60:	29630f04 	addi	r5,r5,-29636
 200dc64:	010080b4 	movhi	r4,514
 200dc68:	21230f04 	addi	r4,r4,-29636
 200dc6c:	200dba40 	call	200dba4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200dc70:	20177fc0 	call	20177fc <alt_dcache_flush_all>
  alt_icache_flush_all();
 200dc74:	20179bc0 	call	20179bc <alt_icache_flush_all>
}
 200dc78:	0001883a 	nop
 200dc7c:	e037883a 	mov	sp,fp
 200dc80:	dfc00117 	ldw	ra,4(sp)
 200dc84:	df000017 	ldw	fp,0(sp)
 200dc88:	dec00204 	addi	sp,sp,8
 200dc8c:	f800283a 	ret

0200dc90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dc90:	defffe04 	addi	sp,sp,-8
 200dc94:	dfc00115 	stw	ra,4(sp)
 200dc98:	df000015 	stw	fp,0(sp)
 200dc9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200dca0:	d0a00b17 	ldw	r2,-32724(gp)
 200dca4:	10000326 	beq	r2,zero,200dcb4 <alt_get_errno+0x24>
 200dca8:	d0a00b17 	ldw	r2,-32724(gp)
 200dcac:	103ee83a 	callr	r2
 200dcb0:	00000106 	br	200dcb8 <alt_get_errno+0x28>
 200dcb4:	d0a71a04 	addi	r2,gp,-25496
}
 200dcb8:	e037883a 	mov	sp,fp
 200dcbc:	dfc00117 	ldw	ra,4(sp)
 200dcc0:	df000017 	ldw	fp,0(sp)
 200dcc4:	dec00204 	addi	sp,sp,8
 200dcc8:	f800283a 	ret

0200dccc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200dccc:	defff904 	addi	sp,sp,-28
 200dcd0:	dfc00615 	stw	ra,24(sp)
 200dcd4:	df000515 	stw	fp,20(sp)
 200dcd8:	df000504 	addi	fp,sp,20
 200dcdc:	e13ffd15 	stw	r4,-12(fp)
 200dce0:	e17ffe15 	stw	r5,-8(fp)
 200dce4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200dce8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200dcec:	e0bffd17 	ldw	r2,-12(fp)
 200dcf0:	10000816 	blt	r2,zero,200dd14 <lseek+0x48>
 200dcf4:	01400304 	movi	r5,12
 200dcf8:	e13ffd17 	ldw	r4,-12(fp)
 200dcfc:	200afbc0 	call	200afbc <__mulsi3>
 200dd00:	1007883a 	mov	r3,r2
 200dd04:	008080b4 	movhi	r2,514
 200dd08:	10a67c04 	addi	r2,r2,-26128
 200dd0c:	1885883a 	add	r2,r3,r2
 200dd10:	00000106 	br	200dd18 <lseek+0x4c>
 200dd14:	0005883a 	mov	r2,zero
 200dd18:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200dd1c:	e0bffc17 	ldw	r2,-16(fp)
 200dd20:	10001026 	beq	r2,zero,200dd64 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200dd24:	e0bffc17 	ldw	r2,-16(fp)
 200dd28:	10800017 	ldw	r2,0(r2)
 200dd2c:	10800717 	ldw	r2,28(r2)
 200dd30:	10000926 	beq	r2,zero,200dd58 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200dd34:	e0bffc17 	ldw	r2,-16(fp)
 200dd38:	10800017 	ldw	r2,0(r2)
 200dd3c:	10800717 	ldw	r2,28(r2)
 200dd40:	e1bfff17 	ldw	r6,-4(fp)
 200dd44:	e17ffe17 	ldw	r5,-8(fp)
 200dd48:	e13ffc17 	ldw	r4,-16(fp)
 200dd4c:	103ee83a 	callr	r2
 200dd50:	e0bffb15 	stw	r2,-20(fp)
 200dd54:	00000506 	br	200dd6c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200dd58:	00bfde84 	movi	r2,-134
 200dd5c:	e0bffb15 	stw	r2,-20(fp)
 200dd60:	00000206 	br	200dd6c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200dd64:	00bfebc4 	movi	r2,-81
 200dd68:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200dd6c:	e0bffb17 	ldw	r2,-20(fp)
 200dd70:	1000070e 	bge	r2,zero,200dd90 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200dd74:	200dc900 	call	200dc90 <alt_get_errno>
 200dd78:	1007883a 	mov	r3,r2
 200dd7c:	e0bffb17 	ldw	r2,-20(fp)
 200dd80:	0085c83a 	sub	r2,zero,r2
 200dd84:	18800015 	stw	r2,0(r3)
    rc = -1;
 200dd88:	00bfffc4 	movi	r2,-1
 200dd8c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200dd90:	e0bffb17 	ldw	r2,-20(fp)
}
 200dd94:	e037883a 	mov	sp,fp
 200dd98:	dfc00117 	ldw	ra,4(sp)
 200dd9c:	df000017 	ldw	fp,0(sp)
 200dda0:	dec00204 	addi	sp,sp,8
 200dda4:	f800283a 	ret

0200dda8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200dda8:	defff904 	addi	sp,sp,-28
 200ddac:	dfc00615 	stw	ra,24(sp)
 200ddb0:	df000515 	stw	fp,20(sp)
 200ddb4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200ddb8:	0009883a 	mov	r4,zero
 200ddbc:	20168180 	call	2016818 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200ddc0:	200ed940 	call	200ed94 <OSInit>
 200ddc4:	01000044 	movi	r4,1
 200ddc8:	20141b80 	call	20141b8 <OSSemCreate>
 200ddcc:	d0a72015 	stw	r2,-25472(gp)
 200ddd0:	01000044 	movi	r4,1
 200ddd4:	20141b80 	call	20141b8 <OSSemCreate>
 200ddd8:	d0a72215 	stw	r2,-25464(gp)
 200dddc:	d0a71b04 	addi	r2,gp,-25492
 200dde0:	e0bffc15 	stw	r2,-16(fp)
 200dde4:	00800044 	movi	r2,1
 200dde8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 200ddec:	e0bffd0b 	ldhu	r2,-12(fp)
 200ddf0:	1009883a 	mov	r4,r2
 200ddf4:	20141b80 	call	20141b8 <OSSemCreate>
 200ddf8:	1007883a 	mov	r3,r2
 200ddfc:	e0bffc17 	ldw	r2,-16(fp)
 200de00:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200de04:	20168500 	call	2016850 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200de08:	018080b4 	movhi	r6,514
 200de0c:	31a3f804 	addi	r6,r6,-28704
 200de10:	014080b4 	movhi	r5,514
 200de14:	2963f804 	addi	r5,r5,-28704
 200de18:	010080b4 	movhi	r4,514
 200de1c:	2123f804 	addi	r4,r4,-28704
 200de20:	2017d600 	call	2017d60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200de24:	20178fc0 	call	20178fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200de28:	01008074 	movhi	r4,513
 200de2c:	211e5704 	addi	r4,r4,31068
 200de30:	20188a80 	call	20188a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200de34:	d0a71c17 	ldw	r2,-25488(gp)
 200de38:	d0e71d17 	ldw	r3,-25484(gp)
 200de3c:	d1271e17 	ldw	r4,-25480(gp)
 200de40:	200d883a 	mov	r6,r4
 200de44:	180b883a 	mov	r5,r3
 200de48:	1009883a 	mov	r4,r2
 200de4c:	20007f40 	call	20007f4 <main>
 200de50:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 200de54:	01000044 	movi	r4,1
 200de58:	200d8c40 	call	200d8c4 <close>
  exit (result);
 200de5c:	e13ffb17 	ldw	r4,-20(fp)
 200de60:	20188bc0 	call	20188bc <exit>

0200de64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200de64:	defffe04 	addi	sp,sp,-8
 200de68:	dfc00115 	stw	ra,4(sp)
 200de6c:	df000015 	stw	fp,0(sp)
 200de70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200de74:	d0a00b17 	ldw	r2,-32724(gp)
 200de78:	10000326 	beq	r2,zero,200de88 <alt_get_errno+0x24>
 200de7c:	d0a00b17 	ldw	r2,-32724(gp)
 200de80:	103ee83a 	callr	r2
 200de84:	00000106 	br	200de8c <alt_get_errno+0x28>
 200de88:	d0a71a04 	addi	r2,gp,-25496
}
 200de8c:	e037883a 	mov	sp,fp
 200de90:	dfc00117 	ldw	ra,4(sp)
 200de94:	df000017 	ldw	fp,0(sp)
 200de98:	dec00204 	addi	sp,sp,8
 200de9c:	f800283a 	ret

0200dea0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200dea0:	defff904 	addi	sp,sp,-28
 200dea4:	dfc00615 	stw	ra,24(sp)
 200dea8:	df000515 	stw	fp,20(sp)
 200deac:	df000504 	addi	fp,sp,20
 200deb0:	e13ffd15 	stw	r4,-12(fp)
 200deb4:	e17ffe15 	stw	r5,-8(fp)
 200deb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200debc:	e0bffd17 	ldw	r2,-12(fp)
 200dec0:	10000816 	blt	r2,zero,200dee4 <read+0x44>
 200dec4:	01400304 	movi	r5,12
 200dec8:	e13ffd17 	ldw	r4,-12(fp)
 200decc:	200afbc0 	call	200afbc <__mulsi3>
 200ded0:	1007883a 	mov	r3,r2
 200ded4:	008080b4 	movhi	r2,514
 200ded8:	10a67c04 	addi	r2,r2,-26128
 200dedc:	1885883a 	add	r2,r3,r2
 200dee0:	00000106 	br	200dee8 <read+0x48>
 200dee4:	0005883a 	mov	r2,zero
 200dee8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200deec:	e0bffb17 	ldw	r2,-20(fp)
 200def0:	10002226 	beq	r2,zero,200df7c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200def4:	e0bffb17 	ldw	r2,-20(fp)
 200def8:	10800217 	ldw	r2,8(r2)
 200defc:	108000cc 	andi	r2,r2,3
 200df00:	10800060 	cmpeqi	r2,r2,1
 200df04:	1000181e 	bne	r2,zero,200df68 <read+0xc8>
        (fd->dev->read))
 200df08:	e0bffb17 	ldw	r2,-20(fp)
 200df0c:	10800017 	ldw	r2,0(r2)
 200df10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200df14:	10001426 	beq	r2,zero,200df68 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200df18:	e0bffb17 	ldw	r2,-20(fp)
 200df1c:	10800017 	ldw	r2,0(r2)
 200df20:	10800517 	ldw	r2,20(r2)
 200df24:	e0ffff17 	ldw	r3,-4(fp)
 200df28:	180d883a 	mov	r6,r3
 200df2c:	e17ffe17 	ldw	r5,-8(fp)
 200df30:	e13ffb17 	ldw	r4,-20(fp)
 200df34:	103ee83a 	callr	r2
 200df38:	e0bffc15 	stw	r2,-16(fp)
 200df3c:	e0bffc17 	ldw	r2,-16(fp)
 200df40:	1000070e 	bge	r2,zero,200df60 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200df44:	200de640 	call	200de64 <alt_get_errno>
 200df48:	1007883a 	mov	r3,r2
 200df4c:	e0bffc17 	ldw	r2,-16(fp)
 200df50:	0085c83a 	sub	r2,zero,r2
 200df54:	18800015 	stw	r2,0(r3)
          return -1;
 200df58:	00bfffc4 	movi	r2,-1
 200df5c:	00000c06 	br	200df90 <read+0xf0>
        }
        return rval;
 200df60:	e0bffc17 	ldw	r2,-16(fp)
 200df64:	00000a06 	br	200df90 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200df68:	200de640 	call	200de64 <alt_get_errno>
 200df6c:	1007883a 	mov	r3,r2
 200df70:	00800344 	movi	r2,13
 200df74:	18800015 	stw	r2,0(r3)
 200df78:	00000406 	br	200df8c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200df7c:	200de640 	call	200de64 <alt_get_errno>
 200df80:	1007883a 	mov	r3,r2
 200df84:	00801444 	movi	r2,81
 200df88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200df8c:	00bfffc4 	movi	r2,-1
}
 200df90:	e037883a 	mov	sp,fp
 200df94:	dfc00117 	ldw	ra,4(sp)
 200df98:	df000017 	ldw	fp,0(sp)
 200df9c:	dec00204 	addi	sp,sp,8
 200dfa0:	f800283a 	ret

0200dfa4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200dfa4:	defffc04 	addi	sp,sp,-16
 200dfa8:	dfc00315 	stw	ra,12(sp)
 200dfac:	df000215 	stw	fp,8(sp)
 200dfb0:	dc000115 	stw	r16,4(sp)
 200dfb4:	df000204 	addi	fp,sp,8
 200dfb8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200dfbc:	e0bffe17 	ldw	r2,-8(fp)
 200dfc0:	108000d0 	cmplti	r2,r2,3
 200dfc4:	1000111e 	bne	r2,zero,200e00c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200dfc8:	040080b4 	movhi	r16,514
 200dfcc:	84267c04 	addi	r16,r16,-26128
 200dfd0:	e0bffe17 	ldw	r2,-8(fp)
 200dfd4:	01400304 	movi	r5,12
 200dfd8:	1009883a 	mov	r4,r2
 200dfdc:	200afbc0 	call	200afbc <__mulsi3>
 200dfe0:	8085883a 	add	r2,r16,r2
 200dfe4:	10800204 	addi	r2,r2,8
 200dfe8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200dfec:	040080b4 	movhi	r16,514
 200dff0:	84267c04 	addi	r16,r16,-26128
 200dff4:	e0bffe17 	ldw	r2,-8(fp)
 200dff8:	01400304 	movi	r5,12
 200dffc:	1009883a 	mov	r4,r2
 200e000:	200afbc0 	call	200afbc <__mulsi3>
 200e004:	8085883a 	add	r2,r16,r2
 200e008:	10000015 	stw	zero,0(r2)
  }
}
 200e00c:	0001883a 	nop
 200e010:	e6ffff04 	addi	sp,fp,-4
 200e014:	dfc00217 	ldw	ra,8(sp)
 200e018:	df000117 	ldw	fp,4(sp)
 200e01c:	dc000017 	ldw	r16,0(sp)
 200e020:	dec00304 	addi	sp,sp,12
 200e024:	f800283a 	ret

0200e028 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200e028:	defff904 	addi	sp,sp,-28
 200e02c:	df000615 	stw	fp,24(sp)
 200e030:	df000604 	addi	fp,sp,24
 200e034:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e038:	0005303a 	rdctl	r2,status
 200e03c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e040:	e0fffe17 	ldw	r3,-8(fp)
 200e044:	00bfff84 	movi	r2,-2
 200e048:	1884703a 	and	r2,r3,r2
 200e04c:	1001703a 	wrctl	status,r2
  
  return context;
 200e050:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200e054:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200e058:	d0a00c17 	ldw	r2,-32720(gp)
 200e05c:	10c000c4 	addi	r3,r2,3
 200e060:	00bfff04 	movi	r2,-4
 200e064:	1884703a 	and	r2,r3,r2
 200e068:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200e06c:	d0e00c17 	ldw	r3,-32720(gp)
 200e070:	e0bfff17 	ldw	r2,-4(fp)
 200e074:	1887883a 	add	r3,r3,r2
 200e078:	00810034 	movhi	r2,1024
 200e07c:	10800004 	addi	r2,r2,0
 200e080:	10c0062e 	bgeu	r2,r3,200e09c <sbrk+0x74>
 200e084:	e0bffb17 	ldw	r2,-20(fp)
 200e088:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e08c:	e0bffa17 	ldw	r2,-24(fp)
 200e090:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200e094:	00bfffc4 	movi	r2,-1
 200e098:	00000b06 	br	200e0c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200e09c:	d0a00c17 	ldw	r2,-32720(gp)
 200e0a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200e0a4:	d0e00c17 	ldw	r3,-32720(gp)
 200e0a8:	e0bfff17 	ldw	r2,-4(fp)
 200e0ac:	1885883a 	add	r2,r3,r2
 200e0b0:	d0a00c15 	stw	r2,-32720(gp)
 200e0b4:	e0bffb17 	ldw	r2,-20(fp)
 200e0b8:	e0bffc15 	stw	r2,-16(fp)
 200e0bc:	e0bffc17 	ldw	r2,-16(fp)
 200e0c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200e0c4:	e0bffd17 	ldw	r2,-12(fp)
} 
 200e0c8:	e037883a 	mov	sp,fp
 200e0cc:	df000017 	ldw	fp,0(sp)
 200e0d0:	dec00104 	addi	sp,sp,4
 200e0d4:	f800283a 	ret

0200e0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e0d8:	defffe04 	addi	sp,sp,-8
 200e0dc:	dfc00115 	stw	ra,4(sp)
 200e0e0:	df000015 	stw	fp,0(sp)
 200e0e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e0e8:	d0a00b17 	ldw	r2,-32724(gp)
 200e0ec:	10000326 	beq	r2,zero,200e0fc <alt_get_errno+0x24>
 200e0f0:	d0a00b17 	ldw	r2,-32724(gp)
 200e0f4:	103ee83a 	callr	r2
 200e0f8:	00000106 	br	200e100 <alt_get_errno+0x28>
 200e0fc:	d0a71a04 	addi	r2,gp,-25496
}
 200e100:	e037883a 	mov	sp,fp
 200e104:	dfc00117 	ldw	ra,4(sp)
 200e108:	df000017 	ldw	fp,0(sp)
 200e10c:	dec00204 	addi	sp,sp,8
 200e110:	f800283a 	ret

0200e114 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200e114:	defff904 	addi	sp,sp,-28
 200e118:	dfc00615 	stw	ra,24(sp)
 200e11c:	df000515 	stw	fp,20(sp)
 200e120:	df000504 	addi	fp,sp,20
 200e124:	e13ffd15 	stw	r4,-12(fp)
 200e128:	e17ffe15 	stw	r5,-8(fp)
 200e12c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e130:	e0bffd17 	ldw	r2,-12(fp)
 200e134:	10000816 	blt	r2,zero,200e158 <write+0x44>
 200e138:	01400304 	movi	r5,12
 200e13c:	e13ffd17 	ldw	r4,-12(fp)
 200e140:	200afbc0 	call	200afbc <__mulsi3>
 200e144:	1007883a 	mov	r3,r2
 200e148:	008080b4 	movhi	r2,514
 200e14c:	10a67c04 	addi	r2,r2,-26128
 200e150:	1885883a 	add	r2,r3,r2
 200e154:	00000106 	br	200e15c <write+0x48>
 200e158:	0005883a 	mov	r2,zero
 200e15c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e160:	e0bffb17 	ldw	r2,-20(fp)
 200e164:	10002126 	beq	r2,zero,200e1ec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200e168:	e0bffb17 	ldw	r2,-20(fp)
 200e16c:	10800217 	ldw	r2,8(r2)
 200e170:	108000cc 	andi	r2,r2,3
 200e174:	10001826 	beq	r2,zero,200e1d8 <write+0xc4>
 200e178:	e0bffb17 	ldw	r2,-20(fp)
 200e17c:	10800017 	ldw	r2,0(r2)
 200e180:	10800617 	ldw	r2,24(r2)
 200e184:	10001426 	beq	r2,zero,200e1d8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200e188:	e0bffb17 	ldw	r2,-20(fp)
 200e18c:	10800017 	ldw	r2,0(r2)
 200e190:	10800617 	ldw	r2,24(r2)
 200e194:	e0ffff17 	ldw	r3,-4(fp)
 200e198:	180d883a 	mov	r6,r3
 200e19c:	e17ffe17 	ldw	r5,-8(fp)
 200e1a0:	e13ffb17 	ldw	r4,-20(fp)
 200e1a4:	103ee83a 	callr	r2
 200e1a8:	e0bffc15 	stw	r2,-16(fp)
 200e1ac:	e0bffc17 	ldw	r2,-16(fp)
 200e1b0:	1000070e 	bge	r2,zero,200e1d0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200e1b4:	200e0d80 	call	200e0d8 <alt_get_errno>
 200e1b8:	1007883a 	mov	r3,r2
 200e1bc:	e0bffc17 	ldw	r2,-16(fp)
 200e1c0:	0085c83a 	sub	r2,zero,r2
 200e1c4:	18800015 	stw	r2,0(r3)
        return -1;
 200e1c8:	00bfffc4 	movi	r2,-1
 200e1cc:	00000c06 	br	200e200 <write+0xec>
      }
      return rval;
 200e1d0:	e0bffc17 	ldw	r2,-16(fp)
 200e1d4:	00000a06 	br	200e200 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200e1d8:	200e0d80 	call	200e0d8 <alt_get_errno>
 200e1dc:	1007883a 	mov	r3,r2
 200e1e0:	00800344 	movi	r2,13
 200e1e4:	18800015 	stw	r2,0(r3)
 200e1e8:	00000406 	br	200e1fc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200e1ec:	200e0d80 	call	200e0d8 <alt_get_errno>
 200e1f0:	1007883a 	mov	r3,r2
 200e1f4:	00801444 	movi	r2,81
 200e1f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200e1fc:	00bfffc4 	movi	r2,-1
}
 200e200:	e037883a 	mov	sp,fp
 200e204:	dfc00117 	ldw	ra,4(sp)
 200e208:	df000017 	ldw	fp,0(sp)
 200e20c:	dec00204 	addi	sp,sp,8
 200e210:	f800283a 	ret

0200e214 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 200e214:	deffdf04 	addi	sp,sp,-132
 200e218:	dfc02015 	stw	ra,128(sp)
 200e21c:	df001f15 	stw	fp,124(sp)
 200e220:	df001f04 	addi	fp,sp,124
 200e224:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200e228:	e0bfe204 	addi	r2,fp,-120
 200e22c:	100b883a 	mov	r5,r2
 200e230:	01003fc4 	movi	r4,255
 200e234:	20161400 	call	2016140 <OSTaskQuery>
 200e238:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200e23c:	e0bffe83 	ldbu	r2,-6(fp)
 200e240:	10803fcc 	andi	r2,r2,255
 200e244:	10001e1e 	bne	r2,zero,200e2c0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 200e248:	e0bfee83 	ldbu	r2,-70(fp)
 200e24c:	10803fcc 	andi	r2,r2,255
 200e250:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 200e254:	d0a72017 	ldw	r2,-25472(gp)
 200e258:	e0fffd04 	addi	r3,fp,-12
 200e25c:	180b883a 	mov	r5,r3
 200e260:	1009883a 	mov	r4,r2
 200e264:	20149580 	call	2014958 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 200e268:	e0bffe43 	ldbu	r2,-7(fp)
 200e26c:	10803fcc 	andi	r2,r2,255
 200e270:	10000726 	beq	r2,zero,200e290 <__env_lock+0x7c>
 200e274:	d0a00d17 	ldw	r2,-32716(gp)
 200e278:	e0ffe117 	ldw	r3,-124(fp)
 200e27c:	1880041e 	bne	r3,r2,200e290 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 200e280:	d0a71f17 	ldw	r2,-25476(gp)
 200e284:	10800044 	addi	r2,r2,1
 200e288:	d0a71f15 	stw	r2,-25476(gp)
 200e28c:	00000a06 	br	200e2b8 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 200e290:	d0a72017 	ldw	r2,-25472(gp)
 200e294:	e0fffe84 	addi	r3,fp,-6
 200e298:	180d883a 	mov	r6,r3
 200e29c:	000b883a 	mov	r5,zero
 200e2a0:	1009883a 	mov	r4,r2
 200e2a4:	20144d00 	call	20144d0 <OSSemPend>
    locks  = 1;
 200e2a8:	00800044 	movi	r2,1
 200e2ac:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
 200e2b0:	e0bfe117 	ldw	r2,-124(fp)
 200e2b4:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 200e2b8:	0001883a 	nop
 200e2bc:	00000106 	br	200e2c4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 200e2c0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200e2c4:	e037883a 	mov	sp,fp
 200e2c8:	dfc00117 	ldw	ra,4(sp)
 200e2cc:	df000017 	ldw	fp,0(sp)
 200e2d0:	dec00204 	addi	sp,sp,8
 200e2d4:	f800283a 	ret

0200e2d8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 200e2d8:	defffd04 	addi	sp,sp,-12
 200e2dc:	dfc00215 	stw	ra,8(sp)
 200e2e0:	df000115 	stw	fp,4(sp)
 200e2e4:	df000104 	addi	fp,sp,4
 200e2e8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 200e2ec:	d0a71f17 	ldw	r2,-25476(gp)
 200e2f0:	10000b26 	beq	r2,zero,200e320 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 200e2f4:	d0a71f17 	ldw	r2,-25476(gp)
 200e2f8:	10bfffc4 	addi	r2,r2,-1
 200e2fc:	d0a71f15 	stw	r2,-25476(gp)
 200e300:	d0a71f17 	ldw	r2,-25476(gp)
 200e304:	1000071e 	bne	r2,zero,200e324 <__env_unlock+0x4c>
  {
    lockid = -1;
 200e308:	00bfffc4 	movi	r2,-1
 200e30c:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 200e310:	d0a72017 	ldw	r2,-25472(gp)
 200e314:	1009883a 	mov	r4,r2
 200e318:	20148480 	call	2014848 <OSSemPost>
 200e31c:	00000106 	br	200e324 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 200e320:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200e324:	e037883a 	mov	sp,fp
 200e328:	dfc00117 	ldw	ra,4(sp)
 200e32c:	df000017 	ldw	fp,0(sp)
 200e330:	dec00204 	addi	sp,sp,8
 200e334:	f800283a 	ret

0200e338 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 200e338:	deffdb04 	addi	sp,sp,-148
 200e33c:	dfc02415 	stw	ra,144(sp)
 200e340:	df002315 	stw	fp,140(sp)
 200e344:	df002304 	addi	fp,sp,140
 200e348:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200e34c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 200e350:	d0a72343 	ldbu	r2,-25459(gp)
 200e354:	10803fcc 	andi	r2,r2,255
 200e358:	10800060 	cmpeqi	r2,r2,1
 200e35c:	10003626 	beq	r2,zero,200e438 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200e360:	e0bfe204 	addi	r2,fp,-120
 200e364:	100b883a 	mov	r5,r2
 200e368:	01003fc4 	movi	r4,255
 200e36c:	20161400 	call	2016140 <OSTaskQuery>
 200e370:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200e374:	e0bffe83 	ldbu	r2,-6(fp)
 200e378:	10803fcc 	andi	r2,r2,255
 200e37c:	1000301e 	bne	r2,zero,200e440 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 200e380:	e0bfee83 	ldbu	r2,-70(fp)
 200e384:	10803fcc 	andi	r2,r2,255
 200e388:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 200e38c:	d0a72217 	ldw	r2,-25464(gp)
 200e390:	e0fffd04 	addi	r3,fp,-12
 200e394:	180b883a 	mov	r5,r3
 200e398:	1009883a 	mov	r4,r2
 200e39c:	20149580 	call	2014958 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e3a0:	0005303a 	rdctl	r2,status
 200e3a4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e3a8:	e0ffe117 	ldw	r3,-124(fp)
 200e3ac:	00bfff84 	movi	r2,-2
 200e3b0:	1884703a 	and	r2,r3,r2
 200e3b4:	1001703a 	wrctl	status,r2
  
  return context;
 200e3b8:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 200e3bc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 200e3c0:	e0bffd0b 	ldhu	r2,-12(fp)
 200e3c4:	10bfffcc 	andi	r2,r2,65535
 200e3c8:	10000b1e 	bne	r2,zero,200e3f8 <__malloc_lock+0xc0>
 200e3cc:	d0a00e17 	ldw	r2,-32712(gp)
 200e3d0:	e0ffde17 	ldw	r3,-136(fp)
 200e3d4:	1880081e 	bne	r3,r2,200e3f8 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 200e3d8:	d0a72117 	ldw	r2,-25468(gp)
 200e3dc:	10800044 	addi	r2,r2,1
 200e3e0:	d0a72115 	stw	r2,-25468(gp)
 200e3e4:	e0bfdd17 	ldw	r2,-140(fp)
 200e3e8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e3ec:	e0bfdf17 	ldw	r2,-132(fp)
 200e3f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 200e3f4:	00000e06 	br	200e430 <__malloc_lock+0xf8>
 200e3f8:	e0bfdd17 	ldw	r2,-140(fp)
 200e3fc:	e0bfe015 	stw	r2,-128(fp)
 200e400:	e0bfe017 	ldw	r2,-128(fp)
 200e404:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 200e408:	d0a72217 	ldw	r2,-25464(gp)
 200e40c:	e0fffe84 	addi	r3,fp,-6
 200e410:	180d883a 	mov	r6,r3
 200e414:	000b883a 	mov	r5,zero
 200e418:	1009883a 	mov	r4,r2
 200e41c:	20144d00 	call	20144d0 <OSSemPend>
    locks  = 1;
 200e420:	00800044 	movi	r2,1
 200e424:	d0a72115 	stw	r2,-25468(gp)
    lockid = id;
 200e428:	e0bfde17 	ldw	r2,-136(fp)
 200e42c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 200e430:	0001883a 	nop
 200e434:	00000306 	br	200e444 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 200e438:	0001883a 	nop
 200e43c:	00000106 	br	200e444 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 200e440:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200e444:	e037883a 	mov	sp,fp
 200e448:	dfc00117 	ldw	ra,4(sp)
 200e44c:	df000017 	ldw	fp,0(sp)
 200e450:	dec00204 	addi	sp,sp,8
 200e454:	f800283a 	ret

0200e458 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200e458:	defff804 	addi	sp,sp,-32
 200e45c:	dfc00715 	stw	ra,28(sp)
 200e460:	df000615 	stw	fp,24(sp)
 200e464:	df000604 	addi	fp,sp,24
 200e468:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200e46c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 200e470:	d0a72343 	ldbu	r2,-25459(gp)
 200e474:	10803fcc 	andi	r2,r2,255
 200e478:	10800060 	cmpeqi	r2,r2,1
 200e47c:	10002326 	beq	r2,zero,200e50c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e480:	0005303a 	rdctl	r2,status
 200e484:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e488:	e0fffe17 	ldw	r3,-8(fp)
 200e48c:	00bfff84 	movi	r2,-2
 200e490:	1884703a 	and	r2,r3,r2
 200e494:	1001703a 	wrctl	status,r2
  
  return context;
 200e498:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 200e49c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 200e4a0:	d0a72117 	ldw	r2,-25468(gp)
 200e4a4:	1000051e 	bne	r2,zero,200e4bc <__malloc_unlock+0x64>
 200e4a8:	e0bffa17 	ldw	r2,-24(fp)
 200e4ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e4b0:	e0bffb17 	ldw	r2,-20(fp)
 200e4b4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 200e4b8:	00001506 	br	200e510 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 200e4bc:	d0a72117 	ldw	r2,-25468(gp)
 200e4c0:	10bfffc4 	addi	r2,r2,-1
 200e4c4:	d0a72115 	stw	r2,-25468(gp)
 200e4c8:	d0a72117 	ldw	r2,-25468(gp)
 200e4cc:	10000a1e 	bne	r2,zero,200e4f8 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 200e4d0:	00bfffc4 	movi	r2,-1
 200e4d4:	d0a00e15 	stw	r2,-32712(gp)
 200e4d8:	e0bffa17 	ldw	r2,-24(fp)
 200e4dc:	e0bffc15 	stw	r2,-16(fp)
 200e4e0:	e0bffc17 	ldw	r2,-16(fp)
 200e4e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 200e4e8:	d0a72217 	ldw	r2,-25464(gp)
 200e4ec:	1009883a 	mov	r4,r2
 200e4f0:	20148480 	call	2014848 <OSSemPost>
 200e4f4:	00000606 	br	200e510 <__malloc_unlock+0xb8>
 200e4f8:	e0bffa17 	ldw	r2,-24(fp)
 200e4fc:	e0bffd15 	stw	r2,-12(fp)
 200e500:	e0bffd17 	ldw	r2,-12(fp)
 200e504:	1001703a 	wrctl	status,r2
 200e508:	00000106 	br	200e510 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 200e50c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200e510:	e037883a 	mov	sp,fp
 200e514:	dfc00117 	ldw	ra,4(sp)
 200e518:	df000017 	ldw	fp,0(sp)
 200e51c:	dec00204 	addi	sp,sp,8
 200e520:	f800283a 	ret

0200e524 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200e524:	defff704 	addi	sp,sp,-36
 200e528:	dfc00815 	stw	ra,32(sp)
 200e52c:	df000715 	stw	fp,28(sp)
 200e530:	df000704 	addi	fp,sp,28
 200e534:	e13ffd15 	stw	r4,-12(fp)
 200e538:	e17ffe15 	stw	r5,-8(fp)
 200e53c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200e540:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200e544:	e0bfff17 	ldw	r2,-4(fp)
 200e548:	1000021e 	bne	r2,zero,200e554 <OSEventNameGet+0x30>
        return (0);
 200e54c:	0005883a 	mov	r2,zero
 200e550:	00003706 	br	200e630 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200e554:	e0bffd17 	ldw	r2,-12(fp)
 200e558:	1000051e 	bne	r2,zero,200e570 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 200e55c:	e0bfff17 	ldw	r2,-4(fp)
 200e560:	00c00104 	movi	r3,4
 200e564:	10c00005 	stb	r3,0(r2)
        return (0);
 200e568:	0005883a 	mov	r2,zero
 200e56c:	00003006 	br	200e630 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200e570:	e0bffe17 	ldw	r2,-8(fp)
 200e574:	1000051e 	bne	r2,zero,200e58c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 200e578:	e0bfff17 	ldw	r2,-4(fp)
 200e57c:	00c00304 	movi	r3,12
 200e580:	10c00005 	stb	r3,0(r2)
        return (0);
 200e584:	0005883a 	mov	r2,zero
 200e588:	00002906 	br	200e630 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200e58c:	d0a73103 	ldbu	r2,-25404(gp)
 200e590:	10803fcc 	andi	r2,r2,255
 200e594:	10000526 	beq	r2,zero,200e5ac <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 200e598:	e0bfff17 	ldw	r2,-4(fp)
 200e59c:	00c00444 	movi	r3,17
 200e5a0:	10c00005 	stb	r3,0(r2)
        return (0);
 200e5a4:	0005883a 	mov	r2,zero
 200e5a8:	00002106 	br	200e630 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 200e5ac:	e0bffd17 	ldw	r2,-12(fp)
 200e5b0:	10800003 	ldbu	r2,0(r2)
 200e5b4:	10803fcc 	andi	r2,r2,255
 200e5b8:	10bfffc4 	addi	r2,r2,-1
 200e5bc:	10800128 	cmpgeui	r2,r2,4
 200e5c0:	10000526 	beq	r2,zero,200e5d8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200e5c4:	e0bfff17 	ldw	r2,-4(fp)
 200e5c8:	00c00044 	movi	r3,1
 200e5cc:	10c00005 	stb	r3,0(r2)
             return (0);
 200e5d0:	0005883a 	mov	r2,zero
 200e5d4:	00001606 	br	200e630 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 200e5d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e5dc:	0005303a 	rdctl	r2,status
 200e5e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e5e4:	e0fffb17 	ldw	r3,-20(fp)
 200e5e8:	00bfff84 	movi	r2,-2
 200e5ec:	1884703a 	and	r2,r3,r2
 200e5f0:	1001703a 	wrctl	status,r2
  
  return context;
 200e5f4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 200e5f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 200e5fc:	e0bffd17 	ldw	r2,-12(fp)
 200e600:	10800384 	addi	r2,r2,14
 200e604:	100b883a 	mov	r5,r2
 200e608:	e13ffe17 	ldw	r4,-8(fp)
 200e60c:	200ffa80 	call	200ffa8 <OS_StrCopy>
 200e610:	e0bffa05 	stb	r2,-24(fp)
 200e614:	e0bff917 	ldw	r2,-28(fp)
 200e618:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e61c:	e0bffc17 	ldw	r2,-16(fp)
 200e620:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200e624:	e0bfff17 	ldw	r2,-4(fp)
 200e628:	10000005 	stb	zero,0(r2)
    return (len);
 200e62c:	e0bffa03 	ldbu	r2,-24(fp)
}
 200e630:	e037883a 	mov	sp,fp
 200e634:	dfc00117 	ldw	ra,4(sp)
 200e638:	df000017 	ldw	fp,0(sp)
 200e63c:	dec00204 	addi	sp,sp,8
 200e640:	f800283a 	ret

0200e644 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200e644:	defff604 	addi	sp,sp,-40
 200e648:	dfc00915 	stw	ra,36(sp)
 200e64c:	df000815 	stw	fp,32(sp)
 200e650:	df000804 	addi	fp,sp,32
 200e654:	e13ffd15 	stw	r4,-12(fp)
 200e658:	e17ffe15 	stw	r5,-8(fp)
 200e65c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200e660:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200e664:	e0bfff17 	ldw	r2,-4(fp)
 200e668:	10004026 	beq	r2,zero,200e76c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200e66c:	e0bffd17 	ldw	r2,-12(fp)
 200e670:	1000041e 	bne	r2,zero,200e684 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 200e674:	e0bfff17 	ldw	r2,-4(fp)
 200e678:	00c00104 	movi	r3,4
 200e67c:	10c00005 	stb	r3,0(r2)
        return;
 200e680:	00003b06 	br	200e770 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200e684:	e0bffe17 	ldw	r2,-8(fp)
 200e688:	1000041e 	bne	r2,zero,200e69c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 200e68c:	e0bfff17 	ldw	r2,-4(fp)
 200e690:	00c00304 	movi	r3,12
 200e694:	10c00005 	stb	r3,0(r2)
        return;
 200e698:	00003506 	br	200e770 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200e69c:	d0a73103 	ldbu	r2,-25404(gp)
 200e6a0:	10803fcc 	andi	r2,r2,255
 200e6a4:	10000426 	beq	r2,zero,200e6b8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 200e6a8:	e0bfff17 	ldw	r2,-4(fp)
 200e6ac:	00c00484 	movi	r3,18
 200e6b0:	10c00005 	stb	r3,0(r2)
        return;
 200e6b4:	00002e06 	br	200e770 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 200e6b8:	e0bffd17 	ldw	r2,-12(fp)
 200e6bc:	10800003 	ldbu	r2,0(r2)
 200e6c0:	10803fcc 	andi	r2,r2,255
 200e6c4:	10bfffc4 	addi	r2,r2,-1
 200e6c8:	10800128 	cmpgeui	r2,r2,4
 200e6cc:	10000426 	beq	r2,zero,200e6e0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200e6d0:	e0bfff17 	ldw	r2,-4(fp)
 200e6d4:	00c00044 	movi	r3,1
 200e6d8:	10c00005 	stb	r3,0(r2)
             return;
 200e6dc:	00002406 	br	200e770 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 200e6e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e6e4:	0005303a 	rdctl	r2,status
 200e6e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e6ec:	e0fffc17 	ldw	r3,-16(fp)
 200e6f0:	00bfff84 	movi	r2,-2
 200e6f4:	1884703a 	and	r2,r3,r2
 200e6f8:	1001703a 	wrctl	status,r2
  
  return context;
 200e6fc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 200e700:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 200e704:	e13ffe17 	ldw	r4,-8(fp)
 200e708:	201001c0 	call	201001c <OS_StrLen>
 200e70c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 200e710:	e0bffa03 	ldbu	r2,-24(fp)
 200e714:	10800830 	cmpltui	r2,r2,32
 200e718:	1000081e 	bne	r2,zero,200e73c <OSEventNameSet+0xf8>
 200e71c:	e0bff817 	ldw	r2,-32(fp)
 200e720:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e724:	e0bff917 	ldw	r2,-28(fp)
 200e728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 200e72c:	e0bfff17 	ldw	r2,-4(fp)
 200e730:	00c002c4 	movi	r3,11
 200e734:	10c00005 	stb	r3,0(r2)
        return;
 200e738:	00000d06 	br	200e770 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 200e73c:	e0bffd17 	ldw	r2,-12(fp)
 200e740:	10800384 	addi	r2,r2,14
 200e744:	e17ffe17 	ldw	r5,-8(fp)
 200e748:	1009883a 	mov	r4,r2
 200e74c:	200ffa80 	call	200ffa8 <OS_StrCopy>
 200e750:	e0bff817 	ldw	r2,-32(fp)
 200e754:	e0bffb15 	stw	r2,-20(fp)
 200e758:	e0bffb17 	ldw	r2,-20(fp)
 200e75c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200e760:	e0bfff17 	ldw	r2,-4(fp)
 200e764:	10000005 	stb	zero,0(r2)
 200e768:	00000106 	br	200e770 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 200e76c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 200e770:	e037883a 	mov	sp,fp
 200e774:	dfc00117 	ldw	ra,4(sp)
 200e778:	df000017 	ldw	fp,0(sp)
 200e77c:	dec00204 	addi	sp,sp,8
 200e780:	f800283a 	ret

0200e784 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 200e784:	deffed04 	addi	sp,sp,-76
 200e788:	dfc01215 	stw	ra,72(sp)
 200e78c:	df001115 	stw	fp,68(sp)
 200e790:	df001104 	addi	fp,sp,68
 200e794:	e13ffc15 	stw	r4,-16(fp)
 200e798:	e17ffd15 	stw	r5,-12(fp)
 200e79c:	e1bffe15 	stw	r6,-8(fp)
 200e7a0:	3805883a 	mov	r2,r7
 200e7a4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 200e7a8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 200e7ac:	e0800217 	ldw	r2,8(fp)
 200e7b0:	1000021e 	bne	r2,zero,200e7bc <OSEventPendMulti+0x38>
        return (0);
 200e7b4:	0005883a 	mov	r2,zero
 200e7b8:	00017106 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 200e7bc:	e0bffc17 	ldw	r2,-16(fp)
 200e7c0:	1000051e 	bne	r2,zero,200e7d8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 200e7c4:	e0800217 	ldw	r2,8(fp)
 200e7c8:	00c00104 	movi	r3,4
 200e7cc:	10c00005 	stb	r3,0(r2)
        return (0);
 200e7d0:	0005883a 	mov	r2,zero
 200e7d4:	00016a06 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 200e7d8:	e0bffd17 	ldw	r2,-12(fp)
 200e7dc:	1000051e 	bne	r2,zero,200e7f4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 200e7e0:	e0800217 	ldw	r2,8(fp)
 200e7e4:	00c00104 	movi	r3,4
 200e7e8:	10c00005 	stb	r3,0(r2)
        return (0);
 200e7ec:	0005883a 	mov	r2,zero
 200e7f0:	00016306 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 200e7f4:	e0bffe17 	ldw	r2,-8(fp)
 200e7f8:	1000051e 	bne	r2,zero,200e810 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 200e7fc:	e0800217 	ldw	r2,8(fp)
 200e800:	00c00104 	movi	r3,4
 200e804:	10c00005 	stb	r3,0(r2)
        return (0);
 200e808:	0005883a 	mov	r2,zero
 200e80c:	00015c06 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 200e810:	e0bffd17 	ldw	r2,-12(fp)
 200e814:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 200e818:	e0bffc17 	ldw	r2,-16(fp)
 200e81c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 200e820:	e0bfef17 	ldw	r2,-68(fp)
 200e824:	10800017 	ldw	r2,0(r2)
 200e828:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 200e82c:	00001906 	br	200e894 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 200e830:	e0bff017 	ldw	r2,-64(fp)
 200e834:	10800003 	ldbu	r2,0(r2)
 200e838:	10803fcc 	andi	r2,r2,255
 200e83c:	10c000a0 	cmpeqi	r3,r2,2
 200e840:	1800091e 	bne	r3,zero,200e868 <OSEventPendMulti+0xe4>
 200e844:	10c000e0 	cmpeqi	r3,r2,3
 200e848:	1800091e 	bne	r3,zero,200e870 <OSEventPendMulti+0xec>
 200e84c:	10800060 	cmpeqi	r2,r2,1
 200e850:	1000091e 	bne	r2,zero,200e878 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 200e854:	e0800217 	ldw	r2,8(fp)
 200e858:	00c00044 	movi	r3,1
 200e85c:	10c00005 	stb	r3,0(r2)
                 return (0);
 200e860:	0005883a 	mov	r2,zero
 200e864:	00014606 	br	200ed80 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 200e868:	0001883a 	nop
 200e86c:	00000306 	br	200e87c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 200e870:	0001883a 	nop
 200e874:	00000106 	br	200e87c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 200e878:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 200e87c:	e0bfef17 	ldw	r2,-68(fp)
 200e880:	10800104 	addi	r2,r2,4
 200e884:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 200e888:	e0bfef17 	ldw	r2,-68(fp)
 200e88c:	10800017 	ldw	r2,0(r2)
 200e890:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 200e894:	e0bff017 	ldw	r2,-64(fp)
 200e898:	103fe51e 	bne	r2,zero,200e830 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 200e89c:	d0a73103 	ldbu	r2,-25404(gp)
 200e8a0:	10803fcc 	andi	r2,r2,255
 200e8a4:	10000526 	beq	r2,zero,200e8bc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 200e8a8:	e0800217 	ldw	r2,8(fp)
 200e8ac:	00c00084 	movi	r3,2
 200e8b0:	10c00005 	stb	r3,0(r2)
        return (0);
 200e8b4:	0005883a 	mov	r2,zero
 200e8b8:	00013106 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 200e8bc:	d0a72303 	ldbu	r2,-25460(gp)
 200e8c0:	10803fcc 	andi	r2,r2,255
 200e8c4:	10000526 	beq	r2,zero,200e8dc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 200e8c8:	e0800217 	ldw	r2,8(fp)
 200e8cc:	00c00344 	movi	r3,13
 200e8d0:	10c00005 	stb	r3,0(r2)
        return (0);
 200e8d4:	0005883a 	mov	r2,zero
 200e8d8:	00012906 	br	200ed80 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e8dc:	0005303a 	rdctl	r2,status
 200e8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e8e4:	e0fffb17 	ldw	r3,-20(fp)
 200e8e8:	00bfff84 	movi	r2,-2
 200e8ec:	1884703a 	and	r2,r3,r2
 200e8f0:	1001703a 	wrctl	status,r2
  
  return context;
 200e8f4:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 200e8f8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 200e8fc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 200e900:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 200e904:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 200e908:	e0bffc17 	ldw	r2,-16(fp)
 200e90c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 200e910:	e0bfef17 	ldw	r2,-68(fp)
 200e914:	10800017 	ldw	r2,0(r2)
 200e918:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200e91c:	00008106 	br	200eb24 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 200e920:	e0bff017 	ldw	r2,-64(fp)
 200e924:	10800003 	ldbu	r2,0(r2)
 200e928:	10803fcc 	andi	r2,r2,255
 200e92c:	10c000a0 	cmpeqi	r3,r2,2
 200e930:	18003c1e 	bne	r3,zero,200ea24 <OSEventPendMulti+0x2a0>
 200e934:	10c000e0 	cmpeqi	r3,r2,3
 200e938:	1800031e 	bne	r3,zero,200e948 <OSEventPendMulti+0x1c4>
 200e93c:	10800060 	cmpeqi	r2,r2,1
 200e940:	10001e1e 	bne	r2,zero,200e9bc <OSEventPendMulti+0x238>
 200e944:	00006606 	br	200eae0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 200e948:	e0bff017 	ldw	r2,-64(fp)
 200e94c:	1080020b 	ldhu	r2,8(r2)
 200e950:	10bfffcc 	andi	r2,r2,65535
 200e954:	10001526 	beq	r2,zero,200e9ac <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 200e958:	e0bff017 	ldw	r2,-64(fp)
 200e95c:	1080020b 	ldhu	r2,8(r2)
 200e960:	10bfffc4 	addi	r2,r2,-1
 200e964:	1007883a 	mov	r3,r2
 200e968:	e0bff017 	ldw	r2,-64(fp)
 200e96c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 200e970:	e0bffd17 	ldw	r2,-12(fp)
 200e974:	10c00104 	addi	r3,r2,4
 200e978:	e0fffd15 	stw	r3,-12(fp)
 200e97c:	e0fff017 	ldw	r3,-64(fp)
 200e980:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 200e984:	00800044 	movi	r2,1
 200e988:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 200e98c:	e0bffe17 	ldw	r2,-8(fp)
 200e990:	10c00104 	addi	r3,r2,4
 200e994:	e0fffe15 	stw	r3,-8(fp)
 200e998:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 200e99c:	e0bff18b 	ldhu	r2,-58(fp)
 200e9a0:	10800044 	addi	r2,r2,1
 200e9a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 200e9a8:	00005806 	br	200eb0c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 200e9ac:	e0bff203 	ldbu	r2,-56(fp)
 200e9b0:	10800054 	ori	r2,r2,1
 200e9b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200e9b8:	00005406 	br	200eb0c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 200e9bc:	e0bff017 	ldw	r2,-64(fp)
 200e9c0:	10800117 	ldw	r2,4(r2)
 200e9c4:	10001326 	beq	r2,zero,200ea14 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 200e9c8:	e0bffe17 	ldw	r2,-8(fp)
 200e9cc:	10c00104 	addi	r3,r2,4
 200e9d0:	e0fffe15 	stw	r3,-8(fp)
 200e9d4:	e0fff017 	ldw	r3,-64(fp)
 200e9d8:	18c00117 	ldw	r3,4(r3)
 200e9dc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 200e9e0:	e0bff017 	ldw	r2,-64(fp)
 200e9e4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 200e9e8:	e0bffd17 	ldw	r2,-12(fp)
 200e9ec:	10c00104 	addi	r3,r2,4
 200e9f0:	e0fffd15 	stw	r3,-12(fp)
 200e9f4:	e0fff017 	ldw	r3,-64(fp)
 200e9f8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 200e9fc:	00800044 	movi	r2,1
 200ea00:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 200ea04:	e0bff18b 	ldhu	r2,-58(fp)
 200ea08:	10800044 	addi	r2,r2,1
 200ea0c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 200ea10:	00003e06 	br	200eb0c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 200ea14:	e0bff203 	ldbu	r2,-56(fp)
 200ea18:	10800094 	ori	r2,r2,2
 200ea1c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200ea20:	00003a06 	br	200eb0c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 200ea24:	e0bff017 	ldw	r2,-64(fp)
 200ea28:	10800117 	ldw	r2,4(r2)
 200ea2c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 200ea30:	e0bff517 	ldw	r2,-44(fp)
 200ea34:	1080058b 	ldhu	r2,22(r2)
 200ea38:	10bfffcc 	andi	r2,r2,65535
 200ea3c:	10002426 	beq	r2,zero,200ead0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 200ea40:	e0bffe17 	ldw	r2,-8(fp)
 200ea44:	10c00104 	addi	r3,r2,4
 200ea48:	e0fffe15 	stw	r3,-8(fp)
 200ea4c:	e0fff517 	ldw	r3,-44(fp)
 200ea50:	18c00417 	ldw	r3,16(r3)
 200ea54:	19400104 	addi	r5,r3,4
 200ea58:	e13ff517 	ldw	r4,-44(fp)
 200ea5c:	21400415 	stw	r5,16(r4)
 200ea60:	18c00017 	ldw	r3,0(r3)
 200ea64:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 200ea68:	e0bff517 	ldw	r2,-44(fp)
 200ea6c:	10c00417 	ldw	r3,16(r2)
 200ea70:	e0bff517 	ldw	r2,-44(fp)
 200ea74:	10800217 	ldw	r2,8(r2)
 200ea78:	1880041e 	bne	r3,r2,200ea8c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 200ea7c:	e0bff517 	ldw	r2,-44(fp)
 200ea80:	10c00117 	ldw	r3,4(r2)
 200ea84:	e0bff517 	ldw	r2,-44(fp)
 200ea88:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 200ea8c:	e0bff517 	ldw	r2,-44(fp)
 200ea90:	1080058b 	ldhu	r2,22(r2)
 200ea94:	10bfffc4 	addi	r2,r2,-1
 200ea98:	1007883a 	mov	r3,r2
 200ea9c:	e0bff517 	ldw	r2,-44(fp)
 200eaa0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 200eaa4:	e0bffd17 	ldw	r2,-12(fp)
 200eaa8:	10c00104 	addi	r3,r2,4
 200eaac:	e0fffd15 	stw	r3,-12(fp)
 200eab0:	e0fff017 	ldw	r3,-64(fp)
 200eab4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 200eab8:	00800044 	movi	r2,1
 200eabc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 200eac0:	e0bff18b 	ldhu	r2,-58(fp)
 200eac4:	10800044 	addi	r2,r2,1
 200eac8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 200eacc:	00000f06 	br	200eb0c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 200ead0:	e0bff203 	ldbu	r2,-56(fp)
 200ead4:	10800114 	ori	r2,r2,4
 200ead8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200eadc:	00000b06 	br	200eb0c <OSEventPendMulti+0x388>
 200eae0:	e0bff317 	ldw	r2,-52(fp)
 200eae4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200eae8:	e0bff417 	ldw	r2,-48(fp)
 200eaec:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 200eaf0:	e0bffd17 	ldw	r2,-12(fp)
 200eaf4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 200eaf8:	e0800217 	ldw	r2,8(fp)
 200eafc:	00c00044 	movi	r3,1
 200eb00:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 200eb04:	e0bff18b 	ldhu	r2,-58(fp)
 200eb08:	00009d06 	br	200ed80 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 200eb0c:	e0bfef17 	ldw	r2,-68(fp)
 200eb10:	10800104 	addi	r2,r2,4
 200eb14:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 200eb18:	e0bfef17 	ldw	r2,-68(fp)
 200eb1c:	10800017 	ldw	r2,0(r2)
 200eb20:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200eb24:	e0bff017 	ldw	r2,-64(fp)
 200eb28:	103f7d1e 	bne	r2,zero,200e920 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 200eb2c:	e0bff103 	ldbu	r2,-60(fp)
 200eb30:	10800058 	cmpnei	r2,r2,1
 200eb34:	10000a1e 	bne	r2,zero,200eb60 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 200eb38:	e0bffd17 	ldw	r2,-12(fp)
 200eb3c:	10000015 	stw	zero,0(r2)
 200eb40:	e0bff317 	ldw	r2,-52(fp)
 200eb44:	e0bff615 	stw	r2,-40(fp)
 200eb48:	e0bff617 	ldw	r2,-40(fp)
 200eb4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 200eb50:	e0800217 	ldw	r2,8(fp)
 200eb54:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 200eb58:	e0bff18b 	ldhu	r2,-58(fp)
 200eb5c:	00008806 	br	200ed80 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 200eb60:	d0a73217 	ldw	r2,-25400(gp)
 200eb64:	d0e73217 	ldw	r3,-25400(gp)
 200eb68:	19000c03 	ldbu	r4,48(r3)
 200eb6c:	e0fff203 	ldbu	r3,-56(fp)
 200eb70:	20c6b03a 	or	r3,r4,r3
 200eb74:	1809883a 	mov	r4,r3
 200eb78:	00ffe004 	movi	r3,-128
 200eb7c:	20c6b03a 	or	r3,r4,r3
 200eb80:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200eb84:	d0a73217 	ldw	r2,-25400(gp)
 200eb88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 200eb8c:	d0a73217 	ldw	r2,-25400(gp)
 200eb90:	e0ffff0b 	ldhu	r3,-4(fp)
 200eb94:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 200eb98:	e13ffc17 	ldw	r4,-16(fp)
 200eb9c:	200f6c00 	call	200f6c0 <OS_EventTaskWaitMulti>
 200eba0:	e0bff317 	ldw	r2,-52(fp)
 200eba4:	e0bff915 	stw	r2,-28(fp)
 200eba8:	e0bff917 	ldw	r2,-28(fp)
 200ebac:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 200ebb0:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ebb4:	0005303a 	rdctl	r2,status
 200ebb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ebbc:	e0fff717 	ldw	r3,-36(fp)
 200ebc0:	00bfff84 	movi	r2,-2
 200ebc4:	1884703a 	and	r2,r3,r2
 200ebc8:	1001703a 	wrctl	status,r2
  
  return context;
 200ebcc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 200ebd0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 200ebd4:	d0a73217 	ldw	r2,-25400(gp)
 200ebd8:	10800c43 	ldbu	r2,49(r2)
 200ebdc:	10803fcc 	andi	r2,r2,255
 200ebe0:	10000226 	beq	r2,zero,200ebec <OSEventPendMulti+0x468>
 200ebe4:	108000a0 	cmpeqi	r2,r2,2
 200ebe8:	10001826 	beq	r2,zero,200ec4c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 200ebec:	d0a73217 	ldw	r2,-25400(gp)
 200ebf0:	10800717 	ldw	r2,28(r2)
 200ebf4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 200ebf8:	e0bff017 	ldw	r2,-64(fp)
 200ebfc:	10000b26 	beq	r2,zero,200ec2c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 200ec00:	e0bffd17 	ldw	r2,-12(fp)
 200ec04:	10c00104 	addi	r3,r2,4
 200ec08:	e0fffd15 	stw	r3,-12(fp)
 200ec0c:	e0fff017 	ldw	r3,-64(fp)
 200ec10:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 200ec14:	e0bffd17 	ldw	r2,-12(fp)
 200ec18:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 200ec1c:	e0bff18b 	ldhu	r2,-58(fp)
 200ec20:	10800044 	addi	r2,r2,1
 200ec24:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 200ec28:	00000d06 	br	200ec60 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 200ec2c:	d0a73217 	ldw	r2,-25400(gp)
 200ec30:	00c00044 	movi	r3,1
 200ec34:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200ec38:	d0a73217 	ldw	r2,-25400(gp)
 200ec3c:	e17ffc17 	ldw	r5,-16(fp)
 200ec40:	1009883a 	mov	r4,r2
 200ec44:	200f8c80 	call	200f8c8 <OS_EventTaskRemoveMulti>
             }
			 break;
 200ec48:	00000506 	br	200ec60 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200ec4c:	d0a73217 	ldw	r2,-25400(gp)
 200ec50:	e17ffc17 	ldw	r5,-16(fp)
 200ec54:	1009883a 	mov	r4,r2
 200ec58:	200f8c80 	call	200f8c8 <OS_EventTaskRemoveMulti>
             break;
 200ec5c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 200ec60:	d0a73217 	ldw	r2,-25400(gp)
 200ec64:	10800c43 	ldbu	r2,49(r2)
 200ec68:	10803fcc 	andi	r2,r2,255
 200ec6c:	10000326 	beq	r2,zero,200ec7c <OSEventPendMulti+0x4f8>
 200ec70:	108000a0 	cmpeqi	r2,r2,2
 200ec74:	1000231e 	bne	r2,zero,200ed04 <OSEventPendMulti+0x580>
 200ec78:	00002a06 	br	200ed24 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 200ec7c:	e0bff017 	ldw	r2,-64(fp)
 200ec80:	10800003 	ldbu	r2,0(r2)
 200ec84:	10803fcc 	andi	r2,r2,255
 200ec88:	0080100e 	bge	zero,r2,200eccc <OSEventPendMulti+0x548>
 200ec8c:	10c000d0 	cmplti	r3,r2,3
 200ec90:	1800071e 	bne	r3,zero,200ecb0 <OSEventPendMulti+0x52c>
 200ec94:	108000e0 	cmpeqi	r2,r2,3
 200ec98:	10000c26 	beq	r2,zero,200eccc <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 200ec9c:	e0bffe17 	ldw	r2,-8(fp)
 200eca0:	10c00104 	addi	r3,r2,4
 200eca4:	e0fffe15 	stw	r3,-8(fp)
 200eca8:	10000015 	stw	zero,0(r2)
                      break;
 200ecac:	00001206 	br	200ecf8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 200ecb0:	e0bffe17 	ldw	r2,-8(fp)
 200ecb4:	10c00104 	addi	r3,r2,4
 200ecb8:	e0fffe15 	stw	r3,-8(fp)
 200ecbc:	d0e73217 	ldw	r3,-25400(gp)
 200ecc0:	18c00917 	ldw	r3,36(r3)
 200ecc4:	10c00015 	stw	r3,0(r2)
                      break;
 200ecc8:	00000b06 	br	200ecf8 <OSEventPendMulti+0x574>
 200eccc:	e0bff317 	ldw	r2,-52(fp)
 200ecd0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ecd4:	e0bff817 	ldw	r2,-32(fp)
 200ecd8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 200ecdc:	e0bffd17 	ldw	r2,-12(fp)
 200ece0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 200ece4:	e0800217 	ldw	r2,8(fp)
 200ece8:	00c00044 	movi	r3,1
 200ecec:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 200ecf0:	e0bff18b 	ldhu	r2,-58(fp)
 200ecf4:	00002206 	br	200ed80 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 200ecf8:	e0800217 	ldw	r2,8(fp)
 200ecfc:	10000005 	stb	zero,0(r2)
             break;
 200ed00:	00001006 	br	200ed44 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 200ed04:	e0bffe17 	ldw	r2,-8(fp)
 200ed08:	10c00104 	addi	r3,r2,4
 200ed0c:	e0fffe15 	stw	r3,-8(fp)
 200ed10:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 200ed14:	e0800217 	ldw	r2,8(fp)
 200ed18:	00c00384 	movi	r3,14
 200ed1c:	10c00005 	stb	r3,0(r2)
             break;
 200ed20:	00000806 	br	200ed44 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 200ed24:	e0bffe17 	ldw	r2,-8(fp)
 200ed28:	10c00104 	addi	r3,r2,4
 200ed2c:	e0fffe15 	stw	r3,-8(fp)
 200ed30:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 200ed34:	e0800217 	ldw	r2,8(fp)
 200ed38:	00c00284 	movi	r3,10
 200ed3c:	10c00005 	stb	r3,0(r2)
             break;
 200ed40:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 200ed44:	d0a73217 	ldw	r2,-25400(gp)
 200ed48:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 200ed4c:	d0a73217 	ldw	r2,-25400(gp)
 200ed50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 200ed54:	d0a73217 	ldw	r2,-25400(gp)
 200ed58:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 200ed5c:	d0a73217 	ldw	r2,-25400(gp)
 200ed60:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 200ed64:	d0a73217 	ldw	r2,-25400(gp)
 200ed68:	10000915 	stw	zero,36(r2)
 200ed6c:	e0bff317 	ldw	r2,-52(fp)
 200ed70:	e0bffa15 	stw	r2,-24(fp)
 200ed74:	e0bffa17 	ldw	r2,-24(fp)
 200ed78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 200ed7c:	e0bff18b 	ldhu	r2,-58(fp)
}
 200ed80:	e037883a 	mov	sp,fp
 200ed84:	dfc00117 	ldw	ra,4(sp)
 200ed88:	df000017 	ldw	fp,0(sp)
 200ed8c:	dec00204 	addi	sp,sp,8
 200ed90:	f800283a 	ret

0200ed94 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 200ed94:	defffe04 	addi	sp,sp,-8
 200ed98:	dfc00115 	stw	ra,4(sp)
 200ed9c:	df000015 	stw	fp,0(sp)
 200eda0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 200eda4:	20184fc0 	call	20184fc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 200eda8:	200fb100 	call	200fb10 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 200edac:	200fb580 	call	200fb58 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 200edb0:	200fcc40 	call	200fcc4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 200edb4:	200fa300 	call	200fa30 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 200edb8:	2011b640 	call	2011b64 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 200edbc:	2012f2c0 	call	2012f2c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 200edc0:	20140600 	call	2014060 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 200edc4:	200fbc40 	call	200fbc4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 200edc8:	200fc440 	call	200fc44 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 200edcc:	201851c0 	call	201851c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 200edd0:	20105380 	call	2010538 <OSDebugInit>
#endif
}
 200edd4:	0001883a 	nop
 200edd8:	e037883a 	mov	sp,fp
 200eddc:	dfc00117 	ldw	ra,4(sp)
 200ede0:	df000017 	ldw	fp,0(sp)
 200ede4:	dec00204 	addi	sp,sp,8
 200ede8:	f800283a 	ret

0200edec <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 200edec:	deffff04 	addi	sp,sp,-4
 200edf0:	df000015 	stw	fp,0(sp)
 200edf4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 200edf8:	d0a72343 	ldbu	r2,-25459(gp)
 200edfc:	10803fcc 	andi	r2,r2,255
 200ee00:	10800058 	cmpnei	r2,r2,1
 200ee04:	1000071e 	bne	r2,zero,200ee24 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 200ee08:	d0a73103 	ldbu	r2,-25404(gp)
 200ee0c:	10803fcc 	andi	r2,r2,255
 200ee10:	10803fe0 	cmpeqi	r2,r2,255
 200ee14:	1000031e 	bne	r2,zero,200ee24 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 200ee18:	d0a73103 	ldbu	r2,-25404(gp)
 200ee1c:	10800044 	addi	r2,r2,1
 200ee20:	d0a73105 	stb	r2,-25404(gp)
        }
    }
}
 200ee24:	0001883a 	nop
 200ee28:	e037883a 	mov	sp,fp
 200ee2c:	df000017 	ldw	fp,0(sp)
 200ee30:	dec00104 	addi	sp,sp,4
 200ee34:	f800283a 	ret

0200ee38 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 200ee38:	defffb04 	addi	sp,sp,-20
 200ee3c:	dfc00415 	stw	ra,16(sp)
 200ee40:	df000315 	stw	fp,12(sp)
 200ee44:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200ee48:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 200ee4c:	d0a72343 	ldbu	r2,-25459(gp)
 200ee50:	10803fcc 	andi	r2,r2,255
 200ee54:	10800058 	cmpnei	r2,r2,1
 200ee58:	10002f1e 	bne	r2,zero,200ef18 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ee5c:	0005303a 	rdctl	r2,status
 200ee60:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ee64:	e0ffff17 	ldw	r3,-4(fp)
 200ee68:	00bfff84 	movi	r2,-2
 200ee6c:	1884703a 	and	r2,r3,r2
 200ee70:	1001703a 	wrctl	status,r2
  
  return context;
 200ee74:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200ee78:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 200ee7c:	d0a73103 	ldbu	r2,-25404(gp)
 200ee80:	10803fcc 	andi	r2,r2,255
 200ee84:	10000326 	beq	r2,zero,200ee94 <OSIntExit+0x5c>
            OSIntNesting--;
 200ee88:	d0a73103 	ldbu	r2,-25404(gp)
 200ee8c:	10bfffc4 	addi	r2,r2,-1
 200ee90:	d0a73105 	stb	r2,-25404(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 200ee94:	d0a73103 	ldbu	r2,-25404(gp)
 200ee98:	10803fcc 	andi	r2,r2,255
 200ee9c:	10001a1e 	bne	r2,zero,200ef08 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 200eea0:	d0a72303 	ldbu	r2,-25460(gp)
 200eea4:	10803fcc 	andi	r2,r2,255
 200eea8:	1000171e 	bne	r2,zero,200ef08 <OSIntExit+0xd0>
                OS_SchedNew();
 200eeac:	200ff340 	call	200ff34 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 200eeb0:	d0e72503 	ldbu	r3,-25452(gp)
 200eeb4:	d0a72543 	ldbu	r2,-25451(gp)
 200eeb8:	18c03fcc 	andi	r3,r3,255
 200eebc:	10803fcc 	andi	r2,r2,255
 200eec0:	18801126 	beq	r3,r2,200ef08 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 200eec4:	d0a72503 	ldbu	r2,-25452(gp)
 200eec8:	10c03fcc 	andi	r3,r2,255
 200eecc:	008080b4 	movhi	r2,514
 200eed0:	1096b004 	addi	r2,r2,23232
 200eed4:	18c7883a 	add	r3,r3,r3
 200eed8:	18c7883a 	add	r3,r3,r3
 200eedc:	10c5883a 	add	r2,r2,r3
 200eee0:	10800017 	ldw	r2,0(r2)
 200eee4:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 200eee8:	d0a72d17 	ldw	r2,-25420(gp)
 200eeec:	10c00e17 	ldw	r3,56(r2)
 200eef0:	18c00044 	addi	r3,r3,1
 200eef4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 200eef8:	d0a72817 	ldw	r2,-25440(gp)
 200eefc:	10800044 	addi	r2,r2,1
 200ef00:	d0a72815 	stw	r2,-25440(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 200ef04:	20182280 	call	2018228 <OSCtxSw>
 200ef08:	e0bffd17 	ldw	r2,-12(fp)
 200ef0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ef10:	e0bffe17 	ldw	r2,-8(fp)
 200ef14:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 200ef18:	0001883a 	nop
 200ef1c:	e037883a 	mov	sp,fp
 200ef20:	dfc00117 	ldw	ra,4(sp)
 200ef24:	df000017 	ldw	fp,0(sp)
 200ef28:	dec00204 	addi	sp,sp,8
 200ef2c:	f800283a 	ret

0200ef30 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 200ef30:	defffc04 	addi	sp,sp,-16
 200ef34:	df000315 	stw	fp,12(sp)
 200ef38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200ef3c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 200ef40:	d0a72343 	ldbu	r2,-25459(gp)
 200ef44:	10803fcc 	andi	r2,r2,255
 200ef48:	10800058 	cmpnei	r2,r2,1
 200ef4c:	1000161e 	bne	r2,zero,200efa8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ef50:	0005303a 	rdctl	r2,status
 200ef54:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ef58:	e0ffff17 	ldw	r3,-4(fp)
 200ef5c:	00bfff84 	movi	r2,-2
 200ef60:	1884703a 	and	r2,r3,r2
 200ef64:	1001703a 	wrctl	status,r2
  
  return context;
 200ef68:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200ef6c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 200ef70:	d0a73103 	ldbu	r2,-25404(gp)
 200ef74:	10803fcc 	andi	r2,r2,255
 200ef78:	1000071e 	bne	r2,zero,200ef98 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 200ef7c:	d0a72303 	ldbu	r2,-25460(gp)
 200ef80:	10803fcc 	andi	r2,r2,255
 200ef84:	10803fe0 	cmpeqi	r2,r2,255
 200ef88:	1000031e 	bne	r2,zero,200ef98 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 200ef8c:	d0a72303 	ldbu	r2,-25460(gp)
 200ef90:	10800044 	addi	r2,r2,1
 200ef94:	d0a72305 	stb	r2,-25460(gp)
 200ef98:	e0bffd17 	ldw	r2,-12(fp)
 200ef9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200efa0:	e0bffe17 	ldw	r2,-8(fp)
 200efa4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 200efa8:	0001883a 	nop
 200efac:	e037883a 	mov	sp,fp
 200efb0:	df000017 	ldw	fp,0(sp)
 200efb4:	dec00104 	addi	sp,sp,4
 200efb8:	f800283a 	ret

0200efbc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 200efbc:	defff804 	addi	sp,sp,-32
 200efc0:	dfc00715 	stw	ra,28(sp)
 200efc4:	df000615 	stw	fp,24(sp)
 200efc8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200efcc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 200efd0:	d0a72343 	ldbu	r2,-25459(gp)
 200efd4:	10803fcc 	andi	r2,r2,255
 200efd8:	10800058 	cmpnei	r2,r2,1
 200efdc:	1000281e 	bne	r2,zero,200f080 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200efe0:	0005303a 	rdctl	r2,status
 200efe4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200efe8:	e0ffff17 	ldw	r3,-4(fp)
 200efec:	00bfff84 	movi	r2,-2
 200eff0:	1884703a 	and	r2,r3,r2
 200eff4:	1001703a 	wrctl	status,r2
  
  return context;
 200eff8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200effc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 200f000:	d0a72303 	ldbu	r2,-25460(gp)
 200f004:	10803fcc 	andi	r2,r2,255
 200f008:	10001926 	beq	r2,zero,200f070 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 200f00c:	d0a72303 	ldbu	r2,-25460(gp)
 200f010:	10bfffc4 	addi	r2,r2,-1
 200f014:	d0a72305 	stb	r2,-25460(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 200f018:	d0a72303 	ldbu	r2,-25460(gp)
 200f01c:	10803fcc 	andi	r2,r2,255
 200f020:	10000e1e 	bne	r2,zero,200f05c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 200f024:	d0a73103 	ldbu	r2,-25404(gp)
 200f028:	10803fcc 	andi	r2,r2,255
 200f02c:	1000061e 	bne	r2,zero,200f048 <OSSchedUnlock+0x8c>
 200f030:	e0bffa17 	ldw	r2,-24(fp)
 200f034:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f038:	e0bffb17 	ldw	r2,-20(fp)
 200f03c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 200f040:	200fe640 	call	200fe64 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 200f044:	00000e06 	br	200f080 <OSSchedUnlock+0xc4>
 200f048:	e0bffa17 	ldw	r2,-24(fp)
 200f04c:	e0bffc15 	stw	r2,-16(fp)
 200f050:	e0bffc17 	ldw	r2,-16(fp)
 200f054:	1001703a 	wrctl	status,r2
 200f058:	00000906 	br	200f080 <OSSchedUnlock+0xc4>
 200f05c:	e0bffa17 	ldw	r2,-24(fp)
 200f060:	e0bffd15 	stw	r2,-12(fp)
 200f064:	e0bffd17 	ldw	r2,-12(fp)
 200f068:	1001703a 	wrctl	status,r2
 200f06c:	00000406 	br	200f080 <OSSchedUnlock+0xc4>
 200f070:	e0bffa17 	ldw	r2,-24(fp)
 200f074:	e0bffe15 	stw	r2,-8(fp)
 200f078:	e0bffe17 	ldw	r2,-8(fp)
 200f07c:	1001703a 	wrctl	status,r2
 200f080:	0001883a 	nop
 200f084:	e037883a 	mov	sp,fp
 200f088:	dfc00117 	ldw	ra,4(sp)
 200f08c:	df000017 	ldw	fp,0(sp)
 200f090:	dec00204 	addi	sp,sp,8
 200f094:	f800283a 	ret

0200f098 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 200f098:	defffe04 	addi	sp,sp,-8
 200f09c:	dfc00115 	stw	ra,4(sp)
 200f0a0:	df000015 	stw	fp,0(sp)
 200f0a4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 200f0a8:	d0a72343 	ldbu	r2,-25459(gp)
 200f0ac:	10803fcc 	andi	r2,r2,255
 200f0b0:	10000f1e 	bne	r2,zero,200f0f0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 200f0b4:	200ff340 	call	200ff34 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 200f0b8:	d0a72503 	ldbu	r2,-25452(gp)
 200f0bc:	d0a72545 	stb	r2,-25451(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 200f0c0:	d0a72503 	ldbu	r2,-25452(gp)
 200f0c4:	10c03fcc 	andi	r3,r2,255
 200f0c8:	008080b4 	movhi	r2,514
 200f0cc:	1096b004 	addi	r2,r2,23232
 200f0d0:	18c7883a 	add	r3,r3,r3
 200f0d4:	18c7883a 	add	r3,r3,r3
 200f0d8:	10c5883a 	add	r2,r2,r3
 200f0dc:	10800017 	ldw	r2,0(r2)
 200f0e0:	d0a72d15 	stw	r2,-25420(gp)
        OSTCBCur      = OSTCBHighRdy;
 200f0e4:	d0a72d17 	ldw	r2,-25420(gp)
 200f0e8:	d0a73215 	stw	r2,-25400(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 200f0ec:	20182b40 	call	20182b4 <OSStartHighRdy>
    }
}
 200f0f0:	0001883a 	nop
 200f0f4:	e037883a 	mov	sp,fp
 200f0f8:	dfc00117 	ldw	ra,4(sp)
 200f0fc:	df000017 	ldw	fp,0(sp)
 200f100:	dec00204 	addi	sp,sp,8
 200f104:	f800283a 	ret

0200f108 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 200f108:	defff904 	addi	sp,sp,-28
 200f10c:	dfc00615 	stw	ra,24(sp)
 200f110:	df000515 	stw	fp,20(sp)
 200f114:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f118:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 200f11c:	01000084 	movi	r4,2
 200f120:	20162d40 	call	20162d4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f124:	0005303a 	rdctl	r2,status
 200f128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f12c:	e0fffc17 	ldw	r3,-16(fp)
 200f130:	00bfff84 	movi	r2,-2
 200f134:	1884703a 	and	r2,r3,r2
 200f138:	1001703a 	wrctl	status,r2
  
  return context;
 200f13c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 200f140:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 200f144:	d0272415 	stw	zero,-25456(gp)
 200f148:	e0bffb17 	ldw	r2,-20(fp)
 200f14c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f150:	e0bffd17 	ldw	r2,-12(fp)
 200f154:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 200f158:	01001904 	movi	r4,100
 200f15c:	20162d40 	call	20162d4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f160:	0005303a 	rdctl	r2,status
 200f164:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f168:	e0fffe17 	ldw	r3,-8(fp)
 200f16c:	00bfff84 	movi	r2,-2
 200f170:	1884703a 	and	r2,r3,r2
 200f174:	1001703a 	wrctl	status,r2
  
  return context;
 200f178:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 200f17c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 200f180:	d0a72417 	ldw	r2,-25456(gp)
 200f184:	d0a72915 	stw	r2,-25436(gp)
    OSStatRdy    = OS_TRUE;
 200f188:	00800044 	movi	r2,1
 200f18c:	d0a73505 	stb	r2,-25388(gp)
 200f190:	e0bffb17 	ldw	r2,-20(fp)
 200f194:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f198:	e0bfff17 	ldw	r2,-4(fp)
 200f19c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 200f1a0:	0001883a 	nop
 200f1a4:	e037883a 	mov	sp,fp
 200f1a8:	dfc00117 	ldw	ra,4(sp)
 200f1ac:	df000017 	ldw	fp,0(sp)
 200f1b0:	dec00204 	addi	sp,sp,8
 200f1b4:	f800283a 	ret

0200f1b8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 200f1b8:	defff704 	addi	sp,sp,-36
 200f1bc:	dfc00815 	stw	ra,32(sp)
 200f1c0:	df000715 	stw	fp,28(sp)
 200f1c4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200f1c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 200f1cc:	20184dc0 	call	20184dc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f1d0:	0005303a 	rdctl	r2,status
 200f1d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f1d8:	e0fffd17 	ldw	r3,-12(fp)
 200f1dc:	00bfff84 	movi	r2,-2
 200f1e0:	1884703a 	and	r2,r3,r2
 200f1e4:	1001703a 	wrctl	status,r2
  
  return context;
 200f1e8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 200f1ec:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 200f1f0:	d0a73317 	ldw	r2,-25396(gp)
 200f1f4:	10800044 	addi	r2,r2,1
 200f1f8:	d0a73315 	stw	r2,-25396(gp)
 200f1fc:	e0bffb17 	ldw	r2,-20(fp)
 200f200:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f204:	e0bfff17 	ldw	r2,-4(fp)
 200f208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 200f20c:	d0a72343 	ldbu	r2,-25459(gp)
 200f210:	10803fcc 	andi	r2,r2,255
 200f214:	10800058 	cmpnei	r2,r2,1
 200f218:	10006a1e 	bne	r2,zero,200f3c4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 200f21c:	d0a72703 	ldbu	r2,-25444(gp)
 200f220:	10803fcc 	andi	r2,r2,255
 200f224:	10c00060 	cmpeqi	r3,r2,1
 200f228:	1800061e 	bne	r3,zero,200f244 <OSTimeTick+0x8c>
 200f22c:	10c000a0 	cmpeqi	r3,r2,2
 200f230:	1800061e 	bne	r3,zero,200f24c <OSTimeTick+0x94>
 200f234:	10000a1e 	bne	r2,zero,200f260 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 200f238:	00800044 	movi	r2,1
 200f23c:	e0bffa05 	stb	r2,-24(fp)
                 break;
 200f240:	00000b06 	br	200f270 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 200f244:	e03ffa05 	stb	zero,-24(fp)
                 break;
 200f248:	00000906 	br	200f270 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 200f24c:	00800044 	movi	r2,1
 200f250:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 200f254:	00800044 	movi	r2,1
 200f258:	d0a72705 	stb	r2,-25444(gp)
                 break;
 200f25c:	00000406 	br	200f270 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 200f260:	00800044 	movi	r2,1
 200f264:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 200f268:	d0272705 	stb	zero,-25444(gp)
                 break;
 200f26c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 200f270:	e0bffa03 	ldbu	r2,-24(fp)
 200f274:	10005226 	beq	r2,zero,200f3c0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 200f278:	d0a72617 	ldw	r2,-25448(gp)
 200f27c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 200f280:	00004906 	br	200f3a8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f284:	0005303a 	rdctl	r2,status
 200f288:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f28c:	e0fffc17 	ldw	r3,-16(fp)
 200f290:	00bfff84 	movi	r2,-2
 200f294:	1884703a 	and	r2,r3,r2
 200f298:	1001703a 	wrctl	status,r2
  
  return context;
 200f29c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 200f2a0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 200f2a4:	e0bff917 	ldw	r2,-28(fp)
 200f2a8:	10800b8b 	ldhu	r2,46(r2)
 200f2ac:	10bfffcc 	andi	r2,r2,65535
 200f2b0:	10003626 	beq	r2,zero,200f38c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 200f2b4:	e0bff917 	ldw	r2,-28(fp)
 200f2b8:	10800b8b 	ldhu	r2,46(r2)
 200f2bc:	10bfffc4 	addi	r2,r2,-1
 200f2c0:	1007883a 	mov	r3,r2
 200f2c4:	e0bff917 	ldw	r2,-28(fp)
 200f2c8:	10c00b8d 	sth	r3,46(r2)
 200f2cc:	e0bff917 	ldw	r2,-28(fp)
 200f2d0:	10800b8b 	ldhu	r2,46(r2)
 200f2d4:	10bfffcc 	andi	r2,r2,65535
 200f2d8:	10002c1e 	bne	r2,zero,200f38c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 200f2dc:	e0bff917 	ldw	r2,-28(fp)
 200f2e0:	10800c03 	ldbu	r2,48(r2)
 200f2e4:	10803fcc 	andi	r2,r2,255
 200f2e8:	10800dcc 	andi	r2,r2,55
 200f2ec:	10000b26 	beq	r2,zero,200f31c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 200f2f0:	e0bff917 	ldw	r2,-28(fp)
 200f2f4:	10c00c03 	ldbu	r3,48(r2)
 200f2f8:	00bff204 	movi	r2,-56
 200f2fc:	1884703a 	and	r2,r3,r2
 200f300:	1007883a 	mov	r3,r2
 200f304:	e0bff917 	ldw	r2,-28(fp)
 200f308:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 200f30c:	e0bff917 	ldw	r2,-28(fp)
 200f310:	00c00044 	movi	r3,1
 200f314:	10c00c45 	stb	r3,49(r2)
 200f318:	00000206 	br	200f324 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 200f31c:	e0bff917 	ldw	r2,-28(fp)
 200f320:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 200f324:	e0bff917 	ldw	r2,-28(fp)
 200f328:	10800c03 	ldbu	r2,48(r2)
 200f32c:	10803fcc 	andi	r2,r2,255
 200f330:	1080020c 	andi	r2,r2,8
 200f334:	1000151e 	bne	r2,zero,200f38c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 200f338:	e0bff917 	ldw	r2,-28(fp)
 200f33c:	10c00d83 	ldbu	r3,54(r2)
 200f340:	d0a72f03 	ldbu	r2,-25412(gp)
 200f344:	1884b03a 	or	r2,r3,r2
 200f348:	d0a72f05 	stb	r2,-25412(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200f34c:	e0bff917 	ldw	r2,-28(fp)
 200f350:	10800d03 	ldbu	r2,52(r2)
 200f354:	10c03fcc 	andi	r3,r2,255
 200f358:	e0bff917 	ldw	r2,-28(fp)
 200f35c:	10800d03 	ldbu	r2,52(r2)
 200f360:	11003fcc 	andi	r4,r2,255
 200f364:	d0a72f44 	addi	r2,gp,-25411
 200f368:	2085883a 	add	r2,r4,r2
 200f36c:	11000003 	ldbu	r4,0(r2)
 200f370:	e0bff917 	ldw	r2,-28(fp)
 200f374:	10800d43 	ldbu	r2,53(r2)
 200f378:	2084b03a 	or	r2,r4,r2
 200f37c:	1009883a 	mov	r4,r2
 200f380:	d0a72f44 	addi	r2,gp,-25411
 200f384:	1885883a 	add	r2,r3,r2
 200f388:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 200f38c:	e0bff917 	ldw	r2,-28(fp)
 200f390:	10800517 	ldw	r2,20(r2)
 200f394:	e0bff915 	stw	r2,-28(fp)
 200f398:	e0bffb17 	ldw	r2,-20(fp)
 200f39c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f3a0:	e0bffe17 	ldw	r2,-8(fp)
 200f3a4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 200f3a8:	e0bff917 	ldw	r2,-28(fp)
 200f3ac:	10800c83 	ldbu	r2,50(r2)
 200f3b0:	10803fcc 	andi	r2,r2,255
 200f3b4:	10800518 	cmpnei	r2,r2,20
 200f3b8:	103fb21e 	bne	r2,zero,200f284 <OSTimeTick+0xcc>
 200f3bc:	00000106 	br	200f3c4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 200f3c0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 200f3c4:	e037883a 	mov	sp,fp
 200f3c8:	dfc00117 	ldw	ra,4(sp)
 200f3cc:	df000017 	ldw	fp,0(sp)
 200f3d0:	dec00204 	addi	sp,sp,8
 200f3d4:	f800283a 	ret

0200f3d8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 200f3d8:	deffff04 	addi	sp,sp,-4
 200f3dc:	df000015 	stw	fp,0(sp)
 200f3e0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 200f3e4:	00804784 	movi	r2,286
}
 200f3e8:	e037883a 	mov	sp,fp
 200f3ec:	df000017 	ldw	fp,0(sp)
 200f3f0:	dec00104 	addi	sp,sp,4
 200f3f4:	f800283a 	ret

0200f3f8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 200f3f8:	deffff04 	addi	sp,sp,-4
 200f3fc:	df000015 	stw	fp,0(sp)
 200f400:	d839883a 	mov	fp,sp
}
 200f404:	0001883a 	nop
 200f408:	e037883a 	mov	sp,fp
 200f40c:	df000017 	ldw	fp,0(sp)
 200f410:	dec00104 	addi	sp,sp,4
 200f414:	f800283a 	ret

0200f418 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 200f418:	defff804 	addi	sp,sp,-32
 200f41c:	dfc00715 	stw	ra,28(sp)
 200f420:	df000615 	stw	fp,24(sp)
 200f424:	df000604 	addi	fp,sp,24
 200f428:	e13ffc15 	stw	r4,-16(fp)
 200f42c:	e17ffd15 	stw	r5,-12(fp)
 200f430:	3007883a 	mov	r3,r6
 200f434:	3805883a 	mov	r2,r7
 200f438:	e0fffe05 	stb	r3,-8(fp)
 200f43c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 200f440:	e0bffc17 	ldw	r2,-16(fp)
 200f444:	10800283 	ldbu	r2,10(r2)
 200f448:	10c03fcc 	andi	r3,r2,255
 200f44c:	008080b4 	movhi	r2,514
 200f450:	10a3fc04 	addi	r2,r2,-28688
 200f454:	10c5883a 	add	r2,r2,r3
 200f458:	10800003 	ldbu	r2,0(r2)
 200f45c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 200f460:	e0bffa03 	ldbu	r2,-24(fp)
 200f464:	e0fffc17 	ldw	r3,-16(fp)
 200f468:	1885883a 	add	r2,r3,r2
 200f46c:	108002c4 	addi	r2,r2,11
 200f470:	10800003 	ldbu	r2,0(r2)
 200f474:	10c03fcc 	andi	r3,r2,255
 200f478:	008080b4 	movhi	r2,514
 200f47c:	10a3fc04 	addi	r2,r2,-28688
 200f480:	10c5883a 	add	r2,r2,r3
 200f484:	10800003 	ldbu	r2,0(r2)
 200f488:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 200f48c:	e0bffa03 	ldbu	r2,-24(fp)
 200f490:	100490fa 	slli	r2,r2,3
 200f494:	1007883a 	mov	r3,r2
 200f498:	e0bffa43 	ldbu	r2,-23(fp)
 200f49c:	1885883a 	add	r2,r3,r2
 200f4a0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 200f4a4:	e0fffa83 	ldbu	r3,-22(fp)
 200f4a8:	008080b4 	movhi	r2,514
 200f4ac:	1096b004 	addi	r2,r2,23232
 200f4b0:	18c7883a 	add	r3,r3,r3
 200f4b4:	18c7883a 	add	r3,r3,r3
 200f4b8:	10c5883a 	add	r2,r2,r3
 200f4bc:	10800017 	ldw	r2,0(r2)
 200f4c0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 200f4c4:	e0bffb17 	ldw	r2,-20(fp)
 200f4c8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 200f4cc:	e0bffb17 	ldw	r2,-20(fp)
 200f4d0:	e0fffd17 	ldw	r3,-12(fp)
 200f4d4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 200f4d8:	e0bffb17 	ldw	r2,-20(fp)
 200f4dc:	10800c03 	ldbu	r2,48(r2)
 200f4e0:	1007883a 	mov	r3,r2
 200f4e4:	e0bffe03 	ldbu	r2,-8(fp)
 200f4e8:	0084303a 	nor	r2,zero,r2
 200f4ec:	1884703a 	and	r2,r3,r2
 200f4f0:	1007883a 	mov	r3,r2
 200f4f4:	e0bffb17 	ldw	r2,-20(fp)
 200f4f8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 200f4fc:	e0bffb17 	ldw	r2,-20(fp)
 200f500:	e0ffff03 	ldbu	r3,-4(fp)
 200f504:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 200f508:	e0bffb17 	ldw	r2,-20(fp)
 200f50c:	10800c03 	ldbu	r2,48(r2)
 200f510:	10803fcc 	andi	r2,r2,255
 200f514:	1080020c 	andi	r2,r2,8
 200f518:	1000111e 	bne	r2,zero,200f560 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 200f51c:	e0bffb17 	ldw	r2,-20(fp)
 200f520:	10c00d83 	ldbu	r3,54(r2)
 200f524:	d0a72f03 	ldbu	r2,-25412(gp)
 200f528:	1884b03a 	or	r2,r3,r2
 200f52c:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 200f530:	e0fffa03 	ldbu	r3,-24(fp)
 200f534:	e13ffa03 	ldbu	r4,-24(fp)
 200f538:	d0a72f44 	addi	r2,gp,-25411
 200f53c:	2085883a 	add	r2,r4,r2
 200f540:	11000003 	ldbu	r4,0(r2)
 200f544:	e0bffb17 	ldw	r2,-20(fp)
 200f548:	10800d43 	ldbu	r2,53(r2)
 200f54c:	2084b03a 	or	r2,r4,r2
 200f550:	1009883a 	mov	r4,r2
 200f554:	d0a72f44 	addi	r2,gp,-25411
 200f558:	1885883a 	add	r2,r3,r2
 200f55c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 200f560:	e17ffc17 	ldw	r5,-16(fp)
 200f564:	e13ffb17 	ldw	r4,-20(fp)
 200f568:	200f8100 	call	200f810 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 200f56c:	e0bffb17 	ldw	r2,-20(fp)
 200f570:	10800817 	ldw	r2,32(r2)
 200f574:	10000826 	beq	r2,zero,200f598 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 200f578:	e0bffb17 	ldw	r2,-20(fp)
 200f57c:	10800817 	ldw	r2,32(r2)
 200f580:	100b883a 	mov	r5,r2
 200f584:	e13ffb17 	ldw	r4,-20(fp)
 200f588:	200f8c80 	call	200f8c8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 200f58c:	e0bffb17 	ldw	r2,-20(fp)
 200f590:	e0fffc17 	ldw	r3,-16(fp)
 200f594:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 200f598:	e0bffa83 	ldbu	r2,-22(fp)
}
 200f59c:	e037883a 	mov	sp,fp
 200f5a0:	dfc00117 	ldw	ra,4(sp)
 200f5a4:	df000017 	ldw	fp,0(sp)
 200f5a8:	dec00204 	addi	sp,sp,8
 200f5ac:	f800283a 	ret

0200f5b0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 200f5b0:	defffd04 	addi	sp,sp,-12
 200f5b4:	df000215 	stw	fp,8(sp)
 200f5b8:	df000204 	addi	fp,sp,8
 200f5bc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 200f5c0:	d0a73217 	ldw	r2,-25400(gp)
 200f5c4:	e0ffff17 	ldw	r3,-4(fp)
 200f5c8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 200f5cc:	d0a73217 	ldw	r2,-25400(gp)
 200f5d0:	10800d03 	ldbu	r2,52(r2)
 200f5d4:	10803fcc 	andi	r2,r2,255
 200f5d8:	d0e73217 	ldw	r3,-25400(gp)
 200f5dc:	18c00d03 	ldbu	r3,52(r3)
 200f5e0:	18c03fcc 	andi	r3,r3,255
 200f5e4:	e13fff17 	ldw	r4,-4(fp)
 200f5e8:	20c7883a 	add	r3,r4,r3
 200f5ec:	18c002c4 	addi	r3,r3,11
 200f5f0:	19000003 	ldbu	r4,0(r3)
 200f5f4:	d0e73217 	ldw	r3,-25400(gp)
 200f5f8:	18c00d43 	ldbu	r3,53(r3)
 200f5fc:	20c6b03a 	or	r3,r4,r3
 200f600:	1809883a 	mov	r4,r3
 200f604:	e0ffff17 	ldw	r3,-4(fp)
 200f608:	1885883a 	add	r2,r3,r2
 200f60c:	108002c4 	addi	r2,r2,11
 200f610:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 200f614:	e0bfff17 	ldw	r2,-4(fp)
 200f618:	10c00283 	ldbu	r3,10(r2)
 200f61c:	d0a73217 	ldw	r2,-25400(gp)
 200f620:	10800d83 	ldbu	r2,54(r2)
 200f624:	1884b03a 	or	r2,r3,r2
 200f628:	1007883a 	mov	r3,r2
 200f62c:	e0bfff17 	ldw	r2,-4(fp)
 200f630:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 200f634:	d0a73217 	ldw	r2,-25400(gp)
 200f638:	10800d03 	ldbu	r2,52(r2)
 200f63c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 200f640:	e0fffe03 	ldbu	r3,-8(fp)
 200f644:	e13ffe03 	ldbu	r4,-8(fp)
 200f648:	d0a72f44 	addi	r2,gp,-25411
 200f64c:	2085883a 	add	r2,r4,r2
 200f650:	10800003 	ldbu	r2,0(r2)
 200f654:	1009883a 	mov	r4,r2
 200f658:	d0a73217 	ldw	r2,-25400(gp)
 200f65c:	10800d43 	ldbu	r2,53(r2)
 200f660:	0084303a 	nor	r2,zero,r2
 200f664:	2084703a 	and	r2,r4,r2
 200f668:	1009883a 	mov	r4,r2
 200f66c:	d0a72f44 	addi	r2,gp,-25411
 200f670:	1885883a 	add	r2,r3,r2
 200f674:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 200f678:	e0fffe03 	ldbu	r3,-8(fp)
 200f67c:	d0a72f44 	addi	r2,gp,-25411
 200f680:	1885883a 	add	r2,r3,r2
 200f684:	10800003 	ldbu	r2,0(r2)
 200f688:	10803fcc 	andi	r2,r2,255
 200f68c:	1000071e 	bne	r2,zero,200f6ac <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 200f690:	d0a73217 	ldw	r2,-25400(gp)
 200f694:	10800d83 	ldbu	r2,54(r2)
 200f698:	0084303a 	nor	r2,zero,r2
 200f69c:	1007883a 	mov	r3,r2
 200f6a0:	d0a72f03 	ldbu	r2,-25412(gp)
 200f6a4:	1884703a 	and	r2,r3,r2
 200f6a8:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 200f6ac:	0001883a 	nop
 200f6b0:	e037883a 	mov	sp,fp
 200f6b4:	df000017 	ldw	fp,0(sp)
 200f6b8:	dec00104 	addi	sp,sp,4
 200f6bc:	f800283a 	ret

0200f6c0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 200f6c0:	defffb04 	addi	sp,sp,-20
 200f6c4:	df000415 	stw	fp,16(sp)
 200f6c8:	df000404 	addi	fp,sp,16
 200f6cc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 200f6d0:	d0a73217 	ldw	r2,-25400(gp)
 200f6d4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 200f6d8:	d0a73217 	ldw	r2,-25400(gp)
 200f6dc:	e0ffff17 	ldw	r3,-4(fp)
 200f6e0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 200f6e4:	e0bfff17 	ldw	r2,-4(fp)
 200f6e8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 200f6ec:	e0bffc17 	ldw	r2,-16(fp)
 200f6f0:	10800017 	ldw	r2,0(r2)
 200f6f4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 200f6f8:	00002006 	br	200f77c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 200f6fc:	d0a73217 	ldw	r2,-25400(gp)
 200f700:	10800d03 	ldbu	r2,52(r2)
 200f704:	10803fcc 	andi	r2,r2,255
 200f708:	d0e73217 	ldw	r3,-25400(gp)
 200f70c:	18c00d03 	ldbu	r3,52(r3)
 200f710:	18c03fcc 	andi	r3,r3,255
 200f714:	e13ffd17 	ldw	r4,-12(fp)
 200f718:	20c7883a 	add	r3,r4,r3
 200f71c:	18c002c4 	addi	r3,r3,11
 200f720:	19000003 	ldbu	r4,0(r3)
 200f724:	d0e73217 	ldw	r3,-25400(gp)
 200f728:	18c00d43 	ldbu	r3,53(r3)
 200f72c:	20c6b03a 	or	r3,r4,r3
 200f730:	1809883a 	mov	r4,r3
 200f734:	e0fffd17 	ldw	r3,-12(fp)
 200f738:	1885883a 	add	r2,r3,r2
 200f73c:	108002c4 	addi	r2,r2,11
 200f740:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 200f744:	e0bffd17 	ldw	r2,-12(fp)
 200f748:	10c00283 	ldbu	r3,10(r2)
 200f74c:	d0a73217 	ldw	r2,-25400(gp)
 200f750:	10800d83 	ldbu	r2,54(r2)
 200f754:	1884b03a 	or	r2,r3,r2
 200f758:	1007883a 	mov	r3,r2
 200f75c:	e0bffd17 	ldw	r2,-12(fp)
 200f760:	10c00285 	stb	r3,10(r2)
        pevents++;
 200f764:	e0bffc17 	ldw	r2,-16(fp)
 200f768:	10800104 	addi	r2,r2,4
 200f76c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 200f770:	e0bffc17 	ldw	r2,-16(fp)
 200f774:	10800017 	ldw	r2,0(r2)
 200f778:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 200f77c:	e0bffd17 	ldw	r2,-12(fp)
 200f780:	103fde1e 	bne	r2,zero,200f6fc <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 200f784:	d0a73217 	ldw	r2,-25400(gp)
 200f788:	10800d03 	ldbu	r2,52(r2)
 200f78c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 200f790:	e0fffe03 	ldbu	r3,-8(fp)
 200f794:	e13ffe03 	ldbu	r4,-8(fp)
 200f798:	d0a72f44 	addi	r2,gp,-25411
 200f79c:	2085883a 	add	r2,r4,r2
 200f7a0:	10800003 	ldbu	r2,0(r2)
 200f7a4:	1009883a 	mov	r4,r2
 200f7a8:	d0a73217 	ldw	r2,-25400(gp)
 200f7ac:	10800d43 	ldbu	r2,53(r2)
 200f7b0:	0084303a 	nor	r2,zero,r2
 200f7b4:	2084703a 	and	r2,r4,r2
 200f7b8:	1009883a 	mov	r4,r2
 200f7bc:	d0a72f44 	addi	r2,gp,-25411
 200f7c0:	1885883a 	add	r2,r3,r2
 200f7c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 200f7c8:	e0fffe03 	ldbu	r3,-8(fp)
 200f7cc:	d0a72f44 	addi	r2,gp,-25411
 200f7d0:	1885883a 	add	r2,r3,r2
 200f7d4:	10800003 	ldbu	r2,0(r2)
 200f7d8:	10803fcc 	andi	r2,r2,255
 200f7dc:	1000071e 	bne	r2,zero,200f7fc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 200f7e0:	d0a73217 	ldw	r2,-25400(gp)
 200f7e4:	10800d83 	ldbu	r2,54(r2)
 200f7e8:	0084303a 	nor	r2,zero,r2
 200f7ec:	1007883a 	mov	r3,r2
 200f7f0:	d0a72f03 	ldbu	r2,-25412(gp)
 200f7f4:	1884703a 	and	r2,r3,r2
 200f7f8:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 200f7fc:	0001883a 	nop
 200f800:	e037883a 	mov	sp,fp
 200f804:	df000017 	ldw	fp,0(sp)
 200f808:	dec00104 	addi	sp,sp,4
 200f80c:	f800283a 	ret

0200f810 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 200f810:	defffc04 	addi	sp,sp,-16
 200f814:	df000315 	stw	fp,12(sp)
 200f818:	df000304 	addi	fp,sp,12
 200f81c:	e13ffe15 	stw	r4,-8(fp)
 200f820:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 200f824:	e0bffe17 	ldw	r2,-8(fp)
 200f828:	10800d03 	ldbu	r2,52(r2)
 200f82c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 200f830:	e0bffd03 	ldbu	r2,-12(fp)
 200f834:	e0fffd03 	ldbu	r3,-12(fp)
 200f838:	e13fff17 	ldw	r4,-4(fp)
 200f83c:	20c7883a 	add	r3,r4,r3
 200f840:	18c002c4 	addi	r3,r3,11
 200f844:	18c00003 	ldbu	r3,0(r3)
 200f848:	1809883a 	mov	r4,r3
 200f84c:	e0fffe17 	ldw	r3,-8(fp)
 200f850:	18c00d43 	ldbu	r3,53(r3)
 200f854:	00c6303a 	nor	r3,zero,r3
 200f858:	20c6703a 	and	r3,r4,r3
 200f85c:	1809883a 	mov	r4,r3
 200f860:	e0ffff17 	ldw	r3,-4(fp)
 200f864:	1885883a 	add	r2,r3,r2
 200f868:	108002c4 	addi	r2,r2,11
 200f86c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 200f870:	e0bffd03 	ldbu	r2,-12(fp)
 200f874:	e0ffff17 	ldw	r3,-4(fp)
 200f878:	1885883a 	add	r2,r3,r2
 200f87c:	108002c4 	addi	r2,r2,11
 200f880:	10800003 	ldbu	r2,0(r2)
 200f884:	10803fcc 	andi	r2,r2,255
 200f888:	10000a1e 	bne	r2,zero,200f8b4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 200f88c:	e0bfff17 	ldw	r2,-4(fp)
 200f890:	10800283 	ldbu	r2,10(r2)
 200f894:	1007883a 	mov	r3,r2
 200f898:	e0bffe17 	ldw	r2,-8(fp)
 200f89c:	10800d83 	ldbu	r2,54(r2)
 200f8a0:	0084303a 	nor	r2,zero,r2
 200f8a4:	1884703a 	and	r2,r3,r2
 200f8a8:	1007883a 	mov	r3,r2
 200f8ac:	e0bfff17 	ldw	r2,-4(fp)
 200f8b0:	10c00285 	stb	r3,10(r2)
    }
}
 200f8b4:	0001883a 	nop
 200f8b8:	e037883a 	mov	sp,fp
 200f8bc:	df000017 	ldw	fp,0(sp)
 200f8c0:	dec00104 	addi	sp,sp,4
 200f8c4:	f800283a 	ret

0200f8c8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 200f8c8:	defffa04 	addi	sp,sp,-24
 200f8cc:	df000515 	stw	fp,20(sp)
 200f8d0:	df000504 	addi	fp,sp,20
 200f8d4:	e13ffe15 	stw	r4,-8(fp)
 200f8d8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 200f8dc:	e0bffe17 	ldw	r2,-8(fp)
 200f8e0:	10800d03 	ldbu	r2,52(r2)
 200f8e4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 200f8e8:	e0bffe17 	ldw	r2,-8(fp)
 200f8ec:	10800d83 	ldbu	r2,54(r2)
 200f8f0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 200f8f4:	e0bffe17 	ldw	r2,-8(fp)
 200f8f8:	10800d43 	ldbu	r2,53(r2)
 200f8fc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 200f900:	e0bfff17 	ldw	r2,-4(fp)
 200f904:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 200f908:	e0bffb17 	ldw	r2,-20(fp)
 200f90c:	10800017 	ldw	r2,0(r2)
 200f910:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 200f914:	00002506 	br	200f9ac <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 200f918:	e0bffd03 	ldbu	r2,-12(fp)
 200f91c:	e0fffd03 	ldbu	r3,-12(fp)
 200f920:	e13ffc17 	ldw	r4,-16(fp)
 200f924:	20c7883a 	add	r3,r4,r3
 200f928:	18c002c4 	addi	r3,r3,11
 200f92c:	18c00003 	ldbu	r3,0(r3)
 200f930:	1809883a 	mov	r4,r3
 200f934:	e0fffd83 	ldbu	r3,-10(fp)
 200f938:	00c6303a 	nor	r3,zero,r3
 200f93c:	20c6703a 	and	r3,r4,r3
 200f940:	1809883a 	mov	r4,r3
 200f944:	e0fffc17 	ldw	r3,-16(fp)
 200f948:	1885883a 	add	r2,r3,r2
 200f94c:	108002c4 	addi	r2,r2,11
 200f950:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 200f954:	e0bffd03 	ldbu	r2,-12(fp)
 200f958:	e0fffc17 	ldw	r3,-16(fp)
 200f95c:	1885883a 	add	r2,r3,r2
 200f960:	108002c4 	addi	r2,r2,11
 200f964:	10800003 	ldbu	r2,0(r2)
 200f968:	10803fcc 	andi	r2,r2,255
 200f96c:	1000091e 	bne	r2,zero,200f994 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 200f970:	e0bffc17 	ldw	r2,-16(fp)
 200f974:	10800283 	ldbu	r2,10(r2)
 200f978:	1007883a 	mov	r3,r2
 200f97c:	e0bffd43 	ldbu	r2,-11(fp)
 200f980:	0084303a 	nor	r2,zero,r2
 200f984:	1884703a 	and	r2,r3,r2
 200f988:	1007883a 	mov	r3,r2
 200f98c:	e0bffc17 	ldw	r2,-16(fp)
 200f990:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 200f994:	e0bffb17 	ldw	r2,-20(fp)
 200f998:	10800104 	addi	r2,r2,4
 200f99c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 200f9a0:	e0bffb17 	ldw	r2,-20(fp)
 200f9a4:	10800017 	ldw	r2,0(r2)
 200f9a8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 200f9ac:	e0bffc17 	ldw	r2,-16(fp)
 200f9b0:	103fd91e 	bne	r2,zero,200f918 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 200f9b4:	0001883a 	nop
 200f9b8:	e037883a 	mov	sp,fp
 200f9bc:	df000017 	ldw	fp,0(sp)
 200f9c0:	dec00104 	addi	sp,sp,4
 200f9c4:	f800283a 	ret

0200f9c8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 200f9c8:	defffc04 	addi	sp,sp,-16
 200f9cc:	df000315 	stw	fp,12(sp)
 200f9d0:	df000304 	addi	fp,sp,12
 200f9d4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 200f9d8:	e0bfff17 	ldw	r2,-4(fp)
 200f9dc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 200f9e0:	e0bfff17 	ldw	r2,-4(fp)
 200f9e4:	108002c4 	addi	r2,r2,11
 200f9e8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200f9ec:	e03ffe05 	stb	zero,-8(fp)
 200f9f0:	00000706 	br	200fa10 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 200f9f4:	e0bffd17 	ldw	r2,-12(fp)
 200f9f8:	10c00044 	addi	r3,r2,1
 200f9fc:	e0fffd15 	stw	r3,-12(fp)
 200fa00:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200fa04:	e0bffe03 	ldbu	r2,-8(fp)
 200fa08:	10800044 	addi	r2,r2,1
 200fa0c:	e0bffe05 	stb	r2,-8(fp)
 200fa10:	e0bffe03 	ldbu	r2,-8(fp)
 200fa14:	108000f0 	cmpltui	r2,r2,3
 200fa18:	103ff61e 	bne	r2,zero,200f9f4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 200fa1c:	0001883a 	nop
 200fa20:	e037883a 	mov	sp,fp
 200fa24:	df000017 	ldw	fp,0(sp)
 200fa28:	dec00104 	addi	sp,sp,4
 200fa2c:	f800283a 	ret

0200fa30 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 200fa30:	defffb04 	addi	sp,sp,-20
 200fa34:	dfc00415 	stw	ra,16(sp)
 200fa38:	df000315 	stw	fp,12(sp)
 200fa3c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 200fa40:	0142d004 	movi	r5,2880
 200fa44:	010080b4 	movhi	r4,514
 200fa48:	21129c04 	addi	r4,r4,19056
 200fa4c:	200fda80 	call	200fda8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 200fa50:	008080b4 	movhi	r2,514
 200fa54:	10929c04 	addi	r2,r2,19056
 200fa58:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 200fa5c:	008080b4 	movhi	r2,514
 200fa60:	1092a804 	addi	r2,r2,19104
 200fa64:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 200fa68:	e03ffd0d 	sth	zero,-12(fp)
 200fa6c:	00001306 	br	200fabc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 200fa70:	e0bffe17 	ldw	r2,-8(fp)
 200fa74:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 200fa78:	e0bffe17 	ldw	r2,-8(fp)
 200fa7c:	e0ffff17 	ldw	r3,-4(fp)
 200fa80:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 200fa84:	e0bffe17 	ldw	r2,-8(fp)
 200fa88:	00c00fc4 	movi	r3,63
 200fa8c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 200fa90:	e0bffe17 	ldw	r2,-8(fp)
 200fa94:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 200fa98:	e0bffe17 	ldw	r2,-8(fp)
 200fa9c:	10800c04 	addi	r2,r2,48
 200faa0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 200faa4:	e0bfff17 	ldw	r2,-4(fp)
 200faa8:	10800c04 	addi	r2,r2,48
 200faac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 200fab0:	e0bffd0b 	ldhu	r2,-12(fp)
 200fab4:	10800044 	addi	r2,r2,1
 200fab8:	e0bffd0d 	sth	r2,-12(fp)
 200fabc:	e0bffd0b 	ldhu	r2,-12(fp)
 200fac0:	10800ef0 	cmpltui	r2,r2,59
 200fac4:	103fea1e 	bne	r2,zero,200fa70 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 200fac8:	e0bffe17 	ldw	r2,-8(fp)
 200facc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 200fad0:	e0bffe17 	ldw	r2,-8(fp)
 200fad4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 200fad8:	e0bffe17 	ldw	r2,-8(fp)
 200fadc:	00c00fc4 	movi	r3,63
 200fae0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 200fae4:	e0bffe17 	ldw	r2,-8(fp)
 200fae8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 200faec:	008080b4 	movhi	r2,514
 200faf0:	10929c04 	addi	r2,r2,19056
 200faf4:	d0a73015 	stw	r2,-25408(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 200faf8:	0001883a 	nop
 200fafc:	e037883a 	mov	sp,fp
 200fb00:	dfc00117 	ldw	ra,4(sp)
 200fb04:	df000017 	ldw	fp,0(sp)
 200fb08:	dec00204 	addi	sp,sp,8
 200fb0c:	f800283a 	ret

0200fb10 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 200fb10:	deffff04 	addi	sp,sp,-4
 200fb14:	df000015 	stw	fp,0(sp)
 200fb18:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 200fb1c:	d0273315 	stw	zero,-25396(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 200fb20:	d0273105 	stb	zero,-25404(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 200fb24:	d0272305 	stb	zero,-25460(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 200fb28:	d0272b45 	stb	zero,-25427(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 200fb2c:	d0272345 	stb	zero,-25459(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 200fb30:	d0272815 	stw	zero,-25440(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 200fb34:	d0272415 	stw	zero,-25456(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 200fb38:	d0273615 	stw	zero,-25384(gp)
    OSIdleCtrMax  = 0L;
 200fb3c:	d0272915 	stw	zero,-25436(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 200fb40:	d0273505 	stb	zero,-25388(gp)
#endif
}
 200fb44:	0001883a 	nop
 200fb48:	e037883a 	mov	sp,fp
 200fb4c:	df000017 	ldw	fp,0(sp)
 200fb50:	dec00104 	addi	sp,sp,4
 200fb54:	f800283a 	ret

0200fb58 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 200fb58:	defffd04 	addi	sp,sp,-12
 200fb5c:	df000215 	stw	fp,8(sp)
 200fb60:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 200fb64:	d0272f05 	stb	zero,-25412(gp)
    prdytbl       = &OSRdyTbl[0];
 200fb68:	d0a72f44 	addi	r2,gp,-25411
 200fb6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 200fb70:	e03ffe05 	stb	zero,-8(fp)
 200fb74:	00000706 	br	200fb94 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 200fb78:	e0bfff17 	ldw	r2,-4(fp)
 200fb7c:	10c00044 	addi	r3,r2,1
 200fb80:	e0ffff15 	stw	r3,-4(fp)
 200fb84:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 200fb88:	e0bffe03 	ldbu	r2,-8(fp)
 200fb8c:	10800044 	addi	r2,r2,1
 200fb90:	e0bffe05 	stb	r2,-8(fp)
 200fb94:	e0bffe03 	ldbu	r2,-8(fp)
 200fb98:	108000f0 	cmpltui	r2,r2,3
 200fb9c:	103ff61e 	bne	r2,zero,200fb78 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 200fba0:	d0272545 	stb	zero,-25451(gp)
    OSPrioHighRdy = 0;
 200fba4:	d0272505 	stb	zero,-25452(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 200fba8:	d0272d15 	stw	zero,-25420(gp)
    OSTCBCur      = (OS_TCB *)0;
 200fbac:	d0273215 	stw	zero,-25400(gp)
}
 200fbb0:	0001883a 	nop
 200fbb4:	e037883a 	mov	sp,fp
 200fbb8:	df000017 	ldw	fp,0(sp)
 200fbbc:	dec00104 	addi	sp,sp,4
 200fbc0:	f800283a 	ret

0200fbc4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 200fbc4:	defff804 	addi	sp,sp,-32
 200fbc8:	dfc00715 	stw	ra,28(sp)
 200fbcc:	df000615 	stw	fp,24(sp)
 200fbd0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 200fbd4:	008000c4 	movi	r2,3
 200fbd8:	d8800415 	stw	r2,16(sp)
 200fbdc:	d8000315 	stw	zero,12(sp)
 200fbe0:	00808004 	movi	r2,512
 200fbe4:	d8800215 	stw	r2,8(sp)
 200fbe8:	008080b4 	movhi	r2,514
 200fbec:	10909c04 	addi	r2,r2,17008
 200fbf0:	d8800115 	stw	r2,4(sp)
 200fbf4:	00bfffd4 	movui	r2,65535
 200fbf8:	d8800015 	stw	r2,0(sp)
 200fbfc:	01c00504 	movi	r7,20
 200fc00:	018080b4 	movhi	r6,514
 200fc04:	31929b04 	addi	r6,r6,19052
 200fc08:	000b883a 	mov	r5,zero
 200fc0c:	01008074 	movhi	r4,513
 200fc10:	21001c04 	addi	r4,r4,112
 200fc14:	20152040 	call	2015204 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 200fc18:	e1bfff04 	addi	r6,fp,-4
 200fc1c:	014080b4 	movhi	r5,514
 200fc20:	29643c04 	addi	r5,r5,-28432
 200fc24:	01000504 	movi	r4,20
 200fc28:	2015a140 	call	2015a14 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 200fc2c:	0001883a 	nop
 200fc30:	e037883a 	mov	sp,fp
 200fc34:	dfc00117 	ldw	ra,4(sp)
 200fc38:	df000017 	ldw	fp,0(sp)
 200fc3c:	dec00204 	addi	sp,sp,8
 200fc40:	f800283a 	ret

0200fc44 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 200fc44:	defff804 	addi	sp,sp,-32
 200fc48:	dfc00715 	stw	ra,28(sp)
 200fc4c:	df000615 	stw	fp,24(sp)
 200fc50:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 200fc54:	008000c4 	movi	r2,3
 200fc58:	d8800415 	stw	r2,16(sp)
 200fc5c:	d8000315 	stw	zero,12(sp)
 200fc60:	00808004 	movi	r2,512
 200fc64:	d8800215 	stw	r2,8(sp)
 200fc68:	008080b4 	movhi	r2,514
 200fc6c:	108e2404 	addi	r2,r2,14480
 200fc70:	d8800115 	stw	r2,4(sp)
 200fc74:	00bfff94 	movui	r2,65534
 200fc78:	d8800015 	stw	r2,0(sp)
 200fc7c:	01c004c4 	movi	r7,19
 200fc80:	018080b4 	movhi	r6,514
 200fc84:	31902304 	addi	r6,r6,16524
 200fc88:	000b883a 	mov	r5,zero
 200fc8c:	01008074 	movhi	r4,513
 200fc90:	21003304 	addi	r4,r4,204
 200fc94:	20152040 	call	2015204 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 200fc98:	e1bfff04 	addi	r6,fp,-4
 200fc9c:	014080b4 	movhi	r5,514
 200fca0:	29644004 	addi	r5,r5,-28416
 200fca4:	010004c4 	movi	r4,19
 200fca8:	2015a140 	call	2015a14 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 200fcac:	0001883a 	nop
 200fcb0:	e037883a 	mov	sp,fp
 200fcb4:	dfc00117 	ldw	ra,4(sp)
 200fcb8:	df000017 	ldw	fp,0(sp)
 200fcbc:	dec00204 	addi	sp,sp,8
 200fcc0:	f800283a 	ret

0200fcc4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 200fcc4:	defffb04 	addi	sp,sp,-20
 200fcc8:	dfc00415 	stw	ra,16(sp)
 200fccc:	df000315 	stw	fp,12(sp)
 200fcd0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 200fcd4:	01414404 	movi	r5,1296
 200fcd8:	010080b4 	movhi	r4,514
 200fcdc:	21156c04 	addi	r4,r4,21936
 200fce0:	200fda80 	call	200fda8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 200fce4:	01401504 	movi	r5,84
 200fce8:	010080b4 	movhi	r4,514
 200fcec:	2116b004 	addi	r4,r4,23232
 200fcf0:	200fda80 	call	200fda8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 200fcf4:	008080b4 	movhi	r2,514
 200fcf8:	10956c04 	addi	r2,r2,21936
 200fcfc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 200fd00:	008080b4 	movhi	r2,514
 200fd04:	10958704 	addi	r2,r2,22044
 200fd08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 200fd0c:	e03ffd05 	stb	zero,-12(fp)
 200fd10:	00001106 	br	200fd58 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 200fd14:	e0bffe17 	ldw	r2,-8(fp)
 200fd18:	e0ffff17 	ldw	r3,-4(fp)
 200fd1c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 200fd20:	e0bffe17 	ldw	r2,-8(fp)
 200fd24:	00c00fc4 	movi	r3,63
 200fd28:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 200fd2c:	e0bffe17 	ldw	r2,-8(fp)
 200fd30:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 200fd34:	e0bffe17 	ldw	r2,-8(fp)
 200fd38:	10801b04 	addi	r2,r2,108
 200fd3c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 200fd40:	e0bfff17 	ldw	r2,-4(fp)
 200fd44:	10801b04 	addi	r2,r2,108
 200fd48:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 200fd4c:	e0bffd03 	ldbu	r2,-12(fp)
 200fd50:	10800044 	addi	r2,r2,1
 200fd54:	e0bffd05 	stb	r2,-12(fp)
 200fd58:	e0bffd03 	ldbu	r2,-12(fp)
 200fd5c:	108002f0 	cmpltui	r2,r2,11
 200fd60:	103fec1e 	bne	r2,zero,200fd14 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 200fd64:	e0bffe17 	ldw	r2,-8(fp)
 200fd68:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 200fd6c:	e0bffe17 	ldw	r2,-8(fp)
 200fd70:	00c00fc4 	movi	r3,63
 200fd74:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 200fd78:	e0bffe17 	ldw	r2,-8(fp)
 200fd7c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 200fd80:	d0272615 	stw	zero,-25448(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 200fd84:	008080b4 	movhi	r2,514
 200fd88:	10956c04 	addi	r2,r2,21936
 200fd8c:	d0a72a15 	stw	r2,-25432(gp)
}
 200fd90:	0001883a 	nop
 200fd94:	e037883a 	mov	sp,fp
 200fd98:	dfc00117 	ldw	ra,4(sp)
 200fd9c:	df000017 	ldw	fp,0(sp)
 200fda0:	dec00204 	addi	sp,sp,8
 200fda4:	f800283a 	ret

0200fda8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 200fda8:	defffd04 	addi	sp,sp,-12
 200fdac:	df000215 	stw	fp,8(sp)
 200fdb0:	df000204 	addi	fp,sp,8
 200fdb4:	e13ffe15 	stw	r4,-8(fp)
 200fdb8:	2805883a 	mov	r2,r5
 200fdbc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 200fdc0:	00000706 	br	200fde0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 200fdc4:	e0bffe17 	ldw	r2,-8(fp)
 200fdc8:	10c00044 	addi	r3,r2,1
 200fdcc:	e0fffe15 	stw	r3,-8(fp)
 200fdd0:	10000005 	stb	zero,0(r2)
        size--;
 200fdd4:	e0bfff0b 	ldhu	r2,-4(fp)
 200fdd8:	10bfffc4 	addi	r2,r2,-1
 200fddc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 200fde0:	e0bfff0b 	ldhu	r2,-4(fp)
 200fde4:	103ff71e 	bne	r2,zero,200fdc4 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 200fde8:	0001883a 	nop
 200fdec:	e037883a 	mov	sp,fp
 200fdf0:	df000017 	ldw	fp,0(sp)
 200fdf4:	dec00104 	addi	sp,sp,4
 200fdf8:	f800283a 	ret

0200fdfc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 200fdfc:	defffc04 	addi	sp,sp,-16
 200fe00:	df000315 	stw	fp,12(sp)
 200fe04:	df000304 	addi	fp,sp,12
 200fe08:	e13ffd15 	stw	r4,-12(fp)
 200fe0c:	e17ffe15 	stw	r5,-8(fp)
 200fe10:	3005883a 	mov	r2,r6
 200fe14:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 200fe18:	00000b06 	br	200fe48 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 200fe1c:	e0bffd17 	ldw	r2,-12(fp)
 200fe20:	10c00044 	addi	r3,r2,1
 200fe24:	e0fffd15 	stw	r3,-12(fp)
 200fe28:	e0fffe17 	ldw	r3,-8(fp)
 200fe2c:	19000044 	addi	r4,r3,1
 200fe30:	e13ffe15 	stw	r4,-8(fp)
 200fe34:	18c00003 	ldbu	r3,0(r3)
 200fe38:	10c00005 	stb	r3,0(r2)
        size--;
 200fe3c:	e0bfff0b 	ldhu	r2,-4(fp)
 200fe40:	10bfffc4 	addi	r2,r2,-1
 200fe44:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 200fe48:	e0bfff0b 	ldhu	r2,-4(fp)
 200fe4c:	103ff31e 	bne	r2,zero,200fe1c <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 200fe50:	0001883a 	nop
 200fe54:	e037883a 	mov	sp,fp
 200fe58:	df000017 	ldw	fp,0(sp)
 200fe5c:	dec00104 	addi	sp,sp,4
 200fe60:	f800283a 	ret

0200fe64 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 200fe64:	defffb04 	addi	sp,sp,-20
 200fe68:	dfc00415 	stw	ra,16(sp)
 200fe6c:	df000315 	stw	fp,12(sp)
 200fe70:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200fe74:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fe78:	0005303a 	rdctl	r2,status
 200fe7c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fe80:	e0ffff17 	ldw	r3,-4(fp)
 200fe84:	00bfff84 	movi	r2,-2
 200fe88:	1884703a 	and	r2,r3,r2
 200fe8c:	1001703a 	wrctl	status,r2
  
  return context;
 200fe90:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 200fe94:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 200fe98:	d0a73103 	ldbu	r2,-25404(gp)
 200fe9c:	10803fcc 	andi	r2,r2,255
 200fea0:	10001a1e 	bne	r2,zero,200ff0c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 200fea4:	d0a72303 	ldbu	r2,-25460(gp)
 200fea8:	10803fcc 	andi	r2,r2,255
 200feac:	1000171e 	bne	r2,zero,200ff0c <OS_Sched+0xa8>
            OS_SchedNew();
 200feb0:	200ff340 	call	200ff34 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 200feb4:	d0e72503 	ldbu	r3,-25452(gp)
 200feb8:	d0a72543 	ldbu	r2,-25451(gp)
 200febc:	18c03fcc 	andi	r3,r3,255
 200fec0:	10803fcc 	andi	r2,r2,255
 200fec4:	18801126 	beq	r3,r2,200ff0c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 200fec8:	d0a72503 	ldbu	r2,-25452(gp)
 200fecc:	10c03fcc 	andi	r3,r2,255
 200fed0:	008080b4 	movhi	r2,514
 200fed4:	1096b004 	addi	r2,r2,23232
 200fed8:	18c7883a 	add	r3,r3,r3
 200fedc:	18c7883a 	add	r3,r3,r3
 200fee0:	10c5883a 	add	r2,r2,r3
 200fee4:	10800017 	ldw	r2,0(r2)
 200fee8:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 200feec:	d0a72d17 	ldw	r2,-25420(gp)
 200fef0:	10c00e17 	ldw	r3,56(r2)
 200fef4:	18c00044 	addi	r3,r3,1
 200fef8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 200fefc:	d0a72817 	ldw	r2,-25440(gp)
 200ff00:	10800044 	addi	r2,r2,1
 200ff04:	d0a72815 	stw	r2,-25440(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 200ff08:	20182280 	call	2018228 <OSCtxSw>
 200ff0c:	e0bffd17 	ldw	r2,-12(fp)
 200ff10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ff14:	e0bffe17 	ldw	r2,-8(fp)
 200ff18:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 200ff1c:	0001883a 	nop
 200ff20:	e037883a 	mov	sp,fp
 200ff24:	dfc00117 	ldw	ra,4(sp)
 200ff28:	df000017 	ldw	fp,0(sp)
 200ff2c:	dec00204 	addi	sp,sp,8
 200ff30:	f800283a 	ret

0200ff34 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 200ff34:	defffe04 	addi	sp,sp,-8
 200ff38:	df000115 	stw	fp,4(sp)
 200ff3c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 200ff40:	d0a72f03 	ldbu	r2,-25412(gp)
 200ff44:	10c03fcc 	andi	r3,r2,255
 200ff48:	008080b4 	movhi	r2,514
 200ff4c:	10a3fc04 	addi	r2,r2,-28688
 200ff50:	10c5883a 	add	r2,r2,r3
 200ff54:	10800003 	ldbu	r2,0(r2)
 200ff58:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 200ff5c:	e0bfff03 	ldbu	r2,-4(fp)
 200ff60:	100490fa 	slli	r2,r2,3
 200ff64:	1009883a 	mov	r4,r2
 200ff68:	e0ffff03 	ldbu	r3,-4(fp)
 200ff6c:	d0a72f44 	addi	r2,gp,-25411
 200ff70:	1885883a 	add	r2,r3,r2
 200ff74:	10800003 	ldbu	r2,0(r2)
 200ff78:	10c03fcc 	andi	r3,r2,255
 200ff7c:	008080b4 	movhi	r2,514
 200ff80:	10a3fc04 	addi	r2,r2,-28688
 200ff84:	10c5883a 	add	r2,r2,r3
 200ff88:	10800003 	ldbu	r2,0(r2)
 200ff8c:	2085883a 	add	r2,r4,r2
 200ff90:	d0a72505 	stb	r2,-25452(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 200ff94:	0001883a 	nop
 200ff98:	e037883a 	mov	sp,fp
 200ff9c:	df000017 	ldw	fp,0(sp)
 200ffa0:	dec00104 	addi	sp,sp,4
 200ffa4:	f800283a 	ret

0200ffa8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 200ffa8:	defffc04 	addi	sp,sp,-16
 200ffac:	df000315 	stw	fp,12(sp)
 200ffb0:	df000304 	addi	fp,sp,12
 200ffb4:	e13ffe15 	stw	r4,-8(fp)
 200ffb8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 200ffbc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 200ffc0:	00000b06 	br	200fff0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 200ffc4:	e0bffe17 	ldw	r2,-8(fp)
 200ffc8:	10c00044 	addi	r3,r2,1
 200ffcc:	e0fffe15 	stw	r3,-8(fp)
 200ffd0:	e0ffff17 	ldw	r3,-4(fp)
 200ffd4:	19000044 	addi	r4,r3,1
 200ffd8:	e13fff15 	stw	r4,-4(fp)
 200ffdc:	18c00003 	ldbu	r3,0(r3)
 200ffe0:	10c00005 	stb	r3,0(r2)
        len++;
 200ffe4:	e0bffd03 	ldbu	r2,-12(fp)
 200ffe8:	10800044 	addi	r2,r2,1
 200ffec:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 200fff0:	e0bfff17 	ldw	r2,-4(fp)
 200fff4:	10800003 	ldbu	r2,0(r2)
 200fff8:	10803fcc 	andi	r2,r2,255
 200fffc:	103ff11e 	bne	r2,zero,200ffc4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2010000:	e0bffe17 	ldw	r2,-8(fp)
 2010004:	10000005 	stb	zero,0(r2)
    return (len);
 2010008:	e0bffd03 	ldbu	r2,-12(fp)
}
 201000c:	e037883a 	mov	sp,fp
 2010010:	df000017 	ldw	fp,0(sp)
 2010014:	dec00104 	addi	sp,sp,4
 2010018:	f800283a 	ret

0201001c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 201001c:	defffd04 	addi	sp,sp,-12
 2010020:	df000215 	stw	fp,8(sp)
 2010024:	df000204 	addi	fp,sp,8
 2010028:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 201002c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2010030:	00000606 	br	201004c <OS_StrLen+0x30>
        psrc++;
 2010034:	e0bfff17 	ldw	r2,-4(fp)
 2010038:	10800044 	addi	r2,r2,1
 201003c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2010040:	e0bffe03 	ldbu	r2,-8(fp)
 2010044:	10800044 	addi	r2,r2,1
 2010048:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 201004c:	e0bfff17 	ldw	r2,-4(fp)
 2010050:	10800003 	ldbu	r2,0(r2)
 2010054:	10803fcc 	andi	r2,r2,255
 2010058:	103ff61e 	bne	r2,zero,2010034 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 201005c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2010060:	e037883a 	mov	sp,fp
 2010064:	df000017 	ldw	fp,0(sp)
 2010068:	dec00104 	addi	sp,sp,4
 201006c:	f800283a 	ret

02010070 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2010070:	defffa04 	addi	sp,sp,-24
 2010074:	dfc00515 	stw	ra,20(sp)
 2010078:	df000415 	stw	fp,16(sp)
 201007c:	df000404 	addi	fp,sp,16
 2010080:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010084:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010088:	0005303a 	rdctl	r2,status
 201008c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010090:	e0fffd17 	ldw	r3,-12(fp)
 2010094:	00bfff84 	movi	r2,-2
 2010098:	1884703a 	and	r2,r3,r2
 201009c:	1001703a 	wrctl	status,r2
  
  return context;
 20100a0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20100a4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 20100a8:	d0a72417 	ldw	r2,-25456(gp)
 20100ac:	10800044 	addi	r2,r2,1
 20100b0:	d0a72415 	stw	r2,-25456(gp)
 20100b4:	e0bffc17 	ldw	r2,-16(fp)
 20100b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20100bc:	e0bffe17 	ldw	r2,-8(fp)
 20100c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20100c4:	201853c0 	call	201853c <OSTaskIdleHook>
    }
 20100c8:	003fef06 	br	2010088 <OS_TaskIdle+0x18>

020100cc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20100cc:	defffa04 	addi	sp,sp,-24
 20100d0:	dfc00515 	stw	ra,20(sp)
 20100d4:	df000415 	stw	fp,16(sp)
 20100d8:	df000404 	addi	fp,sp,16
 20100dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20100e0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20100e4:	00000206 	br	20100f0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 20100e8:	01003204 	movi	r4,200
 20100ec:	20162d40 	call	20162d4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20100f0:	d0a73503 	ldbu	r2,-25388(gp)
 20100f4:	10803fcc 	andi	r2,r2,255
 20100f8:	103ffb26 	beq	r2,zero,20100e8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 20100fc:	d0a72917 	ldw	r2,-25436(gp)
 2010100:	01401904 	movi	r5,100
 2010104:	1009883a 	mov	r4,r2
 2010108:	200af000 	call	200af00 <__udivsi3>
 201010c:	d0a72915 	stw	r2,-25436(gp)
    if (OSIdleCtrMax == 0L) {
 2010110:	d0a72917 	ldw	r2,-25436(gp)
 2010114:	1000031e 	bne	r2,zero,2010124 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2010118:	d0272b05 	stb	zero,-25428(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 201011c:	01003fc4 	movi	r4,255
 2010120:	2015f5c0 	call	2015f5c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010124:	0005303a 	rdctl	r2,status
 2010128:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201012c:	e0fffd17 	ldw	r3,-12(fp)
 2010130:	00bfff84 	movi	r2,-2
 2010134:	1884703a 	and	r2,r3,r2
 2010138:	1001703a 	wrctl	status,r2
  
  return context;
 201013c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2010140:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2010144:	d0a72417 	ldw	r2,-25456(gp)
 2010148:	d0a73615 	stw	r2,-25384(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 201014c:	d0272415 	stw	zero,-25456(gp)
 2010150:	e0bffc17 	ldw	r2,-16(fp)
 2010154:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010158:	e0bffe17 	ldw	r2,-8(fp)
 201015c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2010160:	d0a73617 	ldw	r2,-25384(gp)
 2010164:	d0e72917 	ldw	r3,-25436(gp)
 2010168:	180b883a 	mov	r5,r3
 201016c:	1009883a 	mov	r4,r2
 2010170:	200af000 	call	200af00 <__udivsi3>
 2010174:	1007883a 	mov	r3,r2
 2010178:	00801904 	movi	r2,100
 201017c:	10c5c83a 	sub	r2,r2,r3
 2010180:	d0a72b05 	stb	r2,-25428(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2010184:	20184bc0 	call	20184bc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2010188:	20101980 	call	2010198 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 201018c:	01001904 	movi	r4,100
 2010190:	20162d40 	call	20162d4 <OSTimeDly>
    }
 2010194:	003fe306 	br	2010124 <OS_TaskStat+0x58>

02010198 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2010198:	defffa04 	addi	sp,sp,-24
 201019c:	dfc00515 	stw	ra,20(sp)
 20101a0:	df000415 	stw	fp,16(sp)
 20101a4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20101a8:	e03ffc05 	stb	zero,-16(fp)
 20101ac:	00002406 	br	2010240 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20101b0:	e0bffc03 	ldbu	r2,-16(fp)
 20101b4:	e0fffe04 	addi	r3,fp,-8
 20101b8:	180b883a 	mov	r5,r3
 20101bc:	1009883a 	mov	r4,r2
 20101c0:	2015d9c0 	call	2015d9c <OSTaskStkChk>
 20101c4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20101c8:	e0bffc43 	ldbu	r2,-15(fp)
 20101cc:	1000191e 	bne	r2,zero,2010234 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20101d0:	e0fffc03 	ldbu	r3,-16(fp)
 20101d4:	008080b4 	movhi	r2,514
 20101d8:	1096b004 	addi	r2,r2,23232
 20101dc:	18c7883a 	add	r3,r3,r3
 20101e0:	18c7883a 	add	r3,r3,r3
 20101e4:	10c5883a 	add	r2,r2,r3
 20101e8:	10800017 	ldw	r2,0(r2)
 20101ec:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 20101f0:	e0bffd17 	ldw	r2,-12(fp)
 20101f4:	10000f26 	beq	r2,zero,2010234 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 20101f8:	e0bffd17 	ldw	r2,-12(fp)
 20101fc:	10800060 	cmpeqi	r2,r2,1
 2010200:	10000c1e 	bne	r2,zero,2010234 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2010204:	e0bffd17 	ldw	r2,-12(fp)
 2010208:	10c00217 	ldw	r3,8(r2)
 201020c:	e0bffd17 	ldw	r2,-12(fp)
 2010210:	10800317 	ldw	r2,12(r2)
 2010214:	1085883a 	add	r2,r2,r2
 2010218:	1085883a 	add	r2,r2,r2
 201021c:	1887883a 	add	r3,r3,r2
 2010220:	e0bffd17 	ldw	r2,-12(fp)
 2010224:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2010228:	e0ffff17 	ldw	r3,-4(fp)
 201022c:	e0bffd17 	ldw	r2,-12(fp)
 2010230:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2010234:	e0bffc03 	ldbu	r2,-16(fp)
 2010238:	10800044 	addi	r2,r2,1
 201023c:	e0bffc05 	stb	r2,-16(fp)
 2010240:	e0bffc03 	ldbu	r2,-16(fp)
 2010244:	10800570 	cmpltui	r2,r2,21
 2010248:	103fd91e 	bne	r2,zero,20101b0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 201024c:	0001883a 	nop
 2010250:	e037883a 	mov	sp,fp
 2010254:	dfc00117 	ldw	ra,4(sp)
 2010258:	df000017 	ldw	fp,0(sp)
 201025c:	dec00204 	addi	sp,sp,8
 2010260:	f800283a 	ret

02010264 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2010264:	defff204 	addi	sp,sp,-56
 2010268:	dfc00d15 	stw	ra,52(sp)
 201026c:	df000c15 	stw	fp,48(sp)
 2010270:	df000c04 	addi	fp,sp,48
 2010274:	e17ffc15 	stw	r5,-16(fp)
 2010278:	e1bffd15 	stw	r6,-12(fp)
 201027c:	3807883a 	mov	r3,r7
 2010280:	e0800417 	ldw	r2,16(fp)
 2010284:	e13ffb05 	stb	r4,-20(fp)
 2010288:	e0fffe0d 	sth	r3,-8(fp)
 201028c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2010290:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010294:	0005303a 	rdctl	r2,status
 2010298:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201029c:	e0fffa17 	ldw	r3,-24(fp)
 20102a0:	00bfff84 	movi	r2,-2
 20102a4:	1884703a 	and	r2,r3,r2
 20102a8:	1001703a 	wrctl	status,r2
  
  return context;
 20102ac:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 20102b0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20102b4:	d0a72a17 	ldw	r2,-25432(gp)
 20102b8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 20102bc:	e0bff617 	ldw	r2,-40(fp)
 20102c0:	10009326 	beq	r2,zero,2010510 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 20102c4:	e0bff617 	ldw	r2,-40(fp)
 20102c8:	10800517 	ldw	r2,20(r2)
 20102cc:	d0a72a15 	stw	r2,-25432(gp)
 20102d0:	e0bff417 	ldw	r2,-48(fp)
 20102d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20102d8:	e0bff817 	ldw	r2,-32(fp)
 20102dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 20102e0:	e0bff617 	ldw	r2,-40(fp)
 20102e4:	e0fffc17 	ldw	r3,-16(fp)
 20102e8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 20102ec:	e0bff617 	ldw	r2,-40(fp)
 20102f0:	e0fffb03 	ldbu	r3,-20(fp)
 20102f4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 20102f8:	e0bff617 	ldw	r2,-40(fp)
 20102fc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2010300:	e0bff617 	ldw	r2,-40(fp)
 2010304:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2010308:	e0bff617 	ldw	r2,-40(fp)
 201030c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2010310:	e0bff617 	ldw	r2,-40(fp)
 2010314:	e0c00317 	ldw	r3,12(fp)
 2010318:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 201031c:	e0bff617 	ldw	r2,-40(fp)
 2010320:	e0c00217 	ldw	r3,8(fp)
 2010324:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2010328:	e0bff617 	ldw	r2,-40(fp)
 201032c:	e0fffd17 	ldw	r3,-12(fp)
 2010330:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2010334:	e0bff617 	ldw	r2,-40(fp)
 2010338:	e0ffff0b 	ldhu	r3,-4(fp)
 201033c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2010340:	e0bff617 	ldw	r2,-40(fp)
 2010344:	e0fffe0b 	ldhu	r3,-8(fp)
 2010348:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 201034c:	e0bff617 	ldw	r2,-40(fp)
 2010350:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2010354:	e0bffb03 	ldbu	r2,-20(fp)
 2010358:	1004d0fa 	srli	r2,r2,3
 201035c:	1007883a 	mov	r3,r2
 2010360:	e0bff617 	ldw	r2,-40(fp)
 2010364:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2010368:	e0bffb03 	ldbu	r2,-20(fp)
 201036c:	108001cc 	andi	r2,r2,7
 2010370:	1007883a 	mov	r3,r2
 2010374:	e0bff617 	ldw	r2,-40(fp)
 2010378:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 201037c:	e0bff617 	ldw	r2,-40(fp)
 2010380:	10800d03 	ldbu	r2,52(r2)
 2010384:	10803fcc 	andi	r2,r2,255
 2010388:	00c00044 	movi	r3,1
 201038c:	1884983a 	sll	r2,r3,r2
 2010390:	1007883a 	mov	r3,r2
 2010394:	e0bff617 	ldw	r2,-40(fp)
 2010398:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 201039c:	e0bff617 	ldw	r2,-40(fp)
 20103a0:	10800cc3 	ldbu	r2,51(r2)
 20103a4:	10803fcc 	andi	r2,r2,255
 20103a8:	00c00044 	movi	r3,1
 20103ac:	1884983a 	sll	r2,r3,r2
 20103b0:	1007883a 	mov	r3,r2
 20103b4:	e0bff617 	ldw	r2,-40(fp)
 20103b8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 20103bc:	e0bff617 	ldw	r2,-40(fp)
 20103c0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 20103c4:	e0bff617 	ldw	r2,-40(fp)
 20103c8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 20103cc:	e0bff617 	ldw	r2,-40(fp)
 20103d0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 20103d4:	e0bff617 	ldw	r2,-40(fp)
 20103d8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 20103dc:	e0bff617 	ldw	r2,-40(fp)
 20103e0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 20103e4:	e0bff617 	ldw	r2,-40(fp)
 20103e8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 20103ec:	e0bff617 	ldw	r2,-40(fp)
 20103f0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 20103f4:	e0bff617 	ldw	r2,-40(fp)
 20103f8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 20103fc:	e0bff617 	ldw	r2,-40(fp)
 2010400:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2010404:	e0bff617 	ldw	r2,-40(fp)
 2010408:	00c00fc4 	movi	r3,63
 201040c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2010410:	e0bff617 	ldw	r2,-40(fp)
 2010414:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2010418:	e13ff617 	ldw	r4,-40(fp)
 201041c:	201855c0 	call	201855c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2010420:	e13ff617 	ldw	r4,-40(fp)
 2010424:	20184540 	call	2018454 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010428:	0005303a 	rdctl	r2,status
 201042c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010430:	e0fff517 	ldw	r3,-44(fp)
 2010434:	00bfff84 	movi	r2,-2
 2010438:	1884703a 	and	r2,r3,r2
 201043c:	1001703a 	wrctl	status,r2
  
  return context;
 2010440:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2010444:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2010448:	e0fffb03 	ldbu	r3,-20(fp)
 201044c:	008080b4 	movhi	r2,514
 2010450:	1096b004 	addi	r2,r2,23232
 2010454:	18c7883a 	add	r3,r3,r3
 2010458:	18c7883a 	add	r3,r3,r3
 201045c:	10c5883a 	add	r2,r2,r3
 2010460:	e0fff617 	ldw	r3,-40(fp)
 2010464:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2010468:	d0e72617 	ldw	r3,-25448(gp)
 201046c:	e0bff617 	ldw	r2,-40(fp)
 2010470:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2010474:	e0bff617 	ldw	r2,-40(fp)
 2010478:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 201047c:	d0a72617 	ldw	r2,-25448(gp)
 2010480:	10000326 	beq	r2,zero,2010490 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2010484:	d0a72617 	ldw	r2,-25448(gp)
 2010488:	e0fff617 	ldw	r3,-40(fp)
 201048c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2010490:	e0bff617 	ldw	r2,-40(fp)
 2010494:	d0a72615 	stw	r2,-25448(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2010498:	e0bff617 	ldw	r2,-40(fp)
 201049c:	10c00d83 	ldbu	r3,54(r2)
 20104a0:	d0a72f03 	ldbu	r2,-25412(gp)
 20104a4:	1884b03a 	or	r2,r3,r2
 20104a8:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20104ac:	e0bff617 	ldw	r2,-40(fp)
 20104b0:	10800d03 	ldbu	r2,52(r2)
 20104b4:	10c03fcc 	andi	r3,r2,255
 20104b8:	e0bff617 	ldw	r2,-40(fp)
 20104bc:	10800d03 	ldbu	r2,52(r2)
 20104c0:	11003fcc 	andi	r4,r2,255
 20104c4:	d0a72f44 	addi	r2,gp,-25411
 20104c8:	2085883a 	add	r2,r4,r2
 20104cc:	11000003 	ldbu	r4,0(r2)
 20104d0:	e0bff617 	ldw	r2,-40(fp)
 20104d4:	10800d43 	ldbu	r2,53(r2)
 20104d8:	2084b03a 	or	r2,r4,r2
 20104dc:	1009883a 	mov	r4,r2
 20104e0:	d0a72f44 	addi	r2,gp,-25411
 20104e4:	1885883a 	add	r2,r3,r2
 20104e8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 20104ec:	d0a72b43 	ldbu	r2,-25427(gp)
 20104f0:	10800044 	addi	r2,r2,1
 20104f4:	d0a72b45 	stb	r2,-25427(gp)
 20104f8:	e0bff417 	ldw	r2,-48(fp)
 20104fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010500:	e0bff717 	ldw	r2,-36(fp)
 2010504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2010508:	0005883a 	mov	r2,zero
 201050c:	00000506 	br	2010524 <OS_TCBInit+0x2c0>
 2010510:	e0bff417 	ldw	r2,-48(fp)
 2010514:	e0bff915 	stw	r2,-28(fp)
 2010518:	e0bff917 	ldw	r2,-28(fp)
 201051c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2010520:	00801084 	movi	r2,66
}
 2010524:	e037883a 	mov	sp,fp
 2010528:	dfc00117 	ldw	ra,4(sp)
 201052c:	df000017 	ldw	fp,0(sp)
 2010530:	dec00204 	addi	sp,sp,8
 2010534:	f800283a 	ret

02010538 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2010538:	defffe04 	addi	sp,sp,-8
 201053c:	df000115 	stw	fp,4(sp)
 2010540:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2010544:	d0a00f04 	addi	r2,gp,-32708
 2010548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 201054c:	d0a01004 	addi	r2,gp,-32704
 2010550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2010554:	d0a01184 	addi	r2,gp,-32698
 2010558:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 201055c:	d0a01204 	addi	r2,gp,-32696
 2010560:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2010564:	d0a01104 	addi	r2,gp,-32700
 2010568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 201056c:	d0a01284 	addi	r2,gp,-32694
 2010570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2010574:	d0a01304 	addi	r2,gp,-32692
 2010578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 201057c:	d0a01384 	addi	r2,gp,-32690
 2010580:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2010584:	d0a01404 	addi	r2,gp,-32688
 2010588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 201058c:	d0a01484 	addi	r2,gp,-32686
 2010590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2010594:	d0a01504 	addi	r2,gp,-32684
 2010598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 201059c:	d0a01584 	addi	r2,gp,-32682
 20105a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20105a4:	d0a01604 	addi	r2,gp,-32680
 20105a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20105ac:	d0a01684 	addi	r2,gp,-32678
 20105b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20105b4:	d0a01704 	addi	r2,gp,-32676
 20105b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20105bc:	d0a01784 	addi	r2,gp,-32674
 20105c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20105c4:	d0a01804 	addi	r2,gp,-32672
 20105c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20105cc:	d0a01884 	addi	r2,gp,-32670
 20105d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 20105d4:	d0a01904 	addi	r2,gp,-32668
 20105d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 20105dc:	d0a01984 	addi	r2,gp,-32666
 20105e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 20105e4:	d0a01a04 	addi	r2,gp,-32664
 20105e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 20105ec:	d0a01a84 	addi	r2,gp,-32662
 20105f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 20105f4:	d0a01b04 	addi	r2,gp,-32660
 20105f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 20105fc:	d0a01b84 	addi	r2,gp,-32658
 2010600:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2010604:	d0a01c04 	addi	r2,gp,-32656
 2010608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 201060c:	d0a01c84 	addi	r2,gp,-32654
 2010610:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2010614:	d0a01d04 	addi	r2,gp,-32652
 2010618:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 201061c:	d0a01d84 	addi	r2,gp,-32650
 2010620:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2010624:	d0a01e04 	addi	r2,gp,-32648
 2010628:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 201062c:	d0a01e84 	addi	r2,gp,-32646
 2010630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2010634:	d0a01f04 	addi	r2,gp,-32644
 2010638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 201063c:	d0a01f84 	addi	r2,gp,-32642
 2010640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2010644:	d0a02004 	addi	r2,gp,-32640
 2010648:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 201064c:	d0a02084 	addi	r2,gp,-32638
 2010650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2010654:	d0a02104 	addi	r2,gp,-32636
 2010658:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 201065c:	d0a02184 	addi	r2,gp,-32634
 2010660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2010664:	d0a02204 	addi	r2,gp,-32632
 2010668:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 201066c:	d0a02284 	addi	r2,gp,-32630
 2010670:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2010674:	d0a02304 	addi	r2,gp,-32628
 2010678:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 201067c:	d0a02384 	addi	r2,gp,-32626
 2010680:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2010684:	d0a02404 	addi	r2,gp,-32624
 2010688:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 201068c:	d0a02484 	addi	r2,gp,-32622
 2010690:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2010694:	d0a02504 	addi	r2,gp,-32620
 2010698:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 201069c:	d0a02584 	addi	r2,gp,-32618
 20106a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20106a4:	d0a02604 	addi	r2,gp,-32616
 20106a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20106ac:	d0a02b04 	addi	r2,gp,-32596
 20106b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20106b4:	0001883a 	nop
 20106b8:	e037883a 	mov	sp,fp
 20106bc:	df000017 	ldw	fp,0(sp)
 20106c0:	dec00104 	addi	sp,sp,4
 20106c4:	f800283a 	ret

020106c8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20106c8:	defff204 	addi	sp,sp,-56
 20106cc:	df000d15 	stw	fp,52(sp)
 20106d0:	df000d04 	addi	fp,sp,52
 20106d4:	e13ffc15 	stw	r4,-16(fp)
 20106d8:	2807883a 	mov	r3,r5
 20106dc:	3005883a 	mov	r2,r6
 20106e0:	e1ffff15 	stw	r7,-4(fp)
 20106e4:	e0fffd0d 	sth	r3,-12(fp)
 20106e8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20106ec:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20106f0:	e0bfff17 	ldw	r2,-4(fp)
 20106f4:	1000021e 	bne	r2,zero,2010700 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 20106f8:	0005883a 	mov	r2,zero
 20106fc:	0000b006 	br	20109c0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2010700:	e0bffc17 	ldw	r2,-16(fp)
 2010704:	1000051e 	bne	r2,zero,201071c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010708:	e0bfff17 	ldw	r2,-4(fp)
 201070c:	00c01b84 	movi	r3,110
 2010710:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2010714:	0005883a 	mov	r2,zero
 2010718:	0000a906 	br	20109c0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201071c:	e0bffc17 	ldw	r2,-16(fp)
 2010720:	10800003 	ldbu	r2,0(r2)
 2010724:	10803fcc 	andi	r2,r2,255
 2010728:	10800160 	cmpeqi	r2,r2,5
 201072c:	1000051e 	bne	r2,zero,2010744 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2010730:	e0bfff17 	ldw	r2,-4(fp)
 2010734:	00c00044 	movi	r3,1
 2010738:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201073c:	0005883a 	mov	r2,zero
 2010740:	00009f06 	br	20109c0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2010744:	e0fffe03 	ldbu	r3,-8(fp)
 2010748:	00bfe004 	movi	r2,-128
 201074c:	1884703a 	and	r2,r3,r2
 2010750:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2010754:	e0bff503 	ldbu	r2,-44(fp)
 2010758:	10000626 	beq	r2,zero,2010774 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 201075c:	e0bffe03 	ldbu	r2,-8(fp)
 2010760:	10801fcc 	andi	r2,r2,127
 2010764:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2010768:	00800044 	movi	r2,1
 201076c:	e0bff385 	stb	r2,-50(fp)
 2010770:	00000106 	br	2010778 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2010774:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2010778:	e0bfff17 	ldw	r2,-4(fp)
 201077c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010780:	0005303a 	rdctl	r2,status
 2010784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010788:	e0fffb17 	ldw	r3,-20(fp)
 201078c:	00bfff84 	movi	r2,-2
 2010790:	1884703a 	and	r2,r3,r2
 2010794:	1001703a 	wrctl	status,r2
  
  return context;
 2010798:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 201079c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20107a0:	e0bffe03 	ldbu	r2,-8(fp)
 20107a4:	10c00060 	cmpeqi	r3,r2,1
 20107a8:	18005f1e 	bne	r3,zero,2010928 <OSFlagAccept+0x260>
 20107ac:	10c00088 	cmpgei	r3,r2,2
 20107b0:	1800021e 	bne	r3,zero,20107bc <OSFlagAccept+0xf4>
 20107b4:	10003f26 	beq	r2,zero,20108b4 <OSFlagAccept+0x1ec>
 20107b8:	00007706 	br	2010998 <OSFlagAccept+0x2d0>
 20107bc:	10c000a0 	cmpeqi	r3,r2,2
 20107c0:	1800031e 	bne	r3,zero,20107d0 <OSFlagAccept+0x108>
 20107c4:	108000e0 	cmpeqi	r2,r2,3
 20107c8:	10001e1e 	bne	r2,zero,2010844 <OSFlagAccept+0x17c>
 20107cc:	00007206 	br	2010998 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20107d0:	e0bffc17 	ldw	r2,-16(fp)
 20107d4:	10c0020b 	ldhu	r3,8(r2)
 20107d8:	e0bffd0b 	ldhu	r2,-12(fp)
 20107dc:	1884703a 	and	r2,r3,r2
 20107e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20107e4:	e0fff30b 	ldhu	r3,-52(fp)
 20107e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20107ec:	18800d1e 	bne	r3,r2,2010824 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20107f0:	e0bff383 	ldbu	r2,-50(fp)
 20107f4:	10800058 	cmpnei	r2,r2,1
 20107f8:	10000d1e 	bne	r2,zero,2010830 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 20107fc:	e0bffc17 	ldw	r2,-16(fp)
 2010800:	1080020b 	ldhu	r2,8(r2)
 2010804:	1007883a 	mov	r3,r2
 2010808:	e0bff30b 	ldhu	r2,-52(fp)
 201080c:	0084303a 	nor	r2,zero,r2
 2010810:	1884703a 	and	r2,r3,r2
 2010814:	1007883a 	mov	r3,r2
 2010818:	e0bffc17 	ldw	r2,-16(fp)
 201081c:	10c0020d 	sth	r3,8(r2)
 2010820:	00000306 	br	2010830 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2010824:	e0bfff17 	ldw	r2,-4(fp)
 2010828:	00c01c04 	movi	r3,112
 201082c:	10c00005 	stb	r3,0(r2)
 2010830:	e0bff417 	ldw	r2,-48(fp)
 2010834:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010838:	e0bff617 	ldw	r2,-40(fp)
 201083c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2010840:	00005e06 	br	20109bc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2010844:	e0bffc17 	ldw	r2,-16(fp)
 2010848:	10c0020b 	ldhu	r3,8(r2)
 201084c:	e0bffd0b 	ldhu	r2,-12(fp)
 2010850:	1884703a 	and	r2,r3,r2
 2010854:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2010858:	e0bff30b 	ldhu	r2,-52(fp)
 201085c:	10000d26 	beq	r2,zero,2010894 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2010860:	e0bff383 	ldbu	r2,-50(fp)
 2010864:	10800058 	cmpnei	r2,r2,1
 2010868:	10000d1e 	bne	r2,zero,20108a0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201086c:	e0bffc17 	ldw	r2,-16(fp)
 2010870:	1080020b 	ldhu	r2,8(r2)
 2010874:	1007883a 	mov	r3,r2
 2010878:	e0bff30b 	ldhu	r2,-52(fp)
 201087c:	0084303a 	nor	r2,zero,r2
 2010880:	1884703a 	and	r2,r3,r2
 2010884:	1007883a 	mov	r3,r2
 2010888:	e0bffc17 	ldw	r2,-16(fp)
 201088c:	10c0020d 	sth	r3,8(r2)
 2010890:	00000306 	br	20108a0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2010894:	e0bfff17 	ldw	r2,-4(fp)
 2010898:	00c01c04 	movi	r3,112
 201089c:	10c00005 	stb	r3,0(r2)
 20108a0:	e0bff417 	ldw	r2,-48(fp)
 20108a4:	e0bff715 	stw	r2,-36(fp)
 20108a8:	e0bff717 	ldw	r2,-36(fp)
 20108ac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20108b0:	00004206 	br	20109bc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20108b4:	e0bffc17 	ldw	r2,-16(fp)
 20108b8:	1080020b 	ldhu	r2,8(r2)
 20108bc:	0084303a 	nor	r2,zero,r2
 20108c0:	1007883a 	mov	r3,r2
 20108c4:	e0bffd0b 	ldhu	r2,-12(fp)
 20108c8:	1884703a 	and	r2,r3,r2
 20108cc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20108d0:	e0fff30b 	ldhu	r3,-52(fp)
 20108d4:	e0bffd0b 	ldhu	r2,-12(fp)
 20108d8:	18800b1e 	bne	r3,r2,2010908 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20108dc:	e0bff383 	ldbu	r2,-50(fp)
 20108e0:	10800058 	cmpnei	r2,r2,1
 20108e4:	10000b1e 	bne	r2,zero,2010914 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20108e8:	e0bffc17 	ldw	r2,-16(fp)
 20108ec:	10c0020b 	ldhu	r3,8(r2)
 20108f0:	e0bff30b 	ldhu	r2,-52(fp)
 20108f4:	1884b03a 	or	r2,r3,r2
 20108f8:	1007883a 	mov	r3,r2
 20108fc:	e0bffc17 	ldw	r2,-16(fp)
 2010900:	10c0020d 	sth	r3,8(r2)
 2010904:	00000306 	br	2010914 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2010908:	e0bfff17 	ldw	r2,-4(fp)
 201090c:	00c01c04 	movi	r3,112
 2010910:	10c00005 	stb	r3,0(r2)
 2010914:	e0bff417 	ldw	r2,-48(fp)
 2010918:	e0bff815 	stw	r2,-32(fp)
 201091c:	e0bff817 	ldw	r2,-32(fp)
 2010920:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2010924:	00002506 	br	20109bc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2010928:	e0bffc17 	ldw	r2,-16(fp)
 201092c:	1080020b 	ldhu	r2,8(r2)
 2010930:	0084303a 	nor	r2,zero,r2
 2010934:	1007883a 	mov	r3,r2
 2010938:	e0bffd0b 	ldhu	r2,-12(fp)
 201093c:	1884703a 	and	r2,r3,r2
 2010940:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2010944:	e0bff30b 	ldhu	r2,-52(fp)
 2010948:	10000b26 	beq	r2,zero,2010978 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201094c:	e0bff383 	ldbu	r2,-50(fp)
 2010950:	10800058 	cmpnei	r2,r2,1
 2010954:	10000b1e 	bne	r2,zero,2010984 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2010958:	e0bffc17 	ldw	r2,-16(fp)
 201095c:	10c0020b 	ldhu	r3,8(r2)
 2010960:	e0bff30b 	ldhu	r2,-52(fp)
 2010964:	1884b03a 	or	r2,r3,r2
 2010968:	1007883a 	mov	r3,r2
 201096c:	e0bffc17 	ldw	r2,-16(fp)
 2010970:	10c0020d 	sth	r3,8(r2)
 2010974:	00000306 	br	2010984 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2010978:	e0bfff17 	ldw	r2,-4(fp)
 201097c:	00c01c04 	movi	r3,112
 2010980:	10c00005 	stb	r3,0(r2)
 2010984:	e0bff417 	ldw	r2,-48(fp)
 2010988:	e0bff915 	stw	r2,-28(fp)
 201098c:	e0bff917 	ldw	r2,-28(fp)
 2010990:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2010994:	00000906 	br	20109bc <OSFlagAccept+0x2f4>
 2010998:	e0bff417 	ldw	r2,-48(fp)
 201099c:	e0bffa15 	stw	r2,-24(fp)
 20109a0:	e0bffa17 	ldw	r2,-24(fp)
 20109a4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20109a8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20109ac:	e0bfff17 	ldw	r2,-4(fp)
 20109b0:	00c01bc4 	movi	r3,111
 20109b4:	10c00005 	stb	r3,0(r2)
             break;
 20109b8:	0001883a 	nop
    }
    return (flags_rdy);
 20109bc:	e0bff30b 	ldhu	r2,-52(fp)
}
 20109c0:	e037883a 	mov	sp,fp
 20109c4:	df000017 	ldw	fp,0(sp)
 20109c8:	dec00104 	addi	sp,sp,4
 20109cc:	f800283a 	ret

020109d0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20109d0:	defff804 	addi	sp,sp,-32
 20109d4:	df000715 	stw	fp,28(sp)
 20109d8:	df000704 	addi	fp,sp,28
 20109dc:	2005883a 	mov	r2,r4
 20109e0:	e17fff15 	stw	r5,-4(fp)
 20109e4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 20109e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 20109ec:	e0bfff17 	ldw	r2,-4(fp)
 20109f0:	1000021e 	bne	r2,zero,20109fc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 20109f4:	0005883a 	mov	r2,zero
 20109f8:	00003306 	br	2010ac8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 20109fc:	d0a73103 	ldbu	r2,-25404(gp)
 2010a00:	10803fcc 	andi	r2,r2,255
 2010a04:	10000526 	beq	r2,zero,2010a1c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2010a08:	e0bfff17 	ldw	r2,-4(fp)
 2010a0c:	00c00404 	movi	r3,16
 2010a10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2010a14:	0005883a 	mov	r2,zero
 2010a18:	00002b06 	br	2010ac8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010a1c:	0005303a 	rdctl	r2,status
 2010a20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010a24:	e0fffd17 	ldw	r3,-12(fp)
 2010a28:	00bfff84 	movi	r2,-2
 2010a2c:	1884703a 	and	r2,r3,r2
 2010a30:	1001703a 	wrctl	status,r2
  
  return context;
 2010a34:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2010a38:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2010a3c:	d0a73417 	ldw	r2,-25392(gp)
 2010a40:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2010a44:	e0bffb17 	ldw	r2,-20(fp)
 2010a48:	10001726 	beq	r2,zero,2010aa8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2010a4c:	d0a73417 	ldw	r2,-25392(gp)
 2010a50:	10800117 	ldw	r2,4(r2)
 2010a54:	d0a73415 	stw	r2,-25392(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2010a58:	e0bffb17 	ldw	r2,-20(fp)
 2010a5c:	00c00144 	movi	r3,5
 2010a60:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2010a64:	e0bffb17 	ldw	r2,-20(fp)
 2010a68:	e0fffe0b 	ldhu	r3,-8(fp)
 2010a6c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2010a70:	e0bffb17 	ldw	r2,-20(fp)
 2010a74:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2010a78:	e0bffb17 	ldw	r2,-20(fp)
 2010a7c:	00c00fc4 	movi	r3,63
 2010a80:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2010a84:	e0bffb17 	ldw	r2,-20(fp)
 2010a88:	100002c5 	stb	zero,11(r2)
 2010a8c:	e0bff917 	ldw	r2,-28(fp)
 2010a90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010a94:	e0bffa17 	ldw	r2,-24(fp)
 2010a98:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2010a9c:	e0bfff17 	ldw	r2,-4(fp)
 2010aa0:	10000005 	stb	zero,0(r2)
 2010aa4:	00000706 	br	2010ac4 <OSFlagCreate+0xf4>
 2010aa8:	e0bff917 	ldw	r2,-28(fp)
 2010aac:	e0bffc15 	stw	r2,-16(fp)
 2010ab0:	e0bffc17 	ldw	r2,-16(fp)
 2010ab4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2010ab8:	e0bfff17 	ldw	r2,-4(fp)
 2010abc:	00c01c84 	movi	r3,114
 2010ac0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2010ac4:	e0bffb17 	ldw	r2,-20(fp)
}
 2010ac8:	e037883a 	mov	sp,fp
 2010acc:	df000017 	ldw	fp,0(sp)
 2010ad0:	dec00104 	addi	sp,sp,4
 2010ad4:	f800283a 	ret

02010ad8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2010ad8:	defff204 	addi	sp,sp,-56
 2010adc:	dfc00d15 	stw	ra,52(sp)
 2010ae0:	df000c15 	stw	fp,48(sp)
 2010ae4:	df000c04 	addi	fp,sp,48
 2010ae8:	e13ffd15 	stw	r4,-12(fp)
 2010aec:	2805883a 	mov	r2,r5
 2010af0:	e1bfff15 	stw	r6,-4(fp)
 2010af4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2010af8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2010afc:	e0bfff17 	ldw	r2,-4(fp)
 2010b00:	1000021e 	bne	r2,zero,2010b0c <OSFlagDel+0x34>
        return (pgrp);
 2010b04:	e0bffd17 	ldw	r2,-12(fp)
 2010b08:	00008006 	br	2010d0c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2010b0c:	e0bffd17 	ldw	r2,-12(fp)
 2010b10:	1000051e 	bne	r2,zero,2010b28 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010b14:	e0bfff17 	ldw	r2,-4(fp)
 2010b18:	00c01b84 	movi	r3,110
 2010b1c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2010b20:	e0bffd17 	ldw	r2,-12(fp)
 2010b24:	00007906 	br	2010d0c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2010b28:	d0a73103 	ldbu	r2,-25404(gp)
 2010b2c:	10803fcc 	andi	r2,r2,255
 2010b30:	10000526 	beq	r2,zero,2010b48 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2010b34:	e0bfff17 	ldw	r2,-4(fp)
 2010b38:	00c003c4 	movi	r3,15
 2010b3c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2010b40:	e0bffd17 	ldw	r2,-12(fp)
 2010b44:	00007106 	br	2010d0c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2010b48:	e0bffd17 	ldw	r2,-12(fp)
 2010b4c:	10800003 	ldbu	r2,0(r2)
 2010b50:	10803fcc 	andi	r2,r2,255
 2010b54:	10800160 	cmpeqi	r2,r2,5
 2010b58:	1000051e 	bne	r2,zero,2010b70 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2010b5c:	e0bfff17 	ldw	r2,-4(fp)
 2010b60:	00c00044 	movi	r3,1
 2010b64:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2010b68:	e0bffd17 	ldw	r2,-12(fp)
 2010b6c:	00006706 	br	2010d0c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010b70:	0005303a 	rdctl	r2,status
 2010b74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010b78:	e0fffc17 	ldw	r3,-16(fp)
 2010b7c:	00bfff84 	movi	r2,-2
 2010b80:	1884703a 	and	r2,r3,r2
 2010b84:	1001703a 	wrctl	status,r2
  
  return context;
 2010b88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2010b8c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2010b90:	e0bffd17 	ldw	r2,-12(fp)
 2010b94:	10800117 	ldw	r2,4(r2)
 2010b98:	10000326 	beq	r2,zero,2010ba8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2010b9c:	00800044 	movi	r2,1
 2010ba0:	e0bff405 	stb	r2,-48(fp)
 2010ba4:	00000106 	br	2010bac <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2010ba8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2010bac:	e0bffe03 	ldbu	r2,-8(fp)
 2010bb0:	10000326 	beq	r2,zero,2010bc0 <OSFlagDel+0xe8>
 2010bb4:	10800060 	cmpeqi	r2,r2,1
 2010bb8:	1000231e 	bne	r2,zero,2010c48 <OSFlagDel+0x170>
 2010bbc:	00004806 	br	2010ce0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2010bc0:	e0bff403 	ldbu	r2,-48(fp)
 2010bc4:	1000161e 	bne	r2,zero,2010c20 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2010bc8:	e0bffd17 	ldw	r2,-12(fp)
 2010bcc:	00c00fc4 	movi	r3,63
 2010bd0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2010bd4:	e0bffd17 	ldw	r2,-12(fp)
 2010bd8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2010bdc:	e0bffd17 	ldw	r2,-12(fp)
 2010be0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2010be4:	d0e73417 	ldw	r3,-25392(gp)
 2010be8:	e0bffd17 	ldw	r2,-12(fp)
 2010bec:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2010bf0:	e0bffd17 	ldw	r2,-12(fp)
 2010bf4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2010bf8:	e0bffd17 	ldw	r2,-12(fp)
 2010bfc:	d0a73415 	stw	r2,-25392(gp)
 2010c00:	e0bff717 	ldw	r2,-36(fp)
 2010c04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c08:	e0bff817 	ldw	r2,-32(fp)
 2010c0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2010c10:	e0bfff17 	ldw	r2,-4(fp)
 2010c14:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2010c18:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2010c1c:	00003a06 	br	2010d08 <OSFlagDel+0x230>
 2010c20:	e0bff717 	ldw	r2,-36(fp)
 2010c24:	e0bff915 	stw	r2,-28(fp)
 2010c28:	e0bff917 	ldw	r2,-28(fp)
 2010c2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2010c30:	e0bfff17 	ldw	r2,-4(fp)
 2010c34:	00c01244 	movi	r3,73
 2010c38:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2010c3c:	e0bffd17 	ldw	r2,-12(fp)
 2010c40:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2010c44:	00003006 	br	2010d08 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2010c48:	e0bffd17 	ldw	r2,-12(fp)
 2010c4c:	10800117 	ldw	r2,4(r2)
 2010c50:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2010c54:	00000606 	br	2010c70 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2010c58:	000b883a 	mov	r5,zero
 2010c5c:	e13ff517 	ldw	r4,-44(fp)
 2010c60:	2011c440 	call	2011c44 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2010c64:	e0bff517 	ldw	r2,-44(fp)
 2010c68:	10800017 	ldw	r2,0(r2)
 2010c6c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2010c70:	e0bff517 	ldw	r2,-44(fp)
 2010c74:	103ff81e 	bne	r2,zero,2010c58 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2010c78:	e0bffd17 	ldw	r2,-12(fp)
 2010c7c:	00c00fc4 	movi	r3,63
 2010c80:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2010c84:	e0bffd17 	ldw	r2,-12(fp)
 2010c88:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2010c8c:	e0bffd17 	ldw	r2,-12(fp)
 2010c90:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2010c94:	d0e73417 	ldw	r3,-25392(gp)
 2010c98:	e0bffd17 	ldw	r2,-12(fp)
 2010c9c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2010ca0:	e0bffd17 	ldw	r2,-12(fp)
 2010ca4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2010ca8:	e0bffd17 	ldw	r2,-12(fp)
 2010cac:	d0a73415 	stw	r2,-25392(gp)
 2010cb0:	e0bff717 	ldw	r2,-36(fp)
 2010cb4:	e0bffa15 	stw	r2,-24(fp)
 2010cb8:	e0bffa17 	ldw	r2,-24(fp)
 2010cbc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2010cc0:	e0bff403 	ldbu	r2,-48(fp)
 2010cc4:	10800058 	cmpnei	r2,r2,1
 2010cc8:	1000011e 	bne	r2,zero,2010cd0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2010ccc:	200fe640 	call	200fe64 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2010cd0:	e0bfff17 	ldw	r2,-4(fp)
 2010cd4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2010cd8:	e03ff615 	stw	zero,-40(fp)
             break;
 2010cdc:	00000a06 	br	2010d08 <OSFlagDel+0x230>
 2010ce0:	e0bff717 	ldw	r2,-36(fp)
 2010ce4:	e0bffb15 	stw	r2,-20(fp)
 2010ce8:	e0bffb17 	ldw	r2,-20(fp)
 2010cec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2010cf0:	e0bfff17 	ldw	r2,-4(fp)
 2010cf4:	00c001c4 	movi	r3,7
 2010cf8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2010cfc:	e0bffd17 	ldw	r2,-12(fp)
 2010d00:	e0bff615 	stw	r2,-40(fp)
             break;
 2010d04:	0001883a 	nop
    }
    return (pgrp_return);
 2010d08:	e0bff617 	ldw	r2,-40(fp)
}
 2010d0c:	e037883a 	mov	sp,fp
 2010d10:	dfc00117 	ldw	ra,4(sp)
 2010d14:	df000017 	ldw	fp,0(sp)
 2010d18:	dec00204 	addi	sp,sp,8
 2010d1c:	f800283a 	ret

02010d20 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2010d20:	defff604 	addi	sp,sp,-40
 2010d24:	dfc00915 	stw	ra,36(sp)
 2010d28:	df000815 	stw	fp,32(sp)
 2010d2c:	df000804 	addi	fp,sp,32
 2010d30:	e13ffd15 	stw	r4,-12(fp)
 2010d34:	e17ffe15 	stw	r5,-8(fp)
 2010d38:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010d3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010d40:	e0bfff17 	ldw	r2,-4(fp)
 2010d44:	1000021e 	bne	r2,zero,2010d50 <OSFlagNameGet+0x30>
        return (0);
 2010d48:	0005883a 	mov	r2,zero
 2010d4c:	00003906 	br	2010e34 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2010d50:	e0bffd17 	ldw	r2,-12(fp)
 2010d54:	1000051e 	bne	r2,zero,2010d6c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010d58:	e0bfff17 	ldw	r2,-4(fp)
 2010d5c:	00c01b84 	movi	r3,110
 2010d60:	10c00005 	stb	r3,0(r2)
        return (0);
 2010d64:	0005883a 	mov	r2,zero
 2010d68:	00003206 	br	2010e34 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010d6c:	e0bffe17 	ldw	r2,-8(fp)
 2010d70:	1000051e 	bne	r2,zero,2010d88 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2010d74:	e0bfff17 	ldw	r2,-4(fp)
 2010d78:	00c00304 	movi	r3,12
 2010d7c:	10c00005 	stb	r3,0(r2)
        return (0);
 2010d80:	0005883a 	mov	r2,zero
 2010d84:	00002b06 	br	2010e34 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2010d88:	d0a73103 	ldbu	r2,-25404(gp)
 2010d8c:	10803fcc 	andi	r2,r2,255
 2010d90:	10000526 	beq	r2,zero,2010da8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2010d94:	e0bfff17 	ldw	r2,-4(fp)
 2010d98:	00c00444 	movi	r3,17
 2010d9c:	10c00005 	stb	r3,0(r2)
        return (0);
 2010da0:	0005883a 	mov	r2,zero
 2010da4:	00002306 	br	2010e34 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010da8:	0005303a 	rdctl	r2,status
 2010dac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010db0:	e0fffc17 	ldw	r3,-16(fp)
 2010db4:	00bfff84 	movi	r2,-2
 2010db8:	1884703a 	and	r2,r3,r2
 2010dbc:	1001703a 	wrctl	status,r2
  
  return context;
 2010dc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2010dc4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2010dc8:	e0bffd17 	ldw	r2,-12(fp)
 2010dcc:	10800003 	ldbu	r2,0(r2)
 2010dd0:	10803fcc 	andi	r2,r2,255
 2010dd4:	10800160 	cmpeqi	r2,r2,5
 2010dd8:	1000091e 	bne	r2,zero,2010e00 <OSFlagNameGet+0xe0>
 2010ddc:	e0bff817 	ldw	r2,-32(fp)
 2010de0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010de4:	e0bff917 	ldw	r2,-28(fp)
 2010de8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2010dec:	e0bfff17 	ldw	r2,-4(fp)
 2010df0:	00c00044 	movi	r3,1
 2010df4:	10c00005 	stb	r3,0(r2)
        return (0);
 2010df8:	0005883a 	mov	r2,zero
 2010dfc:	00000d06 	br	2010e34 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2010e00:	e0bffd17 	ldw	r2,-12(fp)
 2010e04:	10800284 	addi	r2,r2,10
 2010e08:	100b883a 	mov	r5,r2
 2010e0c:	e13ffe17 	ldw	r4,-8(fp)
 2010e10:	200ffa80 	call	200ffa8 <OS_StrCopy>
 2010e14:	e0bffb05 	stb	r2,-20(fp)
 2010e18:	e0bff817 	ldw	r2,-32(fp)
 2010e1c:	e0bffa15 	stw	r2,-24(fp)
 2010e20:	e0bffa17 	ldw	r2,-24(fp)
 2010e24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010e28:	e0bfff17 	ldw	r2,-4(fp)
 2010e2c:	10000005 	stb	zero,0(r2)
    return (len);
 2010e30:	e0bffb03 	ldbu	r2,-20(fp)
}
 2010e34:	e037883a 	mov	sp,fp
 2010e38:	dfc00117 	ldw	ra,4(sp)
 2010e3c:	df000017 	ldw	fp,0(sp)
 2010e40:	dec00204 	addi	sp,sp,8
 2010e44:	f800283a 	ret

02010e48 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2010e48:	defff504 	addi	sp,sp,-44
 2010e4c:	dfc00a15 	stw	ra,40(sp)
 2010e50:	df000915 	stw	fp,36(sp)
 2010e54:	df000904 	addi	fp,sp,36
 2010e58:	e13ffd15 	stw	r4,-12(fp)
 2010e5c:	e17ffe15 	stw	r5,-8(fp)
 2010e60:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010e64:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010e68:	e0bfff17 	ldw	r2,-4(fp)
 2010e6c:	10004326 	beq	r2,zero,2010f7c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2010e70:	e0bffd17 	ldw	r2,-12(fp)
 2010e74:	1000041e 	bne	r2,zero,2010e88 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010e78:	e0bfff17 	ldw	r2,-4(fp)
 2010e7c:	00c01b84 	movi	r3,110
 2010e80:	10c00005 	stb	r3,0(r2)
        return;
 2010e84:	00003e06 	br	2010f80 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010e88:	e0bffe17 	ldw	r2,-8(fp)
 2010e8c:	1000041e 	bne	r2,zero,2010ea0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2010e90:	e0bfff17 	ldw	r2,-4(fp)
 2010e94:	00c00304 	movi	r3,12
 2010e98:	10c00005 	stb	r3,0(r2)
        return;
 2010e9c:	00003806 	br	2010f80 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2010ea0:	d0a73103 	ldbu	r2,-25404(gp)
 2010ea4:	10803fcc 	andi	r2,r2,255
 2010ea8:	10000426 	beq	r2,zero,2010ebc <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2010eac:	e0bfff17 	ldw	r2,-4(fp)
 2010eb0:	00c00484 	movi	r3,18
 2010eb4:	10c00005 	stb	r3,0(r2)
        return;
 2010eb8:	00003106 	br	2010f80 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010ebc:	0005303a 	rdctl	r2,status
 2010ec0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ec4:	e0fffc17 	ldw	r3,-16(fp)
 2010ec8:	00bfff84 	movi	r2,-2
 2010ecc:	1884703a 	and	r2,r3,r2
 2010ed0:	1001703a 	wrctl	status,r2
  
  return context;
 2010ed4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2010ed8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2010edc:	e0bffd17 	ldw	r2,-12(fp)
 2010ee0:	10800003 	ldbu	r2,0(r2)
 2010ee4:	10803fcc 	andi	r2,r2,255
 2010ee8:	10800160 	cmpeqi	r2,r2,5
 2010eec:	1000081e 	bne	r2,zero,2010f10 <OSFlagNameSet+0xc8>
 2010ef0:	e0bff717 	ldw	r2,-36(fp)
 2010ef4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010ef8:	e0bff817 	ldw	r2,-32(fp)
 2010efc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2010f00:	e0bfff17 	ldw	r2,-4(fp)
 2010f04:	00c00044 	movi	r3,1
 2010f08:	10c00005 	stb	r3,0(r2)
        return;
 2010f0c:	00001c06 	br	2010f80 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2010f10:	e13ffe17 	ldw	r4,-8(fp)
 2010f14:	201001c0 	call	201001c <OS_StrLen>
 2010f18:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2010f1c:	e0bffa03 	ldbu	r2,-24(fp)
 2010f20:	10800830 	cmpltui	r2,r2,32
 2010f24:	1000081e 	bne	r2,zero,2010f48 <OSFlagNameSet+0x100>
 2010f28:	e0bff717 	ldw	r2,-36(fp)
 2010f2c:	e0bff915 	stw	r2,-28(fp)
 2010f30:	e0bff917 	ldw	r2,-28(fp)
 2010f34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2010f38:	e0bfff17 	ldw	r2,-4(fp)
 2010f3c:	00c01cc4 	movi	r3,115
 2010f40:	10c00005 	stb	r3,0(r2)
        return;
 2010f44:	00000e06 	br	2010f80 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2010f48:	e0bffd17 	ldw	r2,-12(fp)
 2010f4c:	10800284 	addi	r2,r2,10
 2010f50:	e17ffe17 	ldw	r5,-8(fp)
 2010f54:	1009883a 	mov	r4,r2
 2010f58:	200ffa80 	call	200ffa8 <OS_StrCopy>
 2010f5c:	e0bff717 	ldw	r2,-36(fp)
 2010f60:	e0bffb15 	stw	r2,-20(fp)
 2010f64:	e0bffb17 	ldw	r2,-20(fp)
 2010f68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010f6c:	e0bfff17 	ldw	r2,-4(fp)
 2010f70:	10000005 	stb	zero,0(r2)
    return;
 2010f74:	0001883a 	nop
 2010f78:	00000106 	br	2010f80 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2010f7c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2010f80:	e037883a 	mov	sp,fp
 2010f84:	dfc00117 	ldw	ra,4(sp)
 2010f88:	df000017 	ldw	fp,0(sp)
 2010f8c:	dec00204 	addi	sp,sp,8
 2010f90:	f800283a 	ret

02010f94 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2010f94:	deffe104 	addi	sp,sp,-124
 2010f98:	dfc01e15 	stw	ra,120(sp)
 2010f9c:	df001d15 	stw	fp,116(sp)
 2010fa0:	df001d04 	addi	fp,sp,116
 2010fa4:	e13ffc15 	stw	r4,-16(fp)
 2010fa8:	2809883a 	mov	r4,r5
 2010fac:	3007883a 	mov	r3,r6
 2010fb0:	3805883a 	mov	r2,r7
 2010fb4:	e13ffd0d 	sth	r4,-12(fp)
 2010fb8:	e0fffe05 	stb	r3,-8(fp)
 2010fbc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2010fc0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2010fc4:	e0800217 	ldw	r2,8(fp)
 2010fc8:	1000021e 	bne	r2,zero,2010fd4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2010fcc:	0005883a 	mov	r2,zero
 2010fd0:	00015906 	br	2011538 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2010fd4:	e0bffc17 	ldw	r2,-16(fp)
 2010fd8:	1000051e 	bne	r2,zero,2010ff0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010fdc:	e0800217 	ldw	r2,8(fp)
 2010fe0:	00c01b84 	movi	r3,110
 2010fe4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2010fe8:	0005883a 	mov	r2,zero
 2010fec:	00015206 	br	2011538 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2010ff0:	d0a73103 	ldbu	r2,-25404(gp)
 2010ff4:	10803fcc 	andi	r2,r2,255
 2010ff8:	10000526 	beq	r2,zero,2011010 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2010ffc:	e0800217 	ldw	r2,8(fp)
 2011000:	00c00084 	movi	r3,2
 2011004:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011008:	0005883a 	mov	r2,zero
 201100c:	00014a06 	br	2011538 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2011010:	d0a72303 	ldbu	r2,-25460(gp)
 2011014:	10803fcc 	andi	r2,r2,255
 2011018:	10000526 	beq	r2,zero,2011030 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 201101c:	e0800217 	ldw	r2,8(fp)
 2011020:	00c00344 	movi	r3,13
 2011024:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011028:	0005883a 	mov	r2,zero
 201102c:	00014206 	br	2011538 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2011030:	e0bffc17 	ldw	r2,-16(fp)
 2011034:	10800003 	ldbu	r2,0(r2)
 2011038:	10803fcc 	andi	r2,r2,255
 201103c:	10800160 	cmpeqi	r2,r2,5
 2011040:	1000051e 	bne	r2,zero,2011058 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2011044:	e0800217 	ldw	r2,8(fp)
 2011048:	00c00044 	movi	r3,1
 201104c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011050:	0005883a 	mov	r2,zero
 2011054:	00013806 	br	2011538 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2011058:	e0fffe03 	ldbu	r3,-8(fp)
 201105c:	00bfe004 	movi	r2,-128
 2011060:	1884703a 	and	r2,r3,r2
 2011064:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2011068:	e0bfe603 	ldbu	r2,-104(fp)
 201106c:	10000626 	beq	r2,zero,2011088 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2011070:	e0bffe03 	ldbu	r2,-8(fp)
 2011074:	10801fcc 	andi	r2,r2,127
 2011078:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 201107c:	00800044 	movi	r2,1
 2011080:	e0bfe405 	stb	r2,-112(fp)
 2011084:	00000106 	br	201108c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2011088:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201108c:	0005303a 	rdctl	r2,status
 2011090:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011094:	e0fff617 	ldw	r3,-40(fp)
 2011098:	00bfff84 	movi	r2,-2
 201109c:	1884703a 	and	r2,r3,r2
 20110a0:	1001703a 	wrctl	status,r2
  
  return context;
 20110a4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20110a8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 20110ac:	e0bffe03 	ldbu	r2,-8(fp)
 20110b0:	10c00060 	cmpeqi	r3,r2,1
 20110b4:	1800921e 	bne	r3,zero,2011300 <OSFlagPend+0x36c>
 20110b8:	10c00088 	cmpgei	r3,r2,2
 20110bc:	1800021e 	bne	r3,zero,20110c8 <OSFlagPend+0x134>
 20110c0:	10006126 	beq	r2,zero,2011248 <OSFlagPend+0x2b4>
 20110c4:	0000bb06 	br	20113b4 <OSFlagPend+0x420>
 20110c8:	10c000a0 	cmpeqi	r3,r2,2
 20110cc:	1800031e 	bne	r3,zero,20110dc <OSFlagPend+0x148>
 20110d0:	108000e0 	cmpeqi	r2,r2,3
 20110d4:	10002f1e 	bne	r2,zero,2011194 <OSFlagPend+0x200>
 20110d8:	0000b606 	br	20113b4 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 20110dc:	e0bffc17 	ldw	r2,-16(fp)
 20110e0:	10c0020b 	ldhu	r3,8(r2)
 20110e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20110e8:	1884703a 	and	r2,r3,r2
 20110ec:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20110f0:	e0ffe80b 	ldhu	r3,-96(fp)
 20110f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20110f8:	1880171e 	bne	r3,r2,2011158 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20110fc:	e0bfe403 	ldbu	r2,-112(fp)
 2011100:	10800058 	cmpnei	r2,r2,1
 2011104:	1000091e 	bne	r2,zero,201112c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2011108:	e0bffc17 	ldw	r2,-16(fp)
 201110c:	1080020b 	ldhu	r2,8(r2)
 2011110:	1007883a 	mov	r3,r2
 2011114:	e0bfe80b 	ldhu	r2,-96(fp)
 2011118:	0084303a 	nor	r2,zero,r2
 201111c:	1884703a 	and	r2,r3,r2
 2011120:	1007883a 	mov	r3,r2
 2011124:	e0bffc17 	ldw	r2,-16(fp)
 2011128:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201112c:	d0a73217 	ldw	r2,-25400(gp)
 2011130:	e0ffe80b 	ldhu	r3,-96(fp)
 2011134:	10c00b0d 	sth	r3,44(r2)
 2011138:	e0bfe517 	ldw	r2,-108(fp)
 201113c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011140:	e0bfe717 	ldw	r2,-100(fp)
 2011144:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2011148:	e0800217 	ldw	r2,8(fp)
 201114c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011150:	e0bfe80b 	ldhu	r2,-96(fp)
 2011154:	0000f806 	br	2011538 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2011158:	e13ffd0b 	ldhu	r4,-12(fp)
 201115c:	e17ffe03 	ldbu	r5,-8(fp)
 2011160:	e0bfff0b 	ldhu	r2,-4(fp)
 2011164:	e0fff704 	addi	r3,fp,-36
 2011168:	d8800015 	stw	r2,0(sp)
 201116c:	280f883a 	mov	r7,r5
 2011170:	200d883a 	mov	r6,r4
 2011174:	180b883a 	mov	r5,r3
 2011178:	e13ffc17 	ldw	r4,-16(fp)
 201117c:	2011a040 	call	2011a04 <OS_FlagBlock>
 2011180:	e0bfe517 	ldw	r2,-108(fp)
 2011184:	e0bfe915 	stw	r2,-92(fp)
 2011188:	e0bfe917 	ldw	r2,-92(fp)
 201118c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2011190:	00009206 	br	20113dc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2011194:	e0bffc17 	ldw	r2,-16(fp)
 2011198:	10c0020b 	ldhu	r3,8(r2)
 201119c:	e0bffd0b 	ldhu	r2,-12(fp)
 20111a0:	1884703a 	and	r2,r3,r2
 20111a4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20111a8:	e0bfe80b 	ldhu	r2,-96(fp)
 20111ac:	10001726 	beq	r2,zero,201120c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20111b0:	e0bfe403 	ldbu	r2,-112(fp)
 20111b4:	10800058 	cmpnei	r2,r2,1
 20111b8:	1000091e 	bne	r2,zero,20111e0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20111bc:	e0bffc17 	ldw	r2,-16(fp)
 20111c0:	1080020b 	ldhu	r2,8(r2)
 20111c4:	1007883a 	mov	r3,r2
 20111c8:	e0bfe80b 	ldhu	r2,-96(fp)
 20111cc:	0084303a 	nor	r2,zero,r2
 20111d0:	1884703a 	and	r2,r3,r2
 20111d4:	1007883a 	mov	r3,r2
 20111d8:	e0bffc17 	ldw	r2,-16(fp)
 20111dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20111e0:	d0a73217 	ldw	r2,-25400(gp)
 20111e4:	e0ffe80b 	ldhu	r3,-96(fp)
 20111e8:	10c00b0d 	sth	r3,44(r2)
 20111ec:	e0bfe517 	ldw	r2,-108(fp)
 20111f0:	e0bfea15 	stw	r2,-88(fp)
 20111f4:	e0bfea17 	ldw	r2,-88(fp)
 20111f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20111fc:	e0800217 	ldw	r2,8(fp)
 2011200:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011204:	e0bfe80b 	ldhu	r2,-96(fp)
 2011208:	0000cb06 	br	2011538 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201120c:	e13ffd0b 	ldhu	r4,-12(fp)
 2011210:	e17ffe03 	ldbu	r5,-8(fp)
 2011214:	e0bfff0b 	ldhu	r2,-4(fp)
 2011218:	e0fff704 	addi	r3,fp,-36
 201121c:	d8800015 	stw	r2,0(sp)
 2011220:	280f883a 	mov	r7,r5
 2011224:	200d883a 	mov	r6,r4
 2011228:	180b883a 	mov	r5,r3
 201122c:	e13ffc17 	ldw	r4,-16(fp)
 2011230:	2011a040 	call	2011a04 <OS_FlagBlock>
 2011234:	e0bfe517 	ldw	r2,-108(fp)
 2011238:	e0bfeb15 	stw	r2,-84(fp)
 201123c:	e0bfeb17 	ldw	r2,-84(fp)
 2011240:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2011244:	00006506 	br	20113dc <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2011248:	e0bffc17 	ldw	r2,-16(fp)
 201124c:	1080020b 	ldhu	r2,8(r2)
 2011250:	0084303a 	nor	r2,zero,r2
 2011254:	1007883a 	mov	r3,r2
 2011258:	e0bffd0b 	ldhu	r2,-12(fp)
 201125c:	1884703a 	and	r2,r3,r2
 2011260:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2011264:	e0ffe80b 	ldhu	r3,-96(fp)
 2011268:	e0bffd0b 	ldhu	r2,-12(fp)
 201126c:	1880151e 	bne	r3,r2,20112c4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011270:	e0bfe403 	ldbu	r2,-112(fp)
 2011274:	10800058 	cmpnei	r2,r2,1
 2011278:	1000071e 	bne	r2,zero,2011298 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201127c:	e0bffc17 	ldw	r2,-16(fp)
 2011280:	10c0020b 	ldhu	r3,8(r2)
 2011284:	e0bfe80b 	ldhu	r2,-96(fp)
 2011288:	1884b03a 	or	r2,r3,r2
 201128c:	1007883a 	mov	r3,r2
 2011290:	e0bffc17 	ldw	r2,-16(fp)
 2011294:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2011298:	d0a73217 	ldw	r2,-25400(gp)
 201129c:	e0ffe80b 	ldhu	r3,-96(fp)
 20112a0:	10c00b0d 	sth	r3,44(r2)
 20112a4:	e0bfe517 	ldw	r2,-108(fp)
 20112a8:	e0bfec15 	stw	r2,-80(fp)
 20112ac:	e0bfec17 	ldw	r2,-80(fp)
 20112b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20112b4:	e0800217 	ldw	r2,8(fp)
 20112b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20112bc:	e0bfe80b 	ldhu	r2,-96(fp)
 20112c0:	00009d06 	br	2011538 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20112c4:	e13ffd0b 	ldhu	r4,-12(fp)
 20112c8:	e17ffe03 	ldbu	r5,-8(fp)
 20112cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20112d0:	e0fff704 	addi	r3,fp,-36
 20112d4:	d8800015 	stw	r2,0(sp)
 20112d8:	280f883a 	mov	r7,r5
 20112dc:	200d883a 	mov	r6,r4
 20112e0:	180b883a 	mov	r5,r3
 20112e4:	e13ffc17 	ldw	r4,-16(fp)
 20112e8:	2011a040 	call	2011a04 <OS_FlagBlock>
 20112ec:	e0bfe517 	ldw	r2,-108(fp)
 20112f0:	e0bfed15 	stw	r2,-76(fp)
 20112f4:	e0bfed17 	ldw	r2,-76(fp)
 20112f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20112fc:	00003706 	br	20113dc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2011300:	e0bffc17 	ldw	r2,-16(fp)
 2011304:	1080020b 	ldhu	r2,8(r2)
 2011308:	0084303a 	nor	r2,zero,r2
 201130c:	1007883a 	mov	r3,r2
 2011310:	e0bffd0b 	ldhu	r2,-12(fp)
 2011314:	1884703a 	and	r2,r3,r2
 2011318:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201131c:	e0bfe80b 	ldhu	r2,-96(fp)
 2011320:	10001526 	beq	r2,zero,2011378 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011324:	e0bfe403 	ldbu	r2,-112(fp)
 2011328:	10800058 	cmpnei	r2,r2,1
 201132c:	1000071e 	bne	r2,zero,201134c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2011330:	e0bffc17 	ldw	r2,-16(fp)
 2011334:	10c0020b 	ldhu	r3,8(r2)
 2011338:	e0bfe80b 	ldhu	r2,-96(fp)
 201133c:	1884b03a 	or	r2,r3,r2
 2011340:	1007883a 	mov	r3,r2
 2011344:	e0bffc17 	ldw	r2,-16(fp)
 2011348:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201134c:	d0a73217 	ldw	r2,-25400(gp)
 2011350:	e0ffe80b 	ldhu	r3,-96(fp)
 2011354:	10c00b0d 	sth	r3,44(r2)
 2011358:	e0bfe517 	ldw	r2,-108(fp)
 201135c:	e0bfee15 	stw	r2,-72(fp)
 2011360:	e0bfee17 	ldw	r2,-72(fp)
 2011364:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2011368:	e0800217 	ldw	r2,8(fp)
 201136c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011370:	e0bfe80b 	ldhu	r2,-96(fp)
 2011374:	00007006 	br	2011538 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2011378:	e13ffd0b 	ldhu	r4,-12(fp)
 201137c:	e17ffe03 	ldbu	r5,-8(fp)
 2011380:	e0bfff0b 	ldhu	r2,-4(fp)
 2011384:	e0fff704 	addi	r3,fp,-36
 2011388:	d8800015 	stw	r2,0(sp)
 201138c:	280f883a 	mov	r7,r5
 2011390:	200d883a 	mov	r6,r4
 2011394:	180b883a 	mov	r5,r3
 2011398:	e13ffc17 	ldw	r4,-16(fp)
 201139c:	2011a040 	call	2011a04 <OS_FlagBlock>
 20113a0:	e0bfe517 	ldw	r2,-108(fp)
 20113a4:	e0bfef15 	stw	r2,-68(fp)
 20113a8:	e0bfef17 	ldw	r2,-68(fp)
 20113ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20113b0:	00000a06 	br	20113dc <OSFlagPend+0x448>
 20113b4:	e0bfe517 	ldw	r2,-108(fp)
 20113b8:	e0bff015 	stw	r2,-64(fp)
 20113bc:	e0bff017 	ldw	r2,-64(fp)
 20113c0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20113c4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 20113c8:	e0800217 	ldw	r2,8(fp)
 20113cc:	00c01bc4 	movi	r3,111
 20113d0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 20113d4:	e0bfe80b 	ldhu	r2,-96(fp)
 20113d8:	00005706 	br	2011538 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 20113dc:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20113e0:	0005303a 	rdctl	r2,status
 20113e4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20113e8:	e0fff117 	ldw	r3,-60(fp)
 20113ec:	00bfff84 	movi	r2,-2
 20113f0:	1884703a 	and	r2,r3,r2
 20113f4:	1001703a 	wrctl	status,r2
  
  return context;
 20113f8:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 20113fc:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2011400:	d0a73217 	ldw	r2,-25400(gp)
 2011404:	10800c43 	ldbu	r2,49(r2)
 2011408:	10803fcc 	andi	r2,r2,255
 201140c:	10001c26 	beq	r2,zero,2011480 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2011410:	d0a73217 	ldw	r2,-25400(gp)
 2011414:	10800c43 	ldbu	r2,49(r2)
 2011418:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201141c:	d0a73217 	ldw	r2,-25400(gp)
 2011420:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2011424:	e0bff704 	addi	r2,fp,-36
 2011428:	1009883a 	mov	r4,r2
 201142c:	2011d380 	call	2011d38 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2011430:	d0a73217 	ldw	r2,-25400(gp)
 2011434:	10000c05 	stb	zero,48(r2)
 2011438:	e0bfe517 	ldw	r2,-108(fp)
 201143c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011440:	e0bff217 	ldw	r2,-56(fp)
 2011444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2011448:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 201144c:	e0bff303 	ldbu	r2,-52(fp)
 2011450:	108000a0 	cmpeqi	r2,r2,2
 2011454:	10000426 	beq	r2,zero,2011468 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2011458:	e0800217 	ldw	r2,8(fp)
 201145c:	00c00384 	movi	r3,14
 2011460:	10c00005 	stb	r3,0(r2)
                 break;
 2011464:	00000406 	br	2011478 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2011468:	e0800217 	ldw	r2,8(fp)
 201146c:	00c00284 	movi	r3,10
 2011470:	10c00005 	stb	r3,0(r2)
                 break;
 2011474:	0001883a 	nop
        }
        return (flags_rdy);
 2011478:	e0bfe80b 	ldhu	r2,-96(fp)
 201147c:	00002e06 	br	2011538 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2011480:	d0a73217 	ldw	r2,-25400(gp)
 2011484:	10800b0b 	ldhu	r2,44(r2)
 2011488:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 201148c:	e0bfe403 	ldbu	r2,-112(fp)
 2011490:	10800058 	cmpnei	r2,r2,1
 2011494:	1000211e 	bne	r2,zero,201151c <OSFlagPend+0x588>
        switch (wait_type) {
 2011498:	e0bffe03 	ldbu	r2,-8(fp)
 201149c:	10001616 	blt	r2,zero,20114f8 <OSFlagPend+0x564>
 20114a0:	10c00090 	cmplti	r3,r2,2
 20114a4:	18000c1e 	bne	r3,zero,20114d8 <OSFlagPend+0x544>
 20114a8:	10800108 	cmpgei	r2,r2,4
 20114ac:	1000121e 	bne	r2,zero,20114f8 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 20114b0:	e0bffc17 	ldw	r2,-16(fp)
 20114b4:	1080020b 	ldhu	r2,8(r2)
 20114b8:	1007883a 	mov	r3,r2
 20114bc:	e0bfe80b 	ldhu	r2,-96(fp)
 20114c0:	0084303a 	nor	r2,zero,r2
 20114c4:	1884703a 	and	r2,r3,r2
 20114c8:	1007883a 	mov	r3,r2
 20114cc:	e0bffc17 	ldw	r2,-16(fp)
 20114d0:	10c0020d 	sth	r3,8(r2)
                 break;
 20114d4:	00001106 	br	201151c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 20114d8:	e0bffc17 	ldw	r2,-16(fp)
 20114dc:	10c0020b 	ldhu	r3,8(r2)
 20114e0:	e0bfe80b 	ldhu	r2,-96(fp)
 20114e4:	1884b03a 	or	r2,r3,r2
 20114e8:	1007883a 	mov	r3,r2
 20114ec:	e0bffc17 	ldw	r2,-16(fp)
 20114f0:	10c0020d 	sth	r3,8(r2)
                 break;
 20114f4:	00000906 	br	201151c <OSFlagPend+0x588>
 20114f8:	e0bfe517 	ldw	r2,-108(fp)
 20114fc:	e0bff415 	stw	r2,-48(fp)
 2011500:	e0bff417 	ldw	r2,-48(fp)
 2011504:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2011508:	e0800217 	ldw	r2,8(fp)
 201150c:	00c01bc4 	movi	r3,111
 2011510:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2011514:	0005883a 	mov	r2,zero
 2011518:	00000706 	br	2011538 <OSFlagPend+0x5a4>
 201151c:	e0bfe517 	ldw	r2,-108(fp)
 2011520:	e0bff515 	stw	r2,-44(fp)
 2011524:	e0bff517 	ldw	r2,-44(fp)
 2011528:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 201152c:	e0800217 	ldw	r2,8(fp)
 2011530:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2011534:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2011538:	e037883a 	mov	sp,fp
 201153c:	dfc00117 	ldw	ra,4(sp)
 2011540:	df000017 	ldw	fp,0(sp)
 2011544:	dec00204 	addi	sp,sp,8
 2011548:	f800283a 	ret

0201154c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 201154c:	defffb04 	addi	sp,sp,-20
 2011550:	df000415 	stw	fp,16(sp)
 2011554:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2011558:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201155c:	0005303a 	rdctl	r2,status
 2011560:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011564:	e0fffe17 	ldw	r3,-8(fp)
 2011568:	00bfff84 	movi	r2,-2
 201156c:	1884703a 	and	r2,r3,r2
 2011570:	1001703a 	wrctl	status,r2
  
  return context;
 2011574:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2011578:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 201157c:	d0a73217 	ldw	r2,-25400(gp)
 2011580:	10800b0b 	ldhu	r2,44(r2)
 2011584:	e0bffd0d 	sth	r2,-12(fp)
 2011588:	e0bffc17 	ldw	r2,-16(fp)
 201158c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011590:	e0bfff17 	ldw	r2,-4(fp)
 2011594:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2011598:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201159c:	e037883a 	mov	sp,fp
 20115a0:	df000017 	ldw	fp,0(sp)
 20115a4:	dec00104 	addi	sp,sp,4
 20115a8:	f800283a 	ret

020115ac <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 20115ac:	deffef04 	addi	sp,sp,-68
 20115b0:	dfc01015 	stw	ra,64(sp)
 20115b4:	df000f15 	stw	fp,60(sp)
 20115b8:	df000f04 	addi	fp,sp,60
 20115bc:	e13ffc15 	stw	r4,-16(fp)
 20115c0:	2807883a 	mov	r3,r5
 20115c4:	3005883a 	mov	r2,r6
 20115c8:	e1ffff15 	stw	r7,-4(fp)
 20115cc:	e0fffd0d 	sth	r3,-12(fp)
 20115d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 20115d4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20115d8:	e0bfff17 	ldw	r2,-4(fp)
 20115dc:	1000021e 	bne	r2,zero,20115e8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 20115e0:	0005883a 	mov	r2,zero
 20115e4:	0000d106 	br	201192c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 20115e8:	e0bffc17 	ldw	r2,-16(fp)
 20115ec:	1000051e 	bne	r2,zero,2011604 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20115f0:	e0bfff17 	ldw	r2,-4(fp)
 20115f4:	00c01b84 	movi	r3,110
 20115f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20115fc:	0005883a 	mov	r2,zero
 2011600:	0000ca06 	br	201192c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2011604:	e0bffc17 	ldw	r2,-16(fp)
 2011608:	10800003 	ldbu	r2,0(r2)
 201160c:	10803fcc 	andi	r2,r2,255
 2011610:	10800160 	cmpeqi	r2,r2,5
 2011614:	1000051e 	bne	r2,zero,201162c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2011618:	e0bfff17 	ldw	r2,-4(fp)
 201161c:	00c00044 	movi	r3,1
 2011620:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011624:	0005883a 	mov	r2,zero
 2011628:	0000c006 	br	201192c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201162c:	0005303a 	rdctl	r2,status
 2011630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011634:	e0fffb17 	ldw	r3,-20(fp)
 2011638:	00bfff84 	movi	r2,-2
 201163c:	1884703a 	and	r2,r3,r2
 2011640:	1001703a 	wrctl	status,r2
  
  return context;
 2011644:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2011648:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 201164c:	e0bffe03 	ldbu	r2,-8(fp)
 2011650:	10000326 	beq	r2,zero,2011660 <OSFlagPost+0xb4>
 2011654:	10800060 	cmpeqi	r2,r2,1
 2011658:	10000b1e 	bne	r2,zero,2011688 <OSFlagPost+0xdc>
 201165c:	00001206 	br	20116a8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2011660:	e0bffc17 	ldw	r2,-16(fp)
 2011664:	1080020b 	ldhu	r2,8(r2)
 2011668:	1007883a 	mov	r3,r2
 201166c:	e0bffd0b 	ldhu	r2,-12(fp)
 2011670:	0084303a 	nor	r2,zero,r2
 2011674:	1884703a 	and	r2,r3,r2
 2011678:	1007883a 	mov	r3,r2
 201167c:	e0bffc17 	ldw	r2,-16(fp)
 2011680:	10c0020d 	sth	r3,8(r2)
             break;
 2011684:	00001106 	br	20116cc <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2011688:	e0bffc17 	ldw	r2,-16(fp)
 201168c:	10c0020b 	ldhu	r3,8(r2)
 2011690:	e0bffd0b 	ldhu	r2,-12(fp)
 2011694:	1884b03a 	or	r2,r3,r2
 2011698:	1007883a 	mov	r3,r2
 201169c:	e0bffc17 	ldw	r2,-16(fp)
 20116a0:	10c0020d 	sth	r3,8(r2)
             break;
 20116a4:	00000906 	br	20116cc <OSFlagPost+0x120>
 20116a8:	e0bff317 	ldw	r2,-52(fp)
 20116ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20116b0:	e0bff417 	ldw	r2,-48(fp)
 20116b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 20116b8:	e0bfff17 	ldw	r2,-4(fp)
 20116bc:	00c01c44 	movi	r3,113
 20116c0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 20116c4:	0005883a 	mov	r2,zero
 20116c8:	00009806 	br	201192c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 20116cc:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20116d0:	e0bffc17 	ldw	r2,-16(fp)
 20116d4:	10800117 	ldw	r2,4(r2)
 20116d8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20116dc:	00007706 	br	20118bc <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 20116e0:	e0bff117 	ldw	r2,-60(fp)
 20116e4:	10800483 	ldbu	r2,18(r2)
 20116e8:	10803fcc 	andi	r2,r2,255
 20116ec:	10c00060 	cmpeqi	r3,r2,1
 20116f0:	18004a1e 	bne	r3,zero,201181c <OSFlagPost+0x270>
 20116f4:	10c00088 	cmpgei	r3,r2,2
 20116f8:	1800021e 	bne	r3,zero,2011704 <OSFlagPost+0x158>
 20116fc:	10002f26 	beq	r2,zero,20117bc <OSFlagPost+0x210>
 2011700:	00005b06 	br	2011870 <OSFlagPost+0x2c4>
 2011704:	10c000a0 	cmpeqi	r3,r2,2
 2011708:	1800031e 	bne	r3,zero,2011718 <OSFlagPost+0x16c>
 201170c:	108000e0 	cmpeqi	r2,r2,3
 2011710:	1000171e 	bne	r2,zero,2011770 <OSFlagPost+0x1c4>
 2011714:	00005606 	br	2011870 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011718:	e0bffc17 	ldw	r2,-16(fp)
 201171c:	10c0020b 	ldhu	r3,8(r2)
 2011720:	e0bff117 	ldw	r2,-60(fp)
 2011724:	1080040b 	ldhu	r2,16(r2)
 2011728:	1884703a 	and	r2,r3,r2
 201172c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2011730:	e0bff117 	ldw	r2,-60(fp)
 2011734:	1080040b 	ldhu	r2,16(r2)
 2011738:	10ffffcc 	andi	r3,r2,65535
 201173c:	e0bff60b 	ldhu	r2,-40(fp)
 2011740:	1880541e 	bne	r3,r2,2011894 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011744:	e0bff60b 	ldhu	r2,-40(fp)
 2011748:	100b883a 	mov	r5,r2
 201174c:	e13ff117 	ldw	r4,-60(fp)
 2011750:	2011c440 	call	2011c44 <OS_FlagTaskRdy>
 2011754:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011758:	e0bff683 	ldbu	r2,-38(fp)
 201175c:	10800058 	cmpnei	r2,r2,1
 2011760:	10004c1e 	bne	r2,zero,2011894 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011764:	00800044 	movi	r2,1
 2011768:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201176c:	00004906 	br	2011894 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011770:	e0bffc17 	ldw	r2,-16(fp)
 2011774:	10c0020b 	ldhu	r3,8(r2)
 2011778:	e0bff117 	ldw	r2,-60(fp)
 201177c:	1080040b 	ldhu	r2,16(r2)
 2011780:	1884703a 	and	r2,r3,r2
 2011784:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2011788:	e0bff60b 	ldhu	r2,-40(fp)
 201178c:	10004326 	beq	r2,zero,201189c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011790:	e0bff60b 	ldhu	r2,-40(fp)
 2011794:	100b883a 	mov	r5,r2
 2011798:	e13ff117 	ldw	r4,-60(fp)
 201179c:	2011c440 	call	2011c44 <OS_FlagTaskRdy>
 20117a0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20117a4:	e0bff683 	ldbu	r2,-38(fp)
 20117a8:	10800058 	cmpnei	r2,r2,1
 20117ac:	10003b1e 	bne	r2,zero,201189c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20117b0:	00800044 	movi	r2,1
 20117b4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20117b8:	00003806 	br	201189c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20117bc:	e0bffc17 	ldw	r2,-16(fp)
 20117c0:	1080020b 	ldhu	r2,8(r2)
 20117c4:	0084303a 	nor	r2,zero,r2
 20117c8:	1007883a 	mov	r3,r2
 20117cc:	e0bff117 	ldw	r2,-60(fp)
 20117d0:	1080040b 	ldhu	r2,16(r2)
 20117d4:	1884703a 	and	r2,r3,r2
 20117d8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20117dc:	e0bff117 	ldw	r2,-60(fp)
 20117e0:	1080040b 	ldhu	r2,16(r2)
 20117e4:	10ffffcc 	andi	r3,r2,65535
 20117e8:	e0bff60b 	ldhu	r2,-40(fp)
 20117ec:	18802d1e 	bne	r3,r2,20118a4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20117f0:	e0bff60b 	ldhu	r2,-40(fp)
 20117f4:	100b883a 	mov	r5,r2
 20117f8:	e13ff117 	ldw	r4,-60(fp)
 20117fc:	2011c440 	call	2011c44 <OS_FlagTaskRdy>
 2011800:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011804:	e0bff683 	ldbu	r2,-38(fp)
 2011808:	10800058 	cmpnei	r2,r2,1
 201180c:	1000251e 	bne	r2,zero,20118a4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011810:	00800044 	movi	r2,1
 2011814:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2011818:	00002206 	br	20118a4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201181c:	e0bffc17 	ldw	r2,-16(fp)
 2011820:	1080020b 	ldhu	r2,8(r2)
 2011824:	0084303a 	nor	r2,zero,r2
 2011828:	1007883a 	mov	r3,r2
 201182c:	e0bff117 	ldw	r2,-60(fp)
 2011830:	1080040b 	ldhu	r2,16(r2)
 2011834:	1884703a 	and	r2,r3,r2
 2011838:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201183c:	e0bff60b 	ldhu	r2,-40(fp)
 2011840:	10001a26 	beq	r2,zero,20118ac <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011844:	e0bff60b 	ldhu	r2,-40(fp)
 2011848:	100b883a 	mov	r5,r2
 201184c:	e13ff117 	ldw	r4,-60(fp)
 2011850:	2011c440 	call	2011c44 <OS_FlagTaskRdy>
 2011854:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011858:	e0bff683 	ldbu	r2,-38(fp)
 201185c:	10800058 	cmpnei	r2,r2,1
 2011860:	1000121e 	bne	r2,zero,20118ac <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011864:	00800044 	movi	r2,1
 2011868:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201186c:	00000f06 	br	20118ac <OSFlagPost+0x300>
 2011870:	e0bff317 	ldw	r2,-52(fp)
 2011874:	e0bff515 	stw	r2,-44(fp)
 2011878:	e0bff517 	ldw	r2,-44(fp)
 201187c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2011880:	e0bfff17 	ldw	r2,-4(fp)
 2011884:	00c01bc4 	movi	r3,111
 2011888:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201188c:	0005883a 	mov	r2,zero
 2011890:	00002606 	br	201192c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2011894:	0001883a 	nop
 2011898:	00000506 	br	20118b0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201189c:	0001883a 	nop
 20118a0:	00000306 	br	20118b0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20118a4:	0001883a 	nop
 20118a8:	00000106 	br	20118b0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20118ac:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 20118b0:	e0bff117 	ldw	r2,-60(fp)
 20118b4:	10800017 	ldw	r2,0(r2)
 20118b8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20118bc:	e0bff117 	ldw	r2,-60(fp)
 20118c0:	103f871e 	bne	r2,zero,20116e0 <OSFlagPost+0x134>
 20118c4:	e0bff317 	ldw	r2,-52(fp)
 20118c8:	e0bff715 	stw	r2,-36(fp)
 20118cc:	e0bff717 	ldw	r2,-36(fp)
 20118d0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 20118d4:	e0bff203 	ldbu	r2,-56(fp)
 20118d8:	10800058 	cmpnei	r2,r2,1
 20118dc:	1000011e 	bne	r2,zero,20118e4 <OSFlagPost+0x338>
        OS_Sched();
 20118e0:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20118e4:	0005303a 	rdctl	r2,status
 20118e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20118ec:	e0fffa17 	ldw	r3,-24(fp)
 20118f0:	00bfff84 	movi	r2,-2
 20118f4:	1884703a 	and	r2,r3,r2
 20118f8:	1001703a 	wrctl	status,r2
  
  return context;
 20118fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2011900:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2011904:	e0bffc17 	ldw	r2,-16(fp)
 2011908:	1080020b 	ldhu	r2,8(r2)
 201190c:	e0bff90d 	sth	r2,-28(fp)
 2011910:	e0bff317 	ldw	r2,-52(fp)
 2011914:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011918:	e0bff817 	ldw	r2,-32(fp)
 201191c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2011920:	e0bfff17 	ldw	r2,-4(fp)
 2011924:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2011928:	e0bff90b 	ldhu	r2,-28(fp)
}
 201192c:	e037883a 	mov	sp,fp
 2011930:	dfc00117 	ldw	ra,4(sp)
 2011934:	df000017 	ldw	fp,0(sp)
 2011938:	dec00204 	addi	sp,sp,8
 201193c:	f800283a 	ret

02011940 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2011940:	defff904 	addi	sp,sp,-28
 2011944:	df000615 	stw	fp,24(sp)
 2011948:	df000604 	addi	fp,sp,24
 201194c:	e13ffe15 	stw	r4,-8(fp)
 2011950:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2011954:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2011958:	e0bfff17 	ldw	r2,-4(fp)
 201195c:	1000021e 	bne	r2,zero,2011968 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2011960:	0005883a 	mov	r2,zero
 2011964:	00002306 	br	20119f4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2011968:	e0bffe17 	ldw	r2,-8(fp)
 201196c:	1000051e 	bne	r2,zero,2011984 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011970:	e0bfff17 	ldw	r2,-4(fp)
 2011974:	00c01b84 	movi	r3,110
 2011978:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201197c:	0005883a 	mov	r2,zero
 2011980:	00001c06 	br	20119f4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 2011984:	e0bffe17 	ldw	r2,-8(fp)
 2011988:	10800003 	ldbu	r2,0(r2)
 201198c:	10803fcc 	andi	r2,r2,255
 2011990:	10800160 	cmpeqi	r2,r2,5
 2011994:	1000051e 	bne	r2,zero,20119ac <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2011998:	e0bfff17 	ldw	r2,-4(fp)
 201199c:	00c00044 	movi	r3,1
 20119a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20119a4:	0005883a 	mov	r2,zero
 20119a8:	00001206 	br	20119f4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20119ac:	0005303a 	rdctl	r2,status
 20119b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20119b4:	e0fffc17 	ldw	r3,-16(fp)
 20119b8:	00bfff84 	movi	r2,-2
 20119bc:	1884703a 	and	r2,r3,r2
 20119c0:	1001703a 	wrctl	status,r2
  
  return context;
 20119c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20119c8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 20119cc:	e0bffe17 	ldw	r2,-8(fp)
 20119d0:	1080020b 	ldhu	r2,8(r2)
 20119d4:	e0bffb0d 	sth	r2,-20(fp)
 20119d8:	e0bffa17 	ldw	r2,-24(fp)
 20119dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20119e0:	e0bffd17 	ldw	r2,-12(fp)
 20119e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20119e8:	e0bfff17 	ldw	r2,-4(fp)
 20119ec:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 20119f0:	e0bffb0b 	ldhu	r2,-20(fp)
}
 20119f4:	e037883a 	mov	sp,fp
 20119f8:	df000017 	ldw	fp,0(sp)
 20119fc:	dec00104 	addi	sp,sp,4
 2011a00:	f800283a 	ret

02011a04 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2011a04:	defff804 	addi	sp,sp,-32
 2011a08:	df000715 	stw	fp,28(sp)
 2011a0c:	df000704 	addi	fp,sp,28
 2011a10:	e13ffb15 	stw	r4,-20(fp)
 2011a14:	e17ffc15 	stw	r5,-16(fp)
 2011a18:	3009883a 	mov	r4,r6
 2011a1c:	3807883a 	mov	r3,r7
 2011a20:	e0800117 	ldw	r2,4(fp)
 2011a24:	e13ffd0d 	sth	r4,-12(fp)
 2011a28:	e0fffe05 	stb	r3,-8(fp)
 2011a2c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2011a30:	d0a73217 	ldw	r2,-25400(gp)
 2011a34:	d0e73217 	ldw	r3,-25400(gp)
 2011a38:	18c00c03 	ldbu	r3,48(r3)
 2011a3c:	18c00814 	ori	r3,r3,32
 2011a40:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2011a44:	d0a73217 	ldw	r2,-25400(gp)
 2011a48:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2011a4c:	d0a73217 	ldw	r2,-25400(gp)
 2011a50:	e0ffff0b 	ldhu	r3,-4(fp)
 2011a54:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2011a58:	d0a73217 	ldw	r2,-25400(gp)
 2011a5c:	e0fffc17 	ldw	r3,-16(fp)
 2011a60:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2011a64:	e0bffc17 	ldw	r2,-16(fp)
 2011a68:	e0fffd0b 	ldhu	r3,-12(fp)
 2011a6c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2011a70:	e0bffc17 	ldw	r2,-16(fp)
 2011a74:	e0fffe03 	ldbu	r3,-8(fp)
 2011a78:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2011a7c:	d0e73217 	ldw	r3,-25400(gp)
 2011a80:	e0bffc17 	ldw	r2,-16(fp)
 2011a84:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2011a88:	e0bffb17 	ldw	r2,-20(fp)
 2011a8c:	10c00117 	ldw	r3,4(r2)
 2011a90:	e0bffc17 	ldw	r2,-16(fp)
 2011a94:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2011a98:	e0bffc17 	ldw	r2,-16(fp)
 2011a9c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2011aa0:	e0bffc17 	ldw	r2,-16(fp)
 2011aa4:	e0fffb17 	ldw	r3,-20(fp)
 2011aa8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2011aac:	e0bffb17 	ldw	r2,-20(fp)
 2011ab0:	10800117 	ldw	r2,4(r2)
 2011ab4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2011ab8:	e0bff917 	ldw	r2,-28(fp)
 2011abc:	10000326 	beq	r2,zero,2011acc <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2011ac0:	e0bff917 	ldw	r2,-28(fp)
 2011ac4:	e0fffc17 	ldw	r3,-16(fp)
 2011ac8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2011acc:	e0bffb17 	ldw	r2,-20(fp)
 2011ad0:	e0fffc17 	ldw	r3,-16(fp)
 2011ad4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2011ad8:	d0a73217 	ldw	r2,-25400(gp)
 2011adc:	10800d03 	ldbu	r2,52(r2)
 2011ae0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2011ae4:	e0fffa03 	ldbu	r3,-24(fp)
 2011ae8:	e13ffa03 	ldbu	r4,-24(fp)
 2011aec:	d0a72f44 	addi	r2,gp,-25411
 2011af0:	2085883a 	add	r2,r4,r2
 2011af4:	10800003 	ldbu	r2,0(r2)
 2011af8:	1009883a 	mov	r4,r2
 2011afc:	d0a73217 	ldw	r2,-25400(gp)
 2011b00:	10800d43 	ldbu	r2,53(r2)
 2011b04:	0084303a 	nor	r2,zero,r2
 2011b08:	2084703a 	and	r2,r4,r2
 2011b0c:	1009883a 	mov	r4,r2
 2011b10:	d0a72f44 	addi	r2,gp,-25411
 2011b14:	1885883a 	add	r2,r3,r2
 2011b18:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2011b1c:	e0fffa03 	ldbu	r3,-24(fp)
 2011b20:	d0a72f44 	addi	r2,gp,-25411
 2011b24:	1885883a 	add	r2,r3,r2
 2011b28:	10800003 	ldbu	r2,0(r2)
 2011b2c:	10803fcc 	andi	r2,r2,255
 2011b30:	1000071e 	bne	r2,zero,2011b50 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2011b34:	d0a73217 	ldw	r2,-25400(gp)
 2011b38:	10800d83 	ldbu	r2,54(r2)
 2011b3c:	0084303a 	nor	r2,zero,r2
 2011b40:	1007883a 	mov	r3,r2
 2011b44:	d0a72f03 	ldbu	r2,-25412(gp)
 2011b48:	1884703a 	and	r2,r3,r2
 2011b4c:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 2011b50:	0001883a 	nop
 2011b54:	e037883a 	mov	sp,fp
 2011b58:	df000017 	ldw	fp,0(sp)
 2011b5c:	dec00104 	addi	sp,sp,4
 2011b60:	f800283a 	ret

02011b64 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2011b64:	defffb04 	addi	sp,sp,-20
 2011b68:	dfc00415 	stw	ra,16(sp)
 2011b6c:	df000315 	stw	fp,12(sp)
 2011b70:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2011b74:	0140dc04 	movi	r5,880
 2011b78:	010080b4 	movhi	r4,514
 2011b7c:	210a3c04 	addi	r4,r4,10480
 2011b80:	200fda80 	call	200fda8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 2011b84:	008080b4 	movhi	r2,514
 2011b88:	108a3c04 	addi	r2,r2,10480
 2011b8c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2011b90:	008080b4 	movhi	r2,514
 2011b94:	108a4704 	addi	r2,r2,10524
 2011b98:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2011b9c:	e03ffd0d 	sth	zero,-12(fp)
 2011ba0:	00001306 	br	2011bf0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2011ba4:	e0bffe17 	ldw	r2,-8(fp)
 2011ba8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2011bac:	e0bffe17 	ldw	r2,-8(fp)
 2011bb0:	e0ffff17 	ldw	r3,-4(fp)
 2011bb4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2011bb8:	e0bffe17 	ldw	r2,-8(fp)
 2011bbc:	00c00fc4 	movi	r3,63
 2011bc0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2011bc4:	e0bffe17 	ldw	r2,-8(fp)
 2011bc8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2011bcc:	e0bffe17 	ldw	r2,-8(fp)
 2011bd0:	10800b04 	addi	r2,r2,44
 2011bd4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2011bd8:	e0bfff17 	ldw	r2,-4(fp)
 2011bdc:	10800b04 	addi	r2,r2,44
 2011be0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2011be4:	e0bffd0b 	ldhu	r2,-12(fp)
 2011be8:	10800044 	addi	r2,r2,1
 2011bec:	e0bffd0d 	sth	r2,-12(fp)
 2011bf0:	e0bffd0b 	ldhu	r2,-12(fp)
 2011bf4:	108004f0 	cmpltui	r2,r2,19
 2011bf8:	103fea1e 	bne	r2,zero,2011ba4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2011bfc:	e0bffe17 	ldw	r2,-8(fp)
 2011c00:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2011c04:	e0bffe17 	ldw	r2,-8(fp)
 2011c08:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2011c0c:	e0bffe17 	ldw	r2,-8(fp)
 2011c10:	00c00fc4 	movi	r3,63
 2011c14:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2011c18:	e0bffe17 	ldw	r2,-8(fp)
 2011c1c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2011c20:	008080b4 	movhi	r2,514
 2011c24:	108a3c04 	addi	r2,r2,10480
 2011c28:	d0a73415 	stw	r2,-25392(gp)
#endif
}
 2011c2c:	0001883a 	nop
 2011c30:	e037883a 	mov	sp,fp
 2011c34:	dfc00117 	ldw	ra,4(sp)
 2011c38:	df000017 	ldw	fp,0(sp)
 2011c3c:	dec00204 	addi	sp,sp,8
 2011c40:	f800283a 	ret

02011c44 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2011c44:	defffa04 	addi	sp,sp,-24
 2011c48:	dfc00515 	stw	ra,20(sp)
 2011c4c:	df000415 	stw	fp,16(sp)
 2011c50:	df000404 	addi	fp,sp,16
 2011c54:	e13ffe15 	stw	r4,-8(fp)
 2011c58:	2805883a 	mov	r2,r5
 2011c5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2011c60:	e0bffe17 	ldw	r2,-8(fp)
 2011c64:	10800217 	ldw	r2,8(r2)
 2011c68:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2011c6c:	e0bffd17 	ldw	r2,-12(fp)
 2011c70:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 2011c74:	e0bffd17 	ldw	r2,-12(fp)
 2011c78:	e0ffff0b 	ldhu	r3,-4(fp)
 2011c7c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2011c80:	e0bffd17 	ldw	r2,-12(fp)
 2011c84:	10c00c03 	ldbu	r3,48(r2)
 2011c88:	00bff7c4 	movi	r2,-33
 2011c8c:	1884703a 	and	r2,r3,r2
 2011c90:	1007883a 	mov	r3,r2
 2011c94:	e0bffd17 	ldw	r2,-12(fp)
 2011c98:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2011c9c:	e0bffd17 	ldw	r2,-12(fp)
 2011ca0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 2011ca4:	e0bffd17 	ldw	r2,-12(fp)
 2011ca8:	10800c03 	ldbu	r2,48(r2)
 2011cac:	10803fcc 	andi	r2,r2,255
 2011cb0:	1000181e 	bne	r2,zero,2011d14 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 2011cb4:	e0bffd17 	ldw	r2,-12(fp)
 2011cb8:	10c00d83 	ldbu	r3,54(r2)
 2011cbc:	d0a72f03 	ldbu	r2,-25412(gp)
 2011cc0:	1884b03a 	or	r2,r3,r2
 2011cc4:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2011cc8:	e0bffd17 	ldw	r2,-12(fp)
 2011ccc:	10800d03 	ldbu	r2,52(r2)
 2011cd0:	10c03fcc 	andi	r3,r2,255
 2011cd4:	e0bffd17 	ldw	r2,-12(fp)
 2011cd8:	10800d03 	ldbu	r2,52(r2)
 2011cdc:	11003fcc 	andi	r4,r2,255
 2011ce0:	d0a72f44 	addi	r2,gp,-25411
 2011ce4:	2085883a 	add	r2,r4,r2
 2011ce8:	11000003 	ldbu	r4,0(r2)
 2011cec:	e0bffd17 	ldw	r2,-12(fp)
 2011cf0:	10800d43 	ldbu	r2,53(r2)
 2011cf4:	2084b03a 	or	r2,r4,r2
 2011cf8:	1009883a 	mov	r4,r2
 2011cfc:	d0a72f44 	addi	r2,gp,-25411
 2011d00:	1885883a 	add	r2,r3,r2
 2011d04:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2011d08:	00800044 	movi	r2,1
 2011d0c:	e0bffc05 	stb	r2,-16(fp)
 2011d10:	00000106 	br	2011d18 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 2011d14:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2011d18:	e13ffe17 	ldw	r4,-8(fp)
 2011d1c:	2011d380 	call	2011d38 <OS_FlagUnlink>
    return (sched);
 2011d20:	e0bffc03 	ldbu	r2,-16(fp)
}
 2011d24:	e037883a 	mov	sp,fp
 2011d28:	dfc00117 	ldw	ra,4(sp)
 2011d2c:	df000017 	ldw	fp,0(sp)
 2011d30:	dec00204 	addi	sp,sp,8
 2011d34:	f800283a 	ret

02011d38 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2011d38:	defffa04 	addi	sp,sp,-24
 2011d3c:	df000515 	stw	fp,20(sp)
 2011d40:	df000504 	addi	fp,sp,20
 2011d44:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2011d48:	e0bfff17 	ldw	r2,-4(fp)
 2011d4c:	10800117 	ldw	r2,4(r2)
 2011d50:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2011d54:	e0bfff17 	ldw	r2,-4(fp)
 2011d58:	10800017 	ldw	r2,0(r2)
 2011d5c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2011d60:	e0bffb17 	ldw	r2,-20(fp)
 2011d64:	10000b1e 	bne	r2,zero,2011d94 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2011d68:	e0bfff17 	ldw	r2,-4(fp)
 2011d6c:	10800317 	ldw	r2,12(r2)
 2011d70:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 2011d74:	e0bffd17 	ldw	r2,-12(fp)
 2011d78:	e0fffc17 	ldw	r3,-16(fp)
 2011d7c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2011d80:	e0bffc17 	ldw	r2,-16(fp)
 2011d84:	10000b26 	beq	r2,zero,2011db4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2011d88:	e0bffc17 	ldw	r2,-16(fp)
 2011d8c:	10000115 	stw	zero,4(r2)
 2011d90:	00000806 	br	2011db4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 2011d94:	e0bffb17 	ldw	r2,-20(fp)
 2011d98:	e0fffc17 	ldw	r3,-16(fp)
 2011d9c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 2011da0:	e0bffc17 	ldw	r2,-16(fp)
 2011da4:	10000326 	beq	r2,zero,2011db4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2011da8:	e0bffc17 	ldw	r2,-16(fp)
 2011dac:	e0fffb17 	ldw	r3,-20(fp)
 2011db0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2011db4:	e0bfff17 	ldw	r2,-4(fp)
 2011db8:	10800217 	ldw	r2,8(r2)
 2011dbc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2011dc0:	e0bffe17 	ldw	r2,-8(fp)
 2011dc4:	10000a15 	stw	zero,40(r2)
#endif
}
 2011dc8:	0001883a 	nop
 2011dcc:	e037883a 	mov	sp,fp
 2011dd0:	df000017 	ldw	fp,0(sp)
 2011dd4:	dec00104 	addi	sp,sp,4
 2011dd8:	f800283a 	ret

02011ddc <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 2011ddc:	defffa04 	addi	sp,sp,-24
 2011de0:	df000515 	stw	fp,20(sp)
 2011de4:	df000504 	addi	fp,sp,20
 2011de8:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 2011dec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2011df0:	e0bfff17 	ldw	r2,-4(fp)
 2011df4:	1000021e 	bne	r2,zero,2011e00 <OSMboxAccept+0x24>
        return ((void *)0);
 2011df8:	0005883a 	mov	r2,zero
 2011dfc:	00001906 	br	2011e64 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2011e00:	e0bfff17 	ldw	r2,-4(fp)
 2011e04:	10800003 	ldbu	r2,0(r2)
 2011e08:	10803fcc 	andi	r2,r2,255
 2011e0c:	10800060 	cmpeqi	r2,r2,1
 2011e10:	1000021e 	bne	r2,zero,2011e1c <OSMboxAccept+0x40>
        return ((void *)0);
 2011e14:	0005883a 	mov	r2,zero
 2011e18:	00001206 	br	2011e64 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011e1c:	0005303a 	rdctl	r2,status
 2011e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011e24:	e0fffd17 	ldw	r3,-12(fp)
 2011e28:	00bfff84 	movi	r2,-2
 2011e2c:	1884703a 	and	r2,r3,r2
 2011e30:	1001703a 	wrctl	status,r2
  
  return context;
 2011e34:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2011e38:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 2011e3c:	e0bfff17 	ldw	r2,-4(fp)
 2011e40:	10800117 	ldw	r2,4(r2)
 2011e44:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 2011e48:	e0bfff17 	ldw	r2,-4(fp)
 2011e4c:	10000115 	stw	zero,4(r2)
 2011e50:	e0bffb17 	ldw	r2,-20(fp)
 2011e54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011e58:	e0bffe17 	ldw	r2,-8(fp)
 2011e5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 2011e60:	e0bffc17 	ldw	r2,-16(fp)
}
 2011e64:	e037883a 	mov	sp,fp
 2011e68:	df000017 	ldw	fp,0(sp)
 2011e6c:	dec00104 	addi	sp,sp,4
 2011e70:	f800283a 	ret

02011e74 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 2011e74:	defff904 	addi	sp,sp,-28
 2011e78:	dfc00615 	stw	ra,24(sp)
 2011e7c:	df000515 	stw	fp,20(sp)
 2011e80:	df000504 	addi	fp,sp,20
 2011e84:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011e88:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2011e8c:	d0a73103 	ldbu	r2,-25404(gp)
 2011e90:	10803fcc 	andi	r2,r2,255
 2011e94:	10000226 	beq	r2,zero,2011ea0 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2011e98:	0005883a 	mov	r2,zero
 2011e9c:	00002506 	br	2011f34 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011ea0:	0005303a 	rdctl	r2,status
 2011ea4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011ea8:	e0fffe17 	ldw	r3,-8(fp)
 2011eac:	00bfff84 	movi	r2,-2
 2011eb0:	1884703a 	and	r2,r3,r2
 2011eb4:	1001703a 	wrctl	status,r2
  
  return context;
 2011eb8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2011ebc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2011ec0:	d0a73017 	ldw	r2,-25408(gp)
 2011ec4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2011ec8:	d0a73017 	ldw	r2,-25408(gp)
 2011ecc:	10000326 	beq	r2,zero,2011edc <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2011ed0:	d0a73017 	ldw	r2,-25408(gp)
 2011ed4:	10800117 	ldw	r2,4(r2)
 2011ed8:	d0a73015 	stw	r2,-25408(gp)
 2011edc:	e0bffb17 	ldw	r2,-20(fp)
 2011ee0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011ee4:	e0bffc17 	ldw	r2,-16(fp)
 2011ee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 2011eec:	e0bffd17 	ldw	r2,-12(fp)
 2011ef0:	10000f26 	beq	r2,zero,2011f30 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 2011ef4:	e0bffd17 	ldw	r2,-12(fp)
 2011ef8:	00c00044 	movi	r3,1
 2011efc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2011f00:	e0bffd17 	ldw	r2,-12(fp)
 2011f04:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2011f08:	e0bffd17 	ldw	r2,-12(fp)
 2011f0c:	e0ffff17 	ldw	r3,-4(fp)
 2011f10:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 2011f14:	e0bffd17 	ldw	r2,-12(fp)
 2011f18:	00c00fc4 	movi	r3,63
 2011f1c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2011f20:	e0bffd17 	ldw	r2,-12(fp)
 2011f24:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2011f28:	e13ffd17 	ldw	r4,-12(fp)
 2011f2c:	200f9c80 	call	200f9c8 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 2011f30:	e0bffd17 	ldw	r2,-12(fp)
}
 2011f34:	e037883a 	mov	sp,fp
 2011f38:	dfc00117 	ldw	ra,4(sp)
 2011f3c:	df000017 	ldw	fp,0(sp)
 2011f40:	dec00204 	addi	sp,sp,8
 2011f44:	f800283a 	ret

02011f48 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2011f48:	defff304 	addi	sp,sp,-52
 2011f4c:	dfc00c15 	stw	ra,48(sp)
 2011f50:	df000b15 	stw	fp,44(sp)
 2011f54:	df000b04 	addi	fp,sp,44
 2011f58:	e13ffd15 	stw	r4,-12(fp)
 2011f5c:	2805883a 	mov	r2,r5
 2011f60:	e1bfff15 	stw	r6,-4(fp)
 2011f64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2011f68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2011f6c:	e0bfff17 	ldw	r2,-4(fp)
 2011f70:	1000021e 	bne	r2,zero,2011f7c <OSMboxDel+0x34>
        return (pevent);
 2011f74:	e0bffd17 	ldw	r2,-12(fp)
 2011f78:	00007e06 	br	2012174 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2011f7c:	e0bffd17 	ldw	r2,-12(fp)
 2011f80:	1000051e 	bne	r2,zero,2011f98 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2011f84:	e0bfff17 	ldw	r2,-4(fp)
 2011f88:	00c00104 	movi	r3,4
 2011f8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2011f90:	e0bffd17 	ldw	r2,-12(fp)
 2011f94:	00007706 	br	2012174 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2011f98:	e0bffd17 	ldw	r2,-12(fp)
 2011f9c:	10800003 	ldbu	r2,0(r2)
 2011fa0:	10803fcc 	andi	r2,r2,255
 2011fa4:	10800060 	cmpeqi	r2,r2,1
 2011fa8:	1000051e 	bne	r2,zero,2011fc0 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2011fac:	e0bfff17 	ldw	r2,-4(fp)
 2011fb0:	00c00044 	movi	r3,1
 2011fb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2011fb8:	e0bffd17 	ldw	r2,-12(fp)
 2011fbc:	00006d06 	br	2012174 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2011fc0:	d0a73103 	ldbu	r2,-25404(gp)
 2011fc4:	10803fcc 	andi	r2,r2,255
 2011fc8:	10000526 	beq	r2,zero,2011fe0 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2011fcc:	e0bfff17 	ldw	r2,-4(fp)
 2011fd0:	00c003c4 	movi	r3,15
 2011fd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2011fd8:	e0bffd17 	ldw	r2,-12(fp)
 2011fdc:	00006506 	br	2012174 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011fe0:	0005303a 	rdctl	r2,status
 2011fe4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011fe8:	e0fffc17 	ldw	r3,-16(fp)
 2011fec:	00bfff84 	movi	r2,-2
 2011ff0:	1884703a 	and	r2,r3,r2
 2011ff4:	1001703a 	wrctl	status,r2
  
  return context;
 2011ff8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2011ffc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2012000:	e0bffd17 	ldw	r2,-12(fp)
 2012004:	10800283 	ldbu	r2,10(r2)
 2012008:	10803fcc 	andi	r2,r2,255
 201200c:	10000326 	beq	r2,zero,201201c <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2012010:	00800044 	movi	r2,1
 2012014:	e0bff505 	stb	r2,-44(fp)
 2012018:	00000106 	br	2012020 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201201c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2012020:	e0bffe03 	ldbu	r2,-8(fp)
 2012024:	10000326 	beq	r2,zero,2012034 <OSMboxDel+0xec>
 2012028:	10800060 	cmpeqi	r2,r2,1
 201202c:	1000281e 	bne	r2,zero,20120d0 <OSMboxDel+0x188>
 2012030:	00004506 	br	2012148 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 2012034:	e0bff503 	ldbu	r2,-44(fp)
 2012038:	1000161e 	bne	r2,zero,2012094 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201203c:	e0bffd17 	ldw	r2,-12(fp)
 2012040:	00c00fc4 	movi	r3,63
 2012044:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2012048:	e0bffd17 	ldw	r2,-12(fp)
 201204c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 2012050:	e0bffd17 	ldw	r2,-12(fp)
 2012054:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 2012058:	d0e73017 	ldw	r3,-25408(gp)
 201205c:	e0bffd17 	ldw	r2,-12(fp)
 2012060:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 2012064:	e0bffd17 	ldw	r2,-12(fp)
 2012068:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201206c:	e0bffd17 	ldw	r2,-12(fp)
 2012070:	d0a73015 	stw	r2,-25408(gp)
 2012074:	e0bff717 	ldw	r2,-36(fp)
 2012078:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201207c:	e0bff817 	ldw	r2,-32(fp)
 2012080:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 2012084:	e0bfff17 	ldw	r2,-4(fp)
 2012088:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201208c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2012090:	00003706 	br	2012170 <OSMboxDel+0x228>
 2012094:	e0bff717 	ldw	r2,-36(fp)
 2012098:	e0bff915 	stw	r2,-28(fp)
 201209c:	e0bff917 	ldw	r2,-28(fp)
 20120a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 20120a4:	e0bfff17 	ldw	r2,-4(fp)
 20120a8:	00c01244 	movi	r3,73
 20120ac:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 20120b0:	e0bffd17 	ldw	r2,-12(fp)
 20120b4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20120b8:	00002d06 	br	2012170 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20120bc:	000f883a 	mov	r7,zero
 20120c0:	01800084 	movi	r6,2
 20120c4:	000b883a 	mov	r5,zero
 20120c8:	e13ffd17 	ldw	r4,-12(fp)
 20120cc:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 20120d0:	e0bffd17 	ldw	r2,-12(fp)
 20120d4:	10800283 	ldbu	r2,10(r2)
 20120d8:	10803fcc 	andi	r2,r2,255
 20120dc:	103ff71e 	bne	r2,zero,20120bc <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20120e0:	e0bffd17 	ldw	r2,-12(fp)
 20120e4:	00c00fc4 	movi	r3,63
 20120e8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20120ec:	e0bffd17 	ldw	r2,-12(fp)
 20120f0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20120f4:	e0bffd17 	ldw	r2,-12(fp)
 20120f8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 20120fc:	d0e73017 	ldw	r3,-25408(gp)
 2012100:	e0bffd17 	ldw	r2,-12(fp)
 2012104:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2012108:	e0bffd17 	ldw	r2,-12(fp)
 201210c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2012110:	e0bffd17 	ldw	r2,-12(fp)
 2012114:	d0a73015 	stw	r2,-25408(gp)
 2012118:	e0bff717 	ldw	r2,-36(fp)
 201211c:	e0bffa15 	stw	r2,-24(fp)
 2012120:	e0bffa17 	ldw	r2,-24(fp)
 2012124:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2012128:	e0bff503 	ldbu	r2,-44(fp)
 201212c:	10800058 	cmpnei	r2,r2,1
 2012130:	1000011e 	bne	r2,zero,2012138 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2012134:	200fe640 	call	200fe64 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2012138:	e0bfff17 	ldw	r2,-4(fp)
 201213c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2012140:	e03ff615 	stw	zero,-40(fp)
             break;
 2012144:	00000a06 	br	2012170 <OSMboxDel+0x228>
 2012148:	e0bff717 	ldw	r2,-36(fp)
 201214c:	e0bffb15 	stw	r2,-20(fp)
 2012150:	e0bffb17 	ldw	r2,-20(fp)
 2012154:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2012158:	e0bfff17 	ldw	r2,-4(fp)
 201215c:	00c001c4 	movi	r3,7
 2012160:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 2012164:	e0bffd17 	ldw	r2,-12(fp)
 2012168:	e0bff615 	stw	r2,-40(fp)
             break;
 201216c:	0001883a 	nop
    }
    return (pevent_return);
 2012170:	e0bff617 	ldw	r2,-40(fp)
}
 2012174:	e037883a 	mov	sp,fp
 2012178:	dfc00117 	ldw	ra,4(sp)
 201217c:	df000017 	ldw	fp,0(sp)
 2012180:	dec00204 	addi	sp,sp,8
 2012184:	f800283a 	ret

02012188 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2012188:	defff404 	addi	sp,sp,-48
 201218c:	dfc00b15 	stw	ra,44(sp)
 2012190:	df000a15 	stw	fp,40(sp)
 2012194:	df000a04 	addi	fp,sp,40
 2012198:	e13ffd15 	stw	r4,-12(fp)
 201219c:	2805883a 	mov	r2,r5
 20121a0:	e1bfff15 	stw	r6,-4(fp)
 20121a4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20121a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20121ac:	e0bfff17 	ldw	r2,-4(fp)
 20121b0:	1000021e 	bne	r2,zero,20121bc <OSMboxPend+0x34>
        return ((void *)0);
 20121b4:	0005883a 	mov	r2,zero
 20121b8:	00007b06 	br	20123a8 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20121bc:	e0bffd17 	ldw	r2,-12(fp)
 20121c0:	1000051e 	bne	r2,zero,20121d8 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20121c4:	e0bfff17 	ldw	r2,-4(fp)
 20121c8:	00c00104 	movi	r3,4
 20121cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20121d0:	0005883a 	mov	r2,zero
 20121d4:	00007406 	br	20123a8 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 20121d8:	e0bffd17 	ldw	r2,-12(fp)
 20121dc:	10800003 	ldbu	r2,0(r2)
 20121e0:	10803fcc 	andi	r2,r2,255
 20121e4:	10800060 	cmpeqi	r2,r2,1
 20121e8:	1000051e 	bne	r2,zero,2012200 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20121ec:	e0bfff17 	ldw	r2,-4(fp)
 20121f0:	00c00044 	movi	r3,1
 20121f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20121f8:	0005883a 	mov	r2,zero
 20121fc:	00006a06 	br	20123a8 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2012200:	d0a73103 	ldbu	r2,-25404(gp)
 2012204:	10803fcc 	andi	r2,r2,255
 2012208:	10000526 	beq	r2,zero,2012220 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201220c:	e0bfff17 	ldw	r2,-4(fp)
 2012210:	00c00084 	movi	r3,2
 2012214:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2012218:	0005883a 	mov	r2,zero
 201221c:	00006206 	br	20123a8 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2012220:	d0a72303 	ldbu	r2,-25460(gp)
 2012224:	10803fcc 	andi	r2,r2,255
 2012228:	10000526 	beq	r2,zero,2012240 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201222c:	e0bfff17 	ldw	r2,-4(fp)
 2012230:	00c00344 	movi	r3,13
 2012234:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2012238:	0005883a 	mov	r2,zero
 201223c:	00005a06 	br	20123a8 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012240:	0005303a 	rdctl	r2,status
 2012244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012248:	e0fffc17 	ldw	r3,-16(fp)
 201224c:	00bfff84 	movi	r2,-2
 2012250:	1884703a 	and	r2,r3,r2
 2012254:	1001703a 	wrctl	status,r2
  
  return context;
 2012258:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201225c:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2012260:	e0bffd17 	ldw	r2,-12(fp)
 2012264:	10800117 	ldw	r2,4(r2)
 2012268:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201226c:	e0bff617 	ldw	r2,-40(fp)
 2012270:	10000a26 	beq	r2,zero,201229c <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2012274:	e0bffd17 	ldw	r2,-12(fp)
 2012278:	10000115 	stw	zero,4(r2)
 201227c:	e0bff717 	ldw	r2,-36(fp)
 2012280:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012284:	e0bff817 	ldw	r2,-32(fp)
 2012288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201228c:	e0bfff17 	ldw	r2,-4(fp)
 2012290:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2012294:	e0bff617 	ldw	r2,-40(fp)
 2012298:	00004306 	br	20123a8 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 201229c:	d0a73217 	ldw	r2,-25400(gp)
 20122a0:	d0e73217 	ldw	r3,-25400(gp)
 20122a4:	18c00c03 	ldbu	r3,48(r3)
 20122a8:	18c00094 	ori	r3,r3,2
 20122ac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20122b0:	d0a73217 	ldw	r2,-25400(gp)
 20122b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 20122b8:	d0a73217 	ldw	r2,-25400(gp)
 20122bc:	e0fffe0b 	ldhu	r3,-8(fp)
 20122c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 20122c4:	e13ffd17 	ldw	r4,-12(fp)
 20122c8:	200f5b00 	call	200f5b0 <OS_EventTaskWait>
 20122cc:	e0bff717 	ldw	r2,-36(fp)
 20122d0:	e0bffb15 	stw	r2,-20(fp)
 20122d4:	e0bffb17 	ldw	r2,-20(fp)
 20122d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 20122dc:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20122e0:	0005303a 	rdctl	r2,status
 20122e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20122e8:	e0fff917 	ldw	r3,-28(fp)
 20122ec:	00bfff84 	movi	r2,-2
 20122f0:	1884703a 	and	r2,r3,r2
 20122f4:	1001703a 	wrctl	status,r2
  
  return context;
 20122f8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 20122fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2012300:	d0a73217 	ldw	r2,-25400(gp)
 2012304:	10800c43 	ldbu	r2,49(r2)
 2012308:	10803fcc 	andi	r2,r2,255
 201230c:	10000326 	beq	r2,zero,201231c <OSMboxPend+0x194>
 2012310:	108000a0 	cmpeqi	r2,r2,2
 2012314:	1000071e 	bne	r2,zero,2012334 <OSMboxPend+0x1ac>
 2012318:	00000b06 	br	2012348 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 201231c:	d0a73217 	ldw	r2,-25400(gp)
 2012320:	10800917 	ldw	r2,36(r2)
 2012324:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2012328:	e0bfff17 	ldw	r2,-4(fp)
 201232c:	10000005 	stb	zero,0(r2)
             break;
 2012330:	00000e06 	br	201236c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2012334:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2012338:	e0bfff17 	ldw	r2,-4(fp)
 201233c:	00c00384 	movi	r3,14
 2012340:	10c00005 	stb	r3,0(r2)
             break;
 2012344:	00000906 	br	201236c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2012348:	d0a73217 	ldw	r2,-25400(gp)
 201234c:	e17ffd17 	ldw	r5,-12(fp)
 2012350:	1009883a 	mov	r4,r2
 2012354:	200f8100 	call	200f810 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2012358:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201235c:	e0bfff17 	ldw	r2,-4(fp)
 2012360:	00c00284 	movi	r3,10
 2012364:	10c00005 	stb	r3,0(r2)
             break;
 2012368:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201236c:	d0a73217 	ldw	r2,-25400(gp)
 2012370:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2012374:	d0a73217 	ldw	r2,-25400(gp)
 2012378:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201237c:	d0a73217 	ldw	r2,-25400(gp)
 2012380:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2012384:	d0a73217 	ldw	r2,-25400(gp)
 2012388:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201238c:	d0a73217 	ldw	r2,-25400(gp)
 2012390:	10000915 	stw	zero,36(r2)
 2012394:	e0bff717 	ldw	r2,-36(fp)
 2012398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201239c:	e0bffa17 	ldw	r2,-24(fp)
 20123a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 20123a4:	e0bff617 	ldw	r2,-40(fp)
}
 20123a8:	e037883a 	mov	sp,fp
 20123ac:	dfc00117 	ldw	ra,4(sp)
 20123b0:	df000017 	ldw	fp,0(sp)
 20123b4:	dec00204 	addi	sp,sp,8
 20123b8:	f800283a 	ret

020123bc <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20123bc:	defff604 	addi	sp,sp,-40
 20123c0:	dfc00915 	stw	ra,36(sp)
 20123c4:	df000815 	stw	fp,32(sp)
 20123c8:	df000804 	addi	fp,sp,32
 20123cc:	e13ffd15 	stw	r4,-12(fp)
 20123d0:	2805883a 	mov	r2,r5
 20123d4:	e1bfff15 	stw	r6,-4(fp)
 20123d8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20123dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20123e0:	e0bfff17 	ldw	r2,-4(fp)
 20123e4:	1000021e 	bne	r2,zero,20123f0 <OSMboxPendAbort+0x34>
        return (0);
 20123e8:	0005883a 	mov	r2,zero
 20123ec:	00004906 	br	2012514 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20123f0:	e0bffd17 	ldw	r2,-12(fp)
 20123f4:	1000051e 	bne	r2,zero,201240c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20123f8:	e0bfff17 	ldw	r2,-4(fp)
 20123fc:	00c00104 	movi	r3,4
 2012400:	10c00005 	stb	r3,0(r2)
        return (0);
 2012404:	0005883a 	mov	r2,zero
 2012408:	00004206 	br	2012514 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201240c:	e0bffd17 	ldw	r2,-12(fp)
 2012410:	10800003 	ldbu	r2,0(r2)
 2012414:	10803fcc 	andi	r2,r2,255
 2012418:	10800060 	cmpeqi	r2,r2,1
 201241c:	1000051e 	bne	r2,zero,2012434 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2012420:	e0bfff17 	ldw	r2,-4(fp)
 2012424:	00c00044 	movi	r3,1
 2012428:	10c00005 	stb	r3,0(r2)
        return (0);
 201242c:	0005883a 	mov	r2,zero
 2012430:	00003806 	br	2012514 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012434:	0005303a 	rdctl	r2,status
 2012438:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201243c:	e0fffc17 	ldw	r3,-16(fp)
 2012440:	00bfff84 	movi	r2,-2
 2012444:	1884703a 	and	r2,r3,r2
 2012448:	1001703a 	wrctl	status,r2
  
  return context;
 201244c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012450:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2012454:	e0bffd17 	ldw	r2,-12(fp)
 2012458:	10800283 	ldbu	r2,10(r2)
 201245c:	10803fcc 	andi	r2,r2,255
 2012460:	10002526 	beq	r2,zero,20124f8 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2012464:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2012468:	e0bffe03 	ldbu	r2,-8(fp)
 201246c:	10800060 	cmpeqi	r2,r2,1
 2012470:	10000e26 	beq	r2,zero,20124ac <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2012474:	00000806 	br	2012498 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2012478:	01c00084 	movi	r7,2
 201247c:	01800084 	movi	r6,2
 2012480:	000b883a 	mov	r5,zero
 2012484:	e13ffd17 	ldw	r4,-12(fp)
 2012488:	200f4180 	call	200f418 <OS_EventTaskRdy>
                     nbr_tasks++;
 201248c:	e0bff803 	ldbu	r2,-32(fp)
 2012490:	10800044 	addi	r2,r2,1
 2012494:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2012498:	e0bffd17 	ldw	r2,-12(fp)
 201249c:	10800283 	ldbu	r2,10(r2)
 20124a0:	10803fcc 	andi	r2,r2,255
 20124a4:	103ff41e 	bne	r2,zero,2012478 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20124a8:	00000906 	br	20124d0 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 20124ac:	01c00084 	movi	r7,2
 20124b0:	01800084 	movi	r6,2
 20124b4:	000b883a 	mov	r5,zero
 20124b8:	e13ffd17 	ldw	r4,-12(fp)
 20124bc:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 nbr_tasks++;
 20124c0:	e0bff803 	ldbu	r2,-32(fp)
 20124c4:	10800044 	addi	r2,r2,1
 20124c8:	e0bff805 	stb	r2,-32(fp)
                 break;
 20124cc:	0001883a 	nop
 20124d0:	e0bff917 	ldw	r2,-28(fp)
 20124d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20124d8:	e0bffa17 	ldw	r2,-24(fp)
 20124dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20124e0:	200fe640 	call	200fe64 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20124e4:	e0bfff17 	ldw	r2,-4(fp)
 20124e8:	00c00384 	movi	r3,14
 20124ec:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 20124f0:	e0bff803 	ldbu	r2,-32(fp)
 20124f4:	00000706 	br	2012514 <OSMboxPendAbort+0x158>
 20124f8:	e0bff917 	ldw	r2,-28(fp)
 20124fc:	e0bffb15 	stw	r2,-20(fp)
 2012500:	e0bffb17 	ldw	r2,-20(fp)
 2012504:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012508:	e0bfff17 	ldw	r2,-4(fp)
 201250c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2012510:	0005883a 	mov	r2,zero
}
 2012514:	e037883a 	mov	sp,fp
 2012518:	dfc00117 	ldw	ra,4(sp)
 201251c:	df000017 	ldw	fp,0(sp)
 2012520:	dec00204 	addi	sp,sp,8
 2012524:	f800283a 	ret

02012528 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2012528:	defff704 	addi	sp,sp,-36
 201252c:	dfc00815 	stw	ra,32(sp)
 2012530:	df000715 	stw	fp,28(sp)
 2012534:	df000704 	addi	fp,sp,28
 2012538:	e13ffe15 	stw	r4,-8(fp)
 201253c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012540:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2012544:	e0bffe17 	ldw	r2,-8(fp)
 2012548:	1000021e 	bne	r2,zero,2012554 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201254c:	00800104 	movi	r2,4
 2012550:	00003406 	br	2012624 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2012554:	e0bfff17 	ldw	r2,-4(fp)
 2012558:	1000021e 	bne	r2,zero,2012564 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 201255c:	008000c4 	movi	r2,3
 2012560:	00003006 	br	2012624 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2012564:	e0bffe17 	ldw	r2,-8(fp)
 2012568:	10800003 	ldbu	r2,0(r2)
 201256c:	10803fcc 	andi	r2,r2,255
 2012570:	10800060 	cmpeqi	r2,r2,1
 2012574:	1000021e 	bne	r2,zero,2012580 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2012578:	00800044 	movi	r2,1
 201257c:	00002906 	br	2012624 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012580:	0005303a 	rdctl	r2,status
 2012584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012588:	e0fffd17 	ldw	r3,-12(fp)
 201258c:	00bfff84 	movi	r2,-2
 2012590:	1884703a 	and	r2,r3,r2
 2012594:	1001703a 	wrctl	status,r2
  
  return context;
 2012598:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201259c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 20125a0:	e0bffe17 	ldw	r2,-8(fp)
 20125a4:	10800283 	ldbu	r2,10(r2)
 20125a8:	10803fcc 	andi	r2,r2,255
 20125ac:	10000c26 	beq	r2,zero,20125e0 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20125b0:	000f883a 	mov	r7,zero
 20125b4:	01800084 	movi	r6,2
 20125b8:	e17fff17 	ldw	r5,-4(fp)
 20125bc:	e13ffe17 	ldw	r4,-8(fp)
 20125c0:	200f4180 	call	200f418 <OS_EventTaskRdy>
 20125c4:	e0bff917 	ldw	r2,-28(fp)
 20125c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20125cc:	e0bffa17 	ldw	r2,-24(fp)
 20125d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 20125d4:	200fe640 	call	200fe64 <OS_Sched>
        return (OS_ERR_NONE);
 20125d8:	0005883a 	mov	r2,zero
 20125dc:	00001106 	br	2012624 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 20125e0:	e0bffe17 	ldw	r2,-8(fp)
 20125e4:	10800117 	ldw	r2,4(r2)
 20125e8:	10000626 	beq	r2,zero,2012604 <OSMboxPost+0xdc>
 20125ec:	e0bff917 	ldw	r2,-28(fp)
 20125f0:	e0bffb15 	stw	r2,-20(fp)
 20125f4:	e0bffb17 	ldw	r2,-20(fp)
 20125f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 20125fc:	00800504 	movi	r2,20
 2012600:	00000806 	br	2012624 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2012604:	e0bffe17 	ldw	r2,-8(fp)
 2012608:	e0ffff17 	ldw	r3,-4(fp)
 201260c:	10c00115 	stw	r3,4(r2)
 2012610:	e0bff917 	ldw	r2,-28(fp)
 2012614:	e0bffc15 	stw	r2,-16(fp)
 2012618:	e0bffc17 	ldw	r2,-16(fp)
 201261c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2012620:	0005883a 	mov	r2,zero
}
 2012624:	e037883a 	mov	sp,fp
 2012628:	dfc00117 	ldw	ra,4(sp)
 201262c:	df000017 	ldw	fp,0(sp)
 2012630:	dec00204 	addi	sp,sp,8
 2012634:	f800283a 	ret

02012638 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2012638:	defff604 	addi	sp,sp,-40
 201263c:	dfc00915 	stw	ra,36(sp)
 2012640:	df000815 	stw	fp,32(sp)
 2012644:	df000804 	addi	fp,sp,32
 2012648:	e13ffd15 	stw	r4,-12(fp)
 201264c:	e17ffe15 	stw	r5,-8(fp)
 2012650:	3005883a 	mov	r2,r6
 2012654:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012658:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201265c:	e0bffd17 	ldw	r2,-12(fp)
 2012660:	1000021e 	bne	r2,zero,201266c <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2012664:	00800104 	movi	r2,4
 2012668:	00004506 	br	2012780 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201266c:	e0bffe17 	ldw	r2,-8(fp)
 2012670:	1000021e 	bne	r2,zero,201267c <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2012674:	008000c4 	movi	r2,3
 2012678:	00004106 	br	2012780 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201267c:	e0bffd17 	ldw	r2,-12(fp)
 2012680:	10800003 	ldbu	r2,0(r2)
 2012684:	10803fcc 	andi	r2,r2,255
 2012688:	10800060 	cmpeqi	r2,r2,1
 201268c:	1000021e 	bne	r2,zero,2012698 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2012690:	00800044 	movi	r2,1
 2012694:	00003a06 	br	2012780 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012698:	0005303a 	rdctl	r2,status
 201269c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20126a0:	e0fffc17 	ldw	r3,-16(fp)
 20126a4:	00bfff84 	movi	r2,-2
 20126a8:	1884703a 	and	r2,r3,r2
 20126ac:	1001703a 	wrctl	status,r2
  
  return context;
 20126b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20126b4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 20126b8:	e0bffd17 	ldw	r2,-12(fp)
 20126bc:	10800283 	ldbu	r2,10(r2)
 20126c0:	10803fcc 	andi	r2,r2,255
 20126c4:	10001d26 	beq	r2,zero,201273c <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20126c8:	e0bfff03 	ldbu	r2,-4(fp)
 20126cc:	1080004c 	andi	r2,r2,1
 20126d0:	10000b26 	beq	r2,zero,2012700 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 20126d4:	00000506 	br	20126ec <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20126d8:	000f883a 	mov	r7,zero
 20126dc:	01800084 	movi	r6,2
 20126e0:	e17ffe17 	ldw	r5,-8(fp)
 20126e4:	e13ffd17 	ldw	r4,-12(fp)
 20126e8:	200f4180 	call	200f418 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 20126ec:	e0bffd17 	ldw	r2,-12(fp)
 20126f0:	10800283 	ldbu	r2,10(r2)
 20126f4:	10803fcc 	andi	r2,r2,255
 20126f8:	103ff71e 	bne	r2,zero,20126d8 <OSMboxPostOpt+0xa0>
 20126fc:	00000506 	br	2012714 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2012700:	000f883a 	mov	r7,zero
 2012704:	01800084 	movi	r6,2
 2012708:	e17ffe17 	ldw	r5,-8(fp)
 201270c:	e13ffd17 	ldw	r4,-12(fp)
 2012710:	200f4180 	call	200f418 <OS_EventTaskRdy>
 2012714:	e0bff817 	ldw	r2,-32(fp)
 2012718:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201271c:	e0bff917 	ldw	r2,-28(fp)
 2012720:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2012724:	e0bfff03 	ldbu	r2,-4(fp)
 2012728:	1080010c 	andi	r2,r2,4
 201272c:	1000011e 	bne	r2,zero,2012734 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2012730:	200fe640 	call	200fe64 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2012734:	0005883a 	mov	r2,zero
 2012738:	00001106 	br	2012780 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201273c:	e0bffd17 	ldw	r2,-12(fp)
 2012740:	10800117 	ldw	r2,4(r2)
 2012744:	10000626 	beq	r2,zero,2012760 <OSMboxPostOpt+0x128>
 2012748:	e0bff817 	ldw	r2,-32(fp)
 201274c:	e0bffa15 	stw	r2,-24(fp)
 2012750:	e0bffa17 	ldw	r2,-24(fp)
 2012754:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2012758:	00800504 	movi	r2,20
 201275c:	00000806 	br	2012780 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2012760:	e0bffd17 	ldw	r2,-12(fp)
 2012764:	e0fffe17 	ldw	r3,-8(fp)
 2012768:	10c00115 	stw	r3,4(r2)
 201276c:	e0bff817 	ldw	r2,-32(fp)
 2012770:	e0bffb15 	stw	r2,-20(fp)
 2012774:	e0bffb17 	ldw	r2,-20(fp)
 2012778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201277c:	0005883a 	mov	r2,zero
}
 2012780:	e037883a 	mov	sp,fp
 2012784:	dfc00117 	ldw	ra,4(sp)
 2012788:	df000017 	ldw	fp,0(sp)
 201278c:	dec00204 	addi	sp,sp,8
 2012790:	f800283a 	ret

02012794 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 2012794:	defff704 	addi	sp,sp,-36
 2012798:	df000815 	stw	fp,32(sp)
 201279c:	df000804 	addi	fp,sp,32
 20127a0:	e13ffe15 	stw	r4,-8(fp)
 20127a4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20127a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20127ac:	e0bffe17 	ldw	r2,-8(fp)
 20127b0:	1000021e 	bne	r2,zero,20127bc <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20127b4:	00800104 	movi	r2,4
 20127b8:	00003606 	br	2012894 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 20127bc:	e0bfff17 	ldw	r2,-4(fp)
 20127c0:	1000021e 	bne	r2,zero,20127cc <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20127c4:	00800244 	movi	r2,9
 20127c8:	00003206 	br	2012894 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 20127cc:	e0bffe17 	ldw	r2,-8(fp)
 20127d0:	10800003 	ldbu	r2,0(r2)
 20127d4:	10803fcc 	andi	r2,r2,255
 20127d8:	10800060 	cmpeqi	r2,r2,1
 20127dc:	1000021e 	bne	r2,zero,20127e8 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 20127e0:	00800044 	movi	r2,1
 20127e4:	00002b06 	br	2012894 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20127e8:	0005303a 	rdctl	r2,status
 20127ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20127f0:	e0fffd17 	ldw	r3,-12(fp)
 20127f4:	00bfff84 	movi	r2,-2
 20127f8:	1884703a 	and	r2,r3,r2
 20127fc:	1001703a 	wrctl	status,r2
  
  return context;
 2012800:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2012804:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2012808:	e0bffe17 	ldw	r2,-8(fp)
 201280c:	10c00283 	ldbu	r3,10(r2)
 2012810:	e0bfff17 	ldw	r2,-4(fp)
 2012814:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2012818:	e0bffe17 	ldw	r2,-8(fp)
 201281c:	108002c4 	addi	r2,r2,11
 2012820:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 2012824:	e0bfff17 	ldw	r2,-4(fp)
 2012828:	10800104 	addi	r2,r2,4
 201282c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2012830:	e03ff805 	stb	zero,-32(fp)
 2012834:	00000b06 	br	2012864 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2012838:	e0bffa17 	ldw	r2,-24(fp)
 201283c:	10c00044 	addi	r3,r2,1
 2012840:	e0fffa15 	stw	r3,-24(fp)
 2012844:	e0fff917 	ldw	r3,-28(fp)
 2012848:	19000044 	addi	r4,r3,1
 201284c:	e13ff915 	stw	r4,-28(fp)
 2012850:	18c00003 	ldbu	r3,0(r3)
 2012854:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2012858:	e0bff803 	ldbu	r2,-32(fp)
 201285c:	10800044 	addi	r2,r2,1
 2012860:	e0bff805 	stb	r2,-32(fp)
 2012864:	e0bff803 	ldbu	r2,-32(fp)
 2012868:	108000f0 	cmpltui	r2,r2,3
 201286c:	103ff21e 	bne	r2,zero,2012838 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2012870:	e0bffe17 	ldw	r2,-8(fp)
 2012874:	10c00117 	ldw	r3,4(r2)
 2012878:	e0bfff17 	ldw	r2,-4(fp)
 201287c:	10c00015 	stw	r3,0(r2)
 2012880:	e0bffb17 	ldw	r2,-20(fp)
 2012884:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012888:	e0bffc17 	ldw	r2,-16(fp)
 201288c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2012890:	0005883a 	mov	r2,zero
}
 2012894:	e037883a 	mov	sp,fp
 2012898:	df000017 	ldw	fp,0(sp)
 201289c:	dec00104 	addi	sp,sp,4
 20128a0:	f800283a 	ret

020128a4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 20128a4:	defff404 	addi	sp,sp,-48
 20128a8:	df000b15 	stw	fp,44(sp)
 20128ac:	df000b04 	addi	fp,sp,44
 20128b0:	e13ffc15 	stw	r4,-16(fp)
 20128b4:	e17ffd15 	stw	r5,-12(fp)
 20128b8:	e1bffe15 	stw	r6,-8(fp)
 20128bc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20128c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20128c4:	e0bfff17 	ldw	r2,-4(fp)
 20128c8:	1000021e 	bne	r2,zero,20128d4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 20128cc:	0005883a 	mov	r2,zero
 20128d0:	00006506 	br	2012a68 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 20128d4:	e0bffc17 	ldw	r2,-16(fp)
 20128d8:	1000051e 	bne	r2,zero,20128f0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20128dc:	e0bfff17 	ldw	r2,-4(fp)
 20128e0:	00c01884 	movi	r3,98
 20128e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20128e8:	0005883a 	mov	r2,zero
 20128ec:	00005e06 	br	2012a68 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 20128f0:	e0bffc17 	ldw	r2,-16(fp)
 20128f4:	108000cc 	andi	r2,r2,3
 20128f8:	10000526 	beq	r2,zero,2012910 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20128fc:	e0bfff17 	ldw	r2,-4(fp)
 2012900:	00c01884 	movi	r3,98
 2012904:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2012908:	0005883a 	mov	r2,zero
 201290c:	00005606 	br	2012a68 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2012910:	e0bffd17 	ldw	r2,-12(fp)
 2012914:	108000a8 	cmpgeui	r2,r2,2
 2012918:	1000051e 	bne	r2,zero,2012930 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201291c:	e0bfff17 	ldw	r2,-4(fp)
 2012920:	00c016c4 	movi	r3,91
 2012924:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2012928:	0005883a 	mov	r2,zero
 201292c:	00004e06 	br	2012a68 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2012930:	e0bffe17 	ldw	r2,-8(fp)
 2012934:	10800128 	cmpgeui	r2,r2,4
 2012938:	1000051e 	bne	r2,zero,2012950 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201293c:	e0bfff17 	ldw	r2,-4(fp)
 2012940:	00c01704 	movi	r3,92
 2012944:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2012948:	0005883a 	mov	r2,zero
 201294c:	00004606 	br	2012a68 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012950:	0005303a 	rdctl	r2,status
 2012954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012958:	e0fffb17 	ldw	r3,-20(fp)
 201295c:	00bfff84 	movi	r2,-2
 2012960:	1884703a 	and	r2,r3,r2
 2012964:	1001703a 	wrctl	status,r2
  
  return context;
 2012968:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201296c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2012970:	d0a72c17 	ldw	r2,-25424(gp)
 2012974:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2012978:	d0a72c17 	ldw	r2,-25424(gp)
 201297c:	10000326 	beq	r2,zero,201298c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2012980:	d0a72c17 	ldw	r2,-25424(gp)
 2012984:	10800117 	ldw	r2,4(r2)
 2012988:	d0a72c15 	stw	r2,-25424(gp)
 201298c:	e0bff817 	ldw	r2,-32(fp)
 2012990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012994:	e0bff917 	ldw	r2,-28(fp)
 2012998:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 201299c:	e0bffa17 	ldw	r2,-24(fp)
 20129a0:	1000051e 	bne	r2,zero,20129b8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 20129a4:	e0bfff17 	ldw	r2,-4(fp)
 20129a8:	00c01684 	movi	r3,90
 20129ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20129b0:	0005883a 	mov	r2,zero
 20129b4:	00002c06 	br	2012a68 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20129b8:	e0bffc17 	ldw	r2,-16(fp)
 20129bc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20129c0:	e0fffc17 	ldw	r3,-16(fp)
 20129c4:	e0bffe17 	ldw	r2,-8(fp)
 20129c8:	1885883a 	add	r2,r3,r2
 20129cc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20129d0:	e03ff715 	stw	zero,-36(fp)
 20129d4:	00000c06 	br	2012a08 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 20129d8:	e0bff617 	ldw	r2,-40(fp)
 20129dc:	e0fff517 	ldw	r3,-44(fp)
 20129e0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 20129e4:	e0bff517 	ldw	r2,-44(fp)
 20129e8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 20129ec:	e0fff517 	ldw	r3,-44(fp)
 20129f0:	e0bffe17 	ldw	r2,-8(fp)
 20129f4:	1885883a 	add	r2,r3,r2
 20129f8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 20129fc:	e0bff717 	ldw	r2,-36(fp)
 2012a00:	10800044 	addi	r2,r2,1
 2012a04:	e0bff715 	stw	r2,-36(fp)
 2012a08:	e0bffd17 	ldw	r2,-12(fp)
 2012a0c:	10bfffc4 	addi	r2,r2,-1
 2012a10:	e0fff717 	ldw	r3,-36(fp)
 2012a14:	18bff036 	bltu	r3,r2,20129d8 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2012a18:	e0bff617 	ldw	r2,-40(fp)
 2012a1c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2012a20:	e0bffa17 	ldw	r2,-24(fp)
 2012a24:	e0fffc17 	ldw	r3,-16(fp)
 2012a28:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2012a2c:	e0bffa17 	ldw	r2,-24(fp)
 2012a30:	e0fffc17 	ldw	r3,-16(fp)
 2012a34:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2012a38:	e0bffa17 	ldw	r2,-24(fp)
 2012a3c:	e0fffd17 	ldw	r3,-12(fp)
 2012a40:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 2012a44:	e0bffa17 	ldw	r2,-24(fp)
 2012a48:	e0fffd17 	ldw	r3,-12(fp)
 2012a4c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2012a50:	e0bffa17 	ldw	r2,-24(fp)
 2012a54:	e0fffe17 	ldw	r3,-8(fp)
 2012a58:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 2012a5c:	e0bfff17 	ldw	r2,-4(fp)
 2012a60:	10000005 	stb	zero,0(r2)
    return (pmem);
 2012a64:	e0bffa17 	ldw	r2,-24(fp)
}
 2012a68:	e037883a 	mov	sp,fp
 2012a6c:	df000017 	ldw	fp,0(sp)
 2012a70:	dec00104 	addi	sp,sp,4
 2012a74:	f800283a 	ret

02012a78 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2012a78:	defff804 	addi	sp,sp,-32
 2012a7c:	df000715 	stw	fp,28(sp)
 2012a80:	df000704 	addi	fp,sp,28
 2012a84:	e13ffe15 	stw	r4,-8(fp)
 2012a88:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012a8c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2012a90:	e0bfff17 	ldw	r2,-4(fp)
 2012a94:	1000021e 	bne	r2,zero,2012aa0 <OSMemGet+0x28>
        return ((void *)0);
 2012a98:	0005883a 	mov	r2,zero
 2012a9c:	00002e06 	br	2012b58 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2012aa0:	e0bffe17 	ldw	r2,-8(fp)
 2012aa4:	1000051e 	bne	r2,zero,2012abc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2012aa8:	e0bfff17 	ldw	r2,-4(fp)
 2012aac:	00c01804 	movi	r3,96
 2012ab0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2012ab4:	0005883a 	mov	r2,zero
 2012ab8:	00002706 	br	2012b58 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012abc:	0005303a 	rdctl	r2,status
 2012ac0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012ac4:	e0fffd17 	ldw	r3,-12(fp)
 2012ac8:	00bfff84 	movi	r2,-2
 2012acc:	1884703a 	and	r2,r3,r2
 2012ad0:	1001703a 	wrctl	status,r2
  
  return context;
 2012ad4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2012ad8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2012adc:	e0bffe17 	ldw	r2,-8(fp)
 2012ae0:	10800417 	ldw	r2,16(r2)
 2012ae4:	10001426 	beq	r2,zero,2012b38 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2012ae8:	e0bffe17 	ldw	r2,-8(fp)
 2012aec:	10800117 	ldw	r2,4(r2)
 2012af0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2012af4:	e0bffb17 	ldw	r2,-20(fp)
 2012af8:	10c00017 	ldw	r3,0(r2)
 2012afc:	e0bffe17 	ldw	r2,-8(fp)
 2012b00:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2012b04:	e0bffe17 	ldw	r2,-8(fp)
 2012b08:	10800417 	ldw	r2,16(r2)
 2012b0c:	10ffffc4 	addi	r3,r2,-1
 2012b10:	e0bffe17 	ldw	r2,-8(fp)
 2012b14:	10c00415 	stw	r3,16(r2)
 2012b18:	e0bff917 	ldw	r2,-28(fp)
 2012b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012b20:	e0bffa17 	ldw	r2,-24(fp)
 2012b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2012b28:	e0bfff17 	ldw	r2,-4(fp)
 2012b2c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2012b30:	e0bffb17 	ldw	r2,-20(fp)
 2012b34:	00000806 	br	2012b58 <OSMemGet+0xe0>
 2012b38:	e0bff917 	ldw	r2,-28(fp)
 2012b3c:	e0bffc15 	stw	r2,-16(fp)
 2012b40:	e0bffc17 	ldw	r2,-16(fp)
 2012b44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2012b48:	e0bfff17 	ldw	r2,-4(fp)
 2012b4c:	00c01744 	movi	r3,93
 2012b50:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2012b54:	0005883a 	mov	r2,zero
}
 2012b58:	e037883a 	mov	sp,fp
 2012b5c:	df000017 	ldw	fp,0(sp)
 2012b60:	dec00104 	addi	sp,sp,4
 2012b64:	f800283a 	ret

02012b68 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2012b68:	defff704 	addi	sp,sp,-36
 2012b6c:	dfc00815 	stw	ra,32(sp)
 2012b70:	df000715 	stw	fp,28(sp)
 2012b74:	df000704 	addi	fp,sp,28
 2012b78:	e13ffd15 	stw	r4,-12(fp)
 2012b7c:	e17ffe15 	stw	r5,-8(fp)
 2012b80:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012b84:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2012b88:	e0bfff17 	ldw	r2,-4(fp)
 2012b8c:	1000021e 	bne	r2,zero,2012b98 <OSMemNameGet+0x30>
        return (0);
 2012b90:	0005883a 	mov	r2,zero
 2012b94:	00002b06 	br	2012c44 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2012b98:	e0bffd17 	ldw	r2,-12(fp)
 2012b9c:	1000051e 	bne	r2,zero,2012bb4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2012ba0:	e0bfff17 	ldw	r2,-4(fp)
 2012ba4:	00c01804 	movi	r3,96
 2012ba8:	10c00005 	stb	r3,0(r2)
        return (0);
 2012bac:	0005883a 	mov	r2,zero
 2012bb0:	00002406 	br	2012c44 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2012bb4:	e0bffe17 	ldw	r2,-8(fp)
 2012bb8:	1000051e 	bne	r2,zero,2012bd0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2012bbc:	e0bfff17 	ldw	r2,-4(fp)
 2012bc0:	00c00304 	movi	r3,12
 2012bc4:	10c00005 	stb	r3,0(r2)
        return (0);
 2012bc8:	0005883a 	mov	r2,zero
 2012bcc:	00001d06 	br	2012c44 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2012bd0:	d0a73103 	ldbu	r2,-25404(gp)
 2012bd4:	10803fcc 	andi	r2,r2,255
 2012bd8:	10000526 	beq	r2,zero,2012bf0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2012bdc:	e0bfff17 	ldw	r2,-4(fp)
 2012be0:	00c00444 	movi	r3,17
 2012be4:	10c00005 	stb	r3,0(r2)
        return (0);
 2012be8:	0005883a 	mov	r2,zero
 2012bec:	00001506 	br	2012c44 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012bf0:	0005303a 	rdctl	r2,status
 2012bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012bf8:	e0fffb17 	ldw	r3,-20(fp)
 2012bfc:	00bfff84 	movi	r2,-2
 2012c00:	1884703a 	and	r2,r3,r2
 2012c04:	1001703a 	wrctl	status,r2
  
  return context;
 2012c08:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2012c0c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2012c10:	e0bffd17 	ldw	r2,-12(fp)
 2012c14:	10800504 	addi	r2,r2,20
 2012c18:	100b883a 	mov	r5,r2
 2012c1c:	e13ffe17 	ldw	r4,-8(fp)
 2012c20:	200ffa80 	call	200ffa8 <OS_StrCopy>
 2012c24:	e0bffa05 	stb	r2,-24(fp)
 2012c28:	e0bff917 	ldw	r2,-28(fp)
 2012c2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012c30:	e0bffc17 	ldw	r2,-16(fp)
 2012c34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012c38:	e0bfff17 	ldw	r2,-4(fp)
 2012c3c:	10000005 	stb	zero,0(r2)
    return (len);
 2012c40:	e0bffa03 	ldbu	r2,-24(fp)
}
 2012c44:	e037883a 	mov	sp,fp
 2012c48:	dfc00117 	ldw	ra,4(sp)
 2012c4c:	df000017 	ldw	fp,0(sp)
 2012c50:	dec00204 	addi	sp,sp,8
 2012c54:	f800283a 	ret

02012c58 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2012c58:	defff604 	addi	sp,sp,-40
 2012c5c:	dfc00915 	stw	ra,36(sp)
 2012c60:	df000815 	stw	fp,32(sp)
 2012c64:	df000804 	addi	fp,sp,32
 2012c68:	e13ffd15 	stw	r4,-12(fp)
 2012c6c:	e17ffe15 	stw	r5,-8(fp)
 2012c70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012c74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2012c78:	e0bfff17 	ldw	r2,-4(fp)
 2012c7c:	10003526 	beq	r2,zero,2012d54 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2012c80:	e0bffd17 	ldw	r2,-12(fp)
 2012c84:	1000041e 	bne	r2,zero,2012c98 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2012c88:	e0bfff17 	ldw	r2,-4(fp)
 2012c8c:	00c01804 	movi	r3,96
 2012c90:	10c00005 	stb	r3,0(r2)
        return;
 2012c94:	00003006 	br	2012d58 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2012c98:	e0bffe17 	ldw	r2,-8(fp)
 2012c9c:	1000041e 	bne	r2,zero,2012cb0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2012ca0:	e0bfff17 	ldw	r2,-4(fp)
 2012ca4:	00c00304 	movi	r3,12
 2012ca8:	10c00005 	stb	r3,0(r2)
        return;
 2012cac:	00002a06 	br	2012d58 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2012cb0:	d0a73103 	ldbu	r2,-25404(gp)
 2012cb4:	10803fcc 	andi	r2,r2,255
 2012cb8:	10000426 	beq	r2,zero,2012ccc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2012cbc:	e0bfff17 	ldw	r2,-4(fp)
 2012cc0:	00c00484 	movi	r3,18
 2012cc4:	10c00005 	stb	r3,0(r2)
        return;
 2012cc8:	00002306 	br	2012d58 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012ccc:	0005303a 	rdctl	r2,status
 2012cd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012cd4:	e0fffc17 	ldw	r3,-16(fp)
 2012cd8:	00bfff84 	movi	r2,-2
 2012cdc:	1884703a 	and	r2,r3,r2
 2012ce0:	1001703a 	wrctl	status,r2
  
  return context;
 2012ce4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012ce8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2012cec:	e13ffe17 	ldw	r4,-8(fp)
 2012cf0:	201001c0 	call	201001c <OS_StrLen>
 2012cf4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2012cf8:	e0bffa03 	ldbu	r2,-24(fp)
 2012cfc:	10800830 	cmpltui	r2,r2,32
 2012d00:	1000081e 	bne	r2,zero,2012d24 <OSMemNameSet+0xcc>
 2012d04:	e0bff817 	ldw	r2,-32(fp)
 2012d08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012d0c:	e0bff917 	ldw	r2,-28(fp)
 2012d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2012d14:	e0bfff17 	ldw	r2,-4(fp)
 2012d18:	00c018c4 	movi	r3,99
 2012d1c:	10c00005 	stb	r3,0(r2)
        return;
 2012d20:	00000d06 	br	2012d58 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2012d24:	e0bffd17 	ldw	r2,-12(fp)
 2012d28:	10800504 	addi	r2,r2,20
 2012d2c:	e17ffe17 	ldw	r5,-8(fp)
 2012d30:	1009883a 	mov	r4,r2
 2012d34:	200ffa80 	call	200ffa8 <OS_StrCopy>
 2012d38:	e0bff817 	ldw	r2,-32(fp)
 2012d3c:	e0bffb15 	stw	r2,-20(fp)
 2012d40:	e0bffb17 	ldw	r2,-20(fp)
 2012d44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012d48:	e0bfff17 	ldw	r2,-4(fp)
 2012d4c:	10000005 	stb	zero,0(r2)
 2012d50:	00000106 	br	2012d58 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2012d54:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2012d58:	e037883a 	mov	sp,fp
 2012d5c:	dfc00117 	ldw	ra,4(sp)
 2012d60:	df000017 	ldw	fp,0(sp)
 2012d64:	dec00204 	addi	sp,sp,8
 2012d68:	f800283a 	ret

02012d6c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2012d6c:	defff904 	addi	sp,sp,-28
 2012d70:	df000615 	stw	fp,24(sp)
 2012d74:	df000604 	addi	fp,sp,24
 2012d78:	e13ffe15 	stw	r4,-8(fp)
 2012d7c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012d80:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2012d84:	e0bffe17 	ldw	r2,-8(fp)
 2012d88:	1000021e 	bne	r2,zero,2012d94 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2012d8c:	00801804 	movi	r2,96
 2012d90:	00002806 	br	2012e34 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 2012d94:	e0bfff17 	ldw	r2,-4(fp)
 2012d98:	1000021e 	bne	r2,zero,2012da4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2012d9c:	008017c4 	movi	r2,95
 2012da0:	00002406 	br	2012e34 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012da4:	0005303a 	rdctl	r2,status
 2012da8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012dac:	e0fffd17 	ldw	r3,-12(fp)
 2012db0:	00bfff84 	movi	r2,-2
 2012db4:	1884703a 	and	r2,r3,r2
 2012db8:	1001703a 	wrctl	status,r2
  
  return context;
 2012dbc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2012dc0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 2012dc4:	e0bffe17 	ldw	r2,-8(fp)
 2012dc8:	10c00417 	ldw	r3,16(r2)
 2012dcc:	e0bffe17 	ldw	r2,-8(fp)
 2012dd0:	10800317 	ldw	r2,12(r2)
 2012dd4:	18800636 	bltu	r3,r2,2012df0 <OSMemPut+0x84>
 2012dd8:	e0bffa17 	ldw	r2,-24(fp)
 2012ddc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012de0:	e0bffb17 	ldw	r2,-20(fp)
 2012de4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2012de8:	00801784 	movi	r2,94
 2012dec:	00001106 	br	2012e34 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2012df0:	e0bffe17 	ldw	r2,-8(fp)
 2012df4:	10c00117 	ldw	r3,4(r2)
 2012df8:	e0bfff17 	ldw	r2,-4(fp)
 2012dfc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2012e00:	e0bffe17 	ldw	r2,-8(fp)
 2012e04:	e0ffff17 	ldw	r3,-4(fp)
 2012e08:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2012e0c:	e0bffe17 	ldw	r2,-8(fp)
 2012e10:	10800417 	ldw	r2,16(r2)
 2012e14:	10c00044 	addi	r3,r2,1
 2012e18:	e0bffe17 	ldw	r2,-8(fp)
 2012e1c:	10c00415 	stw	r3,16(r2)
 2012e20:	e0bffa17 	ldw	r2,-24(fp)
 2012e24:	e0bffc15 	stw	r2,-16(fp)
 2012e28:	e0bffc17 	ldw	r2,-16(fp)
 2012e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2012e30:	0005883a 	mov	r2,zero
}
 2012e34:	e037883a 	mov	sp,fp
 2012e38:	df000017 	ldw	fp,0(sp)
 2012e3c:	dec00104 	addi	sp,sp,4
 2012e40:	f800283a 	ret

02012e44 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2012e44:	defffa04 	addi	sp,sp,-24
 2012e48:	df000515 	stw	fp,20(sp)
 2012e4c:	df000504 	addi	fp,sp,20
 2012e50:	e13ffe15 	stw	r4,-8(fp)
 2012e54:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012e58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2012e5c:	e0bffe17 	ldw	r2,-8(fp)
 2012e60:	1000021e 	bne	r2,zero,2012e6c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2012e64:	00801804 	movi	r2,96
 2012e68:	00002c06 	br	2012f1c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2012e6c:	e0bfff17 	ldw	r2,-4(fp)
 2012e70:	1000021e 	bne	r2,zero,2012e7c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 2012e74:	00801844 	movi	r2,97
 2012e78:	00002806 	br	2012f1c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012e7c:	0005303a 	rdctl	r2,status
 2012e80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012e84:	e0fffc17 	ldw	r3,-16(fp)
 2012e88:	00bfff84 	movi	r2,-2
 2012e8c:	1884703a 	and	r2,r3,r2
 2012e90:	1001703a 	wrctl	status,r2
  
  return context;
 2012e94:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2012e98:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2012e9c:	e0bffe17 	ldw	r2,-8(fp)
 2012ea0:	10c00017 	ldw	r3,0(r2)
 2012ea4:	e0bfff17 	ldw	r2,-4(fp)
 2012ea8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2012eac:	e0bffe17 	ldw	r2,-8(fp)
 2012eb0:	10c00117 	ldw	r3,4(r2)
 2012eb4:	e0bfff17 	ldw	r2,-4(fp)
 2012eb8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2012ebc:	e0bffe17 	ldw	r2,-8(fp)
 2012ec0:	10c00217 	ldw	r3,8(r2)
 2012ec4:	e0bfff17 	ldw	r2,-4(fp)
 2012ec8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2012ecc:	e0bffe17 	ldw	r2,-8(fp)
 2012ed0:	10c00317 	ldw	r3,12(r2)
 2012ed4:	e0bfff17 	ldw	r2,-4(fp)
 2012ed8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2012edc:	e0bffe17 	ldw	r2,-8(fp)
 2012ee0:	10c00417 	ldw	r3,16(r2)
 2012ee4:	e0bfff17 	ldw	r2,-4(fp)
 2012ee8:	10c00415 	stw	r3,16(r2)
 2012eec:	e0bffb17 	ldw	r2,-20(fp)
 2012ef0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ef4:	e0bffd17 	ldw	r2,-12(fp)
 2012ef8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2012efc:	e0bfff17 	ldw	r2,-4(fp)
 2012f00:	10c00317 	ldw	r3,12(r2)
 2012f04:	e0bfff17 	ldw	r2,-4(fp)
 2012f08:	10800417 	ldw	r2,16(r2)
 2012f0c:	1887c83a 	sub	r3,r3,r2
 2012f10:	e0bfff17 	ldw	r2,-4(fp)
 2012f14:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2012f18:	0005883a 	mov	r2,zero
}
 2012f1c:	e037883a 	mov	sp,fp
 2012f20:	df000017 	ldw	fp,0(sp)
 2012f24:	dec00104 	addi	sp,sp,4
 2012f28:	f800283a 	ret

02012f2c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2012f2c:	defffc04 	addi	sp,sp,-16
 2012f30:	dfc00315 	stw	ra,12(sp)
 2012f34:	df000215 	stw	fp,8(sp)
 2012f38:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2012f3c:	01430c04 	movi	r5,3120
 2012f40:	010080b4 	movhi	r4,514
 2012f44:	210b1804 	addi	r4,r4,11360
 2012f48:	200fda80 	call	200fda8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2012f4c:	008080b4 	movhi	r2,514
 2012f50:	108b1804 	addi	r2,r2,11360
 2012f54:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2012f58:	e03fff0d 	sth	zero,-4(fp)
 2012f5c:	00001606 	br	2012fb8 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2012f60:	e0bfff0b 	ldhu	r2,-4(fp)
 2012f64:	10800044 	addi	r2,r2,1
 2012f68:	01400d04 	movi	r5,52
 2012f6c:	1009883a 	mov	r4,r2
 2012f70:	200afbc0 	call	200afbc <__mulsi3>
 2012f74:	1007883a 	mov	r3,r2
 2012f78:	008080b4 	movhi	r2,514
 2012f7c:	108b1804 	addi	r2,r2,11360
 2012f80:	1887883a 	add	r3,r3,r2
 2012f84:	e0bffe17 	ldw	r2,-8(fp)
 2012f88:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2012f8c:	e0bffe17 	ldw	r2,-8(fp)
 2012f90:	00c00fc4 	movi	r3,63
 2012f94:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2012f98:	e0bffe17 	ldw	r2,-8(fp)
 2012f9c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2012fa0:	e0bffe17 	ldw	r2,-8(fp)
 2012fa4:	10800d04 	addi	r2,r2,52
 2012fa8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2012fac:	e0bfff0b 	ldhu	r2,-4(fp)
 2012fb0:	10800044 	addi	r2,r2,1
 2012fb4:	e0bfff0d 	sth	r2,-4(fp)
 2012fb8:	e0bfff0b 	ldhu	r2,-4(fp)
 2012fbc:	10800ef0 	cmpltui	r2,r2,59
 2012fc0:	103fe71e 	bne	r2,zero,2012f60 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2012fc4:	e0bffe17 	ldw	r2,-8(fp)
 2012fc8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2012fcc:	e0bffe17 	ldw	r2,-8(fp)
 2012fd0:	00c00fc4 	movi	r3,63
 2012fd4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2012fd8:	e0bffe17 	ldw	r2,-8(fp)
 2012fdc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2012fe0:	008080b4 	movhi	r2,514
 2012fe4:	108b1804 	addi	r2,r2,11360
 2012fe8:	d0a72c15 	stw	r2,-25424(gp)
#endif
}
 2012fec:	0001883a 	nop
 2012ff0:	e037883a 	mov	sp,fp
 2012ff4:	dfc00117 	ldw	ra,4(sp)
 2012ff8:	df000017 	ldw	fp,0(sp)
 2012ffc:	dec00204 	addi	sp,sp,8
 2013000:	f800283a 	ret

02013004 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2013004:	defff804 	addi	sp,sp,-32
 2013008:	df000715 	stw	fp,28(sp)
 201300c:	df000704 	addi	fp,sp,28
 2013010:	e13ffe15 	stw	r4,-8(fp)
 2013014:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013018:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201301c:	e0bfff17 	ldw	r2,-4(fp)
 2013020:	1000021e 	bne	r2,zero,201302c <OSQAccept+0x28>
        return ((void *)0);
 2013024:	0005883a 	mov	r2,zero
 2013028:	00004206 	br	2013134 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201302c:	e0bffe17 	ldw	r2,-8(fp)
 2013030:	1000051e 	bne	r2,zero,2013048 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2013034:	e0bfff17 	ldw	r2,-4(fp)
 2013038:	00c00104 	movi	r3,4
 201303c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013040:	0005883a 	mov	r2,zero
 2013044:	00003b06 	br	2013134 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2013048:	e0bffe17 	ldw	r2,-8(fp)
 201304c:	10800003 	ldbu	r2,0(r2)
 2013050:	10803fcc 	andi	r2,r2,255
 2013054:	108000a0 	cmpeqi	r2,r2,2
 2013058:	1000051e 	bne	r2,zero,2013070 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201305c:	e0bfff17 	ldw	r2,-4(fp)
 2013060:	00c00044 	movi	r3,1
 2013064:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013068:	0005883a 	mov	r2,zero
 201306c:	00003106 	br	2013134 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013070:	0005303a 	rdctl	r2,status
 2013074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013078:	e0fffd17 	ldw	r3,-12(fp)
 201307c:	00bfff84 	movi	r2,-2
 2013080:	1884703a 	and	r2,r3,r2
 2013084:	1001703a 	wrctl	status,r2
  
  return context;
 2013088:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201308c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2013090:	e0bffe17 	ldw	r2,-8(fp)
 2013094:	10800117 	ldw	r2,4(r2)
 2013098:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201309c:	e0bffc17 	ldw	r2,-16(fp)
 20130a0:	1080058b 	ldhu	r2,22(r2)
 20130a4:	10bfffcc 	andi	r2,r2,65535
 20130a8:	10001926 	beq	r2,zero,2013110 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20130ac:	e0bffc17 	ldw	r2,-16(fp)
 20130b0:	10800417 	ldw	r2,16(r2)
 20130b4:	11000104 	addi	r4,r2,4
 20130b8:	e0fffc17 	ldw	r3,-16(fp)
 20130bc:	19000415 	stw	r4,16(r3)
 20130c0:	10800017 	ldw	r2,0(r2)
 20130c4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20130c8:	e0bffc17 	ldw	r2,-16(fp)
 20130cc:	1080058b 	ldhu	r2,22(r2)
 20130d0:	10bfffc4 	addi	r2,r2,-1
 20130d4:	1007883a 	mov	r3,r2
 20130d8:	e0bffc17 	ldw	r2,-16(fp)
 20130dc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20130e0:	e0bffc17 	ldw	r2,-16(fp)
 20130e4:	10c00417 	ldw	r3,16(r2)
 20130e8:	e0bffc17 	ldw	r2,-16(fp)
 20130ec:	10800217 	ldw	r2,8(r2)
 20130f0:	1880041e 	bne	r3,r2,2013104 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 20130f4:	e0bffc17 	ldw	r2,-16(fp)
 20130f8:	10c00117 	ldw	r3,4(r2)
 20130fc:	e0bffc17 	ldw	r2,-16(fp)
 2013100:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2013104:	e0bfff17 	ldw	r2,-4(fp)
 2013108:	10000005 	stb	zero,0(r2)
 201310c:	00000406 	br	2013120 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2013110:	e0bfff17 	ldw	r2,-4(fp)
 2013114:	00c007c4 	movi	r3,31
 2013118:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 201311c:	e03ff915 	stw	zero,-28(fp)
 2013120:	e0bffa17 	ldw	r2,-24(fp)
 2013124:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013128:	e0bffb17 	ldw	r2,-20(fp)
 201312c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2013130:	e0bff917 	ldw	r2,-28(fp)
}
 2013134:	e037883a 	mov	sp,fp
 2013138:	df000017 	ldw	fp,0(sp)
 201313c:	dec00104 	addi	sp,sp,4
 2013140:	f800283a 	ret

02013144 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2013144:	defff404 	addi	sp,sp,-48
 2013148:	dfc00b15 	stw	ra,44(sp)
 201314c:	df000a15 	stw	fp,40(sp)
 2013150:	df000a04 	addi	fp,sp,40
 2013154:	e13ffe15 	stw	r4,-8(fp)
 2013158:	2805883a 	mov	r2,r5
 201315c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013160:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2013164:	d0a73103 	ldbu	r2,-25404(gp)
 2013168:	10803fcc 	andi	r2,r2,255
 201316c:	10000226 	beq	r2,zero,2013178 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2013170:	0005883a 	mov	r2,zero
 2013174:	00005906 	br	20132dc <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013178:	0005303a 	rdctl	r2,status
 201317c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013180:	e0fffd17 	ldw	r3,-12(fp)
 2013184:	00bfff84 	movi	r2,-2
 2013188:	1884703a 	and	r2,r3,r2
 201318c:	1001703a 	wrctl	status,r2
  
  return context;
 2013190:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013194:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2013198:	d0a73017 	ldw	r2,-25408(gp)
 201319c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 20131a0:	d0a73017 	ldw	r2,-25408(gp)
 20131a4:	10000326 	beq	r2,zero,20131b4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20131a8:	d0a73017 	ldw	r2,-25408(gp)
 20131ac:	10800117 	ldw	r2,4(r2)
 20131b0:	d0a73015 	stw	r2,-25408(gp)
 20131b4:	e0bff717 	ldw	r2,-36(fp)
 20131b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20131bc:	e0bff817 	ldw	r2,-32(fp)
 20131c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 20131c4:	e0bff617 	ldw	r2,-40(fp)
 20131c8:	10004326 	beq	r2,zero,20132d8 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20131cc:	0005303a 	rdctl	r2,status
 20131d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20131d4:	e0fff917 	ldw	r3,-28(fp)
 20131d8:	00bfff84 	movi	r2,-2
 20131dc:	1884703a 	and	r2,r3,r2
 20131e0:	1001703a 	wrctl	status,r2
  
  return context;
 20131e4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 20131e8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 20131ec:	d0a72e17 	ldw	r2,-25416(gp)
 20131f0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 20131f4:	e0bffb17 	ldw	r2,-20(fp)
 20131f8:	10002d26 	beq	r2,zero,20132b0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 20131fc:	d0a72e17 	ldw	r2,-25416(gp)
 2013200:	10800017 	ldw	r2,0(r2)
 2013204:	d0a72e15 	stw	r2,-25416(gp)
 2013208:	e0bff717 	ldw	r2,-36(fp)
 201320c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013210:	e0bffa17 	ldw	r2,-24(fp)
 2013214:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2013218:	e0bffb17 	ldw	r2,-20(fp)
 201321c:	e0fffe17 	ldw	r3,-8(fp)
 2013220:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2013224:	e0bfff0b 	ldhu	r2,-4(fp)
 2013228:	1085883a 	add	r2,r2,r2
 201322c:	1085883a 	add	r2,r2,r2
 2013230:	1007883a 	mov	r3,r2
 2013234:	e0bffe17 	ldw	r2,-8(fp)
 2013238:	10c7883a 	add	r3,r2,r3
 201323c:	e0bffb17 	ldw	r2,-20(fp)
 2013240:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2013244:	e0bffb17 	ldw	r2,-20(fp)
 2013248:	e0fffe17 	ldw	r3,-8(fp)
 201324c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2013250:	e0bffb17 	ldw	r2,-20(fp)
 2013254:	e0fffe17 	ldw	r3,-8(fp)
 2013258:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 201325c:	e0bffb17 	ldw	r2,-20(fp)
 2013260:	e0ffff0b 	ldhu	r3,-4(fp)
 2013264:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2013268:	e0bffb17 	ldw	r2,-20(fp)
 201326c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2013270:	e0bff617 	ldw	r2,-40(fp)
 2013274:	00c00084 	movi	r3,2
 2013278:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 201327c:	e0bff617 	ldw	r2,-40(fp)
 2013280:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2013284:	e0bff617 	ldw	r2,-40(fp)
 2013288:	e0fffb17 	ldw	r3,-20(fp)
 201328c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2013290:	e0bff617 	ldw	r2,-40(fp)
 2013294:	00c00fc4 	movi	r3,63
 2013298:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201329c:	e0bff617 	ldw	r2,-40(fp)
 20132a0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 20132a4:	e13ff617 	ldw	r4,-40(fp)
 20132a8:	200f9c80 	call	200f9c8 <OS_EventWaitListInit>
 20132ac:	00000a06 	br	20132d8 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 20132b0:	d0e73017 	ldw	r3,-25408(gp)
 20132b4:	e0bff617 	ldw	r2,-40(fp)
 20132b8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 20132bc:	e0bff617 	ldw	r2,-40(fp)
 20132c0:	d0a73015 	stw	r2,-25408(gp)
 20132c4:	e0bff717 	ldw	r2,-36(fp)
 20132c8:	e0bffc15 	stw	r2,-16(fp)
 20132cc:	e0bffc17 	ldw	r2,-16(fp)
 20132d0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 20132d4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 20132d8:	e0bff617 	ldw	r2,-40(fp)
}
 20132dc:	e037883a 	mov	sp,fp
 20132e0:	dfc00117 	ldw	ra,4(sp)
 20132e4:	df000017 	ldw	fp,0(sp)
 20132e8:	dec00204 	addi	sp,sp,8
 20132ec:	f800283a 	ret

020132f0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20132f0:	defff204 	addi	sp,sp,-56
 20132f4:	dfc00d15 	stw	ra,52(sp)
 20132f8:	df000c15 	stw	fp,48(sp)
 20132fc:	df000c04 	addi	fp,sp,48
 2013300:	e13ffd15 	stw	r4,-12(fp)
 2013304:	2805883a 	mov	r2,r5
 2013308:	e1bfff15 	stw	r6,-4(fp)
 201330c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2013310:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2013314:	e0bfff17 	ldw	r2,-4(fp)
 2013318:	1000021e 	bne	r2,zero,2013324 <OSQDel+0x34>
        return (pevent);
 201331c:	e0bffd17 	ldw	r2,-12(fp)
 2013320:	00008e06 	br	201355c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2013324:	e0bffd17 	ldw	r2,-12(fp)
 2013328:	1000051e 	bne	r2,zero,2013340 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201332c:	e0bfff17 	ldw	r2,-4(fp)
 2013330:	00c00104 	movi	r3,4
 2013334:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013338:	e0bffd17 	ldw	r2,-12(fp)
 201333c:	00008706 	br	201355c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2013340:	e0bffd17 	ldw	r2,-12(fp)
 2013344:	10800003 	ldbu	r2,0(r2)
 2013348:	10803fcc 	andi	r2,r2,255
 201334c:	108000a0 	cmpeqi	r2,r2,2
 2013350:	1000051e 	bne	r2,zero,2013368 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2013354:	e0bfff17 	ldw	r2,-4(fp)
 2013358:	00c00044 	movi	r3,1
 201335c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013360:	e0bffd17 	ldw	r2,-12(fp)
 2013364:	00007d06 	br	201355c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2013368:	d0a73103 	ldbu	r2,-25404(gp)
 201336c:	10803fcc 	andi	r2,r2,255
 2013370:	10000526 	beq	r2,zero,2013388 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2013374:	e0bfff17 	ldw	r2,-4(fp)
 2013378:	00c003c4 	movi	r3,15
 201337c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013380:	e0bffd17 	ldw	r2,-12(fp)
 2013384:	00007506 	br	201355c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013388:	0005303a 	rdctl	r2,status
 201338c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013390:	e0fffc17 	ldw	r3,-16(fp)
 2013394:	00bfff84 	movi	r2,-2
 2013398:	1884703a 	and	r2,r3,r2
 201339c:	1001703a 	wrctl	status,r2
  
  return context;
 20133a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20133a4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 20133a8:	e0bffd17 	ldw	r2,-12(fp)
 20133ac:	10800283 	ldbu	r2,10(r2)
 20133b0:	10803fcc 	andi	r2,r2,255
 20133b4:	10000326 	beq	r2,zero,20133c4 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20133b8:	00800044 	movi	r2,1
 20133bc:	e0bff405 	stb	r2,-48(fp)
 20133c0:	00000106 	br	20133c8 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20133c4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20133c8:	e0bffe03 	ldbu	r2,-8(fp)
 20133cc:	10000326 	beq	r2,zero,20133dc <OSQDel+0xec>
 20133d0:	10800060 	cmpeqi	r2,r2,1
 20133d4:	1000301e 	bne	r2,zero,2013498 <OSQDel+0x1a8>
 20133d8:	00005506 	br	2013530 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 20133dc:	e0bff403 	ldbu	r2,-48(fp)
 20133e0:	10001e1e 	bne	r2,zero,201345c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20133e4:	e0bffd17 	ldw	r2,-12(fp)
 20133e8:	00c00fc4 	movi	r3,63
 20133ec:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 20133f0:	e0bffd17 	ldw	r2,-12(fp)
 20133f4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 20133f8:	e0bffd17 	ldw	r2,-12(fp)
 20133fc:	10800117 	ldw	r2,4(r2)
 2013400:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2013404:	d0e72e17 	ldw	r3,-25416(gp)
 2013408:	e0bff817 	ldw	r2,-32(fp)
 201340c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2013410:	e0bff817 	ldw	r2,-32(fp)
 2013414:	d0a72e15 	stw	r2,-25416(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013418:	e0bffd17 	ldw	r2,-12(fp)
 201341c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2013420:	d0e73017 	ldw	r3,-25408(gp)
 2013424:	e0bffd17 	ldw	r2,-12(fp)
 2013428:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201342c:	e0bffd17 	ldw	r2,-12(fp)
 2013430:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2013434:	e0bffd17 	ldw	r2,-12(fp)
 2013438:	d0a73015 	stw	r2,-25408(gp)
 201343c:	e0bff617 	ldw	r2,-40(fp)
 2013440:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013444:	e0bff717 	ldw	r2,-36(fp)
 2013448:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201344c:	e0bfff17 	ldw	r2,-4(fp)
 2013450:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2013454:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2013458:	00003f06 	br	2013558 <OSQDel+0x268>
 201345c:	e0bff617 	ldw	r2,-40(fp)
 2013460:	e0bff915 	stw	r2,-28(fp)
 2013464:	e0bff917 	ldw	r2,-28(fp)
 2013468:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201346c:	e0bfff17 	ldw	r2,-4(fp)
 2013470:	00c01244 	movi	r3,73
 2013474:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2013478:	e0bffd17 	ldw	r2,-12(fp)
 201347c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2013480:	00003506 	br	2013558 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2013484:	000f883a 	mov	r7,zero
 2013488:	01800104 	movi	r6,4
 201348c:	000b883a 	mov	r5,zero
 2013490:	e13ffd17 	ldw	r4,-12(fp)
 2013494:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2013498:	e0bffd17 	ldw	r2,-12(fp)
 201349c:	10800283 	ldbu	r2,10(r2)
 20134a0:	10803fcc 	andi	r2,r2,255
 20134a4:	103ff71e 	bne	r2,zero,2013484 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20134a8:	e0bffd17 	ldw	r2,-12(fp)
 20134ac:	00c00fc4 	movi	r3,63
 20134b0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20134b4:	e0bffd17 	ldw	r2,-12(fp)
 20134b8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 20134bc:	e0bffd17 	ldw	r2,-12(fp)
 20134c0:	10800117 	ldw	r2,4(r2)
 20134c4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 20134c8:	d0e72e17 	ldw	r3,-25416(gp)
 20134cc:	e0bff817 	ldw	r2,-32(fp)
 20134d0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 20134d4:	e0bff817 	ldw	r2,-32(fp)
 20134d8:	d0a72e15 	stw	r2,-25416(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20134dc:	e0bffd17 	ldw	r2,-12(fp)
 20134e0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 20134e4:	d0e73017 	ldw	r3,-25408(gp)
 20134e8:	e0bffd17 	ldw	r2,-12(fp)
 20134ec:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 20134f0:	e0bffd17 	ldw	r2,-12(fp)
 20134f4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 20134f8:	e0bffd17 	ldw	r2,-12(fp)
 20134fc:	d0a73015 	stw	r2,-25408(gp)
 2013500:	e0bff617 	ldw	r2,-40(fp)
 2013504:	e0bffa15 	stw	r2,-24(fp)
 2013508:	e0bffa17 	ldw	r2,-24(fp)
 201350c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2013510:	e0bff403 	ldbu	r2,-48(fp)
 2013514:	10800058 	cmpnei	r2,r2,1
 2013518:	1000011e 	bne	r2,zero,2013520 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201351c:	200fe640 	call	200fe64 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2013520:	e0bfff17 	ldw	r2,-4(fp)
 2013524:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2013528:	e03ff515 	stw	zero,-44(fp)
             break;
 201352c:	00000a06 	br	2013558 <OSQDel+0x268>
 2013530:	e0bff617 	ldw	r2,-40(fp)
 2013534:	e0bffb15 	stw	r2,-20(fp)
 2013538:	e0bffb17 	ldw	r2,-20(fp)
 201353c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2013540:	e0bfff17 	ldw	r2,-4(fp)
 2013544:	00c001c4 	movi	r3,7
 2013548:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201354c:	e0bffd17 	ldw	r2,-12(fp)
 2013550:	e0bff515 	stw	r2,-44(fp)
             break;
 2013554:	0001883a 	nop
    }
    return (pevent_return);
 2013558:	e0bff517 	ldw	r2,-44(fp)
}
 201355c:	e037883a 	mov	sp,fp
 2013560:	dfc00117 	ldw	ra,4(sp)
 2013564:	df000017 	ldw	fp,0(sp)
 2013568:	dec00204 	addi	sp,sp,8
 201356c:	f800283a 	ret

02013570 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2013570:	defffa04 	addi	sp,sp,-24
 2013574:	df000515 	stw	fp,20(sp)
 2013578:	df000504 	addi	fp,sp,20
 201357c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013580:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2013584:	e0bfff17 	ldw	r2,-4(fp)
 2013588:	1000021e 	bne	r2,zero,2013594 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 201358c:	00800104 	movi	r2,4
 2013590:	00002106 	br	2013618 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2013594:	e0bfff17 	ldw	r2,-4(fp)
 2013598:	10800003 	ldbu	r2,0(r2)
 201359c:	10803fcc 	andi	r2,r2,255
 20135a0:	108000a0 	cmpeqi	r2,r2,2
 20135a4:	1000021e 	bne	r2,zero,20135b0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 20135a8:	00800044 	movi	r2,1
 20135ac:	00001a06 	br	2013618 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20135b0:	0005303a 	rdctl	r2,status
 20135b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20135b8:	e0fffd17 	ldw	r3,-12(fp)
 20135bc:	00bfff84 	movi	r2,-2
 20135c0:	1884703a 	and	r2,r3,r2
 20135c4:	1001703a 	wrctl	status,r2
  
  return context;
 20135c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20135cc:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 20135d0:	e0bfff17 	ldw	r2,-4(fp)
 20135d4:	10800117 	ldw	r2,4(r2)
 20135d8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 20135dc:	e0bffc17 	ldw	r2,-16(fp)
 20135e0:	10c00117 	ldw	r3,4(r2)
 20135e4:	e0bffc17 	ldw	r2,-16(fp)
 20135e8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 20135ec:	e0bffc17 	ldw	r2,-16(fp)
 20135f0:	10c00117 	ldw	r3,4(r2)
 20135f4:	e0bffc17 	ldw	r2,-16(fp)
 20135f8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 20135fc:	e0bffc17 	ldw	r2,-16(fp)
 2013600:	1000058d 	sth	zero,22(r2)
 2013604:	e0bffb17 	ldw	r2,-20(fp)
 2013608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201360c:	e0bffe17 	ldw	r2,-8(fp)
 2013610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2013614:	0005883a 	mov	r2,zero
}
 2013618:	e037883a 	mov	sp,fp
 201361c:	df000017 	ldw	fp,0(sp)
 2013620:	dec00104 	addi	sp,sp,4
 2013624:	f800283a 	ret

02013628 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2013628:	defff304 	addi	sp,sp,-52
 201362c:	dfc00c15 	stw	ra,48(sp)
 2013630:	df000b15 	stw	fp,44(sp)
 2013634:	df000b04 	addi	fp,sp,44
 2013638:	e13ffd15 	stw	r4,-12(fp)
 201363c:	2805883a 	mov	r2,r5
 2013640:	e1bfff15 	stw	r6,-4(fp)
 2013644:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013648:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201364c:	e0bfff17 	ldw	r2,-4(fp)
 2013650:	1000021e 	bne	r2,zero,201365c <OSQPend+0x34>
        return ((void *)0);
 2013654:	0005883a 	mov	r2,zero
 2013658:	00009106 	br	20138a0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201365c:	e0bffd17 	ldw	r2,-12(fp)
 2013660:	1000051e 	bne	r2,zero,2013678 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2013664:	e0bfff17 	ldw	r2,-4(fp)
 2013668:	00c00104 	movi	r3,4
 201366c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013670:	0005883a 	mov	r2,zero
 2013674:	00008a06 	br	20138a0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2013678:	e0bffd17 	ldw	r2,-12(fp)
 201367c:	10800003 	ldbu	r2,0(r2)
 2013680:	10803fcc 	andi	r2,r2,255
 2013684:	108000a0 	cmpeqi	r2,r2,2
 2013688:	1000051e 	bne	r2,zero,20136a0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201368c:	e0bfff17 	ldw	r2,-4(fp)
 2013690:	00c00044 	movi	r3,1
 2013694:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013698:	0005883a 	mov	r2,zero
 201369c:	00008006 	br	20138a0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20136a0:	d0a73103 	ldbu	r2,-25404(gp)
 20136a4:	10803fcc 	andi	r2,r2,255
 20136a8:	10000526 	beq	r2,zero,20136c0 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 20136ac:	e0bfff17 	ldw	r2,-4(fp)
 20136b0:	00c00084 	movi	r3,2
 20136b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20136b8:	0005883a 	mov	r2,zero
 20136bc:	00007806 	br	20138a0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 20136c0:	d0a72303 	ldbu	r2,-25460(gp)
 20136c4:	10803fcc 	andi	r2,r2,255
 20136c8:	10000526 	beq	r2,zero,20136e0 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 20136cc:	e0bfff17 	ldw	r2,-4(fp)
 20136d0:	00c00344 	movi	r3,13
 20136d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20136d8:	0005883a 	mov	r2,zero
 20136dc:	00007006 	br	20138a0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20136e0:	0005303a 	rdctl	r2,status
 20136e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20136e8:	e0fffc17 	ldw	r3,-16(fp)
 20136ec:	00bfff84 	movi	r2,-2
 20136f0:	1884703a 	and	r2,r3,r2
 20136f4:	1001703a 	wrctl	status,r2
  
  return context;
 20136f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20136fc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2013700:	e0bffd17 	ldw	r2,-12(fp)
 2013704:	10800117 	ldw	r2,4(r2)
 2013708:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201370c:	e0bff817 	ldw	r2,-32(fp)
 2013710:	1080058b 	ldhu	r2,22(r2)
 2013714:	10bfffcc 	andi	r2,r2,65535
 2013718:	10001e26 	beq	r2,zero,2013794 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201371c:	e0bff817 	ldw	r2,-32(fp)
 2013720:	10800417 	ldw	r2,16(r2)
 2013724:	11000104 	addi	r4,r2,4
 2013728:	e0fff817 	ldw	r3,-32(fp)
 201372c:	19000415 	stw	r4,16(r3)
 2013730:	10800017 	ldw	r2,0(r2)
 2013734:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2013738:	e0bff817 	ldw	r2,-32(fp)
 201373c:	1080058b 	ldhu	r2,22(r2)
 2013740:	10bfffc4 	addi	r2,r2,-1
 2013744:	1007883a 	mov	r3,r2
 2013748:	e0bff817 	ldw	r2,-32(fp)
 201374c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2013750:	e0bff817 	ldw	r2,-32(fp)
 2013754:	10c00417 	ldw	r3,16(r2)
 2013758:	e0bff817 	ldw	r2,-32(fp)
 201375c:	10800217 	ldw	r2,8(r2)
 2013760:	1880041e 	bne	r3,r2,2013774 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2013764:	e0bff817 	ldw	r2,-32(fp)
 2013768:	10c00117 	ldw	r3,4(r2)
 201376c:	e0bff817 	ldw	r2,-32(fp)
 2013770:	10c00415 	stw	r3,16(r2)
 2013774:	e0bff617 	ldw	r2,-40(fp)
 2013778:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201377c:	e0bff717 	ldw	r2,-36(fp)
 2013780:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2013784:	e0bfff17 	ldw	r2,-4(fp)
 2013788:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 201378c:	e0bff517 	ldw	r2,-44(fp)
 2013790:	00004306 	br	20138a0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2013794:	d0a73217 	ldw	r2,-25400(gp)
 2013798:	d0e73217 	ldw	r3,-25400(gp)
 201379c:	18c00c03 	ldbu	r3,48(r3)
 20137a0:	18c00114 	ori	r3,r3,4
 20137a4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20137a8:	d0a73217 	ldw	r2,-25400(gp)
 20137ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 20137b0:	d0a73217 	ldw	r2,-25400(gp)
 20137b4:	e0fffe0b 	ldhu	r3,-8(fp)
 20137b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 20137bc:	e13ffd17 	ldw	r4,-12(fp)
 20137c0:	200f5b00 	call	200f5b0 <OS_EventTaskWait>
 20137c4:	e0bff617 	ldw	r2,-40(fp)
 20137c8:	e0bffb15 	stw	r2,-20(fp)
 20137cc:	e0bffb17 	ldw	r2,-20(fp)
 20137d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 20137d4:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20137d8:	0005303a 	rdctl	r2,status
 20137dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20137e0:	e0fff917 	ldw	r3,-28(fp)
 20137e4:	00bfff84 	movi	r2,-2
 20137e8:	1884703a 	and	r2,r3,r2
 20137ec:	1001703a 	wrctl	status,r2
  
  return context;
 20137f0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 20137f4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 20137f8:	d0a73217 	ldw	r2,-25400(gp)
 20137fc:	10800c43 	ldbu	r2,49(r2)
 2013800:	10803fcc 	andi	r2,r2,255
 2013804:	10000326 	beq	r2,zero,2013814 <OSQPend+0x1ec>
 2013808:	108000a0 	cmpeqi	r2,r2,2
 201380c:	1000071e 	bne	r2,zero,201382c <OSQPend+0x204>
 2013810:	00000b06 	br	2013840 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2013814:	d0a73217 	ldw	r2,-25400(gp)
 2013818:	10800917 	ldw	r2,36(r2)
 201381c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2013820:	e0bfff17 	ldw	r2,-4(fp)
 2013824:	10000005 	stb	zero,0(r2)
             break;
 2013828:	00000e06 	br	2013864 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201382c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2013830:	e0bfff17 	ldw	r2,-4(fp)
 2013834:	00c00384 	movi	r3,14
 2013838:	10c00005 	stb	r3,0(r2)
             break;
 201383c:	00000906 	br	2013864 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2013840:	d0a73217 	ldw	r2,-25400(gp)
 2013844:	e17ffd17 	ldw	r5,-12(fp)
 2013848:	1009883a 	mov	r4,r2
 201384c:	200f8100 	call	200f810 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2013850:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2013854:	e0bfff17 	ldw	r2,-4(fp)
 2013858:	00c00284 	movi	r3,10
 201385c:	10c00005 	stb	r3,0(r2)
             break;
 2013860:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2013864:	d0a73217 	ldw	r2,-25400(gp)
 2013868:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201386c:	d0a73217 	ldw	r2,-25400(gp)
 2013870:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2013874:	d0a73217 	ldw	r2,-25400(gp)
 2013878:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201387c:	d0a73217 	ldw	r2,-25400(gp)
 2013880:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2013884:	d0a73217 	ldw	r2,-25400(gp)
 2013888:	10000915 	stw	zero,36(r2)
 201388c:	e0bff617 	ldw	r2,-40(fp)
 2013890:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013894:	e0bffa17 	ldw	r2,-24(fp)
 2013898:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201389c:	e0bff517 	ldw	r2,-44(fp)
}
 20138a0:	e037883a 	mov	sp,fp
 20138a4:	dfc00117 	ldw	ra,4(sp)
 20138a8:	df000017 	ldw	fp,0(sp)
 20138ac:	dec00204 	addi	sp,sp,8
 20138b0:	f800283a 	ret

020138b4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20138b4:	defff604 	addi	sp,sp,-40
 20138b8:	dfc00915 	stw	ra,36(sp)
 20138bc:	df000815 	stw	fp,32(sp)
 20138c0:	df000804 	addi	fp,sp,32
 20138c4:	e13ffd15 	stw	r4,-12(fp)
 20138c8:	2805883a 	mov	r2,r5
 20138cc:	e1bfff15 	stw	r6,-4(fp)
 20138d0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20138d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20138d8:	e0bfff17 	ldw	r2,-4(fp)
 20138dc:	1000021e 	bne	r2,zero,20138e8 <OSQPendAbort+0x34>
        return (0);
 20138e0:	0005883a 	mov	r2,zero
 20138e4:	00004906 	br	2013a0c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20138e8:	e0bffd17 	ldw	r2,-12(fp)
 20138ec:	1000051e 	bne	r2,zero,2013904 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20138f0:	e0bfff17 	ldw	r2,-4(fp)
 20138f4:	00c00104 	movi	r3,4
 20138f8:	10c00005 	stb	r3,0(r2)
        return (0);
 20138fc:	0005883a 	mov	r2,zero
 2013900:	00004206 	br	2013a0c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2013904:	e0bffd17 	ldw	r2,-12(fp)
 2013908:	10800003 	ldbu	r2,0(r2)
 201390c:	10803fcc 	andi	r2,r2,255
 2013910:	108000a0 	cmpeqi	r2,r2,2
 2013914:	1000051e 	bne	r2,zero,201392c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2013918:	e0bfff17 	ldw	r2,-4(fp)
 201391c:	00c00044 	movi	r3,1
 2013920:	10c00005 	stb	r3,0(r2)
        return (0);
 2013924:	0005883a 	mov	r2,zero
 2013928:	00003806 	br	2013a0c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201392c:	0005303a 	rdctl	r2,status
 2013930:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013934:	e0fffc17 	ldw	r3,-16(fp)
 2013938:	00bfff84 	movi	r2,-2
 201393c:	1884703a 	and	r2,r3,r2
 2013940:	1001703a 	wrctl	status,r2
  
  return context;
 2013944:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013948:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201394c:	e0bffd17 	ldw	r2,-12(fp)
 2013950:	10800283 	ldbu	r2,10(r2)
 2013954:	10803fcc 	andi	r2,r2,255
 2013958:	10002526 	beq	r2,zero,20139f0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 201395c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2013960:	e0bffe03 	ldbu	r2,-8(fp)
 2013964:	10800060 	cmpeqi	r2,r2,1
 2013968:	10000e26 	beq	r2,zero,20139a4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201396c:	00000806 	br	2013990 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2013970:	01c00084 	movi	r7,2
 2013974:	01800104 	movi	r6,4
 2013978:	000b883a 	mov	r5,zero
 201397c:	e13ffd17 	ldw	r4,-12(fp)
 2013980:	200f4180 	call	200f418 <OS_EventTaskRdy>
                     nbr_tasks++;
 2013984:	e0bff803 	ldbu	r2,-32(fp)
 2013988:	10800044 	addi	r2,r2,1
 201398c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2013990:	e0bffd17 	ldw	r2,-12(fp)
 2013994:	10800283 	ldbu	r2,10(r2)
 2013998:	10803fcc 	andi	r2,r2,255
 201399c:	103ff41e 	bne	r2,zero,2013970 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20139a0:	00000906 	br	20139c8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20139a4:	01c00084 	movi	r7,2
 20139a8:	01800104 	movi	r6,4
 20139ac:	000b883a 	mov	r5,zero
 20139b0:	e13ffd17 	ldw	r4,-12(fp)
 20139b4:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 nbr_tasks++;
 20139b8:	e0bff803 	ldbu	r2,-32(fp)
 20139bc:	10800044 	addi	r2,r2,1
 20139c0:	e0bff805 	stb	r2,-32(fp)
                 break;
 20139c4:	0001883a 	nop
 20139c8:	e0bff917 	ldw	r2,-28(fp)
 20139cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20139d0:	e0bffa17 	ldw	r2,-24(fp)
 20139d4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20139d8:	200fe640 	call	200fe64 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20139dc:	e0bfff17 	ldw	r2,-4(fp)
 20139e0:	00c00384 	movi	r3,14
 20139e4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 20139e8:	e0bff803 	ldbu	r2,-32(fp)
 20139ec:	00000706 	br	2013a0c <OSQPendAbort+0x158>
 20139f0:	e0bff917 	ldw	r2,-28(fp)
 20139f4:	e0bffb15 	stw	r2,-20(fp)
 20139f8:	e0bffb17 	ldw	r2,-20(fp)
 20139fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013a00:	e0bfff17 	ldw	r2,-4(fp)
 2013a04:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2013a08:	0005883a 	mov	r2,zero
}
 2013a0c:	e037883a 	mov	sp,fp
 2013a10:	dfc00117 	ldw	ra,4(sp)
 2013a14:	df000017 	ldw	fp,0(sp)
 2013a18:	dec00204 	addi	sp,sp,8
 2013a1c:	f800283a 	ret

02013a20 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2013a20:	defff604 	addi	sp,sp,-40
 2013a24:	dfc00915 	stw	ra,36(sp)
 2013a28:	df000815 	stw	fp,32(sp)
 2013a2c:	df000804 	addi	fp,sp,32
 2013a30:	e13ffe15 	stw	r4,-8(fp)
 2013a34:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2013a38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2013a3c:	e0bffe17 	ldw	r2,-8(fp)
 2013a40:	1000021e 	bne	r2,zero,2013a4c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2013a44:	00800104 	movi	r2,4
 2013a48:	00004a06 	br	2013b74 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2013a4c:	e0bffe17 	ldw	r2,-8(fp)
 2013a50:	10800003 	ldbu	r2,0(r2)
 2013a54:	10803fcc 	andi	r2,r2,255
 2013a58:	108000a0 	cmpeqi	r2,r2,2
 2013a5c:	1000021e 	bne	r2,zero,2013a68 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 2013a60:	00800044 	movi	r2,1
 2013a64:	00004306 	br	2013b74 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013a68:	0005303a 	rdctl	r2,status
 2013a6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013a70:	e0fffd17 	ldw	r3,-12(fp)
 2013a74:	00bfff84 	movi	r2,-2
 2013a78:	1884703a 	and	r2,r3,r2
 2013a7c:	1001703a 	wrctl	status,r2
  
  return context;
 2013a80:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013a84:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2013a88:	e0bffe17 	ldw	r2,-8(fp)
 2013a8c:	10800283 	ldbu	r2,10(r2)
 2013a90:	10803fcc 	andi	r2,r2,255
 2013a94:	10000c26 	beq	r2,zero,2013ac8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2013a98:	000f883a 	mov	r7,zero
 2013a9c:	01800104 	movi	r6,4
 2013aa0:	e17fff17 	ldw	r5,-4(fp)
 2013aa4:	e13ffe17 	ldw	r4,-8(fp)
 2013aa8:	200f4180 	call	200f418 <OS_EventTaskRdy>
 2013aac:	e0bff817 	ldw	r2,-32(fp)
 2013ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ab4:	e0bff917 	ldw	r2,-28(fp)
 2013ab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2013abc:	200fe640 	call	200fe64 <OS_Sched>
        return (OS_ERR_NONE);
 2013ac0:	0005883a 	mov	r2,zero
 2013ac4:	00002b06 	br	2013b74 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2013ac8:	e0bffe17 	ldw	r2,-8(fp)
 2013acc:	10800117 	ldw	r2,4(r2)
 2013ad0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2013ad4:	e0bffb17 	ldw	r2,-20(fp)
 2013ad8:	10c0058b 	ldhu	r3,22(r2)
 2013adc:	e0bffb17 	ldw	r2,-20(fp)
 2013ae0:	1080050b 	ldhu	r2,20(r2)
 2013ae4:	18ffffcc 	andi	r3,r3,65535
 2013ae8:	10bfffcc 	andi	r2,r2,65535
 2013aec:	18800636 	bltu	r3,r2,2013b08 <OSQPost+0xe8>
 2013af0:	e0bff817 	ldw	r2,-32(fp)
 2013af4:	e0bffa15 	stw	r2,-24(fp)
 2013af8:	e0bffa17 	ldw	r2,-24(fp)
 2013afc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2013b00:	00800784 	movi	r2,30
 2013b04:	00001b06 	br	2013b74 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2013b08:	e0bffb17 	ldw	r2,-20(fp)
 2013b0c:	10800317 	ldw	r2,12(r2)
 2013b10:	11000104 	addi	r4,r2,4
 2013b14:	e0fffb17 	ldw	r3,-20(fp)
 2013b18:	19000315 	stw	r4,12(r3)
 2013b1c:	e0ffff17 	ldw	r3,-4(fp)
 2013b20:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2013b24:	e0bffb17 	ldw	r2,-20(fp)
 2013b28:	1080058b 	ldhu	r2,22(r2)
 2013b2c:	10800044 	addi	r2,r2,1
 2013b30:	1007883a 	mov	r3,r2
 2013b34:	e0bffb17 	ldw	r2,-20(fp)
 2013b38:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2013b3c:	e0bffb17 	ldw	r2,-20(fp)
 2013b40:	10c00317 	ldw	r3,12(r2)
 2013b44:	e0bffb17 	ldw	r2,-20(fp)
 2013b48:	10800217 	ldw	r2,8(r2)
 2013b4c:	1880041e 	bne	r3,r2,2013b60 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 2013b50:	e0bffb17 	ldw	r2,-20(fp)
 2013b54:	10c00117 	ldw	r3,4(r2)
 2013b58:	e0bffb17 	ldw	r2,-20(fp)
 2013b5c:	10c00315 	stw	r3,12(r2)
 2013b60:	e0bff817 	ldw	r2,-32(fp)
 2013b64:	e0bffc15 	stw	r2,-16(fp)
 2013b68:	e0bffc17 	ldw	r2,-16(fp)
 2013b6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2013b70:	0005883a 	mov	r2,zero
}
 2013b74:	e037883a 	mov	sp,fp
 2013b78:	dfc00117 	ldw	ra,4(sp)
 2013b7c:	df000017 	ldw	fp,0(sp)
 2013b80:	dec00204 	addi	sp,sp,8
 2013b84:	f800283a 	ret

02013b88 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2013b88:	defff604 	addi	sp,sp,-40
 2013b8c:	dfc00915 	stw	ra,36(sp)
 2013b90:	df000815 	stw	fp,32(sp)
 2013b94:	df000804 	addi	fp,sp,32
 2013b98:	e13ffe15 	stw	r4,-8(fp)
 2013b9c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013ba0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2013ba4:	e0bffe17 	ldw	r2,-8(fp)
 2013ba8:	1000021e 	bne	r2,zero,2013bb4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2013bac:	00800104 	movi	r2,4
 2013bb0:	00004c06 	br	2013ce4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2013bb4:	e0bffe17 	ldw	r2,-8(fp)
 2013bb8:	10800003 	ldbu	r2,0(r2)
 2013bbc:	10803fcc 	andi	r2,r2,255
 2013bc0:	108000a0 	cmpeqi	r2,r2,2
 2013bc4:	1000021e 	bne	r2,zero,2013bd0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 2013bc8:	00800044 	movi	r2,1
 2013bcc:	00004506 	br	2013ce4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013bd0:	0005303a 	rdctl	r2,status
 2013bd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013bd8:	e0fffd17 	ldw	r3,-12(fp)
 2013bdc:	00bfff84 	movi	r2,-2
 2013be0:	1884703a 	and	r2,r3,r2
 2013be4:	1001703a 	wrctl	status,r2
  
  return context;
 2013be8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013bec:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 2013bf0:	e0bffe17 	ldw	r2,-8(fp)
 2013bf4:	10800283 	ldbu	r2,10(r2)
 2013bf8:	10803fcc 	andi	r2,r2,255
 2013bfc:	10000c26 	beq	r2,zero,2013c30 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2013c00:	000f883a 	mov	r7,zero
 2013c04:	01800104 	movi	r6,4
 2013c08:	e17fff17 	ldw	r5,-4(fp)
 2013c0c:	e13ffe17 	ldw	r4,-8(fp)
 2013c10:	200f4180 	call	200f418 <OS_EventTaskRdy>
 2013c14:	e0bff817 	ldw	r2,-32(fp)
 2013c18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c1c:	e0bff917 	ldw	r2,-28(fp)
 2013c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2013c24:	200fe640 	call	200fe64 <OS_Sched>
        return (OS_ERR_NONE);
 2013c28:	0005883a 	mov	r2,zero
 2013c2c:	00002d06 	br	2013ce4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2013c30:	e0bffe17 	ldw	r2,-8(fp)
 2013c34:	10800117 	ldw	r2,4(r2)
 2013c38:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2013c3c:	e0bffb17 	ldw	r2,-20(fp)
 2013c40:	10c0058b 	ldhu	r3,22(r2)
 2013c44:	e0bffb17 	ldw	r2,-20(fp)
 2013c48:	1080050b 	ldhu	r2,20(r2)
 2013c4c:	18ffffcc 	andi	r3,r3,65535
 2013c50:	10bfffcc 	andi	r2,r2,65535
 2013c54:	18800636 	bltu	r3,r2,2013c70 <OSQPostFront+0xe8>
 2013c58:	e0bff817 	ldw	r2,-32(fp)
 2013c5c:	e0bffa15 	stw	r2,-24(fp)
 2013c60:	e0bffa17 	ldw	r2,-24(fp)
 2013c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2013c68:	00800784 	movi	r2,30
 2013c6c:	00001d06 	br	2013ce4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2013c70:	e0bffb17 	ldw	r2,-20(fp)
 2013c74:	10c00417 	ldw	r3,16(r2)
 2013c78:	e0bffb17 	ldw	r2,-20(fp)
 2013c7c:	10800117 	ldw	r2,4(r2)
 2013c80:	1880041e 	bne	r3,r2,2013c94 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2013c84:	e0bffb17 	ldw	r2,-20(fp)
 2013c88:	10c00217 	ldw	r3,8(r2)
 2013c8c:	e0bffb17 	ldw	r2,-20(fp)
 2013c90:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2013c94:	e0bffb17 	ldw	r2,-20(fp)
 2013c98:	10800417 	ldw	r2,16(r2)
 2013c9c:	10ffff04 	addi	r3,r2,-4
 2013ca0:	e0bffb17 	ldw	r2,-20(fp)
 2013ca4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2013ca8:	e0bffb17 	ldw	r2,-20(fp)
 2013cac:	10800417 	ldw	r2,16(r2)
 2013cb0:	e0ffff17 	ldw	r3,-4(fp)
 2013cb4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2013cb8:	e0bffb17 	ldw	r2,-20(fp)
 2013cbc:	1080058b 	ldhu	r2,22(r2)
 2013cc0:	10800044 	addi	r2,r2,1
 2013cc4:	1007883a 	mov	r3,r2
 2013cc8:	e0bffb17 	ldw	r2,-20(fp)
 2013ccc:	10c0058d 	sth	r3,22(r2)
 2013cd0:	e0bff817 	ldw	r2,-32(fp)
 2013cd4:	e0bffc15 	stw	r2,-16(fp)
 2013cd8:	e0bffc17 	ldw	r2,-16(fp)
 2013cdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2013ce0:	0005883a 	mov	r2,zero
}
 2013ce4:	e037883a 	mov	sp,fp
 2013ce8:	dfc00117 	ldw	ra,4(sp)
 2013cec:	df000017 	ldw	fp,0(sp)
 2013cf0:	dec00204 	addi	sp,sp,8
 2013cf4:	f800283a 	ret

02013cf8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2013cf8:	defff504 	addi	sp,sp,-44
 2013cfc:	dfc00a15 	stw	ra,40(sp)
 2013d00:	df000915 	stw	fp,36(sp)
 2013d04:	df000904 	addi	fp,sp,36
 2013d08:	e13ffd15 	stw	r4,-12(fp)
 2013d0c:	e17ffe15 	stw	r5,-8(fp)
 2013d10:	3005883a 	mov	r2,r6
 2013d14:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013d18:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2013d1c:	e0bffd17 	ldw	r2,-12(fp)
 2013d20:	1000021e 	bne	r2,zero,2013d2c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2013d24:	00800104 	movi	r2,4
 2013d28:	00007106 	br	2013ef0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2013d2c:	e0bffd17 	ldw	r2,-12(fp)
 2013d30:	10800003 	ldbu	r2,0(r2)
 2013d34:	10803fcc 	andi	r2,r2,255
 2013d38:	108000a0 	cmpeqi	r2,r2,2
 2013d3c:	1000021e 	bne	r2,zero,2013d48 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 2013d40:	00800044 	movi	r2,1
 2013d44:	00006a06 	br	2013ef0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d48:	0005303a 	rdctl	r2,status
 2013d4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d50:	e0fffc17 	ldw	r3,-16(fp)
 2013d54:	00bfff84 	movi	r2,-2
 2013d58:	1884703a 	and	r2,r3,r2
 2013d5c:	1001703a 	wrctl	status,r2
  
  return context;
 2013d60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013d64:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2013d68:	e0bffd17 	ldw	r2,-12(fp)
 2013d6c:	10800283 	ldbu	r2,10(r2)
 2013d70:	10803fcc 	andi	r2,r2,255
 2013d74:	10001d26 	beq	r2,zero,2013dec <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2013d78:	e0bfff03 	ldbu	r2,-4(fp)
 2013d7c:	1080004c 	andi	r2,r2,1
 2013d80:	10000b26 	beq	r2,zero,2013db0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2013d84:	00000506 	br	2013d9c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2013d88:	000f883a 	mov	r7,zero
 2013d8c:	01800104 	movi	r6,4
 2013d90:	e17ffe17 	ldw	r5,-8(fp)
 2013d94:	e13ffd17 	ldw	r4,-12(fp)
 2013d98:	200f4180 	call	200f418 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2013d9c:	e0bffd17 	ldw	r2,-12(fp)
 2013da0:	10800283 	ldbu	r2,10(r2)
 2013da4:	10803fcc 	andi	r2,r2,255
 2013da8:	103ff71e 	bne	r2,zero,2013d88 <OSQPostOpt+0x90>
 2013dac:	00000506 	br	2013dc4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2013db0:	000f883a 	mov	r7,zero
 2013db4:	01800104 	movi	r6,4
 2013db8:	e17ffe17 	ldw	r5,-8(fp)
 2013dbc:	e13ffd17 	ldw	r4,-12(fp)
 2013dc0:	200f4180 	call	200f418 <OS_EventTaskRdy>
 2013dc4:	e0bff717 	ldw	r2,-36(fp)
 2013dc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013dcc:	e0bff817 	ldw	r2,-32(fp)
 2013dd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2013dd4:	e0bfff03 	ldbu	r2,-4(fp)
 2013dd8:	1080010c 	andi	r2,r2,4
 2013ddc:	1000011e 	bne	r2,zero,2013de4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 2013de0:	200fe640 	call	200fe64 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2013de4:	0005883a 	mov	r2,zero
 2013de8:	00004106 	br	2013ef0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2013dec:	e0bffd17 	ldw	r2,-12(fp)
 2013df0:	10800117 	ldw	r2,4(r2)
 2013df4:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2013df8:	e0bffa17 	ldw	r2,-24(fp)
 2013dfc:	10c0058b 	ldhu	r3,22(r2)
 2013e00:	e0bffa17 	ldw	r2,-24(fp)
 2013e04:	1080050b 	ldhu	r2,20(r2)
 2013e08:	18ffffcc 	andi	r3,r3,65535
 2013e0c:	10bfffcc 	andi	r2,r2,65535
 2013e10:	18800636 	bltu	r3,r2,2013e2c <OSQPostOpt+0x134>
 2013e14:	e0bff717 	ldw	r2,-36(fp)
 2013e18:	e0bff915 	stw	r2,-28(fp)
 2013e1c:	e0bff917 	ldw	r2,-28(fp)
 2013e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2013e24:	00800784 	movi	r2,30
 2013e28:	00003106 	br	2013ef0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2013e2c:	e0bfff03 	ldbu	r2,-4(fp)
 2013e30:	1080008c 	andi	r2,r2,2
 2013e34:	10001326 	beq	r2,zero,2013e84 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 2013e38:	e0bffa17 	ldw	r2,-24(fp)
 2013e3c:	10c00417 	ldw	r3,16(r2)
 2013e40:	e0bffa17 	ldw	r2,-24(fp)
 2013e44:	10800117 	ldw	r2,4(r2)
 2013e48:	1880041e 	bne	r3,r2,2013e5c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2013e4c:	e0bffa17 	ldw	r2,-24(fp)
 2013e50:	10c00217 	ldw	r3,8(r2)
 2013e54:	e0bffa17 	ldw	r2,-24(fp)
 2013e58:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2013e5c:	e0bffa17 	ldw	r2,-24(fp)
 2013e60:	10800417 	ldw	r2,16(r2)
 2013e64:	10ffff04 	addi	r3,r2,-4
 2013e68:	e0bffa17 	ldw	r2,-24(fp)
 2013e6c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2013e70:	e0bffa17 	ldw	r2,-24(fp)
 2013e74:	10800417 	ldw	r2,16(r2)
 2013e78:	e0fffe17 	ldw	r3,-8(fp)
 2013e7c:	10c00015 	stw	r3,0(r2)
 2013e80:	00001006 	br	2013ec4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2013e84:	e0bffa17 	ldw	r2,-24(fp)
 2013e88:	10800317 	ldw	r2,12(r2)
 2013e8c:	11000104 	addi	r4,r2,4
 2013e90:	e0fffa17 	ldw	r3,-24(fp)
 2013e94:	19000315 	stw	r4,12(r3)
 2013e98:	e0fffe17 	ldw	r3,-8(fp)
 2013e9c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 2013ea0:	e0bffa17 	ldw	r2,-24(fp)
 2013ea4:	10c00317 	ldw	r3,12(r2)
 2013ea8:	e0bffa17 	ldw	r2,-24(fp)
 2013eac:	10800217 	ldw	r2,8(r2)
 2013eb0:	1880041e 	bne	r3,r2,2013ec4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2013eb4:	e0bffa17 	ldw	r2,-24(fp)
 2013eb8:	10c00117 	ldw	r3,4(r2)
 2013ebc:	e0bffa17 	ldw	r2,-24(fp)
 2013ec0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2013ec4:	e0bffa17 	ldw	r2,-24(fp)
 2013ec8:	1080058b 	ldhu	r2,22(r2)
 2013ecc:	10800044 	addi	r2,r2,1
 2013ed0:	1007883a 	mov	r3,r2
 2013ed4:	e0bffa17 	ldw	r2,-24(fp)
 2013ed8:	10c0058d 	sth	r3,22(r2)
 2013edc:	e0bff717 	ldw	r2,-36(fp)
 2013ee0:	e0bffb15 	stw	r2,-20(fp)
 2013ee4:	e0bffb17 	ldw	r2,-20(fp)
 2013ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2013eec:	0005883a 	mov	r2,zero
}
 2013ef0:	e037883a 	mov	sp,fp
 2013ef4:	dfc00117 	ldw	ra,4(sp)
 2013ef8:	df000017 	ldw	fp,0(sp)
 2013efc:	dec00204 	addi	sp,sp,8
 2013f00:	f800283a 	ret

02013f04 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2013f04:	defff604 	addi	sp,sp,-40
 2013f08:	df000915 	stw	fp,36(sp)
 2013f0c:	df000904 	addi	fp,sp,36
 2013f10:	e13ffe15 	stw	r4,-8(fp)
 2013f14:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2013f18:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2013f1c:	e0bffe17 	ldw	r2,-8(fp)
 2013f20:	1000021e 	bne	r2,zero,2013f2c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2013f24:	00800104 	movi	r2,4
 2013f28:	00004906 	br	2014050 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2013f2c:	e0bfff17 	ldw	r2,-4(fp)
 2013f30:	1000021e 	bne	r2,zero,2013f3c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2013f34:	00800244 	movi	r2,9
 2013f38:	00004506 	br	2014050 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2013f3c:	e0bffe17 	ldw	r2,-8(fp)
 2013f40:	10800003 	ldbu	r2,0(r2)
 2013f44:	10803fcc 	andi	r2,r2,255
 2013f48:	108000a0 	cmpeqi	r2,r2,2
 2013f4c:	1000021e 	bne	r2,zero,2013f58 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2013f50:	00800044 	movi	r2,1
 2013f54:	00003e06 	br	2014050 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013f58:	0005303a 	rdctl	r2,status
 2013f5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013f60:	e0fffd17 	ldw	r3,-12(fp)
 2013f64:	00bfff84 	movi	r2,-2
 2013f68:	1884703a 	and	r2,r3,r2
 2013f6c:	1001703a 	wrctl	status,r2
  
  return context;
 2013f70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013f74:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2013f78:	e0bffe17 	ldw	r2,-8(fp)
 2013f7c:	10c00283 	ldbu	r3,10(r2)
 2013f80:	e0bfff17 	ldw	r2,-4(fp)
 2013f84:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2013f88:	e0bffe17 	ldw	r2,-8(fp)
 2013f8c:	108002c4 	addi	r2,r2,11
 2013f90:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2013f94:	e0bfff17 	ldw	r2,-4(fp)
 2013f98:	10800204 	addi	r2,r2,8
 2013f9c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2013fa0:	e03ff705 	stb	zero,-36(fp)
 2013fa4:	00000b06 	br	2013fd4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 2013fa8:	e0bff917 	ldw	r2,-28(fp)
 2013fac:	10c00044 	addi	r3,r2,1
 2013fb0:	e0fff915 	stw	r3,-28(fp)
 2013fb4:	e0fff817 	ldw	r3,-32(fp)
 2013fb8:	19000044 	addi	r4,r3,1
 2013fbc:	e13ff815 	stw	r4,-32(fp)
 2013fc0:	18c00003 	ldbu	r3,0(r3)
 2013fc4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2013fc8:	e0bff703 	ldbu	r2,-36(fp)
 2013fcc:	10800044 	addi	r2,r2,1
 2013fd0:	e0bff705 	stb	r2,-36(fp)
 2013fd4:	e0bff703 	ldbu	r2,-36(fp)
 2013fd8:	108000f0 	cmpltui	r2,r2,3
 2013fdc:	103ff21e 	bne	r2,zero,2013fa8 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 2013fe0:	e0bffe17 	ldw	r2,-8(fp)
 2013fe4:	10800117 	ldw	r2,4(r2)
 2013fe8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2013fec:	e0bffc17 	ldw	r2,-16(fp)
 2013ff0:	1080058b 	ldhu	r2,22(r2)
 2013ff4:	10bfffcc 	andi	r2,r2,65535
 2013ff8:	10000626 	beq	r2,zero,2014014 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2013ffc:	e0bffc17 	ldw	r2,-16(fp)
 2014000:	10800417 	ldw	r2,16(r2)
 2014004:	10c00017 	ldw	r3,0(r2)
 2014008:	e0bfff17 	ldw	r2,-4(fp)
 201400c:	10c00015 	stw	r3,0(r2)
 2014010:	00000206 	br	201401c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2014014:	e0bfff17 	ldw	r2,-4(fp)
 2014018:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201401c:	e0bffc17 	ldw	r2,-16(fp)
 2014020:	10c0058b 	ldhu	r3,22(r2)
 2014024:	e0bfff17 	ldw	r2,-4(fp)
 2014028:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201402c:	e0bffc17 	ldw	r2,-16(fp)
 2014030:	10c0050b 	ldhu	r3,20(r2)
 2014034:	e0bfff17 	ldw	r2,-4(fp)
 2014038:	10c0018d 	sth	r3,6(r2)
 201403c:	e0bffa17 	ldw	r2,-24(fp)
 2014040:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014044:	e0bffb17 	ldw	r2,-20(fp)
 2014048:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201404c:	0005883a 	mov	r2,zero
}
 2014050:	e037883a 	mov	sp,fp
 2014054:	df000017 	ldw	fp,0(sp)
 2014058:	dec00104 	addi	sp,sp,4
 201405c:	f800283a 	ret

02014060 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2014060:	defffb04 	addi	sp,sp,-20
 2014064:	dfc00415 	stw	ra,16(sp)
 2014068:	df000315 	stw	fp,12(sp)
 201406c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2014070:	01407804 	movi	r5,480
 2014074:	010080b4 	movhi	r4,514
 2014078:	21102404 	addi	r4,r4,16528
 201407c:	200fda80 	call	200fda8 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2014080:	008080b4 	movhi	r2,514
 2014084:	10902404 	addi	r2,r2,16528
 2014088:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201408c:	008080b4 	movhi	r2,514
 2014090:	10902a04 	addi	r2,r2,16552
 2014094:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2014098:	e03ffd0d 	sth	zero,-12(fp)
 201409c:	00000c06 	br	20140d0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 20140a0:	e0bffe17 	ldw	r2,-8(fp)
 20140a4:	e0ffff17 	ldw	r3,-4(fp)
 20140a8:	10c00015 	stw	r3,0(r2)
        pq1++;
 20140ac:	e0bffe17 	ldw	r2,-8(fp)
 20140b0:	10800604 	addi	r2,r2,24
 20140b4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 20140b8:	e0bfff17 	ldw	r2,-4(fp)
 20140bc:	10800604 	addi	r2,r2,24
 20140c0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 20140c4:	e0bffd0b 	ldhu	r2,-12(fp)
 20140c8:	10800044 	addi	r2,r2,1
 20140cc:	e0bffd0d 	sth	r2,-12(fp)
 20140d0:	e0bffd0b 	ldhu	r2,-12(fp)
 20140d4:	108004f0 	cmpltui	r2,r2,19
 20140d8:	103ff11e 	bne	r2,zero,20140a0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 20140dc:	e0bffe17 	ldw	r2,-8(fp)
 20140e0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 20140e4:	008080b4 	movhi	r2,514
 20140e8:	10902404 	addi	r2,r2,16528
 20140ec:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
 20140f0:	0001883a 	nop
 20140f4:	e037883a 	mov	sp,fp
 20140f8:	dfc00117 	ldw	ra,4(sp)
 20140fc:	df000017 	ldw	fp,0(sp)
 2014100:	dec00204 	addi	sp,sp,8
 2014104:	f800283a 	ret

02014108 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2014108:	defffa04 	addi	sp,sp,-24
 201410c:	df000515 	stw	fp,20(sp)
 2014110:	df000504 	addi	fp,sp,20
 2014114:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014118:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201411c:	e0bfff17 	ldw	r2,-4(fp)
 2014120:	1000021e 	bne	r2,zero,201412c <OSSemAccept+0x24>
        return (0);
 2014124:	0005883a 	mov	r2,zero
 2014128:	00001f06 	br	20141a8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201412c:	e0bfff17 	ldw	r2,-4(fp)
 2014130:	10800003 	ldbu	r2,0(r2)
 2014134:	10803fcc 	andi	r2,r2,255
 2014138:	108000e0 	cmpeqi	r2,r2,3
 201413c:	1000021e 	bne	r2,zero,2014148 <OSSemAccept+0x40>
        return (0);
 2014140:	0005883a 	mov	r2,zero
 2014144:	00001806 	br	20141a8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014148:	0005303a 	rdctl	r2,status
 201414c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014150:	e0fffe17 	ldw	r3,-8(fp)
 2014154:	00bfff84 	movi	r2,-2
 2014158:	1884703a 	and	r2,r3,r2
 201415c:	1001703a 	wrctl	status,r2
  
  return context;
 2014160:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2014164:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2014168:	e0bfff17 	ldw	r2,-4(fp)
 201416c:	1080020b 	ldhu	r2,8(r2)
 2014170:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2014174:	e0bffd0b 	ldhu	r2,-12(fp)
 2014178:	10000626 	beq	r2,zero,2014194 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201417c:	e0bfff17 	ldw	r2,-4(fp)
 2014180:	1080020b 	ldhu	r2,8(r2)
 2014184:	10bfffc4 	addi	r2,r2,-1
 2014188:	1007883a 	mov	r3,r2
 201418c:	e0bfff17 	ldw	r2,-4(fp)
 2014190:	10c0020d 	sth	r3,8(r2)
 2014194:	e0bffb17 	ldw	r2,-20(fp)
 2014198:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201419c:	e0bffc17 	ldw	r2,-16(fp)
 20141a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 20141a4:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20141a8:	e037883a 	mov	sp,fp
 20141ac:	df000017 	ldw	fp,0(sp)
 20141b0:	dec00104 	addi	sp,sp,4
 20141b4:	f800283a 	ret

020141b8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 20141b8:	defff904 	addi	sp,sp,-28
 20141bc:	dfc00615 	stw	ra,24(sp)
 20141c0:	df000515 	stw	fp,20(sp)
 20141c4:	df000504 	addi	fp,sp,20
 20141c8:	2005883a 	mov	r2,r4
 20141cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20141d0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20141d4:	d0a73103 	ldbu	r2,-25404(gp)
 20141d8:	10803fcc 	andi	r2,r2,255
 20141dc:	10000226 	beq	r2,zero,20141e8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 20141e0:	0005883a 	mov	r2,zero
 20141e4:	00002506 	br	201427c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20141e8:	0005303a 	rdctl	r2,status
 20141ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20141f0:	e0fffe17 	ldw	r3,-8(fp)
 20141f4:	00bfff84 	movi	r2,-2
 20141f8:	1884703a 	and	r2,r3,r2
 20141fc:	1001703a 	wrctl	status,r2
  
  return context;
 2014200:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2014204:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2014208:	d0a73017 	ldw	r2,-25408(gp)
 201420c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2014210:	d0a73017 	ldw	r2,-25408(gp)
 2014214:	10000326 	beq	r2,zero,2014224 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2014218:	d0a73017 	ldw	r2,-25408(gp)
 201421c:	10800117 	ldw	r2,4(r2)
 2014220:	d0a73015 	stw	r2,-25408(gp)
 2014224:	e0bffb17 	ldw	r2,-20(fp)
 2014228:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201422c:	e0bffc17 	ldw	r2,-16(fp)
 2014230:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2014234:	e0bffd17 	ldw	r2,-12(fp)
 2014238:	10000f26 	beq	r2,zero,2014278 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201423c:	e0bffd17 	ldw	r2,-12(fp)
 2014240:	00c000c4 	movi	r3,3
 2014244:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2014248:	e0bffd17 	ldw	r2,-12(fp)
 201424c:	e0ffff0b 	ldhu	r3,-4(fp)
 2014250:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2014254:	e0bffd17 	ldw	r2,-12(fp)
 2014258:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201425c:	e0bffd17 	ldw	r2,-12(fp)
 2014260:	00c00fc4 	movi	r3,63
 2014264:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2014268:	e0bffd17 	ldw	r2,-12(fp)
 201426c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2014270:	e13ffd17 	ldw	r4,-12(fp)
 2014274:	200f9c80 	call	200f9c8 <OS_EventWaitListInit>
    }
    return (pevent);
 2014278:	e0bffd17 	ldw	r2,-12(fp)
}
 201427c:	e037883a 	mov	sp,fp
 2014280:	dfc00117 	ldw	ra,4(sp)
 2014284:	df000017 	ldw	fp,0(sp)
 2014288:	dec00204 	addi	sp,sp,8
 201428c:	f800283a 	ret

02014290 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014290:	defff304 	addi	sp,sp,-52
 2014294:	dfc00c15 	stw	ra,48(sp)
 2014298:	df000b15 	stw	fp,44(sp)
 201429c:	df000b04 	addi	fp,sp,44
 20142a0:	e13ffd15 	stw	r4,-12(fp)
 20142a4:	2805883a 	mov	r2,r5
 20142a8:	e1bfff15 	stw	r6,-4(fp)
 20142ac:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20142b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20142b4:	e0bfff17 	ldw	r2,-4(fp)
 20142b8:	1000021e 	bne	r2,zero,20142c4 <OSSemDel+0x34>
        return (pevent);
 20142bc:	e0bffd17 	ldw	r2,-12(fp)
 20142c0:	00007e06 	br	20144bc <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20142c4:	e0bffd17 	ldw	r2,-12(fp)
 20142c8:	1000051e 	bne	r2,zero,20142e0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20142cc:	e0bfff17 	ldw	r2,-4(fp)
 20142d0:	00c00104 	movi	r3,4
 20142d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20142d8:	e0bffd17 	ldw	r2,-12(fp)
 20142dc:	00007706 	br	20144bc <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 20142e0:	e0bffd17 	ldw	r2,-12(fp)
 20142e4:	10800003 	ldbu	r2,0(r2)
 20142e8:	10803fcc 	andi	r2,r2,255
 20142ec:	108000e0 	cmpeqi	r2,r2,3
 20142f0:	1000051e 	bne	r2,zero,2014308 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20142f4:	e0bfff17 	ldw	r2,-4(fp)
 20142f8:	00c00044 	movi	r3,1
 20142fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014300:	e0bffd17 	ldw	r2,-12(fp)
 2014304:	00006d06 	br	20144bc <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014308:	d0a73103 	ldbu	r2,-25404(gp)
 201430c:	10803fcc 	andi	r2,r2,255
 2014310:	10000526 	beq	r2,zero,2014328 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2014314:	e0bfff17 	ldw	r2,-4(fp)
 2014318:	00c003c4 	movi	r3,15
 201431c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014320:	e0bffd17 	ldw	r2,-12(fp)
 2014324:	00006506 	br	20144bc <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014328:	0005303a 	rdctl	r2,status
 201432c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014330:	e0fffc17 	ldw	r3,-16(fp)
 2014334:	00bfff84 	movi	r2,-2
 2014338:	1884703a 	and	r2,r3,r2
 201433c:	1001703a 	wrctl	status,r2
  
  return context;
 2014340:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014344:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2014348:	e0bffd17 	ldw	r2,-12(fp)
 201434c:	10800283 	ldbu	r2,10(r2)
 2014350:	10803fcc 	andi	r2,r2,255
 2014354:	10000326 	beq	r2,zero,2014364 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2014358:	00800044 	movi	r2,1
 201435c:	e0bff505 	stb	r2,-44(fp)
 2014360:	00000106 	br	2014368 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2014364:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2014368:	e0bffe03 	ldbu	r2,-8(fp)
 201436c:	10000326 	beq	r2,zero,201437c <OSSemDel+0xec>
 2014370:	10800060 	cmpeqi	r2,r2,1
 2014374:	1000281e 	bne	r2,zero,2014418 <OSSemDel+0x188>
 2014378:	00004506 	br	2014490 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201437c:	e0bff503 	ldbu	r2,-44(fp)
 2014380:	1000161e 	bne	r2,zero,20143dc <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2014384:	e0bffd17 	ldw	r2,-12(fp)
 2014388:	00c00fc4 	movi	r3,63
 201438c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2014390:	e0bffd17 	ldw	r2,-12(fp)
 2014394:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014398:	e0bffd17 	ldw	r2,-12(fp)
 201439c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 20143a0:	d0e73017 	ldw	r3,-25408(gp)
 20143a4:	e0bffd17 	ldw	r2,-12(fp)
 20143a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 20143ac:	e0bffd17 	ldw	r2,-12(fp)
 20143b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 20143b4:	e0bffd17 	ldw	r2,-12(fp)
 20143b8:	d0a73015 	stw	r2,-25408(gp)
 20143bc:	e0bff717 	ldw	r2,-36(fp)
 20143c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20143c4:	e0bff817 	ldw	r2,-32(fp)
 20143c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 20143cc:	e0bfff17 	ldw	r2,-4(fp)
 20143d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 20143d4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 20143d8:	00003706 	br	20144b8 <OSSemDel+0x228>
 20143dc:	e0bff717 	ldw	r2,-36(fp)
 20143e0:	e0bff915 	stw	r2,-28(fp)
 20143e4:	e0bff917 	ldw	r2,-28(fp)
 20143e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 20143ec:	e0bfff17 	ldw	r2,-4(fp)
 20143f0:	00c01244 	movi	r3,73
 20143f4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 20143f8:	e0bffd17 	ldw	r2,-12(fp)
 20143fc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2014400:	00002d06 	br	20144b8 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2014404:	000f883a 	mov	r7,zero
 2014408:	01800044 	movi	r6,1
 201440c:	000b883a 	mov	r5,zero
 2014410:	e13ffd17 	ldw	r4,-12(fp)
 2014414:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2014418:	e0bffd17 	ldw	r2,-12(fp)
 201441c:	10800283 	ldbu	r2,10(r2)
 2014420:	10803fcc 	andi	r2,r2,255
 2014424:	103ff71e 	bne	r2,zero,2014404 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2014428:	e0bffd17 	ldw	r2,-12(fp)
 201442c:	00c00fc4 	movi	r3,63
 2014430:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2014434:	e0bffd17 	ldw	r2,-12(fp)
 2014438:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201443c:	e0bffd17 	ldw	r2,-12(fp)
 2014440:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2014444:	d0e73017 	ldw	r3,-25408(gp)
 2014448:	e0bffd17 	ldw	r2,-12(fp)
 201444c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2014450:	e0bffd17 	ldw	r2,-12(fp)
 2014454:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2014458:	e0bffd17 	ldw	r2,-12(fp)
 201445c:	d0a73015 	stw	r2,-25408(gp)
 2014460:	e0bff717 	ldw	r2,-36(fp)
 2014464:	e0bffa15 	stw	r2,-24(fp)
 2014468:	e0bffa17 	ldw	r2,-24(fp)
 201446c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2014470:	e0bff503 	ldbu	r2,-44(fp)
 2014474:	10800058 	cmpnei	r2,r2,1
 2014478:	1000011e 	bne	r2,zero,2014480 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201447c:	200fe640 	call	200fe64 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2014480:	e0bfff17 	ldw	r2,-4(fp)
 2014484:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2014488:	e03ff615 	stw	zero,-40(fp)
             break;
 201448c:	00000a06 	br	20144b8 <OSSemDel+0x228>
 2014490:	e0bff717 	ldw	r2,-36(fp)
 2014494:	e0bffb15 	stw	r2,-20(fp)
 2014498:	e0bffb17 	ldw	r2,-20(fp)
 201449c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 20144a0:	e0bfff17 	ldw	r2,-4(fp)
 20144a4:	00c001c4 	movi	r3,7
 20144a8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 20144ac:	e0bffd17 	ldw	r2,-12(fp)
 20144b0:	e0bff615 	stw	r2,-40(fp)
             break;
 20144b4:	0001883a 	nop
    }
    return (pevent_return);
 20144b8:	e0bff617 	ldw	r2,-40(fp)
}
 20144bc:	e037883a 	mov	sp,fp
 20144c0:	dfc00117 	ldw	ra,4(sp)
 20144c4:	df000017 	ldw	fp,0(sp)
 20144c8:	dec00204 	addi	sp,sp,8
 20144cc:	f800283a 	ret

020144d0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 20144d0:	defff504 	addi	sp,sp,-44
 20144d4:	dfc00a15 	stw	ra,40(sp)
 20144d8:	df000915 	stw	fp,36(sp)
 20144dc:	df000904 	addi	fp,sp,36
 20144e0:	e13ffd15 	stw	r4,-12(fp)
 20144e4:	2805883a 	mov	r2,r5
 20144e8:	e1bfff15 	stw	r6,-4(fp)
 20144ec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20144f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20144f4:	e0bfff17 	ldw	r2,-4(fp)
 20144f8:	10007226 	beq	r2,zero,20146c4 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20144fc:	e0bffd17 	ldw	r2,-12(fp)
 2014500:	1000041e 	bne	r2,zero,2014514 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2014504:	e0bfff17 	ldw	r2,-4(fp)
 2014508:	00c00104 	movi	r3,4
 201450c:	10c00005 	stb	r3,0(r2)
        return;
 2014510:	00006d06 	br	20146c8 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014514:	e0bffd17 	ldw	r2,-12(fp)
 2014518:	10800003 	ldbu	r2,0(r2)
 201451c:	10803fcc 	andi	r2,r2,255
 2014520:	108000e0 	cmpeqi	r2,r2,3
 2014524:	1000041e 	bne	r2,zero,2014538 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2014528:	e0bfff17 	ldw	r2,-4(fp)
 201452c:	00c00044 	movi	r3,1
 2014530:	10c00005 	stb	r3,0(r2)
        return;
 2014534:	00006406 	br	20146c8 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2014538:	d0a73103 	ldbu	r2,-25404(gp)
 201453c:	10803fcc 	andi	r2,r2,255
 2014540:	10000426 	beq	r2,zero,2014554 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2014544:	e0bfff17 	ldw	r2,-4(fp)
 2014548:	00c00084 	movi	r3,2
 201454c:	10c00005 	stb	r3,0(r2)
        return;
 2014550:	00005d06 	br	20146c8 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2014554:	d0a72303 	ldbu	r2,-25460(gp)
 2014558:	10803fcc 	andi	r2,r2,255
 201455c:	10000426 	beq	r2,zero,2014570 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2014560:	e0bfff17 	ldw	r2,-4(fp)
 2014564:	00c00344 	movi	r3,13
 2014568:	10c00005 	stb	r3,0(r2)
        return;
 201456c:	00005606 	br	20146c8 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014570:	0005303a 	rdctl	r2,status
 2014574:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014578:	e0fffc17 	ldw	r3,-16(fp)
 201457c:	00bfff84 	movi	r2,-2
 2014580:	1884703a 	and	r2,r3,r2
 2014584:	1001703a 	wrctl	status,r2
  
  return context;
 2014588:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201458c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2014590:	e0bffd17 	ldw	r2,-12(fp)
 2014594:	1080020b 	ldhu	r2,8(r2)
 2014598:	10bfffcc 	andi	r2,r2,65535
 201459c:	10000d26 	beq	r2,zero,20145d4 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 20145a0:	e0bffd17 	ldw	r2,-12(fp)
 20145a4:	1080020b 	ldhu	r2,8(r2)
 20145a8:	10bfffc4 	addi	r2,r2,-1
 20145ac:	1007883a 	mov	r3,r2
 20145b0:	e0bffd17 	ldw	r2,-12(fp)
 20145b4:	10c0020d 	sth	r3,8(r2)
 20145b8:	e0bff717 	ldw	r2,-36(fp)
 20145bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20145c0:	e0bff817 	ldw	r2,-32(fp)
 20145c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20145c8:	e0bfff17 	ldw	r2,-4(fp)
 20145cc:	10000005 	stb	zero,0(r2)
        return;
 20145d0:	00003d06 	br	20146c8 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 20145d4:	d0a73217 	ldw	r2,-25400(gp)
 20145d8:	d0e73217 	ldw	r3,-25400(gp)
 20145dc:	18c00c03 	ldbu	r3,48(r3)
 20145e0:	18c00054 	ori	r3,r3,1
 20145e4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20145e8:	d0a73217 	ldw	r2,-25400(gp)
 20145ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 20145f0:	d0a73217 	ldw	r2,-25400(gp)
 20145f4:	e0fffe0b 	ldhu	r3,-8(fp)
 20145f8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 20145fc:	e13ffd17 	ldw	r4,-12(fp)
 2014600:	200f5b00 	call	200f5b0 <OS_EventTaskWait>
 2014604:	e0bff717 	ldw	r2,-36(fp)
 2014608:	e0bffb15 	stw	r2,-20(fp)
 201460c:	e0bffb17 	ldw	r2,-20(fp)
 2014610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2014614:	200fe640 	call	200fe64 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014618:	0005303a 	rdctl	r2,status
 201461c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014620:	e0fff917 	ldw	r3,-28(fp)
 2014624:	00bfff84 	movi	r2,-2
 2014628:	1884703a 	and	r2,r3,r2
 201462c:	1001703a 	wrctl	status,r2
  
  return context;
 2014630:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2014634:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2014638:	d0a73217 	ldw	r2,-25400(gp)
 201463c:	10800c43 	ldbu	r2,49(r2)
 2014640:	10803fcc 	andi	r2,r2,255
 2014644:	10000326 	beq	r2,zero,2014654 <OSSemPend+0x184>
 2014648:	108000a0 	cmpeqi	r2,r2,2
 201464c:	1000041e 	bne	r2,zero,2014660 <OSSemPend+0x190>
 2014650:	00000706 	br	2014670 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2014654:	e0bfff17 	ldw	r2,-4(fp)
 2014658:	10000005 	stb	zero,0(r2)
             break;
 201465c:	00000c06 	br	2014690 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2014660:	e0bfff17 	ldw	r2,-4(fp)
 2014664:	00c00384 	movi	r3,14
 2014668:	10c00005 	stb	r3,0(r2)
             break;
 201466c:	00000806 	br	2014690 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2014670:	d0a73217 	ldw	r2,-25400(gp)
 2014674:	e17ffd17 	ldw	r5,-12(fp)
 2014678:	1009883a 	mov	r4,r2
 201467c:	200f8100 	call	200f810 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2014680:	e0bfff17 	ldw	r2,-4(fp)
 2014684:	00c00284 	movi	r3,10
 2014688:	10c00005 	stb	r3,0(r2)
             break;
 201468c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2014690:	d0a73217 	ldw	r2,-25400(gp)
 2014694:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2014698:	d0a73217 	ldw	r2,-25400(gp)
 201469c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 20146a0:	d0a73217 	ldw	r2,-25400(gp)
 20146a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20146a8:	d0a73217 	ldw	r2,-25400(gp)
 20146ac:	10000815 	stw	zero,32(r2)
 20146b0:	e0bff717 	ldw	r2,-36(fp)
 20146b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20146b8:	e0bffa17 	ldw	r2,-24(fp)
 20146bc:	1001703a 	wrctl	status,r2
 20146c0:	00000106 	br	20146c8 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 20146c4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 20146c8:	e037883a 	mov	sp,fp
 20146cc:	dfc00117 	ldw	ra,4(sp)
 20146d0:	df000017 	ldw	fp,0(sp)
 20146d4:	dec00204 	addi	sp,sp,8
 20146d8:	f800283a 	ret

020146dc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20146dc:	defff604 	addi	sp,sp,-40
 20146e0:	dfc00915 	stw	ra,36(sp)
 20146e4:	df000815 	stw	fp,32(sp)
 20146e8:	df000804 	addi	fp,sp,32
 20146ec:	e13ffd15 	stw	r4,-12(fp)
 20146f0:	2805883a 	mov	r2,r5
 20146f4:	e1bfff15 	stw	r6,-4(fp)
 20146f8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20146fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2014700:	e0bfff17 	ldw	r2,-4(fp)
 2014704:	1000021e 	bne	r2,zero,2014710 <OSSemPendAbort+0x34>
        return (0);
 2014708:	0005883a 	mov	r2,zero
 201470c:	00004906 	br	2014834 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014710:	e0bffd17 	ldw	r2,-12(fp)
 2014714:	1000051e 	bne	r2,zero,201472c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014718:	e0bfff17 	ldw	r2,-4(fp)
 201471c:	00c00104 	movi	r3,4
 2014720:	10c00005 	stb	r3,0(r2)
        return (0);
 2014724:	0005883a 	mov	r2,zero
 2014728:	00004206 	br	2014834 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201472c:	e0bffd17 	ldw	r2,-12(fp)
 2014730:	10800003 	ldbu	r2,0(r2)
 2014734:	10803fcc 	andi	r2,r2,255
 2014738:	108000e0 	cmpeqi	r2,r2,3
 201473c:	1000051e 	bne	r2,zero,2014754 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014740:	e0bfff17 	ldw	r2,-4(fp)
 2014744:	00c00044 	movi	r3,1
 2014748:	10c00005 	stb	r3,0(r2)
        return (0);
 201474c:	0005883a 	mov	r2,zero
 2014750:	00003806 	br	2014834 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014754:	0005303a 	rdctl	r2,status
 2014758:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201475c:	e0fffc17 	ldw	r3,-16(fp)
 2014760:	00bfff84 	movi	r2,-2
 2014764:	1884703a 	and	r2,r3,r2
 2014768:	1001703a 	wrctl	status,r2
  
  return context;
 201476c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014770:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2014774:	e0bffd17 	ldw	r2,-12(fp)
 2014778:	10800283 	ldbu	r2,10(r2)
 201477c:	10803fcc 	andi	r2,r2,255
 2014780:	10002526 	beq	r2,zero,2014818 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 2014784:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2014788:	e0bffe03 	ldbu	r2,-8(fp)
 201478c:	10800060 	cmpeqi	r2,r2,1
 2014790:	10000e26 	beq	r2,zero,20147cc <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2014794:	00000806 	br	20147b8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2014798:	01c00084 	movi	r7,2
 201479c:	01800044 	movi	r6,1
 20147a0:	000b883a 	mov	r5,zero
 20147a4:	e13ffd17 	ldw	r4,-12(fp)
 20147a8:	200f4180 	call	200f418 <OS_EventTaskRdy>
                     nbr_tasks++;
 20147ac:	e0bff803 	ldbu	r2,-32(fp)
 20147b0:	10800044 	addi	r2,r2,1
 20147b4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 20147b8:	e0bffd17 	ldw	r2,-12(fp)
 20147bc:	10800283 	ldbu	r2,10(r2)
 20147c0:	10803fcc 	andi	r2,r2,255
 20147c4:	103ff41e 	bne	r2,zero,2014798 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20147c8:	00000906 	br	20147f0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 20147cc:	01c00084 	movi	r7,2
 20147d0:	01800044 	movi	r6,1
 20147d4:	000b883a 	mov	r5,zero
 20147d8:	e13ffd17 	ldw	r4,-12(fp)
 20147dc:	200f4180 	call	200f418 <OS_EventTaskRdy>
                 nbr_tasks++;
 20147e0:	e0bff803 	ldbu	r2,-32(fp)
 20147e4:	10800044 	addi	r2,r2,1
 20147e8:	e0bff805 	stb	r2,-32(fp)
                 break;
 20147ec:	0001883a 	nop
 20147f0:	e0bff917 	ldw	r2,-28(fp)
 20147f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20147f8:	e0bffa17 	ldw	r2,-24(fp)
 20147fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2014800:	200fe640 	call	200fe64 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2014804:	e0bfff17 	ldw	r2,-4(fp)
 2014808:	00c00384 	movi	r3,14
 201480c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2014810:	e0bff803 	ldbu	r2,-32(fp)
 2014814:	00000706 	br	2014834 <OSSemPendAbort+0x158>
 2014818:	e0bff917 	ldw	r2,-28(fp)
 201481c:	e0bffb15 	stw	r2,-20(fp)
 2014820:	e0bffb17 	ldw	r2,-20(fp)
 2014824:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014828:	e0bfff17 	ldw	r2,-4(fp)
 201482c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 2014830:	0005883a 	mov	r2,zero
}
 2014834:	e037883a 	mov	sp,fp
 2014838:	dfc00117 	ldw	ra,4(sp)
 201483c:	df000017 	ldw	fp,0(sp)
 2014840:	dec00204 	addi	sp,sp,8
 2014844:	f800283a 	ret

02014848 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 2014848:	defff804 	addi	sp,sp,-32
 201484c:	dfc00715 	stw	ra,28(sp)
 2014850:	df000615 	stw	fp,24(sp)
 2014854:	df000604 	addi	fp,sp,24
 2014858:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201485c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014860:	e0bfff17 	ldw	r2,-4(fp)
 2014864:	1000021e 	bne	r2,zero,2014870 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 2014868:	00800104 	movi	r2,4
 201486c:	00003506 	br	2014944 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014870:	e0bfff17 	ldw	r2,-4(fp)
 2014874:	10800003 	ldbu	r2,0(r2)
 2014878:	10803fcc 	andi	r2,r2,255
 201487c:	108000e0 	cmpeqi	r2,r2,3
 2014880:	1000021e 	bne	r2,zero,201488c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 2014884:	00800044 	movi	r2,1
 2014888:	00002e06 	br	2014944 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201488c:	0005303a 	rdctl	r2,status
 2014890:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014894:	e0fffe17 	ldw	r3,-8(fp)
 2014898:	00bfff84 	movi	r2,-2
 201489c:	1884703a 	and	r2,r3,r2
 20148a0:	1001703a 	wrctl	status,r2
  
  return context;
 20148a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20148a8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 20148ac:	e0bfff17 	ldw	r2,-4(fp)
 20148b0:	10800283 	ldbu	r2,10(r2)
 20148b4:	10803fcc 	andi	r2,r2,255
 20148b8:	10000c26 	beq	r2,zero,20148ec <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 20148bc:	000f883a 	mov	r7,zero
 20148c0:	01800044 	movi	r6,1
 20148c4:	000b883a 	mov	r5,zero
 20148c8:	e13fff17 	ldw	r4,-4(fp)
 20148cc:	200f4180 	call	200f418 <OS_EventTaskRdy>
 20148d0:	e0bffa17 	ldw	r2,-24(fp)
 20148d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20148d8:	e0bffb17 	ldw	r2,-20(fp)
 20148dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 20148e0:	200fe640 	call	200fe64 <OS_Sched>
        return (OS_ERR_NONE);
 20148e4:	0005883a 	mov	r2,zero
 20148e8:	00001606 	br	2014944 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 20148ec:	e0bfff17 	ldw	r2,-4(fp)
 20148f0:	1080020b 	ldhu	r2,8(r2)
 20148f4:	10ffffcc 	andi	r3,r2,65535
 20148f8:	00bfffd4 	movui	r2,65535
 20148fc:	18800c26 	beq	r3,r2,2014930 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 2014900:	e0bfff17 	ldw	r2,-4(fp)
 2014904:	1080020b 	ldhu	r2,8(r2)
 2014908:	10800044 	addi	r2,r2,1
 201490c:	1007883a 	mov	r3,r2
 2014910:	e0bfff17 	ldw	r2,-4(fp)
 2014914:	10c0020d 	sth	r3,8(r2)
 2014918:	e0bffa17 	ldw	r2,-24(fp)
 201491c:	e0bffc15 	stw	r2,-16(fp)
 2014920:	e0bffc17 	ldw	r2,-16(fp)
 2014924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2014928:	0005883a 	mov	r2,zero
 201492c:	00000506 	br	2014944 <OSSemPost+0xfc>
 2014930:	e0bffa17 	ldw	r2,-24(fp)
 2014934:	e0bffd15 	stw	r2,-12(fp)
 2014938:	e0bffd17 	ldw	r2,-12(fp)
 201493c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 2014940:	00800c84 	movi	r2,50
}
 2014944:	e037883a 	mov	sp,fp
 2014948:	dfc00117 	ldw	ra,4(sp)
 201494c:	df000017 	ldw	fp,0(sp)
 2014950:	dec00204 	addi	sp,sp,8
 2014954:	f800283a 	ret

02014958 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 2014958:	defff704 	addi	sp,sp,-36
 201495c:	df000815 	stw	fp,32(sp)
 2014960:	df000804 	addi	fp,sp,32
 2014964:	e13ffe15 	stw	r4,-8(fp)
 2014968:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201496c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014970:	e0bffe17 	ldw	r2,-8(fp)
 2014974:	1000021e 	bne	r2,zero,2014980 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2014978:	00800104 	movi	r2,4
 201497c:	00003606 	br	2014a58 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 2014980:	e0bfff17 	ldw	r2,-4(fp)
 2014984:	1000021e 	bne	r2,zero,2014990 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2014988:	00800244 	movi	r2,9
 201498c:	00003206 	br	2014a58 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2014990:	e0bffe17 	ldw	r2,-8(fp)
 2014994:	10800003 	ldbu	r2,0(r2)
 2014998:	10803fcc 	andi	r2,r2,255
 201499c:	108000e0 	cmpeqi	r2,r2,3
 20149a0:	1000021e 	bne	r2,zero,20149ac <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 20149a4:	00800044 	movi	r2,1
 20149a8:	00002b06 	br	2014a58 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20149ac:	0005303a 	rdctl	r2,status
 20149b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20149b4:	e0fffd17 	ldw	r3,-12(fp)
 20149b8:	00bfff84 	movi	r2,-2
 20149bc:	1884703a 	and	r2,r3,r2
 20149c0:	1001703a 	wrctl	status,r2
  
  return context;
 20149c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20149c8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 20149cc:	e0bffe17 	ldw	r2,-8(fp)
 20149d0:	10c00283 	ldbu	r3,10(r2)
 20149d4:	e0bfff17 	ldw	r2,-4(fp)
 20149d8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 20149dc:	e0bffe17 	ldw	r2,-8(fp)
 20149e0:	108002c4 	addi	r2,r2,11
 20149e4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 20149e8:	e0bfff17 	ldw	r2,-4(fp)
 20149ec:	10800084 	addi	r2,r2,2
 20149f0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20149f4:	e03ffa05 	stb	zero,-24(fp)
 20149f8:	00000b06 	br	2014a28 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 20149fc:	e0bff917 	ldw	r2,-28(fp)
 2014a00:	10c00044 	addi	r3,r2,1
 2014a04:	e0fff915 	stw	r3,-28(fp)
 2014a08:	e0fff817 	ldw	r3,-32(fp)
 2014a0c:	19000044 	addi	r4,r3,1
 2014a10:	e13ff815 	stw	r4,-32(fp)
 2014a14:	18c00003 	ldbu	r3,0(r3)
 2014a18:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2014a1c:	e0bffa03 	ldbu	r2,-24(fp)
 2014a20:	10800044 	addi	r2,r2,1
 2014a24:	e0bffa05 	stb	r2,-24(fp)
 2014a28:	e0bffa03 	ldbu	r2,-24(fp)
 2014a2c:	108000f0 	cmpltui	r2,r2,3
 2014a30:	103ff21e 	bne	r2,zero,20149fc <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 2014a34:	e0bffe17 	ldw	r2,-8(fp)
 2014a38:	10c0020b 	ldhu	r3,8(r2)
 2014a3c:	e0bfff17 	ldw	r2,-4(fp)
 2014a40:	10c0000d 	sth	r3,0(r2)
 2014a44:	e0bffb17 	ldw	r2,-20(fp)
 2014a48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014a4c:	e0bffc17 	ldw	r2,-16(fp)
 2014a50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014a54:	0005883a 	mov	r2,zero
}
 2014a58:	e037883a 	mov	sp,fp
 2014a5c:	df000017 	ldw	fp,0(sp)
 2014a60:	dec00104 	addi	sp,sp,4
 2014a64:	f800283a 	ret

02014a68 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 2014a68:	defff904 	addi	sp,sp,-28
 2014a6c:	df000615 	stw	fp,24(sp)
 2014a70:	df000604 	addi	fp,sp,24
 2014a74:	e13ffd15 	stw	r4,-12(fp)
 2014a78:	2805883a 	mov	r2,r5
 2014a7c:	e1bfff15 	stw	r6,-4(fp)
 2014a80:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014a84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2014a88:	e0bfff17 	ldw	r2,-4(fp)
 2014a8c:	10003126 	beq	r2,zero,2014b54 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014a90:	e0bffd17 	ldw	r2,-12(fp)
 2014a94:	1000041e 	bne	r2,zero,2014aa8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2014a98:	e0bfff17 	ldw	r2,-4(fp)
 2014a9c:	00c00104 	movi	r3,4
 2014aa0:	10c00005 	stb	r3,0(r2)
        return;
 2014aa4:	00002c06 	br	2014b58 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014aa8:	e0bffd17 	ldw	r2,-12(fp)
 2014aac:	10800003 	ldbu	r2,0(r2)
 2014ab0:	10803fcc 	andi	r2,r2,255
 2014ab4:	108000e0 	cmpeqi	r2,r2,3
 2014ab8:	1000041e 	bne	r2,zero,2014acc <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 2014abc:	e0bfff17 	ldw	r2,-4(fp)
 2014ac0:	00c00044 	movi	r3,1
 2014ac4:	10c00005 	stb	r3,0(r2)
        return;
 2014ac8:	00002306 	br	2014b58 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014acc:	0005303a 	rdctl	r2,status
 2014ad0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ad4:	e0fffc17 	ldw	r3,-16(fp)
 2014ad8:	00bfff84 	movi	r2,-2
 2014adc:	1884703a 	and	r2,r3,r2
 2014ae0:	1001703a 	wrctl	status,r2
  
  return context;
 2014ae4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014ae8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 2014aec:	e0bfff17 	ldw	r2,-4(fp)
 2014af0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 2014af4:	e0bffd17 	ldw	r2,-12(fp)
 2014af8:	1080020b 	ldhu	r2,8(r2)
 2014afc:	10bfffcc 	andi	r2,r2,65535
 2014b00:	10000426 	beq	r2,zero,2014b14 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 2014b04:	e0bffd17 	ldw	r2,-12(fp)
 2014b08:	e0fffe0b 	ldhu	r3,-8(fp)
 2014b0c:	10c0020d 	sth	r3,8(r2)
 2014b10:	00000b06 	br	2014b40 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 2014b14:	e0bffd17 	ldw	r2,-12(fp)
 2014b18:	10800283 	ldbu	r2,10(r2)
 2014b1c:	10803fcc 	andi	r2,r2,255
 2014b20:	1000041e 	bne	r2,zero,2014b34 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 2014b24:	e0bffd17 	ldw	r2,-12(fp)
 2014b28:	e0fffe0b 	ldhu	r3,-8(fp)
 2014b2c:	10c0020d 	sth	r3,8(r2)
 2014b30:	00000306 	br	2014b40 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 2014b34:	e0bfff17 	ldw	r2,-4(fp)
 2014b38:	00c01244 	movi	r3,73
 2014b3c:	10c00005 	stb	r3,0(r2)
 2014b40:	e0bffa17 	ldw	r2,-24(fp)
 2014b44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b48:	e0bffb17 	ldw	r2,-20(fp)
 2014b4c:	1001703a 	wrctl	status,r2
 2014b50:	00000106 	br	2014b58 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2014b54:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 2014b58:	e037883a 	mov	sp,fp
 2014b5c:	df000017 	ldw	fp,0(sp)
 2014b60:	dec00104 	addi	sp,sp,4
 2014b64:	f800283a 	ret

02014b68 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 2014b68:	defff104 	addi	sp,sp,-60
 2014b6c:	dfc00e15 	stw	ra,56(sp)
 2014b70:	df000d15 	stw	fp,52(sp)
 2014b74:	df000d04 	addi	fp,sp,52
 2014b78:	2007883a 	mov	r3,r4
 2014b7c:	2805883a 	mov	r2,r5
 2014b80:	e0fffe05 	stb	r3,-8(fp)
 2014b84:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 2014b88:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 2014b8c:	e0bffe03 	ldbu	r2,-8(fp)
 2014b90:	10800530 	cmpltui	r2,r2,20
 2014b94:	1000051e 	bne	r2,zero,2014bac <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 2014b98:	e0bffe03 	ldbu	r2,-8(fp)
 2014b9c:	10803fe0 	cmpeqi	r2,r2,255
 2014ba0:	1000021e 	bne	r2,zero,2014bac <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 2014ba4:	00800a84 	movi	r2,42
 2014ba8:	00012606 	br	2015044 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 2014bac:	e0bfff03 	ldbu	r2,-4(fp)
 2014bb0:	10800530 	cmpltui	r2,r2,20
 2014bb4:	1000021e 	bne	r2,zero,2014bc0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 2014bb8:	00800a84 	movi	r2,42
 2014bbc:	00012106 	br	2015044 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014bc0:	0005303a 	rdctl	r2,status
 2014bc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014bc8:	e0fffd17 	ldw	r3,-12(fp)
 2014bcc:	00bfff84 	movi	r2,-2
 2014bd0:	1884703a 	and	r2,r3,r2
 2014bd4:	1001703a 	wrctl	status,r2
  
  return context;
 2014bd8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2014bdc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 2014be0:	e0ffff03 	ldbu	r3,-4(fp)
 2014be4:	008080b4 	movhi	r2,514
 2014be8:	1096b004 	addi	r2,r2,23232
 2014bec:	18c7883a 	add	r3,r3,r3
 2014bf0:	18c7883a 	add	r3,r3,r3
 2014bf4:	10c5883a 	add	r2,r2,r3
 2014bf8:	10800017 	ldw	r2,0(r2)
 2014bfc:	10000626 	beq	r2,zero,2014c18 <OSTaskChangePrio+0xb0>
 2014c00:	e0bff517 	ldw	r2,-44(fp)
 2014c04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c08:	e0bff617 	ldw	r2,-40(fp)
 2014c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 2014c10:	00800a04 	movi	r2,40
 2014c14:	00010b06 	br	2015044 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 2014c18:	e0bffe03 	ldbu	r2,-8(fp)
 2014c1c:	10803fd8 	cmpnei	r2,r2,255
 2014c20:	1000031e 	bne	r2,zero,2014c30 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 2014c24:	d0a73217 	ldw	r2,-25400(gp)
 2014c28:	10800c83 	ldbu	r2,50(r2)
 2014c2c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 2014c30:	e0fffe03 	ldbu	r3,-8(fp)
 2014c34:	008080b4 	movhi	r2,514
 2014c38:	1096b004 	addi	r2,r2,23232
 2014c3c:	18c7883a 	add	r3,r3,r3
 2014c40:	18c7883a 	add	r3,r3,r3
 2014c44:	10c5883a 	add	r2,r2,r3
 2014c48:	10800017 	ldw	r2,0(r2)
 2014c4c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 2014c50:	e0bff817 	ldw	r2,-32(fp)
 2014c54:	1000061e 	bne	r2,zero,2014c70 <OSTaskChangePrio+0x108>
 2014c58:	e0bff517 	ldw	r2,-44(fp)
 2014c5c:	e0bff715 	stw	r2,-36(fp)
 2014c60:	e0bff717 	ldw	r2,-36(fp)
 2014c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 2014c68:	00800a44 	movi	r2,41
 2014c6c:	0000f506 	br	2015044 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 2014c70:	e0bff817 	ldw	r2,-32(fp)
 2014c74:	10800058 	cmpnei	r2,r2,1
 2014c78:	1000061e 	bne	r2,zero,2014c94 <OSTaskChangePrio+0x12c>
 2014c7c:	e0bff517 	ldw	r2,-44(fp)
 2014c80:	e0bff915 	stw	r2,-28(fp)
 2014c84:	e0bff917 	ldw	r2,-28(fp)
 2014c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 2014c8c:	008010c4 	movi	r2,67
 2014c90:	0000ec06 	br	2015044 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 2014c94:	e0bfff03 	ldbu	r2,-4(fp)
 2014c98:	1004d0fa 	srli	r2,r2,3
 2014c9c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 2014ca0:	e0bfff03 	ldbu	r2,-4(fp)
 2014ca4:	108001cc 	andi	r2,r2,7
 2014ca8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 2014cac:	e0bffb03 	ldbu	r2,-20(fp)
 2014cb0:	00c00044 	movi	r3,1
 2014cb4:	1884983a 	sll	r2,r3,r2
 2014cb8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 2014cbc:	e0bffb43 	ldbu	r2,-19(fp)
 2014cc0:	00c00044 	movi	r3,1
 2014cc4:	1884983a 	sll	r2,r3,r2
 2014cc8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 2014ccc:	e0fffe03 	ldbu	r3,-8(fp)
 2014cd0:	008080b4 	movhi	r2,514
 2014cd4:	1096b004 	addi	r2,r2,23232
 2014cd8:	18c7883a 	add	r3,r3,r3
 2014cdc:	18c7883a 	add	r3,r3,r3
 2014ce0:	10c5883a 	add	r2,r2,r3
 2014ce4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 2014ce8:	e0ffff03 	ldbu	r3,-4(fp)
 2014cec:	008080b4 	movhi	r2,514
 2014cf0:	1096b004 	addi	r2,r2,23232
 2014cf4:	18c7883a 	add	r3,r3,r3
 2014cf8:	18c7883a 	add	r3,r3,r3
 2014cfc:	10c5883a 	add	r2,r2,r3
 2014d00:	e0fff817 	ldw	r3,-32(fp)
 2014d04:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 2014d08:	e0bff817 	ldw	r2,-32(fp)
 2014d0c:	10800d03 	ldbu	r2,52(r2)
 2014d10:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 2014d14:	e0bff817 	ldw	r2,-32(fp)
 2014d18:	10800d83 	ldbu	r2,54(r2)
 2014d1c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 2014d20:	e0bff817 	ldw	r2,-32(fp)
 2014d24:	10800d43 	ldbu	r2,53(r2)
 2014d28:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 2014d2c:	e0fffc03 	ldbu	r3,-16(fp)
 2014d30:	d0a72f44 	addi	r2,gp,-25411
 2014d34:	1885883a 	add	r2,r3,r2
 2014d38:	10c00003 	ldbu	r3,0(r2)
 2014d3c:	e0bffc83 	ldbu	r2,-14(fp)
 2014d40:	1884703a 	and	r2,r3,r2
 2014d44:	10803fcc 	andi	r2,r2,255
 2014d48:	10002826 	beq	r2,zero,2014dec <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 2014d4c:	e0fffc03 	ldbu	r3,-16(fp)
 2014d50:	e13ffc03 	ldbu	r4,-16(fp)
 2014d54:	d0a72f44 	addi	r2,gp,-25411
 2014d58:	2085883a 	add	r2,r4,r2
 2014d5c:	10800003 	ldbu	r2,0(r2)
 2014d60:	1009883a 	mov	r4,r2
 2014d64:	e0bffc83 	ldbu	r2,-14(fp)
 2014d68:	0084303a 	nor	r2,zero,r2
 2014d6c:	2084703a 	and	r2,r4,r2
 2014d70:	1009883a 	mov	r4,r2
 2014d74:	d0a72f44 	addi	r2,gp,-25411
 2014d78:	1885883a 	add	r2,r3,r2
 2014d7c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 2014d80:	e0fffc03 	ldbu	r3,-16(fp)
 2014d84:	d0a72f44 	addi	r2,gp,-25411
 2014d88:	1885883a 	add	r2,r3,r2
 2014d8c:	10800003 	ldbu	r2,0(r2)
 2014d90:	10803fcc 	andi	r2,r2,255
 2014d94:	1000061e 	bne	r2,zero,2014db0 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 2014d98:	e0bffc43 	ldbu	r2,-15(fp)
 2014d9c:	0084303a 	nor	r2,zero,r2
 2014da0:	1007883a 	mov	r3,r2
 2014da4:	d0a72f03 	ldbu	r2,-25412(gp)
 2014da8:	1884703a 	and	r2,r3,r2
 2014dac:	d0a72f05 	stb	r2,-25412(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 2014db0:	d0e72f03 	ldbu	r3,-25412(gp)
 2014db4:	e0bffb83 	ldbu	r2,-18(fp)
 2014db8:	1884b03a 	or	r2,r3,r2
 2014dbc:	d0a72f05 	stb	r2,-25412(gp)
         OSRdyTbl[y_new] |= bitx_new;
 2014dc0:	e0fffb03 	ldbu	r3,-20(fp)
 2014dc4:	e13ffb03 	ldbu	r4,-20(fp)
 2014dc8:	d0a72f44 	addi	r2,gp,-25411
 2014dcc:	2085883a 	add	r2,r4,r2
 2014dd0:	11000003 	ldbu	r4,0(r2)
 2014dd4:	e0bffbc3 	ldbu	r2,-17(fp)
 2014dd8:	2084b03a 	or	r2,r4,r2
 2014ddc:	1009883a 	mov	r4,r2
 2014de0:	d0a72f44 	addi	r2,gp,-25411
 2014de4:	1885883a 	add	r2,r3,r2
 2014de8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 2014dec:	e0bff817 	ldw	r2,-32(fp)
 2014df0:	10800717 	ldw	r2,28(r2)
 2014df4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 2014df8:	e0bff317 	ldw	r2,-52(fp)
 2014dfc:	10003326 	beq	r2,zero,2014ecc <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 2014e00:	e0bffc03 	ldbu	r2,-16(fp)
 2014e04:	e0fffc03 	ldbu	r3,-16(fp)
 2014e08:	e13ff317 	ldw	r4,-52(fp)
 2014e0c:	20c7883a 	add	r3,r4,r3
 2014e10:	18c002c4 	addi	r3,r3,11
 2014e14:	18c00003 	ldbu	r3,0(r3)
 2014e18:	1809883a 	mov	r4,r3
 2014e1c:	e0fffc83 	ldbu	r3,-14(fp)
 2014e20:	00c6303a 	nor	r3,zero,r3
 2014e24:	20c6703a 	and	r3,r4,r3
 2014e28:	1809883a 	mov	r4,r3
 2014e2c:	e0fff317 	ldw	r3,-52(fp)
 2014e30:	1885883a 	add	r2,r3,r2
 2014e34:	108002c4 	addi	r2,r2,11
 2014e38:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 2014e3c:	e0bffc03 	ldbu	r2,-16(fp)
 2014e40:	e0fff317 	ldw	r3,-52(fp)
 2014e44:	1885883a 	add	r2,r3,r2
 2014e48:	108002c4 	addi	r2,r2,11
 2014e4c:	10800003 	ldbu	r2,0(r2)
 2014e50:	10803fcc 	andi	r2,r2,255
 2014e54:	1000091e 	bne	r2,zero,2014e7c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 2014e58:	e0bff317 	ldw	r2,-52(fp)
 2014e5c:	10800283 	ldbu	r2,10(r2)
 2014e60:	1007883a 	mov	r3,r2
 2014e64:	e0bffc43 	ldbu	r2,-15(fp)
 2014e68:	0084303a 	nor	r2,zero,r2
 2014e6c:	1884703a 	and	r2,r3,r2
 2014e70:	1007883a 	mov	r3,r2
 2014e74:	e0bff317 	ldw	r2,-52(fp)
 2014e78:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 2014e7c:	e0bff317 	ldw	r2,-52(fp)
 2014e80:	10c00283 	ldbu	r3,10(r2)
 2014e84:	e0bffb83 	ldbu	r2,-18(fp)
 2014e88:	1884b03a 	or	r2,r3,r2
 2014e8c:	1007883a 	mov	r3,r2
 2014e90:	e0bff317 	ldw	r2,-52(fp)
 2014e94:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2014e98:	e0bffb03 	ldbu	r2,-20(fp)
 2014e9c:	e0fffb03 	ldbu	r3,-20(fp)
 2014ea0:	e13ff317 	ldw	r4,-52(fp)
 2014ea4:	20c7883a 	add	r3,r4,r3
 2014ea8:	18c002c4 	addi	r3,r3,11
 2014eac:	19000003 	ldbu	r4,0(r3)
 2014eb0:	e0fffbc3 	ldbu	r3,-17(fp)
 2014eb4:	20c6b03a 	or	r3,r4,r3
 2014eb8:	1809883a 	mov	r4,r3
 2014ebc:	e0fff317 	ldw	r3,-52(fp)
 2014ec0:	1885883a 	add	r2,r3,r2
 2014ec4:	108002c4 	addi	r2,r2,11
 2014ec8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 2014ecc:	e0bff817 	ldw	r2,-32(fp)
 2014ed0:	10800817 	ldw	r2,32(r2)
 2014ed4:	10004226 	beq	r2,zero,2014fe0 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 2014ed8:	e0bff817 	ldw	r2,-32(fp)
 2014edc:	10800817 	ldw	r2,32(r2)
 2014ee0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 2014ee4:	e0bff417 	ldw	r2,-48(fp)
 2014ee8:	10800017 	ldw	r2,0(r2)
 2014eec:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 2014ef0:	00003906 	br	2014fd8 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 2014ef4:	e0bffc03 	ldbu	r2,-16(fp)
 2014ef8:	e0fffc03 	ldbu	r3,-16(fp)
 2014efc:	e13ff317 	ldw	r4,-52(fp)
 2014f00:	20c7883a 	add	r3,r4,r3
 2014f04:	18c002c4 	addi	r3,r3,11
 2014f08:	18c00003 	ldbu	r3,0(r3)
 2014f0c:	1809883a 	mov	r4,r3
 2014f10:	e0fffc83 	ldbu	r3,-14(fp)
 2014f14:	00c6303a 	nor	r3,zero,r3
 2014f18:	20c6703a 	and	r3,r4,r3
 2014f1c:	1809883a 	mov	r4,r3
 2014f20:	e0fff317 	ldw	r3,-52(fp)
 2014f24:	1885883a 	add	r2,r3,r2
 2014f28:	108002c4 	addi	r2,r2,11
 2014f2c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 2014f30:	e0bffc03 	ldbu	r2,-16(fp)
 2014f34:	e0fff317 	ldw	r3,-52(fp)
 2014f38:	1885883a 	add	r2,r3,r2
 2014f3c:	108002c4 	addi	r2,r2,11
 2014f40:	10800003 	ldbu	r2,0(r2)
 2014f44:	10803fcc 	andi	r2,r2,255
 2014f48:	1000091e 	bne	r2,zero,2014f70 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 2014f4c:	e0bff317 	ldw	r2,-52(fp)
 2014f50:	10800283 	ldbu	r2,10(r2)
 2014f54:	1007883a 	mov	r3,r2
 2014f58:	e0bffc43 	ldbu	r2,-15(fp)
 2014f5c:	0084303a 	nor	r2,zero,r2
 2014f60:	1884703a 	and	r2,r3,r2
 2014f64:	1007883a 	mov	r3,r2
 2014f68:	e0bff317 	ldw	r2,-52(fp)
 2014f6c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 2014f70:	e0bff317 	ldw	r2,-52(fp)
 2014f74:	10c00283 	ldbu	r3,10(r2)
 2014f78:	e0bffb83 	ldbu	r2,-18(fp)
 2014f7c:	1884b03a 	or	r2,r3,r2
 2014f80:	1007883a 	mov	r3,r2
 2014f84:	e0bff317 	ldw	r2,-52(fp)
 2014f88:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 2014f8c:	e0bffb03 	ldbu	r2,-20(fp)
 2014f90:	e0fffb03 	ldbu	r3,-20(fp)
 2014f94:	e13ff317 	ldw	r4,-52(fp)
 2014f98:	20c7883a 	add	r3,r4,r3
 2014f9c:	18c002c4 	addi	r3,r3,11
 2014fa0:	19000003 	ldbu	r4,0(r3)
 2014fa4:	e0fffbc3 	ldbu	r3,-17(fp)
 2014fa8:	20c6b03a 	or	r3,r4,r3
 2014fac:	1809883a 	mov	r4,r3
 2014fb0:	e0fff317 	ldw	r3,-52(fp)
 2014fb4:	1885883a 	add	r2,r3,r2
 2014fb8:	108002c4 	addi	r2,r2,11
 2014fbc:	11000005 	stb	r4,0(r2)
            pevents++;
 2014fc0:	e0bff417 	ldw	r2,-48(fp)
 2014fc4:	10800104 	addi	r2,r2,4
 2014fc8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 2014fcc:	e0bff417 	ldw	r2,-48(fp)
 2014fd0:	10800017 	ldw	r2,0(r2)
 2014fd4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 2014fd8:	e0bff317 	ldw	r2,-52(fp)
 2014fdc:	103fc51e 	bne	r2,zero,2014ef4 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 2014fe0:	e0bff817 	ldw	r2,-32(fp)
 2014fe4:	e0ffff03 	ldbu	r3,-4(fp)
 2014fe8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 2014fec:	e0bff817 	ldw	r2,-32(fp)
 2014ff0:	e0fffb03 	ldbu	r3,-20(fp)
 2014ff4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 2014ff8:	e0bff817 	ldw	r2,-32(fp)
 2014ffc:	e0fffb43 	ldbu	r3,-19(fp)
 2015000:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 2015004:	e0bff817 	ldw	r2,-32(fp)
 2015008:	e0fffb83 	ldbu	r3,-18(fp)
 201500c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 2015010:	e0bff817 	ldw	r2,-32(fp)
 2015014:	e0fffbc3 	ldbu	r3,-17(fp)
 2015018:	10c00d45 	stb	r3,53(r2)
 201501c:	e0bff517 	ldw	r2,-44(fp)
 2015020:	e0bffa15 	stw	r2,-24(fp)
 2015024:	e0bffa17 	ldw	r2,-24(fp)
 2015028:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201502c:	d0a72343 	ldbu	r2,-25459(gp)
 2015030:	10803fcc 	andi	r2,r2,255
 2015034:	10800058 	cmpnei	r2,r2,1
 2015038:	1000011e 	bne	r2,zero,2015040 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201503c:	200fe640 	call	200fe64 <OS_Sched>
    }
    return (OS_ERR_NONE);
 2015040:	0005883a 	mov	r2,zero
}
 2015044:	e037883a 	mov	sp,fp
 2015048:	dfc00117 	ldw	ra,4(sp)
 201504c:	df000017 	ldw	fp,0(sp)
 2015050:	dec00204 	addi	sp,sp,8
 2015054:	f800283a 	ret

02015058 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 2015058:	deffee04 	addi	sp,sp,-72
 201505c:	dfc01115 	stw	ra,68(sp)
 2015060:	df001015 	stw	fp,64(sp)
 2015064:	df001004 	addi	fp,sp,64
 2015068:	e13ffc15 	stw	r4,-16(fp)
 201506c:	e17ffd15 	stw	r5,-12(fp)
 2015070:	e1bffe15 	stw	r6,-8(fp)
 2015074:	3805883a 	mov	r2,r7
 2015078:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201507c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2015080:	e0bfff03 	ldbu	r2,-4(fp)
 2015084:	10800570 	cmpltui	r2,r2,21
 2015088:	1000021e 	bne	r2,zero,2015094 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201508c:	00800a84 	movi	r2,42
 2015090:	00005706 	br	20151f0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015094:	0005303a 	rdctl	r2,status
 2015098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201509c:	e0fffb17 	ldw	r3,-20(fp)
 20150a0:	00bfff84 	movi	r2,-2
 20150a4:	1884703a 	and	r2,r3,r2
 20150a8:	1001703a 	wrctl	status,r2
  
  return context;
 20150ac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20150b0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 20150b4:	d0a73103 	ldbu	r2,-25404(gp)
 20150b8:	10803fcc 	andi	r2,r2,255
 20150bc:	10000626 	beq	r2,zero,20150d8 <OSTaskCreate+0x80>
 20150c0:	e0bff317 	ldw	r2,-52(fp)
 20150c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20150c8:	e0bff417 	ldw	r2,-48(fp)
 20150cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 20150d0:	00800f04 	movi	r2,60
 20150d4:	00004606 	br	20151f0 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 20150d8:	e0ffff03 	ldbu	r3,-4(fp)
 20150dc:	008080b4 	movhi	r2,514
 20150e0:	1096b004 	addi	r2,r2,23232
 20150e4:	18c7883a 	add	r3,r3,r3
 20150e8:	18c7883a 	add	r3,r3,r3
 20150ec:	10c5883a 	add	r2,r2,r3
 20150f0:	10800017 	ldw	r2,0(r2)
 20150f4:	1000391e 	bne	r2,zero,20151dc <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 20150f8:	e0ffff03 	ldbu	r3,-4(fp)
 20150fc:	008080b4 	movhi	r2,514
 2015100:	1096b004 	addi	r2,r2,23232
 2015104:	18c7883a 	add	r3,r3,r3
 2015108:	18c7883a 	add	r3,r3,r3
 201510c:	10c5883a 	add	r2,r2,r3
 2015110:	00c00044 	movi	r3,1
 2015114:	10c00015 	stw	r3,0(r2)
 2015118:	e0bff317 	ldw	r2,-52(fp)
 201511c:	e0bff515 	stw	r2,-44(fp)
 2015120:	e0bff517 	ldw	r2,-44(fp)
 2015124:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 2015128:	000f883a 	mov	r7,zero
 201512c:	e1bffe17 	ldw	r6,-8(fp)
 2015130:	e17ffd17 	ldw	r5,-12(fp)
 2015134:	e13ffc17 	ldw	r4,-16(fp)
 2015138:	20182f80 	call	20182f8 <OSTaskStkInit>
 201513c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2015140:	e0bfff03 	ldbu	r2,-4(fp)
 2015144:	d8000215 	stw	zero,8(sp)
 2015148:	d8000115 	stw	zero,4(sp)
 201514c:	d8000015 	stw	zero,0(sp)
 2015150:	000f883a 	mov	r7,zero
 2015154:	000d883a 	mov	r6,zero
 2015158:	e17ff717 	ldw	r5,-36(fp)
 201515c:	1009883a 	mov	r4,r2
 2015160:	20102640 	call	2010264 <OS_TCBInit>
 2015164:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 2015168:	e0bff803 	ldbu	r2,-32(fp)
 201516c:	1000061e 	bne	r2,zero,2015188 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 2015170:	d0a72343 	ldbu	r2,-25459(gp)
 2015174:	10803fcc 	andi	r2,r2,255
 2015178:	10800058 	cmpnei	r2,r2,1
 201517c:	1000151e 	bne	r2,zero,20151d4 <OSTaskCreate+0x17c>
                OS_Sched();
 2015180:	200fe640 	call	200fe64 <OS_Sched>
 2015184:	00001306 	br	20151d4 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015188:	0005303a 	rdctl	r2,status
 201518c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015190:	e0fffa17 	ldw	r3,-24(fp)
 2015194:	00bfff84 	movi	r2,-2
 2015198:	1884703a 	and	r2,r3,r2
 201519c:	1001703a 	wrctl	status,r2
  
  return context;
 20151a0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 20151a4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 20151a8:	e0ffff03 	ldbu	r3,-4(fp)
 20151ac:	008080b4 	movhi	r2,514
 20151b0:	1096b004 	addi	r2,r2,23232
 20151b4:	18c7883a 	add	r3,r3,r3
 20151b8:	18c7883a 	add	r3,r3,r3
 20151bc:	10c5883a 	add	r2,r2,r3
 20151c0:	10000015 	stw	zero,0(r2)
 20151c4:	e0bff317 	ldw	r2,-52(fp)
 20151c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20151cc:	e0bff617 	ldw	r2,-40(fp)
 20151d0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 20151d4:	e0bff803 	ldbu	r2,-32(fp)
 20151d8:	00000506 	br	20151f0 <OSTaskCreate+0x198>
 20151dc:	e0bff317 	ldw	r2,-52(fp)
 20151e0:	e0bff915 	stw	r2,-28(fp)
 20151e4:	e0bff917 	ldw	r2,-28(fp)
 20151e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 20151ec:	00800a04 	movi	r2,40
}
 20151f0:	e037883a 	mov	sp,fp
 20151f4:	dfc00117 	ldw	ra,4(sp)
 20151f8:	df000017 	ldw	fp,0(sp)
 20151fc:	dec00204 	addi	sp,sp,8
 2015200:	f800283a 	ret

02015204 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 2015204:	deffec04 	addi	sp,sp,-80
 2015208:	dfc01315 	stw	ra,76(sp)
 201520c:	df001215 	stw	fp,72(sp)
 2015210:	df001204 	addi	fp,sp,72
 2015214:	e13ffa15 	stw	r4,-24(fp)
 2015218:	e17ffb15 	stw	r5,-20(fp)
 201521c:	e1bffc15 	stw	r6,-16(fp)
 2015220:	3809883a 	mov	r4,r7
 2015224:	e0c00217 	ldw	r3,8(fp)
 2015228:	e0800617 	ldw	r2,24(fp)
 201522c:	e13ffd05 	stb	r4,-12(fp)
 2015230:	e0fffe0d 	sth	r3,-8(fp)
 2015234:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2015238:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201523c:	e0bffd03 	ldbu	r2,-12(fp)
 2015240:	10800570 	cmpltui	r2,r2,21
 2015244:	1000021e 	bne	r2,zero,2015250 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 2015248:	00800a84 	movi	r2,42
 201524c:	00006106 	br	20153d4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015250:	0005303a 	rdctl	r2,status
 2015254:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015258:	e0fff917 	ldw	r3,-28(fp)
 201525c:	00bfff84 	movi	r2,-2
 2015260:	1884703a 	and	r2,r3,r2
 2015264:	1001703a 	wrctl	status,r2
  
  return context;
 2015268:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201526c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2015270:	d0a73103 	ldbu	r2,-25404(gp)
 2015274:	10803fcc 	andi	r2,r2,255
 2015278:	10000626 	beq	r2,zero,2015294 <OSTaskCreateExt+0x90>
 201527c:	e0bff117 	ldw	r2,-60(fp)
 2015280:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015284:	e0bff217 	ldw	r2,-56(fp)
 2015288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201528c:	00800f04 	movi	r2,60
 2015290:	00005006 	br	20153d4 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2015294:	e0fffd03 	ldbu	r3,-12(fp)
 2015298:	008080b4 	movhi	r2,514
 201529c:	1096b004 	addi	r2,r2,23232
 20152a0:	18c7883a 	add	r3,r3,r3
 20152a4:	18c7883a 	add	r3,r3,r3
 20152a8:	10c5883a 	add	r2,r2,r3
 20152ac:	10800017 	ldw	r2,0(r2)
 20152b0:	1000431e 	bne	r2,zero,20153c0 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 20152b4:	e0fffd03 	ldbu	r3,-12(fp)
 20152b8:	008080b4 	movhi	r2,514
 20152bc:	1096b004 	addi	r2,r2,23232
 20152c0:	18c7883a 	add	r3,r3,r3
 20152c4:	18c7883a 	add	r3,r3,r3
 20152c8:	10c5883a 	add	r2,r2,r3
 20152cc:	00c00044 	movi	r3,1
 20152d0:	10c00015 	stw	r3,0(r2)
 20152d4:	e0bff117 	ldw	r2,-60(fp)
 20152d8:	e0bff315 	stw	r2,-52(fp)
 20152dc:	e0bff317 	ldw	r2,-52(fp)
 20152e0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 20152e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20152e8:	100d883a 	mov	r6,r2
 20152ec:	e1400417 	ldw	r5,16(fp)
 20152f0:	e1000317 	ldw	r4,12(fp)
 20152f4:	20162640 	call	2016264 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 20152f8:	e0bfff0b 	ldhu	r2,-4(fp)
 20152fc:	100f883a 	mov	r7,r2
 2015300:	e1bffc17 	ldw	r6,-16(fp)
 2015304:	e17ffb17 	ldw	r5,-20(fp)
 2015308:	e13ffa17 	ldw	r4,-24(fp)
 201530c:	20182f80 	call	20182f8 <OSTaskStkInit>
 2015310:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2015314:	e0fffd03 	ldbu	r3,-12(fp)
 2015318:	e13ffe0b 	ldhu	r4,-8(fp)
 201531c:	e0bfff0b 	ldhu	r2,-4(fp)
 2015320:	d8800215 	stw	r2,8(sp)
 2015324:	e0800517 	ldw	r2,20(fp)
 2015328:	d8800115 	stw	r2,4(sp)
 201532c:	e0800417 	ldw	r2,16(fp)
 2015330:	d8800015 	stw	r2,0(sp)
 2015334:	200f883a 	mov	r7,r4
 2015338:	e1800317 	ldw	r6,12(fp)
 201533c:	e17ff517 	ldw	r5,-44(fp)
 2015340:	1809883a 	mov	r4,r3
 2015344:	20102640 	call	2010264 <OS_TCBInit>
 2015348:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201534c:	e0bff603 	ldbu	r2,-40(fp)
 2015350:	1000061e 	bne	r2,zero,201536c <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 2015354:	d0a72343 	ldbu	r2,-25459(gp)
 2015358:	10803fcc 	andi	r2,r2,255
 201535c:	10800058 	cmpnei	r2,r2,1
 2015360:	1000151e 	bne	r2,zero,20153b8 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 2015364:	200fe640 	call	200fe64 <OS_Sched>
 2015368:	00001306 	br	20153b8 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201536c:	0005303a 	rdctl	r2,status
 2015370:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015374:	e0fff817 	ldw	r3,-32(fp)
 2015378:	00bfff84 	movi	r2,-2
 201537c:	1884703a 	and	r2,r3,r2
 2015380:	1001703a 	wrctl	status,r2
  
  return context;
 2015384:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2015388:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201538c:	e0fffd03 	ldbu	r3,-12(fp)
 2015390:	008080b4 	movhi	r2,514
 2015394:	1096b004 	addi	r2,r2,23232
 2015398:	18c7883a 	add	r3,r3,r3
 201539c:	18c7883a 	add	r3,r3,r3
 20153a0:	10c5883a 	add	r2,r2,r3
 20153a4:	10000015 	stw	zero,0(r2)
 20153a8:	e0bff117 	ldw	r2,-60(fp)
 20153ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20153b0:	e0bff417 	ldw	r2,-48(fp)
 20153b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 20153b8:	e0bff603 	ldbu	r2,-40(fp)
 20153bc:	00000506 	br	20153d4 <OSTaskCreateExt+0x1d0>
 20153c0:	e0bff117 	ldw	r2,-60(fp)
 20153c4:	e0bff715 	stw	r2,-36(fp)
 20153c8:	e0bff717 	ldw	r2,-36(fp)
 20153cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 20153d0:	00800a04 	movi	r2,40
}
 20153d4:	e037883a 	mov	sp,fp
 20153d8:	dfc00117 	ldw	ra,4(sp)
 20153dc:	df000017 	ldw	fp,0(sp)
 20153e0:	dec00204 	addi	sp,sp,8
 20153e4:	f800283a 	ret

020153e8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 20153e8:	defff404 	addi	sp,sp,-48
 20153ec:	dfc00b15 	stw	ra,44(sp)
 20153f0:	df000a15 	stw	fp,40(sp)
 20153f4:	df000a04 	addi	fp,sp,40
 20153f8:	2005883a 	mov	r2,r4
 20153fc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 2015400:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 2015404:	d0a73103 	ldbu	r2,-25404(gp)
 2015408:	10803fcc 	andi	r2,r2,255
 201540c:	10000226 	beq	r2,zero,2015418 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 2015410:	00801004 	movi	r2,64
 2015414:	0000c006 	br	2015718 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 2015418:	e0bfff03 	ldbu	r2,-4(fp)
 201541c:	10800518 	cmpnei	r2,r2,20
 2015420:	1000021e 	bne	r2,zero,201542c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 2015424:	00800f84 	movi	r2,62
 2015428:	0000bb06 	br	2015718 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201542c:	e0bfff03 	ldbu	r2,-4(fp)
 2015430:	10800530 	cmpltui	r2,r2,20
 2015434:	1000051e 	bne	r2,zero,201544c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 2015438:	e0bfff03 	ldbu	r2,-4(fp)
 201543c:	10803fe0 	cmpeqi	r2,r2,255
 2015440:	1000021e 	bne	r2,zero,201544c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 2015444:	00800a84 	movi	r2,42
 2015448:	0000b306 	br	2015718 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201544c:	0005303a 	rdctl	r2,status
 2015450:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015454:	e0fffe17 	ldw	r3,-8(fp)
 2015458:	00bfff84 	movi	r2,-2
 201545c:	1884703a 	and	r2,r3,r2
 2015460:	1001703a 	wrctl	status,r2
  
  return context;
 2015464:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2015468:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201546c:	e0bfff03 	ldbu	r2,-4(fp)
 2015470:	10803fd8 	cmpnei	r2,r2,255
 2015474:	1000031e 	bne	r2,zero,2015484 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2015478:	d0a73217 	ldw	r2,-25400(gp)
 201547c:	10800c83 	ldbu	r2,50(r2)
 2015480:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2015484:	e0ffff03 	ldbu	r3,-4(fp)
 2015488:	008080b4 	movhi	r2,514
 201548c:	1096b004 	addi	r2,r2,23232
 2015490:	18c7883a 	add	r3,r3,r3
 2015494:	18c7883a 	add	r3,r3,r3
 2015498:	10c5883a 	add	r2,r2,r3
 201549c:	10800017 	ldw	r2,0(r2)
 20154a0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 20154a4:	e0bff817 	ldw	r2,-32(fp)
 20154a8:	1000061e 	bne	r2,zero,20154c4 <OSTaskDel+0xdc>
 20154ac:	e0bff617 	ldw	r2,-40(fp)
 20154b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20154b4:	e0bff717 	ldw	r2,-36(fp)
 20154b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20154bc:	008010c4 	movi	r2,67
 20154c0:	00009506 	br	2015718 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 20154c4:	e0bff817 	ldw	r2,-32(fp)
 20154c8:	10800058 	cmpnei	r2,r2,1
 20154cc:	1000061e 	bne	r2,zero,20154e8 <OSTaskDel+0x100>
 20154d0:	e0bff617 	ldw	r2,-40(fp)
 20154d4:	e0bff915 	stw	r2,-28(fp)
 20154d8:	e0bff917 	ldw	r2,-28(fp)
 20154dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 20154e0:	00800f44 	movi	r2,61
 20154e4:	00008c06 	br	2015718 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 20154e8:	e0bff817 	ldw	r2,-32(fp)
 20154ec:	10800d03 	ldbu	r2,52(r2)
 20154f0:	10c03fcc 	andi	r3,r2,255
 20154f4:	e0bff817 	ldw	r2,-32(fp)
 20154f8:	10800d03 	ldbu	r2,52(r2)
 20154fc:	11003fcc 	andi	r4,r2,255
 2015500:	d0a72f44 	addi	r2,gp,-25411
 2015504:	2085883a 	add	r2,r4,r2
 2015508:	10800003 	ldbu	r2,0(r2)
 201550c:	1009883a 	mov	r4,r2
 2015510:	e0bff817 	ldw	r2,-32(fp)
 2015514:	10800d43 	ldbu	r2,53(r2)
 2015518:	0084303a 	nor	r2,zero,r2
 201551c:	2084703a 	and	r2,r4,r2
 2015520:	1009883a 	mov	r4,r2
 2015524:	d0a72f44 	addi	r2,gp,-25411
 2015528:	1885883a 	add	r2,r3,r2
 201552c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 2015530:	e0bff817 	ldw	r2,-32(fp)
 2015534:	10800d03 	ldbu	r2,52(r2)
 2015538:	10c03fcc 	andi	r3,r2,255
 201553c:	d0a72f44 	addi	r2,gp,-25411
 2015540:	1885883a 	add	r2,r3,r2
 2015544:	10800003 	ldbu	r2,0(r2)
 2015548:	10803fcc 	andi	r2,r2,255
 201554c:	1000071e 	bne	r2,zero,201556c <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 2015550:	e0bff817 	ldw	r2,-32(fp)
 2015554:	10800d83 	ldbu	r2,54(r2)
 2015558:	0084303a 	nor	r2,zero,r2
 201555c:	1007883a 	mov	r3,r2
 2015560:	d0a72f03 	ldbu	r2,-25412(gp)
 2015564:	1884703a 	and	r2,r3,r2
 2015568:	d0a72f05 	stb	r2,-25412(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201556c:	e0bff817 	ldw	r2,-32(fp)
 2015570:	10800717 	ldw	r2,28(r2)
 2015574:	10000526 	beq	r2,zero,201558c <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 2015578:	e0bff817 	ldw	r2,-32(fp)
 201557c:	10800717 	ldw	r2,28(r2)
 2015580:	100b883a 	mov	r5,r2
 2015584:	e13ff817 	ldw	r4,-32(fp)
 2015588:	200f8100 	call	200f810 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201558c:	e0bff817 	ldw	r2,-32(fp)
 2015590:	10800817 	ldw	r2,32(r2)
 2015594:	10000526 	beq	r2,zero,20155ac <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2015598:	e0bff817 	ldw	r2,-32(fp)
 201559c:	10800817 	ldw	r2,32(r2)
 20155a0:	100b883a 	mov	r5,r2
 20155a4:	e13ff817 	ldw	r4,-32(fp)
 20155a8:	200f8c80 	call	200f8c8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 20155ac:	e0bff817 	ldw	r2,-32(fp)
 20155b0:	10800a17 	ldw	r2,40(r2)
 20155b4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 20155b8:	e0bffb17 	ldw	r2,-20(fp)
 20155bc:	10000226 	beq	r2,zero,20155c8 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 20155c0:	e13ffb17 	ldw	r4,-20(fp)
 20155c4:	2011d380 	call	2011d38 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 20155c8:	e0bff817 	ldw	r2,-32(fp)
 20155cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 20155d0:	e0bff817 	ldw	r2,-32(fp)
 20155d4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 20155d8:	e0bff817 	ldw	r2,-32(fp)
 20155dc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 20155e0:	d0a72303 	ldbu	r2,-25460(gp)
 20155e4:	10803fcc 	andi	r2,r2,255
 20155e8:	10803fe0 	cmpeqi	r2,r2,255
 20155ec:	1000031e 	bne	r2,zero,20155fc <OSTaskDel+0x214>
        OSLockNesting++;
 20155f0:	d0a72303 	ldbu	r2,-25460(gp)
 20155f4:	10800044 	addi	r2,r2,1
 20155f8:	d0a72305 	stb	r2,-25460(gp)
 20155fc:	e0bff617 	ldw	r2,-40(fp)
 2015600:	e0bffd15 	stw	r2,-12(fp)
 2015604:	e0bffd17 	ldw	r2,-12(fp)
 2015608:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201560c:	200f3f80 	call	200f3f8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015610:	0005303a 	rdctl	r2,status
 2015614:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015618:	e0fffa17 	ldw	r3,-24(fp)
 201561c:	00bfff84 	movi	r2,-2
 2015620:	1884703a 	and	r2,r3,r2
 2015624:	1001703a 	wrctl	status,r2
  
  return context;
 2015628:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201562c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2015630:	d0a72303 	ldbu	r2,-25460(gp)
 2015634:	10803fcc 	andi	r2,r2,255
 2015638:	10000326 	beq	r2,zero,2015648 <OSTaskDel+0x260>
        OSLockNesting--;
 201563c:	d0a72303 	ldbu	r2,-25460(gp)
 2015640:	10bfffc4 	addi	r2,r2,-1
 2015644:	d0a72305 	stb	r2,-25460(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2015648:	e13ff817 	ldw	r4,-32(fp)
 201564c:	20184780 	call	2018478 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2015650:	d0a72b43 	ldbu	r2,-25427(gp)
 2015654:	10bfffc4 	addi	r2,r2,-1
 2015658:	d0a72b45 	stb	r2,-25427(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201565c:	e0ffff03 	ldbu	r3,-4(fp)
 2015660:	008080b4 	movhi	r2,514
 2015664:	1096b004 	addi	r2,r2,23232
 2015668:	18c7883a 	add	r3,r3,r3
 201566c:	18c7883a 	add	r3,r3,r3
 2015670:	10c5883a 	add	r2,r2,r3
 2015674:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 2015678:	e0bff817 	ldw	r2,-32(fp)
 201567c:	10800617 	ldw	r2,24(r2)
 2015680:	1000071e 	bne	r2,zero,20156a0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2015684:	e0bff817 	ldw	r2,-32(fp)
 2015688:	10800517 	ldw	r2,20(r2)
 201568c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 2015690:	e0bff817 	ldw	r2,-32(fp)
 2015694:	10800517 	ldw	r2,20(r2)
 2015698:	d0a72615 	stw	r2,-25448(gp)
 201569c:	00000a06 	br	20156c8 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 20156a0:	e0bff817 	ldw	r2,-32(fp)
 20156a4:	10800617 	ldw	r2,24(r2)
 20156a8:	e0fff817 	ldw	r3,-32(fp)
 20156ac:	18c00517 	ldw	r3,20(r3)
 20156b0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 20156b4:	e0bff817 	ldw	r2,-32(fp)
 20156b8:	10800517 	ldw	r2,20(r2)
 20156bc:	e0fff817 	ldw	r3,-32(fp)
 20156c0:	18c00617 	ldw	r3,24(r3)
 20156c4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 20156c8:	d0e72a17 	ldw	r3,-25432(gp)
 20156cc:	e0bff817 	ldw	r2,-32(fp)
 20156d0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 20156d4:	e0bff817 	ldw	r2,-32(fp)
 20156d8:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 20156dc:	e0bff817 	ldw	r2,-32(fp)
 20156e0:	00c00fc4 	movi	r3,63
 20156e4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 20156e8:	e0bff817 	ldw	r2,-32(fp)
 20156ec:	10001345 	stb	zero,77(r2)
 20156f0:	e0bff617 	ldw	r2,-40(fp)
 20156f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20156f8:	e0bffc17 	ldw	r2,-16(fp)
 20156fc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2015700:	d0a72343 	ldbu	r2,-25459(gp)
 2015704:	10803fcc 	andi	r2,r2,255
 2015708:	10800058 	cmpnei	r2,r2,1
 201570c:	1000011e 	bne	r2,zero,2015714 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 2015710:	200fe640 	call	200fe64 <OS_Sched>
    }
    return (OS_ERR_NONE);
 2015714:	0005883a 	mov	r2,zero
}
 2015718:	e037883a 	mov	sp,fp
 201571c:	dfc00117 	ldw	ra,4(sp)
 2015720:	df000017 	ldw	fp,0(sp)
 2015724:	dec00204 	addi	sp,sp,8
 2015728:	f800283a 	ret

0201572c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201572c:	defff504 	addi	sp,sp,-44
 2015730:	df000a15 	stw	fp,40(sp)
 2015734:	df000a04 	addi	fp,sp,40
 2015738:	2005883a 	mov	r2,r4
 201573c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015740:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 2015744:	e0bfff03 	ldbu	r2,-4(fp)
 2015748:	10800518 	cmpnei	r2,r2,20
 201574c:	1000021e 	bne	r2,zero,2015758 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 2015750:	00800f84 	movi	r2,62
 2015754:	00004506 	br	201586c <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2015758:	e0bfff03 	ldbu	r2,-4(fp)
 201575c:	10800530 	cmpltui	r2,r2,20
 2015760:	1000051e 	bne	r2,zero,2015778 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 2015764:	e0bfff03 	ldbu	r2,-4(fp)
 2015768:	10803fe0 	cmpeqi	r2,r2,255
 201576c:	1000021e 	bne	r2,zero,2015778 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 2015770:	00800a84 	movi	r2,42
 2015774:	00003d06 	br	201586c <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 2015778:	e0bfff03 	ldbu	r2,-4(fp)
 201577c:	10803fd8 	cmpnei	r2,r2,255
 2015780:	1000111e 	bne	r2,zero,20157c8 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015784:	0005303a 	rdctl	r2,status
 2015788:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201578c:	e0fff917 	ldw	r3,-28(fp)
 2015790:	00bfff84 	movi	r2,-2
 2015794:	1884703a 	and	r2,r3,r2
 2015798:	1001703a 	wrctl	status,r2
  
  return context;
 201579c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 20157a0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 20157a4:	d0a73217 	ldw	r2,-25400(gp)
 20157a8:	10800dc3 	ldbu	r2,55(r2)
 20157ac:	e0bff805 	stb	r2,-32(fp)
 20157b0:	e0bff617 	ldw	r2,-40(fp)
 20157b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20157b8:	e0bffe17 	ldw	r2,-8(fp)
 20157bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 20157c0:	e0bff803 	ldbu	r2,-32(fp)
 20157c4:	00002906 	br	201586c <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20157c8:	0005303a 	rdctl	r2,status
 20157cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20157d0:	e0fff717 	ldw	r3,-36(fp)
 20157d4:	00bfff84 	movi	r2,-2
 20157d8:	1884703a 	and	r2,r3,r2
 20157dc:	1001703a 	wrctl	status,r2
  
  return context;
 20157e0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 20157e4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 20157e8:	e0ffff03 	ldbu	r3,-4(fp)
 20157ec:	008080b4 	movhi	r2,514
 20157f0:	1096b004 	addi	r2,r2,23232
 20157f4:	18c7883a 	add	r3,r3,r3
 20157f8:	18c7883a 	add	r3,r3,r3
 20157fc:	10c5883a 	add	r2,r2,r3
 2015800:	10800017 	ldw	r2,0(r2)
 2015804:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2015808:	e0bffb17 	ldw	r2,-20(fp)
 201580c:	1000061e 	bne	r2,zero,2015828 <OSTaskDelReq+0xfc>
 2015810:	e0bff617 	ldw	r2,-40(fp)
 2015814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015818:	e0bffa17 	ldw	r2,-24(fp)
 201581c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 2015820:	008010c4 	movi	r2,67
 2015824:	00001106 	br	201586c <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 2015828:	e0bffb17 	ldw	r2,-20(fp)
 201582c:	10800058 	cmpnei	r2,r2,1
 2015830:	1000061e 	bne	r2,zero,201584c <OSTaskDelReq+0x120>
 2015834:	e0bff617 	ldw	r2,-40(fp)
 2015838:	e0bffc15 	stw	r2,-16(fp)
 201583c:	e0bffc17 	ldw	r2,-16(fp)
 2015840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2015844:	00800f44 	movi	r2,61
 2015848:	00000806 	br	201586c <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201584c:	e0bffb17 	ldw	r2,-20(fp)
 2015850:	00c00fc4 	movi	r3,63
 2015854:	10c00dc5 	stb	r3,55(r2)
 2015858:	e0bff617 	ldw	r2,-40(fp)
 201585c:	e0bffd15 	stw	r2,-12(fp)
 2015860:	e0bffd17 	ldw	r2,-12(fp)
 2015864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015868:	0005883a 	mov	r2,zero
}
 201586c:	e037883a 	mov	sp,fp
 2015870:	df000017 	ldw	fp,0(sp)
 2015874:	dec00104 	addi	sp,sp,4
 2015878:	f800283a 	ret

0201587c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201587c:	defff404 	addi	sp,sp,-48
 2015880:	dfc00b15 	stw	ra,44(sp)
 2015884:	df000a15 	stw	fp,40(sp)
 2015888:	df000a04 	addi	fp,sp,40
 201588c:	2005883a 	mov	r2,r4
 2015890:	e17ffe15 	stw	r5,-8(fp)
 2015894:	e1bfff15 	stw	r6,-4(fp)
 2015898:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201589c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 20158a0:	e0bfff17 	ldw	r2,-4(fp)
 20158a4:	1000021e 	bne	r2,zero,20158b0 <OSTaskNameGet+0x34>
        return (0);
 20158a8:	0005883a 	mov	r2,zero
 20158ac:	00005406 	br	2015a00 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 20158b0:	e0bffd03 	ldbu	r2,-12(fp)
 20158b4:	10800570 	cmpltui	r2,r2,21
 20158b8:	1000081e 	bne	r2,zero,20158dc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 20158bc:	e0bffd03 	ldbu	r2,-12(fp)
 20158c0:	10803fe0 	cmpeqi	r2,r2,255
 20158c4:	1000051e 	bne	r2,zero,20158dc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 20158c8:	e0bfff17 	ldw	r2,-4(fp)
 20158cc:	00c00a84 	movi	r3,42
 20158d0:	10c00005 	stb	r3,0(r2)
            return (0);
 20158d4:	0005883a 	mov	r2,zero
 20158d8:	00004906 	br	2015a00 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 20158dc:	e0bffe17 	ldw	r2,-8(fp)
 20158e0:	1000051e 	bne	r2,zero,20158f8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 20158e4:	e0bfff17 	ldw	r2,-4(fp)
 20158e8:	00c00304 	movi	r3,12
 20158ec:	10c00005 	stb	r3,0(r2)
        return (0);
 20158f0:	0005883a 	mov	r2,zero
 20158f4:	00004206 	br	2015a00 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 20158f8:	d0a73103 	ldbu	r2,-25404(gp)
 20158fc:	10803fcc 	andi	r2,r2,255
 2015900:	10000526 	beq	r2,zero,2015918 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 2015904:	e0bfff17 	ldw	r2,-4(fp)
 2015908:	00c00444 	movi	r3,17
 201590c:	10c00005 	stb	r3,0(r2)
        return (0);
 2015910:	0005883a 	mov	r2,zero
 2015914:	00003a06 	br	2015a00 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015918:	0005303a 	rdctl	r2,status
 201591c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015920:	e0fffc17 	ldw	r3,-16(fp)
 2015924:	00bfff84 	movi	r2,-2
 2015928:	1884703a 	and	r2,r3,r2
 201592c:	1001703a 	wrctl	status,r2
  
  return context;
 2015930:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015934:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 2015938:	e0bffd03 	ldbu	r2,-12(fp)
 201593c:	10803fd8 	cmpnei	r2,r2,255
 2015940:	1000031e 	bne	r2,zero,2015950 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 2015944:	d0a73217 	ldw	r2,-25400(gp)
 2015948:	10800c83 	ldbu	r2,50(r2)
 201594c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2015950:	e0fffd03 	ldbu	r3,-12(fp)
 2015954:	008080b4 	movhi	r2,514
 2015958:	1096b004 	addi	r2,r2,23232
 201595c:	18c7883a 	add	r3,r3,r3
 2015960:	18c7883a 	add	r3,r3,r3
 2015964:	10c5883a 	add	r2,r2,r3
 2015968:	10800017 	ldw	r2,0(r2)
 201596c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 2015970:	e0bff817 	ldw	r2,-32(fp)
 2015974:	1000091e 	bne	r2,zero,201599c <OSTaskNameGet+0x120>
 2015978:	e0bff617 	ldw	r2,-40(fp)
 201597c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015980:	e0bff717 	ldw	r2,-36(fp)
 2015984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2015988:	e0bfff17 	ldw	r2,-4(fp)
 201598c:	00c010c4 	movi	r3,67
 2015990:	10c00005 	stb	r3,0(r2)
        return (0);
 2015994:	0005883a 	mov	r2,zero
 2015998:	00001906 	br	2015a00 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201599c:	e0bff817 	ldw	r2,-32(fp)
 20159a0:	10800058 	cmpnei	r2,r2,1
 20159a4:	1000091e 	bne	r2,zero,20159cc <OSTaskNameGet+0x150>
 20159a8:	e0bff617 	ldw	r2,-40(fp)
 20159ac:	e0bff915 	stw	r2,-28(fp)
 20159b0:	e0bff917 	ldw	r2,-28(fp)
 20159b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20159b8:	e0bfff17 	ldw	r2,-4(fp)
 20159bc:	00c010c4 	movi	r3,67
 20159c0:	10c00005 	stb	r3,0(r2)
        return (0);
 20159c4:	0005883a 	mov	r2,zero
 20159c8:	00000d06 	br	2015a00 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 20159cc:	e0bff817 	ldw	r2,-32(fp)
 20159d0:	10801304 	addi	r2,r2,76
 20159d4:	100b883a 	mov	r5,r2
 20159d8:	e13ffe17 	ldw	r4,-8(fp)
 20159dc:	200ffa80 	call	200ffa8 <OS_StrCopy>
 20159e0:	e0bffb05 	stb	r2,-20(fp)
 20159e4:	e0bff617 	ldw	r2,-40(fp)
 20159e8:	e0bffa15 	stw	r2,-24(fp)
 20159ec:	e0bffa17 	ldw	r2,-24(fp)
 20159f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20159f4:	e0bfff17 	ldw	r2,-4(fp)
 20159f8:	10000005 	stb	zero,0(r2)
    return (len);
 20159fc:	e0bffb03 	ldbu	r2,-20(fp)
}
 2015a00:	e037883a 	mov	sp,fp
 2015a04:	dfc00117 	ldw	ra,4(sp)
 2015a08:	df000017 	ldw	fp,0(sp)
 2015a0c:	dec00204 	addi	sp,sp,8
 2015a10:	f800283a 	ret

02015a14 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2015a14:	defff304 	addi	sp,sp,-52
 2015a18:	dfc00c15 	stw	ra,48(sp)
 2015a1c:	df000b15 	stw	fp,44(sp)
 2015a20:	df000b04 	addi	fp,sp,44
 2015a24:	2005883a 	mov	r2,r4
 2015a28:	e17ffe15 	stw	r5,-8(fp)
 2015a2c:	e1bfff15 	stw	r6,-4(fp)
 2015a30:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 2015a34:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2015a38:	e0bfff17 	ldw	r2,-4(fp)
 2015a3c:	10005c26 	beq	r2,zero,2015bb0 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 2015a40:	e0bffd03 	ldbu	r2,-12(fp)
 2015a44:	10800570 	cmpltui	r2,r2,21
 2015a48:	1000071e 	bne	r2,zero,2015a68 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 2015a4c:	e0bffd03 	ldbu	r2,-12(fp)
 2015a50:	10803fe0 	cmpeqi	r2,r2,255
 2015a54:	1000041e 	bne	r2,zero,2015a68 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 2015a58:	e0bfff17 	ldw	r2,-4(fp)
 2015a5c:	00c00a84 	movi	r3,42
 2015a60:	10c00005 	stb	r3,0(r2)
            return;
 2015a64:	00005306 	br	2015bb4 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 2015a68:	e0bffe17 	ldw	r2,-8(fp)
 2015a6c:	1000041e 	bne	r2,zero,2015a80 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 2015a70:	e0bfff17 	ldw	r2,-4(fp)
 2015a74:	00c00304 	movi	r3,12
 2015a78:	10c00005 	stb	r3,0(r2)
        return;
 2015a7c:	00004d06 	br	2015bb4 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 2015a80:	d0a73103 	ldbu	r2,-25404(gp)
 2015a84:	10803fcc 	andi	r2,r2,255
 2015a88:	10000426 	beq	r2,zero,2015a9c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 2015a8c:	e0bfff17 	ldw	r2,-4(fp)
 2015a90:	00c00484 	movi	r3,18
 2015a94:	10c00005 	stb	r3,0(r2)
        return;
 2015a98:	00004606 	br	2015bb4 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015a9c:	0005303a 	rdctl	r2,status
 2015aa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015aa4:	e0fffc17 	ldw	r3,-16(fp)
 2015aa8:	00bfff84 	movi	r2,-2
 2015aac:	1884703a 	and	r2,r3,r2
 2015ab0:	1001703a 	wrctl	status,r2
  
  return context;
 2015ab4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015ab8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 2015abc:	e0bffd03 	ldbu	r2,-12(fp)
 2015ac0:	10803fd8 	cmpnei	r2,r2,255
 2015ac4:	1000031e 	bne	r2,zero,2015ad4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 2015ac8:	d0a73217 	ldw	r2,-25400(gp)
 2015acc:	10800c83 	ldbu	r2,50(r2)
 2015ad0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2015ad4:	e0fffd03 	ldbu	r3,-12(fp)
 2015ad8:	008080b4 	movhi	r2,514
 2015adc:	1096b004 	addi	r2,r2,23232
 2015ae0:	18c7883a 	add	r3,r3,r3
 2015ae4:	18c7883a 	add	r3,r3,r3
 2015ae8:	10c5883a 	add	r2,r2,r3
 2015aec:	10800017 	ldw	r2,0(r2)
 2015af0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 2015af4:	e0bff717 	ldw	r2,-36(fp)
 2015af8:	1000081e 	bne	r2,zero,2015b1c <OSTaskNameSet+0x108>
 2015afc:	e0bff517 	ldw	r2,-44(fp)
 2015b00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b04:	e0bff617 	ldw	r2,-40(fp)
 2015b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2015b0c:	e0bfff17 	ldw	r2,-4(fp)
 2015b10:	00c010c4 	movi	r3,67
 2015b14:	10c00005 	stb	r3,0(r2)
        return;
 2015b18:	00002606 	br	2015bb4 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 2015b1c:	e0bff717 	ldw	r2,-36(fp)
 2015b20:	10800058 	cmpnei	r2,r2,1
 2015b24:	1000081e 	bne	r2,zero,2015b48 <OSTaskNameSet+0x134>
 2015b28:	e0bff517 	ldw	r2,-44(fp)
 2015b2c:	e0bff815 	stw	r2,-32(fp)
 2015b30:	e0bff817 	ldw	r2,-32(fp)
 2015b34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2015b38:	e0bfff17 	ldw	r2,-4(fp)
 2015b3c:	00c010c4 	movi	r3,67
 2015b40:	10c00005 	stb	r3,0(r2)
        return;
 2015b44:	00001b06 	br	2015bb4 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 2015b48:	e13ffe17 	ldw	r4,-8(fp)
 2015b4c:	201001c0 	call	201001c <OS_StrLen>
 2015b50:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 2015b54:	e0bffa03 	ldbu	r2,-24(fp)
 2015b58:	10800830 	cmpltui	r2,r2,32
 2015b5c:	1000081e 	bne	r2,zero,2015b80 <OSTaskNameSet+0x16c>
 2015b60:	e0bff517 	ldw	r2,-44(fp)
 2015b64:	e0bff915 	stw	r2,-28(fp)
 2015b68:	e0bff917 	ldw	r2,-28(fp)
 2015b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 2015b70:	e0bfff17 	ldw	r2,-4(fp)
 2015b74:	00c01044 	movi	r3,65
 2015b78:	10c00005 	stb	r3,0(r2)
        return;
 2015b7c:	00000d06 	br	2015bb4 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 2015b80:	e0bff717 	ldw	r2,-36(fp)
 2015b84:	10801304 	addi	r2,r2,76
 2015b88:	e17ffe17 	ldw	r5,-8(fp)
 2015b8c:	1009883a 	mov	r4,r2
 2015b90:	200ffa80 	call	200ffa8 <OS_StrCopy>
 2015b94:	e0bff517 	ldw	r2,-44(fp)
 2015b98:	e0bffb15 	stw	r2,-20(fp)
 2015b9c:	e0bffb17 	ldw	r2,-20(fp)
 2015ba0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015ba4:	e0bfff17 	ldw	r2,-4(fp)
 2015ba8:	10000005 	stb	zero,0(r2)
 2015bac:	00000106 	br	2015bb4 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 2015bb0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2015bb4:	e037883a 	mov	sp,fp
 2015bb8:	dfc00117 	ldw	ra,4(sp)
 2015bbc:	df000017 	ldw	fp,0(sp)
 2015bc0:	dec00204 	addi	sp,sp,8
 2015bc4:	f800283a 	ret

02015bc8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 2015bc8:	defff404 	addi	sp,sp,-48
 2015bcc:	dfc00b15 	stw	ra,44(sp)
 2015bd0:	df000a15 	stw	fp,40(sp)
 2015bd4:	df000a04 	addi	fp,sp,40
 2015bd8:	2005883a 	mov	r2,r4
 2015bdc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 2015be0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 2015be4:	e0bfff03 	ldbu	r2,-4(fp)
 2015be8:	10800530 	cmpltui	r2,r2,20
 2015bec:	1000021e 	bne	r2,zero,2015bf8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2015bf0:	00800a84 	movi	r2,42
 2015bf4:	00006406 	br	2015d88 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015bf8:	0005303a 	rdctl	r2,status
 2015bfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015c00:	e0fffe17 	ldw	r3,-8(fp)
 2015c04:	00bfff84 	movi	r2,-2
 2015c08:	1884703a 	and	r2,r3,r2
 2015c0c:	1001703a 	wrctl	status,r2
  
  return context;
 2015c10:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015c14:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2015c18:	e0ffff03 	ldbu	r3,-4(fp)
 2015c1c:	008080b4 	movhi	r2,514
 2015c20:	1096b004 	addi	r2,r2,23232
 2015c24:	18c7883a 	add	r3,r3,r3
 2015c28:	18c7883a 	add	r3,r3,r3
 2015c2c:	10c5883a 	add	r2,r2,r3
 2015c30:	10800017 	ldw	r2,0(r2)
 2015c34:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 2015c38:	e0bff817 	ldw	r2,-32(fp)
 2015c3c:	1000061e 	bne	r2,zero,2015c58 <OSTaskResume+0x90>
 2015c40:	e0bff617 	ldw	r2,-40(fp)
 2015c44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c48:	e0bff717 	ldw	r2,-36(fp)
 2015c4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 2015c50:	00801184 	movi	r2,70
 2015c54:	00004c06 	br	2015d88 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 2015c58:	e0bff817 	ldw	r2,-32(fp)
 2015c5c:	10800058 	cmpnei	r2,r2,1
 2015c60:	1000061e 	bne	r2,zero,2015c7c <OSTaskResume+0xb4>
 2015c64:	e0bff617 	ldw	r2,-40(fp)
 2015c68:	e0bff915 	stw	r2,-28(fp)
 2015c6c:	e0bff917 	ldw	r2,-28(fp)
 2015c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2015c74:	008010c4 	movi	r2,67
 2015c78:	00004306 	br	2015d88 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 2015c7c:	e0bff817 	ldw	r2,-32(fp)
 2015c80:	10800c03 	ldbu	r2,48(r2)
 2015c84:	10803fcc 	andi	r2,r2,255
 2015c88:	1080020c 	andi	r2,r2,8
 2015c8c:	10003926 	beq	r2,zero,2015d74 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 2015c90:	e0bff817 	ldw	r2,-32(fp)
 2015c94:	10c00c03 	ldbu	r3,48(r2)
 2015c98:	00bffdc4 	movi	r2,-9
 2015c9c:	1884703a 	and	r2,r3,r2
 2015ca0:	1007883a 	mov	r3,r2
 2015ca4:	e0bff817 	ldw	r2,-32(fp)
 2015ca8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 2015cac:	e0bff817 	ldw	r2,-32(fp)
 2015cb0:	10800c03 	ldbu	r2,48(r2)
 2015cb4:	10803fcc 	andi	r2,r2,255
 2015cb8:	1000281e 	bne	r2,zero,2015d5c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 2015cbc:	e0bff817 	ldw	r2,-32(fp)
 2015cc0:	10800b8b 	ldhu	r2,46(r2)
 2015cc4:	10bfffcc 	andi	r2,r2,65535
 2015cc8:	10001f1e 	bne	r2,zero,2015d48 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 2015ccc:	e0bff817 	ldw	r2,-32(fp)
 2015cd0:	10c00d83 	ldbu	r3,54(r2)
 2015cd4:	d0a72f03 	ldbu	r2,-25412(gp)
 2015cd8:	1884b03a 	or	r2,r3,r2
 2015cdc:	d0a72f05 	stb	r2,-25412(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2015ce0:	e0bff817 	ldw	r2,-32(fp)
 2015ce4:	10800d03 	ldbu	r2,52(r2)
 2015ce8:	10c03fcc 	andi	r3,r2,255
 2015cec:	e0bff817 	ldw	r2,-32(fp)
 2015cf0:	10800d03 	ldbu	r2,52(r2)
 2015cf4:	11003fcc 	andi	r4,r2,255
 2015cf8:	d0a72f44 	addi	r2,gp,-25411
 2015cfc:	2085883a 	add	r2,r4,r2
 2015d00:	11000003 	ldbu	r4,0(r2)
 2015d04:	e0bff817 	ldw	r2,-32(fp)
 2015d08:	10800d43 	ldbu	r2,53(r2)
 2015d0c:	2084b03a 	or	r2,r4,r2
 2015d10:	1009883a 	mov	r4,r2
 2015d14:	d0a72f44 	addi	r2,gp,-25411
 2015d18:	1885883a 	add	r2,r3,r2
 2015d1c:	11000005 	stb	r4,0(r2)
 2015d20:	e0bff617 	ldw	r2,-40(fp)
 2015d24:	e0bffa15 	stw	r2,-24(fp)
 2015d28:	e0bffa17 	ldw	r2,-24(fp)
 2015d2c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 2015d30:	d0a72343 	ldbu	r2,-25459(gp)
 2015d34:	10803fcc 	andi	r2,r2,255
 2015d38:	10800058 	cmpnei	r2,r2,1
 2015d3c:	10000b1e 	bne	r2,zero,2015d6c <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 2015d40:	200fe640 	call	200fe64 <OS_Sched>
 2015d44:	00000906 	br	2015d6c <OSTaskResume+0x1a4>
 2015d48:	e0bff617 	ldw	r2,-40(fp)
 2015d4c:	e0bffb15 	stw	r2,-20(fp)
 2015d50:	e0bffb17 	ldw	r2,-20(fp)
 2015d54:	1001703a 	wrctl	status,r2
 2015d58:	00000406 	br	2015d6c <OSTaskResume+0x1a4>
 2015d5c:	e0bff617 	ldw	r2,-40(fp)
 2015d60:	e0bffc15 	stw	r2,-16(fp)
 2015d64:	e0bffc17 	ldw	r2,-16(fp)
 2015d68:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 2015d6c:	0005883a 	mov	r2,zero
 2015d70:	00000506 	br	2015d88 <OSTaskResume+0x1c0>
 2015d74:	e0bff617 	ldw	r2,-40(fp)
 2015d78:	e0bffd15 	stw	r2,-12(fp)
 2015d7c:	e0bffd17 	ldw	r2,-12(fp)
 2015d80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 2015d84:	00801104 	movi	r2,68
}
 2015d88:	e037883a 	mov	sp,fp
 2015d8c:	dfc00117 	ldw	ra,4(sp)
 2015d90:	df000017 	ldw	fp,0(sp)
 2015d94:	dec00204 	addi	sp,sp,8
 2015d98:	f800283a 	ret

02015d9c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2015d9c:	defff304 	addi	sp,sp,-52
 2015da0:	df000c15 	stw	fp,48(sp)
 2015da4:	df000c04 	addi	fp,sp,48
 2015da8:	2005883a 	mov	r2,r4
 2015dac:	e17fff15 	stw	r5,-4(fp)
 2015db0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2015db4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 2015db8:	e0bffe03 	ldbu	r2,-8(fp)
 2015dbc:	10800570 	cmpltui	r2,r2,21
 2015dc0:	1000051e 	bne	r2,zero,2015dd8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 2015dc4:	e0bffe03 	ldbu	r2,-8(fp)
 2015dc8:	10803fe0 	cmpeqi	r2,r2,255
 2015dcc:	1000021e 	bne	r2,zero,2015dd8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 2015dd0:	00800a84 	movi	r2,42
 2015dd4:	00005d06 	br	2015f4c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 2015dd8:	e0bfff17 	ldw	r2,-4(fp)
 2015ddc:	1000021e 	bne	r2,zero,2015de8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 2015de0:	00800244 	movi	r2,9
 2015de4:	00005906 	br	2015f4c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 2015de8:	e0bfff17 	ldw	r2,-4(fp)
 2015dec:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 2015df0:	e0bfff17 	ldw	r2,-4(fp)
 2015df4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015df8:	0005303a 	rdctl	r2,status
 2015dfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015e00:	e0fffd17 	ldw	r3,-12(fp)
 2015e04:	00bfff84 	movi	r2,-2
 2015e08:	1884703a 	and	r2,r3,r2
 2015e0c:	1001703a 	wrctl	status,r2
  
  return context;
 2015e10:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 2015e14:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 2015e18:	e0bffe03 	ldbu	r2,-8(fp)
 2015e1c:	10803fd8 	cmpnei	r2,r2,255
 2015e20:	1000031e 	bne	r2,zero,2015e30 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 2015e24:	d0a73217 	ldw	r2,-25400(gp)
 2015e28:	10800c83 	ldbu	r2,50(r2)
 2015e2c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2015e30:	e0fffe03 	ldbu	r3,-8(fp)
 2015e34:	008080b4 	movhi	r2,514
 2015e38:	1096b004 	addi	r2,r2,23232
 2015e3c:	18c7883a 	add	r3,r3,r3
 2015e40:	18c7883a 	add	r3,r3,r3
 2015e44:	10c5883a 	add	r2,r2,r3
 2015e48:	10800017 	ldw	r2,0(r2)
 2015e4c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 2015e50:	e0bff817 	ldw	r2,-32(fp)
 2015e54:	1000061e 	bne	r2,zero,2015e70 <OSTaskStkChk+0xd4>
 2015e58:	e0bff617 	ldw	r2,-40(fp)
 2015e5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e60:	e0bff717 	ldw	r2,-36(fp)
 2015e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2015e68:	008010c4 	movi	r2,67
 2015e6c:	00003706 	br	2015f4c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2015e70:	e0bff817 	ldw	r2,-32(fp)
 2015e74:	10800058 	cmpnei	r2,r2,1
 2015e78:	1000061e 	bne	r2,zero,2015e94 <OSTaskStkChk+0xf8>
 2015e7c:	e0bff617 	ldw	r2,-40(fp)
 2015e80:	e0bff915 	stw	r2,-28(fp)
 2015e84:	e0bff917 	ldw	r2,-28(fp)
 2015e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2015e8c:	008010c4 	movi	r2,67
 2015e90:	00002e06 	br	2015f4c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 2015e94:	e0bff817 	ldw	r2,-32(fp)
 2015e98:	1080040b 	ldhu	r2,16(r2)
 2015e9c:	10bfffcc 	andi	r2,r2,65535
 2015ea0:	1080004c 	andi	r2,r2,1
 2015ea4:	1000061e 	bne	r2,zero,2015ec0 <OSTaskStkChk+0x124>
 2015ea8:	e0bff617 	ldw	r2,-40(fp)
 2015eac:	e0bffa15 	stw	r2,-24(fp)
 2015eb0:	e0bffa17 	ldw	r2,-24(fp)
 2015eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 2015eb8:	00801144 	movi	r2,69
 2015ebc:	00002306 	br	2015f4c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 2015ec0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 2015ec4:	e0bff817 	ldw	r2,-32(fp)
 2015ec8:	10800317 	ldw	r2,12(r2)
 2015ecc:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 2015ed0:	e0bff817 	ldw	r2,-32(fp)
 2015ed4:	10800217 	ldw	r2,8(r2)
 2015ed8:	e0bff415 	stw	r2,-48(fp)
 2015edc:	e0bff617 	ldw	r2,-40(fp)
 2015ee0:	e0bffb15 	stw	r2,-20(fp)
 2015ee4:	e0bffb17 	ldw	r2,-20(fp)
 2015ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2015eec:	00000306 	br	2015efc <OSTaskStkChk+0x160>
        nfree++;
 2015ef0:	e0bff517 	ldw	r2,-44(fp)
 2015ef4:	10800044 	addi	r2,r2,1
 2015ef8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2015efc:	e0bff417 	ldw	r2,-48(fp)
 2015f00:	10c00104 	addi	r3,r2,4
 2015f04:	e0fff415 	stw	r3,-48(fp)
 2015f08:	10800017 	ldw	r2,0(r2)
 2015f0c:	103ff826 	beq	r2,zero,2015ef0 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 2015f10:	e0bff517 	ldw	r2,-44(fp)
 2015f14:	1085883a 	add	r2,r2,r2
 2015f18:	1085883a 	add	r2,r2,r2
 2015f1c:	1007883a 	mov	r3,r2
 2015f20:	e0bfff17 	ldw	r2,-4(fp)
 2015f24:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 2015f28:	e0fffc17 	ldw	r3,-16(fp)
 2015f2c:	e0bff517 	ldw	r2,-44(fp)
 2015f30:	1885c83a 	sub	r2,r3,r2
 2015f34:	1085883a 	add	r2,r2,r2
 2015f38:	1085883a 	add	r2,r2,r2
 2015f3c:	1007883a 	mov	r3,r2
 2015f40:	e0bfff17 	ldw	r2,-4(fp)
 2015f44:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 2015f48:	0005883a 	mov	r2,zero
}
 2015f4c:	e037883a 	mov	sp,fp
 2015f50:	df000017 	ldw	fp,0(sp)
 2015f54:	dec00104 	addi	sp,sp,4
 2015f58:	f800283a 	ret

02015f5c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 2015f5c:	defff504 	addi	sp,sp,-44
 2015f60:	dfc00a15 	stw	ra,40(sp)
 2015f64:	df000915 	stw	fp,36(sp)
 2015f68:	df000904 	addi	fp,sp,36
 2015f6c:	2005883a 	mov	r2,r4
 2015f70:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015f74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 2015f78:	e0bfff03 	ldbu	r2,-4(fp)
 2015f7c:	10800518 	cmpnei	r2,r2,20
 2015f80:	1000021e 	bne	r2,zero,2015f8c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 2015f84:	008011c4 	movi	r2,71
 2015f88:	00006806 	br	201612c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2015f8c:	e0bfff03 	ldbu	r2,-4(fp)
 2015f90:	10800530 	cmpltui	r2,r2,20
 2015f94:	1000051e 	bne	r2,zero,2015fac <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 2015f98:	e0bfff03 	ldbu	r2,-4(fp)
 2015f9c:	10803fe0 	cmpeqi	r2,r2,255
 2015fa0:	1000021e 	bne	r2,zero,2015fac <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 2015fa4:	00800a84 	movi	r2,42
 2015fa8:	00006006 	br	201612c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015fac:	0005303a 	rdctl	r2,status
 2015fb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015fb4:	e0fffe17 	ldw	r3,-8(fp)
 2015fb8:	00bfff84 	movi	r2,-2
 2015fbc:	1884703a 	and	r2,r3,r2
 2015fc0:	1001703a 	wrctl	status,r2
  
  return context;
 2015fc4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 2015fc8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 2015fcc:	e0bfff03 	ldbu	r2,-4(fp)
 2015fd0:	10803fd8 	cmpnei	r2,r2,255
 2015fd4:	1000061e 	bne	r2,zero,2015ff0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 2015fd8:	d0a73217 	ldw	r2,-25400(gp)
 2015fdc:	10800c83 	ldbu	r2,50(r2)
 2015fe0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 2015fe4:	00800044 	movi	r2,1
 2015fe8:	e0bff705 	stb	r2,-36(fp)
 2015fec:	00000906 	br	2016014 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 2015ff0:	d0a73217 	ldw	r2,-25400(gp)
 2015ff4:	10800c83 	ldbu	r2,50(r2)
 2015ff8:	10c03fcc 	andi	r3,r2,255
 2015ffc:	e0bfff03 	ldbu	r2,-4(fp)
 2016000:	1880031e 	bne	r3,r2,2016010 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 2016004:	00800044 	movi	r2,1
 2016008:	e0bff705 	stb	r2,-36(fp)
 201600c:	00000106 	br	2016014 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 2016010:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016014:	e0ffff03 	ldbu	r3,-4(fp)
 2016018:	008080b4 	movhi	r2,514
 201601c:	1096b004 	addi	r2,r2,23232
 2016020:	18c7883a 	add	r3,r3,r3
 2016024:	18c7883a 	add	r3,r3,r3
 2016028:	10c5883a 	add	r2,r2,r3
 201602c:	10800017 	ldw	r2,0(r2)
 2016030:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 2016034:	e0bffa17 	ldw	r2,-24(fp)
 2016038:	1000061e 	bne	r2,zero,2016054 <OSTaskSuspend+0xf8>
 201603c:	e0bff817 	ldw	r2,-32(fp)
 2016040:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016044:	e0bff917 	ldw	r2,-28(fp)
 2016048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201604c:	00801204 	movi	r2,72
 2016050:	00003606 	br	201612c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 2016054:	e0bffa17 	ldw	r2,-24(fp)
 2016058:	10800058 	cmpnei	r2,r2,1
 201605c:	1000061e 	bne	r2,zero,2016078 <OSTaskSuspend+0x11c>
 2016060:	e0bff817 	ldw	r2,-32(fp)
 2016064:	e0bffb15 	stw	r2,-20(fp)
 2016068:	e0bffb17 	ldw	r2,-20(fp)
 201606c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016070:	008010c4 	movi	r2,67
 2016074:	00002d06 	br	201612c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 2016078:	e0bffa17 	ldw	r2,-24(fp)
 201607c:	10800d03 	ldbu	r2,52(r2)
 2016080:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 2016084:	e0fffd03 	ldbu	r3,-12(fp)
 2016088:	e13ffd03 	ldbu	r4,-12(fp)
 201608c:	d0a72f44 	addi	r2,gp,-25411
 2016090:	2085883a 	add	r2,r4,r2
 2016094:	10800003 	ldbu	r2,0(r2)
 2016098:	1009883a 	mov	r4,r2
 201609c:	e0bffa17 	ldw	r2,-24(fp)
 20160a0:	10800d43 	ldbu	r2,53(r2)
 20160a4:	0084303a 	nor	r2,zero,r2
 20160a8:	2084703a 	and	r2,r4,r2
 20160ac:	1009883a 	mov	r4,r2
 20160b0:	d0a72f44 	addi	r2,gp,-25411
 20160b4:	1885883a 	add	r2,r3,r2
 20160b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20160bc:	e0fffd03 	ldbu	r3,-12(fp)
 20160c0:	d0a72f44 	addi	r2,gp,-25411
 20160c4:	1885883a 	add	r2,r3,r2
 20160c8:	10800003 	ldbu	r2,0(r2)
 20160cc:	10803fcc 	andi	r2,r2,255
 20160d0:	1000071e 	bne	r2,zero,20160f0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 20160d4:	e0bffa17 	ldw	r2,-24(fp)
 20160d8:	10800d83 	ldbu	r2,54(r2)
 20160dc:	0084303a 	nor	r2,zero,r2
 20160e0:	1007883a 	mov	r3,r2
 20160e4:	d0a72f03 	ldbu	r2,-25412(gp)
 20160e8:	1884703a 	and	r2,r3,r2
 20160ec:	d0a72f05 	stb	r2,-25412(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 20160f0:	e0bffa17 	ldw	r2,-24(fp)
 20160f4:	10800c03 	ldbu	r2,48(r2)
 20160f8:	10800214 	ori	r2,r2,8
 20160fc:	1007883a 	mov	r3,r2
 2016100:	e0bffa17 	ldw	r2,-24(fp)
 2016104:	10c00c05 	stb	r3,48(r2)
 2016108:	e0bff817 	ldw	r2,-32(fp)
 201610c:	e0bffc15 	stw	r2,-16(fp)
 2016110:	e0bffc17 	ldw	r2,-16(fp)
 2016114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2016118:	e0bff703 	ldbu	r2,-36(fp)
 201611c:	10800058 	cmpnei	r2,r2,1
 2016120:	1000011e 	bne	r2,zero,2016128 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 2016124:	200fe640 	call	200fe64 <OS_Sched>
    }
    return (OS_ERR_NONE);
 2016128:	0005883a 	mov	r2,zero
}
 201612c:	e037883a 	mov	sp,fp
 2016130:	dfc00117 	ldw	ra,4(sp)
 2016134:	df000017 	ldw	fp,0(sp)
 2016138:	dec00204 	addi	sp,sp,8
 201613c:	f800283a 	ret

02016140 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 2016140:	defff604 	addi	sp,sp,-40
 2016144:	dfc00915 	stw	ra,36(sp)
 2016148:	df000815 	stw	fp,32(sp)
 201614c:	df000804 	addi	fp,sp,32
 2016150:	2005883a 	mov	r2,r4
 2016154:	e17fff15 	stw	r5,-4(fp)
 2016158:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201615c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 2016160:	e0bffe03 	ldbu	r2,-8(fp)
 2016164:	10800570 	cmpltui	r2,r2,21
 2016168:	1000051e 	bne	r2,zero,2016180 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201616c:	e0bffe03 	ldbu	r2,-8(fp)
 2016170:	10803fe0 	cmpeqi	r2,r2,255
 2016174:	1000021e 	bne	r2,zero,2016180 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 2016178:	00800a84 	movi	r2,42
 201617c:	00003406 	br	2016250 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 2016180:	e0bfff17 	ldw	r2,-4(fp)
 2016184:	1000021e 	bne	r2,zero,2016190 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 2016188:	00800244 	movi	r2,9
 201618c:	00003006 	br	2016250 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016190:	0005303a 	rdctl	r2,status
 2016194:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016198:	e0fffd17 	ldw	r3,-12(fp)
 201619c:	00bfff84 	movi	r2,-2
 20161a0:	1884703a 	and	r2,r3,r2
 20161a4:	1001703a 	wrctl	status,r2
  
  return context;
 20161a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20161ac:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 20161b0:	e0bffe03 	ldbu	r2,-8(fp)
 20161b4:	10803fd8 	cmpnei	r2,r2,255
 20161b8:	1000031e 	bne	r2,zero,20161c8 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 20161bc:	d0a73217 	ldw	r2,-25400(gp)
 20161c0:	10800c83 	ldbu	r2,50(r2)
 20161c4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20161c8:	e0fffe03 	ldbu	r3,-8(fp)
 20161cc:	008080b4 	movhi	r2,514
 20161d0:	1096b004 	addi	r2,r2,23232
 20161d4:	18c7883a 	add	r3,r3,r3
 20161d8:	18c7883a 	add	r3,r3,r3
 20161dc:	10c5883a 	add	r2,r2,r3
 20161e0:	10800017 	ldw	r2,0(r2)
 20161e4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 20161e8:	e0bffa17 	ldw	r2,-24(fp)
 20161ec:	1000061e 	bne	r2,zero,2016208 <OSTaskQuery+0xc8>
 20161f0:	e0bff817 	ldw	r2,-32(fp)
 20161f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20161f8:	e0bff917 	ldw	r2,-28(fp)
 20161fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 2016200:	00800a44 	movi	r2,41
 2016204:	00001206 	br	2016250 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2016208:	e0bffa17 	ldw	r2,-24(fp)
 201620c:	10800058 	cmpnei	r2,r2,1
 2016210:	1000061e 	bne	r2,zero,201622c <OSTaskQuery+0xec>
 2016214:	e0bff817 	ldw	r2,-32(fp)
 2016218:	e0bffb15 	stw	r2,-20(fp)
 201621c:	e0bffb17 	ldw	r2,-20(fp)
 2016220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016224:	008010c4 	movi	r2,67
 2016228:	00000906 	br	2016250 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201622c:	01801b04 	movi	r6,108
 2016230:	e17ffa17 	ldw	r5,-24(fp)
 2016234:	e13fff17 	ldw	r4,-4(fp)
 2016238:	200fdfc0 	call	200fdfc <OS_MemCopy>
 201623c:	e0bff817 	ldw	r2,-32(fp)
 2016240:	e0bffc15 	stw	r2,-16(fp)
 2016244:	e0bffc17 	ldw	r2,-16(fp)
 2016248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201624c:	0005883a 	mov	r2,zero
}
 2016250:	e037883a 	mov	sp,fp
 2016254:	dfc00117 	ldw	ra,4(sp)
 2016258:	df000017 	ldw	fp,0(sp)
 201625c:	dec00204 	addi	sp,sp,8
 2016260:	f800283a 	ret

02016264 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 2016264:	defffc04 	addi	sp,sp,-16
 2016268:	df000315 	stw	fp,12(sp)
 201626c:	df000304 	addi	fp,sp,12
 2016270:	e13ffd15 	stw	r4,-12(fp)
 2016274:	e17ffe15 	stw	r5,-8(fp)
 2016278:	3005883a 	mov	r2,r6
 201627c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 2016280:	e0bfff0b 	ldhu	r2,-4(fp)
 2016284:	1080004c 	andi	r2,r2,1
 2016288:	10000d26 	beq	r2,zero,20162c0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201628c:	e0bfff0b 	ldhu	r2,-4(fp)
 2016290:	1080008c 	andi	r2,r2,2
 2016294:	10000a26 	beq	r2,zero,20162c0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2016298:	00000706 	br	20162b8 <OS_TaskStkClr+0x54>
                size--;
 201629c:	e0bffe17 	ldw	r2,-8(fp)
 20162a0:	10bfffc4 	addi	r2,r2,-1
 20162a4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 20162a8:	e0bffd17 	ldw	r2,-12(fp)
 20162ac:	10c00104 	addi	r3,r2,4
 20162b0:	e0fffd15 	stw	r3,-12(fp)
 20162b4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 20162b8:	e0bffe17 	ldw	r2,-8(fp)
 20162bc:	103ff71e 	bne	r2,zero,201629c <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 20162c0:	0001883a 	nop
 20162c4:	e037883a 	mov	sp,fp
 20162c8:	df000017 	ldw	fp,0(sp)
 20162cc:	dec00104 	addi	sp,sp,4
 20162d0:	f800283a 	ret

020162d4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 20162d4:	defff904 	addi	sp,sp,-28
 20162d8:	dfc00615 	stw	ra,24(sp)
 20162dc:	df000515 	stw	fp,20(sp)
 20162e0:	df000504 	addi	fp,sp,20
 20162e4:	2005883a 	mov	r2,r4
 20162e8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20162ec:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20162f0:	d0a73103 	ldbu	r2,-25404(gp)
 20162f4:	10803fcc 	andi	r2,r2,255
 20162f8:	1000311e 	bne	r2,zero,20163c0 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 20162fc:	e0bfff0b 	ldhu	r2,-4(fp)
 2016300:	10003026 	beq	r2,zero,20163c4 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016304:	0005303a 	rdctl	r2,status
 2016308:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201630c:	e0fffe17 	ldw	r3,-8(fp)
 2016310:	00bfff84 	movi	r2,-2
 2016314:	1884703a 	and	r2,r3,r2
 2016318:	1001703a 	wrctl	status,r2
  
  return context;
 201631c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2016320:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 2016324:	d0a73217 	ldw	r2,-25400(gp)
 2016328:	10800d03 	ldbu	r2,52(r2)
 201632c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2016330:	e0fffd03 	ldbu	r3,-12(fp)
 2016334:	e13ffd03 	ldbu	r4,-12(fp)
 2016338:	d0a72f44 	addi	r2,gp,-25411
 201633c:	2085883a 	add	r2,r4,r2
 2016340:	10800003 	ldbu	r2,0(r2)
 2016344:	1009883a 	mov	r4,r2
 2016348:	d0a73217 	ldw	r2,-25400(gp)
 201634c:	10800d43 	ldbu	r2,53(r2)
 2016350:	0084303a 	nor	r2,zero,r2
 2016354:	2084703a 	and	r2,r4,r2
 2016358:	1009883a 	mov	r4,r2
 201635c:	d0a72f44 	addi	r2,gp,-25411
 2016360:	1885883a 	add	r2,r3,r2
 2016364:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 2016368:	e0fffd03 	ldbu	r3,-12(fp)
 201636c:	d0a72f44 	addi	r2,gp,-25411
 2016370:	1885883a 	add	r2,r3,r2
 2016374:	10800003 	ldbu	r2,0(r2)
 2016378:	10803fcc 	andi	r2,r2,255
 201637c:	1000071e 	bne	r2,zero,201639c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2016380:	d0a73217 	ldw	r2,-25400(gp)
 2016384:	10800d83 	ldbu	r2,54(r2)
 2016388:	0084303a 	nor	r2,zero,r2
 201638c:	1007883a 	mov	r3,r2
 2016390:	d0a72f03 	ldbu	r2,-25412(gp)
 2016394:	1884703a 	and	r2,r3,r2
 2016398:	d0a72f05 	stb	r2,-25412(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201639c:	d0a73217 	ldw	r2,-25400(gp)
 20163a0:	e0ffff0b 	ldhu	r3,-4(fp)
 20163a4:	10c00b8d 	sth	r3,46(r2)
 20163a8:	e0bffb17 	ldw	r2,-20(fp)
 20163ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20163b0:	e0bffc17 	ldw	r2,-16(fp)
 20163b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 20163b8:	200fe640 	call	200fe64 <OS_Sched>
 20163bc:	00000106 	br	20163c4 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 20163c0:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 20163c4:	e037883a 	mov	sp,fp
 20163c8:	dfc00117 	ldw	ra,4(sp)
 20163cc:	df000017 	ldw	fp,0(sp)
 20163d0:	dec00204 	addi	sp,sp,8
 20163d4:	f800283a 	ret

020163d8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 20163d8:	defff704 	addi	sp,sp,-36
 20163dc:	dfc00815 	stw	ra,32(sp)
 20163e0:	df000715 	stw	fp,28(sp)
 20163e4:	dc000615 	stw	r16,24(sp)
 20163e8:	df000704 	addi	fp,sp,28
 20163ec:	2011883a 	mov	r8,r4
 20163f0:	2809883a 	mov	r4,r5
 20163f4:	3007883a 	mov	r3,r6
 20163f8:	3805883a 	mov	r2,r7
 20163fc:	e23ffb05 	stb	r8,-20(fp)
 2016400:	e13ffc05 	stb	r4,-16(fp)
 2016404:	e0fffd05 	stb	r3,-12(fp)
 2016408:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201640c:	d0a73103 	ldbu	r2,-25404(gp)
 2016410:	10803fcc 	andi	r2,r2,255
 2016414:	10000226 	beq	r2,zero,2016420 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 2016418:	00801544 	movi	r2,85
 201641c:	00004706 	br	201653c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 2016420:	e0bffb03 	ldbu	r2,-20(fp)
 2016424:	1000081e 	bne	r2,zero,2016448 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 2016428:	e0bffc03 	ldbu	r2,-16(fp)
 201642c:	1000061e 	bne	r2,zero,2016448 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 2016430:	e0bffd03 	ldbu	r2,-12(fp)
 2016434:	1000041e 	bne	r2,zero,2016448 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 2016438:	e0bffe0b 	ldhu	r2,-8(fp)
 201643c:	1000021e 	bne	r2,zero,2016448 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 2016440:	00801504 	movi	r2,84
 2016444:	00003d06 	br	201653c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
 2016448:	e0bffc03 	ldbu	r2,-16(fp)
 201644c:	10800f30 	cmpltui	r2,r2,60
 2016450:	1000021e 	bne	r2,zero,201645c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2016454:	00801444 	movi	r2,81
 2016458:	00003806 	br	201653c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
 201645c:	e0bffd03 	ldbu	r2,-12(fp)
 2016460:	10800f30 	cmpltui	r2,r2,60
 2016464:	1000021e 	bne	r2,zero,2016470 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2016468:	00801484 	movi	r2,82
 201646c:	00003306 	br	201653c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
 2016470:	e0bffe0b 	ldhu	r2,-8(fp)
 2016474:	1080fa30 	cmpltui	r2,r2,1000
 2016478:	1000021e 	bne	r2,zero,2016484 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201647c:	008014c4 	movi	r2,83
 2016480:	00002e06 	br	201653c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2016484:	e0bffb03 	ldbu	r2,-20(fp)
 2016488:	01438404 	movi	r5,3600
 201648c:	1009883a 	mov	r4,r2
 2016490:	200afbc0 	call	200afbc <__mulsi3>
 2016494:	1021883a 	mov	r16,r2
 2016498:	e0bffc03 	ldbu	r2,-16(fp)
 201649c:	01400f04 	movi	r5,60
 20164a0:	1009883a 	mov	r4,r2
 20164a4:	200afbc0 	call	200afbc <__mulsi3>
 20164a8:	8087883a 	add	r3,r16,r2
 20164ac:	e0bffd03 	ldbu	r2,-12(fp)
 20164b0:	1885883a 	add	r2,r3,r2
 20164b4:	0140fa04 	movi	r5,1000
 20164b8:	1009883a 	mov	r4,r2
 20164bc:	200afbc0 	call	200afbc <__mulsi3>
 20164c0:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 20164c4:	e0bffe0b 	ldhu	r2,-8(fp)
 20164c8:	0140fa04 	movi	r5,1000
 20164cc:	1009883a 	mov	r4,r2
 20164d0:	200afbc0 	call	200afbc <__mulsi3>
 20164d4:	0140fa04 	movi	r5,1000
 20164d8:	1009883a 	mov	r4,r2
 20164dc:	200af000 	call	200af00 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 20164e0:	8085883a 	add	r2,r16,r2
 20164e4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 20164e8:	e0bffa17 	ldw	r2,-24(fp)
 20164ec:	1004d43a 	srli	r2,r2,16
 20164f0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 20164f4:	e0bffa17 	ldw	r2,-24(fp)
 20164f8:	10bfffcc 	andi	r2,r2,65535
 20164fc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 2016500:	e0bffa17 	ldw	r2,-24(fp)
 2016504:	10bfffcc 	andi	r2,r2,65535
 2016508:	1009883a 	mov	r4,r2
 201650c:	20162d40 	call	20162d4 <OSTimeDly>
    while (loops > 0) {
 2016510:	00000706 	br	2016530 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
 2016514:	01200014 	movui	r4,32768
 2016518:	20162d40 	call	20162d4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201651c:	01200014 	movui	r4,32768
 2016520:	20162d40 	call	20162d4 <OSTimeDly>
        loops--;
 2016524:	e0bff90b 	ldhu	r2,-28(fp)
 2016528:	10bfffc4 	addi	r2,r2,-1
 201652c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2016530:	e0bff90b 	ldhu	r2,-28(fp)
 2016534:	103ff71e 	bne	r2,zero,2016514 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2016538:	0005883a 	mov	r2,zero
}
 201653c:	e6ffff04 	addi	sp,fp,-4
 2016540:	dfc00217 	ldw	ra,8(sp)
 2016544:	df000117 	ldw	fp,4(sp)
 2016548:	dc000017 	ldw	r16,0(sp)
 201654c:	dec00304 	addi	sp,sp,12
 2016550:	f800283a 	ret

02016554 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2016554:	defff504 	addi	sp,sp,-44
 2016558:	dfc00a15 	stw	ra,40(sp)
 201655c:	df000915 	stw	fp,36(sp)
 2016560:	df000904 	addi	fp,sp,36
 2016564:	2005883a 	mov	r2,r4
 2016568:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201656c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2016570:	e0bfff03 	ldbu	r2,-4(fp)
 2016574:	10800530 	cmpltui	r2,r2,20
 2016578:	1000021e 	bne	r2,zero,2016584 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201657c:	00800a84 	movi	r2,42
 2016580:	00006406 	br	2016714 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016584:	0005303a 	rdctl	r2,status
 2016588:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201658c:	e0fffe17 	ldw	r3,-8(fp)
 2016590:	00bfff84 	movi	r2,-2
 2016594:	1884703a 	and	r2,r3,r2
 2016598:	1001703a 	wrctl	status,r2
  
  return context;
 201659c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20165a0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 20165a4:	e0ffff03 	ldbu	r3,-4(fp)
 20165a8:	008080b4 	movhi	r2,514
 20165ac:	1096b004 	addi	r2,r2,23232
 20165b0:	18c7883a 	add	r3,r3,r3
 20165b4:	18c7883a 	add	r3,r3,r3
 20165b8:	10c5883a 	add	r2,r2,r3
 20165bc:	10800017 	ldw	r2,0(r2)
 20165c0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 20165c4:	e0bff917 	ldw	r2,-28(fp)
 20165c8:	1000061e 	bne	r2,zero,20165e4 <OSTimeDlyResume+0x90>
 20165cc:	e0bff717 	ldw	r2,-36(fp)
 20165d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20165d4:	e0bff817 	ldw	r2,-32(fp)
 20165d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 20165dc:	008010c4 	movi	r2,67
 20165e0:	00004c06 	br	2016714 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 20165e4:	e0bff917 	ldw	r2,-28(fp)
 20165e8:	10800058 	cmpnei	r2,r2,1
 20165ec:	1000061e 	bne	r2,zero,2016608 <OSTimeDlyResume+0xb4>
 20165f0:	e0bff717 	ldw	r2,-36(fp)
 20165f4:	e0bffa15 	stw	r2,-24(fp)
 20165f8:	e0bffa17 	ldw	r2,-24(fp)
 20165fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2016600:	008010c4 	movi	r2,67
 2016604:	00004306 	br	2016714 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2016608:	e0bff917 	ldw	r2,-28(fp)
 201660c:	10800b8b 	ldhu	r2,46(r2)
 2016610:	10bfffcc 	andi	r2,r2,65535
 2016614:	1000061e 	bne	r2,zero,2016630 <OSTimeDlyResume+0xdc>
 2016618:	e0bff717 	ldw	r2,-36(fp)
 201661c:	e0bffb15 	stw	r2,-20(fp)
 2016620:	e0bffb17 	ldw	r2,-20(fp)
 2016624:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2016628:	00801404 	movi	r2,80
 201662c:	00003906 	br	2016714 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2016630:	e0bff917 	ldw	r2,-28(fp)
 2016634:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2016638:	e0bff917 	ldw	r2,-28(fp)
 201663c:	10800c03 	ldbu	r2,48(r2)
 2016640:	10803fcc 	andi	r2,r2,255
 2016644:	10800dcc 	andi	r2,r2,55
 2016648:	10000b26 	beq	r2,zero,2016678 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201664c:	e0bff917 	ldw	r2,-28(fp)
 2016650:	10c00c03 	ldbu	r3,48(r2)
 2016654:	00bff204 	movi	r2,-56
 2016658:	1884703a 	and	r2,r3,r2
 201665c:	1007883a 	mov	r3,r2
 2016660:	e0bff917 	ldw	r2,-28(fp)
 2016664:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 2016668:	e0bff917 	ldw	r2,-28(fp)
 201666c:	00c00044 	movi	r3,1
 2016670:	10c00c45 	stb	r3,49(r2)
 2016674:	00000206 	br	2016680 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 2016678:	e0bff917 	ldw	r2,-28(fp)
 201667c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2016680:	e0bff917 	ldw	r2,-28(fp)
 2016684:	10800c03 	ldbu	r2,48(r2)
 2016688:	10803fcc 	andi	r2,r2,255
 201668c:	1080020c 	andi	r2,r2,8
 2016690:	10001b1e 	bne	r2,zero,2016700 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 2016694:	e0bff917 	ldw	r2,-28(fp)
 2016698:	10c00d83 	ldbu	r3,54(r2)
 201669c:	d0a72f03 	ldbu	r2,-25412(gp)
 20166a0:	1884b03a 	or	r2,r3,r2
 20166a4:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20166a8:	e0bff917 	ldw	r2,-28(fp)
 20166ac:	10800d03 	ldbu	r2,52(r2)
 20166b0:	10c03fcc 	andi	r3,r2,255
 20166b4:	e0bff917 	ldw	r2,-28(fp)
 20166b8:	10800d03 	ldbu	r2,52(r2)
 20166bc:	11003fcc 	andi	r4,r2,255
 20166c0:	d0a72f44 	addi	r2,gp,-25411
 20166c4:	2085883a 	add	r2,r4,r2
 20166c8:	11000003 	ldbu	r4,0(r2)
 20166cc:	e0bff917 	ldw	r2,-28(fp)
 20166d0:	10800d43 	ldbu	r2,53(r2)
 20166d4:	2084b03a 	or	r2,r4,r2
 20166d8:	1009883a 	mov	r4,r2
 20166dc:	d0a72f44 	addi	r2,gp,-25411
 20166e0:	1885883a 	add	r2,r3,r2
 20166e4:	11000005 	stb	r4,0(r2)
 20166e8:	e0bff717 	ldw	r2,-36(fp)
 20166ec:	e0bffc15 	stw	r2,-16(fp)
 20166f0:	e0bffc17 	ldw	r2,-16(fp)
 20166f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 20166f8:	200fe640 	call	200fe64 <OS_Sched>
 20166fc:	00000406 	br	2016710 <OSTimeDlyResume+0x1bc>
 2016700:	e0bff717 	ldw	r2,-36(fp)
 2016704:	e0bffd15 	stw	r2,-12(fp)
 2016708:	e0bffd17 	ldw	r2,-12(fp)
 201670c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 2016710:	0005883a 	mov	r2,zero
}
 2016714:	e037883a 	mov	sp,fp
 2016718:	dfc00117 	ldw	ra,4(sp)
 201671c:	df000017 	ldw	fp,0(sp)
 2016720:	dec00204 	addi	sp,sp,8
 2016724:	f800283a 	ret

02016728 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 2016728:	defffb04 	addi	sp,sp,-20
 201672c:	df000415 	stw	fp,16(sp)
 2016730:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016734:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016738:	0005303a 	rdctl	r2,status
 201673c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016740:	e0fffe17 	ldw	r3,-8(fp)
 2016744:	00bfff84 	movi	r2,-2
 2016748:	1884703a 	and	r2,r3,r2
 201674c:	1001703a 	wrctl	status,r2
  
  return context;
 2016750:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2016754:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 2016758:	d0a73317 	ldw	r2,-25396(gp)
 201675c:	e0bffd15 	stw	r2,-12(fp)
 2016760:	e0bffc17 	ldw	r2,-16(fp)
 2016764:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016768:	e0bfff17 	ldw	r2,-4(fp)
 201676c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 2016770:	e0bffd17 	ldw	r2,-12(fp)
}
 2016774:	e037883a 	mov	sp,fp
 2016778:	df000017 	ldw	fp,0(sp)
 201677c:	dec00104 	addi	sp,sp,4
 2016780:	f800283a 	ret

02016784 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 2016784:	defffb04 	addi	sp,sp,-20
 2016788:	df000415 	stw	fp,16(sp)
 201678c:	df000404 	addi	fp,sp,16
 2016790:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016794:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016798:	0005303a 	rdctl	r2,status
 201679c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20167a0:	e0fffd17 	ldw	r3,-12(fp)
 20167a4:	00bfff84 	movi	r2,-2
 20167a8:	1884703a 	and	r2,r3,r2
 20167ac:	1001703a 	wrctl	status,r2
  
  return context;
 20167b0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 20167b4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 20167b8:	e0bfff17 	ldw	r2,-4(fp)
 20167bc:	d0a73315 	stw	r2,-25396(gp)
 20167c0:	e0bffc17 	ldw	r2,-16(fp)
 20167c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20167c8:	e0bffe17 	ldw	r2,-8(fp)
 20167cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20167d0:	0001883a 	nop
 20167d4:	e037883a 	mov	sp,fp
 20167d8:	df000017 	ldw	fp,0(sp)
 20167dc:	dec00104 	addi	sp,sp,4
 20167e0:	f800283a 	ret

020167e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20167e4:	defffd04 	addi	sp,sp,-12
 20167e8:	dfc00215 	stw	ra,8(sp)
 20167ec:	df000115 	stw	fp,4(sp)
 20167f0:	df000104 	addi	fp,sp,4
 20167f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20167f8:	d1600804 	addi	r5,gp,-32736
 20167fc:	e13fff17 	ldw	r4,-4(fp)
 2016800:	20178580 	call	2017858 <alt_dev_llist_insert>
}
 2016804:	e037883a 	mov	sp,fp
 2016808:	dfc00117 	ldw	ra,4(sp)
 201680c:	df000017 	ldw	fp,0(sp)
 2016810:	dec00204 	addi	sp,sp,8
 2016814:	f800283a 	ret

02016818 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2016818:	defffd04 	addi	sp,sp,-12
 201681c:	dfc00215 	stw	ra,8(sp)
 2016820:	df000115 	stw	fp,4(sp)
 2016824:	df000104 	addi	fp,sp,4
 2016828:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201682c:	20182040 	call	2018204 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2016830:	00800044 	movi	r2,1
 2016834:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2016838:	0001883a 	nop
 201683c:	e037883a 	mov	sp,fp
 2016840:	dfc00117 	ldw	ra,4(sp)
 2016844:	df000017 	ldw	fp,0(sp)
 2016848:	dec00204 	addi	sp,sp,8
 201684c:	f800283a 	ret

02016850 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2016850:	defffe04 	addi	sp,sp,-8
 2016854:	dfc00115 	stw	ra,4(sp)
 2016858:	df000015 	stw	fp,0(sp)
 201685c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 2016860:	01c0fa04 	movi	r7,1000
 2016864:	01800044 	movi	r6,1
 2016868:	000b883a 	mov	r5,zero
 201686c:	0009883a 	mov	r4,zero
 2016870:	20176540 	call	2017654 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2016874:	000d883a 	mov	r6,zero
 2016878:	000b883a 	mov	r5,zero
 201687c:	010080b4 	movhi	r4,514
 2016880:	2126e604 	addi	r4,r4,-25704
 2016884:	2016a140 	call	2016a14 <altera_avalon_jtag_uart_init>
 2016888:	010080b4 	movhi	r4,514
 201688c:	2126dc04 	addi	r4,r4,-25744
 2016890:	20167e40 	call	20167e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 2016894:	0001883a 	nop
}
 2016898:	0001883a 	nop
 201689c:	e037883a 	mov	sp,fp
 20168a0:	dfc00117 	ldw	ra,4(sp)
 20168a4:	df000017 	ldw	fp,0(sp)
 20168a8:	dec00204 	addi	sp,sp,8
 20168ac:	f800283a 	ret

020168b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20168b0:	defffa04 	addi	sp,sp,-24
 20168b4:	dfc00515 	stw	ra,20(sp)
 20168b8:	df000415 	stw	fp,16(sp)
 20168bc:	df000404 	addi	fp,sp,16
 20168c0:	e13ffd15 	stw	r4,-12(fp)
 20168c4:	e17ffe15 	stw	r5,-8(fp)
 20168c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20168cc:	e0bffd17 	ldw	r2,-12(fp)
 20168d0:	10800017 	ldw	r2,0(r2)
 20168d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20168d8:	e0bffc17 	ldw	r2,-16(fp)
 20168dc:	10c00a04 	addi	r3,r2,40
 20168e0:	e0bffd17 	ldw	r2,-12(fp)
 20168e4:	10800217 	ldw	r2,8(r2)
 20168e8:	100f883a 	mov	r7,r2
 20168ec:	e1bfff17 	ldw	r6,-4(fp)
 20168f0:	e17ffe17 	ldw	r5,-8(fp)
 20168f4:	1809883a 	mov	r4,r3
 20168f8:	201705c0 	call	201705c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20168fc:	e037883a 	mov	sp,fp
 2016900:	dfc00117 	ldw	ra,4(sp)
 2016904:	df000017 	ldw	fp,0(sp)
 2016908:	dec00204 	addi	sp,sp,8
 201690c:	f800283a 	ret

02016910 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2016910:	defffa04 	addi	sp,sp,-24
 2016914:	dfc00515 	stw	ra,20(sp)
 2016918:	df000415 	stw	fp,16(sp)
 201691c:	df000404 	addi	fp,sp,16
 2016920:	e13ffd15 	stw	r4,-12(fp)
 2016924:	e17ffe15 	stw	r5,-8(fp)
 2016928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201692c:	e0bffd17 	ldw	r2,-12(fp)
 2016930:	10800017 	ldw	r2,0(r2)
 2016934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2016938:	e0bffc17 	ldw	r2,-16(fp)
 201693c:	10c00a04 	addi	r3,r2,40
 2016940:	e0bffd17 	ldw	r2,-12(fp)
 2016944:	10800217 	ldw	r2,8(r2)
 2016948:	100f883a 	mov	r7,r2
 201694c:	e1bfff17 	ldw	r6,-4(fp)
 2016950:	e17ffe17 	ldw	r5,-8(fp)
 2016954:	1809883a 	mov	r4,r3
 2016958:	20173180 	call	2017318 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201695c:	e037883a 	mov	sp,fp
 2016960:	dfc00117 	ldw	ra,4(sp)
 2016964:	df000017 	ldw	fp,0(sp)
 2016968:	dec00204 	addi	sp,sp,8
 201696c:	f800283a 	ret

02016970 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2016970:	defffc04 	addi	sp,sp,-16
 2016974:	dfc00315 	stw	ra,12(sp)
 2016978:	df000215 	stw	fp,8(sp)
 201697c:	df000204 	addi	fp,sp,8
 2016980:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2016984:	e0bfff17 	ldw	r2,-4(fp)
 2016988:	10800017 	ldw	r2,0(r2)
 201698c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2016990:	e0bffe17 	ldw	r2,-8(fp)
 2016994:	10c00a04 	addi	r3,r2,40
 2016998:	e0bfff17 	ldw	r2,-4(fp)
 201699c:	10800217 	ldw	r2,8(r2)
 20169a0:	100b883a 	mov	r5,r2
 20169a4:	1809883a 	mov	r4,r3
 20169a8:	2016f040 	call	2016f04 <altera_avalon_jtag_uart_close>
}
 20169ac:	e037883a 	mov	sp,fp
 20169b0:	dfc00117 	ldw	ra,4(sp)
 20169b4:	df000017 	ldw	fp,0(sp)
 20169b8:	dec00204 	addi	sp,sp,8
 20169bc:	f800283a 	ret

020169c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20169c0:	defffa04 	addi	sp,sp,-24
 20169c4:	dfc00515 	stw	ra,20(sp)
 20169c8:	df000415 	stw	fp,16(sp)
 20169cc:	df000404 	addi	fp,sp,16
 20169d0:	e13ffd15 	stw	r4,-12(fp)
 20169d4:	e17ffe15 	stw	r5,-8(fp)
 20169d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20169dc:	e0bffd17 	ldw	r2,-12(fp)
 20169e0:	10800017 	ldw	r2,0(r2)
 20169e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20169e8:	e0bffc17 	ldw	r2,-16(fp)
 20169ec:	10800a04 	addi	r2,r2,40
 20169f0:	e1bfff17 	ldw	r6,-4(fp)
 20169f4:	e17ffe17 	ldw	r5,-8(fp)
 20169f8:	1009883a 	mov	r4,r2
 20169fc:	2016f6c0 	call	2016f6c <altera_avalon_jtag_uart_ioctl>
}
 2016a00:	e037883a 	mov	sp,fp
 2016a04:	dfc00117 	ldw	ra,4(sp)
 2016a08:	df000017 	ldw	fp,0(sp)
 2016a0c:	dec00204 	addi	sp,sp,8
 2016a10:	f800283a 	ret

02016a14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2016a14:	defff104 	addi	sp,sp,-60
 2016a18:	dfc00e15 	stw	ra,56(sp)
 2016a1c:	df000d15 	stw	fp,52(sp)
 2016a20:	df000d04 	addi	fp,sp,52
 2016a24:	e13ff915 	stw	r4,-28(fp)
 2016a28:	e17ffa15 	stw	r5,-24(fp)
 2016a2c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 2016a30:	e0bff917 	ldw	r2,-28(fp)
 2016a34:	10800c04 	addi	r2,r2,48
 2016a38:	e0bff415 	stw	r2,-48(fp)
 2016a3c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 2016a40:	e0bff80b 	ldhu	r2,-32(fp)
 2016a44:	e0fff884 	addi	r3,fp,-30
 2016a48:	180b883a 	mov	r5,r3
 2016a4c:	1009883a 	mov	r4,r2
 2016a50:	20109d00 	call	20109d0 <OSFlagCreate>
 2016a54:	1007883a 	mov	r3,r2
 2016a58:	e0bff417 	ldw	r2,-48(fp)
 2016a5c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 2016a60:	e0bff917 	ldw	r2,-28(fp)
 2016a64:	10800a04 	addi	r2,r2,40
 2016a68:	e0bff515 	stw	r2,-44(fp)
 2016a6c:	00800044 	movi	r2,1
 2016a70:	e0bff78d 	sth	r2,-34(fp)
 2016a74:	e0bff78b 	ldhu	r2,-34(fp)
 2016a78:	1009883a 	mov	r4,r2
 2016a7c:	20141b80 	call	20141b8 <OSSemCreate>
 2016a80:	1007883a 	mov	r3,r2
 2016a84:	e0bff517 	ldw	r2,-44(fp)
 2016a88:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2016a8c:	e0bff917 	ldw	r2,-28(fp)
 2016a90:	10800b04 	addi	r2,r2,44
 2016a94:	e0bff615 	stw	r2,-40(fp)
 2016a98:	00800044 	movi	r2,1
 2016a9c:	e0bff70d 	sth	r2,-36(fp)
 2016aa0:	e0bff70b 	ldhu	r2,-36(fp)
 2016aa4:	1009883a 	mov	r4,r2
 2016aa8:	20141b80 	call	20141b8 <OSSemCreate>
 2016aac:	1007883a 	mov	r3,r2
 2016ab0:	e0bff617 	ldw	r2,-40(fp)
 2016ab4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2016ab8:	e0bff917 	ldw	r2,-28(fp)
 2016abc:	00c00044 	movi	r3,1
 2016ac0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2016ac4:	e0bff917 	ldw	r2,-28(fp)
 2016ac8:	10800017 	ldw	r2,0(r2)
 2016acc:	10800104 	addi	r2,r2,4
 2016ad0:	1007883a 	mov	r3,r2
 2016ad4:	e0bff917 	ldw	r2,-28(fp)
 2016ad8:	10800817 	ldw	r2,32(r2)
 2016adc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2016ae0:	e0bffa17 	ldw	r2,-24(fp)
 2016ae4:	e0fffb17 	ldw	r3,-20(fp)
 2016ae8:	d8000015 	stw	zero,0(sp)
 2016aec:	e1fff917 	ldw	r7,-28(fp)
 2016af0:	01808074 	movhi	r6,513
 2016af4:	319ad704 	addi	r6,r6,27484
 2016af8:	180b883a 	mov	r5,r3
 2016afc:	1009883a 	mov	r4,r2
 2016b00:	20179dc0 	call	20179dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2016b04:	e0bff917 	ldw	r2,-28(fp)
 2016b08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2016b0c:	e0bff917 	ldw	r2,-28(fp)
 2016b10:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2016b14:	d0e73817 	ldw	r3,-25376(gp)
 2016b18:	e1fff917 	ldw	r7,-28(fp)
 2016b1c:	01808074 	movhi	r6,513
 2016b20:	319b8004 	addi	r6,r6,28160
 2016b24:	180b883a 	mov	r5,r3
 2016b28:	1009883a 	mov	r4,r2
 2016b2c:	20176d00 	call	20176d0 <alt_alarm_start>
 2016b30:	1000040e 	bge	r2,zero,2016b44 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2016b34:	e0fff917 	ldw	r3,-28(fp)
 2016b38:	00a00034 	movhi	r2,32768
 2016b3c:	10bfffc4 	addi	r2,r2,-1
 2016b40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2016b44:	0001883a 	nop
 2016b48:	e037883a 	mov	sp,fp
 2016b4c:	dfc00117 	ldw	ra,4(sp)
 2016b50:	df000017 	ldw	fp,0(sp)
 2016b54:	dec00204 	addi	sp,sp,8
 2016b58:	f800283a 	ret

02016b5c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2016b5c:	defff204 	addi	sp,sp,-56
 2016b60:	dfc00d15 	stw	ra,52(sp)
 2016b64:	df000c15 	stw	fp,48(sp)
 2016b68:	df000c04 	addi	fp,sp,48
 2016b6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2016b70:	e0bfff17 	ldw	r2,-4(fp)
 2016b74:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 2016b78:	e0bff617 	ldw	r2,-40(fp)
 2016b7c:	10800017 	ldw	r2,0(r2)
 2016b80:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2016b84:	e0bff717 	ldw	r2,-36(fp)
 2016b88:	10800104 	addi	r2,r2,4
 2016b8c:	10800037 	ldwio	r2,0(r2)
 2016b90:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2016b94:	e0bff817 	ldw	r2,-32(fp)
 2016b98:	1080c00c 	andi	r2,r2,768
 2016b9c:	10009126 	beq	r2,zero,2016de4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2016ba0:	e0bff817 	ldw	r2,-32(fp)
 2016ba4:	1080400c 	andi	r2,r2,256
 2016ba8:	10004726 	beq	r2,zero,2016cc8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2016bac:	00800074 	movhi	r2,1
 2016bb0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2016bb4:	e0bff617 	ldw	r2,-40(fp)
 2016bb8:	10800d17 	ldw	r2,52(r2)
 2016bbc:	10800044 	addi	r2,r2,1
 2016bc0:	1081ffcc 	andi	r2,r2,2047
 2016bc4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 2016bc8:	e0bff617 	ldw	r2,-40(fp)
 2016bcc:	10c00e17 	ldw	r3,56(r2)
 2016bd0:	e0bff917 	ldw	r2,-28(fp)
 2016bd4:	18802726 	beq	r3,r2,2016c74 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2016bd8:	e0bff717 	ldw	r2,-36(fp)
 2016bdc:	10800037 	ldwio	r2,0(r2)
 2016be0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2016be4:	e0bff417 	ldw	r2,-48(fp)
 2016be8:	10a0000c 	andi	r2,r2,32768
 2016bec:	10002326 	beq	r2,zero,2016c7c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2016bf0:	e0bff617 	ldw	r2,-40(fp)
 2016bf4:	10800d17 	ldw	r2,52(r2)
 2016bf8:	e0fff417 	ldw	r3,-48(fp)
 2016bfc:	1809883a 	mov	r4,r3
 2016c00:	e0fff617 	ldw	r3,-40(fp)
 2016c04:	1885883a 	add	r2,r3,r2
 2016c08:	10801104 	addi	r2,r2,68
 2016c0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2016c10:	e0bff617 	ldw	r2,-40(fp)
 2016c14:	10800d17 	ldw	r2,52(r2)
 2016c18:	10800044 	addi	r2,r2,1
 2016c1c:	10c1ffcc 	andi	r3,r2,2047
 2016c20:	e0bff617 	ldw	r2,-40(fp)
 2016c24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 2016c28:	e0bff617 	ldw	r2,-40(fp)
 2016c2c:	10800c17 	ldw	r2,48(r2)
 2016c30:	e0bffb15 	stw	r2,-20(fp)
 2016c34:	00800044 	movi	r2,1
 2016c38:	e0bffc0d 	sth	r2,-16(fp)
 2016c3c:	00800044 	movi	r2,1
 2016c40:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2016c44:	d0a72343 	ldbu	r2,-25459(gp)
 2016c48:	10803fcc 	andi	r2,r2,255
 2016c4c:	103fd926 	beq	r2,zero,2016bb4 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 2016c50:	e0bffc0b 	ldhu	r2,-16(fp)
 2016c54:	e0fffc83 	ldbu	r3,-14(fp)
 2016c58:	e13ffdc4 	addi	r4,fp,-9
 2016c5c:	200f883a 	mov	r7,r4
 2016c60:	180d883a 	mov	r6,r3
 2016c64:	100b883a 	mov	r5,r2
 2016c68:	e13ffb17 	ldw	r4,-20(fp)
 2016c6c:	20115ac0 	call	20115ac <OSFlagPost>
      }
 2016c70:	003fd006 	br	2016bb4 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2016c74:	0001883a 	nop
 2016c78:	00000106 	br	2016c80 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2016c7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2016c80:	e0bff417 	ldw	r2,-48(fp)
 2016c84:	10bfffec 	andhi	r2,r2,65535
 2016c88:	10000f26 	beq	r2,zero,2016cc8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2016c8c:	e0bff617 	ldw	r2,-40(fp)
 2016c90:	10c00817 	ldw	r3,32(r2)
 2016c94:	00bfff84 	movi	r2,-2
 2016c98:	1886703a 	and	r3,r3,r2
 2016c9c:	e0bff617 	ldw	r2,-40(fp)
 2016ca0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2016ca4:	e0bff717 	ldw	r2,-36(fp)
 2016ca8:	10800104 	addi	r2,r2,4
 2016cac:	1007883a 	mov	r3,r2
 2016cb0:	e0bff617 	ldw	r2,-40(fp)
 2016cb4:	10800817 	ldw	r2,32(r2)
 2016cb8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2016cbc:	e0bff717 	ldw	r2,-36(fp)
 2016cc0:	10800104 	addi	r2,r2,4
 2016cc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2016cc8:	e0bff817 	ldw	r2,-32(fp)
 2016ccc:	1080800c 	andi	r2,r2,512
 2016cd0:	103fac26 	beq	r2,zero,2016b84 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2016cd4:	e0bff817 	ldw	r2,-32(fp)
 2016cd8:	1004d43a 	srli	r2,r2,16
 2016cdc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2016ce0:	00002606 	br	2016d7c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2016ce4:	e0bff717 	ldw	r2,-36(fp)
 2016ce8:	e0fff617 	ldw	r3,-40(fp)
 2016cec:	18c01017 	ldw	r3,64(r3)
 2016cf0:	e13ff617 	ldw	r4,-40(fp)
 2016cf4:	20c7883a 	add	r3,r4,r3
 2016cf8:	18c21104 	addi	r3,r3,2116
 2016cfc:	18c00003 	ldbu	r3,0(r3)
 2016d00:	18c03fcc 	andi	r3,r3,255
 2016d04:	18c0201c 	xori	r3,r3,128
 2016d08:	18ffe004 	addi	r3,r3,-128
 2016d0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2016d10:	e0bff617 	ldw	r2,-40(fp)
 2016d14:	10801017 	ldw	r2,64(r2)
 2016d18:	10800044 	addi	r2,r2,1
 2016d1c:	10c1ffcc 	andi	r3,r2,2047
 2016d20:	e0bff617 	ldw	r2,-40(fp)
 2016d24:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 2016d28:	e0bff617 	ldw	r2,-40(fp)
 2016d2c:	10800c17 	ldw	r2,48(r2)
 2016d30:	e0bffa15 	stw	r2,-24(fp)
 2016d34:	00800084 	movi	r2,2
 2016d38:	e0bffd0d 	sth	r2,-12(fp)
 2016d3c:	00800044 	movi	r2,1
 2016d40:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2016d44:	d0a72343 	ldbu	r2,-25459(gp)
 2016d48:	10803fcc 	andi	r2,r2,255
 2016d4c:	10000826 	beq	r2,zero,2016d70 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 2016d50:	e0bffd0b 	ldhu	r2,-12(fp)
 2016d54:	e0fffd83 	ldbu	r3,-10(fp)
 2016d58:	e13ffe04 	addi	r4,fp,-8
 2016d5c:	200f883a 	mov	r7,r4
 2016d60:	180d883a 	mov	r6,r3
 2016d64:	100b883a 	mov	r5,r2
 2016d68:	e13ffa17 	ldw	r4,-24(fp)
 2016d6c:	20115ac0 	call	20115ac <OSFlagPost>

        space--;
 2016d70:	e0bff517 	ldw	r2,-44(fp)
 2016d74:	10bfffc4 	addi	r2,r2,-1
 2016d78:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2016d7c:	e0bff517 	ldw	r2,-44(fp)
 2016d80:	10000526 	beq	r2,zero,2016d98 <altera_avalon_jtag_uart_irq+0x23c>
 2016d84:	e0bff617 	ldw	r2,-40(fp)
 2016d88:	10c01017 	ldw	r3,64(r2)
 2016d8c:	e0bff617 	ldw	r2,-40(fp)
 2016d90:	10800f17 	ldw	r2,60(r2)
 2016d94:	18bfd31e 	bne	r3,r2,2016ce4 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2016d98:	e0bff517 	ldw	r2,-44(fp)
 2016d9c:	103f7926 	beq	r2,zero,2016b84 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2016da0:	e0bff617 	ldw	r2,-40(fp)
 2016da4:	10c00817 	ldw	r3,32(r2)
 2016da8:	00bfff44 	movi	r2,-3
 2016dac:	1886703a 	and	r3,r3,r2
 2016db0:	e0bff617 	ldw	r2,-40(fp)
 2016db4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2016db8:	e0bff617 	ldw	r2,-40(fp)
 2016dbc:	10800017 	ldw	r2,0(r2)
 2016dc0:	10800104 	addi	r2,r2,4
 2016dc4:	1007883a 	mov	r3,r2
 2016dc8:	e0bff617 	ldw	r2,-40(fp)
 2016dcc:	10800817 	ldw	r2,32(r2)
 2016dd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2016dd4:	e0bff717 	ldw	r2,-36(fp)
 2016dd8:	10800104 	addi	r2,r2,4
 2016ddc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2016de0:	003f6806 	br	2016b84 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2016de4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2016de8:	0001883a 	nop
 2016dec:	e037883a 	mov	sp,fp
 2016df0:	dfc00117 	ldw	ra,4(sp)
 2016df4:	df000017 	ldw	fp,0(sp)
 2016df8:	dec00204 	addi	sp,sp,8
 2016dfc:	f800283a 	ret

02016e00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2016e00:	defff904 	addi	sp,sp,-28
 2016e04:	dfc00615 	stw	ra,24(sp)
 2016e08:	df000515 	stw	fp,20(sp)
 2016e0c:	df000504 	addi	fp,sp,20
 2016e10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2016e14:	e0bfff17 	ldw	r2,-4(fp)
 2016e18:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2016e1c:	e0bffb17 	ldw	r2,-20(fp)
 2016e20:	10800017 	ldw	r2,0(r2)
 2016e24:	10800104 	addi	r2,r2,4
 2016e28:	10800037 	ldwio	r2,0(r2)
 2016e2c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2016e30:	e0bffc17 	ldw	r2,-16(fp)
 2016e34:	1081000c 	andi	r2,r2,1024
 2016e38:	10000b26 	beq	r2,zero,2016e68 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2016e3c:	e0bffb17 	ldw	r2,-20(fp)
 2016e40:	10800017 	ldw	r2,0(r2)
 2016e44:	10800104 	addi	r2,r2,4
 2016e48:	1007883a 	mov	r3,r2
 2016e4c:	e0bffb17 	ldw	r2,-20(fp)
 2016e50:	10800817 	ldw	r2,32(r2)
 2016e54:	10810014 	ori	r2,r2,1024
 2016e58:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2016e5c:	e0bffb17 	ldw	r2,-20(fp)
 2016e60:	10000915 	stw	zero,36(r2)
 2016e64:	00002106 	br	2016eec <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2016e68:	e0bffb17 	ldw	r2,-20(fp)
 2016e6c:	10c00917 	ldw	r3,36(r2)
 2016e70:	00a00034 	movhi	r2,32768
 2016e74:	10bfff04 	addi	r2,r2,-4
 2016e78:	10c01c36 	bltu	r2,r3,2016eec <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 2016e7c:	e0bffb17 	ldw	r2,-20(fp)
 2016e80:	10800917 	ldw	r2,36(r2)
 2016e84:	10c00044 	addi	r3,r2,1
 2016e88:	e0bffb17 	ldw	r2,-20(fp)
 2016e8c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 2016e90:	e0bffb17 	ldw	r2,-20(fp)
 2016e94:	10c00917 	ldw	r3,36(r2)
 2016e98:	e0bffb17 	ldw	r2,-20(fp)
 2016e9c:	10800117 	ldw	r2,4(r2)
 2016ea0:	18801236 	bltu	r3,r2,2016eec <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 2016ea4:	e0bffb17 	ldw	r2,-20(fp)
 2016ea8:	10800c17 	ldw	r2,48(r2)
 2016eac:	e0bffd15 	stw	r2,-12(fp)
 2016eb0:	00800104 	movi	r2,4
 2016eb4:	e0bffe0d 	sth	r2,-8(fp)
 2016eb8:	00800044 	movi	r2,1
 2016ebc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2016ec0:	d0a72343 	ldbu	r2,-25459(gp)
 2016ec4:	10803fcc 	andi	r2,r2,255
 2016ec8:	10000826 	beq	r2,zero,2016eec <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 2016ecc:	e0bffe0b 	ldhu	r2,-8(fp)
 2016ed0:	e0fffe83 	ldbu	r3,-6(fp)
 2016ed4:	e13ffec4 	addi	r4,fp,-5
 2016ed8:	200f883a 	mov	r7,r4
 2016edc:	180d883a 	mov	r6,r3
 2016ee0:	100b883a 	mov	r5,r2
 2016ee4:	e13ffd17 	ldw	r4,-12(fp)
 2016ee8:	20115ac0 	call	20115ac <OSFlagPost>
 2016eec:	d0a73817 	ldw	r2,-25376(gp)
    }
  }

  return alt_ticks_per_second();
}
 2016ef0:	e037883a 	mov	sp,fp
 2016ef4:	dfc00117 	ldw	ra,4(sp)
 2016ef8:	df000017 	ldw	fp,0(sp)
 2016efc:	dec00204 	addi	sp,sp,8
 2016f00:	f800283a 	ret

02016f04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2016f04:	defffd04 	addi	sp,sp,-12
 2016f08:	df000215 	stw	fp,8(sp)
 2016f0c:	df000204 	addi	fp,sp,8
 2016f10:	e13ffe15 	stw	r4,-8(fp)
 2016f14:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2016f18:	00000506 	br	2016f30 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2016f1c:	e0bfff17 	ldw	r2,-4(fp)
 2016f20:	1090000c 	andi	r2,r2,16384
 2016f24:	10000226 	beq	r2,zero,2016f30 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2016f28:	00bffd44 	movi	r2,-11
 2016f2c:	00000b06 	br	2016f5c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2016f30:	e0bffe17 	ldw	r2,-8(fp)
 2016f34:	10c01017 	ldw	r3,64(r2)
 2016f38:	e0bffe17 	ldw	r2,-8(fp)
 2016f3c:	10800f17 	ldw	r2,60(r2)
 2016f40:	18800526 	beq	r3,r2,2016f58 <altera_avalon_jtag_uart_close+0x54>
 2016f44:	e0bffe17 	ldw	r2,-8(fp)
 2016f48:	10c00917 	ldw	r3,36(r2)
 2016f4c:	e0bffe17 	ldw	r2,-8(fp)
 2016f50:	10800117 	ldw	r2,4(r2)
 2016f54:	18bff136 	bltu	r3,r2,2016f1c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2016f58:	0005883a 	mov	r2,zero
}
 2016f5c:	e037883a 	mov	sp,fp
 2016f60:	df000017 	ldw	fp,0(sp)
 2016f64:	dec00104 	addi	sp,sp,4
 2016f68:	f800283a 	ret

02016f6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2016f6c:	defffa04 	addi	sp,sp,-24
 2016f70:	df000515 	stw	fp,20(sp)
 2016f74:	df000504 	addi	fp,sp,20
 2016f78:	e13ffd15 	stw	r4,-12(fp)
 2016f7c:	e17ffe15 	stw	r5,-8(fp)
 2016f80:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2016f84:	00bff9c4 	movi	r2,-25
 2016f88:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2016f8c:	e0bffe17 	ldw	r2,-8(fp)
 2016f90:	10da8060 	cmpeqi	r3,r2,27137
 2016f94:	1800031e 	bne	r3,zero,2016fa4 <altera_avalon_jtag_uart_ioctl+0x38>
 2016f98:	109a80a0 	cmpeqi	r2,r2,27138
 2016f9c:	1000181e 	bne	r2,zero,2017000 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2016fa0:	00002906 	br	2017048 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2016fa4:	e0bffd17 	ldw	r2,-12(fp)
 2016fa8:	10c00117 	ldw	r3,4(r2)
 2016fac:	00a00034 	movhi	r2,32768
 2016fb0:	10bfffc4 	addi	r2,r2,-1
 2016fb4:	18802126 	beq	r3,r2,201703c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2016fb8:	e0bfff17 	ldw	r2,-4(fp)
 2016fbc:	10800017 	ldw	r2,0(r2)
 2016fc0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2016fc4:	e0bffc17 	ldw	r2,-16(fp)
 2016fc8:	10800090 	cmplti	r2,r2,2
 2016fcc:	1000061e 	bne	r2,zero,2016fe8 <altera_avalon_jtag_uart_ioctl+0x7c>
 2016fd0:	e0fffc17 	ldw	r3,-16(fp)
 2016fd4:	00a00034 	movhi	r2,32768
 2016fd8:	10bfffc4 	addi	r2,r2,-1
 2016fdc:	18800226 	beq	r3,r2,2016fe8 <altera_avalon_jtag_uart_ioctl+0x7c>
 2016fe0:	e0bffc17 	ldw	r2,-16(fp)
 2016fe4:	00000206 	br	2016ff0 <altera_avalon_jtag_uart_ioctl+0x84>
 2016fe8:	00a00034 	movhi	r2,32768
 2016fec:	10bfff84 	addi	r2,r2,-2
 2016ff0:	e0fffd17 	ldw	r3,-12(fp)
 2016ff4:	18800115 	stw	r2,4(r3)
      rc = 0;
 2016ff8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2016ffc:	00000f06 	br	201703c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2017000:	e0bffd17 	ldw	r2,-12(fp)
 2017004:	10c00117 	ldw	r3,4(r2)
 2017008:	00a00034 	movhi	r2,32768
 201700c:	10bfffc4 	addi	r2,r2,-1
 2017010:	18800c26 	beq	r3,r2,2017044 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2017014:	e0bffd17 	ldw	r2,-12(fp)
 2017018:	10c00917 	ldw	r3,36(r2)
 201701c:	e0bffd17 	ldw	r2,-12(fp)
 2017020:	10800117 	ldw	r2,4(r2)
 2017024:	1885803a 	cmpltu	r2,r3,r2
 2017028:	10c03fcc 	andi	r3,r2,255
 201702c:	e0bfff17 	ldw	r2,-4(fp)
 2017030:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2017034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2017038:	00000206 	br	2017044 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201703c:	0001883a 	nop
 2017040:	00000106 	br	2017048 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2017044:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2017048:	e0bffb17 	ldw	r2,-20(fp)
}
 201704c:	e037883a 	mov	sp,fp
 2017050:	df000017 	ldw	fp,0(sp)
 2017054:	dec00104 	addi	sp,sp,4
 2017058:	f800283a 	ret

0201705c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201705c:	deffed04 	addi	sp,sp,-76
 2017060:	dfc01215 	stw	ra,72(sp)
 2017064:	df001115 	stw	fp,68(sp)
 2017068:	df001104 	addi	fp,sp,68
 201706c:	e13ffc15 	stw	r4,-16(fp)
 2017070:	e17ffd15 	stw	r5,-12(fp)
 2017074:	e1bffe15 	stw	r6,-8(fp)
 2017078:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201707c:	e0bffd17 	ldw	r2,-12(fp)
 2017080:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 2017084:	e0bffc17 	ldw	r2,-16(fp)
 2017088:	10800a17 	ldw	r2,40(r2)
 201708c:	e0bff815 	stw	r2,-32(fp)
 2017090:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 2017094:	e0bff90b 	ldhu	r2,-28(fp)
 2017098:	e0fffb04 	addi	r3,fp,-20
 201709c:	180d883a 	mov	r6,r3
 20170a0:	100b883a 	mov	r5,r2
 20170a4:	e13ff817 	ldw	r4,-32(fp)
 20170a8:	20144d00 	call	20144d0 <OSSemPend>

  while (space > 0)
 20170ac:	00006106 	br	2017234 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20170b0:	e0bffc17 	ldw	r2,-16(fp)
 20170b4:	10800d17 	ldw	r2,52(r2)
 20170b8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 20170bc:	e0bffc17 	ldw	r2,-16(fp)
 20170c0:	10800e17 	ldw	r2,56(r2)
 20170c4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 20170c8:	e0fff317 	ldw	r3,-52(fp)
 20170cc:	e0bff417 	ldw	r2,-48(fp)
 20170d0:	18800536 	bltu	r3,r2,20170e8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 20170d4:	e0fff317 	ldw	r3,-52(fp)
 20170d8:	e0bff417 	ldw	r2,-48(fp)
 20170dc:	1885c83a 	sub	r2,r3,r2
 20170e0:	e0bff115 	stw	r2,-60(fp)
 20170e4:	00000406 	br	20170f8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20170e8:	00c20004 	movi	r3,2048
 20170ec:	e0bff417 	ldw	r2,-48(fp)
 20170f0:	1885c83a 	sub	r2,r3,r2
 20170f4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20170f8:	e0bff117 	ldw	r2,-60(fp)
 20170fc:	10001e26 	beq	r2,zero,2017178 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 2017100:	e0fffe17 	ldw	r3,-8(fp)
 2017104:	e0bff117 	ldw	r2,-60(fp)
 2017108:	1880022e 	bgeu	r3,r2,2017114 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201710c:	e0bffe17 	ldw	r2,-8(fp)
 2017110:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2017114:	e0bffc17 	ldw	r2,-16(fp)
 2017118:	10c01104 	addi	r3,r2,68
 201711c:	e0bff417 	ldw	r2,-48(fp)
 2017120:	1885883a 	add	r2,r3,r2
 2017124:	e1bff117 	ldw	r6,-60(fp)
 2017128:	100b883a 	mov	r5,r2
 201712c:	e13ff017 	ldw	r4,-64(fp)
 2017130:	200653c0 	call	200653c <memcpy>
      ptr   += n;
 2017134:	e0fff017 	ldw	r3,-64(fp)
 2017138:	e0bff117 	ldw	r2,-60(fp)
 201713c:	1885883a 	add	r2,r3,r2
 2017140:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 2017144:	e0fffe17 	ldw	r3,-8(fp)
 2017148:	e0bff117 	ldw	r2,-60(fp)
 201714c:	1885c83a 	sub	r2,r3,r2
 2017150:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017154:	e0fff417 	ldw	r3,-48(fp)
 2017158:	e0bff117 	ldw	r2,-60(fp)
 201715c:	1885883a 	add	r2,r3,r2
 2017160:	10c1ffcc 	andi	r3,r2,2047
 2017164:	e0bffc17 	ldw	r2,-16(fp)
 2017168:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201716c:	e0bffe17 	ldw	r2,-8(fp)
 2017170:	00bfcf16 	blt	zero,r2,20170b0 <altera_avalon_jtag_uart_read+0x54>
 2017174:	00000106 	br	201717c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2017178:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201717c:	e0fff017 	ldw	r3,-64(fp)
 2017180:	e0bffd17 	ldw	r2,-12(fp)
 2017184:	18802e1e 	bne	r3,r2,2017240 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2017188:	e0bfff17 	ldw	r2,-4(fp)
 201718c:	1090000c 	andi	r2,r2,16384
 2017190:	10002d1e 	bne	r2,zero,2017248 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 2017194:	d0a72343 	ldbu	r2,-25459(gp)
 2017198:	10803fcc 	andi	r2,r2,255
 201719c:	10800058 	cmpnei	r2,r2,1
 20171a0:	1000161e 	bne	r2,zero,20171fc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 20171a4:	e0bffc17 	ldw	r2,-16(fp)
 20171a8:	10800c17 	ldw	r2,48(r2)
 20171ac:	e0bff215 	stw	r2,-56(fp)
 20171b0:	00800144 	movi	r2,5
 20171b4:	e0bff98d 	sth	r2,-26(fp)
 20171b8:	00bfe0c4 	movi	r2,-125
 20171bc:	e0bffa05 	stb	r2,-24(fp)
 20171c0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 20171c4:	d0a72343 	ldbu	r2,-25459(gp)
 20171c8:	10803fcc 	andi	r2,r2,255
 20171cc:	10001526 	beq	r2,zero,2017224 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 20171d0:	e0fff98b 	ldhu	r3,-26(fp)
 20171d4:	e13ffa03 	ldbu	r4,-24(fp)
 20171d8:	e17ffa8b 	ldhu	r5,-22(fp)
 20171dc:	e0bffb44 	addi	r2,fp,-19
 20171e0:	d8800015 	stw	r2,0(sp)
 20171e4:	280f883a 	mov	r7,r5
 20171e8:	200d883a 	mov	r6,r4
 20171ec:	180b883a 	mov	r5,r3
 20171f0:	e13ff217 	ldw	r4,-56(fp)
 20171f4:	2010f940 	call	2010f94 <OSFlagPend>
 20171f8:	00000a06 	br	2017224 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20171fc:	0001883a 	nop
 2017200:	e0bffc17 	ldw	r2,-16(fp)
 2017204:	10c00d17 	ldw	r3,52(r2)
 2017208:	e0bff317 	ldw	r2,-52(fp)
 201720c:	1880051e 	bne	r3,r2,2017224 <altera_avalon_jtag_uart_read+0x1c8>
 2017210:	e0bffc17 	ldw	r2,-16(fp)
 2017214:	10c00917 	ldw	r3,36(r2)
 2017218:	e0bffc17 	ldw	r2,-16(fp)
 201721c:	10800117 	ldw	r2,4(r2)
 2017220:	18bff736 	bltu	r3,r2,2017200 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2017224:	e0bffc17 	ldw	r2,-16(fp)
 2017228:	10c00d17 	ldw	r3,52(r2)
 201722c:	e0bff317 	ldw	r2,-52(fp)
 2017230:	18800726 	beq	r3,r2,2017250 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2017234:	e0bffe17 	ldw	r2,-8(fp)
 2017238:	00bf9d16 	blt	zero,r2,20170b0 <altera_avalon_jtag_uart_read+0x54>
 201723c:	00000506 	br	2017254 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2017240:	0001883a 	nop
 2017244:	00000306 	br	2017254 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2017248:	0001883a 	nop
 201724c:	00000106 	br	2017254 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2017250:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2017254:	e0bffc17 	ldw	r2,-16(fp)
 2017258:	10800a17 	ldw	r2,40(r2)
 201725c:	1009883a 	mov	r4,r2
 2017260:	20148480 	call	2014848 <OSSemPost>

  if (ptr != buffer)
 2017264:	e0fff017 	ldw	r3,-64(fp)
 2017268:	e0bffd17 	ldw	r2,-12(fp)
 201726c:	18801826 	beq	r3,r2,20172d0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017270:	0005303a 	rdctl	r2,status
 2017274:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017278:	e0fff717 	ldw	r3,-36(fp)
 201727c:	00bfff84 	movi	r2,-2
 2017280:	1884703a 	and	r2,r3,r2
 2017284:	1001703a 	wrctl	status,r2
  
  return context;
 2017288:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201728c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017290:	e0bffc17 	ldw	r2,-16(fp)
 2017294:	10800817 	ldw	r2,32(r2)
 2017298:	10c00054 	ori	r3,r2,1
 201729c:	e0bffc17 	ldw	r2,-16(fp)
 20172a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20172a4:	e0bffc17 	ldw	r2,-16(fp)
 20172a8:	10800017 	ldw	r2,0(r2)
 20172ac:	10800104 	addi	r2,r2,4
 20172b0:	1007883a 	mov	r3,r2
 20172b4:	e0bffc17 	ldw	r2,-16(fp)
 20172b8:	10800817 	ldw	r2,32(r2)
 20172bc:	18800035 	stwio	r2,0(r3)
 20172c0:	e0bff617 	ldw	r2,-40(fp)
 20172c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20172c8:	e0bff517 	ldw	r2,-44(fp)
 20172cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20172d0:	e0fff017 	ldw	r3,-64(fp)
 20172d4:	e0bffd17 	ldw	r2,-12(fp)
 20172d8:	18800426 	beq	r3,r2,20172ec <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 20172dc:	e0fff017 	ldw	r3,-64(fp)
 20172e0:	e0bffd17 	ldw	r2,-12(fp)
 20172e4:	1885c83a 	sub	r2,r3,r2
 20172e8:	00000606 	br	2017304 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 20172ec:	e0bfff17 	ldw	r2,-4(fp)
 20172f0:	1090000c 	andi	r2,r2,16384
 20172f4:	10000226 	beq	r2,zero,2017300 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 20172f8:	00bffd44 	movi	r2,-11
 20172fc:	00000106 	br	2017304 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 2017300:	00bffec4 	movi	r2,-5
}
 2017304:	e037883a 	mov	sp,fp
 2017308:	dfc00117 	ldw	ra,4(sp)
 201730c:	df000017 	ldw	fp,0(sp)
 2017310:	dec00204 	addi	sp,sp,8
 2017314:	f800283a 	ret

02017318 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2017318:	deffed04 	addi	sp,sp,-76
 201731c:	dfc01215 	stw	ra,72(sp)
 2017320:	df001115 	stw	fp,68(sp)
 2017324:	df001104 	addi	fp,sp,68
 2017328:	e13ffc15 	stw	r4,-16(fp)
 201732c:	e17ffd15 	stw	r5,-12(fp)
 2017330:	e1bffe15 	stw	r6,-8(fp)
 2017334:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2017338:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201733c:	e0bffd17 	ldw	r2,-12(fp)
 2017340:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2017344:	e0bffc17 	ldw	r2,-16(fp)
 2017348:	10800b17 	ldw	r2,44(r2)
 201734c:	e0bff815 	stw	r2,-32(fp)
 2017350:	e03ff90d 	sth	zero,-28(fp)
 2017354:	e0bff90b 	ldhu	r2,-28(fp)
 2017358:	e0fffb44 	addi	r3,fp,-19
 201735c:	180d883a 	mov	r6,r3
 2017360:	100b883a 	mov	r5,r2
 2017364:	e13ff817 	ldw	r4,-32(fp)
 2017368:	20144d00 	call	20144d0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201736c:	00003706 	br	201744c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2017370:	e0bffc17 	ldw	r2,-16(fp)
 2017374:	10800f17 	ldw	r2,60(r2)
 2017378:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201737c:	e0bffc17 	ldw	r2,-16(fp)
 2017380:	10801017 	ldw	r2,64(r2)
 2017384:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 2017388:	e0fff417 	ldw	r3,-48(fp)
 201738c:	e0bff017 	ldw	r2,-64(fp)
 2017390:	1880062e 	bgeu	r3,r2,20173ac <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 2017394:	e0fff017 	ldw	r3,-64(fp)
 2017398:	e0bff417 	ldw	r2,-48(fp)
 201739c:	1885c83a 	sub	r2,r3,r2
 20173a0:	10bfffc4 	addi	r2,r2,-1
 20173a4:	e0bff115 	stw	r2,-60(fp)
 20173a8:	00000b06 	br	20173d8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 20173ac:	e0bff017 	ldw	r2,-64(fp)
 20173b0:	10000526 	beq	r2,zero,20173c8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20173b4:	00c20004 	movi	r3,2048
 20173b8:	e0bff417 	ldw	r2,-48(fp)
 20173bc:	1885c83a 	sub	r2,r3,r2
 20173c0:	e0bff115 	stw	r2,-60(fp)
 20173c4:	00000406 	br	20173d8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20173c8:	00c1ffc4 	movi	r3,2047
 20173cc:	e0bff417 	ldw	r2,-48(fp)
 20173d0:	1885c83a 	sub	r2,r3,r2
 20173d4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20173d8:	e0bff117 	ldw	r2,-60(fp)
 20173dc:	10001e26 	beq	r2,zero,2017458 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 20173e0:	e0fffe17 	ldw	r3,-8(fp)
 20173e4:	e0bff117 	ldw	r2,-60(fp)
 20173e8:	1880022e 	bgeu	r3,r2,20173f4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 20173ec:	e0bffe17 	ldw	r2,-8(fp)
 20173f0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20173f4:	e0bffc17 	ldw	r2,-16(fp)
 20173f8:	10c21104 	addi	r3,r2,2116
 20173fc:	e0bff417 	ldw	r2,-48(fp)
 2017400:	1885883a 	add	r2,r3,r2
 2017404:	e1bff117 	ldw	r6,-60(fp)
 2017408:	e17ffd17 	ldw	r5,-12(fp)
 201740c:	1009883a 	mov	r4,r2
 2017410:	200653c0 	call	200653c <memcpy>
      ptr   += n;
 2017414:	e0fffd17 	ldw	r3,-12(fp)
 2017418:	e0bff117 	ldw	r2,-60(fp)
 201741c:	1885883a 	add	r2,r3,r2
 2017420:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2017424:	e0fffe17 	ldw	r3,-8(fp)
 2017428:	e0bff117 	ldw	r2,-60(fp)
 201742c:	1885c83a 	sub	r2,r3,r2
 2017430:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017434:	e0fff417 	ldw	r3,-48(fp)
 2017438:	e0bff117 	ldw	r2,-60(fp)
 201743c:	1885883a 	add	r2,r3,r2
 2017440:	10c1ffcc 	andi	r3,r2,2047
 2017444:	e0bffc17 	ldw	r2,-16(fp)
 2017448:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201744c:	e0bffe17 	ldw	r2,-8(fp)
 2017450:	00bfc716 	blt	zero,r2,2017370 <altera_avalon_jtag_uart_write+0x58>
 2017454:	00000106 	br	201745c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2017458:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201745c:	0005303a 	rdctl	r2,status
 2017460:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017464:	e0fff717 	ldw	r3,-36(fp)
 2017468:	00bfff84 	movi	r2,-2
 201746c:	1884703a 	and	r2,r3,r2
 2017470:	1001703a 	wrctl	status,r2
  
  return context;
 2017474:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2017478:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201747c:	e0bffc17 	ldw	r2,-16(fp)
 2017480:	10800817 	ldw	r2,32(r2)
 2017484:	10c00094 	ori	r3,r2,2
 2017488:	e0bffc17 	ldw	r2,-16(fp)
 201748c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017490:	e0bffc17 	ldw	r2,-16(fp)
 2017494:	10800017 	ldw	r2,0(r2)
 2017498:	10800104 	addi	r2,r2,4
 201749c:	1007883a 	mov	r3,r2
 20174a0:	e0bffc17 	ldw	r2,-16(fp)
 20174a4:	10800817 	ldw	r2,32(r2)
 20174a8:	18800035 	stwio	r2,0(r3)
 20174ac:	e0bff617 	ldw	r2,-40(fp)
 20174b0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20174b4:	e0bff317 	ldw	r2,-52(fp)
 20174b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20174bc:	e0bffe17 	ldw	r2,-8(fp)
 20174c0:	00802a0e 	bge	zero,r2,201756c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 20174c4:	e0bfff17 	ldw	r2,-4(fp)
 20174c8:	1090000c 	andi	r2,r2,16384
 20174cc:	10002a1e 	bne	r2,zero,2017578 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 20174d0:	d0a72343 	ldbu	r2,-25459(gp)
 20174d4:	10803fcc 	andi	r2,r2,255
 20174d8:	10800058 	cmpnei	r2,r2,1
 20174dc:	1000161e 	bne	r2,zero,2017538 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 20174e0:	e0bffc17 	ldw	r2,-16(fp)
 20174e4:	10800c17 	ldw	r2,48(r2)
 20174e8:	e0bff515 	stw	r2,-44(fp)
 20174ec:	00800184 	movi	r2,6
 20174f0:	e0bff98d 	sth	r2,-26(fp)
 20174f4:	00bfe0c4 	movi	r2,-125
 20174f8:	e0bffa05 	stb	r2,-24(fp)
 20174fc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2017500:	d0a72343 	ldbu	r2,-25459(gp)
 2017504:	10803fcc 	andi	r2,r2,255
 2017508:	10001526 	beq	r2,zero,2017560 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201750c:	e0fff98b 	ldhu	r3,-26(fp)
 2017510:	e13ffa03 	ldbu	r4,-24(fp)
 2017514:	e17ffa8b 	ldhu	r5,-22(fp)
 2017518:	e0bffb04 	addi	r2,fp,-20
 201751c:	d8800015 	stw	r2,0(sp)
 2017520:	280f883a 	mov	r7,r5
 2017524:	200d883a 	mov	r6,r4
 2017528:	180b883a 	mov	r5,r3
 201752c:	e13ff517 	ldw	r4,-44(fp)
 2017530:	2010f940 	call	2010f94 <OSFlagPend>
 2017534:	00000a06 	br	2017560 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2017538:	0001883a 	nop
 201753c:	e0bffc17 	ldw	r2,-16(fp)
 2017540:	10c01017 	ldw	r3,64(r2)
 2017544:	e0bff017 	ldw	r2,-64(fp)
 2017548:	1880051e 	bne	r3,r2,2017560 <altera_avalon_jtag_uart_write+0x248>
 201754c:	e0bffc17 	ldw	r2,-16(fp)
 2017550:	10c00917 	ldw	r3,36(r2)
 2017554:	e0bffc17 	ldw	r2,-16(fp)
 2017558:	10800117 	ldw	r2,4(r2)
 201755c:	18bff736 	bltu	r3,r2,201753c <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2017560:	e0bffc17 	ldw	r2,-16(fp)
 2017564:	10800917 	ldw	r2,36(r2)
 2017568:	1000051e 	bne	r2,zero,2017580 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201756c:	e0bffe17 	ldw	r2,-8(fp)
 2017570:	00bfb616 	blt	zero,r2,201744c <altera_avalon_jtag_uart_write+0x134>
 2017574:	00000306 	br	2017584 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2017578:	0001883a 	nop
 201757c:	00000106 	br	2017584 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2017580:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2017584:	e0bffc17 	ldw	r2,-16(fp)
 2017588:	10800b17 	ldw	r2,44(r2)
 201758c:	1009883a 	mov	r4,r2
 2017590:	20148480 	call	2014848 <OSSemPost>

  if (ptr != start)
 2017594:	e0fffd17 	ldw	r3,-12(fp)
 2017598:	e0bff217 	ldw	r2,-56(fp)
 201759c:	18800426 	beq	r3,r2,20175b0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 20175a0:	e0fffd17 	ldw	r3,-12(fp)
 20175a4:	e0bff217 	ldw	r2,-56(fp)
 20175a8:	1885c83a 	sub	r2,r3,r2
 20175ac:	00000606 	br	20175c8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 20175b0:	e0bfff17 	ldw	r2,-4(fp)
 20175b4:	1090000c 	andi	r2,r2,16384
 20175b8:	10000226 	beq	r2,zero,20175c4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 20175bc:	00bffd44 	movi	r2,-11
 20175c0:	00000106 	br	20175c8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20175c4:	00bffec4 	movi	r2,-5
}
 20175c8:	e037883a 	mov	sp,fp
 20175cc:	dfc00117 	ldw	ra,4(sp)
 20175d0:	df000017 	ldw	fp,0(sp)
 20175d4:	dec00204 	addi	sp,sp,8
 20175d8:	f800283a 	ret

020175dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20175dc:	defffa04 	addi	sp,sp,-24
 20175e0:	dfc00515 	stw	ra,20(sp)
 20175e4:	df000415 	stw	fp,16(sp)
 20175e8:	df000404 	addi	fp,sp,16
 20175ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20175f0:	0007883a 	mov	r3,zero
 20175f4:	e0bfff17 	ldw	r2,-4(fp)
 20175f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20175fc:	e0bfff17 	ldw	r2,-4(fp)
 2017600:	10800104 	addi	r2,r2,4
 2017604:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017608:	0005303a 	rdctl	r2,status
 201760c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017610:	e0fffd17 	ldw	r3,-12(fp)
 2017614:	00bfff84 	movi	r2,-2
 2017618:	1884703a 	and	r2,r3,r2
 201761c:	1001703a 	wrctl	status,r2
  
  return context;
 2017620:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2017624:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2017628:	20180fc0 	call	20180fc <alt_tick>
 201762c:	e0bffc17 	ldw	r2,-16(fp)
 2017630:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017634:	e0bffe17 	ldw	r2,-8(fp)
 2017638:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201763c:	0001883a 	nop
 2017640:	e037883a 	mov	sp,fp
 2017644:	dfc00117 	ldw	ra,4(sp)
 2017648:	df000017 	ldw	fp,0(sp)
 201764c:	dec00204 	addi	sp,sp,8
 2017650:	f800283a 	ret

02017654 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2017654:	defff804 	addi	sp,sp,-32
 2017658:	dfc00715 	stw	ra,28(sp)
 201765c:	df000615 	stw	fp,24(sp)
 2017660:	df000604 	addi	fp,sp,24
 2017664:	e13ffc15 	stw	r4,-16(fp)
 2017668:	e17ffd15 	stw	r5,-12(fp)
 201766c:	e1bffe15 	stw	r6,-8(fp)
 2017670:	e1ffff15 	stw	r7,-4(fp)
 2017674:	e0bfff17 	ldw	r2,-4(fp)
 2017678:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201767c:	d0a73817 	ldw	r2,-25376(gp)
 2017680:	1000021e 	bne	r2,zero,201768c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2017684:	e0bffb17 	ldw	r2,-20(fp)
 2017688:	d0a73815 	stw	r2,-25376(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201768c:	e0bffc17 	ldw	r2,-16(fp)
 2017690:	10800104 	addi	r2,r2,4
 2017694:	00c001c4 	movi	r3,7
 2017698:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201769c:	d8000015 	stw	zero,0(sp)
 20176a0:	e1fffc17 	ldw	r7,-16(fp)
 20176a4:	01808074 	movhi	r6,513
 20176a8:	319d7704 	addi	r6,r6,30172
 20176ac:	e17ffe17 	ldw	r5,-8(fp)
 20176b0:	e13ffd17 	ldw	r4,-12(fp)
 20176b4:	20179dc0 	call	20179dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 20176b8:	0001883a 	nop
 20176bc:	e037883a 	mov	sp,fp
 20176c0:	dfc00117 	ldw	ra,4(sp)
 20176c4:	df000017 	ldw	fp,0(sp)
 20176c8:	dec00204 	addi	sp,sp,8
 20176cc:	f800283a 	ret

020176d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20176d0:	defff504 	addi	sp,sp,-44
 20176d4:	df000a15 	stw	fp,40(sp)
 20176d8:	df000a04 	addi	fp,sp,40
 20176dc:	e13ffc15 	stw	r4,-16(fp)
 20176e0:	e17ffd15 	stw	r5,-12(fp)
 20176e4:	e1bffe15 	stw	r6,-8(fp)
 20176e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20176ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20176f0:	d0a73817 	ldw	r2,-25376(gp)
  
  if (alt_ticks_per_second ())
 20176f4:	10003c26 	beq	r2,zero,20177e8 <alt_alarm_start+0x118>
  {
    if (alarm)
 20176f8:	e0bffc17 	ldw	r2,-16(fp)
 20176fc:	10003826 	beq	r2,zero,20177e0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2017700:	e0bffc17 	ldw	r2,-16(fp)
 2017704:	e0fffe17 	ldw	r3,-8(fp)
 2017708:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201770c:	e0bffc17 	ldw	r2,-16(fp)
 2017710:	e0ffff17 	ldw	r3,-4(fp)
 2017714:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017718:	0005303a 	rdctl	r2,status
 201771c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017720:	e0fff917 	ldw	r3,-28(fp)
 2017724:	00bfff84 	movi	r2,-2
 2017728:	1884703a 	and	r2,r3,r2
 201772c:	1001703a 	wrctl	status,r2
  
  return context;
 2017730:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2017734:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2017738:	d0a73917 	ldw	r2,-25372(gp)
      
      current_nticks = alt_nticks();
 201773c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2017740:	e0fffd17 	ldw	r3,-12(fp)
 2017744:	e0bff617 	ldw	r2,-40(fp)
 2017748:	1885883a 	add	r2,r3,r2
 201774c:	10c00044 	addi	r3,r2,1
 2017750:	e0bffc17 	ldw	r2,-16(fp)
 2017754:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2017758:	e0bffc17 	ldw	r2,-16(fp)
 201775c:	10c00217 	ldw	r3,8(r2)
 2017760:	e0bff617 	ldw	r2,-40(fp)
 2017764:	1880042e 	bgeu	r3,r2,2017778 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2017768:	e0bffc17 	ldw	r2,-16(fp)
 201776c:	00c00044 	movi	r3,1
 2017770:	10c00405 	stb	r3,16(r2)
 2017774:	00000206 	br	2017780 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2017778:	e0bffc17 	ldw	r2,-16(fp)
 201777c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2017780:	e0bffc17 	ldw	r2,-16(fp)
 2017784:	d0e02d04 	addi	r3,gp,-32588
 2017788:	e0fffa15 	stw	r3,-24(fp)
 201778c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2017790:	e0bffb17 	ldw	r2,-20(fp)
 2017794:	e0fffa17 	ldw	r3,-24(fp)
 2017798:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201779c:	e0bffa17 	ldw	r2,-24(fp)
 20177a0:	10c00017 	ldw	r3,0(r2)
 20177a4:	e0bffb17 	ldw	r2,-20(fp)
 20177a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20177ac:	e0bffa17 	ldw	r2,-24(fp)
 20177b0:	10800017 	ldw	r2,0(r2)
 20177b4:	e0fffb17 	ldw	r3,-20(fp)
 20177b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20177bc:	e0bffa17 	ldw	r2,-24(fp)
 20177c0:	e0fffb17 	ldw	r3,-20(fp)
 20177c4:	10c00015 	stw	r3,0(r2)
 20177c8:	e0bff817 	ldw	r2,-32(fp)
 20177cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20177d0:	e0bff717 	ldw	r2,-36(fp)
 20177d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20177d8:	0005883a 	mov	r2,zero
 20177dc:	00000306 	br	20177ec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 20177e0:	00bffa84 	movi	r2,-22
 20177e4:	00000106 	br	20177ec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 20177e8:	00bfde84 	movi	r2,-134
  }
}
 20177ec:	e037883a 	mov	sp,fp
 20177f0:	df000017 	ldw	fp,0(sp)
 20177f4:	dec00104 	addi	sp,sp,4
 20177f8:	f800283a 	ret

020177fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20177fc:	deffff04 	addi	sp,sp,-4
 2017800:	df000015 	stw	fp,0(sp)
 2017804:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2017808:	0001883a 	nop
 201780c:	e037883a 	mov	sp,fp
 2017810:	df000017 	ldw	fp,0(sp)
 2017814:	dec00104 	addi	sp,sp,4
 2017818:	f800283a 	ret

0201781c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201781c:	defffe04 	addi	sp,sp,-8
 2017820:	dfc00115 	stw	ra,4(sp)
 2017824:	df000015 	stw	fp,0(sp)
 2017828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201782c:	d0a00b17 	ldw	r2,-32724(gp)
 2017830:	10000326 	beq	r2,zero,2017840 <alt_get_errno+0x24>
 2017834:	d0a00b17 	ldw	r2,-32724(gp)
 2017838:	103ee83a 	callr	r2
 201783c:	00000106 	br	2017844 <alt_get_errno+0x28>
 2017840:	d0a71a04 	addi	r2,gp,-25496
}
 2017844:	e037883a 	mov	sp,fp
 2017848:	dfc00117 	ldw	ra,4(sp)
 201784c:	df000017 	ldw	fp,0(sp)
 2017850:	dec00204 	addi	sp,sp,8
 2017854:	f800283a 	ret

02017858 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2017858:	defffa04 	addi	sp,sp,-24
 201785c:	dfc00515 	stw	ra,20(sp)
 2017860:	df000415 	stw	fp,16(sp)
 2017864:	df000404 	addi	fp,sp,16
 2017868:	e13ffe15 	stw	r4,-8(fp)
 201786c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2017870:	e0bffe17 	ldw	r2,-8(fp)
 2017874:	10000326 	beq	r2,zero,2017884 <alt_dev_llist_insert+0x2c>
 2017878:	e0bffe17 	ldw	r2,-8(fp)
 201787c:	10800217 	ldw	r2,8(r2)
 2017880:	1000061e 	bne	r2,zero,201789c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2017884:	201781c0 	call	201781c <alt_get_errno>
 2017888:	1007883a 	mov	r3,r2
 201788c:	00800584 	movi	r2,22
 2017890:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2017894:	00bffa84 	movi	r2,-22
 2017898:	00001306 	br	20178e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201789c:	e0bffe17 	ldw	r2,-8(fp)
 20178a0:	e0ffff17 	ldw	r3,-4(fp)
 20178a4:	e0fffc15 	stw	r3,-16(fp)
 20178a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20178ac:	e0bffd17 	ldw	r2,-12(fp)
 20178b0:	e0fffc17 	ldw	r3,-16(fp)
 20178b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20178b8:	e0bffc17 	ldw	r2,-16(fp)
 20178bc:	10c00017 	ldw	r3,0(r2)
 20178c0:	e0bffd17 	ldw	r2,-12(fp)
 20178c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20178c8:	e0bffc17 	ldw	r2,-16(fp)
 20178cc:	10800017 	ldw	r2,0(r2)
 20178d0:	e0fffd17 	ldw	r3,-12(fp)
 20178d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20178d8:	e0bffc17 	ldw	r2,-16(fp)
 20178dc:	e0fffd17 	ldw	r3,-12(fp)
 20178e0:	10c00015 	stw	r3,0(r2)

  return 0;  
 20178e4:	0005883a 	mov	r2,zero
}
 20178e8:	e037883a 	mov	sp,fp
 20178ec:	dfc00117 	ldw	ra,4(sp)
 20178f0:	df000017 	ldw	fp,0(sp)
 20178f4:	dec00204 	addi	sp,sp,8
 20178f8:	f800283a 	ret

020178fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20178fc:	defffd04 	addi	sp,sp,-12
 2017900:	dfc00215 	stw	ra,8(sp)
 2017904:	df000115 	stw	fp,4(sp)
 2017908:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201790c:	008080b4 	movhi	r2,514
 2017910:	10a30e04 	addi	r2,r2,-29640
 2017914:	e0bfff15 	stw	r2,-4(fp)
 2017918:	00000606 	br	2017934 <_do_ctors+0x38>
        (*ctor) (); 
 201791c:	e0bfff17 	ldw	r2,-4(fp)
 2017920:	10800017 	ldw	r2,0(r2)
 2017924:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2017928:	e0bfff17 	ldw	r2,-4(fp)
 201792c:	10bfff04 	addi	r2,r2,-4
 2017930:	e0bfff15 	stw	r2,-4(fp)
 2017934:	e0ffff17 	ldw	r3,-4(fp)
 2017938:	008080b4 	movhi	r2,514
 201793c:	10a30f04 	addi	r2,r2,-29636
 2017940:	18bff62e 	bgeu	r3,r2,201791c <_do_ctors+0x20>
        (*ctor) (); 
}
 2017944:	0001883a 	nop
 2017948:	e037883a 	mov	sp,fp
 201794c:	dfc00117 	ldw	ra,4(sp)
 2017950:	df000017 	ldw	fp,0(sp)
 2017954:	dec00204 	addi	sp,sp,8
 2017958:	f800283a 	ret

0201795c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201795c:	defffd04 	addi	sp,sp,-12
 2017960:	dfc00215 	stw	ra,8(sp)
 2017964:	df000115 	stw	fp,4(sp)
 2017968:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201796c:	008080b4 	movhi	r2,514
 2017970:	10a30e04 	addi	r2,r2,-29640
 2017974:	e0bfff15 	stw	r2,-4(fp)
 2017978:	00000606 	br	2017994 <_do_dtors+0x38>
        (*dtor) (); 
 201797c:	e0bfff17 	ldw	r2,-4(fp)
 2017980:	10800017 	ldw	r2,0(r2)
 2017984:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2017988:	e0bfff17 	ldw	r2,-4(fp)
 201798c:	10bfff04 	addi	r2,r2,-4
 2017990:	e0bfff15 	stw	r2,-4(fp)
 2017994:	e0ffff17 	ldw	r3,-4(fp)
 2017998:	008080b4 	movhi	r2,514
 201799c:	10a30f04 	addi	r2,r2,-29636
 20179a0:	18bff62e 	bgeu	r3,r2,201797c <_do_dtors+0x20>
        (*dtor) (); 
}
 20179a4:	0001883a 	nop
 20179a8:	e037883a 	mov	sp,fp
 20179ac:	dfc00117 	ldw	ra,4(sp)
 20179b0:	df000017 	ldw	fp,0(sp)
 20179b4:	dec00204 	addi	sp,sp,8
 20179b8:	f800283a 	ret

020179bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20179bc:	deffff04 	addi	sp,sp,-4
 20179c0:	df000015 	stw	fp,0(sp)
 20179c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 20179c8:	0001883a 	nop
 20179cc:	e037883a 	mov	sp,fp
 20179d0:	df000017 	ldw	fp,0(sp)
 20179d4:	dec00104 	addi	sp,sp,4
 20179d8:	f800283a 	ret

020179dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20179dc:	defff904 	addi	sp,sp,-28
 20179e0:	dfc00615 	stw	ra,24(sp)
 20179e4:	df000515 	stw	fp,20(sp)
 20179e8:	df000504 	addi	fp,sp,20
 20179ec:	e13ffc15 	stw	r4,-16(fp)
 20179f0:	e17ffd15 	stw	r5,-12(fp)
 20179f4:	e1bffe15 	stw	r6,-8(fp)
 20179f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20179fc:	e0800217 	ldw	r2,8(fp)
 2017a00:	d8800015 	stw	r2,0(sp)
 2017a04:	e1ffff17 	ldw	r7,-4(fp)
 2017a08:	e1bffe17 	ldw	r6,-8(fp)
 2017a0c:	e17ffd17 	ldw	r5,-12(fp)
 2017a10:	e13ffc17 	ldw	r4,-16(fp)
 2017a14:	2017b8c0 	call	2017b8c <alt_iic_isr_register>
}  
 2017a18:	e037883a 	mov	sp,fp
 2017a1c:	dfc00117 	ldw	ra,4(sp)
 2017a20:	df000017 	ldw	fp,0(sp)
 2017a24:	dec00204 	addi	sp,sp,8
 2017a28:	f800283a 	ret

02017a2c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2017a2c:	defff904 	addi	sp,sp,-28
 2017a30:	df000615 	stw	fp,24(sp)
 2017a34:	df000604 	addi	fp,sp,24
 2017a38:	e13ffe15 	stw	r4,-8(fp)
 2017a3c:	e17fff15 	stw	r5,-4(fp)
 2017a40:	e0bfff17 	ldw	r2,-4(fp)
 2017a44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017a48:	0005303a 	rdctl	r2,status
 2017a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017a50:	e0fffb17 	ldw	r3,-20(fp)
 2017a54:	00bfff84 	movi	r2,-2
 2017a58:	1884703a 	and	r2,r3,r2
 2017a5c:	1001703a 	wrctl	status,r2
  
  return context;
 2017a60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2017a64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2017a68:	00c00044 	movi	r3,1
 2017a6c:	e0bffa17 	ldw	r2,-24(fp)
 2017a70:	1884983a 	sll	r2,r3,r2
 2017a74:	1007883a 	mov	r3,r2
 2017a78:	d0a73717 	ldw	r2,-25380(gp)
 2017a7c:	1884b03a 	or	r2,r3,r2
 2017a80:	d0a73715 	stw	r2,-25380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2017a84:	d0a73717 	ldw	r2,-25380(gp)
 2017a88:	100170fa 	wrctl	ienable,r2
 2017a8c:	e0bffc17 	ldw	r2,-16(fp)
 2017a90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a94:	e0bffd17 	ldw	r2,-12(fp)
 2017a98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2017a9c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2017aa0:	0001883a 	nop
}
 2017aa4:	e037883a 	mov	sp,fp
 2017aa8:	df000017 	ldw	fp,0(sp)
 2017aac:	dec00104 	addi	sp,sp,4
 2017ab0:	f800283a 	ret

02017ab4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2017ab4:	defff904 	addi	sp,sp,-28
 2017ab8:	df000615 	stw	fp,24(sp)
 2017abc:	df000604 	addi	fp,sp,24
 2017ac0:	e13ffe15 	stw	r4,-8(fp)
 2017ac4:	e17fff15 	stw	r5,-4(fp)
 2017ac8:	e0bfff17 	ldw	r2,-4(fp)
 2017acc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ad0:	0005303a 	rdctl	r2,status
 2017ad4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017ad8:	e0fffb17 	ldw	r3,-20(fp)
 2017adc:	00bfff84 	movi	r2,-2
 2017ae0:	1884703a 	and	r2,r3,r2
 2017ae4:	1001703a 	wrctl	status,r2
  
  return context;
 2017ae8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2017aec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2017af0:	00c00044 	movi	r3,1
 2017af4:	e0bffa17 	ldw	r2,-24(fp)
 2017af8:	1884983a 	sll	r2,r3,r2
 2017afc:	0084303a 	nor	r2,zero,r2
 2017b00:	1007883a 	mov	r3,r2
 2017b04:	d0a73717 	ldw	r2,-25380(gp)
 2017b08:	1884703a 	and	r2,r3,r2
 2017b0c:	d0a73715 	stw	r2,-25380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2017b10:	d0a73717 	ldw	r2,-25380(gp)
 2017b14:	100170fa 	wrctl	ienable,r2
 2017b18:	e0bffc17 	ldw	r2,-16(fp)
 2017b1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017b20:	e0bffd17 	ldw	r2,-12(fp)
 2017b24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2017b28:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2017b2c:	0001883a 	nop
}
 2017b30:	e037883a 	mov	sp,fp
 2017b34:	df000017 	ldw	fp,0(sp)
 2017b38:	dec00104 	addi	sp,sp,4
 2017b3c:	f800283a 	ret

02017b40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2017b40:	defffc04 	addi	sp,sp,-16
 2017b44:	df000315 	stw	fp,12(sp)
 2017b48:	df000304 	addi	fp,sp,12
 2017b4c:	e13ffe15 	stw	r4,-8(fp)
 2017b50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2017b54:	000530fa 	rdctl	r2,ienable
 2017b58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2017b5c:	00c00044 	movi	r3,1
 2017b60:	e0bfff17 	ldw	r2,-4(fp)
 2017b64:	1884983a 	sll	r2,r3,r2
 2017b68:	1007883a 	mov	r3,r2
 2017b6c:	e0bffd17 	ldw	r2,-12(fp)
 2017b70:	1884703a 	and	r2,r3,r2
 2017b74:	1004c03a 	cmpne	r2,r2,zero
 2017b78:	10803fcc 	andi	r2,r2,255
}
 2017b7c:	e037883a 	mov	sp,fp
 2017b80:	df000017 	ldw	fp,0(sp)
 2017b84:	dec00104 	addi	sp,sp,4
 2017b88:	f800283a 	ret

02017b8c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2017b8c:	defff504 	addi	sp,sp,-44
 2017b90:	dfc00a15 	stw	ra,40(sp)
 2017b94:	df000915 	stw	fp,36(sp)
 2017b98:	df000904 	addi	fp,sp,36
 2017b9c:	e13ffc15 	stw	r4,-16(fp)
 2017ba0:	e17ffd15 	stw	r5,-12(fp)
 2017ba4:	e1bffe15 	stw	r6,-8(fp)
 2017ba8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2017bac:	00bffa84 	movi	r2,-22
 2017bb0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2017bb4:	e0bffd17 	ldw	r2,-12(fp)
 2017bb8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2017bbc:	e0bff817 	ldw	r2,-32(fp)
 2017bc0:	10800808 	cmpgei	r2,r2,32
 2017bc4:	1000271e 	bne	r2,zero,2017c64 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017bc8:	0005303a 	rdctl	r2,status
 2017bcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017bd0:	e0fffb17 	ldw	r3,-20(fp)
 2017bd4:	00bfff84 	movi	r2,-2
 2017bd8:	1884703a 	and	r2,r3,r2
 2017bdc:	1001703a 	wrctl	status,r2
  
  return context;
 2017be0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2017be4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2017be8:	008080b4 	movhi	r2,514
 2017bec:	1096c504 	addi	r2,r2,23316
 2017bf0:	e0fff817 	ldw	r3,-32(fp)
 2017bf4:	180690fa 	slli	r3,r3,3
 2017bf8:	10c5883a 	add	r2,r2,r3
 2017bfc:	e0fffe17 	ldw	r3,-8(fp)
 2017c00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2017c04:	008080b4 	movhi	r2,514
 2017c08:	1096c504 	addi	r2,r2,23316
 2017c0c:	e0fff817 	ldw	r3,-32(fp)
 2017c10:	180690fa 	slli	r3,r3,3
 2017c14:	10c5883a 	add	r2,r2,r3
 2017c18:	10800104 	addi	r2,r2,4
 2017c1c:	e0ffff17 	ldw	r3,-4(fp)
 2017c20:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2017c24:	e0bffe17 	ldw	r2,-8(fp)
 2017c28:	10000526 	beq	r2,zero,2017c40 <alt_iic_isr_register+0xb4>
 2017c2c:	e0bff817 	ldw	r2,-32(fp)
 2017c30:	100b883a 	mov	r5,r2
 2017c34:	e13ffc17 	ldw	r4,-16(fp)
 2017c38:	2017a2c0 	call	2017a2c <alt_ic_irq_enable>
 2017c3c:	00000406 	br	2017c50 <alt_iic_isr_register+0xc4>
 2017c40:	e0bff817 	ldw	r2,-32(fp)
 2017c44:	100b883a 	mov	r5,r2
 2017c48:	e13ffc17 	ldw	r4,-16(fp)
 2017c4c:	2017ab40 	call	2017ab4 <alt_ic_irq_disable>
 2017c50:	e0bff715 	stw	r2,-36(fp)
 2017c54:	e0bffa17 	ldw	r2,-24(fp)
 2017c58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c5c:	e0bff917 	ldw	r2,-28(fp)
 2017c60:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2017c64:	e0bff717 	ldw	r2,-36(fp)
}
 2017c68:	e037883a 	mov	sp,fp
 2017c6c:	dfc00117 	ldw	ra,4(sp)
 2017c70:	df000017 	ldw	fp,0(sp)
 2017c74:	dec00204 	addi	sp,sp,8
 2017c78:	f800283a 	ret

02017c7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2017c7c:	defff804 	addi	sp,sp,-32
 2017c80:	dfc00715 	stw	ra,28(sp)
 2017c84:	df000615 	stw	fp,24(sp)
 2017c88:	dc000515 	stw	r16,20(sp)
 2017c8c:	df000604 	addi	fp,sp,24
 2017c90:	e13ffb15 	stw	r4,-20(fp)
 2017c94:	e17ffc15 	stw	r5,-16(fp)
 2017c98:	e1bffd15 	stw	r6,-12(fp)
 2017c9c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2017ca0:	e1bffe17 	ldw	r6,-8(fp)
 2017ca4:	e17ffd17 	ldw	r5,-12(fp)
 2017ca8:	e13ffc17 	ldw	r4,-16(fp)
 2017cac:	2017f040 	call	2017f04 <open>
 2017cb0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2017cb4:	e0bffa17 	ldw	r2,-24(fp)
 2017cb8:	10002216 	blt	r2,zero,2017d44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2017cbc:	040080b4 	movhi	r16,514
 2017cc0:	84267c04 	addi	r16,r16,-26128
 2017cc4:	e0bffa17 	ldw	r2,-24(fp)
 2017cc8:	01400304 	movi	r5,12
 2017ccc:	1009883a 	mov	r4,r2
 2017cd0:	200afbc0 	call	200afbc <__mulsi3>
 2017cd4:	8085883a 	add	r2,r16,r2
 2017cd8:	10c00017 	ldw	r3,0(r2)
 2017cdc:	e0bffb17 	ldw	r2,-20(fp)
 2017ce0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2017ce4:	040080b4 	movhi	r16,514
 2017ce8:	84267c04 	addi	r16,r16,-26128
 2017cec:	e0bffa17 	ldw	r2,-24(fp)
 2017cf0:	01400304 	movi	r5,12
 2017cf4:	1009883a 	mov	r4,r2
 2017cf8:	200afbc0 	call	200afbc <__mulsi3>
 2017cfc:	8085883a 	add	r2,r16,r2
 2017d00:	10800104 	addi	r2,r2,4
 2017d04:	10c00017 	ldw	r3,0(r2)
 2017d08:	e0bffb17 	ldw	r2,-20(fp)
 2017d0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2017d10:	040080b4 	movhi	r16,514
 2017d14:	84267c04 	addi	r16,r16,-26128
 2017d18:	e0bffa17 	ldw	r2,-24(fp)
 2017d1c:	01400304 	movi	r5,12
 2017d20:	1009883a 	mov	r4,r2
 2017d24:	200afbc0 	call	200afbc <__mulsi3>
 2017d28:	8085883a 	add	r2,r16,r2
 2017d2c:	10800204 	addi	r2,r2,8
 2017d30:	10c00017 	ldw	r3,0(r2)
 2017d34:	e0bffb17 	ldw	r2,-20(fp)
 2017d38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2017d3c:	e13ffa17 	ldw	r4,-24(fp)
 2017d40:	200dfa40 	call	200dfa4 <alt_release_fd>
  }
} 
 2017d44:	0001883a 	nop
 2017d48:	e6ffff04 	addi	sp,fp,-4
 2017d4c:	dfc00217 	ldw	ra,8(sp)
 2017d50:	df000117 	ldw	fp,4(sp)
 2017d54:	dc000017 	ldw	r16,0(sp)
 2017d58:	dec00304 	addi	sp,sp,12
 2017d5c:	f800283a 	ret

02017d60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2017d60:	defffb04 	addi	sp,sp,-20
 2017d64:	dfc00415 	stw	ra,16(sp)
 2017d68:	df000315 	stw	fp,12(sp)
 2017d6c:	df000304 	addi	fp,sp,12
 2017d70:	e13ffd15 	stw	r4,-12(fp)
 2017d74:	e17ffe15 	stw	r5,-8(fp)
 2017d78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2017d7c:	01c07fc4 	movi	r7,511
 2017d80:	01800044 	movi	r6,1
 2017d84:	e17ffd17 	ldw	r5,-12(fp)
 2017d88:	010080b4 	movhi	r4,514
 2017d8c:	21267f04 	addi	r4,r4,-26116
 2017d90:	2017c7c0 	call	2017c7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2017d94:	01c07fc4 	movi	r7,511
 2017d98:	000d883a 	mov	r6,zero
 2017d9c:	e17ffe17 	ldw	r5,-8(fp)
 2017da0:	010080b4 	movhi	r4,514
 2017da4:	21267c04 	addi	r4,r4,-26128
 2017da8:	2017c7c0 	call	2017c7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2017dac:	01c07fc4 	movi	r7,511
 2017db0:	01800044 	movi	r6,1
 2017db4:	e17fff17 	ldw	r5,-4(fp)
 2017db8:	010080b4 	movhi	r4,514
 2017dbc:	21268204 	addi	r4,r4,-26104
 2017dc0:	2017c7c0 	call	2017c7c <alt_open_fd>
}  
 2017dc4:	0001883a 	nop
 2017dc8:	e037883a 	mov	sp,fp
 2017dcc:	dfc00117 	ldw	ra,4(sp)
 2017dd0:	df000017 	ldw	fp,0(sp)
 2017dd4:	dec00204 	addi	sp,sp,8
 2017dd8:	f800283a 	ret

02017ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017ddc:	defffe04 	addi	sp,sp,-8
 2017de0:	dfc00115 	stw	ra,4(sp)
 2017de4:	df000015 	stw	fp,0(sp)
 2017de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017dec:	d0a00b17 	ldw	r2,-32724(gp)
 2017df0:	10000326 	beq	r2,zero,2017e00 <alt_get_errno+0x24>
 2017df4:	d0a00b17 	ldw	r2,-32724(gp)
 2017df8:	103ee83a 	callr	r2
 2017dfc:	00000106 	br	2017e04 <alt_get_errno+0x28>
 2017e00:	d0a71a04 	addi	r2,gp,-25496
}
 2017e04:	e037883a 	mov	sp,fp
 2017e08:	dfc00117 	ldw	ra,4(sp)
 2017e0c:	df000017 	ldw	fp,0(sp)
 2017e10:	dec00204 	addi	sp,sp,8
 2017e14:	f800283a 	ret

02017e18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2017e18:	defffb04 	addi	sp,sp,-20
 2017e1c:	dfc00415 	stw	ra,16(sp)
 2017e20:	df000315 	stw	fp,12(sp)
 2017e24:	dc000215 	stw	r16,8(sp)
 2017e28:	df000304 	addi	fp,sp,12
 2017e2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2017e30:	e0bffe17 	ldw	r2,-8(fp)
 2017e34:	10800217 	ldw	r2,8(r2)
 2017e38:	10d00034 	orhi	r3,r2,16384
 2017e3c:	e0bffe17 	ldw	r2,-8(fp)
 2017e40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2017e44:	e03ffd15 	stw	zero,-12(fp)
 2017e48:	00002306 	br	2017ed8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2017e4c:	040080b4 	movhi	r16,514
 2017e50:	84267c04 	addi	r16,r16,-26128
 2017e54:	e0bffd17 	ldw	r2,-12(fp)
 2017e58:	01400304 	movi	r5,12
 2017e5c:	1009883a 	mov	r4,r2
 2017e60:	200afbc0 	call	200afbc <__mulsi3>
 2017e64:	8085883a 	add	r2,r16,r2
 2017e68:	10c00017 	ldw	r3,0(r2)
 2017e6c:	e0bffe17 	ldw	r2,-8(fp)
 2017e70:	10800017 	ldw	r2,0(r2)
 2017e74:	1880151e 	bne	r3,r2,2017ecc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2017e78:	040080b4 	movhi	r16,514
 2017e7c:	84267c04 	addi	r16,r16,-26128
 2017e80:	e0bffd17 	ldw	r2,-12(fp)
 2017e84:	01400304 	movi	r5,12
 2017e88:	1009883a 	mov	r4,r2
 2017e8c:	200afbc0 	call	200afbc <__mulsi3>
 2017e90:	8085883a 	add	r2,r16,r2
 2017e94:	10800204 	addi	r2,r2,8
 2017e98:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2017e9c:	10000b0e 	bge	r2,zero,2017ecc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2017ea0:	01400304 	movi	r5,12
 2017ea4:	e13ffd17 	ldw	r4,-12(fp)
 2017ea8:	200afbc0 	call	200afbc <__mulsi3>
 2017eac:	1007883a 	mov	r3,r2
 2017eb0:	008080b4 	movhi	r2,514
 2017eb4:	10a67c04 	addi	r2,r2,-26128
 2017eb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2017ebc:	e0bffe17 	ldw	r2,-8(fp)
 2017ec0:	18800226 	beq	r3,r2,2017ecc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2017ec4:	00bffcc4 	movi	r2,-13
 2017ec8:	00000806 	br	2017eec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2017ecc:	e0bffd17 	ldw	r2,-12(fp)
 2017ed0:	10800044 	addi	r2,r2,1
 2017ed4:	e0bffd15 	stw	r2,-12(fp)
 2017ed8:	d0a00a17 	ldw	r2,-32728(gp)
 2017edc:	1007883a 	mov	r3,r2
 2017ee0:	e0bffd17 	ldw	r2,-12(fp)
 2017ee4:	18bfd92e 	bgeu	r3,r2,2017e4c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2017ee8:	0005883a 	mov	r2,zero
}
 2017eec:	e6ffff04 	addi	sp,fp,-4
 2017ef0:	dfc00217 	ldw	ra,8(sp)
 2017ef4:	df000117 	ldw	fp,4(sp)
 2017ef8:	dc000017 	ldw	r16,0(sp)
 2017efc:	dec00304 	addi	sp,sp,12
 2017f00:	f800283a 	ret

02017f04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2017f04:	defff604 	addi	sp,sp,-40
 2017f08:	dfc00915 	stw	ra,36(sp)
 2017f0c:	df000815 	stw	fp,32(sp)
 2017f10:	df000804 	addi	fp,sp,32
 2017f14:	e13ffd15 	stw	r4,-12(fp)
 2017f18:	e17ffe15 	stw	r5,-8(fp)
 2017f1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2017f20:	00bfffc4 	movi	r2,-1
 2017f24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2017f28:	00bffb44 	movi	r2,-19
 2017f2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2017f30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2017f34:	d1600804 	addi	r5,gp,-32736
 2017f38:	e13ffd17 	ldw	r4,-12(fp)
 2017f3c:	20185800 	call	2018580 <alt_find_dev>
 2017f40:	e0bff815 	stw	r2,-32(fp)
 2017f44:	e0bff817 	ldw	r2,-32(fp)
 2017f48:	1000051e 	bne	r2,zero,2017f60 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2017f4c:	e13ffd17 	ldw	r4,-12(fp)
 2017f50:	20186100 	call	2018610 <alt_find_file>
 2017f54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2017f58:	00800044 	movi	r2,1
 2017f5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2017f60:	e0bff817 	ldw	r2,-32(fp)
 2017f64:	10002b26 	beq	r2,zero,2018014 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2017f68:	e13ff817 	ldw	r4,-32(fp)
 2017f6c:	20187180 	call	2018718 <alt_get_fd>
 2017f70:	e0bff915 	stw	r2,-28(fp)
 2017f74:	e0bff917 	ldw	r2,-28(fp)
 2017f78:	1000030e 	bge	r2,zero,2017f88 <open+0x84>
    {
      status = index;
 2017f7c:	e0bff917 	ldw	r2,-28(fp)
 2017f80:	e0bffa15 	stw	r2,-24(fp)
 2017f84:	00002506 	br	201801c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2017f88:	01400304 	movi	r5,12
 2017f8c:	e13ff917 	ldw	r4,-28(fp)
 2017f90:	200afbc0 	call	200afbc <__mulsi3>
 2017f94:	1007883a 	mov	r3,r2
 2017f98:	008080b4 	movhi	r2,514
 2017f9c:	10a67c04 	addi	r2,r2,-26128
 2017fa0:	1885883a 	add	r2,r3,r2
 2017fa4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2017fa8:	e0fffe17 	ldw	r3,-8(fp)
 2017fac:	00900034 	movhi	r2,16384
 2017fb0:	10bfffc4 	addi	r2,r2,-1
 2017fb4:	1886703a 	and	r3,r3,r2
 2017fb8:	e0bffc17 	ldw	r2,-16(fp)
 2017fbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2017fc0:	e0bffb17 	ldw	r2,-20(fp)
 2017fc4:	1000051e 	bne	r2,zero,2017fdc <open+0xd8>
 2017fc8:	e13ffc17 	ldw	r4,-16(fp)
 2017fcc:	2017e180 	call	2017e18 <alt_file_locked>
 2017fd0:	e0bffa15 	stw	r2,-24(fp)
 2017fd4:	e0bffa17 	ldw	r2,-24(fp)
 2017fd8:	10001016 	blt	r2,zero,201801c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2017fdc:	e0bff817 	ldw	r2,-32(fp)
 2017fe0:	10800317 	ldw	r2,12(r2)
 2017fe4:	10000826 	beq	r2,zero,2018008 <open+0x104>
 2017fe8:	e0bff817 	ldw	r2,-32(fp)
 2017fec:	10800317 	ldw	r2,12(r2)
 2017ff0:	e1ffff17 	ldw	r7,-4(fp)
 2017ff4:	e1bffe17 	ldw	r6,-8(fp)
 2017ff8:	e17ffd17 	ldw	r5,-12(fp)
 2017ffc:	e13ffc17 	ldw	r4,-16(fp)
 2018000:	103ee83a 	callr	r2
 2018004:	00000106 	br	201800c <open+0x108>
 2018008:	0005883a 	mov	r2,zero
 201800c:	e0bffa15 	stw	r2,-24(fp)
 2018010:	00000206 	br	201801c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2018014:	00bffb44 	movi	r2,-19
 2018018:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201801c:	e0bffa17 	ldw	r2,-24(fp)
 2018020:	1000090e 	bge	r2,zero,2018048 <open+0x144>
  {
    alt_release_fd (index);  
 2018024:	e13ff917 	ldw	r4,-28(fp)
 2018028:	200dfa40 	call	200dfa4 <alt_release_fd>
    ALT_ERRNO = -status;
 201802c:	2017ddc0 	call	2017ddc <alt_get_errno>
 2018030:	1007883a 	mov	r3,r2
 2018034:	e0bffa17 	ldw	r2,-24(fp)
 2018038:	0085c83a 	sub	r2,zero,r2
 201803c:	18800015 	stw	r2,0(r3)
    return -1;
 2018040:	00bfffc4 	movi	r2,-1
 2018044:	00000106 	br	201804c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 2018048:	e0bff917 	ldw	r2,-28(fp)
}
 201804c:	e037883a 	mov	sp,fp
 2018050:	dfc00117 	ldw	ra,4(sp)
 2018054:	df000017 	ldw	fp,0(sp)
 2018058:	dec00204 	addi	sp,sp,8
 201805c:	f800283a 	ret

02018060 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2018060:	defffa04 	addi	sp,sp,-24
 2018064:	df000515 	stw	fp,20(sp)
 2018068:	df000504 	addi	fp,sp,20
 201806c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018070:	0005303a 	rdctl	r2,status
 2018074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018078:	e0fffc17 	ldw	r3,-16(fp)
 201807c:	00bfff84 	movi	r2,-2
 2018080:	1884703a 	and	r2,r3,r2
 2018084:	1001703a 	wrctl	status,r2
  
  return context;
 2018088:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201808c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2018090:	e0bfff17 	ldw	r2,-4(fp)
 2018094:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2018098:	e0bffd17 	ldw	r2,-12(fp)
 201809c:	10800017 	ldw	r2,0(r2)
 20180a0:	e0fffd17 	ldw	r3,-12(fp)
 20180a4:	18c00117 	ldw	r3,4(r3)
 20180a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 20180ac:	e0bffd17 	ldw	r2,-12(fp)
 20180b0:	10800117 	ldw	r2,4(r2)
 20180b4:	e0fffd17 	ldw	r3,-12(fp)
 20180b8:	18c00017 	ldw	r3,0(r3)
 20180bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20180c0:	e0bffd17 	ldw	r2,-12(fp)
 20180c4:	e0fffd17 	ldw	r3,-12(fp)
 20180c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20180cc:	e0bffd17 	ldw	r2,-12(fp)
 20180d0:	e0fffd17 	ldw	r3,-12(fp)
 20180d4:	10c00015 	stw	r3,0(r2)
 20180d8:	e0bffb17 	ldw	r2,-20(fp)
 20180dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20180e0:	e0bffe17 	ldw	r2,-8(fp)
 20180e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20180e8:	0001883a 	nop
 20180ec:	e037883a 	mov	sp,fp
 20180f0:	df000017 	ldw	fp,0(sp)
 20180f4:	dec00104 	addi	sp,sp,4
 20180f8:	f800283a 	ret

020180fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20180fc:	defffb04 	addi	sp,sp,-20
 2018100:	dfc00415 	stw	ra,16(sp)
 2018104:	df000315 	stw	fp,12(sp)
 2018108:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201810c:	d0a02d17 	ldw	r2,-32588(gp)
 2018110:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2018114:	d0a73917 	ldw	r2,-25372(gp)
 2018118:	10800044 	addi	r2,r2,1
 201811c:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2018120:	00002e06 	br	20181dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2018124:	e0bffd17 	ldw	r2,-12(fp)
 2018128:	10800017 	ldw	r2,0(r2)
 201812c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2018130:	e0bffd17 	ldw	r2,-12(fp)
 2018134:	10800403 	ldbu	r2,16(r2)
 2018138:	10803fcc 	andi	r2,r2,255
 201813c:	10000426 	beq	r2,zero,2018150 <alt_tick+0x54>
 2018140:	d0a73917 	ldw	r2,-25372(gp)
 2018144:	1000021e 	bne	r2,zero,2018150 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2018148:	e0bffd17 	ldw	r2,-12(fp)
 201814c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2018150:	e0bffd17 	ldw	r2,-12(fp)
 2018154:	10800217 	ldw	r2,8(r2)
 2018158:	d0e73917 	ldw	r3,-25372(gp)
 201815c:	18801d36 	bltu	r3,r2,20181d4 <alt_tick+0xd8>
 2018160:	e0bffd17 	ldw	r2,-12(fp)
 2018164:	10800403 	ldbu	r2,16(r2)
 2018168:	10803fcc 	andi	r2,r2,255
 201816c:	1000191e 	bne	r2,zero,20181d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2018170:	e0bffd17 	ldw	r2,-12(fp)
 2018174:	10800317 	ldw	r2,12(r2)
 2018178:	e0fffd17 	ldw	r3,-12(fp)
 201817c:	18c00517 	ldw	r3,20(r3)
 2018180:	1809883a 	mov	r4,r3
 2018184:	103ee83a 	callr	r2
 2018188:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201818c:	e0bfff17 	ldw	r2,-4(fp)
 2018190:	1000031e 	bne	r2,zero,20181a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2018194:	e13ffd17 	ldw	r4,-12(fp)
 2018198:	20180600 	call	2018060 <alt_alarm_stop>
 201819c:	00000d06 	br	20181d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 20181a0:	e0bffd17 	ldw	r2,-12(fp)
 20181a4:	10c00217 	ldw	r3,8(r2)
 20181a8:	e0bfff17 	ldw	r2,-4(fp)
 20181ac:	1887883a 	add	r3,r3,r2
 20181b0:	e0bffd17 	ldw	r2,-12(fp)
 20181b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20181b8:	e0bffd17 	ldw	r2,-12(fp)
 20181bc:	10c00217 	ldw	r3,8(r2)
 20181c0:	d0a73917 	ldw	r2,-25372(gp)
 20181c4:	1880032e 	bgeu	r3,r2,20181d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20181c8:	e0bffd17 	ldw	r2,-12(fp)
 20181cc:	00c00044 	movi	r3,1
 20181d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20181d4:	e0bffe17 	ldw	r2,-8(fp)
 20181d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20181dc:	e0fffd17 	ldw	r3,-12(fp)
 20181e0:	d0a02d04 	addi	r2,gp,-32588
 20181e4:	18bfcf1e 	bne	r3,r2,2018124 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20181e8:	200f1b80 	call	200f1b8 <OSTimeTick>
}
 20181ec:	0001883a 	nop
 20181f0:	e037883a 	mov	sp,fp
 20181f4:	dfc00117 	ldw	ra,4(sp)
 20181f8:	df000017 	ldw	fp,0(sp)
 20181fc:	dec00204 	addi	sp,sp,8
 2018200:	f800283a 	ret

02018204 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2018204:	deffff04 	addi	sp,sp,-4
 2018208:	df000015 	stw	fp,0(sp)
 201820c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2018210:	000170fa 	wrctl	ienable,zero
}
 2018214:	0001883a 	nop
 2018218:	e037883a 	mov	sp,fp
 201821c:	df000017 	ldw	fp,0(sp)
 2018220:	dec00104 	addi	sp,sp,4
 2018224:	f800283a 	ret

02018228 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2018228:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201822c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 2018230:	d1273217 	ldw	r4,-25400(gp)

      stw ra,  0(sp)
 2018234:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 2018238:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201823c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 2018240:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2018244:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2018248:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201824c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 2018250:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2018254:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2018258:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201825c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 2018260:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2018264:	201849c0 	call	201849c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2018268:	d1272d17 	ldw	r4,-25420(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201826c:	d1672507 	ldb	r5,-25452(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 2018270:	d1273215 	stw	r4,-25400(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2018274:	d1672545 	stb	r5,-25451(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2018278:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201827c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 2018280:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2018284:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2018288:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201828c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 2018290:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2018294:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2018298:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201829c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 20182a0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 20182a4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 20182a8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 20182ac:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 20182b0:	f800283a 	ret

020182b4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 20182b4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 20182b8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 20182bc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 20182c0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 20182c4:	201849c0 	call	201849c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 20182c8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 20182cc:	d4a72345 	stb	r18,-25459(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 20182d0:	003fe506 	br	2018268 <OSCtxSw+0x40>

020182d4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 20182d4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 20182d8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 20182dc:	10800054 	ori	r2,r2,1
      wrctl status, r2
 20182e0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 20182e4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 20182e8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 20182ec:	dec00204 	addi	sp,sp,8

      callr r2
 20182f0:	103ee83a 	callr	r2

      nop
 20182f4:	0001883a 	nop

020182f8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 20182f8:	defff704 	addi	sp,sp,-36
 20182fc:	dfc00815 	stw	ra,32(sp)
 2018300:	df000715 	stw	fp,28(sp)
 2018304:	df000704 	addi	fp,sp,28
 2018308:	e13ffc15 	stw	r4,-16(fp)
 201830c:	e17ffd15 	stw	r5,-12(fp)
 2018310:	e1bffe15 	stw	r6,-8(fp)
 2018314:	3805883a 	mov	r2,r7
 2018318:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201831c:	e0fffe17 	ldw	r3,-8(fp)
 2018320:	00bfff04 	movi	r2,-4
 2018324:	1884703a 	and	r2,r3,r2
 2018328:	10bef704 	addi	r2,r2,-1060
 201832c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 2018330:	01810904 	movi	r6,1060
 2018334:	000b883a 	mov	r5,zero
 2018338:	e13ff917 	ldw	r4,-28(fp)
 201833c:	20067e00 	call	20067e0 <memset>
 2018340:	e0bff917 	ldw	r2,-28(fp)
 2018344:	10c0bb04 	addi	r3,r2,748
 2018348:	e0bff917 	ldw	r2,-28(fp)
 201834c:	10c00115 	stw	r3,4(r2)
 2018350:	e0bff917 	ldw	r2,-28(fp)
 2018354:	10c0d504 	addi	r3,r2,852
 2018358:	e0bff917 	ldw	r2,-28(fp)
 201835c:	10c00215 	stw	r3,8(r2)
 2018360:	e0bff917 	ldw	r2,-28(fp)
 2018364:	10c0ef04 	addi	r3,r2,956
 2018368:	e0bff917 	ldw	r2,-28(fp)
 201836c:	10c00315 	stw	r3,12(r2)
 2018370:	e0fff917 	ldw	r3,-28(fp)
 2018374:	008080b4 	movhi	r2,514
 2018378:	10a44804 	addi	r2,r2,-28384
 201837c:	18800d15 	stw	r2,52(r3)
 2018380:	e0bff917 	ldw	r2,-28(fp)
 2018384:	00c00044 	movi	r3,1
 2018388:	10c02915 	stw	r3,164(r2)
 201838c:	10002a15 	stw	zero,168(r2)
 2018390:	e0bff917 	ldw	r2,-28(fp)
 2018394:	00ccc384 	movi	r3,13070
 2018398:	10c02b0d 	sth	r3,172(r2)
 201839c:	e0bff917 	ldw	r2,-28(fp)
 20183a0:	00eaf344 	movi	r3,-21555
 20183a4:	10c02b8d 	sth	r3,174(r2)
 20183a8:	e0bff917 	ldw	r2,-28(fp)
 20183ac:	00c48d04 	movi	r3,4660
 20183b0:	10c02c0d 	sth	r3,176(r2)
 20183b4:	e0bff917 	ldw	r2,-28(fp)
 20183b8:	00f99b44 	movi	r3,-6547
 20183bc:	10c02c8d 	sth	r3,178(r2)
 20183c0:	e0bff917 	ldw	r2,-28(fp)
 20183c4:	00f7bb04 	movi	r3,-8468
 20183c8:	10c02d0d 	sth	r3,180(r2)
 20183cc:	e0bff917 	ldw	r2,-28(fp)
 20183d0:	00c00144 	movi	r3,5
 20183d4:	10c02d8d 	sth	r3,182(r2)
 20183d8:	e0bff917 	ldw	r2,-28(fp)
 20183dc:	00c002c4 	movi	r3,11
 20183e0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 20183e4:	e0bff917 	ldw	r2,-28(fp)
 20183e8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 20183ec:	e0bffa17 	ldw	r2,-24(fp)
 20183f0:	10bff304 	addi	r2,r2,-52
 20183f4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 20183f8:	e0bffb17 	ldw	r2,-20(fp)
 20183fc:	10800c04 	addi	r2,r2,48
 2018400:	e0fffc17 	ldw	r3,-16(fp)
 2018404:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2018408:	e0bffb17 	ldw	r2,-20(fp)
 201840c:	10800b04 	addi	r2,r2,44
 2018410:	e0fffd17 	ldw	r3,-12(fp)
 2018414:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2018418:	e0bffb17 	ldw	r2,-20(fp)
 201841c:	10800a04 	addi	r2,r2,40
 2018420:	e0fff917 	ldw	r3,-28(fp)
 2018424:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2018428:	008080b4 	movhi	r2,514
 201842c:	10a0b504 	addi	r2,r2,-32044
 2018430:	10c00104 	addi	r3,r2,4
 2018434:	e0bffb17 	ldw	r2,-20(fp)
 2018438:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201843c:	e0bffb17 	ldw	r2,-20(fp)
}
 2018440:	e037883a 	mov	sp,fp
 2018444:	dfc00117 	ldw	ra,4(sp)
 2018448:	df000017 	ldw	fp,0(sp)
 201844c:	dec00204 	addi	sp,sp,8
 2018450:	f800283a 	ret

02018454 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2018454:	defffe04 	addi	sp,sp,-8
 2018458:	df000115 	stw	fp,4(sp)
 201845c:	df000104 	addi	fp,sp,4
 2018460:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2018464:	0001883a 	nop
 2018468:	e037883a 	mov	sp,fp
 201846c:	df000017 	ldw	fp,0(sp)
 2018470:	dec00104 	addi	sp,sp,4
 2018474:	f800283a 	ret

02018478 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2018478:	defffe04 	addi	sp,sp,-8
 201847c:	df000115 	stw	fp,4(sp)
 2018480:	df000104 	addi	fp,sp,4
 2018484:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2018488:	0001883a 	nop
 201848c:	e037883a 	mov	sp,fp
 2018490:	df000017 	ldw	fp,0(sp)
 2018494:	dec00104 	addi	sp,sp,4
 2018498:	f800283a 	ret

0201849c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201849c:	deffff04 	addi	sp,sp,-4
 20184a0:	df000015 	stw	fp,0(sp)
 20184a4:	d839883a 	mov	fp,sp
}
 20184a8:	0001883a 	nop
 20184ac:	e037883a 	mov	sp,fp
 20184b0:	df000017 	ldw	fp,0(sp)
 20184b4:	dec00104 	addi	sp,sp,4
 20184b8:	f800283a 	ret

020184bc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 20184bc:	deffff04 	addi	sp,sp,-4
 20184c0:	df000015 	stw	fp,0(sp)
 20184c4:	d839883a 	mov	fp,sp
}
 20184c8:	0001883a 	nop
 20184cc:	e037883a 	mov	sp,fp
 20184d0:	df000017 	ldw	fp,0(sp)
 20184d4:	dec00104 	addi	sp,sp,4
 20184d8:	f800283a 	ret

020184dc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 20184dc:	deffff04 	addi	sp,sp,-4
 20184e0:	df000015 	stw	fp,0(sp)
 20184e4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 20184e8:	0001883a 	nop
 20184ec:	e037883a 	mov	sp,fp
 20184f0:	df000017 	ldw	fp,0(sp)
 20184f4:	dec00104 	addi	sp,sp,4
 20184f8:	f800283a 	ret

020184fc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 20184fc:	deffff04 	addi	sp,sp,-4
 2018500:	df000015 	stw	fp,0(sp)
 2018504:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2018508:	0001883a 	nop
 201850c:	e037883a 	mov	sp,fp
 2018510:	df000017 	ldw	fp,0(sp)
 2018514:	dec00104 	addi	sp,sp,4
 2018518:	f800283a 	ret

0201851c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201851c:	deffff04 	addi	sp,sp,-4
 2018520:	df000015 	stw	fp,0(sp)
 2018524:	d839883a 	mov	fp,sp
}
 2018528:	0001883a 	nop
 201852c:	e037883a 	mov	sp,fp
 2018530:	df000017 	ldw	fp,0(sp)
 2018534:	dec00104 	addi	sp,sp,4
 2018538:	f800283a 	ret

0201853c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201853c:	deffff04 	addi	sp,sp,-4
 2018540:	df000015 	stw	fp,0(sp)
 2018544:	d839883a 	mov	fp,sp
}
 2018548:	0001883a 	nop
 201854c:	e037883a 	mov	sp,fp
 2018550:	df000017 	ldw	fp,0(sp)
 2018554:	dec00104 	addi	sp,sp,4
 2018558:	f800283a 	ret

0201855c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201855c:	defffe04 	addi	sp,sp,-8
 2018560:	df000115 	stw	fp,4(sp)
 2018564:	df000104 	addi	fp,sp,4
 2018568:	e13fff15 	stw	r4,-4(fp)
}
 201856c:	0001883a 	nop
 2018570:	e037883a 	mov	sp,fp
 2018574:	df000017 	ldw	fp,0(sp)
 2018578:	dec00104 	addi	sp,sp,4
 201857c:	f800283a 	ret

02018580 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2018580:	defffa04 	addi	sp,sp,-24
 2018584:	dfc00515 	stw	ra,20(sp)
 2018588:	df000415 	stw	fp,16(sp)
 201858c:	df000404 	addi	fp,sp,16
 2018590:	e13ffe15 	stw	r4,-8(fp)
 2018594:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2018598:	e0bfff17 	ldw	r2,-4(fp)
 201859c:	10800017 	ldw	r2,0(r2)
 20185a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20185a4:	e13ffe17 	ldw	r4,-8(fp)
 20185a8:	2000a880 	call	2000a88 <strlen>
 20185ac:	10800044 	addi	r2,r2,1
 20185b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20185b4:	00000d06 	br	20185ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20185b8:	e0bffc17 	ldw	r2,-16(fp)
 20185bc:	10800217 	ldw	r2,8(r2)
 20185c0:	e0fffd17 	ldw	r3,-12(fp)
 20185c4:	180d883a 	mov	r6,r3
 20185c8:	e17ffe17 	ldw	r5,-8(fp)
 20185cc:	1009883a 	mov	r4,r2
 20185d0:	20188f40 	call	20188f4 <memcmp>
 20185d4:	1000021e 	bne	r2,zero,20185e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20185d8:	e0bffc17 	ldw	r2,-16(fp)
 20185dc:	00000706 	br	20185fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20185e0:	e0bffc17 	ldw	r2,-16(fp)
 20185e4:	10800017 	ldw	r2,0(r2)
 20185e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20185ec:	e0fffc17 	ldw	r3,-16(fp)
 20185f0:	e0bfff17 	ldw	r2,-4(fp)
 20185f4:	18bff01e 	bne	r3,r2,20185b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20185f8:	0005883a 	mov	r2,zero
}
 20185fc:	e037883a 	mov	sp,fp
 2018600:	dfc00117 	ldw	ra,4(sp)
 2018604:	df000017 	ldw	fp,0(sp)
 2018608:	dec00204 	addi	sp,sp,8
 201860c:	f800283a 	ret

02018610 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2018610:	defffb04 	addi	sp,sp,-20
 2018614:	dfc00415 	stw	ra,16(sp)
 2018618:	df000315 	stw	fp,12(sp)
 201861c:	df000304 	addi	fp,sp,12
 2018620:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2018624:	d0a00617 	ldw	r2,-32744(gp)
 2018628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201862c:	00003106 	br	20186f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2018630:	e0bffd17 	ldw	r2,-12(fp)
 2018634:	10800217 	ldw	r2,8(r2)
 2018638:	1009883a 	mov	r4,r2
 201863c:	2000a880 	call	2000a88 <strlen>
 2018640:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2018644:	e0bffd17 	ldw	r2,-12(fp)
 2018648:	10c00217 	ldw	r3,8(r2)
 201864c:	e0bffe17 	ldw	r2,-8(fp)
 2018650:	10bfffc4 	addi	r2,r2,-1
 2018654:	1885883a 	add	r2,r3,r2
 2018658:	10800003 	ldbu	r2,0(r2)
 201865c:	10803fcc 	andi	r2,r2,255
 2018660:	1080201c 	xori	r2,r2,128
 2018664:	10bfe004 	addi	r2,r2,-128
 2018668:	10800bd8 	cmpnei	r2,r2,47
 201866c:	1000031e 	bne	r2,zero,201867c <alt_find_file+0x6c>
    {
      len -= 1;
 2018670:	e0bffe17 	ldw	r2,-8(fp)
 2018674:	10bfffc4 	addi	r2,r2,-1
 2018678:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201867c:	e0bffe17 	ldw	r2,-8(fp)
 2018680:	e0ffff17 	ldw	r3,-4(fp)
 2018684:	1885883a 	add	r2,r3,r2
 2018688:	10800003 	ldbu	r2,0(r2)
 201868c:	10803fcc 	andi	r2,r2,255
 2018690:	1080201c 	xori	r2,r2,128
 2018694:	10bfe004 	addi	r2,r2,-128
 2018698:	10800be0 	cmpeqi	r2,r2,47
 201869c:	1000081e 	bne	r2,zero,20186c0 <alt_find_file+0xb0>
 20186a0:	e0bffe17 	ldw	r2,-8(fp)
 20186a4:	e0ffff17 	ldw	r3,-4(fp)
 20186a8:	1885883a 	add	r2,r3,r2
 20186ac:	10800003 	ldbu	r2,0(r2)
 20186b0:	10803fcc 	andi	r2,r2,255
 20186b4:	1080201c 	xori	r2,r2,128
 20186b8:	10bfe004 	addi	r2,r2,-128
 20186bc:	10000a1e 	bne	r2,zero,20186e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 20186c0:	e0bffd17 	ldw	r2,-12(fp)
 20186c4:	10800217 	ldw	r2,8(r2)
 20186c8:	e0fffe17 	ldw	r3,-8(fp)
 20186cc:	180d883a 	mov	r6,r3
 20186d0:	e17fff17 	ldw	r5,-4(fp)
 20186d4:	1009883a 	mov	r4,r2
 20186d8:	20188f40 	call	20188f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20186dc:	1000021e 	bne	r2,zero,20186e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20186e0:	e0bffd17 	ldw	r2,-12(fp)
 20186e4:	00000706 	br	2018704 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 20186e8:	e0bffd17 	ldw	r2,-12(fp)
 20186ec:	10800017 	ldw	r2,0(r2)
 20186f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20186f4:	e0fffd17 	ldw	r3,-12(fp)
 20186f8:	d0a00604 	addi	r2,gp,-32744
 20186fc:	18bfcc1e 	bne	r3,r2,2018630 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2018700:	0005883a 	mov	r2,zero
}
 2018704:	e037883a 	mov	sp,fp
 2018708:	dfc00117 	ldw	ra,4(sp)
 201870c:	df000017 	ldw	fp,0(sp)
 2018710:	dec00204 	addi	sp,sp,8
 2018714:	f800283a 	ret

02018718 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2018718:	defff804 	addi	sp,sp,-32
 201871c:	dfc00715 	stw	ra,28(sp)
 2018720:	df000615 	stw	fp,24(sp)
 2018724:	dc000515 	stw	r16,20(sp)
 2018728:	df000604 	addi	fp,sp,24
 201872c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2018730:	00bffa04 	movi	r2,-24
 2018734:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2018738:	d0a71b17 	ldw	r2,-25492(gp)
 201873c:	e0bffc15 	stw	r2,-16(fp)
 2018740:	e03ffd0d 	sth	zero,-12(fp)
 2018744:	e0bffd0b 	ldhu	r2,-12(fp)
 2018748:	e0fffd84 	addi	r3,fp,-10
 201874c:	180d883a 	mov	r6,r3
 2018750:	100b883a 	mov	r5,r2
 2018754:	e13ffc17 	ldw	r4,-16(fp)
 2018758:	20144d00 	call	20144d0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201875c:	e03ffa15 	stw	zero,-24(fp)
 2018760:	00001d06 	br	20187d8 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 2018764:	040080b4 	movhi	r16,514
 2018768:	84267c04 	addi	r16,r16,-26128
 201876c:	e0bffa17 	ldw	r2,-24(fp)
 2018770:	01400304 	movi	r5,12
 2018774:	1009883a 	mov	r4,r2
 2018778:	200afbc0 	call	200afbc <__mulsi3>
 201877c:	8085883a 	add	r2,r16,r2
 2018780:	10800017 	ldw	r2,0(r2)
 2018784:	1000111e 	bne	r2,zero,20187cc <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 2018788:	040080b4 	movhi	r16,514
 201878c:	84267c04 	addi	r16,r16,-26128
 2018790:	e0bffa17 	ldw	r2,-24(fp)
 2018794:	01400304 	movi	r5,12
 2018798:	1009883a 	mov	r4,r2
 201879c:	200afbc0 	call	200afbc <__mulsi3>
 20187a0:	8085883a 	add	r2,r16,r2
 20187a4:	e0fffe17 	ldw	r3,-8(fp)
 20187a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20187ac:	d0e00a17 	ldw	r3,-32728(gp)
 20187b0:	e0bffa17 	ldw	r2,-24(fp)
 20187b4:	1880020e 	bge	r3,r2,20187c0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 20187b8:	e0bffa17 	ldw	r2,-24(fp)
 20187bc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 20187c0:	e0bffa17 	ldw	r2,-24(fp)
 20187c4:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 20187c8:	00000606 	br	20187e4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20187cc:	e0bffa17 	ldw	r2,-24(fp)
 20187d0:	10800044 	addi	r2,r2,1
 20187d4:	e0bffa15 	stw	r2,-24(fp)
 20187d8:	e0bffa17 	ldw	r2,-24(fp)
 20187dc:	10800810 	cmplti	r2,r2,32
 20187e0:	103fe01e 	bne	r2,zero,2018764 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 20187e4:	d0a71b17 	ldw	r2,-25492(gp)
 20187e8:	1009883a 	mov	r4,r2
 20187ec:	20148480 	call	2014848 <OSSemPost>

  return rc;
 20187f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20187f4:	e6ffff04 	addi	sp,fp,-4
 20187f8:	dfc00217 	ldw	ra,8(sp)
 20187fc:	df000117 	ldw	fp,4(sp)
 2018800:	dc000017 	ldw	r16,0(sp)
 2018804:	dec00304 	addi	sp,sp,12
 2018808:	f800283a 	ret

0201880c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201880c:	defffe04 	addi	sp,sp,-8
 2018810:	df000115 	stw	fp,4(sp)
 2018814:	df000104 	addi	fp,sp,4
 2018818:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201881c:	e0bfff17 	ldw	r2,-4(fp)
 2018820:	10bffe84 	addi	r2,r2,-6
 2018824:	10c00428 	cmpgeui	r3,r2,16
 2018828:	18001a1e 	bne	r3,zero,2018894 <alt_exception_cause_generated_bad_addr+0x88>
 201882c:	100690ba 	slli	r3,r2,2
 2018830:	008080b4 	movhi	r2,514
 2018834:	10a21104 	addi	r2,r2,-30652
 2018838:	1885883a 	add	r2,r3,r2
 201883c:	10800017 	ldw	r2,0(r2)
 2018840:	1000683a 	jmp	r2
 2018844:	02018884 	movi	r8,1570
 2018848:	02018884 	movi	r8,1570
 201884c:	02018894 	movui	r8,1570
 2018850:	02018894 	movui	r8,1570
 2018854:	02018894 	movui	r8,1570
 2018858:	02018884 	movi	r8,1570
 201885c:	0201888c 	andi	r8,zero,1570
 2018860:	02018894 	movui	r8,1570
 2018864:	02018884 	movi	r8,1570
 2018868:	02018884 	movi	r8,1570
 201886c:	02018894 	movui	r8,1570
 2018870:	02018884 	movi	r8,1570
 2018874:	0201888c 	andi	r8,zero,1570
 2018878:	02018894 	movui	r8,1570
 201887c:	02018894 	movui	r8,1570
 2018880:	02018884 	movi	r8,1570
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2018884:	00800044 	movi	r2,1
 2018888:	00000306 	br	2018898 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201888c:	0005883a 	mov	r2,zero
 2018890:	00000106 	br	2018898 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2018894:	0005883a 	mov	r2,zero
  }
}
 2018898:	e037883a 	mov	sp,fp
 201889c:	df000017 	ldw	fp,0(sp)
 20188a0:	dec00104 	addi	sp,sp,4
 20188a4:	f800283a 	ret

020188a8 <atexit>:
 20188a8:	200b883a 	mov	r5,r4
 20188ac:	000f883a 	mov	r7,zero
 20188b0:	000d883a 	mov	r6,zero
 20188b4:	0009883a 	mov	r4,zero
 20188b8:	20189701 	jmpi	2018970 <__register_exitproc>

020188bc <exit>:
 20188bc:	defffe04 	addi	sp,sp,-8
 20188c0:	000b883a 	mov	r5,zero
 20188c4:	dc000015 	stw	r16,0(sp)
 20188c8:	dfc00115 	stw	ra,4(sp)
 20188cc:	2021883a 	mov	r16,r4
 20188d0:	2018a880 	call	2018a88 <__call_exitprocs>
 20188d4:	008080b4 	movhi	r2,514
 20188d8:	10aaf704 	addi	r2,r2,-21540
 20188dc:	11000017 	ldw	r4,0(r2)
 20188e0:	20800f17 	ldw	r2,60(r4)
 20188e4:	10000126 	beq	r2,zero,20188ec <exit+0x30>
 20188e8:	103ee83a 	callr	r2
 20188ec:	8009883a 	mov	r4,r16
 20188f0:	2018c080 	call	2018c08 <_exit>

020188f4 <memcmp>:
 20188f4:	01c000c4 	movi	r7,3
 20188f8:	3980192e 	bgeu	r7,r6,2018960 <memcmp+0x6c>
 20188fc:	2144b03a 	or	r2,r4,r5
 2018900:	11c4703a 	and	r2,r2,r7
 2018904:	10000f26 	beq	r2,zero,2018944 <memcmp+0x50>
 2018908:	20800003 	ldbu	r2,0(r4)
 201890c:	28c00003 	ldbu	r3,0(r5)
 2018910:	10c0151e 	bne	r2,r3,2018968 <memcmp+0x74>
 2018914:	31bfff84 	addi	r6,r6,-2
 2018918:	01ffffc4 	movi	r7,-1
 201891c:	00000406 	br	2018930 <memcmp+0x3c>
 2018920:	20800003 	ldbu	r2,0(r4)
 2018924:	28c00003 	ldbu	r3,0(r5)
 2018928:	31bfffc4 	addi	r6,r6,-1
 201892c:	10c00e1e 	bne	r2,r3,2018968 <memcmp+0x74>
 2018930:	21000044 	addi	r4,r4,1
 2018934:	29400044 	addi	r5,r5,1
 2018938:	31fff91e 	bne	r6,r7,2018920 <memcmp+0x2c>
 201893c:	0005883a 	mov	r2,zero
 2018940:	f800283a 	ret
 2018944:	20c00017 	ldw	r3,0(r4)
 2018948:	28800017 	ldw	r2,0(r5)
 201894c:	18bfee1e 	bne	r3,r2,2018908 <memcmp+0x14>
 2018950:	31bfff04 	addi	r6,r6,-4
 2018954:	21000104 	addi	r4,r4,4
 2018958:	29400104 	addi	r5,r5,4
 201895c:	39bff936 	bltu	r7,r6,2018944 <memcmp+0x50>
 2018960:	303fe91e 	bne	r6,zero,2018908 <memcmp+0x14>
 2018964:	003ff506 	br	201893c <memcmp+0x48>
 2018968:	10c5c83a 	sub	r2,r2,r3
 201896c:	f800283a 	ret

02018970 <__register_exitproc>:
 2018970:	defffa04 	addi	sp,sp,-24
 2018974:	dc000315 	stw	r16,12(sp)
 2018978:	040080b4 	movhi	r16,514
 201897c:	842af704 	addi	r16,r16,-21540
 2018980:	80c00017 	ldw	r3,0(r16)
 2018984:	dc400415 	stw	r17,16(sp)
 2018988:	dfc00515 	stw	ra,20(sp)
 201898c:	18805217 	ldw	r2,328(r3)
 2018990:	2023883a 	mov	r17,r4
 2018994:	10003726 	beq	r2,zero,2018a74 <__register_exitproc+0x104>
 2018998:	10c00117 	ldw	r3,4(r2)
 201899c:	010007c4 	movi	r4,31
 20189a0:	20c00e16 	blt	r4,r3,20189dc <__register_exitproc+0x6c>
 20189a4:	1a000044 	addi	r8,r3,1
 20189a8:	8800221e 	bne	r17,zero,2018a34 <__register_exitproc+0xc4>
 20189ac:	18c00084 	addi	r3,r3,2
 20189b0:	18c7883a 	add	r3,r3,r3
 20189b4:	18c7883a 	add	r3,r3,r3
 20189b8:	12000115 	stw	r8,4(r2)
 20189bc:	10c7883a 	add	r3,r2,r3
 20189c0:	19400015 	stw	r5,0(r3)
 20189c4:	0005883a 	mov	r2,zero
 20189c8:	dfc00517 	ldw	ra,20(sp)
 20189cc:	dc400417 	ldw	r17,16(sp)
 20189d0:	dc000317 	ldw	r16,12(sp)
 20189d4:	dec00604 	addi	sp,sp,24
 20189d8:	f800283a 	ret
 20189dc:	00800034 	movhi	r2,0
 20189e0:	10800004 	addi	r2,r2,0
 20189e4:	10002626 	beq	r2,zero,2018a80 <__register_exitproc+0x110>
 20189e8:	01006404 	movi	r4,400
 20189ec:	d9400015 	stw	r5,0(sp)
 20189f0:	d9800115 	stw	r6,4(sp)
 20189f4:	d9c00215 	stw	r7,8(sp)
 20189f8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 20189fc:	d9400017 	ldw	r5,0(sp)
 2018a00:	d9800117 	ldw	r6,4(sp)
 2018a04:	d9c00217 	ldw	r7,8(sp)
 2018a08:	10001d26 	beq	r2,zero,2018a80 <__register_exitproc+0x110>
 2018a0c:	81000017 	ldw	r4,0(r16)
 2018a10:	10000115 	stw	zero,4(r2)
 2018a14:	02000044 	movi	r8,1
 2018a18:	22405217 	ldw	r9,328(r4)
 2018a1c:	0007883a 	mov	r3,zero
 2018a20:	12400015 	stw	r9,0(r2)
 2018a24:	20805215 	stw	r2,328(r4)
 2018a28:	10006215 	stw	zero,392(r2)
 2018a2c:	10006315 	stw	zero,396(r2)
 2018a30:	883fde26 	beq	r17,zero,20189ac <__register_exitproc+0x3c>
 2018a34:	18c9883a 	add	r4,r3,r3
 2018a38:	2109883a 	add	r4,r4,r4
 2018a3c:	1109883a 	add	r4,r2,r4
 2018a40:	21802215 	stw	r6,136(r4)
 2018a44:	01800044 	movi	r6,1
 2018a48:	12406217 	ldw	r9,392(r2)
 2018a4c:	30cc983a 	sll	r6,r6,r3
 2018a50:	4992b03a 	or	r9,r9,r6
 2018a54:	12406215 	stw	r9,392(r2)
 2018a58:	21c04215 	stw	r7,264(r4)
 2018a5c:	01000084 	movi	r4,2
 2018a60:	893fd21e 	bne	r17,r4,20189ac <__register_exitproc+0x3c>
 2018a64:	11006317 	ldw	r4,396(r2)
 2018a68:	218cb03a 	or	r6,r4,r6
 2018a6c:	11806315 	stw	r6,396(r2)
 2018a70:	003fce06 	br	20189ac <__register_exitproc+0x3c>
 2018a74:	18805304 	addi	r2,r3,332
 2018a78:	18805215 	stw	r2,328(r3)
 2018a7c:	003fc606 	br	2018998 <__register_exitproc+0x28>
 2018a80:	00bfffc4 	movi	r2,-1
 2018a84:	003fd006 	br	20189c8 <__register_exitproc+0x58>

02018a88 <__call_exitprocs>:
 2018a88:	defff504 	addi	sp,sp,-44
 2018a8c:	df000915 	stw	fp,36(sp)
 2018a90:	dd400615 	stw	r21,24(sp)
 2018a94:	dc800315 	stw	r18,12(sp)
 2018a98:	dfc00a15 	stw	ra,40(sp)
 2018a9c:	ddc00815 	stw	r23,32(sp)
 2018aa0:	dd800715 	stw	r22,28(sp)
 2018aa4:	dd000515 	stw	r20,20(sp)
 2018aa8:	dcc00415 	stw	r19,16(sp)
 2018aac:	dc400215 	stw	r17,8(sp)
 2018ab0:	dc000115 	stw	r16,4(sp)
 2018ab4:	d9000015 	stw	r4,0(sp)
 2018ab8:	2839883a 	mov	fp,r5
 2018abc:	04800044 	movi	r18,1
 2018ac0:	057fffc4 	movi	r21,-1
 2018ac4:	008080b4 	movhi	r2,514
 2018ac8:	10aaf704 	addi	r2,r2,-21540
 2018acc:	12000017 	ldw	r8,0(r2)
 2018ad0:	45005217 	ldw	r20,328(r8)
 2018ad4:	44c05204 	addi	r19,r8,328
 2018ad8:	a0001c26 	beq	r20,zero,2018b4c <__call_exitprocs+0xc4>
 2018adc:	a0800117 	ldw	r2,4(r20)
 2018ae0:	15ffffc4 	addi	r23,r2,-1
 2018ae4:	b8000d16 	blt	r23,zero,2018b1c <__call_exitprocs+0x94>
 2018ae8:	14000044 	addi	r16,r2,1
 2018aec:	8421883a 	add	r16,r16,r16
 2018af0:	8421883a 	add	r16,r16,r16
 2018af4:	84402004 	addi	r17,r16,128
 2018af8:	a463883a 	add	r17,r20,r17
 2018afc:	a421883a 	add	r16,r20,r16
 2018b00:	e0001e26 	beq	fp,zero,2018b7c <__call_exitprocs+0xf4>
 2018b04:	80804017 	ldw	r2,256(r16)
 2018b08:	e0801c26 	beq	fp,r2,2018b7c <__call_exitprocs+0xf4>
 2018b0c:	bdffffc4 	addi	r23,r23,-1
 2018b10:	843fff04 	addi	r16,r16,-4
 2018b14:	8c7fff04 	addi	r17,r17,-4
 2018b18:	bd7ff91e 	bne	r23,r21,2018b00 <__call_exitprocs+0x78>
 2018b1c:	00800034 	movhi	r2,0
 2018b20:	10800004 	addi	r2,r2,0
 2018b24:	10000926 	beq	r2,zero,2018b4c <__call_exitprocs+0xc4>
 2018b28:	a0800117 	ldw	r2,4(r20)
 2018b2c:	1000301e 	bne	r2,zero,2018bf0 <__call_exitprocs+0x168>
 2018b30:	a0800017 	ldw	r2,0(r20)
 2018b34:	10003226 	beq	r2,zero,2018c00 <__call_exitprocs+0x178>
 2018b38:	a009883a 	mov	r4,r20
 2018b3c:	98800015 	stw	r2,0(r19)
 2018b40:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 2018b44:	9d000017 	ldw	r20,0(r19)
 2018b48:	a03fe41e 	bne	r20,zero,2018adc <__call_exitprocs+0x54>
 2018b4c:	dfc00a17 	ldw	ra,40(sp)
 2018b50:	df000917 	ldw	fp,36(sp)
 2018b54:	ddc00817 	ldw	r23,32(sp)
 2018b58:	dd800717 	ldw	r22,28(sp)
 2018b5c:	dd400617 	ldw	r21,24(sp)
 2018b60:	dd000517 	ldw	r20,20(sp)
 2018b64:	dcc00417 	ldw	r19,16(sp)
 2018b68:	dc800317 	ldw	r18,12(sp)
 2018b6c:	dc400217 	ldw	r17,8(sp)
 2018b70:	dc000117 	ldw	r16,4(sp)
 2018b74:	dec00b04 	addi	sp,sp,44
 2018b78:	f800283a 	ret
 2018b7c:	a0800117 	ldw	r2,4(r20)
 2018b80:	80c00017 	ldw	r3,0(r16)
 2018b84:	10bfffc4 	addi	r2,r2,-1
 2018b88:	15c01426 	beq	r2,r23,2018bdc <__call_exitprocs+0x154>
 2018b8c:	80000015 	stw	zero,0(r16)
 2018b90:	183fde26 	beq	r3,zero,2018b0c <__call_exitprocs+0x84>
 2018b94:	95c8983a 	sll	r4,r18,r23
 2018b98:	a0806217 	ldw	r2,392(r20)
 2018b9c:	a5800117 	ldw	r22,4(r20)
 2018ba0:	2084703a 	and	r2,r4,r2
 2018ba4:	10000b26 	beq	r2,zero,2018bd4 <__call_exitprocs+0x14c>
 2018ba8:	a0806317 	ldw	r2,396(r20)
 2018bac:	2088703a 	and	r4,r4,r2
 2018bb0:	20000c1e 	bne	r4,zero,2018be4 <__call_exitprocs+0x15c>
 2018bb4:	89400017 	ldw	r5,0(r17)
 2018bb8:	d9000017 	ldw	r4,0(sp)
 2018bbc:	183ee83a 	callr	r3
 2018bc0:	a0800117 	ldw	r2,4(r20)
 2018bc4:	15bfbf1e 	bne	r2,r22,2018ac4 <__call_exitprocs+0x3c>
 2018bc8:	98800017 	ldw	r2,0(r19)
 2018bcc:	153fcf26 	beq	r2,r20,2018b0c <__call_exitprocs+0x84>
 2018bd0:	003fbc06 	br	2018ac4 <__call_exitprocs+0x3c>
 2018bd4:	183ee83a 	callr	r3
 2018bd8:	003ff906 	br	2018bc0 <__call_exitprocs+0x138>
 2018bdc:	a5c00115 	stw	r23,4(r20)
 2018be0:	003feb06 	br	2018b90 <__call_exitprocs+0x108>
 2018be4:	89000017 	ldw	r4,0(r17)
 2018be8:	183ee83a 	callr	r3
 2018bec:	003ff406 	br	2018bc0 <__call_exitprocs+0x138>
 2018bf0:	a0800017 	ldw	r2,0(r20)
 2018bf4:	a027883a 	mov	r19,r20
 2018bf8:	1029883a 	mov	r20,r2
 2018bfc:	003fb606 	br	2018ad8 <__call_exitprocs+0x50>
 2018c00:	0005883a 	mov	r2,zero
 2018c04:	003ffb06 	br	2018bf4 <__call_exitprocs+0x16c>

02018c08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2018c08:	defffd04 	addi	sp,sp,-12
 2018c0c:	df000215 	stw	fp,8(sp)
 2018c10:	df000204 	addi	fp,sp,8
 2018c14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2018c18:	d0272345 	stb	zero,-25459(gp)
 2018c1c:	e0bfff17 	ldw	r2,-4(fp)
 2018c20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2018c24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2018c28:	10000226 	beq	r2,zero,2018c34 <_exit+0x2c>
    ALT_SIM_FAIL();
 2018c2c:	002af070 	cmpltui	zero,zero,43969
 2018c30:	00000106 	br	2018c38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2018c34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2018c38:	003fff06 	br	2018c38 <_exit+0x30>
