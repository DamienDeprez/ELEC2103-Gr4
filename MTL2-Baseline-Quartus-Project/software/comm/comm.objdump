
comm.elf:     file format elf32-littlenios2
comm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001b940 memsz 0x0001b940 flags r-x
    LOAD off    0x0001c960 vaddr 0x0201b960 paddr 0x0201d4d8 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001f050 vaddr 0x0201f050 paddr 0x0201f050 align 2**12
         filesz 0x00000000 memsz 0x00009408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b204  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  0201b434  0201b434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  0201b960  0201d4d8  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009408  0201f050  0201f050  0001f050  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0001e4d8  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02028458  02028458  0001e4d8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e4d8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001250  00000000  00000000  0001e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000303fa  00000000  00000000  0001f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bebd  00000000  00000000  0004fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f4a2  00000000  00000000  0005ba07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003610  00000000  00000000  0006aeac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000537e  00000000  00000000  0006e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ab71  00000000  00000000  0007383a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0008e3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f38  00000000  00000000  0008e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000952aa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000952b0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000952b3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000952b4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000952b5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000952b9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000952bd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000952c1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000952ca  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000952d3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000952dc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  000952e5  2**0
                  CONTENTS, READONLY
 30 .jdi          0000380b  00000000  00000000  00095324  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005203d  00000000  00000000  00098b2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
0201b434 l    d  .rodata	00000000 .rodata
0201b960 l    d  .rwdata	00000000 .rwdata
0201f050 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02028458 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../comm_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0201b960 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0201b68e l     O .rodata	00000010 zeroes.4404
02006b68 l     F .text	000000bc __sbprintf
0201b69e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02006d78 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020088d0 l     F .text	00000008 __fp_unlock
020088e4 l     F .text	0000019c __sinit.part.1
02008a80 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0201bda4 l     O .rwdata	00000020 lc_ctype_charset
0201bd84 l     O .rwdata	00000020 lc_message_charset
0201bdc4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0201b6cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200bf54 l     F .text	000000fc __sprint_r.part.0
0201b7f0 l     O .rodata	00000010 zeroes.4349
0200d590 l     F .text	000000bc __sbprintf
0201b800 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02010080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02010194 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020101c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
020102b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0201039c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02010488 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0201065c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201d44c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020108d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201d450 l     O .rwdata	00000004 lockid
0201f09c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201d454 l     O .rwdata	00000004 lockid
0201f0a4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02012308 l     F .text	00000048 OS_InitMisc
02012350 l     F .text	0000006c OS_InitRdyList
020124bc l     F .text	000000e4 OS_InitTCBList
02012228 l     F .text	000000e0 OS_InitEventList
020123bc l     F .text	00000080 OS_InitTaskIdle
0201243c l     F .text	00000080 OS_InitTaskStat
0201272c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201443c l     F .text	000000f4 OS_FlagTaskRdy
020141fc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02018fdc l     F .text	00000034 alt_dev_reg
0201c3ac l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02019354 l     F .text	000002a4 altera_avalon_jtag_uart_irq
020195f8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02019dd4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201a014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201a474 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201a5d4 l     F .text	0000003c alt_get_errno
0201a610 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0201f108 g     O .bss	00000004 alt_instruction_exception_handler
0200b598 g     F .text	00000074 _mprec_log10
0201d4a2 g     O .rwdata	00000002 OSTaskNameSize
0200b684 g     F .text	0000008c __any_on
0200db44 g     F .text	00000054 _isatty_r
0201b6d8 g     O .rodata	00000028 __mprec_tinytens
020105a0 g     F .text	000000bc alt_main
02004704 g     F .text	000000c0 _puts_r
02028358 g     O .bss	00000100 alt_irq
0201f050 g     O .bss	00000004 MailBox6
0200db98 g     F .text	00000060 _lseek_r
02015724 g     F .text	000000d8 OS_MemInit
0201d4d8 g       *ABS*	00000000 __flash_rwdata_start
02018f7c g     F .text	00000060 OSTimeSet
0200f404 g     F .text	00000088 .hidden __eqdf2
02010f7c g     F .text	00000610 OSEventPendMulti
02028458 g       *ABS*	00000000 __alt_heap_start
0201ac4c g     F .text	00000024 OSTaskCreateHook
0201f134 g     O .bss	00002000 task1_stk
020046c8 g     F .text	0000003c printf
0201d47a g     O .rwdata	00000002 OSMboxEn
020115e4 g     F .text	0000004c OSIntEnter
0200ddb0 g     F .text	0000009c _wcrtomb_r
0200be14 g     F .text	0000005c __sseek
02008c30 g     F .text	00000010 __sinit
0200dc58 g     F .text	00000140 __swbuf_r
0201d48a g     O .rwdata	00000002 OSQEn
02009704 g     F .text	0000007c _setlocale_r
02008a88 g     F .text	00000078 __sfmoreglue
02010c50 g     F .text	000000cc __malloc_unlock
0201acb4 g     F .text	00000020 OSTaskStatHook
0201f0ac g     O .bss	00000001 OSLockNesting
02001e34 g     F .text	00000440 .hidden __divsf3
0201d4c8 g     O .rwdata	00000002 OSDataSize
0201f0ad g     O .bss	00000001 OSRunning
0200a3d4 g     F .text	0000015c memmove
0201acf4 g     F .text	00000020 OSInitHookBegin
0201d4c0 g     O .rwdata	00000002 OSTmrSize
02008c18 g     F .text	00000018 _cleanup
0200a658 g     F .text	000000a8 _Balloc
02002d0c g     F .text	00000070 .hidden __fixsfsi
0201f0b0 g     O .bss	00000004 OSIdleCtr
02003870 g     F .text	000000dc .hidden __gtdf2
0201a9fc g     F .text	00000024 altera_nios2_gen2_irq_init
0201aacc g       .text	00000000 OSStartTsk
02004688 g     F .text	00000010 __errno
02012a5c g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000000c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0201d4c6 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201d466 g     O .rwdata	00000002 OSEventSize
0201f0b4 g     O .bss	00000001 OSPrioHighRdy
0200dae8 g     F .text	0000005c _fstat_r
0201ac70 g     F .text	00000024 OSTaskDelHook
0201f088 g     O .bss	00000004 errno
0200bd90 g     F .text	00000008 __seofread
0201aaac g       .text	00000000 OSStartHighRdy
020179fc g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02013d44 g     F .text	00000060 OSFlagPendGetFlagsRdy
0201d4a6 g     O .rwdata	00000002 OSTaskStatStkSize
02012ec0 g     F .text	00000308 OSFlagAccept
02015d68 g     F .text	000000b8 OSQFlush
020157fc g     F .text	00000140 OSQAccept
0201f094 g     O .bss	00000004 alt_argv
02025418 g       *ABS*	00000000 _gp
02002828 g     F .text	000004e4 .hidden __subsf3
02017850 g     F .text	000001ac OSTaskCreate
02017360 g     F .text	000004f0 OSTaskChangePrio
0201f0a8 g     O .bss	00000004 alt_heapsem
02012d30 g     F .text	00000190 OSDebugInit
02017be0 g     F .text	00000344 OSTaskDel
0200167c g     F .text	00000114 sqrtf
0201c22c g     O .rwdata	00000180 alt_fd_list
02025134 g     O .bss	00000370 OSFlagTbl
02012008 g     F .text	000000b8 OS_EventTaskRemove
0201ad78 g     F .text	00000090 alt_find_dev
0200a28c g     F .text	00000148 memcpy
0201d490 g     O .rwdata	00000002 OSRdyTblSize
0201f054 g     O .bss	00000004 MailBox3
020088d8 g     F .text	0000000c _cleanup_r
0200fefc g     F .text	000000dc .hidden __floatsidf
0201a558 g     F .text	0000007c alt_io_redirect
0200f48c g     F .text	000000f4 .hidden __ltdf2
0201b434 g       *ABS*	00000000 __DTOR_END__
020047c4 g     F .text	00000014 puts
0201b004 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02010d1c g     F .text	00000120 OSEventNameGet
0201d474 g     O .rwdata	00000002 OSFlagMax
0200bc74 g     F .text	00000074 __fpclassifyd
0200b4f4 g     F .text	000000a4 __ratio
02011630 g     F .text	000000f8 OSIntExit
0200d574 g     F .text	0000001c __vfiprintf_internal
0201d4ae g     O .rwdata	00000002 OSTCBSize
0201f0b5 g     O .bss	00000001 OSPrioCur
02019854 g     F .text	000002bc altera_avalon_jtag_uart_read
02004698 g     F .text	00000030 _printf_r
020045cc g     F .text	00000064 .hidden __udivsi3
020102f0 g     F .text	000000ac isatty
0201d494 g     O .rwdata	00000002 OSStkWidth
0201b728 g     O .rodata	000000c8 __mprec_tens
0201d488 g     O .rwdata	00000002 OSPtrSize
02009780 g     F .text	0000000c __locale_charset
02002330 g     F .text	000000c8 .hidden __lesf2
0201d468 g     O .rwdata	00000002 OSEventTblSize
0201aa20 g       .text	00000000 OSCtxSw
0201f084 g     O .bss	00000004 __malloc_top_pad
0201f0b8 g     O .bss	00000004 OSTCBList
020018ec g     F .text	00000058 __fpclassifyf
0201f08c g     O .bss	00000004 alt_fd_list_lock
0201d424 g     O .rwdata	00000004 __mb_cur_max
020097b0 g     F .text	0000000c _localeconv_r
0200aa8c g     F .text	0000003c __i2b
020090b4 g     F .text	000004c8 __sfvwrite_r
020254a4 g     O .bss	00000c30 OSMemTbl
0201f0bc g     O .bss	00000001 OSTickStepState
0200bce8 g     F .text	00000054 _sbrk_r
0201d48c g     O .rwdata	00000002 OSQMax
020260d4 g     O .bss	00000800 OSTaskStatStk
02015360 g     F .text	000000f0 OSMemNameGet
0201d46c g     O .rwdata	00000002 OSFlagEn
0200dbf8 g     F .text	00000060 _read_r
0201d4b2 g     O .rwdata	00000002 OSTimeTickHookEn
02016218 g     F .text	00000168 OSQPost
02014530 g     F .text	000000a4 OS_FlagUnlink
0201d444 g     O .rwdata	00000004 alt_max_fd
020125f4 g     F .text	00000068 OS_MemCopy
0201265c g     F .text	000000d0 OS_Sched
0200d7dc g     F .text	000000f0 _fclose_r
02015270 g     F .text	000000f0 OSMemGet
02014f8c g     F .text	00000110 OSMboxQuery
0201820c g     F .text	000001b4 OSTaskNameSet
020088a0 g     F .text	00000030 fflush
0201f080 g     O .bss	00000004 __malloc_max_sbrked_mem
0201f0c0 g     O .bss	00000004 OSCtxSwCtr
0201acd4 g     F .text	00000020 OSTimeTickHook
0201d476 g     O .rwdata	00000002 OSFlagNameSize
0201f058 g     O .bss	00000004 AnimationFlagGrp
020041b8 g     F .text	00000110 .hidden __extendsfdf2
020120c0 g     F .text	00000100 OS_EventTaskRemoveMulti
0200eb58 g     F .text	000008ac .hidden __adddf3
02011eb8 g     F .text	00000150 OS_EventTaskWaitMulti
0200b29c g     F .text	0000010c __b2d
0201d48e g     O .rwdata	00000002 OSQSize
0200e594 g     F .text	000005c4 .hidden __umoddi3
020104c4 g     F .text	000000dc lseek
02016cc8 g     F .text	0000020c OSSemPend
0201d418 g     O .rwdata	00000004 __fdlib_version
0201d41c g     O .rwdata	00000004 _global_impure_ptr
0200b710 g     F .text	00000564 _realloc_r
0201d478 g     O .rwdata	00000002 OSLowestPrio
02028458 g       *ABS*	00000000 __bss_end
0201a384 g     F .text	000000f0 alt_iic_isr_register
0201ad54 g     F .text	00000024 OSTCBInitHook
0201d4be g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0201a8f4 g     F .text	00000108 alt_tick
02014d20 g     F .text	00000110 OSMboxPost
0200df98 g     F .text	000005fc .hidden __udivdi3
0200da44 g     F .text	00000024 _fputwc_r
0201d460 g     O .rwdata	00000002 OSEventEn
0201b700 g     O .rodata	00000028 __mprec_bigtens
0200a870 g     F .text	00000104 __s2b
0201d4ba g     O .rwdata	00000002 OSTmrCfgNameSize
0200ffd8 g     F .text	000000a8 .hidden __floatunsidf
0200afdc g     F .text	00000060 __mcmp
02008c50 g     F .text	00000018 __fp_lock_all
0201a338 g     F .text	0000004c alt_ic_irq_enabled
0201f05c g     O .bss	00000004 MailBox5
0201435c g     F .text	000000e0 OS_FlagInit
0201a858 g     F .text	0000009c alt_alarm_stop
0201d49c g     O .rwdata	00000002 OSTaskIdleStkSize
0201f0fc g     O .bss	00000004 alt_irq_active
02016900 g     F .text	000000b0 OSSemAccept
02015564 g     F .text	000000d8 OSMemPut
0201509c g     F .text	000001d4 OSMemCreate
0201f0c4 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201c204 g     O .rwdata	00000028 alt_dev_null
0201d4b0 g     O .rwdata	00000002 OSTicksPerSec
0201aa20 g       .text	00000000 OSIntCtxSw
02019ff4 g     F .text	00000020 alt_dcache_flush_all
0200a974 g     F .text	00000068 __hi0bits
0200fe7c g     F .text	00000080 .hidden __fixdfsi
0201f0c8 g     O .bss	00000004 OSTCBFreeList
0201d4d8 g       *ABS*	00000000 __ram_rwdata_end
02016ed4 g     F .text	0000016c OSSemPendAbort
0201d43c g     O .rwdata	00000008 alt_dev_list
0201090c g     F .text	00000100 write
0201d4b4 g     O .rwdata	00000002 OSVersionNbr
02002274 g     F .text	000000bc .hidden __gtsf2
0201b960 g       *ABS*	00000000 __ram_rodata_end
020101fc g     F .text	000000b8 fstat
0200f48c g     F .text	000000f4 .hidden __ledf2
0201d45c g     O .rwdata	00000004 OSEndiannessTest
0200ad54 g     F .text	00000140 __pow5mult
0200c068 g     F .text	0000150c ___vfiprintf_internal_r
0201f078 g     O .bss	00000004 __nlocale_changed
02004630 g     F .text	00000058 .hidden __umodsi3
0201d46e g     O .rwdata	00000002 OSFlagGrpSize
02028458 g       *ABS*	00000000 end
0201920c g     F .text	00000148 altera_avalon_jtag_uart_init
020128c4 g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0201b434 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02019e4c g     F .text	0000007c alt_avalon_timer_sc_init
02004470 g     F .text	00000064 .hidden __clzsi2
02019b10 g     F .text	000002c4 altera_avalon_jtag_uart_write
02008c40 g     F .text	00000004 __sfp_lock_acquire
0200a1a8 g     F .text	000000e4 memchr
020125a0 g     F .text	00000054 OS_MemClr
02004870 g     F .text	000022dc ___vfprintf_internal_r
0201aaf0 g     F .text	0000015c OSTaskStkInit
0200026c g     F .text	00000204 task1
02008da4 g     F .text	00000310 _free_r
0200978c g     F .text	00000010 __locale_mb_cur_max
02011c10 g     F .text	00000198 OS_EventTaskRdy
0201b280 g     F .text	00000180 __call_exitprocs
0201f0cc g     O .bss	00000001 OSCPUUsage
0201f074 g     O .bss	00000004 __mlocale_changed
0201d428 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
02000470 g     F .text	00000658 task2
0201f100 g     O .bss	00000004 _alt_tick_rate
02015e20 g     F .text	0000028c OSQPend
02018acc g     F .text	00000104 OSTimeDly
02001524 g     F .text	00000158 borderCollide
0200ae94 g     F .text	00000148 __lshift
0201f104 g     O .bss	00000004 _alt_nticks
02010698 g     F .text	00000104 read
02019048 g     F .text	00000060 alt_sys_init
02002d7c g     F .text	00000124 .hidden __floatsisf
0201b168 g     F .text	00000118 __register_exitproc
0201f0cd g     O .bss	00000001 OSTaskCtr
0201f060 g     O .bss	00000004 MailBox2
02018bd0 g     F .text	0000017c OSTimeDlyHMSM
0200aac8 g     F .text	0000028c __multiply
020196fc g     F .text	00000068 altera_avalon_jtag_uart_close
02001944 g     F .text	00000028 .hidden __mulsi3
0201b960 g       *ABS*	00000000 __ram_rwdata_start
0201b434 g       *ABS*	00000000 __ram_rodata_start
0201f10c g     O .bss	00000028 __malloc_current_mallinfo
0201d462 g     O .rwdata	00000002 OSEventMax
0200b3a8 g     F .text	0000014c __d2b
02017040 g     F .text	00000110 OSSemPost
020117b4 g     F .text	000000dc OSSchedUnlock
020190a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201af10 g     F .text	000000f4 alt_get_fd
0201f0d0 g     O .bss	00000004 OSMemFreeList
02011900 g     F .text	000000b0 OSStatInit
02014138 g     F .text	000000c4 OSFlagQuery
0201d498 g     O .rwdata	00000002 OSTaskCreateExtEn
0200d6ac g     F .text	00000054 _close_r
0201b0ec g     F .text	0000007c memcmp
02011bf0 g     F .text	00000020 OS_Dummy
02019168 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02028458 g       *ABS*	00000000 __alt_stack_base
020191b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02006c24 g     F .text	00000154 __swsetup_r
020268d4 g     O .bss	000001e0 OSQTbl
02002ea0 g     F .text	000009d0 .hidden __divdf3
02008b00 g     F .text	00000118 __sfp
0200b60c g     F .text	00000078 __copybits
0201bdfc g     O .rwdata	00000408 __malloc_av_
02008c4c g     F .text	00000004 __sinit_lock_release
0201f0d4 g     O .bss	00000004 OSTCBHighRdy
0200394c g     F .text	0000086c .hidden __muldf3
0200bd3c g     F .text	00000054 __sread
0201f0d8 g     O .bss	00000004 OSQFreeList
0201ae08 g     F .text	00000108 alt_find_file
0201a050 g     F .text	000000a4 alt_dev_llist_insert
02010b30 g     F .text	00000120 __malloc_lock
02010820 g     F .text	000000b0 sbrk
02010e3c g     F .text	00000140 OSEventNameSet
02008844 g     F .text	0000005c _fflush_r
0200d700 g     F .text	000000dc _calloc_r
0201f0dc g     O .bss	00000001 OSRdyGrp
0201f050 g       *ABS*	00000000 __bss_start
0200a530 g     F .text	00000128 memset
02001790 g     F .text	00000154 __ieee754_sqrtf
020013d0 g     F .text	00000154 main
0201f098 g     O .bss	00000004 alt_envp
0201f07c g     O .bss	00000004 __malloc_max_total_mem
02019108 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200dd98 g     F .text	00000018 __swbuf
0201b82c g     O .rodata	00000100 OSUnMapTbl
02002330 g     F .text	000000c8 .hidden __ltsf2
0201d492 g     O .rwdata	00000002 OSSemEn
02013da4 g     F .text	00000394 OSFlagPost
0200be70 g     F .text	00000008 __sclose
020018e4 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0200d8cc g     F .text	00000014 fclose
02011da8 g     F .text	00000110 OS_EventTaskWait
02021134 g     O .bss	00002000 task2_stk
020042c8 g     F .text	000001a8 .hidden __truncdfsf2
02012990 g     F .text	000000cc OS_TaskStatStkChk
02017f24 g     F .text	00000150 OSTaskDelReq
02006fa0 g     F .text	00001688 _dtoa_r
0200999c g     F .text	0000080c _malloc_r
0200df0c g     F .text	00000030 __ascii_wctomb
0201d448 g     O .rwdata	00000004 alt_errno
02011890 g     F .text	00000070 OSStart
02023134 g     O .bss	00002000 task3_stk
02010ad0 g     F .text	00000060 __env_unlock
0200957c g     F .text	000000c4 _fwalk
020183c0 g     F .text	000001d4 OSTaskResume
0201563c g     F .text	000000e8 OSMemQuery
0201d4a4 g     O .rwdata	00000002 OSTaskStatEn
0201d47e g     O .rwdata	00000002 OSMemMax
02016380 g     F .text	00000170 OSQPostFront
020044d4 g     F .text	00000084 .hidden __divsi3
0201f0dd g     O .bss	00000003 OSRdyTbl
0201d458 g     O .rwdata	00000002 OSDebugEn
02008c80 g     F .text	00000124 _malloc_trim_r
0201f064 g     O .bss	00000004 MailBox4
0201b434 g       *ABS*	00000000 __CTOR_END__
020023f8 g     F .text	00000430 .hidden __mulsf3
0201d470 g     O .rwdata	00000002 OSFlagNodeSize
0201d4b8 g     O .rwdata	00000002 OSTmrCfgMax
0200be78 g     F .text	000000dc strcmp
0201593c g     F .text	000001ac OSQCreate
02018074 g     F .text	00000198 OSTaskNameGet
0201b434 g       *ABS*	00000000 __flash_rodata_start
020164f0 g     F .text	0000020c OSQPostOpt
020119b0 g     F .text	00000220 OSTimeTick
0201d4a0 g     O .rwdata	00000002 OSTaskMax
0201b434 g       *ABS*	00000000 __DTOR_LIST__
020169b0 g     F .text	000000d8 OSSemCreate
0201d4c4 g     O .rwdata	00000002 OSTmrWheelSize
0200f404 g     F .text	00000088 .hidden __nedf2
0201d49a g     O .rwdata	00000002 OSTaskDelEn
02017150 g     F .text	00000110 OSSemQuery
02015ae8 g     F .text	00000280 OSQDel
020160ac g     F .text	0000016c OSQPendAbort
02019010 g     F .text	00000038 alt_irq_init
0201079c g     F .text	00000084 alt_release_fd
0201b542 g     O .rodata	00000100 .hidden __clz_tab
0201f070 g     O .bss	00000004 _PathLocale
0201b0a0 g     F .text	00000014 atexit
02002274 g     F .text	000000bc .hidden __gesf2
0200d64c g     F .text	00000060 _write_r
02011728 g     F .text	0000008c OSSchedLock
020097bc g     F .text	00000018 setlocale
020131c8 g     F .text	00000108 OSFlagCreate
0201d420 g     O .rwdata	00000004 _impure_ptr
0201f090 g     O .bss	00000004 alt_argc
02008628 g     F .text	0000021c __sflush_r
0201a154 g     F .text	00000060 _do_dtors
020097a8 g     F .text	00000008 __locale_cjk_lang
0201d46a g     O .rwdata	00000002 OSEventMultiEn
020132d0 g     F .text	00000248 OSFlagDel
0201f0e0 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02014bb4 g     F .text	0000016c OSMboxPendAbort
0200b238 g     F .text	00000064 __ulp
0201d4b6 g     O .rwdata	00000002 OSTmrEn
0201378c g     F .text	000005b8 OSFlagPend
02008c68 g     F .text	00000018 __fp_unlock_all
0201d434 g     O .rwdata	00000008 alt_fs_list
020127a0 g     F .text	00000074 OS_StrCopy
0201d480 g     O .rwdata	00000002 OSMemNameSize
0201ad14 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201d4ac g     O .rwdata	00000002 OSTCBPrioTblMax
020097d4 g     F .text	0000000c localeconv
0201d4a8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201466c g     F .text	000000d4 OSMboxCreate
0201a1d4 g     F .text	00000050 alt_ic_isr_register
0201d47c g     O .rwdata	00000002 OSMemEn
0201d486 g     O .rwdata	00000002 OSMutexEn
0201d4d8 g       *ABS*	00000000 _edata
02000ee4 g     F .text	000004ec collide_calc
02028458 g       *ABS*	00000000 _end
0201f0e4 g     O .bss	00000001 OSIntNesting
0200d8e0 g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
02019764 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02018d4c g     F .text	000001d4 OSTimeDlyResume
02013640 g     F .text	0000014c OSFlagNameSet
02014980 g     F .text	00000234 OSMboxPend
02018594 g     F .text	000001c0 OSTaskStkChk
0201a2ac g     F .text	0000008c alt_ic_irq_disable
0201d482 g     O .rwdata	00000002 OSMemSize
0200bd98 g     F .text	0000007c __swrite
0201d42c g     O .rwdata	00000004 __malloc_trim_threshold
0200979c g     F .text	0000000c __locale_msgcharset
0201f0e8 g     O .bss	00000004 OSTCBCur
0201b0b4 g     F .text	00000038 exit
0201d484 g     O .rwdata	00000002 OSMemTblSize
02009640 g     F .text	000000c4 _fwalk_reent
0201f068 g     O .bss	00000004 MailBox1
0200b03c g     F .text	000001fc __mdiff
02004558 g     F .text	00000074 .hidden __modsi3
020145d4 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02008c44 g     F .text	00000004 __sfp_lock_release
0201158c g     F .text	00000058 OSInit
02018938 g     F .text	00000124 OSTaskQuery
02016858 g     F .text	000000a8 OS_QInit
02012814 g     F .text	00000054 OS_StrLen
02015450 g     F .text	00000114 OSMemNameSet
0201d49e g     O .rwdata	00000002 OSTaskProfileEn
0201f0ec g     O .bss	00000004 OSTime
0201f06c g     O .bss	00000004 isActiveFlagGrp
02026ab4 g     O .bss	00000800 OSTaskIdleStk
0201b400 g     F .text	00000034 _exit
02014e30 g     F .text	0000015c OSMboxPostOpt
02019ec8 g     F .text	0000012c alt_alarm_start
02013518 g     F .text	00000128 OSFlagNameGet
02000d58 g     F .text	0000018c detect_collide
02018f20 g     F .text	0000005c OSTimeGet
020097e0 g     F .text	000001bc __smakebuf_r
020047d8 g     F .text	00000098 strlen
0201ac94 g     F .text	00000020 OSTaskSwHook
0201a6fc g     F .text	0000015c open
020272b4 g     O .bss	00000b40 OSEventTbl
02003870 g     F .text	000000dc .hidden __gedf2
02027df4 g     O .bss	00000510 OSTCBTbl
02017260 g     F .text	00000100 OSSemSet
0201d430 g     O .rwdata	00000004 __wctomb
0200c050 g     F .text	00000018 __sprint_r
0201a1b4 g     F .text	00000020 alt_icache_flush_all
0201d4cc g     O .rwdata	00000004 alt_priority_mask
02016a88 g     F .text	00000240 OSSemDel
0201f0f0 g     O .bss	00000004 OSFlagFreeList
02000ac8 g     F .text	00000290 task3
0201a224 g     F .text	00000088 alt_ic_irq_enable
0201d464 g     O .rwdata	00000002 OSEventNameSize
02014740 g     F .text	00000240 OSMboxDel
02006b4c g     F .text	0000001c __vfprintf_internal
0201f0f4 g     O .bss	00000001 OSStatRdy
02028304 g     O .bss	00000054 OSTCBPrioTbl
0200df3c g     F .text	0000005c _wctomb_r
02010a0c g     F .text	000000c4 __env_lock
0201d4aa g     O .rwdata	00000002 OSTaskSwHookEn
0200f580 g     F .text	000008fc .hidden __subdf3
0200a9dc g     F .text	000000b0 __lo0bits
0201d4d0 g     O .rwdata	00000008 alt_alarm_list
0201d472 g     O .rwdata	00000002 OSFlagWidth
0201a0f4 g     F .text	00000060 _do_ctors
0200de4c g     F .text	000000c0 wcrtomb
020100bc g     F .text	000000d8 close
0200196c g     F .text	000004c8 .hidden __addsf3
0201f0a0 g     O .bss	00000004 alt_envsem
0201f0f8 g     O .bss	00000004 OSIdleCtrRun
02011bd0 g     F .text	00000020 OSVersion
0201d4bc g     O .rwdata	00000002 OSTmrCfgWheelSize
02010404 g     F .text	00000084 alt_load
02018a5c g     F .text	00000070 OS_TaskStkClr
0201d496 g     O .rwdata	00000002 OSTaskCreateEn
020121c0 g     F .text	00000068 OS_EventWaitListInit
0200da68 g     F .text	00000080 fputwc
0201ad34 g     F .text	00000020 OSTaskIdleHook
02008c48 g     F .text	00000004 __sinit_lock_acquire
0200a728 g     F .text	00000148 __multadd
02018754 g     F .text	000001e4 OSTaskSuspend
0200a700 g     F .text	00000028 _Bfree
02012868 g     F .text	0000005c OS_TaskIdle
0201d4c2 g     O .rwdata	00000002 OSTmrTblSize
020166fc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20115e40 	call	20115e4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10a0d604 	addi	r2,r2,-31912
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10a0d604 	addi	r2,r2,-31912
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	20116300 	call	2011630 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a73c17 	ldw	r2,-25360(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a73c17 	ldw	r2,-25360(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 200023c:	d6950614 	ori	gp,gp,21528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10bc1414 	ori	r2,r2,61520

    movhi r3, %hi(__bss_end)
 2000248:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 200024c:	18e11614 	ori	r3,r3,33880

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	20104040 	call	2010404 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	20105a00 	call	20105a0 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <alt_after_alt_main>

0200026c <task1>:
#define IS_ACTIVE (OS_FLAGS) 0x0001
#define ANIMATION (OS_FLAGS) 0x0001

/*  */
void task1(void* pdata)
{
 200026c:	deffeb04 	addi	sp,sp,-84
 2000270:	dfc01415 	stw	ra,80(sp)
 2000274:	df001315 	stw	fp,76(sp)
 2000278:	df001304 	addi	fp,sp,76
 200027c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2000280:	008000b4 	movhi	r2,2
 2000284:	e0bff415 	stw	r2,-48(fp)
	int count_old = 0;
 2000288:	e03ff515 	stw	zero,-44(fp)
	int count = 0;
 200028c:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 2000290:	e03ff315 	stw	zero,-52(fp)

	while (1)
	{
		printf("wait for isActive\n");
 2000294:	010080b4 	movhi	r4,514
 2000298:	212d0d04 	addi	r4,r4,-19404
 200029c:	20047c40 	call	20047c4 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002a0:	d0e71517 	ldw	r3,-25516(gp)
 20002a4:	e0bffc04 	addi	r2,fp,-16
 20002a8:	d8800015 	stw	r2,0(sp)
 20002ac:	000f883a 	mov	r7,zero
 20002b0:	01802084 	movi	r6,130
 20002b4:	01400044 	movi	r5,1
 20002b8:	1809883a 	mov	r4,r3
 20002bc:	201378c0 	call	201378c <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002c0:	00004906 	br	20003e8 <task1+0x17c>
		{
			count_old = count;
 20002c4:	e0bfee17 	ldw	r2,-72(fp)
 20002c8:	e0bff515 	stw	r2,-44(fp)
			count = *(MTL_controller + 10); // récupère le nombre de doigts présent sur l'écran
 20002cc:	e0bff417 	ldw	r2,-48(fp)
 20002d0:	10800a17 	ldw	r2,40(r2)
 20002d4:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = *(MTL_controller + 11);
 20002d8:	e0bff417 	ldw	r2,-48(fp)
 20002dc:	10800b17 	ldw	r2,44(r2)
 20002e0:	e0bff615 	stw	r2,-40(fp)
			int pos2 = *(MTL_controller + 12);
 20002e4:	e0bff417 	ldw	r2,-48(fp)
 20002e8:	10800c17 	ldw	r2,48(r2)
 20002ec:	e0bff715 	stw	r2,-36(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 20002f0:	e0bff517 	ldw	r2,-44(fp)
 20002f4:	10800058 	cmpnei	r2,r2,1
 20002f8:	1000121e 	bne	r2,zero,2000344 <task1+0xd8>
 20002fc:	e0bfee17 	ldw	r2,-72(fp)
 2000300:	10800098 	cmpnei	r2,r2,2
 2000304:	10000f1e 	bne	r2,zero,2000344 <task1+0xd8>
			{
				printf("start gesture\n");
 2000308:	010080b4 	movhi	r4,514
 200030c:	212d1204 	addi	r4,r4,-19384
 2000310:	20047c40 	call	20047c4 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000314:	e0bff617 	ldw	r2,-40(fp)
 2000318:	1080ffcc 	andi	r2,r2,1023
 200031c:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000320:	e0bff617 	ldw	r2,-40(fp)
 2000324:	1005d2ba 	srai	r2,r2,10
 2000328:	e0bff115 	stw	r2,-60(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200032c:	e0bff717 	ldw	r2,-36(fp)
 2000330:	1080ffcc 	andi	r2,r2,1023
 2000334:	e0bff815 	stw	r2,-32(fp)
				y2_gesture_start = pos2 >> 10;
 2000338:	e0bff717 	ldw	r2,-36(fp)
 200033c:	1005d2ba 	srai	r2,r2,10
 2000340:	e0bff915 	stw	r2,-28(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000344:	e0bff517 	ldw	r2,-44(fp)
 2000348:	10800098 	cmpnei	r2,r2,2
 200034c:	1000261e 	bne	r2,zero,20003e8 <task1+0x17c>
 2000350:	e0bfee17 	ldw	r2,-72(fp)
 2000354:	10800058 	cmpnei	r2,r2,1
 2000358:	1000231e 	bne	r2,zero,20003e8 <task1+0x17c>
			{
				printf("stop gesture\n");
 200035c:	010080b4 	movhi	r4,514
 2000360:	212d1604 	addi	r4,r4,-19368
 2000364:	20047c40 	call	20047c4 <puts>
				x1_gesture_stop = pos1 & 0x0003FF;
 2000368:	e0bff617 	ldw	r2,-40(fp)
 200036c:	1080ffcc 	andi	r2,r2,1023
 2000370:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 2000374:	e0bff617 	ldw	r2,-40(fp)
 2000378:	1005d2ba 	srai	r2,r2,10
 200037c:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 2000380:	e0bff717 	ldw	r2,-36(fp)
 2000384:	1080ffcc 	andi	r2,r2,1023
 2000388:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_stop = pos2 >> 10;
 200038c:	e0bff717 	ldw	r2,-36(fp)
 2000390:	1005d2ba 	srai	r2,r2,10
 2000394:	e0bff215 	stw	r2,-56(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000398:	e0bfef17 	ldw	r2,-68(fp)
 200039c:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003a0:	e0fffa17 	ldw	r3,-24(fp)
 20003a4:	18800e16 	blt	r3,r2,20003e0 <task1+0x174>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003a8:	e0bfef17 	ldw	r2,-68(fp)
 20003ac:	10c00784 	addi	r3,r2,30
 20003b0:	e0bffa17 	ldw	r2,-24(fp)
 20003b4:	18800a16 	blt	r3,r2,20003e0 <task1+0x174>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003b8:	e0bff117 	ldw	r2,-60(fp)
 20003bc:	10bff884 	addi	r2,r2,-30
 20003c0:	e0fffb17 	ldw	r3,-20(fp)
 20003c4:	18800616 	blt	r3,r2,20003e0 <task1+0x174>
 20003c8:	e0bff117 	ldw	r2,-60(fp)
 20003cc:	10c00784 	addi	r3,r2,30
 20003d0:	e0bffb17 	ldw	r2,-20(fp)
 20003d4:	18800216 	blt	r3,r2,20003e0 <task1+0x174>
 20003d8:	00800044 	movi	r2,1
 20003dc:	00000106 	br	20003e4 <task1+0x178>
 20003e0:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003e4:	e0bff315 	stw	r2,-52(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20003e8:	e0bff317 	ldw	r2,-52(fp)
 20003ec:	103fb526 	beq	r2,zero,20002c4 <task1+0x58>

			//*(MTL_controller + 1) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 2) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 3) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		int x_dir = (x2_gesture_stop - x1_gesture_start);
 20003f0:	e0fff017 	ldw	r3,-64(fp)
 20003f4:	e0bfef17 	ldw	r2,-68(fp)
 20003f8:	1885c83a 	sub	r2,r3,r2
 20003fc:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000400:	e0fff217 	ldw	r3,-56(fp)
 2000404:	e0bff117 	ldw	r2,-60(fp)
 2000408:	1885c83a 	sub	r2,r3,r2
 200040c:	e0bffe15 	stw	r2,-8(fp)
		printf("Send value : (%d, %d)\n", x_dir, y_dir);
 2000410:	e0bffd17 	ldw	r2,-12(fp)
 2000414:	e0fffe17 	ldw	r3,-8(fp)
 2000418:	180d883a 	mov	r6,r3
 200041c:	100b883a 	mov	r5,r2
 2000420:	010080b4 	movhi	r4,514
 2000424:	212d1a04 	addi	r4,r4,-19352
 2000428:	20046c80 	call	20046c8 <printf>
		OSMboxPost(MailBox1, &x_dir);
 200042c:	d0a71417 	ldw	r2,-25520(gp)
 2000430:	e0fffd04 	addi	r3,fp,-12
 2000434:	180b883a 	mov	r5,r3
 2000438:	1009883a 	mov	r4,r2
 200043c:	2014d200 	call	2014d20 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000440:	d0a71217 	ldw	r2,-25528(gp)
 2000444:	e0fffe04 	addi	r3,fp,-8
 2000448:	180b883a 	mov	r5,r3
 200044c:	1009883a 	mov	r4,r2
 2000450:	2014d200 	call	2014d20 <OSMboxPost>
		gesture_detected = 0;
 2000454:	e03ff315 	stw	zero,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 2000458:	01c07d04 	movi	r7,500
 200045c:	000d883a 	mov	r6,zero
 2000460:	000b883a 	mov	r5,zero
 2000464:	0009883a 	mov	r4,zero
 2000468:	2018bd00 	call	2018bd0 <OSTimeDlyHMSM>
	}
 200046c:	003f8906 	br	2000294 <task1+0x28>

02000470 <task2>:
}

void task2(void* pdata)
{
 2000470:	deffda04 	addi	sp,sp,-152
 2000474:	dfc02515 	stw	ra,148(sp)
 2000478:	df002415 	stw	fp,144(sp)
 200047c:	dc402315 	stw	r17,140(sp)
 2000480:	dc002215 	stw	r16,136(sp)
 2000484:	df002404 	addi	fp,sp,144
 2000488:	e13ffd15 	stw	r4,-12(fp)
  float *result_collide; //modified

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 200048c:	008000b4 	movhi	r2,2
 2000490:	e0bfe215 	stw	r2,-120(fp)
  float x_ball = 200.0;
 2000494:	0090d234 	movhi	r2,17224
 2000498:	e0bfdd15 	stw	r2,-140(fp)
  float y_ball = 200.0;
 200049c:	0090d234 	movhi	r2,17224
 20004a0:	e0bfde15 	stw	r2,-136(fp)
  float x_ball2= 400.0;
 20004a4:	0090f234 	movhi	r2,17352
 20004a8:	e0bfdf15 	stw	r2,-132(fp)
  float y_ball2= 200.0;
 20004ac:	0090d234 	movhi	r2,17224
 20004b0:	e0bfe015 	stw	r2,-128(fp)

  float ball1[2]={x_ball,y_ball};
 20004b4:	e0bfdd17 	ldw	r2,-140(fp)
 20004b8:	e0bfeb15 	stw	r2,-84(fp)
 20004bc:	e0bfde17 	ldw	r2,-136(fp)
 20004c0:	e0bfec15 	stw	r2,-80(fp)
  //printf("position ball1:%.2f,%.2f\n",ball1[0],ball1[1]);
  float ball2[2]={x_ball2,y_ball2};
 20004c4:	e0bfdf17 	ldw	r2,-132(fp)
 20004c8:	e0bfed15 	stw	r2,-76(fp)
 20004cc:	e0bfe017 	ldw	r2,-128(fp)
 20004d0:	e0bfee15 	stw	r2,-72(fp)
  //printf("position ball2:%.2f,%.2f\n",ball2[0],ball2[1]);
  *(display + 1) = ((int) (y_ball) << 10) + (int) (x_ball);
 20004d4:	e0bfe217 	ldw	r2,-120(fp)
 20004d8:	14000104 	addi	r16,r2,4
 20004dc:	e13fde17 	ldw	r4,-136(fp)
 20004e0:	2002d0c0 	call	2002d0c <__fixsfsi>
 20004e4:	102292ba 	slli	r17,r2,10
 20004e8:	e13fdd17 	ldw	r4,-140(fp)
 20004ec:	2002d0c0 	call	2002d0c <__fixsfsi>
 20004f0:	8885883a 	add	r2,r17,r2
 20004f4:	80800015 	stw	r2,0(r16)
  *(display + 2) = ((int) (y_ball2) << 10) + (int) (x_ball2);
 20004f8:	e0bfe217 	ldw	r2,-120(fp)
 20004fc:	14000204 	addi	r16,r2,8
 2000500:	e13fe017 	ldw	r4,-128(fp)
 2000504:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000508:	102292ba 	slli	r17,r2,10
 200050c:	e13fdf17 	ldw	r4,-132(fp)
 2000510:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000514:	8885883a 	add	r2,r17,r2
 2000518:	80800015 	stw	r2,0(r16)
  int collision=0;
 200051c:	e03fe315 	stw	zero,-116(fp)

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 2000520:	00800044 	movi	r2,1
 2000524:	e0bfe405 	stb	r2,-112(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000528:	d0a71017 	ldw	r2,-25536(gp)
 200052c:	e0ffe403 	ldbu	r3,-112(fp)
 2000530:	e13fea04 	addi	r4,fp,-88
 2000534:	200f883a 	mov	r7,r4
 2000538:	180d883a 	mov	r6,r3
 200053c:	01400044 	movi	r5,1
 2000540:	1009883a 	mov	r4,r2
 2000544:	2013da40 	call	2013da4 <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 2000548:	d0a71317 	ldw	r2,-25524(gp)
 200054c:	e0ffea04 	addi	r3,fp,-88
 2000550:	180d883a 	mov	r6,r3
 2000554:	000b883a 	mov	r5,zero
 2000558:	1009883a 	mov	r4,r2
 200055c:	20149800 	call	2014980 <OSMboxPend>
 2000560:	e0bfe515 	stw	r2,-108(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 2000564:	d0a71117 	ldw	r2,-25532(gp)
 2000568:	e0ffea04 	addi	r3,fp,-88
 200056c:	180d883a 	mov	r6,r3
 2000570:	000b883a 	mov	r5,zero
 2000574:	1009883a 	mov	r4,r2
 2000578:	20149800 	call	2014980 <OSMboxPend>
 200057c:	e0bfe615 	stw	r2,-104(fp)

   float x = (float) *vector_x;
 2000580:	e0bfe517 	ldw	r2,-108(fp)
 2000584:	10800017 	ldw	r2,0(r2)
 2000588:	1009883a 	mov	r4,r2
 200058c:	2002d7c0 	call	2002d7c <__floatsisf>
 2000590:	1007883a 	mov	r3,r2
 2000594:	e0ffe715 	stw	r3,-100(fp)
   float y = (float) *vector_y;
 2000598:	e0bfe617 	ldw	r2,-104(fp)
 200059c:	10800017 	ldw	r2,0(r2)
 20005a0:	1009883a 	mov	r4,r2
 20005a4:	2002d7c0 	call	2002d7c <__floatsisf>
 20005a8:	1007883a 	mov	r3,r2
 20005ac:	e0ffe815 	stw	r3,-96(fp)

   printf("Launch animation : (%d, %d)\n",*vector_x, *vector_y);
 20005b0:	e0bfe517 	ldw	r2,-108(fp)
 20005b4:	10c00017 	ldw	r3,0(r2)
 20005b8:	e0bfe617 	ldw	r2,-104(fp)
 20005bc:	10800017 	ldw	r2,0(r2)
 20005c0:	100d883a 	mov	r6,r2
 20005c4:	180b883a 	mov	r5,r3
 20005c8:	010080b4 	movhi	r4,514
 20005cc:	212d2004 	addi	r4,r4,-19328
 20005d0:	20046c80 	call	20046c8 <printf>
   float length = sqrtf(x*x + y*y);
 20005d4:	e17fe717 	ldw	r5,-100(fp)
 20005d8:	e13fe717 	ldw	r4,-100(fp)
 20005dc:	20023f80 	call	20023f8 <__mulsf3>
 20005e0:	1007883a 	mov	r3,r2
 20005e4:	1821883a 	mov	r16,r3
 20005e8:	e17fe817 	ldw	r5,-96(fp)
 20005ec:	e13fe817 	ldw	r4,-96(fp)
 20005f0:	20023f80 	call	20023f8 <__mulsf3>
 20005f4:	1007883a 	mov	r3,r2
 20005f8:	1805883a 	mov	r2,r3
 20005fc:	100b883a 	mov	r5,r2
 2000600:	8009883a 	mov	r4,r16
 2000604:	200196c0 	call	200196c <__addsf3>
 2000608:	1007883a 	mov	r3,r2
 200060c:	1805883a 	mov	r2,r3
 2000610:	1009883a 	mov	r4,r2
 2000614:	200167c0 	call	200167c <sqrtf>
 2000618:	e0bfe915 	stw	r2,-92(fp)
   float direction [] = {x/length, y/length};
 200061c:	e17fe917 	ldw	r5,-92(fp)
 2000620:	e13fe717 	ldw	r4,-100(fp)
 2000624:	2001e340 	call	2001e34 <__divsf3>
 2000628:	1007883a 	mov	r3,r2
 200062c:	1805883a 	mov	r2,r3
 2000630:	e0bfef15 	stw	r2,-68(fp)
 2000634:	e17fe917 	ldw	r5,-92(fp)
 2000638:	e13fe817 	ldw	r4,-96(fp)
 200063c:	2001e340 	call	2001e34 <__divsf3>
 2000640:	1007883a 	mov	r3,r2
 2000644:	1805883a 	mov	r2,r3
 2000648:	e0bff015 	stw	r2,-64(fp)
   float speed = length / 2.0;
 200064c:	01500034 	movhi	r5,16384
 2000650:	e13fe917 	ldw	r4,-92(fp)
 2000654:	2001e340 	call	2001e34 <__divsf3>
 2000658:	1007883a 	mov	r3,r2
 200065c:	e0ffe115 	stw	r3,-124(fp)

   float velocity1 [] = {direction[0] * speed/10.0, direction[1] * speed/10.0};
 2000660:	e0bfef17 	ldw	r2,-68(fp)
 2000664:	e17fe117 	ldw	r5,-124(fp)
 2000668:	1009883a 	mov	r4,r2
 200066c:	20023f80 	call	20023f8 <__mulsf3>
 2000670:	1007883a 	mov	r3,r2
 2000674:	1805883a 	mov	r2,r3
 2000678:	01504834 	movhi	r5,16672
 200067c:	1009883a 	mov	r4,r2
 2000680:	2001e340 	call	2001e34 <__divsf3>
 2000684:	1007883a 	mov	r3,r2
 2000688:	1805883a 	mov	r2,r3
 200068c:	e0bff115 	stw	r2,-60(fp)
 2000690:	e0bff017 	ldw	r2,-64(fp)
 2000694:	e17fe117 	ldw	r5,-124(fp)
 2000698:	1009883a 	mov	r4,r2
 200069c:	20023f80 	call	20023f8 <__mulsf3>
 20006a0:	1007883a 	mov	r3,r2
 20006a4:	1805883a 	mov	r2,r3
 20006a8:	01504834 	movhi	r5,16672
 20006ac:	1009883a 	mov	r4,r2
 20006b0:	2001e340 	call	2001e34 <__divsf3>
 20006b4:	1007883a 	mov	r3,r2
 20006b8:	1805883a 	mov	r2,r3
 20006bc:	e0bff215 	stw	r2,-56(fp)
   float velocity2 [2];

   int border_collision [2][4] = {{0, 0, 0, 0},{0, 0, 0, 0}};
 20006c0:	e03ff515 	stw	zero,-44(fp)
 20006c4:	e03ff615 	stw	zero,-40(fp)
 20006c8:	e03ff715 	stw	zero,-36(fp)
 20006cc:	e03ff815 	stw	zero,-32(fp)
 20006d0:	e03ff915 	stw	zero,-28(fp)
 20006d4:	e03ffa15 	stw	zero,-24(fp)
 20006d8:	e03ffb15 	stw	zero,-20(fp)
 20006dc:	e03ffc15 	stw	zero,-16(fp)
   collision = detect_collide(ball1,ball2,velocity1);
 20006e0:	e13ff104 	addi	r4,fp,-60
 20006e4:	e0ffed04 	addi	r3,fp,-76
 20006e8:	e0bfeb04 	addi	r2,fp,-84
 20006ec:	200d883a 	mov	r6,r4
 20006f0:	180b883a 	mov	r5,r3
 20006f4:	1009883a 	mov	r4,r2
 20006f8:	2000d580 	call	2000d58 <detect_collide>
 20006fc:	e0bfe315 	stw	r2,-116(fp)

   while(speed >= 0.01)
 2000700:	0000ce06 	br	2000a3c <task2+0x5cc>
   {
	   	//Border Collide
       borderCollide((int) x_ball, (int) y_ball, border_collision[0], velocity1);
 2000704:	e13fdd17 	ldw	r4,-140(fp)
 2000708:	2002d0c0 	call	2002d0c <__fixsfsi>
 200070c:	1021883a 	mov	r16,r2
 2000710:	e13fde17 	ldw	r4,-136(fp)
 2000714:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000718:	1009883a 	mov	r4,r2
 200071c:	e0fff104 	addi	r3,fp,-60
 2000720:	e0bff504 	addi	r2,fp,-44
 2000724:	180f883a 	mov	r7,r3
 2000728:	100d883a 	mov	r6,r2
 200072c:	200b883a 	mov	r5,r4
 2000730:	8009883a 	mov	r4,r16
 2000734:	20015240 	call	2001524 <borderCollide>
       borderCollide((int) x_ball2, (int) y_ball2, border_collision[0], velocity2);
 2000738:	e13fdf17 	ldw	r4,-132(fp)
 200073c:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000740:	1021883a 	mov	r16,r2
 2000744:	e13fe017 	ldw	r4,-128(fp)
 2000748:	2002d0c0 	call	2002d0c <__fixsfsi>
 200074c:	1009883a 	mov	r4,r2
 2000750:	e0fff304 	addi	r3,fp,-52
 2000754:	e0bff504 	addi	r2,fp,-44
 2000758:	180f883a 	mov	r7,r3
 200075c:	100d883a 	mov	r6,r2
 2000760:	200b883a 	mov	r5,r4
 2000764:	8009883a 	mov	r4,r16
 2000768:	20015240 	call	2001524 <borderCollide>


       //Move the ball
       x_ball += velocity1[0];
 200076c:	e0bff117 	ldw	r2,-60(fp)
 2000770:	100b883a 	mov	r5,r2
 2000774:	e13fdd17 	ldw	r4,-140(fp)
 2000778:	200196c0 	call	200196c <__addsf3>
 200077c:	1007883a 	mov	r3,r2
 2000780:	e0ffdd15 	stw	r3,-140(fp)
       y_ball += velocity1[1];
 2000784:	e0bff217 	ldw	r2,-56(fp)
 2000788:	100b883a 	mov	r5,r2
 200078c:	e13fde17 	ldw	r4,-136(fp)
 2000790:	200196c0 	call	200196c <__addsf3>
 2000794:	1007883a 	mov	r3,r2
 2000798:	e0ffde15 	stw	r3,-136(fp)
       ball1[0]=x_ball;
 200079c:	e0bfdd17 	ldw	r2,-140(fp)
 20007a0:	e0bfeb15 	stw	r2,-84(fp)
       ball1[1]=y_ball;
 20007a4:	e0bfde17 	ldw	r2,-136(fp)
 20007a8:	e0bfec15 	stw	r2,-80(fp)
       x_ball2 += velocity2[0];
 20007ac:	e0bff317 	ldw	r2,-52(fp)
 20007b0:	100b883a 	mov	r5,r2
 20007b4:	e13fdf17 	ldw	r4,-132(fp)
 20007b8:	200196c0 	call	200196c <__addsf3>
 20007bc:	1007883a 	mov	r3,r2
 20007c0:	e0ffdf15 	stw	r3,-132(fp)
       y_ball2 += velocity2[1];
 20007c4:	e0bff417 	ldw	r2,-48(fp)
 20007c8:	100b883a 	mov	r5,r2
 20007cc:	e13fe017 	ldw	r4,-128(fp)
 20007d0:	200196c0 	call	200196c <__addsf3>
 20007d4:	1007883a 	mov	r3,r2
 20007d8:	e0ffe015 	stw	r3,-128(fp)
       ball2[0]=x_ball2;
 20007dc:	e0bfdf17 	ldw	r2,-132(fp)
 20007e0:	e0bfed15 	stw	r2,-76(fp)
       ball2[1]=y_ball2;
 20007e4:	e0bfe017 	ldw	r2,-128(fp)
 20007e8:	e0bfee15 	stw	r2,-72(fp)

       //Collision
       collision = detect_collide(ball1,ball2,velocity1);
 20007ec:	e13ff104 	addi	r4,fp,-60
 20007f0:	e0ffed04 	addi	r3,fp,-76
 20007f4:	e0bfeb04 	addi	r2,fp,-84
 20007f8:	200d883a 	mov	r6,r4
 20007fc:	180b883a 	mov	r5,r3
 2000800:	1009883a 	mov	r4,r2
 2000804:	2000d580 	call	2000d58 <detect_collide>
 2000808:	e0bfe315 	stw	r2,-116(fp)
       if (collision==1) {
 200080c:	e0bfe317 	ldw	r2,-116(fp)
 2000810:	10800058 	cmpnei	r2,r2,1
 2000814:	10000e1e 	bne	r2,zero,2000850 <task2+0x3e0>
    	   printf("Collision detected\n");
 2000818:	010080b4 	movhi	r4,514
 200081c:	212d2804 	addi	r4,r4,-19296
 2000820:	20047c40 	call	20047c4 <puts>
    	   collide_calc(ball1,ball2,velocity1,velocity2,collision);
 2000824:	e1bff304 	addi	r6,fp,-52
 2000828:	e17ff104 	addi	r5,fp,-60
 200082c:	e13fed04 	addi	r4,fp,-76
 2000830:	e0ffeb04 	addi	r3,fp,-84
 2000834:	e0bfe317 	ldw	r2,-116(fp)
 2000838:	d8800015 	stw	r2,0(sp)
 200083c:	300f883a 	mov	r7,r6
 2000840:	280d883a 	mov	r6,r5
 2000844:	200b883a 	mov	r5,r4
 2000848:	1809883a 	mov	r4,r3
 200084c:	2000ee40 	call	2000ee4 <collide_calc>
       }

       // Damping factor
       velocity1[0] *= 0.98;
 2000850:	e0bff117 	ldw	r2,-60(fp)
 2000854:	1009883a 	mov	r4,r2
 2000858:	20041b80 	call	20041b8 <__extendsfdf2>
 200085c:	1011883a 	mov	r8,r2
 2000860:	1813883a 	mov	r9,r3
 2000864:	01bd70f4 	movhi	r6,62915
 2000868:	31a3d704 	addi	r6,r6,-28836
 200086c:	01cffbf4 	movhi	r7,16367
 2000870:	39d70a04 	addi	r7,r7,23592
 2000874:	4009883a 	mov	r4,r8
 2000878:	480b883a 	mov	r5,r9
 200087c:	200394c0 	call	200394c <__muldf3>
 2000880:	1009883a 	mov	r4,r2
 2000884:	180b883a 	mov	r5,r3
 2000888:	2005883a 	mov	r2,r4
 200088c:	2807883a 	mov	r3,r5
 2000890:	1009883a 	mov	r4,r2
 2000894:	180b883a 	mov	r5,r3
 2000898:	20042c80 	call	20042c8 <__truncdfsf2>
 200089c:	1007883a 	mov	r3,r2
 20008a0:	e0fff115 	stw	r3,-60(fp)
       velocity1[1] *= 0.98;
 20008a4:	e0bff217 	ldw	r2,-56(fp)
 20008a8:	1009883a 	mov	r4,r2
 20008ac:	20041b80 	call	20041b8 <__extendsfdf2>
 20008b0:	1011883a 	mov	r8,r2
 20008b4:	1813883a 	mov	r9,r3
 20008b8:	01bd70f4 	movhi	r6,62915
 20008bc:	31a3d704 	addi	r6,r6,-28836
 20008c0:	01cffbf4 	movhi	r7,16367
 20008c4:	39d70a04 	addi	r7,r7,23592
 20008c8:	4009883a 	mov	r4,r8
 20008cc:	480b883a 	mov	r5,r9
 20008d0:	200394c0 	call	200394c <__muldf3>
 20008d4:	1009883a 	mov	r4,r2
 20008d8:	180b883a 	mov	r5,r3
 20008dc:	2005883a 	mov	r2,r4
 20008e0:	2807883a 	mov	r3,r5
 20008e4:	1009883a 	mov	r4,r2
 20008e8:	180b883a 	mov	r5,r3
 20008ec:	20042c80 	call	20042c8 <__truncdfsf2>
 20008f0:	1007883a 	mov	r3,r2
 20008f4:	e0fff215 	stw	r3,-56(fp)

       velocity2[0] *= 0.98;
 20008f8:	e0bff317 	ldw	r2,-52(fp)
 20008fc:	1009883a 	mov	r4,r2
 2000900:	20041b80 	call	20041b8 <__extendsfdf2>
 2000904:	1011883a 	mov	r8,r2
 2000908:	1813883a 	mov	r9,r3
 200090c:	01bd70f4 	movhi	r6,62915
 2000910:	31a3d704 	addi	r6,r6,-28836
 2000914:	01cffbf4 	movhi	r7,16367
 2000918:	39d70a04 	addi	r7,r7,23592
 200091c:	4009883a 	mov	r4,r8
 2000920:	480b883a 	mov	r5,r9
 2000924:	200394c0 	call	200394c <__muldf3>
 2000928:	1009883a 	mov	r4,r2
 200092c:	180b883a 	mov	r5,r3
 2000930:	2005883a 	mov	r2,r4
 2000934:	2807883a 	mov	r3,r5
 2000938:	1009883a 	mov	r4,r2
 200093c:	180b883a 	mov	r5,r3
 2000940:	20042c80 	call	20042c8 <__truncdfsf2>
 2000944:	1007883a 	mov	r3,r2
 2000948:	e0fff315 	stw	r3,-52(fp)
       velocity2[1] *= 0.98;
 200094c:	e0bff417 	ldw	r2,-48(fp)
 2000950:	1009883a 	mov	r4,r2
 2000954:	20041b80 	call	20041b8 <__extendsfdf2>
 2000958:	1011883a 	mov	r8,r2
 200095c:	1813883a 	mov	r9,r3
 2000960:	01bd70f4 	movhi	r6,62915
 2000964:	31a3d704 	addi	r6,r6,-28836
 2000968:	01cffbf4 	movhi	r7,16367
 200096c:	39d70a04 	addi	r7,r7,23592
 2000970:	4009883a 	mov	r4,r8
 2000974:	480b883a 	mov	r5,r9
 2000978:	200394c0 	call	200394c <__muldf3>
 200097c:	1009883a 	mov	r4,r2
 2000980:	180b883a 	mov	r5,r3
 2000984:	2005883a 	mov	r2,r4
 2000988:	2807883a 	mov	r3,r5
 200098c:	1009883a 	mov	r4,r2
 2000990:	180b883a 	mov	r5,r3
 2000994:	20042c80 	call	20042c8 <__truncdfsf2>
 2000998:	1007883a 	mov	r3,r2
 200099c:	e0fff415 	stw	r3,-48(fp)
       speed = abs((int) (velocity1[0])) + abs((int) (velocity1[1]));
 20009a0:	e0bff117 	ldw	r2,-60(fp)
 20009a4:	1009883a 	mov	r4,r2
 20009a8:	2002d0c0 	call	2002d0c <__fixsfsi>
 20009ac:	1000010e 	bge	r2,zero,20009b4 <task2+0x544>
 20009b0:	0085c83a 	sub	r2,zero,r2
 20009b4:	1021883a 	mov	r16,r2
 20009b8:	e0bff217 	ldw	r2,-56(fp)
 20009bc:	1009883a 	mov	r4,r2
 20009c0:	2002d0c0 	call	2002d0c <__fixsfsi>
 20009c4:	1000010e 	bge	r2,zero,20009cc <task2+0x55c>
 20009c8:	0085c83a 	sub	r2,zero,r2
 20009cc:	8085883a 	add	r2,r16,r2
 20009d0:	1009883a 	mov	r4,r2
 20009d4:	2002d7c0 	call	2002d7c <__floatsisf>
 20009d8:	1007883a 	mov	r3,r2
 20009dc:	e0ffe115 	stw	r3,-124(fp)

       *(display + 1) = ((int) (y_ball) << 10) + (int) (x_ball);
 20009e0:	e0bfe217 	ldw	r2,-120(fp)
 20009e4:	14000104 	addi	r16,r2,4
 20009e8:	e13fde17 	ldw	r4,-136(fp)
 20009ec:	2002d0c0 	call	2002d0c <__fixsfsi>
 20009f0:	102292ba 	slli	r17,r2,10
 20009f4:	e13fdd17 	ldw	r4,-140(fp)
 20009f8:	2002d0c0 	call	2002d0c <__fixsfsi>
 20009fc:	8885883a 	add	r2,r17,r2
 2000a00:	80800015 	stw	r2,0(r16)
       *(display + 2) = ((int) (y_ball2) << 10) + (int) (x_ball2);
 2000a04:	e0bfe217 	ldw	r2,-120(fp)
 2000a08:	14000204 	addi	r16,r2,8
 2000a0c:	e13fe017 	ldw	r4,-128(fp)
 2000a10:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000a14:	102292ba 	slli	r17,r2,10
 2000a18:	e13fdf17 	ldw	r4,-132(fp)
 2000a1c:	2002d0c0 	call	2002d0c <__fixsfsi>
 2000a20:	8885883a 	add	r2,r17,r2
 2000a24:	80800015 	stw	r2,0(r16)
       OSTimeDlyHMSM(0, 0, 0, 20);
 2000a28:	01c00504 	movi	r7,20
 2000a2c:	000d883a 	mov	r6,zero
 2000a30:	000b883a 	mov	r5,zero
 2000a34:	0009883a 	mov	r4,zero
 2000a38:	2018bd00 	call	2018bd0 <OSTimeDlyHMSM>
   float velocity2 [2];

   int border_collision [2][4] = {{0, 0, 0, 0},{0, 0, 0, 0}};
   collision = detect_collide(ball1,ball2,velocity1);

   while(speed >= 0.01)
 2000a3c:	e13fe117 	ldw	r4,-124(fp)
 2000a40:	20041b80 	call	20041b8 <__extendsfdf2>
 2000a44:	1011883a 	mov	r8,r2
 2000a48:	1813883a 	mov	r9,r3
 2000a4c:	0191ebb4 	movhi	r6,18350
 2000a50:	31851ec4 	addi	r6,r6,5243
 2000a54:	01cfe134 	movhi	r7,16260
 2000a58:	39deb844 	addi	r7,r7,31457
 2000a5c:	4009883a 	mov	r4,r8
 2000a60:	480b883a 	mov	r5,r9
 2000a64:	20038700 	call	2003870 <__gedf2>
 2000a68:	103f260e 	bge	r2,zero,2000704 <task2+0x294>
       *(display + 1) = ((int) (y_ball) << 10) + (int) (x_ball);
       *(display + 2) = ((int) (y_ball2) << 10) + (int) (x_ball2);
       OSTimeDlyHMSM(0, 0, 0, 20);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 2000a6c:	01c07d04 	movi	r7,500
 2000a70:	000d883a 	mov	r6,zero
 2000a74:	000b883a 	mov	r5,zero
 2000a78:	0009883a 	mov	r4,zero
 2000a7c:	2018bd00 	call	2018bd0 <OSTimeDlyHMSM>

   printf("Animation termine\n");
 2000a80:	010080b4 	movhi	r4,514
 2000a84:	212d2d04 	addi	r4,r4,-19276
 2000a88:	20047c40 	call	20047c4 <puts>

   OSTimeDlyHMSM(0, 0, 5, 0);
 2000a8c:	000f883a 	mov	r7,zero
 2000a90:	01800144 	movi	r6,5
 2000a94:	000b883a 	mov	r5,zero
 2000a98:	0009883a 	mov	r4,zero
 2000a9c:	2018bd00 	call	2018bd0 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 2000aa0:	e03fe405 	stb	zero,-112(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000aa4:	d0a71017 	ldw	r2,-25536(gp)
 2000aa8:	e0ffe403 	ldbu	r3,-112(fp)
 2000aac:	e13fea04 	addi	r4,fp,-88
 2000ab0:	200f883a 	mov	r7,r4
 2000ab4:	180d883a 	mov	r6,r3
 2000ab8:	01400044 	movi	r5,1
 2000abc:	1009883a 	mov	r4,r2
 2000ac0:	2013da40 	call	2013da4 <OSFlagPost>
  }
 2000ac4:	003e9606 	br	2000520 <task2+0xb0>

02000ac8 <task3>:
}

void task3(void* pdata)
{
 2000ac8:	defff204 	addi	sp,sp,-56
 2000acc:	dfc00d15 	stw	ra,52(sp)
 2000ad0:	df000c15 	stw	fp,48(sp)
 2000ad4:	df000c04 	addi	fp,sp,48
 2000ad8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U opt_task1;

	int activePlayer = 1;
 2000adc:	00800044 	movi	r2,1
 2000ae0:	e0bff515 	stw	r2,-44(fp)

	int * XdirSend = (int*) MEM_NIOS_PI_BASE+1;
 2000ae4:	00800834 	movhi	r2,32
 2000ae8:	10800104 	addi	r2,r2,4
 2000aec:	e0bff615 	stw	r2,-40(fp)
	int * YdirSend = (int*) MEM_NIOS_PI_BASE+2;
 2000af0:	00800834 	movhi	r2,32
 2000af4:	10800204 	addi	r2,r2,8
 2000af8:	e0bff715 	stw	r2,-36(fp)
	int * isSend = (int*) MEM_NIOS_PI_BASE+3;
 2000afc:	00800834 	movhi	r2,32
 2000b00:	10800304 	addi	r2,r2,12
 2000b04:	e0bff815 	stw	r2,-32(fp)
	int * isReceived = (int*) MEM_NIOS_PI_BASE+4;
 2000b08:	00800834 	movhi	r2,32
 2000b0c:	10800404 	addi	r2,r2,16
 2000b10:	e0bff915 	stw	r2,-28(fp)
	//int * AckSend     = (int*) MEM_NIOS_PI_BASE+5;
	//int * AckReceived     = (int*) MEM_NIOS_PI_BASE+6;
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+7;
 2000b14:	00800834 	movhi	r2,32
 2000b18:	10800704 	addi	r2,r2,28
 2000b1c:	e0bffa15 	stw	r2,-24(fp)
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+8;
 2000b20:	00800834 	movhi	r2,32
 2000b24:	10800804 	addi	r2,r2,32
 2000b28:	e0bffb15 	stw	r2,-20(fp)
	//int * speedRec = (int*) MEM_NIOS_PI_BASE+9;

	*XdirSend =0;
 2000b2c:	e0bff617 	ldw	r2,-40(fp)
 2000b30:	10000015 	stw	zero,0(r2)
	*XdirRec =0;
 2000b34:	e0bffa17 	ldw	r2,-24(fp)
 2000b38:	10000015 	stw	zero,0(r2)
	*isSend = 0;
 2000b3c:	e0bff817 	ldw	r2,-32(fp)
 2000b40:	10000015 	stw	zero,0(r2)
	*isReceived = 0;
 2000b44:	e0bff917 	ldw	r2,-28(fp)
 2000b48:	10000015 	stw	zero,0(r2)
	*YdirSend =0;
 2000b4c:	e0bff717 	ldw	r2,-36(fp)
 2000b50:	10000015 	stw	zero,0(r2)
	*YdirRec = 0;
 2000b54:	e0bffb17 	ldw	r2,-20(fp)
 2000b58:	10000015 	stw	zero,0(r2)
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 2000b5c:	e0bff917 	ldw	r2,-28(fp)
 2000b60:	10800017 	ldw	r2,0(r2)
 2000b64:	10004a1e 	bne	r2,zero,2000c90 <task3+0x1c8>
 2000b68:	e0bff517 	ldw	r2,-44(fp)
 2000b6c:	10004826 	beq	r2,zero,2000c90 <task3+0x1c8>
		  OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2000b70:	d0a71517 	ldw	r2,-25516(gp)
 2000b74:	e0fffe44 	addi	r3,fp,-7
 2000b78:	180f883a 	mov	r7,r3
 2000b7c:	01800044 	movi	r6,1
 2000b80:	01400044 	movi	r5,1
 2000b84:	1009883a 	mov	r4,r2
 2000b88:	2013da40 	call	2013da4 <OSFlagPost>
		  printf("Wait for value from task 1\n");
 2000b8c:	010080b4 	movhi	r4,514
 2000b90:	212d3204 	addi	r4,r4,-19256
 2000b94:	20047c40 	call	20047c4 <puts>
		  int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 2000b98:	d0a71417 	ldw	r2,-25520(gp)
 2000b9c:	e0fffe44 	addi	r3,fp,-7
 2000ba0:	180d883a 	mov	r6,r3
 2000ba4:	000b883a 	mov	r5,zero
 2000ba8:	1009883a 	mov	r4,r2
 2000bac:	20149800 	call	2014980 <OSMboxPend>
 2000bb0:	e0bffc15 	stw	r2,-16(fp)
		  int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 2000bb4:	d0a71217 	ldw	r2,-25528(gp)
 2000bb8:	e0fffe44 	addi	r3,fp,-7
 2000bbc:	180d883a 	mov	r6,r3
 2000bc0:	000b883a 	mov	r5,zero
 2000bc4:	1009883a 	mov	r4,r2
 2000bc8:	20149800 	call	2014980 <OSMboxPend>
 2000bcc:	e0bffd15 	stw	r2,-12(fp)
		  printf("Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 2000bd0:	e0bffc17 	ldw	r2,-16(fp)
 2000bd4:	10c00017 	ldw	r3,0(r2)
 2000bd8:	e0bffd17 	ldw	r2,-12(fp)
 2000bdc:	10800017 	ldw	r2,0(r2)
 2000be0:	100d883a 	mov	r6,r2
 2000be4:	180b883a 	mov	r5,r3
 2000be8:	010080b4 	movhi	r4,514
 2000bec:	212d3904 	addi	r4,r4,-19228
 2000bf0:	20046c80 	call	20046c8 <printf>

		  OSMboxPost(MailBox4, vector_x);
 2000bf4:	d0a71317 	ldw	r2,-25524(gp)
 2000bf8:	e17ffc17 	ldw	r5,-16(fp)
 2000bfc:	1009883a 	mov	r4,r2
 2000c00:	2014d200 	call	2014d20 <OSMboxPost>
		  OSMboxPost(MailBox5, vector_y);
 2000c04:	d0a71117 	ldw	r2,-25532(gp)
 2000c08:	e17ffd17 	ldw	r5,-12(fp)
 2000c0c:	1009883a 	mov	r4,r2
 2000c10:	2014d200 	call	2014d20 <OSMboxPost>

		  *XdirSend = *vector_x;
 2000c14:	e0bffc17 	ldw	r2,-16(fp)
 2000c18:	10c00017 	ldw	r3,0(r2)
 2000c1c:	e0bff617 	ldw	r2,-40(fp)
 2000c20:	10c00015 	stw	r3,0(r2)
		  *YdirSend = *vector_y;
 2000c24:	e0bffd17 	ldw	r2,-12(fp)
 2000c28:	10c00017 	ldw	r3,0(r2)
 2000c2c:	e0bff717 	ldw	r2,-36(fp)
 2000c30:	10c00015 	stw	r3,0(r2)
		  *isSend = 1; // value are available
 2000c34:	e0bff817 	ldw	r2,-32(fp)
 2000c38:	00c00044 	movi	r3,1
 2000c3c:	10c00015 	stw	r3,0(r2)
		  activePlayer = 1; //modified
 2000c40:	00800044 	movi	r2,1
 2000c44:	e0bff515 	stw	r2,-44(fp)

		  opt_task1=OS_FLAG_CLR;
 2000c48:	e03ffe05 	stb	zero,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2000c4c:	d0a71517 	ldw	r2,-25516(gp)
 2000c50:	e0fffe03 	ldbu	r3,-8(fp)
 2000c54:	e13ffe44 	addi	r4,fp,-7
 2000c58:	200f883a 	mov	r7,r4
 2000c5c:	180d883a 	mov	r6,r3
 2000c60:	01400044 	movi	r5,1
 2000c64:	1009883a 	mov	r4,r2
 2000c68:	2013da40 	call	2013da4 <OSFlagPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2000c6c:	d0e71017 	ldw	r3,-25536(gp)
 2000c70:	e0bffe44 	addi	r2,fp,-7
 2000c74:	d8800015 	stw	r2,0(sp)
 2000c78:	000f883a 	mov	r7,zero
 2000c7c:	000d883a 	mov	r6,zero
 2000c80:	01400044 	movi	r5,1
 2000c84:	1809883a 	mov	r4,r3
 2000c88:	201378c0 	call	201378c <OSFlagPend>
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 2000c8c:	00002c06 	br	2000d40 <task3+0x278>
	 /* Si on n'est pas le joueur actif, on attend le signal donnée disponible
	  * -> lit les donnée
	  * -> envoi les données à la tâche 3 + lance l'animation
	  * -> passe en mode joueur actif
	  */
	 else if (!activePlayer && *isReceived){
 2000c90:	e0bff517 	ldw	r2,-44(fp)
 2000c94:	10002a1e 	bne	r2,zero,2000d40 <task3+0x278>
 2000c98:	e0bff917 	ldw	r2,-28(fp)
 2000c9c:	10800017 	ldw	r2,0(r2)
 2000ca0:	10002726 	beq	r2,zero,2000d40 <task3+0x278>
		  printf("Get value from SPI : (%d, %d)\n",*XdirRec, *YdirRec);
 2000ca4:	e0bffa17 	ldw	r2,-24(fp)
 2000ca8:	10c00017 	ldw	r3,0(r2)
 2000cac:	e0bffb17 	ldw	r2,-20(fp)
 2000cb0:	10800017 	ldw	r2,0(r2)
 2000cb4:	100d883a 	mov	r6,r2
 2000cb8:	180b883a 	mov	r5,r3
 2000cbc:	010080b4 	movhi	r4,514
 2000cc0:	212d4204 	addi	r4,r4,-19192
 2000cc4:	20046c80 	call	20046c8 <printf>
		  OSMboxPost(MailBox4, XdirRec);
 2000cc8:	d0a71317 	ldw	r2,-25524(gp)
 2000ccc:	e17ffa17 	ldw	r5,-24(fp)
 2000cd0:	1009883a 	mov	r4,r2
 2000cd4:	2014d200 	call	2014d20 <OSMboxPost>
		  OSMboxPost(MailBox5, YdirRec);
 2000cd8:	d0a71117 	ldw	r2,-25532(gp)
 2000cdc:	e17ffb17 	ldw	r5,-20(fp)
 2000ce0:	1009883a 	mov	r4,r2
 2000ce4:	2014d200 	call	2014d20 <OSMboxPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2000ce8:	d0e71017 	ldw	r3,-25536(gp)
 2000cec:	e0bffe44 	addi	r2,fp,-7
 2000cf0:	d8800015 	stw	r2,0(sp)
 2000cf4:	000f883a 	mov	r7,zero
 2000cf8:	000d883a 	mov	r6,zero
 2000cfc:	01400044 	movi	r5,1
 2000d00:	1809883a 	mov	r4,r3
 2000d04:	201378c0 	call	201378c <OSFlagPend>
		  opt_task1=OS_FLAG_SET;
 2000d08:	00800044 	movi	r2,1
 2000d0c:	e0bffe05 	stb	r2,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2000d10:	d0a71517 	ldw	r2,-25516(gp)
 2000d14:	e0fffe03 	ldbu	r3,-8(fp)
 2000d18:	e13ffe44 	addi	r4,fp,-7
 2000d1c:	200f883a 	mov	r7,r4
 2000d20:	180d883a 	mov	r6,r3
 2000d24:	01400044 	movi	r5,1
 2000d28:	1009883a 	mov	r4,r2
 2000d2c:	2013da40 	call	2013da4 <OSFlagPost>
		  *isReceived = 0; // we are the actif player
 2000d30:	e0bff917 	ldw	r2,-28(fp)
 2000d34:	10000015 	stw	zero,0(r2)
		  activePlayer = 1;
 2000d38:	00800044 	movi	r2,1
 2000d3c:	e0bff515 	stw	r2,-44(fp)
	  }
	  OSTimeDlyHMSM(0,0,0,100);
 2000d40:	01c01904 	movi	r7,100
 2000d44:	000d883a 	mov	r6,zero
 2000d48:	000b883a 	mov	r5,zero
 2000d4c:	0009883a 	mov	r4,zero
 2000d50:	2018bd00 	call	2018bd0 <OSTimeDlyHMSM>
  }
 2000d54:	003f8106 	br	2000b5c <task3+0x94>

02000d58 <detect_collide>:
}

int detect_collide(float ball1[2], float ball2[2], float velocity1[2]){
 2000d58:	defff204 	addi	sp,sp,-56
 2000d5c:	dfc00d15 	stw	ra,52(sp)
 2000d60:	df000c15 	stw	fp,48(sp)
 2000d64:	dc000b15 	stw	r16,44(sp)
 2000d68:	df000c04 	addi	fp,sp,48
 2000d6c:	e13ffc15 	stw	r4,-16(fp)
 2000d70:	e17ffd15 	stw	r5,-12(fp)
 2000d74:	e1bffe15 	stw	r6,-8(fp)

	float x1,y1,x2,y2,dx,dy;
	int collision,size;
	size=13;
 2000d78:	00800344 	movi	r2,13
 2000d7c:	e0bff515 	stw	r2,-44(fp)
	x1=ball1[0]+ velocity1[0];
 2000d80:	e0bffc17 	ldw	r2,-16(fp)
 2000d84:	10c00017 	ldw	r3,0(r2)
 2000d88:	e0bffe17 	ldw	r2,-8(fp)
 2000d8c:	11000017 	ldw	r4,0(r2)
 2000d90:	200b883a 	mov	r5,r4
 2000d94:	1809883a 	mov	r4,r3
 2000d98:	200196c0 	call	200196c <__addsf3>
 2000d9c:	1007883a 	mov	r3,r2
 2000da0:	e0fff615 	stw	r3,-40(fp)
	x2=ball2[0]+ velocity1[0];
 2000da4:	e0bffd17 	ldw	r2,-12(fp)
 2000da8:	10c00017 	ldw	r3,0(r2)
 2000dac:	e0bffe17 	ldw	r2,-8(fp)
 2000db0:	11000017 	ldw	r4,0(r2)
 2000db4:	200b883a 	mov	r5,r4
 2000db8:	1809883a 	mov	r4,r3
 2000dbc:	200196c0 	call	200196c <__addsf3>
 2000dc0:	1007883a 	mov	r3,r2
 2000dc4:	e0fff715 	stw	r3,-36(fp)

	y1=ball1[1]+ velocity1[1];
 2000dc8:	e0bffc17 	ldw	r2,-16(fp)
 2000dcc:	10800104 	addi	r2,r2,4
 2000dd0:	10c00017 	ldw	r3,0(r2)
 2000dd4:	e0bffe17 	ldw	r2,-8(fp)
 2000dd8:	10800104 	addi	r2,r2,4
 2000ddc:	11000017 	ldw	r4,0(r2)
 2000de0:	200b883a 	mov	r5,r4
 2000de4:	1809883a 	mov	r4,r3
 2000de8:	200196c0 	call	200196c <__addsf3>
 2000dec:	1007883a 	mov	r3,r2
 2000df0:	e0fff815 	stw	r3,-32(fp)
	y2=ball2[1]+ velocity1[1];
 2000df4:	e0bffd17 	ldw	r2,-12(fp)
 2000df8:	10800104 	addi	r2,r2,4
 2000dfc:	10c00017 	ldw	r3,0(r2)
 2000e00:	e0bffe17 	ldw	r2,-8(fp)
 2000e04:	10800104 	addi	r2,r2,4
 2000e08:	11000017 	ldw	r4,0(r2)
 2000e0c:	200b883a 	mov	r5,r4
 2000e10:	1809883a 	mov	r4,r3
 2000e14:	200196c0 	call	200196c <__addsf3>
 2000e18:	1007883a 	mov	r3,r2
 2000e1c:	e0fff915 	stw	r3,-28(fp)

	dx=x2-x1;
 2000e20:	e17ff617 	ldw	r5,-40(fp)
 2000e24:	e13ff717 	ldw	r4,-36(fp)
 2000e28:	20028280 	call	2002828 <__subsf3>
 2000e2c:	1007883a 	mov	r3,r2
 2000e30:	e0fffa15 	stw	r3,-24(fp)
	dy=y2-y1;
 2000e34:	e17ff817 	ldw	r5,-32(fp)
 2000e38:	e13ff917 	ldw	r4,-28(fp)
 2000e3c:	20028280 	call	2002828 <__subsf3>
 2000e40:	1007883a 	mov	r3,r2
 2000e44:	e0fffb15 	stw	r3,-20(fp)
	if(dx*dx + dy*dy <= 4*size*size) collision=1;
 2000e48:	e17ffa17 	ldw	r5,-24(fp)
 2000e4c:	e13ffa17 	ldw	r4,-24(fp)
 2000e50:	20023f80 	call	20023f8 <__mulsf3>
 2000e54:	1007883a 	mov	r3,r2
 2000e58:	1821883a 	mov	r16,r3
 2000e5c:	e17ffb17 	ldw	r5,-20(fp)
 2000e60:	e13ffb17 	ldw	r4,-20(fp)
 2000e64:	20023f80 	call	20023f8 <__mulsf3>
 2000e68:	1007883a 	mov	r3,r2
 2000e6c:	1805883a 	mov	r2,r3
 2000e70:	100b883a 	mov	r5,r2
 2000e74:	8009883a 	mov	r4,r16
 2000e78:	200196c0 	call	200196c <__addsf3>
 2000e7c:	1007883a 	mov	r3,r2
 2000e80:	1821883a 	mov	r16,r3
 2000e84:	e0bff517 	ldw	r2,-44(fp)
 2000e88:	1085883a 	add	r2,r2,r2
 2000e8c:	1085883a 	add	r2,r2,r2
 2000e90:	e17ff517 	ldw	r5,-44(fp)
 2000e94:	1009883a 	mov	r4,r2
 2000e98:	20019440 	call	2001944 <__mulsi3>
 2000e9c:	1009883a 	mov	r4,r2
 2000ea0:	2002d7c0 	call	2002d7c <__floatsisf>
 2000ea4:	1007883a 	mov	r3,r2
 2000ea8:	180b883a 	mov	r5,r3
 2000eac:	8009883a 	mov	r4,r16
 2000eb0:	20023300 	call	2002330 <__lesf2>
 2000eb4:	00800316 	blt	zero,r2,2000ec4 <detect_collide+0x16c>
 2000eb8:	00800044 	movi	r2,1
 2000ebc:	e0bff415 	stw	r2,-48(fp)
 2000ec0:	00000106 	br	2000ec8 <detect_collide+0x170>
    else collision=0;
 2000ec4:	e03ff415 	stw	zero,-48(fp)
	return collision;
 2000ec8:	e0bff417 	ldw	r2,-48(fp)
}
 2000ecc:	e6ffff04 	addi	sp,fp,-4
 2000ed0:	dfc00217 	ldw	ra,8(sp)
 2000ed4:	df000117 	ldw	fp,4(sp)
 2000ed8:	dc000017 	ldw	r16,0(sp)
 2000edc:	dec00304 	addi	sp,sp,12
 2000ee0:	f800283a 	ret

02000ee4 <collide_calc>:

void collide_calc(float ball1[2], float ball2[2],float velocity1 [2], float velocity2 [2], int collision){
 2000ee4:	deffe804 	addi	sp,sp,-96
 2000ee8:	dfc01715 	stw	ra,92(sp)
 2000eec:	df001615 	stw	fp,88(sp)
 2000ef0:	dc801515 	stw	r18,84(sp)
 2000ef4:	dc401415 	stw	r17,80(sp)
 2000ef8:	dc001315 	stw	r16,76(sp)
 2000efc:	df001604 	addi	fp,sp,88
 2000f00:	e13ff915 	stw	r4,-28(fp)
 2000f04:	e17ffa15 	stw	r5,-24(fp)
 2000f08:	e1bffb15 	stw	r6,-20(fp)
 2000f0c:	e1fffc15 	stw	r7,-16(fp)
	//int result[8];
	if (collision){
 2000f10:	e0800217 	ldw	r2,8(fp)
 2000f14:	10012526 	beq	r2,zero,20013ac <collide_calc+0x4c8>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2000f18:	e0bff917 	ldw	r2,-28(fp)
 2000f1c:	10800017 	ldw	r2,0(r2)
 2000f20:	e0bfec15 	stw	r2,-80(fp)
		x2=ball2[0];
 2000f24:	e0bffa17 	ldw	r2,-24(fp)
 2000f28:	10800017 	ldw	r2,0(r2)
 2000f2c:	e0bfed15 	stw	r2,-76(fp)
		y1=ball1[1];
 2000f30:	e0bff917 	ldw	r2,-28(fp)
 2000f34:	10800117 	ldw	r2,4(r2)
 2000f38:	e0bfee15 	stw	r2,-72(fp)
		y2=ball2[1];
 2000f3c:	e0bffa17 	ldw	r2,-24(fp)
 2000f40:	10800117 	ldw	r2,4(r2)
 2000f44:	e0bfef15 	stw	r2,-68(fp)

		m1=1.0;
 2000f48:	008fe034 	movhi	r2,16256
 2000f4c:	e0bff015 	stw	r2,-64(fp)
		m2=1.0;
 2000f50:	008fe034 	movhi	r2,16256
 2000f54:	e0bff115 	stw	r2,-60(fp)
		m21 = m2/m1;
 2000f58:	e17ff017 	ldw	r5,-64(fp)
 2000f5c:	e13ff117 	ldw	r4,-60(fp)
 2000f60:	2001e340 	call	2001e34 <__divsf3>
 2000f64:	1007883a 	mov	r3,r2
 2000f68:	e0fff215 	stw	r3,-56(fp)
		x21 = x2-x1;
 2000f6c:	e17fec17 	ldw	r5,-80(fp)
 2000f70:	e13fed17 	ldw	r4,-76(fp)
 2000f74:	20028280 	call	2002828 <__subsf3>
 2000f78:	1007883a 	mov	r3,r2
 2000f7c:	e0ffea15 	stw	r3,-88(fp)
		y21 = y2-y1;
 2000f80:	e17fee17 	ldw	r5,-72(fp)
 2000f84:	e13fef17 	ldw	r4,-68(fp)
 2000f88:	20028280 	call	2002828 <__subsf3>
 2000f8c:	1007883a 	mov	r3,r2
 2000f90:	e0fff315 	stw	r3,-52(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2000f94:	e0bffc17 	ldw	r2,-16(fp)
 2000f98:	10c00017 	ldw	r3,0(r2)
 2000f9c:	e0bffb17 	ldw	r2,-20(fp)
 2000fa0:	11000017 	ldw	r4,0(r2)
 2000fa4:	200b883a 	mov	r5,r4
 2000fa8:	1809883a 	mov	r4,r3
 2000fac:	20028280 	call	2002828 <__subsf3>
 2000fb0:	1007883a 	mov	r3,r2
 2000fb4:	1805883a 	mov	r2,r3
 2000fb8:	e0bff715 	stw	r2,-36(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2000fbc:	e0bffc17 	ldw	r2,-16(fp)
 2000fc0:	10800104 	addi	r2,r2,4
 2000fc4:	10c00017 	ldw	r3,0(r2)
 2000fc8:	e0bffb17 	ldw	r2,-20(fp)
 2000fcc:	10800104 	addi	r2,r2,4
 2000fd0:	11000017 	ldw	r4,0(r2)
 2000fd4:	200b883a 	mov	r5,r4
 2000fd8:	1809883a 	mov	r4,r3
 2000fdc:	20028280 	call	2002828 <__subsf3>
 2000fe0:	1007883a 	mov	r3,r2
 2000fe4:	1805883a 	mov	r2,r3
 2000fe8:	e0bff815 	stw	r2,-32(fp)

		if (v21[0]*x21 + v21[1]*y21 >=0){
 2000fec:	e0bff717 	ldw	r2,-36(fp)
 2000ff0:	e17fea17 	ldw	r5,-88(fp)
 2000ff4:	1009883a 	mov	r4,r2
 2000ff8:	20023f80 	call	20023f8 <__mulsf3>
 2000ffc:	1007883a 	mov	r3,r2
 2001000:	1821883a 	mov	r16,r3
 2001004:	e0bff817 	ldw	r2,-32(fp)
 2001008:	e17ff317 	ldw	r5,-52(fp)
 200100c:	1009883a 	mov	r4,r2
 2001010:	20023f80 	call	20023f8 <__mulsf3>
 2001014:	1007883a 	mov	r3,r2
 2001018:	1805883a 	mov	r2,r3
 200101c:	100b883a 	mov	r5,r2
 2001020:	8009883a 	mov	r4,r16
 2001024:	200196c0 	call	200196c <__addsf3>
 2001028:	1007883a 	mov	r3,r2
 200102c:	1805883a 	mov	r2,r3
 2001030:	000b883a 	mov	r5,zero
 2001034:	1009883a 	mov	r4,r2
 2001038:	20022740 	call	2002274 <__gesf2>
 200103c:	10002b16 	blt	r2,zero,20010ec <collide_calc+0x208>
			printf("error in collision\n");
 2001040:	010080b4 	movhi	r4,514
 2001044:	212d4a04 	addi	r4,r4,-19160
 2001048:	20047c40 	call	20047c4 <puts>
			velocity2[0] = velocity2[0]+0.0;
 200104c:	e0bffc17 	ldw	r2,-16(fp)
 2001050:	10c00017 	ldw	r3,0(r2)
 2001054:	000b883a 	mov	r5,zero
 2001058:	1809883a 	mov	r4,r3
 200105c:	200196c0 	call	200196c <__addsf3>
 2001060:	1009883a 	mov	r4,r2
 2001064:	2007883a 	mov	r3,r4
 2001068:	e0bffc17 	ldw	r2,-16(fp)
 200106c:	10c00015 	stw	r3,0(r2)
            velocity2[1] = velocity2[1]+0.0;
 2001070:	e0bffc17 	ldw	r2,-16(fp)
 2001074:	14000104 	addi	r16,r2,4
 2001078:	e0bffc17 	ldw	r2,-16(fp)
 200107c:	10800104 	addi	r2,r2,4
 2001080:	10c00017 	ldw	r3,0(r2)
 2001084:	000b883a 	mov	r5,zero
 2001088:	1809883a 	mov	r4,r3
 200108c:	200196c0 	call	200196c <__addsf3>
 2001090:	1007883a 	mov	r3,r2
 2001094:	1805883a 	mov	r2,r3
 2001098:	80800015 	stw	r2,0(r16)
            velocity1[0] = velocity2[0]+0.0;
 200109c:	e0bffc17 	ldw	r2,-16(fp)
 20010a0:	10c00017 	ldw	r3,0(r2)
 20010a4:	000b883a 	mov	r5,zero
 20010a8:	1809883a 	mov	r4,r3
 20010ac:	200196c0 	call	200196c <__addsf3>
 20010b0:	1009883a 	mov	r4,r2
 20010b4:	2007883a 	mov	r3,r4
 20010b8:	e0bffb17 	ldw	r2,-20(fp)
 20010bc:	10c00015 	stw	r3,0(r2)
            velocity1[1] = velocity2[0]+0.0;
 20010c0:	e0bffb17 	ldw	r2,-20(fp)
 20010c4:	14000104 	addi	r16,r2,4
 20010c8:	e0bffc17 	ldw	r2,-16(fp)
 20010cc:	10c00017 	ldw	r3,0(r2)
 20010d0:	000b883a 	mov	r5,zero
 20010d4:	1809883a 	mov	r4,r3
 20010d8:	200196c0 	call	200196c <__addsf3>
 20010dc:	1007883a 	mov	r3,r2
 20010e0:	1805883a 	mov	r2,r3
 20010e4:	80800015 	stw	r2,0(r16)

            velocity1[0] = velocity1[0] - m21*dv;
            velocity1[1] = velocity1[0] - a*m21*dv;
		}
	}
}
 20010e8:	0000b006 	br	20013ac <collide_calc+0x4c8>
            velocity1[0] = velocity2[0]+0.0;
            velocity1[1] = velocity2[0]+0.0;

		}
		else{
			fy21=0.000001*fabs(y21);
 20010ec:	e0fff317 	ldw	r3,-52(fp)
 20010f0:	00a00034 	movhi	r2,32768
 20010f4:	10bfffc4 	addi	r2,r2,-1
 20010f8:	1884703a 	and	r2,r3,r2
 20010fc:	1009883a 	mov	r4,r2
 2001100:	20041b80 	call	20041b8 <__extendsfdf2>
 2001104:	1011883a 	mov	r8,r2
 2001108:	1813883a 	mov	r9,r3
 200110c:	01a82db4 	movhi	r6,41142
 2001110:	31bb6344 	addi	r6,r6,-4723
 2001114:	01cfac74 	movhi	r7,16049
 2001118:	39f1bdc4 	addi	r7,r7,-14601
 200111c:	4009883a 	mov	r4,r8
 2001120:	480b883a 	mov	r5,r9
 2001124:	200394c0 	call	200394c <__muldf3>
 2001128:	1009883a 	mov	r4,r2
 200112c:	180b883a 	mov	r5,r3
 2001130:	2005883a 	mov	r2,r4
 2001134:	2807883a 	mov	r3,r5
 2001138:	1009883a 	mov	r4,r2
 200113c:	180b883a 	mov	r5,r3
 2001140:	20042c80 	call	20042c8 <__truncdfsf2>
 2001144:	1007883a 	mov	r3,r2
 2001148:	e0fff415 	stw	r3,-48(fp)
			if(fabs(x21) < fy21){
 200114c:	e0ffea17 	ldw	r3,-88(fp)
 2001150:	00a00034 	movhi	r2,32768
 2001154:	10bfffc4 	addi	r2,r2,-1
 2001158:	1884703a 	and	r2,r3,r2
 200115c:	e17ff417 	ldw	r5,-48(fp)
 2001160:	1009883a 	mov	r4,r2
 2001164:	20023300 	call	2002330 <__lesf2>
 2001168:	1000110e 	bge	r2,zero,20011b0 <collide_calc+0x2cc>
				if (x21<0) sign = -1;
 200116c:	000b883a 	mov	r5,zero
 2001170:	e13fea17 	ldw	r4,-88(fp)
 2001174:	20023300 	call	2002330 <__lesf2>
 2001178:	1000030e 	bge	r2,zero,2001188 <collide_calc+0x2a4>
 200117c:	00bfffc4 	movi	r2,-1
 2001180:	e0bfeb15 	stw	r2,-84(fp)
 2001184:	00000206 	br	2001190 <collide_calc+0x2ac>
				else sign=1;
 2001188:	00800044 	movi	r2,1
 200118c:	e0bfeb15 	stw	r2,-84(fp)
				x21=fy21*sign;
 2001190:	e13feb17 	ldw	r4,-84(fp)
 2001194:	2002d7c0 	call	2002d7c <__floatsisf>
 2001198:	1007883a 	mov	r3,r2
 200119c:	e17ff417 	ldw	r5,-48(fp)
 20011a0:	1809883a 	mov	r4,r3
 20011a4:	20023f80 	call	20023f8 <__mulsf3>
 20011a8:	1007883a 	mov	r3,r2
 20011ac:	e0ffea15 	stw	r3,-88(fp)
			}
			a=y21/x21;
 20011b0:	e17fea17 	ldw	r5,-88(fp)
 20011b4:	e13ff317 	ldw	r4,-52(fp)
 20011b8:	2001e340 	call	2001e34 <__divsf3>
 20011bc:	1007883a 	mov	r3,r2
 20011c0:	e0fff515 	stw	r3,-44(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 20011c4:	e43ff717 	ldw	r16,-36(fp)
 20011c8:	e0bff817 	ldw	r2,-32(fp)
 20011cc:	e17ff517 	ldw	r5,-44(fp)
 20011d0:	1009883a 	mov	r4,r2
 20011d4:	20023f80 	call	20023f8 <__mulsf3>
 20011d8:	1007883a 	mov	r3,r2
 20011dc:	1805883a 	mov	r2,r3
 20011e0:	100b883a 	mov	r5,r2
 20011e4:	8009883a 	mov	r4,r16
 20011e8:	200196c0 	call	200196c <__addsf3>
 20011ec:	1007883a 	mov	r3,r2
 20011f0:	1805883a 	mov	r2,r3
 20011f4:	1009883a 	mov	r4,r2
 20011f8:	20041b80 	call	20041b8 <__extendsfdf2>
 20011fc:	1011883a 	mov	r8,r2
 2001200:	1813883a 	mov	r9,r3
 2001204:	000d883a 	mov	r6,zero
 2001208:	01f00034 	movhi	r7,49152
 200120c:	4009883a 	mov	r4,r8
 2001210:	480b883a 	mov	r5,r9
 2001214:	200394c0 	call	200394c <__muldf3>
 2001218:	1009883a 	mov	r4,r2
 200121c:	180b883a 	mov	r5,r3
 2001220:	2021883a 	mov	r16,r4
 2001224:	2823883a 	mov	r17,r5
 2001228:	e17ff517 	ldw	r5,-44(fp)
 200122c:	e13ff517 	ldw	r4,-44(fp)
 2001230:	20023f80 	call	20023f8 <__mulsf3>
 2001234:	1007883a 	mov	r3,r2
 2001238:	1805883a 	mov	r2,r3
 200123c:	014fe034 	movhi	r5,16256
 2001240:	1009883a 	mov	r4,r2
 2001244:	200196c0 	call	200196c <__addsf3>
 2001248:	1007883a 	mov	r3,r2
 200124c:	1825883a 	mov	r18,r3
 2001250:	014fe034 	movhi	r5,16256
 2001254:	e13ff217 	ldw	r4,-56(fp)
 2001258:	200196c0 	call	200196c <__addsf3>
 200125c:	1007883a 	mov	r3,r2
 2001260:	1805883a 	mov	r2,r3
 2001264:	100b883a 	mov	r5,r2
 2001268:	9009883a 	mov	r4,r18
 200126c:	20023f80 	call	20023f8 <__mulsf3>
 2001270:	1007883a 	mov	r3,r2
 2001274:	1805883a 	mov	r2,r3
 2001278:	1009883a 	mov	r4,r2
 200127c:	20041b80 	call	20041b8 <__extendsfdf2>
 2001280:	1009883a 	mov	r4,r2
 2001284:	180b883a 	mov	r5,r3
 2001288:	200d883a 	mov	r6,r4
 200128c:	280f883a 	mov	r7,r5
 2001290:	8009883a 	mov	r4,r16
 2001294:	880b883a 	mov	r5,r17
 2001298:	2002ea00 	call	2002ea0 <__divdf3>
 200129c:	1009883a 	mov	r4,r2
 20012a0:	180b883a 	mov	r5,r3
 20012a4:	2005883a 	mov	r2,r4
 20012a8:	2807883a 	mov	r3,r5
 20012ac:	1009883a 	mov	r4,r2
 20012b0:	180b883a 	mov	r5,r3
 20012b4:	20042c80 	call	20042c8 <__truncdfsf2>
 20012b8:	1007883a 	mov	r3,r2
 20012bc:	e0fff615 	stw	r3,-40(fp)
            velocity2[0] = velocity2[0] + dv;
 20012c0:	e0bffc17 	ldw	r2,-16(fp)
 20012c4:	10c00017 	ldw	r3,0(r2)
 20012c8:	e17ff617 	ldw	r5,-40(fp)
 20012cc:	1809883a 	mov	r4,r3
 20012d0:	200196c0 	call	200196c <__addsf3>
 20012d4:	1009883a 	mov	r4,r2
 20012d8:	2007883a 	mov	r3,r4
 20012dc:	e0bffc17 	ldw	r2,-16(fp)
 20012e0:	10c00015 	stw	r3,0(r2)
            velocity2[1] = velocity2[1] + a*dv;
 20012e4:	e0bffc17 	ldw	r2,-16(fp)
 20012e8:	14000104 	addi	r16,r2,4
 20012ec:	e0bffc17 	ldw	r2,-16(fp)
 20012f0:	10800104 	addi	r2,r2,4
 20012f4:	14400017 	ldw	r17,0(r2)
 20012f8:	e17ff617 	ldw	r5,-40(fp)
 20012fc:	e13ff517 	ldw	r4,-44(fp)
 2001300:	20023f80 	call	20023f8 <__mulsf3>
 2001304:	1007883a 	mov	r3,r2
 2001308:	1805883a 	mov	r2,r3
 200130c:	100b883a 	mov	r5,r2
 2001310:	8809883a 	mov	r4,r17
 2001314:	200196c0 	call	200196c <__addsf3>
 2001318:	1007883a 	mov	r3,r2
 200131c:	1805883a 	mov	r2,r3
 2001320:	80800015 	stw	r2,0(r16)

            velocity1[0] = velocity1[0] - m21*dv;
 2001324:	e0bffb17 	ldw	r2,-20(fp)
 2001328:	14000017 	ldw	r16,0(r2)
 200132c:	e17ff617 	ldw	r5,-40(fp)
 2001330:	e13ff217 	ldw	r4,-56(fp)
 2001334:	20023f80 	call	20023f8 <__mulsf3>
 2001338:	1007883a 	mov	r3,r2
 200133c:	1805883a 	mov	r2,r3
 2001340:	100b883a 	mov	r5,r2
 2001344:	8009883a 	mov	r4,r16
 2001348:	20028280 	call	2002828 <__subsf3>
 200134c:	1009883a 	mov	r4,r2
 2001350:	2007883a 	mov	r3,r4
 2001354:	e0bffb17 	ldw	r2,-20(fp)
 2001358:	10c00015 	stw	r3,0(r2)
            velocity1[1] = velocity1[0] - a*m21*dv;
 200135c:	e0bffb17 	ldw	r2,-20(fp)
 2001360:	14000104 	addi	r16,r2,4
 2001364:	e0bffb17 	ldw	r2,-20(fp)
 2001368:	14400017 	ldw	r17,0(r2)
 200136c:	e17ff217 	ldw	r5,-56(fp)
 2001370:	e13ff517 	ldw	r4,-44(fp)
 2001374:	20023f80 	call	20023f8 <__mulsf3>
 2001378:	1007883a 	mov	r3,r2
 200137c:	1805883a 	mov	r2,r3
 2001380:	e17ff617 	ldw	r5,-40(fp)
 2001384:	1009883a 	mov	r4,r2
 2001388:	20023f80 	call	20023f8 <__mulsf3>
 200138c:	1007883a 	mov	r3,r2
 2001390:	1805883a 	mov	r2,r3
 2001394:	100b883a 	mov	r5,r2
 2001398:	8809883a 	mov	r4,r17
 200139c:	20028280 	call	2002828 <__subsf3>
 20013a0:	1007883a 	mov	r3,r2
 20013a4:	1805883a 	mov	r2,r3
 20013a8:	80800015 	stw	r2,0(r16)
		}
	}
}
 20013ac:	0001883a 	nop
 20013b0:	e6fffd04 	addi	sp,fp,-12
 20013b4:	dfc00417 	ldw	ra,16(sp)
 20013b8:	df000317 	ldw	fp,12(sp)
 20013bc:	dc800217 	ldw	r18,8(sp)
 20013c0:	dc400117 	ldw	r17,4(sp)
 20013c4:	dc000017 	ldw	r16,0(sp)
 20013c8:	dec00504 	addi	sp,sp,20
 20013cc:	f800283a 	ret

020013d0 <main>:



/* The main function creates two task and starts multi-tasking */
int main(void)
{
 20013d0:	defff804 	addi	sp,sp,-32
 20013d4:	dfc00715 	stw	ra,28(sp)
 20013d8:	df000615 	stw	fp,24(sp)
 20013dc:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 20013e0:	0009883a 	mov	r4,zero
 20013e4:	201466c0 	call	201466c <OSMboxCreate>
 20013e8:	d0a71415 	stw	r2,-25520(gp)
  MailBox2 = OSMboxCreate(NULL);
 20013ec:	0009883a 	mov	r4,zero
 20013f0:	201466c0 	call	201466c <OSMboxCreate>
 20013f4:	d0a71215 	stw	r2,-25528(gp)
  MailBox3 = OSMboxCreate(NULL);
 20013f8:	0009883a 	mov	r4,zero
 20013fc:	201466c0 	call	201466c <OSMboxCreate>
 2001400:	d0a70f15 	stw	r2,-25540(gp)

  MailBox4 = OSMboxCreate(NULL);
 2001404:	0009883a 	mov	r4,zero
 2001408:	201466c0 	call	201466c <OSMboxCreate>
 200140c:	d0a71315 	stw	r2,-25524(gp)
  MailBox5 = OSMboxCreate(NULL);
 2001410:	0009883a 	mov	r4,zero
 2001414:	201466c0 	call	201466c <OSMboxCreate>
 2001418:	d0a71115 	stw	r2,-25532(gp)
  MailBox6 = OSMboxCreate(NULL);
 200141c:	0009883a 	mov	r4,zero
 2001420:	201466c0 	call	201466c <OSMboxCreate>
 2001424:	d0a70e15 	stw	r2,-25544(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 2001428:	e17fff04 	addi	r5,fp,-4
 200142c:	0009883a 	mov	r4,zero
 2001430:	20131c80 	call	20131c8 <OSFlagCreate>
 2001434:	d0a71515 	stw	r2,-25516(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 2001438:	e17fff04 	addi	r5,fp,-4
 200143c:	0009883a 	mov	r4,zero
 2001440:	20131c80 	call	20131c8 <OSFlagCreate>
 2001444:	d0a71015 	stw	r2,-25536(gp)

  OSTaskCreateExt(task1,
 2001448:	d8000415 	stw	zero,16(sp)
 200144c:	d8000315 	stw	zero,12(sp)
 2001450:	00820004 	movi	r2,2048
 2001454:	d8800215 	stw	r2,8(sp)
 2001458:	008080b4 	movhi	r2,514
 200145c:	10bc4d04 	addi	r2,r2,-3788
 2001460:	d8800115 	stw	r2,4(sp)
 2001464:	00800044 	movi	r2,1
 2001468:	d8800015 	stw	r2,0(sp)
 200146c:	01c00044 	movi	r7,1
 2001470:	018080b4 	movhi	r6,514
 2001474:	31844c04 	addi	r6,r6,4400
 2001478:	000b883a 	mov	r5,zero
 200147c:	01008034 	movhi	r4,512
 2001480:	21009b04 	addi	r4,r4,620
 2001484:	20179fc0 	call	20179fc <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 2001488:	d8000415 	stw	zero,16(sp)
 200148c:	d8000315 	stw	zero,12(sp)
 2001490:	00820004 	movi	r2,2048
 2001494:	d8800215 	stw	r2,8(sp)
 2001498:	008080b4 	movhi	r2,514
 200149c:	10844d04 	addi	r2,r2,4404
 20014a0:	d8800115 	stw	r2,4(sp)
 20014a4:	00800084 	movi	r2,2
 20014a8:	d8800015 	stw	r2,0(sp)
 20014ac:	01c00084 	movi	r7,2
 20014b0:	018080b4 	movhi	r6,514
 20014b4:	318c4c04 	addi	r6,r6,12592
 20014b8:	000b883a 	mov	r5,zero
 20014bc:	01008034 	movhi	r4,512
 20014c0:	21011c04 	addi	r4,r4,1136
 20014c4:	20179fc0 	call	20179fc <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 20014c8:	d8000415 	stw	zero,16(sp)
 20014cc:	d8000315 	stw	zero,12(sp)
 20014d0:	00820004 	movi	r2,2048
 20014d4:	d8800215 	stw	r2,8(sp)
 20014d8:	008080b4 	movhi	r2,514
 20014dc:	108c4d04 	addi	r2,r2,12596
 20014e0:	d8800115 	stw	r2,4(sp)
 20014e4:	008000c4 	movi	r2,3
 20014e8:	d8800015 	stw	r2,0(sp)
 20014ec:	01c000c4 	movi	r7,3
 20014f0:	018080b4 	movhi	r6,514
 20014f4:	31944c04 	addi	r6,r6,20784
 20014f8:	000b883a 	mov	r5,zero
 20014fc:	01008034 	movhi	r4,512
 2001500:	2102b204 	addi	r4,r4,2760
 2001504:	20179fc0 	call	20179fc <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
 2001508:	20118900 	call	2011890 <OSStart>
  return 0;
 200150c:	0005883a 	mov	r2,zero
}
 2001510:	e037883a 	mov	sp,fp
 2001514:	dfc00117 	ldw	ra,4(sp)
 2001518:	df000017 	ldw	fp,0(sp)
 200151c:	dec00204 	addi	sp,sp,8
 2001520:	f800283a 	ret

02001524 <borderCollide>:

#include "physics.h"
#include <stdio.h>

void borderCollide(int x_ball, int y_ball, int* border_collision, float* velocity)
{
 2001524:	defff704 	addi	sp,sp,-36
 2001528:	dfc00815 	stw	ra,32(sp)
 200152c:	df000715 	stw	fp,28(sp)
 2001530:	dc000615 	stw	r16,24(sp)
 2001534:	df000704 	addi	fp,sp,28
 2001538:	e13ffb15 	stw	r4,-20(fp)
 200153c:	e17ffc15 	stw	r5,-16(fp)
 2001540:	e1bffd15 	stw	r6,-12(fp)
 2001544:	e1fffe15 	stw	r7,-8(fp)
	int collide_x = 0;
 2001548:	e03ff915 	stw	zero,-28(fp)
	int collide_y = 0;
 200154c:	e03ffa15 	stw	zero,-24(fp)
	collide_x = (x_ball < BORDER_X + BORDER + SIZE || x_ball > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2001550:	e0bffb17 	ldw	r2,-20(fp)
 2001554:	108018d0 	cmplti	r2,r2,99
 2001558:	1000031e 	bne	r2,zero,2001568 <borderCollide+0x44>
 200155c:	e0bffb17 	ldw	r2,-20(fp)
 2001560:	1080c690 	cmplti	r2,r2,794
 2001564:	1000021e 	bne	r2,zero,2001570 <borderCollide+0x4c>
 2001568:	00800044 	movi	r2,1
 200156c:	00000106 	br	2001574 <borderCollide+0x50>
 2001570:	0005883a 	mov	r2,zero
 2001574:	e0bff915 	stw	r2,-28(fp)
	collide_y = (y_ball < BORDER_Y + BORDER + SIZE || y_ball > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2001578:	e0bffc17 	ldw	r2,-16(fp)
 200157c:	10801310 	cmplti	r2,r2,76
 2001580:	1000031e 	bne	r2,zero,2001590 <borderCollide+0x6c>
 2001584:	e0bffc17 	ldw	r2,-16(fp)
 2001588:	108070d0 	cmplti	r2,r2,451
 200158c:	1000021e 	bne	r2,zero,2001598 <borderCollide+0x74>
 2001590:	00800044 	movi	r2,1
 2001594:	00000106 	br	200159c <borderCollide+0x78>
 2001598:	0005883a 	mov	r2,zero
 200159c:	e0bffa15 	stw	r2,-24(fp)
	if(!border_collision[0] && collide_x)
 20015a0:	e0bffd17 	ldw	r2,-12(fp)
 20015a4:	10800017 	ldw	r2,0(r2)
 20015a8:	10000b1e 	bne	r2,zero,20015d8 <borderCollide+0xb4>
 20015ac:	e0bff917 	ldw	r2,-28(fp)
 20015b0:	10000926 	beq	r2,zero,20015d8 <borderCollide+0xb4>
	{
		velocity[0] = 0 - velocity[0];
 20015b4:	e0bffe17 	ldw	r2,-8(fp)
 20015b8:	10c00017 	ldw	r3,0(r2)
 20015bc:	180b883a 	mov	r5,r3
 20015c0:	0009883a 	mov	r4,zero
 20015c4:	20028280 	call	2002828 <__subsf3>
 20015c8:	1009883a 	mov	r4,r2
 20015cc:	2007883a 	mov	r3,r4
 20015d0:	e0bffe17 	ldw	r2,-8(fp)
 20015d4:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 20015d8:	e0bffd17 	ldw	r2,-12(fp)
 20015dc:	10800204 	addi	r2,r2,8
 20015e0:	10800017 	ldw	r2,0(r2)
 20015e4:	10000d1e 	bne	r2,zero,200161c <borderCollide+0xf8>
 20015e8:	e0bffa17 	ldw	r2,-24(fp)
 20015ec:	10000b26 	beq	r2,zero,200161c <borderCollide+0xf8>
	{
		velocity[1] = 0 - velocity[1];
 20015f0:	e0bffe17 	ldw	r2,-8(fp)
 20015f4:	14000104 	addi	r16,r2,4
 20015f8:	e0bffe17 	ldw	r2,-8(fp)
 20015fc:	10800104 	addi	r2,r2,4
 2001600:	10c00017 	ldw	r3,0(r2)
 2001604:	180b883a 	mov	r5,r3
 2001608:	0009883a 	mov	r4,zero
 200160c:	20028280 	call	2002828 <__subsf3>
 2001610:	1007883a 	mov	r3,r2
 2001614:	1805883a 	mov	r2,r3
 2001618:	80800015 	stw	r2,0(r16)
	}

	border_collision[0] = border_collision[1];
 200161c:	e0bffd17 	ldw	r2,-12(fp)
 2001620:	10c00117 	ldw	r3,4(r2)
 2001624:	e0bffd17 	ldw	r2,-12(fp)
 2001628:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 200162c:	e0bffd17 	ldw	r2,-12(fp)
 2001630:	10800104 	addi	r2,r2,4
 2001634:	e0fff917 	ldw	r3,-28(fp)
 2001638:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 200163c:	e0bffd17 	ldw	r2,-12(fp)
 2001640:	10800204 	addi	r2,r2,8
 2001644:	e0fffd17 	ldw	r3,-12(fp)
 2001648:	18c00317 	ldw	r3,12(r3)
 200164c:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2001650:	e0bffd17 	ldw	r2,-12(fp)
 2001654:	10800304 	addi	r2,r2,12
 2001658:	e0fffa17 	ldw	r3,-24(fp)
 200165c:	10c00015 	stw	r3,0(r2)
}
 2001660:	0001883a 	nop
 2001664:	e6ffff04 	addi	sp,fp,-4
 2001668:	dfc00217 	ldw	ra,8(sp)
 200166c:	df000117 	ldw	fp,4(sp)
 2001670:	dc000017 	ldw	r16,0(sp)
 2001674:	dec00304 	addi	sp,sp,12
 2001678:	f800283a 	ret

0200167c <sqrtf>:
 200167c:	defff304 	addi	sp,sp,-52
 2001680:	dc400a15 	stw	r17,40(sp)
 2001684:	044080b4 	movhi	r17,514
 2001688:	dc800b15 	stw	r18,44(sp)
 200168c:	dc000915 	stw	r16,36(sp)
 2001690:	dfc00c15 	stw	ra,48(sp)
 2001694:	8c750604 	addi	r17,r17,-11240
 2001698:	2025883a 	mov	r18,r4
 200169c:	20017900 	call	2001790 <__ieee754_sqrtf>
 20016a0:	88c00017 	ldw	r3,0(r17)
 20016a4:	1021883a 	mov	r16,r2
 20016a8:	00bfffc4 	movi	r2,-1
 20016ac:	18800726 	beq	r3,r2,20016cc <sqrtf+0x50>
 20016b0:	9009883a 	mov	r4,r18
 20016b4:	20018ec0 	call	20018ec <__fpclassifyf>
 20016b8:	10000426 	beq	r2,zero,20016cc <sqrtf+0x50>
 20016bc:	000b883a 	mov	r5,zero
 20016c0:	9009883a 	mov	r4,r18
 20016c4:	20023300 	call	2002330 <__lesf2>
 20016c8:	10000716 	blt	r2,zero,20016e8 <sqrtf+0x6c>
 20016cc:	8005883a 	mov	r2,r16
 20016d0:	dfc00c17 	ldw	ra,48(sp)
 20016d4:	dc800b17 	ldw	r18,44(sp)
 20016d8:	dc400a17 	ldw	r17,40(sp)
 20016dc:	dc000917 	ldw	r16,36(sp)
 20016e0:	dec00d04 	addi	sp,sp,52
 20016e4:	f800283a 	ret
 20016e8:	00800044 	movi	r2,1
 20016ec:	d8800015 	stw	r2,0(sp)
 20016f0:	008080b4 	movhi	r2,514
 20016f4:	10ad4f04 	addi	r2,r2,-19140
 20016f8:	9009883a 	mov	r4,r18
 20016fc:	d8800115 	stw	r2,4(sp)
 2001700:	d8000815 	stw	zero,32(sp)
 2001704:	20041b80 	call	20041b8 <__extendsfdf2>
 2001708:	8c000017 	ldw	r16,0(r17)
 200170c:	d8800415 	stw	r2,16(sp)
 2001710:	d8c00515 	stw	r3,20(sp)
 2001714:	d8800215 	stw	r2,8(sp)
 2001718:	d8c00315 	stw	r3,12(sp)
 200171c:	80000b1e 	bne	r16,zero,200174c <sqrtf+0xd0>
 2001720:	d8000615 	stw	zero,24(sp)
 2001724:	d8000715 	stw	zero,28(sp)
 2001728:	d809883a 	mov	r4,sp
 200172c:	20018e40 	call	20018e4 <matherr>
 2001730:	10000f26 	beq	r2,zero,2001770 <sqrtf+0xf4>
 2001734:	d8800817 	ldw	r2,32(sp)
 2001738:	1000111e 	bne	r2,zero,2001780 <sqrtf+0x104>
 200173c:	d9000617 	ldw	r4,24(sp)
 2001740:	d9400717 	ldw	r5,28(sp)
 2001744:	20042c80 	call	20042c8 <__truncdfsf2>
 2001748:	003fe106 	br	20016d0 <sqrtf+0x54>
 200174c:	000d883a 	mov	r6,zero
 2001750:	000f883a 	mov	r7,zero
 2001754:	0009883a 	mov	r4,zero
 2001758:	000b883a 	mov	r5,zero
 200175c:	2002ea00 	call	2002ea0 <__divdf3>
 2001760:	d8800615 	stw	r2,24(sp)
 2001764:	d8c00715 	stw	r3,28(sp)
 2001768:	00800084 	movi	r2,2
 200176c:	80bfee1e 	bne	r16,r2,2001728 <sqrtf+0xac>
 2001770:	20046880 	call	2004688 <__errno>
 2001774:	00c00844 	movi	r3,33
 2001778:	10c00015 	stw	r3,0(r2)
 200177c:	003fed06 	br	2001734 <sqrtf+0xb8>
 2001780:	20046880 	call	2004688 <__errno>
 2001784:	d8c00817 	ldw	r3,32(sp)
 2001788:	10c00015 	stw	r3,0(r2)
 200178c:	003feb06 	br	200173c <sqrtf+0xc0>

02001790 <__ieee754_sqrtf>:
 2001790:	00a00034 	movhi	r2,32768
 2001794:	defffe04 	addi	sp,sp,-8
 2001798:	10bfffc4 	addi	r2,r2,-1
 200179c:	00dfe034 	movhi	r3,32640
 20017a0:	dc000015 	stw	r16,0(sp)
 20017a4:	dfc00115 	stw	ra,4(sp)
 20017a8:	1104703a 	and	r2,r2,r4
 20017ac:	18ffffc4 	addi	r3,r3,-1
 20017b0:	2021883a 	mov	r16,r4
 20017b4:	200b883a 	mov	r5,r4
 20017b8:	18803836 	bltu	r3,r2,200189c <__ieee754_sqrtf+0x10c>
 20017bc:	10003226 	beq	r2,zero,2001888 <__ieee754_sqrtf+0xf8>
 20017c0:	2007883a 	mov	r3,r4
 20017c4:	20003f16 	blt	r4,zero,20018c4 <__ieee754_sqrtf+0x134>
 20017c8:	200bd5fa 	srai	r5,r4,23
 20017cc:	01002034 	movhi	r4,128
 20017d0:	213fffc4 	addi	r4,r4,-1
 20017d4:	20800a36 	bltu	r4,r2,2001800 <__ieee754_sqrtf+0x70>
 20017d8:	8400202c 	andhi	r16,r16,128
 20017dc:	80003f1e 	bne	r16,zero,20018dc <__ieee754_sqrtf+0x14c>
 20017e0:	0005883a 	mov	r2,zero
 20017e4:	00000106 	br	20017ec <__ieee754_sqrtf+0x5c>
 20017e8:	3005883a 	mov	r2,r6
 20017ec:	18c7883a 	add	r3,r3,r3
 20017f0:	1900202c 	andhi	r4,r3,128
 20017f4:	11800044 	addi	r6,r2,1
 20017f8:	203ffb26 	beq	r4,zero,20017e8 <__ieee754_sqrtf+0x58>
 20017fc:	288bc83a 	sub	r5,r5,r2
 2001800:	00802034 	movhi	r2,128
 2001804:	293fe044 	addi	r4,r5,-127
 2001808:	10bfffc4 	addi	r2,r2,-1
 200180c:	1884703a 	and	r2,r3,r2
 2001810:	2140004c 	andi	r5,r4,1
 2001814:	10802034 	orhi	r2,r2,128
 2001818:	2800281e 	bne	r5,zero,20018bc <__ieee754_sqrtf+0x12c>
 200181c:	2021d07a 	srai	r16,r4,1
 2001820:	1085883a 	add	r2,r2,r2
 2001824:	01000644 	movi	r4,25
 2001828:	000f883a 	mov	r7,zero
 200182c:	000d883a 	mov	r6,zero
 2001830:	00c04034 	movhi	r3,256
 2001834:	30cb883a 	add	r5,r6,r3
 2001838:	213fffc4 	addi	r4,r4,-1
 200183c:	11400316 	blt	r2,r5,200184c <__ieee754_sqrtf+0xbc>
 2001840:	28cd883a 	add	r6,r5,r3
 2001844:	1145c83a 	sub	r2,r2,r5
 2001848:	38cf883a 	add	r7,r7,r3
 200184c:	1085883a 	add	r2,r2,r2
 2001850:	1806d07a 	srli	r3,r3,1
 2001854:	203ff71e 	bne	r4,zero,2001834 <__ieee754_sqrtf+0xa4>
 2001858:	10000226 	beq	r2,zero,2001864 <__ieee754_sqrtf+0xd4>
 200185c:	3880004c 	andi	r2,r7,1
 2001860:	388f883a 	add	r7,r7,r2
 2001864:	380fd07a 	srai	r7,r7,1
 2001868:	802095fa 	slli	r16,r16,23
 200186c:	008fc034 	movhi	r2,16128
 2001870:	388f883a 	add	r7,r7,r2
 2001874:	81c5883a 	add	r2,r16,r7
 2001878:	dfc00117 	ldw	ra,4(sp)
 200187c:	dc000017 	ldw	r16,0(sp)
 2001880:	dec00204 	addi	sp,sp,8
 2001884:	f800283a 	ret
 2001888:	2005883a 	mov	r2,r4
 200188c:	dfc00117 	ldw	ra,4(sp)
 2001890:	dc000017 	ldw	r16,0(sp)
 2001894:	dec00204 	addi	sp,sp,8
 2001898:	f800283a 	ret
 200189c:	20023f80 	call	20023f8 <__mulsf3>
 20018a0:	800b883a 	mov	r5,r16
 20018a4:	1009883a 	mov	r4,r2
 20018a8:	200196c0 	call	200196c <__addsf3>
 20018ac:	dfc00117 	ldw	ra,4(sp)
 20018b0:	dc000017 	ldw	r16,0(sp)
 20018b4:	dec00204 	addi	sp,sp,8
 20018b8:	f800283a 	ret
 20018bc:	1085883a 	add	r2,r2,r2
 20018c0:	003fd606 	br	200181c <__ieee754_sqrtf+0x8c>
 20018c4:	200b883a 	mov	r5,r4
 20018c8:	20028280 	call	2002828 <__subsf3>
 20018cc:	100b883a 	mov	r5,r2
 20018d0:	1009883a 	mov	r4,r2
 20018d4:	2001e340 	call	2001e34 <__divsf3>
 20018d8:	003fec06 	br	200188c <__ieee754_sqrtf+0xfc>
 20018dc:	00bfffc4 	movi	r2,-1
 20018e0:	003fc606 	br	20017fc <__ieee754_sqrtf+0x6c>

020018e4 <matherr>:
 20018e4:	0005883a 	mov	r2,zero
 20018e8:	f800283a 	ret

020018ec <__fpclassifyf>:
 20018ec:	00a00034 	movhi	r2,32768
 20018f0:	10bfffc4 	addi	r2,r2,-1
 20018f4:	2088703a 	and	r4,r4,r2
 20018f8:	2000021e 	bne	r4,zero,2001904 <__fpclassifyf+0x18>
 20018fc:	00800084 	movi	r2,2
 2001900:	f800283a 	ret
 2001904:	00bfe034 	movhi	r2,65408
 2001908:	00dfc034 	movhi	r3,32512
 200190c:	2085883a 	add	r2,r4,r2
 2001910:	18ffffc4 	addi	r3,r3,-1
 2001914:	18800236 	bltu	r3,r2,2001920 <__fpclassifyf+0x34>
 2001918:	00800104 	movi	r2,4
 200191c:	f800283a 	ret
 2001920:	00c02034 	movhi	r3,128
 2001924:	20bfffc4 	addi	r2,r4,-1
 2001928:	18ffff84 	addi	r3,r3,-2
 200192c:	18800236 	bltu	r3,r2,2001938 <__fpclassifyf+0x4c>
 2001930:	008000c4 	movi	r2,3
 2001934:	f800283a 	ret
 2001938:	009fe034 	movhi	r2,32640
 200193c:	2085003a 	cmpeq	r2,r4,r2
 2001940:	f800283a 	ret

02001944 <__mulsi3>:
 2001944:	0005883a 	mov	r2,zero
 2001948:	20000726 	beq	r4,zero,2001968 <__mulsi3+0x24>
 200194c:	20c0004c 	andi	r3,r4,1
 2001950:	2008d07a 	srli	r4,r4,1
 2001954:	18000126 	beq	r3,zero,200195c <__mulsi3+0x18>
 2001958:	1145883a 	add	r2,r2,r5
 200195c:	294b883a 	add	r5,r5,r5
 2001960:	203ffa1e 	bne	r4,zero,200194c <__mulsi3+0x8>
 2001964:	f800283a 	ret
 2001968:	f800283a 	ret

0200196c <__addsf3>:
 200196c:	defffc04 	addi	sp,sp,-16
 2001970:	2004d7fa 	srli	r2,r4,31
 2001974:	280cd5fa 	srli	r6,r5,23
 2001978:	dc000015 	stw	r16,0(sp)
 200197c:	00c02034 	movhi	r3,128
 2001980:	2020d5fa 	srli	r16,r4,23
 2001984:	280ed7fa 	srli	r7,r5,31
 2001988:	18ffffc4 	addi	r3,r3,-1
 200198c:	dc400115 	stw	r17,4(sp)
 2001990:	1908703a 	and	r4,r3,r4
 2001994:	194a703a 	and	r5,r3,r5
 2001998:	dfc00315 	stw	ra,12(sp)
 200199c:	dc800215 	stw	r18,8(sp)
 20019a0:	14403fcc 	andi	r17,r2,255
 20019a4:	84003fcc 	andi	r16,r16,255
 20019a8:	200890fa 	slli	r4,r4,3
 20019ac:	31803fcc 	andi	r6,r6,255
 20019b0:	280a90fa 	slli	r5,r5,3
 20019b4:	89c05026 	beq	r17,r7,2001af8 <__addsf3+0x18c>
 20019b8:	8185c83a 	sub	r2,r16,r6
 20019bc:	00807a0e 	bge	zero,r2,2001ba8 <__addsf3+0x23c>
 20019c0:	30001e1e 	bne	r6,zero,2001a3c <__addsf3+0xd0>
 20019c4:	28006d1e 	bne	r5,zero,2001b7c <__addsf3+0x210>
 20019c8:	208001cc 	andi	r2,r4,7
 20019cc:	10000426 	beq	r2,zero,20019e0 <__addsf3+0x74>
 20019d0:	208003cc 	andi	r2,r4,15
 20019d4:	00c00104 	movi	r3,4
 20019d8:	10c00126 	beq	r2,r3,20019e0 <__addsf3+0x74>
 20019dc:	20c9883a 	add	r4,r4,r3
 20019e0:	2081002c 	andhi	r2,r4,1024
 20019e4:	10003926 	beq	r2,zero,2001acc <__addsf3+0x160>
 20019e8:	84000044 	addi	r16,r16,1
 20019ec:	00803fc4 	movi	r2,255
 20019f0:	80807826 	beq	r16,r2,2001bd4 <__addsf3+0x268>
 20019f4:	200891ba 	slli	r4,r4,6
 20019f8:	8805883a 	mov	r2,r17
 20019fc:	2008d27a 	srli	r4,r4,9
 2001a00:	84003fcc 	andi	r16,r16,255
 2001a04:	800695fa 	slli	r3,r16,23
 2001a08:	10803fcc 	andi	r2,r2,255
 2001a0c:	04002034 	movhi	r16,128
 2001a10:	843fffc4 	addi	r16,r16,-1
 2001a14:	100497fa 	slli	r2,r2,31
 2001a18:	2408703a 	and	r4,r4,r16
 2001a1c:	20e0b03a 	or	r16,r4,r3
 2001a20:	8084b03a 	or	r2,r16,r2
 2001a24:	dfc00317 	ldw	ra,12(sp)
 2001a28:	dc800217 	ldw	r18,8(sp)
 2001a2c:	dc400117 	ldw	r17,4(sp)
 2001a30:	dc000017 	ldw	r16,0(sp)
 2001a34:	dec00404 	addi	sp,sp,16
 2001a38:	f800283a 	ret
 2001a3c:	00c03fc4 	movi	r3,255
 2001a40:	80ffe126 	beq	r16,r3,20019c8 <__addsf3+0x5c>
 2001a44:	29410034 	orhi	r5,r5,1024
 2001a48:	00c006c4 	movi	r3,27
 2001a4c:	18807516 	blt	r3,r2,2001c24 <__addsf3+0x2b8>
 2001a50:	00c00804 	movi	r3,32
 2001a54:	1887c83a 	sub	r3,r3,r2
 2001a58:	28c6983a 	sll	r3,r5,r3
 2001a5c:	288ad83a 	srl	r5,r5,r2
 2001a60:	1804c03a 	cmpne	r2,r3,zero
 2001a64:	288ab03a 	or	r5,r5,r2
 2001a68:	2149c83a 	sub	r4,r4,r5
 2001a6c:	2081002c 	andhi	r2,r4,1024
 2001a70:	10001426 	beq	r2,zero,2001ac4 <__addsf3+0x158>
 2001a74:	04810034 	movhi	r18,1024
 2001a78:	94bfffc4 	addi	r18,r18,-1
 2001a7c:	24a4703a 	and	r18,r4,r18
 2001a80:	9009883a 	mov	r4,r18
 2001a84:	20044700 	call	2004470 <__clzsi2>
 2001a88:	10bffec4 	addi	r2,r2,-5
 2001a8c:	90a4983a 	sll	r18,r18,r2
 2001a90:	14005416 	blt	r2,r16,2001be4 <__addsf3+0x278>
 2001a94:	1405c83a 	sub	r2,r2,r16
 2001a98:	11000044 	addi	r4,r2,1
 2001a9c:	00800804 	movi	r2,32
 2001aa0:	1105c83a 	sub	r2,r2,r4
 2001aa4:	9084983a 	sll	r2,r18,r2
 2001aa8:	9124d83a 	srl	r18,r18,r4
 2001aac:	0021883a 	mov	r16,zero
 2001ab0:	1008c03a 	cmpne	r4,r2,zero
 2001ab4:	9108b03a 	or	r4,r18,r4
 2001ab8:	003fc306 	br	20019c8 <__addsf3+0x5c>
 2001abc:	1000db26 	beq	r2,zero,2001e2c <__addsf3+0x4c0>
 2001ac0:	1009883a 	mov	r4,r2
 2001ac4:	208001cc 	andi	r2,r4,7
 2001ac8:	103fc11e 	bne	r2,zero,20019d0 <__addsf3+0x64>
 2001acc:	2006d0fa 	srli	r3,r4,3
 2001ad0:	01003fc4 	movi	r4,255
 2001ad4:	8805883a 	mov	r2,r17
 2001ad8:	8100241e 	bne	r16,r4,2001b6c <__addsf3+0x200>
 2001adc:	18006e26 	beq	r3,zero,2001c98 <__addsf3+0x32c>
 2001ae0:	19001034 	orhi	r4,r3,64
 2001ae4:	00c02034 	movhi	r3,128
 2001ae8:	18ffffc4 	addi	r3,r3,-1
 2001aec:	043fffc4 	movi	r16,-1
 2001af0:	20c8703a 	and	r4,r4,r3
 2001af4:	003fc206 	br	2001a00 <__addsf3+0x94>
 2001af8:	8187c83a 	sub	r3,r16,r6
 2001afc:	00c03e0e 	bge	zero,r3,2001bf8 <__addsf3+0x28c>
 2001b00:	30002326 	beq	r6,zero,2001b90 <__addsf3+0x224>
 2001b04:	01803fc4 	movi	r6,255
 2001b08:	81bfaf26 	beq	r16,r6,20019c8 <__addsf3+0x5c>
 2001b0c:	29410034 	orhi	r5,r5,1024
 2001b10:	018006c4 	movi	r6,27
 2001b14:	30c07416 	blt	r6,r3,2001ce8 <__addsf3+0x37c>
 2001b18:	01800804 	movi	r6,32
 2001b1c:	30cdc83a 	sub	r6,r6,r3
 2001b20:	298c983a 	sll	r6,r5,r6
 2001b24:	28cad83a 	srl	r5,r5,r3
 2001b28:	3006c03a 	cmpne	r3,r6,zero
 2001b2c:	28cab03a 	or	r5,r5,r3
 2001b30:	2149883a 	add	r4,r4,r5
 2001b34:	20c1002c 	andhi	r3,r4,1024
 2001b38:	183fe226 	beq	r3,zero,2001ac4 <__addsf3+0x158>
 2001b3c:	84000044 	addi	r16,r16,1
 2001b40:	00c03fc4 	movi	r3,255
 2001b44:	80c05426 	beq	r16,r3,2001c98 <__addsf3+0x32c>
 2001b48:	00bf0034 	movhi	r2,64512
 2001b4c:	10bfffc4 	addi	r2,r2,-1
 2001b50:	20c0004c 	andi	r3,r4,1
 2001b54:	2088703a 	and	r4,r4,r2
 2001b58:	2008d07a 	srli	r4,r4,1
 2001b5c:	20c8b03a 	or	r4,r4,r3
 2001b60:	003f9906 	br	20019c8 <__addsf3+0x5c>
 2001b64:	0007883a 	mov	r3,zero
 2001b68:	0005883a 	mov	r2,zero
 2001b6c:	01002034 	movhi	r4,128
 2001b70:	213fffc4 	addi	r4,r4,-1
 2001b74:	1908703a 	and	r4,r3,r4
 2001b78:	003fa106 	br	2001a00 <__addsf3+0x94>
 2001b7c:	10bfffc4 	addi	r2,r2,-1
 2001b80:	103fb926 	beq	r2,zero,2001a68 <__addsf3+0xfc>
 2001b84:	00c03fc4 	movi	r3,255
 2001b88:	80ffaf1e 	bne	r16,r3,2001a48 <__addsf3+0xdc>
 2001b8c:	003f8e06 	br	20019c8 <__addsf3+0x5c>
 2001b90:	283f8d26 	beq	r5,zero,20019c8 <__addsf3+0x5c>
 2001b94:	18ffffc4 	addi	r3,r3,-1
 2001b98:	183fe526 	beq	r3,zero,2001b30 <__addsf3+0x1c4>
 2001b9c:	01803fc4 	movi	r6,255
 2001ba0:	81bfdb1e 	bne	r16,r6,2001b10 <__addsf3+0x1a4>
 2001ba4:	003f8806 	br	20019c8 <__addsf3+0x5c>
 2001ba8:	1000201e 	bne	r2,zero,2001c2c <__addsf3+0x2c0>
 2001bac:	80800044 	addi	r2,r16,1
 2001bb0:	10803fcc 	andi	r2,r2,255
 2001bb4:	01800044 	movi	r6,1
 2001bb8:	3080450e 	bge	r6,r2,2001cd0 <__addsf3+0x364>
 2001bbc:	2165c83a 	sub	r18,r4,r5
 2001bc0:	90c1002c 	andhi	r3,r18,1024
 2001bc4:	18002b26 	beq	r3,zero,2001c74 <__addsf3+0x308>
 2001bc8:	2925c83a 	sub	r18,r5,r4
 2001bcc:	3823883a 	mov	r17,r7
 2001bd0:	003fab06 	br	2001a80 <__addsf3+0x114>
 2001bd4:	8805883a 	mov	r2,r17
 2001bd8:	043fffc4 	movi	r16,-1
 2001bdc:	0009883a 	mov	r4,zero
 2001be0:	003f8706 	br	2001a00 <__addsf3+0x94>
 2001be4:	013f0034 	movhi	r4,64512
 2001be8:	213fffc4 	addi	r4,r4,-1
 2001bec:	80a1c83a 	sub	r16,r16,r2
 2001bf0:	9108703a 	and	r4,r18,r4
 2001bf4:	003f7406 	br	20019c8 <__addsf3+0x5c>
 2001bf8:	1800411e 	bne	r3,zero,2001d00 <__addsf3+0x394>
 2001bfc:	80c00044 	addi	r3,r16,1
 2001c00:	19c03fcc 	andi	r7,r3,255
 2001c04:	01800044 	movi	r6,1
 2001c08:	31c0260e 	bge	r6,r7,2001ca4 <__addsf3+0x338>
 2001c0c:	01803fc4 	movi	r6,255
 2001c10:	19802126 	beq	r3,r6,2001c98 <__addsf3+0x32c>
 2001c14:	2149883a 	add	r4,r4,r5
 2001c18:	2008d07a 	srli	r4,r4,1
 2001c1c:	1821883a 	mov	r16,r3
 2001c20:	003f6906 	br	20019c8 <__addsf3+0x5c>
 2001c24:	01400044 	movi	r5,1
 2001c28:	003f8f06 	br	2001a68 <__addsf3+0xfc>
 2001c2c:	8000151e 	bne	r16,zero,2001c84 <__addsf3+0x318>
 2001c30:	20002f26 	beq	r4,zero,2001cf0 <__addsf3+0x384>
 2001c34:	0084303a 	nor	r2,zero,r2
 2001c38:	10000a26 	beq	r2,zero,2001c64 <__addsf3+0x2f8>
 2001c3c:	00c03fc4 	movi	r3,255
 2001c40:	30c02b26 	beq	r6,r3,2001cf0 <__addsf3+0x384>
 2001c44:	00c006c4 	movi	r3,27
 2001c48:	18806d16 	blt	r3,r2,2001e00 <__addsf3+0x494>
 2001c4c:	00c00804 	movi	r3,32
 2001c50:	1887c83a 	sub	r3,r3,r2
 2001c54:	20c6983a 	sll	r3,r4,r3
 2001c58:	2084d83a 	srl	r2,r4,r2
 2001c5c:	1808c03a 	cmpne	r4,r3,zero
 2001c60:	1108b03a 	or	r4,r2,r4
 2001c64:	2909c83a 	sub	r4,r5,r4
 2001c68:	3021883a 	mov	r16,r6
 2001c6c:	3823883a 	mov	r17,r7
 2001c70:	003f7e06 	br	2001a6c <__addsf3+0x100>
 2001c74:	903f821e 	bne	r18,zero,2001a80 <__addsf3+0x114>
 2001c78:	0005883a 	mov	r2,zero
 2001c7c:	0021883a 	mov	r16,zero
 2001c80:	003fba06 	br	2001b6c <__addsf3+0x200>
 2001c84:	00c03fc4 	movi	r3,255
 2001c88:	30c01926 	beq	r6,r3,2001cf0 <__addsf3+0x384>
 2001c8c:	0085c83a 	sub	r2,zero,r2
 2001c90:	21010034 	orhi	r4,r4,1024
 2001c94:	003feb06 	br	2001c44 <__addsf3+0x2d8>
 2001c98:	043fffc4 	movi	r16,-1
 2001c9c:	0009883a 	mov	r4,zero
 2001ca0:	003f5706 	br	2001a00 <__addsf3+0x94>
 2001ca4:	80004a1e 	bne	r16,zero,2001dd0 <__addsf3+0x464>
 2001ca8:	20005926 	beq	r4,zero,2001e10 <__addsf3+0x4a4>
 2001cac:	283f4626 	beq	r5,zero,20019c8 <__addsf3+0x5c>
 2001cb0:	2149883a 	add	r4,r4,r5
 2001cb4:	2081002c 	andhi	r2,r4,1024
 2001cb8:	103f8226 	beq	r2,zero,2001ac4 <__addsf3+0x158>
 2001cbc:	00bf0034 	movhi	r2,64512
 2001cc0:	10bfffc4 	addi	r2,r2,-1
 2001cc4:	3021883a 	mov	r16,r6
 2001cc8:	2088703a 	and	r4,r4,r2
 2001ccc:	003f3e06 	br	20019c8 <__addsf3+0x5c>
 2001cd0:	8000121e 	bne	r16,zero,2001d1c <__addsf3+0x3b0>
 2001cd4:	2000261e 	bne	r4,zero,2001d70 <__addsf3+0x404>
 2001cd8:	283fa226 	beq	r5,zero,2001b64 <__addsf3+0x1f8>
 2001cdc:	2809883a 	mov	r4,r5
 2001ce0:	3823883a 	mov	r17,r7
 2001ce4:	003f3806 	br	20019c8 <__addsf3+0x5c>
 2001ce8:	01400044 	movi	r5,1
 2001cec:	003f9006 	br	2001b30 <__addsf3+0x1c4>
 2001cf0:	2809883a 	mov	r4,r5
 2001cf4:	3021883a 	mov	r16,r6
 2001cf8:	3823883a 	mov	r17,r7
 2001cfc:	003f3206 	br	20019c8 <__addsf3+0x5c>
 2001d00:	80000c1e 	bne	r16,zero,2001d34 <__addsf3+0x3c8>
 2001d04:	20002f26 	beq	r4,zero,2001dc4 <__addsf3+0x458>
 2001d08:	00c6303a 	nor	r3,zero,r3
 2001d0c:	18002b1e 	bne	r3,zero,2001dbc <__addsf3+0x450>
 2001d10:	2149883a 	add	r4,r4,r5
 2001d14:	3021883a 	mov	r16,r6
 2001d18:	003f8606 	br	2001b34 <__addsf3+0x1c8>
 2001d1c:	20001b1e 	bne	r4,zero,2001d8c <__addsf3+0x420>
 2001d20:	28003926 	beq	r5,zero,2001e08 <__addsf3+0x49c>
 2001d24:	2809883a 	mov	r4,r5
 2001d28:	3823883a 	mov	r17,r7
 2001d2c:	04003fc4 	movi	r16,255
 2001d30:	003f2506 	br	20019c8 <__addsf3+0x5c>
 2001d34:	01c03fc4 	movi	r7,255
 2001d38:	31c02226 	beq	r6,r7,2001dc4 <__addsf3+0x458>
 2001d3c:	00c7c83a 	sub	r3,zero,r3
 2001d40:	21010034 	orhi	r4,r4,1024
 2001d44:	01c006c4 	movi	r7,27
 2001d48:	38c03616 	blt	r7,r3,2001e24 <__addsf3+0x4b8>
 2001d4c:	01c00804 	movi	r7,32
 2001d50:	38cfc83a 	sub	r7,r7,r3
 2001d54:	21ce983a 	sll	r7,r4,r7
 2001d58:	20c6d83a 	srl	r3,r4,r3
 2001d5c:	3808c03a 	cmpne	r4,r7,zero
 2001d60:	1906b03a 	or	r3,r3,r4
 2001d64:	1949883a 	add	r4,r3,r5
 2001d68:	3021883a 	mov	r16,r6
 2001d6c:	003f7106 	br	2001b34 <__addsf3+0x1c8>
 2001d70:	283f1526 	beq	r5,zero,20019c8 <__addsf3+0x5c>
 2001d74:	2145c83a 	sub	r2,r4,r5
 2001d78:	10c1002c 	andhi	r3,r2,1024
 2001d7c:	183f4f26 	beq	r3,zero,2001abc <__addsf3+0x150>
 2001d80:	2909c83a 	sub	r4,r5,r4
 2001d84:	3823883a 	mov	r17,r7
 2001d88:	003f0f06 	br	20019c8 <__addsf3+0x5c>
 2001d8c:	28001a26 	beq	r5,zero,2001df8 <__addsf3+0x48c>
 2001d90:	2008d0fa 	srli	r4,r4,3
 2001d94:	2080102c 	andhi	r2,r4,64
 2001d98:	10000526 	beq	r2,zero,2001db0 <__addsf3+0x444>
 2001d9c:	280ad0fa 	srli	r5,r5,3
 2001da0:	2880102c 	andhi	r2,r5,64
 2001da4:	1000021e 	bne	r2,zero,2001db0 <__addsf3+0x444>
 2001da8:	2809883a 	mov	r4,r5
 2001dac:	3823883a 	mov	r17,r7
 2001db0:	200890fa 	slli	r4,r4,3
 2001db4:	04003fc4 	movi	r16,255
 2001db8:	003f0306 	br	20019c8 <__addsf3+0x5c>
 2001dbc:	01c03fc4 	movi	r7,255
 2001dc0:	31ffe01e 	bne	r6,r7,2001d44 <__addsf3+0x3d8>
 2001dc4:	2809883a 	mov	r4,r5
 2001dc8:	3021883a 	mov	r16,r6
 2001dcc:	003efe06 	br	20019c8 <__addsf3+0x5c>
 2001dd0:	20001126 	beq	r4,zero,2001e18 <__addsf3+0x4ac>
 2001dd4:	28000826 	beq	r5,zero,2001df8 <__addsf3+0x48c>
 2001dd8:	2008d0fa 	srli	r4,r4,3
 2001ddc:	2080102c 	andhi	r2,r4,64
 2001de0:	103ff326 	beq	r2,zero,2001db0 <__addsf3+0x444>
 2001de4:	280ad0fa 	srli	r5,r5,3
 2001de8:	2880102c 	andhi	r2,r5,64
 2001dec:	103ff01e 	bne	r2,zero,2001db0 <__addsf3+0x444>
 2001df0:	2809883a 	mov	r4,r5
 2001df4:	003fee06 	br	2001db0 <__addsf3+0x444>
 2001df8:	04003fc4 	movi	r16,255
 2001dfc:	003ef206 	br	20019c8 <__addsf3+0x5c>
 2001e00:	01000044 	movi	r4,1
 2001e04:	003f9706 	br	2001c64 <__addsf3+0x2f8>
 2001e08:	0005883a 	mov	r2,zero
 2001e0c:	003f3406 	br	2001ae0 <__addsf3+0x174>
 2001e10:	2809883a 	mov	r4,r5
 2001e14:	003eec06 	br	20019c8 <__addsf3+0x5c>
 2001e18:	2809883a 	mov	r4,r5
 2001e1c:	04003fc4 	movi	r16,255
 2001e20:	003ee906 	br	20019c8 <__addsf3+0x5c>
 2001e24:	00c00044 	movi	r3,1
 2001e28:	003fce06 	br	2001d64 <__addsf3+0x3f8>
 2001e2c:	0005883a 	mov	r2,zero
 2001e30:	003f4e06 	br	2001b6c <__addsf3+0x200>

02001e34 <__divsf3>:
 2001e34:	defff504 	addi	sp,sp,-44
 2001e38:	200cd5fa 	srli	r6,r4,23
 2001e3c:	dcc00415 	stw	r19,16(sp)
 2001e40:	2026d7fa 	srli	r19,r4,31
 2001e44:	00c02034 	movhi	r3,128
 2001e48:	dd800715 	stw	r22,28(sp)
 2001e4c:	dd000515 	stw	r20,20(sp)
 2001e50:	dc800315 	stw	r18,12(sp)
 2001e54:	18ffffc4 	addi	r3,r3,-1
 2001e58:	dfc00a15 	stw	ra,40(sp)
 2001e5c:	df000915 	stw	fp,36(sp)
 2001e60:	ddc00815 	stw	r23,32(sp)
 2001e64:	dd400615 	stw	r21,24(sp)
 2001e68:	dc400215 	stw	r17,8(sp)
 2001e6c:	dc000115 	stw	r16,4(sp)
 2001e70:	35003fcc 	andi	r20,r6,255
 2001e74:	1924703a 	and	r18,r3,r4
 2001e78:	9d803fcc 	andi	r22,r19,255
 2001e7c:	a0005226 	beq	r20,zero,2001fc8 <__divsf3+0x194>
 2001e80:	00803fc4 	movi	r2,255
 2001e84:	a0802e26 	beq	r20,r2,2001f40 <__divsf3+0x10c>
 2001e88:	91002034 	orhi	r4,r18,128
 2001e8c:	202490fa 	slli	r18,r4,3
 2001e90:	a53fe044 	addi	r20,r20,-127
 2001e94:	0021883a 	mov	r16,zero
 2001e98:	002f883a 	mov	r23,zero
 2001e9c:	280cd5fa 	srli	r6,r5,23
 2001ea0:	282ad7fa 	srli	r21,r5,31
 2001ea4:	00c02034 	movhi	r3,128
 2001ea8:	18ffffc4 	addi	r3,r3,-1
 2001eac:	31803fcc 	andi	r6,r6,255
 2001eb0:	1962703a 	and	r17,r3,r5
 2001eb4:	af003fcc 	andi	fp,r21,255
 2001eb8:	30004a26 	beq	r6,zero,2001fe4 <__divsf3+0x1b0>
 2001ebc:	00803fc4 	movi	r2,255
 2001ec0:	30804526 	beq	r6,r2,2001fd8 <__divsf3+0x1a4>
 2001ec4:	89402034 	orhi	r5,r17,128
 2001ec8:	282290fa 	slli	r17,r5,3
 2001ecc:	31bfe044 	addi	r6,r6,-127
 2001ed0:	000b883a 	mov	r5,zero
 2001ed4:	2c20b03a 	or	r16,r5,r16
 2001ed8:	802090ba 	slli	r16,r16,2
 2001edc:	00808034 	movhi	r2,512
 2001ee0:	1087c004 	addi	r2,r2,7936
 2001ee4:	80a1883a 	add	r16,r16,r2
 2001ee8:	81000017 	ldw	r4,0(r16)
 2001eec:	9d46f03a 	xor	r3,r19,r21
 2001ef0:	180f883a 	mov	r7,r3
 2001ef4:	18803fcc 	andi	r2,r3,255
 2001ef8:	a18dc83a 	sub	r6,r20,r6
 2001efc:	2000683a 	jmp	r4
 2001f00:	020020e4 	muli	r8,zero,131
 2001f04:	02001f68 	cmpgeui	r8,zero,125
 2001f08:	020020d8 	cmpnei	r8,zero,131
 2001f0c:	02001f54 	movui	r8,125
 2001f10:	020020d8 	cmpnei	r8,zero,131
 2001f14:	020020b0 	cmpltui	r8,zero,130
 2001f18:	020020d8 	cmpnei	r8,zero,131
 2001f1c:	02001f54 	movui	r8,125
 2001f20:	02001f68 	cmpgeui	r8,zero,125
 2001f24:	02001f68 	cmpgeui	r8,zero,125
 2001f28:	020020b0 	cmpltui	r8,zero,130
 2001f2c:	02001f54 	movui	r8,125
 2001f30:	020021c4 	movi	r8,135
 2001f34:	020021c4 	movi	r8,135
 2001f38:	020021c4 	movi	r8,135
 2001f3c:	02002178 	rdprs	r8,zero,133
 2001f40:	9000581e 	bne	r18,zero,20020a4 <__divsf3+0x270>
 2001f44:	04000204 	movi	r16,8
 2001f48:	05c00084 	movi	r23,2
 2001f4c:	003fd306 	br	2001e9c <__divsf3+0x68>
 2001f50:	0023883a 	mov	r17,zero
 2001f54:	e02d883a 	mov	r22,fp
 2001f58:	282f883a 	mov	r23,r5
 2001f5c:	00800084 	movi	r2,2
 2001f60:	b8808f1e 	bne	r23,r2,20021a0 <__divsf3+0x36c>
 2001f64:	b005883a 	mov	r2,r22
 2001f68:	11c0004c 	andi	r7,r2,1
 2001f6c:	013fffc4 	movi	r4,-1
 2001f70:	000d883a 	mov	r6,zero
 2001f74:	21003fcc 	andi	r4,r4,255
 2001f78:	200895fa 	slli	r4,r4,23
 2001f7c:	38803fcc 	andi	r2,r7,255
 2001f80:	00c02034 	movhi	r3,128
 2001f84:	100497fa 	slli	r2,r2,31
 2001f88:	18ffffc4 	addi	r3,r3,-1
 2001f8c:	30c6703a 	and	r3,r6,r3
 2001f90:	1906b03a 	or	r3,r3,r4
 2001f94:	1884b03a 	or	r2,r3,r2
 2001f98:	dfc00a17 	ldw	ra,40(sp)
 2001f9c:	df000917 	ldw	fp,36(sp)
 2001fa0:	ddc00817 	ldw	r23,32(sp)
 2001fa4:	dd800717 	ldw	r22,28(sp)
 2001fa8:	dd400617 	ldw	r21,24(sp)
 2001fac:	dd000517 	ldw	r20,20(sp)
 2001fb0:	dcc00417 	ldw	r19,16(sp)
 2001fb4:	dc800317 	ldw	r18,12(sp)
 2001fb8:	dc400217 	ldw	r17,8(sp)
 2001fbc:	dc000117 	ldw	r16,4(sp)
 2001fc0:	dec00b04 	addi	sp,sp,44
 2001fc4:	f800283a 	ret
 2001fc8:	90002b1e 	bne	r18,zero,2002078 <__divsf3+0x244>
 2001fcc:	04000104 	movi	r16,4
 2001fd0:	05c00044 	movi	r23,1
 2001fd4:	003fb106 	br	2001e9c <__divsf3+0x68>
 2001fd8:	8800251e 	bne	r17,zero,2002070 <__divsf3+0x23c>
 2001fdc:	01400084 	movi	r5,2
 2001fe0:	00000206 	br	2001fec <__divsf3+0x1b8>
 2001fe4:	88001a1e 	bne	r17,zero,2002050 <__divsf3+0x21c>
 2001fe8:	01400044 	movi	r5,1
 2001fec:	8160b03a 	or	r16,r16,r5
 2001ff0:	802090ba 	slli	r16,r16,2
 2001ff4:	00c08034 	movhi	r3,512
 2001ff8:	18c80404 	addi	r3,r3,8208
 2001ffc:	80e1883a 	add	r16,r16,r3
 2002000:	80c00017 	ldw	r3,0(r16)
 2002004:	9d44f03a 	xor	r2,r19,r21
 2002008:	a18dc83a 	sub	r6,r20,r6
 200200c:	1800683a 	jmp	r3
 2002010:	02001f68 	cmpgeui	r8,zero,125
 2002014:	02001f68 	cmpgeui	r8,zero,125
 2002018:	020021b4 	movhi	r8,134
 200201c:	02001f50 	cmplti	r8,zero,125
 2002020:	020021b4 	movhi	r8,134
 2002024:	020020b0 	cmpltui	r8,zero,130
 2002028:	020021b4 	movhi	r8,134
 200202c:	02001f50 	cmplti	r8,zero,125
 2002030:	02001f68 	cmpgeui	r8,zero,125
 2002034:	02001f68 	cmpgeui	r8,zero,125
 2002038:	020020b0 	cmpltui	r8,zero,130
 200203c:	02001f50 	cmplti	r8,zero,125
 2002040:	020021c4 	movi	r8,135
 2002044:	020021c4 	movi	r8,135
 2002048:	020021c4 	movi	r8,135
 200204c:	020021dc 	xori	r8,zero,135
 2002050:	8809883a 	mov	r4,r17
 2002054:	20044700 	call	2004470 <__clzsi2>
 2002058:	10fffec4 	addi	r3,r2,-5
 200205c:	10801d84 	addi	r2,r2,118
 2002060:	88e2983a 	sll	r17,r17,r3
 2002064:	008dc83a 	sub	r6,zero,r2
 2002068:	000b883a 	mov	r5,zero
 200206c:	003f9906 	br	2001ed4 <__divsf3+0xa0>
 2002070:	014000c4 	movi	r5,3
 2002074:	003f9706 	br	2001ed4 <__divsf3+0xa0>
 2002078:	9009883a 	mov	r4,r18
 200207c:	d9400015 	stw	r5,0(sp)
 2002080:	20044700 	call	2004470 <__clzsi2>
 2002084:	10fffec4 	addi	r3,r2,-5
 2002088:	11801d84 	addi	r6,r2,118
 200208c:	90e4983a 	sll	r18,r18,r3
 2002090:	01a9c83a 	sub	r20,zero,r6
 2002094:	0021883a 	mov	r16,zero
 2002098:	002f883a 	mov	r23,zero
 200209c:	d9400017 	ldw	r5,0(sp)
 20020a0:	003f7e06 	br	2001e9c <__divsf3+0x68>
 20020a4:	04000304 	movi	r16,12
 20020a8:	05c000c4 	movi	r23,3
 20020ac:	003f7b06 	br	2001e9c <__divsf3+0x68>
 20020b0:	01802034 	movhi	r6,128
 20020b4:	000f883a 	mov	r7,zero
 20020b8:	31bfffc4 	addi	r6,r6,-1
 20020bc:	013fffc4 	movi	r4,-1
 20020c0:	003fac06 	br	2001f74 <__divsf3+0x140>
 20020c4:	01400044 	movi	r5,1
 20020c8:	2909c83a 	sub	r4,r5,r4
 20020cc:	00c006c4 	movi	r3,27
 20020d0:	19004b0e 	bge	r3,r4,2002200 <__divsf3+0x3cc>
 20020d4:	114e703a 	and	r7,r2,r5
 20020d8:	0009883a 	mov	r4,zero
 20020dc:	000d883a 	mov	r6,zero
 20020e0:	003fa406 	br	2001f74 <__divsf3+0x140>
 20020e4:	9006917a 	slli	r3,r18,5
 20020e8:	8822917a 	slli	r17,r17,5
 20020ec:	1c40372e 	bgeu	r3,r17,20021cc <__divsf3+0x398>
 20020f0:	31bfffc4 	addi	r6,r6,-1
 20020f4:	010006c4 	movi	r4,27
 20020f8:	000b883a 	mov	r5,zero
 20020fc:	180f883a 	mov	r7,r3
 2002100:	294b883a 	add	r5,r5,r5
 2002104:	18c7883a 	add	r3,r3,r3
 2002108:	38000116 	blt	r7,zero,2002110 <__divsf3+0x2dc>
 200210c:	1c400236 	bltu	r3,r17,2002118 <__divsf3+0x2e4>
 2002110:	1c47c83a 	sub	r3,r3,r17
 2002114:	29400054 	ori	r5,r5,1
 2002118:	213fffc4 	addi	r4,r4,-1
 200211c:	203ff71e 	bne	r4,zero,20020fc <__divsf3+0x2c8>
 2002120:	1806c03a 	cmpne	r3,r3,zero
 2002124:	1962b03a 	or	r17,r3,r5
 2002128:	31001fc4 	addi	r4,r6,127
 200212c:	013fe50e 	bge	zero,r4,20020c4 <__divsf3+0x290>
 2002130:	88c001cc 	andi	r3,r17,7
 2002134:	18000426 	beq	r3,zero,2002148 <__divsf3+0x314>
 2002138:	88c003cc 	andi	r3,r17,15
 200213c:	01400104 	movi	r5,4
 2002140:	19400126 	beq	r3,r5,2002148 <__divsf3+0x314>
 2002144:	8963883a 	add	r17,r17,r5
 2002148:	88c2002c 	andhi	r3,r17,2048
 200214c:	18000426 	beq	r3,zero,2002160 <__divsf3+0x32c>
 2002150:	00fe0034 	movhi	r3,63488
 2002154:	18ffffc4 	addi	r3,r3,-1
 2002158:	31002004 	addi	r4,r6,128
 200215c:	88e2703a 	and	r17,r17,r3
 2002160:	00c03f84 	movi	r3,254
 2002164:	193f8016 	blt	r3,r4,2001f68 <__divsf3+0x134>
 2002168:	880c91ba 	slli	r6,r17,6
 200216c:	11c0004c 	andi	r7,r2,1
 2002170:	300cd27a 	srli	r6,r6,9
 2002174:	003f7f06 	br	2001f74 <__divsf3+0x140>
 2002178:	9080102c 	andhi	r2,r18,64
 200217c:	10000226 	beq	r2,zero,2002188 <__divsf3+0x354>
 2002180:	8880102c 	andhi	r2,r17,64
 2002184:	10001826 	beq	r2,zero,20021e8 <__divsf3+0x3b4>
 2002188:	00802034 	movhi	r2,128
 200218c:	91801034 	orhi	r6,r18,64
 2002190:	10bfffc4 	addi	r2,r2,-1
 2002194:	980f883a 	mov	r7,r19
 2002198:	308c703a 	and	r6,r6,r2
 200219c:	003fc706 	br	20020bc <__divsf3+0x288>
 20021a0:	008000c4 	movi	r2,3
 20021a4:	b8802d26 	beq	r23,r2,200225c <__divsf3+0x428>
 20021a8:	00c00044 	movi	r3,1
 20021ac:	b005883a 	mov	r2,r22
 20021b0:	b8ffdd1e 	bne	r23,r3,2002128 <__divsf3+0x2f4>
 20021b4:	11c0004c 	andi	r7,r2,1
 20021b8:	0009883a 	mov	r4,zero
 20021bc:	000d883a 	mov	r6,zero
 20021c0:	003f6c06 	br	2001f74 <__divsf3+0x140>
 20021c4:	9023883a 	mov	r17,r18
 20021c8:	003f6406 	br	2001f5c <__divsf3+0x128>
 20021cc:	1c47c83a 	sub	r3,r3,r17
 20021d0:	01000684 	movi	r4,26
 20021d4:	01400044 	movi	r5,1
 20021d8:	003fc806 	br	20020fc <__divsf3+0x2c8>
 20021dc:	9080102c 	andhi	r2,r18,64
 20021e0:	103fe926 	beq	r2,zero,2002188 <__divsf3+0x354>
 20021e4:	0023883a 	mov	r17,zero
 20021e8:	00802034 	movhi	r2,128
 20021ec:	89801034 	orhi	r6,r17,64
 20021f0:	10bfffc4 	addi	r2,r2,-1
 20021f4:	a80f883a 	mov	r7,r21
 20021f8:	308c703a 	and	r6,r6,r2
 20021fc:	003faf06 	br	20020bc <__divsf3+0x288>
 2002200:	01c00804 	movi	r7,32
 2002204:	390fc83a 	sub	r7,r7,r4
 2002208:	89ce983a 	sll	r7,r17,r7
 200220c:	890ad83a 	srl	r5,r17,r4
 2002210:	380ec03a 	cmpne	r7,r7,zero
 2002214:	29cab03a 	or	r5,r5,r7
 2002218:	28c001cc 	andi	r3,r5,7
 200221c:	18000426 	beq	r3,zero,2002230 <__divsf3+0x3fc>
 2002220:	28c003cc 	andi	r3,r5,15
 2002224:	01000104 	movi	r4,4
 2002228:	19000126 	beq	r3,r4,2002230 <__divsf3+0x3fc>
 200222c:	290b883a 	add	r5,r5,r4
 2002230:	28c1002c 	andhi	r3,r5,1024
 2002234:	18000426 	beq	r3,zero,2002248 <__divsf3+0x414>
 2002238:	11c0004c 	andi	r7,r2,1
 200223c:	01000044 	movi	r4,1
 2002240:	000d883a 	mov	r6,zero
 2002244:	003f4b06 	br	2001f74 <__divsf3+0x140>
 2002248:	280a91ba 	slli	r5,r5,6
 200224c:	11c0004c 	andi	r7,r2,1
 2002250:	0009883a 	mov	r4,zero
 2002254:	280cd27a 	srli	r6,r5,9
 2002258:	003f4606 	br	2001f74 <__divsf3+0x140>
 200225c:	00802034 	movhi	r2,128
 2002260:	89801034 	orhi	r6,r17,64
 2002264:	10bfffc4 	addi	r2,r2,-1
 2002268:	b00f883a 	mov	r7,r22
 200226c:	308c703a 	and	r6,r6,r2
 2002270:	003f9206 	br	20020bc <__divsf3+0x288>

02002274 <__gesf2>:
 2002274:	2004d5fa 	srli	r2,r4,23
 2002278:	2806d5fa 	srli	r3,r5,23
 200227c:	01802034 	movhi	r6,128
 2002280:	31bfffc4 	addi	r6,r6,-1
 2002284:	10803fcc 	andi	r2,r2,255
 2002288:	01c03fc4 	movi	r7,255
 200228c:	3110703a 	and	r8,r6,r4
 2002290:	18c03fcc 	andi	r3,r3,255
 2002294:	314c703a 	and	r6,r6,r5
 2002298:	2008d7fa 	srli	r4,r4,31
 200229c:	280ad7fa 	srli	r5,r5,31
 20022a0:	11c01926 	beq	r2,r7,2002308 <__gesf2+0x94>
 20022a4:	01c03fc4 	movi	r7,255
 20022a8:	19c00f26 	beq	r3,r7,20022e8 <__gesf2+0x74>
 20022ac:	1000061e 	bne	r2,zero,20022c8 <__gesf2+0x54>
 20022b0:	400f003a 	cmpeq	r7,r8,zero
 20022b4:	1800071e 	bne	r3,zero,20022d4 <__gesf2+0x60>
 20022b8:	3000061e 	bne	r6,zero,20022d4 <__gesf2+0x60>
 20022bc:	0005883a 	mov	r2,zero
 20022c0:	40000e1e 	bne	r8,zero,20022fc <__gesf2+0x88>
 20022c4:	f800283a 	ret
 20022c8:	18000a1e 	bne	r3,zero,20022f4 <__gesf2+0x80>
 20022cc:	30000b26 	beq	r6,zero,20022fc <__gesf2+0x88>
 20022d0:	000f883a 	mov	r7,zero
 20022d4:	29403fcc 	andi	r5,r5,255
 20022d8:	38000726 	beq	r7,zero,20022f8 <__gesf2+0x84>
 20022dc:	28000826 	beq	r5,zero,2002300 <__gesf2+0x8c>
 20022e0:	00800044 	movi	r2,1
 20022e4:	f800283a 	ret
 20022e8:	303ff026 	beq	r6,zero,20022ac <__gesf2+0x38>
 20022ec:	00bfff84 	movi	r2,-2
 20022f0:	f800283a 	ret
 20022f4:	29403fcc 	andi	r5,r5,255
 20022f8:	21400526 	beq	r4,r5,2002310 <__gesf2+0x9c>
 20022fc:	203ff826 	beq	r4,zero,20022e0 <__gesf2+0x6c>
 2002300:	00bfffc4 	movi	r2,-1
 2002304:	f800283a 	ret
 2002308:	403fe626 	beq	r8,zero,20022a4 <__gesf2+0x30>
 200230c:	003ff706 	br	20022ec <__gesf2+0x78>
 2002310:	18bffa16 	blt	r3,r2,20022fc <__gesf2+0x88>
 2002314:	10c00216 	blt	r2,r3,2002320 <__gesf2+0xac>
 2002318:	323ff836 	bltu	r6,r8,20022fc <__gesf2+0x88>
 200231c:	4180022e 	bgeu	r8,r6,2002328 <__gesf2+0xb4>
 2002320:	203fef1e 	bne	r4,zero,20022e0 <__gesf2+0x6c>
 2002324:	003ff606 	br	2002300 <__gesf2+0x8c>
 2002328:	0005883a 	mov	r2,zero
 200232c:	f800283a 	ret

02002330 <__lesf2>:
 2002330:	2004d5fa 	srli	r2,r4,23
 2002334:	280cd5fa 	srli	r6,r5,23
 2002338:	00c02034 	movhi	r3,128
 200233c:	18ffffc4 	addi	r3,r3,-1
 2002340:	10803fcc 	andi	r2,r2,255
 2002344:	01c03fc4 	movi	r7,255
 2002348:	1910703a 	and	r8,r3,r4
 200234c:	31803fcc 	andi	r6,r6,255
 2002350:	1946703a 	and	r3,r3,r5
 2002354:	2008d7fa 	srli	r4,r4,31
 2002358:	280ad7fa 	srli	r5,r5,31
 200235c:	11c01b26 	beq	r2,r7,20023cc <__lesf2+0x9c>
 2002360:	01c03fc4 	movi	r7,255
 2002364:	31c01126 	beq	r6,r7,20023ac <__lesf2+0x7c>
 2002368:	1000071e 	bne	r2,zero,2002388 <__lesf2+0x58>
 200236c:	400f003a 	cmpeq	r7,r8,zero
 2002370:	21003fcc 	andi	r4,r4,255
 2002374:	3000081e 	bne	r6,zero,2002398 <__lesf2+0x68>
 2002378:	1800071e 	bne	r3,zero,2002398 <__lesf2+0x68>
 200237c:	0005883a 	mov	r2,zero
 2002380:	40000f1e 	bne	r8,zero,20023c0 <__lesf2+0x90>
 2002384:	f800283a 	ret
 2002388:	21003fcc 	andi	r4,r4,255
 200238c:	30000a1e 	bne	r6,zero,20023b8 <__lesf2+0x88>
 2002390:	18000b26 	beq	r3,zero,20023c0 <__lesf2+0x90>
 2002394:	000f883a 	mov	r7,zero
 2002398:	29403fcc 	andi	r5,r5,255
 200239c:	38000726 	beq	r7,zero,20023bc <__lesf2+0x8c>
 20023a0:	28000826 	beq	r5,zero,20023c4 <__lesf2+0x94>
 20023a4:	00800044 	movi	r2,1
 20023a8:	f800283a 	ret
 20023ac:	183fee26 	beq	r3,zero,2002368 <__lesf2+0x38>
 20023b0:	00800084 	movi	r2,2
 20023b4:	f800283a 	ret
 20023b8:	29403fcc 	andi	r5,r5,255
 20023bc:	21400626 	beq	r4,r5,20023d8 <__lesf2+0xa8>
 20023c0:	203ff826 	beq	r4,zero,20023a4 <__lesf2+0x74>
 20023c4:	00bfffc4 	movi	r2,-1
 20023c8:	f800283a 	ret
 20023cc:	403fe426 	beq	r8,zero,2002360 <__lesf2+0x30>
 20023d0:	00800084 	movi	r2,2
 20023d4:	f800283a 	ret
 20023d8:	30bff916 	blt	r6,r2,20023c0 <__lesf2+0x90>
 20023dc:	11800216 	blt	r2,r6,20023e8 <__lesf2+0xb8>
 20023e0:	1a3ff736 	bltu	r3,r8,20023c0 <__lesf2+0x90>
 20023e4:	40c0022e 	bgeu	r8,r3,20023f0 <__lesf2+0xc0>
 20023e8:	203fee1e 	bne	r4,zero,20023a4 <__lesf2+0x74>
 20023ec:	003ff506 	br	20023c4 <__lesf2+0x94>
 20023f0:	0005883a 	mov	r2,zero
 20023f4:	f800283a 	ret

020023f8 <__mulsf3>:
 20023f8:	defff504 	addi	sp,sp,-44
 20023fc:	dc000115 	stw	r16,4(sp)
 2002400:	2020d5fa 	srli	r16,r4,23
 2002404:	dd400615 	stw	r21,24(sp)
 2002408:	202ad7fa 	srli	r21,r4,31
 200240c:	dc800315 	stw	r18,12(sp)
 2002410:	04802034 	movhi	r18,128
 2002414:	df000915 	stw	fp,36(sp)
 2002418:	dd000515 	stw	r20,20(sp)
 200241c:	94bfffc4 	addi	r18,r18,-1
 2002420:	dfc00a15 	stw	ra,40(sp)
 2002424:	ddc00815 	stw	r23,32(sp)
 2002428:	dd800715 	stw	r22,28(sp)
 200242c:	dcc00415 	stw	r19,16(sp)
 2002430:	dc400215 	stw	r17,8(sp)
 2002434:	84003fcc 	andi	r16,r16,255
 2002438:	9124703a 	and	r18,r18,r4
 200243c:	a829883a 	mov	r20,r21
 2002440:	af003fcc 	andi	fp,r21,255
 2002444:	80005426 	beq	r16,zero,2002598 <__mulsf3+0x1a0>
 2002448:	00803fc4 	movi	r2,255
 200244c:	80802f26 	beq	r16,r2,200250c <__mulsf3+0x114>
 2002450:	91002034 	orhi	r4,r18,128
 2002454:	202490fa 	slli	r18,r4,3
 2002458:	843fe044 	addi	r16,r16,-127
 200245c:	0023883a 	mov	r17,zero
 2002460:	002f883a 	mov	r23,zero
 2002464:	2804d5fa 	srli	r2,r5,23
 2002468:	282cd7fa 	srli	r22,r5,31
 200246c:	01002034 	movhi	r4,128
 2002470:	213fffc4 	addi	r4,r4,-1
 2002474:	10803fcc 	andi	r2,r2,255
 2002478:	2166703a 	and	r19,r4,r5
 200247c:	b1803fcc 	andi	r6,r22,255
 2002480:	10004c26 	beq	r2,zero,20025b4 <__mulsf3+0x1bc>
 2002484:	00c03fc4 	movi	r3,255
 2002488:	10c04726 	beq	r2,r3,20025a8 <__mulsf3+0x1b0>
 200248c:	99002034 	orhi	r4,r19,128
 2002490:	202690fa 	slli	r19,r4,3
 2002494:	10bfe044 	addi	r2,r2,-127
 2002498:	0007883a 	mov	r3,zero
 200249c:	80a1883a 	add	r16,r16,r2
 20024a0:	010003c4 	movi	r4,15
 20024a4:	1c44b03a 	or	r2,r3,r17
 20024a8:	b56af03a 	xor	r21,r22,r21
 20024ac:	81c00044 	addi	r7,r16,1
 20024b0:	20806b36 	bltu	r4,r2,2002660 <__mulsf3+0x268>
 20024b4:	100490ba 	slli	r2,r2,2
 20024b8:	01008034 	movhi	r4,512
 20024bc:	21093304 	addi	r4,r4,9420
 20024c0:	1105883a 	add	r2,r2,r4
 20024c4:	10800017 	ldw	r2,0(r2)
 20024c8:	1000683a 	jmp	r2
 20024cc:	02002660 	cmpeqi	r8,zero,153
 20024d0:	02002520 	cmpeqi	r8,zero,148
 20024d4:	02002520 	cmpeqi	r8,zero,148
 20024d8:	0200251c 	xori	r8,zero,148
 20024dc:	02002644 	movi	r8,153
 20024e0:	02002644 	movi	r8,153
 20024e4:	02002630 	cmpltui	r8,zero,152
 20024e8:	0200251c 	xori	r8,zero,148
 20024ec:	02002644 	movi	r8,153
 20024f0:	02002630 	cmpltui	r8,zero,152
 20024f4:	02002644 	movi	r8,153
 20024f8:	0200251c 	xori	r8,zero,148
 20024fc:	02002650 	cmplti	r8,zero,153
 2002500:	02002650 	cmplti	r8,zero,153
 2002504:	02002650 	cmplti	r8,zero,153
 2002508:	02002760 	cmpeqi	r8,zero,157
 200250c:	90003b1e 	bne	r18,zero,20025fc <__mulsf3+0x204>
 2002510:	04400204 	movi	r17,8
 2002514:	05c00084 	movi	r23,2
 2002518:	003fd206 	br	2002464 <__mulsf3+0x6c>
 200251c:	302b883a 	mov	r21,r6
 2002520:	00800084 	movi	r2,2
 2002524:	18802626 	beq	r3,r2,20025c0 <__mulsf3+0x1c8>
 2002528:	008000c4 	movi	r2,3
 200252c:	1880b826 	beq	r3,r2,2002810 <__mulsf3+0x418>
 2002530:	00800044 	movi	r2,1
 2002534:	1880af1e 	bne	r3,r2,20027f4 <__mulsf3+0x3fc>
 2002538:	a829883a 	mov	r20,r21
 200253c:	0007883a 	mov	r3,zero
 2002540:	0009883a 	mov	r4,zero
 2002544:	18803fcc 	andi	r2,r3,255
 2002548:	100695fa 	slli	r3,r2,23
 200254c:	a0803fcc 	andi	r2,r20,255
 2002550:	100a97fa 	slli	r5,r2,31
 2002554:	00802034 	movhi	r2,128
 2002558:	10bfffc4 	addi	r2,r2,-1
 200255c:	2084703a 	and	r2,r4,r2
 2002560:	10c4b03a 	or	r2,r2,r3
 2002564:	1144b03a 	or	r2,r2,r5
 2002568:	dfc00a17 	ldw	ra,40(sp)
 200256c:	df000917 	ldw	fp,36(sp)
 2002570:	ddc00817 	ldw	r23,32(sp)
 2002574:	dd800717 	ldw	r22,28(sp)
 2002578:	dd400617 	ldw	r21,24(sp)
 200257c:	dd000517 	ldw	r20,20(sp)
 2002580:	dcc00417 	ldw	r19,16(sp)
 2002584:	dc800317 	ldw	r18,12(sp)
 2002588:	dc400217 	ldw	r17,8(sp)
 200258c:	dc000117 	ldw	r16,4(sp)
 2002590:	dec00b04 	addi	sp,sp,44
 2002594:	f800283a 	ret
 2002598:	90000d1e 	bne	r18,zero,20025d0 <__mulsf3+0x1d8>
 200259c:	04400104 	movi	r17,4
 20025a0:	05c00044 	movi	r23,1
 20025a4:	003faf06 	br	2002464 <__mulsf3+0x6c>
 20025a8:	9806c03a 	cmpne	r3,r19,zero
 20025ac:	18c00084 	addi	r3,r3,2
 20025b0:	003fba06 	br	200249c <__mulsf3+0xa4>
 20025b4:	9800141e 	bne	r19,zero,2002608 <__mulsf3+0x210>
 20025b8:	00c00044 	movi	r3,1
 20025bc:	003fb706 	br	200249c <__mulsf3+0xa4>
 20025c0:	a829883a 	mov	r20,r21
 20025c4:	00ffffc4 	movi	r3,-1
 20025c8:	0009883a 	mov	r4,zero
 20025cc:	003fdd06 	br	2002544 <__mulsf3+0x14c>
 20025d0:	9009883a 	mov	r4,r18
 20025d4:	d9400015 	stw	r5,0(sp)
 20025d8:	20044700 	call	2004470 <__clzsi2>
 20025dc:	10fffec4 	addi	r3,r2,-5
 20025e0:	10801d84 	addi	r2,r2,118
 20025e4:	90e4983a 	sll	r18,r18,r3
 20025e8:	00a1c83a 	sub	r16,zero,r2
 20025ec:	0023883a 	mov	r17,zero
 20025f0:	002f883a 	mov	r23,zero
 20025f4:	d9400017 	ldw	r5,0(sp)
 20025f8:	003f9a06 	br	2002464 <__mulsf3+0x6c>
 20025fc:	04400304 	movi	r17,12
 2002600:	05c000c4 	movi	r23,3
 2002604:	003f9706 	br	2002464 <__mulsf3+0x6c>
 2002608:	9809883a 	mov	r4,r19
 200260c:	d9800015 	stw	r6,0(sp)
 2002610:	20044700 	call	2004470 <__clzsi2>
 2002614:	10fffec4 	addi	r3,r2,-5
 2002618:	10801d84 	addi	r2,r2,118
 200261c:	98e6983a 	sll	r19,r19,r3
 2002620:	0085c83a 	sub	r2,zero,r2
 2002624:	0007883a 	mov	r3,zero
 2002628:	d9800017 	ldw	r6,0(sp)
 200262c:	003f9b06 	br	200249c <__mulsf3+0xa4>
 2002630:	01002034 	movhi	r4,128
 2002634:	0029883a 	mov	r20,zero
 2002638:	213fffc4 	addi	r4,r4,-1
 200263c:	00ffffc4 	movi	r3,-1
 2002640:	003fc006 	br	2002544 <__mulsf3+0x14c>
 2002644:	9027883a 	mov	r19,r18
 2002648:	b807883a 	mov	r3,r23
 200264c:	003fb406 	br	2002520 <__mulsf3+0x128>
 2002650:	9027883a 	mov	r19,r18
 2002654:	e02b883a 	mov	r21,fp
 2002658:	b807883a 	mov	r3,r23
 200265c:	003fb006 	br	2002520 <__mulsf3+0x128>
 2002660:	9028d43a 	srli	r20,r18,16
 2002664:	982cd43a 	srli	r22,r19,16
 2002668:	94bfffcc 	andi	r18,r18,65535
 200266c:	9cffffcc 	andi	r19,r19,65535
 2002670:	980b883a 	mov	r5,r19
 2002674:	9009883a 	mov	r4,r18
 2002678:	d9c00015 	stw	r7,0(sp)
 200267c:	20019440 	call	2001944 <__mulsi3>
 2002680:	a00b883a 	mov	r5,r20
 2002684:	9809883a 	mov	r4,r19
 2002688:	1023883a 	mov	r17,r2
 200268c:	20019440 	call	2001944 <__mulsi3>
 2002690:	a009883a 	mov	r4,r20
 2002694:	b00b883a 	mov	r5,r22
 2002698:	1027883a 	mov	r19,r2
 200269c:	20019440 	call	2001944 <__mulsi3>
 20026a0:	b00b883a 	mov	r5,r22
 20026a4:	9009883a 	mov	r4,r18
 20026a8:	1029883a 	mov	r20,r2
 20026ac:	20019440 	call	2001944 <__mulsi3>
 20026b0:	8806d43a 	srli	r3,r17,16
 20026b4:	14c5883a 	add	r2,r2,r19
 20026b8:	d9c00017 	ldw	r7,0(sp)
 20026bc:	1885883a 	add	r2,r3,r2
 20026c0:	14c0022e 	bgeu	r2,r19,20026cc <__mulsf3+0x2d4>
 20026c4:	00c00074 	movhi	r3,1
 20026c8:	a0e9883a 	add	r20,r20,r3
 20026cc:	1026943a 	slli	r19,r2,16
 20026d0:	8c7fffcc 	andi	r17,r17,65535
 20026d4:	1004d43a 	srli	r2,r2,16
 20026d8:	9c63883a 	add	r17,r19,r17
 20026dc:	882691ba 	slli	r19,r17,6
 20026e0:	1505883a 	add	r2,r2,r20
 20026e4:	8822d6ba 	srli	r17,r17,26
 20026e8:	100891ba 	slli	r4,r2,6
 20026ec:	9826c03a 	cmpne	r19,r19,zero
 20026f0:	9c62b03a 	or	r17,r19,r17
 20026f4:	8926b03a 	or	r19,r17,r4
 20026f8:	9882002c 	andhi	r2,r19,2048
 20026fc:	10000426 	beq	r2,zero,2002710 <__mulsf3+0x318>
 2002700:	9804d07a 	srli	r2,r19,1
 2002704:	9900004c 	andi	r4,r19,1
 2002708:	3821883a 	mov	r16,r7
 200270c:	1126b03a 	or	r19,r2,r4
 2002710:	80c01fc4 	addi	r3,r16,127
 2002714:	00c0210e 	bge	zero,r3,200279c <__mulsf3+0x3a4>
 2002718:	988001cc 	andi	r2,r19,7
 200271c:	10000426 	beq	r2,zero,2002730 <__mulsf3+0x338>
 2002720:	988003cc 	andi	r2,r19,15
 2002724:	01000104 	movi	r4,4
 2002728:	11000126 	beq	r2,r4,2002730 <__mulsf3+0x338>
 200272c:	9927883a 	add	r19,r19,r4
 2002730:	9882002c 	andhi	r2,r19,2048
 2002734:	10000426 	beq	r2,zero,2002748 <__mulsf3+0x350>
 2002738:	00be0034 	movhi	r2,63488
 200273c:	10bfffc4 	addi	r2,r2,-1
 2002740:	80c02004 	addi	r3,r16,128
 2002744:	98a6703a 	and	r19,r19,r2
 2002748:	00803f84 	movi	r2,254
 200274c:	10ff9c16 	blt	r2,r3,20025c0 <__mulsf3+0x1c8>
 2002750:	980891ba 	slli	r4,r19,6
 2002754:	a829883a 	mov	r20,r21
 2002758:	2008d27a 	srli	r4,r4,9
 200275c:	003f7906 	br	2002544 <__mulsf3+0x14c>
 2002760:	9080102c 	andhi	r2,r18,64
 2002764:	10000826 	beq	r2,zero,2002788 <__mulsf3+0x390>
 2002768:	9880102c 	andhi	r2,r19,64
 200276c:	1000061e 	bne	r2,zero,2002788 <__mulsf3+0x390>
 2002770:	00802034 	movhi	r2,128
 2002774:	99001034 	orhi	r4,r19,64
 2002778:	10bfffc4 	addi	r2,r2,-1
 200277c:	b029883a 	mov	r20,r22
 2002780:	2088703a 	and	r4,r4,r2
 2002784:	003fad06 	br	200263c <__mulsf3+0x244>
 2002788:	00802034 	movhi	r2,128
 200278c:	91001034 	orhi	r4,r18,64
 2002790:	10bfffc4 	addi	r2,r2,-1
 2002794:	2088703a 	and	r4,r4,r2
 2002798:	003fa806 	br	200263c <__mulsf3+0x244>
 200279c:	00800044 	movi	r2,1
 20027a0:	10c7c83a 	sub	r3,r2,r3
 20027a4:	008006c4 	movi	r2,27
 20027a8:	10ff6316 	blt	r2,r3,2002538 <__mulsf3+0x140>
 20027ac:	00800804 	movi	r2,32
 20027b0:	10c5c83a 	sub	r2,r2,r3
 20027b4:	9884983a 	sll	r2,r19,r2
 20027b8:	98c6d83a 	srl	r3,r19,r3
 20027bc:	1004c03a 	cmpne	r2,r2,zero
 20027c0:	1884b03a 	or	r2,r3,r2
 20027c4:	10c001cc 	andi	r3,r2,7
 20027c8:	18000426 	beq	r3,zero,20027dc <__mulsf3+0x3e4>
 20027cc:	10c003cc 	andi	r3,r2,15
 20027d0:	01000104 	movi	r4,4
 20027d4:	19000126 	beq	r3,r4,20027dc <__mulsf3+0x3e4>
 20027d8:	1105883a 	add	r2,r2,r4
 20027dc:	10c1002c 	andhi	r3,r2,1024
 20027e0:	18000626 	beq	r3,zero,20027fc <__mulsf3+0x404>
 20027e4:	a829883a 	mov	r20,r21
 20027e8:	00c00044 	movi	r3,1
 20027ec:	0009883a 	mov	r4,zero
 20027f0:	003f5406 	br	2002544 <__mulsf3+0x14c>
 20027f4:	3821883a 	mov	r16,r7
 20027f8:	003fc506 	br	2002710 <__mulsf3+0x318>
 20027fc:	100491ba 	slli	r2,r2,6
 2002800:	a829883a 	mov	r20,r21
 2002804:	0007883a 	mov	r3,zero
 2002808:	1008d27a 	srli	r4,r2,9
 200280c:	003f4d06 	br	2002544 <__mulsf3+0x14c>
 2002810:	00802034 	movhi	r2,128
 2002814:	99001034 	orhi	r4,r19,64
 2002818:	10bfffc4 	addi	r2,r2,-1
 200281c:	a829883a 	mov	r20,r21
 2002820:	2088703a 	and	r4,r4,r2
 2002824:	003f8506 	br	200263c <__mulsf3+0x244>

02002828 <__subsf3>:
 2002828:	defffc04 	addi	sp,sp,-16
 200282c:	280cd5fa 	srli	r6,r5,23
 2002830:	dc000015 	stw	r16,0(sp)
 2002834:	01c02034 	movhi	r7,128
 2002838:	2020d5fa 	srli	r16,r4,23
 200283c:	39ffffc4 	addi	r7,r7,-1
 2002840:	3906703a 	and	r3,r7,r4
 2002844:	dc400115 	stw	r17,4(sp)
 2002848:	394e703a 	and	r7,r7,r5
 200284c:	2022d7fa 	srli	r17,r4,31
 2002850:	dfc00315 	stw	ra,12(sp)
 2002854:	dc800215 	stw	r18,8(sp)
 2002858:	31803fcc 	andi	r6,r6,255
 200285c:	01003fc4 	movi	r4,255
 2002860:	84003fcc 	andi	r16,r16,255
 2002864:	180690fa 	slli	r3,r3,3
 2002868:	2804d7fa 	srli	r2,r5,31
 200286c:	380e90fa 	slli	r7,r7,3
 2002870:	31006d26 	beq	r6,r4,2002a28 <__subsf3+0x200>
 2002874:	1080005c 	xori	r2,r2,1
 2002878:	8189c83a 	sub	r4,r16,r6
 200287c:	14404f26 	beq	r2,r17,20029bc <__subsf3+0x194>
 2002880:	0100770e 	bge	zero,r4,2002a60 <__subsf3+0x238>
 2002884:	30001e1e 	bne	r6,zero,2002900 <__subsf3+0xd8>
 2002888:	38006a1e 	bne	r7,zero,2002a34 <__subsf3+0x20c>
 200288c:	188001cc 	andi	r2,r3,7
 2002890:	10000426 	beq	r2,zero,20028a4 <__subsf3+0x7c>
 2002894:	188003cc 	andi	r2,r3,15
 2002898:	01000104 	movi	r4,4
 200289c:	11000126 	beq	r2,r4,20028a4 <__subsf3+0x7c>
 20028a0:	1907883a 	add	r3,r3,r4
 20028a4:	1881002c 	andhi	r2,r3,1024
 20028a8:	10003926 	beq	r2,zero,2002990 <__subsf3+0x168>
 20028ac:	84000044 	addi	r16,r16,1
 20028b0:	00803fc4 	movi	r2,255
 20028b4:	80807526 	beq	r16,r2,2002a8c <__subsf3+0x264>
 20028b8:	180691ba 	slli	r3,r3,6
 20028bc:	8880004c 	andi	r2,r17,1
 20028c0:	180ad27a 	srli	r5,r3,9
 20028c4:	84003fcc 	andi	r16,r16,255
 20028c8:	800695fa 	slli	r3,r16,23
 20028cc:	10803fcc 	andi	r2,r2,255
 20028d0:	01002034 	movhi	r4,128
 20028d4:	213fffc4 	addi	r4,r4,-1
 20028d8:	100497fa 	slli	r2,r2,31
 20028dc:	2920703a 	and	r16,r5,r4
 20028e0:	80e0b03a 	or	r16,r16,r3
 20028e4:	8084b03a 	or	r2,r16,r2
 20028e8:	dfc00317 	ldw	ra,12(sp)
 20028ec:	dc800217 	ldw	r18,8(sp)
 20028f0:	dc400117 	ldw	r17,4(sp)
 20028f4:	dc000017 	ldw	r16,0(sp)
 20028f8:	dec00404 	addi	sp,sp,16
 20028fc:	f800283a 	ret
 2002900:	00803fc4 	movi	r2,255
 2002904:	80bfe126 	beq	r16,r2,200288c <__subsf3+0x64>
 2002908:	39c10034 	orhi	r7,r7,1024
 200290c:	008006c4 	movi	r2,27
 2002910:	11007416 	blt	r2,r4,2002ae4 <__subsf3+0x2bc>
 2002914:	00800804 	movi	r2,32
 2002918:	1105c83a 	sub	r2,r2,r4
 200291c:	3884983a 	sll	r2,r7,r2
 2002920:	390ed83a 	srl	r7,r7,r4
 2002924:	1008c03a 	cmpne	r4,r2,zero
 2002928:	390eb03a 	or	r7,r7,r4
 200292c:	19c7c83a 	sub	r3,r3,r7
 2002930:	1881002c 	andhi	r2,r3,1024
 2002934:	10001426 	beq	r2,zero,2002988 <__subsf3+0x160>
 2002938:	04810034 	movhi	r18,1024
 200293c:	94bfffc4 	addi	r18,r18,-1
 2002940:	1ca4703a 	and	r18,r3,r18
 2002944:	9009883a 	mov	r4,r18
 2002948:	20044700 	call	2004470 <__clzsi2>
 200294c:	10bffec4 	addi	r2,r2,-5
 2002950:	90a4983a 	sll	r18,r18,r2
 2002954:	14005116 	blt	r2,r16,2002a9c <__subsf3+0x274>
 2002958:	1405c83a 	sub	r2,r2,r16
 200295c:	10c00044 	addi	r3,r2,1
 2002960:	00800804 	movi	r2,32
 2002964:	10c5c83a 	sub	r2,r2,r3
 2002968:	9084983a 	sll	r2,r18,r2
 200296c:	90e4d83a 	srl	r18,r18,r3
 2002970:	0021883a 	mov	r16,zero
 2002974:	1006c03a 	cmpne	r3,r2,zero
 2002978:	90c6b03a 	or	r3,r18,r3
 200297c:	003fc306 	br	200288c <__subsf3+0x64>
 2002980:	2000e026 	beq	r4,zero,2002d04 <__subsf3+0x4dc>
 2002984:	2007883a 	mov	r3,r4
 2002988:	188001cc 	andi	r2,r3,7
 200298c:	103fc11e 	bne	r2,zero,2002894 <__subsf3+0x6c>
 2002990:	180ad0fa 	srli	r5,r3,3
 2002994:	00c03fc4 	movi	r3,255
 2002998:	8880004c 	andi	r2,r17,1
 200299c:	80c0031e 	bne	r16,r3,20029ac <__subsf3+0x184>
 20029a0:	28006d26 	beq	r5,zero,2002b58 <__subsf3+0x330>
 20029a4:	29401034 	orhi	r5,r5,64
 20029a8:	043fffc4 	movi	r16,-1
 20029ac:	00c02034 	movhi	r3,128
 20029b0:	18ffffc4 	addi	r3,r3,-1
 20029b4:	28ca703a 	and	r5,r5,r3
 20029b8:	003fc206 	br	20028c4 <__subsf3+0x9c>
 20029bc:	01003c0e 	bge	zero,r4,2002ab0 <__subsf3+0x288>
 20029c0:	30002126 	beq	r6,zero,2002a48 <__subsf3+0x220>
 20029c4:	01403fc4 	movi	r5,255
 20029c8:	817fb026 	beq	r16,r5,200288c <__subsf3+0x64>
 20029cc:	39c10034 	orhi	r7,r7,1024
 20029d0:	014006c4 	movi	r5,27
 20029d4:	29007416 	blt	r5,r4,2002ba8 <__subsf3+0x380>
 20029d8:	01400804 	movi	r5,32
 20029dc:	290bc83a 	sub	r5,r5,r4
 20029e0:	394a983a 	sll	r5,r7,r5
 20029e4:	390ed83a 	srl	r7,r7,r4
 20029e8:	2808c03a 	cmpne	r4,r5,zero
 20029ec:	390eb03a 	or	r7,r7,r4
 20029f0:	19c7883a 	add	r3,r3,r7
 20029f4:	1901002c 	andhi	r4,r3,1024
 20029f8:	20003826 	beq	r4,zero,2002adc <__subsf3+0x2b4>
 20029fc:	84000044 	addi	r16,r16,1
 2002a00:	01003fc4 	movi	r4,255
 2002a04:	81005426 	beq	r16,r4,2002b58 <__subsf3+0x330>
 2002a08:	1023883a 	mov	r17,r2
 2002a0c:	00bf0034 	movhi	r2,64512
 2002a10:	10bfffc4 	addi	r2,r2,-1
 2002a14:	1900004c 	andi	r4,r3,1
 2002a18:	1886703a 	and	r3,r3,r2
 2002a1c:	1806d07a 	srli	r3,r3,1
 2002a20:	1906b03a 	or	r3,r3,r4
 2002a24:	003f9906 	br	200288c <__subsf3+0x64>
 2002a28:	383f9226 	beq	r7,zero,2002874 <__subsf3+0x4c>
 2002a2c:	10803fcc 	andi	r2,r2,255
 2002a30:	003f9106 	br	2002878 <__subsf3+0x50>
 2002a34:	213fffc4 	addi	r4,r4,-1
 2002a38:	203fbc26 	beq	r4,zero,200292c <__subsf3+0x104>
 2002a3c:	00803fc4 	movi	r2,255
 2002a40:	80bfb21e 	bne	r16,r2,200290c <__subsf3+0xe4>
 2002a44:	003f9106 	br	200288c <__subsf3+0x64>
 2002a48:	383f9026 	beq	r7,zero,200288c <__subsf3+0x64>
 2002a4c:	213fffc4 	addi	r4,r4,-1
 2002a50:	203fe726 	beq	r4,zero,20029f0 <__subsf3+0x1c8>
 2002a54:	01403fc4 	movi	r5,255
 2002a58:	817fdd1e 	bne	r16,r5,20029d0 <__subsf3+0x1a8>
 2002a5c:	003f8b06 	br	200288c <__subsf3+0x64>
 2002a60:	2000221e 	bne	r4,zero,2002aec <__subsf3+0x2c4>
 2002a64:	81000044 	addi	r4,r16,1
 2002a68:	21003fcc 	andi	r4,r4,255
 2002a6c:	01400044 	movi	r5,1
 2002a70:	2900470e 	bge	r5,r4,2002b90 <__subsf3+0x368>
 2002a74:	19e5c83a 	sub	r18,r3,r7
 2002a78:	9141002c 	andhi	r5,r18,1024
 2002a7c:	28002d26 	beq	r5,zero,2002b34 <__subsf3+0x30c>
 2002a80:	38e5c83a 	sub	r18,r7,r3
 2002a84:	1023883a 	mov	r17,r2
 2002a88:	003fae06 	br	2002944 <__subsf3+0x11c>
 2002a8c:	8880004c 	andi	r2,r17,1
 2002a90:	043fffc4 	movi	r16,-1
 2002a94:	000b883a 	mov	r5,zero
 2002a98:	003f8a06 	br	20028c4 <__subsf3+0x9c>
 2002a9c:	00ff0034 	movhi	r3,64512
 2002aa0:	18ffffc4 	addi	r3,r3,-1
 2002aa4:	80a1c83a 	sub	r16,r16,r2
 2002aa8:	90c6703a 	and	r3,r18,r3
 2002aac:	003f7706 	br	200288c <__subsf3+0x64>
 2002ab0:	2000431e 	bne	r4,zero,2002bc0 <__subsf3+0x398>
 2002ab4:	81000044 	addi	r4,r16,1
 2002ab8:	21803fcc 	andi	r6,r4,255
 2002abc:	01400044 	movi	r5,1
 2002ac0:	2980280e 	bge	r5,r6,2002b64 <__subsf3+0x33c>
 2002ac4:	01403fc4 	movi	r5,255
 2002ac8:	21402326 	beq	r4,r5,2002b58 <__subsf3+0x330>
 2002acc:	19c7883a 	add	r3,r3,r7
 2002ad0:	1806d07a 	srli	r3,r3,1
 2002ad4:	2021883a 	mov	r16,r4
 2002ad8:	003f6c06 	br	200288c <__subsf3+0x64>
 2002adc:	1023883a 	mov	r17,r2
 2002ae0:	003fa906 	br	2002988 <__subsf3+0x160>
 2002ae4:	01c00044 	movi	r7,1
 2002ae8:	003f9006 	br	200292c <__subsf3+0x104>
 2002aec:	8000151e 	bne	r16,zero,2002b44 <__subsf3+0x31c>
 2002af0:	18002f26 	beq	r3,zero,2002bb0 <__subsf3+0x388>
 2002af4:	0108303a 	nor	r4,zero,r4
 2002af8:	20000a26 	beq	r4,zero,2002b24 <__subsf3+0x2fc>
 2002afc:	01403fc4 	movi	r5,255
 2002b00:	31402b26 	beq	r6,r5,2002bb0 <__subsf3+0x388>
 2002b04:	014006c4 	movi	r5,27
 2002b08:	29006e16 	blt	r5,r4,2002cc4 <__subsf3+0x49c>
 2002b0c:	01400804 	movi	r5,32
 2002b10:	290bc83a 	sub	r5,r5,r4
 2002b14:	194a983a 	sll	r5,r3,r5
 2002b18:	1908d83a 	srl	r4,r3,r4
 2002b1c:	2806c03a 	cmpne	r3,r5,zero
 2002b20:	20c6b03a 	or	r3,r4,r3
 2002b24:	38c7c83a 	sub	r3,r7,r3
 2002b28:	3021883a 	mov	r16,r6
 2002b2c:	1023883a 	mov	r17,r2
 2002b30:	003f7f06 	br	2002930 <__subsf3+0x108>
 2002b34:	903f831e 	bne	r18,zero,2002944 <__subsf3+0x11c>
 2002b38:	0005883a 	mov	r2,zero
 2002b3c:	0021883a 	mov	r16,zero
 2002b40:	003f9a06 	br	20029ac <__subsf3+0x184>
 2002b44:	01403fc4 	movi	r5,255
 2002b48:	31401926 	beq	r6,r5,2002bb0 <__subsf3+0x388>
 2002b4c:	0109c83a 	sub	r4,zero,r4
 2002b50:	18c10034 	orhi	r3,r3,1024
 2002b54:	003feb06 	br	2002b04 <__subsf3+0x2dc>
 2002b58:	043fffc4 	movi	r16,-1
 2002b5c:	000b883a 	mov	r5,zero
 2002b60:	003f5806 	br	20028c4 <__subsf3+0x9c>
 2002b64:	8000481e 	bne	r16,zero,2002c88 <__subsf3+0x460>
 2002b68:	18006226 	beq	r3,zero,2002cf4 <__subsf3+0x4cc>
 2002b6c:	383f4726 	beq	r7,zero,200288c <__subsf3+0x64>
 2002b70:	19c7883a 	add	r3,r3,r7
 2002b74:	1881002c 	andhi	r2,r3,1024
 2002b78:	103f8326 	beq	r2,zero,2002988 <__subsf3+0x160>
 2002b7c:	00bf0034 	movhi	r2,64512
 2002b80:	10bfffc4 	addi	r2,r2,-1
 2002b84:	2821883a 	mov	r16,r5
 2002b88:	1886703a 	and	r3,r3,r2
 2002b8c:	003f3f06 	br	200288c <__subsf3+0x64>
 2002b90:	80001c1e 	bne	r16,zero,2002c04 <__subsf3+0x3dc>
 2002b94:	1800261e 	bne	r3,zero,2002c30 <__subsf3+0x408>
 2002b98:	38004c26 	beq	r7,zero,2002ccc <__subsf3+0x4a4>
 2002b9c:	3807883a 	mov	r3,r7
 2002ba0:	1023883a 	mov	r17,r2
 2002ba4:	003f3906 	br	200288c <__subsf3+0x64>
 2002ba8:	01c00044 	movi	r7,1
 2002bac:	003f9006 	br	20029f0 <__subsf3+0x1c8>
 2002bb0:	3807883a 	mov	r3,r7
 2002bb4:	3021883a 	mov	r16,r6
 2002bb8:	1023883a 	mov	r17,r2
 2002bbc:	003f3306 	br	200288c <__subsf3+0x64>
 2002bc0:	8000161e 	bne	r16,zero,2002c1c <__subsf3+0x3f4>
 2002bc4:	18002d26 	beq	r3,zero,2002c7c <__subsf3+0x454>
 2002bc8:	0108303a 	nor	r4,zero,r4
 2002bcc:	20000a26 	beq	r4,zero,2002bf8 <__subsf3+0x3d0>
 2002bd0:	01403fc4 	movi	r5,255
 2002bd4:	31402926 	beq	r6,r5,2002c7c <__subsf3+0x454>
 2002bd8:	014006c4 	movi	r5,27
 2002bdc:	29004716 	blt	r5,r4,2002cfc <__subsf3+0x4d4>
 2002be0:	01400804 	movi	r5,32
 2002be4:	290bc83a 	sub	r5,r5,r4
 2002be8:	194a983a 	sll	r5,r3,r5
 2002bec:	1908d83a 	srl	r4,r3,r4
 2002bf0:	2806c03a 	cmpne	r3,r5,zero
 2002bf4:	20c6b03a 	or	r3,r4,r3
 2002bf8:	19c7883a 	add	r3,r3,r7
 2002bfc:	3021883a 	mov	r16,r6
 2002c00:	003f7c06 	br	20029f4 <__subsf3+0x1cc>
 2002c04:	1800111e 	bne	r3,zero,2002c4c <__subsf3+0x424>
 2002c08:	38003326 	beq	r7,zero,2002cd8 <__subsf3+0x4b0>
 2002c0c:	3807883a 	mov	r3,r7
 2002c10:	1023883a 	mov	r17,r2
 2002c14:	04003fc4 	movi	r16,255
 2002c18:	003f1c06 	br	200288c <__subsf3+0x64>
 2002c1c:	01403fc4 	movi	r5,255
 2002c20:	31401626 	beq	r6,r5,2002c7c <__subsf3+0x454>
 2002c24:	0109c83a 	sub	r4,zero,r4
 2002c28:	18c10034 	orhi	r3,r3,1024
 2002c2c:	003fea06 	br	2002bd8 <__subsf3+0x3b0>
 2002c30:	383f1626 	beq	r7,zero,200288c <__subsf3+0x64>
 2002c34:	19c9c83a 	sub	r4,r3,r7
 2002c38:	2141002c 	andhi	r5,r4,1024
 2002c3c:	283f5026 	beq	r5,zero,2002980 <__subsf3+0x158>
 2002c40:	38c7c83a 	sub	r3,r7,r3
 2002c44:	1023883a 	mov	r17,r2
 2002c48:	003f1006 	br	200288c <__subsf3+0x64>
 2002c4c:	38001b26 	beq	r7,zero,2002cbc <__subsf3+0x494>
 2002c50:	1806d0fa 	srli	r3,r3,3
 2002c54:	1900102c 	andhi	r4,r3,64
 2002c58:	20000526 	beq	r4,zero,2002c70 <__subsf3+0x448>
 2002c5c:	380ed0fa 	srli	r7,r7,3
 2002c60:	3900102c 	andhi	r4,r7,64
 2002c64:	2000021e 	bne	r4,zero,2002c70 <__subsf3+0x448>
 2002c68:	3807883a 	mov	r3,r7
 2002c6c:	1023883a 	mov	r17,r2
 2002c70:	180690fa 	slli	r3,r3,3
 2002c74:	04003fc4 	movi	r16,255
 2002c78:	003f0406 	br	200288c <__subsf3+0x64>
 2002c7c:	3807883a 	mov	r3,r7
 2002c80:	3021883a 	mov	r16,r6
 2002c84:	003f0106 	br	200288c <__subsf3+0x64>
 2002c88:	18001726 	beq	r3,zero,2002ce8 <__subsf3+0x4c0>
 2002c8c:	38000b26 	beq	r7,zero,2002cbc <__subsf3+0x494>
 2002c90:	1806d0fa 	srli	r3,r3,3
 2002c94:	1900102c 	andhi	r4,r3,64
 2002c98:	20000426 	beq	r4,zero,2002cac <__subsf3+0x484>
 2002c9c:	380ed0fa 	srli	r7,r7,3
 2002ca0:	3900102c 	andhi	r4,r7,64
 2002ca4:	2000011e 	bne	r4,zero,2002cac <__subsf3+0x484>
 2002ca8:	3807883a 	mov	r3,r7
 2002cac:	180690fa 	slli	r3,r3,3
 2002cb0:	1023883a 	mov	r17,r2
 2002cb4:	04003fc4 	movi	r16,255
 2002cb8:	003ef406 	br	200288c <__subsf3+0x64>
 2002cbc:	04003fc4 	movi	r16,255
 2002cc0:	003ef206 	br	200288c <__subsf3+0x64>
 2002cc4:	00c00044 	movi	r3,1
 2002cc8:	003f9606 	br	2002b24 <__subsf3+0x2fc>
 2002ccc:	000b883a 	mov	r5,zero
 2002cd0:	0005883a 	mov	r2,zero
 2002cd4:	003f3506 	br	20029ac <__subsf3+0x184>
 2002cd8:	01402034 	movhi	r5,128
 2002cdc:	297fffc4 	addi	r5,r5,-1
 2002ce0:	0005883a 	mov	r2,zero
 2002ce4:	003f2f06 	br	20029a4 <__subsf3+0x17c>
 2002ce8:	3807883a 	mov	r3,r7
 2002cec:	04003fc4 	movi	r16,255
 2002cf0:	003ee606 	br	200288c <__subsf3+0x64>
 2002cf4:	3807883a 	mov	r3,r7
 2002cf8:	003ee406 	br	200288c <__subsf3+0x64>
 2002cfc:	00c00044 	movi	r3,1
 2002d00:	003fbd06 	br	2002bf8 <__subsf3+0x3d0>
 2002d04:	0005883a 	mov	r2,zero
 2002d08:	003f2806 	br	20029ac <__subsf3+0x184>

02002d0c <__fixsfsi>:
 2002d0c:	200ad5fa 	srli	r5,r4,23
 2002d10:	00c02034 	movhi	r3,128
 2002d14:	18ffffc4 	addi	r3,r3,-1
 2002d18:	29403fcc 	andi	r5,r5,255
 2002d1c:	00801f84 	movi	r2,126
 2002d20:	1906703a 	and	r3,r3,r4
 2002d24:	2008d7fa 	srli	r4,r4,31
 2002d28:	11400e0e 	bge	r2,r5,2002d64 <__fixsfsi+0x58>
 2002d2c:	00802744 	movi	r2,157
 2002d30:	11400816 	blt	r2,r5,2002d54 <__fixsfsi+0x48>
 2002d34:	00802544 	movi	r2,149
 2002d38:	18c02034 	orhi	r3,r3,128
 2002d3c:	11400b0e 	bge	r2,r5,2002d6c <__fixsfsi+0x60>
 2002d40:	28bfda84 	addi	r2,r5,-150
 2002d44:	1884983a 	sll	r2,r3,r2
 2002d48:	20000726 	beq	r4,zero,2002d68 <__fixsfsi+0x5c>
 2002d4c:	0085c83a 	sub	r2,zero,r2
 2002d50:	f800283a 	ret
 2002d54:	00a00034 	movhi	r2,32768
 2002d58:	10bfffc4 	addi	r2,r2,-1
 2002d5c:	2085883a 	add	r2,r4,r2
 2002d60:	f800283a 	ret
 2002d64:	0005883a 	mov	r2,zero
 2002d68:	f800283a 	ret
 2002d6c:	00802584 	movi	r2,150
 2002d70:	1145c83a 	sub	r2,r2,r5
 2002d74:	1884d83a 	srl	r2,r3,r2
 2002d78:	003ff306 	br	2002d48 <__fixsfsi+0x3c>

02002d7c <__floatsisf>:
 2002d7c:	defffd04 	addi	sp,sp,-12
 2002d80:	dfc00215 	stw	ra,8(sp)
 2002d84:	dc400115 	stw	r17,4(sp)
 2002d88:	dc000015 	stw	r16,0(sp)
 2002d8c:	20003526 	beq	r4,zero,2002e64 <__floatsisf+0xe8>
 2002d90:	2021883a 	mov	r16,r4
 2002d94:	2022d7fa 	srli	r17,r4,31
 2002d98:	20003616 	blt	r4,zero,2002e74 <__floatsisf+0xf8>
 2002d9c:	8009883a 	mov	r4,r16
 2002da0:	20044700 	call	2004470 <__clzsi2>
 2002da4:	00c02784 	movi	r3,158
 2002da8:	1887c83a 	sub	r3,r3,r2
 2002dac:	01002584 	movi	r4,150
 2002db0:	20c01416 	blt	r4,r3,2002e04 <__floatsisf+0x88>
 2002db4:	20c9c83a 	sub	r4,r4,r3
 2002db8:	8120983a 	sll	r16,r16,r4
 2002dbc:	00802034 	movhi	r2,128
 2002dc0:	10bfffc4 	addi	r2,r2,-1
 2002dc4:	8809883a 	mov	r4,r17
 2002dc8:	80a0703a 	and	r16,r16,r2
 2002dcc:	18803fcc 	andi	r2,r3,255
 2002dd0:	100695fa 	slli	r3,r2,23
 2002dd4:	20803fcc 	andi	r2,r4,255
 2002dd8:	100897fa 	slli	r4,r2,31
 2002ddc:	00802034 	movhi	r2,128
 2002de0:	10bfffc4 	addi	r2,r2,-1
 2002de4:	8084703a 	and	r2,r16,r2
 2002de8:	10c4b03a 	or	r2,r2,r3
 2002dec:	1104b03a 	or	r2,r2,r4
 2002df0:	dfc00217 	ldw	ra,8(sp)
 2002df4:	dc400117 	ldw	r17,4(sp)
 2002df8:	dc000017 	ldw	r16,0(sp)
 2002dfc:	dec00304 	addi	sp,sp,12
 2002e00:	f800283a 	ret
 2002e04:	01002644 	movi	r4,153
 2002e08:	20c01c16 	blt	r4,r3,2002e7c <__floatsisf+0x100>
 2002e0c:	20c9c83a 	sub	r4,r4,r3
 2002e10:	8120983a 	sll	r16,r16,r4
 2002e14:	013f0034 	movhi	r4,64512
 2002e18:	213fffc4 	addi	r4,r4,-1
 2002e1c:	814001cc 	andi	r5,r16,7
 2002e20:	8108703a 	and	r4,r16,r4
 2002e24:	28000426 	beq	r5,zero,2002e38 <__floatsisf+0xbc>
 2002e28:	840003cc 	andi	r16,r16,15
 2002e2c:	01400104 	movi	r5,4
 2002e30:	81400126 	beq	r16,r5,2002e38 <__floatsisf+0xbc>
 2002e34:	2149883a 	add	r4,r4,r5
 2002e38:	2141002c 	andhi	r5,r4,1024
 2002e3c:	28000526 	beq	r5,zero,2002e54 <__floatsisf+0xd8>
 2002e40:	00c027c4 	movi	r3,159
 2002e44:	1887c83a 	sub	r3,r3,r2
 2002e48:	00bf0034 	movhi	r2,64512
 2002e4c:	10bfffc4 	addi	r2,r2,-1
 2002e50:	2088703a 	and	r4,r4,r2
 2002e54:	202091ba 	slli	r16,r4,6
 2002e58:	8809883a 	mov	r4,r17
 2002e5c:	8020d27a 	srli	r16,r16,9
 2002e60:	003fda06 	br	2002dcc <__floatsisf+0x50>
 2002e64:	0009883a 	mov	r4,zero
 2002e68:	0007883a 	mov	r3,zero
 2002e6c:	0021883a 	mov	r16,zero
 2002e70:	003fd606 	br	2002dcc <__floatsisf+0x50>
 2002e74:	0121c83a 	sub	r16,zero,r4
 2002e78:	003fc806 	br	2002d9c <__floatsisf+0x20>
 2002e7c:	01002e44 	movi	r4,185
 2002e80:	20c9c83a 	sub	r4,r4,r3
 2002e84:	01400144 	movi	r5,5
 2002e88:	8108983a 	sll	r4,r16,r4
 2002e8c:	288bc83a 	sub	r5,r5,r2
 2002e90:	8160d83a 	srl	r16,r16,r5
 2002e94:	2008c03a 	cmpne	r4,r4,zero
 2002e98:	8120b03a 	or	r16,r16,r4
 2002e9c:	003fdd06 	br	2002e14 <__floatsisf+0x98>

02002ea0 <__divdf3>:
 2002ea0:	defff004 	addi	sp,sp,-64
 2002ea4:	dc800815 	stw	r18,32(sp)
 2002ea8:	2824d53a 	srli	r18,r5,20
 2002eac:	dd800c15 	stw	r22,48(sp)
 2002eb0:	282cd7fa 	srli	r22,r5,31
 2002eb4:	dc000615 	stw	r16,24(sp)
 2002eb8:	04000434 	movhi	r16,16
 2002ebc:	843fffc4 	addi	r16,r16,-1
 2002ec0:	dfc00f15 	stw	ra,60(sp)
 2002ec4:	df000e15 	stw	fp,56(sp)
 2002ec8:	ddc00d15 	stw	r23,52(sp)
 2002ecc:	dd400b15 	stw	r21,44(sp)
 2002ed0:	dd000a15 	stw	r20,40(sp)
 2002ed4:	dcc00915 	stw	r19,36(sp)
 2002ed8:	dc400715 	stw	r17,28(sp)
 2002edc:	9481ffcc 	andi	r18,r18,2047
 2002ee0:	2c20703a 	and	r16,r5,r16
 2002ee4:	b2003fcc 	andi	r8,r22,255
 2002ee8:	90006126 	beq	r18,zero,2003070 <__divdf3+0x1d0>
 2002eec:	0081ffc4 	movi	r2,2047
 2002ef0:	202b883a 	mov	r21,r4
 2002ef4:	90803726 	beq	r18,r2,2002fd4 <__divdf3+0x134>
 2002ef8:	80800434 	orhi	r2,r16,16
 2002efc:	100490fa 	slli	r2,r2,3
 2002f00:	2020d77a 	srli	r16,r4,29
 2002f04:	202a90fa 	slli	r21,r4,3
 2002f08:	94bf0044 	addi	r18,r18,-1023
 2002f0c:	80a0b03a 	or	r16,r16,r2
 2002f10:	0013883a 	mov	r9,zero
 2002f14:	000b883a 	mov	r5,zero
 2002f18:	3806d53a 	srli	r3,r7,20
 2002f1c:	382ed7fa 	srli	r23,r7,31
 2002f20:	04400434 	movhi	r17,16
 2002f24:	8c7fffc4 	addi	r17,r17,-1
 2002f28:	18c1ffcc 	andi	r3,r3,2047
 2002f2c:	3029883a 	mov	r20,r6
 2002f30:	3c62703a 	and	r17,r7,r17
 2002f34:	bf003fcc 	andi	fp,r23,255
 2002f38:	18006e26 	beq	r3,zero,20030f4 <__divdf3+0x254>
 2002f3c:	0081ffc4 	movi	r2,2047
 2002f40:	18806626 	beq	r3,r2,20030dc <__divdf3+0x23c>
 2002f44:	88800434 	orhi	r2,r17,16
 2002f48:	100490fa 	slli	r2,r2,3
 2002f4c:	3022d77a 	srli	r17,r6,29
 2002f50:	302890fa 	slli	r20,r6,3
 2002f54:	18ff0044 	addi	r3,r3,-1023
 2002f58:	88a2b03a 	or	r17,r17,r2
 2002f5c:	000f883a 	mov	r7,zero
 2002f60:	b5e6f03a 	xor	r19,r22,r23
 2002f64:	3a4cb03a 	or	r6,r7,r9
 2002f68:	008003c4 	movi	r2,15
 2002f6c:	9809883a 	mov	r4,r19
 2002f70:	90c7c83a 	sub	r3,r18,r3
 2002f74:	9cc03fcc 	andi	r19,r19,255
 2002f78:	11809636 	bltu	r2,r6,20031d4 <__divdf3+0x334>
 2002f7c:	300c90ba 	slli	r6,r6,2
 2002f80:	00808034 	movhi	r2,512
 2002f84:	108be504 	addi	r2,r2,12180
 2002f88:	308d883a 	add	r6,r6,r2
 2002f8c:	30800017 	ldw	r2,0(r6)
 2002f90:	1000683a 	jmp	r2
 2002f94:	020031d4 	movui	r8,199
 2002f98:	0200300c 	andi	r8,zero,192
 2002f9c:	020031c4 	movi	r8,199
 2002fa0:	02003000 	call	200300 <__alt_mem_mem_Nios_PI+0x300>
 2002fa4:	020031c4 	movi	r8,199
 2002fa8:	02003198 	cmpnei	r8,zero,198
 2002fac:	020031c4 	movi	r8,199
 2002fb0:	02003000 	call	200300 <__alt_mem_mem_Nios_PI+0x300>
 2002fb4:	0200300c 	andi	r8,zero,192
 2002fb8:	0200300c 	andi	r8,zero,192
 2002fbc:	02003198 	cmpnei	r8,zero,198
 2002fc0:	02003000 	call	200300 <__alt_mem_mem_Nios_PI+0x300>
 2002fc4:	02002ff0 	cmpltui	r8,zero,191
 2002fc8:	02002ff0 	cmpltui	r8,zero,191
 2002fcc:	02002ff0 	cmpltui	r8,zero,191
 2002fd0:	0200355c 	xori	r8,zero,213
 2002fd4:	2404b03a 	or	r2,r4,r16
 2002fd8:	10006c1e 	bne	r2,zero,200318c <__divdf3+0x2ec>
 2002fdc:	02400204 	movi	r9,8
 2002fe0:	0021883a 	mov	r16,zero
 2002fe4:	002b883a 	mov	r21,zero
 2002fe8:	01400084 	movi	r5,2
 2002fec:	003fca06 	br	2002f18 <__divdf3+0x78>
 2002ff0:	8023883a 	mov	r17,r16
 2002ff4:	a829883a 	mov	r20,r21
 2002ff8:	4039883a 	mov	fp,r8
 2002ffc:	280f883a 	mov	r7,r5
 2003000:	00800084 	movi	r2,2
 2003004:	3881601e 	bne	r7,r2,2003588 <__divdf3+0x6e8>
 2003008:	e027883a 	mov	r19,fp
 200300c:	9900004c 	andi	r4,r19,1
 2003010:	0081ffc4 	movi	r2,2047
 2003014:	0021883a 	mov	r16,zero
 2003018:	002b883a 	mov	r21,zero
 200301c:	1004953a 	slli	r2,r2,20
 2003020:	20c03fcc 	andi	r3,r4,255
 2003024:	01400434 	movhi	r5,16
 2003028:	297fffc4 	addi	r5,r5,-1
 200302c:	180697fa 	slli	r3,r3,31
 2003030:	8160703a 	and	r16,r16,r5
 2003034:	80a0b03a 	or	r16,r16,r2
 2003038:	80c6b03a 	or	r3,r16,r3
 200303c:	a805883a 	mov	r2,r21
 2003040:	dfc00f17 	ldw	ra,60(sp)
 2003044:	df000e17 	ldw	fp,56(sp)
 2003048:	ddc00d17 	ldw	r23,52(sp)
 200304c:	dd800c17 	ldw	r22,48(sp)
 2003050:	dd400b17 	ldw	r21,44(sp)
 2003054:	dd000a17 	ldw	r20,40(sp)
 2003058:	dcc00917 	ldw	r19,36(sp)
 200305c:	dc800817 	ldw	r18,32(sp)
 2003060:	dc400717 	ldw	r17,28(sp)
 2003064:	dc000617 	ldw	r16,24(sp)
 2003068:	dec01004 	addi	sp,sp,64
 200306c:	f800283a 	ret
 2003070:	2404b03a 	or	r2,r4,r16
 2003074:	2023883a 	mov	r17,r4
 2003078:	10003f26 	beq	r2,zero,2003178 <__divdf3+0x2d8>
 200307c:	80015e26 	beq	r16,zero,20035f8 <__divdf3+0x758>
 2003080:	8009883a 	mov	r4,r16
 2003084:	d9800215 	stw	r6,8(sp)
 2003088:	d9c00515 	stw	r7,20(sp)
 200308c:	da000415 	stw	r8,16(sp)
 2003090:	20044700 	call	2004470 <__clzsi2>
 2003094:	d9800217 	ldw	r6,8(sp)
 2003098:	d9c00517 	ldw	r7,20(sp)
 200309c:	da000417 	ldw	r8,16(sp)
 20030a0:	113ffd44 	addi	r4,r2,-11
 20030a4:	00c00704 	movi	r3,28
 20030a8:	19014f16 	blt	r3,r4,20035e8 <__divdf3+0x748>
 20030ac:	00c00744 	movi	r3,29
 20030b0:	157ffe04 	addi	r21,r2,-8
 20030b4:	1907c83a 	sub	r3,r3,r4
 20030b8:	8560983a 	sll	r16,r16,r21
 20030bc:	88c6d83a 	srl	r3,r17,r3
 20030c0:	8d6a983a 	sll	r21,r17,r21
 20030c4:	1c20b03a 	or	r16,r3,r16
 20030c8:	1080fcc4 	addi	r2,r2,1011
 20030cc:	00a5c83a 	sub	r18,zero,r2
 20030d0:	0013883a 	mov	r9,zero
 20030d4:	000b883a 	mov	r5,zero
 20030d8:	003f8f06 	br	2002f18 <__divdf3+0x78>
 20030dc:	3444b03a 	or	r2,r6,r17
 20030e0:	1000231e 	bne	r2,zero,2003170 <__divdf3+0x2d0>
 20030e4:	0023883a 	mov	r17,zero
 20030e8:	0029883a 	mov	r20,zero
 20030ec:	01c00084 	movi	r7,2
 20030f0:	003f9b06 	br	2002f60 <__divdf3+0xc0>
 20030f4:	3444b03a 	or	r2,r6,r17
 20030f8:	10001926 	beq	r2,zero,2003160 <__divdf3+0x2c0>
 20030fc:	88014b26 	beq	r17,zero,200362c <__divdf3+0x78c>
 2003100:	8809883a 	mov	r4,r17
 2003104:	d9400115 	stw	r5,4(sp)
 2003108:	d9800215 	stw	r6,8(sp)
 200310c:	da000415 	stw	r8,16(sp)
 2003110:	da400315 	stw	r9,12(sp)
 2003114:	20044700 	call	2004470 <__clzsi2>
 2003118:	d9400117 	ldw	r5,4(sp)
 200311c:	d9800217 	ldw	r6,8(sp)
 2003120:	da000417 	ldw	r8,16(sp)
 2003124:	da400317 	ldw	r9,12(sp)
 2003128:	113ffd44 	addi	r4,r2,-11
 200312c:	00c00704 	movi	r3,28
 2003130:	19013a16 	blt	r3,r4,200361c <__divdf3+0x77c>
 2003134:	00c00744 	movi	r3,29
 2003138:	153ffe04 	addi	r20,r2,-8
 200313c:	1907c83a 	sub	r3,r3,r4
 2003140:	8d22983a 	sll	r17,r17,r20
 2003144:	30c6d83a 	srl	r3,r6,r3
 2003148:	3528983a 	sll	r20,r6,r20
 200314c:	1c62b03a 	or	r17,r3,r17
 2003150:	1080fcc4 	addi	r2,r2,1011
 2003154:	0087c83a 	sub	r3,zero,r2
 2003158:	000f883a 	mov	r7,zero
 200315c:	003f8006 	br	2002f60 <__divdf3+0xc0>
 2003160:	0023883a 	mov	r17,zero
 2003164:	0029883a 	mov	r20,zero
 2003168:	01c00044 	movi	r7,1
 200316c:	003f7c06 	br	2002f60 <__divdf3+0xc0>
 2003170:	01c000c4 	movi	r7,3
 2003174:	003f7a06 	br	2002f60 <__divdf3+0xc0>
 2003178:	02400104 	movi	r9,4
 200317c:	0021883a 	mov	r16,zero
 2003180:	002b883a 	mov	r21,zero
 2003184:	01400044 	movi	r5,1
 2003188:	003f6306 	br	2002f18 <__divdf3+0x78>
 200318c:	02400304 	movi	r9,12
 2003190:	014000c4 	movi	r5,3
 2003194:	003f6006 	br	2002f18 <__divdf3+0x78>
 2003198:	04000434 	movhi	r16,16
 200319c:	0009883a 	mov	r4,zero
 20031a0:	843fffc4 	addi	r16,r16,-1
 20031a4:	057fffc4 	movi	r21,-1
 20031a8:	0081ffc4 	movi	r2,2047
 20031ac:	003f9b06 	br	200301c <__divdf3+0x17c>
 20031b0:	00c00044 	movi	r3,1
 20031b4:	1887c83a 	sub	r3,r3,r2
 20031b8:	01000e04 	movi	r4,56
 20031bc:	20c1530e 	bge	r4,r3,200370c <__divdf3+0x86c>
 20031c0:	9900004c 	andi	r4,r19,1
 20031c4:	0005883a 	mov	r2,zero
 20031c8:	0021883a 	mov	r16,zero
 20031cc:	002b883a 	mov	r21,zero
 20031d0:	003f9206 	br	200301c <__divdf3+0x17c>
 20031d4:	8c012e36 	bltu	r17,r16,2003690 <__divdf3+0x7f0>
 20031d8:	84412c26 	beq	r16,r17,200368c <__divdf3+0x7ec>
 20031dc:	a82f883a 	mov	r23,r21
 20031e0:	18ffffc4 	addi	r3,r3,-1
 20031e4:	002b883a 	mov	r21,zero
 20031e8:	a004d63a 	srli	r2,r20,24
 20031ec:	8822923a 	slli	r17,r17,8
 20031f0:	a028923a 	slli	r20,r20,8
 20031f4:	8009883a 	mov	r4,r16
 20031f8:	88acb03a 	or	r22,r17,r2
 20031fc:	dd000015 	stw	r20,0(sp)
 2003200:	b028d43a 	srli	r20,r22,16
 2003204:	d8c00215 	stw	r3,8(sp)
 2003208:	b4bfffcc 	andi	r18,r22,65535
 200320c:	a00b883a 	mov	r5,r20
 2003210:	20045cc0 	call	20045cc <__udivsi3>
 2003214:	100b883a 	mov	r5,r2
 2003218:	9009883a 	mov	r4,r18
 200321c:	1023883a 	mov	r17,r2
 2003220:	20019440 	call	2001944 <__mulsi3>
 2003224:	8009883a 	mov	r4,r16
 2003228:	a00b883a 	mov	r5,r20
 200322c:	1039883a 	mov	fp,r2
 2003230:	20046300 	call	2004630 <__umodsi3>
 2003234:	1004943a 	slli	r2,r2,16
 2003238:	b808d43a 	srli	r4,r23,16
 200323c:	d8c00217 	ldw	r3,8(sp)
 2003240:	2084b03a 	or	r2,r4,r2
 2003244:	1700062e 	bgeu	r2,fp,2003260 <__divdf3+0x3c0>
 2003248:	1585883a 	add	r2,r2,r22
 200324c:	893fffc4 	addi	r4,r17,-1
 2003250:	15811d36 	bltu	r2,r22,20036c8 <__divdf3+0x828>
 2003254:	17011c2e 	bgeu	r2,fp,20036c8 <__divdf3+0x828>
 2003258:	8c7fff84 	addi	r17,r17,-2
 200325c:	1585883a 	add	r2,r2,r22
 2003260:	1739c83a 	sub	fp,r2,fp
 2003264:	a00b883a 	mov	r5,r20
 2003268:	e009883a 	mov	r4,fp
 200326c:	d8c00215 	stw	r3,8(sp)
 2003270:	20045cc0 	call	20045cc <__udivsi3>
 2003274:	100b883a 	mov	r5,r2
 2003278:	9009883a 	mov	r4,r18
 200327c:	1021883a 	mov	r16,r2
 2003280:	20019440 	call	2001944 <__mulsi3>
 2003284:	a00b883a 	mov	r5,r20
 2003288:	e009883a 	mov	r4,fp
 200328c:	d8800415 	stw	r2,16(sp)
 2003290:	20046300 	call	2004630 <__umodsi3>
 2003294:	1004943a 	slli	r2,r2,16
 2003298:	da000417 	ldw	r8,16(sp)
 200329c:	bdffffcc 	andi	r23,r23,65535
 20032a0:	b884b03a 	or	r2,r23,r2
 20032a4:	d8c00217 	ldw	r3,8(sp)
 20032a8:	1200062e 	bgeu	r2,r8,20032c4 <__divdf3+0x424>
 20032ac:	1585883a 	add	r2,r2,r22
 20032b0:	813fffc4 	addi	r4,r16,-1
 20032b4:	15810236 	bltu	r2,r22,20036c0 <__divdf3+0x820>
 20032b8:	1201012e 	bgeu	r2,r8,20036c0 <__divdf3+0x820>
 20032bc:	843fff84 	addi	r16,r16,-2
 20032c0:	1585883a 	add	r2,r2,r22
 20032c4:	8822943a 	slli	r17,r17,16
 20032c8:	d9800017 	ldw	r6,0(sp)
 20032cc:	1211c83a 	sub	r8,r2,r8
 20032d0:	8c22b03a 	or	r17,r17,r16
 20032d4:	373fffcc 	andi	fp,r6,65535
 20032d8:	8abfffcc 	andi	r10,r17,65535
 20032dc:	8820d43a 	srli	r16,r17,16
 20032e0:	5009883a 	mov	r4,r10
 20032e4:	e00b883a 	mov	r5,fp
 20032e8:	302ed43a 	srli	r23,r6,16
 20032ec:	d8c00215 	stw	r3,8(sp)
 20032f0:	da000415 	stw	r8,16(sp)
 20032f4:	da800115 	stw	r10,4(sp)
 20032f8:	20019440 	call	2001944 <__mulsi3>
 20032fc:	800b883a 	mov	r5,r16
 2003300:	e009883a 	mov	r4,fp
 2003304:	d8800515 	stw	r2,20(sp)
 2003308:	20019440 	call	2001944 <__mulsi3>
 200330c:	8009883a 	mov	r4,r16
 2003310:	b80b883a 	mov	r5,r23
 2003314:	d8800315 	stw	r2,12(sp)
 2003318:	20019440 	call	2001944 <__mulsi3>
 200331c:	da800117 	ldw	r10,4(sp)
 2003320:	b80b883a 	mov	r5,r23
 2003324:	1021883a 	mov	r16,r2
 2003328:	5009883a 	mov	r4,r10
 200332c:	20019440 	call	2001944 <__mulsi3>
 2003330:	d9c00517 	ldw	r7,20(sp)
 2003334:	da400317 	ldw	r9,12(sp)
 2003338:	d8c00217 	ldw	r3,8(sp)
 200333c:	3808d43a 	srli	r4,r7,16
 2003340:	1245883a 	add	r2,r2,r9
 2003344:	da000417 	ldw	r8,16(sp)
 2003348:	2085883a 	add	r2,r4,r2
 200334c:	1240022e 	bgeu	r2,r9,2003358 <__divdf3+0x4b8>
 2003350:	01000074 	movhi	r4,1
 2003354:	8121883a 	add	r16,r16,r4
 2003358:	1008d43a 	srli	r4,r2,16
 200335c:	1004943a 	slli	r2,r2,16
 2003360:	39ffffcc 	andi	r7,r7,65535
 2003364:	2409883a 	add	r4,r4,r16
 2003368:	11c5883a 	add	r2,r2,r7
 200336c:	4100bb36 	bltu	r8,r4,200365c <__divdf3+0x7bc>
 2003370:	4100d726 	beq	r8,r4,20036d0 <__divdf3+0x830>
 2003374:	4109c83a 	sub	r4,r8,r4
 2003378:	a8a1c83a 	sub	r16,r21,r2
 200337c:	ac2b803a 	cmpltu	r21,r21,r16
 2003380:	256bc83a 	sub	r21,r4,r21
 2003384:	b540d926 	beq	r22,r21,20036ec <__divdf3+0x84c>
 2003388:	a00b883a 	mov	r5,r20
 200338c:	a809883a 	mov	r4,r21
 2003390:	d8c00215 	stw	r3,8(sp)
 2003394:	20045cc0 	call	20045cc <__udivsi3>
 2003398:	100b883a 	mov	r5,r2
 200339c:	9009883a 	mov	r4,r18
 20033a0:	d8800515 	stw	r2,20(sp)
 20033a4:	20019440 	call	2001944 <__mulsi3>
 20033a8:	a809883a 	mov	r4,r21
 20033ac:	a00b883a 	mov	r5,r20
 20033b0:	d8800415 	stw	r2,16(sp)
 20033b4:	20046300 	call	2004630 <__umodsi3>
 20033b8:	1004943a 	slli	r2,r2,16
 20033bc:	8008d43a 	srli	r4,r16,16
 20033c0:	da000417 	ldw	r8,16(sp)
 20033c4:	d8c00217 	ldw	r3,8(sp)
 20033c8:	2084b03a 	or	r2,r4,r2
 20033cc:	d9c00517 	ldw	r7,20(sp)
 20033d0:	1200062e 	bgeu	r2,r8,20033ec <__divdf3+0x54c>
 20033d4:	1585883a 	add	r2,r2,r22
 20033d8:	393fffc4 	addi	r4,r7,-1
 20033dc:	1580c536 	bltu	r2,r22,20036f4 <__divdf3+0x854>
 20033e0:	1200c42e 	bgeu	r2,r8,20036f4 <__divdf3+0x854>
 20033e4:	39ffff84 	addi	r7,r7,-2
 20033e8:	1585883a 	add	r2,r2,r22
 20033ec:	122bc83a 	sub	r21,r2,r8
 20033f0:	a00b883a 	mov	r5,r20
 20033f4:	a809883a 	mov	r4,r21
 20033f8:	d8c00215 	stw	r3,8(sp)
 20033fc:	d9c00515 	stw	r7,20(sp)
 2003400:	20045cc0 	call	20045cc <__udivsi3>
 2003404:	9009883a 	mov	r4,r18
 2003408:	100b883a 	mov	r5,r2
 200340c:	d8800415 	stw	r2,16(sp)
 2003410:	20019440 	call	2001944 <__mulsi3>
 2003414:	a809883a 	mov	r4,r21
 2003418:	a00b883a 	mov	r5,r20
 200341c:	1025883a 	mov	r18,r2
 2003420:	20046300 	call	2004630 <__umodsi3>
 2003424:	1004943a 	slli	r2,r2,16
 2003428:	813fffcc 	andi	r4,r16,65535
 200342c:	d8c00217 	ldw	r3,8(sp)
 2003430:	20a0b03a 	or	r16,r4,r2
 2003434:	d9c00517 	ldw	r7,20(sp)
 2003438:	da000417 	ldw	r8,16(sp)
 200343c:	8480062e 	bgeu	r16,r18,2003458 <__divdf3+0x5b8>
 2003440:	85a1883a 	add	r16,r16,r22
 2003444:	40bfffc4 	addi	r2,r8,-1
 2003448:	8580ac36 	bltu	r16,r22,20036fc <__divdf3+0x85c>
 200344c:	8480ab2e 	bgeu	r16,r18,20036fc <__divdf3+0x85c>
 2003450:	423fff84 	addi	r8,r8,-2
 2003454:	85a1883a 	add	r16,r16,r22
 2003458:	3804943a 	slli	r2,r7,16
 200345c:	84a1c83a 	sub	r16,r16,r18
 2003460:	e009883a 	mov	r4,fp
 2003464:	1228b03a 	or	r20,r2,r8
 2003468:	a1ffffcc 	andi	r7,r20,65535
 200346c:	a024d43a 	srli	r18,r20,16
 2003470:	380b883a 	mov	r5,r7
 2003474:	d8c00215 	stw	r3,8(sp)
 2003478:	d9c00515 	stw	r7,20(sp)
 200347c:	20019440 	call	2001944 <__mulsi3>
 2003480:	900b883a 	mov	r5,r18
 2003484:	e009883a 	mov	r4,fp
 2003488:	102b883a 	mov	r21,r2
 200348c:	20019440 	call	2001944 <__mulsi3>
 2003490:	900b883a 	mov	r5,r18
 2003494:	b809883a 	mov	r4,r23
 2003498:	1039883a 	mov	fp,r2
 200349c:	20019440 	call	2001944 <__mulsi3>
 20034a0:	d9c00517 	ldw	r7,20(sp)
 20034a4:	b80b883a 	mov	r5,r23
 20034a8:	1025883a 	mov	r18,r2
 20034ac:	3809883a 	mov	r4,r7
 20034b0:	20019440 	call	2001944 <__mulsi3>
 20034b4:	a808d43a 	srli	r4,r21,16
 20034b8:	1705883a 	add	r2,r2,fp
 20034bc:	d8c00217 	ldw	r3,8(sp)
 20034c0:	2085883a 	add	r2,r4,r2
 20034c4:	1700022e 	bgeu	r2,fp,20034d0 <__divdf3+0x630>
 20034c8:	01000074 	movhi	r4,1
 20034cc:	9125883a 	add	r18,r18,r4
 20034d0:	1008d43a 	srli	r4,r2,16
 20034d4:	1004943a 	slli	r2,r2,16
 20034d8:	ad7fffcc 	andi	r21,r21,65535
 20034dc:	2489883a 	add	r4,r4,r18
 20034e0:	1545883a 	add	r2,r2,r21
 20034e4:	81003836 	bltu	r16,r4,20035c8 <__divdf3+0x728>
 20034e8:	81003626 	beq	r16,r4,20035c4 <__divdf3+0x724>
 20034ec:	a5000054 	ori	r20,r20,1
 20034f0:	1880ffc4 	addi	r2,r3,1023
 20034f4:	00bf2e0e 	bge	zero,r2,20031b0 <__divdf3+0x310>
 20034f8:	a10001cc 	andi	r4,r20,7
 20034fc:	20000726 	beq	r4,zero,200351c <__divdf3+0x67c>
 2003500:	a10003cc 	andi	r4,r20,15
 2003504:	01400104 	movi	r5,4
 2003508:	21400426 	beq	r4,r5,200351c <__divdf3+0x67c>
 200350c:	a149883a 	add	r4,r20,r5
 2003510:	2529803a 	cmpltu	r20,r4,r20
 2003514:	8d23883a 	add	r17,r17,r20
 2003518:	2029883a 	mov	r20,r4
 200351c:	8900402c 	andhi	r4,r17,256
 2003520:	20000426 	beq	r4,zero,2003534 <__divdf3+0x694>
 2003524:	18810004 	addi	r2,r3,1024
 2003528:	00ffc034 	movhi	r3,65280
 200352c:	18ffffc4 	addi	r3,r3,-1
 2003530:	88e2703a 	and	r17,r17,r3
 2003534:	00c1ff84 	movi	r3,2046
 2003538:	18beb416 	blt	r3,r2,200300c <__divdf3+0x16c>
 200353c:	a028d0fa 	srli	r20,r20,3
 2003540:	882a977a 	slli	r21,r17,29
 2003544:	8820927a 	slli	r16,r17,9
 2003548:	1081ffcc 	andi	r2,r2,2047
 200354c:	ad2ab03a 	or	r21,r21,r20
 2003550:	8020d33a 	srli	r16,r16,12
 2003554:	9900004c 	andi	r4,r19,1
 2003558:	003eb006 	br	200301c <__divdf3+0x17c>
 200355c:	8080022c 	andhi	r2,r16,8
 2003560:	10001226 	beq	r2,zero,20035ac <__divdf3+0x70c>
 2003564:	8880022c 	andhi	r2,r17,8
 2003568:	1000101e 	bne	r2,zero,20035ac <__divdf3+0x70c>
 200356c:	00800434 	movhi	r2,16
 2003570:	8c000234 	orhi	r16,r17,8
 2003574:	10bfffc4 	addi	r2,r2,-1
 2003578:	b809883a 	mov	r4,r23
 200357c:	80a0703a 	and	r16,r16,r2
 2003580:	a02b883a 	mov	r21,r20
 2003584:	003f0806 	br	20031a8 <__divdf3+0x308>
 2003588:	008000c4 	movi	r2,3
 200358c:	3880b126 	beq	r7,r2,2003854 <__divdf3+0x9b4>
 2003590:	00800044 	movi	r2,1
 2003594:	38805b1e 	bne	r7,r2,2003704 <__divdf3+0x864>
 2003598:	e009883a 	mov	r4,fp
 200359c:	0005883a 	mov	r2,zero
 20035a0:	0021883a 	mov	r16,zero
 20035a4:	002b883a 	mov	r21,zero
 20035a8:	003e9c06 	br	200301c <__divdf3+0x17c>
 20035ac:	00800434 	movhi	r2,16
 20035b0:	84000234 	orhi	r16,r16,8
 20035b4:	10bfffc4 	addi	r2,r2,-1
 20035b8:	b009883a 	mov	r4,r22
 20035bc:	80a0703a 	and	r16,r16,r2
 20035c0:	003ef906 	br	20031a8 <__divdf3+0x308>
 20035c4:	103fca26 	beq	r2,zero,20034f0 <__divdf3+0x650>
 20035c8:	b421883a 	add	r16,r22,r16
 20035cc:	a17fffc4 	addi	r5,r20,-1
 20035d0:	8580422e 	bgeu	r16,r22,20036dc <__divdf3+0x83c>
 20035d4:	2829883a 	mov	r20,r5
 20035d8:	813fc41e 	bne	r16,r4,20034ec <__divdf3+0x64c>
 20035dc:	d9800017 	ldw	r6,0(sp)
 20035e0:	30bfc21e 	bne	r6,r2,20034ec <__divdf3+0x64c>
 20035e4:	003fc206 	br	20034f0 <__divdf3+0x650>
 20035e8:	143ff604 	addi	r16,r2,-40
 20035ec:	8c20983a 	sll	r16,r17,r16
 20035f0:	002b883a 	mov	r21,zero
 20035f4:	003eb406 	br	20030c8 <__divdf3+0x228>
 20035f8:	d9800215 	stw	r6,8(sp)
 20035fc:	d9c00515 	stw	r7,20(sp)
 2003600:	da000415 	stw	r8,16(sp)
 2003604:	20044700 	call	2004470 <__clzsi2>
 2003608:	10800804 	addi	r2,r2,32
 200360c:	da000417 	ldw	r8,16(sp)
 2003610:	d9c00517 	ldw	r7,20(sp)
 2003614:	d9800217 	ldw	r6,8(sp)
 2003618:	003ea106 	br	20030a0 <__divdf3+0x200>
 200361c:	147ff604 	addi	r17,r2,-40
 2003620:	3462983a 	sll	r17,r6,r17
 2003624:	0029883a 	mov	r20,zero
 2003628:	003ec906 	br	2003150 <__divdf3+0x2b0>
 200362c:	3009883a 	mov	r4,r6
 2003630:	d9400115 	stw	r5,4(sp)
 2003634:	d9800215 	stw	r6,8(sp)
 2003638:	da000415 	stw	r8,16(sp)
 200363c:	da400315 	stw	r9,12(sp)
 2003640:	20044700 	call	2004470 <__clzsi2>
 2003644:	10800804 	addi	r2,r2,32
 2003648:	da400317 	ldw	r9,12(sp)
 200364c:	da000417 	ldw	r8,16(sp)
 2003650:	d9800217 	ldw	r6,8(sp)
 2003654:	d9400117 	ldw	r5,4(sp)
 2003658:	003eb306 	br	2003128 <__divdf3+0x288>
 200365c:	d9800017 	ldw	r6,0(sp)
 2003660:	a9ab883a 	add	r21,r21,r6
 2003664:	a98b803a 	cmpltu	r5,r21,r6
 2003668:	2d8b883a 	add	r5,r5,r22
 200366c:	2a11883a 	add	r8,r5,r8
 2003670:	897fffc4 	addi	r5,r17,-1
 2003674:	b2000c2e 	bgeu	r22,r8,20036a8 <__divdf3+0x808>
 2003678:	41003f36 	bltu	r8,r4,2003778 <__divdf3+0x8d8>
 200367c:	22006c26 	beq	r4,r8,2003830 <__divdf3+0x990>
 2003680:	4109c83a 	sub	r4,r8,r4
 2003684:	2823883a 	mov	r17,r5
 2003688:	003f3b06 	br	2003378 <__divdf3+0x4d8>
 200368c:	ad3ed336 	bltu	r21,r20,20031dc <__divdf3+0x33c>
 2003690:	a804d07a 	srli	r2,r21,1
 2003694:	802e97fa 	slli	r23,r16,31
 2003698:	a82a97fa 	slli	r21,r21,31
 200369c:	8020d07a 	srli	r16,r16,1
 20036a0:	b8aeb03a 	or	r23,r23,r2
 20036a4:	003ed006 	br	20031e8 <__divdf3+0x348>
 20036a8:	b23ff51e 	bne	r22,r8,2003680 <__divdf3+0x7e0>
 20036ac:	d9800017 	ldw	r6,0(sp)
 20036b0:	a9bff12e 	bgeu	r21,r6,2003678 <__divdf3+0x7d8>
 20036b4:	b109c83a 	sub	r4,r22,r4
 20036b8:	2823883a 	mov	r17,r5
 20036bc:	003f2e06 	br	2003378 <__divdf3+0x4d8>
 20036c0:	2021883a 	mov	r16,r4
 20036c4:	003eff06 	br	20032c4 <__divdf3+0x424>
 20036c8:	2023883a 	mov	r17,r4
 20036cc:	003ee406 	br	2003260 <__divdf3+0x3c0>
 20036d0:	a8bfe236 	bltu	r21,r2,200365c <__divdf3+0x7bc>
 20036d4:	0009883a 	mov	r4,zero
 20036d8:	003f2706 	br	2003378 <__divdf3+0x4d8>
 20036dc:	81002d36 	bltu	r16,r4,2003794 <__divdf3+0x8f4>
 20036e0:	24005626 	beq	r4,r16,200383c <__divdf3+0x99c>
 20036e4:	2829883a 	mov	r20,r5
 20036e8:	003f8006 	br	20034ec <__divdf3+0x64c>
 20036ec:	053fffc4 	movi	r20,-1
 20036f0:	003f7f06 	br	20034f0 <__divdf3+0x650>
 20036f4:	200f883a 	mov	r7,r4
 20036f8:	003f3c06 	br	20033ec <__divdf3+0x54c>
 20036fc:	1011883a 	mov	r8,r2
 2003700:	003f5506 	br	2003458 <__divdf3+0x5b8>
 2003704:	e027883a 	mov	r19,fp
 2003708:	003f7906 	br	20034f0 <__divdf3+0x650>
 200370c:	010007c4 	movi	r4,31
 2003710:	20c02816 	blt	r4,r3,20037b4 <__divdf3+0x914>
 2003714:	00800804 	movi	r2,32
 2003718:	10c5c83a 	sub	r2,r2,r3
 200371c:	888a983a 	sll	r5,r17,r2
 2003720:	a0c8d83a 	srl	r4,r20,r3
 2003724:	a084983a 	sll	r2,r20,r2
 2003728:	88e2d83a 	srl	r17,r17,r3
 200372c:	2906b03a 	or	r3,r5,r4
 2003730:	1004c03a 	cmpne	r2,r2,zero
 2003734:	1886b03a 	or	r3,r3,r2
 2003738:	188001cc 	andi	r2,r3,7
 200373c:	10000726 	beq	r2,zero,200375c <__divdf3+0x8bc>
 2003740:	188003cc 	andi	r2,r3,15
 2003744:	01000104 	movi	r4,4
 2003748:	11000426 	beq	r2,r4,200375c <__divdf3+0x8bc>
 200374c:	1805883a 	mov	r2,r3
 2003750:	10c00104 	addi	r3,r2,4
 2003754:	1885803a 	cmpltu	r2,r3,r2
 2003758:	88a3883a 	add	r17,r17,r2
 200375c:	8880202c 	andhi	r2,r17,128
 2003760:	10002926 	beq	r2,zero,2003808 <__divdf3+0x968>
 2003764:	9900004c 	andi	r4,r19,1
 2003768:	00800044 	movi	r2,1
 200376c:	0021883a 	mov	r16,zero
 2003770:	002b883a 	mov	r21,zero
 2003774:	003e2906 	br	200301c <__divdf3+0x17c>
 2003778:	d9800017 	ldw	r6,0(sp)
 200377c:	8c7fff84 	addi	r17,r17,-2
 2003780:	a9ab883a 	add	r21,r21,r6
 2003784:	a98b803a 	cmpltu	r5,r21,r6
 2003788:	2d8b883a 	add	r5,r5,r22
 200378c:	2a11883a 	add	r8,r5,r8
 2003790:	003ef806 	br	2003374 <__divdf3+0x4d4>
 2003794:	d9800017 	ldw	r6,0(sp)
 2003798:	318f883a 	add	r7,r6,r6
 200379c:	398b803a 	cmpltu	r5,r7,r6
 20037a0:	2d8d883a 	add	r6,r5,r22
 20037a4:	81a1883a 	add	r16,r16,r6
 20037a8:	a17fff84 	addi	r5,r20,-2
 20037ac:	d9c00015 	stw	r7,0(sp)
 20037b0:	003f8806 	br	20035d4 <__divdf3+0x734>
 20037b4:	013ff844 	movi	r4,-31
 20037b8:	2085c83a 	sub	r2,r4,r2
 20037bc:	8888d83a 	srl	r4,r17,r2
 20037c0:	00800804 	movi	r2,32
 20037c4:	18802126 	beq	r3,r2,200384c <__divdf3+0x9ac>
 20037c8:	04001004 	movi	r16,64
 20037cc:	80c7c83a 	sub	r3,r16,r3
 20037d0:	88e0983a 	sll	r16,r17,r3
 20037d4:	8504b03a 	or	r2,r16,r20
 20037d8:	1004c03a 	cmpne	r2,r2,zero
 20037dc:	2084b03a 	or	r2,r4,r2
 20037e0:	144001cc 	andi	r17,r2,7
 20037e4:	88000d1e 	bne	r17,zero,200381c <__divdf3+0x97c>
 20037e8:	0021883a 	mov	r16,zero
 20037ec:	102ad0fa 	srli	r21,r2,3
 20037f0:	9900004c 	andi	r4,r19,1
 20037f4:	0005883a 	mov	r2,zero
 20037f8:	ac6ab03a 	or	r21,r21,r17
 20037fc:	003e0706 	br	200301c <__divdf3+0x17c>
 2003800:	1007883a 	mov	r3,r2
 2003804:	0023883a 	mov	r17,zero
 2003808:	8820927a 	slli	r16,r17,9
 200380c:	1805883a 	mov	r2,r3
 2003810:	8822977a 	slli	r17,r17,29
 2003814:	8020d33a 	srli	r16,r16,12
 2003818:	003ff406 	br	20037ec <__divdf3+0x94c>
 200381c:	10c003cc 	andi	r3,r2,15
 2003820:	01000104 	movi	r4,4
 2003824:	193ff626 	beq	r3,r4,2003800 <__divdf3+0x960>
 2003828:	0023883a 	mov	r17,zero
 200382c:	003fc806 	br	2003750 <__divdf3+0x8b0>
 2003830:	a8bfd136 	bltu	r21,r2,2003778 <__divdf3+0x8d8>
 2003834:	2823883a 	mov	r17,r5
 2003838:	003fa606 	br	20036d4 <__divdf3+0x834>
 200383c:	d9800017 	ldw	r6,0(sp)
 2003840:	30bfd436 	bltu	r6,r2,2003794 <__divdf3+0x8f4>
 2003844:	2829883a 	mov	r20,r5
 2003848:	003f6406 	br	20035dc <__divdf3+0x73c>
 200384c:	0021883a 	mov	r16,zero
 2003850:	003fe006 	br	20037d4 <__divdf3+0x934>
 2003854:	00800434 	movhi	r2,16
 2003858:	8c000234 	orhi	r16,r17,8
 200385c:	10bfffc4 	addi	r2,r2,-1
 2003860:	e009883a 	mov	r4,fp
 2003864:	80a0703a 	and	r16,r16,r2
 2003868:	a02b883a 	mov	r21,r20
 200386c:	003e4e06 	br	20031a8 <__divdf3+0x308>

02003870 <__gedf2>:
 2003870:	2804d53a 	srli	r2,r5,20
 2003874:	3806d53a 	srli	r3,r7,20
 2003878:	02000434 	movhi	r8,16
 200387c:	423fffc4 	addi	r8,r8,-1
 2003880:	1081ffcc 	andi	r2,r2,2047
 2003884:	0241ffc4 	movi	r9,2047
 2003888:	2a14703a 	and	r10,r5,r8
 200388c:	18c1ffcc 	andi	r3,r3,2047
 2003890:	3a10703a 	and	r8,r7,r8
 2003894:	280ad7fa 	srli	r5,r5,31
 2003898:	380ed7fa 	srli	r7,r7,31
 200389c:	12401d26 	beq	r2,r9,2003914 <__gedf2+0xa4>
 20038a0:	0241ffc4 	movi	r9,2047
 20038a4:	1a401226 	beq	r3,r9,20038f0 <__gedf2+0x80>
 20038a8:	1000081e 	bne	r2,zero,20038cc <__gedf2+0x5c>
 20038ac:	2296b03a 	or	r11,r4,r10
 20038b0:	5813003a 	cmpeq	r9,r11,zero
 20038b4:	1800091e 	bne	r3,zero,20038dc <__gedf2+0x6c>
 20038b8:	3218b03a 	or	r12,r6,r8
 20038bc:	6000071e 	bne	r12,zero,20038dc <__gedf2+0x6c>
 20038c0:	0005883a 	mov	r2,zero
 20038c4:	5800101e 	bne	r11,zero,2003908 <__gedf2+0x98>
 20038c8:	f800283a 	ret
 20038cc:	18000c1e 	bne	r3,zero,2003900 <__gedf2+0x90>
 20038d0:	3212b03a 	or	r9,r6,r8
 20038d4:	48000c26 	beq	r9,zero,2003908 <__gedf2+0x98>
 20038d8:	0013883a 	mov	r9,zero
 20038dc:	39c03fcc 	andi	r7,r7,255
 20038e0:	48000826 	beq	r9,zero,2003904 <__gedf2+0x94>
 20038e4:	38000926 	beq	r7,zero,200390c <__gedf2+0x9c>
 20038e8:	00800044 	movi	r2,1
 20038ec:	f800283a 	ret
 20038f0:	3212b03a 	or	r9,r6,r8
 20038f4:	483fec26 	beq	r9,zero,20038a8 <__gedf2+0x38>
 20038f8:	00bfff84 	movi	r2,-2
 20038fc:	f800283a 	ret
 2003900:	39c03fcc 	andi	r7,r7,255
 2003904:	29c00626 	beq	r5,r7,2003920 <__gedf2+0xb0>
 2003908:	283ff726 	beq	r5,zero,20038e8 <__gedf2+0x78>
 200390c:	00bfffc4 	movi	r2,-1
 2003910:	f800283a 	ret
 2003914:	2292b03a 	or	r9,r4,r10
 2003918:	483fe126 	beq	r9,zero,20038a0 <__gedf2+0x30>
 200391c:	003ff606 	br	20038f8 <__gedf2+0x88>
 2003920:	18bff916 	blt	r3,r2,2003908 <__gedf2+0x98>
 2003924:	10c00316 	blt	r2,r3,2003934 <__gedf2+0xc4>
 2003928:	42bff736 	bltu	r8,r10,2003908 <__gedf2+0x98>
 200392c:	52000326 	beq	r10,r8,200393c <__gedf2+0xcc>
 2003930:	5200042e 	bgeu	r10,r8,2003944 <__gedf2+0xd4>
 2003934:	283fec1e 	bne	r5,zero,20038e8 <__gedf2+0x78>
 2003938:	003ff406 	br	200390c <__gedf2+0x9c>
 200393c:	313ff236 	bltu	r6,r4,2003908 <__gedf2+0x98>
 2003940:	21bffc36 	bltu	r4,r6,2003934 <__gedf2+0xc4>
 2003944:	0005883a 	mov	r2,zero
 2003948:	f800283a 	ret

0200394c <__muldf3>:
 200394c:	deffee04 	addi	sp,sp,-72
 2003950:	dd000c15 	stw	r20,48(sp)
 2003954:	2828d53a 	srli	r20,r5,20
 2003958:	ddc00f15 	stw	r23,60(sp)
 200395c:	282ed7fa 	srli	r23,r5,31
 2003960:	dc000815 	stw	r16,32(sp)
 2003964:	04000434 	movhi	r16,16
 2003968:	dcc00b15 	stw	r19,44(sp)
 200396c:	843fffc4 	addi	r16,r16,-1
 2003970:	dfc01115 	stw	ra,68(sp)
 2003974:	df001015 	stw	fp,64(sp)
 2003978:	dd800e15 	stw	r22,56(sp)
 200397c:	dd400d15 	stw	r21,52(sp)
 2003980:	dc800a15 	stw	r18,40(sp)
 2003984:	dc400915 	stw	r17,36(sp)
 2003988:	a501ffcc 	andi	r20,r20,2047
 200398c:	2c20703a 	and	r16,r5,r16
 2003990:	b827883a 	mov	r19,r23
 2003994:	ba403fcc 	andi	r9,r23,255
 2003998:	a0006026 	beq	r20,zero,2003b1c <__muldf3+0x1d0>
 200399c:	0081ffc4 	movi	r2,2047
 20039a0:	202d883a 	mov	r22,r4
 20039a4:	a0803626 	beq	r20,r2,2003a80 <__muldf3+0x134>
 20039a8:	84000434 	orhi	r16,r16,16
 20039ac:	200ad77a 	srli	r5,r4,29
 20039b0:	800490fa 	slli	r2,r16,3
 20039b4:	202c90fa 	slli	r22,r4,3
 20039b8:	a53f0044 	addi	r20,r20,-1023
 20039bc:	28a0b03a 	or	r16,r5,r2
 20039c0:	002b883a 	mov	r21,zero
 20039c4:	000b883a 	mov	r5,zero
 20039c8:	3804d53a 	srli	r2,r7,20
 20039cc:	3838d7fa 	srli	fp,r7,31
 20039d0:	04400434 	movhi	r17,16
 20039d4:	8c7fffc4 	addi	r17,r17,-1
 20039d8:	1081ffcc 	andi	r2,r2,2047
 20039dc:	3025883a 	mov	r18,r6
 20039e0:	3c62703a 	and	r17,r7,r17
 20039e4:	e2803fcc 	andi	r10,fp,255
 20039e8:	10006d26 	beq	r2,zero,2003ba0 <__muldf3+0x254>
 20039ec:	00c1ffc4 	movi	r3,2047
 20039f0:	10c06526 	beq	r2,r3,2003b88 <__muldf3+0x23c>
 20039f4:	8c400434 	orhi	r17,r17,16
 20039f8:	300ed77a 	srli	r7,r6,29
 20039fc:	880690fa 	slli	r3,r17,3
 2003a00:	302490fa 	slli	r18,r6,3
 2003a04:	10bf0044 	addi	r2,r2,-1023
 2003a08:	38e2b03a 	or	r17,r7,r3
 2003a0c:	000f883a 	mov	r7,zero
 2003a10:	a087883a 	add	r3,r20,r2
 2003a14:	010003c4 	movi	r4,15
 2003a18:	3d44b03a 	or	r2,r7,r21
 2003a1c:	e5ccf03a 	xor	r6,fp,r23
 2003a20:	1a000044 	addi	r8,r3,1
 2003a24:	20809b36 	bltu	r4,r2,2003c94 <__muldf3+0x348>
 2003a28:	100490ba 	slli	r2,r2,2
 2003a2c:	01008034 	movhi	r4,512
 2003a30:	210e9004 	addi	r4,r4,14912
 2003a34:	1105883a 	add	r2,r2,r4
 2003a38:	10800017 	ldw	r2,0(r2)
 2003a3c:	1000683a 	jmp	r2
 2003a40:	02003c94 	movui	r8,242
 2003a44:	02003aa0 	cmpeqi	r8,zero,234
 2003a48:	02003aa0 	cmpeqi	r8,zero,234
 2003a4c:	02003a9c 	xori	r8,zero,234
 2003a50:	02003c70 	cmpltui	r8,zero,241
 2003a54:	02003c70 	cmpltui	r8,zero,241
 2003a58:	02003c58 	cmpnei	r8,zero,241
 2003a5c:	02003a9c 	xori	r8,zero,234
 2003a60:	02003c70 	cmpltui	r8,zero,241
 2003a64:	02003c58 	cmpnei	r8,zero,241
 2003a68:	02003c70 	cmpltui	r8,zero,241
 2003a6c:	02003a9c 	xori	r8,zero,234
 2003a70:	02003c80 	call	2003c8 <__alt_mem_mem_Nios_PI+0x3c8>
 2003a74:	02003c80 	call	2003c8 <__alt_mem_mem_Nios_PI+0x3c8>
 2003a78:	02003c80 	call	2003c8 <__alt_mem_mem_Nios_PI+0x3c8>
 2003a7c:	02003fe0 	cmpeqi	r8,zero,255
 2003a80:	2404b03a 	or	r2,r4,r16
 2003a84:	1000711e 	bne	r2,zero,2003c4c <__muldf3+0x300>
 2003a88:	05400204 	movi	r21,8
 2003a8c:	0021883a 	mov	r16,zero
 2003a90:	002d883a 	mov	r22,zero
 2003a94:	01400084 	movi	r5,2
 2003a98:	003fcb06 	br	20039c8 <__muldf3+0x7c>
 2003a9c:	500d883a 	mov	r6,r10
 2003aa0:	00800084 	movi	r2,2
 2003aa4:	38805926 	beq	r7,r2,2003c0c <__muldf3+0x2c0>
 2003aa8:	008000c4 	movi	r2,3
 2003aac:	3881bb26 	beq	r7,r2,200419c <__muldf3+0x850>
 2003ab0:	00800044 	movi	r2,1
 2003ab4:	3881961e 	bne	r7,r2,2004110 <__muldf3+0x7c4>
 2003ab8:	3027883a 	mov	r19,r6
 2003abc:	0005883a 	mov	r2,zero
 2003ac0:	0021883a 	mov	r16,zero
 2003ac4:	002d883a 	mov	r22,zero
 2003ac8:	1004953a 	slli	r2,r2,20
 2003acc:	98c03fcc 	andi	r3,r19,255
 2003ad0:	04400434 	movhi	r17,16
 2003ad4:	8c7fffc4 	addi	r17,r17,-1
 2003ad8:	180697fa 	slli	r3,r3,31
 2003adc:	8460703a 	and	r16,r16,r17
 2003ae0:	80a0b03a 	or	r16,r16,r2
 2003ae4:	80c6b03a 	or	r3,r16,r3
 2003ae8:	b005883a 	mov	r2,r22
 2003aec:	dfc01117 	ldw	ra,68(sp)
 2003af0:	df001017 	ldw	fp,64(sp)
 2003af4:	ddc00f17 	ldw	r23,60(sp)
 2003af8:	dd800e17 	ldw	r22,56(sp)
 2003afc:	dd400d17 	ldw	r21,52(sp)
 2003b00:	dd000c17 	ldw	r20,48(sp)
 2003b04:	dcc00b17 	ldw	r19,44(sp)
 2003b08:	dc800a17 	ldw	r18,40(sp)
 2003b0c:	dc400917 	ldw	r17,36(sp)
 2003b10:	dc000817 	ldw	r16,32(sp)
 2003b14:	dec01204 	addi	sp,sp,72
 2003b18:	f800283a 	ret
 2003b1c:	2404b03a 	or	r2,r4,r16
 2003b20:	202b883a 	mov	r21,r4
 2003b24:	10004426 	beq	r2,zero,2003c38 <__muldf3+0x2ec>
 2003b28:	80015126 	beq	r16,zero,2004070 <__muldf3+0x724>
 2003b2c:	8009883a 	mov	r4,r16
 2003b30:	d9800715 	stw	r6,28(sp)
 2003b34:	d9c00215 	stw	r7,8(sp)
 2003b38:	da400415 	stw	r9,16(sp)
 2003b3c:	20044700 	call	2004470 <__clzsi2>
 2003b40:	d9800717 	ldw	r6,28(sp)
 2003b44:	d9c00217 	ldw	r7,8(sp)
 2003b48:	da400417 	ldw	r9,16(sp)
 2003b4c:	113ffd44 	addi	r4,r2,-11
 2003b50:	00c00704 	movi	r3,28
 2003b54:	19014216 	blt	r3,r4,2004060 <__muldf3+0x714>
 2003b58:	00c00744 	movi	r3,29
 2003b5c:	15bffe04 	addi	r22,r2,-8
 2003b60:	1907c83a 	sub	r3,r3,r4
 2003b64:	85a0983a 	sll	r16,r16,r22
 2003b68:	a8c6d83a 	srl	r3,r21,r3
 2003b6c:	adac983a 	sll	r22,r21,r22
 2003b70:	1c20b03a 	or	r16,r3,r16
 2003b74:	1080fcc4 	addi	r2,r2,1011
 2003b78:	00a9c83a 	sub	r20,zero,r2
 2003b7c:	002b883a 	mov	r21,zero
 2003b80:	000b883a 	mov	r5,zero
 2003b84:	003f9006 	br	20039c8 <__muldf3+0x7c>
 2003b88:	3446b03a 	or	r3,r6,r17
 2003b8c:	1800281e 	bne	r3,zero,2003c30 <__muldf3+0x2e4>
 2003b90:	0023883a 	mov	r17,zero
 2003b94:	0025883a 	mov	r18,zero
 2003b98:	01c00084 	movi	r7,2
 2003b9c:	003f9c06 	br	2003a10 <__muldf3+0xc4>
 2003ba0:	3446b03a 	or	r3,r6,r17
 2003ba4:	18001e26 	beq	r3,zero,2003c20 <__muldf3+0x2d4>
 2003ba8:	88012126 	beq	r17,zero,2004030 <__muldf3+0x6e4>
 2003bac:	8809883a 	mov	r4,r17
 2003bb0:	d9400215 	stw	r5,8(sp)
 2003bb4:	d9800715 	stw	r6,28(sp)
 2003bb8:	da400415 	stw	r9,16(sp)
 2003bbc:	da800315 	stw	r10,12(sp)
 2003bc0:	20044700 	call	2004470 <__clzsi2>
 2003bc4:	d9400217 	ldw	r5,8(sp)
 2003bc8:	d9800717 	ldw	r6,28(sp)
 2003bcc:	da400417 	ldw	r9,16(sp)
 2003bd0:	da800317 	ldw	r10,12(sp)
 2003bd4:	113ffd44 	addi	r4,r2,-11
 2003bd8:	00c00704 	movi	r3,28
 2003bdc:	19011016 	blt	r3,r4,2004020 <__muldf3+0x6d4>
 2003be0:	00c00744 	movi	r3,29
 2003be4:	14bffe04 	addi	r18,r2,-8
 2003be8:	1907c83a 	sub	r3,r3,r4
 2003bec:	8ca2983a 	sll	r17,r17,r18
 2003bf0:	30c6d83a 	srl	r3,r6,r3
 2003bf4:	34a4983a 	sll	r18,r6,r18
 2003bf8:	1c62b03a 	or	r17,r3,r17
 2003bfc:	1080fcc4 	addi	r2,r2,1011
 2003c00:	0085c83a 	sub	r2,zero,r2
 2003c04:	000f883a 	mov	r7,zero
 2003c08:	003f8106 	br	2003a10 <__muldf3+0xc4>
 2003c0c:	3027883a 	mov	r19,r6
 2003c10:	0081ffc4 	movi	r2,2047
 2003c14:	0021883a 	mov	r16,zero
 2003c18:	002d883a 	mov	r22,zero
 2003c1c:	003faa06 	br	2003ac8 <__muldf3+0x17c>
 2003c20:	0023883a 	mov	r17,zero
 2003c24:	0025883a 	mov	r18,zero
 2003c28:	01c00044 	movi	r7,1
 2003c2c:	003f7806 	br	2003a10 <__muldf3+0xc4>
 2003c30:	01c000c4 	movi	r7,3
 2003c34:	003f7606 	br	2003a10 <__muldf3+0xc4>
 2003c38:	05400104 	movi	r21,4
 2003c3c:	0021883a 	mov	r16,zero
 2003c40:	002d883a 	mov	r22,zero
 2003c44:	01400044 	movi	r5,1
 2003c48:	003f5f06 	br	20039c8 <__muldf3+0x7c>
 2003c4c:	05400304 	movi	r21,12
 2003c50:	014000c4 	movi	r5,3
 2003c54:	003f5c06 	br	20039c8 <__muldf3+0x7c>
 2003c58:	04000434 	movhi	r16,16
 2003c5c:	0027883a 	mov	r19,zero
 2003c60:	843fffc4 	addi	r16,r16,-1
 2003c64:	05bfffc4 	movi	r22,-1
 2003c68:	0081ffc4 	movi	r2,2047
 2003c6c:	003f9606 	br	2003ac8 <__muldf3+0x17c>
 2003c70:	8023883a 	mov	r17,r16
 2003c74:	b025883a 	mov	r18,r22
 2003c78:	280f883a 	mov	r7,r5
 2003c7c:	003f8806 	br	2003aa0 <__muldf3+0x154>
 2003c80:	8023883a 	mov	r17,r16
 2003c84:	b025883a 	mov	r18,r22
 2003c88:	480d883a 	mov	r6,r9
 2003c8c:	280f883a 	mov	r7,r5
 2003c90:	003f8306 	br	2003aa0 <__muldf3+0x154>
 2003c94:	b026d43a 	srli	r19,r22,16
 2003c98:	902ed43a 	srli	r23,r18,16
 2003c9c:	b5bfffcc 	andi	r22,r22,65535
 2003ca0:	94bfffcc 	andi	r18,r18,65535
 2003ca4:	b00b883a 	mov	r5,r22
 2003ca8:	9009883a 	mov	r4,r18
 2003cac:	d8c00515 	stw	r3,20(sp)
 2003cb0:	d9800715 	stw	r6,28(sp)
 2003cb4:	da000615 	stw	r8,24(sp)
 2003cb8:	20019440 	call	2001944 <__mulsi3>
 2003cbc:	980b883a 	mov	r5,r19
 2003cc0:	9009883a 	mov	r4,r18
 2003cc4:	1029883a 	mov	r20,r2
 2003cc8:	20019440 	call	2001944 <__mulsi3>
 2003ccc:	b80b883a 	mov	r5,r23
 2003cd0:	9809883a 	mov	r4,r19
 2003cd4:	102b883a 	mov	r21,r2
 2003cd8:	20019440 	call	2001944 <__mulsi3>
 2003cdc:	b809883a 	mov	r4,r23
 2003ce0:	b00b883a 	mov	r5,r22
 2003ce4:	1039883a 	mov	fp,r2
 2003ce8:	20019440 	call	2001944 <__mulsi3>
 2003cec:	a008d43a 	srli	r4,r20,16
 2003cf0:	1545883a 	add	r2,r2,r21
 2003cf4:	d8c00517 	ldw	r3,20(sp)
 2003cf8:	2085883a 	add	r2,r4,r2
 2003cfc:	d9800717 	ldw	r6,28(sp)
 2003d00:	da000617 	ldw	r8,24(sp)
 2003d04:	1540022e 	bgeu	r2,r21,2003d10 <__muldf3+0x3c4>
 2003d08:	01000074 	movhi	r4,1
 2003d0c:	e139883a 	add	fp,fp,r4
 2003d10:	100e943a 	slli	r7,r2,16
 2003d14:	1004d43a 	srli	r2,r2,16
 2003d18:	882ad43a 	srli	r21,r17,16
 2003d1c:	a53fffcc 	andi	r20,r20,65535
 2003d20:	8c7fffcc 	andi	r17,r17,65535
 2003d24:	3d29883a 	add	r20,r7,r20
 2003d28:	b00b883a 	mov	r5,r22
 2003d2c:	8809883a 	mov	r4,r17
 2003d30:	d8c00515 	stw	r3,20(sp)
 2003d34:	d9800715 	stw	r6,28(sp)
 2003d38:	da000615 	stw	r8,24(sp)
 2003d3c:	dd000115 	stw	r20,4(sp)
 2003d40:	d8800015 	stw	r2,0(sp)
 2003d44:	20019440 	call	2001944 <__mulsi3>
 2003d48:	980b883a 	mov	r5,r19
 2003d4c:	8809883a 	mov	r4,r17
 2003d50:	d8800215 	stw	r2,8(sp)
 2003d54:	20019440 	call	2001944 <__mulsi3>
 2003d58:	9809883a 	mov	r4,r19
 2003d5c:	a80b883a 	mov	r5,r21
 2003d60:	1029883a 	mov	r20,r2
 2003d64:	20019440 	call	2001944 <__mulsi3>
 2003d68:	b00b883a 	mov	r5,r22
 2003d6c:	a809883a 	mov	r4,r21
 2003d70:	d8800415 	stw	r2,16(sp)
 2003d74:	20019440 	call	2001944 <__mulsi3>
 2003d78:	d9c00217 	ldw	r7,8(sp)
 2003d7c:	1505883a 	add	r2,r2,r20
 2003d80:	d8c00517 	ldw	r3,20(sp)
 2003d84:	3826d43a 	srli	r19,r7,16
 2003d88:	d9800717 	ldw	r6,28(sp)
 2003d8c:	da000617 	ldw	r8,24(sp)
 2003d90:	9885883a 	add	r2,r19,r2
 2003d94:	da400417 	ldw	r9,16(sp)
 2003d98:	1500022e 	bgeu	r2,r20,2003da4 <__muldf3+0x458>
 2003d9c:	01000074 	movhi	r4,1
 2003da0:	4913883a 	add	r9,r9,r4
 2003da4:	1028d43a 	srli	r20,r2,16
 2003da8:	1004943a 	slli	r2,r2,16
 2003dac:	802cd43a 	srli	r22,r16,16
 2003db0:	843fffcc 	andi	r16,r16,65535
 2003db4:	3cffffcc 	andi	r19,r7,65535
 2003db8:	9009883a 	mov	r4,r18
 2003dbc:	800b883a 	mov	r5,r16
 2003dc0:	a269883a 	add	r20,r20,r9
 2003dc4:	d8c00515 	stw	r3,20(sp)
 2003dc8:	d9800715 	stw	r6,28(sp)
 2003dcc:	da000615 	stw	r8,24(sp)
 2003dd0:	14e7883a 	add	r19,r2,r19
 2003dd4:	20019440 	call	2001944 <__mulsi3>
 2003dd8:	9009883a 	mov	r4,r18
 2003ddc:	b00b883a 	mov	r5,r22
 2003de0:	d8800315 	stw	r2,12(sp)
 2003de4:	20019440 	call	2001944 <__mulsi3>
 2003de8:	b809883a 	mov	r4,r23
 2003dec:	b00b883a 	mov	r5,r22
 2003df0:	d8800215 	stw	r2,8(sp)
 2003df4:	20019440 	call	2001944 <__mulsi3>
 2003df8:	b80b883a 	mov	r5,r23
 2003dfc:	8009883a 	mov	r4,r16
 2003e00:	d8800415 	stw	r2,16(sp)
 2003e04:	20019440 	call	2001944 <__mulsi3>
 2003e08:	da800317 	ldw	r10,12(sp)
 2003e0c:	d9c00217 	ldw	r7,8(sp)
 2003e10:	d9000017 	ldw	r4,0(sp)
 2003e14:	502ed43a 	srli	r23,r10,16
 2003e18:	11c5883a 	add	r2,r2,r7
 2003e1c:	24e5883a 	add	r18,r4,r19
 2003e20:	b885883a 	add	r2,r23,r2
 2003e24:	d8c00517 	ldw	r3,20(sp)
 2003e28:	d9800717 	ldw	r6,28(sp)
 2003e2c:	da000617 	ldw	r8,24(sp)
 2003e30:	da400417 	ldw	r9,16(sp)
 2003e34:	11c0022e 	bgeu	r2,r7,2003e40 <__muldf3+0x4f4>
 2003e38:	01000074 	movhi	r4,1
 2003e3c:	4913883a 	add	r9,r9,r4
 2003e40:	100ed43a 	srli	r7,r2,16
 2003e44:	1004943a 	slli	r2,r2,16
 2003e48:	55ffffcc 	andi	r23,r10,65535
 2003e4c:	3a53883a 	add	r9,r7,r9
 2003e50:	8809883a 	mov	r4,r17
 2003e54:	800b883a 	mov	r5,r16
 2003e58:	d8c00515 	stw	r3,20(sp)
 2003e5c:	d9800715 	stw	r6,28(sp)
 2003e60:	da000615 	stw	r8,24(sp)
 2003e64:	da400415 	stw	r9,16(sp)
 2003e68:	15ef883a 	add	r23,r2,r23
 2003e6c:	20019440 	call	2001944 <__mulsi3>
 2003e70:	8809883a 	mov	r4,r17
 2003e74:	b00b883a 	mov	r5,r22
 2003e78:	d8800215 	stw	r2,8(sp)
 2003e7c:	20019440 	call	2001944 <__mulsi3>
 2003e80:	b00b883a 	mov	r5,r22
 2003e84:	a809883a 	mov	r4,r21
 2003e88:	d8800315 	stw	r2,12(sp)
 2003e8c:	20019440 	call	2001944 <__mulsi3>
 2003e90:	8009883a 	mov	r4,r16
 2003e94:	a80b883a 	mov	r5,r21
 2003e98:	1023883a 	mov	r17,r2
 2003e9c:	20019440 	call	2001944 <__mulsi3>
 2003ea0:	d9c00217 	ldw	r7,8(sp)
 2003ea4:	da800317 	ldw	r10,12(sp)
 2003ea8:	d8c00517 	ldw	r3,20(sp)
 2003eac:	3808d43a 	srli	r4,r7,16
 2003eb0:	1285883a 	add	r2,r2,r10
 2003eb4:	d9800717 	ldw	r6,28(sp)
 2003eb8:	2085883a 	add	r2,r4,r2
 2003ebc:	da000617 	ldw	r8,24(sp)
 2003ec0:	da400417 	ldw	r9,16(sp)
 2003ec4:	1280022e 	bgeu	r2,r10,2003ed0 <__muldf3+0x584>
 2003ec8:	01000074 	movhi	r4,1
 2003ecc:	8923883a 	add	r17,r17,r4
 2003ed0:	1008943a 	slli	r4,r2,16
 2003ed4:	39ffffcc 	andi	r7,r7,65535
 2003ed8:	e4b9883a 	add	fp,fp,r18
 2003edc:	21cf883a 	add	r7,r4,r7
 2003ee0:	e4e7803a 	cmpltu	r19,fp,r19
 2003ee4:	3d0f883a 	add	r7,r7,r20
 2003ee8:	bf39883a 	add	fp,r23,fp
 2003eec:	99c9883a 	add	r4,r19,r7
 2003ef0:	e5ef803a 	cmpltu	r23,fp,r23
 2003ef4:	490b883a 	add	r5,r9,r4
 2003ef8:	1004d43a 	srli	r2,r2,16
 2003efc:	b965883a 	add	r18,r23,r5
 2003f00:	24c9803a 	cmpltu	r4,r4,r19
 2003f04:	3d29803a 	cmpltu	r20,r7,r20
 2003f08:	a128b03a 	or	r20,r20,r4
 2003f0c:	95ef803a 	cmpltu	r23,r18,r23
 2003f10:	2a53803a 	cmpltu	r9,r5,r9
 2003f14:	a0a9883a 	add	r20,r20,r2
 2003f18:	4deeb03a 	or	r23,r9,r23
 2003f1c:	a5ef883a 	add	r23,r20,r23
 2003f20:	bc63883a 	add	r17,r23,r17
 2003f24:	e004927a 	slli	r2,fp,9
 2003f28:	d9000117 	ldw	r4,4(sp)
 2003f2c:	882e927a 	slli	r23,r17,9
 2003f30:	9022d5fa 	srli	r17,r18,23
 2003f34:	e038d5fa 	srli	fp,fp,23
 2003f38:	1104b03a 	or	r2,r2,r4
 2003f3c:	9024927a 	slli	r18,r18,9
 2003f40:	1004c03a 	cmpne	r2,r2,zero
 2003f44:	bc62b03a 	or	r17,r23,r17
 2003f48:	1738b03a 	or	fp,r2,fp
 2003f4c:	8880402c 	andhi	r2,r17,256
 2003f50:	e4a4b03a 	or	r18,fp,r18
 2003f54:	10000726 	beq	r2,zero,2003f74 <__muldf3+0x628>
 2003f58:	9006d07a 	srli	r3,r18,1
 2003f5c:	880497fa 	slli	r2,r17,31
 2003f60:	9480004c 	andi	r18,r18,1
 2003f64:	8822d07a 	srli	r17,r17,1
 2003f68:	1ca4b03a 	or	r18,r3,r18
 2003f6c:	14a4b03a 	or	r18,r2,r18
 2003f70:	4007883a 	mov	r3,r8
 2003f74:	1880ffc4 	addi	r2,r3,1023
 2003f78:	0080460e 	bge	zero,r2,2004094 <__muldf3+0x748>
 2003f7c:	910001cc 	andi	r4,r18,7
 2003f80:	20000726 	beq	r4,zero,2003fa0 <__muldf3+0x654>
 2003f84:	910003cc 	andi	r4,r18,15
 2003f88:	01400104 	movi	r5,4
 2003f8c:	21400426 	beq	r4,r5,2003fa0 <__muldf3+0x654>
 2003f90:	9149883a 	add	r4,r18,r5
 2003f94:	24a5803a 	cmpltu	r18,r4,r18
 2003f98:	8ca3883a 	add	r17,r17,r18
 2003f9c:	2025883a 	mov	r18,r4
 2003fa0:	8900402c 	andhi	r4,r17,256
 2003fa4:	20000426 	beq	r4,zero,2003fb8 <__muldf3+0x66c>
 2003fa8:	18810004 	addi	r2,r3,1024
 2003fac:	00ffc034 	movhi	r3,65280
 2003fb0:	18ffffc4 	addi	r3,r3,-1
 2003fb4:	88e2703a 	and	r17,r17,r3
 2003fb8:	00c1ff84 	movi	r3,2046
 2003fbc:	18bf1316 	blt	r3,r2,2003c0c <__muldf3+0x2c0>
 2003fc0:	882c977a 	slli	r22,r17,29
 2003fc4:	9024d0fa 	srli	r18,r18,3
 2003fc8:	8822927a 	slli	r17,r17,9
 2003fcc:	1081ffcc 	andi	r2,r2,2047
 2003fd0:	b4acb03a 	or	r22,r22,r18
 2003fd4:	8820d33a 	srli	r16,r17,12
 2003fd8:	3027883a 	mov	r19,r6
 2003fdc:	003eba06 	br	2003ac8 <__muldf3+0x17c>
 2003fe0:	8080022c 	andhi	r2,r16,8
 2003fe4:	10000926 	beq	r2,zero,200400c <__muldf3+0x6c0>
 2003fe8:	8880022c 	andhi	r2,r17,8
 2003fec:	1000071e 	bne	r2,zero,200400c <__muldf3+0x6c0>
 2003ff0:	00800434 	movhi	r2,16
 2003ff4:	8c000234 	orhi	r16,r17,8
 2003ff8:	10bfffc4 	addi	r2,r2,-1
 2003ffc:	e027883a 	mov	r19,fp
 2004000:	80a0703a 	and	r16,r16,r2
 2004004:	902d883a 	mov	r22,r18
 2004008:	003f1706 	br	2003c68 <__muldf3+0x31c>
 200400c:	00800434 	movhi	r2,16
 2004010:	84000234 	orhi	r16,r16,8
 2004014:	10bfffc4 	addi	r2,r2,-1
 2004018:	80a0703a 	and	r16,r16,r2
 200401c:	003f1206 	br	2003c68 <__muldf3+0x31c>
 2004020:	147ff604 	addi	r17,r2,-40
 2004024:	3462983a 	sll	r17,r6,r17
 2004028:	0025883a 	mov	r18,zero
 200402c:	003ef306 	br	2003bfc <__muldf3+0x2b0>
 2004030:	3009883a 	mov	r4,r6
 2004034:	d9400215 	stw	r5,8(sp)
 2004038:	d9800715 	stw	r6,28(sp)
 200403c:	da400415 	stw	r9,16(sp)
 2004040:	da800315 	stw	r10,12(sp)
 2004044:	20044700 	call	2004470 <__clzsi2>
 2004048:	10800804 	addi	r2,r2,32
 200404c:	da800317 	ldw	r10,12(sp)
 2004050:	da400417 	ldw	r9,16(sp)
 2004054:	d9800717 	ldw	r6,28(sp)
 2004058:	d9400217 	ldw	r5,8(sp)
 200405c:	003edd06 	br	2003bd4 <__muldf3+0x288>
 2004060:	143ff604 	addi	r16,r2,-40
 2004064:	ac20983a 	sll	r16,r21,r16
 2004068:	002d883a 	mov	r22,zero
 200406c:	003ec106 	br	2003b74 <__muldf3+0x228>
 2004070:	d9800715 	stw	r6,28(sp)
 2004074:	d9c00215 	stw	r7,8(sp)
 2004078:	da400415 	stw	r9,16(sp)
 200407c:	20044700 	call	2004470 <__clzsi2>
 2004080:	10800804 	addi	r2,r2,32
 2004084:	da400417 	ldw	r9,16(sp)
 2004088:	d9c00217 	ldw	r7,8(sp)
 200408c:	d9800717 	ldw	r6,28(sp)
 2004090:	003eae06 	br	2003b4c <__muldf3+0x200>
 2004094:	00c00044 	movi	r3,1
 2004098:	1887c83a 	sub	r3,r3,r2
 200409c:	01000e04 	movi	r4,56
 20040a0:	20fe8516 	blt	r4,r3,2003ab8 <__muldf3+0x16c>
 20040a4:	010007c4 	movi	r4,31
 20040a8:	20c01b16 	blt	r4,r3,2004118 <__muldf3+0x7cc>
 20040ac:	00800804 	movi	r2,32
 20040b0:	10c5c83a 	sub	r2,r2,r3
 20040b4:	888a983a 	sll	r5,r17,r2
 20040b8:	90c8d83a 	srl	r4,r18,r3
 20040bc:	9084983a 	sll	r2,r18,r2
 20040c0:	88e2d83a 	srl	r17,r17,r3
 20040c4:	2906b03a 	or	r3,r5,r4
 20040c8:	1004c03a 	cmpne	r2,r2,zero
 20040cc:	1886b03a 	or	r3,r3,r2
 20040d0:	188001cc 	andi	r2,r3,7
 20040d4:	10000726 	beq	r2,zero,20040f4 <__muldf3+0x7a8>
 20040d8:	188003cc 	andi	r2,r3,15
 20040dc:	01000104 	movi	r4,4
 20040e0:	11000426 	beq	r2,r4,20040f4 <__muldf3+0x7a8>
 20040e4:	1805883a 	mov	r2,r3
 20040e8:	10c00104 	addi	r3,r2,4
 20040ec:	1885803a 	cmpltu	r2,r3,r2
 20040f0:	88a3883a 	add	r17,r17,r2
 20040f4:	8880202c 	andhi	r2,r17,128
 20040f8:	10001c26 	beq	r2,zero,200416c <__muldf3+0x820>
 20040fc:	3027883a 	mov	r19,r6
 2004100:	00800044 	movi	r2,1
 2004104:	0021883a 	mov	r16,zero
 2004108:	002d883a 	mov	r22,zero
 200410c:	003e6e06 	br	2003ac8 <__muldf3+0x17c>
 2004110:	4007883a 	mov	r3,r8
 2004114:	003f9706 	br	2003f74 <__muldf3+0x628>
 2004118:	017ff844 	movi	r5,-31
 200411c:	2885c83a 	sub	r2,r5,r2
 2004120:	888ad83a 	srl	r5,r17,r2
 2004124:	00800804 	movi	r2,32
 2004128:	18801a26 	beq	r3,r2,2004194 <__muldf3+0x848>
 200412c:	01001004 	movi	r4,64
 2004130:	20c7c83a 	sub	r3,r4,r3
 2004134:	88e2983a 	sll	r17,r17,r3
 2004138:	8ca4b03a 	or	r18,r17,r18
 200413c:	9004c03a 	cmpne	r2,r18,zero
 2004140:	2884b03a 	or	r2,r5,r2
 2004144:	144001cc 	andi	r17,r2,7
 2004148:	88000d1e 	bne	r17,zero,2004180 <__muldf3+0x834>
 200414c:	0021883a 	mov	r16,zero
 2004150:	102cd0fa 	srli	r22,r2,3
 2004154:	3027883a 	mov	r19,r6
 2004158:	0005883a 	mov	r2,zero
 200415c:	b46cb03a 	or	r22,r22,r17
 2004160:	003e5906 	br	2003ac8 <__muldf3+0x17c>
 2004164:	1007883a 	mov	r3,r2
 2004168:	0023883a 	mov	r17,zero
 200416c:	8820927a 	slli	r16,r17,9
 2004170:	1805883a 	mov	r2,r3
 2004174:	8822977a 	slli	r17,r17,29
 2004178:	8020d33a 	srli	r16,r16,12
 200417c:	003ff406 	br	2004150 <__muldf3+0x804>
 2004180:	10c003cc 	andi	r3,r2,15
 2004184:	01000104 	movi	r4,4
 2004188:	193ff626 	beq	r3,r4,2004164 <__muldf3+0x818>
 200418c:	0023883a 	mov	r17,zero
 2004190:	003fd506 	br	20040e8 <__muldf3+0x79c>
 2004194:	0023883a 	mov	r17,zero
 2004198:	003fe706 	br	2004138 <__muldf3+0x7ec>
 200419c:	00800434 	movhi	r2,16
 20041a0:	8c000234 	orhi	r16,r17,8
 20041a4:	10bfffc4 	addi	r2,r2,-1
 20041a8:	3027883a 	mov	r19,r6
 20041ac:	80a0703a 	and	r16,r16,r2
 20041b0:	902d883a 	mov	r22,r18
 20041b4:	003eac06 	br	2003c68 <__muldf3+0x31c>

020041b8 <__extendsfdf2>:
 20041b8:	200ad5fa 	srli	r5,r4,23
 20041bc:	defffd04 	addi	sp,sp,-12
 20041c0:	dc400115 	stw	r17,4(sp)
 20041c4:	29403fcc 	andi	r5,r5,255
 20041c8:	29800044 	addi	r6,r5,1
 20041cc:	04402034 	movhi	r17,128
 20041d0:	dc000015 	stw	r16,0(sp)
 20041d4:	8c7fffc4 	addi	r17,r17,-1
 20041d8:	dfc00215 	stw	ra,8(sp)
 20041dc:	31803fcc 	andi	r6,r6,255
 20041e0:	00800044 	movi	r2,1
 20041e4:	8922703a 	and	r17,r17,r4
 20041e8:	2020d7fa 	srli	r16,r4,31
 20041ec:	1180110e 	bge	r2,r6,2004234 <__extendsfdf2+0x7c>
 20041f0:	880cd0fa 	srli	r6,r17,3
 20041f4:	8822977a 	slli	r17,r17,29
 20041f8:	2940e004 	addi	r5,r5,896
 20041fc:	2941ffcc 	andi	r5,r5,2047
 2004200:	2804953a 	slli	r2,r5,20
 2004204:	01400434 	movhi	r5,16
 2004208:	800697fa 	slli	r3,r16,31
 200420c:	297fffc4 	addi	r5,r5,-1
 2004210:	314a703a 	and	r5,r6,r5
 2004214:	288ab03a 	or	r5,r5,r2
 2004218:	28c6b03a 	or	r3,r5,r3
 200421c:	8805883a 	mov	r2,r17
 2004220:	dfc00217 	ldw	ra,8(sp)
 2004224:	dc400117 	ldw	r17,4(sp)
 2004228:	dc000017 	ldw	r16,0(sp)
 200422c:	dec00304 	addi	sp,sp,12
 2004230:	f800283a 	ret
 2004234:	2800111e 	bne	r5,zero,200427c <__extendsfdf2+0xc4>
 2004238:	88001c26 	beq	r17,zero,20042ac <__extendsfdf2+0xf4>
 200423c:	8809883a 	mov	r4,r17
 2004240:	20044700 	call	2004470 <__clzsi2>
 2004244:	00c00284 	movi	r3,10
 2004248:	18801b16 	blt	r3,r2,20042b8 <__extendsfdf2+0x100>
 200424c:	018002c4 	movi	r6,11
 2004250:	308dc83a 	sub	r6,r6,r2
 2004254:	11000544 	addi	r4,r2,21
 2004258:	8986d83a 	srl	r3,r17,r6
 200425c:	8922983a 	sll	r17,r17,r4
 2004260:	0180e244 	movi	r6,905
 2004264:	01400434 	movhi	r5,16
 2004268:	3085c83a 	sub	r2,r6,r2
 200426c:	297fffc4 	addi	r5,r5,-1
 2004270:	194c703a 	and	r6,r3,r5
 2004274:	1141ffcc 	andi	r5,r2,2047
 2004278:	003fe006 	br	20041fc <__extendsfdf2+0x44>
 200427c:	88000826 	beq	r17,zero,20042a0 <__extendsfdf2+0xe8>
 2004280:	880cd0fa 	srli	r6,r17,3
 2004284:	00800434 	movhi	r2,16
 2004288:	10bfffc4 	addi	r2,r2,-1
 200428c:	31800234 	orhi	r6,r6,8
 2004290:	8822977a 	slli	r17,r17,29
 2004294:	308c703a 	and	r6,r6,r2
 2004298:	0141ffc4 	movi	r5,2047
 200429c:	003fd706 	br	20041fc <__extendsfdf2+0x44>
 20042a0:	0141ffc4 	movi	r5,2047
 20042a4:	000d883a 	mov	r6,zero
 20042a8:	003fd406 	br	20041fc <__extendsfdf2+0x44>
 20042ac:	000b883a 	mov	r5,zero
 20042b0:	000d883a 	mov	r6,zero
 20042b4:	003fd106 	br	20041fc <__extendsfdf2+0x44>
 20042b8:	11bffd44 	addi	r6,r2,-11
 20042bc:	8986983a 	sll	r3,r17,r6
 20042c0:	0023883a 	mov	r17,zero
 20042c4:	003fe606 	br	2004260 <__extendsfdf2+0xa8>

020042c8 <__truncdfsf2>:
 20042c8:	2810d53a 	srli	r8,r5,20
 20042cc:	01c00434 	movhi	r7,16
 20042d0:	39ffffc4 	addi	r7,r7,-1
 20042d4:	29ce703a 	and	r7,r5,r7
 20042d8:	4201ffcc 	andi	r8,r8,2047
 20042dc:	380e90fa 	slli	r7,r7,3
 20042e0:	200cd77a 	srli	r6,r4,29
 20042e4:	42400044 	addi	r9,r8,1
 20042e8:	4a41ffcc 	andi	r9,r9,2047
 20042ec:	00c00044 	movi	r3,1
 20042f0:	280ad7fa 	srli	r5,r5,31
 20042f4:	31ceb03a 	or	r7,r6,r7
 20042f8:	200490fa 	slli	r2,r4,3
 20042fc:	1a40230e 	bge	r3,r9,200438c <__truncdfsf2+0xc4>
 2004300:	40ff2004 	addi	r3,r8,-896
 2004304:	01803f84 	movi	r6,254
 2004308:	30c01516 	blt	r6,r3,2004360 <__truncdfsf2+0x98>
 200430c:	00c0380e 	bge	zero,r3,20043f0 <__truncdfsf2+0x128>
 2004310:	200c91ba 	slli	r6,r4,6
 2004314:	380e90fa 	slli	r7,r7,3
 2004318:	1004d77a 	srli	r2,r2,29
 200431c:	300cc03a 	cmpne	r6,r6,zero
 2004320:	31ccb03a 	or	r6,r6,r7
 2004324:	308cb03a 	or	r6,r6,r2
 2004328:	308001cc 	andi	r2,r6,7
 200432c:	10000426 	beq	r2,zero,2004340 <__truncdfsf2+0x78>
 2004330:	308003cc 	andi	r2,r6,15
 2004334:	01000104 	movi	r4,4
 2004338:	11000126 	beq	r2,r4,2004340 <__truncdfsf2+0x78>
 200433c:	31800104 	addi	r6,r6,4
 2004340:	3081002c 	andhi	r2,r6,1024
 2004344:	10001626 	beq	r2,zero,20043a0 <__truncdfsf2+0xd8>
 2004348:	18c00044 	addi	r3,r3,1
 200434c:	00803fc4 	movi	r2,255
 2004350:	18800326 	beq	r3,r2,2004360 <__truncdfsf2+0x98>
 2004354:	300c91ba 	slli	r6,r6,6
 2004358:	300cd27a 	srli	r6,r6,9
 200435c:	00000206 	br	2004368 <__truncdfsf2+0xa0>
 2004360:	00ffffc4 	movi	r3,-1
 2004364:	000d883a 	mov	r6,zero
 2004368:	18c03fcc 	andi	r3,r3,255
 200436c:	180895fa 	slli	r4,r3,23
 2004370:	00c02034 	movhi	r3,128
 2004374:	280a97fa 	slli	r5,r5,31
 2004378:	18ffffc4 	addi	r3,r3,-1
 200437c:	30c6703a 	and	r3,r6,r3
 2004380:	1906b03a 	or	r3,r3,r4
 2004384:	1944b03a 	or	r2,r3,r5
 2004388:	f800283a 	ret
 200438c:	40000b1e 	bne	r8,zero,20043bc <__truncdfsf2+0xf4>
 2004390:	388cb03a 	or	r6,r7,r2
 2004394:	0007883a 	mov	r3,zero
 2004398:	30000426 	beq	r6,zero,20043ac <__truncdfsf2+0xe4>
 200439c:	01800144 	movi	r6,5
 20043a0:	00803fc4 	movi	r2,255
 20043a4:	300cd0fa 	srli	r6,r6,3
 20043a8:	18800a26 	beq	r3,r2,20043d4 <__truncdfsf2+0x10c>
 20043ac:	00802034 	movhi	r2,128
 20043b0:	10bfffc4 	addi	r2,r2,-1
 20043b4:	308c703a 	and	r6,r6,r2
 20043b8:	003feb06 	br	2004368 <__truncdfsf2+0xa0>
 20043bc:	3888b03a 	or	r4,r7,r2
 20043c0:	203fe726 	beq	r4,zero,2004360 <__truncdfsf2+0x98>
 20043c4:	380c90fa 	slli	r6,r7,3
 20043c8:	00c03fc4 	movi	r3,255
 20043cc:	31808034 	orhi	r6,r6,512
 20043d0:	003fd506 	br	2004328 <__truncdfsf2+0x60>
 20043d4:	303fe226 	beq	r6,zero,2004360 <__truncdfsf2+0x98>
 20043d8:	00802034 	movhi	r2,128
 20043dc:	31801034 	orhi	r6,r6,64
 20043e0:	10bfffc4 	addi	r2,r2,-1
 20043e4:	00ffffc4 	movi	r3,-1
 20043e8:	308c703a 	and	r6,r6,r2
 20043ec:	003fde06 	br	2004368 <__truncdfsf2+0xa0>
 20043f0:	013ffa44 	movi	r4,-23
 20043f4:	19000e16 	blt	r3,r4,2004430 <__truncdfsf2+0x168>
 20043f8:	01000784 	movi	r4,30
 20043fc:	20c9c83a 	sub	r4,r4,r3
 2004400:	018007c4 	movi	r6,31
 2004404:	39c02034 	orhi	r7,r7,128
 2004408:	31000b16 	blt	r6,r4,2004438 <__truncdfsf2+0x170>
 200440c:	423f2084 	addi	r8,r8,-894
 2004410:	120c983a 	sll	r6,r2,r8
 2004414:	3a0e983a 	sll	r7,r7,r8
 2004418:	1104d83a 	srl	r2,r2,r4
 200441c:	300cc03a 	cmpne	r6,r6,zero
 2004420:	31ceb03a 	or	r7,r6,r7
 2004424:	388cb03a 	or	r6,r7,r2
 2004428:	0007883a 	mov	r3,zero
 200442c:	003fbe06 	br	2004328 <__truncdfsf2+0x60>
 2004430:	0007883a 	mov	r3,zero
 2004434:	003fd906 	br	200439c <__truncdfsf2+0xd4>
 2004438:	01bfff84 	movi	r6,-2
 200443c:	30cdc83a 	sub	r6,r6,r3
 2004440:	00c00804 	movi	r3,32
 2004444:	398cd83a 	srl	r6,r7,r6
 2004448:	20c00726 	beq	r4,r3,2004468 <__truncdfsf2+0x1a0>
 200444c:	423f2884 	addi	r8,r8,-862
 2004450:	3a0e983a 	sll	r7,r7,r8
 2004454:	3884b03a 	or	r2,r7,r2
 2004458:	1004c03a 	cmpne	r2,r2,zero
 200445c:	118cb03a 	or	r6,r2,r6
 2004460:	0007883a 	mov	r3,zero
 2004464:	003fb006 	br	2004328 <__truncdfsf2+0x60>
 2004468:	000f883a 	mov	r7,zero
 200446c:	003ff906 	br	2004454 <__truncdfsf2+0x18c>

02004470 <__clzsi2>:
 2004470:	00bfffd4 	movui	r2,65535
 2004474:	11000536 	bltu	r2,r4,200448c <__clzsi2+0x1c>
 2004478:	00803fc4 	movi	r2,255
 200447c:	11000f36 	bltu	r2,r4,20044bc <__clzsi2+0x4c>
 2004480:	00800804 	movi	r2,32
 2004484:	0007883a 	mov	r3,zero
 2004488:	00000506 	br	20044a0 <__clzsi2+0x30>
 200448c:	00804034 	movhi	r2,256
 2004490:	10bfffc4 	addi	r2,r2,-1
 2004494:	11000c2e 	bgeu	r2,r4,20044c8 <__clzsi2+0x58>
 2004498:	00800204 	movi	r2,8
 200449c:	00c00604 	movi	r3,24
 20044a0:	20c8d83a 	srl	r4,r4,r3
 20044a4:	00c080b4 	movhi	r3,514
 20044a8:	18ed5084 	addi	r3,r3,-19134
 20044ac:	1909883a 	add	r4,r3,r4
 20044b0:	20c00003 	ldbu	r3,0(r4)
 20044b4:	10c5c83a 	sub	r2,r2,r3
 20044b8:	f800283a 	ret
 20044bc:	00800604 	movi	r2,24
 20044c0:	00c00204 	movi	r3,8
 20044c4:	003ff606 	br	20044a0 <__clzsi2+0x30>
 20044c8:	00800404 	movi	r2,16
 20044cc:	1007883a 	mov	r3,r2
 20044d0:	003ff306 	br	20044a0 <__clzsi2+0x30>

020044d4 <__divsi3>:
 20044d4:	20001b16 	blt	r4,zero,2004544 <__divsi3+0x70>
 20044d8:	000f883a 	mov	r7,zero
 20044dc:	28001616 	blt	r5,zero,2004538 <__divsi3+0x64>
 20044e0:	200d883a 	mov	r6,r4
 20044e4:	29001a2e 	bgeu	r5,r4,2004550 <__divsi3+0x7c>
 20044e8:	00800804 	movi	r2,32
 20044ec:	00c00044 	movi	r3,1
 20044f0:	00000106 	br	20044f8 <__divsi3+0x24>
 20044f4:	10000d26 	beq	r2,zero,200452c <__divsi3+0x58>
 20044f8:	294b883a 	add	r5,r5,r5
 20044fc:	10bfffc4 	addi	r2,r2,-1
 2004500:	18c7883a 	add	r3,r3,r3
 2004504:	293ffb36 	bltu	r5,r4,20044f4 <__divsi3+0x20>
 2004508:	0005883a 	mov	r2,zero
 200450c:	18000726 	beq	r3,zero,200452c <__divsi3+0x58>
 2004510:	0005883a 	mov	r2,zero
 2004514:	31400236 	bltu	r6,r5,2004520 <__divsi3+0x4c>
 2004518:	314dc83a 	sub	r6,r6,r5
 200451c:	10c4b03a 	or	r2,r2,r3
 2004520:	1806d07a 	srli	r3,r3,1
 2004524:	280ad07a 	srli	r5,r5,1
 2004528:	183ffa1e 	bne	r3,zero,2004514 <__divsi3+0x40>
 200452c:	38000126 	beq	r7,zero,2004534 <__divsi3+0x60>
 2004530:	0085c83a 	sub	r2,zero,r2
 2004534:	f800283a 	ret
 2004538:	014bc83a 	sub	r5,zero,r5
 200453c:	39c0005c 	xori	r7,r7,1
 2004540:	003fe706 	br	20044e0 <__divsi3+0xc>
 2004544:	0109c83a 	sub	r4,zero,r4
 2004548:	01c00044 	movi	r7,1
 200454c:	003fe306 	br	20044dc <__divsi3+0x8>
 2004550:	00c00044 	movi	r3,1
 2004554:	003fee06 	br	2004510 <__divsi3+0x3c>

02004558 <__modsi3>:
 2004558:	20001716 	blt	r4,zero,20045b8 <__modsi3+0x60>
 200455c:	000f883a 	mov	r7,zero
 2004560:	2005883a 	mov	r2,r4
 2004564:	28001216 	blt	r5,zero,20045b0 <__modsi3+0x58>
 2004568:	2900162e 	bgeu	r5,r4,20045c4 <__modsi3+0x6c>
 200456c:	01800804 	movi	r6,32
 2004570:	00c00044 	movi	r3,1
 2004574:	00000106 	br	200457c <__modsi3+0x24>
 2004578:	30000a26 	beq	r6,zero,20045a4 <__modsi3+0x4c>
 200457c:	294b883a 	add	r5,r5,r5
 2004580:	31bfffc4 	addi	r6,r6,-1
 2004584:	18c7883a 	add	r3,r3,r3
 2004588:	293ffb36 	bltu	r5,r4,2004578 <__modsi3+0x20>
 200458c:	18000526 	beq	r3,zero,20045a4 <__modsi3+0x4c>
 2004590:	1806d07a 	srli	r3,r3,1
 2004594:	11400136 	bltu	r2,r5,200459c <__modsi3+0x44>
 2004598:	1145c83a 	sub	r2,r2,r5
 200459c:	280ad07a 	srli	r5,r5,1
 20045a0:	183ffb1e 	bne	r3,zero,2004590 <__modsi3+0x38>
 20045a4:	38000126 	beq	r7,zero,20045ac <__modsi3+0x54>
 20045a8:	0085c83a 	sub	r2,zero,r2
 20045ac:	f800283a 	ret
 20045b0:	014bc83a 	sub	r5,zero,r5
 20045b4:	003fec06 	br	2004568 <__modsi3+0x10>
 20045b8:	0109c83a 	sub	r4,zero,r4
 20045bc:	01c00044 	movi	r7,1
 20045c0:	003fe706 	br	2004560 <__modsi3+0x8>
 20045c4:	00c00044 	movi	r3,1
 20045c8:	003ff106 	br	2004590 <__modsi3+0x38>

020045cc <__udivsi3>:
 20045cc:	200d883a 	mov	r6,r4
 20045d0:	2900152e 	bgeu	r5,r4,2004628 <__udivsi3+0x5c>
 20045d4:	28001416 	blt	r5,zero,2004628 <__udivsi3+0x5c>
 20045d8:	00800804 	movi	r2,32
 20045dc:	00c00044 	movi	r3,1
 20045e0:	00000206 	br	20045ec <__udivsi3+0x20>
 20045e4:	10000e26 	beq	r2,zero,2004620 <__udivsi3+0x54>
 20045e8:	28000516 	blt	r5,zero,2004600 <__udivsi3+0x34>
 20045ec:	294b883a 	add	r5,r5,r5
 20045f0:	10bfffc4 	addi	r2,r2,-1
 20045f4:	18c7883a 	add	r3,r3,r3
 20045f8:	293ffa36 	bltu	r5,r4,20045e4 <__udivsi3+0x18>
 20045fc:	18000826 	beq	r3,zero,2004620 <__udivsi3+0x54>
 2004600:	0005883a 	mov	r2,zero
 2004604:	31400236 	bltu	r6,r5,2004610 <__udivsi3+0x44>
 2004608:	314dc83a 	sub	r6,r6,r5
 200460c:	10c4b03a 	or	r2,r2,r3
 2004610:	1806d07a 	srli	r3,r3,1
 2004614:	280ad07a 	srli	r5,r5,1
 2004618:	183ffa1e 	bne	r3,zero,2004604 <__udivsi3+0x38>
 200461c:	f800283a 	ret
 2004620:	0005883a 	mov	r2,zero
 2004624:	f800283a 	ret
 2004628:	00c00044 	movi	r3,1
 200462c:	003ff406 	br	2004600 <__udivsi3+0x34>

02004630 <__umodsi3>:
 2004630:	2005883a 	mov	r2,r4
 2004634:	2900122e 	bgeu	r5,r4,2004680 <__umodsi3+0x50>
 2004638:	28001116 	blt	r5,zero,2004680 <__umodsi3+0x50>
 200463c:	01800804 	movi	r6,32
 2004640:	00c00044 	movi	r3,1
 2004644:	00000206 	br	2004650 <__umodsi3+0x20>
 2004648:	30000c26 	beq	r6,zero,200467c <__umodsi3+0x4c>
 200464c:	28000516 	blt	r5,zero,2004664 <__umodsi3+0x34>
 2004650:	294b883a 	add	r5,r5,r5
 2004654:	31bfffc4 	addi	r6,r6,-1
 2004658:	18c7883a 	add	r3,r3,r3
 200465c:	293ffa36 	bltu	r5,r4,2004648 <__umodsi3+0x18>
 2004660:	18000626 	beq	r3,zero,200467c <__umodsi3+0x4c>
 2004664:	1806d07a 	srli	r3,r3,1
 2004668:	11400136 	bltu	r2,r5,2004670 <__umodsi3+0x40>
 200466c:	1145c83a 	sub	r2,r2,r5
 2004670:	280ad07a 	srli	r5,r5,1
 2004674:	183ffb1e 	bne	r3,zero,2004664 <__umodsi3+0x34>
 2004678:	f800283a 	ret
 200467c:	f800283a 	ret
 2004680:	00c00044 	movi	r3,1
 2004684:	003ff706 	br	2004664 <__umodsi3+0x34>

02004688 <__errno>:
 2004688:	008080b4 	movhi	r2,514
 200468c:	10b50804 	addi	r2,r2,-11232
 2004690:	10800017 	ldw	r2,0(r2)
 2004694:	f800283a 	ret

02004698 <_printf_r>:
 2004698:	defffd04 	addi	sp,sp,-12
 200469c:	2805883a 	mov	r2,r5
 20046a0:	dfc00015 	stw	ra,0(sp)
 20046a4:	d9800115 	stw	r6,4(sp)
 20046a8:	d9c00215 	stw	r7,8(sp)
 20046ac:	21400217 	ldw	r5,8(r4)
 20046b0:	d9c00104 	addi	r7,sp,4
 20046b4:	100d883a 	mov	r6,r2
 20046b8:	20048700 	call	2004870 <___vfprintf_internal_r>
 20046bc:	dfc00017 	ldw	ra,0(sp)
 20046c0:	dec00304 	addi	sp,sp,12
 20046c4:	f800283a 	ret

020046c8 <printf>:
 20046c8:	defffc04 	addi	sp,sp,-16
 20046cc:	dfc00015 	stw	ra,0(sp)
 20046d0:	d9400115 	stw	r5,4(sp)
 20046d4:	d9800215 	stw	r6,8(sp)
 20046d8:	d9c00315 	stw	r7,12(sp)
 20046dc:	008080b4 	movhi	r2,514
 20046e0:	10b50804 	addi	r2,r2,-11232
 20046e4:	10800017 	ldw	r2,0(r2)
 20046e8:	200b883a 	mov	r5,r4
 20046ec:	d9800104 	addi	r6,sp,4
 20046f0:	11000217 	ldw	r4,8(r2)
 20046f4:	2006b4c0 	call	2006b4c <__vfprintf_internal>
 20046f8:	dfc00017 	ldw	ra,0(sp)
 20046fc:	dec00404 	addi	sp,sp,16
 2004700:	f800283a 	ret

02004704 <_puts_r>:
 2004704:	defff604 	addi	sp,sp,-40
 2004708:	dc000715 	stw	r16,28(sp)
 200470c:	2021883a 	mov	r16,r4
 2004710:	2809883a 	mov	r4,r5
 2004714:	dc400815 	stw	r17,32(sp)
 2004718:	dfc00915 	stw	ra,36(sp)
 200471c:	2823883a 	mov	r17,r5
 2004720:	20047d80 	call	20047d8 <strlen>
 2004724:	10c00044 	addi	r3,r2,1
 2004728:	d8800115 	stw	r2,4(sp)
 200472c:	008080b4 	movhi	r2,514
 2004730:	10ad9204 	addi	r2,r2,-18872
 2004734:	d8800215 	stw	r2,8(sp)
 2004738:	00800044 	movi	r2,1
 200473c:	d8800315 	stw	r2,12(sp)
 2004740:	00800084 	movi	r2,2
 2004744:	dc400015 	stw	r17,0(sp)
 2004748:	d8c00615 	stw	r3,24(sp)
 200474c:	dec00415 	stw	sp,16(sp)
 2004750:	d8800515 	stw	r2,20(sp)
 2004754:	80000226 	beq	r16,zero,2004760 <_puts_r+0x5c>
 2004758:	80800e17 	ldw	r2,56(r16)
 200475c:	10001426 	beq	r2,zero,20047b0 <_puts_r+0xac>
 2004760:	81400217 	ldw	r5,8(r16)
 2004764:	2880030b 	ldhu	r2,12(r5)
 2004768:	10c8000c 	andi	r3,r2,8192
 200476c:	1800061e 	bne	r3,zero,2004788 <_puts_r+0x84>
 2004770:	29001917 	ldw	r4,100(r5)
 2004774:	00f7ffc4 	movi	r3,-8193
 2004778:	10880014 	ori	r2,r2,8192
 200477c:	20c6703a 	and	r3,r4,r3
 2004780:	2880030d 	sth	r2,12(r5)
 2004784:	28c01915 	stw	r3,100(r5)
 2004788:	d9800404 	addi	r6,sp,16
 200478c:	8009883a 	mov	r4,r16
 2004790:	20090b40 	call	20090b4 <__sfvwrite_r>
 2004794:	1000091e 	bne	r2,zero,20047bc <_puts_r+0xb8>
 2004798:	00800284 	movi	r2,10
 200479c:	dfc00917 	ldw	ra,36(sp)
 20047a0:	dc400817 	ldw	r17,32(sp)
 20047a4:	dc000717 	ldw	r16,28(sp)
 20047a8:	dec00a04 	addi	sp,sp,40
 20047ac:	f800283a 	ret
 20047b0:	8009883a 	mov	r4,r16
 20047b4:	2008c300 	call	2008c30 <__sinit>
 20047b8:	003fe906 	br	2004760 <_puts_r+0x5c>
 20047bc:	00bfffc4 	movi	r2,-1
 20047c0:	003ff606 	br	200479c <_puts_r+0x98>

020047c4 <puts>:
 20047c4:	008080b4 	movhi	r2,514
 20047c8:	10b50804 	addi	r2,r2,-11232
 20047cc:	200b883a 	mov	r5,r4
 20047d0:	11000017 	ldw	r4,0(r2)
 20047d4:	20047041 	jmpi	2004704 <_puts_r>

020047d8 <strlen>:
 20047d8:	208000cc 	andi	r2,r4,3
 20047dc:	10002026 	beq	r2,zero,2004860 <strlen+0x88>
 20047e0:	20800007 	ldb	r2,0(r4)
 20047e4:	10002026 	beq	r2,zero,2004868 <strlen+0x90>
 20047e8:	2005883a 	mov	r2,r4
 20047ec:	00000206 	br	20047f8 <strlen+0x20>
 20047f0:	10c00007 	ldb	r3,0(r2)
 20047f4:	18001826 	beq	r3,zero,2004858 <strlen+0x80>
 20047f8:	10800044 	addi	r2,r2,1
 20047fc:	10c000cc 	andi	r3,r2,3
 2004800:	183ffb1e 	bne	r3,zero,20047f0 <strlen+0x18>
 2004804:	10c00017 	ldw	r3,0(r2)
 2004808:	01ffbff4 	movhi	r7,65279
 200480c:	39ffbfc4 	addi	r7,r7,-257
 2004810:	00ca303a 	nor	r5,zero,r3
 2004814:	01a02074 	movhi	r6,32897
 2004818:	19c7883a 	add	r3,r3,r7
 200481c:	31a02004 	addi	r6,r6,-32640
 2004820:	1946703a 	and	r3,r3,r5
 2004824:	1986703a 	and	r3,r3,r6
 2004828:	1800091e 	bne	r3,zero,2004850 <strlen+0x78>
 200482c:	10800104 	addi	r2,r2,4
 2004830:	10c00017 	ldw	r3,0(r2)
 2004834:	19cb883a 	add	r5,r3,r7
 2004838:	00c6303a 	nor	r3,zero,r3
 200483c:	28c6703a 	and	r3,r5,r3
 2004840:	1986703a 	and	r3,r3,r6
 2004844:	183ff926 	beq	r3,zero,200482c <strlen+0x54>
 2004848:	00000106 	br	2004850 <strlen+0x78>
 200484c:	10800044 	addi	r2,r2,1
 2004850:	10c00007 	ldb	r3,0(r2)
 2004854:	183ffd1e 	bne	r3,zero,200484c <strlen+0x74>
 2004858:	1105c83a 	sub	r2,r2,r4
 200485c:	f800283a 	ret
 2004860:	2005883a 	mov	r2,r4
 2004864:	003fe706 	br	2004804 <strlen+0x2c>
 2004868:	0005883a 	mov	r2,zero
 200486c:	f800283a 	ret

02004870 <___vfprintf_internal_r>:
 2004870:	deffb804 	addi	sp,sp,-288
 2004874:	dfc04715 	stw	ra,284(sp)
 2004878:	ddc04515 	stw	r23,276(sp)
 200487c:	dd404315 	stw	r21,268(sp)
 2004880:	d9002d15 	stw	r4,180(sp)
 2004884:	282f883a 	mov	r23,r5
 2004888:	302b883a 	mov	r21,r6
 200488c:	d9c02e15 	stw	r7,184(sp)
 2004890:	df004615 	stw	fp,280(sp)
 2004894:	dd804415 	stw	r22,272(sp)
 2004898:	dd004215 	stw	r20,264(sp)
 200489c:	dcc04115 	stw	r19,260(sp)
 20048a0:	dc804015 	stw	r18,256(sp)
 20048a4:	dc403f15 	stw	r17,252(sp)
 20048a8:	dc003e15 	stw	r16,248(sp)
 20048ac:	20097b00 	call	20097b0 <_localeconv_r>
 20048b0:	10800017 	ldw	r2,0(r2)
 20048b4:	1009883a 	mov	r4,r2
 20048b8:	d8803415 	stw	r2,208(sp)
 20048bc:	20047d80 	call	20047d8 <strlen>
 20048c0:	d8803715 	stw	r2,220(sp)
 20048c4:	d8802d17 	ldw	r2,180(sp)
 20048c8:	10000226 	beq	r2,zero,20048d4 <___vfprintf_internal_r+0x64>
 20048cc:	10800e17 	ldw	r2,56(r2)
 20048d0:	1000fb26 	beq	r2,zero,2004cc0 <___vfprintf_internal_r+0x450>
 20048d4:	b880030b 	ldhu	r2,12(r23)
 20048d8:	10c8000c 	andi	r3,r2,8192
 20048dc:	1800061e 	bne	r3,zero,20048f8 <___vfprintf_internal_r+0x88>
 20048e0:	b9001917 	ldw	r4,100(r23)
 20048e4:	00f7ffc4 	movi	r3,-8193
 20048e8:	10880014 	ori	r2,r2,8192
 20048ec:	20c6703a 	and	r3,r4,r3
 20048f0:	b880030d 	sth	r2,12(r23)
 20048f4:	b8c01915 	stw	r3,100(r23)
 20048f8:	10c0020c 	andi	r3,r2,8
 20048fc:	1800c326 	beq	r3,zero,2004c0c <___vfprintf_internal_r+0x39c>
 2004900:	b8c00417 	ldw	r3,16(r23)
 2004904:	1800c126 	beq	r3,zero,2004c0c <___vfprintf_internal_r+0x39c>
 2004908:	1080068c 	andi	r2,r2,26
 200490c:	00c00284 	movi	r3,10
 2004910:	10c0c626 	beq	r2,r3,2004c2c <___vfprintf_internal_r+0x3bc>
 2004914:	d8c00404 	addi	r3,sp,16
 2004918:	050080b4 	movhi	r20,514
 200491c:	d9001e04 	addi	r4,sp,120
 2004920:	a52da384 	addi	r20,r20,-18802
 2004924:	d8c01e15 	stw	r3,120(sp)
 2004928:	d8002015 	stw	zero,128(sp)
 200492c:	d8001f15 	stw	zero,124(sp)
 2004930:	d8003315 	stw	zero,204(sp)
 2004934:	d8003615 	stw	zero,216(sp)
 2004938:	d8003815 	stw	zero,224(sp)
 200493c:	1811883a 	mov	r8,r3
 2004940:	d8003915 	stw	zero,228(sp)
 2004944:	d8003a15 	stw	zero,232(sp)
 2004948:	d8002f15 	stw	zero,188(sp)
 200494c:	d9002815 	stw	r4,160(sp)
 2004950:	a8800007 	ldb	r2,0(r21)
 2004954:	10028b26 	beq	r2,zero,2005384 <___vfprintf_internal_r+0xb14>
 2004958:	00c00944 	movi	r3,37
 200495c:	a823883a 	mov	r17,r21
 2004960:	10c0021e 	bne	r2,r3,200496c <___vfprintf_internal_r+0xfc>
 2004964:	00001406 	br	20049b8 <___vfprintf_internal_r+0x148>
 2004968:	10c00326 	beq	r2,r3,2004978 <___vfprintf_internal_r+0x108>
 200496c:	8c400044 	addi	r17,r17,1
 2004970:	88800007 	ldb	r2,0(r17)
 2004974:	103ffc1e 	bne	r2,zero,2004968 <___vfprintf_internal_r+0xf8>
 2004978:	8d61c83a 	sub	r16,r17,r21
 200497c:	80000e26 	beq	r16,zero,20049b8 <___vfprintf_internal_r+0x148>
 2004980:	d8c02017 	ldw	r3,128(sp)
 2004984:	d8801f17 	ldw	r2,124(sp)
 2004988:	45400015 	stw	r21,0(r8)
 200498c:	1c07883a 	add	r3,r3,r16
 2004990:	10800044 	addi	r2,r2,1
 2004994:	d8c02015 	stw	r3,128(sp)
 2004998:	44000115 	stw	r16,4(r8)
 200499c:	d8801f15 	stw	r2,124(sp)
 20049a0:	00c001c4 	movi	r3,7
 20049a4:	1880a916 	blt	r3,r2,2004c4c <___vfprintf_internal_r+0x3dc>
 20049a8:	42000204 	addi	r8,r8,8
 20049ac:	d9402f17 	ldw	r5,188(sp)
 20049b0:	2c0b883a 	add	r5,r5,r16
 20049b4:	d9402f15 	stw	r5,188(sp)
 20049b8:	88800007 	ldb	r2,0(r17)
 20049bc:	1000aa26 	beq	r2,zero,2004c68 <___vfprintf_internal_r+0x3f8>
 20049c0:	8d400044 	addi	r21,r17,1
 20049c4:	8c400047 	ldb	r17,1(r17)
 20049c8:	0021883a 	mov	r16,zero
 20049cc:	00bfffc4 	movi	r2,-1
 20049d0:	0025883a 	mov	r18,zero
 20049d4:	dc002905 	stb	r16,164(sp)
 20049d8:	d8002785 	stb	zero,158(sp)
 20049dc:	d8002b05 	stb	zero,172(sp)
 20049e0:	d8802a15 	stw	r2,168(sp)
 20049e4:	d8003115 	stw	zero,196(sp)
 20049e8:	04c01604 	movi	r19,88
 20049ec:	05800244 	movi	r22,9
 20049f0:	9021883a 	mov	r16,r18
 20049f4:	4039883a 	mov	fp,r8
 20049f8:	ad400044 	addi	r21,r21,1
 20049fc:	88bff804 	addi	r2,r17,-32
 2004a00:	98833236 	bltu	r19,r2,20056cc <___vfprintf_internal_r+0xe5c>
 2004a04:	100490ba 	slli	r2,r2,2
 2004a08:	00c08034 	movhi	r3,512
 2004a0c:	18d28704 	addi	r3,r3,18972
 2004a10:	10c5883a 	add	r2,r2,r3
 2004a14:	10800017 	ldw	r2,0(r2)
 2004a18:	1000683a 	jmp	r2
 2004a1c:	020055c4 	movi	r8,343
 2004a20:	020056cc 	andi	r8,zero,347
 2004a24:	020056cc 	andi	r8,zero,347
 2004a28:	020055e4 	muli	r8,zero,343
 2004a2c:	020056cc 	andi	r8,zero,347
 2004a30:	020056cc 	andi	r8,zero,347
 2004a34:	020056cc 	andi	r8,zero,347
 2004a38:	020056cc 	andi	r8,zero,347
 2004a3c:	020056cc 	andi	r8,zero,347
 2004a40:	020056cc 	andi	r8,zero,347
 2004a44:	02004ccc 	andi	r8,zero,307
 2004a48:	020054d4 	movui	r8,339
 2004a4c:	020056cc 	andi	r8,zero,347
 2004a50:	02004b90 	cmplti	r8,zero,302
 2004a54:	02004cf0 	cmpltui	r8,zero,307
 2004a58:	020056cc 	andi	r8,zero,347
 2004a5c:	02004d40 	call	2004d4 <__alt_mem_mem_Nios_PI+0x4d4>
 2004a60:	02004d4c 	andi	r8,zero,309
 2004a64:	02004d4c 	andi	r8,zero,309
 2004a68:	02004d4c 	andi	r8,zero,309
 2004a6c:	02004d4c 	andi	r8,zero,309
 2004a70:	02004d4c 	andi	r8,zero,309
 2004a74:	02004d4c 	andi	r8,zero,309
 2004a78:	02004d4c 	andi	r8,zero,309
 2004a7c:	02004d4c 	andi	r8,zero,309
 2004a80:	02004d4c 	andi	r8,zero,309
 2004a84:	020056cc 	andi	r8,zero,347
 2004a88:	020056cc 	andi	r8,zero,347
 2004a8c:	020056cc 	andi	r8,zero,347
 2004a90:	020056cc 	andi	r8,zero,347
 2004a94:	020056cc 	andi	r8,zero,347
 2004a98:	020056cc 	andi	r8,zero,347
 2004a9c:	020056cc 	andi	r8,zero,347
 2004aa0:	020056cc 	andi	r8,zero,347
 2004aa4:	020056cc 	andi	r8,zero,347
 2004aa8:	020056cc 	andi	r8,zero,347
 2004aac:	02004d88 	cmpgei	r8,zero,310
 2004ab0:	02004e50 	cmplti	r8,zero,313
 2004ab4:	020056cc 	andi	r8,zero,347
 2004ab8:	02004e50 	cmplti	r8,zero,313
 2004abc:	020056cc 	andi	r8,zero,347
 2004ac0:	020056cc 	andi	r8,zero,347
 2004ac4:	020056cc 	andi	r8,zero,347
 2004ac8:	020056cc 	andi	r8,zero,347
 2004acc:	02004efc 	xorhi	r8,zero,315
 2004ad0:	020056cc 	andi	r8,zero,347
 2004ad4:	020056cc 	andi	r8,zero,347
 2004ad8:	02004f08 	cmpgei	r8,zero,316
 2004adc:	020056cc 	andi	r8,zero,347
 2004ae0:	020056cc 	andi	r8,zero,347
 2004ae4:	020056cc 	andi	r8,zero,347
 2004ae8:	020056cc 	andi	r8,zero,347
 2004aec:	020056cc 	andi	r8,zero,347
 2004af0:	0200538c 	andi	r8,zero,334
 2004af4:	020056cc 	andi	r8,zero,347
 2004af8:	020056cc 	andi	r8,zero,347
 2004afc:	020053f8 	rdprs	r8,zero,335
 2004b00:	020056cc 	andi	r8,zero,347
 2004b04:	020056cc 	andi	r8,zero,347
 2004b08:	020056cc 	andi	r8,zero,347
 2004b0c:	020056cc 	andi	r8,zero,347
 2004b10:	020056cc 	andi	r8,zero,347
 2004b14:	020056cc 	andi	r8,zero,347
 2004b18:	020056cc 	andi	r8,zero,347
 2004b1c:	020056cc 	andi	r8,zero,347
 2004b20:	020056cc 	andi	r8,zero,347
 2004b24:	020056cc 	andi	r8,zero,347
 2004b28:	02005670 	cmpltui	r8,zero,345
 2004b2c:	020055f0 	cmpltui	r8,zero,343
 2004b30:	02004e50 	cmplti	r8,zero,313
 2004b34:	02004e50 	cmplti	r8,zero,313
 2004b38:	02004e50 	cmplti	r8,zero,313
 2004b3c:	02005610 	cmplti	r8,zero,344
 2004b40:	020055f0 	cmpltui	r8,zero,343
 2004b44:	020056cc 	andi	r8,zero,347
 2004b48:	020056cc 	andi	r8,zero,347
 2004b4c:	0200561c 	xori	r8,zero,344
 2004b50:	020056cc 	andi	r8,zero,347
 2004b54:	02005630 	cmpltui	r8,zero,344
 2004b58:	020054b4 	movhi	r8,338
 2004b5c:	02004b9c 	xori	r8,zero,302
 2004b60:	020054ec 	andhi	r8,zero,339
 2004b64:	020056cc 	andi	r8,zero,347
 2004b68:	020054f8 	rdprs	r8,zero,339
 2004b6c:	020056cc 	andi	r8,zero,347
 2004b70:	0200555c 	xori	r8,zero,341
 2004b74:	020056cc 	andi	r8,zero,347
 2004b78:	020056cc 	andi	r8,zero,347
 2004b7c:	0200557c 	xorhi	r8,zero,341
 2004b80:	d8c03117 	ldw	r3,196(sp)
 2004b84:	d8802e15 	stw	r2,184(sp)
 2004b88:	00c7c83a 	sub	r3,zero,r3
 2004b8c:	d8c03115 	stw	r3,196(sp)
 2004b90:	84000114 	ori	r16,r16,4
 2004b94:	ac400007 	ldb	r17,0(r21)
 2004b98:	003f9706 	br	20049f8 <___vfprintf_internal_r+0x188>
 2004b9c:	00800c04 	movi	r2,48
 2004ba0:	d8802705 	stb	r2,156(sp)
 2004ba4:	00801e04 	movi	r2,120
 2004ba8:	d8802745 	stb	r2,157(sp)
 2004bac:	d9002a17 	ldw	r4,168(sp)
 2004bb0:	d8802e17 	ldw	r2,184(sp)
 2004bb4:	d8002785 	stb	zero,158(sp)
 2004bb8:	e011883a 	mov	r8,fp
 2004bbc:	10c00104 	addi	r3,r2,4
 2004bc0:	14c00017 	ldw	r19,0(r2)
 2004bc4:	002d883a 	mov	r22,zero
 2004bc8:	80800094 	ori	r2,r16,2
 2004bcc:	2002ca16 	blt	r4,zero,20056f8 <___vfprintf_internal_r+0xe88>
 2004bd0:	00bfdfc4 	movi	r2,-129
 2004bd4:	80a4703a 	and	r18,r16,r2
 2004bd8:	d8c02e15 	stw	r3,184(sp)
 2004bdc:	94800094 	ori	r18,r18,2
 2004be0:	9802b41e 	bne	r19,zero,20056b4 <___vfprintf_internal_r+0xe44>
 2004be4:	014080b4 	movhi	r5,514
 2004be8:	296d9c04 	addi	r5,r5,-18832
 2004bec:	d9403915 	stw	r5,228(sp)
 2004bf0:	04401e04 	movi	r17,120
 2004bf4:	d8802a17 	ldw	r2,168(sp)
 2004bf8:	0039883a 	mov	fp,zero
 2004bfc:	1001fa26 	beq	r2,zero,20053e8 <___vfprintf_internal_r+0xb78>
 2004c00:	0027883a 	mov	r19,zero
 2004c04:	002d883a 	mov	r22,zero
 2004c08:	00021906 	br	2005470 <___vfprintf_internal_r+0xc00>
 2004c0c:	d9002d17 	ldw	r4,180(sp)
 2004c10:	b80b883a 	mov	r5,r23
 2004c14:	2006c240 	call	2006c24 <__swsetup_r>
 2004c18:	1005dc1e 	bne	r2,zero,200638c <___vfprintf_internal_r+0x1b1c>
 2004c1c:	b880030b 	ldhu	r2,12(r23)
 2004c20:	00c00284 	movi	r3,10
 2004c24:	1080068c 	andi	r2,r2,26
 2004c28:	10ff3a1e 	bne	r2,r3,2004914 <___vfprintf_internal_r+0xa4>
 2004c2c:	b880038f 	ldh	r2,14(r23)
 2004c30:	103f3816 	blt	r2,zero,2004914 <___vfprintf_internal_r+0xa4>
 2004c34:	d9c02e17 	ldw	r7,184(sp)
 2004c38:	d9002d17 	ldw	r4,180(sp)
 2004c3c:	a80d883a 	mov	r6,r21
 2004c40:	b80b883a 	mov	r5,r23
 2004c44:	2006b680 	call	2006b68 <__sbprintf>
 2004c48:	00001106 	br	2004c90 <___vfprintf_internal_r+0x420>
 2004c4c:	d9002d17 	ldw	r4,180(sp)
 2004c50:	d9801e04 	addi	r6,sp,120
 2004c54:	b80b883a 	mov	r5,r23
 2004c58:	200c0500 	call	200c050 <__sprint_r>
 2004c5c:	1000081e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2004c60:	da000404 	addi	r8,sp,16
 2004c64:	003f5106 	br	20049ac <___vfprintf_internal_r+0x13c>
 2004c68:	d8802017 	ldw	r2,128(sp)
 2004c6c:	10000426 	beq	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2004c70:	d9002d17 	ldw	r4,180(sp)
 2004c74:	d9801e04 	addi	r6,sp,120
 2004c78:	b80b883a 	mov	r5,r23
 2004c7c:	200c0500 	call	200c050 <__sprint_r>
 2004c80:	b880030b 	ldhu	r2,12(r23)
 2004c84:	1080100c 	andi	r2,r2,64
 2004c88:	1005c01e 	bne	r2,zero,200638c <___vfprintf_internal_r+0x1b1c>
 2004c8c:	d8802f17 	ldw	r2,188(sp)
 2004c90:	dfc04717 	ldw	ra,284(sp)
 2004c94:	df004617 	ldw	fp,280(sp)
 2004c98:	ddc04517 	ldw	r23,276(sp)
 2004c9c:	dd804417 	ldw	r22,272(sp)
 2004ca0:	dd404317 	ldw	r21,268(sp)
 2004ca4:	dd004217 	ldw	r20,264(sp)
 2004ca8:	dcc04117 	ldw	r19,260(sp)
 2004cac:	dc804017 	ldw	r18,256(sp)
 2004cb0:	dc403f17 	ldw	r17,252(sp)
 2004cb4:	dc003e17 	ldw	r16,248(sp)
 2004cb8:	dec04804 	addi	sp,sp,288
 2004cbc:	f800283a 	ret
 2004cc0:	d9002d17 	ldw	r4,180(sp)
 2004cc4:	2008c300 	call	2008c30 <__sinit>
 2004cc8:	003f0206 	br	20048d4 <___vfprintf_internal_r+0x64>
 2004ccc:	d9002e17 	ldw	r4,184(sp)
 2004cd0:	d9402e17 	ldw	r5,184(sp)
 2004cd4:	21000017 	ldw	r4,0(r4)
 2004cd8:	28800104 	addi	r2,r5,4
 2004cdc:	d9003115 	stw	r4,196(sp)
 2004ce0:	203fa716 	blt	r4,zero,2004b80 <___vfprintf_internal_r+0x310>
 2004ce4:	d8802e15 	stw	r2,184(sp)
 2004ce8:	ac400007 	ldb	r17,0(r21)
 2004cec:	003f4206 	br	20049f8 <___vfprintf_internal_r+0x188>
 2004cf0:	ac400007 	ldb	r17,0(r21)
 2004cf4:	01000a84 	movi	r4,42
 2004cf8:	a8c00044 	addi	r3,r21,1
 2004cfc:	89075826 	beq	r17,r4,2006a60 <___vfprintf_internal_r+0x21f0>
 2004d00:	8cbff404 	addi	r18,r17,-48
 2004d04:	b486ae36 	bltu	r22,r18,20067c0 <___vfprintf_internal_r+0x1f50>
 2004d08:	0009883a 	mov	r4,zero
 2004d0c:	1823883a 	mov	r17,r3
 2004d10:	01400284 	movi	r5,10
 2004d14:	20019440 	call	2001944 <__mulsi3>
 2004d18:	88c00007 	ldb	r3,0(r17)
 2004d1c:	1489883a 	add	r4,r2,r18
 2004d20:	8d400044 	addi	r21,r17,1
 2004d24:	1cbff404 	addi	r18,r3,-48
 2004d28:	a823883a 	mov	r17,r21
 2004d2c:	b4bff82e 	bgeu	r22,r18,2004d10 <___vfprintf_internal_r+0x4a0>
 2004d30:	1823883a 	mov	r17,r3
 2004d34:	2005f616 	blt	r4,zero,2006510 <___vfprintf_internal_r+0x1ca0>
 2004d38:	d9002a15 	stw	r4,168(sp)
 2004d3c:	003f2f06 	br	20049fc <___vfprintf_internal_r+0x18c>
 2004d40:	84002014 	ori	r16,r16,128
 2004d44:	ac400007 	ldb	r17,0(r21)
 2004d48:	003f2b06 	br	20049f8 <___vfprintf_internal_r+0x188>
 2004d4c:	8cbff404 	addi	r18,r17,-48
 2004d50:	d8003115 	stw	zero,196(sp)
 2004d54:	0009883a 	mov	r4,zero
 2004d58:	a823883a 	mov	r17,r21
 2004d5c:	01400284 	movi	r5,10
 2004d60:	20019440 	call	2001944 <__mulsi3>
 2004d64:	88c00007 	ldb	r3,0(r17)
 2004d68:	9089883a 	add	r4,r18,r2
 2004d6c:	ad400044 	addi	r21,r21,1
 2004d70:	1cbff404 	addi	r18,r3,-48
 2004d74:	a823883a 	mov	r17,r21
 2004d78:	b4bff82e 	bgeu	r22,r18,2004d5c <___vfprintf_internal_r+0x4ec>
 2004d7c:	1823883a 	mov	r17,r3
 2004d80:	d9003115 	stw	r4,196(sp)
 2004d84:	003f1d06 	br	20049fc <___vfprintf_internal_r+0x18c>
 2004d88:	8025883a 	mov	r18,r16
 2004d8c:	dc002903 	ldbu	r16,164(sp)
 2004d90:	e011883a 	mov	r8,fp
 2004d94:	84003fcc 	andi	r16,r16,255
 2004d98:	8007531e 	bne	r16,zero,2006ae8 <___vfprintf_internal_r+0x2278>
 2004d9c:	94800414 	ori	r18,r18,16
 2004da0:	9080080c 	andi	r2,r18,32
 2004da4:	1003a326 	beq	r2,zero,2005c34 <___vfprintf_internal_r+0x13c4>
 2004da8:	d9002e17 	ldw	r4,184(sp)
 2004dac:	20800117 	ldw	r2,4(r4)
 2004db0:	24c00017 	ldw	r19,0(r4)
 2004db4:	21000204 	addi	r4,r4,8
 2004db8:	d9002e15 	stw	r4,184(sp)
 2004dbc:	102d883a 	mov	r22,r2
 2004dc0:	10047316 	blt	r2,zero,2005f90 <___vfprintf_internal_r+0x1720>
 2004dc4:	d9002a17 	ldw	r4,168(sp)
 2004dc8:	df002783 	ldbu	fp,158(sp)
 2004dcc:	2003e416 	blt	r4,zero,2005d60 <___vfprintf_internal_r+0x14f0>
 2004dd0:	00ffdfc4 	movi	r3,-129
 2004dd4:	9d84b03a 	or	r2,r19,r22
 2004dd8:	90e4703a 	and	r18,r18,r3
 2004ddc:	10018026 	beq	r2,zero,20053e0 <___vfprintf_internal_r+0xb70>
 2004de0:	b003ab26 	beq	r22,zero,2005c90 <___vfprintf_internal_r+0x1420>
 2004de4:	dc402915 	stw	r17,164(sp)
 2004de8:	dc001e04 	addi	r16,sp,120
 2004dec:	b023883a 	mov	r17,r22
 2004df0:	402d883a 	mov	r22,r8
 2004df4:	9809883a 	mov	r4,r19
 2004df8:	880b883a 	mov	r5,r17
 2004dfc:	01800284 	movi	r6,10
 2004e00:	000f883a 	mov	r7,zero
 2004e04:	200e5940 	call	200e594 <__umoddi3>
 2004e08:	10800c04 	addi	r2,r2,48
 2004e0c:	843fffc4 	addi	r16,r16,-1
 2004e10:	9809883a 	mov	r4,r19
 2004e14:	880b883a 	mov	r5,r17
 2004e18:	80800005 	stb	r2,0(r16)
 2004e1c:	01800284 	movi	r6,10
 2004e20:	000f883a 	mov	r7,zero
 2004e24:	200df980 	call	200df98 <__udivdi3>
 2004e28:	1027883a 	mov	r19,r2
 2004e2c:	10c4b03a 	or	r2,r2,r3
 2004e30:	1823883a 	mov	r17,r3
 2004e34:	103fef1e 	bne	r2,zero,2004df4 <___vfprintf_internal_r+0x584>
 2004e38:	d8c02817 	ldw	r3,160(sp)
 2004e3c:	dc402917 	ldw	r17,164(sp)
 2004e40:	b011883a 	mov	r8,r22
 2004e44:	1c07c83a 	sub	r3,r3,r16
 2004e48:	d8c02b15 	stw	r3,172(sp)
 2004e4c:	00005f06 	br	2004fcc <___vfprintf_internal_r+0x75c>
 2004e50:	8025883a 	mov	r18,r16
 2004e54:	dc002903 	ldbu	r16,164(sp)
 2004e58:	e011883a 	mov	r8,fp
 2004e5c:	84003fcc 	andi	r16,r16,255
 2004e60:	80071e1e 	bne	r16,zero,2006adc <___vfprintf_internal_r+0x226c>
 2004e64:	9080020c 	andi	r2,r18,8
 2004e68:	1004af26 	beq	r2,zero,2006128 <___vfprintf_internal_r+0x18b8>
 2004e6c:	d9002e17 	ldw	r4,184(sp)
 2004e70:	d9402e17 	ldw	r5,184(sp)
 2004e74:	d8802e17 	ldw	r2,184(sp)
 2004e78:	21000017 	ldw	r4,0(r4)
 2004e7c:	29400117 	ldw	r5,4(r5)
 2004e80:	10800204 	addi	r2,r2,8
 2004e84:	d9003615 	stw	r4,216(sp)
 2004e88:	d9403815 	stw	r5,224(sp)
 2004e8c:	d8802e15 	stw	r2,184(sp)
 2004e90:	d9003617 	ldw	r4,216(sp)
 2004e94:	d9403817 	ldw	r5,224(sp)
 2004e98:	da003d15 	stw	r8,244(sp)
 2004e9c:	04000044 	movi	r16,1
 2004ea0:	200bc740 	call	200bc74 <__fpclassifyd>
 2004ea4:	da003d17 	ldw	r8,244(sp)
 2004ea8:	1404441e 	bne	r2,r16,2005fbc <___vfprintf_internal_r+0x174c>
 2004eac:	d9003617 	ldw	r4,216(sp)
 2004eb0:	d9403817 	ldw	r5,224(sp)
 2004eb4:	000d883a 	mov	r6,zero
 2004eb8:	000f883a 	mov	r7,zero
 2004ebc:	200f48c0 	call	200f48c <__ledf2>
 2004ec0:	da003d17 	ldw	r8,244(sp)
 2004ec4:	1005e316 	blt	r2,zero,2006654 <___vfprintf_internal_r+0x1de4>
 2004ec8:	df002783 	ldbu	fp,158(sp)
 2004ecc:	008011c4 	movi	r2,71
 2004ed0:	1445580e 	bge	r2,r17,2006434 <___vfprintf_internal_r+0x1bc4>
 2004ed4:	040080b4 	movhi	r16,514
 2004ed8:	842d9404 	addi	r16,r16,-18864
 2004edc:	00c000c4 	movi	r3,3
 2004ee0:	00bfdfc4 	movi	r2,-129
 2004ee4:	d8c02915 	stw	r3,164(sp)
 2004ee8:	90a4703a 	and	r18,r18,r2
 2004eec:	d8c02b15 	stw	r3,172(sp)
 2004ef0:	d8002a15 	stw	zero,168(sp)
 2004ef4:	d8003215 	stw	zero,200(sp)
 2004ef8:	00003a06 	br	2004fe4 <___vfprintf_internal_r+0x774>
 2004efc:	84000214 	ori	r16,r16,8
 2004f00:	ac400007 	ldb	r17,0(r21)
 2004f04:	003ebc06 	br	20049f8 <___vfprintf_internal_r+0x188>
 2004f08:	8025883a 	mov	r18,r16
 2004f0c:	dc002903 	ldbu	r16,164(sp)
 2004f10:	e011883a 	mov	r8,fp
 2004f14:	84003fcc 	andi	r16,r16,255
 2004f18:	8007001e 	bne	r16,zero,2006b1c <___vfprintf_internal_r+0x22ac>
 2004f1c:	94800414 	ori	r18,r18,16
 2004f20:	9080080c 	andi	r2,r18,32
 2004f24:	1002fa26 	beq	r2,zero,2005b10 <___vfprintf_internal_r+0x12a0>
 2004f28:	d9002e17 	ldw	r4,184(sp)
 2004f2c:	d9402a17 	ldw	r5,168(sp)
 2004f30:	d8002785 	stb	zero,158(sp)
 2004f34:	20800204 	addi	r2,r4,8
 2004f38:	24c00017 	ldw	r19,0(r4)
 2004f3c:	25800117 	ldw	r22,4(r4)
 2004f40:	2804b116 	blt	r5,zero,2006208 <___vfprintf_internal_r+0x1998>
 2004f44:	013fdfc4 	movi	r4,-129
 2004f48:	9d86b03a 	or	r3,r19,r22
 2004f4c:	d8802e15 	stw	r2,184(sp)
 2004f50:	9124703a 	and	r18,r18,r4
 2004f54:	1802fb1e 	bne	r3,zero,2005b44 <___vfprintf_internal_r+0x12d4>
 2004f58:	d8c02a17 	ldw	r3,168(sp)
 2004f5c:	0039883a 	mov	fp,zero
 2004f60:	1805e526 	beq	r3,zero,20066f8 <___vfprintf_internal_r+0x1e88>
 2004f64:	0027883a 	mov	r19,zero
 2004f68:	002d883a 	mov	r22,zero
 2004f6c:	dc001e04 	addi	r16,sp,120
 2004f70:	9806d0fa 	srli	r3,r19,3
 2004f74:	b008977a 	slli	r4,r22,29
 2004f78:	b02cd0fa 	srli	r22,r22,3
 2004f7c:	9cc001cc 	andi	r19,r19,7
 2004f80:	98800c04 	addi	r2,r19,48
 2004f84:	843fffc4 	addi	r16,r16,-1
 2004f88:	20e6b03a 	or	r19,r4,r3
 2004f8c:	80800005 	stb	r2,0(r16)
 2004f90:	9d86b03a 	or	r3,r19,r22
 2004f94:	183ff61e 	bne	r3,zero,2004f70 <___vfprintf_internal_r+0x700>
 2004f98:	90c0004c 	andi	r3,r18,1
 2004f9c:	18014126 	beq	r3,zero,20054a4 <___vfprintf_internal_r+0xc34>
 2004fa0:	10803fcc 	andi	r2,r2,255
 2004fa4:	1080201c 	xori	r2,r2,128
 2004fa8:	10bfe004 	addi	r2,r2,-128
 2004fac:	00c00c04 	movi	r3,48
 2004fb0:	10c13c26 	beq	r2,r3,20054a4 <___vfprintf_internal_r+0xc34>
 2004fb4:	80ffffc5 	stb	r3,-1(r16)
 2004fb8:	d8c02817 	ldw	r3,160(sp)
 2004fbc:	80bfffc4 	addi	r2,r16,-1
 2004fc0:	1021883a 	mov	r16,r2
 2004fc4:	1887c83a 	sub	r3,r3,r2
 2004fc8:	d8c02b15 	stw	r3,172(sp)
 2004fcc:	d8802b17 	ldw	r2,172(sp)
 2004fd0:	d9002a17 	ldw	r4,168(sp)
 2004fd4:	1100010e 	bge	r2,r4,2004fdc <___vfprintf_internal_r+0x76c>
 2004fd8:	2005883a 	mov	r2,r4
 2004fdc:	d8802915 	stw	r2,164(sp)
 2004fe0:	d8003215 	stw	zero,200(sp)
 2004fe4:	e7003fcc 	andi	fp,fp,255
 2004fe8:	e700201c 	xori	fp,fp,128
 2004fec:	e73fe004 	addi	fp,fp,-128
 2004ff0:	e0000326 	beq	fp,zero,2005000 <___vfprintf_internal_r+0x790>
 2004ff4:	d8c02917 	ldw	r3,164(sp)
 2004ff8:	18c00044 	addi	r3,r3,1
 2004ffc:	d8c02915 	stw	r3,164(sp)
 2005000:	90c0008c 	andi	r3,r18,2
 2005004:	d8c02c15 	stw	r3,176(sp)
 2005008:	18000326 	beq	r3,zero,2005018 <___vfprintf_internal_r+0x7a8>
 200500c:	d8c02917 	ldw	r3,164(sp)
 2005010:	18c00084 	addi	r3,r3,2
 2005014:	d8c02915 	stw	r3,164(sp)
 2005018:	90c0210c 	andi	r3,r18,132
 200501c:	d8c03015 	stw	r3,192(sp)
 2005020:	1801c51e 	bne	r3,zero,2005738 <___vfprintf_internal_r+0xec8>
 2005024:	d9003117 	ldw	r4,196(sp)
 2005028:	d8c02917 	ldw	r3,164(sp)
 200502c:	20e7c83a 	sub	r19,r4,r3
 2005030:	04c1c10e 	bge	zero,r19,2005738 <___vfprintf_internal_r+0xec8>
 2005034:	02400404 	movi	r9,16
 2005038:	d8c02017 	ldw	r3,128(sp)
 200503c:	d8801f17 	ldw	r2,124(sp)
 2005040:	4cc52f0e 	bge	r9,r19,2006500 <___vfprintf_internal_r+0x1c90>
 2005044:	014080b4 	movhi	r5,514
 2005048:	296da784 	addi	r5,r5,-18786
 200504c:	dc403b15 	stw	r17,236(sp)
 2005050:	d9403515 	stw	r5,212(sp)
 2005054:	9823883a 	mov	r17,r19
 2005058:	482d883a 	mov	r22,r9
 200505c:	9027883a 	mov	r19,r18
 2005060:	070001c4 	movi	fp,7
 2005064:	8025883a 	mov	r18,r16
 2005068:	dc002d17 	ldw	r16,180(sp)
 200506c:	00000306 	br	200507c <___vfprintf_internal_r+0x80c>
 2005070:	8c7ffc04 	addi	r17,r17,-16
 2005074:	42000204 	addi	r8,r8,8
 2005078:	b440130e 	bge	r22,r17,20050c8 <___vfprintf_internal_r+0x858>
 200507c:	010080b4 	movhi	r4,514
 2005080:	18c00404 	addi	r3,r3,16
 2005084:	10800044 	addi	r2,r2,1
 2005088:	212da784 	addi	r4,r4,-18786
 200508c:	41000015 	stw	r4,0(r8)
 2005090:	45800115 	stw	r22,4(r8)
 2005094:	d8c02015 	stw	r3,128(sp)
 2005098:	d8801f15 	stw	r2,124(sp)
 200509c:	e0bff40e 	bge	fp,r2,2005070 <___vfprintf_internal_r+0x800>
 20050a0:	d9801e04 	addi	r6,sp,120
 20050a4:	b80b883a 	mov	r5,r23
 20050a8:	8009883a 	mov	r4,r16
 20050ac:	200c0500 	call	200c050 <__sprint_r>
 20050b0:	103ef31e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 20050b4:	8c7ffc04 	addi	r17,r17,-16
 20050b8:	d8c02017 	ldw	r3,128(sp)
 20050bc:	d8801f17 	ldw	r2,124(sp)
 20050c0:	da000404 	addi	r8,sp,16
 20050c4:	b47fed16 	blt	r22,r17,200507c <___vfprintf_internal_r+0x80c>
 20050c8:	9021883a 	mov	r16,r18
 20050cc:	9825883a 	mov	r18,r19
 20050d0:	8827883a 	mov	r19,r17
 20050d4:	dc403b17 	ldw	r17,236(sp)
 20050d8:	d9403517 	ldw	r5,212(sp)
 20050dc:	98c7883a 	add	r3,r19,r3
 20050e0:	10800044 	addi	r2,r2,1
 20050e4:	41400015 	stw	r5,0(r8)
 20050e8:	44c00115 	stw	r19,4(r8)
 20050ec:	d8c02015 	stw	r3,128(sp)
 20050f0:	d8801f15 	stw	r2,124(sp)
 20050f4:	010001c4 	movi	r4,7
 20050f8:	2082c516 	blt	r4,r2,2005c10 <___vfprintf_internal_r+0x13a0>
 20050fc:	df002787 	ldb	fp,158(sp)
 2005100:	42000204 	addi	r8,r8,8
 2005104:	e0000c26 	beq	fp,zero,2005138 <___vfprintf_internal_r+0x8c8>
 2005108:	d8801f17 	ldw	r2,124(sp)
 200510c:	d9002784 	addi	r4,sp,158
 2005110:	18c00044 	addi	r3,r3,1
 2005114:	10800044 	addi	r2,r2,1
 2005118:	41000015 	stw	r4,0(r8)
 200511c:	01000044 	movi	r4,1
 2005120:	41000115 	stw	r4,4(r8)
 2005124:	d8c02015 	stw	r3,128(sp)
 2005128:	d8801f15 	stw	r2,124(sp)
 200512c:	010001c4 	movi	r4,7
 2005130:	20825e16 	blt	r4,r2,2005aac <___vfprintf_internal_r+0x123c>
 2005134:	42000204 	addi	r8,r8,8
 2005138:	d8802c17 	ldw	r2,176(sp)
 200513c:	10000c26 	beq	r2,zero,2005170 <___vfprintf_internal_r+0x900>
 2005140:	d8801f17 	ldw	r2,124(sp)
 2005144:	d9002704 	addi	r4,sp,156
 2005148:	18c00084 	addi	r3,r3,2
 200514c:	10800044 	addi	r2,r2,1
 2005150:	41000015 	stw	r4,0(r8)
 2005154:	01000084 	movi	r4,2
 2005158:	41000115 	stw	r4,4(r8)
 200515c:	d8c02015 	stw	r3,128(sp)
 2005160:	d8801f15 	stw	r2,124(sp)
 2005164:	010001c4 	movi	r4,7
 2005168:	20825816 	blt	r4,r2,2005acc <___vfprintf_internal_r+0x125c>
 200516c:	42000204 	addi	r8,r8,8
 2005170:	d9003017 	ldw	r4,192(sp)
 2005174:	00802004 	movi	r2,128
 2005178:	2081bb26 	beq	r4,r2,2005868 <___vfprintf_internal_r+0xff8>
 200517c:	d9402a17 	ldw	r5,168(sp)
 2005180:	d8802b17 	ldw	r2,172(sp)
 2005184:	28adc83a 	sub	r22,r5,r2
 2005188:	0580310e 	bge	zero,r22,2005250 <___vfprintf_internal_r+0x9e0>
 200518c:	07000404 	movi	fp,16
 2005190:	d8801f17 	ldw	r2,124(sp)
 2005194:	e584360e 	bge	fp,r22,2006270 <___vfprintf_internal_r+0x1a00>
 2005198:	014080b4 	movhi	r5,514
 200519c:	296da384 	addi	r5,r5,-18802
 20051a0:	dc402a15 	stw	r17,168(sp)
 20051a4:	d9402c15 	stw	r5,176(sp)
 20051a8:	b023883a 	mov	r17,r22
 20051ac:	04c001c4 	movi	r19,7
 20051b0:	a82d883a 	mov	r22,r21
 20051b4:	902b883a 	mov	r21,r18
 20051b8:	8025883a 	mov	r18,r16
 20051bc:	dc002d17 	ldw	r16,180(sp)
 20051c0:	00000306 	br	20051d0 <___vfprintf_internal_r+0x960>
 20051c4:	8c7ffc04 	addi	r17,r17,-16
 20051c8:	42000204 	addi	r8,r8,8
 20051cc:	e440110e 	bge	fp,r17,2005214 <___vfprintf_internal_r+0x9a4>
 20051d0:	18c00404 	addi	r3,r3,16
 20051d4:	10800044 	addi	r2,r2,1
 20051d8:	45000015 	stw	r20,0(r8)
 20051dc:	47000115 	stw	fp,4(r8)
 20051e0:	d8c02015 	stw	r3,128(sp)
 20051e4:	d8801f15 	stw	r2,124(sp)
 20051e8:	98bff60e 	bge	r19,r2,20051c4 <___vfprintf_internal_r+0x954>
 20051ec:	d9801e04 	addi	r6,sp,120
 20051f0:	b80b883a 	mov	r5,r23
 20051f4:	8009883a 	mov	r4,r16
 20051f8:	200c0500 	call	200c050 <__sprint_r>
 20051fc:	103ea01e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005200:	8c7ffc04 	addi	r17,r17,-16
 2005204:	d8c02017 	ldw	r3,128(sp)
 2005208:	d8801f17 	ldw	r2,124(sp)
 200520c:	da000404 	addi	r8,sp,16
 2005210:	e47fef16 	blt	fp,r17,20051d0 <___vfprintf_internal_r+0x960>
 2005214:	9021883a 	mov	r16,r18
 2005218:	a825883a 	mov	r18,r21
 200521c:	b02b883a 	mov	r21,r22
 2005220:	882d883a 	mov	r22,r17
 2005224:	dc402a17 	ldw	r17,168(sp)
 2005228:	d9002c17 	ldw	r4,176(sp)
 200522c:	1d87883a 	add	r3,r3,r22
 2005230:	10800044 	addi	r2,r2,1
 2005234:	41000015 	stw	r4,0(r8)
 2005238:	45800115 	stw	r22,4(r8)
 200523c:	d8c02015 	stw	r3,128(sp)
 2005240:	d8801f15 	stw	r2,124(sp)
 2005244:	010001c4 	movi	r4,7
 2005248:	20821016 	blt	r4,r2,2005a8c <___vfprintf_internal_r+0x121c>
 200524c:	42000204 	addi	r8,r8,8
 2005250:	9080400c 	andi	r2,r18,256
 2005254:	10013a1e 	bne	r2,zero,2005740 <___vfprintf_internal_r+0xed0>
 2005258:	d9402b17 	ldw	r5,172(sp)
 200525c:	d8801f17 	ldw	r2,124(sp)
 2005260:	44000015 	stw	r16,0(r8)
 2005264:	1947883a 	add	r3,r3,r5
 2005268:	10800044 	addi	r2,r2,1
 200526c:	41400115 	stw	r5,4(r8)
 2005270:	d8c02015 	stw	r3,128(sp)
 2005274:	d8801f15 	stw	r2,124(sp)
 2005278:	010001c4 	movi	r4,7
 200527c:	2081f516 	blt	r4,r2,2005a54 <___vfprintf_internal_r+0x11e4>
 2005280:	42000204 	addi	r8,r8,8
 2005284:	9480010c 	andi	r18,r18,4
 2005288:	90003226 	beq	r18,zero,2005354 <___vfprintf_internal_r+0xae4>
 200528c:	d9403117 	ldw	r5,196(sp)
 2005290:	d8802917 	ldw	r2,164(sp)
 2005294:	28a1c83a 	sub	r16,r5,r2
 2005298:	04002e0e 	bge	zero,r16,2005354 <___vfprintf_internal_r+0xae4>
 200529c:	04400404 	movi	r17,16
 20052a0:	d8801f17 	ldw	r2,124(sp)
 20052a4:	8c04c40e 	bge	r17,r16,20065b8 <___vfprintf_internal_r+0x1d48>
 20052a8:	014080b4 	movhi	r5,514
 20052ac:	296da784 	addi	r5,r5,-18786
 20052b0:	d9403515 	stw	r5,212(sp)
 20052b4:	048001c4 	movi	r18,7
 20052b8:	dcc02d17 	ldw	r19,180(sp)
 20052bc:	00000306 	br	20052cc <___vfprintf_internal_r+0xa5c>
 20052c0:	843ffc04 	addi	r16,r16,-16
 20052c4:	42000204 	addi	r8,r8,8
 20052c8:	8c00130e 	bge	r17,r16,2005318 <___vfprintf_internal_r+0xaa8>
 20052cc:	010080b4 	movhi	r4,514
 20052d0:	18c00404 	addi	r3,r3,16
 20052d4:	10800044 	addi	r2,r2,1
 20052d8:	212da784 	addi	r4,r4,-18786
 20052dc:	41000015 	stw	r4,0(r8)
 20052e0:	44400115 	stw	r17,4(r8)
 20052e4:	d8c02015 	stw	r3,128(sp)
 20052e8:	d8801f15 	stw	r2,124(sp)
 20052ec:	90bff40e 	bge	r18,r2,20052c0 <___vfprintf_internal_r+0xa50>
 20052f0:	d9801e04 	addi	r6,sp,120
 20052f4:	b80b883a 	mov	r5,r23
 20052f8:	9809883a 	mov	r4,r19
 20052fc:	200c0500 	call	200c050 <__sprint_r>
 2005300:	103e5f1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005304:	843ffc04 	addi	r16,r16,-16
 2005308:	d8c02017 	ldw	r3,128(sp)
 200530c:	d8801f17 	ldw	r2,124(sp)
 2005310:	da000404 	addi	r8,sp,16
 2005314:	8c3fed16 	blt	r17,r16,20052cc <___vfprintf_internal_r+0xa5c>
 2005318:	d9403517 	ldw	r5,212(sp)
 200531c:	1c07883a 	add	r3,r3,r16
 2005320:	10800044 	addi	r2,r2,1
 2005324:	41400015 	stw	r5,0(r8)
 2005328:	44000115 	stw	r16,4(r8)
 200532c:	d8c02015 	stw	r3,128(sp)
 2005330:	d8801f15 	stw	r2,124(sp)
 2005334:	010001c4 	movi	r4,7
 2005338:	2080060e 	bge	r4,r2,2005354 <___vfprintf_internal_r+0xae4>
 200533c:	d9002d17 	ldw	r4,180(sp)
 2005340:	d9801e04 	addi	r6,sp,120
 2005344:	b80b883a 	mov	r5,r23
 2005348:	200c0500 	call	200c050 <__sprint_r>
 200534c:	103e4c1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005350:	d8c02017 	ldw	r3,128(sp)
 2005354:	d8803117 	ldw	r2,196(sp)
 2005358:	d9002917 	ldw	r4,164(sp)
 200535c:	1100010e 	bge	r2,r4,2005364 <___vfprintf_internal_r+0xaf4>
 2005360:	2005883a 	mov	r2,r4
 2005364:	d9402f17 	ldw	r5,188(sp)
 2005368:	288b883a 	add	r5,r5,r2
 200536c:	d9402f15 	stw	r5,188(sp)
 2005370:	1801c01e 	bne	r3,zero,2005a74 <___vfprintf_internal_r+0x1204>
 2005374:	a8800007 	ldb	r2,0(r21)
 2005378:	d8001f15 	stw	zero,124(sp)
 200537c:	da000404 	addi	r8,sp,16
 2005380:	103d751e 	bne	r2,zero,2004958 <___vfprintf_internal_r+0xe8>
 2005384:	a823883a 	mov	r17,r21
 2005388:	003d8b06 	br	20049b8 <___vfprintf_internal_r+0x148>
 200538c:	8025883a 	mov	r18,r16
 2005390:	dc002903 	ldbu	r16,164(sp)
 2005394:	e011883a 	mov	r8,fp
 2005398:	84003fcc 	andi	r16,r16,255
 200539c:	8005e51e 	bne	r16,zero,2006b34 <___vfprintf_internal_r+0x22c4>
 20053a0:	94800414 	ori	r18,r18,16
 20053a4:	9080080c 	andi	r2,r18,32
 20053a8:	10022b26 	beq	r2,zero,2005c58 <___vfprintf_internal_r+0x13e8>
 20053ac:	d9002e17 	ldw	r4,184(sp)
 20053b0:	d9402a17 	ldw	r5,168(sp)
 20053b4:	d8002785 	stb	zero,158(sp)
 20053b8:	20c00204 	addi	r3,r4,8
 20053bc:	24c00017 	ldw	r19,0(r4)
 20053c0:	25800117 	ldw	r22,4(r4)
 20053c4:	28042e16 	blt	r5,zero,2006480 <___vfprintf_internal_r+0x1c10>
 20053c8:	013fdfc4 	movi	r4,-129
 20053cc:	9d84b03a 	or	r2,r19,r22
 20053d0:	d8c02e15 	stw	r3,184(sp)
 20053d4:	9124703a 	and	r18,r18,r4
 20053d8:	0039883a 	mov	fp,zero
 20053dc:	103e801e 	bne	r2,zero,2004de0 <___vfprintf_internal_r+0x570>
 20053e0:	d9002a17 	ldw	r4,168(sp)
 20053e4:	2002e01e 	bne	r4,zero,2005f68 <___vfprintf_internal_r+0x16f8>
 20053e8:	d8002a15 	stw	zero,168(sp)
 20053ec:	d8002b15 	stw	zero,172(sp)
 20053f0:	dc001e04 	addi	r16,sp,120
 20053f4:	003ef506 	br	2004fcc <___vfprintf_internal_r+0x75c>
 20053f8:	8025883a 	mov	r18,r16
 20053fc:	dc002903 	ldbu	r16,164(sp)
 2005400:	e011883a 	mov	r8,fp
 2005404:	84003fcc 	andi	r16,r16,255
 2005408:	8005ba1e 	bne	r16,zero,2006af4 <___vfprintf_internal_r+0x2284>
 200540c:	010080b4 	movhi	r4,514
 2005410:	212d9704 	addi	r4,r4,-18852
 2005414:	d9003915 	stw	r4,228(sp)
 2005418:	9080080c 	andi	r2,r18,32
 200541c:	10006126 	beq	r2,zero,20055a4 <___vfprintf_internal_r+0xd34>
 2005420:	d9402e17 	ldw	r5,184(sp)
 2005424:	2cc00017 	ldw	r19,0(r5)
 2005428:	2d800117 	ldw	r22,4(r5)
 200542c:	29400204 	addi	r5,r5,8
 2005430:	d9402e15 	stw	r5,184(sp)
 2005434:	9080004c 	andi	r2,r18,1
 2005438:	1001ac26 	beq	r2,zero,2005aec <___vfprintf_internal_r+0x127c>
 200543c:	9d84b03a 	or	r2,r19,r22
 2005440:	10038526 	beq	r2,zero,2006258 <___vfprintf_internal_r+0x19e8>
 2005444:	d8c02a17 	ldw	r3,168(sp)
 2005448:	00800c04 	movi	r2,48
 200544c:	d8802705 	stb	r2,156(sp)
 2005450:	dc402745 	stb	r17,157(sp)
 2005454:	d8002785 	stb	zero,158(sp)
 2005458:	90800094 	ori	r2,r18,2
 200545c:	18047916 	blt	r3,zero,2006644 <___vfprintf_internal_r+0x1dd4>
 2005460:	00bfdfc4 	movi	r2,-129
 2005464:	90a4703a 	and	r18,r18,r2
 2005468:	94800094 	ori	r18,r18,2
 200546c:	0039883a 	mov	fp,zero
 2005470:	d9003917 	ldw	r4,228(sp)
 2005474:	dc001e04 	addi	r16,sp,120
 2005478:	988003cc 	andi	r2,r19,15
 200547c:	b006973a 	slli	r3,r22,28
 2005480:	2085883a 	add	r2,r4,r2
 2005484:	9826d13a 	srli	r19,r19,4
 2005488:	10800003 	ldbu	r2,0(r2)
 200548c:	b02cd13a 	srli	r22,r22,4
 2005490:	843fffc4 	addi	r16,r16,-1
 2005494:	1ce6b03a 	or	r19,r3,r19
 2005498:	80800005 	stb	r2,0(r16)
 200549c:	9d84b03a 	or	r2,r19,r22
 20054a0:	103ff51e 	bne	r2,zero,2005478 <___vfprintf_internal_r+0xc08>
 20054a4:	d8c02817 	ldw	r3,160(sp)
 20054a8:	1c07c83a 	sub	r3,r3,r16
 20054ac:	d8c02b15 	stw	r3,172(sp)
 20054b0:	003ec606 	br	2004fcc <___vfprintf_internal_r+0x75c>
 20054b4:	8025883a 	mov	r18,r16
 20054b8:	dc002903 	ldbu	r16,164(sp)
 20054bc:	e011883a 	mov	r8,fp
 20054c0:	84003fcc 	andi	r16,r16,255
 20054c4:	803e9626 	beq	r16,zero,2004f20 <___vfprintf_internal_r+0x6b0>
 20054c8:	d8c02b03 	ldbu	r3,172(sp)
 20054cc:	d8c02785 	stb	r3,158(sp)
 20054d0:	003e9306 	br	2004f20 <___vfprintf_internal_r+0x6b0>
 20054d4:	00c00044 	movi	r3,1
 20054d8:	d8c02905 	stb	r3,164(sp)
 20054dc:	00c00ac4 	movi	r3,43
 20054e0:	d8c02b05 	stb	r3,172(sp)
 20054e4:	ac400007 	ldb	r17,0(r21)
 20054e8:	003d4306 	br	20049f8 <___vfprintf_internal_r+0x188>
 20054ec:	84000814 	ori	r16,r16,32
 20054f0:	ac400007 	ldb	r17,0(r21)
 20054f4:	003d4006 	br	20049f8 <___vfprintf_internal_r+0x188>
 20054f8:	d8802e17 	ldw	r2,184(sp)
 20054fc:	8025883a 	mov	r18,r16
 2005500:	d8002785 	stb	zero,158(sp)
 2005504:	14000017 	ldw	r16,0(r2)
 2005508:	e011883a 	mov	r8,fp
 200550c:	14c00104 	addi	r19,r2,4
 2005510:	80042d26 	beq	r16,zero,20065c8 <___vfprintf_internal_r+0x1d58>
 2005514:	d8c02a17 	ldw	r3,168(sp)
 2005518:	1803e416 	blt	r3,zero,20064ac <___vfprintf_internal_r+0x1c3c>
 200551c:	180d883a 	mov	r6,r3
 2005520:	000b883a 	mov	r5,zero
 2005524:	8009883a 	mov	r4,r16
 2005528:	df003d15 	stw	fp,244(sp)
 200552c:	200a1a80 	call	200a1a8 <memchr>
 2005530:	da003d17 	ldw	r8,244(sp)
 2005534:	10046826 	beq	r2,zero,20066d8 <___vfprintf_internal_r+0x1e68>
 2005538:	1405c83a 	sub	r2,r2,r16
 200553c:	d8802b15 	stw	r2,172(sp)
 2005540:	1003e016 	blt	r2,zero,20064c4 <___vfprintf_internal_r+0x1c54>
 2005544:	df002783 	ldbu	fp,158(sp)
 2005548:	d8802915 	stw	r2,164(sp)
 200554c:	dcc02e15 	stw	r19,184(sp)
 2005550:	d8002a15 	stw	zero,168(sp)
 2005554:	d8003215 	stw	zero,200(sp)
 2005558:	003ea206 	br	2004fe4 <___vfprintf_internal_r+0x774>
 200555c:	8025883a 	mov	r18,r16
 2005560:	dc002903 	ldbu	r16,164(sp)
 2005564:	e011883a 	mov	r8,fp
 2005568:	84003fcc 	andi	r16,r16,255
 200556c:	803f8d26 	beq	r16,zero,20053a4 <___vfprintf_internal_r+0xb34>
 2005570:	d8c02b03 	ldbu	r3,172(sp)
 2005574:	d8c02785 	stb	r3,158(sp)
 2005578:	003f8a06 	br	20053a4 <___vfprintf_internal_r+0xb34>
 200557c:	8025883a 	mov	r18,r16
 2005580:	dc002903 	ldbu	r16,164(sp)
 2005584:	e011883a 	mov	r8,fp
 2005588:	84003fcc 	andi	r16,r16,255
 200558c:	8005661e 	bne	r16,zero,2006b28 <___vfprintf_internal_r+0x22b8>
 2005590:	010080b4 	movhi	r4,514
 2005594:	212d9c04 	addi	r4,r4,-18832
 2005598:	d9003915 	stw	r4,228(sp)
 200559c:	9080080c 	andi	r2,r18,32
 20055a0:	103f9f1e 	bne	r2,zero,2005420 <___vfprintf_internal_r+0xbb0>
 20055a4:	9080040c 	andi	r2,r18,16
 20055a8:	1002eb26 	beq	r2,zero,2006158 <___vfprintf_internal_r+0x18e8>
 20055ac:	d8802e17 	ldw	r2,184(sp)
 20055b0:	002d883a 	mov	r22,zero
 20055b4:	14c00017 	ldw	r19,0(r2)
 20055b8:	10800104 	addi	r2,r2,4
 20055bc:	d8802e15 	stw	r2,184(sp)
 20055c0:	003f9c06 	br	2005434 <___vfprintf_internal_r+0xbc4>
 20055c4:	d8802b07 	ldb	r2,172(sp)
 20055c8:	1002e11e 	bne	r2,zero,2006150 <___vfprintf_internal_r+0x18e0>
 20055cc:	00c00044 	movi	r3,1
 20055d0:	d8c02905 	stb	r3,164(sp)
 20055d4:	00c00804 	movi	r3,32
 20055d8:	d8c02b05 	stb	r3,172(sp)
 20055dc:	ac400007 	ldb	r17,0(r21)
 20055e0:	003d0506 	br	20049f8 <___vfprintf_internal_r+0x188>
 20055e4:	84000054 	ori	r16,r16,1
 20055e8:	ac400007 	ldb	r17,0(r21)
 20055ec:	003d0206 	br	20049f8 <___vfprintf_internal_r+0x188>
 20055f0:	8025883a 	mov	r18,r16
 20055f4:	dc002903 	ldbu	r16,164(sp)
 20055f8:	e011883a 	mov	r8,fp
 20055fc:	84003fcc 	andi	r16,r16,255
 2005600:	803de726 	beq	r16,zero,2004da0 <___vfprintf_internal_r+0x530>
 2005604:	d8c02b03 	ldbu	r3,172(sp)
 2005608:	d8c02785 	stb	r3,158(sp)
 200560c:	003de406 	br	2004da0 <___vfprintf_internal_r+0x530>
 2005610:	84001014 	ori	r16,r16,64
 2005614:	ac400007 	ldb	r17,0(r21)
 2005618:	003cf706 	br	20049f8 <___vfprintf_internal_r+0x188>
 200561c:	ac400007 	ldb	r17,0(r21)
 2005620:	00801b04 	movi	r2,108
 2005624:	88838f26 	beq	r17,r2,2006464 <___vfprintf_internal_r+0x1bf4>
 2005628:	84000414 	ori	r16,r16,16
 200562c:	003cf206 	br	20049f8 <___vfprintf_internal_r+0x188>
 2005630:	8025883a 	mov	r18,r16
 2005634:	dc002903 	ldbu	r16,164(sp)
 2005638:	e011883a 	mov	r8,fp
 200563c:	84003fcc 	andi	r16,r16,255
 2005640:	80053f1e 	bne	r16,zero,2006b40 <___vfprintf_internal_r+0x22d0>
 2005644:	9080080c 	andi	r2,r18,32
 2005648:	1002d226 	beq	r2,zero,2006194 <___vfprintf_internal_r+0x1924>
 200564c:	d9002e17 	ldw	r4,184(sp)
 2005650:	d9402f17 	ldw	r5,188(sp)
 2005654:	20800017 	ldw	r2,0(r4)
 2005658:	2807d7fa 	srai	r3,r5,31
 200565c:	21000104 	addi	r4,r4,4
 2005660:	d9002e15 	stw	r4,184(sp)
 2005664:	11400015 	stw	r5,0(r2)
 2005668:	10c00115 	stw	r3,4(r2)
 200566c:	003cb806 	br	2004950 <___vfprintf_internal_r+0xe0>
 2005670:	d8c02e17 	ldw	r3,184(sp)
 2005674:	d9002e17 	ldw	r4,184(sp)
 2005678:	8025883a 	mov	r18,r16
 200567c:	18800017 	ldw	r2,0(r3)
 2005680:	21000104 	addi	r4,r4,4
 2005684:	00c00044 	movi	r3,1
 2005688:	e011883a 	mov	r8,fp
 200568c:	d8c02915 	stw	r3,164(sp)
 2005690:	d8002785 	stb	zero,158(sp)
 2005694:	d8801405 	stb	r2,80(sp)
 2005698:	d9002e15 	stw	r4,184(sp)
 200569c:	d8c02b15 	stw	r3,172(sp)
 20056a0:	d8002a15 	stw	zero,168(sp)
 20056a4:	d8003215 	stw	zero,200(sp)
 20056a8:	dc001404 	addi	r16,sp,80
 20056ac:	0039883a 	mov	fp,zero
 20056b0:	003e5306 	br	2005000 <___vfprintf_internal_r+0x790>
 20056b4:	010080b4 	movhi	r4,514
 20056b8:	212d9c04 	addi	r4,r4,-18832
 20056bc:	0039883a 	mov	fp,zero
 20056c0:	d9003915 	stw	r4,228(sp)
 20056c4:	04401e04 	movi	r17,120
 20056c8:	003f6906 	br	2005470 <___vfprintf_internal_r+0xc00>
 20056cc:	8025883a 	mov	r18,r16
 20056d0:	dc002903 	ldbu	r16,164(sp)
 20056d4:	e011883a 	mov	r8,fp
 20056d8:	84003fcc 	andi	r16,r16,255
 20056dc:	8005081e 	bne	r16,zero,2006b00 <___vfprintf_internal_r+0x2290>
 20056e0:	883d6126 	beq	r17,zero,2004c68 <___vfprintf_internal_r+0x3f8>
 20056e4:	00c00044 	movi	r3,1
 20056e8:	d8c02915 	stw	r3,164(sp)
 20056ec:	dc401405 	stb	r17,80(sp)
 20056f0:	d8002785 	stb	zero,158(sp)
 20056f4:	003fe906 	br	200569c <___vfprintf_internal_r+0xe2c>
 20056f8:	014080b4 	movhi	r5,514
 20056fc:	296d9c04 	addi	r5,r5,-18832
 2005700:	d9403915 	stw	r5,228(sp)
 2005704:	d8c02e15 	stw	r3,184(sp)
 2005708:	1025883a 	mov	r18,r2
 200570c:	04401e04 	movi	r17,120
 2005710:	9d84b03a 	or	r2,r19,r22
 2005714:	1000fc1e 	bne	r2,zero,2005b08 <___vfprintf_internal_r+0x1298>
 2005718:	0039883a 	mov	fp,zero
 200571c:	00800084 	movi	r2,2
 2005720:	10803fcc 	andi	r2,r2,255
 2005724:	00c00044 	movi	r3,1
 2005728:	10c20f26 	beq	r2,r3,2005f68 <___vfprintf_internal_r+0x16f8>
 200572c:	00c00084 	movi	r3,2
 2005730:	10fd3326 	beq	r2,r3,2004c00 <___vfprintf_internal_r+0x390>
 2005734:	003e0b06 	br	2004f64 <___vfprintf_internal_r+0x6f4>
 2005738:	d8c02017 	ldw	r3,128(sp)
 200573c:	003e7106 	br	2005104 <___vfprintf_internal_r+0x894>
 2005740:	00801944 	movi	r2,101
 2005744:	14407e0e 	bge	r2,r17,2005940 <___vfprintf_internal_r+0x10d0>
 2005748:	d9003617 	ldw	r4,216(sp)
 200574c:	d9403817 	ldw	r5,224(sp)
 2005750:	000d883a 	mov	r6,zero
 2005754:	000f883a 	mov	r7,zero
 2005758:	d8c03c15 	stw	r3,240(sp)
 200575c:	da003d15 	stw	r8,244(sp)
 2005760:	200f4040 	call	200f404 <__eqdf2>
 2005764:	d8c03c17 	ldw	r3,240(sp)
 2005768:	da003d17 	ldw	r8,244(sp)
 200576c:	1000f71e 	bne	r2,zero,2005b4c <___vfprintf_internal_r+0x12dc>
 2005770:	d8801f17 	ldw	r2,124(sp)
 2005774:	010080b4 	movhi	r4,514
 2005778:	212da304 	addi	r4,r4,-18804
 200577c:	18c00044 	addi	r3,r3,1
 2005780:	10800044 	addi	r2,r2,1
 2005784:	41000015 	stw	r4,0(r8)
 2005788:	01000044 	movi	r4,1
 200578c:	41000115 	stw	r4,4(r8)
 2005790:	d8c02015 	stw	r3,128(sp)
 2005794:	d8801f15 	stw	r2,124(sp)
 2005798:	010001c4 	movi	r4,7
 200579c:	2082b816 	blt	r4,r2,2006280 <___vfprintf_internal_r+0x1a10>
 20057a0:	42000204 	addi	r8,r8,8
 20057a4:	d8802617 	ldw	r2,152(sp)
 20057a8:	d9403317 	ldw	r5,204(sp)
 20057ac:	11400216 	blt	r2,r5,20057b8 <___vfprintf_internal_r+0xf48>
 20057b0:	9080004c 	andi	r2,r18,1
 20057b4:	103eb326 	beq	r2,zero,2005284 <___vfprintf_internal_r+0xa14>
 20057b8:	d8803717 	ldw	r2,220(sp)
 20057bc:	d9003417 	ldw	r4,208(sp)
 20057c0:	d9403717 	ldw	r5,220(sp)
 20057c4:	1887883a 	add	r3,r3,r2
 20057c8:	d8801f17 	ldw	r2,124(sp)
 20057cc:	41000015 	stw	r4,0(r8)
 20057d0:	41400115 	stw	r5,4(r8)
 20057d4:	10800044 	addi	r2,r2,1
 20057d8:	d8c02015 	stw	r3,128(sp)
 20057dc:	d8801f15 	stw	r2,124(sp)
 20057e0:	010001c4 	movi	r4,7
 20057e4:	20832916 	blt	r4,r2,200648c <___vfprintf_internal_r+0x1c1c>
 20057e8:	42000204 	addi	r8,r8,8
 20057ec:	d8803317 	ldw	r2,204(sp)
 20057f0:	143fffc4 	addi	r16,r2,-1
 20057f4:	043ea30e 	bge	zero,r16,2005284 <___vfprintf_internal_r+0xa14>
 20057f8:	04400404 	movi	r17,16
 20057fc:	d8801f17 	ldw	r2,124(sp)
 2005800:	8c00880e 	bge	r17,r16,2005a24 <___vfprintf_internal_r+0x11b4>
 2005804:	014080b4 	movhi	r5,514
 2005808:	296da384 	addi	r5,r5,-18802
 200580c:	d9402c15 	stw	r5,176(sp)
 2005810:	058001c4 	movi	r22,7
 2005814:	dcc02d17 	ldw	r19,180(sp)
 2005818:	00000306 	br	2005828 <___vfprintf_internal_r+0xfb8>
 200581c:	42000204 	addi	r8,r8,8
 2005820:	843ffc04 	addi	r16,r16,-16
 2005824:	8c00820e 	bge	r17,r16,2005a30 <___vfprintf_internal_r+0x11c0>
 2005828:	18c00404 	addi	r3,r3,16
 200582c:	10800044 	addi	r2,r2,1
 2005830:	45000015 	stw	r20,0(r8)
 2005834:	44400115 	stw	r17,4(r8)
 2005838:	d8c02015 	stw	r3,128(sp)
 200583c:	d8801f15 	stw	r2,124(sp)
 2005840:	b0bff60e 	bge	r22,r2,200581c <___vfprintf_internal_r+0xfac>
 2005844:	d9801e04 	addi	r6,sp,120
 2005848:	b80b883a 	mov	r5,r23
 200584c:	9809883a 	mov	r4,r19
 2005850:	200c0500 	call	200c050 <__sprint_r>
 2005854:	103d0a1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005858:	d8c02017 	ldw	r3,128(sp)
 200585c:	d8801f17 	ldw	r2,124(sp)
 2005860:	da000404 	addi	r8,sp,16
 2005864:	003fee06 	br	2005820 <___vfprintf_internal_r+0xfb0>
 2005868:	d9403117 	ldw	r5,196(sp)
 200586c:	d8802917 	ldw	r2,164(sp)
 2005870:	28adc83a 	sub	r22,r5,r2
 2005874:	05be410e 	bge	zero,r22,200517c <___vfprintf_internal_r+0x90c>
 2005878:	07000404 	movi	fp,16
 200587c:	d8801f17 	ldw	r2,124(sp)
 2005880:	e5838f0e 	bge	fp,r22,20066c0 <___vfprintf_internal_r+0x1e50>
 2005884:	014080b4 	movhi	r5,514
 2005888:	296da384 	addi	r5,r5,-18802
 200588c:	dc403015 	stw	r17,192(sp)
 2005890:	d9402c15 	stw	r5,176(sp)
 2005894:	b023883a 	mov	r17,r22
 2005898:	04c001c4 	movi	r19,7
 200589c:	a82d883a 	mov	r22,r21
 20058a0:	902b883a 	mov	r21,r18
 20058a4:	8025883a 	mov	r18,r16
 20058a8:	dc002d17 	ldw	r16,180(sp)
 20058ac:	00000306 	br	20058bc <___vfprintf_internal_r+0x104c>
 20058b0:	8c7ffc04 	addi	r17,r17,-16
 20058b4:	42000204 	addi	r8,r8,8
 20058b8:	e440110e 	bge	fp,r17,2005900 <___vfprintf_internal_r+0x1090>
 20058bc:	18c00404 	addi	r3,r3,16
 20058c0:	10800044 	addi	r2,r2,1
 20058c4:	45000015 	stw	r20,0(r8)
 20058c8:	47000115 	stw	fp,4(r8)
 20058cc:	d8c02015 	stw	r3,128(sp)
 20058d0:	d8801f15 	stw	r2,124(sp)
 20058d4:	98bff60e 	bge	r19,r2,20058b0 <___vfprintf_internal_r+0x1040>
 20058d8:	d9801e04 	addi	r6,sp,120
 20058dc:	b80b883a 	mov	r5,r23
 20058e0:	8009883a 	mov	r4,r16
 20058e4:	200c0500 	call	200c050 <__sprint_r>
 20058e8:	103ce51e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 20058ec:	8c7ffc04 	addi	r17,r17,-16
 20058f0:	d8c02017 	ldw	r3,128(sp)
 20058f4:	d8801f17 	ldw	r2,124(sp)
 20058f8:	da000404 	addi	r8,sp,16
 20058fc:	e47fef16 	blt	fp,r17,20058bc <___vfprintf_internal_r+0x104c>
 2005900:	9021883a 	mov	r16,r18
 2005904:	a825883a 	mov	r18,r21
 2005908:	b02b883a 	mov	r21,r22
 200590c:	882d883a 	mov	r22,r17
 2005910:	dc403017 	ldw	r17,192(sp)
 2005914:	d9002c17 	ldw	r4,176(sp)
 2005918:	1d87883a 	add	r3,r3,r22
 200591c:	10800044 	addi	r2,r2,1
 2005920:	41000015 	stw	r4,0(r8)
 2005924:	45800115 	stw	r22,4(r8)
 2005928:	d8c02015 	stw	r3,128(sp)
 200592c:	d8801f15 	stw	r2,124(sp)
 2005930:	010001c4 	movi	r4,7
 2005934:	20818e16 	blt	r4,r2,2005f70 <___vfprintf_internal_r+0x1700>
 2005938:	42000204 	addi	r8,r8,8
 200593c:	003e0f06 	br	200517c <___vfprintf_internal_r+0x90c>
 2005940:	d9403317 	ldw	r5,204(sp)
 2005944:	00800044 	movi	r2,1
 2005948:	18c00044 	addi	r3,r3,1
 200594c:	1141530e 	bge	r2,r5,2005e9c <___vfprintf_internal_r+0x162c>
 2005950:	dc401f17 	ldw	r17,124(sp)
 2005954:	00800044 	movi	r2,1
 2005958:	40800115 	stw	r2,4(r8)
 200595c:	8c400044 	addi	r17,r17,1
 2005960:	44000015 	stw	r16,0(r8)
 2005964:	d8c02015 	stw	r3,128(sp)
 2005968:	dc401f15 	stw	r17,124(sp)
 200596c:	008001c4 	movi	r2,7
 2005970:	14416b16 	blt	r2,r17,2005f20 <___vfprintf_internal_r+0x16b0>
 2005974:	42000204 	addi	r8,r8,8
 2005978:	d8803717 	ldw	r2,220(sp)
 200597c:	d9003417 	ldw	r4,208(sp)
 2005980:	8c400044 	addi	r17,r17,1
 2005984:	10c7883a 	add	r3,r2,r3
 2005988:	40800115 	stw	r2,4(r8)
 200598c:	41000015 	stw	r4,0(r8)
 2005990:	d8c02015 	stw	r3,128(sp)
 2005994:	dc401f15 	stw	r17,124(sp)
 2005998:	008001c4 	movi	r2,7
 200599c:	14416916 	blt	r2,r17,2005f44 <___vfprintf_internal_r+0x16d4>
 20059a0:	45800204 	addi	r22,r8,8
 20059a4:	d9003617 	ldw	r4,216(sp)
 20059a8:	d9403817 	ldw	r5,224(sp)
 20059ac:	000d883a 	mov	r6,zero
 20059b0:	000f883a 	mov	r7,zero
 20059b4:	d8c03c15 	stw	r3,240(sp)
 20059b8:	200f4040 	call	200f404 <__eqdf2>
 20059bc:	d8c03c17 	ldw	r3,240(sp)
 20059c0:	1000bc26 	beq	r2,zero,2005cb4 <___vfprintf_internal_r+0x1444>
 20059c4:	d9403317 	ldw	r5,204(sp)
 20059c8:	84000044 	addi	r16,r16,1
 20059cc:	8c400044 	addi	r17,r17,1
 20059d0:	28bfffc4 	addi	r2,r5,-1
 20059d4:	1887883a 	add	r3,r3,r2
 20059d8:	b0800115 	stw	r2,4(r22)
 20059dc:	b4000015 	stw	r16,0(r22)
 20059e0:	d8c02015 	stw	r3,128(sp)
 20059e4:	dc401f15 	stw	r17,124(sp)
 20059e8:	008001c4 	movi	r2,7
 20059ec:	14414316 	blt	r2,r17,2005efc <___vfprintf_internal_r+0x168c>
 20059f0:	b5800204 	addi	r22,r22,8
 20059f4:	d9003a17 	ldw	r4,232(sp)
 20059f8:	df0022c4 	addi	fp,sp,139
 20059fc:	8c400044 	addi	r17,r17,1
 2005a00:	20c7883a 	add	r3,r4,r3
 2005a04:	b7000015 	stw	fp,0(r22)
 2005a08:	b1000115 	stw	r4,4(r22)
 2005a0c:	d8c02015 	stw	r3,128(sp)
 2005a10:	dc401f15 	stw	r17,124(sp)
 2005a14:	008001c4 	movi	r2,7
 2005a18:	14400e16 	blt	r2,r17,2005a54 <___vfprintf_internal_r+0x11e4>
 2005a1c:	b2000204 	addi	r8,r22,8
 2005a20:	003e1806 	br	2005284 <___vfprintf_internal_r+0xa14>
 2005a24:	010080b4 	movhi	r4,514
 2005a28:	212da384 	addi	r4,r4,-18802
 2005a2c:	d9002c15 	stw	r4,176(sp)
 2005a30:	d9002c17 	ldw	r4,176(sp)
 2005a34:	1c07883a 	add	r3,r3,r16
 2005a38:	44000115 	stw	r16,4(r8)
 2005a3c:	41000015 	stw	r4,0(r8)
 2005a40:	10800044 	addi	r2,r2,1
 2005a44:	d8c02015 	stw	r3,128(sp)
 2005a48:	d8801f15 	stw	r2,124(sp)
 2005a4c:	010001c4 	movi	r4,7
 2005a50:	20be0b0e 	bge	r4,r2,2005280 <___vfprintf_internal_r+0xa10>
 2005a54:	d9002d17 	ldw	r4,180(sp)
 2005a58:	d9801e04 	addi	r6,sp,120
 2005a5c:	b80b883a 	mov	r5,r23
 2005a60:	200c0500 	call	200c050 <__sprint_r>
 2005a64:	103c861e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005a68:	d8c02017 	ldw	r3,128(sp)
 2005a6c:	da000404 	addi	r8,sp,16
 2005a70:	003e0406 	br	2005284 <___vfprintf_internal_r+0xa14>
 2005a74:	d9002d17 	ldw	r4,180(sp)
 2005a78:	d9801e04 	addi	r6,sp,120
 2005a7c:	b80b883a 	mov	r5,r23
 2005a80:	200c0500 	call	200c050 <__sprint_r>
 2005a84:	103e3b26 	beq	r2,zero,2005374 <___vfprintf_internal_r+0xb04>
 2005a88:	003c7d06 	br	2004c80 <___vfprintf_internal_r+0x410>
 2005a8c:	d9002d17 	ldw	r4,180(sp)
 2005a90:	d9801e04 	addi	r6,sp,120
 2005a94:	b80b883a 	mov	r5,r23
 2005a98:	200c0500 	call	200c050 <__sprint_r>
 2005a9c:	103c781e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005aa0:	d8c02017 	ldw	r3,128(sp)
 2005aa4:	da000404 	addi	r8,sp,16
 2005aa8:	003de906 	br	2005250 <___vfprintf_internal_r+0x9e0>
 2005aac:	d9002d17 	ldw	r4,180(sp)
 2005ab0:	d9801e04 	addi	r6,sp,120
 2005ab4:	b80b883a 	mov	r5,r23
 2005ab8:	200c0500 	call	200c050 <__sprint_r>
 2005abc:	103c701e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005ac0:	d8c02017 	ldw	r3,128(sp)
 2005ac4:	da000404 	addi	r8,sp,16
 2005ac8:	003d9b06 	br	2005138 <___vfprintf_internal_r+0x8c8>
 2005acc:	d9002d17 	ldw	r4,180(sp)
 2005ad0:	d9801e04 	addi	r6,sp,120
 2005ad4:	b80b883a 	mov	r5,r23
 2005ad8:	200c0500 	call	200c050 <__sprint_r>
 2005adc:	103c681e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005ae0:	d8c02017 	ldw	r3,128(sp)
 2005ae4:	da000404 	addi	r8,sp,16
 2005ae8:	003da106 	br	2005170 <___vfprintf_internal_r+0x900>
 2005aec:	d9402a17 	ldw	r5,168(sp)
 2005af0:	d8002785 	stb	zero,158(sp)
 2005af4:	283f0616 	blt	r5,zero,2005710 <___vfprintf_internal_r+0xea0>
 2005af8:	00ffdfc4 	movi	r3,-129
 2005afc:	9d84b03a 	or	r2,r19,r22
 2005b00:	90e4703a 	and	r18,r18,r3
 2005b04:	103c3b26 	beq	r2,zero,2004bf4 <___vfprintf_internal_r+0x384>
 2005b08:	0039883a 	mov	fp,zero
 2005b0c:	003e5806 	br	2005470 <___vfprintf_internal_r+0xc00>
 2005b10:	9080040c 	andi	r2,r18,16
 2005b14:	1001b326 	beq	r2,zero,20061e4 <___vfprintf_internal_r+0x1974>
 2005b18:	d8c02e17 	ldw	r3,184(sp)
 2005b1c:	d9002a17 	ldw	r4,168(sp)
 2005b20:	d8002785 	stb	zero,158(sp)
 2005b24:	18800104 	addi	r2,r3,4
 2005b28:	1cc00017 	ldw	r19,0(r3)
 2005b2c:	002d883a 	mov	r22,zero
 2005b30:	2001b516 	blt	r4,zero,2006208 <___vfprintf_internal_r+0x1998>
 2005b34:	00ffdfc4 	movi	r3,-129
 2005b38:	d8802e15 	stw	r2,184(sp)
 2005b3c:	90e4703a 	and	r18,r18,r3
 2005b40:	983d0526 	beq	r19,zero,2004f58 <___vfprintf_internal_r+0x6e8>
 2005b44:	0039883a 	mov	fp,zero
 2005b48:	003d0806 	br	2004f6c <___vfprintf_internal_r+0x6fc>
 2005b4c:	dc402617 	ldw	r17,152(sp)
 2005b50:	0441d30e 	bge	zero,r17,20062a0 <___vfprintf_internal_r+0x1a30>
 2005b54:	dc403217 	ldw	r17,200(sp)
 2005b58:	d8803317 	ldw	r2,204(sp)
 2005b5c:	1440010e 	bge	r2,r17,2005b64 <___vfprintf_internal_r+0x12f4>
 2005b60:	1023883a 	mov	r17,r2
 2005b64:	04400a0e 	bge	zero,r17,2005b90 <___vfprintf_internal_r+0x1320>
 2005b68:	d8801f17 	ldw	r2,124(sp)
 2005b6c:	1c47883a 	add	r3,r3,r17
 2005b70:	44000015 	stw	r16,0(r8)
 2005b74:	10800044 	addi	r2,r2,1
 2005b78:	44400115 	stw	r17,4(r8)
 2005b7c:	d8c02015 	stw	r3,128(sp)
 2005b80:	d8801f15 	stw	r2,124(sp)
 2005b84:	010001c4 	movi	r4,7
 2005b88:	20826516 	blt	r4,r2,2006520 <___vfprintf_internal_r+0x1cb0>
 2005b8c:	42000204 	addi	r8,r8,8
 2005b90:	88026116 	blt	r17,zero,2006518 <___vfprintf_internal_r+0x1ca8>
 2005b94:	d9003217 	ldw	r4,200(sp)
 2005b98:	2463c83a 	sub	r17,r4,r17
 2005b9c:	04407b0e 	bge	zero,r17,2005d8c <___vfprintf_internal_r+0x151c>
 2005ba0:	05800404 	movi	r22,16
 2005ba4:	d8801f17 	ldw	r2,124(sp)
 2005ba8:	b4419d0e 	bge	r22,r17,2006220 <___vfprintf_internal_r+0x19b0>
 2005bac:	010080b4 	movhi	r4,514
 2005bb0:	212da384 	addi	r4,r4,-18802
 2005bb4:	d9002c15 	stw	r4,176(sp)
 2005bb8:	070001c4 	movi	fp,7
 2005bbc:	dcc02d17 	ldw	r19,180(sp)
 2005bc0:	00000306 	br	2005bd0 <___vfprintf_internal_r+0x1360>
 2005bc4:	42000204 	addi	r8,r8,8
 2005bc8:	8c7ffc04 	addi	r17,r17,-16
 2005bcc:	b441970e 	bge	r22,r17,200622c <___vfprintf_internal_r+0x19bc>
 2005bd0:	18c00404 	addi	r3,r3,16
 2005bd4:	10800044 	addi	r2,r2,1
 2005bd8:	45000015 	stw	r20,0(r8)
 2005bdc:	45800115 	stw	r22,4(r8)
 2005be0:	d8c02015 	stw	r3,128(sp)
 2005be4:	d8801f15 	stw	r2,124(sp)
 2005be8:	e0bff60e 	bge	fp,r2,2005bc4 <___vfprintf_internal_r+0x1354>
 2005bec:	d9801e04 	addi	r6,sp,120
 2005bf0:	b80b883a 	mov	r5,r23
 2005bf4:	9809883a 	mov	r4,r19
 2005bf8:	200c0500 	call	200c050 <__sprint_r>
 2005bfc:	103c201e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005c00:	d8c02017 	ldw	r3,128(sp)
 2005c04:	d8801f17 	ldw	r2,124(sp)
 2005c08:	da000404 	addi	r8,sp,16
 2005c0c:	003fee06 	br	2005bc8 <___vfprintf_internal_r+0x1358>
 2005c10:	d9002d17 	ldw	r4,180(sp)
 2005c14:	d9801e04 	addi	r6,sp,120
 2005c18:	b80b883a 	mov	r5,r23
 2005c1c:	200c0500 	call	200c050 <__sprint_r>
 2005c20:	103c171e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005c24:	d8c02017 	ldw	r3,128(sp)
 2005c28:	df002787 	ldb	fp,158(sp)
 2005c2c:	da000404 	addi	r8,sp,16
 2005c30:	003d3406 	br	2005104 <___vfprintf_internal_r+0x894>
 2005c34:	9080040c 	andi	r2,r18,16
 2005c38:	10016126 	beq	r2,zero,20061c0 <___vfprintf_internal_r+0x1950>
 2005c3c:	d9402e17 	ldw	r5,184(sp)
 2005c40:	2cc00017 	ldw	r19,0(r5)
 2005c44:	29400104 	addi	r5,r5,4
 2005c48:	d9402e15 	stw	r5,184(sp)
 2005c4c:	982dd7fa 	srai	r22,r19,31
 2005c50:	b005883a 	mov	r2,r22
 2005c54:	003c5a06 	br	2004dc0 <___vfprintf_internal_r+0x550>
 2005c58:	9080040c 	andi	r2,r18,16
 2005c5c:	10003526 	beq	r2,zero,2005d34 <___vfprintf_internal_r+0x14c4>
 2005c60:	d8c02e17 	ldw	r3,184(sp)
 2005c64:	d9002a17 	ldw	r4,168(sp)
 2005c68:	d8002785 	stb	zero,158(sp)
 2005c6c:	18800104 	addi	r2,r3,4
 2005c70:	1cc00017 	ldw	r19,0(r3)
 2005c74:	002d883a 	mov	r22,zero
 2005c78:	20003716 	blt	r4,zero,2005d58 <___vfprintf_internal_r+0x14e8>
 2005c7c:	00ffdfc4 	movi	r3,-129
 2005c80:	d8802e15 	stw	r2,184(sp)
 2005c84:	90e4703a 	and	r18,r18,r3
 2005c88:	0039883a 	mov	fp,zero
 2005c8c:	983dd426 	beq	r19,zero,20053e0 <___vfprintf_internal_r+0xb70>
 2005c90:	00800244 	movi	r2,9
 2005c94:	14fc5336 	bltu	r2,r19,2004de4 <___vfprintf_internal_r+0x574>
 2005c98:	d8c02817 	ldw	r3,160(sp)
 2005c9c:	dc001dc4 	addi	r16,sp,119
 2005ca0:	9cc00c04 	addi	r19,r19,48
 2005ca4:	1c07c83a 	sub	r3,r3,r16
 2005ca8:	dcc01dc5 	stb	r19,119(sp)
 2005cac:	d8c02b15 	stw	r3,172(sp)
 2005cb0:	003cc606 	br	2004fcc <___vfprintf_internal_r+0x75c>
 2005cb4:	d8803317 	ldw	r2,204(sp)
 2005cb8:	143fffc4 	addi	r16,r2,-1
 2005cbc:	043f4d0e 	bge	zero,r16,20059f4 <___vfprintf_internal_r+0x1184>
 2005cc0:	07000404 	movi	fp,16
 2005cc4:	e400810e 	bge	fp,r16,2005ecc <___vfprintf_internal_r+0x165c>
 2005cc8:	014080b4 	movhi	r5,514
 2005ccc:	296da384 	addi	r5,r5,-18802
 2005cd0:	d9402c15 	stw	r5,176(sp)
 2005cd4:	01c001c4 	movi	r7,7
 2005cd8:	dcc02d17 	ldw	r19,180(sp)
 2005cdc:	00000306 	br	2005cec <___vfprintf_internal_r+0x147c>
 2005ce0:	b5800204 	addi	r22,r22,8
 2005ce4:	843ffc04 	addi	r16,r16,-16
 2005ce8:	e4007b0e 	bge	fp,r16,2005ed8 <___vfprintf_internal_r+0x1668>
 2005cec:	18c00404 	addi	r3,r3,16
 2005cf0:	8c400044 	addi	r17,r17,1
 2005cf4:	b5000015 	stw	r20,0(r22)
 2005cf8:	b7000115 	stw	fp,4(r22)
 2005cfc:	d8c02015 	stw	r3,128(sp)
 2005d00:	dc401f15 	stw	r17,124(sp)
 2005d04:	3c7ff60e 	bge	r7,r17,2005ce0 <___vfprintf_internal_r+0x1470>
 2005d08:	d9801e04 	addi	r6,sp,120
 2005d0c:	b80b883a 	mov	r5,r23
 2005d10:	9809883a 	mov	r4,r19
 2005d14:	d9c03c15 	stw	r7,240(sp)
 2005d18:	200c0500 	call	200c050 <__sprint_r>
 2005d1c:	d9c03c17 	ldw	r7,240(sp)
 2005d20:	103bd71e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005d24:	d8c02017 	ldw	r3,128(sp)
 2005d28:	dc401f17 	ldw	r17,124(sp)
 2005d2c:	dd800404 	addi	r22,sp,16
 2005d30:	003fec06 	br	2005ce4 <___vfprintf_internal_r+0x1474>
 2005d34:	9080100c 	andi	r2,r18,64
 2005d38:	d8002785 	stb	zero,158(sp)
 2005d3c:	10010e26 	beq	r2,zero,2006178 <___vfprintf_internal_r+0x1908>
 2005d40:	d9402e17 	ldw	r5,184(sp)
 2005d44:	d8c02a17 	ldw	r3,168(sp)
 2005d48:	002d883a 	mov	r22,zero
 2005d4c:	28800104 	addi	r2,r5,4
 2005d50:	2cc0000b 	ldhu	r19,0(r5)
 2005d54:	183fc90e 	bge	r3,zero,2005c7c <___vfprintf_internal_r+0x140c>
 2005d58:	d8802e15 	stw	r2,184(sp)
 2005d5c:	0039883a 	mov	fp,zero
 2005d60:	9d84b03a 	or	r2,r19,r22
 2005d64:	103c1e1e 	bne	r2,zero,2004de0 <___vfprintf_internal_r+0x570>
 2005d68:	00800044 	movi	r2,1
 2005d6c:	003e6c06 	br	2005720 <___vfprintf_internal_r+0xeb0>
 2005d70:	d9002d17 	ldw	r4,180(sp)
 2005d74:	d9801e04 	addi	r6,sp,120
 2005d78:	b80b883a 	mov	r5,r23
 2005d7c:	200c0500 	call	200c050 <__sprint_r>
 2005d80:	103bbf1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005d84:	d8c02017 	ldw	r3,128(sp)
 2005d88:	da000404 	addi	r8,sp,16
 2005d8c:	d9003217 	ldw	r4,200(sp)
 2005d90:	d8802617 	ldw	r2,152(sp)
 2005d94:	d9403317 	ldw	r5,204(sp)
 2005d98:	8123883a 	add	r17,r16,r4
 2005d9c:	11400216 	blt	r2,r5,2005da8 <___vfprintf_internal_r+0x1538>
 2005da0:	9100004c 	andi	r4,r18,1
 2005da4:	20000d26 	beq	r4,zero,2005ddc <___vfprintf_internal_r+0x156c>
 2005da8:	d9003717 	ldw	r4,220(sp)
 2005dac:	d9403417 	ldw	r5,208(sp)
 2005db0:	1907883a 	add	r3,r3,r4
 2005db4:	d9001f17 	ldw	r4,124(sp)
 2005db8:	41400015 	stw	r5,0(r8)
 2005dbc:	d9403717 	ldw	r5,220(sp)
 2005dc0:	21000044 	addi	r4,r4,1
 2005dc4:	d8c02015 	stw	r3,128(sp)
 2005dc8:	41400115 	stw	r5,4(r8)
 2005dcc:	d9001f15 	stw	r4,124(sp)
 2005dd0:	014001c4 	movi	r5,7
 2005dd4:	2901e816 	blt	r5,r4,2006578 <___vfprintf_internal_r+0x1d08>
 2005dd8:	42000204 	addi	r8,r8,8
 2005ddc:	d9003317 	ldw	r4,204(sp)
 2005de0:	8121883a 	add	r16,r16,r4
 2005de4:	2085c83a 	sub	r2,r4,r2
 2005de8:	8461c83a 	sub	r16,r16,r17
 2005dec:	1400010e 	bge	r2,r16,2005df4 <___vfprintf_internal_r+0x1584>
 2005df0:	1021883a 	mov	r16,r2
 2005df4:	04000a0e 	bge	zero,r16,2005e20 <___vfprintf_internal_r+0x15b0>
 2005df8:	d9001f17 	ldw	r4,124(sp)
 2005dfc:	1c07883a 	add	r3,r3,r16
 2005e00:	44400015 	stw	r17,0(r8)
 2005e04:	21000044 	addi	r4,r4,1
 2005e08:	44000115 	stw	r16,4(r8)
 2005e0c:	d8c02015 	stw	r3,128(sp)
 2005e10:	d9001f15 	stw	r4,124(sp)
 2005e14:	014001c4 	movi	r5,7
 2005e18:	2901fb16 	blt	r5,r4,2006608 <___vfprintf_internal_r+0x1d98>
 2005e1c:	42000204 	addi	r8,r8,8
 2005e20:	8001f716 	blt	r16,zero,2006600 <___vfprintf_internal_r+0x1d90>
 2005e24:	1421c83a 	sub	r16,r2,r16
 2005e28:	043d160e 	bge	zero,r16,2005284 <___vfprintf_internal_r+0xa14>
 2005e2c:	04400404 	movi	r17,16
 2005e30:	d8801f17 	ldw	r2,124(sp)
 2005e34:	8c3efb0e 	bge	r17,r16,2005a24 <___vfprintf_internal_r+0x11b4>
 2005e38:	014080b4 	movhi	r5,514
 2005e3c:	296da384 	addi	r5,r5,-18802
 2005e40:	d9402c15 	stw	r5,176(sp)
 2005e44:	058001c4 	movi	r22,7
 2005e48:	dcc02d17 	ldw	r19,180(sp)
 2005e4c:	00000306 	br	2005e5c <___vfprintf_internal_r+0x15ec>
 2005e50:	42000204 	addi	r8,r8,8
 2005e54:	843ffc04 	addi	r16,r16,-16
 2005e58:	8c3ef50e 	bge	r17,r16,2005a30 <___vfprintf_internal_r+0x11c0>
 2005e5c:	18c00404 	addi	r3,r3,16
 2005e60:	10800044 	addi	r2,r2,1
 2005e64:	45000015 	stw	r20,0(r8)
 2005e68:	44400115 	stw	r17,4(r8)
 2005e6c:	d8c02015 	stw	r3,128(sp)
 2005e70:	d8801f15 	stw	r2,124(sp)
 2005e74:	b0bff60e 	bge	r22,r2,2005e50 <___vfprintf_internal_r+0x15e0>
 2005e78:	d9801e04 	addi	r6,sp,120
 2005e7c:	b80b883a 	mov	r5,r23
 2005e80:	9809883a 	mov	r4,r19
 2005e84:	200c0500 	call	200c050 <__sprint_r>
 2005e88:	103b7d1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005e8c:	d8c02017 	ldw	r3,128(sp)
 2005e90:	d8801f17 	ldw	r2,124(sp)
 2005e94:	da000404 	addi	r8,sp,16
 2005e98:	003fee06 	br	2005e54 <___vfprintf_internal_r+0x15e4>
 2005e9c:	9088703a 	and	r4,r18,r2
 2005ea0:	203eab1e 	bne	r4,zero,2005950 <___vfprintf_internal_r+0x10e0>
 2005ea4:	dc401f17 	ldw	r17,124(sp)
 2005ea8:	40800115 	stw	r2,4(r8)
 2005eac:	44000015 	stw	r16,0(r8)
 2005eb0:	8c400044 	addi	r17,r17,1
 2005eb4:	d8c02015 	stw	r3,128(sp)
 2005eb8:	dc401f15 	stw	r17,124(sp)
 2005ebc:	008001c4 	movi	r2,7
 2005ec0:	14400e16 	blt	r2,r17,2005efc <___vfprintf_internal_r+0x168c>
 2005ec4:	45800204 	addi	r22,r8,8
 2005ec8:	003eca06 	br	20059f4 <___vfprintf_internal_r+0x1184>
 2005ecc:	010080b4 	movhi	r4,514
 2005ed0:	212da384 	addi	r4,r4,-18802
 2005ed4:	d9002c15 	stw	r4,176(sp)
 2005ed8:	d8802c17 	ldw	r2,176(sp)
 2005edc:	1c07883a 	add	r3,r3,r16
 2005ee0:	8c400044 	addi	r17,r17,1
 2005ee4:	b0800015 	stw	r2,0(r22)
 2005ee8:	b4000115 	stw	r16,4(r22)
 2005eec:	d8c02015 	stw	r3,128(sp)
 2005ef0:	dc401f15 	stw	r17,124(sp)
 2005ef4:	008001c4 	movi	r2,7
 2005ef8:	147ebd0e 	bge	r2,r17,20059f0 <___vfprintf_internal_r+0x1180>
 2005efc:	d9002d17 	ldw	r4,180(sp)
 2005f00:	d9801e04 	addi	r6,sp,120
 2005f04:	b80b883a 	mov	r5,r23
 2005f08:	200c0500 	call	200c050 <__sprint_r>
 2005f0c:	103b5c1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005f10:	d8c02017 	ldw	r3,128(sp)
 2005f14:	dc401f17 	ldw	r17,124(sp)
 2005f18:	dd800404 	addi	r22,sp,16
 2005f1c:	003eb506 	br	20059f4 <___vfprintf_internal_r+0x1184>
 2005f20:	d9002d17 	ldw	r4,180(sp)
 2005f24:	d9801e04 	addi	r6,sp,120
 2005f28:	b80b883a 	mov	r5,r23
 2005f2c:	200c0500 	call	200c050 <__sprint_r>
 2005f30:	103b531e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005f34:	d8c02017 	ldw	r3,128(sp)
 2005f38:	dc401f17 	ldw	r17,124(sp)
 2005f3c:	da000404 	addi	r8,sp,16
 2005f40:	003e8d06 	br	2005978 <___vfprintf_internal_r+0x1108>
 2005f44:	d9002d17 	ldw	r4,180(sp)
 2005f48:	d9801e04 	addi	r6,sp,120
 2005f4c:	b80b883a 	mov	r5,r23
 2005f50:	200c0500 	call	200c050 <__sprint_r>
 2005f54:	103b4a1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005f58:	d8c02017 	ldw	r3,128(sp)
 2005f5c:	dc401f17 	ldw	r17,124(sp)
 2005f60:	dd800404 	addi	r22,sp,16
 2005f64:	003e8f06 	br	20059a4 <___vfprintf_internal_r+0x1134>
 2005f68:	0027883a 	mov	r19,zero
 2005f6c:	003f4a06 	br	2005c98 <___vfprintf_internal_r+0x1428>
 2005f70:	d9002d17 	ldw	r4,180(sp)
 2005f74:	d9801e04 	addi	r6,sp,120
 2005f78:	b80b883a 	mov	r5,r23
 2005f7c:	200c0500 	call	200c050 <__sprint_r>
 2005f80:	103b3f1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2005f84:	d8c02017 	ldw	r3,128(sp)
 2005f88:	da000404 	addi	r8,sp,16
 2005f8c:	003c7b06 	br	200517c <___vfprintf_internal_r+0x90c>
 2005f90:	d9402a17 	ldw	r5,168(sp)
 2005f94:	04e7c83a 	sub	r19,zero,r19
 2005f98:	07000b44 	movi	fp,45
 2005f9c:	9804c03a 	cmpne	r2,r19,zero
 2005fa0:	05adc83a 	sub	r22,zero,r22
 2005fa4:	df002785 	stb	fp,158(sp)
 2005fa8:	b0adc83a 	sub	r22,r22,r2
 2005fac:	28017b16 	blt	r5,zero,200659c <___vfprintf_internal_r+0x1d2c>
 2005fb0:	00bfdfc4 	movi	r2,-129
 2005fb4:	90a4703a 	and	r18,r18,r2
 2005fb8:	003b8906 	br	2004de0 <___vfprintf_internal_r+0x570>
 2005fbc:	d9003617 	ldw	r4,216(sp)
 2005fc0:	d9403817 	ldw	r5,224(sp)
 2005fc4:	da003d15 	stw	r8,244(sp)
 2005fc8:	200bc740 	call	200bc74 <__fpclassifyd>
 2005fcc:	da003d17 	ldw	r8,244(sp)
 2005fd0:	1000f026 	beq	r2,zero,2006394 <___vfprintf_internal_r+0x1b24>
 2005fd4:	d9002a17 	ldw	r4,168(sp)
 2005fd8:	05bff7c4 	movi	r22,-33
 2005fdc:	00bfffc4 	movi	r2,-1
 2005fe0:	8dac703a 	and	r22,r17,r22
 2005fe4:	20820026 	beq	r4,r2,20067e8 <___vfprintf_internal_r+0x1f78>
 2005fe8:	008011c4 	movi	r2,71
 2005fec:	b081f726 	beq	r22,r2,20067cc <___vfprintf_internal_r+0x1f5c>
 2005ff0:	d9003817 	ldw	r4,224(sp)
 2005ff4:	90c04014 	ori	r3,r18,256
 2005ff8:	d8c02c15 	stw	r3,176(sp)
 2005ffc:	20021516 	blt	r4,zero,2006854 <___vfprintf_internal_r+0x1fe4>
 2006000:	dcc03817 	ldw	r19,224(sp)
 2006004:	d8002905 	stb	zero,164(sp)
 2006008:	00801984 	movi	r2,102
 200600c:	8881f926 	beq	r17,r2,20067f4 <___vfprintf_internal_r+0x1f84>
 2006010:	00801184 	movi	r2,70
 2006014:	88821c26 	beq	r17,r2,2006888 <___vfprintf_internal_r+0x2018>
 2006018:	00801144 	movi	r2,69
 200601c:	b081ef26 	beq	r22,r2,20067dc <___vfprintf_internal_r+0x1f6c>
 2006020:	d8c02a17 	ldw	r3,168(sp)
 2006024:	d8802104 	addi	r2,sp,132
 2006028:	d8800315 	stw	r2,12(sp)
 200602c:	d9403617 	ldw	r5,216(sp)
 2006030:	d8802504 	addi	r2,sp,148
 2006034:	d9002d17 	ldw	r4,180(sp)
 2006038:	d8800215 	stw	r2,8(sp)
 200603c:	d8802604 	addi	r2,sp,152
 2006040:	d8c00015 	stw	r3,0(sp)
 2006044:	d8800115 	stw	r2,4(sp)
 2006048:	01c00084 	movi	r7,2
 200604c:	980d883a 	mov	r6,r19
 2006050:	d8c03c15 	stw	r3,240(sp)
 2006054:	da003d15 	stw	r8,244(sp)
 2006058:	2006fa00 	call	2006fa0 <_dtoa_r>
 200605c:	1021883a 	mov	r16,r2
 2006060:	008019c4 	movi	r2,103
 2006064:	d8c03c17 	ldw	r3,240(sp)
 2006068:	da003d17 	ldw	r8,244(sp)
 200606c:	88817126 	beq	r17,r2,2006634 <___vfprintf_internal_r+0x1dc4>
 2006070:	008011c4 	movi	r2,71
 2006074:	88829126 	beq	r17,r2,2006abc <___vfprintf_internal_r+0x224c>
 2006078:	80f9883a 	add	fp,r16,r3
 200607c:	d9003617 	ldw	r4,216(sp)
 2006080:	000d883a 	mov	r6,zero
 2006084:	000f883a 	mov	r7,zero
 2006088:	980b883a 	mov	r5,r19
 200608c:	da003d15 	stw	r8,244(sp)
 2006090:	200f4040 	call	200f404 <__eqdf2>
 2006094:	da003d17 	ldw	r8,244(sp)
 2006098:	10018d26 	beq	r2,zero,20066d0 <___vfprintf_internal_r+0x1e60>
 200609c:	d8802117 	ldw	r2,132(sp)
 20060a0:	1700062e 	bgeu	r2,fp,20060bc <___vfprintf_internal_r+0x184c>
 20060a4:	01000c04 	movi	r4,48
 20060a8:	10c00044 	addi	r3,r2,1
 20060ac:	d8c02115 	stw	r3,132(sp)
 20060b0:	11000005 	stb	r4,0(r2)
 20060b4:	d8802117 	ldw	r2,132(sp)
 20060b8:	173ffb36 	bltu	r2,fp,20060a8 <___vfprintf_internal_r+0x1838>
 20060bc:	1405c83a 	sub	r2,r2,r16
 20060c0:	d8803315 	stw	r2,204(sp)
 20060c4:	008011c4 	movi	r2,71
 20060c8:	b0817626 	beq	r22,r2,20066a4 <___vfprintf_internal_r+0x1e34>
 20060cc:	00801944 	movi	r2,101
 20060d0:	1442800e 	bge	r2,r17,2006ad4 <___vfprintf_internal_r+0x2264>
 20060d4:	d8c02617 	ldw	r3,152(sp)
 20060d8:	00801984 	movi	r2,102
 20060dc:	d8c03215 	stw	r3,200(sp)
 20060e0:	8881fe26 	beq	r17,r2,20068dc <___vfprintf_internal_r+0x206c>
 20060e4:	d8c03217 	ldw	r3,200(sp)
 20060e8:	d9003317 	ldw	r4,204(sp)
 20060ec:	1901dd16 	blt	r3,r4,2006864 <___vfprintf_internal_r+0x1ff4>
 20060f0:	9480004c 	andi	r18,r18,1
 20060f4:	90022b1e 	bne	r18,zero,20069a4 <___vfprintf_internal_r+0x2134>
 20060f8:	1805883a 	mov	r2,r3
 20060fc:	18028316 	blt	r3,zero,2006b0c <___vfprintf_internal_r+0x229c>
 2006100:	d8c03217 	ldw	r3,200(sp)
 2006104:	044019c4 	movi	r17,103
 2006108:	d8c02b15 	stw	r3,172(sp)
 200610c:	df002907 	ldb	fp,164(sp)
 2006110:	e001531e 	bne	fp,zero,2006660 <___vfprintf_internal_r+0x1df0>
 2006114:	df002783 	ldbu	fp,158(sp)
 2006118:	d8802915 	stw	r2,164(sp)
 200611c:	dc802c17 	ldw	r18,176(sp)
 2006120:	d8002a15 	stw	zero,168(sp)
 2006124:	003baf06 	br	2004fe4 <___vfprintf_internal_r+0x774>
 2006128:	d8c02e17 	ldw	r3,184(sp)
 200612c:	d9002e17 	ldw	r4,184(sp)
 2006130:	d9402e17 	ldw	r5,184(sp)
 2006134:	18c00017 	ldw	r3,0(r3)
 2006138:	21000117 	ldw	r4,4(r4)
 200613c:	29400204 	addi	r5,r5,8
 2006140:	d8c03615 	stw	r3,216(sp)
 2006144:	d9003815 	stw	r4,224(sp)
 2006148:	d9402e15 	stw	r5,184(sp)
 200614c:	003b5006 	br	2004e90 <___vfprintf_internal_r+0x620>
 2006150:	ac400007 	ldb	r17,0(r21)
 2006154:	003a2806 	br	20049f8 <___vfprintf_internal_r+0x188>
 2006158:	9080100c 	andi	r2,r18,64
 200615c:	1000a826 	beq	r2,zero,2006400 <___vfprintf_internal_r+0x1b90>
 2006160:	d8c02e17 	ldw	r3,184(sp)
 2006164:	002d883a 	mov	r22,zero
 2006168:	1cc0000b 	ldhu	r19,0(r3)
 200616c:	18c00104 	addi	r3,r3,4
 2006170:	d8c02e15 	stw	r3,184(sp)
 2006174:	003caf06 	br	2005434 <___vfprintf_internal_r+0xbc4>
 2006178:	d9002e17 	ldw	r4,184(sp)
 200617c:	d9402a17 	ldw	r5,168(sp)
 2006180:	002d883a 	mov	r22,zero
 2006184:	20800104 	addi	r2,r4,4
 2006188:	24c00017 	ldw	r19,0(r4)
 200618c:	283ebb0e 	bge	r5,zero,2005c7c <___vfprintf_internal_r+0x140c>
 2006190:	003ef106 	br	2005d58 <___vfprintf_internal_r+0x14e8>
 2006194:	9080040c 	andi	r2,r18,16
 2006198:	1000921e 	bne	r2,zero,20063e4 <___vfprintf_internal_r+0x1b74>
 200619c:	9480100c 	andi	r18,r18,64
 20061a0:	90013926 	beq	r18,zero,2006688 <___vfprintf_internal_r+0x1e18>
 20061a4:	d9402e17 	ldw	r5,184(sp)
 20061a8:	d8c02f17 	ldw	r3,188(sp)
 20061ac:	28800017 	ldw	r2,0(r5)
 20061b0:	29400104 	addi	r5,r5,4
 20061b4:	d9402e15 	stw	r5,184(sp)
 20061b8:	10c0000d 	sth	r3,0(r2)
 20061bc:	0039e406 	br	2004950 <___vfprintf_internal_r+0xe0>
 20061c0:	9080100c 	andi	r2,r18,64
 20061c4:	10008026 	beq	r2,zero,20063c8 <___vfprintf_internal_r+0x1b58>
 20061c8:	d8802e17 	ldw	r2,184(sp)
 20061cc:	14c0000f 	ldh	r19,0(r2)
 20061d0:	10800104 	addi	r2,r2,4
 20061d4:	d8802e15 	stw	r2,184(sp)
 20061d8:	982dd7fa 	srai	r22,r19,31
 20061dc:	b005883a 	mov	r2,r22
 20061e0:	003af706 	br	2004dc0 <___vfprintf_internal_r+0x550>
 20061e4:	9080100c 	andi	r2,r18,64
 20061e8:	d8002785 	stb	zero,158(sp)
 20061ec:	10008a1e 	bne	r2,zero,2006418 <___vfprintf_internal_r+0x1ba8>
 20061f0:	d9002e17 	ldw	r4,184(sp)
 20061f4:	d9402a17 	ldw	r5,168(sp)
 20061f8:	002d883a 	mov	r22,zero
 20061fc:	20800104 	addi	r2,r4,4
 2006200:	24c00017 	ldw	r19,0(r4)
 2006204:	283e4b0e 	bge	r5,zero,2005b34 <___vfprintf_internal_r+0x12c4>
 2006208:	9d86b03a 	or	r3,r19,r22
 200620c:	d8802e15 	stw	r2,184(sp)
 2006210:	183e4c1e 	bne	r3,zero,2005b44 <___vfprintf_internal_r+0x12d4>
 2006214:	0039883a 	mov	fp,zero
 2006218:	0005883a 	mov	r2,zero
 200621c:	003d4006 	br	2005720 <___vfprintf_internal_r+0xeb0>
 2006220:	014080b4 	movhi	r5,514
 2006224:	296da384 	addi	r5,r5,-18802
 2006228:	d9402c15 	stw	r5,176(sp)
 200622c:	d9402c17 	ldw	r5,176(sp)
 2006230:	1c47883a 	add	r3,r3,r17
 2006234:	10800044 	addi	r2,r2,1
 2006238:	41400015 	stw	r5,0(r8)
 200623c:	44400115 	stw	r17,4(r8)
 2006240:	d8c02015 	stw	r3,128(sp)
 2006244:	d8801f15 	stw	r2,124(sp)
 2006248:	010001c4 	movi	r4,7
 200624c:	20bec816 	blt	r4,r2,2005d70 <___vfprintf_internal_r+0x1500>
 2006250:	42000204 	addi	r8,r8,8
 2006254:	003ecd06 	br	2005d8c <___vfprintf_internal_r+0x151c>
 2006258:	d9002a17 	ldw	r4,168(sp)
 200625c:	d8002785 	stb	zero,158(sp)
 2006260:	203d2d16 	blt	r4,zero,2005718 <___vfprintf_internal_r+0xea8>
 2006264:	00bfdfc4 	movi	r2,-129
 2006268:	90a4703a 	and	r18,r18,r2
 200626c:	003a6106 	br	2004bf4 <___vfprintf_internal_r+0x384>
 2006270:	010080b4 	movhi	r4,514
 2006274:	212da384 	addi	r4,r4,-18802
 2006278:	d9002c15 	stw	r4,176(sp)
 200627c:	003bea06 	br	2005228 <___vfprintf_internal_r+0x9b8>
 2006280:	d9002d17 	ldw	r4,180(sp)
 2006284:	d9801e04 	addi	r6,sp,120
 2006288:	b80b883a 	mov	r5,r23
 200628c:	200c0500 	call	200c050 <__sprint_r>
 2006290:	103a7b1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2006294:	d8c02017 	ldw	r3,128(sp)
 2006298:	da000404 	addi	r8,sp,16
 200629c:	003d4106 	br	20057a4 <___vfprintf_internal_r+0xf34>
 20062a0:	d8801f17 	ldw	r2,124(sp)
 20062a4:	014080b4 	movhi	r5,514
 20062a8:	01000044 	movi	r4,1
 20062ac:	18c00044 	addi	r3,r3,1
 20062b0:	10800044 	addi	r2,r2,1
 20062b4:	296da304 	addi	r5,r5,-18804
 20062b8:	41000115 	stw	r4,4(r8)
 20062bc:	41400015 	stw	r5,0(r8)
 20062c0:	d8c02015 	stw	r3,128(sp)
 20062c4:	d8801f15 	stw	r2,124(sp)
 20062c8:	010001c4 	movi	r4,7
 20062cc:	20805c16 	blt	r4,r2,2006440 <___vfprintf_internal_r+0x1bd0>
 20062d0:	42000204 	addi	r8,r8,8
 20062d4:	8800041e 	bne	r17,zero,20062e8 <___vfprintf_internal_r+0x1a78>
 20062d8:	d8803317 	ldw	r2,204(sp)
 20062dc:	1000021e 	bne	r2,zero,20062e8 <___vfprintf_internal_r+0x1a78>
 20062e0:	9080004c 	andi	r2,r18,1
 20062e4:	103be726 	beq	r2,zero,2005284 <___vfprintf_internal_r+0xa14>
 20062e8:	d9003717 	ldw	r4,220(sp)
 20062ec:	d8801f17 	ldw	r2,124(sp)
 20062f0:	d9403417 	ldw	r5,208(sp)
 20062f4:	20c7883a 	add	r3,r4,r3
 20062f8:	10800044 	addi	r2,r2,1
 20062fc:	41000115 	stw	r4,4(r8)
 2006300:	41400015 	stw	r5,0(r8)
 2006304:	d8c02015 	stw	r3,128(sp)
 2006308:	d8801f15 	stw	r2,124(sp)
 200630c:	010001c4 	movi	r4,7
 2006310:	20812116 	blt	r4,r2,2006798 <___vfprintf_internal_r+0x1f28>
 2006314:	42000204 	addi	r8,r8,8
 2006318:	0463c83a 	sub	r17,zero,r17
 200631c:	0440730e 	bge	zero,r17,20064ec <___vfprintf_internal_r+0x1c7c>
 2006320:	05800404 	movi	r22,16
 2006324:	b440860e 	bge	r22,r17,2006540 <___vfprintf_internal_r+0x1cd0>
 2006328:	014080b4 	movhi	r5,514
 200632c:	296da384 	addi	r5,r5,-18802
 2006330:	d9402c15 	stw	r5,176(sp)
 2006334:	070001c4 	movi	fp,7
 2006338:	dcc02d17 	ldw	r19,180(sp)
 200633c:	00000306 	br	200634c <___vfprintf_internal_r+0x1adc>
 2006340:	42000204 	addi	r8,r8,8
 2006344:	8c7ffc04 	addi	r17,r17,-16
 2006348:	b440800e 	bge	r22,r17,200654c <___vfprintf_internal_r+0x1cdc>
 200634c:	18c00404 	addi	r3,r3,16
 2006350:	10800044 	addi	r2,r2,1
 2006354:	45000015 	stw	r20,0(r8)
 2006358:	45800115 	stw	r22,4(r8)
 200635c:	d8c02015 	stw	r3,128(sp)
 2006360:	d8801f15 	stw	r2,124(sp)
 2006364:	e0bff60e 	bge	fp,r2,2006340 <___vfprintf_internal_r+0x1ad0>
 2006368:	d9801e04 	addi	r6,sp,120
 200636c:	b80b883a 	mov	r5,r23
 2006370:	9809883a 	mov	r4,r19
 2006374:	200c0500 	call	200c050 <__sprint_r>
 2006378:	103a411e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 200637c:	d8c02017 	ldw	r3,128(sp)
 2006380:	d8801f17 	ldw	r2,124(sp)
 2006384:	da000404 	addi	r8,sp,16
 2006388:	003fee06 	br	2006344 <___vfprintf_internal_r+0x1ad4>
 200638c:	00bfffc4 	movi	r2,-1
 2006390:	003a3f06 	br	2004c90 <___vfprintf_internal_r+0x420>
 2006394:	008011c4 	movi	r2,71
 2006398:	1440b816 	blt	r2,r17,200667c <___vfprintf_internal_r+0x1e0c>
 200639c:	040080b4 	movhi	r16,514
 20063a0:	842d9504 	addi	r16,r16,-18860
 20063a4:	00c000c4 	movi	r3,3
 20063a8:	00bfdfc4 	movi	r2,-129
 20063ac:	d8c02915 	stw	r3,164(sp)
 20063b0:	90a4703a 	and	r18,r18,r2
 20063b4:	df002783 	ldbu	fp,158(sp)
 20063b8:	d8c02b15 	stw	r3,172(sp)
 20063bc:	d8002a15 	stw	zero,168(sp)
 20063c0:	d8003215 	stw	zero,200(sp)
 20063c4:	003b0706 	br	2004fe4 <___vfprintf_internal_r+0x774>
 20063c8:	d8c02e17 	ldw	r3,184(sp)
 20063cc:	1cc00017 	ldw	r19,0(r3)
 20063d0:	18c00104 	addi	r3,r3,4
 20063d4:	d8c02e15 	stw	r3,184(sp)
 20063d8:	982dd7fa 	srai	r22,r19,31
 20063dc:	b005883a 	mov	r2,r22
 20063e0:	003a7706 	br	2004dc0 <___vfprintf_internal_r+0x550>
 20063e4:	d8c02e17 	ldw	r3,184(sp)
 20063e8:	d9002f17 	ldw	r4,188(sp)
 20063ec:	18800017 	ldw	r2,0(r3)
 20063f0:	18c00104 	addi	r3,r3,4
 20063f4:	d8c02e15 	stw	r3,184(sp)
 20063f8:	11000015 	stw	r4,0(r2)
 20063fc:	00395406 	br	2004950 <___vfprintf_internal_r+0xe0>
 2006400:	d9002e17 	ldw	r4,184(sp)
 2006404:	002d883a 	mov	r22,zero
 2006408:	24c00017 	ldw	r19,0(r4)
 200640c:	21000104 	addi	r4,r4,4
 2006410:	d9002e15 	stw	r4,184(sp)
 2006414:	003c0706 	br	2005434 <___vfprintf_internal_r+0xbc4>
 2006418:	d9402e17 	ldw	r5,184(sp)
 200641c:	d8c02a17 	ldw	r3,168(sp)
 2006420:	002d883a 	mov	r22,zero
 2006424:	28800104 	addi	r2,r5,4
 2006428:	2cc0000b 	ldhu	r19,0(r5)
 200642c:	183dc10e 	bge	r3,zero,2005b34 <___vfprintf_internal_r+0x12c4>
 2006430:	003f7506 	br	2006208 <___vfprintf_internal_r+0x1998>
 2006434:	040080b4 	movhi	r16,514
 2006438:	842d9304 	addi	r16,r16,-18868
 200643c:	003aa706 	br	2004edc <___vfprintf_internal_r+0x66c>
 2006440:	d9002d17 	ldw	r4,180(sp)
 2006444:	d9801e04 	addi	r6,sp,120
 2006448:	b80b883a 	mov	r5,r23
 200644c:	200c0500 	call	200c050 <__sprint_r>
 2006450:	103a0b1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2006454:	dc402617 	ldw	r17,152(sp)
 2006458:	d8c02017 	ldw	r3,128(sp)
 200645c:	da000404 	addi	r8,sp,16
 2006460:	003f9c06 	br	20062d4 <___vfprintf_internal_r+0x1a64>
 2006464:	ac400043 	ldbu	r17,1(r21)
 2006468:	84000814 	ori	r16,r16,32
 200646c:	ad400044 	addi	r21,r21,1
 2006470:	8c403fcc 	andi	r17,r17,255
 2006474:	8c40201c 	xori	r17,r17,128
 2006478:	8c7fe004 	addi	r17,r17,-128
 200647c:	00395e06 	br	20049f8 <___vfprintf_internal_r+0x188>
 2006480:	d8c02e15 	stw	r3,184(sp)
 2006484:	0039883a 	mov	fp,zero
 2006488:	003e3506 	br	2005d60 <___vfprintf_internal_r+0x14f0>
 200648c:	d9002d17 	ldw	r4,180(sp)
 2006490:	d9801e04 	addi	r6,sp,120
 2006494:	b80b883a 	mov	r5,r23
 2006498:	200c0500 	call	200c050 <__sprint_r>
 200649c:	1039f81e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 20064a0:	d8c02017 	ldw	r3,128(sp)
 20064a4:	da000404 	addi	r8,sp,16
 20064a8:	003cd006 	br	20057ec <___vfprintf_internal_r+0xf7c>
 20064ac:	8009883a 	mov	r4,r16
 20064b0:	df003d15 	stw	fp,244(sp)
 20064b4:	20047d80 	call	20047d8 <strlen>
 20064b8:	d8802b15 	stw	r2,172(sp)
 20064bc:	da003d17 	ldw	r8,244(sp)
 20064c0:	103c200e 	bge	r2,zero,2005544 <___vfprintf_internal_r+0xcd4>
 20064c4:	0005883a 	mov	r2,zero
 20064c8:	003c1e06 	br	2005544 <___vfprintf_internal_r+0xcd4>
 20064cc:	d9002d17 	ldw	r4,180(sp)
 20064d0:	d9801e04 	addi	r6,sp,120
 20064d4:	b80b883a 	mov	r5,r23
 20064d8:	200c0500 	call	200c050 <__sprint_r>
 20064dc:	1039e81e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 20064e0:	d8c02017 	ldw	r3,128(sp)
 20064e4:	d8801f17 	ldw	r2,124(sp)
 20064e8:	da000404 	addi	r8,sp,16
 20064ec:	d9403317 	ldw	r5,204(sp)
 20064f0:	10800044 	addi	r2,r2,1
 20064f4:	44000015 	stw	r16,0(r8)
 20064f8:	28c7883a 	add	r3,r5,r3
 20064fc:	003b5b06 	br	200526c <___vfprintf_internal_r+0x9fc>
 2006500:	010080b4 	movhi	r4,514
 2006504:	212da784 	addi	r4,r4,-18786
 2006508:	d9003515 	stw	r4,212(sp)
 200650c:	003af206 	br	20050d8 <___vfprintf_internal_r+0x868>
 2006510:	013fffc4 	movi	r4,-1
 2006514:	003a0806 	br	2004d38 <___vfprintf_internal_r+0x4c8>
 2006518:	0023883a 	mov	r17,zero
 200651c:	003d9d06 	br	2005b94 <___vfprintf_internal_r+0x1324>
 2006520:	d9002d17 	ldw	r4,180(sp)
 2006524:	d9801e04 	addi	r6,sp,120
 2006528:	b80b883a 	mov	r5,r23
 200652c:	200c0500 	call	200c050 <__sprint_r>
 2006530:	1039d31e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 2006534:	d8c02017 	ldw	r3,128(sp)
 2006538:	da000404 	addi	r8,sp,16
 200653c:	003d9406 	br	2005b90 <___vfprintf_internal_r+0x1320>
 2006540:	010080b4 	movhi	r4,514
 2006544:	212da384 	addi	r4,r4,-18802
 2006548:	d9002c15 	stw	r4,176(sp)
 200654c:	d9002c17 	ldw	r4,176(sp)
 2006550:	1c47883a 	add	r3,r3,r17
 2006554:	10800044 	addi	r2,r2,1
 2006558:	41000015 	stw	r4,0(r8)
 200655c:	44400115 	stw	r17,4(r8)
 2006560:	d8c02015 	stw	r3,128(sp)
 2006564:	d8801f15 	stw	r2,124(sp)
 2006568:	010001c4 	movi	r4,7
 200656c:	20bfd716 	blt	r4,r2,20064cc <___vfprintf_internal_r+0x1c5c>
 2006570:	42000204 	addi	r8,r8,8
 2006574:	003fdd06 	br	20064ec <___vfprintf_internal_r+0x1c7c>
 2006578:	d9002d17 	ldw	r4,180(sp)
 200657c:	d9801e04 	addi	r6,sp,120
 2006580:	b80b883a 	mov	r5,r23
 2006584:	200c0500 	call	200c050 <__sprint_r>
 2006588:	1039bd1e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 200658c:	d8802617 	ldw	r2,152(sp)
 2006590:	d8c02017 	ldw	r3,128(sp)
 2006594:	da000404 	addi	r8,sp,16
 2006598:	003e1006 	br	2005ddc <___vfprintf_internal_r+0x156c>
 200659c:	00800044 	movi	r2,1
 20065a0:	10803fcc 	andi	r2,r2,255
 20065a4:	00c00044 	movi	r3,1
 20065a8:	10fa0d26 	beq	r2,r3,2004de0 <___vfprintf_internal_r+0x570>
 20065ac:	00c00084 	movi	r3,2
 20065b0:	10fbaf26 	beq	r2,r3,2005470 <___vfprintf_internal_r+0xc00>
 20065b4:	003a6d06 	br	2004f6c <___vfprintf_internal_r+0x6fc>
 20065b8:	010080b4 	movhi	r4,514
 20065bc:	212da784 	addi	r4,r4,-18786
 20065c0:	d9003515 	stw	r4,212(sp)
 20065c4:	003b5406 	br	2005318 <___vfprintf_internal_r+0xaa8>
 20065c8:	d8802a17 	ldw	r2,168(sp)
 20065cc:	00c00184 	movi	r3,6
 20065d0:	1880012e 	bgeu	r3,r2,20065d8 <___vfprintf_internal_r+0x1d68>
 20065d4:	1805883a 	mov	r2,r3
 20065d8:	d8802b15 	stw	r2,172(sp)
 20065dc:	1000ef16 	blt	r2,zero,200699c <___vfprintf_internal_r+0x212c>
 20065e0:	040080b4 	movhi	r16,514
 20065e4:	d8802915 	stw	r2,164(sp)
 20065e8:	dcc02e15 	stw	r19,184(sp)
 20065ec:	d8002a15 	stw	zero,168(sp)
 20065f0:	d8003215 	stw	zero,200(sp)
 20065f4:	842da104 	addi	r16,r16,-18812
 20065f8:	0039883a 	mov	fp,zero
 20065fc:	003a8006 	br	2005000 <___vfprintf_internal_r+0x790>
 2006600:	0021883a 	mov	r16,zero
 2006604:	003e0706 	br	2005e24 <___vfprintf_internal_r+0x15b4>
 2006608:	d9002d17 	ldw	r4,180(sp)
 200660c:	d9801e04 	addi	r6,sp,120
 2006610:	b80b883a 	mov	r5,r23
 2006614:	200c0500 	call	200c050 <__sprint_r>
 2006618:	1039991e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 200661c:	d8802617 	ldw	r2,152(sp)
 2006620:	d9403317 	ldw	r5,204(sp)
 2006624:	d8c02017 	ldw	r3,128(sp)
 2006628:	da000404 	addi	r8,sp,16
 200662c:	2885c83a 	sub	r2,r5,r2
 2006630:	003dfb06 	br	2005e20 <___vfprintf_internal_r+0x15b0>
 2006634:	9080004c 	andi	r2,r18,1
 2006638:	103e8f1e 	bne	r2,zero,2006078 <___vfprintf_internal_r+0x1808>
 200663c:	d8802117 	ldw	r2,132(sp)
 2006640:	003e9e06 	br	20060bc <___vfprintf_internal_r+0x184c>
 2006644:	1025883a 	mov	r18,r2
 2006648:	0039883a 	mov	fp,zero
 200664c:	00800084 	movi	r2,2
 2006650:	003fd306 	br	20065a0 <___vfprintf_internal_r+0x1d30>
 2006654:	07000b44 	movi	fp,45
 2006658:	df002785 	stb	fp,158(sp)
 200665c:	003a1b06 	br	2004ecc <___vfprintf_internal_r+0x65c>
 2006660:	00c00b44 	movi	r3,45
 2006664:	d8c02785 	stb	r3,158(sp)
 2006668:	d8802915 	stw	r2,164(sp)
 200666c:	dc802c17 	ldw	r18,176(sp)
 2006670:	d8002a15 	stw	zero,168(sp)
 2006674:	07000b44 	movi	fp,45
 2006678:	003a5e06 	br	2004ff4 <___vfprintf_internal_r+0x784>
 200667c:	040080b4 	movhi	r16,514
 2006680:	842d9604 	addi	r16,r16,-18856
 2006684:	003f4706 	br	20063a4 <___vfprintf_internal_r+0x1b34>
 2006688:	d9002e17 	ldw	r4,184(sp)
 200668c:	d9402f17 	ldw	r5,188(sp)
 2006690:	20800017 	ldw	r2,0(r4)
 2006694:	21000104 	addi	r4,r4,4
 2006698:	d9002e15 	stw	r4,184(sp)
 200669c:	11400015 	stw	r5,0(r2)
 20066a0:	0038ab06 	br	2004950 <___vfprintf_internal_r+0xe0>
 20066a4:	dd802617 	ldw	r22,152(sp)
 20066a8:	00bfff44 	movi	r2,-3
 20066ac:	b0801c16 	blt	r22,r2,2006720 <___vfprintf_internal_r+0x1eb0>
 20066b0:	d9402a17 	ldw	r5,168(sp)
 20066b4:	2d801a16 	blt	r5,r22,2006720 <___vfprintf_internal_r+0x1eb0>
 20066b8:	dd803215 	stw	r22,200(sp)
 20066bc:	003e8906 	br	20060e4 <___vfprintf_internal_r+0x1874>
 20066c0:	010080b4 	movhi	r4,514
 20066c4:	212da384 	addi	r4,r4,-18802
 20066c8:	d9002c15 	stw	r4,176(sp)
 20066cc:	003c9106 	br	2005914 <___vfprintf_internal_r+0x10a4>
 20066d0:	e005883a 	mov	r2,fp
 20066d4:	003e7906 	br	20060bc <___vfprintf_internal_r+0x184c>
 20066d8:	d9002a17 	ldw	r4,168(sp)
 20066dc:	df002783 	ldbu	fp,158(sp)
 20066e0:	dcc02e15 	stw	r19,184(sp)
 20066e4:	d9002915 	stw	r4,164(sp)
 20066e8:	d9002b15 	stw	r4,172(sp)
 20066ec:	d8002a15 	stw	zero,168(sp)
 20066f0:	d8003215 	stw	zero,200(sp)
 20066f4:	003a3b06 	br	2004fe4 <___vfprintf_internal_r+0x774>
 20066f8:	9080004c 	andi	r2,r18,1
 20066fc:	0039883a 	mov	fp,zero
 2006700:	10000426 	beq	r2,zero,2006714 <___vfprintf_internal_r+0x1ea4>
 2006704:	00800c04 	movi	r2,48
 2006708:	dc001dc4 	addi	r16,sp,119
 200670c:	d8801dc5 	stb	r2,119(sp)
 2006710:	003b6406 	br	20054a4 <___vfprintf_internal_r+0xc34>
 2006714:	d8002b15 	stw	zero,172(sp)
 2006718:	dc001e04 	addi	r16,sp,120
 200671c:	003a2b06 	br	2004fcc <___vfprintf_internal_r+0x75c>
 2006720:	8c7fff84 	addi	r17,r17,-2
 2006724:	b5bfffc4 	addi	r22,r22,-1
 2006728:	dd802615 	stw	r22,152(sp)
 200672c:	dc4022c5 	stb	r17,139(sp)
 2006730:	b000bf16 	blt	r22,zero,2006a30 <___vfprintf_internal_r+0x21c0>
 2006734:	00800ac4 	movi	r2,43
 2006738:	d8802305 	stb	r2,140(sp)
 200673c:	00800244 	movi	r2,9
 2006740:	15807016 	blt	r2,r22,2006904 <___vfprintf_internal_r+0x2094>
 2006744:	00800c04 	movi	r2,48
 2006748:	b5800c04 	addi	r22,r22,48
 200674c:	d8802345 	stb	r2,141(sp)
 2006750:	dd802385 	stb	r22,142(sp)
 2006754:	d88023c4 	addi	r2,sp,143
 2006758:	df0022c4 	addi	fp,sp,139
 200675c:	d8c03317 	ldw	r3,204(sp)
 2006760:	1739c83a 	sub	fp,r2,fp
 2006764:	d9003317 	ldw	r4,204(sp)
 2006768:	e0c7883a 	add	r3,fp,r3
 200676c:	df003a15 	stw	fp,232(sp)
 2006770:	d8c02b15 	stw	r3,172(sp)
 2006774:	00800044 	movi	r2,1
 2006778:	1100b30e 	bge	r2,r4,2006a48 <___vfprintf_internal_r+0x21d8>
 200677c:	d8c02b17 	ldw	r3,172(sp)
 2006780:	18c00044 	addi	r3,r3,1
 2006784:	d8c02b15 	stw	r3,172(sp)
 2006788:	1805883a 	mov	r2,r3
 200678c:	1800ac16 	blt	r3,zero,2006a40 <___vfprintf_internal_r+0x21d0>
 2006790:	d8003215 	stw	zero,200(sp)
 2006794:	003e5d06 	br	200610c <___vfprintf_internal_r+0x189c>
 2006798:	d9002d17 	ldw	r4,180(sp)
 200679c:	d9801e04 	addi	r6,sp,120
 20067a0:	b80b883a 	mov	r5,r23
 20067a4:	200c0500 	call	200c050 <__sprint_r>
 20067a8:	1039351e 	bne	r2,zero,2004c80 <___vfprintf_internal_r+0x410>
 20067ac:	dc402617 	ldw	r17,152(sp)
 20067b0:	d8c02017 	ldw	r3,128(sp)
 20067b4:	d8801f17 	ldw	r2,124(sp)
 20067b8:	da000404 	addi	r8,sp,16
 20067bc:	003ed606 	br	2006318 <___vfprintf_internal_r+0x1aa8>
 20067c0:	182b883a 	mov	r21,r3
 20067c4:	d8002a15 	stw	zero,168(sp)
 20067c8:	00388c06 	br	20049fc <___vfprintf_internal_r+0x18c>
 20067cc:	d8802a17 	ldw	r2,168(sp)
 20067d0:	103e071e 	bne	r2,zero,2005ff0 <___vfprintf_internal_r+0x1780>
 20067d4:	dc002a15 	stw	r16,168(sp)
 20067d8:	003e0506 	br	2005ff0 <___vfprintf_internal_r+0x1780>
 20067dc:	d9002a17 	ldw	r4,168(sp)
 20067e0:	20c00044 	addi	r3,r4,1
 20067e4:	003e0f06 	br	2006024 <___vfprintf_internal_r+0x17b4>
 20067e8:	01400184 	movi	r5,6
 20067ec:	d9402a15 	stw	r5,168(sp)
 20067f0:	003dff06 	br	2005ff0 <___vfprintf_internal_r+0x1780>
 20067f4:	d8802104 	addi	r2,sp,132
 20067f8:	d8800315 	stw	r2,12(sp)
 20067fc:	d8802504 	addi	r2,sp,148
 2006800:	d8800215 	stw	r2,8(sp)
 2006804:	d8802604 	addi	r2,sp,152
 2006808:	d8800115 	stw	r2,4(sp)
 200680c:	d8802a17 	ldw	r2,168(sp)
 2006810:	d9403617 	ldw	r5,216(sp)
 2006814:	d9002d17 	ldw	r4,180(sp)
 2006818:	d8800015 	stw	r2,0(sp)
 200681c:	01c000c4 	movi	r7,3
 2006820:	980d883a 	mov	r6,r19
 2006824:	da003d15 	stw	r8,244(sp)
 2006828:	2006fa00 	call	2006fa0 <_dtoa_r>
 200682c:	d8c02a17 	ldw	r3,168(sp)
 2006830:	da003d17 	ldw	r8,244(sp)
 2006834:	1021883a 	mov	r16,r2
 2006838:	10f9883a 	add	fp,r2,r3
 200683c:	81000007 	ldb	r4,0(r16)
 2006840:	00800c04 	movi	r2,48
 2006844:	20805e26 	beq	r4,r2,20069c0 <___vfprintf_internal_r+0x2150>
 2006848:	d8c02617 	ldw	r3,152(sp)
 200684c:	e0f9883a 	add	fp,fp,r3
 2006850:	003e0a06 	br	200607c <___vfprintf_internal_r+0x180c>
 2006854:	00c00b44 	movi	r3,45
 2006858:	24e0003c 	xorhi	r19,r4,32768
 200685c:	d8c02905 	stb	r3,164(sp)
 2006860:	003de906 	br	2006008 <___vfprintf_internal_r+0x1798>
 2006864:	d8c03217 	ldw	r3,200(sp)
 2006868:	00c07a0e 	bge	zero,r3,2006a54 <___vfprintf_internal_r+0x21e4>
 200686c:	00800044 	movi	r2,1
 2006870:	d9003317 	ldw	r4,204(sp)
 2006874:	1105883a 	add	r2,r2,r4
 2006878:	d8802b15 	stw	r2,172(sp)
 200687c:	10004e16 	blt	r2,zero,20069b8 <___vfprintf_internal_r+0x2148>
 2006880:	044019c4 	movi	r17,103
 2006884:	003e2106 	br	200610c <___vfprintf_internal_r+0x189c>
 2006888:	d9002a17 	ldw	r4,168(sp)
 200688c:	d8802104 	addi	r2,sp,132
 2006890:	d8800315 	stw	r2,12(sp)
 2006894:	d9000015 	stw	r4,0(sp)
 2006898:	d8802504 	addi	r2,sp,148
 200689c:	d9403617 	ldw	r5,216(sp)
 20068a0:	d9002d17 	ldw	r4,180(sp)
 20068a4:	d8800215 	stw	r2,8(sp)
 20068a8:	d8802604 	addi	r2,sp,152
 20068ac:	d8800115 	stw	r2,4(sp)
 20068b0:	01c000c4 	movi	r7,3
 20068b4:	980d883a 	mov	r6,r19
 20068b8:	da003d15 	stw	r8,244(sp)
 20068bc:	2006fa00 	call	2006fa0 <_dtoa_r>
 20068c0:	d8c02a17 	ldw	r3,168(sp)
 20068c4:	da003d17 	ldw	r8,244(sp)
 20068c8:	1021883a 	mov	r16,r2
 20068cc:	00801184 	movi	r2,70
 20068d0:	80f9883a 	add	fp,r16,r3
 20068d4:	88bfd926 	beq	r17,r2,200683c <___vfprintf_internal_r+0x1fcc>
 20068d8:	003de806 	br	200607c <___vfprintf_internal_r+0x180c>
 20068dc:	d9002a17 	ldw	r4,168(sp)
 20068e0:	00c04d0e 	bge	zero,r3,2006a18 <___vfprintf_internal_r+0x21a8>
 20068e4:	2000441e 	bne	r4,zero,20069f8 <___vfprintf_internal_r+0x2188>
 20068e8:	9480004c 	andi	r18,r18,1
 20068ec:	9000421e 	bne	r18,zero,20069f8 <___vfprintf_internal_r+0x2188>
 20068f0:	1805883a 	mov	r2,r3
 20068f4:	18006f16 	blt	r3,zero,2006ab4 <___vfprintf_internal_r+0x2244>
 20068f8:	d8c03217 	ldw	r3,200(sp)
 20068fc:	d8c02b15 	stw	r3,172(sp)
 2006900:	003e0206 	br	200610c <___vfprintf_internal_r+0x189c>
 2006904:	df0022c4 	addi	fp,sp,139
 2006908:	dc002a15 	stw	r16,168(sp)
 200690c:	4027883a 	mov	r19,r8
 2006910:	e021883a 	mov	r16,fp
 2006914:	b009883a 	mov	r4,r22
 2006918:	01400284 	movi	r5,10
 200691c:	20045580 	call	2004558 <__modsi3>
 2006920:	10800c04 	addi	r2,r2,48
 2006924:	843fffc4 	addi	r16,r16,-1
 2006928:	b009883a 	mov	r4,r22
 200692c:	01400284 	movi	r5,10
 2006930:	80800005 	stb	r2,0(r16)
 2006934:	20044d40 	call	20044d4 <__divsi3>
 2006938:	102d883a 	mov	r22,r2
 200693c:	00800244 	movi	r2,9
 2006940:	15bff416 	blt	r2,r22,2006914 <___vfprintf_internal_r+0x20a4>
 2006944:	9811883a 	mov	r8,r19
 2006948:	b0800c04 	addi	r2,r22,48
 200694c:	8027883a 	mov	r19,r16
 2006950:	997fffc4 	addi	r5,r19,-1
 2006954:	98bfffc5 	stb	r2,-1(r19)
 2006958:	dc002a17 	ldw	r16,168(sp)
 200695c:	2f006d2e 	bgeu	r5,fp,2006b14 <___vfprintf_internal_r+0x22a4>
 2006960:	d9c02384 	addi	r7,sp,142
 2006964:	3ccfc83a 	sub	r7,r7,r19
 2006968:	d9002344 	addi	r4,sp,141
 200696c:	e1cf883a 	add	r7,fp,r7
 2006970:	00000106 	br	2006978 <___vfprintf_internal_r+0x2108>
 2006974:	28800003 	ldbu	r2,0(r5)
 2006978:	20800005 	stb	r2,0(r4)
 200697c:	21000044 	addi	r4,r4,1
 2006980:	29400044 	addi	r5,r5,1
 2006984:	393ffb1e 	bne	r7,r4,2006974 <___vfprintf_internal_r+0x2104>
 2006988:	d8802304 	addi	r2,sp,140
 200698c:	14c5c83a 	sub	r2,r2,r19
 2006990:	d8c02344 	addi	r3,sp,141
 2006994:	1885883a 	add	r2,r3,r2
 2006998:	003f7006 	br	200675c <___vfprintf_internal_r+0x1eec>
 200699c:	0005883a 	mov	r2,zero
 20069a0:	003f0f06 	br	20065e0 <___vfprintf_internal_r+0x1d70>
 20069a4:	d8c03217 	ldw	r3,200(sp)
 20069a8:	18c00044 	addi	r3,r3,1
 20069ac:	d8c02b15 	stw	r3,172(sp)
 20069b0:	1805883a 	mov	r2,r3
 20069b4:	183fb20e 	bge	r3,zero,2006880 <___vfprintf_internal_r+0x2010>
 20069b8:	0005883a 	mov	r2,zero
 20069bc:	003fb006 	br	2006880 <___vfprintf_internal_r+0x2010>
 20069c0:	d9003617 	ldw	r4,216(sp)
 20069c4:	000d883a 	mov	r6,zero
 20069c8:	000f883a 	mov	r7,zero
 20069cc:	980b883a 	mov	r5,r19
 20069d0:	d8c03c15 	stw	r3,240(sp)
 20069d4:	da003d15 	stw	r8,244(sp)
 20069d8:	200f4040 	call	200f404 <__eqdf2>
 20069dc:	d8c03c17 	ldw	r3,240(sp)
 20069e0:	da003d17 	ldw	r8,244(sp)
 20069e4:	103f9826 	beq	r2,zero,2006848 <___vfprintf_internal_r+0x1fd8>
 20069e8:	00800044 	movi	r2,1
 20069ec:	10c7c83a 	sub	r3,r2,r3
 20069f0:	d8c02615 	stw	r3,152(sp)
 20069f4:	003f9506 	br	200684c <___vfprintf_internal_r+0x1fdc>
 20069f8:	d9002a17 	ldw	r4,168(sp)
 20069fc:	d8c03217 	ldw	r3,200(sp)
 2006a00:	20800044 	addi	r2,r4,1
 2006a04:	1885883a 	add	r2,r3,r2
 2006a08:	d8802b15 	stw	r2,172(sp)
 2006a0c:	103dbf0e 	bge	r2,zero,200610c <___vfprintf_internal_r+0x189c>
 2006a10:	0005883a 	mov	r2,zero
 2006a14:	003dbd06 	br	200610c <___vfprintf_internal_r+0x189c>
 2006a18:	2000201e 	bne	r4,zero,2006a9c <___vfprintf_internal_r+0x222c>
 2006a1c:	9480004c 	andi	r18,r18,1
 2006a20:	90001e1e 	bne	r18,zero,2006a9c <___vfprintf_internal_r+0x222c>
 2006a24:	00800044 	movi	r2,1
 2006a28:	d8802b15 	stw	r2,172(sp)
 2006a2c:	003db706 	br	200610c <___vfprintf_internal_r+0x189c>
 2006a30:	00800b44 	movi	r2,45
 2006a34:	05adc83a 	sub	r22,zero,r22
 2006a38:	d8802305 	stb	r2,140(sp)
 2006a3c:	003f3f06 	br	200673c <___vfprintf_internal_r+0x1ecc>
 2006a40:	0005883a 	mov	r2,zero
 2006a44:	003f5206 	br	2006790 <___vfprintf_internal_r+0x1f20>
 2006a48:	90a4703a 	and	r18,r18,r2
 2006a4c:	903f4e26 	beq	r18,zero,2006788 <___vfprintf_internal_r+0x1f18>
 2006a50:	003f4a06 	br	200677c <___vfprintf_internal_r+0x1f0c>
 2006a54:	00800084 	movi	r2,2
 2006a58:	10c5c83a 	sub	r2,r2,r3
 2006a5c:	003f8406 	br	2006870 <___vfprintf_internal_r+0x2000>
 2006a60:	d9402e17 	ldw	r5,184(sp)
 2006a64:	d9002e17 	ldw	r4,184(sp)
 2006a68:	ac400043 	ldbu	r17,1(r21)
 2006a6c:	29400017 	ldw	r5,0(r5)
 2006a70:	20800104 	addi	r2,r4,4
 2006a74:	d8802e15 	stw	r2,184(sp)
 2006a78:	d9402a15 	stw	r5,168(sp)
 2006a7c:	182b883a 	mov	r21,r3
 2006a80:	283e7b0e 	bge	r5,zero,2006470 <___vfprintf_internal_r+0x1c00>
 2006a84:	8c403fcc 	andi	r17,r17,255
 2006a88:	017fffc4 	movi	r5,-1
 2006a8c:	8c40201c 	xori	r17,r17,128
 2006a90:	d9402a15 	stw	r5,168(sp)
 2006a94:	8c7fe004 	addi	r17,r17,-128
 2006a98:	0037d706 	br	20049f8 <___vfprintf_internal_r+0x188>
 2006a9c:	d8c02a17 	ldw	r3,168(sp)
 2006aa0:	18c00084 	addi	r3,r3,2
 2006aa4:	d8c02b15 	stw	r3,172(sp)
 2006aa8:	1805883a 	mov	r2,r3
 2006aac:	183d970e 	bge	r3,zero,200610c <___vfprintf_internal_r+0x189c>
 2006ab0:	003fd706 	br	2006a10 <___vfprintf_internal_r+0x21a0>
 2006ab4:	0005883a 	mov	r2,zero
 2006ab8:	003f8f06 	br	20068f8 <___vfprintf_internal_r+0x2088>
 2006abc:	9080004c 	andi	r2,r18,1
 2006ac0:	103f821e 	bne	r2,zero,20068cc <___vfprintf_internal_r+0x205c>
 2006ac4:	d8802117 	ldw	r2,132(sp)
 2006ac8:	1405c83a 	sub	r2,r2,r16
 2006acc:	d8803315 	stw	r2,204(sp)
 2006ad0:	b47ef426 	beq	r22,r17,20066a4 <___vfprintf_internal_r+0x1e34>
 2006ad4:	dd802617 	ldw	r22,152(sp)
 2006ad8:	003f1206 	br	2006724 <___vfprintf_internal_r+0x1eb4>
 2006adc:	d8c02b03 	ldbu	r3,172(sp)
 2006ae0:	d8c02785 	stb	r3,158(sp)
 2006ae4:	0038df06 	br	2004e64 <___vfprintf_internal_r+0x5f4>
 2006ae8:	d8c02b03 	ldbu	r3,172(sp)
 2006aec:	d8c02785 	stb	r3,158(sp)
 2006af0:	0038aa06 	br	2004d9c <___vfprintf_internal_r+0x52c>
 2006af4:	d8c02b03 	ldbu	r3,172(sp)
 2006af8:	d8c02785 	stb	r3,158(sp)
 2006afc:	003a4306 	br	200540c <___vfprintf_internal_r+0xb9c>
 2006b00:	d8c02b03 	ldbu	r3,172(sp)
 2006b04:	d8c02785 	stb	r3,158(sp)
 2006b08:	003af506 	br	20056e0 <___vfprintf_internal_r+0xe70>
 2006b0c:	0005883a 	mov	r2,zero
 2006b10:	003d7b06 	br	2006100 <___vfprintf_internal_r+0x1890>
 2006b14:	d8802344 	addi	r2,sp,141
 2006b18:	003f1006 	br	200675c <___vfprintf_internal_r+0x1eec>
 2006b1c:	d8c02b03 	ldbu	r3,172(sp)
 2006b20:	d8c02785 	stb	r3,158(sp)
 2006b24:	0038fd06 	br	2004f1c <___vfprintf_internal_r+0x6ac>
 2006b28:	d8c02b03 	ldbu	r3,172(sp)
 2006b2c:	d8c02785 	stb	r3,158(sp)
 2006b30:	003a9706 	br	2005590 <___vfprintf_internal_r+0xd20>
 2006b34:	d8c02b03 	ldbu	r3,172(sp)
 2006b38:	d8c02785 	stb	r3,158(sp)
 2006b3c:	003a1806 	br	20053a0 <___vfprintf_internal_r+0xb30>
 2006b40:	d8c02b03 	ldbu	r3,172(sp)
 2006b44:	d8c02785 	stb	r3,158(sp)
 2006b48:	003abe06 	br	2005644 <___vfprintf_internal_r+0xdd4>

02006b4c <__vfprintf_internal>:
 2006b4c:	008080b4 	movhi	r2,514
 2006b50:	10b50804 	addi	r2,r2,-11232
 2006b54:	300f883a 	mov	r7,r6
 2006b58:	280d883a 	mov	r6,r5
 2006b5c:	200b883a 	mov	r5,r4
 2006b60:	11000017 	ldw	r4,0(r2)
 2006b64:	20048701 	jmpi	2004870 <___vfprintf_internal_r>

02006b68 <__sbprintf>:
 2006b68:	2880030b 	ldhu	r2,12(r5)
 2006b6c:	2ac01917 	ldw	r11,100(r5)
 2006b70:	2a80038b 	ldhu	r10,14(r5)
 2006b74:	2a400717 	ldw	r9,28(r5)
 2006b78:	2a000917 	ldw	r8,36(r5)
 2006b7c:	defee204 	addi	sp,sp,-1144
 2006b80:	00c10004 	movi	r3,1024
 2006b84:	dc011a15 	stw	r16,1128(sp)
 2006b88:	10bfff4c 	andi	r2,r2,65533
 2006b8c:	2821883a 	mov	r16,r5
 2006b90:	d8cb883a 	add	r5,sp,r3
 2006b94:	dc811c15 	stw	r18,1136(sp)
 2006b98:	dc411b15 	stw	r17,1132(sp)
 2006b9c:	dfc11d15 	stw	ra,1140(sp)
 2006ba0:	2025883a 	mov	r18,r4
 2006ba4:	d881030d 	sth	r2,1036(sp)
 2006ba8:	dac11915 	stw	r11,1124(sp)
 2006bac:	da81038d 	sth	r10,1038(sp)
 2006bb0:	da410715 	stw	r9,1052(sp)
 2006bb4:	da010915 	stw	r8,1060(sp)
 2006bb8:	dec10015 	stw	sp,1024(sp)
 2006bbc:	dec10415 	stw	sp,1040(sp)
 2006bc0:	d8c10215 	stw	r3,1032(sp)
 2006bc4:	d8c10515 	stw	r3,1044(sp)
 2006bc8:	d8010615 	stw	zero,1048(sp)
 2006bcc:	20048700 	call	2004870 <___vfprintf_internal_r>
 2006bd0:	1023883a 	mov	r17,r2
 2006bd4:	10000416 	blt	r2,zero,2006be8 <__sbprintf+0x80>
 2006bd8:	d9410004 	addi	r5,sp,1024
 2006bdc:	9009883a 	mov	r4,r18
 2006be0:	20088440 	call	2008844 <_fflush_r>
 2006be4:	10000d1e 	bne	r2,zero,2006c1c <__sbprintf+0xb4>
 2006be8:	d881030b 	ldhu	r2,1036(sp)
 2006bec:	1080100c 	andi	r2,r2,64
 2006bf0:	10000326 	beq	r2,zero,2006c00 <__sbprintf+0x98>
 2006bf4:	8080030b 	ldhu	r2,12(r16)
 2006bf8:	10801014 	ori	r2,r2,64
 2006bfc:	8080030d 	sth	r2,12(r16)
 2006c00:	8805883a 	mov	r2,r17
 2006c04:	dfc11d17 	ldw	ra,1140(sp)
 2006c08:	dc811c17 	ldw	r18,1136(sp)
 2006c0c:	dc411b17 	ldw	r17,1132(sp)
 2006c10:	dc011a17 	ldw	r16,1128(sp)
 2006c14:	dec11e04 	addi	sp,sp,1144
 2006c18:	f800283a 	ret
 2006c1c:	047fffc4 	movi	r17,-1
 2006c20:	003ff106 	br	2006be8 <__sbprintf+0x80>

02006c24 <__swsetup_r>:
 2006c24:	008080b4 	movhi	r2,514
 2006c28:	defffd04 	addi	sp,sp,-12
 2006c2c:	10b50804 	addi	r2,r2,-11232
 2006c30:	dc400115 	stw	r17,4(sp)
 2006c34:	2023883a 	mov	r17,r4
 2006c38:	11000017 	ldw	r4,0(r2)
 2006c3c:	dc000015 	stw	r16,0(sp)
 2006c40:	dfc00215 	stw	ra,8(sp)
 2006c44:	2821883a 	mov	r16,r5
 2006c48:	20000226 	beq	r4,zero,2006c54 <__swsetup_r+0x30>
 2006c4c:	20800e17 	ldw	r2,56(r4)
 2006c50:	10003126 	beq	r2,zero,2006d18 <__swsetup_r+0xf4>
 2006c54:	8080030b 	ldhu	r2,12(r16)
 2006c58:	10c0020c 	andi	r3,r2,8
 2006c5c:	1009883a 	mov	r4,r2
 2006c60:	18000f26 	beq	r3,zero,2006ca0 <__swsetup_r+0x7c>
 2006c64:	80c00417 	ldw	r3,16(r16)
 2006c68:	18001526 	beq	r3,zero,2006cc0 <__swsetup_r+0x9c>
 2006c6c:	1100004c 	andi	r4,r2,1
 2006c70:	20001c1e 	bne	r4,zero,2006ce4 <__swsetup_r+0xc0>
 2006c74:	1080008c 	andi	r2,r2,2
 2006c78:	1000291e 	bne	r2,zero,2006d20 <__swsetup_r+0xfc>
 2006c7c:	80800517 	ldw	r2,20(r16)
 2006c80:	80800215 	stw	r2,8(r16)
 2006c84:	18001c26 	beq	r3,zero,2006cf8 <__swsetup_r+0xd4>
 2006c88:	0005883a 	mov	r2,zero
 2006c8c:	dfc00217 	ldw	ra,8(sp)
 2006c90:	dc400117 	ldw	r17,4(sp)
 2006c94:	dc000017 	ldw	r16,0(sp)
 2006c98:	dec00304 	addi	sp,sp,12
 2006c9c:	f800283a 	ret
 2006ca0:	2080040c 	andi	r2,r4,16
 2006ca4:	10002e26 	beq	r2,zero,2006d60 <__swsetup_r+0x13c>
 2006ca8:	2080010c 	andi	r2,r4,4
 2006cac:	10001e1e 	bne	r2,zero,2006d28 <__swsetup_r+0x104>
 2006cb0:	80c00417 	ldw	r3,16(r16)
 2006cb4:	20800214 	ori	r2,r4,8
 2006cb8:	8080030d 	sth	r2,12(r16)
 2006cbc:	183feb1e 	bne	r3,zero,2006c6c <__swsetup_r+0x48>
 2006cc0:	1100a00c 	andi	r4,r2,640
 2006cc4:	01408004 	movi	r5,512
 2006cc8:	217fe826 	beq	r4,r5,2006c6c <__swsetup_r+0x48>
 2006ccc:	800b883a 	mov	r5,r16
 2006cd0:	8809883a 	mov	r4,r17
 2006cd4:	20097e00 	call	20097e0 <__smakebuf_r>
 2006cd8:	8080030b 	ldhu	r2,12(r16)
 2006cdc:	80c00417 	ldw	r3,16(r16)
 2006ce0:	003fe206 	br	2006c6c <__swsetup_r+0x48>
 2006ce4:	80800517 	ldw	r2,20(r16)
 2006ce8:	80000215 	stw	zero,8(r16)
 2006cec:	0085c83a 	sub	r2,zero,r2
 2006cf0:	80800615 	stw	r2,24(r16)
 2006cf4:	183fe41e 	bne	r3,zero,2006c88 <__swsetup_r+0x64>
 2006cf8:	80c0030b 	ldhu	r3,12(r16)
 2006cfc:	0005883a 	mov	r2,zero
 2006d00:	1900200c 	andi	r4,r3,128
 2006d04:	203fe126 	beq	r4,zero,2006c8c <__swsetup_r+0x68>
 2006d08:	18c01014 	ori	r3,r3,64
 2006d0c:	80c0030d 	sth	r3,12(r16)
 2006d10:	00bfffc4 	movi	r2,-1
 2006d14:	003fdd06 	br	2006c8c <__swsetup_r+0x68>
 2006d18:	2008c300 	call	2008c30 <__sinit>
 2006d1c:	003fcd06 	br	2006c54 <__swsetup_r+0x30>
 2006d20:	0005883a 	mov	r2,zero
 2006d24:	003fd606 	br	2006c80 <__swsetup_r+0x5c>
 2006d28:	81400c17 	ldw	r5,48(r16)
 2006d2c:	28000626 	beq	r5,zero,2006d48 <__swsetup_r+0x124>
 2006d30:	80801004 	addi	r2,r16,64
 2006d34:	28800326 	beq	r5,r2,2006d44 <__swsetup_r+0x120>
 2006d38:	8809883a 	mov	r4,r17
 2006d3c:	2008da40 	call	2008da4 <_free_r>
 2006d40:	8100030b 	ldhu	r4,12(r16)
 2006d44:	80000c15 	stw	zero,48(r16)
 2006d48:	80c00417 	ldw	r3,16(r16)
 2006d4c:	00bff6c4 	movi	r2,-37
 2006d50:	1108703a 	and	r4,r2,r4
 2006d54:	80000115 	stw	zero,4(r16)
 2006d58:	80c00015 	stw	r3,0(r16)
 2006d5c:	003fd506 	br	2006cb4 <__swsetup_r+0x90>
 2006d60:	00800244 	movi	r2,9
 2006d64:	88800015 	stw	r2,0(r17)
 2006d68:	20801014 	ori	r2,r4,64
 2006d6c:	8080030d 	sth	r2,12(r16)
 2006d70:	00bfffc4 	movi	r2,-1
 2006d74:	003fc506 	br	2006c8c <__swsetup_r+0x68>

02006d78 <quorem>:
 2006d78:	defff204 	addi	sp,sp,-56
 2006d7c:	ddc00b15 	stw	r23,44(sp)
 2006d80:	20800417 	ldw	r2,16(r4)
 2006d84:	2dc00417 	ldw	r23,16(r5)
 2006d88:	dfc00d15 	stw	ra,52(sp)
 2006d8c:	df000c15 	stw	fp,48(sp)
 2006d90:	dd800a15 	stw	r22,40(sp)
 2006d94:	dd400915 	stw	r21,36(sp)
 2006d98:	dd000815 	stw	r20,32(sp)
 2006d9c:	dcc00715 	stw	r19,28(sp)
 2006da0:	dc800615 	stw	r18,24(sp)
 2006da4:	dc400515 	stw	r17,20(sp)
 2006da8:	dc000415 	stw	r16,16(sp)
 2006dac:	15c07a16 	blt	r2,r23,2006f98 <quorem+0x220>
 2006db0:	bdffffc4 	addi	r23,r23,-1
 2006db4:	bde9883a 	add	r20,r23,r23
 2006db8:	28c00504 	addi	r3,r5,20
 2006dbc:	a529883a 	add	r20,r20,r20
 2006dc0:	1d39883a 	add	fp,r3,r20
 2006dc4:	24c00504 	addi	r19,r4,20
 2006dc8:	d9400215 	stw	r5,8(sp)
 2006dcc:	9d29883a 	add	r20,r19,r20
 2006dd0:	e1400017 	ldw	r5,0(fp)
 2006dd4:	d9000015 	stw	r4,0(sp)
 2006dd8:	a1000017 	ldw	r4,0(r20)
 2006ddc:	29400044 	addi	r5,r5,1
 2006de0:	d8c00115 	stw	r3,4(sp)
 2006de4:	dd000315 	stw	r20,12(sp)
 2006de8:	20045cc0 	call	20045cc <__udivsi3>
 2006dec:	1025883a 	mov	r18,r2
 2006df0:	10003026 	beq	r2,zero,2006eb4 <quorem+0x13c>
 2006df4:	dc400117 	ldw	r17,4(sp)
 2006df8:	9829883a 	mov	r20,r19
 2006dfc:	002d883a 	mov	r22,zero
 2006e00:	0021883a 	mov	r16,zero
 2006e04:	8d400017 	ldw	r21,0(r17)
 2006e08:	900b883a 	mov	r5,r18
 2006e0c:	8c400104 	addi	r17,r17,4
 2006e10:	a93fffcc 	andi	r4,r21,65535
 2006e14:	20019440 	call	2001944 <__mulsi3>
 2006e18:	a808d43a 	srli	r4,r21,16
 2006e1c:	900b883a 	mov	r5,r18
 2006e20:	15ad883a 	add	r22,r2,r22
 2006e24:	20019440 	call	2001944 <__mulsi3>
 2006e28:	a1000017 	ldw	r4,0(r20)
 2006e2c:	b00cd43a 	srli	r6,r22,16
 2006e30:	b0ffffcc 	andi	r3,r22,65535
 2006e34:	217fffcc 	andi	r5,r4,65535
 2006e38:	2c21883a 	add	r16,r5,r16
 2006e3c:	80c7c83a 	sub	r3,r16,r3
 2006e40:	2008d43a 	srli	r4,r4,16
 2006e44:	1185883a 	add	r2,r2,r6
 2006e48:	1821d43a 	srai	r16,r3,16
 2006e4c:	117fffcc 	andi	r5,r2,65535
 2006e50:	2149c83a 	sub	r4,r4,r5
 2006e54:	2421883a 	add	r16,r4,r16
 2006e58:	8008943a 	slli	r4,r16,16
 2006e5c:	18ffffcc 	andi	r3,r3,65535
 2006e60:	102cd43a 	srli	r22,r2,16
 2006e64:	20c8b03a 	or	r4,r4,r3
 2006e68:	a1000015 	stw	r4,0(r20)
 2006e6c:	8021d43a 	srai	r16,r16,16
 2006e70:	a5000104 	addi	r20,r20,4
 2006e74:	e47fe32e 	bgeu	fp,r17,2006e04 <quorem+0x8c>
 2006e78:	d8c00317 	ldw	r3,12(sp)
 2006e7c:	18800017 	ldw	r2,0(r3)
 2006e80:	10000c1e 	bne	r2,zero,2006eb4 <quorem+0x13c>
 2006e84:	18bfff04 	addi	r2,r3,-4
 2006e88:	9880082e 	bgeu	r19,r2,2006eac <quorem+0x134>
 2006e8c:	18ffff17 	ldw	r3,-4(r3)
 2006e90:	18000326 	beq	r3,zero,2006ea0 <quorem+0x128>
 2006e94:	00000506 	br	2006eac <quorem+0x134>
 2006e98:	10c00017 	ldw	r3,0(r2)
 2006e9c:	1800031e 	bne	r3,zero,2006eac <quorem+0x134>
 2006ea0:	10bfff04 	addi	r2,r2,-4
 2006ea4:	bdffffc4 	addi	r23,r23,-1
 2006ea8:	98bffb36 	bltu	r19,r2,2006e98 <quorem+0x120>
 2006eac:	d8c00017 	ldw	r3,0(sp)
 2006eb0:	1dc00415 	stw	r23,16(r3)
 2006eb4:	d9400217 	ldw	r5,8(sp)
 2006eb8:	d9000017 	ldw	r4,0(sp)
 2006ebc:	200afdc0 	call	200afdc <__mcmp>
 2006ec0:	10002816 	blt	r2,zero,2006f64 <quorem+0x1ec>
 2006ec4:	dc400117 	ldw	r17,4(sp)
 2006ec8:	94800044 	addi	r18,r18,1
 2006ecc:	980d883a 	mov	r6,r19
 2006ed0:	0007883a 	mov	r3,zero
 2006ed4:	31000017 	ldw	r4,0(r6)
 2006ed8:	89400017 	ldw	r5,0(r17)
 2006edc:	31800104 	addi	r6,r6,4
 2006ee0:	20bfffcc 	andi	r2,r4,65535
 2006ee4:	10c7883a 	add	r3,r2,r3
 2006ee8:	28bfffcc 	andi	r2,r5,65535
 2006eec:	1885c83a 	sub	r2,r3,r2
 2006ef0:	280ad43a 	srli	r5,r5,16
 2006ef4:	2008d43a 	srli	r4,r4,16
 2006ef8:	1007d43a 	srai	r3,r2,16
 2006efc:	10bfffcc 	andi	r2,r2,65535
 2006f00:	2149c83a 	sub	r4,r4,r5
 2006f04:	20c9883a 	add	r4,r4,r3
 2006f08:	200a943a 	slli	r5,r4,16
 2006f0c:	8c400104 	addi	r17,r17,4
 2006f10:	2007d43a 	srai	r3,r4,16
 2006f14:	2884b03a 	or	r2,r5,r2
 2006f18:	30bfff15 	stw	r2,-4(r6)
 2006f1c:	e47fed2e 	bgeu	fp,r17,2006ed4 <quorem+0x15c>
 2006f20:	bdc5883a 	add	r2,r23,r23
 2006f24:	1085883a 	add	r2,r2,r2
 2006f28:	9887883a 	add	r3,r19,r2
 2006f2c:	18800017 	ldw	r2,0(r3)
 2006f30:	10000c1e 	bne	r2,zero,2006f64 <quorem+0x1ec>
 2006f34:	18bfff04 	addi	r2,r3,-4
 2006f38:	9880082e 	bgeu	r19,r2,2006f5c <quorem+0x1e4>
 2006f3c:	18ffff17 	ldw	r3,-4(r3)
 2006f40:	18000326 	beq	r3,zero,2006f50 <quorem+0x1d8>
 2006f44:	00000506 	br	2006f5c <quorem+0x1e4>
 2006f48:	10c00017 	ldw	r3,0(r2)
 2006f4c:	1800031e 	bne	r3,zero,2006f5c <quorem+0x1e4>
 2006f50:	10bfff04 	addi	r2,r2,-4
 2006f54:	bdffffc4 	addi	r23,r23,-1
 2006f58:	98bffb36 	bltu	r19,r2,2006f48 <quorem+0x1d0>
 2006f5c:	d8c00017 	ldw	r3,0(sp)
 2006f60:	1dc00415 	stw	r23,16(r3)
 2006f64:	9005883a 	mov	r2,r18
 2006f68:	dfc00d17 	ldw	ra,52(sp)
 2006f6c:	df000c17 	ldw	fp,48(sp)
 2006f70:	ddc00b17 	ldw	r23,44(sp)
 2006f74:	dd800a17 	ldw	r22,40(sp)
 2006f78:	dd400917 	ldw	r21,36(sp)
 2006f7c:	dd000817 	ldw	r20,32(sp)
 2006f80:	dcc00717 	ldw	r19,28(sp)
 2006f84:	dc800617 	ldw	r18,24(sp)
 2006f88:	dc400517 	ldw	r17,20(sp)
 2006f8c:	dc000417 	ldw	r16,16(sp)
 2006f90:	dec00e04 	addi	sp,sp,56
 2006f94:	f800283a 	ret
 2006f98:	0005883a 	mov	r2,zero
 2006f9c:	003ff206 	br	2006f68 <quorem+0x1f0>

02006fa0 <_dtoa_r>:
 2006fa0:	20801017 	ldw	r2,64(r4)
 2006fa4:	deffde04 	addi	sp,sp,-136
 2006fa8:	df002015 	stw	fp,128(sp)
 2006fac:	dcc01b15 	stw	r19,108(sp)
 2006fb0:	dc801a15 	stw	r18,104(sp)
 2006fb4:	dc401915 	stw	r17,100(sp)
 2006fb8:	dc001815 	stw	r16,96(sp)
 2006fbc:	dfc02115 	stw	ra,132(sp)
 2006fc0:	ddc01f15 	stw	r23,124(sp)
 2006fc4:	dd801e15 	stw	r22,120(sp)
 2006fc8:	dd401d15 	stw	r21,116(sp)
 2006fcc:	dd001c15 	stw	r20,112(sp)
 2006fd0:	d9c00315 	stw	r7,12(sp)
 2006fd4:	2039883a 	mov	fp,r4
 2006fd8:	3023883a 	mov	r17,r6
 2006fdc:	2825883a 	mov	r18,r5
 2006fe0:	dc002417 	ldw	r16,144(sp)
 2006fe4:	3027883a 	mov	r19,r6
 2006fe8:	10000826 	beq	r2,zero,200700c <_dtoa_r+0x6c>
 2006fec:	21801117 	ldw	r6,68(r4)
 2006ff0:	00c00044 	movi	r3,1
 2006ff4:	100b883a 	mov	r5,r2
 2006ff8:	1986983a 	sll	r3,r3,r6
 2006ffc:	11800115 	stw	r6,4(r2)
 2007000:	10c00215 	stw	r3,8(r2)
 2007004:	200a7000 	call	200a700 <_Bfree>
 2007008:	e0001015 	stw	zero,64(fp)
 200700c:	88002e16 	blt	r17,zero,20070c8 <_dtoa_r+0x128>
 2007010:	80000015 	stw	zero,0(r16)
 2007014:	889ffc2c 	andhi	r2,r17,32752
 2007018:	00dffc34 	movhi	r3,32752
 200701c:	10c01c26 	beq	r2,r3,2007090 <_dtoa_r+0xf0>
 2007020:	000d883a 	mov	r6,zero
 2007024:	000f883a 	mov	r7,zero
 2007028:	9009883a 	mov	r4,r18
 200702c:	980b883a 	mov	r5,r19
 2007030:	200f4040 	call	200f404 <__eqdf2>
 2007034:	10002b1e 	bne	r2,zero,20070e4 <_dtoa_r+0x144>
 2007038:	d9c02317 	ldw	r7,140(sp)
 200703c:	00800044 	movi	r2,1
 2007040:	38800015 	stw	r2,0(r7)
 2007044:	d8802517 	ldw	r2,148(sp)
 2007048:	10019e26 	beq	r2,zero,20076c4 <_dtoa_r+0x724>
 200704c:	d8c02517 	ldw	r3,148(sp)
 2007050:	008080b4 	movhi	r2,514
 2007054:	10ada344 	addi	r2,r2,-18803
 2007058:	18800015 	stw	r2,0(r3)
 200705c:	10bfffc4 	addi	r2,r2,-1
 2007060:	dfc02117 	ldw	ra,132(sp)
 2007064:	df002017 	ldw	fp,128(sp)
 2007068:	ddc01f17 	ldw	r23,124(sp)
 200706c:	dd801e17 	ldw	r22,120(sp)
 2007070:	dd401d17 	ldw	r21,116(sp)
 2007074:	dd001c17 	ldw	r20,112(sp)
 2007078:	dcc01b17 	ldw	r19,108(sp)
 200707c:	dc801a17 	ldw	r18,104(sp)
 2007080:	dc401917 	ldw	r17,100(sp)
 2007084:	dc001817 	ldw	r16,96(sp)
 2007088:	dec02204 	addi	sp,sp,136
 200708c:	f800283a 	ret
 2007090:	d8c02317 	ldw	r3,140(sp)
 2007094:	0089c3c4 	movi	r2,9999
 2007098:	18800015 	stw	r2,0(r3)
 200709c:	90017726 	beq	r18,zero,200767c <_dtoa_r+0x6dc>
 20070a0:	008080b4 	movhi	r2,514
 20070a4:	10adaf04 	addi	r2,r2,-18756
 20070a8:	d9002517 	ldw	r4,148(sp)
 20070ac:	203fec26 	beq	r4,zero,2007060 <_dtoa_r+0xc0>
 20070b0:	10c000c7 	ldb	r3,3(r2)
 20070b4:	1801781e 	bne	r3,zero,2007698 <_dtoa_r+0x6f8>
 20070b8:	10c000c4 	addi	r3,r2,3
 20070bc:	d9802517 	ldw	r6,148(sp)
 20070c0:	30c00015 	stw	r3,0(r6)
 20070c4:	003fe606 	br	2007060 <_dtoa_r+0xc0>
 20070c8:	04e00034 	movhi	r19,32768
 20070cc:	9cffffc4 	addi	r19,r19,-1
 20070d0:	00800044 	movi	r2,1
 20070d4:	8ce6703a 	and	r19,r17,r19
 20070d8:	80800015 	stw	r2,0(r16)
 20070dc:	9823883a 	mov	r17,r19
 20070e0:	003fcc06 	br	2007014 <_dtoa_r+0x74>
 20070e4:	d8800204 	addi	r2,sp,8
 20070e8:	d8800015 	stw	r2,0(sp)
 20070ec:	d9c00104 	addi	r7,sp,4
 20070f0:	900b883a 	mov	r5,r18
 20070f4:	980d883a 	mov	r6,r19
 20070f8:	e009883a 	mov	r4,fp
 20070fc:	8820d53a 	srli	r16,r17,20
 2007100:	200b3a80 	call	200b3a8 <__d2b>
 2007104:	d8800915 	stw	r2,36(sp)
 2007108:	8001651e 	bne	r16,zero,20076a0 <_dtoa_r+0x700>
 200710c:	dd800217 	ldw	r22,8(sp)
 2007110:	dc000117 	ldw	r16,4(sp)
 2007114:	00800804 	movi	r2,32
 2007118:	b421883a 	add	r16,r22,r16
 200711c:	80c10c84 	addi	r3,r16,1074
 2007120:	10c2d10e 	bge	r2,r3,2007c68 <_dtoa_r+0xcc8>
 2007124:	00801004 	movi	r2,64
 2007128:	81010484 	addi	r4,r16,1042
 200712c:	10c7c83a 	sub	r3,r2,r3
 2007130:	9108d83a 	srl	r4,r18,r4
 2007134:	88e2983a 	sll	r17,r17,r3
 2007138:	2448b03a 	or	r4,r4,r17
 200713c:	200ffd80 	call	200ffd8 <__floatunsidf>
 2007140:	017f8434 	movhi	r5,65040
 2007144:	01800044 	movi	r6,1
 2007148:	1009883a 	mov	r4,r2
 200714c:	194b883a 	add	r5,r3,r5
 2007150:	843fffc4 	addi	r16,r16,-1
 2007154:	d9801115 	stw	r6,68(sp)
 2007158:	000d883a 	mov	r6,zero
 200715c:	01cffe34 	movhi	r7,16376
 2007160:	200f5800 	call	200f580 <__subdf3>
 2007164:	0198dbf4 	movhi	r6,25455
 2007168:	01cff4f4 	movhi	r7,16339
 200716c:	3190d844 	addi	r6,r6,17249
 2007170:	39e1e9c4 	addi	r7,r7,-30809
 2007174:	1009883a 	mov	r4,r2
 2007178:	180b883a 	mov	r5,r3
 200717c:	200394c0 	call	200394c <__muldf3>
 2007180:	01a2d874 	movhi	r6,35681
 2007184:	01cff1f4 	movhi	r7,16327
 2007188:	31b22cc4 	addi	r6,r6,-14157
 200718c:	39e28a04 	addi	r7,r7,-30168
 2007190:	180b883a 	mov	r5,r3
 2007194:	1009883a 	mov	r4,r2
 2007198:	200eb580 	call	200eb58 <__adddf3>
 200719c:	8009883a 	mov	r4,r16
 20071a0:	1029883a 	mov	r20,r2
 20071a4:	1823883a 	mov	r17,r3
 20071a8:	200fefc0 	call	200fefc <__floatsidf>
 20071ac:	019427f4 	movhi	r6,20639
 20071b0:	01cff4f4 	movhi	r7,16339
 20071b4:	319e7ec4 	addi	r6,r6,31227
 20071b8:	39d104c4 	addi	r7,r7,17427
 20071bc:	1009883a 	mov	r4,r2
 20071c0:	180b883a 	mov	r5,r3
 20071c4:	200394c0 	call	200394c <__muldf3>
 20071c8:	100d883a 	mov	r6,r2
 20071cc:	180f883a 	mov	r7,r3
 20071d0:	a009883a 	mov	r4,r20
 20071d4:	880b883a 	mov	r5,r17
 20071d8:	200eb580 	call	200eb58 <__adddf3>
 20071dc:	1009883a 	mov	r4,r2
 20071e0:	180b883a 	mov	r5,r3
 20071e4:	1029883a 	mov	r20,r2
 20071e8:	1823883a 	mov	r17,r3
 20071ec:	200fe7c0 	call	200fe7c <__fixdfsi>
 20071f0:	000d883a 	mov	r6,zero
 20071f4:	000f883a 	mov	r7,zero
 20071f8:	a009883a 	mov	r4,r20
 20071fc:	880b883a 	mov	r5,r17
 2007200:	d8800515 	stw	r2,20(sp)
 2007204:	200f48c0 	call	200f48c <__ledf2>
 2007208:	10028716 	blt	r2,zero,2007c28 <_dtoa_r+0xc88>
 200720c:	d8c00517 	ldw	r3,20(sp)
 2007210:	00800584 	movi	r2,22
 2007214:	10c27536 	bltu	r2,r3,2007bec <_dtoa_r+0xc4c>
 2007218:	180490fa 	slli	r2,r3,3
 200721c:	00c080b4 	movhi	r3,514
 2007220:	18edca04 	addi	r3,r3,-18648
 2007224:	1885883a 	add	r2,r3,r2
 2007228:	11000017 	ldw	r4,0(r2)
 200722c:	11400117 	ldw	r5,4(r2)
 2007230:	900d883a 	mov	r6,r18
 2007234:	980f883a 	mov	r7,r19
 2007238:	20038700 	call	2003870 <__gedf2>
 200723c:	00828d0e 	bge	zero,r2,2007c74 <_dtoa_r+0xcd4>
 2007240:	d9000517 	ldw	r4,20(sp)
 2007244:	d8000e15 	stw	zero,56(sp)
 2007248:	213fffc4 	addi	r4,r4,-1
 200724c:	d9000515 	stw	r4,20(sp)
 2007250:	b42dc83a 	sub	r22,r22,r16
 2007254:	b5bfffc4 	addi	r22,r22,-1
 2007258:	b0026f16 	blt	r22,zero,2007c18 <_dtoa_r+0xc78>
 200725c:	d8000815 	stw	zero,32(sp)
 2007260:	d9c00517 	ldw	r7,20(sp)
 2007264:	38026416 	blt	r7,zero,2007bf8 <_dtoa_r+0xc58>
 2007268:	b1ed883a 	add	r22,r22,r7
 200726c:	d9c00d15 	stw	r7,52(sp)
 2007270:	d8000a15 	stw	zero,40(sp)
 2007274:	d9800317 	ldw	r6,12(sp)
 2007278:	00800244 	movi	r2,9
 200727c:	11811436 	bltu	r2,r6,20076d0 <_dtoa_r+0x730>
 2007280:	00800144 	movi	r2,5
 2007284:	1184e10e 	bge	r2,r6,200860c <_dtoa_r+0x166c>
 2007288:	31bfff04 	addi	r6,r6,-4
 200728c:	d9800315 	stw	r6,12(sp)
 2007290:	0023883a 	mov	r17,zero
 2007294:	d9800317 	ldw	r6,12(sp)
 2007298:	008000c4 	movi	r2,3
 200729c:	30836726 	beq	r6,r2,200803c <_dtoa_r+0x109c>
 20072a0:	1183410e 	bge	r2,r6,2007fa8 <_dtoa_r+0x1008>
 20072a4:	d9c00317 	ldw	r7,12(sp)
 20072a8:	00800104 	movi	r2,4
 20072ac:	38827c26 	beq	r7,r2,2007ca0 <_dtoa_r+0xd00>
 20072b0:	00800144 	movi	r2,5
 20072b4:	3884c41e 	bne	r7,r2,20085c8 <_dtoa_r+0x1628>
 20072b8:	00800044 	movi	r2,1
 20072bc:	d8800b15 	stw	r2,44(sp)
 20072c0:	d8c00517 	ldw	r3,20(sp)
 20072c4:	d9002217 	ldw	r4,136(sp)
 20072c8:	1907883a 	add	r3,r3,r4
 20072cc:	19800044 	addi	r6,r3,1
 20072d0:	d8c00c15 	stw	r3,48(sp)
 20072d4:	d9800615 	stw	r6,24(sp)
 20072d8:	0183a40e 	bge	zero,r6,200816c <_dtoa_r+0x11cc>
 20072dc:	d9800617 	ldw	r6,24(sp)
 20072e0:	3021883a 	mov	r16,r6
 20072e4:	e0001115 	stw	zero,68(fp)
 20072e8:	008005c4 	movi	r2,23
 20072ec:	1184c92e 	bgeu	r2,r6,2008614 <_dtoa_r+0x1674>
 20072f0:	00c00044 	movi	r3,1
 20072f4:	00800104 	movi	r2,4
 20072f8:	1085883a 	add	r2,r2,r2
 20072fc:	11000504 	addi	r4,r2,20
 2007300:	180b883a 	mov	r5,r3
 2007304:	18c00044 	addi	r3,r3,1
 2007308:	313ffb2e 	bgeu	r6,r4,20072f8 <_dtoa_r+0x358>
 200730c:	e1401115 	stw	r5,68(fp)
 2007310:	e009883a 	mov	r4,fp
 2007314:	200a6580 	call	200a658 <_Balloc>
 2007318:	d8800715 	stw	r2,28(sp)
 200731c:	e0801015 	stw	r2,64(fp)
 2007320:	00800384 	movi	r2,14
 2007324:	1400f736 	bltu	r2,r16,2007704 <_dtoa_r+0x764>
 2007328:	8800f626 	beq	r17,zero,2007704 <_dtoa_r+0x764>
 200732c:	d9c00517 	ldw	r7,20(sp)
 2007330:	01c39a0e 	bge	zero,r7,200819c <_dtoa_r+0x11fc>
 2007334:	388003cc 	andi	r2,r7,15
 2007338:	100490fa 	slli	r2,r2,3
 200733c:	382bd13a 	srai	r21,r7,4
 2007340:	00c080b4 	movhi	r3,514
 2007344:	18edca04 	addi	r3,r3,-18648
 2007348:	1885883a 	add	r2,r3,r2
 200734c:	a8c0040c 	andi	r3,r21,16
 2007350:	12400017 	ldw	r9,0(r2)
 2007354:	12000117 	ldw	r8,4(r2)
 2007358:	18037926 	beq	r3,zero,2008140 <_dtoa_r+0x11a0>
 200735c:	008080b4 	movhi	r2,514
 2007360:	10adc004 	addi	r2,r2,-18688
 2007364:	11800817 	ldw	r6,32(r2)
 2007368:	11c00917 	ldw	r7,36(r2)
 200736c:	9009883a 	mov	r4,r18
 2007370:	980b883a 	mov	r5,r19
 2007374:	da001715 	stw	r8,92(sp)
 2007378:	da401615 	stw	r9,88(sp)
 200737c:	2002ea00 	call	2002ea0 <__divdf3>
 2007380:	da001717 	ldw	r8,92(sp)
 2007384:	da401617 	ldw	r9,88(sp)
 2007388:	ad4003cc 	andi	r21,r21,15
 200738c:	040000c4 	movi	r16,3
 2007390:	1023883a 	mov	r17,r2
 2007394:	1829883a 	mov	r20,r3
 2007398:	a8001126 	beq	r21,zero,20073e0 <_dtoa_r+0x440>
 200739c:	05c080b4 	movhi	r23,514
 20073a0:	bdedc004 	addi	r23,r23,-18688
 20073a4:	4805883a 	mov	r2,r9
 20073a8:	4007883a 	mov	r3,r8
 20073ac:	a980004c 	andi	r6,r21,1
 20073b0:	1009883a 	mov	r4,r2
 20073b4:	a82bd07a 	srai	r21,r21,1
 20073b8:	180b883a 	mov	r5,r3
 20073bc:	30000426 	beq	r6,zero,20073d0 <_dtoa_r+0x430>
 20073c0:	b9800017 	ldw	r6,0(r23)
 20073c4:	b9c00117 	ldw	r7,4(r23)
 20073c8:	84000044 	addi	r16,r16,1
 20073cc:	200394c0 	call	200394c <__muldf3>
 20073d0:	bdc00204 	addi	r23,r23,8
 20073d4:	a83ff51e 	bne	r21,zero,20073ac <_dtoa_r+0x40c>
 20073d8:	1013883a 	mov	r9,r2
 20073dc:	1811883a 	mov	r8,r3
 20073e0:	480d883a 	mov	r6,r9
 20073e4:	400f883a 	mov	r7,r8
 20073e8:	8809883a 	mov	r4,r17
 20073ec:	a00b883a 	mov	r5,r20
 20073f0:	2002ea00 	call	2002ea0 <__divdf3>
 20073f4:	d8800f15 	stw	r2,60(sp)
 20073f8:	d8c01015 	stw	r3,64(sp)
 20073fc:	d8c00e17 	ldw	r3,56(sp)
 2007400:	18000626 	beq	r3,zero,200741c <_dtoa_r+0x47c>
 2007404:	d9000f17 	ldw	r4,60(sp)
 2007408:	d9401017 	ldw	r5,64(sp)
 200740c:	000d883a 	mov	r6,zero
 2007410:	01cffc34 	movhi	r7,16368
 2007414:	200f48c0 	call	200f48c <__ledf2>
 2007418:	10040b16 	blt	r2,zero,2008448 <_dtoa_r+0x14a8>
 200741c:	8009883a 	mov	r4,r16
 2007420:	200fefc0 	call	200fefc <__floatsidf>
 2007424:	d9800f17 	ldw	r6,60(sp)
 2007428:	d9c01017 	ldw	r7,64(sp)
 200742c:	1009883a 	mov	r4,r2
 2007430:	180b883a 	mov	r5,r3
 2007434:	200394c0 	call	200394c <__muldf3>
 2007438:	000d883a 	mov	r6,zero
 200743c:	01d00734 	movhi	r7,16412
 2007440:	1009883a 	mov	r4,r2
 2007444:	180b883a 	mov	r5,r3
 2007448:	200eb580 	call	200eb58 <__adddf3>
 200744c:	1021883a 	mov	r16,r2
 2007450:	d8800617 	ldw	r2,24(sp)
 2007454:	047f3034 	movhi	r17,64704
 2007458:	1c63883a 	add	r17,r3,r17
 200745c:	10031826 	beq	r2,zero,20080c0 <_dtoa_r+0x1120>
 2007460:	d8c00517 	ldw	r3,20(sp)
 2007464:	db000617 	ldw	r12,24(sp)
 2007468:	d8c01315 	stw	r3,76(sp)
 200746c:	d9000b17 	ldw	r4,44(sp)
 2007470:	20038f26 	beq	r4,zero,20082b0 <_dtoa_r+0x1310>
 2007474:	60bfffc4 	addi	r2,r12,-1
 2007478:	100490fa 	slli	r2,r2,3
 200747c:	00c080b4 	movhi	r3,514
 2007480:	18edca04 	addi	r3,r3,-18648
 2007484:	1885883a 	add	r2,r3,r2
 2007488:	11800017 	ldw	r6,0(r2)
 200748c:	11c00117 	ldw	r7,4(r2)
 2007490:	d8800717 	ldw	r2,28(sp)
 2007494:	0009883a 	mov	r4,zero
 2007498:	014ff834 	movhi	r5,16352
 200749c:	db001615 	stw	r12,88(sp)
 20074a0:	15c00044 	addi	r23,r2,1
 20074a4:	2002ea00 	call	2002ea0 <__divdf3>
 20074a8:	800d883a 	mov	r6,r16
 20074ac:	880f883a 	mov	r7,r17
 20074b0:	1009883a 	mov	r4,r2
 20074b4:	180b883a 	mov	r5,r3
 20074b8:	200f5800 	call	200f580 <__subdf3>
 20074bc:	d9401017 	ldw	r5,64(sp)
 20074c0:	d9000f17 	ldw	r4,60(sp)
 20074c4:	102b883a 	mov	r21,r2
 20074c8:	d8c01215 	stw	r3,72(sp)
 20074cc:	200fe7c0 	call	200fe7c <__fixdfsi>
 20074d0:	1009883a 	mov	r4,r2
 20074d4:	1029883a 	mov	r20,r2
 20074d8:	200fefc0 	call	200fefc <__floatsidf>
 20074dc:	d9000f17 	ldw	r4,60(sp)
 20074e0:	d9401017 	ldw	r5,64(sp)
 20074e4:	100d883a 	mov	r6,r2
 20074e8:	180f883a 	mov	r7,r3
 20074ec:	200f5800 	call	200f580 <__subdf3>
 20074f0:	1823883a 	mov	r17,r3
 20074f4:	d8c00717 	ldw	r3,28(sp)
 20074f8:	d9401217 	ldw	r5,72(sp)
 20074fc:	a2000c04 	addi	r8,r20,48
 2007500:	1021883a 	mov	r16,r2
 2007504:	1a000005 	stb	r8,0(r3)
 2007508:	800d883a 	mov	r6,r16
 200750c:	880f883a 	mov	r7,r17
 2007510:	a809883a 	mov	r4,r21
 2007514:	4029883a 	mov	r20,r8
 2007518:	20038700 	call	2003870 <__gedf2>
 200751c:	00841d16 	blt	zero,r2,2008594 <_dtoa_r+0x15f4>
 2007520:	800d883a 	mov	r6,r16
 2007524:	880f883a 	mov	r7,r17
 2007528:	0009883a 	mov	r4,zero
 200752c:	014ffc34 	movhi	r5,16368
 2007530:	200f5800 	call	200f580 <__subdf3>
 2007534:	d9401217 	ldw	r5,72(sp)
 2007538:	100d883a 	mov	r6,r2
 200753c:	180f883a 	mov	r7,r3
 2007540:	a809883a 	mov	r4,r21
 2007544:	20038700 	call	2003870 <__gedf2>
 2007548:	db001617 	ldw	r12,88(sp)
 200754c:	00840e16 	blt	zero,r2,2008588 <_dtoa_r+0x15e8>
 2007550:	00800044 	movi	r2,1
 2007554:	13006b0e 	bge	r2,r12,2007704 <_dtoa_r+0x764>
 2007558:	d9000717 	ldw	r4,28(sp)
 200755c:	dd800f15 	stw	r22,60(sp)
 2007560:	dcc01015 	stw	r19,64(sp)
 2007564:	2319883a 	add	r12,r4,r12
 2007568:	dcc01217 	ldw	r19,72(sp)
 200756c:	602d883a 	mov	r22,r12
 2007570:	dc801215 	stw	r18,72(sp)
 2007574:	b825883a 	mov	r18,r23
 2007578:	00000906 	br	20075a0 <_dtoa_r+0x600>
 200757c:	200f5800 	call	200f580 <__subdf3>
 2007580:	a80d883a 	mov	r6,r21
 2007584:	980f883a 	mov	r7,r19
 2007588:	1009883a 	mov	r4,r2
 200758c:	180b883a 	mov	r5,r3
 2007590:	200f48c0 	call	200f48c <__ledf2>
 2007594:	1003e816 	blt	r2,zero,2008538 <_dtoa_r+0x1598>
 2007598:	b825883a 	mov	r18,r23
 200759c:	bd83e926 	beq	r23,r22,2008544 <_dtoa_r+0x15a4>
 20075a0:	a809883a 	mov	r4,r21
 20075a4:	980b883a 	mov	r5,r19
 20075a8:	000d883a 	mov	r6,zero
 20075ac:	01d00934 	movhi	r7,16420
 20075b0:	200394c0 	call	200394c <__muldf3>
 20075b4:	000d883a 	mov	r6,zero
 20075b8:	01d00934 	movhi	r7,16420
 20075bc:	8009883a 	mov	r4,r16
 20075c0:	880b883a 	mov	r5,r17
 20075c4:	102b883a 	mov	r21,r2
 20075c8:	1827883a 	mov	r19,r3
 20075cc:	200394c0 	call	200394c <__muldf3>
 20075d0:	180b883a 	mov	r5,r3
 20075d4:	1009883a 	mov	r4,r2
 20075d8:	1821883a 	mov	r16,r3
 20075dc:	1023883a 	mov	r17,r2
 20075e0:	200fe7c0 	call	200fe7c <__fixdfsi>
 20075e4:	1009883a 	mov	r4,r2
 20075e8:	1029883a 	mov	r20,r2
 20075ec:	200fefc0 	call	200fefc <__floatsidf>
 20075f0:	8809883a 	mov	r4,r17
 20075f4:	800b883a 	mov	r5,r16
 20075f8:	100d883a 	mov	r6,r2
 20075fc:	180f883a 	mov	r7,r3
 2007600:	200f5800 	call	200f580 <__subdf3>
 2007604:	a5000c04 	addi	r20,r20,48
 2007608:	a80d883a 	mov	r6,r21
 200760c:	980f883a 	mov	r7,r19
 2007610:	1009883a 	mov	r4,r2
 2007614:	180b883a 	mov	r5,r3
 2007618:	95000005 	stb	r20,0(r18)
 200761c:	1021883a 	mov	r16,r2
 2007620:	1823883a 	mov	r17,r3
 2007624:	200f48c0 	call	200f48c <__ledf2>
 2007628:	bdc00044 	addi	r23,r23,1
 200762c:	800d883a 	mov	r6,r16
 2007630:	880f883a 	mov	r7,r17
 2007634:	0009883a 	mov	r4,zero
 2007638:	014ffc34 	movhi	r5,16368
 200763c:	103fcf0e 	bge	r2,zero,200757c <_dtoa_r+0x5dc>
 2007640:	d8c01317 	ldw	r3,76(sp)
 2007644:	d8c00515 	stw	r3,20(sp)
 2007648:	d9400917 	ldw	r5,36(sp)
 200764c:	e009883a 	mov	r4,fp
 2007650:	200a7000 	call	200a700 <_Bfree>
 2007654:	d9000517 	ldw	r4,20(sp)
 2007658:	d9802317 	ldw	r6,140(sp)
 200765c:	d9c02517 	ldw	r7,148(sp)
 2007660:	b8000005 	stb	zero,0(r23)
 2007664:	20800044 	addi	r2,r4,1
 2007668:	30800015 	stw	r2,0(r6)
 200766c:	3802aa26 	beq	r7,zero,2008118 <_dtoa_r+0x1178>
 2007670:	3dc00015 	stw	r23,0(r7)
 2007674:	d8800717 	ldw	r2,28(sp)
 2007678:	003e7906 	br	2007060 <_dtoa_r+0xc0>
 200767c:	00800434 	movhi	r2,16
 2007680:	10bfffc4 	addi	r2,r2,-1
 2007684:	88a2703a 	and	r17,r17,r2
 2007688:	883e851e 	bne	r17,zero,20070a0 <_dtoa_r+0x100>
 200768c:	008080b4 	movhi	r2,514
 2007690:	10adac04 	addi	r2,r2,-18768
 2007694:	003e8406 	br	20070a8 <_dtoa_r+0x108>
 2007698:	10c00204 	addi	r3,r2,8
 200769c:	003e8706 	br	20070bc <_dtoa_r+0x11c>
 20076a0:	01400434 	movhi	r5,16
 20076a4:	297fffc4 	addi	r5,r5,-1
 20076a8:	994a703a 	and	r5,r19,r5
 20076ac:	9009883a 	mov	r4,r18
 20076b0:	843f0044 	addi	r16,r16,-1023
 20076b4:	294ffc34 	orhi	r5,r5,16368
 20076b8:	dd800217 	ldw	r22,8(sp)
 20076bc:	d8001115 	stw	zero,68(sp)
 20076c0:	003ea506 	br	2007158 <_dtoa_r+0x1b8>
 20076c4:	008080b4 	movhi	r2,514
 20076c8:	10ada304 	addi	r2,r2,-18804
 20076cc:	003e6406 	br	2007060 <_dtoa_r+0xc0>
 20076d0:	e0001115 	stw	zero,68(fp)
 20076d4:	000b883a 	mov	r5,zero
 20076d8:	e009883a 	mov	r4,fp
 20076dc:	200a6580 	call	200a658 <_Balloc>
 20076e0:	01bfffc4 	movi	r6,-1
 20076e4:	01c00044 	movi	r7,1
 20076e8:	d8800715 	stw	r2,28(sp)
 20076ec:	d9800c15 	stw	r6,48(sp)
 20076f0:	e0801015 	stw	r2,64(fp)
 20076f4:	d8000315 	stw	zero,12(sp)
 20076f8:	d9c00b15 	stw	r7,44(sp)
 20076fc:	d9800615 	stw	r6,24(sp)
 2007700:	d8002215 	stw	zero,136(sp)
 2007704:	d8800117 	ldw	r2,4(sp)
 2007708:	10008916 	blt	r2,zero,2007930 <_dtoa_r+0x990>
 200770c:	d9000517 	ldw	r4,20(sp)
 2007710:	00c00384 	movi	r3,14
 2007714:	19008616 	blt	r3,r4,2007930 <_dtoa_r+0x990>
 2007718:	200490fa 	slli	r2,r4,3
 200771c:	00c080b4 	movhi	r3,514
 2007720:	d9802217 	ldw	r6,136(sp)
 2007724:	18edca04 	addi	r3,r3,-18648
 2007728:	1885883a 	add	r2,r3,r2
 200772c:	14000017 	ldw	r16,0(r2)
 2007730:	14400117 	ldw	r17,4(r2)
 2007734:	30016316 	blt	r6,zero,2007cc4 <_dtoa_r+0xd24>
 2007738:	800d883a 	mov	r6,r16
 200773c:	880f883a 	mov	r7,r17
 2007740:	9009883a 	mov	r4,r18
 2007744:	980b883a 	mov	r5,r19
 2007748:	2002ea00 	call	2002ea0 <__divdf3>
 200774c:	180b883a 	mov	r5,r3
 2007750:	1009883a 	mov	r4,r2
 2007754:	200fe7c0 	call	200fe7c <__fixdfsi>
 2007758:	1009883a 	mov	r4,r2
 200775c:	102b883a 	mov	r21,r2
 2007760:	200fefc0 	call	200fefc <__floatsidf>
 2007764:	800d883a 	mov	r6,r16
 2007768:	880f883a 	mov	r7,r17
 200776c:	1009883a 	mov	r4,r2
 2007770:	180b883a 	mov	r5,r3
 2007774:	200394c0 	call	200394c <__muldf3>
 2007778:	100d883a 	mov	r6,r2
 200777c:	180f883a 	mov	r7,r3
 2007780:	9009883a 	mov	r4,r18
 2007784:	980b883a 	mov	r5,r19
 2007788:	200f5800 	call	200f580 <__subdf3>
 200778c:	d9c00717 	ldw	r7,28(sp)
 2007790:	1009883a 	mov	r4,r2
 2007794:	a8800c04 	addi	r2,r21,48
 2007798:	38800005 	stb	r2,0(r7)
 200779c:	3dc00044 	addi	r23,r7,1
 20077a0:	d9c00617 	ldw	r7,24(sp)
 20077a4:	01800044 	movi	r6,1
 20077a8:	180b883a 	mov	r5,r3
 20077ac:	2005883a 	mov	r2,r4
 20077b0:	39803826 	beq	r7,r6,2007894 <_dtoa_r+0x8f4>
 20077b4:	000d883a 	mov	r6,zero
 20077b8:	01d00934 	movhi	r7,16420
 20077bc:	200394c0 	call	200394c <__muldf3>
 20077c0:	000d883a 	mov	r6,zero
 20077c4:	000f883a 	mov	r7,zero
 20077c8:	1009883a 	mov	r4,r2
 20077cc:	180b883a 	mov	r5,r3
 20077d0:	1025883a 	mov	r18,r2
 20077d4:	1827883a 	mov	r19,r3
 20077d8:	200f4040 	call	200f404 <__eqdf2>
 20077dc:	103f9a26 	beq	r2,zero,2007648 <_dtoa_r+0x6a8>
 20077e0:	d9c00617 	ldw	r7,24(sp)
 20077e4:	d8c00717 	ldw	r3,28(sp)
 20077e8:	b829883a 	mov	r20,r23
 20077ec:	38bfffc4 	addi	r2,r7,-1
 20077f0:	18ad883a 	add	r22,r3,r2
 20077f4:	00000a06 	br	2007820 <_dtoa_r+0x880>
 20077f8:	200394c0 	call	200394c <__muldf3>
 20077fc:	000d883a 	mov	r6,zero
 2007800:	000f883a 	mov	r7,zero
 2007804:	1009883a 	mov	r4,r2
 2007808:	180b883a 	mov	r5,r3
 200780c:	1025883a 	mov	r18,r2
 2007810:	1827883a 	mov	r19,r3
 2007814:	b829883a 	mov	r20,r23
 2007818:	200f4040 	call	200f404 <__eqdf2>
 200781c:	103f8a26 	beq	r2,zero,2007648 <_dtoa_r+0x6a8>
 2007820:	800d883a 	mov	r6,r16
 2007824:	880f883a 	mov	r7,r17
 2007828:	9009883a 	mov	r4,r18
 200782c:	980b883a 	mov	r5,r19
 2007830:	2002ea00 	call	2002ea0 <__divdf3>
 2007834:	180b883a 	mov	r5,r3
 2007838:	1009883a 	mov	r4,r2
 200783c:	200fe7c0 	call	200fe7c <__fixdfsi>
 2007840:	1009883a 	mov	r4,r2
 2007844:	102b883a 	mov	r21,r2
 2007848:	200fefc0 	call	200fefc <__floatsidf>
 200784c:	800d883a 	mov	r6,r16
 2007850:	880f883a 	mov	r7,r17
 2007854:	1009883a 	mov	r4,r2
 2007858:	180b883a 	mov	r5,r3
 200785c:	200394c0 	call	200394c <__muldf3>
 2007860:	100d883a 	mov	r6,r2
 2007864:	180f883a 	mov	r7,r3
 2007868:	9009883a 	mov	r4,r18
 200786c:	980b883a 	mov	r5,r19
 2007870:	200f5800 	call	200f580 <__subdf3>
 2007874:	aa000c04 	addi	r8,r21,48
 2007878:	a2000005 	stb	r8,0(r20)
 200787c:	000d883a 	mov	r6,zero
 2007880:	01d00934 	movhi	r7,16420
 2007884:	1009883a 	mov	r4,r2
 2007888:	180b883a 	mov	r5,r3
 200788c:	a5c00044 	addi	r23,r20,1
 2007890:	b53fd91e 	bne	r22,r20,20077f8 <_dtoa_r+0x858>
 2007894:	100d883a 	mov	r6,r2
 2007898:	180f883a 	mov	r7,r3
 200789c:	1009883a 	mov	r4,r2
 20078a0:	180b883a 	mov	r5,r3
 20078a4:	200eb580 	call	200eb58 <__adddf3>
 20078a8:	100d883a 	mov	r6,r2
 20078ac:	180f883a 	mov	r7,r3
 20078b0:	8009883a 	mov	r4,r16
 20078b4:	880b883a 	mov	r5,r17
 20078b8:	1027883a 	mov	r19,r2
 20078bc:	1825883a 	mov	r18,r3
 20078c0:	200f48c0 	call	200f48c <__ledf2>
 20078c4:	10000816 	blt	r2,zero,20078e8 <_dtoa_r+0x948>
 20078c8:	980d883a 	mov	r6,r19
 20078cc:	900f883a 	mov	r7,r18
 20078d0:	8009883a 	mov	r4,r16
 20078d4:	880b883a 	mov	r5,r17
 20078d8:	200f4040 	call	200f404 <__eqdf2>
 20078dc:	103f5a1e 	bne	r2,zero,2007648 <_dtoa_r+0x6a8>
 20078e0:	ad40004c 	andi	r21,r21,1
 20078e4:	a83f5826 	beq	r21,zero,2007648 <_dtoa_r+0x6a8>
 20078e8:	bd3fffc3 	ldbu	r20,-1(r23)
 20078ec:	b8bfffc4 	addi	r2,r23,-1
 20078f0:	1007883a 	mov	r3,r2
 20078f4:	01400e44 	movi	r5,57
 20078f8:	d9800717 	ldw	r6,28(sp)
 20078fc:	00000506 	br	2007914 <_dtoa_r+0x974>
 2007900:	18ffffc4 	addi	r3,r3,-1
 2007904:	11824726 	beq	r2,r6,2008224 <_dtoa_r+0x1284>
 2007908:	1d000003 	ldbu	r20,0(r3)
 200790c:	102f883a 	mov	r23,r2
 2007910:	10bfffc4 	addi	r2,r2,-1
 2007914:	a1003fcc 	andi	r4,r20,255
 2007918:	2100201c 	xori	r4,r4,128
 200791c:	213fe004 	addi	r4,r4,-128
 2007920:	217ff726 	beq	r4,r5,2007900 <_dtoa_r+0x960>
 2007924:	a2000044 	addi	r8,r20,1
 2007928:	12000005 	stb	r8,0(r2)
 200792c:	003f4606 	br	2007648 <_dtoa_r+0x6a8>
 2007930:	d9000b17 	ldw	r4,44(sp)
 2007934:	2000c826 	beq	r4,zero,2007c58 <_dtoa_r+0xcb8>
 2007938:	d9800317 	ldw	r6,12(sp)
 200793c:	00c00044 	movi	r3,1
 2007940:	1980f90e 	bge	r3,r6,2007d28 <_dtoa_r+0xd88>
 2007944:	d8800617 	ldw	r2,24(sp)
 2007948:	d8c00a17 	ldw	r3,40(sp)
 200794c:	157fffc4 	addi	r21,r2,-1
 2007950:	1d41f316 	blt	r3,r21,2008120 <_dtoa_r+0x1180>
 2007954:	1d6bc83a 	sub	r21,r3,r21
 2007958:	d9c00617 	ldw	r7,24(sp)
 200795c:	3802aa16 	blt	r7,zero,2008408 <_dtoa_r+0x1468>
 2007960:	dd000817 	ldw	r20,32(sp)
 2007964:	d8800617 	ldw	r2,24(sp)
 2007968:	d8c00817 	ldw	r3,32(sp)
 200796c:	01400044 	movi	r5,1
 2007970:	e009883a 	mov	r4,fp
 2007974:	1887883a 	add	r3,r3,r2
 2007978:	d8c00815 	stw	r3,32(sp)
 200797c:	b0ad883a 	add	r22,r22,r2
 2007980:	200aa8c0 	call	200aa8c <__i2b>
 2007984:	1023883a 	mov	r17,r2
 2007988:	a0000826 	beq	r20,zero,20079ac <_dtoa_r+0xa0c>
 200798c:	0580070e 	bge	zero,r22,20079ac <_dtoa_r+0xa0c>
 2007990:	a005883a 	mov	r2,r20
 2007994:	b500b916 	blt	r22,r20,2007c7c <_dtoa_r+0xcdc>
 2007998:	d9000817 	ldw	r4,32(sp)
 200799c:	a0a9c83a 	sub	r20,r20,r2
 20079a0:	b0adc83a 	sub	r22,r22,r2
 20079a4:	2089c83a 	sub	r4,r4,r2
 20079a8:	d9000815 	stw	r4,32(sp)
 20079ac:	d9800a17 	ldw	r6,40(sp)
 20079b0:	0181810e 	bge	zero,r6,2007fb8 <_dtoa_r+0x1018>
 20079b4:	d9c00b17 	ldw	r7,44(sp)
 20079b8:	3800b326 	beq	r7,zero,2007c88 <_dtoa_r+0xce8>
 20079bc:	a800b226 	beq	r21,zero,2007c88 <_dtoa_r+0xce8>
 20079c0:	880b883a 	mov	r5,r17
 20079c4:	a80d883a 	mov	r6,r21
 20079c8:	e009883a 	mov	r4,fp
 20079cc:	200ad540 	call	200ad54 <__pow5mult>
 20079d0:	d9800917 	ldw	r6,36(sp)
 20079d4:	100b883a 	mov	r5,r2
 20079d8:	e009883a 	mov	r4,fp
 20079dc:	1023883a 	mov	r17,r2
 20079e0:	200aac80 	call	200aac8 <__multiply>
 20079e4:	1021883a 	mov	r16,r2
 20079e8:	d8800a17 	ldw	r2,40(sp)
 20079ec:	d9400917 	ldw	r5,36(sp)
 20079f0:	e009883a 	mov	r4,fp
 20079f4:	1545c83a 	sub	r2,r2,r21
 20079f8:	d8800a15 	stw	r2,40(sp)
 20079fc:	200a7000 	call	200a700 <_Bfree>
 2007a00:	d8c00a17 	ldw	r3,40(sp)
 2007a04:	18009f1e 	bne	r3,zero,2007c84 <_dtoa_r+0xce4>
 2007a08:	05c00044 	movi	r23,1
 2007a0c:	e009883a 	mov	r4,fp
 2007a10:	b80b883a 	mov	r5,r23
 2007a14:	200aa8c0 	call	200aa8c <__i2b>
 2007a18:	d9000d17 	ldw	r4,52(sp)
 2007a1c:	102b883a 	mov	r21,r2
 2007a20:	2000ce26 	beq	r4,zero,2007d5c <_dtoa_r+0xdbc>
 2007a24:	200d883a 	mov	r6,r4
 2007a28:	100b883a 	mov	r5,r2
 2007a2c:	e009883a 	mov	r4,fp
 2007a30:	200ad540 	call	200ad54 <__pow5mult>
 2007a34:	d9800317 	ldw	r6,12(sp)
 2007a38:	102b883a 	mov	r21,r2
 2007a3c:	b981810e 	bge	r23,r6,2008044 <_dtoa_r+0x10a4>
 2007a40:	0027883a 	mov	r19,zero
 2007a44:	a8800417 	ldw	r2,16(r21)
 2007a48:	05c00804 	movi	r23,32
 2007a4c:	10800104 	addi	r2,r2,4
 2007a50:	1085883a 	add	r2,r2,r2
 2007a54:	1085883a 	add	r2,r2,r2
 2007a58:	a885883a 	add	r2,r21,r2
 2007a5c:	11000017 	ldw	r4,0(r2)
 2007a60:	200a9740 	call	200a974 <__hi0bits>
 2007a64:	b885c83a 	sub	r2,r23,r2
 2007a68:	1585883a 	add	r2,r2,r22
 2007a6c:	108007cc 	andi	r2,r2,31
 2007a70:	1000b326 	beq	r2,zero,2007d40 <_dtoa_r+0xda0>
 2007a74:	00c00804 	movi	r3,32
 2007a78:	1887c83a 	sub	r3,r3,r2
 2007a7c:	01000104 	movi	r4,4
 2007a80:	20c2cd0e 	bge	r4,r3,20085b8 <_dtoa_r+0x1618>
 2007a84:	00c00704 	movi	r3,28
 2007a88:	1885c83a 	sub	r2,r3,r2
 2007a8c:	d8c00817 	ldw	r3,32(sp)
 2007a90:	a0a9883a 	add	r20,r20,r2
 2007a94:	b0ad883a 	add	r22,r22,r2
 2007a98:	1887883a 	add	r3,r3,r2
 2007a9c:	d8c00815 	stw	r3,32(sp)
 2007aa0:	d9800817 	ldw	r6,32(sp)
 2007aa4:	0180040e 	bge	zero,r6,2007ab8 <_dtoa_r+0xb18>
 2007aa8:	800b883a 	mov	r5,r16
 2007aac:	e009883a 	mov	r4,fp
 2007ab0:	200ae940 	call	200ae94 <__lshift>
 2007ab4:	1021883a 	mov	r16,r2
 2007ab8:	0580050e 	bge	zero,r22,2007ad0 <_dtoa_r+0xb30>
 2007abc:	a80b883a 	mov	r5,r21
 2007ac0:	b00d883a 	mov	r6,r22
 2007ac4:	e009883a 	mov	r4,fp
 2007ac8:	200ae940 	call	200ae94 <__lshift>
 2007acc:	102b883a 	mov	r21,r2
 2007ad0:	d9c00e17 	ldw	r7,56(sp)
 2007ad4:	3801211e 	bne	r7,zero,2007f5c <_dtoa_r+0xfbc>
 2007ad8:	d9800617 	ldw	r6,24(sp)
 2007adc:	0181380e 	bge	zero,r6,2007fc0 <_dtoa_r+0x1020>
 2007ae0:	d8c00b17 	ldw	r3,44(sp)
 2007ae4:	1800ab1e 	bne	r3,zero,2007d94 <_dtoa_r+0xdf4>
 2007ae8:	dc800717 	ldw	r18,28(sp)
 2007aec:	dcc00617 	ldw	r19,24(sp)
 2007af0:	9029883a 	mov	r20,r18
 2007af4:	00000206 	br	2007b00 <_dtoa_r+0xb60>
 2007af8:	200a7280 	call	200a728 <__multadd>
 2007afc:	1021883a 	mov	r16,r2
 2007b00:	a80b883a 	mov	r5,r21
 2007b04:	8009883a 	mov	r4,r16
 2007b08:	2006d780 	call	2006d78 <quorem>
 2007b0c:	10800c04 	addi	r2,r2,48
 2007b10:	90800005 	stb	r2,0(r18)
 2007b14:	94800044 	addi	r18,r18,1
 2007b18:	9507c83a 	sub	r3,r18,r20
 2007b1c:	000f883a 	mov	r7,zero
 2007b20:	01800284 	movi	r6,10
 2007b24:	800b883a 	mov	r5,r16
 2007b28:	e009883a 	mov	r4,fp
 2007b2c:	1cfff216 	blt	r3,r19,2007af8 <_dtoa_r+0xb58>
 2007b30:	1011883a 	mov	r8,r2
 2007b34:	d8800617 	ldw	r2,24(sp)
 2007b38:	0082370e 	bge	zero,r2,2008418 <_dtoa_r+0x1478>
 2007b3c:	d9000717 	ldw	r4,28(sp)
 2007b40:	0025883a 	mov	r18,zero
 2007b44:	20af883a 	add	r23,r4,r2
 2007b48:	01800044 	movi	r6,1
 2007b4c:	800b883a 	mov	r5,r16
 2007b50:	e009883a 	mov	r4,fp
 2007b54:	da001715 	stw	r8,92(sp)
 2007b58:	200ae940 	call	200ae94 <__lshift>
 2007b5c:	a80b883a 	mov	r5,r21
 2007b60:	1009883a 	mov	r4,r2
 2007b64:	d8800915 	stw	r2,36(sp)
 2007b68:	200afdc0 	call	200afdc <__mcmp>
 2007b6c:	da001717 	ldw	r8,92(sp)
 2007b70:	0081800e 	bge	zero,r2,2008174 <_dtoa_r+0x11d4>
 2007b74:	b93fffc3 	ldbu	r4,-1(r23)
 2007b78:	b8bfffc4 	addi	r2,r23,-1
 2007b7c:	1007883a 	mov	r3,r2
 2007b80:	01800e44 	movi	r6,57
 2007b84:	d9c00717 	ldw	r7,28(sp)
 2007b88:	00000506 	br	2007ba0 <_dtoa_r+0xc00>
 2007b8c:	18ffffc4 	addi	r3,r3,-1
 2007b90:	11c12326 	beq	r2,r7,2008020 <_dtoa_r+0x1080>
 2007b94:	19000003 	ldbu	r4,0(r3)
 2007b98:	102f883a 	mov	r23,r2
 2007b9c:	10bfffc4 	addi	r2,r2,-1
 2007ba0:	21403fcc 	andi	r5,r4,255
 2007ba4:	2940201c 	xori	r5,r5,128
 2007ba8:	297fe004 	addi	r5,r5,-128
 2007bac:	29bff726 	beq	r5,r6,2007b8c <_dtoa_r+0xbec>
 2007bb0:	21000044 	addi	r4,r4,1
 2007bb4:	11000005 	stb	r4,0(r2)
 2007bb8:	a80b883a 	mov	r5,r21
 2007bbc:	e009883a 	mov	r4,fp
 2007bc0:	200a7000 	call	200a700 <_Bfree>
 2007bc4:	883ea026 	beq	r17,zero,2007648 <_dtoa_r+0x6a8>
 2007bc8:	90000426 	beq	r18,zero,2007bdc <_dtoa_r+0xc3c>
 2007bcc:	94400326 	beq	r18,r17,2007bdc <_dtoa_r+0xc3c>
 2007bd0:	900b883a 	mov	r5,r18
 2007bd4:	e009883a 	mov	r4,fp
 2007bd8:	200a7000 	call	200a700 <_Bfree>
 2007bdc:	880b883a 	mov	r5,r17
 2007be0:	e009883a 	mov	r4,fp
 2007be4:	200a7000 	call	200a700 <_Bfree>
 2007be8:	003e9706 	br	2007648 <_dtoa_r+0x6a8>
 2007bec:	01800044 	movi	r6,1
 2007bf0:	d9800e15 	stw	r6,56(sp)
 2007bf4:	003d9606 	br	2007250 <_dtoa_r+0x2b0>
 2007bf8:	d8800817 	ldw	r2,32(sp)
 2007bfc:	d8c00517 	ldw	r3,20(sp)
 2007c00:	d8000d15 	stw	zero,52(sp)
 2007c04:	10c5c83a 	sub	r2,r2,r3
 2007c08:	00c9c83a 	sub	r4,zero,r3
 2007c0c:	d8800815 	stw	r2,32(sp)
 2007c10:	d9000a15 	stw	r4,40(sp)
 2007c14:	003d9706 	br	2007274 <_dtoa_r+0x2d4>
 2007c18:	05adc83a 	sub	r22,zero,r22
 2007c1c:	dd800815 	stw	r22,32(sp)
 2007c20:	002d883a 	mov	r22,zero
 2007c24:	003d8e06 	br	2007260 <_dtoa_r+0x2c0>
 2007c28:	d9000517 	ldw	r4,20(sp)
 2007c2c:	200fefc0 	call	200fefc <__floatsidf>
 2007c30:	100d883a 	mov	r6,r2
 2007c34:	180f883a 	mov	r7,r3
 2007c38:	a009883a 	mov	r4,r20
 2007c3c:	880b883a 	mov	r5,r17
 2007c40:	200f4040 	call	200f404 <__eqdf2>
 2007c44:	103d7126 	beq	r2,zero,200720c <_dtoa_r+0x26c>
 2007c48:	d9c00517 	ldw	r7,20(sp)
 2007c4c:	39ffffc4 	addi	r7,r7,-1
 2007c50:	d9c00515 	stw	r7,20(sp)
 2007c54:	003d6d06 	br	200720c <_dtoa_r+0x26c>
 2007c58:	dd400a17 	ldw	r21,40(sp)
 2007c5c:	dd000817 	ldw	r20,32(sp)
 2007c60:	0023883a 	mov	r17,zero
 2007c64:	003f4806 	br	2007988 <_dtoa_r+0x9e8>
 2007c68:	10e3c83a 	sub	r17,r2,r3
 2007c6c:	9448983a 	sll	r4,r18,r17
 2007c70:	003d3206 	br	200713c <_dtoa_r+0x19c>
 2007c74:	d8000e15 	stw	zero,56(sp)
 2007c78:	003d7506 	br	2007250 <_dtoa_r+0x2b0>
 2007c7c:	b005883a 	mov	r2,r22
 2007c80:	003f4506 	br	2007998 <_dtoa_r+0x9f8>
 2007c84:	dc000915 	stw	r16,36(sp)
 2007c88:	d9800a17 	ldw	r6,40(sp)
 2007c8c:	d9400917 	ldw	r5,36(sp)
 2007c90:	e009883a 	mov	r4,fp
 2007c94:	200ad540 	call	200ad54 <__pow5mult>
 2007c98:	1021883a 	mov	r16,r2
 2007c9c:	003f5a06 	br	2007a08 <_dtoa_r+0xa68>
 2007ca0:	01c00044 	movi	r7,1
 2007ca4:	d9c00b15 	stw	r7,44(sp)
 2007ca8:	d8802217 	ldw	r2,136(sp)
 2007cac:	0081280e 	bge	zero,r2,2008150 <_dtoa_r+0x11b0>
 2007cb0:	100d883a 	mov	r6,r2
 2007cb4:	1021883a 	mov	r16,r2
 2007cb8:	d8800c15 	stw	r2,48(sp)
 2007cbc:	d8800615 	stw	r2,24(sp)
 2007cc0:	003d8806 	br	20072e4 <_dtoa_r+0x344>
 2007cc4:	d8800617 	ldw	r2,24(sp)
 2007cc8:	00be9b16 	blt	zero,r2,2007738 <_dtoa_r+0x798>
 2007ccc:	10010f1e 	bne	r2,zero,200810c <_dtoa_r+0x116c>
 2007cd0:	880b883a 	mov	r5,r17
 2007cd4:	000d883a 	mov	r6,zero
 2007cd8:	01d00534 	movhi	r7,16404
 2007cdc:	8009883a 	mov	r4,r16
 2007ce0:	200394c0 	call	200394c <__muldf3>
 2007ce4:	900d883a 	mov	r6,r18
 2007ce8:	980f883a 	mov	r7,r19
 2007cec:	1009883a 	mov	r4,r2
 2007cf0:	180b883a 	mov	r5,r3
 2007cf4:	20038700 	call	2003870 <__gedf2>
 2007cf8:	002b883a 	mov	r21,zero
 2007cfc:	0023883a 	mov	r17,zero
 2007d00:	1000bf16 	blt	r2,zero,2008000 <_dtoa_r+0x1060>
 2007d04:	d9802217 	ldw	r6,136(sp)
 2007d08:	ddc00717 	ldw	r23,28(sp)
 2007d0c:	018c303a 	nor	r6,zero,r6
 2007d10:	d9800515 	stw	r6,20(sp)
 2007d14:	a80b883a 	mov	r5,r21
 2007d18:	e009883a 	mov	r4,fp
 2007d1c:	200a7000 	call	200a700 <_Bfree>
 2007d20:	883e4926 	beq	r17,zero,2007648 <_dtoa_r+0x6a8>
 2007d24:	003fad06 	br	2007bdc <_dtoa_r+0xc3c>
 2007d28:	d9c01117 	ldw	r7,68(sp)
 2007d2c:	3801bc26 	beq	r7,zero,2008420 <_dtoa_r+0x1480>
 2007d30:	10810cc4 	addi	r2,r2,1075
 2007d34:	dd400a17 	ldw	r21,40(sp)
 2007d38:	dd000817 	ldw	r20,32(sp)
 2007d3c:	003f0a06 	br	2007968 <_dtoa_r+0x9c8>
 2007d40:	00800704 	movi	r2,28
 2007d44:	d9000817 	ldw	r4,32(sp)
 2007d48:	a0a9883a 	add	r20,r20,r2
 2007d4c:	b0ad883a 	add	r22,r22,r2
 2007d50:	2089883a 	add	r4,r4,r2
 2007d54:	d9000815 	stw	r4,32(sp)
 2007d58:	003f5106 	br	2007aa0 <_dtoa_r+0xb00>
 2007d5c:	d8c00317 	ldw	r3,12(sp)
 2007d60:	b8c1fc0e 	bge	r23,r3,2008554 <_dtoa_r+0x15b4>
 2007d64:	0027883a 	mov	r19,zero
 2007d68:	b805883a 	mov	r2,r23
 2007d6c:	003f3e06 	br	2007a68 <_dtoa_r+0xac8>
 2007d70:	880b883a 	mov	r5,r17
 2007d74:	e009883a 	mov	r4,fp
 2007d78:	000f883a 	mov	r7,zero
 2007d7c:	01800284 	movi	r6,10
 2007d80:	200a7280 	call	200a728 <__multadd>
 2007d84:	d9000c17 	ldw	r4,48(sp)
 2007d88:	1023883a 	mov	r17,r2
 2007d8c:	0102040e 	bge	zero,r4,20085a0 <_dtoa_r+0x1600>
 2007d90:	d9000615 	stw	r4,24(sp)
 2007d94:	0500050e 	bge	zero,r20,2007dac <_dtoa_r+0xe0c>
 2007d98:	880b883a 	mov	r5,r17
 2007d9c:	a00d883a 	mov	r6,r20
 2007da0:	e009883a 	mov	r4,fp
 2007da4:	200ae940 	call	200ae94 <__lshift>
 2007da8:	1023883a 	mov	r17,r2
 2007dac:	9801241e 	bne	r19,zero,2008240 <_dtoa_r+0x12a0>
 2007db0:	8829883a 	mov	r20,r17
 2007db4:	d9000617 	ldw	r4,24(sp)
 2007db8:	dcc00717 	ldw	r19,28(sp)
 2007dbc:	9480004c 	andi	r18,r18,1
 2007dc0:	20bfffc4 	addi	r2,r4,-1
 2007dc4:	9885883a 	add	r2,r19,r2
 2007dc8:	d8800415 	stw	r2,16(sp)
 2007dcc:	dc800615 	stw	r18,24(sp)
 2007dd0:	a80b883a 	mov	r5,r21
 2007dd4:	8009883a 	mov	r4,r16
 2007dd8:	2006d780 	call	2006d78 <quorem>
 2007ddc:	880b883a 	mov	r5,r17
 2007de0:	8009883a 	mov	r4,r16
 2007de4:	102f883a 	mov	r23,r2
 2007de8:	200afdc0 	call	200afdc <__mcmp>
 2007dec:	a80b883a 	mov	r5,r21
 2007df0:	a00d883a 	mov	r6,r20
 2007df4:	e009883a 	mov	r4,fp
 2007df8:	102d883a 	mov	r22,r2
 2007dfc:	200b03c0 	call	200b03c <__mdiff>
 2007e00:	1007883a 	mov	r3,r2
 2007e04:	10800317 	ldw	r2,12(r2)
 2007e08:	bc800c04 	addi	r18,r23,48
 2007e0c:	180b883a 	mov	r5,r3
 2007e10:	10004e1e 	bne	r2,zero,2007f4c <_dtoa_r+0xfac>
 2007e14:	8009883a 	mov	r4,r16
 2007e18:	d8c01615 	stw	r3,88(sp)
 2007e1c:	200afdc0 	call	200afdc <__mcmp>
 2007e20:	d8c01617 	ldw	r3,88(sp)
 2007e24:	e009883a 	mov	r4,fp
 2007e28:	d8801615 	stw	r2,88(sp)
 2007e2c:	180b883a 	mov	r5,r3
 2007e30:	200a7000 	call	200a700 <_Bfree>
 2007e34:	d8801617 	ldw	r2,88(sp)
 2007e38:	1000041e 	bne	r2,zero,2007e4c <_dtoa_r+0xeac>
 2007e3c:	d9800317 	ldw	r6,12(sp)
 2007e40:	3000021e 	bne	r6,zero,2007e4c <_dtoa_r+0xeac>
 2007e44:	d8c00617 	ldw	r3,24(sp)
 2007e48:	18003726 	beq	r3,zero,2007f28 <_dtoa_r+0xf88>
 2007e4c:	b0002016 	blt	r22,zero,2007ed0 <_dtoa_r+0xf30>
 2007e50:	b000041e 	bne	r22,zero,2007e64 <_dtoa_r+0xec4>
 2007e54:	d9000317 	ldw	r4,12(sp)
 2007e58:	2000021e 	bne	r4,zero,2007e64 <_dtoa_r+0xec4>
 2007e5c:	d8c00617 	ldw	r3,24(sp)
 2007e60:	18001b26 	beq	r3,zero,2007ed0 <_dtoa_r+0xf30>
 2007e64:	00810716 	blt	zero,r2,2008284 <_dtoa_r+0x12e4>
 2007e68:	d8c00417 	ldw	r3,16(sp)
 2007e6c:	9d800044 	addi	r22,r19,1
 2007e70:	9c800005 	stb	r18,0(r19)
 2007e74:	b02f883a 	mov	r23,r22
 2007e78:	98c10626 	beq	r19,r3,2008294 <_dtoa_r+0x12f4>
 2007e7c:	800b883a 	mov	r5,r16
 2007e80:	000f883a 	mov	r7,zero
 2007e84:	01800284 	movi	r6,10
 2007e88:	e009883a 	mov	r4,fp
 2007e8c:	200a7280 	call	200a728 <__multadd>
 2007e90:	1021883a 	mov	r16,r2
 2007e94:	000f883a 	mov	r7,zero
 2007e98:	01800284 	movi	r6,10
 2007e9c:	880b883a 	mov	r5,r17
 2007ea0:	e009883a 	mov	r4,fp
 2007ea4:	8d002526 	beq	r17,r20,2007f3c <_dtoa_r+0xf9c>
 2007ea8:	200a7280 	call	200a728 <__multadd>
 2007eac:	a00b883a 	mov	r5,r20
 2007eb0:	000f883a 	mov	r7,zero
 2007eb4:	01800284 	movi	r6,10
 2007eb8:	e009883a 	mov	r4,fp
 2007ebc:	1023883a 	mov	r17,r2
 2007ec0:	200a7280 	call	200a728 <__multadd>
 2007ec4:	1029883a 	mov	r20,r2
 2007ec8:	b027883a 	mov	r19,r22
 2007ecc:	003fc006 	br	2007dd0 <_dtoa_r+0xe30>
 2007ed0:	9011883a 	mov	r8,r18
 2007ed4:	00800e0e 	bge	zero,r2,2007f10 <_dtoa_r+0xf70>
 2007ed8:	800b883a 	mov	r5,r16
 2007edc:	01800044 	movi	r6,1
 2007ee0:	e009883a 	mov	r4,fp
 2007ee4:	da001715 	stw	r8,92(sp)
 2007ee8:	200ae940 	call	200ae94 <__lshift>
 2007eec:	a80b883a 	mov	r5,r21
 2007ef0:	1009883a 	mov	r4,r2
 2007ef4:	1021883a 	mov	r16,r2
 2007ef8:	200afdc0 	call	200afdc <__mcmp>
 2007efc:	da001717 	ldw	r8,92(sp)
 2007f00:	0081960e 	bge	zero,r2,200855c <_dtoa_r+0x15bc>
 2007f04:	00800e44 	movi	r2,57
 2007f08:	40817026 	beq	r8,r2,20084cc <_dtoa_r+0x152c>
 2007f0c:	ba000c44 	addi	r8,r23,49
 2007f10:	8825883a 	mov	r18,r17
 2007f14:	9dc00044 	addi	r23,r19,1
 2007f18:	9a000005 	stb	r8,0(r19)
 2007f1c:	a023883a 	mov	r17,r20
 2007f20:	dc000915 	stw	r16,36(sp)
 2007f24:	003f2406 	br	2007bb8 <_dtoa_r+0xc18>
 2007f28:	00800e44 	movi	r2,57
 2007f2c:	9011883a 	mov	r8,r18
 2007f30:	90816626 	beq	r18,r2,20084cc <_dtoa_r+0x152c>
 2007f34:	05bff516 	blt	zero,r22,2007f0c <_dtoa_r+0xf6c>
 2007f38:	003ff506 	br	2007f10 <_dtoa_r+0xf70>
 2007f3c:	200a7280 	call	200a728 <__multadd>
 2007f40:	1023883a 	mov	r17,r2
 2007f44:	1029883a 	mov	r20,r2
 2007f48:	003fdf06 	br	2007ec8 <_dtoa_r+0xf28>
 2007f4c:	e009883a 	mov	r4,fp
 2007f50:	200a7000 	call	200a700 <_Bfree>
 2007f54:	00800044 	movi	r2,1
 2007f58:	003fbc06 	br	2007e4c <_dtoa_r+0xeac>
 2007f5c:	a80b883a 	mov	r5,r21
 2007f60:	8009883a 	mov	r4,r16
 2007f64:	200afdc0 	call	200afdc <__mcmp>
 2007f68:	103edb0e 	bge	r2,zero,2007ad8 <_dtoa_r+0xb38>
 2007f6c:	800b883a 	mov	r5,r16
 2007f70:	000f883a 	mov	r7,zero
 2007f74:	01800284 	movi	r6,10
 2007f78:	e009883a 	mov	r4,fp
 2007f7c:	200a7280 	call	200a728 <__multadd>
 2007f80:	1021883a 	mov	r16,r2
 2007f84:	d8800517 	ldw	r2,20(sp)
 2007f88:	d8c00b17 	ldw	r3,44(sp)
 2007f8c:	10bfffc4 	addi	r2,r2,-1
 2007f90:	d8800515 	stw	r2,20(sp)
 2007f94:	183f761e 	bne	r3,zero,2007d70 <_dtoa_r+0xdd0>
 2007f98:	d9000c17 	ldw	r4,48(sp)
 2007f9c:	0101730e 	bge	zero,r4,200856c <_dtoa_r+0x15cc>
 2007fa0:	d9000615 	stw	r4,24(sp)
 2007fa4:	003ed006 	br	2007ae8 <_dtoa_r+0xb48>
 2007fa8:	00800084 	movi	r2,2
 2007fac:	3081861e 	bne	r6,r2,20085c8 <_dtoa_r+0x1628>
 2007fb0:	d8000b15 	stw	zero,44(sp)
 2007fb4:	003f3c06 	br	2007ca8 <_dtoa_r+0xd08>
 2007fb8:	dc000917 	ldw	r16,36(sp)
 2007fbc:	003e9206 	br	2007a08 <_dtoa_r+0xa68>
 2007fc0:	d9c00317 	ldw	r7,12(sp)
 2007fc4:	00800084 	movi	r2,2
 2007fc8:	11fec50e 	bge	r2,r7,2007ae0 <_dtoa_r+0xb40>
 2007fcc:	d9000617 	ldw	r4,24(sp)
 2007fd0:	20013c1e 	bne	r4,zero,20084c4 <_dtoa_r+0x1524>
 2007fd4:	a80b883a 	mov	r5,r21
 2007fd8:	000f883a 	mov	r7,zero
 2007fdc:	01800144 	movi	r6,5
 2007fe0:	e009883a 	mov	r4,fp
 2007fe4:	200a7280 	call	200a728 <__multadd>
 2007fe8:	100b883a 	mov	r5,r2
 2007fec:	8009883a 	mov	r4,r16
 2007ff0:	102b883a 	mov	r21,r2
 2007ff4:	200afdc0 	call	200afdc <__mcmp>
 2007ff8:	dc000915 	stw	r16,36(sp)
 2007ffc:	00bf410e 	bge	zero,r2,2007d04 <_dtoa_r+0xd64>
 2008000:	d9c00717 	ldw	r7,28(sp)
 2008004:	00800c44 	movi	r2,49
 2008008:	38800005 	stb	r2,0(r7)
 200800c:	d8800517 	ldw	r2,20(sp)
 2008010:	3dc00044 	addi	r23,r7,1
 2008014:	10800044 	addi	r2,r2,1
 2008018:	d8800515 	stw	r2,20(sp)
 200801c:	003f3d06 	br	2007d14 <_dtoa_r+0xd74>
 2008020:	d9800517 	ldw	r6,20(sp)
 2008024:	d9c00717 	ldw	r7,28(sp)
 2008028:	00800c44 	movi	r2,49
 200802c:	31800044 	addi	r6,r6,1
 2008030:	d9800515 	stw	r6,20(sp)
 2008034:	38800005 	stb	r2,0(r7)
 2008038:	003edf06 	br	2007bb8 <_dtoa_r+0xc18>
 200803c:	d8000b15 	stw	zero,44(sp)
 2008040:	003c9f06 	br	20072c0 <_dtoa_r+0x320>
 2008044:	903e7e1e 	bne	r18,zero,2007a40 <_dtoa_r+0xaa0>
 2008048:	00800434 	movhi	r2,16
 200804c:	10bfffc4 	addi	r2,r2,-1
 2008050:	9884703a 	and	r2,r19,r2
 2008054:	1000ea1e 	bne	r2,zero,2008400 <_dtoa_r+0x1460>
 2008058:	9cdffc2c 	andhi	r19,r19,32752
 200805c:	9800e826 	beq	r19,zero,2008400 <_dtoa_r+0x1460>
 2008060:	d9c00817 	ldw	r7,32(sp)
 2008064:	b5800044 	addi	r22,r22,1
 2008068:	04c00044 	movi	r19,1
 200806c:	39c00044 	addi	r7,r7,1
 2008070:	d9c00815 	stw	r7,32(sp)
 2008074:	d8800d17 	ldw	r2,52(sp)
 2008078:	103e721e 	bne	r2,zero,2007a44 <_dtoa_r+0xaa4>
 200807c:	00800044 	movi	r2,1
 2008080:	003e7906 	br	2007a68 <_dtoa_r+0xac8>
 2008084:	8009883a 	mov	r4,r16
 2008088:	200fefc0 	call	200fefc <__floatsidf>
 200808c:	d9800f17 	ldw	r6,60(sp)
 2008090:	d9c01017 	ldw	r7,64(sp)
 2008094:	1009883a 	mov	r4,r2
 2008098:	180b883a 	mov	r5,r3
 200809c:	200394c0 	call	200394c <__muldf3>
 20080a0:	000d883a 	mov	r6,zero
 20080a4:	01d00734 	movhi	r7,16412
 20080a8:	1009883a 	mov	r4,r2
 20080ac:	180b883a 	mov	r5,r3
 20080b0:	200eb580 	call	200eb58 <__adddf3>
 20080b4:	047f3034 	movhi	r17,64704
 20080b8:	1021883a 	mov	r16,r2
 20080bc:	1c63883a 	add	r17,r3,r17
 20080c0:	d9000f17 	ldw	r4,60(sp)
 20080c4:	d9401017 	ldw	r5,64(sp)
 20080c8:	000d883a 	mov	r6,zero
 20080cc:	01d00534 	movhi	r7,16404
 20080d0:	200f5800 	call	200f580 <__subdf3>
 20080d4:	800d883a 	mov	r6,r16
 20080d8:	880f883a 	mov	r7,r17
 20080dc:	1009883a 	mov	r4,r2
 20080e0:	180b883a 	mov	r5,r3
 20080e4:	102b883a 	mov	r21,r2
 20080e8:	1829883a 	mov	r20,r3
 20080ec:	20038700 	call	2003870 <__gedf2>
 20080f0:	00806c16 	blt	zero,r2,20082a4 <_dtoa_r+0x1304>
 20080f4:	89e0003c 	xorhi	r7,r17,32768
 20080f8:	800d883a 	mov	r6,r16
 20080fc:	a809883a 	mov	r4,r21
 2008100:	a00b883a 	mov	r5,r20
 2008104:	200f48c0 	call	200f48c <__ledf2>
 2008108:	103d7e0e 	bge	r2,zero,2007704 <_dtoa_r+0x764>
 200810c:	002b883a 	mov	r21,zero
 2008110:	0023883a 	mov	r17,zero
 2008114:	003efb06 	br	2007d04 <_dtoa_r+0xd64>
 2008118:	d8800717 	ldw	r2,28(sp)
 200811c:	003bd006 	br	2007060 <_dtoa_r+0xc0>
 2008120:	d9000a17 	ldw	r4,40(sp)
 2008124:	d9800d17 	ldw	r6,52(sp)
 2008128:	dd400a15 	stw	r21,40(sp)
 200812c:	a905c83a 	sub	r2,r21,r4
 2008130:	308d883a 	add	r6,r6,r2
 2008134:	d9800d15 	stw	r6,52(sp)
 2008138:	002b883a 	mov	r21,zero
 200813c:	003e0606 	br	2007958 <_dtoa_r+0x9b8>
 2008140:	9023883a 	mov	r17,r18
 2008144:	9829883a 	mov	r20,r19
 2008148:	04000084 	movi	r16,2
 200814c:	003c9206 	br	2007398 <_dtoa_r+0x3f8>
 2008150:	04000044 	movi	r16,1
 2008154:	dc000c15 	stw	r16,48(sp)
 2008158:	dc000615 	stw	r16,24(sp)
 200815c:	dc002215 	stw	r16,136(sp)
 2008160:	e0001115 	stw	zero,68(fp)
 2008164:	000b883a 	mov	r5,zero
 2008168:	003c6906 	br	2007310 <_dtoa_r+0x370>
 200816c:	3021883a 	mov	r16,r6
 2008170:	003ffb06 	br	2008160 <_dtoa_r+0x11c0>
 2008174:	1000021e 	bne	r2,zero,2008180 <_dtoa_r+0x11e0>
 2008178:	4200004c 	andi	r8,r8,1
 200817c:	403e7d1e 	bne	r8,zero,2007b74 <_dtoa_r+0xbd4>
 2008180:	01000c04 	movi	r4,48
 2008184:	00000106 	br	200818c <_dtoa_r+0x11ec>
 2008188:	102f883a 	mov	r23,r2
 200818c:	b8bfffc4 	addi	r2,r23,-1
 2008190:	10c00007 	ldb	r3,0(r2)
 2008194:	193ffc26 	beq	r3,r4,2008188 <_dtoa_r+0x11e8>
 2008198:	003e8706 	br	2007bb8 <_dtoa_r+0xc18>
 200819c:	d8800517 	ldw	r2,20(sp)
 20081a0:	00a3c83a 	sub	r17,zero,r2
 20081a4:	8800a426 	beq	r17,zero,2008438 <_dtoa_r+0x1498>
 20081a8:	888003cc 	andi	r2,r17,15
 20081ac:	100490fa 	slli	r2,r2,3
 20081b0:	00c080b4 	movhi	r3,514
 20081b4:	18edca04 	addi	r3,r3,-18648
 20081b8:	1885883a 	add	r2,r3,r2
 20081bc:	11800017 	ldw	r6,0(r2)
 20081c0:	11c00117 	ldw	r7,4(r2)
 20081c4:	9009883a 	mov	r4,r18
 20081c8:	980b883a 	mov	r5,r19
 20081cc:	8823d13a 	srai	r17,r17,4
 20081d0:	200394c0 	call	200394c <__muldf3>
 20081d4:	d8800f15 	stw	r2,60(sp)
 20081d8:	d8c01015 	stw	r3,64(sp)
 20081dc:	8800e826 	beq	r17,zero,2008580 <_dtoa_r+0x15e0>
 20081e0:	050080b4 	movhi	r20,514
 20081e4:	a52dc004 	addi	r20,r20,-18688
 20081e8:	04000084 	movi	r16,2
 20081ec:	8980004c 	andi	r6,r17,1
 20081f0:	1009883a 	mov	r4,r2
 20081f4:	8823d07a 	srai	r17,r17,1
 20081f8:	180b883a 	mov	r5,r3
 20081fc:	30000426 	beq	r6,zero,2008210 <_dtoa_r+0x1270>
 2008200:	a1800017 	ldw	r6,0(r20)
 2008204:	a1c00117 	ldw	r7,4(r20)
 2008208:	84000044 	addi	r16,r16,1
 200820c:	200394c0 	call	200394c <__muldf3>
 2008210:	a5000204 	addi	r20,r20,8
 2008214:	883ff51e 	bne	r17,zero,20081ec <_dtoa_r+0x124c>
 2008218:	d8800f15 	stw	r2,60(sp)
 200821c:	d8c01015 	stw	r3,64(sp)
 2008220:	003c7606 	br	20073fc <_dtoa_r+0x45c>
 2008224:	00c00c04 	movi	r3,48
 2008228:	10c00005 	stb	r3,0(r2)
 200822c:	d8c00517 	ldw	r3,20(sp)
 2008230:	bd3fffc3 	ldbu	r20,-1(r23)
 2008234:	18c00044 	addi	r3,r3,1
 2008238:	d8c00515 	stw	r3,20(sp)
 200823c:	003db906 	br	2007924 <_dtoa_r+0x984>
 2008240:	89400117 	ldw	r5,4(r17)
 2008244:	e009883a 	mov	r4,fp
 2008248:	200a6580 	call	200a658 <_Balloc>
 200824c:	89800417 	ldw	r6,16(r17)
 2008250:	89400304 	addi	r5,r17,12
 2008254:	11000304 	addi	r4,r2,12
 2008258:	31800084 	addi	r6,r6,2
 200825c:	318d883a 	add	r6,r6,r6
 2008260:	318d883a 	add	r6,r6,r6
 2008264:	1027883a 	mov	r19,r2
 2008268:	200a28c0 	call	200a28c <memcpy>
 200826c:	01800044 	movi	r6,1
 2008270:	980b883a 	mov	r5,r19
 2008274:	e009883a 	mov	r4,fp
 2008278:	200ae940 	call	200ae94 <__lshift>
 200827c:	1029883a 	mov	r20,r2
 2008280:	003ecc06 	br	2007db4 <_dtoa_r+0xe14>
 2008284:	00800e44 	movi	r2,57
 2008288:	90809026 	beq	r18,r2,20084cc <_dtoa_r+0x152c>
 200828c:	92000044 	addi	r8,r18,1
 2008290:	003f1f06 	br	2007f10 <_dtoa_r+0xf70>
 2008294:	9011883a 	mov	r8,r18
 2008298:	8825883a 	mov	r18,r17
 200829c:	a023883a 	mov	r17,r20
 20082a0:	003e2906 	br	2007b48 <_dtoa_r+0xba8>
 20082a4:	002b883a 	mov	r21,zero
 20082a8:	0023883a 	mov	r17,zero
 20082ac:	003f5406 	br	2008000 <_dtoa_r+0x1060>
 20082b0:	61bfffc4 	addi	r6,r12,-1
 20082b4:	300490fa 	slli	r2,r6,3
 20082b8:	00c080b4 	movhi	r3,514
 20082bc:	18edca04 	addi	r3,r3,-18648
 20082c0:	1885883a 	add	r2,r3,r2
 20082c4:	11000017 	ldw	r4,0(r2)
 20082c8:	11400117 	ldw	r5,4(r2)
 20082cc:	d8800717 	ldw	r2,28(sp)
 20082d0:	880f883a 	mov	r7,r17
 20082d4:	d9801215 	stw	r6,72(sp)
 20082d8:	800d883a 	mov	r6,r16
 20082dc:	db001615 	stw	r12,88(sp)
 20082e0:	15c00044 	addi	r23,r2,1
 20082e4:	200394c0 	call	200394c <__muldf3>
 20082e8:	d9401017 	ldw	r5,64(sp)
 20082ec:	d9000f17 	ldw	r4,60(sp)
 20082f0:	d8c01515 	stw	r3,84(sp)
 20082f4:	d8801415 	stw	r2,80(sp)
 20082f8:	200fe7c0 	call	200fe7c <__fixdfsi>
 20082fc:	1009883a 	mov	r4,r2
 2008300:	1021883a 	mov	r16,r2
 2008304:	200fefc0 	call	200fefc <__floatsidf>
 2008308:	d9000f17 	ldw	r4,60(sp)
 200830c:	d9401017 	ldw	r5,64(sp)
 2008310:	100d883a 	mov	r6,r2
 2008314:	180f883a 	mov	r7,r3
 2008318:	200f5800 	call	200f580 <__subdf3>
 200831c:	1829883a 	mov	r20,r3
 2008320:	d8c00717 	ldw	r3,28(sp)
 2008324:	84000c04 	addi	r16,r16,48
 2008328:	1023883a 	mov	r17,r2
 200832c:	1c000005 	stb	r16,0(r3)
 2008330:	db001617 	ldw	r12,88(sp)
 2008334:	00800044 	movi	r2,1
 2008338:	60802226 	beq	r12,r2,20083c4 <_dtoa_r+0x1424>
 200833c:	d9c00717 	ldw	r7,28(sp)
 2008340:	8805883a 	mov	r2,r17
 2008344:	b82b883a 	mov	r21,r23
 2008348:	3b19883a 	add	r12,r7,r12
 200834c:	6023883a 	mov	r17,r12
 2008350:	a007883a 	mov	r3,r20
 2008354:	dc800f15 	stw	r18,60(sp)
 2008358:	000d883a 	mov	r6,zero
 200835c:	01d00934 	movhi	r7,16420
 2008360:	1009883a 	mov	r4,r2
 2008364:	180b883a 	mov	r5,r3
 2008368:	200394c0 	call	200394c <__muldf3>
 200836c:	180b883a 	mov	r5,r3
 2008370:	1009883a 	mov	r4,r2
 2008374:	1829883a 	mov	r20,r3
 2008378:	1025883a 	mov	r18,r2
 200837c:	200fe7c0 	call	200fe7c <__fixdfsi>
 2008380:	1009883a 	mov	r4,r2
 2008384:	1021883a 	mov	r16,r2
 2008388:	200fefc0 	call	200fefc <__floatsidf>
 200838c:	100d883a 	mov	r6,r2
 2008390:	180f883a 	mov	r7,r3
 2008394:	9009883a 	mov	r4,r18
 2008398:	a00b883a 	mov	r5,r20
 200839c:	84000c04 	addi	r16,r16,48
 20083a0:	200f5800 	call	200f580 <__subdf3>
 20083a4:	ad400044 	addi	r21,r21,1
 20083a8:	ac3fffc5 	stb	r16,-1(r21)
 20083ac:	ac7fea1e 	bne	r21,r17,2008358 <_dtoa_r+0x13b8>
 20083b0:	1023883a 	mov	r17,r2
 20083b4:	d8801217 	ldw	r2,72(sp)
 20083b8:	dc800f17 	ldw	r18,60(sp)
 20083bc:	1829883a 	mov	r20,r3
 20083c0:	b8af883a 	add	r23,r23,r2
 20083c4:	d9001417 	ldw	r4,80(sp)
 20083c8:	d9401517 	ldw	r5,84(sp)
 20083cc:	000d883a 	mov	r6,zero
 20083d0:	01cff834 	movhi	r7,16352
 20083d4:	200eb580 	call	200eb58 <__adddf3>
 20083d8:	880d883a 	mov	r6,r17
 20083dc:	a00f883a 	mov	r7,r20
 20083e0:	1009883a 	mov	r4,r2
 20083e4:	180b883a 	mov	r5,r3
 20083e8:	200f48c0 	call	200f48c <__ledf2>
 20083ec:	10003e0e 	bge	r2,zero,20084e8 <_dtoa_r+0x1548>
 20083f0:	d9001317 	ldw	r4,76(sp)
 20083f4:	bd3fffc3 	ldbu	r20,-1(r23)
 20083f8:	d9000515 	stw	r4,20(sp)
 20083fc:	003d3b06 	br	20078ec <_dtoa_r+0x94c>
 2008400:	0027883a 	mov	r19,zero
 2008404:	003f1b06 	br	2008074 <_dtoa_r+0x10d4>
 2008408:	d8800817 	ldw	r2,32(sp)
 200840c:	11e9c83a 	sub	r20,r2,r7
 2008410:	0005883a 	mov	r2,zero
 2008414:	003d5406 	br	2007968 <_dtoa_r+0x9c8>
 2008418:	00800044 	movi	r2,1
 200841c:	003dc706 	br	2007b3c <_dtoa_r+0xb9c>
 2008420:	d8c00217 	ldw	r3,8(sp)
 2008424:	00800d84 	movi	r2,54
 2008428:	dd400a17 	ldw	r21,40(sp)
 200842c:	10c5c83a 	sub	r2,r2,r3
 2008430:	dd000817 	ldw	r20,32(sp)
 2008434:	003d4c06 	br	2007968 <_dtoa_r+0x9c8>
 2008438:	dc800f15 	stw	r18,60(sp)
 200843c:	dcc01015 	stw	r19,64(sp)
 2008440:	04000084 	movi	r16,2
 2008444:	003bed06 	br	20073fc <_dtoa_r+0x45c>
 2008448:	d9000617 	ldw	r4,24(sp)
 200844c:	203f0d26 	beq	r4,zero,2008084 <_dtoa_r+0x10e4>
 2008450:	d9800c17 	ldw	r6,48(sp)
 2008454:	01bcab0e 	bge	zero,r6,2007704 <_dtoa_r+0x764>
 2008458:	d9401017 	ldw	r5,64(sp)
 200845c:	d9000f17 	ldw	r4,60(sp)
 2008460:	000d883a 	mov	r6,zero
 2008464:	01d00934 	movhi	r7,16420
 2008468:	200394c0 	call	200394c <__muldf3>
 200846c:	81000044 	addi	r4,r16,1
 2008470:	d8800f15 	stw	r2,60(sp)
 2008474:	d8c01015 	stw	r3,64(sp)
 2008478:	200fefc0 	call	200fefc <__floatsidf>
 200847c:	d9800f17 	ldw	r6,60(sp)
 2008480:	d9c01017 	ldw	r7,64(sp)
 2008484:	1009883a 	mov	r4,r2
 2008488:	180b883a 	mov	r5,r3
 200848c:	200394c0 	call	200394c <__muldf3>
 2008490:	01d00734 	movhi	r7,16412
 2008494:	000d883a 	mov	r6,zero
 2008498:	1009883a 	mov	r4,r2
 200849c:	180b883a 	mov	r5,r3
 20084a0:	200eb580 	call	200eb58 <__adddf3>
 20084a4:	d9c00517 	ldw	r7,20(sp)
 20084a8:	047f3034 	movhi	r17,64704
 20084ac:	1021883a 	mov	r16,r2
 20084b0:	39ffffc4 	addi	r7,r7,-1
 20084b4:	d9c01315 	stw	r7,76(sp)
 20084b8:	1c63883a 	add	r17,r3,r17
 20084bc:	db000c17 	ldw	r12,48(sp)
 20084c0:	003bea06 	br	200746c <_dtoa_r+0x4cc>
 20084c4:	dc000915 	stw	r16,36(sp)
 20084c8:	003e0e06 	br	2007d04 <_dtoa_r+0xd64>
 20084cc:	01000e44 	movi	r4,57
 20084d0:	8825883a 	mov	r18,r17
 20084d4:	9dc00044 	addi	r23,r19,1
 20084d8:	99000005 	stb	r4,0(r19)
 20084dc:	a023883a 	mov	r17,r20
 20084e0:	dc000915 	stw	r16,36(sp)
 20084e4:	003da406 	br	2007b78 <_dtoa_r+0xbd8>
 20084e8:	d9801417 	ldw	r6,80(sp)
 20084ec:	d9c01517 	ldw	r7,84(sp)
 20084f0:	0009883a 	mov	r4,zero
 20084f4:	014ff834 	movhi	r5,16352
 20084f8:	200f5800 	call	200f580 <__subdf3>
 20084fc:	880d883a 	mov	r6,r17
 2008500:	a00f883a 	mov	r7,r20
 2008504:	1009883a 	mov	r4,r2
 2008508:	180b883a 	mov	r5,r3
 200850c:	20038700 	call	2003870 <__gedf2>
 2008510:	00bc7c0e 	bge	zero,r2,2007704 <_dtoa_r+0x764>
 2008514:	01000c04 	movi	r4,48
 2008518:	00000106 	br	2008520 <_dtoa_r+0x1580>
 200851c:	102f883a 	mov	r23,r2
 2008520:	b8bfffc4 	addi	r2,r23,-1
 2008524:	10c00007 	ldb	r3,0(r2)
 2008528:	193ffc26 	beq	r3,r4,200851c <_dtoa_r+0x157c>
 200852c:	d9801317 	ldw	r6,76(sp)
 2008530:	d9800515 	stw	r6,20(sp)
 2008534:	003c4406 	br	2007648 <_dtoa_r+0x6a8>
 2008538:	d9801317 	ldw	r6,76(sp)
 200853c:	d9800515 	stw	r6,20(sp)
 2008540:	003cea06 	br	20078ec <_dtoa_r+0x94c>
 2008544:	dd800f17 	ldw	r22,60(sp)
 2008548:	dcc01017 	ldw	r19,64(sp)
 200854c:	dc801217 	ldw	r18,72(sp)
 2008550:	003c6c06 	br	2007704 <_dtoa_r+0x764>
 2008554:	903e031e 	bne	r18,zero,2007d64 <_dtoa_r+0xdc4>
 2008558:	003ebb06 	br	2008048 <_dtoa_r+0x10a8>
 200855c:	103e6c1e 	bne	r2,zero,2007f10 <_dtoa_r+0xf70>
 2008560:	4080004c 	andi	r2,r8,1
 2008564:	103e6a26 	beq	r2,zero,2007f10 <_dtoa_r+0xf70>
 2008568:	003e6606 	br	2007f04 <_dtoa_r+0xf64>
 200856c:	d8c00317 	ldw	r3,12(sp)
 2008570:	00800084 	movi	r2,2
 2008574:	10c02916 	blt	r2,r3,200861c <_dtoa_r+0x167c>
 2008578:	d9000c17 	ldw	r4,48(sp)
 200857c:	003e8806 	br	2007fa0 <_dtoa_r+0x1000>
 2008580:	04000084 	movi	r16,2
 2008584:	003b9d06 	br	20073fc <_dtoa_r+0x45c>
 2008588:	d9001317 	ldw	r4,76(sp)
 200858c:	d9000515 	stw	r4,20(sp)
 2008590:	003cd606 	br	20078ec <_dtoa_r+0x94c>
 2008594:	d8801317 	ldw	r2,76(sp)
 2008598:	d8800515 	stw	r2,20(sp)
 200859c:	003c2a06 	br	2007648 <_dtoa_r+0x6a8>
 20085a0:	d9800317 	ldw	r6,12(sp)
 20085a4:	00800084 	movi	r2,2
 20085a8:	11801516 	blt	r2,r6,2008600 <_dtoa_r+0x1660>
 20085ac:	d9c00c17 	ldw	r7,48(sp)
 20085b0:	d9c00615 	stw	r7,24(sp)
 20085b4:	003df706 	br	2007d94 <_dtoa_r+0xdf4>
 20085b8:	193d3926 	beq	r3,r4,2007aa0 <_dtoa_r+0xb00>
 20085bc:	00c00f04 	movi	r3,60
 20085c0:	1885c83a 	sub	r2,r3,r2
 20085c4:	003ddf06 	br	2007d44 <_dtoa_r+0xda4>
 20085c8:	e009883a 	mov	r4,fp
 20085cc:	e0001115 	stw	zero,68(fp)
 20085d0:	000b883a 	mov	r5,zero
 20085d4:	200a6580 	call	200a658 <_Balloc>
 20085d8:	d8800715 	stw	r2,28(sp)
 20085dc:	d8c00717 	ldw	r3,28(sp)
 20085e0:	00bfffc4 	movi	r2,-1
 20085e4:	01000044 	movi	r4,1
 20085e8:	d8800c15 	stw	r2,48(sp)
 20085ec:	e0c01015 	stw	r3,64(fp)
 20085f0:	d9000b15 	stw	r4,44(sp)
 20085f4:	d8800615 	stw	r2,24(sp)
 20085f8:	d8002215 	stw	zero,136(sp)
 20085fc:	003c4106 	br	2007704 <_dtoa_r+0x764>
 2008600:	d8c00c17 	ldw	r3,48(sp)
 2008604:	d8c00615 	stw	r3,24(sp)
 2008608:	003e7006 	br	2007fcc <_dtoa_r+0x102c>
 200860c:	04400044 	movi	r17,1
 2008610:	003b2006 	br	2007294 <_dtoa_r+0x2f4>
 2008614:	000b883a 	mov	r5,zero
 2008618:	003b3d06 	br	2007310 <_dtoa_r+0x370>
 200861c:	d8800c17 	ldw	r2,48(sp)
 2008620:	d8800615 	stw	r2,24(sp)
 2008624:	003e6906 	br	2007fcc <_dtoa_r+0x102c>

02008628 <__sflush_r>:
 2008628:	2880030b 	ldhu	r2,12(r5)
 200862c:	defffb04 	addi	sp,sp,-20
 2008630:	dcc00315 	stw	r19,12(sp)
 2008634:	dc400115 	stw	r17,4(sp)
 2008638:	dfc00415 	stw	ra,16(sp)
 200863c:	dc800215 	stw	r18,8(sp)
 2008640:	dc000015 	stw	r16,0(sp)
 2008644:	10c0020c 	andi	r3,r2,8
 2008648:	2823883a 	mov	r17,r5
 200864c:	2027883a 	mov	r19,r4
 2008650:	1800311e 	bne	r3,zero,2008718 <__sflush_r+0xf0>
 2008654:	28c00117 	ldw	r3,4(r5)
 2008658:	10820014 	ori	r2,r2,2048
 200865c:	2880030d 	sth	r2,12(r5)
 2008660:	00c04b0e 	bge	zero,r3,2008790 <__sflush_r+0x168>
 2008664:	8a000a17 	ldw	r8,40(r17)
 2008668:	40002326 	beq	r8,zero,20086f8 <__sflush_r+0xd0>
 200866c:	9c000017 	ldw	r16,0(r19)
 2008670:	10c4000c 	andi	r3,r2,4096
 2008674:	98000015 	stw	zero,0(r19)
 2008678:	18004826 	beq	r3,zero,200879c <__sflush_r+0x174>
 200867c:	89801417 	ldw	r6,80(r17)
 2008680:	10c0010c 	andi	r3,r2,4
 2008684:	18000626 	beq	r3,zero,20086a0 <__sflush_r+0x78>
 2008688:	88c00117 	ldw	r3,4(r17)
 200868c:	88800c17 	ldw	r2,48(r17)
 2008690:	30cdc83a 	sub	r6,r6,r3
 2008694:	10000226 	beq	r2,zero,20086a0 <__sflush_r+0x78>
 2008698:	88800f17 	ldw	r2,60(r17)
 200869c:	308dc83a 	sub	r6,r6,r2
 20086a0:	89400717 	ldw	r5,28(r17)
 20086a4:	000f883a 	mov	r7,zero
 20086a8:	9809883a 	mov	r4,r19
 20086ac:	403ee83a 	callr	r8
 20086b0:	00ffffc4 	movi	r3,-1
 20086b4:	10c04426 	beq	r2,r3,20087c8 <__sflush_r+0x1a0>
 20086b8:	88c0030b 	ldhu	r3,12(r17)
 20086bc:	89000417 	ldw	r4,16(r17)
 20086c0:	88000115 	stw	zero,4(r17)
 20086c4:	197dffcc 	andi	r5,r3,63487
 20086c8:	8940030d 	sth	r5,12(r17)
 20086cc:	89000015 	stw	r4,0(r17)
 20086d0:	18c4000c 	andi	r3,r3,4096
 20086d4:	18002c1e 	bne	r3,zero,2008788 <__sflush_r+0x160>
 20086d8:	89400c17 	ldw	r5,48(r17)
 20086dc:	9c000015 	stw	r16,0(r19)
 20086e0:	28000526 	beq	r5,zero,20086f8 <__sflush_r+0xd0>
 20086e4:	88801004 	addi	r2,r17,64
 20086e8:	28800226 	beq	r5,r2,20086f4 <__sflush_r+0xcc>
 20086ec:	9809883a 	mov	r4,r19
 20086f0:	2008da40 	call	2008da4 <_free_r>
 20086f4:	88000c15 	stw	zero,48(r17)
 20086f8:	0005883a 	mov	r2,zero
 20086fc:	dfc00417 	ldw	ra,16(sp)
 2008700:	dcc00317 	ldw	r19,12(sp)
 2008704:	dc800217 	ldw	r18,8(sp)
 2008708:	dc400117 	ldw	r17,4(sp)
 200870c:	dc000017 	ldw	r16,0(sp)
 2008710:	dec00504 	addi	sp,sp,20
 2008714:	f800283a 	ret
 2008718:	2c800417 	ldw	r18,16(r5)
 200871c:	903ff626 	beq	r18,zero,20086f8 <__sflush_r+0xd0>
 2008720:	2c000017 	ldw	r16,0(r5)
 2008724:	108000cc 	andi	r2,r2,3
 2008728:	2c800015 	stw	r18,0(r5)
 200872c:	84a1c83a 	sub	r16,r16,r18
 2008730:	1000131e 	bne	r2,zero,2008780 <__sflush_r+0x158>
 2008734:	28800517 	ldw	r2,20(r5)
 2008738:	88800215 	stw	r2,8(r17)
 200873c:	04000316 	blt	zero,r16,200874c <__sflush_r+0x124>
 2008740:	003fed06 	br	20086f8 <__sflush_r+0xd0>
 2008744:	90a5883a 	add	r18,r18,r2
 2008748:	043feb0e 	bge	zero,r16,20086f8 <__sflush_r+0xd0>
 200874c:	88800917 	ldw	r2,36(r17)
 2008750:	89400717 	ldw	r5,28(r17)
 2008754:	800f883a 	mov	r7,r16
 2008758:	900d883a 	mov	r6,r18
 200875c:	9809883a 	mov	r4,r19
 2008760:	103ee83a 	callr	r2
 2008764:	80a1c83a 	sub	r16,r16,r2
 2008768:	00bff616 	blt	zero,r2,2008744 <__sflush_r+0x11c>
 200876c:	88c0030b 	ldhu	r3,12(r17)
 2008770:	00bfffc4 	movi	r2,-1
 2008774:	18c01014 	ori	r3,r3,64
 2008778:	88c0030d 	sth	r3,12(r17)
 200877c:	003fdf06 	br	20086fc <__sflush_r+0xd4>
 2008780:	0005883a 	mov	r2,zero
 2008784:	003fec06 	br	2008738 <__sflush_r+0x110>
 2008788:	88801415 	stw	r2,80(r17)
 200878c:	003fd206 	br	20086d8 <__sflush_r+0xb0>
 2008790:	28c00f17 	ldw	r3,60(r5)
 2008794:	00ffb316 	blt	zero,r3,2008664 <__sflush_r+0x3c>
 2008798:	003fd706 	br	20086f8 <__sflush_r+0xd0>
 200879c:	89400717 	ldw	r5,28(r17)
 20087a0:	000d883a 	mov	r6,zero
 20087a4:	01c00044 	movi	r7,1
 20087a8:	9809883a 	mov	r4,r19
 20087ac:	403ee83a 	callr	r8
 20087b0:	100d883a 	mov	r6,r2
 20087b4:	00bfffc4 	movi	r2,-1
 20087b8:	30801426 	beq	r6,r2,200880c <__sflush_r+0x1e4>
 20087bc:	8880030b 	ldhu	r2,12(r17)
 20087c0:	8a000a17 	ldw	r8,40(r17)
 20087c4:	003fae06 	br	2008680 <__sflush_r+0x58>
 20087c8:	98c00017 	ldw	r3,0(r19)
 20087cc:	183fba26 	beq	r3,zero,20086b8 <__sflush_r+0x90>
 20087d0:	01000744 	movi	r4,29
 20087d4:	19000626 	beq	r3,r4,20087f0 <__sflush_r+0x1c8>
 20087d8:	01000584 	movi	r4,22
 20087dc:	19000426 	beq	r3,r4,20087f0 <__sflush_r+0x1c8>
 20087e0:	88c0030b 	ldhu	r3,12(r17)
 20087e4:	18c01014 	ori	r3,r3,64
 20087e8:	88c0030d 	sth	r3,12(r17)
 20087ec:	003fc306 	br	20086fc <__sflush_r+0xd4>
 20087f0:	8880030b 	ldhu	r2,12(r17)
 20087f4:	88c00417 	ldw	r3,16(r17)
 20087f8:	88000115 	stw	zero,4(r17)
 20087fc:	10bdffcc 	andi	r2,r2,63487
 2008800:	8880030d 	sth	r2,12(r17)
 2008804:	88c00015 	stw	r3,0(r17)
 2008808:	003fb306 	br	20086d8 <__sflush_r+0xb0>
 200880c:	98800017 	ldw	r2,0(r19)
 2008810:	103fea26 	beq	r2,zero,20087bc <__sflush_r+0x194>
 2008814:	00c00744 	movi	r3,29
 2008818:	10c00226 	beq	r2,r3,2008824 <__sflush_r+0x1fc>
 200881c:	00c00584 	movi	r3,22
 2008820:	10c0031e 	bne	r2,r3,2008830 <__sflush_r+0x208>
 2008824:	9c000015 	stw	r16,0(r19)
 2008828:	0005883a 	mov	r2,zero
 200882c:	003fb306 	br	20086fc <__sflush_r+0xd4>
 2008830:	88c0030b 	ldhu	r3,12(r17)
 2008834:	3005883a 	mov	r2,r6
 2008838:	18c01014 	ori	r3,r3,64
 200883c:	88c0030d 	sth	r3,12(r17)
 2008840:	003fae06 	br	20086fc <__sflush_r+0xd4>

02008844 <_fflush_r>:
 2008844:	defffd04 	addi	sp,sp,-12
 2008848:	dc000115 	stw	r16,4(sp)
 200884c:	dfc00215 	stw	ra,8(sp)
 2008850:	2021883a 	mov	r16,r4
 2008854:	20000226 	beq	r4,zero,2008860 <_fflush_r+0x1c>
 2008858:	20800e17 	ldw	r2,56(r4)
 200885c:	10000c26 	beq	r2,zero,2008890 <_fflush_r+0x4c>
 2008860:	2880030f 	ldh	r2,12(r5)
 2008864:	1000051e 	bne	r2,zero,200887c <_fflush_r+0x38>
 2008868:	0005883a 	mov	r2,zero
 200886c:	dfc00217 	ldw	ra,8(sp)
 2008870:	dc000117 	ldw	r16,4(sp)
 2008874:	dec00304 	addi	sp,sp,12
 2008878:	f800283a 	ret
 200887c:	8009883a 	mov	r4,r16
 2008880:	dfc00217 	ldw	ra,8(sp)
 2008884:	dc000117 	ldw	r16,4(sp)
 2008888:	dec00304 	addi	sp,sp,12
 200888c:	20086281 	jmpi	2008628 <__sflush_r>
 2008890:	d9400015 	stw	r5,0(sp)
 2008894:	2008c300 	call	2008c30 <__sinit>
 2008898:	d9400017 	ldw	r5,0(sp)
 200889c:	003ff006 	br	2008860 <_fflush_r+0x1c>

020088a0 <fflush>:
 20088a0:	20000526 	beq	r4,zero,20088b8 <fflush+0x18>
 20088a4:	008080b4 	movhi	r2,514
 20088a8:	10b50804 	addi	r2,r2,-11232
 20088ac:	200b883a 	mov	r5,r4
 20088b0:	11000017 	ldw	r4,0(r2)
 20088b4:	20088441 	jmpi	2008844 <_fflush_r>
 20088b8:	008080b4 	movhi	r2,514
 20088bc:	10b50704 	addi	r2,r2,-11236
 20088c0:	11000017 	ldw	r4,0(r2)
 20088c4:	01408074 	movhi	r5,513
 20088c8:	29621104 	addi	r5,r5,-30652
 20088cc:	20096401 	jmpi	2009640 <_fwalk_reent>

020088d0 <__fp_unlock>:
 20088d0:	0005883a 	mov	r2,zero
 20088d4:	f800283a 	ret

020088d8 <_cleanup_r>:
 20088d8:	01408074 	movhi	r5,513
 20088dc:	2975f704 	addi	r5,r5,-10276
 20088e0:	20096401 	jmpi	2009640 <_fwalk_reent>

020088e4 <__sinit.part.1>:
 20088e4:	defff704 	addi	sp,sp,-36
 20088e8:	00c08074 	movhi	r3,513
 20088ec:	dfc00815 	stw	ra,32(sp)
 20088f0:	ddc00715 	stw	r23,28(sp)
 20088f4:	dd800615 	stw	r22,24(sp)
 20088f8:	dd400515 	stw	r21,20(sp)
 20088fc:	dd000415 	stw	r20,16(sp)
 2008900:	dcc00315 	stw	r19,12(sp)
 2008904:	dc800215 	stw	r18,8(sp)
 2008908:	dc400115 	stw	r17,4(sp)
 200890c:	dc000015 	stw	r16,0(sp)
 2008910:	18e23604 	addi	r3,r3,-30504
 2008914:	24000117 	ldw	r16,4(r4)
 2008918:	20c00f15 	stw	r3,60(r4)
 200891c:	2080bb04 	addi	r2,r4,748
 2008920:	00c000c4 	movi	r3,3
 2008924:	20c0b915 	stw	r3,740(r4)
 2008928:	2080ba15 	stw	r2,744(r4)
 200892c:	2000b815 	stw	zero,736(r4)
 2008930:	05c00204 	movi	r23,8
 2008934:	00800104 	movi	r2,4
 2008938:	2025883a 	mov	r18,r4
 200893c:	b80d883a 	mov	r6,r23
 2008940:	81001704 	addi	r4,r16,92
 2008944:	000b883a 	mov	r5,zero
 2008948:	80000015 	stw	zero,0(r16)
 200894c:	80000115 	stw	zero,4(r16)
 2008950:	80000215 	stw	zero,8(r16)
 2008954:	8080030d 	sth	r2,12(r16)
 2008958:	80001915 	stw	zero,100(r16)
 200895c:	8000038d 	sth	zero,14(r16)
 2008960:	80000415 	stw	zero,16(r16)
 2008964:	80000515 	stw	zero,20(r16)
 2008968:	80000615 	stw	zero,24(r16)
 200896c:	200a5300 	call	200a530 <memset>
 2008970:	05808074 	movhi	r22,513
 2008974:	94400217 	ldw	r17,8(r18)
 2008978:	05408074 	movhi	r21,513
 200897c:	05008074 	movhi	r20,513
 2008980:	04c08074 	movhi	r19,513
 2008984:	b5af4f04 	addi	r22,r22,-17092
 2008988:	ad6f6604 	addi	r21,r21,-17000
 200898c:	a52f8504 	addi	r20,r20,-16876
 2008990:	9cef9c04 	addi	r19,r19,-16784
 2008994:	85800815 	stw	r22,32(r16)
 2008998:	85400915 	stw	r21,36(r16)
 200899c:	85000a15 	stw	r20,40(r16)
 20089a0:	84c00b15 	stw	r19,44(r16)
 20089a4:	84000715 	stw	r16,28(r16)
 20089a8:	00800284 	movi	r2,10
 20089ac:	8880030d 	sth	r2,12(r17)
 20089b0:	00800044 	movi	r2,1
 20089b4:	b80d883a 	mov	r6,r23
 20089b8:	89001704 	addi	r4,r17,92
 20089bc:	000b883a 	mov	r5,zero
 20089c0:	88000015 	stw	zero,0(r17)
 20089c4:	88000115 	stw	zero,4(r17)
 20089c8:	88000215 	stw	zero,8(r17)
 20089cc:	88001915 	stw	zero,100(r17)
 20089d0:	8880038d 	sth	r2,14(r17)
 20089d4:	88000415 	stw	zero,16(r17)
 20089d8:	88000515 	stw	zero,20(r17)
 20089dc:	88000615 	stw	zero,24(r17)
 20089e0:	200a5300 	call	200a530 <memset>
 20089e4:	94000317 	ldw	r16,12(r18)
 20089e8:	00800484 	movi	r2,18
 20089ec:	8c400715 	stw	r17,28(r17)
 20089f0:	8d800815 	stw	r22,32(r17)
 20089f4:	8d400915 	stw	r21,36(r17)
 20089f8:	8d000a15 	stw	r20,40(r17)
 20089fc:	8cc00b15 	stw	r19,44(r17)
 2008a00:	8080030d 	sth	r2,12(r16)
 2008a04:	00800084 	movi	r2,2
 2008a08:	80000015 	stw	zero,0(r16)
 2008a0c:	80000115 	stw	zero,4(r16)
 2008a10:	80000215 	stw	zero,8(r16)
 2008a14:	80001915 	stw	zero,100(r16)
 2008a18:	8080038d 	sth	r2,14(r16)
 2008a1c:	80000415 	stw	zero,16(r16)
 2008a20:	80000515 	stw	zero,20(r16)
 2008a24:	80000615 	stw	zero,24(r16)
 2008a28:	b80d883a 	mov	r6,r23
 2008a2c:	000b883a 	mov	r5,zero
 2008a30:	81001704 	addi	r4,r16,92
 2008a34:	200a5300 	call	200a530 <memset>
 2008a38:	00800044 	movi	r2,1
 2008a3c:	84000715 	stw	r16,28(r16)
 2008a40:	85800815 	stw	r22,32(r16)
 2008a44:	85400915 	stw	r21,36(r16)
 2008a48:	85000a15 	stw	r20,40(r16)
 2008a4c:	84c00b15 	stw	r19,44(r16)
 2008a50:	90800e15 	stw	r2,56(r18)
 2008a54:	dfc00817 	ldw	ra,32(sp)
 2008a58:	ddc00717 	ldw	r23,28(sp)
 2008a5c:	dd800617 	ldw	r22,24(sp)
 2008a60:	dd400517 	ldw	r21,20(sp)
 2008a64:	dd000417 	ldw	r20,16(sp)
 2008a68:	dcc00317 	ldw	r19,12(sp)
 2008a6c:	dc800217 	ldw	r18,8(sp)
 2008a70:	dc400117 	ldw	r17,4(sp)
 2008a74:	dc000017 	ldw	r16,0(sp)
 2008a78:	dec00904 	addi	sp,sp,36
 2008a7c:	f800283a 	ret

02008a80 <__fp_lock>:
 2008a80:	0005883a 	mov	r2,zero
 2008a84:	f800283a 	ret

02008a88 <__sfmoreglue>:
 2008a88:	defffc04 	addi	sp,sp,-16
 2008a8c:	dc800215 	stw	r18,8(sp)
 2008a90:	2825883a 	mov	r18,r5
 2008a94:	dc000015 	stw	r16,0(sp)
 2008a98:	01401a04 	movi	r5,104
 2008a9c:	2021883a 	mov	r16,r4
 2008aa0:	913fffc4 	addi	r4,r18,-1
 2008aa4:	dfc00315 	stw	ra,12(sp)
 2008aa8:	dc400115 	stw	r17,4(sp)
 2008aac:	20019440 	call	2001944 <__mulsi3>
 2008ab0:	8009883a 	mov	r4,r16
 2008ab4:	11401d04 	addi	r5,r2,116
 2008ab8:	1023883a 	mov	r17,r2
 2008abc:	200999c0 	call	200999c <_malloc_r>
 2008ac0:	1021883a 	mov	r16,r2
 2008ac4:	10000726 	beq	r2,zero,2008ae4 <__sfmoreglue+0x5c>
 2008ac8:	11000304 	addi	r4,r2,12
 2008acc:	10000015 	stw	zero,0(r2)
 2008ad0:	14800115 	stw	r18,4(r2)
 2008ad4:	11000215 	stw	r4,8(r2)
 2008ad8:	89801a04 	addi	r6,r17,104
 2008adc:	000b883a 	mov	r5,zero
 2008ae0:	200a5300 	call	200a530 <memset>
 2008ae4:	8005883a 	mov	r2,r16
 2008ae8:	dfc00317 	ldw	ra,12(sp)
 2008aec:	dc800217 	ldw	r18,8(sp)
 2008af0:	dc400117 	ldw	r17,4(sp)
 2008af4:	dc000017 	ldw	r16,0(sp)
 2008af8:	dec00404 	addi	sp,sp,16
 2008afc:	f800283a 	ret

02008b00 <__sfp>:
 2008b00:	defffb04 	addi	sp,sp,-20
 2008b04:	dc000015 	stw	r16,0(sp)
 2008b08:	040080b4 	movhi	r16,514
 2008b0c:	84350704 	addi	r16,r16,-11236
 2008b10:	dcc00315 	stw	r19,12(sp)
 2008b14:	2027883a 	mov	r19,r4
 2008b18:	81000017 	ldw	r4,0(r16)
 2008b1c:	dfc00415 	stw	ra,16(sp)
 2008b20:	dc800215 	stw	r18,8(sp)
 2008b24:	20800e17 	ldw	r2,56(r4)
 2008b28:	dc400115 	stw	r17,4(sp)
 2008b2c:	1000021e 	bne	r2,zero,2008b38 <__sfp+0x38>
 2008b30:	20088e40 	call	20088e4 <__sinit.part.1>
 2008b34:	81000017 	ldw	r4,0(r16)
 2008b38:	2480b804 	addi	r18,r4,736
 2008b3c:	047fffc4 	movi	r17,-1
 2008b40:	91000117 	ldw	r4,4(r18)
 2008b44:	94000217 	ldw	r16,8(r18)
 2008b48:	213fffc4 	addi	r4,r4,-1
 2008b4c:	20000a16 	blt	r4,zero,2008b78 <__sfp+0x78>
 2008b50:	8080030f 	ldh	r2,12(r16)
 2008b54:	10000c26 	beq	r2,zero,2008b88 <__sfp+0x88>
 2008b58:	80c01d04 	addi	r3,r16,116
 2008b5c:	00000206 	br	2008b68 <__sfp+0x68>
 2008b60:	18bfe60f 	ldh	r2,-104(r3)
 2008b64:	10000826 	beq	r2,zero,2008b88 <__sfp+0x88>
 2008b68:	213fffc4 	addi	r4,r4,-1
 2008b6c:	1c3ffd04 	addi	r16,r3,-12
 2008b70:	18c01a04 	addi	r3,r3,104
 2008b74:	247ffa1e 	bne	r4,r17,2008b60 <__sfp+0x60>
 2008b78:	90800017 	ldw	r2,0(r18)
 2008b7c:	10001d26 	beq	r2,zero,2008bf4 <__sfp+0xf4>
 2008b80:	1025883a 	mov	r18,r2
 2008b84:	003fee06 	br	2008b40 <__sfp+0x40>
 2008b88:	00bfffc4 	movi	r2,-1
 2008b8c:	8080038d 	sth	r2,14(r16)
 2008b90:	00800044 	movi	r2,1
 2008b94:	8080030d 	sth	r2,12(r16)
 2008b98:	80001915 	stw	zero,100(r16)
 2008b9c:	80000015 	stw	zero,0(r16)
 2008ba0:	80000215 	stw	zero,8(r16)
 2008ba4:	80000115 	stw	zero,4(r16)
 2008ba8:	80000415 	stw	zero,16(r16)
 2008bac:	80000515 	stw	zero,20(r16)
 2008bb0:	80000615 	stw	zero,24(r16)
 2008bb4:	01800204 	movi	r6,8
 2008bb8:	000b883a 	mov	r5,zero
 2008bbc:	81001704 	addi	r4,r16,92
 2008bc0:	200a5300 	call	200a530 <memset>
 2008bc4:	8005883a 	mov	r2,r16
 2008bc8:	80000c15 	stw	zero,48(r16)
 2008bcc:	80000d15 	stw	zero,52(r16)
 2008bd0:	80001115 	stw	zero,68(r16)
 2008bd4:	80001215 	stw	zero,72(r16)
 2008bd8:	dfc00417 	ldw	ra,16(sp)
 2008bdc:	dcc00317 	ldw	r19,12(sp)
 2008be0:	dc800217 	ldw	r18,8(sp)
 2008be4:	dc400117 	ldw	r17,4(sp)
 2008be8:	dc000017 	ldw	r16,0(sp)
 2008bec:	dec00504 	addi	sp,sp,20
 2008bf0:	f800283a 	ret
 2008bf4:	01400104 	movi	r5,4
 2008bf8:	9809883a 	mov	r4,r19
 2008bfc:	2008a880 	call	2008a88 <__sfmoreglue>
 2008c00:	90800015 	stw	r2,0(r18)
 2008c04:	103fde1e 	bne	r2,zero,2008b80 <__sfp+0x80>
 2008c08:	00800304 	movi	r2,12
 2008c0c:	98800015 	stw	r2,0(r19)
 2008c10:	0005883a 	mov	r2,zero
 2008c14:	003ff006 	br	2008bd8 <__sfp+0xd8>

02008c18 <_cleanup>:
 2008c18:	008080b4 	movhi	r2,514
 2008c1c:	10b50704 	addi	r2,r2,-11236
 2008c20:	11000017 	ldw	r4,0(r2)
 2008c24:	01408074 	movhi	r5,513
 2008c28:	2975f704 	addi	r5,r5,-10276
 2008c2c:	20096401 	jmpi	2009640 <_fwalk_reent>

02008c30 <__sinit>:
 2008c30:	20800e17 	ldw	r2,56(r4)
 2008c34:	10000126 	beq	r2,zero,2008c3c <__sinit+0xc>
 2008c38:	f800283a 	ret
 2008c3c:	20088e41 	jmpi	20088e4 <__sinit.part.1>

02008c40 <__sfp_lock_acquire>:
 2008c40:	f800283a 	ret

02008c44 <__sfp_lock_release>:
 2008c44:	f800283a 	ret

02008c48 <__sinit_lock_acquire>:
 2008c48:	f800283a 	ret

02008c4c <__sinit_lock_release>:
 2008c4c:	f800283a 	ret

02008c50 <__fp_lock_all>:
 2008c50:	008080b4 	movhi	r2,514
 2008c54:	10b50804 	addi	r2,r2,-11232
 2008c58:	11000017 	ldw	r4,0(r2)
 2008c5c:	01408074 	movhi	r5,513
 2008c60:	2962a004 	addi	r5,r5,-30080
 2008c64:	200957c1 	jmpi	200957c <_fwalk>

02008c68 <__fp_unlock_all>:
 2008c68:	008080b4 	movhi	r2,514
 2008c6c:	10b50804 	addi	r2,r2,-11232
 2008c70:	11000017 	ldw	r4,0(r2)
 2008c74:	01408074 	movhi	r5,513
 2008c78:	29623404 	addi	r5,r5,-30512
 2008c7c:	200957c1 	jmpi	200957c <_fwalk>

02008c80 <_malloc_trim_r>:
 2008c80:	defffb04 	addi	sp,sp,-20
 2008c84:	dcc00315 	stw	r19,12(sp)
 2008c88:	04c080b4 	movhi	r19,514
 2008c8c:	dc800215 	stw	r18,8(sp)
 2008c90:	dc400115 	stw	r17,4(sp)
 2008c94:	dc000015 	stw	r16,0(sp)
 2008c98:	dfc00415 	stw	ra,16(sp)
 2008c9c:	2821883a 	mov	r16,r5
 2008ca0:	9cef7f04 	addi	r19,r19,-16900
 2008ca4:	2025883a 	mov	r18,r4
 2008ca8:	2010b300 	call	2010b30 <__malloc_lock>
 2008cac:	98800217 	ldw	r2,8(r19)
 2008cb0:	14400117 	ldw	r17,4(r2)
 2008cb4:	00bfff04 	movi	r2,-4
 2008cb8:	88a2703a 	and	r17,r17,r2
 2008cbc:	8c21c83a 	sub	r16,r17,r16
 2008cc0:	8403fbc4 	addi	r16,r16,4079
 2008cc4:	8020d33a 	srli	r16,r16,12
 2008cc8:	0083ffc4 	movi	r2,4095
 2008ccc:	843fffc4 	addi	r16,r16,-1
 2008cd0:	8020933a 	slli	r16,r16,12
 2008cd4:	1400060e 	bge	r2,r16,2008cf0 <_malloc_trim_r+0x70>
 2008cd8:	000b883a 	mov	r5,zero
 2008cdc:	9009883a 	mov	r4,r18
 2008ce0:	200bce80 	call	200bce8 <_sbrk_r>
 2008ce4:	98c00217 	ldw	r3,8(r19)
 2008ce8:	1c47883a 	add	r3,r3,r17
 2008cec:	10c00a26 	beq	r2,r3,2008d18 <_malloc_trim_r+0x98>
 2008cf0:	9009883a 	mov	r4,r18
 2008cf4:	2010c500 	call	2010c50 <__malloc_unlock>
 2008cf8:	0005883a 	mov	r2,zero
 2008cfc:	dfc00417 	ldw	ra,16(sp)
 2008d00:	dcc00317 	ldw	r19,12(sp)
 2008d04:	dc800217 	ldw	r18,8(sp)
 2008d08:	dc400117 	ldw	r17,4(sp)
 2008d0c:	dc000017 	ldw	r16,0(sp)
 2008d10:	dec00504 	addi	sp,sp,20
 2008d14:	f800283a 	ret
 2008d18:	040bc83a 	sub	r5,zero,r16
 2008d1c:	9009883a 	mov	r4,r18
 2008d20:	200bce80 	call	200bce8 <_sbrk_r>
 2008d24:	00ffffc4 	movi	r3,-1
 2008d28:	10c00d26 	beq	r2,r3,2008d60 <_malloc_trim_r+0xe0>
 2008d2c:	00c080b4 	movhi	r3,514
 2008d30:	18fc4304 	addi	r3,r3,-3828
 2008d34:	18800017 	ldw	r2,0(r3)
 2008d38:	99000217 	ldw	r4,8(r19)
 2008d3c:	8c23c83a 	sub	r17,r17,r16
 2008d40:	8c400054 	ori	r17,r17,1
 2008d44:	1421c83a 	sub	r16,r2,r16
 2008d48:	24400115 	stw	r17,4(r4)
 2008d4c:	9009883a 	mov	r4,r18
 2008d50:	1c000015 	stw	r16,0(r3)
 2008d54:	2010c500 	call	2010c50 <__malloc_unlock>
 2008d58:	00800044 	movi	r2,1
 2008d5c:	003fe706 	br	2008cfc <_malloc_trim_r+0x7c>
 2008d60:	000b883a 	mov	r5,zero
 2008d64:	9009883a 	mov	r4,r18
 2008d68:	200bce80 	call	200bce8 <_sbrk_r>
 2008d6c:	99000217 	ldw	r4,8(r19)
 2008d70:	014003c4 	movi	r5,15
 2008d74:	1107c83a 	sub	r3,r2,r4
 2008d78:	28ffdd0e 	bge	r5,r3,2008cf0 <_malloc_trim_r+0x70>
 2008d7c:	014080b4 	movhi	r5,514
 2008d80:	29750a04 	addi	r5,r5,-11224
 2008d84:	29400017 	ldw	r5,0(r5)
 2008d88:	18c00054 	ori	r3,r3,1
 2008d8c:	20c00115 	stw	r3,4(r4)
 2008d90:	00c080b4 	movhi	r3,514
 2008d94:	1145c83a 	sub	r2,r2,r5
 2008d98:	18fc4304 	addi	r3,r3,-3828
 2008d9c:	18800015 	stw	r2,0(r3)
 2008da0:	003fd306 	br	2008cf0 <_malloc_trim_r+0x70>

02008da4 <_free_r>:
 2008da4:	28004126 	beq	r5,zero,2008eac <_free_r+0x108>
 2008da8:	defffd04 	addi	sp,sp,-12
 2008dac:	dc400115 	stw	r17,4(sp)
 2008db0:	dc000015 	stw	r16,0(sp)
 2008db4:	2023883a 	mov	r17,r4
 2008db8:	2821883a 	mov	r16,r5
 2008dbc:	dfc00215 	stw	ra,8(sp)
 2008dc0:	2010b300 	call	2010b30 <__malloc_lock>
 2008dc4:	81ffff17 	ldw	r7,-4(r16)
 2008dc8:	00bfff84 	movi	r2,-2
 2008dcc:	010080b4 	movhi	r4,514
 2008dd0:	81bffe04 	addi	r6,r16,-8
 2008dd4:	3884703a 	and	r2,r7,r2
 2008dd8:	212f7f04 	addi	r4,r4,-16900
 2008ddc:	308b883a 	add	r5,r6,r2
 2008de0:	2a400117 	ldw	r9,4(r5)
 2008de4:	22000217 	ldw	r8,8(r4)
 2008de8:	00ffff04 	movi	r3,-4
 2008dec:	48c6703a 	and	r3,r9,r3
 2008df0:	2a005726 	beq	r5,r8,2008f50 <_free_r+0x1ac>
 2008df4:	28c00115 	stw	r3,4(r5)
 2008df8:	39c0004c 	andi	r7,r7,1
 2008dfc:	3800091e 	bne	r7,zero,2008e24 <_free_r+0x80>
 2008e00:	823ffe17 	ldw	r8,-8(r16)
 2008e04:	22400204 	addi	r9,r4,8
 2008e08:	320dc83a 	sub	r6,r6,r8
 2008e0c:	31c00217 	ldw	r7,8(r6)
 2008e10:	1205883a 	add	r2,r2,r8
 2008e14:	3a406526 	beq	r7,r9,2008fac <_free_r+0x208>
 2008e18:	32000317 	ldw	r8,12(r6)
 2008e1c:	3a000315 	stw	r8,12(r7)
 2008e20:	41c00215 	stw	r7,8(r8)
 2008e24:	28cf883a 	add	r7,r5,r3
 2008e28:	39c00117 	ldw	r7,4(r7)
 2008e2c:	39c0004c 	andi	r7,r7,1
 2008e30:	38003a26 	beq	r7,zero,2008f1c <_free_r+0x178>
 2008e34:	10c00054 	ori	r3,r2,1
 2008e38:	30c00115 	stw	r3,4(r6)
 2008e3c:	3087883a 	add	r3,r6,r2
 2008e40:	18800015 	stw	r2,0(r3)
 2008e44:	00c07fc4 	movi	r3,511
 2008e48:	18801936 	bltu	r3,r2,2008eb0 <_free_r+0x10c>
 2008e4c:	1004d0fa 	srli	r2,r2,3
 2008e50:	01c00044 	movi	r7,1
 2008e54:	21400117 	ldw	r5,4(r4)
 2008e58:	10c00044 	addi	r3,r2,1
 2008e5c:	18c7883a 	add	r3,r3,r3
 2008e60:	1005d0ba 	srai	r2,r2,2
 2008e64:	18c7883a 	add	r3,r3,r3
 2008e68:	18c7883a 	add	r3,r3,r3
 2008e6c:	1907883a 	add	r3,r3,r4
 2008e70:	3884983a 	sll	r2,r7,r2
 2008e74:	19c00017 	ldw	r7,0(r3)
 2008e78:	1a3ffe04 	addi	r8,r3,-8
 2008e7c:	1144b03a 	or	r2,r2,r5
 2008e80:	32000315 	stw	r8,12(r6)
 2008e84:	31c00215 	stw	r7,8(r6)
 2008e88:	20800115 	stw	r2,4(r4)
 2008e8c:	19800015 	stw	r6,0(r3)
 2008e90:	39800315 	stw	r6,12(r7)
 2008e94:	8809883a 	mov	r4,r17
 2008e98:	dfc00217 	ldw	ra,8(sp)
 2008e9c:	dc400117 	ldw	r17,4(sp)
 2008ea0:	dc000017 	ldw	r16,0(sp)
 2008ea4:	dec00304 	addi	sp,sp,12
 2008ea8:	2010c501 	jmpi	2010c50 <__malloc_unlock>
 2008eac:	f800283a 	ret
 2008eb0:	100ad27a 	srli	r5,r2,9
 2008eb4:	00c00104 	movi	r3,4
 2008eb8:	19404a36 	bltu	r3,r5,2008fe4 <_free_r+0x240>
 2008ebc:	100ad1ba 	srli	r5,r2,6
 2008ec0:	28c00e44 	addi	r3,r5,57
 2008ec4:	18c7883a 	add	r3,r3,r3
 2008ec8:	29400e04 	addi	r5,r5,56
 2008ecc:	18c7883a 	add	r3,r3,r3
 2008ed0:	18c7883a 	add	r3,r3,r3
 2008ed4:	1909883a 	add	r4,r3,r4
 2008ed8:	20c00017 	ldw	r3,0(r4)
 2008edc:	01c080b4 	movhi	r7,514
 2008ee0:	213ffe04 	addi	r4,r4,-8
 2008ee4:	39ef7f04 	addi	r7,r7,-16900
 2008ee8:	20c04426 	beq	r4,r3,2008ffc <_free_r+0x258>
 2008eec:	01ffff04 	movi	r7,-4
 2008ef0:	19400117 	ldw	r5,4(r3)
 2008ef4:	29ca703a 	and	r5,r5,r7
 2008ef8:	1140022e 	bgeu	r2,r5,2008f04 <_free_r+0x160>
 2008efc:	18c00217 	ldw	r3,8(r3)
 2008f00:	20fffb1e 	bne	r4,r3,2008ef0 <_free_r+0x14c>
 2008f04:	19000317 	ldw	r4,12(r3)
 2008f08:	31000315 	stw	r4,12(r6)
 2008f0c:	30c00215 	stw	r3,8(r6)
 2008f10:	21800215 	stw	r6,8(r4)
 2008f14:	19800315 	stw	r6,12(r3)
 2008f18:	003fde06 	br	2008e94 <_free_r+0xf0>
 2008f1c:	29c00217 	ldw	r7,8(r5)
 2008f20:	10c5883a 	add	r2,r2,r3
 2008f24:	00c080b4 	movhi	r3,514
 2008f28:	18ef8104 	addi	r3,r3,-16892
 2008f2c:	38c03b26 	beq	r7,r3,200901c <_free_r+0x278>
 2008f30:	2a000317 	ldw	r8,12(r5)
 2008f34:	11400054 	ori	r5,r2,1
 2008f38:	3087883a 	add	r3,r6,r2
 2008f3c:	3a000315 	stw	r8,12(r7)
 2008f40:	41c00215 	stw	r7,8(r8)
 2008f44:	31400115 	stw	r5,4(r6)
 2008f48:	18800015 	stw	r2,0(r3)
 2008f4c:	003fbd06 	br	2008e44 <_free_r+0xa0>
 2008f50:	39c0004c 	andi	r7,r7,1
 2008f54:	10c5883a 	add	r2,r2,r3
 2008f58:	3800071e 	bne	r7,zero,2008f78 <_free_r+0x1d4>
 2008f5c:	81fffe17 	ldw	r7,-8(r16)
 2008f60:	31cdc83a 	sub	r6,r6,r7
 2008f64:	30c00317 	ldw	r3,12(r6)
 2008f68:	31400217 	ldw	r5,8(r6)
 2008f6c:	11c5883a 	add	r2,r2,r7
 2008f70:	28c00315 	stw	r3,12(r5)
 2008f74:	19400215 	stw	r5,8(r3)
 2008f78:	10c00054 	ori	r3,r2,1
 2008f7c:	30c00115 	stw	r3,4(r6)
 2008f80:	00c080b4 	movhi	r3,514
 2008f84:	18f50b04 	addi	r3,r3,-11220
 2008f88:	18c00017 	ldw	r3,0(r3)
 2008f8c:	21800215 	stw	r6,8(r4)
 2008f90:	10ffc036 	bltu	r2,r3,2008e94 <_free_r+0xf0>
 2008f94:	008080b4 	movhi	r2,514
 2008f98:	10bc2104 	addi	r2,r2,-3964
 2008f9c:	11400017 	ldw	r5,0(r2)
 2008fa0:	8809883a 	mov	r4,r17
 2008fa4:	2008c800 	call	2008c80 <_malloc_trim_r>
 2008fa8:	003fba06 	br	2008e94 <_free_r+0xf0>
 2008fac:	28c9883a 	add	r4,r5,r3
 2008fb0:	21000117 	ldw	r4,4(r4)
 2008fb4:	2100004c 	andi	r4,r4,1
 2008fb8:	2000391e 	bne	r4,zero,20090a0 <_free_r+0x2fc>
 2008fbc:	29c00217 	ldw	r7,8(r5)
 2008fc0:	29000317 	ldw	r4,12(r5)
 2008fc4:	1885883a 	add	r2,r3,r2
 2008fc8:	10c00054 	ori	r3,r2,1
 2008fcc:	39000315 	stw	r4,12(r7)
 2008fd0:	21c00215 	stw	r7,8(r4)
 2008fd4:	30c00115 	stw	r3,4(r6)
 2008fd8:	308d883a 	add	r6,r6,r2
 2008fdc:	30800015 	stw	r2,0(r6)
 2008fe0:	003fac06 	br	2008e94 <_free_r+0xf0>
 2008fe4:	00c00504 	movi	r3,20
 2008fe8:	19401536 	bltu	r3,r5,2009040 <_free_r+0x29c>
 2008fec:	28c01704 	addi	r3,r5,92
 2008ff0:	18c7883a 	add	r3,r3,r3
 2008ff4:	294016c4 	addi	r5,r5,91
 2008ff8:	003fb406 	br	2008ecc <_free_r+0x128>
 2008ffc:	280bd0ba 	srai	r5,r5,2
 2009000:	00c00044 	movi	r3,1
 2009004:	38800117 	ldw	r2,4(r7)
 2009008:	194a983a 	sll	r5,r3,r5
 200900c:	2007883a 	mov	r3,r4
 2009010:	2884b03a 	or	r2,r5,r2
 2009014:	38800115 	stw	r2,4(r7)
 2009018:	003fbb06 	br	2008f08 <_free_r+0x164>
 200901c:	21800515 	stw	r6,20(r4)
 2009020:	21800415 	stw	r6,16(r4)
 2009024:	10c00054 	ori	r3,r2,1
 2009028:	31c00315 	stw	r7,12(r6)
 200902c:	31c00215 	stw	r7,8(r6)
 2009030:	30c00115 	stw	r3,4(r6)
 2009034:	308d883a 	add	r6,r6,r2
 2009038:	30800015 	stw	r2,0(r6)
 200903c:	003f9506 	br	2008e94 <_free_r+0xf0>
 2009040:	00c01504 	movi	r3,84
 2009044:	19400536 	bltu	r3,r5,200905c <_free_r+0x2b8>
 2009048:	100ad33a 	srli	r5,r2,12
 200904c:	28c01bc4 	addi	r3,r5,111
 2009050:	18c7883a 	add	r3,r3,r3
 2009054:	29401b84 	addi	r5,r5,110
 2009058:	003f9c06 	br	2008ecc <_free_r+0x128>
 200905c:	00c05504 	movi	r3,340
 2009060:	19400536 	bltu	r3,r5,2009078 <_free_r+0x2d4>
 2009064:	100ad3fa 	srli	r5,r2,15
 2009068:	28c01e04 	addi	r3,r5,120
 200906c:	18c7883a 	add	r3,r3,r3
 2009070:	29401dc4 	addi	r5,r5,119
 2009074:	003f9506 	br	2008ecc <_free_r+0x128>
 2009078:	00c15504 	movi	r3,1364
 200907c:	19400536 	bltu	r3,r5,2009094 <_free_r+0x2f0>
 2009080:	100ad4ba 	srli	r5,r2,18
 2009084:	28c01f44 	addi	r3,r5,125
 2009088:	18c7883a 	add	r3,r3,r3
 200908c:	29401f04 	addi	r5,r5,124
 2009090:	003f8e06 	br	2008ecc <_free_r+0x128>
 2009094:	00c03f84 	movi	r3,254
 2009098:	01401f84 	movi	r5,126
 200909c:	003f8b06 	br	2008ecc <_free_r+0x128>
 20090a0:	10c00054 	ori	r3,r2,1
 20090a4:	30c00115 	stw	r3,4(r6)
 20090a8:	308d883a 	add	r6,r6,r2
 20090ac:	30800015 	stw	r2,0(r6)
 20090b0:	003f7806 	br	2008e94 <_free_r+0xf0>

020090b4 <__sfvwrite_r>:
 20090b4:	30800217 	ldw	r2,8(r6)
 20090b8:	10006726 	beq	r2,zero,2009258 <__sfvwrite_r+0x1a4>
 20090bc:	28c0030b 	ldhu	r3,12(r5)
 20090c0:	defff404 	addi	sp,sp,-48
 20090c4:	dd400715 	stw	r21,28(sp)
 20090c8:	dd000615 	stw	r20,24(sp)
 20090cc:	dc000215 	stw	r16,8(sp)
 20090d0:	dfc00b15 	stw	ra,44(sp)
 20090d4:	df000a15 	stw	fp,40(sp)
 20090d8:	ddc00915 	stw	r23,36(sp)
 20090dc:	dd800815 	stw	r22,32(sp)
 20090e0:	dcc00515 	stw	r19,20(sp)
 20090e4:	dc800415 	stw	r18,16(sp)
 20090e8:	dc400315 	stw	r17,12(sp)
 20090ec:	1880020c 	andi	r2,r3,8
 20090f0:	2821883a 	mov	r16,r5
 20090f4:	202b883a 	mov	r21,r4
 20090f8:	3029883a 	mov	r20,r6
 20090fc:	10002726 	beq	r2,zero,200919c <__sfvwrite_r+0xe8>
 2009100:	28800417 	ldw	r2,16(r5)
 2009104:	10002526 	beq	r2,zero,200919c <__sfvwrite_r+0xe8>
 2009108:	1880008c 	andi	r2,r3,2
 200910c:	a4400017 	ldw	r17,0(r20)
 2009110:	10002a26 	beq	r2,zero,20091bc <__sfvwrite_r+0x108>
 2009114:	05a00034 	movhi	r22,32768
 2009118:	0027883a 	mov	r19,zero
 200911c:	0025883a 	mov	r18,zero
 2009120:	b5bf0004 	addi	r22,r22,-1024
 2009124:	980d883a 	mov	r6,r19
 2009128:	a809883a 	mov	r4,r21
 200912c:	90004626 	beq	r18,zero,2009248 <__sfvwrite_r+0x194>
 2009130:	900f883a 	mov	r7,r18
 2009134:	b480022e 	bgeu	r22,r18,2009140 <__sfvwrite_r+0x8c>
 2009138:	01e00034 	movhi	r7,32768
 200913c:	39ff0004 	addi	r7,r7,-1024
 2009140:	80800917 	ldw	r2,36(r16)
 2009144:	81400717 	ldw	r5,28(r16)
 2009148:	103ee83a 	callr	r2
 200914c:	00805a0e 	bge	zero,r2,20092b8 <__sfvwrite_r+0x204>
 2009150:	a0c00217 	ldw	r3,8(r20)
 2009154:	98a7883a 	add	r19,r19,r2
 2009158:	90a5c83a 	sub	r18,r18,r2
 200915c:	1885c83a 	sub	r2,r3,r2
 2009160:	a0800215 	stw	r2,8(r20)
 2009164:	103fef1e 	bne	r2,zero,2009124 <__sfvwrite_r+0x70>
 2009168:	0005883a 	mov	r2,zero
 200916c:	dfc00b17 	ldw	ra,44(sp)
 2009170:	df000a17 	ldw	fp,40(sp)
 2009174:	ddc00917 	ldw	r23,36(sp)
 2009178:	dd800817 	ldw	r22,32(sp)
 200917c:	dd400717 	ldw	r21,28(sp)
 2009180:	dd000617 	ldw	r20,24(sp)
 2009184:	dcc00517 	ldw	r19,20(sp)
 2009188:	dc800417 	ldw	r18,16(sp)
 200918c:	dc400317 	ldw	r17,12(sp)
 2009190:	dc000217 	ldw	r16,8(sp)
 2009194:	dec00c04 	addi	sp,sp,48
 2009198:	f800283a 	ret
 200919c:	800b883a 	mov	r5,r16
 20091a0:	a809883a 	mov	r4,r21
 20091a4:	2006c240 	call	2006c24 <__swsetup_r>
 20091a8:	1000ee1e 	bne	r2,zero,2009564 <__sfvwrite_r+0x4b0>
 20091ac:	80c0030b 	ldhu	r3,12(r16)
 20091b0:	a4400017 	ldw	r17,0(r20)
 20091b4:	1880008c 	andi	r2,r3,2
 20091b8:	103fd61e 	bne	r2,zero,2009114 <__sfvwrite_r+0x60>
 20091bc:	1880004c 	andi	r2,r3,1
 20091c0:	1000421e 	bne	r2,zero,20092cc <__sfvwrite_r+0x218>
 20091c4:	0039883a 	mov	fp,zero
 20091c8:	0025883a 	mov	r18,zero
 20091cc:	90001a26 	beq	r18,zero,2009238 <__sfvwrite_r+0x184>
 20091d0:	1880800c 	andi	r2,r3,512
 20091d4:	84c00217 	ldw	r19,8(r16)
 20091d8:	10002126 	beq	r2,zero,2009260 <__sfvwrite_r+0x1ac>
 20091dc:	982f883a 	mov	r23,r19
 20091e0:	94c09636 	bltu	r18,r19,200943c <__sfvwrite_r+0x388>
 20091e4:	1881200c 	andi	r2,r3,1152
 20091e8:	1000a11e 	bne	r2,zero,2009470 <__sfvwrite_r+0x3bc>
 20091ec:	81000017 	ldw	r4,0(r16)
 20091f0:	b80d883a 	mov	r6,r23
 20091f4:	e00b883a 	mov	r5,fp
 20091f8:	200a3d40 	call	200a3d4 <memmove>
 20091fc:	80c00217 	ldw	r3,8(r16)
 2009200:	81000017 	ldw	r4,0(r16)
 2009204:	9005883a 	mov	r2,r18
 2009208:	1ce7c83a 	sub	r19,r3,r19
 200920c:	25cf883a 	add	r7,r4,r23
 2009210:	84c00215 	stw	r19,8(r16)
 2009214:	81c00015 	stw	r7,0(r16)
 2009218:	a0c00217 	ldw	r3,8(r20)
 200921c:	e0b9883a 	add	fp,fp,r2
 2009220:	90a5c83a 	sub	r18,r18,r2
 2009224:	18a7c83a 	sub	r19,r3,r2
 2009228:	a4c00215 	stw	r19,8(r20)
 200922c:	983fce26 	beq	r19,zero,2009168 <__sfvwrite_r+0xb4>
 2009230:	80c0030b 	ldhu	r3,12(r16)
 2009234:	903fe61e 	bne	r18,zero,20091d0 <__sfvwrite_r+0x11c>
 2009238:	8f000017 	ldw	fp,0(r17)
 200923c:	8c800117 	ldw	r18,4(r17)
 2009240:	8c400204 	addi	r17,r17,8
 2009244:	003fe106 	br	20091cc <__sfvwrite_r+0x118>
 2009248:	8cc00017 	ldw	r19,0(r17)
 200924c:	8c800117 	ldw	r18,4(r17)
 2009250:	8c400204 	addi	r17,r17,8
 2009254:	003fb306 	br	2009124 <__sfvwrite_r+0x70>
 2009258:	0005883a 	mov	r2,zero
 200925c:	f800283a 	ret
 2009260:	81000017 	ldw	r4,0(r16)
 2009264:	80800417 	ldw	r2,16(r16)
 2009268:	11005a36 	bltu	r2,r4,20093d4 <__sfvwrite_r+0x320>
 200926c:	85c00517 	ldw	r23,20(r16)
 2009270:	95c05836 	bltu	r18,r23,20093d4 <__sfvwrite_r+0x320>
 2009274:	00a00034 	movhi	r2,32768
 2009278:	10bfffc4 	addi	r2,r2,-1
 200927c:	9009883a 	mov	r4,r18
 2009280:	1480012e 	bgeu	r2,r18,2009288 <__sfvwrite_r+0x1d4>
 2009284:	1009883a 	mov	r4,r2
 2009288:	b80b883a 	mov	r5,r23
 200928c:	20044d40 	call	20044d4 <__divsi3>
 2009290:	b80b883a 	mov	r5,r23
 2009294:	1009883a 	mov	r4,r2
 2009298:	20019440 	call	2001944 <__mulsi3>
 200929c:	81400717 	ldw	r5,28(r16)
 20092a0:	80c00917 	ldw	r3,36(r16)
 20092a4:	100f883a 	mov	r7,r2
 20092a8:	e00d883a 	mov	r6,fp
 20092ac:	a809883a 	mov	r4,r21
 20092b0:	183ee83a 	callr	r3
 20092b4:	00bfd816 	blt	zero,r2,2009218 <__sfvwrite_r+0x164>
 20092b8:	8080030b 	ldhu	r2,12(r16)
 20092bc:	10801014 	ori	r2,r2,64
 20092c0:	8080030d 	sth	r2,12(r16)
 20092c4:	00bfffc4 	movi	r2,-1
 20092c8:	003fa806 	br	200916c <__sfvwrite_r+0xb8>
 20092cc:	0027883a 	mov	r19,zero
 20092d0:	0011883a 	mov	r8,zero
 20092d4:	0039883a 	mov	fp,zero
 20092d8:	0025883a 	mov	r18,zero
 20092dc:	90001f26 	beq	r18,zero,200935c <__sfvwrite_r+0x2a8>
 20092e0:	40005a26 	beq	r8,zero,200944c <__sfvwrite_r+0x398>
 20092e4:	982d883a 	mov	r22,r19
 20092e8:	94c0012e 	bgeu	r18,r19,20092f0 <__sfvwrite_r+0x23c>
 20092ec:	902d883a 	mov	r22,r18
 20092f0:	81000017 	ldw	r4,0(r16)
 20092f4:	80800417 	ldw	r2,16(r16)
 20092f8:	b02f883a 	mov	r23,r22
 20092fc:	81c00517 	ldw	r7,20(r16)
 2009300:	1100032e 	bgeu	r2,r4,2009310 <__sfvwrite_r+0x25c>
 2009304:	80c00217 	ldw	r3,8(r16)
 2009308:	38c7883a 	add	r3,r7,r3
 200930c:	1d801816 	blt	r3,r22,2009370 <__sfvwrite_r+0x2bc>
 2009310:	b1c03e16 	blt	r22,r7,200940c <__sfvwrite_r+0x358>
 2009314:	80800917 	ldw	r2,36(r16)
 2009318:	81400717 	ldw	r5,28(r16)
 200931c:	e00d883a 	mov	r6,fp
 2009320:	da000115 	stw	r8,4(sp)
 2009324:	a809883a 	mov	r4,r21
 2009328:	103ee83a 	callr	r2
 200932c:	102f883a 	mov	r23,r2
 2009330:	da000117 	ldw	r8,4(sp)
 2009334:	00bfe00e 	bge	zero,r2,20092b8 <__sfvwrite_r+0x204>
 2009338:	9de7c83a 	sub	r19,r19,r23
 200933c:	98001f26 	beq	r19,zero,20093bc <__sfvwrite_r+0x308>
 2009340:	a0800217 	ldw	r2,8(r20)
 2009344:	e5f9883a 	add	fp,fp,r23
 2009348:	95e5c83a 	sub	r18,r18,r23
 200934c:	15efc83a 	sub	r23,r2,r23
 2009350:	a5c00215 	stw	r23,8(r20)
 2009354:	b83f8426 	beq	r23,zero,2009168 <__sfvwrite_r+0xb4>
 2009358:	903fe11e 	bne	r18,zero,20092e0 <__sfvwrite_r+0x22c>
 200935c:	8f000017 	ldw	fp,0(r17)
 2009360:	8c800117 	ldw	r18,4(r17)
 2009364:	0011883a 	mov	r8,zero
 2009368:	8c400204 	addi	r17,r17,8
 200936c:	003fdb06 	br	20092dc <__sfvwrite_r+0x228>
 2009370:	180d883a 	mov	r6,r3
 2009374:	e00b883a 	mov	r5,fp
 2009378:	da000115 	stw	r8,4(sp)
 200937c:	d8c00015 	stw	r3,0(sp)
 2009380:	200a3d40 	call	200a3d4 <memmove>
 2009384:	d8c00017 	ldw	r3,0(sp)
 2009388:	80800017 	ldw	r2,0(r16)
 200938c:	800b883a 	mov	r5,r16
 2009390:	a809883a 	mov	r4,r21
 2009394:	10c5883a 	add	r2,r2,r3
 2009398:	80800015 	stw	r2,0(r16)
 200939c:	d8c00015 	stw	r3,0(sp)
 20093a0:	20088440 	call	2008844 <_fflush_r>
 20093a4:	d8c00017 	ldw	r3,0(sp)
 20093a8:	da000117 	ldw	r8,4(sp)
 20093ac:	103fc21e 	bne	r2,zero,20092b8 <__sfvwrite_r+0x204>
 20093b0:	182f883a 	mov	r23,r3
 20093b4:	9de7c83a 	sub	r19,r19,r23
 20093b8:	983fe11e 	bne	r19,zero,2009340 <__sfvwrite_r+0x28c>
 20093bc:	800b883a 	mov	r5,r16
 20093c0:	a809883a 	mov	r4,r21
 20093c4:	20088440 	call	2008844 <_fflush_r>
 20093c8:	103fbb1e 	bne	r2,zero,20092b8 <__sfvwrite_r+0x204>
 20093cc:	0011883a 	mov	r8,zero
 20093d0:	003fdb06 	br	2009340 <__sfvwrite_r+0x28c>
 20093d4:	94c0012e 	bgeu	r18,r19,20093dc <__sfvwrite_r+0x328>
 20093d8:	9027883a 	mov	r19,r18
 20093dc:	980d883a 	mov	r6,r19
 20093e0:	e00b883a 	mov	r5,fp
 20093e4:	200a3d40 	call	200a3d4 <memmove>
 20093e8:	80800217 	ldw	r2,8(r16)
 20093ec:	80c00017 	ldw	r3,0(r16)
 20093f0:	14c5c83a 	sub	r2,r2,r19
 20093f4:	1cc7883a 	add	r3,r3,r19
 20093f8:	80800215 	stw	r2,8(r16)
 20093fc:	80c00015 	stw	r3,0(r16)
 2009400:	10004326 	beq	r2,zero,2009510 <__sfvwrite_r+0x45c>
 2009404:	9805883a 	mov	r2,r19
 2009408:	003f8306 	br	2009218 <__sfvwrite_r+0x164>
 200940c:	b00d883a 	mov	r6,r22
 2009410:	e00b883a 	mov	r5,fp
 2009414:	da000115 	stw	r8,4(sp)
 2009418:	200a3d40 	call	200a3d4 <memmove>
 200941c:	80800217 	ldw	r2,8(r16)
 2009420:	80c00017 	ldw	r3,0(r16)
 2009424:	da000117 	ldw	r8,4(sp)
 2009428:	1585c83a 	sub	r2,r2,r22
 200942c:	1dad883a 	add	r22,r3,r22
 2009430:	80800215 	stw	r2,8(r16)
 2009434:	85800015 	stw	r22,0(r16)
 2009438:	003fbf06 	br	2009338 <__sfvwrite_r+0x284>
 200943c:	81000017 	ldw	r4,0(r16)
 2009440:	9027883a 	mov	r19,r18
 2009444:	902f883a 	mov	r23,r18
 2009448:	003f6906 	br	20091f0 <__sfvwrite_r+0x13c>
 200944c:	900d883a 	mov	r6,r18
 2009450:	01400284 	movi	r5,10
 2009454:	e009883a 	mov	r4,fp
 2009458:	200a1a80 	call	200a1a8 <memchr>
 200945c:	10003e26 	beq	r2,zero,2009558 <__sfvwrite_r+0x4a4>
 2009460:	10800044 	addi	r2,r2,1
 2009464:	1727c83a 	sub	r19,r2,fp
 2009468:	02000044 	movi	r8,1
 200946c:	003f9d06 	br	20092e4 <__sfvwrite_r+0x230>
 2009470:	80800517 	ldw	r2,20(r16)
 2009474:	81400417 	ldw	r5,16(r16)
 2009478:	81c00017 	ldw	r7,0(r16)
 200947c:	10a7883a 	add	r19,r2,r2
 2009480:	9885883a 	add	r2,r19,r2
 2009484:	1026d7fa 	srli	r19,r2,31
 2009488:	396dc83a 	sub	r22,r7,r5
 200948c:	b1000044 	addi	r4,r22,1
 2009490:	9885883a 	add	r2,r19,r2
 2009494:	1027d07a 	srai	r19,r2,1
 2009498:	2485883a 	add	r2,r4,r18
 200949c:	980d883a 	mov	r6,r19
 20094a0:	9880022e 	bgeu	r19,r2,20094ac <__sfvwrite_r+0x3f8>
 20094a4:	1027883a 	mov	r19,r2
 20094a8:	100d883a 	mov	r6,r2
 20094ac:	18c1000c 	andi	r3,r3,1024
 20094b0:	18001c26 	beq	r3,zero,2009524 <__sfvwrite_r+0x470>
 20094b4:	300b883a 	mov	r5,r6
 20094b8:	a809883a 	mov	r4,r21
 20094bc:	200999c0 	call	200999c <_malloc_r>
 20094c0:	102f883a 	mov	r23,r2
 20094c4:	10002926 	beq	r2,zero,200956c <__sfvwrite_r+0x4b8>
 20094c8:	81400417 	ldw	r5,16(r16)
 20094cc:	b00d883a 	mov	r6,r22
 20094d0:	1009883a 	mov	r4,r2
 20094d4:	200a28c0 	call	200a28c <memcpy>
 20094d8:	8080030b 	ldhu	r2,12(r16)
 20094dc:	00fedfc4 	movi	r3,-1153
 20094e0:	10c4703a 	and	r2,r2,r3
 20094e4:	10802014 	ori	r2,r2,128
 20094e8:	8080030d 	sth	r2,12(r16)
 20094ec:	bd89883a 	add	r4,r23,r22
 20094f0:	9d8fc83a 	sub	r7,r19,r22
 20094f4:	85c00415 	stw	r23,16(r16)
 20094f8:	84c00515 	stw	r19,20(r16)
 20094fc:	81000015 	stw	r4,0(r16)
 2009500:	9027883a 	mov	r19,r18
 2009504:	81c00215 	stw	r7,8(r16)
 2009508:	902f883a 	mov	r23,r18
 200950c:	003f3806 	br	20091f0 <__sfvwrite_r+0x13c>
 2009510:	800b883a 	mov	r5,r16
 2009514:	a809883a 	mov	r4,r21
 2009518:	20088440 	call	2008844 <_fflush_r>
 200951c:	103fb926 	beq	r2,zero,2009404 <__sfvwrite_r+0x350>
 2009520:	003f6506 	br	20092b8 <__sfvwrite_r+0x204>
 2009524:	a809883a 	mov	r4,r21
 2009528:	200b7100 	call	200b710 <_realloc_r>
 200952c:	102f883a 	mov	r23,r2
 2009530:	103fee1e 	bne	r2,zero,20094ec <__sfvwrite_r+0x438>
 2009534:	81400417 	ldw	r5,16(r16)
 2009538:	a809883a 	mov	r4,r21
 200953c:	2008da40 	call	2008da4 <_free_r>
 2009540:	8080030b 	ldhu	r2,12(r16)
 2009544:	00ffdfc4 	movi	r3,-129
 2009548:	1884703a 	and	r2,r3,r2
 200954c:	00c00304 	movi	r3,12
 2009550:	a8c00015 	stw	r3,0(r21)
 2009554:	003f5906 	br	20092bc <__sfvwrite_r+0x208>
 2009558:	94c00044 	addi	r19,r18,1
 200955c:	02000044 	movi	r8,1
 2009560:	003f6006 	br	20092e4 <__sfvwrite_r+0x230>
 2009564:	00bfffc4 	movi	r2,-1
 2009568:	003f0006 	br	200916c <__sfvwrite_r+0xb8>
 200956c:	00800304 	movi	r2,12
 2009570:	a8800015 	stw	r2,0(r21)
 2009574:	8080030b 	ldhu	r2,12(r16)
 2009578:	003f5006 	br	20092bc <__sfvwrite_r+0x208>

0200957c <_fwalk>:
 200957c:	defff704 	addi	sp,sp,-36
 2009580:	dd000415 	stw	r20,16(sp)
 2009584:	dfc00815 	stw	ra,32(sp)
 2009588:	ddc00715 	stw	r23,28(sp)
 200958c:	dd800615 	stw	r22,24(sp)
 2009590:	dd400515 	stw	r21,20(sp)
 2009594:	dcc00315 	stw	r19,12(sp)
 2009598:	dc800215 	stw	r18,8(sp)
 200959c:	dc400115 	stw	r17,4(sp)
 20095a0:	dc000015 	stw	r16,0(sp)
 20095a4:	2500b804 	addi	r20,r4,736
 20095a8:	a0002326 	beq	r20,zero,2009638 <_fwalk+0xbc>
 20095ac:	282b883a 	mov	r21,r5
 20095b0:	002f883a 	mov	r23,zero
 20095b4:	05800044 	movi	r22,1
 20095b8:	04ffffc4 	movi	r19,-1
 20095bc:	a4400117 	ldw	r17,4(r20)
 20095c0:	a4800217 	ldw	r18,8(r20)
 20095c4:	8c7fffc4 	addi	r17,r17,-1
 20095c8:	88000d16 	blt	r17,zero,2009600 <_fwalk+0x84>
 20095cc:	94000304 	addi	r16,r18,12
 20095d0:	94800384 	addi	r18,r18,14
 20095d4:	8080000b 	ldhu	r2,0(r16)
 20095d8:	8c7fffc4 	addi	r17,r17,-1
 20095dc:	813ffd04 	addi	r4,r16,-12
 20095e0:	b080042e 	bgeu	r22,r2,20095f4 <_fwalk+0x78>
 20095e4:	9080000f 	ldh	r2,0(r18)
 20095e8:	14c00226 	beq	r2,r19,20095f4 <_fwalk+0x78>
 20095ec:	a83ee83a 	callr	r21
 20095f0:	b8aeb03a 	or	r23,r23,r2
 20095f4:	84001a04 	addi	r16,r16,104
 20095f8:	94801a04 	addi	r18,r18,104
 20095fc:	8cfff51e 	bne	r17,r19,20095d4 <_fwalk+0x58>
 2009600:	a5000017 	ldw	r20,0(r20)
 2009604:	a03fed1e 	bne	r20,zero,20095bc <_fwalk+0x40>
 2009608:	b805883a 	mov	r2,r23
 200960c:	dfc00817 	ldw	ra,32(sp)
 2009610:	ddc00717 	ldw	r23,28(sp)
 2009614:	dd800617 	ldw	r22,24(sp)
 2009618:	dd400517 	ldw	r21,20(sp)
 200961c:	dd000417 	ldw	r20,16(sp)
 2009620:	dcc00317 	ldw	r19,12(sp)
 2009624:	dc800217 	ldw	r18,8(sp)
 2009628:	dc400117 	ldw	r17,4(sp)
 200962c:	dc000017 	ldw	r16,0(sp)
 2009630:	dec00904 	addi	sp,sp,36
 2009634:	f800283a 	ret
 2009638:	002f883a 	mov	r23,zero
 200963c:	003ff206 	br	2009608 <_fwalk+0x8c>

02009640 <_fwalk_reent>:
 2009640:	defff704 	addi	sp,sp,-36
 2009644:	dd000415 	stw	r20,16(sp)
 2009648:	dfc00815 	stw	ra,32(sp)
 200964c:	ddc00715 	stw	r23,28(sp)
 2009650:	dd800615 	stw	r22,24(sp)
 2009654:	dd400515 	stw	r21,20(sp)
 2009658:	dcc00315 	stw	r19,12(sp)
 200965c:	dc800215 	stw	r18,8(sp)
 2009660:	dc400115 	stw	r17,4(sp)
 2009664:	dc000015 	stw	r16,0(sp)
 2009668:	2500b804 	addi	r20,r4,736
 200966c:	a0002326 	beq	r20,zero,20096fc <_fwalk_reent+0xbc>
 2009670:	282b883a 	mov	r21,r5
 2009674:	2027883a 	mov	r19,r4
 2009678:	002f883a 	mov	r23,zero
 200967c:	05800044 	movi	r22,1
 2009680:	04bfffc4 	movi	r18,-1
 2009684:	a4400117 	ldw	r17,4(r20)
 2009688:	a4000217 	ldw	r16,8(r20)
 200968c:	8c7fffc4 	addi	r17,r17,-1
 2009690:	88000c16 	blt	r17,zero,20096c4 <_fwalk_reent+0x84>
 2009694:	84000304 	addi	r16,r16,12
 2009698:	8080000b 	ldhu	r2,0(r16)
 200969c:	8c7fffc4 	addi	r17,r17,-1
 20096a0:	817ffd04 	addi	r5,r16,-12
 20096a4:	b080052e 	bgeu	r22,r2,20096bc <_fwalk_reent+0x7c>
 20096a8:	8080008f 	ldh	r2,2(r16)
 20096ac:	9809883a 	mov	r4,r19
 20096b0:	14800226 	beq	r2,r18,20096bc <_fwalk_reent+0x7c>
 20096b4:	a83ee83a 	callr	r21
 20096b8:	b8aeb03a 	or	r23,r23,r2
 20096bc:	84001a04 	addi	r16,r16,104
 20096c0:	8cbff51e 	bne	r17,r18,2009698 <_fwalk_reent+0x58>
 20096c4:	a5000017 	ldw	r20,0(r20)
 20096c8:	a03fee1e 	bne	r20,zero,2009684 <_fwalk_reent+0x44>
 20096cc:	b805883a 	mov	r2,r23
 20096d0:	dfc00817 	ldw	ra,32(sp)
 20096d4:	ddc00717 	ldw	r23,28(sp)
 20096d8:	dd800617 	ldw	r22,24(sp)
 20096dc:	dd400517 	ldw	r21,20(sp)
 20096e0:	dd000417 	ldw	r20,16(sp)
 20096e4:	dcc00317 	ldw	r19,12(sp)
 20096e8:	dc800217 	ldw	r18,8(sp)
 20096ec:	dc400117 	ldw	r17,4(sp)
 20096f0:	dc000017 	ldw	r16,0(sp)
 20096f4:	dec00904 	addi	sp,sp,36
 20096f8:	f800283a 	ret
 20096fc:	002f883a 	mov	r23,zero
 2009700:	003ff206 	br	20096cc <_fwalk_reent+0x8c>

02009704 <_setlocale_r>:
 2009704:	30001b26 	beq	r6,zero,2009774 <_setlocale_r+0x70>
 2009708:	014080b4 	movhi	r5,514
 200970c:	defffe04 	addi	sp,sp,-8
 2009710:	296db004 	addi	r5,r5,-18752
 2009714:	3009883a 	mov	r4,r6
 2009718:	dc000015 	stw	r16,0(sp)
 200971c:	dfc00115 	stw	ra,4(sp)
 2009720:	3021883a 	mov	r16,r6
 2009724:	200be780 	call	200be78 <strcmp>
 2009728:	1000061e 	bne	r2,zero,2009744 <_setlocale_r+0x40>
 200972c:	008080b4 	movhi	r2,514
 2009730:	10ad9104 	addi	r2,r2,-18876
 2009734:	dfc00117 	ldw	ra,4(sp)
 2009738:	dc000017 	ldw	r16,0(sp)
 200973c:	dec00204 	addi	sp,sp,8
 2009740:	f800283a 	ret
 2009744:	014080b4 	movhi	r5,514
 2009748:	296d9104 	addi	r5,r5,-18876
 200974c:	8009883a 	mov	r4,r16
 2009750:	200be780 	call	200be78 <strcmp>
 2009754:	103ff526 	beq	r2,zero,200972c <_setlocale_r+0x28>
 2009758:	014080b4 	movhi	r5,514
 200975c:	296d9b04 	addi	r5,r5,-18836
 2009760:	8009883a 	mov	r4,r16
 2009764:	200be780 	call	200be78 <strcmp>
 2009768:	103ff026 	beq	r2,zero,200972c <_setlocale_r+0x28>
 200976c:	0005883a 	mov	r2,zero
 2009770:	003ff006 	br	2009734 <_setlocale_r+0x30>
 2009774:	008080b4 	movhi	r2,514
 2009778:	10ad9104 	addi	r2,r2,-18876
 200977c:	f800283a 	ret

02009780 <__locale_charset>:
 2009780:	008080b4 	movhi	r2,514
 2009784:	10af6904 	addi	r2,r2,-16988
 2009788:	f800283a 	ret

0200978c <__locale_mb_cur_max>:
 200978c:	008080b4 	movhi	r2,514
 2009790:	10b50904 	addi	r2,r2,-11228
 2009794:	10800017 	ldw	r2,0(r2)
 2009798:	f800283a 	ret

0200979c <__locale_msgcharset>:
 200979c:	008080b4 	movhi	r2,514
 20097a0:	10af6104 	addi	r2,r2,-17020
 20097a4:	f800283a 	ret

020097a8 <__locale_cjk_lang>:
 20097a8:	0005883a 	mov	r2,zero
 20097ac:	f800283a 	ret

020097b0 <_localeconv_r>:
 20097b0:	008080b4 	movhi	r2,514
 20097b4:	10af7104 	addi	r2,r2,-16956
 20097b8:	f800283a 	ret

020097bc <setlocale>:
 20097bc:	008080b4 	movhi	r2,514
 20097c0:	10b50804 	addi	r2,r2,-11232
 20097c4:	280d883a 	mov	r6,r5
 20097c8:	200b883a 	mov	r5,r4
 20097cc:	11000017 	ldw	r4,0(r2)
 20097d0:	20097041 	jmpi	2009704 <_setlocale_r>

020097d4 <localeconv>:
 20097d4:	008080b4 	movhi	r2,514
 20097d8:	10af7104 	addi	r2,r2,-16956
 20097dc:	f800283a 	ret

020097e0 <__smakebuf_r>:
 20097e0:	2880030b 	ldhu	r2,12(r5)
 20097e4:	10c0008c 	andi	r3,r2,2
 20097e8:	1800411e 	bne	r3,zero,20098f0 <__smakebuf_r+0x110>
 20097ec:	deffec04 	addi	sp,sp,-80
 20097f0:	dc000f15 	stw	r16,60(sp)
 20097f4:	2821883a 	mov	r16,r5
 20097f8:	2940038f 	ldh	r5,14(r5)
 20097fc:	dc401015 	stw	r17,64(sp)
 2009800:	dfc01315 	stw	ra,76(sp)
 2009804:	dcc01215 	stw	r19,72(sp)
 2009808:	dc801115 	stw	r18,68(sp)
 200980c:	2023883a 	mov	r17,r4
 2009810:	28001c16 	blt	r5,zero,2009884 <__smakebuf_r+0xa4>
 2009814:	d80d883a 	mov	r6,sp
 2009818:	200dae80 	call	200dae8 <_fstat_r>
 200981c:	10001816 	blt	r2,zero,2009880 <__smakebuf_r+0xa0>
 2009820:	d8800117 	ldw	r2,4(sp)
 2009824:	00e00014 	movui	r3,32768
 2009828:	10bc000c 	andi	r2,r2,61440
 200982c:	14c80020 	cmpeqi	r19,r2,8192
 2009830:	10c03726 	beq	r2,r3,2009910 <__smakebuf_r+0x130>
 2009834:	80c0030b 	ldhu	r3,12(r16)
 2009838:	18c20014 	ori	r3,r3,2048
 200983c:	80c0030d 	sth	r3,12(r16)
 2009840:	00c80004 	movi	r3,8192
 2009844:	10c0521e 	bne	r2,r3,2009990 <__smakebuf_r+0x1b0>
 2009848:	8140038f 	ldh	r5,14(r16)
 200984c:	8809883a 	mov	r4,r17
 2009850:	200db440 	call	200db44 <_isatty_r>
 2009854:	10004c26 	beq	r2,zero,2009988 <__smakebuf_r+0x1a8>
 2009858:	8080030b 	ldhu	r2,12(r16)
 200985c:	80c010c4 	addi	r3,r16,67
 2009860:	80c00015 	stw	r3,0(r16)
 2009864:	10800054 	ori	r2,r2,1
 2009868:	8080030d 	sth	r2,12(r16)
 200986c:	00800044 	movi	r2,1
 2009870:	80c00415 	stw	r3,16(r16)
 2009874:	80800515 	stw	r2,20(r16)
 2009878:	04810004 	movi	r18,1024
 200987c:	00000706 	br	200989c <__smakebuf_r+0xbc>
 2009880:	8080030b 	ldhu	r2,12(r16)
 2009884:	10c0200c 	andi	r3,r2,128
 2009888:	18001f1e 	bne	r3,zero,2009908 <__smakebuf_r+0x128>
 200988c:	04810004 	movi	r18,1024
 2009890:	10820014 	ori	r2,r2,2048
 2009894:	8080030d 	sth	r2,12(r16)
 2009898:	0027883a 	mov	r19,zero
 200989c:	900b883a 	mov	r5,r18
 20098a0:	8809883a 	mov	r4,r17
 20098a4:	200999c0 	call	200999c <_malloc_r>
 20098a8:	10002c26 	beq	r2,zero,200995c <__smakebuf_r+0x17c>
 20098ac:	80c0030b 	ldhu	r3,12(r16)
 20098b0:	01008074 	movhi	r4,513
 20098b4:	21223604 	addi	r4,r4,-30504
 20098b8:	89000f15 	stw	r4,60(r17)
 20098bc:	18c02014 	ori	r3,r3,128
 20098c0:	80c0030d 	sth	r3,12(r16)
 20098c4:	80800015 	stw	r2,0(r16)
 20098c8:	80800415 	stw	r2,16(r16)
 20098cc:	84800515 	stw	r18,20(r16)
 20098d0:	98001a1e 	bne	r19,zero,200993c <__smakebuf_r+0x15c>
 20098d4:	dfc01317 	ldw	ra,76(sp)
 20098d8:	dcc01217 	ldw	r19,72(sp)
 20098dc:	dc801117 	ldw	r18,68(sp)
 20098e0:	dc401017 	ldw	r17,64(sp)
 20098e4:	dc000f17 	ldw	r16,60(sp)
 20098e8:	dec01404 	addi	sp,sp,80
 20098ec:	f800283a 	ret
 20098f0:	288010c4 	addi	r2,r5,67
 20098f4:	28800015 	stw	r2,0(r5)
 20098f8:	28800415 	stw	r2,16(r5)
 20098fc:	00800044 	movi	r2,1
 2009900:	28800515 	stw	r2,20(r5)
 2009904:	f800283a 	ret
 2009908:	04801004 	movi	r18,64
 200990c:	003fe006 	br	2009890 <__smakebuf_r+0xb0>
 2009910:	81000a17 	ldw	r4,40(r16)
 2009914:	00c08074 	movhi	r3,513
 2009918:	18ef8504 	addi	r3,r3,-16876
 200991c:	20ffc51e 	bne	r4,r3,2009834 <__smakebuf_r+0x54>
 2009920:	8080030b 	ldhu	r2,12(r16)
 2009924:	04810004 	movi	r18,1024
 2009928:	84801315 	stw	r18,76(r16)
 200992c:	1484b03a 	or	r2,r2,r18
 2009930:	8080030d 	sth	r2,12(r16)
 2009934:	0027883a 	mov	r19,zero
 2009938:	003fd806 	br	200989c <__smakebuf_r+0xbc>
 200993c:	8140038f 	ldh	r5,14(r16)
 2009940:	8809883a 	mov	r4,r17
 2009944:	200db440 	call	200db44 <_isatty_r>
 2009948:	103fe226 	beq	r2,zero,20098d4 <__smakebuf_r+0xf4>
 200994c:	8080030b 	ldhu	r2,12(r16)
 2009950:	10800054 	ori	r2,r2,1
 2009954:	8080030d 	sth	r2,12(r16)
 2009958:	003fde06 	br	20098d4 <__smakebuf_r+0xf4>
 200995c:	8080030b 	ldhu	r2,12(r16)
 2009960:	10c0800c 	andi	r3,r2,512
 2009964:	183fdb1e 	bne	r3,zero,20098d4 <__smakebuf_r+0xf4>
 2009968:	10800094 	ori	r2,r2,2
 200996c:	80c010c4 	addi	r3,r16,67
 2009970:	8080030d 	sth	r2,12(r16)
 2009974:	00800044 	movi	r2,1
 2009978:	80c00015 	stw	r3,0(r16)
 200997c:	80c00415 	stw	r3,16(r16)
 2009980:	80800515 	stw	r2,20(r16)
 2009984:	003fd306 	br	20098d4 <__smakebuf_r+0xf4>
 2009988:	04810004 	movi	r18,1024
 200998c:	003fc306 	br	200989c <__smakebuf_r+0xbc>
 2009990:	0027883a 	mov	r19,zero
 2009994:	04810004 	movi	r18,1024
 2009998:	003fc006 	br	200989c <__smakebuf_r+0xbc>

0200999c <_malloc_r>:
 200999c:	defff504 	addi	sp,sp,-44
 20099a0:	dc800315 	stw	r18,12(sp)
 20099a4:	dfc00a15 	stw	ra,40(sp)
 20099a8:	df000915 	stw	fp,36(sp)
 20099ac:	ddc00815 	stw	r23,32(sp)
 20099b0:	dd800715 	stw	r22,28(sp)
 20099b4:	dd400615 	stw	r21,24(sp)
 20099b8:	dd000515 	stw	r20,20(sp)
 20099bc:	dcc00415 	stw	r19,16(sp)
 20099c0:	dc400215 	stw	r17,8(sp)
 20099c4:	dc000115 	stw	r16,4(sp)
 20099c8:	288002c4 	addi	r2,r5,11
 20099cc:	00c00584 	movi	r3,22
 20099d0:	2025883a 	mov	r18,r4
 20099d4:	18807f2e 	bgeu	r3,r2,2009bd4 <_malloc_r+0x238>
 20099d8:	047ffe04 	movi	r17,-8
 20099dc:	1462703a 	and	r17,r2,r17
 20099e0:	8800a316 	blt	r17,zero,2009c70 <_malloc_r+0x2d4>
 20099e4:	8940a236 	bltu	r17,r5,2009c70 <_malloc_r+0x2d4>
 20099e8:	2010b300 	call	2010b30 <__malloc_lock>
 20099ec:	00807dc4 	movi	r2,503
 20099f0:	1441e92e 	bgeu	r2,r17,200a198 <_malloc_r+0x7fc>
 20099f4:	8804d27a 	srli	r2,r17,9
 20099f8:	1000a126 	beq	r2,zero,2009c80 <_malloc_r+0x2e4>
 20099fc:	00c00104 	movi	r3,4
 2009a00:	18811e36 	bltu	r3,r2,2009e7c <_malloc_r+0x4e0>
 2009a04:	8804d1ba 	srli	r2,r17,6
 2009a08:	12000e44 	addi	r8,r2,57
 2009a0c:	11c00e04 	addi	r7,r2,56
 2009a10:	4209883a 	add	r4,r8,r8
 2009a14:	04c080b4 	movhi	r19,514
 2009a18:	2109883a 	add	r4,r4,r4
 2009a1c:	9cef7f04 	addi	r19,r19,-16900
 2009a20:	2109883a 	add	r4,r4,r4
 2009a24:	9909883a 	add	r4,r19,r4
 2009a28:	24000117 	ldw	r16,4(r4)
 2009a2c:	213ffe04 	addi	r4,r4,-8
 2009a30:	24009726 	beq	r4,r16,2009c90 <_malloc_r+0x2f4>
 2009a34:	80800117 	ldw	r2,4(r16)
 2009a38:	01bfff04 	movi	r6,-4
 2009a3c:	014003c4 	movi	r5,15
 2009a40:	1184703a 	and	r2,r2,r6
 2009a44:	1447c83a 	sub	r3,r2,r17
 2009a48:	28c00716 	blt	r5,r3,2009a68 <_malloc_r+0xcc>
 2009a4c:	1800920e 	bge	r3,zero,2009c98 <_malloc_r+0x2fc>
 2009a50:	84000317 	ldw	r16,12(r16)
 2009a54:	24008e26 	beq	r4,r16,2009c90 <_malloc_r+0x2f4>
 2009a58:	80800117 	ldw	r2,4(r16)
 2009a5c:	1184703a 	and	r2,r2,r6
 2009a60:	1447c83a 	sub	r3,r2,r17
 2009a64:	28fff90e 	bge	r5,r3,2009a4c <_malloc_r+0xb0>
 2009a68:	3809883a 	mov	r4,r7
 2009a6c:	018080b4 	movhi	r6,514
 2009a70:	9c000417 	ldw	r16,16(r19)
 2009a74:	31af7f04 	addi	r6,r6,-16900
 2009a78:	32000204 	addi	r8,r6,8
 2009a7c:	82013426 	beq	r16,r8,2009f50 <_malloc_r+0x5b4>
 2009a80:	80c00117 	ldw	r3,4(r16)
 2009a84:	00bfff04 	movi	r2,-4
 2009a88:	188e703a 	and	r7,r3,r2
 2009a8c:	3c45c83a 	sub	r2,r7,r17
 2009a90:	00c003c4 	movi	r3,15
 2009a94:	18811f16 	blt	r3,r2,2009f14 <_malloc_r+0x578>
 2009a98:	32000515 	stw	r8,20(r6)
 2009a9c:	32000415 	stw	r8,16(r6)
 2009aa0:	10007f0e 	bge	r2,zero,2009ca0 <_malloc_r+0x304>
 2009aa4:	00807fc4 	movi	r2,511
 2009aa8:	11c0fd36 	bltu	r2,r7,2009ea0 <_malloc_r+0x504>
 2009aac:	3806d0fa 	srli	r3,r7,3
 2009ab0:	01c00044 	movi	r7,1
 2009ab4:	30800117 	ldw	r2,4(r6)
 2009ab8:	19400044 	addi	r5,r3,1
 2009abc:	294b883a 	add	r5,r5,r5
 2009ac0:	1807d0ba 	srai	r3,r3,2
 2009ac4:	294b883a 	add	r5,r5,r5
 2009ac8:	294b883a 	add	r5,r5,r5
 2009acc:	298b883a 	add	r5,r5,r6
 2009ad0:	38c6983a 	sll	r3,r7,r3
 2009ad4:	29c00017 	ldw	r7,0(r5)
 2009ad8:	2a7ffe04 	addi	r9,r5,-8
 2009adc:	1886b03a 	or	r3,r3,r2
 2009ae0:	82400315 	stw	r9,12(r16)
 2009ae4:	81c00215 	stw	r7,8(r16)
 2009ae8:	30c00115 	stw	r3,4(r6)
 2009aec:	2c000015 	stw	r16,0(r5)
 2009af0:	3c000315 	stw	r16,12(r7)
 2009af4:	2005d0ba 	srai	r2,r4,2
 2009af8:	01400044 	movi	r5,1
 2009afc:	288a983a 	sll	r5,r5,r2
 2009b00:	19406f36 	bltu	r3,r5,2009cc0 <_malloc_r+0x324>
 2009b04:	28c4703a 	and	r2,r5,r3
 2009b08:	10000a1e 	bne	r2,zero,2009b34 <_malloc_r+0x198>
 2009b0c:	00bfff04 	movi	r2,-4
 2009b10:	294b883a 	add	r5,r5,r5
 2009b14:	2088703a 	and	r4,r4,r2
 2009b18:	28c4703a 	and	r2,r5,r3
 2009b1c:	21000104 	addi	r4,r4,4
 2009b20:	1000041e 	bne	r2,zero,2009b34 <_malloc_r+0x198>
 2009b24:	294b883a 	add	r5,r5,r5
 2009b28:	28c4703a 	and	r2,r5,r3
 2009b2c:	21000104 	addi	r4,r4,4
 2009b30:	103ffc26 	beq	r2,zero,2009b24 <_malloc_r+0x188>
 2009b34:	02bfff04 	movi	r10,-4
 2009b38:	024003c4 	movi	r9,15
 2009b3c:	21800044 	addi	r6,r4,1
 2009b40:	318d883a 	add	r6,r6,r6
 2009b44:	318d883a 	add	r6,r6,r6
 2009b48:	318d883a 	add	r6,r6,r6
 2009b4c:	998d883a 	add	r6,r19,r6
 2009b50:	333ffe04 	addi	r12,r6,-8
 2009b54:	2017883a 	mov	r11,r4
 2009b58:	31800104 	addi	r6,r6,4
 2009b5c:	34000017 	ldw	r16,0(r6)
 2009b60:	31fffd04 	addi	r7,r6,-12
 2009b64:	81c0041e 	bne	r16,r7,2009b78 <_malloc_r+0x1dc>
 2009b68:	0000fb06 	br	2009f58 <_malloc_r+0x5bc>
 2009b6c:	1801030e 	bge	r3,zero,2009f7c <_malloc_r+0x5e0>
 2009b70:	84000317 	ldw	r16,12(r16)
 2009b74:	81c0f826 	beq	r16,r7,2009f58 <_malloc_r+0x5bc>
 2009b78:	80800117 	ldw	r2,4(r16)
 2009b7c:	1284703a 	and	r2,r2,r10
 2009b80:	1447c83a 	sub	r3,r2,r17
 2009b84:	48fff90e 	bge	r9,r3,2009b6c <_malloc_r+0x1d0>
 2009b88:	80800317 	ldw	r2,12(r16)
 2009b8c:	81000217 	ldw	r4,8(r16)
 2009b90:	89400054 	ori	r5,r17,1
 2009b94:	81400115 	stw	r5,4(r16)
 2009b98:	20800315 	stw	r2,12(r4)
 2009b9c:	11000215 	stw	r4,8(r2)
 2009ba0:	8463883a 	add	r17,r16,r17
 2009ba4:	9c400515 	stw	r17,20(r19)
 2009ba8:	9c400415 	stw	r17,16(r19)
 2009bac:	18800054 	ori	r2,r3,1
 2009bb0:	88800115 	stw	r2,4(r17)
 2009bb4:	8a000315 	stw	r8,12(r17)
 2009bb8:	8a000215 	stw	r8,8(r17)
 2009bbc:	88e3883a 	add	r17,r17,r3
 2009bc0:	88c00015 	stw	r3,0(r17)
 2009bc4:	9009883a 	mov	r4,r18
 2009bc8:	2010c500 	call	2010c50 <__malloc_unlock>
 2009bcc:	80800204 	addi	r2,r16,8
 2009bd0:	00001b06 	br	2009c40 <_malloc_r+0x2a4>
 2009bd4:	04400404 	movi	r17,16
 2009bd8:	89402536 	bltu	r17,r5,2009c70 <_malloc_r+0x2d4>
 2009bdc:	2010b300 	call	2010b30 <__malloc_lock>
 2009be0:	00800184 	movi	r2,6
 2009be4:	01000084 	movi	r4,2
 2009be8:	04c080b4 	movhi	r19,514
 2009bec:	1085883a 	add	r2,r2,r2
 2009bf0:	9cef7f04 	addi	r19,r19,-16900
 2009bf4:	1085883a 	add	r2,r2,r2
 2009bf8:	9885883a 	add	r2,r19,r2
 2009bfc:	14000117 	ldw	r16,4(r2)
 2009c00:	10fffe04 	addi	r3,r2,-8
 2009c04:	80c0d926 	beq	r16,r3,2009f6c <_malloc_r+0x5d0>
 2009c08:	80c00117 	ldw	r3,4(r16)
 2009c0c:	81000317 	ldw	r4,12(r16)
 2009c10:	00bfff04 	movi	r2,-4
 2009c14:	1884703a 	and	r2,r3,r2
 2009c18:	81400217 	ldw	r5,8(r16)
 2009c1c:	8085883a 	add	r2,r16,r2
 2009c20:	10c00117 	ldw	r3,4(r2)
 2009c24:	29000315 	stw	r4,12(r5)
 2009c28:	21400215 	stw	r5,8(r4)
 2009c2c:	18c00054 	ori	r3,r3,1
 2009c30:	10c00115 	stw	r3,4(r2)
 2009c34:	9009883a 	mov	r4,r18
 2009c38:	2010c500 	call	2010c50 <__malloc_unlock>
 2009c3c:	80800204 	addi	r2,r16,8
 2009c40:	dfc00a17 	ldw	ra,40(sp)
 2009c44:	df000917 	ldw	fp,36(sp)
 2009c48:	ddc00817 	ldw	r23,32(sp)
 2009c4c:	dd800717 	ldw	r22,28(sp)
 2009c50:	dd400617 	ldw	r21,24(sp)
 2009c54:	dd000517 	ldw	r20,20(sp)
 2009c58:	dcc00417 	ldw	r19,16(sp)
 2009c5c:	dc800317 	ldw	r18,12(sp)
 2009c60:	dc400217 	ldw	r17,8(sp)
 2009c64:	dc000117 	ldw	r16,4(sp)
 2009c68:	dec00b04 	addi	sp,sp,44
 2009c6c:	f800283a 	ret
 2009c70:	00800304 	movi	r2,12
 2009c74:	90800015 	stw	r2,0(r18)
 2009c78:	0005883a 	mov	r2,zero
 2009c7c:	003ff006 	br	2009c40 <_malloc_r+0x2a4>
 2009c80:	01002004 	movi	r4,128
 2009c84:	02001004 	movi	r8,64
 2009c88:	01c00fc4 	movi	r7,63
 2009c8c:	003f6106 	br	2009a14 <_malloc_r+0x78>
 2009c90:	4009883a 	mov	r4,r8
 2009c94:	003f7506 	br	2009a6c <_malloc_r+0xd0>
 2009c98:	81000317 	ldw	r4,12(r16)
 2009c9c:	003fde06 	br	2009c18 <_malloc_r+0x27c>
 2009ca0:	81c5883a 	add	r2,r16,r7
 2009ca4:	11400117 	ldw	r5,4(r2)
 2009ca8:	9009883a 	mov	r4,r18
 2009cac:	29400054 	ori	r5,r5,1
 2009cb0:	11400115 	stw	r5,4(r2)
 2009cb4:	2010c500 	call	2010c50 <__malloc_unlock>
 2009cb8:	80800204 	addi	r2,r16,8
 2009cbc:	003fe006 	br	2009c40 <_malloc_r+0x2a4>
 2009cc0:	9c000217 	ldw	r16,8(r19)
 2009cc4:	00bfff04 	movi	r2,-4
 2009cc8:	85800117 	ldw	r22,4(r16)
 2009ccc:	b0ac703a 	and	r22,r22,r2
 2009cd0:	b4400336 	bltu	r22,r17,2009ce0 <_malloc_r+0x344>
 2009cd4:	b445c83a 	sub	r2,r22,r17
 2009cd8:	00c003c4 	movi	r3,15
 2009cdc:	18805d16 	blt	r3,r2,2009e54 <_malloc_r+0x4b8>
 2009ce0:	05c080b4 	movhi	r23,514
 2009ce4:	008080b4 	movhi	r2,514
 2009ce8:	10bc2104 	addi	r2,r2,-3964
 2009cec:	bdf50a04 	addi	r23,r23,-11224
 2009cf0:	15400017 	ldw	r21,0(r2)
 2009cf4:	b8c00017 	ldw	r3,0(r23)
 2009cf8:	00bfffc4 	movi	r2,-1
 2009cfc:	858d883a 	add	r6,r16,r22
 2009d00:	8d6b883a 	add	r21,r17,r21
 2009d04:	1880ea26 	beq	r3,r2,200a0b0 <_malloc_r+0x714>
 2009d08:	ad4403c4 	addi	r21,r21,4111
 2009d0c:	00bc0004 	movi	r2,-4096
 2009d10:	a8aa703a 	and	r21,r21,r2
 2009d14:	a80b883a 	mov	r5,r21
 2009d18:	9009883a 	mov	r4,r18
 2009d1c:	d9800015 	stw	r6,0(sp)
 2009d20:	200bce80 	call	200bce8 <_sbrk_r>
 2009d24:	1029883a 	mov	r20,r2
 2009d28:	00bfffc4 	movi	r2,-1
 2009d2c:	d9800017 	ldw	r6,0(sp)
 2009d30:	a080e826 	beq	r20,r2,200a0d4 <_malloc_r+0x738>
 2009d34:	a180a636 	bltu	r20,r6,2009fd0 <_malloc_r+0x634>
 2009d38:	070080b4 	movhi	fp,514
 2009d3c:	e73c4304 	addi	fp,fp,-3828
 2009d40:	e0800017 	ldw	r2,0(fp)
 2009d44:	a887883a 	add	r3,r21,r2
 2009d48:	e0c00015 	stw	r3,0(fp)
 2009d4c:	3500e626 	beq	r6,r20,200a0e8 <_malloc_r+0x74c>
 2009d50:	b9000017 	ldw	r4,0(r23)
 2009d54:	00bfffc4 	movi	r2,-1
 2009d58:	2080ee26 	beq	r4,r2,200a114 <_malloc_r+0x778>
 2009d5c:	a185c83a 	sub	r2,r20,r6
 2009d60:	10c5883a 	add	r2,r2,r3
 2009d64:	e0800015 	stw	r2,0(fp)
 2009d68:	a0c001cc 	andi	r3,r20,7
 2009d6c:	1800bc26 	beq	r3,zero,200a060 <_malloc_r+0x6c4>
 2009d70:	a0e9c83a 	sub	r20,r20,r3
 2009d74:	00840204 	movi	r2,4104
 2009d78:	a5000204 	addi	r20,r20,8
 2009d7c:	10c7c83a 	sub	r3,r2,r3
 2009d80:	a545883a 	add	r2,r20,r21
 2009d84:	1083ffcc 	andi	r2,r2,4095
 2009d88:	18abc83a 	sub	r21,r3,r2
 2009d8c:	a80b883a 	mov	r5,r21
 2009d90:	9009883a 	mov	r4,r18
 2009d94:	200bce80 	call	200bce8 <_sbrk_r>
 2009d98:	00ffffc4 	movi	r3,-1
 2009d9c:	10c0e126 	beq	r2,r3,200a124 <_malloc_r+0x788>
 2009da0:	1505c83a 	sub	r2,r2,r20
 2009da4:	1545883a 	add	r2,r2,r21
 2009da8:	10800054 	ori	r2,r2,1
 2009dac:	e0c00017 	ldw	r3,0(fp)
 2009db0:	9d000215 	stw	r20,8(r19)
 2009db4:	a0800115 	stw	r2,4(r20)
 2009db8:	a8c7883a 	add	r3,r21,r3
 2009dbc:	e0c00015 	stw	r3,0(fp)
 2009dc0:	84c00e26 	beq	r16,r19,2009dfc <_malloc_r+0x460>
 2009dc4:	018003c4 	movi	r6,15
 2009dc8:	3580a72e 	bgeu	r6,r22,200a068 <_malloc_r+0x6cc>
 2009dcc:	81400117 	ldw	r5,4(r16)
 2009dd0:	013ffe04 	movi	r4,-8
 2009dd4:	b0bffd04 	addi	r2,r22,-12
 2009dd8:	1104703a 	and	r2,r2,r4
 2009ddc:	2900004c 	andi	r4,r5,1
 2009de0:	2088b03a 	or	r4,r4,r2
 2009de4:	81000115 	stw	r4,4(r16)
 2009de8:	01400144 	movi	r5,5
 2009dec:	8089883a 	add	r4,r16,r2
 2009df0:	21400115 	stw	r5,4(r4)
 2009df4:	21400215 	stw	r5,8(r4)
 2009df8:	3080cd36 	bltu	r6,r2,200a130 <_malloc_r+0x794>
 2009dfc:	008080b4 	movhi	r2,514
 2009e00:	10bc2004 	addi	r2,r2,-3968
 2009e04:	11000017 	ldw	r4,0(r2)
 2009e08:	20c0012e 	bgeu	r4,r3,2009e10 <_malloc_r+0x474>
 2009e0c:	10c00015 	stw	r3,0(r2)
 2009e10:	008080b4 	movhi	r2,514
 2009e14:	10bc1f04 	addi	r2,r2,-3972
 2009e18:	11000017 	ldw	r4,0(r2)
 2009e1c:	9c000217 	ldw	r16,8(r19)
 2009e20:	20c0012e 	bgeu	r4,r3,2009e28 <_malloc_r+0x48c>
 2009e24:	10c00015 	stw	r3,0(r2)
 2009e28:	80c00117 	ldw	r3,4(r16)
 2009e2c:	00bfff04 	movi	r2,-4
 2009e30:	1886703a 	and	r3,r3,r2
 2009e34:	1c45c83a 	sub	r2,r3,r17
 2009e38:	1c400236 	bltu	r3,r17,2009e44 <_malloc_r+0x4a8>
 2009e3c:	00c003c4 	movi	r3,15
 2009e40:	18800416 	blt	r3,r2,2009e54 <_malloc_r+0x4b8>
 2009e44:	9009883a 	mov	r4,r18
 2009e48:	2010c500 	call	2010c50 <__malloc_unlock>
 2009e4c:	0005883a 	mov	r2,zero
 2009e50:	003f7b06 	br	2009c40 <_malloc_r+0x2a4>
 2009e54:	88c00054 	ori	r3,r17,1
 2009e58:	80c00115 	stw	r3,4(r16)
 2009e5c:	8463883a 	add	r17,r16,r17
 2009e60:	10800054 	ori	r2,r2,1
 2009e64:	9c400215 	stw	r17,8(r19)
 2009e68:	88800115 	stw	r2,4(r17)
 2009e6c:	9009883a 	mov	r4,r18
 2009e70:	2010c500 	call	2010c50 <__malloc_unlock>
 2009e74:	80800204 	addi	r2,r16,8
 2009e78:	003f7106 	br	2009c40 <_malloc_r+0x2a4>
 2009e7c:	00c00504 	movi	r3,20
 2009e80:	18804a2e 	bgeu	r3,r2,2009fac <_malloc_r+0x610>
 2009e84:	00c01504 	movi	r3,84
 2009e88:	18806e36 	bltu	r3,r2,200a044 <_malloc_r+0x6a8>
 2009e8c:	8804d33a 	srli	r2,r17,12
 2009e90:	12001bc4 	addi	r8,r2,111
 2009e94:	11c01b84 	addi	r7,r2,110
 2009e98:	4209883a 	add	r4,r8,r8
 2009e9c:	003edd06 	br	2009a14 <_malloc_r+0x78>
 2009ea0:	3804d27a 	srli	r2,r7,9
 2009ea4:	00c00104 	movi	r3,4
 2009ea8:	1880442e 	bgeu	r3,r2,2009fbc <_malloc_r+0x620>
 2009eac:	00c00504 	movi	r3,20
 2009eb0:	18808136 	bltu	r3,r2,200a0b8 <_malloc_r+0x71c>
 2009eb4:	11401704 	addi	r5,r2,92
 2009eb8:	10c016c4 	addi	r3,r2,91
 2009ebc:	294b883a 	add	r5,r5,r5
 2009ec0:	294b883a 	add	r5,r5,r5
 2009ec4:	294b883a 	add	r5,r5,r5
 2009ec8:	994b883a 	add	r5,r19,r5
 2009ecc:	28800017 	ldw	r2,0(r5)
 2009ed0:	018080b4 	movhi	r6,514
 2009ed4:	297ffe04 	addi	r5,r5,-8
 2009ed8:	31af7f04 	addi	r6,r6,-16900
 2009edc:	28806526 	beq	r5,r2,200a074 <_malloc_r+0x6d8>
 2009ee0:	01bfff04 	movi	r6,-4
 2009ee4:	10c00117 	ldw	r3,4(r2)
 2009ee8:	1986703a 	and	r3,r3,r6
 2009eec:	38c0022e 	bgeu	r7,r3,2009ef8 <_malloc_r+0x55c>
 2009ef0:	10800217 	ldw	r2,8(r2)
 2009ef4:	28bffb1e 	bne	r5,r2,2009ee4 <_malloc_r+0x548>
 2009ef8:	11400317 	ldw	r5,12(r2)
 2009efc:	98c00117 	ldw	r3,4(r19)
 2009f00:	81400315 	stw	r5,12(r16)
 2009f04:	80800215 	stw	r2,8(r16)
 2009f08:	2c000215 	stw	r16,8(r5)
 2009f0c:	14000315 	stw	r16,12(r2)
 2009f10:	003ef806 	br	2009af4 <_malloc_r+0x158>
 2009f14:	88c00054 	ori	r3,r17,1
 2009f18:	80c00115 	stw	r3,4(r16)
 2009f1c:	8463883a 	add	r17,r16,r17
 2009f20:	34400515 	stw	r17,20(r6)
 2009f24:	34400415 	stw	r17,16(r6)
 2009f28:	10c00054 	ori	r3,r2,1
 2009f2c:	8a000315 	stw	r8,12(r17)
 2009f30:	8a000215 	stw	r8,8(r17)
 2009f34:	88c00115 	stw	r3,4(r17)
 2009f38:	88a3883a 	add	r17,r17,r2
 2009f3c:	88800015 	stw	r2,0(r17)
 2009f40:	9009883a 	mov	r4,r18
 2009f44:	2010c500 	call	2010c50 <__malloc_unlock>
 2009f48:	80800204 	addi	r2,r16,8
 2009f4c:	003f3c06 	br	2009c40 <_malloc_r+0x2a4>
 2009f50:	30c00117 	ldw	r3,4(r6)
 2009f54:	003ee706 	br	2009af4 <_malloc_r+0x158>
 2009f58:	5ac00044 	addi	r11,r11,1
 2009f5c:	588000cc 	andi	r2,r11,3
 2009f60:	31800204 	addi	r6,r6,8
 2009f64:	103efd1e 	bne	r2,zero,2009b5c <_malloc_r+0x1c0>
 2009f68:	00002406 	br	2009ffc <_malloc_r+0x660>
 2009f6c:	14000317 	ldw	r16,12(r2)
 2009f70:	143f251e 	bne	r2,r16,2009c08 <_malloc_r+0x26c>
 2009f74:	21000084 	addi	r4,r4,2
 2009f78:	003ebc06 	br	2009a6c <_malloc_r+0xd0>
 2009f7c:	8085883a 	add	r2,r16,r2
 2009f80:	10c00117 	ldw	r3,4(r2)
 2009f84:	81000317 	ldw	r4,12(r16)
 2009f88:	81400217 	ldw	r5,8(r16)
 2009f8c:	18c00054 	ori	r3,r3,1
 2009f90:	10c00115 	stw	r3,4(r2)
 2009f94:	29000315 	stw	r4,12(r5)
 2009f98:	21400215 	stw	r5,8(r4)
 2009f9c:	9009883a 	mov	r4,r18
 2009fa0:	2010c500 	call	2010c50 <__malloc_unlock>
 2009fa4:	80800204 	addi	r2,r16,8
 2009fa8:	003f2506 	br	2009c40 <_malloc_r+0x2a4>
 2009fac:	12001704 	addi	r8,r2,92
 2009fb0:	11c016c4 	addi	r7,r2,91
 2009fb4:	4209883a 	add	r4,r8,r8
 2009fb8:	003e9606 	br	2009a14 <_malloc_r+0x78>
 2009fbc:	3804d1ba 	srli	r2,r7,6
 2009fc0:	11400e44 	addi	r5,r2,57
 2009fc4:	10c00e04 	addi	r3,r2,56
 2009fc8:	294b883a 	add	r5,r5,r5
 2009fcc:	003fbc06 	br	2009ec0 <_malloc_r+0x524>
 2009fd0:	84ff5926 	beq	r16,r19,2009d38 <_malloc_r+0x39c>
 2009fd4:	008080b4 	movhi	r2,514
 2009fd8:	10af7f04 	addi	r2,r2,-16900
 2009fdc:	14000217 	ldw	r16,8(r2)
 2009fe0:	00bfff04 	movi	r2,-4
 2009fe4:	80c00117 	ldw	r3,4(r16)
 2009fe8:	1886703a 	and	r3,r3,r2
 2009fec:	003f9106 	br	2009e34 <_malloc_r+0x498>
 2009ff0:	60800217 	ldw	r2,8(r12)
 2009ff4:	213fffc4 	addi	r4,r4,-1
 2009ff8:	1300651e 	bne	r2,r12,200a190 <_malloc_r+0x7f4>
 2009ffc:	208000cc 	andi	r2,r4,3
 200a000:	633ffe04 	addi	r12,r12,-8
 200a004:	103ffa1e 	bne	r2,zero,2009ff0 <_malloc_r+0x654>
 200a008:	98800117 	ldw	r2,4(r19)
 200a00c:	0146303a 	nor	r3,zero,r5
 200a010:	1884703a 	and	r2,r3,r2
 200a014:	98800115 	stw	r2,4(r19)
 200a018:	294b883a 	add	r5,r5,r5
 200a01c:	117f2836 	bltu	r2,r5,2009cc0 <_malloc_r+0x324>
 200a020:	283f2726 	beq	r5,zero,2009cc0 <_malloc_r+0x324>
 200a024:	2886703a 	and	r3,r5,r2
 200a028:	5809883a 	mov	r4,r11
 200a02c:	183ec31e 	bne	r3,zero,2009b3c <_malloc_r+0x1a0>
 200a030:	294b883a 	add	r5,r5,r5
 200a034:	2886703a 	and	r3,r5,r2
 200a038:	21000104 	addi	r4,r4,4
 200a03c:	183ffc26 	beq	r3,zero,200a030 <_malloc_r+0x694>
 200a040:	003ebe06 	br	2009b3c <_malloc_r+0x1a0>
 200a044:	00c05504 	movi	r3,340
 200a048:	18801236 	bltu	r3,r2,200a094 <_malloc_r+0x6f8>
 200a04c:	8804d3fa 	srli	r2,r17,15
 200a050:	12001e04 	addi	r8,r2,120
 200a054:	11c01dc4 	addi	r7,r2,119
 200a058:	4209883a 	add	r4,r8,r8
 200a05c:	003e6d06 	br	2009a14 <_malloc_r+0x78>
 200a060:	00c40004 	movi	r3,4096
 200a064:	003f4606 	br	2009d80 <_malloc_r+0x3e4>
 200a068:	00800044 	movi	r2,1
 200a06c:	a0800115 	stw	r2,4(r20)
 200a070:	003f7406 	br	2009e44 <_malloc_r+0x4a8>
 200a074:	1805d0ba 	srai	r2,r3,2
 200a078:	01c00044 	movi	r7,1
 200a07c:	30c00117 	ldw	r3,4(r6)
 200a080:	388e983a 	sll	r7,r7,r2
 200a084:	2805883a 	mov	r2,r5
 200a088:	38c6b03a 	or	r3,r7,r3
 200a08c:	30c00115 	stw	r3,4(r6)
 200a090:	003f9b06 	br	2009f00 <_malloc_r+0x564>
 200a094:	00c15504 	movi	r3,1364
 200a098:	18801a36 	bltu	r3,r2,200a104 <_malloc_r+0x768>
 200a09c:	8804d4ba 	srli	r2,r17,18
 200a0a0:	12001f44 	addi	r8,r2,125
 200a0a4:	11c01f04 	addi	r7,r2,124
 200a0a8:	4209883a 	add	r4,r8,r8
 200a0ac:	003e5906 	br	2009a14 <_malloc_r+0x78>
 200a0b0:	ad400404 	addi	r21,r21,16
 200a0b4:	003f1706 	br	2009d14 <_malloc_r+0x378>
 200a0b8:	00c01504 	movi	r3,84
 200a0bc:	18802336 	bltu	r3,r2,200a14c <_malloc_r+0x7b0>
 200a0c0:	3804d33a 	srli	r2,r7,12
 200a0c4:	11401bc4 	addi	r5,r2,111
 200a0c8:	10c01b84 	addi	r3,r2,110
 200a0cc:	294b883a 	add	r5,r5,r5
 200a0d0:	003f7b06 	br	2009ec0 <_malloc_r+0x524>
 200a0d4:	9c000217 	ldw	r16,8(r19)
 200a0d8:	00bfff04 	movi	r2,-4
 200a0dc:	80c00117 	ldw	r3,4(r16)
 200a0e0:	1886703a 	and	r3,r3,r2
 200a0e4:	003f5306 	br	2009e34 <_malloc_r+0x498>
 200a0e8:	3083ffcc 	andi	r2,r6,4095
 200a0ec:	103f181e 	bne	r2,zero,2009d50 <_malloc_r+0x3b4>
 200a0f0:	99000217 	ldw	r4,8(r19)
 200a0f4:	b545883a 	add	r2,r22,r21
 200a0f8:	10800054 	ori	r2,r2,1
 200a0fc:	20800115 	stw	r2,4(r4)
 200a100:	003f3e06 	br	2009dfc <_malloc_r+0x460>
 200a104:	01003f84 	movi	r4,254
 200a108:	02001fc4 	movi	r8,127
 200a10c:	01c01f84 	movi	r7,126
 200a110:	003e4006 	br	2009a14 <_malloc_r+0x78>
 200a114:	008080b4 	movhi	r2,514
 200a118:	10b50a04 	addi	r2,r2,-11224
 200a11c:	15000015 	stw	r20,0(r2)
 200a120:	003f1106 	br	2009d68 <_malloc_r+0x3cc>
 200a124:	00800044 	movi	r2,1
 200a128:	002b883a 	mov	r21,zero
 200a12c:	003f1f06 	br	2009dac <_malloc_r+0x410>
 200a130:	81400204 	addi	r5,r16,8
 200a134:	9009883a 	mov	r4,r18
 200a138:	2008da40 	call	2008da4 <_free_r>
 200a13c:	008080b4 	movhi	r2,514
 200a140:	10bc4304 	addi	r2,r2,-3828
 200a144:	10c00017 	ldw	r3,0(r2)
 200a148:	003f2c06 	br	2009dfc <_malloc_r+0x460>
 200a14c:	00c05504 	movi	r3,340
 200a150:	18800536 	bltu	r3,r2,200a168 <_malloc_r+0x7cc>
 200a154:	3804d3fa 	srli	r2,r7,15
 200a158:	11401e04 	addi	r5,r2,120
 200a15c:	10c01dc4 	addi	r3,r2,119
 200a160:	294b883a 	add	r5,r5,r5
 200a164:	003f5606 	br	2009ec0 <_malloc_r+0x524>
 200a168:	00c15504 	movi	r3,1364
 200a16c:	18800536 	bltu	r3,r2,200a184 <_malloc_r+0x7e8>
 200a170:	3804d4ba 	srli	r2,r7,18
 200a174:	11401f44 	addi	r5,r2,125
 200a178:	10c01f04 	addi	r3,r2,124
 200a17c:	294b883a 	add	r5,r5,r5
 200a180:	003f4f06 	br	2009ec0 <_malloc_r+0x524>
 200a184:	01403f84 	movi	r5,254
 200a188:	00c01f84 	movi	r3,126
 200a18c:	003f4c06 	br	2009ec0 <_malloc_r+0x524>
 200a190:	98800117 	ldw	r2,4(r19)
 200a194:	003fa006 	br	200a018 <_malloc_r+0x67c>
 200a198:	8808d0fa 	srli	r4,r17,3
 200a19c:	20800044 	addi	r2,r4,1
 200a1a0:	1085883a 	add	r2,r2,r2
 200a1a4:	003e9006 	br	2009be8 <_malloc_r+0x24c>

0200a1a8 <memchr>:
 200a1a8:	208000cc 	andi	r2,r4,3
 200a1ac:	280f883a 	mov	r7,r5
 200a1b0:	10003426 	beq	r2,zero,200a284 <memchr+0xdc>
 200a1b4:	30bfffc4 	addi	r2,r6,-1
 200a1b8:	30001a26 	beq	r6,zero,200a224 <memchr+0x7c>
 200a1bc:	20c00003 	ldbu	r3,0(r4)
 200a1c0:	29803fcc 	andi	r6,r5,255
 200a1c4:	30c0051e 	bne	r6,r3,200a1dc <memchr+0x34>
 200a1c8:	00001806 	br	200a22c <memchr+0x84>
 200a1cc:	10001526 	beq	r2,zero,200a224 <memchr+0x7c>
 200a1d0:	20c00003 	ldbu	r3,0(r4)
 200a1d4:	10bfffc4 	addi	r2,r2,-1
 200a1d8:	30c01426 	beq	r6,r3,200a22c <memchr+0x84>
 200a1dc:	21000044 	addi	r4,r4,1
 200a1e0:	20c000cc 	andi	r3,r4,3
 200a1e4:	183ff91e 	bne	r3,zero,200a1cc <memchr+0x24>
 200a1e8:	020000c4 	movi	r8,3
 200a1ec:	40801136 	bltu	r8,r2,200a234 <memchr+0x8c>
 200a1f0:	10000c26 	beq	r2,zero,200a224 <memchr+0x7c>
 200a1f4:	20c00003 	ldbu	r3,0(r4)
 200a1f8:	29403fcc 	andi	r5,r5,255
 200a1fc:	28c00b26 	beq	r5,r3,200a22c <memchr+0x84>
 200a200:	20c00044 	addi	r3,r4,1
 200a204:	39803fcc 	andi	r6,r7,255
 200a208:	2089883a 	add	r4,r4,r2
 200a20c:	00000306 	br	200a21c <memchr+0x74>
 200a210:	18c00044 	addi	r3,r3,1
 200a214:	197fffc3 	ldbu	r5,-1(r3)
 200a218:	31400526 	beq	r6,r5,200a230 <memchr+0x88>
 200a21c:	1805883a 	mov	r2,r3
 200a220:	20fffb1e 	bne	r4,r3,200a210 <memchr+0x68>
 200a224:	0005883a 	mov	r2,zero
 200a228:	f800283a 	ret
 200a22c:	2005883a 	mov	r2,r4
 200a230:	f800283a 	ret
 200a234:	28c03fcc 	andi	r3,r5,255
 200a238:	1812923a 	slli	r9,r3,8
 200a23c:	02ffbff4 	movhi	r11,65279
 200a240:	02a02074 	movhi	r10,32897
 200a244:	48d2b03a 	or	r9,r9,r3
 200a248:	4806943a 	slli	r3,r9,16
 200a24c:	5affbfc4 	addi	r11,r11,-257
 200a250:	52a02004 	addi	r10,r10,-32640
 200a254:	48d2b03a 	or	r9,r9,r3
 200a258:	20c00017 	ldw	r3,0(r4)
 200a25c:	48c6f03a 	xor	r3,r9,r3
 200a260:	1acd883a 	add	r6,r3,r11
 200a264:	00c6303a 	nor	r3,zero,r3
 200a268:	30c6703a 	and	r3,r6,r3
 200a26c:	1a86703a 	and	r3,r3,r10
 200a270:	183fe01e 	bne	r3,zero,200a1f4 <memchr+0x4c>
 200a274:	10bfff04 	addi	r2,r2,-4
 200a278:	21000104 	addi	r4,r4,4
 200a27c:	40bff636 	bltu	r8,r2,200a258 <memchr+0xb0>
 200a280:	003fdb06 	br	200a1f0 <memchr+0x48>
 200a284:	3005883a 	mov	r2,r6
 200a288:	003fd706 	br	200a1e8 <memchr+0x40>

0200a28c <memcpy>:
 200a28c:	defffd04 	addi	sp,sp,-12
 200a290:	dfc00215 	stw	ra,8(sp)
 200a294:	dc400115 	stw	r17,4(sp)
 200a298:	dc000015 	stw	r16,0(sp)
 200a29c:	00c003c4 	movi	r3,15
 200a2a0:	2005883a 	mov	r2,r4
 200a2a4:	1980452e 	bgeu	r3,r6,200a3bc <memcpy+0x130>
 200a2a8:	2906b03a 	or	r3,r5,r4
 200a2ac:	18c000cc 	andi	r3,r3,3
 200a2b0:	1800441e 	bne	r3,zero,200a3c4 <memcpy+0x138>
 200a2b4:	347ffc04 	addi	r17,r6,-16
 200a2b8:	8822d13a 	srli	r17,r17,4
 200a2bc:	28c00104 	addi	r3,r5,4
 200a2c0:	23400104 	addi	r13,r4,4
 200a2c4:	8820913a 	slli	r16,r17,4
 200a2c8:	2b000204 	addi	r12,r5,8
 200a2cc:	22c00204 	addi	r11,r4,8
 200a2d0:	84000504 	addi	r16,r16,20
 200a2d4:	2a800304 	addi	r10,r5,12
 200a2d8:	22400304 	addi	r9,r4,12
 200a2dc:	2c21883a 	add	r16,r5,r16
 200a2e0:	2811883a 	mov	r8,r5
 200a2e4:	200f883a 	mov	r7,r4
 200a2e8:	41000017 	ldw	r4,0(r8)
 200a2ec:	1fc00017 	ldw	ra,0(r3)
 200a2f0:	63c00017 	ldw	r15,0(r12)
 200a2f4:	39000015 	stw	r4,0(r7)
 200a2f8:	53800017 	ldw	r14,0(r10)
 200a2fc:	6fc00015 	stw	ra,0(r13)
 200a300:	5bc00015 	stw	r15,0(r11)
 200a304:	4b800015 	stw	r14,0(r9)
 200a308:	18c00404 	addi	r3,r3,16
 200a30c:	39c00404 	addi	r7,r7,16
 200a310:	42000404 	addi	r8,r8,16
 200a314:	6b400404 	addi	r13,r13,16
 200a318:	63000404 	addi	r12,r12,16
 200a31c:	5ac00404 	addi	r11,r11,16
 200a320:	52800404 	addi	r10,r10,16
 200a324:	4a400404 	addi	r9,r9,16
 200a328:	1c3fef1e 	bne	r3,r16,200a2e8 <memcpy+0x5c>
 200a32c:	89c00044 	addi	r7,r17,1
 200a330:	380e913a 	slli	r7,r7,4
 200a334:	310003cc 	andi	r4,r6,15
 200a338:	02c000c4 	movi	r11,3
 200a33c:	11c7883a 	add	r3,r2,r7
 200a340:	29cb883a 	add	r5,r5,r7
 200a344:	5900212e 	bgeu	r11,r4,200a3cc <memcpy+0x140>
 200a348:	1813883a 	mov	r9,r3
 200a34c:	2811883a 	mov	r8,r5
 200a350:	200f883a 	mov	r7,r4
 200a354:	42800017 	ldw	r10,0(r8)
 200a358:	4a400104 	addi	r9,r9,4
 200a35c:	39ffff04 	addi	r7,r7,-4
 200a360:	4abfff15 	stw	r10,-4(r9)
 200a364:	42000104 	addi	r8,r8,4
 200a368:	59fffa36 	bltu	r11,r7,200a354 <memcpy+0xc8>
 200a36c:	213fff04 	addi	r4,r4,-4
 200a370:	2008d0ba 	srli	r4,r4,2
 200a374:	318000cc 	andi	r6,r6,3
 200a378:	21000044 	addi	r4,r4,1
 200a37c:	2109883a 	add	r4,r4,r4
 200a380:	2109883a 	add	r4,r4,r4
 200a384:	1907883a 	add	r3,r3,r4
 200a388:	290b883a 	add	r5,r5,r4
 200a38c:	30000626 	beq	r6,zero,200a3a8 <memcpy+0x11c>
 200a390:	198d883a 	add	r6,r3,r6
 200a394:	29c00003 	ldbu	r7,0(r5)
 200a398:	18c00044 	addi	r3,r3,1
 200a39c:	29400044 	addi	r5,r5,1
 200a3a0:	19ffffc5 	stb	r7,-1(r3)
 200a3a4:	19bffb1e 	bne	r3,r6,200a394 <memcpy+0x108>
 200a3a8:	dfc00217 	ldw	ra,8(sp)
 200a3ac:	dc400117 	ldw	r17,4(sp)
 200a3b0:	dc000017 	ldw	r16,0(sp)
 200a3b4:	dec00304 	addi	sp,sp,12
 200a3b8:	f800283a 	ret
 200a3bc:	2007883a 	mov	r3,r4
 200a3c0:	003ff206 	br	200a38c <memcpy+0x100>
 200a3c4:	2007883a 	mov	r3,r4
 200a3c8:	003ff106 	br	200a390 <memcpy+0x104>
 200a3cc:	200d883a 	mov	r6,r4
 200a3d0:	003fee06 	br	200a38c <memcpy+0x100>

0200a3d4 <memmove>:
 200a3d4:	2005883a 	mov	r2,r4
 200a3d8:	29000b2e 	bgeu	r5,r4,200a408 <memmove+0x34>
 200a3dc:	298f883a 	add	r7,r5,r6
 200a3e0:	21c0092e 	bgeu	r4,r7,200a408 <memmove+0x34>
 200a3e4:	2187883a 	add	r3,r4,r6
 200a3e8:	198bc83a 	sub	r5,r3,r6
 200a3ec:	30004826 	beq	r6,zero,200a510 <memmove+0x13c>
 200a3f0:	39ffffc4 	addi	r7,r7,-1
 200a3f4:	39000003 	ldbu	r4,0(r7)
 200a3f8:	18ffffc4 	addi	r3,r3,-1
 200a3fc:	19000005 	stb	r4,0(r3)
 200a400:	28fffb1e 	bne	r5,r3,200a3f0 <memmove+0x1c>
 200a404:	f800283a 	ret
 200a408:	00c003c4 	movi	r3,15
 200a40c:	1980412e 	bgeu	r3,r6,200a514 <memmove+0x140>
 200a410:	2886b03a 	or	r3,r5,r2
 200a414:	18c000cc 	andi	r3,r3,3
 200a418:	1800401e 	bne	r3,zero,200a51c <memmove+0x148>
 200a41c:	33fffc04 	addi	r15,r6,-16
 200a420:	781ed13a 	srli	r15,r15,4
 200a424:	28c00104 	addi	r3,r5,4
 200a428:	13400104 	addi	r13,r2,4
 200a42c:	781c913a 	slli	r14,r15,4
 200a430:	2b000204 	addi	r12,r5,8
 200a434:	12c00204 	addi	r11,r2,8
 200a438:	73800504 	addi	r14,r14,20
 200a43c:	2a800304 	addi	r10,r5,12
 200a440:	12400304 	addi	r9,r2,12
 200a444:	2b9d883a 	add	r14,r5,r14
 200a448:	2811883a 	mov	r8,r5
 200a44c:	100f883a 	mov	r7,r2
 200a450:	41000017 	ldw	r4,0(r8)
 200a454:	39c00404 	addi	r7,r7,16
 200a458:	18c00404 	addi	r3,r3,16
 200a45c:	393ffc15 	stw	r4,-16(r7)
 200a460:	193ffc17 	ldw	r4,-16(r3)
 200a464:	6b400404 	addi	r13,r13,16
 200a468:	5ac00404 	addi	r11,r11,16
 200a46c:	693ffc15 	stw	r4,-16(r13)
 200a470:	61000017 	ldw	r4,0(r12)
 200a474:	4a400404 	addi	r9,r9,16
 200a478:	42000404 	addi	r8,r8,16
 200a47c:	593ffc15 	stw	r4,-16(r11)
 200a480:	51000017 	ldw	r4,0(r10)
 200a484:	63000404 	addi	r12,r12,16
 200a488:	52800404 	addi	r10,r10,16
 200a48c:	493ffc15 	stw	r4,-16(r9)
 200a490:	1bbfef1e 	bne	r3,r14,200a450 <memmove+0x7c>
 200a494:	79000044 	addi	r4,r15,1
 200a498:	2008913a 	slli	r4,r4,4
 200a49c:	328003cc 	andi	r10,r6,15
 200a4a0:	02c000c4 	movi	r11,3
 200a4a4:	1107883a 	add	r3,r2,r4
 200a4a8:	290b883a 	add	r5,r5,r4
 200a4ac:	5a801e2e 	bgeu	r11,r10,200a528 <memmove+0x154>
 200a4b0:	1813883a 	mov	r9,r3
 200a4b4:	2811883a 	mov	r8,r5
 200a4b8:	500f883a 	mov	r7,r10
 200a4bc:	41000017 	ldw	r4,0(r8)
 200a4c0:	4a400104 	addi	r9,r9,4
 200a4c4:	39ffff04 	addi	r7,r7,-4
 200a4c8:	493fff15 	stw	r4,-4(r9)
 200a4cc:	42000104 	addi	r8,r8,4
 200a4d0:	59fffa36 	bltu	r11,r7,200a4bc <memmove+0xe8>
 200a4d4:	513fff04 	addi	r4,r10,-4
 200a4d8:	2008d0ba 	srli	r4,r4,2
 200a4dc:	318000cc 	andi	r6,r6,3
 200a4e0:	21000044 	addi	r4,r4,1
 200a4e4:	2109883a 	add	r4,r4,r4
 200a4e8:	2109883a 	add	r4,r4,r4
 200a4ec:	1907883a 	add	r3,r3,r4
 200a4f0:	290b883a 	add	r5,r5,r4
 200a4f4:	30000b26 	beq	r6,zero,200a524 <memmove+0x150>
 200a4f8:	198d883a 	add	r6,r3,r6
 200a4fc:	29c00003 	ldbu	r7,0(r5)
 200a500:	18c00044 	addi	r3,r3,1
 200a504:	29400044 	addi	r5,r5,1
 200a508:	19ffffc5 	stb	r7,-1(r3)
 200a50c:	19bffb1e 	bne	r3,r6,200a4fc <memmove+0x128>
 200a510:	f800283a 	ret
 200a514:	1007883a 	mov	r3,r2
 200a518:	003ff606 	br	200a4f4 <memmove+0x120>
 200a51c:	1007883a 	mov	r3,r2
 200a520:	003ff506 	br	200a4f8 <memmove+0x124>
 200a524:	f800283a 	ret
 200a528:	500d883a 	mov	r6,r10
 200a52c:	003ff106 	br	200a4f4 <memmove+0x120>

0200a530 <memset>:
 200a530:	20c000cc 	andi	r3,r4,3
 200a534:	2005883a 	mov	r2,r4
 200a538:	18004426 	beq	r3,zero,200a64c <memset+0x11c>
 200a53c:	31ffffc4 	addi	r7,r6,-1
 200a540:	30004026 	beq	r6,zero,200a644 <memset+0x114>
 200a544:	2813883a 	mov	r9,r5
 200a548:	200d883a 	mov	r6,r4
 200a54c:	2007883a 	mov	r3,r4
 200a550:	00000406 	br	200a564 <memset+0x34>
 200a554:	3a3fffc4 	addi	r8,r7,-1
 200a558:	31800044 	addi	r6,r6,1
 200a55c:	38003926 	beq	r7,zero,200a644 <memset+0x114>
 200a560:	400f883a 	mov	r7,r8
 200a564:	18c00044 	addi	r3,r3,1
 200a568:	32400005 	stb	r9,0(r6)
 200a56c:	1a0000cc 	andi	r8,r3,3
 200a570:	403ff81e 	bne	r8,zero,200a554 <memset+0x24>
 200a574:	010000c4 	movi	r4,3
 200a578:	21c02d2e 	bgeu	r4,r7,200a630 <memset+0x100>
 200a57c:	29003fcc 	andi	r4,r5,255
 200a580:	200c923a 	slli	r6,r4,8
 200a584:	3108b03a 	or	r4,r6,r4
 200a588:	200c943a 	slli	r6,r4,16
 200a58c:	218cb03a 	or	r6,r4,r6
 200a590:	010003c4 	movi	r4,15
 200a594:	21c0182e 	bgeu	r4,r7,200a5f8 <memset+0xc8>
 200a598:	3b3ffc04 	addi	r12,r7,-16
 200a59c:	6018d13a 	srli	r12,r12,4
 200a5a0:	1a000104 	addi	r8,r3,4
 200a5a4:	1ac00204 	addi	r11,r3,8
 200a5a8:	6008913a 	slli	r4,r12,4
 200a5ac:	1a800304 	addi	r10,r3,12
 200a5b0:	1813883a 	mov	r9,r3
 200a5b4:	21000504 	addi	r4,r4,20
 200a5b8:	1909883a 	add	r4,r3,r4
 200a5bc:	49800015 	stw	r6,0(r9)
 200a5c0:	41800015 	stw	r6,0(r8)
 200a5c4:	59800015 	stw	r6,0(r11)
 200a5c8:	51800015 	stw	r6,0(r10)
 200a5cc:	42000404 	addi	r8,r8,16
 200a5d0:	4a400404 	addi	r9,r9,16
 200a5d4:	5ac00404 	addi	r11,r11,16
 200a5d8:	52800404 	addi	r10,r10,16
 200a5dc:	413ff71e 	bne	r8,r4,200a5bc <memset+0x8c>
 200a5e0:	63000044 	addi	r12,r12,1
 200a5e4:	6018913a 	slli	r12,r12,4
 200a5e8:	39c003cc 	andi	r7,r7,15
 200a5ec:	010000c4 	movi	r4,3
 200a5f0:	1b07883a 	add	r3,r3,r12
 200a5f4:	21c00e2e 	bgeu	r4,r7,200a630 <memset+0x100>
 200a5f8:	1813883a 	mov	r9,r3
 200a5fc:	3811883a 	mov	r8,r7
 200a600:	010000c4 	movi	r4,3
 200a604:	49800015 	stw	r6,0(r9)
 200a608:	423fff04 	addi	r8,r8,-4
 200a60c:	4a400104 	addi	r9,r9,4
 200a610:	223ffc36 	bltu	r4,r8,200a604 <memset+0xd4>
 200a614:	393fff04 	addi	r4,r7,-4
 200a618:	2008d0ba 	srli	r4,r4,2
 200a61c:	39c000cc 	andi	r7,r7,3
 200a620:	21000044 	addi	r4,r4,1
 200a624:	2109883a 	add	r4,r4,r4
 200a628:	2109883a 	add	r4,r4,r4
 200a62c:	1907883a 	add	r3,r3,r4
 200a630:	38000526 	beq	r7,zero,200a648 <memset+0x118>
 200a634:	19cf883a 	add	r7,r3,r7
 200a638:	19400005 	stb	r5,0(r3)
 200a63c:	18c00044 	addi	r3,r3,1
 200a640:	38fffd1e 	bne	r7,r3,200a638 <memset+0x108>
 200a644:	f800283a 	ret
 200a648:	f800283a 	ret
 200a64c:	2007883a 	mov	r3,r4
 200a650:	300f883a 	mov	r7,r6
 200a654:	003fc706 	br	200a574 <memset+0x44>

0200a658 <_Balloc>:
 200a658:	20801317 	ldw	r2,76(r4)
 200a65c:	defffc04 	addi	sp,sp,-16
 200a660:	dc400115 	stw	r17,4(sp)
 200a664:	dc000015 	stw	r16,0(sp)
 200a668:	dfc00315 	stw	ra,12(sp)
 200a66c:	dc800215 	stw	r18,8(sp)
 200a670:	2023883a 	mov	r17,r4
 200a674:	2821883a 	mov	r16,r5
 200a678:	10000f26 	beq	r2,zero,200a6b8 <_Balloc+0x60>
 200a67c:	8407883a 	add	r3,r16,r16
 200a680:	18c7883a 	add	r3,r3,r3
 200a684:	10c7883a 	add	r3,r2,r3
 200a688:	18800017 	ldw	r2,0(r3)
 200a68c:	10001126 	beq	r2,zero,200a6d4 <_Balloc+0x7c>
 200a690:	11000017 	ldw	r4,0(r2)
 200a694:	19000015 	stw	r4,0(r3)
 200a698:	10000415 	stw	zero,16(r2)
 200a69c:	10000315 	stw	zero,12(r2)
 200a6a0:	dfc00317 	ldw	ra,12(sp)
 200a6a4:	dc800217 	ldw	r18,8(sp)
 200a6a8:	dc400117 	ldw	r17,4(sp)
 200a6ac:	dc000017 	ldw	r16,0(sp)
 200a6b0:	dec00404 	addi	sp,sp,16
 200a6b4:	f800283a 	ret
 200a6b8:	01800844 	movi	r6,33
 200a6bc:	01400104 	movi	r5,4
 200a6c0:	200d7000 	call	200d700 <_calloc_r>
 200a6c4:	88801315 	stw	r2,76(r17)
 200a6c8:	103fec1e 	bne	r2,zero,200a67c <_Balloc+0x24>
 200a6cc:	0005883a 	mov	r2,zero
 200a6d0:	003ff306 	br	200a6a0 <_Balloc+0x48>
 200a6d4:	01400044 	movi	r5,1
 200a6d8:	2c24983a 	sll	r18,r5,r16
 200a6dc:	8809883a 	mov	r4,r17
 200a6e0:	91800144 	addi	r6,r18,5
 200a6e4:	318d883a 	add	r6,r6,r6
 200a6e8:	318d883a 	add	r6,r6,r6
 200a6ec:	200d7000 	call	200d700 <_calloc_r>
 200a6f0:	103ff626 	beq	r2,zero,200a6cc <_Balloc+0x74>
 200a6f4:	14000115 	stw	r16,4(r2)
 200a6f8:	14800215 	stw	r18,8(r2)
 200a6fc:	003fe606 	br	200a698 <_Balloc+0x40>

0200a700 <_Bfree>:
 200a700:	28000826 	beq	r5,zero,200a724 <_Bfree+0x24>
 200a704:	28c00117 	ldw	r3,4(r5)
 200a708:	20801317 	ldw	r2,76(r4)
 200a70c:	18c7883a 	add	r3,r3,r3
 200a710:	18c7883a 	add	r3,r3,r3
 200a714:	10c5883a 	add	r2,r2,r3
 200a718:	10c00017 	ldw	r3,0(r2)
 200a71c:	28c00015 	stw	r3,0(r5)
 200a720:	11400015 	stw	r5,0(r2)
 200a724:	f800283a 	ret

0200a728 <__multadd>:
 200a728:	defff704 	addi	sp,sp,-36
 200a72c:	dc800215 	stw	r18,8(sp)
 200a730:	2c800417 	ldw	r18,16(r5)
 200a734:	dd800615 	stw	r22,24(sp)
 200a738:	dd400515 	stw	r21,20(sp)
 200a73c:	dd000415 	stw	r20,16(sp)
 200a740:	dcc00315 	stw	r19,12(sp)
 200a744:	dc400115 	stw	r17,4(sp)
 200a748:	dc000015 	stw	r16,0(sp)
 200a74c:	dfc00815 	stw	ra,32(sp)
 200a750:	ddc00715 	stw	r23,28(sp)
 200a754:	2827883a 	mov	r19,r5
 200a758:	2029883a 	mov	r20,r4
 200a75c:	3023883a 	mov	r17,r6
 200a760:	3821883a 	mov	r16,r7
 200a764:	2d400504 	addi	r21,r5,20
 200a768:	002d883a 	mov	r22,zero
 200a76c:	adc00017 	ldw	r23,0(r21)
 200a770:	880b883a 	mov	r5,r17
 200a774:	ad400104 	addi	r21,r21,4
 200a778:	b93fffcc 	andi	r4,r23,65535
 200a77c:	20019440 	call	2001944 <__mulsi3>
 200a780:	b808d43a 	srli	r4,r23,16
 200a784:	880b883a 	mov	r5,r17
 200a788:	1421883a 	add	r16,r2,r16
 200a78c:	20019440 	call	2001944 <__mulsi3>
 200a790:	800ed43a 	srli	r7,r16,16
 200a794:	80ffffcc 	andi	r3,r16,65535
 200a798:	b5800044 	addi	r22,r22,1
 200a79c:	11c5883a 	add	r2,r2,r7
 200a7a0:	100e943a 	slli	r7,r2,16
 200a7a4:	1020d43a 	srli	r16,r2,16
 200a7a8:	38c7883a 	add	r3,r7,r3
 200a7ac:	a8ffff15 	stw	r3,-4(r21)
 200a7b0:	b4bfee16 	blt	r22,r18,200a76c <__multadd+0x44>
 200a7b4:	80000926 	beq	r16,zero,200a7dc <__multadd+0xb4>
 200a7b8:	98800217 	ldw	r2,8(r19)
 200a7bc:	9080130e 	bge	r18,r2,200a80c <__multadd+0xe4>
 200a7c0:	90800144 	addi	r2,r18,5
 200a7c4:	1085883a 	add	r2,r2,r2
 200a7c8:	1085883a 	add	r2,r2,r2
 200a7cc:	9885883a 	add	r2,r19,r2
 200a7d0:	14000015 	stw	r16,0(r2)
 200a7d4:	94800044 	addi	r18,r18,1
 200a7d8:	9c800415 	stw	r18,16(r19)
 200a7dc:	9805883a 	mov	r2,r19
 200a7e0:	dfc00817 	ldw	ra,32(sp)
 200a7e4:	ddc00717 	ldw	r23,28(sp)
 200a7e8:	dd800617 	ldw	r22,24(sp)
 200a7ec:	dd400517 	ldw	r21,20(sp)
 200a7f0:	dd000417 	ldw	r20,16(sp)
 200a7f4:	dcc00317 	ldw	r19,12(sp)
 200a7f8:	dc800217 	ldw	r18,8(sp)
 200a7fc:	dc400117 	ldw	r17,4(sp)
 200a800:	dc000017 	ldw	r16,0(sp)
 200a804:	dec00904 	addi	sp,sp,36
 200a808:	f800283a 	ret
 200a80c:	99400117 	ldw	r5,4(r19)
 200a810:	a009883a 	mov	r4,r20
 200a814:	29400044 	addi	r5,r5,1
 200a818:	200a6580 	call	200a658 <_Balloc>
 200a81c:	99800417 	ldw	r6,16(r19)
 200a820:	99400304 	addi	r5,r19,12
 200a824:	11000304 	addi	r4,r2,12
 200a828:	31800084 	addi	r6,r6,2
 200a82c:	318d883a 	add	r6,r6,r6
 200a830:	318d883a 	add	r6,r6,r6
 200a834:	1023883a 	mov	r17,r2
 200a838:	200a28c0 	call	200a28c <memcpy>
 200a83c:	98000a26 	beq	r19,zero,200a868 <__multadd+0x140>
 200a840:	98c00117 	ldw	r3,4(r19)
 200a844:	a0801317 	ldw	r2,76(r20)
 200a848:	18c7883a 	add	r3,r3,r3
 200a84c:	18c7883a 	add	r3,r3,r3
 200a850:	10c5883a 	add	r2,r2,r3
 200a854:	10c00017 	ldw	r3,0(r2)
 200a858:	98c00015 	stw	r3,0(r19)
 200a85c:	14c00015 	stw	r19,0(r2)
 200a860:	8827883a 	mov	r19,r17
 200a864:	003fd606 	br	200a7c0 <__multadd+0x98>
 200a868:	8827883a 	mov	r19,r17
 200a86c:	003fd406 	br	200a7c0 <__multadd+0x98>

0200a870 <__s2b>:
 200a870:	defff904 	addi	sp,sp,-28
 200a874:	dc400115 	stw	r17,4(sp)
 200a878:	dc000015 	stw	r16,0(sp)
 200a87c:	2023883a 	mov	r17,r4
 200a880:	2821883a 	mov	r16,r5
 200a884:	39000204 	addi	r4,r7,8
 200a888:	01400244 	movi	r5,9
 200a88c:	dcc00315 	stw	r19,12(sp)
 200a890:	dc800215 	stw	r18,8(sp)
 200a894:	dfc00615 	stw	ra,24(sp)
 200a898:	dd400515 	stw	r21,20(sp)
 200a89c:	dd000415 	stw	r20,16(sp)
 200a8a0:	3825883a 	mov	r18,r7
 200a8a4:	3027883a 	mov	r19,r6
 200a8a8:	20044d40 	call	20044d4 <__divsi3>
 200a8ac:	00c00044 	movi	r3,1
 200a8b0:	000b883a 	mov	r5,zero
 200a8b4:	1880030e 	bge	r3,r2,200a8c4 <__s2b+0x54>
 200a8b8:	18c7883a 	add	r3,r3,r3
 200a8bc:	29400044 	addi	r5,r5,1
 200a8c0:	18bffd16 	blt	r3,r2,200a8b8 <__s2b+0x48>
 200a8c4:	8809883a 	mov	r4,r17
 200a8c8:	200a6580 	call	200a658 <_Balloc>
 200a8cc:	d8c00717 	ldw	r3,28(sp)
 200a8d0:	10c00515 	stw	r3,20(r2)
 200a8d4:	00c00044 	movi	r3,1
 200a8d8:	10c00415 	stw	r3,16(r2)
 200a8dc:	00c00244 	movi	r3,9
 200a8e0:	1cc0210e 	bge	r3,r19,200a968 <__s2b+0xf8>
 200a8e4:	80eb883a 	add	r21,r16,r3
 200a8e8:	a829883a 	mov	r20,r21
 200a8ec:	84e1883a 	add	r16,r16,r19
 200a8f0:	a1c00007 	ldb	r7,0(r20)
 200a8f4:	01800284 	movi	r6,10
 200a8f8:	a5000044 	addi	r20,r20,1
 200a8fc:	100b883a 	mov	r5,r2
 200a900:	39fff404 	addi	r7,r7,-48
 200a904:	8809883a 	mov	r4,r17
 200a908:	200a7280 	call	200a728 <__multadd>
 200a90c:	a43ff81e 	bne	r20,r16,200a8f0 <__s2b+0x80>
 200a910:	ace1883a 	add	r16,r21,r19
 200a914:	843ffe04 	addi	r16,r16,-8
 200a918:	9c800a0e 	bge	r19,r18,200a944 <__s2b+0xd4>
 200a91c:	94e5c83a 	sub	r18,r18,r19
 200a920:	84a5883a 	add	r18,r16,r18
 200a924:	81c00007 	ldb	r7,0(r16)
 200a928:	01800284 	movi	r6,10
 200a92c:	84000044 	addi	r16,r16,1
 200a930:	100b883a 	mov	r5,r2
 200a934:	39fff404 	addi	r7,r7,-48
 200a938:	8809883a 	mov	r4,r17
 200a93c:	200a7280 	call	200a728 <__multadd>
 200a940:	84bff81e 	bne	r16,r18,200a924 <__s2b+0xb4>
 200a944:	dfc00617 	ldw	ra,24(sp)
 200a948:	dd400517 	ldw	r21,20(sp)
 200a94c:	dd000417 	ldw	r20,16(sp)
 200a950:	dcc00317 	ldw	r19,12(sp)
 200a954:	dc800217 	ldw	r18,8(sp)
 200a958:	dc400117 	ldw	r17,4(sp)
 200a95c:	dc000017 	ldw	r16,0(sp)
 200a960:	dec00704 	addi	sp,sp,28
 200a964:	f800283a 	ret
 200a968:	84000284 	addi	r16,r16,10
 200a96c:	1827883a 	mov	r19,r3
 200a970:	003fe906 	br	200a918 <__s2b+0xa8>

0200a974 <__hi0bits>:
 200a974:	20bfffec 	andhi	r2,r4,65535
 200a978:	1000141e 	bne	r2,zero,200a9cc <__hi0bits+0x58>
 200a97c:	2008943a 	slli	r4,r4,16
 200a980:	00800404 	movi	r2,16
 200a984:	20ffc02c 	andhi	r3,r4,65280
 200a988:	1800021e 	bne	r3,zero,200a994 <__hi0bits+0x20>
 200a98c:	2008923a 	slli	r4,r4,8
 200a990:	10800204 	addi	r2,r2,8
 200a994:	20fc002c 	andhi	r3,r4,61440
 200a998:	1800021e 	bne	r3,zero,200a9a4 <__hi0bits+0x30>
 200a99c:	2008913a 	slli	r4,r4,4
 200a9a0:	10800104 	addi	r2,r2,4
 200a9a4:	20f0002c 	andhi	r3,r4,49152
 200a9a8:	1800031e 	bne	r3,zero,200a9b8 <__hi0bits+0x44>
 200a9ac:	2109883a 	add	r4,r4,r4
 200a9b0:	10800084 	addi	r2,r2,2
 200a9b4:	2109883a 	add	r4,r4,r4
 200a9b8:	20000316 	blt	r4,zero,200a9c8 <__hi0bits+0x54>
 200a9bc:	2110002c 	andhi	r4,r4,16384
 200a9c0:	2000041e 	bne	r4,zero,200a9d4 <__hi0bits+0x60>
 200a9c4:	00800804 	movi	r2,32
 200a9c8:	f800283a 	ret
 200a9cc:	0005883a 	mov	r2,zero
 200a9d0:	003fec06 	br	200a984 <__hi0bits+0x10>
 200a9d4:	10800044 	addi	r2,r2,1
 200a9d8:	f800283a 	ret

0200a9dc <__lo0bits>:
 200a9dc:	20c00017 	ldw	r3,0(r4)
 200a9e0:	188001cc 	andi	r2,r3,7
 200a9e4:	10000826 	beq	r2,zero,200aa08 <__lo0bits+0x2c>
 200a9e8:	1880004c 	andi	r2,r3,1
 200a9ec:	1000211e 	bne	r2,zero,200aa74 <__lo0bits+0x98>
 200a9f0:	1880008c 	andi	r2,r3,2
 200a9f4:	1000211e 	bne	r2,zero,200aa7c <__lo0bits+0xa0>
 200a9f8:	1806d0ba 	srli	r3,r3,2
 200a9fc:	00800084 	movi	r2,2
 200aa00:	20c00015 	stw	r3,0(r4)
 200aa04:	f800283a 	ret
 200aa08:	18bfffcc 	andi	r2,r3,65535
 200aa0c:	10001326 	beq	r2,zero,200aa5c <__lo0bits+0x80>
 200aa10:	0005883a 	mov	r2,zero
 200aa14:	19403fcc 	andi	r5,r3,255
 200aa18:	2800021e 	bne	r5,zero,200aa24 <__lo0bits+0x48>
 200aa1c:	1806d23a 	srli	r3,r3,8
 200aa20:	10800204 	addi	r2,r2,8
 200aa24:	194003cc 	andi	r5,r3,15
 200aa28:	2800021e 	bne	r5,zero,200aa34 <__lo0bits+0x58>
 200aa2c:	1806d13a 	srli	r3,r3,4
 200aa30:	10800104 	addi	r2,r2,4
 200aa34:	194000cc 	andi	r5,r3,3
 200aa38:	2800021e 	bne	r5,zero,200aa44 <__lo0bits+0x68>
 200aa3c:	1806d0ba 	srli	r3,r3,2
 200aa40:	10800084 	addi	r2,r2,2
 200aa44:	1940004c 	andi	r5,r3,1
 200aa48:	2800081e 	bne	r5,zero,200aa6c <__lo0bits+0x90>
 200aa4c:	1806d07a 	srli	r3,r3,1
 200aa50:	1800051e 	bne	r3,zero,200aa68 <__lo0bits+0x8c>
 200aa54:	00800804 	movi	r2,32
 200aa58:	f800283a 	ret
 200aa5c:	1806d43a 	srli	r3,r3,16
 200aa60:	00800404 	movi	r2,16
 200aa64:	003feb06 	br	200aa14 <__lo0bits+0x38>
 200aa68:	10800044 	addi	r2,r2,1
 200aa6c:	20c00015 	stw	r3,0(r4)
 200aa70:	f800283a 	ret
 200aa74:	0005883a 	mov	r2,zero
 200aa78:	f800283a 	ret
 200aa7c:	1806d07a 	srli	r3,r3,1
 200aa80:	00800044 	movi	r2,1
 200aa84:	20c00015 	stw	r3,0(r4)
 200aa88:	f800283a 	ret

0200aa8c <__i2b>:
 200aa8c:	defffd04 	addi	sp,sp,-12
 200aa90:	dc000015 	stw	r16,0(sp)
 200aa94:	04000044 	movi	r16,1
 200aa98:	dc400115 	stw	r17,4(sp)
 200aa9c:	2823883a 	mov	r17,r5
 200aaa0:	800b883a 	mov	r5,r16
 200aaa4:	dfc00215 	stw	ra,8(sp)
 200aaa8:	200a6580 	call	200a658 <_Balloc>
 200aaac:	14400515 	stw	r17,20(r2)
 200aab0:	14000415 	stw	r16,16(r2)
 200aab4:	dfc00217 	ldw	ra,8(sp)
 200aab8:	dc400117 	ldw	r17,4(sp)
 200aabc:	dc000017 	ldw	r16,0(sp)
 200aac0:	dec00304 	addi	sp,sp,12
 200aac4:	f800283a 	ret

0200aac8 <__multiply>:
 200aac8:	deffef04 	addi	sp,sp,-68
 200aacc:	dc400815 	stw	r17,32(sp)
 200aad0:	dc000715 	stw	r16,28(sp)
 200aad4:	34400417 	ldw	r17,16(r6)
 200aad8:	2c000417 	ldw	r16,16(r5)
 200aadc:	dd800d15 	stw	r22,52(sp)
 200aae0:	dc800915 	stw	r18,36(sp)
 200aae4:	dfc01015 	stw	ra,64(sp)
 200aae8:	df000f15 	stw	fp,60(sp)
 200aaec:	ddc00e15 	stw	r23,56(sp)
 200aaf0:	dd400c15 	stw	r21,48(sp)
 200aaf4:	dd000b15 	stw	r20,44(sp)
 200aaf8:	dcc00a15 	stw	r19,40(sp)
 200aafc:	2825883a 	mov	r18,r5
 200ab00:	302d883a 	mov	r22,r6
 200ab04:	8440050e 	bge	r16,r17,200ab1c <__multiply+0x54>
 200ab08:	8007883a 	mov	r3,r16
 200ab0c:	3025883a 	mov	r18,r6
 200ab10:	8821883a 	mov	r16,r17
 200ab14:	282d883a 	mov	r22,r5
 200ab18:	1823883a 	mov	r17,r3
 200ab1c:	90800217 	ldw	r2,8(r18)
 200ab20:	8447883a 	add	r3,r16,r17
 200ab24:	d8c00215 	stw	r3,8(sp)
 200ab28:	91400117 	ldw	r5,4(r18)
 200ab2c:	10c0010e 	bge	r2,r3,200ab34 <__multiply+0x6c>
 200ab30:	29400044 	addi	r5,r5,1
 200ab34:	200a6580 	call	200a658 <_Balloc>
 200ab38:	d8c00217 	ldw	r3,8(sp)
 200ab3c:	d8800615 	stw	r2,24(sp)
 200ab40:	18eb883a 	add	r21,r3,r3
 200ab44:	ad6b883a 	add	r21,r21,r21
 200ab48:	10c00504 	addi	r3,r2,20
 200ab4c:	1d6b883a 	add	r21,r3,r21
 200ab50:	d8c00115 	stw	r3,4(sp)
 200ab54:	dd400315 	stw	r21,12(sp)
 200ab58:	1805883a 	mov	r2,r3
 200ab5c:	1d40042e 	bgeu	r3,r21,200ab70 <__multiply+0xa8>
 200ab60:	d8c00317 	ldw	r3,12(sp)
 200ab64:	10000015 	stw	zero,0(r2)
 200ab68:	10800104 	addi	r2,r2,4
 200ab6c:	10fffc36 	bltu	r2,r3,200ab60 <__multiply+0x98>
 200ab70:	8c63883a 	add	r17,r17,r17
 200ab74:	b5800504 	addi	r22,r22,20
 200ab78:	8c63883a 	add	r17,r17,r17
 200ab7c:	94800504 	addi	r18,r18,20
 200ab80:	8421883a 	add	r16,r16,r16
 200ab84:	b463883a 	add	r17,r22,r17
 200ab88:	8421883a 	add	r16,r16,r16
 200ab8c:	dd800015 	stw	r22,0(sp)
 200ab90:	dc800415 	stw	r18,16(sp)
 200ab94:	dc400515 	stw	r17,20(sp)
 200ab98:	9429883a 	add	r20,r18,r16
 200ab9c:	b4404f2e 	bgeu	r22,r17,200acdc <__multiply+0x214>
 200aba0:	d8c00017 	ldw	r3,0(sp)
 200aba4:	1c800017 	ldw	r18,0(r3)
 200aba8:	947fffcc 	andi	r17,r18,65535
 200abac:	88001e26 	beq	r17,zero,200ac28 <__multiply+0x160>
 200abb0:	dd800117 	ldw	r22,4(sp)
 200abb4:	dd400417 	ldw	r21,16(sp)
 200abb8:	0027883a 	mov	r19,zero
 200abbc:	ac800017 	ldw	r18,0(r21)
 200abc0:	b4000017 	ldw	r16,0(r22)
 200abc4:	880b883a 	mov	r5,r17
 200abc8:	913fffcc 	andi	r4,r18,65535
 200abcc:	20019440 	call	2001944 <__mulsi3>
 200abd0:	9008d43a 	srli	r4,r18,16
 200abd4:	84bfffcc 	andi	r18,r16,65535
 200abd8:	1485883a 	add	r2,r2,r18
 200abdc:	14e5883a 	add	r18,r2,r19
 200abe0:	8020d43a 	srli	r16,r16,16
 200abe4:	9026d43a 	srli	r19,r18,16
 200abe8:	880b883a 	mov	r5,r17
 200abec:	20019440 	call	2001944 <__mulsi3>
 200abf0:	1405883a 	add	r2,r2,r16
 200abf4:	14e1883a 	add	r16,r2,r19
 200abf8:	90ffffcc 	andi	r3,r18,65535
 200abfc:	8024943a 	slli	r18,r16,16
 200ac00:	ad400104 	addi	r21,r21,4
 200ac04:	b005883a 	mov	r2,r22
 200ac08:	90c6b03a 	or	r3,r18,r3
 200ac0c:	b0c00015 	stw	r3,0(r22)
 200ac10:	8026d43a 	srli	r19,r16,16
 200ac14:	b5800104 	addi	r22,r22,4
 200ac18:	ad3fe836 	bltu	r21,r20,200abbc <__multiply+0xf4>
 200ac1c:	d8c00017 	ldw	r3,0(sp)
 200ac20:	14c00115 	stw	r19,4(r2)
 200ac24:	1c800017 	ldw	r18,0(r3)
 200ac28:	9024d43a 	srli	r18,r18,16
 200ac2c:	90002226 	beq	r18,zero,200acb8 <__multiply+0x1f0>
 200ac30:	d8c00117 	ldw	r3,4(sp)
 200ac34:	dd800417 	ldw	r22,16(sp)
 200ac38:	002f883a 	mov	r23,zero
 200ac3c:	1f000017 	ldw	fp,0(r3)
 200ac40:	1823883a 	mov	r17,r3
 200ac44:	182b883a 	mov	r21,r3
 200ac48:	e021883a 	mov	r16,fp
 200ac4c:	00000106 	br	200ac54 <__multiply+0x18c>
 200ac50:	982b883a 	mov	r21,r19
 200ac54:	b100000b 	ldhu	r4,0(r22)
 200ac58:	8020d43a 	srli	r16,r16,16
 200ac5c:	900b883a 	mov	r5,r18
 200ac60:	20019440 	call	2001944 <__mulsi3>
 200ac64:	1405883a 	add	r2,r2,r16
 200ac68:	15ef883a 	add	r23,r2,r23
 200ac6c:	b804943a 	slli	r2,r23,16
 200ac70:	e0ffffcc 	andi	r3,fp,65535
 200ac74:	8c400104 	addi	r17,r17,4
 200ac78:	10c6b03a 	or	r3,r2,r3
 200ac7c:	88ffff15 	stw	r3,-4(r17)
 200ac80:	b5800104 	addi	r22,r22,4
 200ac84:	b13fff17 	ldw	r4,-4(r22)
 200ac88:	acc00104 	addi	r19,r21,4
 200ac8c:	900b883a 	mov	r5,r18
 200ac90:	2008d43a 	srli	r4,r4,16
 200ac94:	9c000017 	ldw	r16,0(r19)
 200ac98:	20019440 	call	2001944 <__mulsi3>
 200ac9c:	b806d43a 	srli	r3,r23,16
 200aca0:	813fffcc 	andi	r4,r16,65535
 200aca4:	1105883a 	add	r2,r2,r4
 200aca8:	10f9883a 	add	fp,r2,r3
 200acac:	e02ed43a 	srli	r23,fp,16
 200acb0:	b53fe736 	bltu	r22,r20,200ac50 <__multiply+0x188>
 200acb4:	af000115 	stw	fp,4(r21)
 200acb8:	d8c00017 	ldw	r3,0(sp)
 200acbc:	d9000517 	ldw	r4,20(sp)
 200acc0:	18c00104 	addi	r3,r3,4
 200acc4:	d8c00015 	stw	r3,0(sp)
 200acc8:	d8c00117 	ldw	r3,4(sp)
 200accc:	18c00104 	addi	r3,r3,4
 200acd0:	d8c00115 	stw	r3,4(sp)
 200acd4:	d8c00017 	ldw	r3,0(sp)
 200acd8:	193fb136 	bltu	r3,r4,200aba0 <__multiply+0xd8>
 200acdc:	d8c00217 	ldw	r3,8(sp)
 200ace0:	00c00c0e 	bge	zero,r3,200ad14 <__multiply+0x24c>
 200ace4:	d8c00317 	ldw	r3,12(sp)
 200ace8:	18bfff17 	ldw	r2,-4(r3)
 200acec:	1d7fff04 	addi	r21,r3,-4
 200acf0:	10000326 	beq	r2,zero,200ad00 <__multiply+0x238>
 200acf4:	00000706 	br	200ad14 <__multiply+0x24c>
 200acf8:	a8800017 	ldw	r2,0(r21)
 200acfc:	1000051e 	bne	r2,zero,200ad14 <__multiply+0x24c>
 200ad00:	d8c00217 	ldw	r3,8(sp)
 200ad04:	ad7fff04 	addi	r21,r21,-4
 200ad08:	18ffffc4 	addi	r3,r3,-1
 200ad0c:	d8c00215 	stw	r3,8(sp)
 200ad10:	183ff91e 	bne	r3,zero,200acf8 <__multiply+0x230>
 200ad14:	d8c00617 	ldw	r3,24(sp)
 200ad18:	d9000217 	ldw	r4,8(sp)
 200ad1c:	1805883a 	mov	r2,r3
 200ad20:	19000415 	stw	r4,16(r3)
 200ad24:	dfc01017 	ldw	ra,64(sp)
 200ad28:	df000f17 	ldw	fp,60(sp)
 200ad2c:	ddc00e17 	ldw	r23,56(sp)
 200ad30:	dd800d17 	ldw	r22,52(sp)
 200ad34:	dd400c17 	ldw	r21,48(sp)
 200ad38:	dd000b17 	ldw	r20,44(sp)
 200ad3c:	dcc00a17 	ldw	r19,40(sp)
 200ad40:	dc800917 	ldw	r18,36(sp)
 200ad44:	dc400817 	ldw	r17,32(sp)
 200ad48:	dc000717 	ldw	r16,28(sp)
 200ad4c:	dec01104 	addi	sp,sp,68
 200ad50:	f800283a 	ret

0200ad54 <__pow5mult>:
 200ad54:	defffa04 	addi	sp,sp,-24
 200ad58:	dcc00315 	stw	r19,12(sp)
 200ad5c:	dc000015 	stw	r16,0(sp)
 200ad60:	dfc00515 	stw	ra,20(sp)
 200ad64:	dd000415 	stw	r20,16(sp)
 200ad68:	dc800215 	stw	r18,8(sp)
 200ad6c:	dc400115 	stw	r17,4(sp)
 200ad70:	308000cc 	andi	r2,r6,3
 200ad74:	3021883a 	mov	r16,r6
 200ad78:	2027883a 	mov	r19,r4
 200ad7c:	10002f1e 	bne	r2,zero,200ae3c <__pow5mult+0xe8>
 200ad80:	2825883a 	mov	r18,r5
 200ad84:	8021d0ba 	srai	r16,r16,2
 200ad88:	80001a26 	beq	r16,zero,200adf4 <__pow5mult+0xa0>
 200ad8c:	9c401217 	ldw	r17,72(r19)
 200ad90:	8800061e 	bne	r17,zero,200adac <__pow5mult+0x58>
 200ad94:	00003406 	br	200ae68 <__pow5mult+0x114>
 200ad98:	8021d07a 	srai	r16,r16,1
 200ad9c:	80001526 	beq	r16,zero,200adf4 <__pow5mult+0xa0>
 200ada0:	88800017 	ldw	r2,0(r17)
 200ada4:	10001c26 	beq	r2,zero,200ae18 <__pow5mult+0xc4>
 200ada8:	1023883a 	mov	r17,r2
 200adac:	8080004c 	andi	r2,r16,1
 200adb0:	103ff926 	beq	r2,zero,200ad98 <__pow5mult+0x44>
 200adb4:	880d883a 	mov	r6,r17
 200adb8:	900b883a 	mov	r5,r18
 200adbc:	9809883a 	mov	r4,r19
 200adc0:	200aac80 	call	200aac8 <__multiply>
 200adc4:	90001b26 	beq	r18,zero,200ae34 <__pow5mult+0xe0>
 200adc8:	91000117 	ldw	r4,4(r18)
 200adcc:	98c01317 	ldw	r3,76(r19)
 200add0:	8021d07a 	srai	r16,r16,1
 200add4:	2109883a 	add	r4,r4,r4
 200add8:	2109883a 	add	r4,r4,r4
 200addc:	1907883a 	add	r3,r3,r4
 200ade0:	19000017 	ldw	r4,0(r3)
 200ade4:	91000015 	stw	r4,0(r18)
 200ade8:	1c800015 	stw	r18,0(r3)
 200adec:	1025883a 	mov	r18,r2
 200adf0:	803feb1e 	bne	r16,zero,200ada0 <__pow5mult+0x4c>
 200adf4:	9005883a 	mov	r2,r18
 200adf8:	dfc00517 	ldw	ra,20(sp)
 200adfc:	dd000417 	ldw	r20,16(sp)
 200ae00:	dcc00317 	ldw	r19,12(sp)
 200ae04:	dc800217 	ldw	r18,8(sp)
 200ae08:	dc400117 	ldw	r17,4(sp)
 200ae0c:	dc000017 	ldw	r16,0(sp)
 200ae10:	dec00604 	addi	sp,sp,24
 200ae14:	f800283a 	ret
 200ae18:	880d883a 	mov	r6,r17
 200ae1c:	880b883a 	mov	r5,r17
 200ae20:	9809883a 	mov	r4,r19
 200ae24:	200aac80 	call	200aac8 <__multiply>
 200ae28:	88800015 	stw	r2,0(r17)
 200ae2c:	10000015 	stw	zero,0(r2)
 200ae30:	003fdd06 	br	200ada8 <__pow5mult+0x54>
 200ae34:	1025883a 	mov	r18,r2
 200ae38:	003fd706 	br	200ad98 <__pow5mult+0x44>
 200ae3c:	10bfffc4 	addi	r2,r2,-1
 200ae40:	1085883a 	add	r2,r2,r2
 200ae44:	00c080b4 	movhi	r3,514
 200ae48:	18edb304 	addi	r3,r3,-18740
 200ae4c:	1085883a 	add	r2,r2,r2
 200ae50:	1885883a 	add	r2,r3,r2
 200ae54:	11800017 	ldw	r6,0(r2)
 200ae58:	000f883a 	mov	r7,zero
 200ae5c:	200a7280 	call	200a728 <__multadd>
 200ae60:	1025883a 	mov	r18,r2
 200ae64:	003fc706 	br	200ad84 <__pow5mult+0x30>
 200ae68:	05000044 	movi	r20,1
 200ae6c:	a00b883a 	mov	r5,r20
 200ae70:	9809883a 	mov	r4,r19
 200ae74:	200a6580 	call	200a658 <_Balloc>
 200ae78:	1023883a 	mov	r17,r2
 200ae7c:	00809c44 	movi	r2,625
 200ae80:	88800515 	stw	r2,20(r17)
 200ae84:	8d000415 	stw	r20,16(r17)
 200ae88:	9c401215 	stw	r17,72(r19)
 200ae8c:	88000015 	stw	zero,0(r17)
 200ae90:	003fc606 	br	200adac <__pow5mult+0x58>

0200ae94 <__lshift>:
 200ae94:	defff904 	addi	sp,sp,-28
 200ae98:	dd400515 	stw	r21,20(sp)
 200ae9c:	dcc00315 	stw	r19,12(sp)
 200aea0:	302bd17a 	srai	r21,r6,5
 200aea4:	2cc00417 	ldw	r19,16(r5)
 200aea8:	28800217 	ldw	r2,8(r5)
 200aeac:	dd000415 	stw	r20,16(sp)
 200aeb0:	ace7883a 	add	r19,r21,r19
 200aeb4:	dc800215 	stw	r18,8(sp)
 200aeb8:	dc400115 	stw	r17,4(sp)
 200aebc:	dc000015 	stw	r16,0(sp)
 200aec0:	dfc00615 	stw	ra,24(sp)
 200aec4:	9c000044 	addi	r16,r19,1
 200aec8:	2823883a 	mov	r17,r5
 200aecc:	3029883a 	mov	r20,r6
 200aed0:	2025883a 	mov	r18,r4
 200aed4:	29400117 	ldw	r5,4(r5)
 200aed8:	1400030e 	bge	r2,r16,200aee8 <__lshift+0x54>
 200aedc:	1085883a 	add	r2,r2,r2
 200aee0:	29400044 	addi	r5,r5,1
 200aee4:	143ffd16 	blt	r2,r16,200aedc <__lshift+0x48>
 200aee8:	9009883a 	mov	r4,r18
 200aeec:	200a6580 	call	200a658 <_Balloc>
 200aef0:	10c00504 	addi	r3,r2,20
 200aef4:	0540070e 	bge	zero,r21,200af14 <__lshift+0x80>
 200aef8:	ad6b883a 	add	r21,r21,r21
 200aefc:	ad6b883a 	add	r21,r21,r21
 200af00:	1809883a 	mov	r4,r3
 200af04:	1d47883a 	add	r3,r3,r21
 200af08:	20000015 	stw	zero,0(r4)
 200af0c:	21000104 	addi	r4,r4,4
 200af10:	193ffd1e 	bne	r3,r4,200af08 <__lshift+0x74>
 200af14:	8a000417 	ldw	r8,16(r17)
 200af18:	89000504 	addi	r4,r17,20
 200af1c:	a18007cc 	andi	r6,r20,31
 200af20:	4211883a 	add	r8,r8,r8
 200af24:	4211883a 	add	r8,r8,r8
 200af28:	2211883a 	add	r8,r4,r8
 200af2c:	30002326 	beq	r6,zero,200afbc <__lshift+0x128>
 200af30:	02400804 	movi	r9,32
 200af34:	4993c83a 	sub	r9,r9,r6
 200af38:	000b883a 	mov	r5,zero
 200af3c:	21c00017 	ldw	r7,0(r4)
 200af40:	1815883a 	mov	r10,r3
 200af44:	18c00104 	addi	r3,r3,4
 200af48:	398e983a 	sll	r7,r7,r6
 200af4c:	21000104 	addi	r4,r4,4
 200af50:	394ab03a 	or	r5,r7,r5
 200af54:	197fff15 	stw	r5,-4(r3)
 200af58:	217fff17 	ldw	r5,-4(r4)
 200af5c:	2a4ad83a 	srl	r5,r5,r9
 200af60:	223ff636 	bltu	r4,r8,200af3c <__lshift+0xa8>
 200af64:	51400115 	stw	r5,4(r10)
 200af68:	28001a1e 	bne	r5,zero,200afd4 <__lshift+0x140>
 200af6c:	843fffc4 	addi	r16,r16,-1
 200af70:	14000415 	stw	r16,16(r2)
 200af74:	88000826 	beq	r17,zero,200af98 <__lshift+0x104>
 200af78:	89000117 	ldw	r4,4(r17)
 200af7c:	90c01317 	ldw	r3,76(r18)
 200af80:	2109883a 	add	r4,r4,r4
 200af84:	2109883a 	add	r4,r4,r4
 200af88:	1907883a 	add	r3,r3,r4
 200af8c:	19000017 	ldw	r4,0(r3)
 200af90:	89000015 	stw	r4,0(r17)
 200af94:	1c400015 	stw	r17,0(r3)
 200af98:	dfc00617 	ldw	ra,24(sp)
 200af9c:	dd400517 	ldw	r21,20(sp)
 200afa0:	dd000417 	ldw	r20,16(sp)
 200afa4:	dcc00317 	ldw	r19,12(sp)
 200afa8:	dc800217 	ldw	r18,8(sp)
 200afac:	dc400117 	ldw	r17,4(sp)
 200afb0:	dc000017 	ldw	r16,0(sp)
 200afb4:	dec00704 	addi	sp,sp,28
 200afb8:	f800283a 	ret
 200afbc:	21400017 	ldw	r5,0(r4)
 200afc0:	18c00104 	addi	r3,r3,4
 200afc4:	21000104 	addi	r4,r4,4
 200afc8:	197fff15 	stw	r5,-4(r3)
 200afcc:	223ffb36 	bltu	r4,r8,200afbc <__lshift+0x128>
 200afd0:	003fe606 	br	200af6c <__lshift+0xd8>
 200afd4:	9c000084 	addi	r16,r19,2
 200afd8:	003fe406 	br	200af6c <__lshift+0xd8>

0200afdc <__mcmp>:
 200afdc:	20800417 	ldw	r2,16(r4)
 200afe0:	28c00417 	ldw	r3,16(r5)
 200afe4:	10c5c83a 	sub	r2,r2,r3
 200afe8:	1000111e 	bne	r2,zero,200b030 <__mcmp+0x54>
 200afec:	18c7883a 	add	r3,r3,r3
 200aff0:	18c7883a 	add	r3,r3,r3
 200aff4:	21000504 	addi	r4,r4,20
 200aff8:	29400504 	addi	r5,r5,20
 200affc:	20c5883a 	add	r2,r4,r3
 200b000:	28cb883a 	add	r5,r5,r3
 200b004:	00000106 	br	200b00c <__mcmp+0x30>
 200b008:	20800a2e 	bgeu	r4,r2,200b034 <__mcmp+0x58>
 200b00c:	10bfff04 	addi	r2,r2,-4
 200b010:	297fff04 	addi	r5,r5,-4
 200b014:	11800017 	ldw	r6,0(r2)
 200b018:	28c00017 	ldw	r3,0(r5)
 200b01c:	30fffa26 	beq	r6,r3,200b008 <__mcmp+0x2c>
 200b020:	30c00236 	bltu	r6,r3,200b02c <__mcmp+0x50>
 200b024:	00800044 	movi	r2,1
 200b028:	f800283a 	ret
 200b02c:	00bfffc4 	movi	r2,-1
 200b030:	f800283a 	ret
 200b034:	0005883a 	mov	r2,zero
 200b038:	f800283a 	ret

0200b03c <__mdiff>:
 200b03c:	28c00417 	ldw	r3,16(r5)
 200b040:	30800417 	ldw	r2,16(r6)
 200b044:	defffa04 	addi	sp,sp,-24
 200b048:	dcc00315 	stw	r19,12(sp)
 200b04c:	dc800215 	stw	r18,8(sp)
 200b050:	dfc00515 	stw	ra,20(sp)
 200b054:	dd000415 	stw	r20,16(sp)
 200b058:	dc400115 	stw	r17,4(sp)
 200b05c:	dc000015 	stw	r16,0(sp)
 200b060:	1887c83a 	sub	r3,r3,r2
 200b064:	2825883a 	mov	r18,r5
 200b068:	3027883a 	mov	r19,r6
 200b06c:	1800141e 	bne	r3,zero,200b0c0 <__mdiff+0x84>
 200b070:	1085883a 	add	r2,r2,r2
 200b074:	1085883a 	add	r2,r2,r2
 200b078:	2a000504 	addi	r8,r5,20
 200b07c:	34000504 	addi	r16,r6,20
 200b080:	4087883a 	add	r3,r8,r2
 200b084:	8085883a 	add	r2,r16,r2
 200b088:	00000106 	br	200b090 <__mdiff+0x54>
 200b08c:	40c0592e 	bgeu	r8,r3,200b1f4 <__mdiff+0x1b8>
 200b090:	18ffff04 	addi	r3,r3,-4
 200b094:	10bfff04 	addi	r2,r2,-4
 200b098:	19c00017 	ldw	r7,0(r3)
 200b09c:	11400017 	ldw	r5,0(r2)
 200b0a0:	397ffa26 	beq	r7,r5,200b08c <__mdiff+0x50>
 200b0a4:	3940592e 	bgeu	r7,r5,200b20c <__mdiff+0x1d0>
 200b0a8:	9005883a 	mov	r2,r18
 200b0ac:	4023883a 	mov	r17,r8
 200b0b0:	9825883a 	mov	r18,r19
 200b0b4:	05000044 	movi	r20,1
 200b0b8:	1027883a 	mov	r19,r2
 200b0bc:	00000406 	br	200b0d0 <__mdiff+0x94>
 200b0c0:	18005616 	blt	r3,zero,200b21c <__mdiff+0x1e0>
 200b0c4:	34400504 	addi	r17,r6,20
 200b0c8:	2c000504 	addi	r16,r5,20
 200b0cc:	0029883a 	mov	r20,zero
 200b0d0:	91400117 	ldw	r5,4(r18)
 200b0d4:	200a6580 	call	200a658 <_Balloc>
 200b0d8:	92400417 	ldw	r9,16(r18)
 200b0dc:	9b000417 	ldw	r12,16(r19)
 200b0e0:	12c00504 	addi	r11,r2,20
 200b0e4:	4a51883a 	add	r8,r9,r9
 200b0e8:	6319883a 	add	r12,r12,r12
 200b0ec:	4211883a 	add	r8,r8,r8
 200b0f0:	6319883a 	add	r12,r12,r12
 200b0f4:	15000315 	stw	r20,12(r2)
 200b0f8:	8211883a 	add	r8,r16,r8
 200b0fc:	8b19883a 	add	r12,r17,r12
 200b100:	0007883a 	mov	r3,zero
 200b104:	81400017 	ldw	r5,0(r16)
 200b108:	89c00017 	ldw	r7,0(r17)
 200b10c:	59800104 	addi	r6,r11,4
 200b110:	293fffcc 	andi	r4,r5,65535
 200b114:	20c7883a 	add	r3,r4,r3
 200b118:	393fffcc 	andi	r4,r7,65535
 200b11c:	1909c83a 	sub	r4,r3,r4
 200b120:	280ad43a 	srli	r5,r5,16
 200b124:	380ed43a 	srli	r7,r7,16
 200b128:	2007d43a 	srai	r3,r4,16
 200b12c:	213fffcc 	andi	r4,r4,65535
 200b130:	29cbc83a 	sub	r5,r5,r7
 200b134:	28c7883a 	add	r3,r5,r3
 200b138:	180a943a 	slli	r5,r3,16
 200b13c:	8c400104 	addi	r17,r17,4
 200b140:	84000104 	addi	r16,r16,4
 200b144:	2908b03a 	or	r4,r5,r4
 200b148:	59000015 	stw	r4,0(r11)
 200b14c:	1807d43a 	srai	r3,r3,16
 200b150:	3015883a 	mov	r10,r6
 200b154:	3017883a 	mov	r11,r6
 200b158:	8b3fea36 	bltu	r17,r12,200b104 <__mdiff+0xc8>
 200b15c:	8200162e 	bgeu	r16,r8,200b1b8 <__mdiff+0x17c>
 200b160:	8017883a 	mov	r11,r16
 200b164:	59400017 	ldw	r5,0(r11)
 200b168:	31800104 	addi	r6,r6,4
 200b16c:	5ac00104 	addi	r11,r11,4
 200b170:	293fffcc 	andi	r4,r5,65535
 200b174:	20c7883a 	add	r3,r4,r3
 200b178:	280ed43a 	srli	r7,r5,16
 200b17c:	180bd43a 	srai	r5,r3,16
 200b180:	193fffcc 	andi	r4,r3,65535
 200b184:	3947883a 	add	r3,r7,r5
 200b188:	180a943a 	slli	r5,r3,16
 200b18c:	1807d43a 	srai	r3,r3,16
 200b190:	2908b03a 	or	r4,r5,r4
 200b194:	313fff15 	stw	r4,-4(r6)
 200b198:	5a3ff236 	bltu	r11,r8,200b164 <__mdiff+0x128>
 200b19c:	0406303a 	nor	r3,zero,r16
 200b1a0:	1a07883a 	add	r3,r3,r8
 200b1a4:	1806d0ba 	srli	r3,r3,2
 200b1a8:	18c00044 	addi	r3,r3,1
 200b1ac:	18c7883a 	add	r3,r3,r3
 200b1b0:	18c7883a 	add	r3,r3,r3
 200b1b4:	50d5883a 	add	r10,r10,r3
 200b1b8:	50ffff04 	addi	r3,r10,-4
 200b1bc:	2000041e 	bne	r4,zero,200b1d0 <__mdiff+0x194>
 200b1c0:	18ffff04 	addi	r3,r3,-4
 200b1c4:	19000017 	ldw	r4,0(r3)
 200b1c8:	4a7fffc4 	addi	r9,r9,-1
 200b1cc:	203ffc26 	beq	r4,zero,200b1c0 <__mdiff+0x184>
 200b1d0:	12400415 	stw	r9,16(r2)
 200b1d4:	dfc00517 	ldw	ra,20(sp)
 200b1d8:	dd000417 	ldw	r20,16(sp)
 200b1dc:	dcc00317 	ldw	r19,12(sp)
 200b1e0:	dc800217 	ldw	r18,8(sp)
 200b1e4:	dc400117 	ldw	r17,4(sp)
 200b1e8:	dc000017 	ldw	r16,0(sp)
 200b1ec:	dec00604 	addi	sp,sp,24
 200b1f0:	f800283a 	ret
 200b1f4:	000b883a 	mov	r5,zero
 200b1f8:	200a6580 	call	200a658 <_Balloc>
 200b1fc:	00c00044 	movi	r3,1
 200b200:	10c00415 	stw	r3,16(r2)
 200b204:	10000515 	stw	zero,20(r2)
 200b208:	003ff206 	br	200b1d4 <__mdiff+0x198>
 200b20c:	8023883a 	mov	r17,r16
 200b210:	0029883a 	mov	r20,zero
 200b214:	4021883a 	mov	r16,r8
 200b218:	003fad06 	br	200b0d0 <__mdiff+0x94>
 200b21c:	9005883a 	mov	r2,r18
 200b220:	94400504 	addi	r17,r18,20
 200b224:	9c000504 	addi	r16,r19,20
 200b228:	9825883a 	mov	r18,r19
 200b22c:	05000044 	movi	r20,1
 200b230:	1027883a 	mov	r19,r2
 200b234:	003fa606 	br	200b0d0 <__mdiff+0x94>

0200b238 <__ulp>:
 200b238:	295ffc2c 	andhi	r5,r5,32752
 200b23c:	00bf3034 	movhi	r2,64704
 200b240:	2887883a 	add	r3,r5,r2
 200b244:	00c0020e 	bge	zero,r3,200b250 <__ulp+0x18>
 200b248:	0005883a 	mov	r2,zero
 200b24c:	f800283a 	ret
 200b250:	00c7c83a 	sub	r3,zero,r3
 200b254:	1807d53a 	srai	r3,r3,20
 200b258:	008004c4 	movi	r2,19
 200b25c:	10c00b0e 	bge	r2,r3,200b28c <__ulp+0x54>
 200b260:	18bffb04 	addi	r2,r3,-20
 200b264:	01000784 	movi	r4,30
 200b268:	0007883a 	mov	r3,zero
 200b26c:	20800516 	blt	r4,r2,200b284 <__ulp+0x4c>
 200b270:	010007c4 	movi	r4,31
 200b274:	2089c83a 	sub	r4,r4,r2
 200b278:	00800044 	movi	r2,1
 200b27c:	1104983a 	sll	r2,r2,r4
 200b280:	f800283a 	ret
 200b284:	00800044 	movi	r2,1
 200b288:	f800283a 	ret
 200b28c:	01400234 	movhi	r5,8
 200b290:	28c7d83a 	sra	r3,r5,r3
 200b294:	0005883a 	mov	r2,zero
 200b298:	f800283a 	ret

0200b29c <__b2d>:
 200b29c:	defffa04 	addi	sp,sp,-24
 200b2a0:	dc000015 	stw	r16,0(sp)
 200b2a4:	24000417 	ldw	r16,16(r4)
 200b2a8:	dc400115 	stw	r17,4(sp)
 200b2ac:	24400504 	addi	r17,r4,20
 200b2b0:	8421883a 	add	r16,r16,r16
 200b2b4:	8421883a 	add	r16,r16,r16
 200b2b8:	8c21883a 	add	r16,r17,r16
 200b2bc:	dc800215 	stw	r18,8(sp)
 200b2c0:	84bfff17 	ldw	r18,-4(r16)
 200b2c4:	dd000415 	stw	r20,16(sp)
 200b2c8:	dcc00315 	stw	r19,12(sp)
 200b2cc:	9009883a 	mov	r4,r18
 200b2d0:	2829883a 	mov	r20,r5
 200b2d4:	dfc00515 	stw	ra,20(sp)
 200b2d8:	200a9740 	call	200a974 <__hi0bits>
 200b2dc:	00c00804 	movi	r3,32
 200b2e0:	1889c83a 	sub	r4,r3,r2
 200b2e4:	a1000015 	stw	r4,0(r20)
 200b2e8:	01000284 	movi	r4,10
 200b2ec:	84ffff04 	addi	r19,r16,-4
 200b2f0:	20801216 	blt	r4,r2,200b33c <__b2d+0xa0>
 200b2f4:	018002c4 	movi	r6,11
 200b2f8:	308dc83a 	sub	r6,r6,r2
 200b2fc:	9186d83a 	srl	r3,r18,r6
 200b300:	18cffc34 	orhi	r3,r3,16368
 200b304:	8cc0212e 	bgeu	r17,r19,200b38c <__b2d+0xf0>
 200b308:	813ffe17 	ldw	r4,-8(r16)
 200b30c:	218cd83a 	srl	r6,r4,r6
 200b310:	10800544 	addi	r2,r2,21
 200b314:	9084983a 	sll	r2,r18,r2
 200b318:	1184b03a 	or	r2,r2,r6
 200b31c:	dfc00517 	ldw	ra,20(sp)
 200b320:	dd000417 	ldw	r20,16(sp)
 200b324:	dcc00317 	ldw	r19,12(sp)
 200b328:	dc800217 	ldw	r18,8(sp)
 200b32c:	dc400117 	ldw	r17,4(sp)
 200b330:	dc000017 	ldw	r16,0(sp)
 200b334:	dec00604 	addi	sp,sp,24
 200b338:	f800283a 	ret
 200b33c:	8cc00f2e 	bgeu	r17,r19,200b37c <__b2d+0xe0>
 200b340:	117ffd44 	addi	r5,r2,-11
 200b344:	80bffe17 	ldw	r2,-8(r16)
 200b348:	28000e26 	beq	r5,zero,200b384 <__b2d+0xe8>
 200b34c:	1949c83a 	sub	r4,r3,r5
 200b350:	9164983a 	sll	r18,r18,r5
 200b354:	1106d83a 	srl	r3,r2,r4
 200b358:	81bffe04 	addi	r6,r16,-8
 200b35c:	948ffc34 	orhi	r18,r18,16368
 200b360:	90c6b03a 	or	r3,r18,r3
 200b364:	89800e2e 	bgeu	r17,r6,200b3a0 <__b2d+0x104>
 200b368:	81bffd17 	ldw	r6,-12(r16)
 200b36c:	1144983a 	sll	r2,r2,r5
 200b370:	310ad83a 	srl	r5,r6,r4
 200b374:	2884b03a 	or	r2,r5,r2
 200b378:	003fe806 	br	200b31c <__b2d+0x80>
 200b37c:	10bffd44 	addi	r2,r2,-11
 200b380:	1000041e 	bne	r2,zero,200b394 <__b2d+0xf8>
 200b384:	90cffc34 	orhi	r3,r18,16368
 200b388:	003fe406 	br	200b31c <__b2d+0x80>
 200b38c:	000d883a 	mov	r6,zero
 200b390:	003fdf06 	br	200b310 <__b2d+0x74>
 200b394:	90a4983a 	sll	r18,r18,r2
 200b398:	0005883a 	mov	r2,zero
 200b39c:	003ff906 	br	200b384 <__b2d+0xe8>
 200b3a0:	1144983a 	sll	r2,r2,r5
 200b3a4:	003fdd06 	br	200b31c <__b2d+0x80>

0200b3a8 <__d2b>:
 200b3a8:	defff804 	addi	sp,sp,-32
 200b3ac:	dc000215 	stw	r16,8(sp)
 200b3b0:	3021883a 	mov	r16,r6
 200b3b4:	dc400315 	stw	r17,12(sp)
 200b3b8:	8022907a 	slli	r17,r16,1
 200b3bc:	dd000615 	stw	r20,24(sp)
 200b3c0:	2829883a 	mov	r20,r5
 200b3c4:	01400044 	movi	r5,1
 200b3c8:	dcc00515 	stw	r19,20(sp)
 200b3cc:	dc800415 	stw	r18,16(sp)
 200b3d0:	dfc00715 	stw	ra,28(sp)
 200b3d4:	3825883a 	mov	r18,r7
 200b3d8:	8822d57a 	srli	r17,r17,21
 200b3dc:	200a6580 	call	200a658 <_Balloc>
 200b3e0:	1027883a 	mov	r19,r2
 200b3e4:	00800434 	movhi	r2,16
 200b3e8:	10bfffc4 	addi	r2,r2,-1
 200b3ec:	808c703a 	and	r6,r16,r2
 200b3f0:	88000126 	beq	r17,zero,200b3f8 <__d2b+0x50>
 200b3f4:	31800434 	orhi	r6,r6,16
 200b3f8:	d9800015 	stw	r6,0(sp)
 200b3fc:	a0002426 	beq	r20,zero,200b490 <__d2b+0xe8>
 200b400:	d9000104 	addi	r4,sp,4
 200b404:	dd000115 	stw	r20,4(sp)
 200b408:	200a9dc0 	call	200a9dc <__lo0bits>
 200b40c:	d8c00017 	ldw	r3,0(sp)
 200b410:	10002f1e 	bne	r2,zero,200b4d0 <__d2b+0x128>
 200b414:	d9000117 	ldw	r4,4(sp)
 200b418:	99000515 	stw	r4,20(r19)
 200b41c:	1821003a 	cmpeq	r16,r3,zero
 200b420:	01000084 	movi	r4,2
 200b424:	2421c83a 	sub	r16,r4,r16
 200b428:	98c00615 	stw	r3,24(r19)
 200b42c:	9c000415 	stw	r16,16(r19)
 200b430:	88001f1e 	bne	r17,zero,200b4b0 <__d2b+0x108>
 200b434:	10bef384 	addi	r2,r2,-1074
 200b438:	90800015 	stw	r2,0(r18)
 200b43c:	00900034 	movhi	r2,16384
 200b440:	10bfffc4 	addi	r2,r2,-1
 200b444:	8085883a 	add	r2,r16,r2
 200b448:	1085883a 	add	r2,r2,r2
 200b44c:	1085883a 	add	r2,r2,r2
 200b450:	9885883a 	add	r2,r19,r2
 200b454:	11000517 	ldw	r4,20(r2)
 200b458:	8020917a 	slli	r16,r16,5
 200b45c:	200a9740 	call	200a974 <__hi0bits>
 200b460:	d8c00817 	ldw	r3,32(sp)
 200b464:	8085c83a 	sub	r2,r16,r2
 200b468:	18800015 	stw	r2,0(r3)
 200b46c:	9805883a 	mov	r2,r19
 200b470:	dfc00717 	ldw	ra,28(sp)
 200b474:	dd000617 	ldw	r20,24(sp)
 200b478:	dcc00517 	ldw	r19,20(sp)
 200b47c:	dc800417 	ldw	r18,16(sp)
 200b480:	dc400317 	ldw	r17,12(sp)
 200b484:	dc000217 	ldw	r16,8(sp)
 200b488:	dec00804 	addi	sp,sp,32
 200b48c:	f800283a 	ret
 200b490:	d809883a 	mov	r4,sp
 200b494:	200a9dc0 	call	200a9dc <__lo0bits>
 200b498:	d8c00017 	ldw	r3,0(sp)
 200b49c:	04000044 	movi	r16,1
 200b4a0:	9c000415 	stw	r16,16(r19)
 200b4a4:	98c00515 	stw	r3,20(r19)
 200b4a8:	10800804 	addi	r2,r2,32
 200b4ac:	883fe126 	beq	r17,zero,200b434 <__d2b+0x8c>
 200b4b0:	00c00d44 	movi	r3,53
 200b4b4:	8c7ef344 	addi	r17,r17,-1075
 200b4b8:	88a3883a 	add	r17,r17,r2
 200b4bc:	1885c83a 	sub	r2,r3,r2
 200b4c0:	d8c00817 	ldw	r3,32(sp)
 200b4c4:	94400015 	stw	r17,0(r18)
 200b4c8:	18800015 	stw	r2,0(r3)
 200b4cc:	003fe706 	br	200b46c <__d2b+0xc4>
 200b4d0:	01000804 	movi	r4,32
 200b4d4:	2089c83a 	sub	r4,r4,r2
 200b4d8:	1908983a 	sll	r4,r3,r4
 200b4dc:	d9400117 	ldw	r5,4(sp)
 200b4e0:	1886d83a 	srl	r3,r3,r2
 200b4e4:	2148b03a 	or	r4,r4,r5
 200b4e8:	99000515 	stw	r4,20(r19)
 200b4ec:	d8c00015 	stw	r3,0(sp)
 200b4f0:	003fca06 	br	200b41c <__d2b+0x74>

0200b4f4 <__ratio>:
 200b4f4:	defff904 	addi	sp,sp,-28
 200b4f8:	dc400315 	stw	r17,12(sp)
 200b4fc:	2823883a 	mov	r17,r5
 200b500:	d9400104 	addi	r5,sp,4
 200b504:	dfc00615 	stw	ra,24(sp)
 200b508:	dcc00515 	stw	r19,20(sp)
 200b50c:	dc800415 	stw	r18,16(sp)
 200b510:	2027883a 	mov	r19,r4
 200b514:	dc000215 	stw	r16,8(sp)
 200b518:	200b29c0 	call	200b29c <__b2d>
 200b51c:	d80b883a 	mov	r5,sp
 200b520:	8809883a 	mov	r4,r17
 200b524:	1025883a 	mov	r18,r2
 200b528:	1821883a 	mov	r16,r3
 200b52c:	200b29c0 	call	200b29c <__b2d>
 200b530:	8a000417 	ldw	r8,16(r17)
 200b534:	99000417 	ldw	r4,16(r19)
 200b538:	d9400117 	ldw	r5,4(sp)
 200b53c:	2209c83a 	sub	r4,r4,r8
 200b540:	2010917a 	slli	r8,r4,5
 200b544:	d9000017 	ldw	r4,0(sp)
 200b548:	2909c83a 	sub	r4,r5,r4
 200b54c:	4109883a 	add	r4,r8,r4
 200b550:	01000e0e 	bge	zero,r4,200b58c <__ratio+0x98>
 200b554:	2008953a 	slli	r4,r4,20
 200b558:	2421883a 	add	r16,r4,r16
 200b55c:	100d883a 	mov	r6,r2
 200b560:	180f883a 	mov	r7,r3
 200b564:	9009883a 	mov	r4,r18
 200b568:	800b883a 	mov	r5,r16
 200b56c:	2002ea00 	call	2002ea0 <__divdf3>
 200b570:	dfc00617 	ldw	ra,24(sp)
 200b574:	dcc00517 	ldw	r19,20(sp)
 200b578:	dc800417 	ldw	r18,16(sp)
 200b57c:	dc400317 	ldw	r17,12(sp)
 200b580:	dc000217 	ldw	r16,8(sp)
 200b584:	dec00704 	addi	sp,sp,28
 200b588:	f800283a 	ret
 200b58c:	2008953a 	slli	r4,r4,20
 200b590:	1907c83a 	sub	r3,r3,r4
 200b594:	003ff106 	br	200b55c <__ratio+0x68>

0200b598 <_mprec_log10>:
 200b598:	defffe04 	addi	sp,sp,-8
 200b59c:	dc000015 	stw	r16,0(sp)
 200b5a0:	dfc00115 	stw	ra,4(sp)
 200b5a4:	008005c4 	movi	r2,23
 200b5a8:	2021883a 	mov	r16,r4
 200b5ac:	11000d0e 	bge	r2,r4,200b5e4 <_mprec_log10+0x4c>
 200b5b0:	0005883a 	mov	r2,zero
 200b5b4:	00cffc34 	movhi	r3,16368
 200b5b8:	843fffc4 	addi	r16,r16,-1
 200b5bc:	000d883a 	mov	r6,zero
 200b5c0:	01d00934 	movhi	r7,16420
 200b5c4:	1009883a 	mov	r4,r2
 200b5c8:	180b883a 	mov	r5,r3
 200b5cc:	200394c0 	call	200394c <__muldf3>
 200b5d0:	803ff91e 	bne	r16,zero,200b5b8 <_mprec_log10+0x20>
 200b5d4:	dfc00117 	ldw	ra,4(sp)
 200b5d8:	dc000017 	ldw	r16,0(sp)
 200b5dc:	dec00204 	addi	sp,sp,8
 200b5e0:	f800283a 	ret
 200b5e4:	202090fa 	slli	r16,r4,3
 200b5e8:	008080b4 	movhi	r2,514
 200b5ec:	10adca04 	addi	r2,r2,-18648
 200b5f0:	1421883a 	add	r16,r2,r16
 200b5f4:	80800017 	ldw	r2,0(r16)
 200b5f8:	80c00117 	ldw	r3,4(r16)
 200b5fc:	dfc00117 	ldw	ra,4(sp)
 200b600:	dc000017 	ldw	r16,0(sp)
 200b604:	dec00204 	addi	sp,sp,8
 200b608:	f800283a 	ret

0200b60c <__copybits>:
 200b60c:	297fffc4 	addi	r5,r5,-1
 200b610:	280fd17a 	srai	r7,r5,5
 200b614:	30c00417 	ldw	r3,16(r6)
 200b618:	30800504 	addi	r2,r6,20
 200b61c:	39c00044 	addi	r7,r7,1
 200b620:	18c7883a 	add	r3,r3,r3
 200b624:	39cf883a 	add	r7,r7,r7
 200b628:	18c7883a 	add	r3,r3,r3
 200b62c:	39cf883a 	add	r7,r7,r7
 200b630:	10c7883a 	add	r3,r2,r3
 200b634:	21cf883a 	add	r7,r4,r7
 200b638:	10c00d2e 	bgeu	r2,r3,200b670 <__copybits+0x64>
 200b63c:	200b883a 	mov	r5,r4
 200b640:	12000017 	ldw	r8,0(r2)
 200b644:	29400104 	addi	r5,r5,4
 200b648:	10800104 	addi	r2,r2,4
 200b64c:	2a3fff15 	stw	r8,-4(r5)
 200b650:	10fffb36 	bltu	r2,r3,200b640 <__copybits+0x34>
 200b654:	1985c83a 	sub	r2,r3,r6
 200b658:	10bffac4 	addi	r2,r2,-21
 200b65c:	1004d0ba 	srli	r2,r2,2
 200b660:	10800044 	addi	r2,r2,1
 200b664:	1085883a 	add	r2,r2,r2
 200b668:	1085883a 	add	r2,r2,r2
 200b66c:	2089883a 	add	r4,r4,r2
 200b670:	21c0032e 	bgeu	r4,r7,200b680 <__copybits+0x74>
 200b674:	20000015 	stw	zero,0(r4)
 200b678:	21000104 	addi	r4,r4,4
 200b67c:	21fffd36 	bltu	r4,r7,200b674 <__copybits+0x68>
 200b680:	f800283a 	ret

0200b684 <__any_on>:
 200b684:	20c00417 	ldw	r3,16(r4)
 200b688:	2805d17a 	srai	r2,r5,5
 200b68c:	21000504 	addi	r4,r4,20
 200b690:	18800d0e 	bge	r3,r2,200b6c8 <__any_on+0x44>
 200b694:	18c7883a 	add	r3,r3,r3
 200b698:	18c7883a 	add	r3,r3,r3
 200b69c:	20c7883a 	add	r3,r4,r3
 200b6a0:	20c0192e 	bgeu	r4,r3,200b708 <__any_on+0x84>
 200b6a4:	18bfff17 	ldw	r2,-4(r3)
 200b6a8:	18ffff04 	addi	r3,r3,-4
 200b6ac:	1000041e 	bne	r2,zero,200b6c0 <__any_on+0x3c>
 200b6b0:	20c0142e 	bgeu	r4,r3,200b704 <__any_on+0x80>
 200b6b4:	18ffff04 	addi	r3,r3,-4
 200b6b8:	19400017 	ldw	r5,0(r3)
 200b6bc:	283ffc26 	beq	r5,zero,200b6b0 <__any_on+0x2c>
 200b6c0:	00800044 	movi	r2,1
 200b6c4:	f800283a 	ret
 200b6c8:	10c00a0e 	bge	r2,r3,200b6f4 <__any_on+0x70>
 200b6cc:	1085883a 	add	r2,r2,r2
 200b6d0:	1085883a 	add	r2,r2,r2
 200b6d4:	294007cc 	andi	r5,r5,31
 200b6d8:	2087883a 	add	r3,r4,r2
 200b6dc:	283ff026 	beq	r5,zero,200b6a0 <__any_on+0x1c>
 200b6e0:	19800017 	ldw	r6,0(r3)
 200b6e4:	3144d83a 	srl	r2,r6,r5
 200b6e8:	114a983a 	sll	r5,r2,r5
 200b6ec:	317ff41e 	bne	r6,r5,200b6c0 <__any_on+0x3c>
 200b6f0:	003feb06 	br	200b6a0 <__any_on+0x1c>
 200b6f4:	1085883a 	add	r2,r2,r2
 200b6f8:	1085883a 	add	r2,r2,r2
 200b6fc:	2087883a 	add	r3,r4,r2
 200b700:	003fe706 	br	200b6a0 <__any_on+0x1c>
 200b704:	f800283a 	ret
 200b708:	0005883a 	mov	r2,zero
 200b70c:	f800283a 	ret

0200b710 <_realloc_r>:
 200b710:	defff604 	addi	sp,sp,-40
 200b714:	dc800215 	stw	r18,8(sp)
 200b718:	dfc00915 	stw	ra,36(sp)
 200b71c:	df000815 	stw	fp,32(sp)
 200b720:	ddc00715 	stw	r23,28(sp)
 200b724:	dd800615 	stw	r22,24(sp)
 200b728:	dd400515 	stw	r21,20(sp)
 200b72c:	dd000415 	stw	r20,16(sp)
 200b730:	dcc00315 	stw	r19,12(sp)
 200b734:	dc400115 	stw	r17,4(sp)
 200b738:	dc000015 	stw	r16,0(sp)
 200b73c:	3025883a 	mov	r18,r6
 200b740:	2800b726 	beq	r5,zero,200ba20 <_realloc_r+0x310>
 200b744:	282b883a 	mov	r21,r5
 200b748:	2029883a 	mov	r20,r4
 200b74c:	2010b300 	call	2010b30 <__malloc_lock>
 200b750:	a8bfff17 	ldw	r2,-4(r21)
 200b754:	043fff04 	movi	r16,-4
 200b758:	90c002c4 	addi	r3,r18,11
 200b75c:	01000584 	movi	r4,22
 200b760:	acfffe04 	addi	r19,r21,-8
 200b764:	1420703a 	and	r16,r2,r16
 200b768:	20c0332e 	bgeu	r4,r3,200b838 <_realloc_r+0x128>
 200b76c:	047ffe04 	movi	r17,-8
 200b770:	1c62703a 	and	r17,r3,r17
 200b774:	8807883a 	mov	r3,r17
 200b778:	88005816 	blt	r17,zero,200b8dc <_realloc_r+0x1cc>
 200b77c:	8c805736 	bltu	r17,r18,200b8dc <_realloc_r+0x1cc>
 200b780:	80c0300e 	bge	r16,r3,200b844 <_realloc_r+0x134>
 200b784:	070080b4 	movhi	fp,514
 200b788:	e72f7f04 	addi	fp,fp,-16900
 200b78c:	e1c00217 	ldw	r7,8(fp)
 200b790:	9c09883a 	add	r4,r19,r16
 200b794:	22000117 	ldw	r8,4(r4)
 200b798:	21c06326 	beq	r4,r7,200b928 <_realloc_r+0x218>
 200b79c:	017fff84 	movi	r5,-2
 200b7a0:	414a703a 	and	r5,r8,r5
 200b7a4:	214b883a 	add	r5,r4,r5
 200b7a8:	29800117 	ldw	r6,4(r5)
 200b7ac:	3180004c 	andi	r6,r6,1
 200b7b0:	30003f26 	beq	r6,zero,200b8b0 <_realloc_r+0x1a0>
 200b7b4:	1080004c 	andi	r2,r2,1
 200b7b8:	10008326 	beq	r2,zero,200b9c8 <_realloc_r+0x2b8>
 200b7bc:	900b883a 	mov	r5,r18
 200b7c0:	a009883a 	mov	r4,r20
 200b7c4:	200999c0 	call	200999c <_malloc_r>
 200b7c8:	1025883a 	mov	r18,r2
 200b7cc:	10011e26 	beq	r2,zero,200bc48 <_realloc_r+0x538>
 200b7d0:	a93fff17 	ldw	r4,-4(r21)
 200b7d4:	10fffe04 	addi	r3,r2,-8
 200b7d8:	00bfff84 	movi	r2,-2
 200b7dc:	2084703a 	and	r2,r4,r2
 200b7e0:	9885883a 	add	r2,r19,r2
 200b7e4:	1880ee26 	beq	r3,r2,200bba0 <_realloc_r+0x490>
 200b7e8:	81bfff04 	addi	r6,r16,-4
 200b7ec:	00800904 	movi	r2,36
 200b7f0:	1180b836 	bltu	r2,r6,200bad4 <_realloc_r+0x3c4>
 200b7f4:	00c004c4 	movi	r3,19
 200b7f8:	19809636 	bltu	r3,r6,200ba54 <_realloc_r+0x344>
 200b7fc:	9005883a 	mov	r2,r18
 200b800:	a807883a 	mov	r3,r21
 200b804:	19000017 	ldw	r4,0(r3)
 200b808:	11000015 	stw	r4,0(r2)
 200b80c:	19000117 	ldw	r4,4(r3)
 200b810:	11000115 	stw	r4,4(r2)
 200b814:	18c00217 	ldw	r3,8(r3)
 200b818:	10c00215 	stw	r3,8(r2)
 200b81c:	a80b883a 	mov	r5,r21
 200b820:	a009883a 	mov	r4,r20
 200b824:	2008da40 	call	2008da4 <_free_r>
 200b828:	a009883a 	mov	r4,r20
 200b82c:	2010c500 	call	2010c50 <__malloc_unlock>
 200b830:	9005883a 	mov	r2,r18
 200b834:	00001206 	br	200b880 <_realloc_r+0x170>
 200b838:	00c00404 	movi	r3,16
 200b83c:	1823883a 	mov	r17,r3
 200b840:	003fce06 	br	200b77c <_realloc_r+0x6c>
 200b844:	a825883a 	mov	r18,r21
 200b848:	8445c83a 	sub	r2,r16,r17
 200b84c:	00c003c4 	movi	r3,15
 200b850:	18802636 	bltu	r3,r2,200b8ec <_realloc_r+0x1dc>
 200b854:	99800117 	ldw	r6,4(r19)
 200b858:	9c07883a 	add	r3,r19,r16
 200b85c:	3180004c 	andi	r6,r6,1
 200b860:	3420b03a 	or	r16,r6,r16
 200b864:	9c000115 	stw	r16,4(r19)
 200b868:	18800117 	ldw	r2,4(r3)
 200b86c:	10800054 	ori	r2,r2,1
 200b870:	18800115 	stw	r2,4(r3)
 200b874:	a009883a 	mov	r4,r20
 200b878:	2010c500 	call	2010c50 <__malloc_unlock>
 200b87c:	9005883a 	mov	r2,r18
 200b880:	dfc00917 	ldw	ra,36(sp)
 200b884:	df000817 	ldw	fp,32(sp)
 200b888:	ddc00717 	ldw	r23,28(sp)
 200b88c:	dd800617 	ldw	r22,24(sp)
 200b890:	dd400517 	ldw	r21,20(sp)
 200b894:	dd000417 	ldw	r20,16(sp)
 200b898:	dcc00317 	ldw	r19,12(sp)
 200b89c:	dc800217 	ldw	r18,8(sp)
 200b8a0:	dc400117 	ldw	r17,4(sp)
 200b8a4:	dc000017 	ldw	r16,0(sp)
 200b8a8:	dec00a04 	addi	sp,sp,40
 200b8ac:	f800283a 	ret
 200b8b0:	017fff04 	movi	r5,-4
 200b8b4:	414a703a 	and	r5,r8,r5
 200b8b8:	814d883a 	add	r6,r16,r5
 200b8bc:	30c01f16 	blt	r6,r3,200b93c <_realloc_r+0x22c>
 200b8c0:	20800317 	ldw	r2,12(r4)
 200b8c4:	20c00217 	ldw	r3,8(r4)
 200b8c8:	a825883a 	mov	r18,r21
 200b8cc:	3021883a 	mov	r16,r6
 200b8d0:	18800315 	stw	r2,12(r3)
 200b8d4:	10c00215 	stw	r3,8(r2)
 200b8d8:	003fdb06 	br	200b848 <_realloc_r+0x138>
 200b8dc:	00800304 	movi	r2,12
 200b8e0:	a0800015 	stw	r2,0(r20)
 200b8e4:	0005883a 	mov	r2,zero
 200b8e8:	003fe506 	br	200b880 <_realloc_r+0x170>
 200b8ec:	98c00117 	ldw	r3,4(r19)
 200b8f0:	9c4b883a 	add	r5,r19,r17
 200b8f4:	11000054 	ori	r4,r2,1
 200b8f8:	18c0004c 	andi	r3,r3,1
 200b8fc:	1c62b03a 	or	r17,r3,r17
 200b900:	9c400115 	stw	r17,4(r19)
 200b904:	29000115 	stw	r4,4(r5)
 200b908:	2885883a 	add	r2,r5,r2
 200b90c:	10c00117 	ldw	r3,4(r2)
 200b910:	29400204 	addi	r5,r5,8
 200b914:	a009883a 	mov	r4,r20
 200b918:	18c00054 	ori	r3,r3,1
 200b91c:	10c00115 	stw	r3,4(r2)
 200b920:	2008da40 	call	2008da4 <_free_r>
 200b924:	003fd306 	br	200b874 <_realloc_r+0x164>
 200b928:	017fff04 	movi	r5,-4
 200b92c:	414a703a 	and	r5,r8,r5
 200b930:	89800404 	addi	r6,r17,16
 200b934:	8151883a 	add	r8,r16,r5
 200b938:	4180590e 	bge	r8,r6,200baa0 <_realloc_r+0x390>
 200b93c:	1080004c 	andi	r2,r2,1
 200b940:	103f9e1e 	bne	r2,zero,200b7bc <_realloc_r+0xac>
 200b944:	adbffe17 	ldw	r22,-8(r21)
 200b948:	00bfff04 	movi	r2,-4
 200b94c:	9dadc83a 	sub	r22,r19,r22
 200b950:	b1800117 	ldw	r6,4(r22)
 200b954:	3084703a 	and	r2,r6,r2
 200b958:	20002026 	beq	r4,zero,200b9dc <_realloc_r+0x2cc>
 200b95c:	80af883a 	add	r23,r16,r2
 200b960:	b96f883a 	add	r23,r23,r5
 200b964:	21c05f26 	beq	r4,r7,200bae4 <_realloc_r+0x3d4>
 200b968:	b8c01c16 	blt	r23,r3,200b9dc <_realloc_r+0x2cc>
 200b96c:	20800317 	ldw	r2,12(r4)
 200b970:	20c00217 	ldw	r3,8(r4)
 200b974:	81bfff04 	addi	r6,r16,-4
 200b978:	01000904 	movi	r4,36
 200b97c:	18800315 	stw	r2,12(r3)
 200b980:	10c00215 	stw	r3,8(r2)
 200b984:	b0c00217 	ldw	r3,8(r22)
 200b988:	b0800317 	ldw	r2,12(r22)
 200b98c:	b4800204 	addi	r18,r22,8
 200b990:	18800315 	stw	r2,12(r3)
 200b994:	10c00215 	stw	r3,8(r2)
 200b998:	21801b36 	bltu	r4,r6,200ba08 <_realloc_r+0x2f8>
 200b99c:	008004c4 	movi	r2,19
 200b9a0:	1180352e 	bgeu	r2,r6,200ba78 <_realloc_r+0x368>
 200b9a4:	a8800017 	ldw	r2,0(r21)
 200b9a8:	b0800215 	stw	r2,8(r22)
 200b9ac:	a8800117 	ldw	r2,4(r21)
 200b9b0:	b0800315 	stw	r2,12(r22)
 200b9b4:	008006c4 	movi	r2,27
 200b9b8:	11807f36 	bltu	r2,r6,200bbb8 <_realloc_r+0x4a8>
 200b9bc:	b0800404 	addi	r2,r22,16
 200b9c0:	ad400204 	addi	r21,r21,8
 200b9c4:	00002d06 	br	200ba7c <_realloc_r+0x36c>
 200b9c8:	adbffe17 	ldw	r22,-8(r21)
 200b9cc:	00bfff04 	movi	r2,-4
 200b9d0:	9dadc83a 	sub	r22,r19,r22
 200b9d4:	b1000117 	ldw	r4,4(r22)
 200b9d8:	2084703a 	and	r2,r4,r2
 200b9dc:	b03f7726 	beq	r22,zero,200b7bc <_realloc_r+0xac>
 200b9e0:	80af883a 	add	r23,r16,r2
 200b9e4:	b8ff7516 	blt	r23,r3,200b7bc <_realloc_r+0xac>
 200b9e8:	b0800317 	ldw	r2,12(r22)
 200b9ec:	b0c00217 	ldw	r3,8(r22)
 200b9f0:	81bfff04 	addi	r6,r16,-4
 200b9f4:	01000904 	movi	r4,36
 200b9f8:	18800315 	stw	r2,12(r3)
 200b9fc:	10c00215 	stw	r3,8(r2)
 200ba00:	b4800204 	addi	r18,r22,8
 200ba04:	21bfe52e 	bgeu	r4,r6,200b99c <_realloc_r+0x28c>
 200ba08:	a80b883a 	mov	r5,r21
 200ba0c:	9009883a 	mov	r4,r18
 200ba10:	200a3d40 	call	200a3d4 <memmove>
 200ba14:	b821883a 	mov	r16,r23
 200ba18:	b027883a 	mov	r19,r22
 200ba1c:	003f8a06 	br	200b848 <_realloc_r+0x138>
 200ba20:	300b883a 	mov	r5,r6
 200ba24:	dfc00917 	ldw	ra,36(sp)
 200ba28:	df000817 	ldw	fp,32(sp)
 200ba2c:	ddc00717 	ldw	r23,28(sp)
 200ba30:	dd800617 	ldw	r22,24(sp)
 200ba34:	dd400517 	ldw	r21,20(sp)
 200ba38:	dd000417 	ldw	r20,16(sp)
 200ba3c:	dcc00317 	ldw	r19,12(sp)
 200ba40:	dc800217 	ldw	r18,8(sp)
 200ba44:	dc400117 	ldw	r17,4(sp)
 200ba48:	dc000017 	ldw	r16,0(sp)
 200ba4c:	dec00a04 	addi	sp,sp,40
 200ba50:	200999c1 	jmpi	200999c <_malloc_r>
 200ba54:	a8c00017 	ldw	r3,0(r21)
 200ba58:	90c00015 	stw	r3,0(r18)
 200ba5c:	a8c00117 	ldw	r3,4(r21)
 200ba60:	90c00115 	stw	r3,4(r18)
 200ba64:	00c006c4 	movi	r3,27
 200ba68:	19804536 	bltu	r3,r6,200bb80 <_realloc_r+0x470>
 200ba6c:	90800204 	addi	r2,r18,8
 200ba70:	a8c00204 	addi	r3,r21,8
 200ba74:	003f6306 	br	200b804 <_realloc_r+0xf4>
 200ba78:	9005883a 	mov	r2,r18
 200ba7c:	a8c00017 	ldw	r3,0(r21)
 200ba80:	b821883a 	mov	r16,r23
 200ba84:	b027883a 	mov	r19,r22
 200ba88:	10c00015 	stw	r3,0(r2)
 200ba8c:	a8c00117 	ldw	r3,4(r21)
 200ba90:	10c00115 	stw	r3,4(r2)
 200ba94:	a8c00217 	ldw	r3,8(r21)
 200ba98:	10c00215 	stw	r3,8(r2)
 200ba9c:	003f6a06 	br	200b848 <_realloc_r+0x138>
 200baa0:	9c67883a 	add	r19,r19,r17
 200baa4:	4445c83a 	sub	r2,r8,r17
 200baa8:	e4c00215 	stw	r19,8(fp)
 200baac:	10800054 	ori	r2,r2,1
 200bab0:	98800115 	stw	r2,4(r19)
 200bab4:	a8bfff17 	ldw	r2,-4(r21)
 200bab8:	a009883a 	mov	r4,r20
 200babc:	1080004c 	andi	r2,r2,1
 200bac0:	1462b03a 	or	r17,r2,r17
 200bac4:	ac7fff15 	stw	r17,-4(r21)
 200bac8:	2010c500 	call	2010c50 <__malloc_unlock>
 200bacc:	a805883a 	mov	r2,r21
 200bad0:	003f6b06 	br	200b880 <_realloc_r+0x170>
 200bad4:	a80b883a 	mov	r5,r21
 200bad8:	9009883a 	mov	r4,r18
 200badc:	200a3d40 	call	200a3d4 <memmove>
 200bae0:	003f4e06 	br	200b81c <_realloc_r+0x10c>
 200bae4:	89000404 	addi	r4,r17,16
 200bae8:	b93fbc16 	blt	r23,r4,200b9dc <_realloc_r+0x2cc>
 200baec:	b0800317 	ldw	r2,12(r22)
 200baf0:	b0c00217 	ldw	r3,8(r22)
 200baf4:	81bfff04 	addi	r6,r16,-4
 200baf8:	01000904 	movi	r4,36
 200bafc:	18800315 	stw	r2,12(r3)
 200bb00:	10c00215 	stw	r3,8(r2)
 200bb04:	b4800204 	addi	r18,r22,8
 200bb08:	21804336 	bltu	r4,r6,200bc18 <_realloc_r+0x508>
 200bb0c:	008004c4 	movi	r2,19
 200bb10:	11803f2e 	bgeu	r2,r6,200bc10 <_realloc_r+0x500>
 200bb14:	a8800017 	ldw	r2,0(r21)
 200bb18:	b0800215 	stw	r2,8(r22)
 200bb1c:	a8800117 	ldw	r2,4(r21)
 200bb20:	b0800315 	stw	r2,12(r22)
 200bb24:	008006c4 	movi	r2,27
 200bb28:	11803f36 	bltu	r2,r6,200bc28 <_realloc_r+0x518>
 200bb2c:	b0800404 	addi	r2,r22,16
 200bb30:	ad400204 	addi	r21,r21,8
 200bb34:	a8c00017 	ldw	r3,0(r21)
 200bb38:	10c00015 	stw	r3,0(r2)
 200bb3c:	a8c00117 	ldw	r3,4(r21)
 200bb40:	10c00115 	stw	r3,4(r2)
 200bb44:	a8c00217 	ldw	r3,8(r21)
 200bb48:	10c00215 	stw	r3,8(r2)
 200bb4c:	b447883a 	add	r3,r22,r17
 200bb50:	bc45c83a 	sub	r2,r23,r17
 200bb54:	e0c00215 	stw	r3,8(fp)
 200bb58:	10800054 	ori	r2,r2,1
 200bb5c:	18800115 	stw	r2,4(r3)
 200bb60:	b0800117 	ldw	r2,4(r22)
 200bb64:	a009883a 	mov	r4,r20
 200bb68:	1080004c 	andi	r2,r2,1
 200bb6c:	1462b03a 	or	r17,r2,r17
 200bb70:	b4400115 	stw	r17,4(r22)
 200bb74:	2010c500 	call	2010c50 <__malloc_unlock>
 200bb78:	9005883a 	mov	r2,r18
 200bb7c:	003f4006 	br	200b880 <_realloc_r+0x170>
 200bb80:	a8c00217 	ldw	r3,8(r21)
 200bb84:	90c00215 	stw	r3,8(r18)
 200bb88:	a8c00317 	ldw	r3,12(r21)
 200bb8c:	90c00315 	stw	r3,12(r18)
 200bb90:	30801126 	beq	r6,r2,200bbd8 <_realloc_r+0x4c8>
 200bb94:	90800404 	addi	r2,r18,16
 200bb98:	a8c00404 	addi	r3,r21,16
 200bb9c:	003f1906 	br	200b804 <_realloc_r+0xf4>
 200bba0:	90ffff17 	ldw	r3,-4(r18)
 200bba4:	00bfff04 	movi	r2,-4
 200bba8:	a825883a 	mov	r18,r21
 200bbac:	1884703a 	and	r2,r3,r2
 200bbb0:	80a1883a 	add	r16,r16,r2
 200bbb4:	003f2406 	br	200b848 <_realloc_r+0x138>
 200bbb8:	a8800217 	ldw	r2,8(r21)
 200bbbc:	b0800415 	stw	r2,16(r22)
 200bbc0:	a8800317 	ldw	r2,12(r21)
 200bbc4:	b0800515 	stw	r2,20(r22)
 200bbc8:	31000a26 	beq	r6,r4,200bbf4 <_realloc_r+0x4e4>
 200bbcc:	b0800604 	addi	r2,r22,24
 200bbd0:	ad400404 	addi	r21,r21,16
 200bbd4:	003fa906 	br	200ba7c <_realloc_r+0x36c>
 200bbd8:	a9000417 	ldw	r4,16(r21)
 200bbdc:	90800604 	addi	r2,r18,24
 200bbe0:	a8c00604 	addi	r3,r21,24
 200bbe4:	91000415 	stw	r4,16(r18)
 200bbe8:	a9000517 	ldw	r4,20(r21)
 200bbec:	91000515 	stw	r4,20(r18)
 200bbf0:	003f0406 	br	200b804 <_realloc_r+0xf4>
 200bbf4:	a8c00417 	ldw	r3,16(r21)
 200bbf8:	ad400604 	addi	r21,r21,24
 200bbfc:	b0800804 	addi	r2,r22,32
 200bc00:	b0c00615 	stw	r3,24(r22)
 200bc04:	a8ffff17 	ldw	r3,-4(r21)
 200bc08:	b0c00715 	stw	r3,28(r22)
 200bc0c:	003f9b06 	br	200ba7c <_realloc_r+0x36c>
 200bc10:	9005883a 	mov	r2,r18
 200bc14:	003fc706 	br	200bb34 <_realloc_r+0x424>
 200bc18:	a80b883a 	mov	r5,r21
 200bc1c:	9009883a 	mov	r4,r18
 200bc20:	200a3d40 	call	200a3d4 <memmove>
 200bc24:	003fc906 	br	200bb4c <_realloc_r+0x43c>
 200bc28:	a8800217 	ldw	r2,8(r21)
 200bc2c:	b0800415 	stw	r2,16(r22)
 200bc30:	a8800317 	ldw	r2,12(r21)
 200bc34:	b0800515 	stw	r2,20(r22)
 200bc38:	31000726 	beq	r6,r4,200bc58 <_realloc_r+0x548>
 200bc3c:	b0800604 	addi	r2,r22,24
 200bc40:	ad400404 	addi	r21,r21,16
 200bc44:	003fbb06 	br	200bb34 <_realloc_r+0x424>
 200bc48:	a009883a 	mov	r4,r20
 200bc4c:	2010c500 	call	2010c50 <__malloc_unlock>
 200bc50:	0005883a 	mov	r2,zero
 200bc54:	003f0a06 	br	200b880 <_realloc_r+0x170>
 200bc58:	a8c00417 	ldw	r3,16(r21)
 200bc5c:	ad400604 	addi	r21,r21,24
 200bc60:	b0800804 	addi	r2,r22,32
 200bc64:	b0c00615 	stw	r3,24(r22)
 200bc68:	a8ffff17 	ldw	r3,-4(r21)
 200bc6c:	b0c00715 	stw	r3,28(r22)
 200bc70:	003fb006 	br	200bb34 <_realloc_r+0x424>

0200bc74 <__fpclassifyd>:
 200bc74:	00a00034 	movhi	r2,32768
 200bc78:	10bfffc4 	addi	r2,r2,-1
 200bc7c:	2884703a 	and	r2,r5,r2
 200bc80:	10000726 	beq	r2,zero,200bca0 <__fpclassifyd+0x2c>
 200bc84:	00fffc34 	movhi	r3,65520
 200bc88:	019ff834 	movhi	r6,32736
 200bc8c:	28c7883a 	add	r3,r5,r3
 200bc90:	31bfffc4 	addi	r6,r6,-1
 200bc94:	30c00536 	bltu	r6,r3,200bcac <__fpclassifyd+0x38>
 200bc98:	00800104 	movi	r2,4
 200bc9c:	f800283a 	ret
 200bca0:	2000021e 	bne	r4,zero,200bcac <__fpclassifyd+0x38>
 200bca4:	00800084 	movi	r2,2
 200bca8:	f800283a 	ret
 200bcac:	00dffc34 	movhi	r3,32752
 200bcb0:	019ff834 	movhi	r6,32736
 200bcb4:	28cb883a 	add	r5,r5,r3
 200bcb8:	31bfffc4 	addi	r6,r6,-1
 200bcbc:	317ff62e 	bgeu	r6,r5,200bc98 <__fpclassifyd+0x24>
 200bcc0:	01400434 	movhi	r5,16
 200bcc4:	297fffc4 	addi	r5,r5,-1
 200bcc8:	28800236 	bltu	r5,r2,200bcd4 <__fpclassifyd+0x60>
 200bccc:	008000c4 	movi	r2,3
 200bcd0:	f800283a 	ret
 200bcd4:	10c00226 	beq	r2,r3,200bce0 <__fpclassifyd+0x6c>
 200bcd8:	0005883a 	mov	r2,zero
 200bcdc:	f800283a 	ret
 200bce0:	2005003a 	cmpeq	r2,r4,zero
 200bce4:	f800283a 	ret

0200bce8 <_sbrk_r>:
 200bce8:	defffd04 	addi	sp,sp,-12
 200bcec:	dc000015 	stw	r16,0(sp)
 200bcf0:	040080b4 	movhi	r16,514
 200bcf4:	dc400115 	stw	r17,4(sp)
 200bcf8:	843c2204 	addi	r16,r16,-3960
 200bcfc:	2023883a 	mov	r17,r4
 200bd00:	2809883a 	mov	r4,r5
 200bd04:	dfc00215 	stw	ra,8(sp)
 200bd08:	80000015 	stw	zero,0(r16)
 200bd0c:	20108200 	call	2010820 <sbrk>
 200bd10:	00ffffc4 	movi	r3,-1
 200bd14:	10c00526 	beq	r2,r3,200bd2c <_sbrk_r+0x44>
 200bd18:	dfc00217 	ldw	ra,8(sp)
 200bd1c:	dc400117 	ldw	r17,4(sp)
 200bd20:	dc000017 	ldw	r16,0(sp)
 200bd24:	dec00304 	addi	sp,sp,12
 200bd28:	f800283a 	ret
 200bd2c:	80c00017 	ldw	r3,0(r16)
 200bd30:	183ff926 	beq	r3,zero,200bd18 <_sbrk_r+0x30>
 200bd34:	88c00015 	stw	r3,0(r17)
 200bd38:	003ff706 	br	200bd18 <_sbrk_r+0x30>

0200bd3c <__sread>:
 200bd3c:	defffe04 	addi	sp,sp,-8
 200bd40:	dc000015 	stw	r16,0(sp)
 200bd44:	2821883a 	mov	r16,r5
 200bd48:	2940038f 	ldh	r5,14(r5)
 200bd4c:	dfc00115 	stw	ra,4(sp)
 200bd50:	200dbf80 	call	200dbf8 <_read_r>
 200bd54:	10000716 	blt	r2,zero,200bd74 <__sread+0x38>
 200bd58:	80c01417 	ldw	r3,80(r16)
 200bd5c:	1887883a 	add	r3,r3,r2
 200bd60:	80c01415 	stw	r3,80(r16)
 200bd64:	dfc00117 	ldw	ra,4(sp)
 200bd68:	dc000017 	ldw	r16,0(sp)
 200bd6c:	dec00204 	addi	sp,sp,8
 200bd70:	f800283a 	ret
 200bd74:	80c0030b 	ldhu	r3,12(r16)
 200bd78:	18fbffcc 	andi	r3,r3,61439
 200bd7c:	80c0030d 	sth	r3,12(r16)
 200bd80:	dfc00117 	ldw	ra,4(sp)
 200bd84:	dc000017 	ldw	r16,0(sp)
 200bd88:	dec00204 	addi	sp,sp,8
 200bd8c:	f800283a 	ret

0200bd90 <__seofread>:
 200bd90:	0005883a 	mov	r2,zero
 200bd94:	f800283a 	ret

0200bd98 <__swrite>:
 200bd98:	2880030b 	ldhu	r2,12(r5)
 200bd9c:	defffb04 	addi	sp,sp,-20
 200bda0:	dcc00315 	stw	r19,12(sp)
 200bda4:	dc800215 	stw	r18,8(sp)
 200bda8:	dc400115 	stw	r17,4(sp)
 200bdac:	dc000015 	stw	r16,0(sp)
 200bdb0:	dfc00415 	stw	ra,16(sp)
 200bdb4:	10c0400c 	andi	r3,r2,256
 200bdb8:	2821883a 	mov	r16,r5
 200bdbc:	2023883a 	mov	r17,r4
 200bdc0:	3025883a 	mov	r18,r6
 200bdc4:	3827883a 	mov	r19,r7
 200bdc8:	18000526 	beq	r3,zero,200bde0 <__swrite+0x48>
 200bdcc:	2940038f 	ldh	r5,14(r5)
 200bdd0:	01c00084 	movi	r7,2
 200bdd4:	000d883a 	mov	r6,zero
 200bdd8:	200db980 	call	200db98 <_lseek_r>
 200bddc:	8080030b 	ldhu	r2,12(r16)
 200bde0:	8140038f 	ldh	r5,14(r16)
 200bde4:	10bbffcc 	andi	r2,r2,61439
 200bde8:	980f883a 	mov	r7,r19
 200bdec:	900d883a 	mov	r6,r18
 200bdf0:	8809883a 	mov	r4,r17
 200bdf4:	8080030d 	sth	r2,12(r16)
 200bdf8:	dfc00417 	ldw	ra,16(sp)
 200bdfc:	dcc00317 	ldw	r19,12(sp)
 200be00:	dc800217 	ldw	r18,8(sp)
 200be04:	dc400117 	ldw	r17,4(sp)
 200be08:	dc000017 	ldw	r16,0(sp)
 200be0c:	dec00504 	addi	sp,sp,20
 200be10:	200d64c1 	jmpi	200d64c <_write_r>

0200be14 <__sseek>:
 200be14:	defffe04 	addi	sp,sp,-8
 200be18:	dc000015 	stw	r16,0(sp)
 200be1c:	2821883a 	mov	r16,r5
 200be20:	2940038f 	ldh	r5,14(r5)
 200be24:	dfc00115 	stw	ra,4(sp)
 200be28:	200db980 	call	200db98 <_lseek_r>
 200be2c:	00ffffc4 	movi	r3,-1
 200be30:	10c00826 	beq	r2,r3,200be54 <__sseek+0x40>
 200be34:	80c0030b 	ldhu	r3,12(r16)
 200be38:	80801415 	stw	r2,80(r16)
 200be3c:	18c40014 	ori	r3,r3,4096
 200be40:	80c0030d 	sth	r3,12(r16)
 200be44:	dfc00117 	ldw	ra,4(sp)
 200be48:	dc000017 	ldw	r16,0(sp)
 200be4c:	dec00204 	addi	sp,sp,8
 200be50:	f800283a 	ret
 200be54:	80c0030b 	ldhu	r3,12(r16)
 200be58:	18fbffcc 	andi	r3,r3,61439
 200be5c:	80c0030d 	sth	r3,12(r16)
 200be60:	dfc00117 	ldw	ra,4(sp)
 200be64:	dc000017 	ldw	r16,0(sp)
 200be68:	dec00204 	addi	sp,sp,8
 200be6c:	f800283a 	ret

0200be70 <__sclose>:
 200be70:	2940038f 	ldh	r5,14(r5)
 200be74:	200d6ac1 	jmpi	200d6ac <_close_r>

0200be78 <strcmp>:
 200be78:	2144b03a 	or	r2,r4,r5
 200be7c:	108000cc 	andi	r2,r2,3
 200be80:	1000171e 	bne	r2,zero,200bee0 <strcmp+0x68>
 200be84:	20800017 	ldw	r2,0(r4)
 200be88:	28c00017 	ldw	r3,0(r5)
 200be8c:	10c0141e 	bne	r2,r3,200bee0 <strcmp+0x68>
 200be90:	027fbff4 	movhi	r9,65279
 200be94:	4a7fbfc4 	addi	r9,r9,-257
 200be98:	0086303a 	nor	r3,zero,r2
 200be9c:	02202074 	movhi	r8,32897
 200bea0:	1245883a 	add	r2,r2,r9
 200bea4:	42202004 	addi	r8,r8,-32640
 200bea8:	10c4703a 	and	r2,r2,r3
 200beac:	1204703a 	and	r2,r2,r8
 200beb0:	10000226 	beq	r2,zero,200bebc <strcmp+0x44>
 200beb4:	00002306 	br	200bf44 <strcmp+0xcc>
 200beb8:	1000221e 	bne	r2,zero,200bf44 <strcmp+0xcc>
 200bebc:	21000104 	addi	r4,r4,4
 200bec0:	20c00017 	ldw	r3,0(r4)
 200bec4:	29400104 	addi	r5,r5,4
 200bec8:	29800017 	ldw	r6,0(r5)
 200becc:	1a4f883a 	add	r7,r3,r9
 200bed0:	00c4303a 	nor	r2,zero,r3
 200bed4:	3884703a 	and	r2,r7,r2
 200bed8:	1204703a 	and	r2,r2,r8
 200bedc:	19bff626 	beq	r3,r6,200beb8 <strcmp+0x40>
 200bee0:	20800003 	ldbu	r2,0(r4)
 200bee4:	10c03fcc 	andi	r3,r2,255
 200bee8:	18c0201c 	xori	r3,r3,128
 200beec:	18ffe004 	addi	r3,r3,-128
 200bef0:	18000c26 	beq	r3,zero,200bf24 <strcmp+0xac>
 200bef4:	29800007 	ldb	r6,0(r5)
 200bef8:	19800326 	beq	r3,r6,200bf08 <strcmp+0x90>
 200befc:	00001306 	br	200bf4c <strcmp+0xd4>
 200bf00:	29800007 	ldb	r6,0(r5)
 200bf04:	11800b1e 	bne	r2,r6,200bf34 <strcmp+0xbc>
 200bf08:	21000044 	addi	r4,r4,1
 200bf0c:	20c00003 	ldbu	r3,0(r4)
 200bf10:	29400044 	addi	r5,r5,1
 200bf14:	18803fcc 	andi	r2,r3,255
 200bf18:	1080201c 	xori	r2,r2,128
 200bf1c:	10bfe004 	addi	r2,r2,-128
 200bf20:	103ff71e 	bne	r2,zero,200bf00 <strcmp+0x88>
 200bf24:	0007883a 	mov	r3,zero
 200bf28:	28800003 	ldbu	r2,0(r5)
 200bf2c:	1885c83a 	sub	r2,r3,r2
 200bf30:	f800283a 	ret
 200bf34:	28800003 	ldbu	r2,0(r5)
 200bf38:	18c03fcc 	andi	r3,r3,255
 200bf3c:	1885c83a 	sub	r2,r3,r2
 200bf40:	f800283a 	ret
 200bf44:	0005883a 	mov	r2,zero
 200bf48:	f800283a 	ret
 200bf4c:	10c03fcc 	andi	r3,r2,255
 200bf50:	003ff506 	br	200bf28 <strcmp+0xb0>

0200bf54 <__sprint_r.part.0>:
 200bf54:	28801917 	ldw	r2,100(r5)
 200bf58:	defff604 	addi	sp,sp,-40
 200bf5c:	dd400515 	stw	r21,20(sp)
 200bf60:	dfc00915 	stw	ra,36(sp)
 200bf64:	df000815 	stw	fp,32(sp)
 200bf68:	ddc00715 	stw	r23,28(sp)
 200bf6c:	dd800615 	stw	r22,24(sp)
 200bf70:	dd000415 	stw	r20,16(sp)
 200bf74:	dcc00315 	stw	r19,12(sp)
 200bf78:	dc800215 	stw	r18,8(sp)
 200bf7c:	dc400115 	stw	r17,4(sp)
 200bf80:	dc000015 	stw	r16,0(sp)
 200bf84:	1088000c 	andi	r2,r2,8192
 200bf88:	302b883a 	mov	r21,r6
 200bf8c:	10002e26 	beq	r2,zero,200c048 <__sprint_r.part.0+0xf4>
 200bf90:	30800217 	ldw	r2,8(r6)
 200bf94:	35800017 	ldw	r22,0(r6)
 200bf98:	10002926 	beq	r2,zero,200c040 <__sprint_r.part.0+0xec>
 200bf9c:	2827883a 	mov	r19,r5
 200bfa0:	2029883a 	mov	r20,r4
 200bfa4:	b5c00104 	addi	r23,r22,4
 200bfa8:	04bfffc4 	movi	r18,-1
 200bfac:	bc400017 	ldw	r17,0(r23)
 200bfb0:	b4000017 	ldw	r16,0(r22)
 200bfb4:	0039883a 	mov	fp,zero
 200bfb8:	8822d0ba 	srli	r17,r17,2
 200bfbc:	8800031e 	bne	r17,zero,200bfcc <__sprint_r.part.0+0x78>
 200bfc0:	00001806 	br	200c024 <__sprint_r.part.0+0xd0>
 200bfc4:	84000104 	addi	r16,r16,4
 200bfc8:	8f001526 	beq	r17,fp,200c020 <__sprint_r.part.0+0xcc>
 200bfcc:	81400017 	ldw	r5,0(r16)
 200bfd0:	980d883a 	mov	r6,r19
 200bfd4:	a009883a 	mov	r4,r20
 200bfd8:	200da440 	call	200da44 <_fputwc_r>
 200bfdc:	e7000044 	addi	fp,fp,1
 200bfe0:	14bff81e 	bne	r2,r18,200bfc4 <__sprint_r.part.0+0x70>
 200bfe4:	9005883a 	mov	r2,r18
 200bfe8:	a8000215 	stw	zero,8(r21)
 200bfec:	a8000115 	stw	zero,4(r21)
 200bff0:	dfc00917 	ldw	ra,36(sp)
 200bff4:	df000817 	ldw	fp,32(sp)
 200bff8:	ddc00717 	ldw	r23,28(sp)
 200bffc:	dd800617 	ldw	r22,24(sp)
 200c000:	dd400517 	ldw	r21,20(sp)
 200c004:	dd000417 	ldw	r20,16(sp)
 200c008:	dcc00317 	ldw	r19,12(sp)
 200c00c:	dc800217 	ldw	r18,8(sp)
 200c010:	dc400117 	ldw	r17,4(sp)
 200c014:	dc000017 	ldw	r16,0(sp)
 200c018:	dec00a04 	addi	sp,sp,40
 200c01c:	f800283a 	ret
 200c020:	a8800217 	ldw	r2,8(r21)
 200c024:	8c63883a 	add	r17,r17,r17
 200c028:	8c63883a 	add	r17,r17,r17
 200c02c:	1445c83a 	sub	r2,r2,r17
 200c030:	a8800215 	stw	r2,8(r21)
 200c034:	b5800204 	addi	r22,r22,8
 200c038:	bdc00204 	addi	r23,r23,8
 200c03c:	103fdb1e 	bne	r2,zero,200bfac <__sprint_r.part.0+0x58>
 200c040:	0005883a 	mov	r2,zero
 200c044:	003fe806 	br	200bfe8 <__sprint_r.part.0+0x94>
 200c048:	20090b40 	call	20090b4 <__sfvwrite_r>
 200c04c:	003fe606 	br	200bfe8 <__sprint_r.part.0+0x94>

0200c050 <__sprint_r>:
 200c050:	30c00217 	ldw	r3,8(r6)
 200c054:	18000126 	beq	r3,zero,200c05c <__sprint_r+0xc>
 200c058:	200bf541 	jmpi	200bf54 <__sprint_r.part.0>
 200c05c:	30000115 	stw	zero,4(r6)
 200c060:	0005883a 	mov	r2,zero
 200c064:	f800283a 	ret

0200c068 <___vfiprintf_internal_r>:
 200c068:	deffca04 	addi	sp,sp,-216
 200c06c:	dd403115 	stw	r21,196(sp)
 200c070:	dfc03515 	stw	ra,212(sp)
 200c074:	df003415 	stw	fp,208(sp)
 200c078:	ddc03315 	stw	r23,204(sp)
 200c07c:	dd803215 	stw	r22,200(sp)
 200c080:	dd003015 	stw	r20,192(sp)
 200c084:	dcc02f15 	stw	r19,188(sp)
 200c088:	dc802e15 	stw	r18,184(sp)
 200c08c:	dc402d15 	stw	r17,180(sp)
 200c090:	dc002c15 	stw	r16,176(sp)
 200c094:	d9002115 	stw	r4,132(sp)
 200c098:	d9402015 	stw	r5,128(sp)
 200c09c:	d9c02215 	stw	r7,136(sp)
 200c0a0:	302b883a 	mov	r21,r6
 200c0a4:	20000226 	beq	r4,zero,200c0b0 <___vfiprintf_internal_r+0x48>
 200c0a8:	20800e17 	ldw	r2,56(r4)
 200c0ac:	1000cf26 	beq	r2,zero,200c3ec <___vfiprintf_internal_r+0x384>
 200c0b0:	d8c02017 	ldw	r3,128(sp)
 200c0b4:	1880030b 	ldhu	r2,12(r3)
 200c0b8:	10c8000c 	andi	r3,r2,8192
 200c0bc:	1800071e 	bne	r3,zero,200c0dc <___vfiprintf_internal_r+0x74>
 200c0c0:	d9402017 	ldw	r5,128(sp)
 200c0c4:	00f7ffc4 	movi	r3,-8193
 200c0c8:	10880014 	ori	r2,r2,8192
 200c0cc:	29001917 	ldw	r4,100(r5)
 200c0d0:	2880030d 	sth	r2,12(r5)
 200c0d4:	20c6703a 	and	r3,r4,r3
 200c0d8:	28c01915 	stw	r3,100(r5)
 200c0dc:	10c0020c 	andi	r3,r2,8
 200c0e0:	1800a526 	beq	r3,zero,200c378 <___vfiprintf_internal_r+0x310>
 200c0e4:	d9002017 	ldw	r4,128(sp)
 200c0e8:	20c00417 	ldw	r3,16(r4)
 200c0ec:	1800a226 	beq	r3,zero,200c378 <___vfiprintf_internal_r+0x310>
 200c0f0:	1080068c 	andi	r2,r2,26
 200c0f4:	00c00284 	movi	r3,10
 200c0f8:	10c0a826 	beq	r2,r3,200c39c <___vfiprintf_internal_r+0x334>
 200c0fc:	d9001a04 	addi	r4,sp,104
 200c100:	d94019c4 	addi	r5,sp,103
 200c104:	048080b4 	movhi	r18,514
 200c108:	2145c83a 	sub	r2,r4,r5
 200c10c:	94adfc04 	addi	r18,r18,-18448
 200c110:	d9001e15 	stw	r4,120(sp)
 200c114:	d9401f15 	stw	r5,124(sp)
 200c118:	dec01a15 	stw	sp,104(sp)
 200c11c:	d8001c15 	stw	zero,112(sp)
 200c120:	d8001b15 	stw	zero,108(sp)
 200c124:	d811883a 	mov	r8,sp
 200c128:	d8002615 	stw	zero,152(sp)
 200c12c:	d8002415 	stw	zero,144(sp)
 200c130:	d8802815 	stw	r2,160(sp)
 200c134:	a82d883a 	mov	r22,r21
 200c138:	b0800007 	ldb	r2,0(r22)
 200c13c:	10040d26 	beq	r2,zero,200d174 <___vfiprintf_internal_r+0x110c>
 200c140:	00c00944 	movi	r3,37
 200c144:	b029883a 	mov	r20,r22
 200c148:	10c0021e 	bne	r2,r3,200c154 <___vfiprintf_internal_r+0xec>
 200c14c:	00001606 	br	200c1a8 <___vfiprintf_internal_r+0x140>
 200c150:	10c00326 	beq	r2,r3,200c160 <___vfiprintf_internal_r+0xf8>
 200c154:	a5000044 	addi	r20,r20,1
 200c158:	a0800007 	ldb	r2,0(r20)
 200c15c:	103ffc1e 	bne	r2,zero,200c150 <___vfiprintf_internal_r+0xe8>
 200c160:	a5a1c83a 	sub	r16,r20,r22
 200c164:	80001026 	beq	r16,zero,200c1a8 <___vfiprintf_internal_r+0x140>
 200c168:	d8c01c17 	ldw	r3,112(sp)
 200c16c:	d8801b17 	ldw	r2,108(sp)
 200c170:	45800015 	stw	r22,0(r8)
 200c174:	80c7883a 	add	r3,r16,r3
 200c178:	10800044 	addi	r2,r2,1
 200c17c:	44000115 	stw	r16,4(r8)
 200c180:	d8c01c15 	stw	r3,112(sp)
 200c184:	d8801b15 	stw	r2,108(sp)
 200c188:	010001c4 	movi	r4,7
 200c18c:	2080750e 	bge	r4,r2,200c364 <___vfiprintf_internal_r+0x2fc>
 200c190:	1803951e 	bne	r3,zero,200cfe8 <___vfiprintf_internal_r+0xf80>
 200c194:	d8c02417 	ldw	r3,144(sp)
 200c198:	d8001b15 	stw	zero,108(sp)
 200c19c:	d811883a 	mov	r8,sp
 200c1a0:	1c07883a 	add	r3,r3,r16
 200c1a4:	d8c02415 	stw	r3,144(sp)
 200c1a8:	a0800007 	ldb	r2,0(r20)
 200c1ac:	1002e026 	beq	r2,zero,200cd30 <___vfiprintf_internal_r+0xcc8>
 200c1b0:	a5800044 	addi	r22,r20,1
 200c1b4:	a0c00047 	ldb	r3,1(r20)
 200c1b8:	d8001d85 	stb	zero,118(sp)
 200c1bc:	0027883a 	mov	r19,zero
 200c1c0:	d8002305 	stb	zero,140(sp)
 200c1c4:	043fffc4 	movi	r16,-1
 200c1c8:	d8002515 	stw	zero,148(sp)
 200c1cc:	0023883a 	mov	r17,zero
 200c1d0:	05001604 	movi	r20,88
 200c1d4:	05400244 	movi	r21,9
 200c1d8:	402f883a 	mov	r23,r8
 200c1dc:	b5800044 	addi	r22,r22,1
 200c1e0:	18bff804 	addi	r2,r3,-32
 200c1e4:	a0827736 	bltu	r20,r2,200cbc4 <___vfiprintf_internal_r+0xb5c>
 200c1e8:	100490ba 	slli	r2,r2,2
 200c1ec:	01008074 	movhi	r4,513
 200c1f0:	21308004 	addi	r4,r4,-15872
 200c1f4:	1105883a 	add	r2,r2,r4
 200c1f8:	10800017 	ldw	r2,0(r2)
 200c1fc:	1000683a 	jmp	r2
 200c200:	0200c8c4 	movi	r8,803
 200c204:	0200cbc4 	movi	r8,815
 200c208:	0200cbc4 	movi	r8,815
 200c20c:	0200c8e0 	cmpeqi	r8,zero,803
 200c210:	0200cbc4 	movi	r8,815
 200c214:	0200cbc4 	movi	r8,815
 200c218:	0200cbc4 	movi	r8,815
 200c21c:	0200cbc4 	movi	r8,815
 200c220:	0200cbc4 	movi	r8,815
 200c224:	0200cbc4 	movi	r8,815
 200c228:	0200cae8 	cmpgeui	r8,zero,811
 200c22c:	0200cb0c 	andi	r8,zero,812
 200c230:	0200cbc4 	movi	r8,815
 200c234:	0200c404 	movi	r8,784
 200c238:	0200cb20 	cmpeqi	r8,zero,812
 200c23c:	0200cbc4 	movi	r8,815
 200c240:	0200c8ec 	andhi	r8,zero,803
 200c244:	0200c8f8 	rdprs	r8,zero,803
 200c248:	0200c8f8 	rdprs	r8,zero,803
 200c24c:	0200c8f8 	rdprs	r8,zero,803
 200c250:	0200c8f8 	rdprs	r8,zero,803
 200c254:	0200c8f8 	rdprs	r8,zero,803
 200c258:	0200c8f8 	rdprs	r8,zero,803
 200c25c:	0200c8f8 	rdprs	r8,zero,803
 200c260:	0200c8f8 	rdprs	r8,zero,803
 200c264:	0200c8f8 	rdprs	r8,zero,803
 200c268:	0200cbc4 	movi	r8,815
 200c26c:	0200cbc4 	movi	r8,815
 200c270:	0200cbc4 	movi	r8,815
 200c274:	0200cbc4 	movi	r8,815
 200c278:	0200cbc4 	movi	r8,815
 200c27c:	0200cbc4 	movi	r8,815
 200c280:	0200cbc4 	movi	r8,815
 200c284:	0200cbc4 	movi	r8,815
 200c288:	0200cbc4 	movi	r8,815
 200c28c:	0200cbc4 	movi	r8,815
 200c290:	0200c938 	rdprs	r8,zero,804
 200c294:	0200cbc4 	movi	r8,815
 200c298:	0200cbc4 	movi	r8,815
 200c29c:	0200cbc4 	movi	r8,815
 200c2a0:	0200cbc4 	movi	r8,815
 200c2a4:	0200cbc4 	movi	r8,815
 200c2a8:	0200cbc4 	movi	r8,815
 200c2ac:	0200cbc4 	movi	r8,815
 200c2b0:	0200cbc4 	movi	r8,815
 200c2b4:	0200cbc4 	movi	r8,815
 200c2b8:	0200cbc4 	movi	r8,815
 200c2bc:	0200c974 	movhi	r8,805
 200c2c0:	0200cbc4 	movi	r8,815
 200c2c4:	0200cbc4 	movi	r8,815
 200c2c8:	0200cbc4 	movi	r8,815
 200c2cc:	0200cbc4 	movi	r8,815
 200c2d0:	0200cbc4 	movi	r8,815
 200c2d4:	0200c9d0 	cmplti	r8,zero,807
 200c2d8:	0200cbc4 	movi	r8,815
 200c2dc:	0200cbc4 	movi	r8,815
 200c2e0:	0200ca44 	movi	r8,809
 200c2e4:	0200cbc4 	movi	r8,815
 200c2e8:	0200cbc4 	movi	r8,815
 200c2ec:	0200cbc4 	movi	r8,815
 200c2f0:	0200cbc4 	movi	r8,815
 200c2f4:	0200cbc4 	movi	r8,815
 200c2f8:	0200cbc4 	movi	r8,815
 200c2fc:	0200cbc4 	movi	r8,815
 200c300:	0200cbc4 	movi	r8,815
 200c304:	0200cbc4 	movi	r8,815
 200c308:	0200cbc4 	movi	r8,815
 200c30c:	0200c7ec 	andhi	r8,zero,799
 200c310:	0200c81c 	xori	r8,zero,800
 200c314:	0200cbc4 	movi	r8,815
 200c318:	0200cbc4 	movi	r8,815
 200c31c:	0200cbc4 	movi	r8,815
 200c320:	0200cb6c 	andhi	r8,zero,813
 200c324:	0200c81c 	xori	r8,zero,800
 200c328:	0200cbc4 	movi	r8,815
 200c32c:	0200cbc4 	movi	r8,815
 200c330:	0200c6c4 	movi	r8,795
 200c334:	0200cbc4 	movi	r8,815
 200c338:	0200c6d8 	cmpnei	r8,zero,795
 200c33c:	0200c710 	cmplti	r8,zero,796
 200c340:	0200c410 	cmplti	r8,zero,784
 200c344:	0200c6b8 	rdprs	r8,zero,794
 200c348:	0200cbc4 	movi	r8,815
 200c34c:	0200ca84 	movi	r8,810
 200c350:	0200cbc4 	movi	r8,815
 200c354:	0200cad0 	cmplti	r8,zero,811
 200c358:	0200cbc4 	movi	r8,815
 200c35c:	0200cbc4 	movi	r8,815
 200c360:	0200c794 	movui	r8,798
 200c364:	42000204 	addi	r8,r8,8
 200c368:	d8c02417 	ldw	r3,144(sp)
 200c36c:	1c07883a 	add	r3,r3,r16
 200c370:	d8c02415 	stw	r3,144(sp)
 200c374:	003f8c06 	br	200c1a8 <___vfiprintf_internal_r+0x140>
 200c378:	d9402017 	ldw	r5,128(sp)
 200c37c:	d9002117 	ldw	r4,132(sp)
 200c380:	2006c240 	call	2006c24 <__swsetup_r>
 200c384:	1003c11e 	bne	r2,zero,200d28c <___vfiprintf_internal_r+0x1224>
 200c388:	d9402017 	ldw	r5,128(sp)
 200c38c:	00c00284 	movi	r3,10
 200c390:	2880030b 	ldhu	r2,12(r5)
 200c394:	1080068c 	andi	r2,r2,26
 200c398:	10ff581e 	bne	r2,r3,200c0fc <___vfiprintf_internal_r+0x94>
 200c39c:	d8c02017 	ldw	r3,128(sp)
 200c3a0:	1880038f 	ldh	r2,14(r3)
 200c3a4:	103f5516 	blt	r2,zero,200c0fc <___vfiprintf_internal_r+0x94>
 200c3a8:	d9c02217 	ldw	r7,136(sp)
 200c3ac:	d9002117 	ldw	r4,132(sp)
 200c3b0:	a80d883a 	mov	r6,r21
 200c3b4:	180b883a 	mov	r5,r3
 200c3b8:	200d5900 	call	200d590 <__sbprintf>
 200c3bc:	dfc03517 	ldw	ra,212(sp)
 200c3c0:	df003417 	ldw	fp,208(sp)
 200c3c4:	ddc03317 	ldw	r23,204(sp)
 200c3c8:	dd803217 	ldw	r22,200(sp)
 200c3cc:	dd403117 	ldw	r21,196(sp)
 200c3d0:	dd003017 	ldw	r20,192(sp)
 200c3d4:	dcc02f17 	ldw	r19,188(sp)
 200c3d8:	dc802e17 	ldw	r18,184(sp)
 200c3dc:	dc402d17 	ldw	r17,180(sp)
 200c3e0:	dc002c17 	ldw	r16,176(sp)
 200c3e4:	dec03604 	addi	sp,sp,216
 200c3e8:	f800283a 	ret
 200c3ec:	2008c300 	call	2008c30 <__sinit>
 200c3f0:	003f2f06 	br	200c0b0 <___vfiprintf_internal_r+0x48>
 200c3f4:	d8c02517 	ldw	r3,148(sp)
 200c3f8:	d8802215 	stw	r2,136(sp)
 200c3fc:	00c7c83a 	sub	r3,zero,r3
 200c400:	d8c02515 	stw	r3,148(sp)
 200c404:	8c400114 	ori	r17,r17,4
 200c408:	b0c00007 	ldb	r3,0(r22)
 200c40c:	003f7306 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c410:	00800c04 	movi	r2,48
 200c414:	d9402217 	ldw	r5,136(sp)
 200c418:	d8801d05 	stb	r2,116(sp)
 200c41c:	00801e04 	movi	r2,120
 200c420:	d8801d45 	stb	r2,117(sp)
 200c424:	d8001d85 	stb	zero,118(sp)
 200c428:	b811883a 	mov	r8,r23
 200c42c:	28c00104 	addi	r3,r5,4
 200c430:	2cc00017 	ldw	r19,0(r5)
 200c434:	0029883a 	mov	r20,zero
 200c438:	88800094 	ori	r2,r17,2
 200c43c:	80032516 	blt	r16,zero,200d0d4 <___vfiprintf_internal_r+0x106c>
 200c440:	00bfdfc4 	movi	r2,-129
 200c444:	88a2703a 	and	r17,r17,r2
 200c448:	d8c02215 	stw	r3,136(sp)
 200c44c:	8c400094 	ori	r17,r17,2
 200c450:	98032a1e 	bne	r19,zero,200d0fc <___vfiprintf_internal_r+0x1094>
 200c454:	008080b4 	movhi	r2,514
 200c458:	10ad9c04 	addi	r2,r2,-18832
 200c45c:	d8802615 	stw	r2,152(sp)
 200c460:	002b883a 	mov	r21,zero
 200c464:	8001741e 	bne	r16,zero,200ca38 <___vfiprintf_internal_r+0x9d0>
 200c468:	0021883a 	mov	r16,zero
 200c46c:	0029883a 	mov	r20,zero
 200c470:	ddc01a04 	addi	r23,sp,104
 200c474:	8027883a 	mov	r19,r16
 200c478:	8500010e 	bge	r16,r20,200c480 <___vfiprintf_internal_r+0x418>
 200c47c:	a027883a 	mov	r19,r20
 200c480:	ad403fcc 	andi	r21,r21,255
 200c484:	ad40201c 	xori	r21,r21,128
 200c488:	ad7fe004 	addi	r21,r21,-128
 200c48c:	a8000126 	beq	r21,zero,200c494 <___vfiprintf_internal_r+0x42c>
 200c490:	9cc00044 	addi	r19,r19,1
 200c494:	89c0008c 	andi	r7,r17,2
 200c498:	38000126 	beq	r7,zero,200c4a0 <___vfiprintf_internal_r+0x438>
 200c49c:	9cc00084 	addi	r19,r19,2
 200c4a0:	88c0210c 	andi	r3,r17,132
 200c4a4:	1801dd1e 	bne	r3,zero,200cc1c <___vfiprintf_internal_r+0xbb4>
 200c4a8:	d9402517 	ldw	r5,148(sp)
 200c4ac:	2cebc83a 	sub	r21,r5,r19
 200c4b0:	0541da0e 	bge	zero,r21,200cc1c <___vfiprintf_internal_r+0xbb4>
 200c4b4:	07000404 	movi	fp,16
 200c4b8:	d8801c17 	ldw	r2,112(sp)
 200c4bc:	e543be0e 	bge	fp,r21,200d3b8 <___vfiprintf_internal_r+0x1350>
 200c4c0:	014080b4 	movhi	r5,514
 200c4c4:	296e0004 	addi	r5,r5,-18432
 200c4c8:	dc002715 	stw	r16,156(sp)
 200c4cc:	d9801b17 	ldw	r6,108(sp)
 200c4d0:	a821883a 	mov	r16,r21
 200c4d4:	d9402315 	stw	r5,140(sp)
 200c4d8:	028001c4 	movi	r10,7
 200c4dc:	d9c02915 	stw	r7,164(sp)
 200c4e0:	182b883a 	mov	r21,r3
 200c4e4:	00000506 	br	200c4fc <___vfiprintf_internal_r+0x494>
 200c4e8:	31000084 	addi	r4,r6,2
 200c4ec:	42000204 	addi	r8,r8,8
 200c4f0:	180d883a 	mov	r6,r3
 200c4f4:	843ffc04 	addi	r16,r16,-16
 200c4f8:	e4000f0e 	bge	fp,r16,200c538 <___vfiprintf_internal_r+0x4d0>
 200c4fc:	010080b4 	movhi	r4,514
 200c500:	10800404 	addi	r2,r2,16
 200c504:	30c00044 	addi	r3,r6,1
 200c508:	212e0004 	addi	r4,r4,-18432
 200c50c:	41000015 	stw	r4,0(r8)
 200c510:	47000115 	stw	fp,4(r8)
 200c514:	d8801c15 	stw	r2,112(sp)
 200c518:	d8c01b15 	stw	r3,108(sp)
 200c51c:	50fff20e 	bge	r10,r3,200c4e8 <___vfiprintf_internal_r+0x480>
 200c520:	1001b21e 	bne	r2,zero,200cbec <___vfiprintf_internal_r+0xb84>
 200c524:	843ffc04 	addi	r16,r16,-16
 200c528:	000d883a 	mov	r6,zero
 200c52c:	01000044 	movi	r4,1
 200c530:	d811883a 	mov	r8,sp
 200c534:	e43ff116 	blt	fp,r16,200c4fc <___vfiprintf_internal_r+0x494>
 200c538:	a807883a 	mov	r3,r21
 200c53c:	d9c02917 	ldw	r7,164(sp)
 200c540:	802b883a 	mov	r21,r16
 200c544:	dc002717 	ldw	r16,156(sp)
 200c548:	d9402317 	ldw	r5,140(sp)
 200c54c:	a885883a 	add	r2,r21,r2
 200c550:	45400115 	stw	r21,4(r8)
 200c554:	41400015 	stw	r5,0(r8)
 200c558:	d8801c15 	stw	r2,112(sp)
 200c55c:	d9001b15 	stw	r4,108(sp)
 200c560:	014001c4 	movi	r5,7
 200c564:	29026216 	blt	r5,r4,200cef0 <___vfiprintf_internal_r+0xe88>
 200c568:	d9801d87 	ldb	r6,118(sp)
 200c56c:	42000204 	addi	r8,r8,8
 200c570:	21400044 	addi	r5,r4,1
 200c574:	3001ae1e 	bne	r6,zero,200cc30 <___vfiprintf_internal_r+0xbc8>
 200c578:	3801bb26 	beq	r7,zero,200cc68 <___vfiprintf_internal_r+0xc00>
 200c57c:	d9001d04 	addi	r4,sp,116
 200c580:	10800084 	addi	r2,r2,2
 200c584:	41000015 	stw	r4,0(r8)
 200c588:	01000084 	movi	r4,2
 200c58c:	41000115 	stw	r4,4(r8)
 200c590:	d8801c15 	stw	r2,112(sp)
 200c594:	d9401b15 	stw	r5,108(sp)
 200c598:	010001c4 	movi	r4,7
 200c59c:	2142680e 	bge	r4,r5,200cf40 <___vfiprintf_internal_r+0xed8>
 200c5a0:	1002b11e 	bne	r2,zero,200d068 <___vfiprintf_internal_r+0x1000>
 200c5a4:	01802004 	movi	r6,128
 200c5a8:	01400044 	movi	r5,1
 200c5ac:	0009883a 	mov	r4,zero
 200c5b0:	d811883a 	mov	r8,sp
 200c5b4:	1981ae1e 	bne	r3,r6,200cc70 <___vfiprintf_internal_r+0xc08>
 200c5b8:	d8c02517 	ldw	r3,148(sp)
 200c5bc:	1cf9c83a 	sub	fp,r3,r19
 200c5c0:	0701ab0e 	bge	zero,fp,200cc70 <___vfiprintf_internal_r+0xc08>
 200c5c4:	05400404 	movi	r21,16
 200c5c8:	af03a90e 	bge	r21,fp,200d470 <___vfiprintf_internal_r+0x1408>
 200c5cc:	014080b4 	movhi	r5,514
 200c5d0:	296dfc04 	addi	r5,r5,-18448
 200c5d4:	d9402315 	stw	r5,140(sp)
 200c5d8:	01c001c4 	movi	r7,7
 200c5dc:	00000506 	br	200c5f4 <___vfiprintf_internal_r+0x58c>
 200c5e0:	21800084 	addi	r6,r4,2
 200c5e4:	42000204 	addi	r8,r8,8
 200c5e8:	1809883a 	mov	r4,r3
 200c5ec:	e73ffc04 	addi	fp,fp,-16
 200c5f0:	af000d0e 	bge	r21,fp,200c628 <___vfiprintf_internal_r+0x5c0>
 200c5f4:	10800404 	addi	r2,r2,16
 200c5f8:	20c00044 	addi	r3,r4,1
 200c5fc:	44800015 	stw	r18,0(r8)
 200c600:	45400115 	stw	r21,4(r8)
 200c604:	d8801c15 	stw	r2,112(sp)
 200c608:	d8c01b15 	stw	r3,108(sp)
 200c60c:	38fff40e 	bge	r7,r3,200c5e0 <___vfiprintf_internal_r+0x578>
 200c610:	10022b1e 	bne	r2,zero,200cec0 <___vfiprintf_internal_r+0xe58>
 200c614:	e73ffc04 	addi	fp,fp,-16
 200c618:	01800044 	movi	r6,1
 200c61c:	0009883a 	mov	r4,zero
 200c620:	d811883a 	mov	r8,sp
 200c624:	af3ff316 	blt	r21,fp,200c5f4 <___vfiprintf_internal_r+0x58c>
 200c628:	d8c02317 	ldw	r3,140(sp)
 200c62c:	1705883a 	add	r2,r2,fp
 200c630:	47000115 	stw	fp,4(r8)
 200c634:	40c00015 	stw	r3,0(r8)
 200c638:	d8801c15 	stw	r2,112(sp)
 200c63c:	d9801b15 	stw	r6,108(sp)
 200c640:	00c001c4 	movi	r3,7
 200c644:	19829416 	blt	r3,r6,200d098 <___vfiprintf_internal_r+0x1030>
 200c648:	8521c83a 	sub	r16,r16,r20
 200c64c:	42000204 	addi	r8,r8,8
 200c650:	31400044 	addi	r5,r6,1
 200c654:	3009883a 	mov	r4,r6
 200c658:	04018716 	blt	zero,r16,200cc78 <___vfiprintf_internal_r+0xc10>
 200c65c:	a085883a 	add	r2,r20,r2
 200c660:	45c00015 	stw	r23,0(r8)
 200c664:	45000115 	stw	r20,4(r8)
 200c668:	d8801c15 	stw	r2,112(sp)
 200c66c:	d9401b15 	stw	r5,108(sp)
 200c670:	00c001c4 	movi	r3,7
 200c674:	1941c20e 	bge	r3,r5,200cd80 <___vfiprintf_internal_r+0xd18>
 200c678:	1002531e 	bne	r2,zero,200cfc8 <___vfiprintf_internal_r+0xf60>
 200c67c:	d8001b15 	stw	zero,108(sp)
 200c680:	8c40010c 	andi	r17,r17,4
 200c684:	88023226 	beq	r17,zero,200cf50 <___vfiprintf_internal_r+0xee8>
 200c688:	d9002517 	ldw	r4,148(sp)
 200c68c:	24e3c83a 	sub	r17,r4,r19
 200c690:	04432916 	blt	zero,r17,200d338 <___vfiprintf_internal_r+0x12d0>
 200c694:	d8802517 	ldw	r2,148(sp)
 200c698:	14c0010e 	bge	r2,r19,200c6a0 <___vfiprintf_internal_r+0x638>
 200c69c:	9805883a 	mov	r2,r19
 200c6a0:	d8c02417 	ldw	r3,144(sp)
 200c6a4:	1887883a 	add	r3,r3,r2
 200c6a8:	d8c02415 	stw	r3,144(sp)
 200c6ac:	d8001b15 	stw	zero,108(sp)
 200c6b0:	d811883a 	mov	r8,sp
 200c6b4:	003ea006 	br	200c138 <___vfiprintf_internal_r+0xd0>
 200c6b8:	8c400814 	ori	r17,r17,32
 200c6bc:	b0c00007 	ldb	r3,0(r22)
 200c6c0:	003ec606 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c6c4:	b0c00007 	ldb	r3,0(r22)
 200c6c8:	00801b04 	movi	r2,108
 200c6cc:	18832026 	beq	r3,r2,200d350 <___vfiprintf_internal_r+0x12e8>
 200c6d0:	8c400414 	ori	r17,r17,16
 200c6d4:	003ec106 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c6d8:	9cc03fcc 	andi	r19,r19,255
 200c6dc:	b811883a 	mov	r8,r23
 200c6e0:	9803981e 	bne	r19,zero,200d544 <___vfiprintf_internal_r+0x14dc>
 200c6e4:	8880080c 	andi	r2,r17,32
 200c6e8:	1002be26 	beq	r2,zero,200d1e4 <___vfiprintf_internal_r+0x117c>
 200c6ec:	d9002217 	ldw	r4,136(sp)
 200c6f0:	d9402417 	ldw	r5,144(sp)
 200c6f4:	20800017 	ldw	r2,0(r4)
 200c6f8:	2807d7fa 	srai	r3,r5,31
 200c6fc:	21000104 	addi	r4,r4,4
 200c700:	d9002215 	stw	r4,136(sp)
 200c704:	11400015 	stw	r5,0(r2)
 200c708:	10c00115 	stw	r3,4(r2)
 200c70c:	003e8a06 	br	200c138 <___vfiprintf_internal_r+0xd0>
 200c710:	9cc03fcc 	andi	r19,r19,255
 200c714:	b811883a 	mov	r8,r23
 200c718:	9803871e 	bne	r19,zero,200d538 <___vfiprintf_internal_r+0x14d0>
 200c71c:	8880080c 	andi	r2,r17,32
 200c720:	10009a26 	beq	r2,zero,200c98c <___vfiprintf_internal_r+0x924>
 200c724:	d9002217 	ldw	r4,136(sp)
 200c728:	d8001d85 	stb	zero,118(sp)
 200c72c:	20800204 	addi	r2,r4,8
 200c730:	24c00017 	ldw	r19,0(r4)
 200c734:	25000117 	ldw	r20,4(r4)
 200c738:	8002a416 	blt	r16,zero,200d1cc <___vfiprintf_internal_r+0x1164>
 200c73c:	013fdfc4 	movi	r4,-129
 200c740:	9d06b03a 	or	r3,r19,r20
 200c744:	d8802215 	stw	r2,136(sp)
 200c748:	8922703a 	and	r17,r17,r4
 200c74c:	18009b26 	beq	r3,zero,200c9bc <___vfiprintf_internal_r+0x954>
 200c750:	002b883a 	mov	r21,zero
 200c754:	ddc01a04 	addi	r23,sp,104
 200c758:	9806d0fa 	srli	r3,r19,3
 200c75c:	a008977a 	slli	r4,r20,29
 200c760:	a028d0fa 	srli	r20,r20,3
 200c764:	9cc001cc 	andi	r19,r19,7
 200c768:	98800c04 	addi	r2,r19,48
 200c76c:	bdffffc4 	addi	r23,r23,-1
 200c770:	20e6b03a 	or	r19,r4,r3
 200c774:	b8800005 	stb	r2,0(r23)
 200c778:	9d06b03a 	or	r3,r19,r20
 200c77c:	183ff61e 	bne	r3,zero,200c758 <___vfiprintf_internal_r+0x6f0>
 200c780:	88c0004c 	andi	r3,r17,1
 200c784:	18021f1e 	bne	r3,zero,200d004 <___vfiprintf_internal_r+0xf9c>
 200c788:	d9401e17 	ldw	r5,120(sp)
 200c78c:	2de9c83a 	sub	r20,r5,r23
 200c790:	003f3806 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200c794:	9cc03fcc 	andi	r19,r19,255
 200c798:	b811883a 	mov	r8,r23
 200c79c:	98034f1e 	bne	r19,zero,200d4dc <___vfiprintf_internal_r+0x1474>
 200c7a0:	008080b4 	movhi	r2,514
 200c7a4:	10ad9c04 	addi	r2,r2,-18832
 200c7a8:	d8802615 	stw	r2,152(sp)
 200c7ac:	8880080c 	andi	r2,r17,32
 200c7b0:	1000ac26 	beq	r2,zero,200ca64 <___vfiprintf_internal_r+0x9fc>
 200c7b4:	d9002217 	ldw	r4,136(sp)
 200c7b8:	24c00017 	ldw	r19,0(r4)
 200c7bc:	25000117 	ldw	r20,4(r4)
 200c7c0:	21000204 	addi	r4,r4,8
 200c7c4:	d9002215 	stw	r4,136(sp)
 200c7c8:	8880004c 	andi	r2,r17,1
 200c7cc:	1001e726 	beq	r2,zero,200cf6c <___vfiprintf_internal_r+0xf04>
 200c7d0:	9d04b03a 	or	r2,r19,r20
 200c7d4:	10025c1e 	bne	r2,zero,200d148 <___vfiprintf_internal_r+0x10e0>
 200c7d8:	d8001d85 	stb	zero,118(sp)
 200c7dc:	80024416 	blt	r16,zero,200d0f0 <___vfiprintf_internal_r+0x1088>
 200c7e0:	00bfdfc4 	movi	r2,-129
 200c7e4:	88a2703a 	and	r17,r17,r2
 200c7e8:	003f1d06 	br	200c460 <___vfiprintf_internal_r+0x3f8>
 200c7ec:	d8c02217 	ldw	r3,136(sp)
 200c7f0:	04c00044 	movi	r19,1
 200c7f4:	b811883a 	mov	r8,r23
 200c7f8:	18800017 	ldw	r2,0(r3)
 200c7fc:	18c00104 	addi	r3,r3,4
 200c800:	d8001d85 	stb	zero,118(sp)
 200c804:	d8801005 	stb	r2,64(sp)
 200c808:	d8c02215 	stw	r3,136(sp)
 200c80c:	9829883a 	mov	r20,r19
 200c810:	ddc01004 	addi	r23,sp,64
 200c814:	0021883a 	mov	r16,zero
 200c818:	003f1e06 	br	200c494 <___vfiprintf_internal_r+0x42c>
 200c81c:	9cc03fcc 	andi	r19,r19,255
 200c820:	b811883a 	mov	r8,r23
 200c824:	9803331e 	bne	r19,zero,200d4f4 <___vfiprintf_internal_r+0x148c>
 200c828:	8880080c 	andi	r2,r17,32
 200c82c:	10004826 	beq	r2,zero,200c950 <___vfiprintf_internal_r+0x8e8>
 200c830:	d9002217 	ldw	r4,136(sp)
 200c834:	20800117 	ldw	r2,4(r4)
 200c838:	24c00017 	ldw	r19,0(r4)
 200c83c:	21000204 	addi	r4,r4,8
 200c840:	d9002215 	stw	r4,136(sp)
 200c844:	1029883a 	mov	r20,r2
 200c848:	10024c16 	blt	r2,zero,200d17c <___vfiprintf_internal_r+0x1114>
 200c84c:	dd401d83 	ldbu	r21,118(sp)
 200c850:	80007116 	blt	r16,zero,200ca18 <___vfiprintf_internal_r+0x9b0>
 200c854:	00ffdfc4 	movi	r3,-129
 200c858:	9d04b03a 	or	r2,r19,r20
 200c85c:	88e2703a 	and	r17,r17,r3
 200c860:	1000d126 	beq	r2,zero,200cba8 <___vfiprintf_internal_r+0xb40>
 200c864:	a0023526 	beq	r20,zero,200d13c <___vfiprintf_internal_r+0x10d4>
 200c868:	ddc01a04 	addi	r23,sp,104
 200c86c:	4039883a 	mov	fp,r8
 200c870:	9809883a 	mov	r4,r19
 200c874:	a00b883a 	mov	r5,r20
 200c878:	01800284 	movi	r6,10
 200c87c:	000f883a 	mov	r7,zero
 200c880:	200e5940 	call	200e594 <__umoddi3>
 200c884:	10800c04 	addi	r2,r2,48
 200c888:	bdffffc4 	addi	r23,r23,-1
 200c88c:	9809883a 	mov	r4,r19
 200c890:	a00b883a 	mov	r5,r20
 200c894:	b8800005 	stb	r2,0(r23)
 200c898:	01800284 	movi	r6,10
 200c89c:	000f883a 	mov	r7,zero
 200c8a0:	200df980 	call	200df98 <__udivdi3>
 200c8a4:	1027883a 	mov	r19,r2
 200c8a8:	10c4b03a 	or	r2,r2,r3
 200c8ac:	1829883a 	mov	r20,r3
 200c8b0:	103fef1e 	bne	r2,zero,200c870 <___vfiprintf_internal_r+0x808>
 200c8b4:	d9001e17 	ldw	r4,120(sp)
 200c8b8:	e011883a 	mov	r8,fp
 200c8bc:	25e9c83a 	sub	r20,r4,r23
 200c8c0:	003eec06 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200c8c4:	d8802307 	ldb	r2,140(sp)
 200c8c8:	1002361e 	bne	r2,zero,200d1a4 <___vfiprintf_internal_r+0x113c>
 200c8cc:	00c00804 	movi	r3,32
 200c8d0:	d8c02305 	stb	r3,140(sp)
 200c8d4:	04c00044 	movi	r19,1
 200c8d8:	b0c00007 	ldb	r3,0(r22)
 200c8dc:	003e3f06 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c8e0:	8c400054 	ori	r17,r17,1
 200c8e4:	b0c00007 	ldb	r3,0(r22)
 200c8e8:	003e3c06 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c8ec:	8c402014 	ori	r17,r17,128
 200c8f0:	b0c00007 	ldb	r3,0(r22)
 200c8f4:	003e3906 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200c8f8:	dc002715 	stw	r16,156(sp)
 200c8fc:	d8002515 	stw	zero,148(sp)
 200c900:	1f3ff404 	addi	fp,r3,-48
 200c904:	0009883a 	mov	r4,zero
 200c908:	b021883a 	mov	r16,r22
 200c90c:	01400284 	movi	r5,10
 200c910:	20019440 	call	2001944 <__mulsi3>
 200c914:	80c00007 	ldb	r3,0(r16)
 200c918:	e089883a 	add	r4,fp,r2
 200c91c:	b5800044 	addi	r22,r22,1
 200c920:	1f3ff404 	addi	fp,r3,-48
 200c924:	b021883a 	mov	r16,r22
 200c928:	af3ff82e 	bgeu	r21,fp,200c90c <___vfiprintf_internal_r+0x8a4>
 200c92c:	d9002515 	stw	r4,148(sp)
 200c930:	dc002717 	ldw	r16,156(sp)
 200c934:	003e2a06 	br	200c1e0 <___vfiprintf_internal_r+0x178>
 200c938:	9cc03fcc 	andi	r19,r19,255
 200c93c:	b811883a 	mov	r8,r23
 200c940:	9802e91e 	bne	r19,zero,200d4e8 <___vfiprintf_internal_r+0x1480>
 200c944:	8c400414 	ori	r17,r17,16
 200c948:	8880080c 	andi	r2,r17,32
 200c94c:	103fb81e 	bne	r2,zero,200c830 <___vfiprintf_internal_r+0x7c8>
 200c950:	8880040c 	andi	r2,r17,16
 200c954:	10022e26 	beq	r2,zero,200d210 <___vfiprintf_internal_r+0x11a8>
 200c958:	d9402217 	ldw	r5,136(sp)
 200c95c:	2cc00017 	ldw	r19,0(r5)
 200c960:	29400104 	addi	r5,r5,4
 200c964:	d9402215 	stw	r5,136(sp)
 200c968:	9829d7fa 	srai	r20,r19,31
 200c96c:	a005883a 	mov	r2,r20
 200c970:	003fb506 	br	200c848 <___vfiprintf_internal_r+0x7e0>
 200c974:	9cc03fcc 	andi	r19,r19,255
 200c978:	b811883a 	mov	r8,r23
 200c97c:	9802fa1e 	bne	r19,zero,200d568 <___vfiprintf_internal_r+0x1500>
 200c980:	8c400414 	ori	r17,r17,16
 200c984:	8880080c 	andi	r2,r17,32
 200c988:	103f661e 	bne	r2,zero,200c724 <___vfiprintf_internal_r+0x6bc>
 200c98c:	8880040c 	andi	r2,r17,16
 200c990:	10020626 	beq	r2,zero,200d1ac <___vfiprintf_internal_r+0x1144>
 200c994:	d9402217 	ldw	r5,136(sp)
 200c998:	d8001d85 	stb	zero,118(sp)
 200c99c:	0029883a 	mov	r20,zero
 200c9a0:	28800104 	addi	r2,r5,4
 200c9a4:	2cc00017 	ldw	r19,0(r5)
 200c9a8:	80020816 	blt	r16,zero,200d1cc <___vfiprintf_internal_r+0x1164>
 200c9ac:	00ffdfc4 	movi	r3,-129
 200c9b0:	d8802215 	stw	r2,136(sp)
 200c9b4:	88e2703a 	and	r17,r17,r3
 200c9b8:	983f651e 	bne	r19,zero,200c750 <___vfiprintf_internal_r+0x6e8>
 200c9bc:	002b883a 	mov	r21,zero
 200c9c0:	8002cf26 	beq	r16,zero,200d500 <___vfiprintf_internal_r+0x1498>
 200c9c4:	0027883a 	mov	r19,zero
 200c9c8:	0029883a 	mov	r20,zero
 200c9cc:	003f6106 	br	200c754 <___vfiprintf_internal_r+0x6ec>
 200c9d0:	9cc03fcc 	andi	r19,r19,255
 200c9d4:	b811883a 	mov	r8,r23
 200c9d8:	9802e01e 	bne	r19,zero,200d55c <___vfiprintf_internal_r+0x14f4>
 200c9dc:	8c400414 	ori	r17,r17,16
 200c9e0:	8880080c 	andi	r2,r17,32
 200c9e4:	1000641e 	bne	r2,zero,200cb78 <___vfiprintf_internal_r+0xb10>
 200c9e8:	8880040c 	andi	r2,r17,16
 200c9ec:	1001c81e 	bne	r2,zero,200d110 <___vfiprintf_internal_r+0x10a8>
 200c9f0:	8880100c 	andi	r2,r17,64
 200c9f4:	d8001d85 	stb	zero,118(sp)
 200c9f8:	1002281e 	bne	r2,zero,200d29c <___vfiprintf_internal_r+0x1234>
 200c9fc:	d9002217 	ldw	r4,136(sp)
 200ca00:	0029883a 	mov	r20,zero
 200ca04:	20800104 	addi	r2,r4,4
 200ca08:	24c00017 	ldw	r19,0(r4)
 200ca0c:	8001c60e 	bge	r16,zero,200d128 <___vfiprintf_internal_r+0x10c0>
 200ca10:	d8802215 	stw	r2,136(sp)
 200ca14:	002b883a 	mov	r21,zero
 200ca18:	9d04b03a 	or	r2,r19,r20
 200ca1c:	103f911e 	bne	r2,zero,200c864 <___vfiprintf_internal_r+0x7fc>
 200ca20:	00800044 	movi	r2,1
 200ca24:	10803fcc 	andi	r2,r2,255
 200ca28:	00c00044 	movi	r3,1
 200ca2c:	10c05f26 	beq	r2,r3,200cbac <___vfiprintf_internal_r+0xb44>
 200ca30:	00c00084 	movi	r3,2
 200ca34:	10ffe31e 	bne	r2,r3,200c9c4 <___vfiprintf_internal_r+0x95c>
 200ca38:	0027883a 	mov	r19,zero
 200ca3c:	0029883a 	mov	r20,zero
 200ca40:	00015106 	br	200cf88 <___vfiprintf_internal_r+0xf20>
 200ca44:	9cc03fcc 	andi	r19,r19,255
 200ca48:	b811883a 	mov	r8,r23
 200ca4c:	9802c01e 	bne	r19,zero,200d550 <___vfiprintf_internal_r+0x14e8>
 200ca50:	014080b4 	movhi	r5,514
 200ca54:	296d9704 	addi	r5,r5,-18852
 200ca58:	d9402615 	stw	r5,152(sp)
 200ca5c:	8880080c 	andi	r2,r17,32
 200ca60:	103f541e 	bne	r2,zero,200c7b4 <___vfiprintf_internal_r+0x74c>
 200ca64:	8880040c 	andi	r2,r17,16
 200ca68:	1001f226 	beq	r2,zero,200d234 <___vfiprintf_internal_r+0x11cc>
 200ca6c:	d9402217 	ldw	r5,136(sp)
 200ca70:	0029883a 	mov	r20,zero
 200ca74:	2cc00017 	ldw	r19,0(r5)
 200ca78:	29400104 	addi	r5,r5,4
 200ca7c:	d9402215 	stw	r5,136(sp)
 200ca80:	003f5106 	br	200c7c8 <___vfiprintf_internal_r+0x760>
 200ca84:	d8c02217 	ldw	r3,136(sp)
 200ca88:	b811883a 	mov	r8,r23
 200ca8c:	d8001d85 	stb	zero,118(sp)
 200ca90:	1dc00017 	ldw	r23,0(r3)
 200ca94:	1f000104 	addi	fp,r3,4
 200ca98:	b8025926 	beq	r23,zero,200d400 <___vfiprintf_internal_r+0x1398>
 200ca9c:	80023316 	blt	r16,zero,200d36c <___vfiprintf_internal_r+0x1304>
 200caa0:	800d883a 	mov	r6,r16
 200caa4:	000b883a 	mov	r5,zero
 200caa8:	b809883a 	mov	r4,r23
 200caac:	da002a15 	stw	r8,168(sp)
 200cab0:	200a1a80 	call	200a1a8 <memchr>
 200cab4:	da002a17 	ldw	r8,168(sp)
 200cab8:	10026826 	beq	r2,zero,200d45c <___vfiprintf_internal_r+0x13f4>
 200cabc:	15e9c83a 	sub	r20,r2,r23
 200cac0:	dd401d83 	ldbu	r21,118(sp)
 200cac4:	df002215 	stw	fp,136(sp)
 200cac8:	0021883a 	mov	r16,zero
 200cacc:	003e6906 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200cad0:	9cc03fcc 	andi	r19,r19,255
 200cad4:	b811883a 	mov	r8,r23
 200cad8:	983fc126 	beq	r19,zero,200c9e0 <___vfiprintf_internal_r+0x978>
 200cadc:	d8c02303 	ldbu	r3,140(sp)
 200cae0:	d8c01d85 	stb	r3,118(sp)
 200cae4:	003fbe06 	br	200c9e0 <___vfiprintf_internal_r+0x978>
 200cae8:	d9002217 	ldw	r4,136(sp)
 200caec:	d9402217 	ldw	r5,136(sp)
 200caf0:	21000017 	ldw	r4,0(r4)
 200caf4:	28800104 	addi	r2,r5,4
 200caf8:	d9002515 	stw	r4,148(sp)
 200cafc:	203e3d16 	blt	r4,zero,200c3f4 <___vfiprintf_internal_r+0x38c>
 200cb00:	d8802215 	stw	r2,136(sp)
 200cb04:	b0c00007 	ldb	r3,0(r22)
 200cb08:	003db406 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200cb0c:	00c00ac4 	movi	r3,43
 200cb10:	d8c02305 	stb	r3,140(sp)
 200cb14:	04c00044 	movi	r19,1
 200cb18:	b0c00007 	ldb	r3,0(r22)
 200cb1c:	003daf06 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200cb20:	b0c00007 	ldb	r3,0(r22)
 200cb24:	01000a84 	movi	r4,42
 200cb28:	b4000044 	addi	r16,r22,1
 200cb2c:	19025e26 	beq	r3,r4,200d4a8 <___vfiprintf_internal_r+0x1440>
 200cb30:	1f3ff404 	addi	fp,r3,-48
 200cb34:	0009883a 	mov	r4,zero
 200cb38:	af025236 	bltu	r21,fp,200d484 <___vfiprintf_internal_r+0x141c>
 200cb3c:	01400284 	movi	r5,10
 200cb40:	20019440 	call	2001944 <__mulsi3>
 200cb44:	80c00007 	ldb	r3,0(r16)
 200cb48:	1709883a 	add	r4,r2,fp
 200cb4c:	85800044 	addi	r22,r16,1
 200cb50:	1f3ff404 	addi	fp,r3,-48
 200cb54:	b021883a 	mov	r16,r22
 200cb58:	af3ff82e 	bgeu	r21,fp,200cb3c <___vfiprintf_internal_r+0xad4>
 200cb5c:	2021883a 	mov	r16,r4
 200cb60:	203d9f0e 	bge	r4,zero,200c1e0 <___vfiprintf_internal_r+0x178>
 200cb64:	043fffc4 	movi	r16,-1
 200cb68:	003d9d06 	br	200c1e0 <___vfiprintf_internal_r+0x178>
 200cb6c:	8c401014 	ori	r17,r17,64
 200cb70:	b0c00007 	ldb	r3,0(r22)
 200cb74:	003d9906 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200cb78:	d9002217 	ldw	r4,136(sp)
 200cb7c:	d8001d85 	stb	zero,118(sp)
 200cb80:	20c00204 	addi	r3,r4,8
 200cb84:	24c00017 	ldw	r19,0(r4)
 200cb88:	25000117 	ldw	r20,4(r4)
 200cb8c:	8001e716 	blt	r16,zero,200d32c <___vfiprintf_internal_r+0x12c4>
 200cb90:	013fdfc4 	movi	r4,-129
 200cb94:	9d04b03a 	or	r2,r19,r20
 200cb98:	d8c02215 	stw	r3,136(sp)
 200cb9c:	8922703a 	and	r17,r17,r4
 200cba0:	002b883a 	mov	r21,zero
 200cba4:	103f2f1e 	bne	r2,zero,200c864 <___vfiprintf_internal_r+0x7fc>
 200cba8:	803e2f26 	beq	r16,zero,200c468 <___vfiprintf_internal_r+0x400>
 200cbac:	0027883a 	mov	r19,zero
 200cbb0:	9cc00c04 	addi	r19,r19,48
 200cbb4:	dcc019c5 	stb	r19,103(sp)
 200cbb8:	dd002817 	ldw	r20,160(sp)
 200cbbc:	ddc019c4 	addi	r23,sp,103
 200cbc0:	003e2c06 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200cbc4:	9cc03fcc 	andi	r19,r19,255
 200cbc8:	b811883a 	mov	r8,r23
 200cbcc:	9802571e 	bne	r19,zero,200d52c <___vfiprintf_internal_r+0x14c4>
 200cbd0:	18005726 	beq	r3,zero,200cd30 <___vfiprintf_internal_r+0xcc8>
 200cbd4:	04c00044 	movi	r19,1
 200cbd8:	d8c01005 	stb	r3,64(sp)
 200cbdc:	d8001d85 	stb	zero,118(sp)
 200cbe0:	9829883a 	mov	r20,r19
 200cbe4:	ddc01004 	addi	r23,sp,64
 200cbe8:	003f0a06 	br	200c814 <___vfiprintf_internal_r+0x7ac>
 200cbec:	d9402017 	ldw	r5,128(sp)
 200cbf0:	d9002117 	ldw	r4,132(sp)
 200cbf4:	d9801a04 	addi	r6,sp,104
 200cbf8:	da802a15 	stw	r10,168(sp)
 200cbfc:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200cc00:	da802a17 	ldw	r10,168(sp)
 200cc04:	1000501e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cc08:	d9801b17 	ldw	r6,108(sp)
 200cc0c:	d8801c17 	ldw	r2,112(sp)
 200cc10:	d811883a 	mov	r8,sp
 200cc14:	31000044 	addi	r4,r6,1
 200cc18:	003e3606 	br	200c4f4 <___vfiprintf_internal_r+0x48c>
 200cc1c:	d9001b17 	ldw	r4,108(sp)
 200cc20:	d8801c17 	ldw	r2,112(sp)
 200cc24:	21400044 	addi	r5,r4,1
 200cc28:	d9801d87 	ldb	r6,118(sp)
 200cc2c:	303e5226 	beq	r6,zero,200c578 <___vfiprintf_internal_r+0x510>
 200cc30:	01800044 	movi	r6,1
 200cc34:	d9001d84 	addi	r4,sp,118
 200cc38:	1185883a 	add	r2,r2,r6
 200cc3c:	41000015 	stw	r4,0(r8)
 200cc40:	41800115 	stw	r6,4(r8)
 200cc44:	d8801c15 	stw	r2,112(sp)
 200cc48:	d9401b15 	stw	r5,108(sp)
 200cc4c:	010001c4 	movi	r4,7
 200cc50:	2140b00e 	bge	r4,r5,200cf14 <___vfiprintf_internal_r+0xeac>
 200cc54:	1000f61e 	bne	r2,zero,200d030 <___vfiprintf_internal_r+0xfc8>
 200cc58:	3800b31e 	bne	r7,zero,200cf28 <___vfiprintf_internal_r+0xec0>
 200cc5c:	0009883a 	mov	r4,zero
 200cc60:	300b883a 	mov	r5,r6
 200cc64:	d811883a 	mov	r8,sp
 200cc68:	01802004 	movi	r6,128
 200cc6c:	19be5226 	beq	r3,r6,200c5b8 <___vfiprintf_internal_r+0x550>
 200cc70:	8521c83a 	sub	r16,r16,r20
 200cc74:	043e790e 	bge	zero,r16,200c65c <___vfiprintf_internal_r+0x5f4>
 200cc78:	05400404 	movi	r21,16
 200cc7c:	ac01b00e 	bge	r21,r16,200d340 <___vfiprintf_internal_r+0x12d8>
 200cc80:	014080b4 	movhi	r5,514
 200cc84:	296dfc04 	addi	r5,r5,-18448
 200cc88:	d9402315 	stw	r5,140(sp)
 200cc8c:	070001c4 	movi	fp,7
 200cc90:	00000506 	br	200cca8 <___vfiprintf_internal_r+0xc40>
 200cc94:	21400084 	addi	r5,r4,2
 200cc98:	42000204 	addi	r8,r8,8
 200cc9c:	1809883a 	mov	r4,r3
 200cca0:	843ffc04 	addi	r16,r16,-16
 200cca4:	ac000d0e 	bge	r21,r16,200ccdc <___vfiprintf_internal_r+0xc74>
 200cca8:	10800404 	addi	r2,r2,16
 200ccac:	20c00044 	addi	r3,r4,1
 200ccb0:	44800015 	stw	r18,0(r8)
 200ccb4:	45400115 	stw	r21,4(r8)
 200ccb8:	d8801c15 	stw	r2,112(sp)
 200ccbc:	d8c01b15 	stw	r3,108(sp)
 200ccc0:	e0fff40e 	bge	fp,r3,200cc94 <___vfiprintf_internal_r+0xc2c>
 200ccc4:	1000101e 	bne	r2,zero,200cd08 <___vfiprintf_internal_r+0xca0>
 200ccc8:	843ffc04 	addi	r16,r16,-16
 200cccc:	01400044 	movi	r5,1
 200ccd0:	0009883a 	mov	r4,zero
 200ccd4:	d811883a 	mov	r8,sp
 200ccd8:	ac3ff316 	blt	r21,r16,200cca8 <___vfiprintf_internal_r+0xc40>
 200ccdc:	d8c02317 	ldw	r3,140(sp)
 200cce0:	1405883a 	add	r2,r2,r16
 200cce4:	44000115 	stw	r16,4(r8)
 200cce8:	40c00015 	stw	r3,0(r8)
 200ccec:	d8801c15 	stw	r2,112(sp)
 200ccf0:	d9401b15 	stw	r5,108(sp)
 200ccf4:	00c001c4 	movi	r3,7
 200ccf8:	19401916 	blt	r3,r5,200cd60 <___vfiprintf_internal_r+0xcf8>
 200ccfc:	42000204 	addi	r8,r8,8
 200cd00:	29400044 	addi	r5,r5,1
 200cd04:	003e5506 	br	200c65c <___vfiprintf_internal_r+0x5f4>
 200cd08:	d9402017 	ldw	r5,128(sp)
 200cd0c:	d9002117 	ldw	r4,132(sp)
 200cd10:	d9801a04 	addi	r6,sp,104
 200cd14:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200cd18:	10000b1e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cd1c:	d9001b17 	ldw	r4,108(sp)
 200cd20:	d8801c17 	ldw	r2,112(sp)
 200cd24:	d811883a 	mov	r8,sp
 200cd28:	21400044 	addi	r5,r4,1
 200cd2c:	003fdc06 	br	200cca0 <___vfiprintf_internal_r+0xc38>
 200cd30:	d8801c17 	ldw	r2,112(sp)
 200cd34:	10000426 	beq	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cd38:	d9402017 	ldw	r5,128(sp)
 200cd3c:	d9002117 	ldw	r4,132(sp)
 200cd40:	d9801a04 	addi	r6,sp,104
 200cd44:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200cd48:	d9402017 	ldw	r5,128(sp)
 200cd4c:	2880030b 	ldhu	r2,12(r5)
 200cd50:	1080100c 	andi	r2,r2,64
 200cd54:	10014d1e 	bne	r2,zero,200d28c <___vfiprintf_internal_r+0x1224>
 200cd58:	d8802417 	ldw	r2,144(sp)
 200cd5c:	003d9706 	br	200c3bc <___vfiprintf_internal_r+0x354>
 200cd60:	1000d21e 	bne	r2,zero,200d0ac <___vfiprintf_internal_r+0x1044>
 200cd64:	00c00044 	movi	r3,1
 200cd68:	a005883a 	mov	r2,r20
 200cd6c:	ddc00015 	stw	r23,0(sp)
 200cd70:	dd000115 	stw	r20,4(sp)
 200cd74:	dd001c15 	stw	r20,112(sp)
 200cd78:	d8c01b15 	stw	r3,108(sp)
 200cd7c:	d811883a 	mov	r8,sp
 200cd80:	42000204 	addi	r8,r8,8
 200cd84:	8c40010c 	andi	r17,r17,4
 200cd88:	88004026 	beq	r17,zero,200ce8c <___vfiprintf_internal_r+0xe24>
 200cd8c:	d9002517 	ldw	r4,148(sp)
 200cd90:	24e3c83a 	sub	r17,r4,r19
 200cd94:	04403d0e 	bge	zero,r17,200ce8c <___vfiprintf_internal_r+0xe24>
 200cd98:	04000404 	movi	r16,16
 200cd9c:	8441a90e 	bge	r16,r17,200d444 <___vfiprintf_internal_r+0x13dc>
 200cda0:	00c080b4 	movhi	r3,514
 200cda4:	18ee0004 	addi	r3,r3,-18432
 200cda8:	d9001b17 	ldw	r4,108(sp)
 200cdac:	d8c02315 	stw	r3,140(sp)
 200cdb0:	050001c4 	movi	r20,7
 200cdb4:	dd402117 	ldw	r21,132(sp)
 200cdb8:	ddc02017 	ldw	r23,128(sp)
 200cdbc:	00000506 	br	200cdd4 <___vfiprintf_internal_r+0xd6c>
 200cdc0:	21400084 	addi	r5,r4,2
 200cdc4:	42000204 	addi	r8,r8,8
 200cdc8:	1809883a 	mov	r4,r3
 200cdcc:	8c7ffc04 	addi	r17,r17,-16
 200cdd0:	84400f0e 	bge	r16,r17,200ce10 <___vfiprintf_internal_r+0xda8>
 200cdd4:	014080b4 	movhi	r5,514
 200cdd8:	10800404 	addi	r2,r2,16
 200cddc:	20c00044 	addi	r3,r4,1
 200cde0:	296e0004 	addi	r5,r5,-18432
 200cde4:	41400015 	stw	r5,0(r8)
 200cde8:	44000115 	stw	r16,4(r8)
 200cdec:	d8801c15 	stw	r2,112(sp)
 200cdf0:	d8c01b15 	stw	r3,108(sp)
 200cdf4:	a0fff20e 	bge	r20,r3,200cdc0 <___vfiprintf_internal_r+0xd58>
 200cdf8:	1000141e 	bne	r2,zero,200ce4c <___vfiprintf_internal_r+0xde4>
 200cdfc:	8c7ffc04 	addi	r17,r17,-16
 200ce00:	01400044 	movi	r5,1
 200ce04:	0009883a 	mov	r4,zero
 200ce08:	d811883a 	mov	r8,sp
 200ce0c:	847ff116 	blt	r16,r17,200cdd4 <___vfiprintf_internal_r+0xd6c>
 200ce10:	d8c02317 	ldw	r3,140(sp)
 200ce14:	1445883a 	add	r2,r2,r17
 200ce18:	44400115 	stw	r17,4(r8)
 200ce1c:	40c00015 	stw	r3,0(r8)
 200ce20:	d8801c15 	stw	r2,112(sp)
 200ce24:	d9401b15 	stw	r5,108(sp)
 200ce28:	00c001c4 	movi	r3,7
 200ce2c:	1940170e 	bge	r3,r5,200ce8c <___vfiprintf_internal_r+0xe24>
 200ce30:	1000101e 	bne	r2,zero,200ce74 <___vfiprintf_internal_r+0xe0c>
 200ce34:	d8802517 	ldw	r2,148(sp)
 200ce38:	14c11616 	blt	r2,r19,200d294 <___vfiprintf_internal_r+0x122c>
 200ce3c:	d9002417 	ldw	r4,144(sp)
 200ce40:	2089883a 	add	r4,r4,r2
 200ce44:	d9002415 	stw	r4,144(sp)
 200ce48:	003e1806 	br	200c6ac <___vfiprintf_internal_r+0x644>
 200ce4c:	d9801a04 	addi	r6,sp,104
 200ce50:	b80b883a 	mov	r5,r23
 200ce54:	a809883a 	mov	r4,r21
 200ce58:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200ce5c:	103fba1e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200ce60:	d9001b17 	ldw	r4,108(sp)
 200ce64:	d8801c17 	ldw	r2,112(sp)
 200ce68:	d811883a 	mov	r8,sp
 200ce6c:	21400044 	addi	r5,r4,1
 200ce70:	003fd606 	br	200cdcc <___vfiprintf_internal_r+0xd64>
 200ce74:	d9402017 	ldw	r5,128(sp)
 200ce78:	d9002117 	ldw	r4,132(sp)
 200ce7c:	d9801a04 	addi	r6,sp,104
 200ce80:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200ce84:	103fb01e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200ce88:	d8801c17 	ldw	r2,112(sp)
 200ce8c:	d8c02517 	ldw	r3,148(sp)
 200ce90:	1cc0010e 	bge	r3,r19,200ce98 <___vfiprintf_internal_r+0xe30>
 200ce94:	9807883a 	mov	r3,r19
 200ce98:	d9002417 	ldw	r4,144(sp)
 200ce9c:	20c9883a 	add	r4,r4,r3
 200cea0:	d9002415 	stw	r4,144(sp)
 200cea4:	103e0126 	beq	r2,zero,200c6ac <___vfiprintf_internal_r+0x644>
 200cea8:	d9402017 	ldw	r5,128(sp)
 200ceac:	d9002117 	ldw	r4,132(sp)
 200ceb0:	d9801a04 	addi	r6,sp,104
 200ceb4:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200ceb8:	103dfc26 	beq	r2,zero,200c6ac <___vfiprintf_internal_r+0x644>
 200cebc:	003fa206 	br	200cd48 <___vfiprintf_internal_r+0xce0>
 200cec0:	d9402017 	ldw	r5,128(sp)
 200cec4:	d9002117 	ldw	r4,132(sp)
 200cec8:	d9801a04 	addi	r6,sp,104
 200cecc:	d9c02b15 	stw	r7,172(sp)
 200ced0:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200ced4:	d9c02b17 	ldw	r7,172(sp)
 200ced8:	103f9b1e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cedc:	d9001b17 	ldw	r4,108(sp)
 200cee0:	d8801c17 	ldw	r2,112(sp)
 200cee4:	d811883a 	mov	r8,sp
 200cee8:	21800044 	addi	r6,r4,1
 200ceec:	003dbf06 	br	200c5ec <___vfiprintf_internal_r+0x584>
 200cef0:	1000d81e 	bne	r2,zero,200d254 <___vfiprintf_internal_r+0x11ec>
 200cef4:	d9001d87 	ldb	r4,118(sp)
 200cef8:	20000a26 	beq	r4,zero,200cf24 <___vfiprintf_internal_r+0xebc>
 200cefc:	00800044 	movi	r2,1
 200cf00:	d9001d84 	addi	r4,sp,118
 200cf04:	100b883a 	mov	r5,r2
 200cf08:	d9000015 	stw	r4,0(sp)
 200cf0c:	d8800115 	stw	r2,4(sp)
 200cf10:	d811883a 	mov	r8,sp
 200cf14:	2809883a 	mov	r4,r5
 200cf18:	42000204 	addi	r8,r8,8
 200cf1c:	29400044 	addi	r5,r5,1
 200cf20:	003d9506 	br	200c578 <___vfiprintf_internal_r+0x510>
 200cf24:	3800fd26 	beq	r7,zero,200d31c <___vfiprintf_internal_r+0x12b4>
 200cf28:	00800084 	movi	r2,2
 200cf2c:	d9001d04 	addi	r4,sp,116
 200cf30:	d9000015 	stw	r4,0(sp)
 200cf34:	d8800115 	stw	r2,4(sp)
 200cf38:	01400044 	movi	r5,1
 200cf3c:	d811883a 	mov	r8,sp
 200cf40:	2809883a 	mov	r4,r5
 200cf44:	42000204 	addi	r8,r8,8
 200cf48:	29400044 	addi	r5,r5,1
 200cf4c:	003f4606 	br	200cc68 <___vfiprintf_internal_r+0xc00>
 200cf50:	d8802517 	ldw	r2,148(sp)
 200cf54:	14c0010e 	bge	r2,r19,200cf5c <___vfiprintf_internal_r+0xef4>
 200cf58:	9805883a 	mov	r2,r19
 200cf5c:	d9402417 	ldw	r5,144(sp)
 200cf60:	288b883a 	add	r5,r5,r2
 200cf64:	d9402415 	stw	r5,144(sp)
 200cf68:	003dd006 	br	200c6ac <___vfiprintf_internal_r+0x644>
 200cf6c:	d8001d85 	stb	zero,118(sp)
 200cf70:	80005d16 	blt	r16,zero,200d0e8 <___vfiprintf_internal_r+0x1080>
 200cf74:	00ffdfc4 	movi	r3,-129
 200cf78:	9d04b03a 	or	r2,r19,r20
 200cf7c:	88e2703a 	and	r17,r17,r3
 200cf80:	103d3726 	beq	r2,zero,200c460 <___vfiprintf_internal_r+0x3f8>
 200cf84:	002b883a 	mov	r21,zero
 200cf88:	d9002617 	ldw	r4,152(sp)
 200cf8c:	ddc01a04 	addi	r23,sp,104
 200cf90:	988003cc 	andi	r2,r19,15
 200cf94:	a006973a 	slli	r3,r20,28
 200cf98:	2085883a 	add	r2,r4,r2
 200cf9c:	9826d13a 	srli	r19,r19,4
 200cfa0:	10800003 	ldbu	r2,0(r2)
 200cfa4:	a028d13a 	srli	r20,r20,4
 200cfa8:	bdffffc4 	addi	r23,r23,-1
 200cfac:	1ce6b03a 	or	r19,r3,r19
 200cfb0:	b8800005 	stb	r2,0(r23)
 200cfb4:	9d04b03a 	or	r2,r19,r20
 200cfb8:	103ff51e 	bne	r2,zero,200cf90 <___vfiprintf_internal_r+0xf28>
 200cfbc:	d8801e17 	ldw	r2,120(sp)
 200cfc0:	15e9c83a 	sub	r20,r2,r23
 200cfc4:	003d2b06 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200cfc8:	d9402017 	ldw	r5,128(sp)
 200cfcc:	d9002117 	ldw	r4,132(sp)
 200cfd0:	d9801a04 	addi	r6,sp,104
 200cfd4:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200cfd8:	103f5b1e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cfdc:	d8801c17 	ldw	r2,112(sp)
 200cfe0:	d811883a 	mov	r8,sp
 200cfe4:	003f6706 	br	200cd84 <___vfiprintf_internal_r+0xd1c>
 200cfe8:	d9402017 	ldw	r5,128(sp)
 200cfec:	d9002117 	ldw	r4,132(sp)
 200cff0:	d9801a04 	addi	r6,sp,104
 200cff4:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200cff8:	103f531e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200cffc:	d811883a 	mov	r8,sp
 200d000:	003cd906 	br	200c368 <___vfiprintf_internal_r+0x300>
 200d004:	10803fcc 	andi	r2,r2,255
 200d008:	1080201c 	xori	r2,r2,128
 200d00c:	10bfe004 	addi	r2,r2,-128
 200d010:	00c00c04 	movi	r3,48
 200d014:	10ffe926 	beq	r2,r3,200cfbc <___vfiprintf_internal_r+0xf54>
 200d018:	b8ffffc5 	stb	r3,-1(r23)
 200d01c:	d8c01e17 	ldw	r3,120(sp)
 200d020:	b8bfffc4 	addi	r2,r23,-1
 200d024:	102f883a 	mov	r23,r2
 200d028:	18a9c83a 	sub	r20,r3,r2
 200d02c:	003d1106 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200d030:	d9402017 	ldw	r5,128(sp)
 200d034:	d9002117 	ldw	r4,132(sp)
 200d038:	d9801a04 	addi	r6,sp,104
 200d03c:	d8c02a15 	stw	r3,168(sp)
 200d040:	d9c02b15 	stw	r7,172(sp)
 200d044:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200d048:	d8c02a17 	ldw	r3,168(sp)
 200d04c:	d9c02b17 	ldw	r7,172(sp)
 200d050:	103f3d1e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200d054:	d9001b17 	ldw	r4,108(sp)
 200d058:	d8801c17 	ldw	r2,112(sp)
 200d05c:	d811883a 	mov	r8,sp
 200d060:	21400044 	addi	r5,r4,1
 200d064:	003d4406 	br	200c578 <___vfiprintf_internal_r+0x510>
 200d068:	d9402017 	ldw	r5,128(sp)
 200d06c:	d9002117 	ldw	r4,132(sp)
 200d070:	d9801a04 	addi	r6,sp,104
 200d074:	d8c02a15 	stw	r3,168(sp)
 200d078:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200d07c:	d8c02a17 	ldw	r3,168(sp)
 200d080:	103f311e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200d084:	d9001b17 	ldw	r4,108(sp)
 200d088:	d8801c17 	ldw	r2,112(sp)
 200d08c:	d811883a 	mov	r8,sp
 200d090:	21400044 	addi	r5,r4,1
 200d094:	003ef406 	br	200cc68 <___vfiprintf_internal_r+0xc00>
 200d098:	1000bd1e 	bne	r2,zero,200d390 <___vfiprintf_internal_r+0x1328>
 200d09c:	01400044 	movi	r5,1
 200d0a0:	0009883a 	mov	r4,zero
 200d0a4:	d811883a 	mov	r8,sp
 200d0a8:	003ef106 	br	200cc70 <___vfiprintf_internal_r+0xc08>
 200d0ac:	d9402017 	ldw	r5,128(sp)
 200d0b0:	d9002117 	ldw	r4,132(sp)
 200d0b4:	d9801a04 	addi	r6,sp,104
 200d0b8:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200d0bc:	103f221e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200d0c0:	d9401b17 	ldw	r5,108(sp)
 200d0c4:	d8801c17 	ldw	r2,112(sp)
 200d0c8:	d811883a 	mov	r8,sp
 200d0cc:	29400044 	addi	r5,r5,1
 200d0d0:	003d6206 	br	200c65c <___vfiprintf_internal_r+0x5f4>
 200d0d4:	014080b4 	movhi	r5,514
 200d0d8:	296d9c04 	addi	r5,r5,-18832
 200d0dc:	d9402615 	stw	r5,152(sp)
 200d0e0:	d8c02215 	stw	r3,136(sp)
 200d0e4:	1023883a 	mov	r17,r2
 200d0e8:	9d04b03a 	or	r2,r19,r20
 200d0ec:	103fa51e 	bne	r2,zero,200cf84 <___vfiprintf_internal_r+0xf1c>
 200d0f0:	002b883a 	mov	r21,zero
 200d0f4:	00800084 	movi	r2,2
 200d0f8:	003e4a06 	br	200ca24 <___vfiprintf_internal_r+0x9bc>
 200d0fc:	014080b4 	movhi	r5,514
 200d100:	296d9c04 	addi	r5,r5,-18832
 200d104:	002b883a 	mov	r21,zero
 200d108:	d9402615 	stw	r5,152(sp)
 200d10c:	003f9e06 	br	200cf88 <___vfiprintf_internal_r+0xf20>
 200d110:	d9402217 	ldw	r5,136(sp)
 200d114:	d8001d85 	stb	zero,118(sp)
 200d118:	0029883a 	mov	r20,zero
 200d11c:	28800104 	addi	r2,r5,4
 200d120:	2cc00017 	ldw	r19,0(r5)
 200d124:	803e3a16 	blt	r16,zero,200ca10 <___vfiprintf_internal_r+0x9a8>
 200d128:	00ffdfc4 	movi	r3,-129
 200d12c:	d8802215 	stw	r2,136(sp)
 200d130:	88e2703a 	and	r17,r17,r3
 200d134:	002b883a 	mov	r21,zero
 200d138:	983e9b26 	beq	r19,zero,200cba8 <___vfiprintf_internal_r+0xb40>
 200d13c:	00800244 	movi	r2,9
 200d140:	14fdc936 	bltu	r2,r19,200c868 <___vfiprintf_internal_r+0x800>
 200d144:	003e9a06 	br	200cbb0 <___vfiprintf_internal_r+0xb48>
 200d148:	00800c04 	movi	r2,48
 200d14c:	d8c01d45 	stb	r3,117(sp)
 200d150:	d8801d05 	stb	r2,116(sp)
 200d154:	d8001d85 	stb	zero,118(sp)
 200d158:	88c00094 	ori	r3,r17,2
 200d15c:	80009c16 	blt	r16,zero,200d3d0 <___vfiprintf_internal_r+0x1368>
 200d160:	00bfdfc4 	movi	r2,-129
 200d164:	88a2703a 	and	r17,r17,r2
 200d168:	8c400094 	ori	r17,r17,2
 200d16c:	002b883a 	mov	r21,zero
 200d170:	003f8506 	br	200cf88 <___vfiprintf_internal_r+0xf20>
 200d174:	b029883a 	mov	r20,r22
 200d178:	003c0b06 	br	200c1a8 <___vfiprintf_internal_r+0x140>
 200d17c:	04e7c83a 	sub	r19,zero,r19
 200d180:	05400b44 	movi	r21,45
 200d184:	9804c03a 	cmpne	r2,r19,zero
 200d188:	0529c83a 	sub	r20,zero,r20
 200d18c:	dd401d85 	stb	r21,118(sp)
 200d190:	a0a9c83a 	sub	r20,r20,r2
 200d194:	80009716 	blt	r16,zero,200d3f4 <___vfiprintf_internal_r+0x138c>
 200d198:	00bfdfc4 	movi	r2,-129
 200d19c:	88a2703a 	and	r17,r17,r2
 200d1a0:	003db006 	br	200c864 <___vfiprintf_internal_r+0x7fc>
 200d1a4:	b0c00007 	ldb	r3,0(r22)
 200d1a8:	003c0c06 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200d1ac:	8880100c 	andi	r2,r17,64
 200d1b0:	d8001d85 	stb	zero,118(sp)
 200d1b4:	1000461e 	bne	r2,zero,200d2d0 <___vfiprintf_internal_r+0x1268>
 200d1b8:	d9002217 	ldw	r4,136(sp)
 200d1bc:	0029883a 	mov	r20,zero
 200d1c0:	20800104 	addi	r2,r4,4
 200d1c4:	24c00017 	ldw	r19,0(r4)
 200d1c8:	803df80e 	bge	r16,zero,200c9ac <___vfiprintf_internal_r+0x944>
 200d1cc:	9d06b03a 	or	r3,r19,r20
 200d1d0:	d8802215 	stw	r2,136(sp)
 200d1d4:	183d5e1e 	bne	r3,zero,200c750 <___vfiprintf_internal_r+0x6e8>
 200d1d8:	002b883a 	mov	r21,zero
 200d1dc:	0005883a 	mov	r2,zero
 200d1e0:	003e1006 	br	200ca24 <___vfiprintf_internal_r+0x9bc>
 200d1e4:	8880040c 	andi	r2,r17,16
 200d1e8:	1000321e 	bne	r2,zero,200d2b4 <___vfiprintf_internal_r+0x124c>
 200d1ec:	8c40100c 	andi	r17,r17,64
 200d1f0:	88008d26 	beq	r17,zero,200d428 <___vfiprintf_internal_r+0x13c0>
 200d1f4:	d9402217 	ldw	r5,136(sp)
 200d1f8:	d8c02417 	ldw	r3,144(sp)
 200d1fc:	28800017 	ldw	r2,0(r5)
 200d200:	29400104 	addi	r5,r5,4
 200d204:	d9402215 	stw	r5,136(sp)
 200d208:	10c0000d 	sth	r3,0(r2)
 200d20c:	003bca06 	br	200c138 <___vfiprintf_internal_r+0xd0>
 200d210:	8880100c 	andi	r2,r17,64
 200d214:	10003a26 	beq	r2,zero,200d300 <___vfiprintf_internal_r+0x1298>
 200d218:	d8802217 	ldw	r2,136(sp)
 200d21c:	14c0000f 	ldh	r19,0(r2)
 200d220:	10800104 	addi	r2,r2,4
 200d224:	d8802215 	stw	r2,136(sp)
 200d228:	9829d7fa 	srai	r20,r19,31
 200d22c:	a005883a 	mov	r2,r20
 200d230:	003d8506 	br	200c848 <___vfiprintf_internal_r+0x7e0>
 200d234:	8880100c 	andi	r2,r17,64
 200d238:	10002b26 	beq	r2,zero,200d2e8 <___vfiprintf_internal_r+0x1280>
 200d23c:	d8802217 	ldw	r2,136(sp)
 200d240:	0029883a 	mov	r20,zero
 200d244:	14c0000b 	ldhu	r19,0(r2)
 200d248:	10800104 	addi	r2,r2,4
 200d24c:	d8802215 	stw	r2,136(sp)
 200d250:	003d5d06 	br	200c7c8 <___vfiprintf_internal_r+0x760>
 200d254:	d9402017 	ldw	r5,128(sp)
 200d258:	d9002117 	ldw	r4,132(sp)
 200d25c:	d9801a04 	addi	r6,sp,104
 200d260:	d8c02a15 	stw	r3,168(sp)
 200d264:	d9c02b15 	stw	r7,172(sp)
 200d268:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200d26c:	d8c02a17 	ldw	r3,168(sp)
 200d270:	d9c02b17 	ldw	r7,172(sp)
 200d274:	103eb41e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200d278:	d9001b17 	ldw	r4,108(sp)
 200d27c:	d8801c17 	ldw	r2,112(sp)
 200d280:	d811883a 	mov	r8,sp
 200d284:	21400044 	addi	r5,r4,1
 200d288:	003e6706 	br	200cc28 <___vfiprintf_internal_r+0xbc0>
 200d28c:	00bfffc4 	movi	r2,-1
 200d290:	003c4a06 	br	200c3bc <___vfiprintf_internal_r+0x354>
 200d294:	9805883a 	mov	r2,r19
 200d298:	003ee806 	br	200ce3c <___vfiprintf_internal_r+0xdd4>
 200d29c:	d8c02217 	ldw	r3,136(sp)
 200d2a0:	0029883a 	mov	r20,zero
 200d2a4:	18800104 	addi	r2,r3,4
 200d2a8:	1cc0000b 	ldhu	r19,0(r3)
 200d2ac:	803f9e0e 	bge	r16,zero,200d128 <___vfiprintf_internal_r+0x10c0>
 200d2b0:	003dd706 	br	200ca10 <___vfiprintf_internal_r+0x9a8>
 200d2b4:	d8c02217 	ldw	r3,136(sp)
 200d2b8:	d9002417 	ldw	r4,144(sp)
 200d2bc:	18800017 	ldw	r2,0(r3)
 200d2c0:	18c00104 	addi	r3,r3,4
 200d2c4:	d8c02215 	stw	r3,136(sp)
 200d2c8:	11000015 	stw	r4,0(r2)
 200d2cc:	003b9a06 	br	200c138 <___vfiprintf_internal_r+0xd0>
 200d2d0:	d8c02217 	ldw	r3,136(sp)
 200d2d4:	0029883a 	mov	r20,zero
 200d2d8:	18800104 	addi	r2,r3,4
 200d2dc:	1cc0000b 	ldhu	r19,0(r3)
 200d2e0:	803db20e 	bge	r16,zero,200c9ac <___vfiprintf_internal_r+0x944>
 200d2e4:	003fb906 	br	200d1cc <___vfiprintf_internal_r+0x1164>
 200d2e8:	d9002217 	ldw	r4,136(sp)
 200d2ec:	0029883a 	mov	r20,zero
 200d2f0:	24c00017 	ldw	r19,0(r4)
 200d2f4:	21000104 	addi	r4,r4,4
 200d2f8:	d9002215 	stw	r4,136(sp)
 200d2fc:	003d3206 	br	200c7c8 <___vfiprintf_internal_r+0x760>
 200d300:	d8c02217 	ldw	r3,136(sp)
 200d304:	1cc00017 	ldw	r19,0(r3)
 200d308:	18c00104 	addi	r3,r3,4
 200d30c:	d8c02215 	stw	r3,136(sp)
 200d310:	9829d7fa 	srai	r20,r19,31
 200d314:	a005883a 	mov	r2,r20
 200d318:	003d4b06 	br	200c848 <___vfiprintf_internal_r+0x7e0>
 200d31c:	0009883a 	mov	r4,zero
 200d320:	01400044 	movi	r5,1
 200d324:	d811883a 	mov	r8,sp
 200d328:	003e4f06 	br	200cc68 <___vfiprintf_internal_r+0xc00>
 200d32c:	d8c02215 	stw	r3,136(sp)
 200d330:	002b883a 	mov	r21,zero
 200d334:	003db806 	br	200ca18 <___vfiprintf_internal_r+0x9b0>
 200d338:	d811883a 	mov	r8,sp
 200d33c:	003e9606 	br	200cd98 <___vfiprintf_internal_r+0xd30>
 200d340:	010080b4 	movhi	r4,514
 200d344:	212dfc04 	addi	r4,r4,-18448
 200d348:	d9002315 	stw	r4,140(sp)
 200d34c:	003e6306 	br	200ccdc <___vfiprintf_internal_r+0xc74>
 200d350:	b0c00043 	ldbu	r3,1(r22)
 200d354:	8c400814 	ori	r17,r17,32
 200d358:	b5800044 	addi	r22,r22,1
 200d35c:	18c03fcc 	andi	r3,r3,255
 200d360:	18c0201c 	xori	r3,r3,128
 200d364:	18ffe004 	addi	r3,r3,-128
 200d368:	003b9c06 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200d36c:	b809883a 	mov	r4,r23
 200d370:	da002a15 	stw	r8,168(sp)
 200d374:	20047d80 	call	20047d8 <strlen>
 200d378:	1029883a 	mov	r20,r2
 200d37c:	dd401d83 	ldbu	r21,118(sp)
 200d380:	df002215 	stw	fp,136(sp)
 200d384:	0021883a 	mov	r16,zero
 200d388:	da002a17 	ldw	r8,168(sp)
 200d38c:	003c3906 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200d390:	d9402017 	ldw	r5,128(sp)
 200d394:	d9002117 	ldw	r4,132(sp)
 200d398:	d9801a04 	addi	r6,sp,104
 200d39c:	200bf540 	call	200bf54 <__sprint_r.part.0>
 200d3a0:	103e691e 	bne	r2,zero,200cd48 <___vfiprintf_internal_r+0xce0>
 200d3a4:	d9001b17 	ldw	r4,108(sp)
 200d3a8:	d8801c17 	ldw	r2,112(sp)
 200d3ac:	d811883a 	mov	r8,sp
 200d3b0:	21400044 	addi	r5,r4,1
 200d3b4:	003e2e06 	br	200cc70 <___vfiprintf_internal_r+0xc08>
 200d3b8:	010080b4 	movhi	r4,514
 200d3bc:	212e0004 	addi	r4,r4,-18432
 200d3c0:	d9002315 	stw	r4,140(sp)
 200d3c4:	d9001b17 	ldw	r4,108(sp)
 200d3c8:	21000044 	addi	r4,r4,1
 200d3cc:	003c5e06 	br	200c548 <___vfiprintf_internal_r+0x4e0>
 200d3d0:	002b883a 	mov	r21,zero
 200d3d4:	00800084 	movi	r2,2
 200d3d8:	10803fcc 	andi	r2,r2,255
 200d3dc:	01000044 	movi	r4,1
 200d3e0:	11002b26 	beq	r2,r4,200d490 <___vfiprintf_internal_r+0x1428>
 200d3e4:	01000084 	movi	r4,2
 200d3e8:	11002b1e 	bne	r2,r4,200d498 <___vfiprintf_internal_r+0x1430>
 200d3ec:	1823883a 	mov	r17,r3
 200d3f0:	003ee506 	br	200cf88 <___vfiprintf_internal_r+0xf20>
 200d3f4:	8807883a 	mov	r3,r17
 200d3f8:	00800044 	movi	r2,1
 200d3fc:	003ff606 	br	200d3d8 <___vfiprintf_internal_r+0x1370>
 200d400:	00800184 	movi	r2,6
 200d404:	1400012e 	bgeu	r2,r16,200d40c <___vfiprintf_internal_r+0x13a4>
 200d408:	1021883a 	mov	r16,r2
 200d40c:	8029883a 	mov	r20,r16
 200d410:	8027883a 	mov	r19,r16
 200d414:	80002216 	blt	r16,zero,200d4a0 <___vfiprintf_internal_r+0x1438>
 200d418:	05c080b4 	movhi	r23,514
 200d41c:	df002215 	stw	fp,136(sp)
 200d420:	bdeda104 	addi	r23,r23,-18812
 200d424:	003cfb06 	br	200c814 <___vfiprintf_internal_r+0x7ac>
 200d428:	d9002217 	ldw	r4,136(sp)
 200d42c:	d9402417 	ldw	r5,144(sp)
 200d430:	20800017 	ldw	r2,0(r4)
 200d434:	21000104 	addi	r4,r4,4
 200d438:	d9002215 	stw	r4,136(sp)
 200d43c:	11400015 	stw	r5,0(r2)
 200d440:	003b3d06 	br	200c138 <___vfiprintf_internal_r+0xd0>
 200d444:	014080b4 	movhi	r5,514
 200d448:	296e0004 	addi	r5,r5,-18432
 200d44c:	d9402315 	stw	r5,140(sp)
 200d450:	d9401b17 	ldw	r5,108(sp)
 200d454:	29400044 	addi	r5,r5,1
 200d458:	003e6d06 	br	200ce10 <___vfiprintf_internal_r+0xda8>
 200d45c:	8029883a 	mov	r20,r16
 200d460:	dd401d83 	ldbu	r21,118(sp)
 200d464:	df002215 	stw	fp,136(sp)
 200d468:	0021883a 	mov	r16,zero
 200d46c:	003c0106 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200d470:	00c080b4 	movhi	r3,514
 200d474:	18edfc04 	addi	r3,r3,-18448
 200d478:	d8c02315 	stw	r3,140(sp)
 200d47c:	280d883a 	mov	r6,r5
 200d480:	003c6906 	br	200c628 <___vfiprintf_internal_r+0x5c0>
 200d484:	802d883a 	mov	r22,r16
 200d488:	0021883a 	mov	r16,zero
 200d48c:	003b5406 	br	200c1e0 <___vfiprintf_internal_r+0x178>
 200d490:	1823883a 	mov	r17,r3
 200d494:	003cf306 	br	200c864 <___vfiprintf_internal_r+0x7fc>
 200d498:	1823883a 	mov	r17,r3
 200d49c:	003cad06 	br	200c754 <___vfiprintf_internal_r+0x6ec>
 200d4a0:	0027883a 	mov	r19,zero
 200d4a4:	003fdc06 	br	200d418 <___vfiprintf_internal_r+0x13b0>
 200d4a8:	d9402217 	ldw	r5,136(sp)
 200d4ac:	8005883a 	mov	r2,r16
 200d4b0:	b0c00043 	ldbu	r3,1(r22)
 200d4b4:	2c000017 	ldw	r16,0(r5)
 200d4b8:	29000104 	addi	r4,r5,4
 200d4bc:	d9002215 	stw	r4,136(sp)
 200d4c0:	102d883a 	mov	r22,r2
 200d4c4:	803fa50e 	bge	r16,zero,200d35c <___vfiprintf_internal_r+0x12f4>
 200d4c8:	18c03fcc 	andi	r3,r3,255
 200d4cc:	18c0201c 	xori	r3,r3,128
 200d4d0:	043fffc4 	movi	r16,-1
 200d4d4:	18ffe004 	addi	r3,r3,-128
 200d4d8:	003b4006 	br	200c1dc <___vfiprintf_internal_r+0x174>
 200d4dc:	d9402303 	ldbu	r5,140(sp)
 200d4e0:	d9401d85 	stb	r5,118(sp)
 200d4e4:	003cae06 	br	200c7a0 <___vfiprintf_internal_r+0x738>
 200d4e8:	d8c02303 	ldbu	r3,140(sp)
 200d4ec:	d8c01d85 	stb	r3,118(sp)
 200d4f0:	003d1406 	br	200c944 <___vfiprintf_internal_r+0x8dc>
 200d4f4:	d8c02303 	ldbu	r3,140(sp)
 200d4f8:	d8c01d85 	stb	r3,118(sp)
 200d4fc:	003cca06 	br	200c828 <___vfiprintf_internal_r+0x7c0>
 200d500:	8880004c 	andi	r2,r17,1
 200d504:	002b883a 	mov	r21,zero
 200d508:	10000526 	beq	r2,zero,200d520 <___vfiprintf_internal_r+0x14b8>
 200d50c:	00800c04 	movi	r2,48
 200d510:	d88019c5 	stb	r2,103(sp)
 200d514:	dd002817 	ldw	r20,160(sp)
 200d518:	ddc019c4 	addi	r23,sp,103
 200d51c:	003bd506 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200d520:	0029883a 	mov	r20,zero
 200d524:	ddc01a04 	addi	r23,sp,104
 200d528:	003bd206 	br	200c474 <___vfiprintf_internal_r+0x40c>
 200d52c:	d9002303 	ldbu	r4,140(sp)
 200d530:	d9001d85 	stb	r4,118(sp)
 200d534:	003da606 	br	200cbd0 <___vfiprintf_internal_r+0xb68>
 200d538:	d8c02303 	ldbu	r3,140(sp)
 200d53c:	d8c01d85 	stb	r3,118(sp)
 200d540:	003c7606 	br	200c71c <___vfiprintf_internal_r+0x6b4>
 200d544:	d8c02303 	ldbu	r3,140(sp)
 200d548:	d8c01d85 	stb	r3,118(sp)
 200d54c:	003c6506 	br	200c6e4 <___vfiprintf_internal_r+0x67c>
 200d550:	d9002303 	ldbu	r4,140(sp)
 200d554:	d9001d85 	stb	r4,118(sp)
 200d558:	003d3d06 	br	200ca50 <___vfiprintf_internal_r+0x9e8>
 200d55c:	d8c02303 	ldbu	r3,140(sp)
 200d560:	d8c01d85 	stb	r3,118(sp)
 200d564:	003d1d06 	br	200c9dc <___vfiprintf_internal_r+0x974>
 200d568:	d8c02303 	ldbu	r3,140(sp)
 200d56c:	d8c01d85 	stb	r3,118(sp)
 200d570:	003d0306 	br	200c980 <___vfiprintf_internal_r+0x918>

0200d574 <__vfiprintf_internal>:
 200d574:	008080b4 	movhi	r2,514
 200d578:	10b50804 	addi	r2,r2,-11232
 200d57c:	300f883a 	mov	r7,r6
 200d580:	280d883a 	mov	r6,r5
 200d584:	200b883a 	mov	r5,r4
 200d588:	11000017 	ldw	r4,0(r2)
 200d58c:	200c0681 	jmpi	200c068 <___vfiprintf_internal_r>

0200d590 <__sbprintf>:
 200d590:	2880030b 	ldhu	r2,12(r5)
 200d594:	2ac01917 	ldw	r11,100(r5)
 200d598:	2a80038b 	ldhu	r10,14(r5)
 200d59c:	2a400717 	ldw	r9,28(r5)
 200d5a0:	2a000917 	ldw	r8,36(r5)
 200d5a4:	defee204 	addi	sp,sp,-1144
 200d5a8:	00c10004 	movi	r3,1024
 200d5ac:	dc011a15 	stw	r16,1128(sp)
 200d5b0:	10bfff4c 	andi	r2,r2,65533
 200d5b4:	2821883a 	mov	r16,r5
 200d5b8:	d8cb883a 	add	r5,sp,r3
 200d5bc:	dc811c15 	stw	r18,1136(sp)
 200d5c0:	dc411b15 	stw	r17,1132(sp)
 200d5c4:	dfc11d15 	stw	ra,1140(sp)
 200d5c8:	2025883a 	mov	r18,r4
 200d5cc:	d881030d 	sth	r2,1036(sp)
 200d5d0:	dac11915 	stw	r11,1124(sp)
 200d5d4:	da81038d 	sth	r10,1038(sp)
 200d5d8:	da410715 	stw	r9,1052(sp)
 200d5dc:	da010915 	stw	r8,1060(sp)
 200d5e0:	dec10015 	stw	sp,1024(sp)
 200d5e4:	dec10415 	stw	sp,1040(sp)
 200d5e8:	d8c10215 	stw	r3,1032(sp)
 200d5ec:	d8c10515 	stw	r3,1044(sp)
 200d5f0:	d8010615 	stw	zero,1048(sp)
 200d5f4:	200c0680 	call	200c068 <___vfiprintf_internal_r>
 200d5f8:	1023883a 	mov	r17,r2
 200d5fc:	10000416 	blt	r2,zero,200d610 <__sbprintf+0x80>
 200d600:	d9410004 	addi	r5,sp,1024
 200d604:	9009883a 	mov	r4,r18
 200d608:	20088440 	call	2008844 <_fflush_r>
 200d60c:	10000d1e 	bne	r2,zero,200d644 <__sbprintf+0xb4>
 200d610:	d881030b 	ldhu	r2,1036(sp)
 200d614:	1080100c 	andi	r2,r2,64
 200d618:	10000326 	beq	r2,zero,200d628 <__sbprintf+0x98>
 200d61c:	8080030b 	ldhu	r2,12(r16)
 200d620:	10801014 	ori	r2,r2,64
 200d624:	8080030d 	sth	r2,12(r16)
 200d628:	8805883a 	mov	r2,r17
 200d62c:	dfc11d17 	ldw	ra,1140(sp)
 200d630:	dc811c17 	ldw	r18,1136(sp)
 200d634:	dc411b17 	ldw	r17,1132(sp)
 200d638:	dc011a17 	ldw	r16,1128(sp)
 200d63c:	dec11e04 	addi	sp,sp,1144
 200d640:	f800283a 	ret
 200d644:	047fffc4 	movi	r17,-1
 200d648:	003ff106 	br	200d610 <__sbprintf+0x80>

0200d64c <_write_r>:
 200d64c:	defffd04 	addi	sp,sp,-12
 200d650:	2805883a 	mov	r2,r5
 200d654:	dc000015 	stw	r16,0(sp)
 200d658:	040080b4 	movhi	r16,514
 200d65c:	dc400115 	stw	r17,4(sp)
 200d660:	300b883a 	mov	r5,r6
 200d664:	843c2204 	addi	r16,r16,-3960
 200d668:	2023883a 	mov	r17,r4
 200d66c:	380d883a 	mov	r6,r7
 200d670:	1009883a 	mov	r4,r2
 200d674:	dfc00215 	stw	ra,8(sp)
 200d678:	80000015 	stw	zero,0(r16)
 200d67c:	201090c0 	call	201090c <write>
 200d680:	00ffffc4 	movi	r3,-1
 200d684:	10c00526 	beq	r2,r3,200d69c <_write_r+0x50>
 200d688:	dfc00217 	ldw	ra,8(sp)
 200d68c:	dc400117 	ldw	r17,4(sp)
 200d690:	dc000017 	ldw	r16,0(sp)
 200d694:	dec00304 	addi	sp,sp,12
 200d698:	f800283a 	ret
 200d69c:	80c00017 	ldw	r3,0(r16)
 200d6a0:	183ff926 	beq	r3,zero,200d688 <_write_r+0x3c>
 200d6a4:	88c00015 	stw	r3,0(r17)
 200d6a8:	003ff706 	br	200d688 <_write_r+0x3c>

0200d6ac <_close_r>:
 200d6ac:	defffd04 	addi	sp,sp,-12
 200d6b0:	dc000015 	stw	r16,0(sp)
 200d6b4:	040080b4 	movhi	r16,514
 200d6b8:	dc400115 	stw	r17,4(sp)
 200d6bc:	843c2204 	addi	r16,r16,-3960
 200d6c0:	2023883a 	mov	r17,r4
 200d6c4:	2809883a 	mov	r4,r5
 200d6c8:	dfc00215 	stw	ra,8(sp)
 200d6cc:	80000015 	stw	zero,0(r16)
 200d6d0:	20100bc0 	call	20100bc <close>
 200d6d4:	00ffffc4 	movi	r3,-1
 200d6d8:	10c00526 	beq	r2,r3,200d6f0 <_close_r+0x44>
 200d6dc:	dfc00217 	ldw	ra,8(sp)
 200d6e0:	dc400117 	ldw	r17,4(sp)
 200d6e4:	dc000017 	ldw	r16,0(sp)
 200d6e8:	dec00304 	addi	sp,sp,12
 200d6ec:	f800283a 	ret
 200d6f0:	80c00017 	ldw	r3,0(r16)
 200d6f4:	183ff926 	beq	r3,zero,200d6dc <_close_r+0x30>
 200d6f8:	88c00015 	stw	r3,0(r17)
 200d6fc:	003ff706 	br	200d6dc <_close_r+0x30>

0200d700 <_calloc_r>:
 200d700:	defffe04 	addi	sp,sp,-8
 200d704:	2805883a 	mov	r2,r5
 200d708:	dc000015 	stw	r16,0(sp)
 200d70c:	300b883a 	mov	r5,r6
 200d710:	2021883a 	mov	r16,r4
 200d714:	1009883a 	mov	r4,r2
 200d718:	dfc00115 	stw	ra,4(sp)
 200d71c:	20019440 	call	2001944 <__mulsi3>
 200d720:	100b883a 	mov	r5,r2
 200d724:	8009883a 	mov	r4,r16
 200d728:	200999c0 	call	200999c <_malloc_r>
 200d72c:	10002926 	beq	r2,zero,200d7d4 <_calloc_r+0xd4>
 200d730:	11bfff17 	ldw	r6,-4(r2)
 200d734:	1021883a 	mov	r16,r2
 200d738:	00bfff04 	movi	r2,-4
 200d73c:	308c703a 	and	r6,r6,r2
 200d740:	00c00904 	movi	r3,36
 200d744:	308d883a 	add	r6,r6,r2
 200d748:	19801636 	bltu	r3,r6,200d7a4 <_calloc_r+0xa4>
 200d74c:	008004c4 	movi	r2,19
 200d750:	11800b2e 	bgeu	r2,r6,200d780 <_calloc_r+0x80>
 200d754:	80000015 	stw	zero,0(r16)
 200d758:	80000115 	stw	zero,4(r16)
 200d75c:	008006c4 	movi	r2,27
 200d760:	11801a2e 	bgeu	r2,r6,200d7cc <_calloc_r+0xcc>
 200d764:	80000215 	stw	zero,8(r16)
 200d768:	80000315 	stw	zero,12(r16)
 200d76c:	30c0151e 	bne	r6,r3,200d7c4 <_calloc_r+0xc4>
 200d770:	80000415 	stw	zero,16(r16)
 200d774:	80800604 	addi	r2,r16,24
 200d778:	80000515 	stw	zero,20(r16)
 200d77c:	00000106 	br	200d784 <_calloc_r+0x84>
 200d780:	8005883a 	mov	r2,r16
 200d784:	10000015 	stw	zero,0(r2)
 200d788:	10000115 	stw	zero,4(r2)
 200d78c:	10000215 	stw	zero,8(r2)
 200d790:	8005883a 	mov	r2,r16
 200d794:	dfc00117 	ldw	ra,4(sp)
 200d798:	dc000017 	ldw	r16,0(sp)
 200d79c:	dec00204 	addi	sp,sp,8
 200d7a0:	f800283a 	ret
 200d7a4:	000b883a 	mov	r5,zero
 200d7a8:	8009883a 	mov	r4,r16
 200d7ac:	200a5300 	call	200a530 <memset>
 200d7b0:	8005883a 	mov	r2,r16
 200d7b4:	dfc00117 	ldw	ra,4(sp)
 200d7b8:	dc000017 	ldw	r16,0(sp)
 200d7bc:	dec00204 	addi	sp,sp,8
 200d7c0:	f800283a 	ret
 200d7c4:	80800404 	addi	r2,r16,16
 200d7c8:	003fee06 	br	200d784 <_calloc_r+0x84>
 200d7cc:	80800204 	addi	r2,r16,8
 200d7d0:	003fec06 	br	200d784 <_calloc_r+0x84>
 200d7d4:	0005883a 	mov	r2,zero
 200d7d8:	003fee06 	br	200d794 <_calloc_r+0x94>

0200d7dc <_fclose_r>:
 200d7dc:	28003926 	beq	r5,zero,200d8c4 <_fclose_r+0xe8>
 200d7e0:	defffc04 	addi	sp,sp,-16
 200d7e4:	dc400115 	stw	r17,4(sp)
 200d7e8:	dc000015 	stw	r16,0(sp)
 200d7ec:	dfc00315 	stw	ra,12(sp)
 200d7f0:	dc800215 	stw	r18,8(sp)
 200d7f4:	2023883a 	mov	r17,r4
 200d7f8:	2821883a 	mov	r16,r5
 200d7fc:	20000226 	beq	r4,zero,200d808 <_fclose_r+0x2c>
 200d800:	20800e17 	ldw	r2,56(r4)
 200d804:	10002726 	beq	r2,zero,200d8a4 <_fclose_r+0xc8>
 200d808:	8080030f 	ldh	r2,12(r16)
 200d80c:	1000071e 	bne	r2,zero,200d82c <_fclose_r+0x50>
 200d810:	0005883a 	mov	r2,zero
 200d814:	dfc00317 	ldw	ra,12(sp)
 200d818:	dc800217 	ldw	r18,8(sp)
 200d81c:	dc400117 	ldw	r17,4(sp)
 200d820:	dc000017 	ldw	r16,0(sp)
 200d824:	dec00404 	addi	sp,sp,16
 200d828:	f800283a 	ret
 200d82c:	800b883a 	mov	r5,r16
 200d830:	8809883a 	mov	r4,r17
 200d834:	20086280 	call	2008628 <__sflush_r>
 200d838:	1025883a 	mov	r18,r2
 200d83c:	80800b17 	ldw	r2,44(r16)
 200d840:	10000426 	beq	r2,zero,200d854 <_fclose_r+0x78>
 200d844:	81400717 	ldw	r5,28(r16)
 200d848:	8809883a 	mov	r4,r17
 200d84c:	103ee83a 	callr	r2
 200d850:	10001616 	blt	r2,zero,200d8ac <_fclose_r+0xd0>
 200d854:	8080030b 	ldhu	r2,12(r16)
 200d858:	1080200c 	andi	r2,r2,128
 200d85c:	1000151e 	bne	r2,zero,200d8b4 <_fclose_r+0xd8>
 200d860:	81400c17 	ldw	r5,48(r16)
 200d864:	28000526 	beq	r5,zero,200d87c <_fclose_r+0xa0>
 200d868:	80801004 	addi	r2,r16,64
 200d86c:	28800226 	beq	r5,r2,200d878 <_fclose_r+0x9c>
 200d870:	8809883a 	mov	r4,r17
 200d874:	2008da40 	call	2008da4 <_free_r>
 200d878:	80000c15 	stw	zero,48(r16)
 200d87c:	81401117 	ldw	r5,68(r16)
 200d880:	28000326 	beq	r5,zero,200d890 <_fclose_r+0xb4>
 200d884:	8809883a 	mov	r4,r17
 200d888:	2008da40 	call	2008da4 <_free_r>
 200d88c:	80001115 	stw	zero,68(r16)
 200d890:	2008c400 	call	2008c40 <__sfp_lock_acquire>
 200d894:	8000030d 	sth	zero,12(r16)
 200d898:	2008c440 	call	2008c44 <__sfp_lock_release>
 200d89c:	9005883a 	mov	r2,r18
 200d8a0:	003fdc06 	br	200d814 <_fclose_r+0x38>
 200d8a4:	2008c300 	call	2008c30 <__sinit>
 200d8a8:	003fd706 	br	200d808 <_fclose_r+0x2c>
 200d8ac:	04bfffc4 	movi	r18,-1
 200d8b0:	003fe806 	br	200d854 <_fclose_r+0x78>
 200d8b4:	81400417 	ldw	r5,16(r16)
 200d8b8:	8809883a 	mov	r4,r17
 200d8bc:	2008da40 	call	2008da4 <_free_r>
 200d8c0:	003fe706 	br	200d860 <_fclose_r+0x84>
 200d8c4:	0005883a 	mov	r2,zero
 200d8c8:	f800283a 	ret

0200d8cc <fclose>:
 200d8cc:	008080b4 	movhi	r2,514
 200d8d0:	10b50804 	addi	r2,r2,-11232
 200d8d4:	200b883a 	mov	r5,r4
 200d8d8:	11000017 	ldw	r4,0(r2)
 200d8dc:	200d7dc1 	jmpi	200d7dc <_fclose_r>

0200d8e0 <__fputwc>:
 200d8e0:	defff804 	addi	sp,sp,-32
 200d8e4:	dcc00415 	stw	r19,16(sp)
 200d8e8:	dc800315 	stw	r18,12(sp)
 200d8ec:	dc000115 	stw	r16,4(sp)
 200d8f0:	dfc00715 	stw	ra,28(sp)
 200d8f4:	dd400615 	stw	r21,24(sp)
 200d8f8:	dd000515 	stw	r20,20(sp)
 200d8fc:	dc400215 	stw	r17,8(sp)
 200d900:	2027883a 	mov	r19,r4
 200d904:	2825883a 	mov	r18,r5
 200d908:	3021883a 	mov	r16,r6
 200d90c:	200978c0 	call	200978c <__locale_mb_cur_max>
 200d910:	00c00044 	movi	r3,1
 200d914:	10c03e26 	beq	r2,r3,200da10 <__fputwc+0x130>
 200d918:	81c01704 	addi	r7,r16,92
 200d91c:	900d883a 	mov	r6,r18
 200d920:	d80b883a 	mov	r5,sp
 200d924:	9809883a 	mov	r4,r19
 200d928:	200ddb00 	call	200ddb0 <_wcrtomb_r>
 200d92c:	1029883a 	mov	r20,r2
 200d930:	00bfffc4 	movi	r2,-1
 200d934:	a0802026 	beq	r20,r2,200d9b8 <__fputwc+0xd8>
 200d938:	d9400003 	ldbu	r5,0(sp)
 200d93c:	a0001c26 	beq	r20,zero,200d9b0 <__fputwc+0xd0>
 200d940:	0023883a 	mov	r17,zero
 200d944:	05400284 	movi	r21,10
 200d948:	00000906 	br	200d970 <__fputwc+0x90>
 200d94c:	80800017 	ldw	r2,0(r16)
 200d950:	11400005 	stb	r5,0(r2)
 200d954:	80c00017 	ldw	r3,0(r16)
 200d958:	18c00044 	addi	r3,r3,1
 200d95c:	80c00015 	stw	r3,0(r16)
 200d960:	8c400044 	addi	r17,r17,1
 200d964:	dc45883a 	add	r2,sp,r17
 200d968:	8d00112e 	bgeu	r17,r20,200d9b0 <__fputwc+0xd0>
 200d96c:	11400003 	ldbu	r5,0(r2)
 200d970:	80c00217 	ldw	r3,8(r16)
 200d974:	18ffffc4 	addi	r3,r3,-1
 200d978:	80c00215 	stw	r3,8(r16)
 200d97c:	183ff30e 	bge	r3,zero,200d94c <__fputwc+0x6c>
 200d980:	80800617 	ldw	r2,24(r16)
 200d984:	18801916 	blt	r3,r2,200d9ec <__fputwc+0x10c>
 200d988:	80800017 	ldw	r2,0(r16)
 200d98c:	11400005 	stb	r5,0(r2)
 200d990:	80800017 	ldw	r2,0(r16)
 200d994:	10c00003 	ldbu	r3,0(r2)
 200d998:	10800044 	addi	r2,r2,1
 200d99c:	1d402326 	beq	r3,r21,200da2c <__fputwc+0x14c>
 200d9a0:	80800015 	stw	r2,0(r16)
 200d9a4:	8c400044 	addi	r17,r17,1
 200d9a8:	dc45883a 	add	r2,sp,r17
 200d9ac:	8d3fef36 	bltu	r17,r20,200d96c <__fputwc+0x8c>
 200d9b0:	9005883a 	mov	r2,r18
 200d9b4:	00000406 	br	200d9c8 <__fputwc+0xe8>
 200d9b8:	80c0030b 	ldhu	r3,12(r16)
 200d9bc:	a005883a 	mov	r2,r20
 200d9c0:	18c01014 	ori	r3,r3,64
 200d9c4:	80c0030d 	sth	r3,12(r16)
 200d9c8:	dfc00717 	ldw	ra,28(sp)
 200d9cc:	dd400617 	ldw	r21,24(sp)
 200d9d0:	dd000517 	ldw	r20,20(sp)
 200d9d4:	dcc00417 	ldw	r19,16(sp)
 200d9d8:	dc800317 	ldw	r18,12(sp)
 200d9dc:	dc400217 	ldw	r17,8(sp)
 200d9e0:	dc000117 	ldw	r16,4(sp)
 200d9e4:	dec00804 	addi	sp,sp,32
 200d9e8:	f800283a 	ret
 200d9ec:	800d883a 	mov	r6,r16
 200d9f0:	29403fcc 	andi	r5,r5,255
 200d9f4:	9809883a 	mov	r4,r19
 200d9f8:	200dc580 	call	200dc58 <__swbuf_r>
 200d9fc:	10bfffe0 	cmpeqi	r2,r2,-1
 200da00:	10803fcc 	andi	r2,r2,255
 200da04:	103fd626 	beq	r2,zero,200d960 <__fputwc+0x80>
 200da08:	00bfffc4 	movi	r2,-1
 200da0c:	003fee06 	br	200d9c8 <__fputwc+0xe8>
 200da10:	90ffffc4 	addi	r3,r18,-1
 200da14:	01003f84 	movi	r4,254
 200da18:	20ffbf36 	bltu	r4,r3,200d918 <__fputwc+0x38>
 200da1c:	900b883a 	mov	r5,r18
 200da20:	dc800005 	stb	r18,0(sp)
 200da24:	1029883a 	mov	r20,r2
 200da28:	003fc506 	br	200d940 <__fputwc+0x60>
 200da2c:	800d883a 	mov	r6,r16
 200da30:	a80b883a 	mov	r5,r21
 200da34:	9809883a 	mov	r4,r19
 200da38:	200dc580 	call	200dc58 <__swbuf_r>
 200da3c:	10bfffe0 	cmpeqi	r2,r2,-1
 200da40:	003fef06 	br	200da00 <__fputwc+0x120>

0200da44 <_fputwc_r>:
 200da44:	3080030b 	ldhu	r2,12(r6)
 200da48:	10c8000c 	andi	r3,r2,8192
 200da4c:	1800051e 	bne	r3,zero,200da64 <_fputwc_r+0x20>
 200da50:	30c01917 	ldw	r3,100(r6)
 200da54:	10880014 	ori	r2,r2,8192
 200da58:	3080030d 	sth	r2,12(r6)
 200da5c:	18880014 	ori	r2,r3,8192
 200da60:	30801915 	stw	r2,100(r6)
 200da64:	200d8e01 	jmpi	200d8e0 <__fputwc>

0200da68 <fputwc>:
 200da68:	008080b4 	movhi	r2,514
 200da6c:	defffc04 	addi	sp,sp,-16
 200da70:	10b50804 	addi	r2,r2,-11232
 200da74:	dc000115 	stw	r16,4(sp)
 200da78:	14000017 	ldw	r16,0(r2)
 200da7c:	dc400215 	stw	r17,8(sp)
 200da80:	dfc00315 	stw	ra,12(sp)
 200da84:	2023883a 	mov	r17,r4
 200da88:	80000226 	beq	r16,zero,200da94 <fputwc+0x2c>
 200da8c:	80800e17 	ldw	r2,56(r16)
 200da90:	10001026 	beq	r2,zero,200dad4 <fputwc+0x6c>
 200da94:	2880030b 	ldhu	r2,12(r5)
 200da98:	10c8000c 	andi	r3,r2,8192
 200da9c:	1800051e 	bne	r3,zero,200dab4 <fputwc+0x4c>
 200daa0:	28c01917 	ldw	r3,100(r5)
 200daa4:	10880014 	ori	r2,r2,8192
 200daa8:	2880030d 	sth	r2,12(r5)
 200daac:	18880014 	ori	r2,r3,8192
 200dab0:	28801915 	stw	r2,100(r5)
 200dab4:	280d883a 	mov	r6,r5
 200dab8:	8009883a 	mov	r4,r16
 200dabc:	880b883a 	mov	r5,r17
 200dac0:	dfc00317 	ldw	ra,12(sp)
 200dac4:	dc400217 	ldw	r17,8(sp)
 200dac8:	dc000117 	ldw	r16,4(sp)
 200dacc:	dec00404 	addi	sp,sp,16
 200dad0:	200d8e01 	jmpi	200d8e0 <__fputwc>
 200dad4:	8009883a 	mov	r4,r16
 200dad8:	d9400015 	stw	r5,0(sp)
 200dadc:	2008c300 	call	2008c30 <__sinit>
 200dae0:	d9400017 	ldw	r5,0(sp)
 200dae4:	003feb06 	br	200da94 <fputwc+0x2c>

0200dae8 <_fstat_r>:
 200dae8:	defffd04 	addi	sp,sp,-12
 200daec:	2805883a 	mov	r2,r5
 200daf0:	dc000015 	stw	r16,0(sp)
 200daf4:	040080b4 	movhi	r16,514
 200daf8:	dc400115 	stw	r17,4(sp)
 200dafc:	843c2204 	addi	r16,r16,-3960
 200db00:	2023883a 	mov	r17,r4
 200db04:	300b883a 	mov	r5,r6
 200db08:	1009883a 	mov	r4,r2
 200db0c:	dfc00215 	stw	ra,8(sp)
 200db10:	80000015 	stw	zero,0(r16)
 200db14:	20101fc0 	call	20101fc <fstat>
 200db18:	00ffffc4 	movi	r3,-1
 200db1c:	10c00526 	beq	r2,r3,200db34 <_fstat_r+0x4c>
 200db20:	dfc00217 	ldw	ra,8(sp)
 200db24:	dc400117 	ldw	r17,4(sp)
 200db28:	dc000017 	ldw	r16,0(sp)
 200db2c:	dec00304 	addi	sp,sp,12
 200db30:	f800283a 	ret
 200db34:	80c00017 	ldw	r3,0(r16)
 200db38:	183ff926 	beq	r3,zero,200db20 <_fstat_r+0x38>
 200db3c:	88c00015 	stw	r3,0(r17)
 200db40:	003ff706 	br	200db20 <_fstat_r+0x38>

0200db44 <_isatty_r>:
 200db44:	defffd04 	addi	sp,sp,-12
 200db48:	dc000015 	stw	r16,0(sp)
 200db4c:	040080b4 	movhi	r16,514
 200db50:	dc400115 	stw	r17,4(sp)
 200db54:	843c2204 	addi	r16,r16,-3960
 200db58:	2023883a 	mov	r17,r4
 200db5c:	2809883a 	mov	r4,r5
 200db60:	dfc00215 	stw	ra,8(sp)
 200db64:	80000015 	stw	zero,0(r16)
 200db68:	20102f00 	call	20102f0 <isatty>
 200db6c:	00ffffc4 	movi	r3,-1
 200db70:	10c00526 	beq	r2,r3,200db88 <_isatty_r+0x44>
 200db74:	dfc00217 	ldw	ra,8(sp)
 200db78:	dc400117 	ldw	r17,4(sp)
 200db7c:	dc000017 	ldw	r16,0(sp)
 200db80:	dec00304 	addi	sp,sp,12
 200db84:	f800283a 	ret
 200db88:	80c00017 	ldw	r3,0(r16)
 200db8c:	183ff926 	beq	r3,zero,200db74 <_isatty_r+0x30>
 200db90:	88c00015 	stw	r3,0(r17)
 200db94:	003ff706 	br	200db74 <_isatty_r+0x30>

0200db98 <_lseek_r>:
 200db98:	defffd04 	addi	sp,sp,-12
 200db9c:	2805883a 	mov	r2,r5
 200dba0:	dc000015 	stw	r16,0(sp)
 200dba4:	040080b4 	movhi	r16,514
 200dba8:	dc400115 	stw	r17,4(sp)
 200dbac:	300b883a 	mov	r5,r6
 200dbb0:	843c2204 	addi	r16,r16,-3960
 200dbb4:	2023883a 	mov	r17,r4
 200dbb8:	380d883a 	mov	r6,r7
 200dbbc:	1009883a 	mov	r4,r2
 200dbc0:	dfc00215 	stw	ra,8(sp)
 200dbc4:	80000015 	stw	zero,0(r16)
 200dbc8:	20104c40 	call	20104c4 <lseek>
 200dbcc:	00ffffc4 	movi	r3,-1
 200dbd0:	10c00526 	beq	r2,r3,200dbe8 <_lseek_r+0x50>
 200dbd4:	dfc00217 	ldw	ra,8(sp)
 200dbd8:	dc400117 	ldw	r17,4(sp)
 200dbdc:	dc000017 	ldw	r16,0(sp)
 200dbe0:	dec00304 	addi	sp,sp,12
 200dbe4:	f800283a 	ret
 200dbe8:	80c00017 	ldw	r3,0(r16)
 200dbec:	183ff926 	beq	r3,zero,200dbd4 <_lseek_r+0x3c>
 200dbf0:	88c00015 	stw	r3,0(r17)
 200dbf4:	003ff706 	br	200dbd4 <_lseek_r+0x3c>

0200dbf8 <_read_r>:
 200dbf8:	defffd04 	addi	sp,sp,-12
 200dbfc:	2805883a 	mov	r2,r5
 200dc00:	dc000015 	stw	r16,0(sp)
 200dc04:	040080b4 	movhi	r16,514
 200dc08:	dc400115 	stw	r17,4(sp)
 200dc0c:	300b883a 	mov	r5,r6
 200dc10:	843c2204 	addi	r16,r16,-3960
 200dc14:	2023883a 	mov	r17,r4
 200dc18:	380d883a 	mov	r6,r7
 200dc1c:	1009883a 	mov	r4,r2
 200dc20:	dfc00215 	stw	ra,8(sp)
 200dc24:	80000015 	stw	zero,0(r16)
 200dc28:	20106980 	call	2010698 <read>
 200dc2c:	00ffffc4 	movi	r3,-1
 200dc30:	10c00526 	beq	r2,r3,200dc48 <_read_r+0x50>
 200dc34:	dfc00217 	ldw	ra,8(sp)
 200dc38:	dc400117 	ldw	r17,4(sp)
 200dc3c:	dc000017 	ldw	r16,0(sp)
 200dc40:	dec00304 	addi	sp,sp,12
 200dc44:	f800283a 	ret
 200dc48:	80c00017 	ldw	r3,0(r16)
 200dc4c:	183ff926 	beq	r3,zero,200dc34 <_read_r+0x3c>
 200dc50:	88c00015 	stw	r3,0(r17)
 200dc54:	003ff706 	br	200dc34 <_read_r+0x3c>

0200dc58 <__swbuf_r>:
 200dc58:	defffb04 	addi	sp,sp,-20
 200dc5c:	dcc00315 	stw	r19,12(sp)
 200dc60:	dc800215 	stw	r18,8(sp)
 200dc64:	dc000015 	stw	r16,0(sp)
 200dc68:	dfc00415 	stw	ra,16(sp)
 200dc6c:	dc400115 	stw	r17,4(sp)
 200dc70:	2025883a 	mov	r18,r4
 200dc74:	2827883a 	mov	r19,r5
 200dc78:	3021883a 	mov	r16,r6
 200dc7c:	20000226 	beq	r4,zero,200dc88 <__swbuf_r+0x30>
 200dc80:	20800e17 	ldw	r2,56(r4)
 200dc84:	10004226 	beq	r2,zero,200dd90 <__swbuf_r+0x138>
 200dc88:	80800617 	ldw	r2,24(r16)
 200dc8c:	8100030b 	ldhu	r4,12(r16)
 200dc90:	80800215 	stw	r2,8(r16)
 200dc94:	2080020c 	andi	r2,r4,8
 200dc98:	10003626 	beq	r2,zero,200dd74 <__swbuf_r+0x11c>
 200dc9c:	80c00417 	ldw	r3,16(r16)
 200dca0:	18003426 	beq	r3,zero,200dd74 <__swbuf_r+0x11c>
 200dca4:	2088000c 	andi	r2,r4,8192
 200dca8:	9c403fcc 	andi	r17,r19,255
 200dcac:	10001a26 	beq	r2,zero,200dd18 <__swbuf_r+0xc0>
 200dcb0:	80800017 	ldw	r2,0(r16)
 200dcb4:	81000517 	ldw	r4,20(r16)
 200dcb8:	10c7c83a 	sub	r3,r2,r3
 200dcbc:	1900200e 	bge	r3,r4,200dd40 <__swbuf_r+0xe8>
 200dcc0:	18c00044 	addi	r3,r3,1
 200dcc4:	81000217 	ldw	r4,8(r16)
 200dcc8:	11400044 	addi	r5,r2,1
 200dccc:	81400015 	stw	r5,0(r16)
 200dcd0:	213fffc4 	addi	r4,r4,-1
 200dcd4:	81000215 	stw	r4,8(r16)
 200dcd8:	14c00005 	stb	r19,0(r2)
 200dcdc:	80800517 	ldw	r2,20(r16)
 200dce0:	10c01e26 	beq	r2,r3,200dd5c <__swbuf_r+0x104>
 200dce4:	8080030b 	ldhu	r2,12(r16)
 200dce8:	1080004c 	andi	r2,r2,1
 200dcec:	10000226 	beq	r2,zero,200dcf8 <__swbuf_r+0xa0>
 200dcf0:	00800284 	movi	r2,10
 200dcf4:	88801926 	beq	r17,r2,200dd5c <__swbuf_r+0x104>
 200dcf8:	8805883a 	mov	r2,r17
 200dcfc:	dfc00417 	ldw	ra,16(sp)
 200dd00:	dcc00317 	ldw	r19,12(sp)
 200dd04:	dc800217 	ldw	r18,8(sp)
 200dd08:	dc400117 	ldw	r17,4(sp)
 200dd0c:	dc000017 	ldw	r16,0(sp)
 200dd10:	dec00504 	addi	sp,sp,20
 200dd14:	f800283a 	ret
 200dd18:	81401917 	ldw	r5,100(r16)
 200dd1c:	00b7ffc4 	movi	r2,-8193
 200dd20:	21080014 	ori	r4,r4,8192
 200dd24:	2884703a 	and	r2,r5,r2
 200dd28:	80801915 	stw	r2,100(r16)
 200dd2c:	80800017 	ldw	r2,0(r16)
 200dd30:	8100030d 	sth	r4,12(r16)
 200dd34:	81000517 	ldw	r4,20(r16)
 200dd38:	10c7c83a 	sub	r3,r2,r3
 200dd3c:	193fe016 	blt	r3,r4,200dcc0 <__swbuf_r+0x68>
 200dd40:	800b883a 	mov	r5,r16
 200dd44:	9009883a 	mov	r4,r18
 200dd48:	20088440 	call	2008844 <_fflush_r>
 200dd4c:	1000071e 	bne	r2,zero,200dd6c <__swbuf_r+0x114>
 200dd50:	80800017 	ldw	r2,0(r16)
 200dd54:	00c00044 	movi	r3,1
 200dd58:	003fda06 	br	200dcc4 <__swbuf_r+0x6c>
 200dd5c:	800b883a 	mov	r5,r16
 200dd60:	9009883a 	mov	r4,r18
 200dd64:	20088440 	call	2008844 <_fflush_r>
 200dd68:	103fe326 	beq	r2,zero,200dcf8 <__swbuf_r+0xa0>
 200dd6c:	00bfffc4 	movi	r2,-1
 200dd70:	003fe206 	br	200dcfc <__swbuf_r+0xa4>
 200dd74:	800b883a 	mov	r5,r16
 200dd78:	9009883a 	mov	r4,r18
 200dd7c:	2006c240 	call	2006c24 <__swsetup_r>
 200dd80:	103ffa1e 	bne	r2,zero,200dd6c <__swbuf_r+0x114>
 200dd84:	8100030b 	ldhu	r4,12(r16)
 200dd88:	80c00417 	ldw	r3,16(r16)
 200dd8c:	003fc506 	br	200dca4 <__swbuf_r+0x4c>
 200dd90:	2008c300 	call	2008c30 <__sinit>
 200dd94:	003fbc06 	br	200dc88 <__swbuf_r+0x30>

0200dd98 <__swbuf>:
 200dd98:	008080b4 	movhi	r2,514
 200dd9c:	10b50804 	addi	r2,r2,-11232
 200dda0:	280d883a 	mov	r6,r5
 200dda4:	200b883a 	mov	r5,r4
 200dda8:	11000017 	ldw	r4,0(r2)
 200ddac:	200dc581 	jmpi	200dc58 <__swbuf_r>

0200ddb0 <_wcrtomb_r>:
 200ddb0:	defff604 	addi	sp,sp,-40
 200ddb4:	008080b4 	movhi	r2,514
 200ddb8:	dc800815 	stw	r18,32(sp)
 200ddbc:	dc400715 	stw	r17,28(sp)
 200ddc0:	dc000615 	stw	r16,24(sp)
 200ddc4:	10b50c04 	addi	r2,r2,-11216
 200ddc8:	dfc00915 	stw	ra,36(sp)
 200ddcc:	2021883a 	mov	r16,r4
 200ddd0:	3823883a 	mov	r17,r7
 200ddd4:	14800017 	ldw	r18,0(r2)
 200ddd8:	28001426 	beq	r5,zero,200de2c <_wcrtomb_r+0x7c>
 200dddc:	d9400415 	stw	r5,16(sp)
 200dde0:	d9800515 	stw	r6,20(sp)
 200dde4:	20097800 	call	2009780 <__locale_charset>
 200dde8:	d9800517 	ldw	r6,20(sp)
 200ddec:	d9400417 	ldw	r5,16(sp)
 200ddf0:	100f883a 	mov	r7,r2
 200ddf4:	dc400015 	stw	r17,0(sp)
 200ddf8:	8009883a 	mov	r4,r16
 200ddfc:	903ee83a 	callr	r18
 200de00:	00ffffc4 	movi	r3,-1
 200de04:	10c0031e 	bne	r2,r3,200de14 <_wcrtomb_r+0x64>
 200de08:	88000015 	stw	zero,0(r17)
 200de0c:	00c02284 	movi	r3,138
 200de10:	80c00015 	stw	r3,0(r16)
 200de14:	dfc00917 	ldw	ra,36(sp)
 200de18:	dc800817 	ldw	r18,32(sp)
 200de1c:	dc400717 	ldw	r17,28(sp)
 200de20:	dc000617 	ldw	r16,24(sp)
 200de24:	dec00a04 	addi	sp,sp,40
 200de28:	f800283a 	ret
 200de2c:	20097800 	call	2009780 <__locale_charset>
 200de30:	100f883a 	mov	r7,r2
 200de34:	dc400015 	stw	r17,0(sp)
 200de38:	000d883a 	mov	r6,zero
 200de3c:	d9400104 	addi	r5,sp,4
 200de40:	8009883a 	mov	r4,r16
 200de44:	903ee83a 	callr	r18
 200de48:	003fed06 	br	200de00 <_wcrtomb_r+0x50>

0200de4c <wcrtomb>:
 200de4c:	defff604 	addi	sp,sp,-40
 200de50:	008080b4 	movhi	r2,514
 200de54:	dc800615 	stw	r18,24(sp)
 200de58:	dc400515 	stw	r17,20(sp)
 200de5c:	10b50804 	addi	r2,r2,-11232
 200de60:	dfc00915 	stw	ra,36(sp)
 200de64:	dd000815 	stw	r20,32(sp)
 200de68:	dcc00715 	stw	r19,28(sp)
 200de6c:	dc000415 	stw	r16,16(sp)
 200de70:	3025883a 	mov	r18,r6
 200de74:	14400017 	ldw	r17,0(r2)
 200de78:	20001926 	beq	r4,zero,200dee0 <wcrtomb+0x94>
 200de7c:	008080b4 	movhi	r2,514
 200de80:	10b50c04 	addi	r2,r2,-11216
 200de84:	15000017 	ldw	r20,0(r2)
 200de88:	2021883a 	mov	r16,r4
 200de8c:	2827883a 	mov	r19,r5
 200de90:	20097800 	call	2009780 <__locale_charset>
 200de94:	100f883a 	mov	r7,r2
 200de98:	dc800015 	stw	r18,0(sp)
 200de9c:	980d883a 	mov	r6,r19
 200dea0:	800b883a 	mov	r5,r16
 200dea4:	8809883a 	mov	r4,r17
 200dea8:	a03ee83a 	callr	r20
 200deac:	00ffffc4 	movi	r3,-1
 200deb0:	10c0031e 	bne	r2,r3,200dec0 <wcrtomb+0x74>
 200deb4:	90000015 	stw	zero,0(r18)
 200deb8:	00c02284 	movi	r3,138
 200debc:	88c00015 	stw	r3,0(r17)
 200dec0:	dfc00917 	ldw	ra,36(sp)
 200dec4:	dd000817 	ldw	r20,32(sp)
 200dec8:	dcc00717 	ldw	r19,28(sp)
 200decc:	dc800617 	ldw	r18,24(sp)
 200ded0:	dc400517 	ldw	r17,20(sp)
 200ded4:	dc000417 	ldw	r16,16(sp)
 200ded8:	dec00a04 	addi	sp,sp,40
 200dedc:	f800283a 	ret
 200dee0:	008080b4 	movhi	r2,514
 200dee4:	10b50c04 	addi	r2,r2,-11216
 200dee8:	14000017 	ldw	r16,0(r2)
 200deec:	20097800 	call	2009780 <__locale_charset>
 200def0:	100f883a 	mov	r7,r2
 200def4:	dc800015 	stw	r18,0(sp)
 200def8:	000d883a 	mov	r6,zero
 200defc:	d9400104 	addi	r5,sp,4
 200df00:	8809883a 	mov	r4,r17
 200df04:	803ee83a 	callr	r16
 200df08:	003fe806 	br	200deac <wcrtomb+0x60>

0200df0c <__ascii_wctomb>:
 200df0c:	28000526 	beq	r5,zero,200df24 <__ascii_wctomb+0x18>
 200df10:	00803fc4 	movi	r2,255
 200df14:	11800536 	bltu	r2,r6,200df2c <__ascii_wctomb+0x20>
 200df18:	29800005 	stb	r6,0(r5)
 200df1c:	00800044 	movi	r2,1
 200df20:	f800283a 	ret
 200df24:	0005883a 	mov	r2,zero
 200df28:	f800283a 	ret
 200df2c:	00802284 	movi	r2,138
 200df30:	20800015 	stw	r2,0(r4)
 200df34:	00bfffc4 	movi	r2,-1
 200df38:	f800283a 	ret

0200df3c <_wctomb_r>:
 200df3c:	008080b4 	movhi	r2,514
 200df40:	defff904 	addi	sp,sp,-28
 200df44:	10b50c04 	addi	r2,r2,-11216
 200df48:	dfc00615 	stw	ra,24(sp)
 200df4c:	dc400515 	stw	r17,20(sp)
 200df50:	dc000415 	stw	r16,16(sp)
 200df54:	3823883a 	mov	r17,r7
 200df58:	14000017 	ldw	r16,0(r2)
 200df5c:	d9000115 	stw	r4,4(sp)
 200df60:	d9400215 	stw	r5,8(sp)
 200df64:	d9800315 	stw	r6,12(sp)
 200df68:	20097800 	call	2009780 <__locale_charset>
 200df6c:	d9800317 	ldw	r6,12(sp)
 200df70:	d9400217 	ldw	r5,8(sp)
 200df74:	d9000117 	ldw	r4,4(sp)
 200df78:	100f883a 	mov	r7,r2
 200df7c:	dc400015 	stw	r17,0(sp)
 200df80:	803ee83a 	callr	r16
 200df84:	dfc00617 	ldw	ra,24(sp)
 200df88:	dc400517 	ldw	r17,20(sp)
 200df8c:	dc000417 	ldw	r16,16(sp)
 200df90:	dec00704 	addi	sp,sp,28
 200df94:	f800283a 	ret

0200df98 <__udivdi3>:
 200df98:	defff404 	addi	sp,sp,-48
 200df9c:	dcc00515 	stw	r19,20(sp)
 200dfa0:	dc000215 	stw	r16,8(sp)
 200dfa4:	dfc00b15 	stw	ra,44(sp)
 200dfa8:	df000a15 	stw	fp,40(sp)
 200dfac:	ddc00915 	stw	r23,36(sp)
 200dfb0:	dd800815 	stw	r22,32(sp)
 200dfb4:	dd400715 	stw	r21,28(sp)
 200dfb8:	dd000615 	stw	r20,24(sp)
 200dfbc:	dc800415 	stw	r18,16(sp)
 200dfc0:	dc400315 	stw	r17,12(sp)
 200dfc4:	2027883a 	mov	r19,r4
 200dfc8:	2821883a 	mov	r16,r5
 200dfcc:	3800461e 	bne	r7,zero,200e0e8 <__udivdi3+0x150>
 200dfd0:	3023883a 	mov	r17,r6
 200dfd4:	2025883a 	mov	r18,r4
 200dfd8:	2980572e 	bgeu	r5,r6,200e138 <__udivdi3+0x1a0>
 200dfdc:	00bfffd4 	movui	r2,65535
 200dfe0:	282d883a 	mov	r22,r5
 200dfe4:	1180b236 	bltu	r2,r6,200e2b0 <__udivdi3+0x318>
 200dfe8:	00803fc4 	movi	r2,255
 200dfec:	1185803a 	cmpltu	r2,r2,r6
 200dff0:	100490fa 	slli	r2,r2,3
 200dff4:	3086d83a 	srl	r3,r6,r2
 200dff8:	010080b4 	movhi	r4,514
 200dffc:	212d5084 	addi	r4,r4,-19134
 200e000:	20c7883a 	add	r3,r4,r3
 200e004:	18c00003 	ldbu	r3,0(r3)
 200e008:	1885883a 	add	r2,r3,r2
 200e00c:	00c00804 	movi	r3,32
 200e010:	1887c83a 	sub	r3,r3,r2
 200e014:	18000526 	beq	r3,zero,200e02c <__udivdi3+0x94>
 200e018:	80e0983a 	sll	r16,r16,r3
 200e01c:	9884d83a 	srl	r2,r19,r2
 200e020:	30e2983a 	sll	r17,r6,r3
 200e024:	98e4983a 	sll	r18,r19,r3
 200e028:	142cb03a 	or	r22,r2,r16
 200e02c:	882ad43a 	srli	r21,r17,16
 200e030:	b009883a 	mov	r4,r22
 200e034:	8d3fffcc 	andi	r20,r17,65535
 200e038:	a80b883a 	mov	r5,r21
 200e03c:	20046300 	call	2004630 <__umodsi3>
 200e040:	b009883a 	mov	r4,r22
 200e044:	a80b883a 	mov	r5,r21
 200e048:	1027883a 	mov	r19,r2
 200e04c:	20045cc0 	call	20045cc <__udivsi3>
 200e050:	100b883a 	mov	r5,r2
 200e054:	a009883a 	mov	r4,r20
 200e058:	102d883a 	mov	r22,r2
 200e05c:	20019440 	call	2001944 <__mulsi3>
 200e060:	9826943a 	slli	r19,r19,16
 200e064:	9006d43a 	srli	r3,r18,16
 200e068:	1cc6b03a 	or	r3,r3,r19
 200e06c:	1880052e 	bgeu	r3,r2,200e084 <__udivdi3+0xec>
 200e070:	1c47883a 	add	r3,r3,r17
 200e074:	b13fffc4 	addi	r4,r22,-1
 200e078:	1c400136 	bltu	r3,r17,200e080 <__udivdi3+0xe8>
 200e07c:	18814236 	bltu	r3,r2,200e588 <__udivdi3+0x5f0>
 200e080:	202d883a 	mov	r22,r4
 200e084:	18a1c83a 	sub	r16,r3,r2
 200e088:	8009883a 	mov	r4,r16
 200e08c:	a80b883a 	mov	r5,r21
 200e090:	20046300 	call	2004630 <__umodsi3>
 200e094:	1027883a 	mov	r19,r2
 200e098:	8009883a 	mov	r4,r16
 200e09c:	a80b883a 	mov	r5,r21
 200e0a0:	9826943a 	slli	r19,r19,16
 200e0a4:	20045cc0 	call	20045cc <__udivsi3>
 200e0a8:	100b883a 	mov	r5,r2
 200e0ac:	a009883a 	mov	r4,r20
 200e0b0:	94bfffcc 	andi	r18,r18,65535
 200e0b4:	1021883a 	mov	r16,r2
 200e0b8:	94e4b03a 	or	r18,r18,r19
 200e0bc:	20019440 	call	2001944 <__mulsi3>
 200e0c0:	9080052e 	bgeu	r18,r2,200e0d8 <__udivdi3+0x140>
 200e0c4:	8ca5883a 	add	r18,r17,r18
 200e0c8:	80ffffc4 	addi	r3,r16,-1
 200e0cc:	94410c36 	bltu	r18,r17,200e500 <__udivdi3+0x568>
 200e0d0:	90810b2e 	bgeu	r18,r2,200e500 <__udivdi3+0x568>
 200e0d4:	843fff84 	addi	r16,r16,-2
 200e0d8:	b004943a 	slli	r2,r22,16
 200e0dc:	0007883a 	mov	r3,zero
 200e0e0:	1404b03a 	or	r2,r2,r16
 200e0e4:	00005e06 	br	200e260 <__udivdi3+0x2c8>
 200e0e8:	29c05b36 	bltu	r5,r7,200e258 <__udivdi3+0x2c0>
 200e0ec:	00bfffd4 	movui	r2,65535
 200e0f0:	11c0672e 	bgeu	r2,r7,200e290 <__udivdi3+0x2f8>
 200e0f4:	00804034 	movhi	r2,256
 200e0f8:	10bfffc4 	addi	r2,r2,-1
 200e0fc:	11c10a36 	bltu	r2,r7,200e528 <__udivdi3+0x590>
 200e100:	00800404 	movi	r2,16
 200e104:	3886d83a 	srl	r3,r7,r2
 200e108:	010080b4 	movhi	r4,514
 200e10c:	212d5084 	addi	r4,r4,-19134
 200e110:	20c7883a 	add	r3,r4,r3
 200e114:	18c00003 	ldbu	r3,0(r3)
 200e118:	05c00804 	movi	r23,32
 200e11c:	1885883a 	add	r2,r3,r2
 200e120:	b8afc83a 	sub	r23,r23,r2
 200e124:	b800671e 	bne	r23,zero,200e2c4 <__udivdi3+0x32c>
 200e128:	3c010536 	bltu	r7,r16,200e540 <__udivdi3+0x5a8>
 200e12c:	9985403a 	cmpgeu	r2,r19,r6
 200e130:	0007883a 	mov	r3,zero
 200e134:	00004a06 	br	200e260 <__udivdi3+0x2c8>
 200e138:	3000041e 	bne	r6,zero,200e14c <__udivdi3+0x1b4>
 200e13c:	000b883a 	mov	r5,zero
 200e140:	01000044 	movi	r4,1
 200e144:	20045cc0 	call	20045cc <__udivsi3>
 200e148:	1023883a 	mov	r17,r2
 200e14c:	00bfffd4 	movui	r2,65535
 200e150:	1440532e 	bgeu	r2,r17,200e2a0 <__udivdi3+0x308>
 200e154:	00804034 	movhi	r2,256
 200e158:	10bfffc4 	addi	r2,r2,-1
 200e15c:	1440f436 	bltu	r2,r17,200e530 <__udivdi3+0x598>
 200e160:	00800404 	movi	r2,16
 200e164:	8886d83a 	srl	r3,r17,r2
 200e168:	010080b4 	movhi	r4,514
 200e16c:	212d5084 	addi	r4,r4,-19134
 200e170:	20c7883a 	add	r3,r4,r3
 200e174:	18c00003 	ldbu	r3,0(r3)
 200e178:	1885883a 	add	r2,r3,r2
 200e17c:	00c00804 	movi	r3,32
 200e180:	1887c83a 	sub	r3,r3,r2
 200e184:	1800a51e 	bne	r3,zero,200e41c <__udivdi3+0x484>
 200e188:	882ad43a 	srli	r21,r17,16
 200e18c:	8461c83a 	sub	r16,r16,r17
 200e190:	8d3fffcc 	andi	r20,r17,65535
 200e194:	00c00044 	movi	r3,1
 200e198:	a80b883a 	mov	r5,r21
 200e19c:	8009883a 	mov	r4,r16
 200e1a0:	d8c00115 	stw	r3,4(sp)
 200e1a4:	20046300 	call	2004630 <__umodsi3>
 200e1a8:	a80b883a 	mov	r5,r21
 200e1ac:	8009883a 	mov	r4,r16
 200e1b0:	1027883a 	mov	r19,r2
 200e1b4:	20045cc0 	call	20045cc <__udivsi3>
 200e1b8:	a00b883a 	mov	r5,r20
 200e1bc:	1009883a 	mov	r4,r2
 200e1c0:	102d883a 	mov	r22,r2
 200e1c4:	20019440 	call	2001944 <__mulsi3>
 200e1c8:	9826943a 	slli	r19,r19,16
 200e1cc:	900ed43a 	srli	r7,r18,16
 200e1d0:	d8c00117 	ldw	r3,4(sp)
 200e1d4:	3cceb03a 	or	r7,r7,r19
 200e1d8:	3880052e 	bgeu	r7,r2,200e1f0 <__udivdi3+0x258>
 200e1dc:	3c4f883a 	add	r7,r7,r17
 200e1e0:	b13fffc4 	addi	r4,r22,-1
 200e1e4:	3c400136 	bltu	r7,r17,200e1ec <__udivdi3+0x254>
 200e1e8:	3880e436 	bltu	r7,r2,200e57c <__udivdi3+0x5e4>
 200e1ec:	202d883a 	mov	r22,r4
 200e1f0:	38a1c83a 	sub	r16,r7,r2
 200e1f4:	8009883a 	mov	r4,r16
 200e1f8:	a80b883a 	mov	r5,r21
 200e1fc:	d8c00115 	stw	r3,4(sp)
 200e200:	20046300 	call	2004630 <__umodsi3>
 200e204:	1027883a 	mov	r19,r2
 200e208:	8009883a 	mov	r4,r16
 200e20c:	a80b883a 	mov	r5,r21
 200e210:	9826943a 	slli	r19,r19,16
 200e214:	20045cc0 	call	20045cc <__udivsi3>
 200e218:	a00b883a 	mov	r5,r20
 200e21c:	1009883a 	mov	r4,r2
 200e220:	94bfffcc 	andi	r18,r18,65535
 200e224:	1021883a 	mov	r16,r2
 200e228:	94e4b03a 	or	r18,r18,r19
 200e22c:	20019440 	call	2001944 <__mulsi3>
 200e230:	d8c00117 	ldw	r3,4(sp)
 200e234:	9080052e 	bgeu	r18,r2,200e24c <__udivdi3+0x2b4>
 200e238:	8ca5883a 	add	r18,r17,r18
 200e23c:	813fffc4 	addi	r4,r16,-1
 200e240:	9440ad36 	bltu	r18,r17,200e4f8 <__udivdi3+0x560>
 200e244:	9080ac2e 	bgeu	r18,r2,200e4f8 <__udivdi3+0x560>
 200e248:	843fff84 	addi	r16,r16,-2
 200e24c:	b004943a 	slli	r2,r22,16
 200e250:	1404b03a 	or	r2,r2,r16
 200e254:	00000206 	br	200e260 <__udivdi3+0x2c8>
 200e258:	0007883a 	mov	r3,zero
 200e25c:	0005883a 	mov	r2,zero
 200e260:	dfc00b17 	ldw	ra,44(sp)
 200e264:	df000a17 	ldw	fp,40(sp)
 200e268:	ddc00917 	ldw	r23,36(sp)
 200e26c:	dd800817 	ldw	r22,32(sp)
 200e270:	dd400717 	ldw	r21,28(sp)
 200e274:	dd000617 	ldw	r20,24(sp)
 200e278:	dcc00517 	ldw	r19,20(sp)
 200e27c:	dc800417 	ldw	r18,16(sp)
 200e280:	dc400317 	ldw	r17,12(sp)
 200e284:	dc000217 	ldw	r16,8(sp)
 200e288:	dec00c04 	addi	sp,sp,48
 200e28c:	f800283a 	ret
 200e290:	00803fc4 	movi	r2,255
 200e294:	11c5803a 	cmpltu	r2,r2,r7
 200e298:	100490fa 	slli	r2,r2,3
 200e29c:	003f9906 	br	200e104 <__udivdi3+0x16c>
 200e2a0:	00803fc4 	movi	r2,255
 200e2a4:	1445803a 	cmpltu	r2,r2,r17
 200e2a8:	100490fa 	slli	r2,r2,3
 200e2ac:	003fad06 	br	200e164 <__udivdi3+0x1cc>
 200e2b0:	00804034 	movhi	r2,256
 200e2b4:	10bfffc4 	addi	r2,r2,-1
 200e2b8:	11809f36 	bltu	r2,r6,200e538 <__udivdi3+0x5a0>
 200e2bc:	00800404 	movi	r2,16
 200e2c0:	003f4c06 	br	200dff4 <__udivdi3+0x5c>
 200e2c4:	3dce983a 	sll	r7,r7,r23
 200e2c8:	30b8d83a 	srl	fp,r6,r2
 200e2cc:	80a2d83a 	srl	r17,r16,r2
 200e2d0:	35cc983a 	sll	r6,r6,r23
 200e2d4:	3f38b03a 	or	fp,r7,fp
 200e2d8:	e024d43a 	srli	r18,fp,16
 200e2dc:	9884d83a 	srl	r2,r19,r2
 200e2e0:	85e0983a 	sll	r16,r16,r23
 200e2e4:	8809883a 	mov	r4,r17
 200e2e8:	900b883a 	mov	r5,r18
 200e2ec:	d9800015 	stw	r6,0(sp)
 200e2f0:	1420b03a 	or	r16,r2,r16
 200e2f4:	20046300 	call	2004630 <__umodsi3>
 200e2f8:	900b883a 	mov	r5,r18
 200e2fc:	8809883a 	mov	r4,r17
 200e300:	1029883a 	mov	r20,r2
 200e304:	e5bfffcc 	andi	r22,fp,65535
 200e308:	20045cc0 	call	20045cc <__udivsi3>
 200e30c:	100b883a 	mov	r5,r2
 200e310:	b009883a 	mov	r4,r22
 200e314:	102b883a 	mov	r21,r2
 200e318:	20019440 	call	2001944 <__mulsi3>
 200e31c:	a028943a 	slli	r20,r20,16
 200e320:	8006d43a 	srli	r3,r16,16
 200e324:	1d06b03a 	or	r3,r3,r20
 200e328:	1880042e 	bgeu	r3,r2,200e33c <__udivdi3+0x3a4>
 200e32c:	1f07883a 	add	r3,r3,fp
 200e330:	a93fffc4 	addi	r4,r21,-1
 200e334:	1f00892e 	bgeu	r3,fp,200e55c <__udivdi3+0x5c4>
 200e338:	202b883a 	mov	r21,r4
 200e33c:	18a3c83a 	sub	r17,r3,r2
 200e340:	8809883a 	mov	r4,r17
 200e344:	900b883a 	mov	r5,r18
 200e348:	20046300 	call	2004630 <__umodsi3>
 200e34c:	1029883a 	mov	r20,r2
 200e350:	8809883a 	mov	r4,r17
 200e354:	900b883a 	mov	r5,r18
 200e358:	a028943a 	slli	r20,r20,16
 200e35c:	20045cc0 	call	20045cc <__udivsi3>
 200e360:	100b883a 	mov	r5,r2
 200e364:	b009883a 	mov	r4,r22
 200e368:	843fffcc 	andi	r16,r16,65535
 200e36c:	1023883a 	mov	r17,r2
 200e370:	8520b03a 	or	r16,r16,r20
 200e374:	20019440 	call	2001944 <__mulsi3>
 200e378:	8080042e 	bgeu	r16,r2,200e38c <__udivdi3+0x3f4>
 200e37c:	8721883a 	add	r16,r16,fp
 200e380:	88ffffc4 	addi	r3,r17,-1
 200e384:	8700712e 	bgeu	r16,fp,200e54c <__udivdi3+0x5b4>
 200e388:	1823883a 	mov	r17,r3
 200e38c:	a80e943a 	slli	r7,r21,16
 200e390:	d8c00017 	ldw	r3,0(sp)
 200e394:	80a1c83a 	sub	r16,r16,r2
 200e398:	3c64b03a 	or	r18,r7,r17
 200e39c:	1d3fffcc 	andi	r20,r3,65535
 200e3a0:	9022d43a 	srli	r17,r18,16
 200e3a4:	95bfffcc 	andi	r22,r18,65535
 200e3a8:	a00b883a 	mov	r5,r20
 200e3ac:	b009883a 	mov	r4,r22
 200e3b0:	182ad43a 	srli	r21,r3,16
 200e3b4:	20019440 	call	2001944 <__mulsi3>
 200e3b8:	a00b883a 	mov	r5,r20
 200e3bc:	8809883a 	mov	r4,r17
 200e3c0:	1039883a 	mov	fp,r2
 200e3c4:	20019440 	call	2001944 <__mulsi3>
 200e3c8:	8809883a 	mov	r4,r17
 200e3cc:	a80b883a 	mov	r5,r21
 200e3d0:	1029883a 	mov	r20,r2
 200e3d4:	20019440 	call	2001944 <__mulsi3>
 200e3d8:	a80b883a 	mov	r5,r21
 200e3dc:	b009883a 	mov	r4,r22
 200e3e0:	1023883a 	mov	r17,r2
 200e3e4:	20019440 	call	2001944 <__mulsi3>
 200e3e8:	e006d43a 	srli	r3,fp,16
 200e3ec:	1505883a 	add	r2,r2,r20
 200e3f0:	1887883a 	add	r3,r3,r2
 200e3f4:	1d00022e 	bgeu	r3,r20,200e400 <__udivdi3+0x468>
 200e3f8:	00800074 	movhi	r2,1
 200e3fc:	88a3883a 	add	r17,r17,r2
 200e400:	1804d43a 	srli	r2,r3,16
 200e404:	1463883a 	add	r17,r2,r17
 200e408:	84404436 	bltu	r16,r17,200e51c <__udivdi3+0x584>
 200e40c:	84403e26 	beq	r16,r17,200e508 <__udivdi3+0x570>
 200e410:	9005883a 	mov	r2,r18
 200e414:	0007883a 	mov	r3,zero
 200e418:	003f9106 	br	200e260 <__udivdi3+0x2c8>
 200e41c:	88e2983a 	sll	r17,r17,r3
 200e420:	80aed83a 	srl	r23,r16,r2
 200e424:	80e0983a 	sll	r16,r16,r3
 200e428:	882ad43a 	srli	r21,r17,16
 200e42c:	9884d83a 	srl	r2,r19,r2
 200e430:	b809883a 	mov	r4,r23
 200e434:	a80b883a 	mov	r5,r21
 200e438:	98e4983a 	sll	r18,r19,r3
 200e43c:	142cb03a 	or	r22,r2,r16
 200e440:	20046300 	call	2004630 <__umodsi3>
 200e444:	b809883a 	mov	r4,r23
 200e448:	a80b883a 	mov	r5,r21
 200e44c:	1027883a 	mov	r19,r2
 200e450:	8d3fffcc 	andi	r20,r17,65535
 200e454:	20045cc0 	call	20045cc <__udivsi3>
 200e458:	a009883a 	mov	r4,r20
 200e45c:	100b883a 	mov	r5,r2
 200e460:	102f883a 	mov	r23,r2
 200e464:	20019440 	call	2001944 <__mulsi3>
 200e468:	9826943a 	slli	r19,r19,16
 200e46c:	b008d43a 	srli	r4,r22,16
 200e470:	24c8b03a 	or	r4,r4,r19
 200e474:	2080062e 	bgeu	r4,r2,200e490 <__udivdi3+0x4f8>
 200e478:	2449883a 	add	r4,r4,r17
 200e47c:	b8ffffc4 	addi	r3,r23,-1
 200e480:	24403c36 	bltu	r4,r17,200e574 <__udivdi3+0x5dc>
 200e484:	20803b2e 	bgeu	r4,r2,200e574 <__udivdi3+0x5dc>
 200e488:	bdffff84 	addi	r23,r23,-2
 200e48c:	2449883a 	add	r4,r4,r17
 200e490:	20a1c83a 	sub	r16,r4,r2
 200e494:	a80b883a 	mov	r5,r21
 200e498:	8009883a 	mov	r4,r16
 200e49c:	20046300 	call	2004630 <__umodsi3>
 200e4a0:	a80b883a 	mov	r5,r21
 200e4a4:	8009883a 	mov	r4,r16
 200e4a8:	1027883a 	mov	r19,r2
 200e4ac:	20045cc0 	call	20045cc <__udivsi3>
 200e4b0:	a009883a 	mov	r4,r20
 200e4b4:	100b883a 	mov	r5,r2
 200e4b8:	9826943a 	slli	r19,r19,16
 200e4bc:	1039883a 	mov	fp,r2
 200e4c0:	20019440 	call	2001944 <__mulsi3>
 200e4c4:	b13fffcc 	andi	r4,r22,65535
 200e4c8:	24c8b03a 	or	r4,r4,r19
 200e4cc:	2080062e 	bgeu	r4,r2,200e4e8 <__udivdi3+0x550>
 200e4d0:	2449883a 	add	r4,r4,r17
 200e4d4:	e0ffffc4 	addi	r3,fp,-1
 200e4d8:	24402436 	bltu	r4,r17,200e56c <__udivdi3+0x5d4>
 200e4dc:	2080232e 	bgeu	r4,r2,200e56c <__udivdi3+0x5d4>
 200e4e0:	e73fff84 	addi	fp,fp,-2
 200e4e4:	2449883a 	add	r4,r4,r17
 200e4e8:	b82e943a 	slli	r23,r23,16
 200e4ec:	20a1c83a 	sub	r16,r4,r2
 200e4f0:	bf06b03a 	or	r3,r23,fp
 200e4f4:	003f2806 	br	200e198 <__udivdi3+0x200>
 200e4f8:	2021883a 	mov	r16,r4
 200e4fc:	003f5306 	br	200e24c <__udivdi3+0x2b4>
 200e500:	1821883a 	mov	r16,r3
 200e504:	003ef406 	br	200e0d8 <__udivdi3+0x140>
 200e508:	1806943a 	slli	r3,r3,16
 200e50c:	9de6983a 	sll	r19,r19,r23
 200e510:	e73fffcc 	andi	fp,fp,65535
 200e514:	1f07883a 	add	r3,r3,fp
 200e518:	98ffbd2e 	bgeu	r19,r3,200e410 <__udivdi3+0x478>
 200e51c:	90bfffc4 	addi	r2,r18,-1
 200e520:	0007883a 	mov	r3,zero
 200e524:	003f4e06 	br	200e260 <__udivdi3+0x2c8>
 200e528:	00800604 	movi	r2,24
 200e52c:	003ef506 	br	200e104 <__udivdi3+0x16c>
 200e530:	00800604 	movi	r2,24
 200e534:	003f0b06 	br	200e164 <__udivdi3+0x1cc>
 200e538:	00800604 	movi	r2,24
 200e53c:	003ead06 	br	200dff4 <__udivdi3+0x5c>
 200e540:	0007883a 	mov	r3,zero
 200e544:	00800044 	movi	r2,1
 200e548:	003f4506 	br	200e260 <__udivdi3+0x2c8>
 200e54c:	80bf8e2e 	bgeu	r16,r2,200e388 <__udivdi3+0x3f0>
 200e550:	8c7fff84 	addi	r17,r17,-2
 200e554:	8721883a 	add	r16,r16,fp
 200e558:	003f8c06 	br	200e38c <__udivdi3+0x3f4>
 200e55c:	18bf762e 	bgeu	r3,r2,200e338 <__udivdi3+0x3a0>
 200e560:	ad7fff84 	addi	r21,r21,-2
 200e564:	1f07883a 	add	r3,r3,fp
 200e568:	003f7406 	br	200e33c <__udivdi3+0x3a4>
 200e56c:	1839883a 	mov	fp,r3
 200e570:	003fdd06 	br	200e4e8 <__udivdi3+0x550>
 200e574:	182f883a 	mov	r23,r3
 200e578:	003fc506 	br	200e490 <__udivdi3+0x4f8>
 200e57c:	b5bfff84 	addi	r22,r22,-2
 200e580:	3c4f883a 	add	r7,r7,r17
 200e584:	003f1a06 	br	200e1f0 <__udivdi3+0x258>
 200e588:	b5bfff84 	addi	r22,r22,-2
 200e58c:	1c47883a 	add	r3,r3,r17
 200e590:	003ebc06 	br	200e084 <__udivdi3+0xec>

0200e594 <__umoddi3>:
 200e594:	defff304 	addi	sp,sp,-52
 200e598:	df000b15 	stw	fp,44(sp)
 200e59c:	dc400415 	stw	r17,16(sp)
 200e5a0:	dc000315 	stw	r16,12(sp)
 200e5a4:	dfc00c15 	stw	ra,48(sp)
 200e5a8:	ddc00a15 	stw	r23,40(sp)
 200e5ac:	dd800915 	stw	r22,36(sp)
 200e5b0:	dd400815 	stw	r21,32(sp)
 200e5b4:	dd000715 	stw	r20,28(sp)
 200e5b8:	dcc00615 	stw	r19,24(sp)
 200e5bc:	dc800515 	stw	r18,20(sp)
 200e5c0:	2021883a 	mov	r16,r4
 200e5c4:	2823883a 	mov	r17,r5
 200e5c8:	2839883a 	mov	fp,r5
 200e5cc:	3800401e 	bne	r7,zero,200e6d0 <__umoddi3+0x13c>
 200e5d0:	3027883a 	mov	r19,r6
 200e5d4:	2029883a 	mov	r20,r4
 200e5d8:	2980552e 	bgeu	r5,r6,200e730 <__umoddi3+0x19c>
 200e5dc:	00bfffd4 	movui	r2,65535
 200e5e0:	1180a236 	bltu	r2,r6,200e86c <__umoddi3+0x2d8>
 200e5e4:	01003fc4 	movi	r4,255
 200e5e8:	2189803a 	cmpltu	r4,r4,r6
 200e5ec:	200890fa 	slli	r4,r4,3
 200e5f0:	3104d83a 	srl	r2,r6,r4
 200e5f4:	00c080b4 	movhi	r3,514
 200e5f8:	18ed5084 	addi	r3,r3,-19134
 200e5fc:	1885883a 	add	r2,r3,r2
 200e600:	10c00003 	ldbu	r3,0(r2)
 200e604:	00800804 	movi	r2,32
 200e608:	1909883a 	add	r4,r3,r4
 200e60c:	1125c83a 	sub	r18,r2,r4
 200e610:	90000526 	beq	r18,zero,200e628 <__umoddi3+0x94>
 200e614:	8ca2983a 	sll	r17,r17,r18
 200e618:	8108d83a 	srl	r4,r16,r4
 200e61c:	34a6983a 	sll	r19,r6,r18
 200e620:	84a8983a 	sll	r20,r16,r18
 200e624:	2478b03a 	or	fp,r4,r17
 200e628:	982cd43a 	srli	r22,r19,16
 200e62c:	e009883a 	mov	r4,fp
 200e630:	9dffffcc 	andi	r23,r19,65535
 200e634:	b00b883a 	mov	r5,r22
 200e638:	20046300 	call	2004630 <__umodsi3>
 200e63c:	b00b883a 	mov	r5,r22
 200e640:	e009883a 	mov	r4,fp
 200e644:	102b883a 	mov	r21,r2
 200e648:	20045cc0 	call	20045cc <__udivsi3>
 200e64c:	100b883a 	mov	r5,r2
 200e650:	b809883a 	mov	r4,r23
 200e654:	20019440 	call	2001944 <__mulsi3>
 200e658:	a82a943a 	slli	r21,r21,16
 200e65c:	a006d43a 	srli	r3,r20,16
 200e660:	1d46b03a 	or	r3,r3,r21
 200e664:	1880032e 	bgeu	r3,r2,200e674 <__umoddi3+0xe0>
 200e668:	1cc7883a 	add	r3,r3,r19
 200e66c:	1cc00136 	bltu	r3,r19,200e674 <__umoddi3+0xe0>
 200e670:	18813136 	bltu	r3,r2,200eb38 <__umoddi3+0x5a4>
 200e674:	18a1c83a 	sub	r16,r3,r2
 200e678:	b00b883a 	mov	r5,r22
 200e67c:	8009883a 	mov	r4,r16
 200e680:	20046300 	call	2004630 <__umodsi3>
 200e684:	b00b883a 	mov	r5,r22
 200e688:	8009883a 	mov	r4,r16
 200e68c:	1023883a 	mov	r17,r2
 200e690:	20045cc0 	call	20045cc <__udivsi3>
 200e694:	100b883a 	mov	r5,r2
 200e698:	b809883a 	mov	r4,r23
 200e69c:	8822943a 	slli	r17,r17,16
 200e6a0:	20019440 	call	2001944 <__mulsi3>
 200e6a4:	a0ffffcc 	andi	r3,r20,65535
 200e6a8:	1c46b03a 	or	r3,r3,r17
 200e6ac:	1880042e 	bgeu	r3,r2,200e6c0 <__umoddi3+0x12c>
 200e6b0:	1cc7883a 	add	r3,r3,r19
 200e6b4:	1cc00236 	bltu	r3,r19,200e6c0 <__umoddi3+0x12c>
 200e6b8:	1880012e 	bgeu	r3,r2,200e6c0 <__umoddi3+0x12c>
 200e6bc:	1cc7883a 	add	r3,r3,r19
 200e6c0:	1885c83a 	sub	r2,r3,r2
 200e6c4:	1484d83a 	srl	r2,r2,r18
 200e6c8:	0007883a 	mov	r3,zero
 200e6cc:	00005306 	br	200e81c <__umoddi3+0x288>
 200e6d0:	29c05036 	bltu	r5,r7,200e814 <__umoddi3+0x280>
 200e6d4:	00bfffd4 	movui	r2,65535
 200e6d8:	11c05c2e 	bgeu	r2,r7,200e84c <__umoddi3+0x2b8>
 200e6dc:	00804034 	movhi	r2,256
 200e6e0:	10bfffc4 	addi	r2,r2,-1
 200e6e4:	11c10636 	bltu	r2,r7,200eb00 <__umoddi3+0x56c>
 200e6e8:	01000404 	movi	r4,16
 200e6ec:	3904d83a 	srl	r2,r7,r4
 200e6f0:	00c080b4 	movhi	r3,514
 200e6f4:	18ed5084 	addi	r3,r3,-19134
 200e6f8:	1885883a 	add	r2,r3,r2
 200e6fc:	14c00003 	ldbu	r19,0(r2)
 200e700:	00c00804 	movi	r3,32
 200e704:	9927883a 	add	r19,r19,r4
 200e708:	1ce9c83a 	sub	r20,r3,r19
 200e70c:	a0005c1e 	bne	r20,zero,200e880 <__umoddi3+0x2ec>
 200e710:	3c400136 	bltu	r7,r17,200e718 <__umoddi3+0x184>
 200e714:	81810a36 	bltu	r16,r6,200eb40 <__umoddi3+0x5ac>
 200e718:	8185c83a 	sub	r2,r16,r6
 200e71c:	89e3c83a 	sub	r17,r17,r7
 200e720:	8089803a 	cmpltu	r4,r16,r2
 200e724:	8939c83a 	sub	fp,r17,r4
 200e728:	e007883a 	mov	r3,fp
 200e72c:	00003b06 	br	200e81c <__umoddi3+0x288>
 200e730:	3000041e 	bne	r6,zero,200e744 <__umoddi3+0x1b0>
 200e734:	000b883a 	mov	r5,zero
 200e738:	01000044 	movi	r4,1
 200e73c:	20045cc0 	call	20045cc <__udivsi3>
 200e740:	1027883a 	mov	r19,r2
 200e744:	00bfffd4 	movui	r2,65535
 200e748:	14c0442e 	bgeu	r2,r19,200e85c <__umoddi3+0x2c8>
 200e74c:	00804034 	movhi	r2,256
 200e750:	10bfffc4 	addi	r2,r2,-1
 200e754:	14c0ec36 	bltu	r2,r19,200eb08 <__umoddi3+0x574>
 200e758:	00800404 	movi	r2,16
 200e75c:	9886d83a 	srl	r3,r19,r2
 200e760:	010080b4 	movhi	r4,514
 200e764:	212d5084 	addi	r4,r4,-19134
 200e768:	20c7883a 	add	r3,r4,r3
 200e76c:	18c00003 	ldbu	r3,0(r3)
 200e770:	1887883a 	add	r3,r3,r2
 200e774:	00800804 	movi	r2,32
 200e778:	10e5c83a 	sub	r18,r2,r3
 200e77c:	9000ab1e 	bne	r18,zero,200ea2c <__umoddi3+0x498>
 200e780:	982cd43a 	srli	r22,r19,16
 200e784:	8ce3c83a 	sub	r17,r17,r19
 200e788:	9dffffcc 	andi	r23,r19,65535
 200e78c:	b00b883a 	mov	r5,r22
 200e790:	8809883a 	mov	r4,r17
 200e794:	20046300 	call	2004630 <__umodsi3>
 200e798:	b00b883a 	mov	r5,r22
 200e79c:	8809883a 	mov	r4,r17
 200e7a0:	102b883a 	mov	r21,r2
 200e7a4:	20045cc0 	call	20045cc <__udivsi3>
 200e7a8:	b80b883a 	mov	r5,r23
 200e7ac:	1009883a 	mov	r4,r2
 200e7b0:	20019440 	call	2001944 <__mulsi3>
 200e7b4:	a82a943a 	slli	r21,r21,16
 200e7b8:	a006d43a 	srli	r3,r20,16
 200e7bc:	1d46b03a 	or	r3,r3,r21
 200e7c0:	1880042e 	bgeu	r3,r2,200e7d4 <__umoddi3+0x240>
 200e7c4:	1cc7883a 	add	r3,r3,r19
 200e7c8:	1cc00236 	bltu	r3,r19,200e7d4 <__umoddi3+0x240>
 200e7cc:	1880012e 	bgeu	r3,r2,200e7d4 <__umoddi3+0x240>
 200e7d0:	1cc7883a 	add	r3,r3,r19
 200e7d4:	18a1c83a 	sub	r16,r3,r2
 200e7d8:	b00b883a 	mov	r5,r22
 200e7dc:	8009883a 	mov	r4,r16
 200e7e0:	20046300 	call	2004630 <__umodsi3>
 200e7e4:	1023883a 	mov	r17,r2
 200e7e8:	b00b883a 	mov	r5,r22
 200e7ec:	8009883a 	mov	r4,r16
 200e7f0:	20045cc0 	call	20045cc <__udivsi3>
 200e7f4:	8822943a 	slli	r17,r17,16
 200e7f8:	b80b883a 	mov	r5,r23
 200e7fc:	1009883a 	mov	r4,r2
 200e800:	20019440 	call	2001944 <__mulsi3>
 200e804:	a53fffcc 	andi	r20,r20,65535
 200e808:	a446b03a 	or	r3,r20,r17
 200e80c:	18bfac2e 	bgeu	r3,r2,200e6c0 <__umoddi3+0x12c>
 200e810:	003fa706 	br	200e6b0 <__umoddi3+0x11c>
 200e814:	2005883a 	mov	r2,r4
 200e818:	2807883a 	mov	r3,r5
 200e81c:	dfc00c17 	ldw	ra,48(sp)
 200e820:	df000b17 	ldw	fp,44(sp)
 200e824:	ddc00a17 	ldw	r23,40(sp)
 200e828:	dd800917 	ldw	r22,36(sp)
 200e82c:	dd400817 	ldw	r21,32(sp)
 200e830:	dd000717 	ldw	r20,28(sp)
 200e834:	dcc00617 	ldw	r19,24(sp)
 200e838:	dc800517 	ldw	r18,20(sp)
 200e83c:	dc400417 	ldw	r17,16(sp)
 200e840:	dc000317 	ldw	r16,12(sp)
 200e844:	dec00d04 	addi	sp,sp,52
 200e848:	f800283a 	ret
 200e84c:	04c03fc4 	movi	r19,255
 200e850:	99c9803a 	cmpltu	r4,r19,r7
 200e854:	200890fa 	slli	r4,r4,3
 200e858:	003fa406 	br	200e6ec <__umoddi3+0x158>
 200e85c:	00803fc4 	movi	r2,255
 200e860:	14c5803a 	cmpltu	r2,r2,r19
 200e864:	100490fa 	slli	r2,r2,3
 200e868:	003fbc06 	br	200e75c <__umoddi3+0x1c8>
 200e86c:	00804034 	movhi	r2,256
 200e870:	10bfffc4 	addi	r2,r2,-1
 200e874:	1180a636 	bltu	r2,r6,200eb10 <__umoddi3+0x57c>
 200e878:	01000404 	movi	r4,16
 200e87c:	003f5c06 	br	200e5f0 <__umoddi3+0x5c>
 200e880:	3d0e983a 	sll	r7,r7,r20
 200e884:	34ead83a 	srl	r21,r6,r19
 200e888:	8cc6d83a 	srl	r3,r17,r19
 200e88c:	8d10983a 	sll	r8,r17,r20
 200e890:	3d6ab03a 	or	r21,r7,r21
 200e894:	a82cd43a 	srli	r22,r21,16
 200e898:	84e2d83a 	srl	r17,r16,r19
 200e89c:	1809883a 	mov	r4,r3
 200e8a0:	b00b883a 	mov	r5,r22
 200e8a4:	8a22b03a 	or	r17,r17,r8
 200e8a8:	3524983a 	sll	r18,r6,r20
 200e8ac:	dc400015 	stw	r17,0(sp)
 200e8b0:	d8c00115 	stw	r3,4(sp)
 200e8b4:	20046300 	call	2004630 <__umodsi3>
 200e8b8:	d8c00117 	ldw	r3,4(sp)
 200e8bc:	b00b883a 	mov	r5,r22
 200e8c0:	1039883a 	mov	fp,r2
 200e8c4:	1809883a 	mov	r4,r3
 200e8c8:	20045cc0 	call	20045cc <__udivsi3>
 200e8cc:	adffffcc 	andi	r23,r21,65535
 200e8d0:	100b883a 	mov	r5,r2
 200e8d4:	b809883a 	mov	r4,r23
 200e8d8:	1023883a 	mov	r17,r2
 200e8dc:	20019440 	call	2001944 <__mulsi3>
 200e8e0:	d9400017 	ldw	r5,0(sp)
 200e8e4:	e008943a 	slli	r4,fp,16
 200e8e8:	8520983a 	sll	r16,r16,r20
 200e8ec:	2806d43a 	srli	r3,r5,16
 200e8f0:	1906b03a 	or	r3,r3,r4
 200e8f4:	1880042e 	bgeu	r3,r2,200e908 <__umoddi3+0x374>
 200e8f8:	1d47883a 	add	r3,r3,r21
 200e8fc:	893fffc4 	addi	r4,r17,-1
 200e900:	1d40892e 	bgeu	r3,r21,200eb28 <__umoddi3+0x594>
 200e904:	2023883a 	mov	r17,r4
 200e908:	18b9c83a 	sub	fp,r3,r2
 200e90c:	b00b883a 	mov	r5,r22
 200e910:	e009883a 	mov	r4,fp
 200e914:	20046300 	call	2004630 <__umodsi3>
 200e918:	b00b883a 	mov	r5,r22
 200e91c:	e009883a 	mov	r4,fp
 200e920:	d8800215 	stw	r2,8(sp)
 200e924:	20045cc0 	call	20045cc <__udivsi3>
 200e928:	100b883a 	mov	r5,r2
 200e92c:	b809883a 	mov	r4,r23
 200e930:	102d883a 	mov	r22,r2
 200e934:	20019440 	call	2001944 <__mulsi3>
 200e938:	d9800217 	ldw	r6,8(sp)
 200e93c:	d8c00017 	ldw	r3,0(sp)
 200e940:	300c943a 	slli	r6,r6,16
 200e944:	1a3fffcc 	andi	r8,r3,65535
 200e948:	4190b03a 	or	r8,r8,r6
 200e94c:	4080042e 	bgeu	r8,r2,200e960 <__umoddi3+0x3cc>
 200e950:	4551883a 	add	r8,r8,r21
 200e954:	b0ffffc4 	addi	r3,r22,-1
 200e958:	45406f2e 	bgeu	r8,r21,200eb18 <__umoddi3+0x584>
 200e95c:	182d883a 	mov	r22,r3
 200e960:	880e943a 	slli	r7,r17,16
 200e964:	9006d43a 	srli	r3,r18,16
 200e968:	91bfffcc 	andi	r6,r18,65535
 200e96c:	3dacb03a 	or	r22,r7,r22
 200e970:	b02ed43a 	srli	r23,r22,16
 200e974:	b5bfffcc 	andi	r22,r22,65535
 200e978:	300b883a 	mov	r5,r6
 200e97c:	b009883a 	mov	r4,r22
 200e980:	40a3c83a 	sub	r17,r8,r2
 200e984:	d8c00115 	stw	r3,4(sp)
 200e988:	d9800215 	stw	r6,8(sp)
 200e98c:	20019440 	call	2001944 <__mulsi3>
 200e990:	d9800217 	ldw	r6,8(sp)
 200e994:	b809883a 	mov	r4,r23
 200e998:	1039883a 	mov	fp,r2
 200e99c:	300b883a 	mov	r5,r6
 200e9a0:	20019440 	call	2001944 <__mulsi3>
 200e9a4:	d8c00117 	ldw	r3,4(sp)
 200e9a8:	b809883a 	mov	r4,r23
 200e9ac:	d8800215 	stw	r2,8(sp)
 200e9b0:	180b883a 	mov	r5,r3
 200e9b4:	20019440 	call	2001944 <__mulsi3>
 200e9b8:	d8c00117 	ldw	r3,4(sp)
 200e9bc:	b009883a 	mov	r4,r22
 200e9c0:	102f883a 	mov	r23,r2
 200e9c4:	180b883a 	mov	r5,r3
 200e9c8:	20019440 	call	2001944 <__mulsi3>
 200e9cc:	d9800217 	ldw	r6,8(sp)
 200e9d0:	e006d43a 	srli	r3,fp,16
 200e9d4:	1185883a 	add	r2,r2,r6
 200e9d8:	1885883a 	add	r2,r3,r2
 200e9dc:	1180022e 	bgeu	r2,r6,200e9e8 <__umoddi3+0x454>
 200e9e0:	00c00074 	movhi	r3,1
 200e9e4:	b8ef883a 	add	r23,r23,r3
 200e9e8:	1006d43a 	srli	r3,r2,16
 200e9ec:	1004943a 	slli	r2,r2,16
 200e9f0:	e73fffcc 	andi	fp,fp,65535
 200e9f4:	1dc7883a 	add	r3,r3,r23
 200e9f8:	1739883a 	add	fp,r2,fp
 200e9fc:	88c03a36 	bltu	r17,r3,200eae8 <__umoddi3+0x554>
 200ea00:	88c05126 	beq	r17,r3,200eb48 <__umoddi3+0x5b4>
 200ea04:	88c9c83a 	sub	r4,r17,r3
 200ea08:	e00f883a 	mov	r7,fp
 200ea0c:	81cfc83a 	sub	r7,r16,r7
 200ea10:	81c7803a 	cmpltu	r3,r16,r7
 200ea14:	20c7c83a 	sub	r3,r4,r3
 200ea18:	1cc4983a 	sll	r2,r3,r19
 200ea1c:	3d0ed83a 	srl	r7,r7,r20
 200ea20:	1d06d83a 	srl	r3,r3,r20
 200ea24:	11c4b03a 	or	r2,r2,r7
 200ea28:	003f7c06 	br	200e81c <__umoddi3+0x288>
 200ea2c:	9ca6983a 	sll	r19,r19,r18
 200ea30:	88f8d83a 	srl	fp,r17,r3
 200ea34:	80c4d83a 	srl	r2,r16,r3
 200ea38:	982cd43a 	srli	r22,r19,16
 200ea3c:	8ca2983a 	sll	r17,r17,r18
 200ea40:	e009883a 	mov	r4,fp
 200ea44:	b00b883a 	mov	r5,r22
 200ea48:	146ab03a 	or	r21,r2,r17
 200ea4c:	20046300 	call	2004630 <__umodsi3>
 200ea50:	b00b883a 	mov	r5,r22
 200ea54:	e009883a 	mov	r4,fp
 200ea58:	1029883a 	mov	r20,r2
 200ea5c:	9dffffcc 	andi	r23,r19,65535
 200ea60:	20045cc0 	call	20045cc <__udivsi3>
 200ea64:	b809883a 	mov	r4,r23
 200ea68:	100b883a 	mov	r5,r2
 200ea6c:	20019440 	call	2001944 <__mulsi3>
 200ea70:	a008943a 	slli	r4,r20,16
 200ea74:	a806d43a 	srli	r3,r21,16
 200ea78:	84a8983a 	sll	r20,r16,r18
 200ea7c:	1906b03a 	or	r3,r3,r4
 200ea80:	1880042e 	bgeu	r3,r2,200ea94 <__umoddi3+0x500>
 200ea84:	1cc7883a 	add	r3,r3,r19
 200ea88:	1cc00236 	bltu	r3,r19,200ea94 <__umoddi3+0x500>
 200ea8c:	1880012e 	bgeu	r3,r2,200ea94 <__umoddi3+0x500>
 200ea90:	1cc7883a 	add	r3,r3,r19
 200ea94:	18a3c83a 	sub	r17,r3,r2
 200ea98:	b00b883a 	mov	r5,r22
 200ea9c:	8809883a 	mov	r4,r17
 200eaa0:	20046300 	call	2004630 <__umodsi3>
 200eaa4:	b00b883a 	mov	r5,r22
 200eaa8:	8809883a 	mov	r4,r17
 200eaac:	1021883a 	mov	r16,r2
 200eab0:	20045cc0 	call	20045cc <__udivsi3>
 200eab4:	100b883a 	mov	r5,r2
 200eab8:	b809883a 	mov	r4,r23
 200eabc:	8020943a 	slli	r16,r16,16
 200eac0:	20019440 	call	2001944 <__mulsi3>
 200eac4:	a8ffffcc 	andi	r3,r21,65535
 200eac8:	1c06b03a 	or	r3,r3,r16
 200eacc:	1880042e 	bgeu	r3,r2,200eae0 <__umoddi3+0x54c>
 200ead0:	1cc7883a 	add	r3,r3,r19
 200ead4:	1cc00236 	bltu	r3,r19,200eae0 <__umoddi3+0x54c>
 200ead8:	1880012e 	bgeu	r3,r2,200eae0 <__umoddi3+0x54c>
 200eadc:	1cc7883a 	add	r3,r3,r19
 200eae0:	18a3c83a 	sub	r17,r3,r2
 200eae4:	003f2906 	br	200e78c <__umoddi3+0x1f8>
 200eae8:	e48fc83a 	sub	r7,fp,r18
 200eaec:	1d49c83a 	sub	r4,r3,r21
 200eaf0:	e1f9803a 	cmpltu	fp,fp,r7
 200eaf4:	2739c83a 	sub	fp,r4,fp
 200eaf8:	8f09c83a 	sub	r4,r17,fp
 200eafc:	003fc306 	br	200ea0c <__umoddi3+0x478>
 200eb00:	01000604 	movi	r4,24
 200eb04:	003ef906 	br	200e6ec <__umoddi3+0x158>
 200eb08:	00800604 	movi	r2,24
 200eb0c:	003f1306 	br	200e75c <__umoddi3+0x1c8>
 200eb10:	01000604 	movi	r4,24
 200eb14:	003eb606 	br	200e5f0 <__umoddi3+0x5c>
 200eb18:	40bf902e 	bgeu	r8,r2,200e95c <__umoddi3+0x3c8>
 200eb1c:	b5bfff84 	addi	r22,r22,-2
 200eb20:	4551883a 	add	r8,r8,r21
 200eb24:	003f8e06 	br	200e960 <__umoddi3+0x3cc>
 200eb28:	18bf762e 	bgeu	r3,r2,200e904 <__umoddi3+0x370>
 200eb2c:	8c7fff84 	addi	r17,r17,-2
 200eb30:	1d47883a 	add	r3,r3,r21
 200eb34:	003f7406 	br	200e908 <__umoddi3+0x374>
 200eb38:	1cc7883a 	add	r3,r3,r19
 200eb3c:	003ecd06 	br	200e674 <__umoddi3+0xe0>
 200eb40:	8005883a 	mov	r2,r16
 200eb44:	003ef806 	br	200e728 <__umoddi3+0x194>
 200eb48:	873fe736 	bltu	r16,fp,200eae8 <__umoddi3+0x554>
 200eb4c:	e00f883a 	mov	r7,fp
 200eb50:	0009883a 	mov	r4,zero
 200eb54:	003fad06 	br	200ea0c <__umoddi3+0x478>

0200eb58 <__adddf3>:
 200eb58:	02c00434 	movhi	r11,16
 200eb5c:	5affffc4 	addi	r11,r11,-1
 200eb60:	2806d7fa 	srli	r3,r5,31
 200eb64:	2ad4703a 	and	r10,r5,r11
 200eb68:	3ad2703a 	and	r9,r7,r11
 200eb6c:	3804d53a 	srli	r2,r7,20
 200eb70:	3018d77a 	srli	r12,r6,29
 200eb74:	280ad53a 	srli	r5,r5,20
 200eb78:	501490fa 	slli	r10,r10,3
 200eb7c:	2010d77a 	srli	r8,r4,29
 200eb80:	481290fa 	slli	r9,r9,3
 200eb84:	380ed7fa 	srli	r7,r7,31
 200eb88:	defffb04 	addi	sp,sp,-20
 200eb8c:	dc800215 	stw	r18,8(sp)
 200eb90:	dc400115 	stw	r17,4(sp)
 200eb94:	dc000015 	stw	r16,0(sp)
 200eb98:	dfc00415 	stw	ra,16(sp)
 200eb9c:	dcc00315 	stw	r19,12(sp)
 200eba0:	1c803fcc 	andi	r18,r3,255
 200eba4:	2c01ffcc 	andi	r16,r5,2047
 200eba8:	5210b03a 	or	r8,r10,r8
 200ebac:	202290fa 	slli	r17,r4,3
 200ebb0:	1081ffcc 	andi	r2,r2,2047
 200ebb4:	4b12b03a 	or	r9,r9,r12
 200ebb8:	300c90fa 	slli	r6,r6,3
 200ebbc:	91c07526 	beq	r18,r7,200ed94 <__adddf3+0x23c>
 200ebc0:	8087c83a 	sub	r3,r16,r2
 200ebc4:	00c0ab0e 	bge	zero,r3,200ee74 <__adddf3+0x31c>
 200ebc8:	10002a1e 	bne	r2,zero,200ec74 <__adddf3+0x11c>
 200ebcc:	4984b03a 	or	r2,r9,r6
 200ebd0:	1000961e 	bne	r2,zero,200ee2c <__adddf3+0x2d4>
 200ebd4:	888001cc 	andi	r2,r17,7
 200ebd8:	10000726 	beq	r2,zero,200ebf8 <__adddf3+0xa0>
 200ebdc:	888003cc 	andi	r2,r17,15
 200ebe0:	00c00104 	movi	r3,4
 200ebe4:	10c00426 	beq	r2,r3,200ebf8 <__adddf3+0xa0>
 200ebe8:	88c7883a 	add	r3,r17,r3
 200ebec:	1c63803a 	cmpltu	r17,r3,r17
 200ebf0:	4451883a 	add	r8,r8,r17
 200ebf4:	1823883a 	mov	r17,r3
 200ebf8:	4080202c 	andhi	r2,r8,128
 200ebfc:	10005926 	beq	r2,zero,200ed64 <__adddf3+0x20c>
 200ec00:	84000044 	addi	r16,r16,1
 200ec04:	0081ffc4 	movi	r2,2047
 200ec08:	8080ba26 	beq	r16,r2,200eef4 <__adddf3+0x39c>
 200ec0c:	00bfe034 	movhi	r2,65408
 200ec10:	10bfffc4 	addi	r2,r2,-1
 200ec14:	4090703a 	and	r8,r8,r2
 200ec18:	4004977a 	slli	r2,r8,29
 200ec1c:	4010927a 	slli	r8,r8,9
 200ec20:	8822d0fa 	srli	r17,r17,3
 200ec24:	8401ffcc 	andi	r16,r16,2047
 200ec28:	4010d33a 	srli	r8,r8,12
 200ec2c:	9007883a 	mov	r3,r18
 200ec30:	1444b03a 	or	r2,r2,r17
 200ec34:	8401ffcc 	andi	r16,r16,2047
 200ec38:	8020953a 	slli	r16,r16,20
 200ec3c:	18c03fcc 	andi	r3,r3,255
 200ec40:	01000434 	movhi	r4,16
 200ec44:	213fffc4 	addi	r4,r4,-1
 200ec48:	180697fa 	slli	r3,r3,31
 200ec4c:	4110703a 	and	r8,r8,r4
 200ec50:	4410b03a 	or	r8,r8,r16
 200ec54:	40c6b03a 	or	r3,r8,r3
 200ec58:	dfc00417 	ldw	ra,16(sp)
 200ec5c:	dcc00317 	ldw	r19,12(sp)
 200ec60:	dc800217 	ldw	r18,8(sp)
 200ec64:	dc400117 	ldw	r17,4(sp)
 200ec68:	dc000017 	ldw	r16,0(sp)
 200ec6c:	dec00504 	addi	sp,sp,20
 200ec70:	f800283a 	ret
 200ec74:	0081ffc4 	movi	r2,2047
 200ec78:	80bfd626 	beq	r16,r2,200ebd4 <__adddf3+0x7c>
 200ec7c:	4a402034 	orhi	r9,r9,128
 200ec80:	00800e04 	movi	r2,56
 200ec84:	10c09f16 	blt	r2,r3,200ef04 <__adddf3+0x3ac>
 200ec88:	008007c4 	movi	r2,31
 200ec8c:	10c0c216 	blt	r2,r3,200ef98 <__adddf3+0x440>
 200ec90:	00800804 	movi	r2,32
 200ec94:	10c5c83a 	sub	r2,r2,r3
 200ec98:	488a983a 	sll	r5,r9,r2
 200ec9c:	30c8d83a 	srl	r4,r6,r3
 200eca0:	3084983a 	sll	r2,r6,r2
 200eca4:	48c6d83a 	srl	r3,r9,r3
 200eca8:	290cb03a 	or	r6,r5,r4
 200ecac:	1004c03a 	cmpne	r2,r2,zero
 200ecb0:	308cb03a 	or	r6,r6,r2
 200ecb4:	898dc83a 	sub	r6,r17,r6
 200ecb8:	89a3803a 	cmpltu	r17,r17,r6
 200ecbc:	40d1c83a 	sub	r8,r8,r3
 200ecc0:	4451c83a 	sub	r8,r8,r17
 200ecc4:	3023883a 	mov	r17,r6
 200ecc8:	4080202c 	andhi	r2,r8,128
 200eccc:	10002326 	beq	r2,zero,200ed5c <__adddf3+0x204>
 200ecd0:	04c02034 	movhi	r19,128
 200ecd4:	9cffffc4 	addi	r19,r19,-1
 200ecd8:	44e6703a 	and	r19,r8,r19
 200ecdc:	98007626 	beq	r19,zero,200eeb8 <__adddf3+0x360>
 200ece0:	9809883a 	mov	r4,r19
 200ece4:	20044700 	call	2004470 <__clzsi2>
 200ece8:	10fffe04 	addi	r3,r2,-8
 200ecec:	010007c4 	movi	r4,31
 200ecf0:	20c07716 	blt	r4,r3,200eed0 <__adddf3+0x378>
 200ecf4:	00800804 	movi	r2,32
 200ecf8:	10c5c83a 	sub	r2,r2,r3
 200ecfc:	8884d83a 	srl	r2,r17,r2
 200ed00:	98d0983a 	sll	r8,r19,r3
 200ed04:	88e2983a 	sll	r17,r17,r3
 200ed08:	1204b03a 	or	r2,r2,r8
 200ed0c:	1c007416 	blt	r3,r16,200eee0 <__adddf3+0x388>
 200ed10:	1c21c83a 	sub	r16,r3,r16
 200ed14:	82000044 	addi	r8,r16,1
 200ed18:	00c007c4 	movi	r3,31
 200ed1c:	1a009116 	blt	r3,r8,200ef64 <__adddf3+0x40c>
 200ed20:	00c00804 	movi	r3,32
 200ed24:	1a07c83a 	sub	r3,r3,r8
 200ed28:	8a08d83a 	srl	r4,r17,r8
 200ed2c:	88e2983a 	sll	r17,r17,r3
 200ed30:	10c6983a 	sll	r3,r2,r3
 200ed34:	1210d83a 	srl	r8,r2,r8
 200ed38:	8804c03a 	cmpne	r2,r17,zero
 200ed3c:	1906b03a 	or	r3,r3,r4
 200ed40:	18a2b03a 	or	r17,r3,r2
 200ed44:	0021883a 	mov	r16,zero
 200ed48:	003fa206 	br	200ebd4 <__adddf3+0x7c>
 200ed4c:	1890b03a 	or	r8,r3,r2
 200ed50:	40017d26 	beq	r8,zero,200f348 <__adddf3+0x7f0>
 200ed54:	1011883a 	mov	r8,r2
 200ed58:	1823883a 	mov	r17,r3
 200ed5c:	888001cc 	andi	r2,r17,7
 200ed60:	103f9e1e 	bne	r2,zero,200ebdc <__adddf3+0x84>
 200ed64:	4004977a 	slli	r2,r8,29
 200ed68:	8822d0fa 	srli	r17,r17,3
 200ed6c:	4010d0fa 	srli	r8,r8,3
 200ed70:	9007883a 	mov	r3,r18
 200ed74:	1444b03a 	or	r2,r2,r17
 200ed78:	0101ffc4 	movi	r4,2047
 200ed7c:	81002426 	beq	r16,r4,200ee10 <__adddf3+0x2b8>
 200ed80:	8120703a 	and	r16,r16,r4
 200ed84:	01000434 	movhi	r4,16
 200ed88:	213fffc4 	addi	r4,r4,-1
 200ed8c:	4110703a 	and	r8,r8,r4
 200ed90:	003fa806 	br	200ec34 <__adddf3+0xdc>
 200ed94:	8089c83a 	sub	r4,r16,r2
 200ed98:	01005e0e 	bge	zero,r4,200ef14 <__adddf3+0x3bc>
 200ed9c:	10002b26 	beq	r2,zero,200ee4c <__adddf3+0x2f4>
 200eda0:	0081ffc4 	movi	r2,2047
 200eda4:	80bf8b26 	beq	r16,r2,200ebd4 <__adddf3+0x7c>
 200eda8:	4a402034 	orhi	r9,r9,128
 200edac:	00800e04 	movi	r2,56
 200edb0:	1100a40e 	bge	r2,r4,200f044 <__adddf3+0x4ec>
 200edb4:	498cb03a 	or	r6,r9,r6
 200edb8:	300ac03a 	cmpne	r5,r6,zero
 200edbc:	0013883a 	mov	r9,zero
 200edc0:	2c4b883a 	add	r5,r5,r17
 200edc4:	2c63803a 	cmpltu	r17,r5,r17
 200edc8:	4a11883a 	add	r8,r9,r8
 200edcc:	8a11883a 	add	r8,r17,r8
 200edd0:	2823883a 	mov	r17,r5
 200edd4:	4080202c 	andhi	r2,r8,128
 200edd8:	103fe026 	beq	r2,zero,200ed5c <__adddf3+0x204>
 200eddc:	84000044 	addi	r16,r16,1
 200ede0:	0081ffc4 	movi	r2,2047
 200ede4:	8080d226 	beq	r16,r2,200f130 <__adddf3+0x5d8>
 200ede8:	00bfe034 	movhi	r2,65408
 200edec:	10bfffc4 	addi	r2,r2,-1
 200edf0:	4090703a 	and	r8,r8,r2
 200edf4:	880ad07a 	srli	r5,r17,1
 200edf8:	400897fa 	slli	r4,r8,31
 200edfc:	88c0004c 	andi	r3,r17,1
 200ee00:	28e2b03a 	or	r17,r5,r3
 200ee04:	4010d07a 	srli	r8,r8,1
 200ee08:	2462b03a 	or	r17,r4,r17
 200ee0c:	003f7106 	br	200ebd4 <__adddf3+0x7c>
 200ee10:	4088b03a 	or	r4,r8,r2
 200ee14:	20014526 	beq	r4,zero,200f32c <__adddf3+0x7d4>
 200ee18:	01000434 	movhi	r4,16
 200ee1c:	42000234 	orhi	r8,r8,8
 200ee20:	213fffc4 	addi	r4,r4,-1
 200ee24:	4110703a 	and	r8,r8,r4
 200ee28:	003f8206 	br	200ec34 <__adddf3+0xdc>
 200ee2c:	18ffffc4 	addi	r3,r3,-1
 200ee30:	1800491e 	bne	r3,zero,200ef58 <__adddf3+0x400>
 200ee34:	898bc83a 	sub	r5,r17,r6
 200ee38:	8963803a 	cmpltu	r17,r17,r5
 200ee3c:	4251c83a 	sub	r8,r8,r9
 200ee40:	4451c83a 	sub	r8,r8,r17
 200ee44:	2823883a 	mov	r17,r5
 200ee48:	003f9f06 	br	200ecc8 <__adddf3+0x170>
 200ee4c:	4984b03a 	or	r2,r9,r6
 200ee50:	103f6026 	beq	r2,zero,200ebd4 <__adddf3+0x7c>
 200ee54:	213fffc4 	addi	r4,r4,-1
 200ee58:	2000931e 	bne	r4,zero,200f0a8 <__adddf3+0x550>
 200ee5c:	898d883a 	add	r6,r17,r6
 200ee60:	3463803a 	cmpltu	r17,r6,r17
 200ee64:	4251883a 	add	r8,r8,r9
 200ee68:	8a11883a 	add	r8,r17,r8
 200ee6c:	3023883a 	mov	r17,r6
 200ee70:	003fd806 	br	200edd4 <__adddf3+0x27c>
 200ee74:	1800541e 	bne	r3,zero,200efc8 <__adddf3+0x470>
 200ee78:	80800044 	addi	r2,r16,1
 200ee7c:	1081ffcc 	andi	r2,r2,2047
 200ee80:	00c00044 	movi	r3,1
 200ee84:	1880a00e 	bge	r3,r2,200f108 <__adddf3+0x5b0>
 200ee88:	8989c83a 	sub	r4,r17,r6
 200ee8c:	8905803a 	cmpltu	r2,r17,r4
 200ee90:	4267c83a 	sub	r19,r8,r9
 200ee94:	98a7c83a 	sub	r19,r19,r2
 200ee98:	9880202c 	andhi	r2,r19,128
 200ee9c:	10006326 	beq	r2,zero,200f02c <__adddf3+0x4d4>
 200eea0:	3463c83a 	sub	r17,r6,r17
 200eea4:	4a07c83a 	sub	r3,r9,r8
 200eea8:	344d803a 	cmpltu	r6,r6,r17
 200eeac:	19a7c83a 	sub	r19,r3,r6
 200eeb0:	3825883a 	mov	r18,r7
 200eeb4:	983f8a1e 	bne	r19,zero,200ece0 <__adddf3+0x188>
 200eeb8:	8809883a 	mov	r4,r17
 200eebc:	20044700 	call	2004470 <__clzsi2>
 200eec0:	10800804 	addi	r2,r2,32
 200eec4:	10fffe04 	addi	r3,r2,-8
 200eec8:	010007c4 	movi	r4,31
 200eecc:	20ff890e 	bge	r4,r3,200ecf4 <__adddf3+0x19c>
 200eed0:	10bff604 	addi	r2,r2,-40
 200eed4:	8884983a 	sll	r2,r17,r2
 200eed8:	0023883a 	mov	r17,zero
 200eedc:	1c3f8c0e 	bge	r3,r16,200ed10 <__adddf3+0x1b8>
 200eee0:	023fe034 	movhi	r8,65408
 200eee4:	423fffc4 	addi	r8,r8,-1
 200eee8:	80e1c83a 	sub	r16,r16,r3
 200eeec:	1210703a 	and	r8,r2,r8
 200eef0:	003f3806 	br	200ebd4 <__adddf3+0x7c>
 200eef4:	9007883a 	mov	r3,r18
 200eef8:	0011883a 	mov	r8,zero
 200eefc:	0005883a 	mov	r2,zero
 200ef00:	003f4c06 	br	200ec34 <__adddf3+0xdc>
 200ef04:	498cb03a 	or	r6,r9,r6
 200ef08:	300cc03a 	cmpne	r6,r6,zero
 200ef0c:	0007883a 	mov	r3,zero
 200ef10:	003f6806 	br	200ecb4 <__adddf3+0x15c>
 200ef14:	20009c1e 	bne	r4,zero,200f188 <__adddf3+0x630>
 200ef18:	80800044 	addi	r2,r16,1
 200ef1c:	1141ffcc 	andi	r5,r2,2047
 200ef20:	01000044 	movi	r4,1
 200ef24:	2140670e 	bge	r4,r5,200f0c4 <__adddf3+0x56c>
 200ef28:	0101ffc4 	movi	r4,2047
 200ef2c:	11007f26 	beq	r2,r4,200f12c <__adddf3+0x5d4>
 200ef30:	898d883a 	add	r6,r17,r6
 200ef34:	4247883a 	add	r3,r8,r9
 200ef38:	3451803a 	cmpltu	r8,r6,r17
 200ef3c:	40d1883a 	add	r8,r8,r3
 200ef40:	402297fa 	slli	r17,r8,31
 200ef44:	300cd07a 	srli	r6,r6,1
 200ef48:	4010d07a 	srli	r8,r8,1
 200ef4c:	1021883a 	mov	r16,r2
 200ef50:	89a2b03a 	or	r17,r17,r6
 200ef54:	003f1f06 	br	200ebd4 <__adddf3+0x7c>
 200ef58:	0081ffc4 	movi	r2,2047
 200ef5c:	80bf481e 	bne	r16,r2,200ec80 <__adddf3+0x128>
 200ef60:	003f1c06 	br	200ebd4 <__adddf3+0x7c>
 200ef64:	843ff844 	addi	r16,r16,-31
 200ef68:	01000804 	movi	r4,32
 200ef6c:	1406d83a 	srl	r3,r2,r16
 200ef70:	41005026 	beq	r8,r4,200f0b4 <__adddf3+0x55c>
 200ef74:	01001004 	movi	r4,64
 200ef78:	2211c83a 	sub	r8,r4,r8
 200ef7c:	1204983a 	sll	r2,r2,r8
 200ef80:	88a2b03a 	or	r17,r17,r2
 200ef84:	8822c03a 	cmpne	r17,r17,zero
 200ef88:	1c62b03a 	or	r17,r3,r17
 200ef8c:	0011883a 	mov	r8,zero
 200ef90:	0021883a 	mov	r16,zero
 200ef94:	003f7106 	br	200ed5c <__adddf3+0x204>
 200ef98:	193ff804 	addi	r4,r3,-32
 200ef9c:	00800804 	movi	r2,32
 200efa0:	4908d83a 	srl	r4,r9,r4
 200efa4:	18804526 	beq	r3,r2,200f0bc <__adddf3+0x564>
 200efa8:	00801004 	movi	r2,64
 200efac:	10c5c83a 	sub	r2,r2,r3
 200efb0:	4886983a 	sll	r3,r9,r2
 200efb4:	198cb03a 	or	r6,r3,r6
 200efb8:	300cc03a 	cmpne	r6,r6,zero
 200efbc:	218cb03a 	or	r6,r4,r6
 200efc0:	0007883a 	mov	r3,zero
 200efc4:	003f3b06 	br	200ecb4 <__adddf3+0x15c>
 200efc8:	80002a26 	beq	r16,zero,200f074 <__adddf3+0x51c>
 200efcc:	0101ffc4 	movi	r4,2047
 200efd0:	11006826 	beq	r2,r4,200f174 <__adddf3+0x61c>
 200efd4:	00c7c83a 	sub	r3,zero,r3
 200efd8:	42002034 	orhi	r8,r8,128
 200efdc:	01000e04 	movi	r4,56
 200efe0:	20c07c16 	blt	r4,r3,200f1d4 <__adddf3+0x67c>
 200efe4:	010007c4 	movi	r4,31
 200efe8:	20c0da16 	blt	r4,r3,200f354 <__adddf3+0x7fc>
 200efec:	01000804 	movi	r4,32
 200eff0:	20c9c83a 	sub	r4,r4,r3
 200eff4:	4114983a 	sll	r10,r8,r4
 200eff8:	88cad83a 	srl	r5,r17,r3
 200effc:	8908983a 	sll	r4,r17,r4
 200f000:	40c6d83a 	srl	r3,r8,r3
 200f004:	5162b03a 	or	r17,r10,r5
 200f008:	2008c03a 	cmpne	r4,r4,zero
 200f00c:	8922b03a 	or	r17,r17,r4
 200f010:	3463c83a 	sub	r17,r6,r17
 200f014:	48c7c83a 	sub	r3,r9,r3
 200f018:	344d803a 	cmpltu	r6,r6,r17
 200f01c:	1991c83a 	sub	r8,r3,r6
 200f020:	1021883a 	mov	r16,r2
 200f024:	3825883a 	mov	r18,r7
 200f028:	003f2706 	br	200ecc8 <__adddf3+0x170>
 200f02c:	24d0b03a 	or	r8,r4,r19
 200f030:	40001b1e 	bne	r8,zero,200f0a0 <__adddf3+0x548>
 200f034:	0005883a 	mov	r2,zero
 200f038:	0007883a 	mov	r3,zero
 200f03c:	0021883a 	mov	r16,zero
 200f040:	003f4d06 	br	200ed78 <__adddf3+0x220>
 200f044:	008007c4 	movi	r2,31
 200f048:	11003c16 	blt	r2,r4,200f13c <__adddf3+0x5e4>
 200f04c:	00800804 	movi	r2,32
 200f050:	1105c83a 	sub	r2,r2,r4
 200f054:	488e983a 	sll	r7,r9,r2
 200f058:	310ad83a 	srl	r5,r6,r4
 200f05c:	3084983a 	sll	r2,r6,r2
 200f060:	4912d83a 	srl	r9,r9,r4
 200f064:	394ab03a 	or	r5,r7,r5
 200f068:	1004c03a 	cmpne	r2,r2,zero
 200f06c:	288ab03a 	or	r5,r5,r2
 200f070:	003f5306 	br	200edc0 <__adddf3+0x268>
 200f074:	4448b03a 	or	r4,r8,r17
 200f078:	20003e26 	beq	r4,zero,200f174 <__adddf3+0x61c>
 200f07c:	00c6303a 	nor	r3,zero,r3
 200f080:	18003a1e 	bne	r3,zero,200f16c <__adddf3+0x614>
 200f084:	3463c83a 	sub	r17,r6,r17
 200f088:	4a07c83a 	sub	r3,r9,r8
 200f08c:	344d803a 	cmpltu	r6,r6,r17
 200f090:	1991c83a 	sub	r8,r3,r6
 200f094:	1021883a 	mov	r16,r2
 200f098:	3825883a 	mov	r18,r7
 200f09c:	003f0a06 	br	200ecc8 <__adddf3+0x170>
 200f0a0:	2023883a 	mov	r17,r4
 200f0a4:	003f0d06 	br	200ecdc <__adddf3+0x184>
 200f0a8:	0081ffc4 	movi	r2,2047
 200f0ac:	80bf3f1e 	bne	r16,r2,200edac <__adddf3+0x254>
 200f0b0:	003ec806 	br	200ebd4 <__adddf3+0x7c>
 200f0b4:	0005883a 	mov	r2,zero
 200f0b8:	003fb106 	br	200ef80 <__adddf3+0x428>
 200f0bc:	0007883a 	mov	r3,zero
 200f0c0:	003fbc06 	br	200efb4 <__adddf3+0x45c>
 200f0c4:	4444b03a 	or	r2,r8,r17
 200f0c8:	8000871e 	bne	r16,zero,200f2e8 <__adddf3+0x790>
 200f0cc:	1000ba26 	beq	r2,zero,200f3b8 <__adddf3+0x860>
 200f0d0:	4984b03a 	or	r2,r9,r6
 200f0d4:	103ebf26 	beq	r2,zero,200ebd4 <__adddf3+0x7c>
 200f0d8:	8985883a 	add	r2,r17,r6
 200f0dc:	4247883a 	add	r3,r8,r9
 200f0e0:	1451803a 	cmpltu	r8,r2,r17
 200f0e4:	40d1883a 	add	r8,r8,r3
 200f0e8:	40c0202c 	andhi	r3,r8,128
 200f0ec:	1023883a 	mov	r17,r2
 200f0f0:	183f1a26 	beq	r3,zero,200ed5c <__adddf3+0x204>
 200f0f4:	00bfe034 	movhi	r2,65408
 200f0f8:	10bfffc4 	addi	r2,r2,-1
 200f0fc:	2021883a 	mov	r16,r4
 200f100:	4090703a 	and	r8,r8,r2
 200f104:	003eb306 	br	200ebd4 <__adddf3+0x7c>
 200f108:	4444b03a 	or	r2,r8,r17
 200f10c:	8000291e 	bne	r16,zero,200f1b4 <__adddf3+0x65c>
 200f110:	10004b1e 	bne	r2,zero,200f240 <__adddf3+0x6e8>
 200f114:	4990b03a 	or	r8,r9,r6
 200f118:	40008b26 	beq	r8,zero,200f348 <__adddf3+0x7f0>
 200f11c:	4811883a 	mov	r8,r9
 200f120:	3023883a 	mov	r17,r6
 200f124:	3825883a 	mov	r18,r7
 200f128:	003eaa06 	br	200ebd4 <__adddf3+0x7c>
 200f12c:	1021883a 	mov	r16,r2
 200f130:	0011883a 	mov	r8,zero
 200f134:	0005883a 	mov	r2,zero
 200f138:	003f0f06 	br	200ed78 <__adddf3+0x220>
 200f13c:	217ff804 	addi	r5,r4,-32
 200f140:	00800804 	movi	r2,32
 200f144:	494ad83a 	srl	r5,r9,r5
 200f148:	20807d26 	beq	r4,r2,200f340 <__adddf3+0x7e8>
 200f14c:	00801004 	movi	r2,64
 200f150:	1109c83a 	sub	r4,r2,r4
 200f154:	4912983a 	sll	r9,r9,r4
 200f158:	498cb03a 	or	r6,r9,r6
 200f15c:	300cc03a 	cmpne	r6,r6,zero
 200f160:	298ab03a 	or	r5,r5,r6
 200f164:	0013883a 	mov	r9,zero
 200f168:	003f1506 	br	200edc0 <__adddf3+0x268>
 200f16c:	0101ffc4 	movi	r4,2047
 200f170:	113f9a1e 	bne	r2,r4,200efdc <__adddf3+0x484>
 200f174:	4811883a 	mov	r8,r9
 200f178:	3023883a 	mov	r17,r6
 200f17c:	1021883a 	mov	r16,r2
 200f180:	3825883a 	mov	r18,r7
 200f184:	003e9306 	br	200ebd4 <__adddf3+0x7c>
 200f188:	8000161e 	bne	r16,zero,200f1e4 <__adddf3+0x68c>
 200f18c:	444ab03a 	or	r5,r8,r17
 200f190:	28005126 	beq	r5,zero,200f2d8 <__adddf3+0x780>
 200f194:	0108303a 	nor	r4,zero,r4
 200f198:	20004d1e 	bne	r4,zero,200f2d0 <__adddf3+0x778>
 200f19c:	89a3883a 	add	r17,r17,r6
 200f1a0:	4253883a 	add	r9,r8,r9
 200f1a4:	898d803a 	cmpltu	r6,r17,r6
 200f1a8:	3251883a 	add	r8,r6,r9
 200f1ac:	1021883a 	mov	r16,r2
 200f1b0:	003f0806 	br	200edd4 <__adddf3+0x27c>
 200f1b4:	1000301e 	bne	r2,zero,200f278 <__adddf3+0x720>
 200f1b8:	4984b03a 	or	r2,r9,r6
 200f1bc:	10007126 	beq	r2,zero,200f384 <__adddf3+0x82c>
 200f1c0:	4811883a 	mov	r8,r9
 200f1c4:	3023883a 	mov	r17,r6
 200f1c8:	3825883a 	mov	r18,r7
 200f1cc:	0401ffc4 	movi	r16,2047
 200f1d0:	003e8006 	br	200ebd4 <__adddf3+0x7c>
 200f1d4:	4462b03a 	or	r17,r8,r17
 200f1d8:	8822c03a 	cmpne	r17,r17,zero
 200f1dc:	0007883a 	mov	r3,zero
 200f1e0:	003f8b06 	br	200f010 <__adddf3+0x4b8>
 200f1e4:	0141ffc4 	movi	r5,2047
 200f1e8:	11403b26 	beq	r2,r5,200f2d8 <__adddf3+0x780>
 200f1ec:	0109c83a 	sub	r4,zero,r4
 200f1f0:	42002034 	orhi	r8,r8,128
 200f1f4:	01400e04 	movi	r5,56
 200f1f8:	29006716 	blt	r5,r4,200f398 <__adddf3+0x840>
 200f1fc:	014007c4 	movi	r5,31
 200f200:	29007016 	blt	r5,r4,200f3c4 <__adddf3+0x86c>
 200f204:	01400804 	movi	r5,32
 200f208:	290bc83a 	sub	r5,r5,r4
 200f20c:	4154983a 	sll	r10,r8,r5
 200f210:	890ed83a 	srl	r7,r17,r4
 200f214:	894a983a 	sll	r5,r17,r5
 200f218:	4108d83a 	srl	r4,r8,r4
 200f21c:	51e2b03a 	or	r17,r10,r7
 200f220:	280ac03a 	cmpne	r5,r5,zero
 200f224:	8962b03a 	or	r17,r17,r5
 200f228:	89a3883a 	add	r17,r17,r6
 200f22c:	2253883a 	add	r9,r4,r9
 200f230:	898d803a 	cmpltu	r6,r17,r6
 200f234:	3251883a 	add	r8,r6,r9
 200f238:	1021883a 	mov	r16,r2
 200f23c:	003ee506 	br	200edd4 <__adddf3+0x27c>
 200f240:	4984b03a 	or	r2,r9,r6
 200f244:	103e6326 	beq	r2,zero,200ebd4 <__adddf3+0x7c>
 200f248:	8987c83a 	sub	r3,r17,r6
 200f24c:	88c9803a 	cmpltu	r4,r17,r3
 200f250:	4245c83a 	sub	r2,r8,r9
 200f254:	1105c83a 	sub	r2,r2,r4
 200f258:	1100202c 	andhi	r4,r2,128
 200f25c:	203ebb26 	beq	r4,zero,200ed4c <__adddf3+0x1f4>
 200f260:	3463c83a 	sub	r17,r6,r17
 200f264:	4a07c83a 	sub	r3,r9,r8
 200f268:	344d803a 	cmpltu	r6,r6,r17
 200f26c:	1991c83a 	sub	r8,r3,r6
 200f270:	3825883a 	mov	r18,r7
 200f274:	003e5706 	br	200ebd4 <__adddf3+0x7c>
 200f278:	4984b03a 	or	r2,r9,r6
 200f27c:	10002e26 	beq	r2,zero,200f338 <__adddf3+0x7e0>
 200f280:	4004d0fa 	srli	r2,r8,3
 200f284:	8822d0fa 	srli	r17,r17,3
 200f288:	4010977a 	slli	r8,r8,29
 200f28c:	10c0022c 	andhi	r3,r2,8
 200f290:	4462b03a 	or	r17,r8,r17
 200f294:	18000826 	beq	r3,zero,200f2b8 <__adddf3+0x760>
 200f298:	4808d0fa 	srli	r4,r9,3
 200f29c:	20c0022c 	andhi	r3,r4,8
 200f2a0:	1800051e 	bne	r3,zero,200f2b8 <__adddf3+0x760>
 200f2a4:	300cd0fa 	srli	r6,r6,3
 200f2a8:	4806977a 	slli	r3,r9,29
 200f2ac:	2005883a 	mov	r2,r4
 200f2b0:	3825883a 	mov	r18,r7
 200f2b4:	19a2b03a 	or	r17,r3,r6
 200f2b8:	8810d77a 	srli	r8,r17,29
 200f2bc:	100490fa 	slli	r2,r2,3
 200f2c0:	882290fa 	slli	r17,r17,3
 200f2c4:	0401ffc4 	movi	r16,2047
 200f2c8:	4090b03a 	or	r8,r8,r2
 200f2cc:	003e4106 	br	200ebd4 <__adddf3+0x7c>
 200f2d0:	0141ffc4 	movi	r5,2047
 200f2d4:	117fc71e 	bne	r2,r5,200f1f4 <__adddf3+0x69c>
 200f2d8:	4811883a 	mov	r8,r9
 200f2dc:	3023883a 	mov	r17,r6
 200f2e0:	1021883a 	mov	r16,r2
 200f2e4:	003e3b06 	br	200ebd4 <__adddf3+0x7c>
 200f2e8:	10002f26 	beq	r2,zero,200f3a8 <__adddf3+0x850>
 200f2ec:	4984b03a 	or	r2,r9,r6
 200f2f0:	10001126 	beq	r2,zero,200f338 <__adddf3+0x7e0>
 200f2f4:	4004d0fa 	srli	r2,r8,3
 200f2f8:	8822d0fa 	srli	r17,r17,3
 200f2fc:	4010977a 	slli	r8,r8,29
 200f300:	10c0022c 	andhi	r3,r2,8
 200f304:	4462b03a 	or	r17,r8,r17
 200f308:	183feb26 	beq	r3,zero,200f2b8 <__adddf3+0x760>
 200f30c:	4808d0fa 	srli	r4,r9,3
 200f310:	20c0022c 	andhi	r3,r4,8
 200f314:	183fe81e 	bne	r3,zero,200f2b8 <__adddf3+0x760>
 200f318:	300cd0fa 	srli	r6,r6,3
 200f31c:	4806977a 	slli	r3,r9,29
 200f320:	2005883a 	mov	r2,r4
 200f324:	19a2b03a 	or	r17,r3,r6
 200f328:	003fe306 	br	200f2b8 <__adddf3+0x760>
 200f32c:	0011883a 	mov	r8,zero
 200f330:	0005883a 	mov	r2,zero
 200f334:	003e3f06 	br	200ec34 <__adddf3+0xdc>
 200f338:	0401ffc4 	movi	r16,2047
 200f33c:	003e2506 	br	200ebd4 <__adddf3+0x7c>
 200f340:	0013883a 	mov	r9,zero
 200f344:	003f8406 	br	200f158 <__adddf3+0x600>
 200f348:	0005883a 	mov	r2,zero
 200f34c:	0007883a 	mov	r3,zero
 200f350:	003e8906 	br	200ed78 <__adddf3+0x220>
 200f354:	197ff804 	addi	r5,r3,-32
 200f358:	01000804 	movi	r4,32
 200f35c:	414ad83a 	srl	r5,r8,r5
 200f360:	19002426 	beq	r3,r4,200f3f4 <__adddf3+0x89c>
 200f364:	01001004 	movi	r4,64
 200f368:	20c7c83a 	sub	r3,r4,r3
 200f36c:	40c6983a 	sll	r3,r8,r3
 200f370:	1c46b03a 	or	r3,r3,r17
 200f374:	1806c03a 	cmpne	r3,r3,zero
 200f378:	28e2b03a 	or	r17,r5,r3
 200f37c:	0007883a 	mov	r3,zero
 200f380:	003f2306 	br	200f010 <__adddf3+0x4b8>
 200f384:	0007883a 	mov	r3,zero
 200f388:	5811883a 	mov	r8,r11
 200f38c:	00bfffc4 	movi	r2,-1
 200f390:	0401ffc4 	movi	r16,2047
 200f394:	003e7806 	br	200ed78 <__adddf3+0x220>
 200f398:	4462b03a 	or	r17,r8,r17
 200f39c:	8822c03a 	cmpne	r17,r17,zero
 200f3a0:	0009883a 	mov	r4,zero
 200f3a4:	003fa006 	br	200f228 <__adddf3+0x6d0>
 200f3a8:	4811883a 	mov	r8,r9
 200f3ac:	3023883a 	mov	r17,r6
 200f3b0:	0401ffc4 	movi	r16,2047
 200f3b4:	003e0706 	br	200ebd4 <__adddf3+0x7c>
 200f3b8:	4811883a 	mov	r8,r9
 200f3bc:	3023883a 	mov	r17,r6
 200f3c0:	003e0406 	br	200ebd4 <__adddf3+0x7c>
 200f3c4:	21fff804 	addi	r7,r4,-32
 200f3c8:	01400804 	movi	r5,32
 200f3cc:	41ced83a 	srl	r7,r8,r7
 200f3d0:	21400a26 	beq	r4,r5,200f3fc <__adddf3+0x8a4>
 200f3d4:	01401004 	movi	r5,64
 200f3d8:	2909c83a 	sub	r4,r5,r4
 200f3dc:	4108983a 	sll	r4,r8,r4
 200f3e0:	2448b03a 	or	r4,r4,r17
 200f3e4:	2008c03a 	cmpne	r4,r4,zero
 200f3e8:	3922b03a 	or	r17,r7,r4
 200f3ec:	0009883a 	mov	r4,zero
 200f3f0:	003f8d06 	br	200f228 <__adddf3+0x6d0>
 200f3f4:	0007883a 	mov	r3,zero
 200f3f8:	003fdd06 	br	200f370 <__adddf3+0x818>
 200f3fc:	0009883a 	mov	r4,zero
 200f400:	003ff706 	br	200f3e0 <__adddf3+0x888>

0200f404 <__eqdf2>:
 200f404:	2804d53a 	srli	r2,r5,20
 200f408:	3806d53a 	srli	r3,r7,20
 200f40c:	02000434 	movhi	r8,16
 200f410:	423fffc4 	addi	r8,r8,-1
 200f414:	1081ffcc 	andi	r2,r2,2047
 200f418:	0281ffc4 	movi	r10,2047
 200f41c:	2a12703a 	and	r9,r5,r8
 200f420:	18c1ffcc 	andi	r3,r3,2047
 200f424:	3a10703a 	and	r8,r7,r8
 200f428:	280ad7fa 	srli	r5,r5,31
 200f42c:	380ed7fa 	srli	r7,r7,31
 200f430:	12801026 	beq	r2,r10,200f474 <__eqdf2+0x70>
 200f434:	0281ffc4 	movi	r10,2047
 200f438:	1a800a26 	beq	r3,r10,200f464 <__eqdf2+0x60>
 200f43c:	10c00226 	beq	r2,r3,200f448 <__eqdf2+0x44>
 200f440:	00800044 	movi	r2,1
 200f444:	f800283a 	ret
 200f448:	4a3ffd1e 	bne	r9,r8,200f440 <__eqdf2+0x3c>
 200f44c:	21bffc1e 	bne	r4,r6,200f440 <__eqdf2+0x3c>
 200f450:	29c00c26 	beq	r5,r7,200f484 <__eqdf2+0x80>
 200f454:	103ffa1e 	bne	r2,zero,200f440 <__eqdf2+0x3c>
 200f458:	2244b03a 	or	r2,r4,r9
 200f45c:	1004c03a 	cmpne	r2,r2,zero
 200f460:	f800283a 	ret
 200f464:	3214b03a 	or	r10,r6,r8
 200f468:	503ff426 	beq	r10,zero,200f43c <__eqdf2+0x38>
 200f46c:	00800044 	movi	r2,1
 200f470:	f800283a 	ret
 200f474:	2254b03a 	or	r10,r4,r9
 200f478:	503fee26 	beq	r10,zero,200f434 <__eqdf2+0x30>
 200f47c:	00800044 	movi	r2,1
 200f480:	f800283a 	ret
 200f484:	0005883a 	mov	r2,zero
 200f488:	f800283a 	ret

0200f48c <__ledf2>:
 200f48c:	2804d53a 	srli	r2,r5,20
 200f490:	3810d53a 	srli	r8,r7,20
 200f494:	00c00434 	movhi	r3,16
 200f498:	18ffffc4 	addi	r3,r3,-1
 200f49c:	1081ffcc 	andi	r2,r2,2047
 200f4a0:	0241ffc4 	movi	r9,2047
 200f4a4:	28d4703a 	and	r10,r5,r3
 200f4a8:	4201ffcc 	andi	r8,r8,2047
 200f4ac:	38c6703a 	and	r3,r7,r3
 200f4b0:	280ad7fa 	srli	r5,r5,31
 200f4b4:	380ed7fa 	srli	r7,r7,31
 200f4b8:	12401f26 	beq	r2,r9,200f538 <__ledf2+0xac>
 200f4bc:	0241ffc4 	movi	r9,2047
 200f4c0:	42401426 	beq	r8,r9,200f514 <__ledf2+0x88>
 200f4c4:	1000091e 	bne	r2,zero,200f4ec <__ledf2+0x60>
 200f4c8:	2296b03a 	or	r11,r4,r10
 200f4cc:	5813003a 	cmpeq	r9,r11,zero
 200f4d0:	29403fcc 	andi	r5,r5,255
 200f4d4:	40000a1e 	bne	r8,zero,200f500 <__ledf2+0x74>
 200f4d8:	30d8b03a 	or	r12,r6,r3
 200f4dc:	6000081e 	bne	r12,zero,200f500 <__ledf2+0x74>
 200f4e0:	0005883a 	mov	r2,zero
 200f4e4:	5800111e 	bne	r11,zero,200f52c <__ledf2+0xa0>
 200f4e8:	f800283a 	ret
 200f4ec:	29403fcc 	andi	r5,r5,255
 200f4f0:	40000c1e 	bne	r8,zero,200f524 <__ledf2+0x98>
 200f4f4:	30d2b03a 	or	r9,r6,r3
 200f4f8:	48000c26 	beq	r9,zero,200f52c <__ledf2+0xa0>
 200f4fc:	0013883a 	mov	r9,zero
 200f500:	39c03fcc 	andi	r7,r7,255
 200f504:	48000826 	beq	r9,zero,200f528 <__ledf2+0x9c>
 200f508:	38001126 	beq	r7,zero,200f550 <__ledf2+0xc4>
 200f50c:	00800044 	movi	r2,1
 200f510:	f800283a 	ret
 200f514:	30d2b03a 	or	r9,r6,r3
 200f518:	483fea26 	beq	r9,zero,200f4c4 <__ledf2+0x38>
 200f51c:	00800084 	movi	r2,2
 200f520:	f800283a 	ret
 200f524:	39c03fcc 	andi	r7,r7,255
 200f528:	39400726 	beq	r7,r5,200f548 <__ledf2+0xbc>
 200f52c:	2800081e 	bne	r5,zero,200f550 <__ledf2+0xc4>
 200f530:	00800044 	movi	r2,1
 200f534:	f800283a 	ret
 200f538:	2292b03a 	or	r9,r4,r10
 200f53c:	483fdf26 	beq	r9,zero,200f4bc <__ledf2+0x30>
 200f540:	00800084 	movi	r2,2
 200f544:	f800283a 	ret
 200f548:	4080030e 	bge	r8,r2,200f558 <__ledf2+0xcc>
 200f54c:	383fef26 	beq	r7,zero,200f50c <__ledf2+0x80>
 200f550:	00bfffc4 	movi	r2,-1
 200f554:	f800283a 	ret
 200f558:	123feb16 	blt	r2,r8,200f508 <__ledf2+0x7c>
 200f55c:	1abff336 	bltu	r3,r10,200f52c <__ledf2+0xa0>
 200f560:	50c00326 	beq	r10,r3,200f570 <__ledf2+0xe4>
 200f564:	50c0042e 	bgeu	r10,r3,200f578 <__ledf2+0xec>
 200f568:	283fe81e 	bne	r5,zero,200f50c <__ledf2+0x80>
 200f56c:	003ff806 	br	200f550 <__ledf2+0xc4>
 200f570:	313fee36 	bltu	r6,r4,200f52c <__ledf2+0xa0>
 200f574:	21bffc36 	bltu	r4,r6,200f568 <__ledf2+0xdc>
 200f578:	0005883a 	mov	r2,zero
 200f57c:	f800283a 	ret

0200f580 <__subdf3>:
 200f580:	02000434 	movhi	r8,16
 200f584:	423fffc4 	addi	r8,r8,-1
 200f588:	defffb04 	addi	sp,sp,-20
 200f58c:	2a14703a 	and	r10,r5,r8
 200f590:	3812d53a 	srli	r9,r7,20
 200f594:	3a10703a 	and	r8,r7,r8
 200f598:	2006d77a 	srli	r3,r4,29
 200f59c:	3004d77a 	srli	r2,r6,29
 200f5a0:	dc000015 	stw	r16,0(sp)
 200f5a4:	501490fa 	slli	r10,r10,3
 200f5a8:	2820d53a 	srli	r16,r5,20
 200f5ac:	401090fa 	slli	r8,r8,3
 200f5b0:	dc800215 	stw	r18,8(sp)
 200f5b4:	dc400115 	stw	r17,4(sp)
 200f5b8:	dfc00415 	stw	ra,16(sp)
 200f5bc:	202290fa 	slli	r17,r4,3
 200f5c0:	dcc00315 	stw	r19,12(sp)
 200f5c4:	4a41ffcc 	andi	r9,r9,2047
 200f5c8:	0101ffc4 	movi	r4,2047
 200f5cc:	2824d7fa 	srli	r18,r5,31
 200f5d0:	8401ffcc 	andi	r16,r16,2047
 200f5d4:	50c6b03a 	or	r3,r10,r3
 200f5d8:	380ed7fa 	srli	r7,r7,31
 200f5dc:	408ab03a 	or	r5,r8,r2
 200f5e0:	300c90fa 	slli	r6,r6,3
 200f5e4:	49009626 	beq	r9,r4,200f840 <__subdf3+0x2c0>
 200f5e8:	39c0005c 	xori	r7,r7,1
 200f5ec:	8245c83a 	sub	r2,r16,r9
 200f5f0:	3c807426 	beq	r7,r18,200f7c4 <__subdf3+0x244>
 200f5f4:	0080af0e 	bge	zero,r2,200f8b4 <__subdf3+0x334>
 200f5f8:	48002a1e 	bne	r9,zero,200f6a4 <__subdf3+0x124>
 200f5fc:	2988b03a 	or	r4,r5,r6
 200f600:	20009a1e 	bne	r4,zero,200f86c <__subdf3+0x2ec>
 200f604:	888001cc 	andi	r2,r17,7
 200f608:	10000726 	beq	r2,zero,200f628 <__subdf3+0xa8>
 200f60c:	888003cc 	andi	r2,r17,15
 200f610:	01000104 	movi	r4,4
 200f614:	11000426 	beq	r2,r4,200f628 <__subdf3+0xa8>
 200f618:	890b883a 	add	r5,r17,r4
 200f61c:	2c63803a 	cmpltu	r17,r5,r17
 200f620:	1c47883a 	add	r3,r3,r17
 200f624:	2823883a 	mov	r17,r5
 200f628:	1880202c 	andhi	r2,r3,128
 200f62c:	10005926 	beq	r2,zero,200f794 <__subdf3+0x214>
 200f630:	84000044 	addi	r16,r16,1
 200f634:	0081ffc4 	movi	r2,2047
 200f638:	8080be26 	beq	r16,r2,200f934 <__subdf3+0x3b4>
 200f63c:	017fe034 	movhi	r5,65408
 200f640:	297fffc4 	addi	r5,r5,-1
 200f644:	1946703a 	and	r3,r3,r5
 200f648:	1804977a 	slli	r2,r3,29
 200f64c:	1806927a 	slli	r3,r3,9
 200f650:	8822d0fa 	srli	r17,r17,3
 200f654:	8401ffcc 	andi	r16,r16,2047
 200f658:	180ad33a 	srli	r5,r3,12
 200f65c:	9100004c 	andi	r4,r18,1
 200f660:	1444b03a 	or	r2,r2,r17
 200f664:	80c1ffcc 	andi	r3,r16,2047
 200f668:	1820953a 	slli	r16,r3,20
 200f66c:	20c03fcc 	andi	r3,r4,255
 200f670:	180897fa 	slli	r4,r3,31
 200f674:	00c00434 	movhi	r3,16
 200f678:	18ffffc4 	addi	r3,r3,-1
 200f67c:	28c6703a 	and	r3,r5,r3
 200f680:	1c06b03a 	or	r3,r3,r16
 200f684:	1906b03a 	or	r3,r3,r4
 200f688:	dfc00417 	ldw	ra,16(sp)
 200f68c:	dcc00317 	ldw	r19,12(sp)
 200f690:	dc800217 	ldw	r18,8(sp)
 200f694:	dc400117 	ldw	r17,4(sp)
 200f698:	dc000017 	ldw	r16,0(sp)
 200f69c:	dec00504 	addi	sp,sp,20
 200f6a0:	f800283a 	ret
 200f6a4:	0101ffc4 	movi	r4,2047
 200f6a8:	813fd626 	beq	r16,r4,200f604 <__subdf3+0x84>
 200f6ac:	29402034 	orhi	r5,r5,128
 200f6b0:	01000e04 	movi	r4,56
 200f6b4:	2080a316 	blt	r4,r2,200f944 <__subdf3+0x3c4>
 200f6b8:	010007c4 	movi	r4,31
 200f6bc:	2080c616 	blt	r4,r2,200f9d8 <__subdf3+0x458>
 200f6c0:	01000804 	movi	r4,32
 200f6c4:	2089c83a 	sub	r4,r4,r2
 200f6c8:	2910983a 	sll	r8,r5,r4
 200f6cc:	308ed83a 	srl	r7,r6,r2
 200f6d0:	3108983a 	sll	r4,r6,r4
 200f6d4:	2884d83a 	srl	r2,r5,r2
 200f6d8:	41ccb03a 	or	r6,r8,r7
 200f6dc:	2008c03a 	cmpne	r4,r4,zero
 200f6e0:	310cb03a 	or	r6,r6,r4
 200f6e4:	898dc83a 	sub	r6,r17,r6
 200f6e8:	89a3803a 	cmpltu	r17,r17,r6
 200f6ec:	1887c83a 	sub	r3,r3,r2
 200f6f0:	1c47c83a 	sub	r3,r3,r17
 200f6f4:	3023883a 	mov	r17,r6
 200f6f8:	1880202c 	andhi	r2,r3,128
 200f6fc:	10002326 	beq	r2,zero,200f78c <__subdf3+0x20c>
 200f700:	04c02034 	movhi	r19,128
 200f704:	9cffffc4 	addi	r19,r19,-1
 200f708:	1ce6703a 	and	r19,r3,r19
 200f70c:	98007a26 	beq	r19,zero,200f8f8 <__subdf3+0x378>
 200f710:	9809883a 	mov	r4,r19
 200f714:	20044700 	call	2004470 <__clzsi2>
 200f718:	113ffe04 	addi	r4,r2,-8
 200f71c:	00c007c4 	movi	r3,31
 200f720:	19007b16 	blt	r3,r4,200f910 <__subdf3+0x390>
 200f724:	00800804 	movi	r2,32
 200f728:	1105c83a 	sub	r2,r2,r4
 200f72c:	8884d83a 	srl	r2,r17,r2
 200f730:	9906983a 	sll	r3,r19,r4
 200f734:	8922983a 	sll	r17,r17,r4
 200f738:	10c4b03a 	or	r2,r2,r3
 200f73c:	24007816 	blt	r4,r16,200f920 <__subdf3+0x3a0>
 200f740:	2421c83a 	sub	r16,r4,r16
 200f744:	80c00044 	addi	r3,r16,1
 200f748:	010007c4 	movi	r4,31
 200f74c:	20c09516 	blt	r4,r3,200f9a4 <__subdf3+0x424>
 200f750:	01400804 	movi	r5,32
 200f754:	28cbc83a 	sub	r5,r5,r3
 200f758:	88c8d83a 	srl	r4,r17,r3
 200f75c:	8962983a 	sll	r17,r17,r5
 200f760:	114a983a 	sll	r5,r2,r5
 200f764:	10c6d83a 	srl	r3,r2,r3
 200f768:	8804c03a 	cmpne	r2,r17,zero
 200f76c:	290ab03a 	or	r5,r5,r4
 200f770:	28a2b03a 	or	r17,r5,r2
 200f774:	0021883a 	mov	r16,zero
 200f778:	003fa206 	br	200f604 <__subdf3+0x84>
 200f77c:	2090b03a 	or	r8,r4,r2
 200f780:	40018e26 	beq	r8,zero,200fdbc <__subdf3+0x83c>
 200f784:	1007883a 	mov	r3,r2
 200f788:	2023883a 	mov	r17,r4
 200f78c:	888001cc 	andi	r2,r17,7
 200f790:	103f9e1e 	bne	r2,zero,200f60c <__subdf3+0x8c>
 200f794:	1804977a 	slli	r2,r3,29
 200f798:	8822d0fa 	srli	r17,r17,3
 200f79c:	1810d0fa 	srli	r8,r3,3
 200f7a0:	9100004c 	andi	r4,r18,1
 200f7a4:	1444b03a 	or	r2,r2,r17
 200f7a8:	00c1ffc4 	movi	r3,2047
 200f7ac:	80c02826 	beq	r16,r3,200f850 <__subdf3+0x2d0>
 200f7b0:	01400434 	movhi	r5,16
 200f7b4:	297fffc4 	addi	r5,r5,-1
 200f7b8:	80e0703a 	and	r16,r16,r3
 200f7bc:	414a703a 	and	r5,r8,r5
 200f7c0:	003fa806 	br	200f664 <__subdf3+0xe4>
 200f7c4:	0080630e 	bge	zero,r2,200f954 <__subdf3+0x3d4>
 200f7c8:	48003026 	beq	r9,zero,200f88c <__subdf3+0x30c>
 200f7cc:	0101ffc4 	movi	r4,2047
 200f7d0:	813f8c26 	beq	r16,r4,200f604 <__subdf3+0x84>
 200f7d4:	29402034 	orhi	r5,r5,128
 200f7d8:	01000e04 	movi	r4,56
 200f7dc:	2080a90e 	bge	r4,r2,200fa84 <__subdf3+0x504>
 200f7e0:	298cb03a 	or	r6,r5,r6
 200f7e4:	3012c03a 	cmpne	r9,r6,zero
 200f7e8:	0005883a 	mov	r2,zero
 200f7ec:	4c53883a 	add	r9,r9,r17
 200f7f0:	4c63803a 	cmpltu	r17,r9,r17
 200f7f4:	10c7883a 	add	r3,r2,r3
 200f7f8:	88c7883a 	add	r3,r17,r3
 200f7fc:	4823883a 	mov	r17,r9
 200f800:	1880202c 	andhi	r2,r3,128
 200f804:	1000d026 	beq	r2,zero,200fb48 <__subdf3+0x5c8>
 200f808:	84000044 	addi	r16,r16,1
 200f80c:	0081ffc4 	movi	r2,2047
 200f810:	8080fe26 	beq	r16,r2,200fc0c <__subdf3+0x68c>
 200f814:	00bfe034 	movhi	r2,65408
 200f818:	10bfffc4 	addi	r2,r2,-1
 200f81c:	1886703a 	and	r3,r3,r2
 200f820:	880ad07a 	srli	r5,r17,1
 200f824:	180497fa 	slli	r2,r3,31
 200f828:	8900004c 	andi	r4,r17,1
 200f82c:	2922b03a 	or	r17,r5,r4
 200f830:	1806d07a 	srli	r3,r3,1
 200f834:	1462b03a 	or	r17,r2,r17
 200f838:	3825883a 	mov	r18,r7
 200f83c:	003f7106 	br	200f604 <__subdf3+0x84>
 200f840:	2984b03a 	or	r2,r5,r6
 200f844:	103f6826 	beq	r2,zero,200f5e8 <__subdf3+0x68>
 200f848:	39c03fcc 	andi	r7,r7,255
 200f84c:	003f6706 	br	200f5ec <__subdf3+0x6c>
 200f850:	4086b03a 	or	r3,r8,r2
 200f854:	18015226 	beq	r3,zero,200fda0 <__subdf3+0x820>
 200f858:	00c00434 	movhi	r3,16
 200f85c:	41400234 	orhi	r5,r8,8
 200f860:	18ffffc4 	addi	r3,r3,-1
 200f864:	28ca703a 	and	r5,r5,r3
 200f868:	003f7e06 	br	200f664 <__subdf3+0xe4>
 200f86c:	10bfffc4 	addi	r2,r2,-1
 200f870:	1000491e 	bne	r2,zero,200f998 <__subdf3+0x418>
 200f874:	898fc83a 	sub	r7,r17,r6
 200f878:	89e3803a 	cmpltu	r17,r17,r7
 200f87c:	1947c83a 	sub	r3,r3,r5
 200f880:	1c47c83a 	sub	r3,r3,r17
 200f884:	3823883a 	mov	r17,r7
 200f888:	003f9b06 	br	200f6f8 <__subdf3+0x178>
 200f88c:	2988b03a 	or	r4,r5,r6
 200f890:	203f5c26 	beq	r4,zero,200f604 <__subdf3+0x84>
 200f894:	10bfffc4 	addi	r2,r2,-1
 200f898:	1000931e 	bne	r2,zero,200fae8 <__subdf3+0x568>
 200f89c:	898d883a 	add	r6,r17,r6
 200f8a0:	3463803a 	cmpltu	r17,r6,r17
 200f8a4:	1947883a 	add	r3,r3,r5
 200f8a8:	88c7883a 	add	r3,r17,r3
 200f8ac:	3023883a 	mov	r17,r6
 200f8b0:	003fd306 	br	200f800 <__subdf3+0x280>
 200f8b4:	1000541e 	bne	r2,zero,200fa08 <__subdf3+0x488>
 200f8b8:	80800044 	addi	r2,r16,1
 200f8bc:	1081ffcc 	andi	r2,r2,2047
 200f8c0:	01000044 	movi	r4,1
 200f8c4:	2080a20e 	bge	r4,r2,200fb50 <__subdf3+0x5d0>
 200f8c8:	8989c83a 	sub	r4,r17,r6
 200f8cc:	8905803a 	cmpltu	r2,r17,r4
 200f8d0:	1967c83a 	sub	r19,r3,r5
 200f8d4:	98a7c83a 	sub	r19,r19,r2
 200f8d8:	9880202c 	andhi	r2,r19,128
 200f8dc:	10006326 	beq	r2,zero,200fa6c <__subdf3+0x4ec>
 200f8e0:	3463c83a 	sub	r17,r6,r17
 200f8e4:	28c7c83a 	sub	r3,r5,r3
 200f8e8:	344d803a 	cmpltu	r6,r6,r17
 200f8ec:	19a7c83a 	sub	r19,r3,r6
 200f8f0:	3825883a 	mov	r18,r7
 200f8f4:	983f861e 	bne	r19,zero,200f710 <__subdf3+0x190>
 200f8f8:	8809883a 	mov	r4,r17
 200f8fc:	20044700 	call	2004470 <__clzsi2>
 200f900:	10800804 	addi	r2,r2,32
 200f904:	113ffe04 	addi	r4,r2,-8
 200f908:	00c007c4 	movi	r3,31
 200f90c:	193f850e 	bge	r3,r4,200f724 <__subdf3+0x1a4>
 200f910:	10bff604 	addi	r2,r2,-40
 200f914:	8884983a 	sll	r2,r17,r2
 200f918:	0023883a 	mov	r17,zero
 200f91c:	243f880e 	bge	r4,r16,200f740 <__subdf3+0x1c0>
 200f920:	00ffe034 	movhi	r3,65408
 200f924:	18ffffc4 	addi	r3,r3,-1
 200f928:	8121c83a 	sub	r16,r16,r4
 200f92c:	10c6703a 	and	r3,r2,r3
 200f930:	003f3406 	br	200f604 <__subdf3+0x84>
 200f934:	9100004c 	andi	r4,r18,1
 200f938:	000b883a 	mov	r5,zero
 200f93c:	0005883a 	mov	r2,zero
 200f940:	003f4806 	br	200f664 <__subdf3+0xe4>
 200f944:	298cb03a 	or	r6,r5,r6
 200f948:	300cc03a 	cmpne	r6,r6,zero
 200f94c:	0005883a 	mov	r2,zero
 200f950:	003f6406 	br	200f6e4 <__subdf3+0x164>
 200f954:	10009a1e 	bne	r2,zero,200fbc0 <__subdf3+0x640>
 200f958:	82400044 	addi	r9,r16,1
 200f95c:	4881ffcc 	andi	r2,r9,2047
 200f960:	02800044 	movi	r10,1
 200f964:	5080670e 	bge	r10,r2,200fb04 <__subdf3+0x584>
 200f968:	0081ffc4 	movi	r2,2047
 200f96c:	4880af26 	beq	r9,r2,200fc2c <__subdf3+0x6ac>
 200f970:	898d883a 	add	r6,r17,r6
 200f974:	1945883a 	add	r2,r3,r5
 200f978:	3447803a 	cmpltu	r3,r6,r17
 200f97c:	1887883a 	add	r3,r3,r2
 200f980:	182297fa 	slli	r17,r3,31
 200f984:	300cd07a 	srli	r6,r6,1
 200f988:	1806d07a 	srli	r3,r3,1
 200f98c:	4821883a 	mov	r16,r9
 200f990:	89a2b03a 	or	r17,r17,r6
 200f994:	003f1b06 	br	200f604 <__subdf3+0x84>
 200f998:	0101ffc4 	movi	r4,2047
 200f99c:	813f441e 	bne	r16,r4,200f6b0 <__subdf3+0x130>
 200f9a0:	003f1806 	br	200f604 <__subdf3+0x84>
 200f9a4:	843ff844 	addi	r16,r16,-31
 200f9a8:	01400804 	movi	r5,32
 200f9ac:	1408d83a 	srl	r4,r2,r16
 200f9b0:	19405026 	beq	r3,r5,200faf4 <__subdf3+0x574>
 200f9b4:	01401004 	movi	r5,64
 200f9b8:	28c7c83a 	sub	r3,r5,r3
 200f9bc:	10c4983a 	sll	r2,r2,r3
 200f9c0:	88a2b03a 	or	r17,r17,r2
 200f9c4:	8822c03a 	cmpne	r17,r17,zero
 200f9c8:	2462b03a 	or	r17,r4,r17
 200f9cc:	0007883a 	mov	r3,zero
 200f9d0:	0021883a 	mov	r16,zero
 200f9d4:	003f6d06 	br	200f78c <__subdf3+0x20c>
 200f9d8:	11fff804 	addi	r7,r2,-32
 200f9dc:	01000804 	movi	r4,32
 200f9e0:	29ced83a 	srl	r7,r5,r7
 200f9e4:	11004526 	beq	r2,r4,200fafc <__subdf3+0x57c>
 200f9e8:	01001004 	movi	r4,64
 200f9ec:	2089c83a 	sub	r4,r4,r2
 200f9f0:	2904983a 	sll	r2,r5,r4
 200f9f4:	118cb03a 	or	r6,r2,r6
 200f9f8:	300cc03a 	cmpne	r6,r6,zero
 200f9fc:	398cb03a 	or	r6,r7,r6
 200fa00:	0005883a 	mov	r2,zero
 200fa04:	003f3706 	br	200f6e4 <__subdf3+0x164>
 200fa08:	80002a26 	beq	r16,zero,200fab4 <__subdf3+0x534>
 200fa0c:	0101ffc4 	movi	r4,2047
 200fa10:	49006626 	beq	r9,r4,200fbac <__subdf3+0x62c>
 200fa14:	0085c83a 	sub	r2,zero,r2
 200fa18:	18c02034 	orhi	r3,r3,128
 200fa1c:	01000e04 	movi	r4,56
 200fa20:	20807e16 	blt	r4,r2,200fc1c <__subdf3+0x69c>
 200fa24:	010007c4 	movi	r4,31
 200fa28:	2080e716 	blt	r4,r2,200fdc8 <__subdf3+0x848>
 200fa2c:	01000804 	movi	r4,32
 200fa30:	2089c83a 	sub	r4,r4,r2
 200fa34:	1914983a 	sll	r10,r3,r4
 200fa38:	8890d83a 	srl	r8,r17,r2
 200fa3c:	8908983a 	sll	r4,r17,r4
 200fa40:	1884d83a 	srl	r2,r3,r2
 200fa44:	5222b03a 	or	r17,r10,r8
 200fa48:	2006c03a 	cmpne	r3,r4,zero
 200fa4c:	88e2b03a 	or	r17,r17,r3
 200fa50:	3463c83a 	sub	r17,r6,r17
 200fa54:	2885c83a 	sub	r2,r5,r2
 200fa58:	344d803a 	cmpltu	r6,r6,r17
 200fa5c:	1187c83a 	sub	r3,r2,r6
 200fa60:	4821883a 	mov	r16,r9
 200fa64:	3825883a 	mov	r18,r7
 200fa68:	003f2306 	br	200f6f8 <__subdf3+0x178>
 200fa6c:	24d0b03a 	or	r8,r4,r19
 200fa70:	40001b1e 	bne	r8,zero,200fae0 <__subdf3+0x560>
 200fa74:	0005883a 	mov	r2,zero
 200fa78:	0009883a 	mov	r4,zero
 200fa7c:	0021883a 	mov	r16,zero
 200fa80:	003f4906 	br	200f7a8 <__subdf3+0x228>
 200fa84:	010007c4 	movi	r4,31
 200fa88:	20803a16 	blt	r4,r2,200fb74 <__subdf3+0x5f4>
 200fa8c:	01000804 	movi	r4,32
 200fa90:	2089c83a 	sub	r4,r4,r2
 200fa94:	2912983a 	sll	r9,r5,r4
 200fa98:	3090d83a 	srl	r8,r6,r2
 200fa9c:	3108983a 	sll	r4,r6,r4
 200faa0:	2884d83a 	srl	r2,r5,r2
 200faa4:	4a12b03a 	or	r9,r9,r8
 200faa8:	2008c03a 	cmpne	r4,r4,zero
 200faac:	4912b03a 	or	r9,r9,r4
 200fab0:	003f4e06 	br	200f7ec <__subdf3+0x26c>
 200fab4:	1c48b03a 	or	r4,r3,r17
 200fab8:	20003c26 	beq	r4,zero,200fbac <__subdf3+0x62c>
 200fabc:	0084303a 	nor	r2,zero,r2
 200fac0:	1000381e 	bne	r2,zero,200fba4 <__subdf3+0x624>
 200fac4:	3463c83a 	sub	r17,r6,r17
 200fac8:	28c5c83a 	sub	r2,r5,r3
 200facc:	344d803a 	cmpltu	r6,r6,r17
 200fad0:	1187c83a 	sub	r3,r2,r6
 200fad4:	4821883a 	mov	r16,r9
 200fad8:	3825883a 	mov	r18,r7
 200fadc:	003f0606 	br	200f6f8 <__subdf3+0x178>
 200fae0:	2023883a 	mov	r17,r4
 200fae4:	003f0906 	br	200f70c <__subdf3+0x18c>
 200fae8:	0101ffc4 	movi	r4,2047
 200faec:	813f3a1e 	bne	r16,r4,200f7d8 <__subdf3+0x258>
 200faf0:	003ec406 	br	200f604 <__subdf3+0x84>
 200faf4:	0005883a 	mov	r2,zero
 200faf8:	003fb106 	br	200f9c0 <__subdf3+0x440>
 200fafc:	0005883a 	mov	r2,zero
 200fb00:	003fbc06 	br	200f9f4 <__subdf3+0x474>
 200fb04:	1c44b03a 	or	r2,r3,r17
 200fb08:	80008e1e 	bne	r16,zero,200fd44 <__subdf3+0x7c4>
 200fb0c:	1000c826 	beq	r2,zero,200fe30 <__subdf3+0x8b0>
 200fb10:	2984b03a 	or	r2,r5,r6
 200fb14:	103ebb26 	beq	r2,zero,200f604 <__subdf3+0x84>
 200fb18:	8989883a 	add	r4,r17,r6
 200fb1c:	1945883a 	add	r2,r3,r5
 200fb20:	2447803a 	cmpltu	r3,r4,r17
 200fb24:	1887883a 	add	r3,r3,r2
 200fb28:	1880202c 	andhi	r2,r3,128
 200fb2c:	2023883a 	mov	r17,r4
 200fb30:	103f1626 	beq	r2,zero,200f78c <__subdf3+0x20c>
 200fb34:	00bfe034 	movhi	r2,65408
 200fb38:	10bfffc4 	addi	r2,r2,-1
 200fb3c:	5021883a 	mov	r16,r10
 200fb40:	1886703a 	and	r3,r3,r2
 200fb44:	003eaf06 	br	200f604 <__subdf3+0x84>
 200fb48:	3825883a 	mov	r18,r7
 200fb4c:	003f0f06 	br	200f78c <__subdf3+0x20c>
 200fb50:	1c44b03a 	or	r2,r3,r17
 200fb54:	8000251e 	bne	r16,zero,200fbec <__subdf3+0x66c>
 200fb58:	1000661e 	bne	r2,zero,200fcf4 <__subdf3+0x774>
 200fb5c:	2990b03a 	or	r8,r5,r6
 200fb60:	40009626 	beq	r8,zero,200fdbc <__subdf3+0x83c>
 200fb64:	2807883a 	mov	r3,r5
 200fb68:	3023883a 	mov	r17,r6
 200fb6c:	3825883a 	mov	r18,r7
 200fb70:	003ea406 	br	200f604 <__subdf3+0x84>
 200fb74:	127ff804 	addi	r9,r2,-32
 200fb78:	01000804 	movi	r4,32
 200fb7c:	2a52d83a 	srl	r9,r5,r9
 200fb80:	11008c26 	beq	r2,r4,200fdb4 <__subdf3+0x834>
 200fb84:	01001004 	movi	r4,64
 200fb88:	2085c83a 	sub	r2,r4,r2
 200fb8c:	2884983a 	sll	r2,r5,r2
 200fb90:	118cb03a 	or	r6,r2,r6
 200fb94:	300cc03a 	cmpne	r6,r6,zero
 200fb98:	4992b03a 	or	r9,r9,r6
 200fb9c:	0005883a 	mov	r2,zero
 200fba0:	003f1206 	br	200f7ec <__subdf3+0x26c>
 200fba4:	0101ffc4 	movi	r4,2047
 200fba8:	493f9c1e 	bne	r9,r4,200fa1c <__subdf3+0x49c>
 200fbac:	2807883a 	mov	r3,r5
 200fbb0:	3023883a 	mov	r17,r6
 200fbb4:	4821883a 	mov	r16,r9
 200fbb8:	3825883a 	mov	r18,r7
 200fbbc:	003e9106 	br	200f604 <__subdf3+0x84>
 200fbc0:	80001f1e 	bne	r16,zero,200fc40 <__subdf3+0x6c0>
 200fbc4:	1c48b03a 	or	r4,r3,r17
 200fbc8:	20005a26 	beq	r4,zero,200fd34 <__subdf3+0x7b4>
 200fbcc:	0084303a 	nor	r2,zero,r2
 200fbd0:	1000561e 	bne	r2,zero,200fd2c <__subdf3+0x7ac>
 200fbd4:	89a3883a 	add	r17,r17,r6
 200fbd8:	1945883a 	add	r2,r3,r5
 200fbdc:	898d803a 	cmpltu	r6,r17,r6
 200fbe0:	3087883a 	add	r3,r6,r2
 200fbe4:	4821883a 	mov	r16,r9
 200fbe8:	003f0506 	br	200f800 <__subdf3+0x280>
 200fbec:	10002b1e 	bne	r2,zero,200fc9c <__subdf3+0x71c>
 200fbf0:	2984b03a 	or	r2,r5,r6
 200fbf4:	10008026 	beq	r2,zero,200fdf8 <__subdf3+0x878>
 200fbf8:	2807883a 	mov	r3,r5
 200fbfc:	3023883a 	mov	r17,r6
 200fc00:	3825883a 	mov	r18,r7
 200fc04:	0401ffc4 	movi	r16,2047
 200fc08:	003e7e06 	br	200f604 <__subdf3+0x84>
 200fc0c:	3809883a 	mov	r4,r7
 200fc10:	0011883a 	mov	r8,zero
 200fc14:	0005883a 	mov	r2,zero
 200fc18:	003ee306 	br	200f7a8 <__subdf3+0x228>
 200fc1c:	1c62b03a 	or	r17,r3,r17
 200fc20:	8822c03a 	cmpne	r17,r17,zero
 200fc24:	0005883a 	mov	r2,zero
 200fc28:	003f8906 	br	200fa50 <__subdf3+0x4d0>
 200fc2c:	3809883a 	mov	r4,r7
 200fc30:	4821883a 	mov	r16,r9
 200fc34:	0011883a 	mov	r8,zero
 200fc38:	0005883a 	mov	r2,zero
 200fc3c:	003eda06 	br	200f7a8 <__subdf3+0x228>
 200fc40:	0101ffc4 	movi	r4,2047
 200fc44:	49003b26 	beq	r9,r4,200fd34 <__subdf3+0x7b4>
 200fc48:	0085c83a 	sub	r2,zero,r2
 200fc4c:	18c02034 	orhi	r3,r3,128
 200fc50:	01000e04 	movi	r4,56
 200fc54:	20806e16 	blt	r4,r2,200fe10 <__subdf3+0x890>
 200fc58:	010007c4 	movi	r4,31
 200fc5c:	20807716 	blt	r4,r2,200fe3c <__subdf3+0x8bc>
 200fc60:	01000804 	movi	r4,32
 200fc64:	2089c83a 	sub	r4,r4,r2
 200fc68:	1914983a 	sll	r10,r3,r4
 200fc6c:	8890d83a 	srl	r8,r17,r2
 200fc70:	8908983a 	sll	r4,r17,r4
 200fc74:	1884d83a 	srl	r2,r3,r2
 200fc78:	5222b03a 	or	r17,r10,r8
 200fc7c:	2006c03a 	cmpne	r3,r4,zero
 200fc80:	88e2b03a 	or	r17,r17,r3
 200fc84:	89a3883a 	add	r17,r17,r6
 200fc88:	1145883a 	add	r2,r2,r5
 200fc8c:	898d803a 	cmpltu	r6,r17,r6
 200fc90:	3087883a 	add	r3,r6,r2
 200fc94:	4821883a 	mov	r16,r9
 200fc98:	003ed906 	br	200f800 <__subdf3+0x280>
 200fc9c:	2984b03a 	or	r2,r5,r6
 200fca0:	10004226 	beq	r2,zero,200fdac <__subdf3+0x82c>
 200fca4:	1808d0fa 	srli	r4,r3,3
 200fca8:	8822d0fa 	srli	r17,r17,3
 200fcac:	1806977a 	slli	r3,r3,29
 200fcb0:	2080022c 	andhi	r2,r4,8
 200fcb4:	1c62b03a 	or	r17,r3,r17
 200fcb8:	10000826 	beq	r2,zero,200fcdc <__subdf3+0x75c>
 200fcbc:	2812d0fa 	srli	r9,r5,3
 200fcc0:	4880022c 	andhi	r2,r9,8
 200fcc4:	1000051e 	bne	r2,zero,200fcdc <__subdf3+0x75c>
 200fcc8:	300cd0fa 	srli	r6,r6,3
 200fccc:	2804977a 	slli	r2,r5,29
 200fcd0:	4809883a 	mov	r4,r9
 200fcd4:	3825883a 	mov	r18,r7
 200fcd8:	11a2b03a 	or	r17,r2,r6
 200fcdc:	8806d77a 	srli	r3,r17,29
 200fce0:	200890fa 	slli	r4,r4,3
 200fce4:	882290fa 	slli	r17,r17,3
 200fce8:	0401ffc4 	movi	r16,2047
 200fcec:	1906b03a 	or	r3,r3,r4
 200fcf0:	003e4406 	br	200f604 <__subdf3+0x84>
 200fcf4:	2984b03a 	or	r2,r5,r6
 200fcf8:	103e4226 	beq	r2,zero,200f604 <__subdf3+0x84>
 200fcfc:	8989c83a 	sub	r4,r17,r6
 200fd00:	8911803a 	cmpltu	r8,r17,r4
 200fd04:	1945c83a 	sub	r2,r3,r5
 200fd08:	1205c83a 	sub	r2,r2,r8
 200fd0c:	1200202c 	andhi	r8,r2,128
 200fd10:	403e9a26 	beq	r8,zero,200f77c <__subdf3+0x1fc>
 200fd14:	3463c83a 	sub	r17,r6,r17
 200fd18:	28c5c83a 	sub	r2,r5,r3
 200fd1c:	344d803a 	cmpltu	r6,r6,r17
 200fd20:	1187c83a 	sub	r3,r2,r6
 200fd24:	3825883a 	mov	r18,r7
 200fd28:	003e3606 	br	200f604 <__subdf3+0x84>
 200fd2c:	0101ffc4 	movi	r4,2047
 200fd30:	493fc71e 	bne	r9,r4,200fc50 <__subdf3+0x6d0>
 200fd34:	2807883a 	mov	r3,r5
 200fd38:	3023883a 	mov	r17,r6
 200fd3c:	4821883a 	mov	r16,r9
 200fd40:	003e3006 	br	200f604 <__subdf3+0x84>
 200fd44:	10003626 	beq	r2,zero,200fe20 <__subdf3+0x8a0>
 200fd48:	2984b03a 	or	r2,r5,r6
 200fd4c:	10001726 	beq	r2,zero,200fdac <__subdf3+0x82c>
 200fd50:	1808d0fa 	srli	r4,r3,3
 200fd54:	8822d0fa 	srli	r17,r17,3
 200fd58:	1806977a 	slli	r3,r3,29
 200fd5c:	2080022c 	andhi	r2,r4,8
 200fd60:	1c62b03a 	or	r17,r3,r17
 200fd64:	10000726 	beq	r2,zero,200fd84 <__subdf3+0x804>
 200fd68:	2812d0fa 	srli	r9,r5,3
 200fd6c:	4880022c 	andhi	r2,r9,8
 200fd70:	1000041e 	bne	r2,zero,200fd84 <__subdf3+0x804>
 200fd74:	300cd0fa 	srli	r6,r6,3
 200fd78:	2804977a 	slli	r2,r5,29
 200fd7c:	4809883a 	mov	r4,r9
 200fd80:	11a2b03a 	or	r17,r2,r6
 200fd84:	8806d77a 	srli	r3,r17,29
 200fd88:	200890fa 	slli	r4,r4,3
 200fd8c:	882290fa 	slli	r17,r17,3
 200fd90:	3825883a 	mov	r18,r7
 200fd94:	1906b03a 	or	r3,r3,r4
 200fd98:	0401ffc4 	movi	r16,2047
 200fd9c:	003e1906 	br	200f604 <__subdf3+0x84>
 200fda0:	000b883a 	mov	r5,zero
 200fda4:	0005883a 	mov	r2,zero
 200fda8:	003e2e06 	br	200f664 <__subdf3+0xe4>
 200fdac:	0401ffc4 	movi	r16,2047
 200fdb0:	003e1406 	br	200f604 <__subdf3+0x84>
 200fdb4:	0005883a 	mov	r2,zero
 200fdb8:	003f7506 	br	200fb90 <__subdf3+0x610>
 200fdbc:	0005883a 	mov	r2,zero
 200fdc0:	0009883a 	mov	r4,zero
 200fdc4:	003e7806 	br	200f7a8 <__subdf3+0x228>
 200fdc8:	123ff804 	addi	r8,r2,-32
 200fdcc:	01000804 	movi	r4,32
 200fdd0:	1a10d83a 	srl	r8,r3,r8
 200fdd4:	11002526 	beq	r2,r4,200fe6c <__subdf3+0x8ec>
 200fdd8:	01001004 	movi	r4,64
 200fddc:	2085c83a 	sub	r2,r4,r2
 200fde0:	1884983a 	sll	r2,r3,r2
 200fde4:	1444b03a 	or	r2,r2,r17
 200fde8:	1004c03a 	cmpne	r2,r2,zero
 200fdec:	40a2b03a 	or	r17,r8,r2
 200fdf0:	0005883a 	mov	r2,zero
 200fdf4:	003f1606 	br	200fa50 <__subdf3+0x4d0>
 200fdf8:	02000434 	movhi	r8,16
 200fdfc:	0009883a 	mov	r4,zero
 200fe00:	423fffc4 	addi	r8,r8,-1
 200fe04:	00bfffc4 	movi	r2,-1
 200fe08:	0401ffc4 	movi	r16,2047
 200fe0c:	003e6606 	br	200f7a8 <__subdf3+0x228>
 200fe10:	1c62b03a 	or	r17,r3,r17
 200fe14:	8822c03a 	cmpne	r17,r17,zero
 200fe18:	0005883a 	mov	r2,zero
 200fe1c:	003f9906 	br	200fc84 <__subdf3+0x704>
 200fe20:	2807883a 	mov	r3,r5
 200fe24:	3023883a 	mov	r17,r6
 200fe28:	0401ffc4 	movi	r16,2047
 200fe2c:	003df506 	br	200f604 <__subdf3+0x84>
 200fe30:	2807883a 	mov	r3,r5
 200fe34:	3023883a 	mov	r17,r6
 200fe38:	003df206 	br	200f604 <__subdf3+0x84>
 200fe3c:	123ff804 	addi	r8,r2,-32
 200fe40:	01000804 	movi	r4,32
 200fe44:	1a10d83a 	srl	r8,r3,r8
 200fe48:	11000a26 	beq	r2,r4,200fe74 <__subdf3+0x8f4>
 200fe4c:	01001004 	movi	r4,64
 200fe50:	2085c83a 	sub	r2,r4,r2
 200fe54:	1884983a 	sll	r2,r3,r2
 200fe58:	1444b03a 	or	r2,r2,r17
 200fe5c:	1004c03a 	cmpne	r2,r2,zero
 200fe60:	40a2b03a 	or	r17,r8,r2
 200fe64:	0005883a 	mov	r2,zero
 200fe68:	003f8606 	br	200fc84 <__subdf3+0x704>
 200fe6c:	0005883a 	mov	r2,zero
 200fe70:	003fdc06 	br	200fde4 <__subdf3+0x864>
 200fe74:	0005883a 	mov	r2,zero
 200fe78:	003ff706 	br	200fe58 <__subdf3+0x8d8>

0200fe7c <__fixdfsi>:
 200fe7c:	280cd53a 	srli	r6,r5,20
 200fe80:	00c00434 	movhi	r3,16
 200fe84:	18ffffc4 	addi	r3,r3,-1
 200fe88:	3181ffcc 	andi	r6,r6,2047
 200fe8c:	01c0ff84 	movi	r7,1022
 200fe90:	28c6703a 	and	r3,r5,r3
 200fe94:	280ad7fa 	srli	r5,r5,31
 200fe98:	3980120e 	bge	r7,r6,200fee4 <__fixdfsi+0x68>
 200fe9c:	00810744 	movi	r2,1053
 200fea0:	11800c16 	blt	r2,r6,200fed4 <__fixdfsi+0x58>
 200fea4:	00810cc4 	movi	r2,1075
 200fea8:	1185c83a 	sub	r2,r2,r6
 200feac:	01c007c4 	movi	r7,31
 200feb0:	18c00434 	orhi	r3,r3,16
 200feb4:	38800d16 	blt	r7,r2,200feec <__fixdfsi+0x70>
 200feb8:	31befb44 	addi	r6,r6,-1043
 200febc:	2084d83a 	srl	r2,r4,r2
 200fec0:	1986983a 	sll	r3,r3,r6
 200fec4:	1884b03a 	or	r2,r3,r2
 200fec8:	28000726 	beq	r5,zero,200fee8 <__fixdfsi+0x6c>
 200fecc:	0085c83a 	sub	r2,zero,r2
 200fed0:	f800283a 	ret
 200fed4:	00a00034 	movhi	r2,32768
 200fed8:	10bfffc4 	addi	r2,r2,-1
 200fedc:	2885883a 	add	r2,r5,r2
 200fee0:	f800283a 	ret
 200fee4:	0005883a 	mov	r2,zero
 200fee8:	f800283a 	ret
 200feec:	008104c4 	movi	r2,1043
 200fef0:	1185c83a 	sub	r2,r2,r6
 200fef4:	1884d83a 	srl	r2,r3,r2
 200fef8:	003ff306 	br	200fec8 <__fixdfsi+0x4c>

0200fefc <__floatsidf>:
 200fefc:	defffd04 	addi	sp,sp,-12
 200ff00:	dfc00215 	stw	ra,8(sp)
 200ff04:	dc400115 	stw	r17,4(sp)
 200ff08:	dc000015 	stw	r16,0(sp)
 200ff0c:	20002b26 	beq	r4,zero,200ffbc <__floatsidf+0xc0>
 200ff10:	2023883a 	mov	r17,r4
 200ff14:	2020d7fa 	srli	r16,r4,31
 200ff18:	20002d16 	blt	r4,zero,200ffd0 <__floatsidf+0xd4>
 200ff1c:	8809883a 	mov	r4,r17
 200ff20:	20044700 	call	2004470 <__clzsi2>
 200ff24:	01410784 	movi	r5,1054
 200ff28:	288bc83a 	sub	r5,r5,r2
 200ff2c:	01010cc4 	movi	r4,1075
 200ff30:	2149c83a 	sub	r4,r4,r5
 200ff34:	00c007c4 	movi	r3,31
 200ff38:	1900160e 	bge	r3,r4,200ff94 <__floatsidf+0x98>
 200ff3c:	00c104c4 	movi	r3,1043
 200ff40:	1947c83a 	sub	r3,r3,r5
 200ff44:	88c6983a 	sll	r3,r17,r3
 200ff48:	00800434 	movhi	r2,16
 200ff4c:	10bfffc4 	addi	r2,r2,-1
 200ff50:	1886703a 	and	r3,r3,r2
 200ff54:	2941ffcc 	andi	r5,r5,2047
 200ff58:	800d883a 	mov	r6,r16
 200ff5c:	0005883a 	mov	r2,zero
 200ff60:	280a953a 	slli	r5,r5,20
 200ff64:	31803fcc 	andi	r6,r6,255
 200ff68:	01000434 	movhi	r4,16
 200ff6c:	300c97fa 	slli	r6,r6,31
 200ff70:	213fffc4 	addi	r4,r4,-1
 200ff74:	1906703a 	and	r3,r3,r4
 200ff78:	1946b03a 	or	r3,r3,r5
 200ff7c:	1986b03a 	or	r3,r3,r6
 200ff80:	dfc00217 	ldw	ra,8(sp)
 200ff84:	dc400117 	ldw	r17,4(sp)
 200ff88:	dc000017 	ldw	r16,0(sp)
 200ff8c:	dec00304 	addi	sp,sp,12
 200ff90:	f800283a 	ret
 200ff94:	00c002c4 	movi	r3,11
 200ff98:	1887c83a 	sub	r3,r3,r2
 200ff9c:	88c6d83a 	srl	r3,r17,r3
 200ffa0:	8904983a 	sll	r2,r17,r4
 200ffa4:	01000434 	movhi	r4,16
 200ffa8:	213fffc4 	addi	r4,r4,-1
 200ffac:	2941ffcc 	andi	r5,r5,2047
 200ffb0:	1906703a 	and	r3,r3,r4
 200ffb4:	800d883a 	mov	r6,r16
 200ffb8:	003fe906 	br	200ff60 <__floatsidf+0x64>
 200ffbc:	000d883a 	mov	r6,zero
 200ffc0:	000b883a 	mov	r5,zero
 200ffc4:	0007883a 	mov	r3,zero
 200ffc8:	0005883a 	mov	r2,zero
 200ffcc:	003fe406 	br	200ff60 <__floatsidf+0x64>
 200ffd0:	0123c83a 	sub	r17,zero,r4
 200ffd4:	003fd106 	br	200ff1c <__floatsidf+0x20>

0200ffd8 <__floatunsidf>:
 200ffd8:	defffe04 	addi	sp,sp,-8
 200ffdc:	dc000015 	stw	r16,0(sp)
 200ffe0:	dfc00115 	stw	ra,4(sp)
 200ffe4:	2021883a 	mov	r16,r4
 200ffe8:	20002226 	beq	r4,zero,2010074 <__floatunsidf+0x9c>
 200ffec:	20044700 	call	2004470 <__clzsi2>
 200fff0:	01010784 	movi	r4,1054
 200fff4:	2089c83a 	sub	r4,r4,r2
 200fff8:	01810cc4 	movi	r6,1075
 200fffc:	310dc83a 	sub	r6,r6,r4
 2010000:	00c007c4 	movi	r3,31
 2010004:	1980120e 	bge	r3,r6,2010050 <__floatunsidf+0x78>
 2010008:	00c104c4 	movi	r3,1043
 201000c:	1907c83a 	sub	r3,r3,r4
 2010010:	80ca983a 	sll	r5,r16,r3
 2010014:	00800434 	movhi	r2,16
 2010018:	10bfffc4 	addi	r2,r2,-1
 201001c:	2101ffcc 	andi	r4,r4,2047
 2010020:	0021883a 	mov	r16,zero
 2010024:	288a703a 	and	r5,r5,r2
 2010028:	2008953a 	slli	r4,r4,20
 201002c:	00c00434 	movhi	r3,16
 2010030:	18ffffc4 	addi	r3,r3,-1
 2010034:	28c6703a 	and	r3,r5,r3
 2010038:	8005883a 	mov	r2,r16
 201003c:	1906b03a 	or	r3,r3,r4
 2010040:	dfc00117 	ldw	ra,4(sp)
 2010044:	dc000017 	ldw	r16,0(sp)
 2010048:	dec00204 	addi	sp,sp,8
 201004c:	f800283a 	ret
 2010050:	00c002c4 	movi	r3,11
 2010054:	188bc83a 	sub	r5,r3,r2
 2010058:	814ad83a 	srl	r5,r16,r5
 201005c:	00c00434 	movhi	r3,16
 2010060:	18ffffc4 	addi	r3,r3,-1
 2010064:	81a0983a 	sll	r16,r16,r6
 2010068:	2101ffcc 	andi	r4,r4,2047
 201006c:	28ca703a 	and	r5,r5,r3
 2010070:	003fed06 	br	2010028 <__floatunsidf+0x50>
 2010074:	0009883a 	mov	r4,zero
 2010078:	000b883a 	mov	r5,zero
 201007c:	003fea06 	br	2010028 <__floatunsidf+0x50>

02010080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010080:	defffe04 	addi	sp,sp,-8
 2010084:	dfc00115 	stw	ra,4(sp)
 2010088:	df000015 	stw	fp,0(sp)
 201008c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010090:	d0a00c17 	ldw	r2,-32720(gp)
 2010094:	10000326 	beq	r2,zero,20100a4 <alt_get_errno+0x24>
 2010098:	d0a00c17 	ldw	r2,-32720(gp)
 201009c:	103ee83a 	callr	r2
 20100a0:	00000106 	br	20100a8 <alt_get_errno+0x28>
 20100a4:	d0a71c04 	addi	r2,gp,-25488
}
 20100a8:	e037883a 	mov	sp,fp
 20100ac:	dfc00117 	ldw	ra,4(sp)
 20100b0:	df000017 	ldw	fp,0(sp)
 20100b4:	dec00204 	addi	sp,sp,8
 20100b8:	f800283a 	ret

020100bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20100bc:	defffb04 	addi	sp,sp,-20
 20100c0:	dfc00415 	stw	ra,16(sp)
 20100c4:	df000315 	stw	fp,12(sp)
 20100c8:	df000304 	addi	fp,sp,12
 20100cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20100d0:	e0bfff17 	ldw	r2,-4(fp)
 20100d4:	10000816 	blt	r2,zero,20100f8 <close+0x3c>
 20100d8:	01400304 	movi	r5,12
 20100dc:	e13fff17 	ldw	r4,-4(fp)
 20100e0:	20019440 	call	2001944 <__mulsi3>
 20100e4:	1007883a 	mov	r3,r2
 20100e8:	008080b4 	movhi	r2,514
 20100ec:	10b08b04 	addi	r2,r2,-15828
 20100f0:	1885883a 	add	r2,r3,r2
 20100f4:	00000106 	br	20100fc <close+0x40>
 20100f8:	0005883a 	mov	r2,zero
 20100fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2010100:	e0bffd17 	ldw	r2,-12(fp)
 2010104:	10001926 	beq	r2,zero,201016c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2010108:	e0bffd17 	ldw	r2,-12(fp)
 201010c:	10800017 	ldw	r2,0(r2)
 2010110:	10800417 	ldw	r2,16(r2)
 2010114:	10000626 	beq	r2,zero,2010130 <close+0x74>
 2010118:	e0bffd17 	ldw	r2,-12(fp)
 201011c:	10800017 	ldw	r2,0(r2)
 2010120:	10800417 	ldw	r2,16(r2)
 2010124:	e13ffd17 	ldw	r4,-12(fp)
 2010128:	103ee83a 	callr	r2
 201012c:	00000106 	br	2010134 <close+0x78>
 2010130:	0005883a 	mov	r2,zero
 2010134:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2010138:	e13fff17 	ldw	r4,-4(fp)
 201013c:	201079c0 	call	201079c <alt_release_fd>
    if (rval < 0)
 2010140:	e0bffe17 	ldw	r2,-8(fp)
 2010144:	1000070e 	bge	r2,zero,2010164 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2010148:	20100800 	call	2010080 <alt_get_errno>
 201014c:	1007883a 	mov	r3,r2
 2010150:	e0bffe17 	ldw	r2,-8(fp)
 2010154:	0085c83a 	sub	r2,zero,r2
 2010158:	18800015 	stw	r2,0(r3)
      return -1;
 201015c:	00bfffc4 	movi	r2,-1
 2010160:	00000706 	br	2010180 <close+0xc4>
    }
    return 0;
 2010164:	0005883a 	mov	r2,zero
 2010168:	00000506 	br	2010180 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201016c:	20100800 	call	2010080 <alt_get_errno>
 2010170:	1007883a 	mov	r3,r2
 2010174:	00801444 	movi	r2,81
 2010178:	18800015 	stw	r2,0(r3)
    return -1;
 201017c:	00bfffc4 	movi	r2,-1
  }
}
 2010180:	e037883a 	mov	sp,fp
 2010184:	dfc00117 	ldw	ra,4(sp)
 2010188:	df000017 	ldw	fp,0(sp)
 201018c:	dec00204 	addi	sp,sp,8
 2010190:	f800283a 	ret

02010194 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2010194:	defffc04 	addi	sp,sp,-16
 2010198:	df000315 	stw	fp,12(sp)
 201019c:	df000304 	addi	fp,sp,12
 20101a0:	e13ffd15 	stw	r4,-12(fp)
 20101a4:	e17ffe15 	stw	r5,-8(fp)
 20101a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 20101ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20101b0:	e037883a 	mov	sp,fp
 20101b4:	df000017 	ldw	fp,0(sp)
 20101b8:	dec00104 	addi	sp,sp,4
 20101bc:	f800283a 	ret

020101c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20101c0:	defffe04 	addi	sp,sp,-8
 20101c4:	dfc00115 	stw	ra,4(sp)
 20101c8:	df000015 	stw	fp,0(sp)
 20101cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20101d0:	d0a00c17 	ldw	r2,-32720(gp)
 20101d4:	10000326 	beq	r2,zero,20101e4 <alt_get_errno+0x24>
 20101d8:	d0a00c17 	ldw	r2,-32720(gp)
 20101dc:	103ee83a 	callr	r2
 20101e0:	00000106 	br	20101e8 <alt_get_errno+0x28>
 20101e4:	d0a71c04 	addi	r2,gp,-25488
}
 20101e8:	e037883a 	mov	sp,fp
 20101ec:	dfc00117 	ldw	ra,4(sp)
 20101f0:	df000017 	ldw	fp,0(sp)
 20101f4:	dec00204 	addi	sp,sp,8
 20101f8:	f800283a 	ret

020101fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20101fc:	defffb04 	addi	sp,sp,-20
 2010200:	dfc00415 	stw	ra,16(sp)
 2010204:	df000315 	stw	fp,12(sp)
 2010208:	df000304 	addi	fp,sp,12
 201020c:	e13ffe15 	stw	r4,-8(fp)
 2010210:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010214:	e0bffe17 	ldw	r2,-8(fp)
 2010218:	10000816 	blt	r2,zero,201023c <fstat+0x40>
 201021c:	01400304 	movi	r5,12
 2010220:	e13ffe17 	ldw	r4,-8(fp)
 2010224:	20019440 	call	2001944 <__mulsi3>
 2010228:	1007883a 	mov	r3,r2
 201022c:	008080b4 	movhi	r2,514
 2010230:	10b08b04 	addi	r2,r2,-15828
 2010234:	1885883a 	add	r2,r3,r2
 2010238:	00000106 	br	2010240 <fstat+0x44>
 201023c:	0005883a 	mov	r2,zero
 2010240:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2010244:	e0bffd17 	ldw	r2,-12(fp)
 2010248:	10001026 	beq	r2,zero,201028c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 201024c:	e0bffd17 	ldw	r2,-12(fp)
 2010250:	10800017 	ldw	r2,0(r2)
 2010254:	10800817 	ldw	r2,32(r2)
 2010258:	10000726 	beq	r2,zero,2010278 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 201025c:	e0bffd17 	ldw	r2,-12(fp)
 2010260:	10800017 	ldw	r2,0(r2)
 2010264:	10800817 	ldw	r2,32(r2)
 2010268:	e17fff17 	ldw	r5,-4(fp)
 201026c:	e13ffd17 	ldw	r4,-12(fp)
 2010270:	103ee83a 	callr	r2
 2010274:	00000a06 	br	20102a0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2010278:	e0bfff17 	ldw	r2,-4(fp)
 201027c:	00c80004 	movi	r3,8192
 2010280:	10c00115 	stw	r3,4(r2)
      return 0;
 2010284:	0005883a 	mov	r2,zero
 2010288:	00000506 	br	20102a0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201028c:	20101c00 	call	20101c0 <alt_get_errno>
 2010290:	1007883a 	mov	r3,r2
 2010294:	00801444 	movi	r2,81
 2010298:	18800015 	stw	r2,0(r3)
    return -1;
 201029c:	00bfffc4 	movi	r2,-1
  }
}
 20102a0:	e037883a 	mov	sp,fp
 20102a4:	dfc00117 	ldw	ra,4(sp)
 20102a8:	df000017 	ldw	fp,0(sp)
 20102ac:	dec00204 	addi	sp,sp,8
 20102b0:	f800283a 	ret

020102b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20102b4:	defffe04 	addi	sp,sp,-8
 20102b8:	dfc00115 	stw	ra,4(sp)
 20102bc:	df000015 	stw	fp,0(sp)
 20102c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20102c4:	d0a00c17 	ldw	r2,-32720(gp)
 20102c8:	10000326 	beq	r2,zero,20102d8 <alt_get_errno+0x24>
 20102cc:	d0a00c17 	ldw	r2,-32720(gp)
 20102d0:	103ee83a 	callr	r2
 20102d4:	00000106 	br	20102dc <alt_get_errno+0x28>
 20102d8:	d0a71c04 	addi	r2,gp,-25488
}
 20102dc:	e037883a 	mov	sp,fp
 20102e0:	dfc00117 	ldw	ra,4(sp)
 20102e4:	df000017 	ldw	fp,0(sp)
 20102e8:	dec00204 	addi	sp,sp,8
 20102ec:	f800283a 	ret

020102f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20102f0:	deffed04 	addi	sp,sp,-76
 20102f4:	dfc01215 	stw	ra,72(sp)
 20102f8:	df001115 	stw	fp,68(sp)
 20102fc:	df001104 	addi	fp,sp,68
 2010300:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010304:	e0bfff17 	ldw	r2,-4(fp)
 2010308:	10000816 	blt	r2,zero,201032c <isatty+0x3c>
 201030c:	01400304 	movi	r5,12
 2010310:	e13fff17 	ldw	r4,-4(fp)
 2010314:	20019440 	call	2001944 <__mulsi3>
 2010318:	1007883a 	mov	r3,r2
 201031c:	008080b4 	movhi	r2,514
 2010320:	10b08b04 	addi	r2,r2,-15828
 2010324:	1885883a 	add	r2,r3,r2
 2010328:	00000106 	br	2010330 <isatty+0x40>
 201032c:	0005883a 	mov	r2,zero
 2010330:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2010334:	e0bfef17 	ldw	r2,-68(fp)
 2010338:	10000e26 	beq	r2,zero,2010374 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 201033c:	e0bfef17 	ldw	r2,-68(fp)
 2010340:	10800017 	ldw	r2,0(r2)
 2010344:	10800817 	ldw	r2,32(r2)
 2010348:	1000021e 	bne	r2,zero,2010354 <isatty+0x64>
    {
      return 1;
 201034c:	00800044 	movi	r2,1
 2010350:	00000d06 	br	2010388 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2010354:	e0bff004 	addi	r2,fp,-64
 2010358:	100b883a 	mov	r5,r2
 201035c:	e13fff17 	ldw	r4,-4(fp)
 2010360:	20101fc0 	call	20101fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2010364:	e0bff117 	ldw	r2,-60(fp)
 2010368:	10880020 	cmpeqi	r2,r2,8192
 201036c:	10803fcc 	andi	r2,r2,255
 2010370:	00000506 	br	2010388 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010374:	20102b40 	call	20102b4 <alt_get_errno>
 2010378:	1007883a 	mov	r3,r2
 201037c:	00801444 	movi	r2,81
 2010380:	18800015 	stw	r2,0(r3)
    return 0;
 2010384:	0005883a 	mov	r2,zero
  }
}
 2010388:	e037883a 	mov	sp,fp
 201038c:	dfc00117 	ldw	ra,4(sp)
 2010390:	df000017 	ldw	fp,0(sp)
 2010394:	dec00204 	addi	sp,sp,8
 2010398:	f800283a 	ret

0201039c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 201039c:	defffc04 	addi	sp,sp,-16
 20103a0:	df000315 	stw	fp,12(sp)
 20103a4:	df000304 	addi	fp,sp,12
 20103a8:	e13ffd15 	stw	r4,-12(fp)
 20103ac:	e17ffe15 	stw	r5,-8(fp)
 20103b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20103b4:	e0fffe17 	ldw	r3,-8(fp)
 20103b8:	e0bffd17 	ldw	r2,-12(fp)
 20103bc:	18800c26 	beq	r3,r2,20103f0 <alt_load_section+0x54>
  {
    while( to != end )
 20103c0:	00000806 	br	20103e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 20103c4:	e0bffe17 	ldw	r2,-8(fp)
 20103c8:	10c00104 	addi	r3,r2,4
 20103cc:	e0fffe15 	stw	r3,-8(fp)
 20103d0:	e0fffd17 	ldw	r3,-12(fp)
 20103d4:	19000104 	addi	r4,r3,4
 20103d8:	e13ffd15 	stw	r4,-12(fp)
 20103dc:	18c00017 	ldw	r3,0(r3)
 20103e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20103e4:	e0fffe17 	ldw	r3,-8(fp)
 20103e8:	e0bfff17 	ldw	r2,-4(fp)
 20103ec:	18bff51e 	bne	r3,r2,20103c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20103f0:	0001883a 	nop
 20103f4:	e037883a 	mov	sp,fp
 20103f8:	df000017 	ldw	fp,0(sp)
 20103fc:	dec00104 	addi	sp,sp,4
 2010400:	f800283a 	ret

02010404 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2010404:	defffe04 	addi	sp,sp,-8
 2010408:	dfc00115 	stw	ra,4(sp)
 201040c:	df000015 	stw	fp,0(sp)
 2010410:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2010414:	018080b4 	movhi	r6,514
 2010418:	31b53604 	addi	r6,r6,-11048
 201041c:	014080b4 	movhi	r5,514
 2010420:	296e5804 	addi	r5,r5,-18080
 2010424:	010080b4 	movhi	r4,514
 2010428:	21353604 	addi	r4,r4,-11048
 201042c:	201039c0 	call	201039c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2010430:	01808034 	movhi	r6,512
 2010434:	31808c04 	addi	r6,r6,560
 2010438:	01408034 	movhi	r5,512
 201043c:	29400804 	addi	r5,r5,32
 2010440:	01008034 	movhi	r4,512
 2010444:	21000804 	addi	r4,r4,32
 2010448:	201039c0 	call	201039c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 201044c:	018080b4 	movhi	r6,514
 2010450:	31ae5804 	addi	r6,r6,-18080
 2010454:	014080b4 	movhi	r5,514
 2010458:	296d0d04 	addi	r5,r5,-19404
 201045c:	010080b4 	movhi	r4,514
 2010460:	212d0d04 	addi	r4,r4,-19404
 2010464:	201039c0 	call	201039c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2010468:	2019ff40 	call	2019ff4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 201046c:	201a1b40 	call	201a1b4 <alt_icache_flush_all>
}
 2010470:	0001883a 	nop
 2010474:	e037883a 	mov	sp,fp
 2010478:	dfc00117 	ldw	ra,4(sp)
 201047c:	df000017 	ldw	fp,0(sp)
 2010480:	dec00204 	addi	sp,sp,8
 2010484:	f800283a 	ret

02010488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010488:	defffe04 	addi	sp,sp,-8
 201048c:	dfc00115 	stw	ra,4(sp)
 2010490:	df000015 	stw	fp,0(sp)
 2010494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010498:	d0a00c17 	ldw	r2,-32720(gp)
 201049c:	10000326 	beq	r2,zero,20104ac <alt_get_errno+0x24>
 20104a0:	d0a00c17 	ldw	r2,-32720(gp)
 20104a4:	103ee83a 	callr	r2
 20104a8:	00000106 	br	20104b0 <alt_get_errno+0x28>
 20104ac:	d0a71c04 	addi	r2,gp,-25488
}
 20104b0:	e037883a 	mov	sp,fp
 20104b4:	dfc00117 	ldw	ra,4(sp)
 20104b8:	df000017 	ldw	fp,0(sp)
 20104bc:	dec00204 	addi	sp,sp,8
 20104c0:	f800283a 	ret

020104c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 20104c4:	defff904 	addi	sp,sp,-28
 20104c8:	dfc00615 	stw	ra,24(sp)
 20104cc:	df000515 	stw	fp,20(sp)
 20104d0:	df000504 	addi	fp,sp,20
 20104d4:	e13ffd15 	stw	r4,-12(fp)
 20104d8:	e17ffe15 	stw	r5,-8(fp)
 20104dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20104e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20104e4:	e0bffd17 	ldw	r2,-12(fp)
 20104e8:	10000816 	blt	r2,zero,201050c <lseek+0x48>
 20104ec:	01400304 	movi	r5,12
 20104f0:	e13ffd17 	ldw	r4,-12(fp)
 20104f4:	20019440 	call	2001944 <__mulsi3>
 20104f8:	1007883a 	mov	r3,r2
 20104fc:	008080b4 	movhi	r2,514
 2010500:	10b08b04 	addi	r2,r2,-15828
 2010504:	1885883a 	add	r2,r3,r2
 2010508:	00000106 	br	2010510 <lseek+0x4c>
 201050c:	0005883a 	mov	r2,zero
 2010510:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2010514:	e0bffc17 	ldw	r2,-16(fp)
 2010518:	10001026 	beq	r2,zero,201055c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 201051c:	e0bffc17 	ldw	r2,-16(fp)
 2010520:	10800017 	ldw	r2,0(r2)
 2010524:	10800717 	ldw	r2,28(r2)
 2010528:	10000926 	beq	r2,zero,2010550 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 201052c:	e0bffc17 	ldw	r2,-16(fp)
 2010530:	10800017 	ldw	r2,0(r2)
 2010534:	10800717 	ldw	r2,28(r2)
 2010538:	e1bfff17 	ldw	r6,-4(fp)
 201053c:	e17ffe17 	ldw	r5,-8(fp)
 2010540:	e13ffc17 	ldw	r4,-16(fp)
 2010544:	103ee83a 	callr	r2
 2010548:	e0bffb15 	stw	r2,-20(fp)
 201054c:	00000506 	br	2010564 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2010550:	00bfde84 	movi	r2,-134
 2010554:	e0bffb15 	stw	r2,-20(fp)
 2010558:	00000206 	br	2010564 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 201055c:	00bfebc4 	movi	r2,-81
 2010560:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2010564:	e0bffb17 	ldw	r2,-20(fp)
 2010568:	1000070e 	bge	r2,zero,2010588 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 201056c:	20104880 	call	2010488 <alt_get_errno>
 2010570:	1007883a 	mov	r3,r2
 2010574:	e0bffb17 	ldw	r2,-20(fp)
 2010578:	0085c83a 	sub	r2,zero,r2
 201057c:	18800015 	stw	r2,0(r3)
    rc = -1;
 2010580:	00bfffc4 	movi	r2,-1
 2010584:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2010588:	e0bffb17 	ldw	r2,-20(fp)
}
 201058c:	e037883a 	mov	sp,fp
 2010590:	dfc00117 	ldw	ra,4(sp)
 2010594:	df000017 	ldw	fp,0(sp)
 2010598:	dec00204 	addi	sp,sp,8
 201059c:	f800283a 	ret

020105a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20105a0:	defff904 	addi	sp,sp,-28
 20105a4:	dfc00615 	stw	ra,24(sp)
 20105a8:	df000515 	stw	fp,20(sp)
 20105ac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20105b0:	0009883a 	mov	r4,zero
 20105b4:	20190100 	call	2019010 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20105b8:	201158c0 	call	201158c <OSInit>
 20105bc:	01000044 	movi	r4,1
 20105c0:	20169b00 	call	20169b0 <OSSemCreate>
 20105c4:	d0a72215 	stw	r2,-25464(gp)
 20105c8:	01000044 	movi	r4,1
 20105cc:	20169b00 	call	20169b0 <OSSemCreate>
 20105d0:	d0a72415 	stw	r2,-25456(gp)
 20105d4:	d0a71d04 	addi	r2,gp,-25484
 20105d8:	e0bffc15 	stw	r2,-16(fp)
 20105dc:	00800044 	movi	r2,1
 20105e0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 20105e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20105e8:	1009883a 	mov	r4,r2
 20105ec:	20169b00 	call	20169b0 <OSSemCreate>
 20105f0:	1007883a 	mov	r3,r2
 20105f4:	e0bffc17 	ldw	r2,-16(fp)
 20105f8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20105fc:	20190480 	call	2019048 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2010600:	018080b4 	movhi	r6,514
 2010604:	31ae0704 	addi	r6,r6,-18404
 2010608:	014080b4 	movhi	r5,514
 201060c:	296e0704 	addi	r5,r5,-18404
 2010610:	010080b4 	movhi	r4,514
 2010614:	212e0704 	addi	r4,r4,-18404
 2010618:	201a5580 	call	201a558 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 201061c:	201a0f40 	call	201a0f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2010620:	010080b4 	movhi	r4,514
 2010624:	21285504 	addi	r4,r4,-24236
 2010628:	201b0a00 	call	201b0a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 201062c:	d0a71e17 	ldw	r2,-25480(gp)
 2010630:	d0e71f17 	ldw	r3,-25476(gp)
 2010634:	d1272017 	ldw	r4,-25472(gp)
 2010638:	200d883a 	mov	r6,r4
 201063c:	180b883a 	mov	r5,r3
 2010640:	1009883a 	mov	r4,r2
 2010644:	20013d00 	call	20013d0 <main>
 2010648:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 201064c:	01000044 	movi	r4,1
 2010650:	20100bc0 	call	20100bc <close>
  exit (result);
 2010654:	e13ffb17 	ldw	r4,-20(fp)
 2010658:	201b0b40 	call	201b0b4 <exit>

0201065c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201065c:	defffe04 	addi	sp,sp,-8
 2010660:	dfc00115 	stw	ra,4(sp)
 2010664:	df000015 	stw	fp,0(sp)
 2010668:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201066c:	d0a00c17 	ldw	r2,-32720(gp)
 2010670:	10000326 	beq	r2,zero,2010680 <alt_get_errno+0x24>
 2010674:	d0a00c17 	ldw	r2,-32720(gp)
 2010678:	103ee83a 	callr	r2
 201067c:	00000106 	br	2010684 <alt_get_errno+0x28>
 2010680:	d0a71c04 	addi	r2,gp,-25488
}
 2010684:	e037883a 	mov	sp,fp
 2010688:	dfc00117 	ldw	ra,4(sp)
 201068c:	df000017 	ldw	fp,0(sp)
 2010690:	dec00204 	addi	sp,sp,8
 2010694:	f800283a 	ret

02010698 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2010698:	defff904 	addi	sp,sp,-28
 201069c:	dfc00615 	stw	ra,24(sp)
 20106a0:	df000515 	stw	fp,20(sp)
 20106a4:	df000504 	addi	fp,sp,20
 20106a8:	e13ffd15 	stw	r4,-12(fp)
 20106ac:	e17ffe15 	stw	r5,-8(fp)
 20106b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20106b4:	e0bffd17 	ldw	r2,-12(fp)
 20106b8:	10000816 	blt	r2,zero,20106dc <read+0x44>
 20106bc:	01400304 	movi	r5,12
 20106c0:	e13ffd17 	ldw	r4,-12(fp)
 20106c4:	20019440 	call	2001944 <__mulsi3>
 20106c8:	1007883a 	mov	r3,r2
 20106cc:	008080b4 	movhi	r2,514
 20106d0:	10b08b04 	addi	r2,r2,-15828
 20106d4:	1885883a 	add	r2,r3,r2
 20106d8:	00000106 	br	20106e0 <read+0x48>
 20106dc:	0005883a 	mov	r2,zero
 20106e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20106e4:	e0bffb17 	ldw	r2,-20(fp)
 20106e8:	10002226 	beq	r2,zero,2010774 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20106ec:	e0bffb17 	ldw	r2,-20(fp)
 20106f0:	10800217 	ldw	r2,8(r2)
 20106f4:	108000cc 	andi	r2,r2,3
 20106f8:	10800060 	cmpeqi	r2,r2,1
 20106fc:	1000181e 	bne	r2,zero,2010760 <read+0xc8>
        (fd->dev->read))
 2010700:	e0bffb17 	ldw	r2,-20(fp)
 2010704:	10800017 	ldw	r2,0(r2)
 2010708:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201070c:	10001426 	beq	r2,zero,2010760 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2010710:	e0bffb17 	ldw	r2,-20(fp)
 2010714:	10800017 	ldw	r2,0(r2)
 2010718:	10800517 	ldw	r2,20(r2)
 201071c:	e0ffff17 	ldw	r3,-4(fp)
 2010720:	180d883a 	mov	r6,r3
 2010724:	e17ffe17 	ldw	r5,-8(fp)
 2010728:	e13ffb17 	ldw	r4,-20(fp)
 201072c:	103ee83a 	callr	r2
 2010730:	e0bffc15 	stw	r2,-16(fp)
 2010734:	e0bffc17 	ldw	r2,-16(fp)
 2010738:	1000070e 	bge	r2,zero,2010758 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 201073c:	201065c0 	call	201065c <alt_get_errno>
 2010740:	1007883a 	mov	r3,r2
 2010744:	e0bffc17 	ldw	r2,-16(fp)
 2010748:	0085c83a 	sub	r2,zero,r2
 201074c:	18800015 	stw	r2,0(r3)
          return -1;
 2010750:	00bfffc4 	movi	r2,-1
 2010754:	00000c06 	br	2010788 <read+0xf0>
        }
        return rval;
 2010758:	e0bffc17 	ldw	r2,-16(fp)
 201075c:	00000a06 	br	2010788 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2010760:	201065c0 	call	201065c <alt_get_errno>
 2010764:	1007883a 	mov	r3,r2
 2010768:	00800344 	movi	r2,13
 201076c:	18800015 	stw	r2,0(r3)
 2010770:	00000406 	br	2010784 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2010774:	201065c0 	call	201065c <alt_get_errno>
 2010778:	1007883a 	mov	r3,r2
 201077c:	00801444 	movi	r2,81
 2010780:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2010784:	00bfffc4 	movi	r2,-1
}
 2010788:	e037883a 	mov	sp,fp
 201078c:	dfc00117 	ldw	ra,4(sp)
 2010790:	df000017 	ldw	fp,0(sp)
 2010794:	dec00204 	addi	sp,sp,8
 2010798:	f800283a 	ret

0201079c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 201079c:	defffc04 	addi	sp,sp,-16
 20107a0:	dfc00315 	stw	ra,12(sp)
 20107a4:	df000215 	stw	fp,8(sp)
 20107a8:	dc000115 	stw	r16,4(sp)
 20107ac:	df000204 	addi	fp,sp,8
 20107b0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 20107b4:	e0bffe17 	ldw	r2,-8(fp)
 20107b8:	108000d0 	cmplti	r2,r2,3
 20107bc:	1000111e 	bne	r2,zero,2010804 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 20107c0:	040080b4 	movhi	r16,514
 20107c4:	84308b04 	addi	r16,r16,-15828
 20107c8:	e0bffe17 	ldw	r2,-8(fp)
 20107cc:	01400304 	movi	r5,12
 20107d0:	1009883a 	mov	r4,r2
 20107d4:	20019440 	call	2001944 <__mulsi3>
 20107d8:	8085883a 	add	r2,r16,r2
 20107dc:	10800204 	addi	r2,r2,8
 20107e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20107e4:	040080b4 	movhi	r16,514
 20107e8:	84308b04 	addi	r16,r16,-15828
 20107ec:	e0bffe17 	ldw	r2,-8(fp)
 20107f0:	01400304 	movi	r5,12
 20107f4:	1009883a 	mov	r4,r2
 20107f8:	20019440 	call	2001944 <__mulsi3>
 20107fc:	8085883a 	add	r2,r16,r2
 2010800:	10000015 	stw	zero,0(r2)
  }
}
 2010804:	0001883a 	nop
 2010808:	e6ffff04 	addi	sp,fp,-4
 201080c:	dfc00217 	ldw	ra,8(sp)
 2010810:	df000117 	ldw	fp,4(sp)
 2010814:	dc000017 	ldw	r16,0(sp)
 2010818:	dec00304 	addi	sp,sp,12
 201081c:	f800283a 	ret

02010820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2010820:	defff904 	addi	sp,sp,-28
 2010824:	df000615 	stw	fp,24(sp)
 2010828:	df000604 	addi	fp,sp,24
 201082c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010830:	0005303a 	rdctl	r2,status
 2010834:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010838:	e0fffe17 	ldw	r3,-8(fp)
 201083c:	00bfff84 	movi	r2,-2
 2010840:	1884703a 	and	r2,r3,r2
 2010844:	1001703a 	wrctl	status,r2
  
  return context;
 2010848:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 201084c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2010850:	d0a00d17 	ldw	r2,-32716(gp)
 2010854:	10c000c4 	addi	r3,r2,3
 2010858:	00bfff04 	movi	r2,-4
 201085c:	1884703a 	and	r2,r3,r2
 2010860:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2010864:	d0e00d17 	ldw	r3,-32716(gp)
 2010868:	e0bfff17 	ldw	r2,-4(fp)
 201086c:	1887883a 	add	r3,r3,r2
 2010870:	00810034 	movhi	r2,1024
 2010874:	10800004 	addi	r2,r2,0
 2010878:	10c0062e 	bgeu	r2,r3,2010894 <sbrk+0x74>
 201087c:	e0bffb17 	ldw	r2,-20(fp)
 2010880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010884:	e0bffa17 	ldw	r2,-24(fp)
 2010888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 201088c:	00bfffc4 	movi	r2,-1
 2010890:	00000b06 	br	20108c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2010894:	d0a00d17 	ldw	r2,-32716(gp)
 2010898:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 201089c:	d0e00d17 	ldw	r3,-32716(gp)
 20108a0:	e0bfff17 	ldw	r2,-4(fp)
 20108a4:	1885883a 	add	r2,r3,r2
 20108a8:	d0a00d15 	stw	r2,-32716(gp)
 20108ac:	e0bffb17 	ldw	r2,-20(fp)
 20108b0:	e0bffc15 	stw	r2,-16(fp)
 20108b4:	e0bffc17 	ldw	r2,-16(fp)
 20108b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20108bc:	e0bffd17 	ldw	r2,-12(fp)
} 
 20108c0:	e037883a 	mov	sp,fp
 20108c4:	df000017 	ldw	fp,0(sp)
 20108c8:	dec00104 	addi	sp,sp,4
 20108cc:	f800283a 	ret

020108d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20108d0:	defffe04 	addi	sp,sp,-8
 20108d4:	dfc00115 	stw	ra,4(sp)
 20108d8:	df000015 	stw	fp,0(sp)
 20108dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20108e0:	d0a00c17 	ldw	r2,-32720(gp)
 20108e4:	10000326 	beq	r2,zero,20108f4 <alt_get_errno+0x24>
 20108e8:	d0a00c17 	ldw	r2,-32720(gp)
 20108ec:	103ee83a 	callr	r2
 20108f0:	00000106 	br	20108f8 <alt_get_errno+0x28>
 20108f4:	d0a71c04 	addi	r2,gp,-25488
}
 20108f8:	e037883a 	mov	sp,fp
 20108fc:	dfc00117 	ldw	ra,4(sp)
 2010900:	df000017 	ldw	fp,0(sp)
 2010904:	dec00204 	addi	sp,sp,8
 2010908:	f800283a 	ret

0201090c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 201090c:	defff904 	addi	sp,sp,-28
 2010910:	dfc00615 	stw	ra,24(sp)
 2010914:	df000515 	stw	fp,20(sp)
 2010918:	df000504 	addi	fp,sp,20
 201091c:	e13ffd15 	stw	r4,-12(fp)
 2010920:	e17ffe15 	stw	r5,-8(fp)
 2010924:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010928:	e0bffd17 	ldw	r2,-12(fp)
 201092c:	10000816 	blt	r2,zero,2010950 <write+0x44>
 2010930:	01400304 	movi	r5,12
 2010934:	e13ffd17 	ldw	r4,-12(fp)
 2010938:	20019440 	call	2001944 <__mulsi3>
 201093c:	1007883a 	mov	r3,r2
 2010940:	008080b4 	movhi	r2,514
 2010944:	10b08b04 	addi	r2,r2,-15828
 2010948:	1885883a 	add	r2,r3,r2
 201094c:	00000106 	br	2010954 <write+0x48>
 2010950:	0005883a 	mov	r2,zero
 2010954:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2010958:	e0bffb17 	ldw	r2,-20(fp)
 201095c:	10002126 	beq	r2,zero,20109e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2010960:	e0bffb17 	ldw	r2,-20(fp)
 2010964:	10800217 	ldw	r2,8(r2)
 2010968:	108000cc 	andi	r2,r2,3
 201096c:	10001826 	beq	r2,zero,20109d0 <write+0xc4>
 2010970:	e0bffb17 	ldw	r2,-20(fp)
 2010974:	10800017 	ldw	r2,0(r2)
 2010978:	10800617 	ldw	r2,24(r2)
 201097c:	10001426 	beq	r2,zero,20109d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2010980:	e0bffb17 	ldw	r2,-20(fp)
 2010984:	10800017 	ldw	r2,0(r2)
 2010988:	10800617 	ldw	r2,24(r2)
 201098c:	e0ffff17 	ldw	r3,-4(fp)
 2010990:	180d883a 	mov	r6,r3
 2010994:	e17ffe17 	ldw	r5,-8(fp)
 2010998:	e13ffb17 	ldw	r4,-20(fp)
 201099c:	103ee83a 	callr	r2
 20109a0:	e0bffc15 	stw	r2,-16(fp)
 20109a4:	e0bffc17 	ldw	r2,-16(fp)
 20109a8:	1000070e 	bge	r2,zero,20109c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 20109ac:	20108d00 	call	20108d0 <alt_get_errno>
 20109b0:	1007883a 	mov	r3,r2
 20109b4:	e0bffc17 	ldw	r2,-16(fp)
 20109b8:	0085c83a 	sub	r2,zero,r2
 20109bc:	18800015 	stw	r2,0(r3)
        return -1;
 20109c0:	00bfffc4 	movi	r2,-1
 20109c4:	00000c06 	br	20109f8 <write+0xec>
      }
      return rval;
 20109c8:	e0bffc17 	ldw	r2,-16(fp)
 20109cc:	00000a06 	br	20109f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20109d0:	20108d00 	call	20108d0 <alt_get_errno>
 20109d4:	1007883a 	mov	r3,r2
 20109d8:	00800344 	movi	r2,13
 20109dc:	18800015 	stw	r2,0(r3)
 20109e0:	00000406 	br	20109f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20109e4:	20108d00 	call	20108d0 <alt_get_errno>
 20109e8:	1007883a 	mov	r3,r2
 20109ec:	00801444 	movi	r2,81
 20109f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20109f4:	00bfffc4 	movi	r2,-1
}
 20109f8:	e037883a 	mov	sp,fp
 20109fc:	dfc00117 	ldw	ra,4(sp)
 2010a00:	df000017 	ldw	fp,0(sp)
 2010a04:	dec00204 	addi	sp,sp,8
 2010a08:	f800283a 	ret

02010a0c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2010a0c:	deffdf04 	addi	sp,sp,-132
 2010a10:	dfc02015 	stw	ra,128(sp)
 2010a14:	df001f15 	stw	fp,124(sp)
 2010a18:	df001f04 	addi	fp,sp,124
 2010a1c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2010a20:	e0bfe204 	addi	r2,fp,-120
 2010a24:	100b883a 	mov	r5,r2
 2010a28:	01003fc4 	movi	r4,255
 2010a2c:	20189380 	call	2018938 <OSTaskQuery>
 2010a30:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2010a34:	e0bffe83 	ldbu	r2,-6(fp)
 2010a38:	10803fcc 	andi	r2,r2,255
 2010a3c:	10001e1e 	bne	r2,zero,2010ab8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2010a40:	e0bfee83 	ldbu	r2,-70(fp)
 2010a44:	10803fcc 	andi	r2,r2,255
 2010a48:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2010a4c:	d0a72217 	ldw	r2,-25464(gp)
 2010a50:	e0fffd04 	addi	r3,fp,-12
 2010a54:	180b883a 	mov	r5,r3
 2010a58:	1009883a 	mov	r4,r2
 2010a5c:	20171500 	call	2017150 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2010a60:	e0bffe43 	ldbu	r2,-7(fp)
 2010a64:	10803fcc 	andi	r2,r2,255
 2010a68:	10000726 	beq	r2,zero,2010a88 <__env_lock+0x7c>
 2010a6c:	d0a00e17 	ldw	r2,-32712(gp)
 2010a70:	e0ffe117 	ldw	r3,-124(fp)
 2010a74:	1880041e 	bne	r3,r2,2010a88 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2010a78:	d0a72117 	ldw	r2,-25468(gp)
 2010a7c:	10800044 	addi	r2,r2,1
 2010a80:	d0a72115 	stw	r2,-25468(gp)
 2010a84:	00000a06 	br	2010ab0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2010a88:	d0a72217 	ldw	r2,-25464(gp)
 2010a8c:	e0fffe84 	addi	r3,fp,-6
 2010a90:	180d883a 	mov	r6,r3
 2010a94:	000b883a 	mov	r5,zero
 2010a98:	1009883a 	mov	r4,r2
 2010a9c:	2016cc80 	call	2016cc8 <OSSemPend>
    locks  = 1;
 2010aa0:	00800044 	movi	r2,1
 2010aa4:	d0a72115 	stw	r2,-25468(gp)
    lockid = id;
 2010aa8:	e0bfe117 	ldw	r2,-124(fp)
 2010aac:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2010ab0:	0001883a 	nop
 2010ab4:	00000106 	br	2010abc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2010ab8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2010abc:	e037883a 	mov	sp,fp
 2010ac0:	dfc00117 	ldw	ra,4(sp)
 2010ac4:	df000017 	ldw	fp,0(sp)
 2010ac8:	dec00204 	addi	sp,sp,8
 2010acc:	f800283a 	ret

02010ad0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2010ad0:	defffd04 	addi	sp,sp,-12
 2010ad4:	dfc00215 	stw	ra,8(sp)
 2010ad8:	df000115 	stw	fp,4(sp)
 2010adc:	df000104 	addi	fp,sp,4
 2010ae0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2010ae4:	d0a72117 	ldw	r2,-25468(gp)
 2010ae8:	10000b26 	beq	r2,zero,2010b18 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2010aec:	d0a72117 	ldw	r2,-25468(gp)
 2010af0:	10bfffc4 	addi	r2,r2,-1
 2010af4:	d0a72115 	stw	r2,-25468(gp)
 2010af8:	d0a72117 	ldw	r2,-25468(gp)
 2010afc:	1000071e 	bne	r2,zero,2010b1c <__env_unlock+0x4c>
  {
    lockid = -1;
 2010b00:	00bfffc4 	movi	r2,-1
 2010b04:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 2010b08:	d0a72217 	ldw	r2,-25464(gp)
 2010b0c:	1009883a 	mov	r4,r2
 2010b10:	20170400 	call	2017040 <OSSemPost>
 2010b14:	00000106 	br	2010b1c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2010b18:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2010b1c:	e037883a 	mov	sp,fp
 2010b20:	dfc00117 	ldw	ra,4(sp)
 2010b24:	df000017 	ldw	fp,0(sp)
 2010b28:	dec00204 	addi	sp,sp,8
 2010b2c:	f800283a 	ret

02010b30 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2010b30:	deffdb04 	addi	sp,sp,-148
 2010b34:	dfc02415 	stw	ra,144(sp)
 2010b38:	df002315 	stw	fp,140(sp)
 2010b3c:	df002304 	addi	fp,sp,140
 2010b40:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010b44:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2010b48:	d0a72543 	ldbu	r2,-25451(gp)
 2010b4c:	10803fcc 	andi	r2,r2,255
 2010b50:	10800060 	cmpeqi	r2,r2,1
 2010b54:	10003626 	beq	r2,zero,2010c30 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2010b58:	e0bfe204 	addi	r2,fp,-120
 2010b5c:	100b883a 	mov	r5,r2
 2010b60:	01003fc4 	movi	r4,255
 2010b64:	20189380 	call	2018938 <OSTaskQuery>
 2010b68:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2010b6c:	e0bffe83 	ldbu	r2,-6(fp)
 2010b70:	10803fcc 	andi	r2,r2,255
 2010b74:	1000301e 	bne	r2,zero,2010c38 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2010b78:	e0bfee83 	ldbu	r2,-70(fp)
 2010b7c:	10803fcc 	andi	r2,r2,255
 2010b80:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2010b84:	d0a72417 	ldw	r2,-25456(gp)
 2010b88:	e0fffd04 	addi	r3,fp,-12
 2010b8c:	180b883a 	mov	r5,r3
 2010b90:	1009883a 	mov	r4,r2
 2010b94:	20171500 	call	2017150 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010b98:	0005303a 	rdctl	r2,status
 2010b9c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ba0:	e0ffe117 	ldw	r3,-124(fp)
 2010ba4:	00bfff84 	movi	r2,-2
 2010ba8:	1884703a 	and	r2,r3,r2
 2010bac:	1001703a 	wrctl	status,r2
  
  return context;
 2010bb0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2010bb4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2010bb8:	e0bffd0b 	ldhu	r2,-12(fp)
 2010bbc:	10bfffcc 	andi	r2,r2,65535
 2010bc0:	10000b1e 	bne	r2,zero,2010bf0 <__malloc_lock+0xc0>
 2010bc4:	d0a00f17 	ldw	r2,-32708(gp)
 2010bc8:	e0ffde17 	ldw	r3,-136(fp)
 2010bcc:	1880081e 	bne	r3,r2,2010bf0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2010bd0:	d0a72317 	ldw	r2,-25460(gp)
 2010bd4:	10800044 	addi	r2,r2,1
 2010bd8:	d0a72315 	stw	r2,-25460(gp)
 2010bdc:	e0bfdd17 	ldw	r2,-140(fp)
 2010be0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010be4:	e0bfdf17 	ldw	r2,-132(fp)
 2010be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2010bec:	00000e06 	br	2010c28 <__malloc_lock+0xf8>
 2010bf0:	e0bfdd17 	ldw	r2,-140(fp)
 2010bf4:	e0bfe015 	stw	r2,-128(fp)
 2010bf8:	e0bfe017 	ldw	r2,-128(fp)
 2010bfc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2010c00:	d0a72417 	ldw	r2,-25456(gp)
 2010c04:	e0fffe84 	addi	r3,fp,-6
 2010c08:	180d883a 	mov	r6,r3
 2010c0c:	000b883a 	mov	r5,zero
 2010c10:	1009883a 	mov	r4,r2
 2010c14:	2016cc80 	call	2016cc8 <OSSemPend>
    locks  = 1;
 2010c18:	00800044 	movi	r2,1
 2010c1c:	d0a72315 	stw	r2,-25460(gp)
    lockid = id;
 2010c20:	e0bfde17 	ldw	r2,-136(fp)
 2010c24:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2010c28:	0001883a 	nop
 2010c2c:	00000306 	br	2010c3c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2010c30:	0001883a 	nop
 2010c34:	00000106 	br	2010c3c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2010c38:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2010c3c:	e037883a 	mov	sp,fp
 2010c40:	dfc00117 	ldw	ra,4(sp)
 2010c44:	df000017 	ldw	fp,0(sp)
 2010c48:	dec00204 	addi	sp,sp,8
 2010c4c:	f800283a 	ret

02010c50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2010c50:	defff804 	addi	sp,sp,-32
 2010c54:	dfc00715 	stw	ra,28(sp)
 2010c58:	df000615 	stw	fp,24(sp)
 2010c5c:	df000604 	addi	fp,sp,24
 2010c60:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010c64:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2010c68:	d0a72543 	ldbu	r2,-25451(gp)
 2010c6c:	10803fcc 	andi	r2,r2,255
 2010c70:	10800060 	cmpeqi	r2,r2,1
 2010c74:	10002326 	beq	r2,zero,2010d04 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010c78:	0005303a 	rdctl	r2,status
 2010c7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010c80:	e0fffe17 	ldw	r3,-8(fp)
 2010c84:	00bfff84 	movi	r2,-2
 2010c88:	1884703a 	and	r2,r3,r2
 2010c8c:	1001703a 	wrctl	status,r2
  
  return context;
 2010c90:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2010c94:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2010c98:	d0a72317 	ldw	r2,-25460(gp)
 2010c9c:	1000051e 	bne	r2,zero,2010cb4 <__malloc_unlock+0x64>
 2010ca0:	e0bffa17 	ldw	r2,-24(fp)
 2010ca4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010ca8:	e0bffb17 	ldw	r2,-20(fp)
 2010cac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2010cb0:	00001506 	br	2010d08 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2010cb4:	d0a72317 	ldw	r2,-25460(gp)
 2010cb8:	10bfffc4 	addi	r2,r2,-1
 2010cbc:	d0a72315 	stw	r2,-25460(gp)
 2010cc0:	d0a72317 	ldw	r2,-25460(gp)
 2010cc4:	10000a1e 	bne	r2,zero,2010cf0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2010cc8:	00bfffc4 	movi	r2,-1
 2010ccc:	d0a00f15 	stw	r2,-32708(gp)
 2010cd0:	e0bffa17 	ldw	r2,-24(fp)
 2010cd4:	e0bffc15 	stw	r2,-16(fp)
 2010cd8:	e0bffc17 	ldw	r2,-16(fp)
 2010cdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2010ce0:	d0a72417 	ldw	r2,-25456(gp)
 2010ce4:	1009883a 	mov	r4,r2
 2010ce8:	20170400 	call	2017040 <OSSemPost>
 2010cec:	00000606 	br	2010d08 <__malloc_unlock+0xb8>
 2010cf0:	e0bffa17 	ldw	r2,-24(fp)
 2010cf4:	e0bffd15 	stw	r2,-12(fp)
 2010cf8:	e0bffd17 	ldw	r2,-12(fp)
 2010cfc:	1001703a 	wrctl	status,r2
 2010d00:	00000106 	br	2010d08 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2010d04:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2010d08:	e037883a 	mov	sp,fp
 2010d0c:	dfc00117 	ldw	ra,4(sp)
 2010d10:	df000017 	ldw	fp,0(sp)
 2010d14:	dec00204 	addi	sp,sp,8
 2010d18:	f800283a 	ret

02010d1c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2010d1c:	defff704 	addi	sp,sp,-36
 2010d20:	dfc00815 	stw	ra,32(sp)
 2010d24:	df000715 	stw	fp,28(sp)
 2010d28:	df000704 	addi	fp,sp,28
 2010d2c:	e13ffd15 	stw	r4,-12(fp)
 2010d30:	e17ffe15 	stw	r5,-8(fp)
 2010d34:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010d38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010d3c:	e0bfff17 	ldw	r2,-4(fp)
 2010d40:	1000021e 	bne	r2,zero,2010d4c <OSEventNameGet+0x30>
        return (0);
 2010d44:	0005883a 	mov	r2,zero
 2010d48:	00003706 	br	2010e28 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2010d4c:	e0bffd17 	ldw	r2,-12(fp)
 2010d50:	1000051e 	bne	r2,zero,2010d68 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2010d54:	e0bfff17 	ldw	r2,-4(fp)
 2010d58:	00c00104 	movi	r3,4
 2010d5c:	10c00005 	stb	r3,0(r2)
        return (0);
 2010d60:	0005883a 	mov	r2,zero
 2010d64:	00003006 	br	2010e28 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010d68:	e0bffe17 	ldw	r2,-8(fp)
 2010d6c:	1000051e 	bne	r2,zero,2010d84 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2010d70:	e0bfff17 	ldw	r2,-4(fp)
 2010d74:	00c00304 	movi	r3,12
 2010d78:	10c00005 	stb	r3,0(r2)
        return (0);
 2010d7c:	0005883a 	mov	r2,zero
 2010d80:	00002906 	br	2010e28 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2010d84:	d0a73303 	ldbu	r2,-25396(gp)
 2010d88:	10803fcc 	andi	r2,r2,255
 2010d8c:	10000526 	beq	r2,zero,2010da4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2010d90:	e0bfff17 	ldw	r2,-4(fp)
 2010d94:	00c00444 	movi	r3,17
 2010d98:	10c00005 	stb	r3,0(r2)
        return (0);
 2010d9c:	0005883a 	mov	r2,zero
 2010da0:	00002106 	br	2010e28 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2010da4:	e0bffd17 	ldw	r2,-12(fp)
 2010da8:	10800003 	ldbu	r2,0(r2)
 2010dac:	10803fcc 	andi	r2,r2,255
 2010db0:	10bfffc4 	addi	r2,r2,-1
 2010db4:	10800128 	cmpgeui	r2,r2,4
 2010db8:	10000526 	beq	r2,zero,2010dd0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2010dbc:	e0bfff17 	ldw	r2,-4(fp)
 2010dc0:	00c00044 	movi	r3,1
 2010dc4:	10c00005 	stb	r3,0(r2)
             return (0);
 2010dc8:	0005883a 	mov	r2,zero
 2010dcc:	00001606 	br	2010e28 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2010dd0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010dd4:	0005303a 	rdctl	r2,status
 2010dd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ddc:	e0fffb17 	ldw	r3,-20(fp)
 2010de0:	00bfff84 	movi	r2,-2
 2010de4:	1884703a 	and	r2,r3,r2
 2010de8:	1001703a 	wrctl	status,r2
  
  return context;
 2010dec:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2010df0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2010df4:	e0bffd17 	ldw	r2,-12(fp)
 2010df8:	10800384 	addi	r2,r2,14
 2010dfc:	100b883a 	mov	r5,r2
 2010e00:	e13ffe17 	ldw	r4,-8(fp)
 2010e04:	20127a00 	call	20127a0 <OS_StrCopy>
 2010e08:	e0bffa05 	stb	r2,-24(fp)
 2010e0c:	e0bff917 	ldw	r2,-28(fp)
 2010e10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010e14:	e0bffc17 	ldw	r2,-16(fp)
 2010e18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010e1c:	e0bfff17 	ldw	r2,-4(fp)
 2010e20:	10000005 	stb	zero,0(r2)
    return (len);
 2010e24:	e0bffa03 	ldbu	r2,-24(fp)
}
 2010e28:	e037883a 	mov	sp,fp
 2010e2c:	dfc00117 	ldw	ra,4(sp)
 2010e30:	df000017 	ldw	fp,0(sp)
 2010e34:	dec00204 	addi	sp,sp,8
 2010e38:	f800283a 	ret

02010e3c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2010e3c:	defff604 	addi	sp,sp,-40
 2010e40:	dfc00915 	stw	ra,36(sp)
 2010e44:	df000815 	stw	fp,32(sp)
 2010e48:	df000804 	addi	fp,sp,32
 2010e4c:	e13ffd15 	stw	r4,-12(fp)
 2010e50:	e17ffe15 	stw	r5,-8(fp)
 2010e54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010e58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010e5c:	e0bfff17 	ldw	r2,-4(fp)
 2010e60:	10004026 	beq	r2,zero,2010f64 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2010e64:	e0bffd17 	ldw	r2,-12(fp)
 2010e68:	1000041e 	bne	r2,zero,2010e7c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2010e6c:	e0bfff17 	ldw	r2,-4(fp)
 2010e70:	00c00104 	movi	r3,4
 2010e74:	10c00005 	stb	r3,0(r2)
        return;
 2010e78:	00003b06 	br	2010f68 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010e7c:	e0bffe17 	ldw	r2,-8(fp)
 2010e80:	1000041e 	bne	r2,zero,2010e94 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2010e84:	e0bfff17 	ldw	r2,-4(fp)
 2010e88:	00c00304 	movi	r3,12
 2010e8c:	10c00005 	stb	r3,0(r2)
        return;
 2010e90:	00003506 	br	2010f68 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2010e94:	d0a73303 	ldbu	r2,-25396(gp)
 2010e98:	10803fcc 	andi	r2,r2,255
 2010e9c:	10000426 	beq	r2,zero,2010eb0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2010ea0:	e0bfff17 	ldw	r2,-4(fp)
 2010ea4:	00c00484 	movi	r3,18
 2010ea8:	10c00005 	stb	r3,0(r2)
        return;
 2010eac:	00002e06 	br	2010f68 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2010eb0:	e0bffd17 	ldw	r2,-12(fp)
 2010eb4:	10800003 	ldbu	r2,0(r2)
 2010eb8:	10803fcc 	andi	r2,r2,255
 2010ebc:	10bfffc4 	addi	r2,r2,-1
 2010ec0:	10800128 	cmpgeui	r2,r2,4
 2010ec4:	10000426 	beq	r2,zero,2010ed8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2010ec8:	e0bfff17 	ldw	r2,-4(fp)
 2010ecc:	00c00044 	movi	r3,1
 2010ed0:	10c00005 	stb	r3,0(r2)
             return;
 2010ed4:	00002406 	br	2010f68 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2010ed8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010edc:	0005303a 	rdctl	r2,status
 2010ee0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ee4:	e0fffc17 	ldw	r3,-16(fp)
 2010ee8:	00bfff84 	movi	r2,-2
 2010eec:	1884703a 	and	r2,r3,r2
 2010ef0:	1001703a 	wrctl	status,r2
  
  return context;
 2010ef4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2010ef8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2010efc:	e13ffe17 	ldw	r4,-8(fp)
 2010f00:	20128140 	call	2012814 <OS_StrLen>
 2010f04:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2010f08:	e0bffa03 	ldbu	r2,-24(fp)
 2010f0c:	10800830 	cmpltui	r2,r2,32
 2010f10:	1000081e 	bne	r2,zero,2010f34 <OSEventNameSet+0xf8>
 2010f14:	e0bff817 	ldw	r2,-32(fp)
 2010f18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010f1c:	e0bff917 	ldw	r2,-28(fp)
 2010f20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2010f24:	e0bfff17 	ldw	r2,-4(fp)
 2010f28:	00c002c4 	movi	r3,11
 2010f2c:	10c00005 	stb	r3,0(r2)
        return;
 2010f30:	00000d06 	br	2010f68 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2010f34:	e0bffd17 	ldw	r2,-12(fp)
 2010f38:	10800384 	addi	r2,r2,14
 2010f3c:	e17ffe17 	ldw	r5,-8(fp)
 2010f40:	1009883a 	mov	r4,r2
 2010f44:	20127a00 	call	20127a0 <OS_StrCopy>
 2010f48:	e0bff817 	ldw	r2,-32(fp)
 2010f4c:	e0bffb15 	stw	r2,-20(fp)
 2010f50:	e0bffb17 	ldw	r2,-20(fp)
 2010f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010f58:	e0bfff17 	ldw	r2,-4(fp)
 2010f5c:	10000005 	stb	zero,0(r2)
 2010f60:	00000106 	br	2010f68 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2010f64:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2010f68:	e037883a 	mov	sp,fp
 2010f6c:	dfc00117 	ldw	ra,4(sp)
 2010f70:	df000017 	ldw	fp,0(sp)
 2010f74:	dec00204 	addi	sp,sp,8
 2010f78:	f800283a 	ret

02010f7c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 2010f7c:	deffed04 	addi	sp,sp,-76
 2010f80:	dfc01215 	stw	ra,72(sp)
 2010f84:	df001115 	stw	fp,68(sp)
 2010f88:	df001104 	addi	fp,sp,68
 2010f8c:	e13ffc15 	stw	r4,-16(fp)
 2010f90:	e17ffd15 	stw	r5,-12(fp)
 2010f94:	e1bffe15 	stw	r6,-8(fp)
 2010f98:	3805883a 	mov	r2,r7
 2010f9c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2010fa0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2010fa4:	e0800217 	ldw	r2,8(fp)
 2010fa8:	1000021e 	bne	r2,zero,2010fb4 <OSEventPendMulti+0x38>
        return (0);
 2010fac:	0005883a 	mov	r2,zero
 2010fb0:	00017106 	br	2011578 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2010fb4:	e0bffc17 	ldw	r2,-16(fp)
 2010fb8:	1000051e 	bne	r2,zero,2010fd0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 2010fbc:	e0800217 	ldw	r2,8(fp)
 2010fc0:	00c00104 	movi	r3,4
 2010fc4:	10c00005 	stb	r3,0(r2)
        return (0);
 2010fc8:	0005883a 	mov	r2,zero
 2010fcc:	00016a06 	br	2011578 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2010fd0:	e0bffd17 	ldw	r2,-12(fp)
 2010fd4:	1000051e 	bne	r2,zero,2010fec <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2010fd8:	e0800217 	ldw	r2,8(fp)
 2010fdc:	00c00104 	movi	r3,4
 2010fe0:	10c00005 	stb	r3,0(r2)
        return (0);
 2010fe4:	0005883a 	mov	r2,zero
 2010fe8:	00016306 	br	2011578 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2010fec:	e0bffe17 	ldw	r2,-8(fp)
 2010ff0:	1000051e 	bne	r2,zero,2011008 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2010ff4:	e0800217 	ldw	r2,8(fp)
 2010ff8:	00c00104 	movi	r3,4
 2010ffc:	10c00005 	stb	r3,0(r2)
        return (0);
 2011000:	0005883a 	mov	r2,zero
 2011004:	00015c06 	br	2011578 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2011008:	e0bffd17 	ldw	r2,-12(fp)
 201100c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2011010:	e0bffc17 	ldw	r2,-16(fp)
 2011014:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2011018:	e0bfef17 	ldw	r2,-68(fp)
 201101c:	10800017 	ldw	r2,0(r2)
 2011020:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2011024:	00001906 	br	201108c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2011028:	e0bff017 	ldw	r2,-64(fp)
 201102c:	10800003 	ldbu	r2,0(r2)
 2011030:	10803fcc 	andi	r2,r2,255
 2011034:	10c000a0 	cmpeqi	r3,r2,2
 2011038:	1800091e 	bne	r3,zero,2011060 <OSEventPendMulti+0xe4>
 201103c:	10c000e0 	cmpeqi	r3,r2,3
 2011040:	1800091e 	bne	r3,zero,2011068 <OSEventPendMulti+0xec>
 2011044:	10800060 	cmpeqi	r2,r2,1
 2011048:	1000091e 	bne	r2,zero,2011070 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 201104c:	e0800217 	ldw	r2,8(fp)
 2011050:	00c00044 	movi	r3,1
 2011054:	10c00005 	stb	r3,0(r2)
                 return (0);
 2011058:	0005883a 	mov	r2,zero
 201105c:	00014606 	br	2011578 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2011060:	0001883a 	nop
 2011064:	00000306 	br	2011074 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2011068:	0001883a 	nop
 201106c:	00000106 	br	2011074 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2011070:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2011074:	e0bfef17 	ldw	r2,-68(fp)
 2011078:	10800104 	addi	r2,r2,4
 201107c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2011080:	e0bfef17 	ldw	r2,-68(fp)
 2011084:	10800017 	ldw	r2,0(r2)
 2011088:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 201108c:	e0bff017 	ldw	r2,-64(fp)
 2011090:	103fe51e 	bne	r2,zero,2011028 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2011094:	d0a73303 	ldbu	r2,-25396(gp)
 2011098:	10803fcc 	andi	r2,r2,255
 201109c:	10000526 	beq	r2,zero,20110b4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20110a0:	e0800217 	ldw	r2,8(fp)
 20110a4:	00c00084 	movi	r3,2
 20110a8:	10c00005 	stb	r3,0(r2)
        return (0);
 20110ac:	0005883a 	mov	r2,zero
 20110b0:	00013106 	br	2011578 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20110b4:	d0a72503 	ldbu	r2,-25452(gp)
 20110b8:	10803fcc 	andi	r2,r2,255
 20110bc:	10000526 	beq	r2,zero,20110d4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20110c0:	e0800217 	ldw	r2,8(fp)
 20110c4:	00c00344 	movi	r3,13
 20110c8:	10c00005 	stb	r3,0(r2)
        return (0);
 20110cc:	0005883a 	mov	r2,zero
 20110d0:	00012906 	br	2011578 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20110d4:	0005303a 	rdctl	r2,status
 20110d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20110dc:	e0fffb17 	ldw	r3,-20(fp)
 20110e0:	00bfff84 	movi	r2,-2
 20110e4:	1884703a 	and	r2,r3,r2
 20110e8:	1001703a 	wrctl	status,r2
  
  return context;
 20110ec:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 20110f0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 20110f4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 20110f8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 20110fc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2011100:	e0bffc17 	ldw	r2,-16(fp)
 2011104:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2011108:	e0bfef17 	ldw	r2,-68(fp)
 201110c:	10800017 	ldw	r2,0(r2)
 2011110:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2011114:	00008106 	br	201131c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2011118:	e0bff017 	ldw	r2,-64(fp)
 201111c:	10800003 	ldbu	r2,0(r2)
 2011120:	10803fcc 	andi	r2,r2,255
 2011124:	10c000a0 	cmpeqi	r3,r2,2
 2011128:	18003c1e 	bne	r3,zero,201121c <OSEventPendMulti+0x2a0>
 201112c:	10c000e0 	cmpeqi	r3,r2,3
 2011130:	1800031e 	bne	r3,zero,2011140 <OSEventPendMulti+0x1c4>
 2011134:	10800060 	cmpeqi	r2,r2,1
 2011138:	10001e1e 	bne	r2,zero,20111b4 <OSEventPendMulti+0x238>
 201113c:	00006606 	br	20112d8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2011140:	e0bff017 	ldw	r2,-64(fp)
 2011144:	1080020b 	ldhu	r2,8(r2)
 2011148:	10bfffcc 	andi	r2,r2,65535
 201114c:	10001526 	beq	r2,zero,20111a4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2011150:	e0bff017 	ldw	r2,-64(fp)
 2011154:	1080020b 	ldhu	r2,8(r2)
 2011158:	10bfffc4 	addi	r2,r2,-1
 201115c:	1007883a 	mov	r3,r2
 2011160:	e0bff017 	ldw	r2,-64(fp)
 2011164:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2011168:	e0bffd17 	ldw	r2,-12(fp)
 201116c:	10c00104 	addi	r3,r2,4
 2011170:	e0fffd15 	stw	r3,-12(fp)
 2011174:	e0fff017 	ldw	r3,-64(fp)
 2011178:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 201117c:	00800044 	movi	r2,1
 2011180:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2011184:	e0bffe17 	ldw	r2,-8(fp)
 2011188:	10c00104 	addi	r3,r2,4
 201118c:	e0fffe15 	stw	r3,-8(fp)
 2011190:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 2011194:	e0bff18b 	ldhu	r2,-58(fp)
 2011198:	10800044 	addi	r2,r2,1
 201119c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20111a0:	00005806 	br	2011304 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20111a4:	e0bff203 	ldbu	r2,-56(fp)
 20111a8:	10800054 	ori	r2,r2,1
 20111ac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20111b0:	00005406 	br	2011304 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20111b4:	e0bff017 	ldw	r2,-64(fp)
 20111b8:	10800117 	ldw	r2,4(r2)
 20111bc:	10001326 	beq	r2,zero,201120c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20111c0:	e0bffe17 	ldw	r2,-8(fp)
 20111c4:	10c00104 	addi	r3,r2,4
 20111c8:	e0fffe15 	stw	r3,-8(fp)
 20111cc:	e0fff017 	ldw	r3,-64(fp)
 20111d0:	18c00117 	ldw	r3,4(r3)
 20111d4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 20111d8:	e0bff017 	ldw	r2,-64(fp)
 20111dc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 20111e0:	e0bffd17 	ldw	r2,-12(fp)
 20111e4:	10c00104 	addi	r3,r2,4
 20111e8:	e0fffd15 	stw	r3,-12(fp)
 20111ec:	e0fff017 	ldw	r3,-64(fp)
 20111f0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 20111f4:	00800044 	movi	r2,1
 20111f8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20111fc:	e0bff18b 	ldhu	r2,-58(fp)
 2011200:	10800044 	addi	r2,r2,1
 2011204:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2011208:	00003e06 	br	2011304 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 201120c:	e0bff203 	ldbu	r2,-56(fp)
 2011210:	10800094 	ori	r2,r2,2
 2011214:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2011218:	00003a06 	br	2011304 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 201121c:	e0bff017 	ldw	r2,-64(fp)
 2011220:	10800117 	ldw	r2,4(r2)
 2011224:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2011228:	e0bff517 	ldw	r2,-44(fp)
 201122c:	1080058b 	ldhu	r2,22(r2)
 2011230:	10bfffcc 	andi	r2,r2,65535
 2011234:	10002426 	beq	r2,zero,20112c8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2011238:	e0bffe17 	ldw	r2,-8(fp)
 201123c:	10c00104 	addi	r3,r2,4
 2011240:	e0fffe15 	stw	r3,-8(fp)
 2011244:	e0fff517 	ldw	r3,-44(fp)
 2011248:	18c00417 	ldw	r3,16(r3)
 201124c:	19400104 	addi	r5,r3,4
 2011250:	e13ff517 	ldw	r4,-44(fp)
 2011254:	21400415 	stw	r5,16(r4)
 2011258:	18c00017 	ldw	r3,0(r3)
 201125c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2011260:	e0bff517 	ldw	r2,-44(fp)
 2011264:	10c00417 	ldw	r3,16(r2)
 2011268:	e0bff517 	ldw	r2,-44(fp)
 201126c:	10800217 	ldw	r2,8(r2)
 2011270:	1880041e 	bne	r3,r2,2011284 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2011274:	e0bff517 	ldw	r2,-44(fp)
 2011278:	10c00117 	ldw	r3,4(r2)
 201127c:	e0bff517 	ldw	r2,-44(fp)
 2011280:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2011284:	e0bff517 	ldw	r2,-44(fp)
 2011288:	1080058b 	ldhu	r2,22(r2)
 201128c:	10bfffc4 	addi	r2,r2,-1
 2011290:	1007883a 	mov	r3,r2
 2011294:	e0bff517 	ldw	r2,-44(fp)
 2011298:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 201129c:	e0bffd17 	ldw	r2,-12(fp)
 20112a0:	10c00104 	addi	r3,r2,4
 20112a4:	e0fffd15 	stw	r3,-12(fp)
 20112a8:	e0fff017 	ldw	r3,-64(fp)
 20112ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20112b0:	00800044 	movi	r2,1
 20112b4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20112b8:	e0bff18b 	ldhu	r2,-58(fp)
 20112bc:	10800044 	addi	r2,r2,1
 20112c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20112c4:	00000f06 	br	2011304 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20112c8:	e0bff203 	ldbu	r2,-56(fp)
 20112cc:	10800114 	ori	r2,r2,4
 20112d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20112d4:	00000b06 	br	2011304 <OSEventPendMulti+0x388>
 20112d8:	e0bff317 	ldw	r2,-52(fp)
 20112dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20112e0:	e0bff417 	ldw	r2,-48(fp)
 20112e4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 20112e8:	e0bffd17 	ldw	r2,-12(fp)
 20112ec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 20112f0:	e0800217 	ldw	r2,8(fp)
 20112f4:	00c00044 	movi	r3,1
 20112f8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 20112fc:	e0bff18b 	ldhu	r2,-58(fp)
 2011300:	00009d06 	br	2011578 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2011304:	e0bfef17 	ldw	r2,-68(fp)
 2011308:	10800104 	addi	r2,r2,4
 201130c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2011310:	e0bfef17 	ldw	r2,-68(fp)
 2011314:	10800017 	ldw	r2,0(r2)
 2011318:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 201131c:	e0bff017 	ldw	r2,-64(fp)
 2011320:	103f7d1e 	bne	r2,zero,2011118 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2011324:	e0bff103 	ldbu	r2,-60(fp)
 2011328:	10800058 	cmpnei	r2,r2,1
 201132c:	10000a1e 	bne	r2,zero,2011358 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2011330:	e0bffd17 	ldw	r2,-12(fp)
 2011334:	10000015 	stw	zero,0(r2)
 2011338:	e0bff317 	ldw	r2,-52(fp)
 201133c:	e0bff615 	stw	r2,-40(fp)
 2011340:	e0bff617 	ldw	r2,-40(fp)
 2011344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2011348:	e0800217 	ldw	r2,8(fp)
 201134c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2011350:	e0bff18b 	ldhu	r2,-58(fp)
 2011354:	00008806 	br	2011578 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2011358:	d0a73417 	ldw	r2,-25392(gp)
 201135c:	d0e73417 	ldw	r3,-25392(gp)
 2011360:	19000c03 	ldbu	r4,48(r3)
 2011364:	e0fff203 	ldbu	r3,-56(fp)
 2011368:	20c6b03a 	or	r3,r4,r3
 201136c:	1809883a 	mov	r4,r3
 2011370:	00ffe004 	movi	r3,-128
 2011374:	20c6b03a 	or	r3,r4,r3
 2011378:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201137c:	d0a73417 	ldw	r2,-25392(gp)
 2011380:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2011384:	d0a73417 	ldw	r2,-25392(gp)
 2011388:	e0ffff0b 	ldhu	r3,-4(fp)
 201138c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2011390:	e13ffc17 	ldw	r4,-16(fp)
 2011394:	2011eb80 	call	2011eb8 <OS_EventTaskWaitMulti>
 2011398:	e0bff317 	ldw	r2,-52(fp)
 201139c:	e0bff915 	stw	r2,-28(fp)
 20113a0:	e0bff917 	ldw	r2,-28(fp)
 20113a4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20113a8:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20113ac:	0005303a 	rdctl	r2,status
 20113b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20113b4:	e0fff717 	ldw	r3,-36(fp)
 20113b8:	00bfff84 	movi	r2,-2
 20113bc:	1884703a 	and	r2,r3,r2
 20113c0:	1001703a 	wrctl	status,r2
  
  return context;
 20113c4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20113c8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 20113cc:	d0a73417 	ldw	r2,-25392(gp)
 20113d0:	10800c43 	ldbu	r2,49(r2)
 20113d4:	10803fcc 	andi	r2,r2,255
 20113d8:	10000226 	beq	r2,zero,20113e4 <OSEventPendMulti+0x468>
 20113dc:	108000a0 	cmpeqi	r2,r2,2
 20113e0:	10001826 	beq	r2,zero,2011444 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 20113e4:	d0a73417 	ldw	r2,-25392(gp)
 20113e8:	10800717 	ldw	r2,28(r2)
 20113ec:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 20113f0:	e0bff017 	ldw	r2,-64(fp)
 20113f4:	10000b26 	beq	r2,zero,2011424 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 20113f8:	e0bffd17 	ldw	r2,-12(fp)
 20113fc:	10c00104 	addi	r3,r2,4
 2011400:	e0fffd15 	stw	r3,-12(fp)
 2011404:	e0fff017 	ldw	r3,-64(fp)
 2011408:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 201140c:	e0bffd17 	ldw	r2,-12(fp)
 2011410:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2011414:	e0bff18b 	ldhu	r2,-58(fp)
 2011418:	10800044 	addi	r2,r2,1
 201141c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 2011420:	00000d06 	br	2011458 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2011424:	d0a73417 	ldw	r2,-25392(gp)
 2011428:	00c00044 	movi	r3,1
 201142c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2011430:	d0a73417 	ldw	r2,-25392(gp)
 2011434:	e17ffc17 	ldw	r5,-16(fp)
 2011438:	1009883a 	mov	r4,r2
 201143c:	20120c00 	call	20120c0 <OS_EventTaskRemoveMulti>
             }
			 break;
 2011440:	00000506 	br	2011458 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2011444:	d0a73417 	ldw	r2,-25392(gp)
 2011448:	e17ffc17 	ldw	r5,-16(fp)
 201144c:	1009883a 	mov	r4,r2
 2011450:	20120c00 	call	20120c0 <OS_EventTaskRemoveMulti>
             break;
 2011454:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2011458:	d0a73417 	ldw	r2,-25392(gp)
 201145c:	10800c43 	ldbu	r2,49(r2)
 2011460:	10803fcc 	andi	r2,r2,255
 2011464:	10000326 	beq	r2,zero,2011474 <OSEventPendMulti+0x4f8>
 2011468:	108000a0 	cmpeqi	r2,r2,2
 201146c:	1000231e 	bne	r2,zero,20114fc <OSEventPendMulti+0x580>
 2011470:	00002a06 	br	201151c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2011474:	e0bff017 	ldw	r2,-64(fp)
 2011478:	10800003 	ldbu	r2,0(r2)
 201147c:	10803fcc 	andi	r2,r2,255
 2011480:	0080100e 	bge	zero,r2,20114c4 <OSEventPendMulti+0x548>
 2011484:	10c000d0 	cmplti	r3,r2,3
 2011488:	1800071e 	bne	r3,zero,20114a8 <OSEventPendMulti+0x52c>
 201148c:	108000e0 	cmpeqi	r2,r2,3
 2011490:	10000c26 	beq	r2,zero,20114c4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2011494:	e0bffe17 	ldw	r2,-8(fp)
 2011498:	10c00104 	addi	r3,r2,4
 201149c:	e0fffe15 	stw	r3,-8(fp)
 20114a0:	10000015 	stw	zero,0(r2)
                      break;
 20114a4:	00001206 	br	20114f0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20114a8:	e0bffe17 	ldw	r2,-8(fp)
 20114ac:	10c00104 	addi	r3,r2,4
 20114b0:	e0fffe15 	stw	r3,-8(fp)
 20114b4:	d0e73417 	ldw	r3,-25392(gp)
 20114b8:	18c00917 	ldw	r3,36(r3)
 20114bc:	10c00015 	stw	r3,0(r2)
                      break;
 20114c0:	00000b06 	br	20114f0 <OSEventPendMulti+0x574>
 20114c4:	e0bff317 	ldw	r2,-52(fp)
 20114c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20114cc:	e0bff817 	ldw	r2,-32(fp)
 20114d0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20114d4:	e0bffd17 	ldw	r2,-12(fp)
 20114d8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 20114dc:	e0800217 	ldw	r2,8(fp)
 20114e0:	00c00044 	movi	r3,1
 20114e4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 20114e8:	e0bff18b 	ldhu	r2,-58(fp)
 20114ec:	00002206 	br	2011578 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 20114f0:	e0800217 	ldw	r2,8(fp)
 20114f4:	10000005 	stb	zero,0(r2)
             break;
 20114f8:	00001006 	br	201153c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 20114fc:	e0bffe17 	ldw	r2,-8(fp)
 2011500:	10c00104 	addi	r3,r2,4
 2011504:	e0fffe15 	stw	r3,-8(fp)
 2011508:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 201150c:	e0800217 	ldw	r2,8(fp)
 2011510:	00c00384 	movi	r3,14
 2011514:	10c00005 	stb	r3,0(r2)
             break;
 2011518:	00000806 	br	201153c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 201151c:	e0bffe17 	ldw	r2,-8(fp)
 2011520:	10c00104 	addi	r3,r2,4
 2011524:	e0fffe15 	stw	r3,-8(fp)
 2011528:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 201152c:	e0800217 	ldw	r2,8(fp)
 2011530:	00c00284 	movi	r3,10
 2011534:	10c00005 	stb	r3,0(r2)
             break;
 2011538:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 201153c:	d0a73417 	ldw	r2,-25392(gp)
 2011540:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2011544:	d0a73417 	ldw	r2,-25392(gp)
 2011548:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 201154c:	d0a73417 	ldw	r2,-25392(gp)
 2011550:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2011554:	d0a73417 	ldw	r2,-25392(gp)
 2011558:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 201155c:	d0a73417 	ldw	r2,-25392(gp)
 2011560:	10000915 	stw	zero,36(r2)
 2011564:	e0bff317 	ldw	r2,-52(fp)
 2011568:	e0bffa15 	stw	r2,-24(fp)
 201156c:	e0bffa17 	ldw	r2,-24(fp)
 2011570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2011574:	e0bff18b 	ldhu	r2,-58(fp)
}
 2011578:	e037883a 	mov	sp,fp
 201157c:	dfc00117 	ldw	ra,4(sp)
 2011580:	df000017 	ldw	fp,0(sp)
 2011584:	dec00204 	addi	sp,sp,8
 2011588:	f800283a 	ret

0201158c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 201158c:	defffe04 	addi	sp,sp,-8
 2011590:	dfc00115 	stw	ra,4(sp)
 2011594:	df000015 	stw	fp,0(sp)
 2011598:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 201159c:	201acf40 	call	201acf4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20115a0:	20123080 	call	2012308 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20115a4:	20123500 	call	2012350 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20115a8:	20124bc0 	call	20124bc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20115ac:	20122280 	call	2012228 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20115b0:	201435c0 	call	201435c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20115b4:	20157240 	call	2015724 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20115b8:	20168580 	call	2016858 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20115bc:	20123bc0 	call	20123bc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20115c0:	201243c0 	call	201243c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20115c4:	201ad140 	call	201ad14 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20115c8:	2012d300 	call	2012d30 <OSDebugInit>
#endif
}
 20115cc:	0001883a 	nop
 20115d0:	e037883a 	mov	sp,fp
 20115d4:	dfc00117 	ldw	ra,4(sp)
 20115d8:	df000017 	ldw	fp,0(sp)
 20115dc:	dec00204 	addi	sp,sp,8
 20115e0:	f800283a 	ret

020115e4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 20115e4:	deffff04 	addi	sp,sp,-4
 20115e8:	df000015 	stw	fp,0(sp)
 20115ec:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 20115f0:	d0a72543 	ldbu	r2,-25451(gp)
 20115f4:	10803fcc 	andi	r2,r2,255
 20115f8:	10800058 	cmpnei	r2,r2,1
 20115fc:	1000071e 	bne	r2,zero,201161c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2011600:	d0a73303 	ldbu	r2,-25396(gp)
 2011604:	10803fcc 	andi	r2,r2,255
 2011608:	10803fe0 	cmpeqi	r2,r2,255
 201160c:	1000031e 	bne	r2,zero,201161c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2011610:	d0a73303 	ldbu	r2,-25396(gp)
 2011614:	10800044 	addi	r2,r2,1
 2011618:	d0a73305 	stb	r2,-25396(gp)
        }
    }
}
 201161c:	0001883a 	nop
 2011620:	e037883a 	mov	sp,fp
 2011624:	df000017 	ldw	fp,0(sp)
 2011628:	dec00104 	addi	sp,sp,4
 201162c:	f800283a 	ret

02011630 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2011630:	defffb04 	addi	sp,sp,-20
 2011634:	dfc00415 	stw	ra,16(sp)
 2011638:	df000315 	stw	fp,12(sp)
 201163c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2011640:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2011644:	d0a72543 	ldbu	r2,-25451(gp)
 2011648:	10803fcc 	andi	r2,r2,255
 201164c:	10800058 	cmpnei	r2,r2,1
 2011650:	10002f1e 	bne	r2,zero,2011710 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011654:	0005303a 	rdctl	r2,status
 2011658:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201165c:	e0ffff17 	ldw	r3,-4(fp)
 2011660:	00bfff84 	movi	r2,-2
 2011664:	1884703a 	and	r2,r3,r2
 2011668:	1001703a 	wrctl	status,r2
  
  return context;
 201166c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2011670:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2011674:	d0a73303 	ldbu	r2,-25396(gp)
 2011678:	10803fcc 	andi	r2,r2,255
 201167c:	10000326 	beq	r2,zero,201168c <OSIntExit+0x5c>
            OSIntNesting--;
 2011680:	d0a73303 	ldbu	r2,-25396(gp)
 2011684:	10bfffc4 	addi	r2,r2,-1
 2011688:	d0a73305 	stb	r2,-25396(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 201168c:	d0a73303 	ldbu	r2,-25396(gp)
 2011690:	10803fcc 	andi	r2,r2,255
 2011694:	10001a1e 	bne	r2,zero,2011700 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2011698:	d0a72503 	ldbu	r2,-25452(gp)
 201169c:	10803fcc 	andi	r2,r2,255
 20116a0:	1000171e 	bne	r2,zero,2011700 <OSIntExit+0xd0>
                OS_SchedNew();
 20116a4:	201272c0 	call	201272c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20116a8:	d0e72703 	ldbu	r3,-25444(gp)
 20116ac:	d0a72743 	ldbu	r2,-25443(gp)
 20116b0:	18c03fcc 	andi	r3,r3,255
 20116b4:	10803fcc 	andi	r2,r2,255
 20116b8:	18801126 	beq	r3,r2,2011700 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20116bc:	d0a72703 	ldbu	r2,-25444(gp)
 20116c0:	10c03fcc 	andi	r3,r2,255
 20116c4:	008080f4 	movhi	r2,515
 20116c8:	10a0c104 	addi	r2,r2,-31996
 20116cc:	18c7883a 	add	r3,r3,r3
 20116d0:	18c7883a 	add	r3,r3,r3
 20116d4:	10c5883a 	add	r2,r2,r3
 20116d8:	10800017 	ldw	r2,0(r2)
 20116dc:	d0a72f15 	stw	r2,-25412(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 20116e0:	d0a72f17 	ldw	r2,-25412(gp)
 20116e4:	10c00e17 	ldw	r3,56(r2)
 20116e8:	18c00044 	addi	r3,r3,1
 20116ec:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 20116f0:	d0a72a17 	ldw	r2,-25432(gp)
 20116f4:	10800044 	addi	r2,r2,1
 20116f8:	d0a72a15 	stw	r2,-25432(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 20116fc:	201aa200 	call	201aa20 <OSCtxSw>
 2011700:	e0bffd17 	ldw	r2,-12(fp)
 2011704:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011708:	e0bffe17 	ldw	r2,-8(fp)
 201170c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2011710:	0001883a 	nop
 2011714:	e037883a 	mov	sp,fp
 2011718:	dfc00117 	ldw	ra,4(sp)
 201171c:	df000017 	ldw	fp,0(sp)
 2011720:	dec00204 	addi	sp,sp,8
 2011724:	f800283a 	ret

02011728 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2011728:	defffc04 	addi	sp,sp,-16
 201172c:	df000315 	stw	fp,12(sp)
 2011730:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011734:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2011738:	d0a72543 	ldbu	r2,-25451(gp)
 201173c:	10803fcc 	andi	r2,r2,255
 2011740:	10800058 	cmpnei	r2,r2,1
 2011744:	1000161e 	bne	r2,zero,20117a0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011748:	0005303a 	rdctl	r2,status
 201174c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011750:	e0ffff17 	ldw	r3,-4(fp)
 2011754:	00bfff84 	movi	r2,-2
 2011758:	1884703a 	and	r2,r3,r2
 201175c:	1001703a 	wrctl	status,r2
  
  return context;
 2011760:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2011764:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2011768:	d0a73303 	ldbu	r2,-25396(gp)
 201176c:	10803fcc 	andi	r2,r2,255
 2011770:	1000071e 	bne	r2,zero,2011790 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2011774:	d0a72503 	ldbu	r2,-25452(gp)
 2011778:	10803fcc 	andi	r2,r2,255
 201177c:	10803fe0 	cmpeqi	r2,r2,255
 2011780:	1000031e 	bne	r2,zero,2011790 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2011784:	d0a72503 	ldbu	r2,-25452(gp)
 2011788:	10800044 	addi	r2,r2,1
 201178c:	d0a72505 	stb	r2,-25452(gp)
 2011790:	e0bffd17 	ldw	r2,-12(fp)
 2011794:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011798:	e0bffe17 	ldw	r2,-8(fp)
 201179c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20117a0:	0001883a 	nop
 20117a4:	e037883a 	mov	sp,fp
 20117a8:	df000017 	ldw	fp,0(sp)
 20117ac:	dec00104 	addi	sp,sp,4
 20117b0:	f800283a 	ret

020117b4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20117b4:	defff804 	addi	sp,sp,-32
 20117b8:	dfc00715 	stw	ra,28(sp)
 20117bc:	df000615 	stw	fp,24(sp)
 20117c0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20117c4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20117c8:	d0a72543 	ldbu	r2,-25451(gp)
 20117cc:	10803fcc 	andi	r2,r2,255
 20117d0:	10800058 	cmpnei	r2,r2,1
 20117d4:	1000281e 	bne	r2,zero,2011878 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20117d8:	0005303a 	rdctl	r2,status
 20117dc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20117e0:	e0ffff17 	ldw	r3,-4(fp)
 20117e4:	00bfff84 	movi	r2,-2
 20117e8:	1884703a 	and	r2,r3,r2
 20117ec:	1001703a 	wrctl	status,r2
  
  return context;
 20117f0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 20117f4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 20117f8:	d0a72503 	ldbu	r2,-25452(gp)
 20117fc:	10803fcc 	andi	r2,r2,255
 2011800:	10001926 	beq	r2,zero,2011868 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2011804:	d0a72503 	ldbu	r2,-25452(gp)
 2011808:	10bfffc4 	addi	r2,r2,-1
 201180c:	d0a72505 	stb	r2,-25452(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2011810:	d0a72503 	ldbu	r2,-25452(gp)
 2011814:	10803fcc 	andi	r2,r2,255
 2011818:	10000e1e 	bne	r2,zero,2011854 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 201181c:	d0a73303 	ldbu	r2,-25396(gp)
 2011820:	10803fcc 	andi	r2,r2,255
 2011824:	1000061e 	bne	r2,zero,2011840 <OSSchedUnlock+0x8c>
 2011828:	e0bffa17 	ldw	r2,-24(fp)
 201182c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011830:	e0bffb17 	ldw	r2,-20(fp)
 2011834:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2011838:	201265c0 	call	201265c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 201183c:	00000e06 	br	2011878 <OSSchedUnlock+0xc4>
 2011840:	e0bffa17 	ldw	r2,-24(fp)
 2011844:	e0bffc15 	stw	r2,-16(fp)
 2011848:	e0bffc17 	ldw	r2,-16(fp)
 201184c:	1001703a 	wrctl	status,r2
 2011850:	00000906 	br	2011878 <OSSchedUnlock+0xc4>
 2011854:	e0bffa17 	ldw	r2,-24(fp)
 2011858:	e0bffd15 	stw	r2,-12(fp)
 201185c:	e0bffd17 	ldw	r2,-12(fp)
 2011860:	1001703a 	wrctl	status,r2
 2011864:	00000406 	br	2011878 <OSSchedUnlock+0xc4>
 2011868:	e0bffa17 	ldw	r2,-24(fp)
 201186c:	e0bffe15 	stw	r2,-8(fp)
 2011870:	e0bffe17 	ldw	r2,-8(fp)
 2011874:	1001703a 	wrctl	status,r2
 2011878:	0001883a 	nop
 201187c:	e037883a 	mov	sp,fp
 2011880:	dfc00117 	ldw	ra,4(sp)
 2011884:	df000017 	ldw	fp,0(sp)
 2011888:	dec00204 	addi	sp,sp,8
 201188c:	f800283a 	ret

02011890 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2011890:	defffe04 	addi	sp,sp,-8
 2011894:	dfc00115 	stw	ra,4(sp)
 2011898:	df000015 	stw	fp,0(sp)
 201189c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20118a0:	d0a72543 	ldbu	r2,-25451(gp)
 20118a4:	10803fcc 	andi	r2,r2,255
 20118a8:	10000f1e 	bne	r2,zero,20118e8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20118ac:	201272c0 	call	201272c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20118b0:	d0a72703 	ldbu	r2,-25444(gp)
 20118b4:	d0a72745 	stb	r2,-25443(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20118b8:	d0a72703 	ldbu	r2,-25444(gp)
 20118bc:	10c03fcc 	andi	r3,r2,255
 20118c0:	008080f4 	movhi	r2,515
 20118c4:	10a0c104 	addi	r2,r2,-31996
 20118c8:	18c7883a 	add	r3,r3,r3
 20118cc:	18c7883a 	add	r3,r3,r3
 20118d0:	10c5883a 	add	r2,r2,r3
 20118d4:	10800017 	ldw	r2,0(r2)
 20118d8:	d0a72f15 	stw	r2,-25412(gp)
        OSTCBCur      = OSTCBHighRdy;
 20118dc:	d0a72f17 	ldw	r2,-25412(gp)
 20118e0:	d0a73415 	stw	r2,-25392(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 20118e4:	201aaac0 	call	201aaac <OSStartHighRdy>
    }
}
 20118e8:	0001883a 	nop
 20118ec:	e037883a 	mov	sp,fp
 20118f0:	dfc00117 	ldw	ra,4(sp)
 20118f4:	df000017 	ldw	fp,0(sp)
 20118f8:	dec00204 	addi	sp,sp,8
 20118fc:	f800283a 	ret

02011900 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2011900:	defff904 	addi	sp,sp,-28
 2011904:	dfc00615 	stw	ra,24(sp)
 2011908:	df000515 	stw	fp,20(sp)
 201190c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011910:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2011914:	01000084 	movi	r4,2
 2011918:	2018acc0 	call	2018acc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201191c:	0005303a 	rdctl	r2,status
 2011920:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011924:	e0fffc17 	ldw	r3,-16(fp)
 2011928:	00bfff84 	movi	r2,-2
 201192c:	1884703a 	and	r2,r3,r2
 2011930:	1001703a 	wrctl	status,r2
  
  return context;
 2011934:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2011938:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 201193c:	d0272615 	stw	zero,-25448(gp)
 2011940:	e0bffb17 	ldw	r2,-20(fp)
 2011944:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011948:	e0bffd17 	ldw	r2,-12(fp)
 201194c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2011950:	01001904 	movi	r4,100
 2011954:	2018acc0 	call	2018acc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011958:	0005303a 	rdctl	r2,status
 201195c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011960:	e0fffe17 	ldw	r3,-8(fp)
 2011964:	00bfff84 	movi	r2,-2
 2011968:	1884703a 	and	r2,r3,r2
 201196c:	1001703a 	wrctl	status,r2
  
  return context;
 2011970:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2011974:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2011978:	d0a72617 	ldw	r2,-25448(gp)
 201197c:	d0a72b15 	stw	r2,-25428(gp)
    OSStatRdy    = OS_TRUE;
 2011980:	00800044 	movi	r2,1
 2011984:	d0a73705 	stb	r2,-25380(gp)
 2011988:	e0bffb17 	ldw	r2,-20(fp)
 201198c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011990:	e0bfff17 	ldw	r2,-4(fp)
 2011994:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2011998:	0001883a 	nop
 201199c:	e037883a 	mov	sp,fp
 20119a0:	dfc00117 	ldw	ra,4(sp)
 20119a4:	df000017 	ldw	fp,0(sp)
 20119a8:	dec00204 	addi	sp,sp,8
 20119ac:	f800283a 	ret

020119b0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20119b0:	defff704 	addi	sp,sp,-36
 20119b4:	dfc00815 	stw	ra,32(sp)
 20119b8:	df000715 	stw	fp,28(sp)
 20119bc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20119c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 20119c4:	201acd40 	call	201acd4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20119c8:	0005303a 	rdctl	r2,status
 20119cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20119d0:	e0fffd17 	ldw	r3,-12(fp)
 20119d4:	00bfff84 	movi	r2,-2
 20119d8:	1884703a 	and	r2,r3,r2
 20119dc:	1001703a 	wrctl	status,r2
  
  return context;
 20119e0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 20119e4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 20119e8:	d0a73517 	ldw	r2,-25388(gp)
 20119ec:	10800044 	addi	r2,r2,1
 20119f0:	d0a73515 	stw	r2,-25388(gp)
 20119f4:	e0bffb17 	ldw	r2,-20(fp)
 20119f8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20119fc:	e0bfff17 	ldw	r2,-4(fp)
 2011a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2011a04:	d0a72543 	ldbu	r2,-25451(gp)
 2011a08:	10803fcc 	andi	r2,r2,255
 2011a0c:	10800058 	cmpnei	r2,r2,1
 2011a10:	10006a1e 	bne	r2,zero,2011bbc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2011a14:	d0a72903 	ldbu	r2,-25436(gp)
 2011a18:	10803fcc 	andi	r2,r2,255
 2011a1c:	10c00060 	cmpeqi	r3,r2,1
 2011a20:	1800061e 	bne	r3,zero,2011a3c <OSTimeTick+0x8c>
 2011a24:	10c000a0 	cmpeqi	r3,r2,2
 2011a28:	1800061e 	bne	r3,zero,2011a44 <OSTimeTick+0x94>
 2011a2c:	10000a1e 	bne	r2,zero,2011a58 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2011a30:	00800044 	movi	r2,1
 2011a34:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2011a38:	00000b06 	br	2011a68 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2011a3c:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2011a40:	00000906 	br	2011a68 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2011a44:	00800044 	movi	r2,1
 2011a48:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2011a4c:	00800044 	movi	r2,1
 2011a50:	d0a72905 	stb	r2,-25436(gp)
                 break;
 2011a54:	00000406 	br	2011a68 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2011a58:	00800044 	movi	r2,1
 2011a5c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2011a60:	d0272905 	stb	zero,-25436(gp)
                 break;
 2011a64:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2011a68:	e0bffa03 	ldbu	r2,-24(fp)
 2011a6c:	10005226 	beq	r2,zero,2011bb8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2011a70:	d0a72817 	ldw	r2,-25440(gp)
 2011a74:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2011a78:	00004906 	br	2011ba0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011a7c:	0005303a 	rdctl	r2,status
 2011a80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011a84:	e0fffc17 	ldw	r3,-16(fp)
 2011a88:	00bfff84 	movi	r2,-2
 2011a8c:	1884703a 	and	r2,r3,r2
 2011a90:	1001703a 	wrctl	status,r2
  
  return context;
 2011a94:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2011a98:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2011a9c:	e0bff917 	ldw	r2,-28(fp)
 2011aa0:	10800b8b 	ldhu	r2,46(r2)
 2011aa4:	10bfffcc 	andi	r2,r2,65535
 2011aa8:	10003626 	beq	r2,zero,2011b84 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2011aac:	e0bff917 	ldw	r2,-28(fp)
 2011ab0:	10800b8b 	ldhu	r2,46(r2)
 2011ab4:	10bfffc4 	addi	r2,r2,-1
 2011ab8:	1007883a 	mov	r3,r2
 2011abc:	e0bff917 	ldw	r2,-28(fp)
 2011ac0:	10c00b8d 	sth	r3,46(r2)
 2011ac4:	e0bff917 	ldw	r2,-28(fp)
 2011ac8:	10800b8b 	ldhu	r2,46(r2)
 2011acc:	10bfffcc 	andi	r2,r2,65535
 2011ad0:	10002c1e 	bne	r2,zero,2011b84 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2011ad4:	e0bff917 	ldw	r2,-28(fp)
 2011ad8:	10800c03 	ldbu	r2,48(r2)
 2011adc:	10803fcc 	andi	r2,r2,255
 2011ae0:	10800dcc 	andi	r2,r2,55
 2011ae4:	10000b26 	beq	r2,zero,2011b14 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2011ae8:	e0bff917 	ldw	r2,-28(fp)
 2011aec:	10c00c03 	ldbu	r3,48(r2)
 2011af0:	00bff204 	movi	r2,-56
 2011af4:	1884703a 	and	r2,r3,r2
 2011af8:	1007883a 	mov	r3,r2
 2011afc:	e0bff917 	ldw	r2,-28(fp)
 2011b00:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2011b04:	e0bff917 	ldw	r2,-28(fp)
 2011b08:	00c00044 	movi	r3,1
 2011b0c:	10c00c45 	stb	r3,49(r2)
 2011b10:	00000206 	br	2011b1c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2011b14:	e0bff917 	ldw	r2,-28(fp)
 2011b18:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2011b1c:	e0bff917 	ldw	r2,-28(fp)
 2011b20:	10800c03 	ldbu	r2,48(r2)
 2011b24:	10803fcc 	andi	r2,r2,255
 2011b28:	1080020c 	andi	r2,r2,8
 2011b2c:	1000151e 	bne	r2,zero,2011b84 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2011b30:	e0bff917 	ldw	r2,-28(fp)
 2011b34:	10c00d83 	ldbu	r3,54(r2)
 2011b38:	d0a73103 	ldbu	r2,-25404(gp)
 2011b3c:	1884b03a 	or	r2,r3,r2
 2011b40:	d0a73105 	stb	r2,-25404(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2011b44:	e0bff917 	ldw	r2,-28(fp)
 2011b48:	10800d03 	ldbu	r2,52(r2)
 2011b4c:	10c03fcc 	andi	r3,r2,255
 2011b50:	e0bff917 	ldw	r2,-28(fp)
 2011b54:	10800d03 	ldbu	r2,52(r2)
 2011b58:	11003fcc 	andi	r4,r2,255
 2011b5c:	d0a73144 	addi	r2,gp,-25403
 2011b60:	2085883a 	add	r2,r4,r2
 2011b64:	11000003 	ldbu	r4,0(r2)
 2011b68:	e0bff917 	ldw	r2,-28(fp)
 2011b6c:	10800d43 	ldbu	r2,53(r2)
 2011b70:	2084b03a 	or	r2,r4,r2
 2011b74:	1009883a 	mov	r4,r2
 2011b78:	d0a73144 	addi	r2,gp,-25403
 2011b7c:	1885883a 	add	r2,r3,r2
 2011b80:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2011b84:	e0bff917 	ldw	r2,-28(fp)
 2011b88:	10800517 	ldw	r2,20(r2)
 2011b8c:	e0bff915 	stw	r2,-28(fp)
 2011b90:	e0bffb17 	ldw	r2,-20(fp)
 2011b94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011b98:	e0bffe17 	ldw	r2,-8(fp)
 2011b9c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2011ba0:	e0bff917 	ldw	r2,-28(fp)
 2011ba4:	10800c83 	ldbu	r2,50(r2)
 2011ba8:	10803fcc 	andi	r2,r2,255
 2011bac:	10800518 	cmpnei	r2,r2,20
 2011bb0:	103fb21e 	bne	r2,zero,2011a7c <OSTimeTick+0xcc>
 2011bb4:	00000106 	br	2011bbc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2011bb8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2011bbc:	e037883a 	mov	sp,fp
 2011bc0:	dfc00117 	ldw	ra,4(sp)
 2011bc4:	df000017 	ldw	fp,0(sp)
 2011bc8:	dec00204 	addi	sp,sp,8
 2011bcc:	f800283a 	ret

02011bd0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2011bd0:	deffff04 	addi	sp,sp,-4
 2011bd4:	df000015 	stw	fp,0(sp)
 2011bd8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2011bdc:	00804784 	movi	r2,286
}
 2011be0:	e037883a 	mov	sp,fp
 2011be4:	df000017 	ldw	fp,0(sp)
 2011be8:	dec00104 	addi	sp,sp,4
 2011bec:	f800283a 	ret

02011bf0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2011bf0:	deffff04 	addi	sp,sp,-4
 2011bf4:	df000015 	stw	fp,0(sp)
 2011bf8:	d839883a 	mov	fp,sp
}
 2011bfc:	0001883a 	nop
 2011c00:	e037883a 	mov	sp,fp
 2011c04:	df000017 	ldw	fp,0(sp)
 2011c08:	dec00104 	addi	sp,sp,4
 2011c0c:	f800283a 	ret

02011c10 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2011c10:	defff804 	addi	sp,sp,-32
 2011c14:	dfc00715 	stw	ra,28(sp)
 2011c18:	df000615 	stw	fp,24(sp)
 2011c1c:	df000604 	addi	fp,sp,24
 2011c20:	e13ffc15 	stw	r4,-16(fp)
 2011c24:	e17ffd15 	stw	r5,-12(fp)
 2011c28:	3007883a 	mov	r3,r6
 2011c2c:	3805883a 	mov	r2,r7
 2011c30:	e0fffe05 	stb	r3,-8(fp)
 2011c34:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2011c38:	e0bffc17 	ldw	r2,-16(fp)
 2011c3c:	10800283 	ldbu	r2,10(r2)
 2011c40:	10c03fcc 	andi	r3,r2,255
 2011c44:	008080b4 	movhi	r2,514
 2011c48:	10ae0b04 	addi	r2,r2,-18388
 2011c4c:	10c5883a 	add	r2,r2,r3
 2011c50:	10800003 	ldbu	r2,0(r2)
 2011c54:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2011c58:	e0bffa03 	ldbu	r2,-24(fp)
 2011c5c:	e0fffc17 	ldw	r3,-16(fp)
 2011c60:	1885883a 	add	r2,r3,r2
 2011c64:	108002c4 	addi	r2,r2,11
 2011c68:	10800003 	ldbu	r2,0(r2)
 2011c6c:	10c03fcc 	andi	r3,r2,255
 2011c70:	008080b4 	movhi	r2,514
 2011c74:	10ae0b04 	addi	r2,r2,-18388
 2011c78:	10c5883a 	add	r2,r2,r3
 2011c7c:	10800003 	ldbu	r2,0(r2)
 2011c80:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2011c84:	e0bffa03 	ldbu	r2,-24(fp)
 2011c88:	100490fa 	slli	r2,r2,3
 2011c8c:	1007883a 	mov	r3,r2
 2011c90:	e0bffa43 	ldbu	r2,-23(fp)
 2011c94:	1885883a 	add	r2,r3,r2
 2011c98:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2011c9c:	e0fffa83 	ldbu	r3,-22(fp)
 2011ca0:	008080f4 	movhi	r2,515
 2011ca4:	10a0c104 	addi	r2,r2,-31996
 2011ca8:	18c7883a 	add	r3,r3,r3
 2011cac:	18c7883a 	add	r3,r3,r3
 2011cb0:	10c5883a 	add	r2,r2,r3
 2011cb4:	10800017 	ldw	r2,0(r2)
 2011cb8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2011cbc:	e0bffb17 	ldw	r2,-20(fp)
 2011cc0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2011cc4:	e0bffb17 	ldw	r2,-20(fp)
 2011cc8:	e0fffd17 	ldw	r3,-12(fp)
 2011ccc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2011cd0:	e0bffb17 	ldw	r2,-20(fp)
 2011cd4:	10800c03 	ldbu	r2,48(r2)
 2011cd8:	1007883a 	mov	r3,r2
 2011cdc:	e0bffe03 	ldbu	r2,-8(fp)
 2011ce0:	0084303a 	nor	r2,zero,r2
 2011ce4:	1884703a 	and	r2,r3,r2
 2011ce8:	1007883a 	mov	r3,r2
 2011cec:	e0bffb17 	ldw	r2,-20(fp)
 2011cf0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2011cf4:	e0bffb17 	ldw	r2,-20(fp)
 2011cf8:	e0ffff03 	ldbu	r3,-4(fp)
 2011cfc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2011d00:	e0bffb17 	ldw	r2,-20(fp)
 2011d04:	10800c03 	ldbu	r2,48(r2)
 2011d08:	10803fcc 	andi	r2,r2,255
 2011d0c:	1080020c 	andi	r2,r2,8
 2011d10:	1000111e 	bne	r2,zero,2011d58 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2011d14:	e0bffb17 	ldw	r2,-20(fp)
 2011d18:	10c00d83 	ldbu	r3,54(r2)
 2011d1c:	d0a73103 	ldbu	r2,-25404(gp)
 2011d20:	1884b03a 	or	r2,r3,r2
 2011d24:	d0a73105 	stb	r2,-25404(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2011d28:	e0fffa03 	ldbu	r3,-24(fp)
 2011d2c:	e13ffa03 	ldbu	r4,-24(fp)
 2011d30:	d0a73144 	addi	r2,gp,-25403
 2011d34:	2085883a 	add	r2,r4,r2
 2011d38:	11000003 	ldbu	r4,0(r2)
 2011d3c:	e0bffb17 	ldw	r2,-20(fp)
 2011d40:	10800d43 	ldbu	r2,53(r2)
 2011d44:	2084b03a 	or	r2,r4,r2
 2011d48:	1009883a 	mov	r4,r2
 2011d4c:	d0a73144 	addi	r2,gp,-25403
 2011d50:	1885883a 	add	r2,r3,r2
 2011d54:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2011d58:	e17ffc17 	ldw	r5,-16(fp)
 2011d5c:	e13ffb17 	ldw	r4,-20(fp)
 2011d60:	20120080 	call	2012008 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2011d64:	e0bffb17 	ldw	r2,-20(fp)
 2011d68:	10800817 	ldw	r2,32(r2)
 2011d6c:	10000826 	beq	r2,zero,2011d90 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2011d70:	e0bffb17 	ldw	r2,-20(fp)
 2011d74:	10800817 	ldw	r2,32(r2)
 2011d78:	100b883a 	mov	r5,r2
 2011d7c:	e13ffb17 	ldw	r4,-20(fp)
 2011d80:	20120c00 	call	20120c0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2011d84:	e0bffb17 	ldw	r2,-20(fp)
 2011d88:	e0fffc17 	ldw	r3,-16(fp)
 2011d8c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2011d90:	e0bffa83 	ldbu	r2,-22(fp)
}
 2011d94:	e037883a 	mov	sp,fp
 2011d98:	dfc00117 	ldw	ra,4(sp)
 2011d9c:	df000017 	ldw	fp,0(sp)
 2011da0:	dec00204 	addi	sp,sp,8
 2011da4:	f800283a 	ret

02011da8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2011da8:	defffd04 	addi	sp,sp,-12
 2011dac:	df000215 	stw	fp,8(sp)
 2011db0:	df000204 	addi	fp,sp,8
 2011db4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2011db8:	d0a73417 	ldw	r2,-25392(gp)
 2011dbc:	e0ffff17 	ldw	r3,-4(fp)
 2011dc0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2011dc4:	d0a73417 	ldw	r2,-25392(gp)
 2011dc8:	10800d03 	ldbu	r2,52(r2)
 2011dcc:	10803fcc 	andi	r2,r2,255
 2011dd0:	d0e73417 	ldw	r3,-25392(gp)
 2011dd4:	18c00d03 	ldbu	r3,52(r3)
 2011dd8:	18c03fcc 	andi	r3,r3,255
 2011ddc:	e13fff17 	ldw	r4,-4(fp)
 2011de0:	20c7883a 	add	r3,r4,r3
 2011de4:	18c002c4 	addi	r3,r3,11
 2011de8:	19000003 	ldbu	r4,0(r3)
 2011dec:	d0e73417 	ldw	r3,-25392(gp)
 2011df0:	18c00d43 	ldbu	r3,53(r3)
 2011df4:	20c6b03a 	or	r3,r4,r3
 2011df8:	1809883a 	mov	r4,r3
 2011dfc:	e0ffff17 	ldw	r3,-4(fp)
 2011e00:	1885883a 	add	r2,r3,r2
 2011e04:	108002c4 	addi	r2,r2,11
 2011e08:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2011e0c:	e0bfff17 	ldw	r2,-4(fp)
 2011e10:	10c00283 	ldbu	r3,10(r2)
 2011e14:	d0a73417 	ldw	r2,-25392(gp)
 2011e18:	10800d83 	ldbu	r2,54(r2)
 2011e1c:	1884b03a 	or	r2,r3,r2
 2011e20:	1007883a 	mov	r3,r2
 2011e24:	e0bfff17 	ldw	r2,-4(fp)
 2011e28:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2011e2c:	d0a73417 	ldw	r2,-25392(gp)
 2011e30:	10800d03 	ldbu	r2,52(r2)
 2011e34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2011e38:	e0fffe03 	ldbu	r3,-8(fp)
 2011e3c:	e13ffe03 	ldbu	r4,-8(fp)
 2011e40:	d0a73144 	addi	r2,gp,-25403
 2011e44:	2085883a 	add	r2,r4,r2
 2011e48:	10800003 	ldbu	r2,0(r2)
 2011e4c:	1009883a 	mov	r4,r2
 2011e50:	d0a73417 	ldw	r2,-25392(gp)
 2011e54:	10800d43 	ldbu	r2,53(r2)
 2011e58:	0084303a 	nor	r2,zero,r2
 2011e5c:	2084703a 	and	r2,r4,r2
 2011e60:	1009883a 	mov	r4,r2
 2011e64:	d0a73144 	addi	r2,gp,-25403
 2011e68:	1885883a 	add	r2,r3,r2
 2011e6c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2011e70:	e0fffe03 	ldbu	r3,-8(fp)
 2011e74:	d0a73144 	addi	r2,gp,-25403
 2011e78:	1885883a 	add	r2,r3,r2
 2011e7c:	10800003 	ldbu	r2,0(r2)
 2011e80:	10803fcc 	andi	r2,r2,255
 2011e84:	1000071e 	bne	r2,zero,2011ea4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2011e88:	d0a73417 	ldw	r2,-25392(gp)
 2011e8c:	10800d83 	ldbu	r2,54(r2)
 2011e90:	0084303a 	nor	r2,zero,r2
 2011e94:	1007883a 	mov	r3,r2
 2011e98:	d0a73103 	ldbu	r2,-25404(gp)
 2011e9c:	1884703a 	and	r2,r3,r2
 2011ea0:	d0a73105 	stb	r2,-25404(gp)
    }
}
 2011ea4:	0001883a 	nop
 2011ea8:	e037883a 	mov	sp,fp
 2011eac:	df000017 	ldw	fp,0(sp)
 2011eb0:	dec00104 	addi	sp,sp,4
 2011eb4:	f800283a 	ret

02011eb8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2011eb8:	defffb04 	addi	sp,sp,-20
 2011ebc:	df000415 	stw	fp,16(sp)
 2011ec0:	df000404 	addi	fp,sp,16
 2011ec4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2011ec8:	d0a73417 	ldw	r2,-25392(gp)
 2011ecc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2011ed0:	d0a73417 	ldw	r2,-25392(gp)
 2011ed4:	e0ffff17 	ldw	r3,-4(fp)
 2011ed8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2011edc:	e0bfff17 	ldw	r2,-4(fp)
 2011ee0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2011ee4:	e0bffc17 	ldw	r2,-16(fp)
 2011ee8:	10800017 	ldw	r2,0(r2)
 2011eec:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2011ef0:	00002006 	br	2011f74 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2011ef4:	d0a73417 	ldw	r2,-25392(gp)
 2011ef8:	10800d03 	ldbu	r2,52(r2)
 2011efc:	10803fcc 	andi	r2,r2,255
 2011f00:	d0e73417 	ldw	r3,-25392(gp)
 2011f04:	18c00d03 	ldbu	r3,52(r3)
 2011f08:	18c03fcc 	andi	r3,r3,255
 2011f0c:	e13ffd17 	ldw	r4,-12(fp)
 2011f10:	20c7883a 	add	r3,r4,r3
 2011f14:	18c002c4 	addi	r3,r3,11
 2011f18:	19000003 	ldbu	r4,0(r3)
 2011f1c:	d0e73417 	ldw	r3,-25392(gp)
 2011f20:	18c00d43 	ldbu	r3,53(r3)
 2011f24:	20c6b03a 	or	r3,r4,r3
 2011f28:	1809883a 	mov	r4,r3
 2011f2c:	e0fffd17 	ldw	r3,-12(fp)
 2011f30:	1885883a 	add	r2,r3,r2
 2011f34:	108002c4 	addi	r2,r2,11
 2011f38:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2011f3c:	e0bffd17 	ldw	r2,-12(fp)
 2011f40:	10c00283 	ldbu	r3,10(r2)
 2011f44:	d0a73417 	ldw	r2,-25392(gp)
 2011f48:	10800d83 	ldbu	r2,54(r2)
 2011f4c:	1884b03a 	or	r2,r3,r2
 2011f50:	1007883a 	mov	r3,r2
 2011f54:	e0bffd17 	ldw	r2,-12(fp)
 2011f58:	10c00285 	stb	r3,10(r2)
        pevents++;
 2011f5c:	e0bffc17 	ldw	r2,-16(fp)
 2011f60:	10800104 	addi	r2,r2,4
 2011f64:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2011f68:	e0bffc17 	ldw	r2,-16(fp)
 2011f6c:	10800017 	ldw	r2,0(r2)
 2011f70:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2011f74:	e0bffd17 	ldw	r2,-12(fp)
 2011f78:	103fde1e 	bne	r2,zero,2011ef4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2011f7c:	d0a73417 	ldw	r2,-25392(gp)
 2011f80:	10800d03 	ldbu	r2,52(r2)
 2011f84:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2011f88:	e0fffe03 	ldbu	r3,-8(fp)
 2011f8c:	e13ffe03 	ldbu	r4,-8(fp)
 2011f90:	d0a73144 	addi	r2,gp,-25403
 2011f94:	2085883a 	add	r2,r4,r2
 2011f98:	10800003 	ldbu	r2,0(r2)
 2011f9c:	1009883a 	mov	r4,r2
 2011fa0:	d0a73417 	ldw	r2,-25392(gp)
 2011fa4:	10800d43 	ldbu	r2,53(r2)
 2011fa8:	0084303a 	nor	r2,zero,r2
 2011fac:	2084703a 	and	r2,r4,r2
 2011fb0:	1009883a 	mov	r4,r2
 2011fb4:	d0a73144 	addi	r2,gp,-25403
 2011fb8:	1885883a 	add	r2,r3,r2
 2011fbc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2011fc0:	e0fffe03 	ldbu	r3,-8(fp)
 2011fc4:	d0a73144 	addi	r2,gp,-25403
 2011fc8:	1885883a 	add	r2,r3,r2
 2011fcc:	10800003 	ldbu	r2,0(r2)
 2011fd0:	10803fcc 	andi	r2,r2,255
 2011fd4:	1000071e 	bne	r2,zero,2011ff4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2011fd8:	d0a73417 	ldw	r2,-25392(gp)
 2011fdc:	10800d83 	ldbu	r2,54(r2)
 2011fe0:	0084303a 	nor	r2,zero,r2
 2011fe4:	1007883a 	mov	r3,r2
 2011fe8:	d0a73103 	ldbu	r2,-25404(gp)
 2011fec:	1884703a 	and	r2,r3,r2
 2011ff0:	d0a73105 	stb	r2,-25404(gp)
    }
}
 2011ff4:	0001883a 	nop
 2011ff8:	e037883a 	mov	sp,fp
 2011ffc:	df000017 	ldw	fp,0(sp)
 2012000:	dec00104 	addi	sp,sp,4
 2012004:	f800283a 	ret

02012008 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2012008:	defffc04 	addi	sp,sp,-16
 201200c:	df000315 	stw	fp,12(sp)
 2012010:	df000304 	addi	fp,sp,12
 2012014:	e13ffe15 	stw	r4,-8(fp)
 2012018:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 201201c:	e0bffe17 	ldw	r2,-8(fp)
 2012020:	10800d03 	ldbu	r2,52(r2)
 2012024:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2012028:	e0bffd03 	ldbu	r2,-12(fp)
 201202c:	e0fffd03 	ldbu	r3,-12(fp)
 2012030:	e13fff17 	ldw	r4,-4(fp)
 2012034:	20c7883a 	add	r3,r4,r3
 2012038:	18c002c4 	addi	r3,r3,11
 201203c:	18c00003 	ldbu	r3,0(r3)
 2012040:	1809883a 	mov	r4,r3
 2012044:	e0fffe17 	ldw	r3,-8(fp)
 2012048:	18c00d43 	ldbu	r3,53(r3)
 201204c:	00c6303a 	nor	r3,zero,r3
 2012050:	20c6703a 	and	r3,r4,r3
 2012054:	1809883a 	mov	r4,r3
 2012058:	e0ffff17 	ldw	r3,-4(fp)
 201205c:	1885883a 	add	r2,r3,r2
 2012060:	108002c4 	addi	r2,r2,11
 2012064:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2012068:	e0bffd03 	ldbu	r2,-12(fp)
 201206c:	e0ffff17 	ldw	r3,-4(fp)
 2012070:	1885883a 	add	r2,r3,r2
 2012074:	108002c4 	addi	r2,r2,11
 2012078:	10800003 	ldbu	r2,0(r2)
 201207c:	10803fcc 	andi	r2,r2,255
 2012080:	10000a1e 	bne	r2,zero,20120ac <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2012084:	e0bfff17 	ldw	r2,-4(fp)
 2012088:	10800283 	ldbu	r2,10(r2)
 201208c:	1007883a 	mov	r3,r2
 2012090:	e0bffe17 	ldw	r2,-8(fp)
 2012094:	10800d83 	ldbu	r2,54(r2)
 2012098:	0084303a 	nor	r2,zero,r2
 201209c:	1884703a 	and	r2,r3,r2
 20120a0:	1007883a 	mov	r3,r2
 20120a4:	e0bfff17 	ldw	r2,-4(fp)
 20120a8:	10c00285 	stb	r3,10(r2)
    }
}
 20120ac:	0001883a 	nop
 20120b0:	e037883a 	mov	sp,fp
 20120b4:	df000017 	ldw	fp,0(sp)
 20120b8:	dec00104 	addi	sp,sp,4
 20120bc:	f800283a 	ret

020120c0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20120c0:	defffa04 	addi	sp,sp,-24
 20120c4:	df000515 	stw	fp,20(sp)
 20120c8:	df000504 	addi	fp,sp,20
 20120cc:	e13ffe15 	stw	r4,-8(fp)
 20120d0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 20120d4:	e0bffe17 	ldw	r2,-8(fp)
 20120d8:	10800d03 	ldbu	r2,52(r2)
 20120dc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 20120e0:	e0bffe17 	ldw	r2,-8(fp)
 20120e4:	10800d83 	ldbu	r2,54(r2)
 20120e8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 20120ec:	e0bffe17 	ldw	r2,-8(fp)
 20120f0:	10800d43 	ldbu	r2,53(r2)
 20120f4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 20120f8:	e0bfff17 	ldw	r2,-4(fp)
 20120fc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2012100:	e0bffb17 	ldw	r2,-20(fp)
 2012104:	10800017 	ldw	r2,0(r2)
 2012108:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 201210c:	00002506 	br	20121a4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2012110:	e0bffd03 	ldbu	r2,-12(fp)
 2012114:	e0fffd03 	ldbu	r3,-12(fp)
 2012118:	e13ffc17 	ldw	r4,-16(fp)
 201211c:	20c7883a 	add	r3,r4,r3
 2012120:	18c002c4 	addi	r3,r3,11
 2012124:	18c00003 	ldbu	r3,0(r3)
 2012128:	1809883a 	mov	r4,r3
 201212c:	e0fffd83 	ldbu	r3,-10(fp)
 2012130:	00c6303a 	nor	r3,zero,r3
 2012134:	20c6703a 	and	r3,r4,r3
 2012138:	1809883a 	mov	r4,r3
 201213c:	e0fffc17 	ldw	r3,-16(fp)
 2012140:	1885883a 	add	r2,r3,r2
 2012144:	108002c4 	addi	r2,r2,11
 2012148:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 201214c:	e0bffd03 	ldbu	r2,-12(fp)
 2012150:	e0fffc17 	ldw	r3,-16(fp)
 2012154:	1885883a 	add	r2,r3,r2
 2012158:	108002c4 	addi	r2,r2,11
 201215c:	10800003 	ldbu	r2,0(r2)
 2012160:	10803fcc 	andi	r2,r2,255
 2012164:	1000091e 	bne	r2,zero,201218c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2012168:	e0bffc17 	ldw	r2,-16(fp)
 201216c:	10800283 	ldbu	r2,10(r2)
 2012170:	1007883a 	mov	r3,r2
 2012174:	e0bffd43 	ldbu	r2,-11(fp)
 2012178:	0084303a 	nor	r2,zero,r2
 201217c:	1884703a 	and	r2,r3,r2
 2012180:	1007883a 	mov	r3,r2
 2012184:	e0bffc17 	ldw	r2,-16(fp)
 2012188:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 201218c:	e0bffb17 	ldw	r2,-20(fp)
 2012190:	10800104 	addi	r2,r2,4
 2012194:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 2012198:	e0bffb17 	ldw	r2,-20(fp)
 201219c:	10800017 	ldw	r2,0(r2)
 20121a0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20121a4:	e0bffc17 	ldw	r2,-16(fp)
 20121a8:	103fd91e 	bne	r2,zero,2012110 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20121ac:	0001883a 	nop
 20121b0:	e037883a 	mov	sp,fp
 20121b4:	df000017 	ldw	fp,0(sp)
 20121b8:	dec00104 	addi	sp,sp,4
 20121bc:	f800283a 	ret

020121c0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20121c0:	defffc04 	addi	sp,sp,-16
 20121c4:	df000315 	stw	fp,12(sp)
 20121c8:	df000304 	addi	fp,sp,12
 20121cc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 20121d0:	e0bfff17 	ldw	r2,-4(fp)
 20121d4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 20121d8:	e0bfff17 	ldw	r2,-4(fp)
 20121dc:	108002c4 	addi	r2,r2,11
 20121e0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20121e4:	e03ffe05 	stb	zero,-8(fp)
 20121e8:	00000706 	br	2012208 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 20121ec:	e0bffd17 	ldw	r2,-12(fp)
 20121f0:	10c00044 	addi	r3,r2,1
 20121f4:	e0fffd15 	stw	r3,-12(fp)
 20121f8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20121fc:	e0bffe03 	ldbu	r2,-8(fp)
 2012200:	10800044 	addi	r2,r2,1
 2012204:	e0bffe05 	stb	r2,-8(fp)
 2012208:	e0bffe03 	ldbu	r2,-8(fp)
 201220c:	108000f0 	cmpltui	r2,r2,3
 2012210:	103ff61e 	bne	r2,zero,20121ec <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2012214:	0001883a 	nop
 2012218:	e037883a 	mov	sp,fp
 201221c:	df000017 	ldw	fp,0(sp)
 2012220:	dec00104 	addi	sp,sp,4
 2012224:	f800283a 	ret

02012228 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2012228:	defffb04 	addi	sp,sp,-20
 201222c:	dfc00415 	stw	ra,16(sp)
 2012230:	df000315 	stw	fp,12(sp)
 2012234:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2012238:	0142d004 	movi	r5,2880
 201223c:	010080b4 	movhi	r4,514
 2012240:	211cad04 	addi	r4,r4,29364
 2012244:	20125a00 	call	20125a0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2012248:	008080b4 	movhi	r2,514
 201224c:	109cad04 	addi	r2,r2,29364
 2012250:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2012254:	008080b4 	movhi	r2,514
 2012258:	109cb904 	addi	r2,r2,29412
 201225c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2012260:	e03ffd0d 	sth	zero,-12(fp)
 2012264:	00001306 	br	20122b4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2012268:	e0bffe17 	ldw	r2,-8(fp)
 201226c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2012270:	e0bffe17 	ldw	r2,-8(fp)
 2012274:	e0ffff17 	ldw	r3,-4(fp)
 2012278:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 201227c:	e0bffe17 	ldw	r2,-8(fp)
 2012280:	00c00fc4 	movi	r3,63
 2012284:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2012288:	e0bffe17 	ldw	r2,-8(fp)
 201228c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2012290:	e0bffe17 	ldw	r2,-8(fp)
 2012294:	10800c04 	addi	r2,r2,48
 2012298:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 201229c:	e0bfff17 	ldw	r2,-4(fp)
 20122a0:	10800c04 	addi	r2,r2,48
 20122a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20122a8:	e0bffd0b 	ldhu	r2,-12(fp)
 20122ac:	10800044 	addi	r2,r2,1
 20122b0:	e0bffd0d 	sth	r2,-12(fp)
 20122b4:	e0bffd0b 	ldhu	r2,-12(fp)
 20122b8:	10800ef0 	cmpltui	r2,r2,59
 20122bc:	103fea1e 	bne	r2,zero,2012268 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20122c0:	e0bffe17 	ldw	r2,-8(fp)
 20122c4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20122c8:	e0bffe17 	ldw	r2,-8(fp)
 20122cc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 20122d0:	e0bffe17 	ldw	r2,-8(fp)
 20122d4:	00c00fc4 	movi	r3,63
 20122d8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 20122dc:	e0bffe17 	ldw	r2,-8(fp)
 20122e0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 20122e4:	008080b4 	movhi	r2,514
 20122e8:	109cad04 	addi	r2,r2,29364
 20122ec:	d0a73215 	stw	r2,-25400(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 20122f0:	0001883a 	nop
 20122f4:	e037883a 	mov	sp,fp
 20122f8:	dfc00117 	ldw	ra,4(sp)
 20122fc:	df000017 	ldw	fp,0(sp)
 2012300:	dec00204 	addi	sp,sp,8
 2012304:	f800283a 	ret

02012308 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2012308:	deffff04 	addi	sp,sp,-4
 201230c:	df000015 	stw	fp,0(sp)
 2012310:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2012314:	d0273515 	stw	zero,-25388(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2012318:	d0273305 	stb	zero,-25396(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 201231c:	d0272505 	stb	zero,-25452(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2012320:	d0272d45 	stb	zero,-25419(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2012324:	d0272545 	stb	zero,-25451(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2012328:	d0272a15 	stw	zero,-25432(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 201232c:	d0272615 	stw	zero,-25448(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2012330:	d0273815 	stw	zero,-25376(gp)
    OSIdleCtrMax  = 0L;
 2012334:	d0272b15 	stw	zero,-25428(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2012338:	d0273705 	stb	zero,-25380(gp)
#endif
}
 201233c:	0001883a 	nop
 2012340:	e037883a 	mov	sp,fp
 2012344:	df000017 	ldw	fp,0(sp)
 2012348:	dec00104 	addi	sp,sp,4
 201234c:	f800283a 	ret

02012350 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2012350:	defffd04 	addi	sp,sp,-12
 2012354:	df000215 	stw	fp,8(sp)
 2012358:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 201235c:	d0273105 	stb	zero,-25404(gp)
    prdytbl       = &OSRdyTbl[0];
 2012360:	d0a73144 	addi	r2,gp,-25403
 2012364:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2012368:	e03ffe05 	stb	zero,-8(fp)
 201236c:	00000706 	br	201238c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2012370:	e0bfff17 	ldw	r2,-4(fp)
 2012374:	10c00044 	addi	r3,r2,1
 2012378:	e0ffff15 	stw	r3,-4(fp)
 201237c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2012380:	e0bffe03 	ldbu	r2,-8(fp)
 2012384:	10800044 	addi	r2,r2,1
 2012388:	e0bffe05 	stb	r2,-8(fp)
 201238c:	e0bffe03 	ldbu	r2,-8(fp)
 2012390:	108000f0 	cmpltui	r2,r2,3
 2012394:	103ff61e 	bne	r2,zero,2012370 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2012398:	d0272745 	stb	zero,-25443(gp)
    OSPrioHighRdy = 0;
 201239c:	d0272705 	stb	zero,-25444(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20123a0:	d0272f15 	stw	zero,-25412(gp)
    OSTCBCur      = (OS_TCB *)0;
 20123a4:	d0273415 	stw	zero,-25392(gp)
}
 20123a8:	0001883a 	nop
 20123ac:	e037883a 	mov	sp,fp
 20123b0:	df000017 	ldw	fp,0(sp)
 20123b4:	dec00104 	addi	sp,sp,4
 20123b8:	f800283a 	ret

020123bc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20123bc:	defff804 	addi	sp,sp,-32
 20123c0:	dfc00715 	stw	ra,28(sp)
 20123c4:	df000615 	stw	fp,24(sp)
 20123c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 20123cc:	008000c4 	movi	r2,3
 20123d0:	d8800415 	stw	r2,16(sp)
 20123d4:	d8000315 	stw	zero,12(sp)
 20123d8:	00808004 	movi	r2,512
 20123dc:	d8800215 	stw	r2,8(sp)
 20123e0:	008080b4 	movhi	r2,514
 20123e4:	109aad04 	addi	r2,r2,27316
 20123e8:	d8800115 	stw	r2,4(sp)
 20123ec:	00bfffd4 	movui	r2,65535
 20123f0:	d8800015 	stw	r2,0(sp)
 20123f4:	01c00504 	movi	r7,20
 20123f8:	018080b4 	movhi	r6,514
 20123fc:	319cac04 	addi	r6,r6,29360
 2012400:	000b883a 	mov	r5,zero
 2012404:	01008074 	movhi	r4,513
 2012408:	210a1a04 	addi	r4,r4,10344
 201240c:	20179fc0 	call	20179fc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2012410:	e1bfff04 	addi	r6,fp,-4
 2012414:	014080b4 	movhi	r5,514
 2012418:	296e4b04 	addi	r5,r5,-18132
 201241c:	01000504 	movi	r4,20
 2012420:	201820c0 	call	201820c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2012424:	0001883a 	nop
 2012428:	e037883a 	mov	sp,fp
 201242c:	dfc00117 	ldw	ra,4(sp)
 2012430:	df000017 	ldw	fp,0(sp)
 2012434:	dec00204 	addi	sp,sp,8
 2012438:	f800283a 	ret

0201243c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 201243c:	defff804 	addi	sp,sp,-32
 2012440:	dfc00715 	stw	ra,28(sp)
 2012444:	df000615 	stw	fp,24(sp)
 2012448:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 201244c:	008000c4 	movi	r2,3
 2012450:	d8800415 	stw	r2,16(sp)
 2012454:	d8000315 	stw	zero,12(sp)
 2012458:	00808004 	movi	r2,512
 201245c:	d8800215 	stw	r2,8(sp)
 2012460:	008080b4 	movhi	r2,514
 2012464:	10983504 	addi	r2,r2,24788
 2012468:	d8800115 	stw	r2,4(sp)
 201246c:	00bfff94 	movui	r2,65534
 2012470:	d8800015 	stw	r2,0(sp)
 2012474:	01c004c4 	movi	r7,19
 2012478:	018080b4 	movhi	r6,514
 201247c:	319a3404 	addi	r6,r6,26832
 2012480:	000b883a 	mov	r5,zero
 2012484:	01008074 	movhi	r4,513
 2012488:	210a3104 	addi	r4,r4,10436
 201248c:	20179fc0 	call	20179fc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2012490:	e1bfff04 	addi	r6,fp,-4
 2012494:	014080b4 	movhi	r5,514
 2012498:	296e4f04 	addi	r5,r5,-18116
 201249c:	010004c4 	movi	r4,19
 20124a0:	201820c0 	call	201820c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20124a4:	0001883a 	nop
 20124a8:	e037883a 	mov	sp,fp
 20124ac:	dfc00117 	ldw	ra,4(sp)
 20124b0:	df000017 	ldw	fp,0(sp)
 20124b4:	dec00204 	addi	sp,sp,8
 20124b8:	f800283a 	ret

020124bc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20124bc:	defffb04 	addi	sp,sp,-20
 20124c0:	dfc00415 	stw	ra,16(sp)
 20124c4:	df000315 	stw	fp,12(sp)
 20124c8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20124cc:	01414404 	movi	r5,1296
 20124d0:	010080b4 	movhi	r4,514
 20124d4:	211f7d04 	addi	r4,r4,32244
 20124d8:	20125a00 	call	20125a0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 20124dc:	01401504 	movi	r5,84
 20124e0:	010080f4 	movhi	r4,515
 20124e4:	2120c104 	addi	r4,r4,-31996
 20124e8:	20125a00 	call	20125a0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 20124ec:	008080b4 	movhi	r2,514
 20124f0:	109f7d04 	addi	r2,r2,32244
 20124f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 20124f8:	008080b4 	movhi	r2,514
 20124fc:	109f9804 	addi	r2,r2,32352
 2012500:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2012504:	e03ffd05 	stb	zero,-12(fp)
 2012508:	00001106 	br	2012550 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 201250c:	e0bffe17 	ldw	r2,-8(fp)
 2012510:	e0ffff17 	ldw	r3,-4(fp)
 2012514:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2012518:	e0bffe17 	ldw	r2,-8(fp)
 201251c:	00c00fc4 	movi	r3,63
 2012520:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2012524:	e0bffe17 	ldw	r2,-8(fp)
 2012528:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 201252c:	e0bffe17 	ldw	r2,-8(fp)
 2012530:	10801b04 	addi	r2,r2,108
 2012534:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2012538:	e0bfff17 	ldw	r2,-4(fp)
 201253c:	10801b04 	addi	r2,r2,108
 2012540:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2012544:	e0bffd03 	ldbu	r2,-12(fp)
 2012548:	10800044 	addi	r2,r2,1
 201254c:	e0bffd05 	stb	r2,-12(fp)
 2012550:	e0bffd03 	ldbu	r2,-12(fp)
 2012554:	108002f0 	cmpltui	r2,r2,11
 2012558:	103fec1e 	bne	r2,zero,201250c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 201255c:	e0bffe17 	ldw	r2,-8(fp)
 2012560:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2012564:	e0bffe17 	ldw	r2,-8(fp)
 2012568:	00c00fc4 	movi	r3,63
 201256c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2012570:	e0bffe17 	ldw	r2,-8(fp)
 2012574:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2012578:	d0272815 	stw	zero,-25440(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 201257c:	008080b4 	movhi	r2,514
 2012580:	109f7d04 	addi	r2,r2,32244
 2012584:	d0a72c15 	stw	r2,-25424(gp)
}
 2012588:	0001883a 	nop
 201258c:	e037883a 	mov	sp,fp
 2012590:	dfc00117 	ldw	ra,4(sp)
 2012594:	df000017 	ldw	fp,0(sp)
 2012598:	dec00204 	addi	sp,sp,8
 201259c:	f800283a 	ret

020125a0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20125a0:	defffd04 	addi	sp,sp,-12
 20125a4:	df000215 	stw	fp,8(sp)
 20125a8:	df000204 	addi	fp,sp,8
 20125ac:	e13ffe15 	stw	r4,-8(fp)
 20125b0:	2805883a 	mov	r2,r5
 20125b4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20125b8:	00000706 	br	20125d8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20125bc:	e0bffe17 	ldw	r2,-8(fp)
 20125c0:	10c00044 	addi	r3,r2,1
 20125c4:	e0fffe15 	stw	r3,-8(fp)
 20125c8:	10000005 	stb	zero,0(r2)
        size--;
 20125cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20125d0:	10bfffc4 	addi	r2,r2,-1
 20125d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 20125d8:	e0bfff0b 	ldhu	r2,-4(fp)
 20125dc:	103ff71e 	bne	r2,zero,20125bc <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 20125e0:	0001883a 	nop
 20125e4:	e037883a 	mov	sp,fp
 20125e8:	df000017 	ldw	fp,0(sp)
 20125ec:	dec00104 	addi	sp,sp,4
 20125f0:	f800283a 	ret

020125f4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 20125f4:	defffc04 	addi	sp,sp,-16
 20125f8:	df000315 	stw	fp,12(sp)
 20125fc:	df000304 	addi	fp,sp,12
 2012600:	e13ffd15 	stw	r4,-12(fp)
 2012604:	e17ffe15 	stw	r5,-8(fp)
 2012608:	3005883a 	mov	r2,r6
 201260c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2012610:	00000b06 	br	2012640 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2012614:	e0bffd17 	ldw	r2,-12(fp)
 2012618:	10c00044 	addi	r3,r2,1
 201261c:	e0fffd15 	stw	r3,-12(fp)
 2012620:	e0fffe17 	ldw	r3,-8(fp)
 2012624:	19000044 	addi	r4,r3,1
 2012628:	e13ffe15 	stw	r4,-8(fp)
 201262c:	18c00003 	ldbu	r3,0(r3)
 2012630:	10c00005 	stb	r3,0(r2)
        size--;
 2012634:	e0bfff0b 	ldhu	r2,-4(fp)
 2012638:	10bfffc4 	addi	r2,r2,-1
 201263c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2012640:	e0bfff0b 	ldhu	r2,-4(fp)
 2012644:	103ff31e 	bne	r2,zero,2012614 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2012648:	0001883a 	nop
 201264c:	e037883a 	mov	sp,fp
 2012650:	df000017 	ldw	fp,0(sp)
 2012654:	dec00104 	addi	sp,sp,4
 2012658:	f800283a 	ret

0201265c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 201265c:	defffb04 	addi	sp,sp,-20
 2012660:	dfc00415 	stw	ra,16(sp)
 2012664:	df000315 	stw	fp,12(sp)
 2012668:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201266c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012670:	0005303a 	rdctl	r2,status
 2012674:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012678:	e0ffff17 	ldw	r3,-4(fp)
 201267c:	00bfff84 	movi	r2,-2
 2012680:	1884703a 	and	r2,r3,r2
 2012684:	1001703a 	wrctl	status,r2
  
  return context;
 2012688:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 201268c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2012690:	d0a73303 	ldbu	r2,-25396(gp)
 2012694:	10803fcc 	andi	r2,r2,255
 2012698:	10001a1e 	bne	r2,zero,2012704 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 201269c:	d0a72503 	ldbu	r2,-25452(gp)
 20126a0:	10803fcc 	andi	r2,r2,255
 20126a4:	1000171e 	bne	r2,zero,2012704 <OS_Sched+0xa8>
            OS_SchedNew();
 20126a8:	201272c0 	call	201272c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 20126ac:	d0e72703 	ldbu	r3,-25444(gp)
 20126b0:	d0a72743 	ldbu	r2,-25443(gp)
 20126b4:	18c03fcc 	andi	r3,r3,255
 20126b8:	10803fcc 	andi	r2,r2,255
 20126bc:	18801126 	beq	r3,r2,2012704 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 20126c0:	d0a72703 	ldbu	r2,-25444(gp)
 20126c4:	10c03fcc 	andi	r3,r2,255
 20126c8:	008080f4 	movhi	r2,515
 20126cc:	10a0c104 	addi	r2,r2,-31996
 20126d0:	18c7883a 	add	r3,r3,r3
 20126d4:	18c7883a 	add	r3,r3,r3
 20126d8:	10c5883a 	add	r2,r2,r3
 20126dc:	10800017 	ldw	r2,0(r2)
 20126e0:	d0a72f15 	stw	r2,-25412(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 20126e4:	d0a72f17 	ldw	r2,-25412(gp)
 20126e8:	10c00e17 	ldw	r3,56(r2)
 20126ec:	18c00044 	addi	r3,r3,1
 20126f0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 20126f4:	d0a72a17 	ldw	r2,-25432(gp)
 20126f8:	10800044 	addi	r2,r2,1
 20126fc:	d0a72a15 	stw	r2,-25432(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2012700:	201aa200 	call	201aa20 <OSCtxSw>
 2012704:	e0bffd17 	ldw	r2,-12(fp)
 2012708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201270c:	e0bffe17 	ldw	r2,-8(fp)
 2012710:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2012714:	0001883a 	nop
 2012718:	e037883a 	mov	sp,fp
 201271c:	dfc00117 	ldw	ra,4(sp)
 2012720:	df000017 	ldw	fp,0(sp)
 2012724:	dec00204 	addi	sp,sp,8
 2012728:	f800283a 	ret

0201272c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 201272c:	defffe04 	addi	sp,sp,-8
 2012730:	df000115 	stw	fp,4(sp)
 2012734:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2012738:	d0a73103 	ldbu	r2,-25404(gp)
 201273c:	10c03fcc 	andi	r3,r2,255
 2012740:	008080b4 	movhi	r2,514
 2012744:	10ae0b04 	addi	r2,r2,-18388
 2012748:	10c5883a 	add	r2,r2,r3
 201274c:	10800003 	ldbu	r2,0(r2)
 2012750:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2012754:	e0bfff03 	ldbu	r2,-4(fp)
 2012758:	100490fa 	slli	r2,r2,3
 201275c:	1009883a 	mov	r4,r2
 2012760:	e0ffff03 	ldbu	r3,-4(fp)
 2012764:	d0a73144 	addi	r2,gp,-25403
 2012768:	1885883a 	add	r2,r3,r2
 201276c:	10800003 	ldbu	r2,0(r2)
 2012770:	10c03fcc 	andi	r3,r2,255
 2012774:	008080b4 	movhi	r2,514
 2012778:	10ae0b04 	addi	r2,r2,-18388
 201277c:	10c5883a 	add	r2,r2,r3
 2012780:	10800003 	ldbu	r2,0(r2)
 2012784:	2085883a 	add	r2,r4,r2
 2012788:	d0a72705 	stb	r2,-25444(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 201278c:	0001883a 	nop
 2012790:	e037883a 	mov	sp,fp
 2012794:	df000017 	ldw	fp,0(sp)
 2012798:	dec00104 	addi	sp,sp,4
 201279c:	f800283a 	ret

020127a0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20127a0:	defffc04 	addi	sp,sp,-16
 20127a4:	df000315 	stw	fp,12(sp)
 20127a8:	df000304 	addi	fp,sp,12
 20127ac:	e13ffe15 	stw	r4,-8(fp)
 20127b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20127b4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20127b8:	00000b06 	br	20127e8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 20127bc:	e0bffe17 	ldw	r2,-8(fp)
 20127c0:	10c00044 	addi	r3,r2,1
 20127c4:	e0fffe15 	stw	r3,-8(fp)
 20127c8:	e0ffff17 	ldw	r3,-4(fp)
 20127cc:	19000044 	addi	r4,r3,1
 20127d0:	e13fff15 	stw	r4,-4(fp)
 20127d4:	18c00003 	ldbu	r3,0(r3)
 20127d8:	10c00005 	stb	r3,0(r2)
        len++;
 20127dc:	e0bffd03 	ldbu	r2,-12(fp)
 20127e0:	10800044 	addi	r2,r2,1
 20127e4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20127e8:	e0bfff17 	ldw	r2,-4(fp)
 20127ec:	10800003 	ldbu	r2,0(r2)
 20127f0:	10803fcc 	andi	r2,r2,255
 20127f4:	103ff11e 	bne	r2,zero,20127bc <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 20127f8:	e0bffe17 	ldw	r2,-8(fp)
 20127fc:	10000005 	stb	zero,0(r2)
    return (len);
 2012800:	e0bffd03 	ldbu	r2,-12(fp)
}
 2012804:	e037883a 	mov	sp,fp
 2012808:	df000017 	ldw	fp,0(sp)
 201280c:	dec00104 	addi	sp,sp,4
 2012810:	f800283a 	ret

02012814 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2012814:	defffd04 	addi	sp,sp,-12
 2012818:	df000215 	stw	fp,8(sp)
 201281c:	df000204 	addi	fp,sp,8
 2012820:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2012824:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2012828:	00000606 	br	2012844 <OS_StrLen+0x30>
        psrc++;
 201282c:	e0bfff17 	ldw	r2,-4(fp)
 2012830:	10800044 	addi	r2,r2,1
 2012834:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2012838:	e0bffe03 	ldbu	r2,-8(fp)
 201283c:	10800044 	addi	r2,r2,1
 2012840:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2012844:	e0bfff17 	ldw	r2,-4(fp)
 2012848:	10800003 	ldbu	r2,0(r2)
 201284c:	10803fcc 	andi	r2,r2,255
 2012850:	103ff61e 	bne	r2,zero,201282c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2012854:	e0bffe03 	ldbu	r2,-8(fp)
}
 2012858:	e037883a 	mov	sp,fp
 201285c:	df000017 	ldw	fp,0(sp)
 2012860:	dec00104 	addi	sp,sp,4
 2012864:	f800283a 	ret

02012868 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2012868:	defffa04 	addi	sp,sp,-24
 201286c:	dfc00515 	stw	ra,20(sp)
 2012870:	df000415 	stw	fp,16(sp)
 2012874:	df000404 	addi	fp,sp,16
 2012878:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201287c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012880:	0005303a 	rdctl	r2,status
 2012884:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012888:	e0fffd17 	ldw	r3,-12(fp)
 201288c:	00bfff84 	movi	r2,-2
 2012890:	1884703a 	and	r2,r3,r2
 2012894:	1001703a 	wrctl	status,r2
  
  return context;
 2012898:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 201289c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 20128a0:	d0a72617 	ldw	r2,-25448(gp)
 20128a4:	10800044 	addi	r2,r2,1
 20128a8:	d0a72615 	stw	r2,-25448(gp)
 20128ac:	e0bffc17 	ldw	r2,-16(fp)
 20128b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20128b4:	e0bffe17 	ldw	r2,-8(fp)
 20128b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20128bc:	201ad340 	call	201ad34 <OSTaskIdleHook>
    }
 20128c0:	003fef06 	br	2012880 <OS_TaskIdle+0x18>

020128c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20128c4:	defffa04 	addi	sp,sp,-24
 20128c8:	dfc00515 	stw	ra,20(sp)
 20128cc:	df000415 	stw	fp,16(sp)
 20128d0:	df000404 	addi	fp,sp,16
 20128d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20128d8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20128dc:	00000206 	br	20128e8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 20128e0:	01003204 	movi	r4,200
 20128e4:	2018acc0 	call	2018acc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20128e8:	d0a73703 	ldbu	r2,-25380(gp)
 20128ec:	10803fcc 	andi	r2,r2,255
 20128f0:	103ffb26 	beq	r2,zero,20128e0 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 20128f4:	d0a72b17 	ldw	r2,-25428(gp)
 20128f8:	01401904 	movi	r5,100
 20128fc:	1009883a 	mov	r4,r2
 2012900:	20045cc0 	call	20045cc <__udivsi3>
 2012904:	d0a72b15 	stw	r2,-25428(gp)
    if (OSIdleCtrMax == 0L) {
 2012908:	d0a72b17 	ldw	r2,-25428(gp)
 201290c:	1000031e 	bne	r2,zero,201291c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2012910:	d0272d05 	stb	zero,-25420(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2012914:	01003fc4 	movi	r4,255
 2012918:	20187540 	call	2018754 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201291c:	0005303a 	rdctl	r2,status
 2012920:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012924:	e0fffd17 	ldw	r3,-12(fp)
 2012928:	00bfff84 	movi	r2,-2
 201292c:	1884703a 	and	r2,r3,r2
 2012930:	1001703a 	wrctl	status,r2
  
  return context;
 2012934:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2012938:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 201293c:	d0a72617 	ldw	r2,-25448(gp)
 2012940:	d0a73815 	stw	r2,-25376(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2012944:	d0272615 	stw	zero,-25448(gp)
 2012948:	e0bffc17 	ldw	r2,-16(fp)
 201294c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012950:	e0bffe17 	ldw	r2,-8(fp)
 2012954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2012958:	d0a73817 	ldw	r2,-25376(gp)
 201295c:	d0e72b17 	ldw	r3,-25428(gp)
 2012960:	180b883a 	mov	r5,r3
 2012964:	1009883a 	mov	r4,r2
 2012968:	20045cc0 	call	20045cc <__udivsi3>
 201296c:	1007883a 	mov	r3,r2
 2012970:	00801904 	movi	r2,100
 2012974:	10c5c83a 	sub	r2,r2,r3
 2012978:	d0a72d05 	stb	r2,-25420(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 201297c:	201acb40 	call	201acb4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2012980:	20129900 	call	2012990 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2012984:	01001904 	movi	r4,100
 2012988:	2018acc0 	call	2018acc <OSTimeDly>
    }
 201298c:	003fe306 	br	201291c <OS_TaskStat+0x58>

02012990 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2012990:	defffa04 	addi	sp,sp,-24
 2012994:	dfc00515 	stw	ra,20(sp)
 2012998:	df000415 	stw	fp,16(sp)
 201299c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20129a0:	e03ffc05 	stb	zero,-16(fp)
 20129a4:	00002406 	br	2012a38 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20129a8:	e0bffc03 	ldbu	r2,-16(fp)
 20129ac:	e0fffe04 	addi	r3,fp,-8
 20129b0:	180b883a 	mov	r5,r3
 20129b4:	1009883a 	mov	r4,r2
 20129b8:	20185940 	call	2018594 <OSTaskStkChk>
 20129bc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20129c0:	e0bffc43 	ldbu	r2,-15(fp)
 20129c4:	1000191e 	bne	r2,zero,2012a2c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20129c8:	e0fffc03 	ldbu	r3,-16(fp)
 20129cc:	008080f4 	movhi	r2,515
 20129d0:	10a0c104 	addi	r2,r2,-31996
 20129d4:	18c7883a 	add	r3,r3,r3
 20129d8:	18c7883a 	add	r3,r3,r3
 20129dc:	10c5883a 	add	r2,r2,r3
 20129e0:	10800017 	ldw	r2,0(r2)
 20129e4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 20129e8:	e0bffd17 	ldw	r2,-12(fp)
 20129ec:	10000f26 	beq	r2,zero,2012a2c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 20129f0:	e0bffd17 	ldw	r2,-12(fp)
 20129f4:	10800060 	cmpeqi	r2,r2,1
 20129f8:	10000c1e 	bne	r2,zero,2012a2c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 20129fc:	e0bffd17 	ldw	r2,-12(fp)
 2012a00:	10c00217 	ldw	r3,8(r2)
 2012a04:	e0bffd17 	ldw	r2,-12(fp)
 2012a08:	10800317 	ldw	r2,12(r2)
 2012a0c:	1085883a 	add	r2,r2,r2
 2012a10:	1085883a 	add	r2,r2,r2
 2012a14:	1887883a 	add	r3,r3,r2
 2012a18:	e0bffd17 	ldw	r2,-12(fp)
 2012a1c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2012a20:	e0ffff17 	ldw	r3,-4(fp)
 2012a24:	e0bffd17 	ldw	r2,-12(fp)
 2012a28:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2012a2c:	e0bffc03 	ldbu	r2,-16(fp)
 2012a30:	10800044 	addi	r2,r2,1
 2012a34:	e0bffc05 	stb	r2,-16(fp)
 2012a38:	e0bffc03 	ldbu	r2,-16(fp)
 2012a3c:	10800570 	cmpltui	r2,r2,21
 2012a40:	103fd91e 	bne	r2,zero,20129a8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2012a44:	0001883a 	nop
 2012a48:	e037883a 	mov	sp,fp
 2012a4c:	dfc00117 	ldw	ra,4(sp)
 2012a50:	df000017 	ldw	fp,0(sp)
 2012a54:	dec00204 	addi	sp,sp,8
 2012a58:	f800283a 	ret

02012a5c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2012a5c:	defff204 	addi	sp,sp,-56
 2012a60:	dfc00d15 	stw	ra,52(sp)
 2012a64:	df000c15 	stw	fp,48(sp)
 2012a68:	df000c04 	addi	fp,sp,48
 2012a6c:	e17ffc15 	stw	r5,-16(fp)
 2012a70:	e1bffd15 	stw	r6,-12(fp)
 2012a74:	3807883a 	mov	r3,r7
 2012a78:	e0800417 	ldw	r2,16(fp)
 2012a7c:	e13ffb05 	stb	r4,-20(fp)
 2012a80:	e0fffe0d 	sth	r3,-8(fp)
 2012a84:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2012a88:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012a8c:	0005303a 	rdctl	r2,status
 2012a90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012a94:	e0fffa17 	ldw	r3,-24(fp)
 2012a98:	00bfff84 	movi	r2,-2
 2012a9c:	1884703a 	and	r2,r3,r2
 2012aa0:	1001703a 	wrctl	status,r2
  
  return context;
 2012aa4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2012aa8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2012aac:	d0a72c17 	ldw	r2,-25424(gp)
 2012ab0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2012ab4:	e0bff617 	ldw	r2,-40(fp)
 2012ab8:	10009326 	beq	r2,zero,2012d08 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2012abc:	e0bff617 	ldw	r2,-40(fp)
 2012ac0:	10800517 	ldw	r2,20(r2)
 2012ac4:	d0a72c15 	stw	r2,-25424(gp)
 2012ac8:	e0bff417 	ldw	r2,-48(fp)
 2012acc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ad0:	e0bff817 	ldw	r2,-32(fp)
 2012ad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2012ad8:	e0bff617 	ldw	r2,-40(fp)
 2012adc:	e0fffc17 	ldw	r3,-16(fp)
 2012ae0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2012ae4:	e0bff617 	ldw	r2,-40(fp)
 2012ae8:	e0fffb03 	ldbu	r3,-20(fp)
 2012aec:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2012af0:	e0bff617 	ldw	r2,-40(fp)
 2012af4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2012af8:	e0bff617 	ldw	r2,-40(fp)
 2012afc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2012b00:	e0bff617 	ldw	r2,-40(fp)
 2012b04:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2012b08:	e0bff617 	ldw	r2,-40(fp)
 2012b0c:	e0c00317 	ldw	r3,12(fp)
 2012b10:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2012b14:	e0bff617 	ldw	r2,-40(fp)
 2012b18:	e0c00217 	ldw	r3,8(fp)
 2012b1c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2012b20:	e0bff617 	ldw	r2,-40(fp)
 2012b24:	e0fffd17 	ldw	r3,-12(fp)
 2012b28:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2012b2c:	e0bff617 	ldw	r2,-40(fp)
 2012b30:	e0ffff0b 	ldhu	r3,-4(fp)
 2012b34:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2012b38:	e0bff617 	ldw	r2,-40(fp)
 2012b3c:	e0fffe0b 	ldhu	r3,-8(fp)
 2012b40:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2012b44:	e0bff617 	ldw	r2,-40(fp)
 2012b48:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2012b4c:	e0bffb03 	ldbu	r2,-20(fp)
 2012b50:	1004d0fa 	srli	r2,r2,3
 2012b54:	1007883a 	mov	r3,r2
 2012b58:	e0bff617 	ldw	r2,-40(fp)
 2012b5c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2012b60:	e0bffb03 	ldbu	r2,-20(fp)
 2012b64:	108001cc 	andi	r2,r2,7
 2012b68:	1007883a 	mov	r3,r2
 2012b6c:	e0bff617 	ldw	r2,-40(fp)
 2012b70:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2012b74:	e0bff617 	ldw	r2,-40(fp)
 2012b78:	10800d03 	ldbu	r2,52(r2)
 2012b7c:	10803fcc 	andi	r2,r2,255
 2012b80:	00c00044 	movi	r3,1
 2012b84:	1884983a 	sll	r2,r3,r2
 2012b88:	1007883a 	mov	r3,r2
 2012b8c:	e0bff617 	ldw	r2,-40(fp)
 2012b90:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2012b94:	e0bff617 	ldw	r2,-40(fp)
 2012b98:	10800cc3 	ldbu	r2,51(r2)
 2012b9c:	10803fcc 	andi	r2,r2,255
 2012ba0:	00c00044 	movi	r3,1
 2012ba4:	1884983a 	sll	r2,r3,r2
 2012ba8:	1007883a 	mov	r3,r2
 2012bac:	e0bff617 	ldw	r2,-40(fp)
 2012bb0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2012bb4:	e0bff617 	ldw	r2,-40(fp)
 2012bb8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2012bbc:	e0bff617 	ldw	r2,-40(fp)
 2012bc0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2012bc4:	e0bff617 	ldw	r2,-40(fp)
 2012bc8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2012bcc:	e0bff617 	ldw	r2,-40(fp)
 2012bd0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2012bd4:	e0bff617 	ldw	r2,-40(fp)
 2012bd8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2012bdc:	e0bff617 	ldw	r2,-40(fp)
 2012be0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2012be4:	e0bff617 	ldw	r2,-40(fp)
 2012be8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2012bec:	e0bff617 	ldw	r2,-40(fp)
 2012bf0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2012bf4:	e0bff617 	ldw	r2,-40(fp)
 2012bf8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2012bfc:	e0bff617 	ldw	r2,-40(fp)
 2012c00:	00c00fc4 	movi	r3,63
 2012c04:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2012c08:	e0bff617 	ldw	r2,-40(fp)
 2012c0c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2012c10:	e13ff617 	ldw	r4,-40(fp)
 2012c14:	201ad540 	call	201ad54 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2012c18:	e13ff617 	ldw	r4,-40(fp)
 2012c1c:	201ac4c0 	call	201ac4c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012c20:	0005303a 	rdctl	r2,status
 2012c24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012c28:	e0fff517 	ldw	r3,-44(fp)
 2012c2c:	00bfff84 	movi	r2,-2
 2012c30:	1884703a 	and	r2,r3,r2
 2012c34:	1001703a 	wrctl	status,r2
  
  return context;
 2012c38:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2012c3c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2012c40:	e0fffb03 	ldbu	r3,-20(fp)
 2012c44:	008080f4 	movhi	r2,515
 2012c48:	10a0c104 	addi	r2,r2,-31996
 2012c4c:	18c7883a 	add	r3,r3,r3
 2012c50:	18c7883a 	add	r3,r3,r3
 2012c54:	10c5883a 	add	r2,r2,r3
 2012c58:	e0fff617 	ldw	r3,-40(fp)
 2012c5c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2012c60:	d0e72817 	ldw	r3,-25440(gp)
 2012c64:	e0bff617 	ldw	r2,-40(fp)
 2012c68:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2012c6c:	e0bff617 	ldw	r2,-40(fp)
 2012c70:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2012c74:	d0a72817 	ldw	r2,-25440(gp)
 2012c78:	10000326 	beq	r2,zero,2012c88 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2012c7c:	d0a72817 	ldw	r2,-25440(gp)
 2012c80:	e0fff617 	ldw	r3,-40(fp)
 2012c84:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2012c88:	e0bff617 	ldw	r2,-40(fp)
 2012c8c:	d0a72815 	stw	r2,-25440(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2012c90:	e0bff617 	ldw	r2,-40(fp)
 2012c94:	10c00d83 	ldbu	r3,54(r2)
 2012c98:	d0a73103 	ldbu	r2,-25404(gp)
 2012c9c:	1884b03a 	or	r2,r3,r2
 2012ca0:	d0a73105 	stb	r2,-25404(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2012ca4:	e0bff617 	ldw	r2,-40(fp)
 2012ca8:	10800d03 	ldbu	r2,52(r2)
 2012cac:	10c03fcc 	andi	r3,r2,255
 2012cb0:	e0bff617 	ldw	r2,-40(fp)
 2012cb4:	10800d03 	ldbu	r2,52(r2)
 2012cb8:	11003fcc 	andi	r4,r2,255
 2012cbc:	d0a73144 	addi	r2,gp,-25403
 2012cc0:	2085883a 	add	r2,r4,r2
 2012cc4:	11000003 	ldbu	r4,0(r2)
 2012cc8:	e0bff617 	ldw	r2,-40(fp)
 2012ccc:	10800d43 	ldbu	r2,53(r2)
 2012cd0:	2084b03a 	or	r2,r4,r2
 2012cd4:	1009883a 	mov	r4,r2
 2012cd8:	d0a73144 	addi	r2,gp,-25403
 2012cdc:	1885883a 	add	r2,r3,r2
 2012ce0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2012ce4:	d0a72d43 	ldbu	r2,-25419(gp)
 2012ce8:	10800044 	addi	r2,r2,1
 2012cec:	d0a72d45 	stb	r2,-25419(gp)
 2012cf0:	e0bff417 	ldw	r2,-48(fp)
 2012cf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012cf8:	e0bff717 	ldw	r2,-36(fp)
 2012cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2012d00:	0005883a 	mov	r2,zero
 2012d04:	00000506 	br	2012d1c <OS_TCBInit+0x2c0>
 2012d08:	e0bff417 	ldw	r2,-48(fp)
 2012d0c:	e0bff915 	stw	r2,-28(fp)
 2012d10:	e0bff917 	ldw	r2,-28(fp)
 2012d14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2012d18:	00801084 	movi	r2,66
}
 2012d1c:	e037883a 	mov	sp,fp
 2012d20:	dfc00117 	ldw	ra,4(sp)
 2012d24:	df000017 	ldw	fp,0(sp)
 2012d28:	dec00204 	addi	sp,sp,8
 2012d2c:	f800283a 	ret

02012d30 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2012d30:	defffe04 	addi	sp,sp,-8
 2012d34:	df000115 	stw	fp,4(sp)
 2012d38:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2012d3c:	d0a01004 	addi	r2,gp,-32704
 2012d40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2012d44:	d0a01104 	addi	r2,gp,-32700
 2012d48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2012d4c:	d0a01284 	addi	r2,gp,-32694
 2012d50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2012d54:	d0a01304 	addi	r2,gp,-32692
 2012d58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2012d5c:	d0a01204 	addi	r2,gp,-32696
 2012d60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2012d64:	d0a01384 	addi	r2,gp,-32690
 2012d68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2012d6c:	d0a01404 	addi	r2,gp,-32688
 2012d70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2012d74:	d0a01484 	addi	r2,gp,-32686
 2012d78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2012d7c:	d0a01504 	addi	r2,gp,-32684
 2012d80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2012d84:	d0a01584 	addi	r2,gp,-32682
 2012d88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2012d8c:	d0a01604 	addi	r2,gp,-32680
 2012d90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2012d94:	d0a01684 	addi	r2,gp,-32678
 2012d98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2012d9c:	d0a01704 	addi	r2,gp,-32676
 2012da0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2012da4:	d0a01784 	addi	r2,gp,-32674
 2012da8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2012dac:	d0a01804 	addi	r2,gp,-32672
 2012db0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2012db4:	d0a01884 	addi	r2,gp,-32670
 2012db8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2012dbc:	d0a01904 	addi	r2,gp,-32668
 2012dc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2012dc4:	d0a01984 	addi	r2,gp,-32666
 2012dc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2012dcc:	d0a01a04 	addi	r2,gp,-32664
 2012dd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2012dd4:	d0a01a84 	addi	r2,gp,-32662
 2012dd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2012ddc:	d0a01b04 	addi	r2,gp,-32660
 2012de0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2012de4:	d0a01b84 	addi	r2,gp,-32658
 2012de8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2012dec:	d0a01c04 	addi	r2,gp,-32656
 2012df0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2012df4:	d0a01c84 	addi	r2,gp,-32654
 2012df8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2012dfc:	d0a01d04 	addi	r2,gp,-32652
 2012e00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2012e04:	d0a01d84 	addi	r2,gp,-32650
 2012e08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2012e0c:	d0a01e04 	addi	r2,gp,-32648
 2012e10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2012e14:	d0a01e84 	addi	r2,gp,-32646
 2012e18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2012e1c:	d0a01f04 	addi	r2,gp,-32644
 2012e20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2012e24:	d0a01f84 	addi	r2,gp,-32642
 2012e28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2012e2c:	d0a02004 	addi	r2,gp,-32640
 2012e30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2012e34:	d0a02084 	addi	r2,gp,-32638
 2012e38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2012e3c:	d0a02104 	addi	r2,gp,-32636
 2012e40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2012e44:	d0a02184 	addi	r2,gp,-32634
 2012e48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2012e4c:	d0a02204 	addi	r2,gp,-32632
 2012e50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2012e54:	d0a02284 	addi	r2,gp,-32630
 2012e58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2012e5c:	d0a02304 	addi	r2,gp,-32628
 2012e60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2012e64:	d0a02384 	addi	r2,gp,-32626
 2012e68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2012e6c:	d0a02404 	addi	r2,gp,-32624
 2012e70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2012e74:	d0a02484 	addi	r2,gp,-32622
 2012e78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2012e7c:	d0a02504 	addi	r2,gp,-32620
 2012e80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2012e84:	d0a02584 	addi	r2,gp,-32618
 2012e88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2012e8c:	d0a02604 	addi	r2,gp,-32616
 2012e90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2012e94:	d0a02684 	addi	r2,gp,-32614
 2012e98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2012e9c:	d0a02704 	addi	r2,gp,-32612
 2012ea0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2012ea4:	d0a02c04 	addi	r2,gp,-32592
 2012ea8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2012eac:	0001883a 	nop
 2012eb0:	e037883a 	mov	sp,fp
 2012eb4:	df000017 	ldw	fp,0(sp)
 2012eb8:	dec00104 	addi	sp,sp,4
 2012ebc:	f800283a 	ret

02012ec0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2012ec0:	defff204 	addi	sp,sp,-56
 2012ec4:	df000d15 	stw	fp,52(sp)
 2012ec8:	df000d04 	addi	fp,sp,52
 2012ecc:	e13ffc15 	stw	r4,-16(fp)
 2012ed0:	2807883a 	mov	r3,r5
 2012ed4:	3005883a 	mov	r2,r6
 2012ed8:	e1ffff15 	stw	r7,-4(fp)
 2012edc:	e0fffd0d 	sth	r3,-12(fp)
 2012ee0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2012ee4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2012ee8:	e0bfff17 	ldw	r2,-4(fp)
 2012eec:	1000021e 	bne	r2,zero,2012ef8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2012ef0:	0005883a 	mov	r2,zero
 2012ef4:	0000b006 	br	20131b8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2012ef8:	e0bffc17 	ldw	r2,-16(fp)
 2012efc:	1000051e 	bne	r2,zero,2012f14 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012f00:	e0bfff17 	ldw	r2,-4(fp)
 2012f04:	00c01b84 	movi	r3,110
 2012f08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012f0c:	0005883a 	mov	r2,zero
 2012f10:	0000a906 	br	20131b8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2012f14:	e0bffc17 	ldw	r2,-16(fp)
 2012f18:	10800003 	ldbu	r2,0(r2)
 2012f1c:	10803fcc 	andi	r2,r2,255
 2012f20:	10800160 	cmpeqi	r2,r2,5
 2012f24:	1000051e 	bne	r2,zero,2012f3c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2012f28:	e0bfff17 	ldw	r2,-4(fp)
 2012f2c:	00c00044 	movi	r3,1
 2012f30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012f34:	0005883a 	mov	r2,zero
 2012f38:	00009f06 	br	20131b8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2012f3c:	e0fffe03 	ldbu	r3,-8(fp)
 2012f40:	00bfe004 	movi	r2,-128
 2012f44:	1884703a 	and	r2,r3,r2
 2012f48:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2012f4c:	e0bff503 	ldbu	r2,-44(fp)
 2012f50:	10000626 	beq	r2,zero,2012f6c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2012f54:	e0bffe03 	ldbu	r2,-8(fp)
 2012f58:	10801fcc 	andi	r2,r2,127
 2012f5c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2012f60:	00800044 	movi	r2,1
 2012f64:	e0bff385 	stb	r2,-50(fp)
 2012f68:	00000106 	br	2012f70 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2012f6c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2012f70:	e0bfff17 	ldw	r2,-4(fp)
 2012f74:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012f78:	0005303a 	rdctl	r2,status
 2012f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012f80:	e0fffb17 	ldw	r3,-20(fp)
 2012f84:	00bfff84 	movi	r2,-2
 2012f88:	1884703a 	and	r2,r3,r2
 2012f8c:	1001703a 	wrctl	status,r2
  
  return context;
 2012f90:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2012f94:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2012f98:	e0bffe03 	ldbu	r2,-8(fp)
 2012f9c:	10c00060 	cmpeqi	r3,r2,1
 2012fa0:	18005f1e 	bne	r3,zero,2013120 <OSFlagAccept+0x260>
 2012fa4:	10c00088 	cmpgei	r3,r2,2
 2012fa8:	1800021e 	bne	r3,zero,2012fb4 <OSFlagAccept+0xf4>
 2012fac:	10003f26 	beq	r2,zero,20130ac <OSFlagAccept+0x1ec>
 2012fb0:	00007706 	br	2013190 <OSFlagAccept+0x2d0>
 2012fb4:	10c000a0 	cmpeqi	r3,r2,2
 2012fb8:	1800031e 	bne	r3,zero,2012fc8 <OSFlagAccept+0x108>
 2012fbc:	108000e0 	cmpeqi	r2,r2,3
 2012fc0:	10001e1e 	bne	r2,zero,201303c <OSFlagAccept+0x17c>
 2012fc4:	00007206 	br	2013190 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2012fc8:	e0bffc17 	ldw	r2,-16(fp)
 2012fcc:	10c0020b 	ldhu	r3,8(r2)
 2012fd0:	e0bffd0b 	ldhu	r2,-12(fp)
 2012fd4:	1884703a 	and	r2,r3,r2
 2012fd8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2012fdc:	e0fff30b 	ldhu	r3,-52(fp)
 2012fe0:	e0bffd0b 	ldhu	r2,-12(fp)
 2012fe4:	18800d1e 	bne	r3,r2,201301c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012fe8:	e0bff383 	ldbu	r2,-50(fp)
 2012fec:	10800058 	cmpnei	r2,r2,1
 2012ff0:	10000d1e 	bne	r2,zero,2013028 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2012ff4:	e0bffc17 	ldw	r2,-16(fp)
 2012ff8:	1080020b 	ldhu	r2,8(r2)
 2012ffc:	1007883a 	mov	r3,r2
 2013000:	e0bff30b 	ldhu	r2,-52(fp)
 2013004:	0084303a 	nor	r2,zero,r2
 2013008:	1884703a 	and	r2,r3,r2
 201300c:	1007883a 	mov	r3,r2
 2013010:	e0bffc17 	ldw	r2,-16(fp)
 2013014:	10c0020d 	sth	r3,8(r2)
 2013018:	00000306 	br	2013028 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201301c:	e0bfff17 	ldw	r2,-4(fp)
 2013020:	00c01c04 	movi	r3,112
 2013024:	10c00005 	stb	r3,0(r2)
 2013028:	e0bff417 	ldw	r2,-48(fp)
 201302c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013030:	e0bff617 	ldw	r2,-40(fp)
 2013034:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2013038:	00005e06 	br	20131b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 201303c:	e0bffc17 	ldw	r2,-16(fp)
 2013040:	10c0020b 	ldhu	r3,8(r2)
 2013044:	e0bffd0b 	ldhu	r2,-12(fp)
 2013048:	1884703a 	and	r2,r3,r2
 201304c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2013050:	e0bff30b 	ldhu	r2,-52(fp)
 2013054:	10000d26 	beq	r2,zero,201308c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2013058:	e0bff383 	ldbu	r2,-50(fp)
 201305c:	10800058 	cmpnei	r2,r2,1
 2013060:	10000d1e 	bne	r2,zero,2013098 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2013064:	e0bffc17 	ldw	r2,-16(fp)
 2013068:	1080020b 	ldhu	r2,8(r2)
 201306c:	1007883a 	mov	r3,r2
 2013070:	e0bff30b 	ldhu	r2,-52(fp)
 2013074:	0084303a 	nor	r2,zero,r2
 2013078:	1884703a 	and	r2,r3,r2
 201307c:	1007883a 	mov	r3,r2
 2013080:	e0bffc17 	ldw	r2,-16(fp)
 2013084:	10c0020d 	sth	r3,8(r2)
 2013088:	00000306 	br	2013098 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201308c:	e0bfff17 	ldw	r2,-4(fp)
 2013090:	00c01c04 	movi	r3,112
 2013094:	10c00005 	stb	r3,0(r2)
 2013098:	e0bff417 	ldw	r2,-48(fp)
 201309c:	e0bff715 	stw	r2,-36(fp)
 20130a0:	e0bff717 	ldw	r2,-36(fp)
 20130a4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20130a8:	00004206 	br	20131b4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20130ac:	e0bffc17 	ldw	r2,-16(fp)
 20130b0:	1080020b 	ldhu	r2,8(r2)
 20130b4:	0084303a 	nor	r2,zero,r2
 20130b8:	1007883a 	mov	r3,r2
 20130bc:	e0bffd0b 	ldhu	r2,-12(fp)
 20130c0:	1884703a 	and	r2,r3,r2
 20130c4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20130c8:	e0fff30b 	ldhu	r3,-52(fp)
 20130cc:	e0bffd0b 	ldhu	r2,-12(fp)
 20130d0:	18800b1e 	bne	r3,r2,2013100 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20130d4:	e0bff383 	ldbu	r2,-50(fp)
 20130d8:	10800058 	cmpnei	r2,r2,1
 20130dc:	10000b1e 	bne	r2,zero,201310c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20130e0:	e0bffc17 	ldw	r2,-16(fp)
 20130e4:	10c0020b 	ldhu	r3,8(r2)
 20130e8:	e0bff30b 	ldhu	r2,-52(fp)
 20130ec:	1884b03a 	or	r2,r3,r2
 20130f0:	1007883a 	mov	r3,r2
 20130f4:	e0bffc17 	ldw	r2,-16(fp)
 20130f8:	10c0020d 	sth	r3,8(r2)
 20130fc:	00000306 	br	201310c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2013100:	e0bfff17 	ldw	r2,-4(fp)
 2013104:	00c01c04 	movi	r3,112
 2013108:	10c00005 	stb	r3,0(r2)
 201310c:	e0bff417 	ldw	r2,-48(fp)
 2013110:	e0bff815 	stw	r2,-32(fp)
 2013114:	e0bff817 	ldw	r2,-32(fp)
 2013118:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201311c:	00002506 	br	20131b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2013120:	e0bffc17 	ldw	r2,-16(fp)
 2013124:	1080020b 	ldhu	r2,8(r2)
 2013128:	0084303a 	nor	r2,zero,r2
 201312c:	1007883a 	mov	r3,r2
 2013130:	e0bffd0b 	ldhu	r2,-12(fp)
 2013134:	1884703a 	and	r2,r3,r2
 2013138:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201313c:	e0bff30b 	ldhu	r2,-52(fp)
 2013140:	10000b26 	beq	r2,zero,2013170 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2013144:	e0bff383 	ldbu	r2,-50(fp)
 2013148:	10800058 	cmpnei	r2,r2,1
 201314c:	10000b1e 	bne	r2,zero,201317c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2013150:	e0bffc17 	ldw	r2,-16(fp)
 2013154:	10c0020b 	ldhu	r3,8(r2)
 2013158:	e0bff30b 	ldhu	r2,-52(fp)
 201315c:	1884b03a 	or	r2,r3,r2
 2013160:	1007883a 	mov	r3,r2
 2013164:	e0bffc17 	ldw	r2,-16(fp)
 2013168:	10c0020d 	sth	r3,8(r2)
 201316c:	00000306 	br	201317c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2013170:	e0bfff17 	ldw	r2,-4(fp)
 2013174:	00c01c04 	movi	r3,112
 2013178:	10c00005 	stb	r3,0(r2)
 201317c:	e0bff417 	ldw	r2,-48(fp)
 2013180:	e0bff915 	stw	r2,-28(fp)
 2013184:	e0bff917 	ldw	r2,-28(fp)
 2013188:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201318c:	00000906 	br	20131b4 <OSFlagAccept+0x2f4>
 2013190:	e0bff417 	ldw	r2,-48(fp)
 2013194:	e0bffa15 	stw	r2,-24(fp)
 2013198:	e0bffa17 	ldw	r2,-24(fp)
 201319c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20131a0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20131a4:	e0bfff17 	ldw	r2,-4(fp)
 20131a8:	00c01bc4 	movi	r3,111
 20131ac:	10c00005 	stb	r3,0(r2)
             break;
 20131b0:	0001883a 	nop
    }
    return (flags_rdy);
 20131b4:	e0bff30b 	ldhu	r2,-52(fp)
}
 20131b8:	e037883a 	mov	sp,fp
 20131bc:	df000017 	ldw	fp,0(sp)
 20131c0:	dec00104 	addi	sp,sp,4
 20131c4:	f800283a 	ret

020131c8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20131c8:	defff804 	addi	sp,sp,-32
 20131cc:	df000715 	stw	fp,28(sp)
 20131d0:	df000704 	addi	fp,sp,28
 20131d4:	2005883a 	mov	r2,r4
 20131d8:	e17fff15 	stw	r5,-4(fp)
 20131dc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 20131e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 20131e4:	e0bfff17 	ldw	r2,-4(fp)
 20131e8:	1000021e 	bne	r2,zero,20131f4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 20131ec:	0005883a 	mov	r2,zero
 20131f0:	00003306 	br	20132c0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 20131f4:	d0a73303 	ldbu	r2,-25396(gp)
 20131f8:	10803fcc 	andi	r2,r2,255
 20131fc:	10000526 	beq	r2,zero,2013214 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2013200:	e0bfff17 	ldw	r2,-4(fp)
 2013204:	00c00404 	movi	r3,16
 2013208:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 201320c:	0005883a 	mov	r2,zero
 2013210:	00002b06 	br	20132c0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013214:	0005303a 	rdctl	r2,status
 2013218:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201321c:	e0fffd17 	ldw	r3,-12(fp)
 2013220:	00bfff84 	movi	r2,-2
 2013224:	1884703a 	and	r2,r3,r2
 2013228:	1001703a 	wrctl	status,r2
  
  return context;
 201322c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013230:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2013234:	d0a73617 	ldw	r2,-25384(gp)
 2013238:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 201323c:	e0bffb17 	ldw	r2,-20(fp)
 2013240:	10001726 	beq	r2,zero,20132a0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2013244:	d0a73617 	ldw	r2,-25384(gp)
 2013248:	10800117 	ldw	r2,4(r2)
 201324c:	d0a73615 	stw	r2,-25384(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2013250:	e0bffb17 	ldw	r2,-20(fp)
 2013254:	00c00144 	movi	r3,5
 2013258:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 201325c:	e0bffb17 	ldw	r2,-20(fp)
 2013260:	e0fffe0b 	ldhu	r3,-8(fp)
 2013264:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2013268:	e0bffb17 	ldw	r2,-20(fp)
 201326c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2013270:	e0bffb17 	ldw	r2,-20(fp)
 2013274:	00c00fc4 	movi	r3,63
 2013278:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201327c:	e0bffb17 	ldw	r2,-20(fp)
 2013280:	100002c5 	stb	zero,11(r2)
 2013284:	e0bff917 	ldw	r2,-28(fp)
 2013288:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201328c:	e0bffa17 	ldw	r2,-24(fp)
 2013290:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2013294:	e0bfff17 	ldw	r2,-4(fp)
 2013298:	10000005 	stb	zero,0(r2)
 201329c:	00000706 	br	20132bc <OSFlagCreate+0xf4>
 20132a0:	e0bff917 	ldw	r2,-28(fp)
 20132a4:	e0bffc15 	stw	r2,-16(fp)
 20132a8:	e0bffc17 	ldw	r2,-16(fp)
 20132ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20132b0:	e0bfff17 	ldw	r2,-4(fp)
 20132b4:	00c01c84 	movi	r3,114
 20132b8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20132bc:	e0bffb17 	ldw	r2,-20(fp)
}
 20132c0:	e037883a 	mov	sp,fp
 20132c4:	df000017 	ldw	fp,0(sp)
 20132c8:	dec00104 	addi	sp,sp,4
 20132cc:	f800283a 	ret

020132d0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 20132d0:	defff204 	addi	sp,sp,-56
 20132d4:	dfc00d15 	stw	ra,52(sp)
 20132d8:	df000c15 	stw	fp,48(sp)
 20132dc:	df000c04 	addi	fp,sp,48
 20132e0:	e13ffd15 	stw	r4,-12(fp)
 20132e4:	2805883a 	mov	r2,r5
 20132e8:	e1bfff15 	stw	r6,-4(fp)
 20132ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20132f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20132f4:	e0bfff17 	ldw	r2,-4(fp)
 20132f8:	1000021e 	bne	r2,zero,2013304 <OSFlagDel+0x34>
        return (pgrp);
 20132fc:	e0bffd17 	ldw	r2,-12(fp)
 2013300:	00008006 	br	2013504 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2013304:	e0bffd17 	ldw	r2,-12(fp)
 2013308:	1000051e 	bne	r2,zero,2013320 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201330c:	e0bfff17 	ldw	r2,-4(fp)
 2013310:	00c01b84 	movi	r3,110
 2013314:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2013318:	e0bffd17 	ldw	r2,-12(fp)
 201331c:	00007906 	br	2013504 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2013320:	d0a73303 	ldbu	r2,-25396(gp)
 2013324:	10803fcc 	andi	r2,r2,255
 2013328:	10000526 	beq	r2,zero,2013340 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201332c:	e0bfff17 	ldw	r2,-4(fp)
 2013330:	00c003c4 	movi	r3,15
 2013334:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2013338:	e0bffd17 	ldw	r2,-12(fp)
 201333c:	00007106 	br	2013504 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2013340:	e0bffd17 	ldw	r2,-12(fp)
 2013344:	10800003 	ldbu	r2,0(r2)
 2013348:	10803fcc 	andi	r2,r2,255
 201334c:	10800160 	cmpeqi	r2,r2,5
 2013350:	1000051e 	bne	r2,zero,2013368 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2013354:	e0bfff17 	ldw	r2,-4(fp)
 2013358:	00c00044 	movi	r3,1
 201335c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2013360:	e0bffd17 	ldw	r2,-12(fp)
 2013364:	00006706 	br	2013504 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013368:	0005303a 	rdctl	r2,status
 201336c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013370:	e0fffc17 	ldw	r3,-16(fp)
 2013374:	00bfff84 	movi	r2,-2
 2013378:	1884703a 	and	r2,r3,r2
 201337c:	1001703a 	wrctl	status,r2
  
  return context;
 2013380:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013384:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2013388:	e0bffd17 	ldw	r2,-12(fp)
 201338c:	10800117 	ldw	r2,4(r2)
 2013390:	10000326 	beq	r2,zero,20133a0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2013394:	00800044 	movi	r2,1
 2013398:	e0bff405 	stb	r2,-48(fp)
 201339c:	00000106 	br	20133a4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20133a0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20133a4:	e0bffe03 	ldbu	r2,-8(fp)
 20133a8:	10000326 	beq	r2,zero,20133b8 <OSFlagDel+0xe8>
 20133ac:	10800060 	cmpeqi	r2,r2,1
 20133b0:	1000231e 	bne	r2,zero,2013440 <OSFlagDel+0x170>
 20133b4:	00004806 	br	20134d8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20133b8:	e0bff403 	ldbu	r2,-48(fp)
 20133bc:	1000161e 	bne	r2,zero,2013418 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20133c0:	e0bffd17 	ldw	r2,-12(fp)
 20133c4:	00c00fc4 	movi	r3,63
 20133c8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20133cc:	e0bffd17 	ldw	r2,-12(fp)
 20133d0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20133d4:	e0bffd17 	ldw	r2,-12(fp)
 20133d8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 20133dc:	d0e73617 	ldw	r3,-25384(gp)
 20133e0:	e0bffd17 	ldw	r2,-12(fp)
 20133e4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20133e8:	e0bffd17 	ldw	r2,-12(fp)
 20133ec:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 20133f0:	e0bffd17 	ldw	r2,-12(fp)
 20133f4:	d0a73615 	stw	r2,-25384(gp)
 20133f8:	e0bff717 	ldw	r2,-36(fp)
 20133fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013400:	e0bff817 	ldw	r2,-32(fp)
 2013404:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2013408:	e0bfff17 	ldw	r2,-4(fp)
 201340c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2013410:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2013414:	00003a06 	br	2013500 <OSFlagDel+0x230>
 2013418:	e0bff717 	ldw	r2,-36(fp)
 201341c:	e0bff915 	stw	r2,-28(fp)
 2013420:	e0bff917 	ldw	r2,-28(fp)
 2013424:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2013428:	e0bfff17 	ldw	r2,-4(fp)
 201342c:	00c01244 	movi	r3,73
 2013430:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2013434:	e0bffd17 	ldw	r2,-12(fp)
 2013438:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201343c:	00003006 	br	2013500 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2013440:	e0bffd17 	ldw	r2,-12(fp)
 2013444:	10800117 	ldw	r2,4(r2)
 2013448:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 201344c:	00000606 	br	2013468 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2013450:	000b883a 	mov	r5,zero
 2013454:	e13ff517 	ldw	r4,-44(fp)
 2013458:	201443c0 	call	201443c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201345c:	e0bff517 	ldw	r2,-44(fp)
 2013460:	10800017 	ldw	r2,0(r2)
 2013464:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2013468:	e0bff517 	ldw	r2,-44(fp)
 201346c:	103ff81e 	bne	r2,zero,2013450 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2013470:	e0bffd17 	ldw	r2,-12(fp)
 2013474:	00c00fc4 	movi	r3,63
 2013478:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201347c:	e0bffd17 	ldw	r2,-12(fp)
 2013480:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2013484:	e0bffd17 	ldw	r2,-12(fp)
 2013488:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 201348c:	d0e73617 	ldw	r3,-25384(gp)
 2013490:	e0bffd17 	ldw	r2,-12(fp)
 2013494:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2013498:	e0bffd17 	ldw	r2,-12(fp)
 201349c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20134a0:	e0bffd17 	ldw	r2,-12(fp)
 20134a4:	d0a73615 	stw	r2,-25384(gp)
 20134a8:	e0bff717 	ldw	r2,-36(fp)
 20134ac:	e0bffa15 	stw	r2,-24(fp)
 20134b0:	e0bffa17 	ldw	r2,-24(fp)
 20134b4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20134b8:	e0bff403 	ldbu	r2,-48(fp)
 20134bc:	10800058 	cmpnei	r2,r2,1
 20134c0:	1000011e 	bne	r2,zero,20134c8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20134c4:	201265c0 	call	201265c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20134c8:	e0bfff17 	ldw	r2,-4(fp)
 20134cc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20134d0:	e03ff615 	stw	zero,-40(fp)
             break;
 20134d4:	00000a06 	br	2013500 <OSFlagDel+0x230>
 20134d8:	e0bff717 	ldw	r2,-36(fp)
 20134dc:	e0bffb15 	stw	r2,-20(fp)
 20134e0:	e0bffb17 	ldw	r2,-20(fp)
 20134e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 20134e8:	e0bfff17 	ldw	r2,-4(fp)
 20134ec:	00c001c4 	movi	r3,7
 20134f0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 20134f4:	e0bffd17 	ldw	r2,-12(fp)
 20134f8:	e0bff615 	stw	r2,-40(fp)
             break;
 20134fc:	0001883a 	nop
    }
    return (pgrp_return);
 2013500:	e0bff617 	ldw	r2,-40(fp)
}
 2013504:	e037883a 	mov	sp,fp
 2013508:	dfc00117 	ldw	ra,4(sp)
 201350c:	df000017 	ldw	fp,0(sp)
 2013510:	dec00204 	addi	sp,sp,8
 2013514:	f800283a 	ret

02013518 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2013518:	defff604 	addi	sp,sp,-40
 201351c:	dfc00915 	stw	ra,36(sp)
 2013520:	df000815 	stw	fp,32(sp)
 2013524:	df000804 	addi	fp,sp,32
 2013528:	e13ffd15 	stw	r4,-12(fp)
 201352c:	e17ffe15 	stw	r5,-8(fp)
 2013530:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013534:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013538:	e0bfff17 	ldw	r2,-4(fp)
 201353c:	1000021e 	bne	r2,zero,2013548 <OSFlagNameGet+0x30>
        return (0);
 2013540:	0005883a 	mov	r2,zero
 2013544:	00003906 	br	201362c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2013548:	e0bffd17 	ldw	r2,-12(fp)
 201354c:	1000051e 	bne	r2,zero,2013564 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2013550:	e0bfff17 	ldw	r2,-4(fp)
 2013554:	00c01b84 	movi	r3,110
 2013558:	10c00005 	stb	r3,0(r2)
        return (0);
 201355c:	0005883a 	mov	r2,zero
 2013560:	00003206 	br	201362c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013564:	e0bffe17 	ldw	r2,-8(fp)
 2013568:	1000051e 	bne	r2,zero,2013580 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201356c:	e0bfff17 	ldw	r2,-4(fp)
 2013570:	00c00304 	movi	r3,12
 2013574:	10c00005 	stb	r3,0(r2)
        return (0);
 2013578:	0005883a 	mov	r2,zero
 201357c:	00002b06 	br	201362c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013580:	d0a73303 	ldbu	r2,-25396(gp)
 2013584:	10803fcc 	andi	r2,r2,255
 2013588:	10000526 	beq	r2,zero,20135a0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201358c:	e0bfff17 	ldw	r2,-4(fp)
 2013590:	00c00444 	movi	r3,17
 2013594:	10c00005 	stb	r3,0(r2)
        return (0);
 2013598:	0005883a 	mov	r2,zero
 201359c:	00002306 	br	201362c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20135a0:	0005303a 	rdctl	r2,status
 20135a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20135a8:	e0fffc17 	ldw	r3,-16(fp)
 20135ac:	00bfff84 	movi	r2,-2
 20135b0:	1884703a 	and	r2,r3,r2
 20135b4:	1001703a 	wrctl	status,r2
  
  return context;
 20135b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20135bc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20135c0:	e0bffd17 	ldw	r2,-12(fp)
 20135c4:	10800003 	ldbu	r2,0(r2)
 20135c8:	10803fcc 	andi	r2,r2,255
 20135cc:	10800160 	cmpeqi	r2,r2,5
 20135d0:	1000091e 	bne	r2,zero,20135f8 <OSFlagNameGet+0xe0>
 20135d4:	e0bff817 	ldw	r2,-32(fp)
 20135d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20135dc:	e0bff917 	ldw	r2,-28(fp)
 20135e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 20135e4:	e0bfff17 	ldw	r2,-4(fp)
 20135e8:	00c00044 	movi	r3,1
 20135ec:	10c00005 	stb	r3,0(r2)
        return (0);
 20135f0:	0005883a 	mov	r2,zero
 20135f4:	00000d06 	br	201362c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 20135f8:	e0bffd17 	ldw	r2,-12(fp)
 20135fc:	10800284 	addi	r2,r2,10
 2013600:	100b883a 	mov	r5,r2
 2013604:	e13ffe17 	ldw	r4,-8(fp)
 2013608:	20127a00 	call	20127a0 <OS_StrCopy>
 201360c:	e0bffb05 	stb	r2,-20(fp)
 2013610:	e0bff817 	ldw	r2,-32(fp)
 2013614:	e0bffa15 	stw	r2,-24(fp)
 2013618:	e0bffa17 	ldw	r2,-24(fp)
 201361c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013620:	e0bfff17 	ldw	r2,-4(fp)
 2013624:	10000005 	stb	zero,0(r2)
    return (len);
 2013628:	e0bffb03 	ldbu	r2,-20(fp)
}
 201362c:	e037883a 	mov	sp,fp
 2013630:	dfc00117 	ldw	ra,4(sp)
 2013634:	df000017 	ldw	fp,0(sp)
 2013638:	dec00204 	addi	sp,sp,8
 201363c:	f800283a 	ret

02013640 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2013640:	defff504 	addi	sp,sp,-44
 2013644:	dfc00a15 	stw	ra,40(sp)
 2013648:	df000915 	stw	fp,36(sp)
 201364c:	df000904 	addi	fp,sp,36
 2013650:	e13ffd15 	stw	r4,-12(fp)
 2013654:	e17ffe15 	stw	r5,-8(fp)
 2013658:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201365c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013660:	e0bfff17 	ldw	r2,-4(fp)
 2013664:	10004326 	beq	r2,zero,2013774 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2013668:	e0bffd17 	ldw	r2,-12(fp)
 201366c:	1000041e 	bne	r2,zero,2013680 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2013670:	e0bfff17 	ldw	r2,-4(fp)
 2013674:	00c01b84 	movi	r3,110
 2013678:	10c00005 	stb	r3,0(r2)
        return;
 201367c:	00003e06 	br	2013778 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013680:	e0bffe17 	ldw	r2,-8(fp)
 2013684:	1000041e 	bne	r2,zero,2013698 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2013688:	e0bfff17 	ldw	r2,-4(fp)
 201368c:	00c00304 	movi	r3,12
 2013690:	10c00005 	stb	r3,0(r2)
        return;
 2013694:	00003806 	br	2013778 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013698:	d0a73303 	ldbu	r2,-25396(gp)
 201369c:	10803fcc 	andi	r2,r2,255
 20136a0:	10000426 	beq	r2,zero,20136b4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20136a4:	e0bfff17 	ldw	r2,-4(fp)
 20136a8:	00c00484 	movi	r3,18
 20136ac:	10c00005 	stb	r3,0(r2)
        return;
 20136b0:	00003106 	br	2013778 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20136b4:	0005303a 	rdctl	r2,status
 20136b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20136bc:	e0fffc17 	ldw	r3,-16(fp)
 20136c0:	00bfff84 	movi	r2,-2
 20136c4:	1884703a 	and	r2,r3,r2
 20136c8:	1001703a 	wrctl	status,r2
  
  return context;
 20136cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20136d0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20136d4:	e0bffd17 	ldw	r2,-12(fp)
 20136d8:	10800003 	ldbu	r2,0(r2)
 20136dc:	10803fcc 	andi	r2,r2,255
 20136e0:	10800160 	cmpeqi	r2,r2,5
 20136e4:	1000081e 	bne	r2,zero,2013708 <OSFlagNameSet+0xc8>
 20136e8:	e0bff717 	ldw	r2,-36(fp)
 20136ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20136f0:	e0bff817 	ldw	r2,-32(fp)
 20136f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 20136f8:	e0bfff17 	ldw	r2,-4(fp)
 20136fc:	00c00044 	movi	r3,1
 2013700:	10c00005 	stb	r3,0(r2)
        return;
 2013704:	00001c06 	br	2013778 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2013708:	e13ffe17 	ldw	r4,-8(fp)
 201370c:	20128140 	call	2012814 <OS_StrLen>
 2013710:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2013714:	e0bffa03 	ldbu	r2,-24(fp)
 2013718:	10800830 	cmpltui	r2,r2,32
 201371c:	1000081e 	bne	r2,zero,2013740 <OSFlagNameSet+0x100>
 2013720:	e0bff717 	ldw	r2,-36(fp)
 2013724:	e0bff915 	stw	r2,-28(fp)
 2013728:	e0bff917 	ldw	r2,-28(fp)
 201372c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2013730:	e0bfff17 	ldw	r2,-4(fp)
 2013734:	00c01cc4 	movi	r3,115
 2013738:	10c00005 	stb	r3,0(r2)
        return;
 201373c:	00000e06 	br	2013778 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2013740:	e0bffd17 	ldw	r2,-12(fp)
 2013744:	10800284 	addi	r2,r2,10
 2013748:	e17ffe17 	ldw	r5,-8(fp)
 201374c:	1009883a 	mov	r4,r2
 2013750:	20127a00 	call	20127a0 <OS_StrCopy>
 2013754:	e0bff717 	ldw	r2,-36(fp)
 2013758:	e0bffb15 	stw	r2,-20(fp)
 201375c:	e0bffb17 	ldw	r2,-20(fp)
 2013760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013764:	e0bfff17 	ldw	r2,-4(fp)
 2013768:	10000005 	stb	zero,0(r2)
    return;
 201376c:	0001883a 	nop
 2013770:	00000106 	br	2013778 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2013774:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2013778:	e037883a 	mov	sp,fp
 201377c:	dfc00117 	ldw	ra,4(sp)
 2013780:	df000017 	ldw	fp,0(sp)
 2013784:	dec00204 	addi	sp,sp,8
 2013788:	f800283a 	ret

0201378c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 201378c:	deffe104 	addi	sp,sp,-124
 2013790:	dfc01e15 	stw	ra,120(sp)
 2013794:	df001d15 	stw	fp,116(sp)
 2013798:	df001d04 	addi	fp,sp,116
 201379c:	e13ffc15 	stw	r4,-16(fp)
 20137a0:	2809883a 	mov	r4,r5
 20137a4:	3007883a 	mov	r3,r6
 20137a8:	3805883a 	mov	r2,r7
 20137ac:	e13ffd0d 	sth	r4,-12(fp)
 20137b0:	e0fffe05 	stb	r3,-8(fp)
 20137b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20137b8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20137bc:	e0800217 	ldw	r2,8(fp)
 20137c0:	1000021e 	bne	r2,zero,20137cc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 20137c4:	0005883a 	mov	r2,zero
 20137c8:	00015906 	br	2013d30 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20137cc:	e0bffc17 	ldw	r2,-16(fp)
 20137d0:	1000051e 	bne	r2,zero,20137e8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20137d4:	e0800217 	ldw	r2,8(fp)
 20137d8:	00c01b84 	movi	r3,110
 20137dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20137e0:	0005883a 	mov	r2,zero
 20137e4:	00015206 	br	2013d30 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20137e8:	d0a73303 	ldbu	r2,-25396(gp)
 20137ec:	10803fcc 	andi	r2,r2,255
 20137f0:	10000526 	beq	r2,zero,2013808 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 20137f4:	e0800217 	ldw	r2,8(fp)
 20137f8:	00c00084 	movi	r3,2
 20137fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013800:	0005883a 	mov	r2,zero
 2013804:	00014a06 	br	2013d30 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2013808:	d0a72503 	ldbu	r2,-25452(gp)
 201380c:	10803fcc 	andi	r2,r2,255
 2013810:	10000526 	beq	r2,zero,2013828 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2013814:	e0800217 	ldw	r2,8(fp)
 2013818:	00c00344 	movi	r3,13
 201381c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013820:	0005883a 	mov	r2,zero
 2013824:	00014206 	br	2013d30 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2013828:	e0bffc17 	ldw	r2,-16(fp)
 201382c:	10800003 	ldbu	r2,0(r2)
 2013830:	10803fcc 	andi	r2,r2,255
 2013834:	10800160 	cmpeqi	r2,r2,5
 2013838:	1000051e 	bne	r2,zero,2013850 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 201383c:	e0800217 	ldw	r2,8(fp)
 2013840:	00c00044 	movi	r3,1
 2013844:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013848:	0005883a 	mov	r2,zero
 201384c:	00013806 	br	2013d30 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2013850:	e0fffe03 	ldbu	r3,-8(fp)
 2013854:	00bfe004 	movi	r2,-128
 2013858:	1884703a 	and	r2,r3,r2
 201385c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2013860:	e0bfe603 	ldbu	r2,-104(fp)
 2013864:	10000626 	beq	r2,zero,2013880 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2013868:	e0bffe03 	ldbu	r2,-8(fp)
 201386c:	10801fcc 	andi	r2,r2,127
 2013870:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2013874:	00800044 	movi	r2,1
 2013878:	e0bfe405 	stb	r2,-112(fp)
 201387c:	00000106 	br	2013884 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2013880:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013884:	0005303a 	rdctl	r2,status
 2013888:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201388c:	e0fff617 	ldw	r3,-40(fp)
 2013890:	00bfff84 	movi	r2,-2
 2013894:	1884703a 	and	r2,r3,r2
 2013898:	1001703a 	wrctl	status,r2
  
  return context;
 201389c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20138a0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 20138a4:	e0bffe03 	ldbu	r2,-8(fp)
 20138a8:	10c00060 	cmpeqi	r3,r2,1
 20138ac:	1800921e 	bne	r3,zero,2013af8 <OSFlagPend+0x36c>
 20138b0:	10c00088 	cmpgei	r3,r2,2
 20138b4:	1800021e 	bne	r3,zero,20138c0 <OSFlagPend+0x134>
 20138b8:	10006126 	beq	r2,zero,2013a40 <OSFlagPend+0x2b4>
 20138bc:	0000bb06 	br	2013bac <OSFlagPend+0x420>
 20138c0:	10c000a0 	cmpeqi	r3,r2,2
 20138c4:	1800031e 	bne	r3,zero,20138d4 <OSFlagPend+0x148>
 20138c8:	108000e0 	cmpeqi	r2,r2,3
 20138cc:	10002f1e 	bne	r2,zero,201398c <OSFlagPend+0x200>
 20138d0:	0000b606 	br	2013bac <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 20138d4:	e0bffc17 	ldw	r2,-16(fp)
 20138d8:	10c0020b 	ldhu	r3,8(r2)
 20138dc:	e0bffd0b 	ldhu	r2,-12(fp)
 20138e0:	1884703a 	and	r2,r3,r2
 20138e4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20138e8:	e0ffe80b 	ldhu	r3,-96(fp)
 20138ec:	e0bffd0b 	ldhu	r2,-12(fp)
 20138f0:	1880171e 	bne	r3,r2,2013950 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20138f4:	e0bfe403 	ldbu	r2,-112(fp)
 20138f8:	10800058 	cmpnei	r2,r2,1
 20138fc:	1000091e 	bne	r2,zero,2013924 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2013900:	e0bffc17 	ldw	r2,-16(fp)
 2013904:	1080020b 	ldhu	r2,8(r2)
 2013908:	1007883a 	mov	r3,r2
 201390c:	e0bfe80b 	ldhu	r2,-96(fp)
 2013910:	0084303a 	nor	r2,zero,r2
 2013914:	1884703a 	and	r2,r3,r2
 2013918:	1007883a 	mov	r3,r2
 201391c:	e0bffc17 	ldw	r2,-16(fp)
 2013920:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2013924:	d0a73417 	ldw	r2,-25392(gp)
 2013928:	e0ffe80b 	ldhu	r3,-96(fp)
 201392c:	10c00b0d 	sth	r3,44(r2)
 2013930:	e0bfe517 	ldw	r2,-108(fp)
 2013934:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013938:	e0bfe717 	ldw	r2,-100(fp)
 201393c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2013940:	e0800217 	ldw	r2,8(fp)
 2013944:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2013948:	e0bfe80b 	ldhu	r2,-96(fp)
 201394c:	0000f806 	br	2013d30 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2013950:	e13ffd0b 	ldhu	r4,-12(fp)
 2013954:	e17ffe03 	ldbu	r5,-8(fp)
 2013958:	e0bfff0b 	ldhu	r2,-4(fp)
 201395c:	e0fff704 	addi	r3,fp,-36
 2013960:	d8800015 	stw	r2,0(sp)
 2013964:	280f883a 	mov	r7,r5
 2013968:	200d883a 	mov	r6,r4
 201396c:	180b883a 	mov	r5,r3
 2013970:	e13ffc17 	ldw	r4,-16(fp)
 2013974:	20141fc0 	call	20141fc <OS_FlagBlock>
 2013978:	e0bfe517 	ldw	r2,-108(fp)
 201397c:	e0bfe915 	stw	r2,-92(fp)
 2013980:	e0bfe917 	ldw	r2,-92(fp)
 2013984:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2013988:	00009206 	br	2013bd4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 201398c:	e0bffc17 	ldw	r2,-16(fp)
 2013990:	10c0020b 	ldhu	r3,8(r2)
 2013994:	e0bffd0b 	ldhu	r2,-12(fp)
 2013998:	1884703a 	and	r2,r3,r2
 201399c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20139a0:	e0bfe80b 	ldhu	r2,-96(fp)
 20139a4:	10001726 	beq	r2,zero,2013a04 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20139a8:	e0bfe403 	ldbu	r2,-112(fp)
 20139ac:	10800058 	cmpnei	r2,r2,1
 20139b0:	1000091e 	bne	r2,zero,20139d8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20139b4:	e0bffc17 	ldw	r2,-16(fp)
 20139b8:	1080020b 	ldhu	r2,8(r2)
 20139bc:	1007883a 	mov	r3,r2
 20139c0:	e0bfe80b 	ldhu	r2,-96(fp)
 20139c4:	0084303a 	nor	r2,zero,r2
 20139c8:	1884703a 	and	r2,r3,r2
 20139cc:	1007883a 	mov	r3,r2
 20139d0:	e0bffc17 	ldw	r2,-16(fp)
 20139d4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20139d8:	d0a73417 	ldw	r2,-25392(gp)
 20139dc:	e0ffe80b 	ldhu	r3,-96(fp)
 20139e0:	10c00b0d 	sth	r3,44(r2)
 20139e4:	e0bfe517 	ldw	r2,-108(fp)
 20139e8:	e0bfea15 	stw	r2,-88(fp)
 20139ec:	e0bfea17 	ldw	r2,-88(fp)
 20139f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20139f4:	e0800217 	ldw	r2,8(fp)
 20139f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20139fc:	e0bfe80b 	ldhu	r2,-96(fp)
 2013a00:	0000cb06 	br	2013d30 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2013a04:	e13ffd0b 	ldhu	r4,-12(fp)
 2013a08:	e17ffe03 	ldbu	r5,-8(fp)
 2013a0c:	e0bfff0b 	ldhu	r2,-4(fp)
 2013a10:	e0fff704 	addi	r3,fp,-36
 2013a14:	d8800015 	stw	r2,0(sp)
 2013a18:	280f883a 	mov	r7,r5
 2013a1c:	200d883a 	mov	r6,r4
 2013a20:	180b883a 	mov	r5,r3
 2013a24:	e13ffc17 	ldw	r4,-16(fp)
 2013a28:	20141fc0 	call	20141fc <OS_FlagBlock>
 2013a2c:	e0bfe517 	ldw	r2,-108(fp)
 2013a30:	e0bfeb15 	stw	r2,-84(fp)
 2013a34:	e0bfeb17 	ldw	r2,-84(fp)
 2013a38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2013a3c:	00006506 	br	2013bd4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2013a40:	e0bffc17 	ldw	r2,-16(fp)
 2013a44:	1080020b 	ldhu	r2,8(r2)
 2013a48:	0084303a 	nor	r2,zero,r2
 2013a4c:	1007883a 	mov	r3,r2
 2013a50:	e0bffd0b 	ldhu	r2,-12(fp)
 2013a54:	1884703a 	and	r2,r3,r2
 2013a58:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2013a5c:	e0ffe80b 	ldhu	r3,-96(fp)
 2013a60:	e0bffd0b 	ldhu	r2,-12(fp)
 2013a64:	1880151e 	bne	r3,r2,2013abc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2013a68:	e0bfe403 	ldbu	r2,-112(fp)
 2013a6c:	10800058 	cmpnei	r2,r2,1
 2013a70:	1000071e 	bne	r2,zero,2013a90 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2013a74:	e0bffc17 	ldw	r2,-16(fp)
 2013a78:	10c0020b 	ldhu	r3,8(r2)
 2013a7c:	e0bfe80b 	ldhu	r2,-96(fp)
 2013a80:	1884b03a 	or	r2,r3,r2
 2013a84:	1007883a 	mov	r3,r2
 2013a88:	e0bffc17 	ldw	r2,-16(fp)
 2013a8c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2013a90:	d0a73417 	ldw	r2,-25392(gp)
 2013a94:	e0ffe80b 	ldhu	r3,-96(fp)
 2013a98:	10c00b0d 	sth	r3,44(r2)
 2013a9c:	e0bfe517 	ldw	r2,-108(fp)
 2013aa0:	e0bfec15 	stw	r2,-80(fp)
 2013aa4:	e0bfec17 	ldw	r2,-80(fp)
 2013aa8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2013aac:	e0800217 	ldw	r2,8(fp)
 2013ab0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2013ab4:	e0bfe80b 	ldhu	r2,-96(fp)
 2013ab8:	00009d06 	br	2013d30 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2013abc:	e13ffd0b 	ldhu	r4,-12(fp)
 2013ac0:	e17ffe03 	ldbu	r5,-8(fp)
 2013ac4:	e0bfff0b 	ldhu	r2,-4(fp)
 2013ac8:	e0fff704 	addi	r3,fp,-36
 2013acc:	d8800015 	stw	r2,0(sp)
 2013ad0:	280f883a 	mov	r7,r5
 2013ad4:	200d883a 	mov	r6,r4
 2013ad8:	180b883a 	mov	r5,r3
 2013adc:	e13ffc17 	ldw	r4,-16(fp)
 2013ae0:	20141fc0 	call	20141fc <OS_FlagBlock>
 2013ae4:	e0bfe517 	ldw	r2,-108(fp)
 2013ae8:	e0bfed15 	stw	r2,-76(fp)
 2013aec:	e0bfed17 	ldw	r2,-76(fp)
 2013af0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2013af4:	00003706 	br	2013bd4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2013af8:	e0bffc17 	ldw	r2,-16(fp)
 2013afc:	1080020b 	ldhu	r2,8(r2)
 2013b00:	0084303a 	nor	r2,zero,r2
 2013b04:	1007883a 	mov	r3,r2
 2013b08:	e0bffd0b 	ldhu	r2,-12(fp)
 2013b0c:	1884703a 	and	r2,r3,r2
 2013b10:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2013b14:	e0bfe80b 	ldhu	r2,-96(fp)
 2013b18:	10001526 	beq	r2,zero,2013b70 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2013b1c:	e0bfe403 	ldbu	r2,-112(fp)
 2013b20:	10800058 	cmpnei	r2,r2,1
 2013b24:	1000071e 	bne	r2,zero,2013b44 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2013b28:	e0bffc17 	ldw	r2,-16(fp)
 2013b2c:	10c0020b 	ldhu	r3,8(r2)
 2013b30:	e0bfe80b 	ldhu	r2,-96(fp)
 2013b34:	1884b03a 	or	r2,r3,r2
 2013b38:	1007883a 	mov	r3,r2
 2013b3c:	e0bffc17 	ldw	r2,-16(fp)
 2013b40:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2013b44:	d0a73417 	ldw	r2,-25392(gp)
 2013b48:	e0ffe80b 	ldhu	r3,-96(fp)
 2013b4c:	10c00b0d 	sth	r3,44(r2)
 2013b50:	e0bfe517 	ldw	r2,-108(fp)
 2013b54:	e0bfee15 	stw	r2,-72(fp)
 2013b58:	e0bfee17 	ldw	r2,-72(fp)
 2013b5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2013b60:	e0800217 	ldw	r2,8(fp)
 2013b64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2013b68:	e0bfe80b 	ldhu	r2,-96(fp)
 2013b6c:	00007006 	br	2013d30 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2013b70:	e13ffd0b 	ldhu	r4,-12(fp)
 2013b74:	e17ffe03 	ldbu	r5,-8(fp)
 2013b78:	e0bfff0b 	ldhu	r2,-4(fp)
 2013b7c:	e0fff704 	addi	r3,fp,-36
 2013b80:	d8800015 	stw	r2,0(sp)
 2013b84:	280f883a 	mov	r7,r5
 2013b88:	200d883a 	mov	r6,r4
 2013b8c:	180b883a 	mov	r5,r3
 2013b90:	e13ffc17 	ldw	r4,-16(fp)
 2013b94:	20141fc0 	call	20141fc <OS_FlagBlock>
 2013b98:	e0bfe517 	ldw	r2,-108(fp)
 2013b9c:	e0bfef15 	stw	r2,-68(fp)
 2013ba0:	e0bfef17 	ldw	r2,-68(fp)
 2013ba4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2013ba8:	00000a06 	br	2013bd4 <OSFlagPend+0x448>
 2013bac:	e0bfe517 	ldw	r2,-108(fp)
 2013bb0:	e0bff015 	stw	r2,-64(fp)
 2013bb4:	e0bff017 	ldw	r2,-64(fp)
 2013bb8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2013bbc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2013bc0:	e0800217 	ldw	r2,8(fp)
 2013bc4:	00c01bc4 	movi	r3,111
 2013bc8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2013bcc:	e0bfe80b 	ldhu	r2,-96(fp)
 2013bd0:	00005706 	br	2013d30 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2013bd4:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013bd8:	0005303a 	rdctl	r2,status
 2013bdc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013be0:	e0fff117 	ldw	r3,-60(fp)
 2013be4:	00bfff84 	movi	r2,-2
 2013be8:	1884703a 	and	r2,r3,r2
 2013bec:	1001703a 	wrctl	status,r2
  
  return context;
 2013bf0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2013bf4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2013bf8:	d0a73417 	ldw	r2,-25392(gp)
 2013bfc:	10800c43 	ldbu	r2,49(r2)
 2013c00:	10803fcc 	andi	r2,r2,255
 2013c04:	10001c26 	beq	r2,zero,2013c78 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2013c08:	d0a73417 	ldw	r2,-25392(gp)
 2013c0c:	10800c43 	ldbu	r2,49(r2)
 2013c10:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2013c14:	d0a73417 	ldw	r2,-25392(gp)
 2013c18:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2013c1c:	e0bff704 	addi	r2,fp,-36
 2013c20:	1009883a 	mov	r4,r2
 2013c24:	20145300 	call	2014530 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2013c28:	d0a73417 	ldw	r2,-25392(gp)
 2013c2c:	10000c05 	stb	zero,48(r2)
 2013c30:	e0bfe517 	ldw	r2,-108(fp)
 2013c34:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c38:	e0bff217 	ldw	r2,-56(fp)
 2013c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2013c40:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2013c44:	e0bff303 	ldbu	r2,-52(fp)
 2013c48:	108000a0 	cmpeqi	r2,r2,2
 2013c4c:	10000426 	beq	r2,zero,2013c60 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2013c50:	e0800217 	ldw	r2,8(fp)
 2013c54:	00c00384 	movi	r3,14
 2013c58:	10c00005 	stb	r3,0(r2)
                 break;
 2013c5c:	00000406 	br	2013c70 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2013c60:	e0800217 	ldw	r2,8(fp)
 2013c64:	00c00284 	movi	r3,10
 2013c68:	10c00005 	stb	r3,0(r2)
                 break;
 2013c6c:	0001883a 	nop
        }
        return (flags_rdy);
 2013c70:	e0bfe80b 	ldhu	r2,-96(fp)
 2013c74:	00002e06 	br	2013d30 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2013c78:	d0a73417 	ldw	r2,-25392(gp)
 2013c7c:	10800b0b 	ldhu	r2,44(r2)
 2013c80:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2013c84:	e0bfe403 	ldbu	r2,-112(fp)
 2013c88:	10800058 	cmpnei	r2,r2,1
 2013c8c:	1000211e 	bne	r2,zero,2013d14 <OSFlagPend+0x588>
        switch (wait_type) {
 2013c90:	e0bffe03 	ldbu	r2,-8(fp)
 2013c94:	10001616 	blt	r2,zero,2013cf0 <OSFlagPend+0x564>
 2013c98:	10c00090 	cmplti	r3,r2,2
 2013c9c:	18000c1e 	bne	r3,zero,2013cd0 <OSFlagPend+0x544>
 2013ca0:	10800108 	cmpgei	r2,r2,4
 2013ca4:	1000121e 	bne	r2,zero,2013cf0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2013ca8:	e0bffc17 	ldw	r2,-16(fp)
 2013cac:	1080020b 	ldhu	r2,8(r2)
 2013cb0:	1007883a 	mov	r3,r2
 2013cb4:	e0bfe80b 	ldhu	r2,-96(fp)
 2013cb8:	0084303a 	nor	r2,zero,r2
 2013cbc:	1884703a 	and	r2,r3,r2
 2013cc0:	1007883a 	mov	r3,r2
 2013cc4:	e0bffc17 	ldw	r2,-16(fp)
 2013cc8:	10c0020d 	sth	r3,8(r2)
                 break;
 2013ccc:	00001106 	br	2013d14 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2013cd0:	e0bffc17 	ldw	r2,-16(fp)
 2013cd4:	10c0020b 	ldhu	r3,8(r2)
 2013cd8:	e0bfe80b 	ldhu	r2,-96(fp)
 2013cdc:	1884b03a 	or	r2,r3,r2
 2013ce0:	1007883a 	mov	r3,r2
 2013ce4:	e0bffc17 	ldw	r2,-16(fp)
 2013ce8:	10c0020d 	sth	r3,8(r2)
                 break;
 2013cec:	00000906 	br	2013d14 <OSFlagPend+0x588>
 2013cf0:	e0bfe517 	ldw	r2,-108(fp)
 2013cf4:	e0bff415 	stw	r2,-48(fp)
 2013cf8:	e0bff417 	ldw	r2,-48(fp)
 2013cfc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2013d00:	e0800217 	ldw	r2,8(fp)
 2013d04:	00c01bc4 	movi	r3,111
 2013d08:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2013d0c:	0005883a 	mov	r2,zero
 2013d10:	00000706 	br	2013d30 <OSFlagPend+0x5a4>
 2013d14:	e0bfe517 	ldw	r2,-108(fp)
 2013d18:	e0bff515 	stw	r2,-44(fp)
 2013d1c:	e0bff517 	ldw	r2,-44(fp)
 2013d20:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2013d24:	e0800217 	ldw	r2,8(fp)
 2013d28:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2013d2c:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2013d30:	e037883a 	mov	sp,fp
 2013d34:	dfc00117 	ldw	ra,4(sp)
 2013d38:	df000017 	ldw	fp,0(sp)
 2013d3c:	dec00204 	addi	sp,sp,8
 2013d40:	f800283a 	ret

02013d44 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2013d44:	defffb04 	addi	sp,sp,-20
 2013d48:	df000415 	stw	fp,16(sp)
 2013d4c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2013d50:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d54:	0005303a 	rdctl	r2,status
 2013d58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d5c:	e0fffe17 	ldw	r3,-8(fp)
 2013d60:	00bfff84 	movi	r2,-2
 2013d64:	1884703a 	and	r2,r3,r2
 2013d68:	1001703a 	wrctl	status,r2
  
  return context;
 2013d6c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2013d70:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2013d74:	d0a73417 	ldw	r2,-25392(gp)
 2013d78:	10800b0b 	ldhu	r2,44(r2)
 2013d7c:	e0bffd0d 	sth	r2,-12(fp)
 2013d80:	e0bffc17 	ldw	r2,-16(fp)
 2013d84:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013d88:	e0bfff17 	ldw	r2,-4(fp)
 2013d8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2013d90:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2013d94:	e037883a 	mov	sp,fp
 2013d98:	df000017 	ldw	fp,0(sp)
 2013d9c:	dec00104 	addi	sp,sp,4
 2013da0:	f800283a 	ret

02013da4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2013da4:	deffef04 	addi	sp,sp,-68
 2013da8:	dfc01015 	stw	ra,64(sp)
 2013dac:	df000f15 	stw	fp,60(sp)
 2013db0:	df000f04 	addi	fp,sp,60
 2013db4:	e13ffc15 	stw	r4,-16(fp)
 2013db8:	2807883a 	mov	r3,r5
 2013dbc:	3005883a 	mov	r2,r6
 2013dc0:	e1ffff15 	stw	r7,-4(fp)
 2013dc4:	e0fffd0d 	sth	r3,-12(fp)
 2013dc8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2013dcc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2013dd0:	e0bfff17 	ldw	r2,-4(fp)
 2013dd4:	1000021e 	bne	r2,zero,2013de0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2013dd8:	0005883a 	mov	r2,zero
 2013ddc:	0000d106 	br	2014124 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2013de0:	e0bffc17 	ldw	r2,-16(fp)
 2013de4:	1000051e 	bne	r2,zero,2013dfc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2013de8:	e0bfff17 	ldw	r2,-4(fp)
 2013dec:	00c01b84 	movi	r3,110
 2013df0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013df4:	0005883a 	mov	r2,zero
 2013df8:	0000ca06 	br	2014124 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2013dfc:	e0bffc17 	ldw	r2,-16(fp)
 2013e00:	10800003 	ldbu	r2,0(r2)
 2013e04:	10803fcc 	andi	r2,r2,255
 2013e08:	10800160 	cmpeqi	r2,r2,5
 2013e0c:	1000051e 	bne	r2,zero,2013e24 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2013e10:	e0bfff17 	ldw	r2,-4(fp)
 2013e14:	00c00044 	movi	r3,1
 2013e18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013e1c:	0005883a 	mov	r2,zero
 2013e20:	0000c006 	br	2014124 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013e24:	0005303a 	rdctl	r2,status
 2013e28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013e2c:	e0fffb17 	ldw	r3,-20(fp)
 2013e30:	00bfff84 	movi	r2,-2
 2013e34:	1884703a 	and	r2,r3,r2
 2013e38:	1001703a 	wrctl	status,r2
  
  return context;
 2013e3c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2013e40:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2013e44:	e0bffe03 	ldbu	r2,-8(fp)
 2013e48:	10000326 	beq	r2,zero,2013e58 <OSFlagPost+0xb4>
 2013e4c:	10800060 	cmpeqi	r2,r2,1
 2013e50:	10000b1e 	bne	r2,zero,2013e80 <OSFlagPost+0xdc>
 2013e54:	00001206 	br	2013ea0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2013e58:	e0bffc17 	ldw	r2,-16(fp)
 2013e5c:	1080020b 	ldhu	r2,8(r2)
 2013e60:	1007883a 	mov	r3,r2
 2013e64:	e0bffd0b 	ldhu	r2,-12(fp)
 2013e68:	0084303a 	nor	r2,zero,r2
 2013e6c:	1884703a 	and	r2,r3,r2
 2013e70:	1007883a 	mov	r3,r2
 2013e74:	e0bffc17 	ldw	r2,-16(fp)
 2013e78:	10c0020d 	sth	r3,8(r2)
             break;
 2013e7c:	00001106 	br	2013ec4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2013e80:	e0bffc17 	ldw	r2,-16(fp)
 2013e84:	10c0020b 	ldhu	r3,8(r2)
 2013e88:	e0bffd0b 	ldhu	r2,-12(fp)
 2013e8c:	1884b03a 	or	r2,r3,r2
 2013e90:	1007883a 	mov	r3,r2
 2013e94:	e0bffc17 	ldw	r2,-16(fp)
 2013e98:	10c0020d 	sth	r3,8(r2)
             break;
 2013e9c:	00000906 	br	2013ec4 <OSFlagPost+0x120>
 2013ea0:	e0bff317 	ldw	r2,-52(fp)
 2013ea4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ea8:	e0bff417 	ldw	r2,-48(fp)
 2013eac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2013eb0:	e0bfff17 	ldw	r2,-4(fp)
 2013eb4:	00c01c44 	movi	r3,113
 2013eb8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 2013ebc:	0005883a 	mov	r2,zero
 2013ec0:	00009806 	br	2014124 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2013ec4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2013ec8:	e0bffc17 	ldw	r2,-16(fp)
 2013ecc:	10800117 	ldw	r2,4(r2)
 2013ed0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2013ed4:	00007706 	br	20140b4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2013ed8:	e0bff117 	ldw	r2,-60(fp)
 2013edc:	10800483 	ldbu	r2,18(r2)
 2013ee0:	10803fcc 	andi	r2,r2,255
 2013ee4:	10c00060 	cmpeqi	r3,r2,1
 2013ee8:	18004a1e 	bne	r3,zero,2014014 <OSFlagPost+0x270>
 2013eec:	10c00088 	cmpgei	r3,r2,2
 2013ef0:	1800021e 	bne	r3,zero,2013efc <OSFlagPost+0x158>
 2013ef4:	10002f26 	beq	r2,zero,2013fb4 <OSFlagPost+0x210>
 2013ef8:	00005b06 	br	2014068 <OSFlagPost+0x2c4>
 2013efc:	10c000a0 	cmpeqi	r3,r2,2
 2013f00:	1800031e 	bne	r3,zero,2013f10 <OSFlagPost+0x16c>
 2013f04:	108000e0 	cmpeqi	r2,r2,3
 2013f08:	1000171e 	bne	r2,zero,2013f68 <OSFlagPost+0x1c4>
 2013f0c:	00005606 	br	2014068 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2013f10:	e0bffc17 	ldw	r2,-16(fp)
 2013f14:	10c0020b 	ldhu	r3,8(r2)
 2013f18:	e0bff117 	ldw	r2,-60(fp)
 2013f1c:	1080040b 	ldhu	r2,16(r2)
 2013f20:	1884703a 	and	r2,r3,r2
 2013f24:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2013f28:	e0bff117 	ldw	r2,-60(fp)
 2013f2c:	1080040b 	ldhu	r2,16(r2)
 2013f30:	10ffffcc 	andi	r3,r2,65535
 2013f34:	e0bff60b 	ldhu	r2,-40(fp)
 2013f38:	1880541e 	bne	r3,r2,201408c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2013f3c:	e0bff60b 	ldhu	r2,-40(fp)
 2013f40:	100b883a 	mov	r5,r2
 2013f44:	e13ff117 	ldw	r4,-60(fp)
 2013f48:	201443c0 	call	201443c <OS_FlagTaskRdy>
 2013f4c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2013f50:	e0bff683 	ldbu	r2,-38(fp)
 2013f54:	10800058 	cmpnei	r2,r2,1
 2013f58:	10004c1e 	bne	r2,zero,201408c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2013f5c:	00800044 	movi	r2,1
 2013f60:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2013f64:	00004906 	br	201408c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2013f68:	e0bffc17 	ldw	r2,-16(fp)
 2013f6c:	10c0020b 	ldhu	r3,8(r2)
 2013f70:	e0bff117 	ldw	r2,-60(fp)
 2013f74:	1080040b 	ldhu	r2,16(r2)
 2013f78:	1884703a 	and	r2,r3,r2
 2013f7c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2013f80:	e0bff60b 	ldhu	r2,-40(fp)
 2013f84:	10004326 	beq	r2,zero,2014094 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2013f88:	e0bff60b 	ldhu	r2,-40(fp)
 2013f8c:	100b883a 	mov	r5,r2
 2013f90:	e13ff117 	ldw	r4,-60(fp)
 2013f94:	201443c0 	call	201443c <OS_FlagTaskRdy>
 2013f98:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2013f9c:	e0bff683 	ldbu	r2,-38(fp)
 2013fa0:	10800058 	cmpnei	r2,r2,1
 2013fa4:	10003b1e 	bne	r2,zero,2014094 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2013fa8:	00800044 	movi	r2,1
 2013fac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2013fb0:	00003806 	br	2014094 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2013fb4:	e0bffc17 	ldw	r2,-16(fp)
 2013fb8:	1080020b 	ldhu	r2,8(r2)
 2013fbc:	0084303a 	nor	r2,zero,r2
 2013fc0:	1007883a 	mov	r3,r2
 2013fc4:	e0bff117 	ldw	r2,-60(fp)
 2013fc8:	1080040b 	ldhu	r2,16(r2)
 2013fcc:	1884703a 	and	r2,r3,r2
 2013fd0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2013fd4:	e0bff117 	ldw	r2,-60(fp)
 2013fd8:	1080040b 	ldhu	r2,16(r2)
 2013fdc:	10ffffcc 	andi	r3,r2,65535
 2013fe0:	e0bff60b 	ldhu	r2,-40(fp)
 2013fe4:	18802d1e 	bne	r3,r2,201409c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2013fe8:	e0bff60b 	ldhu	r2,-40(fp)
 2013fec:	100b883a 	mov	r5,r2
 2013ff0:	e13ff117 	ldw	r4,-60(fp)
 2013ff4:	201443c0 	call	201443c <OS_FlagTaskRdy>
 2013ff8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2013ffc:	e0bff683 	ldbu	r2,-38(fp)
 2014000:	10800058 	cmpnei	r2,r2,1
 2014004:	1000251e 	bne	r2,zero,201409c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2014008:	00800044 	movi	r2,1
 201400c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2014010:	00002206 	br	201409c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2014014:	e0bffc17 	ldw	r2,-16(fp)
 2014018:	1080020b 	ldhu	r2,8(r2)
 201401c:	0084303a 	nor	r2,zero,r2
 2014020:	1007883a 	mov	r3,r2
 2014024:	e0bff117 	ldw	r2,-60(fp)
 2014028:	1080040b 	ldhu	r2,16(r2)
 201402c:	1884703a 	and	r2,r3,r2
 2014030:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2014034:	e0bff60b 	ldhu	r2,-40(fp)
 2014038:	10001a26 	beq	r2,zero,20140a4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201403c:	e0bff60b 	ldhu	r2,-40(fp)
 2014040:	100b883a 	mov	r5,r2
 2014044:	e13ff117 	ldw	r4,-60(fp)
 2014048:	201443c0 	call	201443c <OS_FlagTaskRdy>
 201404c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2014050:	e0bff683 	ldbu	r2,-38(fp)
 2014054:	10800058 	cmpnei	r2,r2,1
 2014058:	1000121e 	bne	r2,zero,20140a4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201405c:	00800044 	movi	r2,1
 2014060:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2014064:	00000f06 	br	20140a4 <OSFlagPost+0x300>
 2014068:	e0bff317 	ldw	r2,-52(fp)
 201406c:	e0bff515 	stw	r2,-44(fp)
 2014070:	e0bff517 	ldw	r2,-44(fp)
 2014074:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2014078:	e0bfff17 	ldw	r2,-4(fp)
 201407c:	00c01bc4 	movi	r3,111
 2014080:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2014084:	0005883a 	mov	r2,zero
 2014088:	00002606 	br	2014124 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201408c:	0001883a 	nop
 2014090:	00000506 	br	20140a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2014094:	0001883a 	nop
 2014098:	00000306 	br	20140a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201409c:	0001883a 	nop
 20140a0:	00000106 	br	20140a8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20140a4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 20140a8:	e0bff117 	ldw	r2,-60(fp)
 20140ac:	10800017 	ldw	r2,0(r2)
 20140b0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20140b4:	e0bff117 	ldw	r2,-60(fp)
 20140b8:	103f871e 	bne	r2,zero,2013ed8 <OSFlagPost+0x134>
 20140bc:	e0bff317 	ldw	r2,-52(fp)
 20140c0:	e0bff715 	stw	r2,-36(fp)
 20140c4:	e0bff717 	ldw	r2,-36(fp)
 20140c8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 20140cc:	e0bff203 	ldbu	r2,-56(fp)
 20140d0:	10800058 	cmpnei	r2,r2,1
 20140d4:	1000011e 	bne	r2,zero,20140dc <OSFlagPost+0x338>
        OS_Sched();
 20140d8:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20140dc:	0005303a 	rdctl	r2,status
 20140e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20140e4:	e0fffa17 	ldw	r3,-24(fp)
 20140e8:	00bfff84 	movi	r2,-2
 20140ec:	1884703a 	and	r2,r3,r2
 20140f0:	1001703a 	wrctl	status,r2
  
  return context;
 20140f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20140f8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 20140fc:	e0bffc17 	ldw	r2,-16(fp)
 2014100:	1080020b 	ldhu	r2,8(r2)
 2014104:	e0bff90d 	sth	r2,-28(fp)
 2014108:	e0bff317 	ldw	r2,-52(fp)
 201410c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014110:	e0bff817 	ldw	r2,-32(fp)
 2014114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2014118:	e0bfff17 	ldw	r2,-4(fp)
 201411c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2014120:	e0bff90b 	ldhu	r2,-28(fp)
}
 2014124:	e037883a 	mov	sp,fp
 2014128:	dfc00117 	ldw	ra,4(sp)
 201412c:	df000017 	ldw	fp,0(sp)
 2014130:	dec00204 	addi	sp,sp,8
 2014134:	f800283a 	ret

02014138 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2014138:	defff904 	addi	sp,sp,-28
 201413c:	df000615 	stw	fp,24(sp)
 2014140:	df000604 	addi	fp,sp,24
 2014144:	e13ffe15 	stw	r4,-8(fp)
 2014148:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 201414c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2014150:	e0bfff17 	ldw	r2,-4(fp)
 2014154:	1000021e 	bne	r2,zero,2014160 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2014158:	0005883a 	mov	r2,zero
 201415c:	00002306 	br	20141ec <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2014160:	e0bffe17 	ldw	r2,-8(fp)
 2014164:	1000051e 	bne	r2,zero,201417c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2014168:	e0bfff17 	ldw	r2,-4(fp)
 201416c:	00c01b84 	movi	r3,110
 2014170:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2014174:	0005883a 	mov	r2,zero
 2014178:	00001c06 	br	20141ec <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201417c:	e0bffe17 	ldw	r2,-8(fp)
 2014180:	10800003 	ldbu	r2,0(r2)
 2014184:	10803fcc 	andi	r2,r2,255
 2014188:	10800160 	cmpeqi	r2,r2,5
 201418c:	1000051e 	bne	r2,zero,20141a4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2014190:	e0bfff17 	ldw	r2,-4(fp)
 2014194:	00c00044 	movi	r3,1
 2014198:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201419c:	0005883a 	mov	r2,zero
 20141a0:	00001206 	br	20141ec <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20141a4:	0005303a 	rdctl	r2,status
 20141a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20141ac:	e0fffc17 	ldw	r3,-16(fp)
 20141b0:	00bfff84 	movi	r2,-2
 20141b4:	1884703a 	and	r2,r3,r2
 20141b8:	1001703a 	wrctl	status,r2
  
  return context;
 20141bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20141c0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 20141c4:	e0bffe17 	ldw	r2,-8(fp)
 20141c8:	1080020b 	ldhu	r2,8(r2)
 20141cc:	e0bffb0d 	sth	r2,-20(fp)
 20141d0:	e0bffa17 	ldw	r2,-24(fp)
 20141d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20141d8:	e0bffd17 	ldw	r2,-12(fp)
 20141dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20141e0:	e0bfff17 	ldw	r2,-4(fp)
 20141e4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 20141e8:	e0bffb0b 	ldhu	r2,-20(fp)
}
 20141ec:	e037883a 	mov	sp,fp
 20141f0:	df000017 	ldw	fp,0(sp)
 20141f4:	dec00104 	addi	sp,sp,4
 20141f8:	f800283a 	ret

020141fc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 20141fc:	defff804 	addi	sp,sp,-32
 2014200:	df000715 	stw	fp,28(sp)
 2014204:	df000704 	addi	fp,sp,28
 2014208:	e13ffb15 	stw	r4,-20(fp)
 201420c:	e17ffc15 	stw	r5,-16(fp)
 2014210:	3009883a 	mov	r4,r6
 2014214:	3807883a 	mov	r3,r7
 2014218:	e0800117 	ldw	r2,4(fp)
 201421c:	e13ffd0d 	sth	r4,-12(fp)
 2014220:	e0fffe05 	stb	r3,-8(fp)
 2014224:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2014228:	d0a73417 	ldw	r2,-25392(gp)
 201422c:	d0e73417 	ldw	r3,-25392(gp)
 2014230:	18c00c03 	ldbu	r3,48(r3)
 2014234:	18c00814 	ori	r3,r3,32
 2014238:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201423c:	d0a73417 	ldw	r2,-25392(gp)
 2014240:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2014244:	d0a73417 	ldw	r2,-25392(gp)
 2014248:	e0ffff0b 	ldhu	r3,-4(fp)
 201424c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2014250:	d0a73417 	ldw	r2,-25392(gp)
 2014254:	e0fffc17 	ldw	r3,-16(fp)
 2014258:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 201425c:	e0bffc17 	ldw	r2,-16(fp)
 2014260:	e0fffd0b 	ldhu	r3,-12(fp)
 2014264:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2014268:	e0bffc17 	ldw	r2,-16(fp)
 201426c:	e0fffe03 	ldbu	r3,-8(fp)
 2014270:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2014274:	d0e73417 	ldw	r3,-25392(gp)
 2014278:	e0bffc17 	ldw	r2,-16(fp)
 201427c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2014280:	e0bffb17 	ldw	r2,-20(fp)
 2014284:	10c00117 	ldw	r3,4(r2)
 2014288:	e0bffc17 	ldw	r2,-16(fp)
 201428c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2014290:	e0bffc17 	ldw	r2,-16(fp)
 2014294:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2014298:	e0bffc17 	ldw	r2,-16(fp)
 201429c:	e0fffb17 	ldw	r3,-20(fp)
 20142a0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20142a4:	e0bffb17 	ldw	r2,-20(fp)
 20142a8:	10800117 	ldw	r2,4(r2)
 20142ac:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20142b0:	e0bff917 	ldw	r2,-28(fp)
 20142b4:	10000326 	beq	r2,zero,20142c4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20142b8:	e0bff917 	ldw	r2,-28(fp)
 20142bc:	e0fffc17 	ldw	r3,-16(fp)
 20142c0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20142c4:	e0bffb17 	ldw	r2,-20(fp)
 20142c8:	e0fffc17 	ldw	r3,-16(fp)
 20142cc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 20142d0:	d0a73417 	ldw	r2,-25392(gp)
 20142d4:	10800d03 	ldbu	r2,52(r2)
 20142d8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 20142dc:	e0fffa03 	ldbu	r3,-24(fp)
 20142e0:	e13ffa03 	ldbu	r4,-24(fp)
 20142e4:	d0a73144 	addi	r2,gp,-25403
 20142e8:	2085883a 	add	r2,r4,r2
 20142ec:	10800003 	ldbu	r2,0(r2)
 20142f0:	1009883a 	mov	r4,r2
 20142f4:	d0a73417 	ldw	r2,-25392(gp)
 20142f8:	10800d43 	ldbu	r2,53(r2)
 20142fc:	0084303a 	nor	r2,zero,r2
 2014300:	2084703a 	and	r2,r4,r2
 2014304:	1009883a 	mov	r4,r2
 2014308:	d0a73144 	addi	r2,gp,-25403
 201430c:	1885883a 	add	r2,r3,r2
 2014310:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2014314:	e0fffa03 	ldbu	r3,-24(fp)
 2014318:	d0a73144 	addi	r2,gp,-25403
 201431c:	1885883a 	add	r2,r3,r2
 2014320:	10800003 	ldbu	r2,0(r2)
 2014324:	10803fcc 	andi	r2,r2,255
 2014328:	1000071e 	bne	r2,zero,2014348 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201432c:	d0a73417 	ldw	r2,-25392(gp)
 2014330:	10800d83 	ldbu	r2,54(r2)
 2014334:	0084303a 	nor	r2,zero,r2
 2014338:	1007883a 	mov	r3,r2
 201433c:	d0a73103 	ldbu	r2,-25404(gp)
 2014340:	1884703a 	and	r2,r3,r2
 2014344:	d0a73105 	stb	r2,-25404(gp)
    }
}
 2014348:	0001883a 	nop
 201434c:	e037883a 	mov	sp,fp
 2014350:	df000017 	ldw	fp,0(sp)
 2014354:	dec00104 	addi	sp,sp,4
 2014358:	f800283a 	ret

0201435c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 201435c:	defffb04 	addi	sp,sp,-20
 2014360:	dfc00415 	stw	ra,16(sp)
 2014364:	df000315 	stw	fp,12(sp)
 2014368:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201436c:	0140dc04 	movi	r5,880
 2014370:	010080b4 	movhi	r4,514
 2014374:	21144d04 	addi	r4,r4,20788
 2014378:	20125a00 	call	20125a0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201437c:	008080b4 	movhi	r2,514
 2014380:	10944d04 	addi	r2,r2,20788
 2014384:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2014388:	008080b4 	movhi	r2,514
 201438c:	10945804 	addi	r2,r2,20832
 2014390:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2014394:	e03ffd0d 	sth	zero,-12(fp)
 2014398:	00001306 	br	20143e8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201439c:	e0bffe17 	ldw	r2,-8(fp)
 20143a0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 20143a4:	e0bffe17 	ldw	r2,-8(fp)
 20143a8:	e0ffff17 	ldw	r3,-4(fp)
 20143ac:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 20143b0:	e0bffe17 	ldw	r2,-8(fp)
 20143b4:	00c00fc4 	movi	r3,63
 20143b8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20143bc:	e0bffe17 	ldw	r2,-8(fp)
 20143c0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 20143c4:	e0bffe17 	ldw	r2,-8(fp)
 20143c8:	10800b04 	addi	r2,r2,44
 20143cc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 20143d0:	e0bfff17 	ldw	r2,-4(fp)
 20143d4:	10800b04 	addi	r2,r2,44
 20143d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20143dc:	e0bffd0b 	ldhu	r2,-12(fp)
 20143e0:	10800044 	addi	r2,r2,1
 20143e4:	e0bffd0d 	sth	r2,-12(fp)
 20143e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20143ec:	108004f0 	cmpltui	r2,r2,19
 20143f0:	103fea1e 	bne	r2,zero,201439c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20143f4:	e0bffe17 	ldw	r2,-8(fp)
 20143f8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 20143fc:	e0bffe17 	ldw	r2,-8(fp)
 2014400:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2014404:	e0bffe17 	ldw	r2,-8(fp)
 2014408:	00c00fc4 	movi	r3,63
 201440c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2014410:	e0bffe17 	ldw	r2,-8(fp)
 2014414:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2014418:	008080b4 	movhi	r2,514
 201441c:	10944d04 	addi	r2,r2,20788
 2014420:	d0a73615 	stw	r2,-25384(gp)
#endif
}
 2014424:	0001883a 	nop
 2014428:	e037883a 	mov	sp,fp
 201442c:	dfc00117 	ldw	ra,4(sp)
 2014430:	df000017 	ldw	fp,0(sp)
 2014434:	dec00204 	addi	sp,sp,8
 2014438:	f800283a 	ret

0201443c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201443c:	defffa04 	addi	sp,sp,-24
 2014440:	dfc00515 	stw	ra,20(sp)
 2014444:	df000415 	stw	fp,16(sp)
 2014448:	df000404 	addi	fp,sp,16
 201444c:	e13ffe15 	stw	r4,-8(fp)
 2014450:	2805883a 	mov	r2,r5
 2014454:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2014458:	e0bffe17 	ldw	r2,-8(fp)
 201445c:	10800217 	ldw	r2,8(r2)
 2014460:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2014464:	e0bffd17 	ldw	r2,-12(fp)
 2014468:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201446c:	e0bffd17 	ldw	r2,-12(fp)
 2014470:	e0ffff0b 	ldhu	r3,-4(fp)
 2014474:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2014478:	e0bffd17 	ldw	r2,-12(fp)
 201447c:	10c00c03 	ldbu	r3,48(r2)
 2014480:	00bff7c4 	movi	r2,-33
 2014484:	1884703a 	and	r2,r3,r2
 2014488:	1007883a 	mov	r3,r2
 201448c:	e0bffd17 	ldw	r2,-12(fp)
 2014490:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014494:	e0bffd17 	ldw	r2,-12(fp)
 2014498:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201449c:	e0bffd17 	ldw	r2,-12(fp)
 20144a0:	10800c03 	ldbu	r2,48(r2)
 20144a4:	10803fcc 	andi	r2,r2,255
 20144a8:	1000181e 	bne	r2,zero,201450c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 20144ac:	e0bffd17 	ldw	r2,-12(fp)
 20144b0:	10c00d83 	ldbu	r3,54(r2)
 20144b4:	d0a73103 	ldbu	r2,-25404(gp)
 20144b8:	1884b03a 	or	r2,r3,r2
 20144bc:	d0a73105 	stb	r2,-25404(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20144c0:	e0bffd17 	ldw	r2,-12(fp)
 20144c4:	10800d03 	ldbu	r2,52(r2)
 20144c8:	10c03fcc 	andi	r3,r2,255
 20144cc:	e0bffd17 	ldw	r2,-12(fp)
 20144d0:	10800d03 	ldbu	r2,52(r2)
 20144d4:	11003fcc 	andi	r4,r2,255
 20144d8:	d0a73144 	addi	r2,gp,-25403
 20144dc:	2085883a 	add	r2,r4,r2
 20144e0:	11000003 	ldbu	r4,0(r2)
 20144e4:	e0bffd17 	ldw	r2,-12(fp)
 20144e8:	10800d43 	ldbu	r2,53(r2)
 20144ec:	2084b03a 	or	r2,r4,r2
 20144f0:	1009883a 	mov	r4,r2
 20144f4:	d0a73144 	addi	r2,gp,-25403
 20144f8:	1885883a 	add	r2,r3,r2
 20144fc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2014500:	00800044 	movi	r2,1
 2014504:	e0bffc05 	stb	r2,-16(fp)
 2014508:	00000106 	br	2014510 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201450c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2014510:	e13ffe17 	ldw	r4,-8(fp)
 2014514:	20145300 	call	2014530 <OS_FlagUnlink>
    return (sched);
 2014518:	e0bffc03 	ldbu	r2,-16(fp)
}
 201451c:	e037883a 	mov	sp,fp
 2014520:	dfc00117 	ldw	ra,4(sp)
 2014524:	df000017 	ldw	fp,0(sp)
 2014528:	dec00204 	addi	sp,sp,8
 201452c:	f800283a 	ret

02014530 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2014530:	defffa04 	addi	sp,sp,-24
 2014534:	df000515 	stw	fp,20(sp)
 2014538:	df000504 	addi	fp,sp,20
 201453c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2014540:	e0bfff17 	ldw	r2,-4(fp)
 2014544:	10800117 	ldw	r2,4(r2)
 2014548:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201454c:	e0bfff17 	ldw	r2,-4(fp)
 2014550:	10800017 	ldw	r2,0(r2)
 2014554:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2014558:	e0bffb17 	ldw	r2,-20(fp)
 201455c:	10000b1e 	bne	r2,zero,201458c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2014560:	e0bfff17 	ldw	r2,-4(fp)
 2014564:	10800317 	ldw	r2,12(r2)
 2014568:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201456c:	e0bffd17 	ldw	r2,-12(fp)
 2014570:	e0fffc17 	ldw	r3,-16(fp)
 2014574:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2014578:	e0bffc17 	ldw	r2,-16(fp)
 201457c:	10000b26 	beq	r2,zero,20145ac <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2014580:	e0bffc17 	ldw	r2,-16(fp)
 2014584:	10000115 	stw	zero,4(r2)
 2014588:	00000806 	br	20145ac <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201458c:	e0bffb17 	ldw	r2,-20(fp)
 2014590:	e0fffc17 	ldw	r3,-16(fp)
 2014594:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 2014598:	e0bffc17 	ldw	r2,-16(fp)
 201459c:	10000326 	beq	r2,zero,20145ac <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 20145a0:	e0bffc17 	ldw	r2,-16(fp)
 20145a4:	e0fffb17 	ldw	r3,-20(fp)
 20145a8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 20145ac:	e0bfff17 	ldw	r2,-4(fp)
 20145b0:	10800217 	ldw	r2,8(r2)
 20145b4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 20145b8:	e0bffe17 	ldw	r2,-8(fp)
 20145bc:	10000a15 	stw	zero,40(r2)
#endif
}
 20145c0:	0001883a 	nop
 20145c4:	e037883a 	mov	sp,fp
 20145c8:	df000017 	ldw	fp,0(sp)
 20145cc:	dec00104 	addi	sp,sp,4
 20145d0:	f800283a 	ret

020145d4 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 20145d4:	defffa04 	addi	sp,sp,-24
 20145d8:	df000515 	stw	fp,20(sp)
 20145dc:	df000504 	addi	fp,sp,20
 20145e0:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 20145e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 20145e8:	e0bfff17 	ldw	r2,-4(fp)
 20145ec:	1000021e 	bne	r2,zero,20145f8 <OSMboxAccept+0x24>
        return ((void *)0);
 20145f0:	0005883a 	mov	r2,zero
 20145f4:	00001906 	br	201465c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 20145f8:	e0bfff17 	ldw	r2,-4(fp)
 20145fc:	10800003 	ldbu	r2,0(r2)
 2014600:	10803fcc 	andi	r2,r2,255
 2014604:	10800060 	cmpeqi	r2,r2,1
 2014608:	1000021e 	bne	r2,zero,2014614 <OSMboxAccept+0x40>
        return ((void *)0);
 201460c:	0005883a 	mov	r2,zero
 2014610:	00001206 	br	201465c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014614:	0005303a 	rdctl	r2,status
 2014618:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201461c:	e0fffd17 	ldw	r3,-12(fp)
 2014620:	00bfff84 	movi	r2,-2
 2014624:	1884703a 	and	r2,r3,r2
 2014628:	1001703a 	wrctl	status,r2
  
  return context;
 201462c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2014630:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 2014634:	e0bfff17 	ldw	r2,-4(fp)
 2014638:	10800117 	ldw	r2,4(r2)
 201463c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 2014640:	e0bfff17 	ldw	r2,-4(fp)
 2014644:	10000115 	stw	zero,4(r2)
 2014648:	e0bffb17 	ldw	r2,-20(fp)
 201464c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014650:	e0bffe17 	ldw	r2,-8(fp)
 2014654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 2014658:	e0bffc17 	ldw	r2,-16(fp)
}
 201465c:	e037883a 	mov	sp,fp
 2014660:	df000017 	ldw	fp,0(sp)
 2014664:	dec00104 	addi	sp,sp,4
 2014668:	f800283a 	ret

0201466c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201466c:	defff904 	addi	sp,sp,-28
 2014670:	dfc00615 	stw	ra,24(sp)
 2014674:	df000515 	stw	fp,20(sp)
 2014678:	df000504 	addi	fp,sp,20
 201467c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014680:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2014684:	d0a73303 	ldbu	r2,-25396(gp)
 2014688:	10803fcc 	andi	r2,r2,255
 201468c:	10000226 	beq	r2,zero,2014698 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2014690:	0005883a 	mov	r2,zero
 2014694:	00002506 	br	201472c <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014698:	0005303a 	rdctl	r2,status
 201469c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146a0:	e0fffe17 	ldw	r3,-8(fp)
 20146a4:	00bfff84 	movi	r2,-2
 20146a8:	1884703a 	and	r2,r3,r2
 20146ac:	1001703a 	wrctl	status,r2
  
  return context;
 20146b0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20146b4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 20146b8:	d0a73217 	ldw	r2,-25400(gp)
 20146bc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 20146c0:	d0a73217 	ldw	r2,-25400(gp)
 20146c4:	10000326 	beq	r2,zero,20146d4 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20146c8:	d0a73217 	ldw	r2,-25400(gp)
 20146cc:	10800117 	ldw	r2,4(r2)
 20146d0:	d0a73215 	stw	r2,-25400(gp)
 20146d4:	e0bffb17 	ldw	r2,-20(fp)
 20146d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20146dc:	e0bffc17 	ldw	r2,-16(fp)
 20146e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 20146e4:	e0bffd17 	ldw	r2,-12(fp)
 20146e8:	10000f26 	beq	r2,zero,2014728 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 20146ec:	e0bffd17 	ldw	r2,-12(fp)
 20146f0:	00c00044 	movi	r3,1
 20146f4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 20146f8:	e0bffd17 	ldw	r2,-12(fp)
 20146fc:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2014700:	e0bffd17 	ldw	r2,-12(fp)
 2014704:	e0ffff17 	ldw	r3,-4(fp)
 2014708:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201470c:	e0bffd17 	ldw	r2,-12(fp)
 2014710:	00c00fc4 	movi	r3,63
 2014714:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2014718:	e0bffd17 	ldw	r2,-12(fp)
 201471c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2014720:	e13ffd17 	ldw	r4,-12(fp)
 2014724:	20121c00 	call	20121c0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 2014728:	e0bffd17 	ldw	r2,-12(fp)
}
 201472c:	e037883a 	mov	sp,fp
 2014730:	dfc00117 	ldw	ra,4(sp)
 2014734:	df000017 	ldw	fp,0(sp)
 2014738:	dec00204 	addi	sp,sp,8
 201473c:	f800283a 	ret

02014740 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014740:	defff304 	addi	sp,sp,-52
 2014744:	dfc00c15 	stw	ra,48(sp)
 2014748:	df000b15 	stw	fp,44(sp)
 201474c:	df000b04 	addi	fp,sp,44
 2014750:	e13ffd15 	stw	r4,-12(fp)
 2014754:	2805883a 	mov	r2,r5
 2014758:	e1bfff15 	stw	r6,-4(fp)
 201475c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014760:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014764:	e0bfff17 	ldw	r2,-4(fp)
 2014768:	1000021e 	bne	r2,zero,2014774 <OSMboxDel+0x34>
        return (pevent);
 201476c:	e0bffd17 	ldw	r2,-12(fp)
 2014770:	00007e06 	br	201496c <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014774:	e0bffd17 	ldw	r2,-12(fp)
 2014778:	1000051e 	bne	r2,zero,2014790 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201477c:	e0bfff17 	ldw	r2,-4(fp)
 2014780:	00c00104 	movi	r3,4
 2014784:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014788:	e0bffd17 	ldw	r2,-12(fp)
 201478c:	00007706 	br	201496c <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2014790:	e0bffd17 	ldw	r2,-12(fp)
 2014794:	10800003 	ldbu	r2,0(r2)
 2014798:	10803fcc 	andi	r2,r2,255
 201479c:	10800060 	cmpeqi	r2,r2,1
 20147a0:	1000051e 	bne	r2,zero,20147b8 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20147a4:	e0bfff17 	ldw	r2,-4(fp)
 20147a8:	00c00044 	movi	r3,1
 20147ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20147b0:	e0bffd17 	ldw	r2,-12(fp)
 20147b4:	00006d06 	br	201496c <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20147b8:	d0a73303 	ldbu	r2,-25396(gp)
 20147bc:	10803fcc 	andi	r2,r2,255
 20147c0:	10000526 	beq	r2,zero,20147d8 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20147c4:	e0bfff17 	ldw	r2,-4(fp)
 20147c8:	00c003c4 	movi	r3,15
 20147cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20147d0:	e0bffd17 	ldw	r2,-12(fp)
 20147d4:	00006506 	br	201496c <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20147d8:	0005303a 	rdctl	r2,status
 20147dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20147e0:	e0fffc17 	ldw	r3,-16(fp)
 20147e4:	00bfff84 	movi	r2,-2
 20147e8:	1884703a 	and	r2,r3,r2
 20147ec:	1001703a 	wrctl	status,r2
  
  return context;
 20147f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20147f4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 20147f8:	e0bffd17 	ldw	r2,-12(fp)
 20147fc:	10800283 	ldbu	r2,10(r2)
 2014800:	10803fcc 	andi	r2,r2,255
 2014804:	10000326 	beq	r2,zero,2014814 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2014808:	00800044 	movi	r2,1
 201480c:	e0bff505 	stb	r2,-44(fp)
 2014810:	00000106 	br	2014818 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2014814:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2014818:	e0bffe03 	ldbu	r2,-8(fp)
 201481c:	10000326 	beq	r2,zero,201482c <OSMboxDel+0xec>
 2014820:	10800060 	cmpeqi	r2,r2,1
 2014824:	1000281e 	bne	r2,zero,20148c8 <OSMboxDel+0x188>
 2014828:	00004506 	br	2014940 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 201482c:	e0bff503 	ldbu	r2,-44(fp)
 2014830:	1000161e 	bne	r2,zero,201488c <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2014834:	e0bffd17 	ldw	r2,-12(fp)
 2014838:	00c00fc4 	movi	r3,63
 201483c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2014840:	e0bffd17 	ldw	r2,-12(fp)
 2014844:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 2014848:	e0bffd17 	ldw	r2,-12(fp)
 201484c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 2014850:	d0e73217 	ldw	r3,-25400(gp)
 2014854:	e0bffd17 	ldw	r2,-12(fp)
 2014858:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 201485c:	e0bffd17 	ldw	r2,-12(fp)
 2014860:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 2014864:	e0bffd17 	ldw	r2,-12(fp)
 2014868:	d0a73215 	stw	r2,-25400(gp)
 201486c:	e0bff717 	ldw	r2,-36(fp)
 2014870:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014874:	e0bff817 	ldw	r2,-32(fp)
 2014878:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201487c:	e0bfff17 	ldw	r2,-4(fp)
 2014880:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 2014884:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2014888:	00003706 	br	2014968 <OSMboxDel+0x228>
 201488c:	e0bff717 	ldw	r2,-36(fp)
 2014890:	e0bff915 	stw	r2,-28(fp)
 2014894:	e0bff917 	ldw	r2,-28(fp)
 2014898:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201489c:	e0bfff17 	ldw	r2,-4(fp)
 20148a0:	00c01244 	movi	r3,73
 20148a4:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 20148a8:	e0bffd17 	ldw	r2,-12(fp)
 20148ac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20148b0:	00002d06 	br	2014968 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20148b4:	000f883a 	mov	r7,zero
 20148b8:	01800084 	movi	r6,2
 20148bc:	000b883a 	mov	r5,zero
 20148c0:	e13ffd17 	ldw	r4,-12(fp)
 20148c4:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 20148c8:	e0bffd17 	ldw	r2,-12(fp)
 20148cc:	10800283 	ldbu	r2,10(r2)
 20148d0:	10803fcc 	andi	r2,r2,255
 20148d4:	103ff71e 	bne	r2,zero,20148b4 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20148d8:	e0bffd17 	ldw	r2,-12(fp)
 20148dc:	00c00fc4 	movi	r3,63
 20148e0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20148e4:	e0bffd17 	ldw	r2,-12(fp)
 20148e8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20148ec:	e0bffd17 	ldw	r2,-12(fp)
 20148f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 20148f4:	d0e73217 	ldw	r3,-25400(gp)
 20148f8:	e0bffd17 	ldw	r2,-12(fp)
 20148fc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2014900:	e0bffd17 	ldw	r2,-12(fp)
 2014904:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2014908:	e0bffd17 	ldw	r2,-12(fp)
 201490c:	d0a73215 	stw	r2,-25400(gp)
 2014910:	e0bff717 	ldw	r2,-36(fp)
 2014914:	e0bffa15 	stw	r2,-24(fp)
 2014918:	e0bffa17 	ldw	r2,-24(fp)
 201491c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2014920:	e0bff503 	ldbu	r2,-44(fp)
 2014924:	10800058 	cmpnei	r2,r2,1
 2014928:	1000011e 	bne	r2,zero,2014930 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201492c:	201265c0 	call	201265c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2014930:	e0bfff17 	ldw	r2,-4(fp)
 2014934:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2014938:	e03ff615 	stw	zero,-40(fp)
             break;
 201493c:	00000a06 	br	2014968 <OSMboxDel+0x228>
 2014940:	e0bff717 	ldw	r2,-36(fp)
 2014944:	e0bffb15 	stw	r2,-20(fp)
 2014948:	e0bffb17 	ldw	r2,-20(fp)
 201494c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2014950:	e0bfff17 	ldw	r2,-4(fp)
 2014954:	00c001c4 	movi	r3,7
 2014958:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 201495c:	e0bffd17 	ldw	r2,-12(fp)
 2014960:	e0bff615 	stw	r2,-40(fp)
             break;
 2014964:	0001883a 	nop
    }
    return (pevent_return);
 2014968:	e0bff617 	ldw	r2,-40(fp)
}
 201496c:	e037883a 	mov	sp,fp
 2014970:	dfc00117 	ldw	ra,4(sp)
 2014974:	df000017 	ldw	fp,0(sp)
 2014978:	dec00204 	addi	sp,sp,8
 201497c:	f800283a 	ret

02014980 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2014980:	defff404 	addi	sp,sp,-48
 2014984:	dfc00b15 	stw	ra,44(sp)
 2014988:	df000a15 	stw	fp,40(sp)
 201498c:	df000a04 	addi	fp,sp,40
 2014990:	e13ffd15 	stw	r4,-12(fp)
 2014994:	2805883a 	mov	r2,r5
 2014998:	e1bfff15 	stw	r6,-4(fp)
 201499c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20149a0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20149a4:	e0bfff17 	ldw	r2,-4(fp)
 20149a8:	1000021e 	bne	r2,zero,20149b4 <OSMboxPend+0x34>
        return ((void *)0);
 20149ac:	0005883a 	mov	r2,zero
 20149b0:	00007b06 	br	2014ba0 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20149b4:	e0bffd17 	ldw	r2,-12(fp)
 20149b8:	1000051e 	bne	r2,zero,20149d0 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20149bc:	e0bfff17 	ldw	r2,-4(fp)
 20149c0:	00c00104 	movi	r3,4
 20149c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20149c8:	0005883a 	mov	r2,zero
 20149cc:	00007406 	br	2014ba0 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 20149d0:	e0bffd17 	ldw	r2,-12(fp)
 20149d4:	10800003 	ldbu	r2,0(r2)
 20149d8:	10803fcc 	andi	r2,r2,255
 20149dc:	10800060 	cmpeqi	r2,r2,1
 20149e0:	1000051e 	bne	r2,zero,20149f8 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20149e4:	e0bfff17 	ldw	r2,-4(fp)
 20149e8:	00c00044 	movi	r3,1
 20149ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20149f0:	0005883a 	mov	r2,zero
 20149f4:	00006a06 	br	2014ba0 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 20149f8:	d0a73303 	ldbu	r2,-25396(gp)
 20149fc:	10803fcc 	andi	r2,r2,255
 2014a00:	10000526 	beq	r2,zero,2014a18 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2014a04:	e0bfff17 	ldw	r2,-4(fp)
 2014a08:	00c00084 	movi	r3,2
 2014a0c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2014a10:	0005883a 	mov	r2,zero
 2014a14:	00006206 	br	2014ba0 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2014a18:	d0a72503 	ldbu	r2,-25452(gp)
 2014a1c:	10803fcc 	andi	r2,r2,255
 2014a20:	10000526 	beq	r2,zero,2014a38 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2014a24:	e0bfff17 	ldw	r2,-4(fp)
 2014a28:	00c00344 	movi	r3,13
 2014a2c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2014a30:	0005883a 	mov	r2,zero
 2014a34:	00005a06 	br	2014ba0 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a38:	0005303a 	rdctl	r2,status
 2014a3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a40:	e0fffc17 	ldw	r3,-16(fp)
 2014a44:	00bfff84 	movi	r2,-2
 2014a48:	1884703a 	and	r2,r3,r2
 2014a4c:	1001703a 	wrctl	status,r2
  
  return context;
 2014a50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014a54:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2014a58:	e0bffd17 	ldw	r2,-12(fp)
 2014a5c:	10800117 	ldw	r2,4(r2)
 2014a60:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 2014a64:	e0bff617 	ldw	r2,-40(fp)
 2014a68:	10000a26 	beq	r2,zero,2014a94 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2014a6c:	e0bffd17 	ldw	r2,-12(fp)
 2014a70:	10000115 	stw	zero,4(r2)
 2014a74:	e0bff717 	ldw	r2,-36(fp)
 2014a78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014a7c:	e0bff817 	ldw	r2,-32(fp)
 2014a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2014a84:	e0bfff17 	ldw	r2,-4(fp)
 2014a88:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2014a8c:	e0bff617 	ldw	r2,-40(fp)
 2014a90:	00004306 	br	2014ba0 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2014a94:	d0a73417 	ldw	r2,-25392(gp)
 2014a98:	d0e73417 	ldw	r3,-25392(gp)
 2014a9c:	18c00c03 	ldbu	r3,48(r3)
 2014aa0:	18c00094 	ori	r3,r3,2
 2014aa4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014aa8:	d0a73417 	ldw	r2,-25392(gp)
 2014aac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2014ab0:	d0a73417 	ldw	r2,-25392(gp)
 2014ab4:	e0fffe0b 	ldhu	r3,-8(fp)
 2014ab8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2014abc:	e13ffd17 	ldw	r4,-12(fp)
 2014ac0:	2011da80 	call	2011da8 <OS_EventTaskWait>
 2014ac4:	e0bff717 	ldw	r2,-36(fp)
 2014ac8:	e0bffb15 	stw	r2,-20(fp)
 2014acc:	e0bffb17 	ldw	r2,-20(fp)
 2014ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2014ad4:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ad8:	0005303a 	rdctl	r2,status
 2014adc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ae0:	e0fff917 	ldw	r3,-28(fp)
 2014ae4:	00bfff84 	movi	r2,-2
 2014ae8:	1884703a 	and	r2,r3,r2
 2014aec:	1001703a 	wrctl	status,r2
  
  return context;
 2014af0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2014af4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2014af8:	d0a73417 	ldw	r2,-25392(gp)
 2014afc:	10800c43 	ldbu	r2,49(r2)
 2014b00:	10803fcc 	andi	r2,r2,255
 2014b04:	10000326 	beq	r2,zero,2014b14 <OSMboxPend+0x194>
 2014b08:	108000a0 	cmpeqi	r2,r2,2
 2014b0c:	1000071e 	bne	r2,zero,2014b2c <OSMboxPend+0x1ac>
 2014b10:	00000b06 	br	2014b40 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2014b14:	d0a73417 	ldw	r2,-25392(gp)
 2014b18:	10800917 	ldw	r2,36(r2)
 2014b1c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2014b20:	e0bfff17 	ldw	r2,-4(fp)
 2014b24:	10000005 	stb	zero,0(r2)
             break;
 2014b28:	00000e06 	br	2014b64 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2014b2c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2014b30:	e0bfff17 	ldw	r2,-4(fp)
 2014b34:	00c00384 	movi	r3,14
 2014b38:	10c00005 	stb	r3,0(r2)
             break;
 2014b3c:	00000906 	br	2014b64 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2014b40:	d0a73417 	ldw	r2,-25392(gp)
 2014b44:	e17ffd17 	ldw	r5,-12(fp)
 2014b48:	1009883a 	mov	r4,r2
 2014b4c:	20120080 	call	2012008 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2014b50:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2014b54:	e0bfff17 	ldw	r2,-4(fp)
 2014b58:	00c00284 	movi	r3,10
 2014b5c:	10c00005 	stb	r3,0(r2)
             break;
 2014b60:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2014b64:	d0a73417 	ldw	r2,-25392(gp)
 2014b68:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2014b6c:	d0a73417 	ldw	r2,-25392(gp)
 2014b70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2014b74:	d0a73417 	ldw	r2,-25392(gp)
 2014b78:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2014b7c:	d0a73417 	ldw	r2,-25392(gp)
 2014b80:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2014b84:	d0a73417 	ldw	r2,-25392(gp)
 2014b88:	10000915 	stw	zero,36(r2)
 2014b8c:	e0bff717 	ldw	r2,-36(fp)
 2014b90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b94:	e0bffa17 	ldw	r2,-24(fp)
 2014b98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2014b9c:	e0bff617 	ldw	r2,-40(fp)
}
 2014ba0:	e037883a 	mov	sp,fp
 2014ba4:	dfc00117 	ldw	ra,4(sp)
 2014ba8:	df000017 	ldw	fp,0(sp)
 2014bac:	dec00204 	addi	sp,sp,8
 2014bb0:	f800283a 	ret

02014bb4 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014bb4:	defff604 	addi	sp,sp,-40
 2014bb8:	dfc00915 	stw	ra,36(sp)
 2014bbc:	df000815 	stw	fp,32(sp)
 2014bc0:	df000804 	addi	fp,sp,32
 2014bc4:	e13ffd15 	stw	r4,-12(fp)
 2014bc8:	2805883a 	mov	r2,r5
 2014bcc:	e1bfff15 	stw	r6,-4(fp)
 2014bd0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014bd4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014bd8:	e0bfff17 	ldw	r2,-4(fp)
 2014bdc:	1000021e 	bne	r2,zero,2014be8 <OSMboxPendAbort+0x34>
        return (0);
 2014be0:	0005883a 	mov	r2,zero
 2014be4:	00004906 	br	2014d0c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014be8:	e0bffd17 	ldw	r2,-12(fp)
 2014bec:	1000051e 	bne	r2,zero,2014c04 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014bf0:	e0bfff17 	ldw	r2,-4(fp)
 2014bf4:	00c00104 	movi	r3,4
 2014bf8:	10c00005 	stb	r3,0(r2)
        return (0);
 2014bfc:	0005883a 	mov	r2,zero
 2014c00:	00004206 	br	2014d0c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2014c04:	e0bffd17 	ldw	r2,-12(fp)
 2014c08:	10800003 	ldbu	r2,0(r2)
 2014c0c:	10803fcc 	andi	r2,r2,255
 2014c10:	10800060 	cmpeqi	r2,r2,1
 2014c14:	1000051e 	bne	r2,zero,2014c2c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014c18:	e0bfff17 	ldw	r2,-4(fp)
 2014c1c:	00c00044 	movi	r3,1
 2014c20:	10c00005 	stb	r3,0(r2)
        return (0);
 2014c24:	0005883a 	mov	r2,zero
 2014c28:	00003806 	br	2014d0c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014c2c:	0005303a 	rdctl	r2,status
 2014c30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014c34:	e0fffc17 	ldw	r3,-16(fp)
 2014c38:	00bfff84 	movi	r2,-2
 2014c3c:	1884703a 	and	r2,r3,r2
 2014c40:	1001703a 	wrctl	status,r2
  
  return context;
 2014c44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014c48:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2014c4c:	e0bffd17 	ldw	r2,-12(fp)
 2014c50:	10800283 	ldbu	r2,10(r2)
 2014c54:	10803fcc 	andi	r2,r2,255
 2014c58:	10002526 	beq	r2,zero,2014cf0 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2014c5c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2014c60:	e0bffe03 	ldbu	r2,-8(fp)
 2014c64:	10800060 	cmpeqi	r2,r2,1
 2014c68:	10000e26 	beq	r2,zero,2014ca4 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2014c6c:	00000806 	br	2014c90 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2014c70:	01c00084 	movi	r7,2
 2014c74:	01800084 	movi	r6,2
 2014c78:	000b883a 	mov	r5,zero
 2014c7c:	e13ffd17 	ldw	r4,-12(fp)
 2014c80:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                     nbr_tasks++;
 2014c84:	e0bff803 	ldbu	r2,-32(fp)
 2014c88:	10800044 	addi	r2,r2,1
 2014c8c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2014c90:	e0bffd17 	ldw	r2,-12(fp)
 2014c94:	10800283 	ldbu	r2,10(r2)
 2014c98:	10803fcc 	andi	r2,r2,255
 2014c9c:	103ff41e 	bne	r2,zero,2014c70 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2014ca0:	00000906 	br	2014cc8 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2014ca4:	01c00084 	movi	r7,2
 2014ca8:	01800084 	movi	r6,2
 2014cac:	000b883a 	mov	r5,zero
 2014cb0:	e13ffd17 	ldw	r4,-12(fp)
 2014cb4:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 nbr_tasks++;
 2014cb8:	e0bff803 	ldbu	r2,-32(fp)
 2014cbc:	10800044 	addi	r2,r2,1
 2014cc0:	e0bff805 	stb	r2,-32(fp)
                 break;
 2014cc4:	0001883a 	nop
 2014cc8:	e0bff917 	ldw	r2,-28(fp)
 2014ccc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014cd0:	e0bffa17 	ldw	r2,-24(fp)
 2014cd4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2014cd8:	201265c0 	call	201265c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2014cdc:	e0bfff17 	ldw	r2,-4(fp)
 2014ce0:	00c00384 	movi	r3,14
 2014ce4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2014ce8:	e0bff803 	ldbu	r2,-32(fp)
 2014cec:	00000706 	br	2014d0c <OSMboxPendAbort+0x158>
 2014cf0:	e0bff917 	ldw	r2,-28(fp)
 2014cf4:	e0bffb15 	stw	r2,-20(fp)
 2014cf8:	e0bffb17 	ldw	r2,-20(fp)
 2014cfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014d00:	e0bfff17 	ldw	r2,-4(fp)
 2014d04:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2014d08:	0005883a 	mov	r2,zero
}
 2014d0c:	e037883a 	mov	sp,fp
 2014d10:	dfc00117 	ldw	ra,4(sp)
 2014d14:	df000017 	ldw	fp,0(sp)
 2014d18:	dec00204 	addi	sp,sp,8
 2014d1c:	f800283a 	ret

02014d20 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2014d20:	defff704 	addi	sp,sp,-36
 2014d24:	dfc00815 	stw	ra,32(sp)
 2014d28:	df000715 	stw	fp,28(sp)
 2014d2c:	df000704 	addi	fp,sp,28
 2014d30:	e13ffe15 	stw	r4,-8(fp)
 2014d34:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014d38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014d3c:	e0bffe17 	ldw	r2,-8(fp)
 2014d40:	1000021e 	bne	r2,zero,2014d4c <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2014d44:	00800104 	movi	r2,4
 2014d48:	00003406 	br	2014e1c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2014d4c:	e0bfff17 	ldw	r2,-4(fp)
 2014d50:	1000021e 	bne	r2,zero,2014d5c <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2014d54:	008000c4 	movi	r2,3
 2014d58:	00003006 	br	2014e1c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2014d5c:	e0bffe17 	ldw	r2,-8(fp)
 2014d60:	10800003 	ldbu	r2,0(r2)
 2014d64:	10803fcc 	andi	r2,r2,255
 2014d68:	10800060 	cmpeqi	r2,r2,1
 2014d6c:	1000021e 	bne	r2,zero,2014d78 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2014d70:	00800044 	movi	r2,1
 2014d74:	00002906 	br	2014e1c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014d78:	0005303a 	rdctl	r2,status
 2014d7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014d80:	e0fffd17 	ldw	r3,-12(fp)
 2014d84:	00bfff84 	movi	r2,-2
 2014d88:	1884703a 	and	r2,r3,r2
 2014d8c:	1001703a 	wrctl	status,r2
  
  return context;
 2014d90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2014d94:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2014d98:	e0bffe17 	ldw	r2,-8(fp)
 2014d9c:	10800283 	ldbu	r2,10(r2)
 2014da0:	10803fcc 	andi	r2,r2,255
 2014da4:	10000c26 	beq	r2,zero,2014dd8 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2014da8:	000f883a 	mov	r7,zero
 2014dac:	01800084 	movi	r6,2
 2014db0:	e17fff17 	ldw	r5,-4(fp)
 2014db4:	e13ffe17 	ldw	r4,-8(fp)
 2014db8:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 2014dbc:	e0bff917 	ldw	r2,-28(fp)
 2014dc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014dc4:	e0bffa17 	ldw	r2,-24(fp)
 2014dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2014dcc:	201265c0 	call	201265c <OS_Sched>
        return (OS_ERR_NONE);
 2014dd0:	0005883a 	mov	r2,zero
 2014dd4:	00001106 	br	2014e1c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2014dd8:	e0bffe17 	ldw	r2,-8(fp)
 2014ddc:	10800117 	ldw	r2,4(r2)
 2014de0:	10000626 	beq	r2,zero,2014dfc <OSMboxPost+0xdc>
 2014de4:	e0bff917 	ldw	r2,-28(fp)
 2014de8:	e0bffb15 	stw	r2,-20(fp)
 2014dec:	e0bffb17 	ldw	r2,-20(fp)
 2014df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2014df4:	00800504 	movi	r2,20
 2014df8:	00000806 	br	2014e1c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2014dfc:	e0bffe17 	ldw	r2,-8(fp)
 2014e00:	e0ffff17 	ldw	r3,-4(fp)
 2014e04:	10c00115 	stw	r3,4(r2)
 2014e08:	e0bff917 	ldw	r2,-28(fp)
 2014e0c:	e0bffc15 	stw	r2,-16(fp)
 2014e10:	e0bffc17 	ldw	r2,-16(fp)
 2014e14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014e18:	0005883a 	mov	r2,zero
}
 2014e1c:	e037883a 	mov	sp,fp
 2014e20:	dfc00117 	ldw	ra,4(sp)
 2014e24:	df000017 	ldw	fp,0(sp)
 2014e28:	dec00204 	addi	sp,sp,8
 2014e2c:	f800283a 	ret

02014e30 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2014e30:	defff604 	addi	sp,sp,-40
 2014e34:	dfc00915 	stw	ra,36(sp)
 2014e38:	df000815 	stw	fp,32(sp)
 2014e3c:	df000804 	addi	fp,sp,32
 2014e40:	e13ffd15 	stw	r4,-12(fp)
 2014e44:	e17ffe15 	stw	r5,-8(fp)
 2014e48:	3005883a 	mov	r2,r6
 2014e4c:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014e50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014e54:	e0bffd17 	ldw	r2,-12(fp)
 2014e58:	1000021e 	bne	r2,zero,2014e64 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2014e5c:	00800104 	movi	r2,4
 2014e60:	00004506 	br	2014f78 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2014e64:	e0bffe17 	ldw	r2,-8(fp)
 2014e68:	1000021e 	bne	r2,zero,2014e74 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2014e6c:	008000c4 	movi	r2,3
 2014e70:	00004106 	br	2014f78 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2014e74:	e0bffd17 	ldw	r2,-12(fp)
 2014e78:	10800003 	ldbu	r2,0(r2)
 2014e7c:	10803fcc 	andi	r2,r2,255
 2014e80:	10800060 	cmpeqi	r2,r2,1
 2014e84:	1000021e 	bne	r2,zero,2014e90 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2014e88:	00800044 	movi	r2,1
 2014e8c:	00003a06 	br	2014f78 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014e90:	0005303a 	rdctl	r2,status
 2014e94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014e98:	e0fffc17 	ldw	r3,-16(fp)
 2014e9c:	00bfff84 	movi	r2,-2
 2014ea0:	1884703a 	and	r2,r3,r2
 2014ea4:	1001703a 	wrctl	status,r2
  
  return context;
 2014ea8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014eac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2014eb0:	e0bffd17 	ldw	r2,-12(fp)
 2014eb4:	10800283 	ldbu	r2,10(r2)
 2014eb8:	10803fcc 	andi	r2,r2,255
 2014ebc:	10001d26 	beq	r2,zero,2014f34 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2014ec0:	e0bfff03 	ldbu	r2,-4(fp)
 2014ec4:	1080004c 	andi	r2,r2,1
 2014ec8:	10000b26 	beq	r2,zero,2014ef8 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2014ecc:	00000506 	br	2014ee4 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2014ed0:	000f883a 	mov	r7,zero
 2014ed4:	01800084 	movi	r6,2
 2014ed8:	e17ffe17 	ldw	r5,-8(fp)
 2014edc:	e13ffd17 	ldw	r4,-12(fp)
 2014ee0:	2011c100 	call	2011c10 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2014ee4:	e0bffd17 	ldw	r2,-12(fp)
 2014ee8:	10800283 	ldbu	r2,10(r2)
 2014eec:	10803fcc 	andi	r2,r2,255
 2014ef0:	103ff71e 	bne	r2,zero,2014ed0 <OSMboxPostOpt+0xa0>
 2014ef4:	00000506 	br	2014f0c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2014ef8:	000f883a 	mov	r7,zero
 2014efc:	01800084 	movi	r6,2
 2014f00:	e17ffe17 	ldw	r5,-8(fp)
 2014f04:	e13ffd17 	ldw	r4,-12(fp)
 2014f08:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 2014f0c:	e0bff817 	ldw	r2,-32(fp)
 2014f10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014f14:	e0bff917 	ldw	r2,-28(fp)
 2014f18:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2014f1c:	e0bfff03 	ldbu	r2,-4(fp)
 2014f20:	1080010c 	andi	r2,r2,4
 2014f24:	1000011e 	bne	r2,zero,2014f2c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2014f28:	201265c0 	call	201265c <OS_Sched>
        }
        return (OS_ERR_NONE);
 2014f2c:	0005883a 	mov	r2,zero
 2014f30:	00001106 	br	2014f78 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2014f34:	e0bffd17 	ldw	r2,-12(fp)
 2014f38:	10800117 	ldw	r2,4(r2)
 2014f3c:	10000626 	beq	r2,zero,2014f58 <OSMboxPostOpt+0x128>
 2014f40:	e0bff817 	ldw	r2,-32(fp)
 2014f44:	e0bffa15 	stw	r2,-24(fp)
 2014f48:	e0bffa17 	ldw	r2,-24(fp)
 2014f4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2014f50:	00800504 	movi	r2,20
 2014f54:	00000806 	br	2014f78 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2014f58:	e0bffd17 	ldw	r2,-12(fp)
 2014f5c:	e0fffe17 	ldw	r3,-8(fp)
 2014f60:	10c00115 	stw	r3,4(r2)
 2014f64:	e0bff817 	ldw	r2,-32(fp)
 2014f68:	e0bffb15 	stw	r2,-20(fp)
 2014f6c:	e0bffb17 	ldw	r2,-20(fp)
 2014f70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014f74:	0005883a 	mov	r2,zero
}
 2014f78:	e037883a 	mov	sp,fp
 2014f7c:	dfc00117 	ldw	ra,4(sp)
 2014f80:	df000017 	ldw	fp,0(sp)
 2014f84:	dec00204 	addi	sp,sp,8
 2014f88:	f800283a 	ret

02014f8c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 2014f8c:	defff704 	addi	sp,sp,-36
 2014f90:	df000815 	stw	fp,32(sp)
 2014f94:	df000804 	addi	fp,sp,32
 2014f98:	e13ffe15 	stw	r4,-8(fp)
 2014f9c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014fa0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014fa4:	e0bffe17 	ldw	r2,-8(fp)
 2014fa8:	1000021e 	bne	r2,zero,2014fb4 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2014fac:	00800104 	movi	r2,4
 2014fb0:	00003606 	br	201508c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 2014fb4:	e0bfff17 	ldw	r2,-4(fp)
 2014fb8:	1000021e 	bne	r2,zero,2014fc4 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2014fbc:	00800244 	movi	r2,9
 2014fc0:	00003206 	br	201508c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2014fc4:	e0bffe17 	ldw	r2,-8(fp)
 2014fc8:	10800003 	ldbu	r2,0(r2)
 2014fcc:	10803fcc 	andi	r2,r2,255
 2014fd0:	10800060 	cmpeqi	r2,r2,1
 2014fd4:	1000021e 	bne	r2,zero,2014fe0 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2014fd8:	00800044 	movi	r2,1
 2014fdc:	00002b06 	br	201508c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014fe0:	0005303a 	rdctl	r2,status
 2014fe4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014fe8:	e0fffd17 	ldw	r3,-12(fp)
 2014fec:	00bfff84 	movi	r2,-2
 2014ff0:	1884703a 	and	r2,r3,r2
 2014ff4:	1001703a 	wrctl	status,r2
  
  return context;
 2014ff8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2014ffc:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2015000:	e0bffe17 	ldw	r2,-8(fp)
 2015004:	10c00283 	ldbu	r3,10(r2)
 2015008:	e0bfff17 	ldw	r2,-4(fp)
 201500c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2015010:	e0bffe17 	ldw	r2,-8(fp)
 2015014:	108002c4 	addi	r2,r2,11
 2015018:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 201501c:	e0bfff17 	ldw	r2,-4(fp)
 2015020:	10800104 	addi	r2,r2,4
 2015024:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015028:	e03ff805 	stb	zero,-32(fp)
 201502c:	00000b06 	br	201505c <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2015030:	e0bffa17 	ldw	r2,-24(fp)
 2015034:	10c00044 	addi	r3,r2,1
 2015038:	e0fffa15 	stw	r3,-24(fp)
 201503c:	e0fff917 	ldw	r3,-28(fp)
 2015040:	19000044 	addi	r4,r3,1
 2015044:	e13ff915 	stw	r4,-28(fp)
 2015048:	18c00003 	ldbu	r3,0(r3)
 201504c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015050:	e0bff803 	ldbu	r2,-32(fp)
 2015054:	10800044 	addi	r2,r2,1
 2015058:	e0bff805 	stb	r2,-32(fp)
 201505c:	e0bff803 	ldbu	r2,-32(fp)
 2015060:	108000f0 	cmpltui	r2,r2,3
 2015064:	103ff21e 	bne	r2,zero,2015030 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2015068:	e0bffe17 	ldw	r2,-8(fp)
 201506c:	10c00117 	ldw	r3,4(r2)
 2015070:	e0bfff17 	ldw	r2,-4(fp)
 2015074:	10c00015 	stw	r3,0(r2)
 2015078:	e0bffb17 	ldw	r2,-20(fp)
 201507c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015080:	e0bffc17 	ldw	r2,-16(fp)
 2015084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015088:	0005883a 	mov	r2,zero
}
 201508c:	e037883a 	mov	sp,fp
 2015090:	df000017 	ldw	fp,0(sp)
 2015094:	dec00104 	addi	sp,sp,4
 2015098:	f800283a 	ret

0201509c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201509c:	defff404 	addi	sp,sp,-48
 20150a0:	df000b15 	stw	fp,44(sp)
 20150a4:	df000b04 	addi	fp,sp,44
 20150a8:	e13ffc15 	stw	r4,-16(fp)
 20150ac:	e17ffd15 	stw	r5,-12(fp)
 20150b0:	e1bffe15 	stw	r6,-8(fp)
 20150b4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20150b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20150bc:	e0bfff17 	ldw	r2,-4(fp)
 20150c0:	1000021e 	bne	r2,zero,20150cc <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 20150c4:	0005883a 	mov	r2,zero
 20150c8:	00006506 	br	2015260 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 20150cc:	e0bffc17 	ldw	r2,-16(fp)
 20150d0:	1000051e 	bne	r2,zero,20150e8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20150d4:	e0bfff17 	ldw	r2,-4(fp)
 20150d8:	00c01884 	movi	r3,98
 20150dc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20150e0:	0005883a 	mov	r2,zero
 20150e4:	00005e06 	br	2015260 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 20150e8:	e0bffc17 	ldw	r2,-16(fp)
 20150ec:	108000cc 	andi	r2,r2,3
 20150f0:	10000526 	beq	r2,zero,2015108 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20150f4:	e0bfff17 	ldw	r2,-4(fp)
 20150f8:	00c01884 	movi	r3,98
 20150fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2015100:	0005883a 	mov	r2,zero
 2015104:	00005606 	br	2015260 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2015108:	e0bffd17 	ldw	r2,-12(fp)
 201510c:	108000a8 	cmpgeui	r2,r2,2
 2015110:	1000051e 	bne	r2,zero,2015128 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 2015114:	e0bfff17 	ldw	r2,-4(fp)
 2015118:	00c016c4 	movi	r3,91
 201511c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2015120:	0005883a 	mov	r2,zero
 2015124:	00004e06 	br	2015260 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2015128:	e0bffe17 	ldw	r2,-8(fp)
 201512c:	10800128 	cmpgeui	r2,r2,4
 2015130:	1000051e 	bne	r2,zero,2015148 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 2015134:	e0bfff17 	ldw	r2,-4(fp)
 2015138:	00c01704 	movi	r3,92
 201513c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2015140:	0005883a 	mov	r2,zero
 2015144:	00004606 	br	2015260 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015148:	0005303a 	rdctl	r2,status
 201514c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015150:	e0fffb17 	ldw	r3,-20(fp)
 2015154:	00bfff84 	movi	r2,-2
 2015158:	1884703a 	and	r2,r3,r2
 201515c:	1001703a 	wrctl	status,r2
  
  return context;
 2015160:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015164:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2015168:	d0a72e17 	ldw	r2,-25416(gp)
 201516c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2015170:	d0a72e17 	ldw	r2,-25416(gp)
 2015174:	10000326 	beq	r2,zero,2015184 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2015178:	d0a72e17 	ldw	r2,-25416(gp)
 201517c:	10800117 	ldw	r2,4(r2)
 2015180:	d0a72e15 	stw	r2,-25416(gp)
 2015184:	e0bff817 	ldw	r2,-32(fp)
 2015188:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201518c:	e0bff917 	ldw	r2,-28(fp)
 2015190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2015194:	e0bffa17 	ldw	r2,-24(fp)
 2015198:	1000051e 	bne	r2,zero,20151b0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201519c:	e0bfff17 	ldw	r2,-4(fp)
 20151a0:	00c01684 	movi	r3,90
 20151a4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20151a8:	0005883a 	mov	r2,zero
 20151ac:	00002c06 	br	2015260 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20151b0:	e0bffc17 	ldw	r2,-16(fp)
 20151b4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20151b8:	e0fffc17 	ldw	r3,-16(fp)
 20151bc:	e0bffe17 	ldw	r2,-8(fp)
 20151c0:	1885883a 	add	r2,r3,r2
 20151c4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20151c8:	e03ff715 	stw	zero,-36(fp)
 20151cc:	00000c06 	br	2015200 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 20151d0:	e0bff617 	ldw	r2,-40(fp)
 20151d4:	e0fff517 	ldw	r3,-44(fp)
 20151d8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 20151dc:	e0bff517 	ldw	r2,-44(fp)
 20151e0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 20151e4:	e0fff517 	ldw	r3,-44(fp)
 20151e8:	e0bffe17 	ldw	r2,-8(fp)
 20151ec:	1885883a 	add	r2,r3,r2
 20151f0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 20151f4:	e0bff717 	ldw	r2,-36(fp)
 20151f8:	10800044 	addi	r2,r2,1
 20151fc:	e0bff715 	stw	r2,-36(fp)
 2015200:	e0bffd17 	ldw	r2,-12(fp)
 2015204:	10bfffc4 	addi	r2,r2,-1
 2015208:	e0fff717 	ldw	r3,-36(fp)
 201520c:	18bff036 	bltu	r3,r2,20151d0 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2015210:	e0bff617 	ldw	r2,-40(fp)
 2015214:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2015218:	e0bffa17 	ldw	r2,-24(fp)
 201521c:	e0fffc17 	ldw	r3,-16(fp)
 2015220:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2015224:	e0bffa17 	ldw	r2,-24(fp)
 2015228:	e0fffc17 	ldw	r3,-16(fp)
 201522c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2015230:	e0bffa17 	ldw	r2,-24(fp)
 2015234:	e0fffd17 	ldw	r3,-12(fp)
 2015238:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 201523c:	e0bffa17 	ldw	r2,-24(fp)
 2015240:	e0fffd17 	ldw	r3,-12(fp)
 2015244:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2015248:	e0bffa17 	ldw	r2,-24(fp)
 201524c:	e0fffe17 	ldw	r3,-8(fp)
 2015250:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 2015254:	e0bfff17 	ldw	r2,-4(fp)
 2015258:	10000005 	stb	zero,0(r2)
    return (pmem);
 201525c:	e0bffa17 	ldw	r2,-24(fp)
}
 2015260:	e037883a 	mov	sp,fp
 2015264:	df000017 	ldw	fp,0(sp)
 2015268:	dec00104 	addi	sp,sp,4
 201526c:	f800283a 	ret

02015270 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2015270:	defff804 	addi	sp,sp,-32
 2015274:	df000715 	stw	fp,28(sp)
 2015278:	df000704 	addi	fp,sp,28
 201527c:	e13ffe15 	stw	r4,-8(fp)
 2015280:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015284:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2015288:	e0bfff17 	ldw	r2,-4(fp)
 201528c:	1000021e 	bne	r2,zero,2015298 <OSMemGet+0x28>
        return ((void *)0);
 2015290:	0005883a 	mov	r2,zero
 2015294:	00002e06 	br	2015350 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2015298:	e0bffe17 	ldw	r2,-8(fp)
 201529c:	1000051e 	bne	r2,zero,20152b4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20152a0:	e0bfff17 	ldw	r2,-4(fp)
 20152a4:	00c01804 	movi	r3,96
 20152a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20152ac:	0005883a 	mov	r2,zero
 20152b0:	00002706 	br	2015350 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20152b4:	0005303a 	rdctl	r2,status
 20152b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20152bc:	e0fffd17 	ldw	r3,-12(fp)
 20152c0:	00bfff84 	movi	r2,-2
 20152c4:	1884703a 	and	r2,r3,r2
 20152c8:	1001703a 	wrctl	status,r2
  
  return context;
 20152cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20152d0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 20152d4:	e0bffe17 	ldw	r2,-8(fp)
 20152d8:	10800417 	ldw	r2,16(r2)
 20152dc:	10001426 	beq	r2,zero,2015330 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 20152e0:	e0bffe17 	ldw	r2,-8(fp)
 20152e4:	10800117 	ldw	r2,4(r2)
 20152e8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 20152ec:	e0bffb17 	ldw	r2,-20(fp)
 20152f0:	10c00017 	ldw	r3,0(r2)
 20152f4:	e0bffe17 	ldw	r2,-8(fp)
 20152f8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 20152fc:	e0bffe17 	ldw	r2,-8(fp)
 2015300:	10800417 	ldw	r2,16(r2)
 2015304:	10ffffc4 	addi	r3,r2,-1
 2015308:	e0bffe17 	ldw	r2,-8(fp)
 201530c:	10c00415 	stw	r3,16(r2)
 2015310:	e0bff917 	ldw	r2,-28(fp)
 2015314:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015318:	e0bffa17 	ldw	r2,-24(fp)
 201531c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2015320:	e0bfff17 	ldw	r2,-4(fp)
 2015324:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2015328:	e0bffb17 	ldw	r2,-20(fp)
 201532c:	00000806 	br	2015350 <OSMemGet+0xe0>
 2015330:	e0bff917 	ldw	r2,-28(fp)
 2015334:	e0bffc15 	stw	r2,-16(fp)
 2015338:	e0bffc17 	ldw	r2,-16(fp)
 201533c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2015340:	e0bfff17 	ldw	r2,-4(fp)
 2015344:	00c01744 	movi	r3,93
 2015348:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 201534c:	0005883a 	mov	r2,zero
}
 2015350:	e037883a 	mov	sp,fp
 2015354:	df000017 	ldw	fp,0(sp)
 2015358:	dec00104 	addi	sp,sp,4
 201535c:	f800283a 	ret

02015360 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2015360:	defff704 	addi	sp,sp,-36
 2015364:	dfc00815 	stw	ra,32(sp)
 2015368:	df000715 	stw	fp,28(sp)
 201536c:	df000704 	addi	fp,sp,28
 2015370:	e13ffd15 	stw	r4,-12(fp)
 2015374:	e17ffe15 	stw	r5,-8(fp)
 2015378:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201537c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2015380:	e0bfff17 	ldw	r2,-4(fp)
 2015384:	1000021e 	bne	r2,zero,2015390 <OSMemNameGet+0x30>
        return (0);
 2015388:	0005883a 	mov	r2,zero
 201538c:	00002b06 	br	201543c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2015390:	e0bffd17 	ldw	r2,-12(fp)
 2015394:	1000051e 	bne	r2,zero,20153ac <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2015398:	e0bfff17 	ldw	r2,-4(fp)
 201539c:	00c01804 	movi	r3,96
 20153a0:	10c00005 	stb	r3,0(r2)
        return (0);
 20153a4:	0005883a 	mov	r2,zero
 20153a8:	00002406 	br	201543c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20153ac:	e0bffe17 	ldw	r2,-8(fp)
 20153b0:	1000051e 	bne	r2,zero,20153c8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20153b4:	e0bfff17 	ldw	r2,-4(fp)
 20153b8:	00c00304 	movi	r3,12
 20153bc:	10c00005 	stb	r3,0(r2)
        return (0);
 20153c0:	0005883a 	mov	r2,zero
 20153c4:	00001d06 	br	201543c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20153c8:	d0a73303 	ldbu	r2,-25396(gp)
 20153cc:	10803fcc 	andi	r2,r2,255
 20153d0:	10000526 	beq	r2,zero,20153e8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20153d4:	e0bfff17 	ldw	r2,-4(fp)
 20153d8:	00c00444 	movi	r3,17
 20153dc:	10c00005 	stb	r3,0(r2)
        return (0);
 20153e0:	0005883a 	mov	r2,zero
 20153e4:	00001506 	br	201543c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20153e8:	0005303a 	rdctl	r2,status
 20153ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20153f0:	e0fffb17 	ldw	r3,-20(fp)
 20153f4:	00bfff84 	movi	r2,-2
 20153f8:	1884703a 	and	r2,r3,r2
 20153fc:	1001703a 	wrctl	status,r2
  
  return context;
 2015400:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2015404:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2015408:	e0bffd17 	ldw	r2,-12(fp)
 201540c:	10800504 	addi	r2,r2,20
 2015410:	100b883a 	mov	r5,r2
 2015414:	e13ffe17 	ldw	r4,-8(fp)
 2015418:	20127a00 	call	20127a0 <OS_StrCopy>
 201541c:	e0bffa05 	stb	r2,-24(fp)
 2015420:	e0bff917 	ldw	r2,-28(fp)
 2015424:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015428:	e0bffc17 	ldw	r2,-16(fp)
 201542c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015430:	e0bfff17 	ldw	r2,-4(fp)
 2015434:	10000005 	stb	zero,0(r2)
    return (len);
 2015438:	e0bffa03 	ldbu	r2,-24(fp)
}
 201543c:	e037883a 	mov	sp,fp
 2015440:	dfc00117 	ldw	ra,4(sp)
 2015444:	df000017 	ldw	fp,0(sp)
 2015448:	dec00204 	addi	sp,sp,8
 201544c:	f800283a 	ret

02015450 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2015450:	defff604 	addi	sp,sp,-40
 2015454:	dfc00915 	stw	ra,36(sp)
 2015458:	df000815 	stw	fp,32(sp)
 201545c:	df000804 	addi	fp,sp,32
 2015460:	e13ffd15 	stw	r4,-12(fp)
 2015464:	e17ffe15 	stw	r5,-8(fp)
 2015468:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201546c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2015470:	e0bfff17 	ldw	r2,-4(fp)
 2015474:	10003526 	beq	r2,zero,201554c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2015478:	e0bffd17 	ldw	r2,-12(fp)
 201547c:	1000041e 	bne	r2,zero,2015490 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2015480:	e0bfff17 	ldw	r2,-4(fp)
 2015484:	00c01804 	movi	r3,96
 2015488:	10c00005 	stb	r3,0(r2)
        return;
 201548c:	00003006 	br	2015550 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2015490:	e0bffe17 	ldw	r2,-8(fp)
 2015494:	1000041e 	bne	r2,zero,20154a8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2015498:	e0bfff17 	ldw	r2,-4(fp)
 201549c:	00c00304 	movi	r3,12
 20154a0:	10c00005 	stb	r3,0(r2)
        return;
 20154a4:	00002a06 	br	2015550 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20154a8:	d0a73303 	ldbu	r2,-25396(gp)
 20154ac:	10803fcc 	andi	r2,r2,255
 20154b0:	10000426 	beq	r2,zero,20154c4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20154b4:	e0bfff17 	ldw	r2,-4(fp)
 20154b8:	00c00484 	movi	r3,18
 20154bc:	10c00005 	stb	r3,0(r2)
        return;
 20154c0:	00002306 	br	2015550 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20154c4:	0005303a 	rdctl	r2,status
 20154c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20154cc:	e0fffc17 	ldw	r3,-16(fp)
 20154d0:	00bfff84 	movi	r2,-2
 20154d4:	1884703a 	and	r2,r3,r2
 20154d8:	1001703a 	wrctl	status,r2
  
  return context;
 20154dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20154e0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 20154e4:	e13ffe17 	ldw	r4,-8(fp)
 20154e8:	20128140 	call	2012814 <OS_StrLen>
 20154ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 20154f0:	e0bffa03 	ldbu	r2,-24(fp)
 20154f4:	10800830 	cmpltui	r2,r2,32
 20154f8:	1000081e 	bne	r2,zero,201551c <OSMemNameSet+0xcc>
 20154fc:	e0bff817 	ldw	r2,-32(fp)
 2015500:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015504:	e0bff917 	ldw	r2,-28(fp)
 2015508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201550c:	e0bfff17 	ldw	r2,-4(fp)
 2015510:	00c018c4 	movi	r3,99
 2015514:	10c00005 	stb	r3,0(r2)
        return;
 2015518:	00000d06 	br	2015550 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201551c:	e0bffd17 	ldw	r2,-12(fp)
 2015520:	10800504 	addi	r2,r2,20
 2015524:	e17ffe17 	ldw	r5,-8(fp)
 2015528:	1009883a 	mov	r4,r2
 201552c:	20127a00 	call	20127a0 <OS_StrCopy>
 2015530:	e0bff817 	ldw	r2,-32(fp)
 2015534:	e0bffb15 	stw	r2,-20(fp)
 2015538:	e0bffb17 	ldw	r2,-20(fp)
 201553c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015540:	e0bfff17 	ldw	r2,-4(fp)
 2015544:	10000005 	stb	zero,0(r2)
 2015548:	00000106 	br	2015550 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201554c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2015550:	e037883a 	mov	sp,fp
 2015554:	dfc00117 	ldw	ra,4(sp)
 2015558:	df000017 	ldw	fp,0(sp)
 201555c:	dec00204 	addi	sp,sp,8
 2015560:	f800283a 	ret

02015564 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2015564:	defff904 	addi	sp,sp,-28
 2015568:	df000615 	stw	fp,24(sp)
 201556c:	df000604 	addi	fp,sp,24
 2015570:	e13ffe15 	stw	r4,-8(fp)
 2015574:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015578:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201557c:	e0bffe17 	ldw	r2,-8(fp)
 2015580:	1000021e 	bne	r2,zero,201558c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2015584:	00801804 	movi	r2,96
 2015588:	00002806 	br	201562c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201558c:	e0bfff17 	ldw	r2,-4(fp)
 2015590:	1000021e 	bne	r2,zero,201559c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2015594:	008017c4 	movi	r2,95
 2015598:	00002406 	br	201562c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201559c:	0005303a 	rdctl	r2,status
 20155a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20155a4:	e0fffd17 	ldw	r3,-12(fp)
 20155a8:	00bfff84 	movi	r2,-2
 20155ac:	1884703a 	and	r2,r3,r2
 20155b0:	1001703a 	wrctl	status,r2
  
  return context;
 20155b4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20155b8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 20155bc:	e0bffe17 	ldw	r2,-8(fp)
 20155c0:	10c00417 	ldw	r3,16(r2)
 20155c4:	e0bffe17 	ldw	r2,-8(fp)
 20155c8:	10800317 	ldw	r2,12(r2)
 20155cc:	18800636 	bltu	r3,r2,20155e8 <OSMemPut+0x84>
 20155d0:	e0bffa17 	ldw	r2,-24(fp)
 20155d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20155d8:	e0bffb17 	ldw	r2,-20(fp)
 20155dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 20155e0:	00801784 	movi	r2,94
 20155e4:	00001106 	br	201562c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 20155e8:	e0bffe17 	ldw	r2,-8(fp)
 20155ec:	10c00117 	ldw	r3,4(r2)
 20155f0:	e0bfff17 	ldw	r2,-4(fp)
 20155f4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 20155f8:	e0bffe17 	ldw	r2,-8(fp)
 20155fc:	e0ffff17 	ldw	r3,-4(fp)
 2015600:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2015604:	e0bffe17 	ldw	r2,-8(fp)
 2015608:	10800417 	ldw	r2,16(r2)
 201560c:	10c00044 	addi	r3,r2,1
 2015610:	e0bffe17 	ldw	r2,-8(fp)
 2015614:	10c00415 	stw	r3,16(r2)
 2015618:	e0bffa17 	ldw	r2,-24(fp)
 201561c:	e0bffc15 	stw	r2,-16(fp)
 2015620:	e0bffc17 	ldw	r2,-16(fp)
 2015624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2015628:	0005883a 	mov	r2,zero
}
 201562c:	e037883a 	mov	sp,fp
 2015630:	df000017 	ldw	fp,0(sp)
 2015634:	dec00104 	addi	sp,sp,4
 2015638:	f800283a 	ret

0201563c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 201563c:	defffa04 	addi	sp,sp,-24
 2015640:	df000515 	stw	fp,20(sp)
 2015644:	df000504 	addi	fp,sp,20
 2015648:	e13ffe15 	stw	r4,-8(fp)
 201564c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015650:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2015654:	e0bffe17 	ldw	r2,-8(fp)
 2015658:	1000021e 	bne	r2,zero,2015664 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201565c:	00801804 	movi	r2,96
 2015660:	00002c06 	br	2015714 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2015664:	e0bfff17 	ldw	r2,-4(fp)
 2015668:	1000021e 	bne	r2,zero,2015674 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201566c:	00801844 	movi	r2,97
 2015670:	00002806 	br	2015714 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015674:	0005303a 	rdctl	r2,status
 2015678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201567c:	e0fffc17 	ldw	r3,-16(fp)
 2015680:	00bfff84 	movi	r2,-2
 2015684:	1884703a 	and	r2,r3,r2
 2015688:	1001703a 	wrctl	status,r2
  
  return context;
 201568c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015690:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2015694:	e0bffe17 	ldw	r2,-8(fp)
 2015698:	10c00017 	ldw	r3,0(r2)
 201569c:	e0bfff17 	ldw	r2,-4(fp)
 20156a0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 20156a4:	e0bffe17 	ldw	r2,-8(fp)
 20156a8:	10c00117 	ldw	r3,4(r2)
 20156ac:	e0bfff17 	ldw	r2,-4(fp)
 20156b0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 20156b4:	e0bffe17 	ldw	r2,-8(fp)
 20156b8:	10c00217 	ldw	r3,8(r2)
 20156bc:	e0bfff17 	ldw	r2,-4(fp)
 20156c0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 20156c4:	e0bffe17 	ldw	r2,-8(fp)
 20156c8:	10c00317 	ldw	r3,12(r2)
 20156cc:	e0bfff17 	ldw	r2,-4(fp)
 20156d0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 20156d4:	e0bffe17 	ldw	r2,-8(fp)
 20156d8:	10c00417 	ldw	r3,16(r2)
 20156dc:	e0bfff17 	ldw	r2,-4(fp)
 20156e0:	10c00415 	stw	r3,16(r2)
 20156e4:	e0bffb17 	ldw	r2,-20(fp)
 20156e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20156ec:	e0bffd17 	ldw	r2,-12(fp)
 20156f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 20156f4:	e0bfff17 	ldw	r2,-4(fp)
 20156f8:	10c00317 	ldw	r3,12(r2)
 20156fc:	e0bfff17 	ldw	r2,-4(fp)
 2015700:	10800417 	ldw	r2,16(r2)
 2015704:	1887c83a 	sub	r3,r3,r2
 2015708:	e0bfff17 	ldw	r2,-4(fp)
 201570c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2015710:	0005883a 	mov	r2,zero
}
 2015714:	e037883a 	mov	sp,fp
 2015718:	df000017 	ldw	fp,0(sp)
 201571c:	dec00104 	addi	sp,sp,4
 2015720:	f800283a 	ret

02015724 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2015724:	defffc04 	addi	sp,sp,-16
 2015728:	dfc00315 	stw	ra,12(sp)
 201572c:	df000215 	stw	fp,8(sp)
 2015730:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2015734:	01430c04 	movi	r5,3120
 2015738:	010080b4 	movhi	r4,514
 201573c:	21152904 	addi	r4,r4,21668
 2015740:	20125a00 	call	20125a0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2015744:	008080b4 	movhi	r2,514
 2015748:	10952904 	addi	r2,r2,21668
 201574c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2015750:	e03fff0d 	sth	zero,-4(fp)
 2015754:	00001606 	br	20157b0 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2015758:	e0bfff0b 	ldhu	r2,-4(fp)
 201575c:	10800044 	addi	r2,r2,1
 2015760:	01400d04 	movi	r5,52
 2015764:	1009883a 	mov	r4,r2
 2015768:	20019440 	call	2001944 <__mulsi3>
 201576c:	1007883a 	mov	r3,r2
 2015770:	008080b4 	movhi	r2,514
 2015774:	10952904 	addi	r2,r2,21668
 2015778:	1887883a 	add	r3,r3,r2
 201577c:	e0bffe17 	ldw	r2,-8(fp)
 2015780:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2015784:	e0bffe17 	ldw	r2,-8(fp)
 2015788:	00c00fc4 	movi	r3,63
 201578c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2015790:	e0bffe17 	ldw	r2,-8(fp)
 2015794:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2015798:	e0bffe17 	ldw	r2,-8(fp)
 201579c:	10800d04 	addi	r2,r2,52
 20157a0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20157a4:	e0bfff0b 	ldhu	r2,-4(fp)
 20157a8:	10800044 	addi	r2,r2,1
 20157ac:	e0bfff0d 	sth	r2,-4(fp)
 20157b0:	e0bfff0b 	ldhu	r2,-4(fp)
 20157b4:	10800ef0 	cmpltui	r2,r2,59
 20157b8:	103fe71e 	bne	r2,zero,2015758 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 20157bc:	e0bffe17 	ldw	r2,-8(fp)
 20157c0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 20157c4:	e0bffe17 	ldw	r2,-8(fp)
 20157c8:	00c00fc4 	movi	r3,63
 20157cc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 20157d0:	e0bffe17 	ldw	r2,-8(fp)
 20157d4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 20157d8:	008080b4 	movhi	r2,514
 20157dc:	10952904 	addi	r2,r2,21668
 20157e0:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
 20157e4:	0001883a 	nop
 20157e8:	e037883a 	mov	sp,fp
 20157ec:	dfc00117 	ldw	ra,4(sp)
 20157f0:	df000017 	ldw	fp,0(sp)
 20157f4:	dec00204 	addi	sp,sp,8
 20157f8:	f800283a 	ret

020157fc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 20157fc:	defff804 	addi	sp,sp,-32
 2015800:	df000715 	stw	fp,28(sp)
 2015804:	df000704 	addi	fp,sp,28
 2015808:	e13ffe15 	stw	r4,-8(fp)
 201580c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015810:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2015814:	e0bfff17 	ldw	r2,-4(fp)
 2015818:	1000021e 	bne	r2,zero,2015824 <OSQAccept+0x28>
        return ((void *)0);
 201581c:	0005883a 	mov	r2,zero
 2015820:	00004206 	br	201592c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2015824:	e0bffe17 	ldw	r2,-8(fp)
 2015828:	1000051e 	bne	r2,zero,2015840 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201582c:	e0bfff17 	ldw	r2,-4(fp)
 2015830:	00c00104 	movi	r3,4
 2015834:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015838:	0005883a 	mov	r2,zero
 201583c:	00003b06 	br	201592c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2015840:	e0bffe17 	ldw	r2,-8(fp)
 2015844:	10800003 	ldbu	r2,0(r2)
 2015848:	10803fcc 	andi	r2,r2,255
 201584c:	108000a0 	cmpeqi	r2,r2,2
 2015850:	1000051e 	bne	r2,zero,2015868 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2015854:	e0bfff17 	ldw	r2,-4(fp)
 2015858:	00c00044 	movi	r3,1
 201585c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015860:	0005883a 	mov	r2,zero
 2015864:	00003106 	br	201592c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015868:	0005303a 	rdctl	r2,status
 201586c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015870:	e0fffd17 	ldw	r3,-12(fp)
 2015874:	00bfff84 	movi	r2,-2
 2015878:	1884703a 	and	r2,r3,r2
 201587c:	1001703a 	wrctl	status,r2
  
  return context;
 2015880:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2015884:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2015888:	e0bffe17 	ldw	r2,-8(fp)
 201588c:	10800117 	ldw	r2,4(r2)
 2015890:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2015894:	e0bffc17 	ldw	r2,-16(fp)
 2015898:	1080058b 	ldhu	r2,22(r2)
 201589c:	10bfffcc 	andi	r2,r2,65535
 20158a0:	10001926 	beq	r2,zero,2015908 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20158a4:	e0bffc17 	ldw	r2,-16(fp)
 20158a8:	10800417 	ldw	r2,16(r2)
 20158ac:	11000104 	addi	r4,r2,4
 20158b0:	e0fffc17 	ldw	r3,-16(fp)
 20158b4:	19000415 	stw	r4,16(r3)
 20158b8:	10800017 	ldw	r2,0(r2)
 20158bc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20158c0:	e0bffc17 	ldw	r2,-16(fp)
 20158c4:	1080058b 	ldhu	r2,22(r2)
 20158c8:	10bfffc4 	addi	r2,r2,-1
 20158cc:	1007883a 	mov	r3,r2
 20158d0:	e0bffc17 	ldw	r2,-16(fp)
 20158d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20158d8:	e0bffc17 	ldw	r2,-16(fp)
 20158dc:	10c00417 	ldw	r3,16(r2)
 20158e0:	e0bffc17 	ldw	r2,-16(fp)
 20158e4:	10800217 	ldw	r2,8(r2)
 20158e8:	1880041e 	bne	r3,r2,20158fc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 20158ec:	e0bffc17 	ldw	r2,-16(fp)
 20158f0:	10c00117 	ldw	r3,4(r2)
 20158f4:	e0bffc17 	ldw	r2,-16(fp)
 20158f8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 20158fc:	e0bfff17 	ldw	r2,-4(fp)
 2015900:	10000005 	stb	zero,0(r2)
 2015904:	00000406 	br	2015918 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2015908:	e0bfff17 	ldw	r2,-4(fp)
 201590c:	00c007c4 	movi	r3,31
 2015910:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2015914:	e03ff915 	stw	zero,-28(fp)
 2015918:	e0bffa17 	ldw	r2,-24(fp)
 201591c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015920:	e0bffb17 	ldw	r2,-20(fp)
 2015924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2015928:	e0bff917 	ldw	r2,-28(fp)
}
 201592c:	e037883a 	mov	sp,fp
 2015930:	df000017 	ldw	fp,0(sp)
 2015934:	dec00104 	addi	sp,sp,4
 2015938:	f800283a 	ret

0201593c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 201593c:	defff404 	addi	sp,sp,-48
 2015940:	dfc00b15 	stw	ra,44(sp)
 2015944:	df000a15 	stw	fp,40(sp)
 2015948:	df000a04 	addi	fp,sp,40
 201594c:	e13ffe15 	stw	r4,-8(fp)
 2015950:	2805883a 	mov	r2,r5
 2015954:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015958:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201595c:	d0a73303 	ldbu	r2,-25396(gp)
 2015960:	10803fcc 	andi	r2,r2,255
 2015964:	10000226 	beq	r2,zero,2015970 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2015968:	0005883a 	mov	r2,zero
 201596c:	00005906 	br	2015ad4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015970:	0005303a 	rdctl	r2,status
 2015974:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015978:	e0fffd17 	ldw	r3,-12(fp)
 201597c:	00bfff84 	movi	r2,-2
 2015980:	1884703a 	and	r2,r3,r2
 2015984:	1001703a 	wrctl	status,r2
  
  return context;
 2015988:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201598c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2015990:	d0a73217 	ldw	r2,-25400(gp)
 2015994:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2015998:	d0a73217 	ldw	r2,-25400(gp)
 201599c:	10000326 	beq	r2,zero,20159ac <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20159a0:	d0a73217 	ldw	r2,-25400(gp)
 20159a4:	10800117 	ldw	r2,4(r2)
 20159a8:	d0a73215 	stw	r2,-25400(gp)
 20159ac:	e0bff717 	ldw	r2,-36(fp)
 20159b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159b4:	e0bff817 	ldw	r2,-32(fp)
 20159b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 20159bc:	e0bff617 	ldw	r2,-40(fp)
 20159c0:	10004326 	beq	r2,zero,2015ad0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159c4:	0005303a 	rdctl	r2,status
 20159c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159cc:	e0fff917 	ldw	r3,-28(fp)
 20159d0:	00bfff84 	movi	r2,-2
 20159d4:	1884703a 	and	r2,r3,r2
 20159d8:	1001703a 	wrctl	status,r2
  
  return context;
 20159dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 20159e0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 20159e4:	d0a73017 	ldw	r2,-25408(gp)
 20159e8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 20159ec:	e0bffb17 	ldw	r2,-20(fp)
 20159f0:	10002d26 	beq	r2,zero,2015aa8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 20159f4:	d0a73017 	ldw	r2,-25408(gp)
 20159f8:	10800017 	ldw	r2,0(r2)
 20159fc:	d0a73015 	stw	r2,-25408(gp)
 2015a00:	e0bff717 	ldw	r2,-36(fp)
 2015a04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015a08:	e0bffa17 	ldw	r2,-24(fp)
 2015a0c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2015a10:	e0bffb17 	ldw	r2,-20(fp)
 2015a14:	e0fffe17 	ldw	r3,-8(fp)
 2015a18:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2015a1c:	e0bfff0b 	ldhu	r2,-4(fp)
 2015a20:	1085883a 	add	r2,r2,r2
 2015a24:	1085883a 	add	r2,r2,r2
 2015a28:	1007883a 	mov	r3,r2
 2015a2c:	e0bffe17 	ldw	r2,-8(fp)
 2015a30:	10c7883a 	add	r3,r2,r3
 2015a34:	e0bffb17 	ldw	r2,-20(fp)
 2015a38:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2015a3c:	e0bffb17 	ldw	r2,-20(fp)
 2015a40:	e0fffe17 	ldw	r3,-8(fp)
 2015a44:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2015a48:	e0bffb17 	ldw	r2,-20(fp)
 2015a4c:	e0fffe17 	ldw	r3,-8(fp)
 2015a50:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2015a54:	e0bffb17 	ldw	r2,-20(fp)
 2015a58:	e0ffff0b 	ldhu	r3,-4(fp)
 2015a5c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2015a60:	e0bffb17 	ldw	r2,-20(fp)
 2015a64:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2015a68:	e0bff617 	ldw	r2,-40(fp)
 2015a6c:	00c00084 	movi	r3,2
 2015a70:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2015a74:	e0bff617 	ldw	r2,-40(fp)
 2015a78:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2015a7c:	e0bff617 	ldw	r2,-40(fp)
 2015a80:	e0fffb17 	ldw	r3,-20(fp)
 2015a84:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2015a88:	e0bff617 	ldw	r2,-40(fp)
 2015a8c:	00c00fc4 	movi	r3,63
 2015a90:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2015a94:	e0bff617 	ldw	r2,-40(fp)
 2015a98:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2015a9c:	e13ff617 	ldw	r4,-40(fp)
 2015aa0:	20121c00 	call	20121c0 <OS_EventWaitListInit>
 2015aa4:	00000a06 	br	2015ad0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2015aa8:	d0e73217 	ldw	r3,-25400(gp)
 2015aac:	e0bff617 	ldw	r2,-40(fp)
 2015ab0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2015ab4:	e0bff617 	ldw	r2,-40(fp)
 2015ab8:	d0a73215 	stw	r2,-25400(gp)
 2015abc:	e0bff717 	ldw	r2,-36(fp)
 2015ac0:	e0bffc15 	stw	r2,-16(fp)
 2015ac4:	e0bffc17 	ldw	r2,-16(fp)
 2015ac8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2015acc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2015ad0:	e0bff617 	ldw	r2,-40(fp)
}
 2015ad4:	e037883a 	mov	sp,fp
 2015ad8:	dfc00117 	ldw	ra,4(sp)
 2015adc:	df000017 	ldw	fp,0(sp)
 2015ae0:	dec00204 	addi	sp,sp,8
 2015ae4:	f800283a 	ret

02015ae8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2015ae8:	defff204 	addi	sp,sp,-56
 2015aec:	dfc00d15 	stw	ra,52(sp)
 2015af0:	df000c15 	stw	fp,48(sp)
 2015af4:	df000c04 	addi	fp,sp,48
 2015af8:	e13ffd15 	stw	r4,-12(fp)
 2015afc:	2805883a 	mov	r2,r5
 2015b00:	e1bfff15 	stw	r6,-4(fp)
 2015b04:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015b08:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2015b0c:	e0bfff17 	ldw	r2,-4(fp)
 2015b10:	1000021e 	bne	r2,zero,2015b1c <OSQDel+0x34>
        return (pevent);
 2015b14:	e0bffd17 	ldw	r2,-12(fp)
 2015b18:	00008e06 	br	2015d54 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2015b1c:	e0bffd17 	ldw	r2,-12(fp)
 2015b20:	1000051e 	bne	r2,zero,2015b38 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2015b24:	e0bfff17 	ldw	r2,-4(fp)
 2015b28:	00c00104 	movi	r3,4
 2015b2c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015b30:	e0bffd17 	ldw	r2,-12(fp)
 2015b34:	00008706 	br	2015d54 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2015b38:	e0bffd17 	ldw	r2,-12(fp)
 2015b3c:	10800003 	ldbu	r2,0(r2)
 2015b40:	10803fcc 	andi	r2,r2,255
 2015b44:	108000a0 	cmpeqi	r2,r2,2
 2015b48:	1000051e 	bne	r2,zero,2015b60 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015b4c:	e0bfff17 	ldw	r2,-4(fp)
 2015b50:	00c00044 	movi	r3,1
 2015b54:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015b58:	e0bffd17 	ldw	r2,-12(fp)
 2015b5c:	00007d06 	br	2015d54 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2015b60:	d0a73303 	ldbu	r2,-25396(gp)
 2015b64:	10803fcc 	andi	r2,r2,255
 2015b68:	10000526 	beq	r2,zero,2015b80 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2015b6c:	e0bfff17 	ldw	r2,-4(fp)
 2015b70:	00c003c4 	movi	r3,15
 2015b74:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015b78:	e0bffd17 	ldw	r2,-12(fp)
 2015b7c:	00007506 	br	2015d54 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015b80:	0005303a 	rdctl	r2,status
 2015b84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015b88:	e0fffc17 	ldw	r3,-16(fp)
 2015b8c:	00bfff84 	movi	r2,-2
 2015b90:	1884703a 	and	r2,r3,r2
 2015b94:	1001703a 	wrctl	status,r2
  
  return context;
 2015b98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015b9c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2015ba0:	e0bffd17 	ldw	r2,-12(fp)
 2015ba4:	10800283 	ldbu	r2,10(r2)
 2015ba8:	10803fcc 	andi	r2,r2,255
 2015bac:	10000326 	beq	r2,zero,2015bbc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2015bb0:	00800044 	movi	r2,1
 2015bb4:	e0bff405 	stb	r2,-48(fp)
 2015bb8:	00000106 	br	2015bc0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2015bbc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2015bc0:	e0bffe03 	ldbu	r2,-8(fp)
 2015bc4:	10000326 	beq	r2,zero,2015bd4 <OSQDel+0xec>
 2015bc8:	10800060 	cmpeqi	r2,r2,1
 2015bcc:	1000301e 	bne	r2,zero,2015c90 <OSQDel+0x1a8>
 2015bd0:	00005506 	br	2015d28 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2015bd4:	e0bff403 	ldbu	r2,-48(fp)
 2015bd8:	10001e1e 	bne	r2,zero,2015c54 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2015bdc:	e0bffd17 	ldw	r2,-12(fp)
 2015be0:	00c00fc4 	movi	r3,63
 2015be4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2015be8:	e0bffd17 	ldw	r2,-12(fp)
 2015bec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2015bf0:	e0bffd17 	ldw	r2,-12(fp)
 2015bf4:	10800117 	ldw	r2,4(r2)
 2015bf8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2015bfc:	d0e73017 	ldw	r3,-25408(gp)
 2015c00:	e0bff817 	ldw	r2,-32(fp)
 2015c04:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2015c08:	e0bff817 	ldw	r2,-32(fp)
 2015c0c:	d0a73015 	stw	r2,-25408(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015c10:	e0bffd17 	ldw	r2,-12(fp)
 2015c14:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2015c18:	d0e73217 	ldw	r3,-25400(gp)
 2015c1c:	e0bffd17 	ldw	r2,-12(fp)
 2015c20:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2015c24:	e0bffd17 	ldw	r2,-12(fp)
 2015c28:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2015c2c:	e0bffd17 	ldw	r2,-12(fp)
 2015c30:	d0a73215 	stw	r2,-25400(gp)
 2015c34:	e0bff617 	ldw	r2,-40(fp)
 2015c38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c3c:	e0bff717 	ldw	r2,-36(fp)
 2015c40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2015c44:	e0bfff17 	ldw	r2,-4(fp)
 2015c48:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2015c4c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2015c50:	00003f06 	br	2015d50 <OSQDel+0x268>
 2015c54:	e0bff617 	ldw	r2,-40(fp)
 2015c58:	e0bff915 	stw	r2,-28(fp)
 2015c5c:	e0bff917 	ldw	r2,-28(fp)
 2015c60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2015c64:	e0bfff17 	ldw	r2,-4(fp)
 2015c68:	00c01244 	movi	r3,73
 2015c6c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2015c70:	e0bffd17 	ldw	r2,-12(fp)
 2015c74:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2015c78:	00003506 	br	2015d50 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2015c7c:	000f883a 	mov	r7,zero
 2015c80:	01800104 	movi	r6,4
 2015c84:	000b883a 	mov	r5,zero
 2015c88:	e13ffd17 	ldw	r4,-12(fp)
 2015c8c:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2015c90:	e0bffd17 	ldw	r2,-12(fp)
 2015c94:	10800283 	ldbu	r2,10(r2)
 2015c98:	10803fcc 	andi	r2,r2,255
 2015c9c:	103ff71e 	bne	r2,zero,2015c7c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2015ca0:	e0bffd17 	ldw	r2,-12(fp)
 2015ca4:	00c00fc4 	movi	r3,63
 2015ca8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2015cac:	e0bffd17 	ldw	r2,-12(fp)
 2015cb0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2015cb4:	e0bffd17 	ldw	r2,-12(fp)
 2015cb8:	10800117 	ldw	r2,4(r2)
 2015cbc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2015cc0:	d0e73017 	ldw	r3,-25408(gp)
 2015cc4:	e0bff817 	ldw	r2,-32(fp)
 2015cc8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2015ccc:	e0bff817 	ldw	r2,-32(fp)
 2015cd0:	d0a73015 	stw	r2,-25408(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015cd4:	e0bffd17 	ldw	r2,-12(fp)
 2015cd8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2015cdc:	d0e73217 	ldw	r3,-25400(gp)
 2015ce0:	e0bffd17 	ldw	r2,-12(fp)
 2015ce4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2015ce8:	e0bffd17 	ldw	r2,-12(fp)
 2015cec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2015cf0:	e0bffd17 	ldw	r2,-12(fp)
 2015cf4:	d0a73215 	stw	r2,-25400(gp)
 2015cf8:	e0bff617 	ldw	r2,-40(fp)
 2015cfc:	e0bffa15 	stw	r2,-24(fp)
 2015d00:	e0bffa17 	ldw	r2,-24(fp)
 2015d04:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2015d08:	e0bff403 	ldbu	r2,-48(fp)
 2015d0c:	10800058 	cmpnei	r2,r2,1
 2015d10:	1000011e 	bne	r2,zero,2015d18 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2015d14:	201265c0 	call	201265c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2015d18:	e0bfff17 	ldw	r2,-4(fp)
 2015d1c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2015d20:	e03ff515 	stw	zero,-44(fp)
             break;
 2015d24:	00000a06 	br	2015d50 <OSQDel+0x268>
 2015d28:	e0bff617 	ldw	r2,-40(fp)
 2015d2c:	e0bffb15 	stw	r2,-20(fp)
 2015d30:	e0bffb17 	ldw	r2,-20(fp)
 2015d34:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2015d38:	e0bfff17 	ldw	r2,-4(fp)
 2015d3c:	00c001c4 	movi	r3,7
 2015d40:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2015d44:	e0bffd17 	ldw	r2,-12(fp)
 2015d48:	e0bff515 	stw	r2,-44(fp)
             break;
 2015d4c:	0001883a 	nop
    }
    return (pevent_return);
 2015d50:	e0bff517 	ldw	r2,-44(fp)
}
 2015d54:	e037883a 	mov	sp,fp
 2015d58:	dfc00117 	ldw	ra,4(sp)
 2015d5c:	df000017 	ldw	fp,0(sp)
 2015d60:	dec00204 	addi	sp,sp,8
 2015d64:	f800283a 	ret

02015d68 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2015d68:	defffa04 	addi	sp,sp,-24
 2015d6c:	df000515 	stw	fp,20(sp)
 2015d70:	df000504 	addi	fp,sp,20
 2015d74:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015d78:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015d7c:	e0bfff17 	ldw	r2,-4(fp)
 2015d80:	1000021e 	bne	r2,zero,2015d8c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2015d84:	00800104 	movi	r2,4
 2015d88:	00002106 	br	2015e10 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2015d8c:	e0bfff17 	ldw	r2,-4(fp)
 2015d90:	10800003 	ldbu	r2,0(r2)
 2015d94:	10803fcc 	andi	r2,r2,255
 2015d98:	108000a0 	cmpeqi	r2,r2,2
 2015d9c:	1000021e 	bne	r2,zero,2015da8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2015da0:	00800044 	movi	r2,1
 2015da4:	00001a06 	br	2015e10 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015da8:	0005303a 	rdctl	r2,status
 2015dac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015db0:	e0fffd17 	ldw	r3,-12(fp)
 2015db4:	00bfff84 	movi	r2,-2
 2015db8:	1884703a 	and	r2,r3,r2
 2015dbc:	1001703a 	wrctl	status,r2
  
  return context;
 2015dc0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015dc4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2015dc8:	e0bfff17 	ldw	r2,-4(fp)
 2015dcc:	10800117 	ldw	r2,4(r2)
 2015dd0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2015dd4:	e0bffc17 	ldw	r2,-16(fp)
 2015dd8:	10c00117 	ldw	r3,4(r2)
 2015ddc:	e0bffc17 	ldw	r2,-16(fp)
 2015de0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2015de4:	e0bffc17 	ldw	r2,-16(fp)
 2015de8:	10c00117 	ldw	r3,4(r2)
 2015dec:	e0bffc17 	ldw	r2,-16(fp)
 2015df0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2015df4:	e0bffc17 	ldw	r2,-16(fp)
 2015df8:	1000058d 	sth	zero,22(r2)
 2015dfc:	e0bffb17 	ldw	r2,-20(fp)
 2015e00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e04:	e0bffe17 	ldw	r2,-8(fp)
 2015e08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015e0c:	0005883a 	mov	r2,zero
}
 2015e10:	e037883a 	mov	sp,fp
 2015e14:	df000017 	ldw	fp,0(sp)
 2015e18:	dec00104 	addi	sp,sp,4
 2015e1c:	f800283a 	ret

02015e20 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2015e20:	defff304 	addi	sp,sp,-52
 2015e24:	dfc00c15 	stw	ra,48(sp)
 2015e28:	df000b15 	stw	fp,44(sp)
 2015e2c:	df000b04 	addi	fp,sp,44
 2015e30:	e13ffd15 	stw	r4,-12(fp)
 2015e34:	2805883a 	mov	r2,r5
 2015e38:	e1bfff15 	stw	r6,-4(fp)
 2015e3c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015e40:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2015e44:	e0bfff17 	ldw	r2,-4(fp)
 2015e48:	1000021e 	bne	r2,zero,2015e54 <OSQPend+0x34>
        return ((void *)0);
 2015e4c:	0005883a 	mov	r2,zero
 2015e50:	00009106 	br	2016098 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2015e54:	e0bffd17 	ldw	r2,-12(fp)
 2015e58:	1000051e 	bne	r2,zero,2015e70 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2015e5c:	e0bfff17 	ldw	r2,-4(fp)
 2015e60:	00c00104 	movi	r3,4
 2015e64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015e68:	0005883a 	mov	r2,zero
 2015e6c:	00008a06 	br	2016098 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2015e70:	e0bffd17 	ldw	r2,-12(fp)
 2015e74:	10800003 	ldbu	r2,0(r2)
 2015e78:	10803fcc 	andi	r2,r2,255
 2015e7c:	108000a0 	cmpeqi	r2,r2,2
 2015e80:	1000051e 	bne	r2,zero,2015e98 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015e84:	e0bfff17 	ldw	r2,-4(fp)
 2015e88:	00c00044 	movi	r3,1
 2015e8c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015e90:	0005883a 	mov	r2,zero
 2015e94:	00008006 	br	2016098 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2015e98:	d0a73303 	ldbu	r2,-25396(gp)
 2015e9c:	10803fcc 	andi	r2,r2,255
 2015ea0:	10000526 	beq	r2,zero,2015eb8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2015ea4:	e0bfff17 	ldw	r2,-4(fp)
 2015ea8:	00c00084 	movi	r3,2
 2015eac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015eb0:	0005883a 	mov	r2,zero
 2015eb4:	00007806 	br	2016098 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2015eb8:	d0a72503 	ldbu	r2,-25452(gp)
 2015ebc:	10803fcc 	andi	r2,r2,255
 2015ec0:	10000526 	beq	r2,zero,2015ed8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2015ec4:	e0bfff17 	ldw	r2,-4(fp)
 2015ec8:	00c00344 	movi	r3,13
 2015ecc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015ed0:	0005883a 	mov	r2,zero
 2015ed4:	00007006 	br	2016098 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015ed8:	0005303a 	rdctl	r2,status
 2015edc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015ee0:	e0fffc17 	ldw	r3,-16(fp)
 2015ee4:	00bfff84 	movi	r2,-2
 2015ee8:	1884703a 	and	r2,r3,r2
 2015eec:	1001703a 	wrctl	status,r2
  
  return context;
 2015ef0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015ef4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2015ef8:	e0bffd17 	ldw	r2,-12(fp)
 2015efc:	10800117 	ldw	r2,4(r2)
 2015f00:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2015f04:	e0bff817 	ldw	r2,-32(fp)
 2015f08:	1080058b 	ldhu	r2,22(r2)
 2015f0c:	10bfffcc 	andi	r2,r2,65535
 2015f10:	10001e26 	beq	r2,zero,2015f8c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2015f14:	e0bff817 	ldw	r2,-32(fp)
 2015f18:	10800417 	ldw	r2,16(r2)
 2015f1c:	11000104 	addi	r4,r2,4
 2015f20:	e0fff817 	ldw	r3,-32(fp)
 2015f24:	19000415 	stw	r4,16(r3)
 2015f28:	10800017 	ldw	r2,0(r2)
 2015f2c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2015f30:	e0bff817 	ldw	r2,-32(fp)
 2015f34:	1080058b 	ldhu	r2,22(r2)
 2015f38:	10bfffc4 	addi	r2,r2,-1
 2015f3c:	1007883a 	mov	r3,r2
 2015f40:	e0bff817 	ldw	r2,-32(fp)
 2015f44:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2015f48:	e0bff817 	ldw	r2,-32(fp)
 2015f4c:	10c00417 	ldw	r3,16(r2)
 2015f50:	e0bff817 	ldw	r2,-32(fp)
 2015f54:	10800217 	ldw	r2,8(r2)
 2015f58:	1880041e 	bne	r3,r2,2015f6c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2015f5c:	e0bff817 	ldw	r2,-32(fp)
 2015f60:	10c00117 	ldw	r3,4(r2)
 2015f64:	e0bff817 	ldw	r2,-32(fp)
 2015f68:	10c00415 	stw	r3,16(r2)
 2015f6c:	e0bff617 	ldw	r2,-40(fp)
 2015f70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f74:	e0bff717 	ldw	r2,-36(fp)
 2015f78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2015f7c:	e0bfff17 	ldw	r2,-4(fp)
 2015f80:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2015f84:	e0bff517 	ldw	r2,-44(fp)
 2015f88:	00004306 	br	2016098 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2015f8c:	d0a73417 	ldw	r2,-25392(gp)
 2015f90:	d0e73417 	ldw	r3,-25392(gp)
 2015f94:	18c00c03 	ldbu	r3,48(r3)
 2015f98:	18c00114 	ori	r3,r3,4
 2015f9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015fa0:	d0a73417 	ldw	r2,-25392(gp)
 2015fa4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 2015fa8:	d0a73417 	ldw	r2,-25392(gp)
 2015fac:	e0fffe0b 	ldhu	r3,-8(fp)
 2015fb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2015fb4:	e13ffd17 	ldw	r4,-12(fp)
 2015fb8:	2011da80 	call	2011da8 <OS_EventTaskWait>
 2015fbc:	e0bff617 	ldw	r2,-40(fp)
 2015fc0:	e0bffb15 	stw	r2,-20(fp)
 2015fc4:	e0bffb17 	ldw	r2,-20(fp)
 2015fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2015fcc:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015fd0:	0005303a 	rdctl	r2,status
 2015fd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015fd8:	e0fff917 	ldw	r3,-28(fp)
 2015fdc:	00bfff84 	movi	r2,-2
 2015fe0:	1884703a 	and	r2,r3,r2
 2015fe4:	1001703a 	wrctl	status,r2
  
  return context;
 2015fe8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2015fec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2015ff0:	d0a73417 	ldw	r2,-25392(gp)
 2015ff4:	10800c43 	ldbu	r2,49(r2)
 2015ff8:	10803fcc 	andi	r2,r2,255
 2015ffc:	10000326 	beq	r2,zero,201600c <OSQPend+0x1ec>
 2016000:	108000a0 	cmpeqi	r2,r2,2
 2016004:	1000071e 	bne	r2,zero,2016024 <OSQPend+0x204>
 2016008:	00000b06 	br	2016038 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 201600c:	d0a73417 	ldw	r2,-25392(gp)
 2016010:	10800917 	ldw	r2,36(r2)
 2016014:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2016018:	e0bfff17 	ldw	r2,-4(fp)
 201601c:	10000005 	stb	zero,0(r2)
             break;
 2016020:	00000e06 	br	201605c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2016024:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2016028:	e0bfff17 	ldw	r2,-4(fp)
 201602c:	00c00384 	movi	r3,14
 2016030:	10c00005 	stb	r3,0(r2)
             break;
 2016034:	00000906 	br	201605c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2016038:	d0a73417 	ldw	r2,-25392(gp)
 201603c:	e17ffd17 	ldw	r5,-12(fp)
 2016040:	1009883a 	mov	r4,r2
 2016044:	20120080 	call	2012008 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2016048:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201604c:	e0bfff17 	ldw	r2,-4(fp)
 2016050:	00c00284 	movi	r3,10
 2016054:	10c00005 	stb	r3,0(r2)
             break;
 2016058:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201605c:	d0a73417 	ldw	r2,-25392(gp)
 2016060:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2016064:	d0a73417 	ldw	r2,-25392(gp)
 2016068:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201606c:	d0a73417 	ldw	r2,-25392(gp)
 2016070:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2016074:	d0a73417 	ldw	r2,-25392(gp)
 2016078:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201607c:	d0a73417 	ldw	r2,-25392(gp)
 2016080:	10000915 	stw	zero,36(r2)
 2016084:	e0bff617 	ldw	r2,-40(fp)
 2016088:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201608c:	e0bffa17 	ldw	r2,-24(fp)
 2016090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2016094:	e0bff517 	ldw	r2,-44(fp)
}
 2016098:	e037883a 	mov	sp,fp
 201609c:	dfc00117 	ldw	ra,4(sp)
 20160a0:	df000017 	ldw	fp,0(sp)
 20160a4:	dec00204 	addi	sp,sp,8
 20160a8:	f800283a 	ret

020160ac <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20160ac:	defff604 	addi	sp,sp,-40
 20160b0:	dfc00915 	stw	ra,36(sp)
 20160b4:	df000815 	stw	fp,32(sp)
 20160b8:	df000804 	addi	fp,sp,32
 20160bc:	e13ffd15 	stw	r4,-12(fp)
 20160c0:	2805883a 	mov	r2,r5
 20160c4:	e1bfff15 	stw	r6,-4(fp)
 20160c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20160cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20160d0:	e0bfff17 	ldw	r2,-4(fp)
 20160d4:	1000021e 	bne	r2,zero,20160e0 <OSQPendAbort+0x34>
        return (0);
 20160d8:	0005883a 	mov	r2,zero
 20160dc:	00004906 	br	2016204 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20160e0:	e0bffd17 	ldw	r2,-12(fp)
 20160e4:	1000051e 	bne	r2,zero,20160fc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20160e8:	e0bfff17 	ldw	r2,-4(fp)
 20160ec:	00c00104 	movi	r3,4
 20160f0:	10c00005 	stb	r3,0(r2)
        return (0);
 20160f4:	0005883a 	mov	r2,zero
 20160f8:	00004206 	br	2016204 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 20160fc:	e0bffd17 	ldw	r2,-12(fp)
 2016100:	10800003 	ldbu	r2,0(r2)
 2016104:	10803fcc 	andi	r2,r2,255
 2016108:	108000a0 	cmpeqi	r2,r2,2
 201610c:	1000051e 	bne	r2,zero,2016124 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2016110:	e0bfff17 	ldw	r2,-4(fp)
 2016114:	00c00044 	movi	r3,1
 2016118:	10c00005 	stb	r3,0(r2)
        return (0);
 201611c:	0005883a 	mov	r2,zero
 2016120:	00003806 	br	2016204 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016124:	0005303a 	rdctl	r2,status
 2016128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201612c:	e0fffc17 	ldw	r3,-16(fp)
 2016130:	00bfff84 	movi	r2,-2
 2016134:	1884703a 	and	r2,r3,r2
 2016138:	1001703a 	wrctl	status,r2
  
  return context;
 201613c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016140:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2016144:	e0bffd17 	ldw	r2,-12(fp)
 2016148:	10800283 	ldbu	r2,10(r2)
 201614c:	10803fcc 	andi	r2,r2,255
 2016150:	10002526 	beq	r2,zero,20161e8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 2016154:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2016158:	e0bffe03 	ldbu	r2,-8(fp)
 201615c:	10800060 	cmpeqi	r2,r2,1
 2016160:	10000e26 	beq	r2,zero,201619c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2016164:	00000806 	br	2016188 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2016168:	01c00084 	movi	r7,2
 201616c:	01800104 	movi	r6,4
 2016170:	000b883a 	mov	r5,zero
 2016174:	e13ffd17 	ldw	r4,-12(fp)
 2016178:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                     nbr_tasks++;
 201617c:	e0bff803 	ldbu	r2,-32(fp)
 2016180:	10800044 	addi	r2,r2,1
 2016184:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2016188:	e0bffd17 	ldw	r2,-12(fp)
 201618c:	10800283 	ldbu	r2,10(r2)
 2016190:	10803fcc 	andi	r2,r2,255
 2016194:	103ff41e 	bne	r2,zero,2016168 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2016198:	00000906 	br	20161c0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201619c:	01c00084 	movi	r7,2
 20161a0:	01800104 	movi	r6,4
 20161a4:	000b883a 	mov	r5,zero
 20161a8:	e13ffd17 	ldw	r4,-12(fp)
 20161ac:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 nbr_tasks++;
 20161b0:	e0bff803 	ldbu	r2,-32(fp)
 20161b4:	10800044 	addi	r2,r2,1
 20161b8:	e0bff805 	stb	r2,-32(fp)
                 break;
 20161bc:	0001883a 	nop
 20161c0:	e0bff917 	ldw	r2,-28(fp)
 20161c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20161c8:	e0bffa17 	ldw	r2,-24(fp)
 20161cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20161d0:	201265c0 	call	201265c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20161d4:	e0bfff17 	ldw	r2,-4(fp)
 20161d8:	00c00384 	movi	r3,14
 20161dc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 20161e0:	e0bff803 	ldbu	r2,-32(fp)
 20161e4:	00000706 	br	2016204 <OSQPendAbort+0x158>
 20161e8:	e0bff917 	ldw	r2,-28(fp)
 20161ec:	e0bffb15 	stw	r2,-20(fp)
 20161f0:	e0bffb17 	ldw	r2,-20(fp)
 20161f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20161f8:	e0bfff17 	ldw	r2,-4(fp)
 20161fc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2016200:	0005883a 	mov	r2,zero
}
 2016204:	e037883a 	mov	sp,fp
 2016208:	dfc00117 	ldw	ra,4(sp)
 201620c:	df000017 	ldw	fp,0(sp)
 2016210:	dec00204 	addi	sp,sp,8
 2016214:	f800283a 	ret

02016218 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2016218:	defff604 	addi	sp,sp,-40
 201621c:	dfc00915 	stw	ra,36(sp)
 2016220:	df000815 	stw	fp,32(sp)
 2016224:	df000804 	addi	fp,sp,32
 2016228:	e13ffe15 	stw	r4,-8(fp)
 201622c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2016230:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2016234:	e0bffe17 	ldw	r2,-8(fp)
 2016238:	1000021e 	bne	r2,zero,2016244 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201623c:	00800104 	movi	r2,4
 2016240:	00004a06 	br	201636c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2016244:	e0bffe17 	ldw	r2,-8(fp)
 2016248:	10800003 	ldbu	r2,0(r2)
 201624c:	10803fcc 	andi	r2,r2,255
 2016250:	108000a0 	cmpeqi	r2,r2,2
 2016254:	1000021e 	bne	r2,zero,2016260 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 2016258:	00800044 	movi	r2,1
 201625c:	00004306 	br	201636c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016260:	0005303a 	rdctl	r2,status
 2016264:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016268:	e0fffd17 	ldw	r3,-12(fp)
 201626c:	00bfff84 	movi	r2,-2
 2016270:	1884703a 	and	r2,r3,r2
 2016274:	1001703a 	wrctl	status,r2
  
  return context;
 2016278:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201627c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2016280:	e0bffe17 	ldw	r2,-8(fp)
 2016284:	10800283 	ldbu	r2,10(r2)
 2016288:	10803fcc 	andi	r2,r2,255
 201628c:	10000c26 	beq	r2,zero,20162c0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2016290:	000f883a 	mov	r7,zero
 2016294:	01800104 	movi	r6,4
 2016298:	e17fff17 	ldw	r5,-4(fp)
 201629c:	e13ffe17 	ldw	r4,-8(fp)
 20162a0:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 20162a4:	e0bff817 	ldw	r2,-32(fp)
 20162a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20162ac:	e0bff917 	ldw	r2,-28(fp)
 20162b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 20162b4:	201265c0 	call	201265c <OS_Sched>
        return (OS_ERR_NONE);
 20162b8:	0005883a 	mov	r2,zero
 20162bc:	00002b06 	br	201636c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 20162c0:	e0bffe17 	ldw	r2,-8(fp)
 20162c4:	10800117 	ldw	r2,4(r2)
 20162c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 20162cc:	e0bffb17 	ldw	r2,-20(fp)
 20162d0:	10c0058b 	ldhu	r3,22(r2)
 20162d4:	e0bffb17 	ldw	r2,-20(fp)
 20162d8:	1080050b 	ldhu	r2,20(r2)
 20162dc:	18ffffcc 	andi	r3,r3,65535
 20162e0:	10bfffcc 	andi	r2,r2,65535
 20162e4:	18800636 	bltu	r3,r2,2016300 <OSQPost+0xe8>
 20162e8:	e0bff817 	ldw	r2,-32(fp)
 20162ec:	e0bffa15 	stw	r2,-24(fp)
 20162f0:	e0bffa17 	ldw	r2,-24(fp)
 20162f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20162f8:	00800784 	movi	r2,30
 20162fc:	00001b06 	br	201636c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2016300:	e0bffb17 	ldw	r2,-20(fp)
 2016304:	10800317 	ldw	r2,12(r2)
 2016308:	11000104 	addi	r4,r2,4
 201630c:	e0fffb17 	ldw	r3,-20(fp)
 2016310:	19000315 	stw	r4,12(r3)
 2016314:	e0ffff17 	ldw	r3,-4(fp)
 2016318:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201631c:	e0bffb17 	ldw	r2,-20(fp)
 2016320:	1080058b 	ldhu	r2,22(r2)
 2016324:	10800044 	addi	r2,r2,1
 2016328:	1007883a 	mov	r3,r2
 201632c:	e0bffb17 	ldw	r2,-20(fp)
 2016330:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2016334:	e0bffb17 	ldw	r2,-20(fp)
 2016338:	10c00317 	ldw	r3,12(r2)
 201633c:	e0bffb17 	ldw	r2,-20(fp)
 2016340:	10800217 	ldw	r2,8(r2)
 2016344:	1880041e 	bne	r3,r2,2016358 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 2016348:	e0bffb17 	ldw	r2,-20(fp)
 201634c:	10c00117 	ldw	r3,4(r2)
 2016350:	e0bffb17 	ldw	r2,-20(fp)
 2016354:	10c00315 	stw	r3,12(r2)
 2016358:	e0bff817 	ldw	r2,-32(fp)
 201635c:	e0bffc15 	stw	r2,-16(fp)
 2016360:	e0bffc17 	ldw	r2,-16(fp)
 2016364:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016368:	0005883a 	mov	r2,zero
}
 201636c:	e037883a 	mov	sp,fp
 2016370:	dfc00117 	ldw	ra,4(sp)
 2016374:	df000017 	ldw	fp,0(sp)
 2016378:	dec00204 	addi	sp,sp,8
 201637c:	f800283a 	ret

02016380 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2016380:	defff604 	addi	sp,sp,-40
 2016384:	dfc00915 	stw	ra,36(sp)
 2016388:	df000815 	stw	fp,32(sp)
 201638c:	df000804 	addi	fp,sp,32
 2016390:	e13ffe15 	stw	r4,-8(fp)
 2016394:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016398:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201639c:	e0bffe17 	ldw	r2,-8(fp)
 20163a0:	1000021e 	bne	r2,zero,20163ac <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20163a4:	00800104 	movi	r2,4
 20163a8:	00004c06 	br	20164dc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20163ac:	e0bffe17 	ldw	r2,-8(fp)
 20163b0:	10800003 	ldbu	r2,0(r2)
 20163b4:	10803fcc 	andi	r2,r2,255
 20163b8:	108000a0 	cmpeqi	r2,r2,2
 20163bc:	1000021e 	bne	r2,zero,20163c8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 20163c0:	00800044 	movi	r2,1
 20163c4:	00004506 	br	20164dc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20163c8:	0005303a 	rdctl	r2,status
 20163cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20163d0:	e0fffd17 	ldw	r3,-12(fp)
 20163d4:	00bfff84 	movi	r2,-2
 20163d8:	1884703a 	and	r2,r3,r2
 20163dc:	1001703a 	wrctl	status,r2
  
  return context;
 20163e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20163e4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 20163e8:	e0bffe17 	ldw	r2,-8(fp)
 20163ec:	10800283 	ldbu	r2,10(r2)
 20163f0:	10803fcc 	andi	r2,r2,255
 20163f4:	10000c26 	beq	r2,zero,2016428 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20163f8:	000f883a 	mov	r7,zero
 20163fc:	01800104 	movi	r6,4
 2016400:	e17fff17 	ldw	r5,-4(fp)
 2016404:	e13ffe17 	ldw	r4,-8(fp)
 2016408:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 201640c:	e0bff817 	ldw	r2,-32(fp)
 2016410:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016414:	e0bff917 	ldw	r2,-28(fp)
 2016418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201641c:	201265c0 	call	201265c <OS_Sched>
        return (OS_ERR_NONE);
 2016420:	0005883a 	mov	r2,zero
 2016424:	00002d06 	br	20164dc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2016428:	e0bffe17 	ldw	r2,-8(fp)
 201642c:	10800117 	ldw	r2,4(r2)
 2016430:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2016434:	e0bffb17 	ldw	r2,-20(fp)
 2016438:	10c0058b 	ldhu	r3,22(r2)
 201643c:	e0bffb17 	ldw	r2,-20(fp)
 2016440:	1080050b 	ldhu	r2,20(r2)
 2016444:	18ffffcc 	andi	r3,r3,65535
 2016448:	10bfffcc 	andi	r2,r2,65535
 201644c:	18800636 	bltu	r3,r2,2016468 <OSQPostFront+0xe8>
 2016450:	e0bff817 	ldw	r2,-32(fp)
 2016454:	e0bffa15 	stw	r2,-24(fp)
 2016458:	e0bffa17 	ldw	r2,-24(fp)
 201645c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2016460:	00800784 	movi	r2,30
 2016464:	00001d06 	br	20164dc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2016468:	e0bffb17 	ldw	r2,-20(fp)
 201646c:	10c00417 	ldw	r3,16(r2)
 2016470:	e0bffb17 	ldw	r2,-20(fp)
 2016474:	10800117 	ldw	r2,4(r2)
 2016478:	1880041e 	bne	r3,r2,201648c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 201647c:	e0bffb17 	ldw	r2,-20(fp)
 2016480:	10c00217 	ldw	r3,8(r2)
 2016484:	e0bffb17 	ldw	r2,-20(fp)
 2016488:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 201648c:	e0bffb17 	ldw	r2,-20(fp)
 2016490:	10800417 	ldw	r2,16(r2)
 2016494:	10ffff04 	addi	r3,r2,-4
 2016498:	e0bffb17 	ldw	r2,-20(fp)
 201649c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 20164a0:	e0bffb17 	ldw	r2,-20(fp)
 20164a4:	10800417 	ldw	r2,16(r2)
 20164a8:	e0ffff17 	ldw	r3,-4(fp)
 20164ac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20164b0:	e0bffb17 	ldw	r2,-20(fp)
 20164b4:	1080058b 	ldhu	r2,22(r2)
 20164b8:	10800044 	addi	r2,r2,1
 20164bc:	1007883a 	mov	r3,r2
 20164c0:	e0bffb17 	ldw	r2,-20(fp)
 20164c4:	10c0058d 	sth	r3,22(r2)
 20164c8:	e0bff817 	ldw	r2,-32(fp)
 20164cc:	e0bffc15 	stw	r2,-16(fp)
 20164d0:	e0bffc17 	ldw	r2,-16(fp)
 20164d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20164d8:	0005883a 	mov	r2,zero
}
 20164dc:	e037883a 	mov	sp,fp
 20164e0:	dfc00117 	ldw	ra,4(sp)
 20164e4:	df000017 	ldw	fp,0(sp)
 20164e8:	dec00204 	addi	sp,sp,8
 20164ec:	f800283a 	ret

020164f0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 20164f0:	defff504 	addi	sp,sp,-44
 20164f4:	dfc00a15 	stw	ra,40(sp)
 20164f8:	df000915 	stw	fp,36(sp)
 20164fc:	df000904 	addi	fp,sp,36
 2016500:	e13ffd15 	stw	r4,-12(fp)
 2016504:	e17ffe15 	stw	r5,-8(fp)
 2016508:	3005883a 	mov	r2,r6
 201650c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016510:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2016514:	e0bffd17 	ldw	r2,-12(fp)
 2016518:	1000021e 	bne	r2,zero,2016524 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201651c:	00800104 	movi	r2,4
 2016520:	00007106 	br	20166e8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2016524:	e0bffd17 	ldw	r2,-12(fp)
 2016528:	10800003 	ldbu	r2,0(r2)
 201652c:	10803fcc 	andi	r2,r2,255
 2016530:	108000a0 	cmpeqi	r2,r2,2
 2016534:	1000021e 	bne	r2,zero,2016540 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 2016538:	00800044 	movi	r2,1
 201653c:	00006a06 	br	20166e8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016540:	0005303a 	rdctl	r2,status
 2016544:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016548:	e0fffc17 	ldw	r3,-16(fp)
 201654c:	00bfff84 	movi	r2,-2
 2016550:	1884703a 	and	r2,r3,r2
 2016554:	1001703a 	wrctl	status,r2
  
  return context;
 2016558:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201655c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2016560:	e0bffd17 	ldw	r2,-12(fp)
 2016564:	10800283 	ldbu	r2,10(r2)
 2016568:	10803fcc 	andi	r2,r2,255
 201656c:	10001d26 	beq	r2,zero,20165e4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2016570:	e0bfff03 	ldbu	r2,-4(fp)
 2016574:	1080004c 	andi	r2,r2,1
 2016578:	10000b26 	beq	r2,zero,20165a8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201657c:	00000506 	br	2016594 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2016580:	000f883a 	mov	r7,zero
 2016584:	01800104 	movi	r6,4
 2016588:	e17ffe17 	ldw	r5,-8(fp)
 201658c:	e13ffd17 	ldw	r4,-12(fp)
 2016590:	2011c100 	call	2011c10 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2016594:	e0bffd17 	ldw	r2,-12(fp)
 2016598:	10800283 	ldbu	r2,10(r2)
 201659c:	10803fcc 	andi	r2,r2,255
 20165a0:	103ff71e 	bne	r2,zero,2016580 <OSQPostOpt+0x90>
 20165a4:	00000506 	br	20165bc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20165a8:	000f883a 	mov	r7,zero
 20165ac:	01800104 	movi	r6,4
 20165b0:	e17ffe17 	ldw	r5,-8(fp)
 20165b4:	e13ffd17 	ldw	r4,-12(fp)
 20165b8:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 20165bc:	e0bff717 	ldw	r2,-36(fp)
 20165c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20165c4:	e0bff817 	ldw	r2,-32(fp)
 20165c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 20165cc:	e0bfff03 	ldbu	r2,-4(fp)
 20165d0:	1080010c 	andi	r2,r2,4
 20165d4:	1000011e 	bne	r2,zero,20165dc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 20165d8:	201265c0 	call	201265c <OS_Sched>
        }
        return (OS_ERR_NONE);
 20165dc:	0005883a 	mov	r2,zero
 20165e0:	00004106 	br	20166e8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20165e4:	e0bffd17 	ldw	r2,-12(fp)
 20165e8:	10800117 	ldw	r2,4(r2)
 20165ec:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20165f0:	e0bffa17 	ldw	r2,-24(fp)
 20165f4:	10c0058b 	ldhu	r3,22(r2)
 20165f8:	e0bffa17 	ldw	r2,-24(fp)
 20165fc:	1080050b 	ldhu	r2,20(r2)
 2016600:	18ffffcc 	andi	r3,r3,65535
 2016604:	10bfffcc 	andi	r2,r2,65535
 2016608:	18800636 	bltu	r3,r2,2016624 <OSQPostOpt+0x134>
 201660c:	e0bff717 	ldw	r2,-36(fp)
 2016610:	e0bff915 	stw	r2,-28(fp)
 2016614:	e0bff917 	ldw	r2,-28(fp)
 2016618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201661c:	00800784 	movi	r2,30
 2016620:	00003106 	br	20166e8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2016624:	e0bfff03 	ldbu	r2,-4(fp)
 2016628:	1080008c 	andi	r2,r2,2
 201662c:	10001326 	beq	r2,zero,201667c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 2016630:	e0bffa17 	ldw	r2,-24(fp)
 2016634:	10c00417 	ldw	r3,16(r2)
 2016638:	e0bffa17 	ldw	r2,-24(fp)
 201663c:	10800117 	ldw	r2,4(r2)
 2016640:	1880041e 	bne	r3,r2,2016654 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2016644:	e0bffa17 	ldw	r2,-24(fp)
 2016648:	10c00217 	ldw	r3,8(r2)
 201664c:	e0bffa17 	ldw	r2,-24(fp)
 2016650:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2016654:	e0bffa17 	ldw	r2,-24(fp)
 2016658:	10800417 	ldw	r2,16(r2)
 201665c:	10ffff04 	addi	r3,r2,-4
 2016660:	e0bffa17 	ldw	r2,-24(fp)
 2016664:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2016668:	e0bffa17 	ldw	r2,-24(fp)
 201666c:	10800417 	ldw	r2,16(r2)
 2016670:	e0fffe17 	ldw	r3,-8(fp)
 2016674:	10c00015 	stw	r3,0(r2)
 2016678:	00001006 	br	20166bc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 201667c:	e0bffa17 	ldw	r2,-24(fp)
 2016680:	10800317 	ldw	r2,12(r2)
 2016684:	11000104 	addi	r4,r2,4
 2016688:	e0fffa17 	ldw	r3,-24(fp)
 201668c:	19000315 	stw	r4,12(r3)
 2016690:	e0fffe17 	ldw	r3,-8(fp)
 2016694:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 2016698:	e0bffa17 	ldw	r2,-24(fp)
 201669c:	10c00317 	ldw	r3,12(r2)
 20166a0:	e0bffa17 	ldw	r2,-24(fp)
 20166a4:	10800217 	ldw	r2,8(r2)
 20166a8:	1880041e 	bne	r3,r2,20166bc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 20166ac:	e0bffa17 	ldw	r2,-24(fp)
 20166b0:	10c00117 	ldw	r3,4(r2)
 20166b4:	e0bffa17 	ldw	r2,-24(fp)
 20166b8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20166bc:	e0bffa17 	ldw	r2,-24(fp)
 20166c0:	1080058b 	ldhu	r2,22(r2)
 20166c4:	10800044 	addi	r2,r2,1
 20166c8:	1007883a 	mov	r3,r2
 20166cc:	e0bffa17 	ldw	r2,-24(fp)
 20166d0:	10c0058d 	sth	r3,22(r2)
 20166d4:	e0bff717 	ldw	r2,-36(fp)
 20166d8:	e0bffb15 	stw	r2,-20(fp)
 20166dc:	e0bffb17 	ldw	r2,-20(fp)
 20166e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20166e4:	0005883a 	mov	r2,zero
}
 20166e8:	e037883a 	mov	sp,fp
 20166ec:	dfc00117 	ldw	ra,4(sp)
 20166f0:	df000017 	ldw	fp,0(sp)
 20166f4:	dec00204 	addi	sp,sp,8
 20166f8:	f800283a 	ret

020166fc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 20166fc:	defff604 	addi	sp,sp,-40
 2016700:	df000915 	stw	fp,36(sp)
 2016704:	df000904 	addi	fp,sp,36
 2016708:	e13ffe15 	stw	r4,-8(fp)
 201670c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2016710:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2016714:	e0bffe17 	ldw	r2,-8(fp)
 2016718:	1000021e 	bne	r2,zero,2016724 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201671c:	00800104 	movi	r2,4
 2016720:	00004906 	br	2016848 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2016724:	e0bfff17 	ldw	r2,-4(fp)
 2016728:	1000021e 	bne	r2,zero,2016734 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201672c:	00800244 	movi	r2,9
 2016730:	00004506 	br	2016848 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2016734:	e0bffe17 	ldw	r2,-8(fp)
 2016738:	10800003 	ldbu	r2,0(r2)
 201673c:	10803fcc 	andi	r2,r2,255
 2016740:	108000a0 	cmpeqi	r2,r2,2
 2016744:	1000021e 	bne	r2,zero,2016750 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2016748:	00800044 	movi	r2,1
 201674c:	00003e06 	br	2016848 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016750:	0005303a 	rdctl	r2,status
 2016754:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016758:	e0fffd17 	ldw	r3,-12(fp)
 201675c:	00bfff84 	movi	r2,-2
 2016760:	1884703a 	and	r2,r3,r2
 2016764:	1001703a 	wrctl	status,r2
  
  return context;
 2016768:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201676c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2016770:	e0bffe17 	ldw	r2,-8(fp)
 2016774:	10c00283 	ldbu	r3,10(r2)
 2016778:	e0bfff17 	ldw	r2,-4(fp)
 201677c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2016780:	e0bffe17 	ldw	r2,-8(fp)
 2016784:	108002c4 	addi	r2,r2,11
 2016788:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201678c:	e0bfff17 	ldw	r2,-4(fp)
 2016790:	10800204 	addi	r2,r2,8
 2016794:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2016798:	e03ff705 	stb	zero,-36(fp)
 201679c:	00000b06 	br	20167cc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 20167a0:	e0bff917 	ldw	r2,-28(fp)
 20167a4:	10c00044 	addi	r3,r2,1
 20167a8:	e0fff915 	stw	r3,-28(fp)
 20167ac:	e0fff817 	ldw	r3,-32(fp)
 20167b0:	19000044 	addi	r4,r3,1
 20167b4:	e13ff815 	stw	r4,-32(fp)
 20167b8:	18c00003 	ldbu	r3,0(r3)
 20167bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20167c0:	e0bff703 	ldbu	r2,-36(fp)
 20167c4:	10800044 	addi	r2,r2,1
 20167c8:	e0bff705 	stb	r2,-36(fp)
 20167cc:	e0bff703 	ldbu	r2,-36(fp)
 20167d0:	108000f0 	cmpltui	r2,r2,3
 20167d4:	103ff21e 	bne	r2,zero,20167a0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 20167d8:	e0bffe17 	ldw	r2,-8(fp)
 20167dc:	10800117 	ldw	r2,4(r2)
 20167e0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 20167e4:	e0bffc17 	ldw	r2,-16(fp)
 20167e8:	1080058b 	ldhu	r2,22(r2)
 20167ec:	10bfffcc 	andi	r2,r2,65535
 20167f0:	10000626 	beq	r2,zero,201680c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 20167f4:	e0bffc17 	ldw	r2,-16(fp)
 20167f8:	10800417 	ldw	r2,16(r2)
 20167fc:	10c00017 	ldw	r3,0(r2)
 2016800:	e0bfff17 	ldw	r2,-4(fp)
 2016804:	10c00015 	stw	r3,0(r2)
 2016808:	00000206 	br	2016814 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 201680c:	e0bfff17 	ldw	r2,-4(fp)
 2016810:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2016814:	e0bffc17 	ldw	r2,-16(fp)
 2016818:	10c0058b 	ldhu	r3,22(r2)
 201681c:	e0bfff17 	ldw	r2,-4(fp)
 2016820:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2016824:	e0bffc17 	ldw	r2,-16(fp)
 2016828:	10c0050b 	ldhu	r3,20(r2)
 201682c:	e0bfff17 	ldw	r2,-4(fp)
 2016830:	10c0018d 	sth	r3,6(r2)
 2016834:	e0bffa17 	ldw	r2,-24(fp)
 2016838:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201683c:	e0bffb17 	ldw	r2,-20(fp)
 2016840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016844:	0005883a 	mov	r2,zero
}
 2016848:	e037883a 	mov	sp,fp
 201684c:	df000017 	ldw	fp,0(sp)
 2016850:	dec00104 	addi	sp,sp,4
 2016854:	f800283a 	ret

02016858 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2016858:	defffb04 	addi	sp,sp,-20
 201685c:	dfc00415 	stw	ra,16(sp)
 2016860:	df000315 	stw	fp,12(sp)
 2016864:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2016868:	01407804 	movi	r5,480
 201686c:	010080b4 	movhi	r4,514
 2016870:	211a3504 	addi	r4,r4,26836
 2016874:	20125a00 	call	20125a0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2016878:	008080b4 	movhi	r2,514
 201687c:	109a3504 	addi	r2,r2,26836
 2016880:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2016884:	008080b4 	movhi	r2,514
 2016888:	109a3b04 	addi	r2,r2,26860
 201688c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2016890:	e03ffd0d 	sth	zero,-12(fp)
 2016894:	00000c06 	br	20168c8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2016898:	e0bffe17 	ldw	r2,-8(fp)
 201689c:	e0ffff17 	ldw	r3,-4(fp)
 20168a0:	10c00015 	stw	r3,0(r2)
        pq1++;
 20168a4:	e0bffe17 	ldw	r2,-8(fp)
 20168a8:	10800604 	addi	r2,r2,24
 20168ac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 20168b0:	e0bfff17 	ldw	r2,-4(fp)
 20168b4:	10800604 	addi	r2,r2,24
 20168b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 20168bc:	e0bffd0b 	ldhu	r2,-12(fp)
 20168c0:	10800044 	addi	r2,r2,1
 20168c4:	e0bffd0d 	sth	r2,-12(fp)
 20168c8:	e0bffd0b 	ldhu	r2,-12(fp)
 20168cc:	108004f0 	cmpltui	r2,r2,19
 20168d0:	103ff11e 	bne	r2,zero,2016898 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 20168d4:	e0bffe17 	ldw	r2,-8(fp)
 20168d8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 20168dc:	008080b4 	movhi	r2,514
 20168e0:	109a3504 	addi	r2,r2,26836
 20168e4:	d0a73015 	stw	r2,-25408(gp)
#endif
}
 20168e8:	0001883a 	nop
 20168ec:	e037883a 	mov	sp,fp
 20168f0:	dfc00117 	ldw	ra,4(sp)
 20168f4:	df000017 	ldw	fp,0(sp)
 20168f8:	dec00204 	addi	sp,sp,8
 20168fc:	f800283a 	ret

02016900 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2016900:	defffa04 	addi	sp,sp,-24
 2016904:	df000515 	stw	fp,20(sp)
 2016908:	df000504 	addi	fp,sp,20
 201690c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016910:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2016914:	e0bfff17 	ldw	r2,-4(fp)
 2016918:	1000021e 	bne	r2,zero,2016924 <OSSemAccept+0x24>
        return (0);
 201691c:	0005883a 	mov	r2,zero
 2016920:	00001f06 	br	20169a0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2016924:	e0bfff17 	ldw	r2,-4(fp)
 2016928:	10800003 	ldbu	r2,0(r2)
 201692c:	10803fcc 	andi	r2,r2,255
 2016930:	108000e0 	cmpeqi	r2,r2,3
 2016934:	1000021e 	bne	r2,zero,2016940 <OSSemAccept+0x40>
        return (0);
 2016938:	0005883a 	mov	r2,zero
 201693c:	00001806 	br	20169a0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016940:	0005303a 	rdctl	r2,status
 2016944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016948:	e0fffe17 	ldw	r3,-8(fp)
 201694c:	00bfff84 	movi	r2,-2
 2016950:	1884703a 	and	r2,r3,r2
 2016954:	1001703a 	wrctl	status,r2
  
  return context;
 2016958:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201695c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2016960:	e0bfff17 	ldw	r2,-4(fp)
 2016964:	1080020b 	ldhu	r2,8(r2)
 2016968:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201696c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016970:	10000626 	beq	r2,zero,201698c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2016974:	e0bfff17 	ldw	r2,-4(fp)
 2016978:	1080020b 	ldhu	r2,8(r2)
 201697c:	10bfffc4 	addi	r2,r2,-1
 2016980:	1007883a 	mov	r3,r2
 2016984:	e0bfff17 	ldw	r2,-4(fp)
 2016988:	10c0020d 	sth	r3,8(r2)
 201698c:	e0bffb17 	ldw	r2,-20(fp)
 2016990:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016994:	e0bffc17 	ldw	r2,-16(fp)
 2016998:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201699c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20169a0:	e037883a 	mov	sp,fp
 20169a4:	df000017 	ldw	fp,0(sp)
 20169a8:	dec00104 	addi	sp,sp,4
 20169ac:	f800283a 	ret

020169b0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 20169b0:	defff904 	addi	sp,sp,-28
 20169b4:	dfc00615 	stw	ra,24(sp)
 20169b8:	df000515 	stw	fp,20(sp)
 20169bc:	df000504 	addi	fp,sp,20
 20169c0:	2005883a 	mov	r2,r4
 20169c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20169c8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20169cc:	d0a73303 	ldbu	r2,-25396(gp)
 20169d0:	10803fcc 	andi	r2,r2,255
 20169d4:	10000226 	beq	r2,zero,20169e0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 20169d8:	0005883a 	mov	r2,zero
 20169dc:	00002506 	br	2016a74 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20169e0:	0005303a 	rdctl	r2,status
 20169e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20169e8:	e0fffe17 	ldw	r3,-8(fp)
 20169ec:	00bfff84 	movi	r2,-2
 20169f0:	1884703a 	and	r2,r3,r2
 20169f4:	1001703a 	wrctl	status,r2
  
  return context;
 20169f8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20169fc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2016a00:	d0a73217 	ldw	r2,-25400(gp)
 2016a04:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2016a08:	d0a73217 	ldw	r2,-25400(gp)
 2016a0c:	10000326 	beq	r2,zero,2016a1c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2016a10:	d0a73217 	ldw	r2,-25400(gp)
 2016a14:	10800117 	ldw	r2,4(r2)
 2016a18:	d0a73215 	stw	r2,-25400(gp)
 2016a1c:	e0bffb17 	ldw	r2,-20(fp)
 2016a20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016a24:	e0bffc17 	ldw	r2,-16(fp)
 2016a28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2016a2c:	e0bffd17 	ldw	r2,-12(fp)
 2016a30:	10000f26 	beq	r2,zero,2016a70 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2016a34:	e0bffd17 	ldw	r2,-12(fp)
 2016a38:	00c000c4 	movi	r3,3
 2016a3c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2016a40:	e0bffd17 	ldw	r2,-12(fp)
 2016a44:	e0ffff0b 	ldhu	r3,-4(fp)
 2016a48:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2016a4c:	e0bffd17 	ldw	r2,-12(fp)
 2016a50:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2016a54:	e0bffd17 	ldw	r2,-12(fp)
 2016a58:	00c00fc4 	movi	r3,63
 2016a5c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2016a60:	e0bffd17 	ldw	r2,-12(fp)
 2016a64:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2016a68:	e13ffd17 	ldw	r4,-12(fp)
 2016a6c:	20121c00 	call	20121c0 <OS_EventWaitListInit>
    }
    return (pevent);
 2016a70:	e0bffd17 	ldw	r2,-12(fp)
}
 2016a74:	e037883a 	mov	sp,fp
 2016a78:	dfc00117 	ldw	ra,4(sp)
 2016a7c:	df000017 	ldw	fp,0(sp)
 2016a80:	dec00204 	addi	sp,sp,8
 2016a84:	f800283a 	ret

02016a88 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2016a88:	defff304 	addi	sp,sp,-52
 2016a8c:	dfc00c15 	stw	ra,48(sp)
 2016a90:	df000b15 	stw	fp,44(sp)
 2016a94:	df000b04 	addi	fp,sp,44
 2016a98:	e13ffd15 	stw	r4,-12(fp)
 2016a9c:	2805883a 	mov	r2,r5
 2016aa0:	e1bfff15 	stw	r6,-4(fp)
 2016aa4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2016aa8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2016aac:	e0bfff17 	ldw	r2,-4(fp)
 2016ab0:	1000021e 	bne	r2,zero,2016abc <OSSemDel+0x34>
        return (pevent);
 2016ab4:	e0bffd17 	ldw	r2,-12(fp)
 2016ab8:	00007e06 	br	2016cb4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2016abc:	e0bffd17 	ldw	r2,-12(fp)
 2016ac0:	1000051e 	bne	r2,zero,2016ad8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2016ac4:	e0bfff17 	ldw	r2,-4(fp)
 2016ac8:	00c00104 	movi	r3,4
 2016acc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016ad0:	e0bffd17 	ldw	r2,-12(fp)
 2016ad4:	00007706 	br	2016cb4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2016ad8:	e0bffd17 	ldw	r2,-12(fp)
 2016adc:	10800003 	ldbu	r2,0(r2)
 2016ae0:	10803fcc 	andi	r2,r2,255
 2016ae4:	108000e0 	cmpeqi	r2,r2,3
 2016ae8:	1000051e 	bne	r2,zero,2016b00 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2016aec:	e0bfff17 	ldw	r2,-4(fp)
 2016af0:	00c00044 	movi	r3,1
 2016af4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016af8:	e0bffd17 	ldw	r2,-12(fp)
 2016afc:	00006d06 	br	2016cb4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016b00:	d0a73303 	ldbu	r2,-25396(gp)
 2016b04:	10803fcc 	andi	r2,r2,255
 2016b08:	10000526 	beq	r2,zero,2016b20 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2016b0c:	e0bfff17 	ldw	r2,-4(fp)
 2016b10:	00c003c4 	movi	r3,15
 2016b14:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016b18:	e0bffd17 	ldw	r2,-12(fp)
 2016b1c:	00006506 	br	2016cb4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016b20:	0005303a 	rdctl	r2,status
 2016b24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016b28:	e0fffc17 	ldw	r3,-16(fp)
 2016b2c:	00bfff84 	movi	r2,-2
 2016b30:	1884703a 	and	r2,r3,r2
 2016b34:	1001703a 	wrctl	status,r2
  
  return context;
 2016b38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016b3c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2016b40:	e0bffd17 	ldw	r2,-12(fp)
 2016b44:	10800283 	ldbu	r2,10(r2)
 2016b48:	10803fcc 	andi	r2,r2,255
 2016b4c:	10000326 	beq	r2,zero,2016b5c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2016b50:	00800044 	movi	r2,1
 2016b54:	e0bff505 	stb	r2,-44(fp)
 2016b58:	00000106 	br	2016b60 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2016b5c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2016b60:	e0bffe03 	ldbu	r2,-8(fp)
 2016b64:	10000326 	beq	r2,zero,2016b74 <OSSemDel+0xec>
 2016b68:	10800060 	cmpeqi	r2,r2,1
 2016b6c:	1000281e 	bne	r2,zero,2016c10 <OSSemDel+0x188>
 2016b70:	00004506 	br	2016c88 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2016b74:	e0bff503 	ldbu	r2,-44(fp)
 2016b78:	1000161e 	bne	r2,zero,2016bd4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2016b7c:	e0bffd17 	ldw	r2,-12(fp)
 2016b80:	00c00fc4 	movi	r3,63
 2016b84:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2016b88:	e0bffd17 	ldw	r2,-12(fp)
 2016b8c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2016b90:	e0bffd17 	ldw	r2,-12(fp)
 2016b94:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2016b98:	d0e73217 	ldw	r3,-25400(gp)
 2016b9c:	e0bffd17 	ldw	r2,-12(fp)
 2016ba0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2016ba4:	e0bffd17 	ldw	r2,-12(fp)
 2016ba8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2016bac:	e0bffd17 	ldw	r2,-12(fp)
 2016bb0:	d0a73215 	stw	r2,-25400(gp)
 2016bb4:	e0bff717 	ldw	r2,-36(fp)
 2016bb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016bbc:	e0bff817 	ldw	r2,-32(fp)
 2016bc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2016bc4:	e0bfff17 	ldw	r2,-4(fp)
 2016bc8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2016bcc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2016bd0:	00003706 	br	2016cb0 <OSSemDel+0x228>
 2016bd4:	e0bff717 	ldw	r2,-36(fp)
 2016bd8:	e0bff915 	stw	r2,-28(fp)
 2016bdc:	e0bff917 	ldw	r2,-28(fp)
 2016be0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2016be4:	e0bfff17 	ldw	r2,-4(fp)
 2016be8:	00c01244 	movi	r3,73
 2016bec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2016bf0:	e0bffd17 	ldw	r2,-12(fp)
 2016bf4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2016bf8:	00002d06 	br	2016cb0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2016bfc:	000f883a 	mov	r7,zero
 2016c00:	01800044 	movi	r6,1
 2016c04:	000b883a 	mov	r5,zero
 2016c08:	e13ffd17 	ldw	r4,-12(fp)
 2016c0c:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2016c10:	e0bffd17 	ldw	r2,-12(fp)
 2016c14:	10800283 	ldbu	r2,10(r2)
 2016c18:	10803fcc 	andi	r2,r2,255
 2016c1c:	103ff71e 	bne	r2,zero,2016bfc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2016c20:	e0bffd17 	ldw	r2,-12(fp)
 2016c24:	00c00fc4 	movi	r3,63
 2016c28:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2016c2c:	e0bffd17 	ldw	r2,-12(fp)
 2016c30:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2016c34:	e0bffd17 	ldw	r2,-12(fp)
 2016c38:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2016c3c:	d0e73217 	ldw	r3,-25400(gp)
 2016c40:	e0bffd17 	ldw	r2,-12(fp)
 2016c44:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2016c48:	e0bffd17 	ldw	r2,-12(fp)
 2016c4c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2016c50:	e0bffd17 	ldw	r2,-12(fp)
 2016c54:	d0a73215 	stw	r2,-25400(gp)
 2016c58:	e0bff717 	ldw	r2,-36(fp)
 2016c5c:	e0bffa15 	stw	r2,-24(fp)
 2016c60:	e0bffa17 	ldw	r2,-24(fp)
 2016c64:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2016c68:	e0bff503 	ldbu	r2,-44(fp)
 2016c6c:	10800058 	cmpnei	r2,r2,1
 2016c70:	1000011e 	bne	r2,zero,2016c78 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2016c74:	201265c0 	call	201265c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2016c78:	e0bfff17 	ldw	r2,-4(fp)
 2016c7c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2016c80:	e03ff615 	stw	zero,-40(fp)
             break;
 2016c84:	00000a06 	br	2016cb0 <OSSemDel+0x228>
 2016c88:	e0bff717 	ldw	r2,-36(fp)
 2016c8c:	e0bffb15 	stw	r2,-20(fp)
 2016c90:	e0bffb17 	ldw	r2,-20(fp)
 2016c94:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2016c98:	e0bfff17 	ldw	r2,-4(fp)
 2016c9c:	00c001c4 	movi	r3,7
 2016ca0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2016ca4:	e0bffd17 	ldw	r2,-12(fp)
 2016ca8:	e0bff615 	stw	r2,-40(fp)
             break;
 2016cac:	0001883a 	nop
    }
    return (pevent_return);
 2016cb0:	e0bff617 	ldw	r2,-40(fp)
}
 2016cb4:	e037883a 	mov	sp,fp
 2016cb8:	dfc00117 	ldw	ra,4(sp)
 2016cbc:	df000017 	ldw	fp,0(sp)
 2016cc0:	dec00204 	addi	sp,sp,8
 2016cc4:	f800283a 	ret

02016cc8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2016cc8:	defff504 	addi	sp,sp,-44
 2016ccc:	dfc00a15 	stw	ra,40(sp)
 2016cd0:	df000915 	stw	fp,36(sp)
 2016cd4:	df000904 	addi	fp,sp,36
 2016cd8:	e13ffd15 	stw	r4,-12(fp)
 2016cdc:	2805883a 	mov	r2,r5
 2016ce0:	e1bfff15 	stw	r6,-4(fp)
 2016ce4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016ce8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2016cec:	e0bfff17 	ldw	r2,-4(fp)
 2016cf0:	10007226 	beq	r2,zero,2016ebc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2016cf4:	e0bffd17 	ldw	r2,-12(fp)
 2016cf8:	1000041e 	bne	r2,zero,2016d0c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2016cfc:	e0bfff17 	ldw	r2,-4(fp)
 2016d00:	00c00104 	movi	r3,4
 2016d04:	10c00005 	stb	r3,0(r2)
        return;
 2016d08:	00006d06 	br	2016ec0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2016d0c:	e0bffd17 	ldw	r2,-12(fp)
 2016d10:	10800003 	ldbu	r2,0(r2)
 2016d14:	10803fcc 	andi	r2,r2,255
 2016d18:	108000e0 	cmpeqi	r2,r2,3
 2016d1c:	1000041e 	bne	r2,zero,2016d30 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2016d20:	e0bfff17 	ldw	r2,-4(fp)
 2016d24:	00c00044 	movi	r3,1
 2016d28:	10c00005 	stb	r3,0(r2)
        return;
 2016d2c:	00006406 	br	2016ec0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2016d30:	d0a73303 	ldbu	r2,-25396(gp)
 2016d34:	10803fcc 	andi	r2,r2,255
 2016d38:	10000426 	beq	r2,zero,2016d4c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2016d3c:	e0bfff17 	ldw	r2,-4(fp)
 2016d40:	00c00084 	movi	r3,2
 2016d44:	10c00005 	stb	r3,0(r2)
        return;
 2016d48:	00005d06 	br	2016ec0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2016d4c:	d0a72503 	ldbu	r2,-25452(gp)
 2016d50:	10803fcc 	andi	r2,r2,255
 2016d54:	10000426 	beq	r2,zero,2016d68 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2016d58:	e0bfff17 	ldw	r2,-4(fp)
 2016d5c:	00c00344 	movi	r3,13
 2016d60:	10c00005 	stb	r3,0(r2)
        return;
 2016d64:	00005606 	br	2016ec0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d68:	0005303a 	rdctl	r2,status
 2016d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d70:	e0fffc17 	ldw	r3,-16(fp)
 2016d74:	00bfff84 	movi	r2,-2
 2016d78:	1884703a 	and	r2,r3,r2
 2016d7c:	1001703a 	wrctl	status,r2
  
  return context;
 2016d80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016d84:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2016d88:	e0bffd17 	ldw	r2,-12(fp)
 2016d8c:	1080020b 	ldhu	r2,8(r2)
 2016d90:	10bfffcc 	andi	r2,r2,65535
 2016d94:	10000d26 	beq	r2,zero,2016dcc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2016d98:	e0bffd17 	ldw	r2,-12(fp)
 2016d9c:	1080020b 	ldhu	r2,8(r2)
 2016da0:	10bfffc4 	addi	r2,r2,-1
 2016da4:	1007883a 	mov	r3,r2
 2016da8:	e0bffd17 	ldw	r2,-12(fp)
 2016dac:	10c0020d 	sth	r3,8(r2)
 2016db0:	e0bff717 	ldw	r2,-36(fp)
 2016db4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016db8:	e0bff817 	ldw	r2,-32(fp)
 2016dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2016dc0:	e0bfff17 	ldw	r2,-4(fp)
 2016dc4:	10000005 	stb	zero,0(r2)
        return;
 2016dc8:	00003d06 	br	2016ec0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2016dcc:	d0a73417 	ldw	r2,-25392(gp)
 2016dd0:	d0e73417 	ldw	r3,-25392(gp)
 2016dd4:	18c00c03 	ldbu	r3,48(r3)
 2016dd8:	18c00054 	ori	r3,r3,1
 2016ddc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2016de0:	d0a73417 	ldw	r2,-25392(gp)
 2016de4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2016de8:	d0a73417 	ldw	r2,-25392(gp)
 2016dec:	e0fffe0b 	ldhu	r3,-8(fp)
 2016df0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2016df4:	e13ffd17 	ldw	r4,-12(fp)
 2016df8:	2011da80 	call	2011da8 <OS_EventTaskWait>
 2016dfc:	e0bff717 	ldw	r2,-36(fp)
 2016e00:	e0bffb15 	stw	r2,-20(fp)
 2016e04:	e0bffb17 	ldw	r2,-20(fp)
 2016e08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2016e0c:	201265c0 	call	201265c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016e10:	0005303a 	rdctl	r2,status
 2016e14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016e18:	e0fff917 	ldw	r3,-28(fp)
 2016e1c:	00bfff84 	movi	r2,-2
 2016e20:	1884703a 	and	r2,r3,r2
 2016e24:	1001703a 	wrctl	status,r2
  
  return context;
 2016e28:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2016e2c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2016e30:	d0a73417 	ldw	r2,-25392(gp)
 2016e34:	10800c43 	ldbu	r2,49(r2)
 2016e38:	10803fcc 	andi	r2,r2,255
 2016e3c:	10000326 	beq	r2,zero,2016e4c <OSSemPend+0x184>
 2016e40:	108000a0 	cmpeqi	r2,r2,2
 2016e44:	1000041e 	bne	r2,zero,2016e58 <OSSemPend+0x190>
 2016e48:	00000706 	br	2016e68 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2016e4c:	e0bfff17 	ldw	r2,-4(fp)
 2016e50:	10000005 	stb	zero,0(r2)
             break;
 2016e54:	00000c06 	br	2016e88 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2016e58:	e0bfff17 	ldw	r2,-4(fp)
 2016e5c:	00c00384 	movi	r3,14
 2016e60:	10c00005 	stb	r3,0(r2)
             break;
 2016e64:	00000806 	br	2016e88 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2016e68:	d0a73417 	ldw	r2,-25392(gp)
 2016e6c:	e17ffd17 	ldw	r5,-12(fp)
 2016e70:	1009883a 	mov	r4,r2
 2016e74:	20120080 	call	2012008 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2016e78:	e0bfff17 	ldw	r2,-4(fp)
 2016e7c:	00c00284 	movi	r3,10
 2016e80:	10c00005 	stb	r3,0(r2)
             break;
 2016e84:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2016e88:	d0a73417 	ldw	r2,-25392(gp)
 2016e8c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2016e90:	d0a73417 	ldw	r2,-25392(gp)
 2016e94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2016e98:	d0a73417 	ldw	r2,-25392(gp)
 2016e9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2016ea0:	d0a73417 	ldw	r2,-25392(gp)
 2016ea4:	10000815 	stw	zero,32(r2)
 2016ea8:	e0bff717 	ldw	r2,-36(fp)
 2016eac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016eb0:	e0bffa17 	ldw	r2,-24(fp)
 2016eb4:	1001703a 	wrctl	status,r2
 2016eb8:	00000106 	br	2016ec0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2016ebc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2016ec0:	e037883a 	mov	sp,fp
 2016ec4:	dfc00117 	ldw	ra,4(sp)
 2016ec8:	df000017 	ldw	fp,0(sp)
 2016ecc:	dec00204 	addi	sp,sp,8
 2016ed0:	f800283a 	ret

02016ed4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2016ed4:	defff604 	addi	sp,sp,-40
 2016ed8:	dfc00915 	stw	ra,36(sp)
 2016edc:	df000815 	stw	fp,32(sp)
 2016ee0:	df000804 	addi	fp,sp,32
 2016ee4:	e13ffd15 	stw	r4,-12(fp)
 2016ee8:	2805883a 	mov	r2,r5
 2016eec:	e1bfff15 	stw	r6,-4(fp)
 2016ef0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016ef4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2016ef8:	e0bfff17 	ldw	r2,-4(fp)
 2016efc:	1000021e 	bne	r2,zero,2016f08 <OSSemPendAbort+0x34>
        return (0);
 2016f00:	0005883a 	mov	r2,zero
 2016f04:	00004906 	br	201702c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2016f08:	e0bffd17 	ldw	r2,-12(fp)
 2016f0c:	1000051e 	bne	r2,zero,2016f24 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2016f10:	e0bfff17 	ldw	r2,-4(fp)
 2016f14:	00c00104 	movi	r3,4
 2016f18:	10c00005 	stb	r3,0(r2)
        return (0);
 2016f1c:	0005883a 	mov	r2,zero
 2016f20:	00004206 	br	201702c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2016f24:	e0bffd17 	ldw	r2,-12(fp)
 2016f28:	10800003 	ldbu	r2,0(r2)
 2016f2c:	10803fcc 	andi	r2,r2,255
 2016f30:	108000e0 	cmpeqi	r2,r2,3
 2016f34:	1000051e 	bne	r2,zero,2016f4c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2016f38:	e0bfff17 	ldw	r2,-4(fp)
 2016f3c:	00c00044 	movi	r3,1
 2016f40:	10c00005 	stb	r3,0(r2)
        return (0);
 2016f44:	0005883a 	mov	r2,zero
 2016f48:	00003806 	br	201702c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016f4c:	0005303a 	rdctl	r2,status
 2016f50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016f54:	e0fffc17 	ldw	r3,-16(fp)
 2016f58:	00bfff84 	movi	r2,-2
 2016f5c:	1884703a 	and	r2,r3,r2
 2016f60:	1001703a 	wrctl	status,r2
  
  return context;
 2016f64:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016f68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2016f6c:	e0bffd17 	ldw	r2,-12(fp)
 2016f70:	10800283 	ldbu	r2,10(r2)
 2016f74:	10803fcc 	andi	r2,r2,255
 2016f78:	10002526 	beq	r2,zero,2017010 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 2016f7c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2016f80:	e0bffe03 	ldbu	r2,-8(fp)
 2016f84:	10800060 	cmpeqi	r2,r2,1
 2016f88:	10000e26 	beq	r2,zero,2016fc4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2016f8c:	00000806 	br	2016fb0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2016f90:	01c00084 	movi	r7,2
 2016f94:	01800044 	movi	r6,1
 2016f98:	000b883a 	mov	r5,zero
 2016f9c:	e13ffd17 	ldw	r4,-12(fp)
 2016fa0:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                     nbr_tasks++;
 2016fa4:	e0bff803 	ldbu	r2,-32(fp)
 2016fa8:	10800044 	addi	r2,r2,1
 2016fac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2016fb0:	e0bffd17 	ldw	r2,-12(fp)
 2016fb4:	10800283 	ldbu	r2,10(r2)
 2016fb8:	10803fcc 	andi	r2,r2,255
 2016fbc:	103ff41e 	bne	r2,zero,2016f90 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2016fc0:	00000906 	br	2016fe8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2016fc4:	01c00084 	movi	r7,2
 2016fc8:	01800044 	movi	r6,1
 2016fcc:	000b883a 	mov	r5,zero
 2016fd0:	e13ffd17 	ldw	r4,-12(fp)
 2016fd4:	2011c100 	call	2011c10 <OS_EventTaskRdy>
                 nbr_tasks++;
 2016fd8:	e0bff803 	ldbu	r2,-32(fp)
 2016fdc:	10800044 	addi	r2,r2,1
 2016fe0:	e0bff805 	stb	r2,-32(fp)
                 break;
 2016fe4:	0001883a 	nop
 2016fe8:	e0bff917 	ldw	r2,-28(fp)
 2016fec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016ff0:	e0bffa17 	ldw	r2,-24(fp)
 2016ff4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2016ff8:	201265c0 	call	201265c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2016ffc:	e0bfff17 	ldw	r2,-4(fp)
 2017000:	00c00384 	movi	r3,14
 2017004:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2017008:	e0bff803 	ldbu	r2,-32(fp)
 201700c:	00000706 	br	201702c <OSSemPendAbort+0x158>
 2017010:	e0bff917 	ldw	r2,-28(fp)
 2017014:	e0bffb15 	stw	r2,-20(fp)
 2017018:	e0bffb17 	ldw	r2,-20(fp)
 201701c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017020:	e0bfff17 	ldw	r2,-4(fp)
 2017024:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 2017028:	0005883a 	mov	r2,zero
}
 201702c:	e037883a 	mov	sp,fp
 2017030:	dfc00117 	ldw	ra,4(sp)
 2017034:	df000017 	ldw	fp,0(sp)
 2017038:	dec00204 	addi	sp,sp,8
 201703c:	f800283a 	ret

02017040 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 2017040:	defff804 	addi	sp,sp,-32
 2017044:	dfc00715 	stw	ra,28(sp)
 2017048:	df000615 	stw	fp,24(sp)
 201704c:	df000604 	addi	fp,sp,24
 2017050:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017054:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017058:	e0bfff17 	ldw	r2,-4(fp)
 201705c:	1000021e 	bne	r2,zero,2017068 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 2017060:	00800104 	movi	r2,4
 2017064:	00003506 	br	201713c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2017068:	e0bfff17 	ldw	r2,-4(fp)
 201706c:	10800003 	ldbu	r2,0(r2)
 2017070:	10803fcc 	andi	r2,r2,255
 2017074:	108000e0 	cmpeqi	r2,r2,3
 2017078:	1000021e 	bne	r2,zero,2017084 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201707c:	00800044 	movi	r2,1
 2017080:	00002e06 	br	201713c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017084:	0005303a 	rdctl	r2,status
 2017088:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201708c:	e0fffe17 	ldw	r3,-8(fp)
 2017090:	00bfff84 	movi	r2,-2
 2017094:	1884703a 	and	r2,r3,r2
 2017098:	1001703a 	wrctl	status,r2
  
  return context;
 201709c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20170a0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 20170a4:	e0bfff17 	ldw	r2,-4(fp)
 20170a8:	10800283 	ldbu	r2,10(r2)
 20170ac:	10803fcc 	andi	r2,r2,255
 20170b0:	10000c26 	beq	r2,zero,20170e4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 20170b4:	000f883a 	mov	r7,zero
 20170b8:	01800044 	movi	r6,1
 20170bc:	000b883a 	mov	r5,zero
 20170c0:	e13fff17 	ldw	r4,-4(fp)
 20170c4:	2011c100 	call	2011c10 <OS_EventTaskRdy>
 20170c8:	e0bffa17 	ldw	r2,-24(fp)
 20170cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20170d0:	e0bffb17 	ldw	r2,-20(fp)
 20170d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 20170d8:	201265c0 	call	201265c <OS_Sched>
        return (OS_ERR_NONE);
 20170dc:	0005883a 	mov	r2,zero
 20170e0:	00001606 	br	201713c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 20170e4:	e0bfff17 	ldw	r2,-4(fp)
 20170e8:	1080020b 	ldhu	r2,8(r2)
 20170ec:	10ffffcc 	andi	r3,r2,65535
 20170f0:	00bfffd4 	movui	r2,65535
 20170f4:	18800c26 	beq	r3,r2,2017128 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 20170f8:	e0bfff17 	ldw	r2,-4(fp)
 20170fc:	1080020b 	ldhu	r2,8(r2)
 2017100:	10800044 	addi	r2,r2,1
 2017104:	1007883a 	mov	r3,r2
 2017108:	e0bfff17 	ldw	r2,-4(fp)
 201710c:	10c0020d 	sth	r3,8(r2)
 2017110:	e0bffa17 	ldw	r2,-24(fp)
 2017114:	e0bffc15 	stw	r2,-16(fp)
 2017118:	e0bffc17 	ldw	r2,-16(fp)
 201711c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2017120:	0005883a 	mov	r2,zero
 2017124:	00000506 	br	201713c <OSSemPost+0xfc>
 2017128:	e0bffa17 	ldw	r2,-24(fp)
 201712c:	e0bffd15 	stw	r2,-12(fp)
 2017130:	e0bffd17 	ldw	r2,-12(fp)
 2017134:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 2017138:	00800c84 	movi	r2,50
}
 201713c:	e037883a 	mov	sp,fp
 2017140:	dfc00117 	ldw	ra,4(sp)
 2017144:	df000017 	ldw	fp,0(sp)
 2017148:	dec00204 	addi	sp,sp,8
 201714c:	f800283a 	ret

02017150 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 2017150:	defff704 	addi	sp,sp,-36
 2017154:	df000815 	stw	fp,32(sp)
 2017158:	df000804 	addi	fp,sp,32
 201715c:	e13ffe15 	stw	r4,-8(fp)
 2017160:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017164:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017168:	e0bffe17 	ldw	r2,-8(fp)
 201716c:	1000021e 	bne	r2,zero,2017178 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2017170:	00800104 	movi	r2,4
 2017174:	00003606 	br	2017250 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 2017178:	e0bfff17 	ldw	r2,-4(fp)
 201717c:	1000021e 	bne	r2,zero,2017188 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2017180:	00800244 	movi	r2,9
 2017184:	00003206 	br	2017250 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2017188:	e0bffe17 	ldw	r2,-8(fp)
 201718c:	10800003 	ldbu	r2,0(r2)
 2017190:	10803fcc 	andi	r2,r2,255
 2017194:	108000e0 	cmpeqi	r2,r2,3
 2017198:	1000021e 	bne	r2,zero,20171a4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201719c:	00800044 	movi	r2,1
 20171a0:	00002b06 	br	2017250 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20171a4:	0005303a 	rdctl	r2,status
 20171a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20171ac:	e0fffd17 	ldw	r3,-12(fp)
 20171b0:	00bfff84 	movi	r2,-2
 20171b4:	1884703a 	and	r2,r3,r2
 20171b8:	1001703a 	wrctl	status,r2
  
  return context;
 20171bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20171c0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 20171c4:	e0bffe17 	ldw	r2,-8(fp)
 20171c8:	10c00283 	ldbu	r3,10(r2)
 20171cc:	e0bfff17 	ldw	r2,-4(fp)
 20171d0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 20171d4:	e0bffe17 	ldw	r2,-8(fp)
 20171d8:	108002c4 	addi	r2,r2,11
 20171dc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 20171e0:	e0bfff17 	ldw	r2,-4(fp)
 20171e4:	10800084 	addi	r2,r2,2
 20171e8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20171ec:	e03ffa05 	stb	zero,-24(fp)
 20171f0:	00000b06 	br	2017220 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 20171f4:	e0bff917 	ldw	r2,-28(fp)
 20171f8:	10c00044 	addi	r3,r2,1
 20171fc:	e0fff915 	stw	r3,-28(fp)
 2017200:	e0fff817 	ldw	r3,-32(fp)
 2017204:	19000044 	addi	r4,r3,1
 2017208:	e13ff815 	stw	r4,-32(fp)
 201720c:	18c00003 	ldbu	r3,0(r3)
 2017210:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017214:	e0bffa03 	ldbu	r2,-24(fp)
 2017218:	10800044 	addi	r2,r2,1
 201721c:	e0bffa05 	stb	r2,-24(fp)
 2017220:	e0bffa03 	ldbu	r2,-24(fp)
 2017224:	108000f0 	cmpltui	r2,r2,3
 2017228:	103ff21e 	bne	r2,zero,20171f4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201722c:	e0bffe17 	ldw	r2,-8(fp)
 2017230:	10c0020b 	ldhu	r3,8(r2)
 2017234:	e0bfff17 	ldw	r2,-4(fp)
 2017238:	10c0000d 	sth	r3,0(r2)
 201723c:	e0bffb17 	ldw	r2,-20(fp)
 2017240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017244:	e0bffc17 	ldw	r2,-16(fp)
 2017248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201724c:	0005883a 	mov	r2,zero
}
 2017250:	e037883a 	mov	sp,fp
 2017254:	df000017 	ldw	fp,0(sp)
 2017258:	dec00104 	addi	sp,sp,4
 201725c:	f800283a 	ret

02017260 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 2017260:	defff904 	addi	sp,sp,-28
 2017264:	df000615 	stw	fp,24(sp)
 2017268:	df000604 	addi	fp,sp,24
 201726c:	e13ffd15 	stw	r4,-12(fp)
 2017270:	2805883a 	mov	r2,r5
 2017274:	e1bfff15 	stw	r6,-4(fp)
 2017278:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201727c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2017280:	e0bfff17 	ldw	r2,-4(fp)
 2017284:	10003126 	beq	r2,zero,201734c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017288:	e0bffd17 	ldw	r2,-12(fp)
 201728c:	1000041e 	bne	r2,zero,20172a0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2017290:	e0bfff17 	ldw	r2,-4(fp)
 2017294:	00c00104 	movi	r3,4
 2017298:	10c00005 	stb	r3,0(r2)
        return;
 201729c:	00002c06 	br	2017350 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20172a0:	e0bffd17 	ldw	r2,-12(fp)
 20172a4:	10800003 	ldbu	r2,0(r2)
 20172a8:	10803fcc 	andi	r2,r2,255
 20172ac:	108000e0 	cmpeqi	r2,r2,3
 20172b0:	1000041e 	bne	r2,zero,20172c4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 20172b4:	e0bfff17 	ldw	r2,-4(fp)
 20172b8:	00c00044 	movi	r3,1
 20172bc:	10c00005 	stb	r3,0(r2)
        return;
 20172c0:	00002306 	br	2017350 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20172c4:	0005303a 	rdctl	r2,status
 20172c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20172cc:	e0fffc17 	ldw	r3,-16(fp)
 20172d0:	00bfff84 	movi	r2,-2
 20172d4:	1884703a 	and	r2,r3,r2
 20172d8:	1001703a 	wrctl	status,r2
  
  return context;
 20172dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20172e0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 20172e4:	e0bfff17 	ldw	r2,-4(fp)
 20172e8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 20172ec:	e0bffd17 	ldw	r2,-12(fp)
 20172f0:	1080020b 	ldhu	r2,8(r2)
 20172f4:	10bfffcc 	andi	r2,r2,65535
 20172f8:	10000426 	beq	r2,zero,201730c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 20172fc:	e0bffd17 	ldw	r2,-12(fp)
 2017300:	e0fffe0b 	ldhu	r3,-8(fp)
 2017304:	10c0020d 	sth	r3,8(r2)
 2017308:	00000b06 	br	2017338 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201730c:	e0bffd17 	ldw	r2,-12(fp)
 2017310:	10800283 	ldbu	r2,10(r2)
 2017314:	10803fcc 	andi	r2,r2,255
 2017318:	1000041e 	bne	r2,zero,201732c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201731c:	e0bffd17 	ldw	r2,-12(fp)
 2017320:	e0fffe0b 	ldhu	r3,-8(fp)
 2017324:	10c0020d 	sth	r3,8(r2)
 2017328:	00000306 	br	2017338 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201732c:	e0bfff17 	ldw	r2,-4(fp)
 2017330:	00c01244 	movi	r3,73
 2017334:	10c00005 	stb	r3,0(r2)
 2017338:	e0bffa17 	ldw	r2,-24(fp)
 201733c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017340:	e0bffb17 	ldw	r2,-20(fp)
 2017344:	1001703a 	wrctl	status,r2
 2017348:	00000106 	br	2017350 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201734c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 2017350:	e037883a 	mov	sp,fp
 2017354:	df000017 	ldw	fp,0(sp)
 2017358:	dec00104 	addi	sp,sp,4
 201735c:	f800283a 	ret

02017360 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 2017360:	defff104 	addi	sp,sp,-60
 2017364:	dfc00e15 	stw	ra,56(sp)
 2017368:	df000d15 	stw	fp,52(sp)
 201736c:	df000d04 	addi	fp,sp,52
 2017370:	2007883a 	mov	r3,r4
 2017374:	2805883a 	mov	r2,r5
 2017378:	e0fffe05 	stb	r3,-8(fp)
 201737c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 2017380:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 2017384:	e0bffe03 	ldbu	r2,-8(fp)
 2017388:	10800530 	cmpltui	r2,r2,20
 201738c:	1000051e 	bne	r2,zero,20173a4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 2017390:	e0bffe03 	ldbu	r2,-8(fp)
 2017394:	10803fe0 	cmpeqi	r2,r2,255
 2017398:	1000021e 	bne	r2,zero,20173a4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201739c:	00800a84 	movi	r2,42
 20173a0:	00012606 	br	201783c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 20173a4:	e0bfff03 	ldbu	r2,-4(fp)
 20173a8:	10800530 	cmpltui	r2,r2,20
 20173ac:	1000021e 	bne	r2,zero,20173b8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 20173b0:	00800a84 	movi	r2,42
 20173b4:	00012106 	br	201783c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173b8:	0005303a 	rdctl	r2,status
 20173bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173c0:	e0fffd17 	ldw	r3,-12(fp)
 20173c4:	00bfff84 	movi	r2,-2
 20173c8:	1884703a 	and	r2,r3,r2
 20173cc:	1001703a 	wrctl	status,r2
  
  return context;
 20173d0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20173d4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 20173d8:	e0ffff03 	ldbu	r3,-4(fp)
 20173dc:	008080f4 	movhi	r2,515
 20173e0:	10a0c104 	addi	r2,r2,-31996
 20173e4:	18c7883a 	add	r3,r3,r3
 20173e8:	18c7883a 	add	r3,r3,r3
 20173ec:	10c5883a 	add	r2,r2,r3
 20173f0:	10800017 	ldw	r2,0(r2)
 20173f4:	10000626 	beq	r2,zero,2017410 <OSTaskChangePrio+0xb0>
 20173f8:	e0bff517 	ldw	r2,-44(fp)
 20173fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017400:	e0bff617 	ldw	r2,-40(fp)
 2017404:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 2017408:	00800a04 	movi	r2,40
 201740c:	00010b06 	br	201783c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 2017410:	e0bffe03 	ldbu	r2,-8(fp)
 2017414:	10803fd8 	cmpnei	r2,r2,255
 2017418:	1000031e 	bne	r2,zero,2017428 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201741c:	d0a73417 	ldw	r2,-25392(gp)
 2017420:	10800c83 	ldbu	r2,50(r2)
 2017424:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 2017428:	e0fffe03 	ldbu	r3,-8(fp)
 201742c:	008080f4 	movhi	r2,515
 2017430:	10a0c104 	addi	r2,r2,-31996
 2017434:	18c7883a 	add	r3,r3,r3
 2017438:	18c7883a 	add	r3,r3,r3
 201743c:	10c5883a 	add	r2,r2,r3
 2017440:	10800017 	ldw	r2,0(r2)
 2017444:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 2017448:	e0bff817 	ldw	r2,-32(fp)
 201744c:	1000061e 	bne	r2,zero,2017468 <OSTaskChangePrio+0x108>
 2017450:	e0bff517 	ldw	r2,-44(fp)
 2017454:	e0bff715 	stw	r2,-36(fp)
 2017458:	e0bff717 	ldw	r2,-36(fp)
 201745c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 2017460:	00800a44 	movi	r2,41
 2017464:	0000f506 	br	201783c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 2017468:	e0bff817 	ldw	r2,-32(fp)
 201746c:	10800058 	cmpnei	r2,r2,1
 2017470:	1000061e 	bne	r2,zero,201748c <OSTaskChangePrio+0x12c>
 2017474:	e0bff517 	ldw	r2,-44(fp)
 2017478:	e0bff915 	stw	r2,-28(fp)
 201747c:	e0bff917 	ldw	r2,-28(fp)
 2017480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 2017484:	008010c4 	movi	r2,67
 2017488:	0000ec06 	br	201783c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201748c:	e0bfff03 	ldbu	r2,-4(fp)
 2017490:	1004d0fa 	srli	r2,r2,3
 2017494:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 2017498:	e0bfff03 	ldbu	r2,-4(fp)
 201749c:	108001cc 	andi	r2,r2,7
 20174a0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 20174a4:	e0bffb03 	ldbu	r2,-20(fp)
 20174a8:	00c00044 	movi	r3,1
 20174ac:	1884983a 	sll	r2,r3,r2
 20174b0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 20174b4:	e0bffb43 	ldbu	r2,-19(fp)
 20174b8:	00c00044 	movi	r3,1
 20174bc:	1884983a 	sll	r2,r3,r2
 20174c0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 20174c4:	e0fffe03 	ldbu	r3,-8(fp)
 20174c8:	008080f4 	movhi	r2,515
 20174cc:	10a0c104 	addi	r2,r2,-31996
 20174d0:	18c7883a 	add	r3,r3,r3
 20174d4:	18c7883a 	add	r3,r3,r3
 20174d8:	10c5883a 	add	r2,r2,r3
 20174dc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 20174e0:	e0ffff03 	ldbu	r3,-4(fp)
 20174e4:	008080f4 	movhi	r2,515
 20174e8:	10a0c104 	addi	r2,r2,-31996
 20174ec:	18c7883a 	add	r3,r3,r3
 20174f0:	18c7883a 	add	r3,r3,r3
 20174f4:	10c5883a 	add	r2,r2,r3
 20174f8:	e0fff817 	ldw	r3,-32(fp)
 20174fc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 2017500:	e0bff817 	ldw	r2,-32(fp)
 2017504:	10800d03 	ldbu	r2,52(r2)
 2017508:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201750c:	e0bff817 	ldw	r2,-32(fp)
 2017510:	10800d83 	ldbu	r2,54(r2)
 2017514:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 2017518:	e0bff817 	ldw	r2,-32(fp)
 201751c:	10800d43 	ldbu	r2,53(r2)
 2017520:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 2017524:	e0fffc03 	ldbu	r3,-16(fp)
 2017528:	d0a73144 	addi	r2,gp,-25403
 201752c:	1885883a 	add	r2,r3,r2
 2017530:	10c00003 	ldbu	r3,0(r2)
 2017534:	e0bffc83 	ldbu	r2,-14(fp)
 2017538:	1884703a 	and	r2,r3,r2
 201753c:	10803fcc 	andi	r2,r2,255
 2017540:	10002826 	beq	r2,zero,20175e4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 2017544:	e0fffc03 	ldbu	r3,-16(fp)
 2017548:	e13ffc03 	ldbu	r4,-16(fp)
 201754c:	d0a73144 	addi	r2,gp,-25403
 2017550:	2085883a 	add	r2,r4,r2
 2017554:	10800003 	ldbu	r2,0(r2)
 2017558:	1009883a 	mov	r4,r2
 201755c:	e0bffc83 	ldbu	r2,-14(fp)
 2017560:	0084303a 	nor	r2,zero,r2
 2017564:	2084703a 	and	r2,r4,r2
 2017568:	1009883a 	mov	r4,r2
 201756c:	d0a73144 	addi	r2,gp,-25403
 2017570:	1885883a 	add	r2,r3,r2
 2017574:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 2017578:	e0fffc03 	ldbu	r3,-16(fp)
 201757c:	d0a73144 	addi	r2,gp,-25403
 2017580:	1885883a 	add	r2,r3,r2
 2017584:	10800003 	ldbu	r2,0(r2)
 2017588:	10803fcc 	andi	r2,r2,255
 201758c:	1000061e 	bne	r2,zero,20175a8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 2017590:	e0bffc43 	ldbu	r2,-15(fp)
 2017594:	0084303a 	nor	r2,zero,r2
 2017598:	1007883a 	mov	r3,r2
 201759c:	d0a73103 	ldbu	r2,-25404(gp)
 20175a0:	1884703a 	and	r2,r3,r2
 20175a4:	d0a73105 	stb	r2,-25404(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 20175a8:	d0e73103 	ldbu	r3,-25404(gp)
 20175ac:	e0bffb83 	ldbu	r2,-18(fp)
 20175b0:	1884b03a 	or	r2,r3,r2
 20175b4:	d0a73105 	stb	r2,-25404(gp)
         OSRdyTbl[y_new] |= bitx_new;
 20175b8:	e0fffb03 	ldbu	r3,-20(fp)
 20175bc:	e13ffb03 	ldbu	r4,-20(fp)
 20175c0:	d0a73144 	addi	r2,gp,-25403
 20175c4:	2085883a 	add	r2,r4,r2
 20175c8:	11000003 	ldbu	r4,0(r2)
 20175cc:	e0bffbc3 	ldbu	r2,-17(fp)
 20175d0:	2084b03a 	or	r2,r4,r2
 20175d4:	1009883a 	mov	r4,r2
 20175d8:	d0a73144 	addi	r2,gp,-25403
 20175dc:	1885883a 	add	r2,r3,r2
 20175e0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 20175e4:	e0bff817 	ldw	r2,-32(fp)
 20175e8:	10800717 	ldw	r2,28(r2)
 20175ec:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 20175f0:	e0bff317 	ldw	r2,-52(fp)
 20175f4:	10003326 	beq	r2,zero,20176c4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 20175f8:	e0bffc03 	ldbu	r2,-16(fp)
 20175fc:	e0fffc03 	ldbu	r3,-16(fp)
 2017600:	e13ff317 	ldw	r4,-52(fp)
 2017604:	20c7883a 	add	r3,r4,r3
 2017608:	18c002c4 	addi	r3,r3,11
 201760c:	18c00003 	ldbu	r3,0(r3)
 2017610:	1809883a 	mov	r4,r3
 2017614:	e0fffc83 	ldbu	r3,-14(fp)
 2017618:	00c6303a 	nor	r3,zero,r3
 201761c:	20c6703a 	and	r3,r4,r3
 2017620:	1809883a 	mov	r4,r3
 2017624:	e0fff317 	ldw	r3,-52(fp)
 2017628:	1885883a 	add	r2,r3,r2
 201762c:	108002c4 	addi	r2,r2,11
 2017630:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 2017634:	e0bffc03 	ldbu	r2,-16(fp)
 2017638:	e0fff317 	ldw	r3,-52(fp)
 201763c:	1885883a 	add	r2,r3,r2
 2017640:	108002c4 	addi	r2,r2,11
 2017644:	10800003 	ldbu	r2,0(r2)
 2017648:	10803fcc 	andi	r2,r2,255
 201764c:	1000091e 	bne	r2,zero,2017674 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 2017650:	e0bff317 	ldw	r2,-52(fp)
 2017654:	10800283 	ldbu	r2,10(r2)
 2017658:	1007883a 	mov	r3,r2
 201765c:	e0bffc43 	ldbu	r2,-15(fp)
 2017660:	0084303a 	nor	r2,zero,r2
 2017664:	1884703a 	and	r2,r3,r2
 2017668:	1007883a 	mov	r3,r2
 201766c:	e0bff317 	ldw	r2,-52(fp)
 2017670:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 2017674:	e0bff317 	ldw	r2,-52(fp)
 2017678:	10c00283 	ldbu	r3,10(r2)
 201767c:	e0bffb83 	ldbu	r2,-18(fp)
 2017680:	1884b03a 	or	r2,r3,r2
 2017684:	1007883a 	mov	r3,r2
 2017688:	e0bff317 	ldw	r2,-52(fp)
 201768c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2017690:	e0bffb03 	ldbu	r2,-20(fp)
 2017694:	e0fffb03 	ldbu	r3,-20(fp)
 2017698:	e13ff317 	ldw	r4,-52(fp)
 201769c:	20c7883a 	add	r3,r4,r3
 20176a0:	18c002c4 	addi	r3,r3,11
 20176a4:	19000003 	ldbu	r4,0(r3)
 20176a8:	e0fffbc3 	ldbu	r3,-17(fp)
 20176ac:	20c6b03a 	or	r3,r4,r3
 20176b0:	1809883a 	mov	r4,r3
 20176b4:	e0fff317 	ldw	r3,-52(fp)
 20176b8:	1885883a 	add	r2,r3,r2
 20176bc:	108002c4 	addi	r2,r2,11
 20176c0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 20176c4:	e0bff817 	ldw	r2,-32(fp)
 20176c8:	10800817 	ldw	r2,32(r2)
 20176cc:	10004226 	beq	r2,zero,20177d8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 20176d0:	e0bff817 	ldw	r2,-32(fp)
 20176d4:	10800817 	ldw	r2,32(r2)
 20176d8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 20176dc:	e0bff417 	ldw	r2,-48(fp)
 20176e0:	10800017 	ldw	r2,0(r2)
 20176e4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 20176e8:	00003906 	br	20177d0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 20176ec:	e0bffc03 	ldbu	r2,-16(fp)
 20176f0:	e0fffc03 	ldbu	r3,-16(fp)
 20176f4:	e13ff317 	ldw	r4,-52(fp)
 20176f8:	20c7883a 	add	r3,r4,r3
 20176fc:	18c002c4 	addi	r3,r3,11
 2017700:	18c00003 	ldbu	r3,0(r3)
 2017704:	1809883a 	mov	r4,r3
 2017708:	e0fffc83 	ldbu	r3,-14(fp)
 201770c:	00c6303a 	nor	r3,zero,r3
 2017710:	20c6703a 	and	r3,r4,r3
 2017714:	1809883a 	mov	r4,r3
 2017718:	e0fff317 	ldw	r3,-52(fp)
 201771c:	1885883a 	add	r2,r3,r2
 2017720:	108002c4 	addi	r2,r2,11
 2017724:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 2017728:	e0bffc03 	ldbu	r2,-16(fp)
 201772c:	e0fff317 	ldw	r3,-52(fp)
 2017730:	1885883a 	add	r2,r3,r2
 2017734:	108002c4 	addi	r2,r2,11
 2017738:	10800003 	ldbu	r2,0(r2)
 201773c:	10803fcc 	andi	r2,r2,255
 2017740:	1000091e 	bne	r2,zero,2017768 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 2017744:	e0bff317 	ldw	r2,-52(fp)
 2017748:	10800283 	ldbu	r2,10(r2)
 201774c:	1007883a 	mov	r3,r2
 2017750:	e0bffc43 	ldbu	r2,-15(fp)
 2017754:	0084303a 	nor	r2,zero,r2
 2017758:	1884703a 	and	r2,r3,r2
 201775c:	1007883a 	mov	r3,r2
 2017760:	e0bff317 	ldw	r2,-52(fp)
 2017764:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 2017768:	e0bff317 	ldw	r2,-52(fp)
 201776c:	10c00283 	ldbu	r3,10(r2)
 2017770:	e0bffb83 	ldbu	r2,-18(fp)
 2017774:	1884b03a 	or	r2,r3,r2
 2017778:	1007883a 	mov	r3,r2
 201777c:	e0bff317 	ldw	r2,-52(fp)
 2017780:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 2017784:	e0bffb03 	ldbu	r2,-20(fp)
 2017788:	e0fffb03 	ldbu	r3,-20(fp)
 201778c:	e13ff317 	ldw	r4,-52(fp)
 2017790:	20c7883a 	add	r3,r4,r3
 2017794:	18c002c4 	addi	r3,r3,11
 2017798:	19000003 	ldbu	r4,0(r3)
 201779c:	e0fffbc3 	ldbu	r3,-17(fp)
 20177a0:	20c6b03a 	or	r3,r4,r3
 20177a4:	1809883a 	mov	r4,r3
 20177a8:	e0fff317 	ldw	r3,-52(fp)
 20177ac:	1885883a 	add	r2,r3,r2
 20177b0:	108002c4 	addi	r2,r2,11
 20177b4:	11000005 	stb	r4,0(r2)
            pevents++;
 20177b8:	e0bff417 	ldw	r2,-48(fp)
 20177bc:	10800104 	addi	r2,r2,4
 20177c0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 20177c4:	e0bff417 	ldw	r2,-48(fp)
 20177c8:	10800017 	ldw	r2,0(r2)
 20177cc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 20177d0:	e0bff317 	ldw	r2,-52(fp)
 20177d4:	103fc51e 	bne	r2,zero,20176ec <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 20177d8:	e0bff817 	ldw	r2,-32(fp)
 20177dc:	e0ffff03 	ldbu	r3,-4(fp)
 20177e0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 20177e4:	e0bff817 	ldw	r2,-32(fp)
 20177e8:	e0fffb03 	ldbu	r3,-20(fp)
 20177ec:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 20177f0:	e0bff817 	ldw	r2,-32(fp)
 20177f4:	e0fffb43 	ldbu	r3,-19(fp)
 20177f8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 20177fc:	e0bff817 	ldw	r2,-32(fp)
 2017800:	e0fffb83 	ldbu	r3,-18(fp)
 2017804:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 2017808:	e0bff817 	ldw	r2,-32(fp)
 201780c:	e0fffbc3 	ldbu	r3,-17(fp)
 2017810:	10c00d45 	stb	r3,53(r2)
 2017814:	e0bff517 	ldw	r2,-44(fp)
 2017818:	e0bffa15 	stw	r2,-24(fp)
 201781c:	e0bffa17 	ldw	r2,-24(fp)
 2017820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2017824:	d0a72543 	ldbu	r2,-25451(gp)
 2017828:	10803fcc 	andi	r2,r2,255
 201782c:	10800058 	cmpnei	r2,r2,1
 2017830:	1000011e 	bne	r2,zero,2017838 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 2017834:	201265c0 	call	201265c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2017838:	0005883a 	mov	r2,zero
}
 201783c:	e037883a 	mov	sp,fp
 2017840:	dfc00117 	ldw	ra,4(sp)
 2017844:	df000017 	ldw	fp,0(sp)
 2017848:	dec00204 	addi	sp,sp,8
 201784c:	f800283a 	ret

02017850 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 2017850:	deffee04 	addi	sp,sp,-72
 2017854:	dfc01115 	stw	ra,68(sp)
 2017858:	df001015 	stw	fp,64(sp)
 201785c:	df001004 	addi	fp,sp,64
 2017860:	e13ffc15 	stw	r4,-16(fp)
 2017864:	e17ffd15 	stw	r5,-12(fp)
 2017868:	e1bffe15 	stw	r6,-8(fp)
 201786c:	3805883a 	mov	r2,r7
 2017870:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2017874:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2017878:	e0bfff03 	ldbu	r2,-4(fp)
 201787c:	10800570 	cmpltui	r2,r2,21
 2017880:	1000021e 	bne	r2,zero,201788c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 2017884:	00800a84 	movi	r2,42
 2017888:	00005706 	br	20179e8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201788c:	0005303a 	rdctl	r2,status
 2017890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017894:	e0fffb17 	ldw	r3,-20(fp)
 2017898:	00bfff84 	movi	r2,-2
 201789c:	1884703a 	and	r2,r3,r2
 20178a0:	1001703a 	wrctl	status,r2
  
  return context;
 20178a4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20178a8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 20178ac:	d0a73303 	ldbu	r2,-25396(gp)
 20178b0:	10803fcc 	andi	r2,r2,255
 20178b4:	10000626 	beq	r2,zero,20178d0 <OSTaskCreate+0x80>
 20178b8:	e0bff317 	ldw	r2,-52(fp)
 20178bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20178c0:	e0bff417 	ldw	r2,-48(fp)
 20178c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 20178c8:	00800f04 	movi	r2,60
 20178cc:	00004606 	br	20179e8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 20178d0:	e0ffff03 	ldbu	r3,-4(fp)
 20178d4:	008080f4 	movhi	r2,515
 20178d8:	10a0c104 	addi	r2,r2,-31996
 20178dc:	18c7883a 	add	r3,r3,r3
 20178e0:	18c7883a 	add	r3,r3,r3
 20178e4:	10c5883a 	add	r2,r2,r3
 20178e8:	10800017 	ldw	r2,0(r2)
 20178ec:	1000391e 	bne	r2,zero,20179d4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 20178f0:	e0ffff03 	ldbu	r3,-4(fp)
 20178f4:	008080f4 	movhi	r2,515
 20178f8:	10a0c104 	addi	r2,r2,-31996
 20178fc:	18c7883a 	add	r3,r3,r3
 2017900:	18c7883a 	add	r3,r3,r3
 2017904:	10c5883a 	add	r2,r2,r3
 2017908:	00c00044 	movi	r3,1
 201790c:	10c00015 	stw	r3,0(r2)
 2017910:	e0bff317 	ldw	r2,-52(fp)
 2017914:	e0bff515 	stw	r2,-44(fp)
 2017918:	e0bff517 	ldw	r2,-44(fp)
 201791c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 2017920:	000f883a 	mov	r7,zero
 2017924:	e1bffe17 	ldw	r6,-8(fp)
 2017928:	e17ffd17 	ldw	r5,-12(fp)
 201792c:	e13ffc17 	ldw	r4,-16(fp)
 2017930:	201aaf00 	call	201aaf0 <OSTaskStkInit>
 2017934:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2017938:	e0bfff03 	ldbu	r2,-4(fp)
 201793c:	d8000215 	stw	zero,8(sp)
 2017940:	d8000115 	stw	zero,4(sp)
 2017944:	d8000015 	stw	zero,0(sp)
 2017948:	000f883a 	mov	r7,zero
 201794c:	000d883a 	mov	r6,zero
 2017950:	e17ff717 	ldw	r5,-36(fp)
 2017954:	1009883a 	mov	r4,r2
 2017958:	2012a5c0 	call	2012a5c <OS_TCBInit>
 201795c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 2017960:	e0bff803 	ldbu	r2,-32(fp)
 2017964:	1000061e 	bne	r2,zero,2017980 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 2017968:	d0a72543 	ldbu	r2,-25451(gp)
 201796c:	10803fcc 	andi	r2,r2,255
 2017970:	10800058 	cmpnei	r2,r2,1
 2017974:	1000151e 	bne	r2,zero,20179cc <OSTaskCreate+0x17c>
                OS_Sched();
 2017978:	201265c0 	call	201265c <OS_Sched>
 201797c:	00001306 	br	20179cc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017980:	0005303a 	rdctl	r2,status
 2017984:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017988:	e0fffa17 	ldw	r3,-24(fp)
 201798c:	00bfff84 	movi	r2,-2
 2017990:	1884703a 	and	r2,r3,r2
 2017994:	1001703a 	wrctl	status,r2
  
  return context;
 2017998:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201799c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 20179a0:	e0ffff03 	ldbu	r3,-4(fp)
 20179a4:	008080f4 	movhi	r2,515
 20179a8:	10a0c104 	addi	r2,r2,-31996
 20179ac:	18c7883a 	add	r3,r3,r3
 20179b0:	18c7883a 	add	r3,r3,r3
 20179b4:	10c5883a 	add	r2,r2,r3
 20179b8:	10000015 	stw	zero,0(r2)
 20179bc:	e0bff317 	ldw	r2,-52(fp)
 20179c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20179c4:	e0bff617 	ldw	r2,-40(fp)
 20179c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 20179cc:	e0bff803 	ldbu	r2,-32(fp)
 20179d0:	00000506 	br	20179e8 <OSTaskCreate+0x198>
 20179d4:	e0bff317 	ldw	r2,-52(fp)
 20179d8:	e0bff915 	stw	r2,-28(fp)
 20179dc:	e0bff917 	ldw	r2,-28(fp)
 20179e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 20179e4:	00800a04 	movi	r2,40
}
 20179e8:	e037883a 	mov	sp,fp
 20179ec:	dfc00117 	ldw	ra,4(sp)
 20179f0:	df000017 	ldw	fp,0(sp)
 20179f4:	dec00204 	addi	sp,sp,8
 20179f8:	f800283a 	ret

020179fc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 20179fc:	deffec04 	addi	sp,sp,-80
 2017a00:	dfc01315 	stw	ra,76(sp)
 2017a04:	df001215 	stw	fp,72(sp)
 2017a08:	df001204 	addi	fp,sp,72
 2017a0c:	e13ffa15 	stw	r4,-24(fp)
 2017a10:	e17ffb15 	stw	r5,-20(fp)
 2017a14:	e1bffc15 	stw	r6,-16(fp)
 2017a18:	3809883a 	mov	r4,r7
 2017a1c:	e0c00217 	ldw	r3,8(fp)
 2017a20:	e0800617 	ldw	r2,24(fp)
 2017a24:	e13ffd05 	stb	r4,-12(fp)
 2017a28:	e0fffe0d 	sth	r3,-8(fp)
 2017a2c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2017a30:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2017a34:	e0bffd03 	ldbu	r2,-12(fp)
 2017a38:	10800570 	cmpltui	r2,r2,21
 2017a3c:	1000021e 	bne	r2,zero,2017a48 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 2017a40:	00800a84 	movi	r2,42
 2017a44:	00006106 	br	2017bcc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017a48:	0005303a 	rdctl	r2,status
 2017a4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017a50:	e0fff917 	ldw	r3,-28(fp)
 2017a54:	00bfff84 	movi	r2,-2
 2017a58:	1884703a 	and	r2,r3,r2
 2017a5c:	1001703a 	wrctl	status,r2
  
  return context;
 2017a60:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2017a64:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2017a68:	d0a73303 	ldbu	r2,-25396(gp)
 2017a6c:	10803fcc 	andi	r2,r2,255
 2017a70:	10000626 	beq	r2,zero,2017a8c <OSTaskCreateExt+0x90>
 2017a74:	e0bff117 	ldw	r2,-60(fp)
 2017a78:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a7c:	e0bff217 	ldw	r2,-56(fp)
 2017a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 2017a84:	00800f04 	movi	r2,60
 2017a88:	00005006 	br	2017bcc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2017a8c:	e0fffd03 	ldbu	r3,-12(fp)
 2017a90:	008080f4 	movhi	r2,515
 2017a94:	10a0c104 	addi	r2,r2,-31996
 2017a98:	18c7883a 	add	r3,r3,r3
 2017a9c:	18c7883a 	add	r3,r3,r3
 2017aa0:	10c5883a 	add	r2,r2,r3
 2017aa4:	10800017 	ldw	r2,0(r2)
 2017aa8:	1000431e 	bne	r2,zero,2017bb8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2017aac:	e0fffd03 	ldbu	r3,-12(fp)
 2017ab0:	008080f4 	movhi	r2,515
 2017ab4:	10a0c104 	addi	r2,r2,-31996
 2017ab8:	18c7883a 	add	r3,r3,r3
 2017abc:	18c7883a 	add	r3,r3,r3
 2017ac0:	10c5883a 	add	r2,r2,r3
 2017ac4:	00c00044 	movi	r3,1
 2017ac8:	10c00015 	stw	r3,0(r2)
 2017acc:	e0bff117 	ldw	r2,-60(fp)
 2017ad0:	e0bff315 	stw	r2,-52(fp)
 2017ad4:	e0bff317 	ldw	r2,-52(fp)
 2017ad8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 2017adc:	e0bfff0b 	ldhu	r2,-4(fp)
 2017ae0:	100d883a 	mov	r6,r2
 2017ae4:	e1400417 	ldw	r5,16(fp)
 2017ae8:	e1000317 	ldw	r4,12(fp)
 2017aec:	2018a5c0 	call	2018a5c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 2017af0:	e0bfff0b 	ldhu	r2,-4(fp)
 2017af4:	100f883a 	mov	r7,r2
 2017af8:	e1bffc17 	ldw	r6,-16(fp)
 2017afc:	e17ffb17 	ldw	r5,-20(fp)
 2017b00:	e13ffa17 	ldw	r4,-24(fp)
 2017b04:	201aaf00 	call	201aaf0 <OSTaskStkInit>
 2017b08:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2017b0c:	e0fffd03 	ldbu	r3,-12(fp)
 2017b10:	e13ffe0b 	ldhu	r4,-8(fp)
 2017b14:	e0bfff0b 	ldhu	r2,-4(fp)
 2017b18:	d8800215 	stw	r2,8(sp)
 2017b1c:	e0800517 	ldw	r2,20(fp)
 2017b20:	d8800115 	stw	r2,4(sp)
 2017b24:	e0800417 	ldw	r2,16(fp)
 2017b28:	d8800015 	stw	r2,0(sp)
 2017b2c:	200f883a 	mov	r7,r4
 2017b30:	e1800317 	ldw	r6,12(fp)
 2017b34:	e17ff517 	ldw	r5,-44(fp)
 2017b38:	1809883a 	mov	r4,r3
 2017b3c:	2012a5c0 	call	2012a5c <OS_TCBInit>
 2017b40:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 2017b44:	e0bff603 	ldbu	r2,-40(fp)
 2017b48:	1000061e 	bne	r2,zero,2017b64 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 2017b4c:	d0a72543 	ldbu	r2,-25451(gp)
 2017b50:	10803fcc 	andi	r2,r2,255
 2017b54:	10800058 	cmpnei	r2,r2,1
 2017b58:	1000151e 	bne	r2,zero,2017bb0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 2017b5c:	201265c0 	call	201265c <OS_Sched>
 2017b60:	00001306 	br	2017bb0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b64:	0005303a 	rdctl	r2,status
 2017b68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b6c:	e0fff817 	ldw	r3,-32(fp)
 2017b70:	00bfff84 	movi	r2,-2
 2017b74:	1884703a 	and	r2,r3,r2
 2017b78:	1001703a 	wrctl	status,r2
  
  return context;
 2017b7c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2017b80:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 2017b84:	e0fffd03 	ldbu	r3,-12(fp)
 2017b88:	008080f4 	movhi	r2,515
 2017b8c:	10a0c104 	addi	r2,r2,-31996
 2017b90:	18c7883a 	add	r3,r3,r3
 2017b94:	18c7883a 	add	r3,r3,r3
 2017b98:	10c5883a 	add	r2,r2,r3
 2017b9c:	10000015 	stw	zero,0(r2)
 2017ba0:	e0bff117 	ldw	r2,-60(fp)
 2017ba4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ba8:	e0bff417 	ldw	r2,-48(fp)
 2017bac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2017bb0:	e0bff603 	ldbu	r2,-40(fp)
 2017bb4:	00000506 	br	2017bcc <OSTaskCreateExt+0x1d0>
 2017bb8:	e0bff117 	ldw	r2,-60(fp)
 2017bbc:	e0bff715 	stw	r2,-36(fp)
 2017bc0:	e0bff717 	ldw	r2,-36(fp)
 2017bc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2017bc8:	00800a04 	movi	r2,40
}
 2017bcc:	e037883a 	mov	sp,fp
 2017bd0:	dfc00117 	ldw	ra,4(sp)
 2017bd4:	df000017 	ldw	fp,0(sp)
 2017bd8:	dec00204 	addi	sp,sp,8
 2017bdc:	f800283a 	ret

02017be0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 2017be0:	defff404 	addi	sp,sp,-48
 2017be4:	dfc00b15 	stw	ra,44(sp)
 2017be8:	df000a15 	stw	fp,40(sp)
 2017bec:	df000a04 	addi	fp,sp,40
 2017bf0:	2005883a 	mov	r2,r4
 2017bf4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 2017bf8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 2017bfc:	d0a73303 	ldbu	r2,-25396(gp)
 2017c00:	10803fcc 	andi	r2,r2,255
 2017c04:	10000226 	beq	r2,zero,2017c10 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 2017c08:	00801004 	movi	r2,64
 2017c0c:	0000c006 	br	2017f10 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 2017c10:	e0bfff03 	ldbu	r2,-4(fp)
 2017c14:	10800518 	cmpnei	r2,r2,20
 2017c18:	1000021e 	bne	r2,zero,2017c24 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 2017c1c:	00800f84 	movi	r2,62
 2017c20:	0000bb06 	br	2017f10 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 2017c24:	e0bfff03 	ldbu	r2,-4(fp)
 2017c28:	10800530 	cmpltui	r2,r2,20
 2017c2c:	1000051e 	bne	r2,zero,2017c44 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 2017c30:	e0bfff03 	ldbu	r2,-4(fp)
 2017c34:	10803fe0 	cmpeqi	r2,r2,255
 2017c38:	1000021e 	bne	r2,zero,2017c44 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 2017c3c:	00800a84 	movi	r2,42
 2017c40:	0000b306 	br	2017f10 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017c44:	0005303a 	rdctl	r2,status
 2017c48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017c4c:	e0fffe17 	ldw	r3,-8(fp)
 2017c50:	00bfff84 	movi	r2,-2
 2017c54:	1884703a 	and	r2,r3,r2
 2017c58:	1001703a 	wrctl	status,r2
  
  return context;
 2017c5c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2017c60:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 2017c64:	e0bfff03 	ldbu	r2,-4(fp)
 2017c68:	10803fd8 	cmpnei	r2,r2,255
 2017c6c:	1000031e 	bne	r2,zero,2017c7c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2017c70:	d0a73417 	ldw	r2,-25392(gp)
 2017c74:	10800c83 	ldbu	r2,50(r2)
 2017c78:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2017c7c:	e0ffff03 	ldbu	r3,-4(fp)
 2017c80:	008080f4 	movhi	r2,515
 2017c84:	10a0c104 	addi	r2,r2,-31996
 2017c88:	18c7883a 	add	r3,r3,r3
 2017c8c:	18c7883a 	add	r3,r3,r3
 2017c90:	10c5883a 	add	r2,r2,r3
 2017c94:	10800017 	ldw	r2,0(r2)
 2017c98:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 2017c9c:	e0bff817 	ldw	r2,-32(fp)
 2017ca0:	1000061e 	bne	r2,zero,2017cbc <OSTaskDel+0xdc>
 2017ca4:	e0bff617 	ldw	r2,-40(fp)
 2017ca8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017cac:	e0bff717 	ldw	r2,-36(fp)
 2017cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2017cb4:	008010c4 	movi	r2,67
 2017cb8:	00009506 	br	2017f10 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 2017cbc:	e0bff817 	ldw	r2,-32(fp)
 2017cc0:	10800058 	cmpnei	r2,r2,1
 2017cc4:	1000061e 	bne	r2,zero,2017ce0 <OSTaskDel+0x100>
 2017cc8:	e0bff617 	ldw	r2,-40(fp)
 2017ccc:	e0bff915 	stw	r2,-28(fp)
 2017cd0:	e0bff917 	ldw	r2,-28(fp)
 2017cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2017cd8:	00800f44 	movi	r2,61
 2017cdc:	00008c06 	br	2017f10 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 2017ce0:	e0bff817 	ldw	r2,-32(fp)
 2017ce4:	10800d03 	ldbu	r2,52(r2)
 2017ce8:	10c03fcc 	andi	r3,r2,255
 2017cec:	e0bff817 	ldw	r2,-32(fp)
 2017cf0:	10800d03 	ldbu	r2,52(r2)
 2017cf4:	11003fcc 	andi	r4,r2,255
 2017cf8:	d0a73144 	addi	r2,gp,-25403
 2017cfc:	2085883a 	add	r2,r4,r2
 2017d00:	10800003 	ldbu	r2,0(r2)
 2017d04:	1009883a 	mov	r4,r2
 2017d08:	e0bff817 	ldw	r2,-32(fp)
 2017d0c:	10800d43 	ldbu	r2,53(r2)
 2017d10:	0084303a 	nor	r2,zero,r2
 2017d14:	2084703a 	and	r2,r4,r2
 2017d18:	1009883a 	mov	r4,r2
 2017d1c:	d0a73144 	addi	r2,gp,-25403
 2017d20:	1885883a 	add	r2,r3,r2
 2017d24:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 2017d28:	e0bff817 	ldw	r2,-32(fp)
 2017d2c:	10800d03 	ldbu	r2,52(r2)
 2017d30:	10c03fcc 	andi	r3,r2,255
 2017d34:	d0a73144 	addi	r2,gp,-25403
 2017d38:	1885883a 	add	r2,r3,r2
 2017d3c:	10800003 	ldbu	r2,0(r2)
 2017d40:	10803fcc 	andi	r2,r2,255
 2017d44:	1000071e 	bne	r2,zero,2017d64 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 2017d48:	e0bff817 	ldw	r2,-32(fp)
 2017d4c:	10800d83 	ldbu	r2,54(r2)
 2017d50:	0084303a 	nor	r2,zero,r2
 2017d54:	1007883a 	mov	r3,r2
 2017d58:	d0a73103 	ldbu	r2,-25404(gp)
 2017d5c:	1884703a 	and	r2,r3,r2
 2017d60:	d0a73105 	stb	r2,-25404(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 2017d64:	e0bff817 	ldw	r2,-32(fp)
 2017d68:	10800717 	ldw	r2,28(r2)
 2017d6c:	10000526 	beq	r2,zero,2017d84 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 2017d70:	e0bff817 	ldw	r2,-32(fp)
 2017d74:	10800717 	ldw	r2,28(r2)
 2017d78:	100b883a 	mov	r5,r2
 2017d7c:	e13ff817 	ldw	r4,-32(fp)
 2017d80:	20120080 	call	2012008 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 2017d84:	e0bff817 	ldw	r2,-32(fp)
 2017d88:	10800817 	ldw	r2,32(r2)
 2017d8c:	10000526 	beq	r2,zero,2017da4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2017d90:	e0bff817 	ldw	r2,-32(fp)
 2017d94:	10800817 	ldw	r2,32(r2)
 2017d98:	100b883a 	mov	r5,r2
 2017d9c:	e13ff817 	ldw	r4,-32(fp)
 2017da0:	20120c00 	call	20120c0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 2017da4:	e0bff817 	ldw	r2,-32(fp)
 2017da8:	10800a17 	ldw	r2,40(r2)
 2017dac:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 2017db0:	e0bffb17 	ldw	r2,-20(fp)
 2017db4:	10000226 	beq	r2,zero,2017dc0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 2017db8:	e13ffb17 	ldw	r4,-20(fp)
 2017dbc:	20145300 	call	2014530 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 2017dc0:	e0bff817 	ldw	r2,-32(fp)
 2017dc4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 2017dc8:	e0bff817 	ldw	r2,-32(fp)
 2017dcc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2017dd0:	e0bff817 	ldw	r2,-32(fp)
 2017dd4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 2017dd8:	d0a72503 	ldbu	r2,-25452(gp)
 2017ddc:	10803fcc 	andi	r2,r2,255
 2017de0:	10803fe0 	cmpeqi	r2,r2,255
 2017de4:	1000031e 	bne	r2,zero,2017df4 <OSTaskDel+0x214>
        OSLockNesting++;
 2017de8:	d0a72503 	ldbu	r2,-25452(gp)
 2017dec:	10800044 	addi	r2,r2,1
 2017df0:	d0a72505 	stb	r2,-25452(gp)
 2017df4:	e0bff617 	ldw	r2,-40(fp)
 2017df8:	e0bffd15 	stw	r2,-12(fp)
 2017dfc:	e0bffd17 	ldw	r2,-12(fp)
 2017e00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 2017e04:	2011bf00 	call	2011bf0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e08:	0005303a 	rdctl	r2,status
 2017e0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e10:	e0fffa17 	ldw	r3,-24(fp)
 2017e14:	00bfff84 	movi	r2,-2
 2017e18:	1884703a 	and	r2,r3,r2
 2017e1c:	1001703a 	wrctl	status,r2
  
  return context;
 2017e20:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 2017e24:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2017e28:	d0a72503 	ldbu	r2,-25452(gp)
 2017e2c:	10803fcc 	andi	r2,r2,255
 2017e30:	10000326 	beq	r2,zero,2017e40 <OSTaskDel+0x260>
        OSLockNesting--;
 2017e34:	d0a72503 	ldbu	r2,-25452(gp)
 2017e38:	10bfffc4 	addi	r2,r2,-1
 2017e3c:	d0a72505 	stb	r2,-25452(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2017e40:	e13ff817 	ldw	r4,-32(fp)
 2017e44:	201ac700 	call	201ac70 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2017e48:	d0a72d43 	ldbu	r2,-25419(gp)
 2017e4c:	10bfffc4 	addi	r2,r2,-1
 2017e50:	d0a72d45 	stb	r2,-25419(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 2017e54:	e0ffff03 	ldbu	r3,-4(fp)
 2017e58:	008080f4 	movhi	r2,515
 2017e5c:	10a0c104 	addi	r2,r2,-31996
 2017e60:	18c7883a 	add	r3,r3,r3
 2017e64:	18c7883a 	add	r3,r3,r3
 2017e68:	10c5883a 	add	r2,r2,r3
 2017e6c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 2017e70:	e0bff817 	ldw	r2,-32(fp)
 2017e74:	10800617 	ldw	r2,24(r2)
 2017e78:	1000071e 	bne	r2,zero,2017e98 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2017e7c:	e0bff817 	ldw	r2,-32(fp)
 2017e80:	10800517 	ldw	r2,20(r2)
 2017e84:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 2017e88:	e0bff817 	ldw	r2,-32(fp)
 2017e8c:	10800517 	ldw	r2,20(r2)
 2017e90:	d0a72815 	stw	r2,-25440(gp)
 2017e94:	00000a06 	br	2017ec0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 2017e98:	e0bff817 	ldw	r2,-32(fp)
 2017e9c:	10800617 	ldw	r2,24(r2)
 2017ea0:	e0fff817 	ldw	r3,-32(fp)
 2017ea4:	18c00517 	ldw	r3,20(r3)
 2017ea8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 2017eac:	e0bff817 	ldw	r2,-32(fp)
 2017eb0:	10800517 	ldw	r2,20(r2)
 2017eb4:	e0fff817 	ldw	r3,-32(fp)
 2017eb8:	18c00617 	ldw	r3,24(r3)
 2017ebc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 2017ec0:	d0e72c17 	ldw	r3,-25424(gp)
 2017ec4:	e0bff817 	ldw	r2,-32(fp)
 2017ec8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 2017ecc:	e0bff817 	ldw	r2,-32(fp)
 2017ed0:	d0a72c15 	stw	r2,-25424(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 2017ed4:	e0bff817 	ldw	r2,-32(fp)
 2017ed8:	00c00fc4 	movi	r3,63
 2017edc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2017ee0:	e0bff817 	ldw	r2,-32(fp)
 2017ee4:	10001345 	stb	zero,77(r2)
 2017ee8:	e0bff617 	ldw	r2,-40(fp)
 2017eec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ef0:	e0bffc17 	ldw	r2,-16(fp)
 2017ef4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2017ef8:	d0a72543 	ldbu	r2,-25451(gp)
 2017efc:	10803fcc 	andi	r2,r2,255
 2017f00:	10800058 	cmpnei	r2,r2,1
 2017f04:	1000011e 	bne	r2,zero,2017f0c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 2017f08:	201265c0 	call	201265c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2017f0c:	0005883a 	mov	r2,zero
}
 2017f10:	e037883a 	mov	sp,fp
 2017f14:	dfc00117 	ldw	ra,4(sp)
 2017f18:	df000017 	ldw	fp,0(sp)
 2017f1c:	dec00204 	addi	sp,sp,8
 2017f20:	f800283a 	ret

02017f24 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 2017f24:	defff504 	addi	sp,sp,-44
 2017f28:	df000a15 	stw	fp,40(sp)
 2017f2c:	df000a04 	addi	fp,sp,40
 2017f30:	2005883a 	mov	r2,r4
 2017f34:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017f38:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 2017f3c:	e0bfff03 	ldbu	r2,-4(fp)
 2017f40:	10800518 	cmpnei	r2,r2,20
 2017f44:	1000021e 	bne	r2,zero,2017f50 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 2017f48:	00800f84 	movi	r2,62
 2017f4c:	00004506 	br	2018064 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2017f50:	e0bfff03 	ldbu	r2,-4(fp)
 2017f54:	10800530 	cmpltui	r2,r2,20
 2017f58:	1000051e 	bne	r2,zero,2017f70 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 2017f5c:	e0bfff03 	ldbu	r2,-4(fp)
 2017f60:	10803fe0 	cmpeqi	r2,r2,255
 2017f64:	1000021e 	bne	r2,zero,2017f70 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 2017f68:	00800a84 	movi	r2,42
 2017f6c:	00003d06 	br	2018064 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 2017f70:	e0bfff03 	ldbu	r2,-4(fp)
 2017f74:	10803fd8 	cmpnei	r2,r2,255
 2017f78:	1000111e 	bne	r2,zero,2017fc0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017f7c:	0005303a 	rdctl	r2,status
 2017f80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f84:	e0fff917 	ldw	r3,-28(fp)
 2017f88:	00bfff84 	movi	r2,-2
 2017f8c:	1884703a 	and	r2,r3,r2
 2017f90:	1001703a 	wrctl	status,r2
  
  return context;
 2017f94:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 2017f98:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 2017f9c:	d0a73417 	ldw	r2,-25392(gp)
 2017fa0:	10800dc3 	ldbu	r2,55(r2)
 2017fa4:	e0bff805 	stb	r2,-32(fp)
 2017fa8:	e0bff617 	ldw	r2,-40(fp)
 2017fac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017fb0:	e0bffe17 	ldw	r2,-8(fp)
 2017fb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 2017fb8:	e0bff803 	ldbu	r2,-32(fp)
 2017fbc:	00002906 	br	2018064 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017fc0:	0005303a 	rdctl	r2,status
 2017fc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017fc8:	e0fff717 	ldw	r3,-36(fp)
 2017fcc:	00bfff84 	movi	r2,-2
 2017fd0:	1884703a 	and	r2,r3,r2
 2017fd4:	1001703a 	wrctl	status,r2
  
  return context;
 2017fd8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2017fdc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2017fe0:	e0ffff03 	ldbu	r3,-4(fp)
 2017fe4:	008080f4 	movhi	r2,515
 2017fe8:	10a0c104 	addi	r2,r2,-31996
 2017fec:	18c7883a 	add	r3,r3,r3
 2017ff0:	18c7883a 	add	r3,r3,r3
 2017ff4:	10c5883a 	add	r2,r2,r3
 2017ff8:	10800017 	ldw	r2,0(r2)
 2017ffc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2018000:	e0bffb17 	ldw	r2,-20(fp)
 2018004:	1000061e 	bne	r2,zero,2018020 <OSTaskDelReq+0xfc>
 2018008:	e0bff617 	ldw	r2,-40(fp)
 201800c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018010:	e0bffa17 	ldw	r2,-24(fp)
 2018014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 2018018:	008010c4 	movi	r2,67
 201801c:	00001106 	br	2018064 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 2018020:	e0bffb17 	ldw	r2,-20(fp)
 2018024:	10800058 	cmpnei	r2,r2,1
 2018028:	1000061e 	bne	r2,zero,2018044 <OSTaskDelReq+0x120>
 201802c:	e0bff617 	ldw	r2,-40(fp)
 2018030:	e0bffc15 	stw	r2,-16(fp)
 2018034:	e0bffc17 	ldw	r2,-16(fp)
 2018038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201803c:	00800f44 	movi	r2,61
 2018040:	00000806 	br	2018064 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 2018044:	e0bffb17 	ldw	r2,-20(fp)
 2018048:	00c00fc4 	movi	r3,63
 201804c:	10c00dc5 	stb	r3,55(r2)
 2018050:	e0bff617 	ldw	r2,-40(fp)
 2018054:	e0bffd15 	stw	r2,-12(fp)
 2018058:	e0bffd17 	ldw	r2,-12(fp)
 201805c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018060:	0005883a 	mov	r2,zero
}
 2018064:	e037883a 	mov	sp,fp
 2018068:	df000017 	ldw	fp,0(sp)
 201806c:	dec00104 	addi	sp,sp,4
 2018070:	f800283a 	ret

02018074 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2018074:	defff404 	addi	sp,sp,-48
 2018078:	dfc00b15 	stw	ra,44(sp)
 201807c:	df000a15 	stw	fp,40(sp)
 2018080:	df000a04 	addi	fp,sp,40
 2018084:	2005883a 	mov	r2,r4
 2018088:	e17ffe15 	stw	r5,-8(fp)
 201808c:	e1bfff15 	stw	r6,-4(fp)
 2018090:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 2018094:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 2018098:	e0bfff17 	ldw	r2,-4(fp)
 201809c:	1000021e 	bne	r2,zero,20180a8 <OSTaskNameGet+0x34>
        return (0);
 20180a0:	0005883a 	mov	r2,zero
 20180a4:	00005406 	br	20181f8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 20180a8:	e0bffd03 	ldbu	r2,-12(fp)
 20180ac:	10800570 	cmpltui	r2,r2,21
 20180b0:	1000081e 	bne	r2,zero,20180d4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 20180b4:	e0bffd03 	ldbu	r2,-12(fp)
 20180b8:	10803fe0 	cmpeqi	r2,r2,255
 20180bc:	1000051e 	bne	r2,zero,20180d4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 20180c0:	e0bfff17 	ldw	r2,-4(fp)
 20180c4:	00c00a84 	movi	r3,42
 20180c8:	10c00005 	stb	r3,0(r2)
            return (0);
 20180cc:	0005883a 	mov	r2,zero
 20180d0:	00004906 	br	20181f8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 20180d4:	e0bffe17 	ldw	r2,-8(fp)
 20180d8:	1000051e 	bne	r2,zero,20180f0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 20180dc:	e0bfff17 	ldw	r2,-4(fp)
 20180e0:	00c00304 	movi	r3,12
 20180e4:	10c00005 	stb	r3,0(r2)
        return (0);
 20180e8:	0005883a 	mov	r2,zero
 20180ec:	00004206 	br	20181f8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 20180f0:	d0a73303 	ldbu	r2,-25396(gp)
 20180f4:	10803fcc 	andi	r2,r2,255
 20180f8:	10000526 	beq	r2,zero,2018110 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 20180fc:	e0bfff17 	ldw	r2,-4(fp)
 2018100:	00c00444 	movi	r3,17
 2018104:	10c00005 	stb	r3,0(r2)
        return (0);
 2018108:	0005883a 	mov	r2,zero
 201810c:	00003a06 	br	20181f8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018110:	0005303a 	rdctl	r2,status
 2018114:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018118:	e0fffc17 	ldw	r3,-16(fp)
 201811c:	00bfff84 	movi	r2,-2
 2018120:	1884703a 	and	r2,r3,r2
 2018124:	1001703a 	wrctl	status,r2
  
  return context;
 2018128:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201812c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 2018130:	e0bffd03 	ldbu	r2,-12(fp)
 2018134:	10803fd8 	cmpnei	r2,r2,255
 2018138:	1000031e 	bne	r2,zero,2018148 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201813c:	d0a73417 	ldw	r2,-25392(gp)
 2018140:	10800c83 	ldbu	r2,50(r2)
 2018144:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2018148:	e0fffd03 	ldbu	r3,-12(fp)
 201814c:	008080f4 	movhi	r2,515
 2018150:	10a0c104 	addi	r2,r2,-31996
 2018154:	18c7883a 	add	r3,r3,r3
 2018158:	18c7883a 	add	r3,r3,r3
 201815c:	10c5883a 	add	r2,r2,r3
 2018160:	10800017 	ldw	r2,0(r2)
 2018164:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 2018168:	e0bff817 	ldw	r2,-32(fp)
 201816c:	1000091e 	bne	r2,zero,2018194 <OSTaskNameGet+0x120>
 2018170:	e0bff617 	ldw	r2,-40(fp)
 2018174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018178:	e0bff717 	ldw	r2,-36(fp)
 201817c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2018180:	e0bfff17 	ldw	r2,-4(fp)
 2018184:	00c010c4 	movi	r3,67
 2018188:	10c00005 	stb	r3,0(r2)
        return (0);
 201818c:	0005883a 	mov	r2,zero
 2018190:	00001906 	br	20181f8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 2018194:	e0bff817 	ldw	r2,-32(fp)
 2018198:	10800058 	cmpnei	r2,r2,1
 201819c:	1000091e 	bne	r2,zero,20181c4 <OSTaskNameGet+0x150>
 20181a0:	e0bff617 	ldw	r2,-40(fp)
 20181a4:	e0bff915 	stw	r2,-28(fp)
 20181a8:	e0bff917 	ldw	r2,-28(fp)
 20181ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20181b0:	e0bfff17 	ldw	r2,-4(fp)
 20181b4:	00c010c4 	movi	r3,67
 20181b8:	10c00005 	stb	r3,0(r2)
        return (0);
 20181bc:	0005883a 	mov	r2,zero
 20181c0:	00000d06 	br	20181f8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 20181c4:	e0bff817 	ldw	r2,-32(fp)
 20181c8:	10801304 	addi	r2,r2,76
 20181cc:	100b883a 	mov	r5,r2
 20181d0:	e13ffe17 	ldw	r4,-8(fp)
 20181d4:	20127a00 	call	20127a0 <OS_StrCopy>
 20181d8:	e0bffb05 	stb	r2,-20(fp)
 20181dc:	e0bff617 	ldw	r2,-40(fp)
 20181e0:	e0bffa15 	stw	r2,-24(fp)
 20181e4:	e0bffa17 	ldw	r2,-24(fp)
 20181e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20181ec:	e0bfff17 	ldw	r2,-4(fp)
 20181f0:	10000005 	stb	zero,0(r2)
    return (len);
 20181f4:	e0bffb03 	ldbu	r2,-20(fp)
}
 20181f8:	e037883a 	mov	sp,fp
 20181fc:	dfc00117 	ldw	ra,4(sp)
 2018200:	df000017 	ldw	fp,0(sp)
 2018204:	dec00204 	addi	sp,sp,8
 2018208:	f800283a 	ret

0201820c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201820c:	defff304 	addi	sp,sp,-52
 2018210:	dfc00c15 	stw	ra,48(sp)
 2018214:	df000b15 	stw	fp,44(sp)
 2018218:	df000b04 	addi	fp,sp,44
 201821c:	2005883a 	mov	r2,r4
 2018220:	e17ffe15 	stw	r5,-8(fp)
 2018224:	e1bfff15 	stw	r6,-4(fp)
 2018228:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201822c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2018230:	e0bfff17 	ldw	r2,-4(fp)
 2018234:	10005c26 	beq	r2,zero,20183a8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 2018238:	e0bffd03 	ldbu	r2,-12(fp)
 201823c:	10800570 	cmpltui	r2,r2,21
 2018240:	1000071e 	bne	r2,zero,2018260 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 2018244:	e0bffd03 	ldbu	r2,-12(fp)
 2018248:	10803fe0 	cmpeqi	r2,r2,255
 201824c:	1000041e 	bne	r2,zero,2018260 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 2018250:	e0bfff17 	ldw	r2,-4(fp)
 2018254:	00c00a84 	movi	r3,42
 2018258:	10c00005 	stb	r3,0(r2)
            return;
 201825c:	00005306 	br	20183ac <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 2018260:	e0bffe17 	ldw	r2,-8(fp)
 2018264:	1000041e 	bne	r2,zero,2018278 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 2018268:	e0bfff17 	ldw	r2,-4(fp)
 201826c:	00c00304 	movi	r3,12
 2018270:	10c00005 	stb	r3,0(r2)
        return;
 2018274:	00004d06 	br	20183ac <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 2018278:	d0a73303 	ldbu	r2,-25396(gp)
 201827c:	10803fcc 	andi	r2,r2,255
 2018280:	10000426 	beq	r2,zero,2018294 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 2018284:	e0bfff17 	ldw	r2,-4(fp)
 2018288:	00c00484 	movi	r3,18
 201828c:	10c00005 	stb	r3,0(r2)
        return;
 2018290:	00004606 	br	20183ac <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018294:	0005303a 	rdctl	r2,status
 2018298:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201829c:	e0fffc17 	ldw	r3,-16(fp)
 20182a0:	00bfff84 	movi	r2,-2
 20182a4:	1884703a 	and	r2,r3,r2
 20182a8:	1001703a 	wrctl	status,r2
  
  return context;
 20182ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20182b0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 20182b4:	e0bffd03 	ldbu	r2,-12(fp)
 20182b8:	10803fd8 	cmpnei	r2,r2,255
 20182bc:	1000031e 	bne	r2,zero,20182cc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 20182c0:	d0a73417 	ldw	r2,-25392(gp)
 20182c4:	10800c83 	ldbu	r2,50(r2)
 20182c8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20182cc:	e0fffd03 	ldbu	r3,-12(fp)
 20182d0:	008080f4 	movhi	r2,515
 20182d4:	10a0c104 	addi	r2,r2,-31996
 20182d8:	18c7883a 	add	r3,r3,r3
 20182dc:	18c7883a 	add	r3,r3,r3
 20182e0:	10c5883a 	add	r2,r2,r3
 20182e4:	10800017 	ldw	r2,0(r2)
 20182e8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 20182ec:	e0bff717 	ldw	r2,-36(fp)
 20182f0:	1000081e 	bne	r2,zero,2018314 <OSTaskNameSet+0x108>
 20182f4:	e0bff517 	ldw	r2,-44(fp)
 20182f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20182fc:	e0bff617 	ldw	r2,-40(fp)
 2018300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2018304:	e0bfff17 	ldw	r2,-4(fp)
 2018308:	00c010c4 	movi	r3,67
 201830c:	10c00005 	stb	r3,0(r2)
        return;
 2018310:	00002606 	br	20183ac <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 2018314:	e0bff717 	ldw	r2,-36(fp)
 2018318:	10800058 	cmpnei	r2,r2,1
 201831c:	1000081e 	bne	r2,zero,2018340 <OSTaskNameSet+0x134>
 2018320:	e0bff517 	ldw	r2,-44(fp)
 2018324:	e0bff815 	stw	r2,-32(fp)
 2018328:	e0bff817 	ldw	r2,-32(fp)
 201832c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2018330:	e0bfff17 	ldw	r2,-4(fp)
 2018334:	00c010c4 	movi	r3,67
 2018338:	10c00005 	stb	r3,0(r2)
        return;
 201833c:	00001b06 	br	20183ac <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 2018340:	e13ffe17 	ldw	r4,-8(fp)
 2018344:	20128140 	call	2012814 <OS_StrLen>
 2018348:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201834c:	e0bffa03 	ldbu	r2,-24(fp)
 2018350:	10800830 	cmpltui	r2,r2,32
 2018354:	1000081e 	bne	r2,zero,2018378 <OSTaskNameSet+0x16c>
 2018358:	e0bff517 	ldw	r2,-44(fp)
 201835c:	e0bff915 	stw	r2,-28(fp)
 2018360:	e0bff917 	ldw	r2,-28(fp)
 2018364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 2018368:	e0bfff17 	ldw	r2,-4(fp)
 201836c:	00c01044 	movi	r3,65
 2018370:	10c00005 	stb	r3,0(r2)
        return;
 2018374:	00000d06 	br	20183ac <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 2018378:	e0bff717 	ldw	r2,-36(fp)
 201837c:	10801304 	addi	r2,r2,76
 2018380:	e17ffe17 	ldw	r5,-8(fp)
 2018384:	1009883a 	mov	r4,r2
 2018388:	20127a00 	call	20127a0 <OS_StrCopy>
 201838c:	e0bff517 	ldw	r2,-44(fp)
 2018390:	e0bffb15 	stw	r2,-20(fp)
 2018394:	e0bffb17 	ldw	r2,-20(fp)
 2018398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201839c:	e0bfff17 	ldw	r2,-4(fp)
 20183a0:	10000005 	stb	zero,0(r2)
 20183a4:	00000106 	br	20183ac <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 20183a8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 20183ac:	e037883a 	mov	sp,fp
 20183b0:	dfc00117 	ldw	ra,4(sp)
 20183b4:	df000017 	ldw	fp,0(sp)
 20183b8:	dec00204 	addi	sp,sp,8
 20183bc:	f800283a 	ret

020183c0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 20183c0:	defff404 	addi	sp,sp,-48
 20183c4:	dfc00b15 	stw	ra,44(sp)
 20183c8:	df000a15 	stw	fp,40(sp)
 20183cc:	df000a04 	addi	fp,sp,40
 20183d0:	2005883a 	mov	r2,r4
 20183d4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 20183d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 20183dc:	e0bfff03 	ldbu	r2,-4(fp)
 20183e0:	10800530 	cmpltui	r2,r2,20
 20183e4:	1000021e 	bne	r2,zero,20183f0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 20183e8:	00800a84 	movi	r2,42
 20183ec:	00006406 	br	2018580 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20183f0:	0005303a 	rdctl	r2,status
 20183f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20183f8:	e0fffe17 	ldw	r3,-8(fp)
 20183fc:	00bfff84 	movi	r2,-2
 2018400:	1884703a 	and	r2,r3,r2
 2018404:	1001703a 	wrctl	status,r2
  
  return context;
 2018408:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201840c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2018410:	e0ffff03 	ldbu	r3,-4(fp)
 2018414:	008080f4 	movhi	r2,515
 2018418:	10a0c104 	addi	r2,r2,-31996
 201841c:	18c7883a 	add	r3,r3,r3
 2018420:	18c7883a 	add	r3,r3,r3
 2018424:	10c5883a 	add	r2,r2,r3
 2018428:	10800017 	ldw	r2,0(r2)
 201842c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 2018430:	e0bff817 	ldw	r2,-32(fp)
 2018434:	1000061e 	bne	r2,zero,2018450 <OSTaskResume+0x90>
 2018438:	e0bff617 	ldw	r2,-40(fp)
 201843c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018440:	e0bff717 	ldw	r2,-36(fp)
 2018444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 2018448:	00801184 	movi	r2,70
 201844c:	00004c06 	br	2018580 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 2018450:	e0bff817 	ldw	r2,-32(fp)
 2018454:	10800058 	cmpnei	r2,r2,1
 2018458:	1000061e 	bne	r2,zero,2018474 <OSTaskResume+0xb4>
 201845c:	e0bff617 	ldw	r2,-40(fp)
 2018460:	e0bff915 	stw	r2,-28(fp)
 2018464:	e0bff917 	ldw	r2,-28(fp)
 2018468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201846c:	008010c4 	movi	r2,67
 2018470:	00004306 	br	2018580 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 2018474:	e0bff817 	ldw	r2,-32(fp)
 2018478:	10800c03 	ldbu	r2,48(r2)
 201847c:	10803fcc 	andi	r2,r2,255
 2018480:	1080020c 	andi	r2,r2,8
 2018484:	10003926 	beq	r2,zero,201856c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 2018488:	e0bff817 	ldw	r2,-32(fp)
 201848c:	10c00c03 	ldbu	r3,48(r2)
 2018490:	00bffdc4 	movi	r2,-9
 2018494:	1884703a 	and	r2,r3,r2
 2018498:	1007883a 	mov	r3,r2
 201849c:	e0bff817 	ldw	r2,-32(fp)
 20184a0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 20184a4:	e0bff817 	ldw	r2,-32(fp)
 20184a8:	10800c03 	ldbu	r2,48(r2)
 20184ac:	10803fcc 	andi	r2,r2,255
 20184b0:	1000281e 	bne	r2,zero,2018554 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 20184b4:	e0bff817 	ldw	r2,-32(fp)
 20184b8:	10800b8b 	ldhu	r2,46(r2)
 20184bc:	10bfffcc 	andi	r2,r2,65535
 20184c0:	10001f1e 	bne	r2,zero,2018540 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 20184c4:	e0bff817 	ldw	r2,-32(fp)
 20184c8:	10c00d83 	ldbu	r3,54(r2)
 20184cc:	d0a73103 	ldbu	r2,-25404(gp)
 20184d0:	1884b03a 	or	r2,r3,r2
 20184d4:	d0a73105 	stb	r2,-25404(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20184d8:	e0bff817 	ldw	r2,-32(fp)
 20184dc:	10800d03 	ldbu	r2,52(r2)
 20184e0:	10c03fcc 	andi	r3,r2,255
 20184e4:	e0bff817 	ldw	r2,-32(fp)
 20184e8:	10800d03 	ldbu	r2,52(r2)
 20184ec:	11003fcc 	andi	r4,r2,255
 20184f0:	d0a73144 	addi	r2,gp,-25403
 20184f4:	2085883a 	add	r2,r4,r2
 20184f8:	11000003 	ldbu	r4,0(r2)
 20184fc:	e0bff817 	ldw	r2,-32(fp)
 2018500:	10800d43 	ldbu	r2,53(r2)
 2018504:	2084b03a 	or	r2,r4,r2
 2018508:	1009883a 	mov	r4,r2
 201850c:	d0a73144 	addi	r2,gp,-25403
 2018510:	1885883a 	add	r2,r3,r2
 2018514:	11000005 	stb	r4,0(r2)
 2018518:	e0bff617 	ldw	r2,-40(fp)
 201851c:	e0bffa15 	stw	r2,-24(fp)
 2018520:	e0bffa17 	ldw	r2,-24(fp)
 2018524:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 2018528:	d0a72543 	ldbu	r2,-25451(gp)
 201852c:	10803fcc 	andi	r2,r2,255
 2018530:	10800058 	cmpnei	r2,r2,1
 2018534:	10000b1e 	bne	r2,zero,2018564 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 2018538:	201265c0 	call	201265c <OS_Sched>
 201853c:	00000906 	br	2018564 <OSTaskResume+0x1a4>
 2018540:	e0bff617 	ldw	r2,-40(fp)
 2018544:	e0bffb15 	stw	r2,-20(fp)
 2018548:	e0bffb17 	ldw	r2,-20(fp)
 201854c:	1001703a 	wrctl	status,r2
 2018550:	00000406 	br	2018564 <OSTaskResume+0x1a4>
 2018554:	e0bff617 	ldw	r2,-40(fp)
 2018558:	e0bffc15 	stw	r2,-16(fp)
 201855c:	e0bffc17 	ldw	r2,-16(fp)
 2018560:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 2018564:	0005883a 	mov	r2,zero
 2018568:	00000506 	br	2018580 <OSTaskResume+0x1c0>
 201856c:	e0bff617 	ldw	r2,-40(fp)
 2018570:	e0bffd15 	stw	r2,-12(fp)
 2018574:	e0bffd17 	ldw	r2,-12(fp)
 2018578:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201857c:	00801104 	movi	r2,68
}
 2018580:	e037883a 	mov	sp,fp
 2018584:	dfc00117 	ldw	ra,4(sp)
 2018588:	df000017 	ldw	fp,0(sp)
 201858c:	dec00204 	addi	sp,sp,8
 2018590:	f800283a 	ret

02018594 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2018594:	defff304 	addi	sp,sp,-52
 2018598:	df000c15 	stw	fp,48(sp)
 201859c:	df000c04 	addi	fp,sp,48
 20185a0:	2005883a 	mov	r2,r4
 20185a4:	e17fff15 	stw	r5,-4(fp)
 20185a8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20185ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 20185b0:	e0bffe03 	ldbu	r2,-8(fp)
 20185b4:	10800570 	cmpltui	r2,r2,21
 20185b8:	1000051e 	bne	r2,zero,20185d0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 20185bc:	e0bffe03 	ldbu	r2,-8(fp)
 20185c0:	10803fe0 	cmpeqi	r2,r2,255
 20185c4:	1000021e 	bne	r2,zero,20185d0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 20185c8:	00800a84 	movi	r2,42
 20185cc:	00005d06 	br	2018744 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 20185d0:	e0bfff17 	ldw	r2,-4(fp)
 20185d4:	1000021e 	bne	r2,zero,20185e0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 20185d8:	00800244 	movi	r2,9
 20185dc:	00005906 	br	2018744 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 20185e0:	e0bfff17 	ldw	r2,-4(fp)
 20185e4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 20185e8:	e0bfff17 	ldw	r2,-4(fp)
 20185ec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20185f0:	0005303a 	rdctl	r2,status
 20185f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20185f8:	e0fffd17 	ldw	r3,-12(fp)
 20185fc:	00bfff84 	movi	r2,-2
 2018600:	1884703a 	and	r2,r3,r2
 2018604:	1001703a 	wrctl	status,r2
  
  return context;
 2018608:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201860c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 2018610:	e0bffe03 	ldbu	r2,-8(fp)
 2018614:	10803fd8 	cmpnei	r2,r2,255
 2018618:	1000031e 	bne	r2,zero,2018628 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201861c:	d0a73417 	ldw	r2,-25392(gp)
 2018620:	10800c83 	ldbu	r2,50(r2)
 2018624:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2018628:	e0fffe03 	ldbu	r3,-8(fp)
 201862c:	008080f4 	movhi	r2,515
 2018630:	10a0c104 	addi	r2,r2,-31996
 2018634:	18c7883a 	add	r3,r3,r3
 2018638:	18c7883a 	add	r3,r3,r3
 201863c:	10c5883a 	add	r2,r2,r3
 2018640:	10800017 	ldw	r2,0(r2)
 2018644:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 2018648:	e0bff817 	ldw	r2,-32(fp)
 201864c:	1000061e 	bne	r2,zero,2018668 <OSTaskStkChk+0xd4>
 2018650:	e0bff617 	ldw	r2,-40(fp)
 2018654:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018658:	e0bff717 	ldw	r2,-36(fp)
 201865c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2018660:	008010c4 	movi	r2,67
 2018664:	00003706 	br	2018744 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2018668:	e0bff817 	ldw	r2,-32(fp)
 201866c:	10800058 	cmpnei	r2,r2,1
 2018670:	1000061e 	bne	r2,zero,201868c <OSTaskStkChk+0xf8>
 2018674:	e0bff617 	ldw	r2,-40(fp)
 2018678:	e0bff915 	stw	r2,-28(fp)
 201867c:	e0bff917 	ldw	r2,-28(fp)
 2018680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2018684:	008010c4 	movi	r2,67
 2018688:	00002e06 	br	2018744 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201868c:	e0bff817 	ldw	r2,-32(fp)
 2018690:	1080040b 	ldhu	r2,16(r2)
 2018694:	10bfffcc 	andi	r2,r2,65535
 2018698:	1080004c 	andi	r2,r2,1
 201869c:	1000061e 	bne	r2,zero,20186b8 <OSTaskStkChk+0x124>
 20186a0:	e0bff617 	ldw	r2,-40(fp)
 20186a4:	e0bffa15 	stw	r2,-24(fp)
 20186a8:	e0bffa17 	ldw	r2,-24(fp)
 20186ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 20186b0:	00801144 	movi	r2,69
 20186b4:	00002306 	br	2018744 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 20186b8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 20186bc:	e0bff817 	ldw	r2,-32(fp)
 20186c0:	10800317 	ldw	r2,12(r2)
 20186c4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 20186c8:	e0bff817 	ldw	r2,-32(fp)
 20186cc:	10800217 	ldw	r2,8(r2)
 20186d0:	e0bff415 	stw	r2,-48(fp)
 20186d4:	e0bff617 	ldw	r2,-40(fp)
 20186d8:	e0bffb15 	stw	r2,-20(fp)
 20186dc:	e0bffb17 	ldw	r2,-20(fp)
 20186e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 20186e4:	00000306 	br	20186f4 <OSTaskStkChk+0x160>
        nfree++;
 20186e8:	e0bff517 	ldw	r2,-44(fp)
 20186ec:	10800044 	addi	r2,r2,1
 20186f0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 20186f4:	e0bff417 	ldw	r2,-48(fp)
 20186f8:	10c00104 	addi	r3,r2,4
 20186fc:	e0fff415 	stw	r3,-48(fp)
 2018700:	10800017 	ldw	r2,0(r2)
 2018704:	103ff826 	beq	r2,zero,20186e8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 2018708:	e0bff517 	ldw	r2,-44(fp)
 201870c:	1085883a 	add	r2,r2,r2
 2018710:	1085883a 	add	r2,r2,r2
 2018714:	1007883a 	mov	r3,r2
 2018718:	e0bfff17 	ldw	r2,-4(fp)
 201871c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 2018720:	e0fffc17 	ldw	r3,-16(fp)
 2018724:	e0bff517 	ldw	r2,-44(fp)
 2018728:	1885c83a 	sub	r2,r3,r2
 201872c:	1085883a 	add	r2,r2,r2
 2018730:	1085883a 	add	r2,r2,r2
 2018734:	1007883a 	mov	r3,r2
 2018738:	e0bfff17 	ldw	r2,-4(fp)
 201873c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 2018740:	0005883a 	mov	r2,zero
}
 2018744:	e037883a 	mov	sp,fp
 2018748:	df000017 	ldw	fp,0(sp)
 201874c:	dec00104 	addi	sp,sp,4
 2018750:	f800283a 	ret

02018754 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 2018754:	defff504 	addi	sp,sp,-44
 2018758:	dfc00a15 	stw	ra,40(sp)
 201875c:	df000915 	stw	fp,36(sp)
 2018760:	df000904 	addi	fp,sp,36
 2018764:	2005883a 	mov	r2,r4
 2018768:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201876c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 2018770:	e0bfff03 	ldbu	r2,-4(fp)
 2018774:	10800518 	cmpnei	r2,r2,20
 2018778:	1000021e 	bne	r2,zero,2018784 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201877c:	008011c4 	movi	r2,71
 2018780:	00006806 	br	2018924 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2018784:	e0bfff03 	ldbu	r2,-4(fp)
 2018788:	10800530 	cmpltui	r2,r2,20
 201878c:	1000051e 	bne	r2,zero,20187a4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 2018790:	e0bfff03 	ldbu	r2,-4(fp)
 2018794:	10803fe0 	cmpeqi	r2,r2,255
 2018798:	1000021e 	bne	r2,zero,20187a4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201879c:	00800a84 	movi	r2,42
 20187a0:	00006006 	br	2018924 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20187a4:	0005303a 	rdctl	r2,status
 20187a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20187ac:	e0fffe17 	ldw	r3,-8(fp)
 20187b0:	00bfff84 	movi	r2,-2
 20187b4:	1884703a 	and	r2,r3,r2
 20187b8:	1001703a 	wrctl	status,r2
  
  return context;
 20187bc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 20187c0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 20187c4:	e0bfff03 	ldbu	r2,-4(fp)
 20187c8:	10803fd8 	cmpnei	r2,r2,255
 20187cc:	1000061e 	bne	r2,zero,20187e8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 20187d0:	d0a73417 	ldw	r2,-25392(gp)
 20187d4:	10800c83 	ldbu	r2,50(r2)
 20187d8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 20187dc:	00800044 	movi	r2,1
 20187e0:	e0bff705 	stb	r2,-36(fp)
 20187e4:	00000906 	br	201880c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 20187e8:	d0a73417 	ldw	r2,-25392(gp)
 20187ec:	10800c83 	ldbu	r2,50(r2)
 20187f0:	10c03fcc 	andi	r3,r2,255
 20187f4:	e0bfff03 	ldbu	r2,-4(fp)
 20187f8:	1880031e 	bne	r3,r2,2018808 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 20187fc:	00800044 	movi	r2,1
 2018800:	e0bff705 	stb	r2,-36(fp)
 2018804:	00000106 	br	201880c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 2018808:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201880c:	e0ffff03 	ldbu	r3,-4(fp)
 2018810:	008080f4 	movhi	r2,515
 2018814:	10a0c104 	addi	r2,r2,-31996
 2018818:	18c7883a 	add	r3,r3,r3
 201881c:	18c7883a 	add	r3,r3,r3
 2018820:	10c5883a 	add	r2,r2,r3
 2018824:	10800017 	ldw	r2,0(r2)
 2018828:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201882c:	e0bffa17 	ldw	r2,-24(fp)
 2018830:	1000061e 	bne	r2,zero,201884c <OSTaskSuspend+0xf8>
 2018834:	e0bff817 	ldw	r2,-32(fp)
 2018838:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201883c:	e0bff917 	ldw	r2,-28(fp)
 2018840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 2018844:	00801204 	movi	r2,72
 2018848:	00003606 	br	2018924 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201884c:	e0bffa17 	ldw	r2,-24(fp)
 2018850:	10800058 	cmpnei	r2,r2,1
 2018854:	1000061e 	bne	r2,zero,2018870 <OSTaskSuspend+0x11c>
 2018858:	e0bff817 	ldw	r2,-32(fp)
 201885c:	e0bffb15 	stw	r2,-20(fp)
 2018860:	e0bffb17 	ldw	r2,-20(fp)
 2018864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2018868:	008010c4 	movi	r2,67
 201886c:	00002d06 	br	2018924 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 2018870:	e0bffa17 	ldw	r2,-24(fp)
 2018874:	10800d03 	ldbu	r2,52(r2)
 2018878:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201887c:	e0fffd03 	ldbu	r3,-12(fp)
 2018880:	e13ffd03 	ldbu	r4,-12(fp)
 2018884:	d0a73144 	addi	r2,gp,-25403
 2018888:	2085883a 	add	r2,r4,r2
 201888c:	10800003 	ldbu	r2,0(r2)
 2018890:	1009883a 	mov	r4,r2
 2018894:	e0bffa17 	ldw	r2,-24(fp)
 2018898:	10800d43 	ldbu	r2,53(r2)
 201889c:	0084303a 	nor	r2,zero,r2
 20188a0:	2084703a 	and	r2,r4,r2
 20188a4:	1009883a 	mov	r4,r2
 20188a8:	d0a73144 	addi	r2,gp,-25403
 20188ac:	1885883a 	add	r2,r3,r2
 20188b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20188b4:	e0fffd03 	ldbu	r3,-12(fp)
 20188b8:	d0a73144 	addi	r2,gp,-25403
 20188bc:	1885883a 	add	r2,r3,r2
 20188c0:	10800003 	ldbu	r2,0(r2)
 20188c4:	10803fcc 	andi	r2,r2,255
 20188c8:	1000071e 	bne	r2,zero,20188e8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 20188cc:	e0bffa17 	ldw	r2,-24(fp)
 20188d0:	10800d83 	ldbu	r2,54(r2)
 20188d4:	0084303a 	nor	r2,zero,r2
 20188d8:	1007883a 	mov	r3,r2
 20188dc:	d0a73103 	ldbu	r2,-25404(gp)
 20188e0:	1884703a 	and	r2,r3,r2
 20188e4:	d0a73105 	stb	r2,-25404(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 20188e8:	e0bffa17 	ldw	r2,-24(fp)
 20188ec:	10800c03 	ldbu	r2,48(r2)
 20188f0:	10800214 	ori	r2,r2,8
 20188f4:	1007883a 	mov	r3,r2
 20188f8:	e0bffa17 	ldw	r2,-24(fp)
 20188fc:	10c00c05 	stb	r3,48(r2)
 2018900:	e0bff817 	ldw	r2,-32(fp)
 2018904:	e0bffc15 	stw	r2,-16(fp)
 2018908:	e0bffc17 	ldw	r2,-16(fp)
 201890c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2018910:	e0bff703 	ldbu	r2,-36(fp)
 2018914:	10800058 	cmpnei	r2,r2,1
 2018918:	1000011e 	bne	r2,zero,2018920 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201891c:	201265c0 	call	201265c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2018920:	0005883a 	mov	r2,zero
}
 2018924:	e037883a 	mov	sp,fp
 2018928:	dfc00117 	ldw	ra,4(sp)
 201892c:	df000017 	ldw	fp,0(sp)
 2018930:	dec00204 	addi	sp,sp,8
 2018934:	f800283a 	ret

02018938 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 2018938:	defff604 	addi	sp,sp,-40
 201893c:	dfc00915 	stw	ra,36(sp)
 2018940:	df000815 	stw	fp,32(sp)
 2018944:	df000804 	addi	fp,sp,32
 2018948:	2005883a 	mov	r2,r4
 201894c:	e17fff15 	stw	r5,-4(fp)
 2018950:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018954:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 2018958:	e0bffe03 	ldbu	r2,-8(fp)
 201895c:	10800570 	cmpltui	r2,r2,21
 2018960:	1000051e 	bne	r2,zero,2018978 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 2018964:	e0bffe03 	ldbu	r2,-8(fp)
 2018968:	10803fe0 	cmpeqi	r2,r2,255
 201896c:	1000021e 	bne	r2,zero,2018978 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 2018970:	00800a84 	movi	r2,42
 2018974:	00003406 	br	2018a48 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 2018978:	e0bfff17 	ldw	r2,-4(fp)
 201897c:	1000021e 	bne	r2,zero,2018988 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 2018980:	00800244 	movi	r2,9
 2018984:	00003006 	br	2018a48 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018988:	0005303a 	rdctl	r2,status
 201898c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018990:	e0fffd17 	ldw	r3,-12(fp)
 2018994:	00bfff84 	movi	r2,-2
 2018998:	1884703a 	and	r2,r3,r2
 201899c:	1001703a 	wrctl	status,r2
  
  return context;
 20189a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20189a4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 20189a8:	e0bffe03 	ldbu	r2,-8(fp)
 20189ac:	10803fd8 	cmpnei	r2,r2,255
 20189b0:	1000031e 	bne	r2,zero,20189c0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 20189b4:	d0a73417 	ldw	r2,-25392(gp)
 20189b8:	10800c83 	ldbu	r2,50(r2)
 20189bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20189c0:	e0fffe03 	ldbu	r3,-8(fp)
 20189c4:	008080f4 	movhi	r2,515
 20189c8:	10a0c104 	addi	r2,r2,-31996
 20189cc:	18c7883a 	add	r3,r3,r3
 20189d0:	18c7883a 	add	r3,r3,r3
 20189d4:	10c5883a 	add	r2,r2,r3
 20189d8:	10800017 	ldw	r2,0(r2)
 20189dc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 20189e0:	e0bffa17 	ldw	r2,-24(fp)
 20189e4:	1000061e 	bne	r2,zero,2018a00 <OSTaskQuery+0xc8>
 20189e8:	e0bff817 	ldw	r2,-32(fp)
 20189ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20189f0:	e0bff917 	ldw	r2,-28(fp)
 20189f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 20189f8:	00800a44 	movi	r2,41
 20189fc:	00001206 	br	2018a48 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2018a00:	e0bffa17 	ldw	r2,-24(fp)
 2018a04:	10800058 	cmpnei	r2,r2,1
 2018a08:	1000061e 	bne	r2,zero,2018a24 <OSTaskQuery+0xec>
 2018a0c:	e0bff817 	ldw	r2,-32(fp)
 2018a10:	e0bffb15 	stw	r2,-20(fp)
 2018a14:	e0bffb17 	ldw	r2,-20(fp)
 2018a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2018a1c:	008010c4 	movi	r2,67
 2018a20:	00000906 	br	2018a48 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 2018a24:	01801b04 	movi	r6,108
 2018a28:	e17ffa17 	ldw	r5,-24(fp)
 2018a2c:	e13fff17 	ldw	r4,-4(fp)
 2018a30:	20125f40 	call	20125f4 <OS_MemCopy>
 2018a34:	e0bff817 	ldw	r2,-32(fp)
 2018a38:	e0bffc15 	stw	r2,-16(fp)
 2018a3c:	e0bffc17 	ldw	r2,-16(fp)
 2018a40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018a44:	0005883a 	mov	r2,zero
}
 2018a48:	e037883a 	mov	sp,fp
 2018a4c:	dfc00117 	ldw	ra,4(sp)
 2018a50:	df000017 	ldw	fp,0(sp)
 2018a54:	dec00204 	addi	sp,sp,8
 2018a58:	f800283a 	ret

02018a5c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 2018a5c:	defffc04 	addi	sp,sp,-16
 2018a60:	df000315 	stw	fp,12(sp)
 2018a64:	df000304 	addi	fp,sp,12
 2018a68:	e13ffd15 	stw	r4,-12(fp)
 2018a6c:	e17ffe15 	stw	r5,-8(fp)
 2018a70:	3005883a 	mov	r2,r6
 2018a74:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 2018a78:	e0bfff0b 	ldhu	r2,-4(fp)
 2018a7c:	1080004c 	andi	r2,r2,1
 2018a80:	10000d26 	beq	r2,zero,2018ab8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 2018a84:	e0bfff0b 	ldhu	r2,-4(fp)
 2018a88:	1080008c 	andi	r2,r2,2
 2018a8c:	10000a26 	beq	r2,zero,2018ab8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2018a90:	00000706 	br	2018ab0 <OS_TaskStkClr+0x54>
                size--;
 2018a94:	e0bffe17 	ldw	r2,-8(fp)
 2018a98:	10bfffc4 	addi	r2,r2,-1
 2018a9c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 2018aa0:	e0bffd17 	ldw	r2,-12(fp)
 2018aa4:	10c00104 	addi	r3,r2,4
 2018aa8:	e0fffd15 	stw	r3,-12(fp)
 2018aac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2018ab0:	e0bffe17 	ldw	r2,-8(fp)
 2018ab4:	103ff71e 	bne	r2,zero,2018a94 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 2018ab8:	0001883a 	nop
 2018abc:	e037883a 	mov	sp,fp
 2018ac0:	df000017 	ldw	fp,0(sp)
 2018ac4:	dec00104 	addi	sp,sp,4
 2018ac8:	f800283a 	ret

02018acc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 2018acc:	defff904 	addi	sp,sp,-28
 2018ad0:	dfc00615 	stw	ra,24(sp)
 2018ad4:	df000515 	stw	fp,20(sp)
 2018ad8:	df000504 	addi	fp,sp,20
 2018adc:	2005883a 	mov	r2,r4
 2018ae0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018ae4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2018ae8:	d0a73303 	ldbu	r2,-25396(gp)
 2018aec:	10803fcc 	andi	r2,r2,255
 2018af0:	1000311e 	bne	r2,zero,2018bb8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 2018af4:	e0bfff0b 	ldhu	r2,-4(fp)
 2018af8:	10003026 	beq	r2,zero,2018bbc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018afc:	0005303a 	rdctl	r2,status
 2018b00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018b04:	e0fffe17 	ldw	r3,-8(fp)
 2018b08:	00bfff84 	movi	r2,-2
 2018b0c:	1884703a 	and	r2,r3,r2
 2018b10:	1001703a 	wrctl	status,r2
  
  return context;
 2018b14:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2018b18:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 2018b1c:	d0a73417 	ldw	r2,-25392(gp)
 2018b20:	10800d03 	ldbu	r2,52(r2)
 2018b24:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2018b28:	e0fffd03 	ldbu	r3,-12(fp)
 2018b2c:	e13ffd03 	ldbu	r4,-12(fp)
 2018b30:	d0a73144 	addi	r2,gp,-25403
 2018b34:	2085883a 	add	r2,r4,r2
 2018b38:	10800003 	ldbu	r2,0(r2)
 2018b3c:	1009883a 	mov	r4,r2
 2018b40:	d0a73417 	ldw	r2,-25392(gp)
 2018b44:	10800d43 	ldbu	r2,53(r2)
 2018b48:	0084303a 	nor	r2,zero,r2
 2018b4c:	2084703a 	and	r2,r4,r2
 2018b50:	1009883a 	mov	r4,r2
 2018b54:	d0a73144 	addi	r2,gp,-25403
 2018b58:	1885883a 	add	r2,r3,r2
 2018b5c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 2018b60:	e0fffd03 	ldbu	r3,-12(fp)
 2018b64:	d0a73144 	addi	r2,gp,-25403
 2018b68:	1885883a 	add	r2,r3,r2
 2018b6c:	10800003 	ldbu	r2,0(r2)
 2018b70:	10803fcc 	andi	r2,r2,255
 2018b74:	1000071e 	bne	r2,zero,2018b94 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2018b78:	d0a73417 	ldw	r2,-25392(gp)
 2018b7c:	10800d83 	ldbu	r2,54(r2)
 2018b80:	0084303a 	nor	r2,zero,r2
 2018b84:	1007883a 	mov	r3,r2
 2018b88:	d0a73103 	ldbu	r2,-25404(gp)
 2018b8c:	1884703a 	and	r2,r3,r2
 2018b90:	d0a73105 	stb	r2,-25404(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 2018b94:	d0a73417 	ldw	r2,-25392(gp)
 2018b98:	e0ffff0b 	ldhu	r3,-4(fp)
 2018b9c:	10c00b8d 	sth	r3,46(r2)
 2018ba0:	e0bffb17 	ldw	r2,-20(fp)
 2018ba4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018ba8:	e0bffc17 	ldw	r2,-16(fp)
 2018bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 2018bb0:	201265c0 	call	201265c <OS_Sched>
 2018bb4:	00000106 	br	2018bbc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 2018bb8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 2018bbc:	e037883a 	mov	sp,fp
 2018bc0:	dfc00117 	ldw	ra,4(sp)
 2018bc4:	df000017 	ldw	fp,0(sp)
 2018bc8:	dec00204 	addi	sp,sp,8
 2018bcc:	f800283a 	ret

02018bd0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 2018bd0:	defff704 	addi	sp,sp,-36
 2018bd4:	dfc00815 	stw	ra,32(sp)
 2018bd8:	df000715 	stw	fp,28(sp)
 2018bdc:	dc000615 	stw	r16,24(sp)
 2018be0:	df000704 	addi	fp,sp,28
 2018be4:	2011883a 	mov	r8,r4
 2018be8:	2809883a 	mov	r4,r5
 2018bec:	3007883a 	mov	r3,r6
 2018bf0:	3805883a 	mov	r2,r7
 2018bf4:	e23ffb05 	stb	r8,-20(fp)
 2018bf8:	e13ffc05 	stb	r4,-16(fp)
 2018bfc:	e0fffd05 	stb	r3,-12(fp)
 2018c00:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2018c04:	d0a73303 	ldbu	r2,-25396(gp)
 2018c08:	10803fcc 	andi	r2,r2,255
 2018c0c:	10000226 	beq	r2,zero,2018c18 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 2018c10:	00801544 	movi	r2,85
 2018c14:	00004706 	br	2018d34 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 2018c18:	e0bffb03 	ldbu	r2,-20(fp)
 2018c1c:	1000081e 	bne	r2,zero,2018c40 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 2018c20:	e0bffc03 	ldbu	r2,-16(fp)
 2018c24:	1000061e 	bne	r2,zero,2018c40 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 2018c28:	e0bffd03 	ldbu	r2,-12(fp)
 2018c2c:	1000041e 	bne	r2,zero,2018c40 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 2018c30:	e0bffe0b 	ldhu	r2,-8(fp)
 2018c34:	1000021e 	bne	r2,zero,2018c40 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 2018c38:	00801504 	movi	r2,84
 2018c3c:	00003d06 	br	2018d34 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
 2018c40:	e0bffc03 	ldbu	r2,-16(fp)
 2018c44:	10800f30 	cmpltui	r2,r2,60
 2018c48:	1000021e 	bne	r2,zero,2018c54 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2018c4c:	00801444 	movi	r2,81
 2018c50:	00003806 	br	2018d34 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
 2018c54:	e0bffd03 	ldbu	r2,-12(fp)
 2018c58:	10800f30 	cmpltui	r2,r2,60
 2018c5c:	1000021e 	bne	r2,zero,2018c68 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2018c60:	00801484 	movi	r2,82
 2018c64:	00003306 	br	2018d34 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
 2018c68:	e0bffe0b 	ldhu	r2,-8(fp)
 2018c6c:	1080fa30 	cmpltui	r2,r2,1000
 2018c70:	1000021e 	bne	r2,zero,2018c7c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 2018c74:	008014c4 	movi	r2,83
 2018c78:	00002e06 	br	2018d34 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2018c7c:	e0bffb03 	ldbu	r2,-20(fp)
 2018c80:	01438404 	movi	r5,3600
 2018c84:	1009883a 	mov	r4,r2
 2018c88:	20019440 	call	2001944 <__mulsi3>
 2018c8c:	1021883a 	mov	r16,r2
 2018c90:	e0bffc03 	ldbu	r2,-16(fp)
 2018c94:	01400f04 	movi	r5,60
 2018c98:	1009883a 	mov	r4,r2
 2018c9c:	20019440 	call	2001944 <__mulsi3>
 2018ca0:	8087883a 	add	r3,r16,r2
 2018ca4:	e0bffd03 	ldbu	r2,-12(fp)
 2018ca8:	1885883a 	add	r2,r3,r2
 2018cac:	0140fa04 	movi	r5,1000
 2018cb0:	1009883a 	mov	r4,r2
 2018cb4:	20019440 	call	2001944 <__mulsi3>
 2018cb8:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 2018cbc:	e0bffe0b 	ldhu	r2,-8(fp)
 2018cc0:	0140fa04 	movi	r5,1000
 2018cc4:	1009883a 	mov	r4,r2
 2018cc8:	20019440 	call	2001944 <__mulsi3>
 2018ccc:	0140fa04 	movi	r5,1000
 2018cd0:	1009883a 	mov	r4,r2
 2018cd4:	20045cc0 	call	20045cc <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2018cd8:	8085883a 	add	r2,r16,r2
 2018cdc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 2018ce0:	e0bffa17 	ldw	r2,-24(fp)
 2018ce4:	1004d43a 	srli	r2,r2,16
 2018ce8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 2018cec:	e0bffa17 	ldw	r2,-24(fp)
 2018cf0:	10bfffcc 	andi	r2,r2,65535
 2018cf4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 2018cf8:	e0bffa17 	ldw	r2,-24(fp)
 2018cfc:	10bfffcc 	andi	r2,r2,65535
 2018d00:	1009883a 	mov	r4,r2
 2018d04:	2018acc0 	call	2018acc <OSTimeDly>
    while (loops > 0) {
 2018d08:	00000706 	br	2018d28 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
 2018d0c:	01200014 	movui	r4,32768
 2018d10:	2018acc0 	call	2018acc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 2018d14:	01200014 	movui	r4,32768
 2018d18:	2018acc0 	call	2018acc <OSTimeDly>
        loops--;
 2018d1c:	e0bff90b 	ldhu	r2,-28(fp)
 2018d20:	10bfffc4 	addi	r2,r2,-1
 2018d24:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2018d28:	e0bff90b 	ldhu	r2,-28(fp)
 2018d2c:	103ff71e 	bne	r2,zero,2018d0c <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2018d30:	0005883a 	mov	r2,zero
}
 2018d34:	e6ffff04 	addi	sp,fp,-4
 2018d38:	dfc00217 	ldw	ra,8(sp)
 2018d3c:	df000117 	ldw	fp,4(sp)
 2018d40:	dc000017 	ldw	r16,0(sp)
 2018d44:	dec00304 	addi	sp,sp,12
 2018d48:	f800283a 	ret

02018d4c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2018d4c:	defff504 	addi	sp,sp,-44
 2018d50:	dfc00a15 	stw	ra,40(sp)
 2018d54:	df000915 	stw	fp,36(sp)
 2018d58:	df000904 	addi	fp,sp,36
 2018d5c:	2005883a 	mov	r2,r4
 2018d60:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018d64:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2018d68:	e0bfff03 	ldbu	r2,-4(fp)
 2018d6c:	10800530 	cmpltui	r2,r2,20
 2018d70:	1000021e 	bne	r2,zero,2018d7c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2018d74:	00800a84 	movi	r2,42
 2018d78:	00006406 	br	2018f0c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018d7c:	0005303a 	rdctl	r2,status
 2018d80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018d84:	e0fffe17 	ldw	r3,-8(fp)
 2018d88:	00bfff84 	movi	r2,-2
 2018d8c:	1884703a 	and	r2,r3,r2
 2018d90:	1001703a 	wrctl	status,r2
  
  return context;
 2018d94:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2018d98:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 2018d9c:	e0ffff03 	ldbu	r3,-4(fp)
 2018da0:	008080f4 	movhi	r2,515
 2018da4:	10a0c104 	addi	r2,r2,-31996
 2018da8:	18c7883a 	add	r3,r3,r3
 2018dac:	18c7883a 	add	r3,r3,r3
 2018db0:	10c5883a 	add	r2,r2,r3
 2018db4:	10800017 	ldw	r2,0(r2)
 2018db8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 2018dbc:	e0bff917 	ldw	r2,-28(fp)
 2018dc0:	1000061e 	bne	r2,zero,2018ddc <OSTimeDlyResume+0x90>
 2018dc4:	e0bff717 	ldw	r2,-36(fp)
 2018dc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018dcc:	e0bff817 	ldw	r2,-32(fp)
 2018dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2018dd4:	008010c4 	movi	r2,67
 2018dd8:	00004c06 	br	2018f0c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2018ddc:	e0bff917 	ldw	r2,-28(fp)
 2018de0:	10800058 	cmpnei	r2,r2,1
 2018de4:	1000061e 	bne	r2,zero,2018e00 <OSTimeDlyResume+0xb4>
 2018de8:	e0bff717 	ldw	r2,-36(fp)
 2018dec:	e0bffa15 	stw	r2,-24(fp)
 2018df0:	e0bffa17 	ldw	r2,-24(fp)
 2018df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2018df8:	008010c4 	movi	r2,67
 2018dfc:	00004306 	br	2018f0c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2018e00:	e0bff917 	ldw	r2,-28(fp)
 2018e04:	10800b8b 	ldhu	r2,46(r2)
 2018e08:	10bfffcc 	andi	r2,r2,65535
 2018e0c:	1000061e 	bne	r2,zero,2018e28 <OSTimeDlyResume+0xdc>
 2018e10:	e0bff717 	ldw	r2,-36(fp)
 2018e14:	e0bffb15 	stw	r2,-20(fp)
 2018e18:	e0bffb17 	ldw	r2,-20(fp)
 2018e1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2018e20:	00801404 	movi	r2,80
 2018e24:	00003906 	br	2018f0c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2018e28:	e0bff917 	ldw	r2,-28(fp)
 2018e2c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2018e30:	e0bff917 	ldw	r2,-28(fp)
 2018e34:	10800c03 	ldbu	r2,48(r2)
 2018e38:	10803fcc 	andi	r2,r2,255
 2018e3c:	10800dcc 	andi	r2,r2,55
 2018e40:	10000b26 	beq	r2,zero,2018e70 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 2018e44:	e0bff917 	ldw	r2,-28(fp)
 2018e48:	10c00c03 	ldbu	r3,48(r2)
 2018e4c:	00bff204 	movi	r2,-56
 2018e50:	1884703a 	and	r2,r3,r2
 2018e54:	1007883a 	mov	r3,r2
 2018e58:	e0bff917 	ldw	r2,-28(fp)
 2018e5c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 2018e60:	e0bff917 	ldw	r2,-28(fp)
 2018e64:	00c00044 	movi	r3,1
 2018e68:	10c00c45 	stb	r3,49(r2)
 2018e6c:	00000206 	br	2018e78 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 2018e70:	e0bff917 	ldw	r2,-28(fp)
 2018e74:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2018e78:	e0bff917 	ldw	r2,-28(fp)
 2018e7c:	10800c03 	ldbu	r2,48(r2)
 2018e80:	10803fcc 	andi	r2,r2,255
 2018e84:	1080020c 	andi	r2,r2,8
 2018e88:	10001b1e 	bne	r2,zero,2018ef8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 2018e8c:	e0bff917 	ldw	r2,-28(fp)
 2018e90:	10c00d83 	ldbu	r3,54(r2)
 2018e94:	d0a73103 	ldbu	r2,-25404(gp)
 2018e98:	1884b03a 	or	r2,r3,r2
 2018e9c:	d0a73105 	stb	r2,-25404(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2018ea0:	e0bff917 	ldw	r2,-28(fp)
 2018ea4:	10800d03 	ldbu	r2,52(r2)
 2018ea8:	10c03fcc 	andi	r3,r2,255
 2018eac:	e0bff917 	ldw	r2,-28(fp)
 2018eb0:	10800d03 	ldbu	r2,52(r2)
 2018eb4:	11003fcc 	andi	r4,r2,255
 2018eb8:	d0a73144 	addi	r2,gp,-25403
 2018ebc:	2085883a 	add	r2,r4,r2
 2018ec0:	11000003 	ldbu	r4,0(r2)
 2018ec4:	e0bff917 	ldw	r2,-28(fp)
 2018ec8:	10800d43 	ldbu	r2,53(r2)
 2018ecc:	2084b03a 	or	r2,r4,r2
 2018ed0:	1009883a 	mov	r4,r2
 2018ed4:	d0a73144 	addi	r2,gp,-25403
 2018ed8:	1885883a 	add	r2,r3,r2
 2018edc:	11000005 	stb	r4,0(r2)
 2018ee0:	e0bff717 	ldw	r2,-36(fp)
 2018ee4:	e0bffc15 	stw	r2,-16(fp)
 2018ee8:	e0bffc17 	ldw	r2,-16(fp)
 2018eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 2018ef0:	201265c0 	call	201265c <OS_Sched>
 2018ef4:	00000406 	br	2018f08 <OSTimeDlyResume+0x1bc>
 2018ef8:	e0bff717 	ldw	r2,-36(fp)
 2018efc:	e0bffd15 	stw	r2,-12(fp)
 2018f00:	e0bffd17 	ldw	r2,-12(fp)
 2018f04:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 2018f08:	0005883a 	mov	r2,zero
}
 2018f0c:	e037883a 	mov	sp,fp
 2018f10:	dfc00117 	ldw	ra,4(sp)
 2018f14:	df000017 	ldw	fp,0(sp)
 2018f18:	dec00204 	addi	sp,sp,8
 2018f1c:	f800283a 	ret

02018f20 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 2018f20:	defffb04 	addi	sp,sp,-20
 2018f24:	df000415 	stw	fp,16(sp)
 2018f28:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018f2c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018f30:	0005303a 	rdctl	r2,status
 2018f34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018f38:	e0fffe17 	ldw	r3,-8(fp)
 2018f3c:	00bfff84 	movi	r2,-2
 2018f40:	1884703a 	and	r2,r3,r2
 2018f44:	1001703a 	wrctl	status,r2
  
  return context;
 2018f48:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2018f4c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 2018f50:	d0a73517 	ldw	r2,-25388(gp)
 2018f54:	e0bffd15 	stw	r2,-12(fp)
 2018f58:	e0bffc17 	ldw	r2,-16(fp)
 2018f5c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018f60:	e0bfff17 	ldw	r2,-4(fp)
 2018f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 2018f68:	e0bffd17 	ldw	r2,-12(fp)
}
 2018f6c:	e037883a 	mov	sp,fp
 2018f70:	df000017 	ldw	fp,0(sp)
 2018f74:	dec00104 	addi	sp,sp,4
 2018f78:	f800283a 	ret

02018f7c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 2018f7c:	defffb04 	addi	sp,sp,-20
 2018f80:	df000415 	stw	fp,16(sp)
 2018f84:	df000404 	addi	fp,sp,16
 2018f88:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018f8c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018f90:	0005303a 	rdctl	r2,status
 2018f94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018f98:	e0fffd17 	ldw	r3,-12(fp)
 2018f9c:	00bfff84 	movi	r2,-2
 2018fa0:	1884703a 	and	r2,r3,r2
 2018fa4:	1001703a 	wrctl	status,r2
  
  return context;
 2018fa8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 2018fac:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 2018fb0:	e0bfff17 	ldw	r2,-4(fp)
 2018fb4:	d0a73515 	stw	r2,-25388(gp)
 2018fb8:	e0bffc17 	ldw	r2,-16(fp)
 2018fbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018fc0:	e0bffe17 	ldw	r2,-8(fp)
 2018fc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2018fc8:	0001883a 	nop
 2018fcc:	e037883a 	mov	sp,fp
 2018fd0:	df000017 	ldw	fp,0(sp)
 2018fd4:	dec00104 	addi	sp,sp,4
 2018fd8:	f800283a 	ret

02018fdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2018fdc:	defffd04 	addi	sp,sp,-12
 2018fe0:	dfc00215 	stw	ra,8(sp)
 2018fe4:	df000115 	stw	fp,4(sp)
 2018fe8:	df000104 	addi	fp,sp,4
 2018fec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2018ff0:	d1600904 	addi	r5,gp,-32732
 2018ff4:	e13fff17 	ldw	r4,-4(fp)
 2018ff8:	201a0500 	call	201a050 <alt_dev_llist_insert>
}
 2018ffc:	e037883a 	mov	sp,fp
 2019000:	dfc00117 	ldw	ra,4(sp)
 2019004:	df000017 	ldw	fp,0(sp)
 2019008:	dec00204 	addi	sp,sp,8
 201900c:	f800283a 	ret

02019010 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2019010:	defffd04 	addi	sp,sp,-12
 2019014:	dfc00215 	stw	ra,8(sp)
 2019018:	df000115 	stw	fp,4(sp)
 201901c:	df000104 	addi	fp,sp,4
 2019020:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 2019024:	201a9fc0 	call	201a9fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2019028:	00800044 	movi	r2,1
 201902c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2019030:	0001883a 	nop
 2019034:	e037883a 	mov	sp,fp
 2019038:	dfc00117 	ldw	ra,4(sp)
 201903c:	df000017 	ldw	fp,0(sp)
 2019040:	dec00204 	addi	sp,sp,8
 2019044:	f800283a 	ret

02019048 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2019048:	defffe04 	addi	sp,sp,-8
 201904c:	dfc00115 	stw	ra,4(sp)
 2019050:	df000015 	stw	fp,0(sp)
 2019054:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 2019058:	01c0fa04 	movi	r7,1000
 201905c:	01800044 	movi	r6,1
 2019060:	000b883a 	mov	r5,zero
 2019064:	0009883a 	mov	r4,zero
 2019068:	2019e4c0 	call	2019e4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201906c:	000d883a 	mov	r6,zero
 2019070:	000b883a 	mov	r5,zero
 2019074:	010080b4 	movhi	r4,514
 2019078:	2130f504 	addi	r4,r4,-15404
 201907c:	201920c0 	call	201920c <altera_avalon_jtag_uart_init>
 2019080:	010080b4 	movhi	r4,514
 2019084:	2130eb04 	addi	r4,r4,-15444
 2019088:	2018fdc0 	call	2018fdc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201908c:	0001883a 	nop
}
 2019090:	0001883a 	nop
 2019094:	e037883a 	mov	sp,fp
 2019098:	dfc00117 	ldw	ra,4(sp)
 201909c:	df000017 	ldw	fp,0(sp)
 20190a0:	dec00204 	addi	sp,sp,8
 20190a4:	f800283a 	ret

020190a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20190a8:	defffa04 	addi	sp,sp,-24
 20190ac:	dfc00515 	stw	ra,20(sp)
 20190b0:	df000415 	stw	fp,16(sp)
 20190b4:	df000404 	addi	fp,sp,16
 20190b8:	e13ffd15 	stw	r4,-12(fp)
 20190bc:	e17ffe15 	stw	r5,-8(fp)
 20190c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20190c4:	e0bffd17 	ldw	r2,-12(fp)
 20190c8:	10800017 	ldw	r2,0(r2)
 20190cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20190d0:	e0bffc17 	ldw	r2,-16(fp)
 20190d4:	10c00a04 	addi	r3,r2,40
 20190d8:	e0bffd17 	ldw	r2,-12(fp)
 20190dc:	10800217 	ldw	r2,8(r2)
 20190e0:	100f883a 	mov	r7,r2
 20190e4:	e1bfff17 	ldw	r6,-4(fp)
 20190e8:	e17ffe17 	ldw	r5,-8(fp)
 20190ec:	1809883a 	mov	r4,r3
 20190f0:	20198540 	call	2019854 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20190f4:	e037883a 	mov	sp,fp
 20190f8:	dfc00117 	ldw	ra,4(sp)
 20190fc:	df000017 	ldw	fp,0(sp)
 2019100:	dec00204 	addi	sp,sp,8
 2019104:	f800283a 	ret

02019108 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2019108:	defffa04 	addi	sp,sp,-24
 201910c:	dfc00515 	stw	ra,20(sp)
 2019110:	df000415 	stw	fp,16(sp)
 2019114:	df000404 	addi	fp,sp,16
 2019118:	e13ffd15 	stw	r4,-12(fp)
 201911c:	e17ffe15 	stw	r5,-8(fp)
 2019120:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2019124:	e0bffd17 	ldw	r2,-12(fp)
 2019128:	10800017 	ldw	r2,0(r2)
 201912c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2019130:	e0bffc17 	ldw	r2,-16(fp)
 2019134:	10c00a04 	addi	r3,r2,40
 2019138:	e0bffd17 	ldw	r2,-12(fp)
 201913c:	10800217 	ldw	r2,8(r2)
 2019140:	100f883a 	mov	r7,r2
 2019144:	e1bfff17 	ldw	r6,-4(fp)
 2019148:	e17ffe17 	ldw	r5,-8(fp)
 201914c:	1809883a 	mov	r4,r3
 2019150:	2019b100 	call	2019b10 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2019154:	e037883a 	mov	sp,fp
 2019158:	dfc00117 	ldw	ra,4(sp)
 201915c:	df000017 	ldw	fp,0(sp)
 2019160:	dec00204 	addi	sp,sp,8
 2019164:	f800283a 	ret

02019168 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2019168:	defffc04 	addi	sp,sp,-16
 201916c:	dfc00315 	stw	ra,12(sp)
 2019170:	df000215 	stw	fp,8(sp)
 2019174:	df000204 	addi	fp,sp,8
 2019178:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201917c:	e0bfff17 	ldw	r2,-4(fp)
 2019180:	10800017 	ldw	r2,0(r2)
 2019184:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2019188:	e0bffe17 	ldw	r2,-8(fp)
 201918c:	10c00a04 	addi	r3,r2,40
 2019190:	e0bfff17 	ldw	r2,-4(fp)
 2019194:	10800217 	ldw	r2,8(r2)
 2019198:	100b883a 	mov	r5,r2
 201919c:	1809883a 	mov	r4,r3
 20191a0:	20196fc0 	call	20196fc <altera_avalon_jtag_uart_close>
}
 20191a4:	e037883a 	mov	sp,fp
 20191a8:	dfc00117 	ldw	ra,4(sp)
 20191ac:	df000017 	ldw	fp,0(sp)
 20191b0:	dec00204 	addi	sp,sp,8
 20191b4:	f800283a 	ret

020191b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20191b8:	defffa04 	addi	sp,sp,-24
 20191bc:	dfc00515 	stw	ra,20(sp)
 20191c0:	df000415 	stw	fp,16(sp)
 20191c4:	df000404 	addi	fp,sp,16
 20191c8:	e13ffd15 	stw	r4,-12(fp)
 20191cc:	e17ffe15 	stw	r5,-8(fp)
 20191d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20191d4:	e0bffd17 	ldw	r2,-12(fp)
 20191d8:	10800017 	ldw	r2,0(r2)
 20191dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20191e0:	e0bffc17 	ldw	r2,-16(fp)
 20191e4:	10800a04 	addi	r2,r2,40
 20191e8:	e1bfff17 	ldw	r6,-4(fp)
 20191ec:	e17ffe17 	ldw	r5,-8(fp)
 20191f0:	1009883a 	mov	r4,r2
 20191f4:	20197640 	call	2019764 <altera_avalon_jtag_uart_ioctl>
}
 20191f8:	e037883a 	mov	sp,fp
 20191fc:	dfc00117 	ldw	ra,4(sp)
 2019200:	df000017 	ldw	fp,0(sp)
 2019204:	dec00204 	addi	sp,sp,8
 2019208:	f800283a 	ret

0201920c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201920c:	defff104 	addi	sp,sp,-60
 2019210:	dfc00e15 	stw	ra,56(sp)
 2019214:	df000d15 	stw	fp,52(sp)
 2019218:	df000d04 	addi	fp,sp,52
 201921c:	e13ff915 	stw	r4,-28(fp)
 2019220:	e17ffa15 	stw	r5,-24(fp)
 2019224:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 2019228:	e0bff917 	ldw	r2,-28(fp)
 201922c:	10800c04 	addi	r2,r2,48
 2019230:	e0bff415 	stw	r2,-48(fp)
 2019234:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 2019238:	e0bff80b 	ldhu	r2,-32(fp)
 201923c:	e0fff884 	addi	r3,fp,-30
 2019240:	180b883a 	mov	r5,r3
 2019244:	1009883a 	mov	r4,r2
 2019248:	20131c80 	call	20131c8 <OSFlagCreate>
 201924c:	1007883a 	mov	r3,r2
 2019250:	e0bff417 	ldw	r2,-48(fp)
 2019254:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 2019258:	e0bff917 	ldw	r2,-28(fp)
 201925c:	10800a04 	addi	r2,r2,40
 2019260:	e0bff515 	stw	r2,-44(fp)
 2019264:	00800044 	movi	r2,1
 2019268:	e0bff78d 	sth	r2,-34(fp)
 201926c:	e0bff78b 	ldhu	r2,-34(fp)
 2019270:	1009883a 	mov	r4,r2
 2019274:	20169b00 	call	20169b0 <OSSemCreate>
 2019278:	1007883a 	mov	r3,r2
 201927c:	e0bff517 	ldw	r2,-44(fp)
 2019280:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2019284:	e0bff917 	ldw	r2,-28(fp)
 2019288:	10800b04 	addi	r2,r2,44
 201928c:	e0bff615 	stw	r2,-40(fp)
 2019290:	00800044 	movi	r2,1
 2019294:	e0bff70d 	sth	r2,-36(fp)
 2019298:	e0bff70b 	ldhu	r2,-36(fp)
 201929c:	1009883a 	mov	r4,r2
 20192a0:	20169b00 	call	20169b0 <OSSemCreate>
 20192a4:	1007883a 	mov	r3,r2
 20192a8:	e0bff617 	ldw	r2,-40(fp)
 20192ac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20192b0:	e0bff917 	ldw	r2,-28(fp)
 20192b4:	00c00044 	movi	r3,1
 20192b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20192bc:	e0bff917 	ldw	r2,-28(fp)
 20192c0:	10800017 	ldw	r2,0(r2)
 20192c4:	10800104 	addi	r2,r2,4
 20192c8:	1007883a 	mov	r3,r2
 20192cc:	e0bff917 	ldw	r2,-28(fp)
 20192d0:	10800817 	ldw	r2,32(r2)
 20192d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20192d8:	e0bffa17 	ldw	r2,-24(fp)
 20192dc:	e0fffb17 	ldw	r3,-20(fp)
 20192e0:	d8000015 	stw	zero,0(sp)
 20192e4:	e1fff917 	ldw	r7,-28(fp)
 20192e8:	018080b4 	movhi	r6,514
 20192ec:	31a4d504 	addi	r6,r6,-27820
 20192f0:	180b883a 	mov	r5,r3
 20192f4:	1009883a 	mov	r4,r2
 20192f8:	201a1d40 	call	201a1d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20192fc:	e0bff917 	ldw	r2,-28(fp)
 2019300:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2019304:	e0bff917 	ldw	r2,-28(fp)
 2019308:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201930c:	d0e73a17 	ldw	r3,-25368(gp)
 2019310:	e1fff917 	ldw	r7,-28(fp)
 2019314:	018080b4 	movhi	r6,514
 2019318:	31a57e04 	addi	r6,r6,-27144
 201931c:	180b883a 	mov	r5,r3
 2019320:	1009883a 	mov	r4,r2
 2019324:	2019ec80 	call	2019ec8 <alt_alarm_start>
 2019328:	1000040e 	bge	r2,zero,201933c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201932c:	e0fff917 	ldw	r3,-28(fp)
 2019330:	00a00034 	movhi	r2,32768
 2019334:	10bfffc4 	addi	r2,r2,-1
 2019338:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201933c:	0001883a 	nop
 2019340:	e037883a 	mov	sp,fp
 2019344:	dfc00117 	ldw	ra,4(sp)
 2019348:	df000017 	ldw	fp,0(sp)
 201934c:	dec00204 	addi	sp,sp,8
 2019350:	f800283a 	ret

02019354 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2019354:	defff204 	addi	sp,sp,-56
 2019358:	dfc00d15 	stw	ra,52(sp)
 201935c:	df000c15 	stw	fp,48(sp)
 2019360:	df000c04 	addi	fp,sp,48
 2019364:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2019368:	e0bfff17 	ldw	r2,-4(fp)
 201936c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 2019370:	e0bff617 	ldw	r2,-40(fp)
 2019374:	10800017 	ldw	r2,0(r2)
 2019378:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201937c:	e0bff717 	ldw	r2,-36(fp)
 2019380:	10800104 	addi	r2,r2,4
 2019384:	10800037 	ldwio	r2,0(r2)
 2019388:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201938c:	e0bff817 	ldw	r2,-32(fp)
 2019390:	1080c00c 	andi	r2,r2,768
 2019394:	10009126 	beq	r2,zero,20195dc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2019398:	e0bff817 	ldw	r2,-32(fp)
 201939c:	1080400c 	andi	r2,r2,256
 20193a0:	10004726 	beq	r2,zero,20194c0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20193a4:	00800074 	movhi	r2,1
 20193a8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20193ac:	e0bff617 	ldw	r2,-40(fp)
 20193b0:	10800d17 	ldw	r2,52(r2)
 20193b4:	10800044 	addi	r2,r2,1
 20193b8:	1081ffcc 	andi	r2,r2,2047
 20193bc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 20193c0:	e0bff617 	ldw	r2,-40(fp)
 20193c4:	10c00e17 	ldw	r3,56(r2)
 20193c8:	e0bff917 	ldw	r2,-28(fp)
 20193cc:	18802726 	beq	r3,r2,201946c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20193d0:	e0bff717 	ldw	r2,-36(fp)
 20193d4:	10800037 	ldwio	r2,0(r2)
 20193d8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20193dc:	e0bff417 	ldw	r2,-48(fp)
 20193e0:	10a0000c 	andi	r2,r2,32768
 20193e4:	10002326 	beq	r2,zero,2019474 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20193e8:	e0bff617 	ldw	r2,-40(fp)
 20193ec:	10800d17 	ldw	r2,52(r2)
 20193f0:	e0fff417 	ldw	r3,-48(fp)
 20193f4:	1809883a 	mov	r4,r3
 20193f8:	e0fff617 	ldw	r3,-40(fp)
 20193fc:	1885883a 	add	r2,r3,r2
 2019400:	10801104 	addi	r2,r2,68
 2019404:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019408:	e0bff617 	ldw	r2,-40(fp)
 201940c:	10800d17 	ldw	r2,52(r2)
 2019410:	10800044 	addi	r2,r2,1
 2019414:	10c1ffcc 	andi	r3,r2,2047
 2019418:	e0bff617 	ldw	r2,-40(fp)
 201941c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 2019420:	e0bff617 	ldw	r2,-40(fp)
 2019424:	10800c17 	ldw	r2,48(r2)
 2019428:	e0bffb15 	stw	r2,-20(fp)
 201942c:	00800044 	movi	r2,1
 2019430:	e0bffc0d 	sth	r2,-16(fp)
 2019434:	00800044 	movi	r2,1
 2019438:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201943c:	d0a72543 	ldbu	r2,-25451(gp)
 2019440:	10803fcc 	andi	r2,r2,255
 2019444:	103fd926 	beq	r2,zero,20193ac <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 2019448:	e0bffc0b 	ldhu	r2,-16(fp)
 201944c:	e0fffc83 	ldbu	r3,-14(fp)
 2019450:	e13ffdc4 	addi	r4,fp,-9
 2019454:	200f883a 	mov	r7,r4
 2019458:	180d883a 	mov	r6,r3
 201945c:	100b883a 	mov	r5,r2
 2019460:	e13ffb17 	ldw	r4,-20(fp)
 2019464:	2013da40 	call	2013da4 <OSFlagPost>
      }
 2019468:	003fd006 	br	20193ac <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201946c:	0001883a 	nop
 2019470:	00000106 	br	2019478 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2019474:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2019478:	e0bff417 	ldw	r2,-48(fp)
 201947c:	10bfffec 	andhi	r2,r2,65535
 2019480:	10000f26 	beq	r2,zero,20194c0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2019484:	e0bff617 	ldw	r2,-40(fp)
 2019488:	10c00817 	ldw	r3,32(r2)
 201948c:	00bfff84 	movi	r2,-2
 2019490:	1886703a 	and	r3,r3,r2
 2019494:	e0bff617 	ldw	r2,-40(fp)
 2019498:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201949c:	e0bff717 	ldw	r2,-36(fp)
 20194a0:	10800104 	addi	r2,r2,4
 20194a4:	1007883a 	mov	r3,r2
 20194a8:	e0bff617 	ldw	r2,-40(fp)
 20194ac:	10800817 	ldw	r2,32(r2)
 20194b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20194b4:	e0bff717 	ldw	r2,-36(fp)
 20194b8:	10800104 	addi	r2,r2,4
 20194bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20194c0:	e0bff817 	ldw	r2,-32(fp)
 20194c4:	1080800c 	andi	r2,r2,512
 20194c8:	103fac26 	beq	r2,zero,201937c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20194cc:	e0bff817 	ldw	r2,-32(fp)
 20194d0:	1004d43a 	srli	r2,r2,16
 20194d4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20194d8:	00002606 	br	2019574 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20194dc:	e0bff717 	ldw	r2,-36(fp)
 20194e0:	e0fff617 	ldw	r3,-40(fp)
 20194e4:	18c01017 	ldw	r3,64(r3)
 20194e8:	e13ff617 	ldw	r4,-40(fp)
 20194ec:	20c7883a 	add	r3,r4,r3
 20194f0:	18c21104 	addi	r3,r3,2116
 20194f4:	18c00003 	ldbu	r3,0(r3)
 20194f8:	18c03fcc 	andi	r3,r3,255
 20194fc:	18c0201c 	xori	r3,r3,128
 2019500:	18ffe004 	addi	r3,r3,-128
 2019504:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019508:	e0bff617 	ldw	r2,-40(fp)
 201950c:	10801017 	ldw	r2,64(r2)
 2019510:	10800044 	addi	r2,r2,1
 2019514:	10c1ffcc 	andi	r3,r2,2047
 2019518:	e0bff617 	ldw	r2,-40(fp)
 201951c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 2019520:	e0bff617 	ldw	r2,-40(fp)
 2019524:	10800c17 	ldw	r2,48(r2)
 2019528:	e0bffa15 	stw	r2,-24(fp)
 201952c:	00800084 	movi	r2,2
 2019530:	e0bffd0d 	sth	r2,-12(fp)
 2019534:	00800044 	movi	r2,1
 2019538:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201953c:	d0a72543 	ldbu	r2,-25451(gp)
 2019540:	10803fcc 	andi	r2,r2,255
 2019544:	10000826 	beq	r2,zero,2019568 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 2019548:	e0bffd0b 	ldhu	r2,-12(fp)
 201954c:	e0fffd83 	ldbu	r3,-10(fp)
 2019550:	e13ffe04 	addi	r4,fp,-8
 2019554:	200f883a 	mov	r7,r4
 2019558:	180d883a 	mov	r6,r3
 201955c:	100b883a 	mov	r5,r2
 2019560:	e13ffa17 	ldw	r4,-24(fp)
 2019564:	2013da40 	call	2013da4 <OSFlagPost>

        space--;
 2019568:	e0bff517 	ldw	r2,-44(fp)
 201956c:	10bfffc4 	addi	r2,r2,-1
 2019570:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2019574:	e0bff517 	ldw	r2,-44(fp)
 2019578:	10000526 	beq	r2,zero,2019590 <altera_avalon_jtag_uart_irq+0x23c>
 201957c:	e0bff617 	ldw	r2,-40(fp)
 2019580:	10c01017 	ldw	r3,64(r2)
 2019584:	e0bff617 	ldw	r2,-40(fp)
 2019588:	10800f17 	ldw	r2,60(r2)
 201958c:	18bfd31e 	bne	r3,r2,20194dc <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2019590:	e0bff517 	ldw	r2,-44(fp)
 2019594:	103f7926 	beq	r2,zero,201937c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2019598:	e0bff617 	ldw	r2,-40(fp)
 201959c:	10c00817 	ldw	r3,32(r2)
 20195a0:	00bfff44 	movi	r2,-3
 20195a4:	1886703a 	and	r3,r3,r2
 20195a8:	e0bff617 	ldw	r2,-40(fp)
 20195ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20195b0:	e0bff617 	ldw	r2,-40(fp)
 20195b4:	10800017 	ldw	r2,0(r2)
 20195b8:	10800104 	addi	r2,r2,4
 20195bc:	1007883a 	mov	r3,r2
 20195c0:	e0bff617 	ldw	r2,-40(fp)
 20195c4:	10800817 	ldw	r2,32(r2)
 20195c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20195cc:	e0bff717 	ldw	r2,-36(fp)
 20195d0:	10800104 	addi	r2,r2,4
 20195d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20195d8:	003f6806 	br	201937c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 20195dc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 20195e0:	0001883a 	nop
 20195e4:	e037883a 	mov	sp,fp
 20195e8:	dfc00117 	ldw	ra,4(sp)
 20195ec:	df000017 	ldw	fp,0(sp)
 20195f0:	dec00204 	addi	sp,sp,8
 20195f4:	f800283a 	ret

020195f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20195f8:	defff904 	addi	sp,sp,-28
 20195fc:	dfc00615 	stw	ra,24(sp)
 2019600:	df000515 	stw	fp,20(sp)
 2019604:	df000504 	addi	fp,sp,20
 2019608:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201960c:	e0bfff17 	ldw	r2,-4(fp)
 2019610:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2019614:	e0bffb17 	ldw	r2,-20(fp)
 2019618:	10800017 	ldw	r2,0(r2)
 201961c:	10800104 	addi	r2,r2,4
 2019620:	10800037 	ldwio	r2,0(r2)
 2019624:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2019628:	e0bffc17 	ldw	r2,-16(fp)
 201962c:	1081000c 	andi	r2,r2,1024
 2019630:	10000b26 	beq	r2,zero,2019660 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2019634:	e0bffb17 	ldw	r2,-20(fp)
 2019638:	10800017 	ldw	r2,0(r2)
 201963c:	10800104 	addi	r2,r2,4
 2019640:	1007883a 	mov	r3,r2
 2019644:	e0bffb17 	ldw	r2,-20(fp)
 2019648:	10800817 	ldw	r2,32(r2)
 201964c:	10810014 	ori	r2,r2,1024
 2019650:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2019654:	e0bffb17 	ldw	r2,-20(fp)
 2019658:	10000915 	stw	zero,36(r2)
 201965c:	00002106 	br	20196e4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2019660:	e0bffb17 	ldw	r2,-20(fp)
 2019664:	10c00917 	ldw	r3,36(r2)
 2019668:	00a00034 	movhi	r2,32768
 201966c:	10bfff04 	addi	r2,r2,-4
 2019670:	10c01c36 	bltu	r2,r3,20196e4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 2019674:	e0bffb17 	ldw	r2,-20(fp)
 2019678:	10800917 	ldw	r2,36(r2)
 201967c:	10c00044 	addi	r3,r2,1
 2019680:	e0bffb17 	ldw	r2,-20(fp)
 2019684:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 2019688:	e0bffb17 	ldw	r2,-20(fp)
 201968c:	10c00917 	ldw	r3,36(r2)
 2019690:	e0bffb17 	ldw	r2,-20(fp)
 2019694:	10800117 	ldw	r2,4(r2)
 2019698:	18801236 	bltu	r3,r2,20196e4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201969c:	e0bffb17 	ldw	r2,-20(fp)
 20196a0:	10800c17 	ldw	r2,48(r2)
 20196a4:	e0bffd15 	stw	r2,-12(fp)
 20196a8:	00800104 	movi	r2,4
 20196ac:	e0bffe0d 	sth	r2,-8(fp)
 20196b0:	00800044 	movi	r2,1
 20196b4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 20196b8:	d0a72543 	ldbu	r2,-25451(gp)
 20196bc:	10803fcc 	andi	r2,r2,255
 20196c0:	10000826 	beq	r2,zero,20196e4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 20196c4:	e0bffe0b 	ldhu	r2,-8(fp)
 20196c8:	e0fffe83 	ldbu	r3,-6(fp)
 20196cc:	e13ffec4 	addi	r4,fp,-5
 20196d0:	200f883a 	mov	r7,r4
 20196d4:	180d883a 	mov	r6,r3
 20196d8:	100b883a 	mov	r5,r2
 20196dc:	e13ffd17 	ldw	r4,-12(fp)
 20196e0:	2013da40 	call	2013da4 <OSFlagPost>
 20196e4:	d0a73a17 	ldw	r2,-25368(gp)
    }
  }

  return alt_ticks_per_second();
}
 20196e8:	e037883a 	mov	sp,fp
 20196ec:	dfc00117 	ldw	ra,4(sp)
 20196f0:	df000017 	ldw	fp,0(sp)
 20196f4:	dec00204 	addi	sp,sp,8
 20196f8:	f800283a 	ret

020196fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 20196fc:	defffd04 	addi	sp,sp,-12
 2019700:	df000215 	stw	fp,8(sp)
 2019704:	df000204 	addi	fp,sp,8
 2019708:	e13ffe15 	stw	r4,-8(fp)
 201970c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2019710:	00000506 	br	2019728 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2019714:	e0bfff17 	ldw	r2,-4(fp)
 2019718:	1090000c 	andi	r2,r2,16384
 201971c:	10000226 	beq	r2,zero,2019728 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2019720:	00bffd44 	movi	r2,-11
 2019724:	00000b06 	br	2019754 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2019728:	e0bffe17 	ldw	r2,-8(fp)
 201972c:	10c01017 	ldw	r3,64(r2)
 2019730:	e0bffe17 	ldw	r2,-8(fp)
 2019734:	10800f17 	ldw	r2,60(r2)
 2019738:	18800526 	beq	r3,r2,2019750 <altera_avalon_jtag_uart_close+0x54>
 201973c:	e0bffe17 	ldw	r2,-8(fp)
 2019740:	10c00917 	ldw	r3,36(r2)
 2019744:	e0bffe17 	ldw	r2,-8(fp)
 2019748:	10800117 	ldw	r2,4(r2)
 201974c:	18bff136 	bltu	r3,r2,2019714 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2019750:	0005883a 	mov	r2,zero
}
 2019754:	e037883a 	mov	sp,fp
 2019758:	df000017 	ldw	fp,0(sp)
 201975c:	dec00104 	addi	sp,sp,4
 2019760:	f800283a 	ret

02019764 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2019764:	defffa04 	addi	sp,sp,-24
 2019768:	df000515 	stw	fp,20(sp)
 201976c:	df000504 	addi	fp,sp,20
 2019770:	e13ffd15 	stw	r4,-12(fp)
 2019774:	e17ffe15 	stw	r5,-8(fp)
 2019778:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201977c:	00bff9c4 	movi	r2,-25
 2019780:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2019784:	e0bffe17 	ldw	r2,-8(fp)
 2019788:	10da8060 	cmpeqi	r3,r2,27137
 201978c:	1800031e 	bne	r3,zero,201979c <altera_avalon_jtag_uart_ioctl+0x38>
 2019790:	109a80a0 	cmpeqi	r2,r2,27138
 2019794:	1000181e 	bne	r2,zero,20197f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2019798:	00002906 	br	2019840 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201979c:	e0bffd17 	ldw	r2,-12(fp)
 20197a0:	10c00117 	ldw	r3,4(r2)
 20197a4:	00a00034 	movhi	r2,32768
 20197a8:	10bfffc4 	addi	r2,r2,-1
 20197ac:	18802126 	beq	r3,r2,2019834 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 20197b0:	e0bfff17 	ldw	r2,-4(fp)
 20197b4:	10800017 	ldw	r2,0(r2)
 20197b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20197bc:	e0bffc17 	ldw	r2,-16(fp)
 20197c0:	10800090 	cmplti	r2,r2,2
 20197c4:	1000061e 	bne	r2,zero,20197e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 20197c8:	e0fffc17 	ldw	r3,-16(fp)
 20197cc:	00a00034 	movhi	r2,32768
 20197d0:	10bfffc4 	addi	r2,r2,-1
 20197d4:	18800226 	beq	r3,r2,20197e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 20197d8:	e0bffc17 	ldw	r2,-16(fp)
 20197dc:	00000206 	br	20197e8 <altera_avalon_jtag_uart_ioctl+0x84>
 20197e0:	00a00034 	movhi	r2,32768
 20197e4:	10bfff84 	addi	r2,r2,-2
 20197e8:	e0fffd17 	ldw	r3,-12(fp)
 20197ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 20197f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20197f4:	00000f06 	br	2019834 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 20197f8:	e0bffd17 	ldw	r2,-12(fp)
 20197fc:	10c00117 	ldw	r3,4(r2)
 2019800:	00a00034 	movhi	r2,32768
 2019804:	10bfffc4 	addi	r2,r2,-1
 2019808:	18800c26 	beq	r3,r2,201983c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201980c:	e0bffd17 	ldw	r2,-12(fp)
 2019810:	10c00917 	ldw	r3,36(r2)
 2019814:	e0bffd17 	ldw	r2,-12(fp)
 2019818:	10800117 	ldw	r2,4(r2)
 201981c:	1885803a 	cmpltu	r2,r3,r2
 2019820:	10c03fcc 	andi	r3,r2,255
 2019824:	e0bfff17 	ldw	r2,-4(fp)
 2019828:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201982c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2019830:	00000206 	br	201983c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2019834:	0001883a 	nop
 2019838:	00000106 	br	2019840 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201983c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2019840:	e0bffb17 	ldw	r2,-20(fp)
}
 2019844:	e037883a 	mov	sp,fp
 2019848:	df000017 	ldw	fp,0(sp)
 201984c:	dec00104 	addi	sp,sp,4
 2019850:	f800283a 	ret

02019854 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2019854:	deffed04 	addi	sp,sp,-76
 2019858:	dfc01215 	stw	ra,72(sp)
 201985c:	df001115 	stw	fp,68(sp)
 2019860:	df001104 	addi	fp,sp,68
 2019864:	e13ffc15 	stw	r4,-16(fp)
 2019868:	e17ffd15 	stw	r5,-12(fp)
 201986c:	e1bffe15 	stw	r6,-8(fp)
 2019870:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2019874:	e0bffd17 	ldw	r2,-12(fp)
 2019878:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201987c:	e0bffc17 	ldw	r2,-16(fp)
 2019880:	10800a17 	ldw	r2,40(r2)
 2019884:	e0bff815 	stw	r2,-32(fp)
 2019888:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201988c:	e0bff90b 	ldhu	r2,-28(fp)
 2019890:	e0fffb04 	addi	r3,fp,-20
 2019894:	180d883a 	mov	r6,r3
 2019898:	100b883a 	mov	r5,r2
 201989c:	e13ff817 	ldw	r4,-32(fp)
 20198a0:	2016cc80 	call	2016cc8 <OSSemPend>

  while (space > 0)
 20198a4:	00006106 	br	2019a2c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20198a8:	e0bffc17 	ldw	r2,-16(fp)
 20198ac:	10800d17 	ldw	r2,52(r2)
 20198b0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 20198b4:	e0bffc17 	ldw	r2,-16(fp)
 20198b8:	10800e17 	ldw	r2,56(r2)
 20198bc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 20198c0:	e0fff317 	ldw	r3,-52(fp)
 20198c4:	e0bff417 	ldw	r2,-48(fp)
 20198c8:	18800536 	bltu	r3,r2,20198e0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 20198cc:	e0fff317 	ldw	r3,-52(fp)
 20198d0:	e0bff417 	ldw	r2,-48(fp)
 20198d4:	1885c83a 	sub	r2,r3,r2
 20198d8:	e0bff115 	stw	r2,-60(fp)
 20198dc:	00000406 	br	20198f0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20198e0:	00c20004 	movi	r3,2048
 20198e4:	e0bff417 	ldw	r2,-48(fp)
 20198e8:	1885c83a 	sub	r2,r3,r2
 20198ec:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20198f0:	e0bff117 	ldw	r2,-60(fp)
 20198f4:	10001e26 	beq	r2,zero,2019970 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 20198f8:	e0fffe17 	ldw	r3,-8(fp)
 20198fc:	e0bff117 	ldw	r2,-60(fp)
 2019900:	1880022e 	bgeu	r3,r2,201990c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 2019904:	e0bffe17 	ldw	r2,-8(fp)
 2019908:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201990c:	e0bffc17 	ldw	r2,-16(fp)
 2019910:	10c01104 	addi	r3,r2,68
 2019914:	e0bff417 	ldw	r2,-48(fp)
 2019918:	1885883a 	add	r2,r3,r2
 201991c:	e1bff117 	ldw	r6,-60(fp)
 2019920:	100b883a 	mov	r5,r2
 2019924:	e13ff017 	ldw	r4,-64(fp)
 2019928:	200a28c0 	call	200a28c <memcpy>
      ptr   += n;
 201992c:	e0fff017 	ldw	r3,-64(fp)
 2019930:	e0bff117 	ldw	r2,-60(fp)
 2019934:	1885883a 	add	r2,r3,r2
 2019938:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201993c:	e0fffe17 	ldw	r3,-8(fp)
 2019940:	e0bff117 	ldw	r2,-60(fp)
 2019944:	1885c83a 	sub	r2,r3,r2
 2019948:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201994c:	e0fff417 	ldw	r3,-48(fp)
 2019950:	e0bff117 	ldw	r2,-60(fp)
 2019954:	1885883a 	add	r2,r3,r2
 2019958:	10c1ffcc 	andi	r3,r2,2047
 201995c:	e0bffc17 	ldw	r2,-16(fp)
 2019960:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 2019964:	e0bffe17 	ldw	r2,-8(fp)
 2019968:	00bfcf16 	blt	zero,r2,20198a8 <altera_avalon_jtag_uart_read+0x54>
 201996c:	00000106 	br	2019974 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2019970:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2019974:	e0fff017 	ldw	r3,-64(fp)
 2019978:	e0bffd17 	ldw	r2,-12(fp)
 201997c:	18802e1e 	bne	r3,r2,2019a38 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2019980:	e0bfff17 	ldw	r2,-4(fp)
 2019984:	1090000c 	andi	r2,r2,16384
 2019988:	10002d1e 	bne	r2,zero,2019a40 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201998c:	d0a72543 	ldbu	r2,-25451(gp)
 2019990:	10803fcc 	andi	r2,r2,255
 2019994:	10800058 	cmpnei	r2,r2,1
 2019998:	1000161e 	bne	r2,zero,20199f4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201999c:	e0bffc17 	ldw	r2,-16(fp)
 20199a0:	10800c17 	ldw	r2,48(r2)
 20199a4:	e0bff215 	stw	r2,-56(fp)
 20199a8:	00800144 	movi	r2,5
 20199ac:	e0bff98d 	sth	r2,-26(fp)
 20199b0:	00bfe0c4 	movi	r2,-125
 20199b4:	e0bffa05 	stb	r2,-24(fp)
 20199b8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 20199bc:	d0a72543 	ldbu	r2,-25451(gp)
 20199c0:	10803fcc 	andi	r2,r2,255
 20199c4:	10001526 	beq	r2,zero,2019a1c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 20199c8:	e0fff98b 	ldhu	r3,-26(fp)
 20199cc:	e13ffa03 	ldbu	r4,-24(fp)
 20199d0:	e17ffa8b 	ldhu	r5,-22(fp)
 20199d4:	e0bffb44 	addi	r2,fp,-19
 20199d8:	d8800015 	stw	r2,0(sp)
 20199dc:	280f883a 	mov	r7,r5
 20199e0:	200d883a 	mov	r6,r4
 20199e4:	180b883a 	mov	r5,r3
 20199e8:	e13ff217 	ldw	r4,-56(fp)
 20199ec:	201378c0 	call	201378c <OSFlagPend>
 20199f0:	00000a06 	br	2019a1c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20199f4:	0001883a 	nop
 20199f8:	e0bffc17 	ldw	r2,-16(fp)
 20199fc:	10c00d17 	ldw	r3,52(r2)
 2019a00:	e0bff317 	ldw	r2,-52(fp)
 2019a04:	1880051e 	bne	r3,r2,2019a1c <altera_avalon_jtag_uart_read+0x1c8>
 2019a08:	e0bffc17 	ldw	r2,-16(fp)
 2019a0c:	10c00917 	ldw	r3,36(r2)
 2019a10:	e0bffc17 	ldw	r2,-16(fp)
 2019a14:	10800117 	ldw	r2,4(r2)
 2019a18:	18bff736 	bltu	r3,r2,20199f8 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2019a1c:	e0bffc17 	ldw	r2,-16(fp)
 2019a20:	10c00d17 	ldw	r3,52(r2)
 2019a24:	e0bff317 	ldw	r2,-52(fp)
 2019a28:	18800726 	beq	r3,r2,2019a48 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2019a2c:	e0bffe17 	ldw	r2,-8(fp)
 2019a30:	00bf9d16 	blt	zero,r2,20198a8 <altera_avalon_jtag_uart_read+0x54>
 2019a34:	00000506 	br	2019a4c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2019a38:	0001883a 	nop
 2019a3c:	00000306 	br	2019a4c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2019a40:	0001883a 	nop
 2019a44:	00000106 	br	2019a4c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2019a48:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2019a4c:	e0bffc17 	ldw	r2,-16(fp)
 2019a50:	10800a17 	ldw	r2,40(r2)
 2019a54:	1009883a 	mov	r4,r2
 2019a58:	20170400 	call	2017040 <OSSemPost>

  if (ptr != buffer)
 2019a5c:	e0fff017 	ldw	r3,-64(fp)
 2019a60:	e0bffd17 	ldw	r2,-12(fp)
 2019a64:	18801826 	beq	r3,r2,2019ac8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019a68:	0005303a 	rdctl	r2,status
 2019a6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019a70:	e0fff717 	ldw	r3,-36(fp)
 2019a74:	00bfff84 	movi	r2,-2
 2019a78:	1884703a 	and	r2,r3,r2
 2019a7c:	1001703a 	wrctl	status,r2
  
  return context;
 2019a80:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2019a84:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2019a88:	e0bffc17 	ldw	r2,-16(fp)
 2019a8c:	10800817 	ldw	r2,32(r2)
 2019a90:	10c00054 	ori	r3,r2,1
 2019a94:	e0bffc17 	ldw	r2,-16(fp)
 2019a98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2019a9c:	e0bffc17 	ldw	r2,-16(fp)
 2019aa0:	10800017 	ldw	r2,0(r2)
 2019aa4:	10800104 	addi	r2,r2,4
 2019aa8:	1007883a 	mov	r3,r2
 2019aac:	e0bffc17 	ldw	r2,-16(fp)
 2019ab0:	10800817 	ldw	r2,32(r2)
 2019ab4:	18800035 	stwio	r2,0(r3)
 2019ab8:	e0bff617 	ldw	r2,-40(fp)
 2019abc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019ac0:	e0bff517 	ldw	r2,-44(fp)
 2019ac4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2019ac8:	e0fff017 	ldw	r3,-64(fp)
 2019acc:	e0bffd17 	ldw	r2,-12(fp)
 2019ad0:	18800426 	beq	r3,r2,2019ae4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 2019ad4:	e0fff017 	ldw	r3,-64(fp)
 2019ad8:	e0bffd17 	ldw	r2,-12(fp)
 2019adc:	1885c83a 	sub	r2,r3,r2
 2019ae0:	00000606 	br	2019afc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 2019ae4:	e0bfff17 	ldw	r2,-4(fp)
 2019ae8:	1090000c 	andi	r2,r2,16384
 2019aec:	10000226 	beq	r2,zero,2019af8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 2019af0:	00bffd44 	movi	r2,-11
 2019af4:	00000106 	br	2019afc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 2019af8:	00bffec4 	movi	r2,-5
}
 2019afc:	e037883a 	mov	sp,fp
 2019b00:	dfc00117 	ldw	ra,4(sp)
 2019b04:	df000017 	ldw	fp,0(sp)
 2019b08:	dec00204 	addi	sp,sp,8
 2019b0c:	f800283a 	ret

02019b10 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2019b10:	deffed04 	addi	sp,sp,-76
 2019b14:	dfc01215 	stw	ra,72(sp)
 2019b18:	df001115 	stw	fp,68(sp)
 2019b1c:	df001104 	addi	fp,sp,68
 2019b20:	e13ffc15 	stw	r4,-16(fp)
 2019b24:	e17ffd15 	stw	r5,-12(fp)
 2019b28:	e1bffe15 	stw	r6,-8(fp)
 2019b2c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2019b30:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2019b34:	e0bffd17 	ldw	r2,-12(fp)
 2019b38:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2019b3c:	e0bffc17 	ldw	r2,-16(fp)
 2019b40:	10800b17 	ldw	r2,44(r2)
 2019b44:	e0bff815 	stw	r2,-32(fp)
 2019b48:	e03ff90d 	sth	zero,-28(fp)
 2019b4c:	e0bff90b 	ldhu	r2,-28(fp)
 2019b50:	e0fffb44 	addi	r3,fp,-19
 2019b54:	180d883a 	mov	r6,r3
 2019b58:	100b883a 	mov	r5,r2
 2019b5c:	e13ff817 	ldw	r4,-32(fp)
 2019b60:	2016cc80 	call	2016cc8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2019b64:	00003706 	br	2019c44 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2019b68:	e0bffc17 	ldw	r2,-16(fp)
 2019b6c:	10800f17 	ldw	r2,60(r2)
 2019b70:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 2019b74:	e0bffc17 	ldw	r2,-16(fp)
 2019b78:	10801017 	ldw	r2,64(r2)
 2019b7c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 2019b80:	e0fff417 	ldw	r3,-48(fp)
 2019b84:	e0bff017 	ldw	r2,-64(fp)
 2019b88:	1880062e 	bgeu	r3,r2,2019ba4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 2019b8c:	e0fff017 	ldw	r3,-64(fp)
 2019b90:	e0bff417 	ldw	r2,-48(fp)
 2019b94:	1885c83a 	sub	r2,r3,r2
 2019b98:	10bfffc4 	addi	r2,r2,-1
 2019b9c:	e0bff115 	stw	r2,-60(fp)
 2019ba0:	00000b06 	br	2019bd0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 2019ba4:	e0bff017 	ldw	r2,-64(fp)
 2019ba8:	10000526 	beq	r2,zero,2019bc0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2019bac:	00c20004 	movi	r3,2048
 2019bb0:	e0bff417 	ldw	r2,-48(fp)
 2019bb4:	1885c83a 	sub	r2,r3,r2
 2019bb8:	e0bff115 	stw	r2,-60(fp)
 2019bbc:	00000406 	br	2019bd0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2019bc0:	00c1ffc4 	movi	r3,2047
 2019bc4:	e0bff417 	ldw	r2,-48(fp)
 2019bc8:	1885c83a 	sub	r2,r3,r2
 2019bcc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2019bd0:	e0bff117 	ldw	r2,-60(fp)
 2019bd4:	10001e26 	beq	r2,zero,2019c50 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 2019bd8:	e0fffe17 	ldw	r3,-8(fp)
 2019bdc:	e0bff117 	ldw	r2,-60(fp)
 2019be0:	1880022e 	bgeu	r3,r2,2019bec <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 2019be4:	e0bffe17 	ldw	r2,-8(fp)
 2019be8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2019bec:	e0bffc17 	ldw	r2,-16(fp)
 2019bf0:	10c21104 	addi	r3,r2,2116
 2019bf4:	e0bff417 	ldw	r2,-48(fp)
 2019bf8:	1885883a 	add	r2,r3,r2
 2019bfc:	e1bff117 	ldw	r6,-60(fp)
 2019c00:	e17ffd17 	ldw	r5,-12(fp)
 2019c04:	1009883a 	mov	r4,r2
 2019c08:	200a28c0 	call	200a28c <memcpy>
      ptr   += n;
 2019c0c:	e0fffd17 	ldw	r3,-12(fp)
 2019c10:	e0bff117 	ldw	r2,-60(fp)
 2019c14:	1885883a 	add	r2,r3,r2
 2019c18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2019c1c:	e0fffe17 	ldw	r3,-8(fp)
 2019c20:	e0bff117 	ldw	r2,-60(fp)
 2019c24:	1885c83a 	sub	r2,r3,r2
 2019c28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019c2c:	e0fff417 	ldw	r3,-48(fp)
 2019c30:	e0bff117 	ldw	r2,-60(fp)
 2019c34:	1885883a 	add	r2,r3,r2
 2019c38:	10c1ffcc 	andi	r3,r2,2047
 2019c3c:	e0bffc17 	ldw	r2,-16(fp)
 2019c40:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2019c44:	e0bffe17 	ldw	r2,-8(fp)
 2019c48:	00bfc716 	blt	zero,r2,2019b68 <altera_avalon_jtag_uart_write+0x58>
 2019c4c:	00000106 	br	2019c54 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2019c50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019c54:	0005303a 	rdctl	r2,status
 2019c58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c5c:	e0fff717 	ldw	r3,-36(fp)
 2019c60:	00bfff84 	movi	r2,-2
 2019c64:	1884703a 	and	r2,r3,r2
 2019c68:	1001703a 	wrctl	status,r2
  
  return context;
 2019c6c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2019c70:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2019c74:	e0bffc17 	ldw	r2,-16(fp)
 2019c78:	10800817 	ldw	r2,32(r2)
 2019c7c:	10c00094 	ori	r3,r2,2
 2019c80:	e0bffc17 	ldw	r2,-16(fp)
 2019c84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2019c88:	e0bffc17 	ldw	r2,-16(fp)
 2019c8c:	10800017 	ldw	r2,0(r2)
 2019c90:	10800104 	addi	r2,r2,4
 2019c94:	1007883a 	mov	r3,r2
 2019c98:	e0bffc17 	ldw	r2,-16(fp)
 2019c9c:	10800817 	ldw	r2,32(r2)
 2019ca0:	18800035 	stwio	r2,0(r3)
 2019ca4:	e0bff617 	ldw	r2,-40(fp)
 2019ca8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019cac:	e0bff317 	ldw	r2,-52(fp)
 2019cb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2019cb4:	e0bffe17 	ldw	r2,-8(fp)
 2019cb8:	00802a0e 	bge	zero,r2,2019d64 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 2019cbc:	e0bfff17 	ldw	r2,-4(fp)
 2019cc0:	1090000c 	andi	r2,r2,16384
 2019cc4:	10002a1e 	bne	r2,zero,2019d70 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 2019cc8:	d0a72543 	ldbu	r2,-25451(gp)
 2019ccc:	10803fcc 	andi	r2,r2,255
 2019cd0:	10800058 	cmpnei	r2,r2,1
 2019cd4:	1000161e 	bne	r2,zero,2019d30 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 2019cd8:	e0bffc17 	ldw	r2,-16(fp)
 2019cdc:	10800c17 	ldw	r2,48(r2)
 2019ce0:	e0bff515 	stw	r2,-44(fp)
 2019ce4:	00800184 	movi	r2,6
 2019ce8:	e0bff98d 	sth	r2,-26(fp)
 2019cec:	00bfe0c4 	movi	r2,-125
 2019cf0:	e0bffa05 	stb	r2,-24(fp)
 2019cf4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2019cf8:	d0a72543 	ldbu	r2,-25451(gp)
 2019cfc:	10803fcc 	andi	r2,r2,255
 2019d00:	10001526 	beq	r2,zero,2019d58 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2019d04:	e0fff98b 	ldhu	r3,-26(fp)
 2019d08:	e13ffa03 	ldbu	r4,-24(fp)
 2019d0c:	e17ffa8b 	ldhu	r5,-22(fp)
 2019d10:	e0bffb04 	addi	r2,fp,-20
 2019d14:	d8800015 	stw	r2,0(sp)
 2019d18:	280f883a 	mov	r7,r5
 2019d1c:	200d883a 	mov	r6,r4
 2019d20:	180b883a 	mov	r5,r3
 2019d24:	e13ff517 	ldw	r4,-44(fp)
 2019d28:	201378c0 	call	201378c <OSFlagPend>
 2019d2c:	00000a06 	br	2019d58 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2019d30:	0001883a 	nop
 2019d34:	e0bffc17 	ldw	r2,-16(fp)
 2019d38:	10c01017 	ldw	r3,64(r2)
 2019d3c:	e0bff017 	ldw	r2,-64(fp)
 2019d40:	1880051e 	bne	r3,r2,2019d58 <altera_avalon_jtag_uart_write+0x248>
 2019d44:	e0bffc17 	ldw	r2,-16(fp)
 2019d48:	10c00917 	ldw	r3,36(r2)
 2019d4c:	e0bffc17 	ldw	r2,-16(fp)
 2019d50:	10800117 	ldw	r2,4(r2)
 2019d54:	18bff736 	bltu	r3,r2,2019d34 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2019d58:	e0bffc17 	ldw	r2,-16(fp)
 2019d5c:	10800917 	ldw	r2,36(r2)
 2019d60:	1000051e 	bne	r2,zero,2019d78 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 2019d64:	e0bffe17 	ldw	r2,-8(fp)
 2019d68:	00bfb616 	blt	zero,r2,2019c44 <altera_avalon_jtag_uart_write+0x134>
 2019d6c:	00000306 	br	2019d7c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2019d70:	0001883a 	nop
 2019d74:	00000106 	br	2019d7c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2019d78:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2019d7c:	e0bffc17 	ldw	r2,-16(fp)
 2019d80:	10800b17 	ldw	r2,44(r2)
 2019d84:	1009883a 	mov	r4,r2
 2019d88:	20170400 	call	2017040 <OSSemPost>

  if (ptr != start)
 2019d8c:	e0fffd17 	ldw	r3,-12(fp)
 2019d90:	e0bff217 	ldw	r2,-56(fp)
 2019d94:	18800426 	beq	r3,r2,2019da8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 2019d98:	e0fffd17 	ldw	r3,-12(fp)
 2019d9c:	e0bff217 	ldw	r2,-56(fp)
 2019da0:	1885c83a 	sub	r2,r3,r2
 2019da4:	00000606 	br	2019dc0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 2019da8:	e0bfff17 	ldw	r2,-4(fp)
 2019dac:	1090000c 	andi	r2,r2,16384
 2019db0:	10000226 	beq	r2,zero,2019dbc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 2019db4:	00bffd44 	movi	r2,-11
 2019db8:	00000106 	br	2019dc0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2019dbc:	00bffec4 	movi	r2,-5
}
 2019dc0:	e037883a 	mov	sp,fp
 2019dc4:	dfc00117 	ldw	ra,4(sp)
 2019dc8:	df000017 	ldw	fp,0(sp)
 2019dcc:	dec00204 	addi	sp,sp,8
 2019dd0:	f800283a 	ret

02019dd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2019dd4:	defffa04 	addi	sp,sp,-24
 2019dd8:	dfc00515 	stw	ra,20(sp)
 2019ddc:	df000415 	stw	fp,16(sp)
 2019de0:	df000404 	addi	fp,sp,16
 2019de4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2019de8:	0007883a 	mov	r3,zero
 2019dec:	e0bfff17 	ldw	r2,-4(fp)
 2019df0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2019df4:	e0bfff17 	ldw	r2,-4(fp)
 2019df8:	10800104 	addi	r2,r2,4
 2019dfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019e00:	0005303a 	rdctl	r2,status
 2019e04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019e08:	e0fffd17 	ldw	r3,-12(fp)
 2019e0c:	00bfff84 	movi	r2,-2
 2019e10:	1884703a 	and	r2,r3,r2
 2019e14:	1001703a 	wrctl	status,r2
  
  return context;
 2019e18:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2019e1c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2019e20:	201a8f40 	call	201a8f4 <alt_tick>
 2019e24:	e0bffc17 	ldw	r2,-16(fp)
 2019e28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019e2c:	e0bffe17 	ldw	r2,-8(fp)
 2019e30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2019e34:	0001883a 	nop
 2019e38:	e037883a 	mov	sp,fp
 2019e3c:	dfc00117 	ldw	ra,4(sp)
 2019e40:	df000017 	ldw	fp,0(sp)
 2019e44:	dec00204 	addi	sp,sp,8
 2019e48:	f800283a 	ret

02019e4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2019e4c:	defff804 	addi	sp,sp,-32
 2019e50:	dfc00715 	stw	ra,28(sp)
 2019e54:	df000615 	stw	fp,24(sp)
 2019e58:	df000604 	addi	fp,sp,24
 2019e5c:	e13ffc15 	stw	r4,-16(fp)
 2019e60:	e17ffd15 	stw	r5,-12(fp)
 2019e64:	e1bffe15 	stw	r6,-8(fp)
 2019e68:	e1ffff15 	stw	r7,-4(fp)
 2019e6c:	e0bfff17 	ldw	r2,-4(fp)
 2019e70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2019e74:	d0a73a17 	ldw	r2,-25368(gp)
 2019e78:	1000021e 	bne	r2,zero,2019e84 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2019e7c:	e0bffb17 	ldw	r2,-20(fp)
 2019e80:	d0a73a15 	stw	r2,-25368(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2019e84:	e0bffc17 	ldw	r2,-16(fp)
 2019e88:	10800104 	addi	r2,r2,4
 2019e8c:	00c001c4 	movi	r3,7
 2019e90:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2019e94:	d8000015 	stw	zero,0(sp)
 2019e98:	e1fffc17 	ldw	r7,-16(fp)
 2019e9c:	018080b4 	movhi	r6,514
 2019ea0:	31a77504 	addi	r6,r6,-25132
 2019ea4:	e17ffe17 	ldw	r5,-8(fp)
 2019ea8:	e13ffd17 	ldw	r4,-12(fp)
 2019eac:	201a1d40 	call	201a1d4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2019eb0:	0001883a 	nop
 2019eb4:	e037883a 	mov	sp,fp
 2019eb8:	dfc00117 	ldw	ra,4(sp)
 2019ebc:	df000017 	ldw	fp,0(sp)
 2019ec0:	dec00204 	addi	sp,sp,8
 2019ec4:	f800283a 	ret

02019ec8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2019ec8:	defff504 	addi	sp,sp,-44
 2019ecc:	df000a15 	stw	fp,40(sp)
 2019ed0:	df000a04 	addi	fp,sp,40
 2019ed4:	e13ffc15 	stw	r4,-16(fp)
 2019ed8:	e17ffd15 	stw	r5,-12(fp)
 2019edc:	e1bffe15 	stw	r6,-8(fp)
 2019ee0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2019ee4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2019ee8:	d0a73a17 	ldw	r2,-25368(gp)
  
  if (alt_ticks_per_second ())
 2019eec:	10003c26 	beq	r2,zero,2019fe0 <alt_alarm_start+0x118>
  {
    if (alarm)
 2019ef0:	e0bffc17 	ldw	r2,-16(fp)
 2019ef4:	10003826 	beq	r2,zero,2019fd8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2019ef8:	e0bffc17 	ldw	r2,-16(fp)
 2019efc:	e0fffe17 	ldw	r3,-8(fp)
 2019f00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2019f04:	e0bffc17 	ldw	r2,-16(fp)
 2019f08:	e0ffff17 	ldw	r3,-4(fp)
 2019f0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019f10:	0005303a 	rdctl	r2,status
 2019f14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019f18:	e0fff917 	ldw	r3,-28(fp)
 2019f1c:	00bfff84 	movi	r2,-2
 2019f20:	1884703a 	and	r2,r3,r2
 2019f24:	1001703a 	wrctl	status,r2
  
  return context;
 2019f28:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2019f2c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2019f30:	d0a73b17 	ldw	r2,-25364(gp)
      
      current_nticks = alt_nticks();
 2019f34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2019f38:	e0fffd17 	ldw	r3,-12(fp)
 2019f3c:	e0bff617 	ldw	r2,-40(fp)
 2019f40:	1885883a 	add	r2,r3,r2
 2019f44:	10c00044 	addi	r3,r2,1
 2019f48:	e0bffc17 	ldw	r2,-16(fp)
 2019f4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2019f50:	e0bffc17 	ldw	r2,-16(fp)
 2019f54:	10c00217 	ldw	r3,8(r2)
 2019f58:	e0bff617 	ldw	r2,-40(fp)
 2019f5c:	1880042e 	bgeu	r3,r2,2019f70 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2019f60:	e0bffc17 	ldw	r2,-16(fp)
 2019f64:	00c00044 	movi	r3,1
 2019f68:	10c00405 	stb	r3,16(r2)
 2019f6c:	00000206 	br	2019f78 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2019f70:	e0bffc17 	ldw	r2,-16(fp)
 2019f74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2019f78:	e0bffc17 	ldw	r2,-16(fp)
 2019f7c:	d0e02e04 	addi	r3,gp,-32584
 2019f80:	e0fffa15 	stw	r3,-24(fp)
 2019f84:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2019f88:	e0bffb17 	ldw	r2,-20(fp)
 2019f8c:	e0fffa17 	ldw	r3,-24(fp)
 2019f90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2019f94:	e0bffa17 	ldw	r2,-24(fp)
 2019f98:	10c00017 	ldw	r3,0(r2)
 2019f9c:	e0bffb17 	ldw	r2,-20(fp)
 2019fa0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2019fa4:	e0bffa17 	ldw	r2,-24(fp)
 2019fa8:	10800017 	ldw	r2,0(r2)
 2019fac:	e0fffb17 	ldw	r3,-20(fp)
 2019fb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2019fb4:	e0bffa17 	ldw	r2,-24(fp)
 2019fb8:	e0fffb17 	ldw	r3,-20(fp)
 2019fbc:	10c00015 	stw	r3,0(r2)
 2019fc0:	e0bff817 	ldw	r2,-32(fp)
 2019fc4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019fc8:	e0bff717 	ldw	r2,-36(fp)
 2019fcc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2019fd0:	0005883a 	mov	r2,zero
 2019fd4:	00000306 	br	2019fe4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2019fd8:	00bffa84 	movi	r2,-22
 2019fdc:	00000106 	br	2019fe4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2019fe0:	00bfde84 	movi	r2,-134
  }
}
 2019fe4:	e037883a 	mov	sp,fp
 2019fe8:	df000017 	ldw	fp,0(sp)
 2019fec:	dec00104 	addi	sp,sp,4
 2019ff0:	f800283a 	ret

02019ff4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2019ff4:	deffff04 	addi	sp,sp,-4
 2019ff8:	df000015 	stw	fp,0(sp)
 2019ffc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201a000:	0001883a 	nop
 201a004:	e037883a 	mov	sp,fp
 201a008:	df000017 	ldw	fp,0(sp)
 201a00c:	dec00104 	addi	sp,sp,4
 201a010:	f800283a 	ret

0201a014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201a014:	defffe04 	addi	sp,sp,-8
 201a018:	dfc00115 	stw	ra,4(sp)
 201a01c:	df000015 	stw	fp,0(sp)
 201a020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201a024:	d0a00c17 	ldw	r2,-32720(gp)
 201a028:	10000326 	beq	r2,zero,201a038 <alt_get_errno+0x24>
 201a02c:	d0a00c17 	ldw	r2,-32720(gp)
 201a030:	103ee83a 	callr	r2
 201a034:	00000106 	br	201a03c <alt_get_errno+0x28>
 201a038:	d0a71c04 	addi	r2,gp,-25488
}
 201a03c:	e037883a 	mov	sp,fp
 201a040:	dfc00117 	ldw	ra,4(sp)
 201a044:	df000017 	ldw	fp,0(sp)
 201a048:	dec00204 	addi	sp,sp,8
 201a04c:	f800283a 	ret

0201a050 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201a050:	defffa04 	addi	sp,sp,-24
 201a054:	dfc00515 	stw	ra,20(sp)
 201a058:	df000415 	stw	fp,16(sp)
 201a05c:	df000404 	addi	fp,sp,16
 201a060:	e13ffe15 	stw	r4,-8(fp)
 201a064:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201a068:	e0bffe17 	ldw	r2,-8(fp)
 201a06c:	10000326 	beq	r2,zero,201a07c <alt_dev_llist_insert+0x2c>
 201a070:	e0bffe17 	ldw	r2,-8(fp)
 201a074:	10800217 	ldw	r2,8(r2)
 201a078:	1000061e 	bne	r2,zero,201a094 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201a07c:	201a0140 	call	201a014 <alt_get_errno>
 201a080:	1007883a 	mov	r3,r2
 201a084:	00800584 	movi	r2,22
 201a088:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201a08c:	00bffa84 	movi	r2,-22
 201a090:	00001306 	br	201a0e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201a094:	e0bffe17 	ldw	r2,-8(fp)
 201a098:	e0ffff17 	ldw	r3,-4(fp)
 201a09c:	e0fffc15 	stw	r3,-16(fp)
 201a0a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201a0a4:	e0bffd17 	ldw	r2,-12(fp)
 201a0a8:	e0fffc17 	ldw	r3,-16(fp)
 201a0ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201a0b0:	e0bffc17 	ldw	r2,-16(fp)
 201a0b4:	10c00017 	ldw	r3,0(r2)
 201a0b8:	e0bffd17 	ldw	r2,-12(fp)
 201a0bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201a0c0:	e0bffc17 	ldw	r2,-16(fp)
 201a0c4:	10800017 	ldw	r2,0(r2)
 201a0c8:	e0fffd17 	ldw	r3,-12(fp)
 201a0cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201a0d0:	e0bffc17 	ldw	r2,-16(fp)
 201a0d4:	e0fffd17 	ldw	r3,-12(fp)
 201a0d8:	10c00015 	stw	r3,0(r2)

  return 0;  
 201a0dc:	0005883a 	mov	r2,zero
}
 201a0e0:	e037883a 	mov	sp,fp
 201a0e4:	dfc00117 	ldw	ra,4(sp)
 201a0e8:	df000017 	ldw	fp,0(sp)
 201a0ec:	dec00204 	addi	sp,sp,8
 201a0f0:	f800283a 	ret

0201a0f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201a0f4:	defffd04 	addi	sp,sp,-12
 201a0f8:	dfc00215 	stw	ra,8(sp)
 201a0fc:	df000115 	stw	fp,4(sp)
 201a100:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201a104:	008080b4 	movhi	r2,514
 201a108:	10ad0c04 	addi	r2,r2,-19408
 201a10c:	e0bfff15 	stw	r2,-4(fp)
 201a110:	00000606 	br	201a12c <_do_ctors+0x38>
        (*ctor) (); 
 201a114:	e0bfff17 	ldw	r2,-4(fp)
 201a118:	10800017 	ldw	r2,0(r2)
 201a11c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201a120:	e0bfff17 	ldw	r2,-4(fp)
 201a124:	10bfff04 	addi	r2,r2,-4
 201a128:	e0bfff15 	stw	r2,-4(fp)
 201a12c:	e0ffff17 	ldw	r3,-4(fp)
 201a130:	008080b4 	movhi	r2,514
 201a134:	10ad0d04 	addi	r2,r2,-19404
 201a138:	18bff62e 	bgeu	r3,r2,201a114 <_do_ctors+0x20>
        (*ctor) (); 
}
 201a13c:	0001883a 	nop
 201a140:	e037883a 	mov	sp,fp
 201a144:	dfc00117 	ldw	ra,4(sp)
 201a148:	df000017 	ldw	fp,0(sp)
 201a14c:	dec00204 	addi	sp,sp,8
 201a150:	f800283a 	ret

0201a154 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201a154:	defffd04 	addi	sp,sp,-12
 201a158:	dfc00215 	stw	ra,8(sp)
 201a15c:	df000115 	stw	fp,4(sp)
 201a160:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201a164:	008080b4 	movhi	r2,514
 201a168:	10ad0c04 	addi	r2,r2,-19408
 201a16c:	e0bfff15 	stw	r2,-4(fp)
 201a170:	00000606 	br	201a18c <_do_dtors+0x38>
        (*dtor) (); 
 201a174:	e0bfff17 	ldw	r2,-4(fp)
 201a178:	10800017 	ldw	r2,0(r2)
 201a17c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201a180:	e0bfff17 	ldw	r2,-4(fp)
 201a184:	10bfff04 	addi	r2,r2,-4
 201a188:	e0bfff15 	stw	r2,-4(fp)
 201a18c:	e0ffff17 	ldw	r3,-4(fp)
 201a190:	008080b4 	movhi	r2,514
 201a194:	10ad0d04 	addi	r2,r2,-19404
 201a198:	18bff62e 	bgeu	r3,r2,201a174 <_do_dtors+0x20>
        (*dtor) (); 
}
 201a19c:	0001883a 	nop
 201a1a0:	e037883a 	mov	sp,fp
 201a1a4:	dfc00117 	ldw	ra,4(sp)
 201a1a8:	df000017 	ldw	fp,0(sp)
 201a1ac:	dec00204 	addi	sp,sp,8
 201a1b0:	f800283a 	ret

0201a1b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201a1b4:	deffff04 	addi	sp,sp,-4
 201a1b8:	df000015 	stw	fp,0(sp)
 201a1bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 201a1c0:	0001883a 	nop
 201a1c4:	e037883a 	mov	sp,fp
 201a1c8:	df000017 	ldw	fp,0(sp)
 201a1cc:	dec00104 	addi	sp,sp,4
 201a1d0:	f800283a 	ret

0201a1d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201a1d4:	defff904 	addi	sp,sp,-28
 201a1d8:	dfc00615 	stw	ra,24(sp)
 201a1dc:	df000515 	stw	fp,20(sp)
 201a1e0:	df000504 	addi	fp,sp,20
 201a1e4:	e13ffc15 	stw	r4,-16(fp)
 201a1e8:	e17ffd15 	stw	r5,-12(fp)
 201a1ec:	e1bffe15 	stw	r6,-8(fp)
 201a1f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201a1f4:	e0800217 	ldw	r2,8(fp)
 201a1f8:	d8800015 	stw	r2,0(sp)
 201a1fc:	e1ffff17 	ldw	r7,-4(fp)
 201a200:	e1bffe17 	ldw	r6,-8(fp)
 201a204:	e17ffd17 	ldw	r5,-12(fp)
 201a208:	e13ffc17 	ldw	r4,-16(fp)
 201a20c:	201a3840 	call	201a384 <alt_iic_isr_register>
}  
 201a210:	e037883a 	mov	sp,fp
 201a214:	dfc00117 	ldw	ra,4(sp)
 201a218:	df000017 	ldw	fp,0(sp)
 201a21c:	dec00204 	addi	sp,sp,8
 201a220:	f800283a 	ret

0201a224 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201a224:	defff904 	addi	sp,sp,-28
 201a228:	df000615 	stw	fp,24(sp)
 201a22c:	df000604 	addi	fp,sp,24
 201a230:	e13ffe15 	stw	r4,-8(fp)
 201a234:	e17fff15 	stw	r5,-4(fp)
 201a238:	e0bfff17 	ldw	r2,-4(fp)
 201a23c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a240:	0005303a 	rdctl	r2,status
 201a244:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a248:	e0fffb17 	ldw	r3,-20(fp)
 201a24c:	00bfff84 	movi	r2,-2
 201a250:	1884703a 	and	r2,r3,r2
 201a254:	1001703a 	wrctl	status,r2
  
  return context;
 201a258:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201a25c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201a260:	00c00044 	movi	r3,1
 201a264:	e0bffa17 	ldw	r2,-24(fp)
 201a268:	1884983a 	sll	r2,r3,r2
 201a26c:	1007883a 	mov	r3,r2
 201a270:	d0a73917 	ldw	r2,-25372(gp)
 201a274:	1884b03a 	or	r2,r3,r2
 201a278:	d0a73915 	stw	r2,-25372(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201a27c:	d0a73917 	ldw	r2,-25372(gp)
 201a280:	100170fa 	wrctl	ienable,r2
 201a284:	e0bffc17 	ldw	r2,-16(fp)
 201a288:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a28c:	e0bffd17 	ldw	r2,-12(fp)
 201a290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201a294:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201a298:	0001883a 	nop
}
 201a29c:	e037883a 	mov	sp,fp
 201a2a0:	df000017 	ldw	fp,0(sp)
 201a2a4:	dec00104 	addi	sp,sp,4
 201a2a8:	f800283a 	ret

0201a2ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201a2ac:	defff904 	addi	sp,sp,-28
 201a2b0:	df000615 	stw	fp,24(sp)
 201a2b4:	df000604 	addi	fp,sp,24
 201a2b8:	e13ffe15 	stw	r4,-8(fp)
 201a2bc:	e17fff15 	stw	r5,-4(fp)
 201a2c0:	e0bfff17 	ldw	r2,-4(fp)
 201a2c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a2c8:	0005303a 	rdctl	r2,status
 201a2cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a2d0:	e0fffb17 	ldw	r3,-20(fp)
 201a2d4:	00bfff84 	movi	r2,-2
 201a2d8:	1884703a 	and	r2,r3,r2
 201a2dc:	1001703a 	wrctl	status,r2
  
  return context;
 201a2e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201a2e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201a2e8:	00c00044 	movi	r3,1
 201a2ec:	e0bffa17 	ldw	r2,-24(fp)
 201a2f0:	1884983a 	sll	r2,r3,r2
 201a2f4:	0084303a 	nor	r2,zero,r2
 201a2f8:	1007883a 	mov	r3,r2
 201a2fc:	d0a73917 	ldw	r2,-25372(gp)
 201a300:	1884703a 	and	r2,r3,r2
 201a304:	d0a73915 	stw	r2,-25372(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201a308:	d0a73917 	ldw	r2,-25372(gp)
 201a30c:	100170fa 	wrctl	ienable,r2
 201a310:	e0bffc17 	ldw	r2,-16(fp)
 201a314:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a318:	e0bffd17 	ldw	r2,-12(fp)
 201a31c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201a320:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201a324:	0001883a 	nop
}
 201a328:	e037883a 	mov	sp,fp
 201a32c:	df000017 	ldw	fp,0(sp)
 201a330:	dec00104 	addi	sp,sp,4
 201a334:	f800283a 	ret

0201a338 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201a338:	defffc04 	addi	sp,sp,-16
 201a33c:	df000315 	stw	fp,12(sp)
 201a340:	df000304 	addi	fp,sp,12
 201a344:	e13ffe15 	stw	r4,-8(fp)
 201a348:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201a34c:	000530fa 	rdctl	r2,ienable
 201a350:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201a354:	00c00044 	movi	r3,1
 201a358:	e0bfff17 	ldw	r2,-4(fp)
 201a35c:	1884983a 	sll	r2,r3,r2
 201a360:	1007883a 	mov	r3,r2
 201a364:	e0bffd17 	ldw	r2,-12(fp)
 201a368:	1884703a 	and	r2,r3,r2
 201a36c:	1004c03a 	cmpne	r2,r2,zero
 201a370:	10803fcc 	andi	r2,r2,255
}
 201a374:	e037883a 	mov	sp,fp
 201a378:	df000017 	ldw	fp,0(sp)
 201a37c:	dec00104 	addi	sp,sp,4
 201a380:	f800283a 	ret

0201a384 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201a384:	defff504 	addi	sp,sp,-44
 201a388:	dfc00a15 	stw	ra,40(sp)
 201a38c:	df000915 	stw	fp,36(sp)
 201a390:	df000904 	addi	fp,sp,36
 201a394:	e13ffc15 	stw	r4,-16(fp)
 201a398:	e17ffd15 	stw	r5,-12(fp)
 201a39c:	e1bffe15 	stw	r6,-8(fp)
 201a3a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201a3a4:	00bffa84 	movi	r2,-22
 201a3a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201a3ac:	e0bffd17 	ldw	r2,-12(fp)
 201a3b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201a3b4:	e0bff817 	ldw	r2,-32(fp)
 201a3b8:	10800808 	cmpgei	r2,r2,32
 201a3bc:	1000271e 	bne	r2,zero,201a45c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a3c0:	0005303a 	rdctl	r2,status
 201a3c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a3c8:	e0fffb17 	ldw	r3,-20(fp)
 201a3cc:	00bfff84 	movi	r2,-2
 201a3d0:	1884703a 	and	r2,r3,r2
 201a3d4:	1001703a 	wrctl	status,r2
  
  return context;
 201a3d8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201a3dc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 201a3e0:	008080f4 	movhi	r2,515
 201a3e4:	10a0d604 	addi	r2,r2,-31912
 201a3e8:	e0fff817 	ldw	r3,-32(fp)
 201a3ec:	180690fa 	slli	r3,r3,3
 201a3f0:	10c5883a 	add	r2,r2,r3
 201a3f4:	e0fffe17 	ldw	r3,-8(fp)
 201a3f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201a3fc:	008080f4 	movhi	r2,515
 201a400:	10a0d604 	addi	r2,r2,-31912
 201a404:	e0fff817 	ldw	r3,-32(fp)
 201a408:	180690fa 	slli	r3,r3,3
 201a40c:	10c5883a 	add	r2,r2,r3
 201a410:	10800104 	addi	r2,r2,4
 201a414:	e0ffff17 	ldw	r3,-4(fp)
 201a418:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201a41c:	e0bffe17 	ldw	r2,-8(fp)
 201a420:	10000526 	beq	r2,zero,201a438 <alt_iic_isr_register+0xb4>
 201a424:	e0bff817 	ldw	r2,-32(fp)
 201a428:	100b883a 	mov	r5,r2
 201a42c:	e13ffc17 	ldw	r4,-16(fp)
 201a430:	201a2240 	call	201a224 <alt_ic_irq_enable>
 201a434:	00000406 	br	201a448 <alt_iic_isr_register+0xc4>
 201a438:	e0bff817 	ldw	r2,-32(fp)
 201a43c:	100b883a 	mov	r5,r2
 201a440:	e13ffc17 	ldw	r4,-16(fp)
 201a444:	201a2ac0 	call	201a2ac <alt_ic_irq_disable>
 201a448:	e0bff715 	stw	r2,-36(fp)
 201a44c:	e0bffa17 	ldw	r2,-24(fp)
 201a450:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a454:	e0bff917 	ldw	r2,-28(fp)
 201a458:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201a45c:	e0bff717 	ldw	r2,-36(fp)
}
 201a460:	e037883a 	mov	sp,fp
 201a464:	dfc00117 	ldw	ra,4(sp)
 201a468:	df000017 	ldw	fp,0(sp)
 201a46c:	dec00204 	addi	sp,sp,8
 201a470:	f800283a 	ret

0201a474 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201a474:	defff804 	addi	sp,sp,-32
 201a478:	dfc00715 	stw	ra,28(sp)
 201a47c:	df000615 	stw	fp,24(sp)
 201a480:	dc000515 	stw	r16,20(sp)
 201a484:	df000604 	addi	fp,sp,24
 201a488:	e13ffb15 	stw	r4,-20(fp)
 201a48c:	e17ffc15 	stw	r5,-16(fp)
 201a490:	e1bffd15 	stw	r6,-12(fp)
 201a494:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 201a498:	e1bffe17 	ldw	r6,-8(fp)
 201a49c:	e17ffd17 	ldw	r5,-12(fp)
 201a4a0:	e13ffc17 	ldw	r4,-16(fp)
 201a4a4:	201a6fc0 	call	201a6fc <open>
 201a4a8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 201a4ac:	e0bffa17 	ldw	r2,-24(fp)
 201a4b0:	10002216 	blt	r2,zero,201a53c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 201a4b4:	040080b4 	movhi	r16,514
 201a4b8:	84308b04 	addi	r16,r16,-15828
 201a4bc:	e0bffa17 	ldw	r2,-24(fp)
 201a4c0:	01400304 	movi	r5,12
 201a4c4:	1009883a 	mov	r4,r2
 201a4c8:	20019440 	call	2001944 <__mulsi3>
 201a4cc:	8085883a 	add	r2,r16,r2
 201a4d0:	10c00017 	ldw	r3,0(r2)
 201a4d4:	e0bffb17 	ldw	r2,-20(fp)
 201a4d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201a4dc:	040080b4 	movhi	r16,514
 201a4e0:	84308b04 	addi	r16,r16,-15828
 201a4e4:	e0bffa17 	ldw	r2,-24(fp)
 201a4e8:	01400304 	movi	r5,12
 201a4ec:	1009883a 	mov	r4,r2
 201a4f0:	20019440 	call	2001944 <__mulsi3>
 201a4f4:	8085883a 	add	r2,r16,r2
 201a4f8:	10800104 	addi	r2,r2,4
 201a4fc:	10c00017 	ldw	r3,0(r2)
 201a500:	e0bffb17 	ldw	r2,-20(fp)
 201a504:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201a508:	040080b4 	movhi	r16,514
 201a50c:	84308b04 	addi	r16,r16,-15828
 201a510:	e0bffa17 	ldw	r2,-24(fp)
 201a514:	01400304 	movi	r5,12
 201a518:	1009883a 	mov	r4,r2
 201a51c:	20019440 	call	2001944 <__mulsi3>
 201a520:	8085883a 	add	r2,r16,r2
 201a524:	10800204 	addi	r2,r2,8
 201a528:	10c00017 	ldw	r3,0(r2)
 201a52c:	e0bffb17 	ldw	r2,-20(fp)
 201a530:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201a534:	e13ffa17 	ldw	r4,-24(fp)
 201a538:	201079c0 	call	201079c <alt_release_fd>
  }
} 
 201a53c:	0001883a 	nop
 201a540:	e6ffff04 	addi	sp,fp,-4
 201a544:	dfc00217 	ldw	ra,8(sp)
 201a548:	df000117 	ldw	fp,4(sp)
 201a54c:	dc000017 	ldw	r16,0(sp)
 201a550:	dec00304 	addi	sp,sp,12
 201a554:	f800283a 	ret

0201a558 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201a558:	defffb04 	addi	sp,sp,-20
 201a55c:	dfc00415 	stw	ra,16(sp)
 201a560:	df000315 	stw	fp,12(sp)
 201a564:	df000304 	addi	fp,sp,12
 201a568:	e13ffd15 	stw	r4,-12(fp)
 201a56c:	e17ffe15 	stw	r5,-8(fp)
 201a570:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201a574:	01c07fc4 	movi	r7,511
 201a578:	01800044 	movi	r6,1
 201a57c:	e17ffd17 	ldw	r5,-12(fp)
 201a580:	010080b4 	movhi	r4,514
 201a584:	21308e04 	addi	r4,r4,-15816
 201a588:	201a4740 	call	201a474 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201a58c:	01c07fc4 	movi	r7,511
 201a590:	000d883a 	mov	r6,zero
 201a594:	e17ffe17 	ldw	r5,-8(fp)
 201a598:	010080b4 	movhi	r4,514
 201a59c:	21308b04 	addi	r4,r4,-15828
 201a5a0:	201a4740 	call	201a474 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201a5a4:	01c07fc4 	movi	r7,511
 201a5a8:	01800044 	movi	r6,1
 201a5ac:	e17fff17 	ldw	r5,-4(fp)
 201a5b0:	010080b4 	movhi	r4,514
 201a5b4:	21309104 	addi	r4,r4,-15804
 201a5b8:	201a4740 	call	201a474 <alt_open_fd>
}  
 201a5bc:	0001883a 	nop
 201a5c0:	e037883a 	mov	sp,fp
 201a5c4:	dfc00117 	ldw	ra,4(sp)
 201a5c8:	df000017 	ldw	fp,0(sp)
 201a5cc:	dec00204 	addi	sp,sp,8
 201a5d0:	f800283a 	ret

0201a5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201a5d4:	defffe04 	addi	sp,sp,-8
 201a5d8:	dfc00115 	stw	ra,4(sp)
 201a5dc:	df000015 	stw	fp,0(sp)
 201a5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201a5e4:	d0a00c17 	ldw	r2,-32720(gp)
 201a5e8:	10000326 	beq	r2,zero,201a5f8 <alt_get_errno+0x24>
 201a5ec:	d0a00c17 	ldw	r2,-32720(gp)
 201a5f0:	103ee83a 	callr	r2
 201a5f4:	00000106 	br	201a5fc <alt_get_errno+0x28>
 201a5f8:	d0a71c04 	addi	r2,gp,-25488
}
 201a5fc:	e037883a 	mov	sp,fp
 201a600:	dfc00117 	ldw	ra,4(sp)
 201a604:	df000017 	ldw	fp,0(sp)
 201a608:	dec00204 	addi	sp,sp,8
 201a60c:	f800283a 	ret

0201a610 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201a610:	defffb04 	addi	sp,sp,-20
 201a614:	dfc00415 	stw	ra,16(sp)
 201a618:	df000315 	stw	fp,12(sp)
 201a61c:	dc000215 	stw	r16,8(sp)
 201a620:	df000304 	addi	fp,sp,12
 201a624:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201a628:	e0bffe17 	ldw	r2,-8(fp)
 201a62c:	10800217 	ldw	r2,8(r2)
 201a630:	10d00034 	orhi	r3,r2,16384
 201a634:	e0bffe17 	ldw	r2,-8(fp)
 201a638:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201a63c:	e03ffd15 	stw	zero,-12(fp)
 201a640:	00002306 	br	201a6d0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201a644:	040080b4 	movhi	r16,514
 201a648:	84308b04 	addi	r16,r16,-15828
 201a64c:	e0bffd17 	ldw	r2,-12(fp)
 201a650:	01400304 	movi	r5,12
 201a654:	1009883a 	mov	r4,r2
 201a658:	20019440 	call	2001944 <__mulsi3>
 201a65c:	8085883a 	add	r2,r16,r2
 201a660:	10c00017 	ldw	r3,0(r2)
 201a664:	e0bffe17 	ldw	r2,-8(fp)
 201a668:	10800017 	ldw	r2,0(r2)
 201a66c:	1880151e 	bne	r3,r2,201a6c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201a670:	040080b4 	movhi	r16,514
 201a674:	84308b04 	addi	r16,r16,-15828
 201a678:	e0bffd17 	ldw	r2,-12(fp)
 201a67c:	01400304 	movi	r5,12
 201a680:	1009883a 	mov	r4,r2
 201a684:	20019440 	call	2001944 <__mulsi3>
 201a688:	8085883a 	add	r2,r16,r2
 201a68c:	10800204 	addi	r2,r2,8
 201a690:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201a694:	10000b0e 	bge	r2,zero,201a6c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201a698:	01400304 	movi	r5,12
 201a69c:	e13ffd17 	ldw	r4,-12(fp)
 201a6a0:	20019440 	call	2001944 <__mulsi3>
 201a6a4:	1007883a 	mov	r3,r2
 201a6a8:	008080b4 	movhi	r2,514
 201a6ac:	10b08b04 	addi	r2,r2,-15828
 201a6b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201a6b4:	e0bffe17 	ldw	r2,-8(fp)
 201a6b8:	18800226 	beq	r3,r2,201a6c4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201a6bc:	00bffcc4 	movi	r2,-13
 201a6c0:	00000806 	br	201a6e4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201a6c4:	e0bffd17 	ldw	r2,-12(fp)
 201a6c8:	10800044 	addi	r2,r2,1
 201a6cc:	e0bffd15 	stw	r2,-12(fp)
 201a6d0:	d0a00b17 	ldw	r2,-32724(gp)
 201a6d4:	1007883a 	mov	r3,r2
 201a6d8:	e0bffd17 	ldw	r2,-12(fp)
 201a6dc:	18bfd92e 	bgeu	r3,r2,201a644 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201a6e0:	0005883a 	mov	r2,zero
}
 201a6e4:	e6ffff04 	addi	sp,fp,-4
 201a6e8:	dfc00217 	ldw	ra,8(sp)
 201a6ec:	df000117 	ldw	fp,4(sp)
 201a6f0:	dc000017 	ldw	r16,0(sp)
 201a6f4:	dec00304 	addi	sp,sp,12
 201a6f8:	f800283a 	ret

0201a6fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201a6fc:	defff604 	addi	sp,sp,-40
 201a700:	dfc00915 	stw	ra,36(sp)
 201a704:	df000815 	stw	fp,32(sp)
 201a708:	df000804 	addi	fp,sp,32
 201a70c:	e13ffd15 	stw	r4,-12(fp)
 201a710:	e17ffe15 	stw	r5,-8(fp)
 201a714:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201a718:	00bfffc4 	movi	r2,-1
 201a71c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201a720:	00bffb44 	movi	r2,-19
 201a724:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201a728:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201a72c:	d1600904 	addi	r5,gp,-32732
 201a730:	e13ffd17 	ldw	r4,-12(fp)
 201a734:	201ad780 	call	201ad78 <alt_find_dev>
 201a738:	e0bff815 	stw	r2,-32(fp)
 201a73c:	e0bff817 	ldw	r2,-32(fp)
 201a740:	1000051e 	bne	r2,zero,201a758 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201a744:	e13ffd17 	ldw	r4,-12(fp)
 201a748:	201ae080 	call	201ae08 <alt_find_file>
 201a74c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201a750:	00800044 	movi	r2,1
 201a754:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201a758:	e0bff817 	ldw	r2,-32(fp)
 201a75c:	10002b26 	beq	r2,zero,201a80c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201a760:	e13ff817 	ldw	r4,-32(fp)
 201a764:	201af100 	call	201af10 <alt_get_fd>
 201a768:	e0bff915 	stw	r2,-28(fp)
 201a76c:	e0bff917 	ldw	r2,-28(fp)
 201a770:	1000030e 	bge	r2,zero,201a780 <open+0x84>
    {
      status = index;
 201a774:	e0bff917 	ldw	r2,-28(fp)
 201a778:	e0bffa15 	stw	r2,-24(fp)
 201a77c:	00002506 	br	201a814 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 201a780:	01400304 	movi	r5,12
 201a784:	e13ff917 	ldw	r4,-28(fp)
 201a788:	20019440 	call	2001944 <__mulsi3>
 201a78c:	1007883a 	mov	r3,r2
 201a790:	008080b4 	movhi	r2,514
 201a794:	10b08b04 	addi	r2,r2,-15828
 201a798:	1885883a 	add	r2,r3,r2
 201a79c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201a7a0:	e0fffe17 	ldw	r3,-8(fp)
 201a7a4:	00900034 	movhi	r2,16384
 201a7a8:	10bfffc4 	addi	r2,r2,-1
 201a7ac:	1886703a 	and	r3,r3,r2
 201a7b0:	e0bffc17 	ldw	r2,-16(fp)
 201a7b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201a7b8:	e0bffb17 	ldw	r2,-20(fp)
 201a7bc:	1000051e 	bne	r2,zero,201a7d4 <open+0xd8>
 201a7c0:	e13ffc17 	ldw	r4,-16(fp)
 201a7c4:	201a6100 	call	201a610 <alt_file_locked>
 201a7c8:	e0bffa15 	stw	r2,-24(fp)
 201a7cc:	e0bffa17 	ldw	r2,-24(fp)
 201a7d0:	10001016 	blt	r2,zero,201a814 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201a7d4:	e0bff817 	ldw	r2,-32(fp)
 201a7d8:	10800317 	ldw	r2,12(r2)
 201a7dc:	10000826 	beq	r2,zero,201a800 <open+0x104>
 201a7e0:	e0bff817 	ldw	r2,-32(fp)
 201a7e4:	10800317 	ldw	r2,12(r2)
 201a7e8:	e1ffff17 	ldw	r7,-4(fp)
 201a7ec:	e1bffe17 	ldw	r6,-8(fp)
 201a7f0:	e17ffd17 	ldw	r5,-12(fp)
 201a7f4:	e13ffc17 	ldw	r4,-16(fp)
 201a7f8:	103ee83a 	callr	r2
 201a7fc:	00000106 	br	201a804 <open+0x108>
 201a800:	0005883a 	mov	r2,zero
 201a804:	e0bffa15 	stw	r2,-24(fp)
 201a808:	00000206 	br	201a814 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201a80c:	00bffb44 	movi	r2,-19
 201a810:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201a814:	e0bffa17 	ldw	r2,-24(fp)
 201a818:	1000090e 	bge	r2,zero,201a840 <open+0x144>
  {
    alt_release_fd (index);  
 201a81c:	e13ff917 	ldw	r4,-28(fp)
 201a820:	201079c0 	call	201079c <alt_release_fd>
    ALT_ERRNO = -status;
 201a824:	201a5d40 	call	201a5d4 <alt_get_errno>
 201a828:	1007883a 	mov	r3,r2
 201a82c:	e0bffa17 	ldw	r2,-24(fp)
 201a830:	0085c83a 	sub	r2,zero,r2
 201a834:	18800015 	stw	r2,0(r3)
    return -1;
 201a838:	00bfffc4 	movi	r2,-1
 201a83c:	00000106 	br	201a844 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 201a840:	e0bff917 	ldw	r2,-28(fp)
}
 201a844:	e037883a 	mov	sp,fp
 201a848:	dfc00117 	ldw	ra,4(sp)
 201a84c:	df000017 	ldw	fp,0(sp)
 201a850:	dec00204 	addi	sp,sp,8
 201a854:	f800283a 	ret

0201a858 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201a858:	defffa04 	addi	sp,sp,-24
 201a85c:	df000515 	stw	fp,20(sp)
 201a860:	df000504 	addi	fp,sp,20
 201a864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a868:	0005303a 	rdctl	r2,status
 201a86c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a870:	e0fffc17 	ldw	r3,-16(fp)
 201a874:	00bfff84 	movi	r2,-2
 201a878:	1884703a 	and	r2,r3,r2
 201a87c:	1001703a 	wrctl	status,r2
  
  return context;
 201a880:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201a884:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201a888:	e0bfff17 	ldw	r2,-4(fp)
 201a88c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201a890:	e0bffd17 	ldw	r2,-12(fp)
 201a894:	10800017 	ldw	r2,0(r2)
 201a898:	e0fffd17 	ldw	r3,-12(fp)
 201a89c:	18c00117 	ldw	r3,4(r3)
 201a8a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 201a8a4:	e0bffd17 	ldw	r2,-12(fp)
 201a8a8:	10800117 	ldw	r2,4(r2)
 201a8ac:	e0fffd17 	ldw	r3,-12(fp)
 201a8b0:	18c00017 	ldw	r3,0(r3)
 201a8b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201a8b8:	e0bffd17 	ldw	r2,-12(fp)
 201a8bc:	e0fffd17 	ldw	r3,-12(fp)
 201a8c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 201a8c4:	e0bffd17 	ldw	r2,-12(fp)
 201a8c8:	e0fffd17 	ldw	r3,-12(fp)
 201a8cc:	10c00015 	stw	r3,0(r2)
 201a8d0:	e0bffb17 	ldw	r2,-20(fp)
 201a8d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a8d8:	e0bffe17 	ldw	r2,-8(fp)
 201a8dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201a8e0:	0001883a 	nop
 201a8e4:	e037883a 	mov	sp,fp
 201a8e8:	df000017 	ldw	fp,0(sp)
 201a8ec:	dec00104 	addi	sp,sp,4
 201a8f0:	f800283a 	ret

0201a8f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201a8f4:	defffb04 	addi	sp,sp,-20
 201a8f8:	dfc00415 	stw	ra,16(sp)
 201a8fc:	df000315 	stw	fp,12(sp)
 201a900:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201a904:	d0a02e17 	ldw	r2,-32584(gp)
 201a908:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201a90c:	d0a73b17 	ldw	r2,-25364(gp)
 201a910:	10800044 	addi	r2,r2,1
 201a914:	d0a73b15 	stw	r2,-25364(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201a918:	00002e06 	br	201a9d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201a91c:	e0bffd17 	ldw	r2,-12(fp)
 201a920:	10800017 	ldw	r2,0(r2)
 201a924:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201a928:	e0bffd17 	ldw	r2,-12(fp)
 201a92c:	10800403 	ldbu	r2,16(r2)
 201a930:	10803fcc 	andi	r2,r2,255
 201a934:	10000426 	beq	r2,zero,201a948 <alt_tick+0x54>
 201a938:	d0a73b17 	ldw	r2,-25364(gp)
 201a93c:	1000021e 	bne	r2,zero,201a948 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201a940:	e0bffd17 	ldw	r2,-12(fp)
 201a944:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201a948:	e0bffd17 	ldw	r2,-12(fp)
 201a94c:	10800217 	ldw	r2,8(r2)
 201a950:	d0e73b17 	ldw	r3,-25364(gp)
 201a954:	18801d36 	bltu	r3,r2,201a9cc <alt_tick+0xd8>
 201a958:	e0bffd17 	ldw	r2,-12(fp)
 201a95c:	10800403 	ldbu	r2,16(r2)
 201a960:	10803fcc 	andi	r2,r2,255
 201a964:	1000191e 	bne	r2,zero,201a9cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201a968:	e0bffd17 	ldw	r2,-12(fp)
 201a96c:	10800317 	ldw	r2,12(r2)
 201a970:	e0fffd17 	ldw	r3,-12(fp)
 201a974:	18c00517 	ldw	r3,20(r3)
 201a978:	1809883a 	mov	r4,r3
 201a97c:	103ee83a 	callr	r2
 201a980:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201a984:	e0bfff17 	ldw	r2,-4(fp)
 201a988:	1000031e 	bne	r2,zero,201a998 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 201a98c:	e13ffd17 	ldw	r4,-12(fp)
 201a990:	201a8580 	call	201a858 <alt_alarm_stop>
 201a994:	00000d06 	br	201a9cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201a998:	e0bffd17 	ldw	r2,-12(fp)
 201a99c:	10c00217 	ldw	r3,8(r2)
 201a9a0:	e0bfff17 	ldw	r2,-4(fp)
 201a9a4:	1887883a 	add	r3,r3,r2
 201a9a8:	e0bffd17 	ldw	r2,-12(fp)
 201a9ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201a9b0:	e0bffd17 	ldw	r2,-12(fp)
 201a9b4:	10c00217 	ldw	r3,8(r2)
 201a9b8:	d0a73b17 	ldw	r2,-25364(gp)
 201a9bc:	1880032e 	bgeu	r3,r2,201a9cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201a9c0:	e0bffd17 	ldw	r2,-12(fp)
 201a9c4:	00c00044 	movi	r3,1
 201a9c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201a9cc:	e0bffe17 	ldw	r2,-8(fp)
 201a9d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201a9d4:	e0fffd17 	ldw	r3,-12(fp)
 201a9d8:	d0a02e04 	addi	r2,gp,-32584
 201a9dc:	18bfcf1e 	bne	r3,r2,201a91c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 201a9e0:	20119b00 	call	20119b0 <OSTimeTick>
}
 201a9e4:	0001883a 	nop
 201a9e8:	e037883a 	mov	sp,fp
 201a9ec:	dfc00117 	ldw	ra,4(sp)
 201a9f0:	df000017 	ldw	fp,0(sp)
 201a9f4:	dec00204 	addi	sp,sp,8
 201a9f8:	f800283a 	ret

0201a9fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201a9fc:	deffff04 	addi	sp,sp,-4
 201aa00:	df000015 	stw	fp,0(sp)
 201aa04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201aa08:	000170fa 	wrctl	ienable,zero
}
 201aa0c:	0001883a 	nop
 201aa10:	e037883a 	mov	sp,fp
 201aa14:	df000017 	ldw	fp,0(sp)
 201aa18:	dec00104 	addi	sp,sp,4
 201aa1c:	f800283a 	ret

0201aa20 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201aa20:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201aa24:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201aa28:	d1273417 	ldw	r4,-25392(gp)

      stw ra,  0(sp)
 201aa2c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201aa30:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201aa34:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201aa38:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201aa3c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201aa40:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201aa44:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201aa48:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201aa4c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201aa50:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201aa54:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201aa58:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201aa5c:	201ac940 	call	201ac94 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201aa60:	d1272f17 	ldw	r4,-25412(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201aa64:	d1672707 	ldb	r5,-25444(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201aa68:	d1273415 	stw	r4,-25392(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201aa6c:	d1672745 	stb	r5,-25443(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201aa70:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201aa74:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201aa78:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201aa7c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201aa80:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201aa84:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201aa88:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201aa8c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201aa90:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201aa94:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201aa98:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201aa9c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201aaa0:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201aaa4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201aaa8:	f800283a 	ret

0201aaac <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201aaac:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201aab0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201aab4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201aab8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201aabc:	201ac940 	call	201ac94 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201aac0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201aac4:	d4a72545 	stb	r18,-25451(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201aac8:	003fe506 	br	201aa60 <OSCtxSw+0x40>

0201aacc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201aacc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201aad0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201aad4:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201aad8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201aadc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201aae0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201aae4:	dec00204 	addi	sp,sp,8

      callr r2
 201aae8:	103ee83a 	callr	r2

      nop
 201aaec:	0001883a 	nop

0201aaf0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201aaf0:	defff704 	addi	sp,sp,-36
 201aaf4:	dfc00815 	stw	ra,32(sp)
 201aaf8:	df000715 	stw	fp,28(sp)
 201aafc:	df000704 	addi	fp,sp,28
 201ab00:	e13ffc15 	stw	r4,-16(fp)
 201ab04:	e17ffd15 	stw	r5,-12(fp)
 201ab08:	e1bffe15 	stw	r6,-8(fp)
 201ab0c:	3805883a 	mov	r2,r7
 201ab10:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201ab14:	e0fffe17 	ldw	r3,-8(fp)
 201ab18:	00bfff04 	movi	r2,-4
 201ab1c:	1884703a 	and	r2,r3,r2
 201ab20:	10bef704 	addi	r2,r2,-1060
 201ab24:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201ab28:	01810904 	movi	r6,1060
 201ab2c:	000b883a 	mov	r5,zero
 201ab30:	e13ff917 	ldw	r4,-28(fp)
 201ab34:	200a5300 	call	200a530 <memset>
 201ab38:	e0bff917 	ldw	r2,-28(fp)
 201ab3c:	10c0bb04 	addi	r3,r2,748
 201ab40:	e0bff917 	ldw	r2,-28(fp)
 201ab44:	10c00115 	stw	r3,4(r2)
 201ab48:	e0bff917 	ldw	r2,-28(fp)
 201ab4c:	10c0d504 	addi	r3,r2,852
 201ab50:	e0bff917 	ldw	r2,-28(fp)
 201ab54:	10c00215 	stw	r3,8(r2)
 201ab58:	e0bff917 	ldw	r2,-28(fp)
 201ab5c:	10c0ef04 	addi	r3,r2,956
 201ab60:	e0bff917 	ldw	r2,-28(fp)
 201ab64:	10c00315 	stw	r3,12(r2)
 201ab68:	e0fff917 	ldw	r3,-28(fp)
 201ab6c:	008080b4 	movhi	r2,514
 201ab70:	10ae5704 	addi	r2,r2,-18084
 201ab74:	18800d15 	stw	r2,52(r3)
 201ab78:	e0bff917 	ldw	r2,-28(fp)
 201ab7c:	00c00044 	movi	r3,1
 201ab80:	10c02915 	stw	r3,164(r2)
 201ab84:	10002a15 	stw	zero,168(r2)
 201ab88:	e0bff917 	ldw	r2,-28(fp)
 201ab8c:	00ccc384 	movi	r3,13070
 201ab90:	10c02b0d 	sth	r3,172(r2)
 201ab94:	e0bff917 	ldw	r2,-28(fp)
 201ab98:	00eaf344 	movi	r3,-21555
 201ab9c:	10c02b8d 	sth	r3,174(r2)
 201aba0:	e0bff917 	ldw	r2,-28(fp)
 201aba4:	00c48d04 	movi	r3,4660
 201aba8:	10c02c0d 	sth	r3,176(r2)
 201abac:	e0bff917 	ldw	r2,-28(fp)
 201abb0:	00f99b44 	movi	r3,-6547
 201abb4:	10c02c8d 	sth	r3,178(r2)
 201abb8:	e0bff917 	ldw	r2,-28(fp)
 201abbc:	00f7bb04 	movi	r3,-8468
 201abc0:	10c02d0d 	sth	r3,180(r2)
 201abc4:	e0bff917 	ldw	r2,-28(fp)
 201abc8:	00c00144 	movi	r3,5
 201abcc:	10c02d8d 	sth	r3,182(r2)
 201abd0:	e0bff917 	ldw	r2,-28(fp)
 201abd4:	00c002c4 	movi	r3,11
 201abd8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201abdc:	e0bff917 	ldw	r2,-28(fp)
 201abe0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201abe4:	e0bffa17 	ldw	r2,-24(fp)
 201abe8:	10bff304 	addi	r2,r2,-52
 201abec:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201abf0:	e0bffb17 	ldw	r2,-20(fp)
 201abf4:	10800c04 	addi	r2,r2,48
 201abf8:	e0fffc17 	ldw	r3,-16(fp)
 201abfc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201ac00:	e0bffb17 	ldw	r2,-20(fp)
 201ac04:	10800b04 	addi	r2,r2,44
 201ac08:	e0fffd17 	ldw	r3,-12(fp)
 201ac0c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201ac10:	e0bffb17 	ldw	r2,-20(fp)
 201ac14:	10800a04 	addi	r2,r2,40
 201ac18:	e0fff917 	ldw	r3,-28(fp)
 201ac1c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201ac20:	008080b4 	movhi	r2,514
 201ac24:	10aab304 	addi	r2,r2,-21812
 201ac28:	10c00104 	addi	r3,r2,4
 201ac2c:	e0bffb17 	ldw	r2,-20(fp)
 201ac30:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201ac34:	e0bffb17 	ldw	r2,-20(fp)
}
 201ac38:	e037883a 	mov	sp,fp
 201ac3c:	dfc00117 	ldw	ra,4(sp)
 201ac40:	df000017 	ldw	fp,0(sp)
 201ac44:	dec00204 	addi	sp,sp,8
 201ac48:	f800283a 	ret

0201ac4c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201ac4c:	defffe04 	addi	sp,sp,-8
 201ac50:	df000115 	stw	fp,4(sp)
 201ac54:	df000104 	addi	fp,sp,4
 201ac58:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201ac5c:	0001883a 	nop
 201ac60:	e037883a 	mov	sp,fp
 201ac64:	df000017 	ldw	fp,0(sp)
 201ac68:	dec00104 	addi	sp,sp,4
 201ac6c:	f800283a 	ret

0201ac70 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201ac70:	defffe04 	addi	sp,sp,-8
 201ac74:	df000115 	stw	fp,4(sp)
 201ac78:	df000104 	addi	fp,sp,4
 201ac7c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201ac80:	0001883a 	nop
 201ac84:	e037883a 	mov	sp,fp
 201ac88:	df000017 	ldw	fp,0(sp)
 201ac8c:	dec00104 	addi	sp,sp,4
 201ac90:	f800283a 	ret

0201ac94 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201ac94:	deffff04 	addi	sp,sp,-4
 201ac98:	df000015 	stw	fp,0(sp)
 201ac9c:	d839883a 	mov	fp,sp
}
 201aca0:	0001883a 	nop
 201aca4:	e037883a 	mov	sp,fp
 201aca8:	df000017 	ldw	fp,0(sp)
 201acac:	dec00104 	addi	sp,sp,4
 201acb0:	f800283a 	ret

0201acb4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201acb4:	deffff04 	addi	sp,sp,-4
 201acb8:	df000015 	stw	fp,0(sp)
 201acbc:	d839883a 	mov	fp,sp
}
 201acc0:	0001883a 	nop
 201acc4:	e037883a 	mov	sp,fp
 201acc8:	df000017 	ldw	fp,0(sp)
 201accc:	dec00104 	addi	sp,sp,4
 201acd0:	f800283a 	ret

0201acd4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201acd4:	deffff04 	addi	sp,sp,-4
 201acd8:	df000015 	stw	fp,0(sp)
 201acdc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201ace0:	0001883a 	nop
 201ace4:	e037883a 	mov	sp,fp
 201ace8:	df000017 	ldw	fp,0(sp)
 201acec:	dec00104 	addi	sp,sp,4
 201acf0:	f800283a 	ret

0201acf4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201acf4:	deffff04 	addi	sp,sp,-4
 201acf8:	df000015 	stw	fp,0(sp)
 201acfc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201ad00:	0001883a 	nop
 201ad04:	e037883a 	mov	sp,fp
 201ad08:	df000017 	ldw	fp,0(sp)
 201ad0c:	dec00104 	addi	sp,sp,4
 201ad10:	f800283a 	ret

0201ad14 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201ad14:	deffff04 	addi	sp,sp,-4
 201ad18:	df000015 	stw	fp,0(sp)
 201ad1c:	d839883a 	mov	fp,sp
}
 201ad20:	0001883a 	nop
 201ad24:	e037883a 	mov	sp,fp
 201ad28:	df000017 	ldw	fp,0(sp)
 201ad2c:	dec00104 	addi	sp,sp,4
 201ad30:	f800283a 	ret

0201ad34 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201ad34:	deffff04 	addi	sp,sp,-4
 201ad38:	df000015 	stw	fp,0(sp)
 201ad3c:	d839883a 	mov	fp,sp
}
 201ad40:	0001883a 	nop
 201ad44:	e037883a 	mov	sp,fp
 201ad48:	df000017 	ldw	fp,0(sp)
 201ad4c:	dec00104 	addi	sp,sp,4
 201ad50:	f800283a 	ret

0201ad54 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201ad54:	defffe04 	addi	sp,sp,-8
 201ad58:	df000115 	stw	fp,4(sp)
 201ad5c:	df000104 	addi	fp,sp,4
 201ad60:	e13fff15 	stw	r4,-4(fp)
}
 201ad64:	0001883a 	nop
 201ad68:	e037883a 	mov	sp,fp
 201ad6c:	df000017 	ldw	fp,0(sp)
 201ad70:	dec00104 	addi	sp,sp,4
 201ad74:	f800283a 	ret

0201ad78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201ad78:	defffa04 	addi	sp,sp,-24
 201ad7c:	dfc00515 	stw	ra,20(sp)
 201ad80:	df000415 	stw	fp,16(sp)
 201ad84:	df000404 	addi	fp,sp,16
 201ad88:	e13ffe15 	stw	r4,-8(fp)
 201ad8c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201ad90:	e0bfff17 	ldw	r2,-4(fp)
 201ad94:	10800017 	ldw	r2,0(r2)
 201ad98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201ad9c:	e13ffe17 	ldw	r4,-8(fp)
 201ada0:	20047d80 	call	20047d8 <strlen>
 201ada4:	10800044 	addi	r2,r2,1
 201ada8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201adac:	00000d06 	br	201ade4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201adb0:	e0bffc17 	ldw	r2,-16(fp)
 201adb4:	10800217 	ldw	r2,8(r2)
 201adb8:	e0fffd17 	ldw	r3,-12(fp)
 201adbc:	180d883a 	mov	r6,r3
 201adc0:	e17ffe17 	ldw	r5,-8(fp)
 201adc4:	1009883a 	mov	r4,r2
 201adc8:	201b0ec0 	call	201b0ec <memcmp>
 201adcc:	1000021e 	bne	r2,zero,201add8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201add0:	e0bffc17 	ldw	r2,-16(fp)
 201add4:	00000706 	br	201adf4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201add8:	e0bffc17 	ldw	r2,-16(fp)
 201addc:	10800017 	ldw	r2,0(r2)
 201ade0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201ade4:	e0fffc17 	ldw	r3,-16(fp)
 201ade8:	e0bfff17 	ldw	r2,-4(fp)
 201adec:	18bff01e 	bne	r3,r2,201adb0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201adf0:	0005883a 	mov	r2,zero
}
 201adf4:	e037883a 	mov	sp,fp
 201adf8:	dfc00117 	ldw	ra,4(sp)
 201adfc:	df000017 	ldw	fp,0(sp)
 201ae00:	dec00204 	addi	sp,sp,8
 201ae04:	f800283a 	ret

0201ae08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201ae08:	defffb04 	addi	sp,sp,-20
 201ae0c:	dfc00415 	stw	ra,16(sp)
 201ae10:	df000315 	stw	fp,12(sp)
 201ae14:	df000304 	addi	fp,sp,12
 201ae18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201ae1c:	d0a00717 	ldw	r2,-32740(gp)
 201ae20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201ae24:	00003106 	br	201aeec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 201ae28:	e0bffd17 	ldw	r2,-12(fp)
 201ae2c:	10800217 	ldw	r2,8(r2)
 201ae30:	1009883a 	mov	r4,r2
 201ae34:	20047d80 	call	20047d8 <strlen>
 201ae38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201ae3c:	e0bffd17 	ldw	r2,-12(fp)
 201ae40:	10c00217 	ldw	r3,8(r2)
 201ae44:	e0bffe17 	ldw	r2,-8(fp)
 201ae48:	10bfffc4 	addi	r2,r2,-1
 201ae4c:	1885883a 	add	r2,r3,r2
 201ae50:	10800003 	ldbu	r2,0(r2)
 201ae54:	10803fcc 	andi	r2,r2,255
 201ae58:	1080201c 	xori	r2,r2,128
 201ae5c:	10bfe004 	addi	r2,r2,-128
 201ae60:	10800bd8 	cmpnei	r2,r2,47
 201ae64:	1000031e 	bne	r2,zero,201ae74 <alt_find_file+0x6c>
    {
      len -= 1;
 201ae68:	e0bffe17 	ldw	r2,-8(fp)
 201ae6c:	10bfffc4 	addi	r2,r2,-1
 201ae70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201ae74:	e0bffe17 	ldw	r2,-8(fp)
 201ae78:	e0ffff17 	ldw	r3,-4(fp)
 201ae7c:	1885883a 	add	r2,r3,r2
 201ae80:	10800003 	ldbu	r2,0(r2)
 201ae84:	10803fcc 	andi	r2,r2,255
 201ae88:	1080201c 	xori	r2,r2,128
 201ae8c:	10bfe004 	addi	r2,r2,-128
 201ae90:	10800be0 	cmpeqi	r2,r2,47
 201ae94:	1000081e 	bne	r2,zero,201aeb8 <alt_find_file+0xb0>
 201ae98:	e0bffe17 	ldw	r2,-8(fp)
 201ae9c:	e0ffff17 	ldw	r3,-4(fp)
 201aea0:	1885883a 	add	r2,r3,r2
 201aea4:	10800003 	ldbu	r2,0(r2)
 201aea8:	10803fcc 	andi	r2,r2,255
 201aeac:	1080201c 	xori	r2,r2,128
 201aeb0:	10bfe004 	addi	r2,r2,-128
 201aeb4:	10000a1e 	bne	r2,zero,201aee0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 201aeb8:	e0bffd17 	ldw	r2,-12(fp)
 201aebc:	10800217 	ldw	r2,8(r2)
 201aec0:	e0fffe17 	ldw	r3,-8(fp)
 201aec4:	180d883a 	mov	r6,r3
 201aec8:	e17fff17 	ldw	r5,-4(fp)
 201aecc:	1009883a 	mov	r4,r2
 201aed0:	201b0ec0 	call	201b0ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201aed4:	1000021e 	bne	r2,zero,201aee0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201aed8:	e0bffd17 	ldw	r2,-12(fp)
 201aedc:	00000706 	br	201aefc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201aee0:	e0bffd17 	ldw	r2,-12(fp)
 201aee4:	10800017 	ldw	r2,0(r2)
 201aee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201aeec:	e0fffd17 	ldw	r3,-12(fp)
 201aef0:	d0a00704 	addi	r2,gp,-32740
 201aef4:	18bfcc1e 	bne	r3,r2,201ae28 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201aef8:	0005883a 	mov	r2,zero
}
 201aefc:	e037883a 	mov	sp,fp
 201af00:	dfc00117 	ldw	ra,4(sp)
 201af04:	df000017 	ldw	fp,0(sp)
 201af08:	dec00204 	addi	sp,sp,8
 201af0c:	f800283a 	ret

0201af10 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201af10:	defff804 	addi	sp,sp,-32
 201af14:	dfc00715 	stw	ra,28(sp)
 201af18:	df000615 	stw	fp,24(sp)
 201af1c:	dc000515 	stw	r16,20(sp)
 201af20:	df000604 	addi	fp,sp,24
 201af24:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 201af28:	00bffa04 	movi	r2,-24
 201af2c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201af30:	d0a71d17 	ldw	r2,-25484(gp)
 201af34:	e0bffc15 	stw	r2,-16(fp)
 201af38:	e03ffd0d 	sth	zero,-12(fp)
 201af3c:	e0bffd0b 	ldhu	r2,-12(fp)
 201af40:	e0fffd84 	addi	r3,fp,-10
 201af44:	180d883a 	mov	r6,r3
 201af48:	100b883a 	mov	r5,r2
 201af4c:	e13ffc17 	ldw	r4,-16(fp)
 201af50:	2016cc80 	call	2016cc8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201af54:	e03ffa15 	stw	zero,-24(fp)
 201af58:	00001d06 	br	201afd0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 201af5c:	040080b4 	movhi	r16,514
 201af60:	84308b04 	addi	r16,r16,-15828
 201af64:	e0bffa17 	ldw	r2,-24(fp)
 201af68:	01400304 	movi	r5,12
 201af6c:	1009883a 	mov	r4,r2
 201af70:	20019440 	call	2001944 <__mulsi3>
 201af74:	8085883a 	add	r2,r16,r2
 201af78:	10800017 	ldw	r2,0(r2)
 201af7c:	1000111e 	bne	r2,zero,201afc4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 201af80:	040080b4 	movhi	r16,514
 201af84:	84308b04 	addi	r16,r16,-15828
 201af88:	e0bffa17 	ldw	r2,-24(fp)
 201af8c:	01400304 	movi	r5,12
 201af90:	1009883a 	mov	r4,r2
 201af94:	20019440 	call	2001944 <__mulsi3>
 201af98:	8085883a 	add	r2,r16,r2
 201af9c:	e0fffe17 	ldw	r3,-8(fp)
 201afa0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201afa4:	d0e00b17 	ldw	r3,-32724(gp)
 201afa8:	e0bffa17 	ldw	r2,-24(fp)
 201afac:	1880020e 	bge	r3,r2,201afb8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 201afb0:	e0bffa17 	ldw	r2,-24(fp)
 201afb4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 201afb8:	e0bffa17 	ldw	r2,-24(fp)
 201afbc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 201afc0:	00000606 	br	201afdc <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201afc4:	e0bffa17 	ldw	r2,-24(fp)
 201afc8:	10800044 	addi	r2,r2,1
 201afcc:	e0bffa15 	stw	r2,-24(fp)
 201afd0:	e0bffa17 	ldw	r2,-24(fp)
 201afd4:	10800810 	cmplti	r2,r2,32
 201afd8:	103fe01e 	bne	r2,zero,201af5c <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201afdc:	d0a71d17 	ldw	r2,-25484(gp)
 201afe0:	1009883a 	mov	r4,r2
 201afe4:	20170400 	call	2017040 <OSSemPost>

  return rc;
 201afe8:	e0bffb17 	ldw	r2,-20(fp)
}
 201afec:	e6ffff04 	addi	sp,fp,-4
 201aff0:	dfc00217 	ldw	ra,8(sp)
 201aff4:	df000117 	ldw	fp,4(sp)
 201aff8:	dc000017 	ldw	r16,0(sp)
 201affc:	dec00304 	addi	sp,sp,12
 201b000:	f800283a 	ret

0201b004 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201b004:	defffe04 	addi	sp,sp,-8
 201b008:	df000115 	stw	fp,4(sp)
 201b00c:	df000104 	addi	fp,sp,4
 201b010:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201b014:	e0bfff17 	ldw	r2,-4(fp)
 201b018:	10bffe84 	addi	r2,r2,-6
 201b01c:	10c00428 	cmpgeui	r3,r2,16
 201b020:	18001a1e 	bne	r3,zero,201b08c <alt_exception_cause_generated_bad_addr+0x88>
 201b024:	100690ba 	slli	r3,r2,2
 201b028:	008080b4 	movhi	r2,514
 201b02c:	10ac0f04 	addi	r2,r2,-20420
 201b030:	1885883a 	add	r2,r3,r2
 201b034:	10800017 	ldw	r2,0(r2)
 201b038:	1000683a 	jmp	r2
 201b03c:	0201b07c 	xorhi	r8,zero,1729
 201b040:	0201b07c 	xorhi	r8,zero,1729
 201b044:	0201b08c 	andi	r8,zero,1730
 201b048:	0201b08c 	andi	r8,zero,1730
 201b04c:	0201b08c 	andi	r8,zero,1730
 201b050:	0201b07c 	xorhi	r8,zero,1729
 201b054:	0201b084 	movi	r8,1730
 201b058:	0201b08c 	andi	r8,zero,1730
 201b05c:	0201b07c 	xorhi	r8,zero,1729
 201b060:	0201b07c 	xorhi	r8,zero,1729
 201b064:	0201b08c 	andi	r8,zero,1730
 201b068:	0201b07c 	xorhi	r8,zero,1729
 201b06c:	0201b084 	movi	r8,1730
 201b070:	0201b08c 	andi	r8,zero,1730
 201b074:	0201b08c 	andi	r8,zero,1730
 201b078:	0201b07c 	xorhi	r8,zero,1729
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201b07c:	00800044 	movi	r2,1
 201b080:	00000306 	br	201b090 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201b084:	0005883a 	mov	r2,zero
 201b088:	00000106 	br	201b090 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201b08c:	0005883a 	mov	r2,zero
  }
}
 201b090:	e037883a 	mov	sp,fp
 201b094:	df000017 	ldw	fp,0(sp)
 201b098:	dec00104 	addi	sp,sp,4
 201b09c:	f800283a 	ret

0201b0a0 <atexit>:
 201b0a0:	200b883a 	mov	r5,r4
 201b0a4:	000f883a 	mov	r7,zero
 201b0a8:	000d883a 	mov	r6,zero
 201b0ac:	0009883a 	mov	r4,zero
 201b0b0:	201b1681 	jmpi	201b168 <__register_exitproc>

0201b0b4 <exit>:
 201b0b4:	defffe04 	addi	sp,sp,-8
 201b0b8:	000b883a 	mov	r5,zero
 201b0bc:	dc000015 	stw	r16,0(sp)
 201b0c0:	dfc00115 	stw	ra,4(sp)
 201b0c4:	2021883a 	mov	r16,r4
 201b0c8:	201b2800 	call	201b280 <__call_exitprocs>
 201b0cc:	008080b4 	movhi	r2,514
 201b0d0:	10b50704 	addi	r2,r2,-11236
 201b0d4:	11000017 	ldw	r4,0(r2)
 201b0d8:	20800f17 	ldw	r2,60(r4)
 201b0dc:	10000126 	beq	r2,zero,201b0e4 <exit+0x30>
 201b0e0:	103ee83a 	callr	r2
 201b0e4:	8009883a 	mov	r4,r16
 201b0e8:	201b4000 	call	201b400 <_exit>

0201b0ec <memcmp>:
 201b0ec:	01c000c4 	movi	r7,3
 201b0f0:	3980192e 	bgeu	r7,r6,201b158 <memcmp+0x6c>
 201b0f4:	2144b03a 	or	r2,r4,r5
 201b0f8:	11c4703a 	and	r2,r2,r7
 201b0fc:	10000f26 	beq	r2,zero,201b13c <memcmp+0x50>
 201b100:	20800003 	ldbu	r2,0(r4)
 201b104:	28c00003 	ldbu	r3,0(r5)
 201b108:	10c0151e 	bne	r2,r3,201b160 <memcmp+0x74>
 201b10c:	31bfff84 	addi	r6,r6,-2
 201b110:	01ffffc4 	movi	r7,-1
 201b114:	00000406 	br	201b128 <memcmp+0x3c>
 201b118:	20800003 	ldbu	r2,0(r4)
 201b11c:	28c00003 	ldbu	r3,0(r5)
 201b120:	31bfffc4 	addi	r6,r6,-1
 201b124:	10c00e1e 	bne	r2,r3,201b160 <memcmp+0x74>
 201b128:	21000044 	addi	r4,r4,1
 201b12c:	29400044 	addi	r5,r5,1
 201b130:	31fff91e 	bne	r6,r7,201b118 <memcmp+0x2c>
 201b134:	0005883a 	mov	r2,zero
 201b138:	f800283a 	ret
 201b13c:	20c00017 	ldw	r3,0(r4)
 201b140:	28800017 	ldw	r2,0(r5)
 201b144:	18bfee1e 	bne	r3,r2,201b100 <memcmp+0x14>
 201b148:	31bfff04 	addi	r6,r6,-4
 201b14c:	21000104 	addi	r4,r4,4
 201b150:	29400104 	addi	r5,r5,4
 201b154:	39bff936 	bltu	r7,r6,201b13c <memcmp+0x50>
 201b158:	303fe91e 	bne	r6,zero,201b100 <memcmp+0x14>
 201b15c:	003ff506 	br	201b134 <memcmp+0x48>
 201b160:	10c5c83a 	sub	r2,r2,r3
 201b164:	f800283a 	ret

0201b168 <__register_exitproc>:
 201b168:	defffa04 	addi	sp,sp,-24
 201b16c:	dc000315 	stw	r16,12(sp)
 201b170:	040080b4 	movhi	r16,514
 201b174:	84350704 	addi	r16,r16,-11236
 201b178:	80c00017 	ldw	r3,0(r16)
 201b17c:	dc400415 	stw	r17,16(sp)
 201b180:	dfc00515 	stw	ra,20(sp)
 201b184:	18805217 	ldw	r2,328(r3)
 201b188:	2023883a 	mov	r17,r4
 201b18c:	10003726 	beq	r2,zero,201b26c <__register_exitproc+0x104>
 201b190:	10c00117 	ldw	r3,4(r2)
 201b194:	010007c4 	movi	r4,31
 201b198:	20c00e16 	blt	r4,r3,201b1d4 <__register_exitproc+0x6c>
 201b19c:	1a000044 	addi	r8,r3,1
 201b1a0:	8800221e 	bne	r17,zero,201b22c <__register_exitproc+0xc4>
 201b1a4:	18c00084 	addi	r3,r3,2
 201b1a8:	18c7883a 	add	r3,r3,r3
 201b1ac:	18c7883a 	add	r3,r3,r3
 201b1b0:	12000115 	stw	r8,4(r2)
 201b1b4:	10c7883a 	add	r3,r2,r3
 201b1b8:	19400015 	stw	r5,0(r3)
 201b1bc:	0005883a 	mov	r2,zero
 201b1c0:	dfc00517 	ldw	ra,20(sp)
 201b1c4:	dc400417 	ldw	r17,16(sp)
 201b1c8:	dc000317 	ldw	r16,12(sp)
 201b1cc:	dec00604 	addi	sp,sp,24
 201b1d0:	f800283a 	ret
 201b1d4:	00800034 	movhi	r2,0
 201b1d8:	10800004 	addi	r2,r2,0
 201b1dc:	10002626 	beq	r2,zero,201b278 <__register_exitproc+0x110>
 201b1e0:	01006404 	movi	r4,400
 201b1e4:	d9400015 	stw	r5,0(sp)
 201b1e8:	d9800115 	stw	r6,4(sp)
 201b1ec:	d9c00215 	stw	r7,8(sp)
 201b1f0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201b1f4:	d9400017 	ldw	r5,0(sp)
 201b1f8:	d9800117 	ldw	r6,4(sp)
 201b1fc:	d9c00217 	ldw	r7,8(sp)
 201b200:	10001d26 	beq	r2,zero,201b278 <__register_exitproc+0x110>
 201b204:	81000017 	ldw	r4,0(r16)
 201b208:	10000115 	stw	zero,4(r2)
 201b20c:	02000044 	movi	r8,1
 201b210:	22405217 	ldw	r9,328(r4)
 201b214:	0007883a 	mov	r3,zero
 201b218:	12400015 	stw	r9,0(r2)
 201b21c:	20805215 	stw	r2,328(r4)
 201b220:	10006215 	stw	zero,392(r2)
 201b224:	10006315 	stw	zero,396(r2)
 201b228:	883fde26 	beq	r17,zero,201b1a4 <__register_exitproc+0x3c>
 201b22c:	18c9883a 	add	r4,r3,r3
 201b230:	2109883a 	add	r4,r4,r4
 201b234:	1109883a 	add	r4,r2,r4
 201b238:	21802215 	stw	r6,136(r4)
 201b23c:	01800044 	movi	r6,1
 201b240:	12406217 	ldw	r9,392(r2)
 201b244:	30cc983a 	sll	r6,r6,r3
 201b248:	4992b03a 	or	r9,r9,r6
 201b24c:	12406215 	stw	r9,392(r2)
 201b250:	21c04215 	stw	r7,264(r4)
 201b254:	01000084 	movi	r4,2
 201b258:	893fd21e 	bne	r17,r4,201b1a4 <__register_exitproc+0x3c>
 201b25c:	11006317 	ldw	r4,396(r2)
 201b260:	218cb03a 	or	r6,r4,r6
 201b264:	11806315 	stw	r6,396(r2)
 201b268:	003fce06 	br	201b1a4 <__register_exitproc+0x3c>
 201b26c:	18805304 	addi	r2,r3,332
 201b270:	18805215 	stw	r2,328(r3)
 201b274:	003fc606 	br	201b190 <__register_exitproc+0x28>
 201b278:	00bfffc4 	movi	r2,-1
 201b27c:	003fd006 	br	201b1c0 <__register_exitproc+0x58>

0201b280 <__call_exitprocs>:
 201b280:	defff504 	addi	sp,sp,-44
 201b284:	df000915 	stw	fp,36(sp)
 201b288:	dd400615 	stw	r21,24(sp)
 201b28c:	dc800315 	stw	r18,12(sp)
 201b290:	dfc00a15 	stw	ra,40(sp)
 201b294:	ddc00815 	stw	r23,32(sp)
 201b298:	dd800715 	stw	r22,28(sp)
 201b29c:	dd000515 	stw	r20,20(sp)
 201b2a0:	dcc00415 	stw	r19,16(sp)
 201b2a4:	dc400215 	stw	r17,8(sp)
 201b2a8:	dc000115 	stw	r16,4(sp)
 201b2ac:	d9000015 	stw	r4,0(sp)
 201b2b0:	2839883a 	mov	fp,r5
 201b2b4:	04800044 	movi	r18,1
 201b2b8:	057fffc4 	movi	r21,-1
 201b2bc:	008080b4 	movhi	r2,514
 201b2c0:	10b50704 	addi	r2,r2,-11236
 201b2c4:	12000017 	ldw	r8,0(r2)
 201b2c8:	45005217 	ldw	r20,328(r8)
 201b2cc:	44c05204 	addi	r19,r8,328
 201b2d0:	a0001c26 	beq	r20,zero,201b344 <__call_exitprocs+0xc4>
 201b2d4:	a0800117 	ldw	r2,4(r20)
 201b2d8:	15ffffc4 	addi	r23,r2,-1
 201b2dc:	b8000d16 	blt	r23,zero,201b314 <__call_exitprocs+0x94>
 201b2e0:	14000044 	addi	r16,r2,1
 201b2e4:	8421883a 	add	r16,r16,r16
 201b2e8:	8421883a 	add	r16,r16,r16
 201b2ec:	84402004 	addi	r17,r16,128
 201b2f0:	a463883a 	add	r17,r20,r17
 201b2f4:	a421883a 	add	r16,r20,r16
 201b2f8:	e0001e26 	beq	fp,zero,201b374 <__call_exitprocs+0xf4>
 201b2fc:	80804017 	ldw	r2,256(r16)
 201b300:	e0801c26 	beq	fp,r2,201b374 <__call_exitprocs+0xf4>
 201b304:	bdffffc4 	addi	r23,r23,-1
 201b308:	843fff04 	addi	r16,r16,-4
 201b30c:	8c7fff04 	addi	r17,r17,-4
 201b310:	bd7ff91e 	bne	r23,r21,201b2f8 <__call_exitprocs+0x78>
 201b314:	00800034 	movhi	r2,0
 201b318:	10800004 	addi	r2,r2,0
 201b31c:	10000926 	beq	r2,zero,201b344 <__call_exitprocs+0xc4>
 201b320:	a0800117 	ldw	r2,4(r20)
 201b324:	1000301e 	bne	r2,zero,201b3e8 <__call_exitprocs+0x168>
 201b328:	a0800017 	ldw	r2,0(r20)
 201b32c:	10003226 	beq	r2,zero,201b3f8 <__call_exitprocs+0x178>
 201b330:	a009883a 	mov	r4,r20
 201b334:	98800015 	stw	r2,0(r19)
 201b338:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201b33c:	9d000017 	ldw	r20,0(r19)
 201b340:	a03fe41e 	bne	r20,zero,201b2d4 <__call_exitprocs+0x54>
 201b344:	dfc00a17 	ldw	ra,40(sp)
 201b348:	df000917 	ldw	fp,36(sp)
 201b34c:	ddc00817 	ldw	r23,32(sp)
 201b350:	dd800717 	ldw	r22,28(sp)
 201b354:	dd400617 	ldw	r21,24(sp)
 201b358:	dd000517 	ldw	r20,20(sp)
 201b35c:	dcc00417 	ldw	r19,16(sp)
 201b360:	dc800317 	ldw	r18,12(sp)
 201b364:	dc400217 	ldw	r17,8(sp)
 201b368:	dc000117 	ldw	r16,4(sp)
 201b36c:	dec00b04 	addi	sp,sp,44
 201b370:	f800283a 	ret
 201b374:	a0800117 	ldw	r2,4(r20)
 201b378:	80c00017 	ldw	r3,0(r16)
 201b37c:	10bfffc4 	addi	r2,r2,-1
 201b380:	15c01426 	beq	r2,r23,201b3d4 <__call_exitprocs+0x154>
 201b384:	80000015 	stw	zero,0(r16)
 201b388:	183fde26 	beq	r3,zero,201b304 <__call_exitprocs+0x84>
 201b38c:	95c8983a 	sll	r4,r18,r23
 201b390:	a0806217 	ldw	r2,392(r20)
 201b394:	a5800117 	ldw	r22,4(r20)
 201b398:	2084703a 	and	r2,r4,r2
 201b39c:	10000b26 	beq	r2,zero,201b3cc <__call_exitprocs+0x14c>
 201b3a0:	a0806317 	ldw	r2,396(r20)
 201b3a4:	2088703a 	and	r4,r4,r2
 201b3a8:	20000c1e 	bne	r4,zero,201b3dc <__call_exitprocs+0x15c>
 201b3ac:	89400017 	ldw	r5,0(r17)
 201b3b0:	d9000017 	ldw	r4,0(sp)
 201b3b4:	183ee83a 	callr	r3
 201b3b8:	a0800117 	ldw	r2,4(r20)
 201b3bc:	15bfbf1e 	bne	r2,r22,201b2bc <__call_exitprocs+0x3c>
 201b3c0:	98800017 	ldw	r2,0(r19)
 201b3c4:	153fcf26 	beq	r2,r20,201b304 <__call_exitprocs+0x84>
 201b3c8:	003fbc06 	br	201b2bc <__call_exitprocs+0x3c>
 201b3cc:	183ee83a 	callr	r3
 201b3d0:	003ff906 	br	201b3b8 <__call_exitprocs+0x138>
 201b3d4:	a5c00115 	stw	r23,4(r20)
 201b3d8:	003feb06 	br	201b388 <__call_exitprocs+0x108>
 201b3dc:	89000017 	ldw	r4,0(r17)
 201b3e0:	183ee83a 	callr	r3
 201b3e4:	003ff406 	br	201b3b8 <__call_exitprocs+0x138>
 201b3e8:	a0800017 	ldw	r2,0(r20)
 201b3ec:	a027883a 	mov	r19,r20
 201b3f0:	1029883a 	mov	r20,r2
 201b3f4:	003fb606 	br	201b2d0 <__call_exitprocs+0x50>
 201b3f8:	0005883a 	mov	r2,zero
 201b3fc:	003ffb06 	br	201b3ec <__call_exitprocs+0x16c>

0201b400 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201b400:	defffd04 	addi	sp,sp,-12
 201b404:	df000215 	stw	fp,8(sp)
 201b408:	df000204 	addi	fp,sp,8
 201b40c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201b410:	d0272545 	stb	zero,-25451(gp)
 201b414:	e0bfff17 	ldw	r2,-4(fp)
 201b418:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201b41c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 201b420:	10000226 	beq	r2,zero,201b42c <_exit+0x2c>
    ALT_SIM_FAIL();
 201b424:	002af070 	cmpltui	zero,zero,43969
 201b428:	00000106 	br	201b430 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201b42c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 201b430:	003fff06 	br	201b430 <_exit+0x30>
