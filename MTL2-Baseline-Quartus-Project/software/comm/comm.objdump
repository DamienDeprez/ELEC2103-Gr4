
comm.elf:     file format elf32-littlenios2
comm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001ee68 memsz 0x0001ee68 flags r-x
    LOAD off    0x0001fe88 vaddr 0x0201ee88 paddr 0x02020a2c align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x000225d0 vaddr 0x020225d0 paddr 0x020225d0 align 2**12
         filesz 0x00000000 memsz 0x0000b42c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e5fc  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000648  0201e840  0201e840  0001f840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  0201ee88  02020a2c  0001fe88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b42c  020225d0  020225d0  000225d0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  00021a2c  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0202d9fc  0202d9fc  00021a2c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00021a2c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e8  00000000  00000000  00021a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002bcc8  00000000  00000000  00022b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a36b  00000000  00000000  0004e800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d67c  00000000  00000000  00058b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003720  00000000  00000000  000661e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000541c  00000000  00000000  00069908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  0006ed24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00077d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013b0  00000000  00000000  00077db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0007e02e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007e034  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e037  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e038  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e039  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e03d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e041  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007e045  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007e04e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007e057  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007e060  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0007e069  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  0007e0a8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000575f4  00000000  00000000  00081e27  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
0201e840 l    d  .rodata	00000000 .rodata
0201ee88 l    d  .rwdata	00000000 .rwdata
020225d0 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
0202d9fc l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../comm_bsp//obj/HAL/src/crt0.o
0200028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
020052b8 l     F .text	000000f0 __sbprintf
020074c8 l     F .text	0000020c cvt
020076d4 l     F .text	00000140 exponent
0201eb5a l     O .rodata	00000010 blanks.4403
0201eb6a l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
020079b4 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02009cc0 l     F .text	000000f4 std
02022604 l     O .bss	00000004 __sfp_lock
02022608 l     O .bss	00000004 __sinit_lock
0200a1bc l     F .text	00000024 __fp_lock
0200a1e0 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201eeb8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0201f2dc l     O .rwdata	00000038 lconv
0201f314 l     O .rwdata	00000020 lc_ctype_charset
0201f334 l     O .rwdata	00000020 lc_message_charset
02022618 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200b510 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0201ecc0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200f3bc l     F .text	000000f0 __sbprintf
0201ed16 l     O .rodata	00000010 blanks.4348
0201ed26 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
020132f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02013404 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02013430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0201351c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020135fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020136e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
020138b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020209a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02013b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020209a4 l     O .rwdata	00000004 lockid
0202263c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020209a8 l     O .rwdata	00000004 lockid
02022644 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02015530 l     F .text	00000048 OS_InitMisc
02015578 l     F .text	0000006c OS_InitRdyList
020156e4 l     F .text	000000e4 OS_InitTCBList
02015450 l     F .text	000000e0 OS_InitEventList
020155e4 l     F .text	00000080 OS_InitTaskIdle
02015664 l     F .text	00000080 OS_InitTaskStat
02015954 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02017664 l     F .text	000000f4 OS_FlagTaskRdy
02017424 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201c1d0 l     F .text	00000034 alt_dev_reg
0201f904 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201c548 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0201c7ec l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201cfc8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201d230 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201d6a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201d7e4 l     F .text	0000003c alt_get_errno
0201d820 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020226ac l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
020226a8 g     O .bss	00000004 alt_instruction_exception_handler
0200dfc8 g     F .text	000000b0 _mprec_log10
020209f6 g     O .rwdata	00000002 OSTaskNameSize
0200e148 g     F .text	00000134 __any_on
02010ea4 g     F .text	00000060 _isatty_r
0201ec98 g     O .rodata	00000028 __mprec_tinytens
020137f8 g     F .text	000000bc alt_main
020225d0 g     O .bss	00000004 MailBox9
02005074 g     F .text	00000118 _puts_r
0202d8fc g     O .bss	00000100 alt_irq
020225d4 g     O .bss	00000004 MailBox6
02010f04 g     F .text	00000070 _lseek_r
0201894c g     F .text	000000cc OS_MemInit
02020a2c g       *ABS*	00000000 __flash_rwdata_start
0201c170 g     F .text	00000060 OSTimeSet
02012770 g     F .text	00000088 .hidden __eqdf2
020141a4 g     F .text	00000610 OSEventPendMulti
0202d9fc g       *ABS*	00000000 __alt_heap_start
0201de2c g     F .text	00000024 OSTaskCreateHook
020226d8 g     O .bss	00002000 task1_stk
0200500c g     F .text	00000068 printf
020209ce g     O .rwdata	00000002 OSMboxEn
0201480c g     F .text	0000004c OSIntEnter
0201118c g     F .text	000000d4 _wcrtomb_r
0200f04c g     F .text	000000a0 __sseek
0200a064 g     F .text	000000d8 __sinit
02010fe4 g     F .text	00000168 __swbuf_r
020209de g     O .rwdata	00000002 OSQEn
0200b140 g     F .text	00000084 _setlocale_r
02009db4 g     F .text	000000a4 __sfmoreglue
02013e78 g     F .text	000000cc __malloc_unlock
0201de94 g     F .text	00000020 OSTaskStatHook
0202264c g     O .bss	00000001 OSLockNesting
02020a1c g     O .rwdata	00000002 OSDataSize
0202264d g     O .bss	00000001 OSRunning
0200c5fc g     F .text	00000208 memmove
0201ded4 g     F .text	00000020 OSInitHookBegin
02020a14 g     O .rwdata	00000002 OSTmrSize
0200a030 g     F .text	00000034 _cleanup
0200c804 g     F .text	00000130 _Balloc
02022650 g     O .bss	00000004 OSIdleCtr
02003ea4 g     F .text	000000dc .hidden __gtdf2
0201dbdc g     F .text	00000024 altera_nios2_gen2_irq_init
0201dcac g       .text	00000000 OSStartTsk
02015c84 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
02020a1a g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020209ba g     O .rwdata	00000002 OSEventSize
02022654 g     O .bss	00000001 OSPrioHighRdy
02010e3c g     F .text	00000068 _fstat_r
0201de50 g     F .text	00000024 OSTaskDelHook
02022628 g     O .bss	00000004 errno
0200ef68 g     F .text	00000030 __seofread
0201dc8c g       .text	00000000 OSStartHighRdy
0201ac18 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02016f6c g     F .text	00000060 OSFlagPendGetFlagsRdy
020209fa g     O .rwdata	00000002 OSTaskStatStkSize
020160e8 g     F .text	00000308 OSFlagAccept
02018f84 g     F .text	000000b8 OSQFlush
02018a18 g     F .text	00000140 OSQAccept
02022634 g     O .bss	00000004 alt_argv
02028970 g       *ABS*	00000000 _gp
0201aa6c g     F .text	000001ac OSTaskCreate
02003318 g     F .text	000000f4 damping
0201a57c g     F .text	000004f0 OSTaskChangePrio
02022648 g     O .bss	00000004 alt_heapsem
0200275c g     F .text	0000009c task4
02015f58 g     F .text	00000190 OSDebugInit
0201adfc g     F .text	00000344 OSTaskDel
0201f784 g     O .rwdata	00000180 alt_fd_list
0202a6d8 g     O .bss	00000370 OSFlagTbl
02015230 g     F .text	000000b8 OS_EventTaskRemove
0201df58 g     F .text	00000090 alt_find_dev
02004c5c g     F .text	00000188 memcpy
020209e4 g     O .rwdata	00000002 OSRdyTblSize
020225d8 g     O .bss	00000004 MailBox3
02009fec g     F .text	00000044 _cleanup_r
02013174 g     F .text	000000dc .hidden __floatsidf
0201d768 g     F .text	0000007c alt_io_redirect
02003f80 g     F .text	000000f4 .hidden __ltdf2
0201e840 g       *ABS*	00000000 __DTOR_END__
0200518c g     F .text	00000038 puts
0201e25c g     F .text	0000009c alt_exception_cause_generated_bad_addr
02013f44 g     F .text	00000120 OSEventNameGet
020209c8 g     O .rwdata	00000002 OSFlagMax
020034b8 g     F .text	00000104 __fpclassifyd
0200deac g     F .text	0000011c __ratio
02014858 g     F .text	000000f8 OSIntExit
0200f4ac g     F .text	00000050 __vfiprintf_internal
02020a02 g     O .rwdata	00000002 OSTCBSize
02022655 g     O .bss	00000001 OSPrioCur
0201ca48 g     F .text	000002bc altera_avalon_jtag_uart_read
02004fa8 g     F .text	00000064 _printf_r
02004ba0 g     F .text	00000064 .hidden __udivsi3
02013558 g     F .text	000000a4 isatty
020209e8 g     O .rwdata	00000002 OSStkWidth
0201eba8 g     O .rodata	000000c8 __mprec_tens
020209dc g     O .rwdata	00000002 OSPtrSize
0200b1c4 g     F .text	00000024 __locale_charset
020209bc g     O .rwdata	00000002 OSEventTblSize
0201dc00 g       .text	00000000 OSCtxSw
0201e1cc g     F .text	00000090 alt_icache_flush
0202261c g     O .bss	00000004 __malloc_top_pad
02022658 g     O .bss	00000004 OSTCBList
0202262c g     O .bss	00000004 alt_fd_list_lock
02020978 g     O .rwdata	00000004 __mb_cur_max
0200b24c g     F .text	00000028 _localeconv_r
0200ce4c g     F .text	00000058 __i2b
0200a9b0 g     F .text	000005dc __sfvwrite_r
0202aa48 g     O .bss	00000c30 OSMemTbl
0202265c g     O .bss	00000001 OSTickStepState
0200ee6c g     F .text	00000060 _sbrk_r
020209e0 g     O .rwdata	00000002 OSQMax
0202b678 g     O .bss	00000800 OSTaskStatStk
02018588 g     F .text	000000f0 OSMemNameGet
020246d8 g     O .bss	00002000 task4_stk
020209c0 g     O .rwdata	00000002 OSFlagEn
02010f74 g     F .text	00000070 _read_r
02020a06 g     O .rwdata	00000002 OSTimeTickHookEn
02019434 g     F .text	00000168 OSQPost
02017758 g     F .text	000000a4 OS_FlagUnlink
02020998 g     O .rwdata	00000004 alt_max_fd
0201581c g     F .text	00000068 OS_MemCopy
02015884 g     F .text	000000d0 OS_Sched
020109f4 g     F .text	0000012c _fclose_r
02018498 g     F .text	000000f0 OSMemGet
020181b4 g     F .text	00000110 OSMboxQuery
0201b428 g     F .text	000001b4 OSTaskNameSet
02009c6c g     F .text	00000054 fflush
02022620 g     O .bss	00000004 __malloc_max_sbrked_mem
02022660 g     O .bss	00000004 OSCtxSwCtr
0201deb4 g     F .text	00000020 OSTimeTickHook
020209ca g     O .rwdata	00000002 OSFlagNameSize
020225dc g     O .bss	00000004 AnimationFlagGrp
0200478c g     F .text	00000110 .hidden __extendsfdf2
020152e8 g     F .text	00000100 OS_EventTaskRemoveMulti
02011ec4 g     F .text	000008ac .hidden __adddf3
020150e0 g     F .text	00000150 OS_EventTaskWaitMulti
0200da68 g     F .text	00000204 __b2d
020209e2 g     O .rwdata	00000002 OSQSize
0201198c g     F .text	00000538 .hidden __umoddi3
02013724 g     F .text	000000d4 lseek
02019ee4 g     F .text	0000020c OSSemPend
02002c90 g     F .text	00000064 momentum
02020974 g     O .rwdata	00000004 _global_impure_ptr
0200e27c g     F .text	00000bf0 _realloc_r
020209cc g     O .rwdata	00000002 OSLowestPrio
0202d9fc g       *ABS*	00000000 __bss_end
0201d5b4 g     F .text	000000f0 alt_iic_isr_register
0201df34 g     F .text	00000024 OSTCBInitHook
02020a12 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0201dad4 g     F .text	00000108 alt_tick
02017f48 g     F .text	00000110 OSMboxPost
02011414 g     F .text	00000578 .hidden __udivdi3
02010d4c g     F .text	00000088 _fputwc_r
020209b4 g     O .rwdata	00000002 OSEventEn
0201ec70 g     O .rodata	00000028 __mprec_bigtens
0200cb44 g     F .text	0000018c __s2b
02020a0e g     O .rwdata	00000002 OSTmrCfgNameSize
02013250 g     F .text	000000a8 .hidden __floatunsidf
0200d5e4 g     F .text	00000114 __mcmp
0200a204 g     F .text	00000040 __fp_lock_all
0201d568 g     F .text	0000004c alt_ic_irq_enabled
020225e0 g     O .bss	00000004 MailBox5
02017584 g     F .text	000000e0 OS_FlagInit
0201da38 g     F .text	0000009c alt_alarm_stop
020209f0 g     O .rwdata	00000002 OSTaskIdleStkSize
0202269c g     O .bss	00000004 alt_irq_active
02019b1c g     F .text	000000b0 OSSemAccept
0201878c g     F .text	000000d8 OSMemPut
020182c4 g     F .text	000001d4 OSMemCreate
02022664 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201f75c g     O .rwdata	00000028 alt_dev_null
02020a04 g     O .rwdata	00000002 OSTicksPerSec
0201dc00 g       .text	00000000 OSIntCtxSw
0201d1e8 g     F .text	00000048 alt_dcache_flush_all
0200ccd0 g     F .text	00000090 __hi0bits
020130f4 g     F .text	00000080 .hidden __fixdfsi
02022668 g     O .bss	00000004 OSTCBFreeList
02020a2c g       *ABS*	00000000 __ram_rwdata_end
0201a0f0 g     F .text	0000016c OSSemPendAbort
02020990 g     O .rwdata	00000008 alt_dev_list
02013b3c g     F .text	000000f8 write
020225e4 g     O .bss	00000004 ActivateTask4Grp
02020a08 g     O .rwdata	00000002 OSVersionNbr
0201ee88 g       *ABS*	00000000 __ram_rodata_end
0201346c g     F .text	000000b0 fstat
02003f80 g     F .text	000000f4 .hidden __ledf2
020209b0 g     O .rwdata	00000004 OSEndiannessTest
0200d274 g     F .text	00000178 __pow5mult
0200f4fc g     F .text	000012c4 ___vfiprintf_internal_r
0202260c g     O .bss	00000004 __nlocale_changed
02004c04 g     F .text	00000058 .hidden __umodsi3
020209c2 g     O .rwdata	00000002 OSFlagGrpSize
0202d9fc g       *ABS*	00000000 end
0201c400 g     F .text	00000148 altera_avalon_jtag_uart_init
02015aec g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0201e840 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0201d040 g     F .text	0000007c alt_avalon_timer_sc_init
02004a44 g     F .text	00000064 .hidden __clzsi2
0201cd04 g     F .text	000002c4 altera_avalon_jtag_uart_write
0200a13c g     F .text	00000020 __sfp_lock_acquire
0200c440 g     F .text	000001bc memchr
020157c8 g     F .text	00000054 OS_MemClr
020053f8 g     F .text	000020d0 ___vfprintf_internal_r
0201dcd0 g     F .text	0000015c OSTaskStkInit
02000290 g     F .text	00000210 task1
0201ee88 g     O .rwdata	00000030 whole_list
0200a284 g     F .text	00000560 _free_r
0200b1e8 g     F .text	00000020 __locale_mb_cur_max
02014e38 g     F .text	00000198 OS_EventTaskRdy
0201e620 g     F .text	000001ec __call_exitprocs
0202266c g     O .bss	00000001 OSCPUUsage
02022610 g     O .bss	00000004 __mlocale_changed
02020980 g     O .rwdata	00000004 __malloc_sbrk_base
02000244 g     F .text	0000004c _start
020004a0 g     F .text	00001e90 task2
020226a0 g     O .bss	00000004 _alt_tick_rate
0201903c g     F .text	0000028c OSQPend
0201bce8 g     F .text	00000104 OSTimeDly
02002b38 g     F .text	00000158 borderCollide
0200d3ec g     F .text	000001f8 __lshift
020226a4 g     O .bss	00000004 _alt_nticks
020138f0 g     F .text	000000fc read
0201c23c g     F .text	00000060 alt_sys_init
0201e4b0 g     F .text	00000170 __register_exitproc
0202266d g     O .bss	00000001 OSTaskCtr
020225e8 g     O .bss	00000004 MailBox2
0201bdec g     F .text	00000154 OSTimeDlyHMSM
0200cea4 g     F .text	000003d0 __multiply
0201c8f0 g     F .text	00000068 altera_avalon_jtag_uart_close
0201ee88 g       *ABS*	00000000 __ram_rwdata_start
0201e840 g       *ABS*	00000000 __ram_rodata_start
020226b0 g     O .bss	00000028 __malloc_current_mallinfo
020209b6 g     O .rwdata	00000002 OSEventMax
0200dc6c g     F .text	00000240 __d2b
0201a25c g     F .text	00000110 OSSemPost
020149dc g     F .text	000000dc OSSchedUnlock
0200340c g     F .text	000000ac fmin
0201c29c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201e0f0 g     F .text	000000dc alt_get_fd
02022670 g     O .bss	00000004 OSMemFreeList
02014b28 g     F .text	000000b0 OSStatInit
02017360 g     F .text	000000c4 OSFlagQuery
020209ec g     O .rwdata	00000002 OSTaskCreateExtEn
02010830 g     F .text	00000060 _close_r
0201e37c g     F .text	00000134 memcmp
02014e18 g     F .text	00000020 OS_Dummy
0201c35c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0202d9fc g       *ABS*	00000000 __alt_stack_base
0201c3ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02007814 g     F .text	000001a0 __swsetup_r
0202be78 g     O .bss	000001e0 OSQTbl
020035bc g     F .text	000008e8 .hidden __divdf3
02009e58 g     F .text	00000194 __sfp
0200e078 g     F .text	000000d0 __copybits
0201f354 g     O .rwdata	00000408 __malloc_av_
0200a19c g     F .text	00000020 __sinit_lock_release
02022674 g     O .bss	00000004 OSTCBHighRdy
02004074 g     F .text	00000718 .hidden __muldf3
0200eecc g     F .text	0000009c __sread
02022678 g     O .bss	00000004 OSQFreeList
0201dfe8 g     F .text	00000108 alt_find_file
0201d26c g     F .text	000000a4 alt_dev_llist_insert
02013d58 g     F .text	00000120 __malloc_lock
02013a50 g     F .text	000000b0 sbrk
02014064 g     F .text	00000140 OSEventNameSet
02009be4 g     F .text	00000088 _fflush_r
02010890 g     F .text	00000164 _calloc_r
0202267c g     O .bss	00000001 OSRdyGrp
020225d0 g       *ABS*	00000000 __bss_start
02004de4 g     F .text	000001c4 memset
020027f8 g     F .text	000001cc main
02022638 g     O .bss	00000004 alt_envp
020225ec g     O .bss	00000004 MailBox8
02022624 g     O .bss	00000004 __malloc_max_total_mem
020032ac g     F .text	0000006c moveBall
0201c2fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0201114c g     F .text	00000040 __swbuf
0201ed54 g     O .rodata	00000100 OSUnMapTbl
020209e6 g     O .rwdata	00000002 OSSemEn
02016fcc g     F .text	00000394 OSFlagPost
0200f0ec g     F .text	00000054 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02010b20 g     F .text	00000038 fclose
02014fd0 g     F .text	00000110 OS_EventTaskWait
020266d8 g     O .bss	00002000 task2_stk
0200489c g     F .text	000001a8 .hidden __truncdfsf2
02015bb8 g     F .text	000000cc OS_TaskStatStkChk
0201b140 g     F .text	00000150 OSTaskDelReq
02007d68 g     F .text	00001b78 _dtoa_r
0200b8c4 g     F .text	00000b7c _malloc_r
0201139c g     F .text	00000078 __ascii_wctomb
0202099c g     O .rwdata	00000004 alt_errno
02014ab8 g     F .text	00000070 OSStart
020286d8 g     O .bss	00002000 task3_stk
02013cf8 g     F .text	00000060 __env_unlock
0200af8c g     F .text	000000d8 _fwalk
0201b5dc g     F .text	000001d4 OSTaskResume
02018864 g     F .text	000000e8 OSMemQuery
020209f8 g     O .rwdata	00000002 OSTaskStatEn
020209d2 g     O .rwdata	00000002 OSMemMax
0201959c g     F .text	00000170 OSQPostFront
02004aa8 g     F .text	00000084 .hidden __divsi3
0202267d g     O .bss	00000003 OSRdyTbl
020209ac g     O .rwdata	00000002 OSDebugEn
0200a7e4 g     F .text	000001cc _malloc_trim_r
020225f0 g     O .bss	00000004 MailBox4
0201e840 g       *ABS*	00000000 __CTOR_END__
020225f4 g     O .bss	00000004 MailBox7
020209c4 g     O .rwdata	00000002 OSFlagNodeSize
02020a0c g     O .rwdata	00000002 OSTmrCfgMax
0200f140 g     F .text	00000140 strcmp
02018b58 g     F .text	000001ac OSQCreate
0201b290 g     F .text	00000198 OSTaskNameGet
0201e840 g       *ABS*	00000000 __flash_rodata_start
0201970c g     F .text	0000020c OSQPostOpt
02014bd8 g     F .text	00000220 OSTimeTick
020209f4 g     O .rwdata	00000002 OSTaskMax
0201e840 g       *ABS*	00000000 __DTOR_LIST__
02019bcc g     F .text	000000d8 OSSemCreate
02020a18 g     O .rwdata	00000002 OSTmrWheelSize
02012770 g     F .text	00000088 .hidden __nedf2
020209ee g     O .rwdata	00000002 OSTaskDelEn
0201a36c g     F .text	00000110 OSSemQuery
02018d04 g     F .text	00000280 OSQDel
020192c8 g     F .text	0000016c OSQPendAbort
0201c204 g     F .text	00000038 alt_irq_init
020139ec g     F .text	00000064 alt_release_fd
0201e9f5 g     O .rodata	00000100 .hidden __clz_tab
02022614 g     O .bss	00000004 _PathLocale
0201e2f8 g     F .text	0000003c atexit
020107c0 g     F .text	00000070 _write_r
02014950 g     F .text	0000008c OSSchedLock
0200b274 g     F .text	00000040 setlocale
020163f0 g     F .text	00000108 OSFlagCreate
02020970 g     O .rwdata	00000004 _impure_ptr
02022630 g     O .bss	00000004 alt_argc
020098e0 g     F .text	00000304 __sflush_r
0201d370 g     F .text	00000060 _do_dtors
0200b22c g     F .text	00000020 __locale_cjk_lang
020209be g     O .rwdata	00000002 OSEventMultiEn
020164f8 g     F .text	00000248 OSFlagDel
02022680 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02017ddc g     F .text	0000016c OSMboxPendAbort
0200d99c g     F .text	000000cc __ulp
02020a0a g     O .rwdata	00000002 OSTmrEn
020169b4 g     F .text	000005b8 OSFlagPend
0200a244 g     F .text	00000040 __fp_unlock_all
02020988 g     O .rwdata	00000008 alt_fs_list
020159c8 g     F .text	00000074 OS_StrCopy
020209d4 g     O .rwdata	00000002 OSMemNameSize
0201def4 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02020a00 g     O .rwdata	00000002 OSTCBPrioTblMax
0200b2b4 g     F .text	00000030 localeconv
020209fc g     O .rwdata	00000002 OSTaskStatStkChkEn
02017894 g     F .text	000000d4 OSMboxCreate
0201d404 g     F .text	00000050 alt_ic_isr_register
020209d0 g     O .rwdata	00000002 OSMemEn
020209da g     O .rwdata	00000002 OSMutexEn
02020a2c g       *ABS*	00000000 _edata
02002db4 g     F .text	000004f8 collide_calc
0202d9fc g       *ABS*	00000000 _end
02022684 g     O .bss	00000001 OSIntNesting
02010b58 g     F .text	000001f4 __fputwc
02000244 g       *ABS*	00000000 __ram_exceptions_end
0201c958 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201bf40 g     F .text	000001d4 OSTimeDlyResume
02016868 g     F .text	0000014c OSFlagNameSet
02017ba8 g     F .text	00000234 OSMboxPend
020029c4 g     F .text	00000174 whole_collide
0201b7b0 g     F .text	000001c0 OSTaskStkChk
0201d4dc g     F .text	0000008c alt_ic_irq_disable
020209d6 g     O .rwdata	00000002 OSMemSize
0200ef98 g     F .text	000000b4 __swrite
0202097c g     O .rwdata	00000004 __malloc_trim_threshold
0200b208 g     F .text	00000024 __locale_msgcharset
02022688 g     O .bss	00000004 OSTCBCur
0201e334 g     F .text	00000048 exit
020209d8 g     O .rwdata	00000002 OSMemTblSize
0200b064 g     F .text	000000dc _fwalk_reent
020225f8 g     O .bss	00000004 MailBox1
0200d6f8 g     F .text	000002a4 __mdiff
02004b2c g     F .text	00000074 .hidden __modsi3
020177fc g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200a15c g     F .text	00000020 __sfp_lock_release
020147b4 g     F .text	00000058 OSInit
0201bb54 g     F .text	00000124 OSTaskQuery
02019a74 g     F .text	000000a8 OS_QInit
02015a3c g     F .text	00000054 OS_StrLen
02018678 g     F .text	00000114 OSMemNameSet
020209f2 g     O .rwdata	00000002 OSTaskProfileEn
0202268c g     O .bss	00000004 OSTime
020225fc g     O .bss	00000004 isActiveFlagGrp
0202c058 g     O .bss	00000800 OSTaskIdleStk
0201e80c g     F .text	00000034 _exit
02018058 g     F .text	0000015c OSMboxPostOpt
0201d0bc g     F .text	0000012c alt_alarm_start
02016740 g     F .text	00000128 OSFlagNameGet
02002cf4 g     F .text	000000c0 detect_collide
0201c114 g     F .text	0000005c OSTimeGet
0200b2e4 g     F .text	0000022c __smakebuf_r
020051c4 g     F .text	000000f4 strlen
0201de74 g     F .text	00000020 OSTaskSwHook
0201d8e4 g     F .text	00000154 open
0202c858 g     O .bss	00000b40 OSEventTbl
02003ea4 g     F .text	000000dc .hidden __gedf2
0202d398 g     O .bss	00000510 OSTCBTbl
0201a47c g     F .text	00000100 OSSemSet
02020984 g     O .rwdata	00000004 __wctomb
02022600 g     O .bss	00000004 StartGameGrp
0200f280 g     F .text	0000013c __sprint_r
0201d3d0 g     F .text	00000034 alt_icache_flush_all
02020a20 g     O .rwdata	00000004 alt_priority_mask
02019ca4 g     F .text	00000240 OSSemDel
02022690 g     O .bss	00000004 OSFlagFreeList
02002330 g     F .text	0000042c task3
0201d454 g     F .text	00000088 alt_ic_irq_enable
020209b8 g     O .rwdata	00000002 OSEventNameSize
02017968 g     F .text	00000240 OSMboxDel
020053a8 g     F .text	00000050 __vfprintf_internal
02022694 g     O .bss	00000001 OSStatRdy
0202d8a8 g     O .bss	00000054 OSTCBPrioTbl
02011338 g     F .text	00000064 _wctomb_r
02013c34 g     F .text	000000c4 __env_lock
020209fe g     O .rwdata	00000002 OSTaskSwHookEn
020127f8 g     F .text	000008fc .hidden __subdf3
0200cd60 g     F .text	000000ec __lo0bits
02020a24 g     O .rwdata	00000008 alt_alarm_list
020209c6 g     O .rwdata	00000002 OSFlagWidth
0201d310 g     F .text	00000060 _do_ctors
02011260 g     F .text	000000d8 wcrtomb
02013334 g     F .text	000000d0 close
02022640 g     O .bss	00000004 alt_envsem
02022698 g     O .bss	00000004 OSIdleCtrRun
02014df8 g     F .text	00000020 OSVersion
02020a10 g     O .rwdata	00000002 OSTmrCfgWheelSize
02013664 g     F .text	00000084 alt_load
0201bc78 g     F .text	00000070 OS_TaskStkClr
020209ea g     O .rwdata	00000002 OSTaskCreateEn
020153e8 g     F .text	00000068 OS_EventWaitListInit
02010dd4 g     F .text	00000068 fputwc
0201df14 g     F .text	00000020 OSTaskIdleHook
0200a17c g     F .text	00000020 __sinit_lock_acquire
0200c9b0 g     F .text	00000194 __multadd
0201b970 g     F .text	000001e4 OSTaskSuspend
0200c934 g     F .text	0000007c _Bfree
02015a90 g     F .text	0000005c OS_TaskIdle
02020a16 g     O .rwdata	00000002 OSTmrTblSize
02019918 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409114 	ori	at,at,580
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	201480c0 	call	201480c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10b63f04 	addi	r2,r2,-9988
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10b63f04 	addi	r2,r2,-9988
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	20148580 	call	2014858 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a74e17 	ldw	r2,-25288(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a74e17 	ldw	r2,-25288(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000260:	d6a25c14 	ori	gp,gp,35184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2000268:	10897414 	ori	r2,r2,9680

    movhi r3, %hi(__bss_end)
 200026c:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 2000270:	18f67f14 	ori	r3,r3,55804

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000284:	20136640 	call	2013664 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000288:	20137f80 	call	20137f8 <alt_main>

0200028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200028c:	003fff06 	br	200028c <alt_after_alt_main>

02000290 <task1>:


/*  */

void task1(void* pdata)
{
 2000290:	deffeb04 	addi	sp,sp,-84
 2000294:	dfc01415 	stw	ra,80(sp)
 2000298:	df001315 	stw	fp,76(sp)
 200029c:	df001304 	addi	fp,sp,76
 20002a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20002a4:	008000b4 	movhi	r2,2
 20002a8:	e0bff415 	stw	r2,-48(fp)
	int count_old = 0;
 20002ac:	e03ff515 	stw	zero,-44(fp)
	int count = 0;
 20002b0:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03ff315 	stw	zero,-52(fp)

	while (1)
	{
		printf("wait for isActive\n");
 20002b8:	010080b4 	movhi	r4,514
 20002bc:	213a1004 	addi	r4,r4,-6080
 20002c0:	200518c0 	call	200518c <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c4:	d0e72317 	ldw	r3,-25460(gp)
 20002c8:	e0bffc04 	addi	r2,fp,-16
 20002cc:	d8800015 	stw	r2,0(sp)
 20002d0:	000f883a 	mov	r7,zero
 20002d4:	01802084 	movi	r6,130
 20002d8:	01400044 	movi	r5,1
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	20169b40 	call	20169b4 <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002e4:	00004c06 	br	2000418 <task1+0x188>
		{
			count_old = count;
 20002e8:	e0bfee17 	ldw	r2,-72(fp)
 20002ec:	e0bff515 	stw	r2,-44(fp)
			count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 20002f0:	e0bff417 	ldw	r2,-48(fp)
 20002f4:	10800a04 	addi	r2,r2,40
 20002f8:	10800037 	ldwio	r2,0(r2)
 20002fc:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = IORD(MTL_controller,11);
 2000300:	e0bff417 	ldw	r2,-48(fp)
 2000304:	10800b04 	addi	r2,r2,44
 2000308:	10800037 	ldwio	r2,0(r2)
 200030c:	e0bff615 	stw	r2,-40(fp)
			int pos2 = IORD(MTL_controller,12);
 2000310:	e0bff417 	ldw	r2,-48(fp)
 2000314:	10800c04 	addi	r2,r2,48
 2000318:	10800037 	ldwio	r2,0(r2)
 200031c:	e0bff715 	stw	r2,-36(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000320:	e0bff517 	ldw	r2,-44(fp)
 2000324:	10800058 	cmpnei	r2,r2,1
 2000328:	1000121e 	bne	r2,zero,2000374 <task1+0xe4>
 200032c:	e0bfee17 	ldw	r2,-72(fp)
 2000330:	10800098 	cmpnei	r2,r2,2
 2000334:	10000f1e 	bne	r2,zero,2000374 <task1+0xe4>
			{
				printf("start gesture\n");
 2000338:	010080b4 	movhi	r4,514
 200033c:	213a1504 	addi	r4,r4,-6060
 2000340:	200518c0 	call	200518c <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000344:	e0bff617 	ldw	r2,-40(fp)
 2000348:	1080ffcc 	andi	r2,r2,1023
 200034c:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000350:	e0bff617 	ldw	r2,-40(fp)
 2000354:	1005d2ba 	srai	r2,r2,10
 2000358:	e0bff115 	stw	r2,-60(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200035c:	e0bff717 	ldw	r2,-36(fp)
 2000360:	1080ffcc 	andi	r2,r2,1023
 2000364:	e0bff815 	stw	r2,-32(fp)
				y2_gesture_start = pos2 >> 10;
 2000368:	e0bff717 	ldw	r2,-36(fp)
 200036c:	1005d2ba 	srai	r2,r2,10
 2000370:	e0bff915 	stw	r2,-28(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000374:	e0bff517 	ldw	r2,-44(fp)
 2000378:	10800098 	cmpnei	r2,r2,2
 200037c:	1000261e 	bne	r2,zero,2000418 <task1+0x188>
 2000380:	e0bfee17 	ldw	r2,-72(fp)
 2000384:	10800058 	cmpnei	r2,r2,1
 2000388:	1000231e 	bne	r2,zero,2000418 <task1+0x188>
			{
				printf("stop gesture\n");
 200038c:	010080b4 	movhi	r4,514
 2000390:	213a1904 	addi	r4,r4,-6044
 2000394:	200518c0 	call	200518c <puts>
			//	printf("Hello\n");

				x1_gesture_stop = pos1 & 0x0003FF;
 2000398:	e0bff617 	ldw	r2,-40(fp)
 200039c:	1080ffcc 	andi	r2,r2,1023
 20003a0:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 20003a4:	e0bff617 	ldw	r2,-40(fp)
 20003a8:	1005d2ba 	srai	r2,r2,10
 20003ac:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003b0:	e0bff717 	ldw	r2,-36(fp)
 20003b4:	1080ffcc 	andi	r2,r2,1023
 20003b8:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_stop = pos2 >> 10;
 20003bc:	e0bff717 	ldw	r2,-36(fp)
 20003c0:	1005d2ba 	srai	r2,r2,10
 20003c4:	e0bff215 	stw	r2,-56(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003c8:	e0bfef17 	ldw	r2,-68(fp)
 20003cc:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003d0:	e0fffa17 	ldw	r3,-24(fp)
 20003d4:	18800e16 	blt	r3,r2,2000410 <task1+0x180>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfef17 	ldw	r2,-68(fp)
 20003dc:	10c00784 	addi	r3,r2,30
 20003e0:	e0bffa17 	ldw	r2,-24(fp)
 20003e4:	18800a16 	blt	r3,r2,2000410 <task1+0x180>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003e8:	e0bff117 	ldw	r2,-60(fp)
 20003ec:	10bff884 	addi	r2,r2,-30
 20003f0:	e0fffb17 	ldw	r3,-20(fp)
 20003f4:	18800616 	blt	r3,r2,2000410 <task1+0x180>
 20003f8:	e0bff117 	ldw	r2,-60(fp)
 20003fc:	10c00784 	addi	r3,r2,30
 2000400:	e0bffb17 	ldw	r2,-20(fp)
 2000404:	18800216 	blt	r3,r2,2000410 <task1+0x180>
 2000408:	00800044 	movi	r2,1
 200040c:	00000106 	br	2000414 <task1+0x184>
 2000410:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000414:	e0bff315 	stw	r2,-52(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 2000418:	e0bff317 	ldw	r2,-52(fp)
 200041c:	103fb226 	beq	r2,zero,20002e8 <task1+0x58>
			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}

		int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000420:	e0fff017 	ldw	r3,-64(fp)
 2000424:	e0bfef17 	ldw	r2,-68(fp)
 2000428:	1885c83a 	sub	r2,r3,r2
 200042c:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000430:	e0fff217 	ldw	r3,-56(fp)
 2000434:	e0bff117 	ldw	r2,-60(fp)
 2000438:	1885c83a 	sub	r2,r3,r2
 200043c:	e0bffe15 	stw	r2,-8(fp)
		printf("Send value : (%d, %d)\n", x_dir, y_dir);
 2000440:	e0bffd17 	ldw	r2,-12(fp)
 2000444:	e0fffe17 	ldw	r3,-8(fp)
 2000448:	180d883a 	mov	r6,r3
 200044c:	100b883a 	mov	r5,r2
 2000450:	010080b4 	movhi	r4,514
 2000454:	213a1d04 	addi	r4,r4,-6028
 2000458:	200500c0 	call	200500c <printf>
		OSMboxPost(MailBox1, &x_dir);
 200045c:	d0a72217 	ldw	r2,-25464(gp)
 2000460:	e0fffd04 	addi	r3,fp,-12
 2000464:	180b883a 	mov	r5,r3
 2000468:	1009883a 	mov	r4,r2
 200046c:	2017f480 	call	2017f48 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000470:	d0a71e17 	ldw	r2,-25480(gp)
 2000474:	e0fffe04 	addi	r3,fp,-8
 2000478:	180b883a 	mov	r5,r3
 200047c:	1009883a 	mov	r4,r2
 2000480:	2017f480 	call	2017f48 <OSMboxPost>
		gesture_detected = 0;
 2000484:	e03ff315 	stw	zero,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 2000488:	01c07d04 	movi	r7,500
 200048c:	000d883a 	mov	r6,zero
 2000490:	000b883a 	mov	r5,zero
 2000494:	0009883a 	mov	r4,zero
 2000498:	201bdec0 	call	201bdec <OSTimeDlyHMSM>
	}
 200049c:	003f8606 	br	20002b8 <task1+0x28>

020004a0 <task2>:
}

void task2(void* pdata)
{
 20004a0:	deff3b04 	addi	sp,sp,-788
 20004a4:	dfc0c415 	stw	ra,784(sp)
 20004a8:	df00c315 	stw	fp,780(sp)
 20004ac:	dd40c215 	stw	r21,776(sp)
 20004b0:	dd00c115 	stw	r20,772(sp)
 20004b4:	dcc0c015 	stw	r19,768(sp)
 20004b8:	dc80bf15 	stw	r18,764(sp)
 20004bc:	dc40be15 	stw	r17,760(sp)
 20004c0:	dc00bd15 	stw	r16,756(sp)
 20004c4:	df00c304 	addi	fp,sp,780
 20004c8:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 20004cc:	008000b4 	movhi	r2,2
 20004d0:	e0bf4315 	stw	r2,-756(fp)

  float ball[10][2] =  {{266.0, 263.0}, // white
 20004d4:	008080b4 	movhi	r2,514
 20004d8:	10ba3c04 	addi	r2,r2,-5904
 20004dc:	e0ff4b04 	addi	r3,fp,-724
 20004e0:	1009883a 	mov	r4,r2
 20004e4:	00801404 	movi	r2,80
 20004e8:	100d883a 	mov	r6,r2
 20004ec:	200b883a 	mov	r5,r4
 20004f0:	1809883a 	mov	r4,r3
 20004f4:	2004c5c0 	call	2004c5c <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 20004f8:	e0bf4317 	ldw	r2,-756(fp)
 20004fc:	10800104 	addi	r2,r2,4
 2000500:	e0ff4c17 	ldw	r3,-720(fp)
 2000504:	1807fe72 	custom	249,r3,r3,zero
 2000508:	180892ba 	slli	r4,r3,10
 200050c:	e0ff4b17 	ldw	r3,-724(fp)
 2000510:	1807fe72 	custom	249,r3,r3,zero
 2000514:	20c7883a 	add	r3,r4,r3
 2000518:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 200051c:	e0bf4317 	ldw	r2,-756(fp)
 2000520:	10800204 	addi	r2,r2,8
 2000524:	e0ff4e17 	ldw	r3,-712(fp)
 2000528:	1807fe72 	custom	249,r3,r3,zero
 200052c:	180892ba 	slli	r4,r3,10
 2000530:	e0ff4d17 	ldw	r3,-716(fp)
 2000534:	1807fe72 	custom	249,r3,r3,zero
 2000538:	20c7883a 	add	r3,r4,r3
 200053c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2000540:	e0bf4317 	ldw	r2,-756(fp)
 2000544:	10800304 	addi	r2,r2,12
 2000548:	e0ff5017 	ldw	r3,-704(fp)
 200054c:	1807fe72 	custom	249,r3,r3,zero
 2000550:	180892ba 	slli	r4,r3,10
 2000554:	e0ff4f17 	ldw	r3,-708(fp)
 2000558:	1807fe72 	custom	249,r3,r3,zero
 200055c:	20c7883a 	add	r3,r4,r3
 2000560:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2000564:	e0bf4317 	ldw	r2,-756(fp)
 2000568:	10800404 	addi	r2,r2,16
 200056c:	e0ff5217 	ldw	r3,-696(fp)
 2000570:	1807fe72 	custom	249,r3,r3,zero
 2000574:	180892ba 	slli	r4,r3,10
 2000578:	e0ff5117 	ldw	r3,-700(fp)
 200057c:	1807fe72 	custom	249,r3,r3,zero
 2000580:	20c7883a 	add	r3,r4,r3
 2000584:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2000588:	e0bf4317 	ldw	r2,-756(fp)
 200058c:	10800504 	addi	r2,r2,20
 2000590:	e0ff5417 	ldw	r3,-688(fp)
 2000594:	1807fe72 	custom	249,r3,r3,zero
 2000598:	180892ba 	slli	r4,r3,10
 200059c:	e0ff5317 	ldw	r3,-692(fp)
 20005a0:	1807fe72 	custom	249,r3,r3,zero
 20005a4:	20c7883a 	add	r3,r4,r3
 20005a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 20005ac:	e0bf4317 	ldw	r2,-756(fp)
 20005b0:	10800604 	addi	r2,r2,24
 20005b4:	e0ff5617 	ldw	r3,-680(fp)
 20005b8:	1807fe72 	custom	249,r3,r3,zero
 20005bc:	180892ba 	slli	r4,r3,10
 20005c0:	e0ff5517 	ldw	r3,-684(fp)
 20005c4:	1807fe72 	custom	249,r3,r3,zero
 20005c8:	20c7883a 	add	r3,r4,r3
 20005cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20005d0:	e0bf4317 	ldw	r2,-756(fp)
 20005d4:	10800704 	addi	r2,r2,28
 20005d8:	e0ff5817 	ldw	r3,-672(fp)
 20005dc:	1807fe72 	custom	249,r3,r3,zero
 20005e0:	180892ba 	slli	r4,r3,10
 20005e4:	e0ff5717 	ldw	r3,-676(fp)
 20005e8:	1807fe72 	custom	249,r3,r3,zero
 20005ec:	20c7883a 	add	r3,r4,r3
 20005f0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20005f4:	e0bf4317 	ldw	r2,-756(fp)
 20005f8:	10800804 	addi	r2,r2,32
 20005fc:	e0ff5a17 	ldw	r3,-664(fp)
 2000600:	1807fe72 	custom	249,r3,r3,zero
 2000604:	180892ba 	slli	r4,r3,10
 2000608:	e0ff5917 	ldw	r3,-668(fp)
 200060c:	1807fe72 	custom	249,r3,r3,zero
 2000610:	20c7883a 	add	r3,r4,r3
 2000614:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 2000618:	e0bf4317 	ldw	r2,-756(fp)
 200061c:	10800904 	addi	r2,r2,36
 2000620:	e0ff5c17 	ldw	r3,-656(fp)
 2000624:	1807fe72 	custom	249,r3,r3,zero
 2000628:	180892ba 	slli	r4,r3,10
 200062c:	e0ff5b17 	ldw	r3,-660(fp)
 2000630:	1807fe72 	custom	249,r3,r3,zero
 2000634:	20c7883a 	add	r3,r4,r3
 2000638:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 200063c:	e0bf4317 	ldw	r2,-756(fp)
 2000640:	10800a04 	addi	r2,r2,40
 2000644:	e0ff5e17 	ldw	r3,-648(fp)
 2000648:	1807fe72 	custom	249,r3,r3,zero
 200064c:	180892ba 	slli	r4,r3,10
 2000650:	e0ff5d17 	ldw	r3,-652(fp)
 2000654:	1807fe72 	custom	249,r3,r3,zero
 2000658:	20c7883a 	add	r3,r4,r3
 200065c:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 2000660:	e0bf5f04 	addi	r2,fp,-644
 2000664:	00c05a04 	movi	r3,360
 2000668:	180d883a 	mov	r6,r3
 200066c:	000b883a 	mov	r5,zero
 2000670:	1009883a 	mov	r4,r2
 2000674:	2004de40 	call	2004de4 <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 2000678:	00800044 	movi	r2,1
 200067c:	e0bf4405 	stb	r2,-752(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000680:	d0a71b17 	ldw	r2,-25492(gp)
 2000684:	e0ff4403 	ldbu	r3,-752(fp)
 2000688:	e13f4a04 	addi	r4,fp,-728
 200068c:	200f883a 	mov	r7,r4
 2000690:	180d883a 	mov	r6,r3
 2000694:	01400044 	movi	r5,1
 2000698:	1009883a 	mov	r4,r2
 200069c:	2016fcc0 	call	2016fcc <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 20006a0:	d0a72017 	ldw	r2,-25472(gp)
 20006a4:	e0ff4a04 	addi	r3,fp,-728
 20006a8:	180d883a 	mov	r6,r3
 20006ac:	000b883a 	mov	r5,zero
 20006b0:	1009883a 	mov	r4,r2
 20006b4:	2017ba80 	call	2017ba8 <OSMboxPend>
 20006b8:	e0bf4515 	stw	r2,-748(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 20006bc:	d0a71c17 	ldw	r2,-25488(gp)
 20006c0:	e0ff4a04 	addi	r3,fp,-728
 20006c4:	180d883a 	mov	r6,r3
 20006c8:	000b883a 	mov	r5,zero
 20006cc:	1009883a 	mov	r4,r2
 20006d0:	2017ba80 	call	2017ba8 <OSMboxPend>
 20006d4:	e0bf4615 	stw	r2,-744(fp)

   int score = OSMboxPend(MailBox8,0,&err);
 20006d8:	d0a71f17 	ldw	r2,-25476(gp)
 20006dc:	e0ff4a04 	addi	r3,fp,-728
 20006e0:	180d883a 	mov	r6,r3
 20006e4:	000b883a 	mov	r5,zero
 20006e8:	1009883a 	mov	r4,r2
 20006ec:	2017ba80 	call	2017ba8 <OSMboxPend>
 20006f0:	e0bfb915 	stw	r2,-284(fp)
   int nbr_ball = OSMboxPend(MailBox9,0,&err);
 20006f4:	d0a71817 	ldw	r2,-25504(gp)
 20006f8:	e0ff4a04 	addi	r3,fp,-728
 20006fc:	180d883a 	mov	r6,r3
 2000700:	000b883a 	mov	r5,zero
 2000704:	1009883a 	mov	r4,r2
 2000708:	2017ba80 	call	2017ba8 <OSMboxPend>
 200070c:	e0bfba15 	stw	r2,-280(fp)


   float x = (float) *vector_x;
 2000710:	e0bf4517 	ldw	r2,-748(fp)
 2000714:	10800017 	ldw	r2,0(r2)
 2000718:	1005feb2 	custom	250,r2,r2,zero
 200071c:	e0bf4715 	stw	r2,-740(fp)
   float y = (float) *vector_y;
 2000720:	e0bf4617 	ldw	r2,-744(fp)
 2000724:	10800017 	ldw	r2,0(r2)
 2000728:	1005feb2 	custom	250,r2,r2,zero
 200072c:	e0bf4815 	stw	r2,-736(fp)

   float length = sqrtf(x*x + y*y);
 2000730:	e0ff4717 	ldw	r3,-740(fp)
 2000734:	e0bf4717 	ldw	r2,-740(fp)
 2000738:	1887ff32 	custom	252,r3,r3,r2
 200073c:	e13f4817 	ldw	r4,-736(fp)
 2000740:	e0bf4817 	ldw	r2,-736(fp)
 2000744:	2085ff32 	custom	252,r2,r4,r2
 2000748:	1885ff72 	custom	253,r2,r3,r2
 200074c:	1005fef2 	custom	251,r2,r2,zero
 2000750:	e0bf4915 	stw	r2,-732(fp)
   float direction [] = {x/length, y/length};
 2000754:	e0ff4717 	ldw	r3,-740(fp)
 2000758:	e0bf4917 	ldw	r2,-732(fp)
 200075c:	1885fff2 	custom	255,r2,r3,r2
 2000760:	e0bfbb15 	stw	r2,-276(fp)
 2000764:	e0ff4817 	ldw	r3,-736(fp)
 2000768:	e0bf4917 	ldw	r2,-732(fp)
 200076c:	1885fff2 	custom	255,r2,r3,r2
 2000770:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 2.0, 400.0);
 2000774:	e13f4917 	ldw	r4,-732(fp)
 2000778:	200478c0 	call	200478c <__extendsfdf2>
 200077c:	1011883a 	mov	r8,r2
 2000780:	1813883a 	mov	r9,r3
 2000784:	000d883a 	mov	r6,zero
 2000788:	01d00034 	movhi	r7,16384
 200078c:	4009883a 	mov	r4,r8
 2000790:	480b883a 	mov	r5,r9
 2000794:	20035bc0 	call	20035bc <__divdf3>
 2000798:	1009883a 	mov	r4,r2
 200079c:	180b883a 	mov	r5,r3
 20007a0:	2005883a 	mov	r2,r4
 20007a4:	2807883a 	mov	r3,r5
 20007a8:	000d883a 	mov	r6,zero
 20007ac:	01d01e74 	movhi	r7,16505
 20007b0:	1009883a 	mov	r4,r2
 20007b4:	180b883a 	mov	r5,r3
 20007b8:	200340c0 	call	200340c <fmin>
 20007bc:	100b883a 	mov	r5,r2
 20007c0:	180d883a 	mov	r6,r3
 20007c4:	2809883a 	mov	r4,r5
 20007c8:	300b883a 	mov	r5,r6
 20007cc:	200489c0 	call	200489c <__truncdfsf2>
 20007d0:	1007883a 	mov	r3,r2
 20007d4:	e0ff4215 	stw	r3,-760(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20007d8:	e0bfe504 	addi	r2,fp,-108
 20007dc:	00c01404 	movi	r3,80
 20007e0:	180d883a 	mov	r6,r3
 20007e4:	000b883a 	mov	r5,zero
 20007e8:	1009883a 	mov	r4,r2
 20007ec:	2004de40 	call	2004de4 <memset>
 20007f0:	e0ffbb17 	ldw	r3,-276(fp)
 20007f4:	e0bf4217 	ldw	r2,-760(fp)
 20007f8:	1887ff32 	custom	252,r3,r3,r2
 20007fc:	0090a834 	movhi	r2,17056
 2000800:	1885fff2 	custom	255,r2,r3,r2
 2000804:	e0bfe515 	stw	r2,-108(fp)
 2000808:	e0ffbc17 	ldw	r3,-272(fp)
 200080c:	e0bf4217 	ldw	r2,-760(fp)
 2000810:	1887ff32 	custom	252,r3,r3,r2
 2000814:	0090a834 	movhi	r2,17056
 2000818:	1885fff2 	custom	255,r2,r3,r2
 200081c:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 2000820:	e0bf4517 	ldw	r2,-748(fp)
 2000824:	15000017 	ldw	r20,0(r2)
 2000828:	e0bf4617 	ldw	r2,-744(fp)
 200082c:	15400017 	ldw	r21,0(r2)
 2000830:	e13f4217 	ldw	r4,-760(fp)
 2000834:	200478c0 	call	200478c <__extendsfdf2>
 2000838:	1025883a 	mov	r18,r2
 200083c:	1827883a 	mov	r19,r3
 2000840:	e0bfe517 	ldw	r2,-108(fp)
 2000844:	1009883a 	mov	r4,r2
 2000848:	200478c0 	call	200478c <__extendsfdf2>
 200084c:	1021883a 	mov	r16,r2
 2000850:	1823883a 	mov	r17,r3
 2000854:	e0bfe617 	ldw	r2,-104(fp)
 2000858:	1009883a 	mov	r4,r2
 200085c:	200478c0 	call	200478c <__extendsfdf2>
 2000860:	1009883a 	mov	r4,r2
 2000864:	180b883a 	mov	r5,r3
 2000868:	d9000315 	stw	r4,12(sp)
 200086c:	d9400415 	stw	r5,16(sp)
 2000870:	dc000115 	stw	r16,4(sp)
 2000874:	dc400215 	stw	r17,8(sp)
 2000878:	dcc00015 	stw	r19,0(sp)
 200087c:	900f883a 	mov	r7,r18
 2000880:	a80d883a 	mov	r6,r21
 2000884:	a00b883a 	mov	r5,r20
 2000888:	010080b4 	movhi	r4,514
 200088c:	213a2304 	addi	r4,r4,-6004
 2000890:	200500c0 	call	200500c <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 2000894:	e0bfbd04 	addi	r2,fp,-268
 2000898:	00c02804 	movi	r3,160
 200089c:	180d883a 	mov	r6,r3
 20008a0:	000b883a 	mov	r5,zero
 20008a4:	1009883a 	mov	r4,r2
 20008a8:	2004de40 	call	2004de4 <memset>

   while(speed >= 0.1)
 20008ac:	00067306 	br	200227c <task2+0x1ddc>
   {
	   //Border Collide

	   borderCollide(ball[0], border_collision[0], velocity[0]);
 20008b0:	e13fe504 	addi	r4,fp,-108
 20008b4:	e0ffbd04 	addi	r3,fp,-268
 20008b8:	e0bf4b04 	addi	r2,fp,-724
 20008bc:	200d883a 	mov	r6,r4
 20008c0:	180b883a 	mov	r5,r3
 20008c4:	1009883a 	mov	r4,r2
 20008c8:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 20008cc:	e0bfe504 	addi	r2,fp,-108
 20008d0:	11000204 	addi	r4,r2,8
 20008d4:	e0bfbd04 	addi	r2,fp,-268
 20008d8:	10c00404 	addi	r3,r2,16
 20008dc:	e0bf4b04 	addi	r2,fp,-724
 20008e0:	10800204 	addi	r2,r2,8
 20008e4:	200d883a 	mov	r6,r4
 20008e8:	180b883a 	mov	r5,r3
 20008ec:	1009883a 	mov	r4,r2
 20008f0:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 20008f4:	e0bfe504 	addi	r2,fp,-108
 20008f8:	11000404 	addi	r4,r2,16
 20008fc:	e0bfbd04 	addi	r2,fp,-268
 2000900:	10c00804 	addi	r3,r2,32
 2000904:	e0bf4b04 	addi	r2,fp,-724
 2000908:	10800404 	addi	r2,r2,16
 200090c:	200d883a 	mov	r6,r4
 2000910:	180b883a 	mov	r5,r3
 2000914:	1009883a 	mov	r4,r2
 2000918:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 200091c:	e0bfe504 	addi	r2,fp,-108
 2000920:	11000604 	addi	r4,r2,24
 2000924:	e0bfbd04 	addi	r2,fp,-268
 2000928:	10c00c04 	addi	r3,r2,48
 200092c:	e0bf4b04 	addi	r2,fp,-724
 2000930:	10800604 	addi	r2,r2,24
 2000934:	200d883a 	mov	r6,r4
 2000938:	180b883a 	mov	r5,r3
 200093c:	1009883a 	mov	r4,r2
 2000940:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 2000944:	e0bfe504 	addi	r2,fp,-108
 2000948:	11000804 	addi	r4,r2,32
 200094c:	e0bfbd04 	addi	r2,fp,-268
 2000950:	10c01004 	addi	r3,r2,64
 2000954:	e0bf4b04 	addi	r2,fp,-724
 2000958:	10800804 	addi	r2,r2,32
 200095c:	200d883a 	mov	r6,r4
 2000960:	180b883a 	mov	r5,r3
 2000964:	1009883a 	mov	r4,r2
 2000968:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 200096c:	e0bfe504 	addi	r2,fp,-108
 2000970:	11000a04 	addi	r4,r2,40
 2000974:	e0bfbd04 	addi	r2,fp,-268
 2000978:	10c01404 	addi	r3,r2,80
 200097c:	e0bf4b04 	addi	r2,fp,-724
 2000980:	10800a04 	addi	r2,r2,40
 2000984:	200d883a 	mov	r6,r4
 2000988:	180b883a 	mov	r5,r3
 200098c:	1009883a 	mov	r4,r2
 2000990:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 2000994:	e0bfe504 	addi	r2,fp,-108
 2000998:	11000c04 	addi	r4,r2,48
 200099c:	e0bfbd04 	addi	r2,fp,-268
 20009a0:	10c01804 	addi	r3,r2,96
 20009a4:	e0bf4b04 	addi	r2,fp,-724
 20009a8:	10800c04 	addi	r2,r2,48
 20009ac:	200d883a 	mov	r6,r4
 20009b0:	180b883a 	mov	r5,r3
 20009b4:	1009883a 	mov	r4,r2
 20009b8:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 20009bc:	e0bfe504 	addi	r2,fp,-108
 20009c0:	11000e04 	addi	r4,r2,56
 20009c4:	e0bfbd04 	addi	r2,fp,-268
 20009c8:	10c01c04 	addi	r3,r2,112
 20009cc:	e0bf4b04 	addi	r2,fp,-724
 20009d0:	10800e04 	addi	r2,r2,56
 20009d4:	200d883a 	mov	r6,r4
 20009d8:	180b883a 	mov	r5,r3
 20009dc:	1009883a 	mov	r4,r2
 20009e0:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 20009e4:	e0bfe504 	addi	r2,fp,-108
 20009e8:	11001004 	addi	r4,r2,64
 20009ec:	e0bfbd04 	addi	r2,fp,-268
 20009f0:	10c02004 	addi	r3,r2,128
 20009f4:	e0bf4b04 	addi	r2,fp,-724
 20009f8:	10801004 	addi	r2,r2,64
 20009fc:	200d883a 	mov	r6,r4
 2000a00:	180b883a 	mov	r5,r3
 2000a04:	1009883a 	mov	r4,r2
 2000a08:	2002b380 	call	2002b38 <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 2000a0c:	e0bfe504 	addi	r2,fp,-108
 2000a10:	11001204 	addi	r4,r2,72
 2000a14:	e0bfbd04 	addi	r2,fp,-268
 2000a18:	10c02404 	addi	r3,r2,144
 2000a1c:	e0bf4b04 	addi	r2,fp,-724
 2000a20:	10801204 	addi	r2,r2,72
 2000a24:	200d883a 	mov	r6,r4
 2000a28:	180b883a 	mov	r5,r3
 2000a2c:	1009883a 	mov	r4,r2
 2000a30:	2002b380 	call	2002b38 <borderCollide>

       //Move the ball

       moveBall(ball[0], velocity[0]);
 2000a34:	e0ffe504 	addi	r3,fp,-108
 2000a38:	e0bf4b04 	addi	r2,fp,-724
 2000a3c:	180b883a 	mov	r5,r3
 2000a40:	1009883a 	mov	r4,r2
 2000a44:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[1], velocity[1]);
 2000a48:	e0bfe504 	addi	r2,fp,-108
 2000a4c:	10c00204 	addi	r3,r2,8
 2000a50:	e0bf4b04 	addi	r2,fp,-724
 2000a54:	10800204 	addi	r2,r2,8
 2000a58:	180b883a 	mov	r5,r3
 2000a5c:	1009883a 	mov	r4,r2
 2000a60:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[2], velocity[2]);
 2000a64:	e0bfe504 	addi	r2,fp,-108
 2000a68:	10c00404 	addi	r3,r2,16
 2000a6c:	e0bf4b04 	addi	r2,fp,-724
 2000a70:	10800404 	addi	r2,r2,16
 2000a74:	180b883a 	mov	r5,r3
 2000a78:	1009883a 	mov	r4,r2
 2000a7c:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[3], velocity[3]);
 2000a80:	e0bfe504 	addi	r2,fp,-108
 2000a84:	10c00604 	addi	r3,r2,24
 2000a88:	e0bf4b04 	addi	r2,fp,-724
 2000a8c:	10800604 	addi	r2,r2,24
 2000a90:	180b883a 	mov	r5,r3
 2000a94:	1009883a 	mov	r4,r2
 2000a98:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[4], velocity[4]);
 2000a9c:	e0bfe504 	addi	r2,fp,-108
 2000aa0:	10c00804 	addi	r3,r2,32
 2000aa4:	e0bf4b04 	addi	r2,fp,-724
 2000aa8:	10800804 	addi	r2,r2,32
 2000aac:	180b883a 	mov	r5,r3
 2000ab0:	1009883a 	mov	r4,r2
 2000ab4:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[5], velocity[5]);
 2000ab8:	e0bfe504 	addi	r2,fp,-108
 2000abc:	10c00a04 	addi	r3,r2,40
 2000ac0:	e0bf4b04 	addi	r2,fp,-724
 2000ac4:	10800a04 	addi	r2,r2,40
 2000ac8:	180b883a 	mov	r5,r3
 2000acc:	1009883a 	mov	r4,r2
 2000ad0:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[6], velocity[6]);
 2000ad4:	e0bfe504 	addi	r2,fp,-108
 2000ad8:	10c00c04 	addi	r3,r2,48
 2000adc:	e0bf4b04 	addi	r2,fp,-724
 2000ae0:	10800c04 	addi	r2,r2,48
 2000ae4:	180b883a 	mov	r5,r3
 2000ae8:	1009883a 	mov	r4,r2
 2000aec:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[7], velocity[7]);
 2000af0:	e0bfe504 	addi	r2,fp,-108
 2000af4:	10c00e04 	addi	r3,r2,56
 2000af8:	e0bf4b04 	addi	r2,fp,-724
 2000afc:	10800e04 	addi	r2,r2,56
 2000b00:	180b883a 	mov	r5,r3
 2000b04:	1009883a 	mov	r4,r2
 2000b08:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[8], velocity[8]);
 2000b0c:	e0bfe504 	addi	r2,fp,-108
 2000b10:	10c01004 	addi	r3,r2,64
 2000b14:	e0bf4b04 	addi	r2,fp,-724
 2000b18:	10801004 	addi	r2,r2,64
 2000b1c:	180b883a 	mov	r5,r3
 2000b20:	1009883a 	mov	r4,r2
 2000b24:	20032ac0 	call	20032ac <moveBall>
       moveBall(ball[9], velocity[9]);
 2000b28:	e0bfe504 	addi	r2,fp,-108
 2000b2c:	10c01204 	addi	r3,r2,72
 2000b30:	e0bf4b04 	addi	r2,fp,-724
 2000b34:	10801204 	addi	r2,r2,72
 2000b38:	180b883a 	mov	r5,r3
 2000b3c:	1009883a 	mov	r4,r2
 2000b40:	20032ac0 	call	20032ac <moveBall>

       //Whole collision

       whole_collide(ball[1],velocity[1]);
 2000b44:	e0bfe504 	addi	r2,fp,-108
 2000b48:	10c00204 	addi	r3,r2,8
 2000b4c:	e0bf4b04 	addi	r2,fp,-724
 2000b50:	10800204 	addi	r2,r2,8
 2000b54:	180b883a 	mov	r5,r3
 2000b58:	1009883a 	mov	r4,r2
 2000b5c:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[2],velocity[2]);
 2000b60:	e0bfe504 	addi	r2,fp,-108
 2000b64:	10c00404 	addi	r3,r2,16
 2000b68:	e0bf4b04 	addi	r2,fp,-724
 2000b6c:	10800404 	addi	r2,r2,16
 2000b70:	180b883a 	mov	r5,r3
 2000b74:	1009883a 	mov	r4,r2
 2000b78:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[3],velocity[3]);
 2000b7c:	e0bfe504 	addi	r2,fp,-108
 2000b80:	10c00604 	addi	r3,r2,24
 2000b84:	e0bf4b04 	addi	r2,fp,-724
 2000b88:	10800604 	addi	r2,r2,24
 2000b8c:	180b883a 	mov	r5,r3
 2000b90:	1009883a 	mov	r4,r2
 2000b94:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[4],velocity[4]);
 2000b98:	e0bfe504 	addi	r2,fp,-108
 2000b9c:	10c00804 	addi	r3,r2,32
 2000ba0:	e0bf4b04 	addi	r2,fp,-724
 2000ba4:	10800804 	addi	r2,r2,32
 2000ba8:	180b883a 	mov	r5,r3
 2000bac:	1009883a 	mov	r4,r2
 2000bb0:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[5],velocity[5]);
 2000bb4:	e0bfe504 	addi	r2,fp,-108
 2000bb8:	10c00a04 	addi	r3,r2,40
 2000bbc:	e0bf4b04 	addi	r2,fp,-724
 2000bc0:	10800a04 	addi	r2,r2,40
 2000bc4:	180b883a 	mov	r5,r3
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[6],velocity[6]);
 2000bd0:	e0bfe504 	addi	r2,fp,-108
 2000bd4:	10c00c04 	addi	r3,r2,48
 2000bd8:	e0bf4b04 	addi	r2,fp,-724
 2000bdc:	10800c04 	addi	r2,r2,48
 2000be0:	180b883a 	mov	r5,r3
 2000be4:	1009883a 	mov	r4,r2
 2000be8:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[7],velocity[7]);
 2000bec:	e0bfe504 	addi	r2,fp,-108
 2000bf0:	10c00e04 	addi	r3,r2,56
 2000bf4:	e0bf4b04 	addi	r2,fp,-724
 2000bf8:	10800e04 	addi	r2,r2,56
 2000bfc:	180b883a 	mov	r5,r3
 2000c00:	1009883a 	mov	r4,r2
 2000c04:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[8],velocity[8]);
 2000c08:	e0bfe504 	addi	r2,fp,-108
 2000c0c:	10c01004 	addi	r3,r2,64
 2000c10:	e0bf4b04 	addi	r2,fp,-724
 2000c14:	10801004 	addi	r2,r2,64
 2000c18:	180b883a 	mov	r5,r3
 2000c1c:	1009883a 	mov	r4,r2
 2000c20:	20029c40 	call	20029c4 <whole_collide>
       whole_collide(ball[9],velocity[9]);
 2000c24:	e0bfe504 	addi	r2,fp,-108
 2000c28:	10c01204 	addi	r3,r2,72
 2000c2c:	e0bf4b04 	addi	r2,fp,-724
 2000c30:	10801204 	addi	r2,r2,72
 2000c34:	180b883a 	mov	r5,r3
 2000c38:	1009883a 	mov	r4,r2
 2000c3c:	20029c40 	call	20029c4 <whole_collide>

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000c40:	e13f5f04 	addi	r4,fp,-644
 2000c44:	e0bf4b04 	addi	r2,fp,-724
 2000c48:	10c00204 	addi	r3,r2,8
 2000c4c:	e0bf4b04 	addi	r2,fp,-724
 2000c50:	200d883a 	mov	r6,r4
 2000c54:	180b883a 	mov	r5,r3
 2000c58:	1009883a 	mov	r4,r2
 2000c5c:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000c60:	e0bf5f04 	addi	r2,fp,-644
 2000c64:	11000204 	addi	r4,r2,8
 2000c68:	e0bf4b04 	addi	r2,fp,-724
 2000c6c:	10c00404 	addi	r3,r2,16
 2000c70:	e0bf4b04 	addi	r2,fp,-724
 2000c74:	200d883a 	mov	r6,r4
 2000c78:	180b883a 	mov	r5,r3
 2000c7c:	1009883a 	mov	r4,r2
 2000c80:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2000c84:	e0bf5f04 	addi	r2,fp,-644
 2000c88:	11000404 	addi	r4,r2,16
 2000c8c:	e0bf4b04 	addi	r2,fp,-724
 2000c90:	10c00604 	addi	r3,r2,24
 2000c94:	e0bf4b04 	addi	r2,fp,-724
 2000c98:	200d883a 	mov	r6,r4
 2000c9c:	180b883a 	mov	r5,r3
 2000ca0:	1009883a 	mov	r4,r2
 2000ca4:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 2000ca8:	e0bf5f04 	addi	r2,fp,-644
 2000cac:	11000604 	addi	r4,r2,24
 2000cb0:	e0bf4b04 	addi	r2,fp,-724
 2000cb4:	10c00804 	addi	r3,r2,32
 2000cb8:	e0bf4b04 	addi	r2,fp,-724
 2000cbc:	200d883a 	mov	r6,r4
 2000cc0:	180b883a 	mov	r5,r3
 2000cc4:	1009883a 	mov	r4,r2
 2000cc8:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2000ccc:	e0bf5f04 	addi	r2,fp,-644
 2000cd0:	11000804 	addi	r4,r2,32
 2000cd4:	e0bf4b04 	addi	r2,fp,-724
 2000cd8:	10c00a04 	addi	r3,r2,40
 2000cdc:	e0bf4b04 	addi	r2,fp,-724
 2000ce0:	200d883a 	mov	r6,r4
 2000ce4:	180b883a 	mov	r5,r3
 2000ce8:	1009883a 	mov	r4,r2
 2000cec:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2000cf0:	e0bf5f04 	addi	r2,fp,-644
 2000cf4:	11000a04 	addi	r4,r2,40
 2000cf8:	e0bf4b04 	addi	r2,fp,-724
 2000cfc:	10c00c04 	addi	r3,r2,48
 2000d00:	e0bf4b04 	addi	r2,fp,-724
 2000d04:	200d883a 	mov	r6,r4
 2000d08:	180b883a 	mov	r5,r3
 2000d0c:	1009883a 	mov	r4,r2
 2000d10:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 2000d14:	e0bf5f04 	addi	r2,fp,-644
 2000d18:	11000c04 	addi	r4,r2,48
 2000d1c:	e0bf4b04 	addi	r2,fp,-724
 2000d20:	10c00e04 	addi	r3,r2,56
 2000d24:	e0bf4b04 	addi	r2,fp,-724
 2000d28:	200d883a 	mov	r6,r4
 2000d2c:	180b883a 	mov	r5,r3
 2000d30:	1009883a 	mov	r4,r2
 2000d34:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 2000d38:	e0bf5f04 	addi	r2,fp,-644
 2000d3c:	11000e04 	addi	r4,r2,56
 2000d40:	e0bf4b04 	addi	r2,fp,-724
 2000d44:	10c01004 	addi	r3,r2,64
 2000d48:	e0bf4b04 	addi	r2,fp,-724
 2000d4c:	200d883a 	mov	r6,r4
 2000d50:	180b883a 	mov	r5,r3
 2000d54:	1009883a 	mov	r4,r2
 2000d58:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 2000d5c:	e0bf5f04 	addi	r2,fp,-644
 2000d60:	11001004 	addi	r4,r2,64
 2000d64:	e0bf4b04 	addi	r2,fp,-724
 2000d68:	10c01204 	addi	r3,r2,72
 2000d6c:	e0bf4b04 	addi	r2,fp,-724
 2000d70:	200d883a 	mov	r6,r4
 2000d74:	180b883a 	mov	r5,r3
 2000d78:	1009883a 	mov	r4,r2
 2000d7c:	2002cf40 	call	2002cf4 <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2000d80:	e0bf5f04 	addi	r2,fp,-644
 2000d84:	11001204 	addi	r4,r2,72
 2000d88:	e0bf4b04 	addi	r2,fp,-724
 2000d8c:	10c00404 	addi	r3,r2,16
 2000d90:	e0bf4b04 	addi	r2,fp,-724
 2000d94:	10800204 	addi	r2,r2,8
 2000d98:	200d883a 	mov	r6,r4
 2000d9c:	180b883a 	mov	r5,r3
 2000da0:	1009883a 	mov	r4,r2
 2000da4:	2002cf40 	call	2002cf4 <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 2000da8:	e0bf5f04 	addi	r2,fp,-644
 2000dac:	11001404 	addi	r4,r2,80
 2000db0:	e0bf4b04 	addi	r2,fp,-724
 2000db4:	10c00604 	addi	r3,r2,24
 2000db8:	e0bf4b04 	addi	r2,fp,-724
 2000dbc:	10800204 	addi	r2,r2,8
 2000dc0:	200d883a 	mov	r6,r4
 2000dc4:	180b883a 	mov	r5,r3
 2000dc8:	1009883a 	mov	r4,r2
 2000dcc:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2000dd0:	e0bf5f04 	addi	r2,fp,-644
 2000dd4:	11001604 	addi	r4,r2,88
 2000dd8:	e0bf4b04 	addi	r2,fp,-724
 2000ddc:	10c00804 	addi	r3,r2,32
 2000de0:	e0bf4b04 	addi	r2,fp,-724
 2000de4:	10800204 	addi	r2,r2,8
 2000de8:	200d883a 	mov	r6,r4
 2000dec:	180b883a 	mov	r5,r3
 2000df0:	1009883a 	mov	r4,r2
 2000df4:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 2000df8:	e0bf5f04 	addi	r2,fp,-644
 2000dfc:	11001804 	addi	r4,r2,96
 2000e00:	e0bf4b04 	addi	r2,fp,-724
 2000e04:	10c00a04 	addi	r3,r2,40
 2000e08:	e0bf4b04 	addi	r2,fp,-724
 2000e0c:	10800204 	addi	r2,r2,8
 2000e10:	200d883a 	mov	r6,r4
 2000e14:	180b883a 	mov	r5,r3
 2000e18:	1009883a 	mov	r4,r2
 2000e1c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 2000e20:	e0bf5f04 	addi	r2,fp,-644
 2000e24:	11001a04 	addi	r4,r2,104
 2000e28:	e0bf4b04 	addi	r2,fp,-724
 2000e2c:	10c00c04 	addi	r3,r2,48
 2000e30:	e0bf4b04 	addi	r2,fp,-724
 2000e34:	10800204 	addi	r2,r2,8
 2000e38:	200d883a 	mov	r6,r4
 2000e3c:	180b883a 	mov	r5,r3
 2000e40:	1009883a 	mov	r4,r2
 2000e44:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 2000e48:	e0bf5f04 	addi	r2,fp,-644
 2000e4c:	11001c04 	addi	r4,r2,112
 2000e50:	e0bf4b04 	addi	r2,fp,-724
 2000e54:	10c00e04 	addi	r3,r2,56
 2000e58:	e0bf4b04 	addi	r2,fp,-724
 2000e5c:	10800204 	addi	r2,r2,8
 2000e60:	200d883a 	mov	r6,r4
 2000e64:	180b883a 	mov	r5,r3
 2000e68:	1009883a 	mov	r4,r2
 2000e6c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2000e70:	e0bf5f04 	addi	r2,fp,-644
 2000e74:	11001e04 	addi	r4,r2,120
 2000e78:	e0bf4b04 	addi	r2,fp,-724
 2000e7c:	10c01004 	addi	r3,r2,64
 2000e80:	e0bf4b04 	addi	r2,fp,-724
 2000e84:	10800204 	addi	r2,r2,8
 2000e88:	200d883a 	mov	r6,r4
 2000e8c:	180b883a 	mov	r5,r3
 2000e90:	1009883a 	mov	r4,r2
 2000e94:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 2000e98:	e0bf5f04 	addi	r2,fp,-644
 2000e9c:	11002004 	addi	r4,r2,128
 2000ea0:	e0bf4b04 	addi	r2,fp,-724
 2000ea4:	10c01204 	addi	r3,r2,72
 2000ea8:	e0bf4b04 	addi	r2,fp,-724
 2000eac:	10800204 	addi	r2,r2,8
 2000eb0:	200d883a 	mov	r6,r4
 2000eb4:	180b883a 	mov	r5,r3
 2000eb8:	1009883a 	mov	r4,r2
 2000ebc:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2000ec0:	e0bf5f04 	addi	r2,fp,-644
 2000ec4:	11002204 	addi	r4,r2,136
 2000ec8:	e0bf4b04 	addi	r2,fp,-724
 2000ecc:	10c00604 	addi	r3,r2,24
 2000ed0:	e0bf4b04 	addi	r2,fp,-724
 2000ed4:	10800404 	addi	r2,r2,16
 2000ed8:	200d883a 	mov	r6,r4
 2000edc:	180b883a 	mov	r5,r3
 2000ee0:	1009883a 	mov	r4,r2
 2000ee4:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 2000ee8:	e0bf5f04 	addi	r2,fp,-644
 2000eec:	11002404 	addi	r4,r2,144
 2000ef0:	e0bf4b04 	addi	r2,fp,-724
 2000ef4:	10c00804 	addi	r3,r2,32
 2000ef8:	e0bf4b04 	addi	r2,fp,-724
 2000efc:	10800404 	addi	r2,r2,16
 2000f00:	200d883a 	mov	r6,r4
 2000f04:	180b883a 	mov	r5,r3
 2000f08:	1009883a 	mov	r4,r2
 2000f0c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 2000f10:	e0bf5f04 	addi	r2,fp,-644
 2000f14:	11002604 	addi	r4,r2,152
 2000f18:	e0bf4b04 	addi	r2,fp,-724
 2000f1c:	10c00a04 	addi	r3,r2,40
 2000f20:	e0bf4b04 	addi	r2,fp,-724
 2000f24:	10800404 	addi	r2,r2,16
 2000f28:	200d883a 	mov	r6,r4
 2000f2c:	180b883a 	mov	r5,r3
 2000f30:	1009883a 	mov	r4,r2
 2000f34:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 2000f38:	e0bf5f04 	addi	r2,fp,-644
 2000f3c:	11002804 	addi	r4,r2,160
 2000f40:	e0bf4b04 	addi	r2,fp,-724
 2000f44:	10c00c04 	addi	r3,r2,48
 2000f48:	e0bf4b04 	addi	r2,fp,-724
 2000f4c:	10800404 	addi	r2,r2,16
 2000f50:	200d883a 	mov	r6,r4
 2000f54:	180b883a 	mov	r5,r3
 2000f58:	1009883a 	mov	r4,r2
 2000f5c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 2000f60:	e0bf5f04 	addi	r2,fp,-644
 2000f64:	11002a04 	addi	r4,r2,168
 2000f68:	e0bf4b04 	addi	r2,fp,-724
 2000f6c:	10c00e04 	addi	r3,r2,56
 2000f70:	e0bf4b04 	addi	r2,fp,-724
 2000f74:	10800404 	addi	r2,r2,16
 2000f78:	200d883a 	mov	r6,r4
 2000f7c:	180b883a 	mov	r5,r3
 2000f80:	1009883a 	mov	r4,r2
 2000f84:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 2000f88:	e0bf5f04 	addi	r2,fp,-644
 2000f8c:	11002c04 	addi	r4,r2,176
 2000f90:	e0bf4b04 	addi	r2,fp,-724
 2000f94:	10c01004 	addi	r3,r2,64
 2000f98:	e0bf4b04 	addi	r2,fp,-724
 2000f9c:	10800404 	addi	r2,r2,16
 2000fa0:	200d883a 	mov	r6,r4
 2000fa4:	180b883a 	mov	r5,r3
 2000fa8:	1009883a 	mov	r4,r2
 2000fac:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2000fb0:	e0bf5f04 	addi	r2,fp,-644
 2000fb4:	11002e04 	addi	r4,r2,184
 2000fb8:	e0bf4b04 	addi	r2,fp,-724
 2000fbc:	10c01204 	addi	r3,r2,72
 2000fc0:	e0bf4b04 	addi	r2,fp,-724
 2000fc4:	10800404 	addi	r2,r2,16
 2000fc8:	200d883a 	mov	r6,r4
 2000fcc:	180b883a 	mov	r5,r3
 2000fd0:	1009883a 	mov	r4,r2
 2000fd4:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 2000fd8:	e0bf5f04 	addi	r2,fp,-644
 2000fdc:	11003004 	addi	r4,r2,192
 2000fe0:	e0bf4b04 	addi	r2,fp,-724
 2000fe4:	10c00804 	addi	r3,r2,32
 2000fe8:	e0bf4b04 	addi	r2,fp,-724
 2000fec:	10800604 	addi	r2,r2,24
 2000ff0:	200d883a 	mov	r6,r4
 2000ff4:	180b883a 	mov	r5,r3
 2000ff8:	1009883a 	mov	r4,r2
 2000ffc:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2001000:	e0bf5f04 	addi	r2,fp,-644
 2001004:	11003204 	addi	r4,r2,200
 2001008:	e0bf4b04 	addi	r2,fp,-724
 200100c:	10c00a04 	addi	r3,r2,40
 2001010:	e0bf4b04 	addi	r2,fp,-724
 2001014:	10800604 	addi	r2,r2,24
 2001018:	200d883a 	mov	r6,r4
 200101c:	180b883a 	mov	r5,r3
 2001020:	1009883a 	mov	r4,r2
 2001024:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 2001028:	e0bf5f04 	addi	r2,fp,-644
 200102c:	11003404 	addi	r4,r2,208
 2001030:	e0bf4b04 	addi	r2,fp,-724
 2001034:	10c00c04 	addi	r3,r2,48
 2001038:	e0bf4b04 	addi	r2,fp,-724
 200103c:	10800604 	addi	r2,r2,24
 2001040:	200d883a 	mov	r6,r4
 2001044:	180b883a 	mov	r5,r3
 2001048:	1009883a 	mov	r4,r2
 200104c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 2001050:	e0bf5f04 	addi	r2,fp,-644
 2001054:	11003604 	addi	r4,r2,216
 2001058:	e0bf4b04 	addi	r2,fp,-724
 200105c:	10c00e04 	addi	r3,r2,56
 2001060:	e0bf4b04 	addi	r2,fp,-724
 2001064:	10800604 	addi	r2,r2,24
 2001068:	200d883a 	mov	r6,r4
 200106c:	180b883a 	mov	r5,r3
 2001070:	1009883a 	mov	r4,r2
 2001074:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 2001078:	e0bf5f04 	addi	r2,fp,-644
 200107c:	11003804 	addi	r4,r2,224
 2001080:	e0bf4b04 	addi	r2,fp,-724
 2001084:	10c01004 	addi	r3,r2,64
 2001088:	e0bf4b04 	addi	r2,fp,-724
 200108c:	10800604 	addi	r2,r2,24
 2001090:	200d883a 	mov	r6,r4
 2001094:	180b883a 	mov	r5,r3
 2001098:	1009883a 	mov	r4,r2
 200109c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 20010a0:	e0bf5f04 	addi	r2,fp,-644
 20010a4:	11003a04 	addi	r4,r2,232
 20010a8:	e0bf4b04 	addi	r2,fp,-724
 20010ac:	10c01204 	addi	r3,r2,72
 20010b0:	e0bf4b04 	addi	r2,fp,-724
 20010b4:	10800604 	addi	r2,r2,24
 20010b8:	200d883a 	mov	r6,r4
 20010bc:	180b883a 	mov	r5,r3
 20010c0:	1009883a 	mov	r4,r2
 20010c4:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 20010c8:	e0bf5f04 	addi	r2,fp,-644
 20010cc:	11003c04 	addi	r4,r2,240
 20010d0:	e0bf4b04 	addi	r2,fp,-724
 20010d4:	10c00a04 	addi	r3,r2,40
 20010d8:	e0bf4b04 	addi	r2,fp,-724
 20010dc:	10800804 	addi	r2,r2,32
 20010e0:	200d883a 	mov	r6,r4
 20010e4:	180b883a 	mov	r5,r3
 20010e8:	1009883a 	mov	r4,r2
 20010ec:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 20010f0:	e0bf5f04 	addi	r2,fp,-644
 20010f4:	11003e04 	addi	r4,r2,248
 20010f8:	e0bf4b04 	addi	r2,fp,-724
 20010fc:	10c00c04 	addi	r3,r2,48
 2001100:	e0bf4b04 	addi	r2,fp,-724
 2001104:	10800804 	addi	r2,r2,32
 2001108:	200d883a 	mov	r6,r4
 200110c:	180b883a 	mov	r5,r3
 2001110:	1009883a 	mov	r4,r2
 2001114:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 2001118:	e0bf5f04 	addi	r2,fp,-644
 200111c:	11004004 	addi	r4,r2,256
 2001120:	e0bf4b04 	addi	r2,fp,-724
 2001124:	10c00e04 	addi	r3,r2,56
 2001128:	e0bf4b04 	addi	r2,fp,-724
 200112c:	10800804 	addi	r2,r2,32
 2001130:	200d883a 	mov	r6,r4
 2001134:	180b883a 	mov	r5,r3
 2001138:	1009883a 	mov	r4,r2
 200113c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 2001140:	e0bf5f04 	addi	r2,fp,-644
 2001144:	11004204 	addi	r4,r2,264
 2001148:	e0bf4b04 	addi	r2,fp,-724
 200114c:	10c01004 	addi	r3,r2,64
 2001150:	e0bf4b04 	addi	r2,fp,-724
 2001154:	10800804 	addi	r2,r2,32
 2001158:	200d883a 	mov	r6,r4
 200115c:	180b883a 	mov	r5,r3
 2001160:	1009883a 	mov	r4,r2
 2001164:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 2001168:	e0bf5f04 	addi	r2,fp,-644
 200116c:	11004404 	addi	r4,r2,272
 2001170:	e0bf4b04 	addi	r2,fp,-724
 2001174:	10c01204 	addi	r3,r2,72
 2001178:	e0bf4b04 	addi	r2,fp,-724
 200117c:	10800804 	addi	r2,r2,32
 2001180:	200d883a 	mov	r6,r4
 2001184:	180b883a 	mov	r5,r3
 2001188:	1009883a 	mov	r4,r2
 200118c:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001190:	e0bf5f04 	addi	r2,fp,-644
 2001194:	11004604 	addi	r4,r2,280
 2001198:	e0bf4b04 	addi	r2,fp,-724
 200119c:	10c00c04 	addi	r3,r2,48
 20011a0:	e0bf4b04 	addi	r2,fp,-724
 20011a4:	10800a04 	addi	r2,r2,40
 20011a8:	200d883a 	mov	r6,r4
 20011ac:	180b883a 	mov	r5,r3
 20011b0:	1009883a 	mov	r4,r2
 20011b4:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 20011b8:	e0bf5f04 	addi	r2,fp,-644
 20011bc:	11004804 	addi	r4,r2,288
 20011c0:	e0bf4b04 	addi	r2,fp,-724
 20011c4:	10c00e04 	addi	r3,r2,56
 20011c8:	e0bf4b04 	addi	r2,fp,-724
 20011cc:	10800a04 	addi	r2,r2,40
 20011d0:	200d883a 	mov	r6,r4
 20011d4:	180b883a 	mov	r5,r3
 20011d8:	1009883a 	mov	r4,r2
 20011dc:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 20011e0:	e0bf5f04 	addi	r2,fp,-644
 20011e4:	11004a04 	addi	r4,r2,296
 20011e8:	e0bf4b04 	addi	r2,fp,-724
 20011ec:	10c01004 	addi	r3,r2,64
 20011f0:	e0bf4b04 	addi	r2,fp,-724
 20011f4:	10800a04 	addi	r2,r2,40
 20011f8:	200d883a 	mov	r6,r4
 20011fc:	180b883a 	mov	r5,r3
 2001200:	1009883a 	mov	r4,r2
 2001204:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 2001208:	e0bf5f04 	addi	r2,fp,-644
 200120c:	11004c04 	addi	r4,r2,304
 2001210:	e0bf4b04 	addi	r2,fp,-724
 2001214:	10c01204 	addi	r3,r2,72
 2001218:	e0bf4b04 	addi	r2,fp,-724
 200121c:	10800a04 	addi	r2,r2,40
 2001220:	200d883a 	mov	r6,r4
 2001224:	180b883a 	mov	r5,r3
 2001228:	1009883a 	mov	r4,r2
 200122c:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 2001230:	e0bf5f04 	addi	r2,fp,-644
 2001234:	11004e04 	addi	r4,r2,312
 2001238:	e0bf4b04 	addi	r2,fp,-724
 200123c:	10c00e04 	addi	r3,r2,56
 2001240:	e0bf4b04 	addi	r2,fp,-724
 2001244:	10800c04 	addi	r2,r2,48
 2001248:	200d883a 	mov	r6,r4
 200124c:	180b883a 	mov	r5,r3
 2001250:	1009883a 	mov	r4,r2
 2001254:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 2001258:	e0bf5f04 	addi	r2,fp,-644
 200125c:	11005004 	addi	r4,r2,320
 2001260:	e0bf4b04 	addi	r2,fp,-724
 2001264:	10c01004 	addi	r3,r2,64
 2001268:	e0bf4b04 	addi	r2,fp,-724
 200126c:	10800c04 	addi	r2,r2,48
 2001270:	200d883a 	mov	r6,r4
 2001274:	180b883a 	mov	r5,r3
 2001278:	1009883a 	mov	r4,r2
 200127c:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001280:	e0bf5f04 	addi	r2,fp,-644
 2001284:	11005204 	addi	r4,r2,328
 2001288:	e0bf4b04 	addi	r2,fp,-724
 200128c:	10c01204 	addi	r3,r2,72
 2001290:	e0bf4b04 	addi	r2,fp,-724
 2001294:	10800c04 	addi	r2,r2,48
 2001298:	200d883a 	mov	r6,r4
 200129c:	180b883a 	mov	r5,r3
 20012a0:	1009883a 	mov	r4,r2
 20012a4:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 20012a8:	e0bf5f04 	addi	r2,fp,-644
 20012ac:	11005404 	addi	r4,r2,336
 20012b0:	e0bf4b04 	addi	r2,fp,-724
 20012b4:	10c01004 	addi	r3,r2,64
 20012b8:	e0bf4b04 	addi	r2,fp,-724
 20012bc:	10800e04 	addi	r2,r2,56
 20012c0:	200d883a 	mov	r6,r4
 20012c4:	180b883a 	mov	r5,r3
 20012c8:	1009883a 	mov	r4,r2
 20012cc:	2002cf40 	call	2002cf4 <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 20012d0:	e0bf5f04 	addi	r2,fp,-644
 20012d4:	11005604 	addi	r4,r2,344
 20012d8:	e0bf4b04 	addi	r2,fp,-724
 20012dc:	10c01204 	addi	r3,r2,72
 20012e0:	e0bf4b04 	addi	r2,fp,-724
 20012e4:	10800e04 	addi	r2,r2,56
 20012e8:	200d883a 	mov	r6,r4
 20012ec:	180b883a 	mov	r5,r3
 20012f0:	1009883a 	mov	r4,r2
 20012f4:	2002cf40 	call	2002cf4 <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 20012f8:	e0bf5f04 	addi	r2,fp,-644
 20012fc:	11005804 	addi	r4,r2,352
 2001300:	e0bf4b04 	addi	r2,fp,-724
 2001304:	10c01204 	addi	r3,r2,72
 2001308:	e0bf4b04 	addi	r2,fp,-724
 200130c:	10801004 	addi	r2,r2,64
 2001310:	200d883a 	mov	r6,r4
 2001314:	180b883a 	mov	r5,r3
 2001318:	1009883a 	mov	r4,r2
 200131c:	2002cf40 	call	2002cf4 <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 2001320:	e0bfe504 	addi	r2,fp,-108
 2001324:	11800204 	addi	r6,r2,8
 2001328:	e17fe504 	addi	r5,fp,-108
 200132c:	e0bf4b04 	addi	r2,fp,-724
 2001330:	11000204 	addi	r4,r2,8
 2001334:	e0ff4b04 	addi	r3,fp,-724
 2001338:	d8000115 	stw	zero,4(sp)
 200133c:	e0bf5f04 	addi	r2,fp,-644
 2001340:	d8800015 	stw	r2,0(sp)
 2001344:	300f883a 	mov	r7,r6
 2001348:	280d883a 	mov	r6,r5
 200134c:	200b883a 	mov	r5,r4
 2001350:	1809883a 	mov	r4,r3
 2001354:	2002db40 	call	2002db4 <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 2001358:	e0bfe504 	addi	r2,fp,-108
 200135c:	11800404 	addi	r6,r2,16
 2001360:	e17fe504 	addi	r5,fp,-108
 2001364:	e0bf4b04 	addi	r2,fp,-724
 2001368:	11000404 	addi	r4,r2,16
 200136c:	e0ff4b04 	addi	r3,fp,-724
 2001370:	00800044 	movi	r2,1
 2001374:	d8800115 	stw	r2,4(sp)
 2001378:	e0bf5f04 	addi	r2,fp,-644
 200137c:	10800204 	addi	r2,r2,8
 2001380:	d8800015 	stw	r2,0(sp)
 2001384:	300f883a 	mov	r7,r6
 2001388:	280d883a 	mov	r6,r5
 200138c:	200b883a 	mov	r5,r4
 2001390:	1809883a 	mov	r4,r3
 2001394:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 2001398:	e0bfe504 	addi	r2,fp,-108
 200139c:	11800604 	addi	r6,r2,24
 20013a0:	e17fe504 	addi	r5,fp,-108
 20013a4:	e0bf4b04 	addi	r2,fp,-724
 20013a8:	11000604 	addi	r4,r2,24
 20013ac:	e0ff4b04 	addi	r3,fp,-724
 20013b0:	00800084 	movi	r2,2
 20013b4:	d8800115 	stw	r2,4(sp)
 20013b8:	e0bf5f04 	addi	r2,fp,-644
 20013bc:	10800404 	addi	r2,r2,16
 20013c0:	d8800015 	stw	r2,0(sp)
 20013c4:	300f883a 	mov	r7,r6
 20013c8:	280d883a 	mov	r6,r5
 20013cc:	200b883a 	mov	r5,r4
 20013d0:	1809883a 	mov	r4,r3
 20013d4:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 20013d8:	e0bfe504 	addi	r2,fp,-108
 20013dc:	11800804 	addi	r6,r2,32
 20013e0:	e17fe504 	addi	r5,fp,-108
 20013e4:	e0bf4b04 	addi	r2,fp,-724
 20013e8:	11000804 	addi	r4,r2,32
 20013ec:	e0ff4b04 	addi	r3,fp,-724
 20013f0:	008000c4 	movi	r2,3
 20013f4:	d8800115 	stw	r2,4(sp)
 20013f8:	e0bf5f04 	addi	r2,fp,-644
 20013fc:	10800604 	addi	r2,r2,24
 2001400:	d8800015 	stw	r2,0(sp)
 2001404:	300f883a 	mov	r7,r6
 2001408:	280d883a 	mov	r6,r5
 200140c:	200b883a 	mov	r5,r4
 2001410:	1809883a 	mov	r4,r3
 2001414:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 2001418:	e0bfe504 	addi	r2,fp,-108
 200141c:	11800a04 	addi	r6,r2,40
 2001420:	e17fe504 	addi	r5,fp,-108
 2001424:	e0bf4b04 	addi	r2,fp,-724
 2001428:	11000a04 	addi	r4,r2,40
 200142c:	e0ff4b04 	addi	r3,fp,-724
 2001430:	00800104 	movi	r2,4
 2001434:	d8800115 	stw	r2,4(sp)
 2001438:	e0bf5f04 	addi	r2,fp,-644
 200143c:	10800804 	addi	r2,r2,32
 2001440:	d8800015 	stw	r2,0(sp)
 2001444:	300f883a 	mov	r7,r6
 2001448:	280d883a 	mov	r6,r5
 200144c:	200b883a 	mov	r5,r4
 2001450:	1809883a 	mov	r4,r3
 2001454:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 2001458:	e0bfe504 	addi	r2,fp,-108
 200145c:	11800c04 	addi	r6,r2,48
 2001460:	e17fe504 	addi	r5,fp,-108
 2001464:	e0bf4b04 	addi	r2,fp,-724
 2001468:	11000c04 	addi	r4,r2,48
 200146c:	e0ff4b04 	addi	r3,fp,-724
 2001470:	00800144 	movi	r2,5
 2001474:	d8800115 	stw	r2,4(sp)
 2001478:	e0bf5f04 	addi	r2,fp,-644
 200147c:	10800a04 	addi	r2,r2,40
 2001480:	d8800015 	stw	r2,0(sp)
 2001484:	300f883a 	mov	r7,r6
 2001488:	280d883a 	mov	r6,r5
 200148c:	200b883a 	mov	r5,r4
 2001490:	1809883a 	mov	r4,r3
 2001494:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 2001498:	e0bfe504 	addi	r2,fp,-108
 200149c:	11800e04 	addi	r6,r2,56
 20014a0:	e17fe504 	addi	r5,fp,-108
 20014a4:	e0bf4b04 	addi	r2,fp,-724
 20014a8:	11000e04 	addi	r4,r2,56
 20014ac:	e0ff4b04 	addi	r3,fp,-724
 20014b0:	00800184 	movi	r2,6
 20014b4:	d8800115 	stw	r2,4(sp)
 20014b8:	e0bf5f04 	addi	r2,fp,-644
 20014bc:	10800c04 	addi	r2,r2,48
 20014c0:	d8800015 	stw	r2,0(sp)
 20014c4:	300f883a 	mov	r7,r6
 20014c8:	280d883a 	mov	r6,r5
 20014cc:	200b883a 	mov	r5,r4
 20014d0:	1809883a 	mov	r4,r3
 20014d4:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 20014d8:	e0bfe504 	addi	r2,fp,-108
 20014dc:	11801004 	addi	r6,r2,64
 20014e0:	e17fe504 	addi	r5,fp,-108
 20014e4:	e0bf4b04 	addi	r2,fp,-724
 20014e8:	11001004 	addi	r4,r2,64
 20014ec:	e0ff4b04 	addi	r3,fp,-724
 20014f0:	008001c4 	movi	r2,7
 20014f4:	d8800115 	stw	r2,4(sp)
 20014f8:	e0bf5f04 	addi	r2,fp,-644
 20014fc:	10800e04 	addi	r2,r2,56
 2001500:	d8800015 	stw	r2,0(sp)
 2001504:	300f883a 	mov	r7,r6
 2001508:	280d883a 	mov	r6,r5
 200150c:	200b883a 	mov	r5,r4
 2001510:	1809883a 	mov	r4,r3
 2001514:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 2001518:	e0bfe504 	addi	r2,fp,-108
 200151c:	11801204 	addi	r6,r2,72
 2001520:	e17fe504 	addi	r5,fp,-108
 2001524:	e0bf4b04 	addi	r2,fp,-724
 2001528:	11001204 	addi	r4,r2,72
 200152c:	e0ff4b04 	addi	r3,fp,-724
 2001530:	00800204 	movi	r2,8
 2001534:	d8800115 	stw	r2,4(sp)
 2001538:	e0bf5f04 	addi	r2,fp,-644
 200153c:	10801004 	addi	r2,r2,64
 2001540:	d8800015 	stw	r2,0(sp)
 2001544:	300f883a 	mov	r7,r6
 2001548:	280d883a 	mov	r6,r5
 200154c:	200b883a 	mov	r5,r4
 2001550:	1809883a 	mov	r4,r3
 2001554:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 2001558:	e0bfe504 	addi	r2,fp,-108
 200155c:	11800404 	addi	r6,r2,16
 2001560:	e0bfe504 	addi	r2,fp,-108
 2001564:	11400204 	addi	r5,r2,8
 2001568:	e0bf4b04 	addi	r2,fp,-724
 200156c:	11000404 	addi	r4,r2,16
 2001570:	e0bf4b04 	addi	r2,fp,-724
 2001574:	10c00204 	addi	r3,r2,8
 2001578:	00800244 	movi	r2,9
 200157c:	d8800115 	stw	r2,4(sp)
 2001580:	e0bf5f04 	addi	r2,fp,-644
 2001584:	10801204 	addi	r2,r2,72
 2001588:	d8800015 	stw	r2,0(sp)
 200158c:	300f883a 	mov	r7,r6
 2001590:	280d883a 	mov	r6,r5
 2001594:	200b883a 	mov	r5,r4
 2001598:	1809883a 	mov	r4,r3
 200159c:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 20015a0:	e0bfe504 	addi	r2,fp,-108
 20015a4:	11800604 	addi	r6,r2,24
 20015a8:	e0bfe504 	addi	r2,fp,-108
 20015ac:	11400204 	addi	r5,r2,8
 20015b0:	e0bf4b04 	addi	r2,fp,-724
 20015b4:	11000604 	addi	r4,r2,24
 20015b8:	e0bf4b04 	addi	r2,fp,-724
 20015bc:	10c00204 	addi	r3,r2,8
 20015c0:	00800284 	movi	r2,10
 20015c4:	d8800115 	stw	r2,4(sp)
 20015c8:	e0bf5f04 	addi	r2,fp,-644
 20015cc:	10801404 	addi	r2,r2,80
 20015d0:	d8800015 	stw	r2,0(sp)
 20015d4:	300f883a 	mov	r7,r6
 20015d8:	280d883a 	mov	r6,r5
 20015dc:	200b883a 	mov	r5,r4
 20015e0:	1809883a 	mov	r4,r3
 20015e4:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 20015e8:	e0bfe504 	addi	r2,fp,-108
 20015ec:	11800804 	addi	r6,r2,32
 20015f0:	e0bfe504 	addi	r2,fp,-108
 20015f4:	11400204 	addi	r5,r2,8
 20015f8:	e0bf4b04 	addi	r2,fp,-724
 20015fc:	11000804 	addi	r4,r2,32
 2001600:	e0bf4b04 	addi	r2,fp,-724
 2001604:	10c00204 	addi	r3,r2,8
 2001608:	008002c4 	movi	r2,11
 200160c:	d8800115 	stw	r2,4(sp)
 2001610:	e0bf5f04 	addi	r2,fp,-644
 2001614:	10801604 	addi	r2,r2,88
 2001618:	d8800015 	stw	r2,0(sp)
 200161c:	300f883a 	mov	r7,r6
 2001620:	280d883a 	mov	r6,r5
 2001624:	200b883a 	mov	r5,r4
 2001628:	1809883a 	mov	r4,r3
 200162c:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 2001630:	e0bfe504 	addi	r2,fp,-108
 2001634:	11800a04 	addi	r6,r2,40
 2001638:	e0bfe504 	addi	r2,fp,-108
 200163c:	11400204 	addi	r5,r2,8
 2001640:	e0bf4b04 	addi	r2,fp,-724
 2001644:	11000a04 	addi	r4,r2,40
 2001648:	e0bf4b04 	addi	r2,fp,-724
 200164c:	10c00204 	addi	r3,r2,8
 2001650:	00800304 	movi	r2,12
 2001654:	d8800115 	stw	r2,4(sp)
 2001658:	e0bf5f04 	addi	r2,fp,-644
 200165c:	10801804 	addi	r2,r2,96
 2001660:	d8800015 	stw	r2,0(sp)
 2001664:	300f883a 	mov	r7,r6
 2001668:	280d883a 	mov	r6,r5
 200166c:	200b883a 	mov	r5,r4
 2001670:	1809883a 	mov	r4,r3
 2001674:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 2001678:	e0bfe504 	addi	r2,fp,-108
 200167c:	11800c04 	addi	r6,r2,48
 2001680:	e0bfe504 	addi	r2,fp,-108
 2001684:	11400204 	addi	r5,r2,8
 2001688:	e0bf4b04 	addi	r2,fp,-724
 200168c:	11000c04 	addi	r4,r2,48
 2001690:	e0bf4b04 	addi	r2,fp,-724
 2001694:	10c00204 	addi	r3,r2,8
 2001698:	00800344 	movi	r2,13
 200169c:	d8800115 	stw	r2,4(sp)
 20016a0:	e0bf5f04 	addi	r2,fp,-644
 20016a4:	10801a04 	addi	r2,r2,104
 20016a8:	d8800015 	stw	r2,0(sp)
 20016ac:	300f883a 	mov	r7,r6
 20016b0:	280d883a 	mov	r6,r5
 20016b4:	200b883a 	mov	r5,r4
 20016b8:	1809883a 	mov	r4,r3
 20016bc:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 20016c0:	e0bfe504 	addi	r2,fp,-108
 20016c4:	11800e04 	addi	r6,r2,56
 20016c8:	e0bfe504 	addi	r2,fp,-108
 20016cc:	11400204 	addi	r5,r2,8
 20016d0:	e0bf4b04 	addi	r2,fp,-724
 20016d4:	11000e04 	addi	r4,r2,56
 20016d8:	e0bf4b04 	addi	r2,fp,-724
 20016dc:	10c00204 	addi	r3,r2,8
 20016e0:	00800384 	movi	r2,14
 20016e4:	d8800115 	stw	r2,4(sp)
 20016e8:	e0bf5f04 	addi	r2,fp,-644
 20016ec:	10801c04 	addi	r2,r2,112
 20016f0:	d8800015 	stw	r2,0(sp)
 20016f4:	300f883a 	mov	r7,r6
 20016f8:	280d883a 	mov	r6,r5
 20016fc:	200b883a 	mov	r5,r4
 2001700:	1809883a 	mov	r4,r3
 2001704:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 2001708:	e0bfe504 	addi	r2,fp,-108
 200170c:	11801004 	addi	r6,r2,64
 2001710:	e0bfe504 	addi	r2,fp,-108
 2001714:	11400204 	addi	r5,r2,8
 2001718:	e0bf4b04 	addi	r2,fp,-724
 200171c:	11001004 	addi	r4,r2,64
 2001720:	e0bf4b04 	addi	r2,fp,-724
 2001724:	10c00204 	addi	r3,r2,8
 2001728:	008003c4 	movi	r2,15
 200172c:	d8800115 	stw	r2,4(sp)
 2001730:	e0bf5f04 	addi	r2,fp,-644
 2001734:	10801e04 	addi	r2,r2,120
 2001738:	d8800015 	stw	r2,0(sp)
 200173c:	300f883a 	mov	r7,r6
 2001740:	280d883a 	mov	r6,r5
 2001744:	200b883a 	mov	r5,r4
 2001748:	1809883a 	mov	r4,r3
 200174c:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 2001750:	e0bfe504 	addi	r2,fp,-108
 2001754:	11801204 	addi	r6,r2,72
 2001758:	e0bfe504 	addi	r2,fp,-108
 200175c:	11400204 	addi	r5,r2,8
 2001760:	e0bf4b04 	addi	r2,fp,-724
 2001764:	11001204 	addi	r4,r2,72
 2001768:	e0bf4b04 	addi	r2,fp,-724
 200176c:	10c00204 	addi	r3,r2,8
 2001770:	00800404 	movi	r2,16
 2001774:	d8800115 	stw	r2,4(sp)
 2001778:	e0bf5f04 	addi	r2,fp,-644
 200177c:	10802004 	addi	r2,r2,128
 2001780:	d8800015 	stw	r2,0(sp)
 2001784:	300f883a 	mov	r7,r6
 2001788:	280d883a 	mov	r6,r5
 200178c:	200b883a 	mov	r5,r4
 2001790:	1809883a 	mov	r4,r3
 2001794:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 2001798:	e0bfe504 	addi	r2,fp,-108
 200179c:	11800604 	addi	r6,r2,24
 20017a0:	e0bfe504 	addi	r2,fp,-108
 20017a4:	11400404 	addi	r5,r2,16
 20017a8:	e0bf4b04 	addi	r2,fp,-724
 20017ac:	11000604 	addi	r4,r2,24
 20017b0:	e0bf4b04 	addi	r2,fp,-724
 20017b4:	10c00404 	addi	r3,r2,16
 20017b8:	00800444 	movi	r2,17
 20017bc:	d8800115 	stw	r2,4(sp)
 20017c0:	e0bf5f04 	addi	r2,fp,-644
 20017c4:	10802204 	addi	r2,r2,136
 20017c8:	d8800015 	stw	r2,0(sp)
 20017cc:	300f883a 	mov	r7,r6
 20017d0:	280d883a 	mov	r6,r5
 20017d4:	200b883a 	mov	r5,r4
 20017d8:	1809883a 	mov	r4,r3
 20017dc:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 20017e0:	e0bfe504 	addi	r2,fp,-108
 20017e4:	11800804 	addi	r6,r2,32
 20017e8:	e0bfe504 	addi	r2,fp,-108
 20017ec:	11400404 	addi	r5,r2,16
 20017f0:	e0bf4b04 	addi	r2,fp,-724
 20017f4:	11000804 	addi	r4,r2,32
 20017f8:	e0bf4b04 	addi	r2,fp,-724
 20017fc:	10c00404 	addi	r3,r2,16
 2001800:	00800484 	movi	r2,18
 2001804:	d8800115 	stw	r2,4(sp)
 2001808:	e0bf5f04 	addi	r2,fp,-644
 200180c:	10802404 	addi	r2,r2,144
 2001810:	d8800015 	stw	r2,0(sp)
 2001814:	300f883a 	mov	r7,r6
 2001818:	280d883a 	mov	r6,r5
 200181c:	200b883a 	mov	r5,r4
 2001820:	1809883a 	mov	r4,r3
 2001824:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 2001828:	e0bfe504 	addi	r2,fp,-108
 200182c:	11800a04 	addi	r6,r2,40
 2001830:	e0bfe504 	addi	r2,fp,-108
 2001834:	11400404 	addi	r5,r2,16
 2001838:	e0bf4b04 	addi	r2,fp,-724
 200183c:	11000a04 	addi	r4,r2,40
 2001840:	e0bf4b04 	addi	r2,fp,-724
 2001844:	10c00404 	addi	r3,r2,16
 2001848:	008004c4 	movi	r2,19
 200184c:	d8800115 	stw	r2,4(sp)
 2001850:	e0bf5f04 	addi	r2,fp,-644
 2001854:	10802604 	addi	r2,r2,152
 2001858:	d8800015 	stw	r2,0(sp)
 200185c:	300f883a 	mov	r7,r6
 2001860:	280d883a 	mov	r6,r5
 2001864:	200b883a 	mov	r5,r4
 2001868:	1809883a 	mov	r4,r3
 200186c:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001870:	e0bfe504 	addi	r2,fp,-108
 2001874:	11800c04 	addi	r6,r2,48
 2001878:	e0bfe504 	addi	r2,fp,-108
 200187c:	11400404 	addi	r5,r2,16
 2001880:	e0bf4b04 	addi	r2,fp,-724
 2001884:	11000c04 	addi	r4,r2,48
 2001888:	e0bf4b04 	addi	r2,fp,-724
 200188c:	10c00404 	addi	r3,r2,16
 2001890:	00800504 	movi	r2,20
 2001894:	d8800115 	stw	r2,4(sp)
 2001898:	e0bf5f04 	addi	r2,fp,-644
 200189c:	10802804 	addi	r2,r2,160
 20018a0:	d8800015 	stw	r2,0(sp)
 20018a4:	300f883a 	mov	r7,r6
 20018a8:	280d883a 	mov	r6,r5
 20018ac:	200b883a 	mov	r5,r4
 20018b0:	1809883a 	mov	r4,r3
 20018b4:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 20018b8:	e0bfe504 	addi	r2,fp,-108
 20018bc:	11800e04 	addi	r6,r2,56
 20018c0:	e0bfe504 	addi	r2,fp,-108
 20018c4:	11400404 	addi	r5,r2,16
 20018c8:	e0bf4b04 	addi	r2,fp,-724
 20018cc:	11000e04 	addi	r4,r2,56
 20018d0:	e0bf4b04 	addi	r2,fp,-724
 20018d4:	10c00404 	addi	r3,r2,16
 20018d8:	00800544 	movi	r2,21
 20018dc:	d8800115 	stw	r2,4(sp)
 20018e0:	e0bf5f04 	addi	r2,fp,-644
 20018e4:	10802a04 	addi	r2,r2,168
 20018e8:	d8800015 	stw	r2,0(sp)
 20018ec:	300f883a 	mov	r7,r6
 20018f0:	280d883a 	mov	r6,r5
 20018f4:	200b883a 	mov	r5,r4
 20018f8:	1809883a 	mov	r4,r3
 20018fc:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 2001900:	e0bfe504 	addi	r2,fp,-108
 2001904:	11801004 	addi	r6,r2,64
 2001908:	e0bfe504 	addi	r2,fp,-108
 200190c:	11400404 	addi	r5,r2,16
 2001910:	e0bf4b04 	addi	r2,fp,-724
 2001914:	11001004 	addi	r4,r2,64
 2001918:	e0bf4b04 	addi	r2,fp,-724
 200191c:	10c00404 	addi	r3,r2,16
 2001920:	00800584 	movi	r2,22
 2001924:	d8800115 	stw	r2,4(sp)
 2001928:	e0bf5f04 	addi	r2,fp,-644
 200192c:	10802c04 	addi	r2,r2,176
 2001930:	d8800015 	stw	r2,0(sp)
 2001934:	300f883a 	mov	r7,r6
 2001938:	280d883a 	mov	r6,r5
 200193c:	200b883a 	mov	r5,r4
 2001940:	1809883a 	mov	r4,r3
 2001944:	2002db40 	call	2002db4 <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 2001948:	e0bfe504 	addi	r2,fp,-108
 200194c:	11801204 	addi	r6,r2,72
 2001950:	e0bfe504 	addi	r2,fp,-108
 2001954:	11400404 	addi	r5,r2,16
 2001958:	e0bf4b04 	addi	r2,fp,-724
 200195c:	11001204 	addi	r4,r2,72
 2001960:	e0bf4b04 	addi	r2,fp,-724
 2001964:	10c00404 	addi	r3,r2,16
 2001968:	008005c4 	movi	r2,23
 200196c:	d8800115 	stw	r2,4(sp)
 2001970:	e0bf5f04 	addi	r2,fp,-644
 2001974:	10802e04 	addi	r2,r2,184
 2001978:	d8800015 	stw	r2,0(sp)
 200197c:	300f883a 	mov	r7,r6
 2001980:	280d883a 	mov	r6,r5
 2001984:	200b883a 	mov	r5,r4
 2001988:	1809883a 	mov	r4,r3
 200198c:	2002db40 	call	2002db4 <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001990:	e0bfe504 	addi	r2,fp,-108
 2001994:	11800804 	addi	r6,r2,32
 2001998:	e0bfe504 	addi	r2,fp,-108
 200199c:	11400604 	addi	r5,r2,24
 20019a0:	e0bf4b04 	addi	r2,fp,-724
 20019a4:	11000804 	addi	r4,r2,32
 20019a8:	e0bf4b04 	addi	r2,fp,-724
 20019ac:	10c00604 	addi	r3,r2,24
 20019b0:	00800604 	movi	r2,24
 20019b4:	d8800115 	stw	r2,4(sp)
 20019b8:	e0bf5f04 	addi	r2,fp,-644
 20019bc:	10803004 	addi	r2,r2,192
 20019c0:	d8800015 	stw	r2,0(sp)
 20019c4:	300f883a 	mov	r7,r6
 20019c8:	280d883a 	mov	r6,r5
 20019cc:	200b883a 	mov	r5,r4
 20019d0:	1809883a 	mov	r4,r3
 20019d4:	2002db40 	call	2002db4 <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 20019d8:	e0bfe504 	addi	r2,fp,-108
 20019dc:	11800a04 	addi	r6,r2,40
 20019e0:	e0bfe504 	addi	r2,fp,-108
 20019e4:	11400604 	addi	r5,r2,24
 20019e8:	e0bf4b04 	addi	r2,fp,-724
 20019ec:	11000a04 	addi	r4,r2,40
 20019f0:	e0bf4b04 	addi	r2,fp,-724
 20019f4:	10c00604 	addi	r3,r2,24
 20019f8:	00800644 	movi	r2,25
 20019fc:	d8800115 	stw	r2,4(sp)
 2001a00:	e0bf5f04 	addi	r2,fp,-644
 2001a04:	10803204 	addi	r2,r2,200
 2001a08:	d8800015 	stw	r2,0(sp)
 2001a0c:	300f883a 	mov	r7,r6
 2001a10:	280d883a 	mov	r6,r5
 2001a14:	200b883a 	mov	r5,r4
 2001a18:	1809883a 	mov	r4,r3
 2001a1c:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 2001a20:	e0bfe504 	addi	r2,fp,-108
 2001a24:	11800c04 	addi	r6,r2,48
 2001a28:	e0bfe504 	addi	r2,fp,-108
 2001a2c:	11400604 	addi	r5,r2,24
 2001a30:	e0bf4b04 	addi	r2,fp,-724
 2001a34:	11000c04 	addi	r4,r2,48
 2001a38:	e0bf4b04 	addi	r2,fp,-724
 2001a3c:	10c00604 	addi	r3,r2,24
 2001a40:	00800684 	movi	r2,26
 2001a44:	d8800115 	stw	r2,4(sp)
 2001a48:	e0bf5f04 	addi	r2,fp,-644
 2001a4c:	10803404 	addi	r2,r2,208
 2001a50:	d8800015 	stw	r2,0(sp)
 2001a54:	300f883a 	mov	r7,r6
 2001a58:	280d883a 	mov	r6,r5
 2001a5c:	200b883a 	mov	r5,r4
 2001a60:	1809883a 	mov	r4,r3
 2001a64:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001a68:	e0bfe504 	addi	r2,fp,-108
 2001a6c:	11800e04 	addi	r6,r2,56
 2001a70:	e0bfe504 	addi	r2,fp,-108
 2001a74:	11400604 	addi	r5,r2,24
 2001a78:	e0bf4b04 	addi	r2,fp,-724
 2001a7c:	11000e04 	addi	r4,r2,56
 2001a80:	e0bf4b04 	addi	r2,fp,-724
 2001a84:	10c00604 	addi	r3,r2,24
 2001a88:	008006c4 	movi	r2,27
 2001a8c:	d8800115 	stw	r2,4(sp)
 2001a90:	e0bf5f04 	addi	r2,fp,-644
 2001a94:	10803604 	addi	r2,r2,216
 2001a98:	d8800015 	stw	r2,0(sp)
 2001a9c:	300f883a 	mov	r7,r6
 2001aa0:	280d883a 	mov	r6,r5
 2001aa4:	200b883a 	mov	r5,r4
 2001aa8:	1809883a 	mov	r4,r3
 2001aac:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001ab0:	e0bfe504 	addi	r2,fp,-108
 2001ab4:	11801004 	addi	r6,r2,64
 2001ab8:	e0bfe504 	addi	r2,fp,-108
 2001abc:	11400604 	addi	r5,r2,24
 2001ac0:	e0bf4b04 	addi	r2,fp,-724
 2001ac4:	11001004 	addi	r4,r2,64
 2001ac8:	e0bf4b04 	addi	r2,fp,-724
 2001acc:	10c00604 	addi	r3,r2,24
 2001ad0:	00800704 	movi	r2,28
 2001ad4:	d8800115 	stw	r2,4(sp)
 2001ad8:	e0bf5f04 	addi	r2,fp,-644
 2001adc:	10803804 	addi	r2,r2,224
 2001ae0:	d8800015 	stw	r2,0(sp)
 2001ae4:	300f883a 	mov	r7,r6
 2001ae8:	280d883a 	mov	r6,r5
 2001aec:	200b883a 	mov	r5,r4
 2001af0:	1809883a 	mov	r4,r3
 2001af4:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001af8:	e0bfe504 	addi	r2,fp,-108
 2001afc:	11801204 	addi	r6,r2,72
 2001b00:	e0bfe504 	addi	r2,fp,-108
 2001b04:	11400604 	addi	r5,r2,24
 2001b08:	e0bf4b04 	addi	r2,fp,-724
 2001b0c:	11001204 	addi	r4,r2,72
 2001b10:	e0bf4b04 	addi	r2,fp,-724
 2001b14:	10c00604 	addi	r3,r2,24
 2001b18:	00800744 	movi	r2,29
 2001b1c:	d8800115 	stw	r2,4(sp)
 2001b20:	e0bf5f04 	addi	r2,fp,-644
 2001b24:	10803a04 	addi	r2,r2,232
 2001b28:	d8800015 	stw	r2,0(sp)
 2001b2c:	300f883a 	mov	r7,r6
 2001b30:	280d883a 	mov	r6,r5
 2001b34:	200b883a 	mov	r5,r4
 2001b38:	1809883a 	mov	r4,r3
 2001b3c:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001b40:	e0bfe504 	addi	r2,fp,-108
 2001b44:	11800a04 	addi	r6,r2,40
 2001b48:	e0bfe504 	addi	r2,fp,-108
 2001b4c:	11400804 	addi	r5,r2,32
 2001b50:	e0bf4b04 	addi	r2,fp,-724
 2001b54:	11000a04 	addi	r4,r2,40
 2001b58:	e0bf4b04 	addi	r2,fp,-724
 2001b5c:	10c00804 	addi	r3,r2,32
 2001b60:	00800784 	movi	r2,30
 2001b64:	d8800115 	stw	r2,4(sp)
 2001b68:	e0bf5f04 	addi	r2,fp,-644
 2001b6c:	10803c04 	addi	r2,r2,240
 2001b70:	d8800015 	stw	r2,0(sp)
 2001b74:	300f883a 	mov	r7,r6
 2001b78:	280d883a 	mov	r6,r5
 2001b7c:	200b883a 	mov	r5,r4
 2001b80:	1809883a 	mov	r4,r3
 2001b84:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001b88:	e0bfe504 	addi	r2,fp,-108
 2001b8c:	11800c04 	addi	r6,r2,48
 2001b90:	e0bfe504 	addi	r2,fp,-108
 2001b94:	11400804 	addi	r5,r2,32
 2001b98:	e0bf4b04 	addi	r2,fp,-724
 2001b9c:	11000c04 	addi	r4,r2,48
 2001ba0:	e0bf4b04 	addi	r2,fp,-724
 2001ba4:	10c00804 	addi	r3,r2,32
 2001ba8:	008007c4 	movi	r2,31
 2001bac:	d8800115 	stw	r2,4(sp)
 2001bb0:	e0bf5f04 	addi	r2,fp,-644
 2001bb4:	10803e04 	addi	r2,r2,248
 2001bb8:	d8800015 	stw	r2,0(sp)
 2001bbc:	300f883a 	mov	r7,r6
 2001bc0:	280d883a 	mov	r6,r5
 2001bc4:	200b883a 	mov	r5,r4
 2001bc8:	1809883a 	mov	r4,r3
 2001bcc:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001bd0:	e0bfe504 	addi	r2,fp,-108
 2001bd4:	11800e04 	addi	r6,r2,56
 2001bd8:	e0bfe504 	addi	r2,fp,-108
 2001bdc:	11400804 	addi	r5,r2,32
 2001be0:	e0bf4b04 	addi	r2,fp,-724
 2001be4:	11000e04 	addi	r4,r2,56
 2001be8:	e0bf4b04 	addi	r2,fp,-724
 2001bec:	10c00804 	addi	r3,r2,32
 2001bf0:	00800804 	movi	r2,32
 2001bf4:	d8800115 	stw	r2,4(sp)
 2001bf8:	e0bf5f04 	addi	r2,fp,-644
 2001bfc:	10804004 	addi	r2,r2,256
 2001c00:	d8800015 	stw	r2,0(sp)
 2001c04:	300f883a 	mov	r7,r6
 2001c08:	280d883a 	mov	r6,r5
 2001c0c:	200b883a 	mov	r5,r4
 2001c10:	1809883a 	mov	r4,r3
 2001c14:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001c18:	e0bfe504 	addi	r2,fp,-108
 2001c1c:	11801004 	addi	r6,r2,64
 2001c20:	e0bfe504 	addi	r2,fp,-108
 2001c24:	11400804 	addi	r5,r2,32
 2001c28:	e0bf4b04 	addi	r2,fp,-724
 2001c2c:	11001004 	addi	r4,r2,64
 2001c30:	e0bf4b04 	addi	r2,fp,-724
 2001c34:	10c00804 	addi	r3,r2,32
 2001c38:	00800844 	movi	r2,33
 2001c3c:	d8800115 	stw	r2,4(sp)
 2001c40:	e0bf5f04 	addi	r2,fp,-644
 2001c44:	10804204 	addi	r2,r2,264
 2001c48:	d8800015 	stw	r2,0(sp)
 2001c4c:	300f883a 	mov	r7,r6
 2001c50:	280d883a 	mov	r6,r5
 2001c54:	200b883a 	mov	r5,r4
 2001c58:	1809883a 	mov	r4,r3
 2001c5c:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001c60:	e0bfe504 	addi	r2,fp,-108
 2001c64:	11801204 	addi	r6,r2,72
 2001c68:	e0bfe504 	addi	r2,fp,-108
 2001c6c:	11400804 	addi	r5,r2,32
 2001c70:	e0bf4b04 	addi	r2,fp,-724
 2001c74:	11001204 	addi	r4,r2,72
 2001c78:	e0bf4b04 	addi	r2,fp,-724
 2001c7c:	10c00804 	addi	r3,r2,32
 2001c80:	00800884 	movi	r2,34
 2001c84:	d8800115 	stw	r2,4(sp)
 2001c88:	e0bf5f04 	addi	r2,fp,-644
 2001c8c:	10804404 	addi	r2,r2,272
 2001c90:	d8800015 	stw	r2,0(sp)
 2001c94:	300f883a 	mov	r7,r6
 2001c98:	280d883a 	mov	r6,r5
 2001c9c:	200b883a 	mov	r5,r4
 2001ca0:	1809883a 	mov	r4,r3
 2001ca4:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 2001ca8:	e0bfe504 	addi	r2,fp,-108
 2001cac:	11800c04 	addi	r6,r2,48
 2001cb0:	e0bfe504 	addi	r2,fp,-108
 2001cb4:	11400a04 	addi	r5,r2,40
 2001cb8:	e0bf4b04 	addi	r2,fp,-724
 2001cbc:	11000c04 	addi	r4,r2,48
 2001cc0:	e0bf4b04 	addi	r2,fp,-724
 2001cc4:	10c00a04 	addi	r3,r2,40
 2001cc8:	008008c4 	movi	r2,35
 2001ccc:	d8800115 	stw	r2,4(sp)
 2001cd0:	e0bf5f04 	addi	r2,fp,-644
 2001cd4:	10804604 	addi	r2,r2,280
 2001cd8:	d8800015 	stw	r2,0(sp)
 2001cdc:	300f883a 	mov	r7,r6
 2001ce0:	280d883a 	mov	r6,r5
 2001ce4:	200b883a 	mov	r5,r4
 2001ce8:	1809883a 	mov	r4,r3
 2001cec:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2001cf0:	e0bfe504 	addi	r2,fp,-108
 2001cf4:	11800e04 	addi	r6,r2,56
 2001cf8:	e0bfe504 	addi	r2,fp,-108
 2001cfc:	11400a04 	addi	r5,r2,40
 2001d00:	e0bf4b04 	addi	r2,fp,-724
 2001d04:	11000e04 	addi	r4,r2,56
 2001d08:	e0bf4b04 	addi	r2,fp,-724
 2001d0c:	10c00a04 	addi	r3,r2,40
 2001d10:	00800904 	movi	r2,36
 2001d14:	d8800115 	stw	r2,4(sp)
 2001d18:	e0bf5f04 	addi	r2,fp,-644
 2001d1c:	10804804 	addi	r2,r2,288
 2001d20:	d8800015 	stw	r2,0(sp)
 2001d24:	300f883a 	mov	r7,r6
 2001d28:	280d883a 	mov	r6,r5
 2001d2c:	200b883a 	mov	r5,r4
 2001d30:	1809883a 	mov	r4,r3
 2001d34:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 2001d38:	e0bfe504 	addi	r2,fp,-108
 2001d3c:	11801004 	addi	r6,r2,64
 2001d40:	e0bfe504 	addi	r2,fp,-108
 2001d44:	11400a04 	addi	r5,r2,40
 2001d48:	e0bf4b04 	addi	r2,fp,-724
 2001d4c:	11001004 	addi	r4,r2,64
 2001d50:	e0bf4b04 	addi	r2,fp,-724
 2001d54:	10c00a04 	addi	r3,r2,40
 2001d58:	00800944 	movi	r2,37
 2001d5c:	d8800115 	stw	r2,4(sp)
 2001d60:	e0bf5f04 	addi	r2,fp,-644
 2001d64:	10804a04 	addi	r2,r2,296
 2001d68:	d8800015 	stw	r2,0(sp)
 2001d6c:	300f883a 	mov	r7,r6
 2001d70:	280d883a 	mov	r6,r5
 2001d74:	200b883a 	mov	r5,r4
 2001d78:	1809883a 	mov	r4,r3
 2001d7c:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2001d80:	e0bfe504 	addi	r2,fp,-108
 2001d84:	11801204 	addi	r6,r2,72
 2001d88:	e0bfe504 	addi	r2,fp,-108
 2001d8c:	11400a04 	addi	r5,r2,40
 2001d90:	e0bf4b04 	addi	r2,fp,-724
 2001d94:	11001204 	addi	r4,r2,72
 2001d98:	e0bf4b04 	addi	r2,fp,-724
 2001d9c:	10c00a04 	addi	r3,r2,40
 2001da0:	00800984 	movi	r2,38
 2001da4:	d8800115 	stw	r2,4(sp)
 2001da8:	e0bf5f04 	addi	r2,fp,-644
 2001dac:	10804c04 	addi	r2,r2,304
 2001db0:	d8800015 	stw	r2,0(sp)
 2001db4:	300f883a 	mov	r7,r6
 2001db8:	280d883a 	mov	r6,r5
 2001dbc:	200b883a 	mov	r5,r4
 2001dc0:	1809883a 	mov	r4,r3
 2001dc4:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 2001dc8:	e0bfe504 	addi	r2,fp,-108
 2001dcc:	11800e04 	addi	r6,r2,56
 2001dd0:	e0bfe504 	addi	r2,fp,-108
 2001dd4:	11400c04 	addi	r5,r2,48
 2001dd8:	e0bf4b04 	addi	r2,fp,-724
 2001ddc:	11000e04 	addi	r4,r2,56
 2001de0:	e0bf4b04 	addi	r2,fp,-724
 2001de4:	10c00c04 	addi	r3,r2,48
 2001de8:	008009c4 	movi	r2,39
 2001dec:	d8800115 	stw	r2,4(sp)
 2001df0:	e0bf5f04 	addi	r2,fp,-644
 2001df4:	10804e04 	addi	r2,r2,312
 2001df8:	d8800015 	stw	r2,0(sp)
 2001dfc:	300f883a 	mov	r7,r6
 2001e00:	280d883a 	mov	r6,r5
 2001e04:	200b883a 	mov	r5,r4
 2001e08:	1809883a 	mov	r4,r3
 2001e0c:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 2001e10:	e0bfe504 	addi	r2,fp,-108
 2001e14:	11801004 	addi	r6,r2,64
 2001e18:	e0bfe504 	addi	r2,fp,-108
 2001e1c:	11400c04 	addi	r5,r2,48
 2001e20:	e0bf4b04 	addi	r2,fp,-724
 2001e24:	11001004 	addi	r4,r2,64
 2001e28:	e0bf4b04 	addi	r2,fp,-724
 2001e2c:	10c00c04 	addi	r3,r2,48
 2001e30:	00800a04 	movi	r2,40
 2001e34:	d8800115 	stw	r2,4(sp)
 2001e38:	e0bf5f04 	addi	r2,fp,-644
 2001e3c:	10805004 	addi	r2,r2,320
 2001e40:	d8800015 	stw	r2,0(sp)
 2001e44:	300f883a 	mov	r7,r6
 2001e48:	280d883a 	mov	r6,r5
 2001e4c:	200b883a 	mov	r5,r4
 2001e50:	1809883a 	mov	r4,r3
 2001e54:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 2001e58:	e0bfe504 	addi	r2,fp,-108
 2001e5c:	11801204 	addi	r6,r2,72
 2001e60:	e0bfe504 	addi	r2,fp,-108
 2001e64:	11400c04 	addi	r5,r2,48
 2001e68:	e0bf4b04 	addi	r2,fp,-724
 2001e6c:	11001204 	addi	r4,r2,72
 2001e70:	e0bf4b04 	addi	r2,fp,-724
 2001e74:	10c00c04 	addi	r3,r2,48
 2001e78:	00800a44 	movi	r2,41
 2001e7c:	d8800115 	stw	r2,4(sp)
 2001e80:	e0bf5f04 	addi	r2,fp,-644
 2001e84:	10805204 	addi	r2,r2,328
 2001e88:	d8800015 	stw	r2,0(sp)
 2001e8c:	300f883a 	mov	r7,r6
 2001e90:	280d883a 	mov	r6,r5
 2001e94:	200b883a 	mov	r5,r4
 2001e98:	1809883a 	mov	r4,r3
 2001e9c:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2001ea0:	e0bfe504 	addi	r2,fp,-108
 2001ea4:	11801004 	addi	r6,r2,64
 2001ea8:	e0bfe504 	addi	r2,fp,-108
 2001eac:	11400e04 	addi	r5,r2,56
 2001eb0:	e0bf4b04 	addi	r2,fp,-724
 2001eb4:	11001004 	addi	r4,r2,64
 2001eb8:	e0bf4b04 	addi	r2,fp,-724
 2001ebc:	10c00e04 	addi	r3,r2,56
 2001ec0:	00800a84 	movi	r2,42
 2001ec4:	d8800115 	stw	r2,4(sp)
 2001ec8:	e0bf5f04 	addi	r2,fp,-644
 2001ecc:	10805404 	addi	r2,r2,336
 2001ed0:	d8800015 	stw	r2,0(sp)
 2001ed4:	300f883a 	mov	r7,r6
 2001ed8:	280d883a 	mov	r6,r5
 2001edc:	200b883a 	mov	r5,r4
 2001ee0:	1809883a 	mov	r4,r3
 2001ee4:	2002db40 	call	2002db4 <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 2001ee8:	e0bfe504 	addi	r2,fp,-108
 2001eec:	11801204 	addi	r6,r2,72
 2001ef0:	e0bfe504 	addi	r2,fp,-108
 2001ef4:	11400e04 	addi	r5,r2,56
 2001ef8:	e0bf4b04 	addi	r2,fp,-724
 2001efc:	11001204 	addi	r4,r2,72
 2001f00:	e0bf4b04 	addi	r2,fp,-724
 2001f04:	10c00e04 	addi	r3,r2,56
 2001f08:	00800ac4 	movi	r2,43
 2001f0c:	d8800115 	stw	r2,4(sp)
 2001f10:	e0bf5f04 	addi	r2,fp,-644
 2001f14:	10805604 	addi	r2,r2,344
 2001f18:	d8800015 	stw	r2,0(sp)
 2001f1c:	300f883a 	mov	r7,r6
 2001f20:	280d883a 	mov	r6,r5
 2001f24:	200b883a 	mov	r5,r4
 2001f28:	1809883a 	mov	r4,r3
 2001f2c:	2002db40 	call	2002db4 <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 2001f30:	e0bfe504 	addi	r2,fp,-108
 2001f34:	11801204 	addi	r6,r2,72
 2001f38:	e0bfe504 	addi	r2,fp,-108
 2001f3c:	11400e04 	addi	r5,r2,56
 2001f40:	e0bf4b04 	addi	r2,fp,-724
 2001f44:	11001204 	addi	r4,r2,72
 2001f48:	e0bf4b04 	addi	r2,fp,-724
 2001f4c:	10c01004 	addi	r3,r2,64
 2001f50:	00800b04 	movi	r2,44
 2001f54:	d8800115 	stw	r2,4(sp)
 2001f58:	e0bf5f04 	addi	r2,fp,-644
 2001f5c:	10805804 	addi	r2,r2,352
 2001f60:	d8800015 	stw	r2,0(sp)
 2001f64:	300f883a 	mov	r7,r6
 2001f68:	280d883a 	mov	r6,r5
 2001f6c:	200b883a 	mov	r5,r4
 2001f70:	1809883a 	mov	r4,r3
 2001f74:	2002db40 	call	2002db4 <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 2001f78:	e0bfe504 	addi	r2,fp,-108
 2001f7c:	1009883a 	mov	r4,r2
 2001f80:	20033180 	call	2003318 <damping>
  	   damping(velocity[1]);
 2001f84:	e0bfe504 	addi	r2,fp,-108
 2001f88:	10800204 	addi	r2,r2,8
 2001f8c:	1009883a 	mov	r4,r2
 2001f90:	20033180 	call	2003318 <damping>
  	   damping(velocity[2]);
 2001f94:	e0bfe504 	addi	r2,fp,-108
 2001f98:	10800404 	addi	r2,r2,16
 2001f9c:	1009883a 	mov	r4,r2
 2001fa0:	20033180 	call	2003318 <damping>
  	   damping(velocity[3]);
 2001fa4:	e0bfe504 	addi	r2,fp,-108
 2001fa8:	10800604 	addi	r2,r2,24
 2001fac:	1009883a 	mov	r4,r2
 2001fb0:	20033180 	call	2003318 <damping>
  	   damping(velocity[4]);
 2001fb4:	e0bfe504 	addi	r2,fp,-108
 2001fb8:	10800804 	addi	r2,r2,32
 2001fbc:	1009883a 	mov	r4,r2
 2001fc0:	20033180 	call	2003318 <damping>
  	   damping(velocity[5]);
 2001fc4:	e0bfe504 	addi	r2,fp,-108
 2001fc8:	10800a04 	addi	r2,r2,40
 2001fcc:	1009883a 	mov	r4,r2
 2001fd0:	20033180 	call	2003318 <damping>
  	   damping(velocity[6]);
 2001fd4:	e0bfe504 	addi	r2,fp,-108
 2001fd8:	10800c04 	addi	r2,r2,48
 2001fdc:	1009883a 	mov	r4,r2
 2001fe0:	20033180 	call	2003318 <damping>
  	   damping(velocity[7]);
 2001fe4:	e0bfe504 	addi	r2,fp,-108
 2001fe8:	10800e04 	addi	r2,r2,56
 2001fec:	1009883a 	mov	r4,r2
 2001ff0:	20033180 	call	2003318 <damping>
  	   damping(velocity[8]);
 2001ff4:	e0bfe504 	addi	r2,fp,-108
 2001ff8:	10801004 	addi	r2,r2,64
 2001ffc:	1009883a 	mov	r4,r2
 2002000:	20033180 	call	2003318 <damping>
  	   damping(velocity[9]);
 2002004:	e0bfe504 	addi	r2,fp,-108
 2002008:	10801204 	addi	r2,r2,72
 200200c:	1009883a 	mov	r4,r2
 2002010:	20033180 	call	2003318 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 2002014:	e0bfe504 	addi	r2,fp,-108
 2002018:	1009883a 	mov	r4,r2
 200201c:	2002c900 	call	2002c90 <momentum>
 2002020:	1021883a 	mov	r16,r2
 2002024:	e0bfe504 	addi	r2,fp,-108
 2002028:	10800204 	addi	r2,r2,8
 200202c:	1009883a 	mov	r4,r2
 2002030:	2002c900 	call	2002c90 <momentum>
 2002034:	1007883a 	mov	r3,r2
 2002038:	80e1ff72 	custom	253,r16,r16,r3
 200203c:	e0bfe504 	addi	r2,fp,-108
 2002040:	10800404 	addi	r2,r2,16
 2002044:	1009883a 	mov	r4,r2
 2002048:	2002c900 	call	2002c90 <momentum>
 200204c:	1007883a 	mov	r3,r2
 2002050:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 2002054:	e0bfe504 	addi	r2,fp,-108
 2002058:	10800604 	addi	r2,r2,24
 200205c:	1009883a 	mov	r4,r2
 2002060:	2002c900 	call	2002c90 <momentum>
 2002064:	1007883a 	mov	r3,r2
 2002068:	80e1ff72 	custom	253,r16,r16,r3
 200206c:	e0bfe504 	addi	r2,fp,-108
 2002070:	10800804 	addi	r2,r2,32
 2002074:	1009883a 	mov	r4,r2
 2002078:	2002c900 	call	2002c90 <momentum>
 200207c:	1007883a 	mov	r3,r2
 2002080:	80e1ff72 	custom	253,r16,r16,r3
 2002084:	e0bfe504 	addi	r2,fp,-108
 2002088:	10800a04 	addi	r2,r2,40
 200208c:	1009883a 	mov	r4,r2
 2002090:	2002c900 	call	2002c90 <momentum>
 2002094:	1007883a 	mov	r3,r2
 2002098:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 200209c:	e0bfe504 	addi	r2,fp,-108
 20020a0:	10800c04 	addi	r2,r2,48
 20020a4:	1009883a 	mov	r4,r2
 20020a8:	2002c900 	call	2002c90 <momentum>
 20020ac:	1007883a 	mov	r3,r2
 20020b0:	80e1ff72 	custom	253,r16,r16,r3
 20020b4:	e0bfe504 	addi	r2,fp,-108
 20020b8:	10800e04 	addi	r2,r2,56
 20020bc:	1009883a 	mov	r4,r2
 20020c0:	2002c900 	call	2002c90 <momentum>
 20020c4:	1007883a 	mov	r3,r2
 20020c8:	80e1ff72 	custom	253,r16,r16,r3
 20020cc:	e0bfe504 	addi	r2,fp,-108
 20020d0:	10801004 	addi	r2,r2,64
 20020d4:	1009883a 	mov	r4,r2
 20020d8:	2002c900 	call	2002c90 <momentum>
 20020dc:	1007883a 	mov	r3,r2
 20020e0:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 20020e4:	e0bfe504 	addi	r2,fp,-108
 20020e8:	10801204 	addi	r2,r2,72
 20020ec:	1009883a 	mov	r4,r2
 20020f0:	2002c900 	call	2002c90 <momentum>
 20020f4:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20020f8:	80c5ff72 	custom	253,r2,r16,r3
 20020fc:	e0bf4215 	stw	r2,-760(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 2002100:	e0bf4317 	ldw	r2,-756(fp)
 2002104:	10800104 	addi	r2,r2,4
 2002108:	e0ff4c17 	ldw	r3,-720(fp)
 200210c:	1807fe72 	custom	249,r3,r3,zero
 2002110:	180892ba 	slli	r4,r3,10
 2002114:	e0ff4b17 	ldw	r3,-724(fp)
 2002118:	1807fe72 	custom	249,r3,r3,zero
 200211c:	20c7883a 	add	r3,r4,r3
 2002120:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 2002124:	e0bf4317 	ldw	r2,-756(fp)
 2002128:	10800204 	addi	r2,r2,8
 200212c:	e0ff4e17 	ldw	r3,-712(fp)
 2002130:	1807fe72 	custom	249,r3,r3,zero
 2002134:	180892ba 	slli	r4,r3,10
 2002138:	e0ff4d17 	ldw	r3,-716(fp)
 200213c:	1807fe72 	custom	249,r3,r3,zero
 2002140:	20c7883a 	add	r3,r4,r3
 2002144:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2002148:	e0bf4317 	ldw	r2,-756(fp)
 200214c:	10800304 	addi	r2,r2,12
 2002150:	e0ff5017 	ldw	r3,-704(fp)
 2002154:	1807fe72 	custom	249,r3,r3,zero
 2002158:	180892ba 	slli	r4,r3,10
 200215c:	e0ff4f17 	ldw	r3,-708(fp)
 2002160:	1807fe72 	custom	249,r3,r3,zero
 2002164:	20c7883a 	add	r3,r4,r3
 2002168:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 200216c:	e0bf4317 	ldw	r2,-756(fp)
 2002170:	10800404 	addi	r2,r2,16
 2002174:	e0ff5217 	ldw	r3,-696(fp)
 2002178:	1807fe72 	custom	249,r3,r3,zero
 200217c:	180892ba 	slli	r4,r3,10
 2002180:	e0ff5117 	ldw	r3,-700(fp)
 2002184:	1807fe72 	custom	249,r3,r3,zero
 2002188:	20c7883a 	add	r3,r4,r3
 200218c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002190:	e0bf4317 	ldw	r2,-756(fp)
 2002194:	10800504 	addi	r2,r2,20
 2002198:	e0ff5417 	ldw	r3,-688(fp)
 200219c:	1807fe72 	custom	249,r3,r3,zero
 20021a0:	180892ba 	slli	r4,r3,10
 20021a4:	e0ff5317 	ldw	r3,-692(fp)
 20021a8:	1807fe72 	custom	249,r3,r3,zero
 20021ac:	20c7883a 	add	r3,r4,r3
 20021b0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 20021b4:	e0bf4317 	ldw	r2,-756(fp)
 20021b8:	10800604 	addi	r2,r2,24
 20021bc:	e0ff5617 	ldw	r3,-680(fp)
 20021c0:	1807fe72 	custom	249,r3,r3,zero
 20021c4:	180892ba 	slli	r4,r3,10
 20021c8:	e0ff5517 	ldw	r3,-684(fp)
 20021cc:	1807fe72 	custom	249,r3,r3,zero
 20021d0:	20c7883a 	add	r3,r4,r3
 20021d4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20021d8:	e0bf4317 	ldw	r2,-756(fp)
 20021dc:	10800704 	addi	r2,r2,28
 20021e0:	e0ff5817 	ldw	r3,-672(fp)
 20021e4:	1807fe72 	custom	249,r3,r3,zero
 20021e8:	180892ba 	slli	r4,r3,10
 20021ec:	e0ff5717 	ldw	r3,-676(fp)
 20021f0:	1807fe72 	custom	249,r3,r3,zero
 20021f4:	20c7883a 	add	r3,r4,r3
 20021f8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20021fc:	e0bf4317 	ldw	r2,-756(fp)
 2002200:	10800804 	addi	r2,r2,32
 2002204:	e0ff5a17 	ldw	r3,-664(fp)
 2002208:	1807fe72 	custom	249,r3,r3,zero
 200220c:	180892ba 	slli	r4,r3,10
 2002210:	e0ff5917 	ldw	r3,-668(fp)
 2002214:	1807fe72 	custom	249,r3,r3,zero
 2002218:	20c7883a 	add	r3,r4,r3
 200221c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 2002220:	e0bf4317 	ldw	r2,-756(fp)
 2002224:	10800904 	addi	r2,r2,36
 2002228:	e0ff5c17 	ldw	r3,-656(fp)
 200222c:	1807fe72 	custom	249,r3,r3,zero
 2002230:	180892ba 	slli	r4,r3,10
 2002234:	e0ff5b17 	ldw	r3,-660(fp)
 2002238:	1807fe72 	custom	249,r3,r3,zero
 200223c:	20c7883a 	add	r3,r4,r3
 2002240:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 2002244:	e0bf4317 	ldw	r2,-756(fp)
 2002248:	10800a04 	addi	r2,r2,40
 200224c:	e0ff5e17 	ldw	r3,-648(fp)
 2002250:	1807fe72 	custom	249,r3,r3,zero
 2002254:	180892ba 	slli	r4,r3,10
 2002258:	e0ff5d17 	ldw	r3,-652(fp)
 200225c:	1807fe72 	custom	249,r3,r3,zero
 2002260:	20c7883a 	add	r3,r4,r3
 2002264:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 2002268:	01c00104 	movi	r7,4
 200226c:	000d883a 	mov	r6,zero
 2002270:	000b883a 	mov	r5,zero
 2002274:	0009883a 	mov	r4,zero
 2002278:	201bdec0 	call	201bdec <OSTimeDlyHMSM>

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};

   while(speed >= 0.1)
 200227c:	e13f4217 	ldw	r4,-760(fp)
 2002280:	200478c0 	call	200478c <__extendsfdf2>
 2002284:	1011883a 	mov	r8,r2
 2002288:	1813883a 	mov	r9,r3
 200228c:	01a666b4 	movhi	r6,39322
 2002290:	31a66684 	addi	r6,r6,-26214
 2002294:	01cfeeb4 	movhi	r7,16314
 2002298:	39e66644 	addi	r7,r7,-26215
 200229c:	4009883a 	mov	r4,r8
 20022a0:	480b883a 	mov	r5,r9
 20022a4:	2003ea40 	call	2003ea4 <__gedf2>
 20022a8:	1039810e 	bge	r2,zero,20008b0 <task2+0x410>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 20022ac:	01c07d04 	movi	r7,500
 20022b0:	000d883a 	mov	r6,zero
 20022b4:	000b883a 	mov	r5,zero
 20022b8:	0009883a 	mov	r4,zero
 20022bc:	201bdec0 	call	201bdec <OSTimeDlyHMSM>

   printf("Animation termine\n");
 20022c0:	010080b4 	movhi	r4,514
 20022c4:	213a3704 	addi	r4,r4,-5924
 20022c8:	200518c0 	call	200518c <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 20022cc:	01c01904 	movi	r7,100
 20022d0:	000d883a 	mov	r6,zero
 20022d4:	000b883a 	mov	r5,zero
 20022d8:	0009883a 	mov	r4,zero
 20022dc:	201bdec0 	call	201bdec <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 20022e0:	e03f4405 	stb	zero,-752(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20022e4:	d0a71b17 	ldw	r2,-25492(gp)
 20022e8:	e0ff4403 	ldbu	r3,-752(fp)
 20022ec:	e13f4a04 	addi	r4,fp,-728
 20022f0:	200f883a 	mov	r7,r4
 20022f4:	180d883a 	mov	r6,r3
 20022f8:	01400044 	movi	r5,1
 20022fc:	1009883a 	mov	r4,r2
 2002300:	2016fcc0 	call	2016fcc <OSFlagPost>

   OSMboxPost(MailBox6, &nbr_ball);
 2002304:	d0a71917 	ldw	r2,-25500(gp)
 2002308:	e0ffba04 	addi	r3,fp,-280
 200230c:	180b883a 	mov	r5,r3
 2002310:	1009883a 	mov	r4,r2
 2002314:	2017f480 	call	2017f48 <OSMboxPost>
   OSMboxPost(MailBox7, &score);
 2002318:	d0a72117 	ldw	r2,-25468(gp)
 200231c:	e0ffb904 	addi	r3,fp,-284
 2002320:	180b883a 	mov	r5,r3
 2002324:	1009883a 	mov	r4,r2
 2002328:	2017f480 	call	2017f48 <OSMboxPost>

  }
 200232c:	0038d206 	br	2000678 <task2+0x1d8>

02002330 <task3>:
}

void task3(void* pdata)
{
 2002330:	deffef04 	addi	sp,sp,-68
 2002334:	dfc01015 	stw	ra,64(sp)
 2002338:	df000f15 	stw	fp,60(sp)
 200233c:	df000f04 	addi	fp,sp,60
 2002340:	e13fff15 	stw	r4,-4(fp)
	//intermediate variable//

	int ready,first_player,game_finish,ready_send;
	int all_rdy;

	ready=0;
 2002344:	e03ff315 	stw	zero,-52(fp)
	first_player=0;
 2002348:	e03ff415 	stw	zero,-48(fp)
	all_rdy=0;
 200234c:	e03ff615 	stw	zero,-40(fp)
	game_finish=0;
 2002350:	e03ff715 	stw	zero,-36(fp)
	ready_send=0;
 2002354:	e03ff515 	stw	zero,-44(fp)

	while (1)
	{
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
 2002358:	d0a71d17 	ldw	r2,-25484(gp)
 200235c:	e0fffe84 	addi	r3,fp,-6
 2002360:	180f883a 	mov	r7,r3
 2002364:	01800044 	movi	r6,1
 2002368:	01400044 	movi	r5,1
 200236c:	1009883a 	mov	r4,r2
 2002370:	2016fcc0 	call	2016fcc <OSFlagPost>
			while (!ready){
 2002374:	00001f06 	br	20023f4 <task3+0xc4>
				int var = IORD(MEM_NIOS_PI_BASE,1);
 2002378:	00800834 	movhi	r2,32
 200237c:	10800104 	addi	r2,r2,4
 2002380:	10800037 	ldwio	r2,0(r2)
 2002384:	e0bffd15 	stw	r2,-12(fp)
				if(var != 0){
 2002388:	e0bffd17 	ldw	r2,-12(fp)
 200238c:	10000526 	beq	r2,zero,20023a4 <task3+0x74>
					ready = 1;
 2002390:	00800044 	movi	r2,1
 2002394:	e0bff315 	stw	r2,-52(fp)
					first_player = var;
 2002398:	e0bffd17 	ldw	r2,-12(fp)
 200239c:	e0bff415 	stw	r2,-48(fp)
 20023a0:	00001406 	br	20023f4 <task3+0xc4>
				}
				else{
					OS_FLAGS flag = OSFlagAccept(StartGameGrp,START_THE_GAME,OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, &err);
 20023a4:	d0a72417 	ldw	r2,-25456(gp)
 20023a8:	e0fffe84 	addi	r3,fp,-6
 20023ac:	180f883a 	mov	r7,r3
 20023b0:	01802084 	movi	r6,130
 20023b4:	01400044 	movi	r5,1
 20023b8:	1009883a 	mov	r4,r2
 20023bc:	20160e80 	call	20160e8 <OSFlagAccept>
 20023c0:	e0bffe0d 	sth	r2,-8(fp)

					if (flag==START_THE_GAME && !ready_send){
 20023c4:	e0bffe0b 	ldhu	r2,-8(fp)
 20023c8:	10800058 	cmpnei	r2,r2,1
 20023cc:	1000091e 	bne	r2,zero,20023f4 <task3+0xc4>
 20023d0:	e0bff517 	ldw	r2,-44(fp)
 20023d4:	1000071e 	bne	r2,zero,20023f4 <task3+0xc4>
						ready=1;
 20023d8:	00800044 	movi	r2,1
 20023dc:	e0bff315 	stw	r2,-52(fp)
						ready_send = 1;
 20023e0:	00800044 	movi	r2,1
 20023e4:	e0bff515 	stw	r2,-44(fp)
						IOWR(MEM_NIOS_PI_BASE,0,ID1);
 20023e8:	00c00044 	movi	r3,1
 20023ec:	00800834 	movhi	r2,32
 20023f0:	10c00035 	stwio	r3,0(r2)
	ready_send=0;

	while (1)
	{
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
			while (!ready){
 20023f4:	e0bff317 	ldw	r2,-52(fp)
 20023f8:	103fdf26 	beq	r2,zero,2002378 <task3+0x48>
						IOWR(MEM_NIOS_PI_BASE,0,ID1);
					}
				}
			}

			while(!all_rdy){
 20023fc:	00000606 	br	2002418 <task3+0xe8>
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
 2002400:	00800834 	movhi	r2,32
 2002404:	10800204 	addi	r2,r2,8
 2002408:	10800037 	ldwio	r2,0(r2)
 200240c:	10000226 	beq	r2,zero,2002418 <task3+0xe8>
 2002410:	00800044 	movi	r2,1
 2002414:	e0bff615 	stw	r2,-40(fp)
						IOWR(MEM_NIOS_PI_BASE,0,ID1);
					}
				}
			}

			while(!all_rdy){
 2002418:	e0bff617 	ldw	r2,-40(fp)
 200241c:	103ff826 	beq	r2,zero,2002400 <task3+0xd0>
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}
			activePlayer = first_player;
 2002420:	e0bff417 	ldw	r2,-48(fp)
 2002424:	e0bff215 	stw	r2,-56(fp)
			while(!game_finish){
 2002428:	0000c906 	br	2002750 <task3+0x420>
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8)){
 200242c:	e0bff217 	ldw	r2,-56(fp)
 2002430:	10800058 	cmpnei	r2,r2,1
 2002434:	1000791e 	bne	r2,zero,200261c <task3+0x2ec>
 2002438:	00800834 	movhi	r2,32
 200243c:	10800804 	addi	r2,r2,32
 2002440:	10800037 	ldwio	r2,0(r2)
 2002444:	1000751e 	bne	r2,zero,200261c <task3+0x2ec>
						OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2002448:	d0a72317 	ldw	r2,-25460(gp)
 200244c:	e0fffe84 	addi	r3,fp,-6
 2002450:	180f883a 	mov	r7,r3
 2002454:	01800044 	movi	r6,1
 2002458:	01400044 	movi	r5,1
 200245c:	1009883a 	mov	r4,r2
 2002460:	2016fcc0 	call	2016fcc <OSFlagPost>
						printf("Wait for value from task 1\n");
 2002464:	010080b4 	movhi	r4,514
 2002468:	213a5004 	addi	r4,r4,-5824
 200246c:	200518c0 	call	200518c <puts>
						int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 2002470:	d0a72217 	ldw	r2,-25464(gp)
 2002474:	e0fffe84 	addi	r3,fp,-6
 2002478:	180d883a 	mov	r6,r3
 200247c:	000b883a 	mov	r5,zero
 2002480:	1009883a 	mov	r4,r2
 2002484:	2017ba80 	call	2017ba8 <OSMboxPend>
 2002488:	e0bff815 	stw	r2,-32(fp)
						int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 200248c:	d0a71e17 	ldw	r2,-25480(gp)
 2002490:	e0fffe84 	addi	r3,fp,-6
 2002494:	180d883a 	mov	r6,r3
 2002498:	000b883a 	mov	r5,zero
 200249c:	1009883a 	mov	r4,r2
 20024a0:	2017ba80 	call	2017ba8 <OSMboxPend>
 20024a4:	e0bff915 	stw	r2,-28(fp)
						printf("Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 20024a8:	e0bff817 	ldw	r2,-32(fp)
 20024ac:	10c00017 	ldw	r3,0(r2)
 20024b0:	e0bff917 	ldw	r2,-28(fp)
 20024b4:	10800017 	ldw	r2,0(r2)
 20024b8:	100d883a 	mov	r6,r2
 20024bc:	180b883a 	mov	r5,r3
 20024c0:	010080b4 	movhi	r4,514
 20024c4:	213a5704 	addi	r4,r4,-5796
 20024c8:	200500c0 	call	200500c <printf>

						OSMboxPost(MailBox4, vector_x);
 20024cc:	d0a72017 	ldw	r2,-25472(gp)
 20024d0:	e17ff817 	ldw	r5,-32(fp)
 20024d4:	1009883a 	mov	r4,r2
 20024d8:	2017f480 	call	2017f48 <OSMboxPost>
						OSMboxPost(MailBox5, vector_y);
 20024dc:	d0a71c17 	ldw	r2,-25488(gp)
 20024e0:	e17ff917 	ldw	r5,-28(fp)
 20024e4:	1009883a 	mov	r4,r2
 20024e8:	2017f480 	call	2017f48 <OSMboxPost>

						OSMboxPost(MailBox8, IORD(MEM_NIOS_PI_BASE,9));                 //transmit nbr ball to task 2
 20024ec:	d0e71f17 	ldw	r3,-25476(gp)
 20024f0:	00800834 	movhi	r2,32
 20024f4:	10800904 	addi	r2,r2,36
 20024f8:	10800037 	ldwio	r2,0(r2)
 20024fc:	100b883a 	mov	r5,r2
 2002500:	1809883a 	mov	r4,r3
 2002504:	2017f480 	call	2017f48 <OSMboxPost>
						OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));                //transmit score to task2
 2002508:	d0e71817 	ldw	r3,-25504(gp)
 200250c:	00800834 	movhi	r2,32
 2002510:	10800a04 	addi	r2,r2,40
 2002514:	10800037 	ldwio	r2,0(r2)
 2002518:	100b883a 	mov	r5,r2
 200251c:	1809883a 	mov	r4,r3
 2002520:	2017f480 	call	2017f48 <OSMboxPost>

						IOWR(MEM_NIOS_PI_BASE,4,*nbr_ball);
 2002524:	e0bffa17 	ldw	r2,-24(fp)
 2002528:	10c00017 	ldw	r3,0(r2)
 200252c:	00800834 	movhi	r2,32
 2002530:	10800404 	addi	r2,r2,16
 2002534:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,5,*score);
 2002538:	e0bffb17 	ldw	r2,-20(fp)
 200253c:	10c00017 	ldw	r3,0(r2)
 2002540:	00800834 	movhi	r2,32
 2002544:	10800504 	addi	r2,r2,20
 2002548:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,6,*vector_x);
 200254c:	e0bff817 	ldw	r2,-32(fp)
 2002550:	10c00017 	ldw	r3,0(r2)
 2002554:	00800834 	movhi	r2,32
 2002558:	10800604 	addi	r2,r2,24
 200255c:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,7,*vector_y);
 2002560:	e0bff917 	ldw	r2,-28(fp)
 2002564:	10c00017 	ldw	r3,0(r2)
 2002568:	00800834 	movhi	r2,32
 200256c:	10800704 	addi	r2,r2,28
 2002570:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,3,1);             						//*isSend = 1; // value are available
 2002574:	00c00044 	movi	r3,1
 2002578:	00800834 	movhi	r2,32
 200257c:	10800304 	addi	r2,r2,12
 2002580:	10c00035 	stwio	r3,0(r2)

						opt_task1=OS_FLAG_CLR;
 2002584:	e03ffc05 	stb	zero,-16(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002588:	d0a72317 	ldw	r2,-25460(gp)
 200258c:	e0fffc03 	ldbu	r3,-16(fp)
 2002590:	e13ffe84 	addi	r4,fp,-6
 2002594:	200f883a 	mov	r7,r4
 2002598:	180d883a 	mov	r6,r3
 200259c:	01400044 	movi	r5,1
 20025a0:	1009883a 	mov	r4,r2
 20025a4:	2016fcc0 	call	2016fcc <OSFlagPost>
						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20025a8:	d0e71b17 	ldw	r3,-25492(gp)
 20025ac:	e0bffe84 	addi	r2,fp,-6
 20025b0:	d8800015 	stw	r2,0(sp)
 20025b4:	000f883a 	mov	r7,zero
 20025b8:	000d883a 	mov	r6,zero
 20025bc:	01400044 	movi	r5,1
 20025c0:	1809883a 	mov	r4,r3
 20025c4:	20169b40 	call	20169b4 <OSFlagPend>

						*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 20025c8:	d0a71917 	ldw	r2,-25500(gp)
 20025cc:	e0fffe84 	addi	r3,fp,-6
 20025d0:	180d883a 	mov	r6,r3
 20025d4:	000b883a 	mov	r5,zero
 20025d8:	1009883a 	mov	r4,r2
 20025dc:	2017ba80 	call	2017ba8 <OSMboxPend>
 20025e0:	1007883a 	mov	r3,r2
 20025e4:	e0bffa17 	ldw	r2,-24(fp)
 20025e8:	10c00015 	stw	r3,0(r2)
						*score = (int *) OSMboxPend(MailBox7,0,&err);
 20025ec:	d0a72117 	ldw	r2,-25468(gp)
 20025f0:	e0fffe84 	addi	r3,fp,-6
 20025f4:	180d883a 	mov	r6,r3
 20025f8:	000b883a 	mov	r5,zero
 20025fc:	1009883a 	mov	r4,r2
 2002600:	2017ba80 	call	2017ba8 <OSMboxPend>
 2002604:	1007883a 	mov	r3,r2
 2002608:	e0bffb17 	ldw	r2,-20(fp)
 200260c:	10c00015 	stw	r3,0(r2)

						activePlayer = ID2;
 2002610:	00800084 	movi	r2,2
 2002614:	e0bff215 	stw	r2,-56(fp)
			while(!all_rdy){
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}
			activePlayer = first_player;
			while(!game_finish){
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8)){
 2002618:	00004d06 	br	2002750 <task3+0x420>
						*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;

				}
				else if(activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE,8)){
 200261c:	e0bff217 	ldw	r2,-56(fp)
 2002620:	10800098 	cmpnei	r2,r2,2
 2002624:	10004a1e 	bne	r2,zero,2002750 <task3+0x420>
 2002628:	00800834 	movhi	r2,32
 200262c:	10800804 	addi	r2,r2,32
 2002630:	10800037 	ldwio	r2,0(r2)
 2002634:	10004626 	beq	r2,zero,2002750 <task3+0x420>

						OSMboxPost(MailBox4, IORD(MEM_NIOS_PI_BASE,11));
 2002638:	d0e72017 	ldw	r3,-25472(gp)
 200263c:	00800834 	movhi	r2,32
 2002640:	10800b04 	addi	r2,r2,44
 2002644:	10800037 	ldwio	r2,0(r2)
 2002648:	100b883a 	mov	r5,r2
 200264c:	1809883a 	mov	r4,r3
 2002650:	2017f480 	call	2017f48 <OSMboxPost>
						OSMboxPost(MailBox5, IORD(MEM_NIOS_PI_BASE,12));
 2002654:	d0e71c17 	ldw	r3,-25488(gp)
 2002658:	00800834 	movhi	r2,32
 200265c:	10800c04 	addi	r2,r2,48
 2002660:	10800037 	ldwio	r2,0(r2)
 2002664:	100b883a 	mov	r5,r2
 2002668:	1809883a 	mov	r4,r3
 200266c:	2017f480 	call	2017f48 <OSMboxPost>
						OSMboxPost(MailBox8, IORD(MEM_NIOS_PI_BASE,9));
 2002670:	d0e71f17 	ldw	r3,-25476(gp)
 2002674:	00800834 	movhi	r2,32
 2002678:	10800904 	addi	r2,r2,36
 200267c:	10800037 	ldwio	r2,0(r2)
 2002680:	100b883a 	mov	r5,r2
 2002684:	1809883a 	mov	r4,r3
 2002688:	2017f480 	call	2017f48 <OSMboxPost>
						OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));
 200268c:	d0e71817 	ldw	r3,-25504(gp)
 2002690:	00800834 	movhi	r2,32
 2002694:	10800a04 	addi	r2,r2,40
 2002698:	10800037 	ldwio	r2,0(r2)
 200269c:	100b883a 	mov	r5,r2
 20026a0:	1809883a 	mov	r4,r3
 20026a4:	2017f480 	call	2017f48 <OSMboxPost>

						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20026a8:	d0e71b17 	ldw	r3,-25492(gp)
 20026ac:	e0bffe84 	addi	r2,fp,-6
 20026b0:	d8800015 	stw	r2,0(sp)
 20026b4:	000f883a 	mov	r7,zero
 20026b8:	000d883a 	mov	r6,zero
 20026bc:	01400044 	movi	r5,1
 20026c0:	1809883a 	mov	r4,r3
 20026c4:	20169b40 	call	20169b4 <OSFlagPend>
						opt_task1=OS_FLAG_SET;
 20026c8:	00800044 	movi	r2,1
 20026cc:	e0bffc05 	stb	r2,-16(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20026d0:	d0a72317 	ldw	r2,-25460(gp)
 20026d4:	e0fffc03 	ldbu	r3,-16(fp)
 20026d8:	e13ffe84 	addi	r4,fp,-6
 20026dc:	200f883a 	mov	r7,r4
 20026e0:	180d883a 	mov	r6,r3
 20026e4:	01400044 	movi	r5,1
 20026e8:	1009883a 	mov	r4,r2
 20026ec:	2016fcc0 	call	2016fcc <OSFlagPost>

						IOWR(MEM_NIOS_PI_BASE,8,0);
 20026f0:	0007883a 	mov	r3,zero
 20026f4:	00800834 	movhi	r2,32
 20026f8:	10800804 	addi	r2,r2,32
 20026fc:	10c00035 	stwio	r3,0(r2)
						activePlayer = ID1;
 2002700:	00800044 	movi	r2,1
 2002704:	e0bff215 	stw	r2,-56(fp)
						*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 2002708:	d0a71917 	ldw	r2,-25500(gp)
 200270c:	e0fffe84 	addi	r3,fp,-6
 2002710:	180d883a 	mov	r6,r3
 2002714:	000b883a 	mov	r5,zero
 2002718:	1009883a 	mov	r4,r2
 200271c:	2017ba80 	call	2017ba8 <OSMboxPend>
 2002720:	1007883a 	mov	r3,r2
 2002724:	e0bffa17 	ldw	r2,-24(fp)
 2002728:	10c00015 	stw	r3,0(r2)
						*score = (int *) OSMboxPend(MailBox7,0,&err);
 200272c:	d0a72117 	ldw	r2,-25468(gp)
 2002730:	e0fffe84 	addi	r3,fp,-6
 2002734:	180d883a 	mov	r6,r3
 2002738:	000b883a 	mov	r5,zero
 200273c:	1009883a 	mov	r4,r2
 2002740:	2017ba80 	call	2017ba8 <OSMboxPend>
 2002744:	1007883a 	mov	r3,r2
 2002748:	e0bffb17 	ldw	r2,-20(fp)
 200274c:	10c00015 	stw	r3,0(r2)

			while(!all_rdy){
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}
			activePlayer = first_player;
			while(!game_finish){
 2002750:	e0bff717 	ldw	r2,-36(fp)
 2002754:	103f3526 	beq	r2,zero,200242c <task3+0xfc>
						*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						*score = (int *) OSMboxPend(MailBox7,0,&err);
				}
			}

	}
 2002758:	003eff06 	br	2002358 <task3+0x28>

0200275c <task4>:

}

void task4(void* pdata)
{
 200275c:	defff804 	addi	sp,sp,-32
 2002760:	dfc00715 	stw	ra,28(sp)
 2002764:	df000615 	stw	fp,24(sp)
 2002768:	df000604 	addi	fp,sp,24
 200276c:	e13fff15 	stw	r4,-4(fp)

	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2002770:	008000b4 	movhi	r2,2
 2002774:	e0bffc15 	stw	r2,-16(fp)

	int count = 0;
 2002778:	e03ffd15 	stw	zero,-12(fp)
	int count_old = 0;
 200277c:	e03ffb15 	stw	zero,-20(fp)

	INT8U err;
	INT8U opt_task4;

	count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 2002780:	e0bffc17 	ldw	r2,-16(fp)
 2002784:	10800a04 	addi	r2,r2,40
 2002788:	10800037 	ldwio	r2,0(r2)
 200278c:	e0bffd15 	stw	r2,-12(fp)

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 2002790:	d0e71d17 	ldw	r3,-25484(gp)
 2002794:	e0bffe44 	addi	r2,fp,-7
 2002798:	d8800015 	stw	r2,0(sp)
 200279c:	000f883a 	mov	r7,zero
 20027a0:	01802084 	movi	r6,130
 20027a4:	01400044 	movi	r5,1
 20027a8:	1809883a 	mov	r4,r3
 20027ac:	20169b40 	call	20169b4 <OSFlagPend>
		if (count==1 && count_old == 0){
 20027b0:	e0bffd17 	ldw	r2,-12(fp)
 20027b4:	10800058 	cmpnei	r2,r2,1
 20027b8:	103ff51e 	bne	r2,zero,2002790 <task4+0x34>
 20027bc:	e0bffb17 	ldw	r2,-20(fp)
 20027c0:	103ff31e 	bne	r2,zero,2002790 <task4+0x34>
			count_old = count;
 20027c4:	e0bffd17 	ldw	r2,-12(fp)
 20027c8:	e0bffb15 	stw	r2,-20(fp)
			opt_task4= OS_FLAG_SET;
 20027cc:	00800044 	movi	r2,1
 20027d0:	e0bffe05 	stb	r2,-8(fp)
			OSFlagPost(StartGameGrp,START_THE_GAME,opt_task4,&err);
 20027d4:	d0a72417 	ldw	r2,-25456(gp)
 20027d8:	e0fffe03 	ldbu	r3,-8(fp)
 20027dc:	e13ffe44 	addi	r4,fp,-7
 20027e0:	200f883a 	mov	r7,r4
 20027e4:	180d883a 	mov	r6,r3
 20027e8:	01400044 	movi	r5,1
 20027ec:	1009883a 	mov	r4,r2
 20027f0:	2016fcc0 	call	2016fcc <OSFlagPost>
		}
	}
 20027f4:	003fe606 	br	2002790 <task4+0x34>

020027f8 <main>:
}


/* The main function creates two task and starts multi-tasking */
int main(void)
{
 20027f8:	defff804 	addi	sp,sp,-32
 20027fc:	dfc00715 	stw	ra,28(sp)
 2002800:	df000615 	stw	fp,24(sp)
 2002804:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 2002808:	0009883a 	mov	r4,zero
 200280c:	20178940 	call	2017894 <OSMboxCreate>
 2002810:	d0a72215 	stw	r2,-25464(gp)
  MailBox2 = OSMboxCreate(NULL);
 2002814:	0009883a 	mov	r4,zero
 2002818:	20178940 	call	2017894 <OSMboxCreate>
 200281c:	d0a71e15 	stw	r2,-25480(gp)
  MailBox3 = OSMboxCreate(NULL);
 2002820:	0009883a 	mov	r4,zero
 2002824:	20178940 	call	2017894 <OSMboxCreate>
 2002828:	d0a71a15 	stw	r2,-25496(gp)

  MailBox4 = OSMboxCreate(NULL);
 200282c:	0009883a 	mov	r4,zero
 2002830:	20178940 	call	2017894 <OSMboxCreate>
 2002834:	d0a72015 	stw	r2,-25472(gp)
  MailBox5 = OSMboxCreate(NULL);
 2002838:	0009883a 	mov	r4,zero
 200283c:	20178940 	call	2017894 <OSMboxCreate>
 2002840:	d0a71c15 	stw	r2,-25488(gp)
  MailBox6 = OSMboxCreate(NULL);
 2002844:	0009883a 	mov	r4,zero
 2002848:	20178940 	call	2017894 <OSMboxCreate>
 200284c:	d0a71915 	stw	r2,-25500(gp)


  MailBox7 = OSMboxCreate(NULL);
 2002850:	0009883a 	mov	r4,zero
 2002854:	20178940 	call	2017894 <OSMboxCreate>
 2002858:	d0a72115 	stw	r2,-25468(gp)
  MailBox8 = OSMboxCreate(NULL);
 200285c:	0009883a 	mov	r4,zero
 2002860:	20178940 	call	2017894 <OSMboxCreate>
 2002864:	d0a71f15 	stw	r2,-25476(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 2002868:	e17fff04 	addi	r5,fp,-4
 200286c:	0009883a 	mov	r4,zero
 2002870:	20163f00 	call	20163f0 <OSFlagCreate>
 2002874:	d0a72315 	stw	r2,-25460(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 2002878:	e17fff04 	addi	r5,fp,-4
 200287c:	0009883a 	mov	r4,zero
 2002880:	20163f00 	call	20163f0 <OSFlagCreate>
 2002884:	d0a71b15 	stw	r2,-25492(gp)
  ActivateTask4Grp = OSFlagCreate(0,&err);
 2002888:	e17fff04 	addi	r5,fp,-4
 200288c:	0009883a 	mov	r4,zero
 2002890:	20163f00 	call	20163f0 <OSFlagCreate>
 2002894:	d0a71d15 	stw	r2,-25484(gp)
  StartGameGrp = OSFlagCreate(0,&err);
 2002898:	e17fff04 	addi	r5,fp,-4
 200289c:	0009883a 	mov	r4,zero
 20028a0:	20163f00 	call	20163f0 <OSFlagCreate>
 20028a4:	d0a72415 	stw	r2,-25456(gp)


  OSTaskCreateExt(task1,
 20028a8:	d8000415 	stw	zero,16(sp)
 20028ac:	d8000315 	stw	zero,12(sp)
 20028b0:	00820004 	movi	r2,2048
 20028b4:	d8800215 	stw	r2,8(sp)
 20028b8:	008080b4 	movhi	r2,514
 20028bc:	1089b604 	addi	r2,r2,9944
 20028c0:	d8800115 	stw	r2,4(sp)
 20028c4:	00800044 	movi	r2,1
 20028c8:	d8800015 	stw	r2,0(sp)
 20028cc:	01c00044 	movi	r7,1
 20028d0:	018080b4 	movhi	r6,514
 20028d4:	3191b504 	addi	r6,r6,18132
 20028d8:	000b883a 	mov	r5,zero
 20028dc:	01008034 	movhi	r4,512
 20028e0:	2100a404 	addi	r4,r4,656
 20028e4:	201ac180 	call	201ac18 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 20028e8:	d8000415 	stw	zero,16(sp)
 20028ec:	d8000315 	stw	zero,12(sp)
 20028f0:	00820004 	movi	r2,2048
 20028f4:	d8800215 	stw	r2,8(sp)
 20028f8:	008080b4 	movhi	r2,514
 20028fc:	1099b604 	addi	r2,r2,26328
 2002900:	d8800115 	stw	r2,4(sp)
 2002904:	00800084 	movi	r2,2
 2002908:	d8800015 	stw	r2,0(sp)
 200290c:	01c00084 	movi	r7,2
 2002910:	018080f4 	movhi	r6,515
 2002914:	31a1b504 	addi	r6,r6,-31020
 2002918:	000b883a 	mov	r5,zero
 200291c:	01008034 	movhi	r4,512
 2002920:	21012804 	addi	r4,r4,1184
 2002924:	201ac180 	call	201ac18 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2002928:	d8000415 	stw	zero,16(sp)
 200292c:	d8000315 	stw	zero,12(sp)
 2002930:	00820004 	movi	r2,2048
 2002934:	d8800215 	stw	r2,8(sp)
 2002938:	008080f4 	movhi	r2,515
 200293c:	10a1b604 	addi	r2,r2,-31016
 2002940:	d8800115 	stw	r2,4(sp)
 2002944:	008000c4 	movi	r2,3
 2002948:	d8800015 	stw	r2,0(sp)
 200294c:	01c000c4 	movi	r7,3
 2002950:	018080f4 	movhi	r6,515
 2002954:	31a9b504 	addi	r6,r6,-22828
 2002958:	000b883a 	mov	r5,zero
 200295c:	01008034 	movhi	r4,512
 2002960:	2108cc04 	addi	r4,r4,9008
 2002964:	201ac180 	call	201ac18 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSTaskCreateExt(task4,
 2002968:	d8000415 	stw	zero,16(sp)
 200296c:	d8000315 	stw	zero,12(sp)
 2002970:	00820004 	movi	r2,2048
 2002974:	d8800215 	stw	r2,8(sp)
 2002978:	008080b4 	movhi	r2,514
 200297c:	1091b604 	addi	r2,r2,18136
 2002980:	d8800115 	stw	r2,4(sp)
 2002984:	00800104 	movi	r2,4
 2002988:	d8800015 	stw	r2,0(sp)
 200298c:	01c00104 	movi	r7,4
 2002990:	018080b4 	movhi	r6,514
 2002994:	3199b504 	addi	r6,r6,26324
 2002998:	000b883a 	mov	r5,zero
 200299c:	01008034 	movhi	r4,512
 20029a0:	2109d704 	addi	r4,r4,10076
 20029a4:	201ac180 	call	201ac18 <OSTaskCreateExt>
                     TASK_STACKSIZE,
                     NULL,
                     0);


  OSStart();
 20029a8:	2014ab80 	call	2014ab8 <OSStart>
  return 0;
 20029ac:	0005883a 	mov	r2,zero
}
 20029b0:	e037883a 	mov	sp,fp
 20029b4:	dfc00117 	ldw	ra,4(sp)
 20029b8:	df000017 	ldw	fp,0(sp)
 20029bc:	dec00204 	addi	sp,sp,8
 20029c0:	f800283a 	ret

020029c4 <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 20029c4:	defff604 	addi	sp,sp,-40
 20029c8:	dfc00915 	stw	ra,36(sp)
 20029cc:	df000815 	stw	fp,32(sp)
 20029d0:	df000804 	addi	fp,sp,32
 20029d4:	e13ffe15 	stw	r4,-8(fp)
 20029d8:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 20029dc:	e0bffe17 	ldw	r2,-8(fp)
 20029e0:	10c00017 	ldw	r3,0(r2)
 20029e4:	e13fff17 	ldw	r4,-4(fp)
 20029e8:	20800017 	ldw	r2,0(r4)
 20029ec:	1885ff72 	custom	253,r2,r3,r2
 20029f0:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20029f4:	e0bffe17 	ldw	r2,-8(fp)
 20029f8:	10800104 	addi	r2,r2,4
 20029fc:	10c00017 	ldw	r3,0(r2)
 2002a00:	e0bfff17 	ldw	r2,-4(fp)
 2002a04:	11000104 	addi	r4,r2,4
 2002a08:	20800017 	ldw	r2,0(r4)
 2002a0c:	1885ff72 	custom	253,r2,r3,r2
 2002a10:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 2002a14:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002a18:	e03ff915 	stw	zero,-28(fp)
 2002a1c:	00003d06 	br	2002b14 <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 2002a20:	008080b4 	movhi	r2,514
 2002a24:	10bba204 	addi	r2,r2,-4472
 2002a28:	e0fff917 	ldw	r3,-28(fp)
 2002a2c:	180690fa 	slli	r3,r3,3
 2002a30:	10c5883a 	add	r2,r2,r3
 2002a34:	10800017 	ldw	r2,0(r2)
 2002a38:	1007feb2 	custom	250,r3,r2,zero
 2002a3c:	e0bffa17 	ldw	r2,-24(fp)
 2002a40:	1885ffb2 	custom	254,r2,r3,r2
 2002a44:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2002a48:	008080b4 	movhi	r2,514
 2002a4c:	10bba204 	addi	r2,r2,-4472
 2002a50:	e0fff917 	ldw	r3,-28(fp)
 2002a54:	180690fa 	slli	r3,r3,3
 2002a58:	10c5883a 	add	r2,r2,r3
 2002a5c:	10800104 	addi	r2,r2,4
 2002a60:	10800017 	ldw	r2,0(r2)
 2002a64:	1007feb2 	custom	250,r3,r2,zero
 2002a68:	e0bffb17 	ldw	r2,-20(fp)
 2002a6c:	1885ffb2 	custom	254,r2,r3,r2
 2002a70:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2002a74:	e0bff817 	ldw	r2,-32(fp)
 2002a78:	1000131e 	bne	r2,zero,2002ac8 <whole_collide+0x104>
 2002a7c:	e0fffc17 	ldw	r3,-16(fp)
 2002a80:	e0bffc17 	ldw	r2,-16(fp)
 2002a84:	1887ff32 	custom	252,r3,r3,r2
 2002a88:	e13ffd17 	ldw	r4,-12(fp)
 2002a8c:	e0bffd17 	ldw	r2,-12(fp)
 2002a90:	2085ff32 	custom	252,r2,r4,r2
 2002a94:	1885ff72 	custom	253,r2,r3,r2
 2002a98:	1009883a 	mov	r4,r2
 2002a9c:	200478c0 	call	200478c <__extendsfdf2>
 2002aa0:	1011883a 	mov	r8,r2
 2002aa4:	1813883a 	mov	r9,r3
 2002aa8:	01b33374 	movhi	r6,52429
 2002aac:	31b33344 	addi	r6,r6,-13107
 2002ab0:	01d021b4 	movhi	r7,16518
 2002ab4:	39d5b304 	addi	r7,r7,22220
 2002ab8:	4009883a 	mov	r4,r8
 2002abc:	480b883a 	mov	r5,r9
 2002ac0:	2003f800 	call	2003f80 <__ledf2>
 2002ac4:	00800216 	blt	zero,r2,2002ad0 <whole_collide+0x10c>
 2002ac8:	00800044 	movi	r2,1
 2002acc:	00000106 	br	2002ad4 <whole_collide+0x110>
 2002ad0:	0005883a 	mov	r2,zero
 2002ad4:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 2002ad8:	e0bff817 	ldw	r2,-32(fp)
 2002adc:	10000a26 	beq	r2,zero,2002b08 <whole_collide+0x144>
			ball[0]=0;
 2002ae0:	e0bffe17 	ldw	r2,-8(fp)
 2002ae4:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 2002ae8:	e0bffe17 	ldw	r2,-8(fp)
 2002aec:	10800104 	addi	r2,r2,4
 2002af0:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 2002af4:	e0bfff17 	ldw	r2,-4(fp)
 2002af8:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 2002afc:	e0bfff17 	ldw	r2,-4(fp)
 2002b00:	10800104 	addi	r2,r2,4
 2002b04:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002b08:	e0bff917 	ldw	r2,-28(fp)
 2002b0c:	10800044 	addi	r2,r2,1
 2002b10:	e0bff915 	stw	r2,-28(fp)
 2002b14:	e0bff917 	ldw	r2,-28(fp)
 2002b18:	10800190 	cmplti	r2,r2,6
 2002b1c:	103fc01e 	bne	r2,zero,2002a20 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 2002b20:	e0bff817 	ldw	r2,-32(fp)
}
 2002b24:	e037883a 	mov	sp,fp
 2002b28:	dfc00117 	ldw	ra,4(sp)
 2002b2c:	df000017 	ldw	fp,0(sp)
 2002b30:	dec00204 	addi	sp,sp,8
 2002b34:	f800283a 	ret

02002b38 <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2002b38:	defffa04 	addi	sp,sp,-24
 2002b3c:	df000515 	stw	fp,20(sp)
 2002b40:	df000504 	addi	fp,sp,20
 2002b44:	e13ffd15 	stw	r4,-12(fp)
 2002b48:	e17ffe15 	stw	r5,-8(fp)
 2002b4c:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2002b50:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2002b54:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2002b58:	e0bffd17 	ldw	r2,-12(fp)
 2002b5c:	10c00017 	ldw	r3,0(r2)
 2002b60:	0090b1b4 	movhi	r2,17094
 2002b64:	1885f9f2 	custom	231,r2,r3,r2
 2002b68:	1000061e 	bne	r2,zero,2002b84 <borderCollide+0x4c>
 2002b6c:	e0bffd17 	ldw	r2,-12(fp)
 2002b70:	10c00017 	ldw	r3,0(r2)
 2002b74:	009111b4 	movhi	r2,17478
 2002b78:	10900004 	addi	r2,r2,16384
 2002b7c:	1885f972 	custom	229,r2,r3,r2
 2002b80:	10000226 	beq	r2,zero,2002b8c <borderCollide+0x54>
 2002b84:	00800044 	movi	r2,1
 2002b88:	00000106 	br	2002b90 <borderCollide+0x58>
 2002b8c:	0005883a 	mov	r2,zero
 2002b90:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2002b94:	e0bffd17 	ldw	r2,-12(fp)
 2002b98:	10800104 	addi	r2,r2,4
 2002b9c:	10c00017 	ldw	r3,0(r2)
 2002ba0:	0090a634 	movhi	r2,17048
 2002ba4:	1885f9f2 	custom	231,r2,r3,r2
 2002ba8:	1000061e 	bne	r2,zero,2002bc4 <borderCollide+0x8c>
 2002bac:	e0bffd17 	ldw	r2,-12(fp)
 2002bb0:	10800104 	addi	r2,r2,4
 2002bb4:	10c00017 	ldw	r3,0(r2)
 2002bb8:	0090f874 	movhi	r2,17377
 2002bbc:	1885f972 	custom	229,r2,r3,r2
 2002bc0:	10000226 	beq	r2,zero,2002bcc <borderCollide+0x94>
 2002bc4:	00800044 	movi	r2,1
 2002bc8:	00000106 	br	2002bd0 <borderCollide+0x98>
 2002bcc:	0005883a 	mov	r2,zero
 2002bd0:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 2002bd4:	e0bffe17 	ldw	r2,-8(fp)
 2002bd8:	10800017 	ldw	r2,0(r2)
 2002bdc:	1000081e 	bne	r2,zero,2002c00 <borderCollide+0xc8>
 2002be0:	e0bffb17 	ldw	r2,-20(fp)
 2002be4:	10000626 	beq	r2,zero,2002c00 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 2002be8:	e0ffff17 	ldw	r3,-4(fp)
 2002bec:	18800017 	ldw	r2,0(r3)
 2002bf0:	0007883a 	mov	r3,zero
 2002bf4:	1887ffb2 	custom	254,r3,r3,r2
 2002bf8:	e0bfff17 	ldw	r2,-4(fp)
 2002bfc:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 2002c00:	e0bffe17 	ldw	r2,-8(fp)
 2002c04:	10800204 	addi	r2,r2,8
 2002c08:	10800017 	ldw	r2,0(r2)
 2002c0c:	10000a1e 	bne	r2,zero,2002c38 <borderCollide+0x100>
 2002c10:	e0bffc17 	ldw	r2,-16(fp)
 2002c14:	10000826 	beq	r2,zero,2002c38 <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 2002c18:	e0bfff17 	ldw	r2,-4(fp)
 2002c1c:	10800104 	addi	r2,r2,4
 2002c20:	e0ffff17 	ldw	r3,-4(fp)
 2002c24:	19000104 	addi	r4,r3,4
 2002c28:	20c00017 	ldw	r3,0(r4)
 2002c2c:	0009883a 	mov	r4,zero
 2002c30:	20c7ffb2 	custom	254,r3,r4,r3
 2002c34:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2002c38:	e0bffe17 	ldw	r2,-8(fp)
 2002c3c:	10c00117 	ldw	r3,4(r2)
 2002c40:	e0bffe17 	ldw	r2,-8(fp)
 2002c44:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2002c48:	e0bffe17 	ldw	r2,-8(fp)
 2002c4c:	10800104 	addi	r2,r2,4
 2002c50:	e0fffb17 	ldw	r3,-20(fp)
 2002c54:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2002c58:	e0bffe17 	ldw	r2,-8(fp)
 2002c5c:	10800204 	addi	r2,r2,8
 2002c60:	e0fffe17 	ldw	r3,-8(fp)
 2002c64:	18c00317 	ldw	r3,12(r3)
 2002c68:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2002c6c:	e0bffe17 	ldw	r2,-8(fp)
 2002c70:	10800304 	addi	r2,r2,12
 2002c74:	e0fffc17 	ldw	r3,-16(fp)
 2002c78:	10c00015 	stw	r3,0(r2)
}
 2002c7c:	0001883a 	nop
 2002c80:	e037883a 	mov	sp,fp
 2002c84:	df000017 	ldw	fp,0(sp)
 2002c88:	dec00104 	addi	sp,sp,4
 2002c8c:	f800283a 	ret

02002c90 <momentum>:

float momentum (float* velocity){
 2002c90:	defffd04 	addi	sp,sp,-12
 2002c94:	df000215 	stw	fp,8(sp)
 2002c98:	df000204 	addi	fp,sp,8
 2002c9c:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2002ca0:	e0bfff17 	ldw	r2,-4(fp)
 2002ca4:	10c00017 	ldw	r3,0(r2)
 2002ca8:	e13fff17 	ldw	r4,-4(fp)
 2002cac:	20800017 	ldw	r2,0(r4)
 2002cb0:	1887ff32 	custom	252,r3,r3,r2
 2002cb4:	e0bfff17 	ldw	r2,-4(fp)
 2002cb8:	10800104 	addi	r2,r2,4
 2002cbc:	11000017 	ldw	r4,0(r2)
 2002cc0:	e0bfff17 	ldw	r2,-4(fp)
 2002cc4:	11400104 	addi	r5,r2,4
 2002cc8:	28800017 	ldw	r2,0(r5)
 2002ccc:	2085ff32 	custom	252,r2,r4,r2
 2002cd0:	1885ff72 	custom	253,r2,r3,r2
 2002cd4:	e0bffe15 	stw	r2,-8(fp)
	return result;
 2002cd8:	e0bffe17 	ldw	r2,-8(fp)
 2002cdc:	1007883a 	mov	r3,r2
}
 2002ce0:	1805883a 	mov	r2,r3
 2002ce4:	e037883a 	mov	sp,fp
 2002ce8:	df000017 	ldw	fp,0(sp)
 2002cec:	dec00104 	addi	sp,sp,4
 2002cf0:	f800283a 	ret

02002cf4 <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 2002cf4:	defff604 	addi	sp,sp,-40
 2002cf8:	df000915 	stw	fp,36(sp)
 2002cfc:	df000904 	addi	fp,sp,36
 2002d00:	e13ffd15 	stw	r4,-12(fp)
 2002d04:	e17ffe15 	stw	r5,-8(fp)
 2002d08:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 2002d0c:	e0bfff17 	ldw	r2,-4(fp)
 2002d10:	10c00117 	ldw	r3,4(r2)
 2002d14:	e0bfff17 	ldw	r2,-4(fp)
 2002d18:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 2002d1c:	e0bffd17 	ldw	r2,-12(fp)
 2002d20:	10800017 	ldw	r2,0(r2)
 2002d24:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2002d28:	e0bffe17 	ldw	r2,-8(fp)
 2002d2c:	10800017 	ldw	r2,0(r2)
 2002d30:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 2002d34:	e0bffd17 	ldw	r2,-12(fp)
 2002d38:	10800117 	ldw	r2,4(r2)
 2002d3c:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2002d40:	e0bffe17 	ldw	r2,-8(fp)
 2002d44:	10800117 	ldw	r2,4(r2)
 2002d48:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2002d4c:	e0fff817 	ldw	r3,-32(fp)
 2002d50:	e0bff717 	ldw	r2,-36(fp)
 2002d54:	1885ffb2 	custom	254,r2,r3,r2
 2002d58:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2002d5c:	e0fffa17 	ldw	r3,-24(fp)
 2002d60:	e0bff917 	ldw	r2,-28(fp)
 2002d64:	1885ffb2 	custom	254,r2,r3,r2
 2002d68:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2002d6c:	e0bfff17 	ldw	r2,-4(fp)
 2002d70:	10800104 	addi	r2,r2,4
 2002d74:	e13ffb17 	ldw	r4,-20(fp)
 2002d78:	e0fffb17 	ldw	r3,-20(fp)
 2002d7c:	20c9ff32 	custom	252,r4,r4,r3
 2002d80:	e17ffc17 	ldw	r5,-16(fp)
 2002d84:	e0fffc17 	ldw	r3,-16(fp)
 2002d88:	28c7ff32 	custom	252,r3,r5,r3
 2002d8c:	20c9ff72 	custom	253,r4,r4,r3
 2002d90:	00d10a74 	movhi	r3,17449
 2002d94:	20c7f9b2 	custom	230,r3,r4,r3
 2002d98:	18c03fcc 	andi	r3,r3,255
 2002d9c:	10c00015 	stw	r3,0(r2)
}
 2002da0:	0001883a 	nop
 2002da4:	e037883a 	mov	sp,fp
 2002da8:	df000017 	ldw	fp,0(sp)
 2002dac:	dec00104 	addi	sp,sp,4
 2002db0:	f800283a 	ret

02002db4 <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2002db4:	deffd104 	addi	sp,sp,-188
 2002db8:	dfc02e15 	stw	ra,184(sp)
 2002dbc:	df002d15 	stw	fp,180(sp)
 2002dc0:	ddc02c15 	stw	r23,176(sp)
 2002dc4:	dd802b15 	stw	r22,172(sp)
 2002dc8:	dd402a15 	stw	r21,168(sp)
 2002dcc:	dd002915 	stw	r20,164(sp)
 2002dd0:	dcc02815 	stw	r19,160(sp)
 2002dd4:	dc802715 	stw	r18,156(sp)
 2002dd8:	dc402615 	stw	r17,152(sp)
 2002ddc:	dc002515 	stw	r16,148(sp)
 2002de0:	df002d04 	addi	fp,sp,180
 2002de4:	e13fee15 	stw	r4,-72(fp)
 2002de8:	e17fef15 	stw	r5,-68(fp)
 2002dec:	e1bff015 	stw	r6,-64(fp)
 2002df0:	e1fff115 	stw	r7,-60(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 2002df4:	e0800217 	ldw	r2,8(fp)
 2002df8:	10800017 	ldw	r2,0(r2)
 2002dfc:	1000041e 	bne	r2,zero,2002e10 <collide_calc+0x5c>
 2002e00:	e0800217 	ldw	r2,8(fp)
 2002e04:	10800104 	addi	r2,r2,4
 2002e08:	10800017 	ldw	r2,0(r2)
 2002e0c:	10001d1e 	bne	r2,zero,2002e84 <collide_calc+0xd0>
 2002e10:	e0800217 	ldw	r2,8(fp)
 2002e14:	10800017 	ldw	r2,0(r2)
 2002e18:	10011626 	beq	r2,zero,2003274 <collide_calc+0x4c0>
 2002e1c:	e0800217 	ldw	r2,8(fp)
 2002e20:	10800104 	addi	r2,r2,4
 2002e24:	10800017 	ldw	r2,0(r2)
 2002e28:	10011226 	beq	r2,zero,2003274 <collide_calc+0x4c0>
 2002e2c:	e0ffee17 	ldw	r3,-72(fp)
 2002e30:	18800017 	ldw	r2,0(r3)
 2002e34:	0007883a 	mov	r3,zero
 2002e38:	10c5f8f2 	custom	227,r2,r2,r3
 2002e3c:	10010d1e 	bne	r2,zero,2003274 <collide_calc+0x4c0>
 2002e40:	e0bfee17 	ldw	r2,-72(fp)
 2002e44:	10c00104 	addi	r3,r2,4
 2002e48:	18800017 	ldw	r2,0(r3)
 2002e4c:	0007883a 	mov	r3,zero
 2002e50:	10c5f8f2 	custom	227,r2,r2,r3
 2002e54:	1001071e 	bne	r2,zero,2003274 <collide_calc+0x4c0>
 2002e58:	e0ffef17 	ldw	r3,-68(fp)
 2002e5c:	18800017 	ldw	r2,0(r3)
 2002e60:	0007883a 	mov	r3,zero
 2002e64:	10c5f8f2 	custom	227,r2,r2,r3
 2002e68:	1001021e 	bne	r2,zero,2003274 <collide_calc+0x4c0>
 2002e6c:	e0bfef17 	ldw	r2,-68(fp)
 2002e70:	10c00104 	addi	r3,r2,4
 2002e74:	18800017 	ldw	r2,0(r3)
 2002e78:	0007883a 	mov	r3,zero
 2002e7c:	10c5f8f2 	custom	227,r2,r2,r3
 2002e80:	1000fc1e 	bne	r2,zero,2003274 <collide_calc+0x4c0>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2002e84:	e0bfee17 	ldw	r2,-72(fp)
 2002e88:	10800017 	ldw	r2,0(r2)
 2002e8c:	e0bfe315 	stw	r2,-116(fp)
		x2=ball2[0];
 2002e90:	e0bfef17 	ldw	r2,-68(fp)
 2002e94:	10800017 	ldw	r2,0(r2)
 2002e98:	e0bfe415 	stw	r2,-112(fp)
		y1=ball1[1];
 2002e9c:	e0bfee17 	ldw	r2,-72(fp)
 2002ea0:	10800117 	ldw	r2,4(r2)
 2002ea4:	e0bfe515 	stw	r2,-108(fp)
		y2=ball2[1];
 2002ea8:	e0bfef17 	ldw	r2,-68(fp)
 2002eac:	10800117 	ldw	r2,4(r2)
 2002eb0:	e0bfe615 	stw	r2,-104(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2002eb4:	008fe034 	movhi	r2,16256
 2002eb8:	e0bfe715 	stw	r2,-100(fp)
		x21 = x2-x1;
 2002ebc:	e0ffe417 	ldw	r3,-112(fp)
 2002ec0:	e0bfe317 	ldw	r2,-116(fp)
 2002ec4:	1885ffb2 	custom	254,r2,r3,r2
 2002ec8:	e0bfe115 	stw	r2,-124(fp)
		y21 = y2-y1;
 2002ecc:	e0ffe617 	ldw	r3,-104(fp)
 2002ed0:	e0bfe517 	ldw	r2,-108(fp)
 2002ed4:	1885ffb2 	custom	254,r2,r3,r2
 2002ed8:	e0bfe815 	stw	r2,-96(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2002edc:	e0bff117 	ldw	r2,-60(fp)
 2002ee0:	10c00017 	ldw	r3,0(r2)
 2002ee4:	e13ff017 	ldw	r4,-64(fp)
 2002ee8:	20800017 	ldw	r2,0(r4)
 2002eec:	1885ffb2 	custom	254,r2,r3,r2
 2002ef0:	e0bfec15 	stw	r2,-80(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2002ef4:	e0bff117 	ldw	r2,-60(fp)
 2002ef8:	10800104 	addi	r2,r2,4
 2002efc:	10c00017 	ldw	r3,0(r2)
 2002f00:	e0bff017 	ldw	r2,-64(fp)
 2002f04:	11000104 	addi	r4,r2,4
 2002f08:	20800017 	ldw	r2,0(r4)
 2002f0c:	1885ffb2 	custom	254,r2,r3,r2
 2002f10:	e0bfed15 	stw	r2,-76(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 2002f14:	e0ffec17 	ldw	r3,-80(fp)
 2002f18:	e0bfe117 	ldw	r2,-124(fp)
 2002f1c:	1887ff32 	custom	252,r3,r3,r2
 2002f20:	e13fed17 	ldw	r4,-76(fp)
 2002f24:	e0bfe817 	ldw	r2,-96(fp)
 2002f28:	2085ff32 	custom	252,r2,r4,r2
 2002f2c:	1885ff72 	custom	253,r2,r3,r2
 2002f30:	0007883a 	mov	r3,zero
 2002f34:	10c5f932 	custom	228,r2,r2,r3
 2002f38:	10005026 	beq	r2,zero,200307c <collide_calc+0x2c8>
			printf("error in collision\n");
 2002f3c:	010080b4 	movhi	r4,514
 2002f40:	213a6004 	addi	r4,r4,-5760
 2002f44:	200518c0 	call	200518c <puts>
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002f48:	e0bfee17 	ldw	r2,-72(fp)
 2002f4c:	10c00017 	ldw	r3,0(r2)
 2002f50:	1809883a 	mov	r4,r3
 2002f54:	200478c0 	call	200478c <__extendsfdf2>
 2002f58:	e0bff215 	stw	r2,-56(fp)
 2002f5c:	e0fff315 	stw	r3,-52(fp)
 2002f60:	e0bfee17 	ldw	r2,-72(fp)
 2002f64:	10800104 	addi	r2,r2,4
 2002f68:	10c00017 	ldw	r3,0(r2)
 2002f6c:	1809883a 	mov	r4,r3
 2002f70:	200478c0 	call	200478c <__extendsfdf2>
 2002f74:	1021883a 	mov	r16,r2
 2002f78:	1823883a 	mov	r17,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002f7c:	e0bfef17 	ldw	r2,-68(fp)
 2002f80:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002f84:	1809883a 	mov	r4,r3
 2002f88:	200478c0 	call	200478c <__extendsfdf2>
 2002f8c:	1025883a 	mov	r18,r2
 2002f90:	1827883a 	mov	r19,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002f94:	e0bfef17 	ldw	r2,-68(fp)
 2002f98:	10800104 	addi	r2,r2,4
 2002f9c:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002fa0:	1809883a 	mov	r4,r3
 2002fa4:	200478c0 	call	200478c <__extendsfdf2>
 2002fa8:	1029883a 	mov	r20,r2
 2002fac:	182b883a 	mov	r21,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002fb0:	e0bff017 	ldw	r2,-64(fp)
 2002fb4:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002fb8:	1809883a 	mov	r4,r3
 2002fbc:	200478c0 	call	200478c <__extendsfdf2>
 2002fc0:	102d883a 	mov	r22,r2
 2002fc4:	182f883a 	mov	r23,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002fc8:	e0bff017 	ldw	r2,-64(fp)
 2002fcc:	10800104 	addi	r2,r2,4
 2002fd0:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002fd4:	1809883a 	mov	r4,r3
 2002fd8:	200478c0 	call	200478c <__extendsfdf2>
 2002fdc:	e0bff415 	stw	r2,-48(fp)
 2002fe0:	e0fff515 	stw	r3,-44(fp)
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002fe4:	e0bff117 	ldw	r2,-60(fp)
 2002fe8:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002fec:	1809883a 	mov	r4,r3
 2002ff0:	200478c0 	call	200478c <__extendsfdf2>
 2002ff4:	e0bff615 	stw	r2,-40(fp)
 2002ff8:	e0fff715 	stw	r3,-36(fp)
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002ffc:	e0bff117 	ldw	r2,-60(fp)
 2003000:	10800104 	addi	r2,r2,4
 2003004:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2003008:	1809883a 	mov	r4,r3
 200300c:	200478c0 	call	200478c <__extendsfdf2>
 2003010:	1009883a 	mov	r4,r2
 2003014:	180b883a 	mov	r5,r3
 2003018:	d9000c15 	stw	r4,48(sp)
 200301c:	d9400d15 	stw	r5,52(sp)
 2003020:	e0bff617 	ldw	r2,-40(fp)
 2003024:	d8800a15 	stw	r2,40(sp)
 2003028:	e0bff717 	ldw	r2,-36(fp)
 200302c:	d8800b15 	stw	r2,44(sp)
 2003030:	e0bff417 	ldw	r2,-48(fp)
 2003034:	d8800815 	stw	r2,32(sp)
 2003038:	e0bff517 	ldw	r2,-44(fp)
 200303c:	d8800915 	stw	r2,36(sp)
 2003040:	dd800615 	stw	r22,24(sp)
 2003044:	ddc00715 	stw	r23,28(sp)
 2003048:	dd000415 	stw	r20,16(sp)
 200304c:	dd400515 	stw	r21,20(sp)
 2003050:	dc800215 	stw	r18,8(sp)
 2003054:	dcc00315 	stw	r19,12(sp)
 2003058:	dc000015 	stw	r16,0(sp)
 200305c:	dc400115 	stw	r17,4(sp)
 2003060:	e1bff217 	ldw	r6,-56(fp)
 2003064:	e1fff317 	ldw	r7,-52(fp)
 2003068:	e1400317 	ldw	r5,12(fp)
 200306c:	010080b4 	movhi	r4,514
 2003070:	213a6504 	addi	r4,r4,-5740
 2003074:	200500c0 	call	200500c <printf>

            velocity1[0] -= m21*dv;
            velocity1[1] -= a*m21*dv;
		}
	}
}
 2003078:	00007e06 	br	2003274 <collide_calc+0x4c0>
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
		else{
			fy21=0.000001*fabs(y21);
 200307c:	e0bfe817 	ldw	r2,-96(fp)
 2003080:	1005f832 	custom	224,r2,r2,zero
 2003084:	1009883a 	mov	r4,r2
 2003088:	200478c0 	call	200478c <__extendsfdf2>
 200308c:	1011883a 	mov	r8,r2
 2003090:	1813883a 	mov	r9,r3
 2003094:	01a82db4 	movhi	r6,41142
 2003098:	31bb6344 	addi	r6,r6,-4723
 200309c:	01cfac74 	movhi	r7,16049
 20030a0:	39f1bdc4 	addi	r7,r7,-14601
 20030a4:	4009883a 	mov	r4,r8
 20030a8:	480b883a 	mov	r5,r9
 20030ac:	20040740 	call	2004074 <__muldf3>
 20030b0:	1009883a 	mov	r4,r2
 20030b4:	180b883a 	mov	r5,r3
 20030b8:	2005883a 	mov	r2,r4
 20030bc:	2807883a 	mov	r3,r5
 20030c0:	1009883a 	mov	r4,r2
 20030c4:	180b883a 	mov	r5,r3
 20030c8:	200489c0 	call	200489c <__truncdfsf2>
 20030cc:	1007883a 	mov	r3,r2
 20030d0:	e0ffe915 	stw	r3,-92(fp)
			if(fabs(x21) < fy21){
 20030d4:	e0bfe117 	ldw	r2,-124(fp)
 20030d8:	1007f832 	custom	224,r3,r2,zero
 20030dc:	e0bfe917 	ldw	r2,-92(fp)
 20030e0:	1885f9f2 	custom	231,r2,r3,r2
 20030e4:	10000e26 	beq	r2,zero,2003120 <collide_calc+0x36c>
				if (x21<0) sign = -1;
 20030e8:	e0bfe117 	ldw	r2,-124(fp)
 20030ec:	0007883a 	mov	r3,zero
 20030f0:	10c5f9f2 	custom	231,r2,r2,r3
 20030f4:	10000326 	beq	r2,zero,2003104 <collide_calc+0x350>
 20030f8:	00bfffc4 	movi	r2,-1
 20030fc:	e0bfe215 	stw	r2,-120(fp)
 2003100:	00000206 	br	200310c <collide_calc+0x358>
				else sign=1;
 2003104:	00800044 	movi	r2,1
 2003108:	e0bfe215 	stw	r2,-120(fp)
				x21=fy21*sign;
 200310c:	e0bfe217 	ldw	r2,-120(fp)
 2003110:	1007feb2 	custom	250,r3,r2,zero
 2003114:	e0bfe917 	ldw	r2,-92(fp)
 2003118:	1885ff32 	custom	252,r2,r3,r2
 200311c:	e0bfe115 	stw	r2,-124(fp)
			}
			a=y21/x21;
 2003120:	e0ffe817 	ldw	r3,-96(fp)
 2003124:	e0bfe117 	ldw	r2,-124(fp)
 2003128:	1885fff2 	custom	255,r2,r3,r2
 200312c:	e0bfea15 	stw	r2,-88(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 2003130:	e0ffec17 	ldw	r3,-80(fp)
 2003134:	e13fed17 	ldw	r4,-76(fp)
 2003138:	e0bfea17 	ldw	r2,-88(fp)
 200313c:	2085ff32 	custom	252,r2,r4,r2
 2003140:	1885ff72 	custom	253,r2,r3,r2
 2003144:	1009883a 	mov	r4,r2
 2003148:	200478c0 	call	200478c <__extendsfdf2>
 200314c:	1011883a 	mov	r8,r2
 2003150:	1813883a 	mov	r9,r3
 2003154:	000d883a 	mov	r6,zero
 2003158:	01f00034 	movhi	r7,49152
 200315c:	4009883a 	mov	r4,r8
 2003160:	480b883a 	mov	r5,r9
 2003164:	20040740 	call	2004074 <__muldf3>
 2003168:	1009883a 	mov	r4,r2
 200316c:	180b883a 	mov	r5,r3
 2003170:	2021883a 	mov	r16,r4
 2003174:	2823883a 	mov	r17,r5
 2003178:	e0ffea17 	ldw	r3,-88(fp)
 200317c:	e0bfea17 	ldw	r2,-88(fp)
 2003180:	1887ff32 	custom	252,r3,r3,r2
 2003184:	008fe034 	movhi	r2,16256
 2003188:	1887ff72 	custom	253,r3,r3,r2
 200318c:	e13fe717 	ldw	r4,-100(fp)
 2003190:	008fe034 	movhi	r2,16256
 2003194:	2085ff72 	custom	253,r2,r4,r2
 2003198:	1885ff32 	custom	252,r2,r3,r2
 200319c:	1009883a 	mov	r4,r2
 20031a0:	200478c0 	call	200478c <__extendsfdf2>
 20031a4:	1009883a 	mov	r4,r2
 20031a8:	180b883a 	mov	r5,r3
 20031ac:	200d883a 	mov	r6,r4
 20031b0:	280f883a 	mov	r7,r5
 20031b4:	8009883a 	mov	r4,r16
 20031b8:	880b883a 	mov	r5,r17
 20031bc:	20035bc0 	call	20035bc <__divdf3>
 20031c0:	1009883a 	mov	r4,r2
 20031c4:	180b883a 	mov	r5,r3
 20031c8:	2005883a 	mov	r2,r4
 20031cc:	2807883a 	mov	r3,r5
 20031d0:	1009883a 	mov	r4,r2
 20031d4:	180b883a 	mov	r5,r3
 20031d8:	200489c0 	call	200489c <__truncdfsf2>
 20031dc:	1007883a 	mov	r3,r2
 20031e0:	e0ffeb15 	stw	r3,-84(fp)
            velocity2[0] += dv;
 20031e4:	e0bff117 	ldw	r2,-60(fp)
 20031e8:	10c00017 	ldw	r3,0(r2)
 20031ec:	e0bfeb17 	ldw	r2,-84(fp)
 20031f0:	1887ff72 	custom	253,r3,r3,r2
 20031f4:	e0bff117 	ldw	r2,-60(fp)
 20031f8:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 20031fc:	e0bff117 	ldw	r2,-60(fp)
 2003200:	10800104 	addi	r2,r2,4
 2003204:	e0fff117 	ldw	r3,-60(fp)
 2003208:	18c00104 	addi	r3,r3,4
 200320c:	19000017 	ldw	r4,0(r3)
 2003210:	e17fea17 	ldw	r5,-88(fp)
 2003214:	e0ffeb17 	ldw	r3,-84(fp)
 2003218:	28c7ff32 	custom	252,r3,r5,r3
 200321c:	20c7ff72 	custom	253,r3,r4,r3
 2003220:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 2003224:	e0bff017 	ldw	r2,-64(fp)
 2003228:	10c00017 	ldw	r3,0(r2)
 200322c:	e13fe717 	ldw	r4,-100(fp)
 2003230:	e0bfeb17 	ldw	r2,-84(fp)
 2003234:	2085ff32 	custom	252,r2,r4,r2
 2003238:	1887ffb2 	custom	254,r3,r3,r2
 200323c:	e0bff017 	ldw	r2,-64(fp)
 2003240:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 2003244:	e0bff017 	ldw	r2,-64(fp)
 2003248:	10800104 	addi	r2,r2,4
 200324c:	e0fff017 	ldw	r3,-64(fp)
 2003250:	18c00104 	addi	r3,r3,4
 2003254:	19000017 	ldw	r4,0(r3)
 2003258:	e17fea17 	ldw	r5,-88(fp)
 200325c:	e0ffe717 	ldw	r3,-100(fp)
 2003260:	28cbff32 	custom	252,r5,r5,r3
 2003264:	e0ffeb17 	ldw	r3,-84(fp)
 2003268:	28c7ff32 	custom	252,r3,r5,r3
 200326c:	20c7ffb2 	custom	254,r3,r4,r3
 2003270:	10c00015 	stw	r3,0(r2)
		}
	}
}
 2003274:	0001883a 	nop
 2003278:	e6fff804 	addi	sp,fp,-32
 200327c:	dfc00917 	ldw	ra,36(sp)
 2003280:	df000817 	ldw	fp,32(sp)
 2003284:	ddc00717 	ldw	r23,28(sp)
 2003288:	dd800617 	ldw	r22,24(sp)
 200328c:	dd400517 	ldw	r21,20(sp)
 2003290:	dd000417 	ldw	r20,16(sp)
 2003294:	dcc00317 	ldw	r19,12(sp)
 2003298:	dc800217 	ldw	r18,8(sp)
 200329c:	dc400117 	ldw	r17,4(sp)
 20032a0:	dc000017 	ldw	r16,0(sp)
 20032a4:	dec00a04 	addi	sp,sp,40
 20032a8:	f800283a 	ret

020032ac <moveBall>:


void moveBall(float* ball, float* velocity){
 20032ac:	defffd04 	addi	sp,sp,-12
 20032b0:	df000215 	stw	fp,8(sp)
 20032b4:	df000204 	addi	fp,sp,8
 20032b8:	e13ffe15 	stw	r4,-8(fp)
 20032bc:	e17fff15 	stw	r5,-4(fp)
	ball[0] += velocity[0];
 20032c0:	e0bffe17 	ldw	r2,-8(fp)
 20032c4:	10c00017 	ldw	r3,0(r2)
 20032c8:	e13fff17 	ldw	r4,-4(fp)
 20032cc:	20800017 	ldw	r2,0(r4)
 20032d0:	1887ff72 	custom	253,r3,r3,r2
 20032d4:	e0bffe17 	ldw	r2,-8(fp)
 20032d8:	10c00015 	stw	r3,0(r2)
	ball[1] += velocity[1];
 20032dc:	e0bffe17 	ldw	r2,-8(fp)
 20032e0:	10800104 	addi	r2,r2,4
 20032e4:	e0fffe17 	ldw	r3,-8(fp)
 20032e8:	18c00104 	addi	r3,r3,4
 20032ec:	19000017 	ldw	r4,0(r3)
 20032f0:	e0ffff17 	ldw	r3,-4(fp)
 20032f4:	19400104 	addi	r5,r3,4
 20032f8:	28c00017 	ldw	r3,0(r5)
 20032fc:	20c7ff72 	custom	253,r3,r4,r3
 2003300:	10c00015 	stw	r3,0(r2)
}
 2003304:	0001883a 	nop
 2003308:	e037883a 	mov	sp,fp
 200330c:	df000017 	ldw	fp,0(sp)
 2003310:	dec00104 	addi	sp,sp,4
 2003314:	f800283a 	ret

02003318 <damping>:


void damping(float* velocity){
 2003318:	defffc04 	addi	sp,sp,-16
 200331c:	dfc00315 	stw	ra,12(sp)
 2003320:	df000215 	stw	fp,8(sp)
 2003324:	dc000115 	stw	r16,4(sp)
 2003328:	df000204 	addi	fp,sp,8
 200332c:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 2003330:	e0bffe17 	ldw	r2,-8(fp)
 2003334:	10c00017 	ldw	r3,0(r2)
 2003338:	1809883a 	mov	r4,r3
 200333c:	200478c0 	call	200478c <__extendsfdf2>
 2003340:	1011883a 	mov	r8,r2
 2003344:	1813883a 	mov	r9,r3
 2003348:	018f5c74 	movhi	r6,15729
 200334c:	31a8f5c4 	addi	r6,r6,-23593
 2003350:	01cffc34 	movhi	r7,16368
 2003354:	39f5c284 	addi	r7,r7,-10486
 2003358:	4009883a 	mov	r4,r8
 200335c:	480b883a 	mov	r5,r9
 2003360:	20040740 	call	2004074 <__muldf3>
 2003364:	1009883a 	mov	r4,r2
 2003368:	180b883a 	mov	r5,r3
 200336c:	2005883a 	mov	r2,r4
 2003370:	2807883a 	mov	r3,r5
 2003374:	1009883a 	mov	r4,r2
 2003378:	180b883a 	mov	r5,r3
 200337c:	200489c0 	call	200489c <__truncdfsf2>
 2003380:	1007883a 	mov	r3,r2
 2003384:	e0bffe17 	ldw	r2,-8(fp)
 2003388:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 200338c:	e0bffe17 	ldw	r2,-8(fp)
 2003390:	14000104 	addi	r16,r2,4
 2003394:	e0bffe17 	ldw	r2,-8(fp)
 2003398:	10800104 	addi	r2,r2,4
 200339c:	10c00017 	ldw	r3,0(r2)
 20033a0:	1809883a 	mov	r4,r3
 20033a4:	200478c0 	call	200478c <__extendsfdf2>
 20033a8:	1011883a 	mov	r8,r2
 20033ac:	1813883a 	mov	r9,r3
 20033b0:	018f5c74 	movhi	r6,15729
 20033b4:	31a8f5c4 	addi	r6,r6,-23593
 20033b8:	01cffc34 	movhi	r7,16368
 20033bc:	39f5c284 	addi	r7,r7,-10486
 20033c0:	4009883a 	mov	r4,r8
 20033c4:	480b883a 	mov	r5,r9
 20033c8:	20040740 	call	2004074 <__muldf3>
 20033cc:	1009883a 	mov	r4,r2
 20033d0:	180b883a 	mov	r5,r3
 20033d4:	2005883a 	mov	r2,r4
 20033d8:	2807883a 	mov	r3,r5
 20033dc:	1009883a 	mov	r4,r2
 20033e0:	180b883a 	mov	r5,r3
 20033e4:	200489c0 	call	200489c <__truncdfsf2>
 20033e8:	1007883a 	mov	r3,r2
 20033ec:	80c00015 	stw	r3,0(r16)
}
 20033f0:	0001883a 	nop
 20033f4:	e6ffff04 	addi	sp,fp,-4
 20033f8:	dfc00217 	ldw	ra,8(sp)
 20033fc:	df000117 	ldw	fp,4(sp)
 2003400:	dc000017 	ldw	r16,0(sp)
 2003404:	dec00304 	addi	sp,sp,12
 2003408:	f800283a 	ret

0200340c <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 200340c:	defffa04 	addi	sp,sp,-24
 2003410:	dfc00515 	stw	ra,20(sp)
 2003414:	df000415 	stw	fp,16(sp)
 2003418:	df000404 	addi	fp,sp,16
 200341c:	e13ffc15 	stw	r4,-16(fp)
 2003420:	e17ffd15 	stw	r5,-12(fp)
 2003424:	e1bffe15 	stw	r6,-8(fp)
 2003428:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 200342c:	e13ffc17 	ldw	r4,-16(fp)
 2003430:	e17ffd17 	ldw	r5,-12(fp)
 2003434:	20034b80 	call	20034b8 <__fpclassifyd>
 2003438:	1000031e 	bne	r2,zero,2003448 <fmin+0x3c>
    return y;
 200343c:	e0bffe17 	ldw	r2,-8(fp)
 2003440:	e0ffff17 	ldw	r3,-4(fp)
 2003444:	00001306 	br	2003494 <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2003448:	e13ffe17 	ldw	r4,-8(fp)
 200344c:	e17fff17 	ldw	r5,-4(fp)
 2003450:	20034b80 	call	20034b8 <__fpclassifyd>
 2003454:	1000031e 	bne	r2,zero,2003464 <fmin+0x58>
    return x;
 2003458:	e0bffc17 	ldw	r2,-16(fp)
 200345c:	e0fffd17 	ldw	r3,-12(fp)
 2003460:	00000c06 	br	2003494 <fmin+0x88>
  
  return x < y ? x : y;
 2003464:	e1bffe17 	ldw	r6,-8(fp)
 2003468:	e1ffff17 	ldw	r7,-4(fp)
 200346c:	e13ffc17 	ldw	r4,-16(fp)
 2003470:	e17ffd17 	ldw	r5,-12(fp)
 2003474:	2003f800 	call	2003f80 <__ledf2>
 2003478:	1000030e 	bge	r2,zero,2003488 <fmin+0x7c>
 200347c:	e0bffc17 	ldw	r2,-16(fp)
 2003480:	e0fffd17 	ldw	r3,-12(fp)
 2003484:	00000206 	br	2003490 <fmin+0x84>
 2003488:	e0bffe17 	ldw	r2,-8(fp)
 200348c:	e0ffff17 	ldw	r3,-4(fp)
 2003490:	0001883a 	nop
 2003494:	1009883a 	mov	r4,r2
 2003498:	180b883a 	mov	r5,r3
}
 200349c:	2005883a 	mov	r2,r4
 20034a0:	2807883a 	mov	r3,r5
 20034a4:	e037883a 	mov	sp,fp
 20034a8:	dfc00117 	ldw	ra,4(sp)
 20034ac:	df000017 	ldw	fp,0(sp)
 20034b0:	dec00204 	addi	sp,sp,8
 20034b4:	f800283a 	ret

020034b8 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 20034b8:	defff904 	addi	sp,sp,-28
 20034bc:	df000615 	stw	fp,24(sp)
 20034c0:	df000604 	addi	fp,sp,24
 20034c4:	e13ffe15 	stw	r4,-8(fp)
 20034c8:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 20034cc:	e0bffe17 	ldw	r2,-8(fp)
 20034d0:	e0bffc15 	stw	r2,-16(fp)
 20034d4:	e0bfff17 	ldw	r2,-4(fp)
 20034d8:	e0bffd15 	stw	r2,-12(fp)
 20034dc:	e0bffd17 	ldw	r2,-12(fp)
 20034e0:	e0bffa15 	stw	r2,-24(fp)
 20034e4:	e0bffc17 	ldw	r2,-16(fp)
 20034e8:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 20034ec:	e0bffa17 	ldw	r2,-24(fp)
 20034f0:	1000021e 	bne	r2,zero,20034fc <__fpclassifyd+0x44>
 20034f4:	e0bffb17 	ldw	r2,-20(fp)
 20034f8:	10000526 	beq	r2,zero,2003510 <__fpclassifyd+0x58>
 20034fc:	e0fffa17 	ldw	r3,-24(fp)
 2003500:	00a00034 	movhi	r2,32768
 2003504:	1880041e 	bne	r3,r2,2003518 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 2003508:	e0bffb17 	ldw	r2,-20(fp)
 200350c:	1000021e 	bne	r2,zero,2003518 <__fpclassifyd+0x60>
    return FP_ZERO;
 2003510:	00800084 	movi	r2,2
 2003514:	00002506 	br	20035ac <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 2003518:	e0fffa17 	ldw	r3,-24(fp)
 200351c:	00800434 	movhi	r2,16
 2003520:	18800336 	bltu	r3,r2,2003530 <__fpclassifyd+0x78>
 2003524:	e0fffa17 	ldw	r3,-24(fp)
 2003528:	009ffc34 	movhi	r2,32752
 200352c:	18800636 	bltu	r3,r2,2003548 <__fpclassifyd+0x90>
 2003530:	e0fffa17 	ldw	r3,-24(fp)
 2003534:	00a00434 	movhi	r2,32784
 2003538:	18800536 	bltu	r3,r2,2003550 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 200353c:	e0fffa17 	ldw	r3,-24(fp)
 2003540:	00bffc34 	movhi	r2,65520
 2003544:	1880022e 	bgeu	r3,r2,2003550 <__fpclassifyd+0x98>
    return FP_NORMAL;
 2003548:	00800104 	movi	r2,4
 200354c:	00001706 	br	20035ac <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003550:	e0fffa17 	ldw	r3,-24(fp)
 2003554:	00800434 	movhi	r2,16
 2003558:	18800536 	bltu	r3,r2,2003570 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200355c:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003560:	1000050e 	bge	r2,zero,2003578 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003564:	e0fffa17 	ldw	r3,-24(fp)
 2003568:	00a00434 	movhi	r2,32784
 200356c:	1880022e 	bgeu	r3,r2,2003578 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 2003570:	008000c4 	movi	r2,3
 2003574:	00000d06 	br	20035ac <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2003578:	e0fffa17 	ldw	r3,-24(fp)
 200357c:	009ffc34 	movhi	r2,32752
 2003580:	1880021e 	bne	r3,r2,200358c <__fpclassifyd+0xd4>
 2003584:	e0bffb17 	ldw	r2,-20(fp)
 2003588:	10000526 	beq	r2,zero,20035a0 <__fpclassifyd+0xe8>
 200358c:	e0fffa17 	ldw	r3,-24(fp)
 2003590:	00bffc34 	movhi	r2,65520
 2003594:	1880041e 	bne	r3,r2,20035a8 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003598:	e0bffb17 	ldw	r2,-20(fp)
 200359c:	1000021e 	bne	r2,zero,20035a8 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 20035a0:	00800044 	movi	r2,1
 20035a4:	00000106 	br	20035ac <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 20035a8:	0005883a 	mov	r2,zero
}
 20035ac:	e037883a 	mov	sp,fp
 20035b0:	df000017 	ldw	fp,0(sp)
 20035b4:	dec00104 	addi	sp,sp,4
 20035b8:	f800283a 	ret

020035bc <__divdf3>:
 20035bc:	defff204 	addi	sp,sp,-56
 20035c0:	dd400915 	stw	r21,36(sp)
 20035c4:	282ad53a 	srli	r21,r5,20
 20035c8:	dd000815 	stw	r20,32(sp)
 20035cc:	2828d7fa 	srli	r20,r5,31
 20035d0:	dc000415 	stw	r16,16(sp)
 20035d4:	04000434 	movhi	r16,16
 20035d8:	df000c15 	stw	fp,48(sp)
 20035dc:	843fffc4 	addi	r16,r16,-1
 20035e0:	dfc00d15 	stw	ra,52(sp)
 20035e4:	ddc00b15 	stw	r23,44(sp)
 20035e8:	dd800a15 	stw	r22,40(sp)
 20035ec:	dcc00715 	stw	r19,28(sp)
 20035f0:	dc800615 	stw	r18,24(sp)
 20035f4:	dc400515 	stw	r17,20(sp)
 20035f8:	ad41ffcc 	andi	r21,r21,2047
 20035fc:	2c20703a 	and	r16,r5,r16
 2003600:	a7003fcc 	andi	fp,r20,255
 2003604:	a8006126 	beq	r21,zero,200378c <__divdf3+0x1d0>
 2003608:	0081ffc4 	movi	r2,2047
 200360c:	2025883a 	mov	r18,r4
 2003610:	a8803726 	beq	r21,r2,20036f0 <__divdf3+0x134>
 2003614:	80800434 	orhi	r2,r16,16
 2003618:	100490fa 	slli	r2,r2,3
 200361c:	2020d77a 	srli	r16,r4,29
 2003620:	202490fa 	slli	r18,r4,3
 2003624:	ad7f0044 	addi	r21,r21,-1023
 2003628:	80a0b03a 	or	r16,r16,r2
 200362c:	0027883a 	mov	r19,zero
 2003630:	0013883a 	mov	r9,zero
 2003634:	3804d53a 	srli	r2,r7,20
 2003638:	382cd7fa 	srli	r22,r7,31
 200363c:	04400434 	movhi	r17,16
 2003640:	8c7fffc4 	addi	r17,r17,-1
 2003644:	1081ffcc 	andi	r2,r2,2047
 2003648:	3011883a 	mov	r8,r6
 200364c:	3c62703a 	and	r17,r7,r17
 2003650:	b5c03fcc 	andi	r23,r22,255
 2003654:	10006c26 	beq	r2,zero,2003808 <__divdf3+0x24c>
 2003658:	00c1ffc4 	movi	r3,2047
 200365c:	10c06426 	beq	r2,r3,20037f0 <__divdf3+0x234>
 2003660:	88c00434 	orhi	r3,r17,16
 2003664:	180690fa 	slli	r3,r3,3
 2003668:	3022d77a 	srli	r17,r6,29
 200366c:	301090fa 	slli	r8,r6,3
 2003670:	10bf0044 	addi	r2,r2,-1023
 2003674:	88e2b03a 	or	r17,r17,r3
 2003678:	000f883a 	mov	r7,zero
 200367c:	a58cf03a 	xor	r6,r20,r22
 2003680:	3cc8b03a 	or	r4,r7,r19
 2003684:	a8abc83a 	sub	r21,r21,r2
 2003688:	008003c4 	movi	r2,15
 200368c:	3007883a 	mov	r3,r6
 2003690:	34c03fcc 	andi	r19,r6,255
 2003694:	11009036 	bltu	r2,r4,20038d8 <__divdf3+0x31c>
 2003698:	200890ba 	slli	r4,r4,2
 200369c:	00808034 	movhi	r2,512
 20036a0:	108dac04 	addi	r2,r2,14000
 20036a4:	2089883a 	add	r4,r4,r2
 20036a8:	20800017 	ldw	r2,0(r4)
 20036ac:	1000683a 	jmp	r2
 20036b0:	020038d8 	cmpnei	r8,zero,227
 20036b4:	02003728 	cmpgeui	r8,zero,220
 20036b8:	020038c8 	cmpgei	r8,zero,227
 20036bc:	0200371c 	xori	r8,zero,220
 20036c0:	020038c8 	cmpgei	r8,zero,227
 20036c4:	0200389c 	xori	r8,zero,226
 20036c8:	020038c8 	cmpgei	r8,zero,227
 20036cc:	0200371c 	xori	r8,zero,220
 20036d0:	02003728 	cmpgeui	r8,zero,220
 20036d4:	02003728 	cmpgeui	r8,zero,220
 20036d8:	0200389c 	xori	r8,zero,226
 20036dc:	0200371c 	xori	r8,zero,220
 20036e0:	0200370c 	andi	r8,zero,220
 20036e4:	0200370c 	andi	r8,zero,220
 20036e8:	0200370c 	andi	r8,zero,220
 20036ec:	02003bbc 	xorhi	r8,zero,238
 20036f0:	2404b03a 	or	r2,r4,r16
 20036f4:	1000661e 	bne	r2,zero,2003890 <__divdf3+0x2d4>
 20036f8:	04c00204 	movi	r19,8
 20036fc:	0021883a 	mov	r16,zero
 2003700:	0025883a 	mov	r18,zero
 2003704:	02400084 	movi	r9,2
 2003708:	003fca06 	br	2003634 <__divdf3+0x78>
 200370c:	8023883a 	mov	r17,r16
 2003710:	9011883a 	mov	r8,r18
 2003714:	e02f883a 	mov	r23,fp
 2003718:	480f883a 	mov	r7,r9
 200371c:	00800084 	movi	r2,2
 2003720:	3881311e 	bne	r7,r2,2003be8 <__divdf3+0x62c>
 2003724:	b827883a 	mov	r19,r23
 2003728:	98c0004c 	andi	r3,r19,1
 200372c:	0081ffc4 	movi	r2,2047
 2003730:	000b883a 	mov	r5,zero
 2003734:	0025883a 	mov	r18,zero
 2003738:	1004953a 	slli	r2,r2,20
 200373c:	18c03fcc 	andi	r3,r3,255
 2003740:	04400434 	movhi	r17,16
 2003744:	8c7fffc4 	addi	r17,r17,-1
 2003748:	180697fa 	slli	r3,r3,31
 200374c:	2c4a703a 	and	r5,r5,r17
 2003750:	288ab03a 	or	r5,r5,r2
 2003754:	28c6b03a 	or	r3,r5,r3
 2003758:	9005883a 	mov	r2,r18
 200375c:	dfc00d17 	ldw	ra,52(sp)
 2003760:	df000c17 	ldw	fp,48(sp)
 2003764:	ddc00b17 	ldw	r23,44(sp)
 2003768:	dd800a17 	ldw	r22,40(sp)
 200376c:	dd400917 	ldw	r21,36(sp)
 2003770:	dd000817 	ldw	r20,32(sp)
 2003774:	dcc00717 	ldw	r19,28(sp)
 2003778:	dc800617 	ldw	r18,24(sp)
 200377c:	dc400517 	ldw	r17,20(sp)
 2003780:	dc000417 	ldw	r16,16(sp)
 2003784:	dec00e04 	addi	sp,sp,56
 2003788:	f800283a 	ret
 200378c:	2404b03a 	or	r2,r4,r16
 2003790:	2027883a 	mov	r19,r4
 2003794:	10003926 	beq	r2,zero,200387c <__divdf3+0x2c0>
 2003798:	80012e26 	beq	r16,zero,2003c54 <__divdf3+0x698>
 200379c:	8009883a 	mov	r4,r16
 20037a0:	d9800315 	stw	r6,12(sp)
 20037a4:	d9c00215 	stw	r7,8(sp)
 20037a8:	2004a440 	call	2004a44 <__clzsi2>
 20037ac:	d9800317 	ldw	r6,12(sp)
 20037b0:	d9c00217 	ldw	r7,8(sp)
 20037b4:	113ffd44 	addi	r4,r2,-11
 20037b8:	00c00704 	movi	r3,28
 20037bc:	19012116 	blt	r3,r4,2003c44 <__divdf3+0x688>
 20037c0:	00c00744 	movi	r3,29
 20037c4:	147ffe04 	addi	r17,r2,-8
 20037c8:	1907c83a 	sub	r3,r3,r4
 20037cc:	8460983a 	sll	r16,r16,r17
 20037d0:	98c6d83a 	srl	r3,r19,r3
 20037d4:	9c64983a 	sll	r18,r19,r17
 20037d8:	1c20b03a 	or	r16,r3,r16
 20037dc:	1080fcc4 	addi	r2,r2,1011
 20037e0:	00abc83a 	sub	r21,zero,r2
 20037e4:	0027883a 	mov	r19,zero
 20037e8:	0013883a 	mov	r9,zero
 20037ec:	003f9106 	br	2003634 <__divdf3+0x78>
 20037f0:	3446b03a 	or	r3,r6,r17
 20037f4:	18001f1e 	bne	r3,zero,2003874 <__divdf3+0x2b8>
 20037f8:	0023883a 	mov	r17,zero
 20037fc:	0011883a 	mov	r8,zero
 2003800:	01c00084 	movi	r7,2
 2003804:	003f9d06 	br	200367c <__divdf3+0xc0>
 2003808:	3446b03a 	or	r3,r6,r17
 200380c:	18001526 	beq	r3,zero,2003864 <__divdf3+0x2a8>
 2003810:	88011b26 	beq	r17,zero,2003c80 <__divdf3+0x6c4>
 2003814:	8809883a 	mov	r4,r17
 2003818:	d9800315 	stw	r6,12(sp)
 200381c:	da400115 	stw	r9,4(sp)
 2003820:	2004a440 	call	2004a44 <__clzsi2>
 2003824:	d9800317 	ldw	r6,12(sp)
 2003828:	da400117 	ldw	r9,4(sp)
 200382c:	113ffd44 	addi	r4,r2,-11
 2003830:	00c00704 	movi	r3,28
 2003834:	19010e16 	blt	r3,r4,2003c70 <__divdf3+0x6b4>
 2003838:	00c00744 	movi	r3,29
 200383c:	123ffe04 	addi	r8,r2,-8
 2003840:	1907c83a 	sub	r3,r3,r4
 2003844:	8a22983a 	sll	r17,r17,r8
 2003848:	30c6d83a 	srl	r3,r6,r3
 200384c:	3210983a 	sll	r8,r6,r8
 2003850:	1c62b03a 	or	r17,r3,r17
 2003854:	1080fcc4 	addi	r2,r2,1011
 2003858:	0085c83a 	sub	r2,zero,r2
 200385c:	000f883a 	mov	r7,zero
 2003860:	003f8606 	br	200367c <__divdf3+0xc0>
 2003864:	0023883a 	mov	r17,zero
 2003868:	0011883a 	mov	r8,zero
 200386c:	01c00044 	movi	r7,1
 2003870:	003f8206 	br	200367c <__divdf3+0xc0>
 2003874:	01c000c4 	movi	r7,3
 2003878:	003f8006 	br	200367c <__divdf3+0xc0>
 200387c:	04c00104 	movi	r19,4
 2003880:	0021883a 	mov	r16,zero
 2003884:	0025883a 	mov	r18,zero
 2003888:	02400044 	movi	r9,1
 200388c:	003f6906 	br	2003634 <__divdf3+0x78>
 2003890:	04c00304 	movi	r19,12
 2003894:	024000c4 	movi	r9,3
 2003898:	003f6606 	br	2003634 <__divdf3+0x78>
 200389c:	01400434 	movhi	r5,16
 20038a0:	0007883a 	mov	r3,zero
 20038a4:	297fffc4 	addi	r5,r5,-1
 20038a8:	04bfffc4 	movi	r18,-1
 20038ac:	0081ffc4 	movi	r2,2047
 20038b0:	003fa106 	br	2003738 <__divdf3+0x17c>
 20038b4:	00c00044 	movi	r3,1
 20038b8:	1887c83a 	sub	r3,r3,r2
 20038bc:	01000e04 	movi	r4,56
 20038c0:	20c1210e 	bge	r4,r3,2003d48 <__divdf3+0x78c>
 20038c4:	98c0004c 	andi	r3,r19,1
 20038c8:	0005883a 	mov	r2,zero
 20038cc:	000b883a 	mov	r5,zero
 20038d0:	0025883a 	mov	r18,zero
 20038d4:	003f9806 	br	2003738 <__divdf3+0x17c>
 20038d8:	8c00fd36 	bltu	r17,r16,2003cd0 <__divdf3+0x714>
 20038dc:	8440fb26 	beq	r16,r17,2003ccc <__divdf3+0x710>
 20038e0:	8007883a 	mov	r3,r16
 20038e4:	ad7fffc4 	addi	r21,r21,-1
 20038e8:	0021883a 	mov	r16,zero
 20038ec:	4004d63a 	srli	r2,r8,24
 20038f0:	8822923a 	slli	r17,r17,8
 20038f4:	1809883a 	mov	r4,r3
 20038f8:	402c923a 	slli	r22,r8,8
 20038fc:	88b8b03a 	or	fp,r17,r2
 2003900:	e028d43a 	srli	r20,fp,16
 2003904:	d8c00015 	stw	r3,0(sp)
 2003908:	e5ffffcc 	andi	r23,fp,65535
 200390c:	a00b883a 	mov	r5,r20
 2003910:	2004ba00 	call	2004ba0 <__udivsi3>
 2003914:	d8c00017 	ldw	r3,0(sp)
 2003918:	a00b883a 	mov	r5,r20
 200391c:	d8800315 	stw	r2,12(sp)
 2003920:	1809883a 	mov	r4,r3
 2003924:	2004c040 	call	2004c04 <__umodsi3>
 2003928:	d9800317 	ldw	r6,12(sp)
 200392c:	1006943a 	slli	r3,r2,16
 2003930:	9004d43a 	srli	r2,r18,16
 2003934:	b9a3383a 	mul	r17,r23,r6
 2003938:	10c4b03a 	or	r2,r2,r3
 200393c:	1440062e 	bgeu	r2,r17,2003958 <__divdf3+0x39c>
 2003940:	1705883a 	add	r2,r2,fp
 2003944:	30ffffc4 	addi	r3,r6,-1
 2003948:	1700ee36 	bltu	r2,fp,2003d04 <__divdf3+0x748>
 200394c:	1440ed2e 	bgeu	r2,r17,2003d04 <__divdf3+0x748>
 2003950:	31bfff84 	addi	r6,r6,-2
 2003954:	1705883a 	add	r2,r2,fp
 2003958:	1463c83a 	sub	r17,r2,r17
 200395c:	a00b883a 	mov	r5,r20
 2003960:	8809883a 	mov	r4,r17
 2003964:	d9800315 	stw	r6,12(sp)
 2003968:	2004ba00 	call	2004ba0 <__udivsi3>
 200396c:	a00b883a 	mov	r5,r20
 2003970:	8809883a 	mov	r4,r17
 2003974:	d8800215 	stw	r2,8(sp)
 2003978:	2004c040 	call	2004c04 <__umodsi3>
 200397c:	d9c00217 	ldw	r7,8(sp)
 2003980:	1004943a 	slli	r2,r2,16
 2003984:	94bfffcc 	andi	r18,r18,65535
 2003988:	b9d1383a 	mul	r8,r23,r7
 200398c:	90a4b03a 	or	r18,r18,r2
 2003990:	d9800317 	ldw	r6,12(sp)
 2003994:	9200062e 	bgeu	r18,r8,20039b0 <__divdf3+0x3f4>
 2003998:	9725883a 	add	r18,r18,fp
 200399c:	38bfffc4 	addi	r2,r7,-1
 20039a0:	9700d636 	bltu	r18,fp,2003cfc <__divdf3+0x740>
 20039a4:	9200d52e 	bgeu	r18,r8,2003cfc <__divdf3+0x740>
 20039a8:	39ffff84 	addi	r7,r7,-2
 20039ac:	9725883a 	add	r18,r18,fp
 20039b0:	3004943a 	slli	r2,r6,16
 20039b4:	b012d43a 	srli	r9,r22,16
 20039b8:	b1bfffcc 	andi	r6,r22,65535
 20039bc:	11e2b03a 	or	r17,r2,r7
 20039c0:	8806d43a 	srli	r3,r17,16
 20039c4:	893fffcc 	andi	r4,r17,65535
 20039c8:	218b383a 	mul	r5,r4,r6
 20039cc:	30c5383a 	mul	r2,r6,r3
 20039d0:	2249383a 	mul	r4,r4,r9
 20039d4:	280ed43a 	srli	r7,r5,16
 20039d8:	9225c83a 	sub	r18,r18,r8
 20039dc:	2089883a 	add	r4,r4,r2
 20039e0:	3909883a 	add	r4,r7,r4
 20039e4:	1a47383a 	mul	r3,r3,r9
 20039e8:	2080022e 	bgeu	r4,r2,20039f4 <__divdf3+0x438>
 20039ec:	00800074 	movhi	r2,1
 20039f0:	1887883a 	add	r3,r3,r2
 20039f4:	2004d43a 	srli	r2,r4,16
 20039f8:	2008943a 	slli	r4,r4,16
 20039fc:	297fffcc 	andi	r5,r5,65535
 2003a00:	10c7883a 	add	r3,r2,r3
 2003a04:	2149883a 	add	r4,r4,r5
 2003a08:	90c0a536 	bltu	r18,r3,2003ca0 <__divdf3+0x6e4>
 2003a0c:	90c0bf26 	beq	r18,r3,2003d0c <__divdf3+0x750>
 2003a10:	90c7c83a 	sub	r3,r18,r3
 2003a14:	810fc83a 	sub	r7,r16,r4
 2003a18:	81e5803a 	cmpltu	r18,r16,r7
 2003a1c:	1ca5c83a 	sub	r18,r3,r18
 2003a20:	e480c126 	beq	fp,r18,2003d28 <__divdf3+0x76c>
 2003a24:	a00b883a 	mov	r5,r20
 2003a28:	9009883a 	mov	r4,r18
 2003a2c:	d9800315 	stw	r6,12(sp)
 2003a30:	d9c00215 	stw	r7,8(sp)
 2003a34:	da400115 	stw	r9,4(sp)
 2003a38:	2004ba00 	call	2004ba0 <__udivsi3>
 2003a3c:	a00b883a 	mov	r5,r20
 2003a40:	9009883a 	mov	r4,r18
 2003a44:	d8800015 	stw	r2,0(sp)
 2003a48:	2004c040 	call	2004c04 <__umodsi3>
 2003a4c:	d9c00217 	ldw	r7,8(sp)
 2003a50:	da000017 	ldw	r8,0(sp)
 2003a54:	1006943a 	slli	r3,r2,16
 2003a58:	3804d43a 	srli	r2,r7,16
 2003a5c:	ba21383a 	mul	r16,r23,r8
 2003a60:	d9800317 	ldw	r6,12(sp)
 2003a64:	10c4b03a 	or	r2,r2,r3
 2003a68:	da400117 	ldw	r9,4(sp)
 2003a6c:	1400062e 	bgeu	r2,r16,2003a88 <__divdf3+0x4cc>
 2003a70:	1705883a 	add	r2,r2,fp
 2003a74:	40ffffc4 	addi	r3,r8,-1
 2003a78:	1700ad36 	bltu	r2,fp,2003d30 <__divdf3+0x774>
 2003a7c:	1400ac2e 	bgeu	r2,r16,2003d30 <__divdf3+0x774>
 2003a80:	423fff84 	addi	r8,r8,-2
 2003a84:	1705883a 	add	r2,r2,fp
 2003a88:	1421c83a 	sub	r16,r2,r16
 2003a8c:	a00b883a 	mov	r5,r20
 2003a90:	8009883a 	mov	r4,r16
 2003a94:	d9800315 	stw	r6,12(sp)
 2003a98:	d9c00215 	stw	r7,8(sp)
 2003a9c:	da000015 	stw	r8,0(sp)
 2003aa0:	da400115 	stw	r9,4(sp)
 2003aa4:	2004ba00 	call	2004ba0 <__udivsi3>
 2003aa8:	8009883a 	mov	r4,r16
 2003aac:	a00b883a 	mov	r5,r20
 2003ab0:	1025883a 	mov	r18,r2
 2003ab4:	2004c040 	call	2004c04 <__umodsi3>
 2003ab8:	d9c00217 	ldw	r7,8(sp)
 2003abc:	1004943a 	slli	r2,r2,16
 2003ac0:	bcaf383a 	mul	r23,r23,r18
 2003ac4:	393fffcc 	andi	r4,r7,65535
 2003ac8:	2088b03a 	or	r4,r4,r2
 2003acc:	d9800317 	ldw	r6,12(sp)
 2003ad0:	da000017 	ldw	r8,0(sp)
 2003ad4:	da400117 	ldw	r9,4(sp)
 2003ad8:	25c0062e 	bgeu	r4,r23,2003af4 <__divdf3+0x538>
 2003adc:	2709883a 	add	r4,r4,fp
 2003ae0:	90bfffc4 	addi	r2,r18,-1
 2003ae4:	27009436 	bltu	r4,fp,2003d38 <__divdf3+0x77c>
 2003ae8:	25c0932e 	bgeu	r4,r23,2003d38 <__divdf3+0x77c>
 2003aec:	94bfff84 	addi	r18,r18,-2
 2003af0:	2709883a 	add	r4,r4,fp
 2003af4:	4004943a 	slli	r2,r8,16
 2003af8:	25efc83a 	sub	r23,r4,r23
 2003afc:	1490b03a 	or	r8,r2,r18
 2003b00:	4008d43a 	srli	r4,r8,16
 2003b04:	40ffffcc 	andi	r3,r8,65535
 2003b08:	30c5383a 	mul	r2,r6,r3
 2003b0c:	1a47383a 	mul	r3,r3,r9
 2003b10:	310d383a 	mul	r6,r6,r4
 2003b14:	100ad43a 	srli	r5,r2,16
 2003b18:	4913383a 	mul	r9,r9,r4
 2003b1c:	1987883a 	add	r3,r3,r6
 2003b20:	28c7883a 	add	r3,r5,r3
 2003b24:	1980022e 	bgeu	r3,r6,2003b30 <__divdf3+0x574>
 2003b28:	01000074 	movhi	r4,1
 2003b2c:	4913883a 	add	r9,r9,r4
 2003b30:	1808d43a 	srli	r4,r3,16
 2003b34:	1806943a 	slli	r3,r3,16
 2003b38:	10bfffcc 	andi	r2,r2,65535
 2003b3c:	2253883a 	add	r9,r4,r9
 2003b40:	1887883a 	add	r3,r3,r2
 2003b44:	ba403836 	bltu	r23,r9,2003c28 <__divdf3+0x66c>
 2003b48:	ba403626 	beq	r23,r9,2003c24 <__divdf3+0x668>
 2003b4c:	42000054 	ori	r8,r8,1
 2003b50:	a880ffc4 	addi	r2,r21,1023
 2003b54:	00bf570e 	bge	zero,r2,20038b4 <__divdf3+0x2f8>
 2003b58:	40c001cc 	andi	r3,r8,7
 2003b5c:	18000726 	beq	r3,zero,2003b7c <__divdf3+0x5c0>
 2003b60:	40c003cc 	andi	r3,r8,15
 2003b64:	01000104 	movi	r4,4
 2003b68:	19000426 	beq	r3,r4,2003b7c <__divdf3+0x5c0>
 2003b6c:	4107883a 	add	r3,r8,r4
 2003b70:	1a11803a 	cmpltu	r8,r3,r8
 2003b74:	8a23883a 	add	r17,r17,r8
 2003b78:	1811883a 	mov	r8,r3
 2003b7c:	88c0402c 	andhi	r3,r17,256
 2003b80:	18000426 	beq	r3,zero,2003b94 <__divdf3+0x5d8>
 2003b84:	00ffc034 	movhi	r3,65280
 2003b88:	18ffffc4 	addi	r3,r3,-1
 2003b8c:	a8810004 	addi	r2,r21,1024
 2003b90:	88e2703a 	and	r17,r17,r3
 2003b94:	00c1ff84 	movi	r3,2046
 2003b98:	18bee316 	blt	r3,r2,2003728 <__divdf3+0x16c>
 2003b9c:	8824977a 	slli	r18,r17,29
 2003ba0:	4010d0fa 	srli	r8,r8,3
 2003ba4:	8822927a 	slli	r17,r17,9
 2003ba8:	1081ffcc 	andi	r2,r2,2047
 2003bac:	9224b03a 	or	r18,r18,r8
 2003bb0:	880ad33a 	srli	r5,r17,12
 2003bb4:	98c0004c 	andi	r3,r19,1
 2003bb8:	003edf06 	br	2003738 <__divdf3+0x17c>
 2003bbc:	8080022c 	andhi	r2,r16,8
 2003bc0:	10001226 	beq	r2,zero,2003c0c <__divdf3+0x650>
 2003bc4:	8880022c 	andhi	r2,r17,8
 2003bc8:	1000101e 	bne	r2,zero,2003c0c <__divdf3+0x650>
 2003bcc:	00800434 	movhi	r2,16
 2003bd0:	89400234 	orhi	r5,r17,8
 2003bd4:	10bfffc4 	addi	r2,r2,-1
 2003bd8:	b007883a 	mov	r3,r22
 2003bdc:	288a703a 	and	r5,r5,r2
 2003be0:	4025883a 	mov	r18,r8
 2003be4:	003f3106 	br	20038ac <__divdf3+0x2f0>
 2003be8:	008000c4 	movi	r2,3
 2003bec:	3880a626 	beq	r7,r2,2003e88 <__divdf3+0x8cc>
 2003bf0:	00800044 	movi	r2,1
 2003bf4:	3880521e 	bne	r7,r2,2003d40 <__divdf3+0x784>
 2003bf8:	b807883a 	mov	r3,r23
 2003bfc:	0005883a 	mov	r2,zero
 2003c00:	000b883a 	mov	r5,zero
 2003c04:	0025883a 	mov	r18,zero
 2003c08:	003ecb06 	br	2003738 <__divdf3+0x17c>
 2003c0c:	00800434 	movhi	r2,16
 2003c10:	81400234 	orhi	r5,r16,8
 2003c14:	10bfffc4 	addi	r2,r2,-1
 2003c18:	a007883a 	mov	r3,r20
 2003c1c:	288a703a 	and	r5,r5,r2
 2003c20:	003f2206 	br	20038ac <__divdf3+0x2f0>
 2003c24:	183fca26 	beq	r3,zero,2003b50 <__divdf3+0x594>
 2003c28:	e5ef883a 	add	r23,fp,r23
 2003c2c:	40bfffc4 	addi	r2,r8,-1
 2003c30:	bf00392e 	bgeu	r23,fp,2003d18 <__divdf3+0x75c>
 2003c34:	1011883a 	mov	r8,r2
 2003c38:	ba7fc41e 	bne	r23,r9,2003b4c <__divdf3+0x590>
 2003c3c:	b0ffc31e 	bne	r22,r3,2003b4c <__divdf3+0x590>
 2003c40:	003fc306 	br	2003b50 <__divdf3+0x594>
 2003c44:	143ff604 	addi	r16,r2,-40
 2003c48:	9c20983a 	sll	r16,r19,r16
 2003c4c:	0025883a 	mov	r18,zero
 2003c50:	003ee206 	br	20037dc <__divdf3+0x220>
 2003c54:	d9800315 	stw	r6,12(sp)
 2003c58:	d9c00215 	stw	r7,8(sp)
 2003c5c:	2004a440 	call	2004a44 <__clzsi2>
 2003c60:	10800804 	addi	r2,r2,32
 2003c64:	d9c00217 	ldw	r7,8(sp)
 2003c68:	d9800317 	ldw	r6,12(sp)
 2003c6c:	003ed106 	br	20037b4 <__divdf3+0x1f8>
 2003c70:	147ff604 	addi	r17,r2,-40
 2003c74:	3462983a 	sll	r17,r6,r17
 2003c78:	0011883a 	mov	r8,zero
 2003c7c:	003ef506 	br	2003854 <__divdf3+0x298>
 2003c80:	3009883a 	mov	r4,r6
 2003c84:	d9800315 	stw	r6,12(sp)
 2003c88:	da400115 	stw	r9,4(sp)
 2003c8c:	2004a440 	call	2004a44 <__clzsi2>
 2003c90:	10800804 	addi	r2,r2,32
 2003c94:	da400117 	ldw	r9,4(sp)
 2003c98:	d9800317 	ldw	r6,12(sp)
 2003c9c:	003ee306 	br	200382c <__divdf3+0x270>
 2003ca0:	85a1883a 	add	r16,r16,r22
 2003ca4:	8585803a 	cmpltu	r2,r16,r22
 2003ca8:	1705883a 	add	r2,r2,fp
 2003cac:	14a5883a 	add	r18,r2,r18
 2003cb0:	88bfffc4 	addi	r2,r17,-1
 2003cb4:	e4800c2e 	bgeu	fp,r18,2003ce8 <__divdf3+0x72c>
 2003cb8:	90c03e36 	bltu	r18,r3,2003db4 <__divdf3+0x7f8>
 2003cbc:	1c806926 	beq	r3,r18,2003e64 <__divdf3+0x8a8>
 2003cc0:	90c7c83a 	sub	r3,r18,r3
 2003cc4:	1023883a 	mov	r17,r2
 2003cc8:	003f5206 	br	2003a14 <__divdf3+0x458>
 2003ccc:	923f0436 	bltu	r18,r8,20038e0 <__divdf3+0x324>
 2003cd0:	800897fa 	slli	r4,r16,31
 2003cd4:	9004d07a 	srli	r2,r18,1
 2003cd8:	8006d07a 	srli	r3,r16,1
 2003cdc:	902097fa 	slli	r16,r18,31
 2003ce0:	20a4b03a 	or	r18,r4,r2
 2003ce4:	003f0106 	br	20038ec <__divdf3+0x330>
 2003ce8:	e4bff51e 	bne	fp,r18,2003cc0 <__divdf3+0x704>
 2003cec:	85bff22e 	bgeu	r16,r22,2003cb8 <__divdf3+0x6fc>
 2003cf0:	e0c7c83a 	sub	r3,fp,r3
 2003cf4:	1023883a 	mov	r17,r2
 2003cf8:	003f4606 	br	2003a14 <__divdf3+0x458>
 2003cfc:	100f883a 	mov	r7,r2
 2003d00:	003f2b06 	br	20039b0 <__divdf3+0x3f4>
 2003d04:	180d883a 	mov	r6,r3
 2003d08:	003f1306 	br	2003958 <__divdf3+0x39c>
 2003d0c:	813fe436 	bltu	r16,r4,2003ca0 <__divdf3+0x6e4>
 2003d10:	0007883a 	mov	r3,zero
 2003d14:	003f3f06 	br	2003a14 <__divdf3+0x458>
 2003d18:	ba402c36 	bltu	r23,r9,2003dcc <__divdf3+0x810>
 2003d1c:	4dc05426 	beq	r9,r23,2003e70 <__divdf3+0x8b4>
 2003d20:	1011883a 	mov	r8,r2
 2003d24:	003f8906 	br	2003b4c <__divdf3+0x590>
 2003d28:	023fffc4 	movi	r8,-1
 2003d2c:	003f8806 	br	2003b50 <__divdf3+0x594>
 2003d30:	1811883a 	mov	r8,r3
 2003d34:	003f5406 	br	2003a88 <__divdf3+0x4cc>
 2003d38:	1025883a 	mov	r18,r2
 2003d3c:	003f6d06 	br	2003af4 <__divdf3+0x538>
 2003d40:	b827883a 	mov	r19,r23
 2003d44:	003f8206 	br	2003b50 <__divdf3+0x594>
 2003d48:	010007c4 	movi	r4,31
 2003d4c:	20c02616 	blt	r4,r3,2003de8 <__divdf3+0x82c>
 2003d50:	00800804 	movi	r2,32
 2003d54:	10c5c83a 	sub	r2,r2,r3
 2003d58:	888a983a 	sll	r5,r17,r2
 2003d5c:	40c8d83a 	srl	r4,r8,r3
 2003d60:	4084983a 	sll	r2,r8,r2
 2003d64:	88e2d83a 	srl	r17,r17,r3
 2003d68:	2906b03a 	or	r3,r5,r4
 2003d6c:	1004c03a 	cmpne	r2,r2,zero
 2003d70:	1886b03a 	or	r3,r3,r2
 2003d74:	188001cc 	andi	r2,r3,7
 2003d78:	10000726 	beq	r2,zero,2003d98 <__divdf3+0x7dc>
 2003d7c:	188003cc 	andi	r2,r3,15
 2003d80:	01000104 	movi	r4,4
 2003d84:	11000426 	beq	r2,r4,2003d98 <__divdf3+0x7dc>
 2003d88:	1805883a 	mov	r2,r3
 2003d8c:	10c00104 	addi	r3,r2,4
 2003d90:	1885803a 	cmpltu	r2,r3,r2
 2003d94:	88a3883a 	add	r17,r17,r2
 2003d98:	8880202c 	andhi	r2,r17,128
 2003d9c:	10002726 	beq	r2,zero,2003e3c <__divdf3+0x880>
 2003da0:	98c0004c 	andi	r3,r19,1
 2003da4:	00800044 	movi	r2,1
 2003da8:	000b883a 	mov	r5,zero
 2003dac:	0025883a 	mov	r18,zero
 2003db0:	003e6106 	br	2003738 <__divdf3+0x17c>
 2003db4:	85a1883a 	add	r16,r16,r22
 2003db8:	8585803a 	cmpltu	r2,r16,r22
 2003dbc:	1705883a 	add	r2,r2,fp
 2003dc0:	14a5883a 	add	r18,r2,r18
 2003dc4:	8c7fff84 	addi	r17,r17,-2
 2003dc8:	003f1106 	br	2003a10 <__divdf3+0x454>
 2003dcc:	b589883a 	add	r4,r22,r22
 2003dd0:	25ad803a 	cmpltu	r22,r4,r22
 2003dd4:	b739883a 	add	fp,r22,fp
 2003dd8:	40bfff84 	addi	r2,r8,-2
 2003ddc:	bf2f883a 	add	r23,r23,fp
 2003de0:	202d883a 	mov	r22,r4
 2003de4:	003f9306 	br	2003c34 <__divdf3+0x678>
 2003de8:	013ff844 	movi	r4,-31
 2003dec:	2085c83a 	sub	r2,r4,r2
 2003df0:	8888d83a 	srl	r4,r17,r2
 2003df4:	00800804 	movi	r2,32
 2003df8:	18802126 	beq	r3,r2,2003e80 <__divdf3+0x8c4>
 2003dfc:	00801004 	movi	r2,64
 2003e00:	10c5c83a 	sub	r2,r2,r3
 2003e04:	8884983a 	sll	r2,r17,r2
 2003e08:	1204b03a 	or	r2,r2,r8
 2003e0c:	1004c03a 	cmpne	r2,r2,zero
 2003e10:	2084b03a 	or	r2,r4,r2
 2003e14:	144001cc 	andi	r17,r2,7
 2003e18:	88000d1e 	bne	r17,zero,2003e50 <__divdf3+0x894>
 2003e1c:	000b883a 	mov	r5,zero
 2003e20:	1024d0fa 	srli	r18,r2,3
 2003e24:	98c0004c 	andi	r3,r19,1
 2003e28:	0005883a 	mov	r2,zero
 2003e2c:	9464b03a 	or	r18,r18,r17
 2003e30:	003e4106 	br	2003738 <__divdf3+0x17c>
 2003e34:	1007883a 	mov	r3,r2
 2003e38:	0023883a 	mov	r17,zero
 2003e3c:	880a927a 	slli	r5,r17,9
 2003e40:	1805883a 	mov	r2,r3
 2003e44:	8822977a 	slli	r17,r17,29
 2003e48:	280ad33a 	srli	r5,r5,12
 2003e4c:	003ff406 	br	2003e20 <__divdf3+0x864>
 2003e50:	10c003cc 	andi	r3,r2,15
 2003e54:	01000104 	movi	r4,4
 2003e58:	193ff626 	beq	r3,r4,2003e34 <__divdf3+0x878>
 2003e5c:	0023883a 	mov	r17,zero
 2003e60:	003fca06 	br	2003d8c <__divdf3+0x7d0>
 2003e64:	813fd336 	bltu	r16,r4,2003db4 <__divdf3+0x7f8>
 2003e68:	1023883a 	mov	r17,r2
 2003e6c:	003fa806 	br	2003d10 <__divdf3+0x754>
 2003e70:	b0ffd636 	bltu	r22,r3,2003dcc <__divdf3+0x810>
 2003e74:	1011883a 	mov	r8,r2
 2003e78:	b0ff341e 	bne	r22,r3,2003b4c <__divdf3+0x590>
 2003e7c:	003f3406 	br	2003b50 <__divdf3+0x594>
 2003e80:	0005883a 	mov	r2,zero
 2003e84:	003fe006 	br	2003e08 <__divdf3+0x84c>
 2003e88:	00800434 	movhi	r2,16
 2003e8c:	89400234 	orhi	r5,r17,8
 2003e90:	10bfffc4 	addi	r2,r2,-1
 2003e94:	b807883a 	mov	r3,r23
 2003e98:	288a703a 	and	r5,r5,r2
 2003e9c:	4025883a 	mov	r18,r8
 2003ea0:	003e8206 	br	20038ac <__divdf3+0x2f0>

02003ea4 <__gedf2>:
 2003ea4:	2804d53a 	srli	r2,r5,20
 2003ea8:	3806d53a 	srli	r3,r7,20
 2003eac:	02000434 	movhi	r8,16
 2003eb0:	423fffc4 	addi	r8,r8,-1
 2003eb4:	1081ffcc 	andi	r2,r2,2047
 2003eb8:	0241ffc4 	movi	r9,2047
 2003ebc:	2a14703a 	and	r10,r5,r8
 2003ec0:	18c1ffcc 	andi	r3,r3,2047
 2003ec4:	3a10703a 	and	r8,r7,r8
 2003ec8:	280ad7fa 	srli	r5,r5,31
 2003ecc:	380ed7fa 	srli	r7,r7,31
 2003ed0:	12401d26 	beq	r2,r9,2003f48 <__gedf2+0xa4>
 2003ed4:	0241ffc4 	movi	r9,2047
 2003ed8:	1a401226 	beq	r3,r9,2003f24 <__gedf2+0x80>
 2003edc:	1000081e 	bne	r2,zero,2003f00 <__gedf2+0x5c>
 2003ee0:	2296b03a 	or	r11,r4,r10
 2003ee4:	5813003a 	cmpeq	r9,r11,zero
 2003ee8:	1800091e 	bne	r3,zero,2003f10 <__gedf2+0x6c>
 2003eec:	3218b03a 	or	r12,r6,r8
 2003ef0:	6000071e 	bne	r12,zero,2003f10 <__gedf2+0x6c>
 2003ef4:	0005883a 	mov	r2,zero
 2003ef8:	5800101e 	bne	r11,zero,2003f3c <__gedf2+0x98>
 2003efc:	f800283a 	ret
 2003f00:	18000c1e 	bne	r3,zero,2003f34 <__gedf2+0x90>
 2003f04:	3212b03a 	or	r9,r6,r8
 2003f08:	48000c26 	beq	r9,zero,2003f3c <__gedf2+0x98>
 2003f0c:	0013883a 	mov	r9,zero
 2003f10:	39c03fcc 	andi	r7,r7,255
 2003f14:	48000826 	beq	r9,zero,2003f38 <__gedf2+0x94>
 2003f18:	38000926 	beq	r7,zero,2003f40 <__gedf2+0x9c>
 2003f1c:	00800044 	movi	r2,1
 2003f20:	f800283a 	ret
 2003f24:	3212b03a 	or	r9,r6,r8
 2003f28:	483fec26 	beq	r9,zero,2003edc <__gedf2+0x38>
 2003f2c:	00bfff84 	movi	r2,-2
 2003f30:	f800283a 	ret
 2003f34:	39c03fcc 	andi	r7,r7,255
 2003f38:	29c00626 	beq	r5,r7,2003f54 <__gedf2+0xb0>
 2003f3c:	283ff726 	beq	r5,zero,2003f1c <__gedf2+0x78>
 2003f40:	00bfffc4 	movi	r2,-1
 2003f44:	f800283a 	ret
 2003f48:	2292b03a 	or	r9,r4,r10
 2003f4c:	483fe126 	beq	r9,zero,2003ed4 <__gedf2+0x30>
 2003f50:	003ff606 	br	2003f2c <__gedf2+0x88>
 2003f54:	18bff916 	blt	r3,r2,2003f3c <__gedf2+0x98>
 2003f58:	10c00316 	blt	r2,r3,2003f68 <__gedf2+0xc4>
 2003f5c:	42bff736 	bltu	r8,r10,2003f3c <__gedf2+0x98>
 2003f60:	52000326 	beq	r10,r8,2003f70 <__gedf2+0xcc>
 2003f64:	5200042e 	bgeu	r10,r8,2003f78 <__gedf2+0xd4>
 2003f68:	283fec1e 	bne	r5,zero,2003f1c <__gedf2+0x78>
 2003f6c:	003ff406 	br	2003f40 <__gedf2+0x9c>
 2003f70:	313ff236 	bltu	r6,r4,2003f3c <__gedf2+0x98>
 2003f74:	21bffc36 	bltu	r4,r6,2003f68 <__gedf2+0xc4>
 2003f78:	0005883a 	mov	r2,zero
 2003f7c:	f800283a 	ret

02003f80 <__ledf2>:
 2003f80:	2804d53a 	srli	r2,r5,20
 2003f84:	3810d53a 	srli	r8,r7,20
 2003f88:	00c00434 	movhi	r3,16
 2003f8c:	18ffffc4 	addi	r3,r3,-1
 2003f90:	1081ffcc 	andi	r2,r2,2047
 2003f94:	0241ffc4 	movi	r9,2047
 2003f98:	28d4703a 	and	r10,r5,r3
 2003f9c:	4201ffcc 	andi	r8,r8,2047
 2003fa0:	38c6703a 	and	r3,r7,r3
 2003fa4:	280ad7fa 	srli	r5,r5,31
 2003fa8:	380ed7fa 	srli	r7,r7,31
 2003fac:	12401f26 	beq	r2,r9,200402c <__ledf2+0xac>
 2003fb0:	0241ffc4 	movi	r9,2047
 2003fb4:	42401426 	beq	r8,r9,2004008 <__ledf2+0x88>
 2003fb8:	1000091e 	bne	r2,zero,2003fe0 <__ledf2+0x60>
 2003fbc:	2296b03a 	or	r11,r4,r10
 2003fc0:	5813003a 	cmpeq	r9,r11,zero
 2003fc4:	29403fcc 	andi	r5,r5,255
 2003fc8:	40000a1e 	bne	r8,zero,2003ff4 <__ledf2+0x74>
 2003fcc:	30d8b03a 	or	r12,r6,r3
 2003fd0:	6000081e 	bne	r12,zero,2003ff4 <__ledf2+0x74>
 2003fd4:	0005883a 	mov	r2,zero
 2003fd8:	5800111e 	bne	r11,zero,2004020 <__ledf2+0xa0>
 2003fdc:	f800283a 	ret
 2003fe0:	29403fcc 	andi	r5,r5,255
 2003fe4:	40000c1e 	bne	r8,zero,2004018 <__ledf2+0x98>
 2003fe8:	30d2b03a 	or	r9,r6,r3
 2003fec:	48000c26 	beq	r9,zero,2004020 <__ledf2+0xa0>
 2003ff0:	0013883a 	mov	r9,zero
 2003ff4:	39c03fcc 	andi	r7,r7,255
 2003ff8:	48000826 	beq	r9,zero,200401c <__ledf2+0x9c>
 2003ffc:	38001126 	beq	r7,zero,2004044 <__ledf2+0xc4>
 2004000:	00800044 	movi	r2,1
 2004004:	f800283a 	ret
 2004008:	30d2b03a 	or	r9,r6,r3
 200400c:	483fea26 	beq	r9,zero,2003fb8 <__ledf2+0x38>
 2004010:	00800084 	movi	r2,2
 2004014:	f800283a 	ret
 2004018:	39c03fcc 	andi	r7,r7,255
 200401c:	39400726 	beq	r7,r5,200403c <__ledf2+0xbc>
 2004020:	2800081e 	bne	r5,zero,2004044 <__ledf2+0xc4>
 2004024:	00800044 	movi	r2,1
 2004028:	f800283a 	ret
 200402c:	2292b03a 	or	r9,r4,r10
 2004030:	483fdf26 	beq	r9,zero,2003fb0 <__ledf2+0x30>
 2004034:	00800084 	movi	r2,2
 2004038:	f800283a 	ret
 200403c:	4080030e 	bge	r8,r2,200404c <__ledf2+0xcc>
 2004040:	383fef26 	beq	r7,zero,2004000 <__ledf2+0x80>
 2004044:	00bfffc4 	movi	r2,-1
 2004048:	f800283a 	ret
 200404c:	123feb16 	blt	r2,r8,2003ffc <__ledf2+0x7c>
 2004050:	1abff336 	bltu	r3,r10,2004020 <__ledf2+0xa0>
 2004054:	50c00326 	beq	r10,r3,2004064 <__ledf2+0xe4>
 2004058:	50c0042e 	bgeu	r10,r3,200406c <__ledf2+0xec>
 200405c:	283fe81e 	bne	r5,zero,2004000 <__ledf2+0x80>
 2004060:	003ff806 	br	2004044 <__ledf2+0xc4>
 2004064:	313fee36 	bltu	r6,r4,2004020 <__ledf2+0xa0>
 2004068:	21bffc36 	bltu	r4,r6,200405c <__ledf2+0xdc>
 200406c:	0005883a 	mov	r2,zero
 2004070:	f800283a 	ret

02004074 <__muldf3>:
 2004074:	defff304 	addi	sp,sp,-52
 2004078:	2804d53a 	srli	r2,r5,20
 200407c:	dd800915 	stw	r22,36(sp)
 2004080:	282cd7fa 	srli	r22,r5,31
 2004084:	dc000315 	stw	r16,12(sp)
 2004088:	04000434 	movhi	r16,16
 200408c:	dd400815 	stw	r21,32(sp)
 2004090:	dc800515 	stw	r18,20(sp)
 2004094:	843fffc4 	addi	r16,r16,-1
 2004098:	dfc00c15 	stw	ra,48(sp)
 200409c:	df000b15 	stw	fp,44(sp)
 20040a0:	ddc00a15 	stw	r23,40(sp)
 20040a4:	dd000715 	stw	r20,28(sp)
 20040a8:	dcc00615 	stw	r19,24(sp)
 20040ac:	dc400415 	stw	r17,16(sp)
 20040b0:	1481ffcc 	andi	r18,r2,2047
 20040b4:	2c20703a 	and	r16,r5,r16
 20040b8:	b02b883a 	mov	r21,r22
 20040bc:	b2403fcc 	andi	r9,r22,255
 20040c0:	90006026 	beq	r18,zero,2004244 <__muldf3+0x1d0>
 20040c4:	0081ffc4 	movi	r2,2047
 20040c8:	2029883a 	mov	r20,r4
 20040cc:	90803626 	beq	r18,r2,20041a8 <__muldf3+0x134>
 20040d0:	80800434 	orhi	r2,r16,16
 20040d4:	100490fa 	slli	r2,r2,3
 20040d8:	2020d77a 	srli	r16,r4,29
 20040dc:	202890fa 	slli	r20,r4,3
 20040e0:	94bf0044 	addi	r18,r18,-1023
 20040e4:	80a0b03a 	or	r16,r16,r2
 20040e8:	0027883a 	mov	r19,zero
 20040ec:	0039883a 	mov	fp,zero
 20040f0:	3804d53a 	srli	r2,r7,20
 20040f4:	382ed7fa 	srli	r23,r7,31
 20040f8:	04400434 	movhi	r17,16
 20040fc:	8c7fffc4 	addi	r17,r17,-1
 2004100:	1081ffcc 	andi	r2,r2,2047
 2004104:	3011883a 	mov	r8,r6
 2004108:	3c62703a 	and	r17,r7,r17
 200410c:	ba803fcc 	andi	r10,r23,255
 2004110:	10006d26 	beq	r2,zero,20042c8 <__muldf3+0x254>
 2004114:	00c1ffc4 	movi	r3,2047
 2004118:	10c06526 	beq	r2,r3,20042b0 <__muldf3+0x23c>
 200411c:	88c00434 	orhi	r3,r17,16
 2004120:	180690fa 	slli	r3,r3,3
 2004124:	3022d77a 	srli	r17,r6,29
 2004128:	301090fa 	slli	r8,r6,3
 200412c:	10bf0044 	addi	r2,r2,-1023
 2004130:	88e2b03a 	or	r17,r17,r3
 2004134:	000b883a 	mov	r5,zero
 2004138:	9085883a 	add	r2,r18,r2
 200413c:	2cc8b03a 	or	r4,r5,r19
 2004140:	00c003c4 	movi	r3,15
 2004144:	bdacf03a 	xor	r22,r23,r22
 2004148:	12c00044 	addi	r11,r2,1
 200414c:	19009936 	bltu	r3,r4,20043b4 <__muldf3+0x340>
 2004150:	200890ba 	slli	r4,r4,2
 2004154:	00c08034 	movhi	r3,512
 2004158:	18d05a04 	addi	r3,r3,16744
 200415c:	20c9883a 	add	r4,r4,r3
 2004160:	20c00017 	ldw	r3,0(r4)
 2004164:	1800683a 	jmp	r3
 2004168:	020043b4 	movhi	r8,270
 200416c:	020041c8 	cmpgei	r8,zero,263
 2004170:	020041c8 	cmpgei	r8,zero,263
 2004174:	020041c4 	movi	r8,263
 2004178:	02004390 	cmplti	r8,zero,270
 200417c:	02004390 	cmplti	r8,zero,270
 2004180:	02004378 	rdprs	r8,zero,269
 2004184:	020041c4 	movi	r8,263
 2004188:	02004390 	cmplti	r8,zero,270
 200418c:	02004378 	rdprs	r8,zero,269
 2004190:	02004390 	cmplti	r8,zero,270
 2004194:	020041c4 	movi	r8,263
 2004198:	020043a0 	cmpeqi	r8,zero,270
 200419c:	020043a0 	cmpeqi	r8,zero,270
 20041a0:	020043a0 	cmpeqi	r8,zero,270
 20041a4:	020045bc 	xorhi	r8,zero,278
 20041a8:	2404b03a 	or	r2,r4,r16
 20041ac:	10006f1e 	bne	r2,zero,200436c <__muldf3+0x2f8>
 20041b0:	04c00204 	movi	r19,8
 20041b4:	0021883a 	mov	r16,zero
 20041b8:	0029883a 	mov	r20,zero
 20041bc:	07000084 	movi	fp,2
 20041c0:	003fcb06 	br	20040f0 <__muldf3+0x7c>
 20041c4:	502d883a 	mov	r22,r10
 20041c8:	00800084 	movi	r2,2
 20041cc:	28805726 	beq	r5,r2,200432c <__muldf3+0x2b8>
 20041d0:	008000c4 	movi	r2,3
 20041d4:	28816626 	beq	r5,r2,2004770 <__muldf3+0x6fc>
 20041d8:	00800044 	movi	r2,1
 20041dc:	2881411e 	bne	r5,r2,20046e4 <__muldf3+0x670>
 20041e0:	b02b883a 	mov	r21,r22
 20041e4:	0005883a 	mov	r2,zero
 20041e8:	000b883a 	mov	r5,zero
 20041ec:	0029883a 	mov	r20,zero
 20041f0:	1004953a 	slli	r2,r2,20
 20041f4:	a8c03fcc 	andi	r3,r21,255
 20041f8:	04400434 	movhi	r17,16
 20041fc:	8c7fffc4 	addi	r17,r17,-1
 2004200:	180697fa 	slli	r3,r3,31
 2004204:	2c4a703a 	and	r5,r5,r17
 2004208:	288ab03a 	or	r5,r5,r2
 200420c:	28c6b03a 	or	r3,r5,r3
 2004210:	a005883a 	mov	r2,r20
 2004214:	dfc00c17 	ldw	ra,48(sp)
 2004218:	df000b17 	ldw	fp,44(sp)
 200421c:	ddc00a17 	ldw	r23,40(sp)
 2004220:	dd800917 	ldw	r22,36(sp)
 2004224:	dd400817 	ldw	r21,32(sp)
 2004228:	dd000717 	ldw	r20,28(sp)
 200422c:	dcc00617 	ldw	r19,24(sp)
 2004230:	dc800517 	ldw	r18,20(sp)
 2004234:	dc400417 	ldw	r17,16(sp)
 2004238:	dc000317 	ldw	r16,12(sp)
 200423c:	dec00d04 	addi	sp,sp,52
 2004240:	f800283a 	ret
 2004244:	2404b03a 	or	r2,r4,r16
 2004248:	2027883a 	mov	r19,r4
 200424c:	10004226 	beq	r2,zero,2004358 <__muldf3+0x2e4>
 2004250:	8000fc26 	beq	r16,zero,2004644 <__muldf3+0x5d0>
 2004254:	8009883a 	mov	r4,r16
 2004258:	d9800215 	stw	r6,8(sp)
 200425c:	d9c00015 	stw	r7,0(sp)
 2004260:	da400115 	stw	r9,4(sp)
 2004264:	2004a440 	call	2004a44 <__clzsi2>
 2004268:	d9800217 	ldw	r6,8(sp)
 200426c:	d9c00017 	ldw	r7,0(sp)
 2004270:	da400117 	ldw	r9,4(sp)
 2004274:	113ffd44 	addi	r4,r2,-11
 2004278:	00c00704 	movi	r3,28
 200427c:	1900ed16 	blt	r3,r4,2004634 <__muldf3+0x5c0>
 2004280:	00c00744 	movi	r3,29
 2004284:	147ffe04 	addi	r17,r2,-8
 2004288:	1907c83a 	sub	r3,r3,r4
 200428c:	8460983a 	sll	r16,r16,r17
 2004290:	98c6d83a 	srl	r3,r19,r3
 2004294:	9c68983a 	sll	r20,r19,r17
 2004298:	1c20b03a 	or	r16,r3,r16
 200429c:	1080fcc4 	addi	r2,r2,1011
 20042a0:	00a5c83a 	sub	r18,zero,r2
 20042a4:	0027883a 	mov	r19,zero
 20042a8:	0039883a 	mov	fp,zero
 20042ac:	003f9006 	br	20040f0 <__muldf3+0x7c>
 20042b0:	3446b03a 	or	r3,r6,r17
 20042b4:	1800261e 	bne	r3,zero,2004350 <__muldf3+0x2dc>
 20042b8:	0023883a 	mov	r17,zero
 20042bc:	0011883a 	mov	r8,zero
 20042c0:	01400084 	movi	r5,2
 20042c4:	003f9c06 	br	2004138 <__muldf3+0xc4>
 20042c8:	3446b03a 	or	r3,r6,r17
 20042cc:	18001c26 	beq	r3,zero,2004340 <__muldf3+0x2cc>
 20042d0:	8800ce26 	beq	r17,zero,200460c <__muldf3+0x598>
 20042d4:	8809883a 	mov	r4,r17
 20042d8:	d9800215 	stw	r6,8(sp)
 20042dc:	da400115 	stw	r9,4(sp)
 20042e0:	da800015 	stw	r10,0(sp)
 20042e4:	2004a440 	call	2004a44 <__clzsi2>
 20042e8:	d9800217 	ldw	r6,8(sp)
 20042ec:	da400117 	ldw	r9,4(sp)
 20042f0:	da800017 	ldw	r10,0(sp)
 20042f4:	113ffd44 	addi	r4,r2,-11
 20042f8:	00c00704 	movi	r3,28
 20042fc:	1900bf16 	blt	r3,r4,20045fc <__muldf3+0x588>
 2004300:	00c00744 	movi	r3,29
 2004304:	123ffe04 	addi	r8,r2,-8
 2004308:	1907c83a 	sub	r3,r3,r4
 200430c:	8a22983a 	sll	r17,r17,r8
 2004310:	30c6d83a 	srl	r3,r6,r3
 2004314:	3210983a 	sll	r8,r6,r8
 2004318:	1c62b03a 	or	r17,r3,r17
 200431c:	1080fcc4 	addi	r2,r2,1011
 2004320:	0085c83a 	sub	r2,zero,r2
 2004324:	000b883a 	mov	r5,zero
 2004328:	003f8306 	br	2004138 <__muldf3+0xc4>
 200432c:	b02b883a 	mov	r21,r22
 2004330:	0081ffc4 	movi	r2,2047
 2004334:	000b883a 	mov	r5,zero
 2004338:	0029883a 	mov	r20,zero
 200433c:	003fac06 	br	20041f0 <__muldf3+0x17c>
 2004340:	0023883a 	mov	r17,zero
 2004344:	0011883a 	mov	r8,zero
 2004348:	01400044 	movi	r5,1
 200434c:	003f7a06 	br	2004138 <__muldf3+0xc4>
 2004350:	014000c4 	movi	r5,3
 2004354:	003f7806 	br	2004138 <__muldf3+0xc4>
 2004358:	04c00104 	movi	r19,4
 200435c:	0021883a 	mov	r16,zero
 2004360:	0029883a 	mov	r20,zero
 2004364:	07000044 	movi	fp,1
 2004368:	003f6106 	br	20040f0 <__muldf3+0x7c>
 200436c:	04c00304 	movi	r19,12
 2004370:	070000c4 	movi	fp,3
 2004374:	003f5e06 	br	20040f0 <__muldf3+0x7c>
 2004378:	01400434 	movhi	r5,16
 200437c:	002b883a 	mov	r21,zero
 2004380:	297fffc4 	addi	r5,r5,-1
 2004384:	053fffc4 	movi	r20,-1
 2004388:	0081ffc4 	movi	r2,2047
 200438c:	003f9806 	br	20041f0 <__muldf3+0x17c>
 2004390:	8023883a 	mov	r17,r16
 2004394:	a011883a 	mov	r8,r20
 2004398:	e00b883a 	mov	r5,fp
 200439c:	003f8a06 	br	20041c8 <__muldf3+0x154>
 20043a0:	8023883a 	mov	r17,r16
 20043a4:	a011883a 	mov	r8,r20
 20043a8:	482d883a 	mov	r22,r9
 20043ac:	e00b883a 	mov	r5,fp
 20043b0:	003f8506 	br	20041c8 <__muldf3+0x154>
 20043b4:	a00ad43a 	srli	r5,r20,16
 20043b8:	401ad43a 	srli	r13,r8,16
 20043bc:	a53fffcc 	andi	r20,r20,65535
 20043c0:	423fffcc 	andi	r8,r8,65535
 20043c4:	4519383a 	mul	r12,r8,r20
 20043c8:	4147383a 	mul	r3,r8,r5
 20043cc:	6d09383a 	mul	r4,r13,r20
 20043d0:	600cd43a 	srli	r6,r12,16
 20043d4:	2b5d383a 	mul	r14,r5,r13
 20043d8:	20c9883a 	add	r4,r4,r3
 20043dc:	310d883a 	add	r6,r6,r4
 20043e0:	30c0022e 	bgeu	r6,r3,20043ec <__muldf3+0x378>
 20043e4:	00c00074 	movhi	r3,1
 20043e8:	70dd883a 	add	r14,r14,r3
 20043ec:	8826d43a 	srli	r19,r17,16
 20043f0:	8bffffcc 	andi	r15,r17,65535
 20043f4:	7d23383a 	mul	r17,r15,r20
 20043f8:	7949383a 	mul	r4,r15,r5
 20043fc:	9d29383a 	mul	r20,r19,r20
 2004400:	8814d43a 	srli	r10,r17,16
 2004404:	3012943a 	slli	r9,r6,16
 2004408:	a129883a 	add	r20,r20,r4
 200440c:	633fffcc 	andi	r12,r12,65535
 2004410:	5515883a 	add	r10,r10,r20
 2004414:	3006d43a 	srli	r3,r6,16
 2004418:	4b13883a 	add	r9,r9,r12
 200441c:	2ccb383a 	mul	r5,r5,r19
 2004420:	5100022e 	bgeu	r10,r4,200442c <__muldf3+0x3b8>
 2004424:	01000074 	movhi	r4,1
 2004428:	290b883a 	add	r5,r5,r4
 200442c:	802ad43a 	srli	r21,r16,16
 2004430:	843fffcc 	andi	r16,r16,65535
 2004434:	440d383a 	mul	r6,r8,r16
 2004438:	4565383a 	mul	r18,r8,r21
 200443c:	8349383a 	mul	r4,r16,r13
 2004440:	500e943a 	slli	r7,r10,16
 2004444:	3010d43a 	srli	r8,r6,16
 2004448:	5028d43a 	srli	r20,r10,16
 200444c:	2489883a 	add	r4,r4,r18
 2004450:	8abfffcc 	andi	r10,r17,65535
 2004454:	3a95883a 	add	r10,r7,r10
 2004458:	4119883a 	add	r12,r8,r4
 200445c:	a169883a 	add	r20,r20,r5
 2004460:	1a87883a 	add	r3,r3,r10
 2004464:	6d5b383a 	mul	r13,r13,r21
 2004468:	6480022e 	bgeu	r12,r18,2004474 <__muldf3+0x400>
 200446c:	01000074 	movhi	r4,1
 2004470:	691b883a 	add	r13,r13,r4
 2004474:	7c25383a 	mul	r18,r15,r16
 2004478:	7d4b383a 	mul	r5,r15,r21
 200447c:	84cf383a 	mul	r7,r16,r19
 2004480:	901ed43a 	srli	r15,r18,16
 2004484:	6008d43a 	srli	r4,r12,16
 2004488:	6010943a 	slli	r8,r12,16
 200448c:	394f883a 	add	r7,r7,r5
 2004490:	333fffcc 	andi	r12,r6,65535
 2004494:	79df883a 	add	r15,r15,r7
 2004498:	235b883a 	add	r13,r4,r13
 200449c:	9d63383a 	mul	r17,r19,r21
 20044a0:	4309883a 	add	r4,r8,r12
 20044a4:	7940022e 	bgeu	r15,r5,20044b0 <__muldf3+0x43c>
 20044a8:	01400074 	movhi	r5,1
 20044ac:	8963883a 	add	r17,r17,r5
 20044b0:	780a943a 	slli	r5,r15,16
 20044b4:	91bfffcc 	andi	r6,r18,65535
 20044b8:	70c7883a 	add	r3,r14,r3
 20044bc:	298d883a 	add	r6,r5,r6
 20044c0:	1a8f803a 	cmpltu	r7,r3,r10
 20044c4:	350b883a 	add	r5,r6,r20
 20044c8:	20c7883a 	add	r3,r4,r3
 20044cc:	3955883a 	add	r10,r7,r5
 20044d0:	1909803a 	cmpltu	r4,r3,r4
 20044d4:	6a91883a 	add	r8,r13,r10
 20044d8:	780cd43a 	srli	r6,r15,16
 20044dc:	2219883a 	add	r12,r4,r8
 20044e0:	2d0b803a 	cmpltu	r5,r5,r20
 20044e4:	51cf803a 	cmpltu	r7,r10,r7
 20044e8:	29ceb03a 	or	r7,r5,r7
 20044ec:	4351803a 	cmpltu	r8,r8,r13
 20044f0:	610b803a 	cmpltu	r5,r12,r4
 20044f4:	4148b03a 	or	r4,r8,r5
 20044f8:	398f883a 	add	r7,r7,r6
 20044fc:	3909883a 	add	r4,r7,r4
 2004500:	1810927a 	slli	r8,r3,9
 2004504:	2449883a 	add	r4,r4,r17
 2004508:	2008927a 	slli	r4,r4,9
 200450c:	6022d5fa 	srli	r17,r12,23
 2004510:	1806d5fa 	srli	r3,r3,23
 2004514:	4252b03a 	or	r9,r8,r9
 2004518:	600a927a 	slli	r5,r12,9
 200451c:	4810c03a 	cmpne	r8,r9,zero
 2004520:	2462b03a 	or	r17,r4,r17
 2004524:	40c6b03a 	or	r3,r8,r3
 2004528:	8900402c 	andhi	r4,r17,256
 200452c:	1950b03a 	or	r8,r3,r5
 2004530:	20000726 	beq	r4,zero,2004550 <__muldf3+0x4dc>
 2004534:	4006d07a 	srli	r3,r8,1
 2004538:	880497fa 	slli	r2,r17,31
 200453c:	4200004c 	andi	r8,r8,1
 2004540:	8822d07a 	srli	r17,r17,1
 2004544:	1a10b03a 	or	r8,r3,r8
 2004548:	1210b03a 	or	r8,r2,r8
 200454c:	5805883a 	mov	r2,r11
 2004550:	1140ffc4 	addi	r5,r2,1023
 2004554:	0140440e 	bge	zero,r5,2004668 <__muldf3+0x5f4>
 2004558:	40c001cc 	andi	r3,r8,7
 200455c:	18000726 	beq	r3,zero,200457c <__muldf3+0x508>
 2004560:	40c003cc 	andi	r3,r8,15
 2004564:	01000104 	movi	r4,4
 2004568:	19000426 	beq	r3,r4,200457c <__muldf3+0x508>
 200456c:	4107883a 	add	r3,r8,r4
 2004570:	1a11803a 	cmpltu	r8,r3,r8
 2004574:	8a23883a 	add	r17,r17,r8
 2004578:	1811883a 	mov	r8,r3
 200457c:	88c0402c 	andhi	r3,r17,256
 2004580:	18000426 	beq	r3,zero,2004594 <__muldf3+0x520>
 2004584:	11410004 	addi	r5,r2,1024
 2004588:	00bfc034 	movhi	r2,65280
 200458c:	10bfffc4 	addi	r2,r2,-1
 2004590:	88a2703a 	and	r17,r17,r2
 2004594:	0081ff84 	movi	r2,2046
 2004598:	117f6416 	blt	r2,r5,200432c <__muldf3+0x2b8>
 200459c:	8828977a 	slli	r20,r17,29
 20045a0:	4010d0fa 	srli	r8,r8,3
 20045a4:	8822927a 	slli	r17,r17,9
 20045a8:	2881ffcc 	andi	r2,r5,2047
 20045ac:	a228b03a 	or	r20,r20,r8
 20045b0:	880ad33a 	srli	r5,r17,12
 20045b4:	b02b883a 	mov	r21,r22
 20045b8:	003f0d06 	br	20041f0 <__muldf3+0x17c>
 20045bc:	8080022c 	andhi	r2,r16,8
 20045c0:	10000926 	beq	r2,zero,20045e8 <__muldf3+0x574>
 20045c4:	8880022c 	andhi	r2,r17,8
 20045c8:	1000071e 	bne	r2,zero,20045e8 <__muldf3+0x574>
 20045cc:	00800434 	movhi	r2,16
 20045d0:	89400234 	orhi	r5,r17,8
 20045d4:	10bfffc4 	addi	r2,r2,-1
 20045d8:	b82b883a 	mov	r21,r23
 20045dc:	288a703a 	and	r5,r5,r2
 20045e0:	4029883a 	mov	r20,r8
 20045e4:	003f6806 	br	2004388 <__muldf3+0x314>
 20045e8:	00800434 	movhi	r2,16
 20045ec:	81400234 	orhi	r5,r16,8
 20045f0:	10bfffc4 	addi	r2,r2,-1
 20045f4:	288a703a 	and	r5,r5,r2
 20045f8:	003f6306 	br	2004388 <__muldf3+0x314>
 20045fc:	147ff604 	addi	r17,r2,-40
 2004600:	3462983a 	sll	r17,r6,r17
 2004604:	0011883a 	mov	r8,zero
 2004608:	003f4406 	br	200431c <__muldf3+0x2a8>
 200460c:	3009883a 	mov	r4,r6
 2004610:	d9800215 	stw	r6,8(sp)
 2004614:	da400115 	stw	r9,4(sp)
 2004618:	da800015 	stw	r10,0(sp)
 200461c:	2004a440 	call	2004a44 <__clzsi2>
 2004620:	10800804 	addi	r2,r2,32
 2004624:	da800017 	ldw	r10,0(sp)
 2004628:	da400117 	ldw	r9,4(sp)
 200462c:	d9800217 	ldw	r6,8(sp)
 2004630:	003f3006 	br	20042f4 <__muldf3+0x280>
 2004634:	143ff604 	addi	r16,r2,-40
 2004638:	9c20983a 	sll	r16,r19,r16
 200463c:	0029883a 	mov	r20,zero
 2004640:	003f1606 	br	200429c <__muldf3+0x228>
 2004644:	d9800215 	stw	r6,8(sp)
 2004648:	d9c00015 	stw	r7,0(sp)
 200464c:	da400115 	stw	r9,4(sp)
 2004650:	2004a440 	call	2004a44 <__clzsi2>
 2004654:	10800804 	addi	r2,r2,32
 2004658:	da400117 	ldw	r9,4(sp)
 200465c:	d9c00017 	ldw	r7,0(sp)
 2004660:	d9800217 	ldw	r6,8(sp)
 2004664:	003f0306 	br	2004274 <__muldf3+0x200>
 2004668:	00c00044 	movi	r3,1
 200466c:	1947c83a 	sub	r3,r3,r5
 2004670:	00800e04 	movi	r2,56
 2004674:	10feda16 	blt	r2,r3,20041e0 <__muldf3+0x16c>
 2004678:	008007c4 	movi	r2,31
 200467c:	10c01b16 	blt	r2,r3,20046ec <__muldf3+0x678>
 2004680:	00800804 	movi	r2,32
 2004684:	10c5c83a 	sub	r2,r2,r3
 2004688:	888a983a 	sll	r5,r17,r2
 200468c:	40c8d83a 	srl	r4,r8,r3
 2004690:	4084983a 	sll	r2,r8,r2
 2004694:	88e2d83a 	srl	r17,r17,r3
 2004698:	2906b03a 	or	r3,r5,r4
 200469c:	1004c03a 	cmpne	r2,r2,zero
 20046a0:	1886b03a 	or	r3,r3,r2
 20046a4:	188001cc 	andi	r2,r3,7
 20046a8:	10000726 	beq	r2,zero,20046c8 <__muldf3+0x654>
 20046ac:	188003cc 	andi	r2,r3,15
 20046b0:	01000104 	movi	r4,4
 20046b4:	11000426 	beq	r2,r4,20046c8 <__muldf3+0x654>
 20046b8:	1805883a 	mov	r2,r3
 20046bc:	10c00104 	addi	r3,r2,4
 20046c0:	1885803a 	cmpltu	r2,r3,r2
 20046c4:	88a3883a 	add	r17,r17,r2
 20046c8:	8880202c 	andhi	r2,r17,128
 20046cc:	10001c26 	beq	r2,zero,2004740 <__muldf3+0x6cc>
 20046d0:	b02b883a 	mov	r21,r22
 20046d4:	00800044 	movi	r2,1
 20046d8:	000b883a 	mov	r5,zero
 20046dc:	0029883a 	mov	r20,zero
 20046e0:	003ec306 	br	20041f0 <__muldf3+0x17c>
 20046e4:	5805883a 	mov	r2,r11
 20046e8:	003f9906 	br	2004550 <__muldf3+0x4dc>
 20046ec:	00bff844 	movi	r2,-31
 20046f0:	1145c83a 	sub	r2,r2,r5
 20046f4:	8888d83a 	srl	r4,r17,r2
 20046f8:	00800804 	movi	r2,32
 20046fc:	18801a26 	beq	r3,r2,2004768 <__muldf3+0x6f4>
 2004700:	00801004 	movi	r2,64
 2004704:	10c5c83a 	sub	r2,r2,r3
 2004708:	8884983a 	sll	r2,r17,r2
 200470c:	1204b03a 	or	r2,r2,r8
 2004710:	1004c03a 	cmpne	r2,r2,zero
 2004714:	2084b03a 	or	r2,r4,r2
 2004718:	144001cc 	andi	r17,r2,7
 200471c:	88000d1e 	bne	r17,zero,2004754 <__muldf3+0x6e0>
 2004720:	000b883a 	mov	r5,zero
 2004724:	1028d0fa 	srli	r20,r2,3
 2004728:	b02b883a 	mov	r21,r22
 200472c:	0005883a 	mov	r2,zero
 2004730:	a468b03a 	or	r20,r20,r17
 2004734:	003eae06 	br	20041f0 <__muldf3+0x17c>
 2004738:	1007883a 	mov	r3,r2
 200473c:	0023883a 	mov	r17,zero
 2004740:	880a927a 	slli	r5,r17,9
 2004744:	1805883a 	mov	r2,r3
 2004748:	8822977a 	slli	r17,r17,29
 200474c:	280ad33a 	srli	r5,r5,12
 2004750:	003ff406 	br	2004724 <__muldf3+0x6b0>
 2004754:	10c003cc 	andi	r3,r2,15
 2004758:	01000104 	movi	r4,4
 200475c:	193ff626 	beq	r3,r4,2004738 <__muldf3+0x6c4>
 2004760:	0023883a 	mov	r17,zero
 2004764:	003fd506 	br	20046bc <__muldf3+0x648>
 2004768:	0005883a 	mov	r2,zero
 200476c:	003fe706 	br	200470c <__muldf3+0x698>
 2004770:	00800434 	movhi	r2,16
 2004774:	89400234 	orhi	r5,r17,8
 2004778:	10bfffc4 	addi	r2,r2,-1
 200477c:	b02b883a 	mov	r21,r22
 2004780:	288a703a 	and	r5,r5,r2
 2004784:	4029883a 	mov	r20,r8
 2004788:	003eff06 	br	2004388 <__muldf3+0x314>

0200478c <__extendsfdf2>:
 200478c:	200ad5fa 	srli	r5,r4,23
 2004790:	defffd04 	addi	sp,sp,-12
 2004794:	dc400115 	stw	r17,4(sp)
 2004798:	29403fcc 	andi	r5,r5,255
 200479c:	29800044 	addi	r6,r5,1
 20047a0:	04402034 	movhi	r17,128
 20047a4:	dc000015 	stw	r16,0(sp)
 20047a8:	8c7fffc4 	addi	r17,r17,-1
 20047ac:	dfc00215 	stw	ra,8(sp)
 20047b0:	31803fcc 	andi	r6,r6,255
 20047b4:	00800044 	movi	r2,1
 20047b8:	8922703a 	and	r17,r17,r4
 20047bc:	2020d7fa 	srli	r16,r4,31
 20047c0:	1180110e 	bge	r2,r6,2004808 <__extendsfdf2+0x7c>
 20047c4:	880cd0fa 	srli	r6,r17,3
 20047c8:	8822977a 	slli	r17,r17,29
 20047cc:	2940e004 	addi	r5,r5,896
 20047d0:	2941ffcc 	andi	r5,r5,2047
 20047d4:	2804953a 	slli	r2,r5,20
 20047d8:	01400434 	movhi	r5,16
 20047dc:	800697fa 	slli	r3,r16,31
 20047e0:	297fffc4 	addi	r5,r5,-1
 20047e4:	314a703a 	and	r5,r6,r5
 20047e8:	288ab03a 	or	r5,r5,r2
 20047ec:	28c6b03a 	or	r3,r5,r3
 20047f0:	8805883a 	mov	r2,r17
 20047f4:	dfc00217 	ldw	ra,8(sp)
 20047f8:	dc400117 	ldw	r17,4(sp)
 20047fc:	dc000017 	ldw	r16,0(sp)
 2004800:	dec00304 	addi	sp,sp,12
 2004804:	f800283a 	ret
 2004808:	2800111e 	bne	r5,zero,2004850 <__extendsfdf2+0xc4>
 200480c:	88001c26 	beq	r17,zero,2004880 <__extendsfdf2+0xf4>
 2004810:	8809883a 	mov	r4,r17
 2004814:	2004a440 	call	2004a44 <__clzsi2>
 2004818:	00c00284 	movi	r3,10
 200481c:	18801b16 	blt	r3,r2,200488c <__extendsfdf2+0x100>
 2004820:	018002c4 	movi	r6,11
 2004824:	308dc83a 	sub	r6,r6,r2
 2004828:	11000544 	addi	r4,r2,21
 200482c:	8986d83a 	srl	r3,r17,r6
 2004830:	8922983a 	sll	r17,r17,r4
 2004834:	0180e244 	movi	r6,905
 2004838:	01400434 	movhi	r5,16
 200483c:	3085c83a 	sub	r2,r6,r2
 2004840:	297fffc4 	addi	r5,r5,-1
 2004844:	194c703a 	and	r6,r3,r5
 2004848:	1141ffcc 	andi	r5,r2,2047
 200484c:	003fe006 	br	20047d0 <__extendsfdf2+0x44>
 2004850:	88000826 	beq	r17,zero,2004874 <__extendsfdf2+0xe8>
 2004854:	880cd0fa 	srli	r6,r17,3
 2004858:	00800434 	movhi	r2,16
 200485c:	10bfffc4 	addi	r2,r2,-1
 2004860:	31800234 	orhi	r6,r6,8
 2004864:	8822977a 	slli	r17,r17,29
 2004868:	308c703a 	and	r6,r6,r2
 200486c:	0141ffc4 	movi	r5,2047
 2004870:	003fd706 	br	20047d0 <__extendsfdf2+0x44>
 2004874:	0141ffc4 	movi	r5,2047
 2004878:	000d883a 	mov	r6,zero
 200487c:	003fd406 	br	20047d0 <__extendsfdf2+0x44>
 2004880:	000b883a 	mov	r5,zero
 2004884:	000d883a 	mov	r6,zero
 2004888:	003fd106 	br	20047d0 <__extendsfdf2+0x44>
 200488c:	11bffd44 	addi	r6,r2,-11
 2004890:	8986983a 	sll	r3,r17,r6
 2004894:	0023883a 	mov	r17,zero
 2004898:	003fe606 	br	2004834 <__extendsfdf2+0xa8>

0200489c <__truncdfsf2>:
 200489c:	2810d53a 	srli	r8,r5,20
 20048a0:	01c00434 	movhi	r7,16
 20048a4:	39ffffc4 	addi	r7,r7,-1
 20048a8:	29ce703a 	and	r7,r5,r7
 20048ac:	4201ffcc 	andi	r8,r8,2047
 20048b0:	380e90fa 	slli	r7,r7,3
 20048b4:	200cd77a 	srli	r6,r4,29
 20048b8:	42400044 	addi	r9,r8,1
 20048bc:	4a41ffcc 	andi	r9,r9,2047
 20048c0:	00c00044 	movi	r3,1
 20048c4:	280ad7fa 	srli	r5,r5,31
 20048c8:	31ceb03a 	or	r7,r6,r7
 20048cc:	200490fa 	slli	r2,r4,3
 20048d0:	1a40230e 	bge	r3,r9,2004960 <__truncdfsf2+0xc4>
 20048d4:	40ff2004 	addi	r3,r8,-896
 20048d8:	01803f84 	movi	r6,254
 20048dc:	30c01516 	blt	r6,r3,2004934 <__truncdfsf2+0x98>
 20048e0:	00c0380e 	bge	zero,r3,20049c4 <__truncdfsf2+0x128>
 20048e4:	200c91ba 	slli	r6,r4,6
 20048e8:	380e90fa 	slli	r7,r7,3
 20048ec:	1004d77a 	srli	r2,r2,29
 20048f0:	300cc03a 	cmpne	r6,r6,zero
 20048f4:	31ccb03a 	or	r6,r6,r7
 20048f8:	308cb03a 	or	r6,r6,r2
 20048fc:	308001cc 	andi	r2,r6,7
 2004900:	10000426 	beq	r2,zero,2004914 <__truncdfsf2+0x78>
 2004904:	308003cc 	andi	r2,r6,15
 2004908:	01000104 	movi	r4,4
 200490c:	11000126 	beq	r2,r4,2004914 <__truncdfsf2+0x78>
 2004910:	31800104 	addi	r6,r6,4
 2004914:	3081002c 	andhi	r2,r6,1024
 2004918:	10001626 	beq	r2,zero,2004974 <__truncdfsf2+0xd8>
 200491c:	18c00044 	addi	r3,r3,1
 2004920:	00803fc4 	movi	r2,255
 2004924:	18800326 	beq	r3,r2,2004934 <__truncdfsf2+0x98>
 2004928:	300c91ba 	slli	r6,r6,6
 200492c:	300cd27a 	srli	r6,r6,9
 2004930:	00000206 	br	200493c <__truncdfsf2+0xa0>
 2004934:	00ffffc4 	movi	r3,-1
 2004938:	000d883a 	mov	r6,zero
 200493c:	18c03fcc 	andi	r3,r3,255
 2004940:	180895fa 	slli	r4,r3,23
 2004944:	00c02034 	movhi	r3,128
 2004948:	280a97fa 	slli	r5,r5,31
 200494c:	18ffffc4 	addi	r3,r3,-1
 2004950:	30c6703a 	and	r3,r6,r3
 2004954:	1906b03a 	or	r3,r3,r4
 2004958:	1944b03a 	or	r2,r3,r5
 200495c:	f800283a 	ret
 2004960:	40000b1e 	bne	r8,zero,2004990 <__truncdfsf2+0xf4>
 2004964:	388cb03a 	or	r6,r7,r2
 2004968:	0007883a 	mov	r3,zero
 200496c:	30000426 	beq	r6,zero,2004980 <__truncdfsf2+0xe4>
 2004970:	01800144 	movi	r6,5
 2004974:	00803fc4 	movi	r2,255
 2004978:	300cd0fa 	srli	r6,r6,3
 200497c:	18800a26 	beq	r3,r2,20049a8 <__truncdfsf2+0x10c>
 2004980:	00802034 	movhi	r2,128
 2004984:	10bfffc4 	addi	r2,r2,-1
 2004988:	308c703a 	and	r6,r6,r2
 200498c:	003feb06 	br	200493c <__truncdfsf2+0xa0>
 2004990:	3888b03a 	or	r4,r7,r2
 2004994:	203fe726 	beq	r4,zero,2004934 <__truncdfsf2+0x98>
 2004998:	380c90fa 	slli	r6,r7,3
 200499c:	00c03fc4 	movi	r3,255
 20049a0:	31808034 	orhi	r6,r6,512
 20049a4:	003fd506 	br	20048fc <__truncdfsf2+0x60>
 20049a8:	303fe226 	beq	r6,zero,2004934 <__truncdfsf2+0x98>
 20049ac:	00802034 	movhi	r2,128
 20049b0:	31801034 	orhi	r6,r6,64
 20049b4:	10bfffc4 	addi	r2,r2,-1
 20049b8:	00ffffc4 	movi	r3,-1
 20049bc:	308c703a 	and	r6,r6,r2
 20049c0:	003fde06 	br	200493c <__truncdfsf2+0xa0>
 20049c4:	013ffa44 	movi	r4,-23
 20049c8:	19000e16 	blt	r3,r4,2004a04 <__truncdfsf2+0x168>
 20049cc:	01000784 	movi	r4,30
 20049d0:	20c9c83a 	sub	r4,r4,r3
 20049d4:	018007c4 	movi	r6,31
 20049d8:	39c02034 	orhi	r7,r7,128
 20049dc:	31000b16 	blt	r6,r4,2004a0c <__truncdfsf2+0x170>
 20049e0:	423f2084 	addi	r8,r8,-894
 20049e4:	120c983a 	sll	r6,r2,r8
 20049e8:	3a0e983a 	sll	r7,r7,r8
 20049ec:	1104d83a 	srl	r2,r2,r4
 20049f0:	300cc03a 	cmpne	r6,r6,zero
 20049f4:	31ceb03a 	or	r7,r6,r7
 20049f8:	388cb03a 	or	r6,r7,r2
 20049fc:	0007883a 	mov	r3,zero
 2004a00:	003fbe06 	br	20048fc <__truncdfsf2+0x60>
 2004a04:	0007883a 	mov	r3,zero
 2004a08:	003fd906 	br	2004970 <__truncdfsf2+0xd4>
 2004a0c:	01bfff84 	movi	r6,-2
 2004a10:	30cdc83a 	sub	r6,r6,r3
 2004a14:	00c00804 	movi	r3,32
 2004a18:	398cd83a 	srl	r6,r7,r6
 2004a1c:	20c00726 	beq	r4,r3,2004a3c <__truncdfsf2+0x1a0>
 2004a20:	423f2884 	addi	r8,r8,-862
 2004a24:	3a0e983a 	sll	r7,r7,r8
 2004a28:	3884b03a 	or	r2,r7,r2
 2004a2c:	1004c03a 	cmpne	r2,r2,zero
 2004a30:	118cb03a 	or	r6,r2,r6
 2004a34:	0007883a 	mov	r3,zero
 2004a38:	003fb006 	br	20048fc <__truncdfsf2+0x60>
 2004a3c:	000f883a 	mov	r7,zero
 2004a40:	003ff906 	br	2004a28 <__truncdfsf2+0x18c>

02004a44 <__clzsi2>:
 2004a44:	00bfffd4 	movui	r2,65535
 2004a48:	11000536 	bltu	r2,r4,2004a60 <__clzsi2+0x1c>
 2004a4c:	00803fc4 	movi	r2,255
 2004a50:	11000f36 	bltu	r2,r4,2004a90 <__clzsi2+0x4c>
 2004a54:	00800804 	movi	r2,32
 2004a58:	0007883a 	mov	r3,zero
 2004a5c:	00000506 	br	2004a74 <__clzsi2+0x30>
 2004a60:	00804034 	movhi	r2,256
 2004a64:	10bfffc4 	addi	r2,r2,-1
 2004a68:	11000c2e 	bgeu	r2,r4,2004a9c <__clzsi2+0x58>
 2004a6c:	00800204 	movi	r2,8
 2004a70:	00c00604 	movi	r3,24
 2004a74:	20c8d83a 	srl	r4,r4,r3
 2004a78:	00c080b4 	movhi	r3,514
 2004a7c:	18fa7d44 	addi	r3,r3,-5643
 2004a80:	1909883a 	add	r4,r3,r4
 2004a84:	20c00003 	ldbu	r3,0(r4)
 2004a88:	10c5c83a 	sub	r2,r2,r3
 2004a8c:	f800283a 	ret
 2004a90:	00800604 	movi	r2,24
 2004a94:	00c00204 	movi	r3,8
 2004a98:	003ff606 	br	2004a74 <__clzsi2+0x30>
 2004a9c:	00800404 	movi	r2,16
 2004aa0:	1007883a 	mov	r3,r2
 2004aa4:	003ff306 	br	2004a74 <__clzsi2+0x30>

02004aa8 <__divsi3>:
 2004aa8:	20001b16 	blt	r4,zero,2004b18 <__divsi3+0x70>
 2004aac:	000f883a 	mov	r7,zero
 2004ab0:	28001616 	blt	r5,zero,2004b0c <__divsi3+0x64>
 2004ab4:	200d883a 	mov	r6,r4
 2004ab8:	29001a2e 	bgeu	r5,r4,2004b24 <__divsi3+0x7c>
 2004abc:	00800804 	movi	r2,32
 2004ac0:	00c00044 	movi	r3,1
 2004ac4:	00000106 	br	2004acc <__divsi3+0x24>
 2004ac8:	10000d26 	beq	r2,zero,2004b00 <__divsi3+0x58>
 2004acc:	294b883a 	add	r5,r5,r5
 2004ad0:	10bfffc4 	addi	r2,r2,-1
 2004ad4:	18c7883a 	add	r3,r3,r3
 2004ad8:	293ffb36 	bltu	r5,r4,2004ac8 <__divsi3+0x20>
 2004adc:	0005883a 	mov	r2,zero
 2004ae0:	18000726 	beq	r3,zero,2004b00 <__divsi3+0x58>
 2004ae4:	0005883a 	mov	r2,zero
 2004ae8:	31400236 	bltu	r6,r5,2004af4 <__divsi3+0x4c>
 2004aec:	314dc83a 	sub	r6,r6,r5
 2004af0:	10c4b03a 	or	r2,r2,r3
 2004af4:	1806d07a 	srli	r3,r3,1
 2004af8:	280ad07a 	srli	r5,r5,1
 2004afc:	183ffa1e 	bne	r3,zero,2004ae8 <__divsi3+0x40>
 2004b00:	38000126 	beq	r7,zero,2004b08 <__divsi3+0x60>
 2004b04:	0085c83a 	sub	r2,zero,r2
 2004b08:	f800283a 	ret
 2004b0c:	014bc83a 	sub	r5,zero,r5
 2004b10:	39c0005c 	xori	r7,r7,1
 2004b14:	003fe706 	br	2004ab4 <__divsi3+0xc>
 2004b18:	0109c83a 	sub	r4,zero,r4
 2004b1c:	01c00044 	movi	r7,1
 2004b20:	003fe306 	br	2004ab0 <__divsi3+0x8>
 2004b24:	00c00044 	movi	r3,1
 2004b28:	003fee06 	br	2004ae4 <__divsi3+0x3c>

02004b2c <__modsi3>:
 2004b2c:	20001716 	blt	r4,zero,2004b8c <__modsi3+0x60>
 2004b30:	000f883a 	mov	r7,zero
 2004b34:	2005883a 	mov	r2,r4
 2004b38:	28001216 	blt	r5,zero,2004b84 <__modsi3+0x58>
 2004b3c:	2900162e 	bgeu	r5,r4,2004b98 <__modsi3+0x6c>
 2004b40:	01800804 	movi	r6,32
 2004b44:	00c00044 	movi	r3,1
 2004b48:	00000106 	br	2004b50 <__modsi3+0x24>
 2004b4c:	30000a26 	beq	r6,zero,2004b78 <__modsi3+0x4c>
 2004b50:	294b883a 	add	r5,r5,r5
 2004b54:	31bfffc4 	addi	r6,r6,-1
 2004b58:	18c7883a 	add	r3,r3,r3
 2004b5c:	293ffb36 	bltu	r5,r4,2004b4c <__modsi3+0x20>
 2004b60:	18000526 	beq	r3,zero,2004b78 <__modsi3+0x4c>
 2004b64:	1806d07a 	srli	r3,r3,1
 2004b68:	11400136 	bltu	r2,r5,2004b70 <__modsi3+0x44>
 2004b6c:	1145c83a 	sub	r2,r2,r5
 2004b70:	280ad07a 	srli	r5,r5,1
 2004b74:	183ffb1e 	bne	r3,zero,2004b64 <__modsi3+0x38>
 2004b78:	38000126 	beq	r7,zero,2004b80 <__modsi3+0x54>
 2004b7c:	0085c83a 	sub	r2,zero,r2
 2004b80:	f800283a 	ret
 2004b84:	014bc83a 	sub	r5,zero,r5
 2004b88:	003fec06 	br	2004b3c <__modsi3+0x10>
 2004b8c:	0109c83a 	sub	r4,zero,r4
 2004b90:	01c00044 	movi	r7,1
 2004b94:	003fe706 	br	2004b34 <__modsi3+0x8>
 2004b98:	00c00044 	movi	r3,1
 2004b9c:	003ff106 	br	2004b64 <__modsi3+0x38>

02004ba0 <__udivsi3>:
 2004ba0:	200d883a 	mov	r6,r4
 2004ba4:	2900152e 	bgeu	r5,r4,2004bfc <__udivsi3+0x5c>
 2004ba8:	28001416 	blt	r5,zero,2004bfc <__udivsi3+0x5c>
 2004bac:	00800804 	movi	r2,32
 2004bb0:	00c00044 	movi	r3,1
 2004bb4:	00000206 	br	2004bc0 <__udivsi3+0x20>
 2004bb8:	10000e26 	beq	r2,zero,2004bf4 <__udivsi3+0x54>
 2004bbc:	28000516 	blt	r5,zero,2004bd4 <__udivsi3+0x34>
 2004bc0:	294b883a 	add	r5,r5,r5
 2004bc4:	10bfffc4 	addi	r2,r2,-1
 2004bc8:	18c7883a 	add	r3,r3,r3
 2004bcc:	293ffa36 	bltu	r5,r4,2004bb8 <__udivsi3+0x18>
 2004bd0:	18000826 	beq	r3,zero,2004bf4 <__udivsi3+0x54>
 2004bd4:	0005883a 	mov	r2,zero
 2004bd8:	31400236 	bltu	r6,r5,2004be4 <__udivsi3+0x44>
 2004bdc:	314dc83a 	sub	r6,r6,r5
 2004be0:	10c4b03a 	or	r2,r2,r3
 2004be4:	1806d07a 	srli	r3,r3,1
 2004be8:	280ad07a 	srli	r5,r5,1
 2004bec:	183ffa1e 	bne	r3,zero,2004bd8 <__udivsi3+0x38>
 2004bf0:	f800283a 	ret
 2004bf4:	0005883a 	mov	r2,zero
 2004bf8:	f800283a 	ret
 2004bfc:	00c00044 	movi	r3,1
 2004c00:	003ff406 	br	2004bd4 <__udivsi3+0x34>

02004c04 <__umodsi3>:
 2004c04:	2005883a 	mov	r2,r4
 2004c08:	2900122e 	bgeu	r5,r4,2004c54 <__umodsi3+0x50>
 2004c0c:	28001116 	blt	r5,zero,2004c54 <__umodsi3+0x50>
 2004c10:	01800804 	movi	r6,32
 2004c14:	00c00044 	movi	r3,1
 2004c18:	00000206 	br	2004c24 <__umodsi3+0x20>
 2004c1c:	30000c26 	beq	r6,zero,2004c50 <__umodsi3+0x4c>
 2004c20:	28000516 	blt	r5,zero,2004c38 <__umodsi3+0x34>
 2004c24:	294b883a 	add	r5,r5,r5
 2004c28:	31bfffc4 	addi	r6,r6,-1
 2004c2c:	18c7883a 	add	r3,r3,r3
 2004c30:	293ffa36 	bltu	r5,r4,2004c1c <__umodsi3+0x18>
 2004c34:	18000626 	beq	r3,zero,2004c50 <__umodsi3+0x4c>
 2004c38:	1806d07a 	srli	r3,r3,1
 2004c3c:	11400136 	bltu	r2,r5,2004c44 <__umodsi3+0x40>
 2004c40:	1145c83a 	sub	r2,r2,r5
 2004c44:	280ad07a 	srli	r5,r5,1
 2004c48:	183ffb1e 	bne	r3,zero,2004c38 <__umodsi3+0x34>
 2004c4c:	f800283a 	ret
 2004c50:	f800283a 	ret
 2004c54:	00c00044 	movi	r3,1
 2004c58:	003ff706 	br	2004c38 <__umodsi3+0x34>

02004c5c <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 2004c5c:	defff804 	addi	sp,sp,-32
 2004c60:	df000715 	stw	fp,28(sp)
 2004c64:	df000704 	addi	fp,sp,28
 2004c68:	e13ffd15 	stw	r4,-12(fp)
 2004c6c:	e17ffe15 	stw	r5,-8(fp)
 2004c70:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 2004c74:	e0bffd17 	ldw	r2,-12(fp)
 2004c78:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 2004c7c:	e0bffe17 	ldw	r2,-8(fp)
 2004c80:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 2004c84:	e0bfff17 	ldw	r2,-4(fp)
 2004c88:	10800430 	cmpltui	r2,r2,16
 2004c8c:	10004c1e 	bne	r2,zero,2004dc0 <memcpy+0x164>
 2004c90:	e0fffa17 	ldw	r3,-24(fp)
 2004c94:	e0bff917 	ldw	r2,-28(fp)
 2004c98:	1884b03a 	or	r2,r3,r2
 2004c9c:	108000cc 	andi	r2,r2,3
 2004ca0:	1000471e 	bne	r2,zero,2004dc0 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2004ca4:	e0bff917 	ldw	r2,-28(fp)
 2004ca8:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 2004cac:	e0bffa17 	ldw	r2,-24(fp)
 2004cb0:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2004cb4:	00002306 	br	2004d44 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2004cb8:	e0bffb17 	ldw	r2,-20(fp)
 2004cbc:	10c00104 	addi	r3,r2,4
 2004cc0:	e0fffb15 	stw	r3,-20(fp)
 2004cc4:	e0fffc17 	ldw	r3,-16(fp)
 2004cc8:	19000104 	addi	r4,r3,4
 2004ccc:	e13ffc15 	stw	r4,-16(fp)
 2004cd0:	18c00017 	ldw	r3,0(r3)
 2004cd4:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004cd8:	e0bffb17 	ldw	r2,-20(fp)
 2004cdc:	10c00104 	addi	r3,r2,4
 2004ce0:	e0fffb15 	stw	r3,-20(fp)
 2004ce4:	e0fffc17 	ldw	r3,-16(fp)
 2004ce8:	19000104 	addi	r4,r3,4
 2004cec:	e13ffc15 	stw	r4,-16(fp)
 2004cf0:	18c00017 	ldw	r3,0(r3)
 2004cf4:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004cf8:	e0bffb17 	ldw	r2,-20(fp)
 2004cfc:	10c00104 	addi	r3,r2,4
 2004d00:	e0fffb15 	stw	r3,-20(fp)
 2004d04:	e0fffc17 	ldw	r3,-16(fp)
 2004d08:	19000104 	addi	r4,r3,4
 2004d0c:	e13ffc15 	stw	r4,-16(fp)
 2004d10:	18c00017 	ldw	r3,0(r3)
 2004d14:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004d18:	e0bffb17 	ldw	r2,-20(fp)
 2004d1c:	10c00104 	addi	r3,r2,4
 2004d20:	e0fffb15 	stw	r3,-20(fp)
 2004d24:	e0fffc17 	ldw	r3,-16(fp)
 2004d28:	19000104 	addi	r4,r3,4
 2004d2c:	e13ffc15 	stw	r4,-16(fp)
 2004d30:	18c00017 	ldw	r3,0(r3)
 2004d34:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2004d38:	e0bfff17 	ldw	r2,-4(fp)
 2004d3c:	10bffc04 	addi	r2,r2,-16
 2004d40:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2004d44:	e0bfff17 	ldw	r2,-4(fp)
 2004d48:	10800428 	cmpgeui	r2,r2,16
 2004d4c:	103fda1e 	bne	r2,zero,2004cb8 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004d50:	00000b06 	br	2004d80 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2004d54:	e0bffb17 	ldw	r2,-20(fp)
 2004d58:	10c00104 	addi	r3,r2,4
 2004d5c:	e0fffb15 	stw	r3,-20(fp)
 2004d60:	e0fffc17 	ldw	r3,-16(fp)
 2004d64:	19000104 	addi	r4,r3,4
 2004d68:	e13ffc15 	stw	r4,-16(fp)
 2004d6c:	18c00017 	ldw	r3,0(r3)
 2004d70:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 2004d74:	e0bfff17 	ldw	r2,-4(fp)
 2004d78:	10bfff04 	addi	r2,r2,-4
 2004d7c:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004d80:	e0bfff17 	ldw	r2,-4(fp)
 2004d84:	10800128 	cmpgeui	r2,r2,4
 2004d88:	103ff21e 	bne	r2,zero,2004d54 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 2004d8c:	e0bffb17 	ldw	r2,-20(fp)
 2004d90:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2004d94:	e0bffc17 	ldw	r2,-16(fp)
 2004d98:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2004d9c:	00000806 	br	2004dc0 <memcpy+0x164>
    *dst++ = *src++;
 2004da0:	e0bff917 	ldw	r2,-28(fp)
 2004da4:	10c00044 	addi	r3,r2,1
 2004da8:	e0fff915 	stw	r3,-28(fp)
 2004dac:	e0fffa17 	ldw	r3,-24(fp)
 2004db0:	19000044 	addi	r4,r3,1
 2004db4:	e13ffa15 	stw	r4,-24(fp)
 2004db8:	18c00003 	ldbu	r3,0(r3)
 2004dbc:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2004dc0:	e0bfff17 	ldw	r2,-4(fp)
 2004dc4:	10ffffc4 	addi	r3,r2,-1
 2004dc8:	e0ffff15 	stw	r3,-4(fp)
 2004dcc:	103ff41e 	bne	r2,zero,2004da0 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2004dd0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2004dd4:	e037883a 	mov	sp,fp
 2004dd8:	df000017 	ldw	fp,0(sp)
 2004ddc:	dec00104 	addi	sp,sp,4
 2004de0:	f800283a 	ret

02004de4 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2004de4:	defff704 	addi	sp,sp,-36
 2004de8:	df000815 	stw	fp,32(sp)
 2004dec:	df000804 	addi	fp,sp,32
 2004df0:	e13ffd15 	stw	r4,-12(fp)
 2004df4:	e17ffe15 	stw	r5,-8(fp)
 2004df8:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2004dfc:	e0bffd17 	ldw	r2,-12(fp)
 2004e00:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2004e04:	e0bffe17 	ldw	r2,-8(fp)
 2004e08:	10803fcc 	andi	r2,r2,255
 2004e0c:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004e10:	00000c06 	br	2004e44 <memset+0x60>
    {
      if (n--)
 2004e14:	e0bfff17 	ldw	r2,-4(fp)
 2004e18:	10ffffc4 	addi	r3,r2,-1
 2004e1c:	e0ffff15 	stw	r3,-4(fp)
 2004e20:	10000626 	beq	r2,zero,2004e3c <memset+0x58>
        *s++ = (char) c;
 2004e24:	e0bff817 	ldw	r2,-32(fp)
 2004e28:	10c00044 	addi	r3,r2,1
 2004e2c:	e0fff815 	stw	r3,-32(fp)
 2004e30:	e0fffe17 	ldw	r3,-8(fp)
 2004e34:	10c00005 	stb	r3,0(r2)
 2004e38:	00000206 	br	2004e44 <memset+0x60>
      else
        return m;
 2004e3c:	e0bffd17 	ldw	r2,-12(fp)
 2004e40:	00005506 	br	2004f98 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004e44:	e0bff817 	ldw	r2,-32(fp)
 2004e48:	108000cc 	andi	r2,r2,3
 2004e4c:	103ff11e 	bne	r2,zero,2004e14 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2004e50:	e0bfff17 	ldw	r2,-4(fp)
 2004e54:	10800130 	cmpltui	r2,r2,4
 2004e58:	10004a1e 	bne	r2,zero,2004f84 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2004e5c:	e0bff817 	ldw	r2,-32(fp)
 2004e60:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2004e64:	e0bffc17 	ldw	r2,-16(fp)
 2004e68:	1006923a 	slli	r3,r2,8
 2004e6c:	e0bffc17 	ldw	r2,-16(fp)
 2004e70:	1884b03a 	or	r2,r3,r2
 2004e74:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 2004e78:	e0bffa17 	ldw	r2,-24(fp)
 2004e7c:	1004943a 	slli	r2,r2,16
 2004e80:	e0fffa17 	ldw	r3,-24(fp)
 2004e84:	1884b03a 	or	r2,r3,r2
 2004e88:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004e8c:	00800804 	movi	r2,32
 2004e90:	e0bff915 	stw	r2,-28(fp)
 2004e94:	00000906 	br	2004ebc <memset+0xd8>
        buffer = (buffer << i) | buffer;
 2004e98:	e0fffa17 	ldw	r3,-24(fp)
 2004e9c:	e0bff917 	ldw	r2,-28(fp)
 2004ea0:	1884983a 	sll	r2,r3,r2
 2004ea4:	e0fffa17 	ldw	r3,-24(fp)
 2004ea8:	1884b03a 	or	r2,r3,r2
 2004eac:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004eb0:	e0bff917 	ldw	r2,-28(fp)
 2004eb4:	1085883a 	add	r2,r2,r2
 2004eb8:	e0bff915 	stw	r2,-28(fp)
 2004ebc:	e0bff917 	ldw	r2,-28(fp)
 2004ec0:	10800830 	cmpltui	r2,r2,32
 2004ec4:	103ff41e 	bne	r2,zero,2004e98 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004ec8:	00001706 	br	2004f28 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2004ecc:	e0bffb17 	ldw	r2,-20(fp)
 2004ed0:	10c00104 	addi	r3,r2,4
 2004ed4:	e0fffb15 	stw	r3,-20(fp)
 2004ed8:	e0fffa17 	ldw	r3,-24(fp)
 2004edc:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004ee0:	e0bffb17 	ldw	r2,-20(fp)
 2004ee4:	10c00104 	addi	r3,r2,4
 2004ee8:	e0fffb15 	stw	r3,-20(fp)
 2004eec:	e0fffa17 	ldw	r3,-24(fp)
 2004ef0:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004ef4:	e0bffb17 	ldw	r2,-20(fp)
 2004ef8:	10c00104 	addi	r3,r2,4
 2004efc:	e0fffb15 	stw	r3,-20(fp)
 2004f00:	e0fffa17 	ldw	r3,-24(fp)
 2004f04:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004f08:	e0bffb17 	ldw	r2,-20(fp)
 2004f0c:	10c00104 	addi	r3,r2,4
 2004f10:	e0fffb15 	stw	r3,-20(fp)
 2004f14:	e0fffa17 	ldw	r3,-24(fp)
 2004f18:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2004f1c:	e0bfff17 	ldw	r2,-4(fp)
 2004f20:	10bffc04 	addi	r2,r2,-16
 2004f24:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004f28:	e0bfff17 	ldw	r2,-4(fp)
 2004f2c:	10800428 	cmpgeui	r2,r2,16
 2004f30:	103fe61e 	bne	r2,zero,2004ecc <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004f34:	00000806 	br	2004f58 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2004f38:	e0bffb17 	ldw	r2,-20(fp)
 2004f3c:	10c00104 	addi	r3,r2,4
 2004f40:	e0fffb15 	stw	r3,-20(fp)
 2004f44:	e0fffa17 	ldw	r3,-24(fp)
 2004f48:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2004f4c:	e0bfff17 	ldw	r2,-4(fp)
 2004f50:	10bfff04 	addi	r2,r2,-4
 2004f54:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004f58:	e0bfff17 	ldw	r2,-4(fp)
 2004f5c:	10800128 	cmpgeui	r2,r2,4
 2004f60:	103ff51e 	bne	r2,zero,2004f38 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2004f64:	e0bffb17 	ldw	r2,-20(fp)
 2004f68:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004f6c:	00000506 	br	2004f84 <memset+0x1a0>
    *s++ = (char) c;
 2004f70:	e0bff817 	ldw	r2,-32(fp)
 2004f74:	10c00044 	addi	r3,r2,1
 2004f78:	e0fff815 	stw	r3,-32(fp)
 2004f7c:	e0fffe17 	ldw	r3,-8(fp)
 2004f80:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004f84:	e0bfff17 	ldw	r2,-4(fp)
 2004f88:	10ffffc4 	addi	r3,r2,-1
 2004f8c:	e0ffff15 	stw	r3,-4(fp)
 2004f90:	103ff71e 	bne	r2,zero,2004f70 <memset+0x18c>
    *s++ = (char) c;

  return m;
 2004f94:	e0bffd17 	ldw	r2,-12(fp)
}
 2004f98:	e037883a 	mov	sp,fp
 2004f9c:	df000017 	ldw	fp,0(sp)
 2004fa0:	dec00104 	addi	sp,sp,4
 2004fa4:	f800283a 	ret

02004fa8 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2004fa8:	defff804 	addi	sp,sp,-32
 2004fac:	dfc00515 	stw	ra,20(sp)
 2004fb0:	df000415 	stw	fp,16(sp)
 2004fb4:	df000404 	addi	fp,sp,16
 2004fb8:	e13ffe15 	stw	r4,-8(fp)
 2004fbc:	e17fff15 	stw	r5,-4(fp)
 2004fc0:	e1800215 	stw	r6,8(fp)
 2004fc4:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2004fc8:	e0800204 	addi	r2,fp,8
 2004fcc:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2004fd0:	e0bffe17 	ldw	r2,-8(fp)
 2004fd4:	10800217 	ldw	r2,8(r2)
 2004fd8:	e0fffd17 	ldw	r3,-12(fp)
 2004fdc:	180f883a 	mov	r7,r3
 2004fe0:	e1bfff17 	ldw	r6,-4(fp)
 2004fe4:	100b883a 	mov	r5,r2
 2004fe8:	e13ffe17 	ldw	r4,-8(fp)
 2004fec:	20053f80 	call	20053f8 <___vfprintf_internal_r>
 2004ff0:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2004ff4:	e0bffc17 	ldw	r2,-16(fp)
}
 2004ff8:	e037883a 	mov	sp,fp
 2004ffc:	dfc00117 	ldw	ra,4(sp)
 2005000:	df000017 	ldw	fp,0(sp)
 2005004:	dec00404 	addi	sp,sp,16
 2005008:	f800283a 	ret

0200500c <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 200500c:	defff704 	addi	sp,sp,-36
 2005010:	dfc00515 	stw	ra,20(sp)
 2005014:	df000415 	stw	fp,16(sp)
 2005018:	df000404 	addi	fp,sp,16
 200501c:	e13fff15 	stw	r4,-4(fp)
 2005020:	e1400215 	stw	r5,8(fp)
 2005024:	e1800315 	stw	r6,12(fp)
 2005028:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 200502c:	d0a00017 	ldw	r2,-32768(gp)
 2005030:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2005034:	e0800204 	addi	r2,fp,8
 2005038:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 200503c:	d0a00017 	ldw	r2,-32768(gp)
 2005040:	10800217 	ldw	r2,8(r2)
 2005044:	e0fffe17 	ldw	r3,-8(fp)
 2005048:	180d883a 	mov	r6,r3
 200504c:	e17fff17 	ldw	r5,-4(fp)
 2005050:	1009883a 	mov	r4,r2
 2005054:	20053a80 	call	20053a8 <__vfprintf_internal>
 2005058:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 200505c:	e0bffd17 	ldw	r2,-12(fp)
}
 2005060:	e037883a 	mov	sp,fp
 2005064:	dfc00117 	ldw	ra,4(sp)
 2005068:	df000017 	ldw	fp,0(sp)
 200506c:	dec00504 	addi	sp,sp,20
 2005070:	f800283a 	ret

02005074 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 2005074:	defff104 	addi	sp,sp,-60
 2005078:	dfc00e15 	stw	ra,56(sp)
 200507c:	df000d15 	stw	fp,52(sp)
 2005080:	df000d04 	addi	fp,sp,52
 2005084:	e13ffe15 	stw	r4,-8(fp)
 2005088:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 200508c:	e13fff17 	ldw	r4,-4(fp)
 2005090:	20051c40 	call	20051c4 <strlen>
 2005094:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 2005098:	e0bfff17 	ldw	r2,-4(fp)
 200509c:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 20050a0:	e0bff317 	ldw	r2,-52(fp)
 20050a4:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 20050a8:	008080b4 	movhi	r2,514
 20050ac:	10babe04 	addi	r2,r2,-5384
 20050b0:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 20050b4:	00800044 	movi	r2,1
 20050b8:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 20050bc:	e0bff317 	ldw	r2,-52(fp)
 20050c0:	10800044 	addi	r2,r2,1
 20050c4:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 20050c8:	e0bffa04 	addi	r2,fp,-24
 20050cc:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 20050d0:	00800084 	movi	r2,2
 20050d4:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 20050d8:	e0bffe17 	ldw	r2,-8(fp)
 20050dc:	e0bff415 	stw	r2,-48(fp)
 20050e0:	e0bff417 	ldw	r2,-48(fp)
 20050e4:	10000526 	beq	r2,zero,20050fc <_puts_r+0x88>
 20050e8:	e0bff417 	ldw	r2,-48(fp)
 20050ec:	10800e17 	ldw	r2,56(r2)
 20050f0:	1000021e 	bne	r2,zero,20050fc <_puts_r+0x88>
 20050f4:	e13ff417 	ldw	r4,-48(fp)
 20050f8:	200a0640 	call	200a064 <__sinit>
  fp = _stdout_r (ptr);
 20050fc:	e0bffe17 	ldw	r2,-8(fp)
 2005100:	10800217 	ldw	r2,8(r2)
 2005104:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 2005108:	e0bff517 	ldw	r2,-44(fp)
 200510c:	1080030b 	ldhu	r2,12(r2)
 2005110:	10bfffcc 	andi	r2,r2,65535
 2005114:	1088000c 	andi	r2,r2,8192
 2005118:	10000c1e 	bne	r2,zero,200514c <_puts_r+0xd8>
 200511c:	e0bff517 	ldw	r2,-44(fp)
 2005120:	1080030b 	ldhu	r2,12(r2)
 2005124:	10880014 	ori	r2,r2,8192
 2005128:	1007883a 	mov	r3,r2
 200512c:	e0bff517 	ldw	r2,-44(fp)
 2005130:	10c0030d 	sth	r3,12(r2)
 2005134:	e0bff517 	ldw	r2,-44(fp)
 2005138:	10c01917 	ldw	r3,100(r2)
 200513c:	00b7ffc4 	movi	r2,-8193
 2005140:	1886703a 	and	r3,r3,r2
 2005144:	e0bff517 	ldw	r2,-44(fp)
 2005148:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 200514c:	e0bff704 	addi	r2,fp,-36
 2005150:	100d883a 	mov	r6,r2
 2005154:	e17ff517 	ldw	r5,-44(fp)
 2005158:	e13ffe17 	ldw	r4,-8(fp)
 200515c:	200a9b00 	call	200a9b0 <__sfvwrite_r>
 2005160:	10000226 	beq	r2,zero,200516c <_puts_r+0xf8>
 2005164:	00bfffc4 	movi	r2,-1
 2005168:	00000106 	br	2005170 <_puts_r+0xfc>
 200516c:	00800284 	movi	r2,10
 2005170:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 2005174:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 2005178:	e037883a 	mov	sp,fp
 200517c:	dfc00117 	ldw	ra,4(sp)
 2005180:	df000017 	ldw	fp,0(sp)
 2005184:	dec00204 	addi	sp,sp,8
 2005188:	f800283a 	ret

0200518c <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 200518c:	defffd04 	addi	sp,sp,-12
 2005190:	dfc00215 	stw	ra,8(sp)
 2005194:	df000115 	stw	fp,4(sp)
 2005198:	df000104 	addi	fp,sp,4
 200519c:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 20051a0:	d0a00017 	ldw	r2,-32768(gp)
 20051a4:	e17fff17 	ldw	r5,-4(fp)
 20051a8:	1009883a 	mov	r4,r2
 20051ac:	20050740 	call	2005074 <_puts_r>
}
 20051b0:	e037883a 	mov	sp,fp
 20051b4:	dfc00117 	ldw	ra,4(sp)
 20051b8:	df000017 	ldw	fp,0(sp)
 20051bc:	dec00204 	addi	sp,sp,8
 20051c0:	f800283a 	ret

020051c4 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 20051c4:	defffc04 	addi	sp,sp,-16
 20051c8:	df000315 	stw	fp,12(sp)
 20051cc:	df000304 	addi	fp,sp,12
 20051d0:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 20051d4:	e0bfff17 	ldw	r2,-4(fp)
 20051d8:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 20051dc:	00000d06 	br	2005214 <strlen+0x50>
    {
      if (!*str)
 20051e0:	e0bfff17 	ldw	r2,-4(fp)
 20051e4:	10800003 	ldbu	r2,0(r2)
 20051e8:	10803fcc 	andi	r2,r2,255
 20051ec:	1080201c 	xori	r2,r2,128
 20051f0:	10bfe004 	addi	r2,r2,-128
 20051f4:	1000041e 	bne	r2,zero,2005208 <strlen+0x44>
	return str - start;
 20051f8:	e0ffff17 	ldw	r3,-4(fp)
 20051fc:	e0bffe17 	ldw	r2,-8(fp)
 2005200:	1885c83a 	sub	r2,r3,r2
 2005204:	00002806 	br	20052a8 <strlen+0xe4>
      str++;
 2005208:	e0bfff17 	ldw	r2,-4(fp)
 200520c:	10800044 	addi	r2,r2,1
 2005210:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2005214:	e0bfff17 	ldw	r2,-4(fp)
 2005218:	108000cc 	andi	r2,r2,3
 200521c:	103ff01e 	bne	r2,zero,20051e0 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2005220:	e0bfff17 	ldw	r2,-4(fp)
 2005224:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 2005228:	00000306 	br	2005238 <strlen+0x74>
    aligned_addr++;
 200522c:	e0bffd17 	ldw	r2,-12(fp)
 2005230:	10800104 	addi	r2,r2,4
 2005234:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 2005238:	e0bffd17 	ldw	r2,-12(fp)
 200523c:	10c00017 	ldw	r3,0(r2)
 2005240:	00bfbff4 	movhi	r2,65279
 2005244:	10bfbfc4 	addi	r2,r2,-257
 2005248:	1887883a 	add	r3,r3,r2
 200524c:	e0bffd17 	ldw	r2,-12(fp)
 2005250:	10800017 	ldw	r2,0(r2)
 2005254:	0084303a 	nor	r2,zero,r2
 2005258:	1886703a 	and	r3,r3,r2
 200525c:	00a02074 	movhi	r2,32897
 2005260:	10a02004 	addi	r2,r2,-32640
 2005264:	1884703a 	and	r2,r3,r2
 2005268:	103ff026 	beq	r2,zero,200522c <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 200526c:	e0bffd17 	ldw	r2,-12(fp)
 2005270:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2005274:	00000306 	br	2005284 <strlen+0xc0>
    str++;
 2005278:	e0bfff17 	ldw	r2,-4(fp)
 200527c:	10800044 	addi	r2,r2,1
 2005280:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2005284:	e0bfff17 	ldw	r2,-4(fp)
 2005288:	10800003 	ldbu	r2,0(r2)
 200528c:	10803fcc 	andi	r2,r2,255
 2005290:	1080201c 	xori	r2,r2,128
 2005294:	10bfe004 	addi	r2,r2,-128
 2005298:	103ff71e 	bne	r2,zero,2005278 <strlen+0xb4>
    str++;
  return str - start;
 200529c:	e0ffff17 	ldw	r3,-4(fp)
 20052a0:	e0bffe17 	ldw	r2,-8(fp)
 20052a4:	1885c83a 	sub	r2,r3,r2
}
 20052a8:	e037883a 	mov	sp,fp
 20052ac:	df000017 	ldw	fp,0(sp)
 20052b0:	dec00104 	addi	sp,sp,4
 20052b4:	f800283a 	ret

020052b8 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 20052b8:	defedf04 	addi	sp,sp,-1156
 20052bc:	dfc12015 	stw	ra,1152(sp)
 20052c0:	df011f15 	stw	fp,1148(sp)
 20052c4:	dc011e15 	stw	r16,1144(sp)
 20052c8:	df011f04 	addi	fp,sp,1148
 20052cc:	e13ffc15 	stw	r4,-16(fp)
 20052d0:	2821883a 	mov	r16,r5
 20052d4:	e1bffd15 	stw	r6,-12(fp)
 20052d8:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 20052dc:	80c0030b 	ldhu	r3,12(r16)
 20052e0:	00bfff44 	movi	r2,-3
 20052e4:	1884703a 	and	r2,r3,r2
 20052e8:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 20052ec:	80801917 	ldw	r2,100(r16)
 20052f0:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 20052f4:	8080038b 	ldhu	r2,14(r16)
 20052f8:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 20052fc:	80800717 	ldw	r2,28(r16)
 2005300:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2005304:	80800917 	ldw	r2,36(r16)
 2005308:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200530c:	e0befc04 	addi	r2,fp,-1040
 2005310:	e0bee215 	stw	r2,-1144(fp)
 2005314:	e0bee217 	ldw	r2,-1144(fp)
 2005318:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200531c:	00810004 	movi	r2,1024
 2005320:	e0bee415 	stw	r2,-1136(fp)
 2005324:	e0bee417 	ldw	r2,-1136(fp)
 2005328:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200532c:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2005330:	e0bee204 	addi	r2,fp,-1144
 2005334:	e1fffe17 	ldw	r7,-8(fp)
 2005338:	e1bffd17 	ldw	r6,-12(fp)
 200533c:	100b883a 	mov	r5,r2
 2005340:	e13ffc17 	ldw	r4,-16(fp)
 2005344:	20053f80 	call	20053f8 <___vfprintf_internal_r>
 2005348:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200534c:	e0bee117 	ldw	r2,-1148(fp)
 2005350:	10000716 	blt	r2,zero,2005370 <__sbprintf+0xb8>
 2005354:	e0bee204 	addi	r2,fp,-1144
 2005358:	100b883a 	mov	r5,r2
 200535c:	e13ffc17 	ldw	r4,-16(fp)
 2005360:	2009be40 	call	2009be4 <_fflush_r>
 2005364:	10000226 	beq	r2,zero,2005370 <__sbprintf+0xb8>
		ret = EOF;
 2005368:	00bfffc4 	movi	r2,-1
 200536c:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2005370:	e0bee50b 	ldhu	r2,-1132(fp)
 2005374:	10bfffcc 	andi	r2,r2,65535
 2005378:	1080100c 	andi	r2,r2,64
 200537c:	10000326 	beq	r2,zero,200538c <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2005380:	8080030b 	ldhu	r2,12(r16)
 2005384:	10801014 	ori	r2,r2,64
 2005388:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200538c:	e0bee117 	ldw	r2,-1148(fp)
}
 2005390:	e6ffff04 	addi	sp,fp,-4
 2005394:	dfc00217 	ldw	ra,8(sp)
 2005398:	df000117 	ldw	fp,4(sp)
 200539c:	dc000017 	ldw	r16,0(sp)
 20053a0:	dec00304 	addi	sp,sp,12
 20053a4:	f800283a 	ret

020053a8 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 20053a8:	defffa04 	addi	sp,sp,-24
 20053ac:	dfc00515 	stw	ra,20(sp)
 20053b0:	df000415 	stw	fp,16(sp)
 20053b4:	df000404 	addi	fp,sp,16
 20053b8:	e13ffd15 	stw	r4,-12(fp)
 20053bc:	e17ffe15 	stw	r5,-8(fp)
 20053c0:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 20053c4:	d0a00017 	ldw	r2,-32768(gp)
 20053c8:	e1ffff17 	ldw	r7,-4(fp)
 20053cc:	e1bffe17 	ldw	r6,-8(fp)
 20053d0:	e17ffd17 	ldw	r5,-12(fp)
 20053d4:	1009883a 	mov	r4,r2
 20053d8:	20053f80 	call	20053f8 <___vfprintf_internal_r>
 20053dc:	e0bffc15 	stw	r2,-16(fp)
  return result;
 20053e0:	e0bffc17 	ldw	r2,-16(fp)
}
 20053e4:	e037883a 	mov	sp,fp
 20053e8:	dfc00117 	ldw	ra,4(sp)
 20053ec:	df000017 	ldw	fp,0(sp)
 20053f0:	dec00204 	addi	sp,sp,8
 20053f4:	f800283a 	ret

020053f8 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 20053f8:	deffa404 	addi	sp,sp,-368
 20053fc:	dfc05b15 	stw	ra,364(sp)
 2005400:	df005a15 	stw	fp,360(sp)
 2005404:	ddc05915 	stw	r23,356(sp)
 2005408:	dd805815 	stw	r22,352(sp)
 200540c:	dd405715 	stw	r21,348(sp)
 2005410:	dd005615 	stw	r20,344(sp)
 2005414:	dcc05515 	stw	r19,340(sp)
 2005418:	dc805415 	stw	r18,336(sp)
 200541c:	dc405315 	stw	r17,332(sp)
 2005420:	dc005215 	stw	r16,328(sp)
 2005424:	df005a04 	addi	fp,sp,360
 2005428:	e13fe615 	stw	r4,-104(fp)
 200542c:	e17fe715 	stw	r5,-100(fp)
 2005430:	e1bfe815 	stw	r6,-96(fp)
 2005434:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 2005438:	e13fe617 	ldw	r4,-104(fp)
 200543c:	200b24c0 	call	200b24c <_localeconv_r>
 2005440:	10800017 	ldw	r2,0(r2)
 2005444:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2005448:	e13fbb17 	ldw	r4,-276(fp)
 200544c:	20051c40 	call	20051c4 <strlen>
 2005450:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2005454:	e03fc215 	stw	zero,-248(fp)
 2005458:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 200545c:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2005460:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2005464:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2005468:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200546c:	e0bfe617 	ldw	r2,-104(fp)
 2005470:	e0bfbd15 	stw	r2,-268(fp)
 2005474:	e0bfbd17 	ldw	r2,-268(fp)
 2005478:	10000526 	beq	r2,zero,2005490 <___vfprintf_internal_r+0x98>
 200547c:	e0bfbd17 	ldw	r2,-268(fp)
 2005480:	10800e17 	ldw	r2,56(r2)
 2005484:	1000021e 	bne	r2,zero,2005490 <___vfprintf_internal_r+0x98>
 2005488:	e13fbd17 	ldw	r4,-268(fp)
 200548c:	200a0640 	call	200a064 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2005490:	e0bfe717 	ldw	r2,-100(fp)
 2005494:	1080030b 	ldhu	r2,12(r2)
 2005498:	10bfffcc 	andi	r2,r2,65535
 200549c:	1088000c 	andi	r2,r2,8192
 20054a0:	10000c1e 	bne	r2,zero,20054d4 <___vfprintf_internal_r+0xdc>
 20054a4:	e0bfe717 	ldw	r2,-100(fp)
 20054a8:	1080030b 	ldhu	r2,12(r2)
 20054ac:	10880014 	ori	r2,r2,8192
 20054b0:	1007883a 	mov	r3,r2
 20054b4:	e0bfe717 	ldw	r2,-100(fp)
 20054b8:	10c0030d 	sth	r3,12(r2)
 20054bc:	e0bfe717 	ldw	r2,-100(fp)
 20054c0:	10c01917 	ldw	r3,100(r2)
 20054c4:	00b7ffc4 	movi	r2,-8193
 20054c8:	1886703a 	and	r3,r3,r2
 20054cc:	e0bfe717 	ldw	r2,-100(fp)
 20054d0:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 20054d4:	e0bfe717 	ldw	r2,-100(fp)
 20054d8:	1080030b 	ldhu	r2,12(r2)
 20054dc:	10bfffcc 	andi	r2,r2,65535
 20054e0:	1080020c 	andi	r2,r2,8
 20054e4:	10000326 	beq	r2,zero,20054f4 <___vfprintf_internal_r+0xfc>
 20054e8:	e0bfe717 	ldw	r2,-100(fp)
 20054ec:	10800417 	ldw	r2,16(r2)
 20054f0:	1000061e 	bne	r2,zero,200550c <___vfprintf_internal_r+0x114>
 20054f4:	e17fe717 	ldw	r5,-100(fp)
 20054f8:	e13fe617 	ldw	r4,-104(fp)
 20054fc:	20078140 	call	2007814 <__swsetup_r>
 2005500:	10000226 	beq	r2,zero,200550c <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2005504:	00bfffc4 	movi	r2,-1
 2005508:	0007e206 	br	2007494 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200550c:	e0bfe717 	ldw	r2,-100(fp)
 2005510:	1080030b 	ldhu	r2,12(r2)
 2005514:	10bfffcc 	andi	r2,r2,65535
 2005518:	1080068c 	andi	r2,r2,26
 200551c:	10800298 	cmpnei	r2,r2,10
 2005520:	10000c1e 	bne	r2,zero,2005554 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2005524:	e0bfe717 	ldw	r2,-100(fp)
 2005528:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200552c:	10bfffcc 	andi	r2,r2,65535
 2005530:	10a0001c 	xori	r2,r2,32768
 2005534:	10a00004 	addi	r2,r2,-32768
 2005538:	10000616 	blt	r2,zero,2005554 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200553c:	e1ffe917 	ldw	r7,-92(fp)
 2005540:	e1bfe817 	ldw	r6,-96(fp)
 2005544:	e17fe717 	ldw	r5,-100(fp)
 2005548:	e13fe617 	ldw	r4,-104(fp)
 200554c:	20052b80 	call	20052b8 <__sbprintf>
 2005550:	0007d006 	br	2007494 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2005554:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2005558:	e47fcb04 	addi	r17,fp,-212
 200555c:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2005560:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2005564:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2005568:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200556c:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2005570:	00000106 	br	2005578 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2005574:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2005578:	a8800003 	ldbu	r2,0(r21)
 200557c:	10803fcc 	andi	r2,r2,255
 2005580:	1080201c 	xori	r2,r2,128
 2005584:	10bfe004 	addi	r2,r2,-128
 2005588:	10000626 	beq	r2,zero,20055a4 <___vfprintf_internal_r+0x1ac>
 200558c:	a8800003 	ldbu	r2,0(r21)
 2005590:	10803fcc 	andi	r2,r2,255
 2005594:	1080201c 	xori	r2,r2,128
 2005598:	10bfe004 	addi	r2,r2,-128
 200559c:	10800958 	cmpnei	r2,r2,37
 20055a0:	103ff41e 	bne	r2,zero,2005574 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 20055a4:	a807883a 	mov	r3,r21
 20055a8:	9005883a 	mov	r2,r18
 20055ac:	18a1c83a 	sub	r16,r3,r2
 20055b0:	80001826 	beq	r16,zero,2005614 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 20055b4:	8c800015 	stw	r18,0(r17)
 20055b8:	8005883a 	mov	r2,r16
 20055bc:	88800115 	stw	r2,4(r17)
 20055c0:	e0bfca17 	ldw	r2,-216(fp)
 20055c4:	8007883a 	mov	r3,r16
 20055c8:	10c5883a 	add	r2,r2,r3
 20055cc:	e0bfca15 	stw	r2,-216(fp)
 20055d0:	8c400204 	addi	r17,r17,8
 20055d4:	e0bfc917 	ldw	r2,-220(fp)
 20055d8:	10800044 	addi	r2,r2,1
 20055dc:	e0bfc915 	stw	r2,-220(fp)
 20055e0:	e0bfc917 	ldw	r2,-220(fp)
 20055e4:	10800210 	cmplti	r2,r2,8
 20055e8:	1000071e 	bne	r2,zero,2005608 <___vfprintf_internal_r+0x210>
 20055ec:	e0bfc804 	addi	r2,fp,-224
 20055f0:	100d883a 	mov	r6,r2
 20055f4:	e17fe717 	ldw	r5,-100(fp)
 20055f8:	e13fe617 	ldw	r4,-104(fp)
 20055fc:	200f2800 	call	200f280 <__sprint_r>
 2005600:	10074d1e 	bne	r2,zero,2007338 <___vfprintf_internal_r+0x1f40>
 2005604:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2005608:	e0bfac17 	ldw	r2,-336(fp)
 200560c:	1405883a 	add	r2,r2,r16
 2005610:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2005614:	a8800003 	ldbu	r2,0(r21)
 2005618:	10803fcc 	andi	r2,r2,255
 200561c:	1080201c 	xori	r2,r2,128
 2005620:	10bfe004 	addi	r2,r2,-128
 2005624:	10073626 	beq	r2,zero,2007300 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2005628:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 200562c:	ad400044 	addi	r21,r21,1

		flags = 0;
 2005630:	0027883a 	mov	r19,zero
		dprec = 0;
 2005634:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 2005638:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 200563c:	00bfffc4 	movi	r2,-1
 2005640:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 2005644:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2005648:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200564c:	a805883a 	mov	r2,r21
 2005650:	15400044 	addi	r21,r2,1
 2005654:	10800003 	ldbu	r2,0(r2)
 2005658:	15003fcc 	andi	r20,r2,255
 200565c:	a500201c 	xori	r20,r20,128
 2005660:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 2005664:	a0bff804 	addi	r2,r20,-32
 2005668:	10c01668 	cmpgeui	r3,r2,89
 200566c:	1803491e 	bne	r3,zero,2006394 <___vfprintf_internal_r+0xf9c>
 2005670:	100690ba 	slli	r3,r2,2
 2005674:	00808034 	movhi	r2,512
 2005678:	1095a204 	addi	r2,r2,22152
 200567c:	1885883a 	add	r2,r3,r2
 2005680:	10800017 	ldw	r2,0(r2)
 2005684:	1000683a 	jmp	r2
 2005688:	020057ec 	andhi	r8,zero,351
 200568c:	02006394 	movui	r8,398
 2005690:	02006394 	movui	r8,398
 2005694:	0200580c 	andi	r8,zero,352
 2005698:	02006394 	movui	r8,398
 200569c:	02006394 	movui	r8,398
 20056a0:	02006394 	movui	r8,398
 20056a4:	02006394 	movui	r8,398
 20056a8:	02006394 	movui	r8,398
 20056ac:	02006394 	movui	r8,398
 20056b0:	02005814 	movui	r8,352
 20056b4:	02005848 	cmpgei	r8,zero,353
 20056b8:	02006394 	movui	r8,398
 20056bc:	02005840 	call	200584 <__alt_mem_mem_Nios_PI+0x584>
 20056c0:	02005854 	movui	r8,353
 20056c4:	02006394 	movui	r8,398
 20056c8:	020058e8 	cmpgeui	r8,zero,355
 20056cc:	020058f0 	cmpltui	r8,zero,355
 20056d0:	020058f0 	cmpltui	r8,zero,355
 20056d4:	020058f0 	cmpltui	r8,zero,355
 20056d8:	020058f0 	cmpltui	r8,zero,355
 20056dc:	020058f0 	cmpltui	r8,zero,355
 20056e0:	020058f0 	cmpltui	r8,zero,355
 20056e4:	020058f0 	cmpltui	r8,zero,355
 20056e8:	020058f0 	cmpltui	r8,zero,355
 20056ec:	020058f0 	cmpltui	r8,zero,355
 20056f0:	02006394 	movui	r8,398
 20056f4:	02006394 	movui	r8,398
 20056f8:	02006394 	movui	r8,398
 20056fc:	02006394 	movui	r8,398
 2005700:	02006394 	movui	r8,398
 2005704:	02006394 	movui	r8,398
 2005708:	02006394 	movui	r8,398
 200570c:	02006394 	movui	r8,398
 2005710:	02006394 	movui	r8,398
 2005714:	02006394 	movui	r8,398
 2005718:	02005998 	cmpnei	r8,zero,358
 200571c:	02005a98 	cmpnei	r8,zero,362
 2005720:	02006394 	movui	r8,398
 2005724:	02005a98 	cmpnei	r8,zero,362
 2005728:	02006394 	movui	r8,398
 200572c:	02006394 	movui	r8,398
 2005730:	02006394 	movui	r8,398
 2005734:	02006394 	movui	r8,398
 2005738:	0200592c 	andhi	r8,zero,356
 200573c:	02006394 	movui	r8,398
 2005740:	02006394 	movui	r8,398
 2005744:	02005e34 	movhi	r8,376
 2005748:	02006394 	movui	r8,398
 200574c:	02006394 	movui	r8,398
 2005750:	02006394 	movui	r8,398
 2005754:	02006394 	movui	r8,398
 2005758:	02006394 	movui	r8,398
 200575c:	02005fb0 	cmpltui	r8,zero,382
 2005760:	02006394 	movui	r8,398
 2005764:	02006394 	movui	r8,398
 2005768:	02006070 	cmpltui	r8,zero,385
 200576c:	02006394 	movui	r8,398
 2005770:	02006394 	movui	r8,398
 2005774:	02006394 	movui	r8,398
 2005778:	02006394 	movui	r8,398
 200577c:	02006394 	movui	r8,398
 2005780:	02006394 	movui	r8,398
 2005784:	02006394 	movui	r8,398
 2005788:	02006394 	movui	r8,398
 200578c:	02006394 	movui	r8,398
 2005790:	02006394 	movui	r8,398
 2005794:	02005970 	cmpltui	r8,zero,357
 2005798:	0200599c 	xori	r8,zero,358
 200579c:	02005a98 	cmpnei	r8,zero,362
 20057a0:	02005a98 	cmpnei	r8,zero,362
 20057a4:	02005a98 	cmpnei	r8,zero,362
 20057a8:	02005934 	movhi	r8,356
 20057ac:	0200599c 	xori	r8,zero,358
 20057b0:	02006394 	movui	r8,398
 20057b4:	02006394 	movui	r8,398
 20057b8:	0200593c 	xorhi	r8,zero,356
 20057bc:	02006394 	movui	r8,398
 20057c0:	02005d94 	movui	r8,374
 20057c4:	02005e38 	rdprs	r8,zero,376
 20057c8:	02005ed8 	cmpnei	r8,zero,379
 20057cc:	02005968 	cmpgeui	r8,zero,357
 20057d0:	02006394 	movui	r8,398
 20057d4:	02005f20 	cmpeqi	r8,zero,380
 20057d8:	02006394 	movui	r8,398
 20057dc:	02005fb4 	movhi	r8,382
 20057e0:	02006394 	movui	r8,398
 20057e4:	02006394 	movui	r8,398
 20057e8:	02006080 	call	200608 <__alt_mem_mem_Nios_PI+0x608>
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 20057ec:	e0bfc103 	ldbu	r2,-252(fp)
 20057f0:	10803fcc 	andi	r2,r2,255
 20057f4:	1080201c 	xori	r2,r2,128
 20057f8:	10bfe004 	addi	r2,r2,-128
 20057fc:	103f931e 	bne	r2,zero,200564c <___vfprintf_internal_r+0x254>
				sign = ' ';
 2005800:	00800804 	movi	r2,32
 2005804:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2005808:	003f9006 	br	200564c <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 200580c:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2005810:	003f8e06 	br	200564c <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2005814:	e0bfe917 	ldw	r2,-92(fp)
 2005818:	10c00104 	addi	r3,r2,4
 200581c:	e0ffe915 	stw	r3,-92(fp)
 2005820:	10800017 	ldw	r2,0(r2)
 2005824:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2005828:	e0bfad17 	ldw	r2,-332(fp)
 200582c:	10000116 	blt	r2,zero,2005834 <___vfprintf_internal_r+0x43c>
				goto rflag;
 2005830:	003f8606 	br	200564c <___vfprintf_internal_r+0x254>
			width = -width;
 2005834:	e0bfad17 	ldw	r2,-332(fp)
 2005838:	0085c83a 	sub	r2,zero,r2
 200583c:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2005840:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2005844:	003f8106 	br	200564c <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2005848:	00800ac4 	movi	r2,43
 200584c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2005850:	003f7e06 	br	200564c <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 2005854:	a805883a 	mov	r2,r21
 2005858:	15400044 	addi	r21,r2,1
 200585c:	10800003 	ldbu	r2,0(r2)
 2005860:	15003fcc 	andi	r20,r2,255
 2005864:	a500201c 	xori	r20,r20,128
 2005868:	a53fe004 	addi	r20,r20,-128
 200586c:	a0800a98 	cmpnei	r2,r20,42
 2005870:	10000a1e 	bne	r2,zero,200589c <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2005874:	e0bfe917 	ldw	r2,-92(fp)
 2005878:	10c00104 	addi	r3,r2,4
 200587c:	e0ffe915 	stw	r3,-92(fp)
 2005880:	10800017 	ldw	r2,0(r2)
 2005884:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2005888:	e0bfae17 	ldw	r2,-328(fp)
 200588c:	103f6f0e 	bge	r2,zero,200564c <___vfprintf_internal_r+0x254>
					prec = -1;
 2005890:	00bfffc4 	movi	r2,-1
 2005894:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2005898:	003f6c06 	br	200564c <___vfprintf_internal_r+0x254>
			}
			n = 0;
 200589c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 20058a0:	00000906 	br	20058c8 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 20058a4:	80c002a4 	muli	r3,r16,10
 20058a8:	a0bff404 	addi	r2,r20,-48
 20058ac:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20058b0:	a805883a 	mov	r2,r21
 20058b4:	15400044 	addi	r21,r2,1
 20058b8:	10800003 	ldbu	r2,0(r2)
 20058bc:	15003fcc 	andi	r20,r2,255
 20058c0:	a500201c 	xori	r20,r20,128
 20058c4:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 20058c8:	a0bff404 	addi	r2,r20,-48
 20058cc:	108002b0 	cmpltui	r2,r2,10
 20058d0:	103ff41e 	bne	r2,zero,20058a4 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 20058d4:	8005883a 	mov	r2,r16
 20058d8:	1000010e 	bge	r2,zero,20058e0 <___vfprintf_internal_r+0x4e8>
 20058dc:	00bfffc4 	movi	r2,-1
 20058e0:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 20058e4:	003f5f06 	br	2005664 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 20058e8:	9cc02014 	ori	r19,r19,128
			goto rflag;
 20058ec:	003f5706 	br	200564c <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 20058f0:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 20058f4:	80c002a4 	muli	r3,r16,10
 20058f8:	a0bff404 	addi	r2,r20,-48
 20058fc:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2005900:	a805883a 	mov	r2,r21
 2005904:	15400044 	addi	r21,r2,1
 2005908:	10800003 	ldbu	r2,0(r2)
 200590c:	15003fcc 	andi	r20,r2,255
 2005910:	a500201c 	xori	r20,r20,128
 2005914:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 2005918:	a0bff404 	addi	r2,r20,-48
 200591c:	108002b0 	cmpltui	r2,r2,10
 2005920:	103ff41e 	bne	r2,zero,20058f4 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2005924:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 2005928:	003f4e06 	br	2005664 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 200592c:	9cc00214 	ori	r19,r19,8
			goto rflag;
 2005930:	003f4606 	br	200564c <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2005934:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2005938:	003f4406 	br	200564c <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200593c:	a8800003 	ldbu	r2,0(r21)
 2005940:	10803fcc 	andi	r2,r2,255
 2005944:	1080201c 	xori	r2,r2,128
 2005948:	10bfe004 	addi	r2,r2,-128
 200594c:	10801b18 	cmpnei	r2,r2,108
 2005950:	1000031e 	bne	r2,zero,2005960 <___vfprintf_internal_r+0x568>
				fmt++;
 2005954:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2005958:	9cc00814 	ori	r19,r19,32
 200595c:	003f3b06 	br	200564c <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 2005960:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2005964:	003f3906 	br	200564c <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 2005968:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200596c:	003f3706 	br	200564c <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2005970:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2005974:	e0bfe917 	ldw	r2,-92(fp)
 2005978:	10c00104 	addi	r3,r2,4
 200597c:	e0ffe915 	stw	r3,-92(fp)
 2005980:	10800017 	ldw	r2,0(r2)
 2005984:	90800005 	stb	r2,0(r18)
				size = 1;
 2005988:	00800044 	movi	r2,1
 200598c:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 2005990:	e03fc105 	stb	zero,-252(fp)
			break;
 2005994:	00028806 	br	20063b8 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2005998:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200599c:	9880080c 	andi	r2,r19,32
 20059a0:	10000826 	beq	r2,zero,20059c4 <___vfprintf_internal_r+0x5cc>
 20059a4:	e13fe917 	ldw	r4,-92(fp)
 20059a8:	20800204 	addi	r2,r4,8
 20059ac:	e0bfe915 	stw	r2,-92(fp)
 20059b0:	20800017 	ldw	r2,0(r4)
 20059b4:	20c00117 	ldw	r3,4(r4)
 20059b8:	e0bfea15 	stw	r2,-88(fp)
 20059bc:	e0ffeb15 	stw	r3,-84(fp)
 20059c0:	00001e06 	br	2005a3c <___vfprintf_internal_r+0x644>
 20059c4:	9880040c 	andi	r2,r19,16
 20059c8:	10000826 	beq	r2,zero,20059ec <___vfprintf_internal_r+0x5f4>
 20059cc:	e0bfe917 	ldw	r2,-92(fp)
 20059d0:	10c00104 	addi	r3,r2,4
 20059d4:	e0ffe915 	stw	r3,-92(fp)
 20059d8:	10800017 	ldw	r2,0(r2)
 20059dc:	e0bfea15 	stw	r2,-88(fp)
 20059e0:	1005d7fa 	srai	r2,r2,31
 20059e4:	e0bfeb15 	stw	r2,-84(fp)
 20059e8:	00001406 	br	2005a3c <___vfprintf_internal_r+0x644>
 20059ec:	9880100c 	andi	r2,r19,64
 20059f0:	10000b26 	beq	r2,zero,2005a20 <___vfprintf_internal_r+0x628>
 20059f4:	e0bfe917 	ldw	r2,-92(fp)
 20059f8:	10c00104 	addi	r3,r2,4
 20059fc:	e0ffe915 	stw	r3,-92(fp)
 2005a00:	10800017 	ldw	r2,0(r2)
 2005a04:	10bfffcc 	andi	r2,r2,65535
 2005a08:	10a0001c 	xori	r2,r2,32768
 2005a0c:	10a00004 	addi	r2,r2,-32768
 2005a10:	e0bfea15 	stw	r2,-88(fp)
 2005a14:	1005d7fa 	srai	r2,r2,31
 2005a18:	e0bfeb15 	stw	r2,-84(fp)
 2005a1c:	00000706 	br	2005a3c <___vfprintf_internal_r+0x644>
 2005a20:	e0bfe917 	ldw	r2,-92(fp)
 2005a24:	10c00104 	addi	r3,r2,4
 2005a28:	e0ffe915 	stw	r3,-92(fp)
 2005a2c:	10800017 	ldw	r2,0(r2)
 2005a30:	e0bfea15 	stw	r2,-88(fp)
 2005a34:	1005d7fa 	srai	r2,r2,31
 2005a38:	e0bfeb15 	stw	r2,-84(fp)
 2005a3c:	e0bfea17 	ldw	r2,-88(fp)
 2005a40:	e0bfb115 	stw	r2,-316(fp)
 2005a44:	e0ffeb17 	ldw	r3,-84(fp)
 2005a48:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2005a4c:	e0bfb117 	ldw	r2,-316(fp)
 2005a50:	e0ffb217 	ldw	r3,-312(fp)
 2005a54:	18000d0e 	bge	r3,zero,2005a8c <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2005a58:	000f883a 	mov	r7,zero
 2005a5c:	0011883a 	mov	r8,zero
 2005a60:	e13fb117 	ldw	r4,-316(fp)
 2005a64:	e17fb217 	ldw	r5,-312(fp)
 2005a68:	3905c83a 	sub	r2,r7,r4
 2005a6c:	388d803a 	cmpltu	r6,r7,r2
 2005a70:	4147c83a 	sub	r3,r8,r5
 2005a74:	1989c83a 	sub	r4,r3,r6
 2005a78:	2007883a 	mov	r3,r4
 2005a7c:	e0bfb115 	stw	r2,-316(fp)
 2005a80:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 2005a84:	00800b44 	movi	r2,45
 2005a88:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 2005a8c:	00800044 	movi	r2,1
 2005a90:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2005a94:	0001b706 	br	2006174 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2005a98:	9880020c 	andi	r2,r19,8
 2005a9c:	10000826 	beq	r2,zero,2005ac0 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2005aa0:	e13fe917 	ldw	r4,-92(fp)
 2005aa4:	20800204 	addi	r2,r4,8
 2005aa8:	e0bfe915 	stw	r2,-92(fp)
 2005aac:	20800017 	ldw	r2,0(r4)
 2005ab0:	20c00117 	ldw	r3,4(r4)
 2005ab4:	e0bfc215 	stw	r2,-248(fp)
 2005ab8:	e0ffc315 	stw	r3,-244(fp)
 2005abc:	00000706 	br	2005adc <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 2005ac0:	e13fe917 	ldw	r4,-92(fp)
 2005ac4:	20800204 	addi	r2,r4,8
 2005ac8:	e0bfe915 	stw	r2,-92(fp)
 2005acc:	20800017 	ldw	r2,0(r4)
 2005ad0:	20c00117 	ldw	r3,4(r4)
 2005ad4:	e0bfc215 	stw	r2,-248(fp)
 2005ad8:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 2005adc:	e0bfc217 	ldw	r2,-248(fp)
 2005ae0:	e0ffc317 	ldw	r3,-244(fp)
 2005ae4:	1009883a 	mov	r4,r2
 2005ae8:	180b883a 	mov	r5,r3
 2005aec:	20034b80 	call	20034b8 <__fpclassifyd>
 2005af0:	10800058 	cmpnei	r2,r2,1
 2005af4:	1000161e 	bne	r2,zero,2005b50 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 2005af8:	e0bfc217 	ldw	r2,-248(fp)
 2005afc:	e0ffc317 	ldw	r3,-244(fp)
 2005b00:	000d883a 	mov	r6,zero
 2005b04:	000f883a 	mov	r7,zero
 2005b08:	1009883a 	mov	r4,r2
 2005b0c:	180b883a 	mov	r5,r3
 2005b10:	2003f800 	call	2003f80 <__ledf2>
 2005b14:	1000020e 	bge	r2,zero,2005b20 <___vfprintf_internal_r+0x728>
					sign = '-';
 2005b18:	00800b44 	movi	r2,45
 2005b1c:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2005b20:	a0801208 	cmpgei	r2,r20,72
 2005b24:	1000031e 	bne	r2,zero,2005b34 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 2005b28:	048080b4 	movhi	r18,514
 2005b2c:	94babf04 	addi	r18,r18,-5380
 2005b30:	00000206 	br	2005b3c <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 2005b34:	048080b4 	movhi	r18,514
 2005b38:	94bac004 	addi	r18,r18,-5376
				size = 3;
 2005b3c:	008000c4 	movi	r2,3
 2005b40:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2005b44:	00bfdfc4 	movi	r2,-129
 2005b48:	98a6703a 	and	r19,r19,r2
				break;
 2005b4c:	00021a06 	br	20063b8 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 2005b50:	e0bfc217 	ldw	r2,-248(fp)
 2005b54:	e0ffc317 	ldw	r3,-244(fp)
 2005b58:	1009883a 	mov	r4,r2
 2005b5c:	180b883a 	mov	r5,r3
 2005b60:	20034b80 	call	20034b8 <__fpclassifyd>
 2005b64:	10000c1e 	bne	r2,zero,2005b98 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2005b68:	a0801208 	cmpgei	r2,r20,72
 2005b6c:	1000031e 	bne	r2,zero,2005b7c <___vfprintf_internal_r+0x784>
					cp = "NAN";
 2005b70:	048080b4 	movhi	r18,514
 2005b74:	94bac104 	addi	r18,r18,-5372
 2005b78:	00000206 	br	2005b84 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 2005b7c:	048080b4 	movhi	r18,514
 2005b80:	94bac204 	addi	r18,r18,-5368
				size = 3;
 2005b84:	008000c4 	movi	r2,3
 2005b88:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2005b8c:	00bfdfc4 	movi	r2,-129
 2005b90:	98a6703a 	and	r19,r19,r2
				break;
 2005b94:	00020806 	br	20063b8 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 2005b98:	e0bfae17 	ldw	r2,-328(fp)
 2005b9c:	10bfffd8 	cmpnei	r2,r2,-1
 2005ba0:	1000031e 	bne	r2,zero,2005bb0 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2005ba4:	00800184 	movi	r2,6
 2005ba8:	e0bfae15 	stw	r2,-328(fp)
 2005bac:	00000806 	br	2005bd0 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 2005bb0:	a08019e0 	cmpeqi	r2,r20,103
 2005bb4:	1000021e 	bne	r2,zero,2005bc0 <___vfprintf_internal_r+0x7c8>
 2005bb8:	a08011d8 	cmpnei	r2,r20,71
 2005bbc:	1000041e 	bne	r2,zero,2005bd0 <___vfprintf_internal_r+0x7d8>
 2005bc0:	e0bfae17 	ldw	r2,-328(fp)
 2005bc4:	1000021e 	bne	r2,zero,2005bd0 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 2005bc8:	00800044 	movi	r2,1
 2005bcc:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 2005bd0:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 2005bd4:	e0bfc217 	ldw	r2,-248(fp)
 2005bd8:	e0ffc317 	ldw	r3,-244(fp)
 2005bdc:	dc800515 	stw	r18,20(sp)
 2005be0:	e13fc704 	addi	r4,fp,-228
 2005be4:	d9000415 	stw	r4,16(sp)
 2005be8:	dd000315 	stw	r20,12(sp)
 2005bec:	e13fc404 	addi	r4,fp,-240
 2005bf0:	d9000215 	stw	r4,8(sp)
 2005bf4:	e13fc144 	addi	r4,fp,-251
 2005bf8:	d9000115 	stw	r4,4(sp)
 2005bfc:	dcc00015 	stw	r19,0(sp)
 2005c00:	e1ffae17 	ldw	r7,-328(fp)
 2005c04:	100b883a 	mov	r5,r2
 2005c08:	180d883a 	mov	r6,r3
 2005c0c:	e13fe617 	ldw	r4,-104(fp)
 2005c10:	20074c80 	call	20074c8 <cvt>
 2005c14:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 2005c18:	a08019e0 	cmpeqi	r2,r20,103
 2005c1c:	1000021e 	bne	r2,zero,2005c28 <___vfprintf_internal_r+0x830>
 2005c20:	a08011d8 	cmpnei	r2,r20,71
 2005c24:	1000091e 	bne	r2,zero,2005c4c <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 2005c28:	e0bfc417 	ldw	r2,-240(fp)
 2005c2c:	10bfff50 	cmplti	r2,r2,-3
 2005c30:	1000031e 	bne	r2,zero,2005c40 <___vfprintf_internal_r+0x848>
 2005c34:	e0bfc417 	ldw	r2,-240(fp)
 2005c38:	e0ffae17 	ldw	r3,-328(fp)
 2005c3c:	1880020e 	bge	r3,r2,2005c48 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 2005c40:	a53fff84 	addi	r20,r20,-2
 2005c44:	00000106 	br	2005c4c <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 2005c48:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 2005c4c:	a0801988 	cmpgei	r2,r20,102
 2005c50:	1000171e 	bne	r2,zero,2005cb0 <___vfprintf_internal_r+0x8b8>
				--expt;
 2005c54:	e0bfc417 	ldw	r2,-240(fp)
 2005c58:	10bfffc4 	addi	r2,r2,-1
 2005c5c:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 2005c60:	e0bfc417 	ldw	r2,-240(fp)
 2005c64:	e0ffc504 	addi	r3,fp,-236
 2005c68:	a00d883a 	mov	r6,r20
 2005c6c:	100b883a 	mov	r5,r2
 2005c70:	1809883a 	mov	r4,r3
 2005c74:	20076d40 	call	20076d4 <exponent>
 2005c78:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 2005c7c:	e0bfc717 	ldw	r2,-228(fp)
 2005c80:	e0ffaf17 	ldw	r3,-324(fp)
 2005c84:	1885883a 	add	r2,r3,r2
 2005c88:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 2005c8c:	e0bfc717 	ldw	r2,-228(fp)
 2005c90:	10800088 	cmpgei	r2,r2,2
 2005c94:	1000021e 	bne	r2,zero,2005ca0 <___vfprintf_internal_r+0x8a8>
 2005c98:	9880004c 	andi	r2,r19,1
 2005c9c:	10003526 	beq	r2,zero,2005d74 <___vfprintf_internal_r+0x97c>
					++size;
 2005ca0:	e0bfb617 	ldw	r2,-296(fp)
 2005ca4:	10800044 	addi	r2,r2,1
 2005ca8:	e0bfb615 	stw	r2,-296(fp)
 2005cac:	00003106 	br	2005d74 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 2005cb0:	a0801998 	cmpnei	r2,r20,102
 2005cb4:	1000181e 	bne	r2,zero,2005d18 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 2005cb8:	e0bfc417 	ldw	r2,-240(fp)
 2005cbc:	00800c0e 	bge	zero,r2,2005cf0 <___vfprintf_internal_r+0x8f8>
						size = expt;
 2005cc0:	e0bfc417 	ldw	r2,-240(fp)
 2005cc4:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 2005cc8:	e0bfae17 	ldw	r2,-328(fp)
 2005ccc:	1000021e 	bne	r2,zero,2005cd8 <___vfprintf_internal_r+0x8e0>
 2005cd0:	9880004c 	andi	r2,r19,1
 2005cd4:	10002526 	beq	r2,zero,2005d6c <___vfprintf_internal_r+0x974>
							size += prec + 1;
 2005cd8:	e0bfae17 	ldw	r2,-328(fp)
 2005cdc:	10800044 	addi	r2,r2,1
 2005ce0:	e0ffb617 	ldw	r3,-296(fp)
 2005ce4:	1885883a 	add	r2,r3,r2
 2005ce8:	e0bfb615 	stw	r2,-296(fp)
 2005cec:	00001f06 	br	2005d6c <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 2005cf0:	e0bfae17 	ldw	r2,-328(fp)
 2005cf4:	1000021e 	bne	r2,zero,2005d00 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2005cf8:	9880004c 	andi	r2,r19,1
 2005cfc:	10000326 	beq	r2,zero,2005d0c <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 2005d00:	e0bfae17 	ldw	r2,-328(fp)
 2005d04:	10800084 	addi	r2,r2,2
 2005d08:	00000106 	br	2005d10 <___vfprintf_internal_r+0x918>
 2005d0c:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2005d10:	e0bfb615 	stw	r2,-296(fp)
 2005d14:	00001506 	br	2005d6c <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 2005d18:	e0ffc417 	ldw	r3,-240(fp)
 2005d1c:	e0bfc717 	ldw	r2,-228(fp)
 2005d20:	18800816 	blt	r3,r2,2005d44 <___vfprintf_internal_r+0x94c>
					size = expt;
 2005d24:	e0bfc417 	ldw	r2,-240(fp)
 2005d28:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 2005d2c:	9880004c 	andi	r2,r19,1
 2005d30:	10000e26 	beq	r2,zero,2005d6c <___vfprintf_internal_r+0x974>
						++size;
 2005d34:	e0bfb617 	ldw	r2,-296(fp)
 2005d38:	10800044 	addi	r2,r2,1
 2005d3c:	e0bfb615 	stw	r2,-296(fp)
 2005d40:	00000a06 	br	2005d6c <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 2005d44:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 2005d48:	00800416 	blt	zero,r2,2005d5c <___vfprintf_internal_r+0x964>
 2005d4c:	e0bfc417 	ldw	r2,-240(fp)
 2005d50:	00c00084 	movi	r3,2
 2005d54:	1885c83a 	sub	r2,r3,r2
 2005d58:	00000106 	br	2005d60 <___vfprintf_internal_r+0x968>
 2005d5c:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 2005d60:	e0ffc717 	ldw	r3,-228(fp)
 2005d64:	10c5883a 	add	r2,r2,r3
 2005d68:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 2005d6c:	e0bfc417 	ldw	r2,-240(fp)
 2005d70:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 2005d74:	e0bfc143 	ldbu	r2,-251(fp)
 2005d78:	10803fcc 	andi	r2,r2,255
 2005d7c:	1080201c 	xori	r2,r2,128
 2005d80:	10bfe004 	addi	r2,r2,-128
 2005d84:	10018b26 	beq	r2,zero,20063b4 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 2005d88:	00800b44 	movi	r2,45
 2005d8c:	e0bfc105 	stb	r2,-252(fp)
			break;
 2005d90:	00018806 	br	20063b4 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2005d94:	9880080c 	andi	r2,r19,32
 2005d98:	10000d26 	beq	r2,zero,2005dd0 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2005d9c:	e0bfe917 	ldw	r2,-92(fp)
 2005da0:	10c00104 	addi	r3,r2,4
 2005da4:	e0ffe915 	stw	r3,-92(fp)
 2005da8:	10800017 	ldw	r2,0(r2)
 2005dac:	e0ffac17 	ldw	r3,-336(fp)
 2005db0:	e0fff015 	stw	r3,-64(fp)
 2005db4:	1807d7fa 	srai	r3,r3,31
 2005db8:	e0fff115 	stw	r3,-60(fp)
 2005dbc:	e0fff017 	ldw	r3,-64(fp)
 2005dc0:	10c00015 	stw	r3,0(r2)
 2005dc4:	e0fff117 	ldw	r3,-60(fp)
 2005dc8:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005dcc:	00054b06 	br	20072fc <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2005dd0:	9880040c 	andi	r2,r19,16
 2005dd4:	10000726 	beq	r2,zero,2005df4 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2005dd8:	e0bfe917 	ldw	r2,-92(fp)
 2005ddc:	10c00104 	addi	r3,r2,4
 2005de0:	e0ffe915 	stw	r3,-92(fp)
 2005de4:	10800017 	ldw	r2,0(r2)
 2005de8:	e0ffac17 	ldw	r3,-336(fp)
 2005dec:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005df0:	00054206 	br	20072fc <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2005df4:	9880100c 	andi	r2,r19,64
 2005df8:	10000726 	beq	r2,zero,2005e18 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2005dfc:	e0bfe917 	ldw	r2,-92(fp)
 2005e00:	10c00104 	addi	r3,r2,4
 2005e04:	e0ffe915 	stw	r3,-92(fp)
 2005e08:	10800017 	ldw	r2,0(r2)
 2005e0c:	e0ffac17 	ldw	r3,-336(fp)
 2005e10:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005e14:	00053906 	br	20072fc <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2005e18:	e0bfe917 	ldw	r2,-92(fp)
 2005e1c:	10c00104 	addi	r3,r2,4
 2005e20:	e0ffe915 	stw	r3,-92(fp)
 2005e24:	10800017 	ldw	r2,0(r2)
 2005e28:	e0ffac17 	ldw	r3,-336(fp)
 2005e2c:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2005e30:	00053206 	br	20072fc <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 2005e34:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2005e38:	9880080c 	andi	r2,r19,32
 2005e3c:	10000626 	beq	r2,zero,2005e58 <___vfprintf_internal_r+0xa60>
 2005e40:	e0bfe917 	ldw	r2,-92(fp)
 2005e44:	10c00204 	addi	r3,r2,8
 2005e48:	e0ffe915 	stw	r3,-92(fp)
 2005e4c:	15800017 	ldw	r22,0(r2)
 2005e50:	15c00117 	ldw	r23,4(r2)
 2005e54:	00001c06 	br	2005ec8 <___vfprintf_internal_r+0xad0>
 2005e58:	9880040c 	andi	r2,r19,16
 2005e5c:	10000726 	beq	r2,zero,2005e7c <___vfprintf_internal_r+0xa84>
 2005e60:	e0bfe917 	ldw	r2,-92(fp)
 2005e64:	10c00104 	addi	r3,r2,4
 2005e68:	e0ffe915 	stw	r3,-92(fp)
 2005e6c:	10800017 	ldw	r2,0(r2)
 2005e70:	102d883a 	mov	r22,r2
 2005e74:	002f883a 	mov	r23,zero
 2005e78:	00001306 	br	2005ec8 <___vfprintf_internal_r+0xad0>
 2005e7c:	9880100c 	andi	r2,r19,64
 2005e80:	10000b26 	beq	r2,zero,2005eb0 <___vfprintf_internal_r+0xab8>
 2005e84:	e0bfe917 	ldw	r2,-92(fp)
 2005e88:	10c00104 	addi	r3,r2,4
 2005e8c:	e0ffe915 	stw	r3,-92(fp)
 2005e90:	10800017 	ldw	r2,0(r2)
 2005e94:	e0bff215 	stw	r2,-56(fp)
 2005e98:	e03ff315 	stw	zero,-52(fp)
 2005e9c:	e0bff217 	ldw	r2,-56(fp)
 2005ea0:	15bfffcc 	andi	r22,r2,65535
 2005ea4:	e0fff317 	ldw	r3,-52(fp)
 2005ea8:	182e703a 	and	r23,r3,zero
 2005eac:	00000606 	br	2005ec8 <___vfprintf_internal_r+0xad0>
 2005eb0:	e0bfe917 	ldw	r2,-92(fp)
 2005eb4:	10c00104 	addi	r3,r2,4
 2005eb8:	e0ffe915 	stw	r3,-92(fp)
 2005ebc:	10800017 	ldw	r2,0(r2)
 2005ec0:	102d883a 	mov	r22,r2
 2005ec4:	002f883a 	mov	r23,zero
 2005ec8:	e5bfb115 	stw	r22,-316(fp)
 2005ecc:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 2005ed0:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2005ed4:	0000a606 	br	2006170 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2005ed8:	e0bfe917 	ldw	r2,-92(fp)
 2005edc:	10c00104 	addi	r3,r2,4
 2005ee0:	e0ffe915 	stw	r3,-92(fp)
 2005ee4:	10800017 	ldw	r2,0(r2)
 2005ee8:	e0bfb115 	stw	r2,-316(fp)
 2005eec:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 2005ef0:	00800084 	movi	r2,2
 2005ef4:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 2005ef8:	008080b4 	movhi	r2,514
 2005efc:	10bac304 	addi	r2,r2,-5364
 2005f00:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2005f04:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2005f08:	00800c04 	movi	r2,48
 2005f0c:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2005f10:	05001e04 	movi	r20,120
 2005f14:	00801e04 	movi	r2,120
 2005f18:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2005f1c:	00009406 	br	2006170 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2005f20:	e0bfe917 	ldw	r2,-92(fp)
 2005f24:	10c00104 	addi	r3,r2,4
 2005f28:	e0ffe915 	stw	r3,-92(fp)
 2005f2c:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2005f30:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2005f34:	9000081e 	bne	r18,zero,2005f58 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 2005f38:	048080b4 	movhi	r18,514
 2005f3c:	94bac804 	addi	r18,r18,-5344
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2005f40:	e0bfae17 	ldw	r2,-328(fp)
 2005f44:	10c001f0 	cmpltui	r3,r2,7
 2005f48:	1800011e 	bne	r3,zero,2005f50 <___vfprintf_internal_r+0xb58>
 2005f4c:	00800184 	movi	r2,6
 2005f50:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005f54:	00011806 	br	20063b8 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2005f58:	e0bfae17 	ldw	r2,-328(fp)
 2005f5c:	10001016 	blt	r2,zero,2005fa0 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2005f60:	e0bfae17 	ldw	r2,-328(fp)
 2005f64:	100d883a 	mov	r6,r2
 2005f68:	000b883a 	mov	r5,zero
 2005f6c:	9009883a 	mov	r4,r18
 2005f70:	200c4400 	call	200c440 <memchr>
 2005f74:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 2005f78:	e0bfbf17 	ldw	r2,-260(fp)
 2005f7c:	10000526 	beq	r2,zero,2005f94 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 2005f80:	e0bfbf17 	ldw	r2,-260(fp)
 2005f84:	9007883a 	mov	r3,r18
 2005f88:	10c5c83a 	sub	r2,r2,r3
 2005f8c:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005f90:	00010906 	br	20063b8 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2005f94:	e0bfae17 	ldw	r2,-328(fp)
 2005f98:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2005f9c:	00010606 	br	20063b8 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2005fa0:	9009883a 	mov	r4,r18
 2005fa4:	20051c40 	call	20051c4 <strlen>
 2005fa8:	e0bfb615 	stw	r2,-296(fp)

			break;
 2005fac:	00010206 	br	20063b8 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2005fb0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2005fb4:	9880080c 	andi	r2,r19,32
 2005fb8:	10000826 	beq	r2,zero,2005fdc <___vfprintf_internal_r+0xbe4>
 2005fbc:	e0bfe917 	ldw	r2,-92(fp)
 2005fc0:	10c00204 	addi	r3,r2,8
 2005fc4:	e0ffe915 	stw	r3,-92(fp)
 2005fc8:	10c00017 	ldw	r3,0(r2)
 2005fcc:	e0ffec15 	stw	r3,-80(fp)
 2005fd0:	10c00117 	ldw	r3,4(r2)
 2005fd4:	e0ffed15 	stw	r3,-76(fp)
 2005fd8:	00001e06 	br	2006054 <___vfprintf_internal_r+0xc5c>
 2005fdc:	9880040c 	andi	r2,r19,16
 2005fe0:	10000726 	beq	r2,zero,2006000 <___vfprintf_internal_r+0xc08>
 2005fe4:	e0bfe917 	ldw	r2,-92(fp)
 2005fe8:	10c00104 	addi	r3,r2,4
 2005fec:	e0ffe915 	stw	r3,-92(fp)
 2005ff0:	10800017 	ldw	r2,0(r2)
 2005ff4:	e0bfec15 	stw	r2,-80(fp)
 2005ff8:	e03fed15 	stw	zero,-76(fp)
 2005ffc:	00001506 	br	2006054 <___vfprintf_internal_r+0xc5c>
 2006000:	9880100c 	andi	r2,r19,64
 2006004:	10000d26 	beq	r2,zero,200603c <___vfprintf_internal_r+0xc44>
 2006008:	e0bfe917 	ldw	r2,-92(fp)
 200600c:	10c00104 	addi	r3,r2,4
 2006010:	e0ffe915 	stw	r3,-92(fp)
 2006014:	10800017 	ldw	r2,0(r2)
 2006018:	e0bff415 	stw	r2,-48(fp)
 200601c:	e03ff515 	stw	zero,-44(fp)
 2006020:	e0bff417 	ldw	r2,-48(fp)
 2006024:	10bfffcc 	andi	r2,r2,65535
 2006028:	e0bfec15 	stw	r2,-80(fp)
 200602c:	e0fff517 	ldw	r3,-44(fp)
 2006030:	1806703a 	and	r3,r3,zero
 2006034:	e0ffed15 	stw	r3,-76(fp)
 2006038:	00000606 	br	2006054 <___vfprintf_internal_r+0xc5c>
 200603c:	e0bfe917 	ldw	r2,-92(fp)
 2006040:	10c00104 	addi	r3,r2,4
 2006044:	e0ffe915 	stw	r3,-92(fp)
 2006048:	10800017 	ldw	r2,0(r2)
 200604c:	e0bfec15 	stw	r2,-80(fp)
 2006050:	e03fed15 	stw	zero,-76(fp)
 2006054:	e0bfec17 	ldw	r2,-80(fp)
 2006058:	e0bfb115 	stw	r2,-316(fp)
 200605c:	e0ffed17 	ldw	r3,-76(fp)
 2006060:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 2006064:	00800044 	movi	r2,1
 2006068:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 200606c:	00004006 	br	2006170 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2006070:	008080b4 	movhi	r2,514
 2006074:	10baca04 	addi	r2,r2,-5336
 2006078:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 200607c:	00000306 	br	200608c <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 2006080:	008080b4 	movhi	r2,514
 2006084:	10bac304 	addi	r2,r2,-5364
 2006088:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 200608c:	9880080c 	andi	r2,r19,32
 2006090:	10000826 	beq	r2,zero,20060b4 <___vfprintf_internal_r+0xcbc>
 2006094:	e0bfe917 	ldw	r2,-92(fp)
 2006098:	10c00204 	addi	r3,r2,8
 200609c:	e0ffe915 	stw	r3,-92(fp)
 20060a0:	10c00017 	ldw	r3,0(r2)
 20060a4:	e0ffee15 	stw	r3,-72(fp)
 20060a8:	10c00117 	ldw	r3,4(r2)
 20060ac:	e0ffef15 	stw	r3,-68(fp)
 20060b0:	00001e06 	br	200612c <___vfprintf_internal_r+0xd34>
 20060b4:	9880040c 	andi	r2,r19,16
 20060b8:	10000726 	beq	r2,zero,20060d8 <___vfprintf_internal_r+0xce0>
 20060bc:	e0bfe917 	ldw	r2,-92(fp)
 20060c0:	10c00104 	addi	r3,r2,4
 20060c4:	e0ffe915 	stw	r3,-92(fp)
 20060c8:	10800017 	ldw	r2,0(r2)
 20060cc:	e0bfee15 	stw	r2,-72(fp)
 20060d0:	e03fef15 	stw	zero,-68(fp)
 20060d4:	00001506 	br	200612c <___vfprintf_internal_r+0xd34>
 20060d8:	9880100c 	andi	r2,r19,64
 20060dc:	10000d26 	beq	r2,zero,2006114 <___vfprintf_internal_r+0xd1c>
 20060e0:	e0bfe917 	ldw	r2,-92(fp)
 20060e4:	10c00104 	addi	r3,r2,4
 20060e8:	e0ffe915 	stw	r3,-92(fp)
 20060ec:	10800017 	ldw	r2,0(r2)
 20060f0:	e0bff615 	stw	r2,-40(fp)
 20060f4:	e03ff715 	stw	zero,-36(fp)
 20060f8:	e0bff617 	ldw	r2,-40(fp)
 20060fc:	10bfffcc 	andi	r2,r2,65535
 2006100:	e0bfee15 	stw	r2,-72(fp)
 2006104:	e0fff717 	ldw	r3,-36(fp)
 2006108:	1806703a 	and	r3,r3,zero
 200610c:	e0ffef15 	stw	r3,-68(fp)
 2006110:	00000606 	br	200612c <___vfprintf_internal_r+0xd34>
 2006114:	e0bfe917 	ldw	r2,-92(fp)
 2006118:	10c00104 	addi	r3,r2,4
 200611c:	e0ffe915 	stw	r3,-92(fp)
 2006120:	10800017 	ldw	r2,0(r2)
 2006124:	e0bfee15 	stw	r2,-72(fp)
 2006128:	e03fef15 	stw	zero,-68(fp)
 200612c:	e0bfee17 	ldw	r2,-72(fp)
 2006130:	e0bfb115 	stw	r2,-316(fp)
 2006134:	e0ffef17 	ldw	r3,-68(fp)
 2006138:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 200613c:	00800084 	movi	r2,2
 2006140:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2006144:	9880004c 	andi	r2,r19,1
 2006148:	10000926 	beq	r2,zero,2006170 <___vfprintf_internal_r+0xd78>
 200614c:	e0bfb117 	ldw	r2,-316(fp)
 2006150:	e0ffb217 	ldw	r3,-312(fp)
 2006154:	10c4b03a 	or	r2,r2,r3
 2006158:	10000526 	beq	r2,zero,2006170 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 200615c:	00800c04 	movi	r2,48
 2006160:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2006164:	a005883a 	mov	r2,r20
 2006168:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200616c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2006170:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2006174:	e0bfae17 	ldw	r2,-328(fp)
 2006178:	e0bfb415 	stw	r2,-304(fp)
 200617c:	e0bfb417 	ldw	r2,-304(fp)
 2006180:	10000216 	blt	r2,zero,200618c <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 2006184:	00bfdfc4 	movi	r2,-129
 2006188:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200618c:	e4bfdb04 	addi	r18,fp,-148
 2006190:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 2006194:	e0bfb117 	ldw	r2,-316(fp)
 2006198:	e0ffb217 	ldw	r3,-312(fp)
 200619c:	10c4b03a 	or	r2,r2,r3
 20061a0:	1000021e 	bne	r2,zero,20061ac <___vfprintf_internal_r+0xdb4>
 20061a4:	e0bfae17 	ldw	r2,-328(fp)
 20061a8:	10006c26 	beq	r2,zero,200635c <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 20061ac:	e0bfb303 	ldbu	r2,-308(fp)
 20061b0:	10c00060 	cmpeqi	r3,r2,1
 20061b4:	1800211e 	bne	r3,zero,200623c <___vfprintf_internal_r+0xe44>
 20061b8:	10c000a0 	cmpeqi	r3,r2,2
 20061bc:	1800491e 	bne	r3,zero,20062e4 <___vfprintf_internal_r+0xeec>
 20061c0:	10005d1e 	bne	r2,zero,2006338 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 20061c4:	94bfffc4 	addi	r18,r18,-1
 20061c8:	e0bfb117 	ldw	r2,-316(fp)
 20061cc:	108001cc 	andi	r2,r2,7
 20061d0:	10800c04 	addi	r2,r2,48
 20061d4:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 20061d8:	e0bfb217 	ldw	r2,-312(fp)
 20061dc:	1004977a 	slli	r2,r2,29
 20061e0:	e0ffb117 	ldw	r3,-316(fp)
 20061e4:	1806d0fa 	srli	r3,r3,3
 20061e8:	1884b03a 	or	r2,r3,r2
 20061ec:	e0bfb115 	stw	r2,-316(fp)
 20061f0:	e0bfb217 	ldw	r2,-312(fp)
 20061f4:	1004d0fa 	srli	r2,r2,3
 20061f8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 20061fc:	e0bfb117 	ldw	r2,-316(fp)
 2006200:	e0ffb217 	ldw	r3,-312(fp)
 2006204:	10c4b03a 	or	r2,r2,r3
 2006208:	103fee1e 	bne	r2,zero,20061c4 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200620c:	9880004c 	andi	r2,r19,1
 2006210:	10005026 	beq	r2,zero,2006354 <___vfprintf_internal_r+0xf5c>
 2006214:	90800003 	ldbu	r2,0(r18)
 2006218:	10803fcc 	andi	r2,r2,255
 200621c:	1080201c 	xori	r2,r2,128
 2006220:	10bfe004 	addi	r2,r2,-128
 2006224:	10800c20 	cmpeqi	r2,r2,48
 2006228:	10004a1e 	bne	r2,zero,2006354 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 200622c:	94bfffc4 	addi	r18,r18,-1
 2006230:	00800c04 	movi	r2,48
 2006234:	90800005 	stb	r2,0(r18)
					break;
 2006238:	00004606 	br	2006354 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200623c:	e0bfb217 	ldw	r2,-312(fp)
 2006240:	10000a1e 	bne	r2,zero,200626c <___vfprintf_internal_r+0xe74>
 2006244:	e0bfb217 	ldw	r2,-312(fp)
 2006248:	1000031e 	bne	r2,zero,2006258 <___vfprintf_internal_r+0xe60>
 200624c:	e0bfb117 	ldw	r2,-316(fp)
 2006250:	108002a8 	cmpgeui	r2,r2,10
 2006254:	1000051e 	bne	r2,zero,200626c <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 2006258:	94bfffc4 	addi	r18,r18,-1
 200625c:	e0bfb117 	ldw	r2,-316(fp)
 2006260:	10800c04 	addi	r2,r2,48
 2006264:	90800005 	stb	r2,0(r18)
						break;
 2006268:	00003b06 	br	2006358 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200626c:	94bfffc4 	addi	r18,r18,-1
 2006270:	e0bfb117 	ldw	r2,-316(fp)
 2006274:	e0ffb217 	ldw	r3,-312(fp)
 2006278:	01800284 	movi	r6,10
 200627c:	000f883a 	mov	r7,zero
 2006280:	1009883a 	mov	r4,r2
 2006284:	180b883a 	mov	r5,r3
 2006288:	201198c0 	call	201198c <__umoddi3>
 200628c:	1009883a 	mov	r4,r2
 2006290:	180b883a 	mov	r5,r3
 2006294:	2005883a 	mov	r2,r4
 2006298:	2807883a 	mov	r3,r5
 200629c:	10800c04 	addi	r2,r2,48
 20062a0:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 20062a4:	e0bfb117 	ldw	r2,-316(fp)
 20062a8:	e0ffb217 	ldw	r3,-312(fp)
 20062ac:	01800284 	movi	r6,10
 20062b0:	000f883a 	mov	r7,zero
 20062b4:	1009883a 	mov	r4,r2
 20062b8:	180b883a 	mov	r5,r3
 20062bc:	20114140 	call	2011414 <__udivdi3>
 20062c0:	1009883a 	mov	r4,r2
 20062c4:	180b883a 	mov	r5,r3
 20062c8:	e13fb115 	stw	r4,-316(fp)
 20062cc:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 20062d0:	e0bfb117 	ldw	r2,-316(fp)
 20062d4:	e0ffb217 	ldw	r3,-312(fp)
 20062d8:	10c4b03a 	or	r2,r2,r3
 20062dc:	103fe31e 	bne	r2,zero,200626c <___vfprintf_internal_r+0xe74>
					break;
 20062e0:	00001d06 	br	2006358 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 20062e4:	94bfffc4 	addi	r18,r18,-1
 20062e8:	e0bfb117 	ldw	r2,-316(fp)
 20062ec:	108003cc 	andi	r2,r2,15
 20062f0:	e0ffb717 	ldw	r3,-292(fp)
 20062f4:	1885883a 	add	r2,r3,r2
 20062f8:	10800003 	ldbu	r2,0(r2)
 20062fc:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 2006300:	e0bfb217 	ldw	r2,-312(fp)
 2006304:	1004973a 	slli	r2,r2,28
 2006308:	e0ffb117 	ldw	r3,-316(fp)
 200630c:	1806d13a 	srli	r3,r3,4
 2006310:	1884b03a 	or	r2,r3,r2
 2006314:	e0bfb115 	stw	r2,-316(fp)
 2006318:	e0bfb217 	ldw	r2,-312(fp)
 200631c:	1004d13a 	srli	r2,r2,4
 2006320:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2006324:	e0bfb117 	ldw	r2,-316(fp)
 2006328:	e0ffb217 	ldw	r3,-312(fp)
 200632c:	10c4b03a 	or	r2,r2,r3
 2006330:	103fec1e 	bne	r2,zero,20062e4 <___vfprintf_internal_r+0xeec>
					break;
 2006334:	00000806 	br	2006358 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 2006338:	048080b4 	movhi	r18,514
 200633c:	94bacf04 	addi	r18,r18,-5316
					size = strlen (cp);
 2006340:	9009883a 	mov	r4,r18
 2006344:	20051c40 	call	20051c4 <strlen>
 2006348:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 200634c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2006350:	00001906 	br	20063b8 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2006354:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2006358:	00000706 	br	2006378 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200635c:	e0bfb303 	ldbu	r2,-308(fp)
 2006360:	1000051e 	bne	r2,zero,2006378 <___vfprintf_internal_r+0xf80>
 2006364:	9880004c 	andi	r2,r19,1
 2006368:	10000326 	beq	r2,zero,2006378 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 200636c:	94bfffc4 	addi	r18,r18,-1
 2006370:	00800c04 	movi	r2,48
 2006374:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 2006378:	e0bfdb04 	addi	r2,fp,-148
 200637c:	10800a04 	addi	r2,r2,40
 2006380:	1007883a 	mov	r3,r2
 2006384:	9005883a 	mov	r2,r18
 2006388:	1885c83a 	sub	r2,r3,r2
 200638c:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 2006390:	00000906 	br	20063b8 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2006394:	a003dc26 	beq	r20,zero,2007308 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2006398:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 200639c:	a005883a 	mov	r2,r20
 20063a0:	90800005 	stb	r2,0(r18)
			size = 1;
 20063a4:	00800044 	movi	r2,1
 20063a8:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 20063ac:	e03fc105 	stb	zero,-252(fp)
			break;
 20063b0:	00000106 	br	20063b8 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 20063b4:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 20063b8:	e0ffb417 	ldw	r3,-304(fp)
 20063bc:	e0bfb617 	ldw	r2,-296(fp)
 20063c0:	10c0010e 	bge	r2,r3,20063c8 <___vfprintf_internal_r+0xfd0>
 20063c4:	1805883a 	mov	r2,r3
 20063c8:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 20063cc:	e0bfc103 	ldbu	r2,-252(fp)
 20063d0:	10803fcc 	andi	r2,r2,255
 20063d4:	1080201c 	xori	r2,r2,128
 20063d8:	10bfe004 	addi	r2,r2,-128
 20063dc:	10000326 	beq	r2,zero,20063ec <___vfprintf_internal_r+0xff4>
			realsz++;
 20063e0:	e0bfb517 	ldw	r2,-300(fp)
 20063e4:	10800044 	addi	r2,r2,1
 20063e8:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 20063ec:	9880008c 	andi	r2,r19,2
 20063f0:	10000326 	beq	r2,zero,2006400 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 20063f4:	e0bfb517 	ldw	r2,-300(fp)
 20063f8:	10800084 	addi	r2,r2,2
 20063fc:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2006400:	9880210c 	andi	r2,r19,132
 2006404:	1000351e 	bne	r2,zero,20064dc <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 2006408:	e0ffad17 	ldw	r3,-332(fp)
 200640c:	e0bfb517 	ldw	r2,-300(fp)
 2006410:	18a1c83a 	sub	r16,r3,r2
 2006414:	0400310e 	bge	zero,r16,20064dc <___vfprintf_internal_r+0x10e4>
 2006418:	00001706 	br	2006478 <___vfprintf_internal_r+0x1080>
 200641c:	008080b4 	movhi	r2,514
 2006420:	10bad684 	addi	r2,r2,-5286
 2006424:	88800015 	stw	r2,0(r17)
 2006428:	00800404 	movi	r2,16
 200642c:	88800115 	stw	r2,4(r17)
 2006430:	e0bfca17 	ldw	r2,-216(fp)
 2006434:	10800404 	addi	r2,r2,16
 2006438:	e0bfca15 	stw	r2,-216(fp)
 200643c:	8c400204 	addi	r17,r17,8
 2006440:	e0bfc917 	ldw	r2,-220(fp)
 2006444:	10800044 	addi	r2,r2,1
 2006448:	e0bfc915 	stw	r2,-220(fp)
 200644c:	e0bfc917 	ldw	r2,-220(fp)
 2006450:	10800210 	cmplti	r2,r2,8
 2006454:	1000071e 	bne	r2,zero,2006474 <___vfprintf_internal_r+0x107c>
 2006458:	e0bfc804 	addi	r2,fp,-224
 200645c:	100d883a 	mov	r6,r2
 2006460:	e17fe717 	ldw	r5,-100(fp)
 2006464:	e13fe617 	ldw	r4,-104(fp)
 2006468:	200f2800 	call	200f280 <__sprint_r>
 200646c:	1003b41e 	bne	r2,zero,2007340 <___vfprintf_internal_r+0x1f48>
 2006470:	e47fcb04 	addi	r17,fp,-212
 2006474:	843ffc04 	addi	r16,r16,-16
 2006478:	80800448 	cmpgei	r2,r16,17
 200647c:	103fe71e 	bne	r2,zero,200641c <___vfprintf_internal_r+0x1024>
 2006480:	008080b4 	movhi	r2,514
 2006484:	10bad684 	addi	r2,r2,-5286
 2006488:	88800015 	stw	r2,0(r17)
 200648c:	8005883a 	mov	r2,r16
 2006490:	88800115 	stw	r2,4(r17)
 2006494:	e0bfca17 	ldw	r2,-216(fp)
 2006498:	8007883a 	mov	r3,r16
 200649c:	10c5883a 	add	r2,r2,r3
 20064a0:	e0bfca15 	stw	r2,-216(fp)
 20064a4:	8c400204 	addi	r17,r17,8
 20064a8:	e0bfc917 	ldw	r2,-220(fp)
 20064ac:	10800044 	addi	r2,r2,1
 20064b0:	e0bfc915 	stw	r2,-220(fp)
 20064b4:	e0bfc917 	ldw	r2,-220(fp)
 20064b8:	10800210 	cmplti	r2,r2,8
 20064bc:	1000071e 	bne	r2,zero,20064dc <___vfprintf_internal_r+0x10e4>
 20064c0:	e0bfc804 	addi	r2,fp,-224
 20064c4:	100d883a 	mov	r6,r2
 20064c8:	e17fe717 	ldw	r5,-100(fp)
 20064cc:	e13fe617 	ldw	r4,-104(fp)
 20064d0:	200f2800 	call	200f280 <__sprint_r>
 20064d4:	10039c1e 	bne	r2,zero,2007348 <___vfprintf_internal_r+0x1f50>
 20064d8:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 20064dc:	e0bfc103 	ldbu	r2,-252(fp)
 20064e0:	10803fcc 	andi	r2,r2,255
 20064e4:	1080201c 	xori	r2,r2,128
 20064e8:	10bfe004 	addi	r2,r2,-128
 20064ec:	10001526 	beq	r2,zero,2006544 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 20064f0:	e0bfc104 	addi	r2,fp,-252
 20064f4:	88800015 	stw	r2,0(r17)
 20064f8:	00800044 	movi	r2,1
 20064fc:	88800115 	stw	r2,4(r17)
 2006500:	e0bfca17 	ldw	r2,-216(fp)
 2006504:	10800044 	addi	r2,r2,1
 2006508:	e0bfca15 	stw	r2,-216(fp)
 200650c:	8c400204 	addi	r17,r17,8
 2006510:	e0bfc917 	ldw	r2,-220(fp)
 2006514:	10800044 	addi	r2,r2,1
 2006518:	e0bfc915 	stw	r2,-220(fp)
 200651c:	e0bfc917 	ldw	r2,-220(fp)
 2006520:	10800210 	cmplti	r2,r2,8
 2006524:	1000071e 	bne	r2,zero,2006544 <___vfprintf_internal_r+0x114c>
 2006528:	e0bfc804 	addi	r2,fp,-224
 200652c:	100d883a 	mov	r6,r2
 2006530:	e17fe717 	ldw	r5,-100(fp)
 2006534:	e13fe617 	ldw	r4,-104(fp)
 2006538:	200f2800 	call	200f280 <__sprint_r>
 200653c:	1003841e 	bne	r2,zero,2007350 <___vfprintf_internal_r+0x1f58>
 2006540:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 2006544:	9880008c 	andi	r2,r19,2
 2006548:	10001526 	beq	r2,zero,20065a0 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 200654c:	e0bfe504 	addi	r2,fp,-108
 2006550:	88800015 	stw	r2,0(r17)
 2006554:	00800084 	movi	r2,2
 2006558:	88800115 	stw	r2,4(r17)
 200655c:	e0bfca17 	ldw	r2,-216(fp)
 2006560:	10800084 	addi	r2,r2,2
 2006564:	e0bfca15 	stw	r2,-216(fp)
 2006568:	8c400204 	addi	r17,r17,8
 200656c:	e0bfc917 	ldw	r2,-220(fp)
 2006570:	10800044 	addi	r2,r2,1
 2006574:	e0bfc915 	stw	r2,-220(fp)
 2006578:	e0bfc917 	ldw	r2,-220(fp)
 200657c:	10800210 	cmplti	r2,r2,8
 2006580:	1000071e 	bne	r2,zero,20065a0 <___vfprintf_internal_r+0x11a8>
 2006584:	e0bfc804 	addi	r2,fp,-224
 2006588:	100d883a 	mov	r6,r2
 200658c:	e17fe717 	ldw	r5,-100(fp)
 2006590:	e13fe617 	ldw	r4,-104(fp)
 2006594:	200f2800 	call	200f280 <__sprint_r>
 2006598:	10036f1e 	bne	r2,zero,2007358 <___vfprintf_internal_r+0x1f60>
 200659c:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 20065a0:	9880210c 	andi	r2,r19,132
 20065a4:	10802018 	cmpnei	r2,r2,128
 20065a8:	1000351e 	bne	r2,zero,2006680 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 20065ac:	e0ffad17 	ldw	r3,-332(fp)
 20065b0:	e0bfb517 	ldw	r2,-300(fp)
 20065b4:	18a1c83a 	sub	r16,r3,r2
 20065b8:	0400310e 	bge	zero,r16,2006680 <___vfprintf_internal_r+0x1288>
 20065bc:	00001706 	br	200661c <___vfprintf_internal_r+0x1224>
 20065c0:	008080b4 	movhi	r2,514
 20065c4:	10bada84 	addi	r2,r2,-5270
 20065c8:	88800015 	stw	r2,0(r17)
 20065cc:	00800404 	movi	r2,16
 20065d0:	88800115 	stw	r2,4(r17)
 20065d4:	e0bfca17 	ldw	r2,-216(fp)
 20065d8:	10800404 	addi	r2,r2,16
 20065dc:	e0bfca15 	stw	r2,-216(fp)
 20065e0:	8c400204 	addi	r17,r17,8
 20065e4:	e0bfc917 	ldw	r2,-220(fp)
 20065e8:	10800044 	addi	r2,r2,1
 20065ec:	e0bfc915 	stw	r2,-220(fp)
 20065f0:	e0bfc917 	ldw	r2,-220(fp)
 20065f4:	10800210 	cmplti	r2,r2,8
 20065f8:	1000071e 	bne	r2,zero,2006618 <___vfprintf_internal_r+0x1220>
 20065fc:	e0bfc804 	addi	r2,fp,-224
 2006600:	100d883a 	mov	r6,r2
 2006604:	e17fe717 	ldw	r5,-100(fp)
 2006608:	e13fe617 	ldw	r4,-104(fp)
 200660c:	200f2800 	call	200f280 <__sprint_r>
 2006610:	1003531e 	bne	r2,zero,2007360 <___vfprintf_internal_r+0x1f68>
 2006614:	e47fcb04 	addi	r17,fp,-212
 2006618:	843ffc04 	addi	r16,r16,-16
 200661c:	80800448 	cmpgei	r2,r16,17
 2006620:	103fe71e 	bne	r2,zero,20065c0 <___vfprintf_internal_r+0x11c8>
 2006624:	008080b4 	movhi	r2,514
 2006628:	10bada84 	addi	r2,r2,-5270
 200662c:	88800015 	stw	r2,0(r17)
 2006630:	8005883a 	mov	r2,r16
 2006634:	88800115 	stw	r2,4(r17)
 2006638:	e0bfca17 	ldw	r2,-216(fp)
 200663c:	8007883a 	mov	r3,r16
 2006640:	10c5883a 	add	r2,r2,r3
 2006644:	e0bfca15 	stw	r2,-216(fp)
 2006648:	8c400204 	addi	r17,r17,8
 200664c:	e0bfc917 	ldw	r2,-220(fp)
 2006650:	10800044 	addi	r2,r2,1
 2006654:	e0bfc915 	stw	r2,-220(fp)
 2006658:	e0bfc917 	ldw	r2,-220(fp)
 200665c:	10800210 	cmplti	r2,r2,8
 2006660:	1000071e 	bne	r2,zero,2006680 <___vfprintf_internal_r+0x1288>
 2006664:	e0bfc804 	addi	r2,fp,-224
 2006668:	100d883a 	mov	r6,r2
 200666c:	e17fe717 	ldw	r5,-100(fp)
 2006670:	e13fe617 	ldw	r4,-104(fp)
 2006674:	200f2800 	call	200f280 <__sprint_r>
 2006678:	10033b1e 	bne	r2,zero,2007368 <___vfprintf_internal_r+0x1f70>
 200667c:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2006680:	e0ffb417 	ldw	r3,-304(fp)
 2006684:	e0bfb617 	ldw	r2,-296(fp)
 2006688:	18a1c83a 	sub	r16,r3,r2
 200668c:	0400310e 	bge	zero,r16,2006754 <___vfprintf_internal_r+0x135c>
 2006690:	00001706 	br	20066f0 <___vfprintf_internal_r+0x12f8>
 2006694:	008080b4 	movhi	r2,514
 2006698:	10bada84 	addi	r2,r2,-5270
 200669c:	88800015 	stw	r2,0(r17)
 20066a0:	00800404 	movi	r2,16
 20066a4:	88800115 	stw	r2,4(r17)
 20066a8:	e0bfca17 	ldw	r2,-216(fp)
 20066ac:	10800404 	addi	r2,r2,16
 20066b0:	e0bfca15 	stw	r2,-216(fp)
 20066b4:	8c400204 	addi	r17,r17,8
 20066b8:	e0bfc917 	ldw	r2,-220(fp)
 20066bc:	10800044 	addi	r2,r2,1
 20066c0:	e0bfc915 	stw	r2,-220(fp)
 20066c4:	e0bfc917 	ldw	r2,-220(fp)
 20066c8:	10800210 	cmplti	r2,r2,8
 20066cc:	1000071e 	bne	r2,zero,20066ec <___vfprintf_internal_r+0x12f4>
 20066d0:	e0bfc804 	addi	r2,fp,-224
 20066d4:	100d883a 	mov	r6,r2
 20066d8:	e17fe717 	ldw	r5,-100(fp)
 20066dc:	e13fe617 	ldw	r4,-104(fp)
 20066e0:	200f2800 	call	200f280 <__sprint_r>
 20066e4:	1003221e 	bne	r2,zero,2007370 <___vfprintf_internal_r+0x1f78>
 20066e8:	e47fcb04 	addi	r17,fp,-212
 20066ec:	843ffc04 	addi	r16,r16,-16
 20066f0:	80800448 	cmpgei	r2,r16,17
 20066f4:	103fe71e 	bne	r2,zero,2006694 <___vfprintf_internal_r+0x129c>
 20066f8:	008080b4 	movhi	r2,514
 20066fc:	10bada84 	addi	r2,r2,-5270
 2006700:	88800015 	stw	r2,0(r17)
 2006704:	8005883a 	mov	r2,r16
 2006708:	88800115 	stw	r2,4(r17)
 200670c:	e0bfca17 	ldw	r2,-216(fp)
 2006710:	8007883a 	mov	r3,r16
 2006714:	10c5883a 	add	r2,r2,r3
 2006718:	e0bfca15 	stw	r2,-216(fp)
 200671c:	8c400204 	addi	r17,r17,8
 2006720:	e0bfc917 	ldw	r2,-220(fp)
 2006724:	10800044 	addi	r2,r2,1
 2006728:	e0bfc915 	stw	r2,-220(fp)
 200672c:	e0bfc917 	ldw	r2,-220(fp)
 2006730:	10800210 	cmplti	r2,r2,8
 2006734:	1000071e 	bne	r2,zero,2006754 <___vfprintf_internal_r+0x135c>
 2006738:	e0bfc804 	addi	r2,fp,-224
 200673c:	100d883a 	mov	r6,r2
 2006740:	e17fe717 	ldw	r5,-100(fp)
 2006744:	e13fe617 	ldw	r4,-104(fp)
 2006748:	200f2800 	call	200f280 <__sprint_r>
 200674c:	10030a1e 	bne	r2,zero,2007378 <___vfprintf_internal_r+0x1f80>
 2006750:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 2006754:	9880400c 	andi	r2,r19,256
 2006758:	1000161e 	bne	r2,zero,20067b4 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 200675c:	8c800015 	stw	r18,0(r17)
 2006760:	e0bfb617 	ldw	r2,-296(fp)
 2006764:	88800115 	stw	r2,4(r17)
 2006768:	e0ffca17 	ldw	r3,-216(fp)
 200676c:	e0bfb617 	ldw	r2,-296(fp)
 2006770:	1885883a 	add	r2,r3,r2
 2006774:	e0bfca15 	stw	r2,-216(fp)
 2006778:	8c400204 	addi	r17,r17,8
 200677c:	e0bfc917 	ldw	r2,-220(fp)
 2006780:	10800044 	addi	r2,r2,1
 2006784:	e0bfc915 	stw	r2,-220(fp)
 2006788:	e0bfc917 	ldw	r2,-220(fp)
 200678c:	10800210 	cmplti	r2,r2,8
 2006790:	10028c1e 	bne	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
 2006794:	e0bfc804 	addi	r2,fp,-224
 2006798:	100d883a 	mov	r6,r2
 200679c:	e17fe717 	ldw	r5,-100(fp)
 20067a0:	e13fe617 	ldw	r4,-104(fp)
 20067a4:	200f2800 	call	200f280 <__sprint_r>
 20067a8:	1002f51e 	bne	r2,zero,2007380 <___vfprintf_internal_r+0x1f88>
 20067ac:	e47fcb04 	addi	r17,fp,-212
 20067b0:	00028406 	br	20071c4 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 20067b4:	a0801990 	cmplti	r2,r20,102
 20067b8:	1001d11e 	bne	r2,zero,2006f00 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 20067bc:	e0bfc217 	ldw	r2,-248(fp)
 20067c0:	e0ffc317 	ldw	r3,-244(fp)
 20067c4:	000d883a 	mov	r6,zero
 20067c8:	000f883a 	mov	r7,zero
 20067cc:	1009883a 	mov	r4,r2
 20067d0:	180b883a 	mov	r5,r3
 20067d4:	20127700 	call	2012770 <__eqdf2>
 20067d8:	1000661e 	bne	r2,zero,2006974 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 20067dc:	008080b4 	movhi	r2,514
 20067e0:	10bad604 	addi	r2,r2,-5288
 20067e4:	88800015 	stw	r2,0(r17)
 20067e8:	00800044 	movi	r2,1
 20067ec:	88800115 	stw	r2,4(r17)
 20067f0:	e0bfca17 	ldw	r2,-216(fp)
 20067f4:	10800044 	addi	r2,r2,1
 20067f8:	e0bfca15 	stw	r2,-216(fp)
 20067fc:	8c400204 	addi	r17,r17,8
 2006800:	e0bfc917 	ldw	r2,-220(fp)
 2006804:	10800044 	addi	r2,r2,1
 2006808:	e0bfc915 	stw	r2,-220(fp)
 200680c:	e0bfc917 	ldw	r2,-220(fp)
 2006810:	10800210 	cmplti	r2,r2,8
 2006814:	1000071e 	bne	r2,zero,2006834 <___vfprintf_internal_r+0x143c>
 2006818:	e0bfc804 	addi	r2,fp,-224
 200681c:	100d883a 	mov	r6,r2
 2006820:	e17fe717 	ldw	r5,-100(fp)
 2006824:	e13fe617 	ldw	r4,-104(fp)
 2006828:	200f2800 	call	200f280 <__sprint_r>
 200682c:	1002d61e 	bne	r2,zero,2007388 <___vfprintf_internal_r+0x1f90>
 2006830:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 2006834:	e0ffc417 	ldw	r3,-240(fp)
 2006838:	e0bfc717 	ldw	r2,-228(fp)
 200683c:	18800216 	blt	r3,r2,2006848 <___vfprintf_internal_r+0x1450>
 2006840:	9880004c 	andi	r2,r19,1
 2006844:	10025f26 	beq	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2006848:	e0bfbb17 	ldw	r2,-276(fp)
 200684c:	88800015 	stw	r2,0(r17)
 2006850:	e0bfbc17 	ldw	r2,-272(fp)
 2006854:	88800115 	stw	r2,4(r17)
 2006858:	e0ffca17 	ldw	r3,-216(fp)
 200685c:	e0bfbc17 	ldw	r2,-272(fp)
 2006860:	1885883a 	add	r2,r3,r2
 2006864:	e0bfca15 	stw	r2,-216(fp)
 2006868:	8c400204 	addi	r17,r17,8
 200686c:	e0bfc917 	ldw	r2,-220(fp)
 2006870:	10800044 	addi	r2,r2,1
 2006874:	e0bfc915 	stw	r2,-220(fp)
 2006878:	e0bfc917 	ldw	r2,-220(fp)
 200687c:	10800210 	cmplti	r2,r2,8
 2006880:	1000071e 	bne	r2,zero,20068a0 <___vfprintf_internal_r+0x14a8>
 2006884:	e0bfc804 	addi	r2,fp,-224
 2006888:	100d883a 	mov	r6,r2
 200688c:	e17fe717 	ldw	r5,-100(fp)
 2006890:	e13fe617 	ldw	r4,-104(fp)
 2006894:	200f2800 	call	200f280 <__sprint_r>
 2006898:	1002bd1e 	bne	r2,zero,2007390 <___vfprintf_internal_r+0x1f98>
 200689c:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 20068a0:	e0bfc717 	ldw	r2,-228(fp)
 20068a4:	143fffc4 	addi	r16,r2,-1
 20068a8:	0402460e 	bge	zero,r16,20071c4 <___vfprintf_internal_r+0x1dcc>
 20068ac:	00001706 	br	200690c <___vfprintf_internal_r+0x1514>
 20068b0:	008080b4 	movhi	r2,514
 20068b4:	10bada84 	addi	r2,r2,-5270
 20068b8:	88800015 	stw	r2,0(r17)
 20068bc:	00800404 	movi	r2,16
 20068c0:	88800115 	stw	r2,4(r17)
 20068c4:	e0bfca17 	ldw	r2,-216(fp)
 20068c8:	10800404 	addi	r2,r2,16
 20068cc:	e0bfca15 	stw	r2,-216(fp)
 20068d0:	8c400204 	addi	r17,r17,8
 20068d4:	e0bfc917 	ldw	r2,-220(fp)
 20068d8:	10800044 	addi	r2,r2,1
 20068dc:	e0bfc915 	stw	r2,-220(fp)
 20068e0:	e0bfc917 	ldw	r2,-220(fp)
 20068e4:	10800210 	cmplti	r2,r2,8
 20068e8:	1000071e 	bne	r2,zero,2006908 <___vfprintf_internal_r+0x1510>
 20068ec:	e0bfc804 	addi	r2,fp,-224
 20068f0:	100d883a 	mov	r6,r2
 20068f4:	e17fe717 	ldw	r5,-100(fp)
 20068f8:	e13fe617 	ldw	r4,-104(fp)
 20068fc:	200f2800 	call	200f280 <__sprint_r>
 2006900:	1002a51e 	bne	r2,zero,2007398 <___vfprintf_internal_r+0x1fa0>
 2006904:	e47fcb04 	addi	r17,fp,-212
 2006908:	843ffc04 	addi	r16,r16,-16
 200690c:	80800448 	cmpgei	r2,r16,17
 2006910:	103fe71e 	bne	r2,zero,20068b0 <___vfprintf_internal_r+0x14b8>
 2006914:	008080b4 	movhi	r2,514
 2006918:	10bada84 	addi	r2,r2,-5270
 200691c:	88800015 	stw	r2,0(r17)
 2006920:	8005883a 	mov	r2,r16
 2006924:	88800115 	stw	r2,4(r17)
 2006928:	e0bfca17 	ldw	r2,-216(fp)
 200692c:	8007883a 	mov	r3,r16
 2006930:	10c5883a 	add	r2,r2,r3
 2006934:	e0bfca15 	stw	r2,-216(fp)
 2006938:	8c400204 	addi	r17,r17,8
 200693c:	e0bfc917 	ldw	r2,-220(fp)
 2006940:	10800044 	addi	r2,r2,1
 2006944:	e0bfc915 	stw	r2,-220(fp)
 2006948:	e0bfc917 	ldw	r2,-220(fp)
 200694c:	10800210 	cmplti	r2,r2,8
 2006950:	10021c1e 	bne	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
 2006954:	e0bfc804 	addi	r2,fp,-224
 2006958:	100d883a 	mov	r6,r2
 200695c:	e17fe717 	ldw	r5,-100(fp)
 2006960:	e13fe617 	ldw	r4,-104(fp)
 2006964:	200f2800 	call	200f280 <__sprint_r>
 2006968:	10028d1e 	bne	r2,zero,20073a0 <___vfprintf_internal_r+0x1fa8>
 200696c:	e47fcb04 	addi	r17,fp,-212
 2006970:	00021406 	br	20071c4 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 2006974:	e0bfc417 	ldw	r2,-240(fp)
 2006978:	00807c16 	blt	zero,r2,2006b6c <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 200697c:	008080b4 	movhi	r2,514
 2006980:	10bad604 	addi	r2,r2,-5288
 2006984:	88800015 	stw	r2,0(r17)
 2006988:	00800044 	movi	r2,1
 200698c:	88800115 	stw	r2,4(r17)
 2006990:	e0bfca17 	ldw	r2,-216(fp)
 2006994:	10800044 	addi	r2,r2,1
 2006998:	e0bfca15 	stw	r2,-216(fp)
 200699c:	8c400204 	addi	r17,r17,8
 20069a0:	e0bfc917 	ldw	r2,-220(fp)
 20069a4:	10800044 	addi	r2,r2,1
 20069a8:	e0bfc915 	stw	r2,-220(fp)
 20069ac:	e0bfc917 	ldw	r2,-220(fp)
 20069b0:	10800210 	cmplti	r2,r2,8
 20069b4:	1000071e 	bne	r2,zero,20069d4 <___vfprintf_internal_r+0x15dc>
 20069b8:	e0bfc804 	addi	r2,fp,-224
 20069bc:	100d883a 	mov	r6,r2
 20069c0:	e17fe717 	ldw	r5,-100(fp)
 20069c4:	e13fe617 	ldw	r4,-104(fp)
 20069c8:	200f2800 	call	200f280 <__sprint_r>
 20069cc:	1002761e 	bne	r2,zero,20073a8 <___vfprintf_internal_r+0x1fb0>
 20069d0:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 20069d4:	e0bfc417 	ldw	r2,-240(fp)
 20069d8:	1000041e 	bne	r2,zero,20069ec <___vfprintf_internal_r+0x15f4>
 20069dc:	e0bfc717 	ldw	r2,-228(fp)
 20069e0:	1000021e 	bne	r2,zero,20069ec <___vfprintf_internal_r+0x15f4>
 20069e4:	9880004c 	andi	r2,r19,1
 20069e8:	1001f626 	beq	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 20069ec:	e0bfbb17 	ldw	r2,-276(fp)
 20069f0:	88800015 	stw	r2,0(r17)
 20069f4:	e0bfbc17 	ldw	r2,-272(fp)
 20069f8:	88800115 	stw	r2,4(r17)
 20069fc:	e0ffca17 	ldw	r3,-216(fp)
 2006a00:	e0bfbc17 	ldw	r2,-272(fp)
 2006a04:	1885883a 	add	r2,r3,r2
 2006a08:	e0bfca15 	stw	r2,-216(fp)
 2006a0c:	8c400204 	addi	r17,r17,8
 2006a10:	e0bfc917 	ldw	r2,-220(fp)
 2006a14:	10800044 	addi	r2,r2,1
 2006a18:	e0bfc915 	stw	r2,-220(fp)
 2006a1c:	e0bfc917 	ldw	r2,-220(fp)
 2006a20:	10800210 	cmplti	r2,r2,8
 2006a24:	1000071e 	bne	r2,zero,2006a44 <___vfprintf_internal_r+0x164c>
 2006a28:	e0bfc804 	addi	r2,fp,-224
 2006a2c:	100d883a 	mov	r6,r2
 2006a30:	e17fe717 	ldw	r5,-100(fp)
 2006a34:	e13fe617 	ldw	r4,-104(fp)
 2006a38:	200f2800 	call	200f280 <__sprint_r>
 2006a3c:	10025c1e 	bne	r2,zero,20073b0 <___vfprintf_internal_r+0x1fb8>
 2006a40:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 2006a44:	e0bfc417 	ldw	r2,-240(fp)
 2006a48:	00a1c83a 	sub	r16,zero,r2
 2006a4c:	0400310e 	bge	zero,r16,2006b14 <___vfprintf_internal_r+0x171c>
 2006a50:	00001706 	br	2006ab0 <___vfprintf_internal_r+0x16b8>
 2006a54:	008080b4 	movhi	r2,514
 2006a58:	10bada84 	addi	r2,r2,-5270
 2006a5c:	88800015 	stw	r2,0(r17)
 2006a60:	00800404 	movi	r2,16
 2006a64:	88800115 	stw	r2,4(r17)
 2006a68:	e0bfca17 	ldw	r2,-216(fp)
 2006a6c:	10800404 	addi	r2,r2,16
 2006a70:	e0bfca15 	stw	r2,-216(fp)
 2006a74:	8c400204 	addi	r17,r17,8
 2006a78:	e0bfc917 	ldw	r2,-220(fp)
 2006a7c:	10800044 	addi	r2,r2,1
 2006a80:	e0bfc915 	stw	r2,-220(fp)
 2006a84:	e0bfc917 	ldw	r2,-220(fp)
 2006a88:	10800210 	cmplti	r2,r2,8
 2006a8c:	1000071e 	bne	r2,zero,2006aac <___vfprintf_internal_r+0x16b4>
 2006a90:	e0bfc804 	addi	r2,fp,-224
 2006a94:	100d883a 	mov	r6,r2
 2006a98:	e17fe717 	ldw	r5,-100(fp)
 2006a9c:	e13fe617 	ldw	r4,-104(fp)
 2006aa0:	200f2800 	call	200f280 <__sprint_r>
 2006aa4:	1002441e 	bne	r2,zero,20073b8 <___vfprintf_internal_r+0x1fc0>
 2006aa8:	e47fcb04 	addi	r17,fp,-212
 2006aac:	843ffc04 	addi	r16,r16,-16
 2006ab0:	80800448 	cmpgei	r2,r16,17
 2006ab4:	103fe71e 	bne	r2,zero,2006a54 <___vfprintf_internal_r+0x165c>
 2006ab8:	008080b4 	movhi	r2,514
 2006abc:	10bada84 	addi	r2,r2,-5270
 2006ac0:	88800015 	stw	r2,0(r17)
 2006ac4:	8005883a 	mov	r2,r16
 2006ac8:	88800115 	stw	r2,4(r17)
 2006acc:	e0bfca17 	ldw	r2,-216(fp)
 2006ad0:	8007883a 	mov	r3,r16
 2006ad4:	10c5883a 	add	r2,r2,r3
 2006ad8:	e0bfca15 	stw	r2,-216(fp)
 2006adc:	8c400204 	addi	r17,r17,8
 2006ae0:	e0bfc917 	ldw	r2,-220(fp)
 2006ae4:	10800044 	addi	r2,r2,1
 2006ae8:	e0bfc915 	stw	r2,-220(fp)
 2006aec:	e0bfc917 	ldw	r2,-220(fp)
 2006af0:	10800210 	cmplti	r2,r2,8
 2006af4:	1000071e 	bne	r2,zero,2006b14 <___vfprintf_internal_r+0x171c>
 2006af8:	e0bfc804 	addi	r2,fp,-224
 2006afc:	100d883a 	mov	r6,r2
 2006b00:	e17fe717 	ldw	r5,-100(fp)
 2006b04:	e13fe617 	ldw	r4,-104(fp)
 2006b08:	200f2800 	call	200f280 <__sprint_r>
 2006b0c:	10022c1e 	bne	r2,zero,20073c0 <___vfprintf_internal_r+0x1fc8>
 2006b10:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 2006b14:	8c800015 	stw	r18,0(r17)
 2006b18:	e0bfc717 	ldw	r2,-228(fp)
 2006b1c:	88800115 	stw	r2,4(r17)
 2006b20:	e0bfca17 	ldw	r2,-216(fp)
 2006b24:	e0ffc717 	ldw	r3,-228(fp)
 2006b28:	10c5883a 	add	r2,r2,r3
 2006b2c:	e0bfca15 	stw	r2,-216(fp)
 2006b30:	8c400204 	addi	r17,r17,8
 2006b34:	e0bfc917 	ldw	r2,-220(fp)
 2006b38:	10800044 	addi	r2,r2,1
 2006b3c:	e0bfc915 	stw	r2,-220(fp)
 2006b40:	e0bfc917 	ldw	r2,-220(fp)
 2006b44:	10800210 	cmplti	r2,r2,8
 2006b48:	10019e1e 	bne	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
 2006b4c:	e0bfc804 	addi	r2,fp,-224
 2006b50:	100d883a 	mov	r6,r2
 2006b54:	e17fe717 	ldw	r5,-100(fp)
 2006b58:	e13fe617 	ldw	r4,-104(fp)
 2006b5c:	200f2800 	call	200f280 <__sprint_r>
 2006b60:	1002191e 	bne	r2,zero,20073c8 <___vfprintf_internal_r+0x1fd0>
 2006b64:	e47fcb04 	addi	r17,fp,-212
 2006b68:	00019606 	br	20071c4 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 2006b6c:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 2006b70:	e0bfc717 	ldw	r2,-228(fp)
 2006b74:	1007883a 	mov	r3,r2
 2006b78:	e0bfc017 	ldw	r2,-256(fp)
 2006b7c:	10c5883a 	add	r2,r2,r3
 2006b80:	1007883a 	mov	r3,r2
 2006b84:	9005883a 	mov	r2,r18
 2006b88:	1885c83a 	sub	r2,r3,r2
 2006b8c:	e0bfb915 	stw	r2,-284(fp)
 2006b90:	e0bfb917 	ldw	r2,-284(fp)
 2006b94:	e0ffb017 	ldw	r3,-320(fp)
 2006b98:	1880020e 	bge	r3,r2,2006ba4 <___vfprintf_internal_r+0x17ac>
 2006b9c:	e0bfb017 	ldw	r2,-320(fp)
 2006ba0:	e0bfb915 	stw	r2,-284(fp)
 2006ba4:	e0bfb917 	ldw	r2,-284(fp)
 2006ba8:	0080150e 	bge	zero,r2,2006c00 <___vfprintf_internal_r+0x1808>
 2006bac:	8c800015 	stw	r18,0(r17)
 2006bb0:	e0bfb917 	ldw	r2,-284(fp)
 2006bb4:	88800115 	stw	r2,4(r17)
 2006bb8:	e0ffca17 	ldw	r3,-216(fp)
 2006bbc:	e0bfb917 	ldw	r2,-284(fp)
 2006bc0:	1885883a 	add	r2,r3,r2
 2006bc4:	e0bfca15 	stw	r2,-216(fp)
 2006bc8:	8c400204 	addi	r17,r17,8
 2006bcc:	e0bfc917 	ldw	r2,-220(fp)
 2006bd0:	10800044 	addi	r2,r2,1
 2006bd4:	e0bfc915 	stw	r2,-220(fp)
 2006bd8:	e0bfc917 	ldw	r2,-220(fp)
 2006bdc:	10800210 	cmplti	r2,r2,8
 2006be0:	1000071e 	bne	r2,zero,2006c00 <___vfprintf_internal_r+0x1808>
 2006be4:	e0bfc804 	addi	r2,fp,-224
 2006be8:	100d883a 	mov	r6,r2
 2006bec:	e17fe717 	ldw	r5,-100(fp)
 2006bf0:	e13fe617 	ldw	r4,-104(fp)
 2006bf4:	200f2800 	call	200f280 <__sprint_r>
 2006bf8:	1001f51e 	bne	r2,zero,20073d0 <___vfprintf_internal_r+0x1fd8>
 2006bfc:	e47fcb04 	addi	r17,fp,-212
 2006c00:	e0bfb917 	ldw	r2,-284(fp)
 2006c04:	1000010e 	bge	r2,zero,2006c0c <___vfprintf_internal_r+0x1814>
 2006c08:	0005883a 	mov	r2,zero
 2006c0c:	e0ffb017 	ldw	r3,-320(fp)
 2006c10:	1885c83a 	sub	r2,r3,r2
 2006c14:	e0bfb915 	stw	r2,-284(fp)
 2006c18:	e0bfb917 	ldw	r2,-284(fp)
 2006c1c:	0080340e 	bge	zero,r2,2006cf0 <___vfprintf_internal_r+0x18f8>
 2006c20:	00001906 	br	2006c88 <___vfprintf_internal_r+0x1890>
 2006c24:	008080b4 	movhi	r2,514
 2006c28:	10bada84 	addi	r2,r2,-5270
 2006c2c:	88800015 	stw	r2,0(r17)
 2006c30:	00800404 	movi	r2,16
 2006c34:	88800115 	stw	r2,4(r17)
 2006c38:	e0bfca17 	ldw	r2,-216(fp)
 2006c3c:	10800404 	addi	r2,r2,16
 2006c40:	e0bfca15 	stw	r2,-216(fp)
 2006c44:	8c400204 	addi	r17,r17,8
 2006c48:	e0bfc917 	ldw	r2,-220(fp)
 2006c4c:	10800044 	addi	r2,r2,1
 2006c50:	e0bfc915 	stw	r2,-220(fp)
 2006c54:	e0bfc917 	ldw	r2,-220(fp)
 2006c58:	10800210 	cmplti	r2,r2,8
 2006c5c:	1000071e 	bne	r2,zero,2006c7c <___vfprintf_internal_r+0x1884>
 2006c60:	e0bfc804 	addi	r2,fp,-224
 2006c64:	100d883a 	mov	r6,r2
 2006c68:	e17fe717 	ldw	r5,-100(fp)
 2006c6c:	e13fe617 	ldw	r4,-104(fp)
 2006c70:	200f2800 	call	200f280 <__sprint_r>
 2006c74:	1001d81e 	bne	r2,zero,20073d8 <___vfprintf_internal_r+0x1fe0>
 2006c78:	e47fcb04 	addi	r17,fp,-212
 2006c7c:	e0bfb917 	ldw	r2,-284(fp)
 2006c80:	10bffc04 	addi	r2,r2,-16
 2006c84:	e0bfb915 	stw	r2,-284(fp)
 2006c88:	e0bfb917 	ldw	r2,-284(fp)
 2006c8c:	10800448 	cmpgei	r2,r2,17
 2006c90:	103fe41e 	bne	r2,zero,2006c24 <___vfprintf_internal_r+0x182c>
 2006c94:	008080b4 	movhi	r2,514
 2006c98:	10bada84 	addi	r2,r2,-5270
 2006c9c:	88800015 	stw	r2,0(r17)
 2006ca0:	e0bfb917 	ldw	r2,-284(fp)
 2006ca4:	88800115 	stw	r2,4(r17)
 2006ca8:	e0ffca17 	ldw	r3,-216(fp)
 2006cac:	e0bfb917 	ldw	r2,-284(fp)
 2006cb0:	1885883a 	add	r2,r3,r2
 2006cb4:	e0bfca15 	stw	r2,-216(fp)
 2006cb8:	8c400204 	addi	r17,r17,8
 2006cbc:	e0bfc917 	ldw	r2,-220(fp)
 2006cc0:	10800044 	addi	r2,r2,1
 2006cc4:	e0bfc915 	stw	r2,-220(fp)
 2006cc8:	e0bfc917 	ldw	r2,-220(fp)
 2006ccc:	10800210 	cmplti	r2,r2,8
 2006cd0:	1000071e 	bne	r2,zero,2006cf0 <___vfprintf_internal_r+0x18f8>
 2006cd4:	e0bfc804 	addi	r2,fp,-224
 2006cd8:	100d883a 	mov	r6,r2
 2006cdc:	e17fe717 	ldw	r5,-100(fp)
 2006ce0:	e13fe617 	ldw	r4,-104(fp)
 2006ce4:	200f2800 	call	200f280 <__sprint_r>
 2006ce8:	1001bd1e 	bne	r2,zero,20073e0 <___vfprintf_internal_r+0x1fe8>
 2006cec:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 2006cf0:	e0bfb017 	ldw	r2,-320(fp)
 2006cf4:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 2006cf8:	e0ffc417 	ldw	r3,-240(fp)
 2006cfc:	e0bfc717 	ldw	r2,-228(fp)
 2006d00:	18800216 	blt	r3,r2,2006d0c <___vfprintf_internal_r+0x1914>
 2006d04:	9880004c 	andi	r2,r19,1
 2006d08:	10001626 	beq	r2,zero,2006d64 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 2006d0c:	e0bfbb17 	ldw	r2,-276(fp)
 2006d10:	88800015 	stw	r2,0(r17)
 2006d14:	e0bfbc17 	ldw	r2,-272(fp)
 2006d18:	88800115 	stw	r2,4(r17)
 2006d1c:	e0ffca17 	ldw	r3,-216(fp)
 2006d20:	e0bfbc17 	ldw	r2,-272(fp)
 2006d24:	1885883a 	add	r2,r3,r2
 2006d28:	e0bfca15 	stw	r2,-216(fp)
 2006d2c:	8c400204 	addi	r17,r17,8
 2006d30:	e0bfc917 	ldw	r2,-220(fp)
 2006d34:	10800044 	addi	r2,r2,1
 2006d38:	e0bfc915 	stw	r2,-220(fp)
 2006d3c:	e0bfc917 	ldw	r2,-220(fp)
 2006d40:	10800210 	cmplti	r2,r2,8
 2006d44:	1000071e 	bne	r2,zero,2006d64 <___vfprintf_internal_r+0x196c>
 2006d48:	e0bfc804 	addi	r2,fp,-224
 2006d4c:	100d883a 	mov	r6,r2
 2006d50:	e17fe717 	ldw	r5,-100(fp)
 2006d54:	e13fe617 	ldw	r4,-104(fp)
 2006d58:	200f2800 	call	200f280 <__sprint_r>
 2006d5c:	1001a21e 	bne	r2,zero,20073e8 <___vfprintf_internal_r+0x1ff0>
 2006d60:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 2006d64:	e0bfc717 	ldw	r2,-228(fp)
 2006d68:	1007883a 	mov	r3,r2
 2006d6c:	e0bfc017 	ldw	r2,-256(fp)
 2006d70:	10c5883a 	add	r2,r2,r3
 2006d74:	1007883a 	mov	r3,r2
 2006d78:	9005883a 	mov	r2,r18
 2006d7c:	1885c83a 	sub	r2,r3,r2
 2006d80:	e0bfba15 	stw	r2,-280(fp)
 2006d84:	e0ffc717 	ldw	r3,-228(fp)
 2006d88:	e0bfc417 	ldw	r2,-240(fp)
 2006d8c:	1887c83a 	sub	r3,r3,r2
 2006d90:	e0bfba17 	ldw	r2,-280(fp)
 2006d94:	1880040e 	bge	r3,r2,2006da8 <___vfprintf_internal_r+0x19b0>
 2006d98:	e0ffc717 	ldw	r3,-228(fp)
 2006d9c:	e0bfc417 	ldw	r2,-240(fp)
 2006da0:	1885c83a 	sub	r2,r3,r2
 2006da4:	e0bfba15 	stw	r2,-280(fp)
 2006da8:	e0bfba17 	ldw	r2,-280(fp)
 2006dac:	0080150e 	bge	zero,r2,2006e04 <___vfprintf_internal_r+0x1a0c>
 2006db0:	8c800015 	stw	r18,0(r17)
 2006db4:	e0bfba17 	ldw	r2,-280(fp)
 2006db8:	88800115 	stw	r2,4(r17)
 2006dbc:	e0ffca17 	ldw	r3,-216(fp)
 2006dc0:	e0bfba17 	ldw	r2,-280(fp)
 2006dc4:	1885883a 	add	r2,r3,r2
 2006dc8:	e0bfca15 	stw	r2,-216(fp)
 2006dcc:	8c400204 	addi	r17,r17,8
 2006dd0:	e0bfc917 	ldw	r2,-220(fp)
 2006dd4:	10800044 	addi	r2,r2,1
 2006dd8:	e0bfc915 	stw	r2,-220(fp)
 2006ddc:	e0bfc917 	ldw	r2,-220(fp)
 2006de0:	10800210 	cmplti	r2,r2,8
 2006de4:	1000071e 	bne	r2,zero,2006e04 <___vfprintf_internal_r+0x1a0c>
 2006de8:	e0bfc804 	addi	r2,fp,-224
 2006dec:	100d883a 	mov	r6,r2
 2006df0:	e17fe717 	ldw	r5,-100(fp)
 2006df4:	e13fe617 	ldw	r4,-104(fp)
 2006df8:	200f2800 	call	200f280 <__sprint_r>
 2006dfc:	10017c1e 	bne	r2,zero,20073f0 <___vfprintf_internal_r+0x1ff8>
 2006e00:	e47fcb04 	addi	r17,fp,-212
 2006e04:	e0ffc717 	ldw	r3,-228(fp)
 2006e08:	e0bfc417 	ldw	r2,-240(fp)
 2006e0c:	1887c83a 	sub	r3,r3,r2
 2006e10:	e0bfba17 	ldw	r2,-280(fp)
 2006e14:	1000010e 	bge	r2,zero,2006e1c <___vfprintf_internal_r+0x1a24>
 2006e18:	0005883a 	mov	r2,zero
 2006e1c:	1885c83a 	sub	r2,r3,r2
 2006e20:	e0bfba15 	stw	r2,-280(fp)
 2006e24:	e0bfba17 	ldw	r2,-280(fp)
 2006e28:	0080e60e 	bge	zero,r2,20071c4 <___vfprintf_internal_r+0x1dcc>
 2006e2c:	00001906 	br	2006e94 <___vfprintf_internal_r+0x1a9c>
 2006e30:	008080b4 	movhi	r2,514
 2006e34:	10bada84 	addi	r2,r2,-5270
 2006e38:	88800015 	stw	r2,0(r17)
 2006e3c:	00800404 	movi	r2,16
 2006e40:	88800115 	stw	r2,4(r17)
 2006e44:	e0bfca17 	ldw	r2,-216(fp)
 2006e48:	10800404 	addi	r2,r2,16
 2006e4c:	e0bfca15 	stw	r2,-216(fp)
 2006e50:	8c400204 	addi	r17,r17,8
 2006e54:	e0bfc917 	ldw	r2,-220(fp)
 2006e58:	10800044 	addi	r2,r2,1
 2006e5c:	e0bfc915 	stw	r2,-220(fp)
 2006e60:	e0bfc917 	ldw	r2,-220(fp)
 2006e64:	10800210 	cmplti	r2,r2,8
 2006e68:	1000071e 	bne	r2,zero,2006e88 <___vfprintf_internal_r+0x1a90>
 2006e6c:	e0bfc804 	addi	r2,fp,-224
 2006e70:	100d883a 	mov	r6,r2
 2006e74:	e17fe717 	ldw	r5,-100(fp)
 2006e78:	e13fe617 	ldw	r4,-104(fp)
 2006e7c:	200f2800 	call	200f280 <__sprint_r>
 2006e80:	10015d1e 	bne	r2,zero,20073f8 <___vfprintf_internal_r+0x2000>
 2006e84:	e47fcb04 	addi	r17,fp,-212
 2006e88:	e0bfba17 	ldw	r2,-280(fp)
 2006e8c:	10bffc04 	addi	r2,r2,-16
 2006e90:	e0bfba15 	stw	r2,-280(fp)
 2006e94:	e0bfba17 	ldw	r2,-280(fp)
 2006e98:	10800448 	cmpgei	r2,r2,17
 2006e9c:	103fe41e 	bne	r2,zero,2006e30 <___vfprintf_internal_r+0x1a38>
 2006ea0:	008080b4 	movhi	r2,514
 2006ea4:	10bada84 	addi	r2,r2,-5270
 2006ea8:	88800015 	stw	r2,0(r17)
 2006eac:	e0bfba17 	ldw	r2,-280(fp)
 2006eb0:	88800115 	stw	r2,4(r17)
 2006eb4:	e0ffca17 	ldw	r3,-216(fp)
 2006eb8:	e0bfba17 	ldw	r2,-280(fp)
 2006ebc:	1885883a 	add	r2,r3,r2
 2006ec0:	e0bfca15 	stw	r2,-216(fp)
 2006ec4:	8c400204 	addi	r17,r17,8
 2006ec8:	e0bfc917 	ldw	r2,-220(fp)
 2006ecc:	10800044 	addi	r2,r2,1
 2006ed0:	e0bfc915 	stw	r2,-220(fp)
 2006ed4:	e0bfc917 	ldw	r2,-220(fp)
 2006ed8:	10800210 	cmplti	r2,r2,8
 2006edc:	1000b91e 	bne	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
 2006ee0:	e0bfc804 	addi	r2,fp,-224
 2006ee4:	100d883a 	mov	r6,r2
 2006ee8:	e17fe717 	ldw	r5,-100(fp)
 2006eec:	e13fe617 	ldw	r4,-104(fp)
 2006ef0:	200f2800 	call	200f280 <__sprint_r>
 2006ef4:	1001421e 	bne	r2,zero,2007400 <___vfprintf_internal_r+0x2008>
 2006ef8:	e47fcb04 	addi	r17,fp,-212
 2006efc:	0000b106 	br	20071c4 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 2006f00:	e0bfc717 	ldw	r2,-228(fp)
 2006f04:	10800088 	cmpgei	r2,r2,2
 2006f08:	1000021e 	bne	r2,zero,2006f14 <___vfprintf_internal_r+0x1b1c>
 2006f0c:	9880004c 	andi	r2,r19,1
 2006f10:	10008026 	beq	r2,zero,2007114 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2006f14:	8c800015 	stw	r18,0(r17)
 2006f18:	00800044 	movi	r2,1
 2006f1c:	88800115 	stw	r2,4(r17)
 2006f20:	e0bfca17 	ldw	r2,-216(fp)
 2006f24:	10800044 	addi	r2,r2,1
 2006f28:	e0bfca15 	stw	r2,-216(fp)
 2006f2c:	8c400204 	addi	r17,r17,8
 2006f30:	e0bfc917 	ldw	r2,-220(fp)
 2006f34:	10800044 	addi	r2,r2,1
 2006f38:	e0bfc915 	stw	r2,-220(fp)
 2006f3c:	e0bfc917 	ldw	r2,-220(fp)
 2006f40:	10800210 	cmplti	r2,r2,8
 2006f44:	1000071e 	bne	r2,zero,2006f64 <___vfprintf_internal_r+0x1b6c>
 2006f48:	e0bfc804 	addi	r2,fp,-224
 2006f4c:	100d883a 	mov	r6,r2
 2006f50:	e17fe717 	ldw	r5,-100(fp)
 2006f54:	e13fe617 	ldw	r4,-104(fp)
 2006f58:	200f2800 	call	200f280 <__sprint_r>
 2006f5c:	10012a1e 	bne	r2,zero,2007408 <___vfprintf_internal_r+0x2010>
 2006f60:	e47fcb04 	addi	r17,fp,-212
					cp++;
 2006f64:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 2006f68:	e0bfbb17 	ldw	r2,-276(fp)
 2006f6c:	88800015 	stw	r2,0(r17)
 2006f70:	e0bfbc17 	ldw	r2,-272(fp)
 2006f74:	88800115 	stw	r2,4(r17)
 2006f78:	e0ffca17 	ldw	r3,-216(fp)
 2006f7c:	e0bfbc17 	ldw	r2,-272(fp)
 2006f80:	1885883a 	add	r2,r3,r2
 2006f84:	e0bfca15 	stw	r2,-216(fp)
 2006f88:	8c400204 	addi	r17,r17,8
 2006f8c:	e0bfc917 	ldw	r2,-220(fp)
 2006f90:	10800044 	addi	r2,r2,1
 2006f94:	e0bfc915 	stw	r2,-220(fp)
 2006f98:	e0bfc917 	ldw	r2,-220(fp)
 2006f9c:	10800210 	cmplti	r2,r2,8
 2006fa0:	1000071e 	bne	r2,zero,2006fc0 <___vfprintf_internal_r+0x1bc8>
 2006fa4:	e0bfc804 	addi	r2,fp,-224
 2006fa8:	100d883a 	mov	r6,r2
 2006fac:	e17fe717 	ldw	r5,-100(fp)
 2006fb0:	e13fe617 	ldw	r4,-104(fp)
 2006fb4:	200f2800 	call	200f280 <__sprint_r>
 2006fb8:	1001151e 	bne	r2,zero,2007410 <___vfprintf_internal_r+0x2018>
 2006fbc:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2006fc0:	e0bfc217 	ldw	r2,-248(fp)
 2006fc4:	e0ffc317 	ldw	r3,-244(fp)
 2006fc8:	000d883a 	mov	r6,zero
 2006fcc:	000f883a 	mov	r7,zero
 2006fd0:	1009883a 	mov	r4,r2
 2006fd4:	180b883a 	mov	r5,r3
 2006fd8:	20127700 	call	2012770 <__eqdf2>
 2006fdc:	10001826 	beq	r2,zero,2007040 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2006fe0:	8c800015 	stw	r18,0(r17)
 2006fe4:	e0bfc717 	ldw	r2,-228(fp)
 2006fe8:	10bfffc4 	addi	r2,r2,-1
 2006fec:	88800115 	stw	r2,4(r17)
 2006ff0:	e0bfca17 	ldw	r2,-216(fp)
 2006ff4:	e0ffc717 	ldw	r3,-228(fp)
 2006ff8:	10c5883a 	add	r2,r2,r3
 2006ffc:	10bfffc4 	addi	r2,r2,-1
 2007000:	e0bfca15 	stw	r2,-216(fp)
 2007004:	8c400204 	addi	r17,r17,8
 2007008:	e0bfc917 	ldw	r2,-220(fp)
 200700c:	10800044 	addi	r2,r2,1
 2007010:	e0bfc915 	stw	r2,-220(fp)
 2007014:	e0bfc917 	ldw	r2,-220(fp)
 2007018:	10800210 	cmplti	r2,r2,8
 200701c:	1000521e 	bne	r2,zero,2007168 <___vfprintf_internal_r+0x1d70>
 2007020:	e0bfc804 	addi	r2,fp,-224
 2007024:	100d883a 	mov	r6,r2
 2007028:	e17fe717 	ldw	r5,-100(fp)
 200702c:	e13fe617 	ldw	r4,-104(fp)
 2007030:	200f2800 	call	200f280 <__sprint_r>
 2007034:	1000f81e 	bne	r2,zero,2007418 <___vfprintf_internal_r+0x2020>
 2007038:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200703c:	00004a06 	br	2007168 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2007040:	e0bfc717 	ldw	r2,-228(fp)
 2007044:	143fffc4 	addi	r16,r2,-1
 2007048:	0400470e 	bge	zero,r16,2007168 <___vfprintf_internal_r+0x1d70>
 200704c:	00001706 	br	20070ac <___vfprintf_internal_r+0x1cb4>
 2007050:	008080b4 	movhi	r2,514
 2007054:	10bada84 	addi	r2,r2,-5270
 2007058:	88800015 	stw	r2,0(r17)
 200705c:	00800404 	movi	r2,16
 2007060:	88800115 	stw	r2,4(r17)
 2007064:	e0bfca17 	ldw	r2,-216(fp)
 2007068:	10800404 	addi	r2,r2,16
 200706c:	e0bfca15 	stw	r2,-216(fp)
 2007070:	8c400204 	addi	r17,r17,8
 2007074:	e0bfc917 	ldw	r2,-220(fp)
 2007078:	10800044 	addi	r2,r2,1
 200707c:	e0bfc915 	stw	r2,-220(fp)
 2007080:	e0bfc917 	ldw	r2,-220(fp)
 2007084:	10800210 	cmplti	r2,r2,8
 2007088:	1000071e 	bne	r2,zero,20070a8 <___vfprintf_internal_r+0x1cb0>
 200708c:	e0bfc804 	addi	r2,fp,-224
 2007090:	100d883a 	mov	r6,r2
 2007094:	e17fe717 	ldw	r5,-100(fp)
 2007098:	e13fe617 	ldw	r4,-104(fp)
 200709c:	200f2800 	call	200f280 <__sprint_r>
 20070a0:	1000df1e 	bne	r2,zero,2007420 <___vfprintf_internal_r+0x2028>
 20070a4:	e47fcb04 	addi	r17,fp,-212
 20070a8:	843ffc04 	addi	r16,r16,-16
 20070ac:	80800448 	cmpgei	r2,r16,17
 20070b0:	103fe71e 	bne	r2,zero,2007050 <___vfprintf_internal_r+0x1c58>
 20070b4:	008080b4 	movhi	r2,514
 20070b8:	10bada84 	addi	r2,r2,-5270
 20070bc:	88800015 	stw	r2,0(r17)
 20070c0:	8005883a 	mov	r2,r16
 20070c4:	88800115 	stw	r2,4(r17)
 20070c8:	e0bfca17 	ldw	r2,-216(fp)
 20070cc:	8007883a 	mov	r3,r16
 20070d0:	10c5883a 	add	r2,r2,r3
 20070d4:	e0bfca15 	stw	r2,-216(fp)
 20070d8:	8c400204 	addi	r17,r17,8
 20070dc:	e0bfc917 	ldw	r2,-220(fp)
 20070e0:	10800044 	addi	r2,r2,1
 20070e4:	e0bfc915 	stw	r2,-220(fp)
 20070e8:	e0bfc917 	ldw	r2,-220(fp)
 20070ec:	10800210 	cmplti	r2,r2,8
 20070f0:	10001d1e 	bne	r2,zero,2007168 <___vfprintf_internal_r+0x1d70>
 20070f4:	e0bfc804 	addi	r2,fp,-224
 20070f8:	100d883a 	mov	r6,r2
 20070fc:	e17fe717 	ldw	r5,-100(fp)
 2007100:	e13fe617 	ldw	r4,-104(fp)
 2007104:	200f2800 	call	200f280 <__sprint_r>
 2007108:	1000c71e 	bne	r2,zero,2007428 <___vfprintf_internal_r+0x2030>
 200710c:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2007110:	00001506 	br	2007168 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 2007114:	8c800015 	stw	r18,0(r17)
 2007118:	00800044 	movi	r2,1
 200711c:	88800115 	stw	r2,4(r17)
 2007120:	e0bfca17 	ldw	r2,-216(fp)
 2007124:	10800044 	addi	r2,r2,1
 2007128:	e0bfca15 	stw	r2,-216(fp)
 200712c:	8c400204 	addi	r17,r17,8
 2007130:	e0bfc917 	ldw	r2,-220(fp)
 2007134:	10800044 	addi	r2,r2,1
 2007138:	e0bfc915 	stw	r2,-220(fp)
 200713c:	e0bfc917 	ldw	r2,-220(fp)
 2007140:	10800210 	cmplti	r2,r2,8
 2007144:	1000091e 	bne	r2,zero,200716c <___vfprintf_internal_r+0x1d74>
 2007148:	e0bfc804 	addi	r2,fp,-224
 200714c:	100d883a 	mov	r6,r2
 2007150:	e17fe717 	ldw	r5,-100(fp)
 2007154:	e13fe617 	ldw	r4,-104(fp)
 2007158:	200f2800 	call	200f280 <__sprint_r>
 200715c:	1000b41e 	bne	r2,zero,2007430 <___vfprintf_internal_r+0x2038>
 2007160:	e47fcb04 	addi	r17,fp,-212
 2007164:	00000106 	br	200716c <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2007168:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 200716c:	e0bfc504 	addi	r2,fp,-236
 2007170:	88800015 	stw	r2,0(r17)
 2007174:	e0bfaf17 	ldw	r2,-324(fp)
 2007178:	88800115 	stw	r2,4(r17)
 200717c:	e0ffca17 	ldw	r3,-216(fp)
 2007180:	e0bfaf17 	ldw	r2,-324(fp)
 2007184:	1885883a 	add	r2,r3,r2
 2007188:	e0bfca15 	stw	r2,-216(fp)
 200718c:	8c400204 	addi	r17,r17,8
 2007190:	e0bfc917 	ldw	r2,-220(fp)
 2007194:	10800044 	addi	r2,r2,1
 2007198:	e0bfc915 	stw	r2,-220(fp)
 200719c:	e0bfc917 	ldw	r2,-220(fp)
 20071a0:	10800210 	cmplti	r2,r2,8
 20071a4:	1000071e 	bne	r2,zero,20071c4 <___vfprintf_internal_r+0x1dcc>
 20071a8:	e0bfc804 	addi	r2,fp,-224
 20071ac:	100d883a 	mov	r6,r2
 20071b0:	e17fe717 	ldw	r5,-100(fp)
 20071b4:	e13fe617 	ldw	r4,-104(fp)
 20071b8:	200f2800 	call	200f280 <__sprint_r>
 20071bc:	10009e1e 	bne	r2,zero,2007438 <___vfprintf_internal_r+0x2040>
 20071c0:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 20071c4:	9880010c 	andi	r2,r19,4
 20071c8:	10003526 	beq	r2,zero,20072a0 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 20071cc:	e0ffad17 	ldw	r3,-332(fp)
 20071d0:	e0bfb517 	ldw	r2,-300(fp)
 20071d4:	18a1c83a 	sub	r16,r3,r2
 20071d8:	0400310e 	bge	zero,r16,20072a0 <___vfprintf_internal_r+0x1ea8>
 20071dc:	00001706 	br	200723c <___vfprintf_internal_r+0x1e44>
 20071e0:	008080b4 	movhi	r2,514
 20071e4:	10bad684 	addi	r2,r2,-5286
 20071e8:	88800015 	stw	r2,0(r17)
 20071ec:	00800404 	movi	r2,16
 20071f0:	88800115 	stw	r2,4(r17)
 20071f4:	e0bfca17 	ldw	r2,-216(fp)
 20071f8:	10800404 	addi	r2,r2,16
 20071fc:	e0bfca15 	stw	r2,-216(fp)
 2007200:	8c400204 	addi	r17,r17,8
 2007204:	e0bfc917 	ldw	r2,-220(fp)
 2007208:	10800044 	addi	r2,r2,1
 200720c:	e0bfc915 	stw	r2,-220(fp)
 2007210:	e0bfc917 	ldw	r2,-220(fp)
 2007214:	10800210 	cmplti	r2,r2,8
 2007218:	1000071e 	bne	r2,zero,2007238 <___vfprintf_internal_r+0x1e40>
 200721c:	e0bfc804 	addi	r2,fp,-224
 2007220:	100d883a 	mov	r6,r2
 2007224:	e17fe717 	ldw	r5,-100(fp)
 2007228:	e13fe617 	ldw	r4,-104(fp)
 200722c:	200f2800 	call	200f280 <__sprint_r>
 2007230:	1000831e 	bne	r2,zero,2007440 <___vfprintf_internal_r+0x2048>
 2007234:	e47fcb04 	addi	r17,fp,-212
 2007238:	843ffc04 	addi	r16,r16,-16
 200723c:	80800448 	cmpgei	r2,r16,17
 2007240:	103fe71e 	bne	r2,zero,20071e0 <___vfprintf_internal_r+0x1de8>
 2007244:	008080b4 	movhi	r2,514
 2007248:	10bad684 	addi	r2,r2,-5286
 200724c:	88800015 	stw	r2,0(r17)
 2007250:	8005883a 	mov	r2,r16
 2007254:	88800115 	stw	r2,4(r17)
 2007258:	e0bfca17 	ldw	r2,-216(fp)
 200725c:	8007883a 	mov	r3,r16
 2007260:	10c5883a 	add	r2,r2,r3
 2007264:	e0bfca15 	stw	r2,-216(fp)
 2007268:	8c400204 	addi	r17,r17,8
 200726c:	e0bfc917 	ldw	r2,-220(fp)
 2007270:	10800044 	addi	r2,r2,1
 2007274:	e0bfc915 	stw	r2,-220(fp)
 2007278:	e0bfc917 	ldw	r2,-220(fp)
 200727c:	10800210 	cmplti	r2,r2,8
 2007280:	1000071e 	bne	r2,zero,20072a0 <___vfprintf_internal_r+0x1ea8>
 2007284:	e0bfc804 	addi	r2,fp,-224
 2007288:	100d883a 	mov	r6,r2
 200728c:	e17fe717 	ldw	r5,-100(fp)
 2007290:	e13fe617 	ldw	r4,-104(fp)
 2007294:	200f2800 	call	200f280 <__sprint_r>
 2007298:	10006b1e 	bne	r2,zero,2007448 <___vfprintf_internal_r+0x2050>
 200729c:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 20072a0:	e0ffad17 	ldw	r3,-332(fp)
 20072a4:	e0bfb517 	ldw	r2,-300(fp)
 20072a8:	10c0010e 	bge	r2,r3,20072b0 <___vfprintf_internal_r+0x1eb8>
 20072ac:	1805883a 	mov	r2,r3
 20072b0:	e0ffac17 	ldw	r3,-336(fp)
 20072b4:	1885883a 	add	r2,r3,r2
 20072b8:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 20072bc:	e0bfca17 	ldw	r2,-216(fp)
 20072c0:	10000626 	beq	r2,zero,20072dc <___vfprintf_internal_r+0x1ee4>
 20072c4:	e0bfc804 	addi	r2,fp,-224
 20072c8:	100d883a 	mov	r6,r2
 20072cc:	e17fe717 	ldw	r5,-100(fp)
 20072d0:	e13fe617 	ldw	r4,-104(fp)
 20072d4:	200f2800 	call	200f280 <__sprint_r>
 20072d8:	10005d1e 	bne	r2,zero,2007450 <___vfprintf_internal_r+0x2058>
 20072dc:	e03fc915 	stw	zero,-220(fp)
 20072e0:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 20072e4:	e0bfb817 	ldw	r2,-288(fp)
 20072e8:	1038a026 	beq	r2,zero,200556c <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 20072ec:	e17fb817 	ldw	r5,-288(fp)
 20072f0:	e13fe617 	ldw	r4,-104(fp)
 20072f4:	200a2840 	call	200a284 <_free_r>
			malloc_buf = NULL;
 20072f8:	e03fb815 	stw	zero,-288(fp)
		}
	}
 20072fc:	00389b06 	br	200556c <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2007300:	0001883a 	nop
 2007304:	00000106 	br	200730c <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2007308:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200730c:	e0bfca17 	ldw	r2,-216(fp)
 2007310:	10000626 	beq	r2,zero,200732c <___vfprintf_internal_r+0x1f34>
 2007314:	e0bfc804 	addi	r2,fp,-224
 2007318:	100d883a 	mov	r6,r2
 200731c:	e17fe717 	ldw	r5,-100(fp)
 2007320:	e13fe617 	ldw	r4,-104(fp)
 2007324:	200f2800 	call	200f280 <__sprint_r>
 2007328:	10004b1e 	bne	r2,zero,2007458 <___vfprintf_internal_r+0x2060>
 200732c:	e03fc915 	stw	zero,-220(fp)
 2007330:	e47fcb04 	addi	r17,fp,-212
 2007334:	00004906 	br	200745c <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2007338:	0001883a 	nop
 200733c:	00004706 	br	200745c <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2007340:	0001883a 	nop
 2007344:	00004506 	br	200745c <___vfprintf_internal_r+0x2064>
 2007348:	0001883a 	nop
 200734c:	00004306 	br	200745c <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2007350:	0001883a 	nop
 2007354:	00004106 	br	200745c <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2007358:	0001883a 	nop
 200735c:	00003f06 	br	200745c <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2007360:	0001883a 	nop
 2007364:	00003d06 	br	200745c <___vfprintf_internal_r+0x2064>
 2007368:	0001883a 	nop
 200736c:	00003b06 	br	200745c <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2007370:	0001883a 	nop
 2007374:	00003906 	br	200745c <___vfprintf_internal_r+0x2064>
 2007378:	0001883a 	nop
 200737c:	00003706 	br	200745c <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 2007380:	0001883a 	nop
 2007384:	00003506 	br	200745c <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2007388:	0001883a 	nop
 200738c:	00003306 	br	200745c <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2007390:	0001883a 	nop
 2007394:	00003106 	br	200745c <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2007398:	0001883a 	nop
 200739c:	00002f06 	br	200745c <___vfprintf_internal_r+0x2064>
 20073a0:	0001883a 	nop
 20073a4:	00002d06 	br	200745c <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 20073a8:	0001883a 	nop
 20073ac:	00002b06 	br	200745c <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 20073b0:	0001883a 	nop
 20073b4:	00002906 	br	200745c <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 20073b8:	0001883a 	nop
 20073bc:	00002706 	br	200745c <___vfprintf_internal_r+0x2064>
 20073c0:	0001883a 	nop
 20073c4:	00002506 	br	200745c <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 20073c8:	0001883a 	nop
 20073cc:	00002306 	br	200745c <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 20073d0:	0001883a 	nop
 20073d4:	00002106 	br	200745c <___vfprintf_internal_r+0x2064>
 20073d8:	0001883a 	nop
 20073dc:	00001f06 	br	200745c <___vfprintf_internal_r+0x2064>
 20073e0:	0001883a 	nop
 20073e4:	00001d06 	br	200745c <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 20073e8:	0001883a 	nop
 20073ec:	00001b06 	br	200745c <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 20073f0:	0001883a 	nop
 20073f4:	00001906 	br	200745c <___vfprintf_internal_r+0x2064>
 20073f8:	0001883a 	nop
 20073fc:	00001706 	br	200745c <___vfprintf_internal_r+0x2064>
 2007400:	0001883a 	nop
 2007404:	00001506 	br	200745c <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 2007408:	0001883a 	nop
 200740c:	00001306 	br	200745c <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 2007410:	0001883a 	nop
 2007414:	00001106 	br	200745c <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 2007418:	0001883a 	nop
 200741c:	00000f06 	br	200745c <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2007420:	0001883a 	nop
 2007424:	00000d06 	br	200745c <___vfprintf_internal_r+0x2064>
 2007428:	0001883a 	nop
 200742c:	00000b06 	br	200745c <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 2007430:	0001883a 	nop
 2007434:	00000906 	br	200745c <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 2007438:	0001883a 	nop
 200743c:	00000706 	br	200745c <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2007440:	0001883a 	nop
 2007444:	00000506 	br	200745c <___vfprintf_internal_r+0x2064>
 2007448:	0001883a 	nop
 200744c:	00000306 	br	200745c <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2007450:	0001883a 	nop
 2007454:	00000106 	br	200745c <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2007458:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200745c:	e0bfb817 	ldw	r2,-288(fp)
 2007460:	10000326 	beq	r2,zero,2007470 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 2007464:	e17fb817 	ldw	r5,-288(fp)
 2007468:	e13fe617 	ldw	r4,-104(fp)
 200746c:	200a2840 	call	200a284 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2007470:	e0bfe717 	ldw	r2,-100(fp)
 2007474:	1080030b 	ldhu	r2,12(r2)
 2007478:	10bfffcc 	andi	r2,r2,65535
 200747c:	1080100c 	andi	r2,r2,64
 2007480:	1000021e 	bne	r2,zero,200748c <___vfprintf_internal_r+0x2094>
 2007484:	e0bfac17 	ldw	r2,-336(fp)
 2007488:	00000206 	br	2007494 <___vfprintf_internal_r+0x209c>
 200748c:	00bfffc4 	movi	r2,-1
 2007490:	0001883a 	nop
	/* NOTREACHED */
}
 2007494:	e6fff804 	addi	sp,fp,-32
 2007498:	dfc00917 	ldw	ra,36(sp)
 200749c:	df000817 	ldw	fp,32(sp)
 20074a0:	ddc00717 	ldw	r23,28(sp)
 20074a4:	dd800617 	ldw	r22,24(sp)
 20074a8:	dd400517 	ldw	r21,20(sp)
 20074ac:	dd000417 	ldw	r20,16(sp)
 20074b0:	dcc00317 	ldw	r19,12(sp)
 20074b4:	dc800217 	ldw	r18,8(sp)
 20074b8:	dc400117 	ldw	r17,4(sp)
 20074bc:	dc000017 	ldw	r16,0(sp)
 20074c0:	dec00a04 	addi	sp,sp,40
 20074c4:	f800283a 	ret

020074c8 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 20074c8:	deffef04 	addi	sp,sp,-68
 20074cc:	dfc01015 	stw	ra,64(sp)
 20074d0:	df000f15 	stw	fp,60(sp)
 20074d4:	df000f04 	addi	fp,sp,60
 20074d8:	e13ffc15 	stw	r4,-16(fp)
 20074dc:	e17ffd15 	stw	r5,-12(fp)
 20074e0:	e1bffe15 	stw	r6,-8(fp)
 20074e4:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 20074e8:	e0bffd17 	ldw	r2,-12(fp)
 20074ec:	e0bffa15 	stw	r2,-24(fp)
 20074f0:	e0bffe17 	ldw	r2,-8(fp)
 20074f4:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 20074f8:	e0bffb17 	ldw	r2,-20(fp)
 20074fc:	1000090e 	bge	r2,zero,2007524 <cvt+0x5c>
		value = -value;
 2007500:	e0bffd17 	ldw	r2,-12(fp)
 2007504:	e0bffd15 	stw	r2,-12(fp)
 2007508:	e0bffe17 	ldw	r2,-8(fp)
 200750c:	10a0003c 	xorhi	r2,r2,32768
 2007510:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 2007514:	e0800317 	ldw	r2,12(fp)
 2007518:	00c00b44 	movi	r3,45
 200751c:	10c00005 	stb	r3,0(r2)
 2007520:	00000206 	br	200752c <cvt+0x64>
	} else
		*sign = '\000';
 2007524:	e0800317 	ldw	r2,12(fp)
 2007528:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 200752c:	e0800517 	ldw	r2,20(fp)
 2007530:	108019a0 	cmpeqi	r2,r2,102
 2007534:	1000031e 	bne	r2,zero,2007544 <cvt+0x7c>
 2007538:	e0800517 	ldw	r2,20(fp)
 200753c:	10801198 	cmpnei	r2,r2,70
 2007540:	1000031e 	bne	r2,zero,2007550 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 2007544:	008000c4 	movi	r2,3
 2007548:	e0bff515 	stw	r2,-44(fp)
 200754c:	00000b06 	br	200757c <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 2007550:	e0800517 	ldw	r2,20(fp)
 2007554:	10801960 	cmpeqi	r2,r2,101
 2007558:	1000031e 	bne	r2,zero,2007568 <cvt+0xa0>
 200755c:	e0800517 	ldw	r2,20(fp)
 2007560:	10801158 	cmpnei	r2,r2,69
 2007564:	1000031e 	bne	r2,zero,2007574 <cvt+0xac>
			ndigits++;
 2007568:	e0bfff17 	ldw	r2,-4(fp)
 200756c:	10800044 	addi	r2,r2,1
 2007570:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 2007574:	00800084 	movi	r2,2
 2007578:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 200757c:	e0bff904 	addi	r2,fp,-28
 2007580:	d8800315 	stw	r2,12(sp)
 2007584:	e0bff804 	addi	r2,fp,-32
 2007588:	d8800215 	stw	r2,8(sp)
 200758c:	e0800417 	ldw	r2,16(fp)
 2007590:	d8800115 	stw	r2,4(sp)
 2007594:	e0bfff17 	ldw	r2,-4(fp)
 2007598:	d8800015 	stw	r2,0(sp)
 200759c:	e1fff517 	ldw	r7,-44(fp)
 20075a0:	e17ffd17 	ldw	r5,-12(fp)
 20075a4:	e1bffe17 	ldw	r6,-8(fp)
 20075a8:	e13ffc17 	ldw	r4,-16(fp)
 20075ac:	2007d680 	call	2007d68 <_dtoa_r>
 20075b0:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 20075b4:	e0800517 	ldw	r2,20(fp)
 20075b8:	108019e0 	cmpeqi	r2,r2,103
 20075bc:	1000031e 	bne	r2,zero,20075cc <cvt+0x104>
 20075c0:	e0800517 	ldw	r2,20(fp)
 20075c4:	108011d8 	cmpnei	r2,r2,71
 20075c8:	1000031e 	bne	r2,zero,20075d8 <cvt+0x110>
 20075cc:	e0800217 	ldw	r2,8(fp)
 20075d0:	1080004c 	andi	r2,r2,1
 20075d4:	10003326 	beq	r2,zero,20076a4 <cvt+0x1dc>
		bp = digits + ndigits;
 20075d8:	e0bfff17 	ldw	r2,-4(fp)
 20075dc:	e0fff717 	ldw	r3,-36(fp)
 20075e0:	1885883a 	add	r2,r3,r2
 20075e4:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 20075e8:	e0800517 	ldw	r2,20(fp)
 20075ec:	108019a0 	cmpeqi	r2,r2,102
 20075f0:	1000031e 	bne	r2,zero,2007600 <cvt+0x138>
 20075f4:	e0800517 	ldw	r2,20(fp)
 20075f8:	10801198 	cmpnei	r2,r2,70
 20075fc:	1000181e 	bne	r2,zero,2007660 <cvt+0x198>
			if (*digits == '0' && value)
 2007600:	e0bff717 	ldw	r2,-36(fp)
 2007604:	10800003 	ldbu	r2,0(r2)
 2007608:	10803fcc 	andi	r2,r2,255
 200760c:	1080201c 	xori	r2,r2,128
 2007610:	10bfe004 	addi	r2,r2,-128
 2007614:	10800c18 	cmpnei	r2,r2,48
 2007618:	10000b1e 	bne	r2,zero,2007648 <cvt+0x180>
 200761c:	000d883a 	mov	r6,zero
 2007620:	000f883a 	mov	r7,zero
 2007624:	e13ffd17 	ldw	r4,-12(fp)
 2007628:	e17ffe17 	ldw	r5,-8(fp)
 200762c:	20127700 	call	2012770 <__eqdf2>
 2007630:	10000526 	beq	r2,zero,2007648 <cvt+0x180>
				*decpt = -ndigits + 1;
 2007634:	00c00044 	movi	r3,1
 2007638:	e0bfff17 	ldw	r2,-4(fp)
 200763c:	1887c83a 	sub	r3,r3,r2
 2007640:	e0800417 	ldw	r2,16(fp)
 2007644:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 2007648:	e0800417 	ldw	r2,16(fp)
 200764c:	10800017 	ldw	r2,0(r2)
 2007650:	1007883a 	mov	r3,r2
 2007654:	e0bff617 	ldw	r2,-40(fp)
 2007658:	10c5883a 	add	r2,r2,r3
 200765c:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 2007660:	000d883a 	mov	r6,zero
 2007664:	000f883a 	mov	r7,zero
 2007668:	e13ffd17 	ldw	r4,-12(fp)
 200766c:	e17ffe17 	ldw	r5,-8(fp)
 2007670:	20127700 	call	2012770 <__eqdf2>
 2007674:	1000081e 	bne	r2,zero,2007698 <cvt+0x1d0>
			rve = bp;
 2007678:	e0bff617 	ldw	r2,-40(fp)
 200767c:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 2007680:	00000506 	br	2007698 <cvt+0x1d0>
			*rve++ = '0';
 2007684:	e0bff917 	ldw	r2,-28(fp)
 2007688:	10c00044 	addi	r3,r2,1
 200768c:	e0fff915 	stw	r3,-28(fp)
 2007690:	00c00c04 	movi	r3,48
 2007694:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 2007698:	e0fff917 	ldw	r3,-28(fp)
 200769c:	e0bff617 	ldw	r2,-40(fp)
 20076a0:	18bff836 	bltu	r3,r2,2007684 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 20076a4:	e0bff917 	ldw	r2,-28(fp)
 20076a8:	1007883a 	mov	r3,r2
 20076ac:	e0bff717 	ldw	r2,-36(fp)
 20076b0:	1887c83a 	sub	r3,r3,r2
 20076b4:	e0800617 	ldw	r2,24(fp)
 20076b8:	10c00015 	stw	r3,0(r2)
	return (digits);
 20076bc:	e0bff717 	ldw	r2,-36(fp)
}
 20076c0:	e037883a 	mov	sp,fp
 20076c4:	dfc00117 	ldw	ra,4(sp)
 20076c8:	df000017 	ldw	fp,0(sp)
 20076cc:	dec00204 	addi	sp,sp,8
 20076d0:	f800283a 	ret

020076d4 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 20076d4:	defff704 	addi	sp,sp,-36
 20076d8:	dfc00815 	stw	ra,32(sp)
 20076dc:	df000715 	stw	fp,28(sp)
 20076e0:	dc400615 	stw	r17,24(sp)
 20076e4:	dc000515 	stw	r16,20(sp)
 20076e8:	df000704 	addi	fp,sp,28
 20076ec:	e13ffb15 	stw	r4,-20(fp)
 20076f0:	e17ffc15 	stw	r5,-16(fp)
 20076f4:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 20076f8:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 20076fc:	8805883a 	mov	r2,r17
 2007700:	14400044 	addi	r17,r2,1
 2007704:	e0fffd17 	ldw	r3,-12(fp)
 2007708:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 200770c:	e0bffc17 	ldw	r2,-16(fp)
 2007710:	1000080e 	bge	r2,zero,2007734 <exponent+0x60>
		exp = -exp;
 2007714:	e0bffc17 	ldw	r2,-16(fp)
 2007718:	0085c83a 	sub	r2,zero,r2
 200771c:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 2007720:	8805883a 	mov	r2,r17
 2007724:	14400044 	addi	r17,r2,1
 2007728:	00c00b44 	movi	r3,45
 200772c:	10c00005 	stb	r3,0(r2)
 2007730:	00000406 	br	2007744 <exponent+0x70>
	}
	else
		*p++ = '+';
 2007734:	8805883a 	mov	r2,r17
 2007738:	14400044 	addi	r17,r2,1
 200773c:	00c00ac4 	movi	r3,43
 2007740:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 2007744:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 2007748:	e0bffc17 	ldw	r2,-16(fp)
 200774c:	10800290 	cmplti	r2,r2,10
 2007750:	10001d1e 	bne	r2,zero,20077c8 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 2007754:	843fffc4 	addi	r16,r16,-1
 2007758:	e0bffc17 	ldw	r2,-16(fp)
 200775c:	01400284 	movi	r5,10
 2007760:	1009883a 	mov	r4,r2
 2007764:	2004b2c0 	call	2004b2c <__modsi3>
 2007768:	10800c04 	addi	r2,r2,48
 200776c:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 2007770:	e0bffc17 	ldw	r2,-16(fp)
 2007774:	01400284 	movi	r5,10
 2007778:	1009883a 	mov	r4,r2
 200777c:	2004aa80 	call	2004aa8 <__divsi3>
 2007780:	e0bffc15 	stw	r2,-16(fp)
 2007784:	e0bffc17 	ldw	r2,-16(fp)
 2007788:	10800288 	cmpgei	r2,r2,10
 200778c:	103ff11e 	bne	r2,zero,2007754 <exponent+0x80>
		*--t = to_char (exp);
 2007790:	843fffc4 	addi	r16,r16,-1
 2007794:	e0bffc17 	ldw	r2,-16(fp)
 2007798:	10800c04 	addi	r2,r2,48
 200779c:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 20077a0:	00000606 	br	20077bc <exponent+0xe8>
 20077a4:	8805883a 	mov	r2,r17
 20077a8:	14400044 	addi	r17,r2,1
 20077ac:	8007883a 	mov	r3,r16
 20077b0:	1c000044 	addi	r16,r3,1
 20077b4:	18c00003 	ldbu	r3,0(r3)
 20077b8:	10c00005 	stb	r3,0(r2)
 20077bc:	e0bffac4 	addi	r2,fp,-21
 20077c0:	80bff836 	bltu	r16,r2,20077a4 <exponent+0xd0>
 20077c4:	00000906 	br	20077ec <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 20077c8:	8805883a 	mov	r2,r17
 20077cc:	14400044 	addi	r17,r2,1
 20077d0:	00c00c04 	movi	r3,48
 20077d4:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 20077d8:	8805883a 	mov	r2,r17
 20077dc:	14400044 	addi	r17,r2,1
 20077e0:	e0fffc17 	ldw	r3,-16(fp)
 20077e4:	18c00c04 	addi	r3,r3,48
 20077e8:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 20077ec:	8807883a 	mov	r3,r17
 20077f0:	e0bffb17 	ldw	r2,-20(fp)
 20077f4:	1885c83a 	sub	r2,r3,r2
}
 20077f8:	e6fffe04 	addi	sp,fp,-8
 20077fc:	dfc00317 	ldw	ra,12(sp)
 2007800:	df000217 	ldw	fp,8(sp)
 2007804:	dc400117 	ldw	r17,4(sp)
 2007808:	dc000017 	ldw	r16,0(sp)
 200780c:	dec00404 	addi	sp,sp,16
 2007810:	f800283a 	ret

02007814 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2007814:	defffb04 	addi	sp,sp,-20
 2007818:	dfc00415 	stw	ra,16(sp)
 200781c:	df000315 	stw	fp,12(sp)
 2007820:	dc000215 	stw	r16,8(sp)
 2007824:	df000304 	addi	fp,sp,12
 2007828:	e13ffe15 	stw	r4,-8(fp)
 200782c:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 2007830:	d0a00017 	ldw	r2,-32768(gp)
 2007834:	e0bffd15 	stw	r2,-12(fp)
 2007838:	e0bffd17 	ldw	r2,-12(fp)
 200783c:	10000526 	beq	r2,zero,2007854 <__swsetup_r+0x40>
 2007840:	e0bffd17 	ldw	r2,-12(fp)
 2007844:	10800e17 	ldw	r2,56(r2)
 2007848:	1000021e 	bne	r2,zero,2007854 <__swsetup_r+0x40>
 200784c:	e13ffd17 	ldw	r4,-12(fp)
 2007850:	200a0640 	call	200a064 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 2007854:	8080030b 	ldhu	r2,12(r16)
 2007858:	10bfffcc 	andi	r2,r2,65535
 200785c:	1080020c 	andi	r2,r2,8
 2007860:	1000241e 	bne	r2,zero,20078f4 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 2007864:	8080030b 	ldhu	r2,12(r16)
 2007868:	10bfffcc 	andi	r2,r2,65535
 200786c:	1080040c 	andi	r2,r2,16
 2007870:	1000081e 	bne	r2,zero,2007894 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 2007874:	e0bffe17 	ldw	r2,-8(fp)
 2007878:	00c00244 	movi	r3,9
 200787c:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 2007880:	8080030b 	ldhu	r2,12(r16)
 2007884:	10801014 	ori	r2,r2,64
 2007888:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200788c:	00bfffc4 	movi	r2,-1
 2007890:	00004206 	br	200799c <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 2007894:	8080030b 	ldhu	r2,12(r16)
 2007898:	10bfffcc 	andi	r2,r2,65535
 200789c:	1080010c 	andi	r2,r2,4
 20078a0:	10001126 	beq	r2,zero,20078e8 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 20078a4:	80800c17 	ldw	r2,48(r16)
 20078a8:	10000826 	beq	r2,zero,20078cc <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 20078ac:	80c00c17 	ldw	r3,48(r16)
 20078b0:	80801004 	addi	r2,r16,64
 20078b4:	18800426 	beq	r3,r2,20078c8 <__swsetup_r+0xb4>
 20078b8:	80800c17 	ldw	r2,48(r16)
 20078bc:	100b883a 	mov	r5,r2
 20078c0:	e13ffe17 	ldw	r4,-8(fp)
 20078c4:	200a2840 	call	200a284 <_free_r>
 20078c8:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 20078cc:	80c0030b 	ldhu	r3,12(r16)
 20078d0:	00bff6c4 	movi	r2,-37
 20078d4:	1884703a 	and	r2,r3,r2
 20078d8:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 20078dc:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 20078e0:	80800417 	ldw	r2,16(r16)
 20078e4:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 20078e8:	8080030b 	ldhu	r2,12(r16)
 20078ec:	10800214 	ori	r2,r2,8
 20078f0:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 20078f4:	80800417 	ldw	r2,16(r16)
 20078f8:	10000b1e 	bne	r2,zero,2007928 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 20078fc:	8080030b 	ldhu	r2,12(r16)
 2007900:	10bfffcc 	andi	r2,r2,65535
 2007904:	1080800c 	andi	r2,r2,512
 2007908:	10000426 	beq	r2,zero,200791c <__swsetup_r+0x108>
 200790c:	8080030b 	ldhu	r2,12(r16)
 2007910:	10bfffcc 	andi	r2,r2,65535
 2007914:	1080200c 	andi	r2,r2,128
 2007918:	10000326 	beq	r2,zero,2007928 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200791c:	800b883a 	mov	r5,r16
 2007920:	e13ffe17 	ldw	r4,-8(fp)
 2007924:	200b2e40 	call	200b2e4 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 2007928:	8080030b 	ldhu	r2,12(r16)
 200792c:	10bfffcc 	andi	r2,r2,65535
 2007930:	1080004c 	andi	r2,r2,1
 2007934:	10000526 	beq	r2,zero,200794c <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 2007938:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200793c:	80800517 	ldw	r2,20(r16)
 2007940:	0085c83a 	sub	r2,zero,r2
 2007944:	80800615 	stw	r2,24(r16)
 2007948:	00000806 	br	200796c <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200794c:	8080030b 	ldhu	r2,12(r16)
 2007950:	10bfffcc 	andi	r2,r2,65535
 2007954:	1080008c 	andi	r2,r2,2
 2007958:	1000021e 	bne	r2,zero,2007964 <__swsetup_r+0x150>
 200795c:	80800517 	ldw	r2,20(r16)
 2007960:	00000106 	br	2007968 <__swsetup_r+0x154>
 2007964:	0005883a 	mov	r2,zero
 2007968:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200796c:	80800417 	ldw	r2,16(r16)
 2007970:	1000091e 	bne	r2,zero,2007998 <__swsetup_r+0x184>
 2007974:	8080030b 	ldhu	r2,12(r16)
 2007978:	10bfffcc 	andi	r2,r2,65535
 200797c:	1080200c 	andi	r2,r2,128
 2007980:	10000526 	beq	r2,zero,2007998 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 2007984:	8080030b 	ldhu	r2,12(r16)
 2007988:	10801014 	ori	r2,r2,64
 200798c:	8080030d 	sth	r2,12(r16)
      return EOF;
 2007990:	00bfffc4 	movi	r2,-1
 2007994:	00000106 	br	200799c <__swsetup_r+0x188>
    }
  return 0;
 2007998:	0005883a 	mov	r2,zero
}
 200799c:	e6ffff04 	addi	sp,fp,-4
 20079a0:	dfc00217 	ldw	ra,8(sp)
 20079a4:	df000117 	ldw	fp,4(sp)
 20079a8:	dc000017 	ldw	r16,0(sp)
 20079ac:	dec00304 	addi	sp,sp,12
 20079b0:	f800283a 	ret

020079b4 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 20079b4:	deffef04 	addi	sp,sp,-68
 20079b8:	dfc01015 	stw	ra,64(sp)
 20079bc:	df000f15 	stw	fp,60(sp)
 20079c0:	df000f04 	addi	fp,sp,60
 20079c4:	e13ffe15 	stw	r4,-8(fp)
 20079c8:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 20079cc:	e0bfff17 	ldw	r2,-4(fp)
 20079d0:	10800417 	ldw	r2,16(r2)
 20079d4:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 20079d8:	e0bffe17 	ldw	r2,-8(fp)
 20079dc:	10c00417 	ldw	r3,16(r2)
 20079e0:	e0bff117 	ldw	r2,-60(fp)
 20079e4:	1880020e 	bge	r3,r2,20079f0 <quorem+0x3c>
    return 0;
 20079e8:	0005883a 	mov	r2,zero
 20079ec:	0000d906 	br	2007d54 <quorem+0x3a0>
  sx = S->_x;
 20079f0:	e0bfff17 	ldw	r2,-4(fp)
 20079f4:	10800504 	addi	r2,r2,20
 20079f8:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 20079fc:	e0bff117 	ldw	r2,-60(fp)
 2007a00:	10bfffc4 	addi	r2,r2,-1
 2007a04:	e0bff115 	stw	r2,-60(fp)
 2007a08:	e0bff117 	ldw	r2,-60(fp)
 2007a0c:	1085883a 	add	r2,r2,r2
 2007a10:	1085883a 	add	r2,r2,r2
 2007a14:	1007883a 	mov	r3,r2
 2007a18:	e0bff717 	ldw	r2,-36(fp)
 2007a1c:	10c5883a 	add	r2,r2,r3
 2007a20:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 2007a24:	e0bffe17 	ldw	r2,-8(fp)
 2007a28:	10800504 	addi	r2,r2,20
 2007a2c:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 2007a30:	e0bff117 	ldw	r2,-60(fp)
 2007a34:	1085883a 	add	r2,r2,r2
 2007a38:	1085883a 	add	r2,r2,r2
 2007a3c:	1007883a 	mov	r3,r2
 2007a40:	e0bff517 	ldw	r2,-44(fp)
 2007a44:	10c5883a 	add	r2,r2,r3
 2007a48:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 2007a4c:	e0bff617 	ldw	r2,-40(fp)
 2007a50:	10c00017 	ldw	r3,0(r2)
 2007a54:	e0bff817 	ldw	r2,-32(fp)
 2007a58:	10800017 	ldw	r2,0(r2)
 2007a5c:	10800044 	addi	r2,r2,1
 2007a60:	100b883a 	mov	r5,r2
 2007a64:	1809883a 	mov	r4,r3
 2007a68:	2004ba00 	call	2004ba0 <__udivsi3>
 2007a6c:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 2007a70:	e0bff417 	ldw	r2,-48(fp)
 2007a74:	10005326 	beq	r2,zero,2007bc4 <quorem+0x210>
    {
      borrow = 0;
 2007a78:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2007a7c:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2007a80:	e0bff717 	ldw	r2,-36(fp)
 2007a84:	10c00104 	addi	r3,r2,4
 2007a88:	e0fff715 	stw	r3,-36(fp)
 2007a8c:	10800017 	ldw	r2,0(r2)
 2007a90:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 2007a94:	e0bff917 	ldw	r2,-28(fp)
 2007a98:	10ffffcc 	andi	r3,r2,65535
 2007a9c:	e0bff417 	ldw	r2,-48(fp)
 2007aa0:	1887383a 	mul	r3,r3,r2
 2007aa4:	e0bff317 	ldw	r2,-52(fp)
 2007aa8:	1885883a 	add	r2,r3,r2
 2007aac:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 2007ab0:	e0bff917 	ldw	r2,-28(fp)
 2007ab4:	1006d43a 	srli	r3,r2,16
 2007ab8:	e0bff417 	ldw	r2,-48(fp)
 2007abc:	1887383a 	mul	r3,r3,r2
 2007ac0:	e0bffa17 	ldw	r2,-24(fp)
 2007ac4:	1004d43a 	srli	r2,r2,16
 2007ac8:	1885883a 	add	r2,r3,r2
 2007acc:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2007ad0:	e0bffb17 	ldw	r2,-20(fp)
 2007ad4:	1004d43a 	srli	r2,r2,16
 2007ad8:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2007adc:	e0bff517 	ldw	r2,-44(fp)
 2007ae0:	10800017 	ldw	r2,0(r2)
 2007ae4:	10ffffcc 	andi	r3,r2,65535
 2007ae8:	e0bffa17 	ldw	r2,-24(fp)
 2007aec:	10bfffcc 	andi	r2,r2,65535
 2007af0:	1887c83a 	sub	r3,r3,r2
 2007af4:	e0bff217 	ldw	r2,-56(fp)
 2007af8:	1885883a 	add	r2,r3,r2
 2007afc:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2007b00:	e0bffc17 	ldw	r2,-16(fp)
 2007b04:	1005d43a 	srai	r2,r2,16
 2007b08:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2007b0c:	e0bff517 	ldw	r2,-44(fp)
 2007b10:	10800017 	ldw	r2,0(r2)
 2007b14:	1006d43a 	srli	r3,r2,16
 2007b18:	e0bffb17 	ldw	r2,-20(fp)
 2007b1c:	10bfffcc 	andi	r2,r2,65535
 2007b20:	1887c83a 	sub	r3,r3,r2
 2007b24:	e0bff217 	ldw	r2,-56(fp)
 2007b28:	1885883a 	add	r2,r3,r2
 2007b2c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007b30:	e0bffd17 	ldw	r2,-12(fp)
 2007b34:	1005d43a 	srai	r2,r2,16
 2007b38:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2007b3c:	e0bff517 	ldw	r2,-44(fp)
 2007b40:	10c00104 	addi	r3,r2,4
 2007b44:	e0fff515 	stw	r3,-44(fp)
 2007b48:	e0fffd17 	ldw	r3,-12(fp)
 2007b4c:	1808943a 	slli	r4,r3,16
 2007b50:	e0fffc17 	ldw	r3,-16(fp)
 2007b54:	18ffffcc 	andi	r3,r3,65535
 2007b58:	20c6b03a 	or	r3,r4,r3
 2007b5c:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2007b60:	e0bff717 	ldw	r2,-36(fp)
 2007b64:	e0fff817 	ldw	r3,-32(fp)
 2007b68:	18bfc52e 	bgeu	r3,r2,2007a80 <quorem+0xcc>
      if (!*bxe)
 2007b6c:	e0bff617 	ldw	r2,-40(fp)
 2007b70:	10800017 	ldw	r2,0(r2)
 2007b74:	1000131e 	bne	r2,zero,2007bc4 <quorem+0x210>
	{
	  bx = b->_x;
 2007b78:	e0bffe17 	ldw	r2,-8(fp)
 2007b7c:	10800504 	addi	r2,r2,20
 2007b80:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 2007b84:	00000306 	br	2007b94 <quorem+0x1e0>
	    --n;
 2007b88:	e0bff117 	ldw	r2,-60(fp)
 2007b8c:	10bfffc4 	addi	r2,r2,-1
 2007b90:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 2007b94:	e0bff617 	ldw	r2,-40(fp)
 2007b98:	10bfff04 	addi	r2,r2,-4
 2007b9c:	e0bff615 	stw	r2,-40(fp)
 2007ba0:	e0bff617 	ldw	r2,-40(fp)
 2007ba4:	e0fff517 	ldw	r3,-44(fp)
 2007ba8:	1880032e 	bgeu	r3,r2,2007bb8 <quorem+0x204>
 2007bac:	e0bff617 	ldw	r2,-40(fp)
 2007bb0:	10800017 	ldw	r2,0(r2)
 2007bb4:	103ff426 	beq	r2,zero,2007b88 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 2007bb8:	e0bffe17 	ldw	r2,-8(fp)
 2007bbc:	e0fff117 	ldw	r3,-60(fp)
 2007bc0:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 2007bc4:	e17fff17 	ldw	r5,-4(fp)
 2007bc8:	e13ffe17 	ldw	r4,-8(fp)
 2007bcc:	200d5e40 	call	200d5e4 <__mcmp>
 2007bd0:	10005f16 	blt	r2,zero,2007d50 <quorem+0x39c>
    {
      q++;
 2007bd4:	e0bff417 	ldw	r2,-48(fp)
 2007bd8:	10800044 	addi	r2,r2,1
 2007bdc:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 2007be0:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2007be4:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 2007be8:	e0bffe17 	ldw	r2,-8(fp)
 2007bec:	10800504 	addi	r2,r2,20
 2007bf0:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 2007bf4:	e0bfff17 	ldw	r2,-4(fp)
 2007bf8:	10800504 	addi	r2,r2,20
 2007bfc:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2007c00:	e0bff717 	ldw	r2,-36(fp)
 2007c04:	10c00104 	addi	r3,r2,4
 2007c08:	e0fff715 	stw	r3,-36(fp)
 2007c0c:	10800017 	ldw	r2,0(r2)
 2007c10:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 2007c14:	e0bff917 	ldw	r2,-28(fp)
 2007c18:	10ffffcc 	andi	r3,r2,65535
 2007c1c:	e0bff317 	ldw	r2,-52(fp)
 2007c20:	1885883a 	add	r2,r3,r2
 2007c24:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 2007c28:	e0bff917 	ldw	r2,-28(fp)
 2007c2c:	1006d43a 	srli	r3,r2,16
 2007c30:	e0bffa17 	ldw	r2,-24(fp)
 2007c34:	1004d43a 	srli	r2,r2,16
 2007c38:	1885883a 	add	r2,r3,r2
 2007c3c:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2007c40:	e0bffb17 	ldw	r2,-20(fp)
 2007c44:	1004d43a 	srli	r2,r2,16
 2007c48:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2007c4c:	e0bff517 	ldw	r2,-44(fp)
 2007c50:	10800017 	ldw	r2,0(r2)
 2007c54:	10ffffcc 	andi	r3,r2,65535
 2007c58:	e0bffa17 	ldw	r2,-24(fp)
 2007c5c:	10bfffcc 	andi	r2,r2,65535
 2007c60:	1887c83a 	sub	r3,r3,r2
 2007c64:	e0bff217 	ldw	r2,-56(fp)
 2007c68:	1885883a 	add	r2,r3,r2
 2007c6c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2007c70:	e0bffc17 	ldw	r2,-16(fp)
 2007c74:	1005d43a 	srai	r2,r2,16
 2007c78:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2007c7c:	e0bff517 	ldw	r2,-44(fp)
 2007c80:	10800017 	ldw	r2,0(r2)
 2007c84:	1006d43a 	srli	r3,r2,16
 2007c88:	e0bffb17 	ldw	r2,-20(fp)
 2007c8c:	10bfffcc 	andi	r2,r2,65535
 2007c90:	1887c83a 	sub	r3,r3,r2
 2007c94:	e0bff217 	ldw	r2,-56(fp)
 2007c98:	1885883a 	add	r2,r3,r2
 2007c9c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007ca0:	e0bffd17 	ldw	r2,-12(fp)
 2007ca4:	1005d43a 	srai	r2,r2,16
 2007ca8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2007cac:	e0bff517 	ldw	r2,-44(fp)
 2007cb0:	10c00104 	addi	r3,r2,4
 2007cb4:	e0fff515 	stw	r3,-44(fp)
 2007cb8:	e0fffd17 	ldw	r3,-12(fp)
 2007cbc:	1808943a 	slli	r4,r3,16
 2007cc0:	e0fffc17 	ldw	r3,-16(fp)
 2007cc4:	18ffffcc 	andi	r3,r3,65535
 2007cc8:	20c6b03a 	or	r3,r4,r3
 2007ccc:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2007cd0:	e0bff717 	ldw	r2,-36(fp)
 2007cd4:	e0fff817 	ldw	r3,-32(fp)
 2007cd8:	18bfc92e 	bgeu	r3,r2,2007c00 <quorem+0x24c>
      bx = b->_x;
 2007cdc:	e0bffe17 	ldw	r2,-8(fp)
 2007ce0:	10800504 	addi	r2,r2,20
 2007ce4:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 2007ce8:	e0bff117 	ldw	r2,-60(fp)
 2007cec:	1085883a 	add	r2,r2,r2
 2007cf0:	1085883a 	add	r2,r2,r2
 2007cf4:	1007883a 	mov	r3,r2
 2007cf8:	e0bff517 	ldw	r2,-44(fp)
 2007cfc:	10c5883a 	add	r2,r2,r3
 2007d00:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 2007d04:	e0bff617 	ldw	r2,-40(fp)
 2007d08:	10800017 	ldw	r2,0(r2)
 2007d0c:	1000101e 	bne	r2,zero,2007d50 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 2007d10:	00000306 	br	2007d20 <quorem+0x36c>
	    --n;
 2007d14:	e0bff117 	ldw	r2,-60(fp)
 2007d18:	10bfffc4 	addi	r2,r2,-1
 2007d1c:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 2007d20:	e0bff617 	ldw	r2,-40(fp)
 2007d24:	10bfff04 	addi	r2,r2,-4
 2007d28:	e0bff615 	stw	r2,-40(fp)
 2007d2c:	e0bff617 	ldw	r2,-40(fp)
 2007d30:	e0fff517 	ldw	r3,-44(fp)
 2007d34:	1880032e 	bgeu	r3,r2,2007d44 <quorem+0x390>
 2007d38:	e0bff617 	ldw	r2,-40(fp)
 2007d3c:	10800017 	ldw	r2,0(r2)
 2007d40:	103ff426 	beq	r2,zero,2007d14 <quorem+0x360>
	    --n;
	  b->_wds = n;
 2007d44:	e0bffe17 	ldw	r2,-8(fp)
 2007d48:	e0fff117 	ldw	r3,-60(fp)
 2007d4c:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 2007d50:	e0bff417 	ldw	r2,-48(fp)
}
 2007d54:	e037883a 	mov	sp,fp
 2007d58:	dfc00117 	ldw	ra,4(sp)
 2007d5c:	df000017 	ldw	fp,0(sp)
 2007d60:	dec00204 	addi	sp,sp,8
 2007d64:	f800283a 	ret

02007d68 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 2007d68:	deffcc04 	addi	sp,sp,-208
 2007d6c:	dfc03315 	stw	ra,204(sp)
 2007d70:	df003215 	stw	fp,200(sp)
 2007d74:	dcc03115 	stw	r19,196(sp)
 2007d78:	dc803015 	stw	r18,192(sp)
 2007d7c:	dc402f15 	stw	r17,188(sp)
 2007d80:	dc002e15 	stw	r16,184(sp)
 2007d84:	df003204 	addi	fp,sp,200
 2007d88:	e13ff815 	stw	r4,-32(fp)
 2007d8c:	e17ff915 	stw	r5,-28(fp)
 2007d90:	e1bffa15 	stw	r6,-24(fp)
 2007d94:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 2007d98:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 2007d9c:	e0bff917 	ldw	r2,-28(fp)
 2007da0:	e0bff215 	stw	r2,-56(fp)
 2007da4:	e0bffa17 	ldw	r2,-24(fp)
 2007da8:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 2007dac:	e0bff817 	ldw	r2,-32(fp)
 2007db0:	10801017 	ldw	r2,64(r2)
 2007db4:	10001326 	beq	r2,zero,2007e04 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 2007db8:	e0bff817 	ldw	r2,-32(fp)
 2007dbc:	10801017 	ldw	r2,64(r2)
 2007dc0:	e0fff817 	ldw	r3,-32(fp)
 2007dc4:	18c01117 	ldw	r3,68(r3)
 2007dc8:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 2007dcc:	e0bff817 	ldw	r2,-32(fp)
 2007dd0:	10801017 	ldw	r2,64(r2)
 2007dd4:	e0fff817 	ldw	r3,-32(fp)
 2007dd8:	18c01117 	ldw	r3,68(r3)
 2007ddc:	01000044 	movi	r4,1
 2007de0:	20c6983a 	sll	r3,r4,r3
 2007de4:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 2007de8:	e0bff817 	ldw	r2,-32(fp)
 2007dec:	10801017 	ldw	r2,64(r2)
 2007df0:	100b883a 	mov	r5,r2
 2007df4:	e13ff817 	ldw	r4,-32(fp)
 2007df8:	200c9340 	call	200c934 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 2007dfc:	e0bff817 	ldw	r2,-32(fp)
 2007e00:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 2007e04:	e0bff317 	ldw	r2,-52(fp)
 2007e08:	1000090e 	bge	r2,zero,2007e30 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 2007e0c:	e0800417 	ldw	r2,16(fp)
 2007e10:	00c00044 	movi	r3,1
 2007e14:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 2007e18:	e0fff317 	ldw	r3,-52(fp)
 2007e1c:	00a00034 	movhi	r2,32768
 2007e20:	10bfffc4 	addi	r2,r2,-1
 2007e24:	1884703a 	and	r2,r3,r2
 2007e28:	e0bff315 	stw	r2,-52(fp)
 2007e2c:	00000206 	br	2007e38 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 2007e30:	e0800417 	ldw	r2,16(fp)
 2007e34:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 2007e38:	e0bff317 	ldw	r2,-52(fp)
 2007e3c:	10dffc2c 	andhi	r3,r2,32752
 2007e40:	009ffc34 	movhi	r2,32752
 2007e44:	1880221e 	bne	r3,r2,2007ed0 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 2007e48:	e0800317 	ldw	r2,12(fp)
 2007e4c:	00c9c3c4 	movi	r3,9999
 2007e50:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 2007e54:	e0bff217 	ldw	r2,-56(fp)
 2007e58:	1000081e 	bne	r2,zero,2007e7c <_dtoa_r+0x114>
 2007e5c:	e0fff317 	ldw	r3,-52(fp)
 2007e60:	00800434 	movhi	r2,16
 2007e64:	10bfffc4 	addi	r2,r2,-1
 2007e68:	1884703a 	and	r2,r3,r2
 2007e6c:	1000031e 	bne	r2,zero,2007e7c <_dtoa_r+0x114>
 2007e70:	008080b4 	movhi	r2,514
 2007e74:	10badf04 	addi	r2,r2,-5252
 2007e78:	00000206 	br	2007e84 <_dtoa_r+0x11c>
 2007e7c:	008080b4 	movhi	r2,514
 2007e80:	10bae204 	addi	r2,r2,-5240
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 2007e84:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 2007e88:	e0800517 	ldw	r2,20(fp)
 2007e8c:	10000e26 	beq	r2,zero,2007ec8 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 2007e90:	e0bfe717 	ldw	r2,-100(fp)
 2007e94:	108000c4 	addi	r2,r2,3
 2007e98:	10800003 	ldbu	r2,0(r2)
 2007e9c:	10803fcc 	andi	r2,r2,255
 2007ea0:	1080201c 	xori	r2,r2,128
 2007ea4:	10bfe004 	addi	r2,r2,-128
 2007ea8:	10000326 	beq	r2,zero,2007eb8 <_dtoa_r+0x150>
 2007eac:	e0bfe717 	ldw	r2,-100(fp)
 2007eb0:	10800204 	addi	r2,r2,8
 2007eb4:	00000206 	br	2007ec0 <_dtoa_r+0x158>
 2007eb8:	e0bfe717 	ldw	r2,-100(fp)
 2007ebc:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 2007ec0:	e0c00517 	ldw	r3,20(fp)
 2007ec4:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 2007ec8:	e0bfe717 	ldw	r2,-100(fp)
 2007ecc:	00067b06 	br	20098bc <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 2007ed0:	e0bff217 	ldw	r2,-56(fp)
 2007ed4:	e0fff317 	ldw	r3,-52(fp)
 2007ed8:	000d883a 	mov	r6,zero
 2007edc:	000f883a 	mov	r7,zero
 2007ee0:	1009883a 	mov	r4,r2
 2007ee4:	180b883a 	mov	r5,r3
 2007ee8:	20127700 	call	2012770 <__eqdf2>
 2007eec:	10000e1e 	bne	r2,zero,2007f28 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 2007ef0:	e0800317 	ldw	r2,12(fp)
 2007ef4:	00c00044 	movi	r3,1
 2007ef8:	10c00015 	stw	r3,0(r2)
      s = "0";
 2007efc:	008080b4 	movhi	r2,514
 2007f00:	10bae304 	addi	r2,r2,-5236
 2007f04:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 2007f08:	e0800517 	ldw	r2,20(fp)
 2007f0c:	10000426 	beq	r2,zero,2007f20 <_dtoa_r+0x1b8>
	*rve = s + 1;
 2007f10:	e0bfe717 	ldw	r2,-100(fp)
 2007f14:	10c00044 	addi	r3,r2,1
 2007f18:	e0800517 	ldw	r2,20(fp)
 2007f1c:	10c00015 	stw	r3,0(r2)
      return s;
 2007f20:	e0bfe717 	ldw	r2,-100(fp)
 2007f24:	00066506 	br	20098bc <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 2007f28:	e0bff217 	ldw	r2,-56(fp)
 2007f2c:	e0fff317 	ldw	r3,-52(fp)
 2007f30:	e17ff104 	addi	r5,fp,-60
 2007f34:	e13ff004 	addi	r4,fp,-64
 2007f38:	d9000015 	stw	r4,0(sp)
 2007f3c:	280f883a 	mov	r7,r5
 2007f40:	100b883a 	mov	r5,r2
 2007f44:	180d883a 	mov	r6,r3
 2007f48:	e13ff817 	ldw	r4,-32(fp)
 2007f4c:	200dc6c0 	call	200dc6c <__d2b>
 2007f50:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 2007f54:	e0bff317 	ldw	r2,-52(fp)
 2007f58:	1004d53a 	srli	r2,r2,20
 2007f5c:	1081ffcc 	andi	r2,r2,2047
 2007f60:	e0bfd215 	stw	r2,-184(fp)
 2007f64:	e0bfd217 	ldw	r2,-184(fp)
 2007f68:	10001126 	beq	r2,zero,2007fb0 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 2007f6c:	e0bff217 	ldw	r2,-56(fp)
 2007f70:	e0fff317 	ldw	r3,-52(fp)
 2007f74:	e0bff415 	stw	r2,-48(fp)
 2007f78:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 2007f7c:	e0fff517 	ldw	r3,-44(fp)
 2007f80:	00800434 	movhi	r2,16
 2007f84:	10bfffc4 	addi	r2,r2,-1
 2007f88:	1884703a 	and	r2,r3,r2
 2007f8c:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 2007f90:	e0bff517 	ldw	r2,-44(fp)
 2007f94:	108ffc34 	orhi	r2,r2,16368
 2007f98:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 2007f9c:	e0bfd217 	ldw	r2,-184(fp)
 2007fa0:	10bf0044 	addi	r2,r2,-1023
 2007fa4:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 2007fa8:	e03fe015 	stw	zero,-128(fp)
 2007fac:	00002806 	br	2008050 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 2007fb0:	e0fff017 	ldw	r3,-64(fp)
 2007fb4:	e0bff117 	ldw	r2,-60(fp)
 2007fb8:	1885883a 	add	r2,r3,r2
 2007fbc:	10810c84 	addi	r2,r2,1074
 2007fc0:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 2007fc4:	e0bfd217 	ldw	r2,-184(fp)
 2007fc8:	10800850 	cmplti	r2,r2,33
 2007fcc:	10000b1e 	bne	r2,zero,2007ffc <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2007fd0:	e0fff317 	ldw	r3,-52(fp)
 2007fd4:	01001004 	movi	r4,64
 2007fd8:	e0bfd217 	ldw	r2,-184(fp)
 2007fdc:	2085c83a 	sub	r2,r4,r2
 2007fe0:	1886983a 	sll	r3,r3,r2
 2007fe4:	e13ff217 	ldw	r4,-56(fp)
 2007fe8:	e0bfd217 	ldw	r2,-184(fp)
 2007fec:	10bff804 	addi	r2,r2,-32
 2007ff0:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 2007ff4:	1884b03a 	or	r2,r3,r2
 2007ff8:	00000506 	br	2008010 <_dtoa_r+0x2a8>
 2007ffc:	e0fff217 	ldw	r3,-56(fp)
 2008000:	01000804 	movi	r4,32
 2008004:	e0bfd217 	ldw	r2,-184(fp)
 2008008:	2085c83a 	sub	r2,r4,r2
 200800c:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2008010:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 2008014:	e13fe817 	ldw	r4,-96(fp)
 2008018:	20132500 	call	2013250 <__floatunsidf>
 200801c:	1009883a 	mov	r4,r2
 2008020:	180b883a 	mov	r5,r3
 2008024:	e13ff415 	stw	r4,-48(fp)
 2008028:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 200802c:	e0fff517 	ldw	r3,-44(fp)
 2008030:	00bf8434 	movhi	r2,65040
 2008034:	1885883a 	add	r2,r3,r2
 2008038:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 200803c:	e0bfd217 	ldw	r2,-184(fp)
 2008040:	10bef344 	addi	r2,r2,-1075
 2008044:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 2008048:	00800044 	movi	r2,1
 200804c:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 2008050:	e0bff417 	ldw	r2,-48(fp)
 2008054:	e0fff517 	ldw	r3,-44(fp)
 2008058:	000d883a 	mov	r6,zero
 200805c:	01cffe34 	movhi	r7,16376
 2008060:	1009883a 	mov	r4,r2
 2008064:	180b883a 	mov	r5,r3
 2008068:	20127f80 	call	20127f8 <__subdf3>
 200806c:	1009883a 	mov	r4,r2
 2008070:	180b883a 	mov	r5,r3
 2008074:	2005883a 	mov	r2,r4
 2008078:	2807883a 	mov	r3,r5
 200807c:	0198dbf4 	movhi	r6,25455
 2008080:	3190d844 	addi	r6,r6,17249
 2008084:	01cff4f4 	movhi	r7,16339
 2008088:	39e1e9c4 	addi	r7,r7,-30809
 200808c:	1009883a 	mov	r4,r2
 2008090:	180b883a 	mov	r5,r3
 2008094:	20040740 	call	2004074 <__muldf3>
 2008098:	1009883a 	mov	r4,r2
 200809c:	180b883a 	mov	r5,r3
 20080a0:	2005883a 	mov	r2,r4
 20080a4:	2807883a 	mov	r3,r5
 20080a8:	01a2d874 	movhi	r6,35681
 20080ac:	31b22cc4 	addi	r6,r6,-14157
 20080b0:	01cff1f4 	movhi	r7,16327
 20080b4:	39e28a04 	addi	r7,r7,-30168
 20080b8:	1009883a 	mov	r4,r2
 20080bc:	180b883a 	mov	r5,r3
 20080c0:	2011ec40 	call	2011ec4 <__adddf3>
 20080c4:	1009883a 	mov	r4,r2
 20080c8:	180b883a 	mov	r5,r3
 20080cc:	2025883a 	mov	r18,r4
 20080d0:	2827883a 	mov	r19,r5
 20080d4:	e13fd217 	ldw	r4,-184(fp)
 20080d8:	20131740 	call	2013174 <__floatsidf>
 20080dc:	1011883a 	mov	r8,r2
 20080e0:	1813883a 	mov	r9,r3
 20080e4:	019427f4 	movhi	r6,20639
 20080e8:	319e7ec4 	addi	r6,r6,31227
 20080ec:	01cff4f4 	movhi	r7,16339
 20080f0:	39d104c4 	addi	r7,r7,17427
 20080f4:	4009883a 	mov	r4,r8
 20080f8:	480b883a 	mov	r5,r9
 20080fc:	20040740 	call	2004074 <__muldf3>
 2008100:	1009883a 	mov	r4,r2
 2008104:	180b883a 	mov	r5,r3
 2008108:	2005883a 	mov	r2,r4
 200810c:	2807883a 	mov	r3,r5
 2008110:	100d883a 	mov	r6,r2
 2008114:	180f883a 	mov	r7,r3
 2008118:	9009883a 	mov	r4,r18
 200811c:	980b883a 	mov	r5,r19
 2008120:	2011ec40 	call	2011ec4 <__adddf3>
 2008124:	1009883a 	mov	r4,r2
 2008128:	180b883a 	mov	r5,r3
 200812c:	e13fe515 	stw	r4,-108(fp)
 2008130:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 2008134:	e13fe517 	ldw	r4,-108(fp)
 2008138:	e17fe617 	ldw	r5,-104(fp)
 200813c:	20130f40 	call	20130f4 <__fixdfsi>
 2008140:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 2008144:	000d883a 	mov	r6,zero
 2008148:	000f883a 	mov	r7,zero
 200814c:	e13fe517 	ldw	r4,-108(fp)
 2008150:	e17fe617 	ldw	r5,-104(fp)
 2008154:	2003f800 	call	2003f80 <__ledf2>
 2008158:	10000d0e 	bge	r2,zero,2008190 <_dtoa_r+0x428>
 200815c:	e13fd717 	ldw	r4,-164(fp)
 2008160:	20131740 	call	2013174 <__floatsidf>
 2008164:	1011883a 	mov	r8,r2
 2008168:	1813883a 	mov	r9,r3
 200816c:	e1bfe517 	ldw	r6,-108(fp)
 2008170:	e1ffe617 	ldw	r7,-104(fp)
 2008174:	4009883a 	mov	r4,r8
 2008178:	480b883a 	mov	r5,r9
 200817c:	20127700 	call	2012770 <__eqdf2>
 2008180:	10000326 	beq	r2,zero,2008190 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 2008184:	e0bfd717 	ldw	r2,-164(fp)
 2008188:	10bfffc4 	addi	r2,r2,-1
 200818c:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 2008190:	00800044 	movi	r2,1
 2008194:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 2008198:	e0bfd717 	ldw	r2,-164(fp)
 200819c:	10001616 	blt	r2,zero,20081f8 <_dtoa_r+0x490>
 20081a0:	e0bfd717 	ldw	r2,-164(fp)
 20081a4:	108005c8 	cmpgei	r2,r2,23
 20081a8:	1000131e 	bne	r2,zero,20081f8 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 20081ac:	e0bff217 	ldw	r2,-56(fp)
 20081b0:	e0fff317 	ldw	r3,-52(fp)
 20081b4:	010080b4 	movhi	r4,514
 20081b8:	213aea04 	addi	r4,r4,-5208
 20081bc:	e17fd717 	ldw	r5,-164(fp)
 20081c0:	280a90fa 	slli	r5,r5,3
 20081c4:	214d883a 	add	r6,r4,r5
 20081c8:	31000017 	ldw	r4,0(r6)
 20081cc:	31400117 	ldw	r5,4(r6)
 20081d0:	200d883a 	mov	r6,r4
 20081d4:	280f883a 	mov	r7,r5
 20081d8:	1009883a 	mov	r4,r2
 20081dc:	180b883a 	mov	r5,r3
 20081e0:	2003f800 	call	2003f80 <__ledf2>
 20081e4:	1000030e 	bge	r2,zero,20081f4 <_dtoa_r+0x48c>
	k--;
 20081e8:	e0bfd717 	ldw	r2,-164(fp)
 20081ec:	10bfffc4 	addi	r2,r2,-1
 20081f0:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 20081f4:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 20081f8:	e0fff017 	ldw	r3,-64(fp)
 20081fc:	e0bfd217 	ldw	r2,-184(fp)
 2008200:	1885c83a 	sub	r2,r3,r2
 2008204:	10bfffc4 	addi	r2,r2,-1
 2008208:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 200820c:	e0bfd617 	ldw	r2,-168(fp)
 2008210:	10000416 	blt	r2,zero,2008224 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 2008214:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 2008218:	e0bfd617 	ldw	r2,-168(fp)
 200821c:	e0bfdc15 	stw	r2,-144(fp)
 2008220:	00000406 	br	2008234 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 2008224:	e0bfd617 	ldw	r2,-168(fp)
 2008228:	0085c83a 	sub	r2,zero,r2
 200822c:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 2008230:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 2008234:	e0bfd717 	ldw	r2,-164(fp)
 2008238:	10000816 	blt	r2,zero,200825c <_dtoa_r+0x4f4>
    {
      b5 = 0;
 200823c:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 2008240:	e0bfd717 	ldw	r2,-164(fp)
 2008244:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 2008248:	e0ffdc17 	ldw	r3,-144(fp)
 200824c:	e0bfd717 	ldw	r2,-164(fp)
 2008250:	1885883a 	add	r2,r3,r2
 2008254:	e0bfdc15 	stw	r2,-144(fp)
 2008258:	00000806 	br	200827c <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 200825c:	e0ffcf17 	ldw	r3,-196(fp)
 2008260:	e0bfd717 	ldw	r2,-164(fp)
 2008264:	1885c83a 	sub	r2,r3,r2
 2008268:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 200826c:	e0bfd717 	ldw	r2,-164(fp)
 2008270:	0085c83a 	sub	r2,zero,r2
 2008274:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 2008278:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 200827c:	e0bffb17 	ldw	r2,-20(fp)
 2008280:	10000316 	blt	r2,zero,2008290 <_dtoa_r+0x528>
 2008284:	e0bffb17 	ldw	r2,-20(fp)
 2008288:	10800290 	cmplti	r2,r2,10
 200828c:	1000011e 	bne	r2,zero,2008294 <_dtoa_r+0x52c>
    mode = 0;
 2008290:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 2008294:	00800044 	movi	r2,1
 2008298:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 200829c:	e0bffb17 	ldw	r2,-20(fp)
 20082a0:	10800190 	cmplti	r2,r2,6
 20082a4:	1000041e 	bne	r2,zero,20082b8 <_dtoa_r+0x550>
    {
      mode -= 4;
 20082a8:	e0bffb17 	ldw	r2,-20(fp)
 20082ac:	10bfff04 	addi	r2,r2,-4
 20082b0:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 20082b4:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 20082b8:	00800044 	movi	r2,1
 20082bc:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 20082c0:	00bfffc4 	movi	r2,-1
 20082c4:	e0bfd515 	stw	r2,-172(fp)
 20082c8:	e0bfd517 	ldw	r2,-172(fp)
 20082cc:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 20082d0:	e0bffb17 	ldw	r2,-20(fp)
 20082d4:	108001a8 	cmpgeui	r2,r2,6
 20082d8:	10002c1e 	bne	r2,zero,200838c <_dtoa_r+0x624>
 20082dc:	e0bffb17 	ldw	r2,-20(fp)
 20082e0:	100690ba 	slli	r3,r2,2
 20082e4:	00808074 	movhi	r2,513
 20082e8:	10a0be04 	addi	r2,r2,-32008
 20082ec:	1885883a 	add	r2,r3,r2
 20082f0:	10800017 	ldw	r2,0(r2)
 20082f4:	1000683a 	jmp	r2
 20082f8:	02008310 	cmplti	r8,zero,524
 20082fc:	02008310 	cmplti	r8,zero,524
 2008300:	02008320 	cmpeqi	r8,zero,524
 2008304:	02008350 	cmplti	r8,zero,525
 2008308:	02008324 	muli	r8,zero,524
 200830c:	02008354 	movui	r8,525
    {
    case 0:
    case 1:
      i = 18;
 2008310:	00800484 	movi	r2,18
 2008314:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 2008318:	e0000215 	stw	zero,8(fp)
      break;
 200831c:	00001b06 	br	200838c <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 2008320:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 2008324:	e0800217 	ldw	r2,8(fp)
 2008328:	00800216 	blt	zero,r2,2008334 <_dtoa_r+0x5cc>
	ndigits = 1;
 200832c:	00800044 	movi	r2,1
 2008330:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 2008334:	e0800217 	ldw	r2,8(fp)
 2008338:	e0bfd215 	stw	r2,-184(fp)
 200833c:	e0bfd217 	ldw	r2,-184(fp)
 2008340:	e0bfd515 	stw	r2,-172(fp)
 2008344:	e0bfd517 	ldw	r2,-172(fp)
 2008348:	e0bfd415 	stw	r2,-176(fp)
      break;
 200834c:	00000f06 	br	200838c <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 2008350:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 2008354:	e0c00217 	ldw	r3,8(fp)
 2008358:	e0bfd717 	ldw	r2,-164(fp)
 200835c:	1885883a 	add	r2,r3,r2
 2008360:	10800044 	addi	r2,r2,1
 2008364:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 2008368:	e0bfd217 	ldw	r2,-184(fp)
 200836c:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 2008370:	e0bfd217 	ldw	r2,-184(fp)
 2008374:	10bfffc4 	addi	r2,r2,-1
 2008378:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200837c:	e0bfd217 	ldw	r2,-184(fp)
 2008380:	00800216 	blt	zero,r2,200838c <_dtoa_r+0x624>
	i = 1;
 2008384:	00800044 	movi	r2,1
 2008388:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200838c:	00800104 	movi	r2,4
 2008390:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2008394:	e0bff817 	ldw	r2,-32(fp)
 2008398:	10001115 	stw	zero,68(r2)
 200839c:	00000806 	br	20083c0 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 20083a0:	e0bff817 	ldw	r2,-32(fp)
 20083a4:	10801117 	ldw	r2,68(r2)
 20083a8:	10c00044 	addi	r3,r2,1
 20083ac:	e0bff817 	ldw	r2,-32(fp)
 20083b0:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 20083b4:	e0bfd617 	ldw	r2,-168(fp)
 20083b8:	1085883a 	add	r2,r2,r2
 20083bc:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 20083c0:	e0bfd617 	ldw	r2,-168(fp)
 20083c4:	10800504 	addi	r2,r2,20
 20083c8:	e0ffd217 	ldw	r3,-184(fp)
 20083cc:	18bff42e 	bgeu	r3,r2,20083a0 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 20083d0:	e0bff817 	ldw	r2,-32(fp)
 20083d4:	10801117 	ldw	r2,68(r2)
 20083d8:	100b883a 	mov	r5,r2
 20083dc:	e13ff817 	ldw	r4,-32(fp)
 20083e0:	200c8040 	call	200c804 <_Balloc>
 20083e4:	1007883a 	mov	r3,r2
 20083e8:	e0bff817 	ldw	r2,-32(fp)
 20083ec:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 20083f0:	e0bff817 	ldw	r2,-32(fp)
 20083f4:	10801017 	ldw	r2,64(r2)
 20083f8:	e0bfe915 	stw	r2,-92(fp)
 20083fc:	e0bfe917 	ldw	r2,-92(fp)
 2008400:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 2008404:	e0bfd417 	ldw	r2,-176(fp)
 2008408:	10021616 	blt	r2,zero,2008c64 <_dtoa_r+0xefc>
 200840c:	e0bfd417 	ldw	r2,-176(fp)
 2008410:	108003c8 	cmpgei	r2,r2,15
 2008414:	1002131e 	bne	r2,zero,2008c64 <_dtoa_r+0xefc>
 2008418:	e0bfdf17 	ldw	r2,-132(fp)
 200841c:	10021126 	beq	r2,zero,2008c64 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 2008420:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 2008424:	e0bff217 	ldw	r2,-56(fp)
 2008428:	e0fff317 	ldw	r3,-52(fp)
 200842c:	e0bff415 	stw	r2,-48(fp)
 2008430:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 2008434:	e0bfd717 	ldw	r2,-164(fp)
 2008438:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200843c:	e0bfd417 	ldw	r2,-176(fp)
 2008440:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 2008444:	00800084 	movi	r2,2
 2008448:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200844c:	e0bfd717 	ldw	r2,-164(fp)
 2008450:	0080540e 	bge	zero,r2,20085a4 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 2008454:	e0bfd717 	ldw	r2,-164(fp)
 2008458:	10c003cc 	andi	r3,r2,15
 200845c:	008080b4 	movhi	r2,514
 2008460:	10baea04 	addi	r2,r2,-5208
 2008464:	180690fa 	slli	r3,r3,3
 2008468:	10c5883a 	add	r2,r2,r3
 200846c:	10c00017 	ldw	r3,0(r2)
 2008470:	e0ffe515 	stw	r3,-108(fp)
 2008474:	10800117 	ldw	r2,4(r2)
 2008478:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200847c:	e0bfd717 	ldw	r2,-164(fp)
 2008480:	1005d13a 	srai	r2,r2,4
 2008484:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 2008488:	e0bfd617 	ldw	r2,-168(fp)
 200848c:	1080040c 	andi	r2,r2,16
 2008490:	10003426 	beq	r2,zero,2008564 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 2008494:	e0bfd617 	ldw	r2,-168(fp)
 2008498:	108003cc 	andi	r2,r2,15
 200849c:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 20084a0:	e0bff217 	ldw	r2,-56(fp)
 20084a4:	e0fff317 	ldw	r3,-52(fp)
 20084a8:	018080b4 	movhi	r6,514
 20084ac:	31bb1c04 	addi	r6,r6,-5008
 20084b0:	31000817 	ldw	r4,32(r6)
 20084b4:	31400917 	ldw	r5,36(r6)
 20084b8:	200d883a 	mov	r6,r4
 20084bc:	280f883a 	mov	r7,r5
 20084c0:	1009883a 	mov	r4,r2
 20084c4:	180b883a 	mov	r5,r3
 20084c8:	20035bc0 	call	20035bc <__divdf3>
 20084cc:	1009883a 	mov	r4,r2
 20084d0:	180b883a 	mov	r5,r3
 20084d4:	2005883a 	mov	r2,r4
 20084d8:	2807883a 	mov	r3,r5
 20084dc:	e0bff215 	stw	r2,-56(fp)
 20084e0:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 20084e4:	e0bfd317 	ldw	r2,-180(fp)
 20084e8:	10800044 	addi	r2,r2,1
 20084ec:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 20084f0:	00001c06 	br	2008564 <_dtoa_r+0x7fc>
	    if (j & 1)
 20084f4:	e0bfd617 	ldw	r2,-168(fp)
 20084f8:	1080004c 	andi	r2,r2,1
 20084fc:	10001326 	beq	r2,zero,200854c <_dtoa_r+0x7e4>
	      {
		ieps++;
 2008500:	e0bfd317 	ldw	r2,-180(fp)
 2008504:	10800044 	addi	r2,r2,1
 2008508:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 200850c:	008080b4 	movhi	r2,514
 2008510:	10bb1c04 	addi	r2,r2,-5008
 2008514:	e0ffd217 	ldw	r3,-184(fp)
 2008518:	180690fa 	slli	r3,r3,3
 200851c:	10c9883a 	add	r4,r2,r3
 2008520:	20800017 	ldw	r2,0(r4)
 2008524:	20c00117 	ldw	r3,4(r4)
 2008528:	100d883a 	mov	r6,r2
 200852c:	180f883a 	mov	r7,r3
 2008530:	e13fe517 	ldw	r4,-108(fp)
 2008534:	e17fe617 	ldw	r5,-104(fp)
 2008538:	20040740 	call	2004074 <__muldf3>
 200853c:	1009883a 	mov	r4,r2
 2008540:	180b883a 	mov	r5,r3
 2008544:	e13fe515 	stw	r4,-108(fp)
 2008548:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200854c:	e0bfd617 	ldw	r2,-168(fp)
 2008550:	1005d07a 	srai	r2,r2,1
 2008554:	e0bfd615 	stw	r2,-168(fp)
 2008558:	e0bfd217 	ldw	r2,-184(fp)
 200855c:	10800044 	addi	r2,r2,1
 2008560:	e0bfd215 	stw	r2,-184(fp)
 2008564:	e0bfd617 	ldw	r2,-168(fp)
 2008568:	103fe21e 	bne	r2,zero,20084f4 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200856c:	e0bff217 	ldw	r2,-56(fp)
 2008570:	e0fff317 	ldw	r3,-52(fp)
 2008574:	e1bfe517 	ldw	r6,-108(fp)
 2008578:	e1ffe617 	ldw	r7,-104(fp)
 200857c:	1009883a 	mov	r4,r2
 2008580:	180b883a 	mov	r5,r3
 2008584:	20035bc0 	call	20035bc <__divdf3>
 2008588:	1009883a 	mov	r4,r2
 200858c:	180b883a 	mov	r5,r3
 2008590:	2005883a 	mov	r2,r4
 2008594:	2807883a 	mov	r3,r5
 2008598:	e0bff215 	stw	r2,-56(fp)
 200859c:	e0fff315 	stw	r3,-52(fp)
 20085a0:	00004006 	br	20086a4 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 20085a4:	e0bfd717 	ldw	r2,-164(fp)
 20085a8:	0085c83a 	sub	r2,zero,r2
 20085ac:	e0bfec15 	stw	r2,-80(fp)
 20085b0:	e0bfec17 	ldw	r2,-80(fp)
 20085b4:	10003b26 	beq	r2,zero,20086a4 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 20085b8:	e0bff217 	ldw	r2,-56(fp)
 20085bc:	e0fff317 	ldw	r3,-52(fp)
 20085c0:	e13fec17 	ldw	r4,-80(fp)
 20085c4:	214003cc 	andi	r5,r4,15
 20085c8:	010080b4 	movhi	r4,514
 20085cc:	213aea04 	addi	r4,r4,-5208
 20085d0:	280a90fa 	slli	r5,r5,3
 20085d4:	214d883a 	add	r6,r4,r5
 20085d8:	31000017 	ldw	r4,0(r6)
 20085dc:	31400117 	ldw	r5,4(r6)
 20085e0:	200d883a 	mov	r6,r4
 20085e4:	280f883a 	mov	r7,r5
 20085e8:	1009883a 	mov	r4,r2
 20085ec:	180b883a 	mov	r5,r3
 20085f0:	20040740 	call	2004074 <__muldf3>
 20085f4:	1009883a 	mov	r4,r2
 20085f8:	180b883a 	mov	r5,r3
 20085fc:	2005883a 	mov	r2,r4
 2008600:	2807883a 	mov	r3,r5
 2008604:	e0bff215 	stw	r2,-56(fp)
 2008608:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200860c:	e0bfec17 	ldw	r2,-80(fp)
 2008610:	1005d13a 	srai	r2,r2,4
 2008614:	e0bfd615 	stw	r2,-168(fp)
 2008618:	00002006 	br	200869c <_dtoa_r+0x934>
	    if (j & 1)
 200861c:	e0bfd617 	ldw	r2,-168(fp)
 2008620:	1080004c 	andi	r2,r2,1
 2008624:	10001726 	beq	r2,zero,2008684 <_dtoa_r+0x91c>
	      {
		ieps++;
 2008628:	e0bfd317 	ldw	r2,-180(fp)
 200862c:	10800044 	addi	r2,r2,1
 2008630:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 2008634:	e0bff217 	ldw	r2,-56(fp)
 2008638:	e0fff317 	ldw	r3,-52(fp)
 200863c:	010080b4 	movhi	r4,514
 2008640:	213b1c04 	addi	r4,r4,-5008
 2008644:	e17fd217 	ldw	r5,-184(fp)
 2008648:	280a90fa 	slli	r5,r5,3
 200864c:	214d883a 	add	r6,r4,r5
 2008650:	31000017 	ldw	r4,0(r6)
 2008654:	31400117 	ldw	r5,4(r6)
 2008658:	200d883a 	mov	r6,r4
 200865c:	280f883a 	mov	r7,r5
 2008660:	1009883a 	mov	r4,r2
 2008664:	180b883a 	mov	r5,r3
 2008668:	20040740 	call	2004074 <__muldf3>
 200866c:	1009883a 	mov	r4,r2
 2008670:	180b883a 	mov	r5,r3
 2008674:	2005883a 	mov	r2,r4
 2008678:	2807883a 	mov	r3,r5
 200867c:	e0bff215 	stw	r2,-56(fp)
 2008680:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 2008684:	e0bfd617 	ldw	r2,-168(fp)
 2008688:	1005d07a 	srai	r2,r2,1
 200868c:	e0bfd615 	stw	r2,-168(fp)
 2008690:	e0bfd217 	ldw	r2,-184(fp)
 2008694:	10800044 	addi	r2,r2,1
 2008698:	e0bfd215 	stw	r2,-184(fp)
 200869c:	e0bfd617 	ldw	r2,-168(fp)
 20086a0:	103fde1e 	bne	r2,zero,200861c <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 20086a4:	e0bfd817 	ldw	r2,-160(fp)
 20086a8:	10002126 	beq	r2,zero,2008730 <_dtoa_r+0x9c8>
 20086ac:	e0bff217 	ldw	r2,-56(fp)
 20086b0:	e0fff317 	ldw	r3,-52(fp)
 20086b4:	000d883a 	mov	r6,zero
 20086b8:	01cffc34 	movhi	r7,16368
 20086bc:	1009883a 	mov	r4,r2
 20086c0:	180b883a 	mov	r5,r3
 20086c4:	2003f800 	call	2003f80 <__ledf2>
 20086c8:	1000190e 	bge	r2,zero,2008730 <_dtoa_r+0x9c8>
 20086cc:	e0bfd417 	ldw	r2,-176(fp)
 20086d0:	0080170e 	bge	zero,r2,2008730 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 20086d4:	e0bfd517 	ldw	r2,-172(fp)
 20086d8:	0081550e 	bge	zero,r2,2008c30 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 20086dc:	e0bfd517 	ldw	r2,-172(fp)
 20086e0:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 20086e4:	e0bfd717 	ldw	r2,-164(fp)
 20086e8:	10bfffc4 	addi	r2,r2,-1
 20086ec:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 20086f0:	e0bff217 	ldw	r2,-56(fp)
 20086f4:	e0fff317 	ldw	r3,-52(fp)
 20086f8:	000d883a 	mov	r6,zero
 20086fc:	01d00934 	movhi	r7,16420
 2008700:	1009883a 	mov	r4,r2
 2008704:	180b883a 	mov	r5,r3
 2008708:	20040740 	call	2004074 <__muldf3>
 200870c:	1009883a 	mov	r4,r2
 2008710:	180b883a 	mov	r5,r3
 2008714:	2005883a 	mov	r2,r4
 2008718:	2807883a 	mov	r3,r5
 200871c:	e0bff215 	stw	r2,-56(fp)
 2008720:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 2008724:	e0bfd317 	ldw	r2,-180(fp)
 2008728:	10800044 	addi	r2,r2,1
 200872c:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 2008730:	e13fd317 	ldw	r4,-180(fp)
 2008734:	20131740 	call	2013174 <__floatsidf>
 2008738:	1011883a 	mov	r8,r2
 200873c:	1813883a 	mov	r9,r3
 2008740:	e0bff217 	ldw	r2,-56(fp)
 2008744:	e0fff317 	ldw	r3,-52(fp)
 2008748:	100d883a 	mov	r6,r2
 200874c:	180f883a 	mov	r7,r3
 2008750:	4009883a 	mov	r4,r8
 2008754:	480b883a 	mov	r5,r9
 2008758:	20040740 	call	2004074 <__muldf3>
 200875c:	1009883a 	mov	r4,r2
 2008760:	180b883a 	mov	r5,r3
 2008764:	2005883a 	mov	r2,r4
 2008768:	2807883a 	mov	r3,r5
 200876c:	000d883a 	mov	r6,zero
 2008770:	01d00734 	movhi	r7,16412
 2008774:	1009883a 	mov	r4,r2
 2008778:	180b883a 	mov	r5,r3
 200877c:	2011ec40 	call	2011ec4 <__adddf3>
 2008780:	1009883a 	mov	r4,r2
 2008784:	180b883a 	mov	r5,r3
 2008788:	2005883a 	mov	r2,r4
 200878c:	2807883a 	mov	r3,r5
 2008790:	e0bff615 	stw	r2,-40(fp)
 2008794:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 2008798:	e0fff717 	ldw	r3,-36(fp)
 200879c:	00bf3034 	movhi	r2,64704
 20087a0:	1885883a 	add	r2,r3,r2
 20087a4:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 20087a8:	e0bfd417 	ldw	r2,-176(fp)
 20087ac:	1000271e 	bne	r2,zero,200884c <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 20087b0:	e03fe315 	stw	zero,-116(fp)
 20087b4:	e0bfe317 	ldw	r2,-116(fp)
 20087b8:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 20087bc:	e0bff217 	ldw	r2,-56(fp)
 20087c0:	e0fff317 	ldw	r3,-52(fp)
 20087c4:	000d883a 	mov	r6,zero
 20087c8:	01d00534 	movhi	r7,16404
 20087cc:	1009883a 	mov	r4,r2
 20087d0:	180b883a 	mov	r5,r3
 20087d4:	20127f80 	call	20127f8 <__subdf3>
 20087d8:	1009883a 	mov	r4,r2
 20087dc:	180b883a 	mov	r5,r3
 20087e0:	2005883a 	mov	r2,r4
 20087e4:	2807883a 	mov	r3,r5
 20087e8:	e0bff215 	stw	r2,-56(fp)
 20087ec:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 20087f0:	e0bff217 	ldw	r2,-56(fp)
 20087f4:	e0fff317 	ldw	r3,-52(fp)
 20087f8:	e13ff617 	ldw	r4,-40(fp)
 20087fc:	e17ff717 	ldw	r5,-36(fp)
 2008800:	200d883a 	mov	r6,r4
 2008804:	280f883a 	mov	r7,r5
 2008808:	1009883a 	mov	r4,r2
 200880c:	180b883a 	mov	r5,r3
 2008810:	2003ea40 	call	2003ea4 <__gedf2>
 2008814:	0082eb16 	blt	zero,r2,20093c4 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 2008818:	e23ff217 	ldw	r8,-56(fp)
 200881c:	e27ff317 	ldw	r9,-52(fp)
 2008820:	e0bff617 	ldw	r2,-40(fp)
 2008824:	e0fff717 	ldw	r3,-36(fp)
 2008828:	1021883a 	mov	r16,r2
 200882c:	1c60003c 	xorhi	r17,r3,32768
 2008830:	800d883a 	mov	r6,r16
 2008834:	880f883a 	mov	r7,r17
 2008838:	4009883a 	mov	r4,r8
 200883c:	480b883a 	mov	r5,r9
 2008840:	2003f800 	call	2003f80 <__ledf2>
 2008844:	1002da16 	blt	r2,zero,20093b0 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 2008848:	0000fc06 	br	2008c3c <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200884c:	e0bfd917 	ldw	r2,-156(fp)
 2008850:	10007a26 	beq	r2,zero,2008a3c <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 2008854:	e0bfd417 	ldw	r2,-176(fp)
 2008858:	10ffffc4 	addi	r3,r2,-1
 200885c:	008080b4 	movhi	r2,514
 2008860:	10baea04 	addi	r2,r2,-5208
 2008864:	180690fa 	slli	r3,r3,3
 2008868:	10c9883a 	add	r4,r2,r3
 200886c:	20800017 	ldw	r2,0(r4)
 2008870:	20c00117 	ldw	r3,4(r4)
 2008874:	100d883a 	mov	r6,r2
 2008878:	180f883a 	mov	r7,r3
 200887c:	0009883a 	mov	r4,zero
 2008880:	014ff834 	movhi	r5,16352
 2008884:	20035bc0 	call	20035bc <__divdf3>
 2008888:	1009883a 	mov	r4,r2
 200888c:	180b883a 	mov	r5,r3
 2008890:	2011883a 	mov	r8,r4
 2008894:	2813883a 	mov	r9,r5
 2008898:	e0bff617 	ldw	r2,-40(fp)
 200889c:	e0fff717 	ldw	r3,-36(fp)
 20088a0:	100d883a 	mov	r6,r2
 20088a4:	180f883a 	mov	r7,r3
 20088a8:	4009883a 	mov	r4,r8
 20088ac:	480b883a 	mov	r5,r9
 20088b0:	20127f80 	call	20127f8 <__subdf3>
 20088b4:	1009883a 	mov	r4,r2
 20088b8:	180b883a 	mov	r5,r3
 20088bc:	2005883a 	mov	r2,r4
 20088c0:	2807883a 	mov	r3,r5
 20088c4:	e0bff615 	stw	r2,-40(fp)
 20088c8:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 20088cc:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 20088d0:	e0bff217 	ldw	r2,-56(fp)
 20088d4:	e0fff317 	ldw	r3,-52(fp)
 20088d8:	1009883a 	mov	r4,r2
 20088dc:	180b883a 	mov	r5,r3
 20088e0:	20130f40 	call	20130f4 <__fixdfsi>
 20088e4:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 20088e8:	e43ff217 	ldw	r16,-56(fp)
 20088ec:	e47ff317 	ldw	r17,-52(fp)
 20088f0:	e13fed17 	ldw	r4,-76(fp)
 20088f4:	20131740 	call	2013174 <__floatsidf>
 20088f8:	1009883a 	mov	r4,r2
 20088fc:	180b883a 	mov	r5,r3
 2008900:	200d883a 	mov	r6,r4
 2008904:	280f883a 	mov	r7,r5
 2008908:	8009883a 	mov	r4,r16
 200890c:	880b883a 	mov	r5,r17
 2008910:	20127f80 	call	20127f8 <__subdf3>
 2008914:	1009883a 	mov	r4,r2
 2008918:	180b883a 	mov	r5,r3
 200891c:	2005883a 	mov	r2,r4
 2008920:	2807883a 	mov	r3,r5
 2008924:	e0bff215 	stw	r2,-56(fp)
 2008928:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200892c:	e0bfe717 	ldw	r2,-100(fp)
 2008930:	10c00044 	addi	r3,r2,1
 2008934:	e0ffe715 	stw	r3,-100(fp)
 2008938:	e0ffed17 	ldw	r3,-76(fp)
 200893c:	18c00c04 	addi	r3,r3,48
 2008940:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 2008944:	e0bff217 	ldw	r2,-56(fp)
 2008948:	e0fff317 	ldw	r3,-52(fp)
 200894c:	e13ff617 	ldw	r4,-40(fp)
 2008950:	e17ff717 	ldw	r5,-36(fp)
 2008954:	200d883a 	mov	r6,r4
 2008958:	280f883a 	mov	r7,r5
 200895c:	1009883a 	mov	r4,r2
 2008960:	180b883a 	mov	r5,r3
 2008964:	2003f800 	call	2003f80 <__ledf2>
 2008968:	1003c416 	blt	r2,zero,200987c <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200896c:	e0bff217 	ldw	r2,-56(fp)
 2008970:	e0fff317 	ldw	r3,-52(fp)
 2008974:	100d883a 	mov	r6,r2
 2008978:	180f883a 	mov	r7,r3
 200897c:	0009883a 	mov	r4,zero
 2008980:	014ffc34 	movhi	r5,16368
 2008984:	20127f80 	call	20127f8 <__subdf3>
 2008988:	1009883a 	mov	r4,r2
 200898c:	180b883a 	mov	r5,r3
 2008990:	2011883a 	mov	r8,r4
 2008994:	2813883a 	mov	r9,r5
 2008998:	e0bff617 	ldw	r2,-40(fp)
 200899c:	e0fff717 	ldw	r3,-36(fp)
 20089a0:	100d883a 	mov	r6,r2
 20089a4:	180f883a 	mov	r7,r3
 20089a8:	4009883a 	mov	r4,r8
 20089ac:	480b883a 	mov	r5,r9
 20089b0:	2003f800 	call	2003f80 <__ledf2>
 20089b4:	10012916 	blt	r2,zero,2008e5c <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 20089b8:	e0bfd217 	ldw	r2,-184(fp)
 20089bc:	10800044 	addi	r2,r2,1
 20089c0:	e0bfd215 	stw	r2,-184(fp)
 20089c4:	e0ffd217 	ldw	r3,-184(fp)
 20089c8:	e0bfd417 	ldw	r2,-176(fp)
 20089cc:	18809a0e 	bge	r3,r2,2008c38 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 20089d0:	e0bff617 	ldw	r2,-40(fp)
 20089d4:	e0fff717 	ldw	r3,-36(fp)
 20089d8:	000d883a 	mov	r6,zero
 20089dc:	01d00934 	movhi	r7,16420
 20089e0:	1009883a 	mov	r4,r2
 20089e4:	180b883a 	mov	r5,r3
 20089e8:	20040740 	call	2004074 <__muldf3>
 20089ec:	1009883a 	mov	r4,r2
 20089f0:	180b883a 	mov	r5,r3
 20089f4:	2005883a 	mov	r2,r4
 20089f8:	2807883a 	mov	r3,r5
 20089fc:	e0bff615 	stw	r2,-40(fp)
 2008a00:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 2008a04:	e0bff217 	ldw	r2,-56(fp)
 2008a08:	e0fff317 	ldw	r3,-52(fp)
 2008a0c:	000d883a 	mov	r6,zero
 2008a10:	01d00934 	movhi	r7,16420
 2008a14:	1009883a 	mov	r4,r2
 2008a18:	180b883a 	mov	r5,r3
 2008a1c:	20040740 	call	2004074 <__muldf3>
 2008a20:	1009883a 	mov	r4,r2
 2008a24:	180b883a 	mov	r5,r3
 2008a28:	2005883a 	mov	r2,r4
 2008a2c:	2807883a 	mov	r3,r5
 2008a30:	e0bff215 	stw	r2,-56(fp)
 2008a34:	e0fff315 	stw	r3,-52(fp)
	    }
 2008a38:	003fa506 	br	20088d0 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 2008a3c:	e0bff617 	ldw	r2,-40(fp)
 2008a40:	e0fff717 	ldw	r3,-36(fp)
 2008a44:	e13fd417 	ldw	r4,-176(fp)
 2008a48:	217fffc4 	addi	r5,r4,-1
 2008a4c:	010080b4 	movhi	r4,514
 2008a50:	213aea04 	addi	r4,r4,-5208
 2008a54:	280a90fa 	slli	r5,r5,3
 2008a58:	214d883a 	add	r6,r4,r5
 2008a5c:	31000017 	ldw	r4,0(r6)
 2008a60:	31400117 	ldw	r5,4(r6)
 2008a64:	200d883a 	mov	r6,r4
 2008a68:	280f883a 	mov	r7,r5
 2008a6c:	1009883a 	mov	r4,r2
 2008a70:	180b883a 	mov	r5,r3
 2008a74:	20040740 	call	2004074 <__muldf3>
 2008a78:	1009883a 	mov	r4,r2
 2008a7c:	180b883a 	mov	r5,r3
 2008a80:	2005883a 	mov	r2,r4
 2008a84:	2807883a 	mov	r3,r5
 2008a88:	e0bff615 	stw	r2,-40(fp)
 2008a8c:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 2008a90:	00800044 	movi	r2,1
 2008a94:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 2008a98:	e0bff217 	ldw	r2,-56(fp)
 2008a9c:	e0fff317 	ldw	r3,-52(fp)
 2008aa0:	1009883a 	mov	r4,r2
 2008aa4:	180b883a 	mov	r5,r3
 2008aa8:	20130f40 	call	20130f4 <__fixdfsi>
 2008aac:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 2008ab0:	e43ff217 	ldw	r16,-56(fp)
 2008ab4:	e47ff317 	ldw	r17,-52(fp)
 2008ab8:	e13fed17 	ldw	r4,-76(fp)
 2008abc:	20131740 	call	2013174 <__floatsidf>
 2008ac0:	1009883a 	mov	r4,r2
 2008ac4:	180b883a 	mov	r5,r3
 2008ac8:	200d883a 	mov	r6,r4
 2008acc:	280f883a 	mov	r7,r5
 2008ad0:	8009883a 	mov	r4,r16
 2008ad4:	880b883a 	mov	r5,r17
 2008ad8:	20127f80 	call	20127f8 <__subdf3>
 2008adc:	1009883a 	mov	r4,r2
 2008ae0:	180b883a 	mov	r5,r3
 2008ae4:	2005883a 	mov	r2,r4
 2008ae8:	2807883a 	mov	r3,r5
 2008aec:	e0bff215 	stw	r2,-56(fp)
 2008af0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 2008af4:	e0bfe717 	ldw	r2,-100(fp)
 2008af8:	10c00044 	addi	r3,r2,1
 2008afc:	e0ffe715 	stw	r3,-100(fp)
 2008b00:	e0ffed17 	ldw	r3,-76(fp)
 2008b04:	18c00c04 	addi	r3,r3,48
 2008b08:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 2008b0c:	e0ffd217 	ldw	r3,-184(fp)
 2008b10:	e0bfd417 	ldw	r2,-176(fp)
 2008b14:	1880351e 	bne	r3,r2,2008bec <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 2008b18:	e43ff217 	ldw	r16,-56(fp)
 2008b1c:	e47ff317 	ldw	r17,-52(fp)
 2008b20:	e0bff617 	ldw	r2,-40(fp)
 2008b24:	e0fff717 	ldw	r3,-36(fp)
 2008b28:	000d883a 	mov	r6,zero
 2008b2c:	01cff834 	movhi	r7,16352
 2008b30:	1009883a 	mov	r4,r2
 2008b34:	180b883a 	mov	r5,r3
 2008b38:	2011ec40 	call	2011ec4 <__adddf3>
 2008b3c:	1009883a 	mov	r4,r2
 2008b40:	180b883a 	mov	r5,r3
 2008b44:	2005883a 	mov	r2,r4
 2008b48:	2807883a 	mov	r3,r5
 2008b4c:	100d883a 	mov	r6,r2
 2008b50:	180f883a 	mov	r7,r3
 2008b54:	8009883a 	mov	r4,r16
 2008b58:	880b883a 	mov	r5,r17
 2008b5c:	2003ea40 	call	2003ea4 <__gedf2>
 2008b60:	0080c016 	blt	zero,r2,2008e64 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 2008b64:	e43ff217 	ldw	r16,-56(fp)
 2008b68:	e47ff317 	ldw	r17,-52(fp)
 2008b6c:	e0bff617 	ldw	r2,-40(fp)
 2008b70:	e0fff717 	ldw	r3,-36(fp)
 2008b74:	100d883a 	mov	r6,r2
 2008b78:	180f883a 	mov	r7,r3
 2008b7c:	0009883a 	mov	r4,zero
 2008b80:	014ff834 	movhi	r5,16352
 2008b84:	20127f80 	call	20127f8 <__subdf3>
 2008b88:	1009883a 	mov	r4,r2
 2008b8c:	180b883a 	mov	r5,r3
 2008b90:	2005883a 	mov	r2,r4
 2008b94:	2807883a 	mov	r3,r5
 2008b98:	100d883a 	mov	r6,r2
 2008b9c:	180f883a 	mov	r7,r3
 2008ba0:	8009883a 	mov	r4,r16
 2008ba4:	880b883a 	mov	r5,r17
 2008ba8:	2003f800 	call	2003f80 <__ledf2>
 2008bac:	10000116 	blt	r2,zero,2008bb4 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 2008bb0:	00002206 	br	2008c3c <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 2008bb4:	e0bfe717 	ldw	r2,-100(fp)
 2008bb8:	10bfffc4 	addi	r2,r2,-1
 2008bbc:	e0bfe715 	stw	r2,-100(fp)
 2008bc0:	e0bfe717 	ldw	r2,-100(fp)
 2008bc4:	10800003 	ldbu	r2,0(r2)
 2008bc8:	10803fcc 	andi	r2,r2,255
 2008bcc:	1080201c 	xori	r2,r2,128
 2008bd0:	10bfe004 	addi	r2,r2,-128
 2008bd4:	10800c20 	cmpeqi	r2,r2,48
 2008bd8:	103ff61e 	bne	r2,zero,2008bb4 <_dtoa_r+0xe4c>
		      s++;
 2008bdc:	e0bfe717 	ldw	r2,-100(fp)
 2008be0:	10800044 	addi	r2,r2,1
 2008be4:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 2008be8:	00032506 	br	2009880 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 2008bec:	e0bfd217 	ldw	r2,-184(fp)
 2008bf0:	10800044 	addi	r2,r2,1
 2008bf4:	e0bfd215 	stw	r2,-184(fp)
 2008bf8:	e0bff217 	ldw	r2,-56(fp)
 2008bfc:	e0fff317 	ldw	r3,-52(fp)
 2008c00:	000d883a 	mov	r6,zero
 2008c04:	01d00934 	movhi	r7,16420
 2008c08:	1009883a 	mov	r4,r2
 2008c0c:	180b883a 	mov	r5,r3
 2008c10:	20040740 	call	2004074 <__muldf3>
 2008c14:	1009883a 	mov	r4,r2
 2008c18:	180b883a 	mov	r5,r3
 2008c1c:	2005883a 	mov	r2,r4
 2008c20:	2807883a 	mov	r3,r5
 2008c24:	e0bff215 	stw	r2,-56(fp)
 2008c28:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 2008c2c:	003f9a06 	br	2008a98 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 2008c30:	0001883a 	nop
 2008c34:	00000106 	br	2008c3c <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 2008c38:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 2008c3c:	e0bfe917 	ldw	r2,-92(fp)
 2008c40:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 2008c44:	e0bff417 	ldw	r2,-48(fp)
 2008c48:	e0fff517 	ldw	r3,-44(fp)
 2008c4c:	e0bff215 	stw	r2,-56(fp)
 2008c50:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 2008c54:	e0bfea17 	ldw	r2,-88(fp)
 2008c58:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 2008c5c:	e0bfeb17 	ldw	r2,-84(fp)
 2008c60:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 2008c64:	e0bff117 	ldw	r2,-60(fp)
 2008c68:	1000b816 	blt	r2,zero,2008f4c <_dtoa_r+0x11e4>
 2008c6c:	e0bfd717 	ldw	r2,-164(fp)
 2008c70:	108003c8 	cmpgei	r2,r2,15
 2008c74:	1000b51e 	bne	r2,zero,2008f4c <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 2008c78:	008080b4 	movhi	r2,514
 2008c7c:	10baea04 	addi	r2,r2,-5208
 2008c80:	e0ffd717 	ldw	r3,-164(fp)
 2008c84:	180690fa 	slli	r3,r3,3
 2008c88:	10c5883a 	add	r2,r2,r3
 2008c8c:	10c00017 	ldw	r3,0(r2)
 2008c90:	e0ffe515 	stw	r3,-108(fp)
 2008c94:	10800117 	ldw	r2,4(r2)
 2008c98:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 2008c9c:	e0800217 	ldw	r2,8(fp)
 2008ca0:	1000190e 	bge	r2,zero,2008d08 <_dtoa_r+0xfa0>
 2008ca4:	e0bfd417 	ldw	r2,-176(fp)
 2008ca8:	00801716 	blt	zero,r2,2008d08 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 2008cac:	e03fe315 	stw	zero,-116(fp)
 2008cb0:	e0bfe317 	ldw	r2,-116(fp)
 2008cb4:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 2008cb8:	e0bfd417 	ldw	r2,-176(fp)
 2008cbc:	1001bd16 	blt	r2,zero,20093b4 <_dtoa_r+0x164c>
 2008cc0:	e43ff217 	ldw	r16,-56(fp)
 2008cc4:	e47ff317 	ldw	r17,-52(fp)
 2008cc8:	000d883a 	mov	r6,zero
 2008ccc:	01d00534 	movhi	r7,16404
 2008cd0:	e13fe517 	ldw	r4,-108(fp)
 2008cd4:	e17fe617 	ldw	r5,-104(fp)
 2008cd8:	20040740 	call	2004074 <__muldf3>
 2008cdc:	1009883a 	mov	r4,r2
 2008ce0:	180b883a 	mov	r5,r3
 2008ce4:	2005883a 	mov	r2,r4
 2008ce8:	2807883a 	mov	r3,r5
 2008cec:	100d883a 	mov	r6,r2
 2008cf0:	180f883a 	mov	r7,r3
 2008cf4:	8009883a 	mov	r4,r16
 2008cf8:	880b883a 	mov	r5,r17
 2008cfc:	2003f800 	call	2003f80 <__ledf2>
 2008d00:	0081ac0e 	bge	zero,r2,20093b4 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 2008d04:	0001b006 	br	20093c8 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 2008d08:	00800044 	movi	r2,1
 2008d0c:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 2008d10:	e0bff217 	ldw	r2,-56(fp)
 2008d14:	e0fff317 	ldw	r3,-52(fp)
 2008d18:	e1bfe517 	ldw	r6,-108(fp)
 2008d1c:	e1ffe617 	ldw	r7,-104(fp)
 2008d20:	1009883a 	mov	r4,r2
 2008d24:	180b883a 	mov	r5,r3
 2008d28:	20035bc0 	call	20035bc <__divdf3>
 2008d2c:	1009883a 	mov	r4,r2
 2008d30:	180b883a 	mov	r5,r3
 2008d34:	2005883a 	mov	r2,r4
 2008d38:	2807883a 	mov	r3,r5
 2008d3c:	1009883a 	mov	r4,r2
 2008d40:	180b883a 	mov	r5,r3
 2008d44:	20130f40 	call	20130f4 <__fixdfsi>
 2008d48:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 2008d4c:	e43ff217 	ldw	r16,-56(fp)
 2008d50:	e47ff317 	ldw	r17,-52(fp)
 2008d54:	e13fed17 	ldw	r4,-76(fp)
 2008d58:	20131740 	call	2013174 <__floatsidf>
 2008d5c:	1011883a 	mov	r8,r2
 2008d60:	1813883a 	mov	r9,r3
 2008d64:	e1bfe517 	ldw	r6,-108(fp)
 2008d68:	e1ffe617 	ldw	r7,-104(fp)
 2008d6c:	4009883a 	mov	r4,r8
 2008d70:	480b883a 	mov	r5,r9
 2008d74:	20040740 	call	2004074 <__muldf3>
 2008d78:	1009883a 	mov	r4,r2
 2008d7c:	180b883a 	mov	r5,r3
 2008d80:	2005883a 	mov	r2,r4
 2008d84:	2807883a 	mov	r3,r5
 2008d88:	100d883a 	mov	r6,r2
 2008d8c:	180f883a 	mov	r7,r3
 2008d90:	8009883a 	mov	r4,r16
 2008d94:	880b883a 	mov	r5,r17
 2008d98:	20127f80 	call	20127f8 <__subdf3>
 2008d9c:	1009883a 	mov	r4,r2
 2008da0:	180b883a 	mov	r5,r3
 2008da4:	2005883a 	mov	r2,r4
 2008da8:	2807883a 	mov	r3,r5
 2008dac:	e0bff215 	stw	r2,-56(fp)
 2008db0:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 2008db4:	e0bfe717 	ldw	r2,-100(fp)
 2008db8:	10c00044 	addi	r3,r2,1
 2008dbc:	e0ffe715 	stw	r3,-100(fp)
 2008dc0:	e0ffed17 	ldw	r3,-76(fp)
 2008dc4:	18c00c04 	addi	r3,r3,48
 2008dc8:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2008dcc:	e0ffd217 	ldw	r3,-184(fp)
 2008dd0:	e0bfd417 	ldw	r2,-176(fp)
 2008dd4:	1880401e 	bne	r3,r2,2008ed8 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 2008dd8:	e0bff217 	ldw	r2,-56(fp)
 2008ddc:	e0fff317 	ldw	r3,-52(fp)
 2008de0:	100d883a 	mov	r6,r2
 2008de4:	180f883a 	mov	r7,r3
 2008de8:	1009883a 	mov	r4,r2
 2008dec:	180b883a 	mov	r5,r3
 2008df0:	2011ec40 	call	2011ec4 <__adddf3>
 2008df4:	1009883a 	mov	r4,r2
 2008df8:	180b883a 	mov	r5,r3
 2008dfc:	2005883a 	mov	r2,r4
 2008e00:	2807883a 	mov	r3,r5
 2008e04:	e0bff215 	stw	r2,-56(fp)
 2008e08:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 2008e0c:	e0bff217 	ldw	r2,-56(fp)
 2008e10:	e0fff317 	ldw	r3,-52(fp)
 2008e14:	e1bfe517 	ldw	r6,-108(fp)
 2008e18:	e1ffe617 	ldw	r7,-104(fp)
 2008e1c:	1009883a 	mov	r4,r2
 2008e20:	180b883a 	mov	r5,r3
 2008e24:	2003ea40 	call	2003ea4 <__gedf2>
 2008e28:	00801a16 	blt	zero,r2,2008e94 <_dtoa_r+0x112c>
 2008e2c:	e0bff217 	ldw	r2,-56(fp)
 2008e30:	e0fff317 	ldw	r3,-52(fp)
 2008e34:	e1bfe517 	ldw	r6,-108(fp)
 2008e38:	e1ffe617 	ldw	r7,-104(fp)
 2008e3c:	1009883a 	mov	r4,r2
 2008e40:	180b883a 	mov	r5,r3
 2008e44:	20127700 	call	2012770 <__eqdf2>
 2008e48:	10003c1e 	bne	r2,zero,2008f3c <_dtoa_r+0x11d4>
 2008e4c:	e0bfed17 	ldw	r2,-76(fp)
 2008e50:	1080004c 	andi	r2,r2,1
 2008e54:	10003926 	beq	r2,zero,2008f3c <_dtoa_r+0x11d4>
 2008e58:	00000e06 	br	2008e94 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 2008e5c:	0001883a 	nop
 2008e60:	00000c06 	br	2008e94 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 2008e64:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008e68:	00000a06 	br	2008e94 <_dtoa_r+0x112c>
		    if (s == s0)
 2008e6c:	e0ffe717 	ldw	r3,-100(fp)
 2008e70:	e0bfe917 	ldw	r2,-92(fp)
 2008e74:	1880071e 	bne	r3,r2,2008e94 <_dtoa_r+0x112c>
		      {
			k++;
 2008e78:	e0bfd717 	ldw	r2,-164(fp)
 2008e7c:	10800044 	addi	r2,r2,1
 2008e80:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 2008e84:	e0bfe717 	ldw	r2,-100(fp)
 2008e88:	00c00c04 	movi	r3,48
 2008e8c:	10c00005 	stb	r3,0(r2)
			break;
 2008e90:	00000a06 	br	2008ebc <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008e94:	e0bfe717 	ldw	r2,-100(fp)
 2008e98:	10bfffc4 	addi	r2,r2,-1
 2008e9c:	e0bfe715 	stw	r2,-100(fp)
 2008ea0:	e0bfe717 	ldw	r2,-100(fp)
 2008ea4:	10800003 	ldbu	r2,0(r2)
 2008ea8:	10803fcc 	andi	r2,r2,255
 2008eac:	1080201c 	xori	r2,r2,128
 2008eb0:	10bfe004 	addi	r2,r2,-128
 2008eb4:	10800e60 	cmpeqi	r2,r2,57
 2008eb8:	103fec1e 	bne	r2,zero,2008e6c <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 2008ebc:	e0bfe717 	ldw	r2,-100(fp)
 2008ec0:	10c00044 	addi	r3,r2,1
 2008ec4:	e0ffe715 	stw	r3,-100(fp)
 2008ec8:	10c00003 	ldbu	r3,0(r2)
 2008ecc:	18c00044 	addi	r3,r3,1
 2008ed0:	10c00005 	stb	r3,0(r2)
		}
	      break;
 2008ed4:	00001906 	br	2008f3c <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 2008ed8:	e0bff217 	ldw	r2,-56(fp)
 2008edc:	e0fff317 	ldw	r3,-52(fp)
 2008ee0:	000d883a 	mov	r6,zero
 2008ee4:	01d00934 	movhi	r7,16420
 2008ee8:	1009883a 	mov	r4,r2
 2008eec:	180b883a 	mov	r5,r3
 2008ef0:	20040740 	call	2004074 <__muldf3>
 2008ef4:	1009883a 	mov	r4,r2
 2008ef8:	180b883a 	mov	r5,r3
 2008efc:	2005883a 	mov	r2,r4
 2008f00:	2807883a 	mov	r3,r5
 2008f04:	e0bff215 	stw	r2,-56(fp)
 2008f08:	e0fff315 	stw	r3,-52(fp)
 2008f0c:	e0bff217 	ldw	r2,-56(fp)
 2008f10:	e0fff317 	ldw	r3,-52(fp)
 2008f14:	000d883a 	mov	r6,zero
 2008f18:	000f883a 	mov	r7,zero
 2008f1c:	1009883a 	mov	r4,r2
 2008f20:	180b883a 	mov	r5,r3
 2008f24:	20127700 	call	2012770 <__eqdf2>
 2008f28:	10000626 	beq	r2,zero,2008f44 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 2008f2c:	e0bfd217 	ldw	r2,-184(fp)
 2008f30:	10800044 	addi	r2,r2,1
 2008f34:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 2008f38:	003f7506 	br	2008d10 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 2008f3c:	0001883a 	nop
 2008f40:	00024f06 	br	2009880 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 2008f44:	0001883a 	nop
	}
      goto ret1;
 2008f48:	00024d06 	br	2009880 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 2008f4c:	e0bfcf17 	ldw	r2,-196(fp)
 2008f50:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 2008f54:	e0bfd017 	ldw	r2,-192(fp)
 2008f58:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 2008f5c:	e03fe215 	stw	zero,-120(fp)
 2008f60:	e0bfe217 	ldw	r2,-120(fp)
 2008f64:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 2008f68:	e0bfd917 	ldw	r2,-156(fp)
 2008f6c:	10003a26 	beq	r2,zero,2009058 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 2008f70:	e0bffb17 	ldw	r2,-20(fp)
 2008f74:	10800088 	cmpgei	r2,r2,2
 2008f78:	10000a1e 	bne	r2,zero,2008fa4 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008f7c:	e0bfe017 	ldw	r2,-128(fp)
 2008f80:	10000326 	beq	r2,zero,2008f90 <_dtoa_r+0x1228>
 2008f84:	e0bff117 	ldw	r2,-60(fp)
 2008f88:	10810cc4 	addi	r2,r2,1075
 2008f8c:	00000306 	br	2008f9c <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 2008f90:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008f94:	00c00d84 	movi	r3,54
 2008f98:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 2008f9c:	e0bfd215 	stw	r2,-184(fp)
 2008fa0:	00002106 	br	2009028 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 2008fa4:	e0bfd417 	ldw	r2,-176(fp)
 2008fa8:	10bfffc4 	addi	r2,r2,-1
 2008fac:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 2008fb0:	e0ffdb17 	ldw	r3,-148(fp)
 2008fb4:	e0bfd617 	ldw	r2,-168(fp)
 2008fb8:	18800516 	blt	r3,r2,2008fd0 <_dtoa_r+0x1268>
	    m5 -= j;
 2008fbc:	e0ffdb17 	ldw	r3,-148(fp)
 2008fc0:	e0bfd617 	ldw	r2,-168(fp)
 2008fc4:	1885c83a 	sub	r2,r3,r2
 2008fc8:	e0bfdb15 	stw	r2,-148(fp)
 2008fcc:	00000d06 	br	2009004 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 2008fd0:	e0ffd617 	ldw	r3,-168(fp)
 2008fd4:	e0bfdb17 	ldw	r2,-148(fp)
 2008fd8:	1885c83a 	sub	r2,r3,r2
 2008fdc:	e0bfd615 	stw	r2,-168(fp)
 2008fe0:	e0bfd617 	ldw	r2,-168(fp)
 2008fe4:	e0ffdd17 	ldw	r3,-140(fp)
 2008fe8:	1885883a 	add	r2,r3,r2
 2008fec:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 2008ff0:	e0ffd017 	ldw	r3,-192(fp)
 2008ff4:	e0bfd617 	ldw	r2,-168(fp)
 2008ff8:	1885883a 	add	r2,r3,r2
 2008ffc:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 2009000:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 2009004:	e0bfd417 	ldw	r2,-176(fp)
 2009008:	e0bfd215 	stw	r2,-184(fp)
 200900c:	e0bfd217 	ldw	r2,-184(fp)
 2009010:	1000050e 	bge	r2,zero,2009028 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 2009014:	e0ffda17 	ldw	r3,-152(fp)
 2009018:	e0bfd217 	ldw	r2,-184(fp)
 200901c:	1885c83a 	sub	r2,r3,r2
 2009020:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 2009024:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 2009028:	e0ffcf17 	ldw	r3,-196(fp)
 200902c:	e0bfd217 	ldw	r2,-184(fp)
 2009030:	1885883a 	add	r2,r3,r2
 2009034:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 2009038:	e0ffdc17 	ldw	r3,-144(fp)
 200903c:	e0bfd217 	ldw	r2,-184(fp)
 2009040:	1885883a 	add	r2,r3,r2
 2009044:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 2009048:	01400044 	movi	r5,1
 200904c:	e13ff817 	ldw	r4,-32(fp)
 2009050:	200ce4c0 	call	200ce4c <__i2b>
 2009054:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 2009058:	e0bfda17 	ldw	r2,-152(fp)
 200905c:	0080130e 	bge	zero,r2,20090ac <_dtoa_r+0x1344>
 2009060:	e0bfdc17 	ldw	r2,-144(fp)
 2009064:	0080110e 	bge	zero,r2,20090ac <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 2009068:	e0ffda17 	ldw	r3,-152(fp)
 200906c:	e0bfdc17 	ldw	r2,-144(fp)
 2009070:	1880010e 	bge	r3,r2,2009078 <_dtoa_r+0x1310>
 2009074:	1805883a 	mov	r2,r3
 2009078:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 200907c:	e0ffcf17 	ldw	r3,-196(fp)
 2009080:	e0bfd217 	ldw	r2,-184(fp)
 2009084:	1885c83a 	sub	r2,r3,r2
 2009088:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 200908c:	e0ffda17 	ldw	r3,-152(fp)
 2009090:	e0bfd217 	ldw	r2,-184(fp)
 2009094:	1885c83a 	sub	r2,r3,r2
 2009098:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 200909c:	e0ffdc17 	ldw	r3,-144(fp)
 20090a0:	e0bfd217 	ldw	r2,-184(fp)
 20090a4:	1885c83a 	sub	r2,r3,r2
 20090a8:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 20090ac:	e0bfd017 	ldw	r2,-192(fp)
 20090b0:	0080240e 	bge	zero,r2,2009144 <_dtoa_r+0x13dc>
    {
      if (leftright)
 20090b4:	e0bfd917 	ldw	r2,-156(fp)
 20090b8:	10001d26 	beq	r2,zero,2009130 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 20090bc:	e0bfdb17 	ldw	r2,-148(fp)
 20090c0:	00800f0e 	bge	zero,r2,2009100 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 20090c4:	e1bfdb17 	ldw	r6,-148(fp)
 20090c8:	e17fe317 	ldw	r5,-116(fp)
 20090cc:	e13ff817 	ldw	r4,-32(fp)
 20090d0:	200d2740 	call	200d274 <__pow5mult>
 20090d4:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 20090d8:	e1bfe117 	ldw	r6,-124(fp)
 20090dc:	e17fe317 	ldw	r5,-116(fp)
 20090e0:	e13ff817 	ldw	r4,-32(fp)
 20090e4:	200cea40 	call	200cea4 <__multiply>
 20090e8:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 20090ec:	e17fe117 	ldw	r5,-124(fp)
 20090f0:	e13ff817 	ldw	r4,-32(fp)
 20090f4:	200c9340 	call	200c934 <_Bfree>
	      b = b1;
 20090f8:	e0bfee17 	ldw	r2,-72(fp)
 20090fc:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 2009100:	e0ffd017 	ldw	r3,-192(fp)
 2009104:	e0bfdb17 	ldw	r2,-148(fp)
 2009108:	1885c83a 	sub	r2,r3,r2
 200910c:	e0bfd615 	stw	r2,-168(fp)
 2009110:	e0bfd617 	ldw	r2,-168(fp)
 2009114:	10000b26 	beq	r2,zero,2009144 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 2009118:	e1bfd617 	ldw	r6,-168(fp)
 200911c:	e17fe117 	ldw	r5,-124(fp)
 2009120:	e13ff817 	ldw	r4,-32(fp)
 2009124:	200d2740 	call	200d274 <__pow5mult>
 2009128:	e0bfe115 	stw	r2,-124(fp)
 200912c:	00000506 	br	2009144 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 2009130:	e1bfd017 	ldw	r6,-192(fp)
 2009134:	e17fe117 	ldw	r5,-124(fp)
 2009138:	e13ff817 	ldw	r4,-32(fp)
 200913c:	200d2740 	call	200d274 <__pow5mult>
 2009140:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 2009144:	01400044 	movi	r5,1
 2009148:	e13ff817 	ldw	r4,-32(fp)
 200914c:	200ce4c0 	call	200ce4c <__i2b>
 2009150:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 2009154:	e0bfdd17 	ldw	r2,-140(fp)
 2009158:	0080050e 	bge	zero,r2,2009170 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 200915c:	e1bfdd17 	ldw	r6,-140(fp)
 2009160:	e17fe417 	ldw	r5,-112(fp)
 2009164:	e13ff817 	ldw	r4,-32(fp)
 2009168:	200d2740 	call	200d274 <__pow5mult>
 200916c:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 2009170:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 2009174:	e0bffb17 	ldw	r2,-20(fp)
 2009178:	10800088 	cmpgei	r2,r2,2
 200917c:	1000121e 	bne	r2,zero,20091c8 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 2009180:	e0bff217 	ldw	r2,-56(fp)
 2009184:	1000101e 	bne	r2,zero,20091c8 <_dtoa_r+0x1460>
 2009188:	e0fff317 	ldw	r3,-52(fp)
 200918c:	00800434 	movhi	r2,16
 2009190:	10bfffc4 	addi	r2,r2,-1
 2009194:	1884703a 	and	r2,r3,r2
 2009198:	10000b1e 	bne	r2,zero,20091c8 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 200919c:	e0bff317 	ldw	r2,-52(fp)
 20091a0:	109ffc2c 	andhi	r2,r2,32752
 20091a4:	10000826 	beq	r2,zero,20091c8 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 20091a8:	e0bfcf17 	ldw	r2,-196(fp)
 20091ac:	10800044 	addi	r2,r2,1
 20091b0:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 20091b4:	e0bfdc17 	ldw	r2,-144(fp)
 20091b8:	10800044 	addi	r2,r2,1
 20091bc:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 20091c0:	00800044 	movi	r2,1
 20091c4:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 20091c8:	e0bfdd17 	ldw	r2,-140(fp)
 20091cc:	10000f26 	beq	r2,zero,200920c <_dtoa_r+0x14a4>
 20091d0:	e0bfe417 	ldw	r2,-112(fp)
 20091d4:	10800417 	ldw	r2,16(r2)
 20091d8:	10bfffc4 	addi	r2,r2,-1
 20091dc:	e0ffe417 	ldw	r3,-112(fp)
 20091e0:	10800144 	addi	r2,r2,5
 20091e4:	1085883a 	add	r2,r2,r2
 20091e8:	1085883a 	add	r2,r2,r2
 20091ec:	1885883a 	add	r2,r3,r2
 20091f0:	10800017 	ldw	r2,0(r2)
 20091f4:	1009883a 	mov	r4,r2
 20091f8:	200ccd00 	call	200ccd0 <__hi0bits>
 20091fc:	1007883a 	mov	r3,r2
 2009200:	00800804 	movi	r2,32
 2009204:	10c5c83a 	sub	r2,r2,r3
 2009208:	00000106 	br	2009210 <_dtoa_r+0x14a8>
 200920c:	00800044 	movi	r2,1
 2009210:	e0ffdc17 	ldw	r3,-144(fp)
 2009214:	10c5883a 	add	r2,r2,r3
 2009218:	108007cc 	andi	r2,r2,31
 200921c:	e0bfd215 	stw	r2,-184(fp)
 2009220:	e0bfd217 	ldw	r2,-184(fp)
 2009224:	10000426 	beq	r2,zero,2009238 <_dtoa_r+0x14d0>
    i = 32 - i;
 2009228:	00c00804 	movi	r3,32
 200922c:	e0bfd217 	ldw	r2,-184(fp)
 2009230:	1885c83a 	sub	r2,r3,r2
 2009234:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 2009238:	e0bfd217 	ldw	r2,-184(fp)
 200923c:	10800150 	cmplti	r2,r2,5
 2009240:	1000101e 	bne	r2,zero,2009284 <_dtoa_r+0x151c>
    {
      i -= 4;
 2009244:	e0bfd217 	ldw	r2,-184(fp)
 2009248:	10bfff04 	addi	r2,r2,-4
 200924c:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2009250:	e0ffcf17 	ldw	r3,-196(fp)
 2009254:	e0bfd217 	ldw	r2,-184(fp)
 2009258:	1885883a 	add	r2,r3,r2
 200925c:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2009260:	e0ffda17 	ldw	r3,-152(fp)
 2009264:	e0bfd217 	ldw	r2,-184(fp)
 2009268:	1885883a 	add	r2,r3,r2
 200926c:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2009270:	e0ffdc17 	ldw	r3,-144(fp)
 2009274:	e0bfd217 	ldw	r2,-184(fp)
 2009278:	1885883a 	add	r2,r3,r2
 200927c:	e0bfdc15 	stw	r2,-144(fp)
 2009280:	00001206 	br	20092cc <_dtoa_r+0x1564>
    }
  else if (i < 4)
 2009284:	e0bfd217 	ldw	r2,-184(fp)
 2009288:	10800108 	cmpgei	r2,r2,4
 200928c:	10000f1e 	bne	r2,zero,20092cc <_dtoa_r+0x1564>
    {
      i += 28;
 2009290:	e0bfd217 	ldw	r2,-184(fp)
 2009294:	10800704 	addi	r2,r2,28
 2009298:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200929c:	e0ffcf17 	ldw	r3,-196(fp)
 20092a0:	e0bfd217 	ldw	r2,-184(fp)
 20092a4:	1885883a 	add	r2,r3,r2
 20092a8:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 20092ac:	e0ffda17 	ldw	r3,-152(fp)
 20092b0:	e0bfd217 	ldw	r2,-184(fp)
 20092b4:	1885883a 	add	r2,r3,r2
 20092b8:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 20092bc:	e0ffdc17 	ldw	r3,-144(fp)
 20092c0:	e0bfd217 	ldw	r2,-184(fp)
 20092c4:	1885883a 	add	r2,r3,r2
 20092c8:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 20092cc:	e0bfcf17 	ldw	r2,-196(fp)
 20092d0:	0080050e 	bge	zero,r2,20092e8 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 20092d4:	e1bfcf17 	ldw	r6,-196(fp)
 20092d8:	e17fe117 	ldw	r5,-124(fp)
 20092dc:	e13ff817 	ldw	r4,-32(fp)
 20092e0:	200d3ec0 	call	200d3ec <__lshift>
 20092e4:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 20092e8:	e0bfdc17 	ldw	r2,-144(fp)
 20092ec:	0080050e 	bge	zero,r2,2009304 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 20092f0:	e1bfdc17 	ldw	r6,-144(fp)
 20092f4:	e17fe417 	ldw	r5,-112(fp)
 20092f8:	e13ff817 	ldw	r4,-32(fp)
 20092fc:	200d3ec0 	call	200d3ec <__lshift>
 2009300:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 2009304:	e0bfd817 	ldw	r2,-160(fp)
 2009308:	10001726 	beq	r2,zero,2009368 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 200930c:	e17fe417 	ldw	r5,-112(fp)
 2009310:	e13fe117 	ldw	r4,-124(fp)
 2009314:	200d5e40 	call	200d5e4 <__mcmp>
 2009318:	1000130e 	bge	r2,zero,2009368 <_dtoa_r+0x1600>
	{
	  k--;
 200931c:	e0bfd717 	ldw	r2,-164(fp)
 2009320:	10bfffc4 	addi	r2,r2,-1
 2009324:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 2009328:	000f883a 	mov	r7,zero
 200932c:	01800284 	movi	r6,10
 2009330:	e17fe117 	ldw	r5,-124(fp)
 2009334:	e13ff817 	ldw	r4,-32(fp)
 2009338:	200c9b00 	call	200c9b0 <__multadd>
 200933c:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 2009340:	e0bfd917 	ldw	r2,-156(fp)
 2009344:	10000626 	beq	r2,zero,2009360 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 2009348:	000f883a 	mov	r7,zero
 200934c:	01800284 	movi	r6,10
 2009350:	e17fe317 	ldw	r5,-116(fp)
 2009354:	e13ff817 	ldw	r4,-32(fp)
 2009358:	200c9b00 	call	200c9b0 <__multadd>
 200935c:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 2009360:	e0bfd517 	ldw	r2,-172(fp)
 2009364:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 2009368:	e0bfd417 	ldw	r2,-176(fp)
 200936c:	00801f16 	blt	zero,r2,20093ec <_dtoa_r+0x1684>
 2009370:	e0bffb17 	ldw	r2,-20(fp)
 2009374:	108000d0 	cmplti	r2,r2,3
 2009378:	10001c1e 	bne	r2,zero,20093ec <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200937c:	e0bfd417 	ldw	r2,-176(fp)
 2009380:	10000c16 	blt	r2,zero,20093b4 <_dtoa_r+0x164c>
 2009384:	000f883a 	mov	r7,zero
 2009388:	01800144 	movi	r6,5
 200938c:	e17fe417 	ldw	r5,-112(fp)
 2009390:	e13ff817 	ldw	r4,-32(fp)
 2009394:	200c9b00 	call	200c9b0 <__multadd>
 2009398:	e0bfe415 	stw	r2,-112(fp)
 200939c:	e17fe417 	ldw	r5,-112(fp)
 20093a0:	e13fe117 	ldw	r4,-124(fp)
 20093a4:	200d5e40 	call	200d5e4 <__mcmp>
 20093a8:	00800716 	blt	zero,r2,20093c8 <_dtoa_r+0x1660>
 20093ac:	00000106 	br	20093b4 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 20093b0:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 20093b4:	e0800217 	ldw	r2,8(fp)
 20093b8:	0084303a 	nor	r2,zero,r2
 20093bc:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 20093c0:	00011d06 	br	2009838 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 20093c4:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 20093c8:	e0bfe717 	ldw	r2,-100(fp)
 20093cc:	10c00044 	addi	r3,r2,1
 20093d0:	e0ffe715 	stw	r3,-100(fp)
 20093d4:	00c00c44 	movi	r3,49
 20093d8:	10c00005 	stb	r3,0(r2)
      k++;
 20093dc:	e0bfd717 	ldw	r2,-164(fp)
 20093e0:	10800044 	addi	r2,r2,1
 20093e4:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 20093e8:	00011306 	br	2009838 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 20093ec:	e0bfd917 	ldw	r2,-156(fp)
 20093f0:	1000ba26 	beq	r2,zero,20096dc <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 20093f4:	e0bfda17 	ldw	r2,-152(fp)
 20093f8:	0080050e 	bge	zero,r2,2009410 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 20093fc:	e1bfda17 	ldw	r6,-152(fp)
 2009400:	e17fe317 	ldw	r5,-116(fp)
 2009404:	e13ff817 	ldw	r4,-32(fp)
 2009408:	200d3ec0 	call	200d3ec <__lshift>
 200940c:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 2009410:	e0bfe317 	ldw	r2,-116(fp)
 2009414:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 2009418:	e0bfde17 	ldw	r2,-136(fp)
 200941c:	10001826 	beq	r2,zero,2009480 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 2009420:	e0bfe317 	ldw	r2,-116(fp)
 2009424:	10800117 	ldw	r2,4(r2)
 2009428:	100b883a 	mov	r5,r2
 200942c:	e13ff817 	ldw	r4,-32(fp)
 2009430:	200c8040 	call	200c804 <_Balloc>
 2009434:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 2009438:	e0bfe317 	ldw	r2,-116(fp)
 200943c:	10c00304 	addi	r3,r2,12
 2009440:	e0bfe217 	ldw	r2,-120(fp)
 2009444:	11000304 	addi	r4,r2,12
 2009448:	e0bfe217 	ldw	r2,-120(fp)
 200944c:	10800417 	ldw	r2,16(r2)
 2009450:	10800084 	addi	r2,r2,2
 2009454:	1085883a 	add	r2,r2,r2
 2009458:	1085883a 	add	r2,r2,r2
 200945c:	100d883a 	mov	r6,r2
 2009460:	200b883a 	mov	r5,r4
 2009464:	1809883a 	mov	r4,r3
 2009468:	2004c5c0 	call	2004c5c <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200946c:	01800044 	movi	r6,1
 2009470:	e17fe317 	ldw	r5,-116(fp)
 2009474:	e13ff817 	ldw	r4,-32(fp)
 2009478:	200d3ec0 	call	200d3ec <__lshift>
 200947c:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 2009480:	00800044 	movi	r2,1
 2009484:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 2009488:	e17fe417 	ldw	r5,-112(fp)
 200948c:	e13fe117 	ldw	r4,-124(fp)
 2009490:	20079b40 	call	20079b4 <quorem>
 2009494:	10800c04 	addi	r2,r2,48
 2009498:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200949c:	e17fe217 	ldw	r5,-120(fp)
 20094a0:	e13fe117 	ldw	r4,-124(fp)
 20094a4:	200d5e40 	call	200d5e4 <__mcmp>
 20094a8:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 20094ac:	e1bfe317 	ldw	r6,-116(fp)
 20094b0:	e17fe417 	ldw	r5,-112(fp)
 20094b4:	e13ff817 	ldw	r4,-32(fp)
 20094b8:	200d6f80 	call	200d6f8 <__mdiff>
 20094bc:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 20094c0:	e0bfef17 	ldw	r2,-68(fp)
 20094c4:	10800317 	ldw	r2,12(r2)
 20094c8:	1000041e 	bne	r2,zero,20094dc <_dtoa_r+0x1774>
 20094cc:	e17fef17 	ldw	r5,-68(fp)
 20094d0:	e13fe117 	ldw	r4,-124(fp)
 20094d4:	200d5e40 	call	200d5e4 <__mcmp>
 20094d8:	00000106 	br	20094e0 <_dtoa_r+0x1778>
 20094dc:	00800044 	movi	r2,1
 20094e0:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 20094e4:	e17fef17 	ldw	r5,-68(fp)
 20094e8:	e13ff817 	ldw	r4,-32(fp)
 20094ec:	200c9340 	call	200c934 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 20094f0:	e0bfec17 	ldw	r2,-80(fp)
 20094f4:	1000131e 	bne	r2,zero,2009544 <_dtoa_r+0x17dc>
 20094f8:	e0bffb17 	ldw	r2,-20(fp)
 20094fc:	1000111e 	bne	r2,zero,2009544 <_dtoa_r+0x17dc>
 2009500:	e0bff217 	ldw	r2,-56(fp)
 2009504:	1080004c 	andi	r2,r2,1
 2009508:	10000e1e 	bne	r2,zero,2009544 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 200950c:	e0bfd117 	ldw	r2,-188(fp)
 2009510:	10800e58 	cmpnei	r2,r2,57
 2009514:	10003726 	beq	r2,zero,20095f4 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 2009518:	e0bfd617 	ldw	r2,-168(fp)
 200951c:	0080030e 	bge	zero,r2,200952c <_dtoa_r+0x17c4>
		dig++;
 2009520:	e0bfd117 	ldw	r2,-188(fp)
 2009524:	10800044 	addi	r2,r2,1
 2009528:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200952c:	e0bfe717 	ldw	r2,-100(fp)
 2009530:	10c00044 	addi	r3,r2,1
 2009534:	e0ffe715 	stw	r3,-100(fp)
 2009538:	e0ffd117 	ldw	r3,-188(fp)
 200953c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009540:	0000bd06 	br	2009838 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 2009544:	e0bfd617 	ldw	r2,-168(fp)
 2009548:	10000716 	blt	r2,zero,2009568 <_dtoa_r+0x1800>
 200954c:	e0bfd617 	ldw	r2,-168(fp)
 2009550:	1000221e 	bne	r2,zero,20095dc <_dtoa_r+0x1874>
 2009554:	e0bffb17 	ldw	r2,-20(fp)
 2009558:	1000201e 	bne	r2,zero,20095dc <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200955c:	e0bff217 	ldw	r2,-56(fp)
 2009560:	1080004c 	andi	r2,r2,1
 2009564:	10001d1e 	bne	r2,zero,20095dc <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 2009568:	e0bfec17 	ldw	r2,-80(fp)
 200956c:	0080150e 	bge	zero,r2,20095c4 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 2009570:	01800044 	movi	r6,1
 2009574:	e17fe117 	ldw	r5,-124(fp)
 2009578:	e13ff817 	ldw	r4,-32(fp)
 200957c:	200d3ec0 	call	200d3ec <__lshift>
 2009580:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 2009584:	e17fe417 	ldw	r5,-112(fp)
 2009588:	e13fe117 	ldw	r4,-124(fp)
 200958c:	200d5e40 	call	200d5e4 <__mcmp>
 2009590:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 2009594:	e0bfec17 	ldw	r2,-80(fp)
 2009598:	00800516 	blt	zero,r2,20095b0 <_dtoa_r+0x1848>
 200959c:	e0bfec17 	ldw	r2,-80(fp)
 20095a0:	1000081e 	bne	r2,zero,20095c4 <_dtoa_r+0x185c>
 20095a4:	e0bfd117 	ldw	r2,-188(fp)
 20095a8:	1080004c 	andi	r2,r2,1
 20095ac:	10000526 	beq	r2,zero,20095c4 <_dtoa_r+0x185c>
		      && dig++ == '9')
 20095b0:	e0bfd117 	ldw	r2,-188(fp)
 20095b4:	10c00044 	addi	r3,r2,1
 20095b8:	e0ffd115 	stw	r3,-188(fp)
 20095bc:	10800e58 	cmpnei	r2,r2,57
 20095c0:	10000e26 	beq	r2,zero,20095fc <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 20095c4:	e0bfe717 	ldw	r2,-100(fp)
 20095c8:	10c00044 	addi	r3,r2,1
 20095cc:	e0ffe715 	stw	r3,-100(fp)
 20095d0:	e0ffd117 	ldw	r3,-188(fp)
 20095d4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 20095d8:	00009706 	br	2009838 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 20095dc:	e0bfec17 	ldw	r2,-80(fp)
 20095e0:	0080140e 	bge	zero,r2,2009634 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 20095e4:	e0bfd117 	ldw	r2,-188(fp)
 20095e8:	10800e58 	cmpnei	r2,r2,57
 20095ec:	10000a1e 	bne	r2,zero,2009618 <_dtoa_r+0x18b0>
 20095f0:	00000306 	br	2009600 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 20095f4:	0001883a 	nop
 20095f8:	00000106 	br	2009600 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 20095fc:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 2009600:	e0bfe717 	ldw	r2,-100(fp)
 2009604:	10c00044 	addi	r3,r2,1
 2009608:	e0ffe715 	stw	r3,-100(fp)
 200960c:	00c00e44 	movi	r3,57
 2009610:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 2009614:	00005d06 	br	200978c <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 2009618:	e0bfe717 	ldw	r2,-100(fp)
 200961c:	10c00044 	addi	r3,r2,1
 2009620:	e0ffe715 	stw	r3,-100(fp)
 2009624:	e0ffd117 	ldw	r3,-188(fp)
 2009628:	18c00044 	addi	r3,r3,1
 200962c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009630:	00008106 	br	2009838 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 2009634:	e0bfe717 	ldw	r2,-100(fp)
 2009638:	10c00044 	addi	r3,r2,1
 200963c:	e0ffe715 	stw	r3,-100(fp)
 2009640:	e0ffd117 	ldw	r3,-188(fp)
 2009644:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2009648:	e0ffd217 	ldw	r3,-184(fp)
 200964c:	e0bfd417 	ldw	r2,-176(fp)
 2009650:	18803b26 	beq	r3,r2,2009740 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 2009654:	000f883a 	mov	r7,zero
 2009658:	01800284 	movi	r6,10
 200965c:	e17fe117 	ldw	r5,-124(fp)
 2009660:	e13ff817 	ldw	r4,-32(fp)
 2009664:	200c9b00 	call	200c9b0 <__multadd>
 2009668:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200966c:	e0ffe217 	ldw	r3,-120(fp)
 2009670:	e0bfe317 	ldw	r2,-116(fp)
 2009674:	1880091e 	bne	r3,r2,200969c <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 2009678:	000f883a 	mov	r7,zero
 200967c:	01800284 	movi	r6,10
 2009680:	e17fe317 	ldw	r5,-116(fp)
 2009684:	e13ff817 	ldw	r4,-32(fp)
 2009688:	200c9b00 	call	200c9b0 <__multadd>
 200968c:	e0bfe315 	stw	r2,-116(fp)
 2009690:	e0bfe317 	ldw	r2,-116(fp)
 2009694:	e0bfe215 	stw	r2,-120(fp)
 2009698:	00000c06 	br	20096cc <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200969c:	000f883a 	mov	r7,zero
 20096a0:	01800284 	movi	r6,10
 20096a4:	e17fe217 	ldw	r5,-120(fp)
 20096a8:	e13ff817 	ldw	r4,-32(fp)
 20096ac:	200c9b00 	call	200c9b0 <__multadd>
 20096b0:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 20096b4:	000f883a 	mov	r7,zero
 20096b8:	01800284 	movi	r6,10
 20096bc:	e17fe317 	ldw	r5,-116(fp)
 20096c0:	e13ff817 	ldw	r4,-32(fp)
 20096c4:	200c9b00 	call	200c9b0 <__multadd>
 20096c8:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 20096cc:	e0bfd217 	ldw	r2,-184(fp)
 20096d0:	10800044 	addi	r2,r2,1
 20096d4:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 20096d8:	003f6b06 	br	2009488 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 20096dc:	00800044 	movi	r2,1
 20096e0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 20096e4:	e43fe717 	ldw	r16,-100(fp)
 20096e8:	80800044 	addi	r2,r16,1
 20096ec:	e0bfe715 	stw	r2,-100(fp)
 20096f0:	e17fe417 	ldw	r5,-112(fp)
 20096f4:	e13fe117 	ldw	r4,-124(fp)
 20096f8:	20079b40 	call	20079b4 <quorem>
 20096fc:	10800c04 	addi	r2,r2,48
 2009700:	e0bfd115 	stw	r2,-188(fp)
 2009704:	e0bfd117 	ldw	r2,-188(fp)
 2009708:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 200970c:	e0ffd217 	ldw	r3,-184(fp)
 2009710:	e0bfd417 	ldw	r2,-176(fp)
 2009714:	18800c0e 	bge	r3,r2,2009748 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 2009718:	000f883a 	mov	r7,zero
 200971c:	01800284 	movi	r6,10
 2009720:	e17fe117 	ldw	r5,-124(fp)
 2009724:	e13ff817 	ldw	r4,-32(fp)
 2009728:	200c9b00 	call	200c9b0 <__multadd>
 200972c:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 2009730:	e0bfd217 	ldw	r2,-184(fp)
 2009734:	10800044 	addi	r2,r2,1
 2009738:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200973c:	003fe906 	br	20096e4 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 2009740:	0001883a 	nop
 2009744:	00000106 	br	200974c <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 2009748:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200974c:	01800044 	movi	r6,1
 2009750:	e17fe117 	ldw	r5,-124(fp)
 2009754:	e13ff817 	ldw	r4,-32(fp)
 2009758:	200d3ec0 	call	200d3ec <__lshift>
 200975c:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 2009760:	e17fe417 	ldw	r5,-112(fp)
 2009764:	e13fe117 	ldw	r4,-124(fp)
 2009768:	200d5e40 	call	200d5e4 <__mcmp>
 200976c:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 2009770:	e0bfd617 	ldw	r2,-168(fp)
 2009774:	00801216 	blt	zero,r2,20097c0 <_dtoa_r+0x1a58>
 2009778:	e0bfd617 	ldw	r2,-168(fp)
 200977c:	1000211e 	bne	r2,zero,2009804 <_dtoa_r+0x1a9c>
 2009780:	e0bfd117 	ldw	r2,-188(fp)
 2009784:	1080004c 	andi	r2,r2,1
 2009788:	10001e26 	beq	r2,zero,2009804 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200978c:	00000c06 	br	20097c0 <_dtoa_r+0x1a58>
	if (s == s0)
 2009790:	e0ffe717 	ldw	r3,-100(fp)
 2009794:	e0bfe917 	ldw	r2,-92(fp)
 2009798:	1880091e 	bne	r3,r2,20097c0 <_dtoa_r+0x1a58>
	  {
	    k++;
 200979c:	e0bfd717 	ldw	r2,-164(fp)
 20097a0:	10800044 	addi	r2,r2,1
 20097a4:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 20097a8:	e0bfe717 	ldw	r2,-100(fp)
 20097ac:	10c00044 	addi	r3,r2,1
 20097b0:	e0ffe715 	stw	r3,-100(fp)
 20097b4:	00c00c44 	movi	r3,49
 20097b8:	10c00005 	stb	r3,0(r2)
	    goto ret;
 20097bc:	00001e06 	br	2009838 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 20097c0:	e0bfe717 	ldw	r2,-100(fp)
 20097c4:	10bfffc4 	addi	r2,r2,-1
 20097c8:	e0bfe715 	stw	r2,-100(fp)
 20097cc:	e0bfe717 	ldw	r2,-100(fp)
 20097d0:	10800003 	ldbu	r2,0(r2)
 20097d4:	10803fcc 	andi	r2,r2,255
 20097d8:	1080201c 	xori	r2,r2,128
 20097dc:	10bfe004 	addi	r2,r2,-128
 20097e0:	10800e60 	cmpeqi	r2,r2,57
 20097e4:	103fea1e 	bne	r2,zero,2009790 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 20097e8:	e0bfe717 	ldw	r2,-100(fp)
 20097ec:	10c00044 	addi	r3,r2,1
 20097f0:	e0ffe715 	stw	r3,-100(fp)
 20097f4:	10c00003 	ldbu	r3,0(r2)
 20097f8:	18c00044 	addi	r3,r3,1
 20097fc:	10c00005 	stb	r3,0(r2)
 2009800:	00000d06 	br	2009838 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 2009804:	e0bfe717 	ldw	r2,-100(fp)
 2009808:	10bfffc4 	addi	r2,r2,-1
 200980c:	e0bfe715 	stw	r2,-100(fp)
 2009810:	e0bfe717 	ldw	r2,-100(fp)
 2009814:	10800003 	ldbu	r2,0(r2)
 2009818:	10803fcc 	andi	r2,r2,255
 200981c:	1080201c 	xori	r2,r2,128
 2009820:	10bfe004 	addi	r2,r2,-128
 2009824:	10800c20 	cmpeqi	r2,r2,48
 2009828:	103ff61e 	bne	r2,zero,2009804 <_dtoa_r+0x1a9c>
      s++;
 200982c:	e0bfe717 	ldw	r2,-100(fp)
 2009830:	10800044 	addi	r2,r2,1
 2009834:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 2009838:	e17fe417 	ldw	r5,-112(fp)
 200983c:	e13ff817 	ldw	r4,-32(fp)
 2009840:	200c9340 	call	200c934 <_Bfree>
  if (mhi)
 2009844:	e0bfe317 	ldw	r2,-116(fp)
 2009848:	10000d26 	beq	r2,zero,2009880 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200984c:	e0bfe217 	ldw	r2,-120(fp)
 2009850:	10000626 	beq	r2,zero,200986c <_dtoa_r+0x1b04>
 2009854:	e0ffe217 	ldw	r3,-120(fp)
 2009858:	e0bfe317 	ldw	r2,-116(fp)
 200985c:	18800326 	beq	r3,r2,200986c <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 2009860:	e17fe217 	ldw	r5,-120(fp)
 2009864:	e13ff817 	ldw	r4,-32(fp)
 2009868:	200c9340 	call	200c934 <_Bfree>
      Bfree (ptr, mhi);
 200986c:	e17fe317 	ldw	r5,-116(fp)
 2009870:	e13ff817 	ldw	r4,-32(fp)
 2009874:	200c9340 	call	200c934 <_Bfree>
 2009878:	00000106 	br	2009880 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200987c:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 2009880:	e17fe117 	ldw	r5,-124(fp)
 2009884:	e13ff817 	ldw	r4,-32(fp)
 2009888:	200c9340 	call	200c934 <_Bfree>
  *s = 0;
 200988c:	e0bfe717 	ldw	r2,-100(fp)
 2009890:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 2009894:	e0bfd717 	ldw	r2,-164(fp)
 2009898:	10c00044 	addi	r3,r2,1
 200989c:	e0800317 	ldw	r2,12(fp)
 20098a0:	10c00015 	stw	r3,0(r2)
  if (rve)
 20098a4:	e0800517 	ldw	r2,20(fp)
 20098a8:	10000326 	beq	r2,zero,20098b8 <_dtoa_r+0x1b50>
    *rve = s;
 20098ac:	e0800517 	ldw	r2,20(fp)
 20098b0:	e0ffe717 	ldw	r3,-100(fp)
 20098b4:	10c00015 	stw	r3,0(r2)
  return s0;
 20098b8:	e0bfe917 	ldw	r2,-92(fp)
}
 20098bc:	e6fffc04 	addi	sp,fp,-16
 20098c0:	dfc00517 	ldw	ra,20(sp)
 20098c4:	df000417 	ldw	fp,16(sp)
 20098c8:	dcc00317 	ldw	r19,12(sp)
 20098cc:	dc800217 	ldw	r18,8(sp)
 20098d0:	dc400117 	ldw	r17,4(sp)
 20098d4:	dc000017 	ldw	r16,0(sp)
 20098d8:	dec00604 	addi	sp,sp,24
 20098dc:	f800283a 	ret

020098e0 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 20098e0:	defff504 	addi	sp,sp,-44
 20098e4:	dfc00a15 	stw	ra,40(sp)
 20098e8:	df000915 	stw	fp,36(sp)
 20098ec:	dcc00815 	stw	r19,32(sp)
 20098f0:	dc800715 	stw	r18,28(sp)
 20098f4:	dc400615 	stw	r17,24(sp)
 20098f8:	dc000515 	stw	r16,20(sp)
 20098fc:	df000904 	addi	fp,sp,36
 2009900:	e13ffb15 	stw	r4,-20(fp)
 2009904:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 2009908:	8080030b 	ldhu	r2,12(r16)
 200990c:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 2009910:	e0bff90b 	ldhu	r2,-28(fp)
 2009914:	10bfffcc 	andi	r2,r2,65535
 2009918:	1080020c 	andi	r2,r2,8
 200991c:	1000831e 	bne	r2,zero,2009b2c <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 2009920:	8080030b 	ldhu	r2,12(r16)
 2009924:	10820014 	ori	r2,r2,2048
 2009928:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200992c:	80800117 	ldw	r2,4(r16)
 2009930:	00800216 	blt	zero,r2,200993c <__sflush_r+0x5c>
 2009934:	80800f17 	ldw	r2,60(r16)
 2009938:	00807a0e 	bge	zero,r2,2009b24 <__sflush_r+0x244>
 200993c:	80800a17 	ldw	r2,40(r16)
 2009940:	10007826 	beq	r2,zero,2009b24 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 2009944:	e0bffb17 	ldw	r2,-20(fp)
 2009948:	10800017 	ldw	r2,0(r2)
 200994c:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 2009950:	e0bffb17 	ldw	r2,-20(fp)
 2009954:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 2009958:	8080030b 	ldhu	r2,12(r16)
 200995c:	10bfffcc 	andi	r2,r2,65535
 2009960:	1084000c 	andi	r2,r2,4096
 2009964:	10000326 	beq	r2,zero,2009974 <__sflush_r+0x94>
	    curoff = fp->_offset;
 2009968:	80801417 	ldw	r2,80(r16)
 200996c:	e0bff715 	stw	r2,-36(fp)
 2009970:	00002206 	br	20099fc <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 2009974:	80800a17 	ldw	r2,40(r16)
 2009978:	80c00717 	ldw	r3,28(r16)
 200997c:	01c00044 	movi	r7,1
 2009980:	000d883a 	mov	r6,zero
 2009984:	180b883a 	mov	r5,r3
 2009988:	e13ffb17 	ldw	r4,-20(fp)
 200998c:	103ee83a 	callr	r2
 2009990:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 2009994:	e0bff717 	ldw	r2,-36(fp)
 2009998:	10bfffd8 	cmpnei	r2,r2,-1
 200999c:	1000171e 	bne	r2,zero,20099fc <__sflush_r+0x11c>
 20099a0:	e0bffb17 	ldw	r2,-20(fp)
 20099a4:	10800017 	ldw	r2,0(r2)
 20099a8:	10001426 	beq	r2,zero,20099fc <__sflush_r+0x11c>
		{
		  int result = EOF;
 20099ac:	00bfffc4 	movi	r2,-1
 20099b0:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 20099b4:	e0bffb17 	ldw	r2,-20(fp)
 20099b8:	10800017 	ldw	r2,0(r2)
 20099bc:	10800760 	cmpeqi	r2,r2,29
 20099c0:	1000041e 	bne	r2,zero,20099d4 <__sflush_r+0xf4>
 20099c4:	e0bffb17 	ldw	r2,-20(fp)
 20099c8:	10800017 	ldw	r2,0(r2)
 20099cc:	10800598 	cmpnei	r2,r2,22
 20099d0:	1000051e 	bne	r2,zero,20099e8 <__sflush_r+0x108>
		    {
		      result = 0;
 20099d4:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 20099d8:	e0bffb17 	ldw	r2,-20(fp)
 20099dc:	e0fffa17 	ldw	r3,-24(fp)
 20099e0:	10c00015 	stw	r3,0(r2)
 20099e4:	00000306 	br	20099f4 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 20099e8:	8080030b 	ldhu	r2,12(r16)
 20099ec:	10801014 	ori	r2,r2,64
 20099f0:	8080030d 	sth	r2,12(r16)
		  return result;
 20099f4:	e0bff817 	ldw	r2,-32(fp)
 20099f8:	00007106 	br	2009bc0 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 20099fc:	8080030b 	ldhu	r2,12(r16)
 2009a00:	10bfffcc 	andi	r2,r2,65535
 2009a04:	1080010c 	andi	r2,r2,4
 2009a08:	10000a26 	beq	r2,zero,2009a34 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 2009a0c:	80800117 	ldw	r2,4(r16)
 2009a10:	e0fff717 	ldw	r3,-36(fp)
 2009a14:	1885c83a 	sub	r2,r3,r2
 2009a18:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 2009a1c:	80800c17 	ldw	r2,48(r16)
 2009a20:	10000426 	beq	r2,zero,2009a34 <__sflush_r+0x154>
                curoff -= fp->_ur;
 2009a24:	80800f17 	ldw	r2,60(r16)
 2009a28:	e0fff717 	ldw	r3,-36(fp)
 2009a2c:	1885c83a 	sub	r2,r3,r2
 2009a30:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 2009a34:	80800a17 	ldw	r2,40(r16)
 2009a38:	80c00717 	ldw	r3,28(r16)
 2009a3c:	000f883a 	mov	r7,zero
 2009a40:	e1bff717 	ldw	r6,-36(fp)
 2009a44:	180b883a 	mov	r5,r3
 2009a48:	e13ffb17 	ldw	r4,-20(fp)
 2009a4c:	103ee83a 	callr	r2
 2009a50:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 2009a54:	e0bff717 	ldw	r2,-36(fp)
 2009a58:	10bfffd8 	cmpnei	r2,r2,-1
 2009a5c:	10000b1e 	bne	r2,zero,2009a8c <__sflush_r+0x1ac>
 2009a60:	e0bffb17 	ldw	r2,-20(fp)
 2009a64:	10800017 	ldw	r2,0(r2)
 2009a68:	10000826 	beq	r2,zero,2009a8c <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 2009a6c:	e0bffb17 	ldw	r2,-20(fp)
 2009a70:	10800017 	ldw	r2,0(r2)
 2009a74:	10800760 	cmpeqi	r2,r2,29
 2009a78:	1000041e 	bne	r2,zero,2009a8c <__sflush_r+0x1ac>
 2009a7c:	e0bffb17 	ldw	r2,-20(fp)
 2009a80:	10800017 	ldw	r2,0(r2)
 2009a84:	10800598 	cmpnei	r2,r2,22
 2009a88:	1000211e 	bne	r2,zero,2009b10 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 2009a8c:	80c0030b 	ldhu	r3,12(r16)
 2009a90:	00bdffc4 	movi	r2,-2049
 2009a94:	1884703a 	and	r2,r3,r2
 2009a98:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 2009a9c:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 2009aa0:	80800417 	ldw	r2,16(r16)
 2009aa4:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 2009aa8:	8080030b 	ldhu	r2,12(r16)
 2009aac:	10bfffcc 	andi	r2,r2,65535
 2009ab0:	1084000c 	andi	r2,r2,4096
 2009ab4:	10000826 	beq	r2,zero,2009ad8 <__sflush_r+0x1f8>
 2009ab8:	e0bff717 	ldw	r2,-36(fp)
 2009abc:	10bfffd8 	cmpnei	r2,r2,-1
 2009ac0:	1000031e 	bne	r2,zero,2009ad0 <__sflush_r+0x1f0>
 2009ac4:	e0bffb17 	ldw	r2,-20(fp)
 2009ac8:	10800017 	ldw	r2,0(r2)
 2009acc:	1000021e 	bne	r2,zero,2009ad8 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 2009ad0:	e0bff717 	ldw	r2,-36(fp)
 2009ad4:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 2009ad8:	e0bffb17 	ldw	r2,-20(fp)
 2009adc:	e0fffa17 	ldw	r3,-24(fp)
 2009ae0:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 2009ae4:	80800c17 	ldw	r2,48(r16)
 2009ae8:	10000e26 	beq	r2,zero,2009b24 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 2009aec:	80c00c17 	ldw	r3,48(r16)
 2009af0:	80801004 	addi	r2,r16,64
 2009af4:	18800426 	beq	r3,r2,2009b08 <__sflush_r+0x228>
 2009af8:	80800c17 	ldw	r2,48(r16)
 2009afc:	100b883a 	mov	r5,r2
 2009b00:	e13ffb17 	ldw	r4,-20(fp)
 2009b04:	200a2840 	call	200a284 <_free_r>
 2009b08:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 2009b0c:	00000506 	br	2009b24 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 2009b10:	8080030b 	ldhu	r2,12(r16)
 2009b14:	10801014 	ori	r2,r2,64
 2009b18:	8080030d 	sth	r2,12(r16)
	      return EOF;
 2009b1c:	00bfffc4 	movi	r2,-1
 2009b20:	00002706 	br	2009bc0 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 2009b24:	0005883a 	mov	r2,zero
 2009b28:	00002506 	br	2009bc0 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 2009b2c:	84400417 	ldw	r17,16(r16)
 2009b30:	8800021e 	bne	r17,zero,2009b3c <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 2009b34:	0005883a 	mov	r2,zero
 2009b38:	00002106 	br	2009bc0 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 2009b3c:	80800017 	ldw	r2,0(r16)
 2009b40:	1007883a 	mov	r3,r2
 2009b44:	8805883a 	mov	r2,r17
 2009b48:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 2009b4c:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 2009b50:	e0bff90b 	ldhu	r2,-28(fp)
 2009b54:	10bfffcc 	andi	r2,r2,65535
 2009b58:	108000cc 	andi	r2,r2,3
 2009b5c:	1000021e 	bne	r2,zero,2009b68 <__sflush_r+0x288>
 2009b60:	80800517 	ldw	r2,20(r16)
 2009b64:	00000106 	br	2009b6c <__sflush_r+0x28c>
 2009b68:	0005883a 	mov	r2,zero
 2009b6c:	80800215 	stw	r2,8(r16)

  while (n > 0)
 2009b70:	00001106 	br	2009bb8 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 2009b74:	80800917 	ldw	r2,36(r16)
 2009b78:	80c00717 	ldw	r3,28(r16)
 2009b7c:	900f883a 	mov	r7,r18
 2009b80:	880d883a 	mov	r6,r17
 2009b84:	180b883a 	mov	r5,r3
 2009b88:	e13ffb17 	ldw	r4,-20(fp)
 2009b8c:	103ee83a 	callr	r2
 2009b90:	1027883a 	mov	r19,r2
      if (t <= 0)
 2009b94:	04c00516 	blt	zero,r19,2009bac <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 2009b98:	8080030b 	ldhu	r2,12(r16)
 2009b9c:	10801014 	ori	r2,r2,64
 2009ba0:	8080030d 	sth	r2,12(r16)
          return EOF;
 2009ba4:	00bfffc4 	movi	r2,-1
 2009ba8:	00000506 	br	2009bc0 <__sflush_r+0x2e0>
	}
      p += t;
 2009bac:	9805883a 	mov	r2,r19
 2009bb0:	88a3883a 	add	r17,r17,r2
      n -= t;
 2009bb4:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 2009bb8:	04bfee16 	blt	zero,r18,2009b74 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 2009bbc:	0005883a 	mov	r2,zero
}
 2009bc0:	e6fffc04 	addi	sp,fp,-16
 2009bc4:	dfc00517 	ldw	ra,20(sp)
 2009bc8:	df000417 	ldw	fp,16(sp)
 2009bcc:	dcc00317 	ldw	r19,12(sp)
 2009bd0:	dc800217 	ldw	r18,8(sp)
 2009bd4:	dc400117 	ldw	r17,4(sp)
 2009bd8:	dc000017 	ldw	r16,0(sp)
 2009bdc:	dec00604 	addi	sp,sp,24
 2009be0:	f800283a 	ret

02009be4 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2009be4:	defffa04 	addi	sp,sp,-24
 2009be8:	dfc00515 	stw	ra,20(sp)
 2009bec:	df000415 	stw	fp,16(sp)
 2009bf0:	dc000315 	stw	r16,12(sp)
 2009bf4:	df000404 	addi	fp,sp,16
 2009bf8:	e13ffe15 	stw	r4,-8(fp)
 2009bfc:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 2009c00:	e0bffe17 	ldw	r2,-8(fp)
 2009c04:	e0bffc15 	stw	r2,-16(fp)
 2009c08:	e0bffc17 	ldw	r2,-16(fp)
 2009c0c:	10000526 	beq	r2,zero,2009c24 <_fflush_r+0x40>
 2009c10:	e0bffc17 	ldw	r2,-16(fp)
 2009c14:	10800e17 	ldw	r2,56(r2)
 2009c18:	1000021e 	bne	r2,zero,2009c24 <_fflush_r+0x40>
 2009c1c:	e13ffc17 	ldw	r4,-16(fp)
 2009c20:	200a0640 	call	200a064 <__sinit>

  if (!fp->_flags)
 2009c24:	8080030b 	ldhu	r2,12(r16)
 2009c28:	10bfffcc 	andi	r2,r2,65535
 2009c2c:	10a0001c 	xori	r2,r2,32768
 2009c30:	10a00004 	addi	r2,r2,-32768
 2009c34:	1000021e 	bne	r2,zero,2009c40 <_fflush_r+0x5c>
    return 0;
 2009c38:	0005883a 	mov	r2,zero
 2009c3c:	00000506 	br	2009c54 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 2009c40:	800b883a 	mov	r5,r16
 2009c44:	e13ffe17 	ldw	r4,-8(fp)
 2009c48:	20098e00 	call	20098e0 <__sflush_r>
 2009c4c:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 2009c50:	e0bffd17 	ldw	r2,-12(fp)
}
 2009c54:	e6ffff04 	addi	sp,fp,-4
 2009c58:	dfc00217 	ldw	ra,8(sp)
 2009c5c:	df000117 	ldw	fp,4(sp)
 2009c60:	dc000017 	ldw	r16,0(sp)
 2009c64:	dec00304 	addi	sp,sp,12
 2009c68:	f800283a 	ret

02009c6c <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 2009c6c:	defffe04 	addi	sp,sp,-8
 2009c70:	dfc00115 	stw	ra,4(sp)
 2009c74:	df000015 	stw	fp,0(sp)
 2009c78:	d839883a 	mov	fp,sp
 2009c7c:	2005883a 	mov	r2,r4
  if (fp == NULL)
 2009c80:	1000061e 	bne	r2,zero,2009c9c <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 2009c84:	d0a00117 	ldw	r2,-32764(gp)
 2009c88:	01408074 	movhi	r5,513
 2009c8c:	2966f904 	addi	r5,r5,-25628
 2009c90:	1009883a 	mov	r4,r2
 2009c94:	200b0640 	call	200b064 <_fwalk_reent>
 2009c98:	00000406 	br	2009cac <fflush+0x40>

  return _fflush_r (_REENT, fp);
 2009c9c:	d0e00017 	ldw	r3,-32768(gp)
 2009ca0:	100b883a 	mov	r5,r2
 2009ca4:	1809883a 	mov	r4,r3
 2009ca8:	2009be40 	call	2009be4 <_fflush_r>
}
 2009cac:	e037883a 	mov	sp,fp
 2009cb0:	dfc00117 	ldw	ra,4(sp)
 2009cb4:	df000017 	ldw	fp,0(sp)
 2009cb8:	dec00204 	addi	sp,sp,8
 2009cbc:	f800283a 	ret

02009cc0 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 2009cc0:	defffa04 	addi	sp,sp,-24
 2009cc4:	dfc00515 	stw	ra,20(sp)
 2009cc8:	df000415 	stw	fp,16(sp)
 2009ccc:	df000404 	addi	fp,sp,16
 2009cd0:	e13ffc15 	stw	r4,-16(fp)
 2009cd4:	e17ffd15 	stw	r5,-12(fp)
 2009cd8:	e1bffe15 	stw	r6,-8(fp)
 2009cdc:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 2009ce0:	e0bffc17 	ldw	r2,-16(fp)
 2009ce4:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 2009ce8:	e0bffc17 	ldw	r2,-16(fp)
 2009cec:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 2009cf0:	e0bffc17 	ldw	r2,-16(fp)
 2009cf4:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 2009cf8:	e0bffd17 	ldw	r2,-12(fp)
 2009cfc:	1007883a 	mov	r3,r2
 2009d00:	e0bffc17 	ldw	r2,-16(fp)
 2009d04:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 2009d08:	e0bffc17 	ldw	r2,-16(fp)
 2009d0c:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 2009d10:	e0bffe17 	ldw	r2,-8(fp)
 2009d14:	1007883a 	mov	r3,r2
 2009d18:	e0bffc17 	ldw	r2,-16(fp)
 2009d1c:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 2009d20:	e0bffc17 	ldw	r2,-16(fp)
 2009d24:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 2009d28:	e0bffc17 	ldw	r2,-16(fp)
 2009d2c:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 2009d30:	e0bffc17 	ldw	r2,-16(fp)
 2009d34:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 2009d38:	e0bffc17 	ldw	r2,-16(fp)
 2009d3c:	10801704 	addi	r2,r2,92
 2009d40:	01800204 	movi	r6,8
 2009d44:	000b883a 	mov	r5,zero
 2009d48:	1009883a 	mov	r4,r2
 2009d4c:	2004de40 	call	2004de4 <memset>
  ptr->_cookie = ptr;
 2009d50:	e0bffc17 	ldw	r2,-16(fp)
 2009d54:	e0fffc17 	ldw	r3,-16(fp)
 2009d58:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 2009d5c:	e0fffc17 	ldw	r3,-16(fp)
 2009d60:	00808074 	movhi	r2,513
 2009d64:	10bbb304 	addi	r2,r2,-4404
 2009d68:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 2009d6c:	e0fffc17 	ldw	r3,-16(fp)
 2009d70:	00808074 	movhi	r2,513
 2009d74:	10bbe604 	addi	r2,r2,-4200
 2009d78:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 2009d7c:	e0fffc17 	ldw	r3,-16(fp)
 2009d80:	00808074 	movhi	r2,513
 2009d84:	10bc1304 	addi	r2,r2,-4020
 2009d88:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 2009d8c:	e0fffc17 	ldw	r3,-16(fp)
 2009d90:	00808074 	movhi	r2,513
 2009d94:	10bc3b04 	addi	r2,r2,-3860
 2009d98:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 2009d9c:	0001883a 	nop
 2009da0:	e037883a 	mov	sp,fp
 2009da4:	dfc00117 	ldw	ra,4(sp)
 2009da8:	df000017 	ldw	fp,0(sp)
 2009dac:	dec00204 	addi	sp,sp,8
 2009db0:	f800283a 	ret

02009db4 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 2009db4:	defffb04 	addi	sp,sp,-20
 2009db8:	dfc00415 	stw	ra,16(sp)
 2009dbc:	df000315 	stw	fp,12(sp)
 2009dc0:	dc000215 	stw	r16,8(sp)
 2009dc4:	df000304 	addi	fp,sp,12
 2009dc8:	e13ffe15 	stw	r4,-8(fp)
 2009dcc:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 2009dd0:	80bfffc4 	addi	r2,r16,-1
 2009dd4:	10801a24 	muli	r2,r2,104
 2009dd8:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 2009ddc:	100b883a 	mov	r5,r2
 2009de0:	e13ffe17 	ldw	r4,-8(fp)
 2009de4:	200b8c40 	call	200b8c4 <_malloc_r>
 2009de8:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 2009dec:	e0bffd17 	ldw	r2,-12(fp)
 2009df0:	1000021e 	bne	r2,zero,2009dfc <__sfmoreglue+0x48>
    return NULL;
 2009df4:	0005883a 	mov	r2,zero
 2009df8:	00001106 	br	2009e40 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 2009dfc:	e0bffd17 	ldw	r2,-12(fp)
 2009e00:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 2009e04:	e0bffd17 	ldw	r2,-12(fp)
 2009e08:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 2009e0c:	e0bffd17 	ldw	r2,-12(fp)
 2009e10:	10c00304 	addi	r3,r2,12
 2009e14:	e0bffd17 	ldw	r2,-12(fp)
 2009e18:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 2009e1c:	e0bffd17 	ldw	r2,-12(fp)
 2009e20:	10800304 	addi	r2,r2,12
 2009e24:	8007883a 	mov	r3,r16
 2009e28:	18c01a24 	muli	r3,r3,104
 2009e2c:	180d883a 	mov	r6,r3
 2009e30:	000b883a 	mov	r5,zero
 2009e34:	1009883a 	mov	r4,r2
 2009e38:	2004de40 	call	2004de4 <memset>
  return &g->glue;
 2009e3c:	e0bffd17 	ldw	r2,-12(fp)
}
 2009e40:	e6ffff04 	addi	sp,fp,-4
 2009e44:	dfc00217 	ldw	ra,8(sp)
 2009e48:	df000117 	ldw	fp,4(sp)
 2009e4c:	dc000017 	ldw	r16,0(sp)
 2009e50:	dec00304 	addi	sp,sp,12
 2009e54:	f800283a 	ret

02009e58 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 2009e58:	defffa04 	addi	sp,sp,-24
 2009e5c:	dfc00515 	stw	ra,20(sp)
 2009e60:	df000415 	stw	fp,16(sp)
 2009e64:	df000404 	addi	fp,sp,16
 2009e68:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 2009e6c:	200a13c0 	call	200a13c <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 2009e70:	d0a00117 	ldw	r2,-32764(gp)
 2009e74:	10800e17 	ldw	r2,56(r2)
 2009e78:	1000031e 	bne	r2,zero,2009e88 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 2009e7c:	d0a00117 	ldw	r2,-32764(gp)
 2009e80:	1009883a 	mov	r4,r2
 2009e84:	200a0640 	call	200a064 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009e88:	d0a00117 	ldw	r2,-32764(gp)
 2009e8c:	1080b804 	addi	r2,r2,736
 2009e90:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009e94:	e0bffe17 	ldw	r2,-8(fp)
 2009e98:	10800217 	ldw	r2,8(r2)
 2009e9c:	e0bffc15 	stw	r2,-16(fp)
 2009ea0:	e0bffe17 	ldw	r2,-8(fp)
 2009ea4:	10800117 	ldw	r2,4(r2)
 2009ea8:	e0bffd15 	stw	r2,-12(fp)
 2009eac:	00000906 	br	2009ed4 <__sfp+0x7c>
	if (fp->_flags == 0)
 2009eb0:	e0bffc17 	ldw	r2,-16(fp)
 2009eb4:	1080030b 	ldhu	r2,12(r2)
 2009eb8:	10bfffcc 	andi	r2,r2,65535
 2009ebc:	10a0001c 	xori	r2,r2,32768
 2009ec0:	10a00004 	addi	r2,r2,-32768
 2009ec4:	10001f26 	beq	r2,zero,2009f44 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009ec8:	e0bffc17 	ldw	r2,-16(fp)
 2009ecc:	10801a04 	addi	r2,r2,104
 2009ed0:	e0bffc15 	stw	r2,-16(fp)
 2009ed4:	e0bffd17 	ldw	r2,-12(fp)
 2009ed8:	10bfffc4 	addi	r2,r2,-1
 2009edc:	e0bffd15 	stw	r2,-12(fp)
 2009ee0:	e0bffd17 	ldw	r2,-12(fp)
 2009ee4:	103ff20e 	bge	r2,zero,2009eb0 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009ee8:	e0bffe17 	ldw	r2,-8(fp)
 2009eec:	10800017 	ldw	r2,0(r2)
 2009ef0:	1000091e 	bne	r2,zero,2009f18 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 2009ef4:	01400104 	movi	r5,4
 2009ef8:	e13fff17 	ldw	r4,-4(fp)
 2009efc:	2009db40 	call	2009db4 <__sfmoreglue>
 2009f00:	1007883a 	mov	r3,r2
 2009f04:	e0bffe17 	ldw	r2,-8(fp)
 2009f08:	10c00015 	stw	r3,0(r2)
 2009f0c:	e0bffe17 	ldw	r2,-8(fp)
 2009f10:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009f14:	10000426 	beq	r2,zero,2009f28 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009f18:	e0bffe17 	ldw	r2,-8(fp)
 2009f1c:	10800017 	ldw	r2,0(r2)
 2009f20:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 2009f24:	003fdb06 	br	2009e94 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 2009f28:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 2009f2c:	200a15c0 	call	200a15c <__sfp_lock_release>
  d->_errno = ENOMEM;
 2009f30:	e0bfff17 	ldw	r2,-4(fp)
 2009f34:	00c00304 	movi	r3,12
 2009f38:	10c00015 	stw	r3,0(r2)
  return NULL;
 2009f3c:	0005883a 	mov	r2,zero
 2009f40:	00002506 	br	2009fd8 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 2009f44:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 2009f48:	e0bffc17 	ldw	r2,-16(fp)
 2009f4c:	00ffffc4 	movi	r3,-1
 2009f50:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 2009f54:	e0bffc17 	ldw	r2,-16(fp)
 2009f58:	00c00044 	movi	r3,1
 2009f5c:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 2009f60:	e0bffc17 	ldw	r2,-16(fp)
 2009f64:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 2009f68:	200a15c0 	call	200a15c <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 2009f6c:	e0bffc17 	ldw	r2,-16(fp)
 2009f70:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 2009f74:	e0bffc17 	ldw	r2,-16(fp)
 2009f78:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 2009f7c:	e0bffc17 	ldw	r2,-16(fp)
 2009f80:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 2009f84:	e0bffc17 	ldw	r2,-16(fp)
 2009f88:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 2009f8c:	e0bffc17 	ldw	r2,-16(fp)
 2009f90:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 2009f94:	e0bffc17 	ldw	r2,-16(fp)
 2009f98:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 2009f9c:	e0bffc17 	ldw	r2,-16(fp)
 2009fa0:	10801704 	addi	r2,r2,92
 2009fa4:	01800204 	movi	r6,8
 2009fa8:	000b883a 	mov	r5,zero
 2009fac:	1009883a 	mov	r4,r2
 2009fb0:	2004de40 	call	2004de4 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 2009fb4:	e0bffc17 	ldw	r2,-16(fp)
 2009fb8:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 2009fbc:	e0bffc17 	ldw	r2,-16(fp)
 2009fc0:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 2009fc4:	e0bffc17 	ldw	r2,-16(fp)
 2009fc8:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 2009fcc:	e0bffc17 	ldw	r2,-16(fp)
 2009fd0:	10001215 	stw	zero,72(r2)

  return fp;
 2009fd4:	e0bffc17 	ldw	r2,-16(fp)
}
 2009fd8:	e037883a 	mov	sp,fp
 2009fdc:	dfc00117 	ldw	ra,4(sp)
 2009fe0:	df000017 	ldw	fp,0(sp)
 2009fe4:	dec00204 	addi	sp,sp,8
 2009fe8:	f800283a 	ret

02009fec <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 2009fec:	defffc04 	addi	sp,sp,-16
 2009ff0:	dfc00315 	stw	ra,12(sp)
 2009ff4:	df000215 	stw	fp,8(sp)
 2009ff8:	df000204 	addi	fp,sp,8
 2009ffc:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 200a000:	00808074 	movhi	r2,513
 200a004:	10827d04 	addi	r2,r2,2548
 200a008:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 200a00c:	e17ffe17 	ldw	r5,-8(fp)
 200a010:	e13fff17 	ldw	r4,-4(fp)
 200a014:	200b0640 	call	200b064 <_fwalk_reent>
}
 200a018:	0001883a 	nop
 200a01c:	e037883a 	mov	sp,fp
 200a020:	dfc00117 	ldw	ra,4(sp)
 200a024:	df000017 	ldw	fp,0(sp)
 200a028:	dec00204 	addi	sp,sp,8
 200a02c:	f800283a 	ret

0200a030 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 200a030:	defffe04 	addi	sp,sp,-8
 200a034:	dfc00115 	stw	ra,4(sp)
 200a038:	df000015 	stw	fp,0(sp)
 200a03c:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 200a040:	d0a00117 	ldw	r2,-32764(gp)
 200a044:	1009883a 	mov	r4,r2
 200a048:	2009fec0 	call	2009fec <_cleanup_r>
}
 200a04c:	0001883a 	nop
 200a050:	e037883a 	mov	sp,fp
 200a054:	dfc00117 	ldw	ra,4(sp)
 200a058:	df000017 	ldw	fp,0(sp)
 200a05c:	dec00204 	addi	sp,sp,8
 200a060:	f800283a 	ret

0200a064 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200a064:	defffd04 	addi	sp,sp,-12
 200a068:	dfc00215 	stw	ra,8(sp)
 200a06c:	df000115 	stw	fp,4(sp)
 200a070:	df000104 	addi	fp,sp,4
 200a074:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 200a078:	200a17c0 	call	200a17c <__sinit_lock_acquire>

  if (s->__sdidinit)
 200a07c:	e0bfff17 	ldw	r2,-4(fp)
 200a080:	10800e17 	ldw	r2,56(r2)
 200a084:	10000226 	beq	r2,zero,200a090 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 200a088:	200a19c0 	call	200a19c <__sinit_lock_release>
      return;
 200a08c:	00002606 	br	200a128 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 200a090:	e0ffff17 	ldw	r3,-4(fp)
 200a094:	00808074 	movhi	r2,513
 200a098:	10a7fb04 	addi	r2,r2,-24596
 200a09c:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 200a0a0:	e0bfff17 	ldw	r2,-4(fp)
 200a0a4:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200a0a8:	e0bfff17 	ldw	r2,-4(fp)
 200a0ac:	00c000c4 	movi	r3,3
 200a0b0:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200a0b4:	e0bfff17 	ldw	r2,-4(fp)
 200a0b8:	10c0bb04 	addi	r3,r2,748
 200a0bc:	e0bfff17 	ldw	r2,-4(fp)
 200a0c0:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200a0c4:	e0bfff17 	ldw	r2,-4(fp)
 200a0c8:	10800117 	ldw	r2,4(r2)
 200a0cc:	e1ffff17 	ldw	r7,-4(fp)
 200a0d0:	000d883a 	mov	r6,zero
 200a0d4:	01400104 	movi	r5,4
 200a0d8:	1009883a 	mov	r4,r2
 200a0dc:	2009cc00 	call	2009cc0 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 200a0e0:	e0bfff17 	ldw	r2,-4(fp)
 200a0e4:	10800217 	ldw	r2,8(r2)
 200a0e8:	e1ffff17 	ldw	r7,-4(fp)
 200a0ec:	01800044 	movi	r6,1
 200a0f0:	01400284 	movi	r5,10
 200a0f4:	1009883a 	mov	r4,r2
 200a0f8:	2009cc00 	call	2009cc0 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 200a0fc:	e0bfff17 	ldw	r2,-4(fp)
 200a100:	10800317 	ldw	r2,12(r2)
 200a104:	e1ffff17 	ldw	r7,-4(fp)
 200a108:	01800084 	movi	r6,2
 200a10c:	01400484 	movi	r5,18
 200a110:	1009883a 	mov	r4,r2
 200a114:	2009cc00 	call	2009cc0 <std>

  s->__sdidinit = 1;
 200a118:	e0bfff17 	ldw	r2,-4(fp)
 200a11c:	00c00044 	movi	r3,1
 200a120:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 200a124:	200a19c0 	call	200a19c <__sinit_lock_release>
}
 200a128:	e037883a 	mov	sp,fp
 200a12c:	dfc00117 	ldw	ra,4(sp)
 200a130:	df000017 	ldw	fp,0(sp)
 200a134:	dec00204 	addi	sp,sp,8
 200a138:	f800283a 	ret

0200a13c <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 200a13c:	deffff04 	addi	sp,sp,-4
 200a140:	df000015 	stw	fp,0(sp)
 200a144:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 200a148:	0001883a 	nop
 200a14c:	e037883a 	mov	sp,fp
 200a150:	df000017 	ldw	fp,0(sp)
 200a154:	dec00104 	addi	sp,sp,4
 200a158:	f800283a 	ret

0200a15c <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 200a15c:	deffff04 	addi	sp,sp,-4
 200a160:	df000015 	stw	fp,0(sp)
 200a164:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 200a168:	0001883a 	nop
 200a16c:	e037883a 	mov	sp,fp
 200a170:	df000017 	ldw	fp,0(sp)
 200a174:	dec00104 	addi	sp,sp,4
 200a178:	f800283a 	ret

0200a17c <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 200a17c:	deffff04 	addi	sp,sp,-4
 200a180:	df000015 	stw	fp,0(sp)
 200a184:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 200a188:	0001883a 	nop
 200a18c:	e037883a 	mov	sp,fp
 200a190:	df000017 	ldw	fp,0(sp)
 200a194:	dec00104 	addi	sp,sp,4
 200a198:	f800283a 	ret

0200a19c <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200a19c:	deffff04 	addi	sp,sp,-4
 200a1a0:	df000015 	stw	fp,0(sp)
 200a1a4:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200a1a8:	0001883a 	nop
 200a1ac:	e037883a 	mov	sp,fp
 200a1b0:	df000017 	ldw	fp,0(sp)
 200a1b4:	dec00104 	addi	sp,sp,4
 200a1b8:	f800283a 	ret

0200a1bc <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200a1bc:	defffe04 	addi	sp,sp,-8
 200a1c0:	df000115 	stw	fp,4(sp)
 200a1c4:	df000104 	addi	fp,sp,4
 200a1c8:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200a1cc:	0005883a 	mov	r2,zero
}
 200a1d0:	e037883a 	mov	sp,fp
 200a1d4:	df000017 	ldw	fp,0(sp)
 200a1d8:	dec00104 	addi	sp,sp,4
 200a1dc:	f800283a 	ret

0200a1e0 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200a1e0:	defffe04 	addi	sp,sp,-8
 200a1e4:	df000115 	stw	fp,4(sp)
 200a1e8:	df000104 	addi	fp,sp,4
 200a1ec:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200a1f0:	0005883a 	mov	r2,zero
}
 200a1f4:	e037883a 	mov	sp,fp
 200a1f8:	df000017 	ldw	fp,0(sp)
 200a1fc:	dec00104 	addi	sp,sp,4
 200a200:	f800283a 	ret

0200a204 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200a204:	defffe04 	addi	sp,sp,-8
 200a208:	dfc00115 	stw	ra,4(sp)
 200a20c:	df000015 	stw	fp,0(sp)
 200a210:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200a214:	200a13c0 	call	200a13c <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200a218:	d0a00017 	ldw	r2,-32768(gp)
 200a21c:	01408074 	movhi	r5,513
 200a220:	29686f04 	addi	r5,r5,-24132
 200a224:	1009883a 	mov	r4,r2
 200a228:	200af8c0 	call	200af8c <_fwalk>
}
 200a22c:	0001883a 	nop
 200a230:	e037883a 	mov	sp,fp
 200a234:	dfc00117 	ldw	ra,4(sp)
 200a238:	df000017 	ldw	fp,0(sp)
 200a23c:	dec00204 	addi	sp,sp,8
 200a240:	f800283a 	ret

0200a244 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200a244:	defffe04 	addi	sp,sp,-8
 200a248:	dfc00115 	stw	ra,4(sp)
 200a24c:	df000015 	stw	fp,0(sp)
 200a250:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200a254:	d0a00017 	ldw	r2,-32768(gp)
 200a258:	01408074 	movhi	r5,513
 200a25c:	29687804 	addi	r5,r5,-24096
 200a260:	1009883a 	mov	r4,r2
 200a264:	200af8c0 	call	200af8c <_fwalk>

  __sfp_lock_release ();
 200a268:	200a15c0 	call	200a15c <__sfp_lock_release>
}
 200a26c:	0001883a 	nop
 200a270:	e037883a 	mov	sp,fp
 200a274:	dfc00117 	ldw	ra,4(sp)
 200a278:	df000017 	ldw	fp,0(sp)
 200a27c:	dec00204 	addi	sp,sp,8
 200a280:	f800283a 	ret

0200a284 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200a284:	defff204 	addi	sp,sp,-56
 200a288:	dfc00d15 	stw	ra,52(sp)
 200a28c:	df000c15 	stw	fp,48(sp)
 200a290:	df000c04 	addi	fp,sp,48
 200a294:	e13ffe15 	stw	r4,-8(fp)
 200a298:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200a29c:	e0bfff17 	ldw	r2,-4(fp)
 200a2a0:	10014a26 	beq	r2,zero,200a7cc <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200a2a4:	e13ffe17 	ldw	r4,-8(fp)
 200a2a8:	2013d580 	call	2013d58 <__malloc_lock>

  p = mem2chunk(mem);
 200a2ac:	e0bfff17 	ldw	r2,-4(fp)
 200a2b0:	10bffe04 	addi	r2,r2,-8
 200a2b4:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200a2b8:	e0bff417 	ldw	r2,-48(fp)
 200a2bc:	10800117 	ldw	r2,4(r2)
 200a2c0:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200a2c4:	e0fff917 	ldw	r3,-28(fp)
 200a2c8:	00bfff84 	movi	r2,-2
 200a2cc:	1884703a 	and	r2,r3,r2
 200a2d0:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200a2d4:	e0fff417 	ldw	r3,-48(fp)
 200a2d8:	e0bff517 	ldw	r2,-44(fp)
 200a2dc:	1885883a 	add	r2,r3,r2
 200a2e0:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200a2e4:	e0bffa17 	ldw	r2,-24(fp)
 200a2e8:	10c00117 	ldw	r3,4(r2)
 200a2ec:	00bfff04 	movi	r2,-4
 200a2f0:	1884703a 	and	r2,r3,r2
 200a2f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200a2f8:	008080b4 	movhi	r2,514
 200a2fc:	10bcd504 	addi	r2,r2,-3244
 200a300:	10c00217 	ldw	r3,8(r2)
 200a304:	e0bffa17 	ldw	r2,-24(fp)
 200a308:	1880311e 	bne	r3,r2,200a3d0 <_free_r+0x14c>
  {
    sz += nextsz;
 200a30c:	e0fff517 	ldw	r3,-44(fp)
 200a310:	e0bffb17 	ldw	r2,-20(fp)
 200a314:	1885883a 	add	r2,r3,r2
 200a318:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a31c:	e0bff917 	ldw	r2,-28(fp)
 200a320:	1080004c 	andi	r2,r2,1
 200a324:	1000181e 	bne	r2,zero,200a388 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200a328:	e0bff417 	ldw	r2,-48(fp)
 200a32c:	10800017 	ldw	r2,0(r2)
 200a330:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200a334:	e0bffc17 	ldw	r2,-16(fp)
 200a338:	0085c83a 	sub	r2,zero,r2
 200a33c:	e0fff417 	ldw	r3,-48(fp)
 200a340:	1885883a 	add	r2,r3,r2
 200a344:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200a348:	e0fff517 	ldw	r3,-44(fp)
 200a34c:	e0bffc17 	ldw	r2,-16(fp)
 200a350:	1885883a 	add	r2,r3,r2
 200a354:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200a358:	e0bff417 	ldw	r2,-48(fp)
 200a35c:	10800317 	ldw	r2,12(r2)
 200a360:	e0bff615 	stw	r2,-40(fp)
 200a364:	e0bff417 	ldw	r2,-48(fp)
 200a368:	10800217 	ldw	r2,8(r2)
 200a36c:	e0bff715 	stw	r2,-36(fp)
 200a370:	e0bff717 	ldw	r2,-36(fp)
 200a374:	e0fff617 	ldw	r3,-40(fp)
 200a378:	10c00315 	stw	r3,12(r2)
 200a37c:	e0bff617 	ldw	r2,-40(fp)
 200a380:	e0fff717 	ldw	r3,-36(fp)
 200a384:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200a388:	e0bff517 	ldw	r2,-44(fp)
 200a38c:	10c00054 	ori	r3,r2,1
 200a390:	e0bff417 	ldw	r2,-48(fp)
 200a394:	10c00115 	stw	r3,4(r2)
    top = p;
 200a398:	008080b4 	movhi	r2,514
 200a39c:	10bcd504 	addi	r2,r2,-3244
 200a3a0:	e0fff417 	ldw	r3,-48(fp)
 200a3a4:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200a3a8:	d0a00317 	ldw	r2,-32756(gp)
 200a3ac:	e0fff517 	ldw	r3,-44(fp)
 200a3b0:	18800436 	bltu	r3,r2,200a3c4 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200a3b4:	d0a72b17 	ldw	r2,-25428(gp)
 200a3b8:	100b883a 	mov	r5,r2
 200a3bc:	e13ffe17 	ldw	r4,-8(fp)
 200a3c0:	200a7e40 	call	200a7e4 <_malloc_trim_r>
    MALLOC_UNLOCK;
 200a3c4:	e13ffe17 	ldw	r4,-8(fp)
 200a3c8:	2013e780 	call	2013e78 <__malloc_unlock>
    return;
 200a3cc:	00010006 	br	200a7d0 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200a3d0:	e0bffa17 	ldw	r2,-24(fp)
 200a3d4:	e0fffb17 	ldw	r3,-20(fp)
 200a3d8:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200a3dc:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a3e0:	e0bff917 	ldw	r2,-28(fp)
 200a3e4:	1080004c 	andi	r2,r2,1
 200a3e8:	1000201e 	bne	r2,zero,200a46c <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200a3ec:	e0bff417 	ldw	r2,-48(fp)
 200a3f0:	10800017 	ldw	r2,0(r2)
 200a3f4:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200a3f8:	e0bffc17 	ldw	r2,-16(fp)
 200a3fc:	0085c83a 	sub	r2,zero,r2
 200a400:	e0fff417 	ldw	r3,-48(fp)
 200a404:	1885883a 	add	r2,r3,r2
 200a408:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200a40c:	e0fff517 	ldw	r3,-44(fp)
 200a410:	e0bffc17 	ldw	r2,-16(fp)
 200a414:	1885883a 	add	r2,r3,r2
 200a418:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200a41c:	e0bff417 	ldw	r2,-48(fp)
 200a420:	10c00217 	ldw	r3,8(r2)
 200a424:	008080b4 	movhi	r2,514
 200a428:	10bcd704 	addi	r2,r2,-3236
 200a42c:	1880031e 	bne	r3,r2,200a43c <_free_r+0x1b8>
      islr = 1;
 200a430:	00800044 	movi	r2,1
 200a434:	e0bff815 	stw	r2,-32(fp)
 200a438:	00000c06 	br	200a46c <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200a43c:	e0bff417 	ldw	r2,-48(fp)
 200a440:	10800317 	ldw	r2,12(r2)
 200a444:	e0bff615 	stw	r2,-40(fp)
 200a448:	e0bff417 	ldw	r2,-48(fp)
 200a44c:	10800217 	ldw	r2,8(r2)
 200a450:	e0bff715 	stw	r2,-36(fp)
 200a454:	e0bff717 	ldw	r2,-36(fp)
 200a458:	e0fff617 	ldw	r3,-40(fp)
 200a45c:	10c00315 	stw	r3,12(r2)
 200a460:	e0bff617 	ldw	r2,-40(fp)
 200a464:	e0fff717 	ldw	r3,-36(fp)
 200a468:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200a46c:	e0fffa17 	ldw	r3,-24(fp)
 200a470:	e0bffb17 	ldw	r2,-20(fp)
 200a474:	1885883a 	add	r2,r3,r2
 200a478:	10800117 	ldw	r2,4(r2)
 200a47c:	1080004c 	andi	r2,r2,1
 200a480:	10002a1e 	bne	r2,zero,200a52c <_free_r+0x2a8>
  {
    sz += nextsz;
 200a484:	e0fff517 	ldw	r3,-44(fp)
 200a488:	e0bffb17 	ldw	r2,-20(fp)
 200a48c:	1885883a 	add	r2,r3,r2
 200a490:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200a494:	e0bff817 	ldw	r2,-32(fp)
 200a498:	1000181e 	bne	r2,zero,200a4fc <_free_r+0x278>
 200a49c:	e0bffa17 	ldw	r2,-24(fp)
 200a4a0:	10c00217 	ldw	r3,8(r2)
 200a4a4:	008080b4 	movhi	r2,514
 200a4a8:	10bcd704 	addi	r2,r2,-3236
 200a4ac:	1880131e 	bne	r3,r2,200a4fc <_free_r+0x278>
    {
      islr = 1;
 200a4b0:	00800044 	movi	r2,1
 200a4b4:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200a4b8:	00c080b4 	movhi	r3,514
 200a4bc:	18fcd704 	addi	r3,r3,-3236
 200a4c0:	008080b4 	movhi	r2,514
 200a4c4:	10bcd704 	addi	r2,r2,-3236
 200a4c8:	e13ff417 	ldw	r4,-48(fp)
 200a4cc:	11000315 	stw	r4,12(r2)
 200a4d0:	10800317 	ldw	r2,12(r2)
 200a4d4:	18800215 	stw	r2,8(r3)
 200a4d8:	008080b4 	movhi	r2,514
 200a4dc:	10bcd704 	addi	r2,r2,-3236
 200a4e0:	e0fff417 	ldw	r3,-48(fp)
 200a4e4:	18800315 	stw	r2,12(r3)
 200a4e8:	e0bff417 	ldw	r2,-48(fp)
 200a4ec:	10c00317 	ldw	r3,12(r2)
 200a4f0:	e0bff417 	ldw	r2,-48(fp)
 200a4f4:	10c00215 	stw	r3,8(r2)
 200a4f8:	00000c06 	br	200a52c <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200a4fc:	e0bffa17 	ldw	r2,-24(fp)
 200a500:	10800317 	ldw	r2,12(r2)
 200a504:	e0bff615 	stw	r2,-40(fp)
 200a508:	e0bffa17 	ldw	r2,-24(fp)
 200a50c:	10800217 	ldw	r2,8(r2)
 200a510:	e0bff715 	stw	r2,-36(fp)
 200a514:	e0bff717 	ldw	r2,-36(fp)
 200a518:	e0fff617 	ldw	r3,-40(fp)
 200a51c:	10c00315 	stw	r3,12(r2)
 200a520:	e0bff617 	ldw	r2,-40(fp)
 200a524:	e0fff717 	ldw	r3,-36(fp)
 200a528:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200a52c:	e0bff517 	ldw	r2,-44(fp)
 200a530:	10c00054 	ori	r3,r2,1
 200a534:	e0bff417 	ldw	r2,-48(fp)
 200a538:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200a53c:	e0fff417 	ldw	r3,-48(fp)
 200a540:	e0bff517 	ldw	r2,-44(fp)
 200a544:	1885883a 	add	r2,r3,r2
 200a548:	e0fff517 	ldw	r3,-44(fp)
 200a54c:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200a550:	e0bff817 	ldw	r2,-32(fp)
 200a554:	10009a1e 	bne	r2,zero,200a7c0 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200a558:	e0bff517 	ldw	r2,-44(fp)
 200a55c:	10808028 	cmpgeui	r2,r2,512
 200a560:	10002c1e 	bne	r2,zero,200a614 <_free_r+0x390>
 200a564:	e0bff517 	ldw	r2,-44(fp)
 200a568:	1004d0fa 	srli	r2,r2,3
 200a56c:	e0bffd15 	stw	r2,-12(fp)
 200a570:	00c080b4 	movhi	r3,514
 200a574:	18fcd504 	addi	r3,r3,-3244
 200a578:	008080b4 	movhi	r2,514
 200a57c:	10bcd504 	addi	r2,r2,-3244
 200a580:	11000117 	ldw	r4,4(r2)
 200a584:	e0bffd17 	ldw	r2,-12(fp)
 200a588:	1000010e 	bge	r2,zero,200a590 <_free_r+0x30c>
 200a58c:	108000c4 	addi	r2,r2,3
 200a590:	1005d0ba 	srai	r2,r2,2
 200a594:	100b883a 	mov	r5,r2
 200a598:	00800044 	movi	r2,1
 200a59c:	1144983a 	sll	r2,r2,r5
 200a5a0:	2084b03a 	or	r2,r4,r2
 200a5a4:	18800115 	stw	r2,4(r3)
 200a5a8:	e0bffd17 	ldw	r2,-12(fp)
 200a5ac:	10800044 	addi	r2,r2,1
 200a5b0:	1085883a 	add	r2,r2,r2
 200a5b4:	1085883a 	add	r2,r2,r2
 200a5b8:	1087883a 	add	r3,r2,r2
 200a5bc:	008080b4 	movhi	r2,514
 200a5c0:	10bcd504 	addi	r2,r2,-3244
 200a5c4:	1885883a 	add	r2,r3,r2
 200a5c8:	10bffe04 	addi	r2,r2,-8
 200a5cc:	e0bff615 	stw	r2,-40(fp)
 200a5d0:	e0bff617 	ldw	r2,-40(fp)
 200a5d4:	10800217 	ldw	r2,8(r2)
 200a5d8:	e0bff715 	stw	r2,-36(fp)
 200a5dc:	e0bff417 	ldw	r2,-48(fp)
 200a5e0:	e0fff617 	ldw	r3,-40(fp)
 200a5e4:	10c00315 	stw	r3,12(r2)
 200a5e8:	e0bff417 	ldw	r2,-48(fp)
 200a5ec:	e0fff717 	ldw	r3,-36(fp)
 200a5f0:	10c00215 	stw	r3,8(r2)
 200a5f4:	e0bff617 	ldw	r2,-40(fp)
 200a5f8:	e0fff417 	ldw	r3,-48(fp)
 200a5fc:	10c00215 	stw	r3,8(r2)
 200a600:	e0bff617 	ldw	r2,-40(fp)
 200a604:	10c00217 	ldw	r3,8(r2)
 200a608:	e0bff717 	ldw	r2,-36(fp)
 200a60c:	10c00315 	stw	r3,12(r2)
 200a610:	00006b06 	br	200a7c0 <_free_r+0x53c>
 200a614:	e0bff517 	ldw	r2,-44(fp)
 200a618:	1004d27a 	srli	r2,r2,9
 200a61c:	1000031e 	bne	r2,zero,200a62c <_free_r+0x3a8>
 200a620:	e0bff517 	ldw	r2,-44(fp)
 200a624:	1004d0fa 	srli	r2,r2,3
 200a628:	00002906 	br	200a6d0 <_free_r+0x44c>
 200a62c:	e0bff517 	ldw	r2,-44(fp)
 200a630:	1004d27a 	srli	r2,r2,9
 200a634:	10800168 	cmpgeui	r2,r2,5
 200a638:	1000041e 	bne	r2,zero,200a64c <_free_r+0x3c8>
 200a63c:	e0bff517 	ldw	r2,-44(fp)
 200a640:	1004d1ba 	srli	r2,r2,6
 200a644:	10800e04 	addi	r2,r2,56
 200a648:	00002106 	br	200a6d0 <_free_r+0x44c>
 200a64c:	e0bff517 	ldw	r2,-44(fp)
 200a650:	1004d27a 	srli	r2,r2,9
 200a654:	10800568 	cmpgeui	r2,r2,21
 200a658:	1000041e 	bne	r2,zero,200a66c <_free_r+0x3e8>
 200a65c:	e0bff517 	ldw	r2,-44(fp)
 200a660:	1004d27a 	srli	r2,r2,9
 200a664:	108016c4 	addi	r2,r2,91
 200a668:	00001906 	br	200a6d0 <_free_r+0x44c>
 200a66c:	e0bff517 	ldw	r2,-44(fp)
 200a670:	1004d27a 	srli	r2,r2,9
 200a674:	10801568 	cmpgeui	r2,r2,85
 200a678:	1000041e 	bne	r2,zero,200a68c <_free_r+0x408>
 200a67c:	e0bff517 	ldw	r2,-44(fp)
 200a680:	1004d33a 	srli	r2,r2,12
 200a684:	10801b84 	addi	r2,r2,110
 200a688:	00001106 	br	200a6d0 <_free_r+0x44c>
 200a68c:	e0bff517 	ldw	r2,-44(fp)
 200a690:	1004d27a 	srli	r2,r2,9
 200a694:	10805568 	cmpgeui	r2,r2,341
 200a698:	1000041e 	bne	r2,zero,200a6ac <_free_r+0x428>
 200a69c:	e0bff517 	ldw	r2,-44(fp)
 200a6a0:	1004d3fa 	srli	r2,r2,15
 200a6a4:	10801dc4 	addi	r2,r2,119
 200a6a8:	00000906 	br	200a6d0 <_free_r+0x44c>
 200a6ac:	e0bff517 	ldw	r2,-44(fp)
 200a6b0:	1004d27a 	srli	r2,r2,9
 200a6b4:	10815568 	cmpgeui	r2,r2,1365
 200a6b8:	1000041e 	bne	r2,zero,200a6cc <_free_r+0x448>
 200a6bc:	e0bff517 	ldw	r2,-44(fp)
 200a6c0:	1004d4ba 	srli	r2,r2,18
 200a6c4:	10801f04 	addi	r2,r2,124
 200a6c8:	00000106 	br	200a6d0 <_free_r+0x44c>
 200a6cc:	00801f84 	movi	r2,126
 200a6d0:	e0bffd15 	stw	r2,-12(fp)
 200a6d4:	e0bffd17 	ldw	r2,-12(fp)
 200a6d8:	10800044 	addi	r2,r2,1
 200a6dc:	1085883a 	add	r2,r2,r2
 200a6e0:	1085883a 	add	r2,r2,r2
 200a6e4:	1087883a 	add	r3,r2,r2
 200a6e8:	008080b4 	movhi	r2,514
 200a6ec:	10bcd504 	addi	r2,r2,-3244
 200a6f0:	1885883a 	add	r2,r3,r2
 200a6f4:	10bffe04 	addi	r2,r2,-8
 200a6f8:	e0bff615 	stw	r2,-40(fp)
 200a6fc:	e0bff617 	ldw	r2,-40(fp)
 200a700:	10800217 	ldw	r2,8(r2)
 200a704:	e0bff715 	stw	r2,-36(fp)
 200a708:	e0fff717 	ldw	r3,-36(fp)
 200a70c:	e0bff617 	ldw	r2,-40(fp)
 200a710:	1880121e 	bne	r3,r2,200a75c <_free_r+0x4d8>
 200a714:	00c080b4 	movhi	r3,514
 200a718:	18fcd504 	addi	r3,r3,-3244
 200a71c:	008080b4 	movhi	r2,514
 200a720:	10bcd504 	addi	r2,r2,-3244
 200a724:	11000117 	ldw	r4,4(r2)
 200a728:	e0bffd17 	ldw	r2,-12(fp)
 200a72c:	1000010e 	bge	r2,zero,200a734 <_free_r+0x4b0>
 200a730:	108000c4 	addi	r2,r2,3
 200a734:	1005d0ba 	srai	r2,r2,2
 200a738:	100b883a 	mov	r5,r2
 200a73c:	00800044 	movi	r2,1
 200a740:	1144983a 	sll	r2,r2,r5
 200a744:	2084b03a 	or	r2,r4,r2
 200a748:	18800115 	stw	r2,4(r3)
 200a74c:	00000f06 	br	200a78c <_free_r+0x508>
 200a750:	e0bff717 	ldw	r2,-36(fp)
 200a754:	10800217 	ldw	r2,8(r2)
 200a758:	e0bff715 	stw	r2,-36(fp)
 200a75c:	e0fff717 	ldw	r3,-36(fp)
 200a760:	e0bff617 	ldw	r2,-40(fp)
 200a764:	18800626 	beq	r3,r2,200a780 <_free_r+0x4fc>
 200a768:	e0bff717 	ldw	r2,-36(fp)
 200a76c:	10c00117 	ldw	r3,4(r2)
 200a770:	00bfff04 	movi	r2,-4
 200a774:	1884703a 	and	r2,r3,r2
 200a778:	e0fff517 	ldw	r3,-44(fp)
 200a77c:	18bff436 	bltu	r3,r2,200a750 <_free_r+0x4cc>
 200a780:	e0bff717 	ldw	r2,-36(fp)
 200a784:	10800317 	ldw	r2,12(r2)
 200a788:	e0bff615 	stw	r2,-40(fp)
 200a78c:	e0bff417 	ldw	r2,-48(fp)
 200a790:	e0fff617 	ldw	r3,-40(fp)
 200a794:	10c00315 	stw	r3,12(r2)
 200a798:	e0bff417 	ldw	r2,-48(fp)
 200a79c:	e0fff717 	ldw	r3,-36(fp)
 200a7a0:	10c00215 	stw	r3,8(r2)
 200a7a4:	e0bff617 	ldw	r2,-40(fp)
 200a7a8:	e0fff417 	ldw	r3,-48(fp)
 200a7ac:	10c00215 	stw	r3,8(r2)
 200a7b0:	e0bff617 	ldw	r2,-40(fp)
 200a7b4:	10c00217 	ldw	r3,8(r2)
 200a7b8:	e0bff717 	ldw	r2,-36(fp)
 200a7bc:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200a7c0:	e13ffe17 	ldw	r4,-8(fp)
 200a7c4:	2013e780 	call	2013e78 <__malloc_unlock>
 200a7c8:	00000106 	br	200a7d0 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200a7cc:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200a7d0:	e037883a 	mov	sp,fp
 200a7d4:	dfc00117 	ldw	ra,4(sp)
 200a7d8:	df000017 	ldw	fp,0(sp)
 200a7dc:	dec00204 	addi	sp,sp,8
 200a7e0:	f800283a 	ret

0200a7e4 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200a7e4:	defff704 	addi	sp,sp,-36
 200a7e8:	dfc00815 	stw	ra,32(sp)
 200a7ec:	df000715 	stw	fp,28(sp)
 200a7f0:	df000704 	addi	fp,sp,28
 200a7f4:	e13ffe15 	stw	r4,-8(fp)
 200a7f8:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200a7fc:	00840004 	movi	r2,4096
 200a800:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200a804:	e13ffe17 	ldw	r4,-8(fp)
 200a808:	2013d580 	call	2013d58 <__malloc_lock>

  top_size = chunksize(top);
 200a80c:	008080b4 	movhi	r2,514
 200a810:	10bcd504 	addi	r2,r2,-3244
 200a814:	10800217 	ldw	r2,8(r2)
 200a818:	10800117 	ldw	r2,4(r2)
 200a81c:	1007883a 	mov	r3,r2
 200a820:	00bfff04 	movi	r2,-4
 200a824:	1884703a 	and	r2,r3,r2
 200a828:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200a82c:	e0fffa17 	ldw	r3,-24(fp)
 200a830:	e0bfff17 	ldw	r2,-4(fp)
 200a834:	1887c83a 	sub	r3,r3,r2
 200a838:	e0bff917 	ldw	r2,-28(fp)
 200a83c:	1885883a 	add	r2,r3,r2
 200a840:	10bffbc4 	addi	r2,r2,-17
 200a844:	e17ff917 	ldw	r5,-28(fp)
 200a848:	1009883a 	mov	r4,r2
 200a84c:	2004ba00 	call	2004ba0 <__udivsi3>
 200a850:	10ffffc4 	addi	r3,r2,-1
 200a854:	e0bff917 	ldw	r2,-28(fp)
 200a858:	1885383a 	mul	r2,r3,r2
 200a85c:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200a860:	e0bff917 	ldw	r2,-28(fp)
 200a864:	e0fffb17 	ldw	r3,-20(fp)
 200a868:	1880040e 	bge	r3,r2,200a87c <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200a86c:	e13ffe17 	ldw	r4,-8(fp)
 200a870:	2013e780 	call	2013e78 <__malloc_unlock>
    return 0;
 200a874:	0005883a 	mov	r2,zero
 200a878:	00004806 	br	200a99c <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200a87c:	000b883a 	mov	r5,zero
 200a880:	e13ffe17 	ldw	r4,-8(fp)
 200a884:	200ee6c0 	call	200ee6c <_sbrk_r>
 200a888:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200a88c:	008080b4 	movhi	r2,514
 200a890:	10bcd504 	addi	r2,r2,-3244
 200a894:	10c00217 	ldw	r3,8(r2)
 200a898:	e0bffa17 	ldw	r2,-24(fp)
 200a89c:	1887883a 	add	r3,r3,r2
 200a8a0:	e0bffc17 	ldw	r2,-16(fp)
 200a8a4:	18800426 	beq	r3,r2,200a8b8 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200a8a8:	e13ffe17 	ldw	r4,-8(fp)
 200a8ac:	2013e780 	call	2013e78 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200a8b0:	0005883a 	mov	r2,zero
 200a8b4:	00003906 	br	200a99c <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200a8b8:	e0bffb17 	ldw	r2,-20(fp)
 200a8bc:	0085c83a 	sub	r2,zero,r2
 200a8c0:	100b883a 	mov	r5,r2
 200a8c4:	e13ffe17 	ldw	r4,-8(fp)
 200a8c8:	200ee6c0 	call	200ee6c <_sbrk_r>
 200a8cc:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200a8d0:	e0bffd17 	ldw	r2,-12(fp)
 200a8d4:	10bfffd8 	cmpnei	r2,r2,-1
 200a8d8:	10001d1e 	bne	r2,zero,200a950 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200a8dc:	000b883a 	mov	r5,zero
 200a8e0:	e13ffe17 	ldw	r4,-8(fp)
 200a8e4:	200ee6c0 	call	200ee6c <_sbrk_r>
 200a8e8:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200a8ec:	e0fffc17 	ldw	r3,-16(fp)
 200a8f0:	008080b4 	movhi	r2,514
 200a8f4:	10bcd504 	addi	r2,r2,-3244
 200a8f8:	10800217 	ldw	r2,8(r2)
 200a8fc:	1885c83a 	sub	r2,r3,r2
 200a900:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200a904:	e0bffa17 	ldw	r2,-24(fp)
 200a908:	10800410 	cmplti	r2,r2,16
 200a90c:	10000c1e 	bne	r2,zero,200a940 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200a910:	e0bffc17 	ldw	r2,-16(fp)
 200a914:	d0e00417 	ldw	r3,-32752(gp)
 200a918:	10c7c83a 	sub	r3,r2,r3
 200a91c:	008080b4 	movhi	r2,514
 200a920:	1089ac04 	addi	r2,r2,9904
 200a924:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200a928:	008080b4 	movhi	r2,514
 200a92c:	10bcd504 	addi	r2,r2,-3244
 200a930:	10800217 	ldw	r2,8(r2)
 200a934:	e0fffa17 	ldw	r3,-24(fp)
 200a938:	18c00054 	ori	r3,r3,1
 200a93c:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200a940:	e13ffe17 	ldw	r4,-8(fp)
 200a944:	2013e780 	call	2013e78 <__malloc_unlock>
        return 0; 
 200a948:	0005883a 	mov	r2,zero
 200a94c:	00001306 	br	200a99c <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200a950:	008080b4 	movhi	r2,514
 200a954:	10bcd504 	addi	r2,r2,-3244
 200a958:	10800217 	ldw	r2,8(r2)
 200a95c:	e13ffa17 	ldw	r4,-24(fp)
 200a960:	e0fffb17 	ldw	r3,-20(fp)
 200a964:	20c7c83a 	sub	r3,r4,r3
 200a968:	18c00054 	ori	r3,r3,1
 200a96c:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200a970:	008080b4 	movhi	r2,514
 200a974:	1089ac04 	addi	r2,r2,9904
 200a978:	10c00017 	ldw	r3,0(r2)
 200a97c:	e0bffb17 	ldw	r2,-20(fp)
 200a980:	1887c83a 	sub	r3,r3,r2
 200a984:	008080b4 	movhi	r2,514
 200a988:	1089ac04 	addi	r2,r2,9904
 200a98c:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200a990:	e13ffe17 	ldw	r4,-8(fp)
 200a994:	2013e780 	call	2013e78 <__malloc_unlock>
        return 1;
 200a998:	00800044 	movi	r2,1
      }
    }
  }
}
 200a99c:	e037883a 	mov	sp,fp
 200a9a0:	dfc00117 	ldw	ra,4(sp)
 200a9a4:	df000017 	ldw	fp,0(sp)
 200a9a8:	dec00204 	addi	sp,sp,8
 200a9ac:	f800283a 	ret

0200a9b0 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200a9b0:	defff004 	addi	sp,sp,-64
 200a9b4:	dfc00f15 	stw	ra,60(sp)
 200a9b8:	df000e15 	stw	fp,56(sp)
 200a9bc:	dd800d15 	stw	r22,52(sp)
 200a9c0:	dd400c15 	stw	r21,48(sp)
 200a9c4:	dd000b15 	stw	r20,44(sp)
 200a9c8:	dcc00a15 	stw	r19,40(sp)
 200a9cc:	dc800915 	stw	r18,36(sp)
 200a9d0:	dc400815 	stw	r17,32(sp)
 200a9d4:	dc000715 	stw	r16,28(sp)
 200a9d8:	df000e04 	addi	fp,sp,56
 200a9dc:	e13ff815 	stw	r4,-32(fp)
 200a9e0:	2821883a 	mov	r16,r5
 200a9e4:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200a9e8:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200a9ec:	ac800217 	ldw	r18,8(r21)
 200a9f0:	9000021e 	bne	r18,zero,200a9fc <__sfvwrite_r+0x4c>
    return 0;
 200a9f4:	0005883a 	mov	r2,zero
 200a9f8:	00015806 	br	200af5c <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200a9fc:	8080030b 	ldhu	r2,12(r16)
 200aa00:	10bfffcc 	andi	r2,r2,65535
 200aa04:	1080020c 	andi	r2,r2,8
 200aa08:	10000226 	beq	r2,zero,200aa14 <__sfvwrite_r+0x64>
 200aa0c:	80800417 	ldw	r2,16(r16)
 200aa10:	1000061e 	bne	r2,zero,200aa2c <__sfvwrite_r+0x7c>
 200aa14:	800b883a 	mov	r5,r16
 200aa18:	e13ff817 	ldw	r4,-32(fp)
 200aa1c:	20078140 	call	2007814 <__swsetup_r>
 200aa20:	10000226 	beq	r2,zero,200aa2c <__sfvwrite_r+0x7c>
    return EOF;
 200aa24:	00bfffc4 	movi	r2,-1
 200aa28:	00014c06 	br	200af5c <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200aa2c:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200aa30:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200aa34:	8080030b 	ldhu	r2,12(r16)
 200aa38:	10bfffcc 	andi	r2,r2,65535
 200aa3c:	1080008c 	andi	r2,r2,2
 200aa40:	10001f26 	beq	r2,zero,200aac0 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200aa44:	00000306 	br	200aa54 <__sfvwrite_r+0xa4>
 200aa48:	a4c00017 	ldw	r19,0(r20)
 200aa4c:	a4800117 	ldw	r18,4(r20)
 200aa50:	a5000204 	addi	r20,r20,8
 200aa54:	903ffc26 	beq	r18,zero,200aa48 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200aa58:	82000917 	ldw	r8,36(r16)
 200aa5c:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200aa60:	9005883a 	mov	r2,r18
 200aa64:	00e00034 	movhi	r3,32768
 200aa68:	18ff0004 	addi	r3,r3,-1024
 200aa6c:	1880022e 	bgeu	r3,r2,200aa78 <__sfvwrite_r+0xc8>
 200aa70:	00a00034 	movhi	r2,32768
 200aa74:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200aa78:	100f883a 	mov	r7,r2
 200aa7c:	980d883a 	mov	r6,r19
 200aa80:	200b883a 	mov	r5,r4
 200aa84:	e13ff817 	ldw	r4,-32(fp)
 200aa88:	403ee83a 	callr	r8
 200aa8c:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200aa90:	0441290e 	bge	zero,r17,200af38 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200aa94:	8805883a 	mov	r2,r17
 200aa98:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200aa9c:	8805883a 	mov	r2,r17
 200aaa0:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200aaa4:	a8800217 	ldw	r2,8(r21)
 200aaa8:	8807883a 	mov	r3,r17
 200aaac:	10c5c83a 	sub	r2,r2,r3
 200aab0:	a8800215 	stw	r2,8(r21)
 200aab4:	a8800217 	ldw	r2,8(r21)
 200aab8:	103fe61e 	bne	r2,zero,200aa54 <__sfvwrite_r+0xa4>
 200aabc:	00011c06 	br	200af30 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200aac0:	8080030b 	ldhu	r2,12(r16)
 200aac4:	10bfffcc 	andi	r2,r2,65535
 200aac8:	1080004c 	andi	r2,r2,1
 200aacc:	1000b51e 	bne	r2,zero,200ada4 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200aad0:	00000306 	br	200aae0 <__sfvwrite_r+0x130>
 200aad4:	a4c00017 	ldw	r19,0(r20)
 200aad8:	a4800117 	ldw	r18,4(r20)
 200aadc:	a5000204 	addi	r20,r20,8
 200aae0:	903ffc26 	beq	r18,zero,200aad4 <__sfvwrite_r+0x124>
	  w = fp->_w;
 200aae4:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200aae8:	8080030b 	ldhu	r2,12(r16)
 200aaec:	10bfffcc 	andi	r2,r2,65535
 200aaf0:	1080800c 	andi	r2,r2,512
 200aaf4:	10006b26 	beq	r2,zero,200aca4 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200aaf8:	8805883a 	mov	r2,r17
 200aafc:	90805736 	bltu	r18,r2,200ac5c <__sfvwrite_r+0x2ac>
 200ab00:	8080030b 	ldhu	r2,12(r16)
 200ab04:	10bfffcc 	andi	r2,r2,65535
 200ab08:	1081200c 	andi	r2,r2,1152
 200ab0c:	10005326 	beq	r2,zero,200ac5c <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200ab10:	80800017 	ldw	r2,0(r16)
 200ab14:	1007883a 	mov	r3,r2
 200ab18:	80800417 	ldw	r2,16(r16)
 200ab1c:	1885c83a 	sub	r2,r3,r2
 200ab20:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200ab24:	80c00517 	ldw	r3,20(r16)
 200ab28:	1805883a 	mov	r2,r3
 200ab2c:	1085883a 	add	r2,r2,r2
 200ab30:	10c5883a 	add	r2,r2,r3
 200ab34:	1006d7fa 	srli	r3,r2,31
 200ab38:	1885883a 	add	r2,r3,r2
 200ab3c:	1005d07a 	srai	r2,r2,1
 200ab40:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200ab44:	e0bff617 	ldw	r2,-40(fp)
 200ab48:	1485883a 	add	r2,r2,r18
 200ab4c:	10800044 	addi	r2,r2,1
 200ab50:	e0fff517 	ldw	r3,-44(fp)
 200ab54:	1880042e 	bgeu	r3,r2,200ab68 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200ab58:	e0bff617 	ldw	r2,-40(fp)
 200ab5c:	1485883a 	add	r2,r2,r18
 200ab60:	10800044 	addi	r2,r2,1
 200ab64:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200ab68:	8080030b 	ldhu	r2,12(r16)
 200ab6c:	10bfffcc 	andi	r2,r2,65535
 200ab70:	1081000c 	andi	r2,r2,1024
 200ab74:	10001726 	beq	r2,zero,200abd4 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200ab78:	e0bff517 	ldw	r2,-44(fp)
 200ab7c:	100b883a 	mov	r5,r2
 200ab80:	e13ff817 	ldw	r4,-32(fp)
 200ab84:	200b8c40 	call	200b8c4 <_malloc_r>
 200ab88:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200ab8c:	e0bff417 	ldw	r2,-48(fp)
 200ab90:	1000041e 	bne	r2,zero,200aba4 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200ab94:	e0bff817 	ldw	r2,-32(fp)
 200ab98:	00c00304 	movi	r3,12
 200ab9c:	10c00015 	stw	r3,0(r2)
			  goto err;
 200aba0:	0000ea06 	br	200af4c <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200aba4:	80800417 	ldw	r2,16(r16)
 200aba8:	e0fff617 	ldw	r3,-40(fp)
 200abac:	180d883a 	mov	r6,r3
 200abb0:	100b883a 	mov	r5,r2
 200abb4:	e13ff417 	ldw	r4,-48(fp)
 200abb8:	2004c5c0 	call	2004c5c <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200abbc:	80c0030b 	ldhu	r3,12(r16)
 200abc0:	00bedfc4 	movi	r2,-1153
 200abc4:	1884703a 	and	r2,r3,r2
 200abc8:	10802014 	ori	r2,r2,128
 200abcc:	8080030d 	sth	r2,12(r16)
 200abd0:	00001506 	br	200ac28 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200abd4:	80800417 	ldw	r2,16(r16)
 200abd8:	e0fff517 	ldw	r3,-44(fp)
 200abdc:	180d883a 	mov	r6,r3
 200abe0:	100b883a 	mov	r5,r2
 200abe4:	e13ff817 	ldw	r4,-32(fp)
 200abe8:	200e27c0 	call	200e27c <_realloc_r>
 200abec:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200abf0:	e0bff417 	ldw	r2,-48(fp)
 200abf4:	10000c1e 	bne	r2,zero,200ac28 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200abf8:	80800417 	ldw	r2,16(r16)
 200abfc:	100b883a 	mov	r5,r2
 200ac00:	e13ff817 	ldw	r4,-32(fp)
 200ac04:	200a2840 	call	200a284 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200ac08:	80c0030b 	ldhu	r3,12(r16)
 200ac0c:	00bfdfc4 	movi	r2,-129
 200ac10:	1884703a 	and	r2,r3,r2
 200ac14:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200ac18:	e0bff817 	ldw	r2,-32(fp)
 200ac1c:	00c00304 	movi	r3,12
 200ac20:	10c00015 	stw	r3,0(r2)
			  goto err;
 200ac24:	0000c906 	br	200af4c <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200ac28:	e0bff417 	ldw	r2,-48(fp)
 200ac2c:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200ac30:	e0bff617 	ldw	r2,-40(fp)
 200ac34:	e0fff417 	ldw	r3,-48(fp)
 200ac38:	1885883a 	add	r2,r3,r2
 200ac3c:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200ac40:	e0bff517 	ldw	r2,-44(fp)
 200ac44:	80800515 	stw	r2,20(r16)
		  w = len;
 200ac48:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200ac4c:	e0fff517 	ldw	r3,-44(fp)
 200ac50:	e0bff617 	ldw	r2,-40(fp)
 200ac54:	1885c83a 	sub	r2,r3,r2
 200ac58:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200ac5c:	8805883a 	mov	r2,r17
 200ac60:	9080012e 	bgeu	r18,r2,200ac68 <__sfvwrite_r+0x2b8>
		w = len;
 200ac64:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200ac68:	80800017 	ldw	r2,0(r16)
 200ac6c:	8807883a 	mov	r3,r17
 200ac70:	180d883a 	mov	r6,r3
 200ac74:	980b883a 	mov	r5,r19
 200ac78:	1009883a 	mov	r4,r2
 200ac7c:	200c5fc0 	call	200c5fc <memmove>
	      fp->_w -= w;
 200ac80:	80800217 	ldw	r2,8(r16)
 200ac84:	1445c83a 	sub	r2,r2,r17
 200ac88:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200ac8c:	80800017 	ldw	r2,0(r16)
 200ac90:	8807883a 	mov	r3,r17
 200ac94:	10c5883a 	add	r2,r2,r3
 200ac98:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200ac9c:	9023883a 	mov	r17,r18
 200aca0:	00003506 	br	200ad78 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200aca4:	80800017 	ldw	r2,0(r16)
 200aca8:	80c00417 	ldw	r3,16(r16)
 200acac:	18800236 	bltu	r3,r2,200acb8 <__sfvwrite_r+0x308>
 200acb0:	80800517 	ldw	r2,20(r16)
 200acb4:	9080182e 	bgeu	r18,r2,200ad18 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200acb8:	8805883a 	mov	r2,r17
 200acbc:	9080012e 	bgeu	r18,r2,200acc4 <__sfvwrite_r+0x314>
 200acc0:	9005883a 	mov	r2,r18
 200acc4:	1023883a 	mov	r17,r2
	      COPY (w);
 200acc8:	80800017 	ldw	r2,0(r16)
 200accc:	8807883a 	mov	r3,r17
 200acd0:	180d883a 	mov	r6,r3
 200acd4:	980b883a 	mov	r5,r19
 200acd8:	1009883a 	mov	r4,r2
 200acdc:	200c5fc0 	call	200c5fc <memmove>
	      fp->_w -= w;
 200ace0:	80800217 	ldw	r2,8(r16)
 200ace4:	1445c83a 	sub	r2,r2,r17
 200ace8:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200acec:	80800017 	ldw	r2,0(r16)
 200acf0:	8807883a 	mov	r3,r17
 200acf4:	10c5883a 	add	r2,r2,r3
 200acf8:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200acfc:	80800217 	ldw	r2,8(r16)
 200ad00:	10001c1e 	bne	r2,zero,200ad74 <__sfvwrite_r+0x3c4>
 200ad04:	800b883a 	mov	r5,r16
 200ad08:	e13ff817 	ldw	r4,-32(fp)
 200ad0c:	2009be40 	call	2009be4 <_fflush_r>
 200ad10:	10001826 	beq	r2,zero,200ad74 <__sfvwrite_r+0x3c4>
		goto err;
 200ad14:	00008d06 	br	200af4c <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200ad18:	9005883a 	mov	r2,r18
 200ad1c:	00e00034 	movhi	r3,32768
 200ad20:	10c00236 	bltu	r2,r3,200ad2c <__sfvwrite_r+0x37c>
 200ad24:	00a00034 	movhi	r2,32768
 200ad28:	10bfffc4 	addi	r2,r2,-1
 200ad2c:	1007883a 	mov	r3,r2
 200ad30:	80800517 	ldw	r2,20(r16)
 200ad34:	100b883a 	mov	r5,r2
 200ad38:	1809883a 	mov	r4,r3
 200ad3c:	2004aa80 	call	2004aa8 <__divsi3>
 200ad40:	1007883a 	mov	r3,r2
 200ad44:	80800517 	ldw	r2,20(r16)
 200ad48:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200ad4c:	80800917 	ldw	r2,36(r16)
 200ad50:	80c00717 	ldw	r3,28(r16)
 200ad54:	880f883a 	mov	r7,r17
 200ad58:	980d883a 	mov	r6,r19
 200ad5c:	180b883a 	mov	r5,r3
 200ad60:	e13ff817 	ldw	r4,-32(fp)
 200ad64:	103ee83a 	callr	r2
 200ad68:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200ad6c:	0440740e 	bge	zero,r17,200af40 <__sfvwrite_r+0x590>
 200ad70:	00000106 	br	200ad78 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200ad74:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200ad78:	8805883a 	mov	r2,r17
 200ad7c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200ad80:	8805883a 	mov	r2,r17
 200ad84:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200ad88:	a8800217 	ldw	r2,8(r21)
 200ad8c:	8807883a 	mov	r3,r17
 200ad90:	10c5c83a 	sub	r2,r2,r3
 200ad94:	a8800215 	stw	r2,8(r21)
 200ad98:	a8800217 	ldw	r2,8(r21)
 200ad9c:	103f501e 	bne	r2,zero,200aae0 <__sfvwrite_r+0x130>
 200ada0:	00006306 	br	200af30 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200ada4:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200ada8:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200adac:	00000406 	br	200adc0 <__sfvwrite_r+0x410>
 200adb0:	e03ff215 	stw	zero,-56(fp)
 200adb4:	a4c00017 	ldw	r19,0(r20)
 200adb8:	a4800117 	ldw	r18,4(r20)
 200adbc:	a5000204 	addi	r20,r20,8
 200adc0:	903ffb26 	beq	r18,zero,200adb0 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200adc4:	e0bff217 	ldw	r2,-56(fp)
 200adc8:	1000111e 	bne	r2,zero,200ae10 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200adcc:	900d883a 	mov	r6,r18
 200add0:	01400284 	movi	r5,10
 200add4:	9809883a 	mov	r4,r19
 200add8:	200c4400 	call	200c440 <memchr>
 200addc:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200ade0:	e0bff717 	ldw	r2,-36(fp)
 200ade4:	10000626 	beq	r2,zero,200ae00 <__sfvwrite_r+0x450>
 200ade8:	e0bff717 	ldw	r2,-36(fp)
 200adec:	10800044 	addi	r2,r2,1
 200adf0:	1007883a 	mov	r3,r2
 200adf4:	9805883a 	mov	r2,r19
 200adf8:	1885c83a 	sub	r2,r3,r2
 200adfc:	00000106 	br	200ae04 <__sfvwrite_r+0x454>
 200ae00:	90800044 	addi	r2,r18,1
 200ae04:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200ae08:	00800044 	movi	r2,1
 200ae0c:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200ae10:	e0bff317 	ldw	r2,-52(fp)
 200ae14:	9080012e 	bgeu	r18,r2,200ae1c <__sfvwrite_r+0x46c>
 200ae18:	9005883a 	mov	r2,r18
 200ae1c:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200ae20:	80c00217 	ldw	r3,8(r16)
 200ae24:	80800517 	ldw	r2,20(r16)
 200ae28:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200ae2c:	80800017 	ldw	r2,0(r16)
 200ae30:	80c00417 	ldw	r3,16(r16)
 200ae34:	1880102e 	bgeu	r3,r2,200ae78 <__sfvwrite_r+0x4c8>
 200ae38:	8d800f0e 	bge	r17,r22,200ae78 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200ae3c:	80800017 	ldw	r2,0(r16)
 200ae40:	8807883a 	mov	r3,r17
 200ae44:	180d883a 	mov	r6,r3
 200ae48:	980b883a 	mov	r5,r19
 200ae4c:	1009883a 	mov	r4,r2
 200ae50:	200c5fc0 	call	200c5fc <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200ae54:	80800017 	ldw	r2,0(r16)
 200ae58:	8807883a 	mov	r3,r17
 200ae5c:	10c5883a 	add	r2,r2,r3
 200ae60:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200ae64:	800b883a 	mov	r5,r16
 200ae68:	e13ff817 	ldw	r4,-32(fp)
 200ae6c:	2009be40 	call	2009be4 <_fflush_r>
 200ae70:	10001b26 	beq	r2,zero,200aee0 <__sfvwrite_r+0x530>
		goto err;
 200ae74:	00003506 	br	200af4c <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200ae78:	84400517 	ldw	r17,20(r16)
 200ae7c:	b4400a16 	blt	r22,r17,200aea8 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200ae80:	80800917 	ldw	r2,36(r16)
 200ae84:	80c00717 	ldw	r3,28(r16)
 200ae88:	880f883a 	mov	r7,r17
 200ae8c:	980d883a 	mov	r6,r19
 200ae90:	180b883a 	mov	r5,r3
 200ae94:	e13ff817 	ldw	r4,-32(fp)
 200ae98:	103ee83a 	callr	r2
 200ae9c:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200aea0:	04400f16 	blt	zero,r17,200aee0 <__sfvwrite_r+0x530>
		goto err;
 200aea4:	00002906 	br	200af4c <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200aea8:	b023883a 	mov	r17,r22
	      COPY (w);
 200aeac:	80800017 	ldw	r2,0(r16)
 200aeb0:	8807883a 	mov	r3,r17
 200aeb4:	180d883a 	mov	r6,r3
 200aeb8:	980b883a 	mov	r5,r19
 200aebc:	1009883a 	mov	r4,r2
 200aec0:	200c5fc0 	call	200c5fc <memmove>
	      fp->_w -= w;
 200aec4:	80800217 	ldw	r2,8(r16)
 200aec8:	1445c83a 	sub	r2,r2,r17
 200aecc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200aed0:	80800017 	ldw	r2,0(r16)
 200aed4:	8807883a 	mov	r3,r17
 200aed8:	10c5883a 	add	r2,r2,r3
 200aedc:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200aee0:	e0bff317 	ldw	r2,-52(fp)
 200aee4:	1445c83a 	sub	r2,r2,r17
 200aee8:	e0bff315 	stw	r2,-52(fp)
 200aeec:	e0bff317 	ldw	r2,-52(fp)
 200aef0:	1000051e 	bne	r2,zero,200af08 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200aef4:	800b883a 	mov	r5,r16
 200aef8:	e13ff817 	ldw	r4,-32(fp)
 200aefc:	2009be40 	call	2009be4 <_fflush_r>
 200af00:	1000111e 	bne	r2,zero,200af48 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200af04:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200af08:	8805883a 	mov	r2,r17
 200af0c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200af10:	8805883a 	mov	r2,r17
 200af14:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200af18:	a8800217 	ldw	r2,8(r21)
 200af1c:	8807883a 	mov	r3,r17
 200af20:	10c5c83a 	sub	r2,r2,r3
 200af24:	a8800215 	stw	r2,8(r21)
 200af28:	a8800217 	ldw	r2,8(r21)
 200af2c:	103fa41e 	bne	r2,zero,200adc0 <__sfvwrite_r+0x410>
    }
  return 0;
 200af30:	0005883a 	mov	r2,zero
 200af34:	00000906 	br	200af5c <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200af38:	0001883a 	nop
 200af3c:	00000306 	br	200af4c <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200af40:	0001883a 	nop
 200af44:	00000106 	br	200af4c <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200af48:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200af4c:	8080030b 	ldhu	r2,12(r16)
 200af50:	10801014 	ori	r2,r2,64
 200af54:	8080030d 	sth	r2,12(r16)
  return EOF;
 200af58:	00bfffc4 	movi	r2,-1
}
 200af5c:	e6fff904 	addi	sp,fp,-28
 200af60:	dfc00817 	ldw	ra,32(sp)
 200af64:	df000717 	ldw	fp,28(sp)
 200af68:	dd800617 	ldw	r22,24(sp)
 200af6c:	dd400517 	ldw	r21,20(sp)
 200af70:	dd000417 	ldw	r20,16(sp)
 200af74:	dcc00317 	ldw	r19,12(sp)
 200af78:	dc800217 	ldw	r18,8(sp)
 200af7c:	dc400117 	ldw	r17,4(sp)
 200af80:	dc000017 	ldw	r16,0(sp)
 200af84:	dec00904 	addi	sp,sp,36
 200af88:	f800283a 	ret

0200af8c <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200af8c:	defff804 	addi	sp,sp,-32
 200af90:	dfc00715 	stw	ra,28(sp)
 200af94:	df000615 	stw	fp,24(sp)
 200af98:	dd000515 	stw	r20,20(sp)
 200af9c:	dcc00415 	stw	r19,16(sp)
 200afa0:	dc800315 	stw	r18,12(sp)
 200afa4:	dc400215 	stw	r17,8(sp)
 200afa8:	dc000115 	stw	r16,4(sp)
 200afac:	df000604 	addi	fp,sp,24
 200afb0:	e13ffa15 	stw	r4,-24(fp)
 200afb4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200afb8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200afbc:	e0bffa17 	ldw	r2,-24(fp)
 200afc0:	1440b804 	addi	r17,r2,736
 200afc4:	00001b06 	br	200b034 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200afc8:	8c000217 	ldw	r16,8(r17)
 200afcc:	8c800117 	ldw	r18,4(r17)
 200afd0:	00001506 	br	200b028 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200afd4:	8080030b 	ldhu	r2,12(r16)
 200afd8:	10bfffcc 	andi	r2,r2,65535
 200afdc:	10a0001c 	xori	r2,r2,32768
 200afe0:	10a00004 	addi	r2,r2,-32768
 200afe4:	10000f26 	beq	r2,zero,200b024 <_fwalk+0x98>
 200afe8:	8080030b 	ldhu	r2,12(r16)
 200afec:	10bfffcc 	andi	r2,r2,65535
 200aff0:	10a0001c 	xori	r2,r2,32768
 200aff4:	10a00004 	addi	r2,r2,-32768
 200aff8:	10800060 	cmpeqi	r2,r2,1
 200affc:	1000091e 	bne	r2,zero,200b024 <_fwalk+0x98>
 200b000:	8080038b 	ldhu	r2,14(r16)
 200b004:	10bfffcc 	andi	r2,r2,65535
 200b008:	10a0001c 	xori	r2,r2,32768
 200b00c:	10a00004 	addi	r2,r2,-32768
 200b010:	10bfffe0 	cmpeqi	r2,r2,-1
 200b014:	1000031e 	bne	r2,zero,200b024 <_fwalk+0x98>
	ret |= (*function) (fp);
 200b018:	8009883a 	mov	r4,r16
 200b01c:	a03ee83a 	callr	r20
 200b020:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200b024:	84001a04 	addi	r16,r16,104
 200b028:	94bfffc4 	addi	r18,r18,-1
 200b02c:	903fe90e 	bge	r18,zero,200afd4 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200b030:	8c400017 	ldw	r17,0(r17)
 200b034:	883fe41e 	bne	r17,zero,200afc8 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200b038:	9805883a 	mov	r2,r19
}
 200b03c:	e6fffb04 	addi	sp,fp,-20
 200b040:	dfc00617 	ldw	ra,24(sp)
 200b044:	df000517 	ldw	fp,20(sp)
 200b048:	dd000417 	ldw	r20,16(sp)
 200b04c:	dcc00317 	ldw	r19,12(sp)
 200b050:	dc800217 	ldw	r18,8(sp)
 200b054:	dc400117 	ldw	r17,4(sp)
 200b058:	dc000017 	ldw	r16,0(sp)
 200b05c:	dec00704 	addi	sp,sp,28
 200b060:	f800283a 	ret

0200b064 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200b064:	defff804 	addi	sp,sp,-32
 200b068:	dfc00715 	stw	ra,28(sp)
 200b06c:	df000615 	stw	fp,24(sp)
 200b070:	dd000515 	stw	r20,20(sp)
 200b074:	dcc00415 	stw	r19,16(sp)
 200b078:	dc800315 	stw	r18,12(sp)
 200b07c:	dc400215 	stw	r17,8(sp)
 200b080:	dc000115 	stw	r16,4(sp)
 200b084:	df000604 	addi	fp,sp,24
 200b088:	e13ffa15 	stw	r4,-24(fp)
 200b08c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200b090:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200b094:	e0bffa17 	ldw	r2,-24(fp)
 200b098:	1440b804 	addi	r17,r2,736
 200b09c:	00001c06 	br	200b110 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200b0a0:	8c000217 	ldw	r16,8(r17)
 200b0a4:	8c800117 	ldw	r18,4(r17)
 200b0a8:	00001606 	br	200b104 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200b0ac:	8080030b 	ldhu	r2,12(r16)
 200b0b0:	10bfffcc 	andi	r2,r2,65535
 200b0b4:	10a0001c 	xori	r2,r2,32768
 200b0b8:	10a00004 	addi	r2,r2,-32768
 200b0bc:	10001026 	beq	r2,zero,200b100 <_fwalk_reent+0x9c>
 200b0c0:	8080030b 	ldhu	r2,12(r16)
 200b0c4:	10bfffcc 	andi	r2,r2,65535
 200b0c8:	10a0001c 	xori	r2,r2,32768
 200b0cc:	10a00004 	addi	r2,r2,-32768
 200b0d0:	10800060 	cmpeqi	r2,r2,1
 200b0d4:	10000a1e 	bne	r2,zero,200b100 <_fwalk_reent+0x9c>
 200b0d8:	8080038b 	ldhu	r2,14(r16)
 200b0dc:	10bfffcc 	andi	r2,r2,65535
 200b0e0:	10a0001c 	xori	r2,r2,32768
 200b0e4:	10a00004 	addi	r2,r2,-32768
 200b0e8:	10bfffe0 	cmpeqi	r2,r2,-1
 200b0ec:	1000041e 	bne	r2,zero,200b100 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200b0f0:	800b883a 	mov	r5,r16
 200b0f4:	e13ffa17 	ldw	r4,-24(fp)
 200b0f8:	a03ee83a 	callr	r20
 200b0fc:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200b100:	84001a04 	addi	r16,r16,104
 200b104:	94bfffc4 	addi	r18,r18,-1
 200b108:	903fe80e 	bge	r18,zero,200b0ac <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200b10c:	8c400017 	ldw	r17,0(r17)
 200b110:	883fe31e 	bne	r17,zero,200b0a0 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200b114:	9805883a 	mov	r2,r19
}
 200b118:	e6fffb04 	addi	sp,fp,-20
 200b11c:	dfc00617 	ldw	ra,24(sp)
 200b120:	df000517 	ldw	fp,20(sp)
 200b124:	dd000417 	ldw	r20,16(sp)
 200b128:	dcc00317 	ldw	r19,12(sp)
 200b12c:	dc800217 	ldw	r18,8(sp)
 200b130:	dc400117 	ldw	r17,4(sp)
 200b134:	dc000017 	ldw	r16,0(sp)
 200b138:	dec00704 	addi	sp,sp,28
 200b13c:	f800283a 	ret

0200b140 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200b140:	defffb04 	addi	sp,sp,-20
 200b144:	dfc00415 	stw	ra,16(sp)
 200b148:	df000315 	stw	fp,12(sp)
 200b14c:	df000304 	addi	fp,sp,12
 200b150:	e13ffd15 	stw	r4,-12(fp)
 200b154:	e17ffe15 	stw	r5,-8(fp)
 200b158:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200b15c:	e0bfff17 	ldw	r2,-4(fp)
 200b160:	10001126 	beq	r2,zero,200b1a8 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200b164:	014080b4 	movhi	r5,514
 200b168:	297ae704 	addi	r5,r5,-5220
 200b16c:	e13fff17 	ldw	r4,-4(fp)
 200b170:	200f1400 	call	200f140 <strcmp>
 200b174:	10000c26 	beq	r2,zero,200b1a8 <_setlocale_r+0x68>
 200b178:	014080b4 	movhi	r5,514
 200b17c:	297ae904 	addi	r5,r5,-5212
 200b180:	e13fff17 	ldw	r4,-4(fp)
 200b184:	200f1400 	call	200f140 <strcmp>
 200b188:	10000726 	beq	r2,zero,200b1a8 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200b18c:	014080b4 	movhi	r5,514
 200b190:	297ae604 	addi	r5,r5,-5224
 200b194:	e13fff17 	ldw	r4,-4(fp)
 200b198:	200f1400 	call	200f140 <strcmp>
 200b19c:	10000226 	beq	r2,zero,200b1a8 <_setlocale_r+0x68>
        return NULL;
 200b1a0:	0005883a 	mov	r2,zero
 200b1a4:	00000206 	br	200b1b0 <_setlocale_r+0x70>
    }
  return "C";
 200b1a8:	008080b4 	movhi	r2,514
 200b1ac:	10bae904 	addi	r2,r2,-5212
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200b1b0:	e037883a 	mov	sp,fp
 200b1b4:	dfc00117 	ldw	ra,4(sp)
 200b1b8:	df000017 	ldw	fp,0(sp)
 200b1bc:	dec00204 	addi	sp,sp,8
 200b1c0:	f800283a 	ret

0200b1c4 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200b1c4:	deffff04 	addi	sp,sp,-4
 200b1c8:	df000015 	stw	fp,0(sp)
 200b1cc:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200b1d0:	008080b4 	movhi	r2,514
 200b1d4:	10bcc504 	addi	r2,r2,-3308
#endif
}
 200b1d8:	e037883a 	mov	sp,fp
 200b1dc:	df000017 	ldw	fp,0(sp)
 200b1e0:	dec00104 	addi	sp,sp,4
 200b1e4:	f800283a 	ret

0200b1e8 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200b1e8:	deffff04 	addi	sp,sp,-4
 200b1ec:	df000015 	stw	fp,0(sp)
 200b1f0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200b1f4:	d0a00217 	ldw	r2,-32760(gp)
#endif
}
 200b1f8:	e037883a 	mov	sp,fp
 200b1fc:	df000017 	ldw	fp,0(sp)
 200b200:	dec00104 	addi	sp,sp,4
 200b204:	f800283a 	ret

0200b208 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200b208:	deffff04 	addi	sp,sp,-4
 200b20c:	df000015 	stw	fp,0(sp)
 200b210:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200b214:	008080b4 	movhi	r2,514
 200b218:	10bccd04 	addi	r2,r2,-3276
#endif
}
 200b21c:	e037883a 	mov	sp,fp
 200b220:	df000017 	ldw	fp,0(sp)
 200b224:	dec00104 	addi	sp,sp,4
 200b228:	f800283a 	ret

0200b22c <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200b22c:	deffff04 	addi	sp,sp,-4
 200b230:	df000015 	stw	fp,0(sp)
 200b234:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200b238:	d0a72a17 	ldw	r2,-25432(gp)
}
 200b23c:	e037883a 	mov	sp,fp
 200b240:	df000017 	ldw	fp,0(sp)
 200b244:	dec00104 	addi	sp,sp,4
 200b248:	f800283a 	ret

0200b24c <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200b24c:	defffe04 	addi	sp,sp,-8
 200b250:	df000115 	stw	fp,4(sp)
 200b254:	df000104 	addi	fp,sp,4
 200b258:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200b25c:	008080b4 	movhi	r2,514
 200b260:	10bcb704 	addi	r2,r2,-3364
}
 200b264:	e037883a 	mov	sp,fp
 200b268:	df000017 	ldw	fp,0(sp)
 200b26c:	dec00104 	addi	sp,sp,4
 200b270:	f800283a 	ret

0200b274 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200b274:	defffc04 	addi	sp,sp,-16
 200b278:	dfc00315 	stw	ra,12(sp)
 200b27c:	df000215 	stw	fp,8(sp)
 200b280:	df000204 	addi	fp,sp,8
 200b284:	e13ffe15 	stw	r4,-8(fp)
 200b288:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200b28c:	d0a00017 	ldw	r2,-32768(gp)
 200b290:	e1bfff17 	ldw	r6,-4(fp)
 200b294:	e17ffe17 	ldw	r5,-8(fp)
 200b298:	1009883a 	mov	r4,r2
 200b29c:	200b1400 	call	200b140 <_setlocale_r>
}
 200b2a0:	e037883a 	mov	sp,fp
 200b2a4:	dfc00117 	ldw	ra,4(sp)
 200b2a8:	df000017 	ldw	fp,0(sp)
 200b2ac:	dec00204 	addi	sp,sp,8
 200b2b0:	f800283a 	ret

0200b2b4 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200b2b4:	defffe04 	addi	sp,sp,-8
 200b2b8:	dfc00115 	stw	ra,4(sp)
 200b2bc:	df000015 	stw	fp,0(sp)
 200b2c0:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200b2c4:	d0a00017 	ldw	r2,-32768(gp)
 200b2c8:	1009883a 	mov	r4,r2
 200b2cc:	200b24c0 	call	200b24c <_localeconv_r>
}
 200b2d0:	e037883a 	mov	sp,fp
 200b2d4:	dfc00117 	ldw	ra,4(sp)
 200b2d8:	df000017 	ldw	fp,0(sp)
 200b2dc:	dec00204 	addi	sp,sp,8
 200b2e0:	f800283a 	ret

0200b2e4 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200b2e4:	deffea04 	addi	sp,sp,-88
 200b2e8:	dfc01515 	stw	ra,84(sp)
 200b2ec:	df001415 	stw	fp,80(sp)
 200b2f0:	dcc01315 	stw	r19,76(sp)
 200b2f4:	dc801215 	stw	r18,72(sp)
 200b2f8:	dc401115 	stw	r17,68(sp)
 200b2fc:	dc001015 	stw	r16,64(sp)
 200b300:	df001404 	addi	fp,sp,80
 200b304:	e13ffb15 	stw	r4,-20(fp)
 200b308:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200b30c:	8080030b 	ldhu	r2,12(r16)
 200b310:	10bfffcc 	andi	r2,r2,65535
 200b314:	1080008c 	andi	r2,r2,2
 200b318:	10000726 	beq	r2,zero,200b338 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200b31c:	808010c4 	addi	r2,r16,67
 200b320:	80800015 	stw	r2,0(r16)
 200b324:	80800017 	ldw	r2,0(r16)
 200b328:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200b32c:	00800044 	movi	r2,1
 200b330:	80800515 	stw	r2,20(r16)
 200b334:	00006d06 	br	200b4ec <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200b338:	8080038b 	ldhu	r2,14(r16)
 200b33c:	10bfffcc 	andi	r2,r2,65535
 200b340:	10a0001c 	xori	r2,r2,32768
 200b344:	10a00004 	addi	r2,r2,-32768
 200b348:	10000916 	blt	r2,zero,200b370 <__smakebuf_r+0x8c>
 200b34c:	8080038b 	ldhu	r2,14(r16)
 200b350:	10bfffcc 	andi	r2,r2,65535
 200b354:	10a0001c 	xori	r2,r2,32768
 200b358:	10a00004 	addi	r2,r2,-32768
 200b35c:	e1bfec04 	addi	r6,fp,-80
 200b360:	100b883a 	mov	r5,r2
 200b364:	e13ffb17 	ldw	r4,-20(fp)
 200b368:	2010e3c0 	call	2010e3c <_fstat_r>
 200b36c:	10000c0e 	bge	r2,zero,200b3a0 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200b370:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200b374:	8080030b 	ldhu	r2,12(r16)
 200b378:	10bfffcc 	andi	r2,r2,65535
 200b37c:	1080200c 	andi	r2,r2,128
 200b380:	10000226 	beq	r2,zero,200b38c <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200b384:	04401004 	movi	r17,64
 200b388:	00000106 	br	200b390 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200b38c:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200b390:	8080030b 	ldhu	r2,12(r16)
 200b394:	10820014 	ori	r2,r2,2048
 200b398:	8080030d 	sth	r2,12(r16)
 200b39c:	00001606 	br	200b3f8 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200b3a0:	e0bfed17 	ldw	r2,-76(fp)
 200b3a4:	10bc000c 	andi	r2,r2,61440
 200b3a8:	10880020 	cmpeqi	r2,r2,8192
 200b3ac:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200b3b0:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200b3b4:	e0bfed17 	ldw	r2,-76(fp)
 200b3b8:	10fc000c 	andi	r3,r2,61440
 200b3bc:	00a00014 	movui	r2,32768
 200b3c0:	18800a1e 	bne	r3,r2,200b3ec <__smakebuf_r+0x108>
 200b3c4:	80c00a17 	ldw	r3,40(r16)
 200b3c8:	00808074 	movhi	r2,513
 200b3cc:	10bc1304 	addi	r2,r2,-4020
 200b3d0:	1880061e 	bne	r3,r2,200b3ec <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200b3d4:	8080030b 	ldhu	r2,12(r16)
 200b3d8:	10810014 	ori	r2,r2,1024
 200b3dc:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200b3e0:	00810004 	movi	r2,1024
 200b3e4:	80801315 	stw	r2,76(r16)
 200b3e8:	00000306 	br	200b3f8 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200b3ec:	8080030b 	ldhu	r2,12(r16)
 200b3f0:	10820014 	ori	r2,r2,2048
 200b3f4:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200b3f8:	90001126 	beq	r18,zero,200b440 <__smakebuf_r+0x15c>
 200b3fc:	8080038b 	ldhu	r2,14(r16)
 200b400:	10bfffcc 	andi	r2,r2,65535
 200b404:	10a0001c 	xori	r2,r2,32768
 200b408:	10a00004 	addi	r2,r2,-32768
 200b40c:	100b883a 	mov	r5,r2
 200b410:	e13ffb17 	ldw	r4,-20(fp)
 200b414:	2010ea40 	call	2010ea4 <_isatty_r>
 200b418:	10000926 	beq	r2,zero,200b440 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200b41c:	8080030b 	ldhu	r2,12(r16)
 200b420:	10800054 	ori	r2,r2,1
 200b424:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200b428:	808010c4 	addi	r2,r16,67
 200b42c:	80800015 	stw	r2,0(r16)
 200b430:	80800017 	ldw	r2,0(r16)
 200b434:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200b438:	00800044 	movi	r2,1
 200b43c:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200b440:	880b883a 	mov	r5,r17
 200b444:	e13ffb17 	ldw	r4,-20(fp)
 200b448:	200b8c40 	call	200b8c4 <_malloc_r>
 200b44c:	1027883a 	mov	r19,r2
 200b450:	98000e1e 	bne	r19,zero,200b48c <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200b454:	8080030b 	ldhu	r2,12(r16)
 200b458:	10bfffcc 	andi	r2,r2,65535
 200b45c:	1080800c 	andi	r2,r2,512
 200b460:	1000221e 	bne	r2,zero,200b4ec <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200b464:	8080030b 	ldhu	r2,12(r16)
 200b468:	10800094 	ori	r2,r2,2
 200b46c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200b470:	808010c4 	addi	r2,r16,67
 200b474:	80800015 	stw	r2,0(r16)
 200b478:	80800017 	ldw	r2,0(r16)
 200b47c:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200b480:	00800044 	movi	r2,1
 200b484:	80800515 	stw	r2,20(r16)
 200b488:	00001806 	br	200b4ec <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200b48c:	e0fffb17 	ldw	r3,-20(fp)
 200b490:	00808074 	movhi	r2,513
 200b494:	10a7fb04 	addi	r2,r2,-24596
 200b498:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200b49c:	8080030b 	ldhu	r2,12(r16)
 200b4a0:	10802014 	ori	r2,r2,128
 200b4a4:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200b4a8:	84c00015 	stw	r19,0(r16)
 200b4ac:	80800017 	ldw	r2,0(r16)
 200b4b0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200b4b4:	8805883a 	mov	r2,r17
 200b4b8:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200b4bc:	90000b26 	beq	r18,zero,200b4ec <__smakebuf_r+0x208>
 200b4c0:	8080038b 	ldhu	r2,14(r16)
 200b4c4:	10bfffcc 	andi	r2,r2,65535
 200b4c8:	10a0001c 	xori	r2,r2,32768
 200b4cc:	10a00004 	addi	r2,r2,-32768
 200b4d0:	100b883a 	mov	r5,r2
 200b4d4:	e13ffb17 	ldw	r4,-20(fp)
 200b4d8:	2010ea40 	call	2010ea4 <_isatty_r>
 200b4dc:	10000326 	beq	r2,zero,200b4ec <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200b4e0:	8080030b 	ldhu	r2,12(r16)
 200b4e4:	10800054 	ori	r2,r2,1
 200b4e8:	8080030d 	sth	r2,12(r16)
    }
}
 200b4ec:	e6fffc04 	addi	sp,fp,-16
 200b4f0:	dfc00517 	ldw	ra,20(sp)
 200b4f4:	df000417 	ldw	fp,16(sp)
 200b4f8:	dcc00317 	ldw	r19,12(sp)
 200b4fc:	dc800217 	ldw	r18,8(sp)
 200b500:	dc400117 	ldw	r17,4(sp)
 200b504:	dc000017 	ldw	r16,0(sp)
 200b508:	dec00604 	addi	sp,sp,24
 200b50c:	f800283a 	ret

0200b510 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200b510:	defff104 	addi	sp,sp,-60
 200b514:	dfc00e15 	stw	ra,56(sp)
 200b518:	df000d15 	stw	fp,52(sp)
 200b51c:	df000d04 	addi	fp,sp,52
 200b520:	e13ffe15 	stw	r4,-8(fp)
 200b524:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200b528:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200b52c:	008080b4 	movhi	r2,514
 200b530:	10bcd504 	addi	r2,r2,-3244
 200b534:	10800217 	ldw	r2,8(r2)
 200b538:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200b53c:	e0bff817 	ldw	r2,-32(fp)
 200b540:	10c00117 	ldw	r3,4(r2)
 200b544:	00bfff04 	movi	r2,-4
 200b548:	1884703a 	and	r2,r3,r2
 200b54c:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200b550:	e0fff817 	ldw	r3,-32(fp)
 200b554:	e0bff917 	ldw	r2,-28(fp)
 200b558:	1885883a 	add	r2,r3,r2
 200b55c:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200b560:	d0e72b17 	ldw	r3,-25428(gp)
 200b564:	e0bfff17 	ldw	r2,-4(fp)
 200b568:	1885883a 	add	r2,r3,r2
 200b56c:	10800404 	addi	r2,r2,16
 200b570:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200b574:	00840004 	movi	r2,4096
 200b578:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200b57c:	d0a00417 	ldw	r2,-32752(gp)
 200b580:	10bfffe0 	cmpeqi	r2,r2,-1
 200b584:	1000081e 	bne	r2,zero,200b5a8 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200b588:	e0fffb17 	ldw	r3,-20(fp)
 200b58c:	e0bff617 	ldw	r2,-40(fp)
 200b590:	1885883a 	add	r2,r3,r2
 200b594:	10ffffc4 	addi	r3,r2,-1
 200b598:	e0bffb17 	ldw	r2,-20(fp)
 200b59c:	0085c83a 	sub	r2,zero,r2
 200b5a0:	1884703a 	and	r2,r3,r2
 200b5a4:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200b5a8:	e0bff617 	ldw	r2,-40(fp)
 200b5ac:	100b883a 	mov	r5,r2
 200b5b0:	e13ffe17 	ldw	r4,-8(fp)
 200b5b4:	200ee6c0 	call	200ee6c <_sbrk_r>
 200b5b8:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200b5bc:	e0bff317 	ldw	r2,-52(fp)
 200b5c0:	10bfffe0 	cmpeqi	r2,r2,-1
 200b5c4:	1000b91e 	bne	r2,zero,200b8ac <malloc_extend_top+0x39c>
 200b5c8:	e0fff317 	ldw	r3,-52(fp)
 200b5cc:	e0bffa17 	ldw	r2,-24(fp)
 200b5d0:	1880042e 	bgeu	r3,r2,200b5e4 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200b5d4:	008080b4 	movhi	r2,514
 200b5d8:	10bcd504 	addi	r2,r2,-3244
 200b5dc:	e0fff817 	ldw	r3,-32(fp)
 200b5e0:	1880b21e 	bne	r3,r2,200b8ac <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200b5e4:	008080b4 	movhi	r2,514
 200b5e8:	1089ac04 	addi	r2,r2,9904
 200b5ec:	10800017 	ldw	r2,0(r2)
 200b5f0:	1007883a 	mov	r3,r2
 200b5f4:	e0bff617 	ldw	r2,-40(fp)
 200b5f8:	1885883a 	add	r2,r3,r2
 200b5fc:	1007883a 	mov	r3,r2
 200b600:	008080b4 	movhi	r2,514
 200b604:	1089ac04 	addi	r2,r2,9904
 200b608:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200b60c:	e0fff317 	ldw	r3,-52(fp)
 200b610:	e0bffa17 	ldw	r2,-24(fp)
 200b614:	1880101e 	bne	r3,r2,200b658 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200b618:	e0bffb17 	ldw	r2,-20(fp)
 200b61c:	10ffffc4 	addi	r3,r2,-1
 200b620:	e0bffa17 	ldw	r2,-24(fp)
 200b624:	1884703a 	and	r2,r3,r2
 200b628:	10000b1e 	bne	r2,zero,200b658 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200b62c:	e0fff617 	ldw	r3,-40(fp)
 200b630:	e0bff917 	ldw	r2,-28(fp)
 200b634:	1885883a 	add	r2,r3,r2
 200b638:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b63c:	008080b4 	movhi	r2,514
 200b640:	10bcd504 	addi	r2,r2,-3244
 200b644:	10800217 	ldw	r2,8(r2)
 200b648:	e0fffc17 	ldw	r3,-16(fp)
 200b64c:	18c00054 	ori	r3,r3,1
 200b650:	10c00115 	stw	r3,4(r2)
 200b654:	00008006 	br	200b858 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200b658:	d0a00417 	ldw	r2,-32752(gp)
 200b65c:	10bfffd8 	cmpnei	r2,r2,-1
 200b660:	1000031e 	bne	r2,zero,200b670 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200b664:	e0bff317 	ldw	r2,-52(fp)
 200b668:	d0a00415 	stw	r2,-32752(gp)
 200b66c:	00000a06 	br	200b698 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200b670:	008080b4 	movhi	r2,514
 200b674:	1089ac04 	addi	r2,r2,9904
 200b678:	10c00017 	ldw	r3,0(r2)
 200b67c:	e13ff317 	ldw	r4,-52(fp)
 200b680:	e0bffa17 	ldw	r2,-24(fp)
 200b684:	2085c83a 	sub	r2,r4,r2
 200b688:	1887883a 	add	r3,r3,r2
 200b68c:	008080b4 	movhi	r2,514
 200b690:	1089ac04 	addi	r2,r2,9904
 200b694:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200b698:	e0bff317 	ldw	r2,-52(fp)
 200b69c:	10800204 	addi	r2,r2,8
 200b6a0:	108001cc 	andi	r2,r2,7
 200b6a4:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200b6a8:	e0bffd17 	ldw	r2,-12(fp)
 200b6ac:	10000926 	beq	r2,zero,200b6d4 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200b6b0:	00c00204 	movi	r3,8
 200b6b4:	e0bffd17 	ldw	r2,-12(fp)
 200b6b8:	1885c83a 	sub	r2,r3,r2
 200b6bc:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200b6c0:	e0fff317 	ldw	r3,-52(fp)
 200b6c4:	e0bff417 	ldw	r2,-48(fp)
 200b6c8:	1885883a 	add	r2,r3,r2
 200b6cc:	e0bff315 	stw	r2,-52(fp)
 200b6d0:	00000106 	br	200b6d8 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200b6d4:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200b6d8:	e0fff317 	ldw	r3,-52(fp)
 200b6dc:	e0bff617 	ldw	r2,-40(fp)
 200b6e0:	1885883a 	add	r2,r3,r2
 200b6e4:	1007883a 	mov	r3,r2
 200b6e8:	e0bffb17 	ldw	r2,-20(fp)
 200b6ec:	10bfffc4 	addi	r2,r2,-1
 200b6f0:	1884703a 	and	r2,r3,r2
 200b6f4:	e0fffb17 	ldw	r3,-20(fp)
 200b6f8:	1885c83a 	sub	r2,r3,r2
 200b6fc:	e0fff417 	ldw	r3,-48(fp)
 200b700:	1885883a 	add	r2,r3,r2
 200b704:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200b708:	e0bff417 	ldw	r2,-48(fp)
 200b70c:	100b883a 	mov	r5,r2
 200b710:	e13ffe17 	ldw	r4,-8(fp)
 200b714:	200ee6c0 	call	200ee6c <_sbrk_r>
 200b718:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200b71c:	e0bff517 	ldw	r2,-44(fp)
 200b720:	10bfffd8 	cmpnei	r2,r2,-1
 200b724:	1000051e 	bne	r2,zero,200b73c <malloc_extend_top+0x22c>
      {
	correction = 0;
 200b728:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200b72c:	00800044 	movi	r2,1
 200b730:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200b734:	e0bff317 	ldw	r2,-52(fp)
 200b738:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200b73c:	008080b4 	movhi	r2,514
 200b740:	1089ac04 	addi	r2,r2,9904
 200b744:	10800017 	ldw	r2,0(r2)
 200b748:	1007883a 	mov	r3,r2
 200b74c:	e0bff417 	ldw	r2,-48(fp)
 200b750:	1885883a 	add	r2,r3,r2
 200b754:	1007883a 	mov	r3,r2
 200b758:	008080b4 	movhi	r2,514
 200b75c:	1089ac04 	addi	r2,r2,9904
 200b760:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200b764:	008080b4 	movhi	r2,514
 200b768:	10bcd504 	addi	r2,r2,-3244
 200b76c:	e0fff317 	ldw	r3,-52(fp)
 200b770:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200b774:	e0fff517 	ldw	r3,-44(fp)
 200b778:	e0bff317 	ldw	r2,-52(fp)
 200b77c:	1885c83a 	sub	r2,r3,r2
 200b780:	1007883a 	mov	r3,r2
 200b784:	e0bff417 	ldw	r2,-48(fp)
 200b788:	1885883a 	add	r2,r3,r2
 200b78c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b790:	008080b4 	movhi	r2,514
 200b794:	10bcd504 	addi	r2,r2,-3244
 200b798:	10800217 	ldw	r2,8(r2)
 200b79c:	e0fffc17 	ldw	r3,-16(fp)
 200b7a0:	18c00054 	ori	r3,r3,1
 200b7a4:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200b7a8:	008080b4 	movhi	r2,514
 200b7ac:	10bcd504 	addi	r2,r2,-3244
 200b7b0:	e0fff817 	ldw	r3,-32(fp)
 200b7b4:	18802826 	beq	r3,r2,200b858 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200b7b8:	e0bff917 	ldw	r2,-28(fp)
 200b7bc:	10800428 	cmpgeui	r2,r2,16
 200b7c0:	1000061e 	bne	r2,zero,200b7dc <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200b7c4:	008080b4 	movhi	r2,514
 200b7c8:	10bcd504 	addi	r2,r2,-3244
 200b7cc:	10800217 	ldw	r2,8(r2)
 200b7d0:	00c00044 	movi	r3,1
 200b7d4:	10c00115 	stw	r3,4(r2)
        return;
 200b7d8:	00003506 	br	200b8b0 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200b7dc:	e0bff917 	ldw	r2,-28(fp)
 200b7e0:	10fffd04 	addi	r3,r2,-12
 200b7e4:	00bffe04 	movi	r2,-8
 200b7e8:	1884703a 	and	r2,r3,r2
 200b7ec:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200b7f0:	e0bff817 	ldw	r2,-32(fp)
 200b7f4:	10800117 	ldw	r2,4(r2)
 200b7f8:	10c0004c 	andi	r3,r2,1
 200b7fc:	e0bff917 	ldw	r2,-28(fp)
 200b800:	1886b03a 	or	r3,r3,r2
 200b804:	e0bff817 	ldw	r2,-32(fp)
 200b808:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200b80c:	e0fff817 	ldw	r3,-32(fp)
 200b810:	e0bff917 	ldw	r2,-28(fp)
 200b814:	1885883a 	add	r2,r3,r2
 200b818:	00c00144 	movi	r3,5
 200b81c:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200b820:	e0bff917 	ldw	r2,-28(fp)
 200b824:	10800104 	addi	r2,r2,4
 200b828:	e0fff817 	ldw	r3,-32(fp)
 200b82c:	1885883a 	add	r2,r3,r2
 200b830:	00c00144 	movi	r3,5
 200b834:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200b838:	e0bff917 	ldw	r2,-28(fp)
 200b83c:	10800430 	cmpltui	r2,r2,16
 200b840:	1000051e 	bne	r2,zero,200b858 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200b844:	e0bff817 	ldw	r2,-32(fp)
 200b848:	10800204 	addi	r2,r2,8
 200b84c:	100b883a 	mov	r5,r2
 200b850:	e13ffe17 	ldw	r4,-8(fp)
 200b854:	200a2840 	call	200a284 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200b858:	008080b4 	movhi	r2,514
 200b85c:	1089ac04 	addi	r2,r2,9904
 200b860:	10800017 	ldw	r2,0(r2)
 200b864:	1007883a 	mov	r3,r2
 200b868:	d0a72c17 	ldw	r2,-25424(gp)
 200b86c:	10c0042e 	bgeu	r2,r3,200b880 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200b870:	008080b4 	movhi	r2,514
 200b874:	1089ac04 	addi	r2,r2,9904
 200b878:	10800017 	ldw	r2,0(r2)
 200b87c:	d0a72c15 	stw	r2,-25424(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200b880:	008080b4 	movhi	r2,514
 200b884:	1089ac04 	addi	r2,r2,9904
 200b888:	10800017 	ldw	r2,0(r2)
 200b88c:	1007883a 	mov	r3,r2
 200b890:	d0a72d17 	ldw	r2,-25420(gp)
 200b894:	10c0062e 	bgeu	r2,r3,200b8b0 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200b898:	008080b4 	movhi	r2,514
 200b89c:	1089ac04 	addi	r2,r2,9904
 200b8a0:	10800017 	ldw	r2,0(r2)
 200b8a4:	d0a72d15 	stw	r2,-25420(gp)
 200b8a8:	00000106 	br	200b8b0 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200b8ac:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200b8b0:	e037883a 	mov	sp,fp
 200b8b4:	dfc00117 	ldw	ra,4(sp)
 200b8b8:	df000017 	ldw	fp,0(sp)
 200b8bc:	dec00204 	addi	sp,sp,8
 200b8c0:	f800283a 	ret

0200b8c4 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200b8c4:	deffef04 	addi	sp,sp,-68
 200b8c8:	dfc01015 	stw	ra,64(sp)
 200b8cc:	df000f15 	stw	fp,60(sp)
 200b8d0:	df000f04 	addi	fp,sp,60
 200b8d4:	e13ffe15 	stw	r4,-8(fp)
 200b8d8:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200b8dc:	e0bfff17 	ldw	r2,-4(fp)
 200b8e0:	108002c4 	addi	r2,r2,11
 200b8e4:	108005f0 	cmpltui	r2,r2,23
 200b8e8:	1000051e 	bne	r2,zero,200b900 <_malloc_r+0x3c>
 200b8ec:	e0bfff17 	ldw	r2,-4(fp)
 200b8f0:	10c002c4 	addi	r3,r2,11
 200b8f4:	00bffe04 	movi	r2,-8
 200b8f8:	1884703a 	and	r2,r3,r2
 200b8fc:	00000106 	br	200b904 <_malloc_r+0x40>
 200b900:	00800404 	movi	r2,16
 200b904:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200b908:	e0bffa17 	ldw	r2,-24(fp)
 200b90c:	10000316 	blt	r2,zero,200b91c <_malloc_r+0x58>
 200b910:	e0fffa17 	ldw	r3,-24(fp)
 200b914:	e0bfff17 	ldw	r2,-4(fp)
 200b918:	1880052e 	bgeu	r3,r2,200b930 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200b91c:	e0bffe17 	ldw	r2,-8(fp)
 200b920:	00c00304 	movi	r3,12
 200b924:	10c00015 	stw	r3,0(r2)
    return 0;
 200b928:	0005883a 	mov	r2,zero
 200b92c:	0002bf06 	br	200c42c <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200b930:	e13ffe17 	ldw	r4,-8(fp)
 200b934:	2013d580 	call	2013d58 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200b938:	e0bffa17 	ldw	r2,-24(fp)
 200b93c:	10807e28 	cmpgeui	r2,r2,504
 200b940:	10003f1e 	bne	r2,zero,200ba40 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200b944:	e0bffa17 	ldw	r2,-24(fp)
 200b948:	1004d0fa 	srli	r2,r2,3
 200b94c:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200b950:	e0bff217 	ldw	r2,-56(fp)
 200b954:	10800044 	addi	r2,r2,1
 200b958:	1085883a 	add	r2,r2,r2
 200b95c:	1085883a 	add	r2,r2,r2
 200b960:	1087883a 	add	r3,r2,r2
 200b964:	008080b4 	movhi	r2,514
 200b968:	10bcd504 	addi	r2,r2,-3244
 200b96c:	1885883a 	add	r2,r3,r2
 200b970:	10bffe04 	addi	r2,r2,-8
 200b974:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200b978:	e0bff917 	ldw	r2,-28(fp)
 200b97c:	10800317 	ldw	r2,12(r2)
 200b980:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200b984:	e0fff117 	ldw	r3,-60(fp)
 200b988:	e0bff917 	ldw	r2,-28(fp)
 200b98c:	1880061e 	bne	r3,r2,200b9a8 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200b990:	e0bff917 	ldw	r2,-28(fp)
 200b994:	10800204 	addi	r2,r2,8
 200b998:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200b99c:	e0bff917 	ldw	r2,-28(fp)
 200b9a0:	10800317 	ldw	r2,12(r2)
 200b9a4:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200b9a8:	e0fff117 	ldw	r3,-60(fp)
 200b9ac:	e0bff917 	ldw	r2,-28(fp)
 200b9b0:	18801f26 	beq	r3,r2,200ba30 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200b9b4:	e0bff117 	ldw	r2,-60(fp)
 200b9b8:	10c00117 	ldw	r3,4(r2)
 200b9bc:	00bfff04 	movi	r2,-4
 200b9c0:	1884703a 	and	r2,r3,r2
 200b9c4:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200b9c8:	e0bff117 	ldw	r2,-60(fp)
 200b9cc:	10800317 	ldw	r2,12(r2)
 200b9d0:	e0bff815 	stw	r2,-32(fp)
 200b9d4:	e0bff117 	ldw	r2,-60(fp)
 200b9d8:	10800217 	ldw	r2,8(r2)
 200b9dc:	e0bff715 	stw	r2,-36(fp)
 200b9e0:	e0bff717 	ldw	r2,-36(fp)
 200b9e4:	e0fff817 	ldw	r3,-32(fp)
 200b9e8:	10c00315 	stw	r3,12(r2)
 200b9ec:	e0bff817 	ldw	r2,-32(fp)
 200b9f0:	e0fff717 	ldw	r3,-36(fp)
 200b9f4:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200b9f8:	e0fff117 	ldw	r3,-60(fp)
 200b9fc:	e0bffb17 	ldw	r2,-20(fp)
 200ba00:	1885883a 	add	r2,r3,r2
 200ba04:	e13ff117 	ldw	r4,-60(fp)
 200ba08:	e0fffb17 	ldw	r3,-20(fp)
 200ba0c:	20c7883a 	add	r3,r4,r3
 200ba10:	18c00117 	ldw	r3,4(r3)
 200ba14:	18c00054 	ori	r3,r3,1
 200ba18:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200ba1c:	e13ffe17 	ldw	r4,-8(fp)
 200ba20:	2013e780 	call	2013e78 <__malloc_unlock>
      return chunk2mem(victim);
 200ba24:	e0bff117 	ldw	r2,-60(fp)
 200ba28:	10800204 	addi	r2,r2,8
 200ba2c:	00027f06 	br	200c42c <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200ba30:	e0bff217 	ldw	r2,-56(fp)
 200ba34:	10800084 	addi	r2,r2,2
 200ba38:	e0bff215 	stw	r2,-56(fp)
 200ba3c:	00007306 	br	200bc0c <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200ba40:	e0bffa17 	ldw	r2,-24(fp)
 200ba44:	1004d27a 	srli	r2,r2,9
 200ba48:	1000031e 	bne	r2,zero,200ba58 <_malloc_r+0x194>
 200ba4c:	e0bffa17 	ldw	r2,-24(fp)
 200ba50:	1004d0fa 	srli	r2,r2,3
 200ba54:	00002906 	br	200bafc <_malloc_r+0x238>
 200ba58:	e0bffa17 	ldw	r2,-24(fp)
 200ba5c:	1004d27a 	srli	r2,r2,9
 200ba60:	10800168 	cmpgeui	r2,r2,5
 200ba64:	1000041e 	bne	r2,zero,200ba78 <_malloc_r+0x1b4>
 200ba68:	e0bffa17 	ldw	r2,-24(fp)
 200ba6c:	1004d1ba 	srli	r2,r2,6
 200ba70:	10800e04 	addi	r2,r2,56
 200ba74:	00002106 	br	200bafc <_malloc_r+0x238>
 200ba78:	e0bffa17 	ldw	r2,-24(fp)
 200ba7c:	1004d27a 	srli	r2,r2,9
 200ba80:	10800568 	cmpgeui	r2,r2,21
 200ba84:	1000041e 	bne	r2,zero,200ba98 <_malloc_r+0x1d4>
 200ba88:	e0bffa17 	ldw	r2,-24(fp)
 200ba8c:	1004d27a 	srli	r2,r2,9
 200ba90:	108016c4 	addi	r2,r2,91
 200ba94:	00001906 	br	200bafc <_malloc_r+0x238>
 200ba98:	e0bffa17 	ldw	r2,-24(fp)
 200ba9c:	1004d27a 	srli	r2,r2,9
 200baa0:	10801568 	cmpgeui	r2,r2,85
 200baa4:	1000041e 	bne	r2,zero,200bab8 <_malloc_r+0x1f4>
 200baa8:	e0bffa17 	ldw	r2,-24(fp)
 200baac:	1004d33a 	srli	r2,r2,12
 200bab0:	10801b84 	addi	r2,r2,110
 200bab4:	00001106 	br	200bafc <_malloc_r+0x238>
 200bab8:	e0bffa17 	ldw	r2,-24(fp)
 200babc:	1004d27a 	srli	r2,r2,9
 200bac0:	10805568 	cmpgeui	r2,r2,341
 200bac4:	1000041e 	bne	r2,zero,200bad8 <_malloc_r+0x214>
 200bac8:	e0bffa17 	ldw	r2,-24(fp)
 200bacc:	1004d3fa 	srli	r2,r2,15
 200bad0:	10801dc4 	addi	r2,r2,119
 200bad4:	00000906 	br	200bafc <_malloc_r+0x238>
 200bad8:	e0bffa17 	ldw	r2,-24(fp)
 200badc:	1004d27a 	srli	r2,r2,9
 200bae0:	10815568 	cmpgeui	r2,r2,1365
 200bae4:	1000041e 	bne	r2,zero,200baf8 <_malloc_r+0x234>
 200bae8:	e0bffa17 	ldw	r2,-24(fp)
 200baec:	1004d4ba 	srli	r2,r2,18
 200baf0:	10801f04 	addi	r2,r2,124
 200baf4:	00000106 	br	200bafc <_malloc_r+0x238>
 200baf8:	00801f84 	movi	r2,126
 200bafc:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 200bb00:	e0bff217 	ldw	r2,-56(fp)
 200bb04:	10800044 	addi	r2,r2,1
 200bb08:	1085883a 	add	r2,r2,r2
 200bb0c:	1085883a 	add	r2,r2,r2
 200bb10:	1087883a 	add	r3,r2,r2
 200bb14:	008080b4 	movhi	r2,514
 200bb18:	10bcd504 	addi	r2,r2,-3244
 200bb1c:	1885883a 	add	r2,r3,r2
 200bb20:	10bffe04 	addi	r2,r2,-8
 200bb24:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200bb28:	e0bff317 	ldw	r2,-52(fp)
 200bb2c:	10800317 	ldw	r2,12(r2)
 200bb30:	e0bff115 	stw	r2,-60(fp)
 200bb34:	00002f06 	br	200bbf4 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 200bb38:	e0bff117 	ldw	r2,-60(fp)
 200bb3c:	10c00117 	ldw	r3,4(r2)
 200bb40:	00bfff04 	movi	r2,-4
 200bb44:	1884703a 	and	r2,r3,r2
 200bb48:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 200bb4c:	e0fffb17 	ldw	r3,-20(fp)
 200bb50:	e0bffa17 	ldw	r2,-24(fp)
 200bb54:	1885c83a 	sub	r2,r3,r2
 200bb58:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 200bb5c:	e0bff417 	ldw	r2,-48(fp)
 200bb60:	10800410 	cmplti	r2,r2,16
 200bb64:	1000041e 	bne	r2,zero,200bb78 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 200bb68:	e0bff217 	ldw	r2,-56(fp)
 200bb6c:	10bfffc4 	addi	r2,r2,-1
 200bb70:	e0bff215 	stw	r2,-56(fp)
        break;   
 200bb74:	00002206 	br	200bc00 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 200bb78:	e0bff417 	ldw	r2,-48(fp)
 200bb7c:	10001a16 	blt	r2,zero,200bbe8 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 200bb80:	e0bff117 	ldw	r2,-60(fp)
 200bb84:	10800317 	ldw	r2,12(r2)
 200bb88:	e0bff815 	stw	r2,-32(fp)
 200bb8c:	e0bff117 	ldw	r2,-60(fp)
 200bb90:	10800217 	ldw	r2,8(r2)
 200bb94:	e0bff715 	stw	r2,-36(fp)
 200bb98:	e0bff717 	ldw	r2,-36(fp)
 200bb9c:	e0fff817 	ldw	r3,-32(fp)
 200bba0:	10c00315 	stw	r3,12(r2)
 200bba4:	e0bff817 	ldw	r2,-32(fp)
 200bba8:	e0fff717 	ldw	r3,-36(fp)
 200bbac:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 200bbb0:	e0fff117 	ldw	r3,-60(fp)
 200bbb4:	e0bffb17 	ldw	r2,-20(fp)
 200bbb8:	1885883a 	add	r2,r3,r2
 200bbbc:	e13ff117 	ldw	r4,-60(fp)
 200bbc0:	e0fffb17 	ldw	r3,-20(fp)
 200bbc4:	20c7883a 	add	r3,r4,r3
 200bbc8:	18c00117 	ldw	r3,4(r3)
 200bbcc:	18c00054 	ori	r3,r3,1
 200bbd0:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 200bbd4:	e13ffe17 	ldw	r4,-8(fp)
 200bbd8:	2013e780 	call	2013e78 <__malloc_unlock>
        return chunk2mem(victim);
 200bbdc:	e0bff117 	ldw	r2,-60(fp)
 200bbe0:	10800204 	addi	r2,r2,8
 200bbe4:	00021106 	br	200c42c <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200bbe8:	e0bff117 	ldw	r2,-60(fp)
 200bbec:	10800317 	ldw	r2,12(r2)
 200bbf0:	e0bff115 	stw	r2,-60(fp)
 200bbf4:	e0fff117 	ldw	r3,-60(fp)
 200bbf8:	e0bff317 	ldw	r2,-52(fp)
 200bbfc:	18bfce1e 	bne	r3,r2,200bb38 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 200bc00:	e0bff217 	ldw	r2,-56(fp)
 200bc04:	10800044 	addi	r2,r2,1
 200bc08:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 200bc0c:	008080b4 	movhi	r2,514
 200bc10:	10bcd704 	addi	r2,r2,-3236
 200bc14:	10800217 	ldw	r2,8(r2)
 200bc18:	e0bff115 	stw	r2,-60(fp)
 200bc1c:	008080b4 	movhi	r2,514
 200bc20:	10bcd704 	addi	r2,r2,-3236
 200bc24:	e0fff117 	ldw	r3,-60(fp)
 200bc28:	1880e626 	beq	r3,r2,200bfc4 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 200bc2c:	e0bff117 	ldw	r2,-60(fp)
 200bc30:	10c00117 	ldw	r3,4(r2)
 200bc34:	00bfff04 	movi	r2,-4
 200bc38:	1884703a 	and	r2,r3,r2
 200bc3c:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 200bc40:	e0fffb17 	ldw	r3,-20(fp)
 200bc44:	e0bffa17 	ldw	r2,-24(fp)
 200bc48:	1885c83a 	sub	r2,r3,r2
 200bc4c:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 200bc50:	e0bff417 	ldw	r2,-48(fp)
 200bc54:	10800410 	cmplti	r2,r2,16
 200bc58:	1000271e 	bne	r2,zero,200bcf8 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 200bc5c:	e0fff117 	ldw	r3,-60(fp)
 200bc60:	e0bffa17 	ldw	r2,-24(fp)
 200bc64:	1885883a 	add	r2,r3,r2
 200bc68:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 200bc6c:	e0bffa17 	ldw	r2,-24(fp)
 200bc70:	10c00054 	ori	r3,r2,1
 200bc74:	e0bff117 	ldw	r2,-60(fp)
 200bc78:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 200bc7c:	00c080b4 	movhi	r3,514
 200bc80:	18fcd704 	addi	r3,r3,-3236
 200bc84:	008080b4 	movhi	r2,514
 200bc88:	10bcd704 	addi	r2,r2,-3236
 200bc8c:	e13ffc17 	ldw	r4,-16(fp)
 200bc90:	11000315 	stw	r4,12(r2)
 200bc94:	10800317 	ldw	r2,12(r2)
 200bc98:	18800215 	stw	r2,8(r3)
 200bc9c:	008080b4 	movhi	r2,514
 200bca0:	10bcd704 	addi	r2,r2,-3236
 200bca4:	e0fffc17 	ldw	r3,-16(fp)
 200bca8:	18800315 	stw	r2,12(r3)
 200bcac:	e0bffc17 	ldw	r2,-16(fp)
 200bcb0:	10c00317 	ldw	r3,12(r2)
 200bcb4:	e0bffc17 	ldw	r2,-16(fp)
 200bcb8:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 200bcbc:	e0bff417 	ldw	r2,-48(fp)
 200bcc0:	10800054 	ori	r2,r2,1
 200bcc4:	1007883a 	mov	r3,r2
 200bcc8:	e0bffc17 	ldw	r2,-16(fp)
 200bccc:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 200bcd0:	e0bff417 	ldw	r2,-48(fp)
 200bcd4:	e0fffc17 	ldw	r3,-16(fp)
 200bcd8:	1885883a 	add	r2,r3,r2
 200bcdc:	e0fff417 	ldw	r3,-48(fp)
 200bce0:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200bce4:	e13ffe17 	ldw	r4,-8(fp)
 200bce8:	2013e780 	call	2013e78 <__malloc_unlock>
      return chunk2mem(victim);
 200bcec:	e0bff117 	ldw	r2,-60(fp)
 200bcf0:	10800204 	addi	r2,r2,8
 200bcf4:	0001cd06 	br	200c42c <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200bcf8:	00c080b4 	movhi	r3,514
 200bcfc:	18fcd704 	addi	r3,r3,-3236
 200bd00:	008080b4 	movhi	r2,514
 200bd04:	10bcd704 	addi	r2,r2,-3236
 200bd08:	010080b4 	movhi	r4,514
 200bd0c:	213cd704 	addi	r4,r4,-3236
 200bd10:	11000315 	stw	r4,12(r2)
 200bd14:	10800317 	ldw	r2,12(r2)
 200bd18:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 200bd1c:	e0bff417 	ldw	r2,-48(fp)
 200bd20:	10000e16 	blt	r2,zero,200bd5c <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 200bd24:	e0fff117 	ldw	r3,-60(fp)
 200bd28:	e0bffb17 	ldw	r2,-20(fp)
 200bd2c:	1885883a 	add	r2,r3,r2
 200bd30:	e13ff117 	ldw	r4,-60(fp)
 200bd34:	e0fffb17 	ldw	r3,-20(fp)
 200bd38:	20c7883a 	add	r3,r4,r3
 200bd3c:	18c00117 	ldw	r3,4(r3)
 200bd40:	18c00054 	ori	r3,r3,1
 200bd44:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200bd48:	e13ffe17 	ldw	r4,-8(fp)
 200bd4c:	2013e780 	call	2013e78 <__malloc_unlock>
      return chunk2mem(victim);
 200bd50:	e0bff117 	ldw	r2,-60(fp)
 200bd54:	10800204 	addi	r2,r2,8
 200bd58:	0001b406 	br	200c42c <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 200bd5c:	e0bffb17 	ldw	r2,-20(fp)
 200bd60:	10808028 	cmpgeui	r2,r2,512
 200bd64:	10002c1e 	bne	r2,zero,200be18 <_malloc_r+0x554>
 200bd68:	e0bffb17 	ldw	r2,-20(fp)
 200bd6c:	1004d0fa 	srli	r2,r2,3
 200bd70:	e0bffd15 	stw	r2,-12(fp)
 200bd74:	00c080b4 	movhi	r3,514
 200bd78:	18fcd504 	addi	r3,r3,-3244
 200bd7c:	008080b4 	movhi	r2,514
 200bd80:	10bcd504 	addi	r2,r2,-3244
 200bd84:	11000117 	ldw	r4,4(r2)
 200bd88:	e0bffd17 	ldw	r2,-12(fp)
 200bd8c:	1000010e 	bge	r2,zero,200bd94 <_malloc_r+0x4d0>
 200bd90:	108000c4 	addi	r2,r2,3
 200bd94:	1005d0ba 	srai	r2,r2,2
 200bd98:	100b883a 	mov	r5,r2
 200bd9c:	00800044 	movi	r2,1
 200bda0:	1144983a 	sll	r2,r2,r5
 200bda4:	2084b03a 	or	r2,r4,r2
 200bda8:	18800115 	stw	r2,4(r3)
 200bdac:	e0bffd17 	ldw	r2,-12(fp)
 200bdb0:	10800044 	addi	r2,r2,1
 200bdb4:	1085883a 	add	r2,r2,r2
 200bdb8:	1085883a 	add	r2,r2,r2
 200bdbc:	1087883a 	add	r3,r2,r2
 200bdc0:	008080b4 	movhi	r2,514
 200bdc4:	10bcd504 	addi	r2,r2,-3244
 200bdc8:	1885883a 	add	r2,r3,r2
 200bdcc:	10bffe04 	addi	r2,r2,-8
 200bdd0:	e0bff815 	stw	r2,-32(fp)
 200bdd4:	e0bff817 	ldw	r2,-32(fp)
 200bdd8:	10800217 	ldw	r2,8(r2)
 200bddc:	e0bff715 	stw	r2,-36(fp)
 200bde0:	e0bff117 	ldw	r2,-60(fp)
 200bde4:	e0fff817 	ldw	r3,-32(fp)
 200bde8:	10c00315 	stw	r3,12(r2)
 200bdec:	e0bff117 	ldw	r2,-60(fp)
 200bdf0:	e0fff717 	ldw	r3,-36(fp)
 200bdf4:	10c00215 	stw	r3,8(r2)
 200bdf8:	e0bff817 	ldw	r2,-32(fp)
 200bdfc:	e0fff117 	ldw	r3,-60(fp)
 200be00:	10c00215 	stw	r3,8(r2)
 200be04:	e0bff817 	ldw	r2,-32(fp)
 200be08:	10c00217 	ldw	r3,8(r2)
 200be0c:	e0bff717 	ldw	r2,-36(fp)
 200be10:	10c00315 	stw	r3,12(r2)
 200be14:	00006b06 	br	200bfc4 <_malloc_r+0x700>
 200be18:	e0bffb17 	ldw	r2,-20(fp)
 200be1c:	1004d27a 	srli	r2,r2,9
 200be20:	1000031e 	bne	r2,zero,200be30 <_malloc_r+0x56c>
 200be24:	e0bffb17 	ldw	r2,-20(fp)
 200be28:	1004d0fa 	srli	r2,r2,3
 200be2c:	00002906 	br	200bed4 <_malloc_r+0x610>
 200be30:	e0bffb17 	ldw	r2,-20(fp)
 200be34:	1004d27a 	srli	r2,r2,9
 200be38:	10800168 	cmpgeui	r2,r2,5
 200be3c:	1000041e 	bne	r2,zero,200be50 <_malloc_r+0x58c>
 200be40:	e0bffb17 	ldw	r2,-20(fp)
 200be44:	1004d1ba 	srli	r2,r2,6
 200be48:	10800e04 	addi	r2,r2,56
 200be4c:	00002106 	br	200bed4 <_malloc_r+0x610>
 200be50:	e0bffb17 	ldw	r2,-20(fp)
 200be54:	1004d27a 	srli	r2,r2,9
 200be58:	10800568 	cmpgeui	r2,r2,21
 200be5c:	1000041e 	bne	r2,zero,200be70 <_malloc_r+0x5ac>
 200be60:	e0bffb17 	ldw	r2,-20(fp)
 200be64:	1004d27a 	srli	r2,r2,9
 200be68:	108016c4 	addi	r2,r2,91
 200be6c:	00001906 	br	200bed4 <_malloc_r+0x610>
 200be70:	e0bffb17 	ldw	r2,-20(fp)
 200be74:	1004d27a 	srli	r2,r2,9
 200be78:	10801568 	cmpgeui	r2,r2,85
 200be7c:	1000041e 	bne	r2,zero,200be90 <_malloc_r+0x5cc>
 200be80:	e0bffb17 	ldw	r2,-20(fp)
 200be84:	1004d33a 	srli	r2,r2,12
 200be88:	10801b84 	addi	r2,r2,110
 200be8c:	00001106 	br	200bed4 <_malloc_r+0x610>
 200be90:	e0bffb17 	ldw	r2,-20(fp)
 200be94:	1004d27a 	srli	r2,r2,9
 200be98:	10805568 	cmpgeui	r2,r2,341
 200be9c:	1000041e 	bne	r2,zero,200beb0 <_malloc_r+0x5ec>
 200bea0:	e0bffb17 	ldw	r2,-20(fp)
 200bea4:	1004d3fa 	srli	r2,r2,15
 200bea8:	10801dc4 	addi	r2,r2,119
 200beac:	00000906 	br	200bed4 <_malloc_r+0x610>
 200beb0:	e0bffb17 	ldw	r2,-20(fp)
 200beb4:	1004d27a 	srli	r2,r2,9
 200beb8:	10815568 	cmpgeui	r2,r2,1365
 200bebc:	1000041e 	bne	r2,zero,200bed0 <_malloc_r+0x60c>
 200bec0:	e0bffb17 	ldw	r2,-20(fp)
 200bec4:	1004d4ba 	srli	r2,r2,18
 200bec8:	10801f04 	addi	r2,r2,124
 200becc:	00000106 	br	200bed4 <_malloc_r+0x610>
 200bed0:	00801f84 	movi	r2,126
 200bed4:	e0bffd15 	stw	r2,-12(fp)
 200bed8:	e0bffd17 	ldw	r2,-12(fp)
 200bedc:	10800044 	addi	r2,r2,1
 200bee0:	1085883a 	add	r2,r2,r2
 200bee4:	1085883a 	add	r2,r2,r2
 200bee8:	1087883a 	add	r3,r2,r2
 200beec:	008080b4 	movhi	r2,514
 200bef0:	10bcd504 	addi	r2,r2,-3244
 200bef4:	1885883a 	add	r2,r3,r2
 200bef8:	10bffe04 	addi	r2,r2,-8
 200befc:	e0bff815 	stw	r2,-32(fp)
 200bf00:	e0bff817 	ldw	r2,-32(fp)
 200bf04:	10800217 	ldw	r2,8(r2)
 200bf08:	e0bff715 	stw	r2,-36(fp)
 200bf0c:	e0fff717 	ldw	r3,-36(fp)
 200bf10:	e0bff817 	ldw	r2,-32(fp)
 200bf14:	1880121e 	bne	r3,r2,200bf60 <_malloc_r+0x69c>
 200bf18:	00c080b4 	movhi	r3,514
 200bf1c:	18fcd504 	addi	r3,r3,-3244
 200bf20:	008080b4 	movhi	r2,514
 200bf24:	10bcd504 	addi	r2,r2,-3244
 200bf28:	11000117 	ldw	r4,4(r2)
 200bf2c:	e0bffd17 	ldw	r2,-12(fp)
 200bf30:	1000010e 	bge	r2,zero,200bf38 <_malloc_r+0x674>
 200bf34:	108000c4 	addi	r2,r2,3
 200bf38:	1005d0ba 	srai	r2,r2,2
 200bf3c:	100b883a 	mov	r5,r2
 200bf40:	00800044 	movi	r2,1
 200bf44:	1144983a 	sll	r2,r2,r5
 200bf48:	2084b03a 	or	r2,r4,r2
 200bf4c:	18800115 	stw	r2,4(r3)
 200bf50:	00000f06 	br	200bf90 <_malloc_r+0x6cc>
 200bf54:	e0bff717 	ldw	r2,-36(fp)
 200bf58:	10800217 	ldw	r2,8(r2)
 200bf5c:	e0bff715 	stw	r2,-36(fp)
 200bf60:	e0fff717 	ldw	r3,-36(fp)
 200bf64:	e0bff817 	ldw	r2,-32(fp)
 200bf68:	18800626 	beq	r3,r2,200bf84 <_malloc_r+0x6c0>
 200bf6c:	e0bff717 	ldw	r2,-36(fp)
 200bf70:	10c00117 	ldw	r3,4(r2)
 200bf74:	00bfff04 	movi	r2,-4
 200bf78:	1884703a 	and	r2,r3,r2
 200bf7c:	e0fffb17 	ldw	r3,-20(fp)
 200bf80:	18bff436 	bltu	r3,r2,200bf54 <_malloc_r+0x690>
 200bf84:	e0bff717 	ldw	r2,-36(fp)
 200bf88:	10800317 	ldw	r2,12(r2)
 200bf8c:	e0bff815 	stw	r2,-32(fp)
 200bf90:	e0bff117 	ldw	r2,-60(fp)
 200bf94:	e0fff817 	ldw	r3,-32(fp)
 200bf98:	10c00315 	stw	r3,12(r2)
 200bf9c:	e0bff117 	ldw	r2,-60(fp)
 200bfa0:	e0fff717 	ldw	r3,-36(fp)
 200bfa4:	10c00215 	stw	r3,8(r2)
 200bfa8:	e0bff817 	ldw	r2,-32(fp)
 200bfac:	e0fff117 	ldw	r3,-60(fp)
 200bfb0:	10c00215 	stw	r3,8(r2)
 200bfb4:	e0bff817 	ldw	r2,-32(fp)
 200bfb8:	10c00217 	ldw	r3,8(r2)
 200bfbc:	e0bff717 	ldw	r2,-36(fp)
 200bfc0:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 200bfc4:	e0bff217 	ldw	r2,-56(fp)
 200bfc8:	1000010e 	bge	r2,zero,200bfd0 <_malloc_r+0x70c>
 200bfcc:	108000c4 	addi	r2,r2,3
 200bfd0:	1005d0ba 	srai	r2,r2,2
 200bfd4:	1007883a 	mov	r3,r2
 200bfd8:	00800044 	movi	r2,1
 200bfdc:	10c4983a 	sll	r2,r2,r3
 200bfe0:	e0bff515 	stw	r2,-44(fp)
 200bfe4:	008080b4 	movhi	r2,514
 200bfe8:	10bcd504 	addi	r2,r2,-3244
 200bfec:	10c00117 	ldw	r3,4(r2)
 200bff0:	e0bff517 	ldw	r2,-44(fp)
 200bff4:	1880c636 	bltu	r3,r2,200c310 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200bff8:	008080b4 	movhi	r2,514
 200bffc:	10bcd504 	addi	r2,r2,-3244
 200c000:	10c00117 	ldw	r3,4(r2)
 200c004:	e0bff517 	ldw	r2,-44(fp)
 200c008:	1884703a 	and	r2,r3,r2
 200c00c:	1000151e 	bne	r2,zero,200c064 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 200c010:	e0fff217 	ldw	r3,-56(fp)
 200c014:	00bfff04 	movi	r2,-4
 200c018:	1884703a 	and	r2,r3,r2
 200c01c:	10800104 	addi	r2,r2,4
 200c020:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 200c024:	e0bff517 	ldw	r2,-44(fp)
 200c028:	1085883a 	add	r2,r2,r2
 200c02c:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 200c030:	00000606 	br	200c04c <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 200c034:	e0bff217 	ldw	r2,-56(fp)
 200c038:	10800104 	addi	r2,r2,4
 200c03c:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 200c040:	e0bff517 	ldw	r2,-44(fp)
 200c044:	1085883a 	add	r2,r2,r2
 200c048:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 200c04c:	008080b4 	movhi	r2,514
 200c050:	10bcd504 	addi	r2,r2,-3244
 200c054:	10c00117 	ldw	r3,4(r2)
 200c058:	e0bff517 	ldw	r2,-44(fp)
 200c05c:	1884703a 	and	r2,r3,r2
 200c060:	103ff426 	beq	r2,zero,200c034 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 200c064:	e0bff217 	ldw	r2,-56(fp)
 200c068:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 200c06c:	e0bff217 	ldw	r2,-56(fp)
 200c070:	10800044 	addi	r2,r2,1
 200c074:	1085883a 	add	r2,r2,r2
 200c078:	1085883a 	add	r2,r2,r2
 200c07c:	1087883a 	add	r3,r2,r2
 200c080:	008080b4 	movhi	r2,514
 200c084:	10bcd504 	addi	r2,r2,-3244
 200c088:	1885883a 	add	r2,r3,r2
 200c08c:	10bffe04 	addi	r2,r2,-8
 200c090:	e0bff315 	stw	r2,-52(fp)
 200c094:	e0bff317 	ldw	r2,-52(fp)
 200c098:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200c09c:	e0bff317 	ldw	r2,-52(fp)
 200c0a0:	10800317 	ldw	r2,12(r2)
 200c0a4:	e0bff115 	stw	r2,-60(fp)
 200c0a8:	00005e06 	br	200c224 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 200c0ac:	e0bff117 	ldw	r2,-60(fp)
 200c0b0:	10c00117 	ldw	r3,4(r2)
 200c0b4:	00bfff04 	movi	r2,-4
 200c0b8:	1884703a 	and	r2,r3,r2
 200c0bc:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 200c0c0:	e0fffb17 	ldw	r3,-20(fp)
 200c0c4:	e0bffa17 	ldw	r2,-24(fp)
 200c0c8:	1885c83a 	sub	r2,r3,r2
 200c0cc:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 200c0d0:	e0bff417 	ldw	r2,-48(fp)
 200c0d4:	10800410 	cmplti	r2,r2,16
 200c0d8:	1000331e 	bne	r2,zero,200c1a8 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 200c0dc:	e0fff117 	ldw	r3,-60(fp)
 200c0e0:	e0bffa17 	ldw	r2,-24(fp)
 200c0e4:	1885883a 	add	r2,r3,r2
 200c0e8:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 200c0ec:	e0bffa17 	ldw	r2,-24(fp)
 200c0f0:	10c00054 	ori	r3,r2,1
 200c0f4:	e0bff117 	ldw	r2,-60(fp)
 200c0f8:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200c0fc:	e0bff117 	ldw	r2,-60(fp)
 200c100:	10800317 	ldw	r2,12(r2)
 200c104:	e0bff815 	stw	r2,-32(fp)
 200c108:	e0bff117 	ldw	r2,-60(fp)
 200c10c:	10800217 	ldw	r2,8(r2)
 200c110:	e0bff715 	stw	r2,-36(fp)
 200c114:	e0bff717 	ldw	r2,-36(fp)
 200c118:	e0fff817 	ldw	r3,-32(fp)
 200c11c:	10c00315 	stw	r3,12(r2)
 200c120:	e0bff817 	ldw	r2,-32(fp)
 200c124:	e0fff717 	ldw	r3,-36(fp)
 200c128:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 200c12c:	00c080b4 	movhi	r3,514
 200c130:	18fcd704 	addi	r3,r3,-3236
 200c134:	008080b4 	movhi	r2,514
 200c138:	10bcd704 	addi	r2,r2,-3236
 200c13c:	e13ffc17 	ldw	r4,-16(fp)
 200c140:	11000315 	stw	r4,12(r2)
 200c144:	10800317 	ldw	r2,12(r2)
 200c148:	18800215 	stw	r2,8(r3)
 200c14c:	008080b4 	movhi	r2,514
 200c150:	10bcd704 	addi	r2,r2,-3236
 200c154:	e0fffc17 	ldw	r3,-16(fp)
 200c158:	18800315 	stw	r2,12(r3)
 200c15c:	e0bffc17 	ldw	r2,-16(fp)
 200c160:	10c00317 	ldw	r3,12(r2)
 200c164:	e0bffc17 	ldw	r2,-16(fp)
 200c168:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 200c16c:	e0bff417 	ldw	r2,-48(fp)
 200c170:	10800054 	ori	r2,r2,1
 200c174:	1007883a 	mov	r3,r2
 200c178:	e0bffc17 	ldw	r2,-16(fp)
 200c17c:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 200c180:	e0bff417 	ldw	r2,-48(fp)
 200c184:	e0fffc17 	ldw	r3,-16(fp)
 200c188:	1885883a 	add	r2,r3,r2
 200c18c:	e0fff417 	ldw	r3,-48(fp)
 200c190:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200c194:	e13ffe17 	ldw	r4,-8(fp)
 200c198:	2013e780 	call	2013e78 <__malloc_unlock>
            return chunk2mem(victim);
 200c19c:	e0bff117 	ldw	r2,-60(fp)
 200c1a0:	10800204 	addi	r2,r2,8
 200c1a4:	0000a106 	br	200c42c <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200c1a8:	e0bff417 	ldw	r2,-48(fp)
 200c1ac:	10001a16 	blt	r2,zero,200c218 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 200c1b0:	e0fff117 	ldw	r3,-60(fp)
 200c1b4:	e0bffb17 	ldw	r2,-20(fp)
 200c1b8:	1885883a 	add	r2,r3,r2
 200c1bc:	e13ff117 	ldw	r4,-60(fp)
 200c1c0:	e0fffb17 	ldw	r3,-20(fp)
 200c1c4:	20c7883a 	add	r3,r4,r3
 200c1c8:	18c00117 	ldw	r3,4(r3)
 200c1cc:	18c00054 	ori	r3,r3,1
 200c1d0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200c1d4:	e0bff117 	ldw	r2,-60(fp)
 200c1d8:	10800317 	ldw	r2,12(r2)
 200c1dc:	e0bff815 	stw	r2,-32(fp)
 200c1e0:	e0bff117 	ldw	r2,-60(fp)
 200c1e4:	10800217 	ldw	r2,8(r2)
 200c1e8:	e0bff715 	stw	r2,-36(fp)
 200c1ec:	e0bff717 	ldw	r2,-36(fp)
 200c1f0:	e0fff817 	ldw	r3,-32(fp)
 200c1f4:	10c00315 	stw	r3,12(r2)
 200c1f8:	e0bff817 	ldw	r2,-32(fp)
 200c1fc:	e0fff717 	ldw	r3,-36(fp)
 200c200:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200c204:	e13ffe17 	ldw	r4,-8(fp)
 200c208:	2013e780 	call	2013e78 <__malloc_unlock>
            return chunk2mem(victim);
 200c20c:	e0bff117 	ldw	r2,-60(fp)
 200c210:	10800204 	addi	r2,r2,8
 200c214:	00008506 	br	200c42c <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200c218:	e0bff117 	ldw	r2,-60(fp)
 200c21c:	10800317 	ldw	r2,12(r2)
 200c220:	e0bff115 	stw	r2,-60(fp)
 200c224:	e0fff117 	ldw	r3,-60(fp)
 200c228:	e0bff317 	ldw	r2,-52(fp)
 200c22c:	18bf9f1e 	bne	r3,r2,200c0ac <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 200c230:	e0bff317 	ldw	r2,-52(fp)
 200c234:	10800204 	addi	r2,r2,8
 200c238:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 200c23c:	e0bff217 	ldw	r2,-56(fp)
 200c240:	10800044 	addi	r2,r2,1
 200c244:	e0bff215 	stw	r2,-56(fp)
 200c248:	e0bff217 	ldw	r2,-56(fp)
 200c24c:	108000cc 	andi	r2,r2,3
 200c250:	103f921e 	bne	r2,zero,200c09c <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 200c254:	e0bff617 	ldw	r2,-40(fp)
 200c258:	108000cc 	andi	r2,r2,3
 200c25c:	10000a1e 	bne	r2,zero,200c288 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 200c260:	008080b4 	movhi	r2,514
 200c264:	10bcd504 	addi	r2,r2,-3244
 200c268:	00c080b4 	movhi	r3,514
 200c26c:	18fcd504 	addi	r3,r3,-3244
 200c270:	19000117 	ldw	r4,4(r3)
 200c274:	e0fff517 	ldw	r3,-44(fp)
 200c278:	00c6303a 	nor	r3,zero,r3
 200c27c:	20c6703a 	and	r3,r4,r3
 200c280:	10c00115 	stw	r3,4(r2)
          break;
 200c284:	00000a06 	br	200c2b0 <_malloc_r+0x9ec>
        }
        --startidx;
 200c288:	e0bff617 	ldw	r2,-40(fp)
 200c28c:	10bfffc4 	addi	r2,r2,-1
 200c290:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 200c294:	e0bff917 	ldw	r2,-28(fp)
 200c298:	10bffe04 	addi	r2,r2,-8
 200c29c:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 200c2a0:	e0bff917 	ldw	r2,-28(fp)
 200c2a4:	10c00217 	ldw	r3,8(r2)
 200c2a8:	e0bff917 	ldw	r2,-28(fp)
 200c2ac:	18bfe926 	beq	r3,r2,200c254 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 200c2b0:	e0bff517 	ldw	r2,-44(fp)
 200c2b4:	1085883a 	add	r2,r2,r2
 200c2b8:	e0bff515 	stw	r2,-44(fp)
 200c2bc:	008080b4 	movhi	r2,514
 200c2c0:	10bcd504 	addi	r2,r2,-3244
 200c2c4:	10c00117 	ldw	r3,4(r2)
 200c2c8:	e0bff517 	ldw	r2,-44(fp)
 200c2cc:	18801036 	bltu	r3,r2,200c310 <_malloc_r+0xa4c>
 200c2d0:	e0bff517 	ldw	r2,-44(fp)
 200c2d4:	10000e26 	beq	r2,zero,200c310 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 200c2d8:	00000606 	br	200c2f4 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 200c2dc:	e0bff217 	ldw	r2,-56(fp)
 200c2e0:	10800104 	addi	r2,r2,4
 200c2e4:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 200c2e8:	e0bff517 	ldw	r2,-44(fp)
 200c2ec:	1085883a 	add	r2,r2,r2
 200c2f0:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 200c2f4:	008080b4 	movhi	r2,514
 200c2f8:	10bcd504 	addi	r2,r2,-3244
 200c2fc:	10c00117 	ldw	r3,4(r2)
 200c300:	e0bff517 	ldw	r2,-44(fp)
 200c304:	1884703a 	and	r2,r3,r2
 200c308:	103ff426 	beq	r2,zero,200c2dc <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 200c30c:	003f5506 	br	200c064 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 200c310:	008080b4 	movhi	r2,514
 200c314:	10bcd504 	addi	r2,r2,-3244
 200c318:	10800217 	ldw	r2,8(r2)
 200c31c:	10c00117 	ldw	r3,4(r2)
 200c320:	00bfff04 	movi	r2,-4
 200c324:	1886703a 	and	r3,r3,r2
 200c328:	e0bffa17 	ldw	r2,-24(fp)
 200c32c:	1885c83a 	sub	r2,r3,r2
 200c330:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c334:	008080b4 	movhi	r2,514
 200c338:	10bcd504 	addi	r2,r2,-3244
 200c33c:	10800217 	ldw	r2,8(r2)
 200c340:	10c00117 	ldw	r3,4(r2)
 200c344:	00bfff04 	movi	r2,-4
 200c348:	1886703a 	and	r3,r3,r2
 200c34c:	e0bffa17 	ldw	r2,-24(fp)
 200c350:	18800336 	bltu	r3,r2,200c360 <_malloc_r+0xa9c>
 200c354:	e0bff417 	ldw	r2,-48(fp)
 200c358:	10800408 	cmpgei	r2,r2,16
 200c35c:	10001b1e 	bne	r2,zero,200c3cc <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 200c360:	e17ffa17 	ldw	r5,-24(fp)
 200c364:	e13ffe17 	ldw	r4,-8(fp)
 200c368:	200b5100 	call	200b510 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 200c36c:	008080b4 	movhi	r2,514
 200c370:	10bcd504 	addi	r2,r2,-3244
 200c374:	10800217 	ldw	r2,8(r2)
 200c378:	10c00117 	ldw	r3,4(r2)
 200c37c:	00bfff04 	movi	r2,-4
 200c380:	1886703a 	and	r3,r3,r2
 200c384:	e0bffa17 	ldw	r2,-24(fp)
 200c388:	1885c83a 	sub	r2,r3,r2
 200c38c:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c390:	008080b4 	movhi	r2,514
 200c394:	10bcd504 	addi	r2,r2,-3244
 200c398:	10800217 	ldw	r2,8(r2)
 200c39c:	10c00117 	ldw	r3,4(r2)
 200c3a0:	00bfff04 	movi	r2,-4
 200c3a4:	1886703a 	and	r3,r3,r2
 200c3a8:	e0bffa17 	ldw	r2,-24(fp)
 200c3ac:	18800336 	bltu	r3,r2,200c3bc <_malloc_r+0xaf8>
 200c3b0:	e0bff417 	ldw	r2,-48(fp)
 200c3b4:	10800408 	cmpgei	r2,r2,16
 200c3b8:	1000041e 	bne	r2,zero,200c3cc <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 200c3bc:	e13ffe17 	ldw	r4,-8(fp)
 200c3c0:	2013e780 	call	2013e78 <__malloc_unlock>
      return 0; /* propagate failure */
 200c3c4:	0005883a 	mov	r2,zero
 200c3c8:	00001806 	br	200c42c <_malloc_r+0xb68>
    }
  }

  victim = top;
 200c3cc:	008080b4 	movhi	r2,514
 200c3d0:	10bcd504 	addi	r2,r2,-3244
 200c3d4:	10800217 	ldw	r2,8(r2)
 200c3d8:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 200c3dc:	e0bffa17 	ldw	r2,-24(fp)
 200c3e0:	10c00054 	ori	r3,r2,1
 200c3e4:	e0bff117 	ldw	r2,-60(fp)
 200c3e8:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 200c3ec:	008080b4 	movhi	r2,514
 200c3f0:	10bcd504 	addi	r2,r2,-3244
 200c3f4:	e13ff117 	ldw	r4,-60(fp)
 200c3f8:	e0fffa17 	ldw	r3,-24(fp)
 200c3fc:	20c7883a 	add	r3,r4,r3
 200c400:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 200c404:	008080b4 	movhi	r2,514
 200c408:	10bcd504 	addi	r2,r2,-3244
 200c40c:	10800217 	ldw	r2,8(r2)
 200c410:	e0fff417 	ldw	r3,-48(fp)
 200c414:	18c00054 	ori	r3,r3,1
 200c418:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 200c41c:	e13ffe17 	ldw	r4,-8(fp)
 200c420:	2013e780 	call	2013e78 <__malloc_unlock>
  return chunk2mem(victim);
 200c424:	e0bff117 	ldw	r2,-60(fp)
 200c428:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200c42c:	e037883a 	mov	sp,fp
 200c430:	dfc00117 	ldw	ra,4(sp)
 200c434:	df000017 	ldw	fp,0(sp)
 200c438:	dec00204 	addi	sp,sp,8
 200c43c:	f800283a 	ret

0200c440 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 200c440:	defff704 	addi	sp,sp,-36
 200c444:	df000815 	stw	fp,32(sp)
 200c448:	df000804 	addi	fp,sp,32
 200c44c:	e13ffd15 	stw	r4,-12(fp)
 200c450:	e17ffe15 	stw	r5,-8(fp)
 200c454:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 200c458:	e0bffd17 	ldw	r2,-12(fp)
 200c45c:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 200c460:	e0bffe17 	ldw	r2,-8(fp)
 200c464:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c468:	00001006 	br	200c4ac <memchr+0x6c>
    {
      if (!length--)
 200c46c:	e0bfff17 	ldw	r2,-4(fp)
 200c470:	10ffffc4 	addi	r3,r2,-1
 200c474:	e0ffff15 	stw	r3,-4(fp)
 200c478:	1000021e 	bne	r2,zero,200c484 <memchr+0x44>
        return NULL;
 200c47c:	0005883a 	mov	r2,zero
 200c480:	00005a06 	br	200c5ec <memchr+0x1ac>
      if (*src == d)
 200c484:	e0bff817 	ldw	r2,-32(fp)
 200c488:	10800003 	ldbu	r2,0(r2)
 200c48c:	10c03fcc 	andi	r3,r2,255
 200c490:	e0bffc03 	ldbu	r2,-16(fp)
 200c494:	1880021e 	bne	r3,r2,200c4a0 <memchr+0x60>
        return (void *) src;
 200c498:	e0bff817 	ldw	r2,-32(fp)
 200c49c:	00005306 	br	200c5ec <memchr+0x1ac>
      src++;
 200c4a0:	e0bff817 	ldw	r2,-32(fp)
 200c4a4:	10800044 	addi	r2,r2,1
 200c4a8:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c4ac:	e0bff817 	ldw	r2,-32(fp)
 200c4b0:	108000cc 	andi	r2,r2,3
 200c4b4:	103fed1e 	bne	r2,zero,200c46c <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 200c4b8:	e0bfff17 	ldw	r2,-4(fp)
 200c4bc:	10800130 	cmpltui	r2,r2,4
 200c4c0:	1000451e 	bne	r2,zero,200c5d8 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 200c4c4:	e0bff817 	ldw	r2,-32(fp)
 200c4c8:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 200c4cc:	e0bffc03 	ldbu	r2,-16(fp)
 200c4d0:	1006923a 	slli	r3,r2,8
 200c4d4:	e0bffc03 	ldbu	r2,-16(fp)
 200c4d8:	1884b03a 	or	r2,r3,r2
 200c4dc:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 200c4e0:	e0bffa17 	ldw	r2,-24(fp)
 200c4e4:	1004943a 	slli	r2,r2,16
 200c4e8:	e0fffa17 	ldw	r3,-24(fp)
 200c4ec:	1884b03a 	or	r2,r3,r2
 200c4f0:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c4f4:	00800804 	movi	r2,32
 200c4f8:	e0bffb15 	stw	r2,-20(fp)
 200c4fc:	00000906 	br	200c524 <memchr+0xe4>
        mask = (mask << i) | mask;
 200c500:	e0fffa17 	ldw	r3,-24(fp)
 200c504:	e0bffb17 	ldw	r2,-20(fp)
 200c508:	1884983a 	sll	r2,r3,r2
 200c50c:	e0fffa17 	ldw	r3,-24(fp)
 200c510:	1884b03a 	or	r2,r3,r2
 200c514:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c518:	e0bffb17 	ldw	r2,-20(fp)
 200c51c:	1085883a 	add	r2,r2,r2
 200c520:	e0bffb15 	stw	r2,-20(fp)
 200c524:	e0bffb17 	ldw	r2,-20(fp)
 200c528:	10800830 	cmpltui	r2,r2,32
 200c52c:	103ff41e 	bne	r2,zero,200c500 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c530:	00001706 	br	200c590 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 200c534:	e0bff917 	ldw	r2,-28(fp)
 200c538:	10c00017 	ldw	r3,0(r2)
 200c53c:	e0bffa17 	ldw	r2,-24(fp)
 200c540:	1886f03a 	xor	r3,r3,r2
 200c544:	00bfbff4 	movhi	r2,65279
 200c548:	10bfbfc4 	addi	r2,r2,-257
 200c54c:	1887883a 	add	r3,r3,r2
 200c550:	e0bff917 	ldw	r2,-28(fp)
 200c554:	11000017 	ldw	r4,0(r2)
 200c558:	e0bffa17 	ldw	r2,-24(fp)
 200c55c:	2084f03a 	xor	r2,r4,r2
 200c560:	0084303a 	nor	r2,zero,r2
 200c564:	1886703a 	and	r3,r3,r2
 200c568:	00a02074 	movhi	r2,32897
 200c56c:	10a02004 	addi	r2,r2,-32640
 200c570:	1884703a 	and	r2,r3,r2
 200c574:	10000a1e 	bne	r2,zero,200c5a0 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 200c578:	e0bfff17 	ldw	r2,-4(fp)
 200c57c:	10bfff04 	addi	r2,r2,-4
 200c580:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 200c584:	e0bff917 	ldw	r2,-28(fp)
 200c588:	10800104 	addi	r2,r2,4
 200c58c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c590:	e0bfff17 	ldw	r2,-4(fp)
 200c594:	10800128 	cmpgeui	r2,r2,4
 200c598:	103fe61e 	bne	r2,zero,200c534 <memchr+0xf4>
 200c59c:	00000106 	br	200c5a4 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 200c5a0:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 200c5a4:	e0bff917 	ldw	r2,-28(fp)
 200c5a8:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c5ac:	00000a06 	br	200c5d8 <memchr+0x198>
    {
      if (*src == d)
 200c5b0:	e0bff817 	ldw	r2,-32(fp)
 200c5b4:	10800003 	ldbu	r2,0(r2)
 200c5b8:	10c03fcc 	andi	r3,r2,255
 200c5bc:	e0bffc03 	ldbu	r2,-16(fp)
 200c5c0:	1880021e 	bne	r3,r2,200c5cc <memchr+0x18c>
        return (void *) src;
 200c5c4:	e0bff817 	ldw	r2,-32(fp)
 200c5c8:	00000806 	br	200c5ec <memchr+0x1ac>
      src++;
 200c5cc:	e0bff817 	ldw	r2,-32(fp)
 200c5d0:	10800044 	addi	r2,r2,1
 200c5d4:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c5d8:	e0bfff17 	ldw	r2,-4(fp)
 200c5dc:	10ffffc4 	addi	r3,r2,-1
 200c5e0:	e0ffff15 	stw	r3,-4(fp)
 200c5e4:	103ff21e 	bne	r2,zero,200c5b0 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 200c5e8:	0005883a 	mov	r2,zero
}
 200c5ec:	e037883a 	mov	sp,fp
 200c5f0:	df000017 	ldw	fp,0(sp)
 200c5f4:	dec00104 	addi	sp,sp,4
 200c5f8:	f800283a 	ret

0200c5fc <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 200c5fc:	defff804 	addi	sp,sp,-32
 200c600:	df000715 	stw	fp,28(sp)
 200c604:	df000704 	addi	fp,sp,28
 200c608:	e13ffd15 	stw	r4,-12(fp)
 200c60c:	e17ffe15 	stw	r5,-8(fp)
 200c610:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 200c614:	e0bffd17 	ldw	r2,-12(fp)
 200c618:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 200c61c:	e0bffe17 	ldw	r2,-8(fp)
 200c620:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c624:	e0fffa17 	ldw	r3,-24(fp)
 200c628:	e0bff917 	ldw	r2,-28(fp)
 200c62c:	18801d2e 	bgeu	r3,r2,200c6a4 <memmove+0xa8>
 200c630:	e0fffa17 	ldw	r3,-24(fp)
 200c634:	e0bfff17 	ldw	r2,-4(fp)
 200c638:	1885883a 	add	r2,r3,r2
 200c63c:	e0fff917 	ldw	r3,-28(fp)
 200c640:	1880182e 	bgeu	r3,r2,200c6a4 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 200c644:	e0fffa17 	ldw	r3,-24(fp)
 200c648:	e0bfff17 	ldw	r2,-4(fp)
 200c64c:	1885883a 	add	r2,r3,r2
 200c650:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 200c654:	e0fff917 	ldw	r3,-28(fp)
 200c658:	e0bfff17 	ldw	r2,-4(fp)
 200c65c:	1885883a 	add	r2,r3,r2
 200c660:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 200c664:	00000a06 	br	200c690 <memmove+0x94>
	{
	  *--dst = *--src;
 200c668:	e0bff917 	ldw	r2,-28(fp)
 200c66c:	10bfffc4 	addi	r2,r2,-1
 200c670:	e0bff915 	stw	r2,-28(fp)
 200c674:	e0bffa17 	ldw	r2,-24(fp)
 200c678:	10bfffc4 	addi	r2,r2,-1
 200c67c:	e0bffa15 	stw	r2,-24(fp)
 200c680:	e0bffa17 	ldw	r2,-24(fp)
 200c684:	10c00003 	ldbu	r3,0(r2)
 200c688:	e0bff917 	ldw	r2,-28(fp)
 200c68c:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 200c690:	e0bfff17 	ldw	r2,-4(fp)
 200c694:	10ffffc4 	addi	r3,r2,-1
 200c698:	e0ffff15 	stw	r3,-4(fp)
 200c69c:	103ff21e 	bne	r2,zero,200c668 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c6a0:	00005306 	br	200c7f0 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 200c6a4:	e0bfff17 	ldw	r2,-4(fp)
 200c6a8:	10800430 	cmpltui	r2,r2,16
 200c6ac:	10004c1e 	bne	r2,zero,200c7e0 <memmove+0x1e4>
 200c6b0:	e0fffa17 	ldw	r3,-24(fp)
 200c6b4:	e0bff917 	ldw	r2,-28(fp)
 200c6b8:	1884b03a 	or	r2,r3,r2
 200c6bc:	108000cc 	andi	r2,r2,3
 200c6c0:	1000471e 	bne	r2,zero,200c7e0 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 200c6c4:	e0bff917 	ldw	r2,-28(fp)
 200c6c8:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 200c6cc:	e0bffa17 	ldw	r2,-24(fp)
 200c6d0:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c6d4:	00002306 	br	200c764 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 200c6d8:	e0bffb17 	ldw	r2,-20(fp)
 200c6dc:	10c00104 	addi	r3,r2,4
 200c6e0:	e0fffb15 	stw	r3,-20(fp)
 200c6e4:	e0fffc17 	ldw	r3,-16(fp)
 200c6e8:	19000104 	addi	r4,r3,4
 200c6ec:	e13ffc15 	stw	r4,-16(fp)
 200c6f0:	18c00017 	ldw	r3,0(r3)
 200c6f4:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c6f8:	e0bffb17 	ldw	r2,-20(fp)
 200c6fc:	10c00104 	addi	r3,r2,4
 200c700:	e0fffb15 	stw	r3,-20(fp)
 200c704:	e0fffc17 	ldw	r3,-16(fp)
 200c708:	19000104 	addi	r4,r3,4
 200c70c:	e13ffc15 	stw	r4,-16(fp)
 200c710:	18c00017 	ldw	r3,0(r3)
 200c714:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c718:	e0bffb17 	ldw	r2,-20(fp)
 200c71c:	10c00104 	addi	r3,r2,4
 200c720:	e0fffb15 	stw	r3,-20(fp)
 200c724:	e0fffc17 	ldw	r3,-16(fp)
 200c728:	19000104 	addi	r4,r3,4
 200c72c:	e13ffc15 	stw	r4,-16(fp)
 200c730:	18c00017 	ldw	r3,0(r3)
 200c734:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c738:	e0bffb17 	ldw	r2,-20(fp)
 200c73c:	10c00104 	addi	r3,r2,4
 200c740:	e0fffb15 	stw	r3,-20(fp)
 200c744:	e0fffc17 	ldw	r3,-16(fp)
 200c748:	19000104 	addi	r4,r3,4
 200c74c:	e13ffc15 	stw	r4,-16(fp)
 200c750:	18c00017 	ldw	r3,0(r3)
 200c754:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 200c758:	e0bfff17 	ldw	r2,-4(fp)
 200c75c:	10bffc04 	addi	r2,r2,-16
 200c760:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c764:	e0bfff17 	ldw	r2,-4(fp)
 200c768:	10800428 	cmpgeui	r2,r2,16
 200c76c:	103fda1e 	bne	r2,zero,200c6d8 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c770:	00000b06 	br	200c7a0 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 200c774:	e0bffb17 	ldw	r2,-20(fp)
 200c778:	10c00104 	addi	r3,r2,4
 200c77c:	e0fffb15 	stw	r3,-20(fp)
 200c780:	e0fffc17 	ldw	r3,-16(fp)
 200c784:	19000104 	addi	r4,r3,4
 200c788:	e13ffc15 	stw	r4,-16(fp)
 200c78c:	18c00017 	ldw	r3,0(r3)
 200c790:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 200c794:	e0bfff17 	ldw	r2,-4(fp)
 200c798:	10bfff04 	addi	r2,r2,-4
 200c79c:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c7a0:	e0bfff17 	ldw	r2,-4(fp)
 200c7a4:	10800128 	cmpgeui	r2,r2,4
 200c7a8:	103ff21e 	bne	r2,zero,200c774 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 200c7ac:	e0bffb17 	ldw	r2,-20(fp)
 200c7b0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 200c7b4:	e0bffc17 	ldw	r2,-16(fp)
 200c7b8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 200c7bc:	00000806 	br	200c7e0 <memmove+0x1e4>
        {
          *dst++ = *src++;
 200c7c0:	e0bff917 	ldw	r2,-28(fp)
 200c7c4:	10c00044 	addi	r3,r2,1
 200c7c8:	e0fff915 	stw	r3,-28(fp)
 200c7cc:	e0fffa17 	ldw	r3,-24(fp)
 200c7d0:	19000044 	addi	r4,r3,1
 200c7d4:	e13ffa15 	stw	r4,-24(fp)
 200c7d8:	18c00003 	ldbu	r3,0(r3)
 200c7dc:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 200c7e0:	e0bfff17 	ldw	r2,-4(fp)
 200c7e4:	10ffffc4 	addi	r3,r2,-1
 200c7e8:	e0ffff15 	stw	r3,-4(fp)
 200c7ec:	103ff41e 	bne	r2,zero,200c7c0 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 200c7f0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200c7f4:	e037883a 	mov	sp,fp
 200c7f8:	df000017 	ldw	fp,0(sp)
 200c7fc:	dec00104 	addi	sp,sp,4
 200c800:	f800283a 	ret

0200c804 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 200c804:	defffa04 	addi	sp,sp,-24
 200c808:	dfc00515 	stw	ra,20(sp)
 200c80c:	df000415 	stw	fp,16(sp)
 200c810:	df000404 	addi	fp,sp,16
 200c814:	e13ffe15 	stw	r4,-8(fp)
 200c818:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 200c81c:	e0bffe17 	ldw	r2,-8(fp)
 200c820:	10801317 	ldw	r2,76(r2)
 200c824:	10000c1e 	bne	r2,zero,200c858 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 200c828:	01800844 	movi	r6,33
 200c82c:	01400104 	movi	r5,4
 200c830:	e13ffe17 	ldw	r4,-8(fp)
 200c834:	20108900 	call	2010890 <_calloc_r>
 200c838:	1007883a 	mov	r3,r2
 200c83c:	e0bffe17 	ldw	r2,-8(fp)
 200c840:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 200c844:	e0bffe17 	ldw	r2,-8(fp)
 200c848:	10801317 	ldw	r2,76(r2)
 200c84c:	1000021e 	bne	r2,zero,200c858 <_Balloc+0x54>
	{
	  return NULL;
 200c850:	0005883a 	mov	r2,zero
 200c854:	00003206 	br	200c920 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 200c858:	e0bffe17 	ldw	r2,-8(fp)
 200c85c:	10c01317 	ldw	r3,76(r2)
 200c860:	e0bfff17 	ldw	r2,-4(fp)
 200c864:	1085883a 	add	r2,r2,r2
 200c868:	1085883a 	add	r2,r2,r2
 200c86c:	1885883a 	add	r2,r3,r2
 200c870:	10800017 	ldw	r2,0(r2)
 200c874:	e0bffc15 	stw	r2,-16(fp)
 200c878:	e0bffc17 	ldw	r2,-16(fp)
 200c87c:	10000a26 	beq	r2,zero,200c8a8 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 200c880:	e0bffe17 	ldw	r2,-8(fp)
 200c884:	10c01317 	ldw	r3,76(r2)
 200c888:	e0bfff17 	ldw	r2,-4(fp)
 200c88c:	1085883a 	add	r2,r2,r2
 200c890:	1085883a 	add	r2,r2,r2
 200c894:	1885883a 	add	r2,r3,r2
 200c898:	e0fffc17 	ldw	r3,-16(fp)
 200c89c:	18c00017 	ldw	r3,0(r3)
 200c8a0:	10c00015 	stw	r3,0(r2)
 200c8a4:	00001706 	br	200c904 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 200c8a8:	00c00044 	movi	r3,1
 200c8ac:	e0bfff17 	ldw	r2,-4(fp)
 200c8b0:	1884983a 	sll	r2,r3,r2
 200c8b4:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 200c8b8:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200c8bc:	10800144 	addi	r2,r2,5
 200c8c0:	1085883a 	add	r2,r2,r2
 200c8c4:	1085883a 	add	r2,r2,r2
 200c8c8:	100d883a 	mov	r6,r2
 200c8cc:	01400044 	movi	r5,1
 200c8d0:	e13ffe17 	ldw	r4,-8(fp)
 200c8d4:	20108900 	call	2010890 <_calloc_r>
 200c8d8:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200c8dc:	e0bffc17 	ldw	r2,-16(fp)
 200c8e0:	1000021e 	bne	r2,zero,200c8ec <_Balloc+0xe8>
 200c8e4:	0005883a 	mov	r2,zero
 200c8e8:	00000d06 	br	200c920 <_Balloc+0x11c>
      rv->_k = k;
 200c8ec:	e0bffc17 	ldw	r2,-16(fp)
 200c8f0:	e0ffff17 	ldw	r3,-4(fp)
 200c8f4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 200c8f8:	e0bffc17 	ldw	r2,-16(fp)
 200c8fc:	e0fffd17 	ldw	r3,-12(fp)
 200c900:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 200c904:	e0bffc17 	ldw	r2,-16(fp)
 200c908:	10000415 	stw	zero,16(r2)
 200c90c:	e0bffc17 	ldw	r2,-16(fp)
 200c910:	10c00417 	ldw	r3,16(r2)
 200c914:	e0bffc17 	ldw	r2,-16(fp)
 200c918:	10c00315 	stw	r3,12(r2)
  return rv;
 200c91c:	e0bffc17 	ldw	r2,-16(fp)
}
 200c920:	e037883a 	mov	sp,fp
 200c924:	dfc00117 	ldw	ra,4(sp)
 200c928:	df000017 	ldw	fp,0(sp)
 200c92c:	dec00204 	addi	sp,sp,8
 200c930:	f800283a 	ret

0200c934 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 200c934:	defffd04 	addi	sp,sp,-12
 200c938:	df000215 	stw	fp,8(sp)
 200c93c:	df000204 	addi	fp,sp,8
 200c940:	e13ffe15 	stw	r4,-8(fp)
 200c944:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 200c948:	e0bfff17 	ldw	r2,-4(fp)
 200c94c:	10001326 	beq	r2,zero,200c99c <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 200c950:	e0bffe17 	ldw	r2,-8(fp)
 200c954:	10c01317 	ldw	r3,76(r2)
 200c958:	e0bfff17 	ldw	r2,-4(fp)
 200c95c:	10800117 	ldw	r2,4(r2)
 200c960:	1085883a 	add	r2,r2,r2
 200c964:	1085883a 	add	r2,r2,r2
 200c968:	1885883a 	add	r2,r3,r2
 200c96c:	10c00017 	ldw	r3,0(r2)
 200c970:	e0bfff17 	ldw	r2,-4(fp)
 200c974:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 200c978:	e0bffe17 	ldw	r2,-8(fp)
 200c97c:	10c01317 	ldw	r3,76(r2)
 200c980:	e0bfff17 	ldw	r2,-4(fp)
 200c984:	10800117 	ldw	r2,4(r2)
 200c988:	1085883a 	add	r2,r2,r2
 200c98c:	1085883a 	add	r2,r2,r2
 200c990:	1885883a 	add	r2,r3,r2
 200c994:	e0ffff17 	ldw	r3,-4(fp)
 200c998:	10c00015 	stw	r3,0(r2)
    }
}
 200c99c:	0001883a 	nop
 200c9a0:	e037883a 	mov	sp,fp
 200c9a4:	df000017 	ldw	fp,0(sp)
 200c9a8:	dec00104 	addi	sp,sp,4
 200c9ac:	f800283a 	ret

0200c9b0 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 200c9b0:	defff304 	addi	sp,sp,-52
 200c9b4:	dfc00c15 	stw	ra,48(sp)
 200c9b8:	df000b15 	stw	fp,44(sp)
 200c9bc:	df000b04 	addi	fp,sp,44
 200c9c0:	e13ffc15 	stw	r4,-16(fp)
 200c9c4:	e17ffd15 	stw	r5,-12(fp)
 200c9c8:	e1bffe15 	stw	r6,-8(fp)
 200c9cc:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 200c9d0:	e0bffd17 	ldw	r2,-12(fp)
 200c9d4:	10800417 	ldw	r2,16(r2)
 200c9d8:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200c9dc:	e0bffd17 	ldw	r2,-12(fp)
 200c9e0:	10800504 	addi	r2,r2,20
 200c9e4:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 200c9e8:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 200c9ec:	e0bff617 	ldw	r2,-40(fp)
 200c9f0:	10800017 	ldw	r2,0(r2)
 200c9f4:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 200c9f8:	e0bff817 	ldw	r2,-32(fp)
 200c9fc:	10ffffcc 	andi	r3,r2,65535
 200ca00:	e0bffe17 	ldw	r2,-8(fp)
 200ca04:	1887383a 	mul	r3,r3,r2
 200ca08:	e0bfff17 	ldw	r2,-4(fp)
 200ca0c:	1885883a 	add	r2,r3,r2
 200ca10:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 200ca14:	e0bff817 	ldw	r2,-32(fp)
 200ca18:	1006d43a 	srli	r3,r2,16
 200ca1c:	e0bffe17 	ldw	r2,-8(fp)
 200ca20:	1887383a 	mul	r3,r3,r2
 200ca24:	e0bff917 	ldw	r2,-28(fp)
 200ca28:	1004d43a 	srli	r2,r2,16
 200ca2c:	1885883a 	add	r2,r3,r2
 200ca30:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 200ca34:	e0bffa17 	ldw	r2,-24(fp)
 200ca38:	1004d43a 	srli	r2,r2,16
 200ca3c:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 200ca40:	e0bff617 	ldw	r2,-40(fp)
 200ca44:	10c00104 	addi	r3,r2,4
 200ca48:	e0fff615 	stw	r3,-40(fp)
 200ca4c:	e0fffa17 	ldw	r3,-24(fp)
 200ca50:	1808943a 	slli	r4,r3,16
 200ca54:	e0fff917 	ldw	r3,-28(fp)
 200ca58:	18ffffcc 	andi	r3,r3,65535
 200ca5c:	20c7883a 	add	r3,r4,r3
 200ca60:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 200ca64:	e0bff517 	ldw	r2,-44(fp)
 200ca68:	10800044 	addi	r2,r2,1
 200ca6c:	e0bff515 	stw	r2,-44(fp)
 200ca70:	e0fff517 	ldw	r3,-44(fp)
 200ca74:	e0bff717 	ldw	r2,-36(fp)
 200ca78:	18bfdc16 	blt	r3,r2,200c9ec <__multadd+0x3c>
  if (a)
 200ca7c:	e0bfff17 	ldw	r2,-4(fp)
 200ca80:	10002a26 	beq	r2,zero,200cb2c <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 200ca84:	e0bffd17 	ldw	r2,-12(fp)
 200ca88:	10800217 	ldw	r2,8(r2)
 200ca8c:	e0fff717 	ldw	r3,-36(fp)
 200ca90:	18801916 	blt	r3,r2,200caf8 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 200ca94:	e0bffd17 	ldw	r2,-12(fp)
 200ca98:	10800117 	ldw	r2,4(r2)
 200ca9c:	10800044 	addi	r2,r2,1
 200caa0:	100b883a 	mov	r5,r2
 200caa4:	e13ffc17 	ldw	r4,-16(fp)
 200caa8:	200c8040 	call	200c804 <_Balloc>
 200caac:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 200cab0:	e0bffb17 	ldw	r2,-20(fp)
 200cab4:	10c00304 	addi	r3,r2,12
 200cab8:	e0bffd17 	ldw	r2,-12(fp)
 200cabc:	11000304 	addi	r4,r2,12
 200cac0:	e0bffd17 	ldw	r2,-12(fp)
 200cac4:	10800417 	ldw	r2,16(r2)
 200cac8:	10800084 	addi	r2,r2,2
 200cacc:	1085883a 	add	r2,r2,r2
 200cad0:	1085883a 	add	r2,r2,r2
 200cad4:	100d883a 	mov	r6,r2
 200cad8:	200b883a 	mov	r5,r4
 200cadc:	1809883a 	mov	r4,r3
 200cae0:	2004c5c0 	call	2004c5c <memcpy>
	  Bfree (ptr, b);
 200cae4:	e17ffd17 	ldw	r5,-12(fp)
 200cae8:	e13ffc17 	ldw	r4,-16(fp)
 200caec:	200c9340 	call	200c934 <_Bfree>
	  b = b1;
 200caf0:	e0bffb17 	ldw	r2,-20(fp)
 200caf4:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 200caf8:	e0bff717 	ldw	r2,-36(fp)
 200cafc:	10c00044 	addi	r3,r2,1
 200cb00:	e0fff715 	stw	r3,-36(fp)
 200cb04:	e0ffff17 	ldw	r3,-4(fp)
 200cb08:	e13ffd17 	ldw	r4,-12(fp)
 200cb0c:	10800144 	addi	r2,r2,5
 200cb10:	1085883a 	add	r2,r2,r2
 200cb14:	1085883a 	add	r2,r2,r2
 200cb18:	2085883a 	add	r2,r4,r2
 200cb1c:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 200cb20:	e0bffd17 	ldw	r2,-12(fp)
 200cb24:	e0fff717 	ldw	r3,-36(fp)
 200cb28:	10c00415 	stw	r3,16(r2)
    }
  return b;
 200cb2c:	e0bffd17 	ldw	r2,-12(fp)
}
 200cb30:	e037883a 	mov	sp,fp
 200cb34:	dfc00117 	ldw	ra,4(sp)
 200cb38:	df000017 	ldw	fp,0(sp)
 200cb3c:	dec00204 	addi	sp,sp,8
 200cb40:	f800283a 	ret

0200cb44 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 200cb44:	defff504 	addi	sp,sp,-44
 200cb48:	dfc00a15 	stw	ra,40(sp)
 200cb4c:	df000915 	stw	fp,36(sp)
 200cb50:	df000904 	addi	fp,sp,36
 200cb54:	e13ffc15 	stw	r4,-16(fp)
 200cb58:	e17ffd15 	stw	r5,-12(fp)
 200cb5c:	e1bffe15 	stw	r6,-8(fp)
 200cb60:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 200cb64:	e0bfff17 	ldw	r2,-4(fp)
 200cb68:	10800204 	addi	r2,r2,8
 200cb6c:	01400244 	movi	r5,9
 200cb70:	1009883a 	mov	r4,r2
 200cb74:	2004aa80 	call	2004aa8 <__divsi3>
 200cb78:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200cb7c:	e03ff915 	stw	zero,-28(fp)
 200cb80:	00800044 	movi	r2,1
 200cb84:	e0bffa15 	stw	r2,-24(fp)
 200cb88:	00000606 	br	200cba4 <__s2b+0x60>
 200cb8c:	e0bffa17 	ldw	r2,-24(fp)
 200cb90:	1085883a 	add	r2,r2,r2
 200cb94:	e0bffa15 	stw	r2,-24(fp)
 200cb98:	e0bff917 	ldw	r2,-28(fp)
 200cb9c:	10800044 	addi	r2,r2,1
 200cba0:	e0bff915 	stw	r2,-28(fp)
 200cba4:	e0bffb17 	ldw	r2,-20(fp)
 200cba8:	e0fffa17 	ldw	r3,-24(fp)
 200cbac:	18bff716 	blt	r3,r2,200cb8c <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 200cbb0:	e17ff917 	ldw	r5,-28(fp)
 200cbb4:	e13ffc17 	ldw	r4,-16(fp)
 200cbb8:	200c8040 	call	200c804 <_Balloc>
 200cbbc:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 200cbc0:	e0bff717 	ldw	r2,-36(fp)
 200cbc4:	e0c00217 	ldw	r3,8(fp)
 200cbc8:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200cbcc:	e0bff717 	ldw	r2,-36(fp)
 200cbd0:	00c00044 	movi	r3,1
 200cbd4:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 200cbd8:	00800244 	movi	r2,9
 200cbdc:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 200cbe0:	e0bffe17 	ldw	r2,-8(fp)
 200cbe4:	10800290 	cmplti	r2,r2,10
 200cbe8:	10001b1e 	bne	r2,zero,200cc58 <__s2b+0x114>
    {
      s += 9;
 200cbec:	e0bffd17 	ldw	r2,-12(fp)
 200cbf0:	10800244 	addi	r2,r2,9
 200cbf4:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 200cbf8:	e0bffd17 	ldw	r2,-12(fp)
 200cbfc:	10c00044 	addi	r3,r2,1
 200cc00:	e0fffd15 	stw	r3,-12(fp)
 200cc04:	10800003 	ldbu	r2,0(r2)
 200cc08:	10803fcc 	andi	r2,r2,255
 200cc0c:	1080201c 	xori	r2,r2,128
 200cc10:	10bfe004 	addi	r2,r2,-128
 200cc14:	10bff404 	addi	r2,r2,-48
 200cc18:	100f883a 	mov	r7,r2
 200cc1c:	01800284 	movi	r6,10
 200cc20:	e17ff717 	ldw	r5,-36(fp)
 200cc24:	e13ffc17 	ldw	r4,-16(fp)
 200cc28:	200c9b00 	call	200c9b0 <__multadd>
 200cc2c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 200cc30:	e0bff817 	ldw	r2,-32(fp)
 200cc34:	10800044 	addi	r2,r2,1
 200cc38:	e0bff815 	stw	r2,-32(fp)
 200cc3c:	e0fff817 	ldw	r3,-32(fp)
 200cc40:	e0bffe17 	ldw	r2,-8(fp)
 200cc44:	18bfec16 	blt	r3,r2,200cbf8 <__s2b+0xb4>
      s++;
 200cc48:	e0bffd17 	ldw	r2,-12(fp)
 200cc4c:	10800044 	addi	r2,r2,1
 200cc50:	e0bffd15 	stw	r2,-12(fp)
 200cc54:	00001506 	br	200ccac <__s2b+0x168>
    }
  else
    s += 10;
 200cc58:	e0bffd17 	ldw	r2,-12(fp)
 200cc5c:	10800284 	addi	r2,r2,10
 200cc60:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 200cc64:	00001106 	br	200ccac <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 200cc68:	e0bffd17 	ldw	r2,-12(fp)
 200cc6c:	10c00044 	addi	r3,r2,1
 200cc70:	e0fffd15 	stw	r3,-12(fp)
 200cc74:	10800003 	ldbu	r2,0(r2)
 200cc78:	10803fcc 	andi	r2,r2,255
 200cc7c:	1080201c 	xori	r2,r2,128
 200cc80:	10bfe004 	addi	r2,r2,-128
 200cc84:	10bff404 	addi	r2,r2,-48
 200cc88:	100f883a 	mov	r7,r2
 200cc8c:	01800284 	movi	r6,10
 200cc90:	e17ff717 	ldw	r5,-36(fp)
 200cc94:	e13ffc17 	ldw	r4,-16(fp)
 200cc98:	200c9b00 	call	200c9b0 <__multadd>
 200cc9c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 200cca0:	e0bff817 	ldw	r2,-32(fp)
 200cca4:	10800044 	addi	r2,r2,1
 200cca8:	e0bff815 	stw	r2,-32(fp)
 200ccac:	e0fff817 	ldw	r3,-32(fp)
 200ccb0:	e0bfff17 	ldw	r2,-4(fp)
 200ccb4:	18bfec16 	blt	r3,r2,200cc68 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 200ccb8:	e0bff717 	ldw	r2,-36(fp)
}
 200ccbc:	e037883a 	mov	sp,fp
 200ccc0:	dfc00117 	ldw	ra,4(sp)
 200ccc4:	df000017 	ldw	fp,0(sp)
 200ccc8:	dec00204 	addi	sp,sp,8
 200cccc:	f800283a 	ret

0200ccd0 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 200ccd0:	defffe04 	addi	sp,sp,-8
 200ccd4:	df000115 	stw	fp,4(sp)
 200ccd8:	dc000015 	stw	r16,0(sp)
 200ccdc:	df000104 	addi	fp,sp,4
 200cce0:	2005883a 	mov	r2,r4
  register int k = 0;
 200cce4:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 200cce8:	10ffffec 	andhi	r3,r2,65535
 200ccec:	1800021e 	bne	r3,zero,200ccf8 <__hi0bits+0x28>
    {
      k = 16;
 200ccf0:	04000404 	movi	r16,16
      x <<= 16;
 200ccf4:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 200ccf8:	10ffc02c 	andhi	r3,r2,65280
 200ccfc:	1800021e 	bne	r3,zero,200cd08 <__hi0bits+0x38>
    {
      k += 8;
 200cd00:	84000204 	addi	r16,r16,8
      x <<= 8;
 200cd04:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 200cd08:	10fc002c 	andhi	r3,r2,61440
 200cd0c:	1800021e 	bne	r3,zero,200cd18 <__hi0bits+0x48>
    {
      k += 4;
 200cd10:	84000104 	addi	r16,r16,4
      x <<= 4;
 200cd14:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 200cd18:	10f0002c 	andhi	r3,r2,49152
 200cd1c:	1800031e 	bne	r3,zero,200cd2c <__hi0bits+0x5c>
    {
      k += 2;
 200cd20:	84000084 	addi	r16,r16,2
      x <<= 2;
 200cd24:	1085883a 	add	r2,r2,r2
 200cd28:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 200cd2c:	1007883a 	mov	r3,r2
 200cd30:	18000516 	blt	r3,zero,200cd48 <__hi0bits+0x78>
    {
      k++;
 200cd34:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 200cd38:	1090002c 	andhi	r2,r2,16384
 200cd3c:	1000021e 	bne	r2,zero,200cd48 <__hi0bits+0x78>
	return 32;
 200cd40:	00800804 	movi	r2,32
 200cd44:	00000106 	br	200cd4c <__hi0bits+0x7c>
    }
  return k;
 200cd48:	8005883a 	mov	r2,r16
}
 200cd4c:	e6ffff04 	addi	sp,fp,-4
 200cd50:	df000117 	ldw	fp,4(sp)
 200cd54:	dc000017 	ldw	r16,0(sp)
 200cd58:	dec00204 	addi	sp,sp,8
 200cd5c:	f800283a 	ret

0200cd60 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 200cd60:	defffc04 	addi	sp,sp,-16
 200cd64:	df000315 	stw	fp,12(sp)
 200cd68:	dc400215 	stw	r17,8(sp)
 200cd6c:	dc000115 	stw	r16,4(sp)
 200cd70:	df000304 	addi	fp,sp,12
 200cd74:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 200cd78:	e0bffd17 	ldw	r2,-12(fp)
 200cd7c:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 200cd80:	808001cc 	andi	r2,r16,7
 200cd84:	10001026 	beq	r2,zero,200cdc8 <__lo0bits+0x68>
    {
      if (x & 1)
 200cd88:	8080004c 	andi	r2,r16,1
 200cd8c:	10000226 	beq	r2,zero,200cd98 <__lo0bits+0x38>
	return 0;
 200cd90:	0005883a 	mov	r2,zero
 200cd94:	00002706 	br	200ce34 <__lo0bits+0xd4>
      if (x & 2)
 200cd98:	8080008c 	andi	r2,r16,2
 200cd9c:	10000526 	beq	r2,zero,200cdb4 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 200cda0:	8006d07a 	srli	r3,r16,1
 200cda4:	e0bffd17 	ldw	r2,-12(fp)
 200cda8:	10c00015 	stw	r3,0(r2)
	  return 1;
 200cdac:	00800044 	movi	r2,1
 200cdb0:	00002006 	br	200ce34 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 200cdb4:	8006d0ba 	srli	r3,r16,2
 200cdb8:	e0bffd17 	ldw	r2,-12(fp)
 200cdbc:	10c00015 	stw	r3,0(r2)
      return 2;
 200cdc0:	00800084 	movi	r2,2
 200cdc4:	00001b06 	br	200ce34 <__lo0bits+0xd4>
    }
  k = 0;
 200cdc8:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200cdcc:	80bfffcc 	andi	r2,r16,65535
 200cdd0:	1000021e 	bne	r2,zero,200cddc <__lo0bits+0x7c>
    {
      k = 16;
 200cdd4:	04400404 	movi	r17,16
      x >>= 16;
 200cdd8:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200cddc:	80803fcc 	andi	r2,r16,255
 200cde0:	1000021e 	bne	r2,zero,200cdec <__lo0bits+0x8c>
    {
      k += 8;
 200cde4:	8c400204 	addi	r17,r17,8
      x >>= 8;
 200cde8:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 200cdec:	808003cc 	andi	r2,r16,15
 200cdf0:	1000021e 	bne	r2,zero,200cdfc <__lo0bits+0x9c>
    {
      k += 4;
 200cdf4:	8c400104 	addi	r17,r17,4
      x >>= 4;
 200cdf8:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 200cdfc:	808000cc 	andi	r2,r16,3
 200ce00:	1000021e 	bne	r2,zero,200ce0c <__lo0bits+0xac>
    {
      k += 2;
 200ce04:	8c400084 	addi	r17,r17,2
      x >>= 2;
 200ce08:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 200ce0c:	8080004c 	andi	r2,r16,1
 200ce10:	1000051e 	bne	r2,zero,200ce28 <__lo0bits+0xc8>
    {
      k++;
 200ce14:	8c400044 	addi	r17,r17,1
      x >>= 1;
 200ce18:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 200ce1c:	8000021e 	bne	r16,zero,200ce28 <__lo0bits+0xc8>
	return 32;
 200ce20:	00800804 	movi	r2,32
 200ce24:	00000306 	br	200ce34 <__lo0bits+0xd4>
    }
  *y = x;
 200ce28:	e0bffd17 	ldw	r2,-12(fp)
 200ce2c:	14000015 	stw	r16,0(r2)
  return k;
 200ce30:	8805883a 	mov	r2,r17
}
 200ce34:	e6fffe04 	addi	sp,fp,-8
 200ce38:	df000217 	ldw	fp,8(sp)
 200ce3c:	dc400117 	ldw	r17,4(sp)
 200ce40:	dc000017 	ldw	r16,0(sp)
 200ce44:	dec00304 	addi	sp,sp,12
 200ce48:	f800283a 	ret

0200ce4c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200ce4c:	defffb04 	addi	sp,sp,-20
 200ce50:	dfc00415 	stw	ra,16(sp)
 200ce54:	df000315 	stw	fp,12(sp)
 200ce58:	df000304 	addi	fp,sp,12
 200ce5c:	e13ffe15 	stw	r4,-8(fp)
 200ce60:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 200ce64:	01400044 	movi	r5,1
 200ce68:	e13ffe17 	ldw	r4,-8(fp)
 200ce6c:	200c8040 	call	200c804 <_Balloc>
 200ce70:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 200ce74:	e0ffff17 	ldw	r3,-4(fp)
 200ce78:	e0bffd17 	ldw	r2,-12(fp)
 200ce7c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200ce80:	e0bffd17 	ldw	r2,-12(fp)
 200ce84:	00c00044 	movi	r3,1
 200ce88:	10c00415 	stw	r3,16(r2)
  return b;
 200ce8c:	e0bffd17 	ldw	r2,-12(fp)
}
 200ce90:	e037883a 	mov	sp,fp
 200ce94:	dfc00117 	ldw	ra,4(sp)
 200ce98:	df000017 	ldw	fp,0(sp)
 200ce9c:	dec00204 	addi	sp,sp,8
 200cea0:	f800283a 	ret

0200cea4 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 200cea4:	deffeb04 	addi	sp,sp,-84
 200cea8:	dfc01415 	stw	ra,80(sp)
 200ceac:	df001315 	stw	fp,76(sp)
 200ceb0:	df001304 	addi	fp,sp,76
 200ceb4:	e13ffd15 	stw	r4,-12(fp)
 200ceb8:	e17ffe15 	stw	r5,-8(fp)
 200cebc:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 200cec0:	e0bffe17 	ldw	r2,-8(fp)
 200cec4:	10c00417 	ldw	r3,16(r2)
 200cec8:	e0bfff17 	ldw	r2,-4(fp)
 200cecc:	10800417 	ldw	r2,16(r2)
 200ced0:	1880060e 	bge	r3,r2,200ceec <__multiply+0x48>
    {
      c = a;
 200ced4:	e0bffe17 	ldw	r2,-8(fp)
 200ced8:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200cedc:	e0bfff17 	ldw	r2,-4(fp)
 200cee0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200cee4:	e0bff517 	ldw	r2,-44(fp)
 200cee8:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 200ceec:	e0bffe17 	ldw	r2,-8(fp)
 200cef0:	10800117 	ldw	r2,4(r2)
 200cef4:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 200cef8:	e0bffe17 	ldw	r2,-8(fp)
 200cefc:	10800417 	ldw	r2,16(r2)
 200cf00:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 200cf04:	e0bfff17 	ldw	r2,-4(fp)
 200cf08:	10800417 	ldw	r2,16(r2)
 200cf0c:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 200cf10:	e0fff617 	ldw	r3,-40(fp)
 200cf14:	e0bff717 	ldw	r2,-36(fp)
 200cf18:	1885883a 	add	r2,r3,r2
 200cf1c:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 200cf20:	e0bffe17 	ldw	r2,-8(fp)
 200cf24:	10c00217 	ldw	r3,8(r2)
 200cf28:	e0bfee17 	ldw	r2,-72(fp)
 200cf2c:	1880030e 	bge	r3,r2,200cf3c <__multiply+0x98>
    k++;
 200cf30:	e0bfed17 	ldw	r2,-76(fp)
 200cf34:	10800044 	addi	r2,r2,1
 200cf38:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 200cf3c:	e17fed17 	ldw	r5,-76(fp)
 200cf40:	e13ffd17 	ldw	r4,-12(fp)
 200cf44:	200c8040 	call	200c804 <_Balloc>
 200cf48:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cf4c:	e0bff517 	ldw	r2,-44(fp)
 200cf50:	10800504 	addi	r2,r2,20
 200cf54:	e0bff015 	stw	r2,-64(fp)
 200cf58:	e0bfee17 	ldw	r2,-72(fp)
 200cf5c:	1085883a 	add	r2,r2,r2
 200cf60:	1085883a 	add	r2,r2,r2
 200cf64:	1007883a 	mov	r3,r2
 200cf68:	e0bff017 	ldw	r2,-64(fp)
 200cf6c:	10c5883a 	add	r2,r2,r3
 200cf70:	e0bff815 	stw	r2,-32(fp)
 200cf74:	00000506 	br	200cf8c <__multiply+0xe8>
    *x = 0;
 200cf78:	e0bff017 	ldw	r2,-64(fp)
 200cf7c:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cf80:	e0bff017 	ldw	r2,-64(fp)
 200cf84:	10800104 	addi	r2,r2,4
 200cf88:	e0bff015 	stw	r2,-64(fp)
 200cf8c:	e0fff017 	ldw	r3,-64(fp)
 200cf90:	e0bff817 	ldw	r2,-32(fp)
 200cf94:	18bff836 	bltu	r3,r2,200cf78 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 200cf98:	e0bffe17 	ldw	r2,-8(fp)
 200cf9c:	10800504 	addi	r2,r2,20
 200cfa0:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 200cfa4:	e0bff617 	ldw	r2,-40(fp)
 200cfa8:	1085883a 	add	r2,r2,r2
 200cfac:	1085883a 	add	r2,r2,r2
 200cfb0:	1007883a 	mov	r3,r2
 200cfb4:	e0bff817 	ldw	r2,-32(fp)
 200cfb8:	10c5883a 	add	r2,r2,r3
 200cfbc:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200cfc0:	e0bfff17 	ldw	r2,-4(fp)
 200cfc4:	10800504 	addi	r2,r2,20
 200cfc8:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 200cfcc:	e0bff717 	ldw	r2,-36(fp)
 200cfd0:	1085883a 	add	r2,r2,r2
 200cfd4:	1085883a 	add	r2,r2,r2
 200cfd8:	1007883a 	mov	r3,r2
 200cfdc:	e0bff117 	ldw	r2,-60(fp)
 200cfe0:	10c5883a 	add	r2,r2,r3
 200cfe4:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 200cfe8:	e0bff517 	ldw	r2,-44(fp)
 200cfec:	10800504 	addi	r2,r2,20
 200cff0:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200cff4:	00007d06 	br	200d1ec <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 200cff8:	e0bff117 	ldw	r2,-60(fp)
 200cffc:	10800017 	ldw	r2,0(r2)
 200d000:	10bfffcc 	andi	r2,r2,65535
 200d004:	e0bffb15 	stw	r2,-20(fp)
 200d008:	e0bffb17 	ldw	r2,-20(fp)
 200d00c:	10003426 	beq	r2,zero,200d0e0 <__multiply+0x23c>
	{
	  x = xa;
 200d010:	e0bff817 	ldw	r2,-32(fp)
 200d014:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200d018:	e0bff317 	ldw	r2,-52(fp)
 200d01c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200d020:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 200d024:	e0bff017 	ldw	r2,-64(fp)
 200d028:	10800017 	ldw	r2,0(r2)
 200d02c:	10ffffcc 	andi	r3,r2,65535
 200d030:	e0bffb17 	ldw	r2,-20(fp)
 200d034:	1887383a 	mul	r3,r3,r2
 200d038:	e0bff217 	ldw	r2,-56(fp)
 200d03c:	10800017 	ldw	r2,0(r2)
 200d040:	10bfffcc 	andi	r2,r2,65535
 200d044:	1887883a 	add	r3,r3,r2
 200d048:	e0bfef17 	ldw	r2,-68(fp)
 200d04c:	1885883a 	add	r2,r3,r2
 200d050:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200d054:	e0bffc17 	ldw	r2,-16(fp)
 200d058:	1004d43a 	srli	r2,r2,16
 200d05c:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 200d060:	e0bff017 	ldw	r2,-64(fp)
 200d064:	10c00104 	addi	r3,r2,4
 200d068:	e0fff015 	stw	r3,-64(fp)
 200d06c:	10800017 	ldw	r2,0(r2)
 200d070:	1006d43a 	srli	r3,r2,16
 200d074:	e0bffb17 	ldw	r2,-20(fp)
 200d078:	1887383a 	mul	r3,r3,r2
 200d07c:	e0bff217 	ldw	r2,-56(fp)
 200d080:	10800017 	ldw	r2,0(r2)
 200d084:	1004d43a 	srli	r2,r2,16
 200d088:	1887883a 	add	r3,r3,r2
 200d08c:	e0bfef17 	ldw	r2,-68(fp)
 200d090:	1885883a 	add	r2,r3,r2
 200d094:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200d098:	e0bff417 	ldw	r2,-48(fp)
 200d09c:	1004d43a 	srli	r2,r2,16
 200d0a0:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 200d0a4:	e0bff217 	ldw	r2,-56(fp)
 200d0a8:	10c00104 	addi	r3,r2,4
 200d0ac:	e0fff215 	stw	r3,-56(fp)
 200d0b0:	e0fff417 	ldw	r3,-48(fp)
 200d0b4:	1808943a 	slli	r4,r3,16
 200d0b8:	e0fffc17 	ldw	r3,-16(fp)
 200d0bc:	18ffffcc 	andi	r3,r3,65535
 200d0c0:	20c6b03a 	or	r3,r4,r3
 200d0c4:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 200d0c8:	e0fff017 	ldw	r3,-64(fp)
 200d0cc:	e0bff917 	ldw	r2,-28(fp)
 200d0d0:	18bfd436 	bltu	r3,r2,200d024 <__multiply+0x180>
	  *xc = carry;
 200d0d4:	e0bff217 	ldw	r2,-56(fp)
 200d0d8:	e0ffef17 	ldw	r3,-68(fp)
 200d0dc:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 200d0e0:	e0bff117 	ldw	r2,-60(fp)
 200d0e4:	10800017 	ldw	r2,0(r2)
 200d0e8:	1004d43a 	srli	r2,r2,16
 200d0ec:	e0bffb15 	stw	r2,-20(fp)
 200d0f0:	e0bffb17 	ldw	r2,-20(fp)
 200d0f4:	10003726 	beq	r2,zero,200d1d4 <__multiply+0x330>
	{
	  x = xa;
 200d0f8:	e0bff817 	ldw	r2,-32(fp)
 200d0fc:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200d100:	e0bff317 	ldw	r2,-52(fp)
 200d104:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200d108:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 200d10c:	e0bff217 	ldw	r2,-56(fp)
 200d110:	10800017 	ldw	r2,0(r2)
 200d114:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 200d118:	e0bff017 	ldw	r2,-64(fp)
 200d11c:	10800017 	ldw	r2,0(r2)
 200d120:	10ffffcc 	andi	r3,r2,65535
 200d124:	e0bffb17 	ldw	r2,-20(fp)
 200d128:	1887383a 	mul	r3,r3,r2
 200d12c:	e0bff217 	ldw	r2,-56(fp)
 200d130:	10800017 	ldw	r2,0(r2)
 200d134:	1004d43a 	srli	r2,r2,16
 200d138:	1887883a 	add	r3,r3,r2
 200d13c:	e0bfef17 	ldw	r2,-68(fp)
 200d140:	1885883a 	add	r2,r3,r2
 200d144:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200d148:	e0bffc17 	ldw	r2,-16(fp)
 200d14c:	1004d43a 	srli	r2,r2,16
 200d150:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 200d154:	e0bff217 	ldw	r2,-56(fp)
 200d158:	10c00104 	addi	r3,r2,4
 200d15c:	e0fff215 	stw	r3,-56(fp)
 200d160:	e0fffc17 	ldw	r3,-16(fp)
 200d164:	1808943a 	slli	r4,r3,16
 200d168:	e0fff417 	ldw	r3,-48(fp)
 200d16c:	18ffffcc 	andi	r3,r3,65535
 200d170:	20c6b03a 	or	r3,r4,r3
 200d174:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 200d178:	e0bff017 	ldw	r2,-64(fp)
 200d17c:	10c00104 	addi	r3,r2,4
 200d180:	e0fff015 	stw	r3,-64(fp)
 200d184:	10800017 	ldw	r2,0(r2)
 200d188:	1006d43a 	srli	r3,r2,16
 200d18c:	e0bffb17 	ldw	r2,-20(fp)
 200d190:	1887383a 	mul	r3,r3,r2
 200d194:	e0bff217 	ldw	r2,-56(fp)
 200d198:	10800017 	ldw	r2,0(r2)
 200d19c:	10bfffcc 	andi	r2,r2,65535
 200d1a0:	1887883a 	add	r3,r3,r2
 200d1a4:	e0bfef17 	ldw	r2,-68(fp)
 200d1a8:	1885883a 	add	r2,r3,r2
 200d1ac:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200d1b0:	e0bff417 	ldw	r2,-48(fp)
 200d1b4:	1004d43a 	srli	r2,r2,16
 200d1b8:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 200d1bc:	e0fff017 	ldw	r3,-64(fp)
 200d1c0:	e0bff917 	ldw	r2,-28(fp)
 200d1c4:	18bfd436 	bltu	r3,r2,200d118 <__multiply+0x274>
	  *xc = z2;
 200d1c8:	e0bff217 	ldw	r2,-56(fp)
 200d1cc:	e0fff417 	ldw	r3,-48(fp)
 200d1d0:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200d1d4:	e0bff117 	ldw	r2,-60(fp)
 200d1d8:	10800104 	addi	r2,r2,4
 200d1dc:	e0bff115 	stw	r2,-60(fp)
 200d1e0:	e0bff317 	ldw	r2,-52(fp)
 200d1e4:	10800104 	addi	r2,r2,4
 200d1e8:	e0bff315 	stw	r2,-52(fp)
 200d1ec:	e0fff117 	ldw	r3,-60(fp)
 200d1f0:	e0bffa17 	ldw	r2,-24(fp)
 200d1f4:	18bf8036 	bltu	r3,r2,200cff8 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 200d1f8:	e0bff517 	ldw	r2,-44(fp)
 200d1fc:	10800504 	addi	r2,r2,20
 200d200:	e0bff315 	stw	r2,-52(fp)
 200d204:	e0bfee17 	ldw	r2,-72(fp)
 200d208:	1085883a 	add	r2,r2,r2
 200d20c:	1085883a 	add	r2,r2,r2
 200d210:	1007883a 	mov	r3,r2
 200d214:	e0bff317 	ldw	r2,-52(fp)
 200d218:	10c5883a 	add	r2,r2,r3
 200d21c:	e0bff215 	stw	r2,-56(fp)
 200d220:	00000306 	br	200d230 <__multiply+0x38c>
 200d224:	e0bfee17 	ldw	r2,-72(fp)
 200d228:	10bfffc4 	addi	r2,r2,-1
 200d22c:	e0bfee15 	stw	r2,-72(fp)
 200d230:	e0bfee17 	ldw	r2,-72(fp)
 200d234:	0080060e 	bge	zero,r2,200d250 <__multiply+0x3ac>
 200d238:	e0bff217 	ldw	r2,-56(fp)
 200d23c:	10bfff04 	addi	r2,r2,-4
 200d240:	e0bff215 	stw	r2,-56(fp)
 200d244:	e0bff217 	ldw	r2,-56(fp)
 200d248:	10800017 	ldw	r2,0(r2)
 200d24c:	103ff526 	beq	r2,zero,200d224 <__multiply+0x380>
  c->_wds = wc;
 200d250:	e0bff517 	ldw	r2,-44(fp)
 200d254:	e0ffee17 	ldw	r3,-72(fp)
 200d258:	10c00415 	stw	r3,16(r2)
  return c;
 200d25c:	e0bff517 	ldw	r2,-44(fp)
}
 200d260:	e037883a 	mov	sp,fp
 200d264:	dfc00117 	ldw	ra,4(sp)
 200d268:	df000017 	ldw	fp,0(sp)
 200d26c:	dec00204 	addi	sp,sp,8
 200d270:	f800283a 	ret

0200d274 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200d274:	defff704 	addi	sp,sp,-36
 200d278:	dfc00815 	stw	ra,32(sp)
 200d27c:	df000715 	stw	fp,28(sp)
 200d280:	df000704 	addi	fp,sp,28
 200d284:	e13ffd15 	stw	r4,-12(fp)
 200d288:	e17ffe15 	stw	r5,-8(fp)
 200d28c:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 200d290:	e0bfff17 	ldw	r2,-4(fp)
 200d294:	108000cc 	andi	r2,r2,3
 200d298:	e0bffb15 	stw	r2,-20(fp)
 200d29c:	e0bffb17 	ldw	r2,-20(fp)
 200d2a0:	10000e26 	beq	r2,zero,200d2dc <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 200d2a4:	e0bffb17 	ldw	r2,-20(fp)
 200d2a8:	10ffffc4 	addi	r3,r2,-1
 200d2ac:	008080b4 	movhi	r2,514
 200d2b0:	10bb3004 	addi	r2,r2,-4928
 200d2b4:	18c7883a 	add	r3,r3,r3
 200d2b8:	18c7883a 	add	r3,r3,r3
 200d2bc:	10c5883a 	add	r2,r2,r3
 200d2c0:	10800017 	ldw	r2,0(r2)
 200d2c4:	000f883a 	mov	r7,zero
 200d2c8:	100d883a 	mov	r6,r2
 200d2cc:	e17ffe17 	ldw	r5,-8(fp)
 200d2d0:	e13ffd17 	ldw	r4,-12(fp)
 200d2d4:	200c9b00 	call	200c9b0 <__multadd>
 200d2d8:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 200d2dc:	e0bfff17 	ldw	r2,-4(fp)
 200d2e0:	1005d0ba 	srai	r2,r2,2
 200d2e4:	e0bfff15 	stw	r2,-4(fp)
 200d2e8:	e0bfff17 	ldw	r2,-4(fp)
 200d2ec:	1000021e 	bne	r2,zero,200d2f8 <__pow5mult+0x84>
    return b;
 200d2f0:	e0bffe17 	ldw	r2,-8(fp)
 200d2f4:	00003806 	br	200d3d8 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 200d2f8:	e0bffd17 	ldw	r2,-12(fp)
 200d2fc:	10801217 	ldw	r2,72(r2)
 200d300:	e0bff915 	stw	r2,-28(fp)
 200d304:	e0bff917 	ldw	r2,-28(fp)
 200d308:	10000b1e 	bne	r2,zero,200d338 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 200d30c:	01409c44 	movi	r5,625
 200d310:	e13ffd17 	ldw	r4,-12(fp)
 200d314:	200ce4c0 	call	200ce4c <__i2b>
 200d318:	1007883a 	mov	r3,r2
 200d31c:	e0bffd17 	ldw	r2,-12(fp)
 200d320:	10c01215 	stw	r3,72(r2)
 200d324:	e0bffd17 	ldw	r2,-12(fp)
 200d328:	10801217 	ldw	r2,72(r2)
 200d32c:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 200d330:	e0bff917 	ldw	r2,-28(fp)
 200d334:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 200d338:	e0bfff17 	ldw	r2,-4(fp)
 200d33c:	1080004c 	andi	r2,r2,1
 200d340:	10000a26 	beq	r2,zero,200d36c <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 200d344:	e1bff917 	ldw	r6,-28(fp)
 200d348:	e17ffe17 	ldw	r5,-8(fp)
 200d34c:	e13ffd17 	ldw	r4,-12(fp)
 200d350:	200cea40 	call	200cea4 <__multiply>
 200d354:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 200d358:	e17ffe17 	ldw	r5,-8(fp)
 200d35c:	e13ffd17 	ldw	r4,-12(fp)
 200d360:	200c9340 	call	200c934 <_Bfree>
	  b = b1;
 200d364:	e0bffc17 	ldw	r2,-16(fp)
 200d368:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 200d36c:	e0bfff17 	ldw	r2,-4(fp)
 200d370:	1005d07a 	srai	r2,r2,1
 200d374:	e0bfff15 	stw	r2,-4(fp)
 200d378:	e0bfff17 	ldw	r2,-4(fp)
 200d37c:	10001426 	beq	r2,zero,200d3d0 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 200d380:	e0bff917 	ldw	r2,-28(fp)
 200d384:	10800017 	ldw	r2,0(r2)
 200d388:	e0bffa15 	stw	r2,-24(fp)
 200d38c:	e0bffa17 	ldw	r2,-24(fp)
 200d390:	10000c1e 	bne	r2,zero,200d3c4 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 200d394:	e1bff917 	ldw	r6,-28(fp)
 200d398:	e17ff917 	ldw	r5,-28(fp)
 200d39c:	e13ffd17 	ldw	r4,-12(fp)
 200d3a0:	200cea40 	call	200cea4 <__multiply>
 200d3a4:	1007883a 	mov	r3,r2
 200d3a8:	e0bff917 	ldw	r2,-28(fp)
 200d3ac:	10c00015 	stw	r3,0(r2)
 200d3b0:	e0bff917 	ldw	r2,-28(fp)
 200d3b4:	10800017 	ldw	r2,0(r2)
 200d3b8:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 200d3bc:	e0bffa17 	ldw	r2,-24(fp)
 200d3c0:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 200d3c4:	e0bffa17 	ldw	r2,-24(fp)
 200d3c8:	e0bff915 	stw	r2,-28(fp)
    }
 200d3cc:	003fda06 	br	200d338 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 200d3d0:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 200d3d4:	e0bffe17 	ldw	r2,-8(fp)
}
 200d3d8:	e037883a 	mov	sp,fp
 200d3dc:	dfc00117 	ldw	ra,4(sp)
 200d3e0:	df000017 	ldw	fp,0(sp)
 200d3e4:	dec00204 	addi	sp,sp,8
 200d3e8:	f800283a 	ret

0200d3ec <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200d3ec:	defff204 	addi	sp,sp,-56
 200d3f0:	dfc00d15 	stw	ra,52(sp)
 200d3f4:	df000c15 	stw	fp,48(sp)
 200d3f8:	df000c04 	addi	fp,sp,48
 200d3fc:	e13ffd15 	stw	r4,-12(fp)
 200d400:	e17ffe15 	stw	r5,-8(fp)
 200d404:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 200d408:	e0bfff17 	ldw	r2,-4(fp)
 200d40c:	1005d17a 	srai	r2,r2,5
 200d410:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 200d414:	e0bffe17 	ldw	r2,-8(fp)
 200d418:	10800117 	ldw	r2,4(r2)
 200d41c:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 200d420:	e0bffe17 	ldw	r2,-8(fp)
 200d424:	10c00417 	ldw	r3,16(r2)
 200d428:	e0bffa17 	ldw	r2,-24(fp)
 200d42c:	1885883a 	add	r2,r3,r2
 200d430:	10800044 	addi	r2,r2,1
 200d434:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d438:	e0bffe17 	ldw	r2,-8(fp)
 200d43c:	10800217 	ldw	r2,8(r2)
 200d440:	e0bff415 	stw	r2,-48(fp)
 200d444:	00000606 	br	200d460 <__lshift+0x74>
    k1++;
 200d448:	e0bff517 	ldw	r2,-44(fp)
 200d44c:	10800044 	addi	r2,r2,1
 200d450:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d454:	e0bff417 	ldw	r2,-48(fp)
 200d458:	1085883a 	add	r2,r2,r2
 200d45c:	e0bff415 	stw	r2,-48(fp)
 200d460:	e0bff617 	ldw	r2,-40(fp)
 200d464:	e0fff417 	ldw	r3,-48(fp)
 200d468:	18bff716 	blt	r3,r2,200d448 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 200d46c:	e17ff517 	ldw	r5,-44(fp)
 200d470:	e13ffd17 	ldw	r4,-12(fp)
 200d474:	200c8040 	call	200c804 <_Balloc>
 200d478:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 200d47c:	e0bffb17 	ldw	r2,-20(fp)
 200d480:	10800504 	addi	r2,r2,20
 200d484:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 200d488:	e03ff415 	stw	zero,-48(fp)
 200d48c:	00000706 	br	200d4ac <__lshift+0xc0>
    *x1++ = 0;
 200d490:	e0bff817 	ldw	r2,-32(fp)
 200d494:	10c00104 	addi	r3,r2,4
 200d498:	e0fff815 	stw	r3,-32(fp)
 200d49c:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 200d4a0:	e0bff417 	ldw	r2,-48(fp)
 200d4a4:	10800044 	addi	r2,r2,1
 200d4a8:	e0bff415 	stw	r2,-48(fp)
 200d4ac:	e0fff417 	ldw	r3,-48(fp)
 200d4b0:	e0bffa17 	ldw	r2,-24(fp)
 200d4b4:	18bff616 	blt	r3,r2,200d490 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 200d4b8:	e0bffe17 	ldw	r2,-8(fp)
 200d4bc:	10800504 	addi	r2,r2,20
 200d4c0:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 200d4c4:	e0bffe17 	ldw	r2,-8(fp)
 200d4c8:	10800417 	ldw	r2,16(r2)
 200d4cc:	1085883a 	add	r2,r2,r2
 200d4d0:	1085883a 	add	r2,r2,r2
 200d4d4:	1007883a 	mov	r3,r2
 200d4d8:	e0bff717 	ldw	r2,-36(fp)
 200d4dc:	10c5883a 	add	r2,r2,r3
 200d4e0:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 200d4e4:	e0bfff17 	ldw	r2,-4(fp)
 200d4e8:	108007cc 	andi	r2,r2,31
 200d4ec:	e0bfff15 	stw	r2,-4(fp)
 200d4f0:	e0bfff17 	ldw	r2,-4(fp)
 200d4f4:	10002326 	beq	r2,zero,200d584 <__lshift+0x198>
    {
      k1 = 32 - k;
 200d4f8:	00c00804 	movi	r3,32
 200d4fc:	e0bfff17 	ldw	r2,-4(fp)
 200d500:	1885c83a 	sub	r2,r3,r2
 200d504:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 200d508:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 200d50c:	e0bff817 	ldw	r2,-32(fp)
 200d510:	10c00104 	addi	r3,r2,4
 200d514:	e0fff815 	stw	r3,-32(fp)
 200d518:	e0fff717 	ldw	r3,-36(fp)
 200d51c:	19000017 	ldw	r4,0(r3)
 200d520:	e0ffff17 	ldw	r3,-4(fp)
 200d524:	20c8983a 	sll	r4,r4,r3
 200d528:	e0fff917 	ldw	r3,-28(fp)
 200d52c:	20c6b03a 	or	r3,r4,r3
 200d530:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 200d534:	e0bff717 	ldw	r2,-36(fp)
 200d538:	10c00104 	addi	r3,r2,4
 200d53c:	e0fff715 	stw	r3,-36(fp)
 200d540:	10c00017 	ldw	r3,0(r2)
 200d544:	e0bff517 	ldw	r2,-44(fp)
 200d548:	1884d83a 	srl	r2,r3,r2
 200d54c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 200d550:	e0fff717 	ldw	r3,-36(fp)
 200d554:	e0bffc17 	ldw	r2,-16(fp)
 200d558:	18bfec36 	bltu	r3,r2,200d50c <__lshift+0x120>
      if ((*x1 = z) != 0)
 200d55c:	e0bff817 	ldw	r2,-32(fp)
 200d560:	e0fff917 	ldw	r3,-28(fp)
 200d564:	10c00015 	stw	r3,0(r2)
 200d568:	e0bff817 	ldw	r2,-32(fp)
 200d56c:	10800017 	ldw	r2,0(r2)
 200d570:	10000f26 	beq	r2,zero,200d5b0 <__lshift+0x1c4>
	++n1;
 200d574:	e0bff617 	ldw	r2,-40(fp)
 200d578:	10800044 	addi	r2,r2,1
 200d57c:	e0bff615 	stw	r2,-40(fp)
 200d580:	00000b06 	br	200d5b0 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 200d584:	e0bff817 	ldw	r2,-32(fp)
 200d588:	10c00104 	addi	r3,r2,4
 200d58c:	e0fff815 	stw	r3,-32(fp)
 200d590:	e0fff717 	ldw	r3,-36(fp)
 200d594:	19000104 	addi	r4,r3,4
 200d598:	e13ff715 	stw	r4,-36(fp)
 200d59c:	18c00017 	ldw	r3,0(r3)
 200d5a0:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 200d5a4:	e0fff717 	ldw	r3,-36(fp)
 200d5a8:	e0bffc17 	ldw	r2,-16(fp)
 200d5ac:	18bff536 	bltu	r3,r2,200d584 <__lshift+0x198>
  b1->_wds = n1 - 1;
 200d5b0:	e0bff617 	ldw	r2,-40(fp)
 200d5b4:	10ffffc4 	addi	r3,r2,-1
 200d5b8:	e0bffb17 	ldw	r2,-20(fp)
 200d5bc:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 200d5c0:	e17ffe17 	ldw	r5,-8(fp)
 200d5c4:	e13ffd17 	ldw	r4,-12(fp)
 200d5c8:	200c9340 	call	200c934 <_Bfree>
  return b1;
 200d5cc:	e0bffb17 	ldw	r2,-20(fp)
}
 200d5d0:	e037883a 	mov	sp,fp
 200d5d4:	dfc00117 	ldw	ra,4(sp)
 200d5d8:	df000017 	ldw	fp,0(sp)
 200d5dc:	dec00204 	addi	sp,sp,8
 200d5e0:	f800283a 	ret

0200d5e4 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 200d5e4:	defff704 	addi	sp,sp,-36
 200d5e8:	df000815 	stw	fp,32(sp)
 200d5ec:	df000804 	addi	fp,sp,32
 200d5f0:	e13ffe15 	stw	r4,-8(fp)
 200d5f4:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 200d5f8:	e0bffe17 	ldw	r2,-8(fp)
 200d5fc:	10800417 	ldw	r2,16(r2)
 200d600:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 200d604:	e0bfff17 	ldw	r2,-4(fp)
 200d608:	10800417 	ldw	r2,16(r2)
 200d60c:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 200d610:	e0fffa17 	ldw	r3,-24(fp)
 200d614:	e0bffb17 	ldw	r2,-20(fp)
 200d618:	1885c83a 	sub	r2,r3,r2
 200d61c:	e0bffa15 	stw	r2,-24(fp)
 200d620:	e0bffa17 	ldw	r2,-24(fp)
 200d624:	10000226 	beq	r2,zero,200d630 <__mcmp+0x4c>
    return i;
 200d628:	e0bffa17 	ldw	r2,-24(fp)
 200d62c:	00002e06 	br	200d6e8 <__mcmp+0x104>
  xa0 = a->_x;
 200d630:	e0bffe17 	ldw	r2,-8(fp)
 200d634:	10800504 	addi	r2,r2,20
 200d638:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 200d63c:	e0bffb17 	ldw	r2,-20(fp)
 200d640:	1085883a 	add	r2,r2,r2
 200d644:	1085883a 	add	r2,r2,r2
 200d648:	1007883a 	mov	r3,r2
 200d64c:	e0bffc17 	ldw	r2,-16(fp)
 200d650:	10c5883a 	add	r2,r2,r3
 200d654:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 200d658:	e0bfff17 	ldw	r2,-4(fp)
 200d65c:	10800504 	addi	r2,r2,20
 200d660:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 200d664:	e0bffb17 	ldw	r2,-20(fp)
 200d668:	1085883a 	add	r2,r2,r2
 200d66c:	1085883a 	add	r2,r2,r2
 200d670:	1007883a 	mov	r3,r2
 200d674:	e0bffd17 	ldw	r2,-12(fp)
 200d678:	10c5883a 	add	r2,r2,r3
 200d67c:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 200d680:	e0bff817 	ldw	r2,-32(fp)
 200d684:	10bfff04 	addi	r2,r2,-4
 200d688:	e0bff815 	stw	r2,-32(fp)
 200d68c:	e0bff817 	ldw	r2,-32(fp)
 200d690:	10c00017 	ldw	r3,0(r2)
 200d694:	e0bff917 	ldw	r2,-28(fp)
 200d698:	10bfff04 	addi	r2,r2,-4
 200d69c:	e0bff915 	stw	r2,-28(fp)
 200d6a0:	e0bff917 	ldw	r2,-28(fp)
 200d6a4:	10800017 	ldw	r2,0(r2)
 200d6a8:	18800926 	beq	r3,r2,200d6d0 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 200d6ac:	e0bff817 	ldw	r2,-32(fp)
 200d6b0:	10c00017 	ldw	r3,0(r2)
 200d6b4:	e0bff917 	ldw	r2,-28(fp)
 200d6b8:	10800017 	ldw	r2,0(r2)
 200d6bc:	1880022e 	bgeu	r3,r2,200d6c8 <__mcmp+0xe4>
 200d6c0:	00bfffc4 	movi	r2,-1
 200d6c4:	00000806 	br	200d6e8 <__mcmp+0x104>
 200d6c8:	00800044 	movi	r2,1
 200d6cc:	00000606 	br	200d6e8 <__mcmp+0x104>
      if (xa <= xa0)
 200d6d0:	e0bff817 	ldw	r2,-32(fp)
 200d6d4:	e0fffc17 	ldw	r3,-16(fp)
 200d6d8:	1880012e 	bgeu	r3,r2,200d6e0 <__mcmp+0xfc>
	break;
    }
 200d6dc:	003fe806 	br	200d680 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 200d6e0:	0001883a 	nop
    }
  return 0;
 200d6e4:	0005883a 	mov	r2,zero
}
 200d6e8:	e037883a 	mov	sp,fp
 200d6ec:	df000017 	ldw	fp,0(sp)
 200d6f0:	dec00104 	addi	sp,sp,4
 200d6f4:	f800283a 	ret

0200d6f8 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 200d6f8:	deffef04 	addi	sp,sp,-68
 200d6fc:	dfc01015 	stw	ra,64(sp)
 200d700:	df000f15 	stw	fp,60(sp)
 200d704:	df000f04 	addi	fp,sp,60
 200d708:	e13ffd15 	stw	r4,-12(fp)
 200d70c:	e17ffe15 	stw	r5,-8(fp)
 200d710:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 200d714:	e17fff17 	ldw	r5,-4(fp)
 200d718:	e13ffe17 	ldw	r4,-8(fp)
 200d71c:	200d5e40 	call	200d5e4 <__mcmp>
 200d720:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 200d724:	e0bff117 	ldw	r2,-60(fp)
 200d728:	10000b1e 	bne	r2,zero,200d758 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 200d72c:	000b883a 	mov	r5,zero
 200d730:	e13ffd17 	ldw	r4,-12(fp)
 200d734:	200c8040 	call	200c804 <_Balloc>
 200d738:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 200d73c:	e0bff717 	ldw	r2,-36(fp)
 200d740:	00c00044 	movi	r3,1
 200d744:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 200d748:	e0bff717 	ldw	r2,-36(fp)
 200d74c:	10000515 	stw	zero,20(r2)
      return c;
 200d750:	e0bff717 	ldw	r2,-36(fp)
 200d754:	00008c06 	br	200d988 <__mdiff+0x290>
    }
  if (i < 0)
 200d758:	e0bff117 	ldw	r2,-60(fp)
 200d75c:	1000090e 	bge	r2,zero,200d784 <__mdiff+0x8c>
    {
      c = a;
 200d760:	e0bffe17 	ldw	r2,-8(fp)
 200d764:	e0bff715 	stw	r2,-36(fp)
      a = b;
 200d768:	e0bfff17 	ldw	r2,-4(fp)
 200d76c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200d770:	e0bff717 	ldw	r2,-36(fp)
 200d774:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 200d778:	00800044 	movi	r2,1
 200d77c:	e0bff115 	stw	r2,-60(fp)
 200d780:	00000106 	br	200d788 <__mdiff+0x90>
    }
  else
    i = 0;
 200d784:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 200d788:	e0bffe17 	ldw	r2,-8(fp)
 200d78c:	10800117 	ldw	r2,4(r2)
 200d790:	100b883a 	mov	r5,r2
 200d794:	e13ffd17 	ldw	r4,-12(fp)
 200d798:	200c8040 	call	200c804 <_Balloc>
 200d79c:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 200d7a0:	e0bff717 	ldw	r2,-36(fp)
 200d7a4:	e0fff117 	ldw	r3,-60(fp)
 200d7a8:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 200d7ac:	e0bffe17 	ldw	r2,-8(fp)
 200d7b0:	10800417 	ldw	r2,16(r2)
 200d7b4:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 200d7b8:	e0bffe17 	ldw	r2,-8(fp)
 200d7bc:	10800504 	addi	r2,r2,20
 200d7c0:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 200d7c4:	e0bff217 	ldw	r2,-56(fp)
 200d7c8:	1085883a 	add	r2,r2,r2
 200d7cc:	1085883a 	add	r2,r2,r2
 200d7d0:	1007883a 	mov	r3,r2
 200d7d4:	e0bff417 	ldw	r2,-48(fp)
 200d7d8:	10c5883a 	add	r2,r2,r3
 200d7dc:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 200d7e0:	e0bfff17 	ldw	r2,-4(fp)
 200d7e4:	10800417 	ldw	r2,16(r2)
 200d7e8:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200d7ec:	e0bfff17 	ldw	r2,-4(fp)
 200d7f0:	10800504 	addi	r2,r2,20
 200d7f4:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 200d7f8:	e0bff917 	ldw	r2,-28(fp)
 200d7fc:	1085883a 	add	r2,r2,r2
 200d800:	1085883a 	add	r2,r2,r2
 200d804:	1007883a 	mov	r3,r2
 200d808:	e0bff517 	ldw	r2,-44(fp)
 200d80c:	10c5883a 	add	r2,r2,r3
 200d810:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 200d814:	e0bff717 	ldw	r2,-36(fp)
 200d818:	10800504 	addi	r2,r2,20
 200d81c:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 200d820:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 200d824:	e0bff417 	ldw	r2,-48(fp)
 200d828:	10800017 	ldw	r2,0(r2)
 200d82c:	10ffffcc 	andi	r3,r2,65535
 200d830:	e0bff517 	ldw	r2,-44(fp)
 200d834:	10800017 	ldw	r2,0(r2)
 200d838:	10bfffcc 	andi	r2,r2,65535
 200d83c:	1887c83a 	sub	r3,r3,r2
 200d840:	e0bff317 	ldw	r2,-52(fp)
 200d844:	1885883a 	add	r2,r3,r2
 200d848:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d84c:	e0bffb17 	ldw	r2,-20(fp)
 200d850:	1005d43a 	srai	r2,r2,16
 200d854:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 200d858:	e0bff417 	ldw	r2,-48(fp)
 200d85c:	10c00104 	addi	r3,r2,4
 200d860:	e0fff415 	stw	r3,-48(fp)
 200d864:	10800017 	ldw	r2,0(r2)
 200d868:	1006d43a 	srli	r3,r2,16
 200d86c:	e0bff517 	ldw	r2,-44(fp)
 200d870:	11000104 	addi	r4,r2,4
 200d874:	e13ff515 	stw	r4,-44(fp)
 200d878:	10800017 	ldw	r2,0(r2)
 200d87c:	1004d43a 	srli	r2,r2,16
 200d880:	1887c83a 	sub	r3,r3,r2
 200d884:	e0bff317 	ldw	r2,-52(fp)
 200d888:	1885883a 	add	r2,r3,r2
 200d88c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d890:	e0bffc17 	ldw	r2,-16(fp)
 200d894:	1005d43a 	srai	r2,r2,16
 200d898:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d89c:	e0bff617 	ldw	r2,-40(fp)
 200d8a0:	10c00104 	addi	r3,r2,4
 200d8a4:	e0fff615 	stw	r3,-40(fp)
 200d8a8:	e0fffc17 	ldw	r3,-16(fp)
 200d8ac:	1808943a 	slli	r4,r3,16
 200d8b0:	e0fffb17 	ldw	r3,-20(fp)
 200d8b4:	18ffffcc 	andi	r3,r3,65535
 200d8b8:	20c6b03a 	or	r3,r4,r3
 200d8bc:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 200d8c0:	e0fff517 	ldw	r3,-44(fp)
 200d8c4:	e0bffa17 	ldw	r2,-24(fp)
 200d8c8:	18bfd636 	bltu	r3,r2,200d824 <__mdiff+0x12c>
  while (xa < xae)
 200d8cc:	00001d06 	br	200d944 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 200d8d0:	e0bff417 	ldw	r2,-48(fp)
 200d8d4:	10800017 	ldw	r2,0(r2)
 200d8d8:	10ffffcc 	andi	r3,r2,65535
 200d8dc:	e0bff317 	ldw	r2,-52(fp)
 200d8e0:	1885883a 	add	r2,r3,r2
 200d8e4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d8e8:	e0bffb17 	ldw	r2,-20(fp)
 200d8ec:	1005d43a 	srai	r2,r2,16
 200d8f0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 200d8f4:	e0bff417 	ldw	r2,-48(fp)
 200d8f8:	10c00104 	addi	r3,r2,4
 200d8fc:	e0fff415 	stw	r3,-48(fp)
 200d900:	10800017 	ldw	r2,0(r2)
 200d904:	1006d43a 	srli	r3,r2,16
 200d908:	e0bff317 	ldw	r2,-52(fp)
 200d90c:	1885883a 	add	r2,r3,r2
 200d910:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d914:	e0bffc17 	ldw	r2,-16(fp)
 200d918:	1005d43a 	srai	r2,r2,16
 200d91c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d920:	e0bff617 	ldw	r2,-40(fp)
 200d924:	10c00104 	addi	r3,r2,4
 200d928:	e0fff615 	stw	r3,-40(fp)
 200d92c:	e0fffc17 	ldw	r3,-16(fp)
 200d930:	1808943a 	slli	r4,r3,16
 200d934:	e0fffb17 	ldw	r3,-20(fp)
 200d938:	18ffffcc 	andi	r3,r3,65535
 200d93c:	20c6b03a 	or	r3,r4,r3
 200d940:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 200d944:	e0fff417 	ldw	r3,-48(fp)
 200d948:	e0bff817 	ldw	r2,-32(fp)
 200d94c:	18bfe036 	bltu	r3,r2,200d8d0 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d950:	00000306 	br	200d960 <__mdiff+0x268>
    wa--;
 200d954:	e0bff217 	ldw	r2,-56(fp)
 200d958:	10bfffc4 	addi	r2,r2,-1
 200d95c:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d960:	e0bff617 	ldw	r2,-40(fp)
 200d964:	10bfff04 	addi	r2,r2,-4
 200d968:	e0bff615 	stw	r2,-40(fp)
 200d96c:	e0bff617 	ldw	r2,-40(fp)
 200d970:	10800017 	ldw	r2,0(r2)
 200d974:	103ff726 	beq	r2,zero,200d954 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 200d978:	e0bff717 	ldw	r2,-36(fp)
 200d97c:	e0fff217 	ldw	r3,-56(fp)
 200d980:	10c00415 	stw	r3,16(r2)
  return c;
 200d984:	e0bff717 	ldw	r2,-36(fp)
}
 200d988:	e037883a 	mov	sp,fp
 200d98c:	dfc00117 	ldw	ra,4(sp)
 200d990:	df000017 	ldw	fp,0(sp)
 200d994:	dec00204 	addi	sp,sp,8
 200d998:	f800283a 	ret

0200d99c <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 200d99c:	defff804 	addi	sp,sp,-32
 200d9a0:	df000715 	stw	fp,28(sp)
 200d9a4:	dc000615 	stw	r16,24(sp)
 200d9a8:	df000704 	addi	fp,sp,28
 200d9ac:	e13ffd15 	stw	r4,-12(fp)
 200d9b0:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 200d9b4:	e0bffd17 	ldw	r2,-12(fp)
 200d9b8:	e0bff915 	stw	r2,-28(fp)
 200d9bc:	e0bffe17 	ldw	r2,-8(fp)
 200d9c0:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 200d9c4:	e0bffa17 	ldw	r2,-24(fp)
 200d9c8:	10dffc2c 	andhi	r3,r2,32752
 200d9cc:	00bf3034 	movhi	r2,64704
 200d9d0:	1885883a 	add	r2,r3,r2
 200d9d4:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 200d9d8:	0400040e 	bge	zero,r16,200d9ec <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 200d9dc:	8005883a 	mov	r2,r16
 200d9e0:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 200d9e4:	e03ffb15 	stw	zero,-20(fp)
 200d9e8:	00001406 	br	200da3c <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 200d9ec:	0405c83a 	sub	r2,zero,r16
 200d9f0:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 200d9f4:	80800508 	cmpgei	r2,r16,20
 200d9f8:	1000051e 	bne	r2,zero,200da10 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 200d9fc:	00800234 	movhi	r2,8
 200da00:	1405d83a 	sra	r2,r2,r16
 200da04:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 200da08:	e03ffb15 	stw	zero,-20(fp)
 200da0c:	00000b06 	br	200da3c <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 200da10:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 200da14:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 200da18:	808007c8 	cmpgei	r2,r16,31
 200da1c:	1000051e 	bne	r2,zero,200da34 <__ulp+0x98>
 200da20:	008007c4 	movi	r2,31
 200da24:	1405c83a 	sub	r2,r2,r16
 200da28:	00c00044 	movi	r3,1
 200da2c:	1884983a 	sll	r2,r3,r2
 200da30:	00000106 	br	200da38 <__ulp+0x9c>
 200da34:	00800044 	movi	r2,1
 200da38:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 200da3c:	e0bffb17 	ldw	r2,-20(fp)
 200da40:	e0fffc17 	ldw	r3,-16(fp)
 200da44:	1009883a 	mov	r4,r2
 200da48:	180b883a 	mov	r5,r3
}
 200da4c:	2005883a 	mov	r2,r4
 200da50:	2807883a 	mov	r3,r5
 200da54:	e6ffff04 	addi	sp,fp,-4
 200da58:	df000117 	ldw	fp,4(sp)
 200da5c:	dc000017 	ldw	r16,0(sp)
 200da60:	dec00204 	addi	sp,sp,8
 200da64:	f800283a 	ret

0200da68 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 200da68:	defff404 	addi	sp,sp,-48
 200da6c:	dfc00b15 	stw	ra,44(sp)
 200da70:	df000a15 	stw	fp,40(sp)
 200da74:	df000a04 	addi	fp,sp,40
 200da78:	e13ffe15 	stw	r4,-8(fp)
 200da7c:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 200da80:	e0bffe17 	ldw	r2,-8(fp)
 200da84:	10800504 	addi	r2,r2,20
 200da88:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 200da8c:	e0bffe17 	ldw	r2,-8(fp)
 200da90:	10800417 	ldw	r2,16(r2)
 200da94:	1085883a 	add	r2,r2,r2
 200da98:	1085883a 	add	r2,r2,r2
 200da9c:	1007883a 	mov	r3,r2
 200daa0:	e0bff717 	ldw	r2,-36(fp)
 200daa4:	10c5883a 	add	r2,r2,r3
 200daa8:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 200daac:	e0bff617 	ldw	r2,-40(fp)
 200dab0:	10bfff04 	addi	r2,r2,-4
 200dab4:	e0bff615 	stw	r2,-40(fp)
 200dab8:	e0bff617 	ldw	r2,-40(fp)
 200dabc:	10800017 	ldw	r2,0(r2)
 200dac0:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 200dac4:	e13ff817 	ldw	r4,-32(fp)
 200dac8:	200ccd00 	call	200ccd0 <__hi0bits>
 200dacc:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 200dad0:	00c00804 	movi	r3,32
 200dad4:	e0bff917 	ldw	r2,-28(fp)
 200dad8:	1887c83a 	sub	r3,r3,r2
 200dadc:	e0bfff17 	ldw	r2,-4(fp)
 200dae0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 200dae4:	e0bff917 	ldw	r2,-28(fp)
 200dae8:	108002c8 	cmpgei	r2,r2,11
 200daec:	10001e1e 	bne	r2,zero,200db68 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 200daf0:	00c002c4 	movi	r3,11
 200daf4:	e0bff917 	ldw	r2,-28(fp)
 200daf8:	1885c83a 	sub	r2,r3,r2
 200dafc:	e0fff817 	ldw	r3,-32(fp)
 200db00:	1884d83a 	srl	r2,r3,r2
 200db04:	108ffc34 	orhi	r2,r2,16368
 200db08:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 200db0c:	e0bff617 	ldw	r2,-40(fp)
 200db10:	e0fff717 	ldw	r3,-36(fp)
 200db14:	1880062e 	bgeu	r3,r2,200db30 <__b2d+0xc8>
 200db18:	e0bff617 	ldw	r2,-40(fp)
 200db1c:	10bfff04 	addi	r2,r2,-4
 200db20:	e0bff615 	stw	r2,-40(fp)
 200db24:	e0bff617 	ldw	r2,-40(fp)
 200db28:	10800017 	ldw	r2,0(r2)
 200db2c:	00000106 	br	200db34 <__b2d+0xcc>
 200db30:	0005883a 	mov	r2,zero
 200db34:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 200db38:	e0bff917 	ldw	r2,-28(fp)
 200db3c:	10800544 	addi	r2,r2,21
 200db40:	e0fff817 	ldw	r3,-32(fp)
 200db44:	1886983a 	sll	r3,r3,r2
 200db48:	010002c4 	movi	r4,11
 200db4c:	e0bff917 	ldw	r2,-28(fp)
 200db50:	2085c83a 	sub	r2,r4,r2
 200db54:	e13ffa17 	ldw	r4,-24(fp)
 200db58:	2084d83a 	srl	r2,r4,r2
 200db5c:	1884b03a 	or	r2,r3,r2
 200db60:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 200db64:	00003606 	br	200dc40 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 200db68:	e0bff617 	ldw	r2,-40(fp)
 200db6c:	e0fff717 	ldw	r3,-36(fp)
 200db70:	1880062e 	bgeu	r3,r2,200db8c <__b2d+0x124>
 200db74:	e0bff617 	ldw	r2,-40(fp)
 200db78:	10bfff04 	addi	r2,r2,-4
 200db7c:	e0bff615 	stw	r2,-40(fp)
 200db80:	e0bff617 	ldw	r2,-40(fp)
 200db84:	10800017 	ldw	r2,0(r2)
 200db88:	00000106 	br	200db90 <__b2d+0x128>
 200db8c:	0005883a 	mov	r2,zero
 200db90:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 200db94:	e0bff917 	ldw	r2,-28(fp)
 200db98:	10bffd44 	addi	r2,r2,-11
 200db9c:	e0bff915 	stw	r2,-28(fp)
 200dba0:	e0bff917 	ldw	r2,-28(fp)
 200dba4:	10002126 	beq	r2,zero,200dc2c <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 200dba8:	e0fff817 	ldw	r3,-32(fp)
 200dbac:	e0bff917 	ldw	r2,-28(fp)
 200dbb0:	1886983a 	sll	r3,r3,r2
 200dbb4:	01000804 	movi	r4,32
 200dbb8:	e0bff917 	ldw	r2,-28(fp)
 200dbbc:	2085c83a 	sub	r2,r4,r2
 200dbc0:	e13ffb17 	ldw	r4,-20(fp)
 200dbc4:	2084d83a 	srl	r2,r4,r2
 200dbc8:	1884b03a 	or	r2,r3,r2
 200dbcc:	108ffc34 	orhi	r2,r2,16368
 200dbd0:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 200dbd4:	e0bff617 	ldw	r2,-40(fp)
 200dbd8:	e0fff717 	ldw	r3,-36(fp)
 200dbdc:	1880062e 	bgeu	r3,r2,200dbf8 <__b2d+0x190>
 200dbe0:	e0bff617 	ldw	r2,-40(fp)
 200dbe4:	10bfff04 	addi	r2,r2,-4
 200dbe8:	e0bff615 	stw	r2,-40(fp)
 200dbec:	e0bff617 	ldw	r2,-40(fp)
 200dbf0:	10800017 	ldw	r2,0(r2)
 200dbf4:	00000106 	br	200dbfc <__b2d+0x194>
 200dbf8:	0005883a 	mov	r2,zero
 200dbfc:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 200dc00:	e0fffb17 	ldw	r3,-20(fp)
 200dc04:	e0bff917 	ldw	r2,-28(fp)
 200dc08:	1886983a 	sll	r3,r3,r2
 200dc0c:	01000804 	movi	r4,32
 200dc10:	e0bff917 	ldw	r2,-28(fp)
 200dc14:	2085c83a 	sub	r2,r4,r2
 200dc18:	e13ff817 	ldw	r4,-32(fp)
 200dc1c:	2084d83a 	srl	r2,r4,r2
 200dc20:	1884b03a 	or	r2,r3,r2
 200dc24:	e0bffc15 	stw	r2,-16(fp)
 200dc28:	00000506 	br	200dc40 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 200dc2c:	e0bff817 	ldw	r2,-32(fp)
 200dc30:	108ffc34 	orhi	r2,r2,16368
 200dc34:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 200dc38:	e0bffb17 	ldw	r2,-20(fp)
 200dc3c:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 200dc40:	e0bffc17 	ldw	r2,-16(fp)
 200dc44:	e0fffd17 	ldw	r3,-12(fp)
 200dc48:	1009883a 	mov	r4,r2
 200dc4c:	180b883a 	mov	r5,r3
}
 200dc50:	2005883a 	mov	r2,r4
 200dc54:	2807883a 	mov	r3,r5
 200dc58:	e037883a 	mov	sp,fp
 200dc5c:	dfc00117 	ldw	ra,4(sp)
 200dc60:	df000017 	ldw	fp,0(sp)
 200dc64:	dec00204 	addi	sp,sp,8
 200dc68:	f800283a 	ret

0200dc6c <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 200dc6c:	defff004 	addi	sp,sp,-64
 200dc70:	dfc00f15 	stw	ra,60(sp)
 200dc74:	df000e15 	stw	fp,56(sp)
 200dc78:	dc000d15 	stw	r16,52(sp)
 200dc7c:	df000e04 	addi	fp,sp,56
 200dc80:	e13ffb15 	stw	r4,-20(fp)
 200dc84:	e17ffc15 	stw	r5,-16(fp)
 200dc88:	e1bffd15 	stw	r6,-12(fp)
 200dc8c:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 200dc90:	e0bffc17 	ldw	r2,-16(fp)
 200dc94:	e0bff715 	stw	r2,-36(fp)
 200dc98:	e0bffd17 	ldw	r2,-12(fp)
 200dc9c:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 200dca0:	e0bffc17 	ldw	r2,-16(fp)
 200dca4:	e0bff715 	stw	r2,-36(fp)
 200dca8:	e0bffd17 	ldw	r2,-12(fp)
 200dcac:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 200dcb0:	01400044 	movi	r5,1
 200dcb4:	e13ffb17 	ldw	r4,-20(fp)
 200dcb8:	200c8040 	call	200c804 <_Balloc>
 200dcbc:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 200dcc0:	e0bff417 	ldw	r2,-48(fp)
 200dcc4:	10800504 	addi	r2,r2,20
 200dcc8:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 200dccc:	e0fff817 	ldw	r3,-32(fp)
 200dcd0:	00800434 	movhi	r2,16
 200dcd4:	10bfffc4 	addi	r2,r2,-1
 200dcd8:	1884703a 	and	r2,r3,r2
 200dcdc:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 200dce0:	e0fff817 	ldw	r3,-32(fp)
 200dce4:	00a00034 	movhi	r2,32768
 200dce8:	10bfffc4 	addi	r2,r2,-1
 200dcec:	1884703a 	and	r2,r3,r2
 200dcf0:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 200dcf4:	e0bff817 	ldw	r2,-32(fp)
 200dcf8:	1004d53a 	srli	r2,r2,20
 200dcfc:	e0bff615 	stw	r2,-40(fp)
 200dd00:	e0bff617 	ldw	r2,-40(fp)
 200dd04:	10000326 	beq	r2,zero,200dd14 <__d2b+0xa8>
    z |= Exp_msk1;
 200dd08:	e0bffa17 	ldw	r2,-24(fp)
 200dd0c:	10800434 	orhi	r2,r2,16
 200dd10:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 200dd14:	e0bff717 	ldw	r2,-36(fp)
 200dd18:	10002826 	beq	r2,zero,200ddbc <__d2b+0x150>
    {
      y = d1;
 200dd1c:	e0bff717 	ldw	r2,-36(fp)
 200dd20:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 200dd24:	e0bff904 	addi	r2,fp,-28
 200dd28:	1009883a 	mov	r4,r2
 200dd2c:	200cd600 	call	200cd60 <__lo0bits>
 200dd30:	e0bff315 	stw	r2,-52(fp)
      if (k)
 200dd34:	e0bff317 	ldw	r2,-52(fp)
 200dd38:	10000e26 	beq	r2,zero,200dd74 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 200dd3c:	e0fffa17 	ldw	r3,-24(fp)
 200dd40:	01000804 	movi	r4,32
 200dd44:	e0bff317 	ldw	r2,-52(fp)
 200dd48:	2085c83a 	sub	r2,r4,r2
 200dd4c:	1886983a 	sll	r3,r3,r2
 200dd50:	e0bff917 	ldw	r2,-28(fp)
 200dd54:	1886b03a 	or	r3,r3,r2
 200dd58:	e0bff517 	ldw	r2,-44(fp)
 200dd5c:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 200dd60:	e0fffa17 	ldw	r3,-24(fp)
 200dd64:	e0bff317 	ldw	r2,-52(fp)
 200dd68:	1884d83a 	srl	r2,r3,r2
 200dd6c:	e0bffa15 	stw	r2,-24(fp)
 200dd70:	00000306 	br	200dd80 <__d2b+0x114>
	}
      else
	x[0] = y;
 200dd74:	e0fff917 	ldw	r3,-28(fp)
 200dd78:	e0bff517 	ldw	r2,-44(fp)
 200dd7c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 200dd80:	e0bff517 	ldw	r2,-44(fp)
 200dd84:	10800104 	addi	r2,r2,4
 200dd88:	e0fffa17 	ldw	r3,-24(fp)
 200dd8c:	10c00015 	stw	r3,0(r2)
 200dd90:	10800017 	ldw	r2,0(r2)
 200dd94:	10000226 	beq	r2,zero,200dda0 <__d2b+0x134>
 200dd98:	00800084 	movi	r2,2
 200dd9c:	00000106 	br	200dda4 <__d2b+0x138>
 200dda0:	00800044 	movi	r2,1
 200dda4:	e0fff417 	ldw	r3,-48(fp)
 200dda8:	18800415 	stw	r2,16(r3)
 200ddac:	e0bff417 	ldw	r2,-48(fp)
 200ddb0:	10800417 	ldw	r2,16(r2)
 200ddb4:	e0bff215 	stw	r2,-56(fp)
 200ddb8:	00001006 	br	200ddfc <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 200ddbc:	e0bffa04 	addi	r2,fp,-24
 200ddc0:	1009883a 	mov	r4,r2
 200ddc4:	200cd600 	call	200cd60 <__lo0bits>
 200ddc8:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 200ddcc:	e0fffa17 	ldw	r3,-24(fp)
 200ddd0:	e0bff517 	ldw	r2,-44(fp)
 200ddd4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 200ddd8:	e0bff417 	ldw	r2,-48(fp)
 200dddc:	00c00044 	movi	r3,1
 200dde0:	10c00415 	stw	r3,16(r2)
 200dde4:	e0bff417 	ldw	r2,-48(fp)
 200dde8:	10800417 	ldw	r2,16(r2)
 200ddec:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 200ddf0:	e0bff317 	ldw	r2,-52(fp)
 200ddf4:	10800804 	addi	r2,r2,32
 200ddf8:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 200ddfc:	e0bff617 	ldw	r2,-40(fp)
 200de00:	10000c26 	beq	r2,zero,200de34 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 200de04:	e0bff617 	ldw	r2,-40(fp)
 200de08:	10fef344 	addi	r3,r2,-1075
 200de0c:	e0bff317 	ldw	r2,-52(fp)
 200de10:	1887883a 	add	r3,r3,r2
 200de14:	e0bffe17 	ldw	r2,-8(fp)
 200de18:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 200de1c:	00c00d44 	movi	r3,53
 200de20:	e0bff317 	ldw	r2,-52(fp)
 200de24:	1887c83a 	sub	r3,r3,r2
 200de28:	e0800217 	ldw	r2,8(fp)
 200de2c:	10c00015 	stw	r3,0(r2)
 200de30:	00001706 	br	200de90 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 200de34:	e0bff617 	ldw	r2,-40(fp)
 200de38:	10fef384 	addi	r3,r2,-1074
 200de3c:	e0bff317 	ldw	r2,-52(fp)
 200de40:	1887883a 	add	r3,r3,r2
 200de44:	e0bffe17 	ldw	r2,-8(fp)
 200de48:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 200de4c:	e0bff217 	ldw	r2,-56(fp)
 200de50:	1020917a 	slli	r16,r2,5
 200de54:	e0fff217 	ldw	r3,-56(fp)
 200de58:	00900034 	movhi	r2,16384
 200de5c:	10bfffc4 	addi	r2,r2,-1
 200de60:	1885883a 	add	r2,r3,r2
 200de64:	1085883a 	add	r2,r2,r2
 200de68:	1085883a 	add	r2,r2,r2
 200de6c:	1007883a 	mov	r3,r2
 200de70:	e0bff517 	ldw	r2,-44(fp)
 200de74:	10c5883a 	add	r2,r2,r3
 200de78:	10800017 	ldw	r2,0(r2)
 200de7c:	1009883a 	mov	r4,r2
 200de80:	200ccd00 	call	200ccd0 <__hi0bits>
 200de84:	8087c83a 	sub	r3,r16,r2
 200de88:	e0800217 	ldw	r2,8(fp)
 200de8c:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 200de90:	e0bff417 	ldw	r2,-48(fp)
}
 200de94:	e6ffff04 	addi	sp,fp,-4
 200de98:	dfc00217 	ldw	ra,8(sp)
 200de9c:	df000117 	ldw	fp,4(sp)
 200dea0:	dc000017 	ldw	r16,0(sp)
 200dea4:	dec00304 	addi	sp,sp,12
 200dea8:	f800283a 	ret

0200deac <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 200deac:	defff504 	addi	sp,sp,-44
 200deb0:	dfc00a15 	stw	ra,40(sp)
 200deb4:	df000915 	stw	fp,36(sp)
 200deb8:	df000904 	addi	fp,sp,36
 200debc:	e13ffe15 	stw	r4,-8(fp)
 200dec0:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 200dec4:	e0bffc04 	addi	r2,fp,-16
 200dec8:	100b883a 	mov	r5,r2
 200decc:	e13ffe17 	ldw	r4,-8(fp)
 200ded0:	200da680 	call	200da68 <__b2d>
 200ded4:	1009883a 	mov	r4,r2
 200ded8:	180b883a 	mov	r5,r3
 200dedc:	e13ff815 	stw	r4,-32(fp)
 200dee0:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 200dee4:	e0bffd04 	addi	r2,fp,-12
 200dee8:	100b883a 	mov	r5,r2
 200deec:	e13fff17 	ldw	r4,-4(fp)
 200def0:	200da680 	call	200da68 <__b2d>
 200def4:	1009883a 	mov	r4,r2
 200def8:	180b883a 	mov	r5,r3
 200defc:	e13ffa15 	stw	r4,-24(fp)
 200df00:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 200df04:	e0fffc17 	ldw	r3,-16(fp)
 200df08:	e0bffd17 	ldw	r2,-12(fp)
 200df0c:	1887c83a 	sub	r3,r3,r2
 200df10:	e0bffe17 	ldw	r2,-8(fp)
 200df14:	11000417 	ldw	r4,16(r2)
 200df18:	e0bfff17 	ldw	r2,-4(fp)
 200df1c:	10800417 	ldw	r2,16(r2)
 200df20:	2085c83a 	sub	r2,r4,r2
 200df24:	1004917a 	slli	r2,r2,5
 200df28:	1885883a 	add	r2,r3,r2
 200df2c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 200df30:	e0bff717 	ldw	r2,-36(fp)
 200df34:	0080060e 	bge	zero,r2,200df50 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 200df38:	e0fff917 	ldw	r3,-28(fp)
 200df3c:	e0bff717 	ldw	r2,-36(fp)
 200df40:	1004953a 	slli	r2,r2,20
 200df44:	1885883a 	add	r2,r3,r2
 200df48:	e0bff915 	stw	r2,-28(fp)
 200df4c:	00000806 	br	200df70 <__ratio+0xc4>
  else
    {
      k = -k;
 200df50:	e0bff717 	ldw	r2,-36(fp)
 200df54:	0085c83a 	sub	r2,zero,r2
 200df58:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 200df5c:	e0fffb17 	ldw	r3,-20(fp)
 200df60:	e0bff717 	ldw	r2,-36(fp)
 200df64:	1004953a 	slli	r2,r2,20
 200df68:	1885883a 	add	r2,r3,r2
 200df6c:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 200df70:	e0bff817 	ldw	r2,-32(fp)
 200df74:	e0fff917 	ldw	r3,-28(fp)
 200df78:	e13ffa17 	ldw	r4,-24(fp)
 200df7c:	e17ffb17 	ldw	r5,-20(fp)
 200df80:	200d883a 	mov	r6,r4
 200df84:	280f883a 	mov	r7,r5
 200df88:	1009883a 	mov	r4,r2
 200df8c:	180b883a 	mov	r5,r3
 200df90:	20035bc0 	call	20035bc <__divdf3>
 200df94:	100f883a 	mov	r7,r2
 200df98:	1811883a 	mov	r8,r3
 200df9c:	380b883a 	mov	r5,r7
 200dfa0:	400d883a 	mov	r6,r8
 200dfa4:	2807883a 	mov	r3,r5
 200dfa8:	3009883a 	mov	r4,r6
}
 200dfac:	1805883a 	mov	r2,r3
 200dfb0:	2007883a 	mov	r3,r4
 200dfb4:	e037883a 	mov	sp,fp
 200dfb8:	dfc00117 	ldw	ra,4(sp)
 200dfbc:	df000017 	ldw	fp,0(sp)
 200dfc0:	dec00204 	addi	sp,sp,8
 200dfc4:	f800283a 	ret

0200dfc8 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 200dfc8:	defffb04 	addi	sp,sp,-20
 200dfcc:	dfc00415 	stw	ra,16(sp)
 200dfd0:	df000315 	stw	fp,12(sp)
 200dfd4:	df000304 	addi	fp,sp,12
 200dfd8:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 200dfdc:	e03ffd15 	stw	zero,-12(fp)
 200dfe0:	008ffc34 	movhi	r2,16368
 200dfe4:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 200dfe8:	e0bfff17 	ldw	r2,-4(fp)
 200dfec:	10800608 	cmpgei	r2,r2,24
 200dff0:	1000141e 	bne	r2,zero,200e044 <_mprec_log10+0x7c>
    return tens[dig];
 200dff4:	008080b4 	movhi	r2,514
 200dff8:	10baea04 	addi	r2,r2,-5208
 200dffc:	e0ffff17 	ldw	r3,-4(fp)
 200e000:	180690fa 	slli	r3,r3,3
 200e004:	10c9883a 	add	r4,r2,r3
 200e008:	20800017 	ldw	r2,0(r4)
 200e00c:	20c00117 	ldw	r3,4(r4)
 200e010:	00001006 	br	200e054 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 200e014:	000d883a 	mov	r6,zero
 200e018:	01d00934 	movhi	r7,16420
 200e01c:	e13ffd17 	ldw	r4,-12(fp)
 200e020:	e17ffe17 	ldw	r5,-8(fp)
 200e024:	20040740 	call	2004074 <__muldf3>
 200e028:	1009883a 	mov	r4,r2
 200e02c:	180b883a 	mov	r5,r3
 200e030:	e13ffd15 	stw	r4,-12(fp)
 200e034:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 200e038:	e0bfff17 	ldw	r2,-4(fp)
 200e03c:	10bfffc4 	addi	r2,r2,-1
 200e040:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 200e044:	e0bfff17 	ldw	r2,-4(fp)
 200e048:	00bff216 	blt	zero,r2,200e014 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 200e04c:	e0bffd17 	ldw	r2,-12(fp)
 200e050:	e0fffe17 	ldw	r3,-8(fp)
 200e054:	1009883a 	mov	r4,r2
 200e058:	180b883a 	mov	r5,r3
}
 200e05c:	2005883a 	mov	r2,r4
 200e060:	2807883a 	mov	r3,r5
 200e064:	e037883a 	mov	sp,fp
 200e068:	dfc00117 	ldw	ra,4(sp)
 200e06c:	df000017 	ldw	fp,0(sp)
 200e070:	dec00204 	addi	sp,sp,8
 200e074:	f800283a 	ret

0200e078 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 200e078:	defff904 	addi	sp,sp,-28
 200e07c:	df000615 	stw	fp,24(sp)
 200e080:	df000604 	addi	fp,sp,24
 200e084:	e13ffd15 	stw	r4,-12(fp)
 200e088:	e17ffe15 	stw	r5,-8(fp)
 200e08c:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 200e090:	e0bffe17 	ldw	r2,-8(fp)
 200e094:	10bfffc4 	addi	r2,r2,-1
 200e098:	1005d17a 	srai	r2,r2,5
 200e09c:	10800044 	addi	r2,r2,1
 200e0a0:	1085883a 	add	r2,r2,r2
 200e0a4:	1085883a 	add	r2,r2,r2
 200e0a8:	1007883a 	mov	r3,r2
 200e0ac:	e0bffd17 	ldw	r2,-12(fp)
 200e0b0:	10c5883a 	add	r2,r2,r3
 200e0b4:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 200e0b8:	e0bfff17 	ldw	r2,-4(fp)
 200e0bc:	10800504 	addi	r2,r2,20
 200e0c0:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 200e0c4:	e0bfff17 	ldw	r2,-4(fp)
 200e0c8:	10800417 	ldw	r2,16(r2)
 200e0cc:	1085883a 	add	r2,r2,r2
 200e0d0:	1085883a 	add	r2,r2,r2
 200e0d4:	1007883a 	mov	r3,r2
 200e0d8:	e0bffa17 	ldw	r2,-24(fp)
 200e0dc:	10c5883a 	add	r2,r2,r3
 200e0e0:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 200e0e4:	00000806 	br	200e108 <__copybits+0x90>
		*c++ = *x++;
 200e0e8:	e0bffd17 	ldw	r2,-12(fp)
 200e0ec:	10c00104 	addi	r3,r2,4
 200e0f0:	e0fffd15 	stw	r3,-12(fp)
 200e0f4:	e0fffa17 	ldw	r3,-24(fp)
 200e0f8:	19000104 	addi	r4,r3,4
 200e0fc:	e13ffa15 	stw	r4,-24(fp)
 200e100:	18c00017 	ldw	r3,0(r3)
 200e104:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 200e108:	e0fffa17 	ldw	r3,-24(fp)
 200e10c:	e0bffc17 	ldw	r2,-16(fp)
 200e110:	18bff536 	bltu	r3,r2,200e0e8 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200e114:	00000406 	br	200e128 <__copybits+0xb0>
		*c++ = 0;
 200e118:	e0bffd17 	ldw	r2,-12(fp)
 200e11c:	10c00104 	addi	r3,r2,4
 200e120:	e0fffd15 	stw	r3,-12(fp)
 200e124:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200e128:	e0fffd17 	ldw	r3,-12(fp)
 200e12c:	e0bffb17 	ldw	r2,-20(fp)
 200e130:	18bff936 	bltu	r3,r2,200e118 <__copybits+0xa0>
		*c++ = 0;
}
 200e134:	0001883a 	nop
 200e138:	e037883a 	mov	sp,fp
 200e13c:	df000017 	ldw	fp,0(sp)
 200e140:	dec00104 	addi	sp,sp,4
 200e144:	f800283a 	ret

0200e148 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 200e148:	defff704 	addi	sp,sp,-36
 200e14c:	df000815 	stw	fp,32(sp)
 200e150:	df000804 	addi	fp,sp,32
 200e154:	e13ffe15 	stw	r4,-8(fp)
 200e158:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 200e15c:	e0bffe17 	ldw	r2,-8(fp)
 200e160:	10800504 	addi	r2,r2,20
 200e164:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 200e168:	e0bffe17 	ldw	r2,-8(fp)
 200e16c:	10800417 	ldw	r2,16(r2)
 200e170:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 200e174:	e0bfff17 	ldw	r2,-4(fp)
 200e178:	1005d17a 	srai	r2,r2,5
 200e17c:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 200e180:	e0bff817 	ldw	r2,-32(fp)
 200e184:	e0fffa17 	ldw	r3,-24(fp)
 200e188:	1880030e 	bge	r3,r2,200e198 <__any_on+0x50>
		n = nwds;
 200e18c:	e0bffa17 	ldw	r2,-24(fp)
 200e190:	e0bff815 	stw	r2,-32(fp)
 200e194:	00001f06 	br	200e214 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 200e198:	e0fff817 	ldw	r3,-32(fp)
 200e19c:	e0bffa17 	ldw	r2,-24(fp)
 200e1a0:	18801c0e 	bge	r3,r2,200e214 <__any_on+0xcc>
 200e1a4:	e0bfff17 	ldw	r2,-4(fp)
 200e1a8:	108007cc 	andi	r2,r2,31
 200e1ac:	e0bfff15 	stw	r2,-4(fp)
 200e1b0:	e0bfff17 	ldw	r2,-4(fp)
 200e1b4:	10001726 	beq	r2,zero,200e214 <__any_on+0xcc>
		x1 = x2 = x[n];
 200e1b8:	e0bff817 	ldw	r2,-32(fp)
 200e1bc:	1085883a 	add	r2,r2,r2
 200e1c0:	1085883a 	add	r2,r2,r2
 200e1c4:	1007883a 	mov	r3,r2
 200e1c8:	e0bff917 	ldw	r2,-28(fp)
 200e1cc:	10c5883a 	add	r2,r2,r3
 200e1d0:	10800017 	ldw	r2,0(r2)
 200e1d4:	e0bffb15 	stw	r2,-20(fp)
 200e1d8:	e0bffb17 	ldw	r2,-20(fp)
 200e1dc:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 200e1e0:	e0fffc17 	ldw	r3,-16(fp)
 200e1e4:	e0bfff17 	ldw	r2,-4(fp)
 200e1e8:	1884d83a 	srl	r2,r3,r2
 200e1ec:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 200e1f0:	e0fffc17 	ldw	r3,-16(fp)
 200e1f4:	e0bfff17 	ldw	r2,-4(fp)
 200e1f8:	1884983a 	sll	r2,r3,r2
 200e1fc:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 200e200:	e0fffc17 	ldw	r3,-16(fp)
 200e204:	e0bffb17 	ldw	r2,-20(fp)
 200e208:	18800226 	beq	r3,r2,200e214 <__any_on+0xcc>
			return 1;
 200e20c:	00800044 	movi	r2,1
 200e210:	00001606 	br	200e26c <__any_on+0x124>
		}
	x0 = x;
 200e214:	e0bff917 	ldw	r2,-28(fp)
 200e218:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 200e21c:	e0bff817 	ldw	r2,-32(fp)
 200e220:	1085883a 	add	r2,r2,r2
 200e224:	1085883a 	add	r2,r2,r2
 200e228:	1007883a 	mov	r3,r2
 200e22c:	e0bff917 	ldw	r2,-28(fp)
 200e230:	10c5883a 	add	r2,r2,r3
 200e234:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 200e238:	00000806 	br	200e25c <__any_on+0x114>
		if (*--x)
 200e23c:	e0bff917 	ldw	r2,-28(fp)
 200e240:	10bfff04 	addi	r2,r2,-4
 200e244:	e0bff915 	stw	r2,-28(fp)
 200e248:	e0bff917 	ldw	r2,-28(fp)
 200e24c:	10800017 	ldw	r2,0(r2)
 200e250:	10000226 	beq	r2,zero,200e25c <__any_on+0x114>
			return 1;
 200e254:	00800044 	movi	r2,1
 200e258:	00000406 	br	200e26c <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 200e25c:	e0bff917 	ldw	r2,-28(fp)
 200e260:	e0fffd17 	ldw	r3,-12(fp)
 200e264:	18bff536 	bltu	r3,r2,200e23c <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 200e268:	0005883a 	mov	r2,zero
}
 200e26c:	e037883a 	mov	sp,fp
 200e270:	df000017 	ldw	fp,0(sp)
 200e274:	dec00104 	addi	sp,sp,4
 200e278:	f800283a 	ret

0200e27c <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 200e27c:	deffe104 	addi	sp,sp,-124
 200e280:	dfc01e15 	stw	ra,120(sp)
 200e284:	df001d15 	stw	fp,116(sp)
 200e288:	df001d04 	addi	fp,sp,116
 200e28c:	e13ffd15 	stw	r4,-12(fp)
 200e290:	e17ffe15 	stw	r5,-8(fp)
 200e294:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 200e298:	e0bffe17 	ldw	r2,-8(fp)
 200e29c:	1000041e 	bne	r2,zero,200e2b0 <_realloc_r+0x34>
 200e2a0:	e17fff17 	ldw	r5,-4(fp)
 200e2a4:	e13ffd17 	ldw	r4,-12(fp)
 200e2a8:	200b8c40 	call	200b8c4 <_malloc_r>
 200e2ac:	0002ea06 	br	200ee58 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 200e2b0:	e13ffd17 	ldw	r4,-12(fp)
 200e2b4:	2013d580 	call	2013d58 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 200e2b8:	e0bffe17 	ldw	r2,-8(fp)
 200e2bc:	10bffe04 	addi	r2,r2,-8
 200e2c0:	e0bfef15 	stw	r2,-68(fp)
 200e2c4:	e0bfef17 	ldw	r2,-68(fp)
 200e2c8:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 200e2cc:	e0bfef17 	ldw	r2,-68(fp)
 200e2d0:	10c00117 	ldw	r3,4(r2)
 200e2d4:	00bfff04 	movi	r2,-4
 200e2d8:	1884703a 	and	r2,r3,r2
 200e2dc:	e0bff015 	stw	r2,-64(fp)
 200e2e0:	e0bff017 	ldw	r2,-64(fp)
 200e2e4:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 200e2e8:	e0bfff17 	ldw	r2,-4(fp)
 200e2ec:	108002c4 	addi	r2,r2,11
 200e2f0:	108005f0 	cmpltui	r2,r2,23
 200e2f4:	1000051e 	bne	r2,zero,200e30c <_realloc_r+0x90>
 200e2f8:	e0bfff17 	ldw	r2,-4(fp)
 200e2fc:	10c002c4 	addi	r3,r2,11
 200e300:	00bffe04 	movi	r2,-8
 200e304:	1884703a 	and	r2,r3,r2
 200e308:	00000106 	br	200e310 <_realloc_r+0x94>
 200e30c:	00800404 	movi	r2,16
 200e310:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200e314:	e0bff117 	ldw	r2,-60(fp)
 200e318:	10000316 	blt	r2,zero,200e328 <_realloc_r+0xac>
 200e31c:	e0fff117 	ldw	r3,-60(fp)
 200e320:	e0bfff17 	ldw	r2,-4(fp)
 200e324:	1880052e 	bgeu	r3,r2,200e33c <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 200e328:	e0bffd17 	ldw	r2,-12(fp)
 200e32c:	00c00304 	movi	r3,12
 200e330:	10c00015 	stw	r3,0(r2)
    return 0;
 200e334:	0005883a 	mov	r2,zero
 200e338:	0002c706 	br	200ee58 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 200e33c:	e0fff017 	ldw	r3,-64(fp)
 200e340:	e0bff117 	ldw	r2,-60(fp)
 200e344:	18828b0e 	bge	r3,r2,200ed74 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 200e348:	e0ffef17 	ldw	r3,-68(fp)
 200e34c:	e0bff017 	ldw	r2,-64(fp)
 200e350:	1885883a 	add	r2,r3,r2
 200e354:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 200e358:	008080b4 	movhi	r2,514
 200e35c:	10bcd504 	addi	r2,r2,-3244
 200e360:	10c00217 	ldw	r3,8(r2)
 200e364:	e0bfe517 	ldw	r2,-108(fp)
 200e368:	18800926 	beq	r3,r2,200e390 <_realloc_r+0x114>
 200e36c:	e0bfe517 	ldw	r2,-108(fp)
 200e370:	10c00117 	ldw	r3,4(r2)
 200e374:	00bfff84 	movi	r2,-2
 200e378:	1884703a 	and	r2,r3,r2
 200e37c:	e0ffe517 	ldw	r3,-108(fp)
 200e380:	1885883a 	add	r2,r3,r2
 200e384:	10800117 	ldw	r2,4(r2)
 200e388:	1080004c 	andi	r2,r2,1
 200e38c:	1000461e 	bne	r2,zero,200e4a8 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 200e390:	e0bfe517 	ldw	r2,-108(fp)
 200e394:	10c00117 	ldw	r3,4(r2)
 200e398:	00bfff04 	movi	r2,-4
 200e39c:	1884703a 	and	r2,r3,r2
 200e3a0:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 200e3a4:	008080b4 	movhi	r2,514
 200e3a8:	10bcd504 	addi	r2,r2,-3244
 200e3ac:	10c00217 	ldw	r3,8(r2)
 200e3b0:	e0bfe517 	ldw	r2,-108(fp)
 200e3b4:	1880251e 	bne	r3,r2,200e44c <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 200e3b8:	e0ffe617 	ldw	r3,-104(fp)
 200e3bc:	e0bfe417 	ldw	r2,-112(fp)
 200e3c0:	1885883a 	add	r2,r3,r2
 200e3c4:	1007883a 	mov	r3,r2
 200e3c8:	e0bff117 	ldw	r2,-60(fp)
 200e3cc:	10800404 	addi	r2,r2,16
 200e3d0:	18803816 	blt	r3,r2,200e4b4 <_realloc_r+0x238>
        {
          newsize += nextsize;
 200e3d4:	e0ffe417 	ldw	r3,-112(fp)
 200e3d8:	e0bfe617 	ldw	r2,-104(fp)
 200e3dc:	1885883a 	add	r2,r3,r2
 200e3e0:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 200e3e4:	008080b4 	movhi	r2,514
 200e3e8:	10bcd504 	addi	r2,r2,-3244
 200e3ec:	e13fef17 	ldw	r4,-68(fp)
 200e3f0:	e0fff117 	ldw	r3,-60(fp)
 200e3f4:	20c7883a 	add	r3,r4,r3
 200e3f8:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 200e3fc:	008080b4 	movhi	r2,514
 200e400:	10bcd504 	addi	r2,r2,-3244
 200e404:	10800217 	ldw	r2,8(r2)
 200e408:	e13fe417 	ldw	r4,-112(fp)
 200e40c:	e0fff117 	ldw	r3,-60(fp)
 200e410:	20c7c83a 	sub	r3,r4,r3
 200e414:	18c00054 	ori	r3,r3,1
 200e418:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 200e41c:	e0bfef17 	ldw	r2,-68(fp)
 200e420:	10800117 	ldw	r2,4(r2)
 200e424:	10c0004c 	andi	r3,r2,1
 200e428:	e0bff117 	ldw	r2,-60(fp)
 200e42c:	1886b03a 	or	r3,r3,r2
 200e430:	e0bfef17 	ldw	r2,-68(fp)
 200e434:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 200e438:	e13ffd17 	ldw	r4,-12(fp)
 200e43c:	2013e780 	call	2013e78 <__malloc_unlock>
          return chunk2mem(oldp);
 200e440:	e0bfef17 	ldw	r2,-68(fp)
 200e444:	10800204 	addi	r2,r2,8
 200e448:	00028306 	br	200ee58 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 200e44c:	e0ffe617 	ldw	r3,-104(fp)
 200e450:	e0bfe417 	ldw	r2,-112(fp)
 200e454:	1885883a 	add	r2,r3,r2
 200e458:	1007883a 	mov	r3,r2
 200e45c:	e0bff117 	ldw	r2,-60(fp)
 200e460:	18801416 	blt	r3,r2,200e4b4 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 200e464:	e0bfe517 	ldw	r2,-108(fp)
 200e468:	10800317 	ldw	r2,12(r2)
 200e46c:	e0bff215 	stw	r2,-56(fp)
 200e470:	e0bfe517 	ldw	r2,-108(fp)
 200e474:	10800217 	ldw	r2,8(r2)
 200e478:	e0bff315 	stw	r2,-52(fp)
 200e47c:	e0bff317 	ldw	r2,-52(fp)
 200e480:	e0fff217 	ldw	r3,-56(fp)
 200e484:	10c00315 	stw	r3,12(r2)
 200e488:	e0bff217 	ldw	r2,-56(fp)
 200e48c:	e0fff317 	ldw	r3,-52(fp)
 200e490:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 200e494:	e0ffe417 	ldw	r3,-112(fp)
 200e498:	e0bfe617 	ldw	r2,-104(fp)
 200e49c:	1885883a 	add	r2,r3,r2
 200e4a0:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 200e4a4:	00023306 	br	200ed74 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 200e4a8:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 200e4ac:	e03fe615 	stw	zero,-104(fp)
 200e4b0:	00000106 	br	200e4b8 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 200e4b4:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 200e4b8:	e0bfef17 	ldw	r2,-68(fp)
 200e4bc:	10800117 	ldw	r2,4(r2)
 200e4c0:	1080004c 	andi	r2,r2,1
 200e4c4:	1001a91e 	bne	r2,zero,200eb6c <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 200e4c8:	e0bfef17 	ldw	r2,-68(fp)
 200e4cc:	10800017 	ldw	r2,0(r2)
 200e4d0:	0085c83a 	sub	r2,zero,r2
 200e4d4:	e0ffef17 	ldw	r3,-68(fp)
 200e4d8:	1885883a 	add	r2,r3,r2
 200e4dc:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 200e4e0:	e0bff417 	ldw	r2,-48(fp)
 200e4e4:	10c00117 	ldw	r3,4(r2)
 200e4e8:	00bfff04 	movi	r2,-4
 200e4ec:	1884703a 	and	r2,r3,r2
 200e4f0:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 200e4f4:	e0bfe517 	ldw	r2,-108(fp)
 200e4f8:	10012226 	beq	r2,zero,200e984 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 200e4fc:	008080b4 	movhi	r2,514
 200e500:	10bcd504 	addi	r2,r2,-3244
 200e504:	10c00217 	ldw	r3,8(r2)
 200e508:	e0bfe517 	ldw	r2,-108(fp)
 200e50c:	1880951e 	bne	r3,r2,200e764 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 200e510:	e0ffe617 	ldw	r3,-104(fp)
 200e514:	e0bff517 	ldw	r2,-44(fp)
 200e518:	1887883a 	add	r3,r3,r2
 200e51c:	e0bfe417 	ldw	r2,-112(fp)
 200e520:	1885883a 	add	r2,r3,r2
 200e524:	1007883a 	mov	r3,r2
 200e528:	e0bff117 	ldw	r2,-60(fp)
 200e52c:	10800404 	addi	r2,r2,16
 200e530:	18811416 	blt	r3,r2,200e984 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 200e534:	e0bff417 	ldw	r2,-48(fp)
 200e538:	10800317 	ldw	r2,12(r2)
 200e53c:	e0bff215 	stw	r2,-56(fp)
 200e540:	e0bff417 	ldw	r2,-48(fp)
 200e544:	10800217 	ldw	r2,8(r2)
 200e548:	e0bff315 	stw	r2,-52(fp)
 200e54c:	e0bff317 	ldw	r2,-52(fp)
 200e550:	e0fff217 	ldw	r3,-56(fp)
 200e554:	10c00315 	stw	r3,12(r2)
 200e558:	e0bff217 	ldw	r2,-56(fp)
 200e55c:	e0fff317 	ldw	r3,-52(fp)
 200e560:	10c00215 	stw	r3,8(r2)
            newp = prev;
 200e564:	e0bff417 	ldw	r2,-48(fp)
 200e568:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 200e56c:	e0fff517 	ldw	r3,-44(fp)
 200e570:	e0bfe617 	ldw	r2,-104(fp)
 200e574:	1885883a 	add	r2,r3,r2
 200e578:	e0ffe417 	ldw	r3,-112(fp)
 200e57c:	1885883a 	add	r2,r3,r2
 200e580:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 200e584:	e0bfe317 	ldw	r2,-116(fp)
 200e588:	10800204 	addi	r2,r2,8
 200e58c:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e590:	e0bff017 	ldw	r2,-64(fp)
 200e594:	10bfff04 	addi	r2,r2,-4
 200e598:	e0bff715 	stw	r2,-36(fp)
 200e59c:	e0bff717 	ldw	r2,-36(fp)
 200e5a0:	10800968 	cmpgeui	r2,r2,37
 200e5a4:	1000521e 	bne	r2,zero,200e6f0 <_realloc_r+0x474>
 200e5a8:	e0bffe17 	ldw	r2,-8(fp)
 200e5ac:	e0bfe715 	stw	r2,-100(fp)
 200e5b0:	e0bff617 	ldw	r2,-40(fp)
 200e5b4:	e0bfe815 	stw	r2,-96(fp)
 200e5b8:	e0bff717 	ldw	r2,-36(fp)
 200e5bc:	10800530 	cmpltui	r2,r2,20
 200e5c0:	1000361e 	bne	r2,zero,200e69c <_realloc_r+0x420>
 200e5c4:	e0bfe817 	ldw	r2,-96(fp)
 200e5c8:	10c00104 	addi	r3,r2,4
 200e5cc:	e0ffe815 	stw	r3,-96(fp)
 200e5d0:	e0ffe717 	ldw	r3,-100(fp)
 200e5d4:	19000104 	addi	r4,r3,4
 200e5d8:	e13fe715 	stw	r4,-100(fp)
 200e5dc:	18c00017 	ldw	r3,0(r3)
 200e5e0:	10c00015 	stw	r3,0(r2)
 200e5e4:	e0bfe817 	ldw	r2,-96(fp)
 200e5e8:	10c00104 	addi	r3,r2,4
 200e5ec:	e0ffe815 	stw	r3,-96(fp)
 200e5f0:	e0ffe717 	ldw	r3,-100(fp)
 200e5f4:	19000104 	addi	r4,r3,4
 200e5f8:	e13fe715 	stw	r4,-100(fp)
 200e5fc:	18c00017 	ldw	r3,0(r3)
 200e600:	10c00015 	stw	r3,0(r2)
 200e604:	e0bff717 	ldw	r2,-36(fp)
 200e608:	10800730 	cmpltui	r2,r2,28
 200e60c:	1000231e 	bne	r2,zero,200e69c <_realloc_r+0x420>
 200e610:	e0bfe817 	ldw	r2,-96(fp)
 200e614:	10c00104 	addi	r3,r2,4
 200e618:	e0ffe815 	stw	r3,-96(fp)
 200e61c:	e0ffe717 	ldw	r3,-100(fp)
 200e620:	19000104 	addi	r4,r3,4
 200e624:	e13fe715 	stw	r4,-100(fp)
 200e628:	18c00017 	ldw	r3,0(r3)
 200e62c:	10c00015 	stw	r3,0(r2)
 200e630:	e0bfe817 	ldw	r2,-96(fp)
 200e634:	10c00104 	addi	r3,r2,4
 200e638:	e0ffe815 	stw	r3,-96(fp)
 200e63c:	e0ffe717 	ldw	r3,-100(fp)
 200e640:	19000104 	addi	r4,r3,4
 200e644:	e13fe715 	stw	r4,-100(fp)
 200e648:	18c00017 	ldw	r3,0(r3)
 200e64c:	10c00015 	stw	r3,0(r2)
 200e650:	e0bff717 	ldw	r2,-36(fp)
 200e654:	10800930 	cmpltui	r2,r2,36
 200e658:	1000101e 	bne	r2,zero,200e69c <_realloc_r+0x420>
 200e65c:	e0bfe817 	ldw	r2,-96(fp)
 200e660:	10c00104 	addi	r3,r2,4
 200e664:	e0ffe815 	stw	r3,-96(fp)
 200e668:	e0ffe717 	ldw	r3,-100(fp)
 200e66c:	19000104 	addi	r4,r3,4
 200e670:	e13fe715 	stw	r4,-100(fp)
 200e674:	18c00017 	ldw	r3,0(r3)
 200e678:	10c00015 	stw	r3,0(r2)
 200e67c:	e0bfe817 	ldw	r2,-96(fp)
 200e680:	10c00104 	addi	r3,r2,4
 200e684:	e0ffe815 	stw	r3,-96(fp)
 200e688:	e0ffe717 	ldw	r3,-100(fp)
 200e68c:	19000104 	addi	r4,r3,4
 200e690:	e13fe715 	stw	r4,-100(fp)
 200e694:	18c00017 	ldw	r3,0(r3)
 200e698:	10c00015 	stw	r3,0(r2)
 200e69c:	e0bfe817 	ldw	r2,-96(fp)
 200e6a0:	10c00104 	addi	r3,r2,4
 200e6a4:	e0ffe815 	stw	r3,-96(fp)
 200e6a8:	e0ffe717 	ldw	r3,-100(fp)
 200e6ac:	19000104 	addi	r4,r3,4
 200e6b0:	e13fe715 	stw	r4,-100(fp)
 200e6b4:	18c00017 	ldw	r3,0(r3)
 200e6b8:	10c00015 	stw	r3,0(r2)
 200e6bc:	e0bfe817 	ldw	r2,-96(fp)
 200e6c0:	10c00104 	addi	r3,r2,4
 200e6c4:	e0ffe815 	stw	r3,-96(fp)
 200e6c8:	e0ffe717 	ldw	r3,-100(fp)
 200e6cc:	19000104 	addi	r4,r3,4
 200e6d0:	e13fe715 	stw	r4,-100(fp)
 200e6d4:	18c00017 	ldw	r3,0(r3)
 200e6d8:	10c00015 	stw	r3,0(r2)
 200e6dc:	e0bfe717 	ldw	r2,-100(fp)
 200e6e0:	10c00017 	ldw	r3,0(r2)
 200e6e4:	e0bfe817 	ldw	r2,-96(fp)
 200e6e8:	10c00015 	stw	r3,0(r2)
 200e6ec:	00000406 	br	200e700 <_realloc_r+0x484>
 200e6f0:	e1bff717 	ldw	r6,-36(fp)
 200e6f4:	e17ffe17 	ldw	r5,-8(fp)
 200e6f8:	e13ff617 	ldw	r4,-40(fp)
 200e6fc:	200c5fc0 	call	200c5fc <memmove>
            top = chunk_at_offset(newp, nb);
 200e700:	008080b4 	movhi	r2,514
 200e704:	10bcd504 	addi	r2,r2,-3244
 200e708:	e13fe317 	ldw	r4,-116(fp)
 200e70c:	e0fff117 	ldw	r3,-60(fp)
 200e710:	20c7883a 	add	r3,r4,r3
 200e714:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 200e718:	008080b4 	movhi	r2,514
 200e71c:	10bcd504 	addi	r2,r2,-3244
 200e720:	10800217 	ldw	r2,8(r2)
 200e724:	e13fe417 	ldw	r4,-112(fp)
 200e728:	e0fff117 	ldw	r3,-60(fp)
 200e72c:	20c7c83a 	sub	r3,r4,r3
 200e730:	18c00054 	ori	r3,r3,1
 200e734:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 200e738:	e0bfe317 	ldw	r2,-116(fp)
 200e73c:	10800117 	ldw	r2,4(r2)
 200e740:	10c0004c 	andi	r3,r2,1
 200e744:	e0bff117 	ldw	r2,-60(fp)
 200e748:	1886b03a 	or	r3,r3,r2
 200e74c:	e0bfe317 	ldw	r2,-116(fp)
 200e750:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 200e754:	e13ffd17 	ldw	r4,-12(fp)
 200e758:	2013e780 	call	2013e78 <__malloc_unlock>
            return newmem;
 200e75c:	e0bff617 	ldw	r2,-40(fp)
 200e760:	0001bd06 	br	200ee58 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 200e764:	e0ffe617 	ldw	r3,-104(fp)
 200e768:	e0bff517 	ldw	r2,-44(fp)
 200e76c:	1887883a 	add	r3,r3,r2
 200e770:	e0bfe417 	ldw	r2,-112(fp)
 200e774:	1885883a 	add	r2,r3,r2
 200e778:	1007883a 	mov	r3,r2
 200e77c:	e0bff117 	ldw	r2,-60(fp)
 200e780:	18808016 	blt	r3,r2,200e984 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 200e784:	e0bfe517 	ldw	r2,-108(fp)
 200e788:	10800317 	ldw	r2,12(r2)
 200e78c:	e0bff215 	stw	r2,-56(fp)
 200e790:	e0bfe517 	ldw	r2,-108(fp)
 200e794:	10800217 	ldw	r2,8(r2)
 200e798:	e0bff315 	stw	r2,-52(fp)
 200e79c:	e0bff317 	ldw	r2,-52(fp)
 200e7a0:	e0fff217 	ldw	r3,-56(fp)
 200e7a4:	10c00315 	stw	r3,12(r2)
 200e7a8:	e0bff217 	ldw	r2,-56(fp)
 200e7ac:	e0fff317 	ldw	r3,-52(fp)
 200e7b0:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 200e7b4:	e0bff417 	ldw	r2,-48(fp)
 200e7b8:	10800317 	ldw	r2,12(r2)
 200e7bc:	e0bff215 	stw	r2,-56(fp)
 200e7c0:	e0bff417 	ldw	r2,-48(fp)
 200e7c4:	10800217 	ldw	r2,8(r2)
 200e7c8:	e0bff315 	stw	r2,-52(fp)
 200e7cc:	e0bff317 	ldw	r2,-52(fp)
 200e7d0:	e0fff217 	ldw	r3,-56(fp)
 200e7d4:	10c00315 	stw	r3,12(r2)
 200e7d8:	e0bff217 	ldw	r2,-56(fp)
 200e7dc:	e0fff317 	ldw	r3,-52(fp)
 200e7e0:	10c00215 	stw	r3,8(r2)
          newp = prev;
 200e7e4:	e0bff417 	ldw	r2,-48(fp)
 200e7e8:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 200e7ec:	e0ffe617 	ldw	r3,-104(fp)
 200e7f0:	e0bff517 	ldw	r2,-44(fp)
 200e7f4:	1885883a 	add	r2,r3,r2
 200e7f8:	e0ffe417 	ldw	r3,-112(fp)
 200e7fc:	1885883a 	add	r2,r3,r2
 200e800:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 200e804:	e0bfe317 	ldw	r2,-116(fp)
 200e808:	10800204 	addi	r2,r2,8
 200e80c:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e810:	e0bff017 	ldw	r2,-64(fp)
 200e814:	10bfff04 	addi	r2,r2,-4
 200e818:	e0bff815 	stw	r2,-32(fp)
 200e81c:	e0bff817 	ldw	r2,-32(fp)
 200e820:	10800968 	cmpgeui	r2,r2,37
 200e824:	1000521e 	bne	r2,zero,200e970 <_realloc_r+0x6f4>
 200e828:	e0bffe17 	ldw	r2,-8(fp)
 200e82c:	e0bfe915 	stw	r2,-92(fp)
 200e830:	e0bff617 	ldw	r2,-40(fp)
 200e834:	e0bfea15 	stw	r2,-88(fp)
 200e838:	e0bff817 	ldw	r2,-32(fp)
 200e83c:	10800530 	cmpltui	r2,r2,20
 200e840:	1000361e 	bne	r2,zero,200e91c <_realloc_r+0x6a0>
 200e844:	e0bfea17 	ldw	r2,-88(fp)
 200e848:	10c00104 	addi	r3,r2,4
 200e84c:	e0ffea15 	stw	r3,-88(fp)
 200e850:	e0ffe917 	ldw	r3,-92(fp)
 200e854:	19000104 	addi	r4,r3,4
 200e858:	e13fe915 	stw	r4,-92(fp)
 200e85c:	18c00017 	ldw	r3,0(r3)
 200e860:	10c00015 	stw	r3,0(r2)
 200e864:	e0bfea17 	ldw	r2,-88(fp)
 200e868:	10c00104 	addi	r3,r2,4
 200e86c:	e0ffea15 	stw	r3,-88(fp)
 200e870:	e0ffe917 	ldw	r3,-92(fp)
 200e874:	19000104 	addi	r4,r3,4
 200e878:	e13fe915 	stw	r4,-92(fp)
 200e87c:	18c00017 	ldw	r3,0(r3)
 200e880:	10c00015 	stw	r3,0(r2)
 200e884:	e0bff817 	ldw	r2,-32(fp)
 200e888:	10800730 	cmpltui	r2,r2,28
 200e88c:	1000231e 	bne	r2,zero,200e91c <_realloc_r+0x6a0>
 200e890:	e0bfea17 	ldw	r2,-88(fp)
 200e894:	10c00104 	addi	r3,r2,4
 200e898:	e0ffea15 	stw	r3,-88(fp)
 200e89c:	e0ffe917 	ldw	r3,-92(fp)
 200e8a0:	19000104 	addi	r4,r3,4
 200e8a4:	e13fe915 	stw	r4,-92(fp)
 200e8a8:	18c00017 	ldw	r3,0(r3)
 200e8ac:	10c00015 	stw	r3,0(r2)
 200e8b0:	e0bfea17 	ldw	r2,-88(fp)
 200e8b4:	10c00104 	addi	r3,r2,4
 200e8b8:	e0ffea15 	stw	r3,-88(fp)
 200e8bc:	e0ffe917 	ldw	r3,-92(fp)
 200e8c0:	19000104 	addi	r4,r3,4
 200e8c4:	e13fe915 	stw	r4,-92(fp)
 200e8c8:	18c00017 	ldw	r3,0(r3)
 200e8cc:	10c00015 	stw	r3,0(r2)
 200e8d0:	e0bff817 	ldw	r2,-32(fp)
 200e8d4:	10800930 	cmpltui	r2,r2,36
 200e8d8:	1000101e 	bne	r2,zero,200e91c <_realloc_r+0x6a0>
 200e8dc:	e0bfea17 	ldw	r2,-88(fp)
 200e8e0:	10c00104 	addi	r3,r2,4
 200e8e4:	e0ffea15 	stw	r3,-88(fp)
 200e8e8:	e0ffe917 	ldw	r3,-92(fp)
 200e8ec:	19000104 	addi	r4,r3,4
 200e8f0:	e13fe915 	stw	r4,-92(fp)
 200e8f4:	18c00017 	ldw	r3,0(r3)
 200e8f8:	10c00015 	stw	r3,0(r2)
 200e8fc:	e0bfea17 	ldw	r2,-88(fp)
 200e900:	10c00104 	addi	r3,r2,4
 200e904:	e0ffea15 	stw	r3,-88(fp)
 200e908:	e0ffe917 	ldw	r3,-92(fp)
 200e90c:	19000104 	addi	r4,r3,4
 200e910:	e13fe915 	stw	r4,-92(fp)
 200e914:	18c00017 	ldw	r3,0(r3)
 200e918:	10c00015 	stw	r3,0(r2)
 200e91c:	e0bfea17 	ldw	r2,-88(fp)
 200e920:	10c00104 	addi	r3,r2,4
 200e924:	e0ffea15 	stw	r3,-88(fp)
 200e928:	e0ffe917 	ldw	r3,-92(fp)
 200e92c:	19000104 	addi	r4,r3,4
 200e930:	e13fe915 	stw	r4,-92(fp)
 200e934:	18c00017 	ldw	r3,0(r3)
 200e938:	10c00015 	stw	r3,0(r2)
 200e93c:	e0bfea17 	ldw	r2,-88(fp)
 200e940:	10c00104 	addi	r3,r2,4
 200e944:	e0ffea15 	stw	r3,-88(fp)
 200e948:	e0ffe917 	ldw	r3,-92(fp)
 200e94c:	19000104 	addi	r4,r3,4
 200e950:	e13fe915 	stw	r4,-92(fp)
 200e954:	18c00017 	ldw	r3,0(r3)
 200e958:	10c00015 	stw	r3,0(r2)
 200e95c:	e0bfe917 	ldw	r2,-92(fp)
 200e960:	10c00017 	ldw	r3,0(r2)
 200e964:	e0bfea17 	ldw	r2,-88(fp)
 200e968:	10c00015 	stw	r3,0(r2)
          goto split;
 200e96c:	00010106 	br	200ed74 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e970:	e1bff817 	ldw	r6,-32(fp)
 200e974:	e17ffe17 	ldw	r5,-8(fp)
 200e978:	e13ff617 	ldw	r4,-40(fp)
 200e97c:	200c5fc0 	call	200c5fc <memmove>
          goto split;
 200e980:	0000fc06 	br	200ed74 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 200e984:	e0bff417 	ldw	r2,-48(fp)
 200e988:	10007826 	beq	r2,zero,200eb6c <_realloc_r+0x8f0>
 200e98c:	e0fff517 	ldw	r3,-44(fp)
 200e990:	e0bfe417 	ldw	r2,-112(fp)
 200e994:	1885883a 	add	r2,r3,r2
 200e998:	1007883a 	mov	r3,r2
 200e99c:	e0bff117 	ldw	r2,-60(fp)
 200e9a0:	18807216 	blt	r3,r2,200eb6c <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 200e9a4:	e0bff417 	ldw	r2,-48(fp)
 200e9a8:	10800317 	ldw	r2,12(r2)
 200e9ac:	e0bff215 	stw	r2,-56(fp)
 200e9b0:	e0bff417 	ldw	r2,-48(fp)
 200e9b4:	10800217 	ldw	r2,8(r2)
 200e9b8:	e0bff315 	stw	r2,-52(fp)
 200e9bc:	e0bff317 	ldw	r2,-52(fp)
 200e9c0:	e0fff217 	ldw	r3,-56(fp)
 200e9c4:	10c00315 	stw	r3,12(r2)
 200e9c8:	e0bff217 	ldw	r2,-56(fp)
 200e9cc:	e0fff317 	ldw	r3,-52(fp)
 200e9d0:	10c00215 	stw	r3,8(r2)
        newp = prev;
 200e9d4:	e0bff417 	ldw	r2,-48(fp)
 200e9d8:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 200e9dc:	e0ffe417 	ldw	r3,-112(fp)
 200e9e0:	e0bff517 	ldw	r2,-44(fp)
 200e9e4:	1885883a 	add	r2,r3,r2
 200e9e8:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 200e9ec:	e0bfe317 	ldw	r2,-116(fp)
 200e9f0:	10800204 	addi	r2,r2,8
 200e9f4:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e9f8:	e0bff017 	ldw	r2,-64(fp)
 200e9fc:	10bfff04 	addi	r2,r2,-4
 200ea00:	e0bff915 	stw	r2,-28(fp)
 200ea04:	e0bff917 	ldw	r2,-28(fp)
 200ea08:	10800968 	cmpgeui	r2,r2,37
 200ea0c:	1000521e 	bne	r2,zero,200eb58 <_realloc_r+0x8dc>
 200ea10:	e0bffe17 	ldw	r2,-8(fp)
 200ea14:	e0bfeb15 	stw	r2,-84(fp)
 200ea18:	e0bff617 	ldw	r2,-40(fp)
 200ea1c:	e0bfec15 	stw	r2,-80(fp)
 200ea20:	e0bff917 	ldw	r2,-28(fp)
 200ea24:	10800530 	cmpltui	r2,r2,20
 200ea28:	1000361e 	bne	r2,zero,200eb04 <_realloc_r+0x888>
 200ea2c:	e0bfec17 	ldw	r2,-80(fp)
 200ea30:	10c00104 	addi	r3,r2,4
 200ea34:	e0ffec15 	stw	r3,-80(fp)
 200ea38:	e0ffeb17 	ldw	r3,-84(fp)
 200ea3c:	19000104 	addi	r4,r3,4
 200ea40:	e13feb15 	stw	r4,-84(fp)
 200ea44:	18c00017 	ldw	r3,0(r3)
 200ea48:	10c00015 	stw	r3,0(r2)
 200ea4c:	e0bfec17 	ldw	r2,-80(fp)
 200ea50:	10c00104 	addi	r3,r2,4
 200ea54:	e0ffec15 	stw	r3,-80(fp)
 200ea58:	e0ffeb17 	ldw	r3,-84(fp)
 200ea5c:	19000104 	addi	r4,r3,4
 200ea60:	e13feb15 	stw	r4,-84(fp)
 200ea64:	18c00017 	ldw	r3,0(r3)
 200ea68:	10c00015 	stw	r3,0(r2)
 200ea6c:	e0bff917 	ldw	r2,-28(fp)
 200ea70:	10800730 	cmpltui	r2,r2,28
 200ea74:	1000231e 	bne	r2,zero,200eb04 <_realloc_r+0x888>
 200ea78:	e0bfec17 	ldw	r2,-80(fp)
 200ea7c:	10c00104 	addi	r3,r2,4
 200ea80:	e0ffec15 	stw	r3,-80(fp)
 200ea84:	e0ffeb17 	ldw	r3,-84(fp)
 200ea88:	19000104 	addi	r4,r3,4
 200ea8c:	e13feb15 	stw	r4,-84(fp)
 200ea90:	18c00017 	ldw	r3,0(r3)
 200ea94:	10c00015 	stw	r3,0(r2)
 200ea98:	e0bfec17 	ldw	r2,-80(fp)
 200ea9c:	10c00104 	addi	r3,r2,4
 200eaa0:	e0ffec15 	stw	r3,-80(fp)
 200eaa4:	e0ffeb17 	ldw	r3,-84(fp)
 200eaa8:	19000104 	addi	r4,r3,4
 200eaac:	e13feb15 	stw	r4,-84(fp)
 200eab0:	18c00017 	ldw	r3,0(r3)
 200eab4:	10c00015 	stw	r3,0(r2)
 200eab8:	e0bff917 	ldw	r2,-28(fp)
 200eabc:	10800930 	cmpltui	r2,r2,36
 200eac0:	1000101e 	bne	r2,zero,200eb04 <_realloc_r+0x888>
 200eac4:	e0bfec17 	ldw	r2,-80(fp)
 200eac8:	10c00104 	addi	r3,r2,4
 200eacc:	e0ffec15 	stw	r3,-80(fp)
 200ead0:	e0ffeb17 	ldw	r3,-84(fp)
 200ead4:	19000104 	addi	r4,r3,4
 200ead8:	e13feb15 	stw	r4,-84(fp)
 200eadc:	18c00017 	ldw	r3,0(r3)
 200eae0:	10c00015 	stw	r3,0(r2)
 200eae4:	e0bfec17 	ldw	r2,-80(fp)
 200eae8:	10c00104 	addi	r3,r2,4
 200eaec:	e0ffec15 	stw	r3,-80(fp)
 200eaf0:	e0ffeb17 	ldw	r3,-84(fp)
 200eaf4:	19000104 	addi	r4,r3,4
 200eaf8:	e13feb15 	stw	r4,-84(fp)
 200eafc:	18c00017 	ldw	r3,0(r3)
 200eb00:	10c00015 	stw	r3,0(r2)
 200eb04:	e0bfec17 	ldw	r2,-80(fp)
 200eb08:	10c00104 	addi	r3,r2,4
 200eb0c:	e0ffec15 	stw	r3,-80(fp)
 200eb10:	e0ffeb17 	ldw	r3,-84(fp)
 200eb14:	19000104 	addi	r4,r3,4
 200eb18:	e13feb15 	stw	r4,-84(fp)
 200eb1c:	18c00017 	ldw	r3,0(r3)
 200eb20:	10c00015 	stw	r3,0(r2)
 200eb24:	e0bfec17 	ldw	r2,-80(fp)
 200eb28:	10c00104 	addi	r3,r2,4
 200eb2c:	e0ffec15 	stw	r3,-80(fp)
 200eb30:	e0ffeb17 	ldw	r3,-84(fp)
 200eb34:	19000104 	addi	r4,r3,4
 200eb38:	e13feb15 	stw	r4,-84(fp)
 200eb3c:	18c00017 	ldw	r3,0(r3)
 200eb40:	10c00015 	stw	r3,0(r2)
 200eb44:	e0bfeb17 	ldw	r2,-84(fp)
 200eb48:	10c00017 	ldw	r3,0(r2)
 200eb4c:	e0bfec17 	ldw	r2,-80(fp)
 200eb50:	10c00015 	stw	r3,0(r2)
        goto split;
 200eb54:	00008706 	br	200ed74 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200eb58:	e1bff917 	ldw	r6,-28(fp)
 200eb5c:	e17ffe17 	ldw	r5,-8(fp)
 200eb60:	e13ff617 	ldw	r4,-40(fp)
 200eb64:	200c5fc0 	call	200c5fc <memmove>
        goto split;
 200eb68:	00008206 	br	200ed74 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 200eb6c:	e17fff17 	ldw	r5,-4(fp)
 200eb70:	e13ffd17 	ldw	r4,-12(fp)
 200eb74:	200b8c40 	call	200b8c4 <_malloc_r>
 200eb78:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 200eb7c:	e0bff617 	ldw	r2,-40(fp)
 200eb80:	1000041e 	bne	r2,zero,200eb94 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 200eb84:	e13ffd17 	ldw	r4,-12(fp)
 200eb88:	2013e780 	call	2013e78 <__malloc_unlock>
      return 0;
 200eb8c:	0005883a 	mov	r2,zero
 200eb90:	0000b106 	br	200ee58 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 200eb94:	e0bff617 	ldw	r2,-40(fp)
 200eb98:	10bffe04 	addi	r2,r2,-8
 200eb9c:	e0bfe315 	stw	r2,-116(fp)
 200eba0:	e0bfef17 	ldw	r2,-68(fp)
 200eba4:	10c00117 	ldw	r3,4(r2)
 200eba8:	00bfff84 	movi	r2,-2
 200ebac:	1884703a 	and	r2,r3,r2
 200ebb0:	e0ffef17 	ldw	r3,-68(fp)
 200ebb4:	1885883a 	add	r2,r3,r2
 200ebb8:	e0ffe317 	ldw	r3,-116(fp)
 200ebbc:	18800a1e 	bne	r3,r2,200ebe8 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 200ebc0:	e0bfe317 	ldw	r2,-116(fp)
 200ebc4:	10c00117 	ldw	r3,4(r2)
 200ebc8:	00bfff04 	movi	r2,-4
 200ebcc:	1884703a 	and	r2,r3,r2
 200ebd0:	e0ffe417 	ldw	r3,-112(fp)
 200ebd4:	1885883a 	add	r2,r3,r2
 200ebd8:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 200ebdc:	e0bfef17 	ldw	r2,-68(fp)
 200ebe0:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 200ebe4:	00006306 	br	200ed74 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200ebe8:	e0bff017 	ldw	r2,-64(fp)
 200ebec:	10bfff04 	addi	r2,r2,-4
 200ebf0:	e0bffa15 	stw	r2,-24(fp)
 200ebf4:	e0bffa17 	ldw	r2,-24(fp)
 200ebf8:	10800968 	cmpgeui	r2,r2,37
 200ebfc:	1000521e 	bne	r2,zero,200ed48 <_realloc_r+0xacc>
 200ec00:	e0bffe17 	ldw	r2,-8(fp)
 200ec04:	e0bfed15 	stw	r2,-76(fp)
 200ec08:	e0bff617 	ldw	r2,-40(fp)
 200ec0c:	e0bfee15 	stw	r2,-72(fp)
 200ec10:	e0bffa17 	ldw	r2,-24(fp)
 200ec14:	10800530 	cmpltui	r2,r2,20
 200ec18:	1000361e 	bne	r2,zero,200ecf4 <_realloc_r+0xa78>
 200ec1c:	e0bfee17 	ldw	r2,-72(fp)
 200ec20:	10c00104 	addi	r3,r2,4
 200ec24:	e0ffee15 	stw	r3,-72(fp)
 200ec28:	e0ffed17 	ldw	r3,-76(fp)
 200ec2c:	19000104 	addi	r4,r3,4
 200ec30:	e13fed15 	stw	r4,-76(fp)
 200ec34:	18c00017 	ldw	r3,0(r3)
 200ec38:	10c00015 	stw	r3,0(r2)
 200ec3c:	e0bfee17 	ldw	r2,-72(fp)
 200ec40:	10c00104 	addi	r3,r2,4
 200ec44:	e0ffee15 	stw	r3,-72(fp)
 200ec48:	e0ffed17 	ldw	r3,-76(fp)
 200ec4c:	19000104 	addi	r4,r3,4
 200ec50:	e13fed15 	stw	r4,-76(fp)
 200ec54:	18c00017 	ldw	r3,0(r3)
 200ec58:	10c00015 	stw	r3,0(r2)
 200ec5c:	e0bffa17 	ldw	r2,-24(fp)
 200ec60:	10800730 	cmpltui	r2,r2,28
 200ec64:	1000231e 	bne	r2,zero,200ecf4 <_realloc_r+0xa78>
 200ec68:	e0bfee17 	ldw	r2,-72(fp)
 200ec6c:	10c00104 	addi	r3,r2,4
 200ec70:	e0ffee15 	stw	r3,-72(fp)
 200ec74:	e0ffed17 	ldw	r3,-76(fp)
 200ec78:	19000104 	addi	r4,r3,4
 200ec7c:	e13fed15 	stw	r4,-76(fp)
 200ec80:	18c00017 	ldw	r3,0(r3)
 200ec84:	10c00015 	stw	r3,0(r2)
 200ec88:	e0bfee17 	ldw	r2,-72(fp)
 200ec8c:	10c00104 	addi	r3,r2,4
 200ec90:	e0ffee15 	stw	r3,-72(fp)
 200ec94:	e0ffed17 	ldw	r3,-76(fp)
 200ec98:	19000104 	addi	r4,r3,4
 200ec9c:	e13fed15 	stw	r4,-76(fp)
 200eca0:	18c00017 	ldw	r3,0(r3)
 200eca4:	10c00015 	stw	r3,0(r2)
 200eca8:	e0bffa17 	ldw	r2,-24(fp)
 200ecac:	10800930 	cmpltui	r2,r2,36
 200ecb0:	1000101e 	bne	r2,zero,200ecf4 <_realloc_r+0xa78>
 200ecb4:	e0bfee17 	ldw	r2,-72(fp)
 200ecb8:	10c00104 	addi	r3,r2,4
 200ecbc:	e0ffee15 	stw	r3,-72(fp)
 200ecc0:	e0ffed17 	ldw	r3,-76(fp)
 200ecc4:	19000104 	addi	r4,r3,4
 200ecc8:	e13fed15 	stw	r4,-76(fp)
 200eccc:	18c00017 	ldw	r3,0(r3)
 200ecd0:	10c00015 	stw	r3,0(r2)
 200ecd4:	e0bfee17 	ldw	r2,-72(fp)
 200ecd8:	10c00104 	addi	r3,r2,4
 200ecdc:	e0ffee15 	stw	r3,-72(fp)
 200ece0:	e0ffed17 	ldw	r3,-76(fp)
 200ece4:	19000104 	addi	r4,r3,4
 200ece8:	e13fed15 	stw	r4,-76(fp)
 200ecec:	18c00017 	ldw	r3,0(r3)
 200ecf0:	10c00015 	stw	r3,0(r2)
 200ecf4:	e0bfee17 	ldw	r2,-72(fp)
 200ecf8:	10c00104 	addi	r3,r2,4
 200ecfc:	e0ffee15 	stw	r3,-72(fp)
 200ed00:	e0ffed17 	ldw	r3,-76(fp)
 200ed04:	19000104 	addi	r4,r3,4
 200ed08:	e13fed15 	stw	r4,-76(fp)
 200ed0c:	18c00017 	ldw	r3,0(r3)
 200ed10:	10c00015 	stw	r3,0(r2)
 200ed14:	e0bfee17 	ldw	r2,-72(fp)
 200ed18:	10c00104 	addi	r3,r2,4
 200ed1c:	e0ffee15 	stw	r3,-72(fp)
 200ed20:	e0ffed17 	ldw	r3,-76(fp)
 200ed24:	19000104 	addi	r4,r3,4
 200ed28:	e13fed15 	stw	r4,-76(fp)
 200ed2c:	18c00017 	ldw	r3,0(r3)
 200ed30:	10c00015 	stw	r3,0(r2)
 200ed34:	e0bfed17 	ldw	r2,-76(fp)
 200ed38:	10c00017 	ldw	r3,0(r2)
 200ed3c:	e0bfee17 	ldw	r2,-72(fp)
 200ed40:	10c00015 	stw	r3,0(r2)
 200ed44:	00000406 	br	200ed58 <_realloc_r+0xadc>
 200ed48:	e1bffa17 	ldw	r6,-24(fp)
 200ed4c:	e17ffe17 	ldw	r5,-8(fp)
 200ed50:	e13ff617 	ldw	r4,-40(fp)
 200ed54:	200c5fc0 	call	200c5fc <memmove>
    fREe(RCALL oldmem);
 200ed58:	e17ffe17 	ldw	r5,-8(fp)
 200ed5c:	e13ffd17 	ldw	r4,-12(fp)
 200ed60:	200a2840 	call	200a284 <_free_r>
    MALLOC_UNLOCK;
 200ed64:	e13ffd17 	ldw	r4,-12(fp)
 200ed68:	2013e780 	call	2013e78 <__malloc_unlock>
    return newmem;
 200ed6c:	e0bff617 	ldw	r2,-40(fp)
 200ed70:	00003906 	br	200ee58 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 200ed74:	e0ffe417 	ldw	r3,-112(fp)
 200ed78:	e0bff117 	ldw	r2,-60(fp)
 200ed7c:	1885c83a 	sub	r2,r3,r2
 200ed80:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 200ed84:	e0bffb17 	ldw	r2,-20(fp)
 200ed88:	10800430 	cmpltui	r2,r2,16
 200ed8c:	10001e1e 	bne	r2,zero,200ee08 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 200ed90:	e0ffe317 	ldw	r3,-116(fp)
 200ed94:	e0bff117 	ldw	r2,-60(fp)
 200ed98:	1885883a 	add	r2,r3,r2
 200ed9c:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 200eda0:	e0bfe317 	ldw	r2,-116(fp)
 200eda4:	10800117 	ldw	r2,4(r2)
 200eda8:	10c0004c 	andi	r3,r2,1
 200edac:	e0bff117 	ldw	r2,-60(fp)
 200edb0:	1886b03a 	or	r3,r3,r2
 200edb4:	e0bfe317 	ldw	r2,-116(fp)
 200edb8:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 200edbc:	e0bffb17 	ldw	r2,-20(fp)
 200edc0:	10c00054 	ori	r3,r2,1
 200edc4:	e0bffc17 	ldw	r2,-16(fp)
 200edc8:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 200edcc:	e0fffc17 	ldw	r3,-16(fp)
 200edd0:	e0bffb17 	ldw	r2,-20(fp)
 200edd4:	1885883a 	add	r2,r3,r2
 200edd8:	e13ffc17 	ldw	r4,-16(fp)
 200eddc:	e0fffb17 	ldw	r3,-20(fp)
 200ede0:	20c7883a 	add	r3,r4,r3
 200ede4:	18c00117 	ldw	r3,4(r3)
 200ede8:	18c00054 	ori	r3,r3,1
 200edec:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 200edf0:	e0bffc17 	ldw	r2,-16(fp)
 200edf4:	10800204 	addi	r2,r2,8
 200edf8:	100b883a 	mov	r5,r2
 200edfc:	e13ffd17 	ldw	r4,-12(fp)
 200ee00:	200a2840 	call	200a284 <_free_r>
 200ee04:	00001006 	br	200ee48 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 200ee08:	e0bfe317 	ldw	r2,-116(fp)
 200ee0c:	10800117 	ldw	r2,4(r2)
 200ee10:	10c0004c 	andi	r3,r2,1
 200ee14:	e0bfe417 	ldw	r2,-112(fp)
 200ee18:	1886b03a 	or	r3,r3,r2
 200ee1c:	e0bfe317 	ldw	r2,-116(fp)
 200ee20:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 200ee24:	e0ffe317 	ldw	r3,-116(fp)
 200ee28:	e0bfe417 	ldw	r2,-112(fp)
 200ee2c:	1885883a 	add	r2,r3,r2
 200ee30:	e13fe317 	ldw	r4,-116(fp)
 200ee34:	e0ffe417 	ldw	r3,-112(fp)
 200ee38:	20c7883a 	add	r3,r4,r3
 200ee3c:	18c00117 	ldw	r3,4(r3)
 200ee40:	18c00054 	ori	r3,r3,1
 200ee44:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 200ee48:	e13ffd17 	ldw	r4,-12(fp)
 200ee4c:	2013e780 	call	2013e78 <__malloc_unlock>
  return chunk2mem(newp);
 200ee50:	e0bfe317 	ldw	r2,-116(fp)
 200ee54:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200ee58:	e037883a 	mov	sp,fp
 200ee5c:	dfc00117 	ldw	ra,4(sp)
 200ee60:	df000017 	ldw	fp,0(sp)
 200ee64:	dec00204 	addi	sp,sp,8
 200ee68:	f800283a 	ret

0200ee6c <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 200ee6c:	defffb04 	addi	sp,sp,-20
 200ee70:	dfc00415 	stw	ra,16(sp)
 200ee74:	df000315 	stw	fp,12(sp)
 200ee78:	df000304 	addi	fp,sp,12
 200ee7c:	e13ffe15 	stw	r4,-8(fp)
 200ee80:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 200ee84:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 200ee88:	e13fff17 	ldw	r4,-4(fp)
 200ee8c:	2013a500 	call	2013a50 <sbrk>
 200ee90:	e0bffd15 	stw	r2,-12(fp)
 200ee94:	e0bffd17 	ldw	r2,-12(fp)
 200ee98:	10bfffd8 	cmpnei	r2,r2,-1
 200ee9c:	1000051e 	bne	r2,zero,200eeb4 <_sbrk_r+0x48>
 200eea0:	d0a72e17 	ldw	r2,-25416(gp)
 200eea4:	10000326 	beq	r2,zero,200eeb4 <_sbrk_r+0x48>
    ptr->_errno = errno;
 200eea8:	d0e72e17 	ldw	r3,-25416(gp)
 200eeac:	e0bffe17 	ldw	r2,-8(fp)
 200eeb0:	10c00015 	stw	r3,0(r2)
  return ret;
 200eeb4:	e0bffd17 	ldw	r2,-12(fp)
}
 200eeb8:	e037883a 	mov	sp,fp
 200eebc:	dfc00117 	ldw	ra,4(sp)
 200eec0:	df000017 	ldw	fp,0(sp)
 200eec4:	dec00204 	addi	sp,sp,8
 200eec8:	f800283a 	ret

0200eecc <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200eecc:	defff804 	addi	sp,sp,-32
 200eed0:	dfc00715 	stw	ra,28(sp)
 200eed4:	df000615 	stw	fp,24(sp)
 200eed8:	dc400515 	stw	r17,20(sp)
 200eedc:	dc000415 	stw	r16,16(sp)
 200eee0:	df000604 	addi	fp,sp,24
 200eee4:	e13ffa15 	stw	r4,-24(fp)
 200eee8:	e17ffb15 	stw	r5,-20(fp)
 200eeec:	e1bffc15 	stw	r6,-16(fp)
 200eef0:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200eef4:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 200eef8:	8080038b 	ldhu	r2,14(r16)
 200eefc:	10bfffcc 	andi	r2,r2,65535
 200ef00:	10a0001c 	xori	r2,r2,32768
 200ef04:	10a00004 	addi	r2,r2,-32768
 200ef08:	e0fffd17 	ldw	r3,-12(fp)
 200ef0c:	180f883a 	mov	r7,r3
 200ef10:	e1bffc17 	ldw	r6,-16(fp)
 200ef14:	100b883a 	mov	r5,r2
 200ef18:	e13ffa17 	ldw	r4,-24(fp)
 200ef1c:	2010f740 	call	2010f74 <_read_r>
 200ef20:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 200ef24:	88000416 	blt	r17,zero,200ef38 <__sread+0x6c>
    fp->_offset += ret;
 200ef28:	80801417 	ldw	r2,80(r16)
 200ef2c:	1445883a 	add	r2,r2,r17
 200ef30:	80801415 	stw	r2,80(r16)
 200ef34:	00000406 	br	200ef48 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 200ef38:	80c0030b 	ldhu	r3,12(r16)
 200ef3c:	00bbffc4 	movi	r2,-4097
 200ef40:	1884703a 	and	r2,r3,r2
 200ef44:	8080030d 	sth	r2,12(r16)
  return ret;
 200ef48:	8805883a 	mov	r2,r17
}
 200ef4c:	e6fffe04 	addi	sp,fp,-8
 200ef50:	dfc00317 	ldw	ra,12(sp)
 200ef54:	df000217 	ldw	fp,8(sp)
 200ef58:	dc400117 	ldw	r17,4(sp)
 200ef5c:	dc000017 	ldw	r16,0(sp)
 200ef60:	dec00404 	addi	sp,sp,16
 200ef64:	f800283a 	ret

0200ef68 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 200ef68:	defffb04 	addi	sp,sp,-20
 200ef6c:	df000415 	stw	fp,16(sp)
 200ef70:	df000404 	addi	fp,sp,16
 200ef74:	e13ffc15 	stw	r4,-16(fp)
 200ef78:	e17ffd15 	stw	r5,-12(fp)
 200ef7c:	e1bffe15 	stw	r6,-8(fp)
 200ef80:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 200ef84:	0005883a 	mov	r2,zero
}
 200ef88:	e037883a 	mov	sp,fp
 200ef8c:	df000017 	ldw	fp,0(sp)
 200ef90:	dec00104 	addi	sp,sp,4
 200ef94:	f800283a 	ret

0200ef98 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ef98:	defff804 	addi	sp,sp,-32
 200ef9c:	dfc00715 	stw	ra,28(sp)
 200efa0:	df000615 	stw	fp,24(sp)
 200efa4:	dc000515 	stw	r16,20(sp)
 200efa8:	df000604 	addi	fp,sp,24
 200efac:	e13ffb15 	stw	r4,-20(fp)
 200efb0:	e17ffc15 	stw	r5,-16(fp)
 200efb4:	e1bffd15 	stw	r6,-12(fp)
 200efb8:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 200efbc:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 200efc0:	8080030b 	ldhu	r2,12(r16)
 200efc4:	10bfffcc 	andi	r2,r2,65535
 200efc8:	1080400c 	andi	r2,r2,256
 200efcc:	10000926 	beq	r2,zero,200eff4 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 200efd0:	8080038b 	ldhu	r2,14(r16)
 200efd4:	10bfffcc 	andi	r2,r2,65535
 200efd8:	10a0001c 	xori	r2,r2,32768
 200efdc:	10a00004 	addi	r2,r2,-32768
 200efe0:	01c00084 	movi	r7,2
 200efe4:	000d883a 	mov	r6,zero
 200efe8:	100b883a 	mov	r5,r2
 200efec:	e13ffb17 	ldw	r4,-20(fp)
 200eff0:	2010f040 	call	2010f04 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 200eff4:	80c0030b 	ldhu	r3,12(r16)
 200eff8:	00bbffc4 	movi	r2,-4097
 200effc:	1884703a 	and	r2,r3,r2
 200f000:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 200f004:	8080038b 	ldhu	r2,14(r16)
 200f008:	10bfffcc 	andi	r2,r2,65535
 200f00c:	10a0001c 	xori	r2,r2,32768
 200f010:	10a00004 	addi	r2,r2,-32768
 200f014:	e0fffe17 	ldw	r3,-8(fp)
 200f018:	180f883a 	mov	r7,r3
 200f01c:	e1bffd17 	ldw	r6,-12(fp)
 200f020:	100b883a 	mov	r5,r2
 200f024:	e13ffb17 	ldw	r4,-20(fp)
 200f028:	20107c00 	call	20107c0 <_write_r>
 200f02c:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 200f030:	e0bffa17 	ldw	r2,-24(fp)
}
 200f034:	e6ffff04 	addi	sp,fp,-4
 200f038:	dfc00217 	ldw	ra,8(sp)
 200f03c:	df000117 	ldw	fp,4(sp)
 200f040:	dc000017 	ldw	r16,0(sp)
 200f044:	dec00304 	addi	sp,sp,12
 200f048:	f800283a 	ret

0200f04c <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 200f04c:	defff804 	addi	sp,sp,-32
 200f050:	dfc00715 	stw	ra,28(sp)
 200f054:	df000615 	stw	fp,24(sp)
 200f058:	dc400515 	stw	r17,20(sp)
 200f05c:	dc000415 	stw	r16,16(sp)
 200f060:	df000604 	addi	fp,sp,24
 200f064:	e13ffa15 	stw	r4,-24(fp)
 200f068:	e17ffb15 	stw	r5,-20(fp)
 200f06c:	e1bffc15 	stw	r6,-16(fp)
 200f070:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200f074:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 200f078:	8080038b 	ldhu	r2,14(r16)
 200f07c:	10bfffcc 	andi	r2,r2,65535
 200f080:	10a0001c 	xori	r2,r2,32768
 200f084:	10a00004 	addi	r2,r2,-32768
 200f088:	e1fffd17 	ldw	r7,-12(fp)
 200f08c:	e1bffc17 	ldw	r6,-16(fp)
 200f090:	100b883a 	mov	r5,r2
 200f094:	e13ffa17 	ldw	r4,-24(fp)
 200f098:	2010f040 	call	2010f04 <_lseek_r>
 200f09c:	1023883a 	mov	r17,r2
  if (ret == -1L)
 200f0a0:	88bfffd8 	cmpnei	r2,r17,-1
 200f0a4:	1000051e 	bne	r2,zero,200f0bc <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 200f0a8:	80c0030b 	ldhu	r3,12(r16)
 200f0ac:	00bbffc4 	movi	r2,-4097
 200f0b0:	1884703a 	and	r2,r3,r2
 200f0b4:	8080030d 	sth	r2,12(r16)
 200f0b8:	00000406 	br	200f0cc <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 200f0bc:	8080030b 	ldhu	r2,12(r16)
 200f0c0:	10840014 	ori	r2,r2,4096
 200f0c4:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 200f0c8:	84401415 	stw	r17,80(r16)
    }
  return ret;
 200f0cc:	8805883a 	mov	r2,r17
}
 200f0d0:	e6fffe04 	addi	sp,fp,-8
 200f0d4:	dfc00317 	ldw	ra,12(sp)
 200f0d8:	df000217 	ldw	fp,8(sp)
 200f0dc:	dc400117 	ldw	r17,4(sp)
 200f0e0:	dc000017 	ldw	r16,0(sp)
 200f0e4:	dec00404 	addi	sp,sp,16
 200f0e8:	f800283a 	ret

0200f0ec <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 200f0ec:	defffb04 	addi	sp,sp,-20
 200f0f0:	dfc00415 	stw	ra,16(sp)
 200f0f4:	df000315 	stw	fp,12(sp)
 200f0f8:	df000304 	addi	fp,sp,12
 200f0fc:	e13ffe15 	stw	r4,-8(fp)
 200f100:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 200f104:	e0bfff17 	ldw	r2,-4(fp)
 200f108:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 200f10c:	e0bffd17 	ldw	r2,-12(fp)
 200f110:	1080038b 	ldhu	r2,14(r2)
 200f114:	10bfffcc 	andi	r2,r2,65535
 200f118:	10a0001c 	xori	r2,r2,32768
 200f11c:	10a00004 	addi	r2,r2,-32768
 200f120:	100b883a 	mov	r5,r2
 200f124:	e13ffe17 	ldw	r4,-8(fp)
 200f128:	20108300 	call	2010830 <_close_r>
}
 200f12c:	e037883a 	mov	sp,fp
 200f130:	dfc00117 	ldw	ra,4(sp)
 200f134:	df000017 	ldw	fp,0(sp)
 200f138:	dec00204 	addi	sp,sp,8
 200f13c:	f800283a 	ret

0200f140 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 200f140:	defffb04 	addi	sp,sp,-20
 200f144:	df000415 	stw	fp,16(sp)
 200f148:	df000404 	addi	fp,sp,16
 200f14c:	e13ffe15 	stw	r4,-8(fp)
 200f150:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 200f154:	e0fffe17 	ldw	r3,-8(fp)
 200f158:	e0bfff17 	ldw	r2,-4(fp)
 200f15c:	1884b03a 	or	r2,r3,r2
 200f160:	108000cc 	andi	r2,r2,3
 200f164:	10002a1e 	bne	r2,zero,200f210 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 200f168:	e0bffe17 	ldw	r2,-8(fp)
 200f16c:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 200f170:	e0bfff17 	ldw	r2,-4(fp)
 200f174:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 200f178:	00001506 	br	200f1d0 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 200f17c:	e0bffc17 	ldw	r2,-16(fp)
 200f180:	10c00017 	ldw	r3,0(r2)
 200f184:	00bfbff4 	movhi	r2,65279
 200f188:	10bfbfc4 	addi	r2,r2,-257
 200f18c:	1887883a 	add	r3,r3,r2
 200f190:	e0bffc17 	ldw	r2,-16(fp)
 200f194:	10800017 	ldw	r2,0(r2)
 200f198:	0084303a 	nor	r2,zero,r2
 200f19c:	1886703a 	and	r3,r3,r2
 200f1a0:	00a02074 	movhi	r2,32897
 200f1a4:	10a02004 	addi	r2,r2,-32640
 200f1a8:	1884703a 	and	r2,r3,r2
 200f1ac:	10000226 	beq	r2,zero,200f1b8 <strcmp+0x78>
	    return 0;
 200f1b0:	0005883a 	mov	r2,zero
 200f1b4:	00002e06 	br	200f270 <strcmp+0x130>

          a1++;
 200f1b8:	e0bffc17 	ldw	r2,-16(fp)
 200f1bc:	10800104 	addi	r2,r2,4
 200f1c0:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 200f1c4:	e0bffd17 	ldw	r2,-12(fp)
 200f1c8:	10800104 	addi	r2,r2,4
 200f1cc:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 200f1d0:	e0bffc17 	ldw	r2,-16(fp)
 200f1d4:	10c00017 	ldw	r3,0(r2)
 200f1d8:	e0bffd17 	ldw	r2,-12(fp)
 200f1dc:	10800017 	ldw	r2,0(r2)
 200f1e0:	18bfe626 	beq	r3,r2,200f17c <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 200f1e4:	e0bffc17 	ldw	r2,-16(fp)
 200f1e8:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 200f1ec:	e0bffd17 	ldw	r2,-12(fp)
 200f1f0:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 200f1f4:	00000606 	br	200f210 <strcmp+0xd0>
    {
      s1++;
 200f1f8:	e0bffe17 	ldw	r2,-8(fp)
 200f1fc:	10800044 	addi	r2,r2,1
 200f200:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 200f204:	e0bfff17 	ldw	r2,-4(fp)
 200f208:	10800044 	addi	r2,r2,1
 200f20c:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 200f210:	e0bffe17 	ldw	r2,-8(fp)
 200f214:	10800003 	ldbu	r2,0(r2)
 200f218:	10803fcc 	andi	r2,r2,255
 200f21c:	1080201c 	xori	r2,r2,128
 200f220:	10bfe004 	addi	r2,r2,-128
 200f224:	10000b26 	beq	r2,zero,200f254 <strcmp+0x114>
 200f228:	e0bffe17 	ldw	r2,-8(fp)
 200f22c:	10c00003 	ldbu	r3,0(r2)
 200f230:	e0bfff17 	ldw	r2,-4(fp)
 200f234:	10800003 	ldbu	r2,0(r2)
 200f238:	18c03fcc 	andi	r3,r3,255
 200f23c:	18c0201c 	xori	r3,r3,128
 200f240:	18ffe004 	addi	r3,r3,-128
 200f244:	10803fcc 	andi	r2,r2,255
 200f248:	1080201c 	xori	r2,r2,128
 200f24c:	10bfe004 	addi	r2,r2,-128
 200f250:	18bfe926 	beq	r3,r2,200f1f8 <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 200f254:	e0bffe17 	ldw	r2,-8(fp)
 200f258:	10800003 	ldbu	r2,0(r2)
 200f25c:	10c03fcc 	andi	r3,r2,255
 200f260:	e0bfff17 	ldw	r2,-4(fp)
 200f264:	10800003 	ldbu	r2,0(r2)
 200f268:	10803fcc 	andi	r2,r2,255
 200f26c:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200f270:	e037883a 	mov	sp,fp
 200f274:	df000017 	ldw	fp,0(sp)
 200f278:	dec00104 	addi	sp,sp,4
 200f27c:	f800283a 	ret

0200f280 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 200f280:	defff604 	addi	sp,sp,-40
 200f284:	dfc00915 	stw	ra,36(sp)
 200f288:	df000815 	stw	fp,32(sp)
 200f28c:	dc400715 	stw	r17,28(sp)
 200f290:	dc000615 	stw	r16,24(sp)
 200f294:	df000804 	addi	fp,sp,32
 200f298:	e13ffc15 	stw	r4,-16(fp)
 200f29c:	e17ffd15 	stw	r5,-12(fp)
 200f2a0:	3021883a 	mov	r16,r6
	register int err = 0;
 200f2a4:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 200f2a8:	80800217 	ldw	r2,8(r16)
 200f2ac:	1000031e 	bne	r2,zero,200f2bc <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 200f2b0:	80000115 	stw	zero,4(r16)
		return (0);
 200f2b4:	0005883a 	mov	r2,zero
 200f2b8:	00003906 	br	200f3a0 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 200f2bc:	e0bffd17 	ldw	r2,-12(fp)
 200f2c0:	10801917 	ldw	r2,100(r2)
 200f2c4:	1088000c 	andi	r2,r2,8192
 200f2c8:	10002d26 	beq	r2,zero,200f380 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 200f2cc:	80800017 	ldw	r2,0(r16)
 200f2d0:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 200f2d4:	00002706 	br	200f374 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 200f2d8:	e0bff817 	ldw	r2,-32(fp)
 200f2dc:	10800017 	ldw	r2,0(r2)
 200f2e0:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 200f2e4:	e0bff817 	ldw	r2,-32(fp)
 200f2e8:	10800117 	ldw	r2,4(r2)
 200f2ec:	1004d0ba 	srli	r2,r2,2
 200f2f0:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 200f2f4:	e03ff915 	stw	zero,-28(fp)
 200f2f8:	00001206 	br	200f344 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 200f2fc:	e0bff917 	ldw	r2,-28(fp)
 200f300:	1085883a 	add	r2,r2,r2
 200f304:	1085883a 	add	r2,r2,r2
 200f308:	1007883a 	mov	r3,r2
 200f30c:	e0bffa17 	ldw	r2,-24(fp)
 200f310:	10c5883a 	add	r2,r2,r3
 200f314:	10800017 	ldw	r2,0(r2)
 200f318:	e1bffd17 	ldw	r6,-12(fp)
 200f31c:	100b883a 	mov	r5,r2
 200f320:	e13ffc17 	ldw	r4,-16(fp)
 200f324:	2010d4c0 	call	2010d4c <_fputwc_r>
 200f328:	10bfffd8 	cmpnei	r2,r2,-1
 200f32c:	1000021e 	bne	r2,zero,200f338 <__sprint_r+0xb8>
					err = -1;
 200f330:	047fffc4 	movi	r17,-1
					goto out;
 200f334:	00001706 	br	200f394 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 200f338:	e0bff917 	ldw	r2,-28(fp)
 200f33c:	10800044 	addi	r2,r2,1
 200f340:	e0bff915 	stw	r2,-28(fp)
 200f344:	e0fff917 	ldw	r3,-28(fp)
 200f348:	e0bffb17 	ldw	r2,-20(fp)
 200f34c:	18bfeb16 	blt	r3,r2,200f2fc <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 200f350:	80c00217 	ldw	r3,8(r16)
 200f354:	e0bffb17 	ldw	r2,-20(fp)
 200f358:	1085883a 	add	r2,r2,r2
 200f35c:	1085883a 	add	r2,r2,r2
 200f360:	1885c83a 	sub	r2,r3,r2
 200f364:	80800215 	stw	r2,8(r16)
 200f368:	e0bff817 	ldw	r2,-32(fp)
 200f36c:	10800204 	addi	r2,r2,8
 200f370:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 200f374:	80800217 	ldw	r2,8(r16)
 200f378:	103fd71e 	bne	r2,zero,200f2d8 <__sprint_r+0x58>
 200f37c:	00000506 	br	200f394 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 200f380:	800d883a 	mov	r6,r16
 200f384:	e17ffd17 	ldw	r5,-12(fp)
 200f388:	e13ffc17 	ldw	r4,-16(fp)
 200f38c:	200a9b00 	call	200a9b0 <__sfvwrite_r>
 200f390:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 200f394:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 200f398:	80000115 	stw	zero,4(r16)
	return (err);
 200f39c:	8805883a 	mov	r2,r17
}
 200f3a0:	e6fffe04 	addi	sp,fp,-8
 200f3a4:	dfc00317 	ldw	ra,12(sp)
 200f3a8:	df000217 	ldw	fp,8(sp)
 200f3ac:	dc400117 	ldw	r17,4(sp)
 200f3b0:	dc000017 	ldw	r16,0(sp)
 200f3b4:	dec00404 	addi	sp,sp,16
 200f3b8:	f800283a 	ret

0200f3bc <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200f3bc:	defedf04 	addi	sp,sp,-1156
 200f3c0:	dfc12015 	stw	ra,1152(sp)
 200f3c4:	df011f15 	stw	fp,1148(sp)
 200f3c8:	dc011e15 	stw	r16,1144(sp)
 200f3cc:	df011f04 	addi	fp,sp,1148
 200f3d0:	e13ffc15 	stw	r4,-16(fp)
 200f3d4:	2821883a 	mov	r16,r5
 200f3d8:	e1bffd15 	stw	r6,-12(fp)
 200f3dc:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200f3e0:	80c0030b 	ldhu	r3,12(r16)
 200f3e4:	00bfff44 	movi	r2,-3
 200f3e8:	1884703a 	and	r2,r3,r2
 200f3ec:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200f3f0:	80801917 	ldw	r2,100(r16)
 200f3f4:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200f3f8:	8080038b 	ldhu	r2,14(r16)
 200f3fc:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200f400:	80800717 	ldw	r2,28(r16)
 200f404:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200f408:	80800917 	ldw	r2,36(r16)
 200f40c:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200f410:	e0befc04 	addi	r2,fp,-1040
 200f414:	e0bee215 	stw	r2,-1144(fp)
 200f418:	e0bee217 	ldw	r2,-1144(fp)
 200f41c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200f420:	00810004 	movi	r2,1024
 200f424:	e0bee415 	stw	r2,-1136(fp)
 200f428:	e0bee417 	ldw	r2,-1136(fp)
 200f42c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200f430:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200f434:	e0bee204 	addi	r2,fp,-1144
 200f438:	e1fffe17 	ldw	r7,-8(fp)
 200f43c:	e1bffd17 	ldw	r6,-12(fp)
 200f440:	100b883a 	mov	r5,r2
 200f444:	e13ffc17 	ldw	r4,-16(fp)
 200f448:	200f4fc0 	call	200f4fc <___vfiprintf_internal_r>
 200f44c:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200f450:	e0bee117 	ldw	r2,-1148(fp)
 200f454:	10000716 	blt	r2,zero,200f474 <__sbprintf+0xb8>
 200f458:	e0bee204 	addi	r2,fp,-1144
 200f45c:	100b883a 	mov	r5,r2
 200f460:	e13ffc17 	ldw	r4,-16(fp)
 200f464:	2009be40 	call	2009be4 <_fflush_r>
 200f468:	10000226 	beq	r2,zero,200f474 <__sbprintf+0xb8>
		ret = EOF;
 200f46c:	00bfffc4 	movi	r2,-1
 200f470:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200f474:	e0bee50b 	ldhu	r2,-1132(fp)
 200f478:	10bfffcc 	andi	r2,r2,65535
 200f47c:	1080100c 	andi	r2,r2,64
 200f480:	10000326 	beq	r2,zero,200f490 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200f484:	8080030b 	ldhu	r2,12(r16)
 200f488:	10801014 	ori	r2,r2,64
 200f48c:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200f490:	e0bee117 	ldw	r2,-1148(fp)
}
 200f494:	e6ffff04 	addi	sp,fp,-4
 200f498:	dfc00217 	ldw	ra,8(sp)
 200f49c:	df000117 	ldw	fp,4(sp)
 200f4a0:	dc000017 	ldw	r16,0(sp)
 200f4a4:	dec00304 	addi	sp,sp,12
 200f4a8:	f800283a 	ret

0200f4ac <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200f4ac:	defffa04 	addi	sp,sp,-24
 200f4b0:	dfc00515 	stw	ra,20(sp)
 200f4b4:	df000415 	stw	fp,16(sp)
 200f4b8:	df000404 	addi	fp,sp,16
 200f4bc:	e13ffd15 	stw	r4,-12(fp)
 200f4c0:	e17ffe15 	stw	r5,-8(fp)
 200f4c4:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200f4c8:	d0a00017 	ldw	r2,-32768(gp)
 200f4cc:	e1ffff17 	ldw	r7,-4(fp)
 200f4d0:	e1bffe17 	ldw	r6,-8(fp)
 200f4d4:	e17ffd17 	ldw	r5,-12(fp)
 200f4d8:	1009883a 	mov	r4,r2
 200f4dc:	200f4fc0 	call	200f4fc <___vfiprintf_internal_r>
 200f4e0:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200f4e4:	e0bffc17 	ldw	r2,-16(fp)
}
 200f4e8:	e037883a 	mov	sp,fp
 200f4ec:	dfc00117 	ldw	ra,4(sp)
 200f4f0:	df000017 	ldw	fp,0(sp)
 200f4f4:	dec00204 	addi	sp,sp,8
 200f4f8:	f800283a 	ret

0200f4fc <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200f4fc:	deffb704 	addi	sp,sp,-292
 200f500:	dfc04815 	stw	ra,288(sp)
 200f504:	df004715 	stw	fp,284(sp)
 200f508:	ddc04615 	stw	r23,280(sp)
 200f50c:	dd804515 	stw	r22,276(sp)
 200f510:	dd404415 	stw	r21,272(sp)
 200f514:	dd004315 	stw	r20,268(sp)
 200f518:	dcc04215 	stw	r19,264(sp)
 200f51c:	dc804115 	stw	r18,260(sp)
 200f520:	dc404015 	stw	r17,256(sp)
 200f524:	dc003f15 	stw	r16,252(sp)
 200f528:	df004704 	addi	fp,sp,284
 200f52c:	e13fe615 	stw	r4,-104(fp)
 200f530:	e17fe715 	stw	r5,-100(fp)
 200f534:	e1bfe815 	stw	r6,-96(fp)
 200f538:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200f53c:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200f540:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200f544:	e0bfe617 	ldw	r2,-104(fp)
 200f548:	e0bfc415 	stw	r2,-240(fp)
 200f54c:	e0bfc417 	ldw	r2,-240(fp)
 200f550:	10000526 	beq	r2,zero,200f568 <___vfiprintf_internal_r+0x6c>
 200f554:	e0bfc417 	ldw	r2,-240(fp)
 200f558:	10800e17 	ldw	r2,56(r2)
 200f55c:	1000021e 	bne	r2,zero,200f568 <___vfiprintf_internal_r+0x6c>
 200f560:	e13fc417 	ldw	r4,-240(fp)
 200f564:	200a0640 	call	200a064 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200f568:	e0bfe717 	ldw	r2,-100(fp)
 200f56c:	1080030b 	ldhu	r2,12(r2)
 200f570:	10bfffcc 	andi	r2,r2,65535
 200f574:	1088000c 	andi	r2,r2,8192
 200f578:	10000c1e 	bne	r2,zero,200f5ac <___vfiprintf_internal_r+0xb0>
 200f57c:	e0bfe717 	ldw	r2,-100(fp)
 200f580:	1080030b 	ldhu	r2,12(r2)
 200f584:	10880014 	ori	r2,r2,8192
 200f588:	1007883a 	mov	r3,r2
 200f58c:	e0bfe717 	ldw	r2,-100(fp)
 200f590:	10c0030d 	sth	r3,12(r2)
 200f594:	e0bfe717 	ldw	r2,-100(fp)
 200f598:	10c01917 	ldw	r3,100(r2)
 200f59c:	00b7ffc4 	movi	r2,-8193
 200f5a0:	1886703a 	and	r3,r3,r2
 200f5a4:	e0bfe717 	ldw	r2,-100(fp)
 200f5a8:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200f5ac:	e0bfe717 	ldw	r2,-100(fp)
 200f5b0:	1080030b 	ldhu	r2,12(r2)
 200f5b4:	10bfffcc 	andi	r2,r2,65535
 200f5b8:	1080020c 	andi	r2,r2,8
 200f5bc:	10000326 	beq	r2,zero,200f5cc <___vfiprintf_internal_r+0xd0>
 200f5c0:	e0bfe717 	ldw	r2,-100(fp)
 200f5c4:	10800417 	ldw	r2,16(r2)
 200f5c8:	1000061e 	bne	r2,zero,200f5e4 <___vfiprintf_internal_r+0xe8>
 200f5cc:	e17fe717 	ldw	r5,-100(fp)
 200f5d0:	e13fe617 	ldw	r4,-104(fp)
 200f5d4:	20078140 	call	2007814 <__swsetup_r>
 200f5d8:	10000226 	beq	r2,zero,200f5e4 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200f5dc:	00bfffc4 	movi	r2,-1
 200f5e0:	00046a06 	br	201078c <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f5e4:	e0bfe717 	ldw	r2,-100(fp)
 200f5e8:	1080030b 	ldhu	r2,12(r2)
 200f5ec:	10bfffcc 	andi	r2,r2,65535
 200f5f0:	1080068c 	andi	r2,r2,26
 200f5f4:	10800298 	cmpnei	r2,r2,10
 200f5f8:	10000c1e 	bne	r2,zero,200f62c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 200f5fc:	e0bfe717 	ldw	r2,-100(fp)
 200f600:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f604:	10bfffcc 	andi	r2,r2,65535
 200f608:	10a0001c 	xori	r2,r2,32768
 200f60c:	10a00004 	addi	r2,r2,-32768
 200f610:	10000616 	blt	r2,zero,200f62c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200f614:	e1ffe917 	ldw	r7,-92(fp)
 200f618:	e1bfe817 	ldw	r6,-96(fp)
 200f61c:	e17fe717 	ldw	r5,-100(fp)
 200f620:	e13fe617 	ldw	r4,-104(fp)
 200f624:	200f3bc0 	call	200f3bc <__sbprintf>
 200f628:	00045806 	br	201078c <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200f62c:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200f630:	e4bfcb04 	addi	r18,fp,-212
 200f634:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 200f638:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200f63c:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200f640:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200f644:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f648:	00000106 	br	200f650 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 200f64c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f650:	a8800003 	ldbu	r2,0(r21)
 200f654:	10803fcc 	andi	r2,r2,255
 200f658:	1080201c 	xori	r2,r2,128
 200f65c:	10bfe004 	addi	r2,r2,-128
 200f660:	10000626 	beq	r2,zero,200f67c <___vfiprintf_internal_r+0x180>
 200f664:	a8800003 	ldbu	r2,0(r21)
 200f668:	10803fcc 	andi	r2,r2,255
 200f66c:	1080201c 	xori	r2,r2,128
 200f670:	10bfe004 	addi	r2,r2,-128
 200f674:	10800958 	cmpnei	r2,r2,37
 200f678:	103ff41e 	bne	r2,zero,200f64c <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200f67c:	a807883a 	mov	r3,r21
 200f680:	a005883a 	mov	r2,r20
 200f684:	18a1c83a 	sub	r16,r3,r2
 200f688:	80001826 	beq	r16,zero,200f6ec <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 200f68c:	95000015 	stw	r20,0(r18)
 200f690:	8005883a 	mov	r2,r16
 200f694:	90800115 	stw	r2,4(r18)
 200f698:	e0bfca17 	ldw	r2,-216(fp)
 200f69c:	8007883a 	mov	r3,r16
 200f6a0:	10c5883a 	add	r2,r2,r3
 200f6a4:	e0bfca15 	stw	r2,-216(fp)
 200f6a8:	94800204 	addi	r18,r18,8
 200f6ac:	e0bfc917 	ldw	r2,-220(fp)
 200f6b0:	10800044 	addi	r2,r2,1
 200f6b4:	e0bfc915 	stw	r2,-220(fp)
 200f6b8:	e0bfc917 	ldw	r2,-220(fp)
 200f6bc:	10800210 	cmplti	r2,r2,8
 200f6c0:	1000071e 	bne	r2,zero,200f6e0 <___vfiprintf_internal_r+0x1e4>
 200f6c4:	e0bfc804 	addi	r2,fp,-224
 200f6c8:	100d883a 	mov	r6,r2
 200f6cc:	e17fe717 	ldw	r5,-100(fp)
 200f6d0:	e13fe617 	ldw	r4,-104(fp)
 200f6d4:	200f2800 	call	200f280 <__sprint_r>
 200f6d8:	1004031e 	bne	r2,zero,20106e8 <___vfiprintf_internal_r+0x11ec>
 200f6dc:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 200f6e0:	e0bfb917 	ldw	r2,-284(fp)
 200f6e4:	1405883a 	add	r2,r2,r16
 200f6e8:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200f6ec:	a8800003 	ldbu	r2,0(r21)
 200f6f0:	10803fcc 	andi	r2,r2,255
 200f6f4:	1080201c 	xori	r2,r2,128
 200f6f8:	10bfe004 	addi	r2,r2,-128
 200f6fc:	1003ec26 	beq	r2,zero,20106b0 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 200f700:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 200f704:	ad400044 	addi	r21,r21,1

		flags = 0;
 200f708:	0027883a 	mov	r19,zero
		dprec = 0;
 200f70c:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 200f710:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 200f714:	00bfffc4 	movi	r2,-1
 200f718:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 200f71c:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200f720:	a805883a 	mov	r2,r21
 200f724:	15400044 	addi	r21,r2,1
 200f728:	10800003 	ldbu	r2,0(r2)
 200f72c:	14403fcc 	andi	r17,r2,255
 200f730:	8c40201c 	xori	r17,r17,128
 200f734:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 200f738:	88bff804 	addi	r2,r17,-32
 200f73c:	10c01668 	cmpgeui	r3,r2,89
 200f740:	1802881e 	bne	r3,zero,2010164 <___vfiprintf_internal_r+0xc68>
 200f744:	100690ba 	slli	r3,r2,2
 200f748:	00808074 	movhi	r2,513
 200f74c:	10bdd704 	addi	r2,r2,-2212
 200f750:	1885883a 	add	r2,r3,r2
 200f754:	10800017 	ldw	r2,0(r2)
 200f758:	1000683a 	jmp	r2
 200f75c:	0200f8c0 	call	200f8c <__alt_mem_mem_Nios_PI+0xf8c>
 200f760:	02010164 	muli	r8,zero,1029
 200f764:	02010164 	muli	r8,zero,1029
 200f768:	0200f8e0 	cmpeqi	r8,zero,995
 200f76c:	02010164 	muli	r8,zero,1029
 200f770:	02010164 	muli	r8,zero,1029
 200f774:	02010164 	muli	r8,zero,1029
 200f778:	02010164 	muli	r8,zero,1029
 200f77c:	02010164 	muli	r8,zero,1029
 200f780:	02010164 	muli	r8,zero,1029
 200f784:	0200f8e8 	cmpgeui	r8,zero,995
 200f788:	0200f91c 	xori	r8,zero,996
 200f78c:	02010164 	muli	r8,zero,1029
 200f790:	0200f914 	movui	r8,996
 200f794:	0200f928 	cmpgeui	r8,zero,996
 200f798:	02010164 	muli	r8,zero,1029
 200f79c:	0200f9bc 	xorhi	r8,zero,998
 200f7a0:	0200f9c4 	movi	r8,999
 200f7a4:	0200f9c4 	movi	r8,999
 200f7a8:	0200f9c4 	movi	r8,999
 200f7ac:	0200f9c4 	movi	r8,999
 200f7b0:	0200f9c4 	movi	r8,999
 200f7b4:	0200f9c4 	movi	r8,999
 200f7b8:	0200f9c4 	movi	r8,999
 200f7bc:	0200f9c4 	movi	r8,999
 200f7c0:	0200f9c4 	movi	r8,999
 200f7c4:	02010164 	muli	r8,zero,1029
 200f7c8:	02010164 	muli	r8,zero,1029
 200f7cc:	02010164 	muli	r8,zero,1029
 200f7d0:	02010164 	muli	r8,zero,1029
 200f7d4:	02010164 	muli	r8,zero,1029
 200f7d8:	02010164 	muli	r8,zero,1029
 200f7dc:	02010164 	muli	r8,zero,1029
 200f7e0:	02010164 	muli	r8,zero,1029
 200f7e4:	02010164 	muli	r8,zero,1029
 200f7e8:	02010164 	muli	r8,zero,1029
 200f7ec:	0200fa64 	muli	r8,zero,1001
 200f7f0:	02010164 	muli	r8,zero,1029
 200f7f4:	02010164 	muli	r8,zero,1029
 200f7f8:	02010164 	muli	r8,zero,1029
 200f7fc:	02010164 	muli	r8,zero,1029
 200f800:	02010164 	muli	r8,zero,1029
 200f804:	02010164 	muli	r8,zero,1029
 200f808:	02010164 	muli	r8,zero,1029
 200f80c:	02010164 	muli	r8,zero,1029
 200f810:	02010164 	muli	r8,zero,1029
 200f814:	02010164 	muli	r8,zero,1029
 200f818:	0200fc04 	movi	r8,1008
 200f81c:	02010164 	muli	r8,zero,1029
 200f820:	02010164 	muli	r8,zero,1029
 200f824:	02010164 	muli	r8,zero,1029
 200f828:	02010164 	muli	r8,zero,1029
 200f82c:	02010164 	muli	r8,zero,1029
 200f830:	0200fd80 	call	200fd8 <__alt_mem_mem_Nios_PI+0xfd8>
 200f834:	02010164 	muli	r8,zero,1029
 200f838:	02010164 	muli	r8,zero,1029
 200f83c:	0200fe40 	call	200fe4 <__alt_mem_mem_Nios_PI+0xfe4>
 200f840:	02010164 	muli	r8,zero,1029
 200f844:	02010164 	muli	r8,zero,1029
 200f848:	02010164 	muli	r8,zero,1029
 200f84c:	02010164 	muli	r8,zero,1029
 200f850:	02010164 	muli	r8,zero,1029
 200f854:	02010164 	muli	r8,zero,1029
 200f858:	02010164 	muli	r8,zero,1029
 200f85c:	02010164 	muli	r8,zero,1029
 200f860:	02010164 	muli	r8,zero,1029
 200f864:	02010164 	muli	r8,zero,1029
 200f868:	0200fa3c 	xorhi	r8,zero,1000
 200f86c:	0200fa68 	cmpgeui	r8,zero,1001
 200f870:	02010164 	muli	r8,zero,1029
 200f874:	02010164 	muli	r8,zero,1029
 200f878:	02010164 	muli	r8,zero,1029
 200f87c:	0200fa00 	call	200fa0 <__alt_mem_mem_Nios_PI+0xfa0>
 200f880:	0200fa68 	cmpgeui	r8,zero,1001
 200f884:	02010164 	muli	r8,zero,1029
 200f888:	02010164 	muli	r8,zero,1029
 200f88c:	0200fa08 	cmpgei	r8,zero,1000
 200f890:	02010164 	muli	r8,zero,1029
 200f894:	0200fb64 	muli	r8,zero,1005
 200f898:	0200fc08 	cmpgei	r8,zero,1008
 200f89c:	0200fca8 	cmpgeui	r8,zero,1010
 200f8a0:	0200fa34 	movhi	r8,1000
 200f8a4:	02010164 	muli	r8,zero,1029
 200f8a8:	0200fcf0 	cmpltui	r8,zero,1011
 200f8ac:	02010164 	muli	r8,zero,1029
 200f8b0:	0200fd84 	movi	r8,1014
 200f8b4:	02010164 	muli	r8,zero,1029
 200f8b8:	02010164 	muli	r8,zero,1029
 200f8bc:	0200fe50 	cmplti	r8,zero,1017
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200f8c0:	e0bfc703 	ldbu	r2,-228(fp)
 200f8c4:	10803fcc 	andi	r2,r2,255
 200f8c8:	1080201c 	xori	r2,r2,128
 200f8cc:	10bfe004 	addi	r2,r2,-128
 200f8d0:	103f931e 	bne	r2,zero,200f720 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 200f8d4:	00800804 	movi	r2,32
 200f8d8:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f8dc:	003f9006 	br	200f720 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 200f8e0:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200f8e4:	003f8e06 	br	200f720 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200f8e8:	e0bfe917 	ldw	r2,-92(fp)
 200f8ec:	10c00104 	addi	r3,r2,4
 200f8f0:	e0ffe915 	stw	r3,-92(fp)
 200f8f4:	10800017 	ldw	r2,0(r2)
 200f8f8:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200f8fc:	e0bfba17 	ldw	r2,-280(fp)
 200f900:	10000116 	blt	r2,zero,200f908 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 200f904:	003f8606 	br	200f720 <___vfiprintf_internal_r+0x224>
			width = -width;
 200f908:	e0bfba17 	ldw	r2,-280(fp)
 200f90c:	0085c83a 	sub	r2,zero,r2
 200f910:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200f914:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200f918:	003f8106 	br	200f720 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 200f91c:	00800ac4 	movi	r2,43
 200f920:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f924:	003f7e06 	br	200f720 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 200f928:	a805883a 	mov	r2,r21
 200f92c:	15400044 	addi	r21,r2,1
 200f930:	10800003 	ldbu	r2,0(r2)
 200f934:	14403fcc 	andi	r17,r2,255
 200f938:	8c40201c 	xori	r17,r17,128
 200f93c:	8c7fe004 	addi	r17,r17,-128
 200f940:	88800a98 	cmpnei	r2,r17,42
 200f944:	10000a1e 	bne	r2,zero,200f970 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200f948:	e0bfe917 	ldw	r2,-92(fp)
 200f94c:	10c00104 	addi	r3,r2,4
 200f950:	e0ffe915 	stw	r3,-92(fp)
 200f954:	10800017 	ldw	r2,0(r2)
 200f958:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200f95c:	e0bfbb17 	ldw	r2,-276(fp)
 200f960:	103f6f0e 	bge	r2,zero,200f720 <___vfiprintf_internal_r+0x224>
					prec = -1;
 200f964:	00bfffc4 	movi	r2,-1
 200f968:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 200f96c:	003f6c06 	br	200f720 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 200f970:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200f974:	00000906 	br	200f99c <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 200f978:	80c002a4 	muli	r3,r16,10
 200f97c:	88bff404 	addi	r2,r17,-48
 200f980:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f984:	a805883a 	mov	r2,r21
 200f988:	15400044 	addi	r21,r2,1
 200f98c:	10800003 	ldbu	r2,0(r2)
 200f990:	14403fcc 	andi	r17,r2,255
 200f994:	8c40201c 	xori	r17,r17,128
 200f998:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200f99c:	88bff404 	addi	r2,r17,-48
 200f9a0:	108002b0 	cmpltui	r2,r2,10
 200f9a4:	103ff41e 	bne	r2,zero,200f978 <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200f9a8:	8005883a 	mov	r2,r16
 200f9ac:	1000010e 	bge	r2,zero,200f9b4 <___vfiprintf_internal_r+0x4b8>
 200f9b0:	00bfffc4 	movi	r2,-1
 200f9b4:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 200f9b8:	003f5f06 	br	200f738 <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200f9bc:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200f9c0:	003f5706 	br	200f720 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200f9c4:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200f9c8:	80c002a4 	muli	r3,r16,10
 200f9cc:	88bff404 	addi	r2,r17,-48
 200f9d0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f9d4:	a805883a 	mov	r2,r21
 200f9d8:	15400044 	addi	r21,r2,1
 200f9dc:	10800003 	ldbu	r2,0(r2)
 200f9e0:	14403fcc 	andi	r17,r2,255
 200f9e4:	8c40201c 	xori	r17,r17,128
 200f9e8:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 200f9ec:	88bff404 	addi	r2,r17,-48
 200f9f0:	108002b0 	cmpltui	r2,r2,10
 200f9f4:	103ff41e 	bne	r2,zero,200f9c8 <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200f9f8:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 200f9fc:	003f4e06 	br	200f738 <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200fa00:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200fa04:	003f4606 	br	200f720 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200fa08:	a8800003 	ldbu	r2,0(r21)
 200fa0c:	10803fcc 	andi	r2,r2,255
 200fa10:	1080201c 	xori	r2,r2,128
 200fa14:	10bfe004 	addi	r2,r2,-128
 200fa18:	10801b18 	cmpnei	r2,r2,108
 200fa1c:	1000031e 	bne	r2,zero,200fa2c <___vfiprintf_internal_r+0x530>
				fmt++;
 200fa20:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200fa24:	9cc00814 	ori	r19,r19,32
 200fa28:	003f3d06 	br	200f720 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 200fa2c:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200fa30:	003f3b06 	br	200f720 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 200fa34:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200fa38:	003f3906 	br	200f720 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200fa3c:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200fa40:	e0bfe917 	ldw	r2,-92(fp)
 200fa44:	10c00104 	addi	r3,r2,4
 200fa48:	e0ffe915 	stw	r3,-92(fp)
 200fa4c:	10800017 	ldw	r2,0(r2)
 200fa50:	a0800005 	stb	r2,0(r20)
				size = 1;
 200fa54:	00800044 	movi	r2,1
 200fa58:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 200fa5c:	e03fc705 	stb	zero,-228(fp)
			break;
 200fa60:	0001c806 	br	2010184 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 200fa64:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200fa68:	9880080c 	andi	r2,r19,32
 200fa6c:	10000826 	beq	r2,zero,200fa90 <___vfiprintf_internal_r+0x594>
 200fa70:	e13fe917 	ldw	r4,-92(fp)
 200fa74:	20800204 	addi	r2,r4,8
 200fa78:	e0bfe915 	stw	r2,-92(fp)
 200fa7c:	20800017 	ldw	r2,0(r4)
 200fa80:	20c00117 	ldw	r3,4(r4)
 200fa84:	e0bfea15 	stw	r2,-88(fp)
 200fa88:	e0ffeb15 	stw	r3,-84(fp)
 200fa8c:	00001e06 	br	200fb08 <___vfiprintf_internal_r+0x60c>
 200fa90:	9880040c 	andi	r2,r19,16
 200fa94:	10000826 	beq	r2,zero,200fab8 <___vfiprintf_internal_r+0x5bc>
 200fa98:	e0bfe917 	ldw	r2,-92(fp)
 200fa9c:	10c00104 	addi	r3,r2,4
 200faa0:	e0ffe915 	stw	r3,-92(fp)
 200faa4:	10800017 	ldw	r2,0(r2)
 200faa8:	e0bfea15 	stw	r2,-88(fp)
 200faac:	1005d7fa 	srai	r2,r2,31
 200fab0:	e0bfeb15 	stw	r2,-84(fp)
 200fab4:	00001406 	br	200fb08 <___vfiprintf_internal_r+0x60c>
 200fab8:	9880100c 	andi	r2,r19,64
 200fabc:	10000b26 	beq	r2,zero,200faec <___vfiprintf_internal_r+0x5f0>
 200fac0:	e0bfe917 	ldw	r2,-92(fp)
 200fac4:	10c00104 	addi	r3,r2,4
 200fac8:	e0ffe915 	stw	r3,-92(fp)
 200facc:	10800017 	ldw	r2,0(r2)
 200fad0:	10bfffcc 	andi	r2,r2,65535
 200fad4:	10a0001c 	xori	r2,r2,32768
 200fad8:	10a00004 	addi	r2,r2,-32768
 200fadc:	e0bfea15 	stw	r2,-88(fp)
 200fae0:	1005d7fa 	srai	r2,r2,31
 200fae4:	e0bfeb15 	stw	r2,-84(fp)
 200fae8:	00000706 	br	200fb08 <___vfiprintf_internal_r+0x60c>
 200faec:	e0bfe917 	ldw	r2,-92(fp)
 200faf0:	10c00104 	addi	r3,r2,4
 200faf4:	e0ffe915 	stw	r3,-92(fp)
 200faf8:	10800017 	ldw	r2,0(r2)
 200fafc:	e0bfea15 	stw	r2,-88(fp)
 200fb00:	1005d7fa 	srai	r2,r2,31
 200fb04:	e0bfeb15 	stw	r2,-84(fp)
 200fb08:	e0bfea17 	ldw	r2,-88(fp)
 200fb0c:	e0bfbc15 	stw	r2,-272(fp)
 200fb10:	e0ffeb17 	ldw	r3,-84(fp)
 200fb14:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200fb18:	e0bfbc17 	ldw	r2,-272(fp)
 200fb1c:	e0ffbd17 	ldw	r3,-268(fp)
 200fb20:	18000d0e 	bge	r3,zero,200fb58 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200fb24:	000d883a 	mov	r6,zero
 200fb28:	000f883a 	mov	r7,zero
 200fb2c:	e13fbc17 	ldw	r4,-272(fp)
 200fb30:	e17fbd17 	ldw	r5,-268(fp)
 200fb34:	3105c83a 	sub	r2,r6,r4
 200fb38:	3091803a 	cmpltu	r8,r6,r2
 200fb3c:	3947c83a 	sub	r3,r7,r5
 200fb40:	1a09c83a 	sub	r4,r3,r8
 200fb44:	2007883a 	mov	r3,r4
 200fb48:	e0bfbc15 	stw	r2,-272(fp)
 200fb4c:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 200fb50:	00800b44 	movi	r2,45
 200fb54:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 200fb58:	00800044 	movi	r2,1
 200fb5c:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 200fb60:	0000f806 	br	200ff44 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200fb64:	9880080c 	andi	r2,r19,32
 200fb68:	10000d26 	beq	r2,zero,200fba0 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200fb6c:	e0bfe917 	ldw	r2,-92(fp)
 200fb70:	10c00104 	addi	r3,r2,4
 200fb74:	e0ffe915 	stw	r3,-92(fp)
 200fb78:	10800017 	ldw	r2,0(r2)
 200fb7c:	e0ffb917 	ldw	r3,-284(fp)
 200fb80:	e0fff015 	stw	r3,-64(fp)
 200fb84:	1807d7fa 	srai	r3,r3,31
 200fb88:	e0fff115 	stw	r3,-60(fp)
 200fb8c:	e0fff017 	ldw	r3,-64(fp)
 200fb90:	10c00015 	stw	r3,0(r2)
 200fb94:	e0fff117 	ldw	r3,-60(fp)
 200fb98:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fb9c:	0002c306 	br	20106ac <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200fba0:	9880040c 	andi	r2,r19,16
 200fba4:	10000726 	beq	r2,zero,200fbc4 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200fba8:	e0bfe917 	ldw	r2,-92(fp)
 200fbac:	10c00104 	addi	r3,r2,4
 200fbb0:	e0ffe915 	stw	r3,-92(fp)
 200fbb4:	10800017 	ldw	r2,0(r2)
 200fbb8:	e0ffb917 	ldw	r3,-284(fp)
 200fbbc:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fbc0:	0002ba06 	br	20106ac <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200fbc4:	9880100c 	andi	r2,r19,64
 200fbc8:	10000726 	beq	r2,zero,200fbe8 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200fbcc:	e0bfe917 	ldw	r2,-92(fp)
 200fbd0:	10c00104 	addi	r3,r2,4
 200fbd4:	e0ffe915 	stw	r3,-92(fp)
 200fbd8:	10800017 	ldw	r2,0(r2)
 200fbdc:	e0ffb917 	ldw	r3,-284(fp)
 200fbe0:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fbe4:	0002b106 	br	20106ac <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200fbe8:	e0bfe917 	ldw	r2,-92(fp)
 200fbec:	10c00104 	addi	r3,r2,4
 200fbf0:	e0ffe915 	stw	r3,-92(fp)
 200fbf4:	10800017 	ldw	r2,0(r2)
 200fbf8:	e0ffb917 	ldw	r3,-284(fp)
 200fbfc:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200fc00:	0002aa06 	br	20106ac <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 200fc04:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200fc08:	9880080c 	andi	r2,r19,32
 200fc0c:	10000626 	beq	r2,zero,200fc28 <___vfiprintf_internal_r+0x72c>
 200fc10:	e0bfe917 	ldw	r2,-92(fp)
 200fc14:	10c00204 	addi	r3,r2,8
 200fc18:	e0ffe915 	stw	r3,-92(fp)
 200fc1c:	15800017 	ldw	r22,0(r2)
 200fc20:	15c00117 	ldw	r23,4(r2)
 200fc24:	00001c06 	br	200fc98 <___vfiprintf_internal_r+0x79c>
 200fc28:	9880040c 	andi	r2,r19,16
 200fc2c:	10000726 	beq	r2,zero,200fc4c <___vfiprintf_internal_r+0x750>
 200fc30:	e0bfe917 	ldw	r2,-92(fp)
 200fc34:	10c00104 	addi	r3,r2,4
 200fc38:	e0ffe915 	stw	r3,-92(fp)
 200fc3c:	10800017 	ldw	r2,0(r2)
 200fc40:	102d883a 	mov	r22,r2
 200fc44:	002f883a 	mov	r23,zero
 200fc48:	00001306 	br	200fc98 <___vfiprintf_internal_r+0x79c>
 200fc4c:	9880100c 	andi	r2,r19,64
 200fc50:	10000b26 	beq	r2,zero,200fc80 <___vfiprintf_internal_r+0x784>
 200fc54:	e0bfe917 	ldw	r2,-92(fp)
 200fc58:	10c00104 	addi	r3,r2,4
 200fc5c:	e0ffe915 	stw	r3,-92(fp)
 200fc60:	10800017 	ldw	r2,0(r2)
 200fc64:	e0bff215 	stw	r2,-56(fp)
 200fc68:	e03ff315 	stw	zero,-52(fp)
 200fc6c:	e0bff217 	ldw	r2,-56(fp)
 200fc70:	15bfffcc 	andi	r22,r2,65535
 200fc74:	e0fff317 	ldw	r3,-52(fp)
 200fc78:	182e703a 	and	r23,r3,zero
 200fc7c:	00000606 	br	200fc98 <___vfiprintf_internal_r+0x79c>
 200fc80:	e0bfe917 	ldw	r2,-92(fp)
 200fc84:	10c00104 	addi	r3,r2,4
 200fc88:	e0ffe915 	stw	r3,-92(fp)
 200fc8c:	10800017 	ldw	r2,0(r2)
 200fc90:	102d883a 	mov	r22,r2
 200fc94:	002f883a 	mov	r23,zero
 200fc98:	e5bfbc15 	stw	r22,-272(fp)
 200fc9c:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 200fca0:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200fca4:	0000a606 	br	200ff40 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200fca8:	e0bfe917 	ldw	r2,-92(fp)
 200fcac:	10c00104 	addi	r3,r2,4
 200fcb0:	e0ffe915 	stw	r3,-92(fp)
 200fcb4:	10800017 	ldw	r2,0(r2)
 200fcb8:	e0bfbc15 	stw	r2,-272(fp)
 200fcbc:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 200fcc0:	00800084 	movi	r2,2
 200fcc4:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 200fcc8:	008080b4 	movhi	r2,514
 200fccc:	10bb3304 	addi	r2,r2,-4916
 200fcd0:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 200fcd4:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200fcd8:	00800c04 	movi	r2,48
 200fcdc:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200fce0:	04401e04 	movi	r17,120
 200fce4:	00801e04 	movi	r2,120
 200fce8:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200fcec:	00009406 	br	200ff40 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200fcf0:	e0bfe917 	ldw	r2,-92(fp)
 200fcf4:	10c00104 	addi	r3,r2,4
 200fcf8:	e0ffe915 	stw	r3,-92(fp)
 200fcfc:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200fd00:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200fd04:	a000081e 	bne	r20,zero,200fd28 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 200fd08:	050080b4 	movhi	r20,514
 200fd0c:	a53b3804 	addi	r20,r20,-4896
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200fd10:	e0bfbb17 	ldw	r2,-276(fp)
 200fd14:	10c001f0 	cmpltui	r3,r2,7
 200fd18:	1800011e 	bne	r3,zero,200fd20 <___vfiprintf_internal_r+0x824>
 200fd1c:	00800184 	movi	r2,6
 200fd20:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fd24:	00011706 	br	2010184 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200fd28:	e0bfbb17 	ldw	r2,-276(fp)
 200fd2c:	10001016 	blt	r2,zero,200fd70 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200fd30:	e0bfbb17 	ldw	r2,-276(fp)
 200fd34:	100d883a 	mov	r6,r2
 200fd38:	000b883a 	mov	r5,zero
 200fd3c:	a009883a 	mov	r4,r20
 200fd40:	200c4400 	call	200c440 <memchr>
 200fd44:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 200fd48:	e0bfc617 	ldw	r2,-232(fp)
 200fd4c:	10000526 	beq	r2,zero,200fd64 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 200fd50:	e0bfc617 	ldw	r2,-232(fp)
 200fd54:	a007883a 	mov	r3,r20
 200fd58:	10c5c83a 	sub	r2,r2,r3
 200fd5c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fd60:	00010806 	br	2010184 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200fd64:	e0bfbb17 	ldw	r2,-276(fp)
 200fd68:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 200fd6c:	00010506 	br	2010184 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200fd70:	a009883a 	mov	r4,r20
 200fd74:	20051c40 	call	20051c4 <strlen>
 200fd78:	e0bfc115 	stw	r2,-252(fp)

			break;
 200fd7c:	00010106 	br	2010184 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 200fd80:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200fd84:	9880080c 	andi	r2,r19,32
 200fd88:	10000826 	beq	r2,zero,200fdac <___vfiprintf_internal_r+0x8b0>
 200fd8c:	e0bfe917 	ldw	r2,-92(fp)
 200fd90:	10c00204 	addi	r3,r2,8
 200fd94:	e0ffe915 	stw	r3,-92(fp)
 200fd98:	10c00017 	ldw	r3,0(r2)
 200fd9c:	e0ffec15 	stw	r3,-80(fp)
 200fda0:	10c00117 	ldw	r3,4(r2)
 200fda4:	e0ffed15 	stw	r3,-76(fp)
 200fda8:	00001e06 	br	200fe24 <___vfiprintf_internal_r+0x928>
 200fdac:	9880040c 	andi	r2,r19,16
 200fdb0:	10000726 	beq	r2,zero,200fdd0 <___vfiprintf_internal_r+0x8d4>
 200fdb4:	e0bfe917 	ldw	r2,-92(fp)
 200fdb8:	10c00104 	addi	r3,r2,4
 200fdbc:	e0ffe915 	stw	r3,-92(fp)
 200fdc0:	10800017 	ldw	r2,0(r2)
 200fdc4:	e0bfec15 	stw	r2,-80(fp)
 200fdc8:	e03fed15 	stw	zero,-76(fp)
 200fdcc:	00001506 	br	200fe24 <___vfiprintf_internal_r+0x928>
 200fdd0:	9880100c 	andi	r2,r19,64
 200fdd4:	10000d26 	beq	r2,zero,200fe0c <___vfiprintf_internal_r+0x910>
 200fdd8:	e0bfe917 	ldw	r2,-92(fp)
 200fddc:	10c00104 	addi	r3,r2,4
 200fde0:	e0ffe915 	stw	r3,-92(fp)
 200fde4:	10800017 	ldw	r2,0(r2)
 200fde8:	e0bff415 	stw	r2,-48(fp)
 200fdec:	e03ff515 	stw	zero,-44(fp)
 200fdf0:	e0bff417 	ldw	r2,-48(fp)
 200fdf4:	10bfffcc 	andi	r2,r2,65535
 200fdf8:	e0bfec15 	stw	r2,-80(fp)
 200fdfc:	e0fff517 	ldw	r3,-44(fp)
 200fe00:	1806703a 	and	r3,r3,zero
 200fe04:	e0ffed15 	stw	r3,-76(fp)
 200fe08:	00000606 	br	200fe24 <___vfiprintf_internal_r+0x928>
 200fe0c:	e0bfe917 	ldw	r2,-92(fp)
 200fe10:	10c00104 	addi	r3,r2,4
 200fe14:	e0ffe915 	stw	r3,-92(fp)
 200fe18:	10800017 	ldw	r2,0(r2)
 200fe1c:	e0bfec15 	stw	r2,-80(fp)
 200fe20:	e03fed15 	stw	zero,-76(fp)
 200fe24:	e0bfec17 	ldw	r2,-80(fp)
 200fe28:	e0bfbc15 	stw	r2,-272(fp)
 200fe2c:	e0ffed17 	ldw	r3,-76(fp)
 200fe30:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 200fe34:	00800044 	movi	r2,1
 200fe38:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 200fe3c:	00004006 	br	200ff40 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200fe40:	008080b4 	movhi	r2,514
 200fe44:	10bb3a04 	addi	r2,r2,-4888
 200fe48:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 200fe4c:	00000306 	br	200fe5c <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 200fe50:	008080b4 	movhi	r2,514
 200fe54:	10bb3304 	addi	r2,r2,-4916
 200fe58:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 200fe5c:	9880080c 	andi	r2,r19,32
 200fe60:	10000826 	beq	r2,zero,200fe84 <___vfiprintf_internal_r+0x988>
 200fe64:	e0bfe917 	ldw	r2,-92(fp)
 200fe68:	10c00204 	addi	r3,r2,8
 200fe6c:	e0ffe915 	stw	r3,-92(fp)
 200fe70:	10c00017 	ldw	r3,0(r2)
 200fe74:	e0ffee15 	stw	r3,-72(fp)
 200fe78:	10c00117 	ldw	r3,4(r2)
 200fe7c:	e0ffef15 	stw	r3,-68(fp)
 200fe80:	00001e06 	br	200fefc <___vfiprintf_internal_r+0xa00>
 200fe84:	9880040c 	andi	r2,r19,16
 200fe88:	10000726 	beq	r2,zero,200fea8 <___vfiprintf_internal_r+0x9ac>
 200fe8c:	e0bfe917 	ldw	r2,-92(fp)
 200fe90:	10c00104 	addi	r3,r2,4
 200fe94:	e0ffe915 	stw	r3,-92(fp)
 200fe98:	10800017 	ldw	r2,0(r2)
 200fe9c:	e0bfee15 	stw	r2,-72(fp)
 200fea0:	e03fef15 	stw	zero,-68(fp)
 200fea4:	00001506 	br	200fefc <___vfiprintf_internal_r+0xa00>
 200fea8:	9880100c 	andi	r2,r19,64
 200feac:	10000d26 	beq	r2,zero,200fee4 <___vfiprintf_internal_r+0x9e8>
 200feb0:	e0bfe917 	ldw	r2,-92(fp)
 200feb4:	10c00104 	addi	r3,r2,4
 200feb8:	e0ffe915 	stw	r3,-92(fp)
 200febc:	10800017 	ldw	r2,0(r2)
 200fec0:	e0bff615 	stw	r2,-40(fp)
 200fec4:	e03ff715 	stw	zero,-36(fp)
 200fec8:	e0bff617 	ldw	r2,-40(fp)
 200fecc:	10bfffcc 	andi	r2,r2,65535
 200fed0:	e0bfee15 	stw	r2,-72(fp)
 200fed4:	e0fff717 	ldw	r3,-36(fp)
 200fed8:	1806703a 	and	r3,r3,zero
 200fedc:	e0ffef15 	stw	r3,-68(fp)
 200fee0:	00000606 	br	200fefc <___vfiprintf_internal_r+0xa00>
 200fee4:	e0bfe917 	ldw	r2,-92(fp)
 200fee8:	10c00104 	addi	r3,r2,4
 200feec:	e0ffe915 	stw	r3,-92(fp)
 200fef0:	10800017 	ldw	r2,0(r2)
 200fef4:	e0bfee15 	stw	r2,-72(fp)
 200fef8:	e03fef15 	stw	zero,-68(fp)
 200fefc:	e0bfee17 	ldw	r2,-72(fp)
 200ff00:	e0bfbc15 	stw	r2,-272(fp)
 200ff04:	e0ffef17 	ldw	r3,-68(fp)
 200ff08:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 200ff0c:	00800084 	movi	r2,2
 200ff10:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200ff14:	9880004c 	andi	r2,r19,1
 200ff18:	10000926 	beq	r2,zero,200ff40 <___vfiprintf_internal_r+0xa44>
 200ff1c:	e0bfbc17 	ldw	r2,-272(fp)
 200ff20:	e0ffbd17 	ldw	r3,-268(fp)
 200ff24:	10c4b03a 	or	r2,r2,r3
 200ff28:	10000526 	beq	r2,zero,200ff40 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 200ff2c:	00800c04 	movi	r2,48
 200ff30:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200ff34:	8805883a 	mov	r2,r17
 200ff38:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200ff3c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200ff40:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200ff44:	e0bfbb17 	ldw	r2,-276(fp)
 200ff48:	e0bfbf15 	stw	r2,-260(fp)
 200ff4c:	e0bfbf17 	ldw	r2,-260(fp)
 200ff50:	10000216 	blt	r2,zero,200ff5c <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 200ff54:	00bfdfc4 	movi	r2,-129
 200ff58:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200ff5c:	e53fdb04 	addi	r20,fp,-148
 200ff60:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 200ff64:	e0bfbc17 	ldw	r2,-272(fp)
 200ff68:	e0ffbd17 	ldw	r3,-268(fp)
 200ff6c:	10c4b03a 	or	r2,r2,r3
 200ff70:	1000021e 	bne	r2,zero,200ff7c <___vfiprintf_internal_r+0xa80>
 200ff74:	e0bfbb17 	ldw	r2,-276(fp)
 200ff78:	10006c26 	beq	r2,zero,201012c <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200ff7c:	e0bfbe03 	ldbu	r2,-264(fp)
 200ff80:	10c00060 	cmpeqi	r3,r2,1
 200ff84:	1800211e 	bne	r3,zero,201000c <___vfiprintf_internal_r+0xb10>
 200ff88:	10c000a0 	cmpeqi	r3,r2,2
 200ff8c:	1800491e 	bne	r3,zero,20100b4 <___vfiprintf_internal_r+0xbb8>
 200ff90:	10005d1e 	bne	r2,zero,2010108 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200ff94:	a53fffc4 	addi	r20,r20,-1
 200ff98:	e0bfbc17 	ldw	r2,-272(fp)
 200ff9c:	108001cc 	andi	r2,r2,7
 200ffa0:	10800c04 	addi	r2,r2,48
 200ffa4:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 200ffa8:	e0bfbd17 	ldw	r2,-268(fp)
 200ffac:	1004977a 	slli	r2,r2,29
 200ffb0:	e0ffbc17 	ldw	r3,-272(fp)
 200ffb4:	1806d0fa 	srli	r3,r3,3
 200ffb8:	1884b03a 	or	r2,r3,r2
 200ffbc:	e0bfbc15 	stw	r2,-272(fp)
 200ffc0:	e0bfbd17 	ldw	r2,-268(fp)
 200ffc4:	1004d0fa 	srli	r2,r2,3
 200ffc8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200ffcc:	e0bfbc17 	ldw	r2,-272(fp)
 200ffd0:	e0ffbd17 	ldw	r3,-268(fp)
 200ffd4:	10c4b03a 	or	r2,r2,r3
 200ffd8:	103fee1e 	bne	r2,zero,200ff94 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200ffdc:	9880004c 	andi	r2,r19,1
 200ffe0:	10005026 	beq	r2,zero,2010124 <___vfiprintf_internal_r+0xc28>
 200ffe4:	a0800003 	ldbu	r2,0(r20)
 200ffe8:	10803fcc 	andi	r2,r2,255
 200ffec:	1080201c 	xori	r2,r2,128
 200fff0:	10bfe004 	addi	r2,r2,-128
 200fff4:	10800c20 	cmpeqi	r2,r2,48
 200fff8:	10004a1e 	bne	r2,zero,2010124 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 200fffc:	a53fffc4 	addi	r20,r20,-1
 2010000:	00800c04 	movi	r2,48
 2010004:	a0800005 	stb	r2,0(r20)
					break;
 2010008:	00004606 	br	2010124 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 201000c:	e0bfbd17 	ldw	r2,-268(fp)
 2010010:	10000a1e 	bne	r2,zero,201003c <___vfiprintf_internal_r+0xb40>
 2010014:	e0bfbd17 	ldw	r2,-268(fp)
 2010018:	1000031e 	bne	r2,zero,2010028 <___vfiprintf_internal_r+0xb2c>
 201001c:	e0bfbc17 	ldw	r2,-272(fp)
 2010020:	108002a8 	cmpgeui	r2,r2,10
 2010024:	1000051e 	bne	r2,zero,201003c <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 2010028:	a53fffc4 	addi	r20,r20,-1
 201002c:	e0bfbc17 	ldw	r2,-272(fp)
 2010030:	10800c04 	addi	r2,r2,48
 2010034:	a0800005 	stb	r2,0(r20)
						break;
 2010038:	00003b06 	br	2010128 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 201003c:	a53fffc4 	addi	r20,r20,-1
 2010040:	e0bfbc17 	ldw	r2,-272(fp)
 2010044:	e0ffbd17 	ldw	r3,-268(fp)
 2010048:	01800284 	movi	r6,10
 201004c:	000f883a 	mov	r7,zero
 2010050:	1009883a 	mov	r4,r2
 2010054:	180b883a 	mov	r5,r3
 2010058:	201198c0 	call	201198c <__umoddi3>
 201005c:	1009883a 	mov	r4,r2
 2010060:	180b883a 	mov	r5,r3
 2010064:	2005883a 	mov	r2,r4
 2010068:	2807883a 	mov	r3,r5
 201006c:	10800c04 	addi	r2,r2,48
 2010070:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2010074:	e0bfbc17 	ldw	r2,-272(fp)
 2010078:	e0ffbd17 	ldw	r3,-268(fp)
 201007c:	01800284 	movi	r6,10
 2010080:	000f883a 	mov	r7,zero
 2010084:	1009883a 	mov	r4,r2
 2010088:	180b883a 	mov	r5,r3
 201008c:	20114140 	call	2011414 <__udivdi3>
 2010090:	1009883a 	mov	r4,r2
 2010094:	180b883a 	mov	r5,r3
 2010098:	e13fbc15 	stw	r4,-272(fp)
 201009c:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 20100a0:	e0bfbc17 	ldw	r2,-272(fp)
 20100a4:	e0ffbd17 	ldw	r3,-268(fp)
 20100a8:	10c4b03a 	or	r2,r2,r3
 20100ac:	103fe31e 	bne	r2,zero,201003c <___vfiprintf_internal_r+0xb40>
					break;
 20100b0:	00001d06 	br	2010128 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 20100b4:	a53fffc4 	addi	r20,r20,-1
 20100b8:	e0bfbc17 	ldw	r2,-272(fp)
 20100bc:	108003cc 	andi	r2,r2,15
 20100c0:	e0ffc217 	ldw	r3,-248(fp)
 20100c4:	1885883a 	add	r2,r3,r2
 20100c8:	10800003 	ldbu	r2,0(r2)
 20100cc:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 20100d0:	e0bfbd17 	ldw	r2,-268(fp)
 20100d4:	1004973a 	slli	r2,r2,28
 20100d8:	e0ffbc17 	ldw	r3,-272(fp)
 20100dc:	1806d13a 	srli	r3,r3,4
 20100e0:	1884b03a 	or	r2,r3,r2
 20100e4:	e0bfbc15 	stw	r2,-272(fp)
 20100e8:	e0bfbd17 	ldw	r2,-268(fp)
 20100ec:	1004d13a 	srli	r2,r2,4
 20100f0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 20100f4:	e0bfbc17 	ldw	r2,-272(fp)
 20100f8:	e0ffbd17 	ldw	r3,-268(fp)
 20100fc:	10c4b03a 	or	r2,r2,r3
 2010100:	103fec1e 	bne	r2,zero,20100b4 <___vfiprintf_internal_r+0xbb8>
					break;
 2010104:	00000806 	br	2010128 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 2010108:	050080b4 	movhi	r20,514
 201010c:	a53b3f04 	addi	r20,r20,-4868
					size = strlen (cp);
 2010110:	a009883a 	mov	r4,r20
 2010114:	20051c40 	call	20051c4 <strlen>
 2010118:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 201011c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2010120:	00001806 	br	2010184 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2010124:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2010128:	00000706 	br	2010148 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 201012c:	e0bfbe03 	ldbu	r2,-264(fp)
 2010130:	1000051e 	bne	r2,zero,2010148 <___vfiprintf_internal_r+0xc4c>
 2010134:	9880004c 	andi	r2,r19,1
 2010138:	10000326 	beq	r2,zero,2010148 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 201013c:	a53fffc4 	addi	r20,r20,-1
 2010140:	00800c04 	movi	r2,48
 2010144:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 2010148:	e0bfdb04 	addi	r2,fp,-148
 201014c:	10800a04 	addi	r2,r2,40
 2010150:	1007883a 	mov	r3,r2
 2010154:	a005883a 	mov	r2,r20
 2010158:	1885c83a 	sub	r2,r3,r2
 201015c:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 2010160:	00000806 	br	2010184 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2010164:	88015426 	beq	r17,zero,20106b8 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2010168:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 201016c:	8805883a 	mov	r2,r17
 2010170:	a0800005 	stb	r2,0(r20)
			size = 1;
 2010174:	00800044 	movi	r2,1
 2010178:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 201017c:	e03fc705 	stb	zero,-228(fp)
			break;
 2010180:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2010184:	e0ffbf17 	ldw	r3,-260(fp)
 2010188:	e0bfc117 	ldw	r2,-252(fp)
 201018c:	10c0010e 	bge	r2,r3,2010194 <___vfiprintf_internal_r+0xc98>
 2010190:	1805883a 	mov	r2,r3
 2010194:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 2010198:	e0bfc703 	ldbu	r2,-228(fp)
 201019c:	10803fcc 	andi	r2,r2,255
 20101a0:	1080201c 	xori	r2,r2,128
 20101a4:	10bfe004 	addi	r2,r2,-128
 20101a8:	10000326 	beq	r2,zero,20101b8 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 20101ac:	e0bfc017 	ldw	r2,-256(fp)
 20101b0:	10800044 	addi	r2,r2,1
 20101b4:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 20101b8:	9880008c 	andi	r2,r19,2
 20101bc:	10000326 	beq	r2,zero,20101cc <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 20101c0:	e0bfc017 	ldw	r2,-256(fp)
 20101c4:	10800084 	addi	r2,r2,2
 20101c8:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 20101cc:	9880210c 	andi	r2,r19,132
 20101d0:	1000351e 	bne	r2,zero,20102a8 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 20101d4:	e0ffba17 	ldw	r3,-280(fp)
 20101d8:	e0bfc017 	ldw	r2,-256(fp)
 20101dc:	18a1c83a 	sub	r16,r3,r2
 20101e0:	0400310e 	bge	zero,r16,20102a8 <___vfiprintf_internal_r+0xdac>
 20101e4:	00001706 	br	2010244 <___vfiprintf_internal_r+0xd48>
 20101e8:	008080b4 	movhi	r2,514
 20101ec:	10bb4584 	addi	r2,r2,-4842
 20101f0:	90800015 	stw	r2,0(r18)
 20101f4:	00800404 	movi	r2,16
 20101f8:	90800115 	stw	r2,4(r18)
 20101fc:	e0bfca17 	ldw	r2,-216(fp)
 2010200:	10800404 	addi	r2,r2,16
 2010204:	e0bfca15 	stw	r2,-216(fp)
 2010208:	94800204 	addi	r18,r18,8
 201020c:	e0bfc917 	ldw	r2,-220(fp)
 2010210:	10800044 	addi	r2,r2,1
 2010214:	e0bfc915 	stw	r2,-220(fp)
 2010218:	e0bfc917 	ldw	r2,-220(fp)
 201021c:	10800210 	cmplti	r2,r2,8
 2010220:	1000071e 	bne	r2,zero,2010240 <___vfiprintf_internal_r+0xd44>
 2010224:	e0bfc804 	addi	r2,fp,-224
 2010228:	100d883a 	mov	r6,r2
 201022c:	e17fe717 	ldw	r5,-100(fp)
 2010230:	e13fe617 	ldw	r4,-104(fp)
 2010234:	200f2800 	call	200f280 <__sprint_r>
 2010238:	10012d1e 	bne	r2,zero,20106f0 <___vfiprintf_internal_r+0x11f4>
 201023c:	e4bfcb04 	addi	r18,fp,-212
 2010240:	843ffc04 	addi	r16,r16,-16
 2010244:	80800448 	cmpgei	r2,r16,17
 2010248:	103fe71e 	bne	r2,zero,20101e8 <___vfiprintf_internal_r+0xcec>
 201024c:	008080b4 	movhi	r2,514
 2010250:	10bb4584 	addi	r2,r2,-4842
 2010254:	90800015 	stw	r2,0(r18)
 2010258:	8005883a 	mov	r2,r16
 201025c:	90800115 	stw	r2,4(r18)
 2010260:	e0bfca17 	ldw	r2,-216(fp)
 2010264:	8007883a 	mov	r3,r16
 2010268:	10c5883a 	add	r2,r2,r3
 201026c:	e0bfca15 	stw	r2,-216(fp)
 2010270:	94800204 	addi	r18,r18,8
 2010274:	e0bfc917 	ldw	r2,-220(fp)
 2010278:	10800044 	addi	r2,r2,1
 201027c:	e0bfc915 	stw	r2,-220(fp)
 2010280:	e0bfc917 	ldw	r2,-220(fp)
 2010284:	10800210 	cmplti	r2,r2,8
 2010288:	1000071e 	bne	r2,zero,20102a8 <___vfiprintf_internal_r+0xdac>
 201028c:	e0bfc804 	addi	r2,fp,-224
 2010290:	100d883a 	mov	r6,r2
 2010294:	e17fe717 	ldw	r5,-100(fp)
 2010298:	e13fe617 	ldw	r4,-104(fp)
 201029c:	200f2800 	call	200f280 <__sprint_r>
 20102a0:	1001151e 	bne	r2,zero,20106f8 <___vfiprintf_internal_r+0x11fc>
 20102a4:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 20102a8:	e0bfc703 	ldbu	r2,-228(fp)
 20102ac:	10803fcc 	andi	r2,r2,255
 20102b0:	1080201c 	xori	r2,r2,128
 20102b4:	10bfe004 	addi	r2,r2,-128
 20102b8:	10001526 	beq	r2,zero,2010310 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 20102bc:	e0bfc704 	addi	r2,fp,-228
 20102c0:	90800015 	stw	r2,0(r18)
 20102c4:	00800044 	movi	r2,1
 20102c8:	90800115 	stw	r2,4(r18)
 20102cc:	e0bfca17 	ldw	r2,-216(fp)
 20102d0:	10800044 	addi	r2,r2,1
 20102d4:	e0bfca15 	stw	r2,-216(fp)
 20102d8:	94800204 	addi	r18,r18,8
 20102dc:	e0bfc917 	ldw	r2,-220(fp)
 20102e0:	10800044 	addi	r2,r2,1
 20102e4:	e0bfc915 	stw	r2,-220(fp)
 20102e8:	e0bfc917 	ldw	r2,-220(fp)
 20102ec:	10800210 	cmplti	r2,r2,8
 20102f0:	1000071e 	bne	r2,zero,2010310 <___vfiprintf_internal_r+0xe14>
 20102f4:	e0bfc804 	addi	r2,fp,-224
 20102f8:	100d883a 	mov	r6,r2
 20102fc:	e17fe717 	ldw	r5,-100(fp)
 2010300:	e13fe617 	ldw	r4,-104(fp)
 2010304:	200f2800 	call	200f280 <__sprint_r>
 2010308:	1000fd1e 	bne	r2,zero,2010700 <___vfiprintf_internal_r+0x1204>
 201030c:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2010310:	9880008c 	andi	r2,r19,2
 2010314:	10001526 	beq	r2,zero,201036c <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 2010318:	e0bfe504 	addi	r2,fp,-108
 201031c:	90800015 	stw	r2,0(r18)
 2010320:	00800084 	movi	r2,2
 2010324:	90800115 	stw	r2,4(r18)
 2010328:	e0bfca17 	ldw	r2,-216(fp)
 201032c:	10800084 	addi	r2,r2,2
 2010330:	e0bfca15 	stw	r2,-216(fp)
 2010334:	94800204 	addi	r18,r18,8
 2010338:	e0bfc917 	ldw	r2,-220(fp)
 201033c:	10800044 	addi	r2,r2,1
 2010340:	e0bfc915 	stw	r2,-220(fp)
 2010344:	e0bfc917 	ldw	r2,-220(fp)
 2010348:	10800210 	cmplti	r2,r2,8
 201034c:	1000071e 	bne	r2,zero,201036c <___vfiprintf_internal_r+0xe70>
 2010350:	e0bfc804 	addi	r2,fp,-224
 2010354:	100d883a 	mov	r6,r2
 2010358:	e17fe717 	ldw	r5,-100(fp)
 201035c:	e13fe617 	ldw	r4,-104(fp)
 2010360:	200f2800 	call	200f280 <__sprint_r>
 2010364:	1000e81e 	bne	r2,zero,2010708 <___vfiprintf_internal_r+0x120c>
 2010368:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 201036c:	9880210c 	andi	r2,r19,132
 2010370:	10802018 	cmpnei	r2,r2,128
 2010374:	1000351e 	bne	r2,zero,201044c <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 2010378:	e0ffba17 	ldw	r3,-280(fp)
 201037c:	e0bfc017 	ldw	r2,-256(fp)
 2010380:	18a1c83a 	sub	r16,r3,r2
 2010384:	0400310e 	bge	zero,r16,201044c <___vfiprintf_internal_r+0xf50>
 2010388:	00001706 	br	20103e8 <___vfiprintf_internal_r+0xeec>
 201038c:	008080b4 	movhi	r2,514
 2010390:	10bb4984 	addi	r2,r2,-4826
 2010394:	90800015 	stw	r2,0(r18)
 2010398:	00800404 	movi	r2,16
 201039c:	90800115 	stw	r2,4(r18)
 20103a0:	e0bfca17 	ldw	r2,-216(fp)
 20103a4:	10800404 	addi	r2,r2,16
 20103a8:	e0bfca15 	stw	r2,-216(fp)
 20103ac:	94800204 	addi	r18,r18,8
 20103b0:	e0bfc917 	ldw	r2,-220(fp)
 20103b4:	10800044 	addi	r2,r2,1
 20103b8:	e0bfc915 	stw	r2,-220(fp)
 20103bc:	e0bfc917 	ldw	r2,-220(fp)
 20103c0:	10800210 	cmplti	r2,r2,8
 20103c4:	1000071e 	bne	r2,zero,20103e4 <___vfiprintf_internal_r+0xee8>
 20103c8:	e0bfc804 	addi	r2,fp,-224
 20103cc:	100d883a 	mov	r6,r2
 20103d0:	e17fe717 	ldw	r5,-100(fp)
 20103d4:	e13fe617 	ldw	r4,-104(fp)
 20103d8:	200f2800 	call	200f280 <__sprint_r>
 20103dc:	1000cc1e 	bne	r2,zero,2010710 <___vfiprintf_internal_r+0x1214>
 20103e0:	e4bfcb04 	addi	r18,fp,-212
 20103e4:	843ffc04 	addi	r16,r16,-16
 20103e8:	80800448 	cmpgei	r2,r16,17
 20103ec:	103fe71e 	bne	r2,zero,201038c <___vfiprintf_internal_r+0xe90>
 20103f0:	008080b4 	movhi	r2,514
 20103f4:	10bb4984 	addi	r2,r2,-4826
 20103f8:	90800015 	stw	r2,0(r18)
 20103fc:	8005883a 	mov	r2,r16
 2010400:	90800115 	stw	r2,4(r18)
 2010404:	e0bfca17 	ldw	r2,-216(fp)
 2010408:	8007883a 	mov	r3,r16
 201040c:	10c5883a 	add	r2,r2,r3
 2010410:	e0bfca15 	stw	r2,-216(fp)
 2010414:	94800204 	addi	r18,r18,8
 2010418:	e0bfc917 	ldw	r2,-220(fp)
 201041c:	10800044 	addi	r2,r2,1
 2010420:	e0bfc915 	stw	r2,-220(fp)
 2010424:	e0bfc917 	ldw	r2,-220(fp)
 2010428:	10800210 	cmplti	r2,r2,8
 201042c:	1000071e 	bne	r2,zero,201044c <___vfiprintf_internal_r+0xf50>
 2010430:	e0bfc804 	addi	r2,fp,-224
 2010434:	100d883a 	mov	r6,r2
 2010438:	e17fe717 	ldw	r5,-100(fp)
 201043c:	e13fe617 	ldw	r4,-104(fp)
 2010440:	200f2800 	call	200f280 <__sprint_r>
 2010444:	1000b41e 	bne	r2,zero,2010718 <___vfiprintf_internal_r+0x121c>
 2010448:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 201044c:	e0ffbf17 	ldw	r3,-260(fp)
 2010450:	e0bfc117 	ldw	r2,-252(fp)
 2010454:	18a1c83a 	sub	r16,r3,r2
 2010458:	0400310e 	bge	zero,r16,2010520 <___vfiprintf_internal_r+0x1024>
 201045c:	00001706 	br	20104bc <___vfiprintf_internal_r+0xfc0>
 2010460:	008080b4 	movhi	r2,514
 2010464:	10bb4984 	addi	r2,r2,-4826
 2010468:	90800015 	stw	r2,0(r18)
 201046c:	00800404 	movi	r2,16
 2010470:	90800115 	stw	r2,4(r18)
 2010474:	e0bfca17 	ldw	r2,-216(fp)
 2010478:	10800404 	addi	r2,r2,16
 201047c:	e0bfca15 	stw	r2,-216(fp)
 2010480:	94800204 	addi	r18,r18,8
 2010484:	e0bfc917 	ldw	r2,-220(fp)
 2010488:	10800044 	addi	r2,r2,1
 201048c:	e0bfc915 	stw	r2,-220(fp)
 2010490:	e0bfc917 	ldw	r2,-220(fp)
 2010494:	10800210 	cmplti	r2,r2,8
 2010498:	1000071e 	bne	r2,zero,20104b8 <___vfiprintf_internal_r+0xfbc>
 201049c:	e0bfc804 	addi	r2,fp,-224
 20104a0:	100d883a 	mov	r6,r2
 20104a4:	e17fe717 	ldw	r5,-100(fp)
 20104a8:	e13fe617 	ldw	r4,-104(fp)
 20104ac:	200f2800 	call	200f280 <__sprint_r>
 20104b0:	10009b1e 	bne	r2,zero,2010720 <___vfiprintf_internal_r+0x1224>
 20104b4:	e4bfcb04 	addi	r18,fp,-212
 20104b8:	843ffc04 	addi	r16,r16,-16
 20104bc:	80800448 	cmpgei	r2,r16,17
 20104c0:	103fe71e 	bne	r2,zero,2010460 <___vfiprintf_internal_r+0xf64>
 20104c4:	008080b4 	movhi	r2,514
 20104c8:	10bb4984 	addi	r2,r2,-4826
 20104cc:	90800015 	stw	r2,0(r18)
 20104d0:	8005883a 	mov	r2,r16
 20104d4:	90800115 	stw	r2,4(r18)
 20104d8:	e0bfca17 	ldw	r2,-216(fp)
 20104dc:	8007883a 	mov	r3,r16
 20104e0:	10c5883a 	add	r2,r2,r3
 20104e4:	e0bfca15 	stw	r2,-216(fp)
 20104e8:	94800204 	addi	r18,r18,8
 20104ec:	e0bfc917 	ldw	r2,-220(fp)
 20104f0:	10800044 	addi	r2,r2,1
 20104f4:	e0bfc915 	stw	r2,-220(fp)
 20104f8:	e0bfc917 	ldw	r2,-220(fp)
 20104fc:	10800210 	cmplti	r2,r2,8
 2010500:	1000071e 	bne	r2,zero,2010520 <___vfiprintf_internal_r+0x1024>
 2010504:	e0bfc804 	addi	r2,fp,-224
 2010508:	100d883a 	mov	r6,r2
 201050c:	e17fe717 	ldw	r5,-100(fp)
 2010510:	e13fe617 	ldw	r4,-104(fp)
 2010514:	200f2800 	call	200f280 <__sprint_r>
 2010518:	1000831e 	bne	r2,zero,2010728 <___vfiprintf_internal_r+0x122c>
 201051c:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010520:	95000015 	stw	r20,0(r18)
 2010524:	e0bfc117 	ldw	r2,-252(fp)
 2010528:	90800115 	stw	r2,4(r18)
 201052c:	e0ffca17 	ldw	r3,-216(fp)
 2010530:	e0bfc117 	ldw	r2,-252(fp)
 2010534:	1885883a 	add	r2,r3,r2
 2010538:	e0bfca15 	stw	r2,-216(fp)
 201053c:	94800204 	addi	r18,r18,8
 2010540:	e0bfc917 	ldw	r2,-220(fp)
 2010544:	10800044 	addi	r2,r2,1
 2010548:	e0bfc915 	stw	r2,-220(fp)
 201054c:	e0bfc917 	ldw	r2,-220(fp)
 2010550:	10800210 	cmplti	r2,r2,8
 2010554:	1000071e 	bne	r2,zero,2010574 <___vfiprintf_internal_r+0x1078>
 2010558:	e0bfc804 	addi	r2,fp,-224
 201055c:	100d883a 	mov	r6,r2
 2010560:	e17fe717 	ldw	r5,-100(fp)
 2010564:	e13fe617 	ldw	r4,-104(fp)
 2010568:	200f2800 	call	200f280 <__sprint_r>
 201056c:	1000701e 	bne	r2,zero,2010730 <___vfiprintf_internal_r+0x1234>
 2010570:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2010574:	9880010c 	andi	r2,r19,4
 2010578:	10003526 	beq	r2,zero,2010650 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 201057c:	e0ffba17 	ldw	r3,-280(fp)
 2010580:	e0bfc017 	ldw	r2,-256(fp)
 2010584:	18a1c83a 	sub	r16,r3,r2
 2010588:	0400310e 	bge	zero,r16,2010650 <___vfiprintf_internal_r+0x1154>
 201058c:	00001706 	br	20105ec <___vfiprintf_internal_r+0x10f0>
 2010590:	008080b4 	movhi	r2,514
 2010594:	10bb4584 	addi	r2,r2,-4842
 2010598:	90800015 	stw	r2,0(r18)
 201059c:	00800404 	movi	r2,16
 20105a0:	90800115 	stw	r2,4(r18)
 20105a4:	e0bfca17 	ldw	r2,-216(fp)
 20105a8:	10800404 	addi	r2,r2,16
 20105ac:	e0bfca15 	stw	r2,-216(fp)
 20105b0:	94800204 	addi	r18,r18,8
 20105b4:	e0bfc917 	ldw	r2,-220(fp)
 20105b8:	10800044 	addi	r2,r2,1
 20105bc:	e0bfc915 	stw	r2,-220(fp)
 20105c0:	e0bfc917 	ldw	r2,-220(fp)
 20105c4:	10800210 	cmplti	r2,r2,8
 20105c8:	1000071e 	bne	r2,zero,20105e8 <___vfiprintf_internal_r+0x10ec>
 20105cc:	e0bfc804 	addi	r2,fp,-224
 20105d0:	100d883a 	mov	r6,r2
 20105d4:	e17fe717 	ldw	r5,-100(fp)
 20105d8:	e13fe617 	ldw	r4,-104(fp)
 20105dc:	200f2800 	call	200f280 <__sprint_r>
 20105e0:	1000551e 	bne	r2,zero,2010738 <___vfiprintf_internal_r+0x123c>
 20105e4:	e4bfcb04 	addi	r18,fp,-212
 20105e8:	843ffc04 	addi	r16,r16,-16
 20105ec:	80800448 	cmpgei	r2,r16,17
 20105f0:	103fe71e 	bne	r2,zero,2010590 <___vfiprintf_internal_r+0x1094>
 20105f4:	008080b4 	movhi	r2,514
 20105f8:	10bb4584 	addi	r2,r2,-4842
 20105fc:	90800015 	stw	r2,0(r18)
 2010600:	8005883a 	mov	r2,r16
 2010604:	90800115 	stw	r2,4(r18)
 2010608:	e0bfca17 	ldw	r2,-216(fp)
 201060c:	8007883a 	mov	r3,r16
 2010610:	10c5883a 	add	r2,r2,r3
 2010614:	e0bfca15 	stw	r2,-216(fp)
 2010618:	94800204 	addi	r18,r18,8
 201061c:	e0bfc917 	ldw	r2,-220(fp)
 2010620:	10800044 	addi	r2,r2,1
 2010624:	e0bfc915 	stw	r2,-220(fp)
 2010628:	e0bfc917 	ldw	r2,-220(fp)
 201062c:	10800210 	cmplti	r2,r2,8
 2010630:	1000071e 	bne	r2,zero,2010650 <___vfiprintf_internal_r+0x1154>
 2010634:	e0bfc804 	addi	r2,fp,-224
 2010638:	100d883a 	mov	r6,r2
 201063c:	e17fe717 	ldw	r5,-100(fp)
 2010640:	e13fe617 	ldw	r4,-104(fp)
 2010644:	200f2800 	call	200f280 <__sprint_r>
 2010648:	10003d1e 	bne	r2,zero,2010740 <___vfiprintf_internal_r+0x1244>
 201064c:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2010650:	e0ffba17 	ldw	r3,-280(fp)
 2010654:	e0bfc017 	ldw	r2,-256(fp)
 2010658:	10c0010e 	bge	r2,r3,2010660 <___vfiprintf_internal_r+0x1164>
 201065c:	1805883a 	mov	r2,r3
 2010660:	e0ffb917 	ldw	r3,-284(fp)
 2010664:	1885883a 	add	r2,r3,r2
 2010668:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 201066c:	e0bfca17 	ldw	r2,-216(fp)
 2010670:	10000626 	beq	r2,zero,201068c <___vfiprintf_internal_r+0x1190>
 2010674:	e0bfc804 	addi	r2,fp,-224
 2010678:	100d883a 	mov	r6,r2
 201067c:	e17fe717 	ldw	r5,-100(fp)
 2010680:	e13fe617 	ldw	r4,-104(fp)
 2010684:	200f2800 	call	200f280 <__sprint_r>
 2010688:	10002f1e 	bne	r2,zero,2010748 <___vfiprintf_internal_r+0x124c>
 201068c:	e03fc915 	stw	zero,-220(fp)
 2010690:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 2010694:	e0bfc317 	ldw	r2,-244(fp)
 2010698:	103bea26 	beq	r2,zero,200f644 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 201069c:	e17fc317 	ldw	r5,-244(fp)
 20106a0:	e13fe617 	ldw	r4,-104(fp)
 20106a4:	200a2840 	call	200a284 <_free_r>
			malloc_buf = NULL;
 20106a8:	e03fc315 	stw	zero,-244(fp)
		}
	}
 20106ac:	003be506 	br	200f644 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 20106b0:	0001883a 	nop
 20106b4:	00000106 	br	20106bc <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 20106b8:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20106bc:	e0bfca17 	ldw	r2,-216(fp)
 20106c0:	10000626 	beq	r2,zero,20106dc <___vfiprintf_internal_r+0x11e0>
 20106c4:	e0bfc804 	addi	r2,fp,-224
 20106c8:	100d883a 	mov	r6,r2
 20106cc:	e17fe717 	ldw	r5,-100(fp)
 20106d0:	e13fe617 	ldw	r4,-104(fp)
 20106d4:	200f2800 	call	200f280 <__sprint_r>
 20106d8:	10001d1e 	bne	r2,zero,2010750 <___vfiprintf_internal_r+0x1254>
 20106dc:	e03fc915 	stw	zero,-220(fp)
 20106e0:	e4bfcb04 	addi	r18,fp,-212
 20106e4:	00001b06 	br	2010754 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 20106e8:	0001883a 	nop
 20106ec:	00001906 	br	2010754 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 20106f0:	0001883a 	nop
 20106f4:	00001706 	br	2010754 <___vfiprintf_internal_r+0x1258>
 20106f8:	0001883a 	nop
 20106fc:	00001506 	br	2010754 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2010700:	0001883a 	nop
 2010704:	00001306 	br	2010754 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2010708:	0001883a 	nop
 201070c:	00001106 	br	2010754 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2010710:	0001883a 	nop
 2010714:	00000f06 	br	2010754 <___vfiprintf_internal_r+0x1258>
 2010718:	0001883a 	nop
 201071c:	00000d06 	br	2010754 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2010720:	0001883a 	nop
 2010724:	00000b06 	br	2010754 <___vfiprintf_internal_r+0x1258>
 2010728:	0001883a 	nop
 201072c:	00000906 	br	2010754 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010730:	0001883a 	nop
 2010734:	00000706 	br	2010754 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2010738:	0001883a 	nop
 201073c:	00000506 	br	2010754 <___vfiprintf_internal_r+0x1258>
 2010740:	0001883a 	nop
 2010744:	00000306 	br	2010754 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2010748:	0001883a 	nop
 201074c:	00000106 	br	2010754 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2010750:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2010754:	e0bfc317 	ldw	r2,-244(fp)
 2010758:	10000326 	beq	r2,zero,2010768 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 201075c:	e17fc317 	ldw	r5,-244(fp)
 2010760:	e13fe617 	ldw	r4,-104(fp)
 2010764:	200a2840 	call	200a284 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2010768:	e0bfe717 	ldw	r2,-100(fp)
 201076c:	1080030b 	ldhu	r2,12(r2)
 2010770:	10bfffcc 	andi	r2,r2,65535
 2010774:	1080100c 	andi	r2,r2,64
 2010778:	1000021e 	bne	r2,zero,2010784 <___vfiprintf_internal_r+0x1288>
 201077c:	e0bfb917 	ldw	r2,-284(fp)
 2010780:	00000206 	br	201078c <___vfiprintf_internal_r+0x1290>
 2010784:	00bfffc4 	movi	r2,-1
 2010788:	0001883a 	nop
	/* NOTREACHED */
}
 201078c:	e6fff804 	addi	sp,fp,-32
 2010790:	dfc00917 	ldw	ra,36(sp)
 2010794:	df000817 	ldw	fp,32(sp)
 2010798:	ddc00717 	ldw	r23,28(sp)
 201079c:	dd800617 	ldw	r22,24(sp)
 20107a0:	dd400517 	ldw	r21,20(sp)
 20107a4:	dd000417 	ldw	r20,16(sp)
 20107a8:	dcc00317 	ldw	r19,12(sp)
 20107ac:	dc800217 	ldw	r18,8(sp)
 20107b0:	dc400117 	ldw	r17,4(sp)
 20107b4:	dc000017 	ldw	r16,0(sp)
 20107b8:	dec00a04 	addi	sp,sp,40
 20107bc:	f800283a 	ret

020107c0 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 20107c0:	defff904 	addi	sp,sp,-28
 20107c4:	dfc00615 	stw	ra,24(sp)
 20107c8:	df000515 	stw	fp,20(sp)
 20107cc:	df000504 	addi	fp,sp,20
 20107d0:	e13ffc15 	stw	r4,-16(fp)
 20107d4:	e17ffd15 	stw	r5,-12(fp)
 20107d8:	e1bffe15 	stw	r6,-8(fp)
 20107dc:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 20107e0:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 20107e4:	e1bfff17 	ldw	r6,-4(fp)
 20107e8:	e17ffe17 	ldw	r5,-8(fp)
 20107ec:	e13ffd17 	ldw	r4,-12(fp)
 20107f0:	2013b3c0 	call	2013b3c <write>
 20107f4:	e0bffb15 	stw	r2,-20(fp)
 20107f8:	e0bffb17 	ldw	r2,-20(fp)
 20107fc:	10bfffd8 	cmpnei	r2,r2,-1
 2010800:	1000051e 	bne	r2,zero,2010818 <_write_r+0x58>
 2010804:	d0a72e17 	ldw	r2,-25416(gp)
 2010808:	10000326 	beq	r2,zero,2010818 <_write_r+0x58>
    ptr->_errno = errno;
 201080c:	d0e72e17 	ldw	r3,-25416(gp)
 2010810:	e0bffc17 	ldw	r2,-16(fp)
 2010814:	10c00015 	stw	r3,0(r2)
  return ret;
 2010818:	e0bffb17 	ldw	r2,-20(fp)
}
 201081c:	e037883a 	mov	sp,fp
 2010820:	dfc00117 	ldw	ra,4(sp)
 2010824:	df000017 	ldw	fp,0(sp)
 2010828:	dec00204 	addi	sp,sp,8
 201082c:	f800283a 	ret

02010830 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010830:	defffb04 	addi	sp,sp,-20
 2010834:	dfc00415 	stw	ra,16(sp)
 2010838:	df000315 	stw	fp,12(sp)
 201083c:	df000304 	addi	fp,sp,12
 2010840:	e13ffe15 	stw	r4,-8(fp)
 2010844:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2010848:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 201084c:	e13fff17 	ldw	r4,-4(fp)
 2010850:	20133340 	call	2013334 <close>
 2010854:	e0bffd15 	stw	r2,-12(fp)
 2010858:	e0bffd17 	ldw	r2,-12(fp)
 201085c:	10bfffd8 	cmpnei	r2,r2,-1
 2010860:	1000051e 	bne	r2,zero,2010878 <_close_r+0x48>
 2010864:	d0a72e17 	ldw	r2,-25416(gp)
 2010868:	10000326 	beq	r2,zero,2010878 <_close_r+0x48>
    ptr->_errno = errno;
 201086c:	d0e72e17 	ldw	r3,-25416(gp)
 2010870:	e0bffe17 	ldw	r2,-8(fp)
 2010874:	10c00015 	stw	r3,0(r2)
  return ret;
 2010878:	e0bffd17 	ldw	r2,-12(fp)
}
 201087c:	e037883a 	mov	sp,fp
 2010880:	dfc00117 	ldw	ra,4(sp)
 2010884:	df000017 	ldw	fp,0(sp)
 2010888:	dec00204 	addi	sp,sp,8
 201088c:	f800283a 	ret

02010890 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 2010890:	defff504 	addi	sp,sp,-44
 2010894:	dfc00a15 	stw	ra,40(sp)
 2010898:	df000915 	stw	fp,36(sp)
 201089c:	df000904 	addi	fp,sp,36
 20108a0:	e13ffd15 	stw	r4,-12(fp)
 20108a4:	e17ffe15 	stw	r5,-8(fp)
 20108a8:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 20108ac:	e0fffe17 	ldw	r3,-8(fp)
 20108b0:	e0bfff17 	ldw	r2,-4(fp)
 20108b4:	1885383a 	mul	r2,r3,r2
 20108b8:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 20108bc:	e17ff817 	ldw	r5,-32(fp)
 20108c0:	e13ffd17 	ldw	r4,-12(fp)
 20108c4:	200b8c40 	call	200b8c4 <_malloc_r>
 20108c8:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 20108cc:	e0bff917 	ldw	r2,-28(fp)
 20108d0:	1000021e 	bne	r2,zero,20108dc <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 20108d4:	0005883a 	mov	r2,zero
 20108d8:	00004106 	br	20109e0 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 20108dc:	e0bff917 	ldw	r2,-28(fp)
 20108e0:	10bffe04 	addi	r2,r2,-8
 20108e4:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 20108e8:	e0bffa17 	ldw	r2,-24(fp)
 20108ec:	10c00117 	ldw	r3,4(r2)
 20108f0:	00bfff04 	movi	r2,-4
 20108f4:	1884703a 	and	r2,r3,r2
 20108f8:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 20108fc:	e0bffb17 	ldw	r2,-20(fp)
 2010900:	10bfff04 	addi	r2,r2,-4
 2010904:	e0bffc15 	stw	r2,-16(fp)
 2010908:	e0bffc17 	ldw	r2,-16(fp)
 201090c:	10800968 	cmpgeui	r2,r2,37
 2010910:	10002e1e 	bne	r2,zero,20109cc <_calloc_r+0x13c>
 2010914:	e0bff917 	ldw	r2,-28(fp)
 2010918:	e0bff715 	stw	r2,-36(fp)
 201091c:	e0bffc17 	ldw	r2,-16(fp)
 2010920:	10800530 	cmpltui	r2,r2,20
 2010924:	10001e1e 	bne	r2,zero,20109a0 <_calloc_r+0x110>
 2010928:	e0bff717 	ldw	r2,-36(fp)
 201092c:	10c00104 	addi	r3,r2,4
 2010930:	e0fff715 	stw	r3,-36(fp)
 2010934:	10000015 	stw	zero,0(r2)
 2010938:	e0bff717 	ldw	r2,-36(fp)
 201093c:	10c00104 	addi	r3,r2,4
 2010940:	e0fff715 	stw	r3,-36(fp)
 2010944:	10000015 	stw	zero,0(r2)
 2010948:	e0bffc17 	ldw	r2,-16(fp)
 201094c:	10800730 	cmpltui	r2,r2,28
 2010950:	1000131e 	bne	r2,zero,20109a0 <_calloc_r+0x110>
 2010954:	e0bff717 	ldw	r2,-36(fp)
 2010958:	10c00104 	addi	r3,r2,4
 201095c:	e0fff715 	stw	r3,-36(fp)
 2010960:	10000015 	stw	zero,0(r2)
 2010964:	e0bff717 	ldw	r2,-36(fp)
 2010968:	10c00104 	addi	r3,r2,4
 201096c:	e0fff715 	stw	r3,-36(fp)
 2010970:	10000015 	stw	zero,0(r2)
 2010974:	e0bffc17 	ldw	r2,-16(fp)
 2010978:	10800930 	cmpltui	r2,r2,36
 201097c:	1000081e 	bne	r2,zero,20109a0 <_calloc_r+0x110>
 2010980:	e0bff717 	ldw	r2,-36(fp)
 2010984:	10c00104 	addi	r3,r2,4
 2010988:	e0fff715 	stw	r3,-36(fp)
 201098c:	10000015 	stw	zero,0(r2)
 2010990:	e0bff717 	ldw	r2,-36(fp)
 2010994:	10c00104 	addi	r3,r2,4
 2010998:	e0fff715 	stw	r3,-36(fp)
 201099c:	10000015 	stw	zero,0(r2)
 20109a0:	e0bff717 	ldw	r2,-36(fp)
 20109a4:	10c00104 	addi	r3,r2,4
 20109a8:	e0fff715 	stw	r3,-36(fp)
 20109ac:	10000015 	stw	zero,0(r2)
 20109b0:	e0bff717 	ldw	r2,-36(fp)
 20109b4:	10c00104 	addi	r3,r2,4
 20109b8:	e0fff715 	stw	r3,-36(fp)
 20109bc:	10000015 	stw	zero,0(r2)
 20109c0:	e0bff717 	ldw	r2,-36(fp)
 20109c4:	10000015 	stw	zero,0(r2)
 20109c8:	00000406 	br	20109dc <_calloc_r+0x14c>
 20109cc:	e1bffc17 	ldw	r6,-16(fp)
 20109d0:	000b883a 	mov	r5,zero
 20109d4:	e13ff917 	ldw	r4,-28(fp)
 20109d8:	2004de40 	call	2004de4 <memset>
    return mem;
 20109dc:	e0bff917 	ldw	r2,-28(fp)
  }
}
 20109e0:	e037883a 	mov	sp,fp
 20109e4:	dfc00117 	ldw	ra,4(sp)
 20109e8:	df000017 	ldw	fp,0(sp)
 20109ec:	dec00204 	addi	sp,sp,8
 20109f0:	f800283a 	ret

020109f4 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 20109f4:	defffa04 	addi	sp,sp,-24
 20109f8:	dfc00515 	stw	ra,20(sp)
 20109fc:	df000415 	stw	fp,16(sp)
 2010a00:	dc000315 	stw	r16,12(sp)
 2010a04:	df000404 	addi	fp,sp,16
 2010a08:	e13ffe15 	stw	r4,-8(fp)
 2010a0c:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2010a10:	8000021e 	bne	r16,zero,2010a1c <_fclose_r+0x28>
    return (0);			/* on NULL */
 2010a14:	0005883a 	mov	r2,zero
 2010a18:	00003b06 	br	2010b08 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2010a1c:	e0bffe17 	ldw	r2,-8(fp)
 2010a20:	e0bffd15 	stw	r2,-12(fp)
 2010a24:	e0bffd17 	ldw	r2,-12(fp)
 2010a28:	10000526 	beq	r2,zero,2010a40 <_fclose_r+0x4c>
 2010a2c:	e0bffd17 	ldw	r2,-12(fp)
 2010a30:	10800e17 	ldw	r2,56(r2)
 2010a34:	1000021e 	bne	r2,zero,2010a40 <_fclose_r+0x4c>
 2010a38:	e13ffd17 	ldw	r4,-12(fp)
 2010a3c:	200a0640 	call	200a064 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 2010a40:	8080030b 	ldhu	r2,12(r16)
 2010a44:	10bfffcc 	andi	r2,r2,65535
 2010a48:	10a0001c 	xori	r2,r2,32768
 2010a4c:	10a00004 	addi	r2,r2,-32768
 2010a50:	1000021e 	bne	r2,zero,2010a5c <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 2010a54:	0005883a 	mov	r2,zero
 2010a58:	00002b06 	br	2010b08 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 2010a5c:	800b883a 	mov	r5,r16
 2010a60:	e13ffe17 	ldw	r4,-8(fp)
 2010a64:	20098e00 	call	20098e0 <__sflush_r>
 2010a68:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 2010a6c:	80800b17 	ldw	r2,44(r16)
 2010a70:	10000826 	beq	r2,zero,2010a94 <_fclose_r+0xa0>
 2010a74:	80800b17 	ldw	r2,44(r16)
 2010a78:	80c00717 	ldw	r3,28(r16)
 2010a7c:	180b883a 	mov	r5,r3
 2010a80:	e13ffe17 	ldw	r4,-8(fp)
 2010a84:	103ee83a 	callr	r2
 2010a88:	1000020e 	bge	r2,zero,2010a94 <_fclose_r+0xa0>
    r = EOF;
 2010a8c:	00bfffc4 	movi	r2,-1
 2010a90:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 2010a94:	8080030b 	ldhu	r2,12(r16)
 2010a98:	10bfffcc 	andi	r2,r2,65535
 2010a9c:	1080200c 	andi	r2,r2,128
 2010aa0:	10000426 	beq	r2,zero,2010ab4 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 2010aa4:	80800417 	ldw	r2,16(r16)
 2010aa8:	100b883a 	mov	r5,r2
 2010aac:	e13ffe17 	ldw	r4,-8(fp)
 2010ab0:	200a2840 	call	200a284 <_free_r>
  if (HASUB (fp))
 2010ab4:	80800c17 	ldw	r2,48(r16)
 2010ab8:	10000826 	beq	r2,zero,2010adc <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2010abc:	80c00c17 	ldw	r3,48(r16)
 2010ac0:	80801004 	addi	r2,r16,64
 2010ac4:	18800426 	beq	r3,r2,2010ad8 <_fclose_r+0xe4>
 2010ac8:	80800c17 	ldw	r2,48(r16)
 2010acc:	100b883a 	mov	r5,r2
 2010ad0:	e13ffe17 	ldw	r4,-8(fp)
 2010ad4:	200a2840 	call	200a284 <_free_r>
 2010ad8:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2010adc:	80801117 	ldw	r2,68(r16)
 2010ae0:	10000526 	beq	r2,zero,2010af8 <_fclose_r+0x104>
    FREELB (rptr, fp);
 2010ae4:	80801117 	ldw	r2,68(r16)
 2010ae8:	100b883a 	mov	r5,r2
 2010aec:	e13ffe17 	ldw	r4,-8(fp)
 2010af0:	200a2840 	call	200a284 <_free_r>
 2010af4:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 2010af8:	200a13c0 	call	200a13c <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2010afc:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 2010b00:	200a15c0 	call	200a15c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 2010b04:	e0bffc17 	ldw	r2,-16(fp)
}
 2010b08:	e6ffff04 	addi	sp,fp,-4
 2010b0c:	dfc00217 	ldw	ra,8(sp)
 2010b10:	df000117 	ldw	fp,4(sp)
 2010b14:	dc000017 	ldw	r16,0(sp)
 2010b18:	dec00304 	addi	sp,sp,12
 2010b1c:	f800283a 	ret

02010b20 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2010b20:	defffe04 	addi	sp,sp,-8
 2010b24:	dfc00115 	stw	ra,4(sp)
 2010b28:	df000015 	stw	fp,0(sp)
 2010b2c:	d839883a 	mov	fp,sp
 2010b30:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 2010b34:	d0a00017 	ldw	r2,-32768(gp)
 2010b38:	180b883a 	mov	r5,r3
 2010b3c:	1009883a 	mov	r4,r2
 2010b40:	20109f40 	call	20109f4 <_fclose_r>
}
 2010b44:	e037883a 	mov	sp,fp
 2010b48:	dfc00117 	ldw	ra,4(sp)
 2010b4c:	df000017 	ldw	fp,0(sp)
 2010b50:	dec00204 	addi	sp,sp,8
 2010b54:	f800283a 	ret

02010b58 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010b58:	defff804 	addi	sp,sp,-32
 2010b5c:	dfc00715 	stw	ra,28(sp)
 2010b60:	df000615 	stw	fp,24(sp)
 2010b64:	df000604 	addi	fp,sp,24
 2010b68:	e13ffd15 	stw	r4,-12(fp)
 2010b6c:	e17ffe15 	stw	r5,-8(fp)
 2010b70:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 2010b74:	200b1e80 	call	200b1e8 <__locale_mb_cur_max>
 2010b78:	10800058 	cmpnei	r2,r2,1
 2010b7c:	10000a1e 	bne	r2,zero,2010ba8 <__fputwc+0x50>
 2010b80:	e0bffe17 	ldw	r2,-8(fp)
 2010b84:	0080080e 	bge	zero,r2,2010ba8 <__fputwc+0x50>
 2010b88:	e0bffe17 	ldw	r2,-8(fp)
 2010b8c:	10804008 	cmpgei	r2,r2,256
 2010b90:	1000051e 	bne	r2,zero,2010ba8 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 2010b94:	e0bffe17 	ldw	r2,-8(fp)
 2010b98:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 2010b9c:	00800044 	movi	r2,1
 2010ba0:	e0bffb15 	stw	r2,-20(fp)
 2010ba4:	00001406 	br	2010bf8 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 2010ba8:	e0bfff17 	ldw	r2,-4(fp)
 2010bac:	10c01704 	addi	r3,r2,92
 2010bb0:	e0bffc04 	addi	r2,fp,-16
 2010bb4:	180f883a 	mov	r7,r3
 2010bb8:	e1bffe17 	ldw	r6,-8(fp)
 2010bbc:	100b883a 	mov	r5,r2
 2010bc0:	e13ffd17 	ldw	r4,-12(fp)
 2010bc4:	201118c0 	call	201118c <_wcrtomb_r>
 2010bc8:	e0bffb15 	stw	r2,-20(fp)
 2010bcc:	e0bffb17 	ldw	r2,-20(fp)
 2010bd0:	10bfffd8 	cmpnei	r2,r2,-1
 2010bd4:	1000081e 	bne	r2,zero,2010bf8 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 2010bd8:	e0bfff17 	ldw	r2,-4(fp)
 2010bdc:	1080030b 	ldhu	r2,12(r2)
 2010be0:	10801014 	ori	r2,r2,64
 2010be4:	1007883a 	mov	r3,r2
 2010be8:	e0bfff17 	ldw	r2,-4(fp)
 2010bec:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 2010bf0:	00bfffc4 	movi	r2,-1
 2010bf4:	00005006 	br	2010d38 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 2010bf8:	e03ffa15 	stw	zero,-24(fp)
 2010bfc:	00004a06 	br	2010d28 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 2010c00:	e0bfff17 	ldw	r2,-4(fp)
 2010c04:	10800217 	ldw	r2,8(r2)
 2010c08:	10ffffc4 	addi	r3,r2,-1
 2010c0c:	e0bfff17 	ldw	r2,-4(fp)
 2010c10:	10c00215 	stw	r3,8(r2)
 2010c14:	e0bfff17 	ldw	r2,-4(fp)
 2010c18:	10800217 	ldw	r2,8(r2)
 2010c1c:	10002c0e 	bge	r2,zero,2010cd0 <__fputwc+0x178>
 2010c20:	e0bfff17 	ldw	r2,-4(fp)
 2010c24:	10c00217 	ldw	r3,8(r2)
 2010c28:	e0bfff17 	ldw	r2,-4(fp)
 2010c2c:	10800617 	ldw	r2,24(r2)
 2010c30:	18801c16 	blt	r3,r2,2010ca4 <__fputwc+0x14c>
 2010c34:	e0bfff17 	ldw	r2,-4(fp)
 2010c38:	10800017 	ldw	r2,0(r2)
 2010c3c:	e13ffc04 	addi	r4,fp,-16
 2010c40:	e0fffa17 	ldw	r3,-24(fp)
 2010c44:	20c7883a 	add	r3,r4,r3
 2010c48:	18c00003 	ldbu	r3,0(r3)
 2010c4c:	10c00005 	stb	r3,0(r2)
 2010c50:	e0bfff17 	ldw	r2,-4(fp)
 2010c54:	10800017 	ldw	r2,0(r2)
 2010c58:	10800003 	ldbu	r2,0(r2)
 2010c5c:	10803fcc 	andi	r2,r2,255
 2010c60:	108002a0 	cmpeqi	r2,r2,10
 2010c64:	1000091e 	bne	r2,zero,2010c8c <__fputwc+0x134>
 2010c68:	e0bfff17 	ldw	r2,-4(fp)
 2010c6c:	10800017 	ldw	r2,0(r2)
 2010c70:	11000044 	addi	r4,r2,1
 2010c74:	e0ffff17 	ldw	r3,-4(fp)
 2010c78:	19000015 	stw	r4,0(r3)
 2010c7c:	10800003 	ldbu	r2,0(r2)
 2010c80:	10803fcc 	andi	r2,r2,255
 2010c84:	10bfffe0 	cmpeqi	r2,r2,-1
 2010c88:	00002006 	br	2010d0c <__fputwc+0x1b4>
 2010c8c:	e1bfff17 	ldw	r6,-4(fp)
 2010c90:	01400284 	movi	r5,10
 2010c94:	e13ffd17 	ldw	r4,-12(fp)
 2010c98:	2010fe40 	call	2010fe4 <__swbuf_r>
 2010c9c:	10bfffe0 	cmpeqi	r2,r2,-1
 2010ca0:	00001a06 	br	2010d0c <__fputwc+0x1b4>
 2010ca4:	e0fffc04 	addi	r3,fp,-16
 2010ca8:	e0bffa17 	ldw	r2,-24(fp)
 2010cac:	1885883a 	add	r2,r3,r2
 2010cb0:	10800003 	ldbu	r2,0(r2)
 2010cb4:	10803fcc 	andi	r2,r2,255
 2010cb8:	e1bfff17 	ldw	r6,-4(fp)
 2010cbc:	100b883a 	mov	r5,r2
 2010cc0:	e13ffd17 	ldw	r4,-12(fp)
 2010cc4:	2010fe40 	call	2010fe4 <__swbuf_r>
 2010cc8:	10bfffe0 	cmpeqi	r2,r2,-1
 2010ccc:	00000f06 	br	2010d0c <__fputwc+0x1b4>
 2010cd0:	e0bfff17 	ldw	r2,-4(fp)
 2010cd4:	10800017 	ldw	r2,0(r2)
 2010cd8:	e13ffc04 	addi	r4,fp,-16
 2010cdc:	e0fffa17 	ldw	r3,-24(fp)
 2010ce0:	20c7883a 	add	r3,r4,r3
 2010ce4:	18c00003 	ldbu	r3,0(r3)
 2010ce8:	10c00005 	stb	r3,0(r2)
 2010cec:	e0bfff17 	ldw	r2,-4(fp)
 2010cf0:	10800017 	ldw	r2,0(r2)
 2010cf4:	11000044 	addi	r4,r2,1
 2010cf8:	e0ffff17 	ldw	r3,-4(fp)
 2010cfc:	19000015 	stw	r4,0(r3)
 2010d00:	10800003 	ldbu	r2,0(r2)
 2010d04:	10803fcc 	andi	r2,r2,255
 2010d08:	10bfffe0 	cmpeqi	r2,r2,-1
 2010d0c:	10803fcc 	andi	r2,r2,255
 2010d10:	10000226 	beq	r2,zero,2010d1c <__fputwc+0x1c4>
      return WEOF;
 2010d14:	00bfffc4 	movi	r2,-1
 2010d18:	00000706 	br	2010d38 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2010d1c:	e0bffa17 	ldw	r2,-24(fp)
 2010d20:	10800044 	addi	r2,r2,1
 2010d24:	e0bffa15 	stw	r2,-24(fp)
 2010d28:	e0fffa17 	ldw	r3,-24(fp)
 2010d2c:	e0bffb17 	ldw	r2,-20(fp)
 2010d30:	18bfb336 	bltu	r3,r2,2010c00 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2010d34:	e0bffe17 	ldw	r2,-8(fp)
}
 2010d38:	e037883a 	mov	sp,fp
 2010d3c:	dfc00117 	ldw	ra,4(sp)
 2010d40:	df000017 	ldw	fp,0(sp)
 2010d44:	dec00204 	addi	sp,sp,8
 2010d48:	f800283a 	ret

02010d4c <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010d4c:	defffa04 	addi	sp,sp,-24
 2010d50:	dfc00515 	stw	ra,20(sp)
 2010d54:	df000415 	stw	fp,16(sp)
 2010d58:	df000404 	addi	fp,sp,16
 2010d5c:	e13ffd15 	stw	r4,-12(fp)
 2010d60:	e17ffe15 	stw	r5,-8(fp)
 2010d64:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 2010d68:	e0bfff17 	ldw	r2,-4(fp)
 2010d6c:	1080030b 	ldhu	r2,12(r2)
 2010d70:	10bfffcc 	andi	r2,r2,65535
 2010d74:	1088000c 	andi	r2,r2,8192
 2010d78:	10000b1e 	bne	r2,zero,2010da8 <_fputwc_r+0x5c>
 2010d7c:	e0bfff17 	ldw	r2,-4(fp)
 2010d80:	1080030b 	ldhu	r2,12(r2)
 2010d84:	10880014 	ori	r2,r2,8192
 2010d88:	1007883a 	mov	r3,r2
 2010d8c:	e0bfff17 	ldw	r2,-4(fp)
 2010d90:	10c0030d 	sth	r3,12(r2)
 2010d94:	e0bfff17 	ldw	r2,-4(fp)
 2010d98:	10801917 	ldw	r2,100(r2)
 2010d9c:	10c80014 	ori	r3,r2,8192
 2010da0:	e0bfff17 	ldw	r2,-4(fp)
 2010da4:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 2010da8:	e1bfff17 	ldw	r6,-4(fp)
 2010dac:	e17ffe17 	ldw	r5,-8(fp)
 2010db0:	e13ffd17 	ldw	r4,-12(fp)
 2010db4:	2010b580 	call	2010b58 <__fputwc>
 2010db8:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2010dbc:	e0bffc17 	ldw	r2,-16(fp)
}
 2010dc0:	e037883a 	mov	sp,fp
 2010dc4:	dfc00117 	ldw	ra,4(sp)
 2010dc8:	df000017 	ldw	fp,0(sp)
 2010dcc:	dec00204 	addi	sp,sp,8
 2010dd0:	f800283a 	ret

02010dd4 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2010dd4:	defffa04 	addi	sp,sp,-24
 2010dd8:	dfc00515 	stw	ra,20(sp)
 2010ddc:	df000415 	stw	fp,16(sp)
 2010de0:	df000404 	addi	fp,sp,16
 2010de4:	e13ffe15 	stw	r4,-8(fp)
 2010de8:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2010dec:	d0a00017 	ldw	r2,-32768(gp)
 2010df0:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2010df4:	e0bffc17 	ldw	r2,-16(fp)
 2010df8:	e0bffd15 	stw	r2,-12(fp)
 2010dfc:	e0bffd17 	ldw	r2,-12(fp)
 2010e00:	10000526 	beq	r2,zero,2010e18 <fputwc+0x44>
 2010e04:	e0bffd17 	ldw	r2,-12(fp)
 2010e08:	10800e17 	ldw	r2,56(r2)
 2010e0c:	1000021e 	bne	r2,zero,2010e18 <fputwc+0x44>
 2010e10:	e13ffd17 	ldw	r4,-12(fp)
 2010e14:	200a0640 	call	200a064 <__sinit>
  return _fputwc_r (reent, wc, fp);
 2010e18:	e1bfff17 	ldw	r6,-4(fp)
 2010e1c:	e17ffe17 	ldw	r5,-8(fp)
 2010e20:	e13ffc17 	ldw	r4,-16(fp)
 2010e24:	2010d4c0 	call	2010d4c <_fputwc_r>
}
 2010e28:	e037883a 	mov	sp,fp
 2010e2c:	dfc00117 	ldw	ra,4(sp)
 2010e30:	df000017 	ldw	fp,0(sp)
 2010e34:	dec00204 	addi	sp,sp,8
 2010e38:	f800283a 	ret

02010e3c <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2010e3c:	defffa04 	addi	sp,sp,-24
 2010e40:	dfc00515 	stw	ra,20(sp)
 2010e44:	df000415 	stw	fp,16(sp)
 2010e48:	df000404 	addi	fp,sp,16
 2010e4c:	e13ffd15 	stw	r4,-12(fp)
 2010e50:	e17ffe15 	stw	r5,-8(fp)
 2010e54:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 2010e58:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2010e5c:	e17fff17 	ldw	r5,-4(fp)
 2010e60:	e13ffe17 	ldw	r4,-8(fp)
 2010e64:	201346c0 	call	201346c <fstat>
 2010e68:	e0bffc15 	stw	r2,-16(fp)
 2010e6c:	e0bffc17 	ldw	r2,-16(fp)
 2010e70:	10bfffd8 	cmpnei	r2,r2,-1
 2010e74:	1000051e 	bne	r2,zero,2010e8c <_fstat_r+0x50>
 2010e78:	d0a72e17 	ldw	r2,-25416(gp)
 2010e7c:	10000326 	beq	r2,zero,2010e8c <_fstat_r+0x50>
    ptr->_errno = errno;
 2010e80:	d0e72e17 	ldw	r3,-25416(gp)
 2010e84:	e0bffd17 	ldw	r2,-12(fp)
 2010e88:	10c00015 	stw	r3,0(r2)
  return ret;
 2010e8c:	e0bffc17 	ldw	r2,-16(fp)
}
 2010e90:	e037883a 	mov	sp,fp
 2010e94:	dfc00117 	ldw	ra,4(sp)
 2010e98:	df000017 	ldw	fp,0(sp)
 2010e9c:	dec00204 	addi	sp,sp,8
 2010ea0:	f800283a 	ret

02010ea4 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010ea4:	defffb04 	addi	sp,sp,-20
 2010ea8:	dfc00415 	stw	ra,16(sp)
 2010eac:	df000315 	stw	fp,12(sp)
 2010eb0:	df000304 	addi	fp,sp,12
 2010eb4:	e13ffe15 	stw	r4,-8(fp)
 2010eb8:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2010ebc:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 2010ec0:	e13fff17 	ldw	r4,-4(fp)
 2010ec4:	20135580 	call	2013558 <isatty>
 2010ec8:	e0bffd15 	stw	r2,-12(fp)
 2010ecc:	e0bffd17 	ldw	r2,-12(fp)
 2010ed0:	10bfffd8 	cmpnei	r2,r2,-1
 2010ed4:	1000051e 	bne	r2,zero,2010eec <_isatty_r+0x48>
 2010ed8:	d0a72e17 	ldw	r2,-25416(gp)
 2010edc:	10000326 	beq	r2,zero,2010eec <_isatty_r+0x48>
    ptr->_errno = errno;
 2010ee0:	d0e72e17 	ldw	r3,-25416(gp)
 2010ee4:	e0bffe17 	ldw	r2,-8(fp)
 2010ee8:	10c00015 	stw	r3,0(r2)
  return ret;
 2010eec:	e0bffd17 	ldw	r2,-12(fp)
}
 2010ef0:	e037883a 	mov	sp,fp
 2010ef4:	dfc00117 	ldw	ra,4(sp)
 2010ef8:	df000017 	ldw	fp,0(sp)
 2010efc:	dec00204 	addi	sp,sp,8
 2010f00:	f800283a 	ret

02010f04 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2010f04:	defff904 	addi	sp,sp,-28
 2010f08:	dfc00615 	stw	ra,24(sp)
 2010f0c:	df000515 	stw	fp,20(sp)
 2010f10:	df000504 	addi	fp,sp,20
 2010f14:	e13ffc15 	stw	r4,-16(fp)
 2010f18:	e17ffd15 	stw	r5,-12(fp)
 2010f1c:	e1bffe15 	stw	r6,-8(fp)
 2010f20:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2010f24:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2010f28:	e1bfff17 	ldw	r6,-4(fp)
 2010f2c:	e17ffe17 	ldw	r5,-8(fp)
 2010f30:	e13ffd17 	ldw	r4,-12(fp)
 2010f34:	20137240 	call	2013724 <lseek>
 2010f38:	e0bffb15 	stw	r2,-20(fp)
 2010f3c:	e0bffb17 	ldw	r2,-20(fp)
 2010f40:	10bfffd8 	cmpnei	r2,r2,-1
 2010f44:	1000051e 	bne	r2,zero,2010f5c <_lseek_r+0x58>
 2010f48:	d0a72e17 	ldw	r2,-25416(gp)
 2010f4c:	10000326 	beq	r2,zero,2010f5c <_lseek_r+0x58>
    ptr->_errno = errno;
 2010f50:	d0e72e17 	ldw	r3,-25416(gp)
 2010f54:	e0bffc17 	ldw	r2,-16(fp)
 2010f58:	10c00015 	stw	r3,0(r2)
  return ret;
 2010f5c:	e0bffb17 	ldw	r2,-20(fp)
}
 2010f60:	e037883a 	mov	sp,fp
 2010f64:	dfc00117 	ldw	ra,4(sp)
 2010f68:	df000017 	ldw	fp,0(sp)
 2010f6c:	dec00204 	addi	sp,sp,8
 2010f70:	f800283a 	ret

02010f74 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 2010f74:	defff904 	addi	sp,sp,-28
 2010f78:	dfc00615 	stw	ra,24(sp)
 2010f7c:	df000515 	stw	fp,20(sp)
 2010f80:	df000504 	addi	fp,sp,20
 2010f84:	e13ffc15 	stw	r4,-16(fp)
 2010f88:	e17ffd15 	stw	r5,-12(fp)
 2010f8c:	e1bffe15 	stw	r6,-8(fp)
 2010f90:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2010f94:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 2010f98:	e1bfff17 	ldw	r6,-4(fp)
 2010f9c:	e17ffe17 	ldw	r5,-8(fp)
 2010fa0:	e13ffd17 	ldw	r4,-12(fp)
 2010fa4:	20138f00 	call	20138f0 <read>
 2010fa8:	e0bffb15 	stw	r2,-20(fp)
 2010fac:	e0bffb17 	ldw	r2,-20(fp)
 2010fb0:	10bfffd8 	cmpnei	r2,r2,-1
 2010fb4:	1000051e 	bne	r2,zero,2010fcc <_read_r+0x58>
 2010fb8:	d0a72e17 	ldw	r2,-25416(gp)
 2010fbc:	10000326 	beq	r2,zero,2010fcc <_read_r+0x58>
    ptr->_errno = errno;
 2010fc0:	d0e72e17 	ldw	r3,-25416(gp)
 2010fc4:	e0bffc17 	ldw	r2,-16(fp)
 2010fc8:	10c00015 	stw	r3,0(r2)
  return ret;
 2010fcc:	e0bffb17 	ldw	r2,-20(fp)
}
 2010fd0:	e037883a 	mov	sp,fp
 2010fd4:	dfc00117 	ldw	ra,4(sp)
 2010fd8:	df000017 	ldw	fp,0(sp)
 2010fdc:	dec00204 	addi	sp,sp,8
 2010fe0:	f800283a 	ret

02010fe4 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2010fe4:	defff904 	addi	sp,sp,-28
 2010fe8:	dfc00615 	stw	ra,24(sp)
 2010fec:	df000515 	stw	fp,20(sp)
 2010ff0:	dc800415 	stw	r18,16(sp)
 2010ff4:	dc400315 	stw	r17,12(sp)
 2010ff8:	dc000215 	stw	r16,8(sp)
 2010ffc:	df000504 	addi	fp,sp,20
 2011000:	e13ffc15 	stw	r4,-16(fp)
 2011004:	2825883a 	mov	r18,r5
 2011008:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 201100c:	e0bffc17 	ldw	r2,-16(fp)
 2011010:	e0bffb15 	stw	r2,-20(fp)
 2011014:	e0bffb17 	ldw	r2,-20(fp)
 2011018:	10000526 	beq	r2,zero,2011030 <__swbuf_r+0x4c>
 201101c:	e0bffb17 	ldw	r2,-20(fp)
 2011020:	10800e17 	ldw	r2,56(r2)
 2011024:	1000021e 	bne	r2,zero,2011030 <__swbuf_r+0x4c>
 2011028:	e13ffb17 	ldw	r4,-20(fp)
 201102c:	200a0640 	call	200a064 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2011030:	80800617 	ldw	r2,24(r16)
 2011034:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 2011038:	8080030b 	ldhu	r2,12(r16)
 201103c:	10bfffcc 	andi	r2,r2,65535
 2011040:	1080020c 	andi	r2,r2,8
 2011044:	10000226 	beq	r2,zero,2011050 <__swbuf_r+0x6c>
 2011048:	80800417 	ldw	r2,16(r16)
 201104c:	1000061e 	bne	r2,zero,2011068 <__swbuf_r+0x84>
 2011050:	800b883a 	mov	r5,r16
 2011054:	e13ffc17 	ldw	r4,-16(fp)
 2011058:	20078140 	call	2007814 <__swsetup_r>
 201105c:	10000226 	beq	r2,zero,2011068 <__swbuf_r+0x84>
    return EOF;
 2011060:	00bfffc4 	movi	r2,-1
 2011064:	00003106 	br	201112c <__swbuf_r+0x148>
  c = (unsigned char) c;
 2011068:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 201106c:	8080030b 	ldhu	r2,12(r16)
 2011070:	10bfffcc 	andi	r2,r2,65535
 2011074:	1088000c 	andi	r2,r2,8192
 2011078:	1000071e 	bne	r2,zero,2011098 <__swbuf_r+0xb4>
 201107c:	8080030b 	ldhu	r2,12(r16)
 2011080:	10880014 	ori	r2,r2,8192
 2011084:	8080030d 	sth	r2,12(r16)
 2011088:	80c01917 	ldw	r3,100(r16)
 201108c:	00b7ffc4 	movi	r2,-8193
 2011090:	1884703a 	and	r2,r3,r2
 2011094:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 2011098:	80800017 	ldw	r2,0(r16)
 201109c:	1007883a 	mov	r3,r2
 20110a0:	80800417 	ldw	r2,16(r16)
 20110a4:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 20110a8:	80800517 	ldw	r2,20(r16)
 20110ac:	88800716 	blt	r17,r2,20110cc <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 20110b0:	800b883a 	mov	r5,r16
 20110b4:	e13ffc17 	ldw	r4,-16(fp)
 20110b8:	2009be40 	call	2009be4 <_fflush_r>
 20110bc:	10000226 	beq	r2,zero,20110c8 <__swbuf_r+0xe4>
	return EOF;
 20110c0:	00bfffc4 	movi	r2,-1
 20110c4:	00001906 	br	201112c <__swbuf_r+0x148>
      n = 0;
 20110c8:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 20110cc:	80800217 	ldw	r2,8(r16)
 20110d0:	10bfffc4 	addi	r2,r2,-1
 20110d4:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 20110d8:	80800017 	ldw	r2,0(r16)
 20110dc:	10c00044 	addi	r3,r2,1
 20110e0:	80c00015 	stw	r3,0(r16)
 20110e4:	9007883a 	mov	r3,r18
 20110e8:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 20110ec:	8c400044 	addi	r17,r17,1
 20110f0:	80800517 	ldw	r2,20(r16)
 20110f4:	88800626 	beq	r17,r2,2011110 <__swbuf_r+0x12c>
 20110f8:	8080030b 	ldhu	r2,12(r16)
 20110fc:	10bfffcc 	andi	r2,r2,65535
 2011100:	1080004c 	andi	r2,r2,1
 2011104:	10000826 	beq	r2,zero,2011128 <__swbuf_r+0x144>
 2011108:	90800298 	cmpnei	r2,r18,10
 201110c:	1000061e 	bne	r2,zero,2011128 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2011110:	800b883a 	mov	r5,r16
 2011114:	e13ffc17 	ldw	r4,-16(fp)
 2011118:	2009be40 	call	2009be4 <_fflush_r>
 201111c:	10000226 	beq	r2,zero,2011128 <__swbuf_r+0x144>
      return EOF;
 2011120:	00bfffc4 	movi	r2,-1
 2011124:	00000106 	br	201112c <__swbuf_r+0x148>
  return c;
 2011128:	9005883a 	mov	r2,r18
}
 201112c:	e6fffd04 	addi	sp,fp,-12
 2011130:	dfc00417 	ldw	ra,16(sp)
 2011134:	df000317 	ldw	fp,12(sp)
 2011138:	dc800217 	ldw	r18,8(sp)
 201113c:	dc400117 	ldw	r17,4(sp)
 2011140:	dc000017 	ldw	r16,0(sp)
 2011144:	dec00504 	addi	sp,sp,20
 2011148:	f800283a 	ret

0201114c <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 201114c:	defffe04 	addi	sp,sp,-8
 2011150:	dfc00115 	stw	ra,4(sp)
 2011154:	df000015 	stw	fp,0(sp)
 2011158:	d839883a 	mov	fp,sp
 201115c:	2007883a 	mov	r3,r4
 2011160:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2011164:	d0a00017 	ldw	r2,-32768(gp)
 2011168:	200d883a 	mov	r6,r4
 201116c:	180b883a 	mov	r5,r3
 2011170:	1009883a 	mov	r4,r2
 2011174:	2010fe40 	call	2010fe4 <__swbuf_r>
}
 2011178:	e037883a 	mov	sp,fp
 201117c:	dfc00117 	ldw	ra,4(sp)
 2011180:	df000017 	ldw	fp,0(sp)
 2011184:	dec00204 	addi	sp,sp,8
 2011188:	f800283a 	ret

0201118c <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 201118c:	defff404 	addi	sp,sp,-48
 2011190:	dfc00b15 	stw	ra,44(sp)
 2011194:	df000a15 	stw	fp,40(sp)
 2011198:	dc000915 	stw	r16,36(sp)
 201119c:	df000a04 	addi	fp,sp,40
 20111a0:	e13ffb15 	stw	r4,-20(fp)
 20111a4:	e17ffc15 	stw	r5,-16(fp)
 20111a8:	e1bffd15 	stw	r6,-12(fp)
 20111ac:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 20111b0:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 20111b4:	e0bffc17 	ldw	r2,-16(fp)
 20111b8:	10000d1e 	bne	r2,zero,20111f0 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 20111bc:	d4200517 	ldw	r16,-32748(gp)
 20111c0:	200b1c40 	call	200b1c4 <__locale_charset>
 20111c4:	1009883a 	mov	r4,r2
 20111c8:	e0fff804 	addi	r3,fp,-32
 20111cc:	e0bffe17 	ldw	r2,-8(fp)
 20111d0:	d8800015 	stw	r2,0(sp)
 20111d4:	200f883a 	mov	r7,r4
 20111d8:	000d883a 	mov	r6,zero
 20111dc:	180b883a 	mov	r5,r3
 20111e0:	e13ffb17 	ldw	r4,-20(fp)
 20111e4:	803ee83a 	callr	r16
 20111e8:	e0bff715 	stw	r2,-36(fp)
 20111ec:	00000b06 	br	201121c <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 20111f0:	d4200517 	ldw	r16,-32748(gp)
 20111f4:	200b1c40 	call	200b1c4 <__locale_charset>
 20111f8:	1007883a 	mov	r3,r2
 20111fc:	e0bffe17 	ldw	r2,-8(fp)
 2011200:	d8800015 	stw	r2,0(sp)
 2011204:	180f883a 	mov	r7,r3
 2011208:	e1bffd17 	ldw	r6,-12(fp)
 201120c:	e17ffc17 	ldw	r5,-16(fp)
 2011210:	e13ffb17 	ldw	r4,-20(fp)
 2011214:	803ee83a 	callr	r16
 2011218:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 201121c:	e0bff717 	ldw	r2,-36(fp)
 2011220:	10bfffd8 	cmpnei	r2,r2,-1
 2011224:	1000071e 	bne	r2,zero,2011244 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 2011228:	e0bffe17 	ldw	r2,-8(fp)
 201122c:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2011230:	e0bffb17 	ldw	r2,-20(fp)
 2011234:	00c02284 	movi	r3,138
 2011238:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 201123c:	00bfffc4 	movi	r2,-1
 2011240:	00000106 	br	2011248 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2011244:	e0bff717 	ldw	r2,-36(fp)
}
 2011248:	e6ffff04 	addi	sp,fp,-4
 201124c:	dfc00217 	ldw	ra,8(sp)
 2011250:	df000117 	ldw	fp,4(sp)
 2011254:	dc000017 	ldw	r16,0(sp)
 2011258:	dec00304 	addi	sp,sp,12
 201125c:	f800283a 	ret

02011260 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2011260:	defff404 	addi	sp,sp,-48
 2011264:	dfc00b15 	stw	ra,44(sp)
 2011268:	df000a15 	stw	fp,40(sp)
 201126c:	dc000915 	stw	r16,36(sp)
 2011270:	df000a04 	addi	fp,sp,40
 2011274:	e13ffc15 	stw	r4,-16(fp)
 2011278:	e17ffd15 	stw	r5,-12(fp)
 201127c:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 2011280:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 2011284:	d0a00017 	ldw	r2,-32768(gp)
 2011288:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 201128c:	e0bffc17 	ldw	r2,-16(fp)
 2011290:	10000d1e 	bne	r2,zero,20112c8 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 2011294:	d4200517 	ldw	r16,-32748(gp)
 2011298:	200b1c40 	call	200b1c4 <__locale_charset>
 201129c:	1009883a 	mov	r4,r2
 20112a0:	e0fff904 	addi	r3,fp,-28
 20112a4:	e0bffe17 	ldw	r2,-8(fp)
 20112a8:	d8800015 	stw	r2,0(sp)
 20112ac:	200f883a 	mov	r7,r4
 20112b0:	000d883a 	mov	r6,zero
 20112b4:	180b883a 	mov	r5,r3
 20112b8:	e13ff817 	ldw	r4,-32(fp)
 20112bc:	803ee83a 	callr	r16
 20112c0:	e0bff715 	stw	r2,-36(fp)
 20112c4:	00000b06 	br	20112f4 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 20112c8:	d4200517 	ldw	r16,-32748(gp)
 20112cc:	200b1c40 	call	200b1c4 <__locale_charset>
 20112d0:	1007883a 	mov	r3,r2
 20112d4:	e0bffe17 	ldw	r2,-8(fp)
 20112d8:	d8800015 	stw	r2,0(sp)
 20112dc:	180f883a 	mov	r7,r3
 20112e0:	e1bffd17 	ldw	r6,-12(fp)
 20112e4:	e17ffc17 	ldw	r5,-16(fp)
 20112e8:	e13ff817 	ldw	r4,-32(fp)
 20112ec:	803ee83a 	callr	r16
 20112f0:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 20112f4:	e0bff717 	ldw	r2,-36(fp)
 20112f8:	10bfffd8 	cmpnei	r2,r2,-1
 20112fc:	1000071e 	bne	r2,zero,201131c <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2011300:	e0bffe17 	ldw	r2,-8(fp)
 2011304:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 2011308:	e0bff817 	ldw	r2,-32(fp)
 201130c:	00c02284 	movi	r3,138
 2011310:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2011314:	00bfffc4 	movi	r2,-1
 2011318:	00000106 	br	2011320 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 201131c:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2011320:	e6ffff04 	addi	sp,fp,-4
 2011324:	dfc00217 	ldw	ra,8(sp)
 2011328:	df000117 	ldw	fp,4(sp)
 201132c:	dc000017 	ldw	r16,0(sp)
 2011330:	dec00304 	addi	sp,sp,12
 2011334:	f800283a 	ret

02011338 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 2011338:	defff804 	addi	sp,sp,-32
 201133c:	dfc00715 	stw	ra,28(sp)
 2011340:	df000615 	stw	fp,24(sp)
 2011344:	dc000515 	stw	r16,20(sp)
 2011348:	df000604 	addi	fp,sp,24
 201134c:	e13ffb15 	stw	r4,-20(fp)
 2011350:	e17ffc15 	stw	r5,-16(fp)
 2011354:	e1bffd15 	stw	r6,-12(fp)
 2011358:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 201135c:	d4200517 	ldw	r16,-32748(gp)
 2011360:	200b1c40 	call	200b1c4 <__locale_charset>
 2011364:	1007883a 	mov	r3,r2
 2011368:	e0bffe17 	ldw	r2,-8(fp)
 201136c:	d8800015 	stw	r2,0(sp)
 2011370:	180f883a 	mov	r7,r3
 2011374:	e1bffd17 	ldw	r6,-12(fp)
 2011378:	e17ffc17 	ldw	r5,-16(fp)
 201137c:	e13ffb17 	ldw	r4,-20(fp)
 2011380:	803ee83a 	callr	r16
}
 2011384:	e6ffff04 	addi	sp,fp,-4
 2011388:	dfc00217 	ldw	ra,8(sp)
 201138c:	df000117 	ldw	fp,4(sp)
 2011390:	dc000017 	ldw	r16,0(sp)
 2011394:	dec00304 	addi	sp,sp,12
 2011398:	f800283a 	ret

0201139c <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 201139c:	defffa04 	addi	sp,sp,-24
 20113a0:	df000515 	stw	fp,20(sp)
 20113a4:	df000504 	addi	fp,sp,20
 20113a8:	e13ffc15 	stw	r4,-16(fp)
 20113ac:	e17ffd15 	stw	r5,-12(fp)
 20113b0:	e1bffe15 	stw	r6,-8(fp)
 20113b4:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 20113b8:	e0bffe17 	ldw	r2,-8(fp)
 20113bc:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 20113c0:	e0bffd17 	ldw	r2,-12(fp)
 20113c4:	1000021e 	bne	r2,zero,20113d0 <__ascii_wctomb+0x34>
    return 0;
 20113c8:	0005883a 	mov	r2,zero
 20113cc:	00000d06 	br	2011404 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 20113d0:	e0bffb17 	ldw	r2,-20(fp)
 20113d4:	10804030 	cmpltui	r2,r2,256
 20113d8:	1000051e 	bne	r2,zero,20113f0 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 20113dc:	e0bffc17 	ldw	r2,-16(fp)
 20113e0:	00c02284 	movi	r3,138
 20113e4:	10c00015 	stw	r3,0(r2)
      return -1;
 20113e8:	00bfffc4 	movi	r2,-1
 20113ec:	00000506 	br	2011404 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 20113f0:	e0bffb17 	ldw	r2,-20(fp)
 20113f4:	1007883a 	mov	r3,r2
 20113f8:	e0bffd17 	ldw	r2,-12(fp)
 20113fc:	10c00005 	stb	r3,0(r2)
  return 1;
 2011400:	00800044 	movi	r2,1
}
 2011404:	e037883a 	mov	sp,fp
 2011408:	df000017 	ldw	fp,0(sp)
 201140c:	dec00104 	addi	sp,sp,4
 2011410:	f800283a 	ret

02011414 <__udivdi3>:
 2011414:	defff504 	addi	sp,sp,-44
 2011418:	dcc00415 	stw	r19,16(sp)
 201141c:	dc000115 	stw	r16,4(sp)
 2011420:	dfc00a15 	stw	ra,40(sp)
 2011424:	df000915 	stw	fp,36(sp)
 2011428:	ddc00815 	stw	r23,32(sp)
 201142c:	dd800715 	stw	r22,28(sp)
 2011430:	dd400615 	stw	r21,24(sp)
 2011434:	dd000515 	stw	r20,20(sp)
 2011438:	dc800315 	stw	r18,12(sp)
 201143c:	dc400215 	stw	r17,8(sp)
 2011440:	2027883a 	mov	r19,r4
 2011444:	2821883a 	mov	r16,r5
 2011448:	3800411e 	bne	r7,zero,2011550 <__udivdi3+0x13c>
 201144c:	3023883a 	mov	r17,r6
 2011450:	2025883a 	mov	r18,r4
 2011454:	2980522e 	bgeu	r5,r6,20115a0 <__udivdi3+0x18c>
 2011458:	00bfffd4 	movui	r2,65535
 201145c:	282d883a 	mov	r22,r5
 2011460:	1180a836 	bltu	r2,r6,2011704 <__udivdi3+0x2f0>
 2011464:	00803fc4 	movi	r2,255
 2011468:	1185803a 	cmpltu	r2,r2,r6
 201146c:	100490fa 	slli	r2,r2,3
 2011470:	3086d83a 	srl	r3,r6,r2
 2011474:	010080b4 	movhi	r4,514
 2011478:	213a7d44 	addi	r4,r4,-5643
 201147c:	20c7883a 	add	r3,r4,r3
 2011480:	18c00003 	ldbu	r3,0(r3)
 2011484:	1885883a 	add	r2,r3,r2
 2011488:	00c00804 	movi	r3,32
 201148c:	1887c83a 	sub	r3,r3,r2
 2011490:	18000526 	beq	r3,zero,20114a8 <__udivdi3+0x94>
 2011494:	80e0983a 	sll	r16,r16,r3
 2011498:	9884d83a 	srl	r2,r19,r2
 201149c:	30e2983a 	sll	r17,r6,r3
 20114a0:	98e4983a 	sll	r18,r19,r3
 20114a4:	142cb03a 	or	r22,r2,r16
 20114a8:	882ad43a 	srli	r21,r17,16
 20114ac:	b009883a 	mov	r4,r22
 20114b0:	8d3fffcc 	andi	r20,r17,65535
 20114b4:	a80b883a 	mov	r5,r21
 20114b8:	2004c040 	call	2004c04 <__umodsi3>
 20114bc:	b009883a 	mov	r4,r22
 20114c0:	a80b883a 	mov	r5,r21
 20114c4:	1027883a 	mov	r19,r2
 20114c8:	2004ba00 	call	2004ba0 <__udivsi3>
 20114cc:	102d883a 	mov	r22,r2
 20114d0:	9826943a 	slli	r19,r19,16
 20114d4:	9004d43a 	srli	r2,r18,16
 20114d8:	a5a1383a 	mul	r16,r20,r22
 20114dc:	14c4b03a 	or	r2,r2,r19
 20114e0:	1400052e 	bgeu	r2,r16,20114f8 <__udivdi3+0xe4>
 20114e4:	1445883a 	add	r2,r2,r17
 20114e8:	b0ffffc4 	addi	r3,r22,-1
 20114ec:	14400136 	bltu	r2,r17,20114f4 <__udivdi3+0xe0>
 20114f0:	14012336 	bltu	r2,r16,2011980 <__udivdi3+0x56c>
 20114f4:	182d883a 	mov	r22,r3
 20114f8:	1421c83a 	sub	r16,r2,r16
 20114fc:	a80b883a 	mov	r5,r21
 2011500:	8009883a 	mov	r4,r16
 2011504:	2004c040 	call	2004c04 <__umodsi3>
 2011508:	1027883a 	mov	r19,r2
 201150c:	a80b883a 	mov	r5,r21
 2011510:	8009883a 	mov	r4,r16
 2011514:	2004ba00 	call	2004ba0 <__udivsi3>
 2011518:	9826943a 	slli	r19,r19,16
 201151c:	a0a9383a 	mul	r20,r20,r2
 2011520:	94bfffcc 	andi	r18,r18,65535
 2011524:	94e4b03a 	or	r18,r18,r19
 2011528:	9500052e 	bgeu	r18,r20,2011540 <__udivdi3+0x12c>
 201152c:	8ca5883a 	add	r18,r17,r18
 2011530:	10ffffc4 	addi	r3,r2,-1
 2011534:	9440f136 	bltu	r18,r17,20118fc <__udivdi3+0x4e8>
 2011538:	9500f02e 	bgeu	r18,r20,20118fc <__udivdi3+0x4e8>
 201153c:	10bfff84 	addi	r2,r2,-2
 2011540:	b00c943a 	slli	r6,r22,16
 2011544:	0007883a 	mov	r3,zero
 2011548:	3084b03a 	or	r2,r6,r2
 201154c:	00005906 	br	20116b4 <__udivdi3+0x2a0>
 2011550:	29c05636 	bltu	r5,r7,20116ac <__udivdi3+0x298>
 2011554:	00bfffd4 	movui	r2,65535
 2011558:	11c0622e 	bgeu	r2,r7,20116e4 <__udivdi3+0x2d0>
 201155c:	00804034 	movhi	r2,256
 2011560:	10bfffc4 	addi	r2,r2,-1
 2011564:	11c0ee36 	bltu	r2,r7,2011920 <__udivdi3+0x50c>
 2011568:	00800404 	movi	r2,16
 201156c:	3886d83a 	srl	r3,r7,r2
 2011570:	010080b4 	movhi	r4,514
 2011574:	213a7d44 	addi	r4,r4,-5643
 2011578:	20c7883a 	add	r3,r4,r3
 201157c:	18c00003 	ldbu	r3,0(r3)
 2011580:	05400804 	movi	r21,32
 2011584:	1885883a 	add	r2,r3,r2
 2011588:	a8abc83a 	sub	r21,r21,r2
 201158c:	a800621e 	bne	r21,zero,2011718 <__udivdi3+0x304>
 2011590:	3c00e936 	bltu	r7,r16,2011938 <__udivdi3+0x524>
 2011594:	9985403a 	cmpgeu	r2,r19,r6
 2011598:	0007883a 	mov	r3,zero
 201159c:	00004506 	br	20116b4 <__udivdi3+0x2a0>
 20115a0:	3000041e 	bne	r6,zero,20115b4 <__udivdi3+0x1a0>
 20115a4:	000b883a 	mov	r5,zero
 20115a8:	01000044 	movi	r4,1
 20115ac:	2004ba00 	call	2004ba0 <__udivsi3>
 20115b0:	1023883a 	mov	r17,r2
 20115b4:	00bfffd4 	movui	r2,65535
 20115b8:	14404e2e 	bgeu	r2,r17,20116f4 <__udivdi3+0x2e0>
 20115bc:	00804034 	movhi	r2,256
 20115c0:	10bfffc4 	addi	r2,r2,-1
 20115c4:	1440d836 	bltu	r2,r17,2011928 <__udivdi3+0x514>
 20115c8:	00800404 	movi	r2,16
 20115cc:	8886d83a 	srl	r3,r17,r2
 20115d0:	010080b4 	movhi	r4,514
 20115d4:	213a7d44 	addi	r4,r4,-5643
 20115d8:	20c7883a 	add	r3,r4,r3
 20115dc:	18c00003 	ldbu	r3,0(r3)
 20115e0:	1885883a 	add	r2,r3,r2
 20115e4:	00c00804 	movi	r3,32
 20115e8:	1887c83a 	sub	r3,r3,r2
 20115ec:	18008f1e 	bne	r3,zero,201182c <__udivdi3+0x418>
 20115f0:	882ad43a 	srli	r21,r17,16
 20115f4:	8461c83a 	sub	r16,r16,r17
 20115f8:	8d3fffcc 	andi	r20,r17,65535
 20115fc:	00c00044 	movi	r3,1
 2011600:	8009883a 	mov	r4,r16
 2011604:	a80b883a 	mov	r5,r21
 2011608:	d8c00015 	stw	r3,0(sp)
 201160c:	2004c040 	call	2004c04 <__umodsi3>
 2011610:	8009883a 	mov	r4,r16
 2011614:	a80b883a 	mov	r5,r21
 2011618:	1027883a 	mov	r19,r2
 201161c:	2004ba00 	call	2004ba0 <__udivsi3>
 2011620:	9826943a 	slli	r19,r19,16
 2011624:	9008d43a 	srli	r4,r18,16
 2011628:	1521383a 	mul	r16,r2,r20
 201162c:	102d883a 	mov	r22,r2
 2011630:	24c8b03a 	or	r4,r4,r19
 2011634:	d8c00017 	ldw	r3,0(sp)
 2011638:	2400052e 	bgeu	r4,r16,2011650 <__udivdi3+0x23c>
 201163c:	2449883a 	add	r4,r4,r17
 2011640:	b0bfffc4 	addi	r2,r22,-1
 2011644:	24400136 	bltu	r4,r17,201164c <__udivdi3+0x238>
 2011648:	2400ca36 	bltu	r4,r16,2011974 <__udivdi3+0x560>
 201164c:	102d883a 	mov	r22,r2
 2011650:	2421c83a 	sub	r16,r4,r16
 2011654:	a80b883a 	mov	r5,r21
 2011658:	8009883a 	mov	r4,r16
 201165c:	d8c00015 	stw	r3,0(sp)
 2011660:	2004c040 	call	2004c04 <__umodsi3>
 2011664:	1027883a 	mov	r19,r2
 2011668:	a80b883a 	mov	r5,r21
 201166c:	8009883a 	mov	r4,r16
 2011670:	2004ba00 	call	2004ba0 <__udivsi3>
 2011674:	9826943a 	slli	r19,r19,16
 2011678:	1529383a 	mul	r20,r2,r20
 201167c:	94bfffcc 	andi	r18,r18,65535
 2011680:	94e4b03a 	or	r18,r18,r19
 2011684:	d8c00017 	ldw	r3,0(sp)
 2011688:	9500052e 	bgeu	r18,r20,20116a0 <__udivdi3+0x28c>
 201168c:	8ca5883a 	add	r18,r17,r18
 2011690:	113fffc4 	addi	r4,r2,-1
 2011694:	94409736 	bltu	r18,r17,20118f4 <__udivdi3+0x4e0>
 2011698:	9500962e 	bgeu	r18,r20,20118f4 <__udivdi3+0x4e0>
 201169c:	10bfff84 	addi	r2,r2,-2
 20116a0:	b00c943a 	slli	r6,r22,16
 20116a4:	3084b03a 	or	r2,r6,r2
 20116a8:	00000206 	br	20116b4 <__udivdi3+0x2a0>
 20116ac:	0007883a 	mov	r3,zero
 20116b0:	0005883a 	mov	r2,zero
 20116b4:	dfc00a17 	ldw	ra,40(sp)
 20116b8:	df000917 	ldw	fp,36(sp)
 20116bc:	ddc00817 	ldw	r23,32(sp)
 20116c0:	dd800717 	ldw	r22,28(sp)
 20116c4:	dd400617 	ldw	r21,24(sp)
 20116c8:	dd000517 	ldw	r20,20(sp)
 20116cc:	dcc00417 	ldw	r19,16(sp)
 20116d0:	dc800317 	ldw	r18,12(sp)
 20116d4:	dc400217 	ldw	r17,8(sp)
 20116d8:	dc000117 	ldw	r16,4(sp)
 20116dc:	dec00b04 	addi	sp,sp,44
 20116e0:	f800283a 	ret
 20116e4:	00803fc4 	movi	r2,255
 20116e8:	11c5803a 	cmpltu	r2,r2,r7
 20116ec:	100490fa 	slli	r2,r2,3
 20116f0:	003f9e06 	br	201156c <__udivdi3+0x158>
 20116f4:	00803fc4 	movi	r2,255
 20116f8:	1445803a 	cmpltu	r2,r2,r17
 20116fc:	100490fa 	slli	r2,r2,3
 2011700:	003fb206 	br	20115cc <__udivdi3+0x1b8>
 2011704:	00804034 	movhi	r2,256
 2011708:	10bfffc4 	addi	r2,r2,-1
 201170c:	11808836 	bltu	r2,r6,2011930 <__udivdi3+0x51c>
 2011710:	00800404 	movi	r2,16
 2011714:	003f5606 	br	2011470 <__udivdi3+0x5c>
 2011718:	30aed83a 	srl	r23,r6,r2
 201171c:	3d4e983a 	sll	r7,r7,r21
 2011720:	80acd83a 	srl	r22,r16,r2
 2011724:	9884d83a 	srl	r2,r19,r2
 2011728:	3deeb03a 	or	r23,r7,r23
 201172c:	b824d43a 	srli	r18,r23,16
 2011730:	8560983a 	sll	r16,r16,r21
 2011734:	b009883a 	mov	r4,r22
 2011738:	900b883a 	mov	r5,r18
 201173c:	3568983a 	sll	r20,r6,r21
 2011740:	1420b03a 	or	r16,r2,r16
 2011744:	2004c040 	call	2004c04 <__umodsi3>
 2011748:	b009883a 	mov	r4,r22
 201174c:	900b883a 	mov	r5,r18
 2011750:	1023883a 	mov	r17,r2
 2011754:	2004ba00 	call	2004ba0 <__udivsi3>
 2011758:	8808943a 	slli	r4,r17,16
 201175c:	bf3fffcc 	andi	fp,r23,65535
 2011760:	8006d43a 	srli	r3,r16,16
 2011764:	e0a3383a 	mul	r17,fp,r2
 2011768:	100d883a 	mov	r6,r2
 201176c:	1906b03a 	or	r3,r3,r4
 2011770:	1c40042e 	bgeu	r3,r17,2011784 <__udivdi3+0x370>
 2011774:	1dc7883a 	add	r3,r3,r23
 2011778:	10bfffc4 	addi	r2,r2,-1
 201177c:	1dc0752e 	bgeu	r3,r23,2011954 <__udivdi3+0x540>
 2011780:	100d883a 	mov	r6,r2
 2011784:	1c63c83a 	sub	r17,r3,r17
 2011788:	900b883a 	mov	r5,r18
 201178c:	8809883a 	mov	r4,r17
 2011790:	d9800015 	stw	r6,0(sp)
 2011794:	2004c040 	call	2004c04 <__umodsi3>
 2011798:	102d883a 	mov	r22,r2
 201179c:	8809883a 	mov	r4,r17
 20117a0:	900b883a 	mov	r5,r18
 20117a4:	2004ba00 	call	2004ba0 <__udivsi3>
 20117a8:	b02c943a 	slli	r22,r22,16
 20117ac:	e089383a 	mul	r4,fp,r2
 20117b0:	843fffcc 	andi	r16,r16,65535
 20117b4:	85a0b03a 	or	r16,r16,r22
 20117b8:	d9800017 	ldw	r6,0(sp)
 20117bc:	8100042e 	bgeu	r16,r4,20117d0 <__udivdi3+0x3bc>
 20117c0:	85e1883a 	add	r16,r16,r23
 20117c4:	10ffffc4 	addi	r3,r2,-1
 20117c8:	85c05e2e 	bgeu	r16,r23,2011944 <__udivdi3+0x530>
 20117cc:	1805883a 	mov	r2,r3
 20117d0:	300c943a 	slli	r6,r6,16
 20117d4:	a17fffcc 	andi	r5,r20,65535
 20117d8:	a028d43a 	srli	r20,r20,16
 20117dc:	3084b03a 	or	r2,r6,r2
 20117e0:	10ffffcc 	andi	r3,r2,65535
 20117e4:	100cd43a 	srli	r6,r2,16
 20117e8:	194f383a 	mul	r7,r3,r5
 20117ec:	1d07383a 	mul	r3,r3,r20
 20117f0:	314b383a 	mul	r5,r6,r5
 20117f4:	3810d43a 	srli	r8,r7,16
 20117f8:	8121c83a 	sub	r16,r16,r4
 20117fc:	1947883a 	add	r3,r3,r5
 2011800:	40c7883a 	add	r3,r8,r3
 2011804:	350d383a 	mul	r6,r6,r20
 2011808:	1940022e 	bgeu	r3,r5,2011814 <__udivdi3+0x400>
 201180c:	01000074 	movhi	r4,1
 2011810:	310d883a 	add	r6,r6,r4
 2011814:	1828d43a 	srli	r20,r3,16
 2011818:	a18d883a 	add	r6,r20,r6
 201181c:	81803e36 	bltu	r16,r6,2011918 <__udivdi3+0x504>
 2011820:	81803826 	beq	r16,r6,2011904 <__udivdi3+0x4f0>
 2011824:	0007883a 	mov	r3,zero
 2011828:	003fa206 	br	20116b4 <__udivdi3+0x2a0>
 201182c:	88e2983a 	sll	r17,r17,r3
 2011830:	80a8d83a 	srl	r20,r16,r2
 2011834:	80e0983a 	sll	r16,r16,r3
 2011838:	882ad43a 	srli	r21,r17,16
 201183c:	9884d83a 	srl	r2,r19,r2
 2011840:	a009883a 	mov	r4,r20
 2011844:	a80b883a 	mov	r5,r21
 2011848:	142eb03a 	or	r23,r2,r16
 201184c:	98e4983a 	sll	r18,r19,r3
 2011850:	2004c040 	call	2004c04 <__umodsi3>
 2011854:	a009883a 	mov	r4,r20
 2011858:	a80b883a 	mov	r5,r21
 201185c:	1021883a 	mov	r16,r2
 2011860:	2004ba00 	call	2004ba0 <__udivsi3>
 2011864:	1039883a 	mov	fp,r2
 2011868:	8d3fffcc 	andi	r20,r17,65535
 201186c:	8020943a 	slli	r16,r16,16
 2011870:	b804d43a 	srli	r2,r23,16
 2011874:	a72d383a 	mul	r22,r20,fp
 2011878:	1404b03a 	or	r2,r2,r16
 201187c:	1580062e 	bgeu	r2,r22,2011898 <__udivdi3+0x484>
 2011880:	1445883a 	add	r2,r2,r17
 2011884:	e0ffffc4 	addi	r3,fp,-1
 2011888:	14403836 	bltu	r2,r17,201196c <__udivdi3+0x558>
 201188c:	1580372e 	bgeu	r2,r22,201196c <__udivdi3+0x558>
 2011890:	e73fff84 	addi	fp,fp,-2
 2011894:	1445883a 	add	r2,r2,r17
 2011898:	15adc83a 	sub	r22,r2,r22
 201189c:	a80b883a 	mov	r5,r21
 20118a0:	b009883a 	mov	r4,r22
 20118a4:	2004c040 	call	2004c04 <__umodsi3>
 20118a8:	1027883a 	mov	r19,r2
 20118ac:	b009883a 	mov	r4,r22
 20118b0:	a80b883a 	mov	r5,r21
 20118b4:	2004ba00 	call	2004ba0 <__udivsi3>
 20118b8:	9826943a 	slli	r19,r19,16
 20118bc:	a0a1383a 	mul	r16,r20,r2
 20118c0:	b93fffcc 	andi	r4,r23,65535
 20118c4:	24c8b03a 	or	r4,r4,r19
 20118c8:	2400062e 	bgeu	r4,r16,20118e4 <__udivdi3+0x4d0>
 20118cc:	2449883a 	add	r4,r4,r17
 20118d0:	10ffffc4 	addi	r3,r2,-1
 20118d4:	24402336 	bltu	r4,r17,2011964 <__udivdi3+0x550>
 20118d8:	2400222e 	bgeu	r4,r16,2011964 <__udivdi3+0x550>
 20118dc:	10bfff84 	addi	r2,r2,-2
 20118e0:	2449883a 	add	r4,r4,r17
 20118e4:	e038943a 	slli	fp,fp,16
 20118e8:	2421c83a 	sub	r16,r4,r16
 20118ec:	e086b03a 	or	r3,fp,r2
 20118f0:	003f4306 	br	2011600 <__udivdi3+0x1ec>
 20118f4:	2005883a 	mov	r2,r4
 20118f8:	003f6906 	br	20116a0 <__udivdi3+0x28c>
 20118fc:	1805883a 	mov	r2,r3
 2011900:	003f0f06 	br	2011540 <__udivdi3+0x12c>
 2011904:	1806943a 	slli	r3,r3,16
 2011908:	9d66983a 	sll	r19,r19,r21
 201190c:	39ffffcc 	andi	r7,r7,65535
 2011910:	19c7883a 	add	r3,r3,r7
 2011914:	98ffc32e 	bgeu	r19,r3,2011824 <__udivdi3+0x410>
 2011918:	10bfffc4 	addi	r2,r2,-1
 201191c:	003fc106 	br	2011824 <__udivdi3+0x410>
 2011920:	00800604 	movi	r2,24
 2011924:	003f1106 	br	201156c <__udivdi3+0x158>
 2011928:	00800604 	movi	r2,24
 201192c:	003f2706 	br	20115cc <__udivdi3+0x1b8>
 2011930:	00800604 	movi	r2,24
 2011934:	003ece06 	br	2011470 <__udivdi3+0x5c>
 2011938:	0007883a 	mov	r3,zero
 201193c:	00800044 	movi	r2,1
 2011940:	003f5c06 	br	20116b4 <__udivdi3+0x2a0>
 2011944:	813fa12e 	bgeu	r16,r4,20117cc <__udivdi3+0x3b8>
 2011948:	10bfff84 	addi	r2,r2,-2
 201194c:	85e1883a 	add	r16,r16,r23
 2011950:	003f9f06 	br	20117d0 <__udivdi3+0x3bc>
 2011954:	1c7f8a2e 	bgeu	r3,r17,2011780 <__udivdi3+0x36c>
 2011958:	31bfff84 	addi	r6,r6,-2
 201195c:	1dc7883a 	add	r3,r3,r23
 2011960:	003f8806 	br	2011784 <__udivdi3+0x370>
 2011964:	1805883a 	mov	r2,r3
 2011968:	003fde06 	br	20118e4 <__udivdi3+0x4d0>
 201196c:	1839883a 	mov	fp,r3
 2011970:	003fc906 	br	2011898 <__udivdi3+0x484>
 2011974:	b5bfff84 	addi	r22,r22,-2
 2011978:	2449883a 	add	r4,r4,r17
 201197c:	003f3406 	br	2011650 <__udivdi3+0x23c>
 2011980:	b5bfff84 	addi	r22,r22,-2
 2011984:	1445883a 	add	r2,r2,r17
 2011988:	003edb06 	br	20114f8 <__udivdi3+0xe4>

0201198c <__umoddi3>:
 201198c:	defff404 	addi	sp,sp,-48
 2011990:	df000a15 	stw	fp,40(sp)
 2011994:	dc400315 	stw	r17,12(sp)
 2011998:	dc000215 	stw	r16,8(sp)
 201199c:	dfc00b15 	stw	ra,44(sp)
 20119a0:	ddc00915 	stw	r23,36(sp)
 20119a4:	dd800815 	stw	r22,32(sp)
 20119a8:	dd400715 	stw	r21,28(sp)
 20119ac:	dd000615 	stw	r20,24(sp)
 20119b0:	dcc00515 	stw	r19,20(sp)
 20119b4:	dc800415 	stw	r18,16(sp)
 20119b8:	2021883a 	mov	r16,r4
 20119bc:	2823883a 	mov	r17,r5
 20119c0:	2839883a 	mov	fp,r5
 20119c4:	38003c1e 	bne	r7,zero,2011ab8 <__umoddi3+0x12c>
 20119c8:	3027883a 	mov	r19,r6
 20119cc:	2029883a 	mov	r20,r4
 20119d0:	2980512e 	bgeu	r5,r6,2011b18 <__umoddi3+0x18c>
 20119d4:	00bfffd4 	movui	r2,65535
 20119d8:	11809a36 	bltu	r2,r6,2011c44 <__umoddi3+0x2b8>
 20119dc:	01003fc4 	movi	r4,255
 20119e0:	2189803a 	cmpltu	r4,r4,r6
 20119e4:	200890fa 	slli	r4,r4,3
 20119e8:	3104d83a 	srl	r2,r6,r4
 20119ec:	00c080b4 	movhi	r3,514
 20119f0:	18fa7d44 	addi	r3,r3,-5643
 20119f4:	1885883a 	add	r2,r3,r2
 20119f8:	10c00003 	ldbu	r3,0(r2)
 20119fc:	00800804 	movi	r2,32
 2011a00:	1909883a 	add	r4,r3,r4
 2011a04:	1125c83a 	sub	r18,r2,r4
 2011a08:	90000526 	beq	r18,zero,2011a20 <__umoddi3+0x94>
 2011a0c:	8ca2983a 	sll	r17,r17,r18
 2011a10:	8108d83a 	srl	r4,r16,r4
 2011a14:	34a6983a 	sll	r19,r6,r18
 2011a18:	84a8983a 	sll	r20,r16,r18
 2011a1c:	2478b03a 	or	fp,r4,r17
 2011a20:	982ed43a 	srli	r23,r19,16
 2011a24:	e009883a 	mov	r4,fp
 2011a28:	9dbfffcc 	andi	r22,r19,65535
 2011a2c:	b80b883a 	mov	r5,r23
 2011a30:	2004c040 	call	2004c04 <__umodsi3>
 2011a34:	e009883a 	mov	r4,fp
 2011a38:	b80b883a 	mov	r5,r23
 2011a3c:	102b883a 	mov	r21,r2
 2011a40:	2004ba00 	call	2004ba0 <__udivsi3>
 2011a44:	a806943a 	slli	r3,r21,16
 2011a48:	a008d43a 	srli	r4,r20,16
 2011a4c:	b085383a 	mul	r2,r22,r2
 2011a50:	20c8b03a 	or	r4,r4,r3
 2011a54:	2080032e 	bgeu	r4,r2,2011a64 <__umoddi3+0xd8>
 2011a58:	24c9883a 	add	r4,r4,r19
 2011a5c:	24c00136 	bltu	r4,r19,2011a64 <__umoddi3+0xd8>
 2011a60:	20811036 	bltu	r4,r2,2011ea4 <__umoddi3+0x518>
 2011a64:	20abc83a 	sub	r21,r4,r2
 2011a68:	b80b883a 	mov	r5,r23
 2011a6c:	a809883a 	mov	r4,r21
 2011a70:	2004c040 	call	2004c04 <__umodsi3>
 2011a74:	1023883a 	mov	r17,r2
 2011a78:	b80b883a 	mov	r5,r23
 2011a7c:	a809883a 	mov	r4,r21
 2011a80:	2004ba00 	call	2004ba0 <__udivsi3>
 2011a84:	8822943a 	slli	r17,r17,16
 2011a88:	b085383a 	mul	r2,r22,r2
 2011a8c:	a0ffffcc 	andi	r3,r20,65535
 2011a90:	1c46b03a 	or	r3,r3,r17
 2011a94:	1880042e 	bgeu	r3,r2,2011aa8 <__umoddi3+0x11c>
 2011a98:	1cc7883a 	add	r3,r3,r19
 2011a9c:	1cc00236 	bltu	r3,r19,2011aa8 <__umoddi3+0x11c>
 2011aa0:	1880012e 	bgeu	r3,r2,2011aa8 <__umoddi3+0x11c>
 2011aa4:	1cc7883a 	add	r3,r3,r19
 2011aa8:	1885c83a 	sub	r2,r3,r2
 2011aac:	1484d83a 	srl	r2,r2,r18
 2011ab0:	0007883a 	mov	r3,zero
 2011ab4:	00004f06 	br	2011bf4 <__umoddi3+0x268>
 2011ab8:	29c04c36 	bltu	r5,r7,2011bec <__umoddi3+0x260>
 2011abc:	00bfffd4 	movui	r2,65535
 2011ac0:	11c0582e 	bgeu	r2,r7,2011c24 <__umoddi3+0x298>
 2011ac4:	00804034 	movhi	r2,256
 2011ac8:	10bfffc4 	addi	r2,r2,-1
 2011acc:	11c0e736 	bltu	r2,r7,2011e6c <__umoddi3+0x4e0>
 2011ad0:	01000404 	movi	r4,16
 2011ad4:	3904d83a 	srl	r2,r7,r4
 2011ad8:	00c080b4 	movhi	r3,514
 2011adc:	18fa7d44 	addi	r3,r3,-5643
 2011ae0:	1885883a 	add	r2,r3,r2
 2011ae4:	14c00003 	ldbu	r19,0(r2)
 2011ae8:	00c00804 	movi	r3,32
 2011aec:	9927883a 	add	r19,r19,r4
 2011af0:	1ce9c83a 	sub	r20,r3,r19
 2011af4:	a000581e 	bne	r20,zero,2011c58 <__umoddi3+0x2cc>
 2011af8:	3c400136 	bltu	r7,r17,2011b00 <__umoddi3+0x174>
 2011afc:	8180eb36 	bltu	r16,r6,2011eac <__umoddi3+0x520>
 2011b00:	8185c83a 	sub	r2,r16,r6
 2011b04:	89e3c83a 	sub	r17,r17,r7
 2011b08:	8089803a 	cmpltu	r4,r16,r2
 2011b0c:	8939c83a 	sub	fp,r17,r4
 2011b10:	e007883a 	mov	r3,fp
 2011b14:	00003706 	br	2011bf4 <__umoddi3+0x268>
 2011b18:	3000041e 	bne	r6,zero,2011b2c <__umoddi3+0x1a0>
 2011b1c:	000b883a 	mov	r5,zero
 2011b20:	01000044 	movi	r4,1
 2011b24:	2004ba00 	call	2004ba0 <__udivsi3>
 2011b28:	1027883a 	mov	r19,r2
 2011b2c:	00bfffd4 	movui	r2,65535
 2011b30:	14c0402e 	bgeu	r2,r19,2011c34 <__umoddi3+0x2a8>
 2011b34:	00804034 	movhi	r2,256
 2011b38:	10bfffc4 	addi	r2,r2,-1
 2011b3c:	14c0cd36 	bltu	r2,r19,2011e74 <__umoddi3+0x4e8>
 2011b40:	00800404 	movi	r2,16
 2011b44:	9886d83a 	srl	r3,r19,r2
 2011b48:	010080b4 	movhi	r4,514
 2011b4c:	213a7d44 	addi	r4,r4,-5643
 2011b50:	20c7883a 	add	r3,r4,r3
 2011b54:	18c00003 	ldbu	r3,0(r3)
 2011b58:	1887883a 	add	r3,r3,r2
 2011b5c:	00800804 	movi	r2,32
 2011b60:	10e5c83a 	sub	r18,r2,r3
 2011b64:	9000901e 	bne	r18,zero,2011da8 <__umoddi3+0x41c>
 2011b68:	982cd43a 	srli	r22,r19,16
 2011b6c:	8ce3c83a 	sub	r17,r17,r19
 2011b70:	9d7fffcc 	andi	r21,r19,65535
 2011b74:	b00b883a 	mov	r5,r22
 2011b78:	8809883a 	mov	r4,r17
 2011b7c:	2004c040 	call	2004c04 <__umodsi3>
 2011b80:	8809883a 	mov	r4,r17
 2011b84:	b00b883a 	mov	r5,r22
 2011b88:	1021883a 	mov	r16,r2
 2011b8c:	2004ba00 	call	2004ba0 <__udivsi3>
 2011b90:	8006943a 	slli	r3,r16,16
 2011b94:	a008d43a 	srli	r4,r20,16
 2011b98:	1545383a 	mul	r2,r2,r21
 2011b9c:	20c8b03a 	or	r4,r4,r3
 2011ba0:	2080042e 	bgeu	r4,r2,2011bb4 <__umoddi3+0x228>
 2011ba4:	24c9883a 	add	r4,r4,r19
 2011ba8:	24c00236 	bltu	r4,r19,2011bb4 <__umoddi3+0x228>
 2011bac:	2080012e 	bgeu	r4,r2,2011bb4 <__umoddi3+0x228>
 2011bb0:	24c9883a 	add	r4,r4,r19
 2011bb4:	20a1c83a 	sub	r16,r4,r2
 2011bb8:	b00b883a 	mov	r5,r22
 2011bbc:	8009883a 	mov	r4,r16
 2011bc0:	2004c040 	call	2004c04 <__umodsi3>
 2011bc4:	1023883a 	mov	r17,r2
 2011bc8:	b00b883a 	mov	r5,r22
 2011bcc:	8009883a 	mov	r4,r16
 2011bd0:	2004ba00 	call	2004ba0 <__udivsi3>
 2011bd4:	8822943a 	slli	r17,r17,16
 2011bd8:	1545383a 	mul	r2,r2,r21
 2011bdc:	a53fffcc 	andi	r20,r20,65535
 2011be0:	a446b03a 	or	r3,r20,r17
 2011be4:	18bfb02e 	bgeu	r3,r2,2011aa8 <__umoddi3+0x11c>
 2011be8:	003fab06 	br	2011a98 <__umoddi3+0x10c>
 2011bec:	2005883a 	mov	r2,r4
 2011bf0:	2807883a 	mov	r3,r5
 2011bf4:	dfc00b17 	ldw	ra,44(sp)
 2011bf8:	df000a17 	ldw	fp,40(sp)
 2011bfc:	ddc00917 	ldw	r23,36(sp)
 2011c00:	dd800817 	ldw	r22,32(sp)
 2011c04:	dd400717 	ldw	r21,28(sp)
 2011c08:	dd000617 	ldw	r20,24(sp)
 2011c0c:	dcc00517 	ldw	r19,20(sp)
 2011c10:	dc800417 	ldw	r18,16(sp)
 2011c14:	dc400317 	ldw	r17,12(sp)
 2011c18:	dc000217 	ldw	r16,8(sp)
 2011c1c:	dec00c04 	addi	sp,sp,48
 2011c20:	f800283a 	ret
 2011c24:	04c03fc4 	movi	r19,255
 2011c28:	99c9803a 	cmpltu	r4,r19,r7
 2011c2c:	200890fa 	slli	r4,r4,3
 2011c30:	003fa806 	br	2011ad4 <__umoddi3+0x148>
 2011c34:	00803fc4 	movi	r2,255
 2011c38:	14c5803a 	cmpltu	r2,r2,r19
 2011c3c:	100490fa 	slli	r2,r2,3
 2011c40:	003fc006 	br	2011b44 <__umoddi3+0x1b8>
 2011c44:	00804034 	movhi	r2,256
 2011c48:	10bfffc4 	addi	r2,r2,-1
 2011c4c:	11808b36 	bltu	r2,r6,2011e7c <__umoddi3+0x4f0>
 2011c50:	01000404 	movi	r4,16
 2011c54:	003f6406 	br	20119e8 <__umoddi3+0x5c>
 2011c58:	34c4d83a 	srl	r2,r6,r19
 2011c5c:	3d0e983a 	sll	r7,r7,r20
 2011c60:	8cf8d83a 	srl	fp,r17,r19
 2011c64:	8d10983a 	sll	r8,r17,r20
 2011c68:	38aab03a 	or	r21,r7,r2
 2011c6c:	a82cd43a 	srli	r22,r21,16
 2011c70:	84e2d83a 	srl	r17,r16,r19
 2011c74:	e009883a 	mov	r4,fp
 2011c78:	b00b883a 	mov	r5,r22
 2011c7c:	8a22b03a 	or	r17,r17,r8
 2011c80:	3524983a 	sll	r18,r6,r20
 2011c84:	2004c040 	call	2004c04 <__umodsi3>
 2011c88:	e009883a 	mov	r4,fp
 2011c8c:	b00b883a 	mov	r5,r22
 2011c90:	102f883a 	mov	r23,r2
 2011c94:	2004ba00 	call	2004ba0 <__udivsi3>
 2011c98:	100d883a 	mov	r6,r2
 2011c9c:	b808943a 	slli	r4,r23,16
 2011ca0:	aa3fffcc 	andi	r8,r21,65535
 2011ca4:	8804d43a 	srli	r2,r17,16
 2011ca8:	41af383a 	mul	r23,r8,r6
 2011cac:	8520983a 	sll	r16,r16,r20
 2011cb0:	1104b03a 	or	r2,r2,r4
 2011cb4:	15c0042e 	bgeu	r2,r23,2011cc8 <__umoddi3+0x33c>
 2011cb8:	1545883a 	add	r2,r2,r21
 2011cbc:	30ffffc4 	addi	r3,r6,-1
 2011cc0:	1540742e 	bgeu	r2,r21,2011e94 <__umoddi3+0x508>
 2011cc4:	180d883a 	mov	r6,r3
 2011cc8:	15efc83a 	sub	r23,r2,r23
 2011ccc:	b00b883a 	mov	r5,r22
 2011cd0:	b809883a 	mov	r4,r23
 2011cd4:	d9800115 	stw	r6,4(sp)
 2011cd8:	da000015 	stw	r8,0(sp)
 2011cdc:	2004c040 	call	2004c04 <__umodsi3>
 2011ce0:	b00b883a 	mov	r5,r22
 2011ce4:	b809883a 	mov	r4,r23
 2011ce8:	1039883a 	mov	fp,r2
 2011cec:	2004ba00 	call	2004ba0 <__udivsi3>
 2011cf0:	da000017 	ldw	r8,0(sp)
 2011cf4:	e038943a 	slli	fp,fp,16
 2011cf8:	100b883a 	mov	r5,r2
 2011cfc:	4089383a 	mul	r4,r8,r2
 2011d00:	8a3fffcc 	andi	r8,r17,65535
 2011d04:	4710b03a 	or	r8,r8,fp
 2011d08:	d9800117 	ldw	r6,4(sp)
 2011d0c:	4100042e 	bgeu	r8,r4,2011d20 <__umoddi3+0x394>
 2011d10:	4551883a 	add	r8,r8,r21
 2011d14:	10bfffc4 	addi	r2,r2,-1
 2011d18:	45405a2e 	bgeu	r8,r21,2011e84 <__umoddi3+0x4f8>
 2011d1c:	100b883a 	mov	r5,r2
 2011d20:	300c943a 	slli	r6,r6,16
 2011d24:	91ffffcc 	andi	r7,r18,65535
 2011d28:	9004d43a 	srli	r2,r18,16
 2011d2c:	314cb03a 	or	r6,r6,r5
 2011d30:	317fffcc 	andi	r5,r6,65535
 2011d34:	300cd43a 	srli	r6,r6,16
 2011d38:	29d3383a 	mul	r9,r5,r7
 2011d3c:	288b383a 	mul	r5,r5,r2
 2011d40:	31cf383a 	mul	r7,r6,r7
 2011d44:	4806d43a 	srli	r3,r9,16
 2011d48:	4111c83a 	sub	r8,r8,r4
 2011d4c:	29cb883a 	add	r5,r5,r7
 2011d50:	194b883a 	add	r5,r3,r5
 2011d54:	3085383a 	mul	r2,r6,r2
 2011d58:	29c0022e 	bgeu	r5,r7,2011d64 <__umoddi3+0x3d8>
 2011d5c:	00c00074 	movhi	r3,1
 2011d60:	10c5883a 	add	r2,r2,r3
 2011d64:	2808d43a 	srli	r4,r5,16
 2011d68:	280a943a 	slli	r5,r5,16
 2011d6c:	4a7fffcc 	andi	r9,r9,65535
 2011d70:	2085883a 	add	r2,r4,r2
 2011d74:	2a4b883a 	add	r5,r5,r9
 2011d78:	40803636 	bltu	r8,r2,2011e54 <__umoddi3+0x4c8>
 2011d7c:	40804d26 	beq	r8,r2,2011eb4 <__umoddi3+0x528>
 2011d80:	4089c83a 	sub	r4,r8,r2
 2011d84:	280f883a 	mov	r7,r5
 2011d88:	81cfc83a 	sub	r7,r16,r7
 2011d8c:	81c7803a 	cmpltu	r3,r16,r7
 2011d90:	20c7c83a 	sub	r3,r4,r3
 2011d94:	1cc4983a 	sll	r2,r3,r19
 2011d98:	3d0ed83a 	srl	r7,r7,r20
 2011d9c:	1d06d83a 	srl	r3,r3,r20
 2011da0:	11c4b03a 	or	r2,r2,r7
 2011da4:	003f9306 	br	2011bf4 <__umoddi3+0x268>
 2011da8:	9ca6983a 	sll	r19,r19,r18
 2011dac:	88e8d83a 	srl	r20,r17,r3
 2011db0:	80c4d83a 	srl	r2,r16,r3
 2011db4:	982cd43a 	srli	r22,r19,16
 2011db8:	8ca2983a 	sll	r17,r17,r18
 2011dbc:	a009883a 	mov	r4,r20
 2011dc0:	b00b883a 	mov	r5,r22
 2011dc4:	1478b03a 	or	fp,r2,r17
 2011dc8:	2004c040 	call	2004c04 <__umodsi3>
 2011dcc:	a009883a 	mov	r4,r20
 2011dd0:	b00b883a 	mov	r5,r22
 2011dd4:	1023883a 	mov	r17,r2
 2011dd8:	2004ba00 	call	2004ba0 <__udivsi3>
 2011ddc:	9d7fffcc 	andi	r21,r19,65535
 2011de0:	880a943a 	slli	r5,r17,16
 2011de4:	e008d43a 	srli	r4,fp,16
 2011de8:	a885383a 	mul	r2,r21,r2
 2011dec:	84a8983a 	sll	r20,r16,r18
 2011df0:	2148b03a 	or	r4,r4,r5
 2011df4:	2080042e 	bgeu	r4,r2,2011e08 <__umoddi3+0x47c>
 2011df8:	24c9883a 	add	r4,r4,r19
 2011dfc:	24c00236 	bltu	r4,r19,2011e08 <__umoddi3+0x47c>
 2011e00:	2080012e 	bgeu	r4,r2,2011e08 <__umoddi3+0x47c>
 2011e04:	24c9883a 	add	r4,r4,r19
 2011e08:	20a3c83a 	sub	r17,r4,r2
 2011e0c:	b00b883a 	mov	r5,r22
 2011e10:	8809883a 	mov	r4,r17
 2011e14:	2004c040 	call	2004c04 <__umodsi3>
 2011e18:	102f883a 	mov	r23,r2
 2011e1c:	8809883a 	mov	r4,r17
 2011e20:	b00b883a 	mov	r5,r22
 2011e24:	2004ba00 	call	2004ba0 <__udivsi3>
 2011e28:	b82e943a 	slli	r23,r23,16
 2011e2c:	a885383a 	mul	r2,r21,r2
 2011e30:	e13fffcc 	andi	r4,fp,65535
 2011e34:	25c8b03a 	or	r4,r4,r23
 2011e38:	2080042e 	bgeu	r4,r2,2011e4c <__umoddi3+0x4c0>
 2011e3c:	24c9883a 	add	r4,r4,r19
 2011e40:	24c00236 	bltu	r4,r19,2011e4c <__umoddi3+0x4c0>
 2011e44:	2080012e 	bgeu	r4,r2,2011e4c <__umoddi3+0x4c0>
 2011e48:	24c9883a 	add	r4,r4,r19
 2011e4c:	20a3c83a 	sub	r17,r4,r2
 2011e50:	003f4806 	br	2011b74 <__umoddi3+0x1e8>
 2011e54:	2c8fc83a 	sub	r7,r5,r18
 2011e58:	1545c83a 	sub	r2,r2,r21
 2011e5c:	29cb803a 	cmpltu	r5,r5,r7
 2011e60:	1145c83a 	sub	r2,r2,r5
 2011e64:	4089c83a 	sub	r4,r8,r2
 2011e68:	003fc706 	br	2011d88 <__umoddi3+0x3fc>
 2011e6c:	01000604 	movi	r4,24
 2011e70:	003f1806 	br	2011ad4 <__umoddi3+0x148>
 2011e74:	00800604 	movi	r2,24
 2011e78:	003f3206 	br	2011b44 <__umoddi3+0x1b8>
 2011e7c:	01000604 	movi	r4,24
 2011e80:	003ed906 	br	20119e8 <__umoddi3+0x5c>
 2011e84:	413fa52e 	bgeu	r8,r4,2011d1c <__umoddi3+0x390>
 2011e88:	297fff84 	addi	r5,r5,-2
 2011e8c:	4551883a 	add	r8,r8,r21
 2011e90:	003fa306 	br	2011d20 <__umoddi3+0x394>
 2011e94:	15ff8b2e 	bgeu	r2,r23,2011cc4 <__umoddi3+0x338>
 2011e98:	31bfff84 	addi	r6,r6,-2
 2011e9c:	1545883a 	add	r2,r2,r21
 2011ea0:	003f8906 	br	2011cc8 <__umoddi3+0x33c>
 2011ea4:	24c9883a 	add	r4,r4,r19
 2011ea8:	003eee06 	br	2011a64 <__umoddi3+0xd8>
 2011eac:	8005883a 	mov	r2,r16
 2011eb0:	003f1706 	br	2011b10 <__umoddi3+0x184>
 2011eb4:	817fe736 	bltu	r16,r5,2011e54 <__umoddi3+0x4c8>
 2011eb8:	280f883a 	mov	r7,r5
 2011ebc:	0009883a 	mov	r4,zero
 2011ec0:	003fb106 	br	2011d88 <__umoddi3+0x3fc>

02011ec4 <__adddf3>:
 2011ec4:	02c00434 	movhi	r11,16
 2011ec8:	5affffc4 	addi	r11,r11,-1
 2011ecc:	2806d7fa 	srli	r3,r5,31
 2011ed0:	2ad4703a 	and	r10,r5,r11
 2011ed4:	3ad2703a 	and	r9,r7,r11
 2011ed8:	3804d53a 	srli	r2,r7,20
 2011edc:	3018d77a 	srli	r12,r6,29
 2011ee0:	280ad53a 	srli	r5,r5,20
 2011ee4:	501490fa 	slli	r10,r10,3
 2011ee8:	2010d77a 	srli	r8,r4,29
 2011eec:	481290fa 	slli	r9,r9,3
 2011ef0:	380ed7fa 	srli	r7,r7,31
 2011ef4:	defffb04 	addi	sp,sp,-20
 2011ef8:	dc800215 	stw	r18,8(sp)
 2011efc:	dc400115 	stw	r17,4(sp)
 2011f00:	dc000015 	stw	r16,0(sp)
 2011f04:	dfc00415 	stw	ra,16(sp)
 2011f08:	dcc00315 	stw	r19,12(sp)
 2011f0c:	1c803fcc 	andi	r18,r3,255
 2011f10:	2c01ffcc 	andi	r16,r5,2047
 2011f14:	5210b03a 	or	r8,r10,r8
 2011f18:	202290fa 	slli	r17,r4,3
 2011f1c:	1081ffcc 	andi	r2,r2,2047
 2011f20:	4b12b03a 	or	r9,r9,r12
 2011f24:	300c90fa 	slli	r6,r6,3
 2011f28:	91c07526 	beq	r18,r7,2012100 <__adddf3+0x23c>
 2011f2c:	8087c83a 	sub	r3,r16,r2
 2011f30:	00c0ab0e 	bge	zero,r3,20121e0 <__adddf3+0x31c>
 2011f34:	10002a1e 	bne	r2,zero,2011fe0 <__adddf3+0x11c>
 2011f38:	4984b03a 	or	r2,r9,r6
 2011f3c:	1000961e 	bne	r2,zero,2012198 <__adddf3+0x2d4>
 2011f40:	888001cc 	andi	r2,r17,7
 2011f44:	10000726 	beq	r2,zero,2011f64 <__adddf3+0xa0>
 2011f48:	888003cc 	andi	r2,r17,15
 2011f4c:	00c00104 	movi	r3,4
 2011f50:	10c00426 	beq	r2,r3,2011f64 <__adddf3+0xa0>
 2011f54:	88c7883a 	add	r3,r17,r3
 2011f58:	1c63803a 	cmpltu	r17,r3,r17
 2011f5c:	4451883a 	add	r8,r8,r17
 2011f60:	1823883a 	mov	r17,r3
 2011f64:	4080202c 	andhi	r2,r8,128
 2011f68:	10005926 	beq	r2,zero,20120d0 <__adddf3+0x20c>
 2011f6c:	84000044 	addi	r16,r16,1
 2011f70:	0081ffc4 	movi	r2,2047
 2011f74:	8080ba26 	beq	r16,r2,2012260 <__adddf3+0x39c>
 2011f78:	00bfe034 	movhi	r2,65408
 2011f7c:	10bfffc4 	addi	r2,r2,-1
 2011f80:	4090703a 	and	r8,r8,r2
 2011f84:	4004977a 	slli	r2,r8,29
 2011f88:	4010927a 	slli	r8,r8,9
 2011f8c:	8822d0fa 	srli	r17,r17,3
 2011f90:	8401ffcc 	andi	r16,r16,2047
 2011f94:	4010d33a 	srli	r8,r8,12
 2011f98:	9007883a 	mov	r3,r18
 2011f9c:	1444b03a 	or	r2,r2,r17
 2011fa0:	8401ffcc 	andi	r16,r16,2047
 2011fa4:	8020953a 	slli	r16,r16,20
 2011fa8:	18c03fcc 	andi	r3,r3,255
 2011fac:	01000434 	movhi	r4,16
 2011fb0:	213fffc4 	addi	r4,r4,-1
 2011fb4:	180697fa 	slli	r3,r3,31
 2011fb8:	4110703a 	and	r8,r8,r4
 2011fbc:	4410b03a 	or	r8,r8,r16
 2011fc0:	40c6b03a 	or	r3,r8,r3
 2011fc4:	dfc00417 	ldw	ra,16(sp)
 2011fc8:	dcc00317 	ldw	r19,12(sp)
 2011fcc:	dc800217 	ldw	r18,8(sp)
 2011fd0:	dc400117 	ldw	r17,4(sp)
 2011fd4:	dc000017 	ldw	r16,0(sp)
 2011fd8:	dec00504 	addi	sp,sp,20
 2011fdc:	f800283a 	ret
 2011fe0:	0081ffc4 	movi	r2,2047
 2011fe4:	80bfd626 	beq	r16,r2,2011f40 <__adddf3+0x7c>
 2011fe8:	4a402034 	orhi	r9,r9,128
 2011fec:	00800e04 	movi	r2,56
 2011ff0:	10c09f16 	blt	r2,r3,2012270 <__adddf3+0x3ac>
 2011ff4:	008007c4 	movi	r2,31
 2011ff8:	10c0c216 	blt	r2,r3,2012304 <__adddf3+0x440>
 2011ffc:	00800804 	movi	r2,32
 2012000:	10c5c83a 	sub	r2,r2,r3
 2012004:	488a983a 	sll	r5,r9,r2
 2012008:	30c8d83a 	srl	r4,r6,r3
 201200c:	3084983a 	sll	r2,r6,r2
 2012010:	48c6d83a 	srl	r3,r9,r3
 2012014:	290cb03a 	or	r6,r5,r4
 2012018:	1004c03a 	cmpne	r2,r2,zero
 201201c:	308cb03a 	or	r6,r6,r2
 2012020:	898dc83a 	sub	r6,r17,r6
 2012024:	89a3803a 	cmpltu	r17,r17,r6
 2012028:	40d1c83a 	sub	r8,r8,r3
 201202c:	4451c83a 	sub	r8,r8,r17
 2012030:	3023883a 	mov	r17,r6
 2012034:	4080202c 	andhi	r2,r8,128
 2012038:	10002326 	beq	r2,zero,20120c8 <__adddf3+0x204>
 201203c:	04c02034 	movhi	r19,128
 2012040:	9cffffc4 	addi	r19,r19,-1
 2012044:	44e6703a 	and	r19,r8,r19
 2012048:	98007626 	beq	r19,zero,2012224 <__adddf3+0x360>
 201204c:	9809883a 	mov	r4,r19
 2012050:	2004a440 	call	2004a44 <__clzsi2>
 2012054:	10fffe04 	addi	r3,r2,-8
 2012058:	010007c4 	movi	r4,31
 201205c:	20c07716 	blt	r4,r3,201223c <__adddf3+0x378>
 2012060:	00800804 	movi	r2,32
 2012064:	10c5c83a 	sub	r2,r2,r3
 2012068:	8884d83a 	srl	r2,r17,r2
 201206c:	98d0983a 	sll	r8,r19,r3
 2012070:	88e2983a 	sll	r17,r17,r3
 2012074:	1204b03a 	or	r2,r2,r8
 2012078:	1c007416 	blt	r3,r16,201224c <__adddf3+0x388>
 201207c:	1c21c83a 	sub	r16,r3,r16
 2012080:	82000044 	addi	r8,r16,1
 2012084:	00c007c4 	movi	r3,31
 2012088:	1a009116 	blt	r3,r8,20122d0 <__adddf3+0x40c>
 201208c:	00c00804 	movi	r3,32
 2012090:	1a07c83a 	sub	r3,r3,r8
 2012094:	8a08d83a 	srl	r4,r17,r8
 2012098:	88e2983a 	sll	r17,r17,r3
 201209c:	10c6983a 	sll	r3,r2,r3
 20120a0:	1210d83a 	srl	r8,r2,r8
 20120a4:	8804c03a 	cmpne	r2,r17,zero
 20120a8:	1906b03a 	or	r3,r3,r4
 20120ac:	18a2b03a 	or	r17,r3,r2
 20120b0:	0021883a 	mov	r16,zero
 20120b4:	003fa206 	br	2011f40 <__adddf3+0x7c>
 20120b8:	1890b03a 	or	r8,r3,r2
 20120bc:	40017d26 	beq	r8,zero,20126b4 <__adddf3+0x7f0>
 20120c0:	1011883a 	mov	r8,r2
 20120c4:	1823883a 	mov	r17,r3
 20120c8:	888001cc 	andi	r2,r17,7
 20120cc:	103f9e1e 	bne	r2,zero,2011f48 <__adddf3+0x84>
 20120d0:	4004977a 	slli	r2,r8,29
 20120d4:	8822d0fa 	srli	r17,r17,3
 20120d8:	4010d0fa 	srli	r8,r8,3
 20120dc:	9007883a 	mov	r3,r18
 20120e0:	1444b03a 	or	r2,r2,r17
 20120e4:	0101ffc4 	movi	r4,2047
 20120e8:	81002426 	beq	r16,r4,201217c <__adddf3+0x2b8>
 20120ec:	8120703a 	and	r16,r16,r4
 20120f0:	01000434 	movhi	r4,16
 20120f4:	213fffc4 	addi	r4,r4,-1
 20120f8:	4110703a 	and	r8,r8,r4
 20120fc:	003fa806 	br	2011fa0 <__adddf3+0xdc>
 2012100:	8089c83a 	sub	r4,r16,r2
 2012104:	01005e0e 	bge	zero,r4,2012280 <__adddf3+0x3bc>
 2012108:	10002b26 	beq	r2,zero,20121b8 <__adddf3+0x2f4>
 201210c:	0081ffc4 	movi	r2,2047
 2012110:	80bf8b26 	beq	r16,r2,2011f40 <__adddf3+0x7c>
 2012114:	4a402034 	orhi	r9,r9,128
 2012118:	00800e04 	movi	r2,56
 201211c:	1100a40e 	bge	r2,r4,20123b0 <__adddf3+0x4ec>
 2012120:	498cb03a 	or	r6,r9,r6
 2012124:	300ac03a 	cmpne	r5,r6,zero
 2012128:	0013883a 	mov	r9,zero
 201212c:	2c4b883a 	add	r5,r5,r17
 2012130:	2c63803a 	cmpltu	r17,r5,r17
 2012134:	4a11883a 	add	r8,r9,r8
 2012138:	8a11883a 	add	r8,r17,r8
 201213c:	2823883a 	mov	r17,r5
 2012140:	4080202c 	andhi	r2,r8,128
 2012144:	103fe026 	beq	r2,zero,20120c8 <__adddf3+0x204>
 2012148:	84000044 	addi	r16,r16,1
 201214c:	0081ffc4 	movi	r2,2047
 2012150:	8080d226 	beq	r16,r2,201249c <__adddf3+0x5d8>
 2012154:	00bfe034 	movhi	r2,65408
 2012158:	10bfffc4 	addi	r2,r2,-1
 201215c:	4090703a 	and	r8,r8,r2
 2012160:	880ad07a 	srli	r5,r17,1
 2012164:	400897fa 	slli	r4,r8,31
 2012168:	88c0004c 	andi	r3,r17,1
 201216c:	28e2b03a 	or	r17,r5,r3
 2012170:	4010d07a 	srli	r8,r8,1
 2012174:	2462b03a 	or	r17,r4,r17
 2012178:	003f7106 	br	2011f40 <__adddf3+0x7c>
 201217c:	4088b03a 	or	r4,r8,r2
 2012180:	20014526 	beq	r4,zero,2012698 <__adddf3+0x7d4>
 2012184:	01000434 	movhi	r4,16
 2012188:	42000234 	orhi	r8,r8,8
 201218c:	213fffc4 	addi	r4,r4,-1
 2012190:	4110703a 	and	r8,r8,r4
 2012194:	003f8206 	br	2011fa0 <__adddf3+0xdc>
 2012198:	18ffffc4 	addi	r3,r3,-1
 201219c:	1800491e 	bne	r3,zero,20122c4 <__adddf3+0x400>
 20121a0:	898bc83a 	sub	r5,r17,r6
 20121a4:	8963803a 	cmpltu	r17,r17,r5
 20121a8:	4251c83a 	sub	r8,r8,r9
 20121ac:	4451c83a 	sub	r8,r8,r17
 20121b0:	2823883a 	mov	r17,r5
 20121b4:	003f9f06 	br	2012034 <__adddf3+0x170>
 20121b8:	4984b03a 	or	r2,r9,r6
 20121bc:	103f6026 	beq	r2,zero,2011f40 <__adddf3+0x7c>
 20121c0:	213fffc4 	addi	r4,r4,-1
 20121c4:	2000931e 	bne	r4,zero,2012414 <__adddf3+0x550>
 20121c8:	898d883a 	add	r6,r17,r6
 20121cc:	3463803a 	cmpltu	r17,r6,r17
 20121d0:	4251883a 	add	r8,r8,r9
 20121d4:	8a11883a 	add	r8,r17,r8
 20121d8:	3023883a 	mov	r17,r6
 20121dc:	003fd806 	br	2012140 <__adddf3+0x27c>
 20121e0:	1800541e 	bne	r3,zero,2012334 <__adddf3+0x470>
 20121e4:	80800044 	addi	r2,r16,1
 20121e8:	1081ffcc 	andi	r2,r2,2047
 20121ec:	00c00044 	movi	r3,1
 20121f0:	1880a00e 	bge	r3,r2,2012474 <__adddf3+0x5b0>
 20121f4:	8989c83a 	sub	r4,r17,r6
 20121f8:	8905803a 	cmpltu	r2,r17,r4
 20121fc:	4267c83a 	sub	r19,r8,r9
 2012200:	98a7c83a 	sub	r19,r19,r2
 2012204:	9880202c 	andhi	r2,r19,128
 2012208:	10006326 	beq	r2,zero,2012398 <__adddf3+0x4d4>
 201220c:	3463c83a 	sub	r17,r6,r17
 2012210:	4a07c83a 	sub	r3,r9,r8
 2012214:	344d803a 	cmpltu	r6,r6,r17
 2012218:	19a7c83a 	sub	r19,r3,r6
 201221c:	3825883a 	mov	r18,r7
 2012220:	983f8a1e 	bne	r19,zero,201204c <__adddf3+0x188>
 2012224:	8809883a 	mov	r4,r17
 2012228:	2004a440 	call	2004a44 <__clzsi2>
 201222c:	10800804 	addi	r2,r2,32
 2012230:	10fffe04 	addi	r3,r2,-8
 2012234:	010007c4 	movi	r4,31
 2012238:	20ff890e 	bge	r4,r3,2012060 <__adddf3+0x19c>
 201223c:	10bff604 	addi	r2,r2,-40
 2012240:	8884983a 	sll	r2,r17,r2
 2012244:	0023883a 	mov	r17,zero
 2012248:	1c3f8c0e 	bge	r3,r16,201207c <__adddf3+0x1b8>
 201224c:	023fe034 	movhi	r8,65408
 2012250:	423fffc4 	addi	r8,r8,-1
 2012254:	80e1c83a 	sub	r16,r16,r3
 2012258:	1210703a 	and	r8,r2,r8
 201225c:	003f3806 	br	2011f40 <__adddf3+0x7c>
 2012260:	9007883a 	mov	r3,r18
 2012264:	0011883a 	mov	r8,zero
 2012268:	0005883a 	mov	r2,zero
 201226c:	003f4c06 	br	2011fa0 <__adddf3+0xdc>
 2012270:	498cb03a 	or	r6,r9,r6
 2012274:	300cc03a 	cmpne	r6,r6,zero
 2012278:	0007883a 	mov	r3,zero
 201227c:	003f6806 	br	2012020 <__adddf3+0x15c>
 2012280:	20009c1e 	bne	r4,zero,20124f4 <__adddf3+0x630>
 2012284:	80800044 	addi	r2,r16,1
 2012288:	1141ffcc 	andi	r5,r2,2047
 201228c:	01000044 	movi	r4,1
 2012290:	2140670e 	bge	r4,r5,2012430 <__adddf3+0x56c>
 2012294:	0101ffc4 	movi	r4,2047
 2012298:	11007f26 	beq	r2,r4,2012498 <__adddf3+0x5d4>
 201229c:	898d883a 	add	r6,r17,r6
 20122a0:	4247883a 	add	r3,r8,r9
 20122a4:	3451803a 	cmpltu	r8,r6,r17
 20122a8:	40d1883a 	add	r8,r8,r3
 20122ac:	402297fa 	slli	r17,r8,31
 20122b0:	300cd07a 	srli	r6,r6,1
 20122b4:	4010d07a 	srli	r8,r8,1
 20122b8:	1021883a 	mov	r16,r2
 20122bc:	89a2b03a 	or	r17,r17,r6
 20122c0:	003f1f06 	br	2011f40 <__adddf3+0x7c>
 20122c4:	0081ffc4 	movi	r2,2047
 20122c8:	80bf481e 	bne	r16,r2,2011fec <__adddf3+0x128>
 20122cc:	003f1c06 	br	2011f40 <__adddf3+0x7c>
 20122d0:	843ff844 	addi	r16,r16,-31
 20122d4:	01000804 	movi	r4,32
 20122d8:	1406d83a 	srl	r3,r2,r16
 20122dc:	41005026 	beq	r8,r4,2012420 <__adddf3+0x55c>
 20122e0:	01001004 	movi	r4,64
 20122e4:	2211c83a 	sub	r8,r4,r8
 20122e8:	1204983a 	sll	r2,r2,r8
 20122ec:	88a2b03a 	or	r17,r17,r2
 20122f0:	8822c03a 	cmpne	r17,r17,zero
 20122f4:	1c62b03a 	or	r17,r3,r17
 20122f8:	0011883a 	mov	r8,zero
 20122fc:	0021883a 	mov	r16,zero
 2012300:	003f7106 	br	20120c8 <__adddf3+0x204>
 2012304:	193ff804 	addi	r4,r3,-32
 2012308:	00800804 	movi	r2,32
 201230c:	4908d83a 	srl	r4,r9,r4
 2012310:	18804526 	beq	r3,r2,2012428 <__adddf3+0x564>
 2012314:	00801004 	movi	r2,64
 2012318:	10c5c83a 	sub	r2,r2,r3
 201231c:	4886983a 	sll	r3,r9,r2
 2012320:	198cb03a 	or	r6,r3,r6
 2012324:	300cc03a 	cmpne	r6,r6,zero
 2012328:	218cb03a 	or	r6,r4,r6
 201232c:	0007883a 	mov	r3,zero
 2012330:	003f3b06 	br	2012020 <__adddf3+0x15c>
 2012334:	80002a26 	beq	r16,zero,20123e0 <__adddf3+0x51c>
 2012338:	0101ffc4 	movi	r4,2047
 201233c:	11006826 	beq	r2,r4,20124e0 <__adddf3+0x61c>
 2012340:	00c7c83a 	sub	r3,zero,r3
 2012344:	42002034 	orhi	r8,r8,128
 2012348:	01000e04 	movi	r4,56
 201234c:	20c07c16 	blt	r4,r3,2012540 <__adddf3+0x67c>
 2012350:	010007c4 	movi	r4,31
 2012354:	20c0da16 	blt	r4,r3,20126c0 <__adddf3+0x7fc>
 2012358:	01000804 	movi	r4,32
 201235c:	20c9c83a 	sub	r4,r4,r3
 2012360:	4114983a 	sll	r10,r8,r4
 2012364:	88cad83a 	srl	r5,r17,r3
 2012368:	8908983a 	sll	r4,r17,r4
 201236c:	40c6d83a 	srl	r3,r8,r3
 2012370:	5162b03a 	or	r17,r10,r5
 2012374:	2008c03a 	cmpne	r4,r4,zero
 2012378:	8922b03a 	or	r17,r17,r4
 201237c:	3463c83a 	sub	r17,r6,r17
 2012380:	48c7c83a 	sub	r3,r9,r3
 2012384:	344d803a 	cmpltu	r6,r6,r17
 2012388:	1991c83a 	sub	r8,r3,r6
 201238c:	1021883a 	mov	r16,r2
 2012390:	3825883a 	mov	r18,r7
 2012394:	003f2706 	br	2012034 <__adddf3+0x170>
 2012398:	24d0b03a 	or	r8,r4,r19
 201239c:	40001b1e 	bne	r8,zero,201240c <__adddf3+0x548>
 20123a0:	0005883a 	mov	r2,zero
 20123a4:	0007883a 	mov	r3,zero
 20123a8:	0021883a 	mov	r16,zero
 20123ac:	003f4d06 	br	20120e4 <__adddf3+0x220>
 20123b0:	008007c4 	movi	r2,31
 20123b4:	11003c16 	blt	r2,r4,20124a8 <__adddf3+0x5e4>
 20123b8:	00800804 	movi	r2,32
 20123bc:	1105c83a 	sub	r2,r2,r4
 20123c0:	488e983a 	sll	r7,r9,r2
 20123c4:	310ad83a 	srl	r5,r6,r4
 20123c8:	3084983a 	sll	r2,r6,r2
 20123cc:	4912d83a 	srl	r9,r9,r4
 20123d0:	394ab03a 	or	r5,r7,r5
 20123d4:	1004c03a 	cmpne	r2,r2,zero
 20123d8:	288ab03a 	or	r5,r5,r2
 20123dc:	003f5306 	br	201212c <__adddf3+0x268>
 20123e0:	4448b03a 	or	r4,r8,r17
 20123e4:	20003e26 	beq	r4,zero,20124e0 <__adddf3+0x61c>
 20123e8:	00c6303a 	nor	r3,zero,r3
 20123ec:	18003a1e 	bne	r3,zero,20124d8 <__adddf3+0x614>
 20123f0:	3463c83a 	sub	r17,r6,r17
 20123f4:	4a07c83a 	sub	r3,r9,r8
 20123f8:	344d803a 	cmpltu	r6,r6,r17
 20123fc:	1991c83a 	sub	r8,r3,r6
 2012400:	1021883a 	mov	r16,r2
 2012404:	3825883a 	mov	r18,r7
 2012408:	003f0a06 	br	2012034 <__adddf3+0x170>
 201240c:	2023883a 	mov	r17,r4
 2012410:	003f0d06 	br	2012048 <__adddf3+0x184>
 2012414:	0081ffc4 	movi	r2,2047
 2012418:	80bf3f1e 	bne	r16,r2,2012118 <__adddf3+0x254>
 201241c:	003ec806 	br	2011f40 <__adddf3+0x7c>
 2012420:	0005883a 	mov	r2,zero
 2012424:	003fb106 	br	20122ec <__adddf3+0x428>
 2012428:	0007883a 	mov	r3,zero
 201242c:	003fbc06 	br	2012320 <__adddf3+0x45c>
 2012430:	4444b03a 	or	r2,r8,r17
 2012434:	8000871e 	bne	r16,zero,2012654 <__adddf3+0x790>
 2012438:	1000ba26 	beq	r2,zero,2012724 <__adddf3+0x860>
 201243c:	4984b03a 	or	r2,r9,r6
 2012440:	103ebf26 	beq	r2,zero,2011f40 <__adddf3+0x7c>
 2012444:	8985883a 	add	r2,r17,r6
 2012448:	4247883a 	add	r3,r8,r9
 201244c:	1451803a 	cmpltu	r8,r2,r17
 2012450:	40d1883a 	add	r8,r8,r3
 2012454:	40c0202c 	andhi	r3,r8,128
 2012458:	1023883a 	mov	r17,r2
 201245c:	183f1a26 	beq	r3,zero,20120c8 <__adddf3+0x204>
 2012460:	00bfe034 	movhi	r2,65408
 2012464:	10bfffc4 	addi	r2,r2,-1
 2012468:	2021883a 	mov	r16,r4
 201246c:	4090703a 	and	r8,r8,r2
 2012470:	003eb306 	br	2011f40 <__adddf3+0x7c>
 2012474:	4444b03a 	or	r2,r8,r17
 2012478:	8000291e 	bne	r16,zero,2012520 <__adddf3+0x65c>
 201247c:	10004b1e 	bne	r2,zero,20125ac <__adddf3+0x6e8>
 2012480:	4990b03a 	or	r8,r9,r6
 2012484:	40008b26 	beq	r8,zero,20126b4 <__adddf3+0x7f0>
 2012488:	4811883a 	mov	r8,r9
 201248c:	3023883a 	mov	r17,r6
 2012490:	3825883a 	mov	r18,r7
 2012494:	003eaa06 	br	2011f40 <__adddf3+0x7c>
 2012498:	1021883a 	mov	r16,r2
 201249c:	0011883a 	mov	r8,zero
 20124a0:	0005883a 	mov	r2,zero
 20124a4:	003f0f06 	br	20120e4 <__adddf3+0x220>
 20124a8:	217ff804 	addi	r5,r4,-32
 20124ac:	00800804 	movi	r2,32
 20124b0:	494ad83a 	srl	r5,r9,r5
 20124b4:	20807d26 	beq	r4,r2,20126ac <__adddf3+0x7e8>
 20124b8:	00801004 	movi	r2,64
 20124bc:	1109c83a 	sub	r4,r2,r4
 20124c0:	4912983a 	sll	r9,r9,r4
 20124c4:	498cb03a 	or	r6,r9,r6
 20124c8:	300cc03a 	cmpne	r6,r6,zero
 20124cc:	298ab03a 	or	r5,r5,r6
 20124d0:	0013883a 	mov	r9,zero
 20124d4:	003f1506 	br	201212c <__adddf3+0x268>
 20124d8:	0101ffc4 	movi	r4,2047
 20124dc:	113f9a1e 	bne	r2,r4,2012348 <__adddf3+0x484>
 20124e0:	4811883a 	mov	r8,r9
 20124e4:	3023883a 	mov	r17,r6
 20124e8:	1021883a 	mov	r16,r2
 20124ec:	3825883a 	mov	r18,r7
 20124f0:	003e9306 	br	2011f40 <__adddf3+0x7c>
 20124f4:	8000161e 	bne	r16,zero,2012550 <__adddf3+0x68c>
 20124f8:	444ab03a 	or	r5,r8,r17
 20124fc:	28005126 	beq	r5,zero,2012644 <__adddf3+0x780>
 2012500:	0108303a 	nor	r4,zero,r4
 2012504:	20004d1e 	bne	r4,zero,201263c <__adddf3+0x778>
 2012508:	89a3883a 	add	r17,r17,r6
 201250c:	4253883a 	add	r9,r8,r9
 2012510:	898d803a 	cmpltu	r6,r17,r6
 2012514:	3251883a 	add	r8,r6,r9
 2012518:	1021883a 	mov	r16,r2
 201251c:	003f0806 	br	2012140 <__adddf3+0x27c>
 2012520:	1000301e 	bne	r2,zero,20125e4 <__adddf3+0x720>
 2012524:	4984b03a 	or	r2,r9,r6
 2012528:	10007126 	beq	r2,zero,20126f0 <__adddf3+0x82c>
 201252c:	4811883a 	mov	r8,r9
 2012530:	3023883a 	mov	r17,r6
 2012534:	3825883a 	mov	r18,r7
 2012538:	0401ffc4 	movi	r16,2047
 201253c:	003e8006 	br	2011f40 <__adddf3+0x7c>
 2012540:	4462b03a 	or	r17,r8,r17
 2012544:	8822c03a 	cmpne	r17,r17,zero
 2012548:	0007883a 	mov	r3,zero
 201254c:	003f8b06 	br	201237c <__adddf3+0x4b8>
 2012550:	0141ffc4 	movi	r5,2047
 2012554:	11403b26 	beq	r2,r5,2012644 <__adddf3+0x780>
 2012558:	0109c83a 	sub	r4,zero,r4
 201255c:	42002034 	orhi	r8,r8,128
 2012560:	01400e04 	movi	r5,56
 2012564:	29006716 	blt	r5,r4,2012704 <__adddf3+0x840>
 2012568:	014007c4 	movi	r5,31
 201256c:	29007016 	blt	r5,r4,2012730 <__adddf3+0x86c>
 2012570:	01400804 	movi	r5,32
 2012574:	290bc83a 	sub	r5,r5,r4
 2012578:	4154983a 	sll	r10,r8,r5
 201257c:	890ed83a 	srl	r7,r17,r4
 2012580:	894a983a 	sll	r5,r17,r5
 2012584:	4108d83a 	srl	r4,r8,r4
 2012588:	51e2b03a 	or	r17,r10,r7
 201258c:	280ac03a 	cmpne	r5,r5,zero
 2012590:	8962b03a 	or	r17,r17,r5
 2012594:	89a3883a 	add	r17,r17,r6
 2012598:	2253883a 	add	r9,r4,r9
 201259c:	898d803a 	cmpltu	r6,r17,r6
 20125a0:	3251883a 	add	r8,r6,r9
 20125a4:	1021883a 	mov	r16,r2
 20125a8:	003ee506 	br	2012140 <__adddf3+0x27c>
 20125ac:	4984b03a 	or	r2,r9,r6
 20125b0:	103e6326 	beq	r2,zero,2011f40 <__adddf3+0x7c>
 20125b4:	8987c83a 	sub	r3,r17,r6
 20125b8:	88c9803a 	cmpltu	r4,r17,r3
 20125bc:	4245c83a 	sub	r2,r8,r9
 20125c0:	1105c83a 	sub	r2,r2,r4
 20125c4:	1100202c 	andhi	r4,r2,128
 20125c8:	203ebb26 	beq	r4,zero,20120b8 <__adddf3+0x1f4>
 20125cc:	3463c83a 	sub	r17,r6,r17
 20125d0:	4a07c83a 	sub	r3,r9,r8
 20125d4:	344d803a 	cmpltu	r6,r6,r17
 20125d8:	1991c83a 	sub	r8,r3,r6
 20125dc:	3825883a 	mov	r18,r7
 20125e0:	003e5706 	br	2011f40 <__adddf3+0x7c>
 20125e4:	4984b03a 	or	r2,r9,r6
 20125e8:	10002e26 	beq	r2,zero,20126a4 <__adddf3+0x7e0>
 20125ec:	4004d0fa 	srli	r2,r8,3
 20125f0:	8822d0fa 	srli	r17,r17,3
 20125f4:	4010977a 	slli	r8,r8,29
 20125f8:	10c0022c 	andhi	r3,r2,8
 20125fc:	4462b03a 	or	r17,r8,r17
 2012600:	18000826 	beq	r3,zero,2012624 <__adddf3+0x760>
 2012604:	4808d0fa 	srli	r4,r9,3
 2012608:	20c0022c 	andhi	r3,r4,8
 201260c:	1800051e 	bne	r3,zero,2012624 <__adddf3+0x760>
 2012610:	300cd0fa 	srli	r6,r6,3
 2012614:	4806977a 	slli	r3,r9,29
 2012618:	2005883a 	mov	r2,r4
 201261c:	3825883a 	mov	r18,r7
 2012620:	19a2b03a 	or	r17,r3,r6
 2012624:	8810d77a 	srli	r8,r17,29
 2012628:	100490fa 	slli	r2,r2,3
 201262c:	882290fa 	slli	r17,r17,3
 2012630:	0401ffc4 	movi	r16,2047
 2012634:	4090b03a 	or	r8,r8,r2
 2012638:	003e4106 	br	2011f40 <__adddf3+0x7c>
 201263c:	0141ffc4 	movi	r5,2047
 2012640:	117fc71e 	bne	r2,r5,2012560 <__adddf3+0x69c>
 2012644:	4811883a 	mov	r8,r9
 2012648:	3023883a 	mov	r17,r6
 201264c:	1021883a 	mov	r16,r2
 2012650:	003e3b06 	br	2011f40 <__adddf3+0x7c>
 2012654:	10002f26 	beq	r2,zero,2012714 <__adddf3+0x850>
 2012658:	4984b03a 	or	r2,r9,r6
 201265c:	10001126 	beq	r2,zero,20126a4 <__adddf3+0x7e0>
 2012660:	4004d0fa 	srli	r2,r8,3
 2012664:	8822d0fa 	srli	r17,r17,3
 2012668:	4010977a 	slli	r8,r8,29
 201266c:	10c0022c 	andhi	r3,r2,8
 2012670:	4462b03a 	or	r17,r8,r17
 2012674:	183feb26 	beq	r3,zero,2012624 <__adddf3+0x760>
 2012678:	4808d0fa 	srli	r4,r9,3
 201267c:	20c0022c 	andhi	r3,r4,8
 2012680:	183fe81e 	bne	r3,zero,2012624 <__adddf3+0x760>
 2012684:	300cd0fa 	srli	r6,r6,3
 2012688:	4806977a 	slli	r3,r9,29
 201268c:	2005883a 	mov	r2,r4
 2012690:	19a2b03a 	or	r17,r3,r6
 2012694:	003fe306 	br	2012624 <__adddf3+0x760>
 2012698:	0011883a 	mov	r8,zero
 201269c:	0005883a 	mov	r2,zero
 20126a0:	003e3f06 	br	2011fa0 <__adddf3+0xdc>
 20126a4:	0401ffc4 	movi	r16,2047
 20126a8:	003e2506 	br	2011f40 <__adddf3+0x7c>
 20126ac:	0013883a 	mov	r9,zero
 20126b0:	003f8406 	br	20124c4 <__adddf3+0x600>
 20126b4:	0005883a 	mov	r2,zero
 20126b8:	0007883a 	mov	r3,zero
 20126bc:	003e8906 	br	20120e4 <__adddf3+0x220>
 20126c0:	197ff804 	addi	r5,r3,-32
 20126c4:	01000804 	movi	r4,32
 20126c8:	414ad83a 	srl	r5,r8,r5
 20126cc:	19002426 	beq	r3,r4,2012760 <__adddf3+0x89c>
 20126d0:	01001004 	movi	r4,64
 20126d4:	20c7c83a 	sub	r3,r4,r3
 20126d8:	40c6983a 	sll	r3,r8,r3
 20126dc:	1c46b03a 	or	r3,r3,r17
 20126e0:	1806c03a 	cmpne	r3,r3,zero
 20126e4:	28e2b03a 	or	r17,r5,r3
 20126e8:	0007883a 	mov	r3,zero
 20126ec:	003f2306 	br	201237c <__adddf3+0x4b8>
 20126f0:	0007883a 	mov	r3,zero
 20126f4:	5811883a 	mov	r8,r11
 20126f8:	00bfffc4 	movi	r2,-1
 20126fc:	0401ffc4 	movi	r16,2047
 2012700:	003e7806 	br	20120e4 <__adddf3+0x220>
 2012704:	4462b03a 	or	r17,r8,r17
 2012708:	8822c03a 	cmpne	r17,r17,zero
 201270c:	0009883a 	mov	r4,zero
 2012710:	003fa006 	br	2012594 <__adddf3+0x6d0>
 2012714:	4811883a 	mov	r8,r9
 2012718:	3023883a 	mov	r17,r6
 201271c:	0401ffc4 	movi	r16,2047
 2012720:	003e0706 	br	2011f40 <__adddf3+0x7c>
 2012724:	4811883a 	mov	r8,r9
 2012728:	3023883a 	mov	r17,r6
 201272c:	003e0406 	br	2011f40 <__adddf3+0x7c>
 2012730:	21fff804 	addi	r7,r4,-32
 2012734:	01400804 	movi	r5,32
 2012738:	41ced83a 	srl	r7,r8,r7
 201273c:	21400a26 	beq	r4,r5,2012768 <__adddf3+0x8a4>
 2012740:	01401004 	movi	r5,64
 2012744:	2909c83a 	sub	r4,r5,r4
 2012748:	4108983a 	sll	r4,r8,r4
 201274c:	2448b03a 	or	r4,r4,r17
 2012750:	2008c03a 	cmpne	r4,r4,zero
 2012754:	3922b03a 	or	r17,r7,r4
 2012758:	0009883a 	mov	r4,zero
 201275c:	003f8d06 	br	2012594 <__adddf3+0x6d0>
 2012760:	0007883a 	mov	r3,zero
 2012764:	003fdd06 	br	20126dc <__adddf3+0x818>
 2012768:	0009883a 	mov	r4,zero
 201276c:	003ff706 	br	201274c <__adddf3+0x888>

02012770 <__eqdf2>:
 2012770:	2804d53a 	srli	r2,r5,20
 2012774:	3806d53a 	srli	r3,r7,20
 2012778:	02000434 	movhi	r8,16
 201277c:	423fffc4 	addi	r8,r8,-1
 2012780:	1081ffcc 	andi	r2,r2,2047
 2012784:	0281ffc4 	movi	r10,2047
 2012788:	2a12703a 	and	r9,r5,r8
 201278c:	18c1ffcc 	andi	r3,r3,2047
 2012790:	3a10703a 	and	r8,r7,r8
 2012794:	280ad7fa 	srli	r5,r5,31
 2012798:	380ed7fa 	srli	r7,r7,31
 201279c:	12801026 	beq	r2,r10,20127e0 <__eqdf2+0x70>
 20127a0:	0281ffc4 	movi	r10,2047
 20127a4:	1a800a26 	beq	r3,r10,20127d0 <__eqdf2+0x60>
 20127a8:	10c00226 	beq	r2,r3,20127b4 <__eqdf2+0x44>
 20127ac:	00800044 	movi	r2,1
 20127b0:	f800283a 	ret
 20127b4:	4a3ffd1e 	bne	r9,r8,20127ac <__eqdf2+0x3c>
 20127b8:	21bffc1e 	bne	r4,r6,20127ac <__eqdf2+0x3c>
 20127bc:	29c00c26 	beq	r5,r7,20127f0 <__eqdf2+0x80>
 20127c0:	103ffa1e 	bne	r2,zero,20127ac <__eqdf2+0x3c>
 20127c4:	2244b03a 	or	r2,r4,r9
 20127c8:	1004c03a 	cmpne	r2,r2,zero
 20127cc:	f800283a 	ret
 20127d0:	3214b03a 	or	r10,r6,r8
 20127d4:	503ff426 	beq	r10,zero,20127a8 <__eqdf2+0x38>
 20127d8:	00800044 	movi	r2,1
 20127dc:	f800283a 	ret
 20127e0:	2254b03a 	or	r10,r4,r9
 20127e4:	503fee26 	beq	r10,zero,20127a0 <__eqdf2+0x30>
 20127e8:	00800044 	movi	r2,1
 20127ec:	f800283a 	ret
 20127f0:	0005883a 	mov	r2,zero
 20127f4:	f800283a 	ret

020127f8 <__subdf3>:
 20127f8:	02000434 	movhi	r8,16
 20127fc:	423fffc4 	addi	r8,r8,-1
 2012800:	defffb04 	addi	sp,sp,-20
 2012804:	2a14703a 	and	r10,r5,r8
 2012808:	3812d53a 	srli	r9,r7,20
 201280c:	3a10703a 	and	r8,r7,r8
 2012810:	2006d77a 	srli	r3,r4,29
 2012814:	3004d77a 	srli	r2,r6,29
 2012818:	dc000015 	stw	r16,0(sp)
 201281c:	501490fa 	slli	r10,r10,3
 2012820:	2820d53a 	srli	r16,r5,20
 2012824:	401090fa 	slli	r8,r8,3
 2012828:	dc800215 	stw	r18,8(sp)
 201282c:	dc400115 	stw	r17,4(sp)
 2012830:	dfc00415 	stw	ra,16(sp)
 2012834:	202290fa 	slli	r17,r4,3
 2012838:	dcc00315 	stw	r19,12(sp)
 201283c:	4a41ffcc 	andi	r9,r9,2047
 2012840:	0101ffc4 	movi	r4,2047
 2012844:	2824d7fa 	srli	r18,r5,31
 2012848:	8401ffcc 	andi	r16,r16,2047
 201284c:	50c6b03a 	or	r3,r10,r3
 2012850:	380ed7fa 	srli	r7,r7,31
 2012854:	408ab03a 	or	r5,r8,r2
 2012858:	300c90fa 	slli	r6,r6,3
 201285c:	49009626 	beq	r9,r4,2012ab8 <__subdf3+0x2c0>
 2012860:	39c0005c 	xori	r7,r7,1
 2012864:	8245c83a 	sub	r2,r16,r9
 2012868:	3c807426 	beq	r7,r18,2012a3c <__subdf3+0x244>
 201286c:	0080af0e 	bge	zero,r2,2012b2c <__subdf3+0x334>
 2012870:	48002a1e 	bne	r9,zero,201291c <__subdf3+0x124>
 2012874:	2988b03a 	or	r4,r5,r6
 2012878:	20009a1e 	bne	r4,zero,2012ae4 <__subdf3+0x2ec>
 201287c:	888001cc 	andi	r2,r17,7
 2012880:	10000726 	beq	r2,zero,20128a0 <__subdf3+0xa8>
 2012884:	888003cc 	andi	r2,r17,15
 2012888:	01000104 	movi	r4,4
 201288c:	11000426 	beq	r2,r4,20128a0 <__subdf3+0xa8>
 2012890:	890b883a 	add	r5,r17,r4
 2012894:	2c63803a 	cmpltu	r17,r5,r17
 2012898:	1c47883a 	add	r3,r3,r17
 201289c:	2823883a 	mov	r17,r5
 20128a0:	1880202c 	andhi	r2,r3,128
 20128a4:	10005926 	beq	r2,zero,2012a0c <__subdf3+0x214>
 20128a8:	84000044 	addi	r16,r16,1
 20128ac:	0081ffc4 	movi	r2,2047
 20128b0:	8080be26 	beq	r16,r2,2012bac <__subdf3+0x3b4>
 20128b4:	017fe034 	movhi	r5,65408
 20128b8:	297fffc4 	addi	r5,r5,-1
 20128bc:	1946703a 	and	r3,r3,r5
 20128c0:	1804977a 	slli	r2,r3,29
 20128c4:	1806927a 	slli	r3,r3,9
 20128c8:	8822d0fa 	srli	r17,r17,3
 20128cc:	8401ffcc 	andi	r16,r16,2047
 20128d0:	180ad33a 	srli	r5,r3,12
 20128d4:	9100004c 	andi	r4,r18,1
 20128d8:	1444b03a 	or	r2,r2,r17
 20128dc:	80c1ffcc 	andi	r3,r16,2047
 20128e0:	1820953a 	slli	r16,r3,20
 20128e4:	20c03fcc 	andi	r3,r4,255
 20128e8:	180897fa 	slli	r4,r3,31
 20128ec:	00c00434 	movhi	r3,16
 20128f0:	18ffffc4 	addi	r3,r3,-1
 20128f4:	28c6703a 	and	r3,r5,r3
 20128f8:	1c06b03a 	or	r3,r3,r16
 20128fc:	1906b03a 	or	r3,r3,r4
 2012900:	dfc00417 	ldw	ra,16(sp)
 2012904:	dcc00317 	ldw	r19,12(sp)
 2012908:	dc800217 	ldw	r18,8(sp)
 201290c:	dc400117 	ldw	r17,4(sp)
 2012910:	dc000017 	ldw	r16,0(sp)
 2012914:	dec00504 	addi	sp,sp,20
 2012918:	f800283a 	ret
 201291c:	0101ffc4 	movi	r4,2047
 2012920:	813fd626 	beq	r16,r4,201287c <__subdf3+0x84>
 2012924:	29402034 	orhi	r5,r5,128
 2012928:	01000e04 	movi	r4,56
 201292c:	2080a316 	blt	r4,r2,2012bbc <__subdf3+0x3c4>
 2012930:	010007c4 	movi	r4,31
 2012934:	2080c616 	blt	r4,r2,2012c50 <__subdf3+0x458>
 2012938:	01000804 	movi	r4,32
 201293c:	2089c83a 	sub	r4,r4,r2
 2012940:	2910983a 	sll	r8,r5,r4
 2012944:	308ed83a 	srl	r7,r6,r2
 2012948:	3108983a 	sll	r4,r6,r4
 201294c:	2884d83a 	srl	r2,r5,r2
 2012950:	41ccb03a 	or	r6,r8,r7
 2012954:	2008c03a 	cmpne	r4,r4,zero
 2012958:	310cb03a 	or	r6,r6,r4
 201295c:	898dc83a 	sub	r6,r17,r6
 2012960:	89a3803a 	cmpltu	r17,r17,r6
 2012964:	1887c83a 	sub	r3,r3,r2
 2012968:	1c47c83a 	sub	r3,r3,r17
 201296c:	3023883a 	mov	r17,r6
 2012970:	1880202c 	andhi	r2,r3,128
 2012974:	10002326 	beq	r2,zero,2012a04 <__subdf3+0x20c>
 2012978:	04c02034 	movhi	r19,128
 201297c:	9cffffc4 	addi	r19,r19,-1
 2012980:	1ce6703a 	and	r19,r3,r19
 2012984:	98007a26 	beq	r19,zero,2012b70 <__subdf3+0x378>
 2012988:	9809883a 	mov	r4,r19
 201298c:	2004a440 	call	2004a44 <__clzsi2>
 2012990:	113ffe04 	addi	r4,r2,-8
 2012994:	00c007c4 	movi	r3,31
 2012998:	19007b16 	blt	r3,r4,2012b88 <__subdf3+0x390>
 201299c:	00800804 	movi	r2,32
 20129a0:	1105c83a 	sub	r2,r2,r4
 20129a4:	8884d83a 	srl	r2,r17,r2
 20129a8:	9906983a 	sll	r3,r19,r4
 20129ac:	8922983a 	sll	r17,r17,r4
 20129b0:	10c4b03a 	or	r2,r2,r3
 20129b4:	24007816 	blt	r4,r16,2012b98 <__subdf3+0x3a0>
 20129b8:	2421c83a 	sub	r16,r4,r16
 20129bc:	80c00044 	addi	r3,r16,1
 20129c0:	010007c4 	movi	r4,31
 20129c4:	20c09516 	blt	r4,r3,2012c1c <__subdf3+0x424>
 20129c8:	01400804 	movi	r5,32
 20129cc:	28cbc83a 	sub	r5,r5,r3
 20129d0:	88c8d83a 	srl	r4,r17,r3
 20129d4:	8962983a 	sll	r17,r17,r5
 20129d8:	114a983a 	sll	r5,r2,r5
 20129dc:	10c6d83a 	srl	r3,r2,r3
 20129e0:	8804c03a 	cmpne	r2,r17,zero
 20129e4:	290ab03a 	or	r5,r5,r4
 20129e8:	28a2b03a 	or	r17,r5,r2
 20129ec:	0021883a 	mov	r16,zero
 20129f0:	003fa206 	br	201287c <__subdf3+0x84>
 20129f4:	2090b03a 	or	r8,r4,r2
 20129f8:	40018e26 	beq	r8,zero,2013034 <__subdf3+0x83c>
 20129fc:	1007883a 	mov	r3,r2
 2012a00:	2023883a 	mov	r17,r4
 2012a04:	888001cc 	andi	r2,r17,7
 2012a08:	103f9e1e 	bne	r2,zero,2012884 <__subdf3+0x8c>
 2012a0c:	1804977a 	slli	r2,r3,29
 2012a10:	8822d0fa 	srli	r17,r17,3
 2012a14:	1810d0fa 	srli	r8,r3,3
 2012a18:	9100004c 	andi	r4,r18,1
 2012a1c:	1444b03a 	or	r2,r2,r17
 2012a20:	00c1ffc4 	movi	r3,2047
 2012a24:	80c02826 	beq	r16,r3,2012ac8 <__subdf3+0x2d0>
 2012a28:	01400434 	movhi	r5,16
 2012a2c:	297fffc4 	addi	r5,r5,-1
 2012a30:	80e0703a 	and	r16,r16,r3
 2012a34:	414a703a 	and	r5,r8,r5
 2012a38:	003fa806 	br	20128dc <__subdf3+0xe4>
 2012a3c:	0080630e 	bge	zero,r2,2012bcc <__subdf3+0x3d4>
 2012a40:	48003026 	beq	r9,zero,2012b04 <__subdf3+0x30c>
 2012a44:	0101ffc4 	movi	r4,2047
 2012a48:	813f8c26 	beq	r16,r4,201287c <__subdf3+0x84>
 2012a4c:	29402034 	orhi	r5,r5,128
 2012a50:	01000e04 	movi	r4,56
 2012a54:	2080a90e 	bge	r4,r2,2012cfc <__subdf3+0x504>
 2012a58:	298cb03a 	or	r6,r5,r6
 2012a5c:	3012c03a 	cmpne	r9,r6,zero
 2012a60:	0005883a 	mov	r2,zero
 2012a64:	4c53883a 	add	r9,r9,r17
 2012a68:	4c63803a 	cmpltu	r17,r9,r17
 2012a6c:	10c7883a 	add	r3,r2,r3
 2012a70:	88c7883a 	add	r3,r17,r3
 2012a74:	4823883a 	mov	r17,r9
 2012a78:	1880202c 	andhi	r2,r3,128
 2012a7c:	1000d026 	beq	r2,zero,2012dc0 <__subdf3+0x5c8>
 2012a80:	84000044 	addi	r16,r16,1
 2012a84:	0081ffc4 	movi	r2,2047
 2012a88:	8080fe26 	beq	r16,r2,2012e84 <__subdf3+0x68c>
 2012a8c:	00bfe034 	movhi	r2,65408
 2012a90:	10bfffc4 	addi	r2,r2,-1
 2012a94:	1886703a 	and	r3,r3,r2
 2012a98:	880ad07a 	srli	r5,r17,1
 2012a9c:	180497fa 	slli	r2,r3,31
 2012aa0:	8900004c 	andi	r4,r17,1
 2012aa4:	2922b03a 	or	r17,r5,r4
 2012aa8:	1806d07a 	srli	r3,r3,1
 2012aac:	1462b03a 	or	r17,r2,r17
 2012ab0:	3825883a 	mov	r18,r7
 2012ab4:	003f7106 	br	201287c <__subdf3+0x84>
 2012ab8:	2984b03a 	or	r2,r5,r6
 2012abc:	103f6826 	beq	r2,zero,2012860 <__subdf3+0x68>
 2012ac0:	39c03fcc 	andi	r7,r7,255
 2012ac4:	003f6706 	br	2012864 <__subdf3+0x6c>
 2012ac8:	4086b03a 	or	r3,r8,r2
 2012acc:	18015226 	beq	r3,zero,2013018 <__subdf3+0x820>
 2012ad0:	00c00434 	movhi	r3,16
 2012ad4:	41400234 	orhi	r5,r8,8
 2012ad8:	18ffffc4 	addi	r3,r3,-1
 2012adc:	28ca703a 	and	r5,r5,r3
 2012ae0:	003f7e06 	br	20128dc <__subdf3+0xe4>
 2012ae4:	10bfffc4 	addi	r2,r2,-1
 2012ae8:	1000491e 	bne	r2,zero,2012c10 <__subdf3+0x418>
 2012aec:	898fc83a 	sub	r7,r17,r6
 2012af0:	89e3803a 	cmpltu	r17,r17,r7
 2012af4:	1947c83a 	sub	r3,r3,r5
 2012af8:	1c47c83a 	sub	r3,r3,r17
 2012afc:	3823883a 	mov	r17,r7
 2012b00:	003f9b06 	br	2012970 <__subdf3+0x178>
 2012b04:	2988b03a 	or	r4,r5,r6
 2012b08:	203f5c26 	beq	r4,zero,201287c <__subdf3+0x84>
 2012b0c:	10bfffc4 	addi	r2,r2,-1
 2012b10:	1000931e 	bne	r2,zero,2012d60 <__subdf3+0x568>
 2012b14:	898d883a 	add	r6,r17,r6
 2012b18:	3463803a 	cmpltu	r17,r6,r17
 2012b1c:	1947883a 	add	r3,r3,r5
 2012b20:	88c7883a 	add	r3,r17,r3
 2012b24:	3023883a 	mov	r17,r6
 2012b28:	003fd306 	br	2012a78 <__subdf3+0x280>
 2012b2c:	1000541e 	bne	r2,zero,2012c80 <__subdf3+0x488>
 2012b30:	80800044 	addi	r2,r16,1
 2012b34:	1081ffcc 	andi	r2,r2,2047
 2012b38:	01000044 	movi	r4,1
 2012b3c:	2080a20e 	bge	r4,r2,2012dc8 <__subdf3+0x5d0>
 2012b40:	8989c83a 	sub	r4,r17,r6
 2012b44:	8905803a 	cmpltu	r2,r17,r4
 2012b48:	1967c83a 	sub	r19,r3,r5
 2012b4c:	98a7c83a 	sub	r19,r19,r2
 2012b50:	9880202c 	andhi	r2,r19,128
 2012b54:	10006326 	beq	r2,zero,2012ce4 <__subdf3+0x4ec>
 2012b58:	3463c83a 	sub	r17,r6,r17
 2012b5c:	28c7c83a 	sub	r3,r5,r3
 2012b60:	344d803a 	cmpltu	r6,r6,r17
 2012b64:	19a7c83a 	sub	r19,r3,r6
 2012b68:	3825883a 	mov	r18,r7
 2012b6c:	983f861e 	bne	r19,zero,2012988 <__subdf3+0x190>
 2012b70:	8809883a 	mov	r4,r17
 2012b74:	2004a440 	call	2004a44 <__clzsi2>
 2012b78:	10800804 	addi	r2,r2,32
 2012b7c:	113ffe04 	addi	r4,r2,-8
 2012b80:	00c007c4 	movi	r3,31
 2012b84:	193f850e 	bge	r3,r4,201299c <__subdf3+0x1a4>
 2012b88:	10bff604 	addi	r2,r2,-40
 2012b8c:	8884983a 	sll	r2,r17,r2
 2012b90:	0023883a 	mov	r17,zero
 2012b94:	243f880e 	bge	r4,r16,20129b8 <__subdf3+0x1c0>
 2012b98:	00ffe034 	movhi	r3,65408
 2012b9c:	18ffffc4 	addi	r3,r3,-1
 2012ba0:	8121c83a 	sub	r16,r16,r4
 2012ba4:	10c6703a 	and	r3,r2,r3
 2012ba8:	003f3406 	br	201287c <__subdf3+0x84>
 2012bac:	9100004c 	andi	r4,r18,1
 2012bb0:	000b883a 	mov	r5,zero
 2012bb4:	0005883a 	mov	r2,zero
 2012bb8:	003f4806 	br	20128dc <__subdf3+0xe4>
 2012bbc:	298cb03a 	or	r6,r5,r6
 2012bc0:	300cc03a 	cmpne	r6,r6,zero
 2012bc4:	0005883a 	mov	r2,zero
 2012bc8:	003f6406 	br	201295c <__subdf3+0x164>
 2012bcc:	10009a1e 	bne	r2,zero,2012e38 <__subdf3+0x640>
 2012bd0:	82400044 	addi	r9,r16,1
 2012bd4:	4881ffcc 	andi	r2,r9,2047
 2012bd8:	02800044 	movi	r10,1
 2012bdc:	5080670e 	bge	r10,r2,2012d7c <__subdf3+0x584>
 2012be0:	0081ffc4 	movi	r2,2047
 2012be4:	4880af26 	beq	r9,r2,2012ea4 <__subdf3+0x6ac>
 2012be8:	898d883a 	add	r6,r17,r6
 2012bec:	1945883a 	add	r2,r3,r5
 2012bf0:	3447803a 	cmpltu	r3,r6,r17
 2012bf4:	1887883a 	add	r3,r3,r2
 2012bf8:	182297fa 	slli	r17,r3,31
 2012bfc:	300cd07a 	srli	r6,r6,1
 2012c00:	1806d07a 	srli	r3,r3,1
 2012c04:	4821883a 	mov	r16,r9
 2012c08:	89a2b03a 	or	r17,r17,r6
 2012c0c:	003f1b06 	br	201287c <__subdf3+0x84>
 2012c10:	0101ffc4 	movi	r4,2047
 2012c14:	813f441e 	bne	r16,r4,2012928 <__subdf3+0x130>
 2012c18:	003f1806 	br	201287c <__subdf3+0x84>
 2012c1c:	843ff844 	addi	r16,r16,-31
 2012c20:	01400804 	movi	r5,32
 2012c24:	1408d83a 	srl	r4,r2,r16
 2012c28:	19405026 	beq	r3,r5,2012d6c <__subdf3+0x574>
 2012c2c:	01401004 	movi	r5,64
 2012c30:	28c7c83a 	sub	r3,r5,r3
 2012c34:	10c4983a 	sll	r2,r2,r3
 2012c38:	88a2b03a 	or	r17,r17,r2
 2012c3c:	8822c03a 	cmpne	r17,r17,zero
 2012c40:	2462b03a 	or	r17,r4,r17
 2012c44:	0007883a 	mov	r3,zero
 2012c48:	0021883a 	mov	r16,zero
 2012c4c:	003f6d06 	br	2012a04 <__subdf3+0x20c>
 2012c50:	11fff804 	addi	r7,r2,-32
 2012c54:	01000804 	movi	r4,32
 2012c58:	29ced83a 	srl	r7,r5,r7
 2012c5c:	11004526 	beq	r2,r4,2012d74 <__subdf3+0x57c>
 2012c60:	01001004 	movi	r4,64
 2012c64:	2089c83a 	sub	r4,r4,r2
 2012c68:	2904983a 	sll	r2,r5,r4
 2012c6c:	118cb03a 	or	r6,r2,r6
 2012c70:	300cc03a 	cmpne	r6,r6,zero
 2012c74:	398cb03a 	or	r6,r7,r6
 2012c78:	0005883a 	mov	r2,zero
 2012c7c:	003f3706 	br	201295c <__subdf3+0x164>
 2012c80:	80002a26 	beq	r16,zero,2012d2c <__subdf3+0x534>
 2012c84:	0101ffc4 	movi	r4,2047
 2012c88:	49006626 	beq	r9,r4,2012e24 <__subdf3+0x62c>
 2012c8c:	0085c83a 	sub	r2,zero,r2
 2012c90:	18c02034 	orhi	r3,r3,128
 2012c94:	01000e04 	movi	r4,56
 2012c98:	20807e16 	blt	r4,r2,2012e94 <__subdf3+0x69c>
 2012c9c:	010007c4 	movi	r4,31
 2012ca0:	2080e716 	blt	r4,r2,2013040 <__subdf3+0x848>
 2012ca4:	01000804 	movi	r4,32
 2012ca8:	2089c83a 	sub	r4,r4,r2
 2012cac:	1914983a 	sll	r10,r3,r4
 2012cb0:	8890d83a 	srl	r8,r17,r2
 2012cb4:	8908983a 	sll	r4,r17,r4
 2012cb8:	1884d83a 	srl	r2,r3,r2
 2012cbc:	5222b03a 	or	r17,r10,r8
 2012cc0:	2006c03a 	cmpne	r3,r4,zero
 2012cc4:	88e2b03a 	or	r17,r17,r3
 2012cc8:	3463c83a 	sub	r17,r6,r17
 2012ccc:	2885c83a 	sub	r2,r5,r2
 2012cd0:	344d803a 	cmpltu	r6,r6,r17
 2012cd4:	1187c83a 	sub	r3,r2,r6
 2012cd8:	4821883a 	mov	r16,r9
 2012cdc:	3825883a 	mov	r18,r7
 2012ce0:	003f2306 	br	2012970 <__subdf3+0x178>
 2012ce4:	24d0b03a 	or	r8,r4,r19
 2012ce8:	40001b1e 	bne	r8,zero,2012d58 <__subdf3+0x560>
 2012cec:	0005883a 	mov	r2,zero
 2012cf0:	0009883a 	mov	r4,zero
 2012cf4:	0021883a 	mov	r16,zero
 2012cf8:	003f4906 	br	2012a20 <__subdf3+0x228>
 2012cfc:	010007c4 	movi	r4,31
 2012d00:	20803a16 	blt	r4,r2,2012dec <__subdf3+0x5f4>
 2012d04:	01000804 	movi	r4,32
 2012d08:	2089c83a 	sub	r4,r4,r2
 2012d0c:	2912983a 	sll	r9,r5,r4
 2012d10:	3090d83a 	srl	r8,r6,r2
 2012d14:	3108983a 	sll	r4,r6,r4
 2012d18:	2884d83a 	srl	r2,r5,r2
 2012d1c:	4a12b03a 	or	r9,r9,r8
 2012d20:	2008c03a 	cmpne	r4,r4,zero
 2012d24:	4912b03a 	or	r9,r9,r4
 2012d28:	003f4e06 	br	2012a64 <__subdf3+0x26c>
 2012d2c:	1c48b03a 	or	r4,r3,r17
 2012d30:	20003c26 	beq	r4,zero,2012e24 <__subdf3+0x62c>
 2012d34:	0084303a 	nor	r2,zero,r2
 2012d38:	1000381e 	bne	r2,zero,2012e1c <__subdf3+0x624>
 2012d3c:	3463c83a 	sub	r17,r6,r17
 2012d40:	28c5c83a 	sub	r2,r5,r3
 2012d44:	344d803a 	cmpltu	r6,r6,r17
 2012d48:	1187c83a 	sub	r3,r2,r6
 2012d4c:	4821883a 	mov	r16,r9
 2012d50:	3825883a 	mov	r18,r7
 2012d54:	003f0606 	br	2012970 <__subdf3+0x178>
 2012d58:	2023883a 	mov	r17,r4
 2012d5c:	003f0906 	br	2012984 <__subdf3+0x18c>
 2012d60:	0101ffc4 	movi	r4,2047
 2012d64:	813f3a1e 	bne	r16,r4,2012a50 <__subdf3+0x258>
 2012d68:	003ec406 	br	201287c <__subdf3+0x84>
 2012d6c:	0005883a 	mov	r2,zero
 2012d70:	003fb106 	br	2012c38 <__subdf3+0x440>
 2012d74:	0005883a 	mov	r2,zero
 2012d78:	003fbc06 	br	2012c6c <__subdf3+0x474>
 2012d7c:	1c44b03a 	or	r2,r3,r17
 2012d80:	80008e1e 	bne	r16,zero,2012fbc <__subdf3+0x7c4>
 2012d84:	1000c826 	beq	r2,zero,20130a8 <__subdf3+0x8b0>
 2012d88:	2984b03a 	or	r2,r5,r6
 2012d8c:	103ebb26 	beq	r2,zero,201287c <__subdf3+0x84>
 2012d90:	8989883a 	add	r4,r17,r6
 2012d94:	1945883a 	add	r2,r3,r5
 2012d98:	2447803a 	cmpltu	r3,r4,r17
 2012d9c:	1887883a 	add	r3,r3,r2
 2012da0:	1880202c 	andhi	r2,r3,128
 2012da4:	2023883a 	mov	r17,r4
 2012da8:	103f1626 	beq	r2,zero,2012a04 <__subdf3+0x20c>
 2012dac:	00bfe034 	movhi	r2,65408
 2012db0:	10bfffc4 	addi	r2,r2,-1
 2012db4:	5021883a 	mov	r16,r10
 2012db8:	1886703a 	and	r3,r3,r2
 2012dbc:	003eaf06 	br	201287c <__subdf3+0x84>
 2012dc0:	3825883a 	mov	r18,r7
 2012dc4:	003f0f06 	br	2012a04 <__subdf3+0x20c>
 2012dc8:	1c44b03a 	or	r2,r3,r17
 2012dcc:	8000251e 	bne	r16,zero,2012e64 <__subdf3+0x66c>
 2012dd0:	1000661e 	bne	r2,zero,2012f6c <__subdf3+0x774>
 2012dd4:	2990b03a 	or	r8,r5,r6
 2012dd8:	40009626 	beq	r8,zero,2013034 <__subdf3+0x83c>
 2012ddc:	2807883a 	mov	r3,r5
 2012de0:	3023883a 	mov	r17,r6
 2012de4:	3825883a 	mov	r18,r7
 2012de8:	003ea406 	br	201287c <__subdf3+0x84>
 2012dec:	127ff804 	addi	r9,r2,-32
 2012df0:	01000804 	movi	r4,32
 2012df4:	2a52d83a 	srl	r9,r5,r9
 2012df8:	11008c26 	beq	r2,r4,201302c <__subdf3+0x834>
 2012dfc:	01001004 	movi	r4,64
 2012e00:	2085c83a 	sub	r2,r4,r2
 2012e04:	2884983a 	sll	r2,r5,r2
 2012e08:	118cb03a 	or	r6,r2,r6
 2012e0c:	300cc03a 	cmpne	r6,r6,zero
 2012e10:	4992b03a 	or	r9,r9,r6
 2012e14:	0005883a 	mov	r2,zero
 2012e18:	003f1206 	br	2012a64 <__subdf3+0x26c>
 2012e1c:	0101ffc4 	movi	r4,2047
 2012e20:	493f9c1e 	bne	r9,r4,2012c94 <__subdf3+0x49c>
 2012e24:	2807883a 	mov	r3,r5
 2012e28:	3023883a 	mov	r17,r6
 2012e2c:	4821883a 	mov	r16,r9
 2012e30:	3825883a 	mov	r18,r7
 2012e34:	003e9106 	br	201287c <__subdf3+0x84>
 2012e38:	80001f1e 	bne	r16,zero,2012eb8 <__subdf3+0x6c0>
 2012e3c:	1c48b03a 	or	r4,r3,r17
 2012e40:	20005a26 	beq	r4,zero,2012fac <__subdf3+0x7b4>
 2012e44:	0084303a 	nor	r2,zero,r2
 2012e48:	1000561e 	bne	r2,zero,2012fa4 <__subdf3+0x7ac>
 2012e4c:	89a3883a 	add	r17,r17,r6
 2012e50:	1945883a 	add	r2,r3,r5
 2012e54:	898d803a 	cmpltu	r6,r17,r6
 2012e58:	3087883a 	add	r3,r6,r2
 2012e5c:	4821883a 	mov	r16,r9
 2012e60:	003f0506 	br	2012a78 <__subdf3+0x280>
 2012e64:	10002b1e 	bne	r2,zero,2012f14 <__subdf3+0x71c>
 2012e68:	2984b03a 	or	r2,r5,r6
 2012e6c:	10008026 	beq	r2,zero,2013070 <__subdf3+0x878>
 2012e70:	2807883a 	mov	r3,r5
 2012e74:	3023883a 	mov	r17,r6
 2012e78:	3825883a 	mov	r18,r7
 2012e7c:	0401ffc4 	movi	r16,2047
 2012e80:	003e7e06 	br	201287c <__subdf3+0x84>
 2012e84:	3809883a 	mov	r4,r7
 2012e88:	0011883a 	mov	r8,zero
 2012e8c:	0005883a 	mov	r2,zero
 2012e90:	003ee306 	br	2012a20 <__subdf3+0x228>
 2012e94:	1c62b03a 	or	r17,r3,r17
 2012e98:	8822c03a 	cmpne	r17,r17,zero
 2012e9c:	0005883a 	mov	r2,zero
 2012ea0:	003f8906 	br	2012cc8 <__subdf3+0x4d0>
 2012ea4:	3809883a 	mov	r4,r7
 2012ea8:	4821883a 	mov	r16,r9
 2012eac:	0011883a 	mov	r8,zero
 2012eb0:	0005883a 	mov	r2,zero
 2012eb4:	003eda06 	br	2012a20 <__subdf3+0x228>
 2012eb8:	0101ffc4 	movi	r4,2047
 2012ebc:	49003b26 	beq	r9,r4,2012fac <__subdf3+0x7b4>
 2012ec0:	0085c83a 	sub	r2,zero,r2
 2012ec4:	18c02034 	orhi	r3,r3,128
 2012ec8:	01000e04 	movi	r4,56
 2012ecc:	20806e16 	blt	r4,r2,2013088 <__subdf3+0x890>
 2012ed0:	010007c4 	movi	r4,31
 2012ed4:	20807716 	blt	r4,r2,20130b4 <__subdf3+0x8bc>
 2012ed8:	01000804 	movi	r4,32
 2012edc:	2089c83a 	sub	r4,r4,r2
 2012ee0:	1914983a 	sll	r10,r3,r4
 2012ee4:	8890d83a 	srl	r8,r17,r2
 2012ee8:	8908983a 	sll	r4,r17,r4
 2012eec:	1884d83a 	srl	r2,r3,r2
 2012ef0:	5222b03a 	or	r17,r10,r8
 2012ef4:	2006c03a 	cmpne	r3,r4,zero
 2012ef8:	88e2b03a 	or	r17,r17,r3
 2012efc:	89a3883a 	add	r17,r17,r6
 2012f00:	1145883a 	add	r2,r2,r5
 2012f04:	898d803a 	cmpltu	r6,r17,r6
 2012f08:	3087883a 	add	r3,r6,r2
 2012f0c:	4821883a 	mov	r16,r9
 2012f10:	003ed906 	br	2012a78 <__subdf3+0x280>
 2012f14:	2984b03a 	or	r2,r5,r6
 2012f18:	10004226 	beq	r2,zero,2013024 <__subdf3+0x82c>
 2012f1c:	1808d0fa 	srli	r4,r3,3
 2012f20:	8822d0fa 	srli	r17,r17,3
 2012f24:	1806977a 	slli	r3,r3,29
 2012f28:	2080022c 	andhi	r2,r4,8
 2012f2c:	1c62b03a 	or	r17,r3,r17
 2012f30:	10000826 	beq	r2,zero,2012f54 <__subdf3+0x75c>
 2012f34:	2812d0fa 	srli	r9,r5,3
 2012f38:	4880022c 	andhi	r2,r9,8
 2012f3c:	1000051e 	bne	r2,zero,2012f54 <__subdf3+0x75c>
 2012f40:	300cd0fa 	srli	r6,r6,3
 2012f44:	2804977a 	slli	r2,r5,29
 2012f48:	4809883a 	mov	r4,r9
 2012f4c:	3825883a 	mov	r18,r7
 2012f50:	11a2b03a 	or	r17,r2,r6
 2012f54:	8806d77a 	srli	r3,r17,29
 2012f58:	200890fa 	slli	r4,r4,3
 2012f5c:	882290fa 	slli	r17,r17,3
 2012f60:	0401ffc4 	movi	r16,2047
 2012f64:	1906b03a 	or	r3,r3,r4
 2012f68:	003e4406 	br	201287c <__subdf3+0x84>
 2012f6c:	2984b03a 	or	r2,r5,r6
 2012f70:	103e4226 	beq	r2,zero,201287c <__subdf3+0x84>
 2012f74:	8989c83a 	sub	r4,r17,r6
 2012f78:	8911803a 	cmpltu	r8,r17,r4
 2012f7c:	1945c83a 	sub	r2,r3,r5
 2012f80:	1205c83a 	sub	r2,r2,r8
 2012f84:	1200202c 	andhi	r8,r2,128
 2012f88:	403e9a26 	beq	r8,zero,20129f4 <__subdf3+0x1fc>
 2012f8c:	3463c83a 	sub	r17,r6,r17
 2012f90:	28c5c83a 	sub	r2,r5,r3
 2012f94:	344d803a 	cmpltu	r6,r6,r17
 2012f98:	1187c83a 	sub	r3,r2,r6
 2012f9c:	3825883a 	mov	r18,r7
 2012fa0:	003e3606 	br	201287c <__subdf3+0x84>
 2012fa4:	0101ffc4 	movi	r4,2047
 2012fa8:	493fc71e 	bne	r9,r4,2012ec8 <__subdf3+0x6d0>
 2012fac:	2807883a 	mov	r3,r5
 2012fb0:	3023883a 	mov	r17,r6
 2012fb4:	4821883a 	mov	r16,r9
 2012fb8:	003e3006 	br	201287c <__subdf3+0x84>
 2012fbc:	10003626 	beq	r2,zero,2013098 <__subdf3+0x8a0>
 2012fc0:	2984b03a 	or	r2,r5,r6
 2012fc4:	10001726 	beq	r2,zero,2013024 <__subdf3+0x82c>
 2012fc8:	1808d0fa 	srli	r4,r3,3
 2012fcc:	8822d0fa 	srli	r17,r17,3
 2012fd0:	1806977a 	slli	r3,r3,29
 2012fd4:	2080022c 	andhi	r2,r4,8
 2012fd8:	1c62b03a 	or	r17,r3,r17
 2012fdc:	10000726 	beq	r2,zero,2012ffc <__subdf3+0x804>
 2012fe0:	2812d0fa 	srli	r9,r5,3
 2012fe4:	4880022c 	andhi	r2,r9,8
 2012fe8:	1000041e 	bne	r2,zero,2012ffc <__subdf3+0x804>
 2012fec:	300cd0fa 	srli	r6,r6,3
 2012ff0:	2804977a 	slli	r2,r5,29
 2012ff4:	4809883a 	mov	r4,r9
 2012ff8:	11a2b03a 	or	r17,r2,r6
 2012ffc:	8806d77a 	srli	r3,r17,29
 2013000:	200890fa 	slli	r4,r4,3
 2013004:	882290fa 	slli	r17,r17,3
 2013008:	3825883a 	mov	r18,r7
 201300c:	1906b03a 	or	r3,r3,r4
 2013010:	0401ffc4 	movi	r16,2047
 2013014:	003e1906 	br	201287c <__subdf3+0x84>
 2013018:	000b883a 	mov	r5,zero
 201301c:	0005883a 	mov	r2,zero
 2013020:	003e2e06 	br	20128dc <__subdf3+0xe4>
 2013024:	0401ffc4 	movi	r16,2047
 2013028:	003e1406 	br	201287c <__subdf3+0x84>
 201302c:	0005883a 	mov	r2,zero
 2013030:	003f7506 	br	2012e08 <__subdf3+0x610>
 2013034:	0005883a 	mov	r2,zero
 2013038:	0009883a 	mov	r4,zero
 201303c:	003e7806 	br	2012a20 <__subdf3+0x228>
 2013040:	123ff804 	addi	r8,r2,-32
 2013044:	01000804 	movi	r4,32
 2013048:	1a10d83a 	srl	r8,r3,r8
 201304c:	11002526 	beq	r2,r4,20130e4 <__subdf3+0x8ec>
 2013050:	01001004 	movi	r4,64
 2013054:	2085c83a 	sub	r2,r4,r2
 2013058:	1884983a 	sll	r2,r3,r2
 201305c:	1444b03a 	or	r2,r2,r17
 2013060:	1004c03a 	cmpne	r2,r2,zero
 2013064:	40a2b03a 	or	r17,r8,r2
 2013068:	0005883a 	mov	r2,zero
 201306c:	003f1606 	br	2012cc8 <__subdf3+0x4d0>
 2013070:	02000434 	movhi	r8,16
 2013074:	0009883a 	mov	r4,zero
 2013078:	423fffc4 	addi	r8,r8,-1
 201307c:	00bfffc4 	movi	r2,-1
 2013080:	0401ffc4 	movi	r16,2047
 2013084:	003e6606 	br	2012a20 <__subdf3+0x228>
 2013088:	1c62b03a 	or	r17,r3,r17
 201308c:	8822c03a 	cmpne	r17,r17,zero
 2013090:	0005883a 	mov	r2,zero
 2013094:	003f9906 	br	2012efc <__subdf3+0x704>
 2013098:	2807883a 	mov	r3,r5
 201309c:	3023883a 	mov	r17,r6
 20130a0:	0401ffc4 	movi	r16,2047
 20130a4:	003df506 	br	201287c <__subdf3+0x84>
 20130a8:	2807883a 	mov	r3,r5
 20130ac:	3023883a 	mov	r17,r6
 20130b0:	003df206 	br	201287c <__subdf3+0x84>
 20130b4:	123ff804 	addi	r8,r2,-32
 20130b8:	01000804 	movi	r4,32
 20130bc:	1a10d83a 	srl	r8,r3,r8
 20130c0:	11000a26 	beq	r2,r4,20130ec <__subdf3+0x8f4>
 20130c4:	01001004 	movi	r4,64
 20130c8:	2085c83a 	sub	r2,r4,r2
 20130cc:	1884983a 	sll	r2,r3,r2
 20130d0:	1444b03a 	or	r2,r2,r17
 20130d4:	1004c03a 	cmpne	r2,r2,zero
 20130d8:	40a2b03a 	or	r17,r8,r2
 20130dc:	0005883a 	mov	r2,zero
 20130e0:	003f8606 	br	2012efc <__subdf3+0x704>
 20130e4:	0005883a 	mov	r2,zero
 20130e8:	003fdc06 	br	201305c <__subdf3+0x864>
 20130ec:	0005883a 	mov	r2,zero
 20130f0:	003ff706 	br	20130d0 <__subdf3+0x8d8>

020130f4 <__fixdfsi>:
 20130f4:	280cd53a 	srli	r6,r5,20
 20130f8:	00c00434 	movhi	r3,16
 20130fc:	18ffffc4 	addi	r3,r3,-1
 2013100:	3181ffcc 	andi	r6,r6,2047
 2013104:	01c0ff84 	movi	r7,1022
 2013108:	28c6703a 	and	r3,r5,r3
 201310c:	280ad7fa 	srli	r5,r5,31
 2013110:	3980120e 	bge	r7,r6,201315c <__fixdfsi+0x68>
 2013114:	00810744 	movi	r2,1053
 2013118:	11800c16 	blt	r2,r6,201314c <__fixdfsi+0x58>
 201311c:	00810cc4 	movi	r2,1075
 2013120:	1185c83a 	sub	r2,r2,r6
 2013124:	01c007c4 	movi	r7,31
 2013128:	18c00434 	orhi	r3,r3,16
 201312c:	38800d16 	blt	r7,r2,2013164 <__fixdfsi+0x70>
 2013130:	31befb44 	addi	r6,r6,-1043
 2013134:	2084d83a 	srl	r2,r4,r2
 2013138:	1986983a 	sll	r3,r3,r6
 201313c:	1884b03a 	or	r2,r3,r2
 2013140:	28000726 	beq	r5,zero,2013160 <__fixdfsi+0x6c>
 2013144:	0085c83a 	sub	r2,zero,r2
 2013148:	f800283a 	ret
 201314c:	00a00034 	movhi	r2,32768
 2013150:	10bfffc4 	addi	r2,r2,-1
 2013154:	2885883a 	add	r2,r5,r2
 2013158:	f800283a 	ret
 201315c:	0005883a 	mov	r2,zero
 2013160:	f800283a 	ret
 2013164:	008104c4 	movi	r2,1043
 2013168:	1185c83a 	sub	r2,r2,r6
 201316c:	1884d83a 	srl	r2,r3,r2
 2013170:	003ff306 	br	2013140 <__fixdfsi+0x4c>

02013174 <__floatsidf>:
 2013174:	defffd04 	addi	sp,sp,-12
 2013178:	dfc00215 	stw	ra,8(sp)
 201317c:	dc400115 	stw	r17,4(sp)
 2013180:	dc000015 	stw	r16,0(sp)
 2013184:	20002b26 	beq	r4,zero,2013234 <__floatsidf+0xc0>
 2013188:	2023883a 	mov	r17,r4
 201318c:	2020d7fa 	srli	r16,r4,31
 2013190:	20002d16 	blt	r4,zero,2013248 <__floatsidf+0xd4>
 2013194:	8809883a 	mov	r4,r17
 2013198:	2004a440 	call	2004a44 <__clzsi2>
 201319c:	01410784 	movi	r5,1054
 20131a0:	288bc83a 	sub	r5,r5,r2
 20131a4:	01010cc4 	movi	r4,1075
 20131a8:	2149c83a 	sub	r4,r4,r5
 20131ac:	00c007c4 	movi	r3,31
 20131b0:	1900160e 	bge	r3,r4,201320c <__floatsidf+0x98>
 20131b4:	00c104c4 	movi	r3,1043
 20131b8:	1947c83a 	sub	r3,r3,r5
 20131bc:	88c6983a 	sll	r3,r17,r3
 20131c0:	00800434 	movhi	r2,16
 20131c4:	10bfffc4 	addi	r2,r2,-1
 20131c8:	1886703a 	and	r3,r3,r2
 20131cc:	2941ffcc 	andi	r5,r5,2047
 20131d0:	800d883a 	mov	r6,r16
 20131d4:	0005883a 	mov	r2,zero
 20131d8:	280a953a 	slli	r5,r5,20
 20131dc:	31803fcc 	andi	r6,r6,255
 20131e0:	01000434 	movhi	r4,16
 20131e4:	300c97fa 	slli	r6,r6,31
 20131e8:	213fffc4 	addi	r4,r4,-1
 20131ec:	1906703a 	and	r3,r3,r4
 20131f0:	1946b03a 	or	r3,r3,r5
 20131f4:	1986b03a 	or	r3,r3,r6
 20131f8:	dfc00217 	ldw	ra,8(sp)
 20131fc:	dc400117 	ldw	r17,4(sp)
 2013200:	dc000017 	ldw	r16,0(sp)
 2013204:	dec00304 	addi	sp,sp,12
 2013208:	f800283a 	ret
 201320c:	00c002c4 	movi	r3,11
 2013210:	1887c83a 	sub	r3,r3,r2
 2013214:	88c6d83a 	srl	r3,r17,r3
 2013218:	8904983a 	sll	r2,r17,r4
 201321c:	01000434 	movhi	r4,16
 2013220:	213fffc4 	addi	r4,r4,-1
 2013224:	2941ffcc 	andi	r5,r5,2047
 2013228:	1906703a 	and	r3,r3,r4
 201322c:	800d883a 	mov	r6,r16
 2013230:	003fe906 	br	20131d8 <__floatsidf+0x64>
 2013234:	000d883a 	mov	r6,zero
 2013238:	000b883a 	mov	r5,zero
 201323c:	0007883a 	mov	r3,zero
 2013240:	0005883a 	mov	r2,zero
 2013244:	003fe406 	br	20131d8 <__floatsidf+0x64>
 2013248:	0123c83a 	sub	r17,zero,r4
 201324c:	003fd106 	br	2013194 <__floatsidf+0x20>

02013250 <__floatunsidf>:
 2013250:	defffe04 	addi	sp,sp,-8
 2013254:	dc000015 	stw	r16,0(sp)
 2013258:	dfc00115 	stw	ra,4(sp)
 201325c:	2021883a 	mov	r16,r4
 2013260:	20002226 	beq	r4,zero,20132ec <__floatunsidf+0x9c>
 2013264:	2004a440 	call	2004a44 <__clzsi2>
 2013268:	01010784 	movi	r4,1054
 201326c:	2089c83a 	sub	r4,r4,r2
 2013270:	01810cc4 	movi	r6,1075
 2013274:	310dc83a 	sub	r6,r6,r4
 2013278:	00c007c4 	movi	r3,31
 201327c:	1980120e 	bge	r3,r6,20132c8 <__floatunsidf+0x78>
 2013280:	00c104c4 	movi	r3,1043
 2013284:	1907c83a 	sub	r3,r3,r4
 2013288:	80ca983a 	sll	r5,r16,r3
 201328c:	00800434 	movhi	r2,16
 2013290:	10bfffc4 	addi	r2,r2,-1
 2013294:	2101ffcc 	andi	r4,r4,2047
 2013298:	0021883a 	mov	r16,zero
 201329c:	288a703a 	and	r5,r5,r2
 20132a0:	2008953a 	slli	r4,r4,20
 20132a4:	00c00434 	movhi	r3,16
 20132a8:	18ffffc4 	addi	r3,r3,-1
 20132ac:	28c6703a 	and	r3,r5,r3
 20132b0:	8005883a 	mov	r2,r16
 20132b4:	1906b03a 	or	r3,r3,r4
 20132b8:	dfc00117 	ldw	ra,4(sp)
 20132bc:	dc000017 	ldw	r16,0(sp)
 20132c0:	dec00204 	addi	sp,sp,8
 20132c4:	f800283a 	ret
 20132c8:	00c002c4 	movi	r3,11
 20132cc:	188bc83a 	sub	r5,r3,r2
 20132d0:	814ad83a 	srl	r5,r16,r5
 20132d4:	00c00434 	movhi	r3,16
 20132d8:	18ffffc4 	addi	r3,r3,-1
 20132dc:	81a0983a 	sll	r16,r16,r6
 20132e0:	2101ffcc 	andi	r4,r4,2047
 20132e4:	28ca703a 	and	r5,r5,r3
 20132e8:	003fed06 	br	20132a0 <__floatunsidf+0x50>
 20132ec:	0009883a 	mov	r4,zero
 20132f0:	000b883a 	mov	r5,zero
 20132f4:	003fea06 	br	20132a0 <__floatunsidf+0x50>

020132f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20132f8:	defffe04 	addi	sp,sp,-8
 20132fc:	dfc00115 	stw	ra,4(sp)
 2013300:	df000015 	stw	fp,0(sp)
 2013304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013308:	d0a00b17 	ldw	r2,-32724(gp)
 201330c:	10000326 	beq	r2,zero,201331c <alt_get_errno+0x24>
 2013310:	d0a00b17 	ldw	r2,-32724(gp)
 2013314:	103ee83a 	callr	r2
 2013318:	00000106 	br	2013320 <alt_get_errno+0x28>
 201331c:	d0a72e04 	addi	r2,gp,-25416
}
 2013320:	e037883a 	mov	sp,fp
 2013324:	dfc00117 	ldw	ra,4(sp)
 2013328:	df000017 	ldw	fp,0(sp)
 201332c:	dec00204 	addi	sp,sp,8
 2013330:	f800283a 	ret

02013334 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2013334:	defffb04 	addi	sp,sp,-20
 2013338:	dfc00415 	stw	ra,16(sp)
 201333c:	df000315 	stw	fp,12(sp)
 2013340:	df000304 	addi	fp,sp,12
 2013344:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2013348:	e0bfff17 	ldw	r2,-4(fp)
 201334c:	10000616 	blt	r2,zero,2013368 <close+0x34>
 2013350:	e0bfff17 	ldw	r2,-4(fp)
 2013354:	10c00324 	muli	r3,r2,12
 2013358:	008080b4 	movhi	r2,514
 201335c:	10bde104 	addi	r2,r2,-2172
 2013360:	1885883a 	add	r2,r3,r2
 2013364:	00000106 	br	201336c <close+0x38>
 2013368:	0005883a 	mov	r2,zero
 201336c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2013370:	e0bffd17 	ldw	r2,-12(fp)
 2013374:	10001926 	beq	r2,zero,20133dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2013378:	e0bffd17 	ldw	r2,-12(fp)
 201337c:	10800017 	ldw	r2,0(r2)
 2013380:	10800417 	ldw	r2,16(r2)
 2013384:	10000626 	beq	r2,zero,20133a0 <close+0x6c>
 2013388:	e0bffd17 	ldw	r2,-12(fp)
 201338c:	10800017 	ldw	r2,0(r2)
 2013390:	10800417 	ldw	r2,16(r2)
 2013394:	e13ffd17 	ldw	r4,-12(fp)
 2013398:	103ee83a 	callr	r2
 201339c:	00000106 	br	20133a4 <close+0x70>
 20133a0:	0005883a 	mov	r2,zero
 20133a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20133a8:	e13fff17 	ldw	r4,-4(fp)
 20133ac:	20139ec0 	call	20139ec <alt_release_fd>
    if (rval < 0)
 20133b0:	e0bffe17 	ldw	r2,-8(fp)
 20133b4:	1000070e 	bge	r2,zero,20133d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20133b8:	20132f80 	call	20132f8 <alt_get_errno>
 20133bc:	1007883a 	mov	r3,r2
 20133c0:	e0bffe17 	ldw	r2,-8(fp)
 20133c4:	0085c83a 	sub	r2,zero,r2
 20133c8:	18800015 	stw	r2,0(r3)
      return -1;
 20133cc:	00bfffc4 	movi	r2,-1
 20133d0:	00000706 	br	20133f0 <close+0xbc>
    }
    return 0;
 20133d4:	0005883a 	mov	r2,zero
 20133d8:	00000506 	br	20133f0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20133dc:	20132f80 	call	20132f8 <alt_get_errno>
 20133e0:	1007883a 	mov	r3,r2
 20133e4:	00801444 	movi	r2,81
 20133e8:	18800015 	stw	r2,0(r3)
    return -1;
 20133ec:	00bfffc4 	movi	r2,-1
  }
}
 20133f0:	e037883a 	mov	sp,fp
 20133f4:	dfc00117 	ldw	ra,4(sp)
 20133f8:	df000017 	ldw	fp,0(sp)
 20133fc:	dec00204 	addi	sp,sp,8
 2013400:	f800283a 	ret

02013404 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2013404:	defffc04 	addi	sp,sp,-16
 2013408:	df000315 	stw	fp,12(sp)
 201340c:	df000304 	addi	fp,sp,12
 2013410:	e13ffd15 	stw	r4,-12(fp)
 2013414:	e17ffe15 	stw	r5,-8(fp)
 2013418:	e1bfff15 	stw	r6,-4(fp)
  return len;
 201341c:	e0bfff17 	ldw	r2,-4(fp)
}
 2013420:	e037883a 	mov	sp,fp
 2013424:	df000017 	ldw	fp,0(sp)
 2013428:	dec00104 	addi	sp,sp,4
 201342c:	f800283a 	ret

02013430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013430:	defffe04 	addi	sp,sp,-8
 2013434:	dfc00115 	stw	ra,4(sp)
 2013438:	df000015 	stw	fp,0(sp)
 201343c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013440:	d0a00b17 	ldw	r2,-32724(gp)
 2013444:	10000326 	beq	r2,zero,2013454 <alt_get_errno+0x24>
 2013448:	d0a00b17 	ldw	r2,-32724(gp)
 201344c:	103ee83a 	callr	r2
 2013450:	00000106 	br	2013458 <alt_get_errno+0x28>
 2013454:	d0a72e04 	addi	r2,gp,-25416
}
 2013458:	e037883a 	mov	sp,fp
 201345c:	dfc00117 	ldw	ra,4(sp)
 2013460:	df000017 	ldw	fp,0(sp)
 2013464:	dec00204 	addi	sp,sp,8
 2013468:	f800283a 	ret

0201346c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 201346c:	defffb04 	addi	sp,sp,-20
 2013470:	dfc00415 	stw	ra,16(sp)
 2013474:	df000315 	stw	fp,12(sp)
 2013478:	df000304 	addi	fp,sp,12
 201347c:	e13ffe15 	stw	r4,-8(fp)
 2013480:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013484:	e0bffe17 	ldw	r2,-8(fp)
 2013488:	10000616 	blt	r2,zero,20134a4 <fstat+0x38>
 201348c:	e0bffe17 	ldw	r2,-8(fp)
 2013490:	10c00324 	muli	r3,r2,12
 2013494:	008080b4 	movhi	r2,514
 2013498:	10bde104 	addi	r2,r2,-2172
 201349c:	1885883a 	add	r2,r3,r2
 20134a0:	00000106 	br	20134a8 <fstat+0x3c>
 20134a4:	0005883a 	mov	r2,zero
 20134a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20134ac:	e0bffd17 	ldw	r2,-12(fp)
 20134b0:	10001026 	beq	r2,zero,20134f4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20134b4:	e0bffd17 	ldw	r2,-12(fp)
 20134b8:	10800017 	ldw	r2,0(r2)
 20134bc:	10800817 	ldw	r2,32(r2)
 20134c0:	10000726 	beq	r2,zero,20134e0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20134c4:	e0bffd17 	ldw	r2,-12(fp)
 20134c8:	10800017 	ldw	r2,0(r2)
 20134cc:	10800817 	ldw	r2,32(r2)
 20134d0:	e17fff17 	ldw	r5,-4(fp)
 20134d4:	e13ffd17 	ldw	r4,-12(fp)
 20134d8:	103ee83a 	callr	r2
 20134dc:	00000a06 	br	2013508 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20134e0:	e0bfff17 	ldw	r2,-4(fp)
 20134e4:	00c80004 	movi	r3,8192
 20134e8:	10c00115 	stw	r3,4(r2)
      return 0;
 20134ec:	0005883a 	mov	r2,zero
 20134f0:	00000506 	br	2013508 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20134f4:	20134300 	call	2013430 <alt_get_errno>
 20134f8:	1007883a 	mov	r3,r2
 20134fc:	00801444 	movi	r2,81
 2013500:	18800015 	stw	r2,0(r3)
    return -1;
 2013504:	00bfffc4 	movi	r2,-1
  }
}
 2013508:	e037883a 	mov	sp,fp
 201350c:	dfc00117 	ldw	ra,4(sp)
 2013510:	df000017 	ldw	fp,0(sp)
 2013514:	dec00204 	addi	sp,sp,8
 2013518:	f800283a 	ret

0201351c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201351c:	defffe04 	addi	sp,sp,-8
 2013520:	dfc00115 	stw	ra,4(sp)
 2013524:	df000015 	stw	fp,0(sp)
 2013528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201352c:	d0a00b17 	ldw	r2,-32724(gp)
 2013530:	10000326 	beq	r2,zero,2013540 <alt_get_errno+0x24>
 2013534:	d0a00b17 	ldw	r2,-32724(gp)
 2013538:	103ee83a 	callr	r2
 201353c:	00000106 	br	2013544 <alt_get_errno+0x28>
 2013540:	d0a72e04 	addi	r2,gp,-25416
}
 2013544:	e037883a 	mov	sp,fp
 2013548:	dfc00117 	ldw	ra,4(sp)
 201354c:	df000017 	ldw	fp,0(sp)
 2013550:	dec00204 	addi	sp,sp,8
 2013554:	f800283a 	ret

02013558 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2013558:	deffed04 	addi	sp,sp,-76
 201355c:	dfc01215 	stw	ra,72(sp)
 2013560:	df001115 	stw	fp,68(sp)
 2013564:	df001104 	addi	fp,sp,68
 2013568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201356c:	e0bfff17 	ldw	r2,-4(fp)
 2013570:	10000616 	blt	r2,zero,201358c <isatty+0x34>
 2013574:	e0bfff17 	ldw	r2,-4(fp)
 2013578:	10c00324 	muli	r3,r2,12
 201357c:	008080b4 	movhi	r2,514
 2013580:	10bde104 	addi	r2,r2,-2172
 2013584:	1885883a 	add	r2,r3,r2
 2013588:	00000106 	br	2013590 <isatty+0x38>
 201358c:	0005883a 	mov	r2,zero
 2013590:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2013594:	e0bfef17 	ldw	r2,-68(fp)
 2013598:	10000e26 	beq	r2,zero,20135d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 201359c:	e0bfef17 	ldw	r2,-68(fp)
 20135a0:	10800017 	ldw	r2,0(r2)
 20135a4:	10800817 	ldw	r2,32(r2)
 20135a8:	1000021e 	bne	r2,zero,20135b4 <isatty+0x5c>
    {
      return 1;
 20135ac:	00800044 	movi	r2,1
 20135b0:	00000d06 	br	20135e8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20135b4:	e0bff004 	addi	r2,fp,-64
 20135b8:	100b883a 	mov	r5,r2
 20135bc:	e13fff17 	ldw	r4,-4(fp)
 20135c0:	201346c0 	call	201346c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20135c4:	e0bff117 	ldw	r2,-60(fp)
 20135c8:	10880020 	cmpeqi	r2,r2,8192
 20135cc:	10803fcc 	andi	r2,r2,255
 20135d0:	00000506 	br	20135e8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20135d4:	201351c0 	call	201351c <alt_get_errno>
 20135d8:	1007883a 	mov	r3,r2
 20135dc:	00801444 	movi	r2,81
 20135e0:	18800015 	stw	r2,0(r3)
    return 0;
 20135e4:	0005883a 	mov	r2,zero
  }
}
 20135e8:	e037883a 	mov	sp,fp
 20135ec:	dfc00117 	ldw	ra,4(sp)
 20135f0:	df000017 	ldw	fp,0(sp)
 20135f4:	dec00204 	addi	sp,sp,8
 20135f8:	f800283a 	ret

020135fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20135fc:	defffc04 	addi	sp,sp,-16
 2013600:	df000315 	stw	fp,12(sp)
 2013604:	df000304 	addi	fp,sp,12
 2013608:	e13ffd15 	stw	r4,-12(fp)
 201360c:	e17ffe15 	stw	r5,-8(fp)
 2013610:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2013614:	e0fffe17 	ldw	r3,-8(fp)
 2013618:	e0bffd17 	ldw	r2,-12(fp)
 201361c:	18800c26 	beq	r3,r2,2013650 <alt_load_section+0x54>
  {
    while( to != end )
 2013620:	00000806 	br	2013644 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2013624:	e0bffe17 	ldw	r2,-8(fp)
 2013628:	10c00104 	addi	r3,r2,4
 201362c:	e0fffe15 	stw	r3,-8(fp)
 2013630:	e0fffd17 	ldw	r3,-12(fp)
 2013634:	19000104 	addi	r4,r3,4
 2013638:	e13ffd15 	stw	r4,-12(fp)
 201363c:	18c00017 	ldw	r3,0(r3)
 2013640:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2013644:	e0fffe17 	ldw	r3,-8(fp)
 2013648:	e0bfff17 	ldw	r2,-4(fp)
 201364c:	18bff51e 	bne	r3,r2,2013624 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2013650:	0001883a 	nop
 2013654:	e037883a 	mov	sp,fp
 2013658:	df000017 	ldw	fp,0(sp)
 201365c:	dec00104 	addi	sp,sp,4
 2013660:	f800283a 	ret

02013664 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2013664:	defffe04 	addi	sp,sp,-8
 2013668:	dfc00115 	stw	ra,4(sp)
 201366c:	df000015 	stw	fp,0(sp)
 2013670:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2013674:	018080b4 	movhi	r6,514
 2013678:	31828b04 	addi	r6,r6,2604
 201367c:	014080b4 	movhi	r5,514
 2013680:	297ba204 	addi	r5,r5,-4472
 2013684:	010080b4 	movhi	r4,514
 2013688:	21028b04 	addi	r4,r4,2604
 201368c:	20135fc0 	call	20135fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2013690:	01808034 	movhi	r6,512
 2013694:	31809104 	addi	r6,r6,580
 2013698:	01408034 	movhi	r5,512
 201369c:	29400804 	addi	r5,r5,32
 20136a0:	01008034 	movhi	r4,512
 20136a4:	21000804 	addi	r4,r4,32
 20136a8:	20135fc0 	call	20135fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20136ac:	018080b4 	movhi	r6,514
 20136b0:	31bba204 	addi	r6,r6,-4472
 20136b4:	014080b4 	movhi	r5,514
 20136b8:	297a1004 	addi	r5,r5,-6080
 20136bc:	010080b4 	movhi	r4,514
 20136c0:	213a1004 	addi	r4,r4,-6080
 20136c4:	20135fc0 	call	20135fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20136c8:	201d1e80 	call	201d1e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20136cc:	201d3d00 	call	201d3d0 <alt_icache_flush_all>
}
 20136d0:	0001883a 	nop
 20136d4:	e037883a 	mov	sp,fp
 20136d8:	dfc00117 	ldw	ra,4(sp)
 20136dc:	df000017 	ldw	fp,0(sp)
 20136e0:	dec00204 	addi	sp,sp,8
 20136e4:	f800283a 	ret

020136e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20136e8:	defffe04 	addi	sp,sp,-8
 20136ec:	dfc00115 	stw	ra,4(sp)
 20136f0:	df000015 	stw	fp,0(sp)
 20136f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20136f8:	d0a00b17 	ldw	r2,-32724(gp)
 20136fc:	10000326 	beq	r2,zero,201370c <alt_get_errno+0x24>
 2013700:	d0a00b17 	ldw	r2,-32724(gp)
 2013704:	103ee83a 	callr	r2
 2013708:	00000106 	br	2013710 <alt_get_errno+0x28>
 201370c:	d0a72e04 	addi	r2,gp,-25416
}
 2013710:	e037883a 	mov	sp,fp
 2013714:	dfc00117 	ldw	ra,4(sp)
 2013718:	df000017 	ldw	fp,0(sp)
 201371c:	dec00204 	addi	sp,sp,8
 2013720:	f800283a 	ret

02013724 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2013724:	defff904 	addi	sp,sp,-28
 2013728:	dfc00615 	stw	ra,24(sp)
 201372c:	df000515 	stw	fp,20(sp)
 2013730:	df000504 	addi	fp,sp,20
 2013734:	e13ffd15 	stw	r4,-12(fp)
 2013738:	e17ffe15 	stw	r5,-8(fp)
 201373c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2013740:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013744:	e0bffd17 	ldw	r2,-12(fp)
 2013748:	10000616 	blt	r2,zero,2013764 <lseek+0x40>
 201374c:	e0bffd17 	ldw	r2,-12(fp)
 2013750:	10c00324 	muli	r3,r2,12
 2013754:	008080b4 	movhi	r2,514
 2013758:	10bde104 	addi	r2,r2,-2172
 201375c:	1885883a 	add	r2,r3,r2
 2013760:	00000106 	br	2013768 <lseek+0x44>
 2013764:	0005883a 	mov	r2,zero
 2013768:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 201376c:	e0bffc17 	ldw	r2,-16(fp)
 2013770:	10001026 	beq	r2,zero,20137b4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2013774:	e0bffc17 	ldw	r2,-16(fp)
 2013778:	10800017 	ldw	r2,0(r2)
 201377c:	10800717 	ldw	r2,28(r2)
 2013780:	10000926 	beq	r2,zero,20137a8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2013784:	e0bffc17 	ldw	r2,-16(fp)
 2013788:	10800017 	ldw	r2,0(r2)
 201378c:	10800717 	ldw	r2,28(r2)
 2013790:	e1bfff17 	ldw	r6,-4(fp)
 2013794:	e17ffe17 	ldw	r5,-8(fp)
 2013798:	e13ffc17 	ldw	r4,-16(fp)
 201379c:	103ee83a 	callr	r2
 20137a0:	e0bffb15 	stw	r2,-20(fp)
 20137a4:	00000506 	br	20137bc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20137a8:	00bfde84 	movi	r2,-134
 20137ac:	e0bffb15 	stw	r2,-20(fp)
 20137b0:	00000206 	br	20137bc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 20137b4:	00bfebc4 	movi	r2,-81
 20137b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20137bc:	e0bffb17 	ldw	r2,-20(fp)
 20137c0:	1000070e 	bge	r2,zero,20137e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 20137c4:	20136e80 	call	20136e8 <alt_get_errno>
 20137c8:	1007883a 	mov	r3,r2
 20137cc:	e0bffb17 	ldw	r2,-20(fp)
 20137d0:	0085c83a 	sub	r2,zero,r2
 20137d4:	18800015 	stw	r2,0(r3)
    rc = -1;
 20137d8:	00bfffc4 	movi	r2,-1
 20137dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20137e0:	e0bffb17 	ldw	r2,-20(fp)
}
 20137e4:	e037883a 	mov	sp,fp
 20137e8:	dfc00117 	ldw	ra,4(sp)
 20137ec:	df000017 	ldw	fp,0(sp)
 20137f0:	dec00204 	addi	sp,sp,8
 20137f4:	f800283a 	ret

020137f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20137f8:	defff904 	addi	sp,sp,-28
 20137fc:	dfc00615 	stw	ra,24(sp)
 2013800:	df000515 	stw	fp,20(sp)
 2013804:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2013808:	0009883a 	mov	r4,zero
 201380c:	201c2040 	call	201c204 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2013810:	20147b40 	call	20147b4 <OSInit>
 2013814:	01000044 	movi	r4,1
 2013818:	2019bcc0 	call	2019bcc <OSSemCreate>
 201381c:	d0a73415 	stw	r2,-25392(gp)
 2013820:	01000044 	movi	r4,1
 2013824:	2019bcc0 	call	2019bcc <OSSemCreate>
 2013828:	d0a73615 	stw	r2,-25384(gp)
 201382c:	d0a72f04 	addi	r2,gp,-25412
 2013830:	e0bffc15 	stw	r2,-16(fp)
 2013834:	00800044 	movi	r2,1
 2013838:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 201383c:	e0bffd0b 	ldhu	r2,-12(fp)
 2013840:	1009883a 	mov	r4,r2
 2013844:	2019bcc0 	call	2019bcc <OSSemCreate>
 2013848:	1007883a 	mov	r3,r2
 201384c:	e0bffc17 	ldw	r2,-16(fp)
 2013850:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2013854:	201c23c0 	call	201c23c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2013858:	018080b4 	movhi	r6,514
 201385c:	31bb5104 	addi	r6,r6,-4796
 2013860:	014080b4 	movhi	r5,514
 2013864:	297b5104 	addi	r5,r5,-4796
 2013868:	010080b4 	movhi	r4,514
 201386c:	213b5104 	addi	r4,r4,-4796
 2013870:	201d7680 	call	201d768 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2013874:	201d3100 	call	201d310 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2013878:	010080b4 	movhi	r4,514
 201387c:	2134dc04 	addi	r4,r4,-11408
 2013880:	201e2f80 	call	201e2f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2013884:	d0a73017 	ldw	r2,-25408(gp)
 2013888:	d0e73117 	ldw	r3,-25404(gp)
 201388c:	d1273217 	ldw	r4,-25400(gp)
 2013890:	200d883a 	mov	r6,r4
 2013894:	180b883a 	mov	r5,r3
 2013898:	1009883a 	mov	r4,r2
 201389c:	20027f80 	call	20027f8 <main>
 20138a0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 20138a4:	01000044 	movi	r4,1
 20138a8:	20133340 	call	2013334 <close>
  exit (result);
 20138ac:	e13ffb17 	ldw	r4,-20(fp)
 20138b0:	201e3340 	call	201e334 <exit>

020138b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20138b4:	defffe04 	addi	sp,sp,-8
 20138b8:	dfc00115 	stw	ra,4(sp)
 20138bc:	df000015 	stw	fp,0(sp)
 20138c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20138c4:	d0a00b17 	ldw	r2,-32724(gp)
 20138c8:	10000326 	beq	r2,zero,20138d8 <alt_get_errno+0x24>
 20138cc:	d0a00b17 	ldw	r2,-32724(gp)
 20138d0:	103ee83a 	callr	r2
 20138d4:	00000106 	br	20138dc <alt_get_errno+0x28>
 20138d8:	d0a72e04 	addi	r2,gp,-25416
}
 20138dc:	e037883a 	mov	sp,fp
 20138e0:	dfc00117 	ldw	ra,4(sp)
 20138e4:	df000017 	ldw	fp,0(sp)
 20138e8:	dec00204 	addi	sp,sp,8
 20138ec:	f800283a 	ret

020138f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20138f0:	defff904 	addi	sp,sp,-28
 20138f4:	dfc00615 	stw	ra,24(sp)
 20138f8:	df000515 	stw	fp,20(sp)
 20138fc:	df000504 	addi	fp,sp,20
 2013900:	e13ffd15 	stw	r4,-12(fp)
 2013904:	e17ffe15 	stw	r5,-8(fp)
 2013908:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201390c:	e0bffd17 	ldw	r2,-12(fp)
 2013910:	10000616 	blt	r2,zero,201392c <read+0x3c>
 2013914:	e0bffd17 	ldw	r2,-12(fp)
 2013918:	10c00324 	muli	r3,r2,12
 201391c:	008080b4 	movhi	r2,514
 2013920:	10bde104 	addi	r2,r2,-2172
 2013924:	1885883a 	add	r2,r3,r2
 2013928:	00000106 	br	2013930 <read+0x40>
 201392c:	0005883a 	mov	r2,zero
 2013930:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2013934:	e0bffb17 	ldw	r2,-20(fp)
 2013938:	10002226 	beq	r2,zero,20139c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201393c:	e0bffb17 	ldw	r2,-20(fp)
 2013940:	10800217 	ldw	r2,8(r2)
 2013944:	108000cc 	andi	r2,r2,3
 2013948:	10800060 	cmpeqi	r2,r2,1
 201394c:	1000181e 	bne	r2,zero,20139b0 <read+0xc0>
        (fd->dev->read))
 2013950:	e0bffb17 	ldw	r2,-20(fp)
 2013954:	10800017 	ldw	r2,0(r2)
 2013958:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201395c:	10001426 	beq	r2,zero,20139b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2013960:	e0bffb17 	ldw	r2,-20(fp)
 2013964:	10800017 	ldw	r2,0(r2)
 2013968:	10800517 	ldw	r2,20(r2)
 201396c:	e0ffff17 	ldw	r3,-4(fp)
 2013970:	180d883a 	mov	r6,r3
 2013974:	e17ffe17 	ldw	r5,-8(fp)
 2013978:	e13ffb17 	ldw	r4,-20(fp)
 201397c:	103ee83a 	callr	r2
 2013980:	e0bffc15 	stw	r2,-16(fp)
 2013984:	e0bffc17 	ldw	r2,-16(fp)
 2013988:	1000070e 	bge	r2,zero,20139a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 201398c:	20138b40 	call	20138b4 <alt_get_errno>
 2013990:	1007883a 	mov	r3,r2
 2013994:	e0bffc17 	ldw	r2,-16(fp)
 2013998:	0085c83a 	sub	r2,zero,r2
 201399c:	18800015 	stw	r2,0(r3)
          return -1;
 20139a0:	00bfffc4 	movi	r2,-1
 20139a4:	00000c06 	br	20139d8 <read+0xe8>
        }
        return rval;
 20139a8:	e0bffc17 	ldw	r2,-16(fp)
 20139ac:	00000a06 	br	20139d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20139b0:	20138b40 	call	20138b4 <alt_get_errno>
 20139b4:	1007883a 	mov	r3,r2
 20139b8:	00800344 	movi	r2,13
 20139bc:	18800015 	stw	r2,0(r3)
 20139c0:	00000406 	br	20139d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20139c4:	20138b40 	call	20138b4 <alt_get_errno>
 20139c8:	1007883a 	mov	r3,r2
 20139cc:	00801444 	movi	r2,81
 20139d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20139d4:	00bfffc4 	movi	r2,-1
}
 20139d8:	e037883a 	mov	sp,fp
 20139dc:	dfc00117 	ldw	ra,4(sp)
 20139e0:	df000017 	ldw	fp,0(sp)
 20139e4:	dec00204 	addi	sp,sp,8
 20139e8:	f800283a 	ret

020139ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20139ec:	defffe04 	addi	sp,sp,-8
 20139f0:	df000115 	stw	fp,4(sp)
 20139f4:	df000104 	addi	fp,sp,4
 20139f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20139fc:	e0bfff17 	ldw	r2,-4(fp)
 2013a00:	108000d0 	cmplti	r2,r2,3
 2013a04:	10000d1e 	bne	r2,zero,2013a3c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2013a08:	008080b4 	movhi	r2,514
 2013a0c:	10bde104 	addi	r2,r2,-2172
 2013a10:	e0ffff17 	ldw	r3,-4(fp)
 2013a14:	18c00324 	muli	r3,r3,12
 2013a18:	10c5883a 	add	r2,r2,r3
 2013a1c:	10800204 	addi	r2,r2,8
 2013a20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2013a24:	008080b4 	movhi	r2,514
 2013a28:	10bde104 	addi	r2,r2,-2172
 2013a2c:	e0ffff17 	ldw	r3,-4(fp)
 2013a30:	18c00324 	muli	r3,r3,12
 2013a34:	10c5883a 	add	r2,r2,r3
 2013a38:	10000015 	stw	zero,0(r2)
  }
}
 2013a3c:	0001883a 	nop
 2013a40:	e037883a 	mov	sp,fp
 2013a44:	df000017 	ldw	fp,0(sp)
 2013a48:	dec00104 	addi	sp,sp,4
 2013a4c:	f800283a 	ret

02013a50 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2013a50:	defff904 	addi	sp,sp,-28
 2013a54:	df000615 	stw	fp,24(sp)
 2013a58:	df000604 	addi	fp,sp,24
 2013a5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013a60:	0005303a 	rdctl	r2,status
 2013a64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013a68:	e0fffe17 	ldw	r3,-8(fp)
 2013a6c:	00bfff84 	movi	r2,-2
 2013a70:	1884703a 	and	r2,r3,r2
 2013a74:	1001703a 	wrctl	status,r2
  
  return context;
 2013a78:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2013a7c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2013a80:	d0a00c17 	ldw	r2,-32720(gp)
 2013a84:	10c000c4 	addi	r3,r2,3
 2013a88:	00bfff04 	movi	r2,-4
 2013a8c:	1884703a 	and	r2,r3,r2
 2013a90:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2013a94:	d0e00c17 	ldw	r3,-32720(gp)
 2013a98:	e0bfff17 	ldw	r2,-4(fp)
 2013a9c:	1887883a 	add	r3,r3,r2
 2013aa0:	00810034 	movhi	r2,1024
 2013aa4:	10800004 	addi	r2,r2,0
 2013aa8:	10c0062e 	bgeu	r2,r3,2013ac4 <sbrk+0x74>
 2013aac:	e0bffb17 	ldw	r2,-20(fp)
 2013ab0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ab4:	e0bffa17 	ldw	r2,-24(fp)
 2013ab8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2013abc:	00bfffc4 	movi	r2,-1
 2013ac0:	00000b06 	br	2013af0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2013ac4:	d0a00c17 	ldw	r2,-32720(gp)
 2013ac8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2013acc:	d0e00c17 	ldw	r3,-32720(gp)
 2013ad0:	e0bfff17 	ldw	r2,-4(fp)
 2013ad4:	1885883a 	add	r2,r3,r2
 2013ad8:	d0a00c15 	stw	r2,-32720(gp)
 2013adc:	e0bffb17 	ldw	r2,-20(fp)
 2013ae0:	e0bffc15 	stw	r2,-16(fp)
 2013ae4:	e0bffc17 	ldw	r2,-16(fp)
 2013ae8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2013aec:	e0bffd17 	ldw	r2,-12(fp)
} 
 2013af0:	e037883a 	mov	sp,fp
 2013af4:	df000017 	ldw	fp,0(sp)
 2013af8:	dec00104 	addi	sp,sp,4
 2013afc:	f800283a 	ret

02013b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013b00:	defffe04 	addi	sp,sp,-8
 2013b04:	dfc00115 	stw	ra,4(sp)
 2013b08:	df000015 	stw	fp,0(sp)
 2013b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013b10:	d0a00b17 	ldw	r2,-32724(gp)
 2013b14:	10000326 	beq	r2,zero,2013b24 <alt_get_errno+0x24>
 2013b18:	d0a00b17 	ldw	r2,-32724(gp)
 2013b1c:	103ee83a 	callr	r2
 2013b20:	00000106 	br	2013b28 <alt_get_errno+0x28>
 2013b24:	d0a72e04 	addi	r2,gp,-25416
}
 2013b28:	e037883a 	mov	sp,fp
 2013b2c:	dfc00117 	ldw	ra,4(sp)
 2013b30:	df000017 	ldw	fp,0(sp)
 2013b34:	dec00204 	addi	sp,sp,8
 2013b38:	f800283a 	ret

02013b3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2013b3c:	defff904 	addi	sp,sp,-28
 2013b40:	dfc00615 	stw	ra,24(sp)
 2013b44:	df000515 	stw	fp,20(sp)
 2013b48:	df000504 	addi	fp,sp,20
 2013b4c:	e13ffd15 	stw	r4,-12(fp)
 2013b50:	e17ffe15 	stw	r5,-8(fp)
 2013b54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013b58:	e0bffd17 	ldw	r2,-12(fp)
 2013b5c:	10000616 	blt	r2,zero,2013b78 <write+0x3c>
 2013b60:	e0bffd17 	ldw	r2,-12(fp)
 2013b64:	10c00324 	muli	r3,r2,12
 2013b68:	008080b4 	movhi	r2,514
 2013b6c:	10bde104 	addi	r2,r2,-2172
 2013b70:	1885883a 	add	r2,r3,r2
 2013b74:	00000106 	br	2013b7c <write+0x40>
 2013b78:	0005883a 	mov	r2,zero
 2013b7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2013b80:	e0bffb17 	ldw	r2,-20(fp)
 2013b84:	10002126 	beq	r2,zero,2013c0c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2013b88:	e0bffb17 	ldw	r2,-20(fp)
 2013b8c:	10800217 	ldw	r2,8(r2)
 2013b90:	108000cc 	andi	r2,r2,3
 2013b94:	10001826 	beq	r2,zero,2013bf8 <write+0xbc>
 2013b98:	e0bffb17 	ldw	r2,-20(fp)
 2013b9c:	10800017 	ldw	r2,0(r2)
 2013ba0:	10800617 	ldw	r2,24(r2)
 2013ba4:	10001426 	beq	r2,zero,2013bf8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2013ba8:	e0bffb17 	ldw	r2,-20(fp)
 2013bac:	10800017 	ldw	r2,0(r2)
 2013bb0:	10800617 	ldw	r2,24(r2)
 2013bb4:	e0ffff17 	ldw	r3,-4(fp)
 2013bb8:	180d883a 	mov	r6,r3
 2013bbc:	e17ffe17 	ldw	r5,-8(fp)
 2013bc0:	e13ffb17 	ldw	r4,-20(fp)
 2013bc4:	103ee83a 	callr	r2
 2013bc8:	e0bffc15 	stw	r2,-16(fp)
 2013bcc:	e0bffc17 	ldw	r2,-16(fp)
 2013bd0:	1000070e 	bge	r2,zero,2013bf0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2013bd4:	2013b000 	call	2013b00 <alt_get_errno>
 2013bd8:	1007883a 	mov	r3,r2
 2013bdc:	e0bffc17 	ldw	r2,-16(fp)
 2013be0:	0085c83a 	sub	r2,zero,r2
 2013be4:	18800015 	stw	r2,0(r3)
        return -1;
 2013be8:	00bfffc4 	movi	r2,-1
 2013bec:	00000c06 	br	2013c20 <write+0xe4>
      }
      return rval;
 2013bf0:	e0bffc17 	ldw	r2,-16(fp)
 2013bf4:	00000a06 	br	2013c20 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2013bf8:	2013b000 	call	2013b00 <alt_get_errno>
 2013bfc:	1007883a 	mov	r3,r2
 2013c00:	00800344 	movi	r2,13
 2013c04:	18800015 	stw	r2,0(r3)
 2013c08:	00000406 	br	2013c1c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2013c0c:	2013b000 	call	2013b00 <alt_get_errno>
 2013c10:	1007883a 	mov	r3,r2
 2013c14:	00801444 	movi	r2,81
 2013c18:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2013c1c:	00bfffc4 	movi	r2,-1
}
 2013c20:	e037883a 	mov	sp,fp
 2013c24:	dfc00117 	ldw	ra,4(sp)
 2013c28:	df000017 	ldw	fp,0(sp)
 2013c2c:	dec00204 	addi	sp,sp,8
 2013c30:	f800283a 	ret

02013c34 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2013c34:	deffdf04 	addi	sp,sp,-132
 2013c38:	dfc02015 	stw	ra,128(sp)
 2013c3c:	df001f15 	stw	fp,124(sp)
 2013c40:	df001f04 	addi	fp,sp,124
 2013c44:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013c48:	e0bfe204 	addi	r2,fp,-120
 2013c4c:	100b883a 	mov	r5,r2
 2013c50:	01003fc4 	movi	r4,255
 2013c54:	201bb540 	call	201bb54 <OSTaskQuery>
 2013c58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2013c5c:	e0bffe83 	ldbu	r2,-6(fp)
 2013c60:	10803fcc 	andi	r2,r2,255
 2013c64:	10001e1e 	bne	r2,zero,2013ce0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2013c68:	e0bfee83 	ldbu	r2,-70(fp)
 2013c6c:	10803fcc 	andi	r2,r2,255
 2013c70:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2013c74:	d0a73417 	ldw	r2,-25392(gp)
 2013c78:	e0fffd04 	addi	r3,fp,-12
 2013c7c:	180b883a 	mov	r5,r3
 2013c80:	1009883a 	mov	r4,r2
 2013c84:	201a36c0 	call	201a36c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2013c88:	e0bffe43 	ldbu	r2,-7(fp)
 2013c8c:	10803fcc 	andi	r2,r2,255
 2013c90:	10000726 	beq	r2,zero,2013cb0 <__env_lock+0x7c>
 2013c94:	d0a00d17 	ldw	r2,-32716(gp)
 2013c98:	e0ffe117 	ldw	r3,-124(fp)
 2013c9c:	1880041e 	bne	r3,r2,2013cb0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2013ca0:	d0a73317 	ldw	r2,-25396(gp)
 2013ca4:	10800044 	addi	r2,r2,1
 2013ca8:	d0a73315 	stw	r2,-25396(gp)
 2013cac:	00000a06 	br	2013cd8 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2013cb0:	d0a73417 	ldw	r2,-25392(gp)
 2013cb4:	e0fffe84 	addi	r3,fp,-6
 2013cb8:	180d883a 	mov	r6,r3
 2013cbc:	000b883a 	mov	r5,zero
 2013cc0:	1009883a 	mov	r4,r2
 2013cc4:	2019ee40 	call	2019ee4 <OSSemPend>
    locks  = 1;
 2013cc8:	00800044 	movi	r2,1
 2013ccc:	d0a73315 	stw	r2,-25396(gp)
    lockid = id;
 2013cd0:	e0bfe117 	ldw	r2,-124(fp)
 2013cd4:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2013cd8:	0001883a 	nop
 2013cdc:	00000106 	br	2013ce4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2013ce0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2013ce4:	e037883a 	mov	sp,fp
 2013ce8:	dfc00117 	ldw	ra,4(sp)
 2013cec:	df000017 	ldw	fp,0(sp)
 2013cf0:	dec00204 	addi	sp,sp,8
 2013cf4:	f800283a 	ret

02013cf8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2013cf8:	defffd04 	addi	sp,sp,-12
 2013cfc:	dfc00215 	stw	ra,8(sp)
 2013d00:	df000115 	stw	fp,4(sp)
 2013d04:	df000104 	addi	fp,sp,4
 2013d08:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2013d0c:	d0a73317 	ldw	r2,-25396(gp)
 2013d10:	10000b26 	beq	r2,zero,2013d40 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2013d14:	d0a73317 	ldw	r2,-25396(gp)
 2013d18:	10bfffc4 	addi	r2,r2,-1
 2013d1c:	d0a73315 	stw	r2,-25396(gp)
 2013d20:	d0a73317 	ldw	r2,-25396(gp)
 2013d24:	1000071e 	bne	r2,zero,2013d44 <__env_unlock+0x4c>
  {
    lockid = -1;
 2013d28:	00bfffc4 	movi	r2,-1
 2013d2c:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 2013d30:	d0a73417 	ldw	r2,-25392(gp)
 2013d34:	1009883a 	mov	r4,r2
 2013d38:	201a25c0 	call	201a25c <OSSemPost>
 2013d3c:	00000106 	br	2013d44 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2013d40:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013d44:	e037883a 	mov	sp,fp
 2013d48:	dfc00117 	ldw	ra,4(sp)
 2013d4c:	df000017 	ldw	fp,0(sp)
 2013d50:	dec00204 	addi	sp,sp,8
 2013d54:	f800283a 	ret

02013d58 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2013d58:	deffdb04 	addi	sp,sp,-148
 2013d5c:	dfc02415 	stw	ra,144(sp)
 2013d60:	df002315 	stw	fp,140(sp)
 2013d64:	df002304 	addi	fp,sp,140
 2013d68:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013d6c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2013d70:	d0a73743 	ldbu	r2,-25379(gp)
 2013d74:	10803fcc 	andi	r2,r2,255
 2013d78:	10800060 	cmpeqi	r2,r2,1
 2013d7c:	10003626 	beq	r2,zero,2013e58 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013d80:	e0bfe204 	addi	r2,fp,-120
 2013d84:	100b883a 	mov	r5,r2
 2013d88:	01003fc4 	movi	r4,255
 2013d8c:	201bb540 	call	201bb54 <OSTaskQuery>
 2013d90:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2013d94:	e0bffe83 	ldbu	r2,-6(fp)
 2013d98:	10803fcc 	andi	r2,r2,255
 2013d9c:	1000301e 	bne	r2,zero,2013e60 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2013da0:	e0bfee83 	ldbu	r2,-70(fp)
 2013da4:	10803fcc 	andi	r2,r2,255
 2013da8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2013dac:	d0a73617 	ldw	r2,-25384(gp)
 2013db0:	e0fffd04 	addi	r3,fp,-12
 2013db4:	180b883a 	mov	r5,r3
 2013db8:	1009883a 	mov	r4,r2
 2013dbc:	201a36c0 	call	201a36c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013dc0:	0005303a 	rdctl	r2,status
 2013dc4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013dc8:	e0ffe117 	ldw	r3,-124(fp)
 2013dcc:	00bfff84 	movi	r2,-2
 2013dd0:	1884703a 	and	r2,r3,r2
 2013dd4:	1001703a 	wrctl	status,r2
  
  return context;
 2013dd8:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2013ddc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2013de0:	e0bffd0b 	ldhu	r2,-12(fp)
 2013de4:	10bfffcc 	andi	r2,r2,65535
 2013de8:	10000b1e 	bne	r2,zero,2013e18 <__malloc_lock+0xc0>
 2013dec:	d0a00e17 	ldw	r2,-32712(gp)
 2013df0:	e0ffde17 	ldw	r3,-136(fp)
 2013df4:	1880081e 	bne	r3,r2,2013e18 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2013df8:	d0a73517 	ldw	r2,-25388(gp)
 2013dfc:	10800044 	addi	r2,r2,1
 2013e00:	d0a73515 	stw	r2,-25388(gp)
 2013e04:	e0bfdd17 	ldw	r2,-140(fp)
 2013e08:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013e0c:	e0bfdf17 	ldw	r2,-132(fp)
 2013e10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2013e14:	00000e06 	br	2013e50 <__malloc_lock+0xf8>
 2013e18:	e0bfdd17 	ldw	r2,-140(fp)
 2013e1c:	e0bfe015 	stw	r2,-128(fp)
 2013e20:	e0bfe017 	ldw	r2,-128(fp)
 2013e24:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2013e28:	d0a73617 	ldw	r2,-25384(gp)
 2013e2c:	e0fffe84 	addi	r3,fp,-6
 2013e30:	180d883a 	mov	r6,r3
 2013e34:	000b883a 	mov	r5,zero
 2013e38:	1009883a 	mov	r4,r2
 2013e3c:	2019ee40 	call	2019ee4 <OSSemPend>
    locks  = 1;
 2013e40:	00800044 	movi	r2,1
 2013e44:	d0a73515 	stw	r2,-25388(gp)
    lockid = id;
 2013e48:	e0bfde17 	ldw	r2,-136(fp)
 2013e4c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2013e50:	0001883a 	nop
 2013e54:	00000306 	br	2013e64 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2013e58:	0001883a 	nop
 2013e5c:	00000106 	br	2013e64 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2013e60:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2013e64:	e037883a 	mov	sp,fp
 2013e68:	dfc00117 	ldw	ra,4(sp)
 2013e6c:	df000017 	ldw	fp,0(sp)
 2013e70:	dec00204 	addi	sp,sp,8
 2013e74:	f800283a 	ret

02013e78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2013e78:	defff804 	addi	sp,sp,-32
 2013e7c:	dfc00715 	stw	ra,28(sp)
 2013e80:	df000615 	stw	fp,24(sp)
 2013e84:	df000604 	addi	fp,sp,24
 2013e88:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013e8c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2013e90:	d0a73743 	ldbu	r2,-25379(gp)
 2013e94:	10803fcc 	andi	r2,r2,255
 2013e98:	10800060 	cmpeqi	r2,r2,1
 2013e9c:	10002326 	beq	r2,zero,2013f2c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013ea0:	0005303a 	rdctl	r2,status
 2013ea4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013ea8:	e0fffe17 	ldw	r3,-8(fp)
 2013eac:	00bfff84 	movi	r2,-2
 2013eb0:	1884703a 	and	r2,r3,r2
 2013eb4:	1001703a 	wrctl	status,r2
  
  return context;
 2013eb8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2013ebc:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2013ec0:	d0a73517 	ldw	r2,-25388(gp)
 2013ec4:	1000051e 	bne	r2,zero,2013edc <__malloc_unlock+0x64>
 2013ec8:	e0bffa17 	ldw	r2,-24(fp)
 2013ecc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ed0:	e0bffb17 	ldw	r2,-20(fp)
 2013ed4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2013ed8:	00001506 	br	2013f30 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2013edc:	d0a73517 	ldw	r2,-25388(gp)
 2013ee0:	10bfffc4 	addi	r2,r2,-1
 2013ee4:	d0a73515 	stw	r2,-25388(gp)
 2013ee8:	d0a73517 	ldw	r2,-25388(gp)
 2013eec:	10000a1e 	bne	r2,zero,2013f18 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2013ef0:	00bfffc4 	movi	r2,-1
 2013ef4:	d0a00e15 	stw	r2,-32712(gp)
 2013ef8:	e0bffa17 	ldw	r2,-24(fp)
 2013efc:	e0bffc15 	stw	r2,-16(fp)
 2013f00:	e0bffc17 	ldw	r2,-16(fp)
 2013f04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2013f08:	d0a73617 	ldw	r2,-25384(gp)
 2013f0c:	1009883a 	mov	r4,r2
 2013f10:	201a25c0 	call	201a25c <OSSemPost>
 2013f14:	00000606 	br	2013f30 <__malloc_unlock+0xb8>
 2013f18:	e0bffa17 	ldw	r2,-24(fp)
 2013f1c:	e0bffd15 	stw	r2,-12(fp)
 2013f20:	e0bffd17 	ldw	r2,-12(fp)
 2013f24:	1001703a 	wrctl	status,r2
 2013f28:	00000106 	br	2013f30 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2013f2c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013f30:	e037883a 	mov	sp,fp
 2013f34:	dfc00117 	ldw	ra,4(sp)
 2013f38:	df000017 	ldw	fp,0(sp)
 2013f3c:	dec00204 	addi	sp,sp,8
 2013f40:	f800283a 	ret

02013f44 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2013f44:	defff704 	addi	sp,sp,-36
 2013f48:	dfc00815 	stw	ra,32(sp)
 2013f4c:	df000715 	stw	fp,28(sp)
 2013f50:	df000704 	addi	fp,sp,28
 2013f54:	e13ffd15 	stw	r4,-12(fp)
 2013f58:	e17ffe15 	stw	r5,-8(fp)
 2013f5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013f60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013f64:	e0bfff17 	ldw	r2,-4(fp)
 2013f68:	1000021e 	bne	r2,zero,2013f74 <OSEventNameGet+0x30>
        return (0);
 2013f6c:	0005883a 	mov	r2,zero
 2013f70:	00003706 	br	2014050 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2013f74:	e0bffd17 	ldw	r2,-12(fp)
 2013f78:	1000051e 	bne	r2,zero,2013f90 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2013f7c:	e0bfff17 	ldw	r2,-4(fp)
 2013f80:	00c00104 	movi	r3,4
 2013f84:	10c00005 	stb	r3,0(r2)
        return (0);
 2013f88:	0005883a 	mov	r2,zero
 2013f8c:	00003006 	br	2014050 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013f90:	e0bffe17 	ldw	r2,-8(fp)
 2013f94:	1000051e 	bne	r2,zero,2013fac <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2013f98:	e0bfff17 	ldw	r2,-4(fp)
 2013f9c:	00c00304 	movi	r3,12
 2013fa0:	10c00005 	stb	r3,0(r2)
        return (0);
 2013fa4:	0005883a 	mov	r2,zero
 2013fa8:	00002906 	br	2014050 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013fac:	d0a74503 	ldbu	r2,-25324(gp)
 2013fb0:	10803fcc 	andi	r2,r2,255
 2013fb4:	10000526 	beq	r2,zero,2013fcc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2013fb8:	e0bfff17 	ldw	r2,-4(fp)
 2013fbc:	00c00444 	movi	r3,17
 2013fc0:	10c00005 	stb	r3,0(r2)
        return (0);
 2013fc4:	0005883a 	mov	r2,zero
 2013fc8:	00002106 	br	2014050 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2013fcc:	e0bffd17 	ldw	r2,-12(fp)
 2013fd0:	10800003 	ldbu	r2,0(r2)
 2013fd4:	10803fcc 	andi	r2,r2,255
 2013fd8:	10bfffc4 	addi	r2,r2,-1
 2013fdc:	10800128 	cmpgeui	r2,r2,4
 2013fe0:	10000526 	beq	r2,zero,2013ff8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2013fe4:	e0bfff17 	ldw	r2,-4(fp)
 2013fe8:	00c00044 	movi	r3,1
 2013fec:	10c00005 	stb	r3,0(r2)
             return (0);
 2013ff0:	0005883a 	mov	r2,zero
 2013ff4:	00001606 	br	2014050 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2013ff8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013ffc:	0005303a 	rdctl	r2,status
 2014000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014004:	e0fffb17 	ldw	r3,-20(fp)
 2014008:	00bfff84 	movi	r2,-2
 201400c:	1884703a 	and	r2,r3,r2
 2014010:	1001703a 	wrctl	status,r2
  
  return context;
 2014014:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2014018:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 201401c:	e0bffd17 	ldw	r2,-12(fp)
 2014020:	10800384 	addi	r2,r2,14
 2014024:	100b883a 	mov	r5,r2
 2014028:	e13ffe17 	ldw	r4,-8(fp)
 201402c:	20159c80 	call	20159c8 <OS_StrCopy>
 2014030:	e0bffa05 	stb	r2,-24(fp)
 2014034:	e0bff917 	ldw	r2,-28(fp)
 2014038:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201403c:	e0bffc17 	ldw	r2,-16(fp)
 2014040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014044:	e0bfff17 	ldw	r2,-4(fp)
 2014048:	10000005 	stb	zero,0(r2)
    return (len);
 201404c:	e0bffa03 	ldbu	r2,-24(fp)
}
 2014050:	e037883a 	mov	sp,fp
 2014054:	dfc00117 	ldw	ra,4(sp)
 2014058:	df000017 	ldw	fp,0(sp)
 201405c:	dec00204 	addi	sp,sp,8
 2014060:	f800283a 	ret

02014064 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2014064:	defff604 	addi	sp,sp,-40
 2014068:	dfc00915 	stw	ra,36(sp)
 201406c:	df000815 	stw	fp,32(sp)
 2014070:	df000804 	addi	fp,sp,32
 2014074:	e13ffd15 	stw	r4,-12(fp)
 2014078:	e17ffe15 	stw	r5,-8(fp)
 201407c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014080:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014084:	e0bfff17 	ldw	r2,-4(fp)
 2014088:	10004026 	beq	r2,zero,201418c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 201408c:	e0bffd17 	ldw	r2,-12(fp)
 2014090:	1000041e 	bne	r2,zero,20140a4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2014094:	e0bfff17 	ldw	r2,-4(fp)
 2014098:	00c00104 	movi	r3,4
 201409c:	10c00005 	stb	r3,0(r2)
        return;
 20140a0:	00003b06 	br	2014190 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20140a4:	e0bffe17 	ldw	r2,-8(fp)
 20140a8:	1000041e 	bne	r2,zero,20140bc <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20140ac:	e0bfff17 	ldw	r2,-4(fp)
 20140b0:	00c00304 	movi	r3,12
 20140b4:	10c00005 	stb	r3,0(r2)
        return;
 20140b8:	00003506 	br	2014190 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20140bc:	d0a74503 	ldbu	r2,-25324(gp)
 20140c0:	10803fcc 	andi	r2,r2,255
 20140c4:	10000426 	beq	r2,zero,20140d8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20140c8:	e0bfff17 	ldw	r2,-4(fp)
 20140cc:	00c00484 	movi	r3,18
 20140d0:	10c00005 	stb	r3,0(r2)
        return;
 20140d4:	00002e06 	br	2014190 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 20140d8:	e0bffd17 	ldw	r2,-12(fp)
 20140dc:	10800003 	ldbu	r2,0(r2)
 20140e0:	10803fcc 	andi	r2,r2,255
 20140e4:	10bfffc4 	addi	r2,r2,-1
 20140e8:	10800128 	cmpgeui	r2,r2,4
 20140ec:	10000426 	beq	r2,zero,2014100 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20140f0:	e0bfff17 	ldw	r2,-4(fp)
 20140f4:	00c00044 	movi	r3,1
 20140f8:	10c00005 	stb	r3,0(r2)
             return;
 20140fc:	00002406 	br	2014190 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2014100:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014104:	0005303a 	rdctl	r2,status
 2014108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201410c:	e0fffc17 	ldw	r3,-16(fp)
 2014110:	00bfff84 	movi	r2,-2
 2014114:	1884703a 	and	r2,r3,r2
 2014118:	1001703a 	wrctl	status,r2
  
  return context;
 201411c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2014120:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2014124:	e13ffe17 	ldw	r4,-8(fp)
 2014128:	2015a3c0 	call	2015a3c <OS_StrLen>
 201412c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2014130:	e0bffa03 	ldbu	r2,-24(fp)
 2014134:	10800830 	cmpltui	r2,r2,32
 2014138:	1000081e 	bne	r2,zero,201415c <OSEventNameSet+0xf8>
 201413c:	e0bff817 	ldw	r2,-32(fp)
 2014140:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014144:	e0bff917 	ldw	r2,-28(fp)
 2014148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 201414c:	e0bfff17 	ldw	r2,-4(fp)
 2014150:	00c002c4 	movi	r3,11
 2014154:	10c00005 	stb	r3,0(r2)
        return;
 2014158:	00000d06 	br	2014190 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 201415c:	e0bffd17 	ldw	r2,-12(fp)
 2014160:	10800384 	addi	r2,r2,14
 2014164:	e17ffe17 	ldw	r5,-8(fp)
 2014168:	1009883a 	mov	r4,r2
 201416c:	20159c80 	call	20159c8 <OS_StrCopy>
 2014170:	e0bff817 	ldw	r2,-32(fp)
 2014174:	e0bffb15 	stw	r2,-20(fp)
 2014178:	e0bffb17 	ldw	r2,-20(fp)
 201417c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014180:	e0bfff17 	ldw	r2,-4(fp)
 2014184:	10000005 	stb	zero,0(r2)
 2014188:	00000106 	br	2014190 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201418c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2014190:	e037883a 	mov	sp,fp
 2014194:	dfc00117 	ldw	ra,4(sp)
 2014198:	df000017 	ldw	fp,0(sp)
 201419c:	dec00204 	addi	sp,sp,8
 20141a0:	f800283a 	ret

020141a4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 20141a4:	deffed04 	addi	sp,sp,-76
 20141a8:	dfc01215 	stw	ra,72(sp)
 20141ac:	df001115 	stw	fp,68(sp)
 20141b0:	df001104 	addi	fp,sp,68
 20141b4:	e13ffc15 	stw	r4,-16(fp)
 20141b8:	e17ffd15 	stw	r5,-12(fp)
 20141bc:	e1bffe15 	stw	r6,-8(fp)
 20141c0:	3805883a 	mov	r2,r7
 20141c4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 20141c8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 20141cc:	e0800217 	ldw	r2,8(fp)
 20141d0:	1000021e 	bne	r2,zero,20141dc <OSEventPendMulti+0x38>
        return (0);
 20141d4:	0005883a 	mov	r2,zero
 20141d8:	00017106 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 20141dc:	e0bffc17 	ldw	r2,-16(fp)
 20141e0:	1000051e 	bne	r2,zero,20141f8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 20141e4:	e0800217 	ldw	r2,8(fp)
 20141e8:	00c00104 	movi	r3,4
 20141ec:	10c00005 	stb	r3,0(r2)
        return (0);
 20141f0:	0005883a 	mov	r2,zero
 20141f4:	00016a06 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 20141f8:	e0bffd17 	ldw	r2,-12(fp)
 20141fc:	1000051e 	bne	r2,zero,2014214 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2014200:	e0800217 	ldw	r2,8(fp)
 2014204:	00c00104 	movi	r3,4
 2014208:	10c00005 	stb	r3,0(r2)
        return (0);
 201420c:	0005883a 	mov	r2,zero
 2014210:	00016306 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2014214:	e0bffe17 	ldw	r2,-8(fp)
 2014218:	1000051e 	bne	r2,zero,2014230 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 201421c:	e0800217 	ldw	r2,8(fp)
 2014220:	00c00104 	movi	r3,4
 2014224:	10c00005 	stb	r3,0(r2)
        return (0);
 2014228:	0005883a 	mov	r2,zero
 201422c:	00015c06 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2014230:	e0bffd17 	ldw	r2,-12(fp)
 2014234:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2014238:	e0bffc17 	ldw	r2,-16(fp)
 201423c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2014240:	e0bfef17 	ldw	r2,-68(fp)
 2014244:	10800017 	ldw	r2,0(r2)
 2014248:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 201424c:	00001906 	br	20142b4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2014250:	e0bff017 	ldw	r2,-64(fp)
 2014254:	10800003 	ldbu	r2,0(r2)
 2014258:	10803fcc 	andi	r2,r2,255
 201425c:	10c000a0 	cmpeqi	r3,r2,2
 2014260:	1800091e 	bne	r3,zero,2014288 <OSEventPendMulti+0xe4>
 2014264:	10c000e0 	cmpeqi	r3,r2,3
 2014268:	1800091e 	bne	r3,zero,2014290 <OSEventPendMulti+0xec>
 201426c:	10800060 	cmpeqi	r2,r2,1
 2014270:	1000091e 	bne	r2,zero,2014298 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2014274:	e0800217 	ldw	r2,8(fp)
 2014278:	00c00044 	movi	r3,1
 201427c:	10c00005 	stb	r3,0(r2)
                 return (0);
 2014280:	0005883a 	mov	r2,zero
 2014284:	00014606 	br	20147a0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2014288:	0001883a 	nop
 201428c:	00000306 	br	201429c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2014290:	0001883a 	nop
 2014294:	00000106 	br	201429c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2014298:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 201429c:	e0bfef17 	ldw	r2,-68(fp)
 20142a0:	10800104 	addi	r2,r2,4
 20142a4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20142a8:	e0bfef17 	ldw	r2,-68(fp)
 20142ac:	10800017 	ldw	r2,0(r2)
 20142b0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20142b4:	e0bff017 	ldw	r2,-64(fp)
 20142b8:	103fe51e 	bne	r2,zero,2014250 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20142bc:	d0a74503 	ldbu	r2,-25324(gp)
 20142c0:	10803fcc 	andi	r2,r2,255
 20142c4:	10000526 	beq	r2,zero,20142dc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20142c8:	e0800217 	ldw	r2,8(fp)
 20142cc:	00c00084 	movi	r3,2
 20142d0:	10c00005 	stb	r3,0(r2)
        return (0);
 20142d4:	0005883a 	mov	r2,zero
 20142d8:	00013106 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20142dc:	d0a73703 	ldbu	r2,-25380(gp)
 20142e0:	10803fcc 	andi	r2,r2,255
 20142e4:	10000526 	beq	r2,zero,20142fc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20142e8:	e0800217 	ldw	r2,8(fp)
 20142ec:	00c00344 	movi	r3,13
 20142f0:	10c00005 	stb	r3,0(r2)
        return (0);
 20142f4:	0005883a 	mov	r2,zero
 20142f8:	00012906 	br	20147a0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20142fc:	0005303a 	rdctl	r2,status
 2014300:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014304:	e0fffb17 	ldw	r3,-20(fp)
 2014308:	00bfff84 	movi	r2,-2
 201430c:	1884703a 	and	r2,r3,r2
 2014310:	1001703a 	wrctl	status,r2
  
  return context;
 2014314:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014318:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 201431c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2014320:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2014324:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2014328:	e0bffc17 	ldw	r2,-16(fp)
 201432c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2014330:	e0bfef17 	ldw	r2,-68(fp)
 2014334:	10800017 	ldw	r2,0(r2)
 2014338:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 201433c:	00008106 	br	2014544 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2014340:	e0bff017 	ldw	r2,-64(fp)
 2014344:	10800003 	ldbu	r2,0(r2)
 2014348:	10803fcc 	andi	r2,r2,255
 201434c:	10c000a0 	cmpeqi	r3,r2,2
 2014350:	18003c1e 	bne	r3,zero,2014444 <OSEventPendMulti+0x2a0>
 2014354:	10c000e0 	cmpeqi	r3,r2,3
 2014358:	1800031e 	bne	r3,zero,2014368 <OSEventPendMulti+0x1c4>
 201435c:	10800060 	cmpeqi	r2,r2,1
 2014360:	10001e1e 	bne	r2,zero,20143dc <OSEventPendMulti+0x238>
 2014364:	00006606 	br	2014500 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2014368:	e0bff017 	ldw	r2,-64(fp)
 201436c:	1080020b 	ldhu	r2,8(r2)
 2014370:	10bfffcc 	andi	r2,r2,65535
 2014374:	10001526 	beq	r2,zero,20143cc <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2014378:	e0bff017 	ldw	r2,-64(fp)
 201437c:	1080020b 	ldhu	r2,8(r2)
 2014380:	10bfffc4 	addi	r2,r2,-1
 2014384:	1007883a 	mov	r3,r2
 2014388:	e0bff017 	ldw	r2,-64(fp)
 201438c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2014390:	e0bffd17 	ldw	r2,-12(fp)
 2014394:	10c00104 	addi	r3,r2,4
 2014398:	e0fffd15 	stw	r3,-12(fp)
 201439c:	e0fff017 	ldw	r3,-64(fp)
 20143a0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 20143a4:	00800044 	movi	r2,1
 20143a8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20143ac:	e0bffe17 	ldw	r2,-8(fp)
 20143b0:	10c00104 	addi	r3,r2,4
 20143b4:	e0fffe15 	stw	r3,-8(fp)
 20143b8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20143bc:	e0bff18b 	ldhu	r2,-58(fp)
 20143c0:	10800044 	addi	r2,r2,1
 20143c4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20143c8:	00005806 	br	201452c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20143cc:	e0bff203 	ldbu	r2,-56(fp)
 20143d0:	10800054 	ori	r2,r2,1
 20143d4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20143d8:	00005406 	br	201452c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20143dc:	e0bff017 	ldw	r2,-64(fp)
 20143e0:	10800117 	ldw	r2,4(r2)
 20143e4:	10001326 	beq	r2,zero,2014434 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20143e8:	e0bffe17 	ldw	r2,-8(fp)
 20143ec:	10c00104 	addi	r3,r2,4
 20143f0:	e0fffe15 	stw	r3,-8(fp)
 20143f4:	e0fff017 	ldw	r3,-64(fp)
 20143f8:	18c00117 	ldw	r3,4(r3)
 20143fc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2014400:	e0bff017 	ldw	r2,-64(fp)
 2014404:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2014408:	e0bffd17 	ldw	r2,-12(fp)
 201440c:	10c00104 	addi	r3,r2,4
 2014410:	e0fffd15 	stw	r3,-12(fp)
 2014414:	e0fff017 	ldw	r3,-64(fp)
 2014418:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 201441c:	00800044 	movi	r2,1
 2014420:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2014424:	e0bff18b 	ldhu	r2,-58(fp)
 2014428:	10800044 	addi	r2,r2,1
 201442c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2014430:	00003e06 	br	201452c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2014434:	e0bff203 	ldbu	r2,-56(fp)
 2014438:	10800094 	ori	r2,r2,2
 201443c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2014440:	00003a06 	br	201452c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2014444:	e0bff017 	ldw	r2,-64(fp)
 2014448:	10800117 	ldw	r2,4(r2)
 201444c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2014450:	e0bff517 	ldw	r2,-44(fp)
 2014454:	1080058b 	ldhu	r2,22(r2)
 2014458:	10bfffcc 	andi	r2,r2,65535
 201445c:	10002426 	beq	r2,zero,20144f0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2014460:	e0bffe17 	ldw	r2,-8(fp)
 2014464:	10c00104 	addi	r3,r2,4
 2014468:	e0fffe15 	stw	r3,-8(fp)
 201446c:	e0fff517 	ldw	r3,-44(fp)
 2014470:	18c00417 	ldw	r3,16(r3)
 2014474:	19400104 	addi	r5,r3,4
 2014478:	e13ff517 	ldw	r4,-44(fp)
 201447c:	21400415 	stw	r5,16(r4)
 2014480:	18c00017 	ldw	r3,0(r3)
 2014484:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2014488:	e0bff517 	ldw	r2,-44(fp)
 201448c:	10c00417 	ldw	r3,16(r2)
 2014490:	e0bff517 	ldw	r2,-44(fp)
 2014494:	10800217 	ldw	r2,8(r2)
 2014498:	1880041e 	bne	r3,r2,20144ac <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 201449c:	e0bff517 	ldw	r2,-44(fp)
 20144a0:	10c00117 	ldw	r3,4(r2)
 20144a4:	e0bff517 	ldw	r2,-44(fp)
 20144a8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20144ac:	e0bff517 	ldw	r2,-44(fp)
 20144b0:	1080058b 	ldhu	r2,22(r2)
 20144b4:	10bfffc4 	addi	r2,r2,-1
 20144b8:	1007883a 	mov	r3,r2
 20144bc:	e0bff517 	ldw	r2,-44(fp)
 20144c0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20144c4:	e0bffd17 	ldw	r2,-12(fp)
 20144c8:	10c00104 	addi	r3,r2,4
 20144cc:	e0fffd15 	stw	r3,-12(fp)
 20144d0:	e0fff017 	ldw	r3,-64(fp)
 20144d4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20144d8:	00800044 	movi	r2,1
 20144dc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20144e0:	e0bff18b 	ldhu	r2,-58(fp)
 20144e4:	10800044 	addi	r2,r2,1
 20144e8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20144ec:	00000f06 	br	201452c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20144f0:	e0bff203 	ldbu	r2,-56(fp)
 20144f4:	10800114 	ori	r2,r2,4
 20144f8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20144fc:	00000b06 	br	201452c <OSEventPendMulti+0x388>
 2014500:	e0bff317 	ldw	r2,-52(fp)
 2014504:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014508:	e0bff417 	ldw	r2,-48(fp)
 201450c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2014510:	e0bffd17 	ldw	r2,-12(fp)
 2014514:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2014518:	e0800217 	ldw	r2,8(fp)
 201451c:	00c00044 	movi	r3,1
 2014520:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2014524:	e0bff18b 	ldhu	r2,-58(fp)
 2014528:	00009d06 	br	20147a0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 201452c:	e0bfef17 	ldw	r2,-68(fp)
 2014530:	10800104 	addi	r2,r2,4
 2014534:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2014538:	e0bfef17 	ldw	r2,-68(fp)
 201453c:	10800017 	ldw	r2,0(r2)
 2014540:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2014544:	e0bff017 	ldw	r2,-64(fp)
 2014548:	103f7d1e 	bne	r2,zero,2014340 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 201454c:	e0bff103 	ldbu	r2,-60(fp)
 2014550:	10800058 	cmpnei	r2,r2,1
 2014554:	10000a1e 	bne	r2,zero,2014580 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2014558:	e0bffd17 	ldw	r2,-12(fp)
 201455c:	10000015 	stw	zero,0(r2)
 2014560:	e0bff317 	ldw	r2,-52(fp)
 2014564:	e0bff615 	stw	r2,-40(fp)
 2014568:	e0bff617 	ldw	r2,-40(fp)
 201456c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2014570:	e0800217 	ldw	r2,8(fp)
 2014574:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2014578:	e0bff18b 	ldhu	r2,-58(fp)
 201457c:	00008806 	br	20147a0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2014580:	d0a74617 	ldw	r2,-25320(gp)
 2014584:	d0e74617 	ldw	r3,-25320(gp)
 2014588:	19000c03 	ldbu	r4,48(r3)
 201458c:	e0fff203 	ldbu	r3,-56(fp)
 2014590:	20c6b03a 	or	r3,r4,r3
 2014594:	1809883a 	mov	r4,r3
 2014598:	00ffe004 	movi	r3,-128
 201459c:	20c6b03a 	or	r3,r4,r3
 20145a0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20145a4:	d0a74617 	ldw	r2,-25320(gp)
 20145a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 20145ac:	d0a74617 	ldw	r2,-25320(gp)
 20145b0:	e0ffff0b 	ldhu	r3,-4(fp)
 20145b4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20145b8:	e13ffc17 	ldw	r4,-16(fp)
 20145bc:	20150e00 	call	20150e0 <OS_EventTaskWaitMulti>
 20145c0:	e0bff317 	ldw	r2,-52(fp)
 20145c4:	e0bff915 	stw	r2,-28(fp)
 20145c8:	e0bff917 	ldw	r2,-28(fp)
 20145cc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20145d0:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20145d4:	0005303a 	rdctl	r2,status
 20145d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20145dc:	e0fff717 	ldw	r3,-36(fp)
 20145e0:	00bfff84 	movi	r2,-2
 20145e4:	1884703a 	and	r2,r3,r2
 20145e8:	1001703a 	wrctl	status,r2
  
  return context;
 20145ec:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20145f0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 20145f4:	d0a74617 	ldw	r2,-25320(gp)
 20145f8:	10800c43 	ldbu	r2,49(r2)
 20145fc:	10803fcc 	andi	r2,r2,255
 2014600:	10000226 	beq	r2,zero,201460c <OSEventPendMulti+0x468>
 2014604:	108000a0 	cmpeqi	r2,r2,2
 2014608:	10001826 	beq	r2,zero,201466c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 201460c:	d0a74617 	ldw	r2,-25320(gp)
 2014610:	10800717 	ldw	r2,28(r2)
 2014614:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2014618:	e0bff017 	ldw	r2,-64(fp)
 201461c:	10000b26 	beq	r2,zero,201464c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2014620:	e0bffd17 	ldw	r2,-12(fp)
 2014624:	10c00104 	addi	r3,r2,4
 2014628:	e0fffd15 	stw	r3,-12(fp)
 201462c:	e0fff017 	ldw	r3,-64(fp)
 2014630:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2014634:	e0bffd17 	ldw	r2,-12(fp)
 2014638:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 201463c:	e0bff18b 	ldhu	r2,-58(fp)
 2014640:	10800044 	addi	r2,r2,1
 2014644:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 2014648:	00000d06 	br	2014680 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 201464c:	d0a74617 	ldw	r2,-25320(gp)
 2014650:	00c00044 	movi	r3,1
 2014654:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2014658:	d0a74617 	ldw	r2,-25320(gp)
 201465c:	e17ffc17 	ldw	r5,-16(fp)
 2014660:	1009883a 	mov	r4,r2
 2014664:	20152e80 	call	20152e8 <OS_EventTaskRemoveMulti>
             }
			 break;
 2014668:	00000506 	br	2014680 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201466c:	d0a74617 	ldw	r2,-25320(gp)
 2014670:	e17ffc17 	ldw	r5,-16(fp)
 2014674:	1009883a 	mov	r4,r2
 2014678:	20152e80 	call	20152e8 <OS_EventTaskRemoveMulti>
             break;
 201467c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2014680:	d0a74617 	ldw	r2,-25320(gp)
 2014684:	10800c43 	ldbu	r2,49(r2)
 2014688:	10803fcc 	andi	r2,r2,255
 201468c:	10000326 	beq	r2,zero,201469c <OSEventPendMulti+0x4f8>
 2014690:	108000a0 	cmpeqi	r2,r2,2
 2014694:	1000231e 	bne	r2,zero,2014724 <OSEventPendMulti+0x580>
 2014698:	00002a06 	br	2014744 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 201469c:	e0bff017 	ldw	r2,-64(fp)
 20146a0:	10800003 	ldbu	r2,0(r2)
 20146a4:	10803fcc 	andi	r2,r2,255
 20146a8:	0080100e 	bge	zero,r2,20146ec <OSEventPendMulti+0x548>
 20146ac:	10c000d0 	cmplti	r3,r2,3
 20146b0:	1800071e 	bne	r3,zero,20146d0 <OSEventPendMulti+0x52c>
 20146b4:	108000e0 	cmpeqi	r2,r2,3
 20146b8:	10000c26 	beq	r2,zero,20146ec <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20146bc:	e0bffe17 	ldw	r2,-8(fp)
 20146c0:	10c00104 	addi	r3,r2,4
 20146c4:	e0fffe15 	stw	r3,-8(fp)
 20146c8:	10000015 	stw	zero,0(r2)
                      break;
 20146cc:	00001206 	br	2014718 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20146d0:	e0bffe17 	ldw	r2,-8(fp)
 20146d4:	10c00104 	addi	r3,r2,4
 20146d8:	e0fffe15 	stw	r3,-8(fp)
 20146dc:	d0e74617 	ldw	r3,-25320(gp)
 20146e0:	18c00917 	ldw	r3,36(r3)
 20146e4:	10c00015 	stw	r3,0(r2)
                      break;
 20146e8:	00000b06 	br	2014718 <OSEventPendMulti+0x574>
 20146ec:	e0bff317 	ldw	r2,-52(fp)
 20146f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20146f4:	e0bff817 	ldw	r2,-32(fp)
 20146f8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20146fc:	e0bffd17 	ldw	r2,-12(fp)
 2014700:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2014704:	e0800217 	ldw	r2,8(fp)
 2014708:	00c00044 	movi	r3,1
 201470c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2014710:	e0bff18b 	ldhu	r2,-58(fp)
 2014714:	00002206 	br	20147a0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2014718:	e0800217 	ldw	r2,8(fp)
 201471c:	10000005 	stb	zero,0(r2)
             break;
 2014720:	00001006 	br	2014764 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2014724:	e0bffe17 	ldw	r2,-8(fp)
 2014728:	10c00104 	addi	r3,r2,4
 201472c:	e0fffe15 	stw	r3,-8(fp)
 2014730:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2014734:	e0800217 	ldw	r2,8(fp)
 2014738:	00c00384 	movi	r3,14
 201473c:	10c00005 	stb	r3,0(r2)
             break;
 2014740:	00000806 	br	2014764 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2014744:	e0bffe17 	ldw	r2,-8(fp)
 2014748:	10c00104 	addi	r3,r2,4
 201474c:	e0fffe15 	stw	r3,-8(fp)
 2014750:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2014754:	e0800217 	ldw	r2,8(fp)
 2014758:	00c00284 	movi	r3,10
 201475c:	10c00005 	stb	r3,0(r2)
             break;
 2014760:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2014764:	d0a74617 	ldw	r2,-25320(gp)
 2014768:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 201476c:	d0a74617 	ldw	r2,-25320(gp)
 2014770:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2014774:	d0a74617 	ldw	r2,-25320(gp)
 2014778:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201477c:	d0a74617 	ldw	r2,-25320(gp)
 2014780:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2014784:	d0a74617 	ldw	r2,-25320(gp)
 2014788:	10000915 	stw	zero,36(r2)
 201478c:	e0bff317 	ldw	r2,-52(fp)
 2014790:	e0bffa15 	stw	r2,-24(fp)
 2014794:	e0bffa17 	ldw	r2,-24(fp)
 2014798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 201479c:	e0bff18b 	ldhu	r2,-58(fp)
}
 20147a0:	e037883a 	mov	sp,fp
 20147a4:	dfc00117 	ldw	ra,4(sp)
 20147a8:	df000017 	ldw	fp,0(sp)
 20147ac:	dec00204 	addi	sp,sp,8
 20147b0:	f800283a 	ret

020147b4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 20147b4:	defffe04 	addi	sp,sp,-8
 20147b8:	dfc00115 	stw	ra,4(sp)
 20147bc:	df000015 	stw	fp,0(sp)
 20147c0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20147c4:	201ded40 	call	201ded4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20147c8:	20155300 	call	2015530 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20147cc:	20155780 	call	2015578 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20147d0:	20156e40 	call	20156e4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20147d4:	20154500 	call	2015450 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20147d8:	20175840 	call	2017584 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20147dc:	201894c0 	call	201894c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20147e0:	2019a740 	call	2019a74 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20147e4:	20155e40 	call	20155e4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20147e8:	20156640 	call	2015664 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20147ec:	201def40 	call	201def4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20147f0:	2015f580 	call	2015f58 <OSDebugInit>
#endif
}
 20147f4:	0001883a 	nop
 20147f8:	e037883a 	mov	sp,fp
 20147fc:	dfc00117 	ldw	ra,4(sp)
 2014800:	df000017 	ldw	fp,0(sp)
 2014804:	dec00204 	addi	sp,sp,8
 2014808:	f800283a 	ret

0201480c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 201480c:	deffff04 	addi	sp,sp,-4
 2014810:	df000015 	stw	fp,0(sp)
 2014814:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2014818:	d0a73743 	ldbu	r2,-25379(gp)
 201481c:	10803fcc 	andi	r2,r2,255
 2014820:	10800058 	cmpnei	r2,r2,1
 2014824:	1000071e 	bne	r2,zero,2014844 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2014828:	d0a74503 	ldbu	r2,-25324(gp)
 201482c:	10803fcc 	andi	r2,r2,255
 2014830:	10803fe0 	cmpeqi	r2,r2,255
 2014834:	1000031e 	bne	r2,zero,2014844 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2014838:	d0a74503 	ldbu	r2,-25324(gp)
 201483c:	10800044 	addi	r2,r2,1
 2014840:	d0a74505 	stb	r2,-25324(gp)
        }
    }
}
 2014844:	0001883a 	nop
 2014848:	e037883a 	mov	sp,fp
 201484c:	df000017 	ldw	fp,0(sp)
 2014850:	dec00104 	addi	sp,sp,4
 2014854:	f800283a 	ret

02014858 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2014858:	defffb04 	addi	sp,sp,-20
 201485c:	dfc00415 	stw	ra,16(sp)
 2014860:	df000315 	stw	fp,12(sp)
 2014864:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014868:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 201486c:	d0a73743 	ldbu	r2,-25379(gp)
 2014870:	10803fcc 	andi	r2,r2,255
 2014874:	10800058 	cmpnei	r2,r2,1
 2014878:	10002f1e 	bne	r2,zero,2014938 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201487c:	0005303a 	rdctl	r2,status
 2014880:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014884:	e0ffff17 	ldw	r3,-4(fp)
 2014888:	00bfff84 	movi	r2,-2
 201488c:	1884703a 	and	r2,r3,r2
 2014890:	1001703a 	wrctl	status,r2
  
  return context;
 2014894:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2014898:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 201489c:	d0a74503 	ldbu	r2,-25324(gp)
 20148a0:	10803fcc 	andi	r2,r2,255
 20148a4:	10000326 	beq	r2,zero,20148b4 <OSIntExit+0x5c>
            OSIntNesting--;
 20148a8:	d0a74503 	ldbu	r2,-25324(gp)
 20148ac:	10bfffc4 	addi	r2,r2,-1
 20148b0:	d0a74505 	stb	r2,-25324(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 20148b4:	d0a74503 	ldbu	r2,-25324(gp)
 20148b8:	10803fcc 	andi	r2,r2,255
 20148bc:	10001a1e 	bne	r2,zero,2014928 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 20148c0:	d0a73703 	ldbu	r2,-25380(gp)
 20148c4:	10803fcc 	andi	r2,r2,255
 20148c8:	1000171e 	bne	r2,zero,2014928 <OSIntExit+0xd0>
                OS_SchedNew();
 20148cc:	20159540 	call	2015954 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20148d0:	d0e73903 	ldbu	r3,-25372(gp)
 20148d4:	d0a73943 	ldbu	r2,-25371(gp)
 20148d8:	18c03fcc 	andi	r3,r3,255
 20148dc:	10803fcc 	andi	r2,r2,255
 20148e0:	18801126 	beq	r3,r2,2014928 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20148e4:	d0a73903 	ldbu	r2,-25372(gp)
 20148e8:	10c03fcc 	andi	r3,r2,255
 20148ec:	008080f4 	movhi	r2,515
 20148f0:	10b62a04 	addi	r2,r2,-10072
 20148f4:	18c7883a 	add	r3,r3,r3
 20148f8:	18c7883a 	add	r3,r3,r3
 20148fc:	10c5883a 	add	r2,r2,r3
 2014900:	10800017 	ldw	r2,0(r2)
 2014904:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2014908:	d0a74117 	ldw	r2,-25340(gp)
 201490c:	10c00e17 	ldw	r3,56(r2)
 2014910:	18c00044 	addi	r3,r3,1
 2014914:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2014918:	d0a73c17 	ldw	r2,-25360(gp)
 201491c:	10800044 	addi	r2,r2,1
 2014920:	d0a73c15 	stw	r2,-25360(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2014924:	201dc000 	call	201dc00 <OSCtxSw>
 2014928:	e0bffd17 	ldw	r2,-12(fp)
 201492c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014930:	e0bffe17 	ldw	r2,-8(fp)
 2014934:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2014938:	0001883a 	nop
 201493c:	e037883a 	mov	sp,fp
 2014940:	dfc00117 	ldw	ra,4(sp)
 2014944:	df000017 	ldw	fp,0(sp)
 2014948:	dec00204 	addi	sp,sp,8
 201494c:	f800283a 	ret

02014950 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2014950:	defffc04 	addi	sp,sp,-16
 2014954:	df000315 	stw	fp,12(sp)
 2014958:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201495c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2014960:	d0a73743 	ldbu	r2,-25379(gp)
 2014964:	10803fcc 	andi	r2,r2,255
 2014968:	10800058 	cmpnei	r2,r2,1
 201496c:	1000161e 	bne	r2,zero,20149c8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014970:	0005303a 	rdctl	r2,status
 2014974:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014978:	e0ffff17 	ldw	r3,-4(fp)
 201497c:	00bfff84 	movi	r2,-2
 2014980:	1884703a 	and	r2,r3,r2
 2014984:	1001703a 	wrctl	status,r2
  
  return context;
 2014988:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 201498c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2014990:	d0a74503 	ldbu	r2,-25324(gp)
 2014994:	10803fcc 	andi	r2,r2,255
 2014998:	1000071e 	bne	r2,zero,20149b8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 201499c:	d0a73703 	ldbu	r2,-25380(gp)
 20149a0:	10803fcc 	andi	r2,r2,255
 20149a4:	10803fe0 	cmpeqi	r2,r2,255
 20149a8:	1000031e 	bne	r2,zero,20149b8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 20149ac:	d0a73703 	ldbu	r2,-25380(gp)
 20149b0:	10800044 	addi	r2,r2,1
 20149b4:	d0a73705 	stb	r2,-25380(gp)
 20149b8:	e0bffd17 	ldw	r2,-12(fp)
 20149bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20149c0:	e0bffe17 	ldw	r2,-8(fp)
 20149c4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20149c8:	0001883a 	nop
 20149cc:	e037883a 	mov	sp,fp
 20149d0:	df000017 	ldw	fp,0(sp)
 20149d4:	dec00104 	addi	sp,sp,4
 20149d8:	f800283a 	ret

020149dc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20149dc:	defff804 	addi	sp,sp,-32
 20149e0:	dfc00715 	stw	ra,28(sp)
 20149e4:	df000615 	stw	fp,24(sp)
 20149e8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20149ec:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20149f0:	d0a73743 	ldbu	r2,-25379(gp)
 20149f4:	10803fcc 	andi	r2,r2,255
 20149f8:	10800058 	cmpnei	r2,r2,1
 20149fc:	1000281e 	bne	r2,zero,2014aa0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a00:	0005303a 	rdctl	r2,status
 2014a04:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a08:	e0ffff17 	ldw	r3,-4(fp)
 2014a0c:	00bfff84 	movi	r2,-2
 2014a10:	1884703a 	and	r2,r3,r2
 2014a14:	1001703a 	wrctl	status,r2
  
  return context;
 2014a18:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2014a1c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2014a20:	d0a73703 	ldbu	r2,-25380(gp)
 2014a24:	10803fcc 	andi	r2,r2,255
 2014a28:	10001926 	beq	r2,zero,2014a90 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2014a2c:	d0a73703 	ldbu	r2,-25380(gp)
 2014a30:	10bfffc4 	addi	r2,r2,-1
 2014a34:	d0a73705 	stb	r2,-25380(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2014a38:	d0a73703 	ldbu	r2,-25380(gp)
 2014a3c:	10803fcc 	andi	r2,r2,255
 2014a40:	10000e1e 	bne	r2,zero,2014a7c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2014a44:	d0a74503 	ldbu	r2,-25324(gp)
 2014a48:	10803fcc 	andi	r2,r2,255
 2014a4c:	1000061e 	bne	r2,zero,2014a68 <OSSchedUnlock+0x8c>
 2014a50:	e0bffa17 	ldw	r2,-24(fp)
 2014a54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014a58:	e0bffb17 	ldw	r2,-20(fp)
 2014a5c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2014a60:	20158840 	call	2015884 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2014a64:	00000e06 	br	2014aa0 <OSSchedUnlock+0xc4>
 2014a68:	e0bffa17 	ldw	r2,-24(fp)
 2014a6c:	e0bffc15 	stw	r2,-16(fp)
 2014a70:	e0bffc17 	ldw	r2,-16(fp)
 2014a74:	1001703a 	wrctl	status,r2
 2014a78:	00000906 	br	2014aa0 <OSSchedUnlock+0xc4>
 2014a7c:	e0bffa17 	ldw	r2,-24(fp)
 2014a80:	e0bffd15 	stw	r2,-12(fp)
 2014a84:	e0bffd17 	ldw	r2,-12(fp)
 2014a88:	1001703a 	wrctl	status,r2
 2014a8c:	00000406 	br	2014aa0 <OSSchedUnlock+0xc4>
 2014a90:	e0bffa17 	ldw	r2,-24(fp)
 2014a94:	e0bffe15 	stw	r2,-8(fp)
 2014a98:	e0bffe17 	ldw	r2,-8(fp)
 2014a9c:	1001703a 	wrctl	status,r2
 2014aa0:	0001883a 	nop
 2014aa4:	e037883a 	mov	sp,fp
 2014aa8:	dfc00117 	ldw	ra,4(sp)
 2014aac:	df000017 	ldw	fp,0(sp)
 2014ab0:	dec00204 	addi	sp,sp,8
 2014ab4:	f800283a 	ret

02014ab8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2014ab8:	defffe04 	addi	sp,sp,-8
 2014abc:	dfc00115 	stw	ra,4(sp)
 2014ac0:	df000015 	stw	fp,0(sp)
 2014ac4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2014ac8:	d0a73743 	ldbu	r2,-25379(gp)
 2014acc:	10803fcc 	andi	r2,r2,255
 2014ad0:	10000f1e 	bne	r2,zero,2014b10 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2014ad4:	20159540 	call	2015954 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2014ad8:	d0a73903 	ldbu	r2,-25372(gp)
 2014adc:	d0a73945 	stb	r2,-25371(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2014ae0:	d0a73903 	ldbu	r2,-25372(gp)
 2014ae4:	10c03fcc 	andi	r3,r2,255
 2014ae8:	008080f4 	movhi	r2,515
 2014aec:	10b62a04 	addi	r2,r2,-10072
 2014af0:	18c7883a 	add	r3,r3,r3
 2014af4:	18c7883a 	add	r3,r3,r3
 2014af8:	10c5883a 	add	r2,r2,r3
 2014afc:	10800017 	ldw	r2,0(r2)
 2014b00:	d0a74115 	stw	r2,-25340(gp)
        OSTCBCur      = OSTCBHighRdy;
 2014b04:	d0a74117 	ldw	r2,-25340(gp)
 2014b08:	d0a74615 	stw	r2,-25320(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2014b0c:	201dc8c0 	call	201dc8c <OSStartHighRdy>
    }
}
 2014b10:	0001883a 	nop
 2014b14:	e037883a 	mov	sp,fp
 2014b18:	dfc00117 	ldw	ra,4(sp)
 2014b1c:	df000017 	ldw	fp,0(sp)
 2014b20:	dec00204 	addi	sp,sp,8
 2014b24:	f800283a 	ret

02014b28 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2014b28:	defff904 	addi	sp,sp,-28
 2014b2c:	dfc00615 	stw	ra,24(sp)
 2014b30:	df000515 	stw	fp,20(sp)
 2014b34:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014b38:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2014b3c:	01000084 	movi	r4,2
 2014b40:	201bce80 	call	201bce8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014b44:	0005303a 	rdctl	r2,status
 2014b48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014b4c:	e0fffc17 	ldw	r3,-16(fp)
 2014b50:	00bfff84 	movi	r2,-2
 2014b54:	1884703a 	and	r2,r3,r2
 2014b58:	1001703a 	wrctl	status,r2
  
  return context;
 2014b5c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2014b60:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2014b64:	d0273815 	stw	zero,-25376(gp)
 2014b68:	e0bffb17 	ldw	r2,-20(fp)
 2014b6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b70:	e0bffd17 	ldw	r2,-12(fp)
 2014b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2014b78:	01001904 	movi	r4,100
 2014b7c:	201bce80 	call	201bce8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014b80:	0005303a 	rdctl	r2,status
 2014b84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014b88:	e0fffe17 	ldw	r3,-8(fp)
 2014b8c:	00bfff84 	movi	r2,-2
 2014b90:	1884703a 	and	r2,r3,r2
 2014b94:	1001703a 	wrctl	status,r2
  
  return context;
 2014b98:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2014b9c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2014ba0:	d0a73817 	ldw	r2,-25376(gp)
 2014ba4:	d0a73d15 	stw	r2,-25356(gp)
    OSStatRdy    = OS_TRUE;
 2014ba8:	00800044 	movi	r2,1
 2014bac:	d0a74905 	stb	r2,-25308(gp)
 2014bb0:	e0bffb17 	ldw	r2,-20(fp)
 2014bb4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014bb8:	e0bfff17 	ldw	r2,-4(fp)
 2014bbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2014bc0:	0001883a 	nop
 2014bc4:	e037883a 	mov	sp,fp
 2014bc8:	dfc00117 	ldw	ra,4(sp)
 2014bcc:	df000017 	ldw	fp,0(sp)
 2014bd0:	dec00204 	addi	sp,sp,8
 2014bd4:	f800283a 	ret

02014bd8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2014bd8:	defff704 	addi	sp,sp,-36
 2014bdc:	dfc00815 	stw	ra,32(sp)
 2014be0:	df000715 	stw	fp,28(sp)
 2014be4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2014be8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2014bec:	201deb40 	call	201deb4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014bf0:	0005303a 	rdctl	r2,status
 2014bf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014bf8:	e0fffd17 	ldw	r3,-12(fp)
 2014bfc:	00bfff84 	movi	r2,-2
 2014c00:	1884703a 	and	r2,r3,r2
 2014c04:	1001703a 	wrctl	status,r2
  
  return context;
 2014c08:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2014c0c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2014c10:	d0a74717 	ldw	r2,-25316(gp)
 2014c14:	10800044 	addi	r2,r2,1
 2014c18:	d0a74715 	stw	r2,-25316(gp)
 2014c1c:	e0bffb17 	ldw	r2,-20(fp)
 2014c20:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c24:	e0bfff17 	ldw	r2,-4(fp)
 2014c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2014c2c:	d0a73743 	ldbu	r2,-25379(gp)
 2014c30:	10803fcc 	andi	r2,r2,255
 2014c34:	10800058 	cmpnei	r2,r2,1
 2014c38:	10006a1e 	bne	r2,zero,2014de4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2014c3c:	d0a73b03 	ldbu	r2,-25364(gp)
 2014c40:	10803fcc 	andi	r2,r2,255
 2014c44:	10c00060 	cmpeqi	r3,r2,1
 2014c48:	1800061e 	bne	r3,zero,2014c64 <OSTimeTick+0x8c>
 2014c4c:	10c000a0 	cmpeqi	r3,r2,2
 2014c50:	1800061e 	bne	r3,zero,2014c6c <OSTimeTick+0x94>
 2014c54:	10000a1e 	bne	r2,zero,2014c80 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2014c58:	00800044 	movi	r2,1
 2014c5c:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2014c60:	00000b06 	br	2014c90 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2014c64:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2014c68:	00000906 	br	2014c90 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2014c6c:	00800044 	movi	r2,1
 2014c70:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2014c74:	00800044 	movi	r2,1
 2014c78:	d0a73b05 	stb	r2,-25364(gp)
                 break;
 2014c7c:	00000406 	br	2014c90 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2014c80:	00800044 	movi	r2,1
 2014c84:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2014c88:	d0273b05 	stb	zero,-25364(gp)
                 break;
 2014c8c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2014c90:	e0bffa03 	ldbu	r2,-24(fp)
 2014c94:	10005226 	beq	r2,zero,2014de0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2014c98:	d0a73a17 	ldw	r2,-25368(gp)
 2014c9c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014ca0:	00004906 	br	2014dc8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ca4:	0005303a 	rdctl	r2,status
 2014ca8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014cac:	e0fffc17 	ldw	r3,-16(fp)
 2014cb0:	00bfff84 	movi	r2,-2
 2014cb4:	1884703a 	and	r2,r3,r2
 2014cb8:	1001703a 	wrctl	status,r2
  
  return context;
 2014cbc:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2014cc0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2014cc4:	e0bff917 	ldw	r2,-28(fp)
 2014cc8:	10800b8b 	ldhu	r2,46(r2)
 2014ccc:	10bfffcc 	andi	r2,r2,65535
 2014cd0:	10003626 	beq	r2,zero,2014dac <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2014cd4:	e0bff917 	ldw	r2,-28(fp)
 2014cd8:	10800b8b 	ldhu	r2,46(r2)
 2014cdc:	10bfffc4 	addi	r2,r2,-1
 2014ce0:	1007883a 	mov	r3,r2
 2014ce4:	e0bff917 	ldw	r2,-28(fp)
 2014ce8:	10c00b8d 	sth	r3,46(r2)
 2014cec:	e0bff917 	ldw	r2,-28(fp)
 2014cf0:	10800b8b 	ldhu	r2,46(r2)
 2014cf4:	10bfffcc 	andi	r2,r2,65535
 2014cf8:	10002c1e 	bne	r2,zero,2014dac <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2014cfc:	e0bff917 	ldw	r2,-28(fp)
 2014d00:	10800c03 	ldbu	r2,48(r2)
 2014d04:	10803fcc 	andi	r2,r2,255
 2014d08:	10800dcc 	andi	r2,r2,55
 2014d0c:	10000b26 	beq	r2,zero,2014d3c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2014d10:	e0bff917 	ldw	r2,-28(fp)
 2014d14:	10c00c03 	ldbu	r3,48(r2)
 2014d18:	00bff204 	movi	r2,-56
 2014d1c:	1884703a 	and	r2,r3,r2
 2014d20:	1007883a 	mov	r3,r2
 2014d24:	e0bff917 	ldw	r2,-28(fp)
 2014d28:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2014d2c:	e0bff917 	ldw	r2,-28(fp)
 2014d30:	00c00044 	movi	r3,1
 2014d34:	10c00c45 	stb	r3,49(r2)
 2014d38:	00000206 	br	2014d44 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2014d3c:	e0bff917 	ldw	r2,-28(fp)
 2014d40:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2014d44:	e0bff917 	ldw	r2,-28(fp)
 2014d48:	10800c03 	ldbu	r2,48(r2)
 2014d4c:	10803fcc 	andi	r2,r2,255
 2014d50:	1080020c 	andi	r2,r2,8
 2014d54:	1000151e 	bne	r2,zero,2014dac <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2014d58:	e0bff917 	ldw	r2,-28(fp)
 2014d5c:	10c00d83 	ldbu	r3,54(r2)
 2014d60:	d0a74303 	ldbu	r2,-25332(gp)
 2014d64:	1884b03a 	or	r2,r3,r2
 2014d68:	d0a74305 	stb	r2,-25332(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2014d6c:	e0bff917 	ldw	r2,-28(fp)
 2014d70:	10800d03 	ldbu	r2,52(r2)
 2014d74:	10c03fcc 	andi	r3,r2,255
 2014d78:	e0bff917 	ldw	r2,-28(fp)
 2014d7c:	10800d03 	ldbu	r2,52(r2)
 2014d80:	11003fcc 	andi	r4,r2,255
 2014d84:	d0a74344 	addi	r2,gp,-25331
 2014d88:	2085883a 	add	r2,r4,r2
 2014d8c:	11000003 	ldbu	r4,0(r2)
 2014d90:	e0bff917 	ldw	r2,-28(fp)
 2014d94:	10800d43 	ldbu	r2,53(r2)
 2014d98:	2084b03a 	or	r2,r4,r2
 2014d9c:	1009883a 	mov	r4,r2
 2014da0:	d0a74344 	addi	r2,gp,-25331
 2014da4:	1885883a 	add	r2,r3,r2
 2014da8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2014dac:	e0bff917 	ldw	r2,-28(fp)
 2014db0:	10800517 	ldw	r2,20(r2)
 2014db4:	e0bff915 	stw	r2,-28(fp)
 2014db8:	e0bffb17 	ldw	r2,-20(fp)
 2014dbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014dc0:	e0bffe17 	ldw	r2,-8(fp)
 2014dc4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014dc8:	e0bff917 	ldw	r2,-28(fp)
 2014dcc:	10800c83 	ldbu	r2,50(r2)
 2014dd0:	10803fcc 	andi	r2,r2,255
 2014dd4:	10800518 	cmpnei	r2,r2,20
 2014dd8:	103fb21e 	bne	r2,zero,2014ca4 <OSTimeTick+0xcc>
 2014ddc:	00000106 	br	2014de4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2014de0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2014de4:	e037883a 	mov	sp,fp
 2014de8:	dfc00117 	ldw	ra,4(sp)
 2014dec:	df000017 	ldw	fp,0(sp)
 2014df0:	dec00204 	addi	sp,sp,8
 2014df4:	f800283a 	ret

02014df8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2014df8:	deffff04 	addi	sp,sp,-4
 2014dfc:	df000015 	stw	fp,0(sp)
 2014e00:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2014e04:	00804784 	movi	r2,286
}
 2014e08:	e037883a 	mov	sp,fp
 2014e0c:	df000017 	ldw	fp,0(sp)
 2014e10:	dec00104 	addi	sp,sp,4
 2014e14:	f800283a 	ret

02014e18 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2014e18:	deffff04 	addi	sp,sp,-4
 2014e1c:	df000015 	stw	fp,0(sp)
 2014e20:	d839883a 	mov	fp,sp
}
 2014e24:	0001883a 	nop
 2014e28:	e037883a 	mov	sp,fp
 2014e2c:	df000017 	ldw	fp,0(sp)
 2014e30:	dec00104 	addi	sp,sp,4
 2014e34:	f800283a 	ret

02014e38 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2014e38:	defff804 	addi	sp,sp,-32
 2014e3c:	dfc00715 	stw	ra,28(sp)
 2014e40:	df000615 	stw	fp,24(sp)
 2014e44:	df000604 	addi	fp,sp,24
 2014e48:	e13ffc15 	stw	r4,-16(fp)
 2014e4c:	e17ffd15 	stw	r5,-12(fp)
 2014e50:	3007883a 	mov	r3,r6
 2014e54:	3805883a 	mov	r2,r7
 2014e58:	e0fffe05 	stb	r3,-8(fp)
 2014e5c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2014e60:	e0bffc17 	ldw	r2,-16(fp)
 2014e64:	10800283 	ldbu	r2,10(r2)
 2014e68:	10c03fcc 	andi	r3,r2,255
 2014e6c:	008080b4 	movhi	r2,514
 2014e70:	10bb5504 	addi	r2,r2,-4780
 2014e74:	10c5883a 	add	r2,r2,r3
 2014e78:	10800003 	ldbu	r2,0(r2)
 2014e7c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2014e80:	e0bffa03 	ldbu	r2,-24(fp)
 2014e84:	e0fffc17 	ldw	r3,-16(fp)
 2014e88:	1885883a 	add	r2,r3,r2
 2014e8c:	108002c4 	addi	r2,r2,11
 2014e90:	10800003 	ldbu	r2,0(r2)
 2014e94:	10c03fcc 	andi	r3,r2,255
 2014e98:	008080b4 	movhi	r2,514
 2014e9c:	10bb5504 	addi	r2,r2,-4780
 2014ea0:	10c5883a 	add	r2,r2,r3
 2014ea4:	10800003 	ldbu	r2,0(r2)
 2014ea8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2014eac:	e0bffa03 	ldbu	r2,-24(fp)
 2014eb0:	100490fa 	slli	r2,r2,3
 2014eb4:	1007883a 	mov	r3,r2
 2014eb8:	e0bffa43 	ldbu	r2,-23(fp)
 2014ebc:	1885883a 	add	r2,r3,r2
 2014ec0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2014ec4:	e0fffa83 	ldbu	r3,-22(fp)
 2014ec8:	008080f4 	movhi	r2,515
 2014ecc:	10b62a04 	addi	r2,r2,-10072
 2014ed0:	18c7883a 	add	r3,r3,r3
 2014ed4:	18c7883a 	add	r3,r3,r3
 2014ed8:	10c5883a 	add	r2,r2,r3
 2014edc:	10800017 	ldw	r2,0(r2)
 2014ee0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2014ee4:	e0bffb17 	ldw	r2,-20(fp)
 2014ee8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2014eec:	e0bffb17 	ldw	r2,-20(fp)
 2014ef0:	e0fffd17 	ldw	r3,-12(fp)
 2014ef4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2014ef8:	e0bffb17 	ldw	r2,-20(fp)
 2014efc:	10800c03 	ldbu	r2,48(r2)
 2014f00:	1007883a 	mov	r3,r2
 2014f04:	e0bffe03 	ldbu	r2,-8(fp)
 2014f08:	0084303a 	nor	r2,zero,r2
 2014f0c:	1884703a 	and	r2,r3,r2
 2014f10:	1007883a 	mov	r3,r2
 2014f14:	e0bffb17 	ldw	r2,-20(fp)
 2014f18:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2014f1c:	e0bffb17 	ldw	r2,-20(fp)
 2014f20:	e0ffff03 	ldbu	r3,-4(fp)
 2014f24:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2014f28:	e0bffb17 	ldw	r2,-20(fp)
 2014f2c:	10800c03 	ldbu	r2,48(r2)
 2014f30:	10803fcc 	andi	r2,r2,255
 2014f34:	1080020c 	andi	r2,r2,8
 2014f38:	1000111e 	bne	r2,zero,2014f80 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2014f3c:	e0bffb17 	ldw	r2,-20(fp)
 2014f40:	10c00d83 	ldbu	r3,54(r2)
 2014f44:	d0a74303 	ldbu	r2,-25332(gp)
 2014f48:	1884b03a 	or	r2,r3,r2
 2014f4c:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2014f50:	e0fffa03 	ldbu	r3,-24(fp)
 2014f54:	e13ffa03 	ldbu	r4,-24(fp)
 2014f58:	d0a74344 	addi	r2,gp,-25331
 2014f5c:	2085883a 	add	r2,r4,r2
 2014f60:	11000003 	ldbu	r4,0(r2)
 2014f64:	e0bffb17 	ldw	r2,-20(fp)
 2014f68:	10800d43 	ldbu	r2,53(r2)
 2014f6c:	2084b03a 	or	r2,r4,r2
 2014f70:	1009883a 	mov	r4,r2
 2014f74:	d0a74344 	addi	r2,gp,-25331
 2014f78:	1885883a 	add	r2,r3,r2
 2014f7c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2014f80:	e17ffc17 	ldw	r5,-16(fp)
 2014f84:	e13ffb17 	ldw	r4,-20(fp)
 2014f88:	20152300 	call	2015230 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2014f8c:	e0bffb17 	ldw	r2,-20(fp)
 2014f90:	10800817 	ldw	r2,32(r2)
 2014f94:	10000826 	beq	r2,zero,2014fb8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2014f98:	e0bffb17 	ldw	r2,-20(fp)
 2014f9c:	10800817 	ldw	r2,32(r2)
 2014fa0:	100b883a 	mov	r5,r2
 2014fa4:	e13ffb17 	ldw	r4,-20(fp)
 2014fa8:	20152e80 	call	20152e8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2014fac:	e0bffb17 	ldw	r2,-20(fp)
 2014fb0:	e0fffc17 	ldw	r3,-16(fp)
 2014fb4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2014fb8:	e0bffa83 	ldbu	r2,-22(fp)
}
 2014fbc:	e037883a 	mov	sp,fp
 2014fc0:	dfc00117 	ldw	ra,4(sp)
 2014fc4:	df000017 	ldw	fp,0(sp)
 2014fc8:	dec00204 	addi	sp,sp,8
 2014fcc:	f800283a 	ret

02014fd0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2014fd0:	defffd04 	addi	sp,sp,-12
 2014fd4:	df000215 	stw	fp,8(sp)
 2014fd8:	df000204 	addi	fp,sp,8
 2014fdc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2014fe0:	d0a74617 	ldw	r2,-25320(gp)
 2014fe4:	e0ffff17 	ldw	r3,-4(fp)
 2014fe8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2014fec:	d0a74617 	ldw	r2,-25320(gp)
 2014ff0:	10800d03 	ldbu	r2,52(r2)
 2014ff4:	10803fcc 	andi	r2,r2,255
 2014ff8:	d0e74617 	ldw	r3,-25320(gp)
 2014ffc:	18c00d03 	ldbu	r3,52(r3)
 2015000:	18c03fcc 	andi	r3,r3,255
 2015004:	e13fff17 	ldw	r4,-4(fp)
 2015008:	20c7883a 	add	r3,r4,r3
 201500c:	18c002c4 	addi	r3,r3,11
 2015010:	19000003 	ldbu	r4,0(r3)
 2015014:	d0e74617 	ldw	r3,-25320(gp)
 2015018:	18c00d43 	ldbu	r3,53(r3)
 201501c:	20c6b03a 	or	r3,r4,r3
 2015020:	1809883a 	mov	r4,r3
 2015024:	e0ffff17 	ldw	r3,-4(fp)
 2015028:	1885883a 	add	r2,r3,r2
 201502c:	108002c4 	addi	r2,r2,11
 2015030:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2015034:	e0bfff17 	ldw	r2,-4(fp)
 2015038:	10c00283 	ldbu	r3,10(r2)
 201503c:	d0a74617 	ldw	r2,-25320(gp)
 2015040:	10800d83 	ldbu	r2,54(r2)
 2015044:	1884b03a 	or	r2,r3,r2
 2015048:	1007883a 	mov	r3,r2
 201504c:	e0bfff17 	ldw	r2,-4(fp)
 2015050:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2015054:	d0a74617 	ldw	r2,-25320(gp)
 2015058:	10800d03 	ldbu	r2,52(r2)
 201505c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2015060:	e0fffe03 	ldbu	r3,-8(fp)
 2015064:	e13ffe03 	ldbu	r4,-8(fp)
 2015068:	d0a74344 	addi	r2,gp,-25331
 201506c:	2085883a 	add	r2,r4,r2
 2015070:	10800003 	ldbu	r2,0(r2)
 2015074:	1009883a 	mov	r4,r2
 2015078:	d0a74617 	ldw	r2,-25320(gp)
 201507c:	10800d43 	ldbu	r2,53(r2)
 2015080:	0084303a 	nor	r2,zero,r2
 2015084:	2084703a 	and	r2,r4,r2
 2015088:	1009883a 	mov	r4,r2
 201508c:	d0a74344 	addi	r2,gp,-25331
 2015090:	1885883a 	add	r2,r3,r2
 2015094:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2015098:	e0fffe03 	ldbu	r3,-8(fp)
 201509c:	d0a74344 	addi	r2,gp,-25331
 20150a0:	1885883a 	add	r2,r3,r2
 20150a4:	10800003 	ldbu	r2,0(r2)
 20150a8:	10803fcc 	andi	r2,r2,255
 20150ac:	1000071e 	bne	r2,zero,20150cc <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20150b0:	d0a74617 	ldw	r2,-25320(gp)
 20150b4:	10800d83 	ldbu	r2,54(r2)
 20150b8:	0084303a 	nor	r2,zero,r2
 20150bc:	1007883a 	mov	r3,r2
 20150c0:	d0a74303 	ldbu	r2,-25332(gp)
 20150c4:	1884703a 	and	r2,r3,r2
 20150c8:	d0a74305 	stb	r2,-25332(gp)
    }
}
 20150cc:	0001883a 	nop
 20150d0:	e037883a 	mov	sp,fp
 20150d4:	df000017 	ldw	fp,0(sp)
 20150d8:	dec00104 	addi	sp,sp,4
 20150dc:	f800283a 	ret

020150e0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 20150e0:	defffb04 	addi	sp,sp,-20
 20150e4:	df000415 	stw	fp,16(sp)
 20150e8:	df000404 	addi	fp,sp,16
 20150ec:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 20150f0:	d0a74617 	ldw	r2,-25320(gp)
 20150f4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 20150f8:	d0a74617 	ldw	r2,-25320(gp)
 20150fc:	e0ffff17 	ldw	r3,-4(fp)
 2015100:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2015104:	e0bfff17 	ldw	r2,-4(fp)
 2015108:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 201510c:	e0bffc17 	ldw	r2,-16(fp)
 2015110:	10800017 	ldw	r2,0(r2)
 2015114:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2015118:	00002006 	br	201519c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 201511c:	d0a74617 	ldw	r2,-25320(gp)
 2015120:	10800d03 	ldbu	r2,52(r2)
 2015124:	10803fcc 	andi	r2,r2,255
 2015128:	d0e74617 	ldw	r3,-25320(gp)
 201512c:	18c00d03 	ldbu	r3,52(r3)
 2015130:	18c03fcc 	andi	r3,r3,255
 2015134:	e13ffd17 	ldw	r4,-12(fp)
 2015138:	20c7883a 	add	r3,r4,r3
 201513c:	18c002c4 	addi	r3,r3,11
 2015140:	19000003 	ldbu	r4,0(r3)
 2015144:	d0e74617 	ldw	r3,-25320(gp)
 2015148:	18c00d43 	ldbu	r3,53(r3)
 201514c:	20c6b03a 	or	r3,r4,r3
 2015150:	1809883a 	mov	r4,r3
 2015154:	e0fffd17 	ldw	r3,-12(fp)
 2015158:	1885883a 	add	r2,r3,r2
 201515c:	108002c4 	addi	r2,r2,11
 2015160:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2015164:	e0bffd17 	ldw	r2,-12(fp)
 2015168:	10c00283 	ldbu	r3,10(r2)
 201516c:	d0a74617 	ldw	r2,-25320(gp)
 2015170:	10800d83 	ldbu	r2,54(r2)
 2015174:	1884b03a 	or	r2,r3,r2
 2015178:	1007883a 	mov	r3,r2
 201517c:	e0bffd17 	ldw	r2,-12(fp)
 2015180:	10c00285 	stb	r3,10(r2)
        pevents++;
 2015184:	e0bffc17 	ldw	r2,-16(fp)
 2015188:	10800104 	addi	r2,r2,4
 201518c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2015190:	e0bffc17 	ldw	r2,-16(fp)
 2015194:	10800017 	ldw	r2,0(r2)
 2015198:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 201519c:	e0bffd17 	ldw	r2,-12(fp)
 20151a0:	103fde1e 	bne	r2,zero,201511c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20151a4:	d0a74617 	ldw	r2,-25320(gp)
 20151a8:	10800d03 	ldbu	r2,52(r2)
 20151ac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20151b0:	e0fffe03 	ldbu	r3,-8(fp)
 20151b4:	e13ffe03 	ldbu	r4,-8(fp)
 20151b8:	d0a74344 	addi	r2,gp,-25331
 20151bc:	2085883a 	add	r2,r4,r2
 20151c0:	10800003 	ldbu	r2,0(r2)
 20151c4:	1009883a 	mov	r4,r2
 20151c8:	d0a74617 	ldw	r2,-25320(gp)
 20151cc:	10800d43 	ldbu	r2,53(r2)
 20151d0:	0084303a 	nor	r2,zero,r2
 20151d4:	2084703a 	and	r2,r4,r2
 20151d8:	1009883a 	mov	r4,r2
 20151dc:	d0a74344 	addi	r2,gp,-25331
 20151e0:	1885883a 	add	r2,r3,r2
 20151e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20151e8:	e0fffe03 	ldbu	r3,-8(fp)
 20151ec:	d0a74344 	addi	r2,gp,-25331
 20151f0:	1885883a 	add	r2,r3,r2
 20151f4:	10800003 	ldbu	r2,0(r2)
 20151f8:	10803fcc 	andi	r2,r2,255
 20151fc:	1000071e 	bne	r2,zero,201521c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2015200:	d0a74617 	ldw	r2,-25320(gp)
 2015204:	10800d83 	ldbu	r2,54(r2)
 2015208:	0084303a 	nor	r2,zero,r2
 201520c:	1007883a 	mov	r3,r2
 2015210:	d0a74303 	ldbu	r2,-25332(gp)
 2015214:	1884703a 	and	r2,r3,r2
 2015218:	d0a74305 	stb	r2,-25332(gp)
    }
}
 201521c:	0001883a 	nop
 2015220:	e037883a 	mov	sp,fp
 2015224:	df000017 	ldw	fp,0(sp)
 2015228:	dec00104 	addi	sp,sp,4
 201522c:	f800283a 	ret

02015230 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2015230:	defffc04 	addi	sp,sp,-16
 2015234:	df000315 	stw	fp,12(sp)
 2015238:	df000304 	addi	fp,sp,12
 201523c:	e13ffe15 	stw	r4,-8(fp)
 2015240:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2015244:	e0bffe17 	ldw	r2,-8(fp)
 2015248:	10800d03 	ldbu	r2,52(r2)
 201524c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2015250:	e0bffd03 	ldbu	r2,-12(fp)
 2015254:	e0fffd03 	ldbu	r3,-12(fp)
 2015258:	e13fff17 	ldw	r4,-4(fp)
 201525c:	20c7883a 	add	r3,r4,r3
 2015260:	18c002c4 	addi	r3,r3,11
 2015264:	18c00003 	ldbu	r3,0(r3)
 2015268:	1809883a 	mov	r4,r3
 201526c:	e0fffe17 	ldw	r3,-8(fp)
 2015270:	18c00d43 	ldbu	r3,53(r3)
 2015274:	00c6303a 	nor	r3,zero,r3
 2015278:	20c6703a 	and	r3,r4,r3
 201527c:	1809883a 	mov	r4,r3
 2015280:	e0ffff17 	ldw	r3,-4(fp)
 2015284:	1885883a 	add	r2,r3,r2
 2015288:	108002c4 	addi	r2,r2,11
 201528c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2015290:	e0bffd03 	ldbu	r2,-12(fp)
 2015294:	e0ffff17 	ldw	r3,-4(fp)
 2015298:	1885883a 	add	r2,r3,r2
 201529c:	108002c4 	addi	r2,r2,11
 20152a0:	10800003 	ldbu	r2,0(r2)
 20152a4:	10803fcc 	andi	r2,r2,255
 20152a8:	10000a1e 	bne	r2,zero,20152d4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20152ac:	e0bfff17 	ldw	r2,-4(fp)
 20152b0:	10800283 	ldbu	r2,10(r2)
 20152b4:	1007883a 	mov	r3,r2
 20152b8:	e0bffe17 	ldw	r2,-8(fp)
 20152bc:	10800d83 	ldbu	r2,54(r2)
 20152c0:	0084303a 	nor	r2,zero,r2
 20152c4:	1884703a 	and	r2,r3,r2
 20152c8:	1007883a 	mov	r3,r2
 20152cc:	e0bfff17 	ldw	r2,-4(fp)
 20152d0:	10c00285 	stb	r3,10(r2)
    }
}
 20152d4:	0001883a 	nop
 20152d8:	e037883a 	mov	sp,fp
 20152dc:	df000017 	ldw	fp,0(sp)
 20152e0:	dec00104 	addi	sp,sp,4
 20152e4:	f800283a 	ret

020152e8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20152e8:	defffa04 	addi	sp,sp,-24
 20152ec:	df000515 	stw	fp,20(sp)
 20152f0:	df000504 	addi	fp,sp,20
 20152f4:	e13ffe15 	stw	r4,-8(fp)
 20152f8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 20152fc:	e0bffe17 	ldw	r2,-8(fp)
 2015300:	10800d03 	ldbu	r2,52(r2)
 2015304:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2015308:	e0bffe17 	ldw	r2,-8(fp)
 201530c:	10800d83 	ldbu	r2,54(r2)
 2015310:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2015314:	e0bffe17 	ldw	r2,-8(fp)
 2015318:	10800d43 	ldbu	r2,53(r2)
 201531c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2015320:	e0bfff17 	ldw	r2,-4(fp)
 2015324:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2015328:	e0bffb17 	ldw	r2,-20(fp)
 201532c:	10800017 	ldw	r2,0(r2)
 2015330:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2015334:	00002506 	br	20153cc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2015338:	e0bffd03 	ldbu	r2,-12(fp)
 201533c:	e0fffd03 	ldbu	r3,-12(fp)
 2015340:	e13ffc17 	ldw	r4,-16(fp)
 2015344:	20c7883a 	add	r3,r4,r3
 2015348:	18c002c4 	addi	r3,r3,11
 201534c:	18c00003 	ldbu	r3,0(r3)
 2015350:	1809883a 	mov	r4,r3
 2015354:	e0fffd83 	ldbu	r3,-10(fp)
 2015358:	00c6303a 	nor	r3,zero,r3
 201535c:	20c6703a 	and	r3,r4,r3
 2015360:	1809883a 	mov	r4,r3
 2015364:	e0fffc17 	ldw	r3,-16(fp)
 2015368:	1885883a 	add	r2,r3,r2
 201536c:	108002c4 	addi	r2,r2,11
 2015370:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2015374:	e0bffd03 	ldbu	r2,-12(fp)
 2015378:	e0fffc17 	ldw	r3,-16(fp)
 201537c:	1885883a 	add	r2,r3,r2
 2015380:	108002c4 	addi	r2,r2,11
 2015384:	10800003 	ldbu	r2,0(r2)
 2015388:	10803fcc 	andi	r2,r2,255
 201538c:	1000091e 	bne	r2,zero,20153b4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2015390:	e0bffc17 	ldw	r2,-16(fp)
 2015394:	10800283 	ldbu	r2,10(r2)
 2015398:	1007883a 	mov	r3,r2
 201539c:	e0bffd43 	ldbu	r2,-11(fp)
 20153a0:	0084303a 	nor	r2,zero,r2
 20153a4:	1884703a 	and	r2,r3,r2
 20153a8:	1007883a 	mov	r3,r2
 20153ac:	e0bffc17 	ldw	r2,-16(fp)
 20153b0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20153b4:	e0bffb17 	ldw	r2,-20(fp)
 20153b8:	10800104 	addi	r2,r2,4
 20153bc:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20153c0:	e0bffb17 	ldw	r2,-20(fp)
 20153c4:	10800017 	ldw	r2,0(r2)
 20153c8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20153cc:	e0bffc17 	ldw	r2,-16(fp)
 20153d0:	103fd91e 	bne	r2,zero,2015338 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20153d4:	0001883a 	nop
 20153d8:	e037883a 	mov	sp,fp
 20153dc:	df000017 	ldw	fp,0(sp)
 20153e0:	dec00104 	addi	sp,sp,4
 20153e4:	f800283a 	ret

020153e8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20153e8:	defffc04 	addi	sp,sp,-16
 20153ec:	df000315 	stw	fp,12(sp)
 20153f0:	df000304 	addi	fp,sp,12
 20153f4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 20153f8:	e0bfff17 	ldw	r2,-4(fp)
 20153fc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2015400:	e0bfff17 	ldw	r2,-4(fp)
 2015404:	108002c4 	addi	r2,r2,11
 2015408:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201540c:	e03ffe05 	stb	zero,-8(fp)
 2015410:	00000706 	br	2015430 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2015414:	e0bffd17 	ldw	r2,-12(fp)
 2015418:	10c00044 	addi	r3,r2,1
 201541c:	e0fffd15 	stw	r3,-12(fp)
 2015420:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015424:	e0bffe03 	ldbu	r2,-8(fp)
 2015428:	10800044 	addi	r2,r2,1
 201542c:	e0bffe05 	stb	r2,-8(fp)
 2015430:	e0bffe03 	ldbu	r2,-8(fp)
 2015434:	108000f0 	cmpltui	r2,r2,3
 2015438:	103ff61e 	bne	r2,zero,2015414 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 201543c:	0001883a 	nop
 2015440:	e037883a 	mov	sp,fp
 2015444:	df000017 	ldw	fp,0(sp)
 2015448:	dec00104 	addi	sp,sp,4
 201544c:	f800283a 	ret

02015450 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2015450:	defffb04 	addi	sp,sp,-20
 2015454:	dfc00415 	stw	ra,16(sp)
 2015458:	df000315 	stw	fp,12(sp)
 201545c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2015460:	0142d004 	movi	r5,2880
 2015464:	010080f4 	movhi	r4,515
 2015468:	21321604 	addi	r4,r4,-14248
 201546c:	20157c80 	call	20157c8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2015470:	008080f4 	movhi	r2,515
 2015474:	10b21604 	addi	r2,r2,-14248
 2015478:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 201547c:	008080f4 	movhi	r2,515
 2015480:	10b22204 	addi	r2,r2,-14200
 2015484:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2015488:	e03ffd0d 	sth	zero,-12(fp)
 201548c:	00001306 	br	20154dc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015490:	e0bffe17 	ldw	r2,-8(fp)
 2015494:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2015498:	e0bffe17 	ldw	r2,-8(fp)
 201549c:	e0ffff17 	ldw	r3,-4(fp)
 20154a0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20154a4:	e0bffe17 	ldw	r2,-8(fp)
 20154a8:	00c00fc4 	movi	r3,63
 20154ac:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20154b0:	e0bffe17 	ldw	r2,-8(fp)
 20154b4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20154b8:	e0bffe17 	ldw	r2,-8(fp)
 20154bc:	10800c04 	addi	r2,r2,48
 20154c0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20154c4:	e0bfff17 	ldw	r2,-4(fp)
 20154c8:	10800c04 	addi	r2,r2,48
 20154cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20154d0:	e0bffd0b 	ldhu	r2,-12(fp)
 20154d4:	10800044 	addi	r2,r2,1
 20154d8:	e0bffd0d 	sth	r2,-12(fp)
 20154dc:	e0bffd0b 	ldhu	r2,-12(fp)
 20154e0:	10800ef0 	cmpltui	r2,r2,59
 20154e4:	103fea1e 	bne	r2,zero,2015490 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20154e8:	e0bffe17 	ldw	r2,-8(fp)
 20154ec:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20154f0:	e0bffe17 	ldw	r2,-8(fp)
 20154f4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 20154f8:	e0bffe17 	ldw	r2,-8(fp)
 20154fc:	00c00fc4 	movi	r3,63
 2015500:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2015504:	e0bffe17 	ldw	r2,-8(fp)
 2015508:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 201550c:	008080f4 	movhi	r2,515
 2015510:	10b21604 	addi	r2,r2,-14248
 2015514:	d0a74415 	stw	r2,-25328(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2015518:	0001883a 	nop
 201551c:	e037883a 	mov	sp,fp
 2015520:	dfc00117 	ldw	ra,4(sp)
 2015524:	df000017 	ldw	fp,0(sp)
 2015528:	dec00204 	addi	sp,sp,8
 201552c:	f800283a 	ret

02015530 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2015530:	deffff04 	addi	sp,sp,-4
 2015534:	df000015 	stw	fp,0(sp)
 2015538:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 201553c:	d0274715 	stw	zero,-25316(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2015540:	d0274505 	stb	zero,-25324(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2015544:	d0273705 	stb	zero,-25380(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2015548:	d0273f45 	stb	zero,-25347(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 201554c:	d0273745 	stb	zero,-25379(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2015550:	d0273c15 	stw	zero,-25360(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2015554:	d0273815 	stw	zero,-25376(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2015558:	d0274a15 	stw	zero,-25304(gp)
    OSIdleCtrMax  = 0L;
 201555c:	d0273d15 	stw	zero,-25356(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2015560:	d0274905 	stb	zero,-25308(gp)
#endif
}
 2015564:	0001883a 	nop
 2015568:	e037883a 	mov	sp,fp
 201556c:	df000017 	ldw	fp,0(sp)
 2015570:	dec00104 	addi	sp,sp,4
 2015574:	f800283a 	ret

02015578 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2015578:	defffd04 	addi	sp,sp,-12
 201557c:	df000215 	stw	fp,8(sp)
 2015580:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2015584:	d0274305 	stb	zero,-25332(gp)
    prdytbl       = &OSRdyTbl[0];
 2015588:	d0a74344 	addi	r2,gp,-25331
 201558c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2015590:	e03ffe05 	stb	zero,-8(fp)
 2015594:	00000706 	br	20155b4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2015598:	e0bfff17 	ldw	r2,-4(fp)
 201559c:	10c00044 	addi	r3,r2,1
 20155a0:	e0ffff15 	stw	r3,-4(fp)
 20155a4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20155a8:	e0bffe03 	ldbu	r2,-8(fp)
 20155ac:	10800044 	addi	r2,r2,1
 20155b0:	e0bffe05 	stb	r2,-8(fp)
 20155b4:	e0bffe03 	ldbu	r2,-8(fp)
 20155b8:	108000f0 	cmpltui	r2,r2,3
 20155bc:	103ff61e 	bne	r2,zero,2015598 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20155c0:	d0273945 	stb	zero,-25371(gp)
    OSPrioHighRdy = 0;
 20155c4:	d0273905 	stb	zero,-25372(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20155c8:	d0274115 	stw	zero,-25340(gp)
    OSTCBCur      = (OS_TCB *)0;
 20155cc:	d0274615 	stw	zero,-25320(gp)
}
 20155d0:	0001883a 	nop
 20155d4:	e037883a 	mov	sp,fp
 20155d8:	df000017 	ldw	fp,0(sp)
 20155dc:	dec00104 	addi	sp,sp,4
 20155e0:	f800283a 	ret

020155e4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20155e4:	defff804 	addi	sp,sp,-32
 20155e8:	dfc00715 	stw	ra,28(sp)
 20155ec:	df000615 	stw	fp,24(sp)
 20155f0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 20155f4:	008000c4 	movi	r2,3
 20155f8:	d8800415 	stw	r2,16(sp)
 20155fc:	d8000315 	stw	zero,12(sp)
 2015600:	00808004 	movi	r2,512
 2015604:	d8800215 	stw	r2,8(sp)
 2015608:	008080f4 	movhi	r2,515
 201560c:	10b01604 	addi	r2,r2,-16296
 2015610:	d8800115 	stw	r2,4(sp)
 2015614:	00bfffd4 	movui	r2,65535
 2015618:	d8800015 	stw	r2,0(sp)
 201561c:	01c00504 	movi	r7,20
 2015620:	018080f4 	movhi	r6,515
 2015624:	31b21504 	addi	r6,r6,-14252
 2015628:	000b883a 	mov	r5,zero
 201562c:	01008074 	movhi	r4,513
 2015630:	2116a404 	addi	r4,r4,23184
 2015634:	201ac180 	call	201ac18 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2015638:	e1bfff04 	addi	r6,fp,-4
 201563c:	014080b4 	movhi	r5,514
 2015640:	297b9504 	addi	r5,r5,-4524
 2015644:	01000504 	movi	r4,20
 2015648:	201b4280 	call	201b428 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 201564c:	0001883a 	nop
 2015650:	e037883a 	mov	sp,fp
 2015654:	dfc00117 	ldw	ra,4(sp)
 2015658:	df000017 	ldw	fp,0(sp)
 201565c:	dec00204 	addi	sp,sp,8
 2015660:	f800283a 	ret

02015664 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2015664:	defff804 	addi	sp,sp,-32
 2015668:	dfc00715 	stw	ra,28(sp)
 201566c:	df000615 	stw	fp,24(sp)
 2015670:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2015674:	008000c4 	movi	r2,3
 2015678:	d8800415 	stw	r2,16(sp)
 201567c:	d8000315 	stw	zero,12(sp)
 2015680:	00808004 	movi	r2,512
 2015684:	d8800215 	stw	r2,8(sp)
 2015688:	008080f4 	movhi	r2,515
 201568c:	10ad9e04 	addi	r2,r2,-18824
 2015690:	d8800115 	stw	r2,4(sp)
 2015694:	00bfff94 	movui	r2,65534
 2015698:	d8800015 	stw	r2,0(sp)
 201569c:	01c004c4 	movi	r7,19
 20156a0:	018080f4 	movhi	r6,515
 20156a4:	31af9d04 	addi	r6,r6,-16780
 20156a8:	000b883a 	mov	r5,zero
 20156ac:	01008074 	movhi	r4,513
 20156b0:	2116bb04 	addi	r4,r4,23276
 20156b4:	201ac180 	call	201ac18 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20156b8:	e1bfff04 	addi	r6,fp,-4
 20156bc:	014080b4 	movhi	r5,514
 20156c0:	297b9904 	addi	r5,r5,-4508
 20156c4:	010004c4 	movi	r4,19
 20156c8:	201b4280 	call	201b428 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20156cc:	0001883a 	nop
 20156d0:	e037883a 	mov	sp,fp
 20156d4:	dfc00117 	ldw	ra,4(sp)
 20156d8:	df000017 	ldw	fp,0(sp)
 20156dc:	dec00204 	addi	sp,sp,8
 20156e0:	f800283a 	ret

020156e4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20156e4:	defffb04 	addi	sp,sp,-20
 20156e8:	dfc00415 	stw	ra,16(sp)
 20156ec:	df000315 	stw	fp,12(sp)
 20156f0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20156f4:	01414404 	movi	r5,1296
 20156f8:	010080f4 	movhi	r4,515
 20156fc:	2134e604 	addi	r4,r4,-11368
 2015700:	20157c80 	call	20157c8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2015704:	01401504 	movi	r5,84
 2015708:	010080f4 	movhi	r4,515
 201570c:	21362a04 	addi	r4,r4,-10072
 2015710:	20157c80 	call	20157c8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2015714:	008080f4 	movhi	r2,515
 2015718:	10b4e604 	addi	r2,r2,-11368
 201571c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2015720:	008080f4 	movhi	r2,515
 2015724:	10b50104 	addi	r2,r2,-11260
 2015728:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 201572c:	e03ffd05 	stb	zero,-12(fp)
 2015730:	00001106 	br	2015778 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2015734:	e0bffe17 	ldw	r2,-8(fp)
 2015738:	e0ffff17 	ldw	r3,-4(fp)
 201573c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2015740:	e0bffe17 	ldw	r2,-8(fp)
 2015744:	00c00fc4 	movi	r3,63
 2015748:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 201574c:	e0bffe17 	ldw	r2,-8(fp)
 2015750:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2015754:	e0bffe17 	ldw	r2,-8(fp)
 2015758:	10801b04 	addi	r2,r2,108
 201575c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2015760:	e0bfff17 	ldw	r2,-4(fp)
 2015764:	10801b04 	addi	r2,r2,108
 2015768:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 201576c:	e0bffd03 	ldbu	r2,-12(fp)
 2015770:	10800044 	addi	r2,r2,1
 2015774:	e0bffd05 	stb	r2,-12(fp)
 2015778:	e0bffd03 	ldbu	r2,-12(fp)
 201577c:	108002f0 	cmpltui	r2,r2,11
 2015780:	103fec1e 	bne	r2,zero,2015734 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2015784:	e0bffe17 	ldw	r2,-8(fp)
 2015788:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 201578c:	e0bffe17 	ldw	r2,-8(fp)
 2015790:	00c00fc4 	movi	r3,63
 2015794:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015798:	e0bffe17 	ldw	r2,-8(fp)
 201579c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 20157a0:	d0273a15 	stw	zero,-25368(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 20157a4:	008080f4 	movhi	r2,515
 20157a8:	10b4e604 	addi	r2,r2,-11368
 20157ac:	d0a73e15 	stw	r2,-25352(gp)
}
 20157b0:	0001883a 	nop
 20157b4:	e037883a 	mov	sp,fp
 20157b8:	dfc00117 	ldw	ra,4(sp)
 20157bc:	df000017 	ldw	fp,0(sp)
 20157c0:	dec00204 	addi	sp,sp,8
 20157c4:	f800283a 	ret

020157c8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20157c8:	defffd04 	addi	sp,sp,-12
 20157cc:	df000215 	stw	fp,8(sp)
 20157d0:	df000204 	addi	fp,sp,8
 20157d4:	e13ffe15 	stw	r4,-8(fp)
 20157d8:	2805883a 	mov	r2,r5
 20157dc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20157e0:	00000706 	br	2015800 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20157e4:	e0bffe17 	ldw	r2,-8(fp)
 20157e8:	10c00044 	addi	r3,r2,1
 20157ec:	e0fffe15 	stw	r3,-8(fp)
 20157f0:	10000005 	stb	zero,0(r2)
        size--;
 20157f4:	e0bfff0b 	ldhu	r2,-4(fp)
 20157f8:	10bfffc4 	addi	r2,r2,-1
 20157fc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2015800:	e0bfff0b 	ldhu	r2,-4(fp)
 2015804:	103ff71e 	bne	r2,zero,20157e4 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2015808:	0001883a 	nop
 201580c:	e037883a 	mov	sp,fp
 2015810:	df000017 	ldw	fp,0(sp)
 2015814:	dec00104 	addi	sp,sp,4
 2015818:	f800283a 	ret

0201581c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 201581c:	defffc04 	addi	sp,sp,-16
 2015820:	df000315 	stw	fp,12(sp)
 2015824:	df000304 	addi	fp,sp,12
 2015828:	e13ffd15 	stw	r4,-12(fp)
 201582c:	e17ffe15 	stw	r5,-8(fp)
 2015830:	3005883a 	mov	r2,r6
 2015834:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2015838:	00000b06 	br	2015868 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 201583c:	e0bffd17 	ldw	r2,-12(fp)
 2015840:	10c00044 	addi	r3,r2,1
 2015844:	e0fffd15 	stw	r3,-12(fp)
 2015848:	e0fffe17 	ldw	r3,-8(fp)
 201584c:	19000044 	addi	r4,r3,1
 2015850:	e13ffe15 	stw	r4,-8(fp)
 2015854:	18c00003 	ldbu	r3,0(r3)
 2015858:	10c00005 	stb	r3,0(r2)
        size--;
 201585c:	e0bfff0b 	ldhu	r2,-4(fp)
 2015860:	10bfffc4 	addi	r2,r2,-1
 2015864:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2015868:	e0bfff0b 	ldhu	r2,-4(fp)
 201586c:	103ff31e 	bne	r2,zero,201583c <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2015870:	0001883a 	nop
 2015874:	e037883a 	mov	sp,fp
 2015878:	df000017 	ldw	fp,0(sp)
 201587c:	dec00104 	addi	sp,sp,4
 2015880:	f800283a 	ret

02015884 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2015884:	defffb04 	addi	sp,sp,-20
 2015888:	dfc00415 	stw	ra,16(sp)
 201588c:	df000315 	stw	fp,12(sp)
 2015890:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2015894:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015898:	0005303a 	rdctl	r2,status
 201589c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20158a0:	e0ffff17 	ldw	r3,-4(fp)
 20158a4:	00bfff84 	movi	r2,-2
 20158a8:	1884703a 	and	r2,r3,r2
 20158ac:	1001703a 	wrctl	status,r2
  
  return context;
 20158b0:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 20158b4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 20158b8:	d0a74503 	ldbu	r2,-25324(gp)
 20158bc:	10803fcc 	andi	r2,r2,255
 20158c0:	10001a1e 	bne	r2,zero,201592c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 20158c4:	d0a73703 	ldbu	r2,-25380(gp)
 20158c8:	10803fcc 	andi	r2,r2,255
 20158cc:	1000171e 	bne	r2,zero,201592c <OS_Sched+0xa8>
            OS_SchedNew();
 20158d0:	20159540 	call	2015954 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 20158d4:	d0e73903 	ldbu	r3,-25372(gp)
 20158d8:	d0a73943 	ldbu	r2,-25371(gp)
 20158dc:	18c03fcc 	andi	r3,r3,255
 20158e0:	10803fcc 	andi	r2,r2,255
 20158e4:	18801126 	beq	r3,r2,201592c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 20158e8:	d0a73903 	ldbu	r2,-25372(gp)
 20158ec:	10c03fcc 	andi	r3,r2,255
 20158f0:	008080f4 	movhi	r2,515
 20158f4:	10b62a04 	addi	r2,r2,-10072
 20158f8:	18c7883a 	add	r3,r3,r3
 20158fc:	18c7883a 	add	r3,r3,r3
 2015900:	10c5883a 	add	r2,r2,r3
 2015904:	10800017 	ldw	r2,0(r2)
 2015908:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 201590c:	d0a74117 	ldw	r2,-25340(gp)
 2015910:	10c00e17 	ldw	r3,56(r2)
 2015914:	18c00044 	addi	r3,r3,1
 2015918:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 201591c:	d0a73c17 	ldw	r2,-25360(gp)
 2015920:	10800044 	addi	r2,r2,1
 2015924:	d0a73c15 	stw	r2,-25360(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2015928:	201dc000 	call	201dc00 <OSCtxSw>
 201592c:	e0bffd17 	ldw	r2,-12(fp)
 2015930:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015934:	e0bffe17 	ldw	r2,-8(fp)
 2015938:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 201593c:	0001883a 	nop
 2015940:	e037883a 	mov	sp,fp
 2015944:	dfc00117 	ldw	ra,4(sp)
 2015948:	df000017 	ldw	fp,0(sp)
 201594c:	dec00204 	addi	sp,sp,8
 2015950:	f800283a 	ret

02015954 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2015954:	defffe04 	addi	sp,sp,-8
 2015958:	df000115 	stw	fp,4(sp)
 201595c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2015960:	d0a74303 	ldbu	r2,-25332(gp)
 2015964:	10c03fcc 	andi	r3,r2,255
 2015968:	008080b4 	movhi	r2,514
 201596c:	10bb5504 	addi	r2,r2,-4780
 2015970:	10c5883a 	add	r2,r2,r3
 2015974:	10800003 	ldbu	r2,0(r2)
 2015978:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 201597c:	e0bfff03 	ldbu	r2,-4(fp)
 2015980:	100490fa 	slli	r2,r2,3
 2015984:	1009883a 	mov	r4,r2
 2015988:	e0ffff03 	ldbu	r3,-4(fp)
 201598c:	d0a74344 	addi	r2,gp,-25331
 2015990:	1885883a 	add	r2,r3,r2
 2015994:	10800003 	ldbu	r2,0(r2)
 2015998:	10c03fcc 	andi	r3,r2,255
 201599c:	008080b4 	movhi	r2,514
 20159a0:	10bb5504 	addi	r2,r2,-4780
 20159a4:	10c5883a 	add	r2,r2,r3
 20159a8:	10800003 	ldbu	r2,0(r2)
 20159ac:	2085883a 	add	r2,r4,r2
 20159b0:	d0a73905 	stb	r2,-25372(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 20159b4:	0001883a 	nop
 20159b8:	e037883a 	mov	sp,fp
 20159bc:	df000017 	ldw	fp,0(sp)
 20159c0:	dec00104 	addi	sp,sp,4
 20159c4:	f800283a 	ret

020159c8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20159c8:	defffc04 	addi	sp,sp,-16
 20159cc:	df000315 	stw	fp,12(sp)
 20159d0:	df000304 	addi	fp,sp,12
 20159d4:	e13ffe15 	stw	r4,-8(fp)
 20159d8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20159dc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20159e0:	00000b06 	br	2015a10 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 20159e4:	e0bffe17 	ldw	r2,-8(fp)
 20159e8:	10c00044 	addi	r3,r2,1
 20159ec:	e0fffe15 	stw	r3,-8(fp)
 20159f0:	e0ffff17 	ldw	r3,-4(fp)
 20159f4:	19000044 	addi	r4,r3,1
 20159f8:	e13fff15 	stw	r4,-4(fp)
 20159fc:	18c00003 	ldbu	r3,0(r3)
 2015a00:	10c00005 	stb	r3,0(r2)
        len++;
 2015a04:	e0bffd03 	ldbu	r2,-12(fp)
 2015a08:	10800044 	addi	r2,r2,1
 2015a0c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2015a10:	e0bfff17 	ldw	r2,-4(fp)
 2015a14:	10800003 	ldbu	r2,0(r2)
 2015a18:	10803fcc 	andi	r2,r2,255
 2015a1c:	103ff11e 	bne	r2,zero,20159e4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2015a20:	e0bffe17 	ldw	r2,-8(fp)
 2015a24:	10000005 	stb	zero,0(r2)
    return (len);
 2015a28:	e0bffd03 	ldbu	r2,-12(fp)
}
 2015a2c:	e037883a 	mov	sp,fp
 2015a30:	df000017 	ldw	fp,0(sp)
 2015a34:	dec00104 	addi	sp,sp,4
 2015a38:	f800283a 	ret

02015a3c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2015a3c:	defffd04 	addi	sp,sp,-12
 2015a40:	df000215 	stw	fp,8(sp)
 2015a44:	df000204 	addi	fp,sp,8
 2015a48:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2015a4c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2015a50:	00000606 	br	2015a6c <OS_StrLen+0x30>
        psrc++;
 2015a54:	e0bfff17 	ldw	r2,-4(fp)
 2015a58:	10800044 	addi	r2,r2,1
 2015a5c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2015a60:	e0bffe03 	ldbu	r2,-8(fp)
 2015a64:	10800044 	addi	r2,r2,1
 2015a68:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2015a6c:	e0bfff17 	ldw	r2,-4(fp)
 2015a70:	10800003 	ldbu	r2,0(r2)
 2015a74:	10803fcc 	andi	r2,r2,255
 2015a78:	103ff61e 	bne	r2,zero,2015a54 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2015a7c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2015a80:	e037883a 	mov	sp,fp
 2015a84:	df000017 	ldw	fp,0(sp)
 2015a88:	dec00104 	addi	sp,sp,4
 2015a8c:	f800283a 	ret

02015a90 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2015a90:	defffa04 	addi	sp,sp,-24
 2015a94:	dfc00515 	stw	ra,20(sp)
 2015a98:	df000415 	stw	fp,16(sp)
 2015a9c:	df000404 	addi	fp,sp,16
 2015aa0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015aa4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015aa8:	0005303a 	rdctl	r2,status
 2015aac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015ab0:	e0fffd17 	ldw	r3,-12(fp)
 2015ab4:	00bfff84 	movi	r2,-2
 2015ab8:	1884703a 	and	r2,r3,r2
 2015abc:	1001703a 	wrctl	status,r2
  
  return context;
 2015ac0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2015ac4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2015ac8:	d0a73817 	ldw	r2,-25376(gp)
 2015acc:	10800044 	addi	r2,r2,1
 2015ad0:	d0a73815 	stw	r2,-25376(gp)
 2015ad4:	e0bffc17 	ldw	r2,-16(fp)
 2015ad8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015adc:	e0bffe17 	ldw	r2,-8(fp)
 2015ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2015ae4:	201df140 	call	201df14 <OSTaskIdleHook>
    }
 2015ae8:	003fef06 	br	2015aa8 <OS_TaskIdle+0x18>

02015aec <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2015aec:	defffa04 	addi	sp,sp,-24
 2015af0:	dfc00515 	stw	ra,20(sp)
 2015af4:	df000415 	stw	fp,16(sp)
 2015af8:	df000404 	addi	fp,sp,16
 2015afc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015b00:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2015b04:	00000206 	br	2015b10 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2015b08:	01003204 	movi	r4,200
 2015b0c:	201bce80 	call	201bce8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2015b10:	d0a74903 	ldbu	r2,-25308(gp)
 2015b14:	10803fcc 	andi	r2,r2,255
 2015b18:	103ffb26 	beq	r2,zero,2015b08 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2015b1c:	d0a73d17 	ldw	r2,-25356(gp)
 2015b20:	01401904 	movi	r5,100
 2015b24:	1009883a 	mov	r4,r2
 2015b28:	2004ba00 	call	2004ba0 <__udivsi3>
 2015b2c:	d0a73d15 	stw	r2,-25356(gp)
    if (OSIdleCtrMax == 0L) {
 2015b30:	d0a73d17 	ldw	r2,-25356(gp)
 2015b34:	1000031e 	bne	r2,zero,2015b44 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2015b38:	d0273f05 	stb	zero,-25348(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2015b3c:	01003fc4 	movi	r4,255
 2015b40:	201b9700 	call	201b970 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015b44:	0005303a 	rdctl	r2,status
 2015b48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015b4c:	e0fffd17 	ldw	r3,-12(fp)
 2015b50:	00bfff84 	movi	r2,-2
 2015b54:	1884703a 	and	r2,r3,r2
 2015b58:	1001703a 	wrctl	status,r2
  
  return context;
 2015b5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2015b60:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2015b64:	d0a73817 	ldw	r2,-25376(gp)
 2015b68:	d0a74a15 	stw	r2,-25304(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2015b6c:	d0273815 	stw	zero,-25376(gp)
 2015b70:	e0bffc17 	ldw	r2,-16(fp)
 2015b74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b78:	e0bffe17 	ldw	r2,-8(fp)
 2015b7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2015b80:	d0a74a17 	ldw	r2,-25304(gp)
 2015b84:	d0e73d17 	ldw	r3,-25356(gp)
 2015b88:	180b883a 	mov	r5,r3
 2015b8c:	1009883a 	mov	r4,r2
 2015b90:	2004ba00 	call	2004ba0 <__udivsi3>
 2015b94:	1007883a 	mov	r3,r2
 2015b98:	00801904 	movi	r2,100
 2015b9c:	10c5c83a 	sub	r2,r2,r3
 2015ba0:	d0a73f05 	stb	r2,-25348(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2015ba4:	201de940 	call	201de94 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2015ba8:	2015bb80 	call	2015bb8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2015bac:	01001904 	movi	r4,100
 2015bb0:	201bce80 	call	201bce8 <OSTimeDly>
    }
 2015bb4:	003fe306 	br	2015b44 <OS_TaskStat+0x58>

02015bb8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2015bb8:	defffa04 	addi	sp,sp,-24
 2015bbc:	dfc00515 	stw	ra,20(sp)
 2015bc0:	df000415 	stw	fp,16(sp)
 2015bc4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2015bc8:	e03ffc05 	stb	zero,-16(fp)
 2015bcc:	00002406 	br	2015c60 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2015bd0:	e0bffc03 	ldbu	r2,-16(fp)
 2015bd4:	e0fffe04 	addi	r3,fp,-8
 2015bd8:	180b883a 	mov	r5,r3
 2015bdc:	1009883a 	mov	r4,r2
 2015be0:	201b7b00 	call	201b7b0 <OSTaskStkChk>
 2015be4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2015be8:	e0bffc43 	ldbu	r2,-15(fp)
 2015bec:	1000191e 	bne	r2,zero,2015c54 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2015bf0:	e0fffc03 	ldbu	r3,-16(fp)
 2015bf4:	008080f4 	movhi	r2,515
 2015bf8:	10b62a04 	addi	r2,r2,-10072
 2015bfc:	18c7883a 	add	r3,r3,r3
 2015c00:	18c7883a 	add	r3,r3,r3
 2015c04:	10c5883a 	add	r2,r2,r3
 2015c08:	10800017 	ldw	r2,0(r2)
 2015c0c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2015c10:	e0bffd17 	ldw	r2,-12(fp)
 2015c14:	10000f26 	beq	r2,zero,2015c54 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2015c18:	e0bffd17 	ldw	r2,-12(fp)
 2015c1c:	10800060 	cmpeqi	r2,r2,1
 2015c20:	10000c1e 	bne	r2,zero,2015c54 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2015c24:	e0bffd17 	ldw	r2,-12(fp)
 2015c28:	10c00217 	ldw	r3,8(r2)
 2015c2c:	e0bffd17 	ldw	r2,-12(fp)
 2015c30:	10800317 	ldw	r2,12(r2)
 2015c34:	1085883a 	add	r2,r2,r2
 2015c38:	1085883a 	add	r2,r2,r2
 2015c3c:	1887883a 	add	r3,r3,r2
 2015c40:	e0bffd17 	ldw	r2,-12(fp)
 2015c44:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2015c48:	e0ffff17 	ldw	r3,-4(fp)
 2015c4c:	e0bffd17 	ldw	r2,-12(fp)
 2015c50:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2015c54:	e0bffc03 	ldbu	r2,-16(fp)
 2015c58:	10800044 	addi	r2,r2,1
 2015c5c:	e0bffc05 	stb	r2,-16(fp)
 2015c60:	e0bffc03 	ldbu	r2,-16(fp)
 2015c64:	10800570 	cmpltui	r2,r2,21
 2015c68:	103fd91e 	bne	r2,zero,2015bd0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2015c6c:	0001883a 	nop
 2015c70:	e037883a 	mov	sp,fp
 2015c74:	dfc00117 	ldw	ra,4(sp)
 2015c78:	df000017 	ldw	fp,0(sp)
 2015c7c:	dec00204 	addi	sp,sp,8
 2015c80:	f800283a 	ret

02015c84 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2015c84:	defff204 	addi	sp,sp,-56
 2015c88:	dfc00d15 	stw	ra,52(sp)
 2015c8c:	df000c15 	stw	fp,48(sp)
 2015c90:	df000c04 	addi	fp,sp,48
 2015c94:	e17ffc15 	stw	r5,-16(fp)
 2015c98:	e1bffd15 	stw	r6,-12(fp)
 2015c9c:	3807883a 	mov	r3,r7
 2015ca0:	e0800417 	ldw	r2,16(fp)
 2015ca4:	e13ffb05 	stb	r4,-20(fp)
 2015ca8:	e0fffe0d 	sth	r3,-8(fp)
 2015cac:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015cb0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015cb4:	0005303a 	rdctl	r2,status
 2015cb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015cbc:	e0fffa17 	ldw	r3,-24(fp)
 2015cc0:	00bfff84 	movi	r2,-2
 2015cc4:	1884703a 	and	r2,r3,r2
 2015cc8:	1001703a 	wrctl	status,r2
  
  return context;
 2015ccc:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2015cd0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2015cd4:	d0a73e17 	ldw	r2,-25352(gp)
 2015cd8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2015cdc:	e0bff617 	ldw	r2,-40(fp)
 2015ce0:	10009326 	beq	r2,zero,2015f30 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2015ce4:	e0bff617 	ldw	r2,-40(fp)
 2015ce8:	10800517 	ldw	r2,20(r2)
 2015cec:	d0a73e15 	stw	r2,-25352(gp)
 2015cf0:	e0bff417 	ldw	r2,-48(fp)
 2015cf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015cf8:	e0bff817 	ldw	r2,-32(fp)
 2015cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2015d00:	e0bff617 	ldw	r2,-40(fp)
 2015d04:	e0fffc17 	ldw	r3,-16(fp)
 2015d08:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2015d0c:	e0bff617 	ldw	r2,-40(fp)
 2015d10:	e0fffb03 	ldbu	r3,-20(fp)
 2015d14:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2015d18:	e0bff617 	ldw	r2,-40(fp)
 2015d1c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2015d20:	e0bff617 	ldw	r2,-40(fp)
 2015d24:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2015d28:	e0bff617 	ldw	r2,-40(fp)
 2015d2c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2015d30:	e0bff617 	ldw	r2,-40(fp)
 2015d34:	e0c00317 	ldw	r3,12(fp)
 2015d38:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2015d3c:	e0bff617 	ldw	r2,-40(fp)
 2015d40:	e0c00217 	ldw	r3,8(fp)
 2015d44:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2015d48:	e0bff617 	ldw	r2,-40(fp)
 2015d4c:	e0fffd17 	ldw	r3,-12(fp)
 2015d50:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2015d54:	e0bff617 	ldw	r2,-40(fp)
 2015d58:	e0ffff0b 	ldhu	r3,-4(fp)
 2015d5c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2015d60:	e0bff617 	ldw	r2,-40(fp)
 2015d64:	e0fffe0b 	ldhu	r3,-8(fp)
 2015d68:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2015d6c:	e0bff617 	ldw	r2,-40(fp)
 2015d70:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2015d74:	e0bffb03 	ldbu	r2,-20(fp)
 2015d78:	1004d0fa 	srli	r2,r2,3
 2015d7c:	1007883a 	mov	r3,r2
 2015d80:	e0bff617 	ldw	r2,-40(fp)
 2015d84:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2015d88:	e0bffb03 	ldbu	r2,-20(fp)
 2015d8c:	108001cc 	andi	r2,r2,7
 2015d90:	1007883a 	mov	r3,r2
 2015d94:	e0bff617 	ldw	r2,-40(fp)
 2015d98:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2015d9c:	e0bff617 	ldw	r2,-40(fp)
 2015da0:	10800d03 	ldbu	r2,52(r2)
 2015da4:	10803fcc 	andi	r2,r2,255
 2015da8:	00c00044 	movi	r3,1
 2015dac:	1884983a 	sll	r2,r3,r2
 2015db0:	1007883a 	mov	r3,r2
 2015db4:	e0bff617 	ldw	r2,-40(fp)
 2015db8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2015dbc:	e0bff617 	ldw	r2,-40(fp)
 2015dc0:	10800cc3 	ldbu	r2,51(r2)
 2015dc4:	10803fcc 	andi	r2,r2,255
 2015dc8:	00c00044 	movi	r3,1
 2015dcc:	1884983a 	sll	r2,r3,r2
 2015dd0:	1007883a 	mov	r3,r2
 2015dd4:	e0bff617 	ldw	r2,-40(fp)
 2015dd8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2015ddc:	e0bff617 	ldw	r2,-40(fp)
 2015de0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2015de4:	e0bff617 	ldw	r2,-40(fp)
 2015de8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2015dec:	e0bff617 	ldw	r2,-40(fp)
 2015df0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2015df4:	e0bff617 	ldw	r2,-40(fp)
 2015df8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2015dfc:	e0bff617 	ldw	r2,-40(fp)
 2015e00:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2015e04:	e0bff617 	ldw	r2,-40(fp)
 2015e08:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2015e0c:	e0bff617 	ldw	r2,-40(fp)
 2015e10:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2015e14:	e0bff617 	ldw	r2,-40(fp)
 2015e18:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2015e1c:	e0bff617 	ldw	r2,-40(fp)
 2015e20:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2015e24:	e0bff617 	ldw	r2,-40(fp)
 2015e28:	00c00fc4 	movi	r3,63
 2015e2c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015e30:	e0bff617 	ldw	r2,-40(fp)
 2015e34:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2015e38:	e13ff617 	ldw	r4,-40(fp)
 2015e3c:	201df340 	call	201df34 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2015e40:	e13ff617 	ldw	r4,-40(fp)
 2015e44:	201de2c0 	call	201de2c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015e48:	0005303a 	rdctl	r2,status
 2015e4c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015e50:	e0fff517 	ldw	r3,-44(fp)
 2015e54:	00bfff84 	movi	r2,-2
 2015e58:	1884703a 	and	r2,r3,r2
 2015e5c:	1001703a 	wrctl	status,r2
  
  return context;
 2015e60:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2015e64:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2015e68:	e0fffb03 	ldbu	r3,-20(fp)
 2015e6c:	008080f4 	movhi	r2,515
 2015e70:	10b62a04 	addi	r2,r2,-10072
 2015e74:	18c7883a 	add	r3,r3,r3
 2015e78:	18c7883a 	add	r3,r3,r3
 2015e7c:	10c5883a 	add	r2,r2,r3
 2015e80:	e0fff617 	ldw	r3,-40(fp)
 2015e84:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2015e88:	d0e73a17 	ldw	r3,-25368(gp)
 2015e8c:	e0bff617 	ldw	r2,-40(fp)
 2015e90:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2015e94:	e0bff617 	ldw	r2,-40(fp)
 2015e98:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2015e9c:	d0a73a17 	ldw	r2,-25368(gp)
 2015ea0:	10000326 	beq	r2,zero,2015eb0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2015ea4:	d0a73a17 	ldw	r2,-25368(gp)
 2015ea8:	e0fff617 	ldw	r3,-40(fp)
 2015eac:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2015eb0:	e0bff617 	ldw	r2,-40(fp)
 2015eb4:	d0a73a15 	stw	r2,-25368(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2015eb8:	e0bff617 	ldw	r2,-40(fp)
 2015ebc:	10c00d83 	ldbu	r3,54(r2)
 2015ec0:	d0a74303 	ldbu	r2,-25332(gp)
 2015ec4:	1884b03a 	or	r2,r3,r2
 2015ec8:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2015ecc:	e0bff617 	ldw	r2,-40(fp)
 2015ed0:	10800d03 	ldbu	r2,52(r2)
 2015ed4:	10c03fcc 	andi	r3,r2,255
 2015ed8:	e0bff617 	ldw	r2,-40(fp)
 2015edc:	10800d03 	ldbu	r2,52(r2)
 2015ee0:	11003fcc 	andi	r4,r2,255
 2015ee4:	d0a74344 	addi	r2,gp,-25331
 2015ee8:	2085883a 	add	r2,r4,r2
 2015eec:	11000003 	ldbu	r4,0(r2)
 2015ef0:	e0bff617 	ldw	r2,-40(fp)
 2015ef4:	10800d43 	ldbu	r2,53(r2)
 2015ef8:	2084b03a 	or	r2,r4,r2
 2015efc:	1009883a 	mov	r4,r2
 2015f00:	d0a74344 	addi	r2,gp,-25331
 2015f04:	1885883a 	add	r2,r3,r2
 2015f08:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2015f0c:	d0a73f43 	ldbu	r2,-25347(gp)
 2015f10:	10800044 	addi	r2,r2,1
 2015f14:	d0a73f45 	stb	r2,-25347(gp)
 2015f18:	e0bff417 	ldw	r2,-48(fp)
 2015f1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f20:	e0bff717 	ldw	r2,-36(fp)
 2015f24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2015f28:	0005883a 	mov	r2,zero
 2015f2c:	00000506 	br	2015f44 <OS_TCBInit+0x2c0>
 2015f30:	e0bff417 	ldw	r2,-48(fp)
 2015f34:	e0bff915 	stw	r2,-28(fp)
 2015f38:	e0bff917 	ldw	r2,-28(fp)
 2015f3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2015f40:	00801084 	movi	r2,66
}
 2015f44:	e037883a 	mov	sp,fp
 2015f48:	dfc00117 	ldw	ra,4(sp)
 2015f4c:	df000017 	ldw	fp,0(sp)
 2015f50:	dec00204 	addi	sp,sp,8
 2015f54:	f800283a 	ret

02015f58 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2015f58:	defffe04 	addi	sp,sp,-8
 2015f5c:	df000115 	stw	fp,4(sp)
 2015f60:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2015f64:	d0a00f04 	addi	r2,gp,-32708
 2015f68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2015f6c:	d0a01004 	addi	r2,gp,-32704
 2015f70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2015f74:	d0a01184 	addi	r2,gp,-32698
 2015f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2015f7c:	d0a01204 	addi	r2,gp,-32696
 2015f80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2015f84:	d0a01104 	addi	r2,gp,-32700
 2015f88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2015f8c:	d0a01284 	addi	r2,gp,-32694
 2015f90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2015f94:	d0a01304 	addi	r2,gp,-32692
 2015f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2015f9c:	d0a01384 	addi	r2,gp,-32690
 2015fa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2015fa4:	d0a01404 	addi	r2,gp,-32688
 2015fa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2015fac:	d0a01484 	addi	r2,gp,-32686
 2015fb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2015fb4:	d0a01504 	addi	r2,gp,-32684
 2015fb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2015fbc:	d0a01584 	addi	r2,gp,-32682
 2015fc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2015fc4:	d0a01604 	addi	r2,gp,-32680
 2015fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2015fcc:	d0a01684 	addi	r2,gp,-32678
 2015fd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2015fd4:	d0a01704 	addi	r2,gp,-32676
 2015fd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2015fdc:	d0a01784 	addi	r2,gp,-32674
 2015fe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2015fe4:	d0a01804 	addi	r2,gp,-32672
 2015fe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2015fec:	d0a01884 	addi	r2,gp,-32670
 2015ff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2015ff4:	d0a01904 	addi	r2,gp,-32668
 2015ff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2015ffc:	d0a01984 	addi	r2,gp,-32666
 2016000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2016004:	d0a01a04 	addi	r2,gp,-32664
 2016008:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 201600c:	d0a01a84 	addi	r2,gp,-32662
 2016010:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2016014:	d0a01b04 	addi	r2,gp,-32660
 2016018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 201601c:	d0a01b84 	addi	r2,gp,-32658
 2016020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2016024:	d0a01c04 	addi	r2,gp,-32656
 2016028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 201602c:	d0a01c84 	addi	r2,gp,-32654
 2016030:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2016034:	d0a01d04 	addi	r2,gp,-32652
 2016038:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 201603c:	d0a01d84 	addi	r2,gp,-32650
 2016040:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2016044:	d0a01e04 	addi	r2,gp,-32648
 2016048:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 201604c:	d0a01e84 	addi	r2,gp,-32646
 2016050:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2016054:	d0a01f04 	addi	r2,gp,-32644
 2016058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 201605c:	d0a01f84 	addi	r2,gp,-32642
 2016060:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2016064:	d0a02004 	addi	r2,gp,-32640
 2016068:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 201606c:	d0a02084 	addi	r2,gp,-32638
 2016070:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2016074:	d0a02104 	addi	r2,gp,-32636
 2016078:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 201607c:	d0a02184 	addi	r2,gp,-32634
 2016080:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2016084:	d0a02204 	addi	r2,gp,-32632
 2016088:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 201608c:	d0a02284 	addi	r2,gp,-32630
 2016090:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2016094:	d0a02304 	addi	r2,gp,-32628
 2016098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 201609c:	d0a02384 	addi	r2,gp,-32626
 20160a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20160a4:	d0a02404 	addi	r2,gp,-32624
 20160a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20160ac:	d0a02484 	addi	r2,gp,-32622
 20160b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20160b4:	d0a02504 	addi	r2,gp,-32620
 20160b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20160bc:	d0a02584 	addi	r2,gp,-32618
 20160c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20160c4:	d0a02604 	addi	r2,gp,-32616
 20160c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20160cc:	d0a02b04 	addi	r2,gp,-32596
 20160d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20160d4:	0001883a 	nop
 20160d8:	e037883a 	mov	sp,fp
 20160dc:	df000017 	ldw	fp,0(sp)
 20160e0:	dec00104 	addi	sp,sp,4
 20160e4:	f800283a 	ret

020160e8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20160e8:	defff204 	addi	sp,sp,-56
 20160ec:	df000d15 	stw	fp,52(sp)
 20160f0:	df000d04 	addi	fp,sp,52
 20160f4:	e13ffc15 	stw	r4,-16(fp)
 20160f8:	2807883a 	mov	r3,r5
 20160fc:	3005883a 	mov	r2,r6
 2016100:	e1ffff15 	stw	r7,-4(fp)
 2016104:	e0fffd0d 	sth	r3,-12(fp)
 2016108:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201610c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2016110:	e0bfff17 	ldw	r2,-4(fp)
 2016114:	1000021e 	bne	r2,zero,2016120 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2016118:	0005883a 	mov	r2,zero
 201611c:	0000b006 	br	20163e0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2016120:	e0bffc17 	ldw	r2,-16(fp)
 2016124:	1000051e 	bne	r2,zero,201613c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016128:	e0bfff17 	ldw	r2,-4(fp)
 201612c:	00c01b84 	movi	r3,110
 2016130:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016134:	0005883a 	mov	r2,zero
 2016138:	0000a906 	br	20163e0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201613c:	e0bffc17 	ldw	r2,-16(fp)
 2016140:	10800003 	ldbu	r2,0(r2)
 2016144:	10803fcc 	andi	r2,r2,255
 2016148:	10800160 	cmpeqi	r2,r2,5
 201614c:	1000051e 	bne	r2,zero,2016164 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2016150:	e0bfff17 	ldw	r2,-4(fp)
 2016154:	00c00044 	movi	r3,1
 2016158:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201615c:	0005883a 	mov	r2,zero
 2016160:	00009f06 	br	20163e0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2016164:	e0fffe03 	ldbu	r3,-8(fp)
 2016168:	00bfe004 	movi	r2,-128
 201616c:	1884703a 	and	r2,r3,r2
 2016170:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2016174:	e0bff503 	ldbu	r2,-44(fp)
 2016178:	10000626 	beq	r2,zero,2016194 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 201617c:	e0bffe03 	ldbu	r2,-8(fp)
 2016180:	10801fcc 	andi	r2,r2,127
 2016184:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2016188:	00800044 	movi	r2,1
 201618c:	e0bff385 	stb	r2,-50(fp)
 2016190:	00000106 	br	2016198 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2016194:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2016198:	e0bfff17 	ldw	r2,-4(fp)
 201619c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20161a0:	0005303a 	rdctl	r2,status
 20161a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20161a8:	e0fffb17 	ldw	r3,-20(fp)
 20161ac:	00bfff84 	movi	r2,-2
 20161b0:	1884703a 	and	r2,r3,r2
 20161b4:	1001703a 	wrctl	status,r2
  
  return context;
 20161b8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 20161bc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20161c0:	e0bffe03 	ldbu	r2,-8(fp)
 20161c4:	10c00060 	cmpeqi	r3,r2,1
 20161c8:	18005f1e 	bne	r3,zero,2016348 <OSFlagAccept+0x260>
 20161cc:	10c00088 	cmpgei	r3,r2,2
 20161d0:	1800021e 	bne	r3,zero,20161dc <OSFlagAccept+0xf4>
 20161d4:	10003f26 	beq	r2,zero,20162d4 <OSFlagAccept+0x1ec>
 20161d8:	00007706 	br	20163b8 <OSFlagAccept+0x2d0>
 20161dc:	10c000a0 	cmpeqi	r3,r2,2
 20161e0:	1800031e 	bne	r3,zero,20161f0 <OSFlagAccept+0x108>
 20161e4:	108000e0 	cmpeqi	r2,r2,3
 20161e8:	10001e1e 	bne	r2,zero,2016264 <OSFlagAccept+0x17c>
 20161ec:	00007206 	br	20163b8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20161f0:	e0bffc17 	ldw	r2,-16(fp)
 20161f4:	10c0020b 	ldhu	r3,8(r2)
 20161f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20161fc:	1884703a 	and	r2,r3,r2
 2016200:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016204:	e0fff30b 	ldhu	r3,-52(fp)
 2016208:	e0bffd0b 	ldhu	r2,-12(fp)
 201620c:	18800d1e 	bne	r3,r2,2016244 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016210:	e0bff383 	ldbu	r2,-50(fp)
 2016214:	10800058 	cmpnei	r2,r2,1
 2016218:	10000d1e 	bne	r2,zero,2016250 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201621c:	e0bffc17 	ldw	r2,-16(fp)
 2016220:	1080020b 	ldhu	r2,8(r2)
 2016224:	1007883a 	mov	r3,r2
 2016228:	e0bff30b 	ldhu	r2,-52(fp)
 201622c:	0084303a 	nor	r2,zero,r2
 2016230:	1884703a 	and	r2,r3,r2
 2016234:	1007883a 	mov	r3,r2
 2016238:	e0bffc17 	ldw	r2,-16(fp)
 201623c:	10c0020d 	sth	r3,8(r2)
 2016240:	00000306 	br	2016250 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016244:	e0bfff17 	ldw	r2,-4(fp)
 2016248:	00c01c04 	movi	r3,112
 201624c:	10c00005 	stb	r3,0(r2)
 2016250:	e0bff417 	ldw	r2,-48(fp)
 2016254:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016258:	e0bff617 	ldw	r2,-40(fp)
 201625c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016260:	00005e06 	br	20163dc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2016264:	e0bffc17 	ldw	r2,-16(fp)
 2016268:	10c0020b 	ldhu	r3,8(r2)
 201626c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016270:	1884703a 	and	r2,r3,r2
 2016274:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2016278:	e0bff30b 	ldhu	r2,-52(fp)
 201627c:	10000d26 	beq	r2,zero,20162b4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016280:	e0bff383 	ldbu	r2,-50(fp)
 2016284:	10800058 	cmpnei	r2,r2,1
 2016288:	10000d1e 	bne	r2,zero,20162c0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201628c:	e0bffc17 	ldw	r2,-16(fp)
 2016290:	1080020b 	ldhu	r2,8(r2)
 2016294:	1007883a 	mov	r3,r2
 2016298:	e0bff30b 	ldhu	r2,-52(fp)
 201629c:	0084303a 	nor	r2,zero,r2
 20162a0:	1884703a 	and	r2,r3,r2
 20162a4:	1007883a 	mov	r3,r2
 20162a8:	e0bffc17 	ldw	r2,-16(fp)
 20162ac:	10c0020d 	sth	r3,8(r2)
 20162b0:	00000306 	br	20162c0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20162b4:	e0bfff17 	ldw	r2,-4(fp)
 20162b8:	00c01c04 	movi	r3,112
 20162bc:	10c00005 	stb	r3,0(r2)
 20162c0:	e0bff417 	ldw	r2,-48(fp)
 20162c4:	e0bff715 	stw	r2,-36(fp)
 20162c8:	e0bff717 	ldw	r2,-36(fp)
 20162cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20162d0:	00004206 	br	20163dc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20162d4:	e0bffc17 	ldw	r2,-16(fp)
 20162d8:	1080020b 	ldhu	r2,8(r2)
 20162dc:	0084303a 	nor	r2,zero,r2
 20162e0:	1007883a 	mov	r3,r2
 20162e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20162e8:	1884703a 	and	r2,r3,r2
 20162ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20162f0:	e0fff30b 	ldhu	r3,-52(fp)
 20162f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20162f8:	18800b1e 	bne	r3,r2,2016328 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20162fc:	e0bff383 	ldbu	r2,-50(fp)
 2016300:	10800058 	cmpnei	r2,r2,1
 2016304:	10000b1e 	bne	r2,zero,2016334 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2016308:	e0bffc17 	ldw	r2,-16(fp)
 201630c:	10c0020b 	ldhu	r3,8(r2)
 2016310:	e0bff30b 	ldhu	r2,-52(fp)
 2016314:	1884b03a 	or	r2,r3,r2
 2016318:	1007883a 	mov	r3,r2
 201631c:	e0bffc17 	ldw	r2,-16(fp)
 2016320:	10c0020d 	sth	r3,8(r2)
 2016324:	00000306 	br	2016334 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016328:	e0bfff17 	ldw	r2,-4(fp)
 201632c:	00c01c04 	movi	r3,112
 2016330:	10c00005 	stb	r3,0(r2)
 2016334:	e0bff417 	ldw	r2,-48(fp)
 2016338:	e0bff815 	stw	r2,-32(fp)
 201633c:	e0bff817 	ldw	r2,-32(fp)
 2016340:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016344:	00002506 	br	20163dc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016348:	e0bffc17 	ldw	r2,-16(fp)
 201634c:	1080020b 	ldhu	r2,8(r2)
 2016350:	0084303a 	nor	r2,zero,r2
 2016354:	1007883a 	mov	r3,r2
 2016358:	e0bffd0b 	ldhu	r2,-12(fp)
 201635c:	1884703a 	and	r2,r3,r2
 2016360:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016364:	e0bff30b 	ldhu	r2,-52(fp)
 2016368:	10000b26 	beq	r2,zero,2016398 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201636c:	e0bff383 	ldbu	r2,-50(fp)
 2016370:	10800058 	cmpnei	r2,r2,1
 2016374:	10000b1e 	bne	r2,zero,20163a4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016378:	e0bffc17 	ldw	r2,-16(fp)
 201637c:	10c0020b 	ldhu	r3,8(r2)
 2016380:	e0bff30b 	ldhu	r2,-52(fp)
 2016384:	1884b03a 	or	r2,r3,r2
 2016388:	1007883a 	mov	r3,r2
 201638c:	e0bffc17 	ldw	r2,-16(fp)
 2016390:	10c0020d 	sth	r3,8(r2)
 2016394:	00000306 	br	20163a4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016398:	e0bfff17 	ldw	r2,-4(fp)
 201639c:	00c01c04 	movi	r3,112
 20163a0:	10c00005 	stb	r3,0(r2)
 20163a4:	e0bff417 	ldw	r2,-48(fp)
 20163a8:	e0bff915 	stw	r2,-28(fp)
 20163ac:	e0bff917 	ldw	r2,-28(fp)
 20163b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20163b4:	00000906 	br	20163dc <OSFlagAccept+0x2f4>
 20163b8:	e0bff417 	ldw	r2,-48(fp)
 20163bc:	e0bffa15 	stw	r2,-24(fp)
 20163c0:	e0bffa17 	ldw	r2,-24(fp)
 20163c4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20163c8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20163cc:	e0bfff17 	ldw	r2,-4(fp)
 20163d0:	00c01bc4 	movi	r3,111
 20163d4:	10c00005 	stb	r3,0(r2)
             break;
 20163d8:	0001883a 	nop
    }
    return (flags_rdy);
 20163dc:	e0bff30b 	ldhu	r2,-52(fp)
}
 20163e0:	e037883a 	mov	sp,fp
 20163e4:	df000017 	ldw	fp,0(sp)
 20163e8:	dec00104 	addi	sp,sp,4
 20163ec:	f800283a 	ret

020163f0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20163f0:	defff804 	addi	sp,sp,-32
 20163f4:	df000715 	stw	fp,28(sp)
 20163f8:	df000704 	addi	fp,sp,28
 20163fc:	2005883a 	mov	r2,r4
 2016400:	e17fff15 	stw	r5,-4(fp)
 2016404:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2016408:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 201640c:	e0bfff17 	ldw	r2,-4(fp)
 2016410:	1000021e 	bne	r2,zero,201641c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2016414:	0005883a 	mov	r2,zero
 2016418:	00003306 	br	20164e8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 201641c:	d0a74503 	ldbu	r2,-25324(gp)
 2016420:	10803fcc 	andi	r2,r2,255
 2016424:	10000526 	beq	r2,zero,201643c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2016428:	e0bfff17 	ldw	r2,-4(fp)
 201642c:	00c00404 	movi	r3,16
 2016430:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2016434:	0005883a 	mov	r2,zero
 2016438:	00002b06 	br	20164e8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201643c:	0005303a 	rdctl	r2,status
 2016440:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016444:	e0fffd17 	ldw	r3,-12(fp)
 2016448:	00bfff84 	movi	r2,-2
 201644c:	1884703a 	and	r2,r3,r2
 2016450:	1001703a 	wrctl	status,r2
  
  return context;
 2016454:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2016458:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 201645c:	d0a74817 	ldw	r2,-25312(gp)
 2016460:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2016464:	e0bffb17 	ldw	r2,-20(fp)
 2016468:	10001726 	beq	r2,zero,20164c8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 201646c:	d0a74817 	ldw	r2,-25312(gp)
 2016470:	10800117 	ldw	r2,4(r2)
 2016474:	d0a74815 	stw	r2,-25312(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2016478:	e0bffb17 	ldw	r2,-20(fp)
 201647c:	00c00144 	movi	r3,5
 2016480:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2016484:	e0bffb17 	ldw	r2,-20(fp)
 2016488:	e0fffe0b 	ldhu	r3,-8(fp)
 201648c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2016490:	e0bffb17 	ldw	r2,-20(fp)
 2016494:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2016498:	e0bffb17 	ldw	r2,-20(fp)
 201649c:	00c00fc4 	movi	r3,63
 20164a0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20164a4:	e0bffb17 	ldw	r2,-20(fp)
 20164a8:	100002c5 	stb	zero,11(r2)
 20164ac:	e0bff917 	ldw	r2,-28(fp)
 20164b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20164b4:	e0bffa17 	ldw	r2,-24(fp)
 20164b8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20164bc:	e0bfff17 	ldw	r2,-4(fp)
 20164c0:	10000005 	stb	zero,0(r2)
 20164c4:	00000706 	br	20164e4 <OSFlagCreate+0xf4>
 20164c8:	e0bff917 	ldw	r2,-28(fp)
 20164cc:	e0bffc15 	stw	r2,-16(fp)
 20164d0:	e0bffc17 	ldw	r2,-16(fp)
 20164d4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20164d8:	e0bfff17 	ldw	r2,-4(fp)
 20164dc:	00c01c84 	movi	r3,114
 20164e0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20164e4:	e0bffb17 	ldw	r2,-20(fp)
}
 20164e8:	e037883a 	mov	sp,fp
 20164ec:	df000017 	ldw	fp,0(sp)
 20164f0:	dec00104 	addi	sp,sp,4
 20164f4:	f800283a 	ret

020164f8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 20164f8:	defff204 	addi	sp,sp,-56
 20164fc:	dfc00d15 	stw	ra,52(sp)
 2016500:	df000c15 	stw	fp,48(sp)
 2016504:	df000c04 	addi	fp,sp,48
 2016508:	e13ffd15 	stw	r4,-12(fp)
 201650c:	2805883a 	mov	r2,r5
 2016510:	e1bfff15 	stw	r6,-4(fp)
 2016514:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016518:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201651c:	e0bfff17 	ldw	r2,-4(fp)
 2016520:	1000021e 	bne	r2,zero,201652c <OSFlagDel+0x34>
        return (pgrp);
 2016524:	e0bffd17 	ldw	r2,-12(fp)
 2016528:	00008006 	br	201672c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201652c:	e0bffd17 	ldw	r2,-12(fp)
 2016530:	1000051e 	bne	r2,zero,2016548 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016534:	e0bfff17 	ldw	r2,-4(fp)
 2016538:	00c01b84 	movi	r3,110
 201653c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016540:	e0bffd17 	ldw	r2,-12(fp)
 2016544:	00007906 	br	201672c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016548:	d0a74503 	ldbu	r2,-25324(gp)
 201654c:	10803fcc 	andi	r2,r2,255
 2016550:	10000526 	beq	r2,zero,2016568 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2016554:	e0bfff17 	ldw	r2,-4(fp)
 2016558:	00c003c4 	movi	r3,15
 201655c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016560:	e0bffd17 	ldw	r2,-12(fp)
 2016564:	00007106 	br	201672c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2016568:	e0bffd17 	ldw	r2,-12(fp)
 201656c:	10800003 	ldbu	r2,0(r2)
 2016570:	10803fcc 	andi	r2,r2,255
 2016574:	10800160 	cmpeqi	r2,r2,5
 2016578:	1000051e 	bne	r2,zero,2016590 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 201657c:	e0bfff17 	ldw	r2,-4(fp)
 2016580:	00c00044 	movi	r3,1
 2016584:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016588:	e0bffd17 	ldw	r2,-12(fp)
 201658c:	00006706 	br	201672c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016590:	0005303a 	rdctl	r2,status
 2016594:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016598:	e0fffc17 	ldw	r3,-16(fp)
 201659c:	00bfff84 	movi	r2,-2
 20165a0:	1884703a 	and	r2,r3,r2
 20165a4:	1001703a 	wrctl	status,r2
  
  return context;
 20165a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20165ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20165b0:	e0bffd17 	ldw	r2,-12(fp)
 20165b4:	10800117 	ldw	r2,4(r2)
 20165b8:	10000326 	beq	r2,zero,20165c8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20165bc:	00800044 	movi	r2,1
 20165c0:	e0bff405 	stb	r2,-48(fp)
 20165c4:	00000106 	br	20165cc <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20165c8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20165cc:	e0bffe03 	ldbu	r2,-8(fp)
 20165d0:	10000326 	beq	r2,zero,20165e0 <OSFlagDel+0xe8>
 20165d4:	10800060 	cmpeqi	r2,r2,1
 20165d8:	1000231e 	bne	r2,zero,2016668 <OSFlagDel+0x170>
 20165dc:	00004806 	br	2016700 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20165e0:	e0bff403 	ldbu	r2,-48(fp)
 20165e4:	1000161e 	bne	r2,zero,2016640 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20165e8:	e0bffd17 	ldw	r2,-12(fp)
 20165ec:	00c00fc4 	movi	r3,63
 20165f0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20165f4:	e0bffd17 	ldw	r2,-12(fp)
 20165f8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20165fc:	e0bffd17 	ldw	r2,-12(fp)
 2016600:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2016604:	d0e74817 	ldw	r3,-25312(gp)
 2016608:	e0bffd17 	ldw	r2,-12(fp)
 201660c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2016610:	e0bffd17 	ldw	r2,-12(fp)
 2016614:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2016618:	e0bffd17 	ldw	r2,-12(fp)
 201661c:	d0a74815 	stw	r2,-25312(gp)
 2016620:	e0bff717 	ldw	r2,-36(fp)
 2016624:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016628:	e0bff817 	ldw	r2,-32(fp)
 201662c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2016630:	e0bfff17 	ldw	r2,-4(fp)
 2016634:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2016638:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 201663c:	00003a06 	br	2016728 <OSFlagDel+0x230>
 2016640:	e0bff717 	ldw	r2,-36(fp)
 2016644:	e0bff915 	stw	r2,-28(fp)
 2016648:	e0bff917 	ldw	r2,-28(fp)
 201664c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2016650:	e0bfff17 	ldw	r2,-4(fp)
 2016654:	00c01244 	movi	r3,73
 2016658:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 201665c:	e0bffd17 	ldw	r2,-12(fp)
 2016660:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2016664:	00003006 	br	2016728 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2016668:	e0bffd17 	ldw	r2,-12(fp)
 201666c:	10800117 	ldw	r2,4(r2)
 2016670:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2016674:	00000606 	br	2016690 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2016678:	000b883a 	mov	r5,zero
 201667c:	e13ff517 	ldw	r4,-44(fp)
 2016680:	20176640 	call	2017664 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2016684:	e0bff517 	ldw	r2,-44(fp)
 2016688:	10800017 	ldw	r2,0(r2)
 201668c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2016690:	e0bff517 	ldw	r2,-44(fp)
 2016694:	103ff81e 	bne	r2,zero,2016678 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2016698:	e0bffd17 	ldw	r2,-12(fp)
 201669c:	00c00fc4 	movi	r3,63
 20166a0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20166a4:	e0bffd17 	ldw	r2,-12(fp)
 20166a8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20166ac:	e0bffd17 	ldw	r2,-12(fp)
 20166b0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 20166b4:	d0e74817 	ldw	r3,-25312(gp)
 20166b8:	e0bffd17 	ldw	r2,-12(fp)
 20166bc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20166c0:	e0bffd17 	ldw	r2,-12(fp)
 20166c4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20166c8:	e0bffd17 	ldw	r2,-12(fp)
 20166cc:	d0a74815 	stw	r2,-25312(gp)
 20166d0:	e0bff717 	ldw	r2,-36(fp)
 20166d4:	e0bffa15 	stw	r2,-24(fp)
 20166d8:	e0bffa17 	ldw	r2,-24(fp)
 20166dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20166e0:	e0bff403 	ldbu	r2,-48(fp)
 20166e4:	10800058 	cmpnei	r2,r2,1
 20166e8:	1000011e 	bne	r2,zero,20166f0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20166ec:	20158840 	call	2015884 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20166f0:	e0bfff17 	ldw	r2,-4(fp)
 20166f4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20166f8:	e03ff615 	stw	zero,-40(fp)
             break;
 20166fc:	00000a06 	br	2016728 <OSFlagDel+0x230>
 2016700:	e0bff717 	ldw	r2,-36(fp)
 2016704:	e0bffb15 	stw	r2,-20(fp)
 2016708:	e0bffb17 	ldw	r2,-20(fp)
 201670c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2016710:	e0bfff17 	ldw	r2,-4(fp)
 2016714:	00c001c4 	movi	r3,7
 2016718:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 201671c:	e0bffd17 	ldw	r2,-12(fp)
 2016720:	e0bff615 	stw	r2,-40(fp)
             break;
 2016724:	0001883a 	nop
    }
    return (pgrp_return);
 2016728:	e0bff617 	ldw	r2,-40(fp)
}
 201672c:	e037883a 	mov	sp,fp
 2016730:	dfc00117 	ldw	ra,4(sp)
 2016734:	df000017 	ldw	fp,0(sp)
 2016738:	dec00204 	addi	sp,sp,8
 201673c:	f800283a 	ret

02016740 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2016740:	defff604 	addi	sp,sp,-40
 2016744:	dfc00915 	stw	ra,36(sp)
 2016748:	df000815 	stw	fp,32(sp)
 201674c:	df000804 	addi	fp,sp,32
 2016750:	e13ffd15 	stw	r4,-12(fp)
 2016754:	e17ffe15 	stw	r5,-8(fp)
 2016758:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201675c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016760:	e0bfff17 	ldw	r2,-4(fp)
 2016764:	1000021e 	bne	r2,zero,2016770 <OSFlagNameGet+0x30>
        return (0);
 2016768:	0005883a 	mov	r2,zero
 201676c:	00003906 	br	2016854 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2016770:	e0bffd17 	ldw	r2,-12(fp)
 2016774:	1000051e 	bne	r2,zero,201678c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016778:	e0bfff17 	ldw	r2,-4(fp)
 201677c:	00c01b84 	movi	r3,110
 2016780:	10c00005 	stb	r3,0(r2)
        return (0);
 2016784:	0005883a 	mov	r2,zero
 2016788:	00003206 	br	2016854 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201678c:	e0bffe17 	ldw	r2,-8(fp)
 2016790:	1000051e 	bne	r2,zero,20167a8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2016794:	e0bfff17 	ldw	r2,-4(fp)
 2016798:	00c00304 	movi	r3,12
 201679c:	10c00005 	stb	r3,0(r2)
        return (0);
 20167a0:	0005883a 	mov	r2,zero
 20167a4:	00002b06 	br	2016854 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20167a8:	d0a74503 	ldbu	r2,-25324(gp)
 20167ac:	10803fcc 	andi	r2,r2,255
 20167b0:	10000526 	beq	r2,zero,20167c8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20167b4:	e0bfff17 	ldw	r2,-4(fp)
 20167b8:	00c00444 	movi	r3,17
 20167bc:	10c00005 	stb	r3,0(r2)
        return (0);
 20167c0:	0005883a 	mov	r2,zero
 20167c4:	00002306 	br	2016854 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20167c8:	0005303a 	rdctl	r2,status
 20167cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20167d0:	e0fffc17 	ldw	r3,-16(fp)
 20167d4:	00bfff84 	movi	r2,-2
 20167d8:	1884703a 	and	r2,r3,r2
 20167dc:	1001703a 	wrctl	status,r2
  
  return context;
 20167e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20167e4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20167e8:	e0bffd17 	ldw	r2,-12(fp)
 20167ec:	10800003 	ldbu	r2,0(r2)
 20167f0:	10803fcc 	andi	r2,r2,255
 20167f4:	10800160 	cmpeqi	r2,r2,5
 20167f8:	1000091e 	bne	r2,zero,2016820 <OSFlagNameGet+0xe0>
 20167fc:	e0bff817 	ldw	r2,-32(fp)
 2016800:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016804:	e0bff917 	ldw	r2,-28(fp)
 2016808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 201680c:	e0bfff17 	ldw	r2,-4(fp)
 2016810:	00c00044 	movi	r3,1
 2016814:	10c00005 	stb	r3,0(r2)
        return (0);
 2016818:	0005883a 	mov	r2,zero
 201681c:	00000d06 	br	2016854 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2016820:	e0bffd17 	ldw	r2,-12(fp)
 2016824:	10800284 	addi	r2,r2,10
 2016828:	100b883a 	mov	r5,r2
 201682c:	e13ffe17 	ldw	r4,-8(fp)
 2016830:	20159c80 	call	20159c8 <OS_StrCopy>
 2016834:	e0bffb05 	stb	r2,-20(fp)
 2016838:	e0bff817 	ldw	r2,-32(fp)
 201683c:	e0bffa15 	stw	r2,-24(fp)
 2016840:	e0bffa17 	ldw	r2,-24(fp)
 2016844:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016848:	e0bfff17 	ldw	r2,-4(fp)
 201684c:	10000005 	stb	zero,0(r2)
    return (len);
 2016850:	e0bffb03 	ldbu	r2,-20(fp)
}
 2016854:	e037883a 	mov	sp,fp
 2016858:	dfc00117 	ldw	ra,4(sp)
 201685c:	df000017 	ldw	fp,0(sp)
 2016860:	dec00204 	addi	sp,sp,8
 2016864:	f800283a 	ret

02016868 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2016868:	defff504 	addi	sp,sp,-44
 201686c:	dfc00a15 	stw	ra,40(sp)
 2016870:	df000915 	stw	fp,36(sp)
 2016874:	df000904 	addi	fp,sp,36
 2016878:	e13ffd15 	stw	r4,-12(fp)
 201687c:	e17ffe15 	stw	r5,-8(fp)
 2016880:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016884:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016888:	e0bfff17 	ldw	r2,-4(fp)
 201688c:	10004326 	beq	r2,zero,201699c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2016890:	e0bffd17 	ldw	r2,-12(fp)
 2016894:	1000041e 	bne	r2,zero,20168a8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016898:	e0bfff17 	ldw	r2,-4(fp)
 201689c:	00c01b84 	movi	r3,110
 20168a0:	10c00005 	stb	r3,0(r2)
        return;
 20168a4:	00003e06 	br	20169a0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20168a8:	e0bffe17 	ldw	r2,-8(fp)
 20168ac:	1000041e 	bne	r2,zero,20168c0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20168b0:	e0bfff17 	ldw	r2,-4(fp)
 20168b4:	00c00304 	movi	r3,12
 20168b8:	10c00005 	stb	r3,0(r2)
        return;
 20168bc:	00003806 	br	20169a0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20168c0:	d0a74503 	ldbu	r2,-25324(gp)
 20168c4:	10803fcc 	andi	r2,r2,255
 20168c8:	10000426 	beq	r2,zero,20168dc <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20168cc:	e0bfff17 	ldw	r2,-4(fp)
 20168d0:	00c00484 	movi	r3,18
 20168d4:	10c00005 	stb	r3,0(r2)
        return;
 20168d8:	00003106 	br	20169a0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20168dc:	0005303a 	rdctl	r2,status
 20168e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20168e4:	e0fffc17 	ldw	r3,-16(fp)
 20168e8:	00bfff84 	movi	r2,-2
 20168ec:	1884703a 	and	r2,r3,r2
 20168f0:	1001703a 	wrctl	status,r2
  
  return context;
 20168f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20168f8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20168fc:	e0bffd17 	ldw	r2,-12(fp)
 2016900:	10800003 	ldbu	r2,0(r2)
 2016904:	10803fcc 	andi	r2,r2,255
 2016908:	10800160 	cmpeqi	r2,r2,5
 201690c:	1000081e 	bne	r2,zero,2016930 <OSFlagNameSet+0xc8>
 2016910:	e0bff717 	ldw	r2,-36(fp)
 2016914:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016918:	e0bff817 	ldw	r2,-32(fp)
 201691c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2016920:	e0bfff17 	ldw	r2,-4(fp)
 2016924:	00c00044 	movi	r3,1
 2016928:	10c00005 	stb	r3,0(r2)
        return;
 201692c:	00001c06 	br	20169a0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2016930:	e13ffe17 	ldw	r4,-8(fp)
 2016934:	2015a3c0 	call	2015a3c <OS_StrLen>
 2016938:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 201693c:	e0bffa03 	ldbu	r2,-24(fp)
 2016940:	10800830 	cmpltui	r2,r2,32
 2016944:	1000081e 	bne	r2,zero,2016968 <OSFlagNameSet+0x100>
 2016948:	e0bff717 	ldw	r2,-36(fp)
 201694c:	e0bff915 	stw	r2,-28(fp)
 2016950:	e0bff917 	ldw	r2,-28(fp)
 2016954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2016958:	e0bfff17 	ldw	r2,-4(fp)
 201695c:	00c01cc4 	movi	r3,115
 2016960:	10c00005 	stb	r3,0(r2)
        return;
 2016964:	00000e06 	br	20169a0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2016968:	e0bffd17 	ldw	r2,-12(fp)
 201696c:	10800284 	addi	r2,r2,10
 2016970:	e17ffe17 	ldw	r5,-8(fp)
 2016974:	1009883a 	mov	r4,r2
 2016978:	20159c80 	call	20159c8 <OS_StrCopy>
 201697c:	e0bff717 	ldw	r2,-36(fp)
 2016980:	e0bffb15 	stw	r2,-20(fp)
 2016984:	e0bffb17 	ldw	r2,-20(fp)
 2016988:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201698c:	e0bfff17 	ldw	r2,-4(fp)
 2016990:	10000005 	stb	zero,0(r2)
    return;
 2016994:	0001883a 	nop
 2016998:	00000106 	br	20169a0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201699c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 20169a0:	e037883a 	mov	sp,fp
 20169a4:	dfc00117 	ldw	ra,4(sp)
 20169a8:	df000017 	ldw	fp,0(sp)
 20169ac:	dec00204 	addi	sp,sp,8
 20169b0:	f800283a 	ret

020169b4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 20169b4:	deffe104 	addi	sp,sp,-124
 20169b8:	dfc01e15 	stw	ra,120(sp)
 20169bc:	df001d15 	stw	fp,116(sp)
 20169c0:	df001d04 	addi	fp,sp,116
 20169c4:	e13ffc15 	stw	r4,-16(fp)
 20169c8:	2809883a 	mov	r4,r5
 20169cc:	3007883a 	mov	r3,r6
 20169d0:	3805883a 	mov	r2,r7
 20169d4:	e13ffd0d 	sth	r4,-12(fp)
 20169d8:	e0fffe05 	stb	r3,-8(fp)
 20169dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20169e0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20169e4:	e0800217 	ldw	r2,8(fp)
 20169e8:	1000021e 	bne	r2,zero,20169f4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 20169ec:	0005883a 	mov	r2,zero
 20169f0:	00015906 	br	2016f58 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20169f4:	e0bffc17 	ldw	r2,-16(fp)
 20169f8:	1000051e 	bne	r2,zero,2016a10 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20169fc:	e0800217 	ldw	r2,8(fp)
 2016a00:	00c01b84 	movi	r3,110
 2016a04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016a08:	0005883a 	mov	r2,zero
 2016a0c:	00015206 	br	2016f58 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016a10:	d0a74503 	ldbu	r2,-25324(gp)
 2016a14:	10803fcc 	andi	r2,r2,255
 2016a18:	10000526 	beq	r2,zero,2016a30 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2016a1c:	e0800217 	ldw	r2,8(fp)
 2016a20:	00c00084 	movi	r3,2
 2016a24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016a28:	0005883a 	mov	r2,zero
 2016a2c:	00014a06 	br	2016f58 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2016a30:	d0a73703 	ldbu	r2,-25380(gp)
 2016a34:	10803fcc 	andi	r2,r2,255
 2016a38:	10000526 	beq	r2,zero,2016a50 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2016a3c:	e0800217 	ldw	r2,8(fp)
 2016a40:	00c00344 	movi	r3,13
 2016a44:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016a48:	0005883a 	mov	r2,zero
 2016a4c:	00014206 	br	2016f58 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2016a50:	e0bffc17 	ldw	r2,-16(fp)
 2016a54:	10800003 	ldbu	r2,0(r2)
 2016a58:	10803fcc 	andi	r2,r2,255
 2016a5c:	10800160 	cmpeqi	r2,r2,5
 2016a60:	1000051e 	bne	r2,zero,2016a78 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2016a64:	e0800217 	ldw	r2,8(fp)
 2016a68:	00c00044 	movi	r3,1
 2016a6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016a70:	0005883a 	mov	r2,zero
 2016a74:	00013806 	br	2016f58 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2016a78:	e0fffe03 	ldbu	r3,-8(fp)
 2016a7c:	00bfe004 	movi	r2,-128
 2016a80:	1884703a 	and	r2,r3,r2
 2016a84:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2016a88:	e0bfe603 	ldbu	r2,-104(fp)
 2016a8c:	10000626 	beq	r2,zero,2016aa8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2016a90:	e0bffe03 	ldbu	r2,-8(fp)
 2016a94:	10801fcc 	andi	r2,r2,127
 2016a98:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2016a9c:	00800044 	movi	r2,1
 2016aa0:	e0bfe405 	stb	r2,-112(fp)
 2016aa4:	00000106 	br	2016aac <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2016aa8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016aac:	0005303a 	rdctl	r2,status
 2016ab0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ab4:	e0fff617 	ldw	r3,-40(fp)
 2016ab8:	00bfff84 	movi	r2,-2
 2016abc:	1884703a 	and	r2,r3,r2
 2016ac0:	1001703a 	wrctl	status,r2
  
  return context;
 2016ac4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016ac8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2016acc:	e0bffe03 	ldbu	r2,-8(fp)
 2016ad0:	10c00060 	cmpeqi	r3,r2,1
 2016ad4:	1800921e 	bne	r3,zero,2016d20 <OSFlagPend+0x36c>
 2016ad8:	10c00088 	cmpgei	r3,r2,2
 2016adc:	1800021e 	bne	r3,zero,2016ae8 <OSFlagPend+0x134>
 2016ae0:	10006126 	beq	r2,zero,2016c68 <OSFlagPend+0x2b4>
 2016ae4:	0000bb06 	br	2016dd4 <OSFlagPend+0x420>
 2016ae8:	10c000a0 	cmpeqi	r3,r2,2
 2016aec:	1800031e 	bne	r3,zero,2016afc <OSFlagPend+0x148>
 2016af0:	108000e0 	cmpeqi	r2,r2,3
 2016af4:	10002f1e 	bne	r2,zero,2016bb4 <OSFlagPend+0x200>
 2016af8:	0000b606 	br	2016dd4 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2016afc:	e0bffc17 	ldw	r2,-16(fp)
 2016b00:	10c0020b 	ldhu	r3,8(r2)
 2016b04:	e0bffd0b 	ldhu	r2,-12(fp)
 2016b08:	1884703a 	and	r2,r3,r2
 2016b0c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016b10:	e0ffe80b 	ldhu	r3,-96(fp)
 2016b14:	e0bffd0b 	ldhu	r2,-12(fp)
 2016b18:	1880171e 	bne	r3,r2,2016b78 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016b1c:	e0bfe403 	ldbu	r2,-112(fp)
 2016b20:	10800058 	cmpnei	r2,r2,1
 2016b24:	1000091e 	bne	r2,zero,2016b4c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2016b28:	e0bffc17 	ldw	r2,-16(fp)
 2016b2c:	1080020b 	ldhu	r2,8(r2)
 2016b30:	1007883a 	mov	r3,r2
 2016b34:	e0bfe80b 	ldhu	r2,-96(fp)
 2016b38:	0084303a 	nor	r2,zero,r2
 2016b3c:	1884703a 	and	r2,r3,r2
 2016b40:	1007883a 	mov	r3,r2
 2016b44:	e0bffc17 	ldw	r2,-16(fp)
 2016b48:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016b4c:	d0a74617 	ldw	r2,-25320(gp)
 2016b50:	e0ffe80b 	ldhu	r3,-96(fp)
 2016b54:	10c00b0d 	sth	r3,44(r2)
 2016b58:	e0bfe517 	ldw	r2,-108(fp)
 2016b5c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b60:	e0bfe717 	ldw	r2,-100(fp)
 2016b64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016b68:	e0800217 	ldw	r2,8(fp)
 2016b6c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016b70:	e0bfe80b 	ldhu	r2,-96(fp)
 2016b74:	0000f806 	br	2016f58 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016b78:	e13ffd0b 	ldhu	r4,-12(fp)
 2016b7c:	e17ffe03 	ldbu	r5,-8(fp)
 2016b80:	e0bfff0b 	ldhu	r2,-4(fp)
 2016b84:	e0fff704 	addi	r3,fp,-36
 2016b88:	d8800015 	stw	r2,0(sp)
 2016b8c:	280f883a 	mov	r7,r5
 2016b90:	200d883a 	mov	r6,r4
 2016b94:	180b883a 	mov	r5,r3
 2016b98:	e13ffc17 	ldw	r4,-16(fp)
 2016b9c:	20174240 	call	2017424 <OS_FlagBlock>
 2016ba0:	e0bfe517 	ldw	r2,-108(fp)
 2016ba4:	e0bfe915 	stw	r2,-92(fp)
 2016ba8:	e0bfe917 	ldw	r2,-92(fp)
 2016bac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016bb0:	00009206 	br	2016dfc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2016bb4:	e0bffc17 	ldw	r2,-16(fp)
 2016bb8:	10c0020b 	ldhu	r3,8(r2)
 2016bbc:	e0bffd0b 	ldhu	r2,-12(fp)
 2016bc0:	1884703a 	and	r2,r3,r2
 2016bc4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2016bc8:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bcc:	10001726 	beq	r2,zero,2016c2c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016bd0:	e0bfe403 	ldbu	r2,-112(fp)
 2016bd4:	10800058 	cmpnei	r2,r2,1
 2016bd8:	1000091e 	bne	r2,zero,2016c00 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2016bdc:	e0bffc17 	ldw	r2,-16(fp)
 2016be0:	1080020b 	ldhu	r2,8(r2)
 2016be4:	1007883a 	mov	r3,r2
 2016be8:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bec:	0084303a 	nor	r2,zero,r2
 2016bf0:	1884703a 	and	r2,r3,r2
 2016bf4:	1007883a 	mov	r3,r2
 2016bf8:	e0bffc17 	ldw	r2,-16(fp)
 2016bfc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016c00:	d0a74617 	ldw	r2,-25320(gp)
 2016c04:	e0ffe80b 	ldhu	r3,-96(fp)
 2016c08:	10c00b0d 	sth	r3,44(r2)
 2016c0c:	e0bfe517 	ldw	r2,-108(fp)
 2016c10:	e0bfea15 	stw	r2,-88(fp)
 2016c14:	e0bfea17 	ldw	r2,-88(fp)
 2016c18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016c1c:	e0800217 	ldw	r2,8(fp)
 2016c20:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016c24:	e0bfe80b 	ldhu	r2,-96(fp)
 2016c28:	0000cb06 	br	2016f58 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016c2c:	e13ffd0b 	ldhu	r4,-12(fp)
 2016c30:	e17ffe03 	ldbu	r5,-8(fp)
 2016c34:	e0bfff0b 	ldhu	r2,-4(fp)
 2016c38:	e0fff704 	addi	r3,fp,-36
 2016c3c:	d8800015 	stw	r2,0(sp)
 2016c40:	280f883a 	mov	r7,r5
 2016c44:	200d883a 	mov	r6,r4
 2016c48:	180b883a 	mov	r5,r3
 2016c4c:	e13ffc17 	ldw	r4,-16(fp)
 2016c50:	20174240 	call	2017424 <OS_FlagBlock>
 2016c54:	e0bfe517 	ldw	r2,-108(fp)
 2016c58:	e0bfeb15 	stw	r2,-84(fp)
 2016c5c:	e0bfeb17 	ldw	r2,-84(fp)
 2016c60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016c64:	00006506 	br	2016dfc <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2016c68:	e0bffc17 	ldw	r2,-16(fp)
 2016c6c:	1080020b 	ldhu	r2,8(r2)
 2016c70:	0084303a 	nor	r2,zero,r2
 2016c74:	1007883a 	mov	r3,r2
 2016c78:	e0bffd0b 	ldhu	r2,-12(fp)
 2016c7c:	1884703a 	and	r2,r3,r2
 2016c80:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016c84:	e0ffe80b 	ldhu	r3,-96(fp)
 2016c88:	e0bffd0b 	ldhu	r2,-12(fp)
 2016c8c:	1880151e 	bne	r3,r2,2016ce4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016c90:	e0bfe403 	ldbu	r2,-112(fp)
 2016c94:	10800058 	cmpnei	r2,r2,1
 2016c98:	1000071e 	bne	r2,zero,2016cb8 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2016c9c:	e0bffc17 	ldw	r2,-16(fp)
 2016ca0:	10c0020b 	ldhu	r3,8(r2)
 2016ca4:	e0bfe80b 	ldhu	r2,-96(fp)
 2016ca8:	1884b03a 	or	r2,r3,r2
 2016cac:	1007883a 	mov	r3,r2
 2016cb0:	e0bffc17 	ldw	r2,-16(fp)
 2016cb4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016cb8:	d0a74617 	ldw	r2,-25320(gp)
 2016cbc:	e0ffe80b 	ldhu	r3,-96(fp)
 2016cc0:	10c00b0d 	sth	r3,44(r2)
 2016cc4:	e0bfe517 	ldw	r2,-108(fp)
 2016cc8:	e0bfec15 	stw	r2,-80(fp)
 2016ccc:	e0bfec17 	ldw	r2,-80(fp)
 2016cd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016cd4:	e0800217 	ldw	r2,8(fp)
 2016cd8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016cdc:	e0bfe80b 	ldhu	r2,-96(fp)
 2016ce0:	00009d06 	br	2016f58 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016ce4:	e13ffd0b 	ldhu	r4,-12(fp)
 2016ce8:	e17ffe03 	ldbu	r5,-8(fp)
 2016cec:	e0bfff0b 	ldhu	r2,-4(fp)
 2016cf0:	e0fff704 	addi	r3,fp,-36
 2016cf4:	d8800015 	stw	r2,0(sp)
 2016cf8:	280f883a 	mov	r7,r5
 2016cfc:	200d883a 	mov	r6,r4
 2016d00:	180b883a 	mov	r5,r3
 2016d04:	e13ffc17 	ldw	r4,-16(fp)
 2016d08:	20174240 	call	2017424 <OS_FlagBlock>
 2016d0c:	e0bfe517 	ldw	r2,-108(fp)
 2016d10:	e0bfed15 	stw	r2,-76(fp)
 2016d14:	e0bfed17 	ldw	r2,-76(fp)
 2016d18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016d1c:	00003706 	br	2016dfc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016d20:	e0bffc17 	ldw	r2,-16(fp)
 2016d24:	1080020b 	ldhu	r2,8(r2)
 2016d28:	0084303a 	nor	r2,zero,r2
 2016d2c:	1007883a 	mov	r3,r2
 2016d30:	e0bffd0b 	ldhu	r2,-12(fp)
 2016d34:	1884703a 	and	r2,r3,r2
 2016d38:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016d3c:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d40:	10001526 	beq	r2,zero,2016d98 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016d44:	e0bfe403 	ldbu	r2,-112(fp)
 2016d48:	10800058 	cmpnei	r2,r2,1
 2016d4c:	1000071e 	bne	r2,zero,2016d6c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016d50:	e0bffc17 	ldw	r2,-16(fp)
 2016d54:	10c0020b 	ldhu	r3,8(r2)
 2016d58:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d5c:	1884b03a 	or	r2,r3,r2
 2016d60:	1007883a 	mov	r3,r2
 2016d64:	e0bffc17 	ldw	r2,-16(fp)
 2016d68:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016d6c:	d0a74617 	ldw	r2,-25320(gp)
 2016d70:	e0ffe80b 	ldhu	r3,-96(fp)
 2016d74:	10c00b0d 	sth	r3,44(r2)
 2016d78:	e0bfe517 	ldw	r2,-108(fp)
 2016d7c:	e0bfee15 	stw	r2,-72(fp)
 2016d80:	e0bfee17 	ldw	r2,-72(fp)
 2016d84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016d88:	e0800217 	ldw	r2,8(fp)
 2016d8c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016d90:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d94:	00007006 	br	2016f58 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016d98:	e13ffd0b 	ldhu	r4,-12(fp)
 2016d9c:	e17ffe03 	ldbu	r5,-8(fp)
 2016da0:	e0bfff0b 	ldhu	r2,-4(fp)
 2016da4:	e0fff704 	addi	r3,fp,-36
 2016da8:	d8800015 	stw	r2,0(sp)
 2016dac:	280f883a 	mov	r7,r5
 2016db0:	200d883a 	mov	r6,r4
 2016db4:	180b883a 	mov	r5,r3
 2016db8:	e13ffc17 	ldw	r4,-16(fp)
 2016dbc:	20174240 	call	2017424 <OS_FlagBlock>
 2016dc0:	e0bfe517 	ldw	r2,-108(fp)
 2016dc4:	e0bfef15 	stw	r2,-68(fp)
 2016dc8:	e0bfef17 	ldw	r2,-68(fp)
 2016dcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016dd0:	00000a06 	br	2016dfc <OSFlagPend+0x448>
 2016dd4:	e0bfe517 	ldw	r2,-108(fp)
 2016dd8:	e0bff015 	stw	r2,-64(fp)
 2016ddc:	e0bff017 	ldw	r2,-64(fp)
 2016de0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2016de4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2016de8:	e0800217 	ldw	r2,8(fp)
 2016dec:	00c01bc4 	movi	r3,111
 2016df0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2016df4:	e0bfe80b 	ldhu	r2,-96(fp)
 2016df8:	00005706 	br	2016f58 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2016dfc:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016e00:	0005303a 	rdctl	r2,status
 2016e04:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016e08:	e0fff117 	ldw	r3,-60(fp)
 2016e0c:	00bfff84 	movi	r2,-2
 2016e10:	1884703a 	and	r2,r3,r2
 2016e14:	1001703a 	wrctl	status,r2
  
  return context;
 2016e18:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2016e1c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2016e20:	d0a74617 	ldw	r2,-25320(gp)
 2016e24:	10800c43 	ldbu	r2,49(r2)
 2016e28:	10803fcc 	andi	r2,r2,255
 2016e2c:	10001c26 	beq	r2,zero,2016ea0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2016e30:	d0a74617 	ldw	r2,-25320(gp)
 2016e34:	10800c43 	ldbu	r2,49(r2)
 2016e38:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2016e3c:	d0a74617 	ldw	r2,-25320(gp)
 2016e40:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2016e44:	e0bff704 	addi	r2,fp,-36
 2016e48:	1009883a 	mov	r4,r2
 2016e4c:	20177580 	call	2017758 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2016e50:	d0a74617 	ldw	r2,-25320(gp)
 2016e54:	10000c05 	stb	zero,48(r2)
 2016e58:	e0bfe517 	ldw	r2,-108(fp)
 2016e5c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016e60:	e0bff217 	ldw	r2,-56(fp)
 2016e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2016e68:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2016e6c:	e0bff303 	ldbu	r2,-52(fp)
 2016e70:	108000a0 	cmpeqi	r2,r2,2
 2016e74:	10000426 	beq	r2,zero,2016e88 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2016e78:	e0800217 	ldw	r2,8(fp)
 2016e7c:	00c00384 	movi	r3,14
 2016e80:	10c00005 	stb	r3,0(r2)
                 break;
 2016e84:	00000406 	br	2016e98 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2016e88:	e0800217 	ldw	r2,8(fp)
 2016e8c:	00c00284 	movi	r3,10
 2016e90:	10c00005 	stb	r3,0(r2)
                 break;
 2016e94:	0001883a 	nop
        }
        return (flags_rdy);
 2016e98:	e0bfe80b 	ldhu	r2,-96(fp)
 2016e9c:	00002e06 	br	2016f58 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2016ea0:	d0a74617 	ldw	r2,-25320(gp)
 2016ea4:	10800b0b 	ldhu	r2,44(r2)
 2016ea8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2016eac:	e0bfe403 	ldbu	r2,-112(fp)
 2016eb0:	10800058 	cmpnei	r2,r2,1
 2016eb4:	1000211e 	bne	r2,zero,2016f3c <OSFlagPend+0x588>
        switch (wait_type) {
 2016eb8:	e0bffe03 	ldbu	r2,-8(fp)
 2016ebc:	10001616 	blt	r2,zero,2016f18 <OSFlagPend+0x564>
 2016ec0:	10c00090 	cmplti	r3,r2,2
 2016ec4:	18000c1e 	bne	r3,zero,2016ef8 <OSFlagPend+0x544>
 2016ec8:	10800108 	cmpgei	r2,r2,4
 2016ecc:	1000121e 	bne	r2,zero,2016f18 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2016ed0:	e0bffc17 	ldw	r2,-16(fp)
 2016ed4:	1080020b 	ldhu	r2,8(r2)
 2016ed8:	1007883a 	mov	r3,r2
 2016edc:	e0bfe80b 	ldhu	r2,-96(fp)
 2016ee0:	0084303a 	nor	r2,zero,r2
 2016ee4:	1884703a 	and	r2,r3,r2
 2016ee8:	1007883a 	mov	r3,r2
 2016eec:	e0bffc17 	ldw	r2,-16(fp)
 2016ef0:	10c0020d 	sth	r3,8(r2)
                 break;
 2016ef4:	00001106 	br	2016f3c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2016ef8:	e0bffc17 	ldw	r2,-16(fp)
 2016efc:	10c0020b 	ldhu	r3,8(r2)
 2016f00:	e0bfe80b 	ldhu	r2,-96(fp)
 2016f04:	1884b03a 	or	r2,r3,r2
 2016f08:	1007883a 	mov	r3,r2
 2016f0c:	e0bffc17 	ldw	r2,-16(fp)
 2016f10:	10c0020d 	sth	r3,8(r2)
                 break;
 2016f14:	00000906 	br	2016f3c <OSFlagPend+0x588>
 2016f18:	e0bfe517 	ldw	r2,-108(fp)
 2016f1c:	e0bff415 	stw	r2,-48(fp)
 2016f20:	e0bff417 	ldw	r2,-48(fp)
 2016f24:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2016f28:	e0800217 	ldw	r2,8(fp)
 2016f2c:	00c01bc4 	movi	r3,111
 2016f30:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2016f34:	0005883a 	mov	r2,zero
 2016f38:	00000706 	br	2016f58 <OSFlagPend+0x5a4>
 2016f3c:	e0bfe517 	ldw	r2,-108(fp)
 2016f40:	e0bff515 	stw	r2,-44(fp)
 2016f44:	e0bff517 	ldw	r2,-44(fp)
 2016f48:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2016f4c:	e0800217 	ldw	r2,8(fp)
 2016f50:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2016f54:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2016f58:	e037883a 	mov	sp,fp
 2016f5c:	dfc00117 	ldw	ra,4(sp)
 2016f60:	df000017 	ldw	fp,0(sp)
 2016f64:	dec00204 	addi	sp,sp,8
 2016f68:	f800283a 	ret

02016f6c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2016f6c:	defffb04 	addi	sp,sp,-20
 2016f70:	df000415 	stw	fp,16(sp)
 2016f74:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016f78:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016f7c:	0005303a 	rdctl	r2,status
 2016f80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016f84:	e0fffe17 	ldw	r3,-8(fp)
 2016f88:	00bfff84 	movi	r2,-2
 2016f8c:	1884703a 	and	r2,r3,r2
 2016f90:	1001703a 	wrctl	status,r2
  
  return context;
 2016f94:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2016f98:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2016f9c:	d0a74617 	ldw	r2,-25320(gp)
 2016fa0:	10800b0b 	ldhu	r2,44(r2)
 2016fa4:	e0bffd0d 	sth	r2,-12(fp)
 2016fa8:	e0bffc17 	ldw	r2,-16(fp)
 2016fac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016fb0:	e0bfff17 	ldw	r2,-4(fp)
 2016fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2016fb8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2016fbc:	e037883a 	mov	sp,fp
 2016fc0:	df000017 	ldw	fp,0(sp)
 2016fc4:	dec00104 	addi	sp,sp,4
 2016fc8:	f800283a 	ret

02016fcc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2016fcc:	deffef04 	addi	sp,sp,-68
 2016fd0:	dfc01015 	stw	ra,64(sp)
 2016fd4:	df000f15 	stw	fp,60(sp)
 2016fd8:	df000f04 	addi	fp,sp,60
 2016fdc:	e13ffc15 	stw	r4,-16(fp)
 2016fe0:	2807883a 	mov	r3,r5
 2016fe4:	3005883a 	mov	r2,r6
 2016fe8:	e1ffff15 	stw	r7,-4(fp)
 2016fec:	e0fffd0d 	sth	r3,-12(fp)
 2016ff0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2016ff4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2016ff8:	e0bfff17 	ldw	r2,-4(fp)
 2016ffc:	1000021e 	bne	r2,zero,2017008 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2017000:	0005883a 	mov	r2,zero
 2017004:	0000d106 	br	201734c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2017008:	e0bffc17 	ldw	r2,-16(fp)
 201700c:	1000051e 	bne	r2,zero,2017024 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017010:	e0bfff17 	ldw	r2,-4(fp)
 2017014:	00c01b84 	movi	r3,110
 2017018:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201701c:	0005883a 	mov	r2,zero
 2017020:	0000ca06 	br	201734c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2017024:	e0bffc17 	ldw	r2,-16(fp)
 2017028:	10800003 	ldbu	r2,0(r2)
 201702c:	10803fcc 	andi	r2,r2,255
 2017030:	10800160 	cmpeqi	r2,r2,5
 2017034:	1000051e 	bne	r2,zero,201704c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2017038:	e0bfff17 	ldw	r2,-4(fp)
 201703c:	00c00044 	movi	r3,1
 2017040:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2017044:	0005883a 	mov	r2,zero
 2017048:	0000c006 	br	201734c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201704c:	0005303a 	rdctl	r2,status
 2017050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017054:	e0fffb17 	ldw	r3,-20(fp)
 2017058:	00bfff84 	movi	r2,-2
 201705c:	1884703a 	and	r2,r3,r2
 2017060:	1001703a 	wrctl	status,r2
  
  return context;
 2017064:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2017068:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 201706c:	e0bffe03 	ldbu	r2,-8(fp)
 2017070:	10000326 	beq	r2,zero,2017080 <OSFlagPost+0xb4>
 2017074:	10800060 	cmpeqi	r2,r2,1
 2017078:	10000b1e 	bne	r2,zero,20170a8 <OSFlagPost+0xdc>
 201707c:	00001206 	br	20170c8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2017080:	e0bffc17 	ldw	r2,-16(fp)
 2017084:	1080020b 	ldhu	r2,8(r2)
 2017088:	1007883a 	mov	r3,r2
 201708c:	e0bffd0b 	ldhu	r2,-12(fp)
 2017090:	0084303a 	nor	r2,zero,r2
 2017094:	1884703a 	and	r2,r3,r2
 2017098:	1007883a 	mov	r3,r2
 201709c:	e0bffc17 	ldw	r2,-16(fp)
 20170a0:	10c0020d 	sth	r3,8(r2)
             break;
 20170a4:	00001106 	br	20170ec <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 20170a8:	e0bffc17 	ldw	r2,-16(fp)
 20170ac:	10c0020b 	ldhu	r3,8(r2)
 20170b0:	e0bffd0b 	ldhu	r2,-12(fp)
 20170b4:	1884b03a 	or	r2,r3,r2
 20170b8:	1007883a 	mov	r3,r2
 20170bc:	e0bffc17 	ldw	r2,-16(fp)
 20170c0:	10c0020d 	sth	r3,8(r2)
             break;
 20170c4:	00000906 	br	20170ec <OSFlagPost+0x120>
 20170c8:	e0bff317 	ldw	r2,-52(fp)
 20170cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20170d0:	e0bff417 	ldw	r2,-48(fp)
 20170d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 20170d8:	e0bfff17 	ldw	r2,-4(fp)
 20170dc:	00c01c44 	movi	r3,113
 20170e0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 20170e4:	0005883a 	mov	r2,zero
 20170e8:	00009806 	br	201734c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 20170ec:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20170f0:	e0bffc17 	ldw	r2,-16(fp)
 20170f4:	10800117 	ldw	r2,4(r2)
 20170f8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20170fc:	00007706 	br	20172dc <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2017100:	e0bff117 	ldw	r2,-60(fp)
 2017104:	10800483 	ldbu	r2,18(r2)
 2017108:	10803fcc 	andi	r2,r2,255
 201710c:	10c00060 	cmpeqi	r3,r2,1
 2017110:	18004a1e 	bne	r3,zero,201723c <OSFlagPost+0x270>
 2017114:	10c00088 	cmpgei	r3,r2,2
 2017118:	1800021e 	bne	r3,zero,2017124 <OSFlagPost+0x158>
 201711c:	10002f26 	beq	r2,zero,20171dc <OSFlagPost+0x210>
 2017120:	00005b06 	br	2017290 <OSFlagPost+0x2c4>
 2017124:	10c000a0 	cmpeqi	r3,r2,2
 2017128:	1800031e 	bne	r3,zero,2017138 <OSFlagPost+0x16c>
 201712c:	108000e0 	cmpeqi	r2,r2,3
 2017130:	1000171e 	bne	r2,zero,2017190 <OSFlagPost+0x1c4>
 2017134:	00005606 	br	2017290 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017138:	e0bffc17 	ldw	r2,-16(fp)
 201713c:	10c0020b 	ldhu	r3,8(r2)
 2017140:	e0bff117 	ldw	r2,-60(fp)
 2017144:	1080040b 	ldhu	r2,16(r2)
 2017148:	1884703a 	and	r2,r3,r2
 201714c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2017150:	e0bff117 	ldw	r2,-60(fp)
 2017154:	1080040b 	ldhu	r2,16(r2)
 2017158:	10ffffcc 	andi	r3,r2,65535
 201715c:	e0bff60b 	ldhu	r2,-40(fp)
 2017160:	1880541e 	bne	r3,r2,20172b4 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017164:	e0bff60b 	ldhu	r2,-40(fp)
 2017168:	100b883a 	mov	r5,r2
 201716c:	e13ff117 	ldw	r4,-60(fp)
 2017170:	20176640 	call	2017664 <OS_FlagTaskRdy>
 2017174:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2017178:	e0bff683 	ldbu	r2,-38(fp)
 201717c:	10800058 	cmpnei	r2,r2,1
 2017180:	10004c1e 	bne	r2,zero,20172b4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017184:	00800044 	movi	r2,1
 2017188:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201718c:	00004906 	br	20172b4 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017190:	e0bffc17 	ldw	r2,-16(fp)
 2017194:	10c0020b 	ldhu	r3,8(r2)
 2017198:	e0bff117 	ldw	r2,-60(fp)
 201719c:	1080040b 	ldhu	r2,16(r2)
 20171a0:	1884703a 	and	r2,r3,r2
 20171a4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 20171a8:	e0bff60b 	ldhu	r2,-40(fp)
 20171ac:	10004326 	beq	r2,zero,20172bc <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20171b0:	e0bff60b 	ldhu	r2,-40(fp)
 20171b4:	100b883a 	mov	r5,r2
 20171b8:	e13ff117 	ldw	r4,-60(fp)
 20171bc:	20176640 	call	2017664 <OS_FlagTaskRdy>
 20171c0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20171c4:	e0bff683 	ldbu	r2,-38(fp)
 20171c8:	10800058 	cmpnei	r2,r2,1
 20171cc:	10003b1e 	bne	r2,zero,20172bc <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20171d0:	00800044 	movi	r2,1
 20171d4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20171d8:	00003806 	br	20172bc <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20171dc:	e0bffc17 	ldw	r2,-16(fp)
 20171e0:	1080020b 	ldhu	r2,8(r2)
 20171e4:	0084303a 	nor	r2,zero,r2
 20171e8:	1007883a 	mov	r3,r2
 20171ec:	e0bff117 	ldw	r2,-60(fp)
 20171f0:	1080040b 	ldhu	r2,16(r2)
 20171f4:	1884703a 	and	r2,r3,r2
 20171f8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20171fc:	e0bff117 	ldw	r2,-60(fp)
 2017200:	1080040b 	ldhu	r2,16(r2)
 2017204:	10ffffcc 	andi	r3,r2,65535
 2017208:	e0bff60b 	ldhu	r2,-40(fp)
 201720c:	18802d1e 	bne	r3,r2,20172c4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017210:	e0bff60b 	ldhu	r2,-40(fp)
 2017214:	100b883a 	mov	r5,r2
 2017218:	e13ff117 	ldw	r4,-60(fp)
 201721c:	20176640 	call	2017664 <OS_FlagTaskRdy>
 2017220:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2017224:	e0bff683 	ldbu	r2,-38(fp)
 2017228:	10800058 	cmpnei	r2,r2,1
 201722c:	1000251e 	bne	r2,zero,20172c4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017230:	00800044 	movi	r2,1
 2017234:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2017238:	00002206 	br	20172c4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201723c:	e0bffc17 	ldw	r2,-16(fp)
 2017240:	1080020b 	ldhu	r2,8(r2)
 2017244:	0084303a 	nor	r2,zero,r2
 2017248:	1007883a 	mov	r3,r2
 201724c:	e0bff117 	ldw	r2,-60(fp)
 2017250:	1080040b 	ldhu	r2,16(r2)
 2017254:	1884703a 	and	r2,r3,r2
 2017258:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201725c:	e0bff60b 	ldhu	r2,-40(fp)
 2017260:	10001a26 	beq	r2,zero,20172cc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017264:	e0bff60b 	ldhu	r2,-40(fp)
 2017268:	100b883a 	mov	r5,r2
 201726c:	e13ff117 	ldw	r4,-60(fp)
 2017270:	20176640 	call	2017664 <OS_FlagTaskRdy>
 2017274:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2017278:	e0bff683 	ldbu	r2,-38(fp)
 201727c:	10800058 	cmpnei	r2,r2,1
 2017280:	1000121e 	bne	r2,zero,20172cc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017284:	00800044 	movi	r2,1
 2017288:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201728c:	00000f06 	br	20172cc <OSFlagPost+0x300>
 2017290:	e0bff317 	ldw	r2,-52(fp)
 2017294:	e0bff515 	stw	r2,-44(fp)
 2017298:	e0bff517 	ldw	r2,-44(fp)
 201729c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 20172a0:	e0bfff17 	ldw	r2,-4(fp)
 20172a4:	00c01bc4 	movi	r3,111
 20172a8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 20172ac:	0005883a 	mov	r2,zero
 20172b0:	00002606 	br	201734c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20172b4:	0001883a 	nop
 20172b8:	00000506 	br	20172d0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20172bc:	0001883a 	nop
 20172c0:	00000306 	br	20172d0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20172c4:	0001883a 	nop
 20172c8:	00000106 	br	20172d0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20172cc:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 20172d0:	e0bff117 	ldw	r2,-60(fp)
 20172d4:	10800017 	ldw	r2,0(r2)
 20172d8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20172dc:	e0bff117 	ldw	r2,-60(fp)
 20172e0:	103f871e 	bne	r2,zero,2017100 <OSFlagPost+0x134>
 20172e4:	e0bff317 	ldw	r2,-52(fp)
 20172e8:	e0bff715 	stw	r2,-36(fp)
 20172ec:	e0bff717 	ldw	r2,-36(fp)
 20172f0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 20172f4:	e0bff203 	ldbu	r2,-56(fp)
 20172f8:	10800058 	cmpnei	r2,r2,1
 20172fc:	1000011e 	bne	r2,zero,2017304 <OSFlagPost+0x338>
        OS_Sched();
 2017300:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017304:	0005303a 	rdctl	r2,status
 2017308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201730c:	e0fffa17 	ldw	r3,-24(fp)
 2017310:	00bfff84 	movi	r2,-2
 2017314:	1884703a 	and	r2,r3,r2
 2017318:	1001703a 	wrctl	status,r2
  
  return context;
 201731c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2017320:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2017324:	e0bffc17 	ldw	r2,-16(fp)
 2017328:	1080020b 	ldhu	r2,8(r2)
 201732c:	e0bff90d 	sth	r2,-28(fp)
 2017330:	e0bff317 	ldw	r2,-52(fp)
 2017334:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017338:	e0bff817 	ldw	r2,-32(fp)
 201733c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2017340:	e0bfff17 	ldw	r2,-4(fp)
 2017344:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2017348:	e0bff90b 	ldhu	r2,-28(fp)
}
 201734c:	e037883a 	mov	sp,fp
 2017350:	dfc00117 	ldw	ra,4(sp)
 2017354:	df000017 	ldw	fp,0(sp)
 2017358:	dec00204 	addi	sp,sp,8
 201735c:	f800283a 	ret

02017360 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2017360:	defff904 	addi	sp,sp,-28
 2017364:	df000615 	stw	fp,24(sp)
 2017368:	df000604 	addi	fp,sp,24
 201736c:	e13ffe15 	stw	r4,-8(fp)
 2017370:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2017374:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2017378:	e0bfff17 	ldw	r2,-4(fp)
 201737c:	1000021e 	bne	r2,zero,2017388 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2017380:	0005883a 	mov	r2,zero
 2017384:	00002306 	br	2017414 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2017388:	e0bffe17 	ldw	r2,-8(fp)
 201738c:	1000051e 	bne	r2,zero,20173a4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017390:	e0bfff17 	ldw	r2,-4(fp)
 2017394:	00c01b84 	movi	r3,110
 2017398:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201739c:	0005883a 	mov	r2,zero
 20173a0:	00001c06 	br	2017414 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 20173a4:	e0bffe17 	ldw	r2,-8(fp)
 20173a8:	10800003 	ldbu	r2,0(r2)
 20173ac:	10803fcc 	andi	r2,r2,255
 20173b0:	10800160 	cmpeqi	r2,r2,5
 20173b4:	1000051e 	bne	r2,zero,20173cc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20173b8:	e0bfff17 	ldw	r2,-4(fp)
 20173bc:	00c00044 	movi	r3,1
 20173c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20173c4:	0005883a 	mov	r2,zero
 20173c8:	00001206 	br	2017414 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173cc:	0005303a 	rdctl	r2,status
 20173d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173d4:	e0fffc17 	ldw	r3,-16(fp)
 20173d8:	00bfff84 	movi	r2,-2
 20173dc:	1884703a 	and	r2,r3,r2
 20173e0:	1001703a 	wrctl	status,r2
  
  return context;
 20173e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20173e8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 20173ec:	e0bffe17 	ldw	r2,-8(fp)
 20173f0:	1080020b 	ldhu	r2,8(r2)
 20173f4:	e0bffb0d 	sth	r2,-20(fp)
 20173f8:	e0bffa17 	ldw	r2,-24(fp)
 20173fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017400:	e0bffd17 	ldw	r2,-12(fp)
 2017404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017408:	e0bfff17 	ldw	r2,-4(fp)
 201740c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2017410:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2017414:	e037883a 	mov	sp,fp
 2017418:	df000017 	ldw	fp,0(sp)
 201741c:	dec00104 	addi	sp,sp,4
 2017420:	f800283a 	ret

02017424 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2017424:	defff804 	addi	sp,sp,-32
 2017428:	df000715 	stw	fp,28(sp)
 201742c:	df000704 	addi	fp,sp,28
 2017430:	e13ffb15 	stw	r4,-20(fp)
 2017434:	e17ffc15 	stw	r5,-16(fp)
 2017438:	3009883a 	mov	r4,r6
 201743c:	3807883a 	mov	r3,r7
 2017440:	e0800117 	ldw	r2,4(fp)
 2017444:	e13ffd0d 	sth	r4,-12(fp)
 2017448:	e0fffe05 	stb	r3,-8(fp)
 201744c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2017450:	d0a74617 	ldw	r2,-25320(gp)
 2017454:	d0e74617 	ldw	r3,-25320(gp)
 2017458:	18c00c03 	ldbu	r3,48(r3)
 201745c:	18c00814 	ori	r3,r3,32
 2017460:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2017464:	d0a74617 	ldw	r2,-25320(gp)
 2017468:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201746c:	d0a74617 	ldw	r2,-25320(gp)
 2017470:	e0ffff0b 	ldhu	r3,-4(fp)
 2017474:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2017478:	d0a74617 	ldw	r2,-25320(gp)
 201747c:	e0fffc17 	ldw	r3,-16(fp)
 2017480:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2017484:	e0bffc17 	ldw	r2,-16(fp)
 2017488:	e0fffd0b 	ldhu	r3,-12(fp)
 201748c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2017490:	e0bffc17 	ldw	r2,-16(fp)
 2017494:	e0fffe03 	ldbu	r3,-8(fp)
 2017498:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201749c:	d0e74617 	ldw	r3,-25320(gp)
 20174a0:	e0bffc17 	ldw	r2,-16(fp)
 20174a4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 20174a8:	e0bffb17 	ldw	r2,-20(fp)
 20174ac:	10c00117 	ldw	r3,4(r2)
 20174b0:	e0bffc17 	ldw	r2,-16(fp)
 20174b4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 20174b8:	e0bffc17 	ldw	r2,-16(fp)
 20174bc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 20174c0:	e0bffc17 	ldw	r2,-16(fp)
 20174c4:	e0fffb17 	ldw	r3,-20(fp)
 20174c8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20174cc:	e0bffb17 	ldw	r2,-20(fp)
 20174d0:	10800117 	ldw	r2,4(r2)
 20174d4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20174d8:	e0bff917 	ldw	r2,-28(fp)
 20174dc:	10000326 	beq	r2,zero,20174ec <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20174e0:	e0bff917 	ldw	r2,-28(fp)
 20174e4:	e0fffc17 	ldw	r3,-16(fp)
 20174e8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20174ec:	e0bffb17 	ldw	r2,-20(fp)
 20174f0:	e0fffc17 	ldw	r3,-16(fp)
 20174f4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 20174f8:	d0a74617 	ldw	r2,-25320(gp)
 20174fc:	10800d03 	ldbu	r2,52(r2)
 2017500:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2017504:	e0fffa03 	ldbu	r3,-24(fp)
 2017508:	e13ffa03 	ldbu	r4,-24(fp)
 201750c:	d0a74344 	addi	r2,gp,-25331
 2017510:	2085883a 	add	r2,r4,r2
 2017514:	10800003 	ldbu	r2,0(r2)
 2017518:	1009883a 	mov	r4,r2
 201751c:	d0a74617 	ldw	r2,-25320(gp)
 2017520:	10800d43 	ldbu	r2,53(r2)
 2017524:	0084303a 	nor	r2,zero,r2
 2017528:	2084703a 	and	r2,r4,r2
 201752c:	1009883a 	mov	r4,r2
 2017530:	d0a74344 	addi	r2,gp,-25331
 2017534:	1885883a 	add	r2,r3,r2
 2017538:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 201753c:	e0fffa03 	ldbu	r3,-24(fp)
 2017540:	d0a74344 	addi	r2,gp,-25331
 2017544:	1885883a 	add	r2,r3,r2
 2017548:	10800003 	ldbu	r2,0(r2)
 201754c:	10803fcc 	andi	r2,r2,255
 2017550:	1000071e 	bne	r2,zero,2017570 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2017554:	d0a74617 	ldw	r2,-25320(gp)
 2017558:	10800d83 	ldbu	r2,54(r2)
 201755c:	0084303a 	nor	r2,zero,r2
 2017560:	1007883a 	mov	r3,r2
 2017564:	d0a74303 	ldbu	r2,-25332(gp)
 2017568:	1884703a 	and	r2,r3,r2
 201756c:	d0a74305 	stb	r2,-25332(gp)
    }
}
 2017570:	0001883a 	nop
 2017574:	e037883a 	mov	sp,fp
 2017578:	df000017 	ldw	fp,0(sp)
 201757c:	dec00104 	addi	sp,sp,4
 2017580:	f800283a 	ret

02017584 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2017584:	defffb04 	addi	sp,sp,-20
 2017588:	dfc00415 	stw	ra,16(sp)
 201758c:	df000315 	stw	fp,12(sp)
 2017590:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2017594:	0140dc04 	movi	r5,880
 2017598:	010080f4 	movhi	r4,515
 201759c:	2129b604 	addi	r4,r4,-22824
 20175a0:	20157c80 	call	20157c8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 20175a4:	008080f4 	movhi	r2,515
 20175a8:	10a9b604 	addi	r2,r2,-22824
 20175ac:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20175b0:	008080f4 	movhi	r2,515
 20175b4:	10a9c104 	addi	r2,r2,-22780
 20175b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20175bc:	e03ffd0d 	sth	zero,-12(fp)
 20175c0:	00001306 	br	2017610 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20175c4:	e0bffe17 	ldw	r2,-8(fp)
 20175c8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 20175cc:	e0bffe17 	ldw	r2,-8(fp)
 20175d0:	e0ffff17 	ldw	r3,-4(fp)
 20175d4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 20175d8:	e0bffe17 	ldw	r2,-8(fp)
 20175dc:	00c00fc4 	movi	r3,63
 20175e0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20175e4:	e0bffe17 	ldw	r2,-8(fp)
 20175e8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 20175ec:	e0bffe17 	ldw	r2,-8(fp)
 20175f0:	10800b04 	addi	r2,r2,44
 20175f4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 20175f8:	e0bfff17 	ldw	r2,-4(fp)
 20175fc:	10800b04 	addi	r2,r2,44
 2017600:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2017604:	e0bffd0b 	ldhu	r2,-12(fp)
 2017608:	10800044 	addi	r2,r2,1
 201760c:	e0bffd0d 	sth	r2,-12(fp)
 2017610:	e0bffd0b 	ldhu	r2,-12(fp)
 2017614:	108004f0 	cmpltui	r2,r2,19
 2017618:	103fea1e 	bne	r2,zero,20175c4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201761c:	e0bffe17 	ldw	r2,-8(fp)
 2017620:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2017624:	e0bffe17 	ldw	r2,-8(fp)
 2017628:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201762c:	e0bffe17 	ldw	r2,-8(fp)
 2017630:	00c00fc4 	movi	r3,63
 2017634:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2017638:	e0bffe17 	ldw	r2,-8(fp)
 201763c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2017640:	008080f4 	movhi	r2,515
 2017644:	10a9b604 	addi	r2,r2,-22824
 2017648:	d0a74815 	stw	r2,-25312(gp)
#endif
}
 201764c:	0001883a 	nop
 2017650:	e037883a 	mov	sp,fp
 2017654:	dfc00117 	ldw	ra,4(sp)
 2017658:	df000017 	ldw	fp,0(sp)
 201765c:	dec00204 	addi	sp,sp,8
 2017660:	f800283a 	ret

02017664 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2017664:	defffa04 	addi	sp,sp,-24
 2017668:	dfc00515 	stw	ra,20(sp)
 201766c:	df000415 	stw	fp,16(sp)
 2017670:	df000404 	addi	fp,sp,16
 2017674:	e13ffe15 	stw	r4,-8(fp)
 2017678:	2805883a 	mov	r2,r5
 201767c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2017680:	e0bffe17 	ldw	r2,-8(fp)
 2017684:	10800217 	ldw	r2,8(r2)
 2017688:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201768c:	e0bffd17 	ldw	r2,-12(fp)
 2017690:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 2017694:	e0bffd17 	ldw	r2,-12(fp)
 2017698:	e0ffff0b 	ldhu	r3,-4(fp)
 201769c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 20176a0:	e0bffd17 	ldw	r2,-12(fp)
 20176a4:	10c00c03 	ldbu	r3,48(r2)
 20176a8:	00bff7c4 	movi	r2,-33
 20176ac:	1884703a 	and	r2,r3,r2
 20176b0:	1007883a 	mov	r3,r2
 20176b4:	e0bffd17 	ldw	r2,-12(fp)
 20176b8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 20176bc:	e0bffd17 	ldw	r2,-12(fp)
 20176c0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 20176c4:	e0bffd17 	ldw	r2,-12(fp)
 20176c8:	10800c03 	ldbu	r2,48(r2)
 20176cc:	10803fcc 	andi	r2,r2,255
 20176d0:	1000181e 	bne	r2,zero,2017734 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 20176d4:	e0bffd17 	ldw	r2,-12(fp)
 20176d8:	10c00d83 	ldbu	r3,54(r2)
 20176dc:	d0a74303 	ldbu	r2,-25332(gp)
 20176e0:	1884b03a 	or	r2,r3,r2
 20176e4:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20176e8:	e0bffd17 	ldw	r2,-12(fp)
 20176ec:	10800d03 	ldbu	r2,52(r2)
 20176f0:	10c03fcc 	andi	r3,r2,255
 20176f4:	e0bffd17 	ldw	r2,-12(fp)
 20176f8:	10800d03 	ldbu	r2,52(r2)
 20176fc:	11003fcc 	andi	r4,r2,255
 2017700:	d0a74344 	addi	r2,gp,-25331
 2017704:	2085883a 	add	r2,r4,r2
 2017708:	11000003 	ldbu	r4,0(r2)
 201770c:	e0bffd17 	ldw	r2,-12(fp)
 2017710:	10800d43 	ldbu	r2,53(r2)
 2017714:	2084b03a 	or	r2,r4,r2
 2017718:	1009883a 	mov	r4,r2
 201771c:	d0a74344 	addi	r2,gp,-25331
 2017720:	1885883a 	add	r2,r3,r2
 2017724:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2017728:	00800044 	movi	r2,1
 201772c:	e0bffc05 	stb	r2,-16(fp)
 2017730:	00000106 	br	2017738 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 2017734:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2017738:	e13ffe17 	ldw	r4,-8(fp)
 201773c:	20177580 	call	2017758 <OS_FlagUnlink>
    return (sched);
 2017740:	e0bffc03 	ldbu	r2,-16(fp)
}
 2017744:	e037883a 	mov	sp,fp
 2017748:	dfc00117 	ldw	ra,4(sp)
 201774c:	df000017 	ldw	fp,0(sp)
 2017750:	dec00204 	addi	sp,sp,8
 2017754:	f800283a 	ret

02017758 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2017758:	defffa04 	addi	sp,sp,-24
 201775c:	df000515 	stw	fp,20(sp)
 2017760:	df000504 	addi	fp,sp,20
 2017764:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2017768:	e0bfff17 	ldw	r2,-4(fp)
 201776c:	10800117 	ldw	r2,4(r2)
 2017770:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2017774:	e0bfff17 	ldw	r2,-4(fp)
 2017778:	10800017 	ldw	r2,0(r2)
 201777c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2017780:	e0bffb17 	ldw	r2,-20(fp)
 2017784:	10000b1e 	bne	r2,zero,20177b4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2017788:	e0bfff17 	ldw	r2,-4(fp)
 201778c:	10800317 	ldw	r2,12(r2)
 2017790:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 2017794:	e0bffd17 	ldw	r2,-12(fp)
 2017798:	e0fffc17 	ldw	r3,-16(fp)
 201779c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 20177a0:	e0bffc17 	ldw	r2,-16(fp)
 20177a4:	10000b26 	beq	r2,zero,20177d4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 20177a8:	e0bffc17 	ldw	r2,-16(fp)
 20177ac:	10000115 	stw	zero,4(r2)
 20177b0:	00000806 	br	20177d4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 20177b4:	e0bffb17 	ldw	r2,-20(fp)
 20177b8:	e0fffc17 	ldw	r3,-16(fp)
 20177bc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 20177c0:	e0bffc17 	ldw	r2,-16(fp)
 20177c4:	10000326 	beq	r2,zero,20177d4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 20177c8:	e0bffc17 	ldw	r2,-16(fp)
 20177cc:	e0fffb17 	ldw	r3,-20(fp)
 20177d0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 20177d4:	e0bfff17 	ldw	r2,-4(fp)
 20177d8:	10800217 	ldw	r2,8(r2)
 20177dc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 20177e0:	e0bffe17 	ldw	r2,-8(fp)
 20177e4:	10000a15 	stw	zero,40(r2)
#endif
}
 20177e8:	0001883a 	nop
 20177ec:	e037883a 	mov	sp,fp
 20177f0:	df000017 	ldw	fp,0(sp)
 20177f4:	dec00104 	addi	sp,sp,4
 20177f8:	f800283a 	ret

020177fc <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 20177fc:	defffa04 	addi	sp,sp,-24
 2017800:	df000515 	stw	fp,20(sp)
 2017804:	df000504 	addi	fp,sp,20
 2017808:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 201780c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2017810:	e0bfff17 	ldw	r2,-4(fp)
 2017814:	1000021e 	bne	r2,zero,2017820 <OSMboxAccept+0x24>
        return ((void *)0);
 2017818:	0005883a 	mov	r2,zero
 201781c:	00001906 	br	2017884 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2017820:	e0bfff17 	ldw	r2,-4(fp)
 2017824:	10800003 	ldbu	r2,0(r2)
 2017828:	10803fcc 	andi	r2,r2,255
 201782c:	10800060 	cmpeqi	r2,r2,1
 2017830:	1000021e 	bne	r2,zero,201783c <OSMboxAccept+0x40>
        return ((void *)0);
 2017834:	0005883a 	mov	r2,zero
 2017838:	00001206 	br	2017884 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201783c:	0005303a 	rdctl	r2,status
 2017840:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017844:	e0fffd17 	ldw	r3,-12(fp)
 2017848:	00bfff84 	movi	r2,-2
 201784c:	1884703a 	and	r2,r3,r2
 2017850:	1001703a 	wrctl	status,r2
  
  return context;
 2017854:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017858:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201785c:	e0bfff17 	ldw	r2,-4(fp)
 2017860:	10800117 	ldw	r2,4(r2)
 2017864:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 2017868:	e0bfff17 	ldw	r2,-4(fp)
 201786c:	10000115 	stw	zero,4(r2)
 2017870:	e0bffb17 	ldw	r2,-20(fp)
 2017874:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017878:	e0bffe17 	ldw	r2,-8(fp)
 201787c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 2017880:	e0bffc17 	ldw	r2,-16(fp)
}
 2017884:	e037883a 	mov	sp,fp
 2017888:	df000017 	ldw	fp,0(sp)
 201788c:	dec00104 	addi	sp,sp,4
 2017890:	f800283a 	ret

02017894 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 2017894:	defff904 	addi	sp,sp,-28
 2017898:	dfc00615 	stw	ra,24(sp)
 201789c:	df000515 	stw	fp,20(sp)
 20178a0:	df000504 	addi	fp,sp,20
 20178a4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20178a8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20178ac:	d0a74503 	ldbu	r2,-25324(gp)
 20178b0:	10803fcc 	andi	r2,r2,255
 20178b4:	10000226 	beq	r2,zero,20178c0 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 20178b8:	0005883a 	mov	r2,zero
 20178bc:	00002506 	br	2017954 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20178c0:	0005303a 	rdctl	r2,status
 20178c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20178c8:	e0fffe17 	ldw	r3,-8(fp)
 20178cc:	00bfff84 	movi	r2,-2
 20178d0:	1884703a 	and	r2,r3,r2
 20178d4:	1001703a 	wrctl	status,r2
  
  return context;
 20178d8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20178dc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 20178e0:	d0a74417 	ldw	r2,-25328(gp)
 20178e4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 20178e8:	d0a74417 	ldw	r2,-25328(gp)
 20178ec:	10000326 	beq	r2,zero,20178fc <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20178f0:	d0a74417 	ldw	r2,-25328(gp)
 20178f4:	10800117 	ldw	r2,4(r2)
 20178f8:	d0a74415 	stw	r2,-25328(gp)
 20178fc:	e0bffb17 	ldw	r2,-20(fp)
 2017900:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017904:	e0bffc17 	ldw	r2,-16(fp)
 2017908:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 201790c:	e0bffd17 	ldw	r2,-12(fp)
 2017910:	10000f26 	beq	r2,zero,2017950 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 2017914:	e0bffd17 	ldw	r2,-12(fp)
 2017918:	00c00044 	movi	r3,1
 201791c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2017920:	e0bffd17 	ldw	r2,-12(fp)
 2017924:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2017928:	e0bffd17 	ldw	r2,-12(fp)
 201792c:	e0ffff17 	ldw	r3,-4(fp)
 2017930:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 2017934:	e0bffd17 	ldw	r2,-12(fp)
 2017938:	00c00fc4 	movi	r3,63
 201793c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2017940:	e0bffd17 	ldw	r2,-12(fp)
 2017944:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2017948:	e13ffd17 	ldw	r4,-12(fp)
 201794c:	20153e80 	call	20153e8 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 2017950:	e0bffd17 	ldw	r2,-12(fp)
}
 2017954:	e037883a 	mov	sp,fp
 2017958:	dfc00117 	ldw	ra,4(sp)
 201795c:	df000017 	ldw	fp,0(sp)
 2017960:	dec00204 	addi	sp,sp,8
 2017964:	f800283a 	ret

02017968 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017968:	defff304 	addi	sp,sp,-52
 201796c:	dfc00c15 	stw	ra,48(sp)
 2017970:	df000b15 	stw	fp,44(sp)
 2017974:	df000b04 	addi	fp,sp,44
 2017978:	e13ffd15 	stw	r4,-12(fp)
 201797c:	2805883a 	mov	r2,r5
 2017980:	e1bfff15 	stw	r6,-4(fp)
 2017984:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017988:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201798c:	e0bfff17 	ldw	r2,-4(fp)
 2017990:	1000021e 	bne	r2,zero,201799c <OSMboxDel+0x34>
        return (pevent);
 2017994:	e0bffd17 	ldw	r2,-12(fp)
 2017998:	00007e06 	br	2017b94 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201799c:	e0bffd17 	ldw	r2,-12(fp)
 20179a0:	1000051e 	bne	r2,zero,20179b8 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20179a4:	e0bfff17 	ldw	r2,-4(fp)
 20179a8:	00c00104 	movi	r3,4
 20179ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20179b0:	e0bffd17 	ldw	r2,-12(fp)
 20179b4:	00007706 	br	2017b94 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 20179b8:	e0bffd17 	ldw	r2,-12(fp)
 20179bc:	10800003 	ldbu	r2,0(r2)
 20179c0:	10803fcc 	andi	r2,r2,255
 20179c4:	10800060 	cmpeqi	r2,r2,1
 20179c8:	1000051e 	bne	r2,zero,20179e0 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20179cc:	e0bfff17 	ldw	r2,-4(fp)
 20179d0:	00c00044 	movi	r3,1
 20179d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20179d8:	e0bffd17 	ldw	r2,-12(fp)
 20179dc:	00006d06 	br	2017b94 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20179e0:	d0a74503 	ldbu	r2,-25324(gp)
 20179e4:	10803fcc 	andi	r2,r2,255
 20179e8:	10000526 	beq	r2,zero,2017a00 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20179ec:	e0bfff17 	ldw	r2,-4(fp)
 20179f0:	00c003c4 	movi	r3,15
 20179f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20179f8:	e0bffd17 	ldw	r2,-12(fp)
 20179fc:	00006506 	br	2017b94 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017a00:	0005303a 	rdctl	r2,status
 2017a04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017a08:	e0fffc17 	ldw	r3,-16(fp)
 2017a0c:	00bfff84 	movi	r2,-2
 2017a10:	1884703a 	and	r2,r3,r2
 2017a14:	1001703a 	wrctl	status,r2
  
  return context;
 2017a18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017a1c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2017a20:	e0bffd17 	ldw	r2,-12(fp)
 2017a24:	10800283 	ldbu	r2,10(r2)
 2017a28:	10803fcc 	andi	r2,r2,255
 2017a2c:	10000326 	beq	r2,zero,2017a3c <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2017a30:	00800044 	movi	r2,1
 2017a34:	e0bff505 	stb	r2,-44(fp)
 2017a38:	00000106 	br	2017a40 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2017a3c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2017a40:	e0bffe03 	ldbu	r2,-8(fp)
 2017a44:	10000326 	beq	r2,zero,2017a54 <OSMboxDel+0xec>
 2017a48:	10800060 	cmpeqi	r2,r2,1
 2017a4c:	1000281e 	bne	r2,zero,2017af0 <OSMboxDel+0x188>
 2017a50:	00004506 	br	2017b68 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 2017a54:	e0bff503 	ldbu	r2,-44(fp)
 2017a58:	1000161e 	bne	r2,zero,2017ab4 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2017a5c:	e0bffd17 	ldw	r2,-12(fp)
 2017a60:	00c00fc4 	movi	r3,63
 2017a64:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2017a68:	e0bffd17 	ldw	r2,-12(fp)
 2017a6c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 2017a70:	e0bffd17 	ldw	r2,-12(fp)
 2017a74:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 2017a78:	d0e74417 	ldw	r3,-25328(gp)
 2017a7c:	e0bffd17 	ldw	r2,-12(fp)
 2017a80:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 2017a84:	e0bffd17 	ldw	r2,-12(fp)
 2017a88:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 2017a8c:	e0bffd17 	ldw	r2,-12(fp)
 2017a90:	d0a74415 	stw	r2,-25328(gp)
 2017a94:	e0bff717 	ldw	r2,-36(fp)
 2017a98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a9c:	e0bff817 	ldw	r2,-32(fp)
 2017aa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 2017aa4:	e0bfff17 	ldw	r2,-4(fp)
 2017aa8:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 2017aac:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2017ab0:	00003706 	br	2017b90 <OSMboxDel+0x228>
 2017ab4:	e0bff717 	ldw	r2,-36(fp)
 2017ab8:	e0bff915 	stw	r2,-28(fp)
 2017abc:	e0bff917 	ldw	r2,-28(fp)
 2017ac0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 2017ac4:	e0bfff17 	ldw	r2,-4(fp)
 2017ac8:	00c01244 	movi	r3,73
 2017acc:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 2017ad0:	e0bffd17 	ldw	r2,-12(fp)
 2017ad4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2017ad8:	00002d06 	br	2017b90 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017adc:	000f883a 	mov	r7,zero
 2017ae0:	01800084 	movi	r6,2
 2017ae4:	000b883a 	mov	r5,zero
 2017ae8:	e13ffd17 	ldw	r4,-12(fp)
 2017aec:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 2017af0:	e0bffd17 	ldw	r2,-12(fp)
 2017af4:	10800283 	ldbu	r2,10(r2)
 2017af8:	10803fcc 	andi	r2,r2,255
 2017afc:	103ff71e 	bne	r2,zero,2017adc <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2017b00:	e0bffd17 	ldw	r2,-12(fp)
 2017b04:	00c00fc4 	movi	r3,63
 2017b08:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2017b0c:	e0bffd17 	ldw	r2,-12(fp)
 2017b10:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2017b14:	e0bffd17 	ldw	r2,-12(fp)
 2017b18:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2017b1c:	d0e74417 	ldw	r3,-25328(gp)
 2017b20:	e0bffd17 	ldw	r2,-12(fp)
 2017b24:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2017b28:	e0bffd17 	ldw	r2,-12(fp)
 2017b2c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2017b30:	e0bffd17 	ldw	r2,-12(fp)
 2017b34:	d0a74415 	stw	r2,-25328(gp)
 2017b38:	e0bff717 	ldw	r2,-36(fp)
 2017b3c:	e0bffa15 	stw	r2,-24(fp)
 2017b40:	e0bffa17 	ldw	r2,-24(fp)
 2017b44:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2017b48:	e0bff503 	ldbu	r2,-44(fp)
 2017b4c:	10800058 	cmpnei	r2,r2,1
 2017b50:	1000011e 	bne	r2,zero,2017b58 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2017b54:	20158840 	call	2015884 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2017b58:	e0bfff17 	ldw	r2,-4(fp)
 2017b5c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2017b60:	e03ff615 	stw	zero,-40(fp)
             break;
 2017b64:	00000a06 	br	2017b90 <OSMboxDel+0x228>
 2017b68:	e0bff717 	ldw	r2,-36(fp)
 2017b6c:	e0bffb15 	stw	r2,-20(fp)
 2017b70:	e0bffb17 	ldw	r2,-20(fp)
 2017b74:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2017b78:	e0bfff17 	ldw	r2,-4(fp)
 2017b7c:	00c001c4 	movi	r3,7
 2017b80:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 2017b84:	e0bffd17 	ldw	r2,-12(fp)
 2017b88:	e0bff615 	stw	r2,-40(fp)
             break;
 2017b8c:	0001883a 	nop
    }
    return (pevent_return);
 2017b90:	e0bff617 	ldw	r2,-40(fp)
}
 2017b94:	e037883a 	mov	sp,fp
 2017b98:	dfc00117 	ldw	ra,4(sp)
 2017b9c:	df000017 	ldw	fp,0(sp)
 2017ba0:	dec00204 	addi	sp,sp,8
 2017ba4:	f800283a 	ret

02017ba8 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2017ba8:	defff404 	addi	sp,sp,-48
 2017bac:	dfc00b15 	stw	ra,44(sp)
 2017bb0:	df000a15 	stw	fp,40(sp)
 2017bb4:	df000a04 	addi	fp,sp,40
 2017bb8:	e13ffd15 	stw	r4,-12(fp)
 2017bbc:	2805883a 	mov	r2,r5
 2017bc0:	e1bfff15 	stw	r6,-4(fp)
 2017bc4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017bc8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2017bcc:	e0bfff17 	ldw	r2,-4(fp)
 2017bd0:	1000021e 	bne	r2,zero,2017bdc <OSMboxPend+0x34>
        return ((void *)0);
 2017bd4:	0005883a 	mov	r2,zero
 2017bd8:	00007b06 	br	2017dc8 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017bdc:	e0bffd17 	ldw	r2,-12(fp)
 2017be0:	1000051e 	bne	r2,zero,2017bf8 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017be4:	e0bfff17 	ldw	r2,-4(fp)
 2017be8:	00c00104 	movi	r3,4
 2017bec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017bf0:	0005883a 	mov	r2,zero
 2017bf4:	00007406 	br	2017dc8 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017bf8:	e0bffd17 	ldw	r2,-12(fp)
 2017bfc:	10800003 	ldbu	r2,0(r2)
 2017c00:	10803fcc 	andi	r2,r2,255
 2017c04:	10800060 	cmpeqi	r2,r2,1
 2017c08:	1000051e 	bne	r2,zero,2017c20 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017c0c:	e0bfff17 	ldw	r2,-4(fp)
 2017c10:	00c00044 	movi	r3,1
 2017c14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017c18:	0005883a 	mov	r2,zero
 2017c1c:	00006a06 	br	2017dc8 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2017c20:	d0a74503 	ldbu	r2,-25324(gp)
 2017c24:	10803fcc 	andi	r2,r2,255
 2017c28:	10000526 	beq	r2,zero,2017c40 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2017c2c:	e0bfff17 	ldw	r2,-4(fp)
 2017c30:	00c00084 	movi	r3,2
 2017c34:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017c38:	0005883a 	mov	r2,zero
 2017c3c:	00006206 	br	2017dc8 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2017c40:	d0a73703 	ldbu	r2,-25380(gp)
 2017c44:	10803fcc 	andi	r2,r2,255
 2017c48:	10000526 	beq	r2,zero,2017c60 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2017c4c:	e0bfff17 	ldw	r2,-4(fp)
 2017c50:	00c00344 	movi	r3,13
 2017c54:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017c58:	0005883a 	mov	r2,zero
 2017c5c:	00005a06 	br	2017dc8 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017c60:	0005303a 	rdctl	r2,status
 2017c64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017c68:	e0fffc17 	ldw	r3,-16(fp)
 2017c6c:	00bfff84 	movi	r2,-2
 2017c70:	1884703a 	and	r2,r3,r2
 2017c74:	1001703a 	wrctl	status,r2
  
  return context;
 2017c78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017c7c:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2017c80:	e0bffd17 	ldw	r2,-12(fp)
 2017c84:	10800117 	ldw	r2,4(r2)
 2017c88:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 2017c8c:	e0bff617 	ldw	r2,-40(fp)
 2017c90:	10000a26 	beq	r2,zero,2017cbc <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2017c94:	e0bffd17 	ldw	r2,-12(fp)
 2017c98:	10000115 	stw	zero,4(r2)
 2017c9c:	e0bff717 	ldw	r2,-36(fp)
 2017ca0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ca4:	e0bff817 	ldw	r2,-32(fp)
 2017ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2017cac:	e0bfff17 	ldw	r2,-4(fp)
 2017cb0:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2017cb4:	e0bff617 	ldw	r2,-40(fp)
 2017cb8:	00004306 	br	2017dc8 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2017cbc:	d0a74617 	ldw	r2,-25320(gp)
 2017cc0:	d0e74617 	ldw	r3,-25320(gp)
 2017cc4:	18c00c03 	ldbu	r3,48(r3)
 2017cc8:	18c00094 	ori	r3,r3,2
 2017ccc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017cd0:	d0a74617 	ldw	r2,-25320(gp)
 2017cd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2017cd8:	d0a74617 	ldw	r2,-25320(gp)
 2017cdc:	e0fffe0b 	ldhu	r3,-8(fp)
 2017ce0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2017ce4:	e13ffd17 	ldw	r4,-12(fp)
 2017ce8:	2014fd00 	call	2014fd0 <OS_EventTaskWait>
 2017cec:	e0bff717 	ldw	r2,-36(fp)
 2017cf0:	e0bffb15 	stw	r2,-20(fp)
 2017cf4:	e0bffb17 	ldw	r2,-20(fp)
 2017cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2017cfc:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017d00:	0005303a 	rdctl	r2,status
 2017d04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017d08:	e0fff917 	ldw	r3,-28(fp)
 2017d0c:	00bfff84 	movi	r2,-2
 2017d10:	1884703a 	and	r2,r3,r2
 2017d14:	1001703a 	wrctl	status,r2
  
  return context;
 2017d18:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2017d1c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2017d20:	d0a74617 	ldw	r2,-25320(gp)
 2017d24:	10800c43 	ldbu	r2,49(r2)
 2017d28:	10803fcc 	andi	r2,r2,255
 2017d2c:	10000326 	beq	r2,zero,2017d3c <OSMboxPend+0x194>
 2017d30:	108000a0 	cmpeqi	r2,r2,2
 2017d34:	1000071e 	bne	r2,zero,2017d54 <OSMboxPend+0x1ac>
 2017d38:	00000b06 	br	2017d68 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2017d3c:	d0a74617 	ldw	r2,-25320(gp)
 2017d40:	10800917 	ldw	r2,36(r2)
 2017d44:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2017d48:	e0bfff17 	ldw	r2,-4(fp)
 2017d4c:	10000005 	stb	zero,0(r2)
             break;
 2017d50:	00000e06 	br	2017d8c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2017d54:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2017d58:	e0bfff17 	ldw	r2,-4(fp)
 2017d5c:	00c00384 	movi	r3,14
 2017d60:	10c00005 	stb	r3,0(r2)
             break;
 2017d64:	00000906 	br	2017d8c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2017d68:	d0a74617 	ldw	r2,-25320(gp)
 2017d6c:	e17ffd17 	ldw	r5,-12(fp)
 2017d70:	1009883a 	mov	r4,r2
 2017d74:	20152300 	call	2015230 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2017d78:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2017d7c:	e0bfff17 	ldw	r2,-4(fp)
 2017d80:	00c00284 	movi	r3,10
 2017d84:	10c00005 	stb	r3,0(r2)
             break;
 2017d88:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2017d8c:	d0a74617 	ldw	r2,-25320(gp)
 2017d90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2017d94:	d0a74617 	ldw	r2,-25320(gp)
 2017d98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2017d9c:	d0a74617 	ldw	r2,-25320(gp)
 2017da0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017da4:	d0a74617 	ldw	r2,-25320(gp)
 2017da8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2017dac:	d0a74617 	ldw	r2,-25320(gp)
 2017db0:	10000915 	stw	zero,36(r2)
 2017db4:	e0bff717 	ldw	r2,-36(fp)
 2017db8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017dbc:	e0bffa17 	ldw	r2,-24(fp)
 2017dc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2017dc4:	e0bff617 	ldw	r2,-40(fp)
}
 2017dc8:	e037883a 	mov	sp,fp
 2017dcc:	dfc00117 	ldw	ra,4(sp)
 2017dd0:	df000017 	ldw	fp,0(sp)
 2017dd4:	dec00204 	addi	sp,sp,8
 2017dd8:	f800283a 	ret

02017ddc <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017ddc:	defff604 	addi	sp,sp,-40
 2017de0:	dfc00915 	stw	ra,36(sp)
 2017de4:	df000815 	stw	fp,32(sp)
 2017de8:	df000804 	addi	fp,sp,32
 2017dec:	e13ffd15 	stw	r4,-12(fp)
 2017df0:	2805883a 	mov	r2,r5
 2017df4:	e1bfff15 	stw	r6,-4(fp)
 2017df8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017dfc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2017e00:	e0bfff17 	ldw	r2,-4(fp)
 2017e04:	1000021e 	bne	r2,zero,2017e10 <OSMboxPendAbort+0x34>
        return (0);
 2017e08:	0005883a 	mov	r2,zero
 2017e0c:	00004906 	br	2017f34 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017e10:	e0bffd17 	ldw	r2,-12(fp)
 2017e14:	1000051e 	bne	r2,zero,2017e2c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017e18:	e0bfff17 	ldw	r2,-4(fp)
 2017e1c:	00c00104 	movi	r3,4
 2017e20:	10c00005 	stb	r3,0(r2)
        return (0);
 2017e24:	0005883a 	mov	r2,zero
 2017e28:	00004206 	br	2017f34 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2017e2c:	e0bffd17 	ldw	r2,-12(fp)
 2017e30:	10800003 	ldbu	r2,0(r2)
 2017e34:	10803fcc 	andi	r2,r2,255
 2017e38:	10800060 	cmpeqi	r2,r2,1
 2017e3c:	1000051e 	bne	r2,zero,2017e54 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017e40:	e0bfff17 	ldw	r2,-4(fp)
 2017e44:	00c00044 	movi	r3,1
 2017e48:	10c00005 	stb	r3,0(r2)
        return (0);
 2017e4c:	0005883a 	mov	r2,zero
 2017e50:	00003806 	br	2017f34 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e54:	0005303a 	rdctl	r2,status
 2017e58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e5c:	e0fffc17 	ldw	r3,-16(fp)
 2017e60:	00bfff84 	movi	r2,-2
 2017e64:	1884703a 	and	r2,r3,r2
 2017e68:	1001703a 	wrctl	status,r2
  
  return context;
 2017e6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017e70:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2017e74:	e0bffd17 	ldw	r2,-12(fp)
 2017e78:	10800283 	ldbu	r2,10(r2)
 2017e7c:	10803fcc 	andi	r2,r2,255
 2017e80:	10002526 	beq	r2,zero,2017f18 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2017e84:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2017e88:	e0bffe03 	ldbu	r2,-8(fp)
 2017e8c:	10800060 	cmpeqi	r2,r2,1
 2017e90:	10000e26 	beq	r2,zero,2017ecc <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017e94:	00000806 	br	2017eb8 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017e98:	01c00084 	movi	r7,2
 2017e9c:	01800084 	movi	r6,2
 2017ea0:	000b883a 	mov	r5,zero
 2017ea4:	e13ffd17 	ldw	r4,-12(fp)
 2017ea8:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                     nbr_tasks++;
 2017eac:	e0bff803 	ldbu	r2,-32(fp)
 2017eb0:	10800044 	addi	r2,r2,1
 2017eb4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017eb8:	e0bffd17 	ldw	r2,-12(fp)
 2017ebc:	10800283 	ldbu	r2,10(r2)
 2017ec0:	10803fcc 	andi	r2,r2,255
 2017ec4:	103ff41e 	bne	r2,zero,2017e98 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2017ec8:	00000906 	br	2017ef0 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017ecc:	01c00084 	movi	r7,2
 2017ed0:	01800084 	movi	r6,2
 2017ed4:	000b883a 	mov	r5,zero
 2017ed8:	e13ffd17 	ldw	r4,-12(fp)
 2017edc:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 nbr_tasks++;
 2017ee0:	e0bff803 	ldbu	r2,-32(fp)
 2017ee4:	10800044 	addi	r2,r2,1
 2017ee8:	e0bff805 	stb	r2,-32(fp)
                 break;
 2017eec:	0001883a 	nop
 2017ef0:	e0bff917 	ldw	r2,-28(fp)
 2017ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ef8:	e0bffa17 	ldw	r2,-24(fp)
 2017efc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2017f00:	20158840 	call	2015884 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2017f04:	e0bfff17 	ldw	r2,-4(fp)
 2017f08:	00c00384 	movi	r3,14
 2017f0c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2017f10:	e0bff803 	ldbu	r2,-32(fp)
 2017f14:	00000706 	br	2017f34 <OSMboxPendAbort+0x158>
 2017f18:	e0bff917 	ldw	r2,-28(fp)
 2017f1c:	e0bffb15 	stw	r2,-20(fp)
 2017f20:	e0bffb17 	ldw	r2,-20(fp)
 2017f24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017f28:	e0bfff17 	ldw	r2,-4(fp)
 2017f2c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2017f30:	0005883a 	mov	r2,zero
}
 2017f34:	e037883a 	mov	sp,fp
 2017f38:	dfc00117 	ldw	ra,4(sp)
 2017f3c:	df000017 	ldw	fp,0(sp)
 2017f40:	dec00204 	addi	sp,sp,8
 2017f44:	f800283a 	ret

02017f48 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2017f48:	defff704 	addi	sp,sp,-36
 2017f4c:	dfc00815 	stw	ra,32(sp)
 2017f50:	df000715 	stw	fp,28(sp)
 2017f54:	df000704 	addi	fp,sp,28
 2017f58:	e13ffe15 	stw	r4,-8(fp)
 2017f5c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017f60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017f64:	e0bffe17 	ldw	r2,-8(fp)
 2017f68:	1000021e 	bne	r2,zero,2017f74 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2017f6c:	00800104 	movi	r2,4
 2017f70:	00003406 	br	2018044 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2017f74:	e0bfff17 	ldw	r2,-4(fp)
 2017f78:	1000021e 	bne	r2,zero,2017f84 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2017f7c:	008000c4 	movi	r2,3
 2017f80:	00003006 	br	2018044 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017f84:	e0bffe17 	ldw	r2,-8(fp)
 2017f88:	10800003 	ldbu	r2,0(r2)
 2017f8c:	10803fcc 	andi	r2,r2,255
 2017f90:	10800060 	cmpeqi	r2,r2,1
 2017f94:	1000021e 	bne	r2,zero,2017fa0 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2017f98:	00800044 	movi	r2,1
 2017f9c:	00002906 	br	2018044 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017fa0:	0005303a 	rdctl	r2,status
 2017fa4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017fa8:	e0fffd17 	ldw	r3,-12(fp)
 2017fac:	00bfff84 	movi	r2,-2
 2017fb0:	1884703a 	and	r2,r3,r2
 2017fb4:	1001703a 	wrctl	status,r2
  
  return context;
 2017fb8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017fbc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2017fc0:	e0bffe17 	ldw	r2,-8(fp)
 2017fc4:	10800283 	ldbu	r2,10(r2)
 2017fc8:	10803fcc 	andi	r2,r2,255
 2017fcc:	10000c26 	beq	r2,zero,2018000 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017fd0:	000f883a 	mov	r7,zero
 2017fd4:	01800084 	movi	r6,2
 2017fd8:	e17fff17 	ldw	r5,-4(fp)
 2017fdc:	e13ffe17 	ldw	r4,-8(fp)
 2017fe0:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 2017fe4:	e0bff917 	ldw	r2,-28(fp)
 2017fe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017fec:	e0bffa17 	ldw	r2,-24(fp)
 2017ff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2017ff4:	20158840 	call	2015884 <OS_Sched>
        return (OS_ERR_NONE);
 2017ff8:	0005883a 	mov	r2,zero
 2017ffc:	00001106 	br	2018044 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2018000:	e0bffe17 	ldw	r2,-8(fp)
 2018004:	10800117 	ldw	r2,4(r2)
 2018008:	10000626 	beq	r2,zero,2018024 <OSMboxPost+0xdc>
 201800c:	e0bff917 	ldw	r2,-28(fp)
 2018010:	e0bffb15 	stw	r2,-20(fp)
 2018014:	e0bffb17 	ldw	r2,-20(fp)
 2018018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201801c:	00800504 	movi	r2,20
 2018020:	00000806 	br	2018044 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2018024:	e0bffe17 	ldw	r2,-8(fp)
 2018028:	e0ffff17 	ldw	r3,-4(fp)
 201802c:	10c00115 	stw	r3,4(r2)
 2018030:	e0bff917 	ldw	r2,-28(fp)
 2018034:	e0bffc15 	stw	r2,-16(fp)
 2018038:	e0bffc17 	ldw	r2,-16(fp)
 201803c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018040:	0005883a 	mov	r2,zero
}
 2018044:	e037883a 	mov	sp,fp
 2018048:	dfc00117 	ldw	ra,4(sp)
 201804c:	df000017 	ldw	fp,0(sp)
 2018050:	dec00204 	addi	sp,sp,8
 2018054:	f800283a 	ret

02018058 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2018058:	defff604 	addi	sp,sp,-40
 201805c:	dfc00915 	stw	ra,36(sp)
 2018060:	df000815 	stw	fp,32(sp)
 2018064:	df000804 	addi	fp,sp,32
 2018068:	e13ffd15 	stw	r4,-12(fp)
 201806c:	e17ffe15 	stw	r5,-8(fp)
 2018070:	3005883a 	mov	r2,r6
 2018074:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018078:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201807c:	e0bffd17 	ldw	r2,-12(fp)
 2018080:	1000021e 	bne	r2,zero,201808c <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2018084:	00800104 	movi	r2,4
 2018088:	00004506 	br	20181a0 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201808c:	e0bffe17 	ldw	r2,-8(fp)
 2018090:	1000021e 	bne	r2,zero,201809c <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2018094:	008000c4 	movi	r2,3
 2018098:	00004106 	br	20181a0 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201809c:	e0bffd17 	ldw	r2,-12(fp)
 20180a0:	10800003 	ldbu	r2,0(r2)
 20180a4:	10803fcc 	andi	r2,r2,255
 20180a8:	10800060 	cmpeqi	r2,r2,1
 20180ac:	1000021e 	bne	r2,zero,20180b8 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 20180b0:	00800044 	movi	r2,1
 20180b4:	00003a06 	br	20181a0 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20180b8:	0005303a 	rdctl	r2,status
 20180bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20180c0:	e0fffc17 	ldw	r3,-16(fp)
 20180c4:	00bfff84 	movi	r2,-2
 20180c8:	1884703a 	and	r2,r3,r2
 20180cc:	1001703a 	wrctl	status,r2
  
  return context;
 20180d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20180d4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 20180d8:	e0bffd17 	ldw	r2,-12(fp)
 20180dc:	10800283 	ldbu	r2,10(r2)
 20180e0:	10803fcc 	andi	r2,r2,255
 20180e4:	10001d26 	beq	r2,zero,201815c <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20180e8:	e0bfff03 	ldbu	r2,-4(fp)
 20180ec:	1080004c 	andi	r2,r2,1
 20180f0:	10000b26 	beq	r2,zero,2018120 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 20180f4:	00000506 	br	201810c <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20180f8:	000f883a 	mov	r7,zero
 20180fc:	01800084 	movi	r6,2
 2018100:	e17ffe17 	ldw	r5,-8(fp)
 2018104:	e13ffd17 	ldw	r4,-12(fp)
 2018108:	2014e380 	call	2014e38 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201810c:	e0bffd17 	ldw	r2,-12(fp)
 2018110:	10800283 	ldbu	r2,10(r2)
 2018114:	10803fcc 	andi	r2,r2,255
 2018118:	103ff71e 	bne	r2,zero,20180f8 <OSMboxPostOpt+0xa0>
 201811c:	00000506 	br	2018134 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2018120:	000f883a 	mov	r7,zero
 2018124:	01800084 	movi	r6,2
 2018128:	e17ffe17 	ldw	r5,-8(fp)
 201812c:	e13ffd17 	ldw	r4,-12(fp)
 2018130:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 2018134:	e0bff817 	ldw	r2,-32(fp)
 2018138:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201813c:	e0bff917 	ldw	r2,-28(fp)
 2018140:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2018144:	e0bfff03 	ldbu	r2,-4(fp)
 2018148:	1080010c 	andi	r2,r2,4
 201814c:	1000011e 	bne	r2,zero,2018154 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2018150:	20158840 	call	2015884 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2018154:	0005883a 	mov	r2,zero
 2018158:	00001106 	br	20181a0 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201815c:	e0bffd17 	ldw	r2,-12(fp)
 2018160:	10800117 	ldw	r2,4(r2)
 2018164:	10000626 	beq	r2,zero,2018180 <OSMboxPostOpt+0x128>
 2018168:	e0bff817 	ldw	r2,-32(fp)
 201816c:	e0bffa15 	stw	r2,-24(fp)
 2018170:	e0bffa17 	ldw	r2,-24(fp)
 2018174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2018178:	00800504 	movi	r2,20
 201817c:	00000806 	br	20181a0 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2018180:	e0bffd17 	ldw	r2,-12(fp)
 2018184:	e0fffe17 	ldw	r3,-8(fp)
 2018188:	10c00115 	stw	r3,4(r2)
 201818c:	e0bff817 	ldw	r2,-32(fp)
 2018190:	e0bffb15 	stw	r2,-20(fp)
 2018194:	e0bffb17 	ldw	r2,-20(fp)
 2018198:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201819c:	0005883a 	mov	r2,zero
}
 20181a0:	e037883a 	mov	sp,fp
 20181a4:	dfc00117 	ldw	ra,4(sp)
 20181a8:	df000017 	ldw	fp,0(sp)
 20181ac:	dec00204 	addi	sp,sp,8
 20181b0:	f800283a 	ret

020181b4 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 20181b4:	defff704 	addi	sp,sp,-36
 20181b8:	df000815 	stw	fp,32(sp)
 20181bc:	df000804 	addi	fp,sp,32
 20181c0:	e13ffe15 	stw	r4,-8(fp)
 20181c4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20181c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20181cc:	e0bffe17 	ldw	r2,-8(fp)
 20181d0:	1000021e 	bne	r2,zero,20181dc <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20181d4:	00800104 	movi	r2,4
 20181d8:	00003606 	br	20182b4 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 20181dc:	e0bfff17 	ldw	r2,-4(fp)
 20181e0:	1000021e 	bne	r2,zero,20181ec <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20181e4:	00800244 	movi	r2,9
 20181e8:	00003206 	br	20182b4 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 20181ec:	e0bffe17 	ldw	r2,-8(fp)
 20181f0:	10800003 	ldbu	r2,0(r2)
 20181f4:	10803fcc 	andi	r2,r2,255
 20181f8:	10800060 	cmpeqi	r2,r2,1
 20181fc:	1000021e 	bne	r2,zero,2018208 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2018200:	00800044 	movi	r2,1
 2018204:	00002b06 	br	20182b4 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018208:	0005303a 	rdctl	r2,status
 201820c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018210:	e0fffd17 	ldw	r3,-12(fp)
 2018214:	00bfff84 	movi	r2,-2
 2018218:	1884703a 	and	r2,r3,r2
 201821c:	1001703a 	wrctl	status,r2
  
  return context;
 2018220:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018224:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2018228:	e0bffe17 	ldw	r2,-8(fp)
 201822c:	10c00283 	ldbu	r3,10(r2)
 2018230:	e0bfff17 	ldw	r2,-4(fp)
 2018234:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2018238:	e0bffe17 	ldw	r2,-8(fp)
 201823c:	108002c4 	addi	r2,r2,11
 2018240:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 2018244:	e0bfff17 	ldw	r2,-4(fp)
 2018248:	10800104 	addi	r2,r2,4
 201824c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018250:	e03ff805 	stb	zero,-32(fp)
 2018254:	00000b06 	br	2018284 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2018258:	e0bffa17 	ldw	r2,-24(fp)
 201825c:	10c00044 	addi	r3,r2,1
 2018260:	e0fffa15 	stw	r3,-24(fp)
 2018264:	e0fff917 	ldw	r3,-28(fp)
 2018268:	19000044 	addi	r4,r3,1
 201826c:	e13ff915 	stw	r4,-28(fp)
 2018270:	18c00003 	ldbu	r3,0(r3)
 2018274:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018278:	e0bff803 	ldbu	r2,-32(fp)
 201827c:	10800044 	addi	r2,r2,1
 2018280:	e0bff805 	stb	r2,-32(fp)
 2018284:	e0bff803 	ldbu	r2,-32(fp)
 2018288:	108000f0 	cmpltui	r2,r2,3
 201828c:	103ff21e 	bne	r2,zero,2018258 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2018290:	e0bffe17 	ldw	r2,-8(fp)
 2018294:	10c00117 	ldw	r3,4(r2)
 2018298:	e0bfff17 	ldw	r2,-4(fp)
 201829c:	10c00015 	stw	r3,0(r2)
 20182a0:	e0bffb17 	ldw	r2,-20(fp)
 20182a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20182a8:	e0bffc17 	ldw	r2,-16(fp)
 20182ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20182b0:	0005883a 	mov	r2,zero
}
 20182b4:	e037883a 	mov	sp,fp
 20182b8:	df000017 	ldw	fp,0(sp)
 20182bc:	dec00104 	addi	sp,sp,4
 20182c0:	f800283a 	ret

020182c4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 20182c4:	defff404 	addi	sp,sp,-48
 20182c8:	df000b15 	stw	fp,44(sp)
 20182cc:	df000b04 	addi	fp,sp,44
 20182d0:	e13ffc15 	stw	r4,-16(fp)
 20182d4:	e17ffd15 	stw	r5,-12(fp)
 20182d8:	e1bffe15 	stw	r6,-8(fp)
 20182dc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20182e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20182e4:	e0bfff17 	ldw	r2,-4(fp)
 20182e8:	1000021e 	bne	r2,zero,20182f4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 20182ec:	0005883a 	mov	r2,zero
 20182f0:	00006506 	br	2018488 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 20182f4:	e0bffc17 	ldw	r2,-16(fp)
 20182f8:	1000051e 	bne	r2,zero,2018310 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20182fc:	e0bfff17 	ldw	r2,-4(fp)
 2018300:	00c01884 	movi	r3,98
 2018304:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018308:	0005883a 	mov	r2,zero
 201830c:	00005e06 	br	2018488 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2018310:	e0bffc17 	ldw	r2,-16(fp)
 2018314:	108000cc 	andi	r2,r2,3
 2018318:	10000526 	beq	r2,zero,2018330 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201831c:	e0bfff17 	ldw	r2,-4(fp)
 2018320:	00c01884 	movi	r3,98
 2018324:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018328:	0005883a 	mov	r2,zero
 201832c:	00005606 	br	2018488 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2018330:	e0bffd17 	ldw	r2,-12(fp)
 2018334:	108000a8 	cmpgeui	r2,r2,2
 2018338:	1000051e 	bne	r2,zero,2018350 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201833c:	e0bfff17 	ldw	r2,-4(fp)
 2018340:	00c016c4 	movi	r3,91
 2018344:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018348:	0005883a 	mov	r2,zero
 201834c:	00004e06 	br	2018488 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2018350:	e0bffe17 	ldw	r2,-8(fp)
 2018354:	10800128 	cmpgeui	r2,r2,4
 2018358:	1000051e 	bne	r2,zero,2018370 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201835c:	e0bfff17 	ldw	r2,-4(fp)
 2018360:	00c01704 	movi	r3,92
 2018364:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018368:	0005883a 	mov	r2,zero
 201836c:	00004606 	br	2018488 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018370:	0005303a 	rdctl	r2,status
 2018374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018378:	e0fffb17 	ldw	r3,-20(fp)
 201837c:	00bfff84 	movi	r2,-2
 2018380:	1884703a 	and	r2,r3,r2
 2018384:	1001703a 	wrctl	status,r2
  
  return context;
 2018388:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201838c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2018390:	d0a74017 	ldw	r2,-25344(gp)
 2018394:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2018398:	d0a74017 	ldw	r2,-25344(gp)
 201839c:	10000326 	beq	r2,zero,20183ac <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 20183a0:	d0a74017 	ldw	r2,-25344(gp)
 20183a4:	10800117 	ldw	r2,4(r2)
 20183a8:	d0a74015 	stw	r2,-25344(gp)
 20183ac:	e0bff817 	ldw	r2,-32(fp)
 20183b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20183b4:	e0bff917 	ldw	r2,-28(fp)
 20183b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 20183bc:	e0bffa17 	ldw	r2,-24(fp)
 20183c0:	1000051e 	bne	r2,zero,20183d8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 20183c4:	e0bfff17 	ldw	r2,-4(fp)
 20183c8:	00c01684 	movi	r3,90
 20183cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20183d0:	0005883a 	mov	r2,zero
 20183d4:	00002c06 	br	2018488 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20183d8:	e0bffc17 	ldw	r2,-16(fp)
 20183dc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20183e0:	e0fffc17 	ldw	r3,-16(fp)
 20183e4:	e0bffe17 	ldw	r2,-8(fp)
 20183e8:	1885883a 	add	r2,r3,r2
 20183ec:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20183f0:	e03ff715 	stw	zero,-36(fp)
 20183f4:	00000c06 	br	2018428 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 20183f8:	e0bff617 	ldw	r2,-40(fp)
 20183fc:	e0fff517 	ldw	r3,-44(fp)
 2018400:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2018404:	e0bff517 	ldw	r2,-44(fp)
 2018408:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 201840c:	e0fff517 	ldw	r3,-44(fp)
 2018410:	e0bffe17 	ldw	r2,-8(fp)
 2018414:	1885883a 	add	r2,r3,r2
 2018418:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201841c:	e0bff717 	ldw	r2,-36(fp)
 2018420:	10800044 	addi	r2,r2,1
 2018424:	e0bff715 	stw	r2,-36(fp)
 2018428:	e0bffd17 	ldw	r2,-12(fp)
 201842c:	10bfffc4 	addi	r2,r2,-1
 2018430:	e0fff717 	ldw	r3,-36(fp)
 2018434:	18bff036 	bltu	r3,r2,20183f8 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2018438:	e0bff617 	ldw	r2,-40(fp)
 201843c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2018440:	e0bffa17 	ldw	r2,-24(fp)
 2018444:	e0fffc17 	ldw	r3,-16(fp)
 2018448:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201844c:	e0bffa17 	ldw	r2,-24(fp)
 2018450:	e0fffc17 	ldw	r3,-16(fp)
 2018454:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2018458:	e0bffa17 	ldw	r2,-24(fp)
 201845c:	e0fffd17 	ldw	r3,-12(fp)
 2018460:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 2018464:	e0bffa17 	ldw	r2,-24(fp)
 2018468:	e0fffd17 	ldw	r3,-12(fp)
 201846c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2018470:	e0bffa17 	ldw	r2,-24(fp)
 2018474:	e0fffe17 	ldw	r3,-8(fp)
 2018478:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201847c:	e0bfff17 	ldw	r2,-4(fp)
 2018480:	10000005 	stb	zero,0(r2)
    return (pmem);
 2018484:	e0bffa17 	ldw	r2,-24(fp)
}
 2018488:	e037883a 	mov	sp,fp
 201848c:	df000017 	ldw	fp,0(sp)
 2018490:	dec00104 	addi	sp,sp,4
 2018494:	f800283a 	ret

02018498 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2018498:	defff804 	addi	sp,sp,-32
 201849c:	df000715 	stw	fp,28(sp)
 20184a0:	df000704 	addi	fp,sp,28
 20184a4:	e13ffe15 	stw	r4,-8(fp)
 20184a8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20184ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20184b0:	e0bfff17 	ldw	r2,-4(fp)
 20184b4:	1000021e 	bne	r2,zero,20184c0 <OSMemGet+0x28>
        return ((void *)0);
 20184b8:	0005883a 	mov	r2,zero
 20184bc:	00002e06 	br	2018578 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 20184c0:	e0bffe17 	ldw	r2,-8(fp)
 20184c4:	1000051e 	bne	r2,zero,20184dc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20184c8:	e0bfff17 	ldw	r2,-4(fp)
 20184cc:	00c01804 	movi	r3,96
 20184d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20184d4:	0005883a 	mov	r2,zero
 20184d8:	00002706 	br	2018578 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20184dc:	0005303a 	rdctl	r2,status
 20184e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20184e4:	e0fffd17 	ldw	r3,-12(fp)
 20184e8:	00bfff84 	movi	r2,-2
 20184ec:	1884703a 	and	r2,r3,r2
 20184f0:	1001703a 	wrctl	status,r2
  
  return context;
 20184f4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20184f8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 20184fc:	e0bffe17 	ldw	r2,-8(fp)
 2018500:	10800417 	ldw	r2,16(r2)
 2018504:	10001426 	beq	r2,zero,2018558 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2018508:	e0bffe17 	ldw	r2,-8(fp)
 201850c:	10800117 	ldw	r2,4(r2)
 2018510:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2018514:	e0bffb17 	ldw	r2,-20(fp)
 2018518:	10c00017 	ldw	r3,0(r2)
 201851c:	e0bffe17 	ldw	r2,-8(fp)
 2018520:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2018524:	e0bffe17 	ldw	r2,-8(fp)
 2018528:	10800417 	ldw	r2,16(r2)
 201852c:	10ffffc4 	addi	r3,r2,-1
 2018530:	e0bffe17 	ldw	r2,-8(fp)
 2018534:	10c00415 	stw	r3,16(r2)
 2018538:	e0bff917 	ldw	r2,-28(fp)
 201853c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018540:	e0bffa17 	ldw	r2,-24(fp)
 2018544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2018548:	e0bfff17 	ldw	r2,-4(fp)
 201854c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2018550:	e0bffb17 	ldw	r2,-20(fp)
 2018554:	00000806 	br	2018578 <OSMemGet+0xe0>
 2018558:	e0bff917 	ldw	r2,-28(fp)
 201855c:	e0bffc15 	stw	r2,-16(fp)
 2018560:	e0bffc17 	ldw	r2,-16(fp)
 2018564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2018568:	e0bfff17 	ldw	r2,-4(fp)
 201856c:	00c01744 	movi	r3,93
 2018570:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2018574:	0005883a 	mov	r2,zero
}
 2018578:	e037883a 	mov	sp,fp
 201857c:	df000017 	ldw	fp,0(sp)
 2018580:	dec00104 	addi	sp,sp,4
 2018584:	f800283a 	ret

02018588 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018588:	defff704 	addi	sp,sp,-36
 201858c:	dfc00815 	stw	ra,32(sp)
 2018590:	df000715 	stw	fp,28(sp)
 2018594:	df000704 	addi	fp,sp,28
 2018598:	e13ffd15 	stw	r4,-12(fp)
 201859c:	e17ffe15 	stw	r5,-8(fp)
 20185a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20185a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20185a8:	e0bfff17 	ldw	r2,-4(fp)
 20185ac:	1000021e 	bne	r2,zero,20185b8 <OSMemNameGet+0x30>
        return (0);
 20185b0:	0005883a 	mov	r2,zero
 20185b4:	00002b06 	br	2018664 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20185b8:	e0bffd17 	ldw	r2,-12(fp)
 20185bc:	1000051e 	bne	r2,zero,20185d4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20185c0:	e0bfff17 	ldw	r2,-4(fp)
 20185c4:	00c01804 	movi	r3,96
 20185c8:	10c00005 	stb	r3,0(r2)
        return (0);
 20185cc:	0005883a 	mov	r2,zero
 20185d0:	00002406 	br	2018664 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20185d4:	e0bffe17 	ldw	r2,-8(fp)
 20185d8:	1000051e 	bne	r2,zero,20185f0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20185dc:	e0bfff17 	ldw	r2,-4(fp)
 20185e0:	00c00304 	movi	r3,12
 20185e4:	10c00005 	stb	r3,0(r2)
        return (0);
 20185e8:	0005883a 	mov	r2,zero
 20185ec:	00001d06 	br	2018664 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20185f0:	d0a74503 	ldbu	r2,-25324(gp)
 20185f4:	10803fcc 	andi	r2,r2,255
 20185f8:	10000526 	beq	r2,zero,2018610 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20185fc:	e0bfff17 	ldw	r2,-4(fp)
 2018600:	00c00444 	movi	r3,17
 2018604:	10c00005 	stb	r3,0(r2)
        return (0);
 2018608:	0005883a 	mov	r2,zero
 201860c:	00001506 	br	2018664 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018610:	0005303a 	rdctl	r2,status
 2018614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018618:	e0fffb17 	ldw	r3,-20(fp)
 201861c:	00bfff84 	movi	r2,-2
 2018620:	1884703a 	and	r2,r3,r2
 2018624:	1001703a 	wrctl	status,r2
  
  return context;
 2018628:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201862c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2018630:	e0bffd17 	ldw	r2,-12(fp)
 2018634:	10800504 	addi	r2,r2,20
 2018638:	100b883a 	mov	r5,r2
 201863c:	e13ffe17 	ldw	r4,-8(fp)
 2018640:	20159c80 	call	20159c8 <OS_StrCopy>
 2018644:	e0bffa05 	stb	r2,-24(fp)
 2018648:	e0bff917 	ldw	r2,-28(fp)
 201864c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018650:	e0bffc17 	ldw	r2,-16(fp)
 2018654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018658:	e0bfff17 	ldw	r2,-4(fp)
 201865c:	10000005 	stb	zero,0(r2)
    return (len);
 2018660:	e0bffa03 	ldbu	r2,-24(fp)
}
 2018664:	e037883a 	mov	sp,fp
 2018668:	dfc00117 	ldw	ra,4(sp)
 201866c:	df000017 	ldw	fp,0(sp)
 2018670:	dec00204 	addi	sp,sp,8
 2018674:	f800283a 	ret

02018678 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018678:	defff604 	addi	sp,sp,-40
 201867c:	dfc00915 	stw	ra,36(sp)
 2018680:	df000815 	stw	fp,32(sp)
 2018684:	df000804 	addi	fp,sp,32
 2018688:	e13ffd15 	stw	r4,-12(fp)
 201868c:	e17ffe15 	stw	r5,-8(fp)
 2018690:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018694:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018698:	e0bfff17 	ldw	r2,-4(fp)
 201869c:	10003526 	beq	r2,zero,2018774 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20186a0:	e0bffd17 	ldw	r2,-12(fp)
 20186a4:	1000041e 	bne	r2,zero,20186b8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20186a8:	e0bfff17 	ldw	r2,-4(fp)
 20186ac:	00c01804 	movi	r3,96
 20186b0:	10c00005 	stb	r3,0(r2)
        return;
 20186b4:	00003006 	br	2018778 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20186b8:	e0bffe17 	ldw	r2,-8(fp)
 20186bc:	1000041e 	bne	r2,zero,20186d0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20186c0:	e0bfff17 	ldw	r2,-4(fp)
 20186c4:	00c00304 	movi	r3,12
 20186c8:	10c00005 	stb	r3,0(r2)
        return;
 20186cc:	00002a06 	br	2018778 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20186d0:	d0a74503 	ldbu	r2,-25324(gp)
 20186d4:	10803fcc 	andi	r2,r2,255
 20186d8:	10000426 	beq	r2,zero,20186ec <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20186dc:	e0bfff17 	ldw	r2,-4(fp)
 20186e0:	00c00484 	movi	r3,18
 20186e4:	10c00005 	stb	r3,0(r2)
        return;
 20186e8:	00002306 	br	2018778 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20186ec:	0005303a 	rdctl	r2,status
 20186f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20186f4:	e0fffc17 	ldw	r3,-16(fp)
 20186f8:	00bfff84 	movi	r2,-2
 20186fc:	1884703a 	and	r2,r3,r2
 2018700:	1001703a 	wrctl	status,r2
  
  return context;
 2018704:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018708:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201870c:	e13ffe17 	ldw	r4,-8(fp)
 2018710:	2015a3c0 	call	2015a3c <OS_StrLen>
 2018714:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2018718:	e0bffa03 	ldbu	r2,-24(fp)
 201871c:	10800830 	cmpltui	r2,r2,32
 2018720:	1000081e 	bne	r2,zero,2018744 <OSMemNameSet+0xcc>
 2018724:	e0bff817 	ldw	r2,-32(fp)
 2018728:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201872c:	e0bff917 	ldw	r2,-28(fp)
 2018730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2018734:	e0bfff17 	ldw	r2,-4(fp)
 2018738:	00c018c4 	movi	r3,99
 201873c:	10c00005 	stb	r3,0(r2)
        return;
 2018740:	00000d06 	br	2018778 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2018744:	e0bffd17 	ldw	r2,-12(fp)
 2018748:	10800504 	addi	r2,r2,20
 201874c:	e17ffe17 	ldw	r5,-8(fp)
 2018750:	1009883a 	mov	r4,r2
 2018754:	20159c80 	call	20159c8 <OS_StrCopy>
 2018758:	e0bff817 	ldw	r2,-32(fp)
 201875c:	e0bffb15 	stw	r2,-20(fp)
 2018760:	e0bffb17 	ldw	r2,-20(fp)
 2018764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018768:	e0bfff17 	ldw	r2,-4(fp)
 201876c:	10000005 	stb	zero,0(r2)
 2018770:	00000106 	br	2018778 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2018774:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2018778:	e037883a 	mov	sp,fp
 201877c:	dfc00117 	ldw	ra,4(sp)
 2018780:	df000017 	ldw	fp,0(sp)
 2018784:	dec00204 	addi	sp,sp,8
 2018788:	f800283a 	ret

0201878c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201878c:	defff904 	addi	sp,sp,-28
 2018790:	df000615 	stw	fp,24(sp)
 2018794:	df000604 	addi	fp,sp,24
 2018798:	e13ffe15 	stw	r4,-8(fp)
 201879c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20187a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20187a4:	e0bffe17 	ldw	r2,-8(fp)
 20187a8:	1000021e 	bne	r2,zero,20187b4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20187ac:	00801804 	movi	r2,96
 20187b0:	00002806 	br	2018854 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 20187b4:	e0bfff17 	ldw	r2,-4(fp)
 20187b8:	1000021e 	bne	r2,zero,20187c4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 20187bc:	008017c4 	movi	r2,95
 20187c0:	00002406 	br	2018854 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20187c4:	0005303a 	rdctl	r2,status
 20187c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20187cc:	e0fffd17 	ldw	r3,-12(fp)
 20187d0:	00bfff84 	movi	r2,-2
 20187d4:	1884703a 	and	r2,r3,r2
 20187d8:	1001703a 	wrctl	status,r2
  
  return context;
 20187dc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20187e0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 20187e4:	e0bffe17 	ldw	r2,-8(fp)
 20187e8:	10c00417 	ldw	r3,16(r2)
 20187ec:	e0bffe17 	ldw	r2,-8(fp)
 20187f0:	10800317 	ldw	r2,12(r2)
 20187f4:	18800636 	bltu	r3,r2,2018810 <OSMemPut+0x84>
 20187f8:	e0bffa17 	ldw	r2,-24(fp)
 20187fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018800:	e0bffb17 	ldw	r2,-20(fp)
 2018804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2018808:	00801784 	movi	r2,94
 201880c:	00001106 	br	2018854 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2018810:	e0bffe17 	ldw	r2,-8(fp)
 2018814:	10c00117 	ldw	r3,4(r2)
 2018818:	e0bfff17 	ldw	r2,-4(fp)
 201881c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2018820:	e0bffe17 	ldw	r2,-8(fp)
 2018824:	e0ffff17 	ldw	r3,-4(fp)
 2018828:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201882c:	e0bffe17 	ldw	r2,-8(fp)
 2018830:	10800417 	ldw	r2,16(r2)
 2018834:	10c00044 	addi	r3,r2,1
 2018838:	e0bffe17 	ldw	r2,-8(fp)
 201883c:	10c00415 	stw	r3,16(r2)
 2018840:	e0bffa17 	ldw	r2,-24(fp)
 2018844:	e0bffc15 	stw	r2,-16(fp)
 2018848:	e0bffc17 	ldw	r2,-16(fp)
 201884c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2018850:	0005883a 	mov	r2,zero
}
 2018854:	e037883a 	mov	sp,fp
 2018858:	df000017 	ldw	fp,0(sp)
 201885c:	dec00104 	addi	sp,sp,4
 2018860:	f800283a 	ret

02018864 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2018864:	defffa04 	addi	sp,sp,-24
 2018868:	df000515 	stw	fp,20(sp)
 201886c:	df000504 	addi	fp,sp,20
 2018870:	e13ffe15 	stw	r4,-8(fp)
 2018874:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018878:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201887c:	e0bffe17 	ldw	r2,-8(fp)
 2018880:	1000021e 	bne	r2,zero,201888c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2018884:	00801804 	movi	r2,96
 2018888:	00002c06 	br	201893c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201888c:	e0bfff17 	ldw	r2,-4(fp)
 2018890:	1000021e 	bne	r2,zero,201889c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 2018894:	00801844 	movi	r2,97
 2018898:	00002806 	br	201893c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201889c:	0005303a 	rdctl	r2,status
 20188a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20188a4:	e0fffc17 	ldw	r3,-16(fp)
 20188a8:	00bfff84 	movi	r2,-2
 20188ac:	1884703a 	and	r2,r3,r2
 20188b0:	1001703a 	wrctl	status,r2
  
  return context;
 20188b4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20188b8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 20188bc:	e0bffe17 	ldw	r2,-8(fp)
 20188c0:	10c00017 	ldw	r3,0(r2)
 20188c4:	e0bfff17 	ldw	r2,-4(fp)
 20188c8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 20188cc:	e0bffe17 	ldw	r2,-8(fp)
 20188d0:	10c00117 	ldw	r3,4(r2)
 20188d4:	e0bfff17 	ldw	r2,-4(fp)
 20188d8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 20188dc:	e0bffe17 	ldw	r2,-8(fp)
 20188e0:	10c00217 	ldw	r3,8(r2)
 20188e4:	e0bfff17 	ldw	r2,-4(fp)
 20188e8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 20188ec:	e0bffe17 	ldw	r2,-8(fp)
 20188f0:	10c00317 	ldw	r3,12(r2)
 20188f4:	e0bfff17 	ldw	r2,-4(fp)
 20188f8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 20188fc:	e0bffe17 	ldw	r2,-8(fp)
 2018900:	10c00417 	ldw	r3,16(r2)
 2018904:	e0bfff17 	ldw	r2,-4(fp)
 2018908:	10c00415 	stw	r3,16(r2)
 201890c:	e0bffb17 	ldw	r2,-20(fp)
 2018910:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018914:	e0bffd17 	ldw	r2,-12(fp)
 2018918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201891c:	e0bfff17 	ldw	r2,-4(fp)
 2018920:	10c00317 	ldw	r3,12(r2)
 2018924:	e0bfff17 	ldw	r2,-4(fp)
 2018928:	10800417 	ldw	r2,16(r2)
 201892c:	1887c83a 	sub	r3,r3,r2
 2018930:	e0bfff17 	ldw	r2,-4(fp)
 2018934:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2018938:	0005883a 	mov	r2,zero
}
 201893c:	e037883a 	mov	sp,fp
 2018940:	df000017 	ldw	fp,0(sp)
 2018944:	dec00104 	addi	sp,sp,4
 2018948:	f800283a 	ret

0201894c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201894c:	defffc04 	addi	sp,sp,-16
 2018950:	dfc00315 	stw	ra,12(sp)
 2018954:	df000215 	stw	fp,8(sp)
 2018958:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201895c:	01430c04 	movi	r5,3120
 2018960:	010080f4 	movhi	r4,515
 2018964:	212a9204 	addi	r4,r4,-21944
 2018968:	20157c80 	call	20157c8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201896c:	008080f4 	movhi	r2,515
 2018970:	10aa9204 	addi	r2,r2,-21944
 2018974:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2018978:	e03fff0d 	sth	zero,-4(fp)
 201897c:	00001306 	br	20189cc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2018980:	e0bfff0b 	ldhu	r2,-4(fp)
 2018984:	10800044 	addi	r2,r2,1
 2018988:	10c00d24 	muli	r3,r2,52
 201898c:	008080f4 	movhi	r2,515
 2018990:	10aa9204 	addi	r2,r2,-21944
 2018994:	1887883a 	add	r3,r3,r2
 2018998:	e0bffe17 	ldw	r2,-8(fp)
 201899c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 20189a0:	e0bffe17 	ldw	r2,-8(fp)
 20189a4:	00c00fc4 	movi	r3,63
 20189a8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 20189ac:	e0bffe17 	ldw	r2,-8(fp)
 20189b0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 20189b4:	e0bffe17 	ldw	r2,-8(fp)
 20189b8:	10800d04 	addi	r2,r2,52
 20189bc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20189c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20189c4:	10800044 	addi	r2,r2,1
 20189c8:	e0bfff0d 	sth	r2,-4(fp)
 20189cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20189d0:	10800ef0 	cmpltui	r2,r2,59
 20189d4:	103fea1e 	bne	r2,zero,2018980 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 20189d8:	e0bffe17 	ldw	r2,-8(fp)
 20189dc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 20189e0:	e0bffe17 	ldw	r2,-8(fp)
 20189e4:	00c00fc4 	movi	r3,63
 20189e8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 20189ec:	e0bffe17 	ldw	r2,-8(fp)
 20189f0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 20189f4:	008080f4 	movhi	r2,515
 20189f8:	10aa9204 	addi	r2,r2,-21944
 20189fc:	d0a74015 	stw	r2,-25344(gp)
#endif
}
 2018a00:	0001883a 	nop
 2018a04:	e037883a 	mov	sp,fp
 2018a08:	dfc00117 	ldw	ra,4(sp)
 2018a0c:	df000017 	ldw	fp,0(sp)
 2018a10:	dec00204 	addi	sp,sp,8
 2018a14:	f800283a 	ret

02018a18 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2018a18:	defff804 	addi	sp,sp,-32
 2018a1c:	df000715 	stw	fp,28(sp)
 2018a20:	df000704 	addi	fp,sp,28
 2018a24:	e13ffe15 	stw	r4,-8(fp)
 2018a28:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018a2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018a30:	e0bfff17 	ldw	r2,-4(fp)
 2018a34:	1000021e 	bne	r2,zero,2018a40 <OSQAccept+0x28>
        return ((void *)0);
 2018a38:	0005883a 	mov	r2,zero
 2018a3c:	00004206 	br	2018b48 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2018a40:	e0bffe17 	ldw	r2,-8(fp)
 2018a44:	1000051e 	bne	r2,zero,2018a5c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2018a48:	e0bfff17 	ldw	r2,-4(fp)
 2018a4c:	00c00104 	movi	r3,4
 2018a50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018a54:	0005883a 	mov	r2,zero
 2018a58:	00003b06 	br	2018b48 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2018a5c:	e0bffe17 	ldw	r2,-8(fp)
 2018a60:	10800003 	ldbu	r2,0(r2)
 2018a64:	10803fcc 	andi	r2,r2,255
 2018a68:	108000a0 	cmpeqi	r2,r2,2
 2018a6c:	1000051e 	bne	r2,zero,2018a84 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2018a70:	e0bfff17 	ldw	r2,-4(fp)
 2018a74:	00c00044 	movi	r3,1
 2018a78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018a7c:	0005883a 	mov	r2,zero
 2018a80:	00003106 	br	2018b48 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a84:	0005303a 	rdctl	r2,status
 2018a88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018a8c:	e0fffd17 	ldw	r3,-12(fp)
 2018a90:	00bfff84 	movi	r2,-2
 2018a94:	1884703a 	and	r2,r3,r2
 2018a98:	1001703a 	wrctl	status,r2
  
  return context;
 2018a9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018aa0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2018aa4:	e0bffe17 	ldw	r2,-8(fp)
 2018aa8:	10800117 	ldw	r2,4(r2)
 2018aac:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2018ab0:	e0bffc17 	ldw	r2,-16(fp)
 2018ab4:	1080058b 	ldhu	r2,22(r2)
 2018ab8:	10bfffcc 	andi	r2,r2,65535
 2018abc:	10001926 	beq	r2,zero,2018b24 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2018ac0:	e0bffc17 	ldw	r2,-16(fp)
 2018ac4:	10800417 	ldw	r2,16(r2)
 2018ac8:	11000104 	addi	r4,r2,4
 2018acc:	e0fffc17 	ldw	r3,-16(fp)
 2018ad0:	19000415 	stw	r4,16(r3)
 2018ad4:	10800017 	ldw	r2,0(r2)
 2018ad8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2018adc:	e0bffc17 	ldw	r2,-16(fp)
 2018ae0:	1080058b 	ldhu	r2,22(r2)
 2018ae4:	10bfffc4 	addi	r2,r2,-1
 2018ae8:	1007883a 	mov	r3,r2
 2018aec:	e0bffc17 	ldw	r2,-16(fp)
 2018af0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2018af4:	e0bffc17 	ldw	r2,-16(fp)
 2018af8:	10c00417 	ldw	r3,16(r2)
 2018afc:	e0bffc17 	ldw	r2,-16(fp)
 2018b00:	10800217 	ldw	r2,8(r2)
 2018b04:	1880041e 	bne	r3,r2,2018b18 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 2018b08:	e0bffc17 	ldw	r2,-16(fp)
 2018b0c:	10c00117 	ldw	r3,4(r2)
 2018b10:	e0bffc17 	ldw	r2,-16(fp)
 2018b14:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2018b18:	e0bfff17 	ldw	r2,-4(fp)
 2018b1c:	10000005 	stb	zero,0(r2)
 2018b20:	00000406 	br	2018b34 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2018b24:	e0bfff17 	ldw	r2,-4(fp)
 2018b28:	00c007c4 	movi	r3,31
 2018b2c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2018b30:	e03ff915 	stw	zero,-28(fp)
 2018b34:	e0bffa17 	ldw	r2,-24(fp)
 2018b38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018b3c:	e0bffb17 	ldw	r2,-20(fp)
 2018b40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2018b44:	e0bff917 	ldw	r2,-28(fp)
}
 2018b48:	e037883a 	mov	sp,fp
 2018b4c:	df000017 	ldw	fp,0(sp)
 2018b50:	dec00104 	addi	sp,sp,4
 2018b54:	f800283a 	ret

02018b58 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2018b58:	defff404 	addi	sp,sp,-48
 2018b5c:	dfc00b15 	stw	ra,44(sp)
 2018b60:	df000a15 	stw	fp,40(sp)
 2018b64:	df000a04 	addi	fp,sp,40
 2018b68:	e13ffe15 	stw	r4,-8(fp)
 2018b6c:	2805883a 	mov	r2,r5
 2018b70:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018b74:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2018b78:	d0a74503 	ldbu	r2,-25324(gp)
 2018b7c:	10803fcc 	andi	r2,r2,255
 2018b80:	10000226 	beq	r2,zero,2018b8c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2018b84:	0005883a 	mov	r2,zero
 2018b88:	00005906 	br	2018cf0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018b8c:	0005303a 	rdctl	r2,status
 2018b90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018b94:	e0fffd17 	ldw	r3,-12(fp)
 2018b98:	00bfff84 	movi	r2,-2
 2018b9c:	1884703a 	and	r2,r3,r2
 2018ba0:	1001703a 	wrctl	status,r2
  
  return context;
 2018ba4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018ba8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2018bac:	d0a74417 	ldw	r2,-25328(gp)
 2018bb0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2018bb4:	d0a74417 	ldw	r2,-25328(gp)
 2018bb8:	10000326 	beq	r2,zero,2018bc8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2018bbc:	d0a74417 	ldw	r2,-25328(gp)
 2018bc0:	10800117 	ldw	r2,4(r2)
 2018bc4:	d0a74415 	stw	r2,-25328(gp)
 2018bc8:	e0bff717 	ldw	r2,-36(fp)
 2018bcc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018bd0:	e0bff817 	ldw	r2,-32(fp)
 2018bd4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2018bd8:	e0bff617 	ldw	r2,-40(fp)
 2018bdc:	10004326 	beq	r2,zero,2018cec <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018be0:	0005303a 	rdctl	r2,status
 2018be4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018be8:	e0fff917 	ldw	r3,-28(fp)
 2018bec:	00bfff84 	movi	r2,-2
 2018bf0:	1884703a 	and	r2,r3,r2
 2018bf4:	1001703a 	wrctl	status,r2
  
  return context;
 2018bf8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 2018bfc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2018c00:	d0a74217 	ldw	r2,-25336(gp)
 2018c04:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2018c08:	e0bffb17 	ldw	r2,-20(fp)
 2018c0c:	10002d26 	beq	r2,zero,2018cc4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2018c10:	d0a74217 	ldw	r2,-25336(gp)
 2018c14:	10800017 	ldw	r2,0(r2)
 2018c18:	d0a74215 	stw	r2,-25336(gp)
 2018c1c:	e0bff717 	ldw	r2,-36(fp)
 2018c20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018c24:	e0bffa17 	ldw	r2,-24(fp)
 2018c28:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2018c2c:	e0bffb17 	ldw	r2,-20(fp)
 2018c30:	e0fffe17 	ldw	r3,-8(fp)
 2018c34:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2018c38:	e0bfff0b 	ldhu	r2,-4(fp)
 2018c3c:	1085883a 	add	r2,r2,r2
 2018c40:	1085883a 	add	r2,r2,r2
 2018c44:	1007883a 	mov	r3,r2
 2018c48:	e0bffe17 	ldw	r2,-8(fp)
 2018c4c:	10c7883a 	add	r3,r2,r3
 2018c50:	e0bffb17 	ldw	r2,-20(fp)
 2018c54:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2018c58:	e0bffb17 	ldw	r2,-20(fp)
 2018c5c:	e0fffe17 	ldw	r3,-8(fp)
 2018c60:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2018c64:	e0bffb17 	ldw	r2,-20(fp)
 2018c68:	e0fffe17 	ldw	r3,-8(fp)
 2018c6c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2018c70:	e0bffb17 	ldw	r2,-20(fp)
 2018c74:	e0ffff0b 	ldhu	r3,-4(fp)
 2018c78:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2018c7c:	e0bffb17 	ldw	r2,-20(fp)
 2018c80:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2018c84:	e0bff617 	ldw	r2,-40(fp)
 2018c88:	00c00084 	movi	r3,2
 2018c8c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2018c90:	e0bff617 	ldw	r2,-40(fp)
 2018c94:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2018c98:	e0bff617 	ldw	r2,-40(fp)
 2018c9c:	e0fffb17 	ldw	r3,-20(fp)
 2018ca0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2018ca4:	e0bff617 	ldw	r2,-40(fp)
 2018ca8:	00c00fc4 	movi	r3,63
 2018cac:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2018cb0:	e0bff617 	ldw	r2,-40(fp)
 2018cb4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2018cb8:	e13ff617 	ldw	r4,-40(fp)
 2018cbc:	20153e80 	call	20153e8 <OS_EventWaitListInit>
 2018cc0:	00000a06 	br	2018cec <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2018cc4:	d0e74417 	ldw	r3,-25328(gp)
 2018cc8:	e0bff617 	ldw	r2,-40(fp)
 2018ccc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2018cd0:	e0bff617 	ldw	r2,-40(fp)
 2018cd4:	d0a74415 	stw	r2,-25328(gp)
 2018cd8:	e0bff717 	ldw	r2,-36(fp)
 2018cdc:	e0bffc15 	stw	r2,-16(fp)
 2018ce0:	e0bffc17 	ldw	r2,-16(fp)
 2018ce4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2018ce8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2018cec:	e0bff617 	ldw	r2,-40(fp)
}
 2018cf0:	e037883a 	mov	sp,fp
 2018cf4:	dfc00117 	ldw	ra,4(sp)
 2018cf8:	df000017 	ldw	fp,0(sp)
 2018cfc:	dec00204 	addi	sp,sp,8
 2018d00:	f800283a 	ret

02018d04 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2018d04:	defff204 	addi	sp,sp,-56
 2018d08:	dfc00d15 	stw	ra,52(sp)
 2018d0c:	df000c15 	stw	fp,48(sp)
 2018d10:	df000c04 	addi	fp,sp,48
 2018d14:	e13ffd15 	stw	r4,-12(fp)
 2018d18:	2805883a 	mov	r2,r5
 2018d1c:	e1bfff15 	stw	r6,-4(fp)
 2018d20:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018d24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018d28:	e0bfff17 	ldw	r2,-4(fp)
 2018d2c:	1000021e 	bne	r2,zero,2018d38 <OSQDel+0x34>
        return (pevent);
 2018d30:	e0bffd17 	ldw	r2,-12(fp)
 2018d34:	00008e06 	br	2018f70 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2018d38:	e0bffd17 	ldw	r2,-12(fp)
 2018d3c:	1000051e 	bne	r2,zero,2018d54 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018d40:	e0bfff17 	ldw	r2,-4(fp)
 2018d44:	00c00104 	movi	r3,4
 2018d48:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018d4c:	e0bffd17 	ldw	r2,-12(fp)
 2018d50:	00008706 	br	2018f70 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2018d54:	e0bffd17 	ldw	r2,-12(fp)
 2018d58:	10800003 	ldbu	r2,0(r2)
 2018d5c:	10803fcc 	andi	r2,r2,255
 2018d60:	108000a0 	cmpeqi	r2,r2,2
 2018d64:	1000051e 	bne	r2,zero,2018d7c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2018d68:	e0bfff17 	ldw	r2,-4(fp)
 2018d6c:	00c00044 	movi	r3,1
 2018d70:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018d74:	e0bffd17 	ldw	r2,-12(fp)
 2018d78:	00007d06 	br	2018f70 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2018d7c:	d0a74503 	ldbu	r2,-25324(gp)
 2018d80:	10803fcc 	andi	r2,r2,255
 2018d84:	10000526 	beq	r2,zero,2018d9c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2018d88:	e0bfff17 	ldw	r2,-4(fp)
 2018d8c:	00c003c4 	movi	r3,15
 2018d90:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018d94:	e0bffd17 	ldw	r2,-12(fp)
 2018d98:	00007506 	br	2018f70 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018d9c:	0005303a 	rdctl	r2,status
 2018da0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018da4:	e0fffc17 	ldw	r3,-16(fp)
 2018da8:	00bfff84 	movi	r2,-2
 2018dac:	1884703a 	and	r2,r3,r2
 2018db0:	1001703a 	wrctl	status,r2
  
  return context;
 2018db4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018db8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2018dbc:	e0bffd17 	ldw	r2,-12(fp)
 2018dc0:	10800283 	ldbu	r2,10(r2)
 2018dc4:	10803fcc 	andi	r2,r2,255
 2018dc8:	10000326 	beq	r2,zero,2018dd8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2018dcc:	00800044 	movi	r2,1
 2018dd0:	e0bff405 	stb	r2,-48(fp)
 2018dd4:	00000106 	br	2018ddc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2018dd8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2018ddc:	e0bffe03 	ldbu	r2,-8(fp)
 2018de0:	10000326 	beq	r2,zero,2018df0 <OSQDel+0xec>
 2018de4:	10800060 	cmpeqi	r2,r2,1
 2018de8:	1000301e 	bne	r2,zero,2018eac <OSQDel+0x1a8>
 2018dec:	00005506 	br	2018f44 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2018df0:	e0bff403 	ldbu	r2,-48(fp)
 2018df4:	10001e1e 	bne	r2,zero,2018e70 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2018df8:	e0bffd17 	ldw	r2,-12(fp)
 2018dfc:	00c00fc4 	movi	r3,63
 2018e00:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2018e04:	e0bffd17 	ldw	r2,-12(fp)
 2018e08:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2018e0c:	e0bffd17 	ldw	r2,-12(fp)
 2018e10:	10800117 	ldw	r2,4(r2)
 2018e14:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2018e18:	d0e74217 	ldw	r3,-25336(gp)
 2018e1c:	e0bff817 	ldw	r2,-32(fp)
 2018e20:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2018e24:	e0bff817 	ldw	r2,-32(fp)
 2018e28:	d0a74215 	stw	r2,-25336(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018e2c:	e0bffd17 	ldw	r2,-12(fp)
 2018e30:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2018e34:	d0e74417 	ldw	r3,-25328(gp)
 2018e38:	e0bffd17 	ldw	r2,-12(fp)
 2018e3c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2018e40:	e0bffd17 	ldw	r2,-12(fp)
 2018e44:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2018e48:	e0bffd17 	ldw	r2,-12(fp)
 2018e4c:	d0a74415 	stw	r2,-25328(gp)
 2018e50:	e0bff617 	ldw	r2,-40(fp)
 2018e54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e58:	e0bff717 	ldw	r2,-36(fp)
 2018e5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2018e60:	e0bfff17 	ldw	r2,-4(fp)
 2018e64:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2018e68:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2018e6c:	00003f06 	br	2018f6c <OSQDel+0x268>
 2018e70:	e0bff617 	ldw	r2,-40(fp)
 2018e74:	e0bff915 	stw	r2,-28(fp)
 2018e78:	e0bff917 	ldw	r2,-28(fp)
 2018e7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2018e80:	e0bfff17 	ldw	r2,-4(fp)
 2018e84:	00c01244 	movi	r3,73
 2018e88:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2018e8c:	e0bffd17 	ldw	r2,-12(fp)
 2018e90:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2018e94:	00003506 	br	2018f6c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2018e98:	000f883a 	mov	r7,zero
 2018e9c:	01800104 	movi	r6,4
 2018ea0:	000b883a 	mov	r5,zero
 2018ea4:	e13ffd17 	ldw	r4,-12(fp)
 2018ea8:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2018eac:	e0bffd17 	ldw	r2,-12(fp)
 2018eb0:	10800283 	ldbu	r2,10(r2)
 2018eb4:	10803fcc 	andi	r2,r2,255
 2018eb8:	103ff71e 	bne	r2,zero,2018e98 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2018ebc:	e0bffd17 	ldw	r2,-12(fp)
 2018ec0:	00c00fc4 	movi	r3,63
 2018ec4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2018ec8:	e0bffd17 	ldw	r2,-12(fp)
 2018ecc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2018ed0:	e0bffd17 	ldw	r2,-12(fp)
 2018ed4:	10800117 	ldw	r2,4(r2)
 2018ed8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2018edc:	d0e74217 	ldw	r3,-25336(gp)
 2018ee0:	e0bff817 	ldw	r2,-32(fp)
 2018ee4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2018ee8:	e0bff817 	ldw	r2,-32(fp)
 2018eec:	d0a74215 	stw	r2,-25336(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018ef0:	e0bffd17 	ldw	r2,-12(fp)
 2018ef4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2018ef8:	d0e74417 	ldw	r3,-25328(gp)
 2018efc:	e0bffd17 	ldw	r2,-12(fp)
 2018f00:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2018f04:	e0bffd17 	ldw	r2,-12(fp)
 2018f08:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2018f0c:	e0bffd17 	ldw	r2,-12(fp)
 2018f10:	d0a74415 	stw	r2,-25328(gp)
 2018f14:	e0bff617 	ldw	r2,-40(fp)
 2018f18:	e0bffa15 	stw	r2,-24(fp)
 2018f1c:	e0bffa17 	ldw	r2,-24(fp)
 2018f20:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2018f24:	e0bff403 	ldbu	r2,-48(fp)
 2018f28:	10800058 	cmpnei	r2,r2,1
 2018f2c:	1000011e 	bne	r2,zero,2018f34 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2018f30:	20158840 	call	2015884 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2018f34:	e0bfff17 	ldw	r2,-4(fp)
 2018f38:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2018f3c:	e03ff515 	stw	zero,-44(fp)
             break;
 2018f40:	00000a06 	br	2018f6c <OSQDel+0x268>
 2018f44:	e0bff617 	ldw	r2,-40(fp)
 2018f48:	e0bffb15 	stw	r2,-20(fp)
 2018f4c:	e0bffb17 	ldw	r2,-20(fp)
 2018f50:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2018f54:	e0bfff17 	ldw	r2,-4(fp)
 2018f58:	00c001c4 	movi	r3,7
 2018f5c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2018f60:	e0bffd17 	ldw	r2,-12(fp)
 2018f64:	e0bff515 	stw	r2,-44(fp)
             break;
 2018f68:	0001883a 	nop
    }
    return (pevent_return);
 2018f6c:	e0bff517 	ldw	r2,-44(fp)
}
 2018f70:	e037883a 	mov	sp,fp
 2018f74:	dfc00117 	ldw	ra,4(sp)
 2018f78:	df000017 	ldw	fp,0(sp)
 2018f7c:	dec00204 	addi	sp,sp,8
 2018f80:	f800283a 	ret

02018f84 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2018f84:	defffa04 	addi	sp,sp,-24
 2018f88:	df000515 	stw	fp,20(sp)
 2018f8c:	df000504 	addi	fp,sp,20
 2018f90:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018f94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2018f98:	e0bfff17 	ldw	r2,-4(fp)
 2018f9c:	1000021e 	bne	r2,zero,2018fa8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2018fa0:	00800104 	movi	r2,4
 2018fa4:	00002106 	br	201902c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2018fa8:	e0bfff17 	ldw	r2,-4(fp)
 2018fac:	10800003 	ldbu	r2,0(r2)
 2018fb0:	10803fcc 	andi	r2,r2,255
 2018fb4:	108000a0 	cmpeqi	r2,r2,2
 2018fb8:	1000021e 	bne	r2,zero,2018fc4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2018fbc:	00800044 	movi	r2,1
 2018fc0:	00001a06 	br	201902c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018fc4:	0005303a 	rdctl	r2,status
 2018fc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018fcc:	e0fffd17 	ldw	r3,-12(fp)
 2018fd0:	00bfff84 	movi	r2,-2
 2018fd4:	1884703a 	and	r2,r3,r2
 2018fd8:	1001703a 	wrctl	status,r2
  
  return context;
 2018fdc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018fe0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2018fe4:	e0bfff17 	ldw	r2,-4(fp)
 2018fe8:	10800117 	ldw	r2,4(r2)
 2018fec:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2018ff0:	e0bffc17 	ldw	r2,-16(fp)
 2018ff4:	10c00117 	ldw	r3,4(r2)
 2018ff8:	e0bffc17 	ldw	r2,-16(fp)
 2018ffc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2019000:	e0bffc17 	ldw	r2,-16(fp)
 2019004:	10c00117 	ldw	r3,4(r2)
 2019008:	e0bffc17 	ldw	r2,-16(fp)
 201900c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2019010:	e0bffc17 	ldw	r2,-16(fp)
 2019014:	1000058d 	sth	zero,22(r2)
 2019018:	e0bffb17 	ldw	r2,-20(fp)
 201901c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019020:	e0bffe17 	ldw	r2,-8(fp)
 2019024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019028:	0005883a 	mov	r2,zero
}
 201902c:	e037883a 	mov	sp,fp
 2019030:	df000017 	ldw	fp,0(sp)
 2019034:	dec00104 	addi	sp,sp,4
 2019038:	f800283a 	ret

0201903c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201903c:	defff304 	addi	sp,sp,-52
 2019040:	dfc00c15 	stw	ra,48(sp)
 2019044:	df000b15 	stw	fp,44(sp)
 2019048:	df000b04 	addi	fp,sp,44
 201904c:	e13ffd15 	stw	r4,-12(fp)
 2019050:	2805883a 	mov	r2,r5
 2019054:	e1bfff15 	stw	r6,-4(fp)
 2019058:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201905c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019060:	e0bfff17 	ldw	r2,-4(fp)
 2019064:	1000021e 	bne	r2,zero,2019070 <OSQPend+0x34>
        return ((void *)0);
 2019068:	0005883a 	mov	r2,zero
 201906c:	00009106 	br	20192b4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2019070:	e0bffd17 	ldw	r2,-12(fp)
 2019074:	1000051e 	bne	r2,zero,201908c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019078:	e0bfff17 	ldw	r2,-4(fp)
 201907c:	00c00104 	movi	r3,4
 2019080:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2019084:	0005883a 	mov	r2,zero
 2019088:	00008a06 	br	20192b4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201908c:	e0bffd17 	ldw	r2,-12(fp)
 2019090:	10800003 	ldbu	r2,0(r2)
 2019094:	10803fcc 	andi	r2,r2,255
 2019098:	108000a0 	cmpeqi	r2,r2,2
 201909c:	1000051e 	bne	r2,zero,20190b4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20190a0:	e0bfff17 	ldw	r2,-4(fp)
 20190a4:	00c00044 	movi	r3,1
 20190a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20190ac:	0005883a 	mov	r2,zero
 20190b0:	00008006 	br	20192b4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20190b4:	d0a74503 	ldbu	r2,-25324(gp)
 20190b8:	10803fcc 	andi	r2,r2,255
 20190bc:	10000526 	beq	r2,zero,20190d4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 20190c0:	e0bfff17 	ldw	r2,-4(fp)
 20190c4:	00c00084 	movi	r3,2
 20190c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20190cc:	0005883a 	mov	r2,zero
 20190d0:	00007806 	br	20192b4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 20190d4:	d0a73703 	ldbu	r2,-25380(gp)
 20190d8:	10803fcc 	andi	r2,r2,255
 20190dc:	10000526 	beq	r2,zero,20190f4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 20190e0:	e0bfff17 	ldw	r2,-4(fp)
 20190e4:	00c00344 	movi	r3,13
 20190e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20190ec:	0005883a 	mov	r2,zero
 20190f0:	00007006 	br	20192b4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20190f4:	0005303a 	rdctl	r2,status
 20190f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20190fc:	e0fffc17 	ldw	r3,-16(fp)
 2019100:	00bfff84 	movi	r2,-2
 2019104:	1884703a 	and	r2,r3,r2
 2019108:	1001703a 	wrctl	status,r2
  
  return context;
 201910c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019110:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2019114:	e0bffd17 	ldw	r2,-12(fp)
 2019118:	10800117 	ldw	r2,4(r2)
 201911c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2019120:	e0bff817 	ldw	r2,-32(fp)
 2019124:	1080058b 	ldhu	r2,22(r2)
 2019128:	10bfffcc 	andi	r2,r2,65535
 201912c:	10001e26 	beq	r2,zero,20191a8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2019130:	e0bff817 	ldw	r2,-32(fp)
 2019134:	10800417 	ldw	r2,16(r2)
 2019138:	11000104 	addi	r4,r2,4
 201913c:	e0fff817 	ldw	r3,-32(fp)
 2019140:	19000415 	stw	r4,16(r3)
 2019144:	10800017 	ldw	r2,0(r2)
 2019148:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201914c:	e0bff817 	ldw	r2,-32(fp)
 2019150:	1080058b 	ldhu	r2,22(r2)
 2019154:	10bfffc4 	addi	r2,r2,-1
 2019158:	1007883a 	mov	r3,r2
 201915c:	e0bff817 	ldw	r2,-32(fp)
 2019160:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2019164:	e0bff817 	ldw	r2,-32(fp)
 2019168:	10c00417 	ldw	r3,16(r2)
 201916c:	e0bff817 	ldw	r2,-32(fp)
 2019170:	10800217 	ldw	r2,8(r2)
 2019174:	1880041e 	bne	r3,r2,2019188 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2019178:	e0bff817 	ldw	r2,-32(fp)
 201917c:	10c00117 	ldw	r3,4(r2)
 2019180:	e0bff817 	ldw	r2,-32(fp)
 2019184:	10c00415 	stw	r3,16(r2)
 2019188:	e0bff617 	ldw	r2,-40(fp)
 201918c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019190:	e0bff717 	ldw	r2,-36(fp)
 2019194:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2019198:	e0bfff17 	ldw	r2,-4(fp)
 201919c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 20191a0:	e0bff517 	ldw	r2,-44(fp)
 20191a4:	00004306 	br	20192b4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 20191a8:	d0a74617 	ldw	r2,-25320(gp)
 20191ac:	d0e74617 	ldw	r3,-25320(gp)
 20191b0:	18c00c03 	ldbu	r3,48(r3)
 20191b4:	18c00114 	ori	r3,r3,4
 20191b8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20191bc:	d0a74617 	ldw	r2,-25320(gp)
 20191c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 20191c4:	d0a74617 	ldw	r2,-25320(gp)
 20191c8:	e0fffe0b 	ldhu	r3,-8(fp)
 20191cc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 20191d0:	e13ffd17 	ldw	r4,-12(fp)
 20191d4:	2014fd00 	call	2014fd0 <OS_EventTaskWait>
 20191d8:	e0bff617 	ldw	r2,-40(fp)
 20191dc:	e0bffb15 	stw	r2,-20(fp)
 20191e0:	e0bffb17 	ldw	r2,-20(fp)
 20191e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 20191e8:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20191ec:	0005303a 	rdctl	r2,status
 20191f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20191f4:	e0fff917 	ldw	r3,-28(fp)
 20191f8:	00bfff84 	movi	r2,-2
 20191fc:	1884703a 	and	r2,r3,r2
 2019200:	1001703a 	wrctl	status,r2
  
  return context;
 2019204:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2019208:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201920c:	d0a74617 	ldw	r2,-25320(gp)
 2019210:	10800c43 	ldbu	r2,49(r2)
 2019214:	10803fcc 	andi	r2,r2,255
 2019218:	10000326 	beq	r2,zero,2019228 <OSQPend+0x1ec>
 201921c:	108000a0 	cmpeqi	r2,r2,2
 2019220:	1000071e 	bne	r2,zero,2019240 <OSQPend+0x204>
 2019224:	00000b06 	br	2019254 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2019228:	d0a74617 	ldw	r2,-25320(gp)
 201922c:	10800917 	ldw	r2,36(r2)
 2019230:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2019234:	e0bfff17 	ldw	r2,-4(fp)
 2019238:	10000005 	stb	zero,0(r2)
             break;
 201923c:	00000e06 	br	2019278 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2019240:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2019244:	e0bfff17 	ldw	r2,-4(fp)
 2019248:	00c00384 	movi	r3,14
 201924c:	10c00005 	stb	r3,0(r2)
             break;
 2019250:	00000906 	br	2019278 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2019254:	d0a74617 	ldw	r2,-25320(gp)
 2019258:	e17ffd17 	ldw	r5,-12(fp)
 201925c:	1009883a 	mov	r4,r2
 2019260:	20152300 	call	2015230 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2019264:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2019268:	e0bfff17 	ldw	r2,-4(fp)
 201926c:	00c00284 	movi	r3,10
 2019270:	10c00005 	stb	r3,0(r2)
             break;
 2019274:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2019278:	d0a74617 	ldw	r2,-25320(gp)
 201927c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2019280:	d0a74617 	ldw	r2,-25320(gp)
 2019284:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2019288:	d0a74617 	ldw	r2,-25320(gp)
 201928c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2019290:	d0a74617 	ldw	r2,-25320(gp)
 2019294:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2019298:	d0a74617 	ldw	r2,-25320(gp)
 201929c:	10000915 	stw	zero,36(r2)
 20192a0:	e0bff617 	ldw	r2,-40(fp)
 20192a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20192a8:	e0bffa17 	ldw	r2,-24(fp)
 20192ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 20192b0:	e0bff517 	ldw	r2,-44(fp)
}
 20192b4:	e037883a 	mov	sp,fp
 20192b8:	dfc00117 	ldw	ra,4(sp)
 20192bc:	df000017 	ldw	fp,0(sp)
 20192c0:	dec00204 	addi	sp,sp,8
 20192c4:	f800283a 	ret

020192c8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20192c8:	defff604 	addi	sp,sp,-40
 20192cc:	dfc00915 	stw	ra,36(sp)
 20192d0:	df000815 	stw	fp,32(sp)
 20192d4:	df000804 	addi	fp,sp,32
 20192d8:	e13ffd15 	stw	r4,-12(fp)
 20192dc:	2805883a 	mov	r2,r5
 20192e0:	e1bfff15 	stw	r6,-4(fp)
 20192e4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20192e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20192ec:	e0bfff17 	ldw	r2,-4(fp)
 20192f0:	1000021e 	bne	r2,zero,20192fc <OSQPendAbort+0x34>
        return (0);
 20192f4:	0005883a 	mov	r2,zero
 20192f8:	00004906 	br	2019420 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20192fc:	e0bffd17 	ldw	r2,-12(fp)
 2019300:	1000051e 	bne	r2,zero,2019318 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019304:	e0bfff17 	ldw	r2,-4(fp)
 2019308:	00c00104 	movi	r3,4
 201930c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019310:	0005883a 	mov	r2,zero
 2019314:	00004206 	br	2019420 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2019318:	e0bffd17 	ldw	r2,-12(fp)
 201931c:	10800003 	ldbu	r2,0(r2)
 2019320:	10803fcc 	andi	r2,r2,255
 2019324:	108000a0 	cmpeqi	r2,r2,2
 2019328:	1000051e 	bne	r2,zero,2019340 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201932c:	e0bfff17 	ldw	r2,-4(fp)
 2019330:	00c00044 	movi	r3,1
 2019334:	10c00005 	stb	r3,0(r2)
        return (0);
 2019338:	0005883a 	mov	r2,zero
 201933c:	00003806 	br	2019420 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019340:	0005303a 	rdctl	r2,status
 2019344:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019348:	e0fffc17 	ldw	r3,-16(fp)
 201934c:	00bfff84 	movi	r2,-2
 2019350:	1884703a 	and	r2,r3,r2
 2019354:	1001703a 	wrctl	status,r2
  
  return context;
 2019358:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201935c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2019360:	e0bffd17 	ldw	r2,-12(fp)
 2019364:	10800283 	ldbu	r2,10(r2)
 2019368:	10803fcc 	andi	r2,r2,255
 201936c:	10002526 	beq	r2,zero,2019404 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 2019370:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2019374:	e0bffe03 	ldbu	r2,-8(fp)
 2019378:	10800060 	cmpeqi	r2,r2,1
 201937c:	10000e26 	beq	r2,zero,20193b8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2019380:	00000806 	br	20193a4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2019384:	01c00084 	movi	r7,2
 2019388:	01800104 	movi	r6,4
 201938c:	000b883a 	mov	r5,zero
 2019390:	e13ffd17 	ldw	r4,-12(fp)
 2019394:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                     nbr_tasks++;
 2019398:	e0bff803 	ldbu	r2,-32(fp)
 201939c:	10800044 	addi	r2,r2,1
 20193a0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20193a4:	e0bffd17 	ldw	r2,-12(fp)
 20193a8:	10800283 	ldbu	r2,10(r2)
 20193ac:	10803fcc 	andi	r2,r2,255
 20193b0:	103ff41e 	bne	r2,zero,2019384 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20193b4:	00000906 	br	20193dc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20193b8:	01c00084 	movi	r7,2
 20193bc:	01800104 	movi	r6,4
 20193c0:	000b883a 	mov	r5,zero
 20193c4:	e13ffd17 	ldw	r4,-12(fp)
 20193c8:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 nbr_tasks++;
 20193cc:	e0bff803 	ldbu	r2,-32(fp)
 20193d0:	10800044 	addi	r2,r2,1
 20193d4:	e0bff805 	stb	r2,-32(fp)
                 break;
 20193d8:	0001883a 	nop
 20193dc:	e0bff917 	ldw	r2,-28(fp)
 20193e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20193e4:	e0bffa17 	ldw	r2,-24(fp)
 20193e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20193ec:	20158840 	call	2015884 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20193f0:	e0bfff17 	ldw	r2,-4(fp)
 20193f4:	00c00384 	movi	r3,14
 20193f8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 20193fc:	e0bff803 	ldbu	r2,-32(fp)
 2019400:	00000706 	br	2019420 <OSQPendAbort+0x158>
 2019404:	e0bff917 	ldw	r2,-28(fp)
 2019408:	e0bffb15 	stw	r2,-20(fp)
 201940c:	e0bffb17 	ldw	r2,-20(fp)
 2019410:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019414:	e0bfff17 	ldw	r2,-4(fp)
 2019418:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201941c:	0005883a 	mov	r2,zero
}
 2019420:	e037883a 	mov	sp,fp
 2019424:	dfc00117 	ldw	ra,4(sp)
 2019428:	df000017 	ldw	fp,0(sp)
 201942c:	dec00204 	addi	sp,sp,8
 2019430:	f800283a 	ret

02019434 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2019434:	defff604 	addi	sp,sp,-40
 2019438:	dfc00915 	stw	ra,36(sp)
 201943c:	df000815 	stw	fp,32(sp)
 2019440:	df000804 	addi	fp,sp,32
 2019444:	e13ffe15 	stw	r4,-8(fp)
 2019448:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201944c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019450:	e0bffe17 	ldw	r2,-8(fp)
 2019454:	1000021e 	bne	r2,zero,2019460 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2019458:	00800104 	movi	r2,4
 201945c:	00004a06 	br	2019588 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019460:	e0bffe17 	ldw	r2,-8(fp)
 2019464:	10800003 	ldbu	r2,0(r2)
 2019468:	10803fcc 	andi	r2,r2,255
 201946c:	108000a0 	cmpeqi	r2,r2,2
 2019470:	1000021e 	bne	r2,zero,201947c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 2019474:	00800044 	movi	r2,1
 2019478:	00004306 	br	2019588 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201947c:	0005303a 	rdctl	r2,status
 2019480:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019484:	e0fffd17 	ldw	r3,-12(fp)
 2019488:	00bfff84 	movi	r2,-2
 201948c:	1884703a 	and	r2,r3,r2
 2019490:	1001703a 	wrctl	status,r2
  
  return context;
 2019494:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019498:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201949c:	e0bffe17 	ldw	r2,-8(fp)
 20194a0:	10800283 	ldbu	r2,10(r2)
 20194a4:	10803fcc 	andi	r2,r2,255
 20194a8:	10000c26 	beq	r2,zero,20194dc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20194ac:	000f883a 	mov	r7,zero
 20194b0:	01800104 	movi	r6,4
 20194b4:	e17fff17 	ldw	r5,-4(fp)
 20194b8:	e13ffe17 	ldw	r4,-8(fp)
 20194bc:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 20194c0:	e0bff817 	ldw	r2,-32(fp)
 20194c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20194c8:	e0bff917 	ldw	r2,-28(fp)
 20194cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 20194d0:	20158840 	call	2015884 <OS_Sched>
        return (OS_ERR_NONE);
 20194d4:	0005883a 	mov	r2,zero
 20194d8:	00002b06 	br	2019588 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 20194dc:	e0bffe17 	ldw	r2,-8(fp)
 20194e0:	10800117 	ldw	r2,4(r2)
 20194e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 20194e8:	e0bffb17 	ldw	r2,-20(fp)
 20194ec:	10c0058b 	ldhu	r3,22(r2)
 20194f0:	e0bffb17 	ldw	r2,-20(fp)
 20194f4:	1080050b 	ldhu	r2,20(r2)
 20194f8:	18ffffcc 	andi	r3,r3,65535
 20194fc:	10bfffcc 	andi	r2,r2,65535
 2019500:	18800636 	bltu	r3,r2,201951c <OSQPost+0xe8>
 2019504:	e0bff817 	ldw	r2,-32(fp)
 2019508:	e0bffa15 	stw	r2,-24(fp)
 201950c:	e0bffa17 	ldw	r2,-24(fp)
 2019510:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019514:	00800784 	movi	r2,30
 2019518:	00001b06 	br	2019588 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201951c:	e0bffb17 	ldw	r2,-20(fp)
 2019520:	10800317 	ldw	r2,12(r2)
 2019524:	11000104 	addi	r4,r2,4
 2019528:	e0fffb17 	ldw	r3,-20(fp)
 201952c:	19000315 	stw	r4,12(r3)
 2019530:	e0ffff17 	ldw	r3,-4(fp)
 2019534:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2019538:	e0bffb17 	ldw	r2,-20(fp)
 201953c:	1080058b 	ldhu	r2,22(r2)
 2019540:	10800044 	addi	r2,r2,1
 2019544:	1007883a 	mov	r3,r2
 2019548:	e0bffb17 	ldw	r2,-20(fp)
 201954c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2019550:	e0bffb17 	ldw	r2,-20(fp)
 2019554:	10c00317 	ldw	r3,12(r2)
 2019558:	e0bffb17 	ldw	r2,-20(fp)
 201955c:	10800217 	ldw	r2,8(r2)
 2019560:	1880041e 	bne	r3,r2,2019574 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 2019564:	e0bffb17 	ldw	r2,-20(fp)
 2019568:	10c00117 	ldw	r3,4(r2)
 201956c:	e0bffb17 	ldw	r2,-20(fp)
 2019570:	10c00315 	stw	r3,12(r2)
 2019574:	e0bff817 	ldw	r2,-32(fp)
 2019578:	e0bffc15 	stw	r2,-16(fp)
 201957c:	e0bffc17 	ldw	r2,-16(fp)
 2019580:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019584:	0005883a 	mov	r2,zero
}
 2019588:	e037883a 	mov	sp,fp
 201958c:	dfc00117 	ldw	ra,4(sp)
 2019590:	df000017 	ldw	fp,0(sp)
 2019594:	dec00204 	addi	sp,sp,8
 2019598:	f800283a 	ret

0201959c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201959c:	defff604 	addi	sp,sp,-40
 20195a0:	dfc00915 	stw	ra,36(sp)
 20195a4:	df000815 	stw	fp,32(sp)
 20195a8:	df000804 	addi	fp,sp,32
 20195ac:	e13ffe15 	stw	r4,-8(fp)
 20195b0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20195b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20195b8:	e0bffe17 	ldw	r2,-8(fp)
 20195bc:	1000021e 	bne	r2,zero,20195c8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20195c0:	00800104 	movi	r2,4
 20195c4:	00004c06 	br	20196f8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20195c8:	e0bffe17 	ldw	r2,-8(fp)
 20195cc:	10800003 	ldbu	r2,0(r2)
 20195d0:	10803fcc 	andi	r2,r2,255
 20195d4:	108000a0 	cmpeqi	r2,r2,2
 20195d8:	1000021e 	bne	r2,zero,20195e4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 20195dc:	00800044 	movi	r2,1
 20195e0:	00004506 	br	20196f8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20195e4:	0005303a 	rdctl	r2,status
 20195e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20195ec:	e0fffd17 	ldw	r3,-12(fp)
 20195f0:	00bfff84 	movi	r2,-2
 20195f4:	1884703a 	and	r2,r3,r2
 20195f8:	1001703a 	wrctl	status,r2
  
  return context;
 20195fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019600:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 2019604:	e0bffe17 	ldw	r2,-8(fp)
 2019608:	10800283 	ldbu	r2,10(r2)
 201960c:	10803fcc 	andi	r2,r2,255
 2019610:	10000c26 	beq	r2,zero,2019644 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019614:	000f883a 	mov	r7,zero
 2019618:	01800104 	movi	r6,4
 201961c:	e17fff17 	ldw	r5,-4(fp)
 2019620:	e13ffe17 	ldw	r4,-8(fp)
 2019624:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 2019628:	e0bff817 	ldw	r2,-32(fp)
 201962c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019630:	e0bff917 	ldw	r2,-28(fp)
 2019634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2019638:	20158840 	call	2015884 <OS_Sched>
        return (OS_ERR_NONE);
 201963c:	0005883a 	mov	r2,zero
 2019640:	00002d06 	br	20196f8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019644:	e0bffe17 	ldw	r2,-8(fp)
 2019648:	10800117 	ldw	r2,4(r2)
 201964c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2019650:	e0bffb17 	ldw	r2,-20(fp)
 2019654:	10c0058b 	ldhu	r3,22(r2)
 2019658:	e0bffb17 	ldw	r2,-20(fp)
 201965c:	1080050b 	ldhu	r2,20(r2)
 2019660:	18ffffcc 	andi	r3,r3,65535
 2019664:	10bfffcc 	andi	r2,r2,65535
 2019668:	18800636 	bltu	r3,r2,2019684 <OSQPostFront+0xe8>
 201966c:	e0bff817 	ldw	r2,-32(fp)
 2019670:	e0bffa15 	stw	r2,-24(fp)
 2019674:	e0bffa17 	ldw	r2,-24(fp)
 2019678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201967c:	00800784 	movi	r2,30
 2019680:	00001d06 	br	20196f8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2019684:	e0bffb17 	ldw	r2,-20(fp)
 2019688:	10c00417 	ldw	r3,16(r2)
 201968c:	e0bffb17 	ldw	r2,-20(fp)
 2019690:	10800117 	ldw	r2,4(r2)
 2019694:	1880041e 	bne	r3,r2,20196a8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2019698:	e0bffb17 	ldw	r2,-20(fp)
 201969c:	10c00217 	ldw	r3,8(r2)
 20196a0:	e0bffb17 	ldw	r2,-20(fp)
 20196a4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 20196a8:	e0bffb17 	ldw	r2,-20(fp)
 20196ac:	10800417 	ldw	r2,16(r2)
 20196b0:	10ffff04 	addi	r3,r2,-4
 20196b4:	e0bffb17 	ldw	r2,-20(fp)
 20196b8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 20196bc:	e0bffb17 	ldw	r2,-20(fp)
 20196c0:	10800417 	ldw	r2,16(r2)
 20196c4:	e0ffff17 	ldw	r3,-4(fp)
 20196c8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20196cc:	e0bffb17 	ldw	r2,-20(fp)
 20196d0:	1080058b 	ldhu	r2,22(r2)
 20196d4:	10800044 	addi	r2,r2,1
 20196d8:	1007883a 	mov	r3,r2
 20196dc:	e0bffb17 	ldw	r2,-20(fp)
 20196e0:	10c0058d 	sth	r3,22(r2)
 20196e4:	e0bff817 	ldw	r2,-32(fp)
 20196e8:	e0bffc15 	stw	r2,-16(fp)
 20196ec:	e0bffc17 	ldw	r2,-16(fp)
 20196f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20196f4:	0005883a 	mov	r2,zero
}
 20196f8:	e037883a 	mov	sp,fp
 20196fc:	dfc00117 	ldw	ra,4(sp)
 2019700:	df000017 	ldw	fp,0(sp)
 2019704:	dec00204 	addi	sp,sp,8
 2019708:	f800283a 	ret

0201970c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201970c:	defff504 	addi	sp,sp,-44
 2019710:	dfc00a15 	stw	ra,40(sp)
 2019714:	df000915 	stw	fp,36(sp)
 2019718:	df000904 	addi	fp,sp,36
 201971c:	e13ffd15 	stw	r4,-12(fp)
 2019720:	e17ffe15 	stw	r5,-8(fp)
 2019724:	3005883a 	mov	r2,r6
 2019728:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201972c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019730:	e0bffd17 	ldw	r2,-12(fp)
 2019734:	1000021e 	bne	r2,zero,2019740 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2019738:	00800104 	movi	r2,4
 201973c:	00007106 	br	2019904 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2019740:	e0bffd17 	ldw	r2,-12(fp)
 2019744:	10800003 	ldbu	r2,0(r2)
 2019748:	10803fcc 	andi	r2,r2,255
 201974c:	108000a0 	cmpeqi	r2,r2,2
 2019750:	1000021e 	bne	r2,zero,201975c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 2019754:	00800044 	movi	r2,1
 2019758:	00006a06 	br	2019904 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201975c:	0005303a 	rdctl	r2,status
 2019760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019764:	e0fffc17 	ldw	r3,-16(fp)
 2019768:	00bfff84 	movi	r2,-2
 201976c:	1884703a 	and	r2,r3,r2
 2019770:	1001703a 	wrctl	status,r2
  
  return context;
 2019774:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019778:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201977c:	e0bffd17 	ldw	r2,-12(fp)
 2019780:	10800283 	ldbu	r2,10(r2)
 2019784:	10803fcc 	andi	r2,r2,255
 2019788:	10001d26 	beq	r2,zero,2019800 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201978c:	e0bfff03 	ldbu	r2,-4(fp)
 2019790:	1080004c 	andi	r2,r2,1
 2019794:	10000b26 	beq	r2,zero,20197c4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019798:	00000506 	br	20197b0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201979c:	000f883a 	mov	r7,zero
 20197a0:	01800104 	movi	r6,4
 20197a4:	e17ffe17 	ldw	r5,-8(fp)
 20197a8:	e13ffd17 	ldw	r4,-12(fp)
 20197ac:	2014e380 	call	2014e38 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20197b0:	e0bffd17 	ldw	r2,-12(fp)
 20197b4:	10800283 	ldbu	r2,10(r2)
 20197b8:	10803fcc 	andi	r2,r2,255
 20197bc:	103ff71e 	bne	r2,zero,201979c <OSQPostOpt+0x90>
 20197c0:	00000506 	br	20197d8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20197c4:	000f883a 	mov	r7,zero
 20197c8:	01800104 	movi	r6,4
 20197cc:	e17ffe17 	ldw	r5,-8(fp)
 20197d0:	e13ffd17 	ldw	r4,-12(fp)
 20197d4:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 20197d8:	e0bff717 	ldw	r2,-36(fp)
 20197dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20197e0:	e0bff817 	ldw	r2,-32(fp)
 20197e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 20197e8:	e0bfff03 	ldbu	r2,-4(fp)
 20197ec:	1080010c 	andi	r2,r2,4
 20197f0:	1000011e 	bne	r2,zero,20197f8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 20197f4:	20158840 	call	2015884 <OS_Sched>
        }
        return (OS_ERR_NONE);
 20197f8:	0005883a 	mov	r2,zero
 20197fc:	00004106 	br	2019904 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019800:	e0bffd17 	ldw	r2,-12(fp)
 2019804:	10800117 	ldw	r2,4(r2)
 2019808:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201980c:	e0bffa17 	ldw	r2,-24(fp)
 2019810:	10c0058b 	ldhu	r3,22(r2)
 2019814:	e0bffa17 	ldw	r2,-24(fp)
 2019818:	1080050b 	ldhu	r2,20(r2)
 201981c:	18ffffcc 	andi	r3,r3,65535
 2019820:	10bfffcc 	andi	r2,r2,65535
 2019824:	18800636 	bltu	r3,r2,2019840 <OSQPostOpt+0x134>
 2019828:	e0bff717 	ldw	r2,-36(fp)
 201982c:	e0bff915 	stw	r2,-28(fp)
 2019830:	e0bff917 	ldw	r2,-28(fp)
 2019834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019838:	00800784 	movi	r2,30
 201983c:	00003106 	br	2019904 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2019840:	e0bfff03 	ldbu	r2,-4(fp)
 2019844:	1080008c 	andi	r2,r2,2
 2019848:	10001326 	beq	r2,zero,2019898 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201984c:	e0bffa17 	ldw	r2,-24(fp)
 2019850:	10c00417 	ldw	r3,16(r2)
 2019854:	e0bffa17 	ldw	r2,-24(fp)
 2019858:	10800117 	ldw	r2,4(r2)
 201985c:	1880041e 	bne	r3,r2,2019870 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2019860:	e0bffa17 	ldw	r2,-24(fp)
 2019864:	10c00217 	ldw	r3,8(r2)
 2019868:	e0bffa17 	ldw	r2,-24(fp)
 201986c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2019870:	e0bffa17 	ldw	r2,-24(fp)
 2019874:	10800417 	ldw	r2,16(r2)
 2019878:	10ffff04 	addi	r3,r2,-4
 201987c:	e0bffa17 	ldw	r2,-24(fp)
 2019880:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2019884:	e0bffa17 	ldw	r2,-24(fp)
 2019888:	10800417 	ldw	r2,16(r2)
 201988c:	e0fffe17 	ldw	r3,-8(fp)
 2019890:	10c00015 	stw	r3,0(r2)
 2019894:	00001006 	br	20198d8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2019898:	e0bffa17 	ldw	r2,-24(fp)
 201989c:	10800317 	ldw	r2,12(r2)
 20198a0:	11000104 	addi	r4,r2,4
 20198a4:	e0fffa17 	ldw	r3,-24(fp)
 20198a8:	19000315 	stw	r4,12(r3)
 20198ac:	e0fffe17 	ldw	r3,-8(fp)
 20198b0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 20198b4:	e0bffa17 	ldw	r2,-24(fp)
 20198b8:	10c00317 	ldw	r3,12(r2)
 20198bc:	e0bffa17 	ldw	r2,-24(fp)
 20198c0:	10800217 	ldw	r2,8(r2)
 20198c4:	1880041e 	bne	r3,r2,20198d8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 20198c8:	e0bffa17 	ldw	r2,-24(fp)
 20198cc:	10c00117 	ldw	r3,4(r2)
 20198d0:	e0bffa17 	ldw	r2,-24(fp)
 20198d4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20198d8:	e0bffa17 	ldw	r2,-24(fp)
 20198dc:	1080058b 	ldhu	r2,22(r2)
 20198e0:	10800044 	addi	r2,r2,1
 20198e4:	1007883a 	mov	r3,r2
 20198e8:	e0bffa17 	ldw	r2,-24(fp)
 20198ec:	10c0058d 	sth	r3,22(r2)
 20198f0:	e0bff717 	ldw	r2,-36(fp)
 20198f4:	e0bffb15 	stw	r2,-20(fp)
 20198f8:	e0bffb17 	ldw	r2,-20(fp)
 20198fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019900:	0005883a 	mov	r2,zero
}
 2019904:	e037883a 	mov	sp,fp
 2019908:	dfc00117 	ldw	ra,4(sp)
 201990c:	df000017 	ldw	fp,0(sp)
 2019910:	dec00204 	addi	sp,sp,8
 2019914:	f800283a 	ret

02019918 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2019918:	defff604 	addi	sp,sp,-40
 201991c:	df000915 	stw	fp,36(sp)
 2019920:	df000904 	addi	fp,sp,36
 2019924:	e13ffe15 	stw	r4,-8(fp)
 2019928:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201992c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019930:	e0bffe17 	ldw	r2,-8(fp)
 2019934:	1000021e 	bne	r2,zero,2019940 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2019938:	00800104 	movi	r2,4
 201993c:	00004906 	br	2019a64 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2019940:	e0bfff17 	ldw	r2,-4(fp)
 2019944:	1000021e 	bne	r2,zero,2019950 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2019948:	00800244 	movi	r2,9
 201994c:	00004506 	br	2019a64 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019950:	e0bffe17 	ldw	r2,-8(fp)
 2019954:	10800003 	ldbu	r2,0(r2)
 2019958:	10803fcc 	andi	r2,r2,255
 201995c:	108000a0 	cmpeqi	r2,r2,2
 2019960:	1000021e 	bne	r2,zero,201996c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2019964:	00800044 	movi	r2,1
 2019968:	00003e06 	br	2019a64 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201996c:	0005303a 	rdctl	r2,status
 2019970:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019974:	e0fffd17 	ldw	r3,-12(fp)
 2019978:	00bfff84 	movi	r2,-2
 201997c:	1884703a 	and	r2,r3,r2
 2019980:	1001703a 	wrctl	status,r2
  
  return context;
 2019984:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019988:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201998c:	e0bffe17 	ldw	r2,-8(fp)
 2019990:	10c00283 	ldbu	r3,10(r2)
 2019994:	e0bfff17 	ldw	r2,-4(fp)
 2019998:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201999c:	e0bffe17 	ldw	r2,-8(fp)
 20199a0:	108002c4 	addi	r2,r2,11
 20199a4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 20199a8:	e0bfff17 	ldw	r2,-4(fp)
 20199ac:	10800204 	addi	r2,r2,8
 20199b0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20199b4:	e03ff705 	stb	zero,-36(fp)
 20199b8:	00000b06 	br	20199e8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 20199bc:	e0bff917 	ldw	r2,-28(fp)
 20199c0:	10c00044 	addi	r3,r2,1
 20199c4:	e0fff915 	stw	r3,-28(fp)
 20199c8:	e0fff817 	ldw	r3,-32(fp)
 20199cc:	19000044 	addi	r4,r3,1
 20199d0:	e13ff815 	stw	r4,-32(fp)
 20199d4:	18c00003 	ldbu	r3,0(r3)
 20199d8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20199dc:	e0bff703 	ldbu	r2,-36(fp)
 20199e0:	10800044 	addi	r2,r2,1
 20199e4:	e0bff705 	stb	r2,-36(fp)
 20199e8:	e0bff703 	ldbu	r2,-36(fp)
 20199ec:	108000f0 	cmpltui	r2,r2,3
 20199f0:	103ff21e 	bne	r2,zero,20199bc <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 20199f4:	e0bffe17 	ldw	r2,-8(fp)
 20199f8:	10800117 	ldw	r2,4(r2)
 20199fc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2019a00:	e0bffc17 	ldw	r2,-16(fp)
 2019a04:	1080058b 	ldhu	r2,22(r2)
 2019a08:	10bfffcc 	andi	r2,r2,65535
 2019a0c:	10000626 	beq	r2,zero,2019a28 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2019a10:	e0bffc17 	ldw	r2,-16(fp)
 2019a14:	10800417 	ldw	r2,16(r2)
 2019a18:	10c00017 	ldw	r3,0(r2)
 2019a1c:	e0bfff17 	ldw	r2,-4(fp)
 2019a20:	10c00015 	stw	r3,0(r2)
 2019a24:	00000206 	br	2019a30 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2019a28:	e0bfff17 	ldw	r2,-4(fp)
 2019a2c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2019a30:	e0bffc17 	ldw	r2,-16(fp)
 2019a34:	10c0058b 	ldhu	r3,22(r2)
 2019a38:	e0bfff17 	ldw	r2,-4(fp)
 2019a3c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2019a40:	e0bffc17 	ldw	r2,-16(fp)
 2019a44:	10c0050b 	ldhu	r3,20(r2)
 2019a48:	e0bfff17 	ldw	r2,-4(fp)
 2019a4c:	10c0018d 	sth	r3,6(r2)
 2019a50:	e0bffa17 	ldw	r2,-24(fp)
 2019a54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019a58:	e0bffb17 	ldw	r2,-20(fp)
 2019a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019a60:	0005883a 	mov	r2,zero
}
 2019a64:	e037883a 	mov	sp,fp
 2019a68:	df000017 	ldw	fp,0(sp)
 2019a6c:	dec00104 	addi	sp,sp,4
 2019a70:	f800283a 	ret

02019a74 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2019a74:	defffb04 	addi	sp,sp,-20
 2019a78:	dfc00415 	stw	ra,16(sp)
 2019a7c:	df000315 	stw	fp,12(sp)
 2019a80:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2019a84:	01407804 	movi	r5,480
 2019a88:	010080f4 	movhi	r4,515
 2019a8c:	212f9e04 	addi	r4,r4,-16776
 2019a90:	20157c80 	call	20157c8 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2019a94:	008080f4 	movhi	r2,515
 2019a98:	10af9e04 	addi	r2,r2,-16776
 2019a9c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2019aa0:	008080f4 	movhi	r2,515
 2019aa4:	10afa404 	addi	r2,r2,-16752
 2019aa8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2019aac:	e03ffd0d 	sth	zero,-12(fp)
 2019ab0:	00000c06 	br	2019ae4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2019ab4:	e0bffe17 	ldw	r2,-8(fp)
 2019ab8:	e0ffff17 	ldw	r3,-4(fp)
 2019abc:	10c00015 	stw	r3,0(r2)
        pq1++;
 2019ac0:	e0bffe17 	ldw	r2,-8(fp)
 2019ac4:	10800604 	addi	r2,r2,24
 2019ac8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2019acc:	e0bfff17 	ldw	r2,-4(fp)
 2019ad0:	10800604 	addi	r2,r2,24
 2019ad4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2019ad8:	e0bffd0b 	ldhu	r2,-12(fp)
 2019adc:	10800044 	addi	r2,r2,1
 2019ae0:	e0bffd0d 	sth	r2,-12(fp)
 2019ae4:	e0bffd0b 	ldhu	r2,-12(fp)
 2019ae8:	108004f0 	cmpltui	r2,r2,19
 2019aec:	103ff11e 	bne	r2,zero,2019ab4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2019af0:	e0bffe17 	ldw	r2,-8(fp)
 2019af4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2019af8:	008080f4 	movhi	r2,515
 2019afc:	10af9e04 	addi	r2,r2,-16776
 2019b00:	d0a74215 	stw	r2,-25336(gp)
#endif
}
 2019b04:	0001883a 	nop
 2019b08:	e037883a 	mov	sp,fp
 2019b0c:	dfc00117 	ldw	ra,4(sp)
 2019b10:	df000017 	ldw	fp,0(sp)
 2019b14:	dec00204 	addi	sp,sp,8
 2019b18:	f800283a 	ret

02019b1c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2019b1c:	defffa04 	addi	sp,sp,-24
 2019b20:	df000515 	stw	fp,20(sp)
 2019b24:	df000504 	addi	fp,sp,20
 2019b28:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019b2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019b30:	e0bfff17 	ldw	r2,-4(fp)
 2019b34:	1000021e 	bne	r2,zero,2019b40 <OSSemAccept+0x24>
        return (0);
 2019b38:	0005883a 	mov	r2,zero
 2019b3c:	00001f06 	br	2019bbc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019b40:	e0bfff17 	ldw	r2,-4(fp)
 2019b44:	10800003 	ldbu	r2,0(r2)
 2019b48:	10803fcc 	andi	r2,r2,255
 2019b4c:	108000e0 	cmpeqi	r2,r2,3
 2019b50:	1000021e 	bne	r2,zero,2019b5c <OSSemAccept+0x40>
        return (0);
 2019b54:	0005883a 	mov	r2,zero
 2019b58:	00001806 	br	2019bbc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019b5c:	0005303a 	rdctl	r2,status
 2019b60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019b64:	e0fffe17 	ldw	r3,-8(fp)
 2019b68:	00bfff84 	movi	r2,-2
 2019b6c:	1884703a 	and	r2,r3,r2
 2019b70:	1001703a 	wrctl	status,r2
  
  return context;
 2019b74:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019b78:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2019b7c:	e0bfff17 	ldw	r2,-4(fp)
 2019b80:	1080020b 	ldhu	r2,8(r2)
 2019b84:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2019b88:	e0bffd0b 	ldhu	r2,-12(fp)
 2019b8c:	10000626 	beq	r2,zero,2019ba8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2019b90:	e0bfff17 	ldw	r2,-4(fp)
 2019b94:	1080020b 	ldhu	r2,8(r2)
 2019b98:	10bfffc4 	addi	r2,r2,-1
 2019b9c:	1007883a 	mov	r3,r2
 2019ba0:	e0bfff17 	ldw	r2,-4(fp)
 2019ba4:	10c0020d 	sth	r3,8(r2)
 2019ba8:	e0bffb17 	ldw	r2,-20(fp)
 2019bac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019bb0:	e0bffc17 	ldw	r2,-16(fp)
 2019bb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2019bb8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2019bbc:	e037883a 	mov	sp,fp
 2019bc0:	df000017 	ldw	fp,0(sp)
 2019bc4:	dec00104 	addi	sp,sp,4
 2019bc8:	f800283a 	ret

02019bcc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2019bcc:	defff904 	addi	sp,sp,-28
 2019bd0:	dfc00615 	stw	ra,24(sp)
 2019bd4:	df000515 	stw	fp,20(sp)
 2019bd8:	df000504 	addi	fp,sp,20
 2019bdc:	2005883a 	mov	r2,r4
 2019be0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019be4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019be8:	d0a74503 	ldbu	r2,-25324(gp)
 2019bec:	10803fcc 	andi	r2,r2,255
 2019bf0:	10000226 	beq	r2,zero,2019bfc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2019bf4:	0005883a 	mov	r2,zero
 2019bf8:	00002506 	br	2019c90 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019bfc:	0005303a 	rdctl	r2,status
 2019c00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c04:	e0fffe17 	ldw	r3,-8(fp)
 2019c08:	00bfff84 	movi	r2,-2
 2019c0c:	1884703a 	and	r2,r3,r2
 2019c10:	1001703a 	wrctl	status,r2
  
  return context;
 2019c14:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019c18:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2019c1c:	d0a74417 	ldw	r2,-25328(gp)
 2019c20:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2019c24:	d0a74417 	ldw	r2,-25328(gp)
 2019c28:	10000326 	beq	r2,zero,2019c38 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2019c2c:	d0a74417 	ldw	r2,-25328(gp)
 2019c30:	10800117 	ldw	r2,4(r2)
 2019c34:	d0a74415 	stw	r2,-25328(gp)
 2019c38:	e0bffb17 	ldw	r2,-20(fp)
 2019c3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019c40:	e0bffc17 	ldw	r2,-16(fp)
 2019c44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2019c48:	e0bffd17 	ldw	r2,-12(fp)
 2019c4c:	10000f26 	beq	r2,zero,2019c8c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2019c50:	e0bffd17 	ldw	r2,-12(fp)
 2019c54:	00c000c4 	movi	r3,3
 2019c58:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2019c5c:	e0bffd17 	ldw	r2,-12(fp)
 2019c60:	e0ffff0b 	ldhu	r3,-4(fp)
 2019c64:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2019c68:	e0bffd17 	ldw	r2,-12(fp)
 2019c6c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2019c70:	e0bffd17 	ldw	r2,-12(fp)
 2019c74:	00c00fc4 	movi	r3,63
 2019c78:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2019c7c:	e0bffd17 	ldw	r2,-12(fp)
 2019c80:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2019c84:	e13ffd17 	ldw	r4,-12(fp)
 2019c88:	20153e80 	call	20153e8 <OS_EventWaitListInit>
    }
    return (pevent);
 2019c8c:	e0bffd17 	ldw	r2,-12(fp)
}
 2019c90:	e037883a 	mov	sp,fp
 2019c94:	dfc00117 	ldw	ra,4(sp)
 2019c98:	df000017 	ldw	fp,0(sp)
 2019c9c:	dec00204 	addi	sp,sp,8
 2019ca0:	f800283a 	ret

02019ca4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019ca4:	defff304 	addi	sp,sp,-52
 2019ca8:	dfc00c15 	stw	ra,48(sp)
 2019cac:	df000b15 	stw	fp,44(sp)
 2019cb0:	df000b04 	addi	fp,sp,44
 2019cb4:	e13ffd15 	stw	r4,-12(fp)
 2019cb8:	2805883a 	mov	r2,r5
 2019cbc:	e1bfff15 	stw	r6,-4(fp)
 2019cc0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019cc4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019cc8:	e0bfff17 	ldw	r2,-4(fp)
 2019ccc:	1000021e 	bne	r2,zero,2019cd8 <OSSemDel+0x34>
        return (pevent);
 2019cd0:	e0bffd17 	ldw	r2,-12(fp)
 2019cd4:	00007e06 	br	2019ed0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2019cd8:	e0bffd17 	ldw	r2,-12(fp)
 2019cdc:	1000051e 	bne	r2,zero,2019cf4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019ce0:	e0bfff17 	ldw	r2,-4(fp)
 2019ce4:	00c00104 	movi	r3,4
 2019ce8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019cec:	e0bffd17 	ldw	r2,-12(fp)
 2019cf0:	00007706 	br	2019ed0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2019cf4:	e0bffd17 	ldw	r2,-12(fp)
 2019cf8:	10800003 	ldbu	r2,0(r2)
 2019cfc:	10803fcc 	andi	r2,r2,255
 2019d00:	108000e0 	cmpeqi	r2,r2,3
 2019d04:	1000051e 	bne	r2,zero,2019d1c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2019d08:	e0bfff17 	ldw	r2,-4(fp)
 2019d0c:	00c00044 	movi	r3,1
 2019d10:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019d14:	e0bffd17 	ldw	r2,-12(fp)
 2019d18:	00006d06 	br	2019ed0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019d1c:	d0a74503 	ldbu	r2,-25324(gp)
 2019d20:	10803fcc 	andi	r2,r2,255
 2019d24:	10000526 	beq	r2,zero,2019d3c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2019d28:	e0bfff17 	ldw	r2,-4(fp)
 2019d2c:	00c003c4 	movi	r3,15
 2019d30:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019d34:	e0bffd17 	ldw	r2,-12(fp)
 2019d38:	00006506 	br	2019ed0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019d3c:	0005303a 	rdctl	r2,status
 2019d40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019d44:	e0fffc17 	ldw	r3,-16(fp)
 2019d48:	00bfff84 	movi	r2,-2
 2019d4c:	1884703a 	and	r2,r3,r2
 2019d50:	1001703a 	wrctl	status,r2
  
  return context;
 2019d54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019d58:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2019d5c:	e0bffd17 	ldw	r2,-12(fp)
 2019d60:	10800283 	ldbu	r2,10(r2)
 2019d64:	10803fcc 	andi	r2,r2,255
 2019d68:	10000326 	beq	r2,zero,2019d78 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2019d6c:	00800044 	movi	r2,1
 2019d70:	e0bff505 	stb	r2,-44(fp)
 2019d74:	00000106 	br	2019d7c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2019d78:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2019d7c:	e0bffe03 	ldbu	r2,-8(fp)
 2019d80:	10000326 	beq	r2,zero,2019d90 <OSSemDel+0xec>
 2019d84:	10800060 	cmpeqi	r2,r2,1
 2019d88:	1000281e 	bne	r2,zero,2019e2c <OSSemDel+0x188>
 2019d8c:	00004506 	br	2019ea4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2019d90:	e0bff503 	ldbu	r2,-44(fp)
 2019d94:	1000161e 	bne	r2,zero,2019df0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2019d98:	e0bffd17 	ldw	r2,-12(fp)
 2019d9c:	00c00fc4 	movi	r3,63
 2019da0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2019da4:	e0bffd17 	ldw	r2,-12(fp)
 2019da8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019dac:	e0bffd17 	ldw	r2,-12(fp)
 2019db0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2019db4:	d0e74417 	ldw	r3,-25328(gp)
 2019db8:	e0bffd17 	ldw	r2,-12(fp)
 2019dbc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2019dc0:	e0bffd17 	ldw	r2,-12(fp)
 2019dc4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2019dc8:	e0bffd17 	ldw	r2,-12(fp)
 2019dcc:	d0a74415 	stw	r2,-25328(gp)
 2019dd0:	e0bff717 	ldw	r2,-36(fp)
 2019dd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019dd8:	e0bff817 	ldw	r2,-32(fp)
 2019ddc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2019de0:	e0bfff17 	ldw	r2,-4(fp)
 2019de4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2019de8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2019dec:	00003706 	br	2019ecc <OSSemDel+0x228>
 2019df0:	e0bff717 	ldw	r2,-36(fp)
 2019df4:	e0bff915 	stw	r2,-28(fp)
 2019df8:	e0bff917 	ldw	r2,-28(fp)
 2019dfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2019e00:	e0bfff17 	ldw	r2,-4(fp)
 2019e04:	00c01244 	movi	r3,73
 2019e08:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2019e0c:	e0bffd17 	ldw	r2,-12(fp)
 2019e10:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019e14:	00002d06 	br	2019ecc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2019e18:	000f883a 	mov	r7,zero
 2019e1c:	01800044 	movi	r6,1
 2019e20:	000b883a 	mov	r5,zero
 2019e24:	e13ffd17 	ldw	r4,-12(fp)
 2019e28:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2019e2c:	e0bffd17 	ldw	r2,-12(fp)
 2019e30:	10800283 	ldbu	r2,10(r2)
 2019e34:	10803fcc 	andi	r2,r2,255
 2019e38:	103ff71e 	bne	r2,zero,2019e18 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2019e3c:	e0bffd17 	ldw	r2,-12(fp)
 2019e40:	00c00fc4 	movi	r3,63
 2019e44:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2019e48:	e0bffd17 	ldw	r2,-12(fp)
 2019e4c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019e50:	e0bffd17 	ldw	r2,-12(fp)
 2019e54:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2019e58:	d0e74417 	ldw	r3,-25328(gp)
 2019e5c:	e0bffd17 	ldw	r2,-12(fp)
 2019e60:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2019e64:	e0bffd17 	ldw	r2,-12(fp)
 2019e68:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2019e6c:	e0bffd17 	ldw	r2,-12(fp)
 2019e70:	d0a74415 	stw	r2,-25328(gp)
 2019e74:	e0bff717 	ldw	r2,-36(fp)
 2019e78:	e0bffa15 	stw	r2,-24(fp)
 2019e7c:	e0bffa17 	ldw	r2,-24(fp)
 2019e80:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2019e84:	e0bff503 	ldbu	r2,-44(fp)
 2019e88:	10800058 	cmpnei	r2,r2,1
 2019e8c:	1000011e 	bne	r2,zero,2019e94 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2019e90:	20158840 	call	2015884 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2019e94:	e0bfff17 	ldw	r2,-4(fp)
 2019e98:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2019e9c:	e03ff615 	stw	zero,-40(fp)
             break;
 2019ea0:	00000a06 	br	2019ecc <OSSemDel+0x228>
 2019ea4:	e0bff717 	ldw	r2,-36(fp)
 2019ea8:	e0bffb15 	stw	r2,-20(fp)
 2019eac:	e0bffb17 	ldw	r2,-20(fp)
 2019eb0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2019eb4:	e0bfff17 	ldw	r2,-4(fp)
 2019eb8:	00c001c4 	movi	r3,7
 2019ebc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2019ec0:	e0bffd17 	ldw	r2,-12(fp)
 2019ec4:	e0bff615 	stw	r2,-40(fp)
             break;
 2019ec8:	0001883a 	nop
    }
    return (pevent_return);
 2019ecc:	e0bff617 	ldw	r2,-40(fp)
}
 2019ed0:	e037883a 	mov	sp,fp
 2019ed4:	dfc00117 	ldw	ra,4(sp)
 2019ed8:	df000017 	ldw	fp,0(sp)
 2019edc:	dec00204 	addi	sp,sp,8
 2019ee0:	f800283a 	ret

02019ee4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2019ee4:	defff504 	addi	sp,sp,-44
 2019ee8:	dfc00a15 	stw	ra,40(sp)
 2019eec:	df000915 	stw	fp,36(sp)
 2019ef0:	df000904 	addi	fp,sp,36
 2019ef4:	e13ffd15 	stw	r4,-12(fp)
 2019ef8:	2805883a 	mov	r2,r5
 2019efc:	e1bfff15 	stw	r6,-4(fp)
 2019f00:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019f04:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2019f08:	e0bfff17 	ldw	r2,-4(fp)
 2019f0c:	10007226 	beq	r2,zero,201a0d8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019f10:	e0bffd17 	ldw	r2,-12(fp)
 2019f14:	1000041e 	bne	r2,zero,2019f28 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2019f18:	e0bfff17 	ldw	r2,-4(fp)
 2019f1c:	00c00104 	movi	r3,4
 2019f20:	10c00005 	stb	r3,0(r2)
        return;
 2019f24:	00006d06 	br	201a0dc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019f28:	e0bffd17 	ldw	r2,-12(fp)
 2019f2c:	10800003 	ldbu	r2,0(r2)
 2019f30:	10803fcc 	andi	r2,r2,255
 2019f34:	108000e0 	cmpeqi	r2,r2,3
 2019f38:	1000041e 	bne	r2,zero,2019f4c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2019f3c:	e0bfff17 	ldw	r2,-4(fp)
 2019f40:	00c00044 	movi	r3,1
 2019f44:	10c00005 	stb	r3,0(r2)
        return;
 2019f48:	00006406 	br	201a0dc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2019f4c:	d0a74503 	ldbu	r2,-25324(gp)
 2019f50:	10803fcc 	andi	r2,r2,255
 2019f54:	10000426 	beq	r2,zero,2019f68 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2019f58:	e0bfff17 	ldw	r2,-4(fp)
 2019f5c:	00c00084 	movi	r3,2
 2019f60:	10c00005 	stb	r3,0(r2)
        return;
 2019f64:	00005d06 	br	201a0dc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2019f68:	d0a73703 	ldbu	r2,-25380(gp)
 2019f6c:	10803fcc 	andi	r2,r2,255
 2019f70:	10000426 	beq	r2,zero,2019f84 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2019f74:	e0bfff17 	ldw	r2,-4(fp)
 2019f78:	00c00344 	movi	r3,13
 2019f7c:	10c00005 	stb	r3,0(r2)
        return;
 2019f80:	00005606 	br	201a0dc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019f84:	0005303a 	rdctl	r2,status
 2019f88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019f8c:	e0fffc17 	ldw	r3,-16(fp)
 2019f90:	00bfff84 	movi	r2,-2
 2019f94:	1884703a 	and	r2,r3,r2
 2019f98:	1001703a 	wrctl	status,r2
  
  return context;
 2019f9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019fa0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2019fa4:	e0bffd17 	ldw	r2,-12(fp)
 2019fa8:	1080020b 	ldhu	r2,8(r2)
 2019fac:	10bfffcc 	andi	r2,r2,65535
 2019fb0:	10000d26 	beq	r2,zero,2019fe8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2019fb4:	e0bffd17 	ldw	r2,-12(fp)
 2019fb8:	1080020b 	ldhu	r2,8(r2)
 2019fbc:	10bfffc4 	addi	r2,r2,-1
 2019fc0:	1007883a 	mov	r3,r2
 2019fc4:	e0bffd17 	ldw	r2,-12(fp)
 2019fc8:	10c0020d 	sth	r3,8(r2)
 2019fcc:	e0bff717 	ldw	r2,-36(fp)
 2019fd0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019fd4:	e0bff817 	ldw	r2,-32(fp)
 2019fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2019fdc:	e0bfff17 	ldw	r2,-4(fp)
 2019fe0:	10000005 	stb	zero,0(r2)
        return;
 2019fe4:	00003d06 	br	201a0dc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2019fe8:	d0a74617 	ldw	r2,-25320(gp)
 2019fec:	d0e74617 	ldw	r3,-25320(gp)
 2019ff0:	18c00c03 	ldbu	r3,48(r3)
 2019ff4:	18c00054 	ori	r3,r3,1
 2019ff8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019ffc:	d0a74617 	ldw	r2,-25320(gp)
 201a000:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201a004:	d0a74617 	ldw	r2,-25320(gp)
 201a008:	e0fffe0b 	ldhu	r3,-8(fp)
 201a00c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201a010:	e13ffd17 	ldw	r4,-12(fp)
 201a014:	2014fd00 	call	2014fd0 <OS_EventTaskWait>
 201a018:	e0bff717 	ldw	r2,-36(fp)
 201a01c:	e0bffb15 	stw	r2,-20(fp)
 201a020:	e0bffb17 	ldw	r2,-20(fp)
 201a024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201a028:	20158840 	call	2015884 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a02c:	0005303a 	rdctl	r2,status
 201a030:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a034:	e0fff917 	ldw	r3,-28(fp)
 201a038:	00bfff84 	movi	r2,-2
 201a03c:	1884703a 	and	r2,r3,r2
 201a040:	1001703a 	wrctl	status,r2
  
  return context;
 201a044:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201a048:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201a04c:	d0a74617 	ldw	r2,-25320(gp)
 201a050:	10800c43 	ldbu	r2,49(r2)
 201a054:	10803fcc 	andi	r2,r2,255
 201a058:	10000326 	beq	r2,zero,201a068 <OSSemPend+0x184>
 201a05c:	108000a0 	cmpeqi	r2,r2,2
 201a060:	1000041e 	bne	r2,zero,201a074 <OSSemPend+0x190>
 201a064:	00000706 	br	201a084 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201a068:	e0bfff17 	ldw	r2,-4(fp)
 201a06c:	10000005 	stb	zero,0(r2)
             break;
 201a070:	00000c06 	br	201a0a4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201a074:	e0bfff17 	ldw	r2,-4(fp)
 201a078:	00c00384 	movi	r3,14
 201a07c:	10c00005 	stb	r3,0(r2)
             break;
 201a080:	00000806 	br	201a0a4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201a084:	d0a74617 	ldw	r2,-25320(gp)
 201a088:	e17ffd17 	ldw	r5,-12(fp)
 201a08c:	1009883a 	mov	r4,r2
 201a090:	20152300 	call	2015230 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201a094:	e0bfff17 	ldw	r2,-4(fp)
 201a098:	00c00284 	movi	r3,10
 201a09c:	10c00005 	stb	r3,0(r2)
             break;
 201a0a0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201a0a4:	d0a74617 	ldw	r2,-25320(gp)
 201a0a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201a0ac:	d0a74617 	ldw	r2,-25320(gp)
 201a0b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201a0b4:	d0a74617 	ldw	r2,-25320(gp)
 201a0b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201a0bc:	d0a74617 	ldw	r2,-25320(gp)
 201a0c0:	10000815 	stw	zero,32(r2)
 201a0c4:	e0bff717 	ldw	r2,-36(fp)
 201a0c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a0cc:	e0bffa17 	ldw	r2,-24(fp)
 201a0d0:	1001703a 	wrctl	status,r2
 201a0d4:	00000106 	br	201a0dc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201a0d8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 201a0dc:	e037883a 	mov	sp,fp
 201a0e0:	dfc00117 	ldw	ra,4(sp)
 201a0e4:	df000017 	ldw	fp,0(sp)
 201a0e8:	dec00204 	addi	sp,sp,8
 201a0ec:	f800283a 	ret

0201a0f0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201a0f0:	defff604 	addi	sp,sp,-40
 201a0f4:	dfc00915 	stw	ra,36(sp)
 201a0f8:	df000815 	stw	fp,32(sp)
 201a0fc:	df000804 	addi	fp,sp,32
 201a100:	e13ffd15 	stw	r4,-12(fp)
 201a104:	2805883a 	mov	r2,r5
 201a108:	e1bfff15 	stw	r6,-4(fp)
 201a10c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a110:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a114:	e0bfff17 	ldw	r2,-4(fp)
 201a118:	1000021e 	bne	r2,zero,201a124 <OSSemPendAbort+0x34>
        return (0);
 201a11c:	0005883a 	mov	r2,zero
 201a120:	00004906 	br	201a248 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a124:	e0bffd17 	ldw	r2,-12(fp)
 201a128:	1000051e 	bne	r2,zero,201a140 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201a12c:	e0bfff17 	ldw	r2,-4(fp)
 201a130:	00c00104 	movi	r3,4
 201a134:	10c00005 	stb	r3,0(r2)
        return (0);
 201a138:	0005883a 	mov	r2,zero
 201a13c:	00004206 	br	201a248 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a140:	e0bffd17 	ldw	r2,-12(fp)
 201a144:	10800003 	ldbu	r2,0(r2)
 201a148:	10803fcc 	andi	r2,r2,255
 201a14c:	108000e0 	cmpeqi	r2,r2,3
 201a150:	1000051e 	bne	r2,zero,201a168 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201a154:	e0bfff17 	ldw	r2,-4(fp)
 201a158:	00c00044 	movi	r3,1
 201a15c:	10c00005 	stb	r3,0(r2)
        return (0);
 201a160:	0005883a 	mov	r2,zero
 201a164:	00003806 	br	201a248 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a168:	0005303a 	rdctl	r2,status
 201a16c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a170:	e0fffc17 	ldw	r3,-16(fp)
 201a174:	00bfff84 	movi	r2,-2
 201a178:	1884703a 	and	r2,r3,r2
 201a17c:	1001703a 	wrctl	status,r2
  
  return context;
 201a180:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a184:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201a188:	e0bffd17 	ldw	r2,-12(fp)
 201a18c:	10800283 	ldbu	r2,10(r2)
 201a190:	10803fcc 	andi	r2,r2,255
 201a194:	10002526 	beq	r2,zero,201a22c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201a198:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201a19c:	e0bffe03 	ldbu	r2,-8(fp)
 201a1a0:	10800060 	cmpeqi	r2,r2,1
 201a1a4:	10000e26 	beq	r2,zero,201a1e0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201a1a8:	00000806 	br	201a1cc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a1ac:	01c00084 	movi	r7,2
 201a1b0:	01800044 	movi	r6,1
 201a1b4:	000b883a 	mov	r5,zero
 201a1b8:	e13ffd17 	ldw	r4,-12(fp)
 201a1bc:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                     nbr_tasks++;
 201a1c0:	e0bff803 	ldbu	r2,-32(fp)
 201a1c4:	10800044 	addi	r2,r2,1
 201a1c8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201a1cc:	e0bffd17 	ldw	r2,-12(fp)
 201a1d0:	10800283 	ldbu	r2,10(r2)
 201a1d4:	10803fcc 	andi	r2,r2,255
 201a1d8:	103ff41e 	bne	r2,zero,201a1ac <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201a1dc:	00000906 	br	201a204 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a1e0:	01c00084 	movi	r7,2
 201a1e4:	01800044 	movi	r6,1
 201a1e8:	000b883a 	mov	r5,zero
 201a1ec:	e13ffd17 	ldw	r4,-12(fp)
 201a1f0:	2014e380 	call	2014e38 <OS_EventTaskRdy>
                 nbr_tasks++;
 201a1f4:	e0bff803 	ldbu	r2,-32(fp)
 201a1f8:	10800044 	addi	r2,r2,1
 201a1fc:	e0bff805 	stb	r2,-32(fp)
                 break;
 201a200:	0001883a 	nop
 201a204:	e0bff917 	ldw	r2,-28(fp)
 201a208:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a20c:	e0bffa17 	ldw	r2,-24(fp)
 201a210:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201a214:	20158840 	call	2015884 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201a218:	e0bfff17 	ldw	r2,-4(fp)
 201a21c:	00c00384 	movi	r3,14
 201a220:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201a224:	e0bff803 	ldbu	r2,-32(fp)
 201a228:	00000706 	br	201a248 <OSSemPendAbort+0x158>
 201a22c:	e0bff917 	ldw	r2,-28(fp)
 201a230:	e0bffb15 	stw	r2,-20(fp)
 201a234:	e0bffb17 	ldw	r2,-20(fp)
 201a238:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a23c:	e0bfff17 	ldw	r2,-4(fp)
 201a240:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201a244:	0005883a 	mov	r2,zero
}
 201a248:	e037883a 	mov	sp,fp
 201a24c:	dfc00117 	ldw	ra,4(sp)
 201a250:	df000017 	ldw	fp,0(sp)
 201a254:	dec00204 	addi	sp,sp,8
 201a258:	f800283a 	ret

0201a25c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201a25c:	defff804 	addi	sp,sp,-32
 201a260:	dfc00715 	stw	ra,28(sp)
 201a264:	df000615 	stw	fp,24(sp)
 201a268:	df000604 	addi	fp,sp,24
 201a26c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a270:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a274:	e0bfff17 	ldw	r2,-4(fp)
 201a278:	1000021e 	bne	r2,zero,201a284 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201a27c:	00800104 	movi	r2,4
 201a280:	00003506 	br	201a358 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a284:	e0bfff17 	ldw	r2,-4(fp)
 201a288:	10800003 	ldbu	r2,0(r2)
 201a28c:	10803fcc 	andi	r2,r2,255
 201a290:	108000e0 	cmpeqi	r2,r2,3
 201a294:	1000021e 	bne	r2,zero,201a2a0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201a298:	00800044 	movi	r2,1
 201a29c:	00002e06 	br	201a358 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a2a0:	0005303a 	rdctl	r2,status
 201a2a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a2a8:	e0fffe17 	ldw	r3,-8(fp)
 201a2ac:	00bfff84 	movi	r2,-2
 201a2b0:	1884703a 	and	r2,r3,r2
 201a2b4:	1001703a 	wrctl	status,r2
  
  return context;
 201a2b8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201a2bc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201a2c0:	e0bfff17 	ldw	r2,-4(fp)
 201a2c4:	10800283 	ldbu	r2,10(r2)
 201a2c8:	10803fcc 	andi	r2,r2,255
 201a2cc:	10000c26 	beq	r2,zero,201a300 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201a2d0:	000f883a 	mov	r7,zero
 201a2d4:	01800044 	movi	r6,1
 201a2d8:	000b883a 	mov	r5,zero
 201a2dc:	e13fff17 	ldw	r4,-4(fp)
 201a2e0:	2014e380 	call	2014e38 <OS_EventTaskRdy>
 201a2e4:	e0bffa17 	ldw	r2,-24(fp)
 201a2e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2ec:	e0bffb17 	ldw	r2,-20(fp)
 201a2f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201a2f4:	20158840 	call	2015884 <OS_Sched>
        return (OS_ERR_NONE);
 201a2f8:	0005883a 	mov	r2,zero
 201a2fc:	00001606 	br	201a358 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201a300:	e0bfff17 	ldw	r2,-4(fp)
 201a304:	1080020b 	ldhu	r2,8(r2)
 201a308:	10ffffcc 	andi	r3,r2,65535
 201a30c:	00bfffd4 	movui	r2,65535
 201a310:	18800c26 	beq	r3,r2,201a344 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201a314:	e0bfff17 	ldw	r2,-4(fp)
 201a318:	1080020b 	ldhu	r2,8(r2)
 201a31c:	10800044 	addi	r2,r2,1
 201a320:	1007883a 	mov	r3,r2
 201a324:	e0bfff17 	ldw	r2,-4(fp)
 201a328:	10c0020d 	sth	r3,8(r2)
 201a32c:	e0bffa17 	ldw	r2,-24(fp)
 201a330:	e0bffc15 	stw	r2,-16(fp)
 201a334:	e0bffc17 	ldw	r2,-16(fp)
 201a338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201a33c:	0005883a 	mov	r2,zero
 201a340:	00000506 	br	201a358 <OSSemPost+0xfc>
 201a344:	e0bffa17 	ldw	r2,-24(fp)
 201a348:	e0bffd15 	stw	r2,-12(fp)
 201a34c:	e0bffd17 	ldw	r2,-12(fp)
 201a350:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201a354:	00800c84 	movi	r2,50
}
 201a358:	e037883a 	mov	sp,fp
 201a35c:	dfc00117 	ldw	ra,4(sp)
 201a360:	df000017 	ldw	fp,0(sp)
 201a364:	dec00204 	addi	sp,sp,8
 201a368:	f800283a 	ret

0201a36c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201a36c:	defff704 	addi	sp,sp,-36
 201a370:	df000815 	stw	fp,32(sp)
 201a374:	df000804 	addi	fp,sp,32
 201a378:	e13ffe15 	stw	r4,-8(fp)
 201a37c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a380:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a384:	e0bffe17 	ldw	r2,-8(fp)
 201a388:	1000021e 	bne	r2,zero,201a394 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201a38c:	00800104 	movi	r2,4
 201a390:	00003606 	br	201a46c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201a394:	e0bfff17 	ldw	r2,-4(fp)
 201a398:	1000021e 	bne	r2,zero,201a3a4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201a39c:	00800244 	movi	r2,9
 201a3a0:	00003206 	br	201a46c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201a3a4:	e0bffe17 	ldw	r2,-8(fp)
 201a3a8:	10800003 	ldbu	r2,0(r2)
 201a3ac:	10803fcc 	andi	r2,r2,255
 201a3b0:	108000e0 	cmpeqi	r2,r2,3
 201a3b4:	1000021e 	bne	r2,zero,201a3c0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201a3b8:	00800044 	movi	r2,1
 201a3bc:	00002b06 	br	201a46c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a3c0:	0005303a 	rdctl	r2,status
 201a3c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a3c8:	e0fffd17 	ldw	r3,-12(fp)
 201a3cc:	00bfff84 	movi	r2,-2
 201a3d0:	1884703a 	and	r2,r3,r2
 201a3d4:	1001703a 	wrctl	status,r2
  
  return context;
 201a3d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a3dc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201a3e0:	e0bffe17 	ldw	r2,-8(fp)
 201a3e4:	10c00283 	ldbu	r3,10(r2)
 201a3e8:	e0bfff17 	ldw	r2,-4(fp)
 201a3ec:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201a3f0:	e0bffe17 	ldw	r2,-8(fp)
 201a3f4:	108002c4 	addi	r2,r2,11
 201a3f8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201a3fc:	e0bfff17 	ldw	r2,-4(fp)
 201a400:	10800084 	addi	r2,r2,2
 201a404:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a408:	e03ffa05 	stb	zero,-24(fp)
 201a40c:	00000b06 	br	201a43c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201a410:	e0bff917 	ldw	r2,-28(fp)
 201a414:	10c00044 	addi	r3,r2,1
 201a418:	e0fff915 	stw	r3,-28(fp)
 201a41c:	e0fff817 	ldw	r3,-32(fp)
 201a420:	19000044 	addi	r4,r3,1
 201a424:	e13ff815 	stw	r4,-32(fp)
 201a428:	18c00003 	ldbu	r3,0(r3)
 201a42c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a430:	e0bffa03 	ldbu	r2,-24(fp)
 201a434:	10800044 	addi	r2,r2,1
 201a438:	e0bffa05 	stb	r2,-24(fp)
 201a43c:	e0bffa03 	ldbu	r2,-24(fp)
 201a440:	108000f0 	cmpltui	r2,r2,3
 201a444:	103ff21e 	bne	r2,zero,201a410 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201a448:	e0bffe17 	ldw	r2,-8(fp)
 201a44c:	10c0020b 	ldhu	r3,8(r2)
 201a450:	e0bfff17 	ldw	r2,-4(fp)
 201a454:	10c0000d 	sth	r3,0(r2)
 201a458:	e0bffb17 	ldw	r2,-20(fp)
 201a45c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a460:	e0bffc17 	ldw	r2,-16(fp)
 201a464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201a468:	0005883a 	mov	r2,zero
}
 201a46c:	e037883a 	mov	sp,fp
 201a470:	df000017 	ldw	fp,0(sp)
 201a474:	dec00104 	addi	sp,sp,4
 201a478:	f800283a 	ret

0201a47c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201a47c:	defff904 	addi	sp,sp,-28
 201a480:	df000615 	stw	fp,24(sp)
 201a484:	df000604 	addi	fp,sp,24
 201a488:	e13ffd15 	stw	r4,-12(fp)
 201a48c:	2805883a 	mov	r2,r5
 201a490:	e1bfff15 	stw	r6,-4(fp)
 201a494:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a498:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a49c:	e0bfff17 	ldw	r2,-4(fp)
 201a4a0:	10003126 	beq	r2,zero,201a568 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a4a4:	e0bffd17 	ldw	r2,-12(fp)
 201a4a8:	1000041e 	bne	r2,zero,201a4bc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201a4ac:	e0bfff17 	ldw	r2,-4(fp)
 201a4b0:	00c00104 	movi	r3,4
 201a4b4:	10c00005 	stb	r3,0(r2)
        return;
 201a4b8:	00002c06 	br	201a56c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a4bc:	e0bffd17 	ldw	r2,-12(fp)
 201a4c0:	10800003 	ldbu	r2,0(r2)
 201a4c4:	10803fcc 	andi	r2,r2,255
 201a4c8:	108000e0 	cmpeqi	r2,r2,3
 201a4cc:	1000041e 	bne	r2,zero,201a4e0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201a4d0:	e0bfff17 	ldw	r2,-4(fp)
 201a4d4:	00c00044 	movi	r3,1
 201a4d8:	10c00005 	stb	r3,0(r2)
        return;
 201a4dc:	00002306 	br	201a56c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a4e0:	0005303a 	rdctl	r2,status
 201a4e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a4e8:	e0fffc17 	ldw	r3,-16(fp)
 201a4ec:	00bfff84 	movi	r2,-2
 201a4f0:	1884703a 	and	r2,r3,r2
 201a4f4:	1001703a 	wrctl	status,r2
  
  return context;
 201a4f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a4fc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201a500:	e0bfff17 	ldw	r2,-4(fp)
 201a504:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201a508:	e0bffd17 	ldw	r2,-12(fp)
 201a50c:	1080020b 	ldhu	r2,8(r2)
 201a510:	10bfffcc 	andi	r2,r2,65535
 201a514:	10000426 	beq	r2,zero,201a528 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201a518:	e0bffd17 	ldw	r2,-12(fp)
 201a51c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a520:	10c0020d 	sth	r3,8(r2)
 201a524:	00000b06 	br	201a554 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201a528:	e0bffd17 	ldw	r2,-12(fp)
 201a52c:	10800283 	ldbu	r2,10(r2)
 201a530:	10803fcc 	andi	r2,r2,255
 201a534:	1000041e 	bne	r2,zero,201a548 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201a538:	e0bffd17 	ldw	r2,-12(fp)
 201a53c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a540:	10c0020d 	sth	r3,8(r2)
 201a544:	00000306 	br	201a554 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201a548:	e0bfff17 	ldw	r2,-4(fp)
 201a54c:	00c01244 	movi	r3,73
 201a550:	10c00005 	stb	r3,0(r2)
 201a554:	e0bffa17 	ldw	r2,-24(fp)
 201a558:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a55c:	e0bffb17 	ldw	r2,-20(fp)
 201a560:	1001703a 	wrctl	status,r2
 201a564:	00000106 	br	201a56c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201a568:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201a56c:	e037883a 	mov	sp,fp
 201a570:	df000017 	ldw	fp,0(sp)
 201a574:	dec00104 	addi	sp,sp,4
 201a578:	f800283a 	ret

0201a57c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201a57c:	defff104 	addi	sp,sp,-60
 201a580:	dfc00e15 	stw	ra,56(sp)
 201a584:	df000d15 	stw	fp,52(sp)
 201a588:	df000d04 	addi	fp,sp,52
 201a58c:	2007883a 	mov	r3,r4
 201a590:	2805883a 	mov	r2,r5
 201a594:	e0fffe05 	stb	r3,-8(fp)
 201a598:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201a59c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201a5a0:	e0bffe03 	ldbu	r2,-8(fp)
 201a5a4:	10800530 	cmpltui	r2,r2,20
 201a5a8:	1000051e 	bne	r2,zero,201a5c0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201a5ac:	e0bffe03 	ldbu	r2,-8(fp)
 201a5b0:	10803fe0 	cmpeqi	r2,r2,255
 201a5b4:	1000021e 	bne	r2,zero,201a5c0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201a5b8:	00800a84 	movi	r2,42
 201a5bc:	00012606 	br	201aa58 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201a5c0:	e0bfff03 	ldbu	r2,-4(fp)
 201a5c4:	10800530 	cmpltui	r2,r2,20
 201a5c8:	1000021e 	bne	r2,zero,201a5d4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201a5cc:	00800a84 	movi	r2,42
 201a5d0:	00012106 	br	201aa58 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a5d4:	0005303a 	rdctl	r2,status
 201a5d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a5dc:	e0fffd17 	ldw	r3,-12(fp)
 201a5e0:	00bfff84 	movi	r2,-2
 201a5e4:	1884703a 	and	r2,r3,r2
 201a5e8:	1001703a 	wrctl	status,r2
  
  return context;
 201a5ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a5f0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201a5f4:	e0ffff03 	ldbu	r3,-4(fp)
 201a5f8:	008080f4 	movhi	r2,515
 201a5fc:	10b62a04 	addi	r2,r2,-10072
 201a600:	18c7883a 	add	r3,r3,r3
 201a604:	18c7883a 	add	r3,r3,r3
 201a608:	10c5883a 	add	r2,r2,r3
 201a60c:	10800017 	ldw	r2,0(r2)
 201a610:	10000626 	beq	r2,zero,201a62c <OSTaskChangePrio+0xb0>
 201a614:	e0bff517 	ldw	r2,-44(fp)
 201a618:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a61c:	e0bff617 	ldw	r2,-40(fp)
 201a620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201a624:	00800a04 	movi	r2,40
 201a628:	00010b06 	br	201aa58 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201a62c:	e0bffe03 	ldbu	r2,-8(fp)
 201a630:	10803fd8 	cmpnei	r2,r2,255
 201a634:	1000031e 	bne	r2,zero,201a644 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201a638:	d0a74617 	ldw	r2,-25320(gp)
 201a63c:	10800c83 	ldbu	r2,50(r2)
 201a640:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201a644:	e0fffe03 	ldbu	r3,-8(fp)
 201a648:	008080f4 	movhi	r2,515
 201a64c:	10b62a04 	addi	r2,r2,-10072
 201a650:	18c7883a 	add	r3,r3,r3
 201a654:	18c7883a 	add	r3,r3,r3
 201a658:	10c5883a 	add	r2,r2,r3
 201a65c:	10800017 	ldw	r2,0(r2)
 201a660:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201a664:	e0bff817 	ldw	r2,-32(fp)
 201a668:	1000061e 	bne	r2,zero,201a684 <OSTaskChangePrio+0x108>
 201a66c:	e0bff517 	ldw	r2,-44(fp)
 201a670:	e0bff715 	stw	r2,-36(fp)
 201a674:	e0bff717 	ldw	r2,-36(fp)
 201a678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201a67c:	00800a44 	movi	r2,41
 201a680:	0000f506 	br	201aa58 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201a684:	e0bff817 	ldw	r2,-32(fp)
 201a688:	10800058 	cmpnei	r2,r2,1
 201a68c:	1000061e 	bne	r2,zero,201a6a8 <OSTaskChangePrio+0x12c>
 201a690:	e0bff517 	ldw	r2,-44(fp)
 201a694:	e0bff915 	stw	r2,-28(fp)
 201a698:	e0bff917 	ldw	r2,-28(fp)
 201a69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201a6a0:	008010c4 	movi	r2,67
 201a6a4:	0000ec06 	br	201aa58 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201a6a8:	e0bfff03 	ldbu	r2,-4(fp)
 201a6ac:	1004d0fa 	srli	r2,r2,3
 201a6b0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201a6b4:	e0bfff03 	ldbu	r2,-4(fp)
 201a6b8:	108001cc 	andi	r2,r2,7
 201a6bc:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201a6c0:	e0bffb03 	ldbu	r2,-20(fp)
 201a6c4:	00c00044 	movi	r3,1
 201a6c8:	1884983a 	sll	r2,r3,r2
 201a6cc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201a6d0:	e0bffb43 	ldbu	r2,-19(fp)
 201a6d4:	00c00044 	movi	r3,1
 201a6d8:	1884983a 	sll	r2,r3,r2
 201a6dc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201a6e0:	e0fffe03 	ldbu	r3,-8(fp)
 201a6e4:	008080f4 	movhi	r2,515
 201a6e8:	10b62a04 	addi	r2,r2,-10072
 201a6ec:	18c7883a 	add	r3,r3,r3
 201a6f0:	18c7883a 	add	r3,r3,r3
 201a6f4:	10c5883a 	add	r2,r2,r3
 201a6f8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201a6fc:	e0ffff03 	ldbu	r3,-4(fp)
 201a700:	008080f4 	movhi	r2,515
 201a704:	10b62a04 	addi	r2,r2,-10072
 201a708:	18c7883a 	add	r3,r3,r3
 201a70c:	18c7883a 	add	r3,r3,r3
 201a710:	10c5883a 	add	r2,r2,r3
 201a714:	e0fff817 	ldw	r3,-32(fp)
 201a718:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201a71c:	e0bff817 	ldw	r2,-32(fp)
 201a720:	10800d03 	ldbu	r2,52(r2)
 201a724:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201a728:	e0bff817 	ldw	r2,-32(fp)
 201a72c:	10800d83 	ldbu	r2,54(r2)
 201a730:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201a734:	e0bff817 	ldw	r2,-32(fp)
 201a738:	10800d43 	ldbu	r2,53(r2)
 201a73c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201a740:	e0fffc03 	ldbu	r3,-16(fp)
 201a744:	d0a74344 	addi	r2,gp,-25331
 201a748:	1885883a 	add	r2,r3,r2
 201a74c:	10c00003 	ldbu	r3,0(r2)
 201a750:	e0bffc83 	ldbu	r2,-14(fp)
 201a754:	1884703a 	and	r2,r3,r2
 201a758:	10803fcc 	andi	r2,r2,255
 201a75c:	10002826 	beq	r2,zero,201a800 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201a760:	e0fffc03 	ldbu	r3,-16(fp)
 201a764:	e13ffc03 	ldbu	r4,-16(fp)
 201a768:	d0a74344 	addi	r2,gp,-25331
 201a76c:	2085883a 	add	r2,r4,r2
 201a770:	10800003 	ldbu	r2,0(r2)
 201a774:	1009883a 	mov	r4,r2
 201a778:	e0bffc83 	ldbu	r2,-14(fp)
 201a77c:	0084303a 	nor	r2,zero,r2
 201a780:	2084703a 	and	r2,r4,r2
 201a784:	1009883a 	mov	r4,r2
 201a788:	d0a74344 	addi	r2,gp,-25331
 201a78c:	1885883a 	add	r2,r3,r2
 201a790:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201a794:	e0fffc03 	ldbu	r3,-16(fp)
 201a798:	d0a74344 	addi	r2,gp,-25331
 201a79c:	1885883a 	add	r2,r3,r2
 201a7a0:	10800003 	ldbu	r2,0(r2)
 201a7a4:	10803fcc 	andi	r2,r2,255
 201a7a8:	1000061e 	bne	r2,zero,201a7c4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201a7ac:	e0bffc43 	ldbu	r2,-15(fp)
 201a7b0:	0084303a 	nor	r2,zero,r2
 201a7b4:	1007883a 	mov	r3,r2
 201a7b8:	d0a74303 	ldbu	r2,-25332(gp)
 201a7bc:	1884703a 	and	r2,r3,r2
 201a7c0:	d0a74305 	stb	r2,-25332(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201a7c4:	d0e74303 	ldbu	r3,-25332(gp)
 201a7c8:	e0bffb83 	ldbu	r2,-18(fp)
 201a7cc:	1884b03a 	or	r2,r3,r2
 201a7d0:	d0a74305 	stb	r2,-25332(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201a7d4:	e0fffb03 	ldbu	r3,-20(fp)
 201a7d8:	e13ffb03 	ldbu	r4,-20(fp)
 201a7dc:	d0a74344 	addi	r2,gp,-25331
 201a7e0:	2085883a 	add	r2,r4,r2
 201a7e4:	11000003 	ldbu	r4,0(r2)
 201a7e8:	e0bffbc3 	ldbu	r2,-17(fp)
 201a7ec:	2084b03a 	or	r2,r4,r2
 201a7f0:	1009883a 	mov	r4,r2
 201a7f4:	d0a74344 	addi	r2,gp,-25331
 201a7f8:	1885883a 	add	r2,r3,r2
 201a7fc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201a800:	e0bff817 	ldw	r2,-32(fp)
 201a804:	10800717 	ldw	r2,28(r2)
 201a808:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201a80c:	e0bff317 	ldw	r2,-52(fp)
 201a810:	10003326 	beq	r2,zero,201a8e0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201a814:	e0bffc03 	ldbu	r2,-16(fp)
 201a818:	e0fffc03 	ldbu	r3,-16(fp)
 201a81c:	e13ff317 	ldw	r4,-52(fp)
 201a820:	20c7883a 	add	r3,r4,r3
 201a824:	18c002c4 	addi	r3,r3,11
 201a828:	18c00003 	ldbu	r3,0(r3)
 201a82c:	1809883a 	mov	r4,r3
 201a830:	e0fffc83 	ldbu	r3,-14(fp)
 201a834:	00c6303a 	nor	r3,zero,r3
 201a838:	20c6703a 	and	r3,r4,r3
 201a83c:	1809883a 	mov	r4,r3
 201a840:	e0fff317 	ldw	r3,-52(fp)
 201a844:	1885883a 	add	r2,r3,r2
 201a848:	108002c4 	addi	r2,r2,11
 201a84c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201a850:	e0bffc03 	ldbu	r2,-16(fp)
 201a854:	e0fff317 	ldw	r3,-52(fp)
 201a858:	1885883a 	add	r2,r3,r2
 201a85c:	108002c4 	addi	r2,r2,11
 201a860:	10800003 	ldbu	r2,0(r2)
 201a864:	10803fcc 	andi	r2,r2,255
 201a868:	1000091e 	bne	r2,zero,201a890 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201a86c:	e0bff317 	ldw	r2,-52(fp)
 201a870:	10800283 	ldbu	r2,10(r2)
 201a874:	1007883a 	mov	r3,r2
 201a878:	e0bffc43 	ldbu	r2,-15(fp)
 201a87c:	0084303a 	nor	r2,zero,r2
 201a880:	1884703a 	and	r2,r3,r2
 201a884:	1007883a 	mov	r3,r2
 201a888:	e0bff317 	ldw	r2,-52(fp)
 201a88c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201a890:	e0bff317 	ldw	r2,-52(fp)
 201a894:	10c00283 	ldbu	r3,10(r2)
 201a898:	e0bffb83 	ldbu	r2,-18(fp)
 201a89c:	1884b03a 	or	r2,r3,r2
 201a8a0:	1007883a 	mov	r3,r2
 201a8a4:	e0bff317 	ldw	r2,-52(fp)
 201a8a8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201a8ac:	e0bffb03 	ldbu	r2,-20(fp)
 201a8b0:	e0fffb03 	ldbu	r3,-20(fp)
 201a8b4:	e13ff317 	ldw	r4,-52(fp)
 201a8b8:	20c7883a 	add	r3,r4,r3
 201a8bc:	18c002c4 	addi	r3,r3,11
 201a8c0:	19000003 	ldbu	r4,0(r3)
 201a8c4:	e0fffbc3 	ldbu	r3,-17(fp)
 201a8c8:	20c6b03a 	or	r3,r4,r3
 201a8cc:	1809883a 	mov	r4,r3
 201a8d0:	e0fff317 	ldw	r3,-52(fp)
 201a8d4:	1885883a 	add	r2,r3,r2
 201a8d8:	108002c4 	addi	r2,r2,11
 201a8dc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201a8e0:	e0bff817 	ldw	r2,-32(fp)
 201a8e4:	10800817 	ldw	r2,32(r2)
 201a8e8:	10004226 	beq	r2,zero,201a9f4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201a8ec:	e0bff817 	ldw	r2,-32(fp)
 201a8f0:	10800817 	ldw	r2,32(r2)
 201a8f4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201a8f8:	e0bff417 	ldw	r2,-48(fp)
 201a8fc:	10800017 	ldw	r2,0(r2)
 201a900:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201a904:	00003906 	br	201a9ec <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201a908:	e0bffc03 	ldbu	r2,-16(fp)
 201a90c:	e0fffc03 	ldbu	r3,-16(fp)
 201a910:	e13ff317 	ldw	r4,-52(fp)
 201a914:	20c7883a 	add	r3,r4,r3
 201a918:	18c002c4 	addi	r3,r3,11
 201a91c:	18c00003 	ldbu	r3,0(r3)
 201a920:	1809883a 	mov	r4,r3
 201a924:	e0fffc83 	ldbu	r3,-14(fp)
 201a928:	00c6303a 	nor	r3,zero,r3
 201a92c:	20c6703a 	and	r3,r4,r3
 201a930:	1809883a 	mov	r4,r3
 201a934:	e0fff317 	ldw	r3,-52(fp)
 201a938:	1885883a 	add	r2,r3,r2
 201a93c:	108002c4 	addi	r2,r2,11
 201a940:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201a944:	e0bffc03 	ldbu	r2,-16(fp)
 201a948:	e0fff317 	ldw	r3,-52(fp)
 201a94c:	1885883a 	add	r2,r3,r2
 201a950:	108002c4 	addi	r2,r2,11
 201a954:	10800003 	ldbu	r2,0(r2)
 201a958:	10803fcc 	andi	r2,r2,255
 201a95c:	1000091e 	bne	r2,zero,201a984 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201a960:	e0bff317 	ldw	r2,-52(fp)
 201a964:	10800283 	ldbu	r2,10(r2)
 201a968:	1007883a 	mov	r3,r2
 201a96c:	e0bffc43 	ldbu	r2,-15(fp)
 201a970:	0084303a 	nor	r2,zero,r2
 201a974:	1884703a 	and	r2,r3,r2
 201a978:	1007883a 	mov	r3,r2
 201a97c:	e0bff317 	ldw	r2,-52(fp)
 201a980:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201a984:	e0bff317 	ldw	r2,-52(fp)
 201a988:	10c00283 	ldbu	r3,10(r2)
 201a98c:	e0bffb83 	ldbu	r2,-18(fp)
 201a990:	1884b03a 	or	r2,r3,r2
 201a994:	1007883a 	mov	r3,r2
 201a998:	e0bff317 	ldw	r2,-52(fp)
 201a99c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201a9a0:	e0bffb03 	ldbu	r2,-20(fp)
 201a9a4:	e0fffb03 	ldbu	r3,-20(fp)
 201a9a8:	e13ff317 	ldw	r4,-52(fp)
 201a9ac:	20c7883a 	add	r3,r4,r3
 201a9b0:	18c002c4 	addi	r3,r3,11
 201a9b4:	19000003 	ldbu	r4,0(r3)
 201a9b8:	e0fffbc3 	ldbu	r3,-17(fp)
 201a9bc:	20c6b03a 	or	r3,r4,r3
 201a9c0:	1809883a 	mov	r4,r3
 201a9c4:	e0fff317 	ldw	r3,-52(fp)
 201a9c8:	1885883a 	add	r2,r3,r2
 201a9cc:	108002c4 	addi	r2,r2,11
 201a9d0:	11000005 	stb	r4,0(r2)
            pevents++;
 201a9d4:	e0bff417 	ldw	r2,-48(fp)
 201a9d8:	10800104 	addi	r2,r2,4
 201a9dc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201a9e0:	e0bff417 	ldw	r2,-48(fp)
 201a9e4:	10800017 	ldw	r2,0(r2)
 201a9e8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201a9ec:	e0bff317 	ldw	r2,-52(fp)
 201a9f0:	103fc51e 	bne	r2,zero,201a908 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201a9f4:	e0bff817 	ldw	r2,-32(fp)
 201a9f8:	e0ffff03 	ldbu	r3,-4(fp)
 201a9fc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201aa00:	e0bff817 	ldw	r2,-32(fp)
 201aa04:	e0fffb03 	ldbu	r3,-20(fp)
 201aa08:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201aa0c:	e0bff817 	ldw	r2,-32(fp)
 201aa10:	e0fffb43 	ldbu	r3,-19(fp)
 201aa14:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201aa18:	e0bff817 	ldw	r2,-32(fp)
 201aa1c:	e0fffb83 	ldbu	r3,-18(fp)
 201aa20:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201aa24:	e0bff817 	ldw	r2,-32(fp)
 201aa28:	e0fffbc3 	ldbu	r3,-17(fp)
 201aa2c:	10c00d45 	stb	r3,53(r2)
 201aa30:	e0bff517 	ldw	r2,-44(fp)
 201aa34:	e0bffa15 	stw	r2,-24(fp)
 201aa38:	e0bffa17 	ldw	r2,-24(fp)
 201aa3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201aa40:	d0a73743 	ldbu	r2,-25379(gp)
 201aa44:	10803fcc 	andi	r2,r2,255
 201aa48:	10800058 	cmpnei	r2,r2,1
 201aa4c:	1000011e 	bne	r2,zero,201aa54 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201aa50:	20158840 	call	2015884 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201aa54:	0005883a 	mov	r2,zero
}
 201aa58:	e037883a 	mov	sp,fp
 201aa5c:	dfc00117 	ldw	ra,4(sp)
 201aa60:	df000017 	ldw	fp,0(sp)
 201aa64:	dec00204 	addi	sp,sp,8
 201aa68:	f800283a 	ret

0201aa6c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201aa6c:	deffee04 	addi	sp,sp,-72
 201aa70:	dfc01115 	stw	ra,68(sp)
 201aa74:	df001015 	stw	fp,64(sp)
 201aa78:	df001004 	addi	fp,sp,64
 201aa7c:	e13ffc15 	stw	r4,-16(fp)
 201aa80:	e17ffd15 	stw	r5,-12(fp)
 201aa84:	e1bffe15 	stw	r6,-8(fp)
 201aa88:	3805883a 	mov	r2,r7
 201aa8c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201aa90:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201aa94:	e0bfff03 	ldbu	r2,-4(fp)
 201aa98:	10800570 	cmpltui	r2,r2,21
 201aa9c:	1000021e 	bne	r2,zero,201aaa8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201aaa0:	00800a84 	movi	r2,42
 201aaa4:	00005706 	br	201ac04 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aaa8:	0005303a 	rdctl	r2,status
 201aaac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aab0:	e0fffb17 	ldw	r3,-20(fp)
 201aab4:	00bfff84 	movi	r2,-2
 201aab8:	1884703a 	and	r2,r3,r2
 201aabc:	1001703a 	wrctl	status,r2
  
  return context;
 201aac0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201aac4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201aac8:	d0a74503 	ldbu	r2,-25324(gp)
 201aacc:	10803fcc 	andi	r2,r2,255
 201aad0:	10000626 	beq	r2,zero,201aaec <OSTaskCreate+0x80>
 201aad4:	e0bff317 	ldw	r2,-52(fp)
 201aad8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aadc:	e0bff417 	ldw	r2,-48(fp)
 201aae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201aae4:	00800f04 	movi	r2,60
 201aae8:	00004606 	br	201ac04 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201aaec:	e0ffff03 	ldbu	r3,-4(fp)
 201aaf0:	008080f4 	movhi	r2,515
 201aaf4:	10b62a04 	addi	r2,r2,-10072
 201aaf8:	18c7883a 	add	r3,r3,r3
 201aafc:	18c7883a 	add	r3,r3,r3
 201ab00:	10c5883a 	add	r2,r2,r3
 201ab04:	10800017 	ldw	r2,0(r2)
 201ab08:	1000391e 	bne	r2,zero,201abf0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201ab0c:	e0ffff03 	ldbu	r3,-4(fp)
 201ab10:	008080f4 	movhi	r2,515
 201ab14:	10b62a04 	addi	r2,r2,-10072
 201ab18:	18c7883a 	add	r3,r3,r3
 201ab1c:	18c7883a 	add	r3,r3,r3
 201ab20:	10c5883a 	add	r2,r2,r3
 201ab24:	00c00044 	movi	r3,1
 201ab28:	10c00015 	stw	r3,0(r2)
 201ab2c:	e0bff317 	ldw	r2,-52(fp)
 201ab30:	e0bff515 	stw	r2,-44(fp)
 201ab34:	e0bff517 	ldw	r2,-44(fp)
 201ab38:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201ab3c:	000f883a 	mov	r7,zero
 201ab40:	e1bffe17 	ldw	r6,-8(fp)
 201ab44:	e17ffd17 	ldw	r5,-12(fp)
 201ab48:	e13ffc17 	ldw	r4,-16(fp)
 201ab4c:	201dcd00 	call	201dcd0 <OSTaskStkInit>
 201ab50:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201ab54:	e0bfff03 	ldbu	r2,-4(fp)
 201ab58:	d8000215 	stw	zero,8(sp)
 201ab5c:	d8000115 	stw	zero,4(sp)
 201ab60:	d8000015 	stw	zero,0(sp)
 201ab64:	000f883a 	mov	r7,zero
 201ab68:	000d883a 	mov	r6,zero
 201ab6c:	e17ff717 	ldw	r5,-36(fp)
 201ab70:	1009883a 	mov	r4,r2
 201ab74:	2015c840 	call	2015c84 <OS_TCBInit>
 201ab78:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201ab7c:	e0bff803 	ldbu	r2,-32(fp)
 201ab80:	1000061e 	bne	r2,zero,201ab9c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201ab84:	d0a73743 	ldbu	r2,-25379(gp)
 201ab88:	10803fcc 	andi	r2,r2,255
 201ab8c:	10800058 	cmpnei	r2,r2,1
 201ab90:	1000151e 	bne	r2,zero,201abe8 <OSTaskCreate+0x17c>
                OS_Sched();
 201ab94:	20158840 	call	2015884 <OS_Sched>
 201ab98:	00001306 	br	201abe8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ab9c:	0005303a 	rdctl	r2,status
 201aba0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aba4:	e0fffa17 	ldw	r3,-24(fp)
 201aba8:	00bfff84 	movi	r2,-2
 201abac:	1884703a 	and	r2,r3,r2
 201abb0:	1001703a 	wrctl	status,r2
  
  return context;
 201abb4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201abb8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201abbc:	e0ffff03 	ldbu	r3,-4(fp)
 201abc0:	008080f4 	movhi	r2,515
 201abc4:	10b62a04 	addi	r2,r2,-10072
 201abc8:	18c7883a 	add	r3,r3,r3
 201abcc:	18c7883a 	add	r3,r3,r3
 201abd0:	10c5883a 	add	r2,r2,r3
 201abd4:	10000015 	stw	zero,0(r2)
 201abd8:	e0bff317 	ldw	r2,-52(fp)
 201abdc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201abe0:	e0bff617 	ldw	r2,-40(fp)
 201abe4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201abe8:	e0bff803 	ldbu	r2,-32(fp)
 201abec:	00000506 	br	201ac04 <OSTaskCreate+0x198>
 201abf0:	e0bff317 	ldw	r2,-52(fp)
 201abf4:	e0bff915 	stw	r2,-28(fp)
 201abf8:	e0bff917 	ldw	r2,-28(fp)
 201abfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201ac00:	00800a04 	movi	r2,40
}
 201ac04:	e037883a 	mov	sp,fp
 201ac08:	dfc00117 	ldw	ra,4(sp)
 201ac0c:	df000017 	ldw	fp,0(sp)
 201ac10:	dec00204 	addi	sp,sp,8
 201ac14:	f800283a 	ret

0201ac18 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201ac18:	deffec04 	addi	sp,sp,-80
 201ac1c:	dfc01315 	stw	ra,76(sp)
 201ac20:	df001215 	stw	fp,72(sp)
 201ac24:	df001204 	addi	fp,sp,72
 201ac28:	e13ffa15 	stw	r4,-24(fp)
 201ac2c:	e17ffb15 	stw	r5,-20(fp)
 201ac30:	e1bffc15 	stw	r6,-16(fp)
 201ac34:	3809883a 	mov	r4,r7
 201ac38:	e0c00217 	ldw	r3,8(fp)
 201ac3c:	e0800617 	ldw	r2,24(fp)
 201ac40:	e13ffd05 	stb	r4,-12(fp)
 201ac44:	e0fffe0d 	sth	r3,-8(fp)
 201ac48:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201ac4c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201ac50:	e0bffd03 	ldbu	r2,-12(fp)
 201ac54:	10800570 	cmpltui	r2,r2,21
 201ac58:	1000021e 	bne	r2,zero,201ac64 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201ac5c:	00800a84 	movi	r2,42
 201ac60:	00006106 	br	201ade8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ac64:	0005303a 	rdctl	r2,status
 201ac68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ac6c:	e0fff917 	ldw	r3,-28(fp)
 201ac70:	00bfff84 	movi	r2,-2
 201ac74:	1884703a 	and	r2,r3,r2
 201ac78:	1001703a 	wrctl	status,r2
  
  return context;
 201ac7c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ac80:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201ac84:	d0a74503 	ldbu	r2,-25324(gp)
 201ac88:	10803fcc 	andi	r2,r2,255
 201ac8c:	10000626 	beq	r2,zero,201aca8 <OSTaskCreateExt+0x90>
 201ac90:	e0bff117 	ldw	r2,-60(fp)
 201ac94:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac98:	e0bff217 	ldw	r2,-56(fp)
 201ac9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201aca0:	00800f04 	movi	r2,60
 201aca4:	00005006 	br	201ade8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201aca8:	e0fffd03 	ldbu	r3,-12(fp)
 201acac:	008080f4 	movhi	r2,515
 201acb0:	10b62a04 	addi	r2,r2,-10072
 201acb4:	18c7883a 	add	r3,r3,r3
 201acb8:	18c7883a 	add	r3,r3,r3
 201acbc:	10c5883a 	add	r2,r2,r3
 201acc0:	10800017 	ldw	r2,0(r2)
 201acc4:	1000431e 	bne	r2,zero,201add4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201acc8:	e0fffd03 	ldbu	r3,-12(fp)
 201accc:	008080f4 	movhi	r2,515
 201acd0:	10b62a04 	addi	r2,r2,-10072
 201acd4:	18c7883a 	add	r3,r3,r3
 201acd8:	18c7883a 	add	r3,r3,r3
 201acdc:	10c5883a 	add	r2,r2,r3
 201ace0:	00c00044 	movi	r3,1
 201ace4:	10c00015 	stw	r3,0(r2)
 201ace8:	e0bff117 	ldw	r2,-60(fp)
 201acec:	e0bff315 	stw	r2,-52(fp)
 201acf0:	e0bff317 	ldw	r2,-52(fp)
 201acf4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201acf8:	e0bfff0b 	ldhu	r2,-4(fp)
 201acfc:	100d883a 	mov	r6,r2
 201ad00:	e1400417 	ldw	r5,16(fp)
 201ad04:	e1000317 	ldw	r4,12(fp)
 201ad08:	201bc780 	call	201bc78 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201ad0c:	e0bfff0b 	ldhu	r2,-4(fp)
 201ad10:	100f883a 	mov	r7,r2
 201ad14:	e1bffc17 	ldw	r6,-16(fp)
 201ad18:	e17ffb17 	ldw	r5,-20(fp)
 201ad1c:	e13ffa17 	ldw	r4,-24(fp)
 201ad20:	201dcd00 	call	201dcd0 <OSTaskStkInit>
 201ad24:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201ad28:	e0fffd03 	ldbu	r3,-12(fp)
 201ad2c:	e13ffe0b 	ldhu	r4,-8(fp)
 201ad30:	e0bfff0b 	ldhu	r2,-4(fp)
 201ad34:	d8800215 	stw	r2,8(sp)
 201ad38:	e0800517 	ldw	r2,20(fp)
 201ad3c:	d8800115 	stw	r2,4(sp)
 201ad40:	e0800417 	ldw	r2,16(fp)
 201ad44:	d8800015 	stw	r2,0(sp)
 201ad48:	200f883a 	mov	r7,r4
 201ad4c:	e1800317 	ldw	r6,12(fp)
 201ad50:	e17ff517 	ldw	r5,-44(fp)
 201ad54:	1809883a 	mov	r4,r3
 201ad58:	2015c840 	call	2015c84 <OS_TCBInit>
 201ad5c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201ad60:	e0bff603 	ldbu	r2,-40(fp)
 201ad64:	1000061e 	bne	r2,zero,201ad80 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201ad68:	d0a73743 	ldbu	r2,-25379(gp)
 201ad6c:	10803fcc 	andi	r2,r2,255
 201ad70:	10800058 	cmpnei	r2,r2,1
 201ad74:	1000151e 	bne	r2,zero,201adcc <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201ad78:	20158840 	call	2015884 <OS_Sched>
 201ad7c:	00001306 	br	201adcc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad80:	0005303a 	rdctl	r2,status
 201ad84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad88:	e0fff817 	ldw	r3,-32(fp)
 201ad8c:	00bfff84 	movi	r2,-2
 201ad90:	1884703a 	and	r2,r3,r2
 201ad94:	1001703a 	wrctl	status,r2
  
  return context;
 201ad98:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201ad9c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201ada0:	e0fffd03 	ldbu	r3,-12(fp)
 201ada4:	008080f4 	movhi	r2,515
 201ada8:	10b62a04 	addi	r2,r2,-10072
 201adac:	18c7883a 	add	r3,r3,r3
 201adb0:	18c7883a 	add	r3,r3,r3
 201adb4:	10c5883a 	add	r2,r2,r3
 201adb8:	10000015 	stw	zero,0(r2)
 201adbc:	e0bff117 	ldw	r2,-60(fp)
 201adc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201adc4:	e0bff417 	ldw	r2,-48(fp)
 201adc8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201adcc:	e0bff603 	ldbu	r2,-40(fp)
 201add0:	00000506 	br	201ade8 <OSTaskCreateExt+0x1d0>
 201add4:	e0bff117 	ldw	r2,-60(fp)
 201add8:	e0bff715 	stw	r2,-36(fp)
 201addc:	e0bff717 	ldw	r2,-36(fp)
 201ade0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201ade4:	00800a04 	movi	r2,40
}
 201ade8:	e037883a 	mov	sp,fp
 201adec:	dfc00117 	ldw	ra,4(sp)
 201adf0:	df000017 	ldw	fp,0(sp)
 201adf4:	dec00204 	addi	sp,sp,8
 201adf8:	f800283a 	ret

0201adfc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201adfc:	defff404 	addi	sp,sp,-48
 201ae00:	dfc00b15 	stw	ra,44(sp)
 201ae04:	df000a15 	stw	fp,40(sp)
 201ae08:	df000a04 	addi	fp,sp,40
 201ae0c:	2005883a 	mov	r2,r4
 201ae10:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201ae14:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201ae18:	d0a74503 	ldbu	r2,-25324(gp)
 201ae1c:	10803fcc 	andi	r2,r2,255
 201ae20:	10000226 	beq	r2,zero,201ae2c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201ae24:	00801004 	movi	r2,64
 201ae28:	0000c006 	br	201b12c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201ae2c:	e0bfff03 	ldbu	r2,-4(fp)
 201ae30:	10800518 	cmpnei	r2,r2,20
 201ae34:	1000021e 	bne	r2,zero,201ae40 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201ae38:	00800f84 	movi	r2,62
 201ae3c:	0000bb06 	br	201b12c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201ae40:	e0bfff03 	ldbu	r2,-4(fp)
 201ae44:	10800530 	cmpltui	r2,r2,20
 201ae48:	1000051e 	bne	r2,zero,201ae60 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201ae4c:	e0bfff03 	ldbu	r2,-4(fp)
 201ae50:	10803fe0 	cmpeqi	r2,r2,255
 201ae54:	1000021e 	bne	r2,zero,201ae60 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201ae58:	00800a84 	movi	r2,42
 201ae5c:	0000b306 	br	201b12c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ae60:	0005303a 	rdctl	r2,status
 201ae64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ae68:	e0fffe17 	ldw	r3,-8(fp)
 201ae6c:	00bfff84 	movi	r2,-2
 201ae70:	1884703a 	and	r2,r3,r2
 201ae74:	1001703a 	wrctl	status,r2
  
  return context;
 201ae78:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201ae7c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201ae80:	e0bfff03 	ldbu	r2,-4(fp)
 201ae84:	10803fd8 	cmpnei	r2,r2,255
 201ae88:	1000031e 	bne	r2,zero,201ae98 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201ae8c:	d0a74617 	ldw	r2,-25320(gp)
 201ae90:	10800c83 	ldbu	r2,50(r2)
 201ae94:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ae98:	e0ffff03 	ldbu	r3,-4(fp)
 201ae9c:	008080f4 	movhi	r2,515
 201aea0:	10b62a04 	addi	r2,r2,-10072
 201aea4:	18c7883a 	add	r3,r3,r3
 201aea8:	18c7883a 	add	r3,r3,r3
 201aeac:	10c5883a 	add	r2,r2,r3
 201aeb0:	10800017 	ldw	r2,0(r2)
 201aeb4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201aeb8:	e0bff817 	ldw	r2,-32(fp)
 201aebc:	1000061e 	bne	r2,zero,201aed8 <OSTaskDel+0xdc>
 201aec0:	e0bff617 	ldw	r2,-40(fp)
 201aec4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aec8:	e0bff717 	ldw	r2,-36(fp)
 201aecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201aed0:	008010c4 	movi	r2,67
 201aed4:	00009506 	br	201b12c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201aed8:	e0bff817 	ldw	r2,-32(fp)
 201aedc:	10800058 	cmpnei	r2,r2,1
 201aee0:	1000061e 	bne	r2,zero,201aefc <OSTaskDel+0x100>
 201aee4:	e0bff617 	ldw	r2,-40(fp)
 201aee8:	e0bff915 	stw	r2,-28(fp)
 201aeec:	e0bff917 	ldw	r2,-28(fp)
 201aef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201aef4:	00800f44 	movi	r2,61
 201aef8:	00008c06 	br	201b12c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201aefc:	e0bff817 	ldw	r2,-32(fp)
 201af00:	10800d03 	ldbu	r2,52(r2)
 201af04:	10c03fcc 	andi	r3,r2,255
 201af08:	e0bff817 	ldw	r2,-32(fp)
 201af0c:	10800d03 	ldbu	r2,52(r2)
 201af10:	11003fcc 	andi	r4,r2,255
 201af14:	d0a74344 	addi	r2,gp,-25331
 201af18:	2085883a 	add	r2,r4,r2
 201af1c:	10800003 	ldbu	r2,0(r2)
 201af20:	1009883a 	mov	r4,r2
 201af24:	e0bff817 	ldw	r2,-32(fp)
 201af28:	10800d43 	ldbu	r2,53(r2)
 201af2c:	0084303a 	nor	r2,zero,r2
 201af30:	2084703a 	and	r2,r4,r2
 201af34:	1009883a 	mov	r4,r2
 201af38:	d0a74344 	addi	r2,gp,-25331
 201af3c:	1885883a 	add	r2,r3,r2
 201af40:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201af44:	e0bff817 	ldw	r2,-32(fp)
 201af48:	10800d03 	ldbu	r2,52(r2)
 201af4c:	10c03fcc 	andi	r3,r2,255
 201af50:	d0a74344 	addi	r2,gp,-25331
 201af54:	1885883a 	add	r2,r3,r2
 201af58:	10800003 	ldbu	r2,0(r2)
 201af5c:	10803fcc 	andi	r2,r2,255
 201af60:	1000071e 	bne	r2,zero,201af80 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201af64:	e0bff817 	ldw	r2,-32(fp)
 201af68:	10800d83 	ldbu	r2,54(r2)
 201af6c:	0084303a 	nor	r2,zero,r2
 201af70:	1007883a 	mov	r3,r2
 201af74:	d0a74303 	ldbu	r2,-25332(gp)
 201af78:	1884703a 	and	r2,r3,r2
 201af7c:	d0a74305 	stb	r2,-25332(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201af80:	e0bff817 	ldw	r2,-32(fp)
 201af84:	10800717 	ldw	r2,28(r2)
 201af88:	10000526 	beq	r2,zero,201afa0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201af8c:	e0bff817 	ldw	r2,-32(fp)
 201af90:	10800717 	ldw	r2,28(r2)
 201af94:	100b883a 	mov	r5,r2
 201af98:	e13ff817 	ldw	r4,-32(fp)
 201af9c:	20152300 	call	2015230 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201afa0:	e0bff817 	ldw	r2,-32(fp)
 201afa4:	10800817 	ldw	r2,32(r2)
 201afa8:	10000526 	beq	r2,zero,201afc0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201afac:	e0bff817 	ldw	r2,-32(fp)
 201afb0:	10800817 	ldw	r2,32(r2)
 201afb4:	100b883a 	mov	r5,r2
 201afb8:	e13ff817 	ldw	r4,-32(fp)
 201afbc:	20152e80 	call	20152e8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201afc0:	e0bff817 	ldw	r2,-32(fp)
 201afc4:	10800a17 	ldw	r2,40(r2)
 201afc8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201afcc:	e0bffb17 	ldw	r2,-20(fp)
 201afd0:	10000226 	beq	r2,zero,201afdc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201afd4:	e13ffb17 	ldw	r4,-20(fp)
 201afd8:	20177580 	call	2017758 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201afdc:	e0bff817 	ldw	r2,-32(fp)
 201afe0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201afe4:	e0bff817 	ldw	r2,-32(fp)
 201afe8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201afec:	e0bff817 	ldw	r2,-32(fp)
 201aff0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201aff4:	d0a73703 	ldbu	r2,-25380(gp)
 201aff8:	10803fcc 	andi	r2,r2,255
 201affc:	10803fe0 	cmpeqi	r2,r2,255
 201b000:	1000031e 	bne	r2,zero,201b010 <OSTaskDel+0x214>
        OSLockNesting++;
 201b004:	d0a73703 	ldbu	r2,-25380(gp)
 201b008:	10800044 	addi	r2,r2,1
 201b00c:	d0a73705 	stb	r2,-25380(gp)
 201b010:	e0bff617 	ldw	r2,-40(fp)
 201b014:	e0bffd15 	stw	r2,-12(fp)
 201b018:	e0bffd17 	ldw	r2,-12(fp)
 201b01c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201b020:	2014e180 	call	2014e18 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b024:	0005303a 	rdctl	r2,status
 201b028:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b02c:	e0fffa17 	ldw	r3,-24(fp)
 201b030:	00bfff84 	movi	r2,-2
 201b034:	1884703a 	and	r2,r3,r2
 201b038:	1001703a 	wrctl	status,r2
  
  return context;
 201b03c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201b040:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201b044:	d0a73703 	ldbu	r2,-25380(gp)
 201b048:	10803fcc 	andi	r2,r2,255
 201b04c:	10000326 	beq	r2,zero,201b05c <OSTaskDel+0x260>
        OSLockNesting--;
 201b050:	d0a73703 	ldbu	r2,-25380(gp)
 201b054:	10bfffc4 	addi	r2,r2,-1
 201b058:	d0a73705 	stb	r2,-25380(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201b05c:	e13ff817 	ldw	r4,-32(fp)
 201b060:	201de500 	call	201de50 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201b064:	d0a73f43 	ldbu	r2,-25347(gp)
 201b068:	10bfffc4 	addi	r2,r2,-1
 201b06c:	d0a73f45 	stb	r2,-25347(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201b070:	e0ffff03 	ldbu	r3,-4(fp)
 201b074:	008080f4 	movhi	r2,515
 201b078:	10b62a04 	addi	r2,r2,-10072
 201b07c:	18c7883a 	add	r3,r3,r3
 201b080:	18c7883a 	add	r3,r3,r3
 201b084:	10c5883a 	add	r2,r2,r3
 201b088:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201b08c:	e0bff817 	ldw	r2,-32(fp)
 201b090:	10800617 	ldw	r2,24(r2)
 201b094:	1000071e 	bne	r2,zero,201b0b4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201b098:	e0bff817 	ldw	r2,-32(fp)
 201b09c:	10800517 	ldw	r2,20(r2)
 201b0a0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201b0a4:	e0bff817 	ldw	r2,-32(fp)
 201b0a8:	10800517 	ldw	r2,20(r2)
 201b0ac:	d0a73a15 	stw	r2,-25368(gp)
 201b0b0:	00000a06 	br	201b0dc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201b0b4:	e0bff817 	ldw	r2,-32(fp)
 201b0b8:	10800617 	ldw	r2,24(r2)
 201b0bc:	e0fff817 	ldw	r3,-32(fp)
 201b0c0:	18c00517 	ldw	r3,20(r3)
 201b0c4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201b0c8:	e0bff817 	ldw	r2,-32(fp)
 201b0cc:	10800517 	ldw	r2,20(r2)
 201b0d0:	e0fff817 	ldw	r3,-32(fp)
 201b0d4:	18c00617 	ldw	r3,24(r3)
 201b0d8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201b0dc:	d0e73e17 	ldw	r3,-25352(gp)
 201b0e0:	e0bff817 	ldw	r2,-32(fp)
 201b0e4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201b0e8:	e0bff817 	ldw	r2,-32(fp)
 201b0ec:	d0a73e15 	stw	r2,-25352(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201b0f0:	e0bff817 	ldw	r2,-32(fp)
 201b0f4:	00c00fc4 	movi	r3,63
 201b0f8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201b0fc:	e0bff817 	ldw	r2,-32(fp)
 201b100:	10001345 	stb	zero,77(r2)
 201b104:	e0bff617 	ldw	r2,-40(fp)
 201b108:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b10c:	e0bffc17 	ldw	r2,-16(fp)
 201b110:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201b114:	d0a73743 	ldbu	r2,-25379(gp)
 201b118:	10803fcc 	andi	r2,r2,255
 201b11c:	10800058 	cmpnei	r2,r2,1
 201b120:	1000011e 	bne	r2,zero,201b128 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201b124:	20158840 	call	2015884 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201b128:	0005883a 	mov	r2,zero
}
 201b12c:	e037883a 	mov	sp,fp
 201b130:	dfc00117 	ldw	ra,4(sp)
 201b134:	df000017 	ldw	fp,0(sp)
 201b138:	dec00204 	addi	sp,sp,8
 201b13c:	f800283a 	ret

0201b140 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201b140:	defff504 	addi	sp,sp,-44
 201b144:	df000a15 	stw	fp,40(sp)
 201b148:	df000a04 	addi	fp,sp,40
 201b14c:	2005883a 	mov	r2,r4
 201b150:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b154:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201b158:	e0bfff03 	ldbu	r2,-4(fp)
 201b15c:	10800518 	cmpnei	r2,r2,20
 201b160:	1000021e 	bne	r2,zero,201b16c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201b164:	00800f84 	movi	r2,62
 201b168:	00004506 	br	201b280 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201b16c:	e0bfff03 	ldbu	r2,-4(fp)
 201b170:	10800530 	cmpltui	r2,r2,20
 201b174:	1000051e 	bne	r2,zero,201b18c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201b178:	e0bfff03 	ldbu	r2,-4(fp)
 201b17c:	10803fe0 	cmpeqi	r2,r2,255
 201b180:	1000021e 	bne	r2,zero,201b18c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201b184:	00800a84 	movi	r2,42
 201b188:	00003d06 	br	201b280 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201b18c:	e0bfff03 	ldbu	r2,-4(fp)
 201b190:	10803fd8 	cmpnei	r2,r2,255
 201b194:	1000111e 	bne	r2,zero,201b1dc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b198:	0005303a 	rdctl	r2,status
 201b19c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b1a0:	e0fff917 	ldw	r3,-28(fp)
 201b1a4:	00bfff84 	movi	r2,-2
 201b1a8:	1884703a 	and	r2,r3,r2
 201b1ac:	1001703a 	wrctl	status,r2
  
  return context;
 201b1b0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201b1b4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201b1b8:	d0a74617 	ldw	r2,-25320(gp)
 201b1bc:	10800dc3 	ldbu	r2,55(r2)
 201b1c0:	e0bff805 	stb	r2,-32(fp)
 201b1c4:	e0bff617 	ldw	r2,-40(fp)
 201b1c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1cc:	e0bffe17 	ldw	r2,-8(fp)
 201b1d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201b1d4:	e0bff803 	ldbu	r2,-32(fp)
 201b1d8:	00002906 	br	201b280 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b1dc:	0005303a 	rdctl	r2,status
 201b1e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b1e4:	e0fff717 	ldw	r3,-36(fp)
 201b1e8:	00bfff84 	movi	r2,-2
 201b1ec:	1884703a 	and	r2,r3,r2
 201b1f0:	1001703a 	wrctl	status,r2
  
  return context;
 201b1f4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201b1f8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201b1fc:	e0ffff03 	ldbu	r3,-4(fp)
 201b200:	008080f4 	movhi	r2,515
 201b204:	10b62a04 	addi	r2,r2,-10072
 201b208:	18c7883a 	add	r3,r3,r3
 201b20c:	18c7883a 	add	r3,r3,r3
 201b210:	10c5883a 	add	r2,r2,r3
 201b214:	10800017 	ldw	r2,0(r2)
 201b218:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201b21c:	e0bffb17 	ldw	r2,-20(fp)
 201b220:	1000061e 	bne	r2,zero,201b23c <OSTaskDelReq+0xfc>
 201b224:	e0bff617 	ldw	r2,-40(fp)
 201b228:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b22c:	e0bffa17 	ldw	r2,-24(fp)
 201b230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201b234:	008010c4 	movi	r2,67
 201b238:	00001106 	br	201b280 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201b23c:	e0bffb17 	ldw	r2,-20(fp)
 201b240:	10800058 	cmpnei	r2,r2,1
 201b244:	1000061e 	bne	r2,zero,201b260 <OSTaskDelReq+0x120>
 201b248:	e0bff617 	ldw	r2,-40(fp)
 201b24c:	e0bffc15 	stw	r2,-16(fp)
 201b250:	e0bffc17 	ldw	r2,-16(fp)
 201b254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201b258:	00800f44 	movi	r2,61
 201b25c:	00000806 	br	201b280 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201b260:	e0bffb17 	ldw	r2,-20(fp)
 201b264:	00c00fc4 	movi	r3,63
 201b268:	10c00dc5 	stb	r3,55(r2)
 201b26c:	e0bff617 	ldw	r2,-40(fp)
 201b270:	e0bffd15 	stw	r2,-12(fp)
 201b274:	e0bffd17 	ldw	r2,-12(fp)
 201b278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b27c:	0005883a 	mov	r2,zero
}
 201b280:	e037883a 	mov	sp,fp
 201b284:	df000017 	ldw	fp,0(sp)
 201b288:	dec00104 	addi	sp,sp,4
 201b28c:	f800283a 	ret

0201b290 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201b290:	defff404 	addi	sp,sp,-48
 201b294:	dfc00b15 	stw	ra,44(sp)
 201b298:	df000a15 	stw	fp,40(sp)
 201b29c:	df000a04 	addi	fp,sp,40
 201b2a0:	2005883a 	mov	r2,r4
 201b2a4:	e17ffe15 	stw	r5,-8(fp)
 201b2a8:	e1bfff15 	stw	r6,-4(fp)
 201b2ac:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201b2b0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201b2b4:	e0bfff17 	ldw	r2,-4(fp)
 201b2b8:	1000021e 	bne	r2,zero,201b2c4 <OSTaskNameGet+0x34>
        return (0);
 201b2bc:	0005883a 	mov	r2,zero
 201b2c0:	00005406 	br	201b414 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201b2c4:	e0bffd03 	ldbu	r2,-12(fp)
 201b2c8:	10800570 	cmpltui	r2,r2,21
 201b2cc:	1000081e 	bne	r2,zero,201b2f0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201b2d0:	e0bffd03 	ldbu	r2,-12(fp)
 201b2d4:	10803fe0 	cmpeqi	r2,r2,255
 201b2d8:	1000051e 	bne	r2,zero,201b2f0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201b2dc:	e0bfff17 	ldw	r2,-4(fp)
 201b2e0:	00c00a84 	movi	r3,42
 201b2e4:	10c00005 	stb	r3,0(r2)
            return (0);
 201b2e8:	0005883a 	mov	r2,zero
 201b2ec:	00004906 	br	201b414 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201b2f0:	e0bffe17 	ldw	r2,-8(fp)
 201b2f4:	1000051e 	bne	r2,zero,201b30c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201b2f8:	e0bfff17 	ldw	r2,-4(fp)
 201b2fc:	00c00304 	movi	r3,12
 201b300:	10c00005 	stb	r3,0(r2)
        return (0);
 201b304:	0005883a 	mov	r2,zero
 201b308:	00004206 	br	201b414 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201b30c:	d0a74503 	ldbu	r2,-25324(gp)
 201b310:	10803fcc 	andi	r2,r2,255
 201b314:	10000526 	beq	r2,zero,201b32c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201b318:	e0bfff17 	ldw	r2,-4(fp)
 201b31c:	00c00444 	movi	r3,17
 201b320:	10c00005 	stb	r3,0(r2)
        return (0);
 201b324:	0005883a 	mov	r2,zero
 201b328:	00003a06 	br	201b414 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b32c:	0005303a 	rdctl	r2,status
 201b330:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b334:	e0fffc17 	ldw	r3,-16(fp)
 201b338:	00bfff84 	movi	r2,-2
 201b33c:	1884703a 	and	r2,r3,r2
 201b340:	1001703a 	wrctl	status,r2
  
  return context;
 201b344:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b348:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201b34c:	e0bffd03 	ldbu	r2,-12(fp)
 201b350:	10803fd8 	cmpnei	r2,r2,255
 201b354:	1000031e 	bne	r2,zero,201b364 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201b358:	d0a74617 	ldw	r2,-25320(gp)
 201b35c:	10800c83 	ldbu	r2,50(r2)
 201b360:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b364:	e0fffd03 	ldbu	r3,-12(fp)
 201b368:	008080f4 	movhi	r2,515
 201b36c:	10b62a04 	addi	r2,r2,-10072
 201b370:	18c7883a 	add	r3,r3,r3
 201b374:	18c7883a 	add	r3,r3,r3
 201b378:	10c5883a 	add	r2,r2,r3
 201b37c:	10800017 	ldw	r2,0(r2)
 201b380:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201b384:	e0bff817 	ldw	r2,-32(fp)
 201b388:	1000091e 	bne	r2,zero,201b3b0 <OSTaskNameGet+0x120>
 201b38c:	e0bff617 	ldw	r2,-40(fp)
 201b390:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b394:	e0bff717 	ldw	r2,-36(fp)
 201b398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b39c:	e0bfff17 	ldw	r2,-4(fp)
 201b3a0:	00c010c4 	movi	r3,67
 201b3a4:	10c00005 	stb	r3,0(r2)
        return (0);
 201b3a8:	0005883a 	mov	r2,zero
 201b3ac:	00001906 	br	201b414 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201b3b0:	e0bff817 	ldw	r2,-32(fp)
 201b3b4:	10800058 	cmpnei	r2,r2,1
 201b3b8:	1000091e 	bne	r2,zero,201b3e0 <OSTaskNameGet+0x150>
 201b3bc:	e0bff617 	ldw	r2,-40(fp)
 201b3c0:	e0bff915 	stw	r2,-28(fp)
 201b3c4:	e0bff917 	ldw	r2,-28(fp)
 201b3c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b3cc:	e0bfff17 	ldw	r2,-4(fp)
 201b3d0:	00c010c4 	movi	r3,67
 201b3d4:	10c00005 	stb	r3,0(r2)
        return (0);
 201b3d8:	0005883a 	mov	r2,zero
 201b3dc:	00000d06 	br	201b414 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201b3e0:	e0bff817 	ldw	r2,-32(fp)
 201b3e4:	10801304 	addi	r2,r2,76
 201b3e8:	100b883a 	mov	r5,r2
 201b3ec:	e13ffe17 	ldw	r4,-8(fp)
 201b3f0:	20159c80 	call	20159c8 <OS_StrCopy>
 201b3f4:	e0bffb05 	stb	r2,-20(fp)
 201b3f8:	e0bff617 	ldw	r2,-40(fp)
 201b3fc:	e0bffa15 	stw	r2,-24(fp)
 201b400:	e0bffa17 	ldw	r2,-24(fp)
 201b404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b408:	e0bfff17 	ldw	r2,-4(fp)
 201b40c:	10000005 	stb	zero,0(r2)
    return (len);
 201b410:	e0bffb03 	ldbu	r2,-20(fp)
}
 201b414:	e037883a 	mov	sp,fp
 201b418:	dfc00117 	ldw	ra,4(sp)
 201b41c:	df000017 	ldw	fp,0(sp)
 201b420:	dec00204 	addi	sp,sp,8
 201b424:	f800283a 	ret

0201b428 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201b428:	defff304 	addi	sp,sp,-52
 201b42c:	dfc00c15 	stw	ra,48(sp)
 201b430:	df000b15 	stw	fp,44(sp)
 201b434:	df000b04 	addi	fp,sp,44
 201b438:	2005883a 	mov	r2,r4
 201b43c:	e17ffe15 	stw	r5,-8(fp)
 201b440:	e1bfff15 	stw	r6,-4(fp)
 201b444:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b448:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201b44c:	e0bfff17 	ldw	r2,-4(fp)
 201b450:	10005c26 	beq	r2,zero,201b5c4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201b454:	e0bffd03 	ldbu	r2,-12(fp)
 201b458:	10800570 	cmpltui	r2,r2,21
 201b45c:	1000071e 	bne	r2,zero,201b47c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201b460:	e0bffd03 	ldbu	r2,-12(fp)
 201b464:	10803fe0 	cmpeqi	r2,r2,255
 201b468:	1000041e 	bne	r2,zero,201b47c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201b46c:	e0bfff17 	ldw	r2,-4(fp)
 201b470:	00c00a84 	movi	r3,42
 201b474:	10c00005 	stb	r3,0(r2)
            return;
 201b478:	00005306 	br	201b5c8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201b47c:	e0bffe17 	ldw	r2,-8(fp)
 201b480:	1000041e 	bne	r2,zero,201b494 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201b484:	e0bfff17 	ldw	r2,-4(fp)
 201b488:	00c00304 	movi	r3,12
 201b48c:	10c00005 	stb	r3,0(r2)
        return;
 201b490:	00004d06 	br	201b5c8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201b494:	d0a74503 	ldbu	r2,-25324(gp)
 201b498:	10803fcc 	andi	r2,r2,255
 201b49c:	10000426 	beq	r2,zero,201b4b0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201b4a0:	e0bfff17 	ldw	r2,-4(fp)
 201b4a4:	00c00484 	movi	r3,18
 201b4a8:	10c00005 	stb	r3,0(r2)
        return;
 201b4ac:	00004606 	br	201b5c8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b4b0:	0005303a 	rdctl	r2,status
 201b4b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b4b8:	e0fffc17 	ldw	r3,-16(fp)
 201b4bc:	00bfff84 	movi	r2,-2
 201b4c0:	1884703a 	and	r2,r3,r2
 201b4c4:	1001703a 	wrctl	status,r2
  
  return context;
 201b4c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b4cc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201b4d0:	e0bffd03 	ldbu	r2,-12(fp)
 201b4d4:	10803fd8 	cmpnei	r2,r2,255
 201b4d8:	1000031e 	bne	r2,zero,201b4e8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201b4dc:	d0a74617 	ldw	r2,-25320(gp)
 201b4e0:	10800c83 	ldbu	r2,50(r2)
 201b4e4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b4e8:	e0fffd03 	ldbu	r3,-12(fp)
 201b4ec:	008080f4 	movhi	r2,515
 201b4f0:	10b62a04 	addi	r2,r2,-10072
 201b4f4:	18c7883a 	add	r3,r3,r3
 201b4f8:	18c7883a 	add	r3,r3,r3
 201b4fc:	10c5883a 	add	r2,r2,r3
 201b500:	10800017 	ldw	r2,0(r2)
 201b504:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201b508:	e0bff717 	ldw	r2,-36(fp)
 201b50c:	1000081e 	bne	r2,zero,201b530 <OSTaskNameSet+0x108>
 201b510:	e0bff517 	ldw	r2,-44(fp)
 201b514:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b518:	e0bff617 	ldw	r2,-40(fp)
 201b51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b520:	e0bfff17 	ldw	r2,-4(fp)
 201b524:	00c010c4 	movi	r3,67
 201b528:	10c00005 	stb	r3,0(r2)
        return;
 201b52c:	00002606 	br	201b5c8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201b530:	e0bff717 	ldw	r2,-36(fp)
 201b534:	10800058 	cmpnei	r2,r2,1
 201b538:	1000081e 	bne	r2,zero,201b55c <OSTaskNameSet+0x134>
 201b53c:	e0bff517 	ldw	r2,-44(fp)
 201b540:	e0bff815 	stw	r2,-32(fp)
 201b544:	e0bff817 	ldw	r2,-32(fp)
 201b548:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b54c:	e0bfff17 	ldw	r2,-4(fp)
 201b550:	00c010c4 	movi	r3,67
 201b554:	10c00005 	stb	r3,0(r2)
        return;
 201b558:	00001b06 	br	201b5c8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201b55c:	e13ffe17 	ldw	r4,-8(fp)
 201b560:	2015a3c0 	call	2015a3c <OS_StrLen>
 201b564:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201b568:	e0bffa03 	ldbu	r2,-24(fp)
 201b56c:	10800830 	cmpltui	r2,r2,32
 201b570:	1000081e 	bne	r2,zero,201b594 <OSTaskNameSet+0x16c>
 201b574:	e0bff517 	ldw	r2,-44(fp)
 201b578:	e0bff915 	stw	r2,-28(fp)
 201b57c:	e0bff917 	ldw	r2,-28(fp)
 201b580:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201b584:	e0bfff17 	ldw	r2,-4(fp)
 201b588:	00c01044 	movi	r3,65
 201b58c:	10c00005 	stb	r3,0(r2)
        return;
 201b590:	00000d06 	br	201b5c8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201b594:	e0bff717 	ldw	r2,-36(fp)
 201b598:	10801304 	addi	r2,r2,76
 201b59c:	e17ffe17 	ldw	r5,-8(fp)
 201b5a0:	1009883a 	mov	r4,r2
 201b5a4:	20159c80 	call	20159c8 <OS_StrCopy>
 201b5a8:	e0bff517 	ldw	r2,-44(fp)
 201b5ac:	e0bffb15 	stw	r2,-20(fp)
 201b5b0:	e0bffb17 	ldw	r2,-20(fp)
 201b5b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b5b8:	e0bfff17 	ldw	r2,-4(fp)
 201b5bc:	10000005 	stb	zero,0(r2)
 201b5c0:	00000106 	br	201b5c8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201b5c4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201b5c8:	e037883a 	mov	sp,fp
 201b5cc:	dfc00117 	ldw	ra,4(sp)
 201b5d0:	df000017 	ldw	fp,0(sp)
 201b5d4:	dec00204 	addi	sp,sp,8
 201b5d8:	f800283a 	ret

0201b5dc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201b5dc:	defff404 	addi	sp,sp,-48
 201b5e0:	dfc00b15 	stw	ra,44(sp)
 201b5e4:	df000a15 	stw	fp,40(sp)
 201b5e8:	df000a04 	addi	fp,sp,40
 201b5ec:	2005883a 	mov	r2,r4
 201b5f0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b5f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201b5f8:	e0bfff03 	ldbu	r2,-4(fp)
 201b5fc:	10800530 	cmpltui	r2,r2,20
 201b600:	1000021e 	bne	r2,zero,201b60c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201b604:	00800a84 	movi	r2,42
 201b608:	00006406 	br	201b79c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b60c:	0005303a 	rdctl	r2,status
 201b610:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b614:	e0fffe17 	ldw	r3,-8(fp)
 201b618:	00bfff84 	movi	r2,-2
 201b61c:	1884703a 	and	r2,r3,r2
 201b620:	1001703a 	wrctl	status,r2
  
  return context;
 201b624:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b628:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201b62c:	e0ffff03 	ldbu	r3,-4(fp)
 201b630:	008080f4 	movhi	r2,515
 201b634:	10b62a04 	addi	r2,r2,-10072
 201b638:	18c7883a 	add	r3,r3,r3
 201b63c:	18c7883a 	add	r3,r3,r3
 201b640:	10c5883a 	add	r2,r2,r3
 201b644:	10800017 	ldw	r2,0(r2)
 201b648:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201b64c:	e0bff817 	ldw	r2,-32(fp)
 201b650:	1000061e 	bne	r2,zero,201b66c <OSTaskResume+0x90>
 201b654:	e0bff617 	ldw	r2,-40(fp)
 201b658:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b65c:	e0bff717 	ldw	r2,-36(fp)
 201b660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201b664:	00801184 	movi	r2,70
 201b668:	00004c06 	br	201b79c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201b66c:	e0bff817 	ldw	r2,-32(fp)
 201b670:	10800058 	cmpnei	r2,r2,1
 201b674:	1000061e 	bne	r2,zero,201b690 <OSTaskResume+0xb4>
 201b678:	e0bff617 	ldw	r2,-40(fp)
 201b67c:	e0bff915 	stw	r2,-28(fp)
 201b680:	e0bff917 	ldw	r2,-28(fp)
 201b684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b688:	008010c4 	movi	r2,67
 201b68c:	00004306 	br	201b79c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201b690:	e0bff817 	ldw	r2,-32(fp)
 201b694:	10800c03 	ldbu	r2,48(r2)
 201b698:	10803fcc 	andi	r2,r2,255
 201b69c:	1080020c 	andi	r2,r2,8
 201b6a0:	10003926 	beq	r2,zero,201b788 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201b6a4:	e0bff817 	ldw	r2,-32(fp)
 201b6a8:	10c00c03 	ldbu	r3,48(r2)
 201b6ac:	00bffdc4 	movi	r2,-9
 201b6b0:	1884703a 	and	r2,r3,r2
 201b6b4:	1007883a 	mov	r3,r2
 201b6b8:	e0bff817 	ldw	r2,-32(fp)
 201b6bc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201b6c0:	e0bff817 	ldw	r2,-32(fp)
 201b6c4:	10800c03 	ldbu	r2,48(r2)
 201b6c8:	10803fcc 	andi	r2,r2,255
 201b6cc:	1000281e 	bne	r2,zero,201b770 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201b6d0:	e0bff817 	ldw	r2,-32(fp)
 201b6d4:	10800b8b 	ldhu	r2,46(r2)
 201b6d8:	10bfffcc 	andi	r2,r2,65535
 201b6dc:	10001f1e 	bne	r2,zero,201b75c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201b6e0:	e0bff817 	ldw	r2,-32(fp)
 201b6e4:	10c00d83 	ldbu	r3,54(r2)
 201b6e8:	d0a74303 	ldbu	r2,-25332(gp)
 201b6ec:	1884b03a 	or	r2,r3,r2
 201b6f0:	d0a74305 	stb	r2,-25332(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201b6f4:	e0bff817 	ldw	r2,-32(fp)
 201b6f8:	10800d03 	ldbu	r2,52(r2)
 201b6fc:	10c03fcc 	andi	r3,r2,255
 201b700:	e0bff817 	ldw	r2,-32(fp)
 201b704:	10800d03 	ldbu	r2,52(r2)
 201b708:	11003fcc 	andi	r4,r2,255
 201b70c:	d0a74344 	addi	r2,gp,-25331
 201b710:	2085883a 	add	r2,r4,r2
 201b714:	11000003 	ldbu	r4,0(r2)
 201b718:	e0bff817 	ldw	r2,-32(fp)
 201b71c:	10800d43 	ldbu	r2,53(r2)
 201b720:	2084b03a 	or	r2,r4,r2
 201b724:	1009883a 	mov	r4,r2
 201b728:	d0a74344 	addi	r2,gp,-25331
 201b72c:	1885883a 	add	r2,r3,r2
 201b730:	11000005 	stb	r4,0(r2)
 201b734:	e0bff617 	ldw	r2,-40(fp)
 201b738:	e0bffa15 	stw	r2,-24(fp)
 201b73c:	e0bffa17 	ldw	r2,-24(fp)
 201b740:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201b744:	d0a73743 	ldbu	r2,-25379(gp)
 201b748:	10803fcc 	andi	r2,r2,255
 201b74c:	10800058 	cmpnei	r2,r2,1
 201b750:	10000b1e 	bne	r2,zero,201b780 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201b754:	20158840 	call	2015884 <OS_Sched>
 201b758:	00000906 	br	201b780 <OSTaskResume+0x1a4>
 201b75c:	e0bff617 	ldw	r2,-40(fp)
 201b760:	e0bffb15 	stw	r2,-20(fp)
 201b764:	e0bffb17 	ldw	r2,-20(fp)
 201b768:	1001703a 	wrctl	status,r2
 201b76c:	00000406 	br	201b780 <OSTaskResume+0x1a4>
 201b770:	e0bff617 	ldw	r2,-40(fp)
 201b774:	e0bffc15 	stw	r2,-16(fp)
 201b778:	e0bffc17 	ldw	r2,-16(fp)
 201b77c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201b780:	0005883a 	mov	r2,zero
 201b784:	00000506 	br	201b79c <OSTaskResume+0x1c0>
 201b788:	e0bff617 	ldw	r2,-40(fp)
 201b78c:	e0bffd15 	stw	r2,-12(fp)
 201b790:	e0bffd17 	ldw	r2,-12(fp)
 201b794:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201b798:	00801104 	movi	r2,68
}
 201b79c:	e037883a 	mov	sp,fp
 201b7a0:	dfc00117 	ldw	ra,4(sp)
 201b7a4:	df000017 	ldw	fp,0(sp)
 201b7a8:	dec00204 	addi	sp,sp,8
 201b7ac:	f800283a 	ret

0201b7b0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201b7b0:	defff304 	addi	sp,sp,-52
 201b7b4:	df000c15 	stw	fp,48(sp)
 201b7b8:	df000c04 	addi	fp,sp,48
 201b7bc:	2005883a 	mov	r2,r4
 201b7c0:	e17fff15 	stw	r5,-4(fp)
 201b7c4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201b7c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201b7cc:	e0bffe03 	ldbu	r2,-8(fp)
 201b7d0:	10800570 	cmpltui	r2,r2,21
 201b7d4:	1000051e 	bne	r2,zero,201b7ec <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201b7d8:	e0bffe03 	ldbu	r2,-8(fp)
 201b7dc:	10803fe0 	cmpeqi	r2,r2,255
 201b7e0:	1000021e 	bne	r2,zero,201b7ec <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201b7e4:	00800a84 	movi	r2,42
 201b7e8:	00005d06 	br	201b960 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201b7ec:	e0bfff17 	ldw	r2,-4(fp)
 201b7f0:	1000021e 	bne	r2,zero,201b7fc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201b7f4:	00800244 	movi	r2,9
 201b7f8:	00005906 	br	201b960 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201b7fc:	e0bfff17 	ldw	r2,-4(fp)
 201b800:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201b804:	e0bfff17 	ldw	r2,-4(fp)
 201b808:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b80c:	0005303a 	rdctl	r2,status
 201b810:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b814:	e0fffd17 	ldw	r3,-12(fp)
 201b818:	00bfff84 	movi	r2,-2
 201b81c:	1884703a 	and	r2,r3,r2
 201b820:	1001703a 	wrctl	status,r2
  
  return context;
 201b824:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201b828:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201b82c:	e0bffe03 	ldbu	r2,-8(fp)
 201b830:	10803fd8 	cmpnei	r2,r2,255
 201b834:	1000031e 	bne	r2,zero,201b844 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b838:	d0a74617 	ldw	r2,-25320(gp)
 201b83c:	10800c83 	ldbu	r2,50(r2)
 201b840:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b844:	e0fffe03 	ldbu	r3,-8(fp)
 201b848:	008080f4 	movhi	r2,515
 201b84c:	10b62a04 	addi	r2,r2,-10072
 201b850:	18c7883a 	add	r3,r3,r3
 201b854:	18c7883a 	add	r3,r3,r3
 201b858:	10c5883a 	add	r2,r2,r3
 201b85c:	10800017 	ldw	r2,0(r2)
 201b860:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201b864:	e0bff817 	ldw	r2,-32(fp)
 201b868:	1000061e 	bne	r2,zero,201b884 <OSTaskStkChk+0xd4>
 201b86c:	e0bff617 	ldw	r2,-40(fp)
 201b870:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b874:	e0bff717 	ldw	r2,-36(fp)
 201b878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b87c:	008010c4 	movi	r2,67
 201b880:	00003706 	br	201b960 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201b884:	e0bff817 	ldw	r2,-32(fp)
 201b888:	10800058 	cmpnei	r2,r2,1
 201b88c:	1000061e 	bne	r2,zero,201b8a8 <OSTaskStkChk+0xf8>
 201b890:	e0bff617 	ldw	r2,-40(fp)
 201b894:	e0bff915 	stw	r2,-28(fp)
 201b898:	e0bff917 	ldw	r2,-28(fp)
 201b89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b8a0:	008010c4 	movi	r2,67
 201b8a4:	00002e06 	br	201b960 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201b8a8:	e0bff817 	ldw	r2,-32(fp)
 201b8ac:	1080040b 	ldhu	r2,16(r2)
 201b8b0:	10bfffcc 	andi	r2,r2,65535
 201b8b4:	1080004c 	andi	r2,r2,1
 201b8b8:	1000061e 	bne	r2,zero,201b8d4 <OSTaskStkChk+0x124>
 201b8bc:	e0bff617 	ldw	r2,-40(fp)
 201b8c0:	e0bffa15 	stw	r2,-24(fp)
 201b8c4:	e0bffa17 	ldw	r2,-24(fp)
 201b8c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201b8cc:	00801144 	movi	r2,69
 201b8d0:	00002306 	br	201b960 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201b8d4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201b8d8:	e0bff817 	ldw	r2,-32(fp)
 201b8dc:	10800317 	ldw	r2,12(r2)
 201b8e0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201b8e4:	e0bff817 	ldw	r2,-32(fp)
 201b8e8:	10800217 	ldw	r2,8(r2)
 201b8ec:	e0bff415 	stw	r2,-48(fp)
 201b8f0:	e0bff617 	ldw	r2,-40(fp)
 201b8f4:	e0bffb15 	stw	r2,-20(fp)
 201b8f8:	e0bffb17 	ldw	r2,-20(fp)
 201b8fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b900:	00000306 	br	201b910 <OSTaskStkChk+0x160>
        nfree++;
 201b904:	e0bff517 	ldw	r2,-44(fp)
 201b908:	10800044 	addi	r2,r2,1
 201b90c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b910:	e0bff417 	ldw	r2,-48(fp)
 201b914:	10c00104 	addi	r3,r2,4
 201b918:	e0fff415 	stw	r3,-48(fp)
 201b91c:	10800017 	ldw	r2,0(r2)
 201b920:	103ff826 	beq	r2,zero,201b904 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201b924:	e0bff517 	ldw	r2,-44(fp)
 201b928:	1085883a 	add	r2,r2,r2
 201b92c:	1085883a 	add	r2,r2,r2
 201b930:	1007883a 	mov	r3,r2
 201b934:	e0bfff17 	ldw	r2,-4(fp)
 201b938:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201b93c:	e0fffc17 	ldw	r3,-16(fp)
 201b940:	e0bff517 	ldw	r2,-44(fp)
 201b944:	1885c83a 	sub	r2,r3,r2
 201b948:	1085883a 	add	r2,r2,r2
 201b94c:	1085883a 	add	r2,r2,r2
 201b950:	1007883a 	mov	r3,r2
 201b954:	e0bfff17 	ldw	r2,-4(fp)
 201b958:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201b95c:	0005883a 	mov	r2,zero
}
 201b960:	e037883a 	mov	sp,fp
 201b964:	df000017 	ldw	fp,0(sp)
 201b968:	dec00104 	addi	sp,sp,4
 201b96c:	f800283a 	ret

0201b970 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201b970:	defff504 	addi	sp,sp,-44
 201b974:	dfc00a15 	stw	ra,40(sp)
 201b978:	df000915 	stw	fp,36(sp)
 201b97c:	df000904 	addi	fp,sp,36
 201b980:	2005883a 	mov	r2,r4
 201b984:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b988:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201b98c:	e0bfff03 	ldbu	r2,-4(fp)
 201b990:	10800518 	cmpnei	r2,r2,20
 201b994:	1000021e 	bne	r2,zero,201b9a0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201b998:	008011c4 	movi	r2,71
 201b99c:	00006806 	br	201bb40 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201b9a0:	e0bfff03 	ldbu	r2,-4(fp)
 201b9a4:	10800530 	cmpltui	r2,r2,20
 201b9a8:	1000051e 	bne	r2,zero,201b9c0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201b9ac:	e0bfff03 	ldbu	r2,-4(fp)
 201b9b0:	10803fe0 	cmpeqi	r2,r2,255
 201b9b4:	1000021e 	bne	r2,zero,201b9c0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201b9b8:	00800a84 	movi	r2,42
 201b9bc:	00006006 	br	201bb40 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b9c0:	0005303a 	rdctl	r2,status
 201b9c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b9c8:	e0fffe17 	ldw	r3,-8(fp)
 201b9cc:	00bfff84 	movi	r2,-2
 201b9d0:	1884703a 	and	r2,r3,r2
 201b9d4:	1001703a 	wrctl	status,r2
  
  return context;
 201b9d8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201b9dc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201b9e0:	e0bfff03 	ldbu	r2,-4(fp)
 201b9e4:	10803fd8 	cmpnei	r2,r2,255
 201b9e8:	1000061e 	bne	r2,zero,201ba04 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b9ec:	d0a74617 	ldw	r2,-25320(gp)
 201b9f0:	10800c83 	ldbu	r2,50(r2)
 201b9f4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201b9f8:	00800044 	movi	r2,1
 201b9fc:	e0bff705 	stb	r2,-36(fp)
 201ba00:	00000906 	br	201ba28 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201ba04:	d0a74617 	ldw	r2,-25320(gp)
 201ba08:	10800c83 	ldbu	r2,50(r2)
 201ba0c:	10c03fcc 	andi	r3,r2,255
 201ba10:	e0bfff03 	ldbu	r2,-4(fp)
 201ba14:	1880031e 	bne	r3,r2,201ba24 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201ba18:	00800044 	movi	r2,1
 201ba1c:	e0bff705 	stb	r2,-36(fp)
 201ba20:	00000106 	br	201ba28 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201ba24:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ba28:	e0ffff03 	ldbu	r3,-4(fp)
 201ba2c:	008080f4 	movhi	r2,515
 201ba30:	10b62a04 	addi	r2,r2,-10072
 201ba34:	18c7883a 	add	r3,r3,r3
 201ba38:	18c7883a 	add	r3,r3,r3
 201ba3c:	10c5883a 	add	r2,r2,r3
 201ba40:	10800017 	ldw	r2,0(r2)
 201ba44:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201ba48:	e0bffa17 	ldw	r2,-24(fp)
 201ba4c:	1000061e 	bne	r2,zero,201ba68 <OSTaskSuspend+0xf8>
 201ba50:	e0bff817 	ldw	r2,-32(fp)
 201ba54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba58:	e0bff917 	ldw	r2,-28(fp)
 201ba5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201ba60:	00801204 	movi	r2,72
 201ba64:	00003606 	br	201bb40 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201ba68:	e0bffa17 	ldw	r2,-24(fp)
 201ba6c:	10800058 	cmpnei	r2,r2,1
 201ba70:	1000061e 	bne	r2,zero,201ba8c <OSTaskSuspend+0x11c>
 201ba74:	e0bff817 	ldw	r2,-32(fp)
 201ba78:	e0bffb15 	stw	r2,-20(fp)
 201ba7c:	e0bffb17 	ldw	r2,-20(fp)
 201ba80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ba84:	008010c4 	movi	r2,67
 201ba88:	00002d06 	br	201bb40 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201ba8c:	e0bffa17 	ldw	r2,-24(fp)
 201ba90:	10800d03 	ldbu	r2,52(r2)
 201ba94:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201ba98:	e0fffd03 	ldbu	r3,-12(fp)
 201ba9c:	e13ffd03 	ldbu	r4,-12(fp)
 201baa0:	d0a74344 	addi	r2,gp,-25331
 201baa4:	2085883a 	add	r2,r4,r2
 201baa8:	10800003 	ldbu	r2,0(r2)
 201baac:	1009883a 	mov	r4,r2
 201bab0:	e0bffa17 	ldw	r2,-24(fp)
 201bab4:	10800d43 	ldbu	r2,53(r2)
 201bab8:	0084303a 	nor	r2,zero,r2
 201babc:	2084703a 	and	r2,r4,r2
 201bac0:	1009883a 	mov	r4,r2
 201bac4:	d0a74344 	addi	r2,gp,-25331
 201bac8:	1885883a 	add	r2,r3,r2
 201bacc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201bad0:	e0fffd03 	ldbu	r3,-12(fp)
 201bad4:	d0a74344 	addi	r2,gp,-25331
 201bad8:	1885883a 	add	r2,r3,r2
 201badc:	10800003 	ldbu	r2,0(r2)
 201bae0:	10803fcc 	andi	r2,r2,255
 201bae4:	1000071e 	bne	r2,zero,201bb04 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201bae8:	e0bffa17 	ldw	r2,-24(fp)
 201baec:	10800d83 	ldbu	r2,54(r2)
 201baf0:	0084303a 	nor	r2,zero,r2
 201baf4:	1007883a 	mov	r3,r2
 201baf8:	d0a74303 	ldbu	r2,-25332(gp)
 201bafc:	1884703a 	and	r2,r3,r2
 201bb00:	d0a74305 	stb	r2,-25332(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201bb04:	e0bffa17 	ldw	r2,-24(fp)
 201bb08:	10800c03 	ldbu	r2,48(r2)
 201bb0c:	10800214 	ori	r2,r2,8
 201bb10:	1007883a 	mov	r3,r2
 201bb14:	e0bffa17 	ldw	r2,-24(fp)
 201bb18:	10c00c05 	stb	r3,48(r2)
 201bb1c:	e0bff817 	ldw	r2,-32(fp)
 201bb20:	e0bffc15 	stw	r2,-16(fp)
 201bb24:	e0bffc17 	ldw	r2,-16(fp)
 201bb28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201bb2c:	e0bff703 	ldbu	r2,-36(fp)
 201bb30:	10800058 	cmpnei	r2,r2,1
 201bb34:	1000011e 	bne	r2,zero,201bb3c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201bb38:	20158840 	call	2015884 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201bb3c:	0005883a 	mov	r2,zero
}
 201bb40:	e037883a 	mov	sp,fp
 201bb44:	dfc00117 	ldw	ra,4(sp)
 201bb48:	df000017 	ldw	fp,0(sp)
 201bb4c:	dec00204 	addi	sp,sp,8
 201bb50:	f800283a 	ret

0201bb54 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201bb54:	defff604 	addi	sp,sp,-40
 201bb58:	dfc00915 	stw	ra,36(sp)
 201bb5c:	df000815 	stw	fp,32(sp)
 201bb60:	df000804 	addi	fp,sp,32
 201bb64:	2005883a 	mov	r2,r4
 201bb68:	e17fff15 	stw	r5,-4(fp)
 201bb6c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bb70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201bb74:	e0bffe03 	ldbu	r2,-8(fp)
 201bb78:	10800570 	cmpltui	r2,r2,21
 201bb7c:	1000051e 	bne	r2,zero,201bb94 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201bb80:	e0bffe03 	ldbu	r2,-8(fp)
 201bb84:	10803fe0 	cmpeqi	r2,r2,255
 201bb88:	1000021e 	bne	r2,zero,201bb94 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201bb8c:	00800a84 	movi	r2,42
 201bb90:	00003406 	br	201bc64 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201bb94:	e0bfff17 	ldw	r2,-4(fp)
 201bb98:	1000021e 	bne	r2,zero,201bba4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201bb9c:	00800244 	movi	r2,9
 201bba0:	00003006 	br	201bc64 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bba4:	0005303a 	rdctl	r2,status
 201bba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bbac:	e0fffd17 	ldw	r3,-12(fp)
 201bbb0:	00bfff84 	movi	r2,-2
 201bbb4:	1884703a 	and	r2,r3,r2
 201bbb8:	1001703a 	wrctl	status,r2
  
  return context;
 201bbbc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bbc0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201bbc4:	e0bffe03 	ldbu	r2,-8(fp)
 201bbc8:	10803fd8 	cmpnei	r2,r2,255
 201bbcc:	1000031e 	bne	r2,zero,201bbdc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201bbd0:	d0a74617 	ldw	r2,-25320(gp)
 201bbd4:	10800c83 	ldbu	r2,50(r2)
 201bbd8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201bbdc:	e0fffe03 	ldbu	r3,-8(fp)
 201bbe0:	008080f4 	movhi	r2,515
 201bbe4:	10b62a04 	addi	r2,r2,-10072
 201bbe8:	18c7883a 	add	r3,r3,r3
 201bbec:	18c7883a 	add	r3,r3,r3
 201bbf0:	10c5883a 	add	r2,r2,r3
 201bbf4:	10800017 	ldw	r2,0(r2)
 201bbf8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201bbfc:	e0bffa17 	ldw	r2,-24(fp)
 201bc00:	1000061e 	bne	r2,zero,201bc1c <OSTaskQuery+0xc8>
 201bc04:	e0bff817 	ldw	r2,-32(fp)
 201bc08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bc0c:	e0bff917 	ldw	r2,-28(fp)
 201bc10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201bc14:	00800a44 	movi	r2,41
 201bc18:	00001206 	br	201bc64 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201bc1c:	e0bffa17 	ldw	r2,-24(fp)
 201bc20:	10800058 	cmpnei	r2,r2,1
 201bc24:	1000061e 	bne	r2,zero,201bc40 <OSTaskQuery+0xec>
 201bc28:	e0bff817 	ldw	r2,-32(fp)
 201bc2c:	e0bffb15 	stw	r2,-20(fp)
 201bc30:	e0bffb17 	ldw	r2,-20(fp)
 201bc34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201bc38:	008010c4 	movi	r2,67
 201bc3c:	00000906 	br	201bc64 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201bc40:	01801b04 	movi	r6,108
 201bc44:	e17ffa17 	ldw	r5,-24(fp)
 201bc48:	e13fff17 	ldw	r4,-4(fp)
 201bc4c:	201581c0 	call	201581c <OS_MemCopy>
 201bc50:	e0bff817 	ldw	r2,-32(fp)
 201bc54:	e0bffc15 	stw	r2,-16(fp)
 201bc58:	e0bffc17 	ldw	r2,-16(fp)
 201bc5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201bc60:	0005883a 	mov	r2,zero
}
 201bc64:	e037883a 	mov	sp,fp
 201bc68:	dfc00117 	ldw	ra,4(sp)
 201bc6c:	df000017 	ldw	fp,0(sp)
 201bc70:	dec00204 	addi	sp,sp,8
 201bc74:	f800283a 	ret

0201bc78 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201bc78:	defffc04 	addi	sp,sp,-16
 201bc7c:	df000315 	stw	fp,12(sp)
 201bc80:	df000304 	addi	fp,sp,12
 201bc84:	e13ffd15 	stw	r4,-12(fp)
 201bc88:	e17ffe15 	stw	r5,-8(fp)
 201bc8c:	3005883a 	mov	r2,r6
 201bc90:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201bc94:	e0bfff0b 	ldhu	r2,-4(fp)
 201bc98:	1080004c 	andi	r2,r2,1
 201bc9c:	10000d26 	beq	r2,zero,201bcd4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201bca0:	e0bfff0b 	ldhu	r2,-4(fp)
 201bca4:	1080008c 	andi	r2,r2,2
 201bca8:	10000a26 	beq	r2,zero,201bcd4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201bcac:	00000706 	br	201bccc <OS_TaskStkClr+0x54>
                size--;
 201bcb0:	e0bffe17 	ldw	r2,-8(fp)
 201bcb4:	10bfffc4 	addi	r2,r2,-1
 201bcb8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201bcbc:	e0bffd17 	ldw	r2,-12(fp)
 201bcc0:	10c00104 	addi	r3,r2,4
 201bcc4:	e0fffd15 	stw	r3,-12(fp)
 201bcc8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201bccc:	e0bffe17 	ldw	r2,-8(fp)
 201bcd0:	103ff71e 	bne	r2,zero,201bcb0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201bcd4:	0001883a 	nop
 201bcd8:	e037883a 	mov	sp,fp
 201bcdc:	df000017 	ldw	fp,0(sp)
 201bce0:	dec00104 	addi	sp,sp,4
 201bce4:	f800283a 	ret

0201bce8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201bce8:	defff904 	addi	sp,sp,-28
 201bcec:	dfc00615 	stw	ra,24(sp)
 201bcf0:	df000515 	stw	fp,20(sp)
 201bcf4:	df000504 	addi	fp,sp,20
 201bcf8:	2005883a 	mov	r2,r4
 201bcfc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bd00:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bd04:	d0a74503 	ldbu	r2,-25324(gp)
 201bd08:	10803fcc 	andi	r2,r2,255
 201bd0c:	1000311e 	bne	r2,zero,201bdd4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201bd10:	e0bfff0b 	ldhu	r2,-4(fp)
 201bd14:	10003026 	beq	r2,zero,201bdd8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bd18:	0005303a 	rdctl	r2,status
 201bd1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bd20:	e0fffe17 	ldw	r3,-8(fp)
 201bd24:	00bfff84 	movi	r2,-2
 201bd28:	1884703a 	and	r2,r3,r2
 201bd2c:	1001703a 	wrctl	status,r2
  
  return context;
 201bd30:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201bd34:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201bd38:	d0a74617 	ldw	r2,-25320(gp)
 201bd3c:	10800d03 	ldbu	r2,52(r2)
 201bd40:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201bd44:	e0fffd03 	ldbu	r3,-12(fp)
 201bd48:	e13ffd03 	ldbu	r4,-12(fp)
 201bd4c:	d0a74344 	addi	r2,gp,-25331
 201bd50:	2085883a 	add	r2,r4,r2
 201bd54:	10800003 	ldbu	r2,0(r2)
 201bd58:	1009883a 	mov	r4,r2
 201bd5c:	d0a74617 	ldw	r2,-25320(gp)
 201bd60:	10800d43 	ldbu	r2,53(r2)
 201bd64:	0084303a 	nor	r2,zero,r2
 201bd68:	2084703a 	and	r2,r4,r2
 201bd6c:	1009883a 	mov	r4,r2
 201bd70:	d0a74344 	addi	r2,gp,-25331
 201bd74:	1885883a 	add	r2,r3,r2
 201bd78:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201bd7c:	e0fffd03 	ldbu	r3,-12(fp)
 201bd80:	d0a74344 	addi	r2,gp,-25331
 201bd84:	1885883a 	add	r2,r3,r2
 201bd88:	10800003 	ldbu	r2,0(r2)
 201bd8c:	10803fcc 	andi	r2,r2,255
 201bd90:	1000071e 	bne	r2,zero,201bdb0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201bd94:	d0a74617 	ldw	r2,-25320(gp)
 201bd98:	10800d83 	ldbu	r2,54(r2)
 201bd9c:	0084303a 	nor	r2,zero,r2
 201bda0:	1007883a 	mov	r3,r2
 201bda4:	d0a74303 	ldbu	r2,-25332(gp)
 201bda8:	1884703a 	and	r2,r3,r2
 201bdac:	d0a74305 	stb	r2,-25332(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201bdb0:	d0a74617 	ldw	r2,-25320(gp)
 201bdb4:	e0ffff0b 	ldhu	r3,-4(fp)
 201bdb8:	10c00b8d 	sth	r3,46(r2)
 201bdbc:	e0bffb17 	ldw	r2,-20(fp)
 201bdc0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bdc4:	e0bffc17 	ldw	r2,-16(fp)
 201bdc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201bdcc:	20158840 	call	2015884 <OS_Sched>
 201bdd0:	00000106 	br	201bdd8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201bdd4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201bdd8:	e037883a 	mov	sp,fp
 201bddc:	dfc00117 	ldw	ra,4(sp)
 201bde0:	df000017 	ldw	fp,0(sp)
 201bde4:	dec00204 	addi	sp,sp,8
 201bde8:	f800283a 	ret

0201bdec <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201bdec:	defff704 	addi	sp,sp,-36
 201bdf0:	dfc00815 	stw	ra,32(sp)
 201bdf4:	df000715 	stw	fp,28(sp)
 201bdf8:	dc000615 	stw	r16,24(sp)
 201bdfc:	df000704 	addi	fp,sp,28
 201be00:	2011883a 	mov	r8,r4
 201be04:	2809883a 	mov	r4,r5
 201be08:	3007883a 	mov	r3,r6
 201be0c:	3805883a 	mov	r2,r7
 201be10:	e23ffb05 	stb	r8,-20(fp)
 201be14:	e13ffc05 	stb	r4,-16(fp)
 201be18:	e0fffd05 	stb	r3,-12(fp)
 201be1c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201be20:	d0a74503 	ldbu	r2,-25324(gp)
 201be24:	10803fcc 	andi	r2,r2,255
 201be28:	10000226 	beq	r2,zero,201be34 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201be2c:	00801544 	movi	r2,85
 201be30:	00003d06 	br	201bf28 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201be34:	e0bffb03 	ldbu	r2,-20(fp)
 201be38:	1000081e 	bne	r2,zero,201be5c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201be3c:	e0bffc03 	ldbu	r2,-16(fp)
 201be40:	1000061e 	bne	r2,zero,201be5c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201be44:	e0bffd03 	ldbu	r2,-12(fp)
 201be48:	1000041e 	bne	r2,zero,201be5c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201be4c:	e0bffe0b 	ldhu	r2,-8(fp)
 201be50:	1000021e 	bne	r2,zero,201be5c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201be54:	00801504 	movi	r2,84
 201be58:	00003306 	br	201bf28 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201be5c:	e0bffc03 	ldbu	r2,-16(fp)
 201be60:	10800f30 	cmpltui	r2,r2,60
 201be64:	1000021e 	bne	r2,zero,201be70 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201be68:	00801444 	movi	r2,81
 201be6c:	00002e06 	br	201bf28 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201be70:	e0bffd03 	ldbu	r2,-12(fp)
 201be74:	10800f30 	cmpltui	r2,r2,60
 201be78:	1000021e 	bne	r2,zero,201be84 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201be7c:	00801484 	movi	r2,82
 201be80:	00002906 	br	201bf28 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201be84:	e0bffe0b 	ldhu	r2,-8(fp)
 201be88:	1080fa30 	cmpltui	r2,r2,1000
 201be8c:	1000021e 	bne	r2,zero,201be98 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201be90:	008014c4 	movi	r2,83
 201be94:	00002406 	br	201bf28 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201be98:	e0bffb03 	ldbu	r2,-20(fp)
 201be9c:	10c38424 	muli	r3,r2,3600
 201bea0:	e0bffc03 	ldbu	r2,-16(fp)
 201bea4:	10800f24 	muli	r2,r2,60
 201bea8:	1887883a 	add	r3,r3,r2
 201beac:	e0bffd03 	ldbu	r2,-12(fp)
 201beb0:	1885883a 	add	r2,r3,r2
 201beb4:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201beb8:	e0bffe0b 	ldhu	r2,-8(fp)
 201bebc:	1080fa24 	muli	r2,r2,1000
 201bec0:	0140fa04 	movi	r5,1000
 201bec4:	1009883a 	mov	r4,r2
 201bec8:	2004ba00 	call	2004ba0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201becc:	8085883a 	add	r2,r16,r2
 201bed0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201bed4:	e0bffa17 	ldw	r2,-24(fp)
 201bed8:	1004d43a 	srli	r2,r2,16
 201bedc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201bee0:	e0bffa17 	ldw	r2,-24(fp)
 201bee4:	10bfffcc 	andi	r2,r2,65535
 201bee8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201beec:	e0bffa17 	ldw	r2,-24(fp)
 201bef0:	10bfffcc 	andi	r2,r2,65535
 201bef4:	1009883a 	mov	r4,r2
 201bef8:	201bce80 	call	201bce8 <OSTimeDly>
    while (loops > 0) {
 201befc:	00000706 	br	201bf1c <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201bf00:	01200014 	movui	r4,32768
 201bf04:	201bce80 	call	201bce8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201bf08:	01200014 	movui	r4,32768
 201bf0c:	201bce80 	call	201bce8 <OSTimeDly>
        loops--;
 201bf10:	e0bff90b 	ldhu	r2,-28(fp)
 201bf14:	10bfffc4 	addi	r2,r2,-1
 201bf18:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201bf1c:	e0bff90b 	ldhu	r2,-28(fp)
 201bf20:	103ff71e 	bne	r2,zero,201bf00 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201bf24:	0005883a 	mov	r2,zero
}
 201bf28:	e6ffff04 	addi	sp,fp,-4
 201bf2c:	dfc00217 	ldw	ra,8(sp)
 201bf30:	df000117 	ldw	fp,4(sp)
 201bf34:	dc000017 	ldw	r16,0(sp)
 201bf38:	dec00304 	addi	sp,sp,12
 201bf3c:	f800283a 	ret

0201bf40 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201bf40:	defff504 	addi	sp,sp,-44
 201bf44:	dfc00a15 	stw	ra,40(sp)
 201bf48:	df000915 	stw	fp,36(sp)
 201bf4c:	df000904 	addi	fp,sp,36
 201bf50:	2005883a 	mov	r2,r4
 201bf54:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201bf58:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201bf5c:	e0bfff03 	ldbu	r2,-4(fp)
 201bf60:	10800530 	cmpltui	r2,r2,20
 201bf64:	1000021e 	bne	r2,zero,201bf70 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201bf68:	00800a84 	movi	r2,42
 201bf6c:	00006406 	br	201c100 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bf70:	0005303a 	rdctl	r2,status
 201bf74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bf78:	e0fffe17 	ldw	r3,-8(fp)
 201bf7c:	00bfff84 	movi	r2,-2
 201bf80:	1884703a 	and	r2,r3,r2
 201bf84:	1001703a 	wrctl	status,r2
  
  return context;
 201bf88:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201bf8c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201bf90:	e0ffff03 	ldbu	r3,-4(fp)
 201bf94:	008080f4 	movhi	r2,515
 201bf98:	10b62a04 	addi	r2,r2,-10072
 201bf9c:	18c7883a 	add	r3,r3,r3
 201bfa0:	18c7883a 	add	r3,r3,r3
 201bfa4:	10c5883a 	add	r2,r2,r3
 201bfa8:	10800017 	ldw	r2,0(r2)
 201bfac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201bfb0:	e0bff917 	ldw	r2,-28(fp)
 201bfb4:	1000061e 	bne	r2,zero,201bfd0 <OSTimeDlyResume+0x90>
 201bfb8:	e0bff717 	ldw	r2,-36(fp)
 201bfbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bfc0:	e0bff817 	ldw	r2,-32(fp)
 201bfc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201bfc8:	008010c4 	movi	r2,67
 201bfcc:	00004c06 	br	201c100 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201bfd0:	e0bff917 	ldw	r2,-28(fp)
 201bfd4:	10800058 	cmpnei	r2,r2,1
 201bfd8:	1000061e 	bne	r2,zero,201bff4 <OSTimeDlyResume+0xb4>
 201bfdc:	e0bff717 	ldw	r2,-36(fp)
 201bfe0:	e0bffa15 	stw	r2,-24(fp)
 201bfe4:	e0bffa17 	ldw	r2,-24(fp)
 201bfe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201bfec:	008010c4 	movi	r2,67
 201bff0:	00004306 	br	201c100 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201bff4:	e0bff917 	ldw	r2,-28(fp)
 201bff8:	10800b8b 	ldhu	r2,46(r2)
 201bffc:	10bfffcc 	andi	r2,r2,65535
 201c000:	1000061e 	bne	r2,zero,201c01c <OSTimeDlyResume+0xdc>
 201c004:	e0bff717 	ldw	r2,-36(fp)
 201c008:	e0bffb15 	stw	r2,-20(fp)
 201c00c:	e0bffb17 	ldw	r2,-20(fp)
 201c010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201c014:	00801404 	movi	r2,80
 201c018:	00003906 	br	201c100 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201c01c:	e0bff917 	ldw	r2,-28(fp)
 201c020:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201c024:	e0bff917 	ldw	r2,-28(fp)
 201c028:	10800c03 	ldbu	r2,48(r2)
 201c02c:	10803fcc 	andi	r2,r2,255
 201c030:	10800dcc 	andi	r2,r2,55
 201c034:	10000b26 	beq	r2,zero,201c064 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201c038:	e0bff917 	ldw	r2,-28(fp)
 201c03c:	10c00c03 	ldbu	r3,48(r2)
 201c040:	00bff204 	movi	r2,-56
 201c044:	1884703a 	and	r2,r3,r2
 201c048:	1007883a 	mov	r3,r2
 201c04c:	e0bff917 	ldw	r2,-28(fp)
 201c050:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201c054:	e0bff917 	ldw	r2,-28(fp)
 201c058:	00c00044 	movi	r3,1
 201c05c:	10c00c45 	stb	r3,49(r2)
 201c060:	00000206 	br	201c06c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201c064:	e0bff917 	ldw	r2,-28(fp)
 201c068:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201c06c:	e0bff917 	ldw	r2,-28(fp)
 201c070:	10800c03 	ldbu	r2,48(r2)
 201c074:	10803fcc 	andi	r2,r2,255
 201c078:	1080020c 	andi	r2,r2,8
 201c07c:	10001b1e 	bne	r2,zero,201c0ec <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201c080:	e0bff917 	ldw	r2,-28(fp)
 201c084:	10c00d83 	ldbu	r3,54(r2)
 201c088:	d0a74303 	ldbu	r2,-25332(gp)
 201c08c:	1884b03a 	or	r2,r3,r2
 201c090:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201c094:	e0bff917 	ldw	r2,-28(fp)
 201c098:	10800d03 	ldbu	r2,52(r2)
 201c09c:	10c03fcc 	andi	r3,r2,255
 201c0a0:	e0bff917 	ldw	r2,-28(fp)
 201c0a4:	10800d03 	ldbu	r2,52(r2)
 201c0a8:	11003fcc 	andi	r4,r2,255
 201c0ac:	d0a74344 	addi	r2,gp,-25331
 201c0b0:	2085883a 	add	r2,r4,r2
 201c0b4:	11000003 	ldbu	r4,0(r2)
 201c0b8:	e0bff917 	ldw	r2,-28(fp)
 201c0bc:	10800d43 	ldbu	r2,53(r2)
 201c0c0:	2084b03a 	or	r2,r4,r2
 201c0c4:	1009883a 	mov	r4,r2
 201c0c8:	d0a74344 	addi	r2,gp,-25331
 201c0cc:	1885883a 	add	r2,r3,r2
 201c0d0:	11000005 	stb	r4,0(r2)
 201c0d4:	e0bff717 	ldw	r2,-36(fp)
 201c0d8:	e0bffc15 	stw	r2,-16(fp)
 201c0dc:	e0bffc17 	ldw	r2,-16(fp)
 201c0e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201c0e4:	20158840 	call	2015884 <OS_Sched>
 201c0e8:	00000406 	br	201c0fc <OSTimeDlyResume+0x1bc>
 201c0ec:	e0bff717 	ldw	r2,-36(fp)
 201c0f0:	e0bffd15 	stw	r2,-12(fp)
 201c0f4:	e0bffd17 	ldw	r2,-12(fp)
 201c0f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201c0fc:	0005883a 	mov	r2,zero
}
 201c100:	e037883a 	mov	sp,fp
 201c104:	dfc00117 	ldw	ra,4(sp)
 201c108:	df000017 	ldw	fp,0(sp)
 201c10c:	dec00204 	addi	sp,sp,8
 201c110:	f800283a 	ret

0201c114 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201c114:	defffb04 	addi	sp,sp,-20
 201c118:	df000415 	stw	fp,16(sp)
 201c11c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c120:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c124:	0005303a 	rdctl	r2,status
 201c128:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c12c:	e0fffe17 	ldw	r3,-8(fp)
 201c130:	00bfff84 	movi	r2,-2
 201c134:	1884703a 	and	r2,r3,r2
 201c138:	1001703a 	wrctl	status,r2
  
  return context;
 201c13c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201c140:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201c144:	d0a74717 	ldw	r2,-25316(gp)
 201c148:	e0bffd15 	stw	r2,-12(fp)
 201c14c:	e0bffc17 	ldw	r2,-16(fp)
 201c150:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c154:	e0bfff17 	ldw	r2,-4(fp)
 201c158:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201c15c:	e0bffd17 	ldw	r2,-12(fp)
}
 201c160:	e037883a 	mov	sp,fp
 201c164:	df000017 	ldw	fp,0(sp)
 201c168:	dec00104 	addi	sp,sp,4
 201c16c:	f800283a 	ret

0201c170 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201c170:	defffb04 	addi	sp,sp,-20
 201c174:	df000415 	stw	fp,16(sp)
 201c178:	df000404 	addi	fp,sp,16
 201c17c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c180:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c184:	0005303a 	rdctl	r2,status
 201c188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c18c:	e0fffd17 	ldw	r3,-12(fp)
 201c190:	00bfff84 	movi	r2,-2
 201c194:	1884703a 	and	r2,r3,r2
 201c198:	1001703a 	wrctl	status,r2
  
  return context;
 201c19c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201c1a0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201c1a4:	e0bfff17 	ldw	r2,-4(fp)
 201c1a8:	d0a74715 	stw	r2,-25316(gp)
 201c1ac:	e0bffc17 	ldw	r2,-16(fp)
 201c1b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c1b4:	e0bffe17 	ldw	r2,-8(fp)
 201c1b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201c1bc:	0001883a 	nop
 201c1c0:	e037883a 	mov	sp,fp
 201c1c4:	df000017 	ldw	fp,0(sp)
 201c1c8:	dec00104 	addi	sp,sp,4
 201c1cc:	f800283a 	ret

0201c1d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201c1d0:	defffd04 	addi	sp,sp,-12
 201c1d4:	dfc00215 	stw	ra,8(sp)
 201c1d8:	df000115 	stw	fp,4(sp)
 201c1dc:	df000104 	addi	fp,sp,4
 201c1e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201c1e4:	d1600804 	addi	r5,gp,-32736
 201c1e8:	e13fff17 	ldw	r4,-4(fp)
 201c1ec:	201d26c0 	call	201d26c <alt_dev_llist_insert>
}
 201c1f0:	e037883a 	mov	sp,fp
 201c1f4:	dfc00117 	ldw	ra,4(sp)
 201c1f8:	df000017 	ldw	fp,0(sp)
 201c1fc:	dec00204 	addi	sp,sp,8
 201c200:	f800283a 	ret

0201c204 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201c204:	defffd04 	addi	sp,sp,-12
 201c208:	dfc00215 	stw	ra,8(sp)
 201c20c:	df000115 	stw	fp,4(sp)
 201c210:	df000104 	addi	fp,sp,4
 201c214:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201c218:	201dbdc0 	call	201dbdc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201c21c:	00800044 	movi	r2,1
 201c220:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201c224:	0001883a 	nop
 201c228:	e037883a 	mov	sp,fp
 201c22c:	dfc00117 	ldw	ra,4(sp)
 201c230:	df000017 	ldw	fp,0(sp)
 201c234:	dec00204 	addi	sp,sp,8
 201c238:	f800283a 	ret

0201c23c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201c23c:	defffe04 	addi	sp,sp,-8
 201c240:	dfc00115 	stw	ra,4(sp)
 201c244:	df000015 	stw	fp,0(sp)
 201c248:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201c24c:	01c0fa04 	movi	r7,1000
 201c250:	01800044 	movi	r6,1
 201c254:	000b883a 	mov	r5,zero
 201c258:	0009883a 	mov	r4,zero
 201c25c:	201d0400 	call	201d040 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201c260:	000d883a 	mov	r6,zero
 201c264:	000b883a 	mov	r5,zero
 201c268:	010080b4 	movhi	r4,514
 201c26c:	213e4b04 	addi	r4,r4,-1748
 201c270:	201c4000 	call	201c400 <altera_avalon_jtag_uart_init>
 201c274:	010080b4 	movhi	r4,514
 201c278:	213e4104 	addi	r4,r4,-1788
 201c27c:	201c1d00 	call	201c1d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201c280:	0001883a 	nop
}
 201c284:	0001883a 	nop
 201c288:	e037883a 	mov	sp,fp
 201c28c:	dfc00117 	ldw	ra,4(sp)
 201c290:	df000017 	ldw	fp,0(sp)
 201c294:	dec00204 	addi	sp,sp,8
 201c298:	f800283a 	ret

0201c29c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201c29c:	defffa04 	addi	sp,sp,-24
 201c2a0:	dfc00515 	stw	ra,20(sp)
 201c2a4:	df000415 	stw	fp,16(sp)
 201c2a8:	df000404 	addi	fp,sp,16
 201c2ac:	e13ffd15 	stw	r4,-12(fp)
 201c2b0:	e17ffe15 	stw	r5,-8(fp)
 201c2b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c2b8:	e0bffd17 	ldw	r2,-12(fp)
 201c2bc:	10800017 	ldw	r2,0(r2)
 201c2c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201c2c4:	e0bffc17 	ldw	r2,-16(fp)
 201c2c8:	10c00a04 	addi	r3,r2,40
 201c2cc:	e0bffd17 	ldw	r2,-12(fp)
 201c2d0:	10800217 	ldw	r2,8(r2)
 201c2d4:	100f883a 	mov	r7,r2
 201c2d8:	e1bfff17 	ldw	r6,-4(fp)
 201c2dc:	e17ffe17 	ldw	r5,-8(fp)
 201c2e0:	1809883a 	mov	r4,r3
 201c2e4:	201ca480 	call	201ca48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201c2e8:	e037883a 	mov	sp,fp
 201c2ec:	dfc00117 	ldw	ra,4(sp)
 201c2f0:	df000017 	ldw	fp,0(sp)
 201c2f4:	dec00204 	addi	sp,sp,8
 201c2f8:	f800283a 	ret

0201c2fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201c2fc:	defffa04 	addi	sp,sp,-24
 201c300:	dfc00515 	stw	ra,20(sp)
 201c304:	df000415 	stw	fp,16(sp)
 201c308:	df000404 	addi	fp,sp,16
 201c30c:	e13ffd15 	stw	r4,-12(fp)
 201c310:	e17ffe15 	stw	r5,-8(fp)
 201c314:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c318:	e0bffd17 	ldw	r2,-12(fp)
 201c31c:	10800017 	ldw	r2,0(r2)
 201c320:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201c324:	e0bffc17 	ldw	r2,-16(fp)
 201c328:	10c00a04 	addi	r3,r2,40
 201c32c:	e0bffd17 	ldw	r2,-12(fp)
 201c330:	10800217 	ldw	r2,8(r2)
 201c334:	100f883a 	mov	r7,r2
 201c338:	e1bfff17 	ldw	r6,-4(fp)
 201c33c:	e17ffe17 	ldw	r5,-8(fp)
 201c340:	1809883a 	mov	r4,r3
 201c344:	201cd040 	call	201cd04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201c348:	e037883a 	mov	sp,fp
 201c34c:	dfc00117 	ldw	ra,4(sp)
 201c350:	df000017 	ldw	fp,0(sp)
 201c354:	dec00204 	addi	sp,sp,8
 201c358:	f800283a 	ret

0201c35c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201c35c:	defffc04 	addi	sp,sp,-16
 201c360:	dfc00315 	stw	ra,12(sp)
 201c364:	df000215 	stw	fp,8(sp)
 201c368:	df000204 	addi	fp,sp,8
 201c36c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c370:	e0bfff17 	ldw	r2,-4(fp)
 201c374:	10800017 	ldw	r2,0(r2)
 201c378:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201c37c:	e0bffe17 	ldw	r2,-8(fp)
 201c380:	10c00a04 	addi	r3,r2,40
 201c384:	e0bfff17 	ldw	r2,-4(fp)
 201c388:	10800217 	ldw	r2,8(r2)
 201c38c:	100b883a 	mov	r5,r2
 201c390:	1809883a 	mov	r4,r3
 201c394:	201c8f00 	call	201c8f0 <altera_avalon_jtag_uart_close>
}
 201c398:	e037883a 	mov	sp,fp
 201c39c:	dfc00117 	ldw	ra,4(sp)
 201c3a0:	df000017 	ldw	fp,0(sp)
 201c3a4:	dec00204 	addi	sp,sp,8
 201c3a8:	f800283a 	ret

0201c3ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201c3ac:	defffa04 	addi	sp,sp,-24
 201c3b0:	dfc00515 	stw	ra,20(sp)
 201c3b4:	df000415 	stw	fp,16(sp)
 201c3b8:	df000404 	addi	fp,sp,16
 201c3bc:	e13ffd15 	stw	r4,-12(fp)
 201c3c0:	e17ffe15 	stw	r5,-8(fp)
 201c3c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201c3c8:	e0bffd17 	ldw	r2,-12(fp)
 201c3cc:	10800017 	ldw	r2,0(r2)
 201c3d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201c3d4:	e0bffc17 	ldw	r2,-16(fp)
 201c3d8:	10800a04 	addi	r2,r2,40
 201c3dc:	e1bfff17 	ldw	r6,-4(fp)
 201c3e0:	e17ffe17 	ldw	r5,-8(fp)
 201c3e4:	1009883a 	mov	r4,r2
 201c3e8:	201c9580 	call	201c958 <altera_avalon_jtag_uart_ioctl>
}
 201c3ec:	e037883a 	mov	sp,fp
 201c3f0:	dfc00117 	ldw	ra,4(sp)
 201c3f4:	df000017 	ldw	fp,0(sp)
 201c3f8:	dec00204 	addi	sp,sp,8
 201c3fc:	f800283a 	ret

0201c400 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201c400:	defff104 	addi	sp,sp,-60
 201c404:	dfc00e15 	stw	ra,56(sp)
 201c408:	df000d15 	stw	fp,52(sp)
 201c40c:	df000d04 	addi	fp,sp,52
 201c410:	e13ff915 	stw	r4,-28(fp)
 201c414:	e17ffa15 	stw	r5,-24(fp)
 201c418:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201c41c:	e0bff917 	ldw	r2,-28(fp)
 201c420:	10800c04 	addi	r2,r2,48
 201c424:	e0bff415 	stw	r2,-48(fp)
 201c428:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201c42c:	e0bff80b 	ldhu	r2,-32(fp)
 201c430:	e0fff884 	addi	r3,fp,-30
 201c434:	180b883a 	mov	r5,r3
 201c438:	1009883a 	mov	r4,r2
 201c43c:	20163f00 	call	20163f0 <OSFlagCreate>
 201c440:	1007883a 	mov	r3,r2
 201c444:	e0bff417 	ldw	r2,-48(fp)
 201c448:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201c44c:	e0bff917 	ldw	r2,-28(fp)
 201c450:	10800a04 	addi	r2,r2,40
 201c454:	e0bff515 	stw	r2,-44(fp)
 201c458:	00800044 	movi	r2,1
 201c45c:	e0bff78d 	sth	r2,-34(fp)
 201c460:	e0bff78b 	ldhu	r2,-34(fp)
 201c464:	1009883a 	mov	r4,r2
 201c468:	2019bcc0 	call	2019bcc <OSSemCreate>
 201c46c:	1007883a 	mov	r3,r2
 201c470:	e0bff517 	ldw	r2,-44(fp)
 201c474:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201c478:	e0bff917 	ldw	r2,-28(fp)
 201c47c:	10800b04 	addi	r2,r2,44
 201c480:	e0bff615 	stw	r2,-40(fp)
 201c484:	00800044 	movi	r2,1
 201c488:	e0bff70d 	sth	r2,-36(fp)
 201c48c:	e0bff70b 	ldhu	r2,-36(fp)
 201c490:	1009883a 	mov	r4,r2
 201c494:	2019bcc0 	call	2019bcc <OSSemCreate>
 201c498:	1007883a 	mov	r3,r2
 201c49c:	e0bff617 	ldw	r2,-40(fp)
 201c4a0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c4a4:	e0bff917 	ldw	r2,-28(fp)
 201c4a8:	00c00044 	movi	r3,1
 201c4ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201c4b0:	e0bff917 	ldw	r2,-28(fp)
 201c4b4:	10800017 	ldw	r2,0(r2)
 201c4b8:	10800104 	addi	r2,r2,4
 201c4bc:	1007883a 	mov	r3,r2
 201c4c0:	e0bff917 	ldw	r2,-28(fp)
 201c4c4:	10800817 	ldw	r2,32(r2)
 201c4c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201c4cc:	e0bffa17 	ldw	r2,-24(fp)
 201c4d0:	e0fffb17 	ldw	r3,-20(fp)
 201c4d4:	d8000015 	stw	zero,0(sp)
 201c4d8:	e1fff917 	ldw	r7,-28(fp)
 201c4dc:	018080b4 	movhi	r6,514
 201c4e0:	31b15204 	addi	r6,r6,-15032
 201c4e4:	180b883a 	mov	r5,r3
 201c4e8:	1009883a 	mov	r4,r2
 201c4ec:	201d4040 	call	201d404 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201c4f0:	e0bff917 	ldw	r2,-28(fp)
 201c4f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201c4f8:	e0bff917 	ldw	r2,-28(fp)
 201c4fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201c500:	d0e74c17 	ldw	r3,-25296(gp)
 201c504:	e1fff917 	ldw	r7,-28(fp)
 201c508:	018080b4 	movhi	r6,514
 201c50c:	31b1fb04 	addi	r6,r6,-14356
 201c510:	180b883a 	mov	r5,r3
 201c514:	1009883a 	mov	r4,r2
 201c518:	201d0bc0 	call	201d0bc <alt_alarm_start>
 201c51c:	1000040e 	bge	r2,zero,201c530 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201c520:	e0fff917 	ldw	r3,-28(fp)
 201c524:	00a00034 	movhi	r2,32768
 201c528:	10bfffc4 	addi	r2,r2,-1
 201c52c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201c530:	0001883a 	nop
 201c534:	e037883a 	mov	sp,fp
 201c538:	dfc00117 	ldw	ra,4(sp)
 201c53c:	df000017 	ldw	fp,0(sp)
 201c540:	dec00204 	addi	sp,sp,8
 201c544:	f800283a 	ret

0201c548 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201c548:	defff204 	addi	sp,sp,-56
 201c54c:	dfc00d15 	stw	ra,52(sp)
 201c550:	df000c15 	stw	fp,48(sp)
 201c554:	df000c04 	addi	fp,sp,48
 201c558:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201c55c:	e0bfff17 	ldw	r2,-4(fp)
 201c560:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 201c564:	e0bff617 	ldw	r2,-40(fp)
 201c568:	10800017 	ldw	r2,0(r2)
 201c56c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c570:	e0bff717 	ldw	r2,-36(fp)
 201c574:	10800104 	addi	r2,r2,4
 201c578:	10800037 	ldwio	r2,0(r2)
 201c57c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201c580:	e0bff817 	ldw	r2,-32(fp)
 201c584:	1080c00c 	andi	r2,r2,768
 201c588:	10009126 	beq	r2,zero,201c7d0 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201c58c:	e0bff817 	ldw	r2,-32(fp)
 201c590:	1080400c 	andi	r2,r2,256
 201c594:	10004726 	beq	r2,zero,201c6b4 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201c598:	00800074 	movhi	r2,1
 201c59c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c5a0:	e0bff617 	ldw	r2,-40(fp)
 201c5a4:	10800d17 	ldw	r2,52(r2)
 201c5a8:	10800044 	addi	r2,r2,1
 201c5ac:	1081ffcc 	andi	r2,r2,2047
 201c5b0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 201c5b4:	e0bff617 	ldw	r2,-40(fp)
 201c5b8:	10c00e17 	ldw	r3,56(r2)
 201c5bc:	e0bff917 	ldw	r2,-28(fp)
 201c5c0:	18802726 	beq	r3,r2,201c660 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201c5c4:	e0bff717 	ldw	r2,-36(fp)
 201c5c8:	10800037 	ldwio	r2,0(r2)
 201c5cc:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201c5d0:	e0bff417 	ldw	r2,-48(fp)
 201c5d4:	10a0000c 	andi	r2,r2,32768
 201c5d8:	10002326 	beq	r2,zero,201c668 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201c5dc:	e0bff617 	ldw	r2,-40(fp)
 201c5e0:	10800d17 	ldw	r2,52(r2)
 201c5e4:	e0fff417 	ldw	r3,-48(fp)
 201c5e8:	1809883a 	mov	r4,r3
 201c5ec:	e0fff617 	ldw	r3,-40(fp)
 201c5f0:	1885883a 	add	r2,r3,r2
 201c5f4:	10801104 	addi	r2,r2,68
 201c5f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c5fc:	e0bff617 	ldw	r2,-40(fp)
 201c600:	10800d17 	ldw	r2,52(r2)
 201c604:	10800044 	addi	r2,r2,1
 201c608:	10c1ffcc 	andi	r3,r2,2047
 201c60c:	e0bff617 	ldw	r2,-40(fp)
 201c610:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201c614:	e0bff617 	ldw	r2,-40(fp)
 201c618:	10800c17 	ldw	r2,48(r2)
 201c61c:	e0bffb15 	stw	r2,-20(fp)
 201c620:	00800044 	movi	r2,1
 201c624:	e0bffc0d 	sth	r2,-16(fp)
 201c628:	00800044 	movi	r2,1
 201c62c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c630:	d0a73743 	ldbu	r2,-25379(gp)
 201c634:	10803fcc 	andi	r2,r2,255
 201c638:	103fd926 	beq	r2,zero,201c5a0 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 201c63c:	e0bffc0b 	ldhu	r2,-16(fp)
 201c640:	e0fffc83 	ldbu	r3,-14(fp)
 201c644:	e13ffdc4 	addi	r4,fp,-9
 201c648:	200f883a 	mov	r7,r4
 201c64c:	180d883a 	mov	r6,r3
 201c650:	100b883a 	mov	r5,r2
 201c654:	e13ffb17 	ldw	r4,-20(fp)
 201c658:	2016fcc0 	call	2016fcc <OSFlagPost>
      }
 201c65c:	003fd006 	br	201c5a0 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201c660:	0001883a 	nop
 201c664:	00000106 	br	201c66c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201c668:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201c66c:	e0bff417 	ldw	r2,-48(fp)
 201c670:	10bfffec 	andhi	r2,r2,65535
 201c674:	10000f26 	beq	r2,zero,201c6b4 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c678:	e0bff617 	ldw	r2,-40(fp)
 201c67c:	10c00817 	ldw	r3,32(r2)
 201c680:	00bfff84 	movi	r2,-2
 201c684:	1886703a 	and	r3,r3,r2
 201c688:	e0bff617 	ldw	r2,-40(fp)
 201c68c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201c690:	e0bff717 	ldw	r2,-36(fp)
 201c694:	10800104 	addi	r2,r2,4
 201c698:	1007883a 	mov	r3,r2
 201c69c:	e0bff617 	ldw	r2,-40(fp)
 201c6a0:	10800817 	ldw	r2,32(r2)
 201c6a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c6a8:	e0bff717 	ldw	r2,-36(fp)
 201c6ac:	10800104 	addi	r2,r2,4
 201c6b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201c6b4:	e0bff817 	ldw	r2,-32(fp)
 201c6b8:	1080800c 	andi	r2,r2,512
 201c6bc:	103fac26 	beq	r2,zero,201c570 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201c6c0:	e0bff817 	ldw	r2,-32(fp)
 201c6c4:	1004d43a 	srli	r2,r2,16
 201c6c8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c6cc:	00002606 	br	201c768 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201c6d0:	e0bff717 	ldw	r2,-36(fp)
 201c6d4:	e0fff617 	ldw	r3,-40(fp)
 201c6d8:	18c01017 	ldw	r3,64(r3)
 201c6dc:	e13ff617 	ldw	r4,-40(fp)
 201c6e0:	20c7883a 	add	r3,r4,r3
 201c6e4:	18c21104 	addi	r3,r3,2116
 201c6e8:	18c00003 	ldbu	r3,0(r3)
 201c6ec:	18c03fcc 	andi	r3,r3,255
 201c6f0:	18c0201c 	xori	r3,r3,128
 201c6f4:	18ffe004 	addi	r3,r3,-128
 201c6f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c6fc:	e0bff617 	ldw	r2,-40(fp)
 201c700:	10801017 	ldw	r2,64(r2)
 201c704:	10800044 	addi	r2,r2,1
 201c708:	10c1ffcc 	andi	r3,r2,2047
 201c70c:	e0bff617 	ldw	r2,-40(fp)
 201c710:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201c714:	e0bff617 	ldw	r2,-40(fp)
 201c718:	10800c17 	ldw	r2,48(r2)
 201c71c:	e0bffa15 	stw	r2,-24(fp)
 201c720:	00800084 	movi	r2,2
 201c724:	e0bffd0d 	sth	r2,-12(fp)
 201c728:	00800044 	movi	r2,1
 201c72c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c730:	d0a73743 	ldbu	r2,-25379(gp)
 201c734:	10803fcc 	andi	r2,r2,255
 201c738:	10000826 	beq	r2,zero,201c75c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 201c73c:	e0bffd0b 	ldhu	r2,-12(fp)
 201c740:	e0fffd83 	ldbu	r3,-10(fp)
 201c744:	e13ffe04 	addi	r4,fp,-8
 201c748:	200f883a 	mov	r7,r4
 201c74c:	180d883a 	mov	r6,r3
 201c750:	100b883a 	mov	r5,r2
 201c754:	e13ffa17 	ldw	r4,-24(fp)
 201c758:	2016fcc0 	call	2016fcc <OSFlagPost>

        space--;
 201c75c:	e0bff517 	ldw	r2,-44(fp)
 201c760:	10bfffc4 	addi	r2,r2,-1
 201c764:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c768:	e0bff517 	ldw	r2,-44(fp)
 201c76c:	10000526 	beq	r2,zero,201c784 <altera_avalon_jtag_uart_irq+0x23c>
 201c770:	e0bff617 	ldw	r2,-40(fp)
 201c774:	10c01017 	ldw	r3,64(r2)
 201c778:	e0bff617 	ldw	r2,-40(fp)
 201c77c:	10800f17 	ldw	r2,60(r2)
 201c780:	18bfd31e 	bne	r3,r2,201c6d0 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201c784:	e0bff517 	ldw	r2,-44(fp)
 201c788:	103f7926 	beq	r2,zero,201c570 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201c78c:	e0bff617 	ldw	r2,-40(fp)
 201c790:	10c00817 	ldw	r3,32(r2)
 201c794:	00bfff44 	movi	r2,-3
 201c798:	1886703a 	and	r3,r3,r2
 201c79c:	e0bff617 	ldw	r2,-40(fp)
 201c7a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201c7a4:	e0bff617 	ldw	r2,-40(fp)
 201c7a8:	10800017 	ldw	r2,0(r2)
 201c7ac:	10800104 	addi	r2,r2,4
 201c7b0:	1007883a 	mov	r3,r2
 201c7b4:	e0bff617 	ldw	r2,-40(fp)
 201c7b8:	10800817 	ldw	r2,32(r2)
 201c7bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c7c0:	e0bff717 	ldw	r2,-36(fp)
 201c7c4:	10800104 	addi	r2,r2,4
 201c7c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201c7cc:	003f6806 	br	201c570 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201c7d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201c7d4:	0001883a 	nop
 201c7d8:	e037883a 	mov	sp,fp
 201c7dc:	dfc00117 	ldw	ra,4(sp)
 201c7e0:	df000017 	ldw	fp,0(sp)
 201c7e4:	dec00204 	addi	sp,sp,8
 201c7e8:	f800283a 	ret

0201c7ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201c7ec:	defff904 	addi	sp,sp,-28
 201c7f0:	dfc00615 	stw	ra,24(sp)
 201c7f4:	df000515 	stw	fp,20(sp)
 201c7f8:	df000504 	addi	fp,sp,20
 201c7fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201c800:	e0bfff17 	ldw	r2,-4(fp)
 201c804:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201c808:	e0bffb17 	ldw	r2,-20(fp)
 201c80c:	10800017 	ldw	r2,0(r2)
 201c810:	10800104 	addi	r2,r2,4
 201c814:	10800037 	ldwio	r2,0(r2)
 201c818:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201c81c:	e0bffc17 	ldw	r2,-16(fp)
 201c820:	1081000c 	andi	r2,r2,1024
 201c824:	10000b26 	beq	r2,zero,201c854 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201c828:	e0bffb17 	ldw	r2,-20(fp)
 201c82c:	10800017 	ldw	r2,0(r2)
 201c830:	10800104 	addi	r2,r2,4
 201c834:	1007883a 	mov	r3,r2
 201c838:	e0bffb17 	ldw	r2,-20(fp)
 201c83c:	10800817 	ldw	r2,32(r2)
 201c840:	10810014 	ori	r2,r2,1024
 201c844:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201c848:	e0bffb17 	ldw	r2,-20(fp)
 201c84c:	10000915 	stw	zero,36(r2)
 201c850:	00002106 	br	201c8d8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201c854:	e0bffb17 	ldw	r2,-20(fp)
 201c858:	10c00917 	ldw	r3,36(r2)
 201c85c:	00a00034 	movhi	r2,32768
 201c860:	10bfff04 	addi	r2,r2,-4
 201c864:	10c01c36 	bltu	r2,r3,201c8d8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201c868:	e0bffb17 	ldw	r2,-20(fp)
 201c86c:	10800917 	ldw	r2,36(r2)
 201c870:	10c00044 	addi	r3,r2,1
 201c874:	e0bffb17 	ldw	r2,-20(fp)
 201c878:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201c87c:	e0bffb17 	ldw	r2,-20(fp)
 201c880:	10c00917 	ldw	r3,36(r2)
 201c884:	e0bffb17 	ldw	r2,-20(fp)
 201c888:	10800117 	ldw	r2,4(r2)
 201c88c:	18801236 	bltu	r3,r2,201c8d8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201c890:	e0bffb17 	ldw	r2,-20(fp)
 201c894:	10800c17 	ldw	r2,48(r2)
 201c898:	e0bffd15 	stw	r2,-12(fp)
 201c89c:	00800104 	movi	r2,4
 201c8a0:	e0bffe0d 	sth	r2,-8(fp)
 201c8a4:	00800044 	movi	r2,1
 201c8a8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c8ac:	d0a73743 	ldbu	r2,-25379(gp)
 201c8b0:	10803fcc 	andi	r2,r2,255
 201c8b4:	10000826 	beq	r2,zero,201c8d8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201c8b8:	e0bffe0b 	ldhu	r2,-8(fp)
 201c8bc:	e0fffe83 	ldbu	r3,-6(fp)
 201c8c0:	e13ffec4 	addi	r4,fp,-5
 201c8c4:	200f883a 	mov	r7,r4
 201c8c8:	180d883a 	mov	r6,r3
 201c8cc:	100b883a 	mov	r5,r2
 201c8d0:	e13ffd17 	ldw	r4,-12(fp)
 201c8d4:	2016fcc0 	call	2016fcc <OSFlagPost>
 201c8d8:	d0a74c17 	ldw	r2,-25296(gp)
    }
  }

  return alt_ticks_per_second();
}
 201c8dc:	e037883a 	mov	sp,fp
 201c8e0:	dfc00117 	ldw	ra,4(sp)
 201c8e4:	df000017 	ldw	fp,0(sp)
 201c8e8:	dec00204 	addi	sp,sp,8
 201c8ec:	f800283a 	ret

0201c8f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201c8f0:	defffd04 	addi	sp,sp,-12
 201c8f4:	df000215 	stw	fp,8(sp)
 201c8f8:	df000204 	addi	fp,sp,8
 201c8fc:	e13ffe15 	stw	r4,-8(fp)
 201c900:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c904:	00000506 	br	201c91c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201c908:	e0bfff17 	ldw	r2,-4(fp)
 201c90c:	1090000c 	andi	r2,r2,16384
 201c910:	10000226 	beq	r2,zero,201c91c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201c914:	00bffd44 	movi	r2,-11
 201c918:	00000b06 	br	201c948 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c91c:	e0bffe17 	ldw	r2,-8(fp)
 201c920:	10c01017 	ldw	r3,64(r2)
 201c924:	e0bffe17 	ldw	r2,-8(fp)
 201c928:	10800f17 	ldw	r2,60(r2)
 201c92c:	18800526 	beq	r3,r2,201c944 <altera_avalon_jtag_uart_close+0x54>
 201c930:	e0bffe17 	ldw	r2,-8(fp)
 201c934:	10c00917 	ldw	r3,36(r2)
 201c938:	e0bffe17 	ldw	r2,-8(fp)
 201c93c:	10800117 	ldw	r2,4(r2)
 201c940:	18bff136 	bltu	r3,r2,201c908 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201c944:	0005883a 	mov	r2,zero
}
 201c948:	e037883a 	mov	sp,fp
 201c94c:	df000017 	ldw	fp,0(sp)
 201c950:	dec00104 	addi	sp,sp,4
 201c954:	f800283a 	ret

0201c958 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201c958:	defffa04 	addi	sp,sp,-24
 201c95c:	df000515 	stw	fp,20(sp)
 201c960:	df000504 	addi	fp,sp,20
 201c964:	e13ffd15 	stw	r4,-12(fp)
 201c968:	e17ffe15 	stw	r5,-8(fp)
 201c96c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201c970:	00bff9c4 	movi	r2,-25
 201c974:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201c978:	e0bffe17 	ldw	r2,-8(fp)
 201c97c:	10da8060 	cmpeqi	r3,r2,27137
 201c980:	1800031e 	bne	r3,zero,201c990 <altera_avalon_jtag_uart_ioctl+0x38>
 201c984:	109a80a0 	cmpeqi	r2,r2,27138
 201c988:	1000181e 	bne	r2,zero,201c9ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201c98c:	00002906 	br	201ca34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201c990:	e0bffd17 	ldw	r2,-12(fp)
 201c994:	10c00117 	ldw	r3,4(r2)
 201c998:	00a00034 	movhi	r2,32768
 201c99c:	10bfffc4 	addi	r2,r2,-1
 201c9a0:	18802126 	beq	r3,r2,201ca28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201c9a4:	e0bfff17 	ldw	r2,-4(fp)
 201c9a8:	10800017 	ldw	r2,0(r2)
 201c9ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201c9b0:	e0bffc17 	ldw	r2,-16(fp)
 201c9b4:	10800090 	cmplti	r2,r2,2
 201c9b8:	1000061e 	bne	r2,zero,201c9d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 201c9bc:	e0fffc17 	ldw	r3,-16(fp)
 201c9c0:	00a00034 	movhi	r2,32768
 201c9c4:	10bfffc4 	addi	r2,r2,-1
 201c9c8:	18800226 	beq	r3,r2,201c9d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 201c9cc:	e0bffc17 	ldw	r2,-16(fp)
 201c9d0:	00000206 	br	201c9dc <altera_avalon_jtag_uart_ioctl+0x84>
 201c9d4:	00a00034 	movhi	r2,32768
 201c9d8:	10bfff84 	addi	r2,r2,-2
 201c9dc:	e0fffd17 	ldw	r3,-12(fp)
 201c9e0:	18800115 	stw	r2,4(r3)
      rc = 0;
 201c9e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201c9e8:	00000f06 	br	201ca28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201c9ec:	e0bffd17 	ldw	r2,-12(fp)
 201c9f0:	10c00117 	ldw	r3,4(r2)
 201c9f4:	00a00034 	movhi	r2,32768
 201c9f8:	10bfffc4 	addi	r2,r2,-1
 201c9fc:	18800c26 	beq	r3,r2,201ca30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201ca00:	e0bffd17 	ldw	r2,-12(fp)
 201ca04:	10c00917 	ldw	r3,36(r2)
 201ca08:	e0bffd17 	ldw	r2,-12(fp)
 201ca0c:	10800117 	ldw	r2,4(r2)
 201ca10:	1885803a 	cmpltu	r2,r3,r2
 201ca14:	10c03fcc 	andi	r3,r2,255
 201ca18:	e0bfff17 	ldw	r2,-4(fp)
 201ca1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201ca20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201ca24:	00000206 	br	201ca30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201ca28:	0001883a 	nop
 201ca2c:	00000106 	br	201ca34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201ca30:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201ca34:	e0bffb17 	ldw	r2,-20(fp)
}
 201ca38:	e037883a 	mov	sp,fp
 201ca3c:	df000017 	ldw	fp,0(sp)
 201ca40:	dec00104 	addi	sp,sp,4
 201ca44:	f800283a 	ret

0201ca48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201ca48:	deffed04 	addi	sp,sp,-76
 201ca4c:	dfc01215 	stw	ra,72(sp)
 201ca50:	df001115 	stw	fp,68(sp)
 201ca54:	df001104 	addi	fp,sp,68
 201ca58:	e13ffc15 	stw	r4,-16(fp)
 201ca5c:	e17ffd15 	stw	r5,-12(fp)
 201ca60:	e1bffe15 	stw	r6,-8(fp)
 201ca64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201ca68:	e0bffd17 	ldw	r2,-12(fp)
 201ca6c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201ca70:	e0bffc17 	ldw	r2,-16(fp)
 201ca74:	10800a17 	ldw	r2,40(r2)
 201ca78:	e0bff815 	stw	r2,-32(fp)
 201ca7c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201ca80:	e0bff90b 	ldhu	r2,-28(fp)
 201ca84:	e0fffb04 	addi	r3,fp,-20
 201ca88:	180d883a 	mov	r6,r3
 201ca8c:	100b883a 	mov	r5,r2
 201ca90:	e13ff817 	ldw	r4,-32(fp)
 201ca94:	2019ee40 	call	2019ee4 <OSSemPend>

  while (space > 0)
 201ca98:	00006106 	br	201cc20 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201ca9c:	e0bffc17 	ldw	r2,-16(fp)
 201caa0:	10800d17 	ldw	r2,52(r2)
 201caa4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201caa8:	e0bffc17 	ldw	r2,-16(fp)
 201caac:	10800e17 	ldw	r2,56(r2)
 201cab0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201cab4:	e0fff317 	ldw	r3,-52(fp)
 201cab8:	e0bff417 	ldw	r2,-48(fp)
 201cabc:	18800536 	bltu	r3,r2,201cad4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201cac0:	e0fff317 	ldw	r3,-52(fp)
 201cac4:	e0bff417 	ldw	r2,-48(fp)
 201cac8:	1885c83a 	sub	r2,r3,r2
 201cacc:	e0bff115 	stw	r2,-60(fp)
 201cad0:	00000406 	br	201cae4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201cad4:	00c20004 	movi	r3,2048
 201cad8:	e0bff417 	ldw	r2,-48(fp)
 201cadc:	1885c83a 	sub	r2,r3,r2
 201cae0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201cae4:	e0bff117 	ldw	r2,-60(fp)
 201cae8:	10001e26 	beq	r2,zero,201cb64 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201caec:	e0fffe17 	ldw	r3,-8(fp)
 201caf0:	e0bff117 	ldw	r2,-60(fp)
 201caf4:	1880022e 	bgeu	r3,r2,201cb00 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201caf8:	e0bffe17 	ldw	r2,-8(fp)
 201cafc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201cb00:	e0bffc17 	ldw	r2,-16(fp)
 201cb04:	10c01104 	addi	r3,r2,68
 201cb08:	e0bff417 	ldw	r2,-48(fp)
 201cb0c:	1885883a 	add	r2,r3,r2
 201cb10:	e1bff117 	ldw	r6,-60(fp)
 201cb14:	100b883a 	mov	r5,r2
 201cb18:	e13ff017 	ldw	r4,-64(fp)
 201cb1c:	2004c5c0 	call	2004c5c <memcpy>
      ptr   += n;
 201cb20:	e0fff017 	ldw	r3,-64(fp)
 201cb24:	e0bff117 	ldw	r2,-60(fp)
 201cb28:	1885883a 	add	r2,r3,r2
 201cb2c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201cb30:	e0fffe17 	ldw	r3,-8(fp)
 201cb34:	e0bff117 	ldw	r2,-60(fp)
 201cb38:	1885c83a 	sub	r2,r3,r2
 201cb3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201cb40:	e0fff417 	ldw	r3,-48(fp)
 201cb44:	e0bff117 	ldw	r2,-60(fp)
 201cb48:	1885883a 	add	r2,r3,r2
 201cb4c:	10c1ffcc 	andi	r3,r2,2047
 201cb50:	e0bffc17 	ldw	r2,-16(fp)
 201cb54:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201cb58:	e0bffe17 	ldw	r2,-8(fp)
 201cb5c:	00bfcf16 	blt	zero,r2,201ca9c <altera_avalon_jtag_uart_read+0x54>
 201cb60:	00000106 	br	201cb68 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201cb64:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201cb68:	e0fff017 	ldw	r3,-64(fp)
 201cb6c:	e0bffd17 	ldw	r2,-12(fp)
 201cb70:	18802e1e 	bne	r3,r2,201cc2c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201cb74:	e0bfff17 	ldw	r2,-4(fp)
 201cb78:	1090000c 	andi	r2,r2,16384
 201cb7c:	10002d1e 	bne	r2,zero,201cc34 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201cb80:	d0a73743 	ldbu	r2,-25379(gp)
 201cb84:	10803fcc 	andi	r2,r2,255
 201cb88:	10800058 	cmpnei	r2,r2,1
 201cb8c:	1000161e 	bne	r2,zero,201cbe8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201cb90:	e0bffc17 	ldw	r2,-16(fp)
 201cb94:	10800c17 	ldw	r2,48(r2)
 201cb98:	e0bff215 	stw	r2,-56(fp)
 201cb9c:	00800144 	movi	r2,5
 201cba0:	e0bff98d 	sth	r2,-26(fp)
 201cba4:	00bfe0c4 	movi	r2,-125
 201cba8:	e0bffa05 	stb	r2,-24(fp)
 201cbac:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201cbb0:	d0a73743 	ldbu	r2,-25379(gp)
 201cbb4:	10803fcc 	andi	r2,r2,255
 201cbb8:	10001526 	beq	r2,zero,201cc10 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201cbbc:	e0fff98b 	ldhu	r3,-26(fp)
 201cbc0:	e13ffa03 	ldbu	r4,-24(fp)
 201cbc4:	e17ffa8b 	ldhu	r5,-22(fp)
 201cbc8:	e0bffb44 	addi	r2,fp,-19
 201cbcc:	d8800015 	stw	r2,0(sp)
 201cbd0:	280f883a 	mov	r7,r5
 201cbd4:	200d883a 	mov	r6,r4
 201cbd8:	180b883a 	mov	r5,r3
 201cbdc:	e13ff217 	ldw	r4,-56(fp)
 201cbe0:	20169b40 	call	20169b4 <OSFlagPend>
 201cbe4:	00000a06 	br	201cc10 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201cbe8:	0001883a 	nop
 201cbec:	e0bffc17 	ldw	r2,-16(fp)
 201cbf0:	10c00d17 	ldw	r3,52(r2)
 201cbf4:	e0bff317 	ldw	r2,-52(fp)
 201cbf8:	1880051e 	bne	r3,r2,201cc10 <altera_avalon_jtag_uart_read+0x1c8>
 201cbfc:	e0bffc17 	ldw	r2,-16(fp)
 201cc00:	10c00917 	ldw	r3,36(r2)
 201cc04:	e0bffc17 	ldw	r2,-16(fp)
 201cc08:	10800117 	ldw	r2,4(r2)
 201cc0c:	18bff736 	bltu	r3,r2,201cbec <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201cc10:	e0bffc17 	ldw	r2,-16(fp)
 201cc14:	10c00d17 	ldw	r3,52(r2)
 201cc18:	e0bff317 	ldw	r2,-52(fp)
 201cc1c:	18800726 	beq	r3,r2,201cc3c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201cc20:	e0bffe17 	ldw	r2,-8(fp)
 201cc24:	00bf9d16 	blt	zero,r2,201ca9c <altera_avalon_jtag_uart_read+0x54>
 201cc28:	00000506 	br	201cc40 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201cc2c:	0001883a 	nop
 201cc30:	00000306 	br	201cc40 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201cc34:	0001883a 	nop
 201cc38:	00000106 	br	201cc40 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201cc3c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201cc40:	e0bffc17 	ldw	r2,-16(fp)
 201cc44:	10800a17 	ldw	r2,40(r2)
 201cc48:	1009883a 	mov	r4,r2
 201cc4c:	201a25c0 	call	201a25c <OSSemPost>

  if (ptr != buffer)
 201cc50:	e0fff017 	ldw	r3,-64(fp)
 201cc54:	e0bffd17 	ldw	r2,-12(fp)
 201cc58:	18801826 	beq	r3,r2,201ccbc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cc5c:	0005303a 	rdctl	r2,status
 201cc60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cc64:	e0fff717 	ldw	r3,-36(fp)
 201cc68:	00bfff84 	movi	r2,-2
 201cc6c:	1884703a 	and	r2,r3,r2
 201cc70:	1001703a 	wrctl	status,r2
  
  return context;
 201cc74:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201cc78:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201cc7c:	e0bffc17 	ldw	r2,-16(fp)
 201cc80:	10800817 	ldw	r2,32(r2)
 201cc84:	10c00054 	ori	r3,r2,1
 201cc88:	e0bffc17 	ldw	r2,-16(fp)
 201cc8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201cc90:	e0bffc17 	ldw	r2,-16(fp)
 201cc94:	10800017 	ldw	r2,0(r2)
 201cc98:	10800104 	addi	r2,r2,4
 201cc9c:	1007883a 	mov	r3,r2
 201cca0:	e0bffc17 	ldw	r2,-16(fp)
 201cca4:	10800817 	ldw	r2,32(r2)
 201cca8:	18800035 	stwio	r2,0(r3)
 201ccac:	e0bff617 	ldw	r2,-40(fp)
 201ccb0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ccb4:	e0bff517 	ldw	r2,-44(fp)
 201ccb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201ccbc:	e0fff017 	ldw	r3,-64(fp)
 201ccc0:	e0bffd17 	ldw	r2,-12(fp)
 201ccc4:	18800426 	beq	r3,r2,201ccd8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201ccc8:	e0fff017 	ldw	r3,-64(fp)
 201cccc:	e0bffd17 	ldw	r2,-12(fp)
 201ccd0:	1885c83a 	sub	r2,r3,r2
 201ccd4:	00000606 	br	201ccf0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201ccd8:	e0bfff17 	ldw	r2,-4(fp)
 201ccdc:	1090000c 	andi	r2,r2,16384
 201cce0:	10000226 	beq	r2,zero,201ccec <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201cce4:	00bffd44 	movi	r2,-11
 201cce8:	00000106 	br	201ccf0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201ccec:	00bffec4 	movi	r2,-5
}
 201ccf0:	e037883a 	mov	sp,fp
 201ccf4:	dfc00117 	ldw	ra,4(sp)
 201ccf8:	df000017 	ldw	fp,0(sp)
 201ccfc:	dec00204 	addi	sp,sp,8
 201cd00:	f800283a 	ret

0201cd04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201cd04:	deffed04 	addi	sp,sp,-76
 201cd08:	dfc01215 	stw	ra,72(sp)
 201cd0c:	df001115 	stw	fp,68(sp)
 201cd10:	df001104 	addi	fp,sp,68
 201cd14:	e13ffc15 	stw	r4,-16(fp)
 201cd18:	e17ffd15 	stw	r5,-12(fp)
 201cd1c:	e1bffe15 	stw	r6,-8(fp)
 201cd20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201cd24:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201cd28:	e0bffd17 	ldw	r2,-12(fp)
 201cd2c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201cd30:	e0bffc17 	ldw	r2,-16(fp)
 201cd34:	10800b17 	ldw	r2,44(r2)
 201cd38:	e0bff815 	stw	r2,-32(fp)
 201cd3c:	e03ff90d 	sth	zero,-28(fp)
 201cd40:	e0bff90b 	ldhu	r2,-28(fp)
 201cd44:	e0fffb44 	addi	r3,fp,-19
 201cd48:	180d883a 	mov	r6,r3
 201cd4c:	100b883a 	mov	r5,r2
 201cd50:	e13ff817 	ldw	r4,-32(fp)
 201cd54:	2019ee40 	call	2019ee4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201cd58:	00003706 	br	201ce38 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201cd5c:	e0bffc17 	ldw	r2,-16(fp)
 201cd60:	10800f17 	ldw	r2,60(r2)
 201cd64:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201cd68:	e0bffc17 	ldw	r2,-16(fp)
 201cd6c:	10801017 	ldw	r2,64(r2)
 201cd70:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 201cd74:	e0fff417 	ldw	r3,-48(fp)
 201cd78:	e0bff017 	ldw	r2,-64(fp)
 201cd7c:	1880062e 	bgeu	r3,r2,201cd98 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 201cd80:	e0fff017 	ldw	r3,-64(fp)
 201cd84:	e0bff417 	ldw	r2,-48(fp)
 201cd88:	1885c83a 	sub	r2,r3,r2
 201cd8c:	10bfffc4 	addi	r2,r2,-1
 201cd90:	e0bff115 	stw	r2,-60(fp)
 201cd94:	00000b06 	br	201cdc4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 201cd98:	e0bff017 	ldw	r2,-64(fp)
 201cd9c:	10000526 	beq	r2,zero,201cdb4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201cda0:	00c20004 	movi	r3,2048
 201cda4:	e0bff417 	ldw	r2,-48(fp)
 201cda8:	1885c83a 	sub	r2,r3,r2
 201cdac:	e0bff115 	stw	r2,-60(fp)
 201cdb0:	00000406 	br	201cdc4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201cdb4:	00c1ffc4 	movi	r3,2047
 201cdb8:	e0bff417 	ldw	r2,-48(fp)
 201cdbc:	1885c83a 	sub	r2,r3,r2
 201cdc0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201cdc4:	e0bff117 	ldw	r2,-60(fp)
 201cdc8:	10001e26 	beq	r2,zero,201ce44 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 201cdcc:	e0fffe17 	ldw	r3,-8(fp)
 201cdd0:	e0bff117 	ldw	r2,-60(fp)
 201cdd4:	1880022e 	bgeu	r3,r2,201cde0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201cdd8:	e0bffe17 	ldw	r2,-8(fp)
 201cddc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201cde0:	e0bffc17 	ldw	r2,-16(fp)
 201cde4:	10c21104 	addi	r3,r2,2116
 201cde8:	e0bff417 	ldw	r2,-48(fp)
 201cdec:	1885883a 	add	r2,r3,r2
 201cdf0:	e1bff117 	ldw	r6,-60(fp)
 201cdf4:	e17ffd17 	ldw	r5,-12(fp)
 201cdf8:	1009883a 	mov	r4,r2
 201cdfc:	2004c5c0 	call	2004c5c <memcpy>
      ptr   += n;
 201ce00:	e0fffd17 	ldw	r3,-12(fp)
 201ce04:	e0bff117 	ldw	r2,-60(fp)
 201ce08:	1885883a 	add	r2,r3,r2
 201ce0c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201ce10:	e0fffe17 	ldw	r3,-8(fp)
 201ce14:	e0bff117 	ldw	r2,-60(fp)
 201ce18:	1885c83a 	sub	r2,r3,r2
 201ce1c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201ce20:	e0fff417 	ldw	r3,-48(fp)
 201ce24:	e0bff117 	ldw	r2,-60(fp)
 201ce28:	1885883a 	add	r2,r3,r2
 201ce2c:	10c1ffcc 	andi	r3,r2,2047
 201ce30:	e0bffc17 	ldw	r2,-16(fp)
 201ce34:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201ce38:	e0bffe17 	ldw	r2,-8(fp)
 201ce3c:	00bfc716 	blt	zero,r2,201cd5c <altera_avalon_jtag_uart_write+0x58>
 201ce40:	00000106 	br	201ce48 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 201ce44:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ce48:	0005303a 	rdctl	r2,status
 201ce4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ce50:	e0fff717 	ldw	r3,-36(fp)
 201ce54:	00bfff84 	movi	r2,-2
 201ce58:	1884703a 	and	r2,r3,r2
 201ce5c:	1001703a 	wrctl	status,r2
  
  return context;
 201ce60:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201ce64:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201ce68:	e0bffc17 	ldw	r2,-16(fp)
 201ce6c:	10800817 	ldw	r2,32(r2)
 201ce70:	10c00094 	ori	r3,r2,2
 201ce74:	e0bffc17 	ldw	r2,-16(fp)
 201ce78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201ce7c:	e0bffc17 	ldw	r2,-16(fp)
 201ce80:	10800017 	ldw	r2,0(r2)
 201ce84:	10800104 	addi	r2,r2,4
 201ce88:	1007883a 	mov	r3,r2
 201ce8c:	e0bffc17 	ldw	r2,-16(fp)
 201ce90:	10800817 	ldw	r2,32(r2)
 201ce94:	18800035 	stwio	r2,0(r3)
 201ce98:	e0bff617 	ldw	r2,-40(fp)
 201ce9c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cea0:	e0bff317 	ldw	r2,-52(fp)
 201cea4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201cea8:	e0bffe17 	ldw	r2,-8(fp)
 201ceac:	00802a0e 	bge	zero,r2,201cf58 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 201ceb0:	e0bfff17 	ldw	r2,-4(fp)
 201ceb4:	1090000c 	andi	r2,r2,16384
 201ceb8:	10002a1e 	bne	r2,zero,201cf64 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201cebc:	d0a73743 	ldbu	r2,-25379(gp)
 201cec0:	10803fcc 	andi	r2,r2,255
 201cec4:	10800058 	cmpnei	r2,r2,1
 201cec8:	1000161e 	bne	r2,zero,201cf24 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201cecc:	e0bffc17 	ldw	r2,-16(fp)
 201ced0:	10800c17 	ldw	r2,48(r2)
 201ced4:	e0bff515 	stw	r2,-44(fp)
 201ced8:	00800184 	movi	r2,6
 201cedc:	e0bff98d 	sth	r2,-26(fp)
 201cee0:	00bfe0c4 	movi	r2,-125
 201cee4:	e0bffa05 	stb	r2,-24(fp)
 201cee8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201ceec:	d0a73743 	ldbu	r2,-25379(gp)
 201cef0:	10803fcc 	andi	r2,r2,255
 201cef4:	10001526 	beq	r2,zero,201cf4c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201cef8:	e0fff98b 	ldhu	r3,-26(fp)
 201cefc:	e13ffa03 	ldbu	r4,-24(fp)
 201cf00:	e17ffa8b 	ldhu	r5,-22(fp)
 201cf04:	e0bffb04 	addi	r2,fp,-20
 201cf08:	d8800015 	stw	r2,0(sp)
 201cf0c:	280f883a 	mov	r7,r5
 201cf10:	200d883a 	mov	r6,r4
 201cf14:	180b883a 	mov	r5,r3
 201cf18:	e13ff517 	ldw	r4,-44(fp)
 201cf1c:	20169b40 	call	20169b4 <OSFlagPend>
 201cf20:	00000a06 	br	201cf4c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201cf24:	0001883a 	nop
 201cf28:	e0bffc17 	ldw	r2,-16(fp)
 201cf2c:	10c01017 	ldw	r3,64(r2)
 201cf30:	e0bff017 	ldw	r2,-64(fp)
 201cf34:	1880051e 	bne	r3,r2,201cf4c <altera_avalon_jtag_uart_write+0x248>
 201cf38:	e0bffc17 	ldw	r2,-16(fp)
 201cf3c:	10c00917 	ldw	r3,36(r2)
 201cf40:	e0bffc17 	ldw	r2,-16(fp)
 201cf44:	10800117 	ldw	r2,4(r2)
 201cf48:	18bff736 	bltu	r3,r2,201cf28 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 201cf4c:	e0bffc17 	ldw	r2,-16(fp)
 201cf50:	10800917 	ldw	r2,36(r2)
 201cf54:	1000051e 	bne	r2,zero,201cf6c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201cf58:	e0bffe17 	ldw	r2,-8(fp)
 201cf5c:	00bfb616 	blt	zero,r2,201ce38 <altera_avalon_jtag_uart_write+0x134>
 201cf60:	00000306 	br	201cf70 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201cf64:	0001883a 	nop
 201cf68:	00000106 	br	201cf70 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 201cf6c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201cf70:	e0bffc17 	ldw	r2,-16(fp)
 201cf74:	10800b17 	ldw	r2,44(r2)
 201cf78:	1009883a 	mov	r4,r2
 201cf7c:	201a25c0 	call	201a25c <OSSemPost>

  if (ptr != start)
 201cf80:	e0fffd17 	ldw	r3,-12(fp)
 201cf84:	e0bff217 	ldw	r2,-56(fp)
 201cf88:	18800426 	beq	r3,r2,201cf9c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 201cf8c:	e0fffd17 	ldw	r3,-12(fp)
 201cf90:	e0bff217 	ldw	r2,-56(fp)
 201cf94:	1885c83a 	sub	r2,r3,r2
 201cf98:	00000606 	br	201cfb4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 201cf9c:	e0bfff17 	ldw	r2,-4(fp)
 201cfa0:	1090000c 	andi	r2,r2,16384
 201cfa4:	10000226 	beq	r2,zero,201cfb0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 201cfa8:	00bffd44 	movi	r2,-11
 201cfac:	00000106 	br	201cfb4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201cfb0:	00bffec4 	movi	r2,-5
}
 201cfb4:	e037883a 	mov	sp,fp
 201cfb8:	dfc00117 	ldw	ra,4(sp)
 201cfbc:	df000017 	ldw	fp,0(sp)
 201cfc0:	dec00204 	addi	sp,sp,8
 201cfc4:	f800283a 	ret

0201cfc8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201cfc8:	defffa04 	addi	sp,sp,-24
 201cfcc:	dfc00515 	stw	ra,20(sp)
 201cfd0:	df000415 	stw	fp,16(sp)
 201cfd4:	df000404 	addi	fp,sp,16
 201cfd8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201cfdc:	0007883a 	mov	r3,zero
 201cfe0:	e0bfff17 	ldw	r2,-4(fp)
 201cfe4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201cfe8:	e0bfff17 	ldw	r2,-4(fp)
 201cfec:	10800104 	addi	r2,r2,4
 201cff0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cff4:	0005303a 	rdctl	r2,status
 201cff8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cffc:	e0fffd17 	ldw	r3,-12(fp)
 201d000:	00bfff84 	movi	r2,-2
 201d004:	1884703a 	and	r2,r3,r2
 201d008:	1001703a 	wrctl	status,r2
  
  return context;
 201d00c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201d010:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201d014:	201dad40 	call	201dad4 <alt_tick>
 201d018:	e0bffc17 	ldw	r2,-16(fp)
 201d01c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d020:	e0bffe17 	ldw	r2,-8(fp)
 201d024:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201d028:	0001883a 	nop
 201d02c:	e037883a 	mov	sp,fp
 201d030:	dfc00117 	ldw	ra,4(sp)
 201d034:	df000017 	ldw	fp,0(sp)
 201d038:	dec00204 	addi	sp,sp,8
 201d03c:	f800283a 	ret

0201d040 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201d040:	defff804 	addi	sp,sp,-32
 201d044:	dfc00715 	stw	ra,28(sp)
 201d048:	df000615 	stw	fp,24(sp)
 201d04c:	df000604 	addi	fp,sp,24
 201d050:	e13ffc15 	stw	r4,-16(fp)
 201d054:	e17ffd15 	stw	r5,-12(fp)
 201d058:	e1bffe15 	stw	r6,-8(fp)
 201d05c:	e1ffff15 	stw	r7,-4(fp)
 201d060:	e0bfff17 	ldw	r2,-4(fp)
 201d064:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201d068:	d0a74c17 	ldw	r2,-25296(gp)
 201d06c:	1000021e 	bne	r2,zero,201d078 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 201d070:	e0bffb17 	ldw	r2,-20(fp)
 201d074:	d0a74c15 	stw	r2,-25296(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201d078:	e0bffc17 	ldw	r2,-16(fp)
 201d07c:	10800104 	addi	r2,r2,4
 201d080:	00c001c4 	movi	r3,7
 201d084:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201d088:	d8000015 	stw	zero,0(sp)
 201d08c:	e1fffc17 	ldw	r7,-16(fp)
 201d090:	018080b4 	movhi	r6,514
 201d094:	31b3f204 	addi	r6,r6,-12344
 201d098:	e17ffe17 	ldw	r5,-8(fp)
 201d09c:	e13ffd17 	ldw	r4,-12(fp)
 201d0a0:	201d4040 	call	201d404 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 201d0a4:	0001883a 	nop
 201d0a8:	e037883a 	mov	sp,fp
 201d0ac:	dfc00117 	ldw	ra,4(sp)
 201d0b0:	df000017 	ldw	fp,0(sp)
 201d0b4:	dec00204 	addi	sp,sp,8
 201d0b8:	f800283a 	ret

0201d0bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201d0bc:	defff504 	addi	sp,sp,-44
 201d0c0:	df000a15 	stw	fp,40(sp)
 201d0c4:	df000a04 	addi	fp,sp,40
 201d0c8:	e13ffc15 	stw	r4,-16(fp)
 201d0cc:	e17ffd15 	stw	r5,-12(fp)
 201d0d0:	e1bffe15 	stw	r6,-8(fp)
 201d0d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201d0d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201d0dc:	d0a74c17 	ldw	r2,-25296(gp)
  
  if (alt_ticks_per_second ())
 201d0e0:	10003c26 	beq	r2,zero,201d1d4 <alt_alarm_start+0x118>
  {
    if (alarm)
 201d0e4:	e0bffc17 	ldw	r2,-16(fp)
 201d0e8:	10003826 	beq	r2,zero,201d1cc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201d0ec:	e0bffc17 	ldw	r2,-16(fp)
 201d0f0:	e0fffe17 	ldw	r3,-8(fp)
 201d0f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201d0f8:	e0bffc17 	ldw	r2,-16(fp)
 201d0fc:	e0ffff17 	ldw	r3,-4(fp)
 201d100:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d104:	0005303a 	rdctl	r2,status
 201d108:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d10c:	e0fff917 	ldw	r3,-28(fp)
 201d110:	00bfff84 	movi	r2,-2
 201d114:	1884703a 	and	r2,r3,r2
 201d118:	1001703a 	wrctl	status,r2
  
  return context;
 201d11c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 201d120:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201d124:	d0a74d17 	ldw	r2,-25292(gp)
      
      current_nticks = alt_nticks();
 201d128:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201d12c:	e0fffd17 	ldw	r3,-12(fp)
 201d130:	e0bff617 	ldw	r2,-40(fp)
 201d134:	1885883a 	add	r2,r3,r2
 201d138:	10c00044 	addi	r3,r2,1
 201d13c:	e0bffc17 	ldw	r2,-16(fp)
 201d140:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201d144:	e0bffc17 	ldw	r2,-16(fp)
 201d148:	10c00217 	ldw	r3,8(r2)
 201d14c:	e0bff617 	ldw	r2,-40(fp)
 201d150:	1880042e 	bgeu	r3,r2,201d164 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 201d154:	e0bffc17 	ldw	r2,-16(fp)
 201d158:	00c00044 	movi	r3,1
 201d15c:	10c00405 	stb	r3,16(r2)
 201d160:	00000206 	br	201d16c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 201d164:	e0bffc17 	ldw	r2,-16(fp)
 201d168:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201d16c:	e0bffc17 	ldw	r2,-16(fp)
 201d170:	d0e02d04 	addi	r3,gp,-32588
 201d174:	e0fffa15 	stw	r3,-24(fp)
 201d178:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201d17c:	e0bffb17 	ldw	r2,-20(fp)
 201d180:	e0fffa17 	ldw	r3,-24(fp)
 201d184:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201d188:	e0bffa17 	ldw	r2,-24(fp)
 201d18c:	10c00017 	ldw	r3,0(r2)
 201d190:	e0bffb17 	ldw	r2,-20(fp)
 201d194:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201d198:	e0bffa17 	ldw	r2,-24(fp)
 201d19c:	10800017 	ldw	r2,0(r2)
 201d1a0:	e0fffb17 	ldw	r3,-20(fp)
 201d1a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201d1a8:	e0bffa17 	ldw	r2,-24(fp)
 201d1ac:	e0fffb17 	ldw	r3,-20(fp)
 201d1b0:	10c00015 	stw	r3,0(r2)
 201d1b4:	e0bff817 	ldw	r2,-32(fp)
 201d1b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d1bc:	e0bff717 	ldw	r2,-36(fp)
 201d1c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201d1c4:	0005883a 	mov	r2,zero
 201d1c8:	00000306 	br	201d1d8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 201d1cc:	00bffa84 	movi	r2,-22
 201d1d0:	00000106 	br	201d1d8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 201d1d4:	00bfde84 	movi	r2,-134
  }
}
 201d1d8:	e037883a 	mov	sp,fp
 201d1dc:	df000017 	ldw	fp,0(sp)
 201d1e0:	dec00104 	addi	sp,sp,4
 201d1e4:	f800283a 	ret

0201d1e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201d1e8:	defffe04 	addi	sp,sp,-8
 201d1ec:	df000115 	stw	fp,4(sp)
 201d1f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201d1f4:	e03fff15 	stw	zero,-4(fp)
 201d1f8:	00000506 	br	201d210 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 201d1fc:	e0bfff17 	ldw	r2,-4(fp)
 201d200:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201d204:	e0bfff17 	ldw	r2,-4(fp)
 201d208:	10800804 	addi	r2,r2,32
 201d20c:	e0bfff15 	stw	r2,-4(fp)
 201d210:	e0bfff17 	ldw	r2,-4(fp)
 201d214:	10820030 	cmpltui	r2,r2,2048
 201d218:	103ff81e 	bne	r2,zero,201d1fc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201d21c:	0001883a 	nop
 201d220:	e037883a 	mov	sp,fp
 201d224:	df000017 	ldw	fp,0(sp)
 201d228:	dec00104 	addi	sp,sp,4
 201d22c:	f800283a 	ret

0201d230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201d230:	defffe04 	addi	sp,sp,-8
 201d234:	dfc00115 	stw	ra,4(sp)
 201d238:	df000015 	stw	fp,0(sp)
 201d23c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201d240:	d0a00b17 	ldw	r2,-32724(gp)
 201d244:	10000326 	beq	r2,zero,201d254 <alt_get_errno+0x24>
 201d248:	d0a00b17 	ldw	r2,-32724(gp)
 201d24c:	103ee83a 	callr	r2
 201d250:	00000106 	br	201d258 <alt_get_errno+0x28>
 201d254:	d0a72e04 	addi	r2,gp,-25416
}
 201d258:	e037883a 	mov	sp,fp
 201d25c:	dfc00117 	ldw	ra,4(sp)
 201d260:	df000017 	ldw	fp,0(sp)
 201d264:	dec00204 	addi	sp,sp,8
 201d268:	f800283a 	ret

0201d26c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201d26c:	defffa04 	addi	sp,sp,-24
 201d270:	dfc00515 	stw	ra,20(sp)
 201d274:	df000415 	stw	fp,16(sp)
 201d278:	df000404 	addi	fp,sp,16
 201d27c:	e13ffe15 	stw	r4,-8(fp)
 201d280:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201d284:	e0bffe17 	ldw	r2,-8(fp)
 201d288:	10000326 	beq	r2,zero,201d298 <alt_dev_llist_insert+0x2c>
 201d28c:	e0bffe17 	ldw	r2,-8(fp)
 201d290:	10800217 	ldw	r2,8(r2)
 201d294:	1000061e 	bne	r2,zero,201d2b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201d298:	201d2300 	call	201d230 <alt_get_errno>
 201d29c:	1007883a 	mov	r3,r2
 201d2a0:	00800584 	movi	r2,22
 201d2a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201d2a8:	00bffa84 	movi	r2,-22
 201d2ac:	00001306 	br	201d2fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201d2b0:	e0bffe17 	ldw	r2,-8(fp)
 201d2b4:	e0ffff17 	ldw	r3,-4(fp)
 201d2b8:	e0fffc15 	stw	r3,-16(fp)
 201d2bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201d2c0:	e0bffd17 	ldw	r2,-12(fp)
 201d2c4:	e0fffc17 	ldw	r3,-16(fp)
 201d2c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201d2cc:	e0bffc17 	ldw	r2,-16(fp)
 201d2d0:	10c00017 	ldw	r3,0(r2)
 201d2d4:	e0bffd17 	ldw	r2,-12(fp)
 201d2d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201d2dc:	e0bffc17 	ldw	r2,-16(fp)
 201d2e0:	10800017 	ldw	r2,0(r2)
 201d2e4:	e0fffd17 	ldw	r3,-12(fp)
 201d2e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201d2ec:	e0bffc17 	ldw	r2,-16(fp)
 201d2f0:	e0fffd17 	ldw	r3,-12(fp)
 201d2f4:	10c00015 	stw	r3,0(r2)

  return 0;  
 201d2f8:	0005883a 	mov	r2,zero
}
 201d2fc:	e037883a 	mov	sp,fp
 201d300:	dfc00117 	ldw	ra,4(sp)
 201d304:	df000017 	ldw	fp,0(sp)
 201d308:	dec00204 	addi	sp,sp,8
 201d30c:	f800283a 	ret

0201d310 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201d310:	defffd04 	addi	sp,sp,-12
 201d314:	dfc00215 	stw	ra,8(sp)
 201d318:	df000115 	stw	fp,4(sp)
 201d31c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d320:	008080b4 	movhi	r2,514
 201d324:	10ba0f04 	addi	r2,r2,-6084
 201d328:	e0bfff15 	stw	r2,-4(fp)
 201d32c:	00000606 	br	201d348 <_do_ctors+0x38>
        (*ctor) (); 
 201d330:	e0bfff17 	ldw	r2,-4(fp)
 201d334:	10800017 	ldw	r2,0(r2)
 201d338:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d33c:	e0bfff17 	ldw	r2,-4(fp)
 201d340:	10bfff04 	addi	r2,r2,-4
 201d344:	e0bfff15 	stw	r2,-4(fp)
 201d348:	e0ffff17 	ldw	r3,-4(fp)
 201d34c:	008080b4 	movhi	r2,514
 201d350:	10ba1004 	addi	r2,r2,-6080
 201d354:	18bff62e 	bgeu	r3,r2,201d330 <_do_ctors+0x20>
        (*ctor) (); 
}
 201d358:	0001883a 	nop
 201d35c:	e037883a 	mov	sp,fp
 201d360:	dfc00117 	ldw	ra,4(sp)
 201d364:	df000017 	ldw	fp,0(sp)
 201d368:	dec00204 	addi	sp,sp,8
 201d36c:	f800283a 	ret

0201d370 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201d370:	defffd04 	addi	sp,sp,-12
 201d374:	dfc00215 	stw	ra,8(sp)
 201d378:	df000115 	stw	fp,4(sp)
 201d37c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d380:	008080b4 	movhi	r2,514
 201d384:	10ba0f04 	addi	r2,r2,-6084
 201d388:	e0bfff15 	stw	r2,-4(fp)
 201d38c:	00000606 	br	201d3a8 <_do_dtors+0x38>
        (*dtor) (); 
 201d390:	e0bfff17 	ldw	r2,-4(fp)
 201d394:	10800017 	ldw	r2,0(r2)
 201d398:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d39c:	e0bfff17 	ldw	r2,-4(fp)
 201d3a0:	10bfff04 	addi	r2,r2,-4
 201d3a4:	e0bfff15 	stw	r2,-4(fp)
 201d3a8:	e0ffff17 	ldw	r3,-4(fp)
 201d3ac:	008080b4 	movhi	r2,514
 201d3b0:	10ba1004 	addi	r2,r2,-6080
 201d3b4:	18bff62e 	bgeu	r3,r2,201d390 <_do_dtors+0x20>
        (*dtor) (); 
}
 201d3b8:	0001883a 	nop
 201d3bc:	e037883a 	mov	sp,fp
 201d3c0:	dfc00117 	ldw	ra,4(sp)
 201d3c4:	df000017 	ldw	fp,0(sp)
 201d3c8:	dec00204 	addi	sp,sp,8
 201d3cc:	f800283a 	ret

0201d3d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201d3d0:	defffe04 	addi	sp,sp,-8
 201d3d4:	dfc00115 	stw	ra,4(sp)
 201d3d8:	df000015 	stw	fp,0(sp)
 201d3dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 201d3e0:	01440004 	movi	r5,4096
 201d3e4:	0009883a 	mov	r4,zero
 201d3e8:	201e1cc0 	call	201e1cc <alt_icache_flush>
#endif
}
 201d3ec:	0001883a 	nop
 201d3f0:	e037883a 	mov	sp,fp
 201d3f4:	dfc00117 	ldw	ra,4(sp)
 201d3f8:	df000017 	ldw	fp,0(sp)
 201d3fc:	dec00204 	addi	sp,sp,8
 201d400:	f800283a 	ret

0201d404 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d404:	defff904 	addi	sp,sp,-28
 201d408:	dfc00615 	stw	ra,24(sp)
 201d40c:	df000515 	stw	fp,20(sp)
 201d410:	df000504 	addi	fp,sp,20
 201d414:	e13ffc15 	stw	r4,-16(fp)
 201d418:	e17ffd15 	stw	r5,-12(fp)
 201d41c:	e1bffe15 	stw	r6,-8(fp)
 201d420:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201d424:	e0800217 	ldw	r2,8(fp)
 201d428:	d8800015 	stw	r2,0(sp)
 201d42c:	e1ffff17 	ldw	r7,-4(fp)
 201d430:	e1bffe17 	ldw	r6,-8(fp)
 201d434:	e17ffd17 	ldw	r5,-12(fp)
 201d438:	e13ffc17 	ldw	r4,-16(fp)
 201d43c:	201d5b40 	call	201d5b4 <alt_iic_isr_register>
}  
 201d440:	e037883a 	mov	sp,fp
 201d444:	dfc00117 	ldw	ra,4(sp)
 201d448:	df000017 	ldw	fp,0(sp)
 201d44c:	dec00204 	addi	sp,sp,8
 201d450:	f800283a 	ret

0201d454 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201d454:	defff904 	addi	sp,sp,-28
 201d458:	df000615 	stw	fp,24(sp)
 201d45c:	df000604 	addi	fp,sp,24
 201d460:	e13ffe15 	stw	r4,-8(fp)
 201d464:	e17fff15 	stw	r5,-4(fp)
 201d468:	e0bfff17 	ldw	r2,-4(fp)
 201d46c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d470:	0005303a 	rdctl	r2,status
 201d474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d478:	e0fffb17 	ldw	r3,-20(fp)
 201d47c:	00bfff84 	movi	r2,-2
 201d480:	1884703a 	and	r2,r3,r2
 201d484:	1001703a 	wrctl	status,r2
  
  return context;
 201d488:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d48c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201d490:	00c00044 	movi	r3,1
 201d494:	e0bffa17 	ldw	r2,-24(fp)
 201d498:	1884983a 	sll	r2,r3,r2
 201d49c:	1007883a 	mov	r3,r2
 201d4a0:	d0a74b17 	ldw	r2,-25300(gp)
 201d4a4:	1884b03a 	or	r2,r3,r2
 201d4a8:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d4ac:	d0a74b17 	ldw	r2,-25300(gp)
 201d4b0:	100170fa 	wrctl	ienable,r2
 201d4b4:	e0bffc17 	ldw	r2,-16(fp)
 201d4b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d4bc:	e0bffd17 	ldw	r2,-12(fp)
 201d4c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d4c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201d4c8:	0001883a 	nop
}
 201d4cc:	e037883a 	mov	sp,fp
 201d4d0:	df000017 	ldw	fp,0(sp)
 201d4d4:	dec00104 	addi	sp,sp,4
 201d4d8:	f800283a 	ret

0201d4dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201d4dc:	defff904 	addi	sp,sp,-28
 201d4e0:	df000615 	stw	fp,24(sp)
 201d4e4:	df000604 	addi	fp,sp,24
 201d4e8:	e13ffe15 	stw	r4,-8(fp)
 201d4ec:	e17fff15 	stw	r5,-4(fp)
 201d4f0:	e0bfff17 	ldw	r2,-4(fp)
 201d4f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d4f8:	0005303a 	rdctl	r2,status
 201d4fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d500:	e0fffb17 	ldw	r3,-20(fp)
 201d504:	00bfff84 	movi	r2,-2
 201d508:	1884703a 	and	r2,r3,r2
 201d50c:	1001703a 	wrctl	status,r2
  
  return context;
 201d510:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d514:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201d518:	00c00044 	movi	r3,1
 201d51c:	e0bffa17 	ldw	r2,-24(fp)
 201d520:	1884983a 	sll	r2,r3,r2
 201d524:	0084303a 	nor	r2,zero,r2
 201d528:	1007883a 	mov	r3,r2
 201d52c:	d0a74b17 	ldw	r2,-25300(gp)
 201d530:	1884703a 	and	r2,r3,r2
 201d534:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d538:	d0a74b17 	ldw	r2,-25300(gp)
 201d53c:	100170fa 	wrctl	ienable,r2
 201d540:	e0bffc17 	ldw	r2,-16(fp)
 201d544:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d548:	e0bffd17 	ldw	r2,-12(fp)
 201d54c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d550:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201d554:	0001883a 	nop
}
 201d558:	e037883a 	mov	sp,fp
 201d55c:	df000017 	ldw	fp,0(sp)
 201d560:	dec00104 	addi	sp,sp,4
 201d564:	f800283a 	ret

0201d568 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201d568:	defffc04 	addi	sp,sp,-16
 201d56c:	df000315 	stw	fp,12(sp)
 201d570:	df000304 	addi	fp,sp,12
 201d574:	e13ffe15 	stw	r4,-8(fp)
 201d578:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201d57c:	000530fa 	rdctl	r2,ienable
 201d580:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201d584:	00c00044 	movi	r3,1
 201d588:	e0bfff17 	ldw	r2,-4(fp)
 201d58c:	1884983a 	sll	r2,r3,r2
 201d590:	1007883a 	mov	r3,r2
 201d594:	e0bffd17 	ldw	r2,-12(fp)
 201d598:	1884703a 	and	r2,r3,r2
 201d59c:	1004c03a 	cmpne	r2,r2,zero
 201d5a0:	10803fcc 	andi	r2,r2,255
}
 201d5a4:	e037883a 	mov	sp,fp
 201d5a8:	df000017 	ldw	fp,0(sp)
 201d5ac:	dec00104 	addi	sp,sp,4
 201d5b0:	f800283a 	ret

0201d5b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d5b4:	defff504 	addi	sp,sp,-44
 201d5b8:	dfc00a15 	stw	ra,40(sp)
 201d5bc:	df000915 	stw	fp,36(sp)
 201d5c0:	df000904 	addi	fp,sp,36
 201d5c4:	e13ffc15 	stw	r4,-16(fp)
 201d5c8:	e17ffd15 	stw	r5,-12(fp)
 201d5cc:	e1bffe15 	stw	r6,-8(fp)
 201d5d0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201d5d4:	00bffa84 	movi	r2,-22
 201d5d8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201d5dc:	e0bffd17 	ldw	r2,-12(fp)
 201d5e0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201d5e4:	e0bff817 	ldw	r2,-32(fp)
 201d5e8:	10800808 	cmpgei	r2,r2,32
 201d5ec:	1000271e 	bne	r2,zero,201d68c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d5f0:	0005303a 	rdctl	r2,status
 201d5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d5f8:	e0fffb17 	ldw	r3,-20(fp)
 201d5fc:	00bfff84 	movi	r2,-2
 201d600:	1884703a 	and	r2,r3,r2
 201d604:	1001703a 	wrctl	status,r2
  
  return context;
 201d608:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201d60c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 201d610:	008080f4 	movhi	r2,515
 201d614:	10b63f04 	addi	r2,r2,-9988
 201d618:	e0fff817 	ldw	r3,-32(fp)
 201d61c:	180690fa 	slli	r3,r3,3
 201d620:	10c5883a 	add	r2,r2,r3
 201d624:	e0fffe17 	ldw	r3,-8(fp)
 201d628:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201d62c:	008080f4 	movhi	r2,515
 201d630:	10b63f04 	addi	r2,r2,-9988
 201d634:	e0fff817 	ldw	r3,-32(fp)
 201d638:	180690fa 	slli	r3,r3,3
 201d63c:	10c5883a 	add	r2,r2,r3
 201d640:	10800104 	addi	r2,r2,4
 201d644:	e0ffff17 	ldw	r3,-4(fp)
 201d648:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201d64c:	e0bffe17 	ldw	r2,-8(fp)
 201d650:	10000526 	beq	r2,zero,201d668 <alt_iic_isr_register+0xb4>
 201d654:	e0bff817 	ldw	r2,-32(fp)
 201d658:	100b883a 	mov	r5,r2
 201d65c:	e13ffc17 	ldw	r4,-16(fp)
 201d660:	201d4540 	call	201d454 <alt_ic_irq_enable>
 201d664:	00000406 	br	201d678 <alt_iic_isr_register+0xc4>
 201d668:	e0bff817 	ldw	r2,-32(fp)
 201d66c:	100b883a 	mov	r5,r2
 201d670:	e13ffc17 	ldw	r4,-16(fp)
 201d674:	201d4dc0 	call	201d4dc <alt_ic_irq_disable>
 201d678:	e0bff715 	stw	r2,-36(fp)
 201d67c:	e0bffa17 	ldw	r2,-24(fp)
 201d680:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d684:	e0bff917 	ldw	r2,-28(fp)
 201d688:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201d68c:	e0bff717 	ldw	r2,-36(fp)
}
 201d690:	e037883a 	mov	sp,fp
 201d694:	dfc00117 	ldw	ra,4(sp)
 201d698:	df000017 	ldw	fp,0(sp)
 201d69c:	dec00204 	addi	sp,sp,8
 201d6a0:	f800283a 	ret

0201d6a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201d6a4:	defff904 	addi	sp,sp,-28
 201d6a8:	dfc00615 	stw	ra,24(sp)
 201d6ac:	df000515 	stw	fp,20(sp)
 201d6b0:	df000504 	addi	fp,sp,20
 201d6b4:	e13ffc15 	stw	r4,-16(fp)
 201d6b8:	e17ffd15 	stw	r5,-12(fp)
 201d6bc:	e1bffe15 	stw	r6,-8(fp)
 201d6c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201d6c4:	e1bfff17 	ldw	r6,-4(fp)
 201d6c8:	e17ffe17 	ldw	r5,-8(fp)
 201d6cc:	e13ffd17 	ldw	r4,-12(fp)
 201d6d0:	201d8e40 	call	201d8e4 <open>
 201d6d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201d6d8:	e0bffb17 	ldw	r2,-20(fp)
 201d6dc:	10001c16 	blt	r2,zero,201d750 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 201d6e0:	008080b4 	movhi	r2,514
 201d6e4:	10bde104 	addi	r2,r2,-2172
 201d6e8:	e0fffb17 	ldw	r3,-20(fp)
 201d6ec:	18c00324 	muli	r3,r3,12
 201d6f0:	10c5883a 	add	r2,r2,r3
 201d6f4:	10c00017 	ldw	r3,0(r2)
 201d6f8:	e0bffc17 	ldw	r2,-16(fp)
 201d6fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201d700:	008080b4 	movhi	r2,514
 201d704:	10bde104 	addi	r2,r2,-2172
 201d708:	e0fffb17 	ldw	r3,-20(fp)
 201d70c:	18c00324 	muli	r3,r3,12
 201d710:	10c5883a 	add	r2,r2,r3
 201d714:	10800104 	addi	r2,r2,4
 201d718:	10c00017 	ldw	r3,0(r2)
 201d71c:	e0bffc17 	ldw	r2,-16(fp)
 201d720:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201d724:	008080b4 	movhi	r2,514
 201d728:	10bde104 	addi	r2,r2,-2172
 201d72c:	e0fffb17 	ldw	r3,-20(fp)
 201d730:	18c00324 	muli	r3,r3,12
 201d734:	10c5883a 	add	r2,r2,r3
 201d738:	10800204 	addi	r2,r2,8
 201d73c:	10c00017 	ldw	r3,0(r2)
 201d740:	e0bffc17 	ldw	r2,-16(fp)
 201d744:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201d748:	e13ffb17 	ldw	r4,-20(fp)
 201d74c:	20139ec0 	call	20139ec <alt_release_fd>
  }
} 
 201d750:	0001883a 	nop
 201d754:	e037883a 	mov	sp,fp
 201d758:	dfc00117 	ldw	ra,4(sp)
 201d75c:	df000017 	ldw	fp,0(sp)
 201d760:	dec00204 	addi	sp,sp,8
 201d764:	f800283a 	ret

0201d768 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201d768:	defffb04 	addi	sp,sp,-20
 201d76c:	dfc00415 	stw	ra,16(sp)
 201d770:	df000315 	stw	fp,12(sp)
 201d774:	df000304 	addi	fp,sp,12
 201d778:	e13ffd15 	stw	r4,-12(fp)
 201d77c:	e17ffe15 	stw	r5,-8(fp)
 201d780:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201d784:	01c07fc4 	movi	r7,511
 201d788:	01800044 	movi	r6,1
 201d78c:	e17ffd17 	ldw	r5,-12(fp)
 201d790:	010080b4 	movhi	r4,514
 201d794:	213de404 	addi	r4,r4,-2160
 201d798:	201d6a40 	call	201d6a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201d79c:	01c07fc4 	movi	r7,511
 201d7a0:	000d883a 	mov	r6,zero
 201d7a4:	e17ffe17 	ldw	r5,-8(fp)
 201d7a8:	010080b4 	movhi	r4,514
 201d7ac:	213de104 	addi	r4,r4,-2172
 201d7b0:	201d6a40 	call	201d6a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201d7b4:	01c07fc4 	movi	r7,511
 201d7b8:	01800044 	movi	r6,1
 201d7bc:	e17fff17 	ldw	r5,-4(fp)
 201d7c0:	010080b4 	movhi	r4,514
 201d7c4:	213de704 	addi	r4,r4,-2148
 201d7c8:	201d6a40 	call	201d6a4 <alt_open_fd>
}  
 201d7cc:	0001883a 	nop
 201d7d0:	e037883a 	mov	sp,fp
 201d7d4:	dfc00117 	ldw	ra,4(sp)
 201d7d8:	df000017 	ldw	fp,0(sp)
 201d7dc:	dec00204 	addi	sp,sp,8
 201d7e0:	f800283a 	ret

0201d7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201d7e4:	defffe04 	addi	sp,sp,-8
 201d7e8:	dfc00115 	stw	ra,4(sp)
 201d7ec:	df000015 	stw	fp,0(sp)
 201d7f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201d7f4:	d0a00b17 	ldw	r2,-32724(gp)
 201d7f8:	10000326 	beq	r2,zero,201d808 <alt_get_errno+0x24>
 201d7fc:	d0a00b17 	ldw	r2,-32724(gp)
 201d800:	103ee83a 	callr	r2
 201d804:	00000106 	br	201d80c <alt_get_errno+0x28>
 201d808:	d0a72e04 	addi	r2,gp,-25416
}
 201d80c:	e037883a 	mov	sp,fp
 201d810:	dfc00117 	ldw	ra,4(sp)
 201d814:	df000017 	ldw	fp,0(sp)
 201d818:	dec00204 	addi	sp,sp,8
 201d81c:	f800283a 	ret

0201d820 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201d820:	defffd04 	addi	sp,sp,-12
 201d824:	df000215 	stw	fp,8(sp)
 201d828:	df000204 	addi	fp,sp,8
 201d82c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201d830:	e0bfff17 	ldw	r2,-4(fp)
 201d834:	10800217 	ldw	r2,8(r2)
 201d838:	10d00034 	orhi	r3,r2,16384
 201d83c:	e0bfff17 	ldw	r2,-4(fp)
 201d840:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d844:	e03ffe15 	stw	zero,-8(fp)
 201d848:	00001d06 	br	201d8c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d84c:	008080b4 	movhi	r2,514
 201d850:	10bde104 	addi	r2,r2,-2172
 201d854:	e0fffe17 	ldw	r3,-8(fp)
 201d858:	18c00324 	muli	r3,r3,12
 201d85c:	10c5883a 	add	r2,r2,r3
 201d860:	10c00017 	ldw	r3,0(r2)
 201d864:	e0bfff17 	ldw	r2,-4(fp)
 201d868:	10800017 	ldw	r2,0(r2)
 201d86c:	1880111e 	bne	r3,r2,201d8b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d870:	008080b4 	movhi	r2,514
 201d874:	10bde104 	addi	r2,r2,-2172
 201d878:	e0fffe17 	ldw	r3,-8(fp)
 201d87c:	18c00324 	muli	r3,r3,12
 201d880:	10c5883a 	add	r2,r2,r3
 201d884:	10800204 	addi	r2,r2,8
 201d888:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d88c:	1000090e 	bge	r2,zero,201d8b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201d890:	e0bffe17 	ldw	r2,-8(fp)
 201d894:	10c00324 	muli	r3,r2,12
 201d898:	008080b4 	movhi	r2,514
 201d89c:	10bde104 	addi	r2,r2,-2172
 201d8a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d8a4:	e0bfff17 	ldw	r2,-4(fp)
 201d8a8:	18800226 	beq	r3,r2,201d8b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201d8ac:	00bffcc4 	movi	r2,-13
 201d8b0:	00000806 	br	201d8d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d8b4:	e0bffe17 	ldw	r2,-8(fp)
 201d8b8:	10800044 	addi	r2,r2,1
 201d8bc:	e0bffe15 	stw	r2,-8(fp)
 201d8c0:	d0a00a17 	ldw	r2,-32728(gp)
 201d8c4:	1007883a 	mov	r3,r2
 201d8c8:	e0bffe17 	ldw	r2,-8(fp)
 201d8cc:	18bfdf2e 	bgeu	r3,r2,201d84c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201d8d0:	0005883a 	mov	r2,zero
}
 201d8d4:	e037883a 	mov	sp,fp
 201d8d8:	df000017 	ldw	fp,0(sp)
 201d8dc:	dec00104 	addi	sp,sp,4
 201d8e0:	f800283a 	ret

0201d8e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201d8e4:	defff604 	addi	sp,sp,-40
 201d8e8:	dfc00915 	stw	ra,36(sp)
 201d8ec:	df000815 	stw	fp,32(sp)
 201d8f0:	df000804 	addi	fp,sp,32
 201d8f4:	e13ffd15 	stw	r4,-12(fp)
 201d8f8:	e17ffe15 	stw	r5,-8(fp)
 201d8fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201d900:	00bfffc4 	movi	r2,-1
 201d904:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201d908:	00bffb44 	movi	r2,-19
 201d90c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201d910:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201d914:	d1600804 	addi	r5,gp,-32736
 201d918:	e13ffd17 	ldw	r4,-12(fp)
 201d91c:	201df580 	call	201df58 <alt_find_dev>
 201d920:	e0bff815 	stw	r2,-32(fp)
 201d924:	e0bff817 	ldw	r2,-32(fp)
 201d928:	1000051e 	bne	r2,zero,201d940 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201d92c:	e13ffd17 	ldw	r4,-12(fp)
 201d930:	201dfe80 	call	201dfe8 <alt_find_file>
 201d934:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201d938:	00800044 	movi	r2,1
 201d93c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201d940:	e0bff817 	ldw	r2,-32(fp)
 201d944:	10002926 	beq	r2,zero,201d9ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201d948:	e13ff817 	ldw	r4,-32(fp)
 201d94c:	201e0f00 	call	201e0f0 <alt_get_fd>
 201d950:	e0bff915 	stw	r2,-28(fp)
 201d954:	e0bff917 	ldw	r2,-28(fp)
 201d958:	1000030e 	bge	r2,zero,201d968 <open+0x84>
    {
      status = index;
 201d95c:	e0bff917 	ldw	r2,-28(fp)
 201d960:	e0bffa15 	stw	r2,-24(fp)
 201d964:	00002306 	br	201d9f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 201d968:	e0bff917 	ldw	r2,-28(fp)
 201d96c:	10c00324 	muli	r3,r2,12
 201d970:	008080b4 	movhi	r2,514
 201d974:	10bde104 	addi	r2,r2,-2172
 201d978:	1885883a 	add	r2,r3,r2
 201d97c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201d980:	e0fffe17 	ldw	r3,-8(fp)
 201d984:	00900034 	movhi	r2,16384
 201d988:	10bfffc4 	addi	r2,r2,-1
 201d98c:	1886703a 	and	r3,r3,r2
 201d990:	e0bffc17 	ldw	r2,-16(fp)
 201d994:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201d998:	e0bffb17 	ldw	r2,-20(fp)
 201d99c:	1000051e 	bne	r2,zero,201d9b4 <open+0xd0>
 201d9a0:	e13ffc17 	ldw	r4,-16(fp)
 201d9a4:	201d8200 	call	201d820 <alt_file_locked>
 201d9a8:	e0bffa15 	stw	r2,-24(fp)
 201d9ac:	e0bffa17 	ldw	r2,-24(fp)
 201d9b0:	10001016 	blt	r2,zero,201d9f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201d9b4:	e0bff817 	ldw	r2,-32(fp)
 201d9b8:	10800317 	ldw	r2,12(r2)
 201d9bc:	10000826 	beq	r2,zero,201d9e0 <open+0xfc>
 201d9c0:	e0bff817 	ldw	r2,-32(fp)
 201d9c4:	10800317 	ldw	r2,12(r2)
 201d9c8:	e1ffff17 	ldw	r7,-4(fp)
 201d9cc:	e1bffe17 	ldw	r6,-8(fp)
 201d9d0:	e17ffd17 	ldw	r5,-12(fp)
 201d9d4:	e13ffc17 	ldw	r4,-16(fp)
 201d9d8:	103ee83a 	callr	r2
 201d9dc:	00000106 	br	201d9e4 <open+0x100>
 201d9e0:	0005883a 	mov	r2,zero
 201d9e4:	e0bffa15 	stw	r2,-24(fp)
 201d9e8:	00000206 	br	201d9f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201d9ec:	00bffb44 	movi	r2,-19
 201d9f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201d9f4:	e0bffa17 	ldw	r2,-24(fp)
 201d9f8:	1000090e 	bge	r2,zero,201da20 <open+0x13c>
  {
    alt_release_fd (index);  
 201d9fc:	e13ff917 	ldw	r4,-28(fp)
 201da00:	20139ec0 	call	20139ec <alt_release_fd>
    ALT_ERRNO = -status;
 201da04:	201d7e40 	call	201d7e4 <alt_get_errno>
 201da08:	1007883a 	mov	r3,r2
 201da0c:	e0bffa17 	ldw	r2,-24(fp)
 201da10:	0085c83a 	sub	r2,zero,r2
 201da14:	18800015 	stw	r2,0(r3)
    return -1;
 201da18:	00bfffc4 	movi	r2,-1
 201da1c:	00000106 	br	201da24 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 201da20:	e0bff917 	ldw	r2,-28(fp)
}
 201da24:	e037883a 	mov	sp,fp
 201da28:	dfc00117 	ldw	ra,4(sp)
 201da2c:	df000017 	ldw	fp,0(sp)
 201da30:	dec00204 	addi	sp,sp,8
 201da34:	f800283a 	ret

0201da38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201da38:	defffa04 	addi	sp,sp,-24
 201da3c:	df000515 	stw	fp,20(sp)
 201da40:	df000504 	addi	fp,sp,20
 201da44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201da48:	0005303a 	rdctl	r2,status
 201da4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201da50:	e0fffc17 	ldw	r3,-16(fp)
 201da54:	00bfff84 	movi	r2,-2
 201da58:	1884703a 	and	r2,r3,r2
 201da5c:	1001703a 	wrctl	status,r2
  
  return context;
 201da60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201da64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201da68:	e0bfff17 	ldw	r2,-4(fp)
 201da6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201da70:	e0bffd17 	ldw	r2,-12(fp)
 201da74:	10800017 	ldw	r2,0(r2)
 201da78:	e0fffd17 	ldw	r3,-12(fp)
 201da7c:	18c00117 	ldw	r3,4(r3)
 201da80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 201da84:	e0bffd17 	ldw	r2,-12(fp)
 201da88:	10800117 	ldw	r2,4(r2)
 201da8c:	e0fffd17 	ldw	r3,-12(fp)
 201da90:	18c00017 	ldw	r3,0(r3)
 201da94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201da98:	e0bffd17 	ldw	r2,-12(fp)
 201da9c:	e0fffd17 	ldw	r3,-12(fp)
 201daa0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 201daa4:	e0bffd17 	ldw	r2,-12(fp)
 201daa8:	e0fffd17 	ldw	r3,-12(fp)
 201daac:	10c00015 	stw	r3,0(r2)
 201dab0:	e0bffb17 	ldw	r2,-20(fp)
 201dab4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dab8:	e0bffe17 	ldw	r2,-8(fp)
 201dabc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201dac0:	0001883a 	nop
 201dac4:	e037883a 	mov	sp,fp
 201dac8:	df000017 	ldw	fp,0(sp)
 201dacc:	dec00104 	addi	sp,sp,4
 201dad0:	f800283a 	ret

0201dad4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201dad4:	defffb04 	addi	sp,sp,-20
 201dad8:	dfc00415 	stw	ra,16(sp)
 201dadc:	df000315 	stw	fp,12(sp)
 201dae0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201dae4:	d0a02d17 	ldw	r2,-32588(gp)
 201dae8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201daec:	d0a74d17 	ldw	r2,-25292(gp)
 201daf0:	10800044 	addi	r2,r2,1
 201daf4:	d0a74d15 	stw	r2,-25292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201daf8:	00002e06 	br	201dbb4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201dafc:	e0bffd17 	ldw	r2,-12(fp)
 201db00:	10800017 	ldw	r2,0(r2)
 201db04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201db08:	e0bffd17 	ldw	r2,-12(fp)
 201db0c:	10800403 	ldbu	r2,16(r2)
 201db10:	10803fcc 	andi	r2,r2,255
 201db14:	10000426 	beq	r2,zero,201db28 <alt_tick+0x54>
 201db18:	d0a74d17 	ldw	r2,-25292(gp)
 201db1c:	1000021e 	bne	r2,zero,201db28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201db20:	e0bffd17 	ldw	r2,-12(fp)
 201db24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201db28:	e0bffd17 	ldw	r2,-12(fp)
 201db2c:	10800217 	ldw	r2,8(r2)
 201db30:	d0e74d17 	ldw	r3,-25292(gp)
 201db34:	18801d36 	bltu	r3,r2,201dbac <alt_tick+0xd8>
 201db38:	e0bffd17 	ldw	r2,-12(fp)
 201db3c:	10800403 	ldbu	r2,16(r2)
 201db40:	10803fcc 	andi	r2,r2,255
 201db44:	1000191e 	bne	r2,zero,201dbac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201db48:	e0bffd17 	ldw	r2,-12(fp)
 201db4c:	10800317 	ldw	r2,12(r2)
 201db50:	e0fffd17 	ldw	r3,-12(fp)
 201db54:	18c00517 	ldw	r3,20(r3)
 201db58:	1809883a 	mov	r4,r3
 201db5c:	103ee83a 	callr	r2
 201db60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201db64:	e0bfff17 	ldw	r2,-4(fp)
 201db68:	1000031e 	bne	r2,zero,201db78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 201db6c:	e13ffd17 	ldw	r4,-12(fp)
 201db70:	201da380 	call	201da38 <alt_alarm_stop>
 201db74:	00000d06 	br	201dbac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201db78:	e0bffd17 	ldw	r2,-12(fp)
 201db7c:	10c00217 	ldw	r3,8(r2)
 201db80:	e0bfff17 	ldw	r2,-4(fp)
 201db84:	1887883a 	add	r3,r3,r2
 201db88:	e0bffd17 	ldw	r2,-12(fp)
 201db8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201db90:	e0bffd17 	ldw	r2,-12(fp)
 201db94:	10c00217 	ldw	r3,8(r2)
 201db98:	d0a74d17 	ldw	r2,-25292(gp)
 201db9c:	1880032e 	bgeu	r3,r2,201dbac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201dba0:	e0bffd17 	ldw	r2,-12(fp)
 201dba4:	00c00044 	movi	r3,1
 201dba8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201dbac:	e0bffe17 	ldw	r2,-8(fp)
 201dbb0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201dbb4:	e0fffd17 	ldw	r3,-12(fp)
 201dbb8:	d0a02d04 	addi	r2,gp,-32588
 201dbbc:	18bfcf1e 	bne	r3,r2,201dafc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 201dbc0:	2014bd80 	call	2014bd8 <OSTimeTick>
}
 201dbc4:	0001883a 	nop
 201dbc8:	e037883a 	mov	sp,fp
 201dbcc:	dfc00117 	ldw	ra,4(sp)
 201dbd0:	df000017 	ldw	fp,0(sp)
 201dbd4:	dec00204 	addi	sp,sp,8
 201dbd8:	f800283a 	ret

0201dbdc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201dbdc:	deffff04 	addi	sp,sp,-4
 201dbe0:	df000015 	stw	fp,0(sp)
 201dbe4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201dbe8:	000170fa 	wrctl	ienable,zero
}
 201dbec:	0001883a 	nop
 201dbf0:	e037883a 	mov	sp,fp
 201dbf4:	df000017 	ldw	fp,0(sp)
 201dbf8:	dec00104 	addi	sp,sp,4
 201dbfc:	f800283a 	ret

0201dc00 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201dc00:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201dc04:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201dc08:	d1274617 	ldw	r4,-25320(gp)

      stw ra,  0(sp)
 201dc0c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201dc10:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201dc14:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201dc18:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201dc1c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201dc20:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201dc24:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201dc28:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201dc2c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201dc30:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201dc34:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201dc38:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201dc3c:	201de740 	call	201de74 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201dc40:	d1274117 	ldw	r4,-25340(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201dc44:	d1673907 	ldb	r5,-25372(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201dc48:	d1274615 	stw	r4,-25320(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201dc4c:	d1673945 	stb	r5,-25371(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201dc50:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201dc54:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201dc58:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201dc5c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201dc60:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201dc64:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201dc68:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201dc6c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201dc70:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201dc74:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201dc78:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201dc7c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201dc80:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201dc84:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201dc88:	f800283a 	ret

0201dc8c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201dc8c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201dc90:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201dc94:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201dc98:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201dc9c:	201de740 	call	201de74 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201dca0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201dca4:	d4a73745 	stb	r18,-25379(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201dca8:	003fe506 	br	201dc40 <OSCtxSw+0x40>

0201dcac <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201dcac:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201dcb0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201dcb4:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201dcb8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201dcbc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201dcc0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201dcc4:	dec00204 	addi	sp,sp,8

      callr r2
 201dcc8:	103ee83a 	callr	r2

      nop
 201dccc:	0001883a 	nop

0201dcd0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201dcd0:	defff704 	addi	sp,sp,-36
 201dcd4:	dfc00815 	stw	ra,32(sp)
 201dcd8:	df000715 	stw	fp,28(sp)
 201dcdc:	df000704 	addi	fp,sp,28
 201dce0:	e13ffc15 	stw	r4,-16(fp)
 201dce4:	e17ffd15 	stw	r5,-12(fp)
 201dce8:	e1bffe15 	stw	r6,-8(fp)
 201dcec:	3805883a 	mov	r2,r7
 201dcf0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201dcf4:	e0fffe17 	ldw	r3,-8(fp)
 201dcf8:	00bfff04 	movi	r2,-4
 201dcfc:	1884703a 	and	r2,r3,r2
 201dd00:	10bef704 	addi	r2,r2,-1060
 201dd04:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201dd08:	01810904 	movi	r6,1060
 201dd0c:	000b883a 	mov	r5,zero
 201dd10:	e13ff917 	ldw	r4,-28(fp)
 201dd14:	2004de40 	call	2004de4 <memset>
 201dd18:	e0bff917 	ldw	r2,-28(fp)
 201dd1c:	10c0bb04 	addi	r3,r2,748
 201dd20:	e0bff917 	ldw	r2,-28(fp)
 201dd24:	10c00115 	stw	r3,4(r2)
 201dd28:	e0bff917 	ldw	r2,-28(fp)
 201dd2c:	10c0d504 	addi	r3,r2,852
 201dd30:	e0bff917 	ldw	r2,-28(fp)
 201dd34:	10c00215 	stw	r3,8(r2)
 201dd38:	e0bff917 	ldw	r2,-28(fp)
 201dd3c:	10c0ef04 	addi	r3,r2,956
 201dd40:	e0bff917 	ldw	r2,-28(fp)
 201dd44:	10c00315 	stw	r3,12(r2)
 201dd48:	e0fff917 	ldw	r3,-28(fp)
 201dd4c:	008080b4 	movhi	r2,514
 201dd50:	10bba104 	addi	r2,r2,-4476
 201dd54:	18800d15 	stw	r2,52(r3)
 201dd58:	e0bff917 	ldw	r2,-28(fp)
 201dd5c:	00c00044 	movi	r3,1
 201dd60:	10c02915 	stw	r3,164(r2)
 201dd64:	10002a15 	stw	zero,168(r2)
 201dd68:	e0bff917 	ldw	r2,-28(fp)
 201dd6c:	00ccc384 	movi	r3,13070
 201dd70:	10c02b0d 	sth	r3,172(r2)
 201dd74:	e0bff917 	ldw	r2,-28(fp)
 201dd78:	00eaf344 	movi	r3,-21555
 201dd7c:	10c02b8d 	sth	r3,174(r2)
 201dd80:	e0bff917 	ldw	r2,-28(fp)
 201dd84:	00c48d04 	movi	r3,4660
 201dd88:	10c02c0d 	sth	r3,176(r2)
 201dd8c:	e0bff917 	ldw	r2,-28(fp)
 201dd90:	00f99b44 	movi	r3,-6547
 201dd94:	10c02c8d 	sth	r3,178(r2)
 201dd98:	e0bff917 	ldw	r2,-28(fp)
 201dd9c:	00f7bb04 	movi	r3,-8468
 201dda0:	10c02d0d 	sth	r3,180(r2)
 201dda4:	e0bff917 	ldw	r2,-28(fp)
 201dda8:	00c00144 	movi	r3,5
 201ddac:	10c02d8d 	sth	r3,182(r2)
 201ddb0:	e0bff917 	ldw	r2,-28(fp)
 201ddb4:	00c002c4 	movi	r3,11
 201ddb8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201ddbc:	e0bff917 	ldw	r2,-28(fp)
 201ddc0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201ddc4:	e0bffa17 	ldw	r2,-24(fp)
 201ddc8:	10bff304 	addi	r2,r2,-52
 201ddcc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201ddd0:	e0bffb17 	ldw	r2,-20(fp)
 201ddd4:	10800c04 	addi	r2,r2,48
 201ddd8:	e0fffc17 	ldw	r3,-16(fp)
 201dddc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201dde0:	e0bffb17 	ldw	r2,-20(fp)
 201dde4:	10800b04 	addi	r2,r2,44
 201dde8:	e0fffd17 	ldw	r3,-12(fp)
 201ddec:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201ddf0:	e0bffb17 	ldw	r2,-20(fp)
 201ddf4:	10800a04 	addi	r2,r2,40
 201ddf8:	e0fff917 	ldw	r3,-28(fp)
 201ddfc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201de00:	008080b4 	movhi	r2,514
 201de04:	10b72b04 	addi	r2,r2,-9044
 201de08:	10c00104 	addi	r3,r2,4
 201de0c:	e0bffb17 	ldw	r2,-20(fp)
 201de10:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201de14:	e0bffb17 	ldw	r2,-20(fp)
}
 201de18:	e037883a 	mov	sp,fp
 201de1c:	dfc00117 	ldw	ra,4(sp)
 201de20:	df000017 	ldw	fp,0(sp)
 201de24:	dec00204 	addi	sp,sp,8
 201de28:	f800283a 	ret

0201de2c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201de2c:	defffe04 	addi	sp,sp,-8
 201de30:	df000115 	stw	fp,4(sp)
 201de34:	df000104 	addi	fp,sp,4
 201de38:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201de3c:	0001883a 	nop
 201de40:	e037883a 	mov	sp,fp
 201de44:	df000017 	ldw	fp,0(sp)
 201de48:	dec00104 	addi	sp,sp,4
 201de4c:	f800283a 	ret

0201de50 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201de50:	defffe04 	addi	sp,sp,-8
 201de54:	df000115 	stw	fp,4(sp)
 201de58:	df000104 	addi	fp,sp,4
 201de5c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201de60:	0001883a 	nop
 201de64:	e037883a 	mov	sp,fp
 201de68:	df000017 	ldw	fp,0(sp)
 201de6c:	dec00104 	addi	sp,sp,4
 201de70:	f800283a 	ret

0201de74 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201de74:	deffff04 	addi	sp,sp,-4
 201de78:	df000015 	stw	fp,0(sp)
 201de7c:	d839883a 	mov	fp,sp
}
 201de80:	0001883a 	nop
 201de84:	e037883a 	mov	sp,fp
 201de88:	df000017 	ldw	fp,0(sp)
 201de8c:	dec00104 	addi	sp,sp,4
 201de90:	f800283a 	ret

0201de94 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201de94:	deffff04 	addi	sp,sp,-4
 201de98:	df000015 	stw	fp,0(sp)
 201de9c:	d839883a 	mov	fp,sp
}
 201dea0:	0001883a 	nop
 201dea4:	e037883a 	mov	sp,fp
 201dea8:	df000017 	ldw	fp,0(sp)
 201deac:	dec00104 	addi	sp,sp,4
 201deb0:	f800283a 	ret

0201deb4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201deb4:	deffff04 	addi	sp,sp,-4
 201deb8:	df000015 	stw	fp,0(sp)
 201debc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201dec0:	0001883a 	nop
 201dec4:	e037883a 	mov	sp,fp
 201dec8:	df000017 	ldw	fp,0(sp)
 201decc:	dec00104 	addi	sp,sp,4
 201ded0:	f800283a 	ret

0201ded4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201ded4:	deffff04 	addi	sp,sp,-4
 201ded8:	df000015 	stw	fp,0(sp)
 201dedc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201dee0:	0001883a 	nop
 201dee4:	e037883a 	mov	sp,fp
 201dee8:	df000017 	ldw	fp,0(sp)
 201deec:	dec00104 	addi	sp,sp,4
 201def0:	f800283a 	ret

0201def4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201def4:	deffff04 	addi	sp,sp,-4
 201def8:	df000015 	stw	fp,0(sp)
 201defc:	d839883a 	mov	fp,sp
}
 201df00:	0001883a 	nop
 201df04:	e037883a 	mov	sp,fp
 201df08:	df000017 	ldw	fp,0(sp)
 201df0c:	dec00104 	addi	sp,sp,4
 201df10:	f800283a 	ret

0201df14 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201df14:	deffff04 	addi	sp,sp,-4
 201df18:	df000015 	stw	fp,0(sp)
 201df1c:	d839883a 	mov	fp,sp
}
 201df20:	0001883a 	nop
 201df24:	e037883a 	mov	sp,fp
 201df28:	df000017 	ldw	fp,0(sp)
 201df2c:	dec00104 	addi	sp,sp,4
 201df30:	f800283a 	ret

0201df34 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201df34:	defffe04 	addi	sp,sp,-8
 201df38:	df000115 	stw	fp,4(sp)
 201df3c:	df000104 	addi	fp,sp,4
 201df40:	e13fff15 	stw	r4,-4(fp)
}
 201df44:	0001883a 	nop
 201df48:	e037883a 	mov	sp,fp
 201df4c:	df000017 	ldw	fp,0(sp)
 201df50:	dec00104 	addi	sp,sp,4
 201df54:	f800283a 	ret

0201df58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201df58:	defffa04 	addi	sp,sp,-24
 201df5c:	dfc00515 	stw	ra,20(sp)
 201df60:	df000415 	stw	fp,16(sp)
 201df64:	df000404 	addi	fp,sp,16
 201df68:	e13ffe15 	stw	r4,-8(fp)
 201df6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201df70:	e0bfff17 	ldw	r2,-4(fp)
 201df74:	10800017 	ldw	r2,0(r2)
 201df78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201df7c:	e13ffe17 	ldw	r4,-8(fp)
 201df80:	20051c40 	call	20051c4 <strlen>
 201df84:	10800044 	addi	r2,r2,1
 201df88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201df8c:	00000d06 	br	201dfc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201df90:	e0bffc17 	ldw	r2,-16(fp)
 201df94:	10800217 	ldw	r2,8(r2)
 201df98:	e0fffd17 	ldw	r3,-12(fp)
 201df9c:	180d883a 	mov	r6,r3
 201dfa0:	e17ffe17 	ldw	r5,-8(fp)
 201dfa4:	1009883a 	mov	r4,r2
 201dfa8:	201e37c0 	call	201e37c <memcmp>
 201dfac:	1000021e 	bne	r2,zero,201dfb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201dfb0:	e0bffc17 	ldw	r2,-16(fp)
 201dfb4:	00000706 	br	201dfd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201dfb8:	e0bffc17 	ldw	r2,-16(fp)
 201dfbc:	10800017 	ldw	r2,0(r2)
 201dfc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201dfc4:	e0fffc17 	ldw	r3,-16(fp)
 201dfc8:	e0bfff17 	ldw	r2,-4(fp)
 201dfcc:	18bff01e 	bne	r3,r2,201df90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201dfd0:	0005883a 	mov	r2,zero
}
 201dfd4:	e037883a 	mov	sp,fp
 201dfd8:	dfc00117 	ldw	ra,4(sp)
 201dfdc:	df000017 	ldw	fp,0(sp)
 201dfe0:	dec00204 	addi	sp,sp,8
 201dfe4:	f800283a 	ret

0201dfe8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201dfe8:	defffb04 	addi	sp,sp,-20
 201dfec:	dfc00415 	stw	ra,16(sp)
 201dff0:	df000315 	stw	fp,12(sp)
 201dff4:	df000304 	addi	fp,sp,12
 201dff8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201dffc:	d0a00617 	ldw	r2,-32744(gp)
 201e000:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201e004:	00003106 	br	201e0cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 201e008:	e0bffd17 	ldw	r2,-12(fp)
 201e00c:	10800217 	ldw	r2,8(r2)
 201e010:	1009883a 	mov	r4,r2
 201e014:	20051c40 	call	20051c4 <strlen>
 201e018:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201e01c:	e0bffd17 	ldw	r2,-12(fp)
 201e020:	10c00217 	ldw	r3,8(r2)
 201e024:	e0bffe17 	ldw	r2,-8(fp)
 201e028:	10bfffc4 	addi	r2,r2,-1
 201e02c:	1885883a 	add	r2,r3,r2
 201e030:	10800003 	ldbu	r2,0(r2)
 201e034:	10803fcc 	andi	r2,r2,255
 201e038:	1080201c 	xori	r2,r2,128
 201e03c:	10bfe004 	addi	r2,r2,-128
 201e040:	10800bd8 	cmpnei	r2,r2,47
 201e044:	1000031e 	bne	r2,zero,201e054 <alt_find_file+0x6c>
    {
      len -= 1;
 201e048:	e0bffe17 	ldw	r2,-8(fp)
 201e04c:	10bfffc4 	addi	r2,r2,-1
 201e050:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201e054:	e0bffe17 	ldw	r2,-8(fp)
 201e058:	e0ffff17 	ldw	r3,-4(fp)
 201e05c:	1885883a 	add	r2,r3,r2
 201e060:	10800003 	ldbu	r2,0(r2)
 201e064:	10803fcc 	andi	r2,r2,255
 201e068:	1080201c 	xori	r2,r2,128
 201e06c:	10bfe004 	addi	r2,r2,-128
 201e070:	10800be0 	cmpeqi	r2,r2,47
 201e074:	1000081e 	bne	r2,zero,201e098 <alt_find_file+0xb0>
 201e078:	e0bffe17 	ldw	r2,-8(fp)
 201e07c:	e0ffff17 	ldw	r3,-4(fp)
 201e080:	1885883a 	add	r2,r3,r2
 201e084:	10800003 	ldbu	r2,0(r2)
 201e088:	10803fcc 	andi	r2,r2,255
 201e08c:	1080201c 	xori	r2,r2,128
 201e090:	10bfe004 	addi	r2,r2,-128
 201e094:	10000a1e 	bne	r2,zero,201e0c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 201e098:	e0bffd17 	ldw	r2,-12(fp)
 201e09c:	10800217 	ldw	r2,8(r2)
 201e0a0:	e0fffe17 	ldw	r3,-8(fp)
 201e0a4:	180d883a 	mov	r6,r3
 201e0a8:	e17fff17 	ldw	r5,-4(fp)
 201e0ac:	1009883a 	mov	r4,r2
 201e0b0:	201e37c0 	call	201e37c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201e0b4:	1000021e 	bne	r2,zero,201e0c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201e0b8:	e0bffd17 	ldw	r2,-12(fp)
 201e0bc:	00000706 	br	201e0dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201e0c0:	e0bffd17 	ldw	r2,-12(fp)
 201e0c4:	10800017 	ldw	r2,0(r2)
 201e0c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201e0cc:	e0fffd17 	ldw	r3,-12(fp)
 201e0d0:	d0a00604 	addi	r2,gp,-32744
 201e0d4:	18bfcc1e 	bne	r3,r2,201e008 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201e0d8:	0005883a 	mov	r2,zero
}
 201e0dc:	e037883a 	mov	sp,fp
 201e0e0:	dfc00117 	ldw	ra,4(sp)
 201e0e4:	df000017 	ldw	fp,0(sp)
 201e0e8:	dec00204 	addi	sp,sp,8
 201e0ec:	f800283a 	ret

0201e0f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201e0f0:	defff904 	addi	sp,sp,-28
 201e0f4:	dfc00615 	stw	ra,24(sp)
 201e0f8:	df000515 	stw	fp,20(sp)
 201e0fc:	df000504 	addi	fp,sp,20
 201e100:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201e104:	00bffa04 	movi	r2,-24
 201e108:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201e10c:	d0a72f17 	ldw	r2,-25412(gp)
 201e110:	e0bffd15 	stw	r2,-12(fp)
 201e114:	e03ffe0d 	sth	zero,-8(fp)
 201e118:	e0bffe0b 	ldhu	r2,-8(fp)
 201e11c:	e0fffe84 	addi	r3,fp,-6
 201e120:	180d883a 	mov	r6,r3
 201e124:	100b883a 	mov	r5,r2
 201e128:	e13ffd17 	ldw	r4,-12(fp)
 201e12c:	2019ee40 	call	2019ee4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201e130:	e03ffb15 	stw	zero,-20(fp)
 201e134:	00001906 	br	201e19c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 201e138:	008080b4 	movhi	r2,514
 201e13c:	10bde104 	addi	r2,r2,-2172
 201e140:	e0fffb17 	ldw	r3,-20(fp)
 201e144:	18c00324 	muli	r3,r3,12
 201e148:	10c5883a 	add	r2,r2,r3
 201e14c:	10800017 	ldw	r2,0(r2)
 201e150:	10000f1e 	bne	r2,zero,201e190 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 201e154:	008080b4 	movhi	r2,514
 201e158:	10bde104 	addi	r2,r2,-2172
 201e15c:	e0fffb17 	ldw	r3,-20(fp)
 201e160:	18c00324 	muli	r3,r3,12
 201e164:	10c5883a 	add	r2,r2,r3
 201e168:	e0ffff17 	ldw	r3,-4(fp)
 201e16c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201e170:	d0e00a17 	ldw	r3,-32728(gp)
 201e174:	e0bffb17 	ldw	r2,-20(fp)
 201e178:	1880020e 	bge	r3,r2,201e184 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 201e17c:	e0bffb17 	ldw	r2,-20(fp)
 201e180:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 201e184:	e0bffb17 	ldw	r2,-20(fp)
 201e188:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 201e18c:	00000606 	br	201e1a8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201e190:	e0bffb17 	ldw	r2,-20(fp)
 201e194:	10800044 	addi	r2,r2,1
 201e198:	e0bffb15 	stw	r2,-20(fp)
 201e19c:	e0bffb17 	ldw	r2,-20(fp)
 201e1a0:	10800810 	cmplti	r2,r2,32
 201e1a4:	103fe41e 	bne	r2,zero,201e138 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201e1a8:	d0a72f17 	ldw	r2,-25412(gp)
 201e1ac:	1009883a 	mov	r4,r2
 201e1b0:	201a25c0 	call	201a25c <OSSemPost>

  return rc;
 201e1b4:	e0bffc17 	ldw	r2,-16(fp)
}
 201e1b8:	e037883a 	mov	sp,fp
 201e1bc:	dfc00117 	ldw	ra,4(sp)
 201e1c0:	df000017 	ldw	fp,0(sp)
 201e1c4:	dec00204 	addi	sp,sp,8
 201e1c8:	f800283a 	ret

0201e1cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 201e1cc:	defffb04 	addi	sp,sp,-20
 201e1d0:	df000415 	stw	fp,16(sp)
 201e1d4:	df000404 	addi	fp,sp,16
 201e1d8:	e13ffe15 	stw	r4,-8(fp)
 201e1dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 201e1e0:	e0bfff17 	ldw	r2,-4(fp)
 201e1e4:	10840070 	cmpltui	r2,r2,4097
 201e1e8:	1000021e 	bne	r2,zero,201e1f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 201e1ec:	00840004 	movi	r2,4096
 201e1f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 201e1f4:	e0fffe17 	ldw	r3,-8(fp)
 201e1f8:	e0bfff17 	ldw	r2,-4(fp)
 201e1fc:	1885883a 	add	r2,r3,r2
 201e200:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201e204:	e0bffe17 	ldw	r2,-8(fp)
 201e208:	e0bffc15 	stw	r2,-16(fp)
 201e20c:	00000506 	br	201e224 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 201e210:	e0bffc17 	ldw	r2,-16(fp)
 201e214:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201e218:	e0bffc17 	ldw	r2,-16(fp)
 201e21c:	10800804 	addi	r2,r2,32
 201e220:	e0bffc15 	stw	r2,-16(fp)
 201e224:	e0fffc17 	ldw	r3,-16(fp)
 201e228:	e0bffd17 	ldw	r2,-12(fp)
 201e22c:	18bff836 	bltu	r3,r2,201e210 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 201e230:	e0bffe17 	ldw	r2,-8(fp)
 201e234:	108007cc 	andi	r2,r2,31
 201e238:	10000226 	beq	r2,zero,201e244 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 201e23c:	e0bffc17 	ldw	r2,-16(fp)
 201e240:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 201e244:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 201e248:	0001883a 	nop
 201e24c:	e037883a 	mov	sp,fp
 201e250:	df000017 	ldw	fp,0(sp)
 201e254:	dec00104 	addi	sp,sp,4
 201e258:	f800283a 	ret

0201e25c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201e25c:	defffe04 	addi	sp,sp,-8
 201e260:	df000115 	stw	fp,4(sp)
 201e264:	df000104 	addi	fp,sp,4
 201e268:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201e26c:	e0bfff17 	ldw	r2,-4(fp)
 201e270:	10bffe84 	addi	r2,r2,-6
 201e274:	10c00428 	cmpgeui	r3,r2,16
 201e278:	18001a1e 	bne	r3,zero,201e2e4 <alt_exception_cause_generated_bad_addr+0x88>
 201e27c:	100690ba 	slli	r3,r2,2
 201e280:	008080b4 	movhi	r2,514
 201e284:	10b8a504 	addi	r2,r2,-7532
 201e288:	1885883a 	add	r2,r3,r2
 201e28c:	10800017 	ldw	r2,0(r2)
 201e290:	1000683a 	jmp	r2
 201e294:	0201e2d4 	movui	r8,1931
 201e298:	0201e2d4 	movui	r8,1931
 201e29c:	0201e2e4 	muli	r8,zero,1931
 201e2a0:	0201e2e4 	muli	r8,zero,1931
 201e2a4:	0201e2e4 	muli	r8,zero,1931
 201e2a8:	0201e2d4 	movui	r8,1931
 201e2ac:	0201e2dc 	xori	r8,zero,1931
 201e2b0:	0201e2e4 	muli	r8,zero,1931
 201e2b4:	0201e2d4 	movui	r8,1931
 201e2b8:	0201e2d4 	movui	r8,1931
 201e2bc:	0201e2e4 	muli	r8,zero,1931
 201e2c0:	0201e2d4 	movui	r8,1931
 201e2c4:	0201e2dc 	xori	r8,zero,1931
 201e2c8:	0201e2e4 	muli	r8,zero,1931
 201e2cc:	0201e2e4 	muli	r8,zero,1931
 201e2d0:	0201e2d4 	movui	r8,1931
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201e2d4:	00800044 	movi	r2,1
 201e2d8:	00000306 	br	201e2e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201e2dc:	0005883a 	mov	r2,zero
 201e2e0:	00000106 	br	201e2e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201e2e4:	0005883a 	mov	r2,zero
  }
}
 201e2e8:	e037883a 	mov	sp,fp
 201e2ec:	df000017 	ldw	fp,0(sp)
 201e2f0:	dec00104 	addi	sp,sp,4
 201e2f4:	f800283a 	ret

0201e2f8 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 201e2f8:	defffd04 	addi	sp,sp,-12
 201e2fc:	dfc00215 	stw	ra,8(sp)
 201e300:	df000115 	stw	fp,4(sp)
 201e304:	df000104 	addi	fp,sp,4
 201e308:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 201e30c:	000f883a 	mov	r7,zero
 201e310:	000d883a 	mov	r6,zero
 201e314:	e17fff17 	ldw	r5,-4(fp)
 201e318:	0009883a 	mov	r4,zero
 201e31c:	201e4b00 	call	201e4b0 <__register_exitproc>
}
 201e320:	e037883a 	mov	sp,fp
 201e324:	dfc00117 	ldw	ra,4(sp)
 201e328:	df000017 	ldw	fp,0(sp)
 201e32c:	dec00204 	addi	sp,sp,8
 201e330:	f800283a 	ret

0201e334 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 201e334:	defffd04 	addi	sp,sp,-12
 201e338:	dfc00215 	stw	ra,8(sp)
 201e33c:	df000115 	stw	fp,4(sp)
 201e340:	df000104 	addi	fp,sp,4
 201e344:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 201e348:	000b883a 	mov	r5,zero
 201e34c:	e13fff17 	ldw	r4,-4(fp)
 201e350:	201e6200 	call	201e620 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 201e354:	d0a00117 	ldw	r2,-32764(gp)
 201e358:	10800f17 	ldw	r2,60(r2)
 201e35c:	10000526 	beq	r2,zero,201e374 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 201e360:	d0a00117 	ldw	r2,-32764(gp)
 201e364:	10800f17 	ldw	r2,60(r2)
 201e368:	d0e00117 	ldw	r3,-32764(gp)
 201e36c:	1809883a 	mov	r4,r3
 201e370:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 201e374:	e13fff17 	ldw	r4,-4(fp)
 201e378:	201e80c0 	call	201e80c <_exit>

0201e37c <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 201e37c:	defff804 	addi	sp,sp,-32
 201e380:	df000715 	stw	fp,28(sp)
 201e384:	df000704 	addi	fp,sp,28
 201e388:	e13ffd15 	stw	r4,-12(fp)
 201e38c:	e17ffe15 	stw	r5,-8(fp)
 201e390:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 201e394:	e0bffd17 	ldw	r2,-12(fp)
 201e398:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 201e39c:	e0bffe17 	ldw	r2,-8(fp)
 201e3a0:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 201e3a4:	e0bfff17 	ldw	r2,-4(fp)
 201e3a8:	10800130 	cmpltui	r2,r2,4
 201e3ac:	1000371e 	bne	r2,zero,201e48c <memcmp+0x110>
 201e3b0:	e0fff917 	ldw	r3,-28(fp)
 201e3b4:	e0bffa17 	ldw	r2,-24(fp)
 201e3b8:	1884b03a 	or	r2,r3,r2
 201e3bc:	108000cc 	andi	r2,r2,3
 201e3c0:	1000321e 	bne	r2,zero,201e48c <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 201e3c4:	e0bff917 	ldw	r2,-28(fp)
 201e3c8:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 201e3cc:	e0bffa17 	ldw	r2,-24(fp)
 201e3d0:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 201e3d4:	00000e06 	br	201e410 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 201e3d8:	e0bffb17 	ldw	r2,-20(fp)
 201e3dc:	10c00017 	ldw	r3,0(r2)
 201e3e0:	e0bffc17 	ldw	r2,-16(fp)
 201e3e4:	10800017 	ldw	r2,0(r2)
 201e3e8:	18800d1e 	bne	r3,r2,201e420 <memcmp+0xa4>
   	    break;
          a1++;
 201e3ec:	e0bffb17 	ldw	r2,-20(fp)
 201e3f0:	10800104 	addi	r2,r2,4
 201e3f4:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 201e3f8:	e0bffc17 	ldw	r2,-16(fp)
 201e3fc:	10800104 	addi	r2,r2,4
 201e400:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 201e404:	e0bfff17 	ldw	r2,-4(fp)
 201e408:	10bfff04 	addi	r2,r2,-4
 201e40c:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 201e410:	e0bfff17 	ldw	r2,-4(fp)
 201e414:	10800128 	cmpgeui	r2,r2,4
 201e418:	103fef1e 	bne	r2,zero,201e3d8 <memcmp+0x5c>
 201e41c:	00000106 	br	201e424 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 201e420:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 201e424:	e0bffb17 	ldw	r2,-20(fp)
 201e428:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 201e42c:	e0bffc17 	ldw	r2,-16(fp)
 201e430:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 201e434:	00001506 	br	201e48c <memcmp+0x110>
    {
      if (*s1 != *s2)
 201e438:	e0bff917 	ldw	r2,-28(fp)
 201e43c:	10c00003 	ldbu	r3,0(r2)
 201e440:	e0bffa17 	ldw	r2,-24(fp)
 201e444:	10800003 	ldbu	r2,0(r2)
 201e448:	18c03fcc 	andi	r3,r3,255
 201e44c:	10803fcc 	andi	r2,r2,255
 201e450:	18800826 	beq	r3,r2,201e474 <memcmp+0xf8>
	return *s1 - *s2;
 201e454:	e0bff917 	ldw	r2,-28(fp)
 201e458:	10800003 	ldbu	r2,0(r2)
 201e45c:	10c03fcc 	andi	r3,r2,255
 201e460:	e0bffa17 	ldw	r2,-24(fp)
 201e464:	10800003 	ldbu	r2,0(r2)
 201e468:	10803fcc 	andi	r2,r2,255
 201e46c:	1885c83a 	sub	r2,r3,r2
 201e470:	00000b06 	br	201e4a0 <memcmp+0x124>
      s1++;
 201e474:	e0bff917 	ldw	r2,-28(fp)
 201e478:	10800044 	addi	r2,r2,1
 201e47c:	e0bff915 	stw	r2,-28(fp)
      s2++;
 201e480:	e0bffa17 	ldw	r2,-24(fp)
 201e484:	10800044 	addi	r2,r2,1
 201e488:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 201e48c:	e0bfff17 	ldw	r2,-4(fp)
 201e490:	10ffffc4 	addi	r3,r2,-1
 201e494:	e0ffff15 	stw	r3,-4(fp)
 201e498:	103fe71e 	bne	r2,zero,201e438 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 201e49c:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 201e4a0:	e037883a 	mov	sp,fp
 201e4a4:	df000017 	ldw	fp,0(sp)
 201e4a8:	dec00104 	addi	sp,sp,4
 201e4ac:	f800283a 	ret

0201e4b0 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 201e4b0:	defff804 	addi	sp,sp,-32
 201e4b4:	dfc00715 	stw	ra,28(sp)
 201e4b8:	df000615 	stw	fp,24(sp)
 201e4bc:	dc000515 	stw	r16,20(sp)
 201e4c0:	df000604 	addi	fp,sp,24
 201e4c4:	e13ffb15 	stw	r4,-20(fp)
 201e4c8:	e17ffc15 	stw	r5,-16(fp)
 201e4cc:	e1bffd15 	stw	r6,-12(fp)
 201e4d0:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 201e4d4:	d0a00117 	ldw	r2,-32764(gp)
 201e4d8:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 201e4dc:	8000041e 	bne	r16,zero,201e4f0 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 201e4e0:	d0a00117 	ldw	r2,-32764(gp)
 201e4e4:	d0e00117 	ldw	r3,-32764(gp)
 201e4e8:	1c005304 	addi	r16,r3,332
 201e4ec:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 201e4f0:	80800117 	ldw	r2,4(r16)
 201e4f4:	10800810 	cmplti	r2,r2,32
 201e4f8:	1000131e 	bne	r2,zero,201e548 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 201e4fc:	00800034 	movhi	r2,0
 201e500:	10800004 	addi	r2,r2,0
 201e504:	1000021e 	bne	r2,zero,201e510 <__register_exitproc+0x60>
	return -1;
 201e508:	00bfffc4 	movi	r2,-1
 201e50c:	00003e06 	br	201e608 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 201e510:	01006404 	movi	r4,400
 201e514:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201e518:	1021883a 	mov	r16,r2
      if (p == NULL)
 201e51c:	8000021e 	bne	r16,zero,201e528 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 201e520:	00bfffc4 	movi	r2,-1
 201e524:	00003806 	br	201e608 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 201e528:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 201e52c:	d0a00117 	ldw	r2,-32764(gp)
 201e530:	10805217 	ldw	r2,328(r2)
 201e534:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 201e538:	d0a00117 	ldw	r2,-32764(gp)
 201e53c:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 201e540:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 201e544:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 201e548:	e0bffb17 	ldw	r2,-20(fp)
 201e54c:	10002426 	beq	r2,zero,201e5e0 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 201e550:	80802204 	addi	r2,r16,136
 201e554:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 201e558:	80800117 	ldw	r2,4(r16)
 201e55c:	e0fffa17 	ldw	r3,-24(fp)
 201e560:	1085883a 	add	r2,r2,r2
 201e564:	1085883a 	add	r2,r2,r2
 201e568:	1885883a 	add	r2,r3,r2
 201e56c:	e0fffd17 	ldw	r3,-12(fp)
 201e570:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 201e574:	e0bffa17 	ldw	r2,-24(fp)
 201e578:	10804017 	ldw	r2,256(r2)
 201e57c:	80c00117 	ldw	r3,4(r16)
 201e580:	01000044 	movi	r4,1
 201e584:	20c6983a 	sll	r3,r4,r3
 201e588:	10c6b03a 	or	r3,r2,r3
 201e58c:	e0bffa17 	ldw	r2,-24(fp)
 201e590:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 201e594:	80800117 	ldw	r2,4(r16)
 201e598:	e0fffa17 	ldw	r3,-24(fp)
 201e59c:	10800804 	addi	r2,r2,32
 201e5a0:	1085883a 	add	r2,r2,r2
 201e5a4:	1085883a 	add	r2,r2,r2
 201e5a8:	1885883a 	add	r2,r3,r2
 201e5ac:	e0fffe17 	ldw	r3,-8(fp)
 201e5b0:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 201e5b4:	e0bffb17 	ldw	r2,-20(fp)
 201e5b8:	10800098 	cmpnei	r2,r2,2
 201e5bc:	1000081e 	bne	r2,zero,201e5e0 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 201e5c0:	e0bffa17 	ldw	r2,-24(fp)
 201e5c4:	10804117 	ldw	r2,260(r2)
 201e5c8:	80c00117 	ldw	r3,4(r16)
 201e5cc:	01000044 	movi	r4,1
 201e5d0:	20c6983a 	sll	r3,r4,r3
 201e5d4:	10c6b03a 	or	r3,r2,r3
 201e5d8:	e0bffa17 	ldw	r2,-24(fp)
 201e5dc:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 201e5e0:	80800117 	ldw	r2,4(r16)
 201e5e4:	10c00044 	addi	r3,r2,1
 201e5e8:	80c00115 	stw	r3,4(r16)
 201e5ec:	10800084 	addi	r2,r2,2
 201e5f0:	1085883a 	add	r2,r2,r2
 201e5f4:	1085883a 	add	r2,r2,r2
 201e5f8:	8085883a 	add	r2,r16,r2
 201e5fc:	e0fffc17 	ldw	r3,-16(fp)
 201e600:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 201e604:	0005883a 	mov	r2,zero
}
 201e608:	e6ffff04 	addi	sp,fp,-4
 201e60c:	dfc00217 	ldw	ra,8(sp)
 201e610:	df000117 	ldw	fp,4(sp)
 201e614:	dc000017 	ldw	r16,0(sp)
 201e618:	dec00304 	addi	sp,sp,12
 201e61c:	f800283a 	ret

0201e620 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 201e620:	defff504 	addi	sp,sp,-44
 201e624:	dfc00a15 	stw	ra,40(sp)
 201e628:	df000915 	stw	fp,36(sp)
 201e62c:	dc800815 	stw	r18,32(sp)
 201e630:	dc400715 	stw	r17,28(sp)
 201e634:	dc000615 	stw	r16,24(sp)
 201e638:	df000904 	addi	fp,sp,36
 201e63c:	e13ffb15 	stw	r4,-20(fp)
 201e640:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 201e644:	d0a00117 	ldw	r2,-32764(gp)
 201e648:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 201e64c:	d0a00117 	ldw	r2,-32764(gp)
 201e650:	10805204 	addi	r2,r2,328
 201e654:	e0bff715 	stw	r2,-36(fp)
  while (p)
 201e658:	00006006 	br	201e7dc <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 201e65c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e660:	80800117 	ldw	r2,4(r16)
 201e664:	147fffc4 	addi	r17,r2,-1
 201e668:	00004a06 	br	201e794 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 201e66c:	00800044 	movi	r2,1
 201e670:	1444983a 	sll	r2,r2,r17
 201e674:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 201e678:	e0bffc17 	ldw	r2,-16(fp)
 201e67c:	10000826 	beq	r2,zero,201e6a0 <__call_exitprocs+0x80>
 201e680:	90004026 	beq	r18,zero,201e784 <__call_exitprocs+0x164>
 201e684:	88800804 	addi	r2,r17,32
 201e688:	1085883a 	add	r2,r2,r2
 201e68c:	1085883a 	add	r2,r2,r2
 201e690:	9085883a 	add	r2,r18,r2
 201e694:	10c00017 	ldw	r3,0(r2)
 201e698:	e0bffc17 	ldw	r2,-16(fp)
 201e69c:	1880391e 	bne	r3,r2,201e784 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 201e6a0:	88800084 	addi	r2,r17,2
 201e6a4:	1085883a 	add	r2,r2,r2
 201e6a8:	1085883a 	add	r2,r2,r2
 201e6ac:	8085883a 	add	r2,r16,r2
 201e6b0:	10800017 	ldw	r2,0(r2)
 201e6b4:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 201e6b8:	80800117 	ldw	r2,4(r16)
 201e6bc:	10bfffc4 	addi	r2,r2,-1
 201e6c0:	1440041e 	bne	r2,r17,201e6d4 <__call_exitprocs+0xb4>
	    p->_ind--;
 201e6c4:	80800117 	ldw	r2,4(r16)
 201e6c8:	10bfffc4 	addi	r2,r2,-1
 201e6cc:	80800115 	stw	r2,4(r16)
 201e6d0:	00000506 	br	201e6e8 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 201e6d4:	88800084 	addi	r2,r17,2
 201e6d8:	1085883a 	add	r2,r2,r2
 201e6dc:	1085883a 	add	r2,r2,r2
 201e6e0:	8085883a 	add	r2,r16,r2
 201e6e4:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 201e6e8:	e0bff917 	ldw	r2,-28(fp)
 201e6ec:	10002726 	beq	r2,zero,201e78c <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 201e6f0:	80800117 	ldw	r2,4(r16)
 201e6f4:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 201e6f8:	90000426 	beq	r18,zero,201e70c <__call_exitprocs+0xec>
 201e6fc:	90c04017 	ldw	r3,256(r18)
 201e700:	e0bff817 	ldw	r2,-32(fp)
 201e704:	1884703a 	and	r2,r3,r2
 201e708:	1000031e 	bne	r2,zero,201e718 <__call_exitprocs+0xf8>
	    fn ();
 201e70c:	e0bff917 	ldw	r2,-28(fp)
 201e710:	103ee83a 	callr	r2
 201e714:	00001406 	br	201e768 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 201e718:	90c04117 	ldw	r3,260(r18)
 201e71c:	e0bff817 	ldw	r2,-32(fp)
 201e720:	1884703a 	and	r2,r3,r2
 201e724:	1000091e 	bne	r2,zero,201e74c <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 201e728:	8c45883a 	add	r2,r17,r17
 201e72c:	1085883a 	add	r2,r2,r2
 201e730:	9085883a 	add	r2,r18,r2
 201e734:	10c00017 	ldw	r3,0(r2)
 201e738:	e0bff917 	ldw	r2,-28(fp)
 201e73c:	180b883a 	mov	r5,r3
 201e740:	e13ffb17 	ldw	r4,-20(fp)
 201e744:	103ee83a 	callr	r2
 201e748:	00000706 	br	201e768 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 201e74c:	8c45883a 	add	r2,r17,r17
 201e750:	1085883a 	add	r2,r2,r2
 201e754:	9085883a 	add	r2,r18,r2
 201e758:	10c00017 	ldw	r3,0(r2)
 201e75c:	e0bff917 	ldw	r2,-28(fp)
 201e760:	1809883a 	mov	r4,r3
 201e764:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 201e768:	80c00117 	ldw	r3,4(r16)
 201e76c:	e0bffa17 	ldw	r2,-24(fp)
 201e770:	18bfb41e 	bne	r3,r2,201e644 <__call_exitprocs+0x24>
 201e774:	e0bff717 	ldw	r2,-36(fp)
 201e778:	10800017 	ldw	r2,0(r2)
 201e77c:	143fb11e 	bne	r2,r16,201e644 <__call_exitprocs+0x24>
 201e780:	00000306 	br	201e790 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 201e784:	0001883a 	nop
 201e788:	00000106 	br	201e790 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 201e78c:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e790:	8c7fffc4 	addi	r17,r17,-1
 201e794:	883fb50e 	bge	r17,zero,201e66c <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 201e798:	00800034 	movhi	r2,0
 201e79c:	10800004 	addi	r2,r2,0
 201e7a0:	10001026 	beq	r2,zero,201e7e4 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 201e7a4:	80800117 	ldw	r2,4(r16)
 201e7a8:	10000a1e 	bne	r2,zero,201e7d4 <__call_exitprocs+0x1b4>
 201e7ac:	80800017 	ldw	r2,0(r16)
 201e7b0:	10000826 	beq	r2,zero,201e7d4 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 201e7b4:	80c00017 	ldw	r3,0(r16)
 201e7b8:	e0bff717 	ldw	r2,-36(fp)
 201e7bc:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 201e7c0:	8009883a 	mov	r4,r16
 201e7c4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 201e7c8:	e0bff717 	ldw	r2,-36(fp)
 201e7cc:	14000017 	ldw	r16,0(r2)
 201e7d0:	00000206 	br	201e7dc <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 201e7d4:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 201e7d8:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 201e7dc:	803f9f1e 	bne	r16,zero,201e65c <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e7e0:	00000106 	br	201e7e8 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 201e7e4:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e7e8:	0001883a 	nop
 201e7ec:	e6fffd04 	addi	sp,fp,-12
 201e7f0:	dfc00417 	ldw	ra,16(sp)
 201e7f4:	df000317 	ldw	fp,12(sp)
 201e7f8:	dc800217 	ldw	r18,8(sp)
 201e7fc:	dc400117 	ldw	r17,4(sp)
 201e800:	dc000017 	ldw	r16,0(sp)
 201e804:	dec00504 	addi	sp,sp,20
 201e808:	f800283a 	ret

0201e80c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201e80c:	defffd04 	addi	sp,sp,-12
 201e810:	df000215 	stw	fp,8(sp)
 201e814:	df000204 	addi	fp,sp,8
 201e818:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201e81c:	d0273745 	stb	zero,-25379(gp)
 201e820:	e0bfff17 	ldw	r2,-4(fp)
 201e824:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201e828:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 201e82c:	10000226 	beq	r2,zero,201e838 <_exit+0x2c>
    ALT_SIM_FAIL();
 201e830:	002af070 	cmpltui	zero,zero,43969
 201e834:	00000106 	br	201e83c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201e838:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 201e83c:	003fff06 	br	201e83c <_exit+0x30>
