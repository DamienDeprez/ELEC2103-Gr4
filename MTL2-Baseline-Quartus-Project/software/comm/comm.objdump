
comm.elf:     file format elf32-littlenios2
comm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001eb78 memsz 0x0001eb78 flags r-x
    LOAD off    0x0001fb98 vaddr 0x0201eb98 paddr 0x0202073c align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x000222e0 vaddr 0x020222e0 paddr 0x020222e0 align 2**12
         filesz 0x00000000 memsz 0x00009418 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e2ec  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000668  0201e530  0201e530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  0201eb98  0202073c  0001fb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009418  020222e0  020222e0  000222e0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0002173c  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0202b6f8  0202b6f8  0002173c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002173c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e8  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002bb8e  00000000  00000000  00022848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a360  00000000  00000000  0004e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d61d  00000000  00000000  00058736  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003704  00000000  00000000  00065d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000053c7  00000000  00000000  00069458  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  0006e81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00077880  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013b0  00000000  00000000  000778b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0007da6e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007da74  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007da77  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007da78  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007da79  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007da7d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007da81  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007da85  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007da8e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007da97  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007daa0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0007daa9  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  0007dae8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000575f4  00000000  00000000  00081867  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
0201e530 l    d  .rodata	00000000 .rodata
0201eb98 l    d  .rwdata	00000000 .rwdata
020222e0 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
0202b6f8 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../comm_bsp//obj/HAL/src/crt0.o
0200028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02004fa8 l     F .text	000000f0 __sbprintf
020071b8 l     F .text	0000020c cvt
020073c4 l     F .text	00000140 exponent
0201e86a l     O .rodata	00000010 blanks.4403
0201e87a l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
020076a4 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020099b0 l     F .text	000000f4 std
02022300 l     O .bss	00000004 __sfp_lock
02022304 l     O .bss	00000004 __sinit_lock
02009eac l     F .text	00000024 __fp_lock
02009ed0 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201ebc8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0201efec l     O .rwdata	00000038 lconv
0201f024 l     O .rwdata	00000020 lc_ctype_charset
0201f044 l     O .rwdata	00000020 lc_message_charset
02022314 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200b200 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0201e9d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200f0ac l     F .text	000000f0 __sbprintf
0201ea26 l     O .rodata	00000010 blanks.4348
0201ea36 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02012fe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
020130f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02013120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0201320c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020132ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020133d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
020135a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020206b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020137f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020206b4 l     O .rwdata	00000004 lockid
02022338 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020206b8 l     O .rwdata	00000004 lockid
02022340 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02015220 l     F .text	00000048 OS_InitMisc
02015268 l     F .text	0000006c OS_InitRdyList
020153d4 l     F .text	000000e4 OS_InitTCBList
02015140 l     F .text	000000e0 OS_InitEventList
020152d4 l     F .text	00000080 OS_InitTaskIdle
02015354 l     F .text	00000080 OS_InitTaskStat
02015644 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02017354 l     F .text	000000f4 OS_FlagTaskRdy
02017114 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201bec0 l     F .text	00000034 alt_dev_reg
0201f614 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201c238 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0201c4dc l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201ccb8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201cf20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201d394 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201d4d4 l     F .text	0000003c alt_get_errno
0201d510 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020223a8 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
020223a4 g     O .bss	00000004 alt_instruction_exception_handler
0200dcb8 g     F .text	000000b0 _mprec_log10
02020706 g     O .rwdata	00000002 OSTaskNameSize
0200de38 g     F .text	00000134 __any_on
02010b94 g     F .text	00000060 _isatty_r
0201e9a8 g     O .rodata	00000028 __mprec_tinytens
020134e8 g     F .text	000000bc alt_main
02004d64 g     F .text	00000118 _puts_r
0202b5f8 g     O .bss	00000100 alt_irq
020222e0 g     O .bss	00000004 MailBox6
02010bf4 g     F .text	00000070 _lseek_r
0201863c g     F .text	000000cc OS_MemInit
0202073c g       *ABS*	00000000 __flash_rwdata_start
0201be60 g     F .text	00000060 OSTimeSet
02012460 g     F .text	00000088 .hidden __eqdf2
02013e94 g     F .text	00000610 OSEventPendMulti
0202b6f8 g       *ABS*	00000000 __alt_heap_start
0201db1c g     F .text	00000024 OSTaskCreateHook
020223d4 g     O .bss	00002000 task1_stk
02004cfc g     F .text	00000068 printf
020206de g     O .rwdata	00000002 OSMboxEn
020144fc g     F .text	0000004c OSIntEnter
02010e7c g     F .text	000000d4 _wcrtomb_r
0200ed3c g     F .text	000000a0 __sseek
02009d54 g     F .text	000000d8 __sinit
02010cd4 g     F .text	00000168 __swbuf_r
020206ee g     O .rwdata	00000002 OSQEn
0200ae30 g     F .text	00000084 _setlocale_r
02009aa4 g     F .text	000000a4 __sfmoreglue
02013b68 g     F .text	000000cc __malloc_unlock
0201db84 g     F .text	00000020 OSTaskStatHook
02022348 g     O .bss	00000001 OSLockNesting
0202072c g     O .rwdata	00000002 OSDataSize
02022349 g     O .bss	00000001 OSRunning
0200c2ec g     F .text	00000208 memmove
0201dbc4 g     F .text	00000020 OSInitHookBegin
02020724 g     O .rwdata	00000002 OSTmrSize
02009d20 g     F .text	00000034 _cleanup
0200c4f4 g     F .text	00000130 _Balloc
0202234c g     O .bss	00000004 OSIdleCtr
02003b94 g     F .text	000000dc .hidden __gtdf2
0201d8cc g     F .text	00000024 altera_nios2_gen2_irq_init
0201d99c g       .text	00000000 OSStartTsk
02015974 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0202072a g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020206ca g     O .rwdata	00000002 OSEventSize
02022350 g     O .bss	00000001 OSPrioHighRdy
02010b2c g     F .text	00000068 _fstat_r
0201db40 g     F .text	00000024 OSTaskDelHook
02022324 g     O .bss	00000004 errno
0200ec58 g     F .text	00000030 __seofread
0201d97c g       .text	00000000 OSStartHighRdy
0201a908 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02016c5c g     F .text	00000060 OSFlagPendGetFlagsRdy
0202070a g     O .rwdata	00000002 OSTaskStatStkSize
02015dd8 g     F .text	00000308 OSFlagAccept
02018c74 g     F .text	000000b8 OSQFlush
02018708 g     F .text	00000140 OSQAccept
02022330 g     O .bss	00000004 alt_argv
02028680 g       *ABS*	00000000 _gp
0201a75c g     F .text	000001ac OSTaskCreate
02003008 g     F .text	000000f4 damping
0201a26c g     F .text	000004f0 OSTaskChangePrio
02022344 g     O .bss	00000004 alt_heapsem
02015c48 g     F .text	00000190 OSDebugInit
0201aaec g     F .text	00000344 OSTaskDel
0201f494 g     O .rwdata	00000180 alt_fd_list
020283d4 g     O .bss	00000370 OSFlagTbl
02014f20 g     F .text	000000b8 OS_EventTaskRemove
0201dc48 g     F .text	00000090 alt_find_dev
0200494c g     F .text	00000188 memcpy
020206f4 g     O .rwdata	00000002 OSRdyTblSize
020222e4 g     O .bss	00000004 MailBox3
02009cdc g     F .text	00000044 _cleanup_r
02012e64 g     F .text	000000dc .hidden __floatsidf
0201d458 g     F .text	0000007c alt_io_redirect
02003c70 g     F .text	000000f4 .hidden __ltdf2
0201e530 g       *ABS*	00000000 __DTOR_END__
02004e7c g     F .text	00000038 puts
0201df4c g     F .text	0000009c alt_exception_cause_generated_bad_addr
02013c34 g     F .text	00000120 OSEventNameGet
020206d8 g     O .rwdata	00000002 OSFlagMax
020031a8 g     F .text	00000104 __fpclassifyd
0200db9c g     F .text	0000011c __ratio
02014548 g     F .text	000000f8 OSIntExit
0200f19c g     F .text	00000050 __vfiprintf_internal
02020712 g     O .rwdata	00000002 OSTCBSize
02022351 g     O .bss	00000001 OSPrioCur
0201c738 g     F .text	000002bc altera_avalon_jtag_uart_read
02004c98 g     F .text	00000064 _printf_r
02004890 g     F .text	00000064 .hidden __udivsi3
02013248 g     F .text	000000a4 isatty
020206f8 g     O .rwdata	00000002 OSStkWidth
0201e8b8 g     O .rodata	000000c8 __mprec_tens
020206ec g     O .rwdata	00000002 OSPtrSize
0200aeb4 g     F .text	00000024 __locale_charset
020206cc g     O .rwdata	00000002 OSEventTblSize
0201d8f0 g       .text	00000000 OSCtxSw
0201debc g     F .text	00000090 alt_icache_flush
02022318 g     O .bss	00000004 __malloc_top_pad
02022354 g     O .bss	00000004 OSTCBList
02022328 g     O .bss	00000004 alt_fd_list_lock
02020688 g     O .rwdata	00000004 __mb_cur_max
0200af3c g     F .text	00000028 _localeconv_r
0200cb3c g     F .text	00000058 __i2b
0200a6a0 g     F .text	000005dc __sfvwrite_r
02028744 g     O .bss	00000c30 OSMemTbl
02022358 g     O .bss	00000001 OSTickStepState
0200eb5c g     F .text	00000060 _sbrk_r
020206f0 g     O .rwdata	00000002 OSQMax
02029374 g     O .bss	00000800 OSTaskStatStk
02018278 g     F .text	000000f0 OSMemNameGet
020206d0 g     O .rwdata	00000002 OSFlagEn
02010c64 g     F .text	00000070 _read_r
02020716 g     O .rwdata	00000002 OSTimeTickHookEn
02019124 g     F .text	00000168 OSQPost
02017448 g     F .text	000000a4 OS_FlagUnlink
020206a8 g     O .rwdata	00000004 alt_max_fd
0201550c g     F .text	00000068 OS_MemCopy
02015574 g     F .text	000000d0 OS_Sched
020106e4 g     F .text	0000012c _fclose_r
02018188 g     F .text	000000f0 OSMemGet
02017ea4 g     F .text	00000110 OSMboxQuery
0201b118 g     F .text	000001b4 OSTaskNameSet
0200995c g     F .text	00000054 fflush
0202231c g     O .bss	00000004 __malloc_max_sbrked_mem
0202235c g     O .bss	00000004 OSCtxSwCtr
0201dba4 g     F .text	00000020 OSTimeTickHook
020206da g     O .rwdata	00000002 OSFlagNameSize
020222e8 g     O .bss	00000004 AnimationFlagGrp
0200447c g     F .text	00000110 .hidden __extendsfdf2
02014fd8 g     F .text	00000100 OS_EventTaskRemoveMulti
02011bb4 g     F .text	000008ac .hidden __adddf3
02014dd0 g     F .text	00000150 OS_EventTaskWaitMulti
0200d758 g     F .text	00000204 __b2d
020206f2 g     O .rwdata	00000002 OSQSize
0201167c g     F .text	00000538 .hidden __umoddi3
02013414 g     F .text	000000d4 lseek
02019bd4 g     F .text	0000020c OSSemPend
02002980 g     F .text	00000064 momentum
02020684 g     O .rwdata	00000004 _global_impure_ptr
0200df6c g     F .text	00000bf0 _realloc_r
020206dc g     O .rwdata	00000002 OSLowestPrio
0202b6f8 g       *ABS*	00000000 __bss_end
0201d2a4 g     F .text	000000f0 alt_iic_isr_register
0201dc24 g     F .text	00000024 OSTCBInitHook
02020722 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0201d7c4 g     F .text	00000108 alt_tick
02017c38 g     F .text	00000110 OSMboxPost
02011104 g     F .text	00000578 .hidden __udivdi3
02010a3c g     F .text	00000088 _fputwc_r
020206c4 g     O .rwdata	00000002 OSEventEn
0201e980 g     O .rodata	00000028 __mprec_bigtens
0200c834 g     F .text	0000018c __s2b
0202071e g     O .rwdata	00000002 OSTmrCfgNameSize
02012f40 g     F .text	000000a8 .hidden __floatunsidf
0200d2d4 g     F .text	00000114 __mcmp
02009ef4 g     F .text	00000040 __fp_lock_all
0201d258 g     F .text	0000004c alt_ic_irq_enabled
020222ec g     O .bss	00000004 MailBox5
02017274 g     F .text	000000e0 OS_FlagInit
0201d728 g     F .text	0000009c alt_alarm_stop
02020700 g     O .rwdata	00000002 OSTaskIdleStkSize
02022398 g     O .bss	00000004 alt_irq_active
0201980c g     F .text	000000b0 OSSemAccept
0201847c g     F .text	000000d8 OSMemPut
02017fb4 g     F .text	000001d4 OSMemCreate
02022360 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201f46c g     O .rwdata	00000028 alt_dev_null
02020714 g     O .rwdata	00000002 OSTicksPerSec
0201d8f0 g       .text	00000000 OSIntCtxSw
0201ced8 g     F .text	00000048 alt_dcache_flush_all
0200c9c0 g     F .text	00000090 __hi0bits
02012de4 g     F .text	00000080 .hidden __fixdfsi
02022364 g     O .bss	00000004 OSTCBFreeList
0202073c g       *ABS*	00000000 __ram_rwdata_end
02019de0 g     F .text	0000016c OSSemPendAbort
020206a0 g     O .rwdata	00000008 alt_dev_list
0201382c g     F .text	000000f8 write
02020718 g     O .rwdata	00000002 OSVersionNbr
0201eb98 g       *ABS*	00000000 __ram_rodata_end
0201315c g     F .text	000000b0 fstat
02003c70 g     F .text	000000f4 .hidden __ledf2
020206c0 g     O .rwdata	00000004 OSEndiannessTest
0200cf64 g     F .text	00000178 __pow5mult
0200f1ec g     F .text	000012c4 ___vfiprintf_internal_r
02022308 g     O .bss	00000004 __nlocale_changed
020048f4 g     F .text	00000058 .hidden __umodsi3
020206d2 g     O .rwdata	00000002 OSFlagGrpSize
0202b6f8 g       *ABS*	00000000 end
0201c0f0 g     F .text	00000148 altera_avalon_jtag_uart_init
020157dc g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0201e530 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0201cd30 g     F .text	0000007c alt_avalon_timer_sc_init
02004734 g     F .text	00000064 .hidden __clzsi2
0201c9f4 g     F .text	000002c4 altera_avalon_jtag_uart_write
02009e2c g     F .text	00000020 __sfp_lock_acquire
0200c130 g     F .text	000001bc memchr
020154b8 g     F .text	00000054 OS_MemClr
020050e8 g     F .text	000020d0 ___vfprintf_internal_r
0201d9c0 g     F .text	0000015c OSTaskStkInit
02000290 g     F .text	00000210 task1
0201eb98 g     O .rwdata	00000030 whole_list
02009f74 g     F .text	00000560 _free_r
0200aed8 g     F .text	00000020 __locale_mb_cur_max
02014b28 g     F .text	00000198 OS_EventTaskRdy
0201e310 g     F .text	000001ec __call_exitprocs
02022368 g     O .bss	00000001 OSCPUUsage
0202230c g     O .bss	00000004 __mlocale_changed
02020690 g     O .rwdata	00000004 __malloc_sbrk_base
02000244 g     F .text	0000004c _start
020004a0 g     F .text	00001e30 task2
0202239c g     O .bss	00000004 _alt_tick_rate
02018d2c g     F .text	0000028c OSQPend
0201b9d8 g     F .text	00000104 OSTimeDly
02002828 g     F .text	00000158 borderCollide
0200d0dc g     F .text	000001f8 __lshift
020223a0 g     O .bss	00000004 _alt_nticks
020135e0 g     F .text	000000fc read
0201bf2c g     F .text	00000060 alt_sys_init
0201e1a0 g     F .text	00000170 __register_exitproc
02022369 g     O .bss	00000001 OSTaskCtr
020222f0 g     O .bss	00000004 MailBox2
0201badc g     F .text	00000154 OSTimeDlyHMSM
0200cb94 g     F .text	000003d0 __multiply
0201c5e0 g     F .text	00000068 altera_avalon_jtag_uart_close
0201eb98 g       *ABS*	00000000 __ram_rwdata_start
0201e530 g       *ABS*	00000000 __ram_rodata_start
020223ac g     O .bss	00000028 __malloc_current_mallinfo
020206c6 g     O .rwdata	00000002 OSEventMax
0200d95c g     F .text	00000240 __d2b
02019f4c g     F .text	00000110 OSSemPost
020146cc g     F .text	000000dc OSSchedUnlock
020030fc g     F .text	000000ac fmin
0201bf8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201dde0 g     F .text	000000dc alt_get_fd
0202236c g     O .bss	00000004 OSMemFreeList
02014818 g     F .text	000000b0 OSStatInit
02017050 g     F .text	000000c4 OSFlagQuery
020206fc g     O .rwdata	00000002 OSTaskCreateExtEn
02010520 g     F .text	00000060 _close_r
0201e06c g     F .text	00000134 memcmp
02014b08 g     F .text	00000020 OS_Dummy
0201c04c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0202b6f8 g       *ABS*	00000000 __alt_stack_base
0201c09c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02007504 g     F .text	000001a0 __swsetup_r
02029b74 g     O .bss	000001e0 OSQTbl
020032ac g     F .text	000008e8 .hidden __divdf3
02009b48 g     F .text	00000194 __sfp
0200dd68 g     F .text	000000d0 __copybits
0201f064 g     O .rwdata	00000408 __malloc_av_
02009e8c g     F .text	00000020 __sinit_lock_release
02022370 g     O .bss	00000004 OSTCBHighRdy
02003d64 g     F .text	00000718 .hidden __muldf3
0200ebbc g     F .text	0000009c __sread
02022374 g     O .bss	00000004 OSQFreeList
0201dcd8 g     F .text	00000108 alt_find_file
0201cf5c g     F .text	000000a4 alt_dev_llist_insert
02013a48 g     F .text	00000120 __malloc_lock
02013740 g     F .text	000000b0 sbrk
02013d54 g     F .text	00000140 OSEventNameSet
020098d4 g     F .text	00000088 _fflush_r
02010580 g     F .text	00000164 _calloc_r
02022378 g     O .bss	00000001 OSRdyGrp
020222e0 g       *ABS*	00000000 __bss_start
02004ad4 g     F .text	000001c4 memset
02002560 g     F .text	00000154 main
02022334 g     O .bss	00000004 alt_envp
02022320 g     O .bss	00000004 __malloc_max_total_mem
02002f9c g     F .text	0000006c moveBall
0201bfec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02010e3c g     F .text	00000040 __swbuf
0201ea64 g     O .rodata	00000100 OSUnMapTbl
020206f6 g     O .rwdata	00000002 OSSemEn
02016cbc g     F .text	00000394 OSFlagPost
0200eddc g     F .text	00000054 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02010810 g     F .text	00000038 fclose
02014cc0 g     F .text	00000110 OS_EventTaskWait
020243d4 g     O .bss	00002000 task2_stk
0200458c g     F .text	000001a8 .hidden __truncdfsf2
020158a8 g     F .text	000000cc OS_TaskStatStkChk
0201ae30 g     F .text	00000150 OSTaskDelReq
02007a58 g     F .text	00001b78 _dtoa_r
0200b5b4 g     F .text	00000b7c _malloc_r
0201108c g     F .text	00000078 __ascii_wctomb
020206ac g     O .rwdata	00000004 alt_errno
020147a8 g     F .text	00000070 OSStart
020263d4 g     O .bss	00002000 task3_stk
020139e8 g     F .text	00000060 __env_unlock
0200ac7c g     F .text	000000d8 _fwalk
0201b2cc g     F .text	000001d4 OSTaskResume
02018554 g     F .text	000000e8 OSMemQuery
02020708 g     O .rwdata	00000002 OSTaskStatEn
020206e2 g     O .rwdata	00000002 OSMemMax
0201928c g     F .text	00000170 OSQPostFront
02004798 g     F .text	00000084 .hidden __divsi3
02022379 g     O .bss	00000003 OSRdyTbl
020206bc g     O .rwdata	00000002 OSDebugEn
0200a4d4 g     F .text	000001cc _malloc_trim_r
020222f4 g     O .bss	00000004 MailBox4
0201e530 g       *ABS*	00000000 __CTOR_END__
020206d4 g     O .rwdata	00000002 OSFlagNodeSize
0202071c g     O .rwdata	00000002 OSTmrCfgMax
0200ee30 g     F .text	00000140 strcmp
02018848 g     F .text	000001ac OSQCreate
0201af80 g     F .text	00000198 OSTaskNameGet
0201e530 g       *ABS*	00000000 __flash_rodata_start
020193fc g     F .text	0000020c OSQPostOpt
020148c8 g     F .text	00000220 OSTimeTick
02020704 g     O .rwdata	00000002 OSTaskMax
0201e530 g       *ABS*	00000000 __DTOR_LIST__
020198bc g     F .text	000000d8 OSSemCreate
02020728 g     O .rwdata	00000002 OSTmrWheelSize
02012460 g     F .text	00000088 .hidden __nedf2
020206fe g     O .rwdata	00000002 OSTaskDelEn
0201a05c g     F .text	00000110 OSSemQuery
020189f4 g     F .text	00000280 OSQDel
02018fb8 g     F .text	0000016c OSQPendAbort
0201bef4 g     F .text	00000038 alt_irq_init
020136dc g     F .text	00000064 alt_release_fd
0201e705 g     O .rodata	00000100 .hidden __clz_tab
02022310 g     O .bss	00000004 _PathLocale
0201dfe8 g     F .text	0000003c atexit
020104b0 g     F .text	00000070 _write_r
02014640 g     F .text	0000008c OSSchedLock
0200af64 g     F .text	00000040 setlocale
020160e0 g     F .text	00000108 OSFlagCreate
02020680 g     O .rwdata	00000004 _impure_ptr
0202232c g     O .bss	00000004 alt_argc
020095d0 g     F .text	00000304 __sflush_r
0201d060 g     F .text	00000060 _do_dtors
0200af1c g     F .text	00000020 __locale_cjk_lang
020206ce g     O .rwdata	00000002 OSEventMultiEn
020161e8 g     F .text	00000248 OSFlagDel
0202237c g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02017acc g     F .text	0000016c OSMboxPendAbort
0200d68c g     F .text	000000cc __ulp
0202071a g     O .rwdata	00000002 OSTmrEn
020166a4 g     F .text	000005b8 OSFlagPend
02009f34 g     F .text	00000040 __fp_unlock_all
02020698 g     O .rwdata	00000008 alt_fs_list
020156b8 g     F .text	00000074 OS_StrCopy
020206e4 g     O .rwdata	00000002 OSMemNameSize
0201dbe4 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02020710 g     O .rwdata	00000002 OSTCBPrioTblMax
0200afa4 g     F .text	00000030 localeconv
0202070c g     O .rwdata	00000002 OSTaskStatStkChkEn
02017584 g     F .text	000000d4 OSMboxCreate
0201d0f4 g     F .text	00000050 alt_ic_isr_register
020206e0 g     O .rwdata	00000002 OSMemEn
020206ea g     O .rwdata	00000002 OSMutexEn
0202073c g       *ABS*	00000000 _edata
02002aa4 g     F .text	000004f8 collide_calc
0202b6f8 g       *ABS*	00000000 _end
02022380 g     O .bss	00000001 OSIntNesting
02010848 g     F .text	000001f4 __fputwc
02000244 g       *ABS*	00000000 __ram_exceptions_end
0201c648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201bc30 g     F .text	000001d4 OSTimeDlyResume
02016558 g     F .text	0000014c OSFlagNameSet
02017898 g     F .text	00000234 OSMboxPend
020026b4 g     F .text	00000174 whole_collide
0201b4a0 g     F .text	000001c0 OSTaskStkChk
0201d1cc g     F .text	0000008c alt_ic_irq_disable
020206e6 g     O .rwdata	00000002 OSMemSize
0200ec88 g     F .text	000000b4 __swrite
0202068c g     O .rwdata	00000004 __malloc_trim_threshold
0200aef8 g     F .text	00000024 __locale_msgcharset
02022384 g     O .bss	00000004 OSTCBCur
0201e024 g     F .text	00000048 exit
020206e8 g     O .rwdata	00000002 OSMemTblSize
0200ad54 g     F .text	000000dc _fwalk_reent
020222f8 g     O .bss	00000004 MailBox1
0200d3e8 g     F .text	000002a4 __mdiff
0200481c g     F .text	00000074 .hidden __modsi3
020174ec g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009e4c g     F .text	00000020 __sfp_lock_release
020144a4 g     F .text	00000058 OSInit
0201b844 g     F .text	00000124 OSTaskQuery
02019764 g     F .text	000000a8 OS_QInit
0201572c g     F .text	00000054 OS_StrLen
02018368 g     F .text	00000114 OSMemNameSet
02020702 g     O .rwdata	00000002 OSTaskProfileEn
02022388 g     O .bss	00000004 OSTime
020222fc g     O .bss	00000004 isActiveFlagGrp
02029d54 g     O .bss	00000800 OSTaskIdleStk
0201e4fc g     F .text	00000034 _exit
02017d48 g     F .text	0000015c OSMboxPostOpt
0201cdac g     F .text	0000012c alt_alarm_start
02016430 g     F .text	00000128 OSFlagNameGet
020029e4 g     F .text	000000c0 detect_collide
0201be04 g     F .text	0000005c OSTimeGet
0200afd4 g     F .text	0000022c __smakebuf_r
02004eb4 g     F .text	000000f4 strlen
0201db64 g     F .text	00000020 OSTaskSwHook
0201d5d4 g     F .text	00000154 open
0202a554 g     O .bss	00000b40 OSEventTbl
02003b94 g     F .text	000000dc .hidden __gedf2
0202b094 g     O .bss	00000510 OSTCBTbl
0201a16c g     F .text	00000100 OSSemSet
02020694 g     O .rwdata	00000004 __wctomb
0200ef70 g     F .text	0000013c __sprint_r
0201d0c0 g     F .text	00000034 alt_icache_flush_all
02020730 g     O .rwdata	00000004 alt_priority_mask
02019994 g     F .text	00000240 OSSemDel
0202238c g     O .bss	00000004 OSFlagFreeList
020022d0 g     F .text	00000290 task3
0201d144 g     F .text	00000088 alt_ic_irq_enable
020206c8 g     O .rwdata	00000002 OSEventNameSize
02017658 g     F .text	00000240 OSMboxDel
02005098 g     F .text	00000050 __vfprintf_internal
02022390 g     O .bss	00000001 OSStatRdy
0202b5a4 g     O .bss	00000054 OSTCBPrioTbl
02011028 g     F .text	00000064 _wctomb_r
02013924 g     F .text	000000c4 __env_lock
0202070e g     O .rwdata	00000002 OSTaskSwHookEn
020124e8 g     F .text	000008fc .hidden __subdf3
0200ca50 g     F .text	000000ec __lo0bits
02020734 g     O .rwdata	00000008 alt_alarm_list
020206d6 g     O .rwdata	00000002 OSFlagWidth
0201d000 g     F .text	00000060 _do_ctors
02010f50 g     F .text	000000d8 wcrtomb
02013024 g     F .text	000000d0 close
0202233c g     O .bss	00000004 alt_envsem
02022394 g     O .bss	00000004 OSIdleCtrRun
02014ae8 g     F .text	00000020 OSVersion
02020720 g     O .rwdata	00000002 OSTmrCfgWheelSize
02013354 g     F .text	00000084 alt_load
0201b968 g     F .text	00000070 OS_TaskStkClr
020206fa g     O .rwdata	00000002 OSTaskCreateEn
020150d8 g     F .text	00000068 OS_EventWaitListInit
02010ac4 g     F .text	00000068 fputwc
0201dc04 g     F .text	00000020 OSTaskIdleHook
02009e6c g     F .text	00000020 __sinit_lock_acquire
0200c6a0 g     F .text	00000194 __multadd
0201b660 g     F .text	000001e4 OSTaskSuspend
0200c624 g     F .text	0000007c _Bfree
02015780 g     F .text	0000005c OS_TaskIdle
02020726 g     O .rwdata	00000002 OSTmrTblSize
02019608 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409114 	ori	at,at,580
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20144fc0 	call	20144fc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10ad7e04 	addi	r2,r2,-18952
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10ad7e04 	addi	r2,r2,-18952
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	20145480 	call	2014548 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a74917 	ldw	r2,-25308(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a74917 	ldw	r2,-25308(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000260:	d6a1a014 	ori	gp,gp,34432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2000268:	1088b814 	ori	r2,r2,8928

    movhi r3, %hi(__bss_end)
 200026c:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 2000270:	18edbe14 	ori	r3,r3,46840

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000284:	20133540 	call	2013354 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000288:	20134e80 	call	20134e8 <alt_main>

0200028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200028c:	003fff06 	br	200028c <alt_after_alt_main>

02000290 <task1>:
/*  */



void task1(void* pdata)
{
 2000290:	deffeb04 	addi	sp,sp,-84
 2000294:	dfc01415 	stw	ra,80(sp)
 2000298:	df001315 	stw	fp,76(sp)
 200029c:	df001304 	addi	fp,sp,76
 20002a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20002a4:	008000b4 	movhi	r2,2
 20002a8:	e0bff415 	stw	r2,-48(fp)
	int count_old = 0;
 20002ac:	e03ff515 	stw	zero,-44(fp)
	int count = 0;
 20002b0:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03ff315 	stw	zero,-52(fp)

	while (1)
	{
		printf("wait for isActive\n");
 20002b8:	010080b4 	movhi	r4,514
 20002bc:	21394c04 	addi	r4,r4,-6864
 20002c0:	2004e7c0 	call	2004e7c <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c4:	d0e71f17 	ldw	r3,-25476(gp)
 20002c8:	e0bffc04 	addi	r2,fp,-16
 20002cc:	d8800015 	stw	r2,0(sp)
 20002d0:	000f883a 	mov	r7,zero
 20002d4:	01802084 	movi	r6,130
 20002d8:	01400044 	movi	r5,1
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	20166a40 	call	20166a4 <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002e4:	00004c06 	br	2000418 <task1+0x188>
		{
			count_old = count;
 20002e8:	e0bfee17 	ldw	r2,-72(fp)
 20002ec:	e0bff515 	stw	r2,-44(fp)
			count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 20002f0:	e0bff417 	ldw	r2,-48(fp)
 20002f4:	10800a04 	addi	r2,r2,40
 20002f8:	10800037 	ldwio	r2,0(r2)
 20002fc:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = IORD(MTL_controller,11);
 2000300:	e0bff417 	ldw	r2,-48(fp)
 2000304:	10800b04 	addi	r2,r2,44
 2000308:	10800037 	ldwio	r2,0(r2)
 200030c:	e0bff615 	stw	r2,-40(fp)
			int pos2 = IORD(MTL_controller,12);
 2000310:	e0bff417 	ldw	r2,-48(fp)
 2000314:	10800c04 	addi	r2,r2,48
 2000318:	10800037 	ldwio	r2,0(r2)
 200031c:	e0bff715 	stw	r2,-36(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000320:	e0bff517 	ldw	r2,-44(fp)
 2000324:	10800058 	cmpnei	r2,r2,1
 2000328:	1000121e 	bne	r2,zero,2000374 <task1+0xe4>
 200032c:	e0bfee17 	ldw	r2,-72(fp)
 2000330:	10800098 	cmpnei	r2,r2,2
 2000334:	10000f1e 	bne	r2,zero,2000374 <task1+0xe4>
			{
				printf("start gesture\n");
 2000338:	010080b4 	movhi	r4,514
 200033c:	21395104 	addi	r4,r4,-6844
 2000340:	2004e7c0 	call	2004e7c <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000344:	e0bff617 	ldw	r2,-40(fp)
 2000348:	1080ffcc 	andi	r2,r2,1023
 200034c:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000350:	e0bff617 	ldw	r2,-40(fp)
 2000354:	1005d2ba 	srai	r2,r2,10
 2000358:	e0bff115 	stw	r2,-60(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200035c:	e0bff717 	ldw	r2,-36(fp)
 2000360:	1080ffcc 	andi	r2,r2,1023
 2000364:	e0bff815 	stw	r2,-32(fp)
				y2_gesture_start = pos2 >> 10;
 2000368:	e0bff717 	ldw	r2,-36(fp)
 200036c:	1005d2ba 	srai	r2,r2,10
 2000370:	e0bff915 	stw	r2,-28(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000374:	e0bff517 	ldw	r2,-44(fp)
 2000378:	10800098 	cmpnei	r2,r2,2
 200037c:	1000261e 	bne	r2,zero,2000418 <task1+0x188>
 2000380:	e0bfee17 	ldw	r2,-72(fp)
 2000384:	10800058 	cmpnei	r2,r2,1
 2000388:	1000231e 	bne	r2,zero,2000418 <task1+0x188>
			{
				printf("stop gesture\n");
 200038c:	010080b4 	movhi	r4,514
 2000390:	21395504 	addi	r4,r4,-6828
 2000394:	2004e7c0 	call	2004e7c <puts>
			//	printf("Hello\n");

				x1_gesture_stop = pos1 & 0x0003FF;
 2000398:	e0bff617 	ldw	r2,-40(fp)
 200039c:	1080ffcc 	andi	r2,r2,1023
 20003a0:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 20003a4:	e0bff617 	ldw	r2,-40(fp)
 20003a8:	1005d2ba 	srai	r2,r2,10
 20003ac:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003b0:	e0bff717 	ldw	r2,-36(fp)
 20003b4:	1080ffcc 	andi	r2,r2,1023
 20003b8:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_stop = pos2 >> 10;
 20003bc:	e0bff717 	ldw	r2,-36(fp)
 20003c0:	1005d2ba 	srai	r2,r2,10
 20003c4:	e0bff215 	stw	r2,-56(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003c8:	e0bfef17 	ldw	r2,-68(fp)
 20003cc:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003d0:	e0fffa17 	ldw	r3,-24(fp)
 20003d4:	18800e16 	blt	r3,r2,2000410 <task1+0x180>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfef17 	ldw	r2,-68(fp)
 20003dc:	10c00784 	addi	r3,r2,30
 20003e0:	e0bffa17 	ldw	r2,-24(fp)
 20003e4:	18800a16 	blt	r3,r2,2000410 <task1+0x180>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003e8:	e0bff117 	ldw	r2,-60(fp)
 20003ec:	10bff884 	addi	r2,r2,-30
 20003f0:	e0fffb17 	ldw	r3,-20(fp)
 20003f4:	18800616 	blt	r3,r2,2000410 <task1+0x180>
 20003f8:	e0bff117 	ldw	r2,-60(fp)
 20003fc:	10c00784 	addi	r3,r2,30
 2000400:	e0bffb17 	ldw	r2,-20(fp)
 2000404:	18800216 	blt	r3,r2,2000410 <task1+0x180>
 2000408:	00800044 	movi	r2,1
 200040c:	00000106 	br	2000414 <task1+0x184>
 2000410:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000414:	e0bff315 	stw	r2,-52(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 2000418:	e0bff317 	ldw	r2,-52(fp)
 200041c:	103fb226 	beq	r2,zero,20002e8 <task1+0x58>
			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		//printf("Hello");
		int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000420:	e0fff017 	ldw	r3,-64(fp)
 2000424:	e0bfef17 	ldw	r2,-68(fp)
 2000428:	1885c83a 	sub	r2,r3,r2
 200042c:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000430:	e0fff217 	ldw	r3,-56(fp)
 2000434:	e0bff117 	ldw	r2,-60(fp)
 2000438:	1885c83a 	sub	r2,r3,r2
 200043c:	e0bffe15 	stw	r2,-8(fp)
		printf("Send value : (%d, %d)\n", x_dir, y_dir);
 2000440:	e0bffd17 	ldw	r2,-12(fp)
 2000444:	e0fffe17 	ldw	r3,-8(fp)
 2000448:	180d883a 	mov	r6,r3
 200044c:	100b883a 	mov	r5,r2
 2000450:	010080b4 	movhi	r4,514
 2000454:	21395904 	addi	r4,r4,-6812
 2000458:	2004cfc0 	call	2004cfc <printf>
		OSMboxPost(MailBox1, &x_dir);
 200045c:	d0a71e17 	ldw	r2,-25480(gp)
 2000460:	e0fffd04 	addi	r3,fp,-12
 2000464:	180b883a 	mov	r5,r3
 2000468:	1009883a 	mov	r4,r2
 200046c:	2017c380 	call	2017c38 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000470:	d0a71c17 	ldw	r2,-25488(gp)
 2000474:	e0fffe04 	addi	r3,fp,-8
 2000478:	180b883a 	mov	r5,r3
 200047c:	1009883a 	mov	r4,r2
 2000480:	2017c380 	call	2017c38 <OSMboxPost>
		gesture_detected = 0;
 2000484:	e03ff315 	stw	zero,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 2000488:	01c07d04 	movi	r7,500
 200048c:	000d883a 	mov	r6,zero
 2000490:	000b883a 	mov	r5,zero
 2000494:	0009883a 	mov	r4,zero
 2000498:	201badc0 	call	201badc <OSTimeDlyHMSM>
	}
 200049c:	003f8606 	br	20002b8 <task1+0x28>

020004a0 <task2>:
}

void task2(void* pdata)
{
 20004a0:	deff3d04 	addi	sp,sp,-780
 20004a4:	dfc0c215 	stw	ra,776(sp)
 20004a8:	df00c115 	stw	fp,772(sp)
 20004ac:	dd40c015 	stw	r21,768(sp)
 20004b0:	dd00bf15 	stw	r20,764(sp)
 20004b4:	dcc0be15 	stw	r19,760(sp)
 20004b8:	dc80bd15 	stw	r18,756(sp)
 20004bc:	dc40bc15 	stw	r17,752(sp)
 20004c0:	dc00bb15 	stw	r16,748(sp)
 20004c4:	df00c104 	addi	fp,sp,772
 20004c8:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 20004cc:	008000b4 	movhi	r2,2
 20004d0:	e0bf4515 	stw	r2,-748(fp)

  float ball[10][2] =  {{266.0, 263.0}, // white
 20004d4:	008080b4 	movhi	r2,514
 20004d8:	10b97804 	addi	r2,r2,-6688
 20004dc:	e0ff4d04 	addi	r3,fp,-716
 20004e0:	1009883a 	mov	r4,r2
 20004e4:	00801404 	movi	r2,80
 20004e8:	100d883a 	mov	r6,r2
 20004ec:	200b883a 	mov	r5,r4
 20004f0:	1809883a 	mov	r4,r3
 20004f4:	200494c0 	call	200494c <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 20004f8:	e0bf4517 	ldw	r2,-748(fp)
 20004fc:	10800104 	addi	r2,r2,4
 2000500:	e0ff4e17 	ldw	r3,-712(fp)
 2000504:	1807fe72 	custom	249,r3,r3,zero
 2000508:	180892ba 	slli	r4,r3,10
 200050c:	e0ff4d17 	ldw	r3,-716(fp)
 2000510:	1807fe72 	custom	249,r3,r3,zero
 2000514:	20c7883a 	add	r3,r4,r3
 2000518:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 200051c:	e0bf4517 	ldw	r2,-748(fp)
 2000520:	10800204 	addi	r2,r2,8
 2000524:	e0ff5017 	ldw	r3,-704(fp)
 2000528:	1807fe72 	custom	249,r3,r3,zero
 200052c:	180892ba 	slli	r4,r3,10
 2000530:	e0ff4f17 	ldw	r3,-708(fp)
 2000534:	1807fe72 	custom	249,r3,r3,zero
 2000538:	20c7883a 	add	r3,r4,r3
 200053c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2000540:	e0bf4517 	ldw	r2,-748(fp)
 2000544:	10800304 	addi	r2,r2,12
 2000548:	e0ff5217 	ldw	r3,-696(fp)
 200054c:	1807fe72 	custom	249,r3,r3,zero
 2000550:	180892ba 	slli	r4,r3,10
 2000554:	e0ff5117 	ldw	r3,-700(fp)
 2000558:	1807fe72 	custom	249,r3,r3,zero
 200055c:	20c7883a 	add	r3,r4,r3
 2000560:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2000564:	e0bf4517 	ldw	r2,-748(fp)
 2000568:	10800404 	addi	r2,r2,16
 200056c:	e0ff5417 	ldw	r3,-688(fp)
 2000570:	1807fe72 	custom	249,r3,r3,zero
 2000574:	180892ba 	slli	r4,r3,10
 2000578:	e0ff5317 	ldw	r3,-692(fp)
 200057c:	1807fe72 	custom	249,r3,r3,zero
 2000580:	20c7883a 	add	r3,r4,r3
 2000584:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2000588:	e0bf4517 	ldw	r2,-748(fp)
 200058c:	10800504 	addi	r2,r2,20
 2000590:	e0ff5617 	ldw	r3,-680(fp)
 2000594:	1807fe72 	custom	249,r3,r3,zero
 2000598:	180892ba 	slli	r4,r3,10
 200059c:	e0ff5517 	ldw	r3,-684(fp)
 20005a0:	1807fe72 	custom	249,r3,r3,zero
 20005a4:	20c7883a 	add	r3,r4,r3
 20005a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 20005ac:	e0bf4517 	ldw	r2,-748(fp)
 20005b0:	10800604 	addi	r2,r2,24
 20005b4:	e0ff5817 	ldw	r3,-672(fp)
 20005b8:	1807fe72 	custom	249,r3,r3,zero
 20005bc:	180892ba 	slli	r4,r3,10
 20005c0:	e0ff5717 	ldw	r3,-676(fp)
 20005c4:	1807fe72 	custom	249,r3,r3,zero
 20005c8:	20c7883a 	add	r3,r4,r3
 20005cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20005d0:	e0bf4517 	ldw	r2,-748(fp)
 20005d4:	10800704 	addi	r2,r2,28
 20005d8:	e0ff5a17 	ldw	r3,-664(fp)
 20005dc:	1807fe72 	custom	249,r3,r3,zero
 20005e0:	180892ba 	slli	r4,r3,10
 20005e4:	e0ff5917 	ldw	r3,-668(fp)
 20005e8:	1807fe72 	custom	249,r3,r3,zero
 20005ec:	20c7883a 	add	r3,r4,r3
 20005f0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20005f4:	e0bf4517 	ldw	r2,-748(fp)
 20005f8:	10800804 	addi	r2,r2,32
 20005fc:	e0ff5c17 	ldw	r3,-656(fp)
 2000600:	1807fe72 	custom	249,r3,r3,zero
 2000604:	180892ba 	slli	r4,r3,10
 2000608:	e0ff5b17 	ldw	r3,-660(fp)
 200060c:	1807fe72 	custom	249,r3,r3,zero
 2000610:	20c7883a 	add	r3,r4,r3
 2000614:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 2000618:	e0bf4517 	ldw	r2,-748(fp)
 200061c:	10800904 	addi	r2,r2,36
 2000620:	e0ff5e17 	ldw	r3,-648(fp)
 2000624:	1807fe72 	custom	249,r3,r3,zero
 2000628:	180892ba 	slli	r4,r3,10
 200062c:	e0ff5d17 	ldw	r3,-652(fp)
 2000630:	1807fe72 	custom	249,r3,r3,zero
 2000634:	20c7883a 	add	r3,r4,r3
 2000638:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 200063c:	e0bf4517 	ldw	r2,-748(fp)
 2000640:	10800a04 	addi	r2,r2,40
 2000644:	e0ff6017 	ldw	r3,-640(fp)
 2000648:	1807fe72 	custom	249,r3,r3,zero
 200064c:	180892ba 	slli	r4,r3,10
 2000650:	e0ff5f17 	ldw	r3,-644(fp)
 2000654:	1807fe72 	custom	249,r3,r3,zero
 2000658:	20c7883a 	add	r3,r4,r3
 200065c:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 2000660:	e0bf6104 	addi	r2,fp,-636
 2000664:	00c05a04 	movi	r3,360
 2000668:	180d883a 	mov	r6,r3
 200066c:	000b883a 	mov	r5,zero
 2000670:	1009883a 	mov	r4,r2
 2000674:	2004ad40 	call	2004ad4 <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 2000678:	00800044 	movi	r2,1
 200067c:	e0bf4605 	stb	r2,-744(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000680:	d0a71a17 	ldw	r2,-25496(gp)
 2000684:	e0ff4603 	ldbu	r3,-744(fp)
 2000688:	e13f4c04 	addi	r4,fp,-720
 200068c:	200f883a 	mov	r7,r4
 2000690:	180d883a 	mov	r6,r3
 2000694:	01400044 	movi	r5,1
 2000698:	1009883a 	mov	r4,r2
 200069c:	2016cbc0 	call	2016cbc <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 20006a0:	d0a71d17 	ldw	r2,-25484(gp)
 20006a4:	e0ff4c04 	addi	r3,fp,-720
 20006a8:	180d883a 	mov	r6,r3
 20006ac:	000b883a 	mov	r5,zero
 20006b0:	1009883a 	mov	r4,r2
 20006b4:	20178980 	call	2017898 <OSMboxPend>
 20006b8:	e0bf4715 	stw	r2,-740(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 20006bc:	d0a71b17 	ldw	r2,-25492(gp)
 20006c0:	e0ff4c04 	addi	r3,fp,-720
 20006c4:	180d883a 	mov	r6,r3
 20006c8:	000b883a 	mov	r5,zero
 20006cc:	1009883a 	mov	r4,r2
 20006d0:	20178980 	call	2017898 <OSMboxPend>
 20006d4:	e0bf4815 	stw	r2,-736(fp)

   float x = (float) *vector_x;
 20006d8:	e0bf4717 	ldw	r2,-740(fp)
 20006dc:	10800017 	ldw	r2,0(r2)
 20006e0:	1005feb2 	custom	250,r2,r2,zero
 20006e4:	e0bf4915 	stw	r2,-732(fp)
   float y = (float) *vector_y;
 20006e8:	e0bf4817 	ldw	r2,-736(fp)
 20006ec:	10800017 	ldw	r2,0(r2)
 20006f0:	1005feb2 	custom	250,r2,r2,zero
 20006f4:	e0bf4a15 	stw	r2,-728(fp)

   float length = sqrtf(x*x + y*y);
 20006f8:	e0ff4917 	ldw	r3,-732(fp)
 20006fc:	e0bf4917 	ldw	r2,-732(fp)
 2000700:	1887ff32 	custom	252,r3,r3,r2
 2000704:	e13f4a17 	ldw	r4,-728(fp)
 2000708:	e0bf4a17 	ldw	r2,-728(fp)
 200070c:	2085ff32 	custom	252,r2,r4,r2
 2000710:	1885ff72 	custom	253,r2,r3,r2
 2000714:	1005fef2 	custom	251,r2,r2,zero
 2000718:	e0bf4b15 	stw	r2,-724(fp)
   float direction [] = {x/length, y/length};
 200071c:	e0ff4917 	ldw	r3,-732(fp)
 2000720:	e0bf4b17 	ldw	r2,-724(fp)
 2000724:	1885fff2 	custom	255,r2,r3,r2
 2000728:	e0bfbb15 	stw	r2,-276(fp)
 200072c:	e0ff4a17 	ldw	r3,-728(fp)
 2000730:	e0bf4b17 	ldw	r2,-724(fp)
 2000734:	1885fff2 	custom	255,r2,r3,r2
 2000738:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 2.0, 400.0);
 200073c:	e13f4b17 	ldw	r4,-724(fp)
 2000740:	200447c0 	call	200447c <__extendsfdf2>
 2000744:	1011883a 	mov	r8,r2
 2000748:	1813883a 	mov	r9,r3
 200074c:	000d883a 	mov	r6,zero
 2000750:	01d00034 	movhi	r7,16384
 2000754:	4009883a 	mov	r4,r8
 2000758:	480b883a 	mov	r5,r9
 200075c:	20032ac0 	call	20032ac <__divdf3>
 2000760:	1009883a 	mov	r4,r2
 2000764:	180b883a 	mov	r5,r3
 2000768:	2005883a 	mov	r2,r4
 200076c:	2807883a 	mov	r3,r5
 2000770:	000d883a 	mov	r6,zero
 2000774:	01d01e74 	movhi	r7,16505
 2000778:	1009883a 	mov	r4,r2
 200077c:	180b883a 	mov	r5,r3
 2000780:	20030fc0 	call	20030fc <fmin>
 2000784:	100b883a 	mov	r5,r2
 2000788:	180d883a 	mov	r6,r3
 200078c:	2809883a 	mov	r4,r5
 2000790:	300b883a 	mov	r5,r6
 2000794:	200458c0 	call	200458c <__truncdfsf2>
 2000798:	1007883a 	mov	r3,r2
 200079c:	e0ff4415 	stw	r3,-752(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20007a0:	e0bfe504 	addi	r2,fp,-108
 20007a4:	00c01404 	movi	r3,80
 20007a8:	180d883a 	mov	r6,r3
 20007ac:	000b883a 	mov	r5,zero
 20007b0:	1009883a 	mov	r4,r2
 20007b4:	2004ad40 	call	2004ad4 <memset>
 20007b8:	e0ffbb17 	ldw	r3,-276(fp)
 20007bc:	e0bf4417 	ldw	r2,-752(fp)
 20007c0:	1887ff32 	custom	252,r3,r3,r2
 20007c4:	0090a834 	movhi	r2,17056
 20007c8:	1885fff2 	custom	255,r2,r3,r2
 20007cc:	e0bfe515 	stw	r2,-108(fp)
 20007d0:	e0ffbc17 	ldw	r3,-272(fp)
 20007d4:	e0bf4417 	ldw	r2,-752(fp)
 20007d8:	1887ff32 	custom	252,r3,r3,r2
 20007dc:	0090a834 	movhi	r2,17056
 20007e0:	1885fff2 	custom	255,r2,r3,r2
 20007e4:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 20007e8:	e0bf4717 	ldw	r2,-740(fp)
 20007ec:	15000017 	ldw	r20,0(r2)
 20007f0:	e0bf4817 	ldw	r2,-736(fp)
 20007f4:	15400017 	ldw	r21,0(r2)
 20007f8:	e13f4417 	ldw	r4,-752(fp)
 20007fc:	200447c0 	call	200447c <__extendsfdf2>
 2000800:	1025883a 	mov	r18,r2
 2000804:	1827883a 	mov	r19,r3
 2000808:	e0bfe517 	ldw	r2,-108(fp)
 200080c:	1009883a 	mov	r4,r2
 2000810:	200447c0 	call	200447c <__extendsfdf2>
 2000814:	1021883a 	mov	r16,r2
 2000818:	1823883a 	mov	r17,r3
 200081c:	e0bfe617 	ldw	r2,-104(fp)
 2000820:	1009883a 	mov	r4,r2
 2000824:	200447c0 	call	200447c <__extendsfdf2>
 2000828:	1009883a 	mov	r4,r2
 200082c:	180b883a 	mov	r5,r3
 2000830:	d9000315 	stw	r4,12(sp)
 2000834:	d9400415 	stw	r5,16(sp)
 2000838:	dc000115 	stw	r16,4(sp)
 200083c:	dc400215 	stw	r17,8(sp)
 2000840:	dcc00015 	stw	r19,0(sp)
 2000844:	900f883a 	mov	r7,r18
 2000848:	a80d883a 	mov	r6,r21
 200084c:	a00b883a 	mov	r5,r20
 2000850:	010080b4 	movhi	r4,514
 2000854:	21395f04 	addi	r4,r4,-6788
 2000858:	2004cfc0 	call	2004cfc <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 200085c:	e0bfbd04 	addi	r2,fp,-268
 2000860:	00c02804 	movi	r3,160
 2000864:	180d883a 	mov	r6,r3
 2000868:	000b883a 	mov	r5,zero
 200086c:	1009883a 	mov	r4,r2
 2000870:	2004ad40 	call	2004ad4 <memset>

   while(speed >= 0.1)
 2000874:	00067306 	br	2002244 <task2+0x1da4>
   {
	   //Border Collide

	   borderCollide(ball[0], border_collision[0], velocity[0]);
 2000878:	e13fe504 	addi	r4,fp,-108
 200087c:	e0ffbd04 	addi	r3,fp,-268
 2000880:	e0bf4d04 	addi	r2,fp,-716
 2000884:	200d883a 	mov	r6,r4
 2000888:	180b883a 	mov	r5,r3
 200088c:	1009883a 	mov	r4,r2
 2000890:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 2000894:	e0bfe504 	addi	r2,fp,-108
 2000898:	11000204 	addi	r4,r2,8
 200089c:	e0bfbd04 	addi	r2,fp,-268
 20008a0:	10c00404 	addi	r3,r2,16
 20008a4:	e0bf4d04 	addi	r2,fp,-716
 20008a8:	10800204 	addi	r2,r2,8
 20008ac:	200d883a 	mov	r6,r4
 20008b0:	180b883a 	mov	r5,r3
 20008b4:	1009883a 	mov	r4,r2
 20008b8:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 20008bc:	e0bfe504 	addi	r2,fp,-108
 20008c0:	11000404 	addi	r4,r2,16
 20008c4:	e0bfbd04 	addi	r2,fp,-268
 20008c8:	10c00804 	addi	r3,r2,32
 20008cc:	e0bf4d04 	addi	r2,fp,-716
 20008d0:	10800404 	addi	r2,r2,16
 20008d4:	200d883a 	mov	r6,r4
 20008d8:	180b883a 	mov	r5,r3
 20008dc:	1009883a 	mov	r4,r2
 20008e0:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 20008e4:	e0bfe504 	addi	r2,fp,-108
 20008e8:	11000604 	addi	r4,r2,24
 20008ec:	e0bfbd04 	addi	r2,fp,-268
 20008f0:	10c00c04 	addi	r3,r2,48
 20008f4:	e0bf4d04 	addi	r2,fp,-716
 20008f8:	10800604 	addi	r2,r2,24
 20008fc:	200d883a 	mov	r6,r4
 2000900:	180b883a 	mov	r5,r3
 2000904:	1009883a 	mov	r4,r2
 2000908:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 200090c:	e0bfe504 	addi	r2,fp,-108
 2000910:	11000804 	addi	r4,r2,32
 2000914:	e0bfbd04 	addi	r2,fp,-268
 2000918:	10c01004 	addi	r3,r2,64
 200091c:	e0bf4d04 	addi	r2,fp,-716
 2000920:	10800804 	addi	r2,r2,32
 2000924:	200d883a 	mov	r6,r4
 2000928:	180b883a 	mov	r5,r3
 200092c:	1009883a 	mov	r4,r2
 2000930:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 2000934:	e0bfe504 	addi	r2,fp,-108
 2000938:	11000a04 	addi	r4,r2,40
 200093c:	e0bfbd04 	addi	r2,fp,-268
 2000940:	10c01404 	addi	r3,r2,80
 2000944:	e0bf4d04 	addi	r2,fp,-716
 2000948:	10800a04 	addi	r2,r2,40
 200094c:	200d883a 	mov	r6,r4
 2000950:	180b883a 	mov	r5,r3
 2000954:	1009883a 	mov	r4,r2
 2000958:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 200095c:	e0bfe504 	addi	r2,fp,-108
 2000960:	11000c04 	addi	r4,r2,48
 2000964:	e0bfbd04 	addi	r2,fp,-268
 2000968:	10c01804 	addi	r3,r2,96
 200096c:	e0bf4d04 	addi	r2,fp,-716
 2000970:	10800c04 	addi	r2,r2,48
 2000974:	200d883a 	mov	r6,r4
 2000978:	180b883a 	mov	r5,r3
 200097c:	1009883a 	mov	r4,r2
 2000980:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 2000984:	e0bfe504 	addi	r2,fp,-108
 2000988:	11000e04 	addi	r4,r2,56
 200098c:	e0bfbd04 	addi	r2,fp,-268
 2000990:	10c01c04 	addi	r3,r2,112
 2000994:	e0bf4d04 	addi	r2,fp,-716
 2000998:	10800e04 	addi	r2,r2,56
 200099c:	200d883a 	mov	r6,r4
 20009a0:	180b883a 	mov	r5,r3
 20009a4:	1009883a 	mov	r4,r2
 20009a8:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 20009ac:	e0bfe504 	addi	r2,fp,-108
 20009b0:	11001004 	addi	r4,r2,64
 20009b4:	e0bfbd04 	addi	r2,fp,-268
 20009b8:	10c02004 	addi	r3,r2,128
 20009bc:	e0bf4d04 	addi	r2,fp,-716
 20009c0:	10801004 	addi	r2,r2,64
 20009c4:	200d883a 	mov	r6,r4
 20009c8:	180b883a 	mov	r5,r3
 20009cc:	1009883a 	mov	r4,r2
 20009d0:	20028280 	call	2002828 <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 20009d4:	e0bfe504 	addi	r2,fp,-108
 20009d8:	11001204 	addi	r4,r2,72
 20009dc:	e0bfbd04 	addi	r2,fp,-268
 20009e0:	10c02404 	addi	r3,r2,144
 20009e4:	e0bf4d04 	addi	r2,fp,-716
 20009e8:	10801204 	addi	r2,r2,72
 20009ec:	200d883a 	mov	r6,r4
 20009f0:	180b883a 	mov	r5,r3
 20009f4:	1009883a 	mov	r4,r2
 20009f8:	20028280 	call	2002828 <borderCollide>

       //Move the ball

       moveBall(ball[0], velocity[0]);
 20009fc:	e0ffe504 	addi	r3,fp,-108
 2000a00:	e0bf4d04 	addi	r2,fp,-716
 2000a04:	180b883a 	mov	r5,r3
 2000a08:	1009883a 	mov	r4,r2
 2000a0c:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[1], velocity[1]);
 2000a10:	e0bfe504 	addi	r2,fp,-108
 2000a14:	10c00204 	addi	r3,r2,8
 2000a18:	e0bf4d04 	addi	r2,fp,-716
 2000a1c:	10800204 	addi	r2,r2,8
 2000a20:	180b883a 	mov	r5,r3
 2000a24:	1009883a 	mov	r4,r2
 2000a28:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[2], velocity[2]);
 2000a2c:	e0bfe504 	addi	r2,fp,-108
 2000a30:	10c00404 	addi	r3,r2,16
 2000a34:	e0bf4d04 	addi	r2,fp,-716
 2000a38:	10800404 	addi	r2,r2,16
 2000a3c:	180b883a 	mov	r5,r3
 2000a40:	1009883a 	mov	r4,r2
 2000a44:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[3], velocity[3]);
 2000a48:	e0bfe504 	addi	r2,fp,-108
 2000a4c:	10c00604 	addi	r3,r2,24
 2000a50:	e0bf4d04 	addi	r2,fp,-716
 2000a54:	10800604 	addi	r2,r2,24
 2000a58:	180b883a 	mov	r5,r3
 2000a5c:	1009883a 	mov	r4,r2
 2000a60:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[4], velocity[4]);
 2000a64:	e0bfe504 	addi	r2,fp,-108
 2000a68:	10c00804 	addi	r3,r2,32
 2000a6c:	e0bf4d04 	addi	r2,fp,-716
 2000a70:	10800804 	addi	r2,r2,32
 2000a74:	180b883a 	mov	r5,r3
 2000a78:	1009883a 	mov	r4,r2
 2000a7c:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[5], velocity[5]);
 2000a80:	e0bfe504 	addi	r2,fp,-108
 2000a84:	10c00a04 	addi	r3,r2,40
 2000a88:	e0bf4d04 	addi	r2,fp,-716
 2000a8c:	10800a04 	addi	r2,r2,40
 2000a90:	180b883a 	mov	r5,r3
 2000a94:	1009883a 	mov	r4,r2
 2000a98:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[6], velocity[6]);
 2000a9c:	e0bfe504 	addi	r2,fp,-108
 2000aa0:	10c00c04 	addi	r3,r2,48
 2000aa4:	e0bf4d04 	addi	r2,fp,-716
 2000aa8:	10800c04 	addi	r2,r2,48
 2000aac:	180b883a 	mov	r5,r3
 2000ab0:	1009883a 	mov	r4,r2
 2000ab4:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[7], velocity[7]);
 2000ab8:	e0bfe504 	addi	r2,fp,-108
 2000abc:	10c00e04 	addi	r3,r2,56
 2000ac0:	e0bf4d04 	addi	r2,fp,-716
 2000ac4:	10800e04 	addi	r2,r2,56
 2000ac8:	180b883a 	mov	r5,r3
 2000acc:	1009883a 	mov	r4,r2
 2000ad0:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[8], velocity[8]);
 2000ad4:	e0bfe504 	addi	r2,fp,-108
 2000ad8:	10c01004 	addi	r3,r2,64
 2000adc:	e0bf4d04 	addi	r2,fp,-716
 2000ae0:	10801004 	addi	r2,r2,64
 2000ae4:	180b883a 	mov	r5,r3
 2000ae8:	1009883a 	mov	r4,r2
 2000aec:	2002f9c0 	call	2002f9c <moveBall>
       moveBall(ball[9], velocity[9]);
 2000af0:	e0bfe504 	addi	r2,fp,-108
 2000af4:	10c01204 	addi	r3,r2,72
 2000af8:	e0bf4d04 	addi	r2,fp,-716
 2000afc:	10801204 	addi	r2,r2,72
 2000b00:	180b883a 	mov	r5,r3
 2000b04:	1009883a 	mov	r4,r2
 2000b08:	2002f9c0 	call	2002f9c <moveBall>

       //Whole collision

       whole_collide(ball[1],velocity[1]);
 2000b0c:	e0bfe504 	addi	r2,fp,-108
 2000b10:	10c00204 	addi	r3,r2,8
 2000b14:	e0bf4d04 	addi	r2,fp,-716
 2000b18:	10800204 	addi	r2,r2,8
 2000b1c:	180b883a 	mov	r5,r3
 2000b20:	1009883a 	mov	r4,r2
 2000b24:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[2],velocity[2]);
 2000b28:	e0bfe504 	addi	r2,fp,-108
 2000b2c:	10c00404 	addi	r3,r2,16
 2000b30:	e0bf4d04 	addi	r2,fp,-716
 2000b34:	10800404 	addi	r2,r2,16
 2000b38:	180b883a 	mov	r5,r3
 2000b3c:	1009883a 	mov	r4,r2
 2000b40:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[3],velocity[3]);
 2000b44:	e0bfe504 	addi	r2,fp,-108
 2000b48:	10c00604 	addi	r3,r2,24
 2000b4c:	e0bf4d04 	addi	r2,fp,-716
 2000b50:	10800604 	addi	r2,r2,24
 2000b54:	180b883a 	mov	r5,r3
 2000b58:	1009883a 	mov	r4,r2
 2000b5c:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[4],velocity[4]);
 2000b60:	e0bfe504 	addi	r2,fp,-108
 2000b64:	10c00804 	addi	r3,r2,32
 2000b68:	e0bf4d04 	addi	r2,fp,-716
 2000b6c:	10800804 	addi	r2,r2,32
 2000b70:	180b883a 	mov	r5,r3
 2000b74:	1009883a 	mov	r4,r2
 2000b78:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[5],velocity[5]);
 2000b7c:	e0bfe504 	addi	r2,fp,-108
 2000b80:	10c00a04 	addi	r3,r2,40
 2000b84:	e0bf4d04 	addi	r2,fp,-716
 2000b88:	10800a04 	addi	r2,r2,40
 2000b8c:	180b883a 	mov	r5,r3
 2000b90:	1009883a 	mov	r4,r2
 2000b94:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[6],velocity[6]);
 2000b98:	e0bfe504 	addi	r2,fp,-108
 2000b9c:	10c00c04 	addi	r3,r2,48
 2000ba0:	e0bf4d04 	addi	r2,fp,-716
 2000ba4:	10800c04 	addi	r2,r2,48
 2000ba8:	180b883a 	mov	r5,r3
 2000bac:	1009883a 	mov	r4,r2
 2000bb0:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[7],velocity[7]);
 2000bb4:	e0bfe504 	addi	r2,fp,-108
 2000bb8:	10c00e04 	addi	r3,r2,56
 2000bbc:	e0bf4d04 	addi	r2,fp,-716
 2000bc0:	10800e04 	addi	r2,r2,56
 2000bc4:	180b883a 	mov	r5,r3
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[8],velocity[8]);
 2000bd0:	e0bfe504 	addi	r2,fp,-108
 2000bd4:	10c01004 	addi	r3,r2,64
 2000bd8:	e0bf4d04 	addi	r2,fp,-716
 2000bdc:	10801004 	addi	r2,r2,64
 2000be0:	180b883a 	mov	r5,r3
 2000be4:	1009883a 	mov	r4,r2
 2000be8:	20026b40 	call	20026b4 <whole_collide>
       whole_collide(ball[9],velocity[9]);
 2000bec:	e0bfe504 	addi	r2,fp,-108
 2000bf0:	10c01204 	addi	r3,r2,72
 2000bf4:	e0bf4d04 	addi	r2,fp,-716
 2000bf8:	10801204 	addi	r2,r2,72
 2000bfc:	180b883a 	mov	r5,r3
 2000c00:	1009883a 	mov	r4,r2
 2000c04:	20026b40 	call	20026b4 <whole_collide>

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000c08:	e13f6104 	addi	r4,fp,-636
 2000c0c:	e0bf4d04 	addi	r2,fp,-716
 2000c10:	10c00204 	addi	r3,r2,8
 2000c14:	e0bf4d04 	addi	r2,fp,-716
 2000c18:	200d883a 	mov	r6,r4
 2000c1c:	180b883a 	mov	r5,r3
 2000c20:	1009883a 	mov	r4,r2
 2000c24:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000c28:	e0bf6104 	addi	r2,fp,-636
 2000c2c:	11000204 	addi	r4,r2,8
 2000c30:	e0bf4d04 	addi	r2,fp,-716
 2000c34:	10c00404 	addi	r3,r2,16
 2000c38:	e0bf4d04 	addi	r2,fp,-716
 2000c3c:	200d883a 	mov	r6,r4
 2000c40:	180b883a 	mov	r5,r3
 2000c44:	1009883a 	mov	r4,r2
 2000c48:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2000c4c:	e0bf6104 	addi	r2,fp,-636
 2000c50:	11000404 	addi	r4,r2,16
 2000c54:	e0bf4d04 	addi	r2,fp,-716
 2000c58:	10c00604 	addi	r3,r2,24
 2000c5c:	e0bf4d04 	addi	r2,fp,-716
 2000c60:	200d883a 	mov	r6,r4
 2000c64:	180b883a 	mov	r5,r3
 2000c68:	1009883a 	mov	r4,r2
 2000c6c:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 2000c70:	e0bf6104 	addi	r2,fp,-636
 2000c74:	11000604 	addi	r4,r2,24
 2000c78:	e0bf4d04 	addi	r2,fp,-716
 2000c7c:	10c00804 	addi	r3,r2,32
 2000c80:	e0bf4d04 	addi	r2,fp,-716
 2000c84:	200d883a 	mov	r6,r4
 2000c88:	180b883a 	mov	r5,r3
 2000c8c:	1009883a 	mov	r4,r2
 2000c90:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2000c94:	e0bf6104 	addi	r2,fp,-636
 2000c98:	11000804 	addi	r4,r2,32
 2000c9c:	e0bf4d04 	addi	r2,fp,-716
 2000ca0:	10c00a04 	addi	r3,r2,40
 2000ca4:	e0bf4d04 	addi	r2,fp,-716
 2000ca8:	200d883a 	mov	r6,r4
 2000cac:	180b883a 	mov	r5,r3
 2000cb0:	1009883a 	mov	r4,r2
 2000cb4:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2000cb8:	e0bf6104 	addi	r2,fp,-636
 2000cbc:	11000a04 	addi	r4,r2,40
 2000cc0:	e0bf4d04 	addi	r2,fp,-716
 2000cc4:	10c00c04 	addi	r3,r2,48
 2000cc8:	e0bf4d04 	addi	r2,fp,-716
 2000ccc:	200d883a 	mov	r6,r4
 2000cd0:	180b883a 	mov	r5,r3
 2000cd4:	1009883a 	mov	r4,r2
 2000cd8:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 2000cdc:	e0bf6104 	addi	r2,fp,-636
 2000ce0:	11000c04 	addi	r4,r2,48
 2000ce4:	e0bf4d04 	addi	r2,fp,-716
 2000ce8:	10c00e04 	addi	r3,r2,56
 2000cec:	e0bf4d04 	addi	r2,fp,-716
 2000cf0:	200d883a 	mov	r6,r4
 2000cf4:	180b883a 	mov	r5,r3
 2000cf8:	1009883a 	mov	r4,r2
 2000cfc:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 2000d00:	e0bf6104 	addi	r2,fp,-636
 2000d04:	11000e04 	addi	r4,r2,56
 2000d08:	e0bf4d04 	addi	r2,fp,-716
 2000d0c:	10c01004 	addi	r3,r2,64
 2000d10:	e0bf4d04 	addi	r2,fp,-716
 2000d14:	200d883a 	mov	r6,r4
 2000d18:	180b883a 	mov	r5,r3
 2000d1c:	1009883a 	mov	r4,r2
 2000d20:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 2000d24:	e0bf6104 	addi	r2,fp,-636
 2000d28:	11001004 	addi	r4,r2,64
 2000d2c:	e0bf4d04 	addi	r2,fp,-716
 2000d30:	10c01204 	addi	r3,r2,72
 2000d34:	e0bf4d04 	addi	r2,fp,-716
 2000d38:	200d883a 	mov	r6,r4
 2000d3c:	180b883a 	mov	r5,r3
 2000d40:	1009883a 	mov	r4,r2
 2000d44:	20029e40 	call	20029e4 <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2000d48:	e0bf6104 	addi	r2,fp,-636
 2000d4c:	11001204 	addi	r4,r2,72
 2000d50:	e0bf4d04 	addi	r2,fp,-716
 2000d54:	10c00404 	addi	r3,r2,16
 2000d58:	e0bf4d04 	addi	r2,fp,-716
 2000d5c:	10800204 	addi	r2,r2,8
 2000d60:	200d883a 	mov	r6,r4
 2000d64:	180b883a 	mov	r5,r3
 2000d68:	1009883a 	mov	r4,r2
 2000d6c:	20029e40 	call	20029e4 <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 2000d70:	e0bf6104 	addi	r2,fp,-636
 2000d74:	11001404 	addi	r4,r2,80
 2000d78:	e0bf4d04 	addi	r2,fp,-716
 2000d7c:	10c00604 	addi	r3,r2,24
 2000d80:	e0bf4d04 	addi	r2,fp,-716
 2000d84:	10800204 	addi	r2,r2,8
 2000d88:	200d883a 	mov	r6,r4
 2000d8c:	180b883a 	mov	r5,r3
 2000d90:	1009883a 	mov	r4,r2
 2000d94:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2000d98:	e0bf6104 	addi	r2,fp,-636
 2000d9c:	11001604 	addi	r4,r2,88
 2000da0:	e0bf4d04 	addi	r2,fp,-716
 2000da4:	10c00804 	addi	r3,r2,32
 2000da8:	e0bf4d04 	addi	r2,fp,-716
 2000dac:	10800204 	addi	r2,r2,8
 2000db0:	200d883a 	mov	r6,r4
 2000db4:	180b883a 	mov	r5,r3
 2000db8:	1009883a 	mov	r4,r2
 2000dbc:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 2000dc0:	e0bf6104 	addi	r2,fp,-636
 2000dc4:	11001804 	addi	r4,r2,96
 2000dc8:	e0bf4d04 	addi	r2,fp,-716
 2000dcc:	10c00a04 	addi	r3,r2,40
 2000dd0:	e0bf4d04 	addi	r2,fp,-716
 2000dd4:	10800204 	addi	r2,r2,8
 2000dd8:	200d883a 	mov	r6,r4
 2000ddc:	180b883a 	mov	r5,r3
 2000de0:	1009883a 	mov	r4,r2
 2000de4:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 2000de8:	e0bf6104 	addi	r2,fp,-636
 2000dec:	11001a04 	addi	r4,r2,104
 2000df0:	e0bf4d04 	addi	r2,fp,-716
 2000df4:	10c00c04 	addi	r3,r2,48
 2000df8:	e0bf4d04 	addi	r2,fp,-716
 2000dfc:	10800204 	addi	r2,r2,8
 2000e00:	200d883a 	mov	r6,r4
 2000e04:	180b883a 	mov	r5,r3
 2000e08:	1009883a 	mov	r4,r2
 2000e0c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 2000e10:	e0bf6104 	addi	r2,fp,-636
 2000e14:	11001c04 	addi	r4,r2,112
 2000e18:	e0bf4d04 	addi	r2,fp,-716
 2000e1c:	10c00e04 	addi	r3,r2,56
 2000e20:	e0bf4d04 	addi	r2,fp,-716
 2000e24:	10800204 	addi	r2,r2,8
 2000e28:	200d883a 	mov	r6,r4
 2000e2c:	180b883a 	mov	r5,r3
 2000e30:	1009883a 	mov	r4,r2
 2000e34:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2000e38:	e0bf6104 	addi	r2,fp,-636
 2000e3c:	11001e04 	addi	r4,r2,120
 2000e40:	e0bf4d04 	addi	r2,fp,-716
 2000e44:	10c01004 	addi	r3,r2,64
 2000e48:	e0bf4d04 	addi	r2,fp,-716
 2000e4c:	10800204 	addi	r2,r2,8
 2000e50:	200d883a 	mov	r6,r4
 2000e54:	180b883a 	mov	r5,r3
 2000e58:	1009883a 	mov	r4,r2
 2000e5c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 2000e60:	e0bf6104 	addi	r2,fp,-636
 2000e64:	11002004 	addi	r4,r2,128
 2000e68:	e0bf4d04 	addi	r2,fp,-716
 2000e6c:	10c01204 	addi	r3,r2,72
 2000e70:	e0bf4d04 	addi	r2,fp,-716
 2000e74:	10800204 	addi	r2,r2,8
 2000e78:	200d883a 	mov	r6,r4
 2000e7c:	180b883a 	mov	r5,r3
 2000e80:	1009883a 	mov	r4,r2
 2000e84:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2000e88:	e0bf6104 	addi	r2,fp,-636
 2000e8c:	11002204 	addi	r4,r2,136
 2000e90:	e0bf4d04 	addi	r2,fp,-716
 2000e94:	10c00604 	addi	r3,r2,24
 2000e98:	e0bf4d04 	addi	r2,fp,-716
 2000e9c:	10800404 	addi	r2,r2,16
 2000ea0:	200d883a 	mov	r6,r4
 2000ea4:	180b883a 	mov	r5,r3
 2000ea8:	1009883a 	mov	r4,r2
 2000eac:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 2000eb0:	e0bf6104 	addi	r2,fp,-636
 2000eb4:	11002404 	addi	r4,r2,144
 2000eb8:	e0bf4d04 	addi	r2,fp,-716
 2000ebc:	10c00804 	addi	r3,r2,32
 2000ec0:	e0bf4d04 	addi	r2,fp,-716
 2000ec4:	10800404 	addi	r2,r2,16
 2000ec8:	200d883a 	mov	r6,r4
 2000ecc:	180b883a 	mov	r5,r3
 2000ed0:	1009883a 	mov	r4,r2
 2000ed4:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 2000ed8:	e0bf6104 	addi	r2,fp,-636
 2000edc:	11002604 	addi	r4,r2,152
 2000ee0:	e0bf4d04 	addi	r2,fp,-716
 2000ee4:	10c00a04 	addi	r3,r2,40
 2000ee8:	e0bf4d04 	addi	r2,fp,-716
 2000eec:	10800404 	addi	r2,r2,16
 2000ef0:	200d883a 	mov	r6,r4
 2000ef4:	180b883a 	mov	r5,r3
 2000ef8:	1009883a 	mov	r4,r2
 2000efc:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 2000f00:	e0bf6104 	addi	r2,fp,-636
 2000f04:	11002804 	addi	r4,r2,160
 2000f08:	e0bf4d04 	addi	r2,fp,-716
 2000f0c:	10c00c04 	addi	r3,r2,48
 2000f10:	e0bf4d04 	addi	r2,fp,-716
 2000f14:	10800404 	addi	r2,r2,16
 2000f18:	200d883a 	mov	r6,r4
 2000f1c:	180b883a 	mov	r5,r3
 2000f20:	1009883a 	mov	r4,r2
 2000f24:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 2000f28:	e0bf6104 	addi	r2,fp,-636
 2000f2c:	11002a04 	addi	r4,r2,168
 2000f30:	e0bf4d04 	addi	r2,fp,-716
 2000f34:	10c00e04 	addi	r3,r2,56
 2000f38:	e0bf4d04 	addi	r2,fp,-716
 2000f3c:	10800404 	addi	r2,r2,16
 2000f40:	200d883a 	mov	r6,r4
 2000f44:	180b883a 	mov	r5,r3
 2000f48:	1009883a 	mov	r4,r2
 2000f4c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 2000f50:	e0bf6104 	addi	r2,fp,-636
 2000f54:	11002c04 	addi	r4,r2,176
 2000f58:	e0bf4d04 	addi	r2,fp,-716
 2000f5c:	10c01004 	addi	r3,r2,64
 2000f60:	e0bf4d04 	addi	r2,fp,-716
 2000f64:	10800404 	addi	r2,r2,16
 2000f68:	200d883a 	mov	r6,r4
 2000f6c:	180b883a 	mov	r5,r3
 2000f70:	1009883a 	mov	r4,r2
 2000f74:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2000f78:	e0bf6104 	addi	r2,fp,-636
 2000f7c:	11002e04 	addi	r4,r2,184
 2000f80:	e0bf4d04 	addi	r2,fp,-716
 2000f84:	10c01204 	addi	r3,r2,72
 2000f88:	e0bf4d04 	addi	r2,fp,-716
 2000f8c:	10800404 	addi	r2,r2,16
 2000f90:	200d883a 	mov	r6,r4
 2000f94:	180b883a 	mov	r5,r3
 2000f98:	1009883a 	mov	r4,r2
 2000f9c:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 2000fa0:	e0bf6104 	addi	r2,fp,-636
 2000fa4:	11003004 	addi	r4,r2,192
 2000fa8:	e0bf4d04 	addi	r2,fp,-716
 2000fac:	10c00804 	addi	r3,r2,32
 2000fb0:	e0bf4d04 	addi	r2,fp,-716
 2000fb4:	10800604 	addi	r2,r2,24
 2000fb8:	200d883a 	mov	r6,r4
 2000fbc:	180b883a 	mov	r5,r3
 2000fc0:	1009883a 	mov	r4,r2
 2000fc4:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2000fc8:	e0bf6104 	addi	r2,fp,-636
 2000fcc:	11003204 	addi	r4,r2,200
 2000fd0:	e0bf4d04 	addi	r2,fp,-716
 2000fd4:	10c00a04 	addi	r3,r2,40
 2000fd8:	e0bf4d04 	addi	r2,fp,-716
 2000fdc:	10800604 	addi	r2,r2,24
 2000fe0:	200d883a 	mov	r6,r4
 2000fe4:	180b883a 	mov	r5,r3
 2000fe8:	1009883a 	mov	r4,r2
 2000fec:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 2000ff0:	e0bf6104 	addi	r2,fp,-636
 2000ff4:	11003404 	addi	r4,r2,208
 2000ff8:	e0bf4d04 	addi	r2,fp,-716
 2000ffc:	10c00c04 	addi	r3,r2,48
 2001000:	e0bf4d04 	addi	r2,fp,-716
 2001004:	10800604 	addi	r2,r2,24
 2001008:	200d883a 	mov	r6,r4
 200100c:	180b883a 	mov	r5,r3
 2001010:	1009883a 	mov	r4,r2
 2001014:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 2001018:	e0bf6104 	addi	r2,fp,-636
 200101c:	11003604 	addi	r4,r2,216
 2001020:	e0bf4d04 	addi	r2,fp,-716
 2001024:	10c00e04 	addi	r3,r2,56
 2001028:	e0bf4d04 	addi	r2,fp,-716
 200102c:	10800604 	addi	r2,r2,24
 2001030:	200d883a 	mov	r6,r4
 2001034:	180b883a 	mov	r5,r3
 2001038:	1009883a 	mov	r4,r2
 200103c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 2001040:	e0bf6104 	addi	r2,fp,-636
 2001044:	11003804 	addi	r4,r2,224
 2001048:	e0bf4d04 	addi	r2,fp,-716
 200104c:	10c01004 	addi	r3,r2,64
 2001050:	e0bf4d04 	addi	r2,fp,-716
 2001054:	10800604 	addi	r2,r2,24
 2001058:	200d883a 	mov	r6,r4
 200105c:	180b883a 	mov	r5,r3
 2001060:	1009883a 	mov	r4,r2
 2001064:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 2001068:	e0bf6104 	addi	r2,fp,-636
 200106c:	11003a04 	addi	r4,r2,232
 2001070:	e0bf4d04 	addi	r2,fp,-716
 2001074:	10c01204 	addi	r3,r2,72
 2001078:	e0bf4d04 	addi	r2,fp,-716
 200107c:	10800604 	addi	r2,r2,24
 2001080:	200d883a 	mov	r6,r4
 2001084:	180b883a 	mov	r5,r3
 2001088:	1009883a 	mov	r4,r2
 200108c:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 2001090:	e0bf6104 	addi	r2,fp,-636
 2001094:	11003c04 	addi	r4,r2,240
 2001098:	e0bf4d04 	addi	r2,fp,-716
 200109c:	10c00a04 	addi	r3,r2,40
 20010a0:	e0bf4d04 	addi	r2,fp,-716
 20010a4:	10800804 	addi	r2,r2,32
 20010a8:	200d883a 	mov	r6,r4
 20010ac:	180b883a 	mov	r5,r3
 20010b0:	1009883a 	mov	r4,r2
 20010b4:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 20010b8:	e0bf6104 	addi	r2,fp,-636
 20010bc:	11003e04 	addi	r4,r2,248
 20010c0:	e0bf4d04 	addi	r2,fp,-716
 20010c4:	10c00c04 	addi	r3,r2,48
 20010c8:	e0bf4d04 	addi	r2,fp,-716
 20010cc:	10800804 	addi	r2,r2,32
 20010d0:	200d883a 	mov	r6,r4
 20010d4:	180b883a 	mov	r5,r3
 20010d8:	1009883a 	mov	r4,r2
 20010dc:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 20010e0:	e0bf6104 	addi	r2,fp,-636
 20010e4:	11004004 	addi	r4,r2,256
 20010e8:	e0bf4d04 	addi	r2,fp,-716
 20010ec:	10c00e04 	addi	r3,r2,56
 20010f0:	e0bf4d04 	addi	r2,fp,-716
 20010f4:	10800804 	addi	r2,r2,32
 20010f8:	200d883a 	mov	r6,r4
 20010fc:	180b883a 	mov	r5,r3
 2001100:	1009883a 	mov	r4,r2
 2001104:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 2001108:	e0bf6104 	addi	r2,fp,-636
 200110c:	11004204 	addi	r4,r2,264
 2001110:	e0bf4d04 	addi	r2,fp,-716
 2001114:	10c01004 	addi	r3,r2,64
 2001118:	e0bf4d04 	addi	r2,fp,-716
 200111c:	10800804 	addi	r2,r2,32
 2001120:	200d883a 	mov	r6,r4
 2001124:	180b883a 	mov	r5,r3
 2001128:	1009883a 	mov	r4,r2
 200112c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 2001130:	e0bf6104 	addi	r2,fp,-636
 2001134:	11004404 	addi	r4,r2,272
 2001138:	e0bf4d04 	addi	r2,fp,-716
 200113c:	10c01204 	addi	r3,r2,72
 2001140:	e0bf4d04 	addi	r2,fp,-716
 2001144:	10800804 	addi	r2,r2,32
 2001148:	200d883a 	mov	r6,r4
 200114c:	180b883a 	mov	r5,r3
 2001150:	1009883a 	mov	r4,r2
 2001154:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001158:	e0bf6104 	addi	r2,fp,-636
 200115c:	11004604 	addi	r4,r2,280
 2001160:	e0bf4d04 	addi	r2,fp,-716
 2001164:	10c00c04 	addi	r3,r2,48
 2001168:	e0bf4d04 	addi	r2,fp,-716
 200116c:	10800a04 	addi	r2,r2,40
 2001170:	200d883a 	mov	r6,r4
 2001174:	180b883a 	mov	r5,r3
 2001178:	1009883a 	mov	r4,r2
 200117c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 2001180:	e0bf6104 	addi	r2,fp,-636
 2001184:	11004804 	addi	r4,r2,288
 2001188:	e0bf4d04 	addi	r2,fp,-716
 200118c:	10c00e04 	addi	r3,r2,56
 2001190:	e0bf4d04 	addi	r2,fp,-716
 2001194:	10800a04 	addi	r2,r2,40
 2001198:	200d883a 	mov	r6,r4
 200119c:	180b883a 	mov	r5,r3
 20011a0:	1009883a 	mov	r4,r2
 20011a4:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 20011a8:	e0bf6104 	addi	r2,fp,-636
 20011ac:	11004a04 	addi	r4,r2,296
 20011b0:	e0bf4d04 	addi	r2,fp,-716
 20011b4:	10c01004 	addi	r3,r2,64
 20011b8:	e0bf4d04 	addi	r2,fp,-716
 20011bc:	10800a04 	addi	r2,r2,40
 20011c0:	200d883a 	mov	r6,r4
 20011c4:	180b883a 	mov	r5,r3
 20011c8:	1009883a 	mov	r4,r2
 20011cc:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 20011d0:	e0bf6104 	addi	r2,fp,-636
 20011d4:	11004c04 	addi	r4,r2,304
 20011d8:	e0bf4d04 	addi	r2,fp,-716
 20011dc:	10c01204 	addi	r3,r2,72
 20011e0:	e0bf4d04 	addi	r2,fp,-716
 20011e4:	10800a04 	addi	r2,r2,40
 20011e8:	200d883a 	mov	r6,r4
 20011ec:	180b883a 	mov	r5,r3
 20011f0:	1009883a 	mov	r4,r2
 20011f4:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 20011f8:	e0bf6104 	addi	r2,fp,-636
 20011fc:	11004e04 	addi	r4,r2,312
 2001200:	e0bf4d04 	addi	r2,fp,-716
 2001204:	10c00e04 	addi	r3,r2,56
 2001208:	e0bf4d04 	addi	r2,fp,-716
 200120c:	10800c04 	addi	r2,r2,48
 2001210:	200d883a 	mov	r6,r4
 2001214:	180b883a 	mov	r5,r3
 2001218:	1009883a 	mov	r4,r2
 200121c:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 2001220:	e0bf6104 	addi	r2,fp,-636
 2001224:	11005004 	addi	r4,r2,320
 2001228:	e0bf4d04 	addi	r2,fp,-716
 200122c:	10c01004 	addi	r3,r2,64
 2001230:	e0bf4d04 	addi	r2,fp,-716
 2001234:	10800c04 	addi	r2,r2,48
 2001238:	200d883a 	mov	r6,r4
 200123c:	180b883a 	mov	r5,r3
 2001240:	1009883a 	mov	r4,r2
 2001244:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001248:	e0bf6104 	addi	r2,fp,-636
 200124c:	11005204 	addi	r4,r2,328
 2001250:	e0bf4d04 	addi	r2,fp,-716
 2001254:	10c01204 	addi	r3,r2,72
 2001258:	e0bf4d04 	addi	r2,fp,-716
 200125c:	10800c04 	addi	r2,r2,48
 2001260:	200d883a 	mov	r6,r4
 2001264:	180b883a 	mov	r5,r3
 2001268:	1009883a 	mov	r4,r2
 200126c:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 2001270:	e0bf6104 	addi	r2,fp,-636
 2001274:	11005404 	addi	r4,r2,336
 2001278:	e0bf4d04 	addi	r2,fp,-716
 200127c:	10c01004 	addi	r3,r2,64
 2001280:	e0bf4d04 	addi	r2,fp,-716
 2001284:	10800e04 	addi	r2,r2,56
 2001288:	200d883a 	mov	r6,r4
 200128c:	180b883a 	mov	r5,r3
 2001290:	1009883a 	mov	r4,r2
 2001294:	20029e40 	call	20029e4 <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 2001298:	e0bf6104 	addi	r2,fp,-636
 200129c:	11005604 	addi	r4,r2,344
 20012a0:	e0bf4d04 	addi	r2,fp,-716
 20012a4:	10c01204 	addi	r3,r2,72
 20012a8:	e0bf4d04 	addi	r2,fp,-716
 20012ac:	10800e04 	addi	r2,r2,56
 20012b0:	200d883a 	mov	r6,r4
 20012b4:	180b883a 	mov	r5,r3
 20012b8:	1009883a 	mov	r4,r2
 20012bc:	20029e40 	call	20029e4 <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 20012c0:	e0bf6104 	addi	r2,fp,-636
 20012c4:	11005804 	addi	r4,r2,352
 20012c8:	e0bf4d04 	addi	r2,fp,-716
 20012cc:	10c01204 	addi	r3,r2,72
 20012d0:	e0bf4d04 	addi	r2,fp,-716
 20012d4:	10801004 	addi	r2,r2,64
 20012d8:	200d883a 	mov	r6,r4
 20012dc:	180b883a 	mov	r5,r3
 20012e0:	1009883a 	mov	r4,r2
 20012e4:	20029e40 	call	20029e4 <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 20012e8:	e0bfe504 	addi	r2,fp,-108
 20012ec:	11800204 	addi	r6,r2,8
 20012f0:	e17fe504 	addi	r5,fp,-108
 20012f4:	e0bf4d04 	addi	r2,fp,-716
 20012f8:	11000204 	addi	r4,r2,8
 20012fc:	e0ff4d04 	addi	r3,fp,-716
 2001300:	d8000115 	stw	zero,4(sp)
 2001304:	e0bf6104 	addi	r2,fp,-636
 2001308:	d8800015 	stw	r2,0(sp)
 200130c:	300f883a 	mov	r7,r6
 2001310:	280d883a 	mov	r6,r5
 2001314:	200b883a 	mov	r5,r4
 2001318:	1809883a 	mov	r4,r3
 200131c:	2002aa40 	call	2002aa4 <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 2001320:	e0bfe504 	addi	r2,fp,-108
 2001324:	11800404 	addi	r6,r2,16
 2001328:	e17fe504 	addi	r5,fp,-108
 200132c:	e0bf4d04 	addi	r2,fp,-716
 2001330:	11000404 	addi	r4,r2,16
 2001334:	e0ff4d04 	addi	r3,fp,-716
 2001338:	00800044 	movi	r2,1
 200133c:	d8800115 	stw	r2,4(sp)
 2001340:	e0bf6104 	addi	r2,fp,-636
 2001344:	10800204 	addi	r2,r2,8
 2001348:	d8800015 	stw	r2,0(sp)
 200134c:	300f883a 	mov	r7,r6
 2001350:	280d883a 	mov	r6,r5
 2001354:	200b883a 	mov	r5,r4
 2001358:	1809883a 	mov	r4,r3
 200135c:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 2001360:	e0bfe504 	addi	r2,fp,-108
 2001364:	11800604 	addi	r6,r2,24
 2001368:	e17fe504 	addi	r5,fp,-108
 200136c:	e0bf4d04 	addi	r2,fp,-716
 2001370:	11000604 	addi	r4,r2,24
 2001374:	e0ff4d04 	addi	r3,fp,-716
 2001378:	00800084 	movi	r2,2
 200137c:	d8800115 	stw	r2,4(sp)
 2001380:	e0bf6104 	addi	r2,fp,-636
 2001384:	10800404 	addi	r2,r2,16
 2001388:	d8800015 	stw	r2,0(sp)
 200138c:	300f883a 	mov	r7,r6
 2001390:	280d883a 	mov	r6,r5
 2001394:	200b883a 	mov	r5,r4
 2001398:	1809883a 	mov	r4,r3
 200139c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 20013a0:	e0bfe504 	addi	r2,fp,-108
 20013a4:	11800804 	addi	r6,r2,32
 20013a8:	e17fe504 	addi	r5,fp,-108
 20013ac:	e0bf4d04 	addi	r2,fp,-716
 20013b0:	11000804 	addi	r4,r2,32
 20013b4:	e0ff4d04 	addi	r3,fp,-716
 20013b8:	008000c4 	movi	r2,3
 20013bc:	d8800115 	stw	r2,4(sp)
 20013c0:	e0bf6104 	addi	r2,fp,-636
 20013c4:	10800604 	addi	r2,r2,24
 20013c8:	d8800015 	stw	r2,0(sp)
 20013cc:	300f883a 	mov	r7,r6
 20013d0:	280d883a 	mov	r6,r5
 20013d4:	200b883a 	mov	r5,r4
 20013d8:	1809883a 	mov	r4,r3
 20013dc:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 20013e0:	e0bfe504 	addi	r2,fp,-108
 20013e4:	11800a04 	addi	r6,r2,40
 20013e8:	e17fe504 	addi	r5,fp,-108
 20013ec:	e0bf4d04 	addi	r2,fp,-716
 20013f0:	11000a04 	addi	r4,r2,40
 20013f4:	e0ff4d04 	addi	r3,fp,-716
 20013f8:	00800104 	movi	r2,4
 20013fc:	d8800115 	stw	r2,4(sp)
 2001400:	e0bf6104 	addi	r2,fp,-636
 2001404:	10800804 	addi	r2,r2,32
 2001408:	d8800015 	stw	r2,0(sp)
 200140c:	300f883a 	mov	r7,r6
 2001410:	280d883a 	mov	r6,r5
 2001414:	200b883a 	mov	r5,r4
 2001418:	1809883a 	mov	r4,r3
 200141c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 2001420:	e0bfe504 	addi	r2,fp,-108
 2001424:	11800c04 	addi	r6,r2,48
 2001428:	e17fe504 	addi	r5,fp,-108
 200142c:	e0bf4d04 	addi	r2,fp,-716
 2001430:	11000c04 	addi	r4,r2,48
 2001434:	e0ff4d04 	addi	r3,fp,-716
 2001438:	00800144 	movi	r2,5
 200143c:	d8800115 	stw	r2,4(sp)
 2001440:	e0bf6104 	addi	r2,fp,-636
 2001444:	10800a04 	addi	r2,r2,40
 2001448:	d8800015 	stw	r2,0(sp)
 200144c:	300f883a 	mov	r7,r6
 2001450:	280d883a 	mov	r6,r5
 2001454:	200b883a 	mov	r5,r4
 2001458:	1809883a 	mov	r4,r3
 200145c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 2001460:	e0bfe504 	addi	r2,fp,-108
 2001464:	11800e04 	addi	r6,r2,56
 2001468:	e17fe504 	addi	r5,fp,-108
 200146c:	e0bf4d04 	addi	r2,fp,-716
 2001470:	11000e04 	addi	r4,r2,56
 2001474:	e0ff4d04 	addi	r3,fp,-716
 2001478:	00800184 	movi	r2,6
 200147c:	d8800115 	stw	r2,4(sp)
 2001480:	e0bf6104 	addi	r2,fp,-636
 2001484:	10800c04 	addi	r2,r2,48
 2001488:	d8800015 	stw	r2,0(sp)
 200148c:	300f883a 	mov	r7,r6
 2001490:	280d883a 	mov	r6,r5
 2001494:	200b883a 	mov	r5,r4
 2001498:	1809883a 	mov	r4,r3
 200149c:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 20014a0:	e0bfe504 	addi	r2,fp,-108
 20014a4:	11801004 	addi	r6,r2,64
 20014a8:	e17fe504 	addi	r5,fp,-108
 20014ac:	e0bf4d04 	addi	r2,fp,-716
 20014b0:	11001004 	addi	r4,r2,64
 20014b4:	e0ff4d04 	addi	r3,fp,-716
 20014b8:	008001c4 	movi	r2,7
 20014bc:	d8800115 	stw	r2,4(sp)
 20014c0:	e0bf6104 	addi	r2,fp,-636
 20014c4:	10800e04 	addi	r2,r2,56
 20014c8:	d8800015 	stw	r2,0(sp)
 20014cc:	300f883a 	mov	r7,r6
 20014d0:	280d883a 	mov	r6,r5
 20014d4:	200b883a 	mov	r5,r4
 20014d8:	1809883a 	mov	r4,r3
 20014dc:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 20014e0:	e0bfe504 	addi	r2,fp,-108
 20014e4:	11801204 	addi	r6,r2,72
 20014e8:	e17fe504 	addi	r5,fp,-108
 20014ec:	e0bf4d04 	addi	r2,fp,-716
 20014f0:	11001204 	addi	r4,r2,72
 20014f4:	e0ff4d04 	addi	r3,fp,-716
 20014f8:	00800204 	movi	r2,8
 20014fc:	d8800115 	stw	r2,4(sp)
 2001500:	e0bf6104 	addi	r2,fp,-636
 2001504:	10801004 	addi	r2,r2,64
 2001508:	d8800015 	stw	r2,0(sp)
 200150c:	300f883a 	mov	r7,r6
 2001510:	280d883a 	mov	r6,r5
 2001514:	200b883a 	mov	r5,r4
 2001518:	1809883a 	mov	r4,r3
 200151c:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 2001520:	e0bfe504 	addi	r2,fp,-108
 2001524:	11800404 	addi	r6,r2,16
 2001528:	e0bfe504 	addi	r2,fp,-108
 200152c:	11400204 	addi	r5,r2,8
 2001530:	e0bf4d04 	addi	r2,fp,-716
 2001534:	11000404 	addi	r4,r2,16
 2001538:	e0bf4d04 	addi	r2,fp,-716
 200153c:	10c00204 	addi	r3,r2,8
 2001540:	00800244 	movi	r2,9
 2001544:	d8800115 	stw	r2,4(sp)
 2001548:	e0bf6104 	addi	r2,fp,-636
 200154c:	10801204 	addi	r2,r2,72
 2001550:	d8800015 	stw	r2,0(sp)
 2001554:	300f883a 	mov	r7,r6
 2001558:	280d883a 	mov	r6,r5
 200155c:	200b883a 	mov	r5,r4
 2001560:	1809883a 	mov	r4,r3
 2001564:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 2001568:	e0bfe504 	addi	r2,fp,-108
 200156c:	11800604 	addi	r6,r2,24
 2001570:	e0bfe504 	addi	r2,fp,-108
 2001574:	11400204 	addi	r5,r2,8
 2001578:	e0bf4d04 	addi	r2,fp,-716
 200157c:	11000604 	addi	r4,r2,24
 2001580:	e0bf4d04 	addi	r2,fp,-716
 2001584:	10c00204 	addi	r3,r2,8
 2001588:	00800284 	movi	r2,10
 200158c:	d8800115 	stw	r2,4(sp)
 2001590:	e0bf6104 	addi	r2,fp,-636
 2001594:	10801404 	addi	r2,r2,80
 2001598:	d8800015 	stw	r2,0(sp)
 200159c:	300f883a 	mov	r7,r6
 20015a0:	280d883a 	mov	r6,r5
 20015a4:	200b883a 	mov	r5,r4
 20015a8:	1809883a 	mov	r4,r3
 20015ac:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 20015b0:	e0bfe504 	addi	r2,fp,-108
 20015b4:	11800804 	addi	r6,r2,32
 20015b8:	e0bfe504 	addi	r2,fp,-108
 20015bc:	11400204 	addi	r5,r2,8
 20015c0:	e0bf4d04 	addi	r2,fp,-716
 20015c4:	11000804 	addi	r4,r2,32
 20015c8:	e0bf4d04 	addi	r2,fp,-716
 20015cc:	10c00204 	addi	r3,r2,8
 20015d0:	008002c4 	movi	r2,11
 20015d4:	d8800115 	stw	r2,4(sp)
 20015d8:	e0bf6104 	addi	r2,fp,-636
 20015dc:	10801604 	addi	r2,r2,88
 20015e0:	d8800015 	stw	r2,0(sp)
 20015e4:	300f883a 	mov	r7,r6
 20015e8:	280d883a 	mov	r6,r5
 20015ec:	200b883a 	mov	r5,r4
 20015f0:	1809883a 	mov	r4,r3
 20015f4:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 20015f8:	e0bfe504 	addi	r2,fp,-108
 20015fc:	11800a04 	addi	r6,r2,40
 2001600:	e0bfe504 	addi	r2,fp,-108
 2001604:	11400204 	addi	r5,r2,8
 2001608:	e0bf4d04 	addi	r2,fp,-716
 200160c:	11000a04 	addi	r4,r2,40
 2001610:	e0bf4d04 	addi	r2,fp,-716
 2001614:	10c00204 	addi	r3,r2,8
 2001618:	00800304 	movi	r2,12
 200161c:	d8800115 	stw	r2,4(sp)
 2001620:	e0bf6104 	addi	r2,fp,-636
 2001624:	10801804 	addi	r2,r2,96
 2001628:	d8800015 	stw	r2,0(sp)
 200162c:	300f883a 	mov	r7,r6
 2001630:	280d883a 	mov	r6,r5
 2001634:	200b883a 	mov	r5,r4
 2001638:	1809883a 	mov	r4,r3
 200163c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 2001640:	e0bfe504 	addi	r2,fp,-108
 2001644:	11800c04 	addi	r6,r2,48
 2001648:	e0bfe504 	addi	r2,fp,-108
 200164c:	11400204 	addi	r5,r2,8
 2001650:	e0bf4d04 	addi	r2,fp,-716
 2001654:	11000c04 	addi	r4,r2,48
 2001658:	e0bf4d04 	addi	r2,fp,-716
 200165c:	10c00204 	addi	r3,r2,8
 2001660:	00800344 	movi	r2,13
 2001664:	d8800115 	stw	r2,4(sp)
 2001668:	e0bf6104 	addi	r2,fp,-636
 200166c:	10801a04 	addi	r2,r2,104
 2001670:	d8800015 	stw	r2,0(sp)
 2001674:	300f883a 	mov	r7,r6
 2001678:	280d883a 	mov	r6,r5
 200167c:	200b883a 	mov	r5,r4
 2001680:	1809883a 	mov	r4,r3
 2001684:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 2001688:	e0bfe504 	addi	r2,fp,-108
 200168c:	11800e04 	addi	r6,r2,56
 2001690:	e0bfe504 	addi	r2,fp,-108
 2001694:	11400204 	addi	r5,r2,8
 2001698:	e0bf4d04 	addi	r2,fp,-716
 200169c:	11000e04 	addi	r4,r2,56
 20016a0:	e0bf4d04 	addi	r2,fp,-716
 20016a4:	10c00204 	addi	r3,r2,8
 20016a8:	00800384 	movi	r2,14
 20016ac:	d8800115 	stw	r2,4(sp)
 20016b0:	e0bf6104 	addi	r2,fp,-636
 20016b4:	10801c04 	addi	r2,r2,112
 20016b8:	d8800015 	stw	r2,0(sp)
 20016bc:	300f883a 	mov	r7,r6
 20016c0:	280d883a 	mov	r6,r5
 20016c4:	200b883a 	mov	r5,r4
 20016c8:	1809883a 	mov	r4,r3
 20016cc:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 20016d0:	e0bfe504 	addi	r2,fp,-108
 20016d4:	11801004 	addi	r6,r2,64
 20016d8:	e0bfe504 	addi	r2,fp,-108
 20016dc:	11400204 	addi	r5,r2,8
 20016e0:	e0bf4d04 	addi	r2,fp,-716
 20016e4:	11001004 	addi	r4,r2,64
 20016e8:	e0bf4d04 	addi	r2,fp,-716
 20016ec:	10c00204 	addi	r3,r2,8
 20016f0:	008003c4 	movi	r2,15
 20016f4:	d8800115 	stw	r2,4(sp)
 20016f8:	e0bf6104 	addi	r2,fp,-636
 20016fc:	10801e04 	addi	r2,r2,120
 2001700:	d8800015 	stw	r2,0(sp)
 2001704:	300f883a 	mov	r7,r6
 2001708:	280d883a 	mov	r6,r5
 200170c:	200b883a 	mov	r5,r4
 2001710:	1809883a 	mov	r4,r3
 2001714:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 2001718:	e0bfe504 	addi	r2,fp,-108
 200171c:	11801204 	addi	r6,r2,72
 2001720:	e0bfe504 	addi	r2,fp,-108
 2001724:	11400204 	addi	r5,r2,8
 2001728:	e0bf4d04 	addi	r2,fp,-716
 200172c:	11001204 	addi	r4,r2,72
 2001730:	e0bf4d04 	addi	r2,fp,-716
 2001734:	10c00204 	addi	r3,r2,8
 2001738:	00800404 	movi	r2,16
 200173c:	d8800115 	stw	r2,4(sp)
 2001740:	e0bf6104 	addi	r2,fp,-636
 2001744:	10802004 	addi	r2,r2,128
 2001748:	d8800015 	stw	r2,0(sp)
 200174c:	300f883a 	mov	r7,r6
 2001750:	280d883a 	mov	r6,r5
 2001754:	200b883a 	mov	r5,r4
 2001758:	1809883a 	mov	r4,r3
 200175c:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 2001760:	e0bfe504 	addi	r2,fp,-108
 2001764:	11800604 	addi	r6,r2,24
 2001768:	e0bfe504 	addi	r2,fp,-108
 200176c:	11400404 	addi	r5,r2,16
 2001770:	e0bf4d04 	addi	r2,fp,-716
 2001774:	11000604 	addi	r4,r2,24
 2001778:	e0bf4d04 	addi	r2,fp,-716
 200177c:	10c00404 	addi	r3,r2,16
 2001780:	00800444 	movi	r2,17
 2001784:	d8800115 	stw	r2,4(sp)
 2001788:	e0bf6104 	addi	r2,fp,-636
 200178c:	10802204 	addi	r2,r2,136
 2001790:	d8800015 	stw	r2,0(sp)
 2001794:	300f883a 	mov	r7,r6
 2001798:	280d883a 	mov	r6,r5
 200179c:	200b883a 	mov	r5,r4
 20017a0:	1809883a 	mov	r4,r3
 20017a4:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 20017a8:	e0bfe504 	addi	r2,fp,-108
 20017ac:	11800804 	addi	r6,r2,32
 20017b0:	e0bfe504 	addi	r2,fp,-108
 20017b4:	11400404 	addi	r5,r2,16
 20017b8:	e0bf4d04 	addi	r2,fp,-716
 20017bc:	11000804 	addi	r4,r2,32
 20017c0:	e0bf4d04 	addi	r2,fp,-716
 20017c4:	10c00404 	addi	r3,r2,16
 20017c8:	00800484 	movi	r2,18
 20017cc:	d8800115 	stw	r2,4(sp)
 20017d0:	e0bf6104 	addi	r2,fp,-636
 20017d4:	10802404 	addi	r2,r2,144
 20017d8:	d8800015 	stw	r2,0(sp)
 20017dc:	300f883a 	mov	r7,r6
 20017e0:	280d883a 	mov	r6,r5
 20017e4:	200b883a 	mov	r5,r4
 20017e8:	1809883a 	mov	r4,r3
 20017ec:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 20017f0:	e0bfe504 	addi	r2,fp,-108
 20017f4:	11800a04 	addi	r6,r2,40
 20017f8:	e0bfe504 	addi	r2,fp,-108
 20017fc:	11400404 	addi	r5,r2,16
 2001800:	e0bf4d04 	addi	r2,fp,-716
 2001804:	11000a04 	addi	r4,r2,40
 2001808:	e0bf4d04 	addi	r2,fp,-716
 200180c:	10c00404 	addi	r3,r2,16
 2001810:	008004c4 	movi	r2,19
 2001814:	d8800115 	stw	r2,4(sp)
 2001818:	e0bf6104 	addi	r2,fp,-636
 200181c:	10802604 	addi	r2,r2,152
 2001820:	d8800015 	stw	r2,0(sp)
 2001824:	300f883a 	mov	r7,r6
 2001828:	280d883a 	mov	r6,r5
 200182c:	200b883a 	mov	r5,r4
 2001830:	1809883a 	mov	r4,r3
 2001834:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001838:	e0bfe504 	addi	r2,fp,-108
 200183c:	11800c04 	addi	r6,r2,48
 2001840:	e0bfe504 	addi	r2,fp,-108
 2001844:	11400404 	addi	r5,r2,16
 2001848:	e0bf4d04 	addi	r2,fp,-716
 200184c:	11000c04 	addi	r4,r2,48
 2001850:	e0bf4d04 	addi	r2,fp,-716
 2001854:	10c00404 	addi	r3,r2,16
 2001858:	00800504 	movi	r2,20
 200185c:	d8800115 	stw	r2,4(sp)
 2001860:	e0bf6104 	addi	r2,fp,-636
 2001864:	10802804 	addi	r2,r2,160
 2001868:	d8800015 	stw	r2,0(sp)
 200186c:	300f883a 	mov	r7,r6
 2001870:	280d883a 	mov	r6,r5
 2001874:	200b883a 	mov	r5,r4
 2001878:	1809883a 	mov	r4,r3
 200187c:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 2001880:	e0bfe504 	addi	r2,fp,-108
 2001884:	11800e04 	addi	r6,r2,56
 2001888:	e0bfe504 	addi	r2,fp,-108
 200188c:	11400404 	addi	r5,r2,16
 2001890:	e0bf4d04 	addi	r2,fp,-716
 2001894:	11000e04 	addi	r4,r2,56
 2001898:	e0bf4d04 	addi	r2,fp,-716
 200189c:	10c00404 	addi	r3,r2,16
 20018a0:	00800544 	movi	r2,21
 20018a4:	d8800115 	stw	r2,4(sp)
 20018a8:	e0bf6104 	addi	r2,fp,-636
 20018ac:	10802a04 	addi	r2,r2,168
 20018b0:	d8800015 	stw	r2,0(sp)
 20018b4:	300f883a 	mov	r7,r6
 20018b8:	280d883a 	mov	r6,r5
 20018bc:	200b883a 	mov	r5,r4
 20018c0:	1809883a 	mov	r4,r3
 20018c4:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 20018c8:	e0bfe504 	addi	r2,fp,-108
 20018cc:	11801004 	addi	r6,r2,64
 20018d0:	e0bfe504 	addi	r2,fp,-108
 20018d4:	11400404 	addi	r5,r2,16
 20018d8:	e0bf4d04 	addi	r2,fp,-716
 20018dc:	11001004 	addi	r4,r2,64
 20018e0:	e0bf4d04 	addi	r2,fp,-716
 20018e4:	10c00404 	addi	r3,r2,16
 20018e8:	00800584 	movi	r2,22
 20018ec:	d8800115 	stw	r2,4(sp)
 20018f0:	e0bf6104 	addi	r2,fp,-636
 20018f4:	10802c04 	addi	r2,r2,176
 20018f8:	d8800015 	stw	r2,0(sp)
 20018fc:	300f883a 	mov	r7,r6
 2001900:	280d883a 	mov	r6,r5
 2001904:	200b883a 	mov	r5,r4
 2001908:	1809883a 	mov	r4,r3
 200190c:	2002aa40 	call	2002aa4 <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 2001910:	e0bfe504 	addi	r2,fp,-108
 2001914:	11801204 	addi	r6,r2,72
 2001918:	e0bfe504 	addi	r2,fp,-108
 200191c:	11400404 	addi	r5,r2,16
 2001920:	e0bf4d04 	addi	r2,fp,-716
 2001924:	11001204 	addi	r4,r2,72
 2001928:	e0bf4d04 	addi	r2,fp,-716
 200192c:	10c00404 	addi	r3,r2,16
 2001930:	008005c4 	movi	r2,23
 2001934:	d8800115 	stw	r2,4(sp)
 2001938:	e0bf6104 	addi	r2,fp,-636
 200193c:	10802e04 	addi	r2,r2,184
 2001940:	d8800015 	stw	r2,0(sp)
 2001944:	300f883a 	mov	r7,r6
 2001948:	280d883a 	mov	r6,r5
 200194c:	200b883a 	mov	r5,r4
 2001950:	1809883a 	mov	r4,r3
 2001954:	2002aa40 	call	2002aa4 <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001958:	e0bfe504 	addi	r2,fp,-108
 200195c:	11800804 	addi	r6,r2,32
 2001960:	e0bfe504 	addi	r2,fp,-108
 2001964:	11400604 	addi	r5,r2,24
 2001968:	e0bf4d04 	addi	r2,fp,-716
 200196c:	11000804 	addi	r4,r2,32
 2001970:	e0bf4d04 	addi	r2,fp,-716
 2001974:	10c00604 	addi	r3,r2,24
 2001978:	00800604 	movi	r2,24
 200197c:	d8800115 	stw	r2,4(sp)
 2001980:	e0bf6104 	addi	r2,fp,-636
 2001984:	10803004 	addi	r2,r2,192
 2001988:	d8800015 	stw	r2,0(sp)
 200198c:	300f883a 	mov	r7,r6
 2001990:	280d883a 	mov	r6,r5
 2001994:	200b883a 	mov	r5,r4
 2001998:	1809883a 	mov	r4,r3
 200199c:	2002aa40 	call	2002aa4 <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 20019a0:	e0bfe504 	addi	r2,fp,-108
 20019a4:	11800a04 	addi	r6,r2,40
 20019a8:	e0bfe504 	addi	r2,fp,-108
 20019ac:	11400604 	addi	r5,r2,24
 20019b0:	e0bf4d04 	addi	r2,fp,-716
 20019b4:	11000a04 	addi	r4,r2,40
 20019b8:	e0bf4d04 	addi	r2,fp,-716
 20019bc:	10c00604 	addi	r3,r2,24
 20019c0:	00800644 	movi	r2,25
 20019c4:	d8800115 	stw	r2,4(sp)
 20019c8:	e0bf6104 	addi	r2,fp,-636
 20019cc:	10803204 	addi	r2,r2,200
 20019d0:	d8800015 	stw	r2,0(sp)
 20019d4:	300f883a 	mov	r7,r6
 20019d8:	280d883a 	mov	r6,r5
 20019dc:	200b883a 	mov	r5,r4
 20019e0:	1809883a 	mov	r4,r3
 20019e4:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 20019e8:	e0bfe504 	addi	r2,fp,-108
 20019ec:	11800c04 	addi	r6,r2,48
 20019f0:	e0bfe504 	addi	r2,fp,-108
 20019f4:	11400604 	addi	r5,r2,24
 20019f8:	e0bf4d04 	addi	r2,fp,-716
 20019fc:	11000c04 	addi	r4,r2,48
 2001a00:	e0bf4d04 	addi	r2,fp,-716
 2001a04:	10c00604 	addi	r3,r2,24
 2001a08:	00800684 	movi	r2,26
 2001a0c:	d8800115 	stw	r2,4(sp)
 2001a10:	e0bf6104 	addi	r2,fp,-636
 2001a14:	10803404 	addi	r2,r2,208
 2001a18:	d8800015 	stw	r2,0(sp)
 2001a1c:	300f883a 	mov	r7,r6
 2001a20:	280d883a 	mov	r6,r5
 2001a24:	200b883a 	mov	r5,r4
 2001a28:	1809883a 	mov	r4,r3
 2001a2c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001a30:	e0bfe504 	addi	r2,fp,-108
 2001a34:	11800e04 	addi	r6,r2,56
 2001a38:	e0bfe504 	addi	r2,fp,-108
 2001a3c:	11400604 	addi	r5,r2,24
 2001a40:	e0bf4d04 	addi	r2,fp,-716
 2001a44:	11000e04 	addi	r4,r2,56
 2001a48:	e0bf4d04 	addi	r2,fp,-716
 2001a4c:	10c00604 	addi	r3,r2,24
 2001a50:	008006c4 	movi	r2,27
 2001a54:	d8800115 	stw	r2,4(sp)
 2001a58:	e0bf6104 	addi	r2,fp,-636
 2001a5c:	10803604 	addi	r2,r2,216
 2001a60:	d8800015 	stw	r2,0(sp)
 2001a64:	300f883a 	mov	r7,r6
 2001a68:	280d883a 	mov	r6,r5
 2001a6c:	200b883a 	mov	r5,r4
 2001a70:	1809883a 	mov	r4,r3
 2001a74:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001a78:	e0bfe504 	addi	r2,fp,-108
 2001a7c:	11801004 	addi	r6,r2,64
 2001a80:	e0bfe504 	addi	r2,fp,-108
 2001a84:	11400604 	addi	r5,r2,24
 2001a88:	e0bf4d04 	addi	r2,fp,-716
 2001a8c:	11001004 	addi	r4,r2,64
 2001a90:	e0bf4d04 	addi	r2,fp,-716
 2001a94:	10c00604 	addi	r3,r2,24
 2001a98:	00800704 	movi	r2,28
 2001a9c:	d8800115 	stw	r2,4(sp)
 2001aa0:	e0bf6104 	addi	r2,fp,-636
 2001aa4:	10803804 	addi	r2,r2,224
 2001aa8:	d8800015 	stw	r2,0(sp)
 2001aac:	300f883a 	mov	r7,r6
 2001ab0:	280d883a 	mov	r6,r5
 2001ab4:	200b883a 	mov	r5,r4
 2001ab8:	1809883a 	mov	r4,r3
 2001abc:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001ac0:	e0bfe504 	addi	r2,fp,-108
 2001ac4:	11801204 	addi	r6,r2,72
 2001ac8:	e0bfe504 	addi	r2,fp,-108
 2001acc:	11400604 	addi	r5,r2,24
 2001ad0:	e0bf4d04 	addi	r2,fp,-716
 2001ad4:	11001204 	addi	r4,r2,72
 2001ad8:	e0bf4d04 	addi	r2,fp,-716
 2001adc:	10c00604 	addi	r3,r2,24
 2001ae0:	00800744 	movi	r2,29
 2001ae4:	d8800115 	stw	r2,4(sp)
 2001ae8:	e0bf6104 	addi	r2,fp,-636
 2001aec:	10803a04 	addi	r2,r2,232
 2001af0:	d8800015 	stw	r2,0(sp)
 2001af4:	300f883a 	mov	r7,r6
 2001af8:	280d883a 	mov	r6,r5
 2001afc:	200b883a 	mov	r5,r4
 2001b00:	1809883a 	mov	r4,r3
 2001b04:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001b08:	e0bfe504 	addi	r2,fp,-108
 2001b0c:	11800a04 	addi	r6,r2,40
 2001b10:	e0bfe504 	addi	r2,fp,-108
 2001b14:	11400804 	addi	r5,r2,32
 2001b18:	e0bf4d04 	addi	r2,fp,-716
 2001b1c:	11000a04 	addi	r4,r2,40
 2001b20:	e0bf4d04 	addi	r2,fp,-716
 2001b24:	10c00804 	addi	r3,r2,32
 2001b28:	00800784 	movi	r2,30
 2001b2c:	d8800115 	stw	r2,4(sp)
 2001b30:	e0bf6104 	addi	r2,fp,-636
 2001b34:	10803c04 	addi	r2,r2,240
 2001b38:	d8800015 	stw	r2,0(sp)
 2001b3c:	300f883a 	mov	r7,r6
 2001b40:	280d883a 	mov	r6,r5
 2001b44:	200b883a 	mov	r5,r4
 2001b48:	1809883a 	mov	r4,r3
 2001b4c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001b50:	e0bfe504 	addi	r2,fp,-108
 2001b54:	11800c04 	addi	r6,r2,48
 2001b58:	e0bfe504 	addi	r2,fp,-108
 2001b5c:	11400804 	addi	r5,r2,32
 2001b60:	e0bf4d04 	addi	r2,fp,-716
 2001b64:	11000c04 	addi	r4,r2,48
 2001b68:	e0bf4d04 	addi	r2,fp,-716
 2001b6c:	10c00804 	addi	r3,r2,32
 2001b70:	008007c4 	movi	r2,31
 2001b74:	d8800115 	stw	r2,4(sp)
 2001b78:	e0bf6104 	addi	r2,fp,-636
 2001b7c:	10803e04 	addi	r2,r2,248
 2001b80:	d8800015 	stw	r2,0(sp)
 2001b84:	300f883a 	mov	r7,r6
 2001b88:	280d883a 	mov	r6,r5
 2001b8c:	200b883a 	mov	r5,r4
 2001b90:	1809883a 	mov	r4,r3
 2001b94:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001b98:	e0bfe504 	addi	r2,fp,-108
 2001b9c:	11800e04 	addi	r6,r2,56
 2001ba0:	e0bfe504 	addi	r2,fp,-108
 2001ba4:	11400804 	addi	r5,r2,32
 2001ba8:	e0bf4d04 	addi	r2,fp,-716
 2001bac:	11000e04 	addi	r4,r2,56
 2001bb0:	e0bf4d04 	addi	r2,fp,-716
 2001bb4:	10c00804 	addi	r3,r2,32
 2001bb8:	00800804 	movi	r2,32
 2001bbc:	d8800115 	stw	r2,4(sp)
 2001bc0:	e0bf6104 	addi	r2,fp,-636
 2001bc4:	10804004 	addi	r2,r2,256
 2001bc8:	d8800015 	stw	r2,0(sp)
 2001bcc:	300f883a 	mov	r7,r6
 2001bd0:	280d883a 	mov	r6,r5
 2001bd4:	200b883a 	mov	r5,r4
 2001bd8:	1809883a 	mov	r4,r3
 2001bdc:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001be0:	e0bfe504 	addi	r2,fp,-108
 2001be4:	11801004 	addi	r6,r2,64
 2001be8:	e0bfe504 	addi	r2,fp,-108
 2001bec:	11400804 	addi	r5,r2,32
 2001bf0:	e0bf4d04 	addi	r2,fp,-716
 2001bf4:	11001004 	addi	r4,r2,64
 2001bf8:	e0bf4d04 	addi	r2,fp,-716
 2001bfc:	10c00804 	addi	r3,r2,32
 2001c00:	00800844 	movi	r2,33
 2001c04:	d8800115 	stw	r2,4(sp)
 2001c08:	e0bf6104 	addi	r2,fp,-636
 2001c0c:	10804204 	addi	r2,r2,264
 2001c10:	d8800015 	stw	r2,0(sp)
 2001c14:	300f883a 	mov	r7,r6
 2001c18:	280d883a 	mov	r6,r5
 2001c1c:	200b883a 	mov	r5,r4
 2001c20:	1809883a 	mov	r4,r3
 2001c24:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001c28:	e0bfe504 	addi	r2,fp,-108
 2001c2c:	11801204 	addi	r6,r2,72
 2001c30:	e0bfe504 	addi	r2,fp,-108
 2001c34:	11400804 	addi	r5,r2,32
 2001c38:	e0bf4d04 	addi	r2,fp,-716
 2001c3c:	11001204 	addi	r4,r2,72
 2001c40:	e0bf4d04 	addi	r2,fp,-716
 2001c44:	10c00804 	addi	r3,r2,32
 2001c48:	00800884 	movi	r2,34
 2001c4c:	d8800115 	stw	r2,4(sp)
 2001c50:	e0bf6104 	addi	r2,fp,-636
 2001c54:	10804404 	addi	r2,r2,272
 2001c58:	d8800015 	stw	r2,0(sp)
 2001c5c:	300f883a 	mov	r7,r6
 2001c60:	280d883a 	mov	r6,r5
 2001c64:	200b883a 	mov	r5,r4
 2001c68:	1809883a 	mov	r4,r3
 2001c6c:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 2001c70:	e0bfe504 	addi	r2,fp,-108
 2001c74:	11800c04 	addi	r6,r2,48
 2001c78:	e0bfe504 	addi	r2,fp,-108
 2001c7c:	11400a04 	addi	r5,r2,40
 2001c80:	e0bf4d04 	addi	r2,fp,-716
 2001c84:	11000c04 	addi	r4,r2,48
 2001c88:	e0bf4d04 	addi	r2,fp,-716
 2001c8c:	10c00a04 	addi	r3,r2,40
 2001c90:	008008c4 	movi	r2,35
 2001c94:	d8800115 	stw	r2,4(sp)
 2001c98:	e0bf6104 	addi	r2,fp,-636
 2001c9c:	10804604 	addi	r2,r2,280
 2001ca0:	d8800015 	stw	r2,0(sp)
 2001ca4:	300f883a 	mov	r7,r6
 2001ca8:	280d883a 	mov	r6,r5
 2001cac:	200b883a 	mov	r5,r4
 2001cb0:	1809883a 	mov	r4,r3
 2001cb4:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2001cb8:	e0bfe504 	addi	r2,fp,-108
 2001cbc:	11800e04 	addi	r6,r2,56
 2001cc0:	e0bfe504 	addi	r2,fp,-108
 2001cc4:	11400a04 	addi	r5,r2,40
 2001cc8:	e0bf4d04 	addi	r2,fp,-716
 2001ccc:	11000e04 	addi	r4,r2,56
 2001cd0:	e0bf4d04 	addi	r2,fp,-716
 2001cd4:	10c00a04 	addi	r3,r2,40
 2001cd8:	00800904 	movi	r2,36
 2001cdc:	d8800115 	stw	r2,4(sp)
 2001ce0:	e0bf6104 	addi	r2,fp,-636
 2001ce4:	10804804 	addi	r2,r2,288
 2001ce8:	d8800015 	stw	r2,0(sp)
 2001cec:	300f883a 	mov	r7,r6
 2001cf0:	280d883a 	mov	r6,r5
 2001cf4:	200b883a 	mov	r5,r4
 2001cf8:	1809883a 	mov	r4,r3
 2001cfc:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 2001d00:	e0bfe504 	addi	r2,fp,-108
 2001d04:	11801004 	addi	r6,r2,64
 2001d08:	e0bfe504 	addi	r2,fp,-108
 2001d0c:	11400a04 	addi	r5,r2,40
 2001d10:	e0bf4d04 	addi	r2,fp,-716
 2001d14:	11001004 	addi	r4,r2,64
 2001d18:	e0bf4d04 	addi	r2,fp,-716
 2001d1c:	10c00a04 	addi	r3,r2,40
 2001d20:	00800944 	movi	r2,37
 2001d24:	d8800115 	stw	r2,4(sp)
 2001d28:	e0bf6104 	addi	r2,fp,-636
 2001d2c:	10804a04 	addi	r2,r2,296
 2001d30:	d8800015 	stw	r2,0(sp)
 2001d34:	300f883a 	mov	r7,r6
 2001d38:	280d883a 	mov	r6,r5
 2001d3c:	200b883a 	mov	r5,r4
 2001d40:	1809883a 	mov	r4,r3
 2001d44:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2001d48:	e0bfe504 	addi	r2,fp,-108
 2001d4c:	11801204 	addi	r6,r2,72
 2001d50:	e0bfe504 	addi	r2,fp,-108
 2001d54:	11400a04 	addi	r5,r2,40
 2001d58:	e0bf4d04 	addi	r2,fp,-716
 2001d5c:	11001204 	addi	r4,r2,72
 2001d60:	e0bf4d04 	addi	r2,fp,-716
 2001d64:	10c00a04 	addi	r3,r2,40
 2001d68:	00800984 	movi	r2,38
 2001d6c:	d8800115 	stw	r2,4(sp)
 2001d70:	e0bf6104 	addi	r2,fp,-636
 2001d74:	10804c04 	addi	r2,r2,304
 2001d78:	d8800015 	stw	r2,0(sp)
 2001d7c:	300f883a 	mov	r7,r6
 2001d80:	280d883a 	mov	r6,r5
 2001d84:	200b883a 	mov	r5,r4
 2001d88:	1809883a 	mov	r4,r3
 2001d8c:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 2001d90:	e0bfe504 	addi	r2,fp,-108
 2001d94:	11800e04 	addi	r6,r2,56
 2001d98:	e0bfe504 	addi	r2,fp,-108
 2001d9c:	11400c04 	addi	r5,r2,48
 2001da0:	e0bf4d04 	addi	r2,fp,-716
 2001da4:	11000e04 	addi	r4,r2,56
 2001da8:	e0bf4d04 	addi	r2,fp,-716
 2001dac:	10c00c04 	addi	r3,r2,48
 2001db0:	008009c4 	movi	r2,39
 2001db4:	d8800115 	stw	r2,4(sp)
 2001db8:	e0bf6104 	addi	r2,fp,-636
 2001dbc:	10804e04 	addi	r2,r2,312
 2001dc0:	d8800015 	stw	r2,0(sp)
 2001dc4:	300f883a 	mov	r7,r6
 2001dc8:	280d883a 	mov	r6,r5
 2001dcc:	200b883a 	mov	r5,r4
 2001dd0:	1809883a 	mov	r4,r3
 2001dd4:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 2001dd8:	e0bfe504 	addi	r2,fp,-108
 2001ddc:	11801004 	addi	r6,r2,64
 2001de0:	e0bfe504 	addi	r2,fp,-108
 2001de4:	11400c04 	addi	r5,r2,48
 2001de8:	e0bf4d04 	addi	r2,fp,-716
 2001dec:	11001004 	addi	r4,r2,64
 2001df0:	e0bf4d04 	addi	r2,fp,-716
 2001df4:	10c00c04 	addi	r3,r2,48
 2001df8:	00800a04 	movi	r2,40
 2001dfc:	d8800115 	stw	r2,4(sp)
 2001e00:	e0bf6104 	addi	r2,fp,-636
 2001e04:	10805004 	addi	r2,r2,320
 2001e08:	d8800015 	stw	r2,0(sp)
 2001e0c:	300f883a 	mov	r7,r6
 2001e10:	280d883a 	mov	r6,r5
 2001e14:	200b883a 	mov	r5,r4
 2001e18:	1809883a 	mov	r4,r3
 2001e1c:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 2001e20:	e0bfe504 	addi	r2,fp,-108
 2001e24:	11801204 	addi	r6,r2,72
 2001e28:	e0bfe504 	addi	r2,fp,-108
 2001e2c:	11400c04 	addi	r5,r2,48
 2001e30:	e0bf4d04 	addi	r2,fp,-716
 2001e34:	11001204 	addi	r4,r2,72
 2001e38:	e0bf4d04 	addi	r2,fp,-716
 2001e3c:	10c00c04 	addi	r3,r2,48
 2001e40:	00800a44 	movi	r2,41
 2001e44:	d8800115 	stw	r2,4(sp)
 2001e48:	e0bf6104 	addi	r2,fp,-636
 2001e4c:	10805204 	addi	r2,r2,328
 2001e50:	d8800015 	stw	r2,0(sp)
 2001e54:	300f883a 	mov	r7,r6
 2001e58:	280d883a 	mov	r6,r5
 2001e5c:	200b883a 	mov	r5,r4
 2001e60:	1809883a 	mov	r4,r3
 2001e64:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2001e68:	e0bfe504 	addi	r2,fp,-108
 2001e6c:	11801004 	addi	r6,r2,64
 2001e70:	e0bfe504 	addi	r2,fp,-108
 2001e74:	11400e04 	addi	r5,r2,56
 2001e78:	e0bf4d04 	addi	r2,fp,-716
 2001e7c:	11001004 	addi	r4,r2,64
 2001e80:	e0bf4d04 	addi	r2,fp,-716
 2001e84:	10c00e04 	addi	r3,r2,56
 2001e88:	00800a84 	movi	r2,42
 2001e8c:	d8800115 	stw	r2,4(sp)
 2001e90:	e0bf6104 	addi	r2,fp,-636
 2001e94:	10805404 	addi	r2,r2,336
 2001e98:	d8800015 	stw	r2,0(sp)
 2001e9c:	300f883a 	mov	r7,r6
 2001ea0:	280d883a 	mov	r6,r5
 2001ea4:	200b883a 	mov	r5,r4
 2001ea8:	1809883a 	mov	r4,r3
 2001eac:	2002aa40 	call	2002aa4 <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 2001eb0:	e0bfe504 	addi	r2,fp,-108
 2001eb4:	11801204 	addi	r6,r2,72
 2001eb8:	e0bfe504 	addi	r2,fp,-108
 2001ebc:	11400e04 	addi	r5,r2,56
 2001ec0:	e0bf4d04 	addi	r2,fp,-716
 2001ec4:	11001204 	addi	r4,r2,72
 2001ec8:	e0bf4d04 	addi	r2,fp,-716
 2001ecc:	10c00e04 	addi	r3,r2,56
 2001ed0:	00800ac4 	movi	r2,43
 2001ed4:	d8800115 	stw	r2,4(sp)
 2001ed8:	e0bf6104 	addi	r2,fp,-636
 2001edc:	10805604 	addi	r2,r2,344
 2001ee0:	d8800015 	stw	r2,0(sp)
 2001ee4:	300f883a 	mov	r7,r6
 2001ee8:	280d883a 	mov	r6,r5
 2001eec:	200b883a 	mov	r5,r4
 2001ef0:	1809883a 	mov	r4,r3
 2001ef4:	2002aa40 	call	2002aa4 <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 2001ef8:	e0bfe504 	addi	r2,fp,-108
 2001efc:	11801204 	addi	r6,r2,72
 2001f00:	e0bfe504 	addi	r2,fp,-108
 2001f04:	11400e04 	addi	r5,r2,56
 2001f08:	e0bf4d04 	addi	r2,fp,-716
 2001f0c:	11001204 	addi	r4,r2,72
 2001f10:	e0bf4d04 	addi	r2,fp,-716
 2001f14:	10c01004 	addi	r3,r2,64
 2001f18:	00800b04 	movi	r2,44
 2001f1c:	d8800115 	stw	r2,4(sp)
 2001f20:	e0bf6104 	addi	r2,fp,-636
 2001f24:	10805804 	addi	r2,r2,352
 2001f28:	d8800015 	stw	r2,0(sp)
 2001f2c:	300f883a 	mov	r7,r6
 2001f30:	280d883a 	mov	r6,r5
 2001f34:	200b883a 	mov	r5,r4
 2001f38:	1809883a 	mov	r4,r3
 2001f3c:	2002aa40 	call	2002aa4 <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 2001f40:	e0bfe504 	addi	r2,fp,-108
 2001f44:	1009883a 	mov	r4,r2
 2001f48:	20030080 	call	2003008 <damping>
  	   damping(velocity[1]);
 2001f4c:	e0bfe504 	addi	r2,fp,-108
 2001f50:	10800204 	addi	r2,r2,8
 2001f54:	1009883a 	mov	r4,r2
 2001f58:	20030080 	call	2003008 <damping>
  	   damping(velocity[2]);
 2001f5c:	e0bfe504 	addi	r2,fp,-108
 2001f60:	10800404 	addi	r2,r2,16
 2001f64:	1009883a 	mov	r4,r2
 2001f68:	20030080 	call	2003008 <damping>
  	   damping(velocity[3]);
 2001f6c:	e0bfe504 	addi	r2,fp,-108
 2001f70:	10800604 	addi	r2,r2,24
 2001f74:	1009883a 	mov	r4,r2
 2001f78:	20030080 	call	2003008 <damping>
  	   damping(velocity[4]);
 2001f7c:	e0bfe504 	addi	r2,fp,-108
 2001f80:	10800804 	addi	r2,r2,32
 2001f84:	1009883a 	mov	r4,r2
 2001f88:	20030080 	call	2003008 <damping>
  	   damping(velocity[5]);
 2001f8c:	e0bfe504 	addi	r2,fp,-108
 2001f90:	10800a04 	addi	r2,r2,40
 2001f94:	1009883a 	mov	r4,r2
 2001f98:	20030080 	call	2003008 <damping>
  	   damping(velocity[6]);
 2001f9c:	e0bfe504 	addi	r2,fp,-108
 2001fa0:	10800c04 	addi	r2,r2,48
 2001fa4:	1009883a 	mov	r4,r2
 2001fa8:	20030080 	call	2003008 <damping>
  	   damping(velocity[7]);
 2001fac:	e0bfe504 	addi	r2,fp,-108
 2001fb0:	10800e04 	addi	r2,r2,56
 2001fb4:	1009883a 	mov	r4,r2
 2001fb8:	20030080 	call	2003008 <damping>
  	   damping(velocity[8]);
 2001fbc:	e0bfe504 	addi	r2,fp,-108
 2001fc0:	10801004 	addi	r2,r2,64
 2001fc4:	1009883a 	mov	r4,r2
 2001fc8:	20030080 	call	2003008 <damping>
  	   damping(velocity[9]);
 2001fcc:	e0bfe504 	addi	r2,fp,-108
 2001fd0:	10801204 	addi	r2,r2,72
 2001fd4:	1009883a 	mov	r4,r2
 2001fd8:	20030080 	call	2003008 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 2001fdc:	e0bfe504 	addi	r2,fp,-108
 2001fe0:	1009883a 	mov	r4,r2
 2001fe4:	20029800 	call	2002980 <momentum>
 2001fe8:	1021883a 	mov	r16,r2
 2001fec:	e0bfe504 	addi	r2,fp,-108
 2001ff0:	10800204 	addi	r2,r2,8
 2001ff4:	1009883a 	mov	r4,r2
 2001ff8:	20029800 	call	2002980 <momentum>
 2001ffc:	1007883a 	mov	r3,r2
 2002000:	80e1ff72 	custom	253,r16,r16,r3
 2002004:	e0bfe504 	addi	r2,fp,-108
 2002008:	10800404 	addi	r2,r2,16
 200200c:	1009883a 	mov	r4,r2
 2002010:	20029800 	call	2002980 <momentum>
 2002014:	1007883a 	mov	r3,r2
 2002018:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 200201c:	e0bfe504 	addi	r2,fp,-108
 2002020:	10800604 	addi	r2,r2,24
 2002024:	1009883a 	mov	r4,r2
 2002028:	20029800 	call	2002980 <momentum>
 200202c:	1007883a 	mov	r3,r2
 2002030:	80e1ff72 	custom	253,r16,r16,r3
 2002034:	e0bfe504 	addi	r2,fp,-108
 2002038:	10800804 	addi	r2,r2,32
 200203c:	1009883a 	mov	r4,r2
 2002040:	20029800 	call	2002980 <momentum>
 2002044:	1007883a 	mov	r3,r2
 2002048:	80e1ff72 	custom	253,r16,r16,r3
 200204c:	e0bfe504 	addi	r2,fp,-108
 2002050:	10800a04 	addi	r2,r2,40
 2002054:	1009883a 	mov	r4,r2
 2002058:	20029800 	call	2002980 <momentum>
 200205c:	1007883a 	mov	r3,r2
 2002060:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 2002064:	e0bfe504 	addi	r2,fp,-108
 2002068:	10800c04 	addi	r2,r2,48
 200206c:	1009883a 	mov	r4,r2
 2002070:	20029800 	call	2002980 <momentum>
 2002074:	1007883a 	mov	r3,r2
 2002078:	80e1ff72 	custom	253,r16,r16,r3
 200207c:	e0bfe504 	addi	r2,fp,-108
 2002080:	10800e04 	addi	r2,r2,56
 2002084:	1009883a 	mov	r4,r2
 2002088:	20029800 	call	2002980 <momentum>
 200208c:	1007883a 	mov	r3,r2
 2002090:	80e1ff72 	custom	253,r16,r16,r3
 2002094:	e0bfe504 	addi	r2,fp,-108
 2002098:	10801004 	addi	r2,r2,64
 200209c:	1009883a 	mov	r4,r2
 20020a0:	20029800 	call	2002980 <momentum>
 20020a4:	1007883a 	mov	r3,r2
 20020a8:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 20020ac:	e0bfe504 	addi	r2,fp,-108
 20020b0:	10801204 	addi	r2,r2,72
 20020b4:	1009883a 	mov	r4,r2
 20020b8:	20029800 	call	2002980 <momentum>
 20020bc:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20020c0:	80c5ff72 	custom	253,r2,r16,r3
 20020c4:	e0bf4415 	stw	r2,-752(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 20020c8:	e0bf4517 	ldw	r2,-748(fp)
 20020cc:	10800104 	addi	r2,r2,4
 20020d0:	e0ff4e17 	ldw	r3,-712(fp)
 20020d4:	1807fe72 	custom	249,r3,r3,zero
 20020d8:	180892ba 	slli	r4,r3,10
 20020dc:	e0ff4d17 	ldw	r3,-716(fp)
 20020e0:	1807fe72 	custom	249,r3,r3,zero
 20020e4:	20c7883a 	add	r3,r4,r3
 20020e8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20020ec:	e0bf4517 	ldw	r2,-748(fp)
 20020f0:	10800204 	addi	r2,r2,8
 20020f4:	e0ff5017 	ldw	r3,-704(fp)
 20020f8:	1807fe72 	custom	249,r3,r3,zero
 20020fc:	180892ba 	slli	r4,r3,10
 2002100:	e0ff4f17 	ldw	r3,-708(fp)
 2002104:	1807fe72 	custom	249,r3,r3,zero
 2002108:	20c7883a 	add	r3,r4,r3
 200210c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2002110:	e0bf4517 	ldw	r2,-748(fp)
 2002114:	10800304 	addi	r2,r2,12
 2002118:	e0ff5217 	ldw	r3,-696(fp)
 200211c:	1807fe72 	custom	249,r3,r3,zero
 2002120:	180892ba 	slli	r4,r3,10
 2002124:	e0ff5117 	ldw	r3,-700(fp)
 2002128:	1807fe72 	custom	249,r3,r3,zero
 200212c:	20c7883a 	add	r3,r4,r3
 2002130:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2002134:	e0bf4517 	ldw	r2,-748(fp)
 2002138:	10800404 	addi	r2,r2,16
 200213c:	e0ff5417 	ldw	r3,-688(fp)
 2002140:	1807fe72 	custom	249,r3,r3,zero
 2002144:	180892ba 	slli	r4,r3,10
 2002148:	e0ff5317 	ldw	r3,-692(fp)
 200214c:	1807fe72 	custom	249,r3,r3,zero
 2002150:	20c7883a 	add	r3,r4,r3
 2002154:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002158:	e0bf4517 	ldw	r2,-748(fp)
 200215c:	10800504 	addi	r2,r2,20
 2002160:	e0ff5617 	ldw	r3,-680(fp)
 2002164:	1807fe72 	custom	249,r3,r3,zero
 2002168:	180892ba 	slli	r4,r3,10
 200216c:	e0ff5517 	ldw	r3,-684(fp)
 2002170:	1807fe72 	custom	249,r3,r3,zero
 2002174:	20c7883a 	add	r3,r4,r3
 2002178:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 200217c:	e0bf4517 	ldw	r2,-748(fp)
 2002180:	10800604 	addi	r2,r2,24
 2002184:	e0ff5817 	ldw	r3,-672(fp)
 2002188:	1807fe72 	custom	249,r3,r3,zero
 200218c:	180892ba 	slli	r4,r3,10
 2002190:	e0ff5717 	ldw	r3,-676(fp)
 2002194:	1807fe72 	custom	249,r3,r3,zero
 2002198:	20c7883a 	add	r3,r4,r3
 200219c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20021a0:	e0bf4517 	ldw	r2,-748(fp)
 20021a4:	10800704 	addi	r2,r2,28
 20021a8:	e0ff5a17 	ldw	r3,-664(fp)
 20021ac:	1807fe72 	custom	249,r3,r3,zero
 20021b0:	180892ba 	slli	r4,r3,10
 20021b4:	e0ff5917 	ldw	r3,-668(fp)
 20021b8:	1807fe72 	custom	249,r3,r3,zero
 20021bc:	20c7883a 	add	r3,r4,r3
 20021c0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20021c4:	e0bf4517 	ldw	r2,-748(fp)
 20021c8:	10800804 	addi	r2,r2,32
 20021cc:	e0ff5c17 	ldw	r3,-656(fp)
 20021d0:	1807fe72 	custom	249,r3,r3,zero
 20021d4:	180892ba 	slli	r4,r3,10
 20021d8:	e0ff5b17 	ldw	r3,-660(fp)
 20021dc:	1807fe72 	custom	249,r3,r3,zero
 20021e0:	20c7883a 	add	r3,r4,r3
 20021e4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20021e8:	e0bf4517 	ldw	r2,-748(fp)
 20021ec:	10800904 	addi	r2,r2,36
 20021f0:	e0ff5e17 	ldw	r3,-648(fp)
 20021f4:	1807fe72 	custom	249,r3,r3,zero
 20021f8:	180892ba 	slli	r4,r3,10
 20021fc:	e0ff5d17 	ldw	r3,-652(fp)
 2002200:	1807fe72 	custom	249,r3,r3,zero
 2002204:	20c7883a 	add	r3,r4,r3
 2002208:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 200220c:	e0bf4517 	ldw	r2,-748(fp)
 2002210:	10800a04 	addi	r2,r2,40
 2002214:	e0ff6017 	ldw	r3,-640(fp)
 2002218:	1807fe72 	custom	249,r3,r3,zero
 200221c:	180892ba 	slli	r4,r3,10
 2002220:	e0ff5f17 	ldw	r3,-644(fp)
 2002224:	1807fe72 	custom	249,r3,r3,zero
 2002228:	20c7883a 	add	r3,r4,r3
 200222c:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 2002230:	01c00104 	movi	r7,4
 2002234:	000d883a 	mov	r6,zero
 2002238:	000b883a 	mov	r5,zero
 200223c:	0009883a 	mov	r4,zero
 2002240:	201badc0 	call	201badc <OSTimeDlyHMSM>

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};

   while(speed >= 0.1)
 2002244:	e13f4417 	ldw	r4,-752(fp)
 2002248:	200447c0 	call	200447c <__extendsfdf2>
 200224c:	1011883a 	mov	r8,r2
 2002250:	1813883a 	mov	r9,r3
 2002254:	01a666b4 	movhi	r6,39322
 2002258:	31a66684 	addi	r6,r6,-26214
 200225c:	01cfeeb4 	movhi	r7,16314
 2002260:	39e66644 	addi	r7,r7,-26215
 2002264:	4009883a 	mov	r4,r8
 2002268:	480b883a 	mov	r5,r9
 200226c:	2003b940 	call	2003b94 <__gedf2>
 2002270:	1039810e 	bge	r2,zero,2000878 <task2+0x3d8>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 2002274:	01c07d04 	movi	r7,500
 2002278:	000d883a 	mov	r6,zero
 200227c:	000b883a 	mov	r5,zero
 2002280:	0009883a 	mov	r4,zero
 2002284:	201badc0 	call	201badc <OSTimeDlyHMSM>

   printf("Animation termine\n");
 2002288:	010080b4 	movhi	r4,514
 200228c:	21397304 	addi	r4,r4,-6708
 2002290:	2004e7c0 	call	2004e7c <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 2002294:	01c01904 	movi	r7,100
 2002298:	000d883a 	mov	r6,zero
 200229c:	000b883a 	mov	r5,zero
 20022a0:	0009883a 	mov	r4,zero
 20022a4:	201badc0 	call	201badc <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 20022a8:	e03f4605 	stb	zero,-744(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20022ac:	d0a71a17 	ldw	r2,-25496(gp)
 20022b0:	e0ff4603 	ldbu	r3,-744(fp)
 20022b4:	e13f4c04 	addi	r4,fp,-720
 20022b8:	200f883a 	mov	r7,r4
 20022bc:	180d883a 	mov	r6,r3
 20022c0:	01400044 	movi	r5,1
 20022c4:	1009883a 	mov	r4,r2
 20022c8:	2016cbc0 	call	2016cbc <OSFlagPost>
  }
 20022cc:	0038ea06 	br	2000678 <task2+0x1d8>

020022d0 <task3>:
}

void task3(void* pdata)
{
 20022d0:	defff204 	addi	sp,sp,-56
 20022d4:	dfc00d15 	stw	ra,52(sp)
 20022d8:	df000c15 	stw	fp,48(sp)
 20022dc:	df000c04 	addi	fp,sp,48
 20022e0:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT8U opt_task1;

	int activePlayer = 1;
 20022e4:	00800044 	movi	r2,1
 20022e8:	e0bff515 	stw	r2,-44(fp)

	int * XdirSend = (int*) MEM_NIOS_PI_BASE+1;
 20022ec:	00800834 	movhi	r2,32
 20022f0:	10800104 	addi	r2,r2,4
 20022f4:	e0bff615 	stw	r2,-40(fp)
	int * YdirSend = (int*) MEM_NIOS_PI_BASE+2;
 20022f8:	00800834 	movhi	r2,32
 20022fc:	10800204 	addi	r2,r2,8
 2002300:	e0bff715 	stw	r2,-36(fp)
	int * isSend = (int*) MEM_NIOS_PI_BASE+3;
 2002304:	00800834 	movhi	r2,32
 2002308:	10800304 	addi	r2,r2,12
 200230c:	e0bff815 	stw	r2,-32(fp)
	int * isReceived = (int*) MEM_NIOS_PI_BASE+4;
 2002310:	00800834 	movhi	r2,32
 2002314:	10800404 	addi	r2,r2,16
 2002318:	e0bff915 	stw	r2,-28(fp)
	//int * AckSend     = (int*) MEM_NIOS_PI_BASE+5;
	//int * AckReceived     = (int*) MEM_NIOS_PI_BASE+6;
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+7;
 200231c:	00800834 	movhi	r2,32
 2002320:	10800704 	addi	r2,r2,28
 2002324:	e0bffa15 	stw	r2,-24(fp)
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+8;
 2002328:	00800834 	movhi	r2,32
 200232c:	10800804 	addi	r2,r2,32
 2002330:	e0bffb15 	stw	r2,-20(fp)
	//int * speedRec = (int*) MEM_NIOS_PI_BASE+9;

	*XdirSend =0;
 2002334:	e0bff617 	ldw	r2,-40(fp)
 2002338:	10000015 	stw	zero,0(r2)
	*XdirRec =0;
 200233c:	e0bffa17 	ldw	r2,-24(fp)
 2002340:	10000015 	stw	zero,0(r2)
	*isSend = 0;
 2002344:	e0bff817 	ldw	r2,-32(fp)
 2002348:	10000015 	stw	zero,0(r2)
	*isReceived = 0;
 200234c:	e0bff917 	ldw	r2,-28(fp)
 2002350:	10000015 	stw	zero,0(r2)
	*YdirSend =0;
 2002354:	e0bff717 	ldw	r2,-36(fp)
 2002358:	10000015 	stw	zero,0(r2)
	*YdirRec = 0;
 200235c:	e0bffb17 	ldw	r2,-20(fp)
 2002360:	10000015 	stw	zero,0(r2)
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 2002364:	e0bff917 	ldw	r2,-28(fp)
 2002368:	10800017 	ldw	r2,0(r2)
 200236c:	10004a1e 	bne	r2,zero,2002498 <task3+0x1c8>
 2002370:	e0bff517 	ldw	r2,-44(fp)
 2002374:	10004826 	beq	r2,zero,2002498 <task3+0x1c8>
		  OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2002378:	d0a71f17 	ldw	r2,-25476(gp)
 200237c:	e0fffe44 	addi	r3,fp,-7
 2002380:	180f883a 	mov	r7,r3
 2002384:	01800044 	movi	r6,1
 2002388:	01400044 	movi	r5,1
 200238c:	1009883a 	mov	r4,r2
 2002390:	2016cbc0 	call	2016cbc <OSFlagPost>
		  printf("Wait for value from task 1\n");
 2002394:	010080b4 	movhi	r4,514
 2002398:	21398c04 	addi	r4,r4,-6608
 200239c:	2004e7c0 	call	2004e7c <puts>
		  int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 20023a0:	d0a71e17 	ldw	r2,-25480(gp)
 20023a4:	e0fffe44 	addi	r3,fp,-7
 20023a8:	180d883a 	mov	r6,r3
 20023ac:	000b883a 	mov	r5,zero
 20023b0:	1009883a 	mov	r4,r2
 20023b4:	20178980 	call	2017898 <OSMboxPend>
 20023b8:	e0bffc15 	stw	r2,-16(fp)
		  int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 20023bc:	d0a71c17 	ldw	r2,-25488(gp)
 20023c0:	e0fffe44 	addi	r3,fp,-7
 20023c4:	180d883a 	mov	r6,r3
 20023c8:	000b883a 	mov	r5,zero
 20023cc:	1009883a 	mov	r4,r2
 20023d0:	20178980 	call	2017898 <OSMboxPend>
 20023d4:	e0bffd15 	stw	r2,-12(fp)
		  printf("Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 20023d8:	e0bffc17 	ldw	r2,-16(fp)
 20023dc:	10c00017 	ldw	r3,0(r2)
 20023e0:	e0bffd17 	ldw	r2,-12(fp)
 20023e4:	10800017 	ldw	r2,0(r2)
 20023e8:	100d883a 	mov	r6,r2
 20023ec:	180b883a 	mov	r5,r3
 20023f0:	010080b4 	movhi	r4,514
 20023f4:	21399304 	addi	r4,r4,-6580
 20023f8:	2004cfc0 	call	2004cfc <printf>

		  OSMboxPost(MailBox4, vector_x);
 20023fc:	d0a71d17 	ldw	r2,-25484(gp)
 2002400:	e17ffc17 	ldw	r5,-16(fp)
 2002404:	1009883a 	mov	r4,r2
 2002408:	2017c380 	call	2017c38 <OSMboxPost>
		  OSMboxPost(MailBox5, vector_y);
 200240c:	d0a71b17 	ldw	r2,-25492(gp)
 2002410:	e17ffd17 	ldw	r5,-12(fp)
 2002414:	1009883a 	mov	r4,r2
 2002418:	2017c380 	call	2017c38 <OSMboxPost>

		  *XdirSend = *vector_x;
 200241c:	e0bffc17 	ldw	r2,-16(fp)
 2002420:	10c00017 	ldw	r3,0(r2)
 2002424:	e0bff617 	ldw	r2,-40(fp)
 2002428:	10c00015 	stw	r3,0(r2)
		  *YdirSend = *vector_y;
 200242c:	e0bffd17 	ldw	r2,-12(fp)
 2002430:	10c00017 	ldw	r3,0(r2)
 2002434:	e0bff717 	ldw	r2,-36(fp)
 2002438:	10c00015 	stw	r3,0(r2)
		  *isSend = 1; // value are available
 200243c:	e0bff817 	ldw	r2,-32(fp)
 2002440:	00c00044 	movi	r3,1
 2002444:	10c00015 	stw	r3,0(r2)
		  activePlayer = 1; //modified
 2002448:	00800044 	movi	r2,1
 200244c:	e0bff515 	stw	r2,-44(fp)

		  opt_task1=OS_FLAG_CLR;
 2002450:	e03ffe05 	stb	zero,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002454:	d0a71f17 	ldw	r2,-25476(gp)
 2002458:	e0fffe03 	ldbu	r3,-8(fp)
 200245c:	e13ffe44 	addi	r4,fp,-7
 2002460:	200f883a 	mov	r7,r4
 2002464:	180d883a 	mov	r6,r3
 2002468:	01400044 	movi	r5,1
 200246c:	1009883a 	mov	r4,r2
 2002470:	2016cbc0 	call	2016cbc <OSFlagPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002474:	d0e71a17 	ldw	r3,-25496(gp)
 2002478:	e0bffe44 	addi	r2,fp,-7
 200247c:	d8800015 	stw	r2,0(sp)
 2002480:	000f883a 	mov	r7,zero
 2002484:	000d883a 	mov	r6,zero
 2002488:	01400044 	movi	r5,1
 200248c:	1809883a 	mov	r4,r3
 2002490:	20166a40 	call	20166a4 <OSFlagPend>
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 2002494:	00002c06 	br	2002548 <task3+0x278>
	 /* Si on n'est pas le joueur actif, on attend le signal donnée disponible
	  * -> lit les donnée
	  * -> envoi les données à la tâche 3 + lance l'animation
	  * -> passe en mode joueur actif
	  */
	 else if (!activePlayer && *isReceived){
 2002498:	e0bff517 	ldw	r2,-44(fp)
 200249c:	10002a1e 	bne	r2,zero,2002548 <task3+0x278>
 20024a0:	e0bff917 	ldw	r2,-28(fp)
 20024a4:	10800017 	ldw	r2,0(r2)
 20024a8:	10002726 	beq	r2,zero,2002548 <task3+0x278>
		  printf("Get value from SPI : (%d, %d)\n",*XdirRec, *YdirRec);
 20024ac:	e0bffa17 	ldw	r2,-24(fp)
 20024b0:	10c00017 	ldw	r3,0(r2)
 20024b4:	e0bffb17 	ldw	r2,-20(fp)
 20024b8:	10800017 	ldw	r2,0(r2)
 20024bc:	100d883a 	mov	r6,r2
 20024c0:	180b883a 	mov	r5,r3
 20024c4:	010080b4 	movhi	r4,514
 20024c8:	21399c04 	addi	r4,r4,-6544
 20024cc:	2004cfc0 	call	2004cfc <printf>
		  OSMboxPost(MailBox4, XdirRec);
 20024d0:	d0a71d17 	ldw	r2,-25484(gp)
 20024d4:	e17ffa17 	ldw	r5,-24(fp)
 20024d8:	1009883a 	mov	r4,r2
 20024dc:	2017c380 	call	2017c38 <OSMboxPost>
		  OSMboxPost(MailBox5, YdirRec);
 20024e0:	d0a71b17 	ldw	r2,-25492(gp)
 20024e4:	e17ffb17 	ldw	r5,-20(fp)
 20024e8:	1009883a 	mov	r4,r2
 20024ec:	2017c380 	call	2017c38 <OSMboxPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20024f0:	d0e71a17 	ldw	r3,-25496(gp)
 20024f4:	e0bffe44 	addi	r2,fp,-7
 20024f8:	d8800015 	stw	r2,0(sp)
 20024fc:	000f883a 	mov	r7,zero
 2002500:	000d883a 	mov	r6,zero
 2002504:	01400044 	movi	r5,1
 2002508:	1809883a 	mov	r4,r3
 200250c:	20166a40 	call	20166a4 <OSFlagPend>
		  opt_task1=OS_FLAG_SET;
 2002510:	00800044 	movi	r2,1
 2002514:	e0bffe05 	stb	r2,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002518:	d0a71f17 	ldw	r2,-25476(gp)
 200251c:	e0fffe03 	ldbu	r3,-8(fp)
 2002520:	e13ffe44 	addi	r4,fp,-7
 2002524:	200f883a 	mov	r7,r4
 2002528:	180d883a 	mov	r6,r3
 200252c:	01400044 	movi	r5,1
 2002530:	1009883a 	mov	r4,r2
 2002534:	2016cbc0 	call	2016cbc <OSFlagPost>
		  *isReceived = 0; // we are the actif player
 2002538:	e0bff917 	ldw	r2,-28(fp)
 200253c:	10000015 	stw	zero,0(r2)
		  activePlayer = 1;
 2002540:	00800044 	movi	r2,1
 2002544:	e0bff515 	stw	r2,-44(fp)
	  }
	  OSTimeDlyHMSM(0,0,0,100);
 2002548:	01c01904 	movi	r7,100
 200254c:	000d883a 	mov	r6,zero
 2002550:	000b883a 	mov	r5,zero
 2002554:	0009883a 	mov	r4,zero
 2002558:	201badc0 	call	201badc <OSTimeDlyHMSM>
  }
 200255c:	003f8106 	br	2002364 <task3+0x94>

02002560 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2002560:	defff804 	addi	sp,sp,-32
 2002564:	dfc00715 	stw	ra,28(sp)
 2002568:	df000615 	stw	fp,24(sp)
 200256c:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 2002570:	0009883a 	mov	r4,zero
 2002574:	20175840 	call	2017584 <OSMboxCreate>
 2002578:	d0a71e15 	stw	r2,-25480(gp)
  MailBox2 = OSMboxCreate(NULL);
 200257c:	0009883a 	mov	r4,zero
 2002580:	20175840 	call	2017584 <OSMboxCreate>
 2002584:	d0a71c15 	stw	r2,-25488(gp)
  MailBox3 = OSMboxCreate(NULL);
 2002588:	0009883a 	mov	r4,zero
 200258c:	20175840 	call	2017584 <OSMboxCreate>
 2002590:	d0a71915 	stw	r2,-25500(gp)

  MailBox4 = OSMboxCreate(NULL);
 2002594:	0009883a 	mov	r4,zero
 2002598:	20175840 	call	2017584 <OSMboxCreate>
 200259c:	d0a71d15 	stw	r2,-25484(gp)
  MailBox5 = OSMboxCreate(NULL);
 20025a0:	0009883a 	mov	r4,zero
 20025a4:	20175840 	call	2017584 <OSMboxCreate>
 20025a8:	d0a71b15 	stw	r2,-25492(gp)
  MailBox6 = OSMboxCreate(NULL);
 20025ac:	0009883a 	mov	r4,zero
 20025b0:	20175840 	call	2017584 <OSMboxCreate>
 20025b4:	d0a71815 	stw	r2,-25504(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 20025b8:	e17fff04 	addi	r5,fp,-4
 20025bc:	0009883a 	mov	r4,zero
 20025c0:	20160e00 	call	20160e0 <OSFlagCreate>
 20025c4:	d0a71f15 	stw	r2,-25476(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 20025c8:	e17fff04 	addi	r5,fp,-4
 20025cc:	0009883a 	mov	r4,zero
 20025d0:	20160e00 	call	20160e0 <OSFlagCreate>
 20025d4:	d0a71a15 	stw	r2,-25496(gp)

  OSTaskCreateExt(task1,
 20025d8:	d8000415 	stw	zero,16(sp)
 20025dc:	d8000315 	stw	zero,12(sp)
 20025e0:	00820004 	movi	r2,2048
 20025e4:	d8800215 	stw	r2,8(sp)
 20025e8:	008080b4 	movhi	r2,514
 20025ec:	1088f504 	addi	r2,r2,9172
 20025f0:	d8800115 	stw	r2,4(sp)
 20025f4:	00800044 	movi	r2,1
 20025f8:	d8800015 	stw	r2,0(sp)
 20025fc:	01c00044 	movi	r7,1
 2002600:	018080b4 	movhi	r6,514
 2002604:	3190f404 	addi	r6,r6,17360
 2002608:	000b883a 	mov	r5,zero
 200260c:	01008034 	movhi	r4,512
 2002610:	2100a404 	addi	r4,r4,656
 2002614:	201a9080 	call	201a908 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 2002618:	d8000415 	stw	zero,16(sp)
 200261c:	d8000315 	stw	zero,12(sp)
 2002620:	00820004 	movi	r2,2048
 2002624:	d8800215 	stw	r2,8(sp)
 2002628:	008080b4 	movhi	r2,514
 200262c:	1090f504 	addi	r2,r2,17364
 2002630:	d8800115 	stw	r2,4(sp)
 2002634:	00800084 	movi	r2,2
 2002638:	d8800015 	stw	r2,0(sp)
 200263c:	01c00084 	movi	r7,2
 2002640:	018080b4 	movhi	r6,514
 2002644:	3198f404 	addi	r6,r6,25552
 2002648:	000b883a 	mov	r5,zero
 200264c:	01008034 	movhi	r4,512
 2002650:	21012804 	addi	r4,r4,1184
 2002654:	201a9080 	call	201a908 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2002658:	d8000415 	stw	zero,16(sp)
 200265c:	d8000315 	stw	zero,12(sp)
 2002660:	00820004 	movi	r2,2048
 2002664:	d8800215 	stw	r2,8(sp)
 2002668:	008080b4 	movhi	r2,514
 200266c:	1098f504 	addi	r2,r2,25556
 2002670:	d8800115 	stw	r2,4(sp)
 2002674:	008000c4 	movi	r2,3
 2002678:	d8800015 	stw	r2,0(sp)
 200267c:	01c000c4 	movi	r7,3
 2002680:	018080f4 	movhi	r6,515
 2002684:	31a0f404 	addi	r6,r6,-31792
 2002688:	000b883a 	mov	r5,zero
 200268c:	01008034 	movhi	r4,512
 2002690:	2108b404 	addi	r4,r4,8912
 2002694:	201a9080 	call	201a908 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
 2002698:	20147a80 	call	20147a8 <OSStart>
  return 0;
 200269c:	0005883a 	mov	r2,zero
}
 20026a0:	e037883a 	mov	sp,fp
 20026a4:	dfc00117 	ldw	ra,4(sp)
 20026a8:	df000017 	ldw	fp,0(sp)
 20026ac:	dec00204 	addi	sp,sp,8
 20026b0:	f800283a 	ret

020026b4 <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 20026b4:	defff604 	addi	sp,sp,-40
 20026b8:	dfc00915 	stw	ra,36(sp)
 20026bc:	df000815 	stw	fp,32(sp)
 20026c0:	df000804 	addi	fp,sp,32
 20026c4:	e13ffe15 	stw	r4,-8(fp)
 20026c8:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 20026cc:	e0bffe17 	ldw	r2,-8(fp)
 20026d0:	10c00017 	ldw	r3,0(r2)
 20026d4:	e13fff17 	ldw	r4,-4(fp)
 20026d8:	20800017 	ldw	r2,0(r4)
 20026dc:	1885ff72 	custom	253,r2,r3,r2
 20026e0:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20026e4:	e0bffe17 	ldw	r2,-8(fp)
 20026e8:	10800104 	addi	r2,r2,4
 20026ec:	10c00017 	ldw	r3,0(r2)
 20026f0:	e0bfff17 	ldw	r2,-4(fp)
 20026f4:	11000104 	addi	r4,r2,4
 20026f8:	20800017 	ldw	r2,0(r4)
 20026fc:	1885ff72 	custom	253,r2,r3,r2
 2002700:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 2002704:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002708:	e03ff915 	stw	zero,-28(fp)
 200270c:	00003d06 	br	2002804 <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 2002710:	008080b4 	movhi	r2,514
 2002714:	10bae604 	addi	r2,r2,-5224
 2002718:	e0fff917 	ldw	r3,-28(fp)
 200271c:	180690fa 	slli	r3,r3,3
 2002720:	10c5883a 	add	r2,r2,r3
 2002724:	10800017 	ldw	r2,0(r2)
 2002728:	1007feb2 	custom	250,r3,r2,zero
 200272c:	e0bffa17 	ldw	r2,-24(fp)
 2002730:	1885ffb2 	custom	254,r2,r3,r2
 2002734:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2002738:	008080b4 	movhi	r2,514
 200273c:	10bae604 	addi	r2,r2,-5224
 2002740:	e0fff917 	ldw	r3,-28(fp)
 2002744:	180690fa 	slli	r3,r3,3
 2002748:	10c5883a 	add	r2,r2,r3
 200274c:	10800104 	addi	r2,r2,4
 2002750:	10800017 	ldw	r2,0(r2)
 2002754:	1007feb2 	custom	250,r3,r2,zero
 2002758:	e0bffb17 	ldw	r2,-20(fp)
 200275c:	1885ffb2 	custom	254,r2,r3,r2
 2002760:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2002764:	e0bff817 	ldw	r2,-32(fp)
 2002768:	1000131e 	bne	r2,zero,20027b8 <whole_collide+0x104>
 200276c:	e0fffc17 	ldw	r3,-16(fp)
 2002770:	e0bffc17 	ldw	r2,-16(fp)
 2002774:	1887ff32 	custom	252,r3,r3,r2
 2002778:	e13ffd17 	ldw	r4,-12(fp)
 200277c:	e0bffd17 	ldw	r2,-12(fp)
 2002780:	2085ff32 	custom	252,r2,r4,r2
 2002784:	1885ff72 	custom	253,r2,r3,r2
 2002788:	1009883a 	mov	r4,r2
 200278c:	200447c0 	call	200447c <__extendsfdf2>
 2002790:	1011883a 	mov	r8,r2
 2002794:	1813883a 	mov	r9,r3
 2002798:	01b33374 	movhi	r6,52429
 200279c:	31b33344 	addi	r6,r6,-13107
 20027a0:	01d021b4 	movhi	r7,16518
 20027a4:	39d5b304 	addi	r7,r7,22220
 20027a8:	4009883a 	mov	r4,r8
 20027ac:	480b883a 	mov	r5,r9
 20027b0:	2003c700 	call	2003c70 <__ledf2>
 20027b4:	00800216 	blt	zero,r2,20027c0 <whole_collide+0x10c>
 20027b8:	00800044 	movi	r2,1
 20027bc:	00000106 	br	20027c4 <whole_collide+0x110>
 20027c0:	0005883a 	mov	r2,zero
 20027c4:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 20027c8:	e0bff817 	ldw	r2,-32(fp)
 20027cc:	10000a26 	beq	r2,zero,20027f8 <whole_collide+0x144>
			ball[0]=0;
 20027d0:	e0bffe17 	ldw	r2,-8(fp)
 20027d4:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 20027d8:	e0bffe17 	ldw	r2,-8(fp)
 20027dc:	10800104 	addi	r2,r2,4
 20027e0:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 20027e4:	e0bfff17 	ldw	r2,-4(fp)
 20027e8:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 20027ec:	e0bfff17 	ldw	r2,-4(fp)
 20027f0:	10800104 	addi	r2,r2,4
 20027f4:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20027f8:	e0bff917 	ldw	r2,-28(fp)
 20027fc:	10800044 	addi	r2,r2,1
 2002800:	e0bff915 	stw	r2,-28(fp)
 2002804:	e0bff917 	ldw	r2,-28(fp)
 2002808:	10800190 	cmplti	r2,r2,6
 200280c:	103fc01e 	bne	r2,zero,2002710 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 2002810:	e0bff817 	ldw	r2,-32(fp)
}
 2002814:	e037883a 	mov	sp,fp
 2002818:	dfc00117 	ldw	ra,4(sp)
 200281c:	df000017 	ldw	fp,0(sp)
 2002820:	dec00204 	addi	sp,sp,8
 2002824:	f800283a 	ret

02002828 <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2002828:	defffa04 	addi	sp,sp,-24
 200282c:	df000515 	stw	fp,20(sp)
 2002830:	df000504 	addi	fp,sp,20
 2002834:	e13ffd15 	stw	r4,-12(fp)
 2002838:	e17ffe15 	stw	r5,-8(fp)
 200283c:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2002840:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2002844:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2002848:	e0bffd17 	ldw	r2,-12(fp)
 200284c:	10c00017 	ldw	r3,0(r2)
 2002850:	0090b1b4 	movhi	r2,17094
 2002854:	1885f9f2 	custom	231,r2,r3,r2
 2002858:	1000061e 	bne	r2,zero,2002874 <borderCollide+0x4c>
 200285c:	e0bffd17 	ldw	r2,-12(fp)
 2002860:	10c00017 	ldw	r3,0(r2)
 2002864:	009111b4 	movhi	r2,17478
 2002868:	10900004 	addi	r2,r2,16384
 200286c:	1885f972 	custom	229,r2,r3,r2
 2002870:	10000226 	beq	r2,zero,200287c <borderCollide+0x54>
 2002874:	00800044 	movi	r2,1
 2002878:	00000106 	br	2002880 <borderCollide+0x58>
 200287c:	0005883a 	mov	r2,zero
 2002880:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2002884:	e0bffd17 	ldw	r2,-12(fp)
 2002888:	10800104 	addi	r2,r2,4
 200288c:	10c00017 	ldw	r3,0(r2)
 2002890:	0090a634 	movhi	r2,17048
 2002894:	1885f9f2 	custom	231,r2,r3,r2
 2002898:	1000061e 	bne	r2,zero,20028b4 <borderCollide+0x8c>
 200289c:	e0bffd17 	ldw	r2,-12(fp)
 20028a0:	10800104 	addi	r2,r2,4
 20028a4:	10c00017 	ldw	r3,0(r2)
 20028a8:	0090f874 	movhi	r2,17377
 20028ac:	1885f972 	custom	229,r2,r3,r2
 20028b0:	10000226 	beq	r2,zero,20028bc <borderCollide+0x94>
 20028b4:	00800044 	movi	r2,1
 20028b8:	00000106 	br	20028c0 <borderCollide+0x98>
 20028bc:	0005883a 	mov	r2,zero
 20028c0:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 20028c4:	e0bffe17 	ldw	r2,-8(fp)
 20028c8:	10800017 	ldw	r2,0(r2)
 20028cc:	1000081e 	bne	r2,zero,20028f0 <borderCollide+0xc8>
 20028d0:	e0bffb17 	ldw	r2,-20(fp)
 20028d4:	10000626 	beq	r2,zero,20028f0 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 20028d8:	e0ffff17 	ldw	r3,-4(fp)
 20028dc:	18800017 	ldw	r2,0(r3)
 20028e0:	0007883a 	mov	r3,zero
 20028e4:	1887ffb2 	custom	254,r3,r3,r2
 20028e8:	e0bfff17 	ldw	r2,-4(fp)
 20028ec:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 20028f0:	e0bffe17 	ldw	r2,-8(fp)
 20028f4:	10800204 	addi	r2,r2,8
 20028f8:	10800017 	ldw	r2,0(r2)
 20028fc:	10000a1e 	bne	r2,zero,2002928 <borderCollide+0x100>
 2002900:	e0bffc17 	ldw	r2,-16(fp)
 2002904:	10000826 	beq	r2,zero,2002928 <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 2002908:	e0bfff17 	ldw	r2,-4(fp)
 200290c:	10800104 	addi	r2,r2,4
 2002910:	e0ffff17 	ldw	r3,-4(fp)
 2002914:	19000104 	addi	r4,r3,4
 2002918:	20c00017 	ldw	r3,0(r4)
 200291c:	0009883a 	mov	r4,zero
 2002920:	20c7ffb2 	custom	254,r3,r4,r3
 2002924:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2002928:	e0bffe17 	ldw	r2,-8(fp)
 200292c:	10c00117 	ldw	r3,4(r2)
 2002930:	e0bffe17 	ldw	r2,-8(fp)
 2002934:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2002938:	e0bffe17 	ldw	r2,-8(fp)
 200293c:	10800104 	addi	r2,r2,4
 2002940:	e0fffb17 	ldw	r3,-20(fp)
 2002944:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2002948:	e0bffe17 	ldw	r2,-8(fp)
 200294c:	10800204 	addi	r2,r2,8
 2002950:	e0fffe17 	ldw	r3,-8(fp)
 2002954:	18c00317 	ldw	r3,12(r3)
 2002958:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 200295c:	e0bffe17 	ldw	r2,-8(fp)
 2002960:	10800304 	addi	r2,r2,12
 2002964:	e0fffc17 	ldw	r3,-16(fp)
 2002968:	10c00015 	stw	r3,0(r2)
}
 200296c:	0001883a 	nop
 2002970:	e037883a 	mov	sp,fp
 2002974:	df000017 	ldw	fp,0(sp)
 2002978:	dec00104 	addi	sp,sp,4
 200297c:	f800283a 	ret

02002980 <momentum>:

float momentum (float* velocity){
 2002980:	defffd04 	addi	sp,sp,-12
 2002984:	df000215 	stw	fp,8(sp)
 2002988:	df000204 	addi	fp,sp,8
 200298c:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2002990:	e0bfff17 	ldw	r2,-4(fp)
 2002994:	10c00017 	ldw	r3,0(r2)
 2002998:	e13fff17 	ldw	r4,-4(fp)
 200299c:	20800017 	ldw	r2,0(r4)
 20029a0:	1887ff32 	custom	252,r3,r3,r2
 20029a4:	e0bfff17 	ldw	r2,-4(fp)
 20029a8:	10800104 	addi	r2,r2,4
 20029ac:	11000017 	ldw	r4,0(r2)
 20029b0:	e0bfff17 	ldw	r2,-4(fp)
 20029b4:	11400104 	addi	r5,r2,4
 20029b8:	28800017 	ldw	r2,0(r5)
 20029bc:	2085ff32 	custom	252,r2,r4,r2
 20029c0:	1885ff72 	custom	253,r2,r3,r2
 20029c4:	e0bffe15 	stw	r2,-8(fp)
	return result;
 20029c8:	e0bffe17 	ldw	r2,-8(fp)
 20029cc:	1007883a 	mov	r3,r2
}
 20029d0:	1805883a 	mov	r2,r3
 20029d4:	e037883a 	mov	sp,fp
 20029d8:	df000017 	ldw	fp,0(sp)
 20029dc:	dec00104 	addi	sp,sp,4
 20029e0:	f800283a 	ret

020029e4 <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 20029e4:	defff604 	addi	sp,sp,-40
 20029e8:	df000915 	stw	fp,36(sp)
 20029ec:	df000904 	addi	fp,sp,36
 20029f0:	e13ffd15 	stw	r4,-12(fp)
 20029f4:	e17ffe15 	stw	r5,-8(fp)
 20029f8:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 20029fc:	e0bfff17 	ldw	r2,-4(fp)
 2002a00:	10c00117 	ldw	r3,4(r2)
 2002a04:	e0bfff17 	ldw	r2,-4(fp)
 2002a08:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 2002a0c:	e0bffd17 	ldw	r2,-12(fp)
 2002a10:	10800017 	ldw	r2,0(r2)
 2002a14:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2002a18:	e0bffe17 	ldw	r2,-8(fp)
 2002a1c:	10800017 	ldw	r2,0(r2)
 2002a20:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 2002a24:	e0bffd17 	ldw	r2,-12(fp)
 2002a28:	10800117 	ldw	r2,4(r2)
 2002a2c:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2002a30:	e0bffe17 	ldw	r2,-8(fp)
 2002a34:	10800117 	ldw	r2,4(r2)
 2002a38:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2002a3c:	e0fff817 	ldw	r3,-32(fp)
 2002a40:	e0bff717 	ldw	r2,-36(fp)
 2002a44:	1885ffb2 	custom	254,r2,r3,r2
 2002a48:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2002a4c:	e0fffa17 	ldw	r3,-24(fp)
 2002a50:	e0bff917 	ldw	r2,-28(fp)
 2002a54:	1885ffb2 	custom	254,r2,r3,r2
 2002a58:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2002a5c:	e0bfff17 	ldw	r2,-4(fp)
 2002a60:	10800104 	addi	r2,r2,4
 2002a64:	e13ffb17 	ldw	r4,-20(fp)
 2002a68:	e0fffb17 	ldw	r3,-20(fp)
 2002a6c:	20c9ff32 	custom	252,r4,r4,r3
 2002a70:	e17ffc17 	ldw	r5,-16(fp)
 2002a74:	e0fffc17 	ldw	r3,-16(fp)
 2002a78:	28c7ff32 	custom	252,r3,r5,r3
 2002a7c:	20c9ff72 	custom	253,r4,r4,r3
 2002a80:	00d10a74 	movhi	r3,17449
 2002a84:	20c7f9b2 	custom	230,r3,r4,r3
 2002a88:	18c03fcc 	andi	r3,r3,255
 2002a8c:	10c00015 	stw	r3,0(r2)
}
 2002a90:	0001883a 	nop
 2002a94:	e037883a 	mov	sp,fp
 2002a98:	df000017 	ldw	fp,0(sp)
 2002a9c:	dec00104 	addi	sp,sp,4
 2002aa0:	f800283a 	ret

02002aa4 <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2002aa4:	deffd104 	addi	sp,sp,-188
 2002aa8:	dfc02e15 	stw	ra,184(sp)
 2002aac:	df002d15 	stw	fp,180(sp)
 2002ab0:	ddc02c15 	stw	r23,176(sp)
 2002ab4:	dd802b15 	stw	r22,172(sp)
 2002ab8:	dd402a15 	stw	r21,168(sp)
 2002abc:	dd002915 	stw	r20,164(sp)
 2002ac0:	dcc02815 	stw	r19,160(sp)
 2002ac4:	dc802715 	stw	r18,156(sp)
 2002ac8:	dc402615 	stw	r17,152(sp)
 2002acc:	dc002515 	stw	r16,148(sp)
 2002ad0:	df002d04 	addi	fp,sp,180
 2002ad4:	e13fee15 	stw	r4,-72(fp)
 2002ad8:	e17fef15 	stw	r5,-68(fp)
 2002adc:	e1bff015 	stw	r6,-64(fp)
 2002ae0:	e1fff115 	stw	r7,-60(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 2002ae4:	e0800217 	ldw	r2,8(fp)
 2002ae8:	10800017 	ldw	r2,0(r2)
 2002aec:	1000041e 	bne	r2,zero,2002b00 <collide_calc+0x5c>
 2002af0:	e0800217 	ldw	r2,8(fp)
 2002af4:	10800104 	addi	r2,r2,4
 2002af8:	10800017 	ldw	r2,0(r2)
 2002afc:	10001d1e 	bne	r2,zero,2002b74 <collide_calc+0xd0>
 2002b00:	e0800217 	ldw	r2,8(fp)
 2002b04:	10800017 	ldw	r2,0(r2)
 2002b08:	10011626 	beq	r2,zero,2002f64 <collide_calc+0x4c0>
 2002b0c:	e0800217 	ldw	r2,8(fp)
 2002b10:	10800104 	addi	r2,r2,4
 2002b14:	10800017 	ldw	r2,0(r2)
 2002b18:	10011226 	beq	r2,zero,2002f64 <collide_calc+0x4c0>
 2002b1c:	e0ffee17 	ldw	r3,-72(fp)
 2002b20:	18800017 	ldw	r2,0(r3)
 2002b24:	0007883a 	mov	r3,zero
 2002b28:	10c5f8f2 	custom	227,r2,r2,r3
 2002b2c:	10010d1e 	bne	r2,zero,2002f64 <collide_calc+0x4c0>
 2002b30:	e0bfee17 	ldw	r2,-72(fp)
 2002b34:	10c00104 	addi	r3,r2,4
 2002b38:	18800017 	ldw	r2,0(r3)
 2002b3c:	0007883a 	mov	r3,zero
 2002b40:	10c5f8f2 	custom	227,r2,r2,r3
 2002b44:	1001071e 	bne	r2,zero,2002f64 <collide_calc+0x4c0>
 2002b48:	e0ffef17 	ldw	r3,-68(fp)
 2002b4c:	18800017 	ldw	r2,0(r3)
 2002b50:	0007883a 	mov	r3,zero
 2002b54:	10c5f8f2 	custom	227,r2,r2,r3
 2002b58:	1001021e 	bne	r2,zero,2002f64 <collide_calc+0x4c0>
 2002b5c:	e0bfef17 	ldw	r2,-68(fp)
 2002b60:	10c00104 	addi	r3,r2,4
 2002b64:	18800017 	ldw	r2,0(r3)
 2002b68:	0007883a 	mov	r3,zero
 2002b6c:	10c5f8f2 	custom	227,r2,r2,r3
 2002b70:	1000fc1e 	bne	r2,zero,2002f64 <collide_calc+0x4c0>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2002b74:	e0bfee17 	ldw	r2,-72(fp)
 2002b78:	10800017 	ldw	r2,0(r2)
 2002b7c:	e0bfe315 	stw	r2,-116(fp)
		x2=ball2[0];
 2002b80:	e0bfef17 	ldw	r2,-68(fp)
 2002b84:	10800017 	ldw	r2,0(r2)
 2002b88:	e0bfe415 	stw	r2,-112(fp)
		y1=ball1[1];
 2002b8c:	e0bfee17 	ldw	r2,-72(fp)
 2002b90:	10800117 	ldw	r2,4(r2)
 2002b94:	e0bfe515 	stw	r2,-108(fp)
		y2=ball2[1];
 2002b98:	e0bfef17 	ldw	r2,-68(fp)
 2002b9c:	10800117 	ldw	r2,4(r2)
 2002ba0:	e0bfe615 	stw	r2,-104(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2002ba4:	008fe034 	movhi	r2,16256
 2002ba8:	e0bfe715 	stw	r2,-100(fp)
		x21 = x2-x1;
 2002bac:	e0ffe417 	ldw	r3,-112(fp)
 2002bb0:	e0bfe317 	ldw	r2,-116(fp)
 2002bb4:	1885ffb2 	custom	254,r2,r3,r2
 2002bb8:	e0bfe115 	stw	r2,-124(fp)
		y21 = y2-y1;
 2002bbc:	e0ffe617 	ldw	r3,-104(fp)
 2002bc0:	e0bfe517 	ldw	r2,-108(fp)
 2002bc4:	1885ffb2 	custom	254,r2,r3,r2
 2002bc8:	e0bfe815 	stw	r2,-96(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2002bcc:	e0bff117 	ldw	r2,-60(fp)
 2002bd0:	10c00017 	ldw	r3,0(r2)
 2002bd4:	e13ff017 	ldw	r4,-64(fp)
 2002bd8:	20800017 	ldw	r2,0(r4)
 2002bdc:	1885ffb2 	custom	254,r2,r3,r2
 2002be0:	e0bfec15 	stw	r2,-80(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2002be4:	e0bff117 	ldw	r2,-60(fp)
 2002be8:	10800104 	addi	r2,r2,4
 2002bec:	10c00017 	ldw	r3,0(r2)
 2002bf0:	e0bff017 	ldw	r2,-64(fp)
 2002bf4:	11000104 	addi	r4,r2,4
 2002bf8:	20800017 	ldw	r2,0(r4)
 2002bfc:	1885ffb2 	custom	254,r2,r3,r2
 2002c00:	e0bfed15 	stw	r2,-76(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 2002c04:	e0ffec17 	ldw	r3,-80(fp)
 2002c08:	e0bfe117 	ldw	r2,-124(fp)
 2002c0c:	1887ff32 	custom	252,r3,r3,r2
 2002c10:	e13fed17 	ldw	r4,-76(fp)
 2002c14:	e0bfe817 	ldw	r2,-96(fp)
 2002c18:	2085ff32 	custom	252,r2,r4,r2
 2002c1c:	1885ff72 	custom	253,r2,r3,r2
 2002c20:	0007883a 	mov	r3,zero
 2002c24:	10c5f932 	custom	228,r2,r2,r3
 2002c28:	10005026 	beq	r2,zero,2002d6c <collide_calc+0x2c8>
			printf("error in collision\n");
 2002c2c:	010080b4 	movhi	r4,514
 2002c30:	2139a404 	addi	r4,r4,-6512
 2002c34:	2004e7c0 	call	2004e7c <puts>
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002c38:	e0bfee17 	ldw	r2,-72(fp)
 2002c3c:	10c00017 	ldw	r3,0(r2)
 2002c40:	1809883a 	mov	r4,r3
 2002c44:	200447c0 	call	200447c <__extendsfdf2>
 2002c48:	e0bff215 	stw	r2,-56(fp)
 2002c4c:	e0fff315 	stw	r3,-52(fp)
 2002c50:	e0bfee17 	ldw	r2,-72(fp)
 2002c54:	10800104 	addi	r2,r2,4
 2002c58:	10c00017 	ldw	r3,0(r2)
 2002c5c:	1809883a 	mov	r4,r3
 2002c60:	200447c0 	call	200447c <__extendsfdf2>
 2002c64:	1021883a 	mov	r16,r2
 2002c68:	1823883a 	mov	r17,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002c6c:	e0bfef17 	ldw	r2,-68(fp)
 2002c70:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002c74:	1809883a 	mov	r4,r3
 2002c78:	200447c0 	call	200447c <__extendsfdf2>
 2002c7c:	1025883a 	mov	r18,r2
 2002c80:	1827883a 	mov	r19,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002c84:	e0bfef17 	ldw	r2,-68(fp)
 2002c88:	10800104 	addi	r2,r2,4
 2002c8c:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002c90:	1809883a 	mov	r4,r3
 2002c94:	200447c0 	call	200447c <__extendsfdf2>
 2002c98:	1029883a 	mov	r20,r2
 2002c9c:	182b883a 	mov	r21,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002ca0:	e0bff017 	ldw	r2,-64(fp)
 2002ca4:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002ca8:	1809883a 	mov	r4,r3
 2002cac:	200447c0 	call	200447c <__extendsfdf2>
 2002cb0:	102d883a 	mov	r22,r2
 2002cb4:	182f883a 	mov	r23,r3
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002cb8:	e0bff017 	ldw	r2,-64(fp)
 2002cbc:	10800104 	addi	r2,r2,4
 2002cc0:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002cc4:	1809883a 	mov	r4,r3
 2002cc8:	200447c0 	call	200447c <__extendsfdf2>
 2002ccc:	e0bff415 	stw	r2,-48(fp)
 2002cd0:	e0fff515 	stw	r3,-44(fp)
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002cd4:	e0bff117 	ldw	r2,-60(fp)
 2002cd8:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002cdc:	1809883a 	mov	r4,r3
 2002ce0:	200447c0 	call	200447c <__extendsfdf2>
 2002ce4:	e0bff615 	stw	r2,-40(fp)
 2002ce8:	e0fff715 	stw	r3,-36(fp)
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
 2002cec:	e0bff117 	ldw	r2,-60(fp)
 2002cf0:	10800104 	addi	r2,r2,4
 2002cf4:	10c00017 	ldw	r3,0(r2)
		v21[0]=velocity2[0]-velocity1[0];
		v21[1]=velocity2[1]-velocity1[1];

		if ((v21[0]*x21 + v21[1]*y21) >=0){
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
 2002cf8:	1809883a 	mov	r4,r3
 2002cfc:	200447c0 	call	200447c <__extendsfdf2>
 2002d00:	1009883a 	mov	r4,r2
 2002d04:	180b883a 	mov	r5,r3
 2002d08:	d9000c15 	stw	r4,48(sp)
 2002d0c:	d9400d15 	stw	r5,52(sp)
 2002d10:	e0bff617 	ldw	r2,-40(fp)
 2002d14:	d8800a15 	stw	r2,40(sp)
 2002d18:	e0bff717 	ldw	r2,-36(fp)
 2002d1c:	d8800b15 	stw	r2,44(sp)
 2002d20:	e0bff417 	ldw	r2,-48(fp)
 2002d24:	d8800815 	stw	r2,32(sp)
 2002d28:	e0bff517 	ldw	r2,-44(fp)
 2002d2c:	d8800915 	stw	r2,36(sp)
 2002d30:	dd800615 	stw	r22,24(sp)
 2002d34:	ddc00715 	stw	r23,28(sp)
 2002d38:	dd000415 	stw	r20,16(sp)
 2002d3c:	dd400515 	stw	r21,20(sp)
 2002d40:	dc800215 	stw	r18,8(sp)
 2002d44:	dcc00315 	stw	r19,12(sp)
 2002d48:	dc000015 	stw	r16,0(sp)
 2002d4c:	dc400115 	stw	r17,4(sp)
 2002d50:	e1bff217 	ldw	r6,-56(fp)
 2002d54:	e1fff317 	ldw	r7,-52(fp)
 2002d58:	e1400317 	ldw	r5,12(fp)
 2002d5c:	010080b4 	movhi	r4,514
 2002d60:	2139a904 	addi	r4,r4,-6492
 2002d64:	2004cfc0 	call	2004cfc <printf>

            velocity1[0] -= m21*dv;
            velocity1[1] -= a*m21*dv;
		}
	}
}
 2002d68:	00007e06 	br	2002f64 <collide_calc+0x4c0>
			printf("error in collision\n");
			printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
		else{
			fy21=0.000001*fabs(y21);
 2002d6c:	e0bfe817 	ldw	r2,-96(fp)
 2002d70:	1005f832 	custom	224,r2,r2,zero
 2002d74:	1009883a 	mov	r4,r2
 2002d78:	200447c0 	call	200447c <__extendsfdf2>
 2002d7c:	1011883a 	mov	r8,r2
 2002d80:	1813883a 	mov	r9,r3
 2002d84:	01a82db4 	movhi	r6,41142
 2002d88:	31bb6344 	addi	r6,r6,-4723
 2002d8c:	01cfac74 	movhi	r7,16049
 2002d90:	39f1bdc4 	addi	r7,r7,-14601
 2002d94:	4009883a 	mov	r4,r8
 2002d98:	480b883a 	mov	r5,r9
 2002d9c:	2003d640 	call	2003d64 <__muldf3>
 2002da0:	1009883a 	mov	r4,r2
 2002da4:	180b883a 	mov	r5,r3
 2002da8:	2005883a 	mov	r2,r4
 2002dac:	2807883a 	mov	r3,r5
 2002db0:	1009883a 	mov	r4,r2
 2002db4:	180b883a 	mov	r5,r3
 2002db8:	200458c0 	call	200458c <__truncdfsf2>
 2002dbc:	1007883a 	mov	r3,r2
 2002dc0:	e0ffe915 	stw	r3,-92(fp)
			if(fabs(x21) < fy21){
 2002dc4:	e0bfe117 	ldw	r2,-124(fp)
 2002dc8:	1007f832 	custom	224,r3,r2,zero
 2002dcc:	e0bfe917 	ldw	r2,-92(fp)
 2002dd0:	1885f9f2 	custom	231,r2,r3,r2
 2002dd4:	10000e26 	beq	r2,zero,2002e10 <collide_calc+0x36c>
				if (x21<0) sign = -1;
 2002dd8:	e0bfe117 	ldw	r2,-124(fp)
 2002ddc:	0007883a 	mov	r3,zero
 2002de0:	10c5f9f2 	custom	231,r2,r2,r3
 2002de4:	10000326 	beq	r2,zero,2002df4 <collide_calc+0x350>
 2002de8:	00bfffc4 	movi	r2,-1
 2002dec:	e0bfe215 	stw	r2,-120(fp)
 2002df0:	00000206 	br	2002dfc <collide_calc+0x358>
				else sign=1;
 2002df4:	00800044 	movi	r2,1
 2002df8:	e0bfe215 	stw	r2,-120(fp)
				x21=fy21*sign;
 2002dfc:	e0bfe217 	ldw	r2,-120(fp)
 2002e00:	1007feb2 	custom	250,r3,r2,zero
 2002e04:	e0bfe917 	ldw	r2,-92(fp)
 2002e08:	1885ff32 	custom	252,r2,r3,r2
 2002e0c:	e0bfe115 	stw	r2,-124(fp)
			}
			a=y21/x21;
 2002e10:	e0ffe817 	ldw	r3,-96(fp)
 2002e14:	e0bfe117 	ldw	r2,-124(fp)
 2002e18:	1885fff2 	custom	255,r2,r3,r2
 2002e1c:	e0bfea15 	stw	r2,-88(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 2002e20:	e0ffec17 	ldw	r3,-80(fp)
 2002e24:	e13fed17 	ldw	r4,-76(fp)
 2002e28:	e0bfea17 	ldw	r2,-88(fp)
 2002e2c:	2085ff32 	custom	252,r2,r4,r2
 2002e30:	1885ff72 	custom	253,r2,r3,r2
 2002e34:	1009883a 	mov	r4,r2
 2002e38:	200447c0 	call	200447c <__extendsfdf2>
 2002e3c:	1011883a 	mov	r8,r2
 2002e40:	1813883a 	mov	r9,r3
 2002e44:	000d883a 	mov	r6,zero
 2002e48:	01f00034 	movhi	r7,49152
 2002e4c:	4009883a 	mov	r4,r8
 2002e50:	480b883a 	mov	r5,r9
 2002e54:	2003d640 	call	2003d64 <__muldf3>
 2002e58:	1009883a 	mov	r4,r2
 2002e5c:	180b883a 	mov	r5,r3
 2002e60:	2021883a 	mov	r16,r4
 2002e64:	2823883a 	mov	r17,r5
 2002e68:	e0ffea17 	ldw	r3,-88(fp)
 2002e6c:	e0bfea17 	ldw	r2,-88(fp)
 2002e70:	1887ff32 	custom	252,r3,r3,r2
 2002e74:	008fe034 	movhi	r2,16256
 2002e78:	1887ff72 	custom	253,r3,r3,r2
 2002e7c:	e13fe717 	ldw	r4,-100(fp)
 2002e80:	008fe034 	movhi	r2,16256
 2002e84:	2085ff72 	custom	253,r2,r4,r2
 2002e88:	1885ff32 	custom	252,r2,r3,r2
 2002e8c:	1009883a 	mov	r4,r2
 2002e90:	200447c0 	call	200447c <__extendsfdf2>
 2002e94:	1009883a 	mov	r4,r2
 2002e98:	180b883a 	mov	r5,r3
 2002e9c:	200d883a 	mov	r6,r4
 2002ea0:	280f883a 	mov	r7,r5
 2002ea4:	8009883a 	mov	r4,r16
 2002ea8:	880b883a 	mov	r5,r17
 2002eac:	20032ac0 	call	20032ac <__divdf3>
 2002eb0:	1009883a 	mov	r4,r2
 2002eb4:	180b883a 	mov	r5,r3
 2002eb8:	2005883a 	mov	r2,r4
 2002ebc:	2807883a 	mov	r3,r5
 2002ec0:	1009883a 	mov	r4,r2
 2002ec4:	180b883a 	mov	r5,r3
 2002ec8:	200458c0 	call	200458c <__truncdfsf2>
 2002ecc:	1007883a 	mov	r3,r2
 2002ed0:	e0ffeb15 	stw	r3,-84(fp)
            velocity2[0] += dv;
 2002ed4:	e0bff117 	ldw	r2,-60(fp)
 2002ed8:	10c00017 	ldw	r3,0(r2)
 2002edc:	e0bfeb17 	ldw	r2,-84(fp)
 2002ee0:	1887ff72 	custom	253,r3,r3,r2
 2002ee4:	e0bff117 	ldw	r2,-60(fp)
 2002ee8:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 2002eec:	e0bff117 	ldw	r2,-60(fp)
 2002ef0:	10800104 	addi	r2,r2,4
 2002ef4:	e0fff117 	ldw	r3,-60(fp)
 2002ef8:	18c00104 	addi	r3,r3,4
 2002efc:	19000017 	ldw	r4,0(r3)
 2002f00:	e17fea17 	ldw	r5,-88(fp)
 2002f04:	e0ffeb17 	ldw	r3,-84(fp)
 2002f08:	28c7ff32 	custom	252,r3,r5,r3
 2002f0c:	20c7ff72 	custom	253,r3,r4,r3
 2002f10:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 2002f14:	e0bff017 	ldw	r2,-64(fp)
 2002f18:	10c00017 	ldw	r3,0(r2)
 2002f1c:	e13fe717 	ldw	r4,-100(fp)
 2002f20:	e0bfeb17 	ldw	r2,-84(fp)
 2002f24:	2085ff32 	custom	252,r2,r4,r2
 2002f28:	1887ffb2 	custom	254,r3,r3,r2
 2002f2c:	e0bff017 	ldw	r2,-64(fp)
 2002f30:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 2002f34:	e0bff017 	ldw	r2,-64(fp)
 2002f38:	10800104 	addi	r2,r2,4
 2002f3c:	e0fff017 	ldw	r3,-64(fp)
 2002f40:	18c00104 	addi	r3,r3,4
 2002f44:	19000017 	ldw	r4,0(r3)
 2002f48:	e17fea17 	ldw	r5,-88(fp)
 2002f4c:	e0ffe717 	ldw	r3,-100(fp)
 2002f50:	28cbff32 	custom	252,r5,r5,r3
 2002f54:	e0ffeb17 	ldw	r3,-84(fp)
 2002f58:	28c7ff32 	custom	252,r3,r5,r3
 2002f5c:	20c7ffb2 	custom	254,r3,r4,r3
 2002f60:	10c00015 	stw	r3,0(r2)
		}
	}
}
 2002f64:	0001883a 	nop
 2002f68:	e6fff804 	addi	sp,fp,-32
 2002f6c:	dfc00917 	ldw	ra,36(sp)
 2002f70:	df000817 	ldw	fp,32(sp)
 2002f74:	ddc00717 	ldw	r23,28(sp)
 2002f78:	dd800617 	ldw	r22,24(sp)
 2002f7c:	dd400517 	ldw	r21,20(sp)
 2002f80:	dd000417 	ldw	r20,16(sp)
 2002f84:	dcc00317 	ldw	r19,12(sp)
 2002f88:	dc800217 	ldw	r18,8(sp)
 2002f8c:	dc400117 	ldw	r17,4(sp)
 2002f90:	dc000017 	ldw	r16,0(sp)
 2002f94:	dec00a04 	addi	sp,sp,40
 2002f98:	f800283a 	ret

02002f9c <moveBall>:


void moveBall(float* ball, float* velocity){
 2002f9c:	defffd04 	addi	sp,sp,-12
 2002fa0:	df000215 	stw	fp,8(sp)
 2002fa4:	df000204 	addi	fp,sp,8
 2002fa8:	e13ffe15 	stw	r4,-8(fp)
 2002fac:	e17fff15 	stw	r5,-4(fp)
	ball[0] += velocity[0];
 2002fb0:	e0bffe17 	ldw	r2,-8(fp)
 2002fb4:	10c00017 	ldw	r3,0(r2)
 2002fb8:	e13fff17 	ldw	r4,-4(fp)
 2002fbc:	20800017 	ldw	r2,0(r4)
 2002fc0:	1887ff72 	custom	253,r3,r3,r2
 2002fc4:	e0bffe17 	ldw	r2,-8(fp)
 2002fc8:	10c00015 	stw	r3,0(r2)
	ball[1] += velocity[1];
 2002fcc:	e0bffe17 	ldw	r2,-8(fp)
 2002fd0:	10800104 	addi	r2,r2,4
 2002fd4:	e0fffe17 	ldw	r3,-8(fp)
 2002fd8:	18c00104 	addi	r3,r3,4
 2002fdc:	19000017 	ldw	r4,0(r3)
 2002fe0:	e0ffff17 	ldw	r3,-4(fp)
 2002fe4:	19400104 	addi	r5,r3,4
 2002fe8:	28c00017 	ldw	r3,0(r5)
 2002fec:	20c7ff72 	custom	253,r3,r4,r3
 2002ff0:	10c00015 	stw	r3,0(r2)
}
 2002ff4:	0001883a 	nop
 2002ff8:	e037883a 	mov	sp,fp
 2002ffc:	df000017 	ldw	fp,0(sp)
 2003000:	dec00104 	addi	sp,sp,4
 2003004:	f800283a 	ret

02003008 <damping>:


void damping(float* velocity){
 2003008:	defffc04 	addi	sp,sp,-16
 200300c:	dfc00315 	stw	ra,12(sp)
 2003010:	df000215 	stw	fp,8(sp)
 2003014:	dc000115 	stw	r16,4(sp)
 2003018:	df000204 	addi	fp,sp,8
 200301c:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 2003020:	e0bffe17 	ldw	r2,-8(fp)
 2003024:	10c00017 	ldw	r3,0(r2)
 2003028:	1809883a 	mov	r4,r3
 200302c:	200447c0 	call	200447c <__extendsfdf2>
 2003030:	1011883a 	mov	r8,r2
 2003034:	1813883a 	mov	r9,r3
 2003038:	018f5c74 	movhi	r6,15729
 200303c:	31a8f5c4 	addi	r6,r6,-23593
 2003040:	01cffc34 	movhi	r7,16368
 2003044:	39f5c284 	addi	r7,r7,-10486
 2003048:	4009883a 	mov	r4,r8
 200304c:	480b883a 	mov	r5,r9
 2003050:	2003d640 	call	2003d64 <__muldf3>
 2003054:	1009883a 	mov	r4,r2
 2003058:	180b883a 	mov	r5,r3
 200305c:	2005883a 	mov	r2,r4
 2003060:	2807883a 	mov	r3,r5
 2003064:	1009883a 	mov	r4,r2
 2003068:	180b883a 	mov	r5,r3
 200306c:	200458c0 	call	200458c <__truncdfsf2>
 2003070:	1007883a 	mov	r3,r2
 2003074:	e0bffe17 	ldw	r2,-8(fp)
 2003078:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 200307c:	e0bffe17 	ldw	r2,-8(fp)
 2003080:	14000104 	addi	r16,r2,4
 2003084:	e0bffe17 	ldw	r2,-8(fp)
 2003088:	10800104 	addi	r2,r2,4
 200308c:	10c00017 	ldw	r3,0(r2)
 2003090:	1809883a 	mov	r4,r3
 2003094:	200447c0 	call	200447c <__extendsfdf2>
 2003098:	1011883a 	mov	r8,r2
 200309c:	1813883a 	mov	r9,r3
 20030a0:	018f5c74 	movhi	r6,15729
 20030a4:	31a8f5c4 	addi	r6,r6,-23593
 20030a8:	01cffc34 	movhi	r7,16368
 20030ac:	39f5c284 	addi	r7,r7,-10486
 20030b0:	4009883a 	mov	r4,r8
 20030b4:	480b883a 	mov	r5,r9
 20030b8:	2003d640 	call	2003d64 <__muldf3>
 20030bc:	1009883a 	mov	r4,r2
 20030c0:	180b883a 	mov	r5,r3
 20030c4:	2005883a 	mov	r2,r4
 20030c8:	2807883a 	mov	r3,r5
 20030cc:	1009883a 	mov	r4,r2
 20030d0:	180b883a 	mov	r5,r3
 20030d4:	200458c0 	call	200458c <__truncdfsf2>
 20030d8:	1007883a 	mov	r3,r2
 20030dc:	80c00015 	stw	r3,0(r16)
}
 20030e0:	0001883a 	nop
 20030e4:	e6ffff04 	addi	sp,fp,-4
 20030e8:	dfc00217 	ldw	ra,8(sp)
 20030ec:	df000117 	ldw	fp,4(sp)
 20030f0:	dc000017 	ldw	r16,0(sp)
 20030f4:	dec00304 	addi	sp,sp,12
 20030f8:	f800283a 	ret

020030fc <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 20030fc:	defffa04 	addi	sp,sp,-24
 2003100:	dfc00515 	stw	ra,20(sp)
 2003104:	df000415 	stw	fp,16(sp)
 2003108:	df000404 	addi	fp,sp,16
 200310c:	e13ffc15 	stw	r4,-16(fp)
 2003110:	e17ffd15 	stw	r5,-12(fp)
 2003114:	e1bffe15 	stw	r6,-8(fp)
 2003118:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 200311c:	e13ffc17 	ldw	r4,-16(fp)
 2003120:	e17ffd17 	ldw	r5,-12(fp)
 2003124:	20031a80 	call	20031a8 <__fpclassifyd>
 2003128:	1000031e 	bne	r2,zero,2003138 <fmin+0x3c>
    return y;
 200312c:	e0bffe17 	ldw	r2,-8(fp)
 2003130:	e0ffff17 	ldw	r3,-4(fp)
 2003134:	00001306 	br	2003184 <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2003138:	e13ffe17 	ldw	r4,-8(fp)
 200313c:	e17fff17 	ldw	r5,-4(fp)
 2003140:	20031a80 	call	20031a8 <__fpclassifyd>
 2003144:	1000031e 	bne	r2,zero,2003154 <fmin+0x58>
    return x;
 2003148:	e0bffc17 	ldw	r2,-16(fp)
 200314c:	e0fffd17 	ldw	r3,-12(fp)
 2003150:	00000c06 	br	2003184 <fmin+0x88>
  
  return x < y ? x : y;
 2003154:	e1bffe17 	ldw	r6,-8(fp)
 2003158:	e1ffff17 	ldw	r7,-4(fp)
 200315c:	e13ffc17 	ldw	r4,-16(fp)
 2003160:	e17ffd17 	ldw	r5,-12(fp)
 2003164:	2003c700 	call	2003c70 <__ledf2>
 2003168:	1000030e 	bge	r2,zero,2003178 <fmin+0x7c>
 200316c:	e0bffc17 	ldw	r2,-16(fp)
 2003170:	e0fffd17 	ldw	r3,-12(fp)
 2003174:	00000206 	br	2003180 <fmin+0x84>
 2003178:	e0bffe17 	ldw	r2,-8(fp)
 200317c:	e0ffff17 	ldw	r3,-4(fp)
 2003180:	0001883a 	nop
 2003184:	1009883a 	mov	r4,r2
 2003188:	180b883a 	mov	r5,r3
}
 200318c:	2005883a 	mov	r2,r4
 2003190:	2807883a 	mov	r3,r5
 2003194:	e037883a 	mov	sp,fp
 2003198:	dfc00117 	ldw	ra,4(sp)
 200319c:	df000017 	ldw	fp,0(sp)
 20031a0:	dec00204 	addi	sp,sp,8
 20031a4:	f800283a 	ret

020031a8 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 20031a8:	defff904 	addi	sp,sp,-28
 20031ac:	df000615 	stw	fp,24(sp)
 20031b0:	df000604 	addi	fp,sp,24
 20031b4:	e13ffe15 	stw	r4,-8(fp)
 20031b8:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 20031bc:	e0bffe17 	ldw	r2,-8(fp)
 20031c0:	e0bffc15 	stw	r2,-16(fp)
 20031c4:	e0bfff17 	ldw	r2,-4(fp)
 20031c8:	e0bffd15 	stw	r2,-12(fp)
 20031cc:	e0bffd17 	ldw	r2,-12(fp)
 20031d0:	e0bffa15 	stw	r2,-24(fp)
 20031d4:	e0bffc17 	ldw	r2,-16(fp)
 20031d8:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 20031dc:	e0bffa17 	ldw	r2,-24(fp)
 20031e0:	1000021e 	bne	r2,zero,20031ec <__fpclassifyd+0x44>
 20031e4:	e0bffb17 	ldw	r2,-20(fp)
 20031e8:	10000526 	beq	r2,zero,2003200 <__fpclassifyd+0x58>
 20031ec:	e0fffa17 	ldw	r3,-24(fp)
 20031f0:	00a00034 	movhi	r2,32768
 20031f4:	1880041e 	bne	r3,r2,2003208 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 20031f8:	e0bffb17 	ldw	r2,-20(fp)
 20031fc:	1000021e 	bne	r2,zero,2003208 <__fpclassifyd+0x60>
    return FP_ZERO;
 2003200:	00800084 	movi	r2,2
 2003204:	00002506 	br	200329c <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 2003208:	e0fffa17 	ldw	r3,-24(fp)
 200320c:	00800434 	movhi	r2,16
 2003210:	18800336 	bltu	r3,r2,2003220 <__fpclassifyd+0x78>
 2003214:	e0fffa17 	ldw	r3,-24(fp)
 2003218:	009ffc34 	movhi	r2,32752
 200321c:	18800636 	bltu	r3,r2,2003238 <__fpclassifyd+0x90>
 2003220:	e0fffa17 	ldw	r3,-24(fp)
 2003224:	00a00434 	movhi	r2,32784
 2003228:	18800536 	bltu	r3,r2,2003240 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 200322c:	e0fffa17 	ldw	r3,-24(fp)
 2003230:	00bffc34 	movhi	r2,65520
 2003234:	1880022e 	bgeu	r3,r2,2003240 <__fpclassifyd+0x98>
    return FP_NORMAL;
 2003238:	00800104 	movi	r2,4
 200323c:	00001706 	br	200329c <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003240:	e0fffa17 	ldw	r3,-24(fp)
 2003244:	00800434 	movhi	r2,16
 2003248:	18800536 	bltu	r3,r2,2003260 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200324c:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003250:	1000050e 	bge	r2,zero,2003268 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003254:	e0fffa17 	ldw	r3,-24(fp)
 2003258:	00a00434 	movhi	r2,32784
 200325c:	1880022e 	bgeu	r3,r2,2003268 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 2003260:	008000c4 	movi	r2,3
 2003264:	00000d06 	br	200329c <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2003268:	e0fffa17 	ldw	r3,-24(fp)
 200326c:	009ffc34 	movhi	r2,32752
 2003270:	1880021e 	bne	r3,r2,200327c <__fpclassifyd+0xd4>
 2003274:	e0bffb17 	ldw	r2,-20(fp)
 2003278:	10000526 	beq	r2,zero,2003290 <__fpclassifyd+0xe8>
 200327c:	e0fffa17 	ldw	r3,-24(fp)
 2003280:	00bffc34 	movhi	r2,65520
 2003284:	1880041e 	bne	r3,r2,2003298 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003288:	e0bffb17 	ldw	r2,-20(fp)
 200328c:	1000021e 	bne	r2,zero,2003298 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 2003290:	00800044 	movi	r2,1
 2003294:	00000106 	br	200329c <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2003298:	0005883a 	mov	r2,zero
}
 200329c:	e037883a 	mov	sp,fp
 20032a0:	df000017 	ldw	fp,0(sp)
 20032a4:	dec00104 	addi	sp,sp,4
 20032a8:	f800283a 	ret

020032ac <__divdf3>:
 20032ac:	defff204 	addi	sp,sp,-56
 20032b0:	dd400915 	stw	r21,36(sp)
 20032b4:	282ad53a 	srli	r21,r5,20
 20032b8:	dd000815 	stw	r20,32(sp)
 20032bc:	2828d7fa 	srli	r20,r5,31
 20032c0:	dc000415 	stw	r16,16(sp)
 20032c4:	04000434 	movhi	r16,16
 20032c8:	df000c15 	stw	fp,48(sp)
 20032cc:	843fffc4 	addi	r16,r16,-1
 20032d0:	dfc00d15 	stw	ra,52(sp)
 20032d4:	ddc00b15 	stw	r23,44(sp)
 20032d8:	dd800a15 	stw	r22,40(sp)
 20032dc:	dcc00715 	stw	r19,28(sp)
 20032e0:	dc800615 	stw	r18,24(sp)
 20032e4:	dc400515 	stw	r17,20(sp)
 20032e8:	ad41ffcc 	andi	r21,r21,2047
 20032ec:	2c20703a 	and	r16,r5,r16
 20032f0:	a7003fcc 	andi	fp,r20,255
 20032f4:	a8006126 	beq	r21,zero,200347c <__divdf3+0x1d0>
 20032f8:	0081ffc4 	movi	r2,2047
 20032fc:	2025883a 	mov	r18,r4
 2003300:	a8803726 	beq	r21,r2,20033e0 <__divdf3+0x134>
 2003304:	80800434 	orhi	r2,r16,16
 2003308:	100490fa 	slli	r2,r2,3
 200330c:	2020d77a 	srli	r16,r4,29
 2003310:	202490fa 	slli	r18,r4,3
 2003314:	ad7f0044 	addi	r21,r21,-1023
 2003318:	80a0b03a 	or	r16,r16,r2
 200331c:	0027883a 	mov	r19,zero
 2003320:	0013883a 	mov	r9,zero
 2003324:	3804d53a 	srli	r2,r7,20
 2003328:	382cd7fa 	srli	r22,r7,31
 200332c:	04400434 	movhi	r17,16
 2003330:	8c7fffc4 	addi	r17,r17,-1
 2003334:	1081ffcc 	andi	r2,r2,2047
 2003338:	3011883a 	mov	r8,r6
 200333c:	3c62703a 	and	r17,r7,r17
 2003340:	b5c03fcc 	andi	r23,r22,255
 2003344:	10006c26 	beq	r2,zero,20034f8 <__divdf3+0x24c>
 2003348:	00c1ffc4 	movi	r3,2047
 200334c:	10c06426 	beq	r2,r3,20034e0 <__divdf3+0x234>
 2003350:	88c00434 	orhi	r3,r17,16
 2003354:	180690fa 	slli	r3,r3,3
 2003358:	3022d77a 	srli	r17,r6,29
 200335c:	301090fa 	slli	r8,r6,3
 2003360:	10bf0044 	addi	r2,r2,-1023
 2003364:	88e2b03a 	or	r17,r17,r3
 2003368:	000f883a 	mov	r7,zero
 200336c:	a58cf03a 	xor	r6,r20,r22
 2003370:	3cc8b03a 	or	r4,r7,r19
 2003374:	a8abc83a 	sub	r21,r21,r2
 2003378:	008003c4 	movi	r2,15
 200337c:	3007883a 	mov	r3,r6
 2003380:	34c03fcc 	andi	r19,r6,255
 2003384:	11009036 	bltu	r2,r4,20035c8 <__divdf3+0x31c>
 2003388:	200890ba 	slli	r4,r4,2
 200338c:	00808034 	movhi	r2,512
 2003390:	108ce804 	addi	r2,r2,13216
 2003394:	2089883a 	add	r4,r4,r2
 2003398:	20800017 	ldw	r2,0(r4)
 200339c:	1000683a 	jmp	r2
 20033a0:	020035c8 	cmpgei	r8,zero,215
 20033a4:	02003418 	cmpnei	r8,zero,208
 20033a8:	020035b8 	rdprs	r8,zero,214
 20033ac:	0200340c 	andi	r8,zero,208
 20033b0:	020035b8 	rdprs	r8,zero,214
 20033b4:	0200358c 	andi	r8,zero,214
 20033b8:	020035b8 	rdprs	r8,zero,214
 20033bc:	0200340c 	andi	r8,zero,208
 20033c0:	02003418 	cmpnei	r8,zero,208
 20033c4:	02003418 	cmpnei	r8,zero,208
 20033c8:	0200358c 	andi	r8,zero,214
 20033cc:	0200340c 	andi	r8,zero,208
 20033d0:	020033fc 	xorhi	r8,zero,207
 20033d4:	020033fc 	xorhi	r8,zero,207
 20033d8:	020033fc 	xorhi	r8,zero,207
 20033dc:	020038ac 	andhi	r8,zero,226
 20033e0:	2404b03a 	or	r2,r4,r16
 20033e4:	1000661e 	bne	r2,zero,2003580 <__divdf3+0x2d4>
 20033e8:	04c00204 	movi	r19,8
 20033ec:	0021883a 	mov	r16,zero
 20033f0:	0025883a 	mov	r18,zero
 20033f4:	02400084 	movi	r9,2
 20033f8:	003fca06 	br	2003324 <__divdf3+0x78>
 20033fc:	8023883a 	mov	r17,r16
 2003400:	9011883a 	mov	r8,r18
 2003404:	e02f883a 	mov	r23,fp
 2003408:	480f883a 	mov	r7,r9
 200340c:	00800084 	movi	r2,2
 2003410:	3881311e 	bne	r7,r2,20038d8 <__divdf3+0x62c>
 2003414:	b827883a 	mov	r19,r23
 2003418:	98c0004c 	andi	r3,r19,1
 200341c:	0081ffc4 	movi	r2,2047
 2003420:	000b883a 	mov	r5,zero
 2003424:	0025883a 	mov	r18,zero
 2003428:	1004953a 	slli	r2,r2,20
 200342c:	18c03fcc 	andi	r3,r3,255
 2003430:	04400434 	movhi	r17,16
 2003434:	8c7fffc4 	addi	r17,r17,-1
 2003438:	180697fa 	slli	r3,r3,31
 200343c:	2c4a703a 	and	r5,r5,r17
 2003440:	288ab03a 	or	r5,r5,r2
 2003444:	28c6b03a 	or	r3,r5,r3
 2003448:	9005883a 	mov	r2,r18
 200344c:	dfc00d17 	ldw	ra,52(sp)
 2003450:	df000c17 	ldw	fp,48(sp)
 2003454:	ddc00b17 	ldw	r23,44(sp)
 2003458:	dd800a17 	ldw	r22,40(sp)
 200345c:	dd400917 	ldw	r21,36(sp)
 2003460:	dd000817 	ldw	r20,32(sp)
 2003464:	dcc00717 	ldw	r19,28(sp)
 2003468:	dc800617 	ldw	r18,24(sp)
 200346c:	dc400517 	ldw	r17,20(sp)
 2003470:	dc000417 	ldw	r16,16(sp)
 2003474:	dec00e04 	addi	sp,sp,56
 2003478:	f800283a 	ret
 200347c:	2404b03a 	or	r2,r4,r16
 2003480:	2027883a 	mov	r19,r4
 2003484:	10003926 	beq	r2,zero,200356c <__divdf3+0x2c0>
 2003488:	80012e26 	beq	r16,zero,2003944 <__divdf3+0x698>
 200348c:	8009883a 	mov	r4,r16
 2003490:	d9800315 	stw	r6,12(sp)
 2003494:	d9c00215 	stw	r7,8(sp)
 2003498:	20047340 	call	2004734 <__clzsi2>
 200349c:	d9800317 	ldw	r6,12(sp)
 20034a0:	d9c00217 	ldw	r7,8(sp)
 20034a4:	113ffd44 	addi	r4,r2,-11
 20034a8:	00c00704 	movi	r3,28
 20034ac:	19012116 	blt	r3,r4,2003934 <__divdf3+0x688>
 20034b0:	00c00744 	movi	r3,29
 20034b4:	147ffe04 	addi	r17,r2,-8
 20034b8:	1907c83a 	sub	r3,r3,r4
 20034bc:	8460983a 	sll	r16,r16,r17
 20034c0:	98c6d83a 	srl	r3,r19,r3
 20034c4:	9c64983a 	sll	r18,r19,r17
 20034c8:	1c20b03a 	or	r16,r3,r16
 20034cc:	1080fcc4 	addi	r2,r2,1011
 20034d0:	00abc83a 	sub	r21,zero,r2
 20034d4:	0027883a 	mov	r19,zero
 20034d8:	0013883a 	mov	r9,zero
 20034dc:	003f9106 	br	2003324 <__divdf3+0x78>
 20034e0:	3446b03a 	or	r3,r6,r17
 20034e4:	18001f1e 	bne	r3,zero,2003564 <__divdf3+0x2b8>
 20034e8:	0023883a 	mov	r17,zero
 20034ec:	0011883a 	mov	r8,zero
 20034f0:	01c00084 	movi	r7,2
 20034f4:	003f9d06 	br	200336c <__divdf3+0xc0>
 20034f8:	3446b03a 	or	r3,r6,r17
 20034fc:	18001526 	beq	r3,zero,2003554 <__divdf3+0x2a8>
 2003500:	88011b26 	beq	r17,zero,2003970 <__divdf3+0x6c4>
 2003504:	8809883a 	mov	r4,r17
 2003508:	d9800315 	stw	r6,12(sp)
 200350c:	da400115 	stw	r9,4(sp)
 2003510:	20047340 	call	2004734 <__clzsi2>
 2003514:	d9800317 	ldw	r6,12(sp)
 2003518:	da400117 	ldw	r9,4(sp)
 200351c:	113ffd44 	addi	r4,r2,-11
 2003520:	00c00704 	movi	r3,28
 2003524:	19010e16 	blt	r3,r4,2003960 <__divdf3+0x6b4>
 2003528:	00c00744 	movi	r3,29
 200352c:	123ffe04 	addi	r8,r2,-8
 2003530:	1907c83a 	sub	r3,r3,r4
 2003534:	8a22983a 	sll	r17,r17,r8
 2003538:	30c6d83a 	srl	r3,r6,r3
 200353c:	3210983a 	sll	r8,r6,r8
 2003540:	1c62b03a 	or	r17,r3,r17
 2003544:	1080fcc4 	addi	r2,r2,1011
 2003548:	0085c83a 	sub	r2,zero,r2
 200354c:	000f883a 	mov	r7,zero
 2003550:	003f8606 	br	200336c <__divdf3+0xc0>
 2003554:	0023883a 	mov	r17,zero
 2003558:	0011883a 	mov	r8,zero
 200355c:	01c00044 	movi	r7,1
 2003560:	003f8206 	br	200336c <__divdf3+0xc0>
 2003564:	01c000c4 	movi	r7,3
 2003568:	003f8006 	br	200336c <__divdf3+0xc0>
 200356c:	04c00104 	movi	r19,4
 2003570:	0021883a 	mov	r16,zero
 2003574:	0025883a 	mov	r18,zero
 2003578:	02400044 	movi	r9,1
 200357c:	003f6906 	br	2003324 <__divdf3+0x78>
 2003580:	04c00304 	movi	r19,12
 2003584:	024000c4 	movi	r9,3
 2003588:	003f6606 	br	2003324 <__divdf3+0x78>
 200358c:	01400434 	movhi	r5,16
 2003590:	0007883a 	mov	r3,zero
 2003594:	297fffc4 	addi	r5,r5,-1
 2003598:	04bfffc4 	movi	r18,-1
 200359c:	0081ffc4 	movi	r2,2047
 20035a0:	003fa106 	br	2003428 <__divdf3+0x17c>
 20035a4:	00c00044 	movi	r3,1
 20035a8:	1887c83a 	sub	r3,r3,r2
 20035ac:	01000e04 	movi	r4,56
 20035b0:	20c1210e 	bge	r4,r3,2003a38 <__divdf3+0x78c>
 20035b4:	98c0004c 	andi	r3,r19,1
 20035b8:	0005883a 	mov	r2,zero
 20035bc:	000b883a 	mov	r5,zero
 20035c0:	0025883a 	mov	r18,zero
 20035c4:	003f9806 	br	2003428 <__divdf3+0x17c>
 20035c8:	8c00fd36 	bltu	r17,r16,20039c0 <__divdf3+0x714>
 20035cc:	8440fb26 	beq	r16,r17,20039bc <__divdf3+0x710>
 20035d0:	8007883a 	mov	r3,r16
 20035d4:	ad7fffc4 	addi	r21,r21,-1
 20035d8:	0021883a 	mov	r16,zero
 20035dc:	4004d63a 	srli	r2,r8,24
 20035e0:	8822923a 	slli	r17,r17,8
 20035e4:	1809883a 	mov	r4,r3
 20035e8:	402c923a 	slli	r22,r8,8
 20035ec:	88b8b03a 	or	fp,r17,r2
 20035f0:	e028d43a 	srli	r20,fp,16
 20035f4:	d8c00015 	stw	r3,0(sp)
 20035f8:	e5ffffcc 	andi	r23,fp,65535
 20035fc:	a00b883a 	mov	r5,r20
 2003600:	20048900 	call	2004890 <__udivsi3>
 2003604:	d8c00017 	ldw	r3,0(sp)
 2003608:	a00b883a 	mov	r5,r20
 200360c:	d8800315 	stw	r2,12(sp)
 2003610:	1809883a 	mov	r4,r3
 2003614:	20048f40 	call	20048f4 <__umodsi3>
 2003618:	d9800317 	ldw	r6,12(sp)
 200361c:	1006943a 	slli	r3,r2,16
 2003620:	9004d43a 	srli	r2,r18,16
 2003624:	b9a3383a 	mul	r17,r23,r6
 2003628:	10c4b03a 	or	r2,r2,r3
 200362c:	1440062e 	bgeu	r2,r17,2003648 <__divdf3+0x39c>
 2003630:	1705883a 	add	r2,r2,fp
 2003634:	30ffffc4 	addi	r3,r6,-1
 2003638:	1700ee36 	bltu	r2,fp,20039f4 <__divdf3+0x748>
 200363c:	1440ed2e 	bgeu	r2,r17,20039f4 <__divdf3+0x748>
 2003640:	31bfff84 	addi	r6,r6,-2
 2003644:	1705883a 	add	r2,r2,fp
 2003648:	1463c83a 	sub	r17,r2,r17
 200364c:	a00b883a 	mov	r5,r20
 2003650:	8809883a 	mov	r4,r17
 2003654:	d9800315 	stw	r6,12(sp)
 2003658:	20048900 	call	2004890 <__udivsi3>
 200365c:	a00b883a 	mov	r5,r20
 2003660:	8809883a 	mov	r4,r17
 2003664:	d8800215 	stw	r2,8(sp)
 2003668:	20048f40 	call	20048f4 <__umodsi3>
 200366c:	d9c00217 	ldw	r7,8(sp)
 2003670:	1004943a 	slli	r2,r2,16
 2003674:	94bfffcc 	andi	r18,r18,65535
 2003678:	b9d1383a 	mul	r8,r23,r7
 200367c:	90a4b03a 	or	r18,r18,r2
 2003680:	d9800317 	ldw	r6,12(sp)
 2003684:	9200062e 	bgeu	r18,r8,20036a0 <__divdf3+0x3f4>
 2003688:	9725883a 	add	r18,r18,fp
 200368c:	38bfffc4 	addi	r2,r7,-1
 2003690:	9700d636 	bltu	r18,fp,20039ec <__divdf3+0x740>
 2003694:	9200d52e 	bgeu	r18,r8,20039ec <__divdf3+0x740>
 2003698:	39ffff84 	addi	r7,r7,-2
 200369c:	9725883a 	add	r18,r18,fp
 20036a0:	3004943a 	slli	r2,r6,16
 20036a4:	b012d43a 	srli	r9,r22,16
 20036a8:	b1bfffcc 	andi	r6,r22,65535
 20036ac:	11e2b03a 	or	r17,r2,r7
 20036b0:	8806d43a 	srli	r3,r17,16
 20036b4:	893fffcc 	andi	r4,r17,65535
 20036b8:	218b383a 	mul	r5,r4,r6
 20036bc:	30c5383a 	mul	r2,r6,r3
 20036c0:	2249383a 	mul	r4,r4,r9
 20036c4:	280ed43a 	srli	r7,r5,16
 20036c8:	9225c83a 	sub	r18,r18,r8
 20036cc:	2089883a 	add	r4,r4,r2
 20036d0:	3909883a 	add	r4,r7,r4
 20036d4:	1a47383a 	mul	r3,r3,r9
 20036d8:	2080022e 	bgeu	r4,r2,20036e4 <__divdf3+0x438>
 20036dc:	00800074 	movhi	r2,1
 20036e0:	1887883a 	add	r3,r3,r2
 20036e4:	2004d43a 	srli	r2,r4,16
 20036e8:	2008943a 	slli	r4,r4,16
 20036ec:	297fffcc 	andi	r5,r5,65535
 20036f0:	10c7883a 	add	r3,r2,r3
 20036f4:	2149883a 	add	r4,r4,r5
 20036f8:	90c0a536 	bltu	r18,r3,2003990 <__divdf3+0x6e4>
 20036fc:	90c0bf26 	beq	r18,r3,20039fc <__divdf3+0x750>
 2003700:	90c7c83a 	sub	r3,r18,r3
 2003704:	810fc83a 	sub	r7,r16,r4
 2003708:	81e5803a 	cmpltu	r18,r16,r7
 200370c:	1ca5c83a 	sub	r18,r3,r18
 2003710:	e480c126 	beq	fp,r18,2003a18 <__divdf3+0x76c>
 2003714:	a00b883a 	mov	r5,r20
 2003718:	9009883a 	mov	r4,r18
 200371c:	d9800315 	stw	r6,12(sp)
 2003720:	d9c00215 	stw	r7,8(sp)
 2003724:	da400115 	stw	r9,4(sp)
 2003728:	20048900 	call	2004890 <__udivsi3>
 200372c:	a00b883a 	mov	r5,r20
 2003730:	9009883a 	mov	r4,r18
 2003734:	d8800015 	stw	r2,0(sp)
 2003738:	20048f40 	call	20048f4 <__umodsi3>
 200373c:	d9c00217 	ldw	r7,8(sp)
 2003740:	da000017 	ldw	r8,0(sp)
 2003744:	1006943a 	slli	r3,r2,16
 2003748:	3804d43a 	srli	r2,r7,16
 200374c:	ba21383a 	mul	r16,r23,r8
 2003750:	d9800317 	ldw	r6,12(sp)
 2003754:	10c4b03a 	or	r2,r2,r3
 2003758:	da400117 	ldw	r9,4(sp)
 200375c:	1400062e 	bgeu	r2,r16,2003778 <__divdf3+0x4cc>
 2003760:	1705883a 	add	r2,r2,fp
 2003764:	40ffffc4 	addi	r3,r8,-1
 2003768:	1700ad36 	bltu	r2,fp,2003a20 <__divdf3+0x774>
 200376c:	1400ac2e 	bgeu	r2,r16,2003a20 <__divdf3+0x774>
 2003770:	423fff84 	addi	r8,r8,-2
 2003774:	1705883a 	add	r2,r2,fp
 2003778:	1421c83a 	sub	r16,r2,r16
 200377c:	a00b883a 	mov	r5,r20
 2003780:	8009883a 	mov	r4,r16
 2003784:	d9800315 	stw	r6,12(sp)
 2003788:	d9c00215 	stw	r7,8(sp)
 200378c:	da000015 	stw	r8,0(sp)
 2003790:	da400115 	stw	r9,4(sp)
 2003794:	20048900 	call	2004890 <__udivsi3>
 2003798:	8009883a 	mov	r4,r16
 200379c:	a00b883a 	mov	r5,r20
 20037a0:	1025883a 	mov	r18,r2
 20037a4:	20048f40 	call	20048f4 <__umodsi3>
 20037a8:	d9c00217 	ldw	r7,8(sp)
 20037ac:	1004943a 	slli	r2,r2,16
 20037b0:	bcaf383a 	mul	r23,r23,r18
 20037b4:	393fffcc 	andi	r4,r7,65535
 20037b8:	2088b03a 	or	r4,r4,r2
 20037bc:	d9800317 	ldw	r6,12(sp)
 20037c0:	da000017 	ldw	r8,0(sp)
 20037c4:	da400117 	ldw	r9,4(sp)
 20037c8:	25c0062e 	bgeu	r4,r23,20037e4 <__divdf3+0x538>
 20037cc:	2709883a 	add	r4,r4,fp
 20037d0:	90bfffc4 	addi	r2,r18,-1
 20037d4:	27009436 	bltu	r4,fp,2003a28 <__divdf3+0x77c>
 20037d8:	25c0932e 	bgeu	r4,r23,2003a28 <__divdf3+0x77c>
 20037dc:	94bfff84 	addi	r18,r18,-2
 20037e0:	2709883a 	add	r4,r4,fp
 20037e4:	4004943a 	slli	r2,r8,16
 20037e8:	25efc83a 	sub	r23,r4,r23
 20037ec:	1490b03a 	or	r8,r2,r18
 20037f0:	4008d43a 	srli	r4,r8,16
 20037f4:	40ffffcc 	andi	r3,r8,65535
 20037f8:	30c5383a 	mul	r2,r6,r3
 20037fc:	1a47383a 	mul	r3,r3,r9
 2003800:	310d383a 	mul	r6,r6,r4
 2003804:	100ad43a 	srli	r5,r2,16
 2003808:	4913383a 	mul	r9,r9,r4
 200380c:	1987883a 	add	r3,r3,r6
 2003810:	28c7883a 	add	r3,r5,r3
 2003814:	1980022e 	bgeu	r3,r6,2003820 <__divdf3+0x574>
 2003818:	01000074 	movhi	r4,1
 200381c:	4913883a 	add	r9,r9,r4
 2003820:	1808d43a 	srli	r4,r3,16
 2003824:	1806943a 	slli	r3,r3,16
 2003828:	10bfffcc 	andi	r2,r2,65535
 200382c:	2253883a 	add	r9,r4,r9
 2003830:	1887883a 	add	r3,r3,r2
 2003834:	ba403836 	bltu	r23,r9,2003918 <__divdf3+0x66c>
 2003838:	ba403626 	beq	r23,r9,2003914 <__divdf3+0x668>
 200383c:	42000054 	ori	r8,r8,1
 2003840:	a880ffc4 	addi	r2,r21,1023
 2003844:	00bf570e 	bge	zero,r2,20035a4 <__divdf3+0x2f8>
 2003848:	40c001cc 	andi	r3,r8,7
 200384c:	18000726 	beq	r3,zero,200386c <__divdf3+0x5c0>
 2003850:	40c003cc 	andi	r3,r8,15
 2003854:	01000104 	movi	r4,4
 2003858:	19000426 	beq	r3,r4,200386c <__divdf3+0x5c0>
 200385c:	4107883a 	add	r3,r8,r4
 2003860:	1a11803a 	cmpltu	r8,r3,r8
 2003864:	8a23883a 	add	r17,r17,r8
 2003868:	1811883a 	mov	r8,r3
 200386c:	88c0402c 	andhi	r3,r17,256
 2003870:	18000426 	beq	r3,zero,2003884 <__divdf3+0x5d8>
 2003874:	00ffc034 	movhi	r3,65280
 2003878:	18ffffc4 	addi	r3,r3,-1
 200387c:	a8810004 	addi	r2,r21,1024
 2003880:	88e2703a 	and	r17,r17,r3
 2003884:	00c1ff84 	movi	r3,2046
 2003888:	18bee316 	blt	r3,r2,2003418 <__divdf3+0x16c>
 200388c:	8824977a 	slli	r18,r17,29
 2003890:	4010d0fa 	srli	r8,r8,3
 2003894:	8822927a 	slli	r17,r17,9
 2003898:	1081ffcc 	andi	r2,r2,2047
 200389c:	9224b03a 	or	r18,r18,r8
 20038a0:	880ad33a 	srli	r5,r17,12
 20038a4:	98c0004c 	andi	r3,r19,1
 20038a8:	003edf06 	br	2003428 <__divdf3+0x17c>
 20038ac:	8080022c 	andhi	r2,r16,8
 20038b0:	10001226 	beq	r2,zero,20038fc <__divdf3+0x650>
 20038b4:	8880022c 	andhi	r2,r17,8
 20038b8:	1000101e 	bne	r2,zero,20038fc <__divdf3+0x650>
 20038bc:	00800434 	movhi	r2,16
 20038c0:	89400234 	orhi	r5,r17,8
 20038c4:	10bfffc4 	addi	r2,r2,-1
 20038c8:	b007883a 	mov	r3,r22
 20038cc:	288a703a 	and	r5,r5,r2
 20038d0:	4025883a 	mov	r18,r8
 20038d4:	003f3106 	br	200359c <__divdf3+0x2f0>
 20038d8:	008000c4 	movi	r2,3
 20038dc:	3880a626 	beq	r7,r2,2003b78 <__divdf3+0x8cc>
 20038e0:	00800044 	movi	r2,1
 20038e4:	3880521e 	bne	r7,r2,2003a30 <__divdf3+0x784>
 20038e8:	b807883a 	mov	r3,r23
 20038ec:	0005883a 	mov	r2,zero
 20038f0:	000b883a 	mov	r5,zero
 20038f4:	0025883a 	mov	r18,zero
 20038f8:	003ecb06 	br	2003428 <__divdf3+0x17c>
 20038fc:	00800434 	movhi	r2,16
 2003900:	81400234 	orhi	r5,r16,8
 2003904:	10bfffc4 	addi	r2,r2,-1
 2003908:	a007883a 	mov	r3,r20
 200390c:	288a703a 	and	r5,r5,r2
 2003910:	003f2206 	br	200359c <__divdf3+0x2f0>
 2003914:	183fca26 	beq	r3,zero,2003840 <__divdf3+0x594>
 2003918:	e5ef883a 	add	r23,fp,r23
 200391c:	40bfffc4 	addi	r2,r8,-1
 2003920:	bf00392e 	bgeu	r23,fp,2003a08 <__divdf3+0x75c>
 2003924:	1011883a 	mov	r8,r2
 2003928:	ba7fc41e 	bne	r23,r9,200383c <__divdf3+0x590>
 200392c:	b0ffc31e 	bne	r22,r3,200383c <__divdf3+0x590>
 2003930:	003fc306 	br	2003840 <__divdf3+0x594>
 2003934:	143ff604 	addi	r16,r2,-40
 2003938:	9c20983a 	sll	r16,r19,r16
 200393c:	0025883a 	mov	r18,zero
 2003940:	003ee206 	br	20034cc <__divdf3+0x220>
 2003944:	d9800315 	stw	r6,12(sp)
 2003948:	d9c00215 	stw	r7,8(sp)
 200394c:	20047340 	call	2004734 <__clzsi2>
 2003950:	10800804 	addi	r2,r2,32
 2003954:	d9c00217 	ldw	r7,8(sp)
 2003958:	d9800317 	ldw	r6,12(sp)
 200395c:	003ed106 	br	20034a4 <__divdf3+0x1f8>
 2003960:	147ff604 	addi	r17,r2,-40
 2003964:	3462983a 	sll	r17,r6,r17
 2003968:	0011883a 	mov	r8,zero
 200396c:	003ef506 	br	2003544 <__divdf3+0x298>
 2003970:	3009883a 	mov	r4,r6
 2003974:	d9800315 	stw	r6,12(sp)
 2003978:	da400115 	stw	r9,4(sp)
 200397c:	20047340 	call	2004734 <__clzsi2>
 2003980:	10800804 	addi	r2,r2,32
 2003984:	da400117 	ldw	r9,4(sp)
 2003988:	d9800317 	ldw	r6,12(sp)
 200398c:	003ee306 	br	200351c <__divdf3+0x270>
 2003990:	85a1883a 	add	r16,r16,r22
 2003994:	8585803a 	cmpltu	r2,r16,r22
 2003998:	1705883a 	add	r2,r2,fp
 200399c:	14a5883a 	add	r18,r2,r18
 20039a0:	88bfffc4 	addi	r2,r17,-1
 20039a4:	e4800c2e 	bgeu	fp,r18,20039d8 <__divdf3+0x72c>
 20039a8:	90c03e36 	bltu	r18,r3,2003aa4 <__divdf3+0x7f8>
 20039ac:	1c806926 	beq	r3,r18,2003b54 <__divdf3+0x8a8>
 20039b0:	90c7c83a 	sub	r3,r18,r3
 20039b4:	1023883a 	mov	r17,r2
 20039b8:	003f5206 	br	2003704 <__divdf3+0x458>
 20039bc:	923f0436 	bltu	r18,r8,20035d0 <__divdf3+0x324>
 20039c0:	800897fa 	slli	r4,r16,31
 20039c4:	9004d07a 	srli	r2,r18,1
 20039c8:	8006d07a 	srli	r3,r16,1
 20039cc:	902097fa 	slli	r16,r18,31
 20039d0:	20a4b03a 	or	r18,r4,r2
 20039d4:	003f0106 	br	20035dc <__divdf3+0x330>
 20039d8:	e4bff51e 	bne	fp,r18,20039b0 <__divdf3+0x704>
 20039dc:	85bff22e 	bgeu	r16,r22,20039a8 <__divdf3+0x6fc>
 20039e0:	e0c7c83a 	sub	r3,fp,r3
 20039e4:	1023883a 	mov	r17,r2
 20039e8:	003f4606 	br	2003704 <__divdf3+0x458>
 20039ec:	100f883a 	mov	r7,r2
 20039f0:	003f2b06 	br	20036a0 <__divdf3+0x3f4>
 20039f4:	180d883a 	mov	r6,r3
 20039f8:	003f1306 	br	2003648 <__divdf3+0x39c>
 20039fc:	813fe436 	bltu	r16,r4,2003990 <__divdf3+0x6e4>
 2003a00:	0007883a 	mov	r3,zero
 2003a04:	003f3f06 	br	2003704 <__divdf3+0x458>
 2003a08:	ba402c36 	bltu	r23,r9,2003abc <__divdf3+0x810>
 2003a0c:	4dc05426 	beq	r9,r23,2003b60 <__divdf3+0x8b4>
 2003a10:	1011883a 	mov	r8,r2
 2003a14:	003f8906 	br	200383c <__divdf3+0x590>
 2003a18:	023fffc4 	movi	r8,-1
 2003a1c:	003f8806 	br	2003840 <__divdf3+0x594>
 2003a20:	1811883a 	mov	r8,r3
 2003a24:	003f5406 	br	2003778 <__divdf3+0x4cc>
 2003a28:	1025883a 	mov	r18,r2
 2003a2c:	003f6d06 	br	20037e4 <__divdf3+0x538>
 2003a30:	b827883a 	mov	r19,r23
 2003a34:	003f8206 	br	2003840 <__divdf3+0x594>
 2003a38:	010007c4 	movi	r4,31
 2003a3c:	20c02616 	blt	r4,r3,2003ad8 <__divdf3+0x82c>
 2003a40:	00800804 	movi	r2,32
 2003a44:	10c5c83a 	sub	r2,r2,r3
 2003a48:	888a983a 	sll	r5,r17,r2
 2003a4c:	40c8d83a 	srl	r4,r8,r3
 2003a50:	4084983a 	sll	r2,r8,r2
 2003a54:	88e2d83a 	srl	r17,r17,r3
 2003a58:	2906b03a 	or	r3,r5,r4
 2003a5c:	1004c03a 	cmpne	r2,r2,zero
 2003a60:	1886b03a 	or	r3,r3,r2
 2003a64:	188001cc 	andi	r2,r3,7
 2003a68:	10000726 	beq	r2,zero,2003a88 <__divdf3+0x7dc>
 2003a6c:	188003cc 	andi	r2,r3,15
 2003a70:	01000104 	movi	r4,4
 2003a74:	11000426 	beq	r2,r4,2003a88 <__divdf3+0x7dc>
 2003a78:	1805883a 	mov	r2,r3
 2003a7c:	10c00104 	addi	r3,r2,4
 2003a80:	1885803a 	cmpltu	r2,r3,r2
 2003a84:	88a3883a 	add	r17,r17,r2
 2003a88:	8880202c 	andhi	r2,r17,128
 2003a8c:	10002726 	beq	r2,zero,2003b2c <__divdf3+0x880>
 2003a90:	98c0004c 	andi	r3,r19,1
 2003a94:	00800044 	movi	r2,1
 2003a98:	000b883a 	mov	r5,zero
 2003a9c:	0025883a 	mov	r18,zero
 2003aa0:	003e6106 	br	2003428 <__divdf3+0x17c>
 2003aa4:	85a1883a 	add	r16,r16,r22
 2003aa8:	8585803a 	cmpltu	r2,r16,r22
 2003aac:	1705883a 	add	r2,r2,fp
 2003ab0:	14a5883a 	add	r18,r2,r18
 2003ab4:	8c7fff84 	addi	r17,r17,-2
 2003ab8:	003f1106 	br	2003700 <__divdf3+0x454>
 2003abc:	b589883a 	add	r4,r22,r22
 2003ac0:	25ad803a 	cmpltu	r22,r4,r22
 2003ac4:	b739883a 	add	fp,r22,fp
 2003ac8:	40bfff84 	addi	r2,r8,-2
 2003acc:	bf2f883a 	add	r23,r23,fp
 2003ad0:	202d883a 	mov	r22,r4
 2003ad4:	003f9306 	br	2003924 <__divdf3+0x678>
 2003ad8:	013ff844 	movi	r4,-31
 2003adc:	2085c83a 	sub	r2,r4,r2
 2003ae0:	8888d83a 	srl	r4,r17,r2
 2003ae4:	00800804 	movi	r2,32
 2003ae8:	18802126 	beq	r3,r2,2003b70 <__divdf3+0x8c4>
 2003aec:	00801004 	movi	r2,64
 2003af0:	10c5c83a 	sub	r2,r2,r3
 2003af4:	8884983a 	sll	r2,r17,r2
 2003af8:	1204b03a 	or	r2,r2,r8
 2003afc:	1004c03a 	cmpne	r2,r2,zero
 2003b00:	2084b03a 	or	r2,r4,r2
 2003b04:	144001cc 	andi	r17,r2,7
 2003b08:	88000d1e 	bne	r17,zero,2003b40 <__divdf3+0x894>
 2003b0c:	000b883a 	mov	r5,zero
 2003b10:	1024d0fa 	srli	r18,r2,3
 2003b14:	98c0004c 	andi	r3,r19,1
 2003b18:	0005883a 	mov	r2,zero
 2003b1c:	9464b03a 	or	r18,r18,r17
 2003b20:	003e4106 	br	2003428 <__divdf3+0x17c>
 2003b24:	1007883a 	mov	r3,r2
 2003b28:	0023883a 	mov	r17,zero
 2003b2c:	880a927a 	slli	r5,r17,9
 2003b30:	1805883a 	mov	r2,r3
 2003b34:	8822977a 	slli	r17,r17,29
 2003b38:	280ad33a 	srli	r5,r5,12
 2003b3c:	003ff406 	br	2003b10 <__divdf3+0x864>
 2003b40:	10c003cc 	andi	r3,r2,15
 2003b44:	01000104 	movi	r4,4
 2003b48:	193ff626 	beq	r3,r4,2003b24 <__divdf3+0x878>
 2003b4c:	0023883a 	mov	r17,zero
 2003b50:	003fca06 	br	2003a7c <__divdf3+0x7d0>
 2003b54:	813fd336 	bltu	r16,r4,2003aa4 <__divdf3+0x7f8>
 2003b58:	1023883a 	mov	r17,r2
 2003b5c:	003fa806 	br	2003a00 <__divdf3+0x754>
 2003b60:	b0ffd636 	bltu	r22,r3,2003abc <__divdf3+0x810>
 2003b64:	1011883a 	mov	r8,r2
 2003b68:	b0ff341e 	bne	r22,r3,200383c <__divdf3+0x590>
 2003b6c:	003f3406 	br	2003840 <__divdf3+0x594>
 2003b70:	0005883a 	mov	r2,zero
 2003b74:	003fe006 	br	2003af8 <__divdf3+0x84c>
 2003b78:	00800434 	movhi	r2,16
 2003b7c:	89400234 	orhi	r5,r17,8
 2003b80:	10bfffc4 	addi	r2,r2,-1
 2003b84:	b807883a 	mov	r3,r23
 2003b88:	288a703a 	and	r5,r5,r2
 2003b8c:	4025883a 	mov	r18,r8
 2003b90:	003e8206 	br	200359c <__divdf3+0x2f0>

02003b94 <__gedf2>:
 2003b94:	2804d53a 	srli	r2,r5,20
 2003b98:	3806d53a 	srli	r3,r7,20
 2003b9c:	02000434 	movhi	r8,16
 2003ba0:	423fffc4 	addi	r8,r8,-1
 2003ba4:	1081ffcc 	andi	r2,r2,2047
 2003ba8:	0241ffc4 	movi	r9,2047
 2003bac:	2a14703a 	and	r10,r5,r8
 2003bb0:	18c1ffcc 	andi	r3,r3,2047
 2003bb4:	3a10703a 	and	r8,r7,r8
 2003bb8:	280ad7fa 	srli	r5,r5,31
 2003bbc:	380ed7fa 	srli	r7,r7,31
 2003bc0:	12401d26 	beq	r2,r9,2003c38 <__gedf2+0xa4>
 2003bc4:	0241ffc4 	movi	r9,2047
 2003bc8:	1a401226 	beq	r3,r9,2003c14 <__gedf2+0x80>
 2003bcc:	1000081e 	bne	r2,zero,2003bf0 <__gedf2+0x5c>
 2003bd0:	2296b03a 	or	r11,r4,r10
 2003bd4:	5813003a 	cmpeq	r9,r11,zero
 2003bd8:	1800091e 	bne	r3,zero,2003c00 <__gedf2+0x6c>
 2003bdc:	3218b03a 	or	r12,r6,r8
 2003be0:	6000071e 	bne	r12,zero,2003c00 <__gedf2+0x6c>
 2003be4:	0005883a 	mov	r2,zero
 2003be8:	5800101e 	bne	r11,zero,2003c2c <__gedf2+0x98>
 2003bec:	f800283a 	ret
 2003bf0:	18000c1e 	bne	r3,zero,2003c24 <__gedf2+0x90>
 2003bf4:	3212b03a 	or	r9,r6,r8
 2003bf8:	48000c26 	beq	r9,zero,2003c2c <__gedf2+0x98>
 2003bfc:	0013883a 	mov	r9,zero
 2003c00:	39c03fcc 	andi	r7,r7,255
 2003c04:	48000826 	beq	r9,zero,2003c28 <__gedf2+0x94>
 2003c08:	38000926 	beq	r7,zero,2003c30 <__gedf2+0x9c>
 2003c0c:	00800044 	movi	r2,1
 2003c10:	f800283a 	ret
 2003c14:	3212b03a 	or	r9,r6,r8
 2003c18:	483fec26 	beq	r9,zero,2003bcc <__gedf2+0x38>
 2003c1c:	00bfff84 	movi	r2,-2
 2003c20:	f800283a 	ret
 2003c24:	39c03fcc 	andi	r7,r7,255
 2003c28:	29c00626 	beq	r5,r7,2003c44 <__gedf2+0xb0>
 2003c2c:	283ff726 	beq	r5,zero,2003c0c <__gedf2+0x78>
 2003c30:	00bfffc4 	movi	r2,-1
 2003c34:	f800283a 	ret
 2003c38:	2292b03a 	or	r9,r4,r10
 2003c3c:	483fe126 	beq	r9,zero,2003bc4 <__gedf2+0x30>
 2003c40:	003ff606 	br	2003c1c <__gedf2+0x88>
 2003c44:	18bff916 	blt	r3,r2,2003c2c <__gedf2+0x98>
 2003c48:	10c00316 	blt	r2,r3,2003c58 <__gedf2+0xc4>
 2003c4c:	42bff736 	bltu	r8,r10,2003c2c <__gedf2+0x98>
 2003c50:	52000326 	beq	r10,r8,2003c60 <__gedf2+0xcc>
 2003c54:	5200042e 	bgeu	r10,r8,2003c68 <__gedf2+0xd4>
 2003c58:	283fec1e 	bne	r5,zero,2003c0c <__gedf2+0x78>
 2003c5c:	003ff406 	br	2003c30 <__gedf2+0x9c>
 2003c60:	313ff236 	bltu	r6,r4,2003c2c <__gedf2+0x98>
 2003c64:	21bffc36 	bltu	r4,r6,2003c58 <__gedf2+0xc4>
 2003c68:	0005883a 	mov	r2,zero
 2003c6c:	f800283a 	ret

02003c70 <__ledf2>:
 2003c70:	2804d53a 	srli	r2,r5,20
 2003c74:	3810d53a 	srli	r8,r7,20
 2003c78:	00c00434 	movhi	r3,16
 2003c7c:	18ffffc4 	addi	r3,r3,-1
 2003c80:	1081ffcc 	andi	r2,r2,2047
 2003c84:	0241ffc4 	movi	r9,2047
 2003c88:	28d4703a 	and	r10,r5,r3
 2003c8c:	4201ffcc 	andi	r8,r8,2047
 2003c90:	38c6703a 	and	r3,r7,r3
 2003c94:	280ad7fa 	srli	r5,r5,31
 2003c98:	380ed7fa 	srli	r7,r7,31
 2003c9c:	12401f26 	beq	r2,r9,2003d1c <__ledf2+0xac>
 2003ca0:	0241ffc4 	movi	r9,2047
 2003ca4:	42401426 	beq	r8,r9,2003cf8 <__ledf2+0x88>
 2003ca8:	1000091e 	bne	r2,zero,2003cd0 <__ledf2+0x60>
 2003cac:	2296b03a 	or	r11,r4,r10
 2003cb0:	5813003a 	cmpeq	r9,r11,zero
 2003cb4:	29403fcc 	andi	r5,r5,255
 2003cb8:	40000a1e 	bne	r8,zero,2003ce4 <__ledf2+0x74>
 2003cbc:	30d8b03a 	or	r12,r6,r3
 2003cc0:	6000081e 	bne	r12,zero,2003ce4 <__ledf2+0x74>
 2003cc4:	0005883a 	mov	r2,zero
 2003cc8:	5800111e 	bne	r11,zero,2003d10 <__ledf2+0xa0>
 2003ccc:	f800283a 	ret
 2003cd0:	29403fcc 	andi	r5,r5,255
 2003cd4:	40000c1e 	bne	r8,zero,2003d08 <__ledf2+0x98>
 2003cd8:	30d2b03a 	or	r9,r6,r3
 2003cdc:	48000c26 	beq	r9,zero,2003d10 <__ledf2+0xa0>
 2003ce0:	0013883a 	mov	r9,zero
 2003ce4:	39c03fcc 	andi	r7,r7,255
 2003ce8:	48000826 	beq	r9,zero,2003d0c <__ledf2+0x9c>
 2003cec:	38001126 	beq	r7,zero,2003d34 <__ledf2+0xc4>
 2003cf0:	00800044 	movi	r2,1
 2003cf4:	f800283a 	ret
 2003cf8:	30d2b03a 	or	r9,r6,r3
 2003cfc:	483fea26 	beq	r9,zero,2003ca8 <__ledf2+0x38>
 2003d00:	00800084 	movi	r2,2
 2003d04:	f800283a 	ret
 2003d08:	39c03fcc 	andi	r7,r7,255
 2003d0c:	39400726 	beq	r7,r5,2003d2c <__ledf2+0xbc>
 2003d10:	2800081e 	bne	r5,zero,2003d34 <__ledf2+0xc4>
 2003d14:	00800044 	movi	r2,1
 2003d18:	f800283a 	ret
 2003d1c:	2292b03a 	or	r9,r4,r10
 2003d20:	483fdf26 	beq	r9,zero,2003ca0 <__ledf2+0x30>
 2003d24:	00800084 	movi	r2,2
 2003d28:	f800283a 	ret
 2003d2c:	4080030e 	bge	r8,r2,2003d3c <__ledf2+0xcc>
 2003d30:	383fef26 	beq	r7,zero,2003cf0 <__ledf2+0x80>
 2003d34:	00bfffc4 	movi	r2,-1
 2003d38:	f800283a 	ret
 2003d3c:	123feb16 	blt	r2,r8,2003cec <__ledf2+0x7c>
 2003d40:	1abff336 	bltu	r3,r10,2003d10 <__ledf2+0xa0>
 2003d44:	50c00326 	beq	r10,r3,2003d54 <__ledf2+0xe4>
 2003d48:	50c0042e 	bgeu	r10,r3,2003d5c <__ledf2+0xec>
 2003d4c:	283fe81e 	bne	r5,zero,2003cf0 <__ledf2+0x80>
 2003d50:	003ff806 	br	2003d34 <__ledf2+0xc4>
 2003d54:	313fee36 	bltu	r6,r4,2003d10 <__ledf2+0xa0>
 2003d58:	21bffc36 	bltu	r4,r6,2003d4c <__ledf2+0xdc>
 2003d5c:	0005883a 	mov	r2,zero
 2003d60:	f800283a 	ret

02003d64 <__muldf3>:
 2003d64:	defff304 	addi	sp,sp,-52
 2003d68:	2804d53a 	srli	r2,r5,20
 2003d6c:	dd800915 	stw	r22,36(sp)
 2003d70:	282cd7fa 	srli	r22,r5,31
 2003d74:	dc000315 	stw	r16,12(sp)
 2003d78:	04000434 	movhi	r16,16
 2003d7c:	dd400815 	stw	r21,32(sp)
 2003d80:	dc800515 	stw	r18,20(sp)
 2003d84:	843fffc4 	addi	r16,r16,-1
 2003d88:	dfc00c15 	stw	ra,48(sp)
 2003d8c:	df000b15 	stw	fp,44(sp)
 2003d90:	ddc00a15 	stw	r23,40(sp)
 2003d94:	dd000715 	stw	r20,28(sp)
 2003d98:	dcc00615 	stw	r19,24(sp)
 2003d9c:	dc400415 	stw	r17,16(sp)
 2003da0:	1481ffcc 	andi	r18,r2,2047
 2003da4:	2c20703a 	and	r16,r5,r16
 2003da8:	b02b883a 	mov	r21,r22
 2003dac:	b2403fcc 	andi	r9,r22,255
 2003db0:	90006026 	beq	r18,zero,2003f34 <__muldf3+0x1d0>
 2003db4:	0081ffc4 	movi	r2,2047
 2003db8:	2029883a 	mov	r20,r4
 2003dbc:	90803626 	beq	r18,r2,2003e98 <__muldf3+0x134>
 2003dc0:	80800434 	orhi	r2,r16,16
 2003dc4:	100490fa 	slli	r2,r2,3
 2003dc8:	2020d77a 	srli	r16,r4,29
 2003dcc:	202890fa 	slli	r20,r4,3
 2003dd0:	94bf0044 	addi	r18,r18,-1023
 2003dd4:	80a0b03a 	or	r16,r16,r2
 2003dd8:	0027883a 	mov	r19,zero
 2003ddc:	0039883a 	mov	fp,zero
 2003de0:	3804d53a 	srli	r2,r7,20
 2003de4:	382ed7fa 	srli	r23,r7,31
 2003de8:	04400434 	movhi	r17,16
 2003dec:	8c7fffc4 	addi	r17,r17,-1
 2003df0:	1081ffcc 	andi	r2,r2,2047
 2003df4:	3011883a 	mov	r8,r6
 2003df8:	3c62703a 	and	r17,r7,r17
 2003dfc:	ba803fcc 	andi	r10,r23,255
 2003e00:	10006d26 	beq	r2,zero,2003fb8 <__muldf3+0x254>
 2003e04:	00c1ffc4 	movi	r3,2047
 2003e08:	10c06526 	beq	r2,r3,2003fa0 <__muldf3+0x23c>
 2003e0c:	88c00434 	orhi	r3,r17,16
 2003e10:	180690fa 	slli	r3,r3,3
 2003e14:	3022d77a 	srli	r17,r6,29
 2003e18:	301090fa 	slli	r8,r6,3
 2003e1c:	10bf0044 	addi	r2,r2,-1023
 2003e20:	88e2b03a 	or	r17,r17,r3
 2003e24:	000b883a 	mov	r5,zero
 2003e28:	9085883a 	add	r2,r18,r2
 2003e2c:	2cc8b03a 	or	r4,r5,r19
 2003e30:	00c003c4 	movi	r3,15
 2003e34:	bdacf03a 	xor	r22,r23,r22
 2003e38:	12c00044 	addi	r11,r2,1
 2003e3c:	19009936 	bltu	r3,r4,20040a4 <__muldf3+0x340>
 2003e40:	200890ba 	slli	r4,r4,2
 2003e44:	00c08034 	movhi	r3,512
 2003e48:	18cf9604 	addi	r3,r3,15960
 2003e4c:	20c9883a 	add	r4,r4,r3
 2003e50:	20c00017 	ldw	r3,0(r4)
 2003e54:	1800683a 	jmp	r3
 2003e58:	020040a4 	muli	r8,zero,258
 2003e5c:	02003eb8 	rdprs	r8,zero,250
 2003e60:	02003eb8 	rdprs	r8,zero,250
 2003e64:	02003eb4 	movhi	r8,250
 2003e68:	02004080 	call	200408 <__alt_mem_mem_Nios_PI+0x408>
 2003e6c:	02004080 	call	200408 <__alt_mem_mem_Nios_PI+0x408>
 2003e70:	02004068 	cmpgeui	r8,zero,257
 2003e74:	02003eb4 	movhi	r8,250
 2003e78:	02004080 	call	200408 <__alt_mem_mem_Nios_PI+0x408>
 2003e7c:	02004068 	cmpgeui	r8,zero,257
 2003e80:	02004080 	call	200408 <__alt_mem_mem_Nios_PI+0x408>
 2003e84:	02003eb4 	movhi	r8,250
 2003e88:	02004090 	cmplti	r8,zero,258
 2003e8c:	02004090 	cmplti	r8,zero,258
 2003e90:	02004090 	cmplti	r8,zero,258
 2003e94:	020042ac 	andhi	r8,zero,266
 2003e98:	2404b03a 	or	r2,r4,r16
 2003e9c:	10006f1e 	bne	r2,zero,200405c <__muldf3+0x2f8>
 2003ea0:	04c00204 	movi	r19,8
 2003ea4:	0021883a 	mov	r16,zero
 2003ea8:	0029883a 	mov	r20,zero
 2003eac:	07000084 	movi	fp,2
 2003eb0:	003fcb06 	br	2003de0 <__muldf3+0x7c>
 2003eb4:	502d883a 	mov	r22,r10
 2003eb8:	00800084 	movi	r2,2
 2003ebc:	28805726 	beq	r5,r2,200401c <__muldf3+0x2b8>
 2003ec0:	008000c4 	movi	r2,3
 2003ec4:	28816626 	beq	r5,r2,2004460 <__muldf3+0x6fc>
 2003ec8:	00800044 	movi	r2,1
 2003ecc:	2881411e 	bne	r5,r2,20043d4 <__muldf3+0x670>
 2003ed0:	b02b883a 	mov	r21,r22
 2003ed4:	0005883a 	mov	r2,zero
 2003ed8:	000b883a 	mov	r5,zero
 2003edc:	0029883a 	mov	r20,zero
 2003ee0:	1004953a 	slli	r2,r2,20
 2003ee4:	a8c03fcc 	andi	r3,r21,255
 2003ee8:	04400434 	movhi	r17,16
 2003eec:	8c7fffc4 	addi	r17,r17,-1
 2003ef0:	180697fa 	slli	r3,r3,31
 2003ef4:	2c4a703a 	and	r5,r5,r17
 2003ef8:	288ab03a 	or	r5,r5,r2
 2003efc:	28c6b03a 	or	r3,r5,r3
 2003f00:	a005883a 	mov	r2,r20
 2003f04:	dfc00c17 	ldw	ra,48(sp)
 2003f08:	df000b17 	ldw	fp,44(sp)
 2003f0c:	ddc00a17 	ldw	r23,40(sp)
 2003f10:	dd800917 	ldw	r22,36(sp)
 2003f14:	dd400817 	ldw	r21,32(sp)
 2003f18:	dd000717 	ldw	r20,28(sp)
 2003f1c:	dcc00617 	ldw	r19,24(sp)
 2003f20:	dc800517 	ldw	r18,20(sp)
 2003f24:	dc400417 	ldw	r17,16(sp)
 2003f28:	dc000317 	ldw	r16,12(sp)
 2003f2c:	dec00d04 	addi	sp,sp,52
 2003f30:	f800283a 	ret
 2003f34:	2404b03a 	or	r2,r4,r16
 2003f38:	2027883a 	mov	r19,r4
 2003f3c:	10004226 	beq	r2,zero,2004048 <__muldf3+0x2e4>
 2003f40:	8000fc26 	beq	r16,zero,2004334 <__muldf3+0x5d0>
 2003f44:	8009883a 	mov	r4,r16
 2003f48:	d9800215 	stw	r6,8(sp)
 2003f4c:	d9c00015 	stw	r7,0(sp)
 2003f50:	da400115 	stw	r9,4(sp)
 2003f54:	20047340 	call	2004734 <__clzsi2>
 2003f58:	d9800217 	ldw	r6,8(sp)
 2003f5c:	d9c00017 	ldw	r7,0(sp)
 2003f60:	da400117 	ldw	r9,4(sp)
 2003f64:	113ffd44 	addi	r4,r2,-11
 2003f68:	00c00704 	movi	r3,28
 2003f6c:	1900ed16 	blt	r3,r4,2004324 <__muldf3+0x5c0>
 2003f70:	00c00744 	movi	r3,29
 2003f74:	147ffe04 	addi	r17,r2,-8
 2003f78:	1907c83a 	sub	r3,r3,r4
 2003f7c:	8460983a 	sll	r16,r16,r17
 2003f80:	98c6d83a 	srl	r3,r19,r3
 2003f84:	9c68983a 	sll	r20,r19,r17
 2003f88:	1c20b03a 	or	r16,r3,r16
 2003f8c:	1080fcc4 	addi	r2,r2,1011
 2003f90:	00a5c83a 	sub	r18,zero,r2
 2003f94:	0027883a 	mov	r19,zero
 2003f98:	0039883a 	mov	fp,zero
 2003f9c:	003f9006 	br	2003de0 <__muldf3+0x7c>
 2003fa0:	3446b03a 	or	r3,r6,r17
 2003fa4:	1800261e 	bne	r3,zero,2004040 <__muldf3+0x2dc>
 2003fa8:	0023883a 	mov	r17,zero
 2003fac:	0011883a 	mov	r8,zero
 2003fb0:	01400084 	movi	r5,2
 2003fb4:	003f9c06 	br	2003e28 <__muldf3+0xc4>
 2003fb8:	3446b03a 	or	r3,r6,r17
 2003fbc:	18001c26 	beq	r3,zero,2004030 <__muldf3+0x2cc>
 2003fc0:	8800ce26 	beq	r17,zero,20042fc <__muldf3+0x598>
 2003fc4:	8809883a 	mov	r4,r17
 2003fc8:	d9800215 	stw	r6,8(sp)
 2003fcc:	da400115 	stw	r9,4(sp)
 2003fd0:	da800015 	stw	r10,0(sp)
 2003fd4:	20047340 	call	2004734 <__clzsi2>
 2003fd8:	d9800217 	ldw	r6,8(sp)
 2003fdc:	da400117 	ldw	r9,4(sp)
 2003fe0:	da800017 	ldw	r10,0(sp)
 2003fe4:	113ffd44 	addi	r4,r2,-11
 2003fe8:	00c00704 	movi	r3,28
 2003fec:	1900bf16 	blt	r3,r4,20042ec <__muldf3+0x588>
 2003ff0:	00c00744 	movi	r3,29
 2003ff4:	123ffe04 	addi	r8,r2,-8
 2003ff8:	1907c83a 	sub	r3,r3,r4
 2003ffc:	8a22983a 	sll	r17,r17,r8
 2004000:	30c6d83a 	srl	r3,r6,r3
 2004004:	3210983a 	sll	r8,r6,r8
 2004008:	1c62b03a 	or	r17,r3,r17
 200400c:	1080fcc4 	addi	r2,r2,1011
 2004010:	0085c83a 	sub	r2,zero,r2
 2004014:	000b883a 	mov	r5,zero
 2004018:	003f8306 	br	2003e28 <__muldf3+0xc4>
 200401c:	b02b883a 	mov	r21,r22
 2004020:	0081ffc4 	movi	r2,2047
 2004024:	000b883a 	mov	r5,zero
 2004028:	0029883a 	mov	r20,zero
 200402c:	003fac06 	br	2003ee0 <__muldf3+0x17c>
 2004030:	0023883a 	mov	r17,zero
 2004034:	0011883a 	mov	r8,zero
 2004038:	01400044 	movi	r5,1
 200403c:	003f7a06 	br	2003e28 <__muldf3+0xc4>
 2004040:	014000c4 	movi	r5,3
 2004044:	003f7806 	br	2003e28 <__muldf3+0xc4>
 2004048:	04c00104 	movi	r19,4
 200404c:	0021883a 	mov	r16,zero
 2004050:	0029883a 	mov	r20,zero
 2004054:	07000044 	movi	fp,1
 2004058:	003f6106 	br	2003de0 <__muldf3+0x7c>
 200405c:	04c00304 	movi	r19,12
 2004060:	070000c4 	movi	fp,3
 2004064:	003f5e06 	br	2003de0 <__muldf3+0x7c>
 2004068:	01400434 	movhi	r5,16
 200406c:	002b883a 	mov	r21,zero
 2004070:	297fffc4 	addi	r5,r5,-1
 2004074:	053fffc4 	movi	r20,-1
 2004078:	0081ffc4 	movi	r2,2047
 200407c:	003f9806 	br	2003ee0 <__muldf3+0x17c>
 2004080:	8023883a 	mov	r17,r16
 2004084:	a011883a 	mov	r8,r20
 2004088:	e00b883a 	mov	r5,fp
 200408c:	003f8a06 	br	2003eb8 <__muldf3+0x154>
 2004090:	8023883a 	mov	r17,r16
 2004094:	a011883a 	mov	r8,r20
 2004098:	482d883a 	mov	r22,r9
 200409c:	e00b883a 	mov	r5,fp
 20040a0:	003f8506 	br	2003eb8 <__muldf3+0x154>
 20040a4:	a00ad43a 	srli	r5,r20,16
 20040a8:	401ad43a 	srli	r13,r8,16
 20040ac:	a53fffcc 	andi	r20,r20,65535
 20040b0:	423fffcc 	andi	r8,r8,65535
 20040b4:	4519383a 	mul	r12,r8,r20
 20040b8:	4147383a 	mul	r3,r8,r5
 20040bc:	6d09383a 	mul	r4,r13,r20
 20040c0:	600cd43a 	srli	r6,r12,16
 20040c4:	2b5d383a 	mul	r14,r5,r13
 20040c8:	20c9883a 	add	r4,r4,r3
 20040cc:	310d883a 	add	r6,r6,r4
 20040d0:	30c0022e 	bgeu	r6,r3,20040dc <__muldf3+0x378>
 20040d4:	00c00074 	movhi	r3,1
 20040d8:	70dd883a 	add	r14,r14,r3
 20040dc:	8826d43a 	srli	r19,r17,16
 20040e0:	8bffffcc 	andi	r15,r17,65535
 20040e4:	7d23383a 	mul	r17,r15,r20
 20040e8:	7949383a 	mul	r4,r15,r5
 20040ec:	9d29383a 	mul	r20,r19,r20
 20040f0:	8814d43a 	srli	r10,r17,16
 20040f4:	3012943a 	slli	r9,r6,16
 20040f8:	a129883a 	add	r20,r20,r4
 20040fc:	633fffcc 	andi	r12,r12,65535
 2004100:	5515883a 	add	r10,r10,r20
 2004104:	3006d43a 	srli	r3,r6,16
 2004108:	4b13883a 	add	r9,r9,r12
 200410c:	2ccb383a 	mul	r5,r5,r19
 2004110:	5100022e 	bgeu	r10,r4,200411c <__muldf3+0x3b8>
 2004114:	01000074 	movhi	r4,1
 2004118:	290b883a 	add	r5,r5,r4
 200411c:	802ad43a 	srli	r21,r16,16
 2004120:	843fffcc 	andi	r16,r16,65535
 2004124:	440d383a 	mul	r6,r8,r16
 2004128:	4565383a 	mul	r18,r8,r21
 200412c:	8349383a 	mul	r4,r16,r13
 2004130:	500e943a 	slli	r7,r10,16
 2004134:	3010d43a 	srli	r8,r6,16
 2004138:	5028d43a 	srli	r20,r10,16
 200413c:	2489883a 	add	r4,r4,r18
 2004140:	8abfffcc 	andi	r10,r17,65535
 2004144:	3a95883a 	add	r10,r7,r10
 2004148:	4119883a 	add	r12,r8,r4
 200414c:	a169883a 	add	r20,r20,r5
 2004150:	1a87883a 	add	r3,r3,r10
 2004154:	6d5b383a 	mul	r13,r13,r21
 2004158:	6480022e 	bgeu	r12,r18,2004164 <__muldf3+0x400>
 200415c:	01000074 	movhi	r4,1
 2004160:	691b883a 	add	r13,r13,r4
 2004164:	7c25383a 	mul	r18,r15,r16
 2004168:	7d4b383a 	mul	r5,r15,r21
 200416c:	84cf383a 	mul	r7,r16,r19
 2004170:	901ed43a 	srli	r15,r18,16
 2004174:	6008d43a 	srli	r4,r12,16
 2004178:	6010943a 	slli	r8,r12,16
 200417c:	394f883a 	add	r7,r7,r5
 2004180:	333fffcc 	andi	r12,r6,65535
 2004184:	79df883a 	add	r15,r15,r7
 2004188:	235b883a 	add	r13,r4,r13
 200418c:	9d63383a 	mul	r17,r19,r21
 2004190:	4309883a 	add	r4,r8,r12
 2004194:	7940022e 	bgeu	r15,r5,20041a0 <__muldf3+0x43c>
 2004198:	01400074 	movhi	r5,1
 200419c:	8963883a 	add	r17,r17,r5
 20041a0:	780a943a 	slli	r5,r15,16
 20041a4:	91bfffcc 	andi	r6,r18,65535
 20041a8:	70c7883a 	add	r3,r14,r3
 20041ac:	298d883a 	add	r6,r5,r6
 20041b0:	1a8f803a 	cmpltu	r7,r3,r10
 20041b4:	350b883a 	add	r5,r6,r20
 20041b8:	20c7883a 	add	r3,r4,r3
 20041bc:	3955883a 	add	r10,r7,r5
 20041c0:	1909803a 	cmpltu	r4,r3,r4
 20041c4:	6a91883a 	add	r8,r13,r10
 20041c8:	780cd43a 	srli	r6,r15,16
 20041cc:	2219883a 	add	r12,r4,r8
 20041d0:	2d0b803a 	cmpltu	r5,r5,r20
 20041d4:	51cf803a 	cmpltu	r7,r10,r7
 20041d8:	29ceb03a 	or	r7,r5,r7
 20041dc:	4351803a 	cmpltu	r8,r8,r13
 20041e0:	610b803a 	cmpltu	r5,r12,r4
 20041e4:	4148b03a 	or	r4,r8,r5
 20041e8:	398f883a 	add	r7,r7,r6
 20041ec:	3909883a 	add	r4,r7,r4
 20041f0:	1810927a 	slli	r8,r3,9
 20041f4:	2449883a 	add	r4,r4,r17
 20041f8:	2008927a 	slli	r4,r4,9
 20041fc:	6022d5fa 	srli	r17,r12,23
 2004200:	1806d5fa 	srli	r3,r3,23
 2004204:	4252b03a 	or	r9,r8,r9
 2004208:	600a927a 	slli	r5,r12,9
 200420c:	4810c03a 	cmpne	r8,r9,zero
 2004210:	2462b03a 	or	r17,r4,r17
 2004214:	40c6b03a 	or	r3,r8,r3
 2004218:	8900402c 	andhi	r4,r17,256
 200421c:	1950b03a 	or	r8,r3,r5
 2004220:	20000726 	beq	r4,zero,2004240 <__muldf3+0x4dc>
 2004224:	4006d07a 	srli	r3,r8,1
 2004228:	880497fa 	slli	r2,r17,31
 200422c:	4200004c 	andi	r8,r8,1
 2004230:	8822d07a 	srli	r17,r17,1
 2004234:	1a10b03a 	or	r8,r3,r8
 2004238:	1210b03a 	or	r8,r2,r8
 200423c:	5805883a 	mov	r2,r11
 2004240:	1140ffc4 	addi	r5,r2,1023
 2004244:	0140440e 	bge	zero,r5,2004358 <__muldf3+0x5f4>
 2004248:	40c001cc 	andi	r3,r8,7
 200424c:	18000726 	beq	r3,zero,200426c <__muldf3+0x508>
 2004250:	40c003cc 	andi	r3,r8,15
 2004254:	01000104 	movi	r4,4
 2004258:	19000426 	beq	r3,r4,200426c <__muldf3+0x508>
 200425c:	4107883a 	add	r3,r8,r4
 2004260:	1a11803a 	cmpltu	r8,r3,r8
 2004264:	8a23883a 	add	r17,r17,r8
 2004268:	1811883a 	mov	r8,r3
 200426c:	88c0402c 	andhi	r3,r17,256
 2004270:	18000426 	beq	r3,zero,2004284 <__muldf3+0x520>
 2004274:	11410004 	addi	r5,r2,1024
 2004278:	00bfc034 	movhi	r2,65280
 200427c:	10bfffc4 	addi	r2,r2,-1
 2004280:	88a2703a 	and	r17,r17,r2
 2004284:	0081ff84 	movi	r2,2046
 2004288:	117f6416 	blt	r2,r5,200401c <__muldf3+0x2b8>
 200428c:	8828977a 	slli	r20,r17,29
 2004290:	4010d0fa 	srli	r8,r8,3
 2004294:	8822927a 	slli	r17,r17,9
 2004298:	2881ffcc 	andi	r2,r5,2047
 200429c:	a228b03a 	or	r20,r20,r8
 20042a0:	880ad33a 	srli	r5,r17,12
 20042a4:	b02b883a 	mov	r21,r22
 20042a8:	003f0d06 	br	2003ee0 <__muldf3+0x17c>
 20042ac:	8080022c 	andhi	r2,r16,8
 20042b0:	10000926 	beq	r2,zero,20042d8 <__muldf3+0x574>
 20042b4:	8880022c 	andhi	r2,r17,8
 20042b8:	1000071e 	bne	r2,zero,20042d8 <__muldf3+0x574>
 20042bc:	00800434 	movhi	r2,16
 20042c0:	89400234 	orhi	r5,r17,8
 20042c4:	10bfffc4 	addi	r2,r2,-1
 20042c8:	b82b883a 	mov	r21,r23
 20042cc:	288a703a 	and	r5,r5,r2
 20042d0:	4029883a 	mov	r20,r8
 20042d4:	003f6806 	br	2004078 <__muldf3+0x314>
 20042d8:	00800434 	movhi	r2,16
 20042dc:	81400234 	orhi	r5,r16,8
 20042e0:	10bfffc4 	addi	r2,r2,-1
 20042e4:	288a703a 	and	r5,r5,r2
 20042e8:	003f6306 	br	2004078 <__muldf3+0x314>
 20042ec:	147ff604 	addi	r17,r2,-40
 20042f0:	3462983a 	sll	r17,r6,r17
 20042f4:	0011883a 	mov	r8,zero
 20042f8:	003f4406 	br	200400c <__muldf3+0x2a8>
 20042fc:	3009883a 	mov	r4,r6
 2004300:	d9800215 	stw	r6,8(sp)
 2004304:	da400115 	stw	r9,4(sp)
 2004308:	da800015 	stw	r10,0(sp)
 200430c:	20047340 	call	2004734 <__clzsi2>
 2004310:	10800804 	addi	r2,r2,32
 2004314:	da800017 	ldw	r10,0(sp)
 2004318:	da400117 	ldw	r9,4(sp)
 200431c:	d9800217 	ldw	r6,8(sp)
 2004320:	003f3006 	br	2003fe4 <__muldf3+0x280>
 2004324:	143ff604 	addi	r16,r2,-40
 2004328:	9c20983a 	sll	r16,r19,r16
 200432c:	0029883a 	mov	r20,zero
 2004330:	003f1606 	br	2003f8c <__muldf3+0x228>
 2004334:	d9800215 	stw	r6,8(sp)
 2004338:	d9c00015 	stw	r7,0(sp)
 200433c:	da400115 	stw	r9,4(sp)
 2004340:	20047340 	call	2004734 <__clzsi2>
 2004344:	10800804 	addi	r2,r2,32
 2004348:	da400117 	ldw	r9,4(sp)
 200434c:	d9c00017 	ldw	r7,0(sp)
 2004350:	d9800217 	ldw	r6,8(sp)
 2004354:	003f0306 	br	2003f64 <__muldf3+0x200>
 2004358:	00c00044 	movi	r3,1
 200435c:	1947c83a 	sub	r3,r3,r5
 2004360:	00800e04 	movi	r2,56
 2004364:	10feda16 	blt	r2,r3,2003ed0 <__muldf3+0x16c>
 2004368:	008007c4 	movi	r2,31
 200436c:	10c01b16 	blt	r2,r3,20043dc <__muldf3+0x678>
 2004370:	00800804 	movi	r2,32
 2004374:	10c5c83a 	sub	r2,r2,r3
 2004378:	888a983a 	sll	r5,r17,r2
 200437c:	40c8d83a 	srl	r4,r8,r3
 2004380:	4084983a 	sll	r2,r8,r2
 2004384:	88e2d83a 	srl	r17,r17,r3
 2004388:	2906b03a 	or	r3,r5,r4
 200438c:	1004c03a 	cmpne	r2,r2,zero
 2004390:	1886b03a 	or	r3,r3,r2
 2004394:	188001cc 	andi	r2,r3,7
 2004398:	10000726 	beq	r2,zero,20043b8 <__muldf3+0x654>
 200439c:	188003cc 	andi	r2,r3,15
 20043a0:	01000104 	movi	r4,4
 20043a4:	11000426 	beq	r2,r4,20043b8 <__muldf3+0x654>
 20043a8:	1805883a 	mov	r2,r3
 20043ac:	10c00104 	addi	r3,r2,4
 20043b0:	1885803a 	cmpltu	r2,r3,r2
 20043b4:	88a3883a 	add	r17,r17,r2
 20043b8:	8880202c 	andhi	r2,r17,128
 20043bc:	10001c26 	beq	r2,zero,2004430 <__muldf3+0x6cc>
 20043c0:	b02b883a 	mov	r21,r22
 20043c4:	00800044 	movi	r2,1
 20043c8:	000b883a 	mov	r5,zero
 20043cc:	0029883a 	mov	r20,zero
 20043d0:	003ec306 	br	2003ee0 <__muldf3+0x17c>
 20043d4:	5805883a 	mov	r2,r11
 20043d8:	003f9906 	br	2004240 <__muldf3+0x4dc>
 20043dc:	00bff844 	movi	r2,-31
 20043e0:	1145c83a 	sub	r2,r2,r5
 20043e4:	8888d83a 	srl	r4,r17,r2
 20043e8:	00800804 	movi	r2,32
 20043ec:	18801a26 	beq	r3,r2,2004458 <__muldf3+0x6f4>
 20043f0:	00801004 	movi	r2,64
 20043f4:	10c5c83a 	sub	r2,r2,r3
 20043f8:	8884983a 	sll	r2,r17,r2
 20043fc:	1204b03a 	or	r2,r2,r8
 2004400:	1004c03a 	cmpne	r2,r2,zero
 2004404:	2084b03a 	or	r2,r4,r2
 2004408:	144001cc 	andi	r17,r2,7
 200440c:	88000d1e 	bne	r17,zero,2004444 <__muldf3+0x6e0>
 2004410:	000b883a 	mov	r5,zero
 2004414:	1028d0fa 	srli	r20,r2,3
 2004418:	b02b883a 	mov	r21,r22
 200441c:	0005883a 	mov	r2,zero
 2004420:	a468b03a 	or	r20,r20,r17
 2004424:	003eae06 	br	2003ee0 <__muldf3+0x17c>
 2004428:	1007883a 	mov	r3,r2
 200442c:	0023883a 	mov	r17,zero
 2004430:	880a927a 	slli	r5,r17,9
 2004434:	1805883a 	mov	r2,r3
 2004438:	8822977a 	slli	r17,r17,29
 200443c:	280ad33a 	srli	r5,r5,12
 2004440:	003ff406 	br	2004414 <__muldf3+0x6b0>
 2004444:	10c003cc 	andi	r3,r2,15
 2004448:	01000104 	movi	r4,4
 200444c:	193ff626 	beq	r3,r4,2004428 <__muldf3+0x6c4>
 2004450:	0023883a 	mov	r17,zero
 2004454:	003fd506 	br	20043ac <__muldf3+0x648>
 2004458:	0005883a 	mov	r2,zero
 200445c:	003fe706 	br	20043fc <__muldf3+0x698>
 2004460:	00800434 	movhi	r2,16
 2004464:	89400234 	orhi	r5,r17,8
 2004468:	10bfffc4 	addi	r2,r2,-1
 200446c:	b02b883a 	mov	r21,r22
 2004470:	288a703a 	and	r5,r5,r2
 2004474:	4029883a 	mov	r20,r8
 2004478:	003eff06 	br	2004078 <__muldf3+0x314>

0200447c <__extendsfdf2>:
 200447c:	200ad5fa 	srli	r5,r4,23
 2004480:	defffd04 	addi	sp,sp,-12
 2004484:	dc400115 	stw	r17,4(sp)
 2004488:	29403fcc 	andi	r5,r5,255
 200448c:	29800044 	addi	r6,r5,1
 2004490:	04402034 	movhi	r17,128
 2004494:	dc000015 	stw	r16,0(sp)
 2004498:	8c7fffc4 	addi	r17,r17,-1
 200449c:	dfc00215 	stw	ra,8(sp)
 20044a0:	31803fcc 	andi	r6,r6,255
 20044a4:	00800044 	movi	r2,1
 20044a8:	8922703a 	and	r17,r17,r4
 20044ac:	2020d7fa 	srli	r16,r4,31
 20044b0:	1180110e 	bge	r2,r6,20044f8 <__extendsfdf2+0x7c>
 20044b4:	880cd0fa 	srli	r6,r17,3
 20044b8:	8822977a 	slli	r17,r17,29
 20044bc:	2940e004 	addi	r5,r5,896
 20044c0:	2941ffcc 	andi	r5,r5,2047
 20044c4:	2804953a 	slli	r2,r5,20
 20044c8:	01400434 	movhi	r5,16
 20044cc:	800697fa 	slli	r3,r16,31
 20044d0:	297fffc4 	addi	r5,r5,-1
 20044d4:	314a703a 	and	r5,r6,r5
 20044d8:	288ab03a 	or	r5,r5,r2
 20044dc:	28c6b03a 	or	r3,r5,r3
 20044e0:	8805883a 	mov	r2,r17
 20044e4:	dfc00217 	ldw	ra,8(sp)
 20044e8:	dc400117 	ldw	r17,4(sp)
 20044ec:	dc000017 	ldw	r16,0(sp)
 20044f0:	dec00304 	addi	sp,sp,12
 20044f4:	f800283a 	ret
 20044f8:	2800111e 	bne	r5,zero,2004540 <__extendsfdf2+0xc4>
 20044fc:	88001c26 	beq	r17,zero,2004570 <__extendsfdf2+0xf4>
 2004500:	8809883a 	mov	r4,r17
 2004504:	20047340 	call	2004734 <__clzsi2>
 2004508:	00c00284 	movi	r3,10
 200450c:	18801b16 	blt	r3,r2,200457c <__extendsfdf2+0x100>
 2004510:	018002c4 	movi	r6,11
 2004514:	308dc83a 	sub	r6,r6,r2
 2004518:	11000544 	addi	r4,r2,21
 200451c:	8986d83a 	srl	r3,r17,r6
 2004520:	8922983a 	sll	r17,r17,r4
 2004524:	0180e244 	movi	r6,905
 2004528:	01400434 	movhi	r5,16
 200452c:	3085c83a 	sub	r2,r6,r2
 2004530:	297fffc4 	addi	r5,r5,-1
 2004534:	194c703a 	and	r6,r3,r5
 2004538:	1141ffcc 	andi	r5,r2,2047
 200453c:	003fe006 	br	20044c0 <__extendsfdf2+0x44>
 2004540:	88000826 	beq	r17,zero,2004564 <__extendsfdf2+0xe8>
 2004544:	880cd0fa 	srli	r6,r17,3
 2004548:	00800434 	movhi	r2,16
 200454c:	10bfffc4 	addi	r2,r2,-1
 2004550:	31800234 	orhi	r6,r6,8
 2004554:	8822977a 	slli	r17,r17,29
 2004558:	308c703a 	and	r6,r6,r2
 200455c:	0141ffc4 	movi	r5,2047
 2004560:	003fd706 	br	20044c0 <__extendsfdf2+0x44>
 2004564:	0141ffc4 	movi	r5,2047
 2004568:	000d883a 	mov	r6,zero
 200456c:	003fd406 	br	20044c0 <__extendsfdf2+0x44>
 2004570:	000b883a 	mov	r5,zero
 2004574:	000d883a 	mov	r6,zero
 2004578:	003fd106 	br	20044c0 <__extendsfdf2+0x44>
 200457c:	11bffd44 	addi	r6,r2,-11
 2004580:	8986983a 	sll	r3,r17,r6
 2004584:	0023883a 	mov	r17,zero
 2004588:	003fe606 	br	2004524 <__extendsfdf2+0xa8>

0200458c <__truncdfsf2>:
 200458c:	2810d53a 	srli	r8,r5,20
 2004590:	01c00434 	movhi	r7,16
 2004594:	39ffffc4 	addi	r7,r7,-1
 2004598:	29ce703a 	and	r7,r5,r7
 200459c:	4201ffcc 	andi	r8,r8,2047
 20045a0:	380e90fa 	slli	r7,r7,3
 20045a4:	200cd77a 	srli	r6,r4,29
 20045a8:	42400044 	addi	r9,r8,1
 20045ac:	4a41ffcc 	andi	r9,r9,2047
 20045b0:	00c00044 	movi	r3,1
 20045b4:	280ad7fa 	srli	r5,r5,31
 20045b8:	31ceb03a 	or	r7,r6,r7
 20045bc:	200490fa 	slli	r2,r4,3
 20045c0:	1a40230e 	bge	r3,r9,2004650 <__truncdfsf2+0xc4>
 20045c4:	40ff2004 	addi	r3,r8,-896
 20045c8:	01803f84 	movi	r6,254
 20045cc:	30c01516 	blt	r6,r3,2004624 <__truncdfsf2+0x98>
 20045d0:	00c0380e 	bge	zero,r3,20046b4 <__truncdfsf2+0x128>
 20045d4:	200c91ba 	slli	r6,r4,6
 20045d8:	380e90fa 	slli	r7,r7,3
 20045dc:	1004d77a 	srli	r2,r2,29
 20045e0:	300cc03a 	cmpne	r6,r6,zero
 20045e4:	31ccb03a 	or	r6,r6,r7
 20045e8:	308cb03a 	or	r6,r6,r2
 20045ec:	308001cc 	andi	r2,r6,7
 20045f0:	10000426 	beq	r2,zero,2004604 <__truncdfsf2+0x78>
 20045f4:	308003cc 	andi	r2,r6,15
 20045f8:	01000104 	movi	r4,4
 20045fc:	11000126 	beq	r2,r4,2004604 <__truncdfsf2+0x78>
 2004600:	31800104 	addi	r6,r6,4
 2004604:	3081002c 	andhi	r2,r6,1024
 2004608:	10001626 	beq	r2,zero,2004664 <__truncdfsf2+0xd8>
 200460c:	18c00044 	addi	r3,r3,1
 2004610:	00803fc4 	movi	r2,255
 2004614:	18800326 	beq	r3,r2,2004624 <__truncdfsf2+0x98>
 2004618:	300c91ba 	slli	r6,r6,6
 200461c:	300cd27a 	srli	r6,r6,9
 2004620:	00000206 	br	200462c <__truncdfsf2+0xa0>
 2004624:	00ffffc4 	movi	r3,-1
 2004628:	000d883a 	mov	r6,zero
 200462c:	18c03fcc 	andi	r3,r3,255
 2004630:	180895fa 	slli	r4,r3,23
 2004634:	00c02034 	movhi	r3,128
 2004638:	280a97fa 	slli	r5,r5,31
 200463c:	18ffffc4 	addi	r3,r3,-1
 2004640:	30c6703a 	and	r3,r6,r3
 2004644:	1906b03a 	or	r3,r3,r4
 2004648:	1944b03a 	or	r2,r3,r5
 200464c:	f800283a 	ret
 2004650:	40000b1e 	bne	r8,zero,2004680 <__truncdfsf2+0xf4>
 2004654:	388cb03a 	or	r6,r7,r2
 2004658:	0007883a 	mov	r3,zero
 200465c:	30000426 	beq	r6,zero,2004670 <__truncdfsf2+0xe4>
 2004660:	01800144 	movi	r6,5
 2004664:	00803fc4 	movi	r2,255
 2004668:	300cd0fa 	srli	r6,r6,3
 200466c:	18800a26 	beq	r3,r2,2004698 <__truncdfsf2+0x10c>
 2004670:	00802034 	movhi	r2,128
 2004674:	10bfffc4 	addi	r2,r2,-1
 2004678:	308c703a 	and	r6,r6,r2
 200467c:	003feb06 	br	200462c <__truncdfsf2+0xa0>
 2004680:	3888b03a 	or	r4,r7,r2
 2004684:	203fe726 	beq	r4,zero,2004624 <__truncdfsf2+0x98>
 2004688:	380c90fa 	slli	r6,r7,3
 200468c:	00c03fc4 	movi	r3,255
 2004690:	31808034 	orhi	r6,r6,512
 2004694:	003fd506 	br	20045ec <__truncdfsf2+0x60>
 2004698:	303fe226 	beq	r6,zero,2004624 <__truncdfsf2+0x98>
 200469c:	00802034 	movhi	r2,128
 20046a0:	31801034 	orhi	r6,r6,64
 20046a4:	10bfffc4 	addi	r2,r2,-1
 20046a8:	00ffffc4 	movi	r3,-1
 20046ac:	308c703a 	and	r6,r6,r2
 20046b0:	003fde06 	br	200462c <__truncdfsf2+0xa0>
 20046b4:	013ffa44 	movi	r4,-23
 20046b8:	19000e16 	blt	r3,r4,20046f4 <__truncdfsf2+0x168>
 20046bc:	01000784 	movi	r4,30
 20046c0:	20c9c83a 	sub	r4,r4,r3
 20046c4:	018007c4 	movi	r6,31
 20046c8:	39c02034 	orhi	r7,r7,128
 20046cc:	31000b16 	blt	r6,r4,20046fc <__truncdfsf2+0x170>
 20046d0:	423f2084 	addi	r8,r8,-894
 20046d4:	120c983a 	sll	r6,r2,r8
 20046d8:	3a0e983a 	sll	r7,r7,r8
 20046dc:	1104d83a 	srl	r2,r2,r4
 20046e0:	300cc03a 	cmpne	r6,r6,zero
 20046e4:	31ceb03a 	or	r7,r6,r7
 20046e8:	388cb03a 	or	r6,r7,r2
 20046ec:	0007883a 	mov	r3,zero
 20046f0:	003fbe06 	br	20045ec <__truncdfsf2+0x60>
 20046f4:	0007883a 	mov	r3,zero
 20046f8:	003fd906 	br	2004660 <__truncdfsf2+0xd4>
 20046fc:	01bfff84 	movi	r6,-2
 2004700:	30cdc83a 	sub	r6,r6,r3
 2004704:	00c00804 	movi	r3,32
 2004708:	398cd83a 	srl	r6,r7,r6
 200470c:	20c00726 	beq	r4,r3,200472c <__truncdfsf2+0x1a0>
 2004710:	423f2884 	addi	r8,r8,-862
 2004714:	3a0e983a 	sll	r7,r7,r8
 2004718:	3884b03a 	or	r2,r7,r2
 200471c:	1004c03a 	cmpne	r2,r2,zero
 2004720:	118cb03a 	or	r6,r2,r6
 2004724:	0007883a 	mov	r3,zero
 2004728:	003fb006 	br	20045ec <__truncdfsf2+0x60>
 200472c:	000f883a 	mov	r7,zero
 2004730:	003ff906 	br	2004718 <__truncdfsf2+0x18c>

02004734 <__clzsi2>:
 2004734:	00bfffd4 	movui	r2,65535
 2004738:	11000536 	bltu	r2,r4,2004750 <__clzsi2+0x1c>
 200473c:	00803fc4 	movi	r2,255
 2004740:	11000f36 	bltu	r2,r4,2004780 <__clzsi2+0x4c>
 2004744:	00800804 	movi	r2,32
 2004748:	0007883a 	mov	r3,zero
 200474c:	00000506 	br	2004764 <__clzsi2+0x30>
 2004750:	00804034 	movhi	r2,256
 2004754:	10bfffc4 	addi	r2,r2,-1
 2004758:	11000c2e 	bgeu	r2,r4,200478c <__clzsi2+0x58>
 200475c:	00800204 	movi	r2,8
 2004760:	00c00604 	movi	r3,24
 2004764:	20c8d83a 	srl	r4,r4,r3
 2004768:	00c080b4 	movhi	r3,514
 200476c:	18f9c144 	addi	r3,r3,-6395
 2004770:	1909883a 	add	r4,r3,r4
 2004774:	20c00003 	ldbu	r3,0(r4)
 2004778:	10c5c83a 	sub	r2,r2,r3
 200477c:	f800283a 	ret
 2004780:	00800604 	movi	r2,24
 2004784:	00c00204 	movi	r3,8
 2004788:	003ff606 	br	2004764 <__clzsi2+0x30>
 200478c:	00800404 	movi	r2,16
 2004790:	1007883a 	mov	r3,r2
 2004794:	003ff306 	br	2004764 <__clzsi2+0x30>

02004798 <__divsi3>:
 2004798:	20001b16 	blt	r4,zero,2004808 <__divsi3+0x70>
 200479c:	000f883a 	mov	r7,zero
 20047a0:	28001616 	blt	r5,zero,20047fc <__divsi3+0x64>
 20047a4:	200d883a 	mov	r6,r4
 20047a8:	29001a2e 	bgeu	r5,r4,2004814 <__divsi3+0x7c>
 20047ac:	00800804 	movi	r2,32
 20047b0:	00c00044 	movi	r3,1
 20047b4:	00000106 	br	20047bc <__divsi3+0x24>
 20047b8:	10000d26 	beq	r2,zero,20047f0 <__divsi3+0x58>
 20047bc:	294b883a 	add	r5,r5,r5
 20047c0:	10bfffc4 	addi	r2,r2,-1
 20047c4:	18c7883a 	add	r3,r3,r3
 20047c8:	293ffb36 	bltu	r5,r4,20047b8 <__divsi3+0x20>
 20047cc:	0005883a 	mov	r2,zero
 20047d0:	18000726 	beq	r3,zero,20047f0 <__divsi3+0x58>
 20047d4:	0005883a 	mov	r2,zero
 20047d8:	31400236 	bltu	r6,r5,20047e4 <__divsi3+0x4c>
 20047dc:	314dc83a 	sub	r6,r6,r5
 20047e0:	10c4b03a 	or	r2,r2,r3
 20047e4:	1806d07a 	srli	r3,r3,1
 20047e8:	280ad07a 	srli	r5,r5,1
 20047ec:	183ffa1e 	bne	r3,zero,20047d8 <__divsi3+0x40>
 20047f0:	38000126 	beq	r7,zero,20047f8 <__divsi3+0x60>
 20047f4:	0085c83a 	sub	r2,zero,r2
 20047f8:	f800283a 	ret
 20047fc:	014bc83a 	sub	r5,zero,r5
 2004800:	39c0005c 	xori	r7,r7,1
 2004804:	003fe706 	br	20047a4 <__divsi3+0xc>
 2004808:	0109c83a 	sub	r4,zero,r4
 200480c:	01c00044 	movi	r7,1
 2004810:	003fe306 	br	20047a0 <__divsi3+0x8>
 2004814:	00c00044 	movi	r3,1
 2004818:	003fee06 	br	20047d4 <__divsi3+0x3c>

0200481c <__modsi3>:
 200481c:	20001716 	blt	r4,zero,200487c <__modsi3+0x60>
 2004820:	000f883a 	mov	r7,zero
 2004824:	2005883a 	mov	r2,r4
 2004828:	28001216 	blt	r5,zero,2004874 <__modsi3+0x58>
 200482c:	2900162e 	bgeu	r5,r4,2004888 <__modsi3+0x6c>
 2004830:	01800804 	movi	r6,32
 2004834:	00c00044 	movi	r3,1
 2004838:	00000106 	br	2004840 <__modsi3+0x24>
 200483c:	30000a26 	beq	r6,zero,2004868 <__modsi3+0x4c>
 2004840:	294b883a 	add	r5,r5,r5
 2004844:	31bfffc4 	addi	r6,r6,-1
 2004848:	18c7883a 	add	r3,r3,r3
 200484c:	293ffb36 	bltu	r5,r4,200483c <__modsi3+0x20>
 2004850:	18000526 	beq	r3,zero,2004868 <__modsi3+0x4c>
 2004854:	1806d07a 	srli	r3,r3,1
 2004858:	11400136 	bltu	r2,r5,2004860 <__modsi3+0x44>
 200485c:	1145c83a 	sub	r2,r2,r5
 2004860:	280ad07a 	srli	r5,r5,1
 2004864:	183ffb1e 	bne	r3,zero,2004854 <__modsi3+0x38>
 2004868:	38000126 	beq	r7,zero,2004870 <__modsi3+0x54>
 200486c:	0085c83a 	sub	r2,zero,r2
 2004870:	f800283a 	ret
 2004874:	014bc83a 	sub	r5,zero,r5
 2004878:	003fec06 	br	200482c <__modsi3+0x10>
 200487c:	0109c83a 	sub	r4,zero,r4
 2004880:	01c00044 	movi	r7,1
 2004884:	003fe706 	br	2004824 <__modsi3+0x8>
 2004888:	00c00044 	movi	r3,1
 200488c:	003ff106 	br	2004854 <__modsi3+0x38>

02004890 <__udivsi3>:
 2004890:	200d883a 	mov	r6,r4
 2004894:	2900152e 	bgeu	r5,r4,20048ec <__udivsi3+0x5c>
 2004898:	28001416 	blt	r5,zero,20048ec <__udivsi3+0x5c>
 200489c:	00800804 	movi	r2,32
 20048a0:	00c00044 	movi	r3,1
 20048a4:	00000206 	br	20048b0 <__udivsi3+0x20>
 20048a8:	10000e26 	beq	r2,zero,20048e4 <__udivsi3+0x54>
 20048ac:	28000516 	blt	r5,zero,20048c4 <__udivsi3+0x34>
 20048b0:	294b883a 	add	r5,r5,r5
 20048b4:	10bfffc4 	addi	r2,r2,-1
 20048b8:	18c7883a 	add	r3,r3,r3
 20048bc:	293ffa36 	bltu	r5,r4,20048a8 <__udivsi3+0x18>
 20048c0:	18000826 	beq	r3,zero,20048e4 <__udivsi3+0x54>
 20048c4:	0005883a 	mov	r2,zero
 20048c8:	31400236 	bltu	r6,r5,20048d4 <__udivsi3+0x44>
 20048cc:	314dc83a 	sub	r6,r6,r5
 20048d0:	10c4b03a 	or	r2,r2,r3
 20048d4:	1806d07a 	srli	r3,r3,1
 20048d8:	280ad07a 	srli	r5,r5,1
 20048dc:	183ffa1e 	bne	r3,zero,20048c8 <__udivsi3+0x38>
 20048e0:	f800283a 	ret
 20048e4:	0005883a 	mov	r2,zero
 20048e8:	f800283a 	ret
 20048ec:	00c00044 	movi	r3,1
 20048f0:	003ff406 	br	20048c4 <__udivsi3+0x34>

020048f4 <__umodsi3>:
 20048f4:	2005883a 	mov	r2,r4
 20048f8:	2900122e 	bgeu	r5,r4,2004944 <__umodsi3+0x50>
 20048fc:	28001116 	blt	r5,zero,2004944 <__umodsi3+0x50>
 2004900:	01800804 	movi	r6,32
 2004904:	00c00044 	movi	r3,1
 2004908:	00000206 	br	2004914 <__umodsi3+0x20>
 200490c:	30000c26 	beq	r6,zero,2004940 <__umodsi3+0x4c>
 2004910:	28000516 	blt	r5,zero,2004928 <__umodsi3+0x34>
 2004914:	294b883a 	add	r5,r5,r5
 2004918:	31bfffc4 	addi	r6,r6,-1
 200491c:	18c7883a 	add	r3,r3,r3
 2004920:	293ffa36 	bltu	r5,r4,200490c <__umodsi3+0x18>
 2004924:	18000626 	beq	r3,zero,2004940 <__umodsi3+0x4c>
 2004928:	1806d07a 	srli	r3,r3,1
 200492c:	11400136 	bltu	r2,r5,2004934 <__umodsi3+0x40>
 2004930:	1145c83a 	sub	r2,r2,r5
 2004934:	280ad07a 	srli	r5,r5,1
 2004938:	183ffb1e 	bne	r3,zero,2004928 <__umodsi3+0x34>
 200493c:	f800283a 	ret
 2004940:	f800283a 	ret
 2004944:	00c00044 	movi	r3,1
 2004948:	003ff706 	br	2004928 <__umodsi3+0x34>

0200494c <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 200494c:	defff804 	addi	sp,sp,-32
 2004950:	df000715 	stw	fp,28(sp)
 2004954:	df000704 	addi	fp,sp,28
 2004958:	e13ffd15 	stw	r4,-12(fp)
 200495c:	e17ffe15 	stw	r5,-8(fp)
 2004960:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 2004964:	e0bffd17 	ldw	r2,-12(fp)
 2004968:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 200496c:	e0bffe17 	ldw	r2,-8(fp)
 2004970:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 2004974:	e0bfff17 	ldw	r2,-4(fp)
 2004978:	10800430 	cmpltui	r2,r2,16
 200497c:	10004c1e 	bne	r2,zero,2004ab0 <memcpy+0x164>
 2004980:	e0fffa17 	ldw	r3,-24(fp)
 2004984:	e0bff917 	ldw	r2,-28(fp)
 2004988:	1884b03a 	or	r2,r3,r2
 200498c:	108000cc 	andi	r2,r2,3
 2004990:	1000471e 	bne	r2,zero,2004ab0 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2004994:	e0bff917 	ldw	r2,-28(fp)
 2004998:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 200499c:	e0bffa17 	ldw	r2,-24(fp)
 20049a0:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 20049a4:	00002306 	br	2004a34 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 20049a8:	e0bffb17 	ldw	r2,-20(fp)
 20049ac:	10c00104 	addi	r3,r2,4
 20049b0:	e0fffb15 	stw	r3,-20(fp)
 20049b4:	e0fffc17 	ldw	r3,-16(fp)
 20049b8:	19000104 	addi	r4,r3,4
 20049bc:	e13ffc15 	stw	r4,-16(fp)
 20049c0:	18c00017 	ldw	r3,0(r3)
 20049c4:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 20049c8:	e0bffb17 	ldw	r2,-20(fp)
 20049cc:	10c00104 	addi	r3,r2,4
 20049d0:	e0fffb15 	stw	r3,-20(fp)
 20049d4:	e0fffc17 	ldw	r3,-16(fp)
 20049d8:	19000104 	addi	r4,r3,4
 20049dc:	e13ffc15 	stw	r4,-16(fp)
 20049e0:	18c00017 	ldw	r3,0(r3)
 20049e4:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 20049e8:	e0bffb17 	ldw	r2,-20(fp)
 20049ec:	10c00104 	addi	r3,r2,4
 20049f0:	e0fffb15 	stw	r3,-20(fp)
 20049f4:	e0fffc17 	ldw	r3,-16(fp)
 20049f8:	19000104 	addi	r4,r3,4
 20049fc:	e13ffc15 	stw	r4,-16(fp)
 2004a00:	18c00017 	ldw	r3,0(r3)
 2004a04:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004a08:	e0bffb17 	ldw	r2,-20(fp)
 2004a0c:	10c00104 	addi	r3,r2,4
 2004a10:	e0fffb15 	stw	r3,-20(fp)
 2004a14:	e0fffc17 	ldw	r3,-16(fp)
 2004a18:	19000104 	addi	r4,r3,4
 2004a1c:	e13ffc15 	stw	r4,-16(fp)
 2004a20:	18c00017 	ldw	r3,0(r3)
 2004a24:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2004a28:	e0bfff17 	ldw	r2,-4(fp)
 2004a2c:	10bffc04 	addi	r2,r2,-16
 2004a30:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2004a34:	e0bfff17 	ldw	r2,-4(fp)
 2004a38:	10800428 	cmpgeui	r2,r2,16
 2004a3c:	103fda1e 	bne	r2,zero,20049a8 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004a40:	00000b06 	br	2004a70 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2004a44:	e0bffb17 	ldw	r2,-20(fp)
 2004a48:	10c00104 	addi	r3,r2,4
 2004a4c:	e0fffb15 	stw	r3,-20(fp)
 2004a50:	e0fffc17 	ldw	r3,-16(fp)
 2004a54:	19000104 	addi	r4,r3,4
 2004a58:	e13ffc15 	stw	r4,-16(fp)
 2004a5c:	18c00017 	ldw	r3,0(r3)
 2004a60:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 2004a64:	e0bfff17 	ldw	r2,-4(fp)
 2004a68:	10bfff04 	addi	r2,r2,-4
 2004a6c:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004a70:	e0bfff17 	ldw	r2,-4(fp)
 2004a74:	10800128 	cmpgeui	r2,r2,4
 2004a78:	103ff21e 	bne	r2,zero,2004a44 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 2004a7c:	e0bffb17 	ldw	r2,-20(fp)
 2004a80:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2004a84:	e0bffc17 	ldw	r2,-16(fp)
 2004a88:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2004a8c:	00000806 	br	2004ab0 <memcpy+0x164>
    *dst++ = *src++;
 2004a90:	e0bff917 	ldw	r2,-28(fp)
 2004a94:	10c00044 	addi	r3,r2,1
 2004a98:	e0fff915 	stw	r3,-28(fp)
 2004a9c:	e0fffa17 	ldw	r3,-24(fp)
 2004aa0:	19000044 	addi	r4,r3,1
 2004aa4:	e13ffa15 	stw	r4,-24(fp)
 2004aa8:	18c00003 	ldbu	r3,0(r3)
 2004aac:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2004ab0:	e0bfff17 	ldw	r2,-4(fp)
 2004ab4:	10ffffc4 	addi	r3,r2,-1
 2004ab8:	e0ffff15 	stw	r3,-4(fp)
 2004abc:	103ff41e 	bne	r2,zero,2004a90 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2004ac0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2004ac4:	e037883a 	mov	sp,fp
 2004ac8:	df000017 	ldw	fp,0(sp)
 2004acc:	dec00104 	addi	sp,sp,4
 2004ad0:	f800283a 	ret

02004ad4 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2004ad4:	defff704 	addi	sp,sp,-36
 2004ad8:	df000815 	stw	fp,32(sp)
 2004adc:	df000804 	addi	fp,sp,32
 2004ae0:	e13ffd15 	stw	r4,-12(fp)
 2004ae4:	e17ffe15 	stw	r5,-8(fp)
 2004ae8:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2004aec:	e0bffd17 	ldw	r2,-12(fp)
 2004af0:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2004af4:	e0bffe17 	ldw	r2,-8(fp)
 2004af8:	10803fcc 	andi	r2,r2,255
 2004afc:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004b00:	00000c06 	br	2004b34 <memset+0x60>
    {
      if (n--)
 2004b04:	e0bfff17 	ldw	r2,-4(fp)
 2004b08:	10ffffc4 	addi	r3,r2,-1
 2004b0c:	e0ffff15 	stw	r3,-4(fp)
 2004b10:	10000626 	beq	r2,zero,2004b2c <memset+0x58>
        *s++ = (char) c;
 2004b14:	e0bff817 	ldw	r2,-32(fp)
 2004b18:	10c00044 	addi	r3,r2,1
 2004b1c:	e0fff815 	stw	r3,-32(fp)
 2004b20:	e0fffe17 	ldw	r3,-8(fp)
 2004b24:	10c00005 	stb	r3,0(r2)
 2004b28:	00000206 	br	2004b34 <memset+0x60>
      else
        return m;
 2004b2c:	e0bffd17 	ldw	r2,-12(fp)
 2004b30:	00005506 	br	2004c88 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004b34:	e0bff817 	ldw	r2,-32(fp)
 2004b38:	108000cc 	andi	r2,r2,3
 2004b3c:	103ff11e 	bne	r2,zero,2004b04 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2004b40:	e0bfff17 	ldw	r2,-4(fp)
 2004b44:	10800130 	cmpltui	r2,r2,4
 2004b48:	10004a1e 	bne	r2,zero,2004c74 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2004b4c:	e0bff817 	ldw	r2,-32(fp)
 2004b50:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2004b54:	e0bffc17 	ldw	r2,-16(fp)
 2004b58:	1006923a 	slli	r3,r2,8
 2004b5c:	e0bffc17 	ldw	r2,-16(fp)
 2004b60:	1884b03a 	or	r2,r3,r2
 2004b64:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 2004b68:	e0bffa17 	ldw	r2,-24(fp)
 2004b6c:	1004943a 	slli	r2,r2,16
 2004b70:	e0fffa17 	ldw	r3,-24(fp)
 2004b74:	1884b03a 	or	r2,r3,r2
 2004b78:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004b7c:	00800804 	movi	r2,32
 2004b80:	e0bff915 	stw	r2,-28(fp)
 2004b84:	00000906 	br	2004bac <memset+0xd8>
        buffer = (buffer << i) | buffer;
 2004b88:	e0fffa17 	ldw	r3,-24(fp)
 2004b8c:	e0bff917 	ldw	r2,-28(fp)
 2004b90:	1884983a 	sll	r2,r3,r2
 2004b94:	e0fffa17 	ldw	r3,-24(fp)
 2004b98:	1884b03a 	or	r2,r3,r2
 2004b9c:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004ba0:	e0bff917 	ldw	r2,-28(fp)
 2004ba4:	1085883a 	add	r2,r2,r2
 2004ba8:	e0bff915 	stw	r2,-28(fp)
 2004bac:	e0bff917 	ldw	r2,-28(fp)
 2004bb0:	10800830 	cmpltui	r2,r2,32
 2004bb4:	103ff41e 	bne	r2,zero,2004b88 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004bb8:	00001706 	br	2004c18 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2004bbc:	e0bffb17 	ldw	r2,-20(fp)
 2004bc0:	10c00104 	addi	r3,r2,4
 2004bc4:	e0fffb15 	stw	r3,-20(fp)
 2004bc8:	e0fffa17 	ldw	r3,-24(fp)
 2004bcc:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004bd0:	e0bffb17 	ldw	r2,-20(fp)
 2004bd4:	10c00104 	addi	r3,r2,4
 2004bd8:	e0fffb15 	stw	r3,-20(fp)
 2004bdc:	e0fffa17 	ldw	r3,-24(fp)
 2004be0:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004be4:	e0bffb17 	ldw	r2,-20(fp)
 2004be8:	10c00104 	addi	r3,r2,4
 2004bec:	e0fffb15 	stw	r3,-20(fp)
 2004bf0:	e0fffa17 	ldw	r3,-24(fp)
 2004bf4:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004bf8:	e0bffb17 	ldw	r2,-20(fp)
 2004bfc:	10c00104 	addi	r3,r2,4
 2004c00:	e0fffb15 	stw	r3,-20(fp)
 2004c04:	e0fffa17 	ldw	r3,-24(fp)
 2004c08:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2004c0c:	e0bfff17 	ldw	r2,-4(fp)
 2004c10:	10bffc04 	addi	r2,r2,-16
 2004c14:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004c18:	e0bfff17 	ldw	r2,-4(fp)
 2004c1c:	10800428 	cmpgeui	r2,r2,16
 2004c20:	103fe61e 	bne	r2,zero,2004bbc <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004c24:	00000806 	br	2004c48 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2004c28:	e0bffb17 	ldw	r2,-20(fp)
 2004c2c:	10c00104 	addi	r3,r2,4
 2004c30:	e0fffb15 	stw	r3,-20(fp)
 2004c34:	e0fffa17 	ldw	r3,-24(fp)
 2004c38:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2004c3c:	e0bfff17 	ldw	r2,-4(fp)
 2004c40:	10bfff04 	addi	r2,r2,-4
 2004c44:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004c48:	e0bfff17 	ldw	r2,-4(fp)
 2004c4c:	10800128 	cmpgeui	r2,r2,4
 2004c50:	103ff51e 	bne	r2,zero,2004c28 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2004c54:	e0bffb17 	ldw	r2,-20(fp)
 2004c58:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004c5c:	00000506 	br	2004c74 <memset+0x1a0>
    *s++ = (char) c;
 2004c60:	e0bff817 	ldw	r2,-32(fp)
 2004c64:	10c00044 	addi	r3,r2,1
 2004c68:	e0fff815 	stw	r3,-32(fp)
 2004c6c:	e0fffe17 	ldw	r3,-8(fp)
 2004c70:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004c74:	e0bfff17 	ldw	r2,-4(fp)
 2004c78:	10ffffc4 	addi	r3,r2,-1
 2004c7c:	e0ffff15 	stw	r3,-4(fp)
 2004c80:	103ff71e 	bne	r2,zero,2004c60 <memset+0x18c>
    *s++ = (char) c;

  return m;
 2004c84:	e0bffd17 	ldw	r2,-12(fp)
}
 2004c88:	e037883a 	mov	sp,fp
 2004c8c:	df000017 	ldw	fp,0(sp)
 2004c90:	dec00104 	addi	sp,sp,4
 2004c94:	f800283a 	ret

02004c98 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2004c98:	defff804 	addi	sp,sp,-32
 2004c9c:	dfc00515 	stw	ra,20(sp)
 2004ca0:	df000415 	stw	fp,16(sp)
 2004ca4:	df000404 	addi	fp,sp,16
 2004ca8:	e13ffe15 	stw	r4,-8(fp)
 2004cac:	e17fff15 	stw	r5,-4(fp)
 2004cb0:	e1800215 	stw	r6,8(fp)
 2004cb4:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2004cb8:	e0800204 	addi	r2,fp,8
 2004cbc:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2004cc0:	e0bffe17 	ldw	r2,-8(fp)
 2004cc4:	10800217 	ldw	r2,8(r2)
 2004cc8:	e0fffd17 	ldw	r3,-12(fp)
 2004ccc:	180f883a 	mov	r7,r3
 2004cd0:	e1bfff17 	ldw	r6,-4(fp)
 2004cd4:	100b883a 	mov	r5,r2
 2004cd8:	e13ffe17 	ldw	r4,-8(fp)
 2004cdc:	20050e80 	call	20050e8 <___vfprintf_internal_r>
 2004ce0:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2004ce4:	e0bffc17 	ldw	r2,-16(fp)
}
 2004ce8:	e037883a 	mov	sp,fp
 2004cec:	dfc00117 	ldw	ra,4(sp)
 2004cf0:	df000017 	ldw	fp,0(sp)
 2004cf4:	dec00404 	addi	sp,sp,16
 2004cf8:	f800283a 	ret

02004cfc <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2004cfc:	defff704 	addi	sp,sp,-36
 2004d00:	dfc00515 	stw	ra,20(sp)
 2004d04:	df000415 	stw	fp,16(sp)
 2004d08:	df000404 	addi	fp,sp,16
 2004d0c:	e13fff15 	stw	r4,-4(fp)
 2004d10:	e1400215 	stw	r5,8(fp)
 2004d14:	e1800315 	stw	r6,12(fp)
 2004d18:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2004d1c:	d0a00017 	ldw	r2,-32768(gp)
 2004d20:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2004d24:	e0800204 	addi	r2,fp,8
 2004d28:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2004d2c:	d0a00017 	ldw	r2,-32768(gp)
 2004d30:	10800217 	ldw	r2,8(r2)
 2004d34:	e0fffe17 	ldw	r3,-8(fp)
 2004d38:	180d883a 	mov	r6,r3
 2004d3c:	e17fff17 	ldw	r5,-4(fp)
 2004d40:	1009883a 	mov	r4,r2
 2004d44:	20050980 	call	2005098 <__vfprintf_internal>
 2004d48:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 2004d4c:	e0bffd17 	ldw	r2,-12(fp)
}
 2004d50:	e037883a 	mov	sp,fp
 2004d54:	dfc00117 	ldw	ra,4(sp)
 2004d58:	df000017 	ldw	fp,0(sp)
 2004d5c:	dec00504 	addi	sp,sp,20
 2004d60:	f800283a 	ret

02004d64 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 2004d64:	defff104 	addi	sp,sp,-60
 2004d68:	dfc00e15 	stw	ra,56(sp)
 2004d6c:	df000d15 	stw	fp,52(sp)
 2004d70:	df000d04 	addi	fp,sp,52
 2004d74:	e13ffe15 	stw	r4,-8(fp)
 2004d78:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 2004d7c:	e13fff17 	ldw	r4,-4(fp)
 2004d80:	2004eb40 	call	2004eb4 <strlen>
 2004d84:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 2004d88:	e0bfff17 	ldw	r2,-4(fp)
 2004d8c:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 2004d90:	e0bff317 	ldw	r2,-52(fp)
 2004d94:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 2004d98:	008080b4 	movhi	r2,514
 2004d9c:	10ba0204 	addi	r2,r2,-6136
 2004da0:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 2004da4:	00800044 	movi	r2,1
 2004da8:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2004dac:	e0bff317 	ldw	r2,-52(fp)
 2004db0:	10800044 	addi	r2,r2,1
 2004db4:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 2004db8:	e0bffa04 	addi	r2,fp,-24
 2004dbc:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2004dc0:	00800084 	movi	r2,2
 2004dc4:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 2004dc8:	e0bffe17 	ldw	r2,-8(fp)
 2004dcc:	e0bff415 	stw	r2,-48(fp)
 2004dd0:	e0bff417 	ldw	r2,-48(fp)
 2004dd4:	10000526 	beq	r2,zero,2004dec <_puts_r+0x88>
 2004dd8:	e0bff417 	ldw	r2,-48(fp)
 2004ddc:	10800e17 	ldw	r2,56(r2)
 2004de0:	1000021e 	bne	r2,zero,2004dec <_puts_r+0x88>
 2004de4:	e13ff417 	ldw	r4,-48(fp)
 2004de8:	2009d540 	call	2009d54 <__sinit>
  fp = _stdout_r (ptr);
 2004dec:	e0bffe17 	ldw	r2,-8(fp)
 2004df0:	10800217 	ldw	r2,8(r2)
 2004df4:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 2004df8:	e0bff517 	ldw	r2,-44(fp)
 2004dfc:	1080030b 	ldhu	r2,12(r2)
 2004e00:	10bfffcc 	andi	r2,r2,65535
 2004e04:	1088000c 	andi	r2,r2,8192
 2004e08:	10000c1e 	bne	r2,zero,2004e3c <_puts_r+0xd8>
 2004e0c:	e0bff517 	ldw	r2,-44(fp)
 2004e10:	1080030b 	ldhu	r2,12(r2)
 2004e14:	10880014 	ori	r2,r2,8192
 2004e18:	1007883a 	mov	r3,r2
 2004e1c:	e0bff517 	ldw	r2,-44(fp)
 2004e20:	10c0030d 	sth	r3,12(r2)
 2004e24:	e0bff517 	ldw	r2,-44(fp)
 2004e28:	10c01917 	ldw	r3,100(r2)
 2004e2c:	00b7ffc4 	movi	r2,-8193
 2004e30:	1886703a 	and	r3,r3,r2
 2004e34:	e0bff517 	ldw	r2,-44(fp)
 2004e38:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2004e3c:	e0bff704 	addi	r2,fp,-36
 2004e40:	100d883a 	mov	r6,r2
 2004e44:	e17ff517 	ldw	r5,-44(fp)
 2004e48:	e13ffe17 	ldw	r4,-8(fp)
 2004e4c:	200a6a00 	call	200a6a0 <__sfvwrite_r>
 2004e50:	10000226 	beq	r2,zero,2004e5c <_puts_r+0xf8>
 2004e54:	00bfffc4 	movi	r2,-1
 2004e58:	00000106 	br	2004e60 <_puts_r+0xfc>
 2004e5c:	00800284 	movi	r2,10
 2004e60:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 2004e64:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 2004e68:	e037883a 	mov	sp,fp
 2004e6c:	dfc00117 	ldw	ra,4(sp)
 2004e70:	df000017 	ldw	fp,0(sp)
 2004e74:	dec00204 	addi	sp,sp,8
 2004e78:	f800283a 	ret

02004e7c <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 2004e7c:	defffd04 	addi	sp,sp,-12
 2004e80:	dfc00215 	stw	ra,8(sp)
 2004e84:	df000115 	stw	fp,4(sp)
 2004e88:	df000104 	addi	fp,sp,4
 2004e8c:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 2004e90:	d0a00017 	ldw	r2,-32768(gp)
 2004e94:	e17fff17 	ldw	r5,-4(fp)
 2004e98:	1009883a 	mov	r4,r2
 2004e9c:	2004d640 	call	2004d64 <_puts_r>
}
 2004ea0:	e037883a 	mov	sp,fp
 2004ea4:	dfc00117 	ldw	ra,4(sp)
 2004ea8:	df000017 	ldw	fp,0(sp)
 2004eac:	dec00204 	addi	sp,sp,8
 2004eb0:	f800283a 	ret

02004eb4 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 2004eb4:	defffc04 	addi	sp,sp,-16
 2004eb8:	df000315 	stw	fp,12(sp)
 2004ebc:	df000304 	addi	fp,sp,12
 2004ec0:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 2004ec4:	e0bfff17 	ldw	r2,-4(fp)
 2004ec8:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2004ecc:	00000d06 	br	2004f04 <strlen+0x50>
    {
      if (!*str)
 2004ed0:	e0bfff17 	ldw	r2,-4(fp)
 2004ed4:	10800003 	ldbu	r2,0(r2)
 2004ed8:	10803fcc 	andi	r2,r2,255
 2004edc:	1080201c 	xori	r2,r2,128
 2004ee0:	10bfe004 	addi	r2,r2,-128
 2004ee4:	1000041e 	bne	r2,zero,2004ef8 <strlen+0x44>
	return str - start;
 2004ee8:	e0ffff17 	ldw	r3,-4(fp)
 2004eec:	e0bffe17 	ldw	r2,-8(fp)
 2004ef0:	1885c83a 	sub	r2,r3,r2
 2004ef4:	00002806 	br	2004f98 <strlen+0xe4>
      str++;
 2004ef8:	e0bfff17 	ldw	r2,-4(fp)
 2004efc:	10800044 	addi	r2,r2,1
 2004f00:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2004f04:	e0bfff17 	ldw	r2,-4(fp)
 2004f08:	108000cc 	andi	r2,r2,3
 2004f0c:	103ff01e 	bne	r2,zero,2004ed0 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2004f10:	e0bfff17 	ldw	r2,-4(fp)
 2004f14:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 2004f18:	00000306 	br	2004f28 <strlen+0x74>
    aligned_addr++;
 2004f1c:	e0bffd17 	ldw	r2,-12(fp)
 2004f20:	10800104 	addi	r2,r2,4
 2004f24:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 2004f28:	e0bffd17 	ldw	r2,-12(fp)
 2004f2c:	10c00017 	ldw	r3,0(r2)
 2004f30:	00bfbff4 	movhi	r2,65279
 2004f34:	10bfbfc4 	addi	r2,r2,-257
 2004f38:	1887883a 	add	r3,r3,r2
 2004f3c:	e0bffd17 	ldw	r2,-12(fp)
 2004f40:	10800017 	ldw	r2,0(r2)
 2004f44:	0084303a 	nor	r2,zero,r2
 2004f48:	1886703a 	and	r3,r3,r2
 2004f4c:	00a02074 	movhi	r2,32897
 2004f50:	10a02004 	addi	r2,r2,-32640
 2004f54:	1884703a 	and	r2,r3,r2
 2004f58:	103ff026 	beq	r2,zero,2004f1c <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 2004f5c:	e0bffd17 	ldw	r2,-12(fp)
 2004f60:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2004f64:	00000306 	br	2004f74 <strlen+0xc0>
    str++;
 2004f68:	e0bfff17 	ldw	r2,-4(fp)
 2004f6c:	10800044 	addi	r2,r2,1
 2004f70:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2004f74:	e0bfff17 	ldw	r2,-4(fp)
 2004f78:	10800003 	ldbu	r2,0(r2)
 2004f7c:	10803fcc 	andi	r2,r2,255
 2004f80:	1080201c 	xori	r2,r2,128
 2004f84:	10bfe004 	addi	r2,r2,-128
 2004f88:	103ff71e 	bne	r2,zero,2004f68 <strlen+0xb4>
    str++;
  return str - start;
 2004f8c:	e0ffff17 	ldw	r3,-4(fp)
 2004f90:	e0bffe17 	ldw	r2,-8(fp)
 2004f94:	1885c83a 	sub	r2,r3,r2
}
 2004f98:	e037883a 	mov	sp,fp
 2004f9c:	df000017 	ldw	fp,0(sp)
 2004fa0:	dec00104 	addi	sp,sp,4
 2004fa4:	f800283a 	ret

02004fa8 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2004fa8:	defedf04 	addi	sp,sp,-1156
 2004fac:	dfc12015 	stw	ra,1152(sp)
 2004fb0:	df011f15 	stw	fp,1148(sp)
 2004fb4:	dc011e15 	stw	r16,1144(sp)
 2004fb8:	df011f04 	addi	fp,sp,1148
 2004fbc:	e13ffc15 	stw	r4,-16(fp)
 2004fc0:	2821883a 	mov	r16,r5
 2004fc4:	e1bffd15 	stw	r6,-12(fp)
 2004fc8:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2004fcc:	80c0030b 	ldhu	r3,12(r16)
 2004fd0:	00bfff44 	movi	r2,-3
 2004fd4:	1884703a 	and	r2,r3,r2
 2004fd8:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2004fdc:	80801917 	ldw	r2,100(r16)
 2004fe0:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2004fe4:	8080038b 	ldhu	r2,14(r16)
 2004fe8:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2004fec:	80800717 	ldw	r2,28(r16)
 2004ff0:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2004ff4:	80800917 	ldw	r2,36(r16)
 2004ff8:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2004ffc:	e0befc04 	addi	r2,fp,-1040
 2005000:	e0bee215 	stw	r2,-1144(fp)
 2005004:	e0bee217 	ldw	r2,-1144(fp)
 2005008:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200500c:	00810004 	movi	r2,1024
 2005010:	e0bee415 	stw	r2,-1136(fp)
 2005014:	e0bee417 	ldw	r2,-1136(fp)
 2005018:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200501c:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2005020:	e0bee204 	addi	r2,fp,-1144
 2005024:	e1fffe17 	ldw	r7,-8(fp)
 2005028:	e1bffd17 	ldw	r6,-12(fp)
 200502c:	100b883a 	mov	r5,r2
 2005030:	e13ffc17 	ldw	r4,-16(fp)
 2005034:	20050e80 	call	20050e8 <___vfprintf_internal_r>
 2005038:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200503c:	e0bee117 	ldw	r2,-1148(fp)
 2005040:	10000716 	blt	r2,zero,2005060 <__sbprintf+0xb8>
 2005044:	e0bee204 	addi	r2,fp,-1144
 2005048:	100b883a 	mov	r5,r2
 200504c:	e13ffc17 	ldw	r4,-16(fp)
 2005050:	20098d40 	call	20098d4 <_fflush_r>
 2005054:	10000226 	beq	r2,zero,2005060 <__sbprintf+0xb8>
		ret = EOF;
 2005058:	00bfffc4 	movi	r2,-1
 200505c:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2005060:	e0bee50b 	ldhu	r2,-1132(fp)
 2005064:	10bfffcc 	andi	r2,r2,65535
 2005068:	1080100c 	andi	r2,r2,64
 200506c:	10000326 	beq	r2,zero,200507c <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2005070:	8080030b 	ldhu	r2,12(r16)
 2005074:	10801014 	ori	r2,r2,64
 2005078:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200507c:	e0bee117 	ldw	r2,-1148(fp)
}
 2005080:	e6ffff04 	addi	sp,fp,-4
 2005084:	dfc00217 	ldw	ra,8(sp)
 2005088:	df000117 	ldw	fp,4(sp)
 200508c:	dc000017 	ldw	r16,0(sp)
 2005090:	dec00304 	addi	sp,sp,12
 2005094:	f800283a 	ret

02005098 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2005098:	defffa04 	addi	sp,sp,-24
 200509c:	dfc00515 	stw	ra,20(sp)
 20050a0:	df000415 	stw	fp,16(sp)
 20050a4:	df000404 	addi	fp,sp,16
 20050a8:	e13ffd15 	stw	r4,-12(fp)
 20050ac:	e17ffe15 	stw	r5,-8(fp)
 20050b0:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 20050b4:	d0a00017 	ldw	r2,-32768(gp)
 20050b8:	e1ffff17 	ldw	r7,-4(fp)
 20050bc:	e1bffe17 	ldw	r6,-8(fp)
 20050c0:	e17ffd17 	ldw	r5,-12(fp)
 20050c4:	1009883a 	mov	r4,r2
 20050c8:	20050e80 	call	20050e8 <___vfprintf_internal_r>
 20050cc:	e0bffc15 	stw	r2,-16(fp)
  return result;
 20050d0:	e0bffc17 	ldw	r2,-16(fp)
}
 20050d4:	e037883a 	mov	sp,fp
 20050d8:	dfc00117 	ldw	ra,4(sp)
 20050dc:	df000017 	ldw	fp,0(sp)
 20050e0:	dec00204 	addi	sp,sp,8
 20050e4:	f800283a 	ret

020050e8 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 20050e8:	deffa404 	addi	sp,sp,-368
 20050ec:	dfc05b15 	stw	ra,364(sp)
 20050f0:	df005a15 	stw	fp,360(sp)
 20050f4:	ddc05915 	stw	r23,356(sp)
 20050f8:	dd805815 	stw	r22,352(sp)
 20050fc:	dd405715 	stw	r21,348(sp)
 2005100:	dd005615 	stw	r20,344(sp)
 2005104:	dcc05515 	stw	r19,340(sp)
 2005108:	dc805415 	stw	r18,336(sp)
 200510c:	dc405315 	stw	r17,332(sp)
 2005110:	dc005215 	stw	r16,328(sp)
 2005114:	df005a04 	addi	fp,sp,360
 2005118:	e13fe615 	stw	r4,-104(fp)
 200511c:	e17fe715 	stw	r5,-100(fp)
 2005120:	e1bfe815 	stw	r6,-96(fp)
 2005124:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 2005128:	e13fe617 	ldw	r4,-104(fp)
 200512c:	200af3c0 	call	200af3c <_localeconv_r>
 2005130:	10800017 	ldw	r2,0(r2)
 2005134:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2005138:	e13fbb17 	ldw	r4,-276(fp)
 200513c:	2004eb40 	call	2004eb4 <strlen>
 2005140:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2005144:	e03fc215 	stw	zero,-248(fp)
 2005148:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 200514c:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2005150:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2005154:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2005158:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200515c:	e0bfe617 	ldw	r2,-104(fp)
 2005160:	e0bfbd15 	stw	r2,-268(fp)
 2005164:	e0bfbd17 	ldw	r2,-268(fp)
 2005168:	10000526 	beq	r2,zero,2005180 <___vfprintf_internal_r+0x98>
 200516c:	e0bfbd17 	ldw	r2,-268(fp)
 2005170:	10800e17 	ldw	r2,56(r2)
 2005174:	1000021e 	bne	r2,zero,2005180 <___vfprintf_internal_r+0x98>
 2005178:	e13fbd17 	ldw	r4,-268(fp)
 200517c:	2009d540 	call	2009d54 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2005180:	e0bfe717 	ldw	r2,-100(fp)
 2005184:	1080030b 	ldhu	r2,12(r2)
 2005188:	10bfffcc 	andi	r2,r2,65535
 200518c:	1088000c 	andi	r2,r2,8192
 2005190:	10000c1e 	bne	r2,zero,20051c4 <___vfprintf_internal_r+0xdc>
 2005194:	e0bfe717 	ldw	r2,-100(fp)
 2005198:	1080030b 	ldhu	r2,12(r2)
 200519c:	10880014 	ori	r2,r2,8192
 20051a0:	1007883a 	mov	r3,r2
 20051a4:	e0bfe717 	ldw	r2,-100(fp)
 20051a8:	10c0030d 	sth	r3,12(r2)
 20051ac:	e0bfe717 	ldw	r2,-100(fp)
 20051b0:	10c01917 	ldw	r3,100(r2)
 20051b4:	00b7ffc4 	movi	r2,-8193
 20051b8:	1886703a 	and	r3,r3,r2
 20051bc:	e0bfe717 	ldw	r2,-100(fp)
 20051c0:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 20051c4:	e0bfe717 	ldw	r2,-100(fp)
 20051c8:	1080030b 	ldhu	r2,12(r2)
 20051cc:	10bfffcc 	andi	r2,r2,65535
 20051d0:	1080020c 	andi	r2,r2,8
 20051d4:	10000326 	beq	r2,zero,20051e4 <___vfprintf_internal_r+0xfc>
 20051d8:	e0bfe717 	ldw	r2,-100(fp)
 20051dc:	10800417 	ldw	r2,16(r2)
 20051e0:	1000061e 	bne	r2,zero,20051fc <___vfprintf_internal_r+0x114>
 20051e4:	e17fe717 	ldw	r5,-100(fp)
 20051e8:	e13fe617 	ldw	r4,-104(fp)
 20051ec:	20075040 	call	2007504 <__swsetup_r>
 20051f0:	10000226 	beq	r2,zero,20051fc <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 20051f4:	00bfffc4 	movi	r2,-1
 20051f8:	0007e206 	br	2007184 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 20051fc:	e0bfe717 	ldw	r2,-100(fp)
 2005200:	1080030b 	ldhu	r2,12(r2)
 2005204:	10bfffcc 	andi	r2,r2,65535
 2005208:	1080068c 	andi	r2,r2,26
 200520c:	10800298 	cmpnei	r2,r2,10
 2005210:	10000c1e 	bne	r2,zero,2005244 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2005214:	e0bfe717 	ldw	r2,-100(fp)
 2005218:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200521c:	10bfffcc 	andi	r2,r2,65535
 2005220:	10a0001c 	xori	r2,r2,32768
 2005224:	10a00004 	addi	r2,r2,-32768
 2005228:	10000616 	blt	r2,zero,2005244 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200522c:	e1ffe917 	ldw	r7,-92(fp)
 2005230:	e1bfe817 	ldw	r6,-96(fp)
 2005234:	e17fe717 	ldw	r5,-100(fp)
 2005238:	e13fe617 	ldw	r4,-104(fp)
 200523c:	2004fa80 	call	2004fa8 <__sbprintf>
 2005240:	0007d006 	br	2007184 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2005244:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2005248:	e47fcb04 	addi	r17,fp,-212
 200524c:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2005250:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2005254:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2005258:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200525c:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2005260:	00000106 	br	2005268 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2005264:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2005268:	a8800003 	ldbu	r2,0(r21)
 200526c:	10803fcc 	andi	r2,r2,255
 2005270:	1080201c 	xori	r2,r2,128
 2005274:	10bfe004 	addi	r2,r2,-128
 2005278:	10000626 	beq	r2,zero,2005294 <___vfprintf_internal_r+0x1ac>
 200527c:	a8800003 	ldbu	r2,0(r21)
 2005280:	10803fcc 	andi	r2,r2,255
 2005284:	1080201c 	xori	r2,r2,128
 2005288:	10bfe004 	addi	r2,r2,-128
 200528c:	10800958 	cmpnei	r2,r2,37
 2005290:	103ff41e 	bne	r2,zero,2005264 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2005294:	a807883a 	mov	r3,r21
 2005298:	9005883a 	mov	r2,r18
 200529c:	18a1c83a 	sub	r16,r3,r2
 20052a0:	80001826 	beq	r16,zero,2005304 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 20052a4:	8c800015 	stw	r18,0(r17)
 20052a8:	8005883a 	mov	r2,r16
 20052ac:	88800115 	stw	r2,4(r17)
 20052b0:	e0bfca17 	ldw	r2,-216(fp)
 20052b4:	8007883a 	mov	r3,r16
 20052b8:	10c5883a 	add	r2,r2,r3
 20052bc:	e0bfca15 	stw	r2,-216(fp)
 20052c0:	8c400204 	addi	r17,r17,8
 20052c4:	e0bfc917 	ldw	r2,-220(fp)
 20052c8:	10800044 	addi	r2,r2,1
 20052cc:	e0bfc915 	stw	r2,-220(fp)
 20052d0:	e0bfc917 	ldw	r2,-220(fp)
 20052d4:	10800210 	cmplti	r2,r2,8
 20052d8:	1000071e 	bne	r2,zero,20052f8 <___vfprintf_internal_r+0x210>
 20052dc:	e0bfc804 	addi	r2,fp,-224
 20052e0:	100d883a 	mov	r6,r2
 20052e4:	e17fe717 	ldw	r5,-100(fp)
 20052e8:	e13fe617 	ldw	r4,-104(fp)
 20052ec:	200ef700 	call	200ef70 <__sprint_r>
 20052f0:	10074d1e 	bne	r2,zero,2007028 <___vfprintf_internal_r+0x1f40>
 20052f4:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 20052f8:	e0bfac17 	ldw	r2,-336(fp)
 20052fc:	1405883a 	add	r2,r2,r16
 2005300:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2005304:	a8800003 	ldbu	r2,0(r21)
 2005308:	10803fcc 	andi	r2,r2,255
 200530c:	1080201c 	xori	r2,r2,128
 2005310:	10bfe004 	addi	r2,r2,-128
 2005314:	10073626 	beq	r2,zero,2006ff0 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2005318:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 200531c:	ad400044 	addi	r21,r21,1

		flags = 0;
 2005320:	0027883a 	mov	r19,zero
		dprec = 0;
 2005324:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 2005328:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 200532c:	00bfffc4 	movi	r2,-1
 2005330:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 2005334:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2005338:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200533c:	a805883a 	mov	r2,r21
 2005340:	15400044 	addi	r21,r2,1
 2005344:	10800003 	ldbu	r2,0(r2)
 2005348:	15003fcc 	andi	r20,r2,255
 200534c:	a500201c 	xori	r20,r20,128
 2005350:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 2005354:	a0bff804 	addi	r2,r20,-32
 2005358:	10c01668 	cmpgeui	r3,r2,89
 200535c:	1803491e 	bne	r3,zero,2006084 <___vfprintf_internal_r+0xf9c>
 2005360:	100690ba 	slli	r3,r2,2
 2005364:	00808034 	movhi	r2,512
 2005368:	1094de04 	addi	r2,r2,21368
 200536c:	1885883a 	add	r2,r3,r2
 2005370:	10800017 	ldw	r2,0(r2)
 2005374:	1000683a 	jmp	r2
 2005378:	020054dc 	xori	r8,zero,339
 200537c:	02006084 	movi	r8,386
 2005380:	02006084 	movi	r8,386
 2005384:	020054fc 	xorhi	r8,zero,339
 2005388:	02006084 	movi	r8,386
 200538c:	02006084 	movi	r8,386
 2005390:	02006084 	movi	r8,386
 2005394:	02006084 	movi	r8,386
 2005398:	02006084 	movi	r8,386
 200539c:	02006084 	movi	r8,386
 20053a0:	02005504 	movi	r8,340
 20053a4:	02005538 	rdprs	r8,zero,340
 20053a8:	02006084 	movi	r8,386
 20053ac:	02005530 	cmpltui	r8,zero,340
 20053b0:	02005544 	movi	r8,341
 20053b4:	02006084 	movi	r8,386
 20053b8:	020055d8 	cmpnei	r8,zero,343
 20053bc:	020055e0 	cmpeqi	r8,zero,343
 20053c0:	020055e0 	cmpeqi	r8,zero,343
 20053c4:	020055e0 	cmpeqi	r8,zero,343
 20053c8:	020055e0 	cmpeqi	r8,zero,343
 20053cc:	020055e0 	cmpeqi	r8,zero,343
 20053d0:	020055e0 	cmpeqi	r8,zero,343
 20053d4:	020055e0 	cmpeqi	r8,zero,343
 20053d8:	020055e0 	cmpeqi	r8,zero,343
 20053dc:	020055e0 	cmpeqi	r8,zero,343
 20053e0:	02006084 	movi	r8,386
 20053e4:	02006084 	movi	r8,386
 20053e8:	02006084 	movi	r8,386
 20053ec:	02006084 	movi	r8,386
 20053f0:	02006084 	movi	r8,386
 20053f4:	02006084 	movi	r8,386
 20053f8:	02006084 	movi	r8,386
 20053fc:	02006084 	movi	r8,386
 2005400:	02006084 	movi	r8,386
 2005404:	02006084 	movi	r8,386
 2005408:	02005688 	cmpgei	r8,zero,346
 200540c:	02005788 	cmpgei	r8,zero,350
 2005410:	02006084 	movi	r8,386
 2005414:	02005788 	cmpgei	r8,zero,350
 2005418:	02006084 	movi	r8,386
 200541c:	02006084 	movi	r8,386
 2005420:	02006084 	movi	r8,386
 2005424:	02006084 	movi	r8,386
 2005428:	0200561c 	xori	r8,zero,344
 200542c:	02006084 	movi	r8,386
 2005430:	02006084 	movi	r8,386
 2005434:	02005b24 	muli	r8,zero,364
 2005438:	02006084 	movi	r8,386
 200543c:	02006084 	movi	r8,386
 2005440:	02006084 	movi	r8,386
 2005444:	02006084 	movi	r8,386
 2005448:	02006084 	movi	r8,386
 200544c:	02005ca0 	cmpeqi	r8,zero,370
 2005450:	02006084 	movi	r8,386
 2005454:	02006084 	movi	r8,386
 2005458:	02005d60 	cmpeqi	r8,zero,373
 200545c:	02006084 	movi	r8,386
 2005460:	02006084 	movi	r8,386
 2005464:	02006084 	movi	r8,386
 2005468:	02006084 	movi	r8,386
 200546c:	02006084 	movi	r8,386
 2005470:	02006084 	movi	r8,386
 2005474:	02006084 	movi	r8,386
 2005478:	02006084 	movi	r8,386
 200547c:	02006084 	movi	r8,386
 2005480:	02006084 	movi	r8,386
 2005484:	02005660 	cmpeqi	r8,zero,345
 2005488:	0200568c 	andi	r8,zero,346
 200548c:	02005788 	cmpgei	r8,zero,350
 2005490:	02005788 	cmpgei	r8,zero,350
 2005494:	02005788 	cmpgei	r8,zero,350
 2005498:	02005624 	muli	r8,zero,344
 200549c:	0200568c 	andi	r8,zero,346
 20054a0:	02006084 	movi	r8,386
 20054a4:	02006084 	movi	r8,386
 20054a8:	0200562c 	andhi	r8,zero,344
 20054ac:	02006084 	movi	r8,386
 20054b0:	02005a84 	movi	r8,362
 20054b4:	02005b28 	cmpgeui	r8,zero,364
 20054b8:	02005bc8 	cmpgei	r8,zero,367
 20054bc:	02005658 	cmpnei	r8,zero,345
 20054c0:	02006084 	movi	r8,386
 20054c4:	02005c10 	cmplti	r8,zero,368
 20054c8:	02006084 	movi	r8,386
 20054cc:	02005ca4 	muli	r8,zero,370
 20054d0:	02006084 	movi	r8,386
 20054d4:	02006084 	movi	r8,386
 20054d8:	02005d70 	cmpltui	r8,zero,373
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 20054dc:	e0bfc103 	ldbu	r2,-252(fp)
 20054e0:	10803fcc 	andi	r2,r2,255
 20054e4:	1080201c 	xori	r2,r2,128
 20054e8:	10bfe004 	addi	r2,r2,-128
 20054ec:	103f931e 	bne	r2,zero,200533c <___vfprintf_internal_r+0x254>
				sign = ' ';
 20054f0:	00800804 	movi	r2,32
 20054f4:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 20054f8:	003f9006 	br	200533c <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 20054fc:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2005500:	003f8e06 	br	200533c <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2005504:	e0bfe917 	ldw	r2,-92(fp)
 2005508:	10c00104 	addi	r3,r2,4
 200550c:	e0ffe915 	stw	r3,-92(fp)
 2005510:	10800017 	ldw	r2,0(r2)
 2005514:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2005518:	e0bfad17 	ldw	r2,-332(fp)
 200551c:	10000116 	blt	r2,zero,2005524 <___vfprintf_internal_r+0x43c>
				goto rflag;
 2005520:	003f8606 	br	200533c <___vfprintf_internal_r+0x254>
			width = -width;
 2005524:	e0bfad17 	ldw	r2,-332(fp)
 2005528:	0085c83a 	sub	r2,zero,r2
 200552c:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2005530:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2005534:	003f8106 	br	200533c <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2005538:	00800ac4 	movi	r2,43
 200553c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2005540:	003f7e06 	br	200533c <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 2005544:	a805883a 	mov	r2,r21
 2005548:	15400044 	addi	r21,r2,1
 200554c:	10800003 	ldbu	r2,0(r2)
 2005550:	15003fcc 	andi	r20,r2,255
 2005554:	a500201c 	xori	r20,r20,128
 2005558:	a53fe004 	addi	r20,r20,-128
 200555c:	a0800a98 	cmpnei	r2,r20,42
 2005560:	10000a1e 	bne	r2,zero,200558c <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2005564:	e0bfe917 	ldw	r2,-92(fp)
 2005568:	10c00104 	addi	r3,r2,4
 200556c:	e0ffe915 	stw	r3,-92(fp)
 2005570:	10800017 	ldw	r2,0(r2)
 2005574:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2005578:	e0bfae17 	ldw	r2,-328(fp)
 200557c:	103f6f0e 	bge	r2,zero,200533c <___vfprintf_internal_r+0x254>
					prec = -1;
 2005580:	00bfffc4 	movi	r2,-1
 2005584:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2005588:	003f6c06 	br	200533c <___vfprintf_internal_r+0x254>
			}
			n = 0;
 200558c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2005590:	00000906 	br	20055b8 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 2005594:	80c002a4 	muli	r3,r16,10
 2005598:	a0bff404 	addi	r2,r20,-48
 200559c:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20055a0:	a805883a 	mov	r2,r21
 20055a4:	15400044 	addi	r21,r2,1
 20055a8:	10800003 	ldbu	r2,0(r2)
 20055ac:	15003fcc 	andi	r20,r2,255
 20055b0:	a500201c 	xori	r20,r20,128
 20055b4:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 20055b8:	a0bff404 	addi	r2,r20,-48
 20055bc:	108002b0 	cmpltui	r2,r2,10
 20055c0:	103ff41e 	bne	r2,zero,2005594 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 20055c4:	8005883a 	mov	r2,r16
 20055c8:	1000010e 	bge	r2,zero,20055d0 <___vfprintf_internal_r+0x4e8>
 20055cc:	00bfffc4 	movi	r2,-1
 20055d0:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 20055d4:	003f5f06 	br	2005354 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 20055d8:	9cc02014 	ori	r19,r19,128
			goto rflag;
 20055dc:	003f5706 	br	200533c <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 20055e0:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 20055e4:	80c002a4 	muli	r3,r16,10
 20055e8:	a0bff404 	addi	r2,r20,-48
 20055ec:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20055f0:	a805883a 	mov	r2,r21
 20055f4:	15400044 	addi	r21,r2,1
 20055f8:	10800003 	ldbu	r2,0(r2)
 20055fc:	15003fcc 	andi	r20,r2,255
 2005600:	a500201c 	xori	r20,r20,128
 2005604:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 2005608:	a0bff404 	addi	r2,r20,-48
 200560c:	108002b0 	cmpltui	r2,r2,10
 2005610:	103ff41e 	bne	r2,zero,20055e4 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2005614:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 2005618:	003f4e06 	br	2005354 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 200561c:	9cc00214 	ori	r19,r19,8
			goto rflag;
 2005620:	003f4606 	br	200533c <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2005624:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2005628:	003f4406 	br	200533c <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200562c:	a8800003 	ldbu	r2,0(r21)
 2005630:	10803fcc 	andi	r2,r2,255
 2005634:	1080201c 	xori	r2,r2,128
 2005638:	10bfe004 	addi	r2,r2,-128
 200563c:	10801b18 	cmpnei	r2,r2,108
 2005640:	1000031e 	bne	r2,zero,2005650 <___vfprintf_internal_r+0x568>
				fmt++;
 2005644:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2005648:	9cc00814 	ori	r19,r19,32
 200564c:	003f3b06 	br	200533c <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 2005650:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2005654:	003f3906 	br	200533c <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 2005658:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200565c:	003f3706 	br	200533c <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2005660:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2005664:	e0bfe917 	ldw	r2,-92(fp)
 2005668:	10c00104 	addi	r3,r2,4
 200566c:	e0ffe915 	stw	r3,-92(fp)
 2005670:	10800017 	ldw	r2,0(r2)
 2005674:	90800005 	stb	r2,0(r18)
				size = 1;
 2005678:	00800044 	movi	r2,1
 200567c:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 2005680:	e03fc105 	stb	zero,-252(fp)
			break;
 2005684:	00028806 	br	20060a8 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2005688:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200568c:	9880080c 	andi	r2,r19,32
 2005690:	10000826 	beq	r2,zero,20056b4 <___vfprintf_internal_r+0x5cc>
 2005694:	e13fe917 	ldw	r4,-92(fp)
 2005698:	20800204 	addi	r2,r4,8
 200569c:	e0bfe915 	stw	r2,-92(fp)
 20056a0:	20800017 	ldw	r2,0(r4)
 20056a4:	20c00117 	ldw	r3,4(r4)
 20056a8:	e0bfea15 	stw	r2,-88(fp)
 20056ac:	e0ffeb15 	stw	r3,-84(fp)
 20056b0:	00001e06 	br	200572c <___vfprintf_internal_r+0x644>
 20056b4:	9880040c 	andi	r2,r19,16
 20056b8:	10000826 	beq	r2,zero,20056dc <___vfprintf_internal_r+0x5f4>
 20056bc:	e0bfe917 	ldw	r2,-92(fp)
 20056c0:	10c00104 	addi	r3,r2,4
 20056c4:	e0ffe915 	stw	r3,-92(fp)
 20056c8:	10800017 	ldw	r2,0(r2)
 20056cc:	e0bfea15 	stw	r2,-88(fp)
 20056d0:	1005d7fa 	srai	r2,r2,31
 20056d4:	e0bfeb15 	stw	r2,-84(fp)
 20056d8:	00001406 	br	200572c <___vfprintf_internal_r+0x644>
 20056dc:	9880100c 	andi	r2,r19,64
 20056e0:	10000b26 	beq	r2,zero,2005710 <___vfprintf_internal_r+0x628>
 20056e4:	e0bfe917 	ldw	r2,-92(fp)
 20056e8:	10c00104 	addi	r3,r2,4
 20056ec:	e0ffe915 	stw	r3,-92(fp)
 20056f0:	10800017 	ldw	r2,0(r2)
 20056f4:	10bfffcc 	andi	r2,r2,65535
 20056f8:	10a0001c 	xori	r2,r2,32768
 20056fc:	10a00004 	addi	r2,r2,-32768
 2005700:	e0bfea15 	stw	r2,-88(fp)
 2005704:	1005d7fa 	srai	r2,r2,31
 2005708:	e0bfeb15 	stw	r2,-84(fp)
 200570c:	00000706 	br	200572c <___vfprintf_internal_r+0x644>
 2005710:	e0bfe917 	ldw	r2,-92(fp)
 2005714:	10c00104 	addi	r3,r2,4
 2005718:	e0ffe915 	stw	r3,-92(fp)
 200571c:	10800017 	ldw	r2,0(r2)
 2005720:	e0bfea15 	stw	r2,-88(fp)
 2005724:	1005d7fa 	srai	r2,r2,31
 2005728:	e0bfeb15 	stw	r2,-84(fp)
 200572c:	e0bfea17 	ldw	r2,-88(fp)
 2005730:	e0bfb115 	stw	r2,-316(fp)
 2005734:	e0ffeb17 	ldw	r3,-84(fp)
 2005738:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200573c:	e0bfb117 	ldw	r2,-316(fp)
 2005740:	e0ffb217 	ldw	r3,-312(fp)
 2005744:	18000d0e 	bge	r3,zero,200577c <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2005748:	000f883a 	mov	r7,zero
 200574c:	0011883a 	mov	r8,zero
 2005750:	e13fb117 	ldw	r4,-316(fp)
 2005754:	e17fb217 	ldw	r5,-312(fp)
 2005758:	3905c83a 	sub	r2,r7,r4
 200575c:	388d803a 	cmpltu	r6,r7,r2
 2005760:	4147c83a 	sub	r3,r8,r5
 2005764:	1989c83a 	sub	r4,r3,r6
 2005768:	2007883a 	mov	r3,r4
 200576c:	e0bfb115 	stw	r2,-316(fp)
 2005770:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 2005774:	00800b44 	movi	r2,45
 2005778:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 200577c:	00800044 	movi	r2,1
 2005780:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2005784:	0001b706 	br	2005e64 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2005788:	9880020c 	andi	r2,r19,8
 200578c:	10000826 	beq	r2,zero,20057b0 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2005790:	e13fe917 	ldw	r4,-92(fp)
 2005794:	20800204 	addi	r2,r4,8
 2005798:	e0bfe915 	stw	r2,-92(fp)
 200579c:	20800017 	ldw	r2,0(r4)
 20057a0:	20c00117 	ldw	r3,4(r4)
 20057a4:	e0bfc215 	stw	r2,-248(fp)
 20057a8:	e0ffc315 	stw	r3,-244(fp)
 20057ac:	00000706 	br	20057cc <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 20057b0:	e13fe917 	ldw	r4,-92(fp)
 20057b4:	20800204 	addi	r2,r4,8
 20057b8:	e0bfe915 	stw	r2,-92(fp)
 20057bc:	20800017 	ldw	r2,0(r4)
 20057c0:	20c00117 	ldw	r3,4(r4)
 20057c4:	e0bfc215 	stw	r2,-248(fp)
 20057c8:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 20057cc:	e0bfc217 	ldw	r2,-248(fp)
 20057d0:	e0ffc317 	ldw	r3,-244(fp)
 20057d4:	1009883a 	mov	r4,r2
 20057d8:	180b883a 	mov	r5,r3
 20057dc:	20031a80 	call	20031a8 <__fpclassifyd>
 20057e0:	10800058 	cmpnei	r2,r2,1
 20057e4:	1000161e 	bne	r2,zero,2005840 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 20057e8:	e0bfc217 	ldw	r2,-248(fp)
 20057ec:	e0ffc317 	ldw	r3,-244(fp)
 20057f0:	000d883a 	mov	r6,zero
 20057f4:	000f883a 	mov	r7,zero
 20057f8:	1009883a 	mov	r4,r2
 20057fc:	180b883a 	mov	r5,r3
 2005800:	2003c700 	call	2003c70 <__ledf2>
 2005804:	1000020e 	bge	r2,zero,2005810 <___vfprintf_internal_r+0x728>
					sign = '-';
 2005808:	00800b44 	movi	r2,45
 200580c:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2005810:	a0801208 	cmpgei	r2,r20,72
 2005814:	1000031e 	bne	r2,zero,2005824 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 2005818:	048080b4 	movhi	r18,514
 200581c:	94ba0304 	addi	r18,r18,-6132
 2005820:	00000206 	br	200582c <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 2005824:	048080b4 	movhi	r18,514
 2005828:	94ba0404 	addi	r18,r18,-6128
				size = 3;
 200582c:	008000c4 	movi	r2,3
 2005830:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2005834:	00bfdfc4 	movi	r2,-129
 2005838:	98a6703a 	and	r19,r19,r2
				break;
 200583c:	00021a06 	br	20060a8 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 2005840:	e0bfc217 	ldw	r2,-248(fp)
 2005844:	e0ffc317 	ldw	r3,-244(fp)
 2005848:	1009883a 	mov	r4,r2
 200584c:	180b883a 	mov	r5,r3
 2005850:	20031a80 	call	20031a8 <__fpclassifyd>
 2005854:	10000c1e 	bne	r2,zero,2005888 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2005858:	a0801208 	cmpgei	r2,r20,72
 200585c:	1000031e 	bne	r2,zero,200586c <___vfprintf_internal_r+0x784>
					cp = "NAN";
 2005860:	048080b4 	movhi	r18,514
 2005864:	94ba0504 	addi	r18,r18,-6124
 2005868:	00000206 	br	2005874 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 200586c:	048080b4 	movhi	r18,514
 2005870:	94ba0604 	addi	r18,r18,-6120
				size = 3;
 2005874:	008000c4 	movi	r2,3
 2005878:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200587c:	00bfdfc4 	movi	r2,-129
 2005880:	98a6703a 	and	r19,r19,r2
				break;
 2005884:	00020806 	br	20060a8 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 2005888:	e0bfae17 	ldw	r2,-328(fp)
 200588c:	10bfffd8 	cmpnei	r2,r2,-1
 2005890:	1000031e 	bne	r2,zero,20058a0 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2005894:	00800184 	movi	r2,6
 2005898:	e0bfae15 	stw	r2,-328(fp)
 200589c:	00000806 	br	20058c0 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 20058a0:	a08019e0 	cmpeqi	r2,r20,103
 20058a4:	1000021e 	bne	r2,zero,20058b0 <___vfprintf_internal_r+0x7c8>
 20058a8:	a08011d8 	cmpnei	r2,r20,71
 20058ac:	1000041e 	bne	r2,zero,20058c0 <___vfprintf_internal_r+0x7d8>
 20058b0:	e0bfae17 	ldw	r2,-328(fp)
 20058b4:	1000021e 	bne	r2,zero,20058c0 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 20058b8:	00800044 	movi	r2,1
 20058bc:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 20058c0:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 20058c4:	e0bfc217 	ldw	r2,-248(fp)
 20058c8:	e0ffc317 	ldw	r3,-244(fp)
 20058cc:	dc800515 	stw	r18,20(sp)
 20058d0:	e13fc704 	addi	r4,fp,-228
 20058d4:	d9000415 	stw	r4,16(sp)
 20058d8:	dd000315 	stw	r20,12(sp)
 20058dc:	e13fc404 	addi	r4,fp,-240
 20058e0:	d9000215 	stw	r4,8(sp)
 20058e4:	e13fc144 	addi	r4,fp,-251
 20058e8:	d9000115 	stw	r4,4(sp)
 20058ec:	dcc00015 	stw	r19,0(sp)
 20058f0:	e1ffae17 	ldw	r7,-328(fp)
 20058f4:	100b883a 	mov	r5,r2
 20058f8:	180d883a 	mov	r6,r3
 20058fc:	e13fe617 	ldw	r4,-104(fp)
 2005900:	20071b80 	call	20071b8 <cvt>
 2005904:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 2005908:	a08019e0 	cmpeqi	r2,r20,103
 200590c:	1000021e 	bne	r2,zero,2005918 <___vfprintf_internal_r+0x830>
 2005910:	a08011d8 	cmpnei	r2,r20,71
 2005914:	1000091e 	bne	r2,zero,200593c <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 2005918:	e0bfc417 	ldw	r2,-240(fp)
 200591c:	10bfff50 	cmplti	r2,r2,-3
 2005920:	1000031e 	bne	r2,zero,2005930 <___vfprintf_internal_r+0x848>
 2005924:	e0bfc417 	ldw	r2,-240(fp)
 2005928:	e0ffae17 	ldw	r3,-328(fp)
 200592c:	1880020e 	bge	r3,r2,2005938 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 2005930:	a53fff84 	addi	r20,r20,-2
 2005934:	00000106 	br	200593c <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 2005938:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 200593c:	a0801988 	cmpgei	r2,r20,102
 2005940:	1000171e 	bne	r2,zero,20059a0 <___vfprintf_internal_r+0x8b8>
				--expt;
 2005944:	e0bfc417 	ldw	r2,-240(fp)
 2005948:	10bfffc4 	addi	r2,r2,-1
 200594c:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 2005950:	e0bfc417 	ldw	r2,-240(fp)
 2005954:	e0ffc504 	addi	r3,fp,-236
 2005958:	a00d883a 	mov	r6,r20
 200595c:	100b883a 	mov	r5,r2
 2005960:	1809883a 	mov	r4,r3
 2005964:	20073c40 	call	20073c4 <exponent>
 2005968:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 200596c:	e0bfc717 	ldw	r2,-228(fp)
 2005970:	e0ffaf17 	ldw	r3,-324(fp)
 2005974:	1885883a 	add	r2,r3,r2
 2005978:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 200597c:	e0bfc717 	ldw	r2,-228(fp)
 2005980:	10800088 	cmpgei	r2,r2,2
 2005984:	1000021e 	bne	r2,zero,2005990 <___vfprintf_internal_r+0x8a8>
 2005988:	9880004c 	andi	r2,r19,1
 200598c:	10003526 	beq	r2,zero,2005a64 <___vfprintf_internal_r+0x97c>
					++size;
 2005990:	e0bfb617 	ldw	r2,-296(fp)
 2005994:	10800044 	addi	r2,r2,1
 2005998:	e0bfb615 	stw	r2,-296(fp)
 200599c:	00003106 	br	2005a64 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 20059a0:	a0801998 	cmpnei	r2,r20,102
 20059a4:	1000181e 	bne	r2,zero,2005a08 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 20059a8:	e0bfc417 	ldw	r2,-240(fp)
 20059ac:	00800c0e 	bge	zero,r2,20059e0 <___vfprintf_internal_r+0x8f8>
						size = expt;
 20059b0:	e0bfc417 	ldw	r2,-240(fp)
 20059b4:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 20059b8:	e0bfae17 	ldw	r2,-328(fp)
 20059bc:	1000021e 	bne	r2,zero,20059c8 <___vfprintf_internal_r+0x8e0>
 20059c0:	9880004c 	andi	r2,r19,1
 20059c4:	10002526 	beq	r2,zero,2005a5c <___vfprintf_internal_r+0x974>
							size += prec + 1;
 20059c8:	e0bfae17 	ldw	r2,-328(fp)
 20059cc:	10800044 	addi	r2,r2,1
 20059d0:	e0ffb617 	ldw	r3,-296(fp)
 20059d4:	1885883a 	add	r2,r3,r2
 20059d8:	e0bfb615 	stw	r2,-296(fp)
 20059dc:	00001f06 	br	2005a5c <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 20059e0:	e0bfae17 	ldw	r2,-328(fp)
 20059e4:	1000021e 	bne	r2,zero,20059f0 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 20059e8:	9880004c 	andi	r2,r19,1
 20059ec:	10000326 	beq	r2,zero,20059fc <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 20059f0:	e0bfae17 	ldw	r2,-328(fp)
 20059f4:	10800084 	addi	r2,r2,2
 20059f8:	00000106 	br	2005a00 <___vfprintf_internal_r+0x918>
 20059fc:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2005a00:	e0bfb615 	stw	r2,-296(fp)
 2005a04:	00001506 	br	2005a5c <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 2005a08:	e0ffc417 	ldw	r3,-240(fp)
 2005a0c:	e0bfc717 	ldw	r2,-228(fp)
 2005a10:	18800816 	blt	r3,r2,2005a34 <___vfprintf_internal_r+0x94c>
					size = expt;
 2005a14:	e0bfc417 	ldw	r2,-240(fp)
 2005a18:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 2005a1c:	9880004c 	andi	r2,r19,1
 2005a20:	10000e26 	beq	r2,zero,2005a5c <___vfprintf_internal_r+0x974>
						++size;
 2005a24:	e0bfb617 	ldw	r2,-296(fp)
 2005a28:	10800044 	addi	r2,r2,1
 2005a2c:	e0bfb615 	stw	r2,-296(fp)
 2005a30:	00000a06 	br	2005a5c <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 2005a34:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 2005a38:	00800416 	blt	zero,r2,2005a4c <___vfprintf_internal_r+0x964>
 2005a3c:	e0bfc417 	ldw	r2,-240(fp)
 2005a40:	00c00084 	movi	r3,2
 2005a44:	1885c83a 	sub	r2,r3,r2
 2005a48:	00000106 	br	2005a50 <___vfprintf_internal_r+0x968>
 2005a4c:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 2005a50:	e0ffc717 	ldw	r3,-228(fp)
 2005a54:	10c5883a 	add	r2,r2,r3
 2005a58:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 2005a5c:	e0bfc417 	ldw	r2,-240(fp)
 2005a60:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 2005a64:	e0bfc143 	ldbu	r2,-251(fp)
 2005a68:	10803fcc 	andi	r2,r2,255
 2005a6c:	1080201c 	xori	r2,r2,128
 2005a70:	10bfe004 	addi	r2,r2,-128
 2005a74:	10018b26 	beq	r2,zero,20060a4 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 2005a78:	00800b44 	movi	r2,45
 2005a7c:	e0bfc105 	stb	r2,-252(fp)
			break;
 2005a80:	00018806 	br	20060a4 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2005a84:	9880080c 	andi	r2,r19,32
 2005a88:	10000d26 	beq	r2,zero,2005ac0 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2005a8c:	e0bfe917 	ldw	r2,-92(fp)
 2005a90:	10c00104 	addi	r3,r2,4
 2005a94:	e0ffe915 	stw	r3,-92(fp)
 2005a98:	10800017 	ldw	r2,0(r2)
 2005a9c:	e0ffac17 	ldw	r3,-336(fp)
 2005aa0:	e0fff015 	stw	r3,-64(fp)
 2005aa4:	1807d7fa 	srai	r3,r3,31
 2005aa8:	e0fff115 	stw	r3,-60(fp)
 2005aac:	e0fff017 	ldw	r3,-64(fp)
 2005ab0:	10c00015 	stw	r3,0(r2)
 2005ab4:	e0fff117 	ldw	r3,-60(fp)
 2005ab8:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005abc:	00054b06 	br	2006fec <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2005ac0:	9880040c 	andi	r2,r19,16
 2005ac4:	10000726 	beq	r2,zero,2005ae4 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2005ac8:	e0bfe917 	ldw	r2,-92(fp)
 2005acc:	10c00104 	addi	r3,r2,4
 2005ad0:	e0ffe915 	stw	r3,-92(fp)
 2005ad4:	10800017 	ldw	r2,0(r2)
 2005ad8:	e0ffac17 	ldw	r3,-336(fp)
 2005adc:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005ae0:	00054206 	br	2006fec <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2005ae4:	9880100c 	andi	r2,r19,64
 2005ae8:	10000726 	beq	r2,zero,2005b08 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2005aec:	e0bfe917 	ldw	r2,-92(fp)
 2005af0:	10c00104 	addi	r3,r2,4
 2005af4:	e0ffe915 	stw	r3,-92(fp)
 2005af8:	10800017 	ldw	r2,0(r2)
 2005afc:	e0ffac17 	ldw	r3,-336(fp)
 2005b00:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005b04:	00053906 	br	2006fec <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2005b08:	e0bfe917 	ldw	r2,-92(fp)
 2005b0c:	10c00104 	addi	r3,r2,4
 2005b10:	e0ffe915 	stw	r3,-92(fp)
 2005b14:	10800017 	ldw	r2,0(r2)
 2005b18:	e0ffac17 	ldw	r3,-336(fp)
 2005b1c:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2005b20:	00053206 	br	2006fec <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 2005b24:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2005b28:	9880080c 	andi	r2,r19,32
 2005b2c:	10000626 	beq	r2,zero,2005b48 <___vfprintf_internal_r+0xa60>
 2005b30:	e0bfe917 	ldw	r2,-92(fp)
 2005b34:	10c00204 	addi	r3,r2,8
 2005b38:	e0ffe915 	stw	r3,-92(fp)
 2005b3c:	15800017 	ldw	r22,0(r2)
 2005b40:	15c00117 	ldw	r23,4(r2)
 2005b44:	00001c06 	br	2005bb8 <___vfprintf_internal_r+0xad0>
 2005b48:	9880040c 	andi	r2,r19,16
 2005b4c:	10000726 	beq	r2,zero,2005b6c <___vfprintf_internal_r+0xa84>
 2005b50:	e0bfe917 	ldw	r2,-92(fp)
 2005b54:	10c00104 	addi	r3,r2,4
 2005b58:	e0ffe915 	stw	r3,-92(fp)
 2005b5c:	10800017 	ldw	r2,0(r2)
 2005b60:	102d883a 	mov	r22,r2
 2005b64:	002f883a 	mov	r23,zero
 2005b68:	00001306 	br	2005bb8 <___vfprintf_internal_r+0xad0>
 2005b6c:	9880100c 	andi	r2,r19,64
 2005b70:	10000b26 	beq	r2,zero,2005ba0 <___vfprintf_internal_r+0xab8>
 2005b74:	e0bfe917 	ldw	r2,-92(fp)
 2005b78:	10c00104 	addi	r3,r2,4
 2005b7c:	e0ffe915 	stw	r3,-92(fp)
 2005b80:	10800017 	ldw	r2,0(r2)
 2005b84:	e0bff215 	stw	r2,-56(fp)
 2005b88:	e03ff315 	stw	zero,-52(fp)
 2005b8c:	e0bff217 	ldw	r2,-56(fp)
 2005b90:	15bfffcc 	andi	r22,r2,65535
 2005b94:	e0fff317 	ldw	r3,-52(fp)
 2005b98:	182e703a 	and	r23,r3,zero
 2005b9c:	00000606 	br	2005bb8 <___vfprintf_internal_r+0xad0>
 2005ba0:	e0bfe917 	ldw	r2,-92(fp)
 2005ba4:	10c00104 	addi	r3,r2,4
 2005ba8:	e0ffe915 	stw	r3,-92(fp)
 2005bac:	10800017 	ldw	r2,0(r2)
 2005bb0:	102d883a 	mov	r22,r2
 2005bb4:	002f883a 	mov	r23,zero
 2005bb8:	e5bfb115 	stw	r22,-316(fp)
 2005bbc:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 2005bc0:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2005bc4:	0000a606 	br	2005e60 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2005bc8:	e0bfe917 	ldw	r2,-92(fp)
 2005bcc:	10c00104 	addi	r3,r2,4
 2005bd0:	e0ffe915 	stw	r3,-92(fp)
 2005bd4:	10800017 	ldw	r2,0(r2)
 2005bd8:	e0bfb115 	stw	r2,-316(fp)
 2005bdc:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 2005be0:	00800084 	movi	r2,2
 2005be4:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 2005be8:	008080b4 	movhi	r2,514
 2005bec:	10ba0704 	addi	r2,r2,-6116
 2005bf0:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2005bf4:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2005bf8:	00800c04 	movi	r2,48
 2005bfc:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2005c00:	05001e04 	movi	r20,120
 2005c04:	00801e04 	movi	r2,120
 2005c08:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2005c0c:	00009406 	br	2005e60 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2005c10:	e0bfe917 	ldw	r2,-92(fp)
 2005c14:	10c00104 	addi	r3,r2,4
 2005c18:	e0ffe915 	stw	r3,-92(fp)
 2005c1c:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2005c20:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2005c24:	9000081e 	bne	r18,zero,2005c48 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 2005c28:	048080b4 	movhi	r18,514
 2005c2c:	94ba0c04 	addi	r18,r18,-6096
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2005c30:	e0bfae17 	ldw	r2,-328(fp)
 2005c34:	10c001f0 	cmpltui	r3,r2,7
 2005c38:	1800011e 	bne	r3,zero,2005c40 <___vfprintf_internal_r+0xb58>
 2005c3c:	00800184 	movi	r2,6
 2005c40:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005c44:	00011806 	br	20060a8 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2005c48:	e0bfae17 	ldw	r2,-328(fp)
 2005c4c:	10001016 	blt	r2,zero,2005c90 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2005c50:	e0bfae17 	ldw	r2,-328(fp)
 2005c54:	100d883a 	mov	r6,r2
 2005c58:	000b883a 	mov	r5,zero
 2005c5c:	9009883a 	mov	r4,r18
 2005c60:	200c1300 	call	200c130 <memchr>
 2005c64:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 2005c68:	e0bfbf17 	ldw	r2,-260(fp)
 2005c6c:	10000526 	beq	r2,zero,2005c84 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 2005c70:	e0bfbf17 	ldw	r2,-260(fp)
 2005c74:	9007883a 	mov	r3,r18
 2005c78:	10c5c83a 	sub	r2,r2,r3
 2005c7c:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005c80:	00010906 	br	20060a8 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2005c84:	e0bfae17 	ldw	r2,-328(fp)
 2005c88:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2005c8c:	00010606 	br	20060a8 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2005c90:	9009883a 	mov	r4,r18
 2005c94:	2004eb40 	call	2004eb4 <strlen>
 2005c98:	e0bfb615 	stw	r2,-296(fp)

			break;
 2005c9c:	00010206 	br	20060a8 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2005ca0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2005ca4:	9880080c 	andi	r2,r19,32
 2005ca8:	10000826 	beq	r2,zero,2005ccc <___vfprintf_internal_r+0xbe4>
 2005cac:	e0bfe917 	ldw	r2,-92(fp)
 2005cb0:	10c00204 	addi	r3,r2,8
 2005cb4:	e0ffe915 	stw	r3,-92(fp)
 2005cb8:	10c00017 	ldw	r3,0(r2)
 2005cbc:	e0ffec15 	stw	r3,-80(fp)
 2005cc0:	10c00117 	ldw	r3,4(r2)
 2005cc4:	e0ffed15 	stw	r3,-76(fp)
 2005cc8:	00001e06 	br	2005d44 <___vfprintf_internal_r+0xc5c>
 2005ccc:	9880040c 	andi	r2,r19,16
 2005cd0:	10000726 	beq	r2,zero,2005cf0 <___vfprintf_internal_r+0xc08>
 2005cd4:	e0bfe917 	ldw	r2,-92(fp)
 2005cd8:	10c00104 	addi	r3,r2,4
 2005cdc:	e0ffe915 	stw	r3,-92(fp)
 2005ce0:	10800017 	ldw	r2,0(r2)
 2005ce4:	e0bfec15 	stw	r2,-80(fp)
 2005ce8:	e03fed15 	stw	zero,-76(fp)
 2005cec:	00001506 	br	2005d44 <___vfprintf_internal_r+0xc5c>
 2005cf0:	9880100c 	andi	r2,r19,64
 2005cf4:	10000d26 	beq	r2,zero,2005d2c <___vfprintf_internal_r+0xc44>
 2005cf8:	e0bfe917 	ldw	r2,-92(fp)
 2005cfc:	10c00104 	addi	r3,r2,4
 2005d00:	e0ffe915 	stw	r3,-92(fp)
 2005d04:	10800017 	ldw	r2,0(r2)
 2005d08:	e0bff415 	stw	r2,-48(fp)
 2005d0c:	e03ff515 	stw	zero,-44(fp)
 2005d10:	e0bff417 	ldw	r2,-48(fp)
 2005d14:	10bfffcc 	andi	r2,r2,65535
 2005d18:	e0bfec15 	stw	r2,-80(fp)
 2005d1c:	e0fff517 	ldw	r3,-44(fp)
 2005d20:	1806703a 	and	r3,r3,zero
 2005d24:	e0ffed15 	stw	r3,-76(fp)
 2005d28:	00000606 	br	2005d44 <___vfprintf_internal_r+0xc5c>
 2005d2c:	e0bfe917 	ldw	r2,-92(fp)
 2005d30:	10c00104 	addi	r3,r2,4
 2005d34:	e0ffe915 	stw	r3,-92(fp)
 2005d38:	10800017 	ldw	r2,0(r2)
 2005d3c:	e0bfec15 	stw	r2,-80(fp)
 2005d40:	e03fed15 	stw	zero,-76(fp)
 2005d44:	e0bfec17 	ldw	r2,-80(fp)
 2005d48:	e0bfb115 	stw	r2,-316(fp)
 2005d4c:	e0ffed17 	ldw	r3,-76(fp)
 2005d50:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 2005d54:	00800044 	movi	r2,1
 2005d58:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 2005d5c:	00004006 	br	2005e60 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2005d60:	008080b4 	movhi	r2,514
 2005d64:	10ba0e04 	addi	r2,r2,-6088
 2005d68:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 2005d6c:	00000306 	br	2005d7c <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 2005d70:	008080b4 	movhi	r2,514
 2005d74:	10ba0704 	addi	r2,r2,-6116
 2005d78:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 2005d7c:	9880080c 	andi	r2,r19,32
 2005d80:	10000826 	beq	r2,zero,2005da4 <___vfprintf_internal_r+0xcbc>
 2005d84:	e0bfe917 	ldw	r2,-92(fp)
 2005d88:	10c00204 	addi	r3,r2,8
 2005d8c:	e0ffe915 	stw	r3,-92(fp)
 2005d90:	10c00017 	ldw	r3,0(r2)
 2005d94:	e0ffee15 	stw	r3,-72(fp)
 2005d98:	10c00117 	ldw	r3,4(r2)
 2005d9c:	e0ffef15 	stw	r3,-68(fp)
 2005da0:	00001e06 	br	2005e1c <___vfprintf_internal_r+0xd34>
 2005da4:	9880040c 	andi	r2,r19,16
 2005da8:	10000726 	beq	r2,zero,2005dc8 <___vfprintf_internal_r+0xce0>
 2005dac:	e0bfe917 	ldw	r2,-92(fp)
 2005db0:	10c00104 	addi	r3,r2,4
 2005db4:	e0ffe915 	stw	r3,-92(fp)
 2005db8:	10800017 	ldw	r2,0(r2)
 2005dbc:	e0bfee15 	stw	r2,-72(fp)
 2005dc0:	e03fef15 	stw	zero,-68(fp)
 2005dc4:	00001506 	br	2005e1c <___vfprintf_internal_r+0xd34>
 2005dc8:	9880100c 	andi	r2,r19,64
 2005dcc:	10000d26 	beq	r2,zero,2005e04 <___vfprintf_internal_r+0xd1c>
 2005dd0:	e0bfe917 	ldw	r2,-92(fp)
 2005dd4:	10c00104 	addi	r3,r2,4
 2005dd8:	e0ffe915 	stw	r3,-92(fp)
 2005ddc:	10800017 	ldw	r2,0(r2)
 2005de0:	e0bff615 	stw	r2,-40(fp)
 2005de4:	e03ff715 	stw	zero,-36(fp)
 2005de8:	e0bff617 	ldw	r2,-40(fp)
 2005dec:	10bfffcc 	andi	r2,r2,65535
 2005df0:	e0bfee15 	stw	r2,-72(fp)
 2005df4:	e0fff717 	ldw	r3,-36(fp)
 2005df8:	1806703a 	and	r3,r3,zero
 2005dfc:	e0ffef15 	stw	r3,-68(fp)
 2005e00:	00000606 	br	2005e1c <___vfprintf_internal_r+0xd34>
 2005e04:	e0bfe917 	ldw	r2,-92(fp)
 2005e08:	10c00104 	addi	r3,r2,4
 2005e0c:	e0ffe915 	stw	r3,-92(fp)
 2005e10:	10800017 	ldw	r2,0(r2)
 2005e14:	e0bfee15 	stw	r2,-72(fp)
 2005e18:	e03fef15 	stw	zero,-68(fp)
 2005e1c:	e0bfee17 	ldw	r2,-72(fp)
 2005e20:	e0bfb115 	stw	r2,-316(fp)
 2005e24:	e0ffef17 	ldw	r3,-68(fp)
 2005e28:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 2005e2c:	00800084 	movi	r2,2
 2005e30:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2005e34:	9880004c 	andi	r2,r19,1
 2005e38:	10000926 	beq	r2,zero,2005e60 <___vfprintf_internal_r+0xd78>
 2005e3c:	e0bfb117 	ldw	r2,-316(fp)
 2005e40:	e0ffb217 	ldw	r3,-312(fp)
 2005e44:	10c4b03a 	or	r2,r2,r3
 2005e48:	10000526 	beq	r2,zero,2005e60 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 2005e4c:	00800c04 	movi	r2,48
 2005e50:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2005e54:	a005883a 	mov	r2,r20
 2005e58:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2005e5c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2005e60:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2005e64:	e0bfae17 	ldw	r2,-328(fp)
 2005e68:	e0bfb415 	stw	r2,-304(fp)
 2005e6c:	e0bfb417 	ldw	r2,-304(fp)
 2005e70:	10000216 	blt	r2,zero,2005e7c <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 2005e74:	00bfdfc4 	movi	r2,-129
 2005e78:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2005e7c:	e4bfdb04 	addi	r18,fp,-148
 2005e80:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 2005e84:	e0bfb117 	ldw	r2,-316(fp)
 2005e88:	e0ffb217 	ldw	r3,-312(fp)
 2005e8c:	10c4b03a 	or	r2,r2,r3
 2005e90:	1000021e 	bne	r2,zero,2005e9c <___vfprintf_internal_r+0xdb4>
 2005e94:	e0bfae17 	ldw	r2,-328(fp)
 2005e98:	10006c26 	beq	r2,zero,200604c <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2005e9c:	e0bfb303 	ldbu	r2,-308(fp)
 2005ea0:	10c00060 	cmpeqi	r3,r2,1
 2005ea4:	1800211e 	bne	r3,zero,2005f2c <___vfprintf_internal_r+0xe44>
 2005ea8:	10c000a0 	cmpeqi	r3,r2,2
 2005eac:	1800491e 	bne	r3,zero,2005fd4 <___vfprintf_internal_r+0xeec>
 2005eb0:	10005d1e 	bne	r2,zero,2006028 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 2005eb4:	94bfffc4 	addi	r18,r18,-1
 2005eb8:	e0bfb117 	ldw	r2,-316(fp)
 2005ebc:	108001cc 	andi	r2,r2,7
 2005ec0:	10800c04 	addi	r2,r2,48
 2005ec4:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 2005ec8:	e0bfb217 	ldw	r2,-312(fp)
 2005ecc:	1004977a 	slli	r2,r2,29
 2005ed0:	e0ffb117 	ldw	r3,-316(fp)
 2005ed4:	1806d0fa 	srli	r3,r3,3
 2005ed8:	1884b03a 	or	r2,r3,r2
 2005edc:	e0bfb115 	stw	r2,-316(fp)
 2005ee0:	e0bfb217 	ldw	r2,-312(fp)
 2005ee4:	1004d0fa 	srli	r2,r2,3
 2005ee8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2005eec:	e0bfb117 	ldw	r2,-316(fp)
 2005ef0:	e0ffb217 	ldw	r3,-312(fp)
 2005ef4:	10c4b03a 	or	r2,r2,r3
 2005ef8:	103fee1e 	bne	r2,zero,2005eb4 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2005efc:	9880004c 	andi	r2,r19,1
 2005f00:	10005026 	beq	r2,zero,2006044 <___vfprintf_internal_r+0xf5c>
 2005f04:	90800003 	ldbu	r2,0(r18)
 2005f08:	10803fcc 	andi	r2,r2,255
 2005f0c:	1080201c 	xori	r2,r2,128
 2005f10:	10bfe004 	addi	r2,r2,-128
 2005f14:	10800c20 	cmpeqi	r2,r2,48
 2005f18:	10004a1e 	bne	r2,zero,2006044 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 2005f1c:	94bfffc4 	addi	r18,r18,-1
 2005f20:	00800c04 	movi	r2,48
 2005f24:	90800005 	stb	r2,0(r18)
					break;
 2005f28:	00004606 	br	2006044 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2005f2c:	e0bfb217 	ldw	r2,-312(fp)
 2005f30:	10000a1e 	bne	r2,zero,2005f5c <___vfprintf_internal_r+0xe74>
 2005f34:	e0bfb217 	ldw	r2,-312(fp)
 2005f38:	1000031e 	bne	r2,zero,2005f48 <___vfprintf_internal_r+0xe60>
 2005f3c:	e0bfb117 	ldw	r2,-316(fp)
 2005f40:	108002a8 	cmpgeui	r2,r2,10
 2005f44:	1000051e 	bne	r2,zero,2005f5c <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 2005f48:	94bfffc4 	addi	r18,r18,-1
 2005f4c:	e0bfb117 	ldw	r2,-316(fp)
 2005f50:	10800c04 	addi	r2,r2,48
 2005f54:	90800005 	stb	r2,0(r18)
						break;
 2005f58:	00003b06 	br	2006048 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2005f5c:	94bfffc4 	addi	r18,r18,-1
 2005f60:	e0bfb117 	ldw	r2,-316(fp)
 2005f64:	e0ffb217 	ldw	r3,-312(fp)
 2005f68:	01800284 	movi	r6,10
 2005f6c:	000f883a 	mov	r7,zero
 2005f70:	1009883a 	mov	r4,r2
 2005f74:	180b883a 	mov	r5,r3
 2005f78:	201167c0 	call	201167c <__umoddi3>
 2005f7c:	1009883a 	mov	r4,r2
 2005f80:	180b883a 	mov	r5,r3
 2005f84:	2005883a 	mov	r2,r4
 2005f88:	2807883a 	mov	r3,r5
 2005f8c:	10800c04 	addi	r2,r2,48
 2005f90:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2005f94:	e0bfb117 	ldw	r2,-316(fp)
 2005f98:	e0ffb217 	ldw	r3,-312(fp)
 2005f9c:	01800284 	movi	r6,10
 2005fa0:	000f883a 	mov	r7,zero
 2005fa4:	1009883a 	mov	r4,r2
 2005fa8:	180b883a 	mov	r5,r3
 2005fac:	20111040 	call	2011104 <__udivdi3>
 2005fb0:	1009883a 	mov	r4,r2
 2005fb4:	180b883a 	mov	r5,r3
 2005fb8:	e13fb115 	stw	r4,-316(fp)
 2005fbc:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 2005fc0:	e0bfb117 	ldw	r2,-316(fp)
 2005fc4:	e0ffb217 	ldw	r3,-312(fp)
 2005fc8:	10c4b03a 	or	r2,r2,r3
 2005fcc:	103fe31e 	bne	r2,zero,2005f5c <___vfprintf_internal_r+0xe74>
					break;
 2005fd0:	00001d06 	br	2006048 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 2005fd4:	94bfffc4 	addi	r18,r18,-1
 2005fd8:	e0bfb117 	ldw	r2,-316(fp)
 2005fdc:	108003cc 	andi	r2,r2,15
 2005fe0:	e0ffb717 	ldw	r3,-292(fp)
 2005fe4:	1885883a 	add	r2,r3,r2
 2005fe8:	10800003 	ldbu	r2,0(r2)
 2005fec:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 2005ff0:	e0bfb217 	ldw	r2,-312(fp)
 2005ff4:	1004973a 	slli	r2,r2,28
 2005ff8:	e0ffb117 	ldw	r3,-316(fp)
 2005ffc:	1806d13a 	srli	r3,r3,4
 2006000:	1884b03a 	or	r2,r3,r2
 2006004:	e0bfb115 	stw	r2,-316(fp)
 2006008:	e0bfb217 	ldw	r2,-312(fp)
 200600c:	1004d13a 	srli	r2,r2,4
 2006010:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2006014:	e0bfb117 	ldw	r2,-316(fp)
 2006018:	e0ffb217 	ldw	r3,-312(fp)
 200601c:	10c4b03a 	or	r2,r2,r3
 2006020:	103fec1e 	bne	r2,zero,2005fd4 <___vfprintf_internal_r+0xeec>
					break;
 2006024:	00000806 	br	2006048 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 2006028:	048080b4 	movhi	r18,514
 200602c:	94ba1304 	addi	r18,r18,-6068
					size = strlen (cp);
 2006030:	9009883a 	mov	r4,r18
 2006034:	2004eb40 	call	2004eb4 <strlen>
 2006038:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 200603c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2006040:	00001906 	br	20060a8 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2006044:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2006048:	00000706 	br	2006068 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200604c:	e0bfb303 	ldbu	r2,-308(fp)
 2006050:	1000051e 	bne	r2,zero,2006068 <___vfprintf_internal_r+0xf80>
 2006054:	9880004c 	andi	r2,r19,1
 2006058:	10000326 	beq	r2,zero,2006068 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 200605c:	94bfffc4 	addi	r18,r18,-1
 2006060:	00800c04 	movi	r2,48
 2006064:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 2006068:	e0bfdb04 	addi	r2,fp,-148
 200606c:	10800a04 	addi	r2,r2,40
 2006070:	1007883a 	mov	r3,r2
 2006074:	9005883a 	mov	r2,r18
 2006078:	1885c83a 	sub	r2,r3,r2
 200607c:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 2006080:	00000906 	br	20060a8 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2006084:	a003dc26 	beq	r20,zero,2006ff8 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2006088:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 200608c:	a005883a 	mov	r2,r20
 2006090:	90800005 	stb	r2,0(r18)
			size = 1;
 2006094:	00800044 	movi	r2,1
 2006098:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 200609c:	e03fc105 	stb	zero,-252(fp)
			break;
 20060a0:	00000106 	br	20060a8 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 20060a4:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 20060a8:	e0ffb417 	ldw	r3,-304(fp)
 20060ac:	e0bfb617 	ldw	r2,-296(fp)
 20060b0:	10c0010e 	bge	r2,r3,20060b8 <___vfprintf_internal_r+0xfd0>
 20060b4:	1805883a 	mov	r2,r3
 20060b8:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 20060bc:	e0bfc103 	ldbu	r2,-252(fp)
 20060c0:	10803fcc 	andi	r2,r2,255
 20060c4:	1080201c 	xori	r2,r2,128
 20060c8:	10bfe004 	addi	r2,r2,-128
 20060cc:	10000326 	beq	r2,zero,20060dc <___vfprintf_internal_r+0xff4>
			realsz++;
 20060d0:	e0bfb517 	ldw	r2,-300(fp)
 20060d4:	10800044 	addi	r2,r2,1
 20060d8:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 20060dc:	9880008c 	andi	r2,r19,2
 20060e0:	10000326 	beq	r2,zero,20060f0 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 20060e4:	e0bfb517 	ldw	r2,-300(fp)
 20060e8:	10800084 	addi	r2,r2,2
 20060ec:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 20060f0:	9880210c 	andi	r2,r19,132
 20060f4:	1000351e 	bne	r2,zero,20061cc <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 20060f8:	e0ffad17 	ldw	r3,-332(fp)
 20060fc:	e0bfb517 	ldw	r2,-300(fp)
 2006100:	18a1c83a 	sub	r16,r3,r2
 2006104:	0400310e 	bge	zero,r16,20061cc <___vfprintf_internal_r+0x10e4>
 2006108:	00001706 	br	2006168 <___vfprintf_internal_r+0x1080>
 200610c:	008080b4 	movhi	r2,514
 2006110:	10ba1a84 	addi	r2,r2,-6038
 2006114:	88800015 	stw	r2,0(r17)
 2006118:	00800404 	movi	r2,16
 200611c:	88800115 	stw	r2,4(r17)
 2006120:	e0bfca17 	ldw	r2,-216(fp)
 2006124:	10800404 	addi	r2,r2,16
 2006128:	e0bfca15 	stw	r2,-216(fp)
 200612c:	8c400204 	addi	r17,r17,8
 2006130:	e0bfc917 	ldw	r2,-220(fp)
 2006134:	10800044 	addi	r2,r2,1
 2006138:	e0bfc915 	stw	r2,-220(fp)
 200613c:	e0bfc917 	ldw	r2,-220(fp)
 2006140:	10800210 	cmplti	r2,r2,8
 2006144:	1000071e 	bne	r2,zero,2006164 <___vfprintf_internal_r+0x107c>
 2006148:	e0bfc804 	addi	r2,fp,-224
 200614c:	100d883a 	mov	r6,r2
 2006150:	e17fe717 	ldw	r5,-100(fp)
 2006154:	e13fe617 	ldw	r4,-104(fp)
 2006158:	200ef700 	call	200ef70 <__sprint_r>
 200615c:	1003b41e 	bne	r2,zero,2007030 <___vfprintf_internal_r+0x1f48>
 2006160:	e47fcb04 	addi	r17,fp,-212
 2006164:	843ffc04 	addi	r16,r16,-16
 2006168:	80800448 	cmpgei	r2,r16,17
 200616c:	103fe71e 	bne	r2,zero,200610c <___vfprintf_internal_r+0x1024>
 2006170:	008080b4 	movhi	r2,514
 2006174:	10ba1a84 	addi	r2,r2,-6038
 2006178:	88800015 	stw	r2,0(r17)
 200617c:	8005883a 	mov	r2,r16
 2006180:	88800115 	stw	r2,4(r17)
 2006184:	e0bfca17 	ldw	r2,-216(fp)
 2006188:	8007883a 	mov	r3,r16
 200618c:	10c5883a 	add	r2,r2,r3
 2006190:	e0bfca15 	stw	r2,-216(fp)
 2006194:	8c400204 	addi	r17,r17,8
 2006198:	e0bfc917 	ldw	r2,-220(fp)
 200619c:	10800044 	addi	r2,r2,1
 20061a0:	e0bfc915 	stw	r2,-220(fp)
 20061a4:	e0bfc917 	ldw	r2,-220(fp)
 20061a8:	10800210 	cmplti	r2,r2,8
 20061ac:	1000071e 	bne	r2,zero,20061cc <___vfprintf_internal_r+0x10e4>
 20061b0:	e0bfc804 	addi	r2,fp,-224
 20061b4:	100d883a 	mov	r6,r2
 20061b8:	e17fe717 	ldw	r5,-100(fp)
 20061bc:	e13fe617 	ldw	r4,-104(fp)
 20061c0:	200ef700 	call	200ef70 <__sprint_r>
 20061c4:	10039c1e 	bne	r2,zero,2007038 <___vfprintf_internal_r+0x1f50>
 20061c8:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 20061cc:	e0bfc103 	ldbu	r2,-252(fp)
 20061d0:	10803fcc 	andi	r2,r2,255
 20061d4:	1080201c 	xori	r2,r2,128
 20061d8:	10bfe004 	addi	r2,r2,-128
 20061dc:	10001526 	beq	r2,zero,2006234 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 20061e0:	e0bfc104 	addi	r2,fp,-252
 20061e4:	88800015 	stw	r2,0(r17)
 20061e8:	00800044 	movi	r2,1
 20061ec:	88800115 	stw	r2,4(r17)
 20061f0:	e0bfca17 	ldw	r2,-216(fp)
 20061f4:	10800044 	addi	r2,r2,1
 20061f8:	e0bfca15 	stw	r2,-216(fp)
 20061fc:	8c400204 	addi	r17,r17,8
 2006200:	e0bfc917 	ldw	r2,-220(fp)
 2006204:	10800044 	addi	r2,r2,1
 2006208:	e0bfc915 	stw	r2,-220(fp)
 200620c:	e0bfc917 	ldw	r2,-220(fp)
 2006210:	10800210 	cmplti	r2,r2,8
 2006214:	1000071e 	bne	r2,zero,2006234 <___vfprintf_internal_r+0x114c>
 2006218:	e0bfc804 	addi	r2,fp,-224
 200621c:	100d883a 	mov	r6,r2
 2006220:	e17fe717 	ldw	r5,-100(fp)
 2006224:	e13fe617 	ldw	r4,-104(fp)
 2006228:	200ef700 	call	200ef70 <__sprint_r>
 200622c:	1003841e 	bne	r2,zero,2007040 <___vfprintf_internal_r+0x1f58>
 2006230:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 2006234:	9880008c 	andi	r2,r19,2
 2006238:	10001526 	beq	r2,zero,2006290 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 200623c:	e0bfe504 	addi	r2,fp,-108
 2006240:	88800015 	stw	r2,0(r17)
 2006244:	00800084 	movi	r2,2
 2006248:	88800115 	stw	r2,4(r17)
 200624c:	e0bfca17 	ldw	r2,-216(fp)
 2006250:	10800084 	addi	r2,r2,2
 2006254:	e0bfca15 	stw	r2,-216(fp)
 2006258:	8c400204 	addi	r17,r17,8
 200625c:	e0bfc917 	ldw	r2,-220(fp)
 2006260:	10800044 	addi	r2,r2,1
 2006264:	e0bfc915 	stw	r2,-220(fp)
 2006268:	e0bfc917 	ldw	r2,-220(fp)
 200626c:	10800210 	cmplti	r2,r2,8
 2006270:	1000071e 	bne	r2,zero,2006290 <___vfprintf_internal_r+0x11a8>
 2006274:	e0bfc804 	addi	r2,fp,-224
 2006278:	100d883a 	mov	r6,r2
 200627c:	e17fe717 	ldw	r5,-100(fp)
 2006280:	e13fe617 	ldw	r4,-104(fp)
 2006284:	200ef700 	call	200ef70 <__sprint_r>
 2006288:	10036f1e 	bne	r2,zero,2007048 <___vfprintf_internal_r+0x1f60>
 200628c:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2006290:	9880210c 	andi	r2,r19,132
 2006294:	10802018 	cmpnei	r2,r2,128
 2006298:	1000351e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 200629c:	e0ffad17 	ldw	r3,-332(fp)
 20062a0:	e0bfb517 	ldw	r2,-300(fp)
 20062a4:	18a1c83a 	sub	r16,r3,r2
 20062a8:	0400310e 	bge	zero,r16,2006370 <___vfprintf_internal_r+0x1288>
 20062ac:	00001706 	br	200630c <___vfprintf_internal_r+0x1224>
 20062b0:	008080b4 	movhi	r2,514
 20062b4:	10ba1e84 	addi	r2,r2,-6022
 20062b8:	88800015 	stw	r2,0(r17)
 20062bc:	00800404 	movi	r2,16
 20062c0:	88800115 	stw	r2,4(r17)
 20062c4:	e0bfca17 	ldw	r2,-216(fp)
 20062c8:	10800404 	addi	r2,r2,16
 20062cc:	e0bfca15 	stw	r2,-216(fp)
 20062d0:	8c400204 	addi	r17,r17,8
 20062d4:	e0bfc917 	ldw	r2,-220(fp)
 20062d8:	10800044 	addi	r2,r2,1
 20062dc:	e0bfc915 	stw	r2,-220(fp)
 20062e0:	e0bfc917 	ldw	r2,-220(fp)
 20062e4:	10800210 	cmplti	r2,r2,8
 20062e8:	1000071e 	bne	r2,zero,2006308 <___vfprintf_internal_r+0x1220>
 20062ec:	e0bfc804 	addi	r2,fp,-224
 20062f0:	100d883a 	mov	r6,r2
 20062f4:	e17fe717 	ldw	r5,-100(fp)
 20062f8:	e13fe617 	ldw	r4,-104(fp)
 20062fc:	200ef700 	call	200ef70 <__sprint_r>
 2006300:	1003531e 	bne	r2,zero,2007050 <___vfprintf_internal_r+0x1f68>
 2006304:	e47fcb04 	addi	r17,fp,-212
 2006308:	843ffc04 	addi	r16,r16,-16
 200630c:	80800448 	cmpgei	r2,r16,17
 2006310:	103fe71e 	bne	r2,zero,20062b0 <___vfprintf_internal_r+0x11c8>
 2006314:	008080b4 	movhi	r2,514
 2006318:	10ba1e84 	addi	r2,r2,-6022
 200631c:	88800015 	stw	r2,0(r17)
 2006320:	8005883a 	mov	r2,r16
 2006324:	88800115 	stw	r2,4(r17)
 2006328:	e0bfca17 	ldw	r2,-216(fp)
 200632c:	8007883a 	mov	r3,r16
 2006330:	10c5883a 	add	r2,r2,r3
 2006334:	e0bfca15 	stw	r2,-216(fp)
 2006338:	8c400204 	addi	r17,r17,8
 200633c:	e0bfc917 	ldw	r2,-220(fp)
 2006340:	10800044 	addi	r2,r2,1
 2006344:	e0bfc915 	stw	r2,-220(fp)
 2006348:	e0bfc917 	ldw	r2,-220(fp)
 200634c:	10800210 	cmplti	r2,r2,8
 2006350:	1000071e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x1288>
 2006354:	e0bfc804 	addi	r2,fp,-224
 2006358:	100d883a 	mov	r6,r2
 200635c:	e17fe717 	ldw	r5,-100(fp)
 2006360:	e13fe617 	ldw	r4,-104(fp)
 2006364:	200ef700 	call	200ef70 <__sprint_r>
 2006368:	10033b1e 	bne	r2,zero,2007058 <___vfprintf_internal_r+0x1f70>
 200636c:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2006370:	e0ffb417 	ldw	r3,-304(fp)
 2006374:	e0bfb617 	ldw	r2,-296(fp)
 2006378:	18a1c83a 	sub	r16,r3,r2
 200637c:	0400310e 	bge	zero,r16,2006444 <___vfprintf_internal_r+0x135c>
 2006380:	00001706 	br	20063e0 <___vfprintf_internal_r+0x12f8>
 2006384:	008080b4 	movhi	r2,514
 2006388:	10ba1e84 	addi	r2,r2,-6022
 200638c:	88800015 	stw	r2,0(r17)
 2006390:	00800404 	movi	r2,16
 2006394:	88800115 	stw	r2,4(r17)
 2006398:	e0bfca17 	ldw	r2,-216(fp)
 200639c:	10800404 	addi	r2,r2,16
 20063a0:	e0bfca15 	stw	r2,-216(fp)
 20063a4:	8c400204 	addi	r17,r17,8
 20063a8:	e0bfc917 	ldw	r2,-220(fp)
 20063ac:	10800044 	addi	r2,r2,1
 20063b0:	e0bfc915 	stw	r2,-220(fp)
 20063b4:	e0bfc917 	ldw	r2,-220(fp)
 20063b8:	10800210 	cmplti	r2,r2,8
 20063bc:	1000071e 	bne	r2,zero,20063dc <___vfprintf_internal_r+0x12f4>
 20063c0:	e0bfc804 	addi	r2,fp,-224
 20063c4:	100d883a 	mov	r6,r2
 20063c8:	e17fe717 	ldw	r5,-100(fp)
 20063cc:	e13fe617 	ldw	r4,-104(fp)
 20063d0:	200ef700 	call	200ef70 <__sprint_r>
 20063d4:	1003221e 	bne	r2,zero,2007060 <___vfprintf_internal_r+0x1f78>
 20063d8:	e47fcb04 	addi	r17,fp,-212
 20063dc:	843ffc04 	addi	r16,r16,-16
 20063e0:	80800448 	cmpgei	r2,r16,17
 20063e4:	103fe71e 	bne	r2,zero,2006384 <___vfprintf_internal_r+0x129c>
 20063e8:	008080b4 	movhi	r2,514
 20063ec:	10ba1e84 	addi	r2,r2,-6022
 20063f0:	88800015 	stw	r2,0(r17)
 20063f4:	8005883a 	mov	r2,r16
 20063f8:	88800115 	stw	r2,4(r17)
 20063fc:	e0bfca17 	ldw	r2,-216(fp)
 2006400:	8007883a 	mov	r3,r16
 2006404:	10c5883a 	add	r2,r2,r3
 2006408:	e0bfca15 	stw	r2,-216(fp)
 200640c:	8c400204 	addi	r17,r17,8
 2006410:	e0bfc917 	ldw	r2,-220(fp)
 2006414:	10800044 	addi	r2,r2,1
 2006418:	e0bfc915 	stw	r2,-220(fp)
 200641c:	e0bfc917 	ldw	r2,-220(fp)
 2006420:	10800210 	cmplti	r2,r2,8
 2006424:	1000071e 	bne	r2,zero,2006444 <___vfprintf_internal_r+0x135c>
 2006428:	e0bfc804 	addi	r2,fp,-224
 200642c:	100d883a 	mov	r6,r2
 2006430:	e17fe717 	ldw	r5,-100(fp)
 2006434:	e13fe617 	ldw	r4,-104(fp)
 2006438:	200ef700 	call	200ef70 <__sprint_r>
 200643c:	10030a1e 	bne	r2,zero,2007068 <___vfprintf_internal_r+0x1f80>
 2006440:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 2006444:	9880400c 	andi	r2,r19,256
 2006448:	1000161e 	bne	r2,zero,20064a4 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 200644c:	8c800015 	stw	r18,0(r17)
 2006450:	e0bfb617 	ldw	r2,-296(fp)
 2006454:	88800115 	stw	r2,4(r17)
 2006458:	e0ffca17 	ldw	r3,-216(fp)
 200645c:	e0bfb617 	ldw	r2,-296(fp)
 2006460:	1885883a 	add	r2,r3,r2
 2006464:	e0bfca15 	stw	r2,-216(fp)
 2006468:	8c400204 	addi	r17,r17,8
 200646c:	e0bfc917 	ldw	r2,-220(fp)
 2006470:	10800044 	addi	r2,r2,1
 2006474:	e0bfc915 	stw	r2,-220(fp)
 2006478:	e0bfc917 	ldw	r2,-220(fp)
 200647c:	10800210 	cmplti	r2,r2,8
 2006480:	10028c1e 	bne	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
 2006484:	e0bfc804 	addi	r2,fp,-224
 2006488:	100d883a 	mov	r6,r2
 200648c:	e17fe717 	ldw	r5,-100(fp)
 2006490:	e13fe617 	ldw	r4,-104(fp)
 2006494:	200ef700 	call	200ef70 <__sprint_r>
 2006498:	1002f51e 	bne	r2,zero,2007070 <___vfprintf_internal_r+0x1f88>
 200649c:	e47fcb04 	addi	r17,fp,-212
 20064a0:	00028406 	br	2006eb4 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 20064a4:	a0801990 	cmplti	r2,r20,102
 20064a8:	1001d11e 	bne	r2,zero,2006bf0 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 20064ac:	e0bfc217 	ldw	r2,-248(fp)
 20064b0:	e0ffc317 	ldw	r3,-244(fp)
 20064b4:	000d883a 	mov	r6,zero
 20064b8:	000f883a 	mov	r7,zero
 20064bc:	1009883a 	mov	r4,r2
 20064c0:	180b883a 	mov	r5,r3
 20064c4:	20124600 	call	2012460 <__eqdf2>
 20064c8:	1000661e 	bne	r2,zero,2006664 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 20064cc:	008080b4 	movhi	r2,514
 20064d0:	10ba1a04 	addi	r2,r2,-6040
 20064d4:	88800015 	stw	r2,0(r17)
 20064d8:	00800044 	movi	r2,1
 20064dc:	88800115 	stw	r2,4(r17)
 20064e0:	e0bfca17 	ldw	r2,-216(fp)
 20064e4:	10800044 	addi	r2,r2,1
 20064e8:	e0bfca15 	stw	r2,-216(fp)
 20064ec:	8c400204 	addi	r17,r17,8
 20064f0:	e0bfc917 	ldw	r2,-220(fp)
 20064f4:	10800044 	addi	r2,r2,1
 20064f8:	e0bfc915 	stw	r2,-220(fp)
 20064fc:	e0bfc917 	ldw	r2,-220(fp)
 2006500:	10800210 	cmplti	r2,r2,8
 2006504:	1000071e 	bne	r2,zero,2006524 <___vfprintf_internal_r+0x143c>
 2006508:	e0bfc804 	addi	r2,fp,-224
 200650c:	100d883a 	mov	r6,r2
 2006510:	e17fe717 	ldw	r5,-100(fp)
 2006514:	e13fe617 	ldw	r4,-104(fp)
 2006518:	200ef700 	call	200ef70 <__sprint_r>
 200651c:	1002d61e 	bne	r2,zero,2007078 <___vfprintf_internal_r+0x1f90>
 2006520:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 2006524:	e0ffc417 	ldw	r3,-240(fp)
 2006528:	e0bfc717 	ldw	r2,-228(fp)
 200652c:	18800216 	blt	r3,r2,2006538 <___vfprintf_internal_r+0x1450>
 2006530:	9880004c 	andi	r2,r19,1
 2006534:	10025f26 	beq	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2006538:	e0bfbb17 	ldw	r2,-276(fp)
 200653c:	88800015 	stw	r2,0(r17)
 2006540:	e0bfbc17 	ldw	r2,-272(fp)
 2006544:	88800115 	stw	r2,4(r17)
 2006548:	e0ffca17 	ldw	r3,-216(fp)
 200654c:	e0bfbc17 	ldw	r2,-272(fp)
 2006550:	1885883a 	add	r2,r3,r2
 2006554:	e0bfca15 	stw	r2,-216(fp)
 2006558:	8c400204 	addi	r17,r17,8
 200655c:	e0bfc917 	ldw	r2,-220(fp)
 2006560:	10800044 	addi	r2,r2,1
 2006564:	e0bfc915 	stw	r2,-220(fp)
 2006568:	e0bfc917 	ldw	r2,-220(fp)
 200656c:	10800210 	cmplti	r2,r2,8
 2006570:	1000071e 	bne	r2,zero,2006590 <___vfprintf_internal_r+0x14a8>
 2006574:	e0bfc804 	addi	r2,fp,-224
 2006578:	100d883a 	mov	r6,r2
 200657c:	e17fe717 	ldw	r5,-100(fp)
 2006580:	e13fe617 	ldw	r4,-104(fp)
 2006584:	200ef700 	call	200ef70 <__sprint_r>
 2006588:	1002bd1e 	bne	r2,zero,2007080 <___vfprintf_internal_r+0x1f98>
 200658c:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 2006590:	e0bfc717 	ldw	r2,-228(fp)
 2006594:	143fffc4 	addi	r16,r2,-1
 2006598:	0402460e 	bge	zero,r16,2006eb4 <___vfprintf_internal_r+0x1dcc>
 200659c:	00001706 	br	20065fc <___vfprintf_internal_r+0x1514>
 20065a0:	008080b4 	movhi	r2,514
 20065a4:	10ba1e84 	addi	r2,r2,-6022
 20065a8:	88800015 	stw	r2,0(r17)
 20065ac:	00800404 	movi	r2,16
 20065b0:	88800115 	stw	r2,4(r17)
 20065b4:	e0bfca17 	ldw	r2,-216(fp)
 20065b8:	10800404 	addi	r2,r2,16
 20065bc:	e0bfca15 	stw	r2,-216(fp)
 20065c0:	8c400204 	addi	r17,r17,8
 20065c4:	e0bfc917 	ldw	r2,-220(fp)
 20065c8:	10800044 	addi	r2,r2,1
 20065cc:	e0bfc915 	stw	r2,-220(fp)
 20065d0:	e0bfc917 	ldw	r2,-220(fp)
 20065d4:	10800210 	cmplti	r2,r2,8
 20065d8:	1000071e 	bne	r2,zero,20065f8 <___vfprintf_internal_r+0x1510>
 20065dc:	e0bfc804 	addi	r2,fp,-224
 20065e0:	100d883a 	mov	r6,r2
 20065e4:	e17fe717 	ldw	r5,-100(fp)
 20065e8:	e13fe617 	ldw	r4,-104(fp)
 20065ec:	200ef700 	call	200ef70 <__sprint_r>
 20065f0:	1002a51e 	bne	r2,zero,2007088 <___vfprintf_internal_r+0x1fa0>
 20065f4:	e47fcb04 	addi	r17,fp,-212
 20065f8:	843ffc04 	addi	r16,r16,-16
 20065fc:	80800448 	cmpgei	r2,r16,17
 2006600:	103fe71e 	bne	r2,zero,20065a0 <___vfprintf_internal_r+0x14b8>
 2006604:	008080b4 	movhi	r2,514
 2006608:	10ba1e84 	addi	r2,r2,-6022
 200660c:	88800015 	stw	r2,0(r17)
 2006610:	8005883a 	mov	r2,r16
 2006614:	88800115 	stw	r2,4(r17)
 2006618:	e0bfca17 	ldw	r2,-216(fp)
 200661c:	8007883a 	mov	r3,r16
 2006620:	10c5883a 	add	r2,r2,r3
 2006624:	e0bfca15 	stw	r2,-216(fp)
 2006628:	8c400204 	addi	r17,r17,8
 200662c:	e0bfc917 	ldw	r2,-220(fp)
 2006630:	10800044 	addi	r2,r2,1
 2006634:	e0bfc915 	stw	r2,-220(fp)
 2006638:	e0bfc917 	ldw	r2,-220(fp)
 200663c:	10800210 	cmplti	r2,r2,8
 2006640:	10021c1e 	bne	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
 2006644:	e0bfc804 	addi	r2,fp,-224
 2006648:	100d883a 	mov	r6,r2
 200664c:	e17fe717 	ldw	r5,-100(fp)
 2006650:	e13fe617 	ldw	r4,-104(fp)
 2006654:	200ef700 	call	200ef70 <__sprint_r>
 2006658:	10028d1e 	bne	r2,zero,2007090 <___vfprintf_internal_r+0x1fa8>
 200665c:	e47fcb04 	addi	r17,fp,-212
 2006660:	00021406 	br	2006eb4 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 2006664:	e0bfc417 	ldw	r2,-240(fp)
 2006668:	00807c16 	blt	zero,r2,200685c <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 200666c:	008080b4 	movhi	r2,514
 2006670:	10ba1a04 	addi	r2,r2,-6040
 2006674:	88800015 	stw	r2,0(r17)
 2006678:	00800044 	movi	r2,1
 200667c:	88800115 	stw	r2,4(r17)
 2006680:	e0bfca17 	ldw	r2,-216(fp)
 2006684:	10800044 	addi	r2,r2,1
 2006688:	e0bfca15 	stw	r2,-216(fp)
 200668c:	8c400204 	addi	r17,r17,8
 2006690:	e0bfc917 	ldw	r2,-220(fp)
 2006694:	10800044 	addi	r2,r2,1
 2006698:	e0bfc915 	stw	r2,-220(fp)
 200669c:	e0bfc917 	ldw	r2,-220(fp)
 20066a0:	10800210 	cmplti	r2,r2,8
 20066a4:	1000071e 	bne	r2,zero,20066c4 <___vfprintf_internal_r+0x15dc>
 20066a8:	e0bfc804 	addi	r2,fp,-224
 20066ac:	100d883a 	mov	r6,r2
 20066b0:	e17fe717 	ldw	r5,-100(fp)
 20066b4:	e13fe617 	ldw	r4,-104(fp)
 20066b8:	200ef700 	call	200ef70 <__sprint_r>
 20066bc:	1002761e 	bne	r2,zero,2007098 <___vfprintf_internal_r+0x1fb0>
 20066c0:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 20066c4:	e0bfc417 	ldw	r2,-240(fp)
 20066c8:	1000041e 	bne	r2,zero,20066dc <___vfprintf_internal_r+0x15f4>
 20066cc:	e0bfc717 	ldw	r2,-228(fp)
 20066d0:	1000021e 	bne	r2,zero,20066dc <___vfprintf_internal_r+0x15f4>
 20066d4:	9880004c 	andi	r2,r19,1
 20066d8:	1001f626 	beq	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 20066dc:	e0bfbb17 	ldw	r2,-276(fp)
 20066e0:	88800015 	stw	r2,0(r17)
 20066e4:	e0bfbc17 	ldw	r2,-272(fp)
 20066e8:	88800115 	stw	r2,4(r17)
 20066ec:	e0ffca17 	ldw	r3,-216(fp)
 20066f0:	e0bfbc17 	ldw	r2,-272(fp)
 20066f4:	1885883a 	add	r2,r3,r2
 20066f8:	e0bfca15 	stw	r2,-216(fp)
 20066fc:	8c400204 	addi	r17,r17,8
 2006700:	e0bfc917 	ldw	r2,-220(fp)
 2006704:	10800044 	addi	r2,r2,1
 2006708:	e0bfc915 	stw	r2,-220(fp)
 200670c:	e0bfc917 	ldw	r2,-220(fp)
 2006710:	10800210 	cmplti	r2,r2,8
 2006714:	1000071e 	bne	r2,zero,2006734 <___vfprintf_internal_r+0x164c>
 2006718:	e0bfc804 	addi	r2,fp,-224
 200671c:	100d883a 	mov	r6,r2
 2006720:	e17fe717 	ldw	r5,-100(fp)
 2006724:	e13fe617 	ldw	r4,-104(fp)
 2006728:	200ef700 	call	200ef70 <__sprint_r>
 200672c:	10025c1e 	bne	r2,zero,20070a0 <___vfprintf_internal_r+0x1fb8>
 2006730:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 2006734:	e0bfc417 	ldw	r2,-240(fp)
 2006738:	00a1c83a 	sub	r16,zero,r2
 200673c:	0400310e 	bge	zero,r16,2006804 <___vfprintf_internal_r+0x171c>
 2006740:	00001706 	br	20067a0 <___vfprintf_internal_r+0x16b8>
 2006744:	008080b4 	movhi	r2,514
 2006748:	10ba1e84 	addi	r2,r2,-6022
 200674c:	88800015 	stw	r2,0(r17)
 2006750:	00800404 	movi	r2,16
 2006754:	88800115 	stw	r2,4(r17)
 2006758:	e0bfca17 	ldw	r2,-216(fp)
 200675c:	10800404 	addi	r2,r2,16
 2006760:	e0bfca15 	stw	r2,-216(fp)
 2006764:	8c400204 	addi	r17,r17,8
 2006768:	e0bfc917 	ldw	r2,-220(fp)
 200676c:	10800044 	addi	r2,r2,1
 2006770:	e0bfc915 	stw	r2,-220(fp)
 2006774:	e0bfc917 	ldw	r2,-220(fp)
 2006778:	10800210 	cmplti	r2,r2,8
 200677c:	1000071e 	bne	r2,zero,200679c <___vfprintf_internal_r+0x16b4>
 2006780:	e0bfc804 	addi	r2,fp,-224
 2006784:	100d883a 	mov	r6,r2
 2006788:	e17fe717 	ldw	r5,-100(fp)
 200678c:	e13fe617 	ldw	r4,-104(fp)
 2006790:	200ef700 	call	200ef70 <__sprint_r>
 2006794:	1002441e 	bne	r2,zero,20070a8 <___vfprintf_internal_r+0x1fc0>
 2006798:	e47fcb04 	addi	r17,fp,-212
 200679c:	843ffc04 	addi	r16,r16,-16
 20067a0:	80800448 	cmpgei	r2,r16,17
 20067a4:	103fe71e 	bne	r2,zero,2006744 <___vfprintf_internal_r+0x165c>
 20067a8:	008080b4 	movhi	r2,514
 20067ac:	10ba1e84 	addi	r2,r2,-6022
 20067b0:	88800015 	stw	r2,0(r17)
 20067b4:	8005883a 	mov	r2,r16
 20067b8:	88800115 	stw	r2,4(r17)
 20067bc:	e0bfca17 	ldw	r2,-216(fp)
 20067c0:	8007883a 	mov	r3,r16
 20067c4:	10c5883a 	add	r2,r2,r3
 20067c8:	e0bfca15 	stw	r2,-216(fp)
 20067cc:	8c400204 	addi	r17,r17,8
 20067d0:	e0bfc917 	ldw	r2,-220(fp)
 20067d4:	10800044 	addi	r2,r2,1
 20067d8:	e0bfc915 	stw	r2,-220(fp)
 20067dc:	e0bfc917 	ldw	r2,-220(fp)
 20067e0:	10800210 	cmplti	r2,r2,8
 20067e4:	1000071e 	bne	r2,zero,2006804 <___vfprintf_internal_r+0x171c>
 20067e8:	e0bfc804 	addi	r2,fp,-224
 20067ec:	100d883a 	mov	r6,r2
 20067f0:	e17fe717 	ldw	r5,-100(fp)
 20067f4:	e13fe617 	ldw	r4,-104(fp)
 20067f8:	200ef700 	call	200ef70 <__sprint_r>
 20067fc:	10022c1e 	bne	r2,zero,20070b0 <___vfprintf_internal_r+0x1fc8>
 2006800:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 2006804:	8c800015 	stw	r18,0(r17)
 2006808:	e0bfc717 	ldw	r2,-228(fp)
 200680c:	88800115 	stw	r2,4(r17)
 2006810:	e0bfca17 	ldw	r2,-216(fp)
 2006814:	e0ffc717 	ldw	r3,-228(fp)
 2006818:	10c5883a 	add	r2,r2,r3
 200681c:	e0bfca15 	stw	r2,-216(fp)
 2006820:	8c400204 	addi	r17,r17,8
 2006824:	e0bfc917 	ldw	r2,-220(fp)
 2006828:	10800044 	addi	r2,r2,1
 200682c:	e0bfc915 	stw	r2,-220(fp)
 2006830:	e0bfc917 	ldw	r2,-220(fp)
 2006834:	10800210 	cmplti	r2,r2,8
 2006838:	10019e1e 	bne	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
 200683c:	e0bfc804 	addi	r2,fp,-224
 2006840:	100d883a 	mov	r6,r2
 2006844:	e17fe717 	ldw	r5,-100(fp)
 2006848:	e13fe617 	ldw	r4,-104(fp)
 200684c:	200ef700 	call	200ef70 <__sprint_r>
 2006850:	1002191e 	bne	r2,zero,20070b8 <___vfprintf_internal_r+0x1fd0>
 2006854:	e47fcb04 	addi	r17,fp,-212
 2006858:	00019606 	br	2006eb4 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 200685c:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 2006860:	e0bfc717 	ldw	r2,-228(fp)
 2006864:	1007883a 	mov	r3,r2
 2006868:	e0bfc017 	ldw	r2,-256(fp)
 200686c:	10c5883a 	add	r2,r2,r3
 2006870:	1007883a 	mov	r3,r2
 2006874:	9005883a 	mov	r2,r18
 2006878:	1885c83a 	sub	r2,r3,r2
 200687c:	e0bfb915 	stw	r2,-284(fp)
 2006880:	e0bfb917 	ldw	r2,-284(fp)
 2006884:	e0ffb017 	ldw	r3,-320(fp)
 2006888:	1880020e 	bge	r3,r2,2006894 <___vfprintf_internal_r+0x17ac>
 200688c:	e0bfb017 	ldw	r2,-320(fp)
 2006890:	e0bfb915 	stw	r2,-284(fp)
 2006894:	e0bfb917 	ldw	r2,-284(fp)
 2006898:	0080150e 	bge	zero,r2,20068f0 <___vfprintf_internal_r+0x1808>
 200689c:	8c800015 	stw	r18,0(r17)
 20068a0:	e0bfb917 	ldw	r2,-284(fp)
 20068a4:	88800115 	stw	r2,4(r17)
 20068a8:	e0ffca17 	ldw	r3,-216(fp)
 20068ac:	e0bfb917 	ldw	r2,-284(fp)
 20068b0:	1885883a 	add	r2,r3,r2
 20068b4:	e0bfca15 	stw	r2,-216(fp)
 20068b8:	8c400204 	addi	r17,r17,8
 20068bc:	e0bfc917 	ldw	r2,-220(fp)
 20068c0:	10800044 	addi	r2,r2,1
 20068c4:	e0bfc915 	stw	r2,-220(fp)
 20068c8:	e0bfc917 	ldw	r2,-220(fp)
 20068cc:	10800210 	cmplti	r2,r2,8
 20068d0:	1000071e 	bne	r2,zero,20068f0 <___vfprintf_internal_r+0x1808>
 20068d4:	e0bfc804 	addi	r2,fp,-224
 20068d8:	100d883a 	mov	r6,r2
 20068dc:	e17fe717 	ldw	r5,-100(fp)
 20068e0:	e13fe617 	ldw	r4,-104(fp)
 20068e4:	200ef700 	call	200ef70 <__sprint_r>
 20068e8:	1001f51e 	bne	r2,zero,20070c0 <___vfprintf_internal_r+0x1fd8>
 20068ec:	e47fcb04 	addi	r17,fp,-212
 20068f0:	e0bfb917 	ldw	r2,-284(fp)
 20068f4:	1000010e 	bge	r2,zero,20068fc <___vfprintf_internal_r+0x1814>
 20068f8:	0005883a 	mov	r2,zero
 20068fc:	e0ffb017 	ldw	r3,-320(fp)
 2006900:	1885c83a 	sub	r2,r3,r2
 2006904:	e0bfb915 	stw	r2,-284(fp)
 2006908:	e0bfb917 	ldw	r2,-284(fp)
 200690c:	0080340e 	bge	zero,r2,20069e0 <___vfprintf_internal_r+0x18f8>
 2006910:	00001906 	br	2006978 <___vfprintf_internal_r+0x1890>
 2006914:	008080b4 	movhi	r2,514
 2006918:	10ba1e84 	addi	r2,r2,-6022
 200691c:	88800015 	stw	r2,0(r17)
 2006920:	00800404 	movi	r2,16
 2006924:	88800115 	stw	r2,4(r17)
 2006928:	e0bfca17 	ldw	r2,-216(fp)
 200692c:	10800404 	addi	r2,r2,16
 2006930:	e0bfca15 	stw	r2,-216(fp)
 2006934:	8c400204 	addi	r17,r17,8
 2006938:	e0bfc917 	ldw	r2,-220(fp)
 200693c:	10800044 	addi	r2,r2,1
 2006940:	e0bfc915 	stw	r2,-220(fp)
 2006944:	e0bfc917 	ldw	r2,-220(fp)
 2006948:	10800210 	cmplti	r2,r2,8
 200694c:	1000071e 	bne	r2,zero,200696c <___vfprintf_internal_r+0x1884>
 2006950:	e0bfc804 	addi	r2,fp,-224
 2006954:	100d883a 	mov	r6,r2
 2006958:	e17fe717 	ldw	r5,-100(fp)
 200695c:	e13fe617 	ldw	r4,-104(fp)
 2006960:	200ef700 	call	200ef70 <__sprint_r>
 2006964:	1001d81e 	bne	r2,zero,20070c8 <___vfprintf_internal_r+0x1fe0>
 2006968:	e47fcb04 	addi	r17,fp,-212
 200696c:	e0bfb917 	ldw	r2,-284(fp)
 2006970:	10bffc04 	addi	r2,r2,-16
 2006974:	e0bfb915 	stw	r2,-284(fp)
 2006978:	e0bfb917 	ldw	r2,-284(fp)
 200697c:	10800448 	cmpgei	r2,r2,17
 2006980:	103fe41e 	bne	r2,zero,2006914 <___vfprintf_internal_r+0x182c>
 2006984:	008080b4 	movhi	r2,514
 2006988:	10ba1e84 	addi	r2,r2,-6022
 200698c:	88800015 	stw	r2,0(r17)
 2006990:	e0bfb917 	ldw	r2,-284(fp)
 2006994:	88800115 	stw	r2,4(r17)
 2006998:	e0ffca17 	ldw	r3,-216(fp)
 200699c:	e0bfb917 	ldw	r2,-284(fp)
 20069a0:	1885883a 	add	r2,r3,r2
 20069a4:	e0bfca15 	stw	r2,-216(fp)
 20069a8:	8c400204 	addi	r17,r17,8
 20069ac:	e0bfc917 	ldw	r2,-220(fp)
 20069b0:	10800044 	addi	r2,r2,1
 20069b4:	e0bfc915 	stw	r2,-220(fp)
 20069b8:	e0bfc917 	ldw	r2,-220(fp)
 20069bc:	10800210 	cmplti	r2,r2,8
 20069c0:	1000071e 	bne	r2,zero,20069e0 <___vfprintf_internal_r+0x18f8>
 20069c4:	e0bfc804 	addi	r2,fp,-224
 20069c8:	100d883a 	mov	r6,r2
 20069cc:	e17fe717 	ldw	r5,-100(fp)
 20069d0:	e13fe617 	ldw	r4,-104(fp)
 20069d4:	200ef700 	call	200ef70 <__sprint_r>
 20069d8:	1001bd1e 	bne	r2,zero,20070d0 <___vfprintf_internal_r+0x1fe8>
 20069dc:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 20069e0:	e0bfb017 	ldw	r2,-320(fp)
 20069e4:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 20069e8:	e0ffc417 	ldw	r3,-240(fp)
 20069ec:	e0bfc717 	ldw	r2,-228(fp)
 20069f0:	18800216 	blt	r3,r2,20069fc <___vfprintf_internal_r+0x1914>
 20069f4:	9880004c 	andi	r2,r19,1
 20069f8:	10001626 	beq	r2,zero,2006a54 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 20069fc:	e0bfbb17 	ldw	r2,-276(fp)
 2006a00:	88800015 	stw	r2,0(r17)
 2006a04:	e0bfbc17 	ldw	r2,-272(fp)
 2006a08:	88800115 	stw	r2,4(r17)
 2006a0c:	e0ffca17 	ldw	r3,-216(fp)
 2006a10:	e0bfbc17 	ldw	r2,-272(fp)
 2006a14:	1885883a 	add	r2,r3,r2
 2006a18:	e0bfca15 	stw	r2,-216(fp)
 2006a1c:	8c400204 	addi	r17,r17,8
 2006a20:	e0bfc917 	ldw	r2,-220(fp)
 2006a24:	10800044 	addi	r2,r2,1
 2006a28:	e0bfc915 	stw	r2,-220(fp)
 2006a2c:	e0bfc917 	ldw	r2,-220(fp)
 2006a30:	10800210 	cmplti	r2,r2,8
 2006a34:	1000071e 	bne	r2,zero,2006a54 <___vfprintf_internal_r+0x196c>
 2006a38:	e0bfc804 	addi	r2,fp,-224
 2006a3c:	100d883a 	mov	r6,r2
 2006a40:	e17fe717 	ldw	r5,-100(fp)
 2006a44:	e13fe617 	ldw	r4,-104(fp)
 2006a48:	200ef700 	call	200ef70 <__sprint_r>
 2006a4c:	1001a21e 	bne	r2,zero,20070d8 <___vfprintf_internal_r+0x1ff0>
 2006a50:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 2006a54:	e0bfc717 	ldw	r2,-228(fp)
 2006a58:	1007883a 	mov	r3,r2
 2006a5c:	e0bfc017 	ldw	r2,-256(fp)
 2006a60:	10c5883a 	add	r2,r2,r3
 2006a64:	1007883a 	mov	r3,r2
 2006a68:	9005883a 	mov	r2,r18
 2006a6c:	1885c83a 	sub	r2,r3,r2
 2006a70:	e0bfba15 	stw	r2,-280(fp)
 2006a74:	e0ffc717 	ldw	r3,-228(fp)
 2006a78:	e0bfc417 	ldw	r2,-240(fp)
 2006a7c:	1887c83a 	sub	r3,r3,r2
 2006a80:	e0bfba17 	ldw	r2,-280(fp)
 2006a84:	1880040e 	bge	r3,r2,2006a98 <___vfprintf_internal_r+0x19b0>
 2006a88:	e0ffc717 	ldw	r3,-228(fp)
 2006a8c:	e0bfc417 	ldw	r2,-240(fp)
 2006a90:	1885c83a 	sub	r2,r3,r2
 2006a94:	e0bfba15 	stw	r2,-280(fp)
 2006a98:	e0bfba17 	ldw	r2,-280(fp)
 2006a9c:	0080150e 	bge	zero,r2,2006af4 <___vfprintf_internal_r+0x1a0c>
 2006aa0:	8c800015 	stw	r18,0(r17)
 2006aa4:	e0bfba17 	ldw	r2,-280(fp)
 2006aa8:	88800115 	stw	r2,4(r17)
 2006aac:	e0ffca17 	ldw	r3,-216(fp)
 2006ab0:	e0bfba17 	ldw	r2,-280(fp)
 2006ab4:	1885883a 	add	r2,r3,r2
 2006ab8:	e0bfca15 	stw	r2,-216(fp)
 2006abc:	8c400204 	addi	r17,r17,8
 2006ac0:	e0bfc917 	ldw	r2,-220(fp)
 2006ac4:	10800044 	addi	r2,r2,1
 2006ac8:	e0bfc915 	stw	r2,-220(fp)
 2006acc:	e0bfc917 	ldw	r2,-220(fp)
 2006ad0:	10800210 	cmplti	r2,r2,8
 2006ad4:	1000071e 	bne	r2,zero,2006af4 <___vfprintf_internal_r+0x1a0c>
 2006ad8:	e0bfc804 	addi	r2,fp,-224
 2006adc:	100d883a 	mov	r6,r2
 2006ae0:	e17fe717 	ldw	r5,-100(fp)
 2006ae4:	e13fe617 	ldw	r4,-104(fp)
 2006ae8:	200ef700 	call	200ef70 <__sprint_r>
 2006aec:	10017c1e 	bne	r2,zero,20070e0 <___vfprintf_internal_r+0x1ff8>
 2006af0:	e47fcb04 	addi	r17,fp,-212
 2006af4:	e0ffc717 	ldw	r3,-228(fp)
 2006af8:	e0bfc417 	ldw	r2,-240(fp)
 2006afc:	1887c83a 	sub	r3,r3,r2
 2006b00:	e0bfba17 	ldw	r2,-280(fp)
 2006b04:	1000010e 	bge	r2,zero,2006b0c <___vfprintf_internal_r+0x1a24>
 2006b08:	0005883a 	mov	r2,zero
 2006b0c:	1885c83a 	sub	r2,r3,r2
 2006b10:	e0bfba15 	stw	r2,-280(fp)
 2006b14:	e0bfba17 	ldw	r2,-280(fp)
 2006b18:	0080e60e 	bge	zero,r2,2006eb4 <___vfprintf_internal_r+0x1dcc>
 2006b1c:	00001906 	br	2006b84 <___vfprintf_internal_r+0x1a9c>
 2006b20:	008080b4 	movhi	r2,514
 2006b24:	10ba1e84 	addi	r2,r2,-6022
 2006b28:	88800015 	stw	r2,0(r17)
 2006b2c:	00800404 	movi	r2,16
 2006b30:	88800115 	stw	r2,4(r17)
 2006b34:	e0bfca17 	ldw	r2,-216(fp)
 2006b38:	10800404 	addi	r2,r2,16
 2006b3c:	e0bfca15 	stw	r2,-216(fp)
 2006b40:	8c400204 	addi	r17,r17,8
 2006b44:	e0bfc917 	ldw	r2,-220(fp)
 2006b48:	10800044 	addi	r2,r2,1
 2006b4c:	e0bfc915 	stw	r2,-220(fp)
 2006b50:	e0bfc917 	ldw	r2,-220(fp)
 2006b54:	10800210 	cmplti	r2,r2,8
 2006b58:	1000071e 	bne	r2,zero,2006b78 <___vfprintf_internal_r+0x1a90>
 2006b5c:	e0bfc804 	addi	r2,fp,-224
 2006b60:	100d883a 	mov	r6,r2
 2006b64:	e17fe717 	ldw	r5,-100(fp)
 2006b68:	e13fe617 	ldw	r4,-104(fp)
 2006b6c:	200ef700 	call	200ef70 <__sprint_r>
 2006b70:	10015d1e 	bne	r2,zero,20070e8 <___vfprintf_internal_r+0x2000>
 2006b74:	e47fcb04 	addi	r17,fp,-212
 2006b78:	e0bfba17 	ldw	r2,-280(fp)
 2006b7c:	10bffc04 	addi	r2,r2,-16
 2006b80:	e0bfba15 	stw	r2,-280(fp)
 2006b84:	e0bfba17 	ldw	r2,-280(fp)
 2006b88:	10800448 	cmpgei	r2,r2,17
 2006b8c:	103fe41e 	bne	r2,zero,2006b20 <___vfprintf_internal_r+0x1a38>
 2006b90:	008080b4 	movhi	r2,514
 2006b94:	10ba1e84 	addi	r2,r2,-6022
 2006b98:	88800015 	stw	r2,0(r17)
 2006b9c:	e0bfba17 	ldw	r2,-280(fp)
 2006ba0:	88800115 	stw	r2,4(r17)
 2006ba4:	e0ffca17 	ldw	r3,-216(fp)
 2006ba8:	e0bfba17 	ldw	r2,-280(fp)
 2006bac:	1885883a 	add	r2,r3,r2
 2006bb0:	e0bfca15 	stw	r2,-216(fp)
 2006bb4:	8c400204 	addi	r17,r17,8
 2006bb8:	e0bfc917 	ldw	r2,-220(fp)
 2006bbc:	10800044 	addi	r2,r2,1
 2006bc0:	e0bfc915 	stw	r2,-220(fp)
 2006bc4:	e0bfc917 	ldw	r2,-220(fp)
 2006bc8:	10800210 	cmplti	r2,r2,8
 2006bcc:	1000b91e 	bne	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
 2006bd0:	e0bfc804 	addi	r2,fp,-224
 2006bd4:	100d883a 	mov	r6,r2
 2006bd8:	e17fe717 	ldw	r5,-100(fp)
 2006bdc:	e13fe617 	ldw	r4,-104(fp)
 2006be0:	200ef700 	call	200ef70 <__sprint_r>
 2006be4:	1001421e 	bne	r2,zero,20070f0 <___vfprintf_internal_r+0x2008>
 2006be8:	e47fcb04 	addi	r17,fp,-212
 2006bec:	0000b106 	br	2006eb4 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 2006bf0:	e0bfc717 	ldw	r2,-228(fp)
 2006bf4:	10800088 	cmpgei	r2,r2,2
 2006bf8:	1000021e 	bne	r2,zero,2006c04 <___vfprintf_internal_r+0x1b1c>
 2006bfc:	9880004c 	andi	r2,r19,1
 2006c00:	10008026 	beq	r2,zero,2006e04 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2006c04:	8c800015 	stw	r18,0(r17)
 2006c08:	00800044 	movi	r2,1
 2006c0c:	88800115 	stw	r2,4(r17)
 2006c10:	e0bfca17 	ldw	r2,-216(fp)
 2006c14:	10800044 	addi	r2,r2,1
 2006c18:	e0bfca15 	stw	r2,-216(fp)
 2006c1c:	8c400204 	addi	r17,r17,8
 2006c20:	e0bfc917 	ldw	r2,-220(fp)
 2006c24:	10800044 	addi	r2,r2,1
 2006c28:	e0bfc915 	stw	r2,-220(fp)
 2006c2c:	e0bfc917 	ldw	r2,-220(fp)
 2006c30:	10800210 	cmplti	r2,r2,8
 2006c34:	1000071e 	bne	r2,zero,2006c54 <___vfprintf_internal_r+0x1b6c>
 2006c38:	e0bfc804 	addi	r2,fp,-224
 2006c3c:	100d883a 	mov	r6,r2
 2006c40:	e17fe717 	ldw	r5,-100(fp)
 2006c44:	e13fe617 	ldw	r4,-104(fp)
 2006c48:	200ef700 	call	200ef70 <__sprint_r>
 2006c4c:	10012a1e 	bne	r2,zero,20070f8 <___vfprintf_internal_r+0x2010>
 2006c50:	e47fcb04 	addi	r17,fp,-212
					cp++;
 2006c54:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 2006c58:	e0bfbb17 	ldw	r2,-276(fp)
 2006c5c:	88800015 	stw	r2,0(r17)
 2006c60:	e0bfbc17 	ldw	r2,-272(fp)
 2006c64:	88800115 	stw	r2,4(r17)
 2006c68:	e0ffca17 	ldw	r3,-216(fp)
 2006c6c:	e0bfbc17 	ldw	r2,-272(fp)
 2006c70:	1885883a 	add	r2,r3,r2
 2006c74:	e0bfca15 	stw	r2,-216(fp)
 2006c78:	8c400204 	addi	r17,r17,8
 2006c7c:	e0bfc917 	ldw	r2,-220(fp)
 2006c80:	10800044 	addi	r2,r2,1
 2006c84:	e0bfc915 	stw	r2,-220(fp)
 2006c88:	e0bfc917 	ldw	r2,-220(fp)
 2006c8c:	10800210 	cmplti	r2,r2,8
 2006c90:	1000071e 	bne	r2,zero,2006cb0 <___vfprintf_internal_r+0x1bc8>
 2006c94:	e0bfc804 	addi	r2,fp,-224
 2006c98:	100d883a 	mov	r6,r2
 2006c9c:	e17fe717 	ldw	r5,-100(fp)
 2006ca0:	e13fe617 	ldw	r4,-104(fp)
 2006ca4:	200ef700 	call	200ef70 <__sprint_r>
 2006ca8:	1001151e 	bne	r2,zero,2007100 <___vfprintf_internal_r+0x2018>
 2006cac:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2006cb0:	e0bfc217 	ldw	r2,-248(fp)
 2006cb4:	e0ffc317 	ldw	r3,-244(fp)
 2006cb8:	000d883a 	mov	r6,zero
 2006cbc:	000f883a 	mov	r7,zero
 2006cc0:	1009883a 	mov	r4,r2
 2006cc4:	180b883a 	mov	r5,r3
 2006cc8:	20124600 	call	2012460 <__eqdf2>
 2006ccc:	10001826 	beq	r2,zero,2006d30 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2006cd0:	8c800015 	stw	r18,0(r17)
 2006cd4:	e0bfc717 	ldw	r2,-228(fp)
 2006cd8:	10bfffc4 	addi	r2,r2,-1
 2006cdc:	88800115 	stw	r2,4(r17)
 2006ce0:	e0bfca17 	ldw	r2,-216(fp)
 2006ce4:	e0ffc717 	ldw	r3,-228(fp)
 2006ce8:	10c5883a 	add	r2,r2,r3
 2006cec:	10bfffc4 	addi	r2,r2,-1
 2006cf0:	e0bfca15 	stw	r2,-216(fp)
 2006cf4:	8c400204 	addi	r17,r17,8
 2006cf8:	e0bfc917 	ldw	r2,-220(fp)
 2006cfc:	10800044 	addi	r2,r2,1
 2006d00:	e0bfc915 	stw	r2,-220(fp)
 2006d04:	e0bfc917 	ldw	r2,-220(fp)
 2006d08:	10800210 	cmplti	r2,r2,8
 2006d0c:	1000521e 	bne	r2,zero,2006e58 <___vfprintf_internal_r+0x1d70>
 2006d10:	e0bfc804 	addi	r2,fp,-224
 2006d14:	100d883a 	mov	r6,r2
 2006d18:	e17fe717 	ldw	r5,-100(fp)
 2006d1c:	e13fe617 	ldw	r4,-104(fp)
 2006d20:	200ef700 	call	200ef70 <__sprint_r>
 2006d24:	1000f81e 	bne	r2,zero,2007108 <___vfprintf_internal_r+0x2020>
 2006d28:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006d2c:	00004a06 	br	2006e58 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2006d30:	e0bfc717 	ldw	r2,-228(fp)
 2006d34:	143fffc4 	addi	r16,r2,-1
 2006d38:	0400470e 	bge	zero,r16,2006e58 <___vfprintf_internal_r+0x1d70>
 2006d3c:	00001706 	br	2006d9c <___vfprintf_internal_r+0x1cb4>
 2006d40:	008080b4 	movhi	r2,514
 2006d44:	10ba1e84 	addi	r2,r2,-6022
 2006d48:	88800015 	stw	r2,0(r17)
 2006d4c:	00800404 	movi	r2,16
 2006d50:	88800115 	stw	r2,4(r17)
 2006d54:	e0bfca17 	ldw	r2,-216(fp)
 2006d58:	10800404 	addi	r2,r2,16
 2006d5c:	e0bfca15 	stw	r2,-216(fp)
 2006d60:	8c400204 	addi	r17,r17,8
 2006d64:	e0bfc917 	ldw	r2,-220(fp)
 2006d68:	10800044 	addi	r2,r2,1
 2006d6c:	e0bfc915 	stw	r2,-220(fp)
 2006d70:	e0bfc917 	ldw	r2,-220(fp)
 2006d74:	10800210 	cmplti	r2,r2,8
 2006d78:	1000071e 	bne	r2,zero,2006d98 <___vfprintf_internal_r+0x1cb0>
 2006d7c:	e0bfc804 	addi	r2,fp,-224
 2006d80:	100d883a 	mov	r6,r2
 2006d84:	e17fe717 	ldw	r5,-100(fp)
 2006d88:	e13fe617 	ldw	r4,-104(fp)
 2006d8c:	200ef700 	call	200ef70 <__sprint_r>
 2006d90:	1000df1e 	bne	r2,zero,2007110 <___vfprintf_internal_r+0x2028>
 2006d94:	e47fcb04 	addi	r17,fp,-212
 2006d98:	843ffc04 	addi	r16,r16,-16
 2006d9c:	80800448 	cmpgei	r2,r16,17
 2006da0:	103fe71e 	bne	r2,zero,2006d40 <___vfprintf_internal_r+0x1c58>
 2006da4:	008080b4 	movhi	r2,514
 2006da8:	10ba1e84 	addi	r2,r2,-6022
 2006dac:	88800015 	stw	r2,0(r17)
 2006db0:	8005883a 	mov	r2,r16
 2006db4:	88800115 	stw	r2,4(r17)
 2006db8:	e0bfca17 	ldw	r2,-216(fp)
 2006dbc:	8007883a 	mov	r3,r16
 2006dc0:	10c5883a 	add	r2,r2,r3
 2006dc4:	e0bfca15 	stw	r2,-216(fp)
 2006dc8:	8c400204 	addi	r17,r17,8
 2006dcc:	e0bfc917 	ldw	r2,-220(fp)
 2006dd0:	10800044 	addi	r2,r2,1
 2006dd4:	e0bfc915 	stw	r2,-220(fp)
 2006dd8:	e0bfc917 	ldw	r2,-220(fp)
 2006ddc:	10800210 	cmplti	r2,r2,8
 2006de0:	10001d1e 	bne	r2,zero,2006e58 <___vfprintf_internal_r+0x1d70>
 2006de4:	e0bfc804 	addi	r2,fp,-224
 2006de8:	100d883a 	mov	r6,r2
 2006dec:	e17fe717 	ldw	r5,-100(fp)
 2006df0:	e13fe617 	ldw	r4,-104(fp)
 2006df4:	200ef700 	call	200ef70 <__sprint_r>
 2006df8:	1000c71e 	bne	r2,zero,2007118 <___vfprintf_internal_r+0x2030>
 2006dfc:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006e00:	00001506 	br	2006e58 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 2006e04:	8c800015 	stw	r18,0(r17)
 2006e08:	00800044 	movi	r2,1
 2006e0c:	88800115 	stw	r2,4(r17)
 2006e10:	e0bfca17 	ldw	r2,-216(fp)
 2006e14:	10800044 	addi	r2,r2,1
 2006e18:	e0bfca15 	stw	r2,-216(fp)
 2006e1c:	8c400204 	addi	r17,r17,8
 2006e20:	e0bfc917 	ldw	r2,-220(fp)
 2006e24:	10800044 	addi	r2,r2,1
 2006e28:	e0bfc915 	stw	r2,-220(fp)
 2006e2c:	e0bfc917 	ldw	r2,-220(fp)
 2006e30:	10800210 	cmplti	r2,r2,8
 2006e34:	1000091e 	bne	r2,zero,2006e5c <___vfprintf_internal_r+0x1d74>
 2006e38:	e0bfc804 	addi	r2,fp,-224
 2006e3c:	100d883a 	mov	r6,r2
 2006e40:	e17fe717 	ldw	r5,-100(fp)
 2006e44:	e13fe617 	ldw	r4,-104(fp)
 2006e48:	200ef700 	call	200ef70 <__sprint_r>
 2006e4c:	1000b41e 	bne	r2,zero,2007120 <___vfprintf_internal_r+0x2038>
 2006e50:	e47fcb04 	addi	r17,fp,-212
 2006e54:	00000106 	br	2006e5c <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006e58:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 2006e5c:	e0bfc504 	addi	r2,fp,-236
 2006e60:	88800015 	stw	r2,0(r17)
 2006e64:	e0bfaf17 	ldw	r2,-324(fp)
 2006e68:	88800115 	stw	r2,4(r17)
 2006e6c:	e0ffca17 	ldw	r3,-216(fp)
 2006e70:	e0bfaf17 	ldw	r2,-324(fp)
 2006e74:	1885883a 	add	r2,r3,r2
 2006e78:	e0bfca15 	stw	r2,-216(fp)
 2006e7c:	8c400204 	addi	r17,r17,8
 2006e80:	e0bfc917 	ldw	r2,-220(fp)
 2006e84:	10800044 	addi	r2,r2,1
 2006e88:	e0bfc915 	stw	r2,-220(fp)
 2006e8c:	e0bfc917 	ldw	r2,-220(fp)
 2006e90:	10800210 	cmplti	r2,r2,8
 2006e94:	1000071e 	bne	r2,zero,2006eb4 <___vfprintf_internal_r+0x1dcc>
 2006e98:	e0bfc804 	addi	r2,fp,-224
 2006e9c:	100d883a 	mov	r6,r2
 2006ea0:	e17fe717 	ldw	r5,-100(fp)
 2006ea4:	e13fe617 	ldw	r4,-104(fp)
 2006ea8:	200ef700 	call	200ef70 <__sprint_r>
 2006eac:	10009e1e 	bne	r2,zero,2007128 <___vfprintf_internal_r+0x2040>
 2006eb0:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2006eb4:	9880010c 	andi	r2,r19,4
 2006eb8:	10003526 	beq	r2,zero,2006f90 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 2006ebc:	e0ffad17 	ldw	r3,-332(fp)
 2006ec0:	e0bfb517 	ldw	r2,-300(fp)
 2006ec4:	18a1c83a 	sub	r16,r3,r2
 2006ec8:	0400310e 	bge	zero,r16,2006f90 <___vfprintf_internal_r+0x1ea8>
 2006ecc:	00001706 	br	2006f2c <___vfprintf_internal_r+0x1e44>
 2006ed0:	008080b4 	movhi	r2,514
 2006ed4:	10ba1a84 	addi	r2,r2,-6038
 2006ed8:	88800015 	stw	r2,0(r17)
 2006edc:	00800404 	movi	r2,16
 2006ee0:	88800115 	stw	r2,4(r17)
 2006ee4:	e0bfca17 	ldw	r2,-216(fp)
 2006ee8:	10800404 	addi	r2,r2,16
 2006eec:	e0bfca15 	stw	r2,-216(fp)
 2006ef0:	8c400204 	addi	r17,r17,8
 2006ef4:	e0bfc917 	ldw	r2,-220(fp)
 2006ef8:	10800044 	addi	r2,r2,1
 2006efc:	e0bfc915 	stw	r2,-220(fp)
 2006f00:	e0bfc917 	ldw	r2,-220(fp)
 2006f04:	10800210 	cmplti	r2,r2,8
 2006f08:	1000071e 	bne	r2,zero,2006f28 <___vfprintf_internal_r+0x1e40>
 2006f0c:	e0bfc804 	addi	r2,fp,-224
 2006f10:	100d883a 	mov	r6,r2
 2006f14:	e17fe717 	ldw	r5,-100(fp)
 2006f18:	e13fe617 	ldw	r4,-104(fp)
 2006f1c:	200ef700 	call	200ef70 <__sprint_r>
 2006f20:	1000831e 	bne	r2,zero,2007130 <___vfprintf_internal_r+0x2048>
 2006f24:	e47fcb04 	addi	r17,fp,-212
 2006f28:	843ffc04 	addi	r16,r16,-16
 2006f2c:	80800448 	cmpgei	r2,r16,17
 2006f30:	103fe71e 	bne	r2,zero,2006ed0 <___vfprintf_internal_r+0x1de8>
 2006f34:	008080b4 	movhi	r2,514
 2006f38:	10ba1a84 	addi	r2,r2,-6038
 2006f3c:	88800015 	stw	r2,0(r17)
 2006f40:	8005883a 	mov	r2,r16
 2006f44:	88800115 	stw	r2,4(r17)
 2006f48:	e0bfca17 	ldw	r2,-216(fp)
 2006f4c:	8007883a 	mov	r3,r16
 2006f50:	10c5883a 	add	r2,r2,r3
 2006f54:	e0bfca15 	stw	r2,-216(fp)
 2006f58:	8c400204 	addi	r17,r17,8
 2006f5c:	e0bfc917 	ldw	r2,-220(fp)
 2006f60:	10800044 	addi	r2,r2,1
 2006f64:	e0bfc915 	stw	r2,-220(fp)
 2006f68:	e0bfc917 	ldw	r2,-220(fp)
 2006f6c:	10800210 	cmplti	r2,r2,8
 2006f70:	1000071e 	bne	r2,zero,2006f90 <___vfprintf_internal_r+0x1ea8>
 2006f74:	e0bfc804 	addi	r2,fp,-224
 2006f78:	100d883a 	mov	r6,r2
 2006f7c:	e17fe717 	ldw	r5,-100(fp)
 2006f80:	e13fe617 	ldw	r4,-104(fp)
 2006f84:	200ef700 	call	200ef70 <__sprint_r>
 2006f88:	10006b1e 	bne	r2,zero,2007138 <___vfprintf_internal_r+0x2050>
 2006f8c:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2006f90:	e0ffad17 	ldw	r3,-332(fp)
 2006f94:	e0bfb517 	ldw	r2,-300(fp)
 2006f98:	10c0010e 	bge	r2,r3,2006fa0 <___vfprintf_internal_r+0x1eb8>
 2006f9c:	1805883a 	mov	r2,r3
 2006fa0:	e0ffac17 	ldw	r3,-336(fp)
 2006fa4:	1885883a 	add	r2,r3,r2
 2006fa8:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2006fac:	e0bfca17 	ldw	r2,-216(fp)
 2006fb0:	10000626 	beq	r2,zero,2006fcc <___vfprintf_internal_r+0x1ee4>
 2006fb4:	e0bfc804 	addi	r2,fp,-224
 2006fb8:	100d883a 	mov	r6,r2
 2006fbc:	e17fe717 	ldw	r5,-100(fp)
 2006fc0:	e13fe617 	ldw	r4,-104(fp)
 2006fc4:	200ef700 	call	200ef70 <__sprint_r>
 2006fc8:	10005d1e 	bne	r2,zero,2007140 <___vfprintf_internal_r+0x2058>
 2006fcc:	e03fc915 	stw	zero,-220(fp)
 2006fd0:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 2006fd4:	e0bfb817 	ldw	r2,-288(fp)
 2006fd8:	1038a026 	beq	r2,zero,200525c <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 2006fdc:	e17fb817 	ldw	r5,-288(fp)
 2006fe0:	e13fe617 	ldw	r4,-104(fp)
 2006fe4:	2009f740 	call	2009f74 <_free_r>
			malloc_buf = NULL;
 2006fe8:	e03fb815 	stw	zero,-288(fp)
		}
	}
 2006fec:	00389b06 	br	200525c <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2006ff0:	0001883a 	nop
 2006ff4:	00000106 	br	2006ffc <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2006ff8:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2006ffc:	e0bfca17 	ldw	r2,-216(fp)
 2007000:	10000626 	beq	r2,zero,200701c <___vfprintf_internal_r+0x1f34>
 2007004:	e0bfc804 	addi	r2,fp,-224
 2007008:	100d883a 	mov	r6,r2
 200700c:	e17fe717 	ldw	r5,-100(fp)
 2007010:	e13fe617 	ldw	r4,-104(fp)
 2007014:	200ef700 	call	200ef70 <__sprint_r>
 2007018:	10004b1e 	bne	r2,zero,2007148 <___vfprintf_internal_r+0x2060>
 200701c:	e03fc915 	stw	zero,-220(fp)
 2007020:	e47fcb04 	addi	r17,fp,-212
 2007024:	00004906 	br	200714c <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2007028:	0001883a 	nop
 200702c:	00004706 	br	200714c <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2007030:	0001883a 	nop
 2007034:	00004506 	br	200714c <___vfprintf_internal_r+0x2064>
 2007038:	0001883a 	nop
 200703c:	00004306 	br	200714c <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2007040:	0001883a 	nop
 2007044:	00004106 	br	200714c <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2007048:	0001883a 	nop
 200704c:	00003f06 	br	200714c <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2007050:	0001883a 	nop
 2007054:	00003d06 	br	200714c <___vfprintf_internal_r+0x2064>
 2007058:	0001883a 	nop
 200705c:	00003b06 	br	200714c <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2007060:	0001883a 	nop
 2007064:	00003906 	br	200714c <___vfprintf_internal_r+0x2064>
 2007068:	0001883a 	nop
 200706c:	00003706 	br	200714c <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 2007070:	0001883a 	nop
 2007074:	00003506 	br	200714c <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2007078:	0001883a 	nop
 200707c:	00003306 	br	200714c <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2007080:	0001883a 	nop
 2007084:	00003106 	br	200714c <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2007088:	0001883a 	nop
 200708c:	00002f06 	br	200714c <___vfprintf_internal_r+0x2064>
 2007090:	0001883a 	nop
 2007094:	00002d06 	br	200714c <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 2007098:	0001883a 	nop
 200709c:	00002b06 	br	200714c <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 20070a0:	0001883a 	nop
 20070a4:	00002906 	br	200714c <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 20070a8:	0001883a 	nop
 20070ac:	00002706 	br	200714c <___vfprintf_internal_r+0x2064>
 20070b0:	0001883a 	nop
 20070b4:	00002506 	br	200714c <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 20070b8:	0001883a 	nop
 20070bc:	00002306 	br	200714c <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 20070c0:	0001883a 	nop
 20070c4:	00002106 	br	200714c <___vfprintf_internal_r+0x2064>
 20070c8:	0001883a 	nop
 20070cc:	00001f06 	br	200714c <___vfprintf_internal_r+0x2064>
 20070d0:	0001883a 	nop
 20070d4:	00001d06 	br	200714c <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 20070d8:	0001883a 	nop
 20070dc:	00001b06 	br	200714c <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 20070e0:	0001883a 	nop
 20070e4:	00001906 	br	200714c <___vfprintf_internal_r+0x2064>
 20070e8:	0001883a 	nop
 20070ec:	00001706 	br	200714c <___vfprintf_internal_r+0x2064>
 20070f0:	0001883a 	nop
 20070f4:	00001506 	br	200714c <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 20070f8:	0001883a 	nop
 20070fc:	00001306 	br	200714c <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 2007100:	0001883a 	nop
 2007104:	00001106 	br	200714c <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 2007108:	0001883a 	nop
 200710c:	00000f06 	br	200714c <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2007110:	0001883a 	nop
 2007114:	00000d06 	br	200714c <___vfprintf_internal_r+0x2064>
 2007118:	0001883a 	nop
 200711c:	00000b06 	br	200714c <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 2007120:	0001883a 	nop
 2007124:	00000906 	br	200714c <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 2007128:	0001883a 	nop
 200712c:	00000706 	br	200714c <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2007130:	0001883a 	nop
 2007134:	00000506 	br	200714c <___vfprintf_internal_r+0x2064>
 2007138:	0001883a 	nop
 200713c:	00000306 	br	200714c <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2007140:	0001883a 	nop
 2007144:	00000106 	br	200714c <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2007148:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200714c:	e0bfb817 	ldw	r2,-288(fp)
 2007150:	10000326 	beq	r2,zero,2007160 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 2007154:	e17fb817 	ldw	r5,-288(fp)
 2007158:	e13fe617 	ldw	r4,-104(fp)
 200715c:	2009f740 	call	2009f74 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2007160:	e0bfe717 	ldw	r2,-100(fp)
 2007164:	1080030b 	ldhu	r2,12(r2)
 2007168:	10bfffcc 	andi	r2,r2,65535
 200716c:	1080100c 	andi	r2,r2,64
 2007170:	1000021e 	bne	r2,zero,200717c <___vfprintf_internal_r+0x2094>
 2007174:	e0bfac17 	ldw	r2,-336(fp)
 2007178:	00000206 	br	2007184 <___vfprintf_internal_r+0x209c>
 200717c:	00bfffc4 	movi	r2,-1
 2007180:	0001883a 	nop
	/* NOTREACHED */
}
 2007184:	e6fff804 	addi	sp,fp,-32
 2007188:	dfc00917 	ldw	ra,36(sp)
 200718c:	df000817 	ldw	fp,32(sp)
 2007190:	ddc00717 	ldw	r23,28(sp)
 2007194:	dd800617 	ldw	r22,24(sp)
 2007198:	dd400517 	ldw	r21,20(sp)
 200719c:	dd000417 	ldw	r20,16(sp)
 20071a0:	dcc00317 	ldw	r19,12(sp)
 20071a4:	dc800217 	ldw	r18,8(sp)
 20071a8:	dc400117 	ldw	r17,4(sp)
 20071ac:	dc000017 	ldw	r16,0(sp)
 20071b0:	dec00a04 	addi	sp,sp,40
 20071b4:	f800283a 	ret

020071b8 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 20071b8:	deffef04 	addi	sp,sp,-68
 20071bc:	dfc01015 	stw	ra,64(sp)
 20071c0:	df000f15 	stw	fp,60(sp)
 20071c4:	df000f04 	addi	fp,sp,60
 20071c8:	e13ffc15 	stw	r4,-16(fp)
 20071cc:	e17ffd15 	stw	r5,-12(fp)
 20071d0:	e1bffe15 	stw	r6,-8(fp)
 20071d4:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 20071d8:	e0bffd17 	ldw	r2,-12(fp)
 20071dc:	e0bffa15 	stw	r2,-24(fp)
 20071e0:	e0bffe17 	ldw	r2,-8(fp)
 20071e4:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 20071e8:	e0bffb17 	ldw	r2,-20(fp)
 20071ec:	1000090e 	bge	r2,zero,2007214 <cvt+0x5c>
		value = -value;
 20071f0:	e0bffd17 	ldw	r2,-12(fp)
 20071f4:	e0bffd15 	stw	r2,-12(fp)
 20071f8:	e0bffe17 	ldw	r2,-8(fp)
 20071fc:	10a0003c 	xorhi	r2,r2,32768
 2007200:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 2007204:	e0800317 	ldw	r2,12(fp)
 2007208:	00c00b44 	movi	r3,45
 200720c:	10c00005 	stb	r3,0(r2)
 2007210:	00000206 	br	200721c <cvt+0x64>
	} else
		*sign = '\000';
 2007214:	e0800317 	ldw	r2,12(fp)
 2007218:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 200721c:	e0800517 	ldw	r2,20(fp)
 2007220:	108019a0 	cmpeqi	r2,r2,102
 2007224:	1000031e 	bne	r2,zero,2007234 <cvt+0x7c>
 2007228:	e0800517 	ldw	r2,20(fp)
 200722c:	10801198 	cmpnei	r2,r2,70
 2007230:	1000031e 	bne	r2,zero,2007240 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 2007234:	008000c4 	movi	r2,3
 2007238:	e0bff515 	stw	r2,-44(fp)
 200723c:	00000b06 	br	200726c <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 2007240:	e0800517 	ldw	r2,20(fp)
 2007244:	10801960 	cmpeqi	r2,r2,101
 2007248:	1000031e 	bne	r2,zero,2007258 <cvt+0xa0>
 200724c:	e0800517 	ldw	r2,20(fp)
 2007250:	10801158 	cmpnei	r2,r2,69
 2007254:	1000031e 	bne	r2,zero,2007264 <cvt+0xac>
			ndigits++;
 2007258:	e0bfff17 	ldw	r2,-4(fp)
 200725c:	10800044 	addi	r2,r2,1
 2007260:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 2007264:	00800084 	movi	r2,2
 2007268:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 200726c:	e0bff904 	addi	r2,fp,-28
 2007270:	d8800315 	stw	r2,12(sp)
 2007274:	e0bff804 	addi	r2,fp,-32
 2007278:	d8800215 	stw	r2,8(sp)
 200727c:	e0800417 	ldw	r2,16(fp)
 2007280:	d8800115 	stw	r2,4(sp)
 2007284:	e0bfff17 	ldw	r2,-4(fp)
 2007288:	d8800015 	stw	r2,0(sp)
 200728c:	e1fff517 	ldw	r7,-44(fp)
 2007290:	e17ffd17 	ldw	r5,-12(fp)
 2007294:	e1bffe17 	ldw	r6,-8(fp)
 2007298:	e13ffc17 	ldw	r4,-16(fp)
 200729c:	2007a580 	call	2007a58 <_dtoa_r>
 20072a0:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 20072a4:	e0800517 	ldw	r2,20(fp)
 20072a8:	108019e0 	cmpeqi	r2,r2,103
 20072ac:	1000031e 	bne	r2,zero,20072bc <cvt+0x104>
 20072b0:	e0800517 	ldw	r2,20(fp)
 20072b4:	108011d8 	cmpnei	r2,r2,71
 20072b8:	1000031e 	bne	r2,zero,20072c8 <cvt+0x110>
 20072bc:	e0800217 	ldw	r2,8(fp)
 20072c0:	1080004c 	andi	r2,r2,1
 20072c4:	10003326 	beq	r2,zero,2007394 <cvt+0x1dc>
		bp = digits + ndigits;
 20072c8:	e0bfff17 	ldw	r2,-4(fp)
 20072cc:	e0fff717 	ldw	r3,-36(fp)
 20072d0:	1885883a 	add	r2,r3,r2
 20072d4:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 20072d8:	e0800517 	ldw	r2,20(fp)
 20072dc:	108019a0 	cmpeqi	r2,r2,102
 20072e0:	1000031e 	bne	r2,zero,20072f0 <cvt+0x138>
 20072e4:	e0800517 	ldw	r2,20(fp)
 20072e8:	10801198 	cmpnei	r2,r2,70
 20072ec:	1000181e 	bne	r2,zero,2007350 <cvt+0x198>
			if (*digits == '0' && value)
 20072f0:	e0bff717 	ldw	r2,-36(fp)
 20072f4:	10800003 	ldbu	r2,0(r2)
 20072f8:	10803fcc 	andi	r2,r2,255
 20072fc:	1080201c 	xori	r2,r2,128
 2007300:	10bfe004 	addi	r2,r2,-128
 2007304:	10800c18 	cmpnei	r2,r2,48
 2007308:	10000b1e 	bne	r2,zero,2007338 <cvt+0x180>
 200730c:	000d883a 	mov	r6,zero
 2007310:	000f883a 	mov	r7,zero
 2007314:	e13ffd17 	ldw	r4,-12(fp)
 2007318:	e17ffe17 	ldw	r5,-8(fp)
 200731c:	20124600 	call	2012460 <__eqdf2>
 2007320:	10000526 	beq	r2,zero,2007338 <cvt+0x180>
				*decpt = -ndigits + 1;
 2007324:	00c00044 	movi	r3,1
 2007328:	e0bfff17 	ldw	r2,-4(fp)
 200732c:	1887c83a 	sub	r3,r3,r2
 2007330:	e0800417 	ldw	r2,16(fp)
 2007334:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 2007338:	e0800417 	ldw	r2,16(fp)
 200733c:	10800017 	ldw	r2,0(r2)
 2007340:	1007883a 	mov	r3,r2
 2007344:	e0bff617 	ldw	r2,-40(fp)
 2007348:	10c5883a 	add	r2,r2,r3
 200734c:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 2007350:	000d883a 	mov	r6,zero
 2007354:	000f883a 	mov	r7,zero
 2007358:	e13ffd17 	ldw	r4,-12(fp)
 200735c:	e17ffe17 	ldw	r5,-8(fp)
 2007360:	20124600 	call	2012460 <__eqdf2>
 2007364:	1000081e 	bne	r2,zero,2007388 <cvt+0x1d0>
			rve = bp;
 2007368:	e0bff617 	ldw	r2,-40(fp)
 200736c:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 2007370:	00000506 	br	2007388 <cvt+0x1d0>
			*rve++ = '0';
 2007374:	e0bff917 	ldw	r2,-28(fp)
 2007378:	10c00044 	addi	r3,r2,1
 200737c:	e0fff915 	stw	r3,-28(fp)
 2007380:	00c00c04 	movi	r3,48
 2007384:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 2007388:	e0fff917 	ldw	r3,-28(fp)
 200738c:	e0bff617 	ldw	r2,-40(fp)
 2007390:	18bff836 	bltu	r3,r2,2007374 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 2007394:	e0bff917 	ldw	r2,-28(fp)
 2007398:	1007883a 	mov	r3,r2
 200739c:	e0bff717 	ldw	r2,-36(fp)
 20073a0:	1887c83a 	sub	r3,r3,r2
 20073a4:	e0800617 	ldw	r2,24(fp)
 20073a8:	10c00015 	stw	r3,0(r2)
	return (digits);
 20073ac:	e0bff717 	ldw	r2,-36(fp)
}
 20073b0:	e037883a 	mov	sp,fp
 20073b4:	dfc00117 	ldw	ra,4(sp)
 20073b8:	df000017 	ldw	fp,0(sp)
 20073bc:	dec00204 	addi	sp,sp,8
 20073c0:	f800283a 	ret

020073c4 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 20073c4:	defff704 	addi	sp,sp,-36
 20073c8:	dfc00815 	stw	ra,32(sp)
 20073cc:	df000715 	stw	fp,28(sp)
 20073d0:	dc400615 	stw	r17,24(sp)
 20073d4:	dc000515 	stw	r16,20(sp)
 20073d8:	df000704 	addi	fp,sp,28
 20073dc:	e13ffb15 	stw	r4,-20(fp)
 20073e0:	e17ffc15 	stw	r5,-16(fp)
 20073e4:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 20073e8:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 20073ec:	8805883a 	mov	r2,r17
 20073f0:	14400044 	addi	r17,r2,1
 20073f4:	e0fffd17 	ldw	r3,-12(fp)
 20073f8:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 20073fc:	e0bffc17 	ldw	r2,-16(fp)
 2007400:	1000080e 	bge	r2,zero,2007424 <exponent+0x60>
		exp = -exp;
 2007404:	e0bffc17 	ldw	r2,-16(fp)
 2007408:	0085c83a 	sub	r2,zero,r2
 200740c:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 2007410:	8805883a 	mov	r2,r17
 2007414:	14400044 	addi	r17,r2,1
 2007418:	00c00b44 	movi	r3,45
 200741c:	10c00005 	stb	r3,0(r2)
 2007420:	00000406 	br	2007434 <exponent+0x70>
	}
	else
		*p++ = '+';
 2007424:	8805883a 	mov	r2,r17
 2007428:	14400044 	addi	r17,r2,1
 200742c:	00c00ac4 	movi	r3,43
 2007430:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 2007434:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 2007438:	e0bffc17 	ldw	r2,-16(fp)
 200743c:	10800290 	cmplti	r2,r2,10
 2007440:	10001d1e 	bne	r2,zero,20074b8 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 2007444:	843fffc4 	addi	r16,r16,-1
 2007448:	e0bffc17 	ldw	r2,-16(fp)
 200744c:	01400284 	movi	r5,10
 2007450:	1009883a 	mov	r4,r2
 2007454:	200481c0 	call	200481c <__modsi3>
 2007458:	10800c04 	addi	r2,r2,48
 200745c:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 2007460:	e0bffc17 	ldw	r2,-16(fp)
 2007464:	01400284 	movi	r5,10
 2007468:	1009883a 	mov	r4,r2
 200746c:	20047980 	call	2004798 <__divsi3>
 2007470:	e0bffc15 	stw	r2,-16(fp)
 2007474:	e0bffc17 	ldw	r2,-16(fp)
 2007478:	10800288 	cmpgei	r2,r2,10
 200747c:	103ff11e 	bne	r2,zero,2007444 <exponent+0x80>
		*--t = to_char (exp);
 2007480:	843fffc4 	addi	r16,r16,-1
 2007484:	e0bffc17 	ldw	r2,-16(fp)
 2007488:	10800c04 	addi	r2,r2,48
 200748c:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 2007490:	00000606 	br	20074ac <exponent+0xe8>
 2007494:	8805883a 	mov	r2,r17
 2007498:	14400044 	addi	r17,r2,1
 200749c:	8007883a 	mov	r3,r16
 20074a0:	1c000044 	addi	r16,r3,1
 20074a4:	18c00003 	ldbu	r3,0(r3)
 20074a8:	10c00005 	stb	r3,0(r2)
 20074ac:	e0bffac4 	addi	r2,fp,-21
 20074b0:	80bff836 	bltu	r16,r2,2007494 <exponent+0xd0>
 20074b4:	00000906 	br	20074dc <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 20074b8:	8805883a 	mov	r2,r17
 20074bc:	14400044 	addi	r17,r2,1
 20074c0:	00c00c04 	movi	r3,48
 20074c4:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 20074c8:	8805883a 	mov	r2,r17
 20074cc:	14400044 	addi	r17,r2,1
 20074d0:	e0fffc17 	ldw	r3,-16(fp)
 20074d4:	18c00c04 	addi	r3,r3,48
 20074d8:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 20074dc:	8807883a 	mov	r3,r17
 20074e0:	e0bffb17 	ldw	r2,-20(fp)
 20074e4:	1885c83a 	sub	r2,r3,r2
}
 20074e8:	e6fffe04 	addi	sp,fp,-8
 20074ec:	dfc00317 	ldw	ra,12(sp)
 20074f0:	df000217 	ldw	fp,8(sp)
 20074f4:	dc400117 	ldw	r17,4(sp)
 20074f8:	dc000017 	ldw	r16,0(sp)
 20074fc:	dec00404 	addi	sp,sp,16
 2007500:	f800283a 	ret

02007504 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2007504:	defffb04 	addi	sp,sp,-20
 2007508:	dfc00415 	stw	ra,16(sp)
 200750c:	df000315 	stw	fp,12(sp)
 2007510:	dc000215 	stw	r16,8(sp)
 2007514:	df000304 	addi	fp,sp,12
 2007518:	e13ffe15 	stw	r4,-8(fp)
 200751c:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 2007520:	d0a00017 	ldw	r2,-32768(gp)
 2007524:	e0bffd15 	stw	r2,-12(fp)
 2007528:	e0bffd17 	ldw	r2,-12(fp)
 200752c:	10000526 	beq	r2,zero,2007544 <__swsetup_r+0x40>
 2007530:	e0bffd17 	ldw	r2,-12(fp)
 2007534:	10800e17 	ldw	r2,56(r2)
 2007538:	1000021e 	bne	r2,zero,2007544 <__swsetup_r+0x40>
 200753c:	e13ffd17 	ldw	r4,-12(fp)
 2007540:	2009d540 	call	2009d54 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 2007544:	8080030b 	ldhu	r2,12(r16)
 2007548:	10bfffcc 	andi	r2,r2,65535
 200754c:	1080020c 	andi	r2,r2,8
 2007550:	1000241e 	bne	r2,zero,20075e4 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 2007554:	8080030b 	ldhu	r2,12(r16)
 2007558:	10bfffcc 	andi	r2,r2,65535
 200755c:	1080040c 	andi	r2,r2,16
 2007560:	1000081e 	bne	r2,zero,2007584 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 2007564:	e0bffe17 	ldw	r2,-8(fp)
 2007568:	00c00244 	movi	r3,9
 200756c:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 2007570:	8080030b 	ldhu	r2,12(r16)
 2007574:	10801014 	ori	r2,r2,64
 2007578:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200757c:	00bfffc4 	movi	r2,-1
 2007580:	00004206 	br	200768c <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 2007584:	8080030b 	ldhu	r2,12(r16)
 2007588:	10bfffcc 	andi	r2,r2,65535
 200758c:	1080010c 	andi	r2,r2,4
 2007590:	10001126 	beq	r2,zero,20075d8 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 2007594:	80800c17 	ldw	r2,48(r16)
 2007598:	10000826 	beq	r2,zero,20075bc <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 200759c:	80c00c17 	ldw	r3,48(r16)
 20075a0:	80801004 	addi	r2,r16,64
 20075a4:	18800426 	beq	r3,r2,20075b8 <__swsetup_r+0xb4>
 20075a8:	80800c17 	ldw	r2,48(r16)
 20075ac:	100b883a 	mov	r5,r2
 20075b0:	e13ffe17 	ldw	r4,-8(fp)
 20075b4:	2009f740 	call	2009f74 <_free_r>
 20075b8:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 20075bc:	80c0030b 	ldhu	r3,12(r16)
 20075c0:	00bff6c4 	movi	r2,-37
 20075c4:	1884703a 	and	r2,r3,r2
 20075c8:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 20075cc:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 20075d0:	80800417 	ldw	r2,16(r16)
 20075d4:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 20075d8:	8080030b 	ldhu	r2,12(r16)
 20075dc:	10800214 	ori	r2,r2,8
 20075e0:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 20075e4:	80800417 	ldw	r2,16(r16)
 20075e8:	10000b1e 	bne	r2,zero,2007618 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 20075ec:	8080030b 	ldhu	r2,12(r16)
 20075f0:	10bfffcc 	andi	r2,r2,65535
 20075f4:	1080800c 	andi	r2,r2,512
 20075f8:	10000426 	beq	r2,zero,200760c <__swsetup_r+0x108>
 20075fc:	8080030b 	ldhu	r2,12(r16)
 2007600:	10bfffcc 	andi	r2,r2,65535
 2007604:	1080200c 	andi	r2,r2,128
 2007608:	10000326 	beq	r2,zero,2007618 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200760c:	800b883a 	mov	r5,r16
 2007610:	e13ffe17 	ldw	r4,-8(fp)
 2007614:	200afd40 	call	200afd4 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 2007618:	8080030b 	ldhu	r2,12(r16)
 200761c:	10bfffcc 	andi	r2,r2,65535
 2007620:	1080004c 	andi	r2,r2,1
 2007624:	10000526 	beq	r2,zero,200763c <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 2007628:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200762c:	80800517 	ldw	r2,20(r16)
 2007630:	0085c83a 	sub	r2,zero,r2
 2007634:	80800615 	stw	r2,24(r16)
 2007638:	00000806 	br	200765c <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200763c:	8080030b 	ldhu	r2,12(r16)
 2007640:	10bfffcc 	andi	r2,r2,65535
 2007644:	1080008c 	andi	r2,r2,2
 2007648:	1000021e 	bne	r2,zero,2007654 <__swsetup_r+0x150>
 200764c:	80800517 	ldw	r2,20(r16)
 2007650:	00000106 	br	2007658 <__swsetup_r+0x154>
 2007654:	0005883a 	mov	r2,zero
 2007658:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200765c:	80800417 	ldw	r2,16(r16)
 2007660:	1000091e 	bne	r2,zero,2007688 <__swsetup_r+0x184>
 2007664:	8080030b 	ldhu	r2,12(r16)
 2007668:	10bfffcc 	andi	r2,r2,65535
 200766c:	1080200c 	andi	r2,r2,128
 2007670:	10000526 	beq	r2,zero,2007688 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 2007674:	8080030b 	ldhu	r2,12(r16)
 2007678:	10801014 	ori	r2,r2,64
 200767c:	8080030d 	sth	r2,12(r16)
      return EOF;
 2007680:	00bfffc4 	movi	r2,-1
 2007684:	00000106 	br	200768c <__swsetup_r+0x188>
    }
  return 0;
 2007688:	0005883a 	mov	r2,zero
}
 200768c:	e6ffff04 	addi	sp,fp,-4
 2007690:	dfc00217 	ldw	ra,8(sp)
 2007694:	df000117 	ldw	fp,4(sp)
 2007698:	dc000017 	ldw	r16,0(sp)
 200769c:	dec00304 	addi	sp,sp,12
 20076a0:	f800283a 	ret

020076a4 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 20076a4:	deffef04 	addi	sp,sp,-68
 20076a8:	dfc01015 	stw	ra,64(sp)
 20076ac:	df000f15 	stw	fp,60(sp)
 20076b0:	df000f04 	addi	fp,sp,60
 20076b4:	e13ffe15 	stw	r4,-8(fp)
 20076b8:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 20076bc:	e0bfff17 	ldw	r2,-4(fp)
 20076c0:	10800417 	ldw	r2,16(r2)
 20076c4:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 20076c8:	e0bffe17 	ldw	r2,-8(fp)
 20076cc:	10c00417 	ldw	r3,16(r2)
 20076d0:	e0bff117 	ldw	r2,-60(fp)
 20076d4:	1880020e 	bge	r3,r2,20076e0 <quorem+0x3c>
    return 0;
 20076d8:	0005883a 	mov	r2,zero
 20076dc:	0000d906 	br	2007a44 <quorem+0x3a0>
  sx = S->_x;
 20076e0:	e0bfff17 	ldw	r2,-4(fp)
 20076e4:	10800504 	addi	r2,r2,20
 20076e8:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 20076ec:	e0bff117 	ldw	r2,-60(fp)
 20076f0:	10bfffc4 	addi	r2,r2,-1
 20076f4:	e0bff115 	stw	r2,-60(fp)
 20076f8:	e0bff117 	ldw	r2,-60(fp)
 20076fc:	1085883a 	add	r2,r2,r2
 2007700:	1085883a 	add	r2,r2,r2
 2007704:	1007883a 	mov	r3,r2
 2007708:	e0bff717 	ldw	r2,-36(fp)
 200770c:	10c5883a 	add	r2,r2,r3
 2007710:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 2007714:	e0bffe17 	ldw	r2,-8(fp)
 2007718:	10800504 	addi	r2,r2,20
 200771c:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 2007720:	e0bff117 	ldw	r2,-60(fp)
 2007724:	1085883a 	add	r2,r2,r2
 2007728:	1085883a 	add	r2,r2,r2
 200772c:	1007883a 	mov	r3,r2
 2007730:	e0bff517 	ldw	r2,-44(fp)
 2007734:	10c5883a 	add	r2,r2,r3
 2007738:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 200773c:	e0bff617 	ldw	r2,-40(fp)
 2007740:	10c00017 	ldw	r3,0(r2)
 2007744:	e0bff817 	ldw	r2,-32(fp)
 2007748:	10800017 	ldw	r2,0(r2)
 200774c:	10800044 	addi	r2,r2,1
 2007750:	100b883a 	mov	r5,r2
 2007754:	1809883a 	mov	r4,r3
 2007758:	20048900 	call	2004890 <__udivsi3>
 200775c:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 2007760:	e0bff417 	ldw	r2,-48(fp)
 2007764:	10005326 	beq	r2,zero,20078b4 <quorem+0x210>
    {
      borrow = 0;
 2007768:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200776c:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2007770:	e0bff717 	ldw	r2,-36(fp)
 2007774:	10c00104 	addi	r3,r2,4
 2007778:	e0fff715 	stw	r3,-36(fp)
 200777c:	10800017 	ldw	r2,0(r2)
 2007780:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 2007784:	e0bff917 	ldw	r2,-28(fp)
 2007788:	10ffffcc 	andi	r3,r2,65535
 200778c:	e0bff417 	ldw	r2,-48(fp)
 2007790:	1887383a 	mul	r3,r3,r2
 2007794:	e0bff317 	ldw	r2,-52(fp)
 2007798:	1885883a 	add	r2,r3,r2
 200779c:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 20077a0:	e0bff917 	ldw	r2,-28(fp)
 20077a4:	1006d43a 	srli	r3,r2,16
 20077a8:	e0bff417 	ldw	r2,-48(fp)
 20077ac:	1887383a 	mul	r3,r3,r2
 20077b0:	e0bffa17 	ldw	r2,-24(fp)
 20077b4:	1004d43a 	srli	r2,r2,16
 20077b8:	1885883a 	add	r2,r3,r2
 20077bc:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 20077c0:	e0bffb17 	ldw	r2,-20(fp)
 20077c4:	1004d43a 	srli	r2,r2,16
 20077c8:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 20077cc:	e0bff517 	ldw	r2,-44(fp)
 20077d0:	10800017 	ldw	r2,0(r2)
 20077d4:	10ffffcc 	andi	r3,r2,65535
 20077d8:	e0bffa17 	ldw	r2,-24(fp)
 20077dc:	10bfffcc 	andi	r2,r2,65535
 20077e0:	1887c83a 	sub	r3,r3,r2
 20077e4:	e0bff217 	ldw	r2,-56(fp)
 20077e8:	1885883a 	add	r2,r3,r2
 20077ec:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 20077f0:	e0bffc17 	ldw	r2,-16(fp)
 20077f4:	1005d43a 	srai	r2,r2,16
 20077f8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 20077fc:	e0bff517 	ldw	r2,-44(fp)
 2007800:	10800017 	ldw	r2,0(r2)
 2007804:	1006d43a 	srli	r3,r2,16
 2007808:	e0bffb17 	ldw	r2,-20(fp)
 200780c:	10bfffcc 	andi	r2,r2,65535
 2007810:	1887c83a 	sub	r3,r3,r2
 2007814:	e0bff217 	ldw	r2,-56(fp)
 2007818:	1885883a 	add	r2,r3,r2
 200781c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007820:	e0bffd17 	ldw	r2,-12(fp)
 2007824:	1005d43a 	srai	r2,r2,16
 2007828:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200782c:	e0bff517 	ldw	r2,-44(fp)
 2007830:	10c00104 	addi	r3,r2,4
 2007834:	e0fff515 	stw	r3,-44(fp)
 2007838:	e0fffd17 	ldw	r3,-12(fp)
 200783c:	1808943a 	slli	r4,r3,16
 2007840:	e0fffc17 	ldw	r3,-16(fp)
 2007844:	18ffffcc 	andi	r3,r3,65535
 2007848:	20c6b03a 	or	r3,r4,r3
 200784c:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2007850:	e0bff717 	ldw	r2,-36(fp)
 2007854:	e0fff817 	ldw	r3,-32(fp)
 2007858:	18bfc52e 	bgeu	r3,r2,2007770 <quorem+0xcc>
      if (!*bxe)
 200785c:	e0bff617 	ldw	r2,-40(fp)
 2007860:	10800017 	ldw	r2,0(r2)
 2007864:	1000131e 	bne	r2,zero,20078b4 <quorem+0x210>
	{
	  bx = b->_x;
 2007868:	e0bffe17 	ldw	r2,-8(fp)
 200786c:	10800504 	addi	r2,r2,20
 2007870:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 2007874:	00000306 	br	2007884 <quorem+0x1e0>
	    --n;
 2007878:	e0bff117 	ldw	r2,-60(fp)
 200787c:	10bfffc4 	addi	r2,r2,-1
 2007880:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 2007884:	e0bff617 	ldw	r2,-40(fp)
 2007888:	10bfff04 	addi	r2,r2,-4
 200788c:	e0bff615 	stw	r2,-40(fp)
 2007890:	e0bff617 	ldw	r2,-40(fp)
 2007894:	e0fff517 	ldw	r3,-44(fp)
 2007898:	1880032e 	bgeu	r3,r2,20078a8 <quorem+0x204>
 200789c:	e0bff617 	ldw	r2,-40(fp)
 20078a0:	10800017 	ldw	r2,0(r2)
 20078a4:	103ff426 	beq	r2,zero,2007878 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 20078a8:	e0bffe17 	ldw	r2,-8(fp)
 20078ac:	e0fff117 	ldw	r3,-60(fp)
 20078b0:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 20078b4:	e17fff17 	ldw	r5,-4(fp)
 20078b8:	e13ffe17 	ldw	r4,-8(fp)
 20078bc:	200d2d40 	call	200d2d4 <__mcmp>
 20078c0:	10005f16 	blt	r2,zero,2007a40 <quorem+0x39c>
    {
      q++;
 20078c4:	e0bff417 	ldw	r2,-48(fp)
 20078c8:	10800044 	addi	r2,r2,1
 20078cc:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 20078d0:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 20078d4:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 20078d8:	e0bffe17 	ldw	r2,-8(fp)
 20078dc:	10800504 	addi	r2,r2,20
 20078e0:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 20078e4:	e0bfff17 	ldw	r2,-4(fp)
 20078e8:	10800504 	addi	r2,r2,20
 20078ec:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 20078f0:	e0bff717 	ldw	r2,-36(fp)
 20078f4:	10c00104 	addi	r3,r2,4
 20078f8:	e0fff715 	stw	r3,-36(fp)
 20078fc:	10800017 	ldw	r2,0(r2)
 2007900:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 2007904:	e0bff917 	ldw	r2,-28(fp)
 2007908:	10ffffcc 	andi	r3,r2,65535
 200790c:	e0bff317 	ldw	r2,-52(fp)
 2007910:	1885883a 	add	r2,r3,r2
 2007914:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 2007918:	e0bff917 	ldw	r2,-28(fp)
 200791c:	1006d43a 	srli	r3,r2,16
 2007920:	e0bffa17 	ldw	r2,-24(fp)
 2007924:	1004d43a 	srli	r2,r2,16
 2007928:	1885883a 	add	r2,r3,r2
 200792c:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2007930:	e0bffb17 	ldw	r2,-20(fp)
 2007934:	1004d43a 	srli	r2,r2,16
 2007938:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200793c:	e0bff517 	ldw	r2,-44(fp)
 2007940:	10800017 	ldw	r2,0(r2)
 2007944:	10ffffcc 	andi	r3,r2,65535
 2007948:	e0bffa17 	ldw	r2,-24(fp)
 200794c:	10bfffcc 	andi	r2,r2,65535
 2007950:	1887c83a 	sub	r3,r3,r2
 2007954:	e0bff217 	ldw	r2,-56(fp)
 2007958:	1885883a 	add	r2,r3,r2
 200795c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2007960:	e0bffc17 	ldw	r2,-16(fp)
 2007964:	1005d43a 	srai	r2,r2,16
 2007968:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200796c:	e0bff517 	ldw	r2,-44(fp)
 2007970:	10800017 	ldw	r2,0(r2)
 2007974:	1006d43a 	srli	r3,r2,16
 2007978:	e0bffb17 	ldw	r2,-20(fp)
 200797c:	10bfffcc 	andi	r2,r2,65535
 2007980:	1887c83a 	sub	r3,r3,r2
 2007984:	e0bff217 	ldw	r2,-56(fp)
 2007988:	1885883a 	add	r2,r3,r2
 200798c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007990:	e0bffd17 	ldw	r2,-12(fp)
 2007994:	1005d43a 	srai	r2,r2,16
 2007998:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200799c:	e0bff517 	ldw	r2,-44(fp)
 20079a0:	10c00104 	addi	r3,r2,4
 20079a4:	e0fff515 	stw	r3,-44(fp)
 20079a8:	e0fffd17 	ldw	r3,-12(fp)
 20079ac:	1808943a 	slli	r4,r3,16
 20079b0:	e0fffc17 	ldw	r3,-16(fp)
 20079b4:	18ffffcc 	andi	r3,r3,65535
 20079b8:	20c6b03a 	or	r3,r4,r3
 20079bc:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 20079c0:	e0bff717 	ldw	r2,-36(fp)
 20079c4:	e0fff817 	ldw	r3,-32(fp)
 20079c8:	18bfc92e 	bgeu	r3,r2,20078f0 <quorem+0x24c>
      bx = b->_x;
 20079cc:	e0bffe17 	ldw	r2,-8(fp)
 20079d0:	10800504 	addi	r2,r2,20
 20079d4:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 20079d8:	e0bff117 	ldw	r2,-60(fp)
 20079dc:	1085883a 	add	r2,r2,r2
 20079e0:	1085883a 	add	r2,r2,r2
 20079e4:	1007883a 	mov	r3,r2
 20079e8:	e0bff517 	ldw	r2,-44(fp)
 20079ec:	10c5883a 	add	r2,r2,r3
 20079f0:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 20079f4:	e0bff617 	ldw	r2,-40(fp)
 20079f8:	10800017 	ldw	r2,0(r2)
 20079fc:	1000101e 	bne	r2,zero,2007a40 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 2007a00:	00000306 	br	2007a10 <quorem+0x36c>
	    --n;
 2007a04:	e0bff117 	ldw	r2,-60(fp)
 2007a08:	10bfffc4 	addi	r2,r2,-1
 2007a0c:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 2007a10:	e0bff617 	ldw	r2,-40(fp)
 2007a14:	10bfff04 	addi	r2,r2,-4
 2007a18:	e0bff615 	stw	r2,-40(fp)
 2007a1c:	e0bff617 	ldw	r2,-40(fp)
 2007a20:	e0fff517 	ldw	r3,-44(fp)
 2007a24:	1880032e 	bgeu	r3,r2,2007a34 <quorem+0x390>
 2007a28:	e0bff617 	ldw	r2,-40(fp)
 2007a2c:	10800017 	ldw	r2,0(r2)
 2007a30:	103ff426 	beq	r2,zero,2007a04 <quorem+0x360>
	    --n;
	  b->_wds = n;
 2007a34:	e0bffe17 	ldw	r2,-8(fp)
 2007a38:	e0fff117 	ldw	r3,-60(fp)
 2007a3c:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 2007a40:	e0bff417 	ldw	r2,-48(fp)
}
 2007a44:	e037883a 	mov	sp,fp
 2007a48:	dfc00117 	ldw	ra,4(sp)
 2007a4c:	df000017 	ldw	fp,0(sp)
 2007a50:	dec00204 	addi	sp,sp,8
 2007a54:	f800283a 	ret

02007a58 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 2007a58:	deffcc04 	addi	sp,sp,-208
 2007a5c:	dfc03315 	stw	ra,204(sp)
 2007a60:	df003215 	stw	fp,200(sp)
 2007a64:	dcc03115 	stw	r19,196(sp)
 2007a68:	dc803015 	stw	r18,192(sp)
 2007a6c:	dc402f15 	stw	r17,188(sp)
 2007a70:	dc002e15 	stw	r16,184(sp)
 2007a74:	df003204 	addi	fp,sp,200
 2007a78:	e13ff815 	stw	r4,-32(fp)
 2007a7c:	e17ff915 	stw	r5,-28(fp)
 2007a80:	e1bffa15 	stw	r6,-24(fp)
 2007a84:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 2007a88:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 2007a8c:	e0bff917 	ldw	r2,-28(fp)
 2007a90:	e0bff215 	stw	r2,-56(fp)
 2007a94:	e0bffa17 	ldw	r2,-24(fp)
 2007a98:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 2007a9c:	e0bff817 	ldw	r2,-32(fp)
 2007aa0:	10801017 	ldw	r2,64(r2)
 2007aa4:	10001326 	beq	r2,zero,2007af4 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 2007aa8:	e0bff817 	ldw	r2,-32(fp)
 2007aac:	10801017 	ldw	r2,64(r2)
 2007ab0:	e0fff817 	ldw	r3,-32(fp)
 2007ab4:	18c01117 	ldw	r3,68(r3)
 2007ab8:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 2007abc:	e0bff817 	ldw	r2,-32(fp)
 2007ac0:	10801017 	ldw	r2,64(r2)
 2007ac4:	e0fff817 	ldw	r3,-32(fp)
 2007ac8:	18c01117 	ldw	r3,68(r3)
 2007acc:	01000044 	movi	r4,1
 2007ad0:	20c6983a 	sll	r3,r4,r3
 2007ad4:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 2007ad8:	e0bff817 	ldw	r2,-32(fp)
 2007adc:	10801017 	ldw	r2,64(r2)
 2007ae0:	100b883a 	mov	r5,r2
 2007ae4:	e13ff817 	ldw	r4,-32(fp)
 2007ae8:	200c6240 	call	200c624 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 2007aec:	e0bff817 	ldw	r2,-32(fp)
 2007af0:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 2007af4:	e0bff317 	ldw	r2,-52(fp)
 2007af8:	1000090e 	bge	r2,zero,2007b20 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 2007afc:	e0800417 	ldw	r2,16(fp)
 2007b00:	00c00044 	movi	r3,1
 2007b04:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 2007b08:	e0fff317 	ldw	r3,-52(fp)
 2007b0c:	00a00034 	movhi	r2,32768
 2007b10:	10bfffc4 	addi	r2,r2,-1
 2007b14:	1884703a 	and	r2,r3,r2
 2007b18:	e0bff315 	stw	r2,-52(fp)
 2007b1c:	00000206 	br	2007b28 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 2007b20:	e0800417 	ldw	r2,16(fp)
 2007b24:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 2007b28:	e0bff317 	ldw	r2,-52(fp)
 2007b2c:	10dffc2c 	andhi	r3,r2,32752
 2007b30:	009ffc34 	movhi	r2,32752
 2007b34:	1880221e 	bne	r3,r2,2007bc0 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 2007b38:	e0800317 	ldw	r2,12(fp)
 2007b3c:	00c9c3c4 	movi	r3,9999
 2007b40:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 2007b44:	e0bff217 	ldw	r2,-56(fp)
 2007b48:	1000081e 	bne	r2,zero,2007b6c <_dtoa_r+0x114>
 2007b4c:	e0fff317 	ldw	r3,-52(fp)
 2007b50:	00800434 	movhi	r2,16
 2007b54:	10bfffc4 	addi	r2,r2,-1
 2007b58:	1884703a 	and	r2,r3,r2
 2007b5c:	1000031e 	bne	r2,zero,2007b6c <_dtoa_r+0x114>
 2007b60:	008080b4 	movhi	r2,514
 2007b64:	10ba2304 	addi	r2,r2,-6004
 2007b68:	00000206 	br	2007b74 <_dtoa_r+0x11c>
 2007b6c:	008080b4 	movhi	r2,514
 2007b70:	10ba2604 	addi	r2,r2,-5992
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 2007b74:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 2007b78:	e0800517 	ldw	r2,20(fp)
 2007b7c:	10000e26 	beq	r2,zero,2007bb8 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 2007b80:	e0bfe717 	ldw	r2,-100(fp)
 2007b84:	108000c4 	addi	r2,r2,3
 2007b88:	10800003 	ldbu	r2,0(r2)
 2007b8c:	10803fcc 	andi	r2,r2,255
 2007b90:	1080201c 	xori	r2,r2,128
 2007b94:	10bfe004 	addi	r2,r2,-128
 2007b98:	10000326 	beq	r2,zero,2007ba8 <_dtoa_r+0x150>
 2007b9c:	e0bfe717 	ldw	r2,-100(fp)
 2007ba0:	10800204 	addi	r2,r2,8
 2007ba4:	00000206 	br	2007bb0 <_dtoa_r+0x158>
 2007ba8:	e0bfe717 	ldw	r2,-100(fp)
 2007bac:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 2007bb0:	e0c00517 	ldw	r3,20(fp)
 2007bb4:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 2007bb8:	e0bfe717 	ldw	r2,-100(fp)
 2007bbc:	00067b06 	br	20095ac <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 2007bc0:	e0bff217 	ldw	r2,-56(fp)
 2007bc4:	e0fff317 	ldw	r3,-52(fp)
 2007bc8:	000d883a 	mov	r6,zero
 2007bcc:	000f883a 	mov	r7,zero
 2007bd0:	1009883a 	mov	r4,r2
 2007bd4:	180b883a 	mov	r5,r3
 2007bd8:	20124600 	call	2012460 <__eqdf2>
 2007bdc:	10000e1e 	bne	r2,zero,2007c18 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 2007be0:	e0800317 	ldw	r2,12(fp)
 2007be4:	00c00044 	movi	r3,1
 2007be8:	10c00015 	stw	r3,0(r2)
      s = "0";
 2007bec:	008080b4 	movhi	r2,514
 2007bf0:	10ba2704 	addi	r2,r2,-5988
 2007bf4:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 2007bf8:	e0800517 	ldw	r2,20(fp)
 2007bfc:	10000426 	beq	r2,zero,2007c10 <_dtoa_r+0x1b8>
	*rve = s + 1;
 2007c00:	e0bfe717 	ldw	r2,-100(fp)
 2007c04:	10c00044 	addi	r3,r2,1
 2007c08:	e0800517 	ldw	r2,20(fp)
 2007c0c:	10c00015 	stw	r3,0(r2)
      return s;
 2007c10:	e0bfe717 	ldw	r2,-100(fp)
 2007c14:	00066506 	br	20095ac <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 2007c18:	e0bff217 	ldw	r2,-56(fp)
 2007c1c:	e0fff317 	ldw	r3,-52(fp)
 2007c20:	e17ff104 	addi	r5,fp,-60
 2007c24:	e13ff004 	addi	r4,fp,-64
 2007c28:	d9000015 	stw	r4,0(sp)
 2007c2c:	280f883a 	mov	r7,r5
 2007c30:	100b883a 	mov	r5,r2
 2007c34:	180d883a 	mov	r6,r3
 2007c38:	e13ff817 	ldw	r4,-32(fp)
 2007c3c:	200d95c0 	call	200d95c <__d2b>
 2007c40:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 2007c44:	e0bff317 	ldw	r2,-52(fp)
 2007c48:	1004d53a 	srli	r2,r2,20
 2007c4c:	1081ffcc 	andi	r2,r2,2047
 2007c50:	e0bfd215 	stw	r2,-184(fp)
 2007c54:	e0bfd217 	ldw	r2,-184(fp)
 2007c58:	10001126 	beq	r2,zero,2007ca0 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 2007c5c:	e0bff217 	ldw	r2,-56(fp)
 2007c60:	e0fff317 	ldw	r3,-52(fp)
 2007c64:	e0bff415 	stw	r2,-48(fp)
 2007c68:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 2007c6c:	e0fff517 	ldw	r3,-44(fp)
 2007c70:	00800434 	movhi	r2,16
 2007c74:	10bfffc4 	addi	r2,r2,-1
 2007c78:	1884703a 	and	r2,r3,r2
 2007c7c:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 2007c80:	e0bff517 	ldw	r2,-44(fp)
 2007c84:	108ffc34 	orhi	r2,r2,16368
 2007c88:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 2007c8c:	e0bfd217 	ldw	r2,-184(fp)
 2007c90:	10bf0044 	addi	r2,r2,-1023
 2007c94:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 2007c98:	e03fe015 	stw	zero,-128(fp)
 2007c9c:	00002806 	br	2007d40 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 2007ca0:	e0fff017 	ldw	r3,-64(fp)
 2007ca4:	e0bff117 	ldw	r2,-60(fp)
 2007ca8:	1885883a 	add	r2,r3,r2
 2007cac:	10810c84 	addi	r2,r2,1074
 2007cb0:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 2007cb4:	e0bfd217 	ldw	r2,-184(fp)
 2007cb8:	10800850 	cmplti	r2,r2,33
 2007cbc:	10000b1e 	bne	r2,zero,2007cec <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2007cc0:	e0fff317 	ldw	r3,-52(fp)
 2007cc4:	01001004 	movi	r4,64
 2007cc8:	e0bfd217 	ldw	r2,-184(fp)
 2007ccc:	2085c83a 	sub	r2,r4,r2
 2007cd0:	1886983a 	sll	r3,r3,r2
 2007cd4:	e13ff217 	ldw	r4,-56(fp)
 2007cd8:	e0bfd217 	ldw	r2,-184(fp)
 2007cdc:	10bff804 	addi	r2,r2,-32
 2007ce0:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 2007ce4:	1884b03a 	or	r2,r3,r2
 2007ce8:	00000506 	br	2007d00 <_dtoa_r+0x2a8>
 2007cec:	e0fff217 	ldw	r3,-56(fp)
 2007cf0:	01000804 	movi	r4,32
 2007cf4:	e0bfd217 	ldw	r2,-184(fp)
 2007cf8:	2085c83a 	sub	r2,r4,r2
 2007cfc:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2007d00:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 2007d04:	e13fe817 	ldw	r4,-96(fp)
 2007d08:	2012f400 	call	2012f40 <__floatunsidf>
 2007d0c:	1009883a 	mov	r4,r2
 2007d10:	180b883a 	mov	r5,r3
 2007d14:	e13ff415 	stw	r4,-48(fp)
 2007d18:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 2007d1c:	e0fff517 	ldw	r3,-44(fp)
 2007d20:	00bf8434 	movhi	r2,65040
 2007d24:	1885883a 	add	r2,r3,r2
 2007d28:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 2007d2c:	e0bfd217 	ldw	r2,-184(fp)
 2007d30:	10bef344 	addi	r2,r2,-1075
 2007d34:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 2007d38:	00800044 	movi	r2,1
 2007d3c:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 2007d40:	e0bff417 	ldw	r2,-48(fp)
 2007d44:	e0fff517 	ldw	r3,-44(fp)
 2007d48:	000d883a 	mov	r6,zero
 2007d4c:	01cffe34 	movhi	r7,16376
 2007d50:	1009883a 	mov	r4,r2
 2007d54:	180b883a 	mov	r5,r3
 2007d58:	20124e80 	call	20124e8 <__subdf3>
 2007d5c:	1009883a 	mov	r4,r2
 2007d60:	180b883a 	mov	r5,r3
 2007d64:	2005883a 	mov	r2,r4
 2007d68:	2807883a 	mov	r3,r5
 2007d6c:	0198dbf4 	movhi	r6,25455
 2007d70:	3190d844 	addi	r6,r6,17249
 2007d74:	01cff4f4 	movhi	r7,16339
 2007d78:	39e1e9c4 	addi	r7,r7,-30809
 2007d7c:	1009883a 	mov	r4,r2
 2007d80:	180b883a 	mov	r5,r3
 2007d84:	2003d640 	call	2003d64 <__muldf3>
 2007d88:	1009883a 	mov	r4,r2
 2007d8c:	180b883a 	mov	r5,r3
 2007d90:	2005883a 	mov	r2,r4
 2007d94:	2807883a 	mov	r3,r5
 2007d98:	01a2d874 	movhi	r6,35681
 2007d9c:	31b22cc4 	addi	r6,r6,-14157
 2007da0:	01cff1f4 	movhi	r7,16327
 2007da4:	39e28a04 	addi	r7,r7,-30168
 2007da8:	1009883a 	mov	r4,r2
 2007dac:	180b883a 	mov	r5,r3
 2007db0:	2011bb40 	call	2011bb4 <__adddf3>
 2007db4:	1009883a 	mov	r4,r2
 2007db8:	180b883a 	mov	r5,r3
 2007dbc:	2025883a 	mov	r18,r4
 2007dc0:	2827883a 	mov	r19,r5
 2007dc4:	e13fd217 	ldw	r4,-184(fp)
 2007dc8:	2012e640 	call	2012e64 <__floatsidf>
 2007dcc:	1011883a 	mov	r8,r2
 2007dd0:	1813883a 	mov	r9,r3
 2007dd4:	019427f4 	movhi	r6,20639
 2007dd8:	319e7ec4 	addi	r6,r6,31227
 2007ddc:	01cff4f4 	movhi	r7,16339
 2007de0:	39d104c4 	addi	r7,r7,17427
 2007de4:	4009883a 	mov	r4,r8
 2007de8:	480b883a 	mov	r5,r9
 2007dec:	2003d640 	call	2003d64 <__muldf3>
 2007df0:	1009883a 	mov	r4,r2
 2007df4:	180b883a 	mov	r5,r3
 2007df8:	2005883a 	mov	r2,r4
 2007dfc:	2807883a 	mov	r3,r5
 2007e00:	100d883a 	mov	r6,r2
 2007e04:	180f883a 	mov	r7,r3
 2007e08:	9009883a 	mov	r4,r18
 2007e0c:	980b883a 	mov	r5,r19
 2007e10:	2011bb40 	call	2011bb4 <__adddf3>
 2007e14:	1009883a 	mov	r4,r2
 2007e18:	180b883a 	mov	r5,r3
 2007e1c:	e13fe515 	stw	r4,-108(fp)
 2007e20:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 2007e24:	e13fe517 	ldw	r4,-108(fp)
 2007e28:	e17fe617 	ldw	r5,-104(fp)
 2007e2c:	2012de40 	call	2012de4 <__fixdfsi>
 2007e30:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 2007e34:	000d883a 	mov	r6,zero
 2007e38:	000f883a 	mov	r7,zero
 2007e3c:	e13fe517 	ldw	r4,-108(fp)
 2007e40:	e17fe617 	ldw	r5,-104(fp)
 2007e44:	2003c700 	call	2003c70 <__ledf2>
 2007e48:	10000d0e 	bge	r2,zero,2007e80 <_dtoa_r+0x428>
 2007e4c:	e13fd717 	ldw	r4,-164(fp)
 2007e50:	2012e640 	call	2012e64 <__floatsidf>
 2007e54:	1011883a 	mov	r8,r2
 2007e58:	1813883a 	mov	r9,r3
 2007e5c:	e1bfe517 	ldw	r6,-108(fp)
 2007e60:	e1ffe617 	ldw	r7,-104(fp)
 2007e64:	4009883a 	mov	r4,r8
 2007e68:	480b883a 	mov	r5,r9
 2007e6c:	20124600 	call	2012460 <__eqdf2>
 2007e70:	10000326 	beq	r2,zero,2007e80 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 2007e74:	e0bfd717 	ldw	r2,-164(fp)
 2007e78:	10bfffc4 	addi	r2,r2,-1
 2007e7c:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 2007e80:	00800044 	movi	r2,1
 2007e84:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 2007e88:	e0bfd717 	ldw	r2,-164(fp)
 2007e8c:	10001616 	blt	r2,zero,2007ee8 <_dtoa_r+0x490>
 2007e90:	e0bfd717 	ldw	r2,-164(fp)
 2007e94:	108005c8 	cmpgei	r2,r2,23
 2007e98:	1000131e 	bne	r2,zero,2007ee8 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 2007e9c:	e0bff217 	ldw	r2,-56(fp)
 2007ea0:	e0fff317 	ldw	r3,-52(fp)
 2007ea4:	010080b4 	movhi	r4,514
 2007ea8:	213a2e04 	addi	r4,r4,-5960
 2007eac:	e17fd717 	ldw	r5,-164(fp)
 2007eb0:	280a90fa 	slli	r5,r5,3
 2007eb4:	214d883a 	add	r6,r4,r5
 2007eb8:	31000017 	ldw	r4,0(r6)
 2007ebc:	31400117 	ldw	r5,4(r6)
 2007ec0:	200d883a 	mov	r6,r4
 2007ec4:	280f883a 	mov	r7,r5
 2007ec8:	1009883a 	mov	r4,r2
 2007ecc:	180b883a 	mov	r5,r3
 2007ed0:	2003c700 	call	2003c70 <__ledf2>
 2007ed4:	1000030e 	bge	r2,zero,2007ee4 <_dtoa_r+0x48c>
	k--;
 2007ed8:	e0bfd717 	ldw	r2,-164(fp)
 2007edc:	10bfffc4 	addi	r2,r2,-1
 2007ee0:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 2007ee4:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 2007ee8:	e0fff017 	ldw	r3,-64(fp)
 2007eec:	e0bfd217 	ldw	r2,-184(fp)
 2007ef0:	1885c83a 	sub	r2,r3,r2
 2007ef4:	10bfffc4 	addi	r2,r2,-1
 2007ef8:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 2007efc:	e0bfd617 	ldw	r2,-168(fp)
 2007f00:	10000416 	blt	r2,zero,2007f14 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 2007f04:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 2007f08:	e0bfd617 	ldw	r2,-168(fp)
 2007f0c:	e0bfdc15 	stw	r2,-144(fp)
 2007f10:	00000406 	br	2007f24 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 2007f14:	e0bfd617 	ldw	r2,-168(fp)
 2007f18:	0085c83a 	sub	r2,zero,r2
 2007f1c:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 2007f20:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 2007f24:	e0bfd717 	ldw	r2,-164(fp)
 2007f28:	10000816 	blt	r2,zero,2007f4c <_dtoa_r+0x4f4>
    {
      b5 = 0;
 2007f2c:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 2007f30:	e0bfd717 	ldw	r2,-164(fp)
 2007f34:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 2007f38:	e0ffdc17 	ldw	r3,-144(fp)
 2007f3c:	e0bfd717 	ldw	r2,-164(fp)
 2007f40:	1885883a 	add	r2,r3,r2
 2007f44:	e0bfdc15 	stw	r2,-144(fp)
 2007f48:	00000806 	br	2007f6c <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 2007f4c:	e0ffcf17 	ldw	r3,-196(fp)
 2007f50:	e0bfd717 	ldw	r2,-164(fp)
 2007f54:	1885c83a 	sub	r2,r3,r2
 2007f58:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 2007f5c:	e0bfd717 	ldw	r2,-164(fp)
 2007f60:	0085c83a 	sub	r2,zero,r2
 2007f64:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 2007f68:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 2007f6c:	e0bffb17 	ldw	r2,-20(fp)
 2007f70:	10000316 	blt	r2,zero,2007f80 <_dtoa_r+0x528>
 2007f74:	e0bffb17 	ldw	r2,-20(fp)
 2007f78:	10800290 	cmplti	r2,r2,10
 2007f7c:	1000011e 	bne	r2,zero,2007f84 <_dtoa_r+0x52c>
    mode = 0;
 2007f80:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 2007f84:	00800044 	movi	r2,1
 2007f88:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 2007f8c:	e0bffb17 	ldw	r2,-20(fp)
 2007f90:	10800190 	cmplti	r2,r2,6
 2007f94:	1000041e 	bne	r2,zero,2007fa8 <_dtoa_r+0x550>
    {
      mode -= 4;
 2007f98:	e0bffb17 	ldw	r2,-20(fp)
 2007f9c:	10bfff04 	addi	r2,r2,-4
 2007fa0:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 2007fa4:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 2007fa8:	00800044 	movi	r2,1
 2007fac:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 2007fb0:	00bfffc4 	movi	r2,-1
 2007fb4:	e0bfd515 	stw	r2,-172(fp)
 2007fb8:	e0bfd517 	ldw	r2,-172(fp)
 2007fbc:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 2007fc0:	e0bffb17 	ldw	r2,-20(fp)
 2007fc4:	108001a8 	cmpgeui	r2,r2,6
 2007fc8:	10002c1e 	bne	r2,zero,200807c <_dtoa_r+0x624>
 2007fcc:	e0bffb17 	ldw	r2,-20(fp)
 2007fd0:	100690ba 	slli	r3,r2,2
 2007fd4:	00808034 	movhi	r2,512
 2007fd8:	109ffa04 	addi	r2,r2,32744
 2007fdc:	1885883a 	add	r2,r3,r2
 2007fe0:	10800017 	ldw	r2,0(r2)
 2007fe4:	1000683a 	jmp	r2
 2007fe8:	02008000 	call	200800 <__alt_mem_mem_Nios_PI+0x800>
 2007fec:	02008000 	call	200800 <__alt_mem_mem_Nios_PI+0x800>
 2007ff0:	02008010 	cmplti	r8,zero,512
 2007ff4:	02008040 	call	200804 <__alt_mem_mem_Nios_PI+0x804>
 2007ff8:	02008014 	movui	r8,512
 2007ffc:	02008044 	movi	r8,513
    {
    case 0:
    case 1:
      i = 18;
 2008000:	00800484 	movi	r2,18
 2008004:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 2008008:	e0000215 	stw	zero,8(fp)
      break;
 200800c:	00001b06 	br	200807c <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 2008010:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 2008014:	e0800217 	ldw	r2,8(fp)
 2008018:	00800216 	blt	zero,r2,2008024 <_dtoa_r+0x5cc>
	ndigits = 1;
 200801c:	00800044 	movi	r2,1
 2008020:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 2008024:	e0800217 	ldw	r2,8(fp)
 2008028:	e0bfd215 	stw	r2,-184(fp)
 200802c:	e0bfd217 	ldw	r2,-184(fp)
 2008030:	e0bfd515 	stw	r2,-172(fp)
 2008034:	e0bfd517 	ldw	r2,-172(fp)
 2008038:	e0bfd415 	stw	r2,-176(fp)
      break;
 200803c:	00000f06 	br	200807c <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 2008040:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 2008044:	e0c00217 	ldw	r3,8(fp)
 2008048:	e0bfd717 	ldw	r2,-164(fp)
 200804c:	1885883a 	add	r2,r3,r2
 2008050:	10800044 	addi	r2,r2,1
 2008054:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 2008058:	e0bfd217 	ldw	r2,-184(fp)
 200805c:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 2008060:	e0bfd217 	ldw	r2,-184(fp)
 2008064:	10bfffc4 	addi	r2,r2,-1
 2008068:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200806c:	e0bfd217 	ldw	r2,-184(fp)
 2008070:	00800216 	blt	zero,r2,200807c <_dtoa_r+0x624>
	i = 1;
 2008074:	00800044 	movi	r2,1
 2008078:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200807c:	00800104 	movi	r2,4
 2008080:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2008084:	e0bff817 	ldw	r2,-32(fp)
 2008088:	10001115 	stw	zero,68(r2)
 200808c:	00000806 	br	20080b0 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 2008090:	e0bff817 	ldw	r2,-32(fp)
 2008094:	10801117 	ldw	r2,68(r2)
 2008098:	10c00044 	addi	r3,r2,1
 200809c:	e0bff817 	ldw	r2,-32(fp)
 20080a0:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 20080a4:	e0bfd617 	ldw	r2,-168(fp)
 20080a8:	1085883a 	add	r2,r2,r2
 20080ac:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 20080b0:	e0bfd617 	ldw	r2,-168(fp)
 20080b4:	10800504 	addi	r2,r2,20
 20080b8:	e0ffd217 	ldw	r3,-184(fp)
 20080bc:	18bff42e 	bgeu	r3,r2,2008090 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 20080c0:	e0bff817 	ldw	r2,-32(fp)
 20080c4:	10801117 	ldw	r2,68(r2)
 20080c8:	100b883a 	mov	r5,r2
 20080cc:	e13ff817 	ldw	r4,-32(fp)
 20080d0:	200c4f40 	call	200c4f4 <_Balloc>
 20080d4:	1007883a 	mov	r3,r2
 20080d8:	e0bff817 	ldw	r2,-32(fp)
 20080dc:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 20080e0:	e0bff817 	ldw	r2,-32(fp)
 20080e4:	10801017 	ldw	r2,64(r2)
 20080e8:	e0bfe915 	stw	r2,-92(fp)
 20080ec:	e0bfe917 	ldw	r2,-92(fp)
 20080f0:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 20080f4:	e0bfd417 	ldw	r2,-176(fp)
 20080f8:	10021616 	blt	r2,zero,2008954 <_dtoa_r+0xefc>
 20080fc:	e0bfd417 	ldw	r2,-176(fp)
 2008100:	108003c8 	cmpgei	r2,r2,15
 2008104:	1002131e 	bne	r2,zero,2008954 <_dtoa_r+0xefc>
 2008108:	e0bfdf17 	ldw	r2,-132(fp)
 200810c:	10021126 	beq	r2,zero,2008954 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 2008110:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 2008114:	e0bff217 	ldw	r2,-56(fp)
 2008118:	e0fff317 	ldw	r3,-52(fp)
 200811c:	e0bff415 	stw	r2,-48(fp)
 2008120:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 2008124:	e0bfd717 	ldw	r2,-164(fp)
 2008128:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200812c:	e0bfd417 	ldw	r2,-176(fp)
 2008130:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 2008134:	00800084 	movi	r2,2
 2008138:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200813c:	e0bfd717 	ldw	r2,-164(fp)
 2008140:	0080540e 	bge	zero,r2,2008294 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 2008144:	e0bfd717 	ldw	r2,-164(fp)
 2008148:	10c003cc 	andi	r3,r2,15
 200814c:	008080b4 	movhi	r2,514
 2008150:	10ba2e04 	addi	r2,r2,-5960
 2008154:	180690fa 	slli	r3,r3,3
 2008158:	10c5883a 	add	r2,r2,r3
 200815c:	10c00017 	ldw	r3,0(r2)
 2008160:	e0ffe515 	stw	r3,-108(fp)
 2008164:	10800117 	ldw	r2,4(r2)
 2008168:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200816c:	e0bfd717 	ldw	r2,-164(fp)
 2008170:	1005d13a 	srai	r2,r2,4
 2008174:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 2008178:	e0bfd617 	ldw	r2,-168(fp)
 200817c:	1080040c 	andi	r2,r2,16
 2008180:	10003426 	beq	r2,zero,2008254 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 2008184:	e0bfd617 	ldw	r2,-168(fp)
 2008188:	108003cc 	andi	r2,r2,15
 200818c:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 2008190:	e0bff217 	ldw	r2,-56(fp)
 2008194:	e0fff317 	ldw	r3,-52(fp)
 2008198:	018080b4 	movhi	r6,514
 200819c:	31ba6004 	addi	r6,r6,-5760
 20081a0:	31000817 	ldw	r4,32(r6)
 20081a4:	31400917 	ldw	r5,36(r6)
 20081a8:	200d883a 	mov	r6,r4
 20081ac:	280f883a 	mov	r7,r5
 20081b0:	1009883a 	mov	r4,r2
 20081b4:	180b883a 	mov	r5,r3
 20081b8:	20032ac0 	call	20032ac <__divdf3>
 20081bc:	1009883a 	mov	r4,r2
 20081c0:	180b883a 	mov	r5,r3
 20081c4:	2005883a 	mov	r2,r4
 20081c8:	2807883a 	mov	r3,r5
 20081cc:	e0bff215 	stw	r2,-56(fp)
 20081d0:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 20081d4:	e0bfd317 	ldw	r2,-180(fp)
 20081d8:	10800044 	addi	r2,r2,1
 20081dc:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 20081e0:	00001c06 	br	2008254 <_dtoa_r+0x7fc>
	    if (j & 1)
 20081e4:	e0bfd617 	ldw	r2,-168(fp)
 20081e8:	1080004c 	andi	r2,r2,1
 20081ec:	10001326 	beq	r2,zero,200823c <_dtoa_r+0x7e4>
	      {
		ieps++;
 20081f0:	e0bfd317 	ldw	r2,-180(fp)
 20081f4:	10800044 	addi	r2,r2,1
 20081f8:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 20081fc:	008080b4 	movhi	r2,514
 2008200:	10ba6004 	addi	r2,r2,-5760
 2008204:	e0ffd217 	ldw	r3,-184(fp)
 2008208:	180690fa 	slli	r3,r3,3
 200820c:	10c9883a 	add	r4,r2,r3
 2008210:	20800017 	ldw	r2,0(r4)
 2008214:	20c00117 	ldw	r3,4(r4)
 2008218:	100d883a 	mov	r6,r2
 200821c:	180f883a 	mov	r7,r3
 2008220:	e13fe517 	ldw	r4,-108(fp)
 2008224:	e17fe617 	ldw	r5,-104(fp)
 2008228:	2003d640 	call	2003d64 <__muldf3>
 200822c:	1009883a 	mov	r4,r2
 2008230:	180b883a 	mov	r5,r3
 2008234:	e13fe515 	stw	r4,-108(fp)
 2008238:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200823c:	e0bfd617 	ldw	r2,-168(fp)
 2008240:	1005d07a 	srai	r2,r2,1
 2008244:	e0bfd615 	stw	r2,-168(fp)
 2008248:	e0bfd217 	ldw	r2,-184(fp)
 200824c:	10800044 	addi	r2,r2,1
 2008250:	e0bfd215 	stw	r2,-184(fp)
 2008254:	e0bfd617 	ldw	r2,-168(fp)
 2008258:	103fe21e 	bne	r2,zero,20081e4 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200825c:	e0bff217 	ldw	r2,-56(fp)
 2008260:	e0fff317 	ldw	r3,-52(fp)
 2008264:	e1bfe517 	ldw	r6,-108(fp)
 2008268:	e1ffe617 	ldw	r7,-104(fp)
 200826c:	1009883a 	mov	r4,r2
 2008270:	180b883a 	mov	r5,r3
 2008274:	20032ac0 	call	20032ac <__divdf3>
 2008278:	1009883a 	mov	r4,r2
 200827c:	180b883a 	mov	r5,r3
 2008280:	2005883a 	mov	r2,r4
 2008284:	2807883a 	mov	r3,r5
 2008288:	e0bff215 	stw	r2,-56(fp)
 200828c:	e0fff315 	stw	r3,-52(fp)
 2008290:	00004006 	br	2008394 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 2008294:	e0bfd717 	ldw	r2,-164(fp)
 2008298:	0085c83a 	sub	r2,zero,r2
 200829c:	e0bfec15 	stw	r2,-80(fp)
 20082a0:	e0bfec17 	ldw	r2,-80(fp)
 20082a4:	10003b26 	beq	r2,zero,2008394 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 20082a8:	e0bff217 	ldw	r2,-56(fp)
 20082ac:	e0fff317 	ldw	r3,-52(fp)
 20082b0:	e13fec17 	ldw	r4,-80(fp)
 20082b4:	214003cc 	andi	r5,r4,15
 20082b8:	010080b4 	movhi	r4,514
 20082bc:	213a2e04 	addi	r4,r4,-5960
 20082c0:	280a90fa 	slli	r5,r5,3
 20082c4:	214d883a 	add	r6,r4,r5
 20082c8:	31000017 	ldw	r4,0(r6)
 20082cc:	31400117 	ldw	r5,4(r6)
 20082d0:	200d883a 	mov	r6,r4
 20082d4:	280f883a 	mov	r7,r5
 20082d8:	1009883a 	mov	r4,r2
 20082dc:	180b883a 	mov	r5,r3
 20082e0:	2003d640 	call	2003d64 <__muldf3>
 20082e4:	1009883a 	mov	r4,r2
 20082e8:	180b883a 	mov	r5,r3
 20082ec:	2005883a 	mov	r2,r4
 20082f0:	2807883a 	mov	r3,r5
 20082f4:	e0bff215 	stw	r2,-56(fp)
 20082f8:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 20082fc:	e0bfec17 	ldw	r2,-80(fp)
 2008300:	1005d13a 	srai	r2,r2,4
 2008304:	e0bfd615 	stw	r2,-168(fp)
 2008308:	00002006 	br	200838c <_dtoa_r+0x934>
	    if (j & 1)
 200830c:	e0bfd617 	ldw	r2,-168(fp)
 2008310:	1080004c 	andi	r2,r2,1
 2008314:	10001726 	beq	r2,zero,2008374 <_dtoa_r+0x91c>
	      {
		ieps++;
 2008318:	e0bfd317 	ldw	r2,-180(fp)
 200831c:	10800044 	addi	r2,r2,1
 2008320:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 2008324:	e0bff217 	ldw	r2,-56(fp)
 2008328:	e0fff317 	ldw	r3,-52(fp)
 200832c:	010080b4 	movhi	r4,514
 2008330:	213a6004 	addi	r4,r4,-5760
 2008334:	e17fd217 	ldw	r5,-184(fp)
 2008338:	280a90fa 	slli	r5,r5,3
 200833c:	214d883a 	add	r6,r4,r5
 2008340:	31000017 	ldw	r4,0(r6)
 2008344:	31400117 	ldw	r5,4(r6)
 2008348:	200d883a 	mov	r6,r4
 200834c:	280f883a 	mov	r7,r5
 2008350:	1009883a 	mov	r4,r2
 2008354:	180b883a 	mov	r5,r3
 2008358:	2003d640 	call	2003d64 <__muldf3>
 200835c:	1009883a 	mov	r4,r2
 2008360:	180b883a 	mov	r5,r3
 2008364:	2005883a 	mov	r2,r4
 2008368:	2807883a 	mov	r3,r5
 200836c:	e0bff215 	stw	r2,-56(fp)
 2008370:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 2008374:	e0bfd617 	ldw	r2,-168(fp)
 2008378:	1005d07a 	srai	r2,r2,1
 200837c:	e0bfd615 	stw	r2,-168(fp)
 2008380:	e0bfd217 	ldw	r2,-184(fp)
 2008384:	10800044 	addi	r2,r2,1
 2008388:	e0bfd215 	stw	r2,-184(fp)
 200838c:	e0bfd617 	ldw	r2,-168(fp)
 2008390:	103fde1e 	bne	r2,zero,200830c <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 2008394:	e0bfd817 	ldw	r2,-160(fp)
 2008398:	10002126 	beq	r2,zero,2008420 <_dtoa_r+0x9c8>
 200839c:	e0bff217 	ldw	r2,-56(fp)
 20083a0:	e0fff317 	ldw	r3,-52(fp)
 20083a4:	000d883a 	mov	r6,zero
 20083a8:	01cffc34 	movhi	r7,16368
 20083ac:	1009883a 	mov	r4,r2
 20083b0:	180b883a 	mov	r5,r3
 20083b4:	2003c700 	call	2003c70 <__ledf2>
 20083b8:	1000190e 	bge	r2,zero,2008420 <_dtoa_r+0x9c8>
 20083bc:	e0bfd417 	ldw	r2,-176(fp)
 20083c0:	0080170e 	bge	zero,r2,2008420 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 20083c4:	e0bfd517 	ldw	r2,-172(fp)
 20083c8:	0081550e 	bge	zero,r2,2008920 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 20083cc:	e0bfd517 	ldw	r2,-172(fp)
 20083d0:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 20083d4:	e0bfd717 	ldw	r2,-164(fp)
 20083d8:	10bfffc4 	addi	r2,r2,-1
 20083dc:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 20083e0:	e0bff217 	ldw	r2,-56(fp)
 20083e4:	e0fff317 	ldw	r3,-52(fp)
 20083e8:	000d883a 	mov	r6,zero
 20083ec:	01d00934 	movhi	r7,16420
 20083f0:	1009883a 	mov	r4,r2
 20083f4:	180b883a 	mov	r5,r3
 20083f8:	2003d640 	call	2003d64 <__muldf3>
 20083fc:	1009883a 	mov	r4,r2
 2008400:	180b883a 	mov	r5,r3
 2008404:	2005883a 	mov	r2,r4
 2008408:	2807883a 	mov	r3,r5
 200840c:	e0bff215 	stw	r2,-56(fp)
 2008410:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 2008414:	e0bfd317 	ldw	r2,-180(fp)
 2008418:	10800044 	addi	r2,r2,1
 200841c:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 2008420:	e13fd317 	ldw	r4,-180(fp)
 2008424:	2012e640 	call	2012e64 <__floatsidf>
 2008428:	1011883a 	mov	r8,r2
 200842c:	1813883a 	mov	r9,r3
 2008430:	e0bff217 	ldw	r2,-56(fp)
 2008434:	e0fff317 	ldw	r3,-52(fp)
 2008438:	100d883a 	mov	r6,r2
 200843c:	180f883a 	mov	r7,r3
 2008440:	4009883a 	mov	r4,r8
 2008444:	480b883a 	mov	r5,r9
 2008448:	2003d640 	call	2003d64 <__muldf3>
 200844c:	1009883a 	mov	r4,r2
 2008450:	180b883a 	mov	r5,r3
 2008454:	2005883a 	mov	r2,r4
 2008458:	2807883a 	mov	r3,r5
 200845c:	000d883a 	mov	r6,zero
 2008460:	01d00734 	movhi	r7,16412
 2008464:	1009883a 	mov	r4,r2
 2008468:	180b883a 	mov	r5,r3
 200846c:	2011bb40 	call	2011bb4 <__adddf3>
 2008470:	1009883a 	mov	r4,r2
 2008474:	180b883a 	mov	r5,r3
 2008478:	2005883a 	mov	r2,r4
 200847c:	2807883a 	mov	r3,r5
 2008480:	e0bff615 	stw	r2,-40(fp)
 2008484:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 2008488:	e0fff717 	ldw	r3,-36(fp)
 200848c:	00bf3034 	movhi	r2,64704
 2008490:	1885883a 	add	r2,r3,r2
 2008494:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 2008498:	e0bfd417 	ldw	r2,-176(fp)
 200849c:	1000271e 	bne	r2,zero,200853c <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 20084a0:	e03fe315 	stw	zero,-116(fp)
 20084a4:	e0bfe317 	ldw	r2,-116(fp)
 20084a8:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 20084ac:	e0bff217 	ldw	r2,-56(fp)
 20084b0:	e0fff317 	ldw	r3,-52(fp)
 20084b4:	000d883a 	mov	r6,zero
 20084b8:	01d00534 	movhi	r7,16404
 20084bc:	1009883a 	mov	r4,r2
 20084c0:	180b883a 	mov	r5,r3
 20084c4:	20124e80 	call	20124e8 <__subdf3>
 20084c8:	1009883a 	mov	r4,r2
 20084cc:	180b883a 	mov	r5,r3
 20084d0:	2005883a 	mov	r2,r4
 20084d4:	2807883a 	mov	r3,r5
 20084d8:	e0bff215 	stw	r2,-56(fp)
 20084dc:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 20084e0:	e0bff217 	ldw	r2,-56(fp)
 20084e4:	e0fff317 	ldw	r3,-52(fp)
 20084e8:	e13ff617 	ldw	r4,-40(fp)
 20084ec:	e17ff717 	ldw	r5,-36(fp)
 20084f0:	200d883a 	mov	r6,r4
 20084f4:	280f883a 	mov	r7,r5
 20084f8:	1009883a 	mov	r4,r2
 20084fc:	180b883a 	mov	r5,r3
 2008500:	2003b940 	call	2003b94 <__gedf2>
 2008504:	0082eb16 	blt	zero,r2,20090b4 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 2008508:	e23ff217 	ldw	r8,-56(fp)
 200850c:	e27ff317 	ldw	r9,-52(fp)
 2008510:	e0bff617 	ldw	r2,-40(fp)
 2008514:	e0fff717 	ldw	r3,-36(fp)
 2008518:	1021883a 	mov	r16,r2
 200851c:	1c60003c 	xorhi	r17,r3,32768
 2008520:	800d883a 	mov	r6,r16
 2008524:	880f883a 	mov	r7,r17
 2008528:	4009883a 	mov	r4,r8
 200852c:	480b883a 	mov	r5,r9
 2008530:	2003c700 	call	2003c70 <__ledf2>
 2008534:	1002da16 	blt	r2,zero,20090a0 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 2008538:	0000fc06 	br	200892c <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200853c:	e0bfd917 	ldw	r2,-156(fp)
 2008540:	10007a26 	beq	r2,zero,200872c <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 2008544:	e0bfd417 	ldw	r2,-176(fp)
 2008548:	10ffffc4 	addi	r3,r2,-1
 200854c:	008080b4 	movhi	r2,514
 2008550:	10ba2e04 	addi	r2,r2,-5960
 2008554:	180690fa 	slli	r3,r3,3
 2008558:	10c9883a 	add	r4,r2,r3
 200855c:	20800017 	ldw	r2,0(r4)
 2008560:	20c00117 	ldw	r3,4(r4)
 2008564:	100d883a 	mov	r6,r2
 2008568:	180f883a 	mov	r7,r3
 200856c:	0009883a 	mov	r4,zero
 2008570:	014ff834 	movhi	r5,16352
 2008574:	20032ac0 	call	20032ac <__divdf3>
 2008578:	1009883a 	mov	r4,r2
 200857c:	180b883a 	mov	r5,r3
 2008580:	2011883a 	mov	r8,r4
 2008584:	2813883a 	mov	r9,r5
 2008588:	e0bff617 	ldw	r2,-40(fp)
 200858c:	e0fff717 	ldw	r3,-36(fp)
 2008590:	100d883a 	mov	r6,r2
 2008594:	180f883a 	mov	r7,r3
 2008598:	4009883a 	mov	r4,r8
 200859c:	480b883a 	mov	r5,r9
 20085a0:	20124e80 	call	20124e8 <__subdf3>
 20085a4:	1009883a 	mov	r4,r2
 20085a8:	180b883a 	mov	r5,r3
 20085ac:	2005883a 	mov	r2,r4
 20085b0:	2807883a 	mov	r3,r5
 20085b4:	e0bff615 	stw	r2,-40(fp)
 20085b8:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 20085bc:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 20085c0:	e0bff217 	ldw	r2,-56(fp)
 20085c4:	e0fff317 	ldw	r3,-52(fp)
 20085c8:	1009883a 	mov	r4,r2
 20085cc:	180b883a 	mov	r5,r3
 20085d0:	2012de40 	call	2012de4 <__fixdfsi>
 20085d4:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 20085d8:	e43ff217 	ldw	r16,-56(fp)
 20085dc:	e47ff317 	ldw	r17,-52(fp)
 20085e0:	e13fed17 	ldw	r4,-76(fp)
 20085e4:	2012e640 	call	2012e64 <__floatsidf>
 20085e8:	1009883a 	mov	r4,r2
 20085ec:	180b883a 	mov	r5,r3
 20085f0:	200d883a 	mov	r6,r4
 20085f4:	280f883a 	mov	r7,r5
 20085f8:	8009883a 	mov	r4,r16
 20085fc:	880b883a 	mov	r5,r17
 2008600:	20124e80 	call	20124e8 <__subdf3>
 2008604:	1009883a 	mov	r4,r2
 2008608:	180b883a 	mov	r5,r3
 200860c:	2005883a 	mov	r2,r4
 2008610:	2807883a 	mov	r3,r5
 2008614:	e0bff215 	stw	r2,-56(fp)
 2008618:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200861c:	e0bfe717 	ldw	r2,-100(fp)
 2008620:	10c00044 	addi	r3,r2,1
 2008624:	e0ffe715 	stw	r3,-100(fp)
 2008628:	e0ffed17 	ldw	r3,-76(fp)
 200862c:	18c00c04 	addi	r3,r3,48
 2008630:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 2008634:	e0bff217 	ldw	r2,-56(fp)
 2008638:	e0fff317 	ldw	r3,-52(fp)
 200863c:	e13ff617 	ldw	r4,-40(fp)
 2008640:	e17ff717 	ldw	r5,-36(fp)
 2008644:	200d883a 	mov	r6,r4
 2008648:	280f883a 	mov	r7,r5
 200864c:	1009883a 	mov	r4,r2
 2008650:	180b883a 	mov	r5,r3
 2008654:	2003c700 	call	2003c70 <__ledf2>
 2008658:	1003c416 	blt	r2,zero,200956c <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200865c:	e0bff217 	ldw	r2,-56(fp)
 2008660:	e0fff317 	ldw	r3,-52(fp)
 2008664:	100d883a 	mov	r6,r2
 2008668:	180f883a 	mov	r7,r3
 200866c:	0009883a 	mov	r4,zero
 2008670:	014ffc34 	movhi	r5,16368
 2008674:	20124e80 	call	20124e8 <__subdf3>
 2008678:	1009883a 	mov	r4,r2
 200867c:	180b883a 	mov	r5,r3
 2008680:	2011883a 	mov	r8,r4
 2008684:	2813883a 	mov	r9,r5
 2008688:	e0bff617 	ldw	r2,-40(fp)
 200868c:	e0fff717 	ldw	r3,-36(fp)
 2008690:	100d883a 	mov	r6,r2
 2008694:	180f883a 	mov	r7,r3
 2008698:	4009883a 	mov	r4,r8
 200869c:	480b883a 	mov	r5,r9
 20086a0:	2003c700 	call	2003c70 <__ledf2>
 20086a4:	10012916 	blt	r2,zero,2008b4c <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 20086a8:	e0bfd217 	ldw	r2,-184(fp)
 20086ac:	10800044 	addi	r2,r2,1
 20086b0:	e0bfd215 	stw	r2,-184(fp)
 20086b4:	e0ffd217 	ldw	r3,-184(fp)
 20086b8:	e0bfd417 	ldw	r2,-176(fp)
 20086bc:	18809a0e 	bge	r3,r2,2008928 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 20086c0:	e0bff617 	ldw	r2,-40(fp)
 20086c4:	e0fff717 	ldw	r3,-36(fp)
 20086c8:	000d883a 	mov	r6,zero
 20086cc:	01d00934 	movhi	r7,16420
 20086d0:	1009883a 	mov	r4,r2
 20086d4:	180b883a 	mov	r5,r3
 20086d8:	2003d640 	call	2003d64 <__muldf3>
 20086dc:	1009883a 	mov	r4,r2
 20086e0:	180b883a 	mov	r5,r3
 20086e4:	2005883a 	mov	r2,r4
 20086e8:	2807883a 	mov	r3,r5
 20086ec:	e0bff615 	stw	r2,-40(fp)
 20086f0:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 20086f4:	e0bff217 	ldw	r2,-56(fp)
 20086f8:	e0fff317 	ldw	r3,-52(fp)
 20086fc:	000d883a 	mov	r6,zero
 2008700:	01d00934 	movhi	r7,16420
 2008704:	1009883a 	mov	r4,r2
 2008708:	180b883a 	mov	r5,r3
 200870c:	2003d640 	call	2003d64 <__muldf3>
 2008710:	1009883a 	mov	r4,r2
 2008714:	180b883a 	mov	r5,r3
 2008718:	2005883a 	mov	r2,r4
 200871c:	2807883a 	mov	r3,r5
 2008720:	e0bff215 	stw	r2,-56(fp)
 2008724:	e0fff315 	stw	r3,-52(fp)
	    }
 2008728:	003fa506 	br	20085c0 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 200872c:	e0bff617 	ldw	r2,-40(fp)
 2008730:	e0fff717 	ldw	r3,-36(fp)
 2008734:	e13fd417 	ldw	r4,-176(fp)
 2008738:	217fffc4 	addi	r5,r4,-1
 200873c:	010080b4 	movhi	r4,514
 2008740:	213a2e04 	addi	r4,r4,-5960
 2008744:	280a90fa 	slli	r5,r5,3
 2008748:	214d883a 	add	r6,r4,r5
 200874c:	31000017 	ldw	r4,0(r6)
 2008750:	31400117 	ldw	r5,4(r6)
 2008754:	200d883a 	mov	r6,r4
 2008758:	280f883a 	mov	r7,r5
 200875c:	1009883a 	mov	r4,r2
 2008760:	180b883a 	mov	r5,r3
 2008764:	2003d640 	call	2003d64 <__muldf3>
 2008768:	1009883a 	mov	r4,r2
 200876c:	180b883a 	mov	r5,r3
 2008770:	2005883a 	mov	r2,r4
 2008774:	2807883a 	mov	r3,r5
 2008778:	e0bff615 	stw	r2,-40(fp)
 200877c:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 2008780:	00800044 	movi	r2,1
 2008784:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 2008788:	e0bff217 	ldw	r2,-56(fp)
 200878c:	e0fff317 	ldw	r3,-52(fp)
 2008790:	1009883a 	mov	r4,r2
 2008794:	180b883a 	mov	r5,r3
 2008798:	2012de40 	call	2012de4 <__fixdfsi>
 200879c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 20087a0:	e43ff217 	ldw	r16,-56(fp)
 20087a4:	e47ff317 	ldw	r17,-52(fp)
 20087a8:	e13fed17 	ldw	r4,-76(fp)
 20087ac:	2012e640 	call	2012e64 <__floatsidf>
 20087b0:	1009883a 	mov	r4,r2
 20087b4:	180b883a 	mov	r5,r3
 20087b8:	200d883a 	mov	r6,r4
 20087bc:	280f883a 	mov	r7,r5
 20087c0:	8009883a 	mov	r4,r16
 20087c4:	880b883a 	mov	r5,r17
 20087c8:	20124e80 	call	20124e8 <__subdf3>
 20087cc:	1009883a 	mov	r4,r2
 20087d0:	180b883a 	mov	r5,r3
 20087d4:	2005883a 	mov	r2,r4
 20087d8:	2807883a 	mov	r3,r5
 20087dc:	e0bff215 	stw	r2,-56(fp)
 20087e0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 20087e4:	e0bfe717 	ldw	r2,-100(fp)
 20087e8:	10c00044 	addi	r3,r2,1
 20087ec:	e0ffe715 	stw	r3,-100(fp)
 20087f0:	e0ffed17 	ldw	r3,-76(fp)
 20087f4:	18c00c04 	addi	r3,r3,48
 20087f8:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 20087fc:	e0ffd217 	ldw	r3,-184(fp)
 2008800:	e0bfd417 	ldw	r2,-176(fp)
 2008804:	1880351e 	bne	r3,r2,20088dc <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 2008808:	e43ff217 	ldw	r16,-56(fp)
 200880c:	e47ff317 	ldw	r17,-52(fp)
 2008810:	e0bff617 	ldw	r2,-40(fp)
 2008814:	e0fff717 	ldw	r3,-36(fp)
 2008818:	000d883a 	mov	r6,zero
 200881c:	01cff834 	movhi	r7,16352
 2008820:	1009883a 	mov	r4,r2
 2008824:	180b883a 	mov	r5,r3
 2008828:	2011bb40 	call	2011bb4 <__adddf3>
 200882c:	1009883a 	mov	r4,r2
 2008830:	180b883a 	mov	r5,r3
 2008834:	2005883a 	mov	r2,r4
 2008838:	2807883a 	mov	r3,r5
 200883c:	100d883a 	mov	r6,r2
 2008840:	180f883a 	mov	r7,r3
 2008844:	8009883a 	mov	r4,r16
 2008848:	880b883a 	mov	r5,r17
 200884c:	2003b940 	call	2003b94 <__gedf2>
 2008850:	0080c016 	blt	zero,r2,2008b54 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 2008854:	e43ff217 	ldw	r16,-56(fp)
 2008858:	e47ff317 	ldw	r17,-52(fp)
 200885c:	e0bff617 	ldw	r2,-40(fp)
 2008860:	e0fff717 	ldw	r3,-36(fp)
 2008864:	100d883a 	mov	r6,r2
 2008868:	180f883a 	mov	r7,r3
 200886c:	0009883a 	mov	r4,zero
 2008870:	014ff834 	movhi	r5,16352
 2008874:	20124e80 	call	20124e8 <__subdf3>
 2008878:	1009883a 	mov	r4,r2
 200887c:	180b883a 	mov	r5,r3
 2008880:	2005883a 	mov	r2,r4
 2008884:	2807883a 	mov	r3,r5
 2008888:	100d883a 	mov	r6,r2
 200888c:	180f883a 	mov	r7,r3
 2008890:	8009883a 	mov	r4,r16
 2008894:	880b883a 	mov	r5,r17
 2008898:	2003c700 	call	2003c70 <__ledf2>
 200889c:	10000116 	blt	r2,zero,20088a4 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 20088a0:	00002206 	br	200892c <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 20088a4:	e0bfe717 	ldw	r2,-100(fp)
 20088a8:	10bfffc4 	addi	r2,r2,-1
 20088ac:	e0bfe715 	stw	r2,-100(fp)
 20088b0:	e0bfe717 	ldw	r2,-100(fp)
 20088b4:	10800003 	ldbu	r2,0(r2)
 20088b8:	10803fcc 	andi	r2,r2,255
 20088bc:	1080201c 	xori	r2,r2,128
 20088c0:	10bfe004 	addi	r2,r2,-128
 20088c4:	10800c20 	cmpeqi	r2,r2,48
 20088c8:	103ff61e 	bne	r2,zero,20088a4 <_dtoa_r+0xe4c>
		      s++;
 20088cc:	e0bfe717 	ldw	r2,-100(fp)
 20088d0:	10800044 	addi	r2,r2,1
 20088d4:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 20088d8:	00032506 	br	2009570 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 20088dc:	e0bfd217 	ldw	r2,-184(fp)
 20088e0:	10800044 	addi	r2,r2,1
 20088e4:	e0bfd215 	stw	r2,-184(fp)
 20088e8:	e0bff217 	ldw	r2,-56(fp)
 20088ec:	e0fff317 	ldw	r3,-52(fp)
 20088f0:	000d883a 	mov	r6,zero
 20088f4:	01d00934 	movhi	r7,16420
 20088f8:	1009883a 	mov	r4,r2
 20088fc:	180b883a 	mov	r5,r3
 2008900:	2003d640 	call	2003d64 <__muldf3>
 2008904:	1009883a 	mov	r4,r2
 2008908:	180b883a 	mov	r5,r3
 200890c:	2005883a 	mov	r2,r4
 2008910:	2807883a 	mov	r3,r5
 2008914:	e0bff215 	stw	r2,-56(fp)
 2008918:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 200891c:	003f9a06 	br	2008788 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 2008920:	0001883a 	nop
 2008924:	00000106 	br	200892c <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 2008928:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 200892c:	e0bfe917 	ldw	r2,-92(fp)
 2008930:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 2008934:	e0bff417 	ldw	r2,-48(fp)
 2008938:	e0fff517 	ldw	r3,-44(fp)
 200893c:	e0bff215 	stw	r2,-56(fp)
 2008940:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 2008944:	e0bfea17 	ldw	r2,-88(fp)
 2008948:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 200894c:	e0bfeb17 	ldw	r2,-84(fp)
 2008950:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 2008954:	e0bff117 	ldw	r2,-60(fp)
 2008958:	1000b816 	blt	r2,zero,2008c3c <_dtoa_r+0x11e4>
 200895c:	e0bfd717 	ldw	r2,-164(fp)
 2008960:	108003c8 	cmpgei	r2,r2,15
 2008964:	1000b51e 	bne	r2,zero,2008c3c <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 2008968:	008080b4 	movhi	r2,514
 200896c:	10ba2e04 	addi	r2,r2,-5960
 2008970:	e0ffd717 	ldw	r3,-164(fp)
 2008974:	180690fa 	slli	r3,r3,3
 2008978:	10c5883a 	add	r2,r2,r3
 200897c:	10c00017 	ldw	r3,0(r2)
 2008980:	e0ffe515 	stw	r3,-108(fp)
 2008984:	10800117 	ldw	r2,4(r2)
 2008988:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 200898c:	e0800217 	ldw	r2,8(fp)
 2008990:	1000190e 	bge	r2,zero,20089f8 <_dtoa_r+0xfa0>
 2008994:	e0bfd417 	ldw	r2,-176(fp)
 2008998:	00801716 	blt	zero,r2,20089f8 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 200899c:	e03fe315 	stw	zero,-116(fp)
 20089a0:	e0bfe317 	ldw	r2,-116(fp)
 20089a4:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 20089a8:	e0bfd417 	ldw	r2,-176(fp)
 20089ac:	1001bd16 	blt	r2,zero,20090a4 <_dtoa_r+0x164c>
 20089b0:	e43ff217 	ldw	r16,-56(fp)
 20089b4:	e47ff317 	ldw	r17,-52(fp)
 20089b8:	000d883a 	mov	r6,zero
 20089bc:	01d00534 	movhi	r7,16404
 20089c0:	e13fe517 	ldw	r4,-108(fp)
 20089c4:	e17fe617 	ldw	r5,-104(fp)
 20089c8:	2003d640 	call	2003d64 <__muldf3>
 20089cc:	1009883a 	mov	r4,r2
 20089d0:	180b883a 	mov	r5,r3
 20089d4:	2005883a 	mov	r2,r4
 20089d8:	2807883a 	mov	r3,r5
 20089dc:	100d883a 	mov	r6,r2
 20089e0:	180f883a 	mov	r7,r3
 20089e4:	8009883a 	mov	r4,r16
 20089e8:	880b883a 	mov	r5,r17
 20089ec:	2003c700 	call	2003c70 <__ledf2>
 20089f0:	0081ac0e 	bge	zero,r2,20090a4 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 20089f4:	0001b006 	br	20090b8 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 20089f8:	00800044 	movi	r2,1
 20089fc:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 2008a00:	e0bff217 	ldw	r2,-56(fp)
 2008a04:	e0fff317 	ldw	r3,-52(fp)
 2008a08:	e1bfe517 	ldw	r6,-108(fp)
 2008a0c:	e1ffe617 	ldw	r7,-104(fp)
 2008a10:	1009883a 	mov	r4,r2
 2008a14:	180b883a 	mov	r5,r3
 2008a18:	20032ac0 	call	20032ac <__divdf3>
 2008a1c:	1009883a 	mov	r4,r2
 2008a20:	180b883a 	mov	r5,r3
 2008a24:	2005883a 	mov	r2,r4
 2008a28:	2807883a 	mov	r3,r5
 2008a2c:	1009883a 	mov	r4,r2
 2008a30:	180b883a 	mov	r5,r3
 2008a34:	2012de40 	call	2012de4 <__fixdfsi>
 2008a38:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 2008a3c:	e43ff217 	ldw	r16,-56(fp)
 2008a40:	e47ff317 	ldw	r17,-52(fp)
 2008a44:	e13fed17 	ldw	r4,-76(fp)
 2008a48:	2012e640 	call	2012e64 <__floatsidf>
 2008a4c:	1011883a 	mov	r8,r2
 2008a50:	1813883a 	mov	r9,r3
 2008a54:	e1bfe517 	ldw	r6,-108(fp)
 2008a58:	e1ffe617 	ldw	r7,-104(fp)
 2008a5c:	4009883a 	mov	r4,r8
 2008a60:	480b883a 	mov	r5,r9
 2008a64:	2003d640 	call	2003d64 <__muldf3>
 2008a68:	1009883a 	mov	r4,r2
 2008a6c:	180b883a 	mov	r5,r3
 2008a70:	2005883a 	mov	r2,r4
 2008a74:	2807883a 	mov	r3,r5
 2008a78:	100d883a 	mov	r6,r2
 2008a7c:	180f883a 	mov	r7,r3
 2008a80:	8009883a 	mov	r4,r16
 2008a84:	880b883a 	mov	r5,r17
 2008a88:	20124e80 	call	20124e8 <__subdf3>
 2008a8c:	1009883a 	mov	r4,r2
 2008a90:	180b883a 	mov	r5,r3
 2008a94:	2005883a 	mov	r2,r4
 2008a98:	2807883a 	mov	r3,r5
 2008a9c:	e0bff215 	stw	r2,-56(fp)
 2008aa0:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 2008aa4:	e0bfe717 	ldw	r2,-100(fp)
 2008aa8:	10c00044 	addi	r3,r2,1
 2008aac:	e0ffe715 	stw	r3,-100(fp)
 2008ab0:	e0ffed17 	ldw	r3,-76(fp)
 2008ab4:	18c00c04 	addi	r3,r3,48
 2008ab8:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2008abc:	e0ffd217 	ldw	r3,-184(fp)
 2008ac0:	e0bfd417 	ldw	r2,-176(fp)
 2008ac4:	1880401e 	bne	r3,r2,2008bc8 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 2008ac8:	e0bff217 	ldw	r2,-56(fp)
 2008acc:	e0fff317 	ldw	r3,-52(fp)
 2008ad0:	100d883a 	mov	r6,r2
 2008ad4:	180f883a 	mov	r7,r3
 2008ad8:	1009883a 	mov	r4,r2
 2008adc:	180b883a 	mov	r5,r3
 2008ae0:	2011bb40 	call	2011bb4 <__adddf3>
 2008ae4:	1009883a 	mov	r4,r2
 2008ae8:	180b883a 	mov	r5,r3
 2008aec:	2005883a 	mov	r2,r4
 2008af0:	2807883a 	mov	r3,r5
 2008af4:	e0bff215 	stw	r2,-56(fp)
 2008af8:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 2008afc:	e0bff217 	ldw	r2,-56(fp)
 2008b00:	e0fff317 	ldw	r3,-52(fp)
 2008b04:	e1bfe517 	ldw	r6,-108(fp)
 2008b08:	e1ffe617 	ldw	r7,-104(fp)
 2008b0c:	1009883a 	mov	r4,r2
 2008b10:	180b883a 	mov	r5,r3
 2008b14:	2003b940 	call	2003b94 <__gedf2>
 2008b18:	00801a16 	blt	zero,r2,2008b84 <_dtoa_r+0x112c>
 2008b1c:	e0bff217 	ldw	r2,-56(fp)
 2008b20:	e0fff317 	ldw	r3,-52(fp)
 2008b24:	e1bfe517 	ldw	r6,-108(fp)
 2008b28:	e1ffe617 	ldw	r7,-104(fp)
 2008b2c:	1009883a 	mov	r4,r2
 2008b30:	180b883a 	mov	r5,r3
 2008b34:	20124600 	call	2012460 <__eqdf2>
 2008b38:	10003c1e 	bne	r2,zero,2008c2c <_dtoa_r+0x11d4>
 2008b3c:	e0bfed17 	ldw	r2,-76(fp)
 2008b40:	1080004c 	andi	r2,r2,1
 2008b44:	10003926 	beq	r2,zero,2008c2c <_dtoa_r+0x11d4>
 2008b48:	00000e06 	br	2008b84 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 2008b4c:	0001883a 	nop
 2008b50:	00000c06 	br	2008b84 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 2008b54:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008b58:	00000a06 	br	2008b84 <_dtoa_r+0x112c>
		    if (s == s0)
 2008b5c:	e0ffe717 	ldw	r3,-100(fp)
 2008b60:	e0bfe917 	ldw	r2,-92(fp)
 2008b64:	1880071e 	bne	r3,r2,2008b84 <_dtoa_r+0x112c>
		      {
			k++;
 2008b68:	e0bfd717 	ldw	r2,-164(fp)
 2008b6c:	10800044 	addi	r2,r2,1
 2008b70:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 2008b74:	e0bfe717 	ldw	r2,-100(fp)
 2008b78:	00c00c04 	movi	r3,48
 2008b7c:	10c00005 	stb	r3,0(r2)
			break;
 2008b80:	00000a06 	br	2008bac <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008b84:	e0bfe717 	ldw	r2,-100(fp)
 2008b88:	10bfffc4 	addi	r2,r2,-1
 2008b8c:	e0bfe715 	stw	r2,-100(fp)
 2008b90:	e0bfe717 	ldw	r2,-100(fp)
 2008b94:	10800003 	ldbu	r2,0(r2)
 2008b98:	10803fcc 	andi	r2,r2,255
 2008b9c:	1080201c 	xori	r2,r2,128
 2008ba0:	10bfe004 	addi	r2,r2,-128
 2008ba4:	10800e60 	cmpeqi	r2,r2,57
 2008ba8:	103fec1e 	bne	r2,zero,2008b5c <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 2008bac:	e0bfe717 	ldw	r2,-100(fp)
 2008bb0:	10c00044 	addi	r3,r2,1
 2008bb4:	e0ffe715 	stw	r3,-100(fp)
 2008bb8:	10c00003 	ldbu	r3,0(r2)
 2008bbc:	18c00044 	addi	r3,r3,1
 2008bc0:	10c00005 	stb	r3,0(r2)
		}
	      break;
 2008bc4:	00001906 	br	2008c2c <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 2008bc8:	e0bff217 	ldw	r2,-56(fp)
 2008bcc:	e0fff317 	ldw	r3,-52(fp)
 2008bd0:	000d883a 	mov	r6,zero
 2008bd4:	01d00934 	movhi	r7,16420
 2008bd8:	1009883a 	mov	r4,r2
 2008bdc:	180b883a 	mov	r5,r3
 2008be0:	2003d640 	call	2003d64 <__muldf3>
 2008be4:	1009883a 	mov	r4,r2
 2008be8:	180b883a 	mov	r5,r3
 2008bec:	2005883a 	mov	r2,r4
 2008bf0:	2807883a 	mov	r3,r5
 2008bf4:	e0bff215 	stw	r2,-56(fp)
 2008bf8:	e0fff315 	stw	r3,-52(fp)
 2008bfc:	e0bff217 	ldw	r2,-56(fp)
 2008c00:	e0fff317 	ldw	r3,-52(fp)
 2008c04:	000d883a 	mov	r6,zero
 2008c08:	000f883a 	mov	r7,zero
 2008c0c:	1009883a 	mov	r4,r2
 2008c10:	180b883a 	mov	r5,r3
 2008c14:	20124600 	call	2012460 <__eqdf2>
 2008c18:	10000626 	beq	r2,zero,2008c34 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 2008c1c:	e0bfd217 	ldw	r2,-184(fp)
 2008c20:	10800044 	addi	r2,r2,1
 2008c24:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 2008c28:	003f7506 	br	2008a00 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 2008c2c:	0001883a 	nop
 2008c30:	00024f06 	br	2009570 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 2008c34:	0001883a 	nop
	}
      goto ret1;
 2008c38:	00024d06 	br	2009570 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 2008c3c:	e0bfcf17 	ldw	r2,-196(fp)
 2008c40:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 2008c44:	e0bfd017 	ldw	r2,-192(fp)
 2008c48:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 2008c4c:	e03fe215 	stw	zero,-120(fp)
 2008c50:	e0bfe217 	ldw	r2,-120(fp)
 2008c54:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 2008c58:	e0bfd917 	ldw	r2,-156(fp)
 2008c5c:	10003a26 	beq	r2,zero,2008d48 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 2008c60:	e0bffb17 	ldw	r2,-20(fp)
 2008c64:	10800088 	cmpgei	r2,r2,2
 2008c68:	10000a1e 	bne	r2,zero,2008c94 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008c6c:	e0bfe017 	ldw	r2,-128(fp)
 2008c70:	10000326 	beq	r2,zero,2008c80 <_dtoa_r+0x1228>
 2008c74:	e0bff117 	ldw	r2,-60(fp)
 2008c78:	10810cc4 	addi	r2,r2,1075
 2008c7c:	00000306 	br	2008c8c <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 2008c80:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008c84:	00c00d84 	movi	r3,54
 2008c88:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 2008c8c:	e0bfd215 	stw	r2,-184(fp)
 2008c90:	00002106 	br	2008d18 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 2008c94:	e0bfd417 	ldw	r2,-176(fp)
 2008c98:	10bfffc4 	addi	r2,r2,-1
 2008c9c:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 2008ca0:	e0ffdb17 	ldw	r3,-148(fp)
 2008ca4:	e0bfd617 	ldw	r2,-168(fp)
 2008ca8:	18800516 	blt	r3,r2,2008cc0 <_dtoa_r+0x1268>
	    m5 -= j;
 2008cac:	e0ffdb17 	ldw	r3,-148(fp)
 2008cb0:	e0bfd617 	ldw	r2,-168(fp)
 2008cb4:	1885c83a 	sub	r2,r3,r2
 2008cb8:	e0bfdb15 	stw	r2,-148(fp)
 2008cbc:	00000d06 	br	2008cf4 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 2008cc0:	e0ffd617 	ldw	r3,-168(fp)
 2008cc4:	e0bfdb17 	ldw	r2,-148(fp)
 2008cc8:	1885c83a 	sub	r2,r3,r2
 2008ccc:	e0bfd615 	stw	r2,-168(fp)
 2008cd0:	e0bfd617 	ldw	r2,-168(fp)
 2008cd4:	e0ffdd17 	ldw	r3,-140(fp)
 2008cd8:	1885883a 	add	r2,r3,r2
 2008cdc:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 2008ce0:	e0ffd017 	ldw	r3,-192(fp)
 2008ce4:	e0bfd617 	ldw	r2,-168(fp)
 2008ce8:	1885883a 	add	r2,r3,r2
 2008cec:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 2008cf0:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 2008cf4:	e0bfd417 	ldw	r2,-176(fp)
 2008cf8:	e0bfd215 	stw	r2,-184(fp)
 2008cfc:	e0bfd217 	ldw	r2,-184(fp)
 2008d00:	1000050e 	bge	r2,zero,2008d18 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 2008d04:	e0ffda17 	ldw	r3,-152(fp)
 2008d08:	e0bfd217 	ldw	r2,-184(fp)
 2008d0c:	1885c83a 	sub	r2,r3,r2
 2008d10:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 2008d14:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 2008d18:	e0ffcf17 	ldw	r3,-196(fp)
 2008d1c:	e0bfd217 	ldw	r2,-184(fp)
 2008d20:	1885883a 	add	r2,r3,r2
 2008d24:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 2008d28:	e0ffdc17 	ldw	r3,-144(fp)
 2008d2c:	e0bfd217 	ldw	r2,-184(fp)
 2008d30:	1885883a 	add	r2,r3,r2
 2008d34:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 2008d38:	01400044 	movi	r5,1
 2008d3c:	e13ff817 	ldw	r4,-32(fp)
 2008d40:	200cb3c0 	call	200cb3c <__i2b>
 2008d44:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 2008d48:	e0bfda17 	ldw	r2,-152(fp)
 2008d4c:	0080130e 	bge	zero,r2,2008d9c <_dtoa_r+0x1344>
 2008d50:	e0bfdc17 	ldw	r2,-144(fp)
 2008d54:	0080110e 	bge	zero,r2,2008d9c <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 2008d58:	e0ffda17 	ldw	r3,-152(fp)
 2008d5c:	e0bfdc17 	ldw	r2,-144(fp)
 2008d60:	1880010e 	bge	r3,r2,2008d68 <_dtoa_r+0x1310>
 2008d64:	1805883a 	mov	r2,r3
 2008d68:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 2008d6c:	e0ffcf17 	ldw	r3,-196(fp)
 2008d70:	e0bfd217 	ldw	r2,-184(fp)
 2008d74:	1885c83a 	sub	r2,r3,r2
 2008d78:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 2008d7c:	e0ffda17 	ldw	r3,-152(fp)
 2008d80:	e0bfd217 	ldw	r2,-184(fp)
 2008d84:	1885c83a 	sub	r2,r3,r2
 2008d88:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 2008d8c:	e0ffdc17 	ldw	r3,-144(fp)
 2008d90:	e0bfd217 	ldw	r2,-184(fp)
 2008d94:	1885c83a 	sub	r2,r3,r2
 2008d98:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 2008d9c:	e0bfd017 	ldw	r2,-192(fp)
 2008da0:	0080240e 	bge	zero,r2,2008e34 <_dtoa_r+0x13dc>
    {
      if (leftright)
 2008da4:	e0bfd917 	ldw	r2,-156(fp)
 2008da8:	10001d26 	beq	r2,zero,2008e20 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 2008dac:	e0bfdb17 	ldw	r2,-148(fp)
 2008db0:	00800f0e 	bge	zero,r2,2008df0 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 2008db4:	e1bfdb17 	ldw	r6,-148(fp)
 2008db8:	e17fe317 	ldw	r5,-116(fp)
 2008dbc:	e13ff817 	ldw	r4,-32(fp)
 2008dc0:	200cf640 	call	200cf64 <__pow5mult>
 2008dc4:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 2008dc8:	e1bfe117 	ldw	r6,-124(fp)
 2008dcc:	e17fe317 	ldw	r5,-116(fp)
 2008dd0:	e13ff817 	ldw	r4,-32(fp)
 2008dd4:	200cb940 	call	200cb94 <__multiply>
 2008dd8:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 2008ddc:	e17fe117 	ldw	r5,-124(fp)
 2008de0:	e13ff817 	ldw	r4,-32(fp)
 2008de4:	200c6240 	call	200c624 <_Bfree>
	      b = b1;
 2008de8:	e0bfee17 	ldw	r2,-72(fp)
 2008dec:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 2008df0:	e0ffd017 	ldw	r3,-192(fp)
 2008df4:	e0bfdb17 	ldw	r2,-148(fp)
 2008df8:	1885c83a 	sub	r2,r3,r2
 2008dfc:	e0bfd615 	stw	r2,-168(fp)
 2008e00:	e0bfd617 	ldw	r2,-168(fp)
 2008e04:	10000b26 	beq	r2,zero,2008e34 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 2008e08:	e1bfd617 	ldw	r6,-168(fp)
 2008e0c:	e17fe117 	ldw	r5,-124(fp)
 2008e10:	e13ff817 	ldw	r4,-32(fp)
 2008e14:	200cf640 	call	200cf64 <__pow5mult>
 2008e18:	e0bfe115 	stw	r2,-124(fp)
 2008e1c:	00000506 	br	2008e34 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 2008e20:	e1bfd017 	ldw	r6,-192(fp)
 2008e24:	e17fe117 	ldw	r5,-124(fp)
 2008e28:	e13ff817 	ldw	r4,-32(fp)
 2008e2c:	200cf640 	call	200cf64 <__pow5mult>
 2008e30:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 2008e34:	01400044 	movi	r5,1
 2008e38:	e13ff817 	ldw	r4,-32(fp)
 2008e3c:	200cb3c0 	call	200cb3c <__i2b>
 2008e40:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 2008e44:	e0bfdd17 	ldw	r2,-140(fp)
 2008e48:	0080050e 	bge	zero,r2,2008e60 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 2008e4c:	e1bfdd17 	ldw	r6,-140(fp)
 2008e50:	e17fe417 	ldw	r5,-112(fp)
 2008e54:	e13ff817 	ldw	r4,-32(fp)
 2008e58:	200cf640 	call	200cf64 <__pow5mult>
 2008e5c:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 2008e60:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 2008e64:	e0bffb17 	ldw	r2,-20(fp)
 2008e68:	10800088 	cmpgei	r2,r2,2
 2008e6c:	1000121e 	bne	r2,zero,2008eb8 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 2008e70:	e0bff217 	ldw	r2,-56(fp)
 2008e74:	1000101e 	bne	r2,zero,2008eb8 <_dtoa_r+0x1460>
 2008e78:	e0fff317 	ldw	r3,-52(fp)
 2008e7c:	00800434 	movhi	r2,16
 2008e80:	10bfffc4 	addi	r2,r2,-1
 2008e84:	1884703a 	and	r2,r3,r2
 2008e88:	10000b1e 	bne	r2,zero,2008eb8 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 2008e8c:	e0bff317 	ldw	r2,-52(fp)
 2008e90:	109ffc2c 	andhi	r2,r2,32752
 2008e94:	10000826 	beq	r2,zero,2008eb8 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 2008e98:	e0bfcf17 	ldw	r2,-196(fp)
 2008e9c:	10800044 	addi	r2,r2,1
 2008ea0:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 2008ea4:	e0bfdc17 	ldw	r2,-144(fp)
 2008ea8:	10800044 	addi	r2,r2,1
 2008eac:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 2008eb0:	00800044 	movi	r2,1
 2008eb4:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 2008eb8:	e0bfdd17 	ldw	r2,-140(fp)
 2008ebc:	10000f26 	beq	r2,zero,2008efc <_dtoa_r+0x14a4>
 2008ec0:	e0bfe417 	ldw	r2,-112(fp)
 2008ec4:	10800417 	ldw	r2,16(r2)
 2008ec8:	10bfffc4 	addi	r2,r2,-1
 2008ecc:	e0ffe417 	ldw	r3,-112(fp)
 2008ed0:	10800144 	addi	r2,r2,5
 2008ed4:	1085883a 	add	r2,r2,r2
 2008ed8:	1085883a 	add	r2,r2,r2
 2008edc:	1885883a 	add	r2,r3,r2
 2008ee0:	10800017 	ldw	r2,0(r2)
 2008ee4:	1009883a 	mov	r4,r2
 2008ee8:	200c9c00 	call	200c9c0 <__hi0bits>
 2008eec:	1007883a 	mov	r3,r2
 2008ef0:	00800804 	movi	r2,32
 2008ef4:	10c5c83a 	sub	r2,r2,r3
 2008ef8:	00000106 	br	2008f00 <_dtoa_r+0x14a8>
 2008efc:	00800044 	movi	r2,1
 2008f00:	e0ffdc17 	ldw	r3,-144(fp)
 2008f04:	10c5883a 	add	r2,r2,r3
 2008f08:	108007cc 	andi	r2,r2,31
 2008f0c:	e0bfd215 	stw	r2,-184(fp)
 2008f10:	e0bfd217 	ldw	r2,-184(fp)
 2008f14:	10000426 	beq	r2,zero,2008f28 <_dtoa_r+0x14d0>
    i = 32 - i;
 2008f18:	00c00804 	movi	r3,32
 2008f1c:	e0bfd217 	ldw	r2,-184(fp)
 2008f20:	1885c83a 	sub	r2,r3,r2
 2008f24:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 2008f28:	e0bfd217 	ldw	r2,-184(fp)
 2008f2c:	10800150 	cmplti	r2,r2,5
 2008f30:	1000101e 	bne	r2,zero,2008f74 <_dtoa_r+0x151c>
    {
      i -= 4;
 2008f34:	e0bfd217 	ldw	r2,-184(fp)
 2008f38:	10bfff04 	addi	r2,r2,-4
 2008f3c:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2008f40:	e0ffcf17 	ldw	r3,-196(fp)
 2008f44:	e0bfd217 	ldw	r2,-184(fp)
 2008f48:	1885883a 	add	r2,r3,r2
 2008f4c:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2008f50:	e0ffda17 	ldw	r3,-152(fp)
 2008f54:	e0bfd217 	ldw	r2,-184(fp)
 2008f58:	1885883a 	add	r2,r3,r2
 2008f5c:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2008f60:	e0ffdc17 	ldw	r3,-144(fp)
 2008f64:	e0bfd217 	ldw	r2,-184(fp)
 2008f68:	1885883a 	add	r2,r3,r2
 2008f6c:	e0bfdc15 	stw	r2,-144(fp)
 2008f70:	00001206 	br	2008fbc <_dtoa_r+0x1564>
    }
  else if (i < 4)
 2008f74:	e0bfd217 	ldw	r2,-184(fp)
 2008f78:	10800108 	cmpgei	r2,r2,4
 2008f7c:	10000f1e 	bne	r2,zero,2008fbc <_dtoa_r+0x1564>
    {
      i += 28;
 2008f80:	e0bfd217 	ldw	r2,-184(fp)
 2008f84:	10800704 	addi	r2,r2,28
 2008f88:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2008f8c:	e0ffcf17 	ldw	r3,-196(fp)
 2008f90:	e0bfd217 	ldw	r2,-184(fp)
 2008f94:	1885883a 	add	r2,r3,r2
 2008f98:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2008f9c:	e0ffda17 	ldw	r3,-152(fp)
 2008fa0:	e0bfd217 	ldw	r2,-184(fp)
 2008fa4:	1885883a 	add	r2,r3,r2
 2008fa8:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2008fac:	e0ffdc17 	ldw	r3,-144(fp)
 2008fb0:	e0bfd217 	ldw	r2,-184(fp)
 2008fb4:	1885883a 	add	r2,r3,r2
 2008fb8:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 2008fbc:	e0bfcf17 	ldw	r2,-196(fp)
 2008fc0:	0080050e 	bge	zero,r2,2008fd8 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 2008fc4:	e1bfcf17 	ldw	r6,-196(fp)
 2008fc8:	e17fe117 	ldw	r5,-124(fp)
 2008fcc:	e13ff817 	ldw	r4,-32(fp)
 2008fd0:	200d0dc0 	call	200d0dc <__lshift>
 2008fd4:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 2008fd8:	e0bfdc17 	ldw	r2,-144(fp)
 2008fdc:	0080050e 	bge	zero,r2,2008ff4 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 2008fe0:	e1bfdc17 	ldw	r6,-144(fp)
 2008fe4:	e17fe417 	ldw	r5,-112(fp)
 2008fe8:	e13ff817 	ldw	r4,-32(fp)
 2008fec:	200d0dc0 	call	200d0dc <__lshift>
 2008ff0:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 2008ff4:	e0bfd817 	ldw	r2,-160(fp)
 2008ff8:	10001726 	beq	r2,zero,2009058 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 2008ffc:	e17fe417 	ldw	r5,-112(fp)
 2009000:	e13fe117 	ldw	r4,-124(fp)
 2009004:	200d2d40 	call	200d2d4 <__mcmp>
 2009008:	1000130e 	bge	r2,zero,2009058 <_dtoa_r+0x1600>
	{
	  k--;
 200900c:	e0bfd717 	ldw	r2,-164(fp)
 2009010:	10bfffc4 	addi	r2,r2,-1
 2009014:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 2009018:	000f883a 	mov	r7,zero
 200901c:	01800284 	movi	r6,10
 2009020:	e17fe117 	ldw	r5,-124(fp)
 2009024:	e13ff817 	ldw	r4,-32(fp)
 2009028:	200c6a00 	call	200c6a0 <__multadd>
 200902c:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 2009030:	e0bfd917 	ldw	r2,-156(fp)
 2009034:	10000626 	beq	r2,zero,2009050 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 2009038:	000f883a 	mov	r7,zero
 200903c:	01800284 	movi	r6,10
 2009040:	e17fe317 	ldw	r5,-116(fp)
 2009044:	e13ff817 	ldw	r4,-32(fp)
 2009048:	200c6a00 	call	200c6a0 <__multadd>
 200904c:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 2009050:	e0bfd517 	ldw	r2,-172(fp)
 2009054:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 2009058:	e0bfd417 	ldw	r2,-176(fp)
 200905c:	00801f16 	blt	zero,r2,20090dc <_dtoa_r+0x1684>
 2009060:	e0bffb17 	ldw	r2,-20(fp)
 2009064:	108000d0 	cmplti	r2,r2,3
 2009068:	10001c1e 	bne	r2,zero,20090dc <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200906c:	e0bfd417 	ldw	r2,-176(fp)
 2009070:	10000c16 	blt	r2,zero,20090a4 <_dtoa_r+0x164c>
 2009074:	000f883a 	mov	r7,zero
 2009078:	01800144 	movi	r6,5
 200907c:	e17fe417 	ldw	r5,-112(fp)
 2009080:	e13ff817 	ldw	r4,-32(fp)
 2009084:	200c6a00 	call	200c6a0 <__multadd>
 2009088:	e0bfe415 	stw	r2,-112(fp)
 200908c:	e17fe417 	ldw	r5,-112(fp)
 2009090:	e13fe117 	ldw	r4,-124(fp)
 2009094:	200d2d40 	call	200d2d4 <__mcmp>
 2009098:	00800716 	blt	zero,r2,20090b8 <_dtoa_r+0x1660>
 200909c:	00000106 	br	20090a4 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 20090a0:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 20090a4:	e0800217 	ldw	r2,8(fp)
 20090a8:	0084303a 	nor	r2,zero,r2
 20090ac:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 20090b0:	00011d06 	br	2009528 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 20090b4:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 20090b8:	e0bfe717 	ldw	r2,-100(fp)
 20090bc:	10c00044 	addi	r3,r2,1
 20090c0:	e0ffe715 	stw	r3,-100(fp)
 20090c4:	00c00c44 	movi	r3,49
 20090c8:	10c00005 	stb	r3,0(r2)
      k++;
 20090cc:	e0bfd717 	ldw	r2,-164(fp)
 20090d0:	10800044 	addi	r2,r2,1
 20090d4:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 20090d8:	00011306 	br	2009528 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 20090dc:	e0bfd917 	ldw	r2,-156(fp)
 20090e0:	1000ba26 	beq	r2,zero,20093cc <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 20090e4:	e0bfda17 	ldw	r2,-152(fp)
 20090e8:	0080050e 	bge	zero,r2,2009100 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 20090ec:	e1bfda17 	ldw	r6,-152(fp)
 20090f0:	e17fe317 	ldw	r5,-116(fp)
 20090f4:	e13ff817 	ldw	r4,-32(fp)
 20090f8:	200d0dc0 	call	200d0dc <__lshift>
 20090fc:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 2009100:	e0bfe317 	ldw	r2,-116(fp)
 2009104:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 2009108:	e0bfde17 	ldw	r2,-136(fp)
 200910c:	10001826 	beq	r2,zero,2009170 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 2009110:	e0bfe317 	ldw	r2,-116(fp)
 2009114:	10800117 	ldw	r2,4(r2)
 2009118:	100b883a 	mov	r5,r2
 200911c:	e13ff817 	ldw	r4,-32(fp)
 2009120:	200c4f40 	call	200c4f4 <_Balloc>
 2009124:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 2009128:	e0bfe317 	ldw	r2,-116(fp)
 200912c:	10c00304 	addi	r3,r2,12
 2009130:	e0bfe217 	ldw	r2,-120(fp)
 2009134:	11000304 	addi	r4,r2,12
 2009138:	e0bfe217 	ldw	r2,-120(fp)
 200913c:	10800417 	ldw	r2,16(r2)
 2009140:	10800084 	addi	r2,r2,2
 2009144:	1085883a 	add	r2,r2,r2
 2009148:	1085883a 	add	r2,r2,r2
 200914c:	100d883a 	mov	r6,r2
 2009150:	200b883a 	mov	r5,r4
 2009154:	1809883a 	mov	r4,r3
 2009158:	200494c0 	call	200494c <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200915c:	01800044 	movi	r6,1
 2009160:	e17fe317 	ldw	r5,-116(fp)
 2009164:	e13ff817 	ldw	r4,-32(fp)
 2009168:	200d0dc0 	call	200d0dc <__lshift>
 200916c:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 2009170:	00800044 	movi	r2,1
 2009174:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 2009178:	e17fe417 	ldw	r5,-112(fp)
 200917c:	e13fe117 	ldw	r4,-124(fp)
 2009180:	20076a40 	call	20076a4 <quorem>
 2009184:	10800c04 	addi	r2,r2,48
 2009188:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200918c:	e17fe217 	ldw	r5,-120(fp)
 2009190:	e13fe117 	ldw	r4,-124(fp)
 2009194:	200d2d40 	call	200d2d4 <__mcmp>
 2009198:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 200919c:	e1bfe317 	ldw	r6,-116(fp)
 20091a0:	e17fe417 	ldw	r5,-112(fp)
 20091a4:	e13ff817 	ldw	r4,-32(fp)
 20091a8:	200d3e80 	call	200d3e8 <__mdiff>
 20091ac:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 20091b0:	e0bfef17 	ldw	r2,-68(fp)
 20091b4:	10800317 	ldw	r2,12(r2)
 20091b8:	1000041e 	bne	r2,zero,20091cc <_dtoa_r+0x1774>
 20091bc:	e17fef17 	ldw	r5,-68(fp)
 20091c0:	e13fe117 	ldw	r4,-124(fp)
 20091c4:	200d2d40 	call	200d2d4 <__mcmp>
 20091c8:	00000106 	br	20091d0 <_dtoa_r+0x1778>
 20091cc:	00800044 	movi	r2,1
 20091d0:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 20091d4:	e17fef17 	ldw	r5,-68(fp)
 20091d8:	e13ff817 	ldw	r4,-32(fp)
 20091dc:	200c6240 	call	200c624 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 20091e0:	e0bfec17 	ldw	r2,-80(fp)
 20091e4:	1000131e 	bne	r2,zero,2009234 <_dtoa_r+0x17dc>
 20091e8:	e0bffb17 	ldw	r2,-20(fp)
 20091ec:	1000111e 	bne	r2,zero,2009234 <_dtoa_r+0x17dc>
 20091f0:	e0bff217 	ldw	r2,-56(fp)
 20091f4:	1080004c 	andi	r2,r2,1
 20091f8:	10000e1e 	bne	r2,zero,2009234 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 20091fc:	e0bfd117 	ldw	r2,-188(fp)
 2009200:	10800e58 	cmpnei	r2,r2,57
 2009204:	10003726 	beq	r2,zero,20092e4 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 2009208:	e0bfd617 	ldw	r2,-168(fp)
 200920c:	0080030e 	bge	zero,r2,200921c <_dtoa_r+0x17c4>
		dig++;
 2009210:	e0bfd117 	ldw	r2,-188(fp)
 2009214:	10800044 	addi	r2,r2,1
 2009218:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200921c:	e0bfe717 	ldw	r2,-100(fp)
 2009220:	10c00044 	addi	r3,r2,1
 2009224:	e0ffe715 	stw	r3,-100(fp)
 2009228:	e0ffd117 	ldw	r3,-188(fp)
 200922c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009230:	0000bd06 	br	2009528 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 2009234:	e0bfd617 	ldw	r2,-168(fp)
 2009238:	10000716 	blt	r2,zero,2009258 <_dtoa_r+0x1800>
 200923c:	e0bfd617 	ldw	r2,-168(fp)
 2009240:	1000221e 	bne	r2,zero,20092cc <_dtoa_r+0x1874>
 2009244:	e0bffb17 	ldw	r2,-20(fp)
 2009248:	1000201e 	bne	r2,zero,20092cc <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200924c:	e0bff217 	ldw	r2,-56(fp)
 2009250:	1080004c 	andi	r2,r2,1
 2009254:	10001d1e 	bne	r2,zero,20092cc <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 2009258:	e0bfec17 	ldw	r2,-80(fp)
 200925c:	0080150e 	bge	zero,r2,20092b4 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 2009260:	01800044 	movi	r6,1
 2009264:	e17fe117 	ldw	r5,-124(fp)
 2009268:	e13ff817 	ldw	r4,-32(fp)
 200926c:	200d0dc0 	call	200d0dc <__lshift>
 2009270:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 2009274:	e17fe417 	ldw	r5,-112(fp)
 2009278:	e13fe117 	ldw	r4,-124(fp)
 200927c:	200d2d40 	call	200d2d4 <__mcmp>
 2009280:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 2009284:	e0bfec17 	ldw	r2,-80(fp)
 2009288:	00800516 	blt	zero,r2,20092a0 <_dtoa_r+0x1848>
 200928c:	e0bfec17 	ldw	r2,-80(fp)
 2009290:	1000081e 	bne	r2,zero,20092b4 <_dtoa_r+0x185c>
 2009294:	e0bfd117 	ldw	r2,-188(fp)
 2009298:	1080004c 	andi	r2,r2,1
 200929c:	10000526 	beq	r2,zero,20092b4 <_dtoa_r+0x185c>
		      && dig++ == '9')
 20092a0:	e0bfd117 	ldw	r2,-188(fp)
 20092a4:	10c00044 	addi	r3,r2,1
 20092a8:	e0ffd115 	stw	r3,-188(fp)
 20092ac:	10800e58 	cmpnei	r2,r2,57
 20092b0:	10000e26 	beq	r2,zero,20092ec <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 20092b4:	e0bfe717 	ldw	r2,-100(fp)
 20092b8:	10c00044 	addi	r3,r2,1
 20092bc:	e0ffe715 	stw	r3,-100(fp)
 20092c0:	e0ffd117 	ldw	r3,-188(fp)
 20092c4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 20092c8:	00009706 	br	2009528 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 20092cc:	e0bfec17 	ldw	r2,-80(fp)
 20092d0:	0080140e 	bge	zero,r2,2009324 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 20092d4:	e0bfd117 	ldw	r2,-188(fp)
 20092d8:	10800e58 	cmpnei	r2,r2,57
 20092dc:	10000a1e 	bne	r2,zero,2009308 <_dtoa_r+0x18b0>
 20092e0:	00000306 	br	20092f0 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 20092e4:	0001883a 	nop
 20092e8:	00000106 	br	20092f0 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 20092ec:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 20092f0:	e0bfe717 	ldw	r2,-100(fp)
 20092f4:	10c00044 	addi	r3,r2,1
 20092f8:	e0ffe715 	stw	r3,-100(fp)
 20092fc:	00c00e44 	movi	r3,57
 2009300:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 2009304:	00005d06 	br	200947c <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 2009308:	e0bfe717 	ldw	r2,-100(fp)
 200930c:	10c00044 	addi	r3,r2,1
 2009310:	e0ffe715 	stw	r3,-100(fp)
 2009314:	e0ffd117 	ldw	r3,-188(fp)
 2009318:	18c00044 	addi	r3,r3,1
 200931c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009320:	00008106 	br	2009528 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 2009324:	e0bfe717 	ldw	r2,-100(fp)
 2009328:	10c00044 	addi	r3,r2,1
 200932c:	e0ffe715 	stw	r3,-100(fp)
 2009330:	e0ffd117 	ldw	r3,-188(fp)
 2009334:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2009338:	e0ffd217 	ldw	r3,-184(fp)
 200933c:	e0bfd417 	ldw	r2,-176(fp)
 2009340:	18803b26 	beq	r3,r2,2009430 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 2009344:	000f883a 	mov	r7,zero
 2009348:	01800284 	movi	r6,10
 200934c:	e17fe117 	ldw	r5,-124(fp)
 2009350:	e13ff817 	ldw	r4,-32(fp)
 2009354:	200c6a00 	call	200c6a0 <__multadd>
 2009358:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200935c:	e0ffe217 	ldw	r3,-120(fp)
 2009360:	e0bfe317 	ldw	r2,-116(fp)
 2009364:	1880091e 	bne	r3,r2,200938c <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 2009368:	000f883a 	mov	r7,zero
 200936c:	01800284 	movi	r6,10
 2009370:	e17fe317 	ldw	r5,-116(fp)
 2009374:	e13ff817 	ldw	r4,-32(fp)
 2009378:	200c6a00 	call	200c6a0 <__multadd>
 200937c:	e0bfe315 	stw	r2,-116(fp)
 2009380:	e0bfe317 	ldw	r2,-116(fp)
 2009384:	e0bfe215 	stw	r2,-120(fp)
 2009388:	00000c06 	br	20093bc <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200938c:	000f883a 	mov	r7,zero
 2009390:	01800284 	movi	r6,10
 2009394:	e17fe217 	ldw	r5,-120(fp)
 2009398:	e13ff817 	ldw	r4,-32(fp)
 200939c:	200c6a00 	call	200c6a0 <__multadd>
 20093a0:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 20093a4:	000f883a 	mov	r7,zero
 20093a8:	01800284 	movi	r6,10
 20093ac:	e17fe317 	ldw	r5,-116(fp)
 20093b0:	e13ff817 	ldw	r4,-32(fp)
 20093b4:	200c6a00 	call	200c6a0 <__multadd>
 20093b8:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 20093bc:	e0bfd217 	ldw	r2,-184(fp)
 20093c0:	10800044 	addi	r2,r2,1
 20093c4:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 20093c8:	003f6b06 	br	2009178 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 20093cc:	00800044 	movi	r2,1
 20093d0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 20093d4:	e43fe717 	ldw	r16,-100(fp)
 20093d8:	80800044 	addi	r2,r16,1
 20093dc:	e0bfe715 	stw	r2,-100(fp)
 20093e0:	e17fe417 	ldw	r5,-112(fp)
 20093e4:	e13fe117 	ldw	r4,-124(fp)
 20093e8:	20076a40 	call	20076a4 <quorem>
 20093ec:	10800c04 	addi	r2,r2,48
 20093f0:	e0bfd115 	stw	r2,-188(fp)
 20093f4:	e0bfd117 	ldw	r2,-188(fp)
 20093f8:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 20093fc:	e0ffd217 	ldw	r3,-184(fp)
 2009400:	e0bfd417 	ldw	r2,-176(fp)
 2009404:	18800c0e 	bge	r3,r2,2009438 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 2009408:	000f883a 	mov	r7,zero
 200940c:	01800284 	movi	r6,10
 2009410:	e17fe117 	ldw	r5,-124(fp)
 2009414:	e13ff817 	ldw	r4,-32(fp)
 2009418:	200c6a00 	call	200c6a0 <__multadd>
 200941c:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 2009420:	e0bfd217 	ldw	r2,-184(fp)
 2009424:	10800044 	addi	r2,r2,1
 2009428:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200942c:	003fe906 	br	20093d4 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 2009430:	0001883a 	nop
 2009434:	00000106 	br	200943c <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 2009438:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200943c:	01800044 	movi	r6,1
 2009440:	e17fe117 	ldw	r5,-124(fp)
 2009444:	e13ff817 	ldw	r4,-32(fp)
 2009448:	200d0dc0 	call	200d0dc <__lshift>
 200944c:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 2009450:	e17fe417 	ldw	r5,-112(fp)
 2009454:	e13fe117 	ldw	r4,-124(fp)
 2009458:	200d2d40 	call	200d2d4 <__mcmp>
 200945c:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 2009460:	e0bfd617 	ldw	r2,-168(fp)
 2009464:	00801216 	blt	zero,r2,20094b0 <_dtoa_r+0x1a58>
 2009468:	e0bfd617 	ldw	r2,-168(fp)
 200946c:	1000211e 	bne	r2,zero,20094f4 <_dtoa_r+0x1a9c>
 2009470:	e0bfd117 	ldw	r2,-188(fp)
 2009474:	1080004c 	andi	r2,r2,1
 2009478:	10001e26 	beq	r2,zero,20094f4 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200947c:	00000c06 	br	20094b0 <_dtoa_r+0x1a58>
	if (s == s0)
 2009480:	e0ffe717 	ldw	r3,-100(fp)
 2009484:	e0bfe917 	ldw	r2,-92(fp)
 2009488:	1880091e 	bne	r3,r2,20094b0 <_dtoa_r+0x1a58>
	  {
	    k++;
 200948c:	e0bfd717 	ldw	r2,-164(fp)
 2009490:	10800044 	addi	r2,r2,1
 2009494:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 2009498:	e0bfe717 	ldw	r2,-100(fp)
 200949c:	10c00044 	addi	r3,r2,1
 20094a0:	e0ffe715 	stw	r3,-100(fp)
 20094a4:	00c00c44 	movi	r3,49
 20094a8:	10c00005 	stb	r3,0(r2)
	    goto ret;
 20094ac:	00001e06 	br	2009528 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 20094b0:	e0bfe717 	ldw	r2,-100(fp)
 20094b4:	10bfffc4 	addi	r2,r2,-1
 20094b8:	e0bfe715 	stw	r2,-100(fp)
 20094bc:	e0bfe717 	ldw	r2,-100(fp)
 20094c0:	10800003 	ldbu	r2,0(r2)
 20094c4:	10803fcc 	andi	r2,r2,255
 20094c8:	1080201c 	xori	r2,r2,128
 20094cc:	10bfe004 	addi	r2,r2,-128
 20094d0:	10800e60 	cmpeqi	r2,r2,57
 20094d4:	103fea1e 	bne	r2,zero,2009480 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 20094d8:	e0bfe717 	ldw	r2,-100(fp)
 20094dc:	10c00044 	addi	r3,r2,1
 20094e0:	e0ffe715 	stw	r3,-100(fp)
 20094e4:	10c00003 	ldbu	r3,0(r2)
 20094e8:	18c00044 	addi	r3,r3,1
 20094ec:	10c00005 	stb	r3,0(r2)
 20094f0:	00000d06 	br	2009528 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 20094f4:	e0bfe717 	ldw	r2,-100(fp)
 20094f8:	10bfffc4 	addi	r2,r2,-1
 20094fc:	e0bfe715 	stw	r2,-100(fp)
 2009500:	e0bfe717 	ldw	r2,-100(fp)
 2009504:	10800003 	ldbu	r2,0(r2)
 2009508:	10803fcc 	andi	r2,r2,255
 200950c:	1080201c 	xori	r2,r2,128
 2009510:	10bfe004 	addi	r2,r2,-128
 2009514:	10800c20 	cmpeqi	r2,r2,48
 2009518:	103ff61e 	bne	r2,zero,20094f4 <_dtoa_r+0x1a9c>
      s++;
 200951c:	e0bfe717 	ldw	r2,-100(fp)
 2009520:	10800044 	addi	r2,r2,1
 2009524:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 2009528:	e17fe417 	ldw	r5,-112(fp)
 200952c:	e13ff817 	ldw	r4,-32(fp)
 2009530:	200c6240 	call	200c624 <_Bfree>
  if (mhi)
 2009534:	e0bfe317 	ldw	r2,-116(fp)
 2009538:	10000d26 	beq	r2,zero,2009570 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200953c:	e0bfe217 	ldw	r2,-120(fp)
 2009540:	10000626 	beq	r2,zero,200955c <_dtoa_r+0x1b04>
 2009544:	e0ffe217 	ldw	r3,-120(fp)
 2009548:	e0bfe317 	ldw	r2,-116(fp)
 200954c:	18800326 	beq	r3,r2,200955c <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 2009550:	e17fe217 	ldw	r5,-120(fp)
 2009554:	e13ff817 	ldw	r4,-32(fp)
 2009558:	200c6240 	call	200c624 <_Bfree>
      Bfree (ptr, mhi);
 200955c:	e17fe317 	ldw	r5,-116(fp)
 2009560:	e13ff817 	ldw	r4,-32(fp)
 2009564:	200c6240 	call	200c624 <_Bfree>
 2009568:	00000106 	br	2009570 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200956c:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 2009570:	e17fe117 	ldw	r5,-124(fp)
 2009574:	e13ff817 	ldw	r4,-32(fp)
 2009578:	200c6240 	call	200c624 <_Bfree>
  *s = 0;
 200957c:	e0bfe717 	ldw	r2,-100(fp)
 2009580:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 2009584:	e0bfd717 	ldw	r2,-164(fp)
 2009588:	10c00044 	addi	r3,r2,1
 200958c:	e0800317 	ldw	r2,12(fp)
 2009590:	10c00015 	stw	r3,0(r2)
  if (rve)
 2009594:	e0800517 	ldw	r2,20(fp)
 2009598:	10000326 	beq	r2,zero,20095a8 <_dtoa_r+0x1b50>
    *rve = s;
 200959c:	e0800517 	ldw	r2,20(fp)
 20095a0:	e0ffe717 	ldw	r3,-100(fp)
 20095a4:	10c00015 	stw	r3,0(r2)
  return s0;
 20095a8:	e0bfe917 	ldw	r2,-92(fp)
}
 20095ac:	e6fffc04 	addi	sp,fp,-16
 20095b0:	dfc00517 	ldw	ra,20(sp)
 20095b4:	df000417 	ldw	fp,16(sp)
 20095b8:	dcc00317 	ldw	r19,12(sp)
 20095bc:	dc800217 	ldw	r18,8(sp)
 20095c0:	dc400117 	ldw	r17,4(sp)
 20095c4:	dc000017 	ldw	r16,0(sp)
 20095c8:	dec00604 	addi	sp,sp,24
 20095cc:	f800283a 	ret

020095d0 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 20095d0:	defff504 	addi	sp,sp,-44
 20095d4:	dfc00a15 	stw	ra,40(sp)
 20095d8:	df000915 	stw	fp,36(sp)
 20095dc:	dcc00815 	stw	r19,32(sp)
 20095e0:	dc800715 	stw	r18,28(sp)
 20095e4:	dc400615 	stw	r17,24(sp)
 20095e8:	dc000515 	stw	r16,20(sp)
 20095ec:	df000904 	addi	fp,sp,36
 20095f0:	e13ffb15 	stw	r4,-20(fp)
 20095f4:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 20095f8:	8080030b 	ldhu	r2,12(r16)
 20095fc:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 2009600:	e0bff90b 	ldhu	r2,-28(fp)
 2009604:	10bfffcc 	andi	r2,r2,65535
 2009608:	1080020c 	andi	r2,r2,8
 200960c:	1000831e 	bne	r2,zero,200981c <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 2009610:	8080030b 	ldhu	r2,12(r16)
 2009614:	10820014 	ori	r2,r2,2048
 2009618:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200961c:	80800117 	ldw	r2,4(r16)
 2009620:	00800216 	blt	zero,r2,200962c <__sflush_r+0x5c>
 2009624:	80800f17 	ldw	r2,60(r16)
 2009628:	00807a0e 	bge	zero,r2,2009814 <__sflush_r+0x244>
 200962c:	80800a17 	ldw	r2,40(r16)
 2009630:	10007826 	beq	r2,zero,2009814 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 2009634:	e0bffb17 	ldw	r2,-20(fp)
 2009638:	10800017 	ldw	r2,0(r2)
 200963c:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 2009640:	e0bffb17 	ldw	r2,-20(fp)
 2009644:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 2009648:	8080030b 	ldhu	r2,12(r16)
 200964c:	10bfffcc 	andi	r2,r2,65535
 2009650:	1084000c 	andi	r2,r2,4096
 2009654:	10000326 	beq	r2,zero,2009664 <__sflush_r+0x94>
	    curoff = fp->_offset;
 2009658:	80801417 	ldw	r2,80(r16)
 200965c:	e0bff715 	stw	r2,-36(fp)
 2009660:	00002206 	br	20096ec <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 2009664:	80800a17 	ldw	r2,40(r16)
 2009668:	80c00717 	ldw	r3,28(r16)
 200966c:	01c00044 	movi	r7,1
 2009670:	000d883a 	mov	r6,zero
 2009674:	180b883a 	mov	r5,r3
 2009678:	e13ffb17 	ldw	r4,-20(fp)
 200967c:	103ee83a 	callr	r2
 2009680:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 2009684:	e0bff717 	ldw	r2,-36(fp)
 2009688:	10bfffd8 	cmpnei	r2,r2,-1
 200968c:	1000171e 	bne	r2,zero,20096ec <__sflush_r+0x11c>
 2009690:	e0bffb17 	ldw	r2,-20(fp)
 2009694:	10800017 	ldw	r2,0(r2)
 2009698:	10001426 	beq	r2,zero,20096ec <__sflush_r+0x11c>
		{
		  int result = EOF;
 200969c:	00bfffc4 	movi	r2,-1
 20096a0:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 20096a4:	e0bffb17 	ldw	r2,-20(fp)
 20096a8:	10800017 	ldw	r2,0(r2)
 20096ac:	10800760 	cmpeqi	r2,r2,29
 20096b0:	1000041e 	bne	r2,zero,20096c4 <__sflush_r+0xf4>
 20096b4:	e0bffb17 	ldw	r2,-20(fp)
 20096b8:	10800017 	ldw	r2,0(r2)
 20096bc:	10800598 	cmpnei	r2,r2,22
 20096c0:	1000051e 	bne	r2,zero,20096d8 <__sflush_r+0x108>
		    {
		      result = 0;
 20096c4:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 20096c8:	e0bffb17 	ldw	r2,-20(fp)
 20096cc:	e0fffa17 	ldw	r3,-24(fp)
 20096d0:	10c00015 	stw	r3,0(r2)
 20096d4:	00000306 	br	20096e4 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 20096d8:	8080030b 	ldhu	r2,12(r16)
 20096dc:	10801014 	ori	r2,r2,64
 20096e0:	8080030d 	sth	r2,12(r16)
		  return result;
 20096e4:	e0bff817 	ldw	r2,-32(fp)
 20096e8:	00007106 	br	20098b0 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 20096ec:	8080030b 	ldhu	r2,12(r16)
 20096f0:	10bfffcc 	andi	r2,r2,65535
 20096f4:	1080010c 	andi	r2,r2,4
 20096f8:	10000a26 	beq	r2,zero,2009724 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 20096fc:	80800117 	ldw	r2,4(r16)
 2009700:	e0fff717 	ldw	r3,-36(fp)
 2009704:	1885c83a 	sub	r2,r3,r2
 2009708:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 200970c:	80800c17 	ldw	r2,48(r16)
 2009710:	10000426 	beq	r2,zero,2009724 <__sflush_r+0x154>
                curoff -= fp->_ur;
 2009714:	80800f17 	ldw	r2,60(r16)
 2009718:	e0fff717 	ldw	r3,-36(fp)
 200971c:	1885c83a 	sub	r2,r3,r2
 2009720:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 2009724:	80800a17 	ldw	r2,40(r16)
 2009728:	80c00717 	ldw	r3,28(r16)
 200972c:	000f883a 	mov	r7,zero
 2009730:	e1bff717 	ldw	r6,-36(fp)
 2009734:	180b883a 	mov	r5,r3
 2009738:	e13ffb17 	ldw	r4,-20(fp)
 200973c:	103ee83a 	callr	r2
 2009740:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 2009744:	e0bff717 	ldw	r2,-36(fp)
 2009748:	10bfffd8 	cmpnei	r2,r2,-1
 200974c:	10000b1e 	bne	r2,zero,200977c <__sflush_r+0x1ac>
 2009750:	e0bffb17 	ldw	r2,-20(fp)
 2009754:	10800017 	ldw	r2,0(r2)
 2009758:	10000826 	beq	r2,zero,200977c <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200975c:	e0bffb17 	ldw	r2,-20(fp)
 2009760:	10800017 	ldw	r2,0(r2)
 2009764:	10800760 	cmpeqi	r2,r2,29
 2009768:	1000041e 	bne	r2,zero,200977c <__sflush_r+0x1ac>
 200976c:	e0bffb17 	ldw	r2,-20(fp)
 2009770:	10800017 	ldw	r2,0(r2)
 2009774:	10800598 	cmpnei	r2,r2,22
 2009778:	1000211e 	bne	r2,zero,2009800 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 200977c:	80c0030b 	ldhu	r3,12(r16)
 2009780:	00bdffc4 	movi	r2,-2049
 2009784:	1884703a 	and	r2,r3,r2
 2009788:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 200978c:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 2009790:	80800417 	ldw	r2,16(r16)
 2009794:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 2009798:	8080030b 	ldhu	r2,12(r16)
 200979c:	10bfffcc 	andi	r2,r2,65535
 20097a0:	1084000c 	andi	r2,r2,4096
 20097a4:	10000826 	beq	r2,zero,20097c8 <__sflush_r+0x1f8>
 20097a8:	e0bff717 	ldw	r2,-36(fp)
 20097ac:	10bfffd8 	cmpnei	r2,r2,-1
 20097b0:	1000031e 	bne	r2,zero,20097c0 <__sflush_r+0x1f0>
 20097b4:	e0bffb17 	ldw	r2,-20(fp)
 20097b8:	10800017 	ldw	r2,0(r2)
 20097bc:	1000021e 	bne	r2,zero,20097c8 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 20097c0:	e0bff717 	ldw	r2,-36(fp)
 20097c4:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 20097c8:	e0bffb17 	ldw	r2,-20(fp)
 20097cc:	e0fffa17 	ldw	r3,-24(fp)
 20097d0:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 20097d4:	80800c17 	ldw	r2,48(r16)
 20097d8:	10000e26 	beq	r2,zero,2009814 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 20097dc:	80c00c17 	ldw	r3,48(r16)
 20097e0:	80801004 	addi	r2,r16,64
 20097e4:	18800426 	beq	r3,r2,20097f8 <__sflush_r+0x228>
 20097e8:	80800c17 	ldw	r2,48(r16)
 20097ec:	100b883a 	mov	r5,r2
 20097f0:	e13ffb17 	ldw	r4,-20(fp)
 20097f4:	2009f740 	call	2009f74 <_free_r>
 20097f8:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 20097fc:	00000506 	br	2009814 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 2009800:	8080030b 	ldhu	r2,12(r16)
 2009804:	10801014 	ori	r2,r2,64
 2009808:	8080030d 	sth	r2,12(r16)
	      return EOF;
 200980c:	00bfffc4 	movi	r2,-1
 2009810:	00002706 	br	20098b0 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 2009814:	0005883a 	mov	r2,zero
 2009818:	00002506 	br	20098b0 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 200981c:	84400417 	ldw	r17,16(r16)
 2009820:	8800021e 	bne	r17,zero,200982c <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 2009824:	0005883a 	mov	r2,zero
 2009828:	00002106 	br	20098b0 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 200982c:	80800017 	ldw	r2,0(r16)
 2009830:	1007883a 	mov	r3,r2
 2009834:	8805883a 	mov	r2,r17
 2009838:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 200983c:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 2009840:	e0bff90b 	ldhu	r2,-28(fp)
 2009844:	10bfffcc 	andi	r2,r2,65535
 2009848:	108000cc 	andi	r2,r2,3
 200984c:	1000021e 	bne	r2,zero,2009858 <__sflush_r+0x288>
 2009850:	80800517 	ldw	r2,20(r16)
 2009854:	00000106 	br	200985c <__sflush_r+0x28c>
 2009858:	0005883a 	mov	r2,zero
 200985c:	80800215 	stw	r2,8(r16)

  while (n > 0)
 2009860:	00001106 	br	20098a8 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 2009864:	80800917 	ldw	r2,36(r16)
 2009868:	80c00717 	ldw	r3,28(r16)
 200986c:	900f883a 	mov	r7,r18
 2009870:	880d883a 	mov	r6,r17
 2009874:	180b883a 	mov	r5,r3
 2009878:	e13ffb17 	ldw	r4,-20(fp)
 200987c:	103ee83a 	callr	r2
 2009880:	1027883a 	mov	r19,r2
      if (t <= 0)
 2009884:	04c00516 	blt	zero,r19,200989c <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 2009888:	8080030b 	ldhu	r2,12(r16)
 200988c:	10801014 	ori	r2,r2,64
 2009890:	8080030d 	sth	r2,12(r16)
          return EOF;
 2009894:	00bfffc4 	movi	r2,-1
 2009898:	00000506 	br	20098b0 <__sflush_r+0x2e0>
	}
      p += t;
 200989c:	9805883a 	mov	r2,r19
 20098a0:	88a3883a 	add	r17,r17,r2
      n -= t;
 20098a4:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 20098a8:	04bfee16 	blt	zero,r18,2009864 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 20098ac:	0005883a 	mov	r2,zero
}
 20098b0:	e6fffc04 	addi	sp,fp,-16
 20098b4:	dfc00517 	ldw	ra,20(sp)
 20098b8:	df000417 	ldw	fp,16(sp)
 20098bc:	dcc00317 	ldw	r19,12(sp)
 20098c0:	dc800217 	ldw	r18,8(sp)
 20098c4:	dc400117 	ldw	r17,4(sp)
 20098c8:	dc000017 	ldw	r16,0(sp)
 20098cc:	dec00604 	addi	sp,sp,24
 20098d0:	f800283a 	ret

020098d4 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 20098d4:	defffa04 	addi	sp,sp,-24
 20098d8:	dfc00515 	stw	ra,20(sp)
 20098dc:	df000415 	stw	fp,16(sp)
 20098e0:	dc000315 	stw	r16,12(sp)
 20098e4:	df000404 	addi	fp,sp,16
 20098e8:	e13ffe15 	stw	r4,-8(fp)
 20098ec:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 20098f0:	e0bffe17 	ldw	r2,-8(fp)
 20098f4:	e0bffc15 	stw	r2,-16(fp)
 20098f8:	e0bffc17 	ldw	r2,-16(fp)
 20098fc:	10000526 	beq	r2,zero,2009914 <_fflush_r+0x40>
 2009900:	e0bffc17 	ldw	r2,-16(fp)
 2009904:	10800e17 	ldw	r2,56(r2)
 2009908:	1000021e 	bne	r2,zero,2009914 <_fflush_r+0x40>
 200990c:	e13ffc17 	ldw	r4,-16(fp)
 2009910:	2009d540 	call	2009d54 <__sinit>

  if (!fp->_flags)
 2009914:	8080030b 	ldhu	r2,12(r16)
 2009918:	10bfffcc 	andi	r2,r2,65535
 200991c:	10a0001c 	xori	r2,r2,32768
 2009920:	10a00004 	addi	r2,r2,-32768
 2009924:	1000021e 	bne	r2,zero,2009930 <_fflush_r+0x5c>
    return 0;
 2009928:	0005883a 	mov	r2,zero
 200992c:	00000506 	br	2009944 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 2009930:	800b883a 	mov	r5,r16
 2009934:	e13ffe17 	ldw	r4,-8(fp)
 2009938:	20095d00 	call	20095d0 <__sflush_r>
 200993c:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 2009940:	e0bffd17 	ldw	r2,-12(fp)
}
 2009944:	e6ffff04 	addi	sp,fp,-4
 2009948:	dfc00217 	ldw	ra,8(sp)
 200994c:	df000117 	ldw	fp,4(sp)
 2009950:	dc000017 	ldw	r16,0(sp)
 2009954:	dec00304 	addi	sp,sp,12
 2009958:	f800283a 	ret

0200995c <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 200995c:	defffe04 	addi	sp,sp,-8
 2009960:	dfc00115 	stw	ra,4(sp)
 2009964:	df000015 	stw	fp,0(sp)
 2009968:	d839883a 	mov	fp,sp
 200996c:	2005883a 	mov	r2,r4
  if (fp == NULL)
 2009970:	1000061e 	bne	r2,zero,200998c <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 2009974:	d0a00117 	ldw	r2,-32764(gp)
 2009978:	01408074 	movhi	r5,513
 200997c:	29663504 	addi	r5,r5,-26412
 2009980:	1009883a 	mov	r4,r2
 2009984:	200ad540 	call	200ad54 <_fwalk_reent>
 2009988:	00000406 	br	200999c <fflush+0x40>

  return _fflush_r (_REENT, fp);
 200998c:	d0e00017 	ldw	r3,-32768(gp)
 2009990:	100b883a 	mov	r5,r2
 2009994:	1809883a 	mov	r4,r3
 2009998:	20098d40 	call	20098d4 <_fflush_r>
}
 200999c:	e037883a 	mov	sp,fp
 20099a0:	dfc00117 	ldw	ra,4(sp)
 20099a4:	df000017 	ldw	fp,0(sp)
 20099a8:	dec00204 	addi	sp,sp,8
 20099ac:	f800283a 	ret

020099b0 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 20099b0:	defffa04 	addi	sp,sp,-24
 20099b4:	dfc00515 	stw	ra,20(sp)
 20099b8:	df000415 	stw	fp,16(sp)
 20099bc:	df000404 	addi	fp,sp,16
 20099c0:	e13ffc15 	stw	r4,-16(fp)
 20099c4:	e17ffd15 	stw	r5,-12(fp)
 20099c8:	e1bffe15 	stw	r6,-8(fp)
 20099cc:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 20099d0:	e0bffc17 	ldw	r2,-16(fp)
 20099d4:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 20099d8:	e0bffc17 	ldw	r2,-16(fp)
 20099dc:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 20099e0:	e0bffc17 	ldw	r2,-16(fp)
 20099e4:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 20099e8:	e0bffd17 	ldw	r2,-12(fp)
 20099ec:	1007883a 	mov	r3,r2
 20099f0:	e0bffc17 	ldw	r2,-16(fp)
 20099f4:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 20099f8:	e0bffc17 	ldw	r2,-16(fp)
 20099fc:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 2009a00:	e0bffe17 	ldw	r2,-8(fp)
 2009a04:	1007883a 	mov	r3,r2
 2009a08:	e0bffc17 	ldw	r2,-16(fp)
 2009a0c:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 2009a10:	e0bffc17 	ldw	r2,-16(fp)
 2009a14:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 2009a18:	e0bffc17 	ldw	r2,-16(fp)
 2009a1c:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 2009a20:	e0bffc17 	ldw	r2,-16(fp)
 2009a24:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 2009a28:	e0bffc17 	ldw	r2,-16(fp)
 2009a2c:	10801704 	addi	r2,r2,92
 2009a30:	01800204 	movi	r6,8
 2009a34:	000b883a 	mov	r5,zero
 2009a38:	1009883a 	mov	r4,r2
 2009a3c:	2004ad40 	call	2004ad4 <memset>
  ptr->_cookie = ptr;
 2009a40:	e0bffc17 	ldw	r2,-16(fp)
 2009a44:	e0fffc17 	ldw	r3,-16(fp)
 2009a48:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 2009a4c:	e0fffc17 	ldw	r3,-16(fp)
 2009a50:	00808074 	movhi	r2,513
 2009a54:	10baef04 	addi	r2,r2,-5188
 2009a58:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 2009a5c:	e0fffc17 	ldw	r3,-16(fp)
 2009a60:	00808074 	movhi	r2,513
 2009a64:	10bb2204 	addi	r2,r2,-4984
 2009a68:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 2009a6c:	e0fffc17 	ldw	r3,-16(fp)
 2009a70:	00808074 	movhi	r2,513
 2009a74:	10bb4f04 	addi	r2,r2,-4804
 2009a78:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 2009a7c:	e0fffc17 	ldw	r3,-16(fp)
 2009a80:	00808074 	movhi	r2,513
 2009a84:	10bb7704 	addi	r2,r2,-4644
 2009a88:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 2009a8c:	0001883a 	nop
 2009a90:	e037883a 	mov	sp,fp
 2009a94:	dfc00117 	ldw	ra,4(sp)
 2009a98:	df000017 	ldw	fp,0(sp)
 2009a9c:	dec00204 	addi	sp,sp,8
 2009aa0:	f800283a 	ret

02009aa4 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 2009aa4:	defffb04 	addi	sp,sp,-20
 2009aa8:	dfc00415 	stw	ra,16(sp)
 2009aac:	df000315 	stw	fp,12(sp)
 2009ab0:	dc000215 	stw	r16,8(sp)
 2009ab4:	df000304 	addi	fp,sp,12
 2009ab8:	e13ffe15 	stw	r4,-8(fp)
 2009abc:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 2009ac0:	80bfffc4 	addi	r2,r16,-1
 2009ac4:	10801a24 	muli	r2,r2,104
 2009ac8:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 2009acc:	100b883a 	mov	r5,r2
 2009ad0:	e13ffe17 	ldw	r4,-8(fp)
 2009ad4:	200b5b40 	call	200b5b4 <_malloc_r>
 2009ad8:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 2009adc:	e0bffd17 	ldw	r2,-12(fp)
 2009ae0:	1000021e 	bne	r2,zero,2009aec <__sfmoreglue+0x48>
    return NULL;
 2009ae4:	0005883a 	mov	r2,zero
 2009ae8:	00001106 	br	2009b30 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 2009aec:	e0bffd17 	ldw	r2,-12(fp)
 2009af0:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 2009af4:	e0bffd17 	ldw	r2,-12(fp)
 2009af8:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 2009afc:	e0bffd17 	ldw	r2,-12(fp)
 2009b00:	10c00304 	addi	r3,r2,12
 2009b04:	e0bffd17 	ldw	r2,-12(fp)
 2009b08:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 2009b0c:	e0bffd17 	ldw	r2,-12(fp)
 2009b10:	10800304 	addi	r2,r2,12
 2009b14:	8007883a 	mov	r3,r16
 2009b18:	18c01a24 	muli	r3,r3,104
 2009b1c:	180d883a 	mov	r6,r3
 2009b20:	000b883a 	mov	r5,zero
 2009b24:	1009883a 	mov	r4,r2
 2009b28:	2004ad40 	call	2004ad4 <memset>
  return &g->glue;
 2009b2c:	e0bffd17 	ldw	r2,-12(fp)
}
 2009b30:	e6ffff04 	addi	sp,fp,-4
 2009b34:	dfc00217 	ldw	ra,8(sp)
 2009b38:	df000117 	ldw	fp,4(sp)
 2009b3c:	dc000017 	ldw	r16,0(sp)
 2009b40:	dec00304 	addi	sp,sp,12
 2009b44:	f800283a 	ret

02009b48 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 2009b48:	defffa04 	addi	sp,sp,-24
 2009b4c:	dfc00515 	stw	ra,20(sp)
 2009b50:	df000415 	stw	fp,16(sp)
 2009b54:	df000404 	addi	fp,sp,16
 2009b58:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 2009b5c:	2009e2c0 	call	2009e2c <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 2009b60:	d0a00117 	ldw	r2,-32764(gp)
 2009b64:	10800e17 	ldw	r2,56(r2)
 2009b68:	1000031e 	bne	r2,zero,2009b78 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 2009b6c:	d0a00117 	ldw	r2,-32764(gp)
 2009b70:	1009883a 	mov	r4,r2
 2009b74:	2009d540 	call	2009d54 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009b78:	d0a00117 	ldw	r2,-32764(gp)
 2009b7c:	1080b804 	addi	r2,r2,736
 2009b80:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009b84:	e0bffe17 	ldw	r2,-8(fp)
 2009b88:	10800217 	ldw	r2,8(r2)
 2009b8c:	e0bffc15 	stw	r2,-16(fp)
 2009b90:	e0bffe17 	ldw	r2,-8(fp)
 2009b94:	10800117 	ldw	r2,4(r2)
 2009b98:	e0bffd15 	stw	r2,-12(fp)
 2009b9c:	00000906 	br	2009bc4 <__sfp+0x7c>
	if (fp->_flags == 0)
 2009ba0:	e0bffc17 	ldw	r2,-16(fp)
 2009ba4:	1080030b 	ldhu	r2,12(r2)
 2009ba8:	10bfffcc 	andi	r2,r2,65535
 2009bac:	10a0001c 	xori	r2,r2,32768
 2009bb0:	10a00004 	addi	r2,r2,-32768
 2009bb4:	10001f26 	beq	r2,zero,2009c34 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009bb8:	e0bffc17 	ldw	r2,-16(fp)
 2009bbc:	10801a04 	addi	r2,r2,104
 2009bc0:	e0bffc15 	stw	r2,-16(fp)
 2009bc4:	e0bffd17 	ldw	r2,-12(fp)
 2009bc8:	10bfffc4 	addi	r2,r2,-1
 2009bcc:	e0bffd15 	stw	r2,-12(fp)
 2009bd0:	e0bffd17 	ldw	r2,-12(fp)
 2009bd4:	103ff20e 	bge	r2,zero,2009ba0 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009bd8:	e0bffe17 	ldw	r2,-8(fp)
 2009bdc:	10800017 	ldw	r2,0(r2)
 2009be0:	1000091e 	bne	r2,zero,2009c08 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 2009be4:	01400104 	movi	r5,4
 2009be8:	e13fff17 	ldw	r4,-4(fp)
 2009bec:	2009aa40 	call	2009aa4 <__sfmoreglue>
 2009bf0:	1007883a 	mov	r3,r2
 2009bf4:	e0bffe17 	ldw	r2,-8(fp)
 2009bf8:	10c00015 	stw	r3,0(r2)
 2009bfc:	e0bffe17 	ldw	r2,-8(fp)
 2009c00:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009c04:	10000426 	beq	r2,zero,2009c18 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009c08:	e0bffe17 	ldw	r2,-8(fp)
 2009c0c:	10800017 	ldw	r2,0(r2)
 2009c10:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 2009c14:	003fdb06 	br	2009b84 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 2009c18:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 2009c1c:	2009e4c0 	call	2009e4c <__sfp_lock_release>
  d->_errno = ENOMEM;
 2009c20:	e0bfff17 	ldw	r2,-4(fp)
 2009c24:	00c00304 	movi	r3,12
 2009c28:	10c00015 	stw	r3,0(r2)
  return NULL;
 2009c2c:	0005883a 	mov	r2,zero
 2009c30:	00002506 	br	2009cc8 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 2009c34:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 2009c38:	e0bffc17 	ldw	r2,-16(fp)
 2009c3c:	00ffffc4 	movi	r3,-1
 2009c40:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 2009c44:	e0bffc17 	ldw	r2,-16(fp)
 2009c48:	00c00044 	movi	r3,1
 2009c4c:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 2009c50:	e0bffc17 	ldw	r2,-16(fp)
 2009c54:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 2009c58:	2009e4c0 	call	2009e4c <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 2009c5c:	e0bffc17 	ldw	r2,-16(fp)
 2009c60:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 2009c64:	e0bffc17 	ldw	r2,-16(fp)
 2009c68:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 2009c6c:	e0bffc17 	ldw	r2,-16(fp)
 2009c70:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 2009c74:	e0bffc17 	ldw	r2,-16(fp)
 2009c78:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 2009c7c:	e0bffc17 	ldw	r2,-16(fp)
 2009c80:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 2009c84:	e0bffc17 	ldw	r2,-16(fp)
 2009c88:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 2009c8c:	e0bffc17 	ldw	r2,-16(fp)
 2009c90:	10801704 	addi	r2,r2,92
 2009c94:	01800204 	movi	r6,8
 2009c98:	000b883a 	mov	r5,zero
 2009c9c:	1009883a 	mov	r4,r2
 2009ca0:	2004ad40 	call	2004ad4 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 2009ca4:	e0bffc17 	ldw	r2,-16(fp)
 2009ca8:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 2009cac:	e0bffc17 	ldw	r2,-16(fp)
 2009cb0:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 2009cb4:	e0bffc17 	ldw	r2,-16(fp)
 2009cb8:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 2009cbc:	e0bffc17 	ldw	r2,-16(fp)
 2009cc0:	10001215 	stw	zero,72(r2)

  return fp;
 2009cc4:	e0bffc17 	ldw	r2,-16(fp)
}
 2009cc8:	e037883a 	mov	sp,fp
 2009ccc:	dfc00117 	ldw	ra,4(sp)
 2009cd0:	df000017 	ldw	fp,0(sp)
 2009cd4:	dec00204 	addi	sp,sp,8
 2009cd8:	f800283a 	ret

02009cdc <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 2009cdc:	defffc04 	addi	sp,sp,-16
 2009ce0:	dfc00315 	stw	ra,12(sp)
 2009ce4:	df000215 	stw	fp,8(sp)
 2009ce8:	df000204 	addi	fp,sp,8
 2009cec:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 2009cf0:	00808074 	movhi	r2,513
 2009cf4:	1081b904 	addi	r2,r2,1764
 2009cf8:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 2009cfc:	e17ffe17 	ldw	r5,-8(fp)
 2009d00:	e13fff17 	ldw	r4,-4(fp)
 2009d04:	200ad540 	call	200ad54 <_fwalk_reent>
}
 2009d08:	0001883a 	nop
 2009d0c:	e037883a 	mov	sp,fp
 2009d10:	dfc00117 	ldw	ra,4(sp)
 2009d14:	df000017 	ldw	fp,0(sp)
 2009d18:	dec00204 	addi	sp,sp,8
 2009d1c:	f800283a 	ret

02009d20 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 2009d20:	defffe04 	addi	sp,sp,-8
 2009d24:	dfc00115 	stw	ra,4(sp)
 2009d28:	df000015 	stw	fp,0(sp)
 2009d2c:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 2009d30:	d0a00117 	ldw	r2,-32764(gp)
 2009d34:	1009883a 	mov	r4,r2
 2009d38:	2009cdc0 	call	2009cdc <_cleanup_r>
}
 2009d3c:	0001883a 	nop
 2009d40:	e037883a 	mov	sp,fp
 2009d44:	dfc00117 	ldw	ra,4(sp)
 2009d48:	df000017 	ldw	fp,0(sp)
 2009d4c:	dec00204 	addi	sp,sp,8
 2009d50:	f800283a 	ret

02009d54 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 2009d54:	defffd04 	addi	sp,sp,-12
 2009d58:	dfc00215 	stw	ra,8(sp)
 2009d5c:	df000115 	stw	fp,4(sp)
 2009d60:	df000104 	addi	fp,sp,4
 2009d64:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 2009d68:	2009e6c0 	call	2009e6c <__sinit_lock_acquire>

  if (s->__sdidinit)
 2009d6c:	e0bfff17 	ldw	r2,-4(fp)
 2009d70:	10800e17 	ldw	r2,56(r2)
 2009d74:	10000226 	beq	r2,zero,2009d80 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 2009d78:	2009e8c0 	call	2009e8c <__sinit_lock_release>
      return;
 2009d7c:	00002606 	br	2009e18 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 2009d80:	e0ffff17 	ldw	r3,-4(fp)
 2009d84:	00808074 	movhi	r2,513
 2009d88:	10a73704 	addi	r2,r2,-25380
 2009d8c:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 2009d90:	e0bfff17 	ldw	r2,-4(fp)
 2009d94:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 2009d98:	e0bfff17 	ldw	r2,-4(fp)
 2009d9c:	00c000c4 	movi	r3,3
 2009da0:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 2009da4:	e0bfff17 	ldw	r2,-4(fp)
 2009da8:	10c0bb04 	addi	r3,r2,748
 2009dac:	e0bfff17 	ldw	r2,-4(fp)
 2009db0:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 2009db4:	e0bfff17 	ldw	r2,-4(fp)
 2009db8:	10800117 	ldw	r2,4(r2)
 2009dbc:	e1ffff17 	ldw	r7,-4(fp)
 2009dc0:	000d883a 	mov	r6,zero
 2009dc4:	01400104 	movi	r5,4
 2009dc8:	1009883a 	mov	r4,r2
 2009dcc:	20099b00 	call	20099b0 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 2009dd0:	e0bfff17 	ldw	r2,-4(fp)
 2009dd4:	10800217 	ldw	r2,8(r2)
 2009dd8:	e1ffff17 	ldw	r7,-4(fp)
 2009ddc:	01800044 	movi	r6,1
 2009de0:	01400284 	movi	r5,10
 2009de4:	1009883a 	mov	r4,r2
 2009de8:	20099b00 	call	20099b0 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 2009dec:	e0bfff17 	ldw	r2,-4(fp)
 2009df0:	10800317 	ldw	r2,12(r2)
 2009df4:	e1ffff17 	ldw	r7,-4(fp)
 2009df8:	01800084 	movi	r6,2
 2009dfc:	01400484 	movi	r5,18
 2009e00:	1009883a 	mov	r4,r2
 2009e04:	20099b00 	call	20099b0 <std>

  s->__sdidinit = 1;
 2009e08:	e0bfff17 	ldw	r2,-4(fp)
 2009e0c:	00c00044 	movi	r3,1
 2009e10:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 2009e14:	2009e8c0 	call	2009e8c <__sinit_lock_release>
}
 2009e18:	e037883a 	mov	sp,fp
 2009e1c:	dfc00117 	ldw	ra,4(sp)
 2009e20:	df000017 	ldw	fp,0(sp)
 2009e24:	dec00204 	addi	sp,sp,8
 2009e28:	f800283a 	ret

02009e2c <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 2009e2c:	deffff04 	addi	sp,sp,-4
 2009e30:	df000015 	stw	fp,0(sp)
 2009e34:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 2009e38:	0001883a 	nop
 2009e3c:	e037883a 	mov	sp,fp
 2009e40:	df000017 	ldw	fp,0(sp)
 2009e44:	dec00104 	addi	sp,sp,4
 2009e48:	f800283a 	ret

02009e4c <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 2009e4c:	deffff04 	addi	sp,sp,-4
 2009e50:	df000015 	stw	fp,0(sp)
 2009e54:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 2009e58:	0001883a 	nop
 2009e5c:	e037883a 	mov	sp,fp
 2009e60:	df000017 	ldw	fp,0(sp)
 2009e64:	dec00104 	addi	sp,sp,4
 2009e68:	f800283a 	ret

02009e6c <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 2009e6c:	deffff04 	addi	sp,sp,-4
 2009e70:	df000015 	stw	fp,0(sp)
 2009e74:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 2009e78:	0001883a 	nop
 2009e7c:	e037883a 	mov	sp,fp
 2009e80:	df000017 	ldw	fp,0(sp)
 2009e84:	dec00104 	addi	sp,sp,4
 2009e88:	f800283a 	ret

02009e8c <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 2009e8c:	deffff04 	addi	sp,sp,-4
 2009e90:	df000015 	stw	fp,0(sp)
 2009e94:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 2009e98:	0001883a 	nop
 2009e9c:	e037883a 	mov	sp,fp
 2009ea0:	df000017 	ldw	fp,0(sp)
 2009ea4:	dec00104 	addi	sp,sp,4
 2009ea8:	f800283a 	ret

02009eac <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 2009eac:	defffe04 	addi	sp,sp,-8
 2009eb0:	df000115 	stw	fp,4(sp)
 2009eb4:	df000104 	addi	fp,sp,4
 2009eb8:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 2009ebc:	0005883a 	mov	r2,zero
}
 2009ec0:	e037883a 	mov	sp,fp
 2009ec4:	df000017 	ldw	fp,0(sp)
 2009ec8:	dec00104 	addi	sp,sp,4
 2009ecc:	f800283a 	ret

02009ed0 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 2009ed0:	defffe04 	addi	sp,sp,-8
 2009ed4:	df000115 	stw	fp,4(sp)
 2009ed8:	df000104 	addi	fp,sp,4
 2009edc:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 2009ee0:	0005883a 	mov	r2,zero
}
 2009ee4:	e037883a 	mov	sp,fp
 2009ee8:	df000017 	ldw	fp,0(sp)
 2009eec:	dec00104 	addi	sp,sp,4
 2009ef0:	f800283a 	ret

02009ef4 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 2009ef4:	defffe04 	addi	sp,sp,-8
 2009ef8:	dfc00115 	stw	ra,4(sp)
 2009efc:	df000015 	stw	fp,0(sp)
 2009f00:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 2009f04:	2009e2c0 	call	2009e2c <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 2009f08:	d0a00017 	ldw	r2,-32768(gp)
 2009f0c:	01408074 	movhi	r5,513
 2009f10:	2967ab04 	addi	r5,r5,-24916
 2009f14:	1009883a 	mov	r4,r2
 2009f18:	200ac7c0 	call	200ac7c <_fwalk>
}
 2009f1c:	0001883a 	nop
 2009f20:	e037883a 	mov	sp,fp
 2009f24:	dfc00117 	ldw	ra,4(sp)
 2009f28:	df000017 	ldw	fp,0(sp)
 2009f2c:	dec00204 	addi	sp,sp,8
 2009f30:	f800283a 	ret

02009f34 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 2009f34:	defffe04 	addi	sp,sp,-8
 2009f38:	dfc00115 	stw	ra,4(sp)
 2009f3c:	df000015 	stw	fp,0(sp)
 2009f40:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 2009f44:	d0a00017 	ldw	r2,-32768(gp)
 2009f48:	01408074 	movhi	r5,513
 2009f4c:	2967b404 	addi	r5,r5,-24880
 2009f50:	1009883a 	mov	r4,r2
 2009f54:	200ac7c0 	call	200ac7c <_fwalk>

  __sfp_lock_release ();
 2009f58:	2009e4c0 	call	2009e4c <__sfp_lock_release>
}
 2009f5c:	0001883a 	nop
 2009f60:	e037883a 	mov	sp,fp
 2009f64:	dfc00117 	ldw	ra,4(sp)
 2009f68:	df000017 	ldw	fp,0(sp)
 2009f6c:	dec00204 	addi	sp,sp,8
 2009f70:	f800283a 	ret

02009f74 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 2009f74:	defff204 	addi	sp,sp,-56
 2009f78:	dfc00d15 	stw	ra,52(sp)
 2009f7c:	df000c15 	stw	fp,48(sp)
 2009f80:	df000c04 	addi	fp,sp,48
 2009f84:	e13ffe15 	stw	r4,-8(fp)
 2009f88:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 2009f8c:	e0bfff17 	ldw	r2,-4(fp)
 2009f90:	10014a26 	beq	r2,zero,200a4bc <_free_r+0x548>
    return;

  MALLOC_LOCK;
 2009f94:	e13ffe17 	ldw	r4,-8(fp)
 2009f98:	2013a480 	call	2013a48 <__malloc_lock>

  p = mem2chunk(mem);
 2009f9c:	e0bfff17 	ldw	r2,-4(fp)
 2009fa0:	10bffe04 	addi	r2,r2,-8
 2009fa4:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 2009fa8:	e0bff417 	ldw	r2,-48(fp)
 2009fac:	10800117 	ldw	r2,4(r2)
 2009fb0:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 2009fb4:	e0fff917 	ldw	r3,-28(fp)
 2009fb8:	00bfff84 	movi	r2,-2
 2009fbc:	1884703a 	and	r2,r3,r2
 2009fc0:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 2009fc4:	e0fff417 	ldw	r3,-48(fp)
 2009fc8:	e0bff517 	ldw	r2,-44(fp)
 2009fcc:	1885883a 	add	r2,r3,r2
 2009fd0:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 2009fd4:	e0bffa17 	ldw	r2,-24(fp)
 2009fd8:	10c00117 	ldw	r3,4(r2)
 2009fdc:	00bfff04 	movi	r2,-4
 2009fe0:	1884703a 	and	r2,r3,r2
 2009fe4:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 2009fe8:	008080b4 	movhi	r2,514
 2009fec:	10bc1904 	addi	r2,r2,-3996
 2009ff0:	10c00217 	ldw	r3,8(r2)
 2009ff4:	e0bffa17 	ldw	r2,-24(fp)
 2009ff8:	1880311e 	bne	r3,r2,200a0c0 <_free_r+0x14c>
  {
    sz += nextsz;
 2009ffc:	e0fff517 	ldw	r3,-44(fp)
 200a000:	e0bffb17 	ldw	r2,-20(fp)
 200a004:	1885883a 	add	r2,r3,r2
 200a008:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a00c:	e0bff917 	ldw	r2,-28(fp)
 200a010:	1080004c 	andi	r2,r2,1
 200a014:	1000181e 	bne	r2,zero,200a078 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200a018:	e0bff417 	ldw	r2,-48(fp)
 200a01c:	10800017 	ldw	r2,0(r2)
 200a020:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200a024:	e0bffc17 	ldw	r2,-16(fp)
 200a028:	0085c83a 	sub	r2,zero,r2
 200a02c:	e0fff417 	ldw	r3,-48(fp)
 200a030:	1885883a 	add	r2,r3,r2
 200a034:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200a038:	e0fff517 	ldw	r3,-44(fp)
 200a03c:	e0bffc17 	ldw	r2,-16(fp)
 200a040:	1885883a 	add	r2,r3,r2
 200a044:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200a048:	e0bff417 	ldw	r2,-48(fp)
 200a04c:	10800317 	ldw	r2,12(r2)
 200a050:	e0bff615 	stw	r2,-40(fp)
 200a054:	e0bff417 	ldw	r2,-48(fp)
 200a058:	10800217 	ldw	r2,8(r2)
 200a05c:	e0bff715 	stw	r2,-36(fp)
 200a060:	e0bff717 	ldw	r2,-36(fp)
 200a064:	e0fff617 	ldw	r3,-40(fp)
 200a068:	10c00315 	stw	r3,12(r2)
 200a06c:	e0bff617 	ldw	r2,-40(fp)
 200a070:	e0fff717 	ldw	r3,-36(fp)
 200a074:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200a078:	e0bff517 	ldw	r2,-44(fp)
 200a07c:	10c00054 	ori	r3,r2,1
 200a080:	e0bff417 	ldw	r2,-48(fp)
 200a084:	10c00115 	stw	r3,4(r2)
    top = p;
 200a088:	008080b4 	movhi	r2,514
 200a08c:	10bc1904 	addi	r2,r2,-3996
 200a090:	e0fff417 	ldw	r3,-48(fp)
 200a094:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200a098:	d0a00317 	ldw	r2,-32756(gp)
 200a09c:	e0fff517 	ldw	r3,-44(fp)
 200a0a0:	18800436 	bltu	r3,r2,200a0b4 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200a0a4:	d0a72617 	ldw	r2,-25448(gp)
 200a0a8:	100b883a 	mov	r5,r2
 200a0ac:	e13ffe17 	ldw	r4,-8(fp)
 200a0b0:	200a4d40 	call	200a4d4 <_malloc_trim_r>
    MALLOC_UNLOCK;
 200a0b4:	e13ffe17 	ldw	r4,-8(fp)
 200a0b8:	2013b680 	call	2013b68 <__malloc_unlock>
    return;
 200a0bc:	00010006 	br	200a4c0 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200a0c0:	e0bffa17 	ldw	r2,-24(fp)
 200a0c4:	e0fffb17 	ldw	r3,-20(fp)
 200a0c8:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200a0cc:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a0d0:	e0bff917 	ldw	r2,-28(fp)
 200a0d4:	1080004c 	andi	r2,r2,1
 200a0d8:	1000201e 	bne	r2,zero,200a15c <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200a0dc:	e0bff417 	ldw	r2,-48(fp)
 200a0e0:	10800017 	ldw	r2,0(r2)
 200a0e4:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200a0e8:	e0bffc17 	ldw	r2,-16(fp)
 200a0ec:	0085c83a 	sub	r2,zero,r2
 200a0f0:	e0fff417 	ldw	r3,-48(fp)
 200a0f4:	1885883a 	add	r2,r3,r2
 200a0f8:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200a0fc:	e0fff517 	ldw	r3,-44(fp)
 200a100:	e0bffc17 	ldw	r2,-16(fp)
 200a104:	1885883a 	add	r2,r3,r2
 200a108:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200a10c:	e0bff417 	ldw	r2,-48(fp)
 200a110:	10c00217 	ldw	r3,8(r2)
 200a114:	008080b4 	movhi	r2,514
 200a118:	10bc1b04 	addi	r2,r2,-3988
 200a11c:	1880031e 	bne	r3,r2,200a12c <_free_r+0x1b8>
      islr = 1;
 200a120:	00800044 	movi	r2,1
 200a124:	e0bff815 	stw	r2,-32(fp)
 200a128:	00000c06 	br	200a15c <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200a12c:	e0bff417 	ldw	r2,-48(fp)
 200a130:	10800317 	ldw	r2,12(r2)
 200a134:	e0bff615 	stw	r2,-40(fp)
 200a138:	e0bff417 	ldw	r2,-48(fp)
 200a13c:	10800217 	ldw	r2,8(r2)
 200a140:	e0bff715 	stw	r2,-36(fp)
 200a144:	e0bff717 	ldw	r2,-36(fp)
 200a148:	e0fff617 	ldw	r3,-40(fp)
 200a14c:	10c00315 	stw	r3,12(r2)
 200a150:	e0bff617 	ldw	r2,-40(fp)
 200a154:	e0fff717 	ldw	r3,-36(fp)
 200a158:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200a15c:	e0fffa17 	ldw	r3,-24(fp)
 200a160:	e0bffb17 	ldw	r2,-20(fp)
 200a164:	1885883a 	add	r2,r3,r2
 200a168:	10800117 	ldw	r2,4(r2)
 200a16c:	1080004c 	andi	r2,r2,1
 200a170:	10002a1e 	bne	r2,zero,200a21c <_free_r+0x2a8>
  {
    sz += nextsz;
 200a174:	e0fff517 	ldw	r3,-44(fp)
 200a178:	e0bffb17 	ldw	r2,-20(fp)
 200a17c:	1885883a 	add	r2,r3,r2
 200a180:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200a184:	e0bff817 	ldw	r2,-32(fp)
 200a188:	1000181e 	bne	r2,zero,200a1ec <_free_r+0x278>
 200a18c:	e0bffa17 	ldw	r2,-24(fp)
 200a190:	10c00217 	ldw	r3,8(r2)
 200a194:	008080b4 	movhi	r2,514
 200a198:	10bc1b04 	addi	r2,r2,-3988
 200a19c:	1880131e 	bne	r3,r2,200a1ec <_free_r+0x278>
    {
      islr = 1;
 200a1a0:	00800044 	movi	r2,1
 200a1a4:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200a1a8:	00c080b4 	movhi	r3,514
 200a1ac:	18fc1b04 	addi	r3,r3,-3988
 200a1b0:	008080b4 	movhi	r2,514
 200a1b4:	10bc1b04 	addi	r2,r2,-3988
 200a1b8:	e13ff417 	ldw	r4,-48(fp)
 200a1bc:	11000315 	stw	r4,12(r2)
 200a1c0:	10800317 	ldw	r2,12(r2)
 200a1c4:	18800215 	stw	r2,8(r3)
 200a1c8:	008080b4 	movhi	r2,514
 200a1cc:	10bc1b04 	addi	r2,r2,-3988
 200a1d0:	e0fff417 	ldw	r3,-48(fp)
 200a1d4:	18800315 	stw	r2,12(r3)
 200a1d8:	e0bff417 	ldw	r2,-48(fp)
 200a1dc:	10c00317 	ldw	r3,12(r2)
 200a1e0:	e0bff417 	ldw	r2,-48(fp)
 200a1e4:	10c00215 	stw	r3,8(r2)
 200a1e8:	00000c06 	br	200a21c <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200a1ec:	e0bffa17 	ldw	r2,-24(fp)
 200a1f0:	10800317 	ldw	r2,12(r2)
 200a1f4:	e0bff615 	stw	r2,-40(fp)
 200a1f8:	e0bffa17 	ldw	r2,-24(fp)
 200a1fc:	10800217 	ldw	r2,8(r2)
 200a200:	e0bff715 	stw	r2,-36(fp)
 200a204:	e0bff717 	ldw	r2,-36(fp)
 200a208:	e0fff617 	ldw	r3,-40(fp)
 200a20c:	10c00315 	stw	r3,12(r2)
 200a210:	e0bff617 	ldw	r2,-40(fp)
 200a214:	e0fff717 	ldw	r3,-36(fp)
 200a218:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200a21c:	e0bff517 	ldw	r2,-44(fp)
 200a220:	10c00054 	ori	r3,r2,1
 200a224:	e0bff417 	ldw	r2,-48(fp)
 200a228:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200a22c:	e0fff417 	ldw	r3,-48(fp)
 200a230:	e0bff517 	ldw	r2,-44(fp)
 200a234:	1885883a 	add	r2,r3,r2
 200a238:	e0fff517 	ldw	r3,-44(fp)
 200a23c:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200a240:	e0bff817 	ldw	r2,-32(fp)
 200a244:	10009a1e 	bne	r2,zero,200a4b0 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200a248:	e0bff517 	ldw	r2,-44(fp)
 200a24c:	10808028 	cmpgeui	r2,r2,512
 200a250:	10002c1e 	bne	r2,zero,200a304 <_free_r+0x390>
 200a254:	e0bff517 	ldw	r2,-44(fp)
 200a258:	1004d0fa 	srli	r2,r2,3
 200a25c:	e0bffd15 	stw	r2,-12(fp)
 200a260:	00c080b4 	movhi	r3,514
 200a264:	18fc1904 	addi	r3,r3,-3996
 200a268:	008080b4 	movhi	r2,514
 200a26c:	10bc1904 	addi	r2,r2,-3996
 200a270:	11000117 	ldw	r4,4(r2)
 200a274:	e0bffd17 	ldw	r2,-12(fp)
 200a278:	1000010e 	bge	r2,zero,200a280 <_free_r+0x30c>
 200a27c:	108000c4 	addi	r2,r2,3
 200a280:	1005d0ba 	srai	r2,r2,2
 200a284:	100b883a 	mov	r5,r2
 200a288:	00800044 	movi	r2,1
 200a28c:	1144983a 	sll	r2,r2,r5
 200a290:	2084b03a 	or	r2,r4,r2
 200a294:	18800115 	stw	r2,4(r3)
 200a298:	e0bffd17 	ldw	r2,-12(fp)
 200a29c:	10800044 	addi	r2,r2,1
 200a2a0:	1085883a 	add	r2,r2,r2
 200a2a4:	1085883a 	add	r2,r2,r2
 200a2a8:	1087883a 	add	r3,r2,r2
 200a2ac:	008080b4 	movhi	r2,514
 200a2b0:	10bc1904 	addi	r2,r2,-3996
 200a2b4:	1885883a 	add	r2,r3,r2
 200a2b8:	10bffe04 	addi	r2,r2,-8
 200a2bc:	e0bff615 	stw	r2,-40(fp)
 200a2c0:	e0bff617 	ldw	r2,-40(fp)
 200a2c4:	10800217 	ldw	r2,8(r2)
 200a2c8:	e0bff715 	stw	r2,-36(fp)
 200a2cc:	e0bff417 	ldw	r2,-48(fp)
 200a2d0:	e0fff617 	ldw	r3,-40(fp)
 200a2d4:	10c00315 	stw	r3,12(r2)
 200a2d8:	e0bff417 	ldw	r2,-48(fp)
 200a2dc:	e0fff717 	ldw	r3,-36(fp)
 200a2e0:	10c00215 	stw	r3,8(r2)
 200a2e4:	e0bff617 	ldw	r2,-40(fp)
 200a2e8:	e0fff417 	ldw	r3,-48(fp)
 200a2ec:	10c00215 	stw	r3,8(r2)
 200a2f0:	e0bff617 	ldw	r2,-40(fp)
 200a2f4:	10c00217 	ldw	r3,8(r2)
 200a2f8:	e0bff717 	ldw	r2,-36(fp)
 200a2fc:	10c00315 	stw	r3,12(r2)
 200a300:	00006b06 	br	200a4b0 <_free_r+0x53c>
 200a304:	e0bff517 	ldw	r2,-44(fp)
 200a308:	1004d27a 	srli	r2,r2,9
 200a30c:	1000031e 	bne	r2,zero,200a31c <_free_r+0x3a8>
 200a310:	e0bff517 	ldw	r2,-44(fp)
 200a314:	1004d0fa 	srli	r2,r2,3
 200a318:	00002906 	br	200a3c0 <_free_r+0x44c>
 200a31c:	e0bff517 	ldw	r2,-44(fp)
 200a320:	1004d27a 	srli	r2,r2,9
 200a324:	10800168 	cmpgeui	r2,r2,5
 200a328:	1000041e 	bne	r2,zero,200a33c <_free_r+0x3c8>
 200a32c:	e0bff517 	ldw	r2,-44(fp)
 200a330:	1004d1ba 	srli	r2,r2,6
 200a334:	10800e04 	addi	r2,r2,56
 200a338:	00002106 	br	200a3c0 <_free_r+0x44c>
 200a33c:	e0bff517 	ldw	r2,-44(fp)
 200a340:	1004d27a 	srli	r2,r2,9
 200a344:	10800568 	cmpgeui	r2,r2,21
 200a348:	1000041e 	bne	r2,zero,200a35c <_free_r+0x3e8>
 200a34c:	e0bff517 	ldw	r2,-44(fp)
 200a350:	1004d27a 	srli	r2,r2,9
 200a354:	108016c4 	addi	r2,r2,91
 200a358:	00001906 	br	200a3c0 <_free_r+0x44c>
 200a35c:	e0bff517 	ldw	r2,-44(fp)
 200a360:	1004d27a 	srli	r2,r2,9
 200a364:	10801568 	cmpgeui	r2,r2,85
 200a368:	1000041e 	bne	r2,zero,200a37c <_free_r+0x408>
 200a36c:	e0bff517 	ldw	r2,-44(fp)
 200a370:	1004d33a 	srli	r2,r2,12
 200a374:	10801b84 	addi	r2,r2,110
 200a378:	00001106 	br	200a3c0 <_free_r+0x44c>
 200a37c:	e0bff517 	ldw	r2,-44(fp)
 200a380:	1004d27a 	srli	r2,r2,9
 200a384:	10805568 	cmpgeui	r2,r2,341
 200a388:	1000041e 	bne	r2,zero,200a39c <_free_r+0x428>
 200a38c:	e0bff517 	ldw	r2,-44(fp)
 200a390:	1004d3fa 	srli	r2,r2,15
 200a394:	10801dc4 	addi	r2,r2,119
 200a398:	00000906 	br	200a3c0 <_free_r+0x44c>
 200a39c:	e0bff517 	ldw	r2,-44(fp)
 200a3a0:	1004d27a 	srli	r2,r2,9
 200a3a4:	10815568 	cmpgeui	r2,r2,1365
 200a3a8:	1000041e 	bne	r2,zero,200a3bc <_free_r+0x448>
 200a3ac:	e0bff517 	ldw	r2,-44(fp)
 200a3b0:	1004d4ba 	srli	r2,r2,18
 200a3b4:	10801f04 	addi	r2,r2,124
 200a3b8:	00000106 	br	200a3c0 <_free_r+0x44c>
 200a3bc:	00801f84 	movi	r2,126
 200a3c0:	e0bffd15 	stw	r2,-12(fp)
 200a3c4:	e0bffd17 	ldw	r2,-12(fp)
 200a3c8:	10800044 	addi	r2,r2,1
 200a3cc:	1085883a 	add	r2,r2,r2
 200a3d0:	1085883a 	add	r2,r2,r2
 200a3d4:	1087883a 	add	r3,r2,r2
 200a3d8:	008080b4 	movhi	r2,514
 200a3dc:	10bc1904 	addi	r2,r2,-3996
 200a3e0:	1885883a 	add	r2,r3,r2
 200a3e4:	10bffe04 	addi	r2,r2,-8
 200a3e8:	e0bff615 	stw	r2,-40(fp)
 200a3ec:	e0bff617 	ldw	r2,-40(fp)
 200a3f0:	10800217 	ldw	r2,8(r2)
 200a3f4:	e0bff715 	stw	r2,-36(fp)
 200a3f8:	e0fff717 	ldw	r3,-36(fp)
 200a3fc:	e0bff617 	ldw	r2,-40(fp)
 200a400:	1880121e 	bne	r3,r2,200a44c <_free_r+0x4d8>
 200a404:	00c080b4 	movhi	r3,514
 200a408:	18fc1904 	addi	r3,r3,-3996
 200a40c:	008080b4 	movhi	r2,514
 200a410:	10bc1904 	addi	r2,r2,-3996
 200a414:	11000117 	ldw	r4,4(r2)
 200a418:	e0bffd17 	ldw	r2,-12(fp)
 200a41c:	1000010e 	bge	r2,zero,200a424 <_free_r+0x4b0>
 200a420:	108000c4 	addi	r2,r2,3
 200a424:	1005d0ba 	srai	r2,r2,2
 200a428:	100b883a 	mov	r5,r2
 200a42c:	00800044 	movi	r2,1
 200a430:	1144983a 	sll	r2,r2,r5
 200a434:	2084b03a 	or	r2,r4,r2
 200a438:	18800115 	stw	r2,4(r3)
 200a43c:	00000f06 	br	200a47c <_free_r+0x508>
 200a440:	e0bff717 	ldw	r2,-36(fp)
 200a444:	10800217 	ldw	r2,8(r2)
 200a448:	e0bff715 	stw	r2,-36(fp)
 200a44c:	e0fff717 	ldw	r3,-36(fp)
 200a450:	e0bff617 	ldw	r2,-40(fp)
 200a454:	18800626 	beq	r3,r2,200a470 <_free_r+0x4fc>
 200a458:	e0bff717 	ldw	r2,-36(fp)
 200a45c:	10c00117 	ldw	r3,4(r2)
 200a460:	00bfff04 	movi	r2,-4
 200a464:	1884703a 	and	r2,r3,r2
 200a468:	e0fff517 	ldw	r3,-44(fp)
 200a46c:	18bff436 	bltu	r3,r2,200a440 <_free_r+0x4cc>
 200a470:	e0bff717 	ldw	r2,-36(fp)
 200a474:	10800317 	ldw	r2,12(r2)
 200a478:	e0bff615 	stw	r2,-40(fp)
 200a47c:	e0bff417 	ldw	r2,-48(fp)
 200a480:	e0fff617 	ldw	r3,-40(fp)
 200a484:	10c00315 	stw	r3,12(r2)
 200a488:	e0bff417 	ldw	r2,-48(fp)
 200a48c:	e0fff717 	ldw	r3,-36(fp)
 200a490:	10c00215 	stw	r3,8(r2)
 200a494:	e0bff617 	ldw	r2,-40(fp)
 200a498:	e0fff417 	ldw	r3,-48(fp)
 200a49c:	10c00215 	stw	r3,8(r2)
 200a4a0:	e0bff617 	ldw	r2,-40(fp)
 200a4a4:	10c00217 	ldw	r3,8(r2)
 200a4a8:	e0bff717 	ldw	r2,-36(fp)
 200a4ac:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200a4b0:	e13ffe17 	ldw	r4,-8(fp)
 200a4b4:	2013b680 	call	2013b68 <__malloc_unlock>
 200a4b8:	00000106 	br	200a4c0 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200a4bc:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200a4c0:	e037883a 	mov	sp,fp
 200a4c4:	dfc00117 	ldw	ra,4(sp)
 200a4c8:	df000017 	ldw	fp,0(sp)
 200a4cc:	dec00204 	addi	sp,sp,8
 200a4d0:	f800283a 	ret

0200a4d4 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200a4d4:	defff704 	addi	sp,sp,-36
 200a4d8:	dfc00815 	stw	ra,32(sp)
 200a4dc:	df000715 	stw	fp,28(sp)
 200a4e0:	df000704 	addi	fp,sp,28
 200a4e4:	e13ffe15 	stw	r4,-8(fp)
 200a4e8:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200a4ec:	00840004 	movi	r2,4096
 200a4f0:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200a4f4:	e13ffe17 	ldw	r4,-8(fp)
 200a4f8:	2013a480 	call	2013a48 <__malloc_lock>

  top_size = chunksize(top);
 200a4fc:	008080b4 	movhi	r2,514
 200a500:	10bc1904 	addi	r2,r2,-3996
 200a504:	10800217 	ldw	r2,8(r2)
 200a508:	10800117 	ldw	r2,4(r2)
 200a50c:	1007883a 	mov	r3,r2
 200a510:	00bfff04 	movi	r2,-4
 200a514:	1884703a 	and	r2,r3,r2
 200a518:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200a51c:	e0fffa17 	ldw	r3,-24(fp)
 200a520:	e0bfff17 	ldw	r2,-4(fp)
 200a524:	1887c83a 	sub	r3,r3,r2
 200a528:	e0bff917 	ldw	r2,-28(fp)
 200a52c:	1885883a 	add	r2,r3,r2
 200a530:	10bffbc4 	addi	r2,r2,-17
 200a534:	e17ff917 	ldw	r5,-28(fp)
 200a538:	1009883a 	mov	r4,r2
 200a53c:	20048900 	call	2004890 <__udivsi3>
 200a540:	10ffffc4 	addi	r3,r2,-1
 200a544:	e0bff917 	ldw	r2,-28(fp)
 200a548:	1885383a 	mul	r2,r3,r2
 200a54c:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200a550:	e0bff917 	ldw	r2,-28(fp)
 200a554:	e0fffb17 	ldw	r3,-20(fp)
 200a558:	1880040e 	bge	r3,r2,200a56c <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200a55c:	e13ffe17 	ldw	r4,-8(fp)
 200a560:	2013b680 	call	2013b68 <__malloc_unlock>
    return 0;
 200a564:	0005883a 	mov	r2,zero
 200a568:	00004806 	br	200a68c <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200a56c:	000b883a 	mov	r5,zero
 200a570:	e13ffe17 	ldw	r4,-8(fp)
 200a574:	200eb5c0 	call	200eb5c <_sbrk_r>
 200a578:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200a57c:	008080b4 	movhi	r2,514
 200a580:	10bc1904 	addi	r2,r2,-3996
 200a584:	10c00217 	ldw	r3,8(r2)
 200a588:	e0bffa17 	ldw	r2,-24(fp)
 200a58c:	1887883a 	add	r3,r3,r2
 200a590:	e0bffc17 	ldw	r2,-16(fp)
 200a594:	18800426 	beq	r3,r2,200a5a8 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200a598:	e13ffe17 	ldw	r4,-8(fp)
 200a59c:	2013b680 	call	2013b68 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200a5a0:	0005883a 	mov	r2,zero
 200a5a4:	00003906 	br	200a68c <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200a5a8:	e0bffb17 	ldw	r2,-20(fp)
 200a5ac:	0085c83a 	sub	r2,zero,r2
 200a5b0:	100b883a 	mov	r5,r2
 200a5b4:	e13ffe17 	ldw	r4,-8(fp)
 200a5b8:	200eb5c0 	call	200eb5c <_sbrk_r>
 200a5bc:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200a5c0:	e0bffd17 	ldw	r2,-12(fp)
 200a5c4:	10bfffd8 	cmpnei	r2,r2,-1
 200a5c8:	10001d1e 	bne	r2,zero,200a640 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200a5cc:	000b883a 	mov	r5,zero
 200a5d0:	e13ffe17 	ldw	r4,-8(fp)
 200a5d4:	200eb5c0 	call	200eb5c <_sbrk_r>
 200a5d8:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200a5dc:	e0fffc17 	ldw	r3,-16(fp)
 200a5e0:	008080b4 	movhi	r2,514
 200a5e4:	10bc1904 	addi	r2,r2,-3996
 200a5e8:	10800217 	ldw	r2,8(r2)
 200a5ec:	1885c83a 	sub	r2,r3,r2
 200a5f0:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200a5f4:	e0bffa17 	ldw	r2,-24(fp)
 200a5f8:	10800410 	cmplti	r2,r2,16
 200a5fc:	10000c1e 	bne	r2,zero,200a630 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200a600:	e0bffc17 	ldw	r2,-16(fp)
 200a604:	d0e00417 	ldw	r3,-32752(gp)
 200a608:	10c7c83a 	sub	r3,r2,r3
 200a60c:	008080b4 	movhi	r2,514
 200a610:	1088eb04 	addi	r2,r2,9132
 200a614:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200a618:	008080b4 	movhi	r2,514
 200a61c:	10bc1904 	addi	r2,r2,-3996
 200a620:	10800217 	ldw	r2,8(r2)
 200a624:	e0fffa17 	ldw	r3,-24(fp)
 200a628:	18c00054 	ori	r3,r3,1
 200a62c:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200a630:	e13ffe17 	ldw	r4,-8(fp)
 200a634:	2013b680 	call	2013b68 <__malloc_unlock>
        return 0; 
 200a638:	0005883a 	mov	r2,zero
 200a63c:	00001306 	br	200a68c <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200a640:	008080b4 	movhi	r2,514
 200a644:	10bc1904 	addi	r2,r2,-3996
 200a648:	10800217 	ldw	r2,8(r2)
 200a64c:	e13ffa17 	ldw	r4,-24(fp)
 200a650:	e0fffb17 	ldw	r3,-20(fp)
 200a654:	20c7c83a 	sub	r3,r4,r3
 200a658:	18c00054 	ori	r3,r3,1
 200a65c:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200a660:	008080b4 	movhi	r2,514
 200a664:	1088eb04 	addi	r2,r2,9132
 200a668:	10c00017 	ldw	r3,0(r2)
 200a66c:	e0bffb17 	ldw	r2,-20(fp)
 200a670:	1887c83a 	sub	r3,r3,r2
 200a674:	008080b4 	movhi	r2,514
 200a678:	1088eb04 	addi	r2,r2,9132
 200a67c:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200a680:	e13ffe17 	ldw	r4,-8(fp)
 200a684:	2013b680 	call	2013b68 <__malloc_unlock>
        return 1;
 200a688:	00800044 	movi	r2,1
      }
    }
  }
}
 200a68c:	e037883a 	mov	sp,fp
 200a690:	dfc00117 	ldw	ra,4(sp)
 200a694:	df000017 	ldw	fp,0(sp)
 200a698:	dec00204 	addi	sp,sp,8
 200a69c:	f800283a 	ret

0200a6a0 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200a6a0:	defff004 	addi	sp,sp,-64
 200a6a4:	dfc00f15 	stw	ra,60(sp)
 200a6a8:	df000e15 	stw	fp,56(sp)
 200a6ac:	dd800d15 	stw	r22,52(sp)
 200a6b0:	dd400c15 	stw	r21,48(sp)
 200a6b4:	dd000b15 	stw	r20,44(sp)
 200a6b8:	dcc00a15 	stw	r19,40(sp)
 200a6bc:	dc800915 	stw	r18,36(sp)
 200a6c0:	dc400815 	stw	r17,32(sp)
 200a6c4:	dc000715 	stw	r16,28(sp)
 200a6c8:	df000e04 	addi	fp,sp,56
 200a6cc:	e13ff815 	stw	r4,-32(fp)
 200a6d0:	2821883a 	mov	r16,r5
 200a6d4:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200a6d8:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200a6dc:	ac800217 	ldw	r18,8(r21)
 200a6e0:	9000021e 	bne	r18,zero,200a6ec <__sfvwrite_r+0x4c>
    return 0;
 200a6e4:	0005883a 	mov	r2,zero
 200a6e8:	00015806 	br	200ac4c <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200a6ec:	8080030b 	ldhu	r2,12(r16)
 200a6f0:	10bfffcc 	andi	r2,r2,65535
 200a6f4:	1080020c 	andi	r2,r2,8
 200a6f8:	10000226 	beq	r2,zero,200a704 <__sfvwrite_r+0x64>
 200a6fc:	80800417 	ldw	r2,16(r16)
 200a700:	1000061e 	bne	r2,zero,200a71c <__sfvwrite_r+0x7c>
 200a704:	800b883a 	mov	r5,r16
 200a708:	e13ff817 	ldw	r4,-32(fp)
 200a70c:	20075040 	call	2007504 <__swsetup_r>
 200a710:	10000226 	beq	r2,zero,200a71c <__sfvwrite_r+0x7c>
    return EOF;
 200a714:	00bfffc4 	movi	r2,-1
 200a718:	00014c06 	br	200ac4c <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200a71c:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200a720:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200a724:	8080030b 	ldhu	r2,12(r16)
 200a728:	10bfffcc 	andi	r2,r2,65535
 200a72c:	1080008c 	andi	r2,r2,2
 200a730:	10001f26 	beq	r2,zero,200a7b0 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200a734:	00000306 	br	200a744 <__sfvwrite_r+0xa4>
 200a738:	a4c00017 	ldw	r19,0(r20)
 200a73c:	a4800117 	ldw	r18,4(r20)
 200a740:	a5000204 	addi	r20,r20,8
 200a744:	903ffc26 	beq	r18,zero,200a738 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200a748:	82000917 	ldw	r8,36(r16)
 200a74c:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200a750:	9005883a 	mov	r2,r18
 200a754:	00e00034 	movhi	r3,32768
 200a758:	18ff0004 	addi	r3,r3,-1024
 200a75c:	1880022e 	bgeu	r3,r2,200a768 <__sfvwrite_r+0xc8>
 200a760:	00a00034 	movhi	r2,32768
 200a764:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200a768:	100f883a 	mov	r7,r2
 200a76c:	980d883a 	mov	r6,r19
 200a770:	200b883a 	mov	r5,r4
 200a774:	e13ff817 	ldw	r4,-32(fp)
 200a778:	403ee83a 	callr	r8
 200a77c:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200a780:	0441290e 	bge	zero,r17,200ac28 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200a784:	8805883a 	mov	r2,r17
 200a788:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200a78c:	8805883a 	mov	r2,r17
 200a790:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200a794:	a8800217 	ldw	r2,8(r21)
 200a798:	8807883a 	mov	r3,r17
 200a79c:	10c5c83a 	sub	r2,r2,r3
 200a7a0:	a8800215 	stw	r2,8(r21)
 200a7a4:	a8800217 	ldw	r2,8(r21)
 200a7a8:	103fe61e 	bne	r2,zero,200a744 <__sfvwrite_r+0xa4>
 200a7ac:	00011c06 	br	200ac20 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200a7b0:	8080030b 	ldhu	r2,12(r16)
 200a7b4:	10bfffcc 	andi	r2,r2,65535
 200a7b8:	1080004c 	andi	r2,r2,1
 200a7bc:	1000b51e 	bne	r2,zero,200aa94 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200a7c0:	00000306 	br	200a7d0 <__sfvwrite_r+0x130>
 200a7c4:	a4c00017 	ldw	r19,0(r20)
 200a7c8:	a4800117 	ldw	r18,4(r20)
 200a7cc:	a5000204 	addi	r20,r20,8
 200a7d0:	903ffc26 	beq	r18,zero,200a7c4 <__sfvwrite_r+0x124>
	  w = fp->_w;
 200a7d4:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200a7d8:	8080030b 	ldhu	r2,12(r16)
 200a7dc:	10bfffcc 	andi	r2,r2,65535
 200a7e0:	1080800c 	andi	r2,r2,512
 200a7e4:	10006b26 	beq	r2,zero,200a994 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200a7e8:	8805883a 	mov	r2,r17
 200a7ec:	90805736 	bltu	r18,r2,200a94c <__sfvwrite_r+0x2ac>
 200a7f0:	8080030b 	ldhu	r2,12(r16)
 200a7f4:	10bfffcc 	andi	r2,r2,65535
 200a7f8:	1081200c 	andi	r2,r2,1152
 200a7fc:	10005326 	beq	r2,zero,200a94c <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200a800:	80800017 	ldw	r2,0(r16)
 200a804:	1007883a 	mov	r3,r2
 200a808:	80800417 	ldw	r2,16(r16)
 200a80c:	1885c83a 	sub	r2,r3,r2
 200a810:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200a814:	80c00517 	ldw	r3,20(r16)
 200a818:	1805883a 	mov	r2,r3
 200a81c:	1085883a 	add	r2,r2,r2
 200a820:	10c5883a 	add	r2,r2,r3
 200a824:	1006d7fa 	srli	r3,r2,31
 200a828:	1885883a 	add	r2,r3,r2
 200a82c:	1005d07a 	srai	r2,r2,1
 200a830:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200a834:	e0bff617 	ldw	r2,-40(fp)
 200a838:	1485883a 	add	r2,r2,r18
 200a83c:	10800044 	addi	r2,r2,1
 200a840:	e0fff517 	ldw	r3,-44(fp)
 200a844:	1880042e 	bgeu	r3,r2,200a858 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200a848:	e0bff617 	ldw	r2,-40(fp)
 200a84c:	1485883a 	add	r2,r2,r18
 200a850:	10800044 	addi	r2,r2,1
 200a854:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200a858:	8080030b 	ldhu	r2,12(r16)
 200a85c:	10bfffcc 	andi	r2,r2,65535
 200a860:	1081000c 	andi	r2,r2,1024
 200a864:	10001726 	beq	r2,zero,200a8c4 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200a868:	e0bff517 	ldw	r2,-44(fp)
 200a86c:	100b883a 	mov	r5,r2
 200a870:	e13ff817 	ldw	r4,-32(fp)
 200a874:	200b5b40 	call	200b5b4 <_malloc_r>
 200a878:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200a87c:	e0bff417 	ldw	r2,-48(fp)
 200a880:	1000041e 	bne	r2,zero,200a894 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200a884:	e0bff817 	ldw	r2,-32(fp)
 200a888:	00c00304 	movi	r3,12
 200a88c:	10c00015 	stw	r3,0(r2)
			  goto err;
 200a890:	0000ea06 	br	200ac3c <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200a894:	80800417 	ldw	r2,16(r16)
 200a898:	e0fff617 	ldw	r3,-40(fp)
 200a89c:	180d883a 	mov	r6,r3
 200a8a0:	100b883a 	mov	r5,r2
 200a8a4:	e13ff417 	ldw	r4,-48(fp)
 200a8a8:	200494c0 	call	200494c <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200a8ac:	80c0030b 	ldhu	r3,12(r16)
 200a8b0:	00bedfc4 	movi	r2,-1153
 200a8b4:	1884703a 	and	r2,r3,r2
 200a8b8:	10802014 	ori	r2,r2,128
 200a8bc:	8080030d 	sth	r2,12(r16)
 200a8c0:	00001506 	br	200a918 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200a8c4:	80800417 	ldw	r2,16(r16)
 200a8c8:	e0fff517 	ldw	r3,-44(fp)
 200a8cc:	180d883a 	mov	r6,r3
 200a8d0:	100b883a 	mov	r5,r2
 200a8d4:	e13ff817 	ldw	r4,-32(fp)
 200a8d8:	200df6c0 	call	200df6c <_realloc_r>
 200a8dc:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200a8e0:	e0bff417 	ldw	r2,-48(fp)
 200a8e4:	10000c1e 	bne	r2,zero,200a918 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200a8e8:	80800417 	ldw	r2,16(r16)
 200a8ec:	100b883a 	mov	r5,r2
 200a8f0:	e13ff817 	ldw	r4,-32(fp)
 200a8f4:	2009f740 	call	2009f74 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200a8f8:	80c0030b 	ldhu	r3,12(r16)
 200a8fc:	00bfdfc4 	movi	r2,-129
 200a900:	1884703a 	and	r2,r3,r2
 200a904:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200a908:	e0bff817 	ldw	r2,-32(fp)
 200a90c:	00c00304 	movi	r3,12
 200a910:	10c00015 	stw	r3,0(r2)
			  goto err;
 200a914:	0000c906 	br	200ac3c <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200a918:	e0bff417 	ldw	r2,-48(fp)
 200a91c:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200a920:	e0bff617 	ldw	r2,-40(fp)
 200a924:	e0fff417 	ldw	r3,-48(fp)
 200a928:	1885883a 	add	r2,r3,r2
 200a92c:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200a930:	e0bff517 	ldw	r2,-44(fp)
 200a934:	80800515 	stw	r2,20(r16)
		  w = len;
 200a938:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200a93c:	e0fff517 	ldw	r3,-44(fp)
 200a940:	e0bff617 	ldw	r2,-40(fp)
 200a944:	1885c83a 	sub	r2,r3,r2
 200a948:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200a94c:	8805883a 	mov	r2,r17
 200a950:	9080012e 	bgeu	r18,r2,200a958 <__sfvwrite_r+0x2b8>
		w = len;
 200a954:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200a958:	80800017 	ldw	r2,0(r16)
 200a95c:	8807883a 	mov	r3,r17
 200a960:	180d883a 	mov	r6,r3
 200a964:	980b883a 	mov	r5,r19
 200a968:	1009883a 	mov	r4,r2
 200a96c:	200c2ec0 	call	200c2ec <memmove>
	      fp->_w -= w;
 200a970:	80800217 	ldw	r2,8(r16)
 200a974:	1445c83a 	sub	r2,r2,r17
 200a978:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200a97c:	80800017 	ldw	r2,0(r16)
 200a980:	8807883a 	mov	r3,r17
 200a984:	10c5883a 	add	r2,r2,r3
 200a988:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200a98c:	9023883a 	mov	r17,r18
 200a990:	00003506 	br	200aa68 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200a994:	80800017 	ldw	r2,0(r16)
 200a998:	80c00417 	ldw	r3,16(r16)
 200a99c:	18800236 	bltu	r3,r2,200a9a8 <__sfvwrite_r+0x308>
 200a9a0:	80800517 	ldw	r2,20(r16)
 200a9a4:	9080182e 	bgeu	r18,r2,200aa08 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200a9a8:	8805883a 	mov	r2,r17
 200a9ac:	9080012e 	bgeu	r18,r2,200a9b4 <__sfvwrite_r+0x314>
 200a9b0:	9005883a 	mov	r2,r18
 200a9b4:	1023883a 	mov	r17,r2
	      COPY (w);
 200a9b8:	80800017 	ldw	r2,0(r16)
 200a9bc:	8807883a 	mov	r3,r17
 200a9c0:	180d883a 	mov	r6,r3
 200a9c4:	980b883a 	mov	r5,r19
 200a9c8:	1009883a 	mov	r4,r2
 200a9cc:	200c2ec0 	call	200c2ec <memmove>
	      fp->_w -= w;
 200a9d0:	80800217 	ldw	r2,8(r16)
 200a9d4:	1445c83a 	sub	r2,r2,r17
 200a9d8:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200a9dc:	80800017 	ldw	r2,0(r16)
 200a9e0:	8807883a 	mov	r3,r17
 200a9e4:	10c5883a 	add	r2,r2,r3
 200a9e8:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200a9ec:	80800217 	ldw	r2,8(r16)
 200a9f0:	10001c1e 	bne	r2,zero,200aa64 <__sfvwrite_r+0x3c4>
 200a9f4:	800b883a 	mov	r5,r16
 200a9f8:	e13ff817 	ldw	r4,-32(fp)
 200a9fc:	20098d40 	call	20098d4 <_fflush_r>
 200aa00:	10001826 	beq	r2,zero,200aa64 <__sfvwrite_r+0x3c4>
		goto err;
 200aa04:	00008d06 	br	200ac3c <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200aa08:	9005883a 	mov	r2,r18
 200aa0c:	00e00034 	movhi	r3,32768
 200aa10:	10c00236 	bltu	r2,r3,200aa1c <__sfvwrite_r+0x37c>
 200aa14:	00a00034 	movhi	r2,32768
 200aa18:	10bfffc4 	addi	r2,r2,-1
 200aa1c:	1007883a 	mov	r3,r2
 200aa20:	80800517 	ldw	r2,20(r16)
 200aa24:	100b883a 	mov	r5,r2
 200aa28:	1809883a 	mov	r4,r3
 200aa2c:	20047980 	call	2004798 <__divsi3>
 200aa30:	1007883a 	mov	r3,r2
 200aa34:	80800517 	ldw	r2,20(r16)
 200aa38:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200aa3c:	80800917 	ldw	r2,36(r16)
 200aa40:	80c00717 	ldw	r3,28(r16)
 200aa44:	880f883a 	mov	r7,r17
 200aa48:	980d883a 	mov	r6,r19
 200aa4c:	180b883a 	mov	r5,r3
 200aa50:	e13ff817 	ldw	r4,-32(fp)
 200aa54:	103ee83a 	callr	r2
 200aa58:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200aa5c:	0440740e 	bge	zero,r17,200ac30 <__sfvwrite_r+0x590>
 200aa60:	00000106 	br	200aa68 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200aa64:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200aa68:	8805883a 	mov	r2,r17
 200aa6c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200aa70:	8805883a 	mov	r2,r17
 200aa74:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200aa78:	a8800217 	ldw	r2,8(r21)
 200aa7c:	8807883a 	mov	r3,r17
 200aa80:	10c5c83a 	sub	r2,r2,r3
 200aa84:	a8800215 	stw	r2,8(r21)
 200aa88:	a8800217 	ldw	r2,8(r21)
 200aa8c:	103f501e 	bne	r2,zero,200a7d0 <__sfvwrite_r+0x130>
 200aa90:	00006306 	br	200ac20 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200aa94:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200aa98:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200aa9c:	00000406 	br	200aab0 <__sfvwrite_r+0x410>
 200aaa0:	e03ff215 	stw	zero,-56(fp)
 200aaa4:	a4c00017 	ldw	r19,0(r20)
 200aaa8:	a4800117 	ldw	r18,4(r20)
 200aaac:	a5000204 	addi	r20,r20,8
 200aab0:	903ffb26 	beq	r18,zero,200aaa0 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200aab4:	e0bff217 	ldw	r2,-56(fp)
 200aab8:	1000111e 	bne	r2,zero,200ab00 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200aabc:	900d883a 	mov	r6,r18
 200aac0:	01400284 	movi	r5,10
 200aac4:	9809883a 	mov	r4,r19
 200aac8:	200c1300 	call	200c130 <memchr>
 200aacc:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200aad0:	e0bff717 	ldw	r2,-36(fp)
 200aad4:	10000626 	beq	r2,zero,200aaf0 <__sfvwrite_r+0x450>
 200aad8:	e0bff717 	ldw	r2,-36(fp)
 200aadc:	10800044 	addi	r2,r2,1
 200aae0:	1007883a 	mov	r3,r2
 200aae4:	9805883a 	mov	r2,r19
 200aae8:	1885c83a 	sub	r2,r3,r2
 200aaec:	00000106 	br	200aaf4 <__sfvwrite_r+0x454>
 200aaf0:	90800044 	addi	r2,r18,1
 200aaf4:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200aaf8:	00800044 	movi	r2,1
 200aafc:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200ab00:	e0bff317 	ldw	r2,-52(fp)
 200ab04:	9080012e 	bgeu	r18,r2,200ab0c <__sfvwrite_r+0x46c>
 200ab08:	9005883a 	mov	r2,r18
 200ab0c:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200ab10:	80c00217 	ldw	r3,8(r16)
 200ab14:	80800517 	ldw	r2,20(r16)
 200ab18:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200ab1c:	80800017 	ldw	r2,0(r16)
 200ab20:	80c00417 	ldw	r3,16(r16)
 200ab24:	1880102e 	bgeu	r3,r2,200ab68 <__sfvwrite_r+0x4c8>
 200ab28:	8d800f0e 	bge	r17,r22,200ab68 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200ab2c:	80800017 	ldw	r2,0(r16)
 200ab30:	8807883a 	mov	r3,r17
 200ab34:	180d883a 	mov	r6,r3
 200ab38:	980b883a 	mov	r5,r19
 200ab3c:	1009883a 	mov	r4,r2
 200ab40:	200c2ec0 	call	200c2ec <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200ab44:	80800017 	ldw	r2,0(r16)
 200ab48:	8807883a 	mov	r3,r17
 200ab4c:	10c5883a 	add	r2,r2,r3
 200ab50:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200ab54:	800b883a 	mov	r5,r16
 200ab58:	e13ff817 	ldw	r4,-32(fp)
 200ab5c:	20098d40 	call	20098d4 <_fflush_r>
 200ab60:	10001b26 	beq	r2,zero,200abd0 <__sfvwrite_r+0x530>
		goto err;
 200ab64:	00003506 	br	200ac3c <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200ab68:	84400517 	ldw	r17,20(r16)
 200ab6c:	b4400a16 	blt	r22,r17,200ab98 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200ab70:	80800917 	ldw	r2,36(r16)
 200ab74:	80c00717 	ldw	r3,28(r16)
 200ab78:	880f883a 	mov	r7,r17
 200ab7c:	980d883a 	mov	r6,r19
 200ab80:	180b883a 	mov	r5,r3
 200ab84:	e13ff817 	ldw	r4,-32(fp)
 200ab88:	103ee83a 	callr	r2
 200ab8c:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200ab90:	04400f16 	blt	zero,r17,200abd0 <__sfvwrite_r+0x530>
		goto err;
 200ab94:	00002906 	br	200ac3c <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200ab98:	b023883a 	mov	r17,r22
	      COPY (w);
 200ab9c:	80800017 	ldw	r2,0(r16)
 200aba0:	8807883a 	mov	r3,r17
 200aba4:	180d883a 	mov	r6,r3
 200aba8:	980b883a 	mov	r5,r19
 200abac:	1009883a 	mov	r4,r2
 200abb0:	200c2ec0 	call	200c2ec <memmove>
	      fp->_w -= w;
 200abb4:	80800217 	ldw	r2,8(r16)
 200abb8:	1445c83a 	sub	r2,r2,r17
 200abbc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200abc0:	80800017 	ldw	r2,0(r16)
 200abc4:	8807883a 	mov	r3,r17
 200abc8:	10c5883a 	add	r2,r2,r3
 200abcc:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200abd0:	e0bff317 	ldw	r2,-52(fp)
 200abd4:	1445c83a 	sub	r2,r2,r17
 200abd8:	e0bff315 	stw	r2,-52(fp)
 200abdc:	e0bff317 	ldw	r2,-52(fp)
 200abe0:	1000051e 	bne	r2,zero,200abf8 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200abe4:	800b883a 	mov	r5,r16
 200abe8:	e13ff817 	ldw	r4,-32(fp)
 200abec:	20098d40 	call	20098d4 <_fflush_r>
 200abf0:	1000111e 	bne	r2,zero,200ac38 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200abf4:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200abf8:	8805883a 	mov	r2,r17
 200abfc:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200ac00:	8805883a 	mov	r2,r17
 200ac04:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200ac08:	a8800217 	ldw	r2,8(r21)
 200ac0c:	8807883a 	mov	r3,r17
 200ac10:	10c5c83a 	sub	r2,r2,r3
 200ac14:	a8800215 	stw	r2,8(r21)
 200ac18:	a8800217 	ldw	r2,8(r21)
 200ac1c:	103fa41e 	bne	r2,zero,200aab0 <__sfvwrite_r+0x410>
    }
  return 0;
 200ac20:	0005883a 	mov	r2,zero
 200ac24:	00000906 	br	200ac4c <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200ac28:	0001883a 	nop
 200ac2c:	00000306 	br	200ac3c <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200ac30:	0001883a 	nop
 200ac34:	00000106 	br	200ac3c <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200ac38:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200ac3c:	8080030b 	ldhu	r2,12(r16)
 200ac40:	10801014 	ori	r2,r2,64
 200ac44:	8080030d 	sth	r2,12(r16)
  return EOF;
 200ac48:	00bfffc4 	movi	r2,-1
}
 200ac4c:	e6fff904 	addi	sp,fp,-28
 200ac50:	dfc00817 	ldw	ra,32(sp)
 200ac54:	df000717 	ldw	fp,28(sp)
 200ac58:	dd800617 	ldw	r22,24(sp)
 200ac5c:	dd400517 	ldw	r21,20(sp)
 200ac60:	dd000417 	ldw	r20,16(sp)
 200ac64:	dcc00317 	ldw	r19,12(sp)
 200ac68:	dc800217 	ldw	r18,8(sp)
 200ac6c:	dc400117 	ldw	r17,4(sp)
 200ac70:	dc000017 	ldw	r16,0(sp)
 200ac74:	dec00904 	addi	sp,sp,36
 200ac78:	f800283a 	ret

0200ac7c <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200ac7c:	defff804 	addi	sp,sp,-32
 200ac80:	dfc00715 	stw	ra,28(sp)
 200ac84:	df000615 	stw	fp,24(sp)
 200ac88:	dd000515 	stw	r20,20(sp)
 200ac8c:	dcc00415 	stw	r19,16(sp)
 200ac90:	dc800315 	stw	r18,12(sp)
 200ac94:	dc400215 	stw	r17,8(sp)
 200ac98:	dc000115 	stw	r16,4(sp)
 200ac9c:	df000604 	addi	fp,sp,24
 200aca0:	e13ffa15 	stw	r4,-24(fp)
 200aca4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200aca8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200acac:	e0bffa17 	ldw	r2,-24(fp)
 200acb0:	1440b804 	addi	r17,r2,736
 200acb4:	00001b06 	br	200ad24 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200acb8:	8c000217 	ldw	r16,8(r17)
 200acbc:	8c800117 	ldw	r18,4(r17)
 200acc0:	00001506 	br	200ad18 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200acc4:	8080030b 	ldhu	r2,12(r16)
 200acc8:	10bfffcc 	andi	r2,r2,65535
 200accc:	10a0001c 	xori	r2,r2,32768
 200acd0:	10a00004 	addi	r2,r2,-32768
 200acd4:	10000f26 	beq	r2,zero,200ad14 <_fwalk+0x98>
 200acd8:	8080030b 	ldhu	r2,12(r16)
 200acdc:	10bfffcc 	andi	r2,r2,65535
 200ace0:	10a0001c 	xori	r2,r2,32768
 200ace4:	10a00004 	addi	r2,r2,-32768
 200ace8:	10800060 	cmpeqi	r2,r2,1
 200acec:	1000091e 	bne	r2,zero,200ad14 <_fwalk+0x98>
 200acf0:	8080038b 	ldhu	r2,14(r16)
 200acf4:	10bfffcc 	andi	r2,r2,65535
 200acf8:	10a0001c 	xori	r2,r2,32768
 200acfc:	10a00004 	addi	r2,r2,-32768
 200ad00:	10bfffe0 	cmpeqi	r2,r2,-1
 200ad04:	1000031e 	bne	r2,zero,200ad14 <_fwalk+0x98>
	ret |= (*function) (fp);
 200ad08:	8009883a 	mov	r4,r16
 200ad0c:	a03ee83a 	callr	r20
 200ad10:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200ad14:	84001a04 	addi	r16,r16,104
 200ad18:	94bfffc4 	addi	r18,r18,-1
 200ad1c:	903fe90e 	bge	r18,zero,200acc4 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200ad20:	8c400017 	ldw	r17,0(r17)
 200ad24:	883fe41e 	bne	r17,zero,200acb8 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200ad28:	9805883a 	mov	r2,r19
}
 200ad2c:	e6fffb04 	addi	sp,fp,-20
 200ad30:	dfc00617 	ldw	ra,24(sp)
 200ad34:	df000517 	ldw	fp,20(sp)
 200ad38:	dd000417 	ldw	r20,16(sp)
 200ad3c:	dcc00317 	ldw	r19,12(sp)
 200ad40:	dc800217 	ldw	r18,8(sp)
 200ad44:	dc400117 	ldw	r17,4(sp)
 200ad48:	dc000017 	ldw	r16,0(sp)
 200ad4c:	dec00704 	addi	sp,sp,28
 200ad50:	f800283a 	ret

0200ad54 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200ad54:	defff804 	addi	sp,sp,-32
 200ad58:	dfc00715 	stw	ra,28(sp)
 200ad5c:	df000615 	stw	fp,24(sp)
 200ad60:	dd000515 	stw	r20,20(sp)
 200ad64:	dcc00415 	stw	r19,16(sp)
 200ad68:	dc800315 	stw	r18,12(sp)
 200ad6c:	dc400215 	stw	r17,8(sp)
 200ad70:	dc000115 	stw	r16,4(sp)
 200ad74:	df000604 	addi	fp,sp,24
 200ad78:	e13ffa15 	stw	r4,-24(fp)
 200ad7c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200ad80:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200ad84:	e0bffa17 	ldw	r2,-24(fp)
 200ad88:	1440b804 	addi	r17,r2,736
 200ad8c:	00001c06 	br	200ae00 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200ad90:	8c000217 	ldw	r16,8(r17)
 200ad94:	8c800117 	ldw	r18,4(r17)
 200ad98:	00001606 	br	200adf4 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200ad9c:	8080030b 	ldhu	r2,12(r16)
 200ada0:	10bfffcc 	andi	r2,r2,65535
 200ada4:	10a0001c 	xori	r2,r2,32768
 200ada8:	10a00004 	addi	r2,r2,-32768
 200adac:	10001026 	beq	r2,zero,200adf0 <_fwalk_reent+0x9c>
 200adb0:	8080030b 	ldhu	r2,12(r16)
 200adb4:	10bfffcc 	andi	r2,r2,65535
 200adb8:	10a0001c 	xori	r2,r2,32768
 200adbc:	10a00004 	addi	r2,r2,-32768
 200adc0:	10800060 	cmpeqi	r2,r2,1
 200adc4:	10000a1e 	bne	r2,zero,200adf0 <_fwalk_reent+0x9c>
 200adc8:	8080038b 	ldhu	r2,14(r16)
 200adcc:	10bfffcc 	andi	r2,r2,65535
 200add0:	10a0001c 	xori	r2,r2,32768
 200add4:	10a00004 	addi	r2,r2,-32768
 200add8:	10bfffe0 	cmpeqi	r2,r2,-1
 200addc:	1000041e 	bne	r2,zero,200adf0 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200ade0:	800b883a 	mov	r5,r16
 200ade4:	e13ffa17 	ldw	r4,-24(fp)
 200ade8:	a03ee83a 	callr	r20
 200adec:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200adf0:	84001a04 	addi	r16,r16,104
 200adf4:	94bfffc4 	addi	r18,r18,-1
 200adf8:	903fe80e 	bge	r18,zero,200ad9c <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200adfc:	8c400017 	ldw	r17,0(r17)
 200ae00:	883fe31e 	bne	r17,zero,200ad90 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200ae04:	9805883a 	mov	r2,r19
}
 200ae08:	e6fffb04 	addi	sp,fp,-20
 200ae0c:	dfc00617 	ldw	ra,24(sp)
 200ae10:	df000517 	ldw	fp,20(sp)
 200ae14:	dd000417 	ldw	r20,16(sp)
 200ae18:	dcc00317 	ldw	r19,12(sp)
 200ae1c:	dc800217 	ldw	r18,8(sp)
 200ae20:	dc400117 	ldw	r17,4(sp)
 200ae24:	dc000017 	ldw	r16,0(sp)
 200ae28:	dec00704 	addi	sp,sp,28
 200ae2c:	f800283a 	ret

0200ae30 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200ae30:	defffb04 	addi	sp,sp,-20
 200ae34:	dfc00415 	stw	ra,16(sp)
 200ae38:	df000315 	stw	fp,12(sp)
 200ae3c:	df000304 	addi	fp,sp,12
 200ae40:	e13ffd15 	stw	r4,-12(fp)
 200ae44:	e17ffe15 	stw	r5,-8(fp)
 200ae48:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200ae4c:	e0bfff17 	ldw	r2,-4(fp)
 200ae50:	10001126 	beq	r2,zero,200ae98 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200ae54:	014080b4 	movhi	r5,514
 200ae58:	297a2b04 	addi	r5,r5,-5972
 200ae5c:	e13fff17 	ldw	r4,-4(fp)
 200ae60:	200ee300 	call	200ee30 <strcmp>
 200ae64:	10000c26 	beq	r2,zero,200ae98 <_setlocale_r+0x68>
 200ae68:	014080b4 	movhi	r5,514
 200ae6c:	297a2d04 	addi	r5,r5,-5964
 200ae70:	e13fff17 	ldw	r4,-4(fp)
 200ae74:	200ee300 	call	200ee30 <strcmp>
 200ae78:	10000726 	beq	r2,zero,200ae98 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200ae7c:	014080b4 	movhi	r5,514
 200ae80:	297a2a04 	addi	r5,r5,-5976
 200ae84:	e13fff17 	ldw	r4,-4(fp)
 200ae88:	200ee300 	call	200ee30 <strcmp>
 200ae8c:	10000226 	beq	r2,zero,200ae98 <_setlocale_r+0x68>
        return NULL;
 200ae90:	0005883a 	mov	r2,zero
 200ae94:	00000206 	br	200aea0 <_setlocale_r+0x70>
    }
  return "C";
 200ae98:	008080b4 	movhi	r2,514
 200ae9c:	10ba2d04 	addi	r2,r2,-5964
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200aea0:	e037883a 	mov	sp,fp
 200aea4:	dfc00117 	ldw	ra,4(sp)
 200aea8:	df000017 	ldw	fp,0(sp)
 200aeac:	dec00204 	addi	sp,sp,8
 200aeb0:	f800283a 	ret

0200aeb4 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200aeb4:	deffff04 	addi	sp,sp,-4
 200aeb8:	df000015 	stw	fp,0(sp)
 200aebc:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200aec0:	008080b4 	movhi	r2,514
 200aec4:	10bc0904 	addi	r2,r2,-4060
#endif
}
 200aec8:	e037883a 	mov	sp,fp
 200aecc:	df000017 	ldw	fp,0(sp)
 200aed0:	dec00104 	addi	sp,sp,4
 200aed4:	f800283a 	ret

0200aed8 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200aed8:	deffff04 	addi	sp,sp,-4
 200aedc:	df000015 	stw	fp,0(sp)
 200aee0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200aee4:	d0a00217 	ldw	r2,-32760(gp)
#endif
}
 200aee8:	e037883a 	mov	sp,fp
 200aeec:	df000017 	ldw	fp,0(sp)
 200aef0:	dec00104 	addi	sp,sp,4
 200aef4:	f800283a 	ret

0200aef8 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200aef8:	deffff04 	addi	sp,sp,-4
 200aefc:	df000015 	stw	fp,0(sp)
 200af00:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200af04:	008080b4 	movhi	r2,514
 200af08:	10bc1104 	addi	r2,r2,-4028
#endif
}
 200af0c:	e037883a 	mov	sp,fp
 200af10:	df000017 	ldw	fp,0(sp)
 200af14:	dec00104 	addi	sp,sp,4
 200af18:	f800283a 	ret

0200af1c <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200af1c:	deffff04 	addi	sp,sp,-4
 200af20:	df000015 	stw	fp,0(sp)
 200af24:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200af28:	d0a72517 	ldw	r2,-25452(gp)
}
 200af2c:	e037883a 	mov	sp,fp
 200af30:	df000017 	ldw	fp,0(sp)
 200af34:	dec00104 	addi	sp,sp,4
 200af38:	f800283a 	ret

0200af3c <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200af3c:	defffe04 	addi	sp,sp,-8
 200af40:	df000115 	stw	fp,4(sp)
 200af44:	df000104 	addi	fp,sp,4
 200af48:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200af4c:	008080b4 	movhi	r2,514
 200af50:	10bbfb04 	addi	r2,r2,-4116
}
 200af54:	e037883a 	mov	sp,fp
 200af58:	df000017 	ldw	fp,0(sp)
 200af5c:	dec00104 	addi	sp,sp,4
 200af60:	f800283a 	ret

0200af64 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200af64:	defffc04 	addi	sp,sp,-16
 200af68:	dfc00315 	stw	ra,12(sp)
 200af6c:	df000215 	stw	fp,8(sp)
 200af70:	df000204 	addi	fp,sp,8
 200af74:	e13ffe15 	stw	r4,-8(fp)
 200af78:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200af7c:	d0a00017 	ldw	r2,-32768(gp)
 200af80:	e1bfff17 	ldw	r6,-4(fp)
 200af84:	e17ffe17 	ldw	r5,-8(fp)
 200af88:	1009883a 	mov	r4,r2
 200af8c:	200ae300 	call	200ae30 <_setlocale_r>
}
 200af90:	e037883a 	mov	sp,fp
 200af94:	dfc00117 	ldw	ra,4(sp)
 200af98:	df000017 	ldw	fp,0(sp)
 200af9c:	dec00204 	addi	sp,sp,8
 200afa0:	f800283a 	ret

0200afa4 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200afa4:	defffe04 	addi	sp,sp,-8
 200afa8:	dfc00115 	stw	ra,4(sp)
 200afac:	df000015 	stw	fp,0(sp)
 200afb0:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200afb4:	d0a00017 	ldw	r2,-32768(gp)
 200afb8:	1009883a 	mov	r4,r2
 200afbc:	200af3c0 	call	200af3c <_localeconv_r>
}
 200afc0:	e037883a 	mov	sp,fp
 200afc4:	dfc00117 	ldw	ra,4(sp)
 200afc8:	df000017 	ldw	fp,0(sp)
 200afcc:	dec00204 	addi	sp,sp,8
 200afd0:	f800283a 	ret

0200afd4 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200afd4:	deffea04 	addi	sp,sp,-88
 200afd8:	dfc01515 	stw	ra,84(sp)
 200afdc:	df001415 	stw	fp,80(sp)
 200afe0:	dcc01315 	stw	r19,76(sp)
 200afe4:	dc801215 	stw	r18,72(sp)
 200afe8:	dc401115 	stw	r17,68(sp)
 200afec:	dc001015 	stw	r16,64(sp)
 200aff0:	df001404 	addi	fp,sp,80
 200aff4:	e13ffb15 	stw	r4,-20(fp)
 200aff8:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200affc:	8080030b 	ldhu	r2,12(r16)
 200b000:	10bfffcc 	andi	r2,r2,65535
 200b004:	1080008c 	andi	r2,r2,2
 200b008:	10000726 	beq	r2,zero,200b028 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200b00c:	808010c4 	addi	r2,r16,67
 200b010:	80800015 	stw	r2,0(r16)
 200b014:	80800017 	ldw	r2,0(r16)
 200b018:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200b01c:	00800044 	movi	r2,1
 200b020:	80800515 	stw	r2,20(r16)
 200b024:	00006d06 	br	200b1dc <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200b028:	8080038b 	ldhu	r2,14(r16)
 200b02c:	10bfffcc 	andi	r2,r2,65535
 200b030:	10a0001c 	xori	r2,r2,32768
 200b034:	10a00004 	addi	r2,r2,-32768
 200b038:	10000916 	blt	r2,zero,200b060 <__smakebuf_r+0x8c>
 200b03c:	8080038b 	ldhu	r2,14(r16)
 200b040:	10bfffcc 	andi	r2,r2,65535
 200b044:	10a0001c 	xori	r2,r2,32768
 200b048:	10a00004 	addi	r2,r2,-32768
 200b04c:	e1bfec04 	addi	r6,fp,-80
 200b050:	100b883a 	mov	r5,r2
 200b054:	e13ffb17 	ldw	r4,-20(fp)
 200b058:	2010b2c0 	call	2010b2c <_fstat_r>
 200b05c:	10000c0e 	bge	r2,zero,200b090 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200b060:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200b064:	8080030b 	ldhu	r2,12(r16)
 200b068:	10bfffcc 	andi	r2,r2,65535
 200b06c:	1080200c 	andi	r2,r2,128
 200b070:	10000226 	beq	r2,zero,200b07c <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200b074:	04401004 	movi	r17,64
 200b078:	00000106 	br	200b080 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200b07c:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200b080:	8080030b 	ldhu	r2,12(r16)
 200b084:	10820014 	ori	r2,r2,2048
 200b088:	8080030d 	sth	r2,12(r16)
 200b08c:	00001606 	br	200b0e8 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200b090:	e0bfed17 	ldw	r2,-76(fp)
 200b094:	10bc000c 	andi	r2,r2,61440
 200b098:	10880020 	cmpeqi	r2,r2,8192
 200b09c:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200b0a0:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200b0a4:	e0bfed17 	ldw	r2,-76(fp)
 200b0a8:	10fc000c 	andi	r3,r2,61440
 200b0ac:	00a00014 	movui	r2,32768
 200b0b0:	18800a1e 	bne	r3,r2,200b0dc <__smakebuf_r+0x108>
 200b0b4:	80c00a17 	ldw	r3,40(r16)
 200b0b8:	00808074 	movhi	r2,513
 200b0bc:	10bb4f04 	addi	r2,r2,-4804
 200b0c0:	1880061e 	bne	r3,r2,200b0dc <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200b0c4:	8080030b 	ldhu	r2,12(r16)
 200b0c8:	10810014 	ori	r2,r2,1024
 200b0cc:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200b0d0:	00810004 	movi	r2,1024
 200b0d4:	80801315 	stw	r2,76(r16)
 200b0d8:	00000306 	br	200b0e8 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200b0dc:	8080030b 	ldhu	r2,12(r16)
 200b0e0:	10820014 	ori	r2,r2,2048
 200b0e4:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200b0e8:	90001126 	beq	r18,zero,200b130 <__smakebuf_r+0x15c>
 200b0ec:	8080038b 	ldhu	r2,14(r16)
 200b0f0:	10bfffcc 	andi	r2,r2,65535
 200b0f4:	10a0001c 	xori	r2,r2,32768
 200b0f8:	10a00004 	addi	r2,r2,-32768
 200b0fc:	100b883a 	mov	r5,r2
 200b100:	e13ffb17 	ldw	r4,-20(fp)
 200b104:	2010b940 	call	2010b94 <_isatty_r>
 200b108:	10000926 	beq	r2,zero,200b130 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200b10c:	8080030b 	ldhu	r2,12(r16)
 200b110:	10800054 	ori	r2,r2,1
 200b114:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200b118:	808010c4 	addi	r2,r16,67
 200b11c:	80800015 	stw	r2,0(r16)
 200b120:	80800017 	ldw	r2,0(r16)
 200b124:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200b128:	00800044 	movi	r2,1
 200b12c:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200b130:	880b883a 	mov	r5,r17
 200b134:	e13ffb17 	ldw	r4,-20(fp)
 200b138:	200b5b40 	call	200b5b4 <_malloc_r>
 200b13c:	1027883a 	mov	r19,r2
 200b140:	98000e1e 	bne	r19,zero,200b17c <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200b144:	8080030b 	ldhu	r2,12(r16)
 200b148:	10bfffcc 	andi	r2,r2,65535
 200b14c:	1080800c 	andi	r2,r2,512
 200b150:	1000221e 	bne	r2,zero,200b1dc <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200b154:	8080030b 	ldhu	r2,12(r16)
 200b158:	10800094 	ori	r2,r2,2
 200b15c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200b160:	808010c4 	addi	r2,r16,67
 200b164:	80800015 	stw	r2,0(r16)
 200b168:	80800017 	ldw	r2,0(r16)
 200b16c:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200b170:	00800044 	movi	r2,1
 200b174:	80800515 	stw	r2,20(r16)
 200b178:	00001806 	br	200b1dc <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200b17c:	e0fffb17 	ldw	r3,-20(fp)
 200b180:	00808074 	movhi	r2,513
 200b184:	10a73704 	addi	r2,r2,-25380
 200b188:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200b18c:	8080030b 	ldhu	r2,12(r16)
 200b190:	10802014 	ori	r2,r2,128
 200b194:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200b198:	84c00015 	stw	r19,0(r16)
 200b19c:	80800017 	ldw	r2,0(r16)
 200b1a0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200b1a4:	8805883a 	mov	r2,r17
 200b1a8:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200b1ac:	90000b26 	beq	r18,zero,200b1dc <__smakebuf_r+0x208>
 200b1b0:	8080038b 	ldhu	r2,14(r16)
 200b1b4:	10bfffcc 	andi	r2,r2,65535
 200b1b8:	10a0001c 	xori	r2,r2,32768
 200b1bc:	10a00004 	addi	r2,r2,-32768
 200b1c0:	100b883a 	mov	r5,r2
 200b1c4:	e13ffb17 	ldw	r4,-20(fp)
 200b1c8:	2010b940 	call	2010b94 <_isatty_r>
 200b1cc:	10000326 	beq	r2,zero,200b1dc <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200b1d0:	8080030b 	ldhu	r2,12(r16)
 200b1d4:	10800054 	ori	r2,r2,1
 200b1d8:	8080030d 	sth	r2,12(r16)
    }
}
 200b1dc:	e6fffc04 	addi	sp,fp,-16
 200b1e0:	dfc00517 	ldw	ra,20(sp)
 200b1e4:	df000417 	ldw	fp,16(sp)
 200b1e8:	dcc00317 	ldw	r19,12(sp)
 200b1ec:	dc800217 	ldw	r18,8(sp)
 200b1f0:	dc400117 	ldw	r17,4(sp)
 200b1f4:	dc000017 	ldw	r16,0(sp)
 200b1f8:	dec00604 	addi	sp,sp,24
 200b1fc:	f800283a 	ret

0200b200 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200b200:	defff104 	addi	sp,sp,-60
 200b204:	dfc00e15 	stw	ra,56(sp)
 200b208:	df000d15 	stw	fp,52(sp)
 200b20c:	df000d04 	addi	fp,sp,52
 200b210:	e13ffe15 	stw	r4,-8(fp)
 200b214:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200b218:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200b21c:	008080b4 	movhi	r2,514
 200b220:	10bc1904 	addi	r2,r2,-3996
 200b224:	10800217 	ldw	r2,8(r2)
 200b228:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200b22c:	e0bff817 	ldw	r2,-32(fp)
 200b230:	10c00117 	ldw	r3,4(r2)
 200b234:	00bfff04 	movi	r2,-4
 200b238:	1884703a 	and	r2,r3,r2
 200b23c:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200b240:	e0fff817 	ldw	r3,-32(fp)
 200b244:	e0bff917 	ldw	r2,-28(fp)
 200b248:	1885883a 	add	r2,r3,r2
 200b24c:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200b250:	d0e72617 	ldw	r3,-25448(gp)
 200b254:	e0bfff17 	ldw	r2,-4(fp)
 200b258:	1885883a 	add	r2,r3,r2
 200b25c:	10800404 	addi	r2,r2,16
 200b260:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200b264:	00840004 	movi	r2,4096
 200b268:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200b26c:	d0a00417 	ldw	r2,-32752(gp)
 200b270:	10bfffe0 	cmpeqi	r2,r2,-1
 200b274:	1000081e 	bne	r2,zero,200b298 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200b278:	e0fffb17 	ldw	r3,-20(fp)
 200b27c:	e0bff617 	ldw	r2,-40(fp)
 200b280:	1885883a 	add	r2,r3,r2
 200b284:	10ffffc4 	addi	r3,r2,-1
 200b288:	e0bffb17 	ldw	r2,-20(fp)
 200b28c:	0085c83a 	sub	r2,zero,r2
 200b290:	1884703a 	and	r2,r3,r2
 200b294:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200b298:	e0bff617 	ldw	r2,-40(fp)
 200b29c:	100b883a 	mov	r5,r2
 200b2a0:	e13ffe17 	ldw	r4,-8(fp)
 200b2a4:	200eb5c0 	call	200eb5c <_sbrk_r>
 200b2a8:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200b2ac:	e0bff317 	ldw	r2,-52(fp)
 200b2b0:	10bfffe0 	cmpeqi	r2,r2,-1
 200b2b4:	1000b91e 	bne	r2,zero,200b59c <malloc_extend_top+0x39c>
 200b2b8:	e0fff317 	ldw	r3,-52(fp)
 200b2bc:	e0bffa17 	ldw	r2,-24(fp)
 200b2c0:	1880042e 	bgeu	r3,r2,200b2d4 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200b2c4:	008080b4 	movhi	r2,514
 200b2c8:	10bc1904 	addi	r2,r2,-3996
 200b2cc:	e0fff817 	ldw	r3,-32(fp)
 200b2d0:	1880b21e 	bne	r3,r2,200b59c <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200b2d4:	008080b4 	movhi	r2,514
 200b2d8:	1088eb04 	addi	r2,r2,9132
 200b2dc:	10800017 	ldw	r2,0(r2)
 200b2e0:	1007883a 	mov	r3,r2
 200b2e4:	e0bff617 	ldw	r2,-40(fp)
 200b2e8:	1885883a 	add	r2,r3,r2
 200b2ec:	1007883a 	mov	r3,r2
 200b2f0:	008080b4 	movhi	r2,514
 200b2f4:	1088eb04 	addi	r2,r2,9132
 200b2f8:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200b2fc:	e0fff317 	ldw	r3,-52(fp)
 200b300:	e0bffa17 	ldw	r2,-24(fp)
 200b304:	1880101e 	bne	r3,r2,200b348 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200b308:	e0bffb17 	ldw	r2,-20(fp)
 200b30c:	10ffffc4 	addi	r3,r2,-1
 200b310:	e0bffa17 	ldw	r2,-24(fp)
 200b314:	1884703a 	and	r2,r3,r2
 200b318:	10000b1e 	bne	r2,zero,200b348 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200b31c:	e0fff617 	ldw	r3,-40(fp)
 200b320:	e0bff917 	ldw	r2,-28(fp)
 200b324:	1885883a 	add	r2,r3,r2
 200b328:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b32c:	008080b4 	movhi	r2,514
 200b330:	10bc1904 	addi	r2,r2,-3996
 200b334:	10800217 	ldw	r2,8(r2)
 200b338:	e0fffc17 	ldw	r3,-16(fp)
 200b33c:	18c00054 	ori	r3,r3,1
 200b340:	10c00115 	stw	r3,4(r2)
 200b344:	00008006 	br	200b548 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200b348:	d0a00417 	ldw	r2,-32752(gp)
 200b34c:	10bfffd8 	cmpnei	r2,r2,-1
 200b350:	1000031e 	bne	r2,zero,200b360 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200b354:	e0bff317 	ldw	r2,-52(fp)
 200b358:	d0a00415 	stw	r2,-32752(gp)
 200b35c:	00000a06 	br	200b388 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200b360:	008080b4 	movhi	r2,514
 200b364:	1088eb04 	addi	r2,r2,9132
 200b368:	10c00017 	ldw	r3,0(r2)
 200b36c:	e13ff317 	ldw	r4,-52(fp)
 200b370:	e0bffa17 	ldw	r2,-24(fp)
 200b374:	2085c83a 	sub	r2,r4,r2
 200b378:	1887883a 	add	r3,r3,r2
 200b37c:	008080b4 	movhi	r2,514
 200b380:	1088eb04 	addi	r2,r2,9132
 200b384:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200b388:	e0bff317 	ldw	r2,-52(fp)
 200b38c:	10800204 	addi	r2,r2,8
 200b390:	108001cc 	andi	r2,r2,7
 200b394:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200b398:	e0bffd17 	ldw	r2,-12(fp)
 200b39c:	10000926 	beq	r2,zero,200b3c4 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200b3a0:	00c00204 	movi	r3,8
 200b3a4:	e0bffd17 	ldw	r2,-12(fp)
 200b3a8:	1885c83a 	sub	r2,r3,r2
 200b3ac:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200b3b0:	e0fff317 	ldw	r3,-52(fp)
 200b3b4:	e0bff417 	ldw	r2,-48(fp)
 200b3b8:	1885883a 	add	r2,r3,r2
 200b3bc:	e0bff315 	stw	r2,-52(fp)
 200b3c0:	00000106 	br	200b3c8 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200b3c4:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200b3c8:	e0fff317 	ldw	r3,-52(fp)
 200b3cc:	e0bff617 	ldw	r2,-40(fp)
 200b3d0:	1885883a 	add	r2,r3,r2
 200b3d4:	1007883a 	mov	r3,r2
 200b3d8:	e0bffb17 	ldw	r2,-20(fp)
 200b3dc:	10bfffc4 	addi	r2,r2,-1
 200b3e0:	1884703a 	and	r2,r3,r2
 200b3e4:	e0fffb17 	ldw	r3,-20(fp)
 200b3e8:	1885c83a 	sub	r2,r3,r2
 200b3ec:	e0fff417 	ldw	r3,-48(fp)
 200b3f0:	1885883a 	add	r2,r3,r2
 200b3f4:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200b3f8:	e0bff417 	ldw	r2,-48(fp)
 200b3fc:	100b883a 	mov	r5,r2
 200b400:	e13ffe17 	ldw	r4,-8(fp)
 200b404:	200eb5c0 	call	200eb5c <_sbrk_r>
 200b408:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200b40c:	e0bff517 	ldw	r2,-44(fp)
 200b410:	10bfffd8 	cmpnei	r2,r2,-1
 200b414:	1000051e 	bne	r2,zero,200b42c <malloc_extend_top+0x22c>
      {
	correction = 0;
 200b418:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200b41c:	00800044 	movi	r2,1
 200b420:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200b424:	e0bff317 	ldw	r2,-52(fp)
 200b428:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200b42c:	008080b4 	movhi	r2,514
 200b430:	1088eb04 	addi	r2,r2,9132
 200b434:	10800017 	ldw	r2,0(r2)
 200b438:	1007883a 	mov	r3,r2
 200b43c:	e0bff417 	ldw	r2,-48(fp)
 200b440:	1885883a 	add	r2,r3,r2
 200b444:	1007883a 	mov	r3,r2
 200b448:	008080b4 	movhi	r2,514
 200b44c:	1088eb04 	addi	r2,r2,9132
 200b450:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200b454:	008080b4 	movhi	r2,514
 200b458:	10bc1904 	addi	r2,r2,-3996
 200b45c:	e0fff317 	ldw	r3,-52(fp)
 200b460:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200b464:	e0fff517 	ldw	r3,-44(fp)
 200b468:	e0bff317 	ldw	r2,-52(fp)
 200b46c:	1885c83a 	sub	r2,r3,r2
 200b470:	1007883a 	mov	r3,r2
 200b474:	e0bff417 	ldw	r2,-48(fp)
 200b478:	1885883a 	add	r2,r3,r2
 200b47c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b480:	008080b4 	movhi	r2,514
 200b484:	10bc1904 	addi	r2,r2,-3996
 200b488:	10800217 	ldw	r2,8(r2)
 200b48c:	e0fffc17 	ldw	r3,-16(fp)
 200b490:	18c00054 	ori	r3,r3,1
 200b494:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200b498:	008080b4 	movhi	r2,514
 200b49c:	10bc1904 	addi	r2,r2,-3996
 200b4a0:	e0fff817 	ldw	r3,-32(fp)
 200b4a4:	18802826 	beq	r3,r2,200b548 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200b4a8:	e0bff917 	ldw	r2,-28(fp)
 200b4ac:	10800428 	cmpgeui	r2,r2,16
 200b4b0:	1000061e 	bne	r2,zero,200b4cc <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200b4b4:	008080b4 	movhi	r2,514
 200b4b8:	10bc1904 	addi	r2,r2,-3996
 200b4bc:	10800217 	ldw	r2,8(r2)
 200b4c0:	00c00044 	movi	r3,1
 200b4c4:	10c00115 	stw	r3,4(r2)
        return;
 200b4c8:	00003506 	br	200b5a0 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200b4cc:	e0bff917 	ldw	r2,-28(fp)
 200b4d0:	10fffd04 	addi	r3,r2,-12
 200b4d4:	00bffe04 	movi	r2,-8
 200b4d8:	1884703a 	and	r2,r3,r2
 200b4dc:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200b4e0:	e0bff817 	ldw	r2,-32(fp)
 200b4e4:	10800117 	ldw	r2,4(r2)
 200b4e8:	10c0004c 	andi	r3,r2,1
 200b4ec:	e0bff917 	ldw	r2,-28(fp)
 200b4f0:	1886b03a 	or	r3,r3,r2
 200b4f4:	e0bff817 	ldw	r2,-32(fp)
 200b4f8:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200b4fc:	e0fff817 	ldw	r3,-32(fp)
 200b500:	e0bff917 	ldw	r2,-28(fp)
 200b504:	1885883a 	add	r2,r3,r2
 200b508:	00c00144 	movi	r3,5
 200b50c:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200b510:	e0bff917 	ldw	r2,-28(fp)
 200b514:	10800104 	addi	r2,r2,4
 200b518:	e0fff817 	ldw	r3,-32(fp)
 200b51c:	1885883a 	add	r2,r3,r2
 200b520:	00c00144 	movi	r3,5
 200b524:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200b528:	e0bff917 	ldw	r2,-28(fp)
 200b52c:	10800430 	cmpltui	r2,r2,16
 200b530:	1000051e 	bne	r2,zero,200b548 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200b534:	e0bff817 	ldw	r2,-32(fp)
 200b538:	10800204 	addi	r2,r2,8
 200b53c:	100b883a 	mov	r5,r2
 200b540:	e13ffe17 	ldw	r4,-8(fp)
 200b544:	2009f740 	call	2009f74 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200b548:	008080b4 	movhi	r2,514
 200b54c:	1088eb04 	addi	r2,r2,9132
 200b550:	10800017 	ldw	r2,0(r2)
 200b554:	1007883a 	mov	r3,r2
 200b558:	d0a72717 	ldw	r2,-25444(gp)
 200b55c:	10c0042e 	bgeu	r2,r3,200b570 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200b560:	008080b4 	movhi	r2,514
 200b564:	1088eb04 	addi	r2,r2,9132
 200b568:	10800017 	ldw	r2,0(r2)
 200b56c:	d0a72715 	stw	r2,-25444(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200b570:	008080b4 	movhi	r2,514
 200b574:	1088eb04 	addi	r2,r2,9132
 200b578:	10800017 	ldw	r2,0(r2)
 200b57c:	1007883a 	mov	r3,r2
 200b580:	d0a72817 	ldw	r2,-25440(gp)
 200b584:	10c0062e 	bgeu	r2,r3,200b5a0 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200b588:	008080b4 	movhi	r2,514
 200b58c:	1088eb04 	addi	r2,r2,9132
 200b590:	10800017 	ldw	r2,0(r2)
 200b594:	d0a72815 	stw	r2,-25440(gp)
 200b598:	00000106 	br	200b5a0 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200b59c:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200b5a0:	e037883a 	mov	sp,fp
 200b5a4:	dfc00117 	ldw	ra,4(sp)
 200b5a8:	df000017 	ldw	fp,0(sp)
 200b5ac:	dec00204 	addi	sp,sp,8
 200b5b0:	f800283a 	ret

0200b5b4 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200b5b4:	deffef04 	addi	sp,sp,-68
 200b5b8:	dfc01015 	stw	ra,64(sp)
 200b5bc:	df000f15 	stw	fp,60(sp)
 200b5c0:	df000f04 	addi	fp,sp,60
 200b5c4:	e13ffe15 	stw	r4,-8(fp)
 200b5c8:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200b5cc:	e0bfff17 	ldw	r2,-4(fp)
 200b5d0:	108002c4 	addi	r2,r2,11
 200b5d4:	108005f0 	cmpltui	r2,r2,23
 200b5d8:	1000051e 	bne	r2,zero,200b5f0 <_malloc_r+0x3c>
 200b5dc:	e0bfff17 	ldw	r2,-4(fp)
 200b5e0:	10c002c4 	addi	r3,r2,11
 200b5e4:	00bffe04 	movi	r2,-8
 200b5e8:	1884703a 	and	r2,r3,r2
 200b5ec:	00000106 	br	200b5f4 <_malloc_r+0x40>
 200b5f0:	00800404 	movi	r2,16
 200b5f4:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200b5f8:	e0bffa17 	ldw	r2,-24(fp)
 200b5fc:	10000316 	blt	r2,zero,200b60c <_malloc_r+0x58>
 200b600:	e0fffa17 	ldw	r3,-24(fp)
 200b604:	e0bfff17 	ldw	r2,-4(fp)
 200b608:	1880052e 	bgeu	r3,r2,200b620 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200b60c:	e0bffe17 	ldw	r2,-8(fp)
 200b610:	00c00304 	movi	r3,12
 200b614:	10c00015 	stw	r3,0(r2)
    return 0;
 200b618:	0005883a 	mov	r2,zero
 200b61c:	0002bf06 	br	200c11c <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200b620:	e13ffe17 	ldw	r4,-8(fp)
 200b624:	2013a480 	call	2013a48 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200b628:	e0bffa17 	ldw	r2,-24(fp)
 200b62c:	10807e28 	cmpgeui	r2,r2,504
 200b630:	10003f1e 	bne	r2,zero,200b730 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200b634:	e0bffa17 	ldw	r2,-24(fp)
 200b638:	1004d0fa 	srli	r2,r2,3
 200b63c:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200b640:	e0bff217 	ldw	r2,-56(fp)
 200b644:	10800044 	addi	r2,r2,1
 200b648:	1085883a 	add	r2,r2,r2
 200b64c:	1085883a 	add	r2,r2,r2
 200b650:	1087883a 	add	r3,r2,r2
 200b654:	008080b4 	movhi	r2,514
 200b658:	10bc1904 	addi	r2,r2,-3996
 200b65c:	1885883a 	add	r2,r3,r2
 200b660:	10bffe04 	addi	r2,r2,-8
 200b664:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200b668:	e0bff917 	ldw	r2,-28(fp)
 200b66c:	10800317 	ldw	r2,12(r2)
 200b670:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200b674:	e0fff117 	ldw	r3,-60(fp)
 200b678:	e0bff917 	ldw	r2,-28(fp)
 200b67c:	1880061e 	bne	r3,r2,200b698 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200b680:	e0bff917 	ldw	r2,-28(fp)
 200b684:	10800204 	addi	r2,r2,8
 200b688:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200b68c:	e0bff917 	ldw	r2,-28(fp)
 200b690:	10800317 	ldw	r2,12(r2)
 200b694:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200b698:	e0fff117 	ldw	r3,-60(fp)
 200b69c:	e0bff917 	ldw	r2,-28(fp)
 200b6a0:	18801f26 	beq	r3,r2,200b720 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200b6a4:	e0bff117 	ldw	r2,-60(fp)
 200b6a8:	10c00117 	ldw	r3,4(r2)
 200b6ac:	00bfff04 	movi	r2,-4
 200b6b0:	1884703a 	and	r2,r3,r2
 200b6b4:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200b6b8:	e0bff117 	ldw	r2,-60(fp)
 200b6bc:	10800317 	ldw	r2,12(r2)
 200b6c0:	e0bff815 	stw	r2,-32(fp)
 200b6c4:	e0bff117 	ldw	r2,-60(fp)
 200b6c8:	10800217 	ldw	r2,8(r2)
 200b6cc:	e0bff715 	stw	r2,-36(fp)
 200b6d0:	e0bff717 	ldw	r2,-36(fp)
 200b6d4:	e0fff817 	ldw	r3,-32(fp)
 200b6d8:	10c00315 	stw	r3,12(r2)
 200b6dc:	e0bff817 	ldw	r2,-32(fp)
 200b6e0:	e0fff717 	ldw	r3,-36(fp)
 200b6e4:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200b6e8:	e0fff117 	ldw	r3,-60(fp)
 200b6ec:	e0bffb17 	ldw	r2,-20(fp)
 200b6f0:	1885883a 	add	r2,r3,r2
 200b6f4:	e13ff117 	ldw	r4,-60(fp)
 200b6f8:	e0fffb17 	ldw	r3,-20(fp)
 200b6fc:	20c7883a 	add	r3,r4,r3
 200b700:	18c00117 	ldw	r3,4(r3)
 200b704:	18c00054 	ori	r3,r3,1
 200b708:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200b70c:	e13ffe17 	ldw	r4,-8(fp)
 200b710:	2013b680 	call	2013b68 <__malloc_unlock>
      return chunk2mem(victim);
 200b714:	e0bff117 	ldw	r2,-60(fp)
 200b718:	10800204 	addi	r2,r2,8
 200b71c:	00027f06 	br	200c11c <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200b720:	e0bff217 	ldw	r2,-56(fp)
 200b724:	10800084 	addi	r2,r2,2
 200b728:	e0bff215 	stw	r2,-56(fp)
 200b72c:	00007306 	br	200b8fc <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200b730:	e0bffa17 	ldw	r2,-24(fp)
 200b734:	1004d27a 	srli	r2,r2,9
 200b738:	1000031e 	bne	r2,zero,200b748 <_malloc_r+0x194>
 200b73c:	e0bffa17 	ldw	r2,-24(fp)
 200b740:	1004d0fa 	srli	r2,r2,3
 200b744:	00002906 	br	200b7ec <_malloc_r+0x238>
 200b748:	e0bffa17 	ldw	r2,-24(fp)
 200b74c:	1004d27a 	srli	r2,r2,9
 200b750:	10800168 	cmpgeui	r2,r2,5
 200b754:	1000041e 	bne	r2,zero,200b768 <_malloc_r+0x1b4>
 200b758:	e0bffa17 	ldw	r2,-24(fp)
 200b75c:	1004d1ba 	srli	r2,r2,6
 200b760:	10800e04 	addi	r2,r2,56
 200b764:	00002106 	br	200b7ec <_malloc_r+0x238>
 200b768:	e0bffa17 	ldw	r2,-24(fp)
 200b76c:	1004d27a 	srli	r2,r2,9
 200b770:	10800568 	cmpgeui	r2,r2,21
 200b774:	1000041e 	bne	r2,zero,200b788 <_malloc_r+0x1d4>
 200b778:	e0bffa17 	ldw	r2,-24(fp)
 200b77c:	1004d27a 	srli	r2,r2,9
 200b780:	108016c4 	addi	r2,r2,91
 200b784:	00001906 	br	200b7ec <_malloc_r+0x238>
 200b788:	e0bffa17 	ldw	r2,-24(fp)
 200b78c:	1004d27a 	srli	r2,r2,9
 200b790:	10801568 	cmpgeui	r2,r2,85
 200b794:	1000041e 	bne	r2,zero,200b7a8 <_malloc_r+0x1f4>
 200b798:	e0bffa17 	ldw	r2,-24(fp)
 200b79c:	1004d33a 	srli	r2,r2,12
 200b7a0:	10801b84 	addi	r2,r2,110
 200b7a4:	00001106 	br	200b7ec <_malloc_r+0x238>
 200b7a8:	e0bffa17 	ldw	r2,-24(fp)
 200b7ac:	1004d27a 	srli	r2,r2,9
 200b7b0:	10805568 	cmpgeui	r2,r2,341
 200b7b4:	1000041e 	bne	r2,zero,200b7c8 <_malloc_r+0x214>
 200b7b8:	e0bffa17 	ldw	r2,-24(fp)
 200b7bc:	1004d3fa 	srli	r2,r2,15
 200b7c0:	10801dc4 	addi	r2,r2,119
 200b7c4:	00000906 	br	200b7ec <_malloc_r+0x238>
 200b7c8:	e0bffa17 	ldw	r2,-24(fp)
 200b7cc:	1004d27a 	srli	r2,r2,9
 200b7d0:	10815568 	cmpgeui	r2,r2,1365
 200b7d4:	1000041e 	bne	r2,zero,200b7e8 <_malloc_r+0x234>
 200b7d8:	e0bffa17 	ldw	r2,-24(fp)
 200b7dc:	1004d4ba 	srli	r2,r2,18
 200b7e0:	10801f04 	addi	r2,r2,124
 200b7e4:	00000106 	br	200b7ec <_malloc_r+0x238>
 200b7e8:	00801f84 	movi	r2,126
 200b7ec:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 200b7f0:	e0bff217 	ldw	r2,-56(fp)
 200b7f4:	10800044 	addi	r2,r2,1
 200b7f8:	1085883a 	add	r2,r2,r2
 200b7fc:	1085883a 	add	r2,r2,r2
 200b800:	1087883a 	add	r3,r2,r2
 200b804:	008080b4 	movhi	r2,514
 200b808:	10bc1904 	addi	r2,r2,-3996
 200b80c:	1885883a 	add	r2,r3,r2
 200b810:	10bffe04 	addi	r2,r2,-8
 200b814:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200b818:	e0bff317 	ldw	r2,-52(fp)
 200b81c:	10800317 	ldw	r2,12(r2)
 200b820:	e0bff115 	stw	r2,-60(fp)
 200b824:	00002f06 	br	200b8e4 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 200b828:	e0bff117 	ldw	r2,-60(fp)
 200b82c:	10c00117 	ldw	r3,4(r2)
 200b830:	00bfff04 	movi	r2,-4
 200b834:	1884703a 	and	r2,r3,r2
 200b838:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 200b83c:	e0fffb17 	ldw	r3,-20(fp)
 200b840:	e0bffa17 	ldw	r2,-24(fp)
 200b844:	1885c83a 	sub	r2,r3,r2
 200b848:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 200b84c:	e0bff417 	ldw	r2,-48(fp)
 200b850:	10800410 	cmplti	r2,r2,16
 200b854:	1000041e 	bne	r2,zero,200b868 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 200b858:	e0bff217 	ldw	r2,-56(fp)
 200b85c:	10bfffc4 	addi	r2,r2,-1
 200b860:	e0bff215 	stw	r2,-56(fp)
        break;   
 200b864:	00002206 	br	200b8f0 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 200b868:	e0bff417 	ldw	r2,-48(fp)
 200b86c:	10001a16 	blt	r2,zero,200b8d8 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 200b870:	e0bff117 	ldw	r2,-60(fp)
 200b874:	10800317 	ldw	r2,12(r2)
 200b878:	e0bff815 	stw	r2,-32(fp)
 200b87c:	e0bff117 	ldw	r2,-60(fp)
 200b880:	10800217 	ldw	r2,8(r2)
 200b884:	e0bff715 	stw	r2,-36(fp)
 200b888:	e0bff717 	ldw	r2,-36(fp)
 200b88c:	e0fff817 	ldw	r3,-32(fp)
 200b890:	10c00315 	stw	r3,12(r2)
 200b894:	e0bff817 	ldw	r2,-32(fp)
 200b898:	e0fff717 	ldw	r3,-36(fp)
 200b89c:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 200b8a0:	e0fff117 	ldw	r3,-60(fp)
 200b8a4:	e0bffb17 	ldw	r2,-20(fp)
 200b8a8:	1885883a 	add	r2,r3,r2
 200b8ac:	e13ff117 	ldw	r4,-60(fp)
 200b8b0:	e0fffb17 	ldw	r3,-20(fp)
 200b8b4:	20c7883a 	add	r3,r4,r3
 200b8b8:	18c00117 	ldw	r3,4(r3)
 200b8bc:	18c00054 	ori	r3,r3,1
 200b8c0:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 200b8c4:	e13ffe17 	ldw	r4,-8(fp)
 200b8c8:	2013b680 	call	2013b68 <__malloc_unlock>
        return chunk2mem(victim);
 200b8cc:	e0bff117 	ldw	r2,-60(fp)
 200b8d0:	10800204 	addi	r2,r2,8
 200b8d4:	00021106 	br	200c11c <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200b8d8:	e0bff117 	ldw	r2,-60(fp)
 200b8dc:	10800317 	ldw	r2,12(r2)
 200b8e0:	e0bff115 	stw	r2,-60(fp)
 200b8e4:	e0fff117 	ldw	r3,-60(fp)
 200b8e8:	e0bff317 	ldw	r2,-52(fp)
 200b8ec:	18bfce1e 	bne	r3,r2,200b828 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 200b8f0:	e0bff217 	ldw	r2,-56(fp)
 200b8f4:	10800044 	addi	r2,r2,1
 200b8f8:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 200b8fc:	008080b4 	movhi	r2,514
 200b900:	10bc1b04 	addi	r2,r2,-3988
 200b904:	10800217 	ldw	r2,8(r2)
 200b908:	e0bff115 	stw	r2,-60(fp)
 200b90c:	008080b4 	movhi	r2,514
 200b910:	10bc1b04 	addi	r2,r2,-3988
 200b914:	e0fff117 	ldw	r3,-60(fp)
 200b918:	1880e626 	beq	r3,r2,200bcb4 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 200b91c:	e0bff117 	ldw	r2,-60(fp)
 200b920:	10c00117 	ldw	r3,4(r2)
 200b924:	00bfff04 	movi	r2,-4
 200b928:	1884703a 	and	r2,r3,r2
 200b92c:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 200b930:	e0fffb17 	ldw	r3,-20(fp)
 200b934:	e0bffa17 	ldw	r2,-24(fp)
 200b938:	1885c83a 	sub	r2,r3,r2
 200b93c:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 200b940:	e0bff417 	ldw	r2,-48(fp)
 200b944:	10800410 	cmplti	r2,r2,16
 200b948:	1000271e 	bne	r2,zero,200b9e8 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 200b94c:	e0fff117 	ldw	r3,-60(fp)
 200b950:	e0bffa17 	ldw	r2,-24(fp)
 200b954:	1885883a 	add	r2,r3,r2
 200b958:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 200b95c:	e0bffa17 	ldw	r2,-24(fp)
 200b960:	10c00054 	ori	r3,r2,1
 200b964:	e0bff117 	ldw	r2,-60(fp)
 200b968:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 200b96c:	00c080b4 	movhi	r3,514
 200b970:	18fc1b04 	addi	r3,r3,-3988
 200b974:	008080b4 	movhi	r2,514
 200b978:	10bc1b04 	addi	r2,r2,-3988
 200b97c:	e13ffc17 	ldw	r4,-16(fp)
 200b980:	11000315 	stw	r4,12(r2)
 200b984:	10800317 	ldw	r2,12(r2)
 200b988:	18800215 	stw	r2,8(r3)
 200b98c:	008080b4 	movhi	r2,514
 200b990:	10bc1b04 	addi	r2,r2,-3988
 200b994:	e0fffc17 	ldw	r3,-16(fp)
 200b998:	18800315 	stw	r2,12(r3)
 200b99c:	e0bffc17 	ldw	r2,-16(fp)
 200b9a0:	10c00317 	ldw	r3,12(r2)
 200b9a4:	e0bffc17 	ldw	r2,-16(fp)
 200b9a8:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 200b9ac:	e0bff417 	ldw	r2,-48(fp)
 200b9b0:	10800054 	ori	r2,r2,1
 200b9b4:	1007883a 	mov	r3,r2
 200b9b8:	e0bffc17 	ldw	r2,-16(fp)
 200b9bc:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 200b9c0:	e0bff417 	ldw	r2,-48(fp)
 200b9c4:	e0fffc17 	ldw	r3,-16(fp)
 200b9c8:	1885883a 	add	r2,r3,r2
 200b9cc:	e0fff417 	ldw	r3,-48(fp)
 200b9d0:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200b9d4:	e13ffe17 	ldw	r4,-8(fp)
 200b9d8:	2013b680 	call	2013b68 <__malloc_unlock>
      return chunk2mem(victim);
 200b9dc:	e0bff117 	ldw	r2,-60(fp)
 200b9e0:	10800204 	addi	r2,r2,8
 200b9e4:	0001cd06 	br	200c11c <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200b9e8:	00c080b4 	movhi	r3,514
 200b9ec:	18fc1b04 	addi	r3,r3,-3988
 200b9f0:	008080b4 	movhi	r2,514
 200b9f4:	10bc1b04 	addi	r2,r2,-3988
 200b9f8:	010080b4 	movhi	r4,514
 200b9fc:	213c1b04 	addi	r4,r4,-3988
 200ba00:	11000315 	stw	r4,12(r2)
 200ba04:	10800317 	ldw	r2,12(r2)
 200ba08:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 200ba0c:	e0bff417 	ldw	r2,-48(fp)
 200ba10:	10000e16 	blt	r2,zero,200ba4c <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 200ba14:	e0fff117 	ldw	r3,-60(fp)
 200ba18:	e0bffb17 	ldw	r2,-20(fp)
 200ba1c:	1885883a 	add	r2,r3,r2
 200ba20:	e13ff117 	ldw	r4,-60(fp)
 200ba24:	e0fffb17 	ldw	r3,-20(fp)
 200ba28:	20c7883a 	add	r3,r4,r3
 200ba2c:	18c00117 	ldw	r3,4(r3)
 200ba30:	18c00054 	ori	r3,r3,1
 200ba34:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200ba38:	e13ffe17 	ldw	r4,-8(fp)
 200ba3c:	2013b680 	call	2013b68 <__malloc_unlock>
      return chunk2mem(victim);
 200ba40:	e0bff117 	ldw	r2,-60(fp)
 200ba44:	10800204 	addi	r2,r2,8
 200ba48:	0001b406 	br	200c11c <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 200ba4c:	e0bffb17 	ldw	r2,-20(fp)
 200ba50:	10808028 	cmpgeui	r2,r2,512
 200ba54:	10002c1e 	bne	r2,zero,200bb08 <_malloc_r+0x554>
 200ba58:	e0bffb17 	ldw	r2,-20(fp)
 200ba5c:	1004d0fa 	srli	r2,r2,3
 200ba60:	e0bffd15 	stw	r2,-12(fp)
 200ba64:	00c080b4 	movhi	r3,514
 200ba68:	18fc1904 	addi	r3,r3,-3996
 200ba6c:	008080b4 	movhi	r2,514
 200ba70:	10bc1904 	addi	r2,r2,-3996
 200ba74:	11000117 	ldw	r4,4(r2)
 200ba78:	e0bffd17 	ldw	r2,-12(fp)
 200ba7c:	1000010e 	bge	r2,zero,200ba84 <_malloc_r+0x4d0>
 200ba80:	108000c4 	addi	r2,r2,3
 200ba84:	1005d0ba 	srai	r2,r2,2
 200ba88:	100b883a 	mov	r5,r2
 200ba8c:	00800044 	movi	r2,1
 200ba90:	1144983a 	sll	r2,r2,r5
 200ba94:	2084b03a 	or	r2,r4,r2
 200ba98:	18800115 	stw	r2,4(r3)
 200ba9c:	e0bffd17 	ldw	r2,-12(fp)
 200baa0:	10800044 	addi	r2,r2,1
 200baa4:	1085883a 	add	r2,r2,r2
 200baa8:	1085883a 	add	r2,r2,r2
 200baac:	1087883a 	add	r3,r2,r2
 200bab0:	008080b4 	movhi	r2,514
 200bab4:	10bc1904 	addi	r2,r2,-3996
 200bab8:	1885883a 	add	r2,r3,r2
 200babc:	10bffe04 	addi	r2,r2,-8
 200bac0:	e0bff815 	stw	r2,-32(fp)
 200bac4:	e0bff817 	ldw	r2,-32(fp)
 200bac8:	10800217 	ldw	r2,8(r2)
 200bacc:	e0bff715 	stw	r2,-36(fp)
 200bad0:	e0bff117 	ldw	r2,-60(fp)
 200bad4:	e0fff817 	ldw	r3,-32(fp)
 200bad8:	10c00315 	stw	r3,12(r2)
 200badc:	e0bff117 	ldw	r2,-60(fp)
 200bae0:	e0fff717 	ldw	r3,-36(fp)
 200bae4:	10c00215 	stw	r3,8(r2)
 200bae8:	e0bff817 	ldw	r2,-32(fp)
 200baec:	e0fff117 	ldw	r3,-60(fp)
 200baf0:	10c00215 	stw	r3,8(r2)
 200baf4:	e0bff817 	ldw	r2,-32(fp)
 200baf8:	10c00217 	ldw	r3,8(r2)
 200bafc:	e0bff717 	ldw	r2,-36(fp)
 200bb00:	10c00315 	stw	r3,12(r2)
 200bb04:	00006b06 	br	200bcb4 <_malloc_r+0x700>
 200bb08:	e0bffb17 	ldw	r2,-20(fp)
 200bb0c:	1004d27a 	srli	r2,r2,9
 200bb10:	1000031e 	bne	r2,zero,200bb20 <_malloc_r+0x56c>
 200bb14:	e0bffb17 	ldw	r2,-20(fp)
 200bb18:	1004d0fa 	srli	r2,r2,3
 200bb1c:	00002906 	br	200bbc4 <_malloc_r+0x610>
 200bb20:	e0bffb17 	ldw	r2,-20(fp)
 200bb24:	1004d27a 	srli	r2,r2,9
 200bb28:	10800168 	cmpgeui	r2,r2,5
 200bb2c:	1000041e 	bne	r2,zero,200bb40 <_malloc_r+0x58c>
 200bb30:	e0bffb17 	ldw	r2,-20(fp)
 200bb34:	1004d1ba 	srli	r2,r2,6
 200bb38:	10800e04 	addi	r2,r2,56
 200bb3c:	00002106 	br	200bbc4 <_malloc_r+0x610>
 200bb40:	e0bffb17 	ldw	r2,-20(fp)
 200bb44:	1004d27a 	srli	r2,r2,9
 200bb48:	10800568 	cmpgeui	r2,r2,21
 200bb4c:	1000041e 	bne	r2,zero,200bb60 <_malloc_r+0x5ac>
 200bb50:	e0bffb17 	ldw	r2,-20(fp)
 200bb54:	1004d27a 	srli	r2,r2,9
 200bb58:	108016c4 	addi	r2,r2,91
 200bb5c:	00001906 	br	200bbc4 <_malloc_r+0x610>
 200bb60:	e0bffb17 	ldw	r2,-20(fp)
 200bb64:	1004d27a 	srli	r2,r2,9
 200bb68:	10801568 	cmpgeui	r2,r2,85
 200bb6c:	1000041e 	bne	r2,zero,200bb80 <_malloc_r+0x5cc>
 200bb70:	e0bffb17 	ldw	r2,-20(fp)
 200bb74:	1004d33a 	srli	r2,r2,12
 200bb78:	10801b84 	addi	r2,r2,110
 200bb7c:	00001106 	br	200bbc4 <_malloc_r+0x610>
 200bb80:	e0bffb17 	ldw	r2,-20(fp)
 200bb84:	1004d27a 	srli	r2,r2,9
 200bb88:	10805568 	cmpgeui	r2,r2,341
 200bb8c:	1000041e 	bne	r2,zero,200bba0 <_malloc_r+0x5ec>
 200bb90:	e0bffb17 	ldw	r2,-20(fp)
 200bb94:	1004d3fa 	srli	r2,r2,15
 200bb98:	10801dc4 	addi	r2,r2,119
 200bb9c:	00000906 	br	200bbc4 <_malloc_r+0x610>
 200bba0:	e0bffb17 	ldw	r2,-20(fp)
 200bba4:	1004d27a 	srli	r2,r2,9
 200bba8:	10815568 	cmpgeui	r2,r2,1365
 200bbac:	1000041e 	bne	r2,zero,200bbc0 <_malloc_r+0x60c>
 200bbb0:	e0bffb17 	ldw	r2,-20(fp)
 200bbb4:	1004d4ba 	srli	r2,r2,18
 200bbb8:	10801f04 	addi	r2,r2,124
 200bbbc:	00000106 	br	200bbc4 <_malloc_r+0x610>
 200bbc0:	00801f84 	movi	r2,126
 200bbc4:	e0bffd15 	stw	r2,-12(fp)
 200bbc8:	e0bffd17 	ldw	r2,-12(fp)
 200bbcc:	10800044 	addi	r2,r2,1
 200bbd0:	1085883a 	add	r2,r2,r2
 200bbd4:	1085883a 	add	r2,r2,r2
 200bbd8:	1087883a 	add	r3,r2,r2
 200bbdc:	008080b4 	movhi	r2,514
 200bbe0:	10bc1904 	addi	r2,r2,-3996
 200bbe4:	1885883a 	add	r2,r3,r2
 200bbe8:	10bffe04 	addi	r2,r2,-8
 200bbec:	e0bff815 	stw	r2,-32(fp)
 200bbf0:	e0bff817 	ldw	r2,-32(fp)
 200bbf4:	10800217 	ldw	r2,8(r2)
 200bbf8:	e0bff715 	stw	r2,-36(fp)
 200bbfc:	e0fff717 	ldw	r3,-36(fp)
 200bc00:	e0bff817 	ldw	r2,-32(fp)
 200bc04:	1880121e 	bne	r3,r2,200bc50 <_malloc_r+0x69c>
 200bc08:	00c080b4 	movhi	r3,514
 200bc0c:	18fc1904 	addi	r3,r3,-3996
 200bc10:	008080b4 	movhi	r2,514
 200bc14:	10bc1904 	addi	r2,r2,-3996
 200bc18:	11000117 	ldw	r4,4(r2)
 200bc1c:	e0bffd17 	ldw	r2,-12(fp)
 200bc20:	1000010e 	bge	r2,zero,200bc28 <_malloc_r+0x674>
 200bc24:	108000c4 	addi	r2,r2,3
 200bc28:	1005d0ba 	srai	r2,r2,2
 200bc2c:	100b883a 	mov	r5,r2
 200bc30:	00800044 	movi	r2,1
 200bc34:	1144983a 	sll	r2,r2,r5
 200bc38:	2084b03a 	or	r2,r4,r2
 200bc3c:	18800115 	stw	r2,4(r3)
 200bc40:	00000f06 	br	200bc80 <_malloc_r+0x6cc>
 200bc44:	e0bff717 	ldw	r2,-36(fp)
 200bc48:	10800217 	ldw	r2,8(r2)
 200bc4c:	e0bff715 	stw	r2,-36(fp)
 200bc50:	e0fff717 	ldw	r3,-36(fp)
 200bc54:	e0bff817 	ldw	r2,-32(fp)
 200bc58:	18800626 	beq	r3,r2,200bc74 <_malloc_r+0x6c0>
 200bc5c:	e0bff717 	ldw	r2,-36(fp)
 200bc60:	10c00117 	ldw	r3,4(r2)
 200bc64:	00bfff04 	movi	r2,-4
 200bc68:	1884703a 	and	r2,r3,r2
 200bc6c:	e0fffb17 	ldw	r3,-20(fp)
 200bc70:	18bff436 	bltu	r3,r2,200bc44 <_malloc_r+0x690>
 200bc74:	e0bff717 	ldw	r2,-36(fp)
 200bc78:	10800317 	ldw	r2,12(r2)
 200bc7c:	e0bff815 	stw	r2,-32(fp)
 200bc80:	e0bff117 	ldw	r2,-60(fp)
 200bc84:	e0fff817 	ldw	r3,-32(fp)
 200bc88:	10c00315 	stw	r3,12(r2)
 200bc8c:	e0bff117 	ldw	r2,-60(fp)
 200bc90:	e0fff717 	ldw	r3,-36(fp)
 200bc94:	10c00215 	stw	r3,8(r2)
 200bc98:	e0bff817 	ldw	r2,-32(fp)
 200bc9c:	e0fff117 	ldw	r3,-60(fp)
 200bca0:	10c00215 	stw	r3,8(r2)
 200bca4:	e0bff817 	ldw	r2,-32(fp)
 200bca8:	10c00217 	ldw	r3,8(r2)
 200bcac:	e0bff717 	ldw	r2,-36(fp)
 200bcb0:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 200bcb4:	e0bff217 	ldw	r2,-56(fp)
 200bcb8:	1000010e 	bge	r2,zero,200bcc0 <_malloc_r+0x70c>
 200bcbc:	108000c4 	addi	r2,r2,3
 200bcc0:	1005d0ba 	srai	r2,r2,2
 200bcc4:	1007883a 	mov	r3,r2
 200bcc8:	00800044 	movi	r2,1
 200bccc:	10c4983a 	sll	r2,r2,r3
 200bcd0:	e0bff515 	stw	r2,-44(fp)
 200bcd4:	008080b4 	movhi	r2,514
 200bcd8:	10bc1904 	addi	r2,r2,-3996
 200bcdc:	10c00117 	ldw	r3,4(r2)
 200bce0:	e0bff517 	ldw	r2,-44(fp)
 200bce4:	1880c636 	bltu	r3,r2,200c000 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200bce8:	008080b4 	movhi	r2,514
 200bcec:	10bc1904 	addi	r2,r2,-3996
 200bcf0:	10c00117 	ldw	r3,4(r2)
 200bcf4:	e0bff517 	ldw	r2,-44(fp)
 200bcf8:	1884703a 	and	r2,r3,r2
 200bcfc:	1000151e 	bne	r2,zero,200bd54 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 200bd00:	e0fff217 	ldw	r3,-56(fp)
 200bd04:	00bfff04 	movi	r2,-4
 200bd08:	1884703a 	and	r2,r3,r2
 200bd0c:	10800104 	addi	r2,r2,4
 200bd10:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 200bd14:	e0bff517 	ldw	r2,-44(fp)
 200bd18:	1085883a 	add	r2,r2,r2
 200bd1c:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 200bd20:	00000606 	br	200bd3c <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 200bd24:	e0bff217 	ldw	r2,-56(fp)
 200bd28:	10800104 	addi	r2,r2,4
 200bd2c:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 200bd30:	e0bff517 	ldw	r2,-44(fp)
 200bd34:	1085883a 	add	r2,r2,r2
 200bd38:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 200bd3c:	008080b4 	movhi	r2,514
 200bd40:	10bc1904 	addi	r2,r2,-3996
 200bd44:	10c00117 	ldw	r3,4(r2)
 200bd48:	e0bff517 	ldw	r2,-44(fp)
 200bd4c:	1884703a 	and	r2,r3,r2
 200bd50:	103ff426 	beq	r2,zero,200bd24 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 200bd54:	e0bff217 	ldw	r2,-56(fp)
 200bd58:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 200bd5c:	e0bff217 	ldw	r2,-56(fp)
 200bd60:	10800044 	addi	r2,r2,1
 200bd64:	1085883a 	add	r2,r2,r2
 200bd68:	1085883a 	add	r2,r2,r2
 200bd6c:	1087883a 	add	r3,r2,r2
 200bd70:	008080b4 	movhi	r2,514
 200bd74:	10bc1904 	addi	r2,r2,-3996
 200bd78:	1885883a 	add	r2,r3,r2
 200bd7c:	10bffe04 	addi	r2,r2,-8
 200bd80:	e0bff315 	stw	r2,-52(fp)
 200bd84:	e0bff317 	ldw	r2,-52(fp)
 200bd88:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200bd8c:	e0bff317 	ldw	r2,-52(fp)
 200bd90:	10800317 	ldw	r2,12(r2)
 200bd94:	e0bff115 	stw	r2,-60(fp)
 200bd98:	00005e06 	br	200bf14 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 200bd9c:	e0bff117 	ldw	r2,-60(fp)
 200bda0:	10c00117 	ldw	r3,4(r2)
 200bda4:	00bfff04 	movi	r2,-4
 200bda8:	1884703a 	and	r2,r3,r2
 200bdac:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 200bdb0:	e0fffb17 	ldw	r3,-20(fp)
 200bdb4:	e0bffa17 	ldw	r2,-24(fp)
 200bdb8:	1885c83a 	sub	r2,r3,r2
 200bdbc:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 200bdc0:	e0bff417 	ldw	r2,-48(fp)
 200bdc4:	10800410 	cmplti	r2,r2,16
 200bdc8:	1000331e 	bne	r2,zero,200be98 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 200bdcc:	e0fff117 	ldw	r3,-60(fp)
 200bdd0:	e0bffa17 	ldw	r2,-24(fp)
 200bdd4:	1885883a 	add	r2,r3,r2
 200bdd8:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 200bddc:	e0bffa17 	ldw	r2,-24(fp)
 200bde0:	10c00054 	ori	r3,r2,1
 200bde4:	e0bff117 	ldw	r2,-60(fp)
 200bde8:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200bdec:	e0bff117 	ldw	r2,-60(fp)
 200bdf0:	10800317 	ldw	r2,12(r2)
 200bdf4:	e0bff815 	stw	r2,-32(fp)
 200bdf8:	e0bff117 	ldw	r2,-60(fp)
 200bdfc:	10800217 	ldw	r2,8(r2)
 200be00:	e0bff715 	stw	r2,-36(fp)
 200be04:	e0bff717 	ldw	r2,-36(fp)
 200be08:	e0fff817 	ldw	r3,-32(fp)
 200be0c:	10c00315 	stw	r3,12(r2)
 200be10:	e0bff817 	ldw	r2,-32(fp)
 200be14:	e0fff717 	ldw	r3,-36(fp)
 200be18:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 200be1c:	00c080b4 	movhi	r3,514
 200be20:	18fc1b04 	addi	r3,r3,-3988
 200be24:	008080b4 	movhi	r2,514
 200be28:	10bc1b04 	addi	r2,r2,-3988
 200be2c:	e13ffc17 	ldw	r4,-16(fp)
 200be30:	11000315 	stw	r4,12(r2)
 200be34:	10800317 	ldw	r2,12(r2)
 200be38:	18800215 	stw	r2,8(r3)
 200be3c:	008080b4 	movhi	r2,514
 200be40:	10bc1b04 	addi	r2,r2,-3988
 200be44:	e0fffc17 	ldw	r3,-16(fp)
 200be48:	18800315 	stw	r2,12(r3)
 200be4c:	e0bffc17 	ldw	r2,-16(fp)
 200be50:	10c00317 	ldw	r3,12(r2)
 200be54:	e0bffc17 	ldw	r2,-16(fp)
 200be58:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 200be5c:	e0bff417 	ldw	r2,-48(fp)
 200be60:	10800054 	ori	r2,r2,1
 200be64:	1007883a 	mov	r3,r2
 200be68:	e0bffc17 	ldw	r2,-16(fp)
 200be6c:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 200be70:	e0bff417 	ldw	r2,-48(fp)
 200be74:	e0fffc17 	ldw	r3,-16(fp)
 200be78:	1885883a 	add	r2,r3,r2
 200be7c:	e0fff417 	ldw	r3,-48(fp)
 200be80:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200be84:	e13ffe17 	ldw	r4,-8(fp)
 200be88:	2013b680 	call	2013b68 <__malloc_unlock>
            return chunk2mem(victim);
 200be8c:	e0bff117 	ldw	r2,-60(fp)
 200be90:	10800204 	addi	r2,r2,8
 200be94:	0000a106 	br	200c11c <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200be98:	e0bff417 	ldw	r2,-48(fp)
 200be9c:	10001a16 	blt	r2,zero,200bf08 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 200bea0:	e0fff117 	ldw	r3,-60(fp)
 200bea4:	e0bffb17 	ldw	r2,-20(fp)
 200bea8:	1885883a 	add	r2,r3,r2
 200beac:	e13ff117 	ldw	r4,-60(fp)
 200beb0:	e0fffb17 	ldw	r3,-20(fp)
 200beb4:	20c7883a 	add	r3,r4,r3
 200beb8:	18c00117 	ldw	r3,4(r3)
 200bebc:	18c00054 	ori	r3,r3,1
 200bec0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200bec4:	e0bff117 	ldw	r2,-60(fp)
 200bec8:	10800317 	ldw	r2,12(r2)
 200becc:	e0bff815 	stw	r2,-32(fp)
 200bed0:	e0bff117 	ldw	r2,-60(fp)
 200bed4:	10800217 	ldw	r2,8(r2)
 200bed8:	e0bff715 	stw	r2,-36(fp)
 200bedc:	e0bff717 	ldw	r2,-36(fp)
 200bee0:	e0fff817 	ldw	r3,-32(fp)
 200bee4:	10c00315 	stw	r3,12(r2)
 200bee8:	e0bff817 	ldw	r2,-32(fp)
 200beec:	e0fff717 	ldw	r3,-36(fp)
 200bef0:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200bef4:	e13ffe17 	ldw	r4,-8(fp)
 200bef8:	2013b680 	call	2013b68 <__malloc_unlock>
            return chunk2mem(victim);
 200befc:	e0bff117 	ldw	r2,-60(fp)
 200bf00:	10800204 	addi	r2,r2,8
 200bf04:	00008506 	br	200c11c <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200bf08:	e0bff117 	ldw	r2,-60(fp)
 200bf0c:	10800317 	ldw	r2,12(r2)
 200bf10:	e0bff115 	stw	r2,-60(fp)
 200bf14:	e0fff117 	ldw	r3,-60(fp)
 200bf18:	e0bff317 	ldw	r2,-52(fp)
 200bf1c:	18bf9f1e 	bne	r3,r2,200bd9c <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 200bf20:	e0bff317 	ldw	r2,-52(fp)
 200bf24:	10800204 	addi	r2,r2,8
 200bf28:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 200bf2c:	e0bff217 	ldw	r2,-56(fp)
 200bf30:	10800044 	addi	r2,r2,1
 200bf34:	e0bff215 	stw	r2,-56(fp)
 200bf38:	e0bff217 	ldw	r2,-56(fp)
 200bf3c:	108000cc 	andi	r2,r2,3
 200bf40:	103f921e 	bne	r2,zero,200bd8c <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 200bf44:	e0bff617 	ldw	r2,-40(fp)
 200bf48:	108000cc 	andi	r2,r2,3
 200bf4c:	10000a1e 	bne	r2,zero,200bf78 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 200bf50:	008080b4 	movhi	r2,514
 200bf54:	10bc1904 	addi	r2,r2,-3996
 200bf58:	00c080b4 	movhi	r3,514
 200bf5c:	18fc1904 	addi	r3,r3,-3996
 200bf60:	19000117 	ldw	r4,4(r3)
 200bf64:	e0fff517 	ldw	r3,-44(fp)
 200bf68:	00c6303a 	nor	r3,zero,r3
 200bf6c:	20c6703a 	and	r3,r4,r3
 200bf70:	10c00115 	stw	r3,4(r2)
          break;
 200bf74:	00000a06 	br	200bfa0 <_malloc_r+0x9ec>
        }
        --startidx;
 200bf78:	e0bff617 	ldw	r2,-40(fp)
 200bf7c:	10bfffc4 	addi	r2,r2,-1
 200bf80:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 200bf84:	e0bff917 	ldw	r2,-28(fp)
 200bf88:	10bffe04 	addi	r2,r2,-8
 200bf8c:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 200bf90:	e0bff917 	ldw	r2,-28(fp)
 200bf94:	10c00217 	ldw	r3,8(r2)
 200bf98:	e0bff917 	ldw	r2,-28(fp)
 200bf9c:	18bfe926 	beq	r3,r2,200bf44 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 200bfa0:	e0bff517 	ldw	r2,-44(fp)
 200bfa4:	1085883a 	add	r2,r2,r2
 200bfa8:	e0bff515 	stw	r2,-44(fp)
 200bfac:	008080b4 	movhi	r2,514
 200bfb0:	10bc1904 	addi	r2,r2,-3996
 200bfb4:	10c00117 	ldw	r3,4(r2)
 200bfb8:	e0bff517 	ldw	r2,-44(fp)
 200bfbc:	18801036 	bltu	r3,r2,200c000 <_malloc_r+0xa4c>
 200bfc0:	e0bff517 	ldw	r2,-44(fp)
 200bfc4:	10000e26 	beq	r2,zero,200c000 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 200bfc8:	00000606 	br	200bfe4 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 200bfcc:	e0bff217 	ldw	r2,-56(fp)
 200bfd0:	10800104 	addi	r2,r2,4
 200bfd4:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 200bfd8:	e0bff517 	ldw	r2,-44(fp)
 200bfdc:	1085883a 	add	r2,r2,r2
 200bfe0:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 200bfe4:	008080b4 	movhi	r2,514
 200bfe8:	10bc1904 	addi	r2,r2,-3996
 200bfec:	10c00117 	ldw	r3,4(r2)
 200bff0:	e0bff517 	ldw	r2,-44(fp)
 200bff4:	1884703a 	and	r2,r3,r2
 200bff8:	103ff426 	beq	r2,zero,200bfcc <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 200bffc:	003f5506 	br	200bd54 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 200c000:	008080b4 	movhi	r2,514
 200c004:	10bc1904 	addi	r2,r2,-3996
 200c008:	10800217 	ldw	r2,8(r2)
 200c00c:	10c00117 	ldw	r3,4(r2)
 200c010:	00bfff04 	movi	r2,-4
 200c014:	1886703a 	and	r3,r3,r2
 200c018:	e0bffa17 	ldw	r2,-24(fp)
 200c01c:	1885c83a 	sub	r2,r3,r2
 200c020:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c024:	008080b4 	movhi	r2,514
 200c028:	10bc1904 	addi	r2,r2,-3996
 200c02c:	10800217 	ldw	r2,8(r2)
 200c030:	10c00117 	ldw	r3,4(r2)
 200c034:	00bfff04 	movi	r2,-4
 200c038:	1886703a 	and	r3,r3,r2
 200c03c:	e0bffa17 	ldw	r2,-24(fp)
 200c040:	18800336 	bltu	r3,r2,200c050 <_malloc_r+0xa9c>
 200c044:	e0bff417 	ldw	r2,-48(fp)
 200c048:	10800408 	cmpgei	r2,r2,16
 200c04c:	10001b1e 	bne	r2,zero,200c0bc <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 200c050:	e17ffa17 	ldw	r5,-24(fp)
 200c054:	e13ffe17 	ldw	r4,-8(fp)
 200c058:	200b2000 	call	200b200 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 200c05c:	008080b4 	movhi	r2,514
 200c060:	10bc1904 	addi	r2,r2,-3996
 200c064:	10800217 	ldw	r2,8(r2)
 200c068:	10c00117 	ldw	r3,4(r2)
 200c06c:	00bfff04 	movi	r2,-4
 200c070:	1886703a 	and	r3,r3,r2
 200c074:	e0bffa17 	ldw	r2,-24(fp)
 200c078:	1885c83a 	sub	r2,r3,r2
 200c07c:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c080:	008080b4 	movhi	r2,514
 200c084:	10bc1904 	addi	r2,r2,-3996
 200c088:	10800217 	ldw	r2,8(r2)
 200c08c:	10c00117 	ldw	r3,4(r2)
 200c090:	00bfff04 	movi	r2,-4
 200c094:	1886703a 	and	r3,r3,r2
 200c098:	e0bffa17 	ldw	r2,-24(fp)
 200c09c:	18800336 	bltu	r3,r2,200c0ac <_malloc_r+0xaf8>
 200c0a0:	e0bff417 	ldw	r2,-48(fp)
 200c0a4:	10800408 	cmpgei	r2,r2,16
 200c0a8:	1000041e 	bne	r2,zero,200c0bc <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 200c0ac:	e13ffe17 	ldw	r4,-8(fp)
 200c0b0:	2013b680 	call	2013b68 <__malloc_unlock>
      return 0; /* propagate failure */
 200c0b4:	0005883a 	mov	r2,zero
 200c0b8:	00001806 	br	200c11c <_malloc_r+0xb68>
    }
  }

  victim = top;
 200c0bc:	008080b4 	movhi	r2,514
 200c0c0:	10bc1904 	addi	r2,r2,-3996
 200c0c4:	10800217 	ldw	r2,8(r2)
 200c0c8:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 200c0cc:	e0bffa17 	ldw	r2,-24(fp)
 200c0d0:	10c00054 	ori	r3,r2,1
 200c0d4:	e0bff117 	ldw	r2,-60(fp)
 200c0d8:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 200c0dc:	008080b4 	movhi	r2,514
 200c0e0:	10bc1904 	addi	r2,r2,-3996
 200c0e4:	e13ff117 	ldw	r4,-60(fp)
 200c0e8:	e0fffa17 	ldw	r3,-24(fp)
 200c0ec:	20c7883a 	add	r3,r4,r3
 200c0f0:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 200c0f4:	008080b4 	movhi	r2,514
 200c0f8:	10bc1904 	addi	r2,r2,-3996
 200c0fc:	10800217 	ldw	r2,8(r2)
 200c100:	e0fff417 	ldw	r3,-48(fp)
 200c104:	18c00054 	ori	r3,r3,1
 200c108:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 200c10c:	e13ffe17 	ldw	r4,-8(fp)
 200c110:	2013b680 	call	2013b68 <__malloc_unlock>
  return chunk2mem(victim);
 200c114:	e0bff117 	ldw	r2,-60(fp)
 200c118:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200c11c:	e037883a 	mov	sp,fp
 200c120:	dfc00117 	ldw	ra,4(sp)
 200c124:	df000017 	ldw	fp,0(sp)
 200c128:	dec00204 	addi	sp,sp,8
 200c12c:	f800283a 	ret

0200c130 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 200c130:	defff704 	addi	sp,sp,-36
 200c134:	df000815 	stw	fp,32(sp)
 200c138:	df000804 	addi	fp,sp,32
 200c13c:	e13ffd15 	stw	r4,-12(fp)
 200c140:	e17ffe15 	stw	r5,-8(fp)
 200c144:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 200c148:	e0bffd17 	ldw	r2,-12(fp)
 200c14c:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 200c150:	e0bffe17 	ldw	r2,-8(fp)
 200c154:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c158:	00001006 	br	200c19c <memchr+0x6c>
    {
      if (!length--)
 200c15c:	e0bfff17 	ldw	r2,-4(fp)
 200c160:	10ffffc4 	addi	r3,r2,-1
 200c164:	e0ffff15 	stw	r3,-4(fp)
 200c168:	1000021e 	bne	r2,zero,200c174 <memchr+0x44>
        return NULL;
 200c16c:	0005883a 	mov	r2,zero
 200c170:	00005a06 	br	200c2dc <memchr+0x1ac>
      if (*src == d)
 200c174:	e0bff817 	ldw	r2,-32(fp)
 200c178:	10800003 	ldbu	r2,0(r2)
 200c17c:	10c03fcc 	andi	r3,r2,255
 200c180:	e0bffc03 	ldbu	r2,-16(fp)
 200c184:	1880021e 	bne	r3,r2,200c190 <memchr+0x60>
        return (void *) src;
 200c188:	e0bff817 	ldw	r2,-32(fp)
 200c18c:	00005306 	br	200c2dc <memchr+0x1ac>
      src++;
 200c190:	e0bff817 	ldw	r2,-32(fp)
 200c194:	10800044 	addi	r2,r2,1
 200c198:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c19c:	e0bff817 	ldw	r2,-32(fp)
 200c1a0:	108000cc 	andi	r2,r2,3
 200c1a4:	103fed1e 	bne	r2,zero,200c15c <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 200c1a8:	e0bfff17 	ldw	r2,-4(fp)
 200c1ac:	10800130 	cmpltui	r2,r2,4
 200c1b0:	1000451e 	bne	r2,zero,200c2c8 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 200c1b4:	e0bff817 	ldw	r2,-32(fp)
 200c1b8:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 200c1bc:	e0bffc03 	ldbu	r2,-16(fp)
 200c1c0:	1006923a 	slli	r3,r2,8
 200c1c4:	e0bffc03 	ldbu	r2,-16(fp)
 200c1c8:	1884b03a 	or	r2,r3,r2
 200c1cc:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 200c1d0:	e0bffa17 	ldw	r2,-24(fp)
 200c1d4:	1004943a 	slli	r2,r2,16
 200c1d8:	e0fffa17 	ldw	r3,-24(fp)
 200c1dc:	1884b03a 	or	r2,r3,r2
 200c1e0:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c1e4:	00800804 	movi	r2,32
 200c1e8:	e0bffb15 	stw	r2,-20(fp)
 200c1ec:	00000906 	br	200c214 <memchr+0xe4>
        mask = (mask << i) | mask;
 200c1f0:	e0fffa17 	ldw	r3,-24(fp)
 200c1f4:	e0bffb17 	ldw	r2,-20(fp)
 200c1f8:	1884983a 	sll	r2,r3,r2
 200c1fc:	e0fffa17 	ldw	r3,-24(fp)
 200c200:	1884b03a 	or	r2,r3,r2
 200c204:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c208:	e0bffb17 	ldw	r2,-20(fp)
 200c20c:	1085883a 	add	r2,r2,r2
 200c210:	e0bffb15 	stw	r2,-20(fp)
 200c214:	e0bffb17 	ldw	r2,-20(fp)
 200c218:	10800830 	cmpltui	r2,r2,32
 200c21c:	103ff41e 	bne	r2,zero,200c1f0 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c220:	00001706 	br	200c280 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 200c224:	e0bff917 	ldw	r2,-28(fp)
 200c228:	10c00017 	ldw	r3,0(r2)
 200c22c:	e0bffa17 	ldw	r2,-24(fp)
 200c230:	1886f03a 	xor	r3,r3,r2
 200c234:	00bfbff4 	movhi	r2,65279
 200c238:	10bfbfc4 	addi	r2,r2,-257
 200c23c:	1887883a 	add	r3,r3,r2
 200c240:	e0bff917 	ldw	r2,-28(fp)
 200c244:	11000017 	ldw	r4,0(r2)
 200c248:	e0bffa17 	ldw	r2,-24(fp)
 200c24c:	2084f03a 	xor	r2,r4,r2
 200c250:	0084303a 	nor	r2,zero,r2
 200c254:	1886703a 	and	r3,r3,r2
 200c258:	00a02074 	movhi	r2,32897
 200c25c:	10a02004 	addi	r2,r2,-32640
 200c260:	1884703a 	and	r2,r3,r2
 200c264:	10000a1e 	bne	r2,zero,200c290 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 200c268:	e0bfff17 	ldw	r2,-4(fp)
 200c26c:	10bfff04 	addi	r2,r2,-4
 200c270:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 200c274:	e0bff917 	ldw	r2,-28(fp)
 200c278:	10800104 	addi	r2,r2,4
 200c27c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c280:	e0bfff17 	ldw	r2,-4(fp)
 200c284:	10800128 	cmpgeui	r2,r2,4
 200c288:	103fe61e 	bne	r2,zero,200c224 <memchr+0xf4>
 200c28c:	00000106 	br	200c294 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 200c290:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 200c294:	e0bff917 	ldw	r2,-28(fp)
 200c298:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c29c:	00000a06 	br	200c2c8 <memchr+0x198>
    {
      if (*src == d)
 200c2a0:	e0bff817 	ldw	r2,-32(fp)
 200c2a4:	10800003 	ldbu	r2,0(r2)
 200c2a8:	10c03fcc 	andi	r3,r2,255
 200c2ac:	e0bffc03 	ldbu	r2,-16(fp)
 200c2b0:	1880021e 	bne	r3,r2,200c2bc <memchr+0x18c>
        return (void *) src;
 200c2b4:	e0bff817 	ldw	r2,-32(fp)
 200c2b8:	00000806 	br	200c2dc <memchr+0x1ac>
      src++;
 200c2bc:	e0bff817 	ldw	r2,-32(fp)
 200c2c0:	10800044 	addi	r2,r2,1
 200c2c4:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c2c8:	e0bfff17 	ldw	r2,-4(fp)
 200c2cc:	10ffffc4 	addi	r3,r2,-1
 200c2d0:	e0ffff15 	stw	r3,-4(fp)
 200c2d4:	103ff21e 	bne	r2,zero,200c2a0 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 200c2d8:	0005883a 	mov	r2,zero
}
 200c2dc:	e037883a 	mov	sp,fp
 200c2e0:	df000017 	ldw	fp,0(sp)
 200c2e4:	dec00104 	addi	sp,sp,4
 200c2e8:	f800283a 	ret

0200c2ec <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 200c2ec:	defff804 	addi	sp,sp,-32
 200c2f0:	df000715 	stw	fp,28(sp)
 200c2f4:	df000704 	addi	fp,sp,28
 200c2f8:	e13ffd15 	stw	r4,-12(fp)
 200c2fc:	e17ffe15 	stw	r5,-8(fp)
 200c300:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 200c304:	e0bffd17 	ldw	r2,-12(fp)
 200c308:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 200c30c:	e0bffe17 	ldw	r2,-8(fp)
 200c310:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c314:	e0fffa17 	ldw	r3,-24(fp)
 200c318:	e0bff917 	ldw	r2,-28(fp)
 200c31c:	18801d2e 	bgeu	r3,r2,200c394 <memmove+0xa8>
 200c320:	e0fffa17 	ldw	r3,-24(fp)
 200c324:	e0bfff17 	ldw	r2,-4(fp)
 200c328:	1885883a 	add	r2,r3,r2
 200c32c:	e0fff917 	ldw	r3,-28(fp)
 200c330:	1880182e 	bgeu	r3,r2,200c394 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 200c334:	e0fffa17 	ldw	r3,-24(fp)
 200c338:	e0bfff17 	ldw	r2,-4(fp)
 200c33c:	1885883a 	add	r2,r3,r2
 200c340:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 200c344:	e0fff917 	ldw	r3,-28(fp)
 200c348:	e0bfff17 	ldw	r2,-4(fp)
 200c34c:	1885883a 	add	r2,r3,r2
 200c350:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 200c354:	00000a06 	br	200c380 <memmove+0x94>
	{
	  *--dst = *--src;
 200c358:	e0bff917 	ldw	r2,-28(fp)
 200c35c:	10bfffc4 	addi	r2,r2,-1
 200c360:	e0bff915 	stw	r2,-28(fp)
 200c364:	e0bffa17 	ldw	r2,-24(fp)
 200c368:	10bfffc4 	addi	r2,r2,-1
 200c36c:	e0bffa15 	stw	r2,-24(fp)
 200c370:	e0bffa17 	ldw	r2,-24(fp)
 200c374:	10c00003 	ldbu	r3,0(r2)
 200c378:	e0bff917 	ldw	r2,-28(fp)
 200c37c:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 200c380:	e0bfff17 	ldw	r2,-4(fp)
 200c384:	10ffffc4 	addi	r3,r2,-1
 200c388:	e0ffff15 	stw	r3,-4(fp)
 200c38c:	103ff21e 	bne	r2,zero,200c358 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c390:	00005306 	br	200c4e0 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 200c394:	e0bfff17 	ldw	r2,-4(fp)
 200c398:	10800430 	cmpltui	r2,r2,16
 200c39c:	10004c1e 	bne	r2,zero,200c4d0 <memmove+0x1e4>
 200c3a0:	e0fffa17 	ldw	r3,-24(fp)
 200c3a4:	e0bff917 	ldw	r2,-28(fp)
 200c3a8:	1884b03a 	or	r2,r3,r2
 200c3ac:	108000cc 	andi	r2,r2,3
 200c3b0:	1000471e 	bne	r2,zero,200c4d0 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 200c3b4:	e0bff917 	ldw	r2,-28(fp)
 200c3b8:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 200c3bc:	e0bffa17 	ldw	r2,-24(fp)
 200c3c0:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c3c4:	00002306 	br	200c454 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 200c3c8:	e0bffb17 	ldw	r2,-20(fp)
 200c3cc:	10c00104 	addi	r3,r2,4
 200c3d0:	e0fffb15 	stw	r3,-20(fp)
 200c3d4:	e0fffc17 	ldw	r3,-16(fp)
 200c3d8:	19000104 	addi	r4,r3,4
 200c3dc:	e13ffc15 	stw	r4,-16(fp)
 200c3e0:	18c00017 	ldw	r3,0(r3)
 200c3e4:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c3e8:	e0bffb17 	ldw	r2,-20(fp)
 200c3ec:	10c00104 	addi	r3,r2,4
 200c3f0:	e0fffb15 	stw	r3,-20(fp)
 200c3f4:	e0fffc17 	ldw	r3,-16(fp)
 200c3f8:	19000104 	addi	r4,r3,4
 200c3fc:	e13ffc15 	stw	r4,-16(fp)
 200c400:	18c00017 	ldw	r3,0(r3)
 200c404:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c408:	e0bffb17 	ldw	r2,-20(fp)
 200c40c:	10c00104 	addi	r3,r2,4
 200c410:	e0fffb15 	stw	r3,-20(fp)
 200c414:	e0fffc17 	ldw	r3,-16(fp)
 200c418:	19000104 	addi	r4,r3,4
 200c41c:	e13ffc15 	stw	r4,-16(fp)
 200c420:	18c00017 	ldw	r3,0(r3)
 200c424:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c428:	e0bffb17 	ldw	r2,-20(fp)
 200c42c:	10c00104 	addi	r3,r2,4
 200c430:	e0fffb15 	stw	r3,-20(fp)
 200c434:	e0fffc17 	ldw	r3,-16(fp)
 200c438:	19000104 	addi	r4,r3,4
 200c43c:	e13ffc15 	stw	r4,-16(fp)
 200c440:	18c00017 	ldw	r3,0(r3)
 200c444:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 200c448:	e0bfff17 	ldw	r2,-4(fp)
 200c44c:	10bffc04 	addi	r2,r2,-16
 200c450:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c454:	e0bfff17 	ldw	r2,-4(fp)
 200c458:	10800428 	cmpgeui	r2,r2,16
 200c45c:	103fda1e 	bne	r2,zero,200c3c8 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c460:	00000b06 	br	200c490 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 200c464:	e0bffb17 	ldw	r2,-20(fp)
 200c468:	10c00104 	addi	r3,r2,4
 200c46c:	e0fffb15 	stw	r3,-20(fp)
 200c470:	e0fffc17 	ldw	r3,-16(fp)
 200c474:	19000104 	addi	r4,r3,4
 200c478:	e13ffc15 	stw	r4,-16(fp)
 200c47c:	18c00017 	ldw	r3,0(r3)
 200c480:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 200c484:	e0bfff17 	ldw	r2,-4(fp)
 200c488:	10bfff04 	addi	r2,r2,-4
 200c48c:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c490:	e0bfff17 	ldw	r2,-4(fp)
 200c494:	10800128 	cmpgeui	r2,r2,4
 200c498:	103ff21e 	bne	r2,zero,200c464 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 200c49c:	e0bffb17 	ldw	r2,-20(fp)
 200c4a0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 200c4a4:	e0bffc17 	ldw	r2,-16(fp)
 200c4a8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 200c4ac:	00000806 	br	200c4d0 <memmove+0x1e4>
        {
          *dst++ = *src++;
 200c4b0:	e0bff917 	ldw	r2,-28(fp)
 200c4b4:	10c00044 	addi	r3,r2,1
 200c4b8:	e0fff915 	stw	r3,-28(fp)
 200c4bc:	e0fffa17 	ldw	r3,-24(fp)
 200c4c0:	19000044 	addi	r4,r3,1
 200c4c4:	e13ffa15 	stw	r4,-24(fp)
 200c4c8:	18c00003 	ldbu	r3,0(r3)
 200c4cc:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 200c4d0:	e0bfff17 	ldw	r2,-4(fp)
 200c4d4:	10ffffc4 	addi	r3,r2,-1
 200c4d8:	e0ffff15 	stw	r3,-4(fp)
 200c4dc:	103ff41e 	bne	r2,zero,200c4b0 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 200c4e0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200c4e4:	e037883a 	mov	sp,fp
 200c4e8:	df000017 	ldw	fp,0(sp)
 200c4ec:	dec00104 	addi	sp,sp,4
 200c4f0:	f800283a 	ret

0200c4f4 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 200c4f4:	defffa04 	addi	sp,sp,-24
 200c4f8:	dfc00515 	stw	ra,20(sp)
 200c4fc:	df000415 	stw	fp,16(sp)
 200c500:	df000404 	addi	fp,sp,16
 200c504:	e13ffe15 	stw	r4,-8(fp)
 200c508:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 200c50c:	e0bffe17 	ldw	r2,-8(fp)
 200c510:	10801317 	ldw	r2,76(r2)
 200c514:	10000c1e 	bne	r2,zero,200c548 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 200c518:	01800844 	movi	r6,33
 200c51c:	01400104 	movi	r5,4
 200c520:	e13ffe17 	ldw	r4,-8(fp)
 200c524:	20105800 	call	2010580 <_calloc_r>
 200c528:	1007883a 	mov	r3,r2
 200c52c:	e0bffe17 	ldw	r2,-8(fp)
 200c530:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 200c534:	e0bffe17 	ldw	r2,-8(fp)
 200c538:	10801317 	ldw	r2,76(r2)
 200c53c:	1000021e 	bne	r2,zero,200c548 <_Balloc+0x54>
	{
	  return NULL;
 200c540:	0005883a 	mov	r2,zero
 200c544:	00003206 	br	200c610 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 200c548:	e0bffe17 	ldw	r2,-8(fp)
 200c54c:	10c01317 	ldw	r3,76(r2)
 200c550:	e0bfff17 	ldw	r2,-4(fp)
 200c554:	1085883a 	add	r2,r2,r2
 200c558:	1085883a 	add	r2,r2,r2
 200c55c:	1885883a 	add	r2,r3,r2
 200c560:	10800017 	ldw	r2,0(r2)
 200c564:	e0bffc15 	stw	r2,-16(fp)
 200c568:	e0bffc17 	ldw	r2,-16(fp)
 200c56c:	10000a26 	beq	r2,zero,200c598 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 200c570:	e0bffe17 	ldw	r2,-8(fp)
 200c574:	10c01317 	ldw	r3,76(r2)
 200c578:	e0bfff17 	ldw	r2,-4(fp)
 200c57c:	1085883a 	add	r2,r2,r2
 200c580:	1085883a 	add	r2,r2,r2
 200c584:	1885883a 	add	r2,r3,r2
 200c588:	e0fffc17 	ldw	r3,-16(fp)
 200c58c:	18c00017 	ldw	r3,0(r3)
 200c590:	10c00015 	stw	r3,0(r2)
 200c594:	00001706 	br	200c5f4 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 200c598:	00c00044 	movi	r3,1
 200c59c:	e0bfff17 	ldw	r2,-4(fp)
 200c5a0:	1884983a 	sll	r2,r3,r2
 200c5a4:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 200c5a8:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200c5ac:	10800144 	addi	r2,r2,5
 200c5b0:	1085883a 	add	r2,r2,r2
 200c5b4:	1085883a 	add	r2,r2,r2
 200c5b8:	100d883a 	mov	r6,r2
 200c5bc:	01400044 	movi	r5,1
 200c5c0:	e13ffe17 	ldw	r4,-8(fp)
 200c5c4:	20105800 	call	2010580 <_calloc_r>
 200c5c8:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200c5cc:	e0bffc17 	ldw	r2,-16(fp)
 200c5d0:	1000021e 	bne	r2,zero,200c5dc <_Balloc+0xe8>
 200c5d4:	0005883a 	mov	r2,zero
 200c5d8:	00000d06 	br	200c610 <_Balloc+0x11c>
      rv->_k = k;
 200c5dc:	e0bffc17 	ldw	r2,-16(fp)
 200c5e0:	e0ffff17 	ldw	r3,-4(fp)
 200c5e4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 200c5e8:	e0bffc17 	ldw	r2,-16(fp)
 200c5ec:	e0fffd17 	ldw	r3,-12(fp)
 200c5f0:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 200c5f4:	e0bffc17 	ldw	r2,-16(fp)
 200c5f8:	10000415 	stw	zero,16(r2)
 200c5fc:	e0bffc17 	ldw	r2,-16(fp)
 200c600:	10c00417 	ldw	r3,16(r2)
 200c604:	e0bffc17 	ldw	r2,-16(fp)
 200c608:	10c00315 	stw	r3,12(r2)
  return rv;
 200c60c:	e0bffc17 	ldw	r2,-16(fp)
}
 200c610:	e037883a 	mov	sp,fp
 200c614:	dfc00117 	ldw	ra,4(sp)
 200c618:	df000017 	ldw	fp,0(sp)
 200c61c:	dec00204 	addi	sp,sp,8
 200c620:	f800283a 	ret

0200c624 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 200c624:	defffd04 	addi	sp,sp,-12
 200c628:	df000215 	stw	fp,8(sp)
 200c62c:	df000204 	addi	fp,sp,8
 200c630:	e13ffe15 	stw	r4,-8(fp)
 200c634:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 200c638:	e0bfff17 	ldw	r2,-4(fp)
 200c63c:	10001326 	beq	r2,zero,200c68c <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 200c640:	e0bffe17 	ldw	r2,-8(fp)
 200c644:	10c01317 	ldw	r3,76(r2)
 200c648:	e0bfff17 	ldw	r2,-4(fp)
 200c64c:	10800117 	ldw	r2,4(r2)
 200c650:	1085883a 	add	r2,r2,r2
 200c654:	1085883a 	add	r2,r2,r2
 200c658:	1885883a 	add	r2,r3,r2
 200c65c:	10c00017 	ldw	r3,0(r2)
 200c660:	e0bfff17 	ldw	r2,-4(fp)
 200c664:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 200c668:	e0bffe17 	ldw	r2,-8(fp)
 200c66c:	10c01317 	ldw	r3,76(r2)
 200c670:	e0bfff17 	ldw	r2,-4(fp)
 200c674:	10800117 	ldw	r2,4(r2)
 200c678:	1085883a 	add	r2,r2,r2
 200c67c:	1085883a 	add	r2,r2,r2
 200c680:	1885883a 	add	r2,r3,r2
 200c684:	e0ffff17 	ldw	r3,-4(fp)
 200c688:	10c00015 	stw	r3,0(r2)
    }
}
 200c68c:	0001883a 	nop
 200c690:	e037883a 	mov	sp,fp
 200c694:	df000017 	ldw	fp,0(sp)
 200c698:	dec00104 	addi	sp,sp,4
 200c69c:	f800283a 	ret

0200c6a0 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 200c6a0:	defff304 	addi	sp,sp,-52
 200c6a4:	dfc00c15 	stw	ra,48(sp)
 200c6a8:	df000b15 	stw	fp,44(sp)
 200c6ac:	df000b04 	addi	fp,sp,44
 200c6b0:	e13ffc15 	stw	r4,-16(fp)
 200c6b4:	e17ffd15 	stw	r5,-12(fp)
 200c6b8:	e1bffe15 	stw	r6,-8(fp)
 200c6bc:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 200c6c0:	e0bffd17 	ldw	r2,-12(fp)
 200c6c4:	10800417 	ldw	r2,16(r2)
 200c6c8:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200c6cc:	e0bffd17 	ldw	r2,-12(fp)
 200c6d0:	10800504 	addi	r2,r2,20
 200c6d4:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 200c6d8:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 200c6dc:	e0bff617 	ldw	r2,-40(fp)
 200c6e0:	10800017 	ldw	r2,0(r2)
 200c6e4:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 200c6e8:	e0bff817 	ldw	r2,-32(fp)
 200c6ec:	10ffffcc 	andi	r3,r2,65535
 200c6f0:	e0bffe17 	ldw	r2,-8(fp)
 200c6f4:	1887383a 	mul	r3,r3,r2
 200c6f8:	e0bfff17 	ldw	r2,-4(fp)
 200c6fc:	1885883a 	add	r2,r3,r2
 200c700:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 200c704:	e0bff817 	ldw	r2,-32(fp)
 200c708:	1006d43a 	srli	r3,r2,16
 200c70c:	e0bffe17 	ldw	r2,-8(fp)
 200c710:	1887383a 	mul	r3,r3,r2
 200c714:	e0bff917 	ldw	r2,-28(fp)
 200c718:	1004d43a 	srli	r2,r2,16
 200c71c:	1885883a 	add	r2,r3,r2
 200c720:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 200c724:	e0bffa17 	ldw	r2,-24(fp)
 200c728:	1004d43a 	srli	r2,r2,16
 200c72c:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 200c730:	e0bff617 	ldw	r2,-40(fp)
 200c734:	10c00104 	addi	r3,r2,4
 200c738:	e0fff615 	stw	r3,-40(fp)
 200c73c:	e0fffa17 	ldw	r3,-24(fp)
 200c740:	1808943a 	slli	r4,r3,16
 200c744:	e0fff917 	ldw	r3,-28(fp)
 200c748:	18ffffcc 	andi	r3,r3,65535
 200c74c:	20c7883a 	add	r3,r4,r3
 200c750:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 200c754:	e0bff517 	ldw	r2,-44(fp)
 200c758:	10800044 	addi	r2,r2,1
 200c75c:	e0bff515 	stw	r2,-44(fp)
 200c760:	e0fff517 	ldw	r3,-44(fp)
 200c764:	e0bff717 	ldw	r2,-36(fp)
 200c768:	18bfdc16 	blt	r3,r2,200c6dc <__multadd+0x3c>
  if (a)
 200c76c:	e0bfff17 	ldw	r2,-4(fp)
 200c770:	10002a26 	beq	r2,zero,200c81c <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 200c774:	e0bffd17 	ldw	r2,-12(fp)
 200c778:	10800217 	ldw	r2,8(r2)
 200c77c:	e0fff717 	ldw	r3,-36(fp)
 200c780:	18801916 	blt	r3,r2,200c7e8 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 200c784:	e0bffd17 	ldw	r2,-12(fp)
 200c788:	10800117 	ldw	r2,4(r2)
 200c78c:	10800044 	addi	r2,r2,1
 200c790:	100b883a 	mov	r5,r2
 200c794:	e13ffc17 	ldw	r4,-16(fp)
 200c798:	200c4f40 	call	200c4f4 <_Balloc>
 200c79c:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 200c7a0:	e0bffb17 	ldw	r2,-20(fp)
 200c7a4:	10c00304 	addi	r3,r2,12
 200c7a8:	e0bffd17 	ldw	r2,-12(fp)
 200c7ac:	11000304 	addi	r4,r2,12
 200c7b0:	e0bffd17 	ldw	r2,-12(fp)
 200c7b4:	10800417 	ldw	r2,16(r2)
 200c7b8:	10800084 	addi	r2,r2,2
 200c7bc:	1085883a 	add	r2,r2,r2
 200c7c0:	1085883a 	add	r2,r2,r2
 200c7c4:	100d883a 	mov	r6,r2
 200c7c8:	200b883a 	mov	r5,r4
 200c7cc:	1809883a 	mov	r4,r3
 200c7d0:	200494c0 	call	200494c <memcpy>
	  Bfree (ptr, b);
 200c7d4:	e17ffd17 	ldw	r5,-12(fp)
 200c7d8:	e13ffc17 	ldw	r4,-16(fp)
 200c7dc:	200c6240 	call	200c624 <_Bfree>
	  b = b1;
 200c7e0:	e0bffb17 	ldw	r2,-20(fp)
 200c7e4:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 200c7e8:	e0bff717 	ldw	r2,-36(fp)
 200c7ec:	10c00044 	addi	r3,r2,1
 200c7f0:	e0fff715 	stw	r3,-36(fp)
 200c7f4:	e0ffff17 	ldw	r3,-4(fp)
 200c7f8:	e13ffd17 	ldw	r4,-12(fp)
 200c7fc:	10800144 	addi	r2,r2,5
 200c800:	1085883a 	add	r2,r2,r2
 200c804:	1085883a 	add	r2,r2,r2
 200c808:	2085883a 	add	r2,r4,r2
 200c80c:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 200c810:	e0bffd17 	ldw	r2,-12(fp)
 200c814:	e0fff717 	ldw	r3,-36(fp)
 200c818:	10c00415 	stw	r3,16(r2)
    }
  return b;
 200c81c:	e0bffd17 	ldw	r2,-12(fp)
}
 200c820:	e037883a 	mov	sp,fp
 200c824:	dfc00117 	ldw	ra,4(sp)
 200c828:	df000017 	ldw	fp,0(sp)
 200c82c:	dec00204 	addi	sp,sp,8
 200c830:	f800283a 	ret

0200c834 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 200c834:	defff504 	addi	sp,sp,-44
 200c838:	dfc00a15 	stw	ra,40(sp)
 200c83c:	df000915 	stw	fp,36(sp)
 200c840:	df000904 	addi	fp,sp,36
 200c844:	e13ffc15 	stw	r4,-16(fp)
 200c848:	e17ffd15 	stw	r5,-12(fp)
 200c84c:	e1bffe15 	stw	r6,-8(fp)
 200c850:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 200c854:	e0bfff17 	ldw	r2,-4(fp)
 200c858:	10800204 	addi	r2,r2,8
 200c85c:	01400244 	movi	r5,9
 200c860:	1009883a 	mov	r4,r2
 200c864:	20047980 	call	2004798 <__divsi3>
 200c868:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200c86c:	e03ff915 	stw	zero,-28(fp)
 200c870:	00800044 	movi	r2,1
 200c874:	e0bffa15 	stw	r2,-24(fp)
 200c878:	00000606 	br	200c894 <__s2b+0x60>
 200c87c:	e0bffa17 	ldw	r2,-24(fp)
 200c880:	1085883a 	add	r2,r2,r2
 200c884:	e0bffa15 	stw	r2,-24(fp)
 200c888:	e0bff917 	ldw	r2,-28(fp)
 200c88c:	10800044 	addi	r2,r2,1
 200c890:	e0bff915 	stw	r2,-28(fp)
 200c894:	e0bffb17 	ldw	r2,-20(fp)
 200c898:	e0fffa17 	ldw	r3,-24(fp)
 200c89c:	18bff716 	blt	r3,r2,200c87c <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 200c8a0:	e17ff917 	ldw	r5,-28(fp)
 200c8a4:	e13ffc17 	ldw	r4,-16(fp)
 200c8a8:	200c4f40 	call	200c4f4 <_Balloc>
 200c8ac:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 200c8b0:	e0bff717 	ldw	r2,-36(fp)
 200c8b4:	e0c00217 	ldw	r3,8(fp)
 200c8b8:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200c8bc:	e0bff717 	ldw	r2,-36(fp)
 200c8c0:	00c00044 	movi	r3,1
 200c8c4:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 200c8c8:	00800244 	movi	r2,9
 200c8cc:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 200c8d0:	e0bffe17 	ldw	r2,-8(fp)
 200c8d4:	10800290 	cmplti	r2,r2,10
 200c8d8:	10001b1e 	bne	r2,zero,200c948 <__s2b+0x114>
    {
      s += 9;
 200c8dc:	e0bffd17 	ldw	r2,-12(fp)
 200c8e0:	10800244 	addi	r2,r2,9
 200c8e4:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 200c8e8:	e0bffd17 	ldw	r2,-12(fp)
 200c8ec:	10c00044 	addi	r3,r2,1
 200c8f0:	e0fffd15 	stw	r3,-12(fp)
 200c8f4:	10800003 	ldbu	r2,0(r2)
 200c8f8:	10803fcc 	andi	r2,r2,255
 200c8fc:	1080201c 	xori	r2,r2,128
 200c900:	10bfe004 	addi	r2,r2,-128
 200c904:	10bff404 	addi	r2,r2,-48
 200c908:	100f883a 	mov	r7,r2
 200c90c:	01800284 	movi	r6,10
 200c910:	e17ff717 	ldw	r5,-36(fp)
 200c914:	e13ffc17 	ldw	r4,-16(fp)
 200c918:	200c6a00 	call	200c6a0 <__multadd>
 200c91c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 200c920:	e0bff817 	ldw	r2,-32(fp)
 200c924:	10800044 	addi	r2,r2,1
 200c928:	e0bff815 	stw	r2,-32(fp)
 200c92c:	e0fff817 	ldw	r3,-32(fp)
 200c930:	e0bffe17 	ldw	r2,-8(fp)
 200c934:	18bfec16 	blt	r3,r2,200c8e8 <__s2b+0xb4>
      s++;
 200c938:	e0bffd17 	ldw	r2,-12(fp)
 200c93c:	10800044 	addi	r2,r2,1
 200c940:	e0bffd15 	stw	r2,-12(fp)
 200c944:	00001506 	br	200c99c <__s2b+0x168>
    }
  else
    s += 10;
 200c948:	e0bffd17 	ldw	r2,-12(fp)
 200c94c:	10800284 	addi	r2,r2,10
 200c950:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 200c954:	00001106 	br	200c99c <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 200c958:	e0bffd17 	ldw	r2,-12(fp)
 200c95c:	10c00044 	addi	r3,r2,1
 200c960:	e0fffd15 	stw	r3,-12(fp)
 200c964:	10800003 	ldbu	r2,0(r2)
 200c968:	10803fcc 	andi	r2,r2,255
 200c96c:	1080201c 	xori	r2,r2,128
 200c970:	10bfe004 	addi	r2,r2,-128
 200c974:	10bff404 	addi	r2,r2,-48
 200c978:	100f883a 	mov	r7,r2
 200c97c:	01800284 	movi	r6,10
 200c980:	e17ff717 	ldw	r5,-36(fp)
 200c984:	e13ffc17 	ldw	r4,-16(fp)
 200c988:	200c6a00 	call	200c6a0 <__multadd>
 200c98c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 200c990:	e0bff817 	ldw	r2,-32(fp)
 200c994:	10800044 	addi	r2,r2,1
 200c998:	e0bff815 	stw	r2,-32(fp)
 200c99c:	e0fff817 	ldw	r3,-32(fp)
 200c9a0:	e0bfff17 	ldw	r2,-4(fp)
 200c9a4:	18bfec16 	blt	r3,r2,200c958 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 200c9a8:	e0bff717 	ldw	r2,-36(fp)
}
 200c9ac:	e037883a 	mov	sp,fp
 200c9b0:	dfc00117 	ldw	ra,4(sp)
 200c9b4:	df000017 	ldw	fp,0(sp)
 200c9b8:	dec00204 	addi	sp,sp,8
 200c9bc:	f800283a 	ret

0200c9c0 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 200c9c0:	defffe04 	addi	sp,sp,-8
 200c9c4:	df000115 	stw	fp,4(sp)
 200c9c8:	dc000015 	stw	r16,0(sp)
 200c9cc:	df000104 	addi	fp,sp,4
 200c9d0:	2005883a 	mov	r2,r4
  register int k = 0;
 200c9d4:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 200c9d8:	10ffffec 	andhi	r3,r2,65535
 200c9dc:	1800021e 	bne	r3,zero,200c9e8 <__hi0bits+0x28>
    {
      k = 16;
 200c9e0:	04000404 	movi	r16,16
      x <<= 16;
 200c9e4:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 200c9e8:	10ffc02c 	andhi	r3,r2,65280
 200c9ec:	1800021e 	bne	r3,zero,200c9f8 <__hi0bits+0x38>
    {
      k += 8;
 200c9f0:	84000204 	addi	r16,r16,8
      x <<= 8;
 200c9f4:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 200c9f8:	10fc002c 	andhi	r3,r2,61440
 200c9fc:	1800021e 	bne	r3,zero,200ca08 <__hi0bits+0x48>
    {
      k += 4;
 200ca00:	84000104 	addi	r16,r16,4
      x <<= 4;
 200ca04:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 200ca08:	10f0002c 	andhi	r3,r2,49152
 200ca0c:	1800031e 	bne	r3,zero,200ca1c <__hi0bits+0x5c>
    {
      k += 2;
 200ca10:	84000084 	addi	r16,r16,2
      x <<= 2;
 200ca14:	1085883a 	add	r2,r2,r2
 200ca18:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 200ca1c:	1007883a 	mov	r3,r2
 200ca20:	18000516 	blt	r3,zero,200ca38 <__hi0bits+0x78>
    {
      k++;
 200ca24:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 200ca28:	1090002c 	andhi	r2,r2,16384
 200ca2c:	1000021e 	bne	r2,zero,200ca38 <__hi0bits+0x78>
	return 32;
 200ca30:	00800804 	movi	r2,32
 200ca34:	00000106 	br	200ca3c <__hi0bits+0x7c>
    }
  return k;
 200ca38:	8005883a 	mov	r2,r16
}
 200ca3c:	e6ffff04 	addi	sp,fp,-4
 200ca40:	df000117 	ldw	fp,4(sp)
 200ca44:	dc000017 	ldw	r16,0(sp)
 200ca48:	dec00204 	addi	sp,sp,8
 200ca4c:	f800283a 	ret

0200ca50 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 200ca50:	defffc04 	addi	sp,sp,-16
 200ca54:	df000315 	stw	fp,12(sp)
 200ca58:	dc400215 	stw	r17,8(sp)
 200ca5c:	dc000115 	stw	r16,4(sp)
 200ca60:	df000304 	addi	fp,sp,12
 200ca64:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 200ca68:	e0bffd17 	ldw	r2,-12(fp)
 200ca6c:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 200ca70:	808001cc 	andi	r2,r16,7
 200ca74:	10001026 	beq	r2,zero,200cab8 <__lo0bits+0x68>
    {
      if (x & 1)
 200ca78:	8080004c 	andi	r2,r16,1
 200ca7c:	10000226 	beq	r2,zero,200ca88 <__lo0bits+0x38>
	return 0;
 200ca80:	0005883a 	mov	r2,zero
 200ca84:	00002706 	br	200cb24 <__lo0bits+0xd4>
      if (x & 2)
 200ca88:	8080008c 	andi	r2,r16,2
 200ca8c:	10000526 	beq	r2,zero,200caa4 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 200ca90:	8006d07a 	srli	r3,r16,1
 200ca94:	e0bffd17 	ldw	r2,-12(fp)
 200ca98:	10c00015 	stw	r3,0(r2)
	  return 1;
 200ca9c:	00800044 	movi	r2,1
 200caa0:	00002006 	br	200cb24 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 200caa4:	8006d0ba 	srli	r3,r16,2
 200caa8:	e0bffd17 	ldw	r2,-12(fp)
 200caac:	10c00015 	stw	r3,0(r2)
      return 2;
 200cab0:	00800084 	movi	r2,2
 200cab4:	00001b06 	br	200cb24 <__lo0bits+0xd4>
    }
  k = 0;
 200cab8:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200cabc:	80bfffcc 	andi	r2,r16,65535
 200cac0:	1000021e 	bne	r2,zero,200cacc <__lo0bits+0x7c>
    {
      k = 16;
 200cac4:	04400404 	movi	r17,16
      x >>= 16;
 200cac8:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200cacc:	80803fcc 	andi	r2,r16,255
 200cad0:	1000021e 	bne	r2,zero,200cadc <__lo0bits+0x8c>
    {
      k += 8;
 200cad4:	8c400204 	addi	r17,r17,8
      x >>= 8;
 200cad8:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 200cadc:	808003cc 	andi	r2,r16,15
 200cae0:	1000021e 	bne	r2,zero,200caec <__lo0bits+0x9c>
    {
      k += 4;
 200cae4:	8c400104 	addi	r17,r17,4
      x >>= 4;
 200cae8:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 200caec:	808000cc 	andi	r2,r16,3
 200caf0:	1000021e 	bne	r2,zero,200cafc <__lo0bits+0xac>
    {
      k += 2;
 200caf4:	8c400084 	addi	r17,r17,2
      x >>= 2;
 200caf8:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 200cafc:	8080004c 	andi	r2,r16,1
 200cb00:	1000051e 	bne	r2,zero,200cb18 <__lo0bits+0xc8>
    {
      k++;
 200cb04:	8c400044 	addi	r17,r17,1
      x >>= 1;
 200cb08:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 200cb0c:	8000021e 	bne	r16,zero,200cb18 <__lo0bits+0xc8>
	return 32;
 200cb10:	00800804 	movi	r2,32
 200cb14:	00000306 	br	200cb24 <__lo0bits+0xd4>
    }
  *y = x;
 200cb18:	e0bffd17 	ldw	r2,-12(fp)
 200cb1c:	14000015 	stw	r16,0(r2)
  return k;
 200cb20:	8805883a 	mov	r2,r17
}
 200cb24:	e6fffe04 	addi	sp,fp,-8
 200cb28:	df000217 	ldw	fp,8(sp)
 200cb2c:	dc400117 	ldw	r17,4(sp)
 200cb30:	dc000017 	ldw	r16,0(sp)
 200cb34:	dec00304 	addi	sp,sp,12
 200cb38:	f800283a 	ret

0200cb3c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200cb3c:	defffb04 	addi	sp,sp,-20
 200cb40:	dfc00415 	stw	ra,16(sp)
 200cb44:	df000315 	stw	fp,12(sp)
 200cb48:	df000304 	addi	fp,sp,12
 200cb4c:	e13ffe15 	stw	r4,-8(fp)
 200cb50:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 200cb54:	01400044 	movi	r5,1
 200cb58:	e13ffe17 	ldw	r4,-8(fp)
 200cb5c:	200c4f40 	call	200c4f4 <_Balloc>
 200cb60:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 200cb64:	e0ffff17 	ldw	r3,-4(fp)
 200cb68:	e0bffd17 	ldw	r2,-12(fp)
 200cb6c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200cb70:	e0bffd17 	ldw	r2,-12(fp)
 200cb74:	00c00044 	movi	r3,1
 200cb78:	10c00415 	stw	r3,16(r2)
  return b;
 200cb7c:	e0bffd17 	ldw	r2,-12(fp)
}
 200cb80:	e037883a 	mov	sp,fp
 200cb84:	dfc00117 	ldw	ra,4(sp)
 200cb88:	df000017 	ldw	fp,0(sp)
 200cb8c:	dec00204 	addi	sp,sp,8
 200cb90:	f800283a 	ret

0200cb94 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 200cb94:	deffeb04 	addi	sp,sp,-84
 200cb98:	dfc01415 	stw	ra,80(sp)
 200cb9c:	df001315 	stw	fp,76(sp)
 200cba0:	df001304 	addi	fp,sp,76
 200cba4:	e13ffd15 	stw	r4,-12(fp)
 200cba8:	e17ffe15 	stw	r5,-8(fp)
 200cbac:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 200cbb0:	e0bffe17 	ldw	r2,-8(fp)
 200cbb4:	10c00417 	ldw	r3,16(r2)
 200cbb8:	e0bfff17 	ldw	r2,-4(fp)
 200cbbc:	10800417 	ldw	r2,16(r2)
 200cbc0:	1880060e 	bge	r3,r2,200cbdc <__multiply+0x48>
    {
      c = a;
 200cbc4:	e0bffe17 	ldw	r2,-8(fp)
 200cbc8:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200cbcc:	e0bfff17 	ldw	r2,-4(fp)
 200cbd0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200cbd4:	e0bff517 	ldw	r2,-44(fp)
 200cbd8:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 200cbdc:	e0bffe17 	ldw	r2,-8(fp)
 200cbe0:	10800117 	ldw	r2,4(r2)
 200cbe4:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 200cbe8:	e0bffe17 	ldw	r2,-8(fp)
 200cbec:	10800417 	ldw	r2,16(r2)
 200cbf0:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 200cbf4:	e0bfff17 	ldw	r2,-4(fp)
 200cbf8:	10800417 	ldw	r2,16(r2)
 200cbfc:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 200cc00:	e0fff617 	ldw	r3,-40(fp)
 200cc04:	e0bff717 	ldw	r2,-36(fp)
 200cc08:	1885883a 	add	r2,r3,r2
 200cc0c:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 200cc10:	e0bffe17 	ldw	r2,-8(fp)
 200cc14:	10c00217 	ldw	r3,8(r2)
 200cc18:	e0bfee17 	ldw	r2,-72(fp)
 200cc1c:	1880030e 	bge	r3,r2,200cc2c <__multiply+0x98>
    k++;
 200cc20:	e0bfed17 	ldw	r2,-76(fp)
 200cc24:	10800044 	addi	r2,r2,1
 200cc28:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 200cc2c:	e17fed17 	ldw	r5,-76(fp)
 200cc30:	e13ffd17 	ldw	r4,-12(fp)
 200cc34:	200c4f40 	call	200c4f4 <_Balloc>
 200cc38:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cc3c:	e0bff517 	ldw	r2,-44(fp)
 200cc40:	10800504 	addi	r2,r2,20
 200cc44:	e0bff015 	stw	r2,-64(fp)
 200cc48:	e0bfee17 	ldw	r2,-72(fp)
 200cc4c:	1085883a 	add	r2,r2,r2
 200cc50:	1085883a 	add	r2,r2,r2
 200cc54:	1007883a 	mov	r3,r2
 200cc58:	e0bff017 	ldw	r2,-64(fp)
 200cc5c:	10c5883a 	add	r2,r2,r3
 200cc60:	e0bff815 	stw	r2,-32(fp)
 200cc64:	00000506 	br	200cc7c <__multiply+0xe8>
    *x = 0;
 200cc68:	e0bff017 	ldw	r2,-64(fp)
 200cc6c:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cc70:	e0bff017 	ldw	r2,-64(fp)
 200cc74:	10800104 	addi	r2,r2,4
 200cc78:	e0bff015 	stw	r2,-64(fp)
 200cc7c:	e0fff017 	ldw	r3,-64(fp)
 200cc80:	e0bff817 	ldw	r2,-32(fp)
 200cc84:	18bff836 	bltu	r3,r2,200cc68 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 200cc88:	e0bffe17 	ldw	r2,-8(fp)
 200cc8c:	10800504 	addi	r2,r2,20
 200cc90:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 200cc94:	e0bff617 	ldw	r2,-40(fp)
 200cc98:	1085883a 	add	r2,r2,r2
 200cc9c:	1085883a 	add	r2,r2,r2
 200cca0:	1007883a 	mov	r3,r2
 200cca4:	e0bff817 	ldw	r2,-32(fp)
 200cca8:	10c5883a 	add	r2,r2,r3
 200ccac:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200ccb0:	e0bfff17 	ldw	r2,-4(fp)
 200ccb4:	10800504 	addi	r2,r2,20
 200ccb8:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 200ccbc:	e0bff717 	ldw	r2,-36(fp)
 200ccc0:	1085883a 	add	r2,r2,r2
 200ccc4:	1085883a 	add	r2,r2,r2
 200ccc8:	1007883a 	mov	r3,r2
 200cccc:	e0bff117 	ldw	r2,-60(fp)
 200ccd0:	10c5883a 	add	r2,r2,r3
 200ccd4:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 200ccd8:	e0bff517 	ldw	r2,-44(fp)
 200ccdc:	10800504 	addi	r2,r2,20
 200cce0:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200cce4:	00007d06 	br	200cedc <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 200cce8:	e0bff117 	ldw	r2,-60(fp)
 200ccec:	10800017 	ldw	r2,0(r2)
 200ccf0:	10bfffcc 	andi	r2,r2,65535
 200ccf4:	e0bffb15 	stw	r2,-20(fp)
 200ccf8:	e0bffb17 	ldw	r2,-20(fp)
 200ccfc:	10003426 	beq	r2,zero,200cdd0 <__multiply+0x23c>
	{
	  x = xa;
 200cd00:	e0bff817 	ldw	r2,-32(fp)
 200cd04:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200cd08:	e0bff317 	ldw	r2,-52(fp)
 200cd0c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200cd10:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 200cd14:	e0bff017 	ldw	r2,-64(fp)
 200cd18:	10800017 	ldw	r2,0(r2)
 200cd1c:	10ffffcc 	andi	r3,r2,65535
 200cd20:	e0bffb17 	ldw	r2,-20(fp)
 200cd24:	1887383a 	mul	r3,r3,r2
 200cd28:	e0bff217 	ldw	r2,-56(fp)
 200cd2c:	10800017 	ldw	r2,0(r2)
 200cd30:	10bfffcc 	andi	r2,r2,65535
 200cd34:	1887883a 	add	r3,r3,r2
 200cd38:	e0bfef17 	ldw	r2,-68(fp)
 200cd3c:	1885883a 	add	r2,r3,r2
 200cd40:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200cd44:	e0bffc17 	ldw	r2,-16(fp)
 200cd48:	1004d43a 	srli	r2,r2,16
 200cd4c:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 200cd50:	e0bff017 	ldw	r2,-64(fp)
 200cd54:	10c00104 	addi	r3,r2,4
 200cd58:	e0fff015 	stw	r3,-64(fp)
 200cd5c:	10800017 	ldw	r2,0(r2)
 200cd60:	1006d43a 	srli	r3,r2,16
 200cd64:	e0bffb17 	ldw	r2,-20(fp)
 200cd68:	1887383a 	mul	r3,r3,r2
 200cd6c:	e0bff217 	ldw	r2,-56(fp)
 200cd70:	10800017 	ldw	r2,0(r2)
 200cd74:	1004d43a 	srli	r2,r2,16
 200cd78:	1887883a 	add	r3,r3,r2
 200cd7c:	e0bfef17 	ldw	r2,-68(fp)
 200cd80:	1885883a 	add	r2,r3,r2
 200cd84:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200cd88:	e0bff417 	ldw	r2,-48(fp)
 200cd8c:	1004d43a 	srli	r2,r2,16
 200cd90:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 200cd94:	e0bff217 	ldw	r2,-56(fp)
 200cd98:	10c00104 	addi	r3,r2,4
 200cd9c:	e0fff215 	stw	r3,-56(fp)
 200cda0:	e0fff417 	ldw	r3,-48(fp)
 200cda4:	1808943a 	slli	r4,r3,16
 200cda8:	e0fffc17 	ldw	r3,-16(fp)
 200cdac:	18ffffcc 	andi	r3,r3,65535
 200cdb0:	20c6b03a 	or	r3,r4,r3
 200cdb4:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 200cdb8:	e0fff017 	ldw	r3,-64(fp)
 200cdbc:	e0bff917 	ldw	r2,-28(fp)
 200cdc0:	18bfd436 	bltu	r3,r2,200cd14 <__multiply+0x180>
	  *xc = carry;
 200cdc4:	e0bff217 	ldw	r2,-56(fp)
 200cdc8:	e0ffef17 	ldw	r3,-68(fp)
 200cdcc:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 200cdd0:	e0bff117 	ldw	r2,-60(fp)
 200cdd4:	10800017 	ldw	r2,0(r2)
 200cdd8:	1004d43a 	srli	r2,r2,16
 200cddc:	e0bffb15 	stw	r2,-20(fp)
 200cde0:	e0bffb17 	ldw	r2,-20(fp)
 200cde4:	10003726 	beq	r2,zero,200cec4 <__multiply+0x330>
	{
	  x = xa;
 200cde8:	e0bff817 	ldw	r2,-32(fp)
 200cdec:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200cdf0:	e0bff317 	ldw	r2,-52(fp)
 200cdf4:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200cdf8:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 200cdfc:	e0bff217 	ldw	r2,-56(fp)
 200ce00:	10800017 	ldw	r2,0(r2)
 200ce04:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 200ce08:	e0bff017 	ldw	r2,-64(fp)
 200ce0c:	10800017 	ldw	r2,0(r2)
 200ce10:	10ffffcc 	andi	r3,r2,65535
 200ce14:	e0bffb17 	ldw	r2,-20(fp)
 200ce18:	1887383a 	mul	r3,r3,r2
 200ce1c:	e0bff217 	ldw	r2,-56(fp)
 200ce20:	10800017 	ldw	r2,0(r2)
 200ce24:	1004d43a 	srli	r2,r2,16
 200ce28:	1887883a 	add	r3,r3,r2
 200ce2c:	e0bfef17 	ldw	r2,-68(fp)
 200ce30:	1885883a 	add	r2,r3,r2
 200ce34:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200ce38:	e0bffc17 	ldw	r2,-16(fp)
 200ce3c:	1004d43a 	srli	r2,r2,16
 200ce40:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 200ce44:	e0bff217 	ldw	r2,-56(fp)
 200ce48:	10c00104 	addi	r3,r2,4
 200ce4c:	e0fff215 	stw	r3,-56(fp)
 200ce50:	e0fffc17 	ldw	r3,-16(fp)
 200ce54:	1808943a 	slli	r4,r3,16
 200ce58:	e0fff417 	ldw	r3,-48(fp)
 200ce5c:	18ffffcc 	andi	r3,r3,65535
 200ce60:	20c6b03a 	or	r3,r4,r3
 200ce64:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 200ce68:	e0bff017 	ldw	r2,-64(fp)
 200ce6c:	10c00104 	addi	r3,r2,4
 200ce70:	e0fff015 	stw	r3,-64(fp)
 200ce74:	10800017 	ldw	r2,0(r2)
 200ce78:	1006d43a 	srli	r3,r2,16
 200ce7c:	e0bffb17 	ldw	r2,-20(fp)
 200ce80:	1887383a 	mul	r3,r3,r2
 200ce84:	e0bff217 	ldw	r2,-56(fp)
 200ce88:	10800017 	ldw	r2,0(r2)
 200ce8c:	10bfffcc 	andi	r2,r2,65535
 200ce90:	1887883a 	add	r3,r3,r2
 200ce94:	e0bfef17 	ldw	r2,-68(fp)
 200ce98:	1885883a 	add	r2,r3,r2
 200ce9c:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200cea0:	e0bff417 	ldw	r2,-48(fp)
 200cea4:	1004d43a 	srli	r2,r2,16
 200cea8:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 200ceac:	e0fff017 	ldw	r3,-64(fp)
 200ceb0:	e0bff917 	ldw	r2,-28(fp)
 200ceb4:	18bfd436 	bltu	r3,r2,200ce08 <__multiply+0x274>
	  *xc = z2;
 200ceb8:	e0bff217 	ldw	r2,-56(fp)
 200cebc:	e0fff417 	ldw	r3,-48(fp)
 200cec0:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200cec4:	e0bff117 	ldw	r2,-60(fp)
 200cec8:	10800104 	addi	r2,r2,4
 200cecc:	e0bff115 	stw	r2,-60(fp)
 200ced0:	e0bff317 	ldw	r2,-52(fp)
 200ced4:	10800104 	addi	r2,r2,4
 200ced8:	e0bff315 	stw	r2,-52(fp)
 200cedc:	e0fff117 	ldw	r3,-60(fp)
 200cee0:	e0bffa17 	ldw	r2,-24(fp)
 200cee4:	18bf8036 	bltu	r3,r2,200cce8 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 200cee8:	e0bff517 	ldw	r2,-44(fp)
 200ceec:	10800504 	addi	r2,r2,20
 200cef0:	e0bff315 	stw	r2,-52(fp)
 200cef4:	e0bfee17 	ldw	r2,-72(fp)
 200cef8:	1085883a 	add	r2,r2,r2
 200cefc:	1085883a 	add	r2,r2,r2
 200cf00:	1007883a 	mov	r3,r2
 200cf04:	e0bff317 	ldw	r2,-52(fp)
 200cf08:	10c5883a 	add	r2,r2,r3
 200cf0c:	e0bff215 	stw	r2,-56(fp)
 200cf10:	00000306 	br	200cf20 <__multiply+0x38c>
 200cf14:	e0bfee17 	ldw	r2,-72(fp)
 200cf18:	10bfffc4 	addi	r2,r2,-1
 200cf1c:	e0bfee15 	stw	r2,-72(fp)
 200cf20:	e0bfee17 	ldw	r2,-72(fp)
 200cf24:	0080060e 	bge	zero,r2,200cf40 <__multiply+0x3ac>
 200cf28:	e0bff217 	ldw	r2,-56(fp)
 200cf2c:	10bfff04 	addi	r2,r2,-4
 200cf30:	e0bff215 	stw	r2,-56(fp)
 200cf34:	e0bff217 	ldw	r2,-56(fp)
 200cf38:	10800017 	ldw	r2,0(r2)
 200cf3c:	103ff526 	beq	r2,zero,200cf14 <__multiply+0x380>
  c->_wds = wc;
 200cf40:	e0bff517 	ldw	r2,-44(fp)
 200cf44:	e0ffee17 	ldw	r3,-72(fp)
 200cf48:	10c00415 	stw	r3,16(r2)
  return c;
 200cf4c:	e0bff517 	ldw	r2,-44(fp)
}
 200cf50:	e037883a 	mov	sp,fp
 200cf54:	dfc00117 	ldw	ra,4(sp)
 200cf58:	df000017 	ldw	fp,0(sp)
 200cf5c:	dec00204 	addi	sp,sp,8
 200cf60:	f800283a 	ret

0200cf64 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200cf64:	defff704 	addi	sp,sp,-36
 200cf68:	dfc00815 	stw	ra,32(sp)
 200cf6c:	df000715 	stw	fp,28(sp)
 200cf70:	df000704 	addi	fp,sp,28
 200cf74:	e13ffd15 	stw	r4,-12(fp)
 200cf78:	e17ffe15 	stw	r5,-8(fp)
 200cf7c:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 200cf80:	e0bfff17 	ldw	r2,-4(fp)
 200cf84:	108000cc 	andi	r2,r2,3
 200cf88:	e0bffb15 	stw	r2,-20(fp)
 200cf8c:	e0bffb17 	ldw	r2,-20(fp)
 200cf90:	10000e26 	beq	r2,zero,200cfcc <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 200cf94:	e0bffb17 	ldw	r2,-20(fp)
 200cf98:	10ffffc4 	addi	r3,r2,-1
 200cf9c:	008080b4 	movhi	r2,514
 200cfa0:	10ba7404 	addi	r2,r2,-5680
 200cfa4:	18c7883a 	add	r3,r3,r3
 200cfa8:	18c7883a 	add	r3,r3,r3
 200cfac:	10c5883a 	add	r2,r2,r3
 200cfb0:	10800017 	ldw	r2,0(r2)
 200cfb4:	000f883a 	mov	r7,zero
 200cfb8:	100d883a 	mov	r6,r2
 200cfbc:	e17ffe17 	ldw	r5,-8(fp)
 200cfc0:	e13ffd17 	ldw	r4,-12(fp)
 200cfc4:	200c6a00 	call	200c6a0 <__multadd>
 200cfc8:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 200cfcc:	e0bfff17 	ldw	r2,-4(fp)
 200cfd0:	1005d0ba 	srai	r2,r2,2
 200cfd4:	e0bfff15 	stw	r2,-4(fp)
 200cfd8:	e0bfff17 	ldw	r2,-4(fp)
 200cfdc:	1000021e 	bne	r2,zero,200cfe8 <__pow5mult+0x84>
    return b;
 200cfe0:	e0bffe17 	ldw	r2,-8(fp)
 200cfe4:	00003806 	br	200d0c8 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 200cfe8:	e0bffd17 	ldw	r2,-12(fp)
 200cfec:	10801217 	ldw	r2,72(r2)
 200cff0:	e0bff915 	stw	r2,-28(fp)
 200cff4:	e0bff917 	ldw	r2,-28(fp)
 200cff8:	10000b1e 	bne	r2,zero,200d028 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 200cffc:	01409c44 	movi	r5,625
 200d000:	e13ffd17 	ldw	r4,-12(fp)
 200d004:	200cb3c0 	call	200cb3c <__i2b>
 200d008:	1007883a 	mov	r3,r2
 200d00c:	e0bffd17 	ldw	r2,-12(fp)
 200d010:	10c01215 	stw	r3,72(r2)
 200d014:	e0bffd17 	ldw	r2,-12(fp)
 200d018:	10801217 	ldw	r2,72(r2)
 200d01c:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 200d020:	e0bff917 	ldw	r2,-28(fp)
 200d024:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 200d028:	e0bfff17 	ldw	r2,-4(fp)
 200d02c:	1080004c 	andi	r2,r2,1
 200d030:	10000a26 	beq	r2,zero,200d05c <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 200d034:	e1bff917 	ldw	r6,-28(fp)
 200d038:	e17ffe17 	ldw	r5,-8(fp)
 200d03c:	e13ffd17 	ldw	r4,-12(fp)
 200d040:	200cb940 	call	200cb94 <__multiply>
 200d044:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 200d048:	e17ffe17 	ldw	r5,-8(fp)
 200d04c:	e13ffd17 	ldw	r4,-12(fp)
 200d050:	200c6240 	call	200c624 <_Bfree>
	  b = b1;
 200d054:	e0bffc17 	ldw	r2,-16(fp)
 200d058:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 200d05c:	e0bfff17 	ldw	r2,-4(fp)
 200d060:	1005d07a 	srai	r2,r2,1
 200d064:	e0bfff15 	stw	r2,-4(fp)
 200d068:	e0bfff17 	ldw	r2,-4(fp)
 200d06c:	10001426 	beq	r2,zero,200d0c0 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 200d070:	e0bff917 	ldw	r2,-28(fp)
 200d074:	10800017 	ldw	r2,0(r2)
 200d078:	e0bffa15 	stw	r2,-24(fp)
 200d07c:	e0bffa17 	ldw	r2,-24(fp)
 200d080:	10000c1e 	bne	r2,zero,200d0b4 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 200d084:	e1bff917 	ldw	r6,-28(fp)
 200d088:	e17ff917 	ldw	r5,-28(fp)
 200d08c:	e13ffd17 	ldw	r4,-12(fp)
 200d090:	200cb940 	call	200cb94 <__multiply>
 200d094:	1007883a 	mov	r3,r2
 200d098:	e0bff917 	ldw	r2,-28(fp)
 200d09c:	10c00015 	stw	r3,0(r2)
 200d0a0:	e0bff917 	ldw	r2,-28(fp)
 200d0a4:	10800017 	ldw	r2,0(r2)
 200d0a8:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 200d0ac:	e0bffa17 	ldw	r2,-24(fp)
 200d0b0:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 200d0b4:	e0bffa17 	ldw	r2,-24(fp)
 200d0b8:	e0bff915 	stw	r2,-28(fp)
    }
 200d0bc:	003fda06 	br	200d028 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 200d0c0:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 200d0c4:	e0bffe17 	ldw	r2,-8(fp)
}
 200d0c8:	e037883a 	mov	sp,fp
 200d0cc:	dfc00117 	ldw	ra,4(sp)
 200d0d0:	df000017 	ldw	fp,0(sp)
 200d0d4:	dec00204 	addi	sp,sp,8
 200d0d8:	f800283a 	ret

0200d0dc <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200d0dc:	defff204 	addi	sp,sp,-56
 200d0e0:	dfc00d15 	stw	ra,52(sp)
 200d0e4:	df000c15 	stw	fp,48(sp)
 200d0e8:	df000c04 	addi	fp,sp,48
 200d0ec:	e13ffd15 	stw	r4,-12(fp)
 200d0f0:	e17ffe15 	stw	r5,-8(fp)
 200d0f4:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 200d0f8:	e0bfff17 	ldw	r2,-4(fp)
 200d0fc:	1005d17a 	srai	r2,r2,5
 200d100:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 200d104:	e0bffe17 	ldw	r2,-8(fp)
 200d108:	10800117 	ldw	r2,4(r2)
 200d10c:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 200d110:	e0bffe17 	ldw	r2,-8(fp)
 200d114:	10c00417 	ldw	r3,16(r2)
 200d118:	e0bffa17 	ldw	r2,-24(fp)
 200d11c:	1885883a 	add	r2,r3,r2
 200d120:	10800044 	addi	r2,r2,1
 200d124:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d128:	e0bffe17 	ldw	r2,-8(fp)
 200d12c:	10800217 	ldw	r2,8(r2)
 200d130:	e0bff415 	stw	r2,-48(fp)
 200d134:	00000606 	br	200d150 <__lshift+0x74>
    k1++;
 200d138:	e0bff517 	ldw	r2,-44(fp)
 200d13c:	10800044 	addi	r2,r2,1
 200d140:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d144:	e0bff417 	ldw	r2,-48(fp)
 200d148:	1085883a 	add	r2,r2,r2
 200d14c:	e0bff415 	stw	r2,-48(fp)
 200d150:	e0bff617 	ldw	r2,-40(fp)
 200d154:	e0fff417 	ldw	r3,-48(fp)
 200d158:	18bff716 	blt	r3,r2,200d138 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 200d15c:	e17ff517 	ldw	r5,-44(fp)
 200d160:	e13ffd17 	ldw	r4,-12(fp)
 200d164:	200c4f40 	call	200c4f4 <_Balloc>
 200d168:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 200d16c:	e0bffb17 	ldw	r2,-20(fp)
 200d170:	10800504 	addi	r2,r2,20
 200d174:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 200d178:	e03ff415 	stw	zero,-48(fp)
 200d17c:	00000706 	br	200d19c <__lshift+0xc0>
    *x1++ = 0;
 200d180:	e0bff817 	ldw	r2,-32(fp)
 200d184:	10c00104 	addi	r3,r2,4
 200d188:	e0fff815 	stw	r3,-32(fp)
 200d18c:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 200d190:	e0bff417 	ldw	r2,-48(fp)
 200d194:	10800044 	addi	r2,r2,1
 200d198:	e0bff415 	stw	r2,-48(fp)
 200d19c:	e0fff417 	ldw	r3,-48(fp)
 200d1a0:	e0bffa17 	ldw	r2,-24(fp)
 200d1a4:	18bff616 	blt	r3,r2,200d180 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 200d1a8:	e0bffe17 	ldw	r2,-8(fp)
 200d1ac:	10800504 	addi	r2,r2,20
 200d1b0:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 200d1b4:	e0bffe17 	ldw	r2,-8(fp)
 200d1b8:	10800417 	ldw	r2,16(r2)
 200d1bc:	1085883a 	add	r2,r2,r2
 200d1c0:	1085883a 	add	r2,r2,r2
 200d1c4:	1007883a 	mov	r3,r2
 200d1c8:	e0bff717 	ldw	r2,-36(fp)
 200d1cc:	10c5883a 	add	r2,r2,r3
 200d1d0:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 200d1d4:	e0bfff17 	ldw	r2,-4(fp)
 200d1d8:	108007cc 	andi	r2,r2,31
 200d1dc:	e0bfff15 	stw	r2,-4(fp)
 200d1e0:	e0bfff17 	ldw	r2,-4(fp)
 200d1e4:	10002326 	beq	r2,zero,200d274 <__lshift+0x198>
    {
      k1 = 32 - k;
 200d1e8:	00c00804 	movi	r3,32
 200d1ec:	e0bfff17 	ldw	r2,-4(fp)
 200d1f0:	1885c83a 	sub	r2,r3,r2
 200d1f4:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 200d1f8:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 200d1fc:	e0bff817 	ldw	r2,-32(fp)
 200d200:	10c00104 	addi	r3,r2,4
 200d204:	e0fff815 	stw	r3,-32(fp)
 200d208:	e0fff717 	ldw	r3,-36(fp)
 200d20c:	19000017 	ldw	r4,0(r3)
 200d210:	e0ffff17 	ldw	r3,-4(fp)
 200d214:	20c8983a 	sll	r4,r4,r3
 200d218:	e0fff917 	ldw	r3,-28(fp)
 200d21c:	20c6b03a 	or	r3,r4,r3
 200d220:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 200d224:	e0bff717 	ldw	r2,-36(fp)
 200d228:	10c00104 	addi	r3,r2,4
 200d22c:	e0fff715 	stw	r3,-36(fp)
 200d230:	10c00017 	ldw	r3,0(r2)
 200d234:	e0bff517 	ldw	r2,-44(fp)
 200d238:	1884d83a 	srl	r2,r3,r2
 200d23c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 200d240:	e0fff717 	ldw	r3,-36(fp)
 200d244:	e0bffc17 	ldw	r2,-16(fp)
 200d248:	18bfec36 	bltu	r3,r2,200d1fc <__lshift+0x120>
      if ((*x1 = z) != 0)
 200d24c:	e0bff817 	ldw	r2,-32(fp)
 200d250:	e0fff917 	ldw	r3,-28(fp)
 200d254:	10c00015 	stw	r3,0(r2)
 200d258:	e0bff817 	ldw	r2,-32(fp)
 200d25c:	10800017 	ldw	r2,0(r2)
 200d260:	10000f26 	beq	r2,zero,200d2a0 <__lshift+0x1c4>
	++n1;
 200d264:	e0bff617 	ldw	r2,-40(fp)
 200d268:	10800044 	addi	r2,r2,1
 200d26c:	e0bff615 	stw	r2,-40(fp)
 200d270:	00000b06 	br	200d2a0 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 200d274:	e0bff817 	ldw	r2,-32(fp)
 200d278:	10c00104 	addi	r3,r2,4
 200d27c:	e0fff815 	stw	r3,-32(fp)
 200d280:	e0fff717 	ldw	r3,-36(fp)
 200d284:	19000104 	addi	r4,r3,4
 200d288:	e13ff715 	stw	r4,-36(fp)
 200d28c:	18c00017 	ldw	r3,0(r3)
 200d290:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 200d294:	e0fff717 	ldw	r3,-36(fp)
 200d298:	e0bffc17 	ldw	r2,-16(fp)
 200d29c:	18bff536 	bltu	r3,r2,200d274 <__lshift+0x198>
  b1->_wds = n1 - 1;
 200d2a0:	e0bff617 	ldw	r2,-40(fp)
 200d2a4:	10ffffc4 	addi	r3,r2,-1
 200d2a8:	e0bffb17 	ldw	r2,-20(fp)
 200d2ac:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 200d2b0:	e17ffe17 	ldw	r5,-8(fp)
 200d2b4:	e13ffd17 	ldw	r4,-12(fp)
 200d2b8:	200c6240 	call	200c624 <_Bfree>
  return b1;
 200d2bc:	e0bffb17 	ldw	r2,-20(fp)
}
 200d2c0:	e037883a 	mov	sp,fp
 200d2c4:	dfc00117 	ldw	ra,4(sp)
 200d2c8:	df000017 	ldw	fp,0(sp)
 200d2cc:	dec00204 	addi	sp,sp,8
 200d2d0:	f800283a 	ret

0200d2d4 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 200d2d4:	defff704 	addi	sp,sp,-36
 200d2d8:	df000815 	stw	fp,32(sp)
 200d2dc:	df000804 	addi	fp,sp,32
 200d2e0:	e13ffe15 	stw	r4,-8(fp)
 200d2e4:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 200d2e8:	e0bffe17 	ldw	r2,-8(fp)
 200d2ec:	10800417 	ldw	r2,16(r2)
 200d2f0:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 200d2f4:	e0bfff17 	ldw	r2,-4(fp)
 200d2f8:	10800417 	ldw	r2,16(r2)
 200d2fc:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 200d300:	e0fffa17 	ldw	r3,-24(fp)
 200d304:	e0bffb17 	ldw	r2,-20(fp)
 200d308:	1885c83a 	sub	r2,r3,r2
 200d30c:	e0bffa15 	stw	r2,-24(fp)
 200d310:	e0bffa17 	ldw	r2,-24(fp)
 200d314:	10000226 	beq	r2,zero,200d320 <__mcmp+0x4c>
    return i;
 200d318:	e0bffa17 	ldw	r2,-24(fp)
 200d31c:	00002e06 	br	200d3d8 <__mcmp+0x104>
  xa0 = a->_x;
 200d320:	e0bffe17 	ldw	r2,-8(fp)
 200d324:	10800504 	addi	r2,r2,20
 200d328:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 200d32c:	e0bffb17 	ldw	r2,-20(fp)
 200d330:	1085883a 	add	r2,r2,r2
 200d334:	1085883a 	add	r2,r2,r2
 200d338:	1007883a 	mov	r3,r2
 200d33c:	e0bffc17 	ldw	r2,-16(fp)
 200d340:	10c5883a 	add	r2,r2,r3
 200d344:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 200d348:	e0bfff17 	ldw	r2,-4(fp)
 200d34c:	10800504 	addi	r2,r2,20
 200d350:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 200d354:	e0bffb17 	ldw	r2,-20(fp)
 200d358:	1085883a 	add	r2,r2,r2
 200d35c:	1085883a 	add	r2,r2,r2
 200d360:	1007883a 	mov	r3,r2
 200d364:	e0bffd17 	ldw	r2,-12(fp)
 200d368:	10c5883a 	add	r2,r2,r3
 200d36c:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 200d370:	e0bff817 	ldw	r2,-32(fp)
 200d374:	10bfff04 	addi	r2,r2,-4
 200d378:	e0bff815 	stw	r2,-32(fp)
 200d37c:	e0bff817 	ldw	r2,-32(fp)
 200d380:	10c00017 	ldw	r3,0(r2)
 200d384:	e0bff917 	ldw	r2,-28(fp)
 200d388:	10bfff04 	addi	r2,r2,-4
 200d38c:	e0bff915 	stw	r2,-28(fp)
 200d390:	e0bff917 	ldw	r2,-28(fp)
 200d394:	10800017 	ldw	r2,0(r2)
 200d398:	18800926 	beq	r3,r2,200d3c0 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 200d39c:	e0bff817 	ldw	r2,-32(fp)
 200d3a0:	10c00017 	ldw	r3,0(r2)
 200d3a4:	e0bff917 	ldw	r2,-28(fp)
 200d3a8:	10800017 	ldw	r2,0(r2)
 200d3ac:	1880022e 	bgeu	r3,r2,200d3b8 <__mcmp+0xe4>
 200d3b0:	00bfffc4 	movi	r2,-1
 200d3b4:	00000806 	br	200d3d8 <__mcmp+0x104>
 200d3b8:	00800044 	movi	r2,1
 200d3bc:	00000606 	br	200d3d8 <__mcmp+0x104>
      if (xa <= xa0)
 200d3c0:	e0bff817 	ldw	r2,-32(fp)
 200d3c4:	e0fffc17 	ldw	r3,-16(fp)
 200d3c8:	1880012e 	bgeu	r3,r2,200d3d0 <__mcmp+0xfc>
	break;
    }
 200d3cc:	003fe806 	br	200d370 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 200d3d0:	0001883a 	nop
    }
  return 0;
 200d3d4:	0005883a 	mov	r2,zero
}
 200d3d8:	e037883a 	mov	sp,fp
 200d3dc:	df000017 	ldw	fp,0(sp)
 200d3e0:	dec00104 	addi	sp,sp,4
 200d3e4:	f800283a 	ret

0200d3e8 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 200d3e8:	deffef04 	addi	sp,sp,-68
 200d3ec:	dfc01015 	stw	ra,64(sp)
 200d3f0:	df000f15 	stw	fp,60(sp)
 200d3f4:	df000f04 	addi	fp,sp,60
 200d3f8:	e13ffd15 	stw	r4,-12(fp)
 200d3fc:	e17ffe15 	stw	r5,-8(fp)
 200d400:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 200d404:	e17fff17 	ldw	r5,-4(fp)
 200d408:	e13ffe17 	ldw	r4,-8(fp)
 200d40c:	200d2d40 	call	200d2d4 <__mcmp>
 200d410:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 200d414:	e0bff117 	ldw	r2,-60(fp)
 200d418:	10000b1e 	bne	r2,zero,200d448 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 200d41c:	000b883a 	mov	r5,zero
 200d420:	e13ffd17 	ldw	r4,-12(fp)
 200d424:	200c4f40 	call	200c4f4 <_Balloc>
 200d428:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 200d42c:	e0bff717 	ldw	r2,-36(fp)
 200d430:	00c00044 	movi	r3,1
 200d434:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 200d438:	e0bff717 	ldw	r2,-36(fp)
 200d43c:	10000515 	stw	zero,20(r2)
      return c;
 200d440:	e0bff717 	ldw	r2,-36(fp)
 200d444:	00008c06 	br	200d678 <__mdiff+0x290>
    }
  if (i < 0)
 200d448:	e0bff117 	ldw	r2,-60(fp)
 200d44c:	1000090e 	bge	r2,zero,200d474 <__mdiff+0x8c>
    {
      c = a;
 200d450:	e0bffe17 	ldw	r2,-8(fp)
 200d454:	e0bff715 	stw	r2,-36(fp)
      a = b;
 200d458:	e0bfff17 	ldw	r2,-4(fp)
 200d45c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200d460:	e0bff717 	ldw	r2,-36(fp)
 200d464:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 200d468:	00800044 	movi	r2,1
 200d46c:	e0bff115 	stw	r2,-60(fp)
 200d470:	00000106 	br	200d478 <__mdiff+0x90>
    }
  else
    i = 0;
 200d474:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 200d478:	e0bffe17 	ldw	r2,-8(fp)
 200d47c:	10800117 	ldw	r2,4(r2)
 200d480:	100b883a 	mov	r5,r2
 200d484:	e13ffd17 	ldw	r4,-12(fp)
 200d488:	200c4f40 	call	200c4f4 <_Balloc>
 200d48c:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 200d490:	e0bff717 	ldw	r2,-36(fp)
 200d494:	e0fff117 	ldw	r3,-60(fp)
 200d498:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 200d49c:	e0bffe17 	ldw	r2,-8(fp)
 200d4a0:	10800417 	ldw	r2,16(r2)
 200d4a4:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 200d4a8:	e0bffe17 	ldw	r2,-8(fp)
 200d4ac:	10800504 	addi	r2,r2,20
 200d4b0:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 200d4b4:	e0bff217 	ldw	r2,-56(fp)
 200d4b8:	1085883a 	add	r2,r2,r2
 200d4bc:	1085883a 	add	r2,r2,r2
 200d4c0:	1007883a 	mov	r3,r2
 200d4c4:	e0bff417 	ldw	r2,-48(fp)
 200d4c8:	10c5883a 	add	r2,r2,r3
 200d4cc:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 200d4d0:	e0bfff17 	ldw	r2,-4(fp)
 200d4d4:	10800417 	ldw	r2,16(r2)
 200d4d8:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200d4dc:	e0bfff17 	ldw	r2,-4(fp)
 200d4e0:	10800504 	addi	r2,r2,20
 200d4e4:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 200d4e8:	e0bff917 	ldw	r2,-28(fp)
 200d4ec:	1085883a 	add	r2,r2,r2
 200d4f0:	1085883a 	add	r2,r2,r2
 200d4f4:	1007883a 	mov	r3,r2
 200d4f8:	e0bff517 	ldw	r2,-44(fp)
 200d4fc:	10c5883a 	add	r2,r2,r3
 200d500:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 200d504:	e0bff717 	ldw	r2,-36(fp)
 200d508:	10800504 	addi	r2,r2,20
 200d50c:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 200d510:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 200d514:	e0bff417 	ldw	r2,-48(fp)
 200d518:	10800017 	ldw	r2,0(r2)
 200d51c:	10ffffcc 	andi	r3,r2,65535
 200d520:	e0bff517 	ldw	r2,-44(fp)
 200d524:	10800017 	ldw	r2,0(r2)
 200d528:	10bfffcc 	andi	r2,r2,65535
 200d52c:	1887c83a 	sub	r3,r3,r2
 200d530:	e0bff317 	ldw	r2,-52(fp)
 200d534:	1885883a 	add	r2,r3,r2
 200d538:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d53c:	e0bffb17 	ldw	r2,-20(fp)
 200d540:	1005d43a 	srai	r2,r2,16
 200d544:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 200d548:	e0bff417 	ldw	r2,-48(fp)
 200d54c:	10c00104 	addi	r3,r2,4
 200d550:	e0fff415 	stw	r3,-48(fp)
 200d554:	10800017 	ldw	r2,0(r2)
 200d558:	1006d43a 	srli	r3,r2,16
 200d55c:	e0bff517 	ldw	r2,-44(fp)
 200d560:	11000104 	addi	r4,r2,4
 200d564:	e13ff515 	stw	r4,-44(fp)
 200d568:	10800017 	ldw	r2,0(r2)
 200d56c:	1004d43a 	srli	r2,r2,16
 200d570:	1887c83a 	sub	r3,r3,r2
 200d574:	e0bff317 	ldw	r2,-52(fp)
 200d578:	1885883a 	add	r2,r3,r2
 200d57c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d580:	e0bffc17 	ldw	r2,-16(fp)
 200d584:	1005d43a 	srai	r2,r2,16
 200d588:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d58c:	e0bff617 	ldw	r2,-40(fp)
 200d590:	10c00104 	addi	r3,r2,4
 200d594:	e0fff615 	stw	r3,-40(fp)
 200d598:	e0fffc17 	ldw	r3,-16(fp)
 200d59c:	1808943a 	slli	r4,r3,16
 200d5a0:	e0fffb17 	ldw	r3,-20(fp)
 200d5a4:	18ffffcc 	andi	r3,r3,65535
 200d5a8:	20c6b03a 	or	r3,r4,r3
 200d5ac:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 200d5b0:	e0fff517 	ldw	r3,-44(fp)
 200d5b4:	e0bffa17 	ldw	r2,-24(fp)
 200d5b8:	18bfd636 	bltu	r3,r2,200d514 <__mdiff+0x12c>
  while (xa < xae)
 200d5bc:	00001d06 	br	200d634 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 200d5c0:	e0bff417 	ldw	r2,-48(fp)
 200d5c4:	10800017 	ldw	r2,0(r2)
 200d5c8:	10ffffcc 	andi	r3,r2,65535
 200d5cc:	e0bff317 	ldw	r2,-52(fp)
 200d5d0:	1885883a 	add	r2,r3,r2
 200d5d4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d5d8:	e0bffb17 	ldw	r2,-20(fp)
 200d5dc:	1005d43a 	srai	r2,r2,16
 200d5e0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 200d5e4:	e0bff417 	ldw	r2,-48(fp)
 200d5e8:	10c00104 	addi	r3,r2,4
 200d5ec:	e0fff415 	stw	r3,-48(fp)
 200d5f0:	10800017 	ldw	r2,0(r2)
 200d5f4:	1006d43a 	srli	r3,r2,16
 200d5f8:	e0bff317 	ldw	r2,-52(fp)
 200d5fc:	1885883a 	add	r2,r3,r2
 200d600:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d604:	e0bffc17 	ldw	r2,-16(fp)
 200d608:	1005d43a 	srai	r2,r2,16
 200d60c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d610:	e0bff617 	ldw	r2,-40(fp)
 200d614:	10c00104 	addi	r3,r2,4
 200d618:	e0fff615 	stw	r3,-40(fp)
 200d61c:	e0fffc17 	ldw	r3,-16(fp)
 200d620:	1808943a 	slli	r4,r3,16
 200d624:	e0fffb17 	ldw	r3,-20(fp)
 200d628:	18ffffcc 	andi	r3,r3,65535
 200d62c:	20c6b03a 	or	r3,r4,r3
 200d630:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 200d634:	e0fff417 	ldw	r3,-48(fp)
 200d638:	e0bff817 	ldw	r2,-32(fp)
 200d63c:	18bfe036 	bltu	r3,r2,200d5c0 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d640:	00000306 	br	200d650 <__mdiff+0x268>
    wa--;
 200d644:	e0bff217 	ldw	r2,-56(fp)
 200d648:	10bfffc4 	addi	r2,r2,-1
 200d64c:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d650:	e0bff617 	ldw	r2,-40(fp)
 200d654:	10bfff04 	addi	r2,r2,-4
 200d658:	e0bff615 	stw	r2,-40(fp)
 200d65c:	e0bff617 	ldw	r2,-40(fp)
 200d660:	10800017 	ldw	r2,0(r2)
 200d664:	103ff726 	beq	r2,zero,200d644 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 200d668:	e0bff717 	ldw	r2,-36(fp)
 200d66c:	e0fff217 	ldw	r3,-56(fp)
 200d670:	10c00415 	stw	r3,16(r2)
  return c;
 200d674:	e0bff717 	ldw	r2,-36(fp)
}
 200d678:	e037883a 	mov	sp,fp
 200d67c:	dfc00117 	ldw	ra,4(sp)
 200d680:	df000017 	ldw	fp,0(sp)
 200d684:	dec00204 	addi	sp,sp,8
 200d688:	f800283a 	ret

0200d68c <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 200d68c:	defff804 	addi	sp,sp,-32
 200d690:	df000715 	stw	fp,28(sp)
 200d694:	dc000615 	stw	r16,24(sp)
 200d698:	df000704 	addi	fp,sp,28
 200d69c:	e13ffd15 	stw	r4,-12(fp)
 200d6a0:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 200d6a4:	e0bffd17 	ldw	r2,-12(fp)
 200d6a8:	e0bff915 	stw	r2,-28(fp)
 200d6ac:	e0bffe17 	ldw	r2,-8(fp)
 200d6b0:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 200d6b4:	e0bffa17 	ldw	r2,-24(fp)
 200d6b8:	10dffc2c 	andhi	r3,r2,32752
 200d6bc:	00bf3034 	movhi	r2,64704
 200d6c0:	1885883a 	add	r2,r3,r2
 200d6c4:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 200d6c8:	0400040e 	bge	zero,r16,200d6dc <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 200d6cc:	8005883a 	mov	r2,r16
 200d6d0:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 200d6d4:	e03ffb15 	stw	zero,-20(fp)
 200d6d8:	00001406 	br	200d72c <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 200d6dc:	0405c83a 	sub	r2,zero,r16
 200d6e0:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 200d6e4:	80800508 	cmpgei	r2,r16,20
 200d6e8:	1000051e 	bne	r2,zero,200d700 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 200d6ec:	00800234 	movhi	r2,8
 200d6f0:	1405d83a 	sra	r2,r2,r16
 200d6f4:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 200d6f8:	e03ffb15 	stw	zero,-20(fp)
 200d6fc:	00000b06 	br	200d72c <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 200d700:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 200d704:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 200d708:	808007c8 	cmpgei	r2,r16,31
 200d70c:	1000051e 	bne	r2,zero,200d724 <__ulp+0x98>
 200d710:	008007c4 	movi	r2,31
 200d714:	1405c83a 	sub	r2,r2,r16
 200d718:	00c00044 	movi	r3,1
 200d71c:	1884983a 	sll	r2,r3,r2
 200d720:	00000106 	br	200d728 <__ulp+0x9c>
 200d724:	00800044 	movi	r2,1
 200d728:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 200d72c:	e0bffb17 	ldw	r2,-20(fp)
 200d730:	e0fffc17 	ldw	r3,-16(fp)
 200d734:	1009883a 	mov	r4,r2
 200d738:	180b883a 	mov	r5,r3
}
 200d73c:	2005883a 	mov	r2,r4
 200d740:	2807883a 	mov	r3,r5
 200d744:	e6ffff04 	addi	sp,fp,-4
 200d748:	df000117 	ldw	fp,4(sp)
 200d74c:	dc000017 	ldw	r16,0(sp)
 200d750:	dec00204 	addi	sp,sp,8
 200d754:	f800283a 	ret

0200d758 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 200d758:	defff404 	addi	sp,sp,-48
 200d75c:	dfc00b15 	stw	ra,44(sp)
 200d760:	df000a15 	stw	fp,40(sp)
 200d764:	df000a04 	addi	fp,sp,40
 200d768:	e13ffe15 	stw	r4,-8(fp)
 200d76c:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 200d770:	e0bffe17 	ldw	r2,-8(fp)
 200d774:	10800504 	addi	r2,r2,20
 200d778:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 200d77c:	e0bffe17 	ldw	r2,-8(fp)
 200d780:	10800417 	ldw	r2,16(r2)
 200d784:	1085883a 	add	r2,r2,r2
 200d788:	1085883a 	add	r2,r2,r2
 200d78c:	1007883a 	mov	r3,r2
 200d790:	e0bff717 	ldw	r2,-36(fp)
 200d794:	10c5883a 	add	r2,r2,r3
 200d798:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 200d79c:	e0bff617 	ldw	r2,-40(fp)
 200d7a0:	10bfff04 	addi	r2,r2,-4
 200d7a4:	e0bff615 	stw	r2,-40(fp)
 200d7a8:	e0bff617 	ldw	r2,-40(fp)
 200d7ac:	10800017 	ldw	r2,0(r2)
 200d7b0:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 200d7b4:	e13ff817 	ldw	r4,-32(fp)
 200d7b8:	200c9c00 	call	200c9c0 <__hi0bits>
 200d7bc:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 200d7c0:	00c00804 	movi	r3,32
 200d7c4:	e0bff917 	ldw	r2,-28(fp)
 200d7c8:	1887c83a 	sub	r3,r3,r2
 200d7cc:	e0bfff17 	ldw	r2,-4(fp)
 200d7d0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 200d7d4:	e0bff917 	ldw	r2,-28(fp)
 200d7d8:	108002c8 	cmpgei	r2,r2,11
 200d7dc:	10001e1e 	bne	r2,zero,200d858 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 200d7e0:	00c002c4 	movi	r3,11
 200d7e4:	e0bff917 	ldw	r2,-28(fp)
 200d7e8:	1885c83a 	sub	r2,r3,r2
 200d7ec:	e0fff817 	ldw	r3,-32(fp)
 200d7f0:	1884d83a 	srl	r2,r3,r2
 200d7f4:	108ffc34 	orhi	r2,r2,16368
 200d7f8:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 200d7fc:	e0bff617 	ldw	r2,-40(fp)
 200d800:	e0fff717 	ldw	r3,-36(fp)
 200d804:	1880062e 	bgeu	r3,r2,200d820 <__b2d+0xc8>
 200d808:	e0bff617 	ldw	r2,-40(fp)
 200d80c:	10bfff04 	addi	r2,r2,-4
 200d810:	e0bff615 	stw	r2,-40(fp)
 200d814:	e0bff617 	ldw	r2,-40(fp)
 200d818:	10800017 	ldw	r2,0(r2)
 200d81c:	00000106 	br	200d824 <__b2d+0xcc>
 200d820:	0005883a 	mov	r2,zero
 200d824:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 200d828:	e0bff917 	ldw	r2,-28(fp)
 200d82c:	10800544 	addi	r2,r2,21
 200d830:	e0fff817 	ldw	r3,-32(fp)
 200d834:	1886983a 	sll	r3,r3,r2
 200d838:	010002c4 	movi	r4,11
 200d83c:	e0bff917 	ldw	r2,-28(fp)
 200d840:	2085c83a 	sub	r2,r4,r2
 200d844:	e13ffa17 	ldw	r4,-24(fp)
 200d848:	2084d83a 	srl	r2,r4,r2
 200d84c:	1884b03a 	or	r2,r3,r2
 200d850:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 200d854:	00003606 	br	200d930 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 200d858:	e0bff617 	ldw	r2,-40(fp)
 200d85c:	e0fff717 	ldw	r3,-36(fp)
 200d860:	1880062e 	bgeu	r3,r2,200d87c <__b2d+0x124>
 200d864:	e0bff617 	ldw	r2,-40(fp)
 200d868:	10bfff04 	addi	r2,r2,-4
 200d86c:	e0bff615 	stw	r2,-40(fp)
 200d870:	e0bff617 	ldw	r2,-40(fp)
 200d874:	10800017 	ldw	r2,0(r2)
 200d878:	00000106 	br	200d880 <__b2d+0x128>
 200d87c:	0005883a 	mov	r2,zero
 200d880:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 200d884:	e0bff917 	ldw	r2,-28(fp)
 200d888:	10bffd44 	addi	r2,r2,-11
 200d88c:	e0bff915 	stw	r2,-28(fp)
 200d890:	e0bff917 	ldw	r2,-28(fp)
 200d894:	10002126 	beq	r2,zero,200d91c <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 200d898:	e0fff817 	ldw	r3,-32(fp)
 200d89c:	e0bff917 	ldw	r2,-28(fp)
 200d8a0:	1886983a 	sll	r3,r3,r2
 200d8a4:	01000804 	movi	r4,32
 200d8a8:	e0bff917 	ldw	r2,-28(fp)
 200d8ac:	2085c83a 	sub	r2,r4,r2
 200d8b0:	e13ffb17 	ldw	r4,-20(fp)
 200d8b4:	2084d83a 	srl	r2,r4,r2
 200d8b8:	1884b03a 	or	r2,r3,r2
 200d8bc:	108ffc34 	orhi	r2,r2,16368
 200d8c0:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 200d8c4:	e0bff617 	ldw	r2,-40(fp)
 200d8c8:	e0fff717 	ldw	r3,-36(fp)
 200d8cc:	1880062e 	bgeu	r3,r2,200d8e8 <__b2d+0x190>
 200d8d0:	e0bff617 	ldw	r2,-40(fp)
 200d8d4:	10bfff04 	addi	r2,r2,-4
 200d8d8:	e0bff615 	stw	r2,-40(fp)
 200d8dc:	e0bff617 	ldw	r2,-40(fp)
 200d8e0:	10800017 	ldw	r2,0(r2)
 200d8e4:	00000106 	br	200d8ec <__b2d+0x194>
 200d8e8:	0005883a 	mov	r2,zero
 200d8ec:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 200d8f0:	e0fffb17 	ldw	r3,-20(fp)
 200d8f4:	e0bff917 	ldw	r2,-28(fp)
 200d8f8:	1886983a 	sll	r3,r3,r2
 200d8fc:	01000804 	movi	r4,32
 200d900:	e0bff917 	ldw	r2,-28(fp)
 200d904:	2085c83a 	sub	r2,r4,r2
 200d908:	e13ff817 	ldw	r4,-32(fp)
 200d90c:	2084d83a 	srl	r2,r4,r2
 200d910:	1884b03a 	or	r2,r3,r2
 200d914:	e0bffc15 	stw	r2,-16(fp)
 200d918:	00000506 	br	200d930 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 200d91c:	e0bff817 	ldw	r2,-32(fp)
 200d920:	108ffc34 	orhi	r2,r2,16368
 200d924:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 200d928:	e0bffb17 	ldw	r2,-20(fp)
 200d92c:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 200d930:	e0bffc17 	ldw	r2,-16(fp)
 200d934:	e0fffd17 	ldw	r3,-12(fp)
 200d938:	1009883a 	mov	r4,r2
 200d93c:	180b883a 	mov	r5,r3
}
 200d940:	2005883a 	mov	r2,r4
 200d944:	2807883a 	mov	r3,r5
 200d948:	e037883a 	mov	sp,fp
 200d94c:	dfc00117 	ldw	ra,4(sp)
 200d950:	df000017 	ldw	fp,0(sp)
 200d954:	dec00204 	addi	sp,sp,8
 200d958:	f800283a 	ret

0200d95c <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 200d95c:	defff004 	addi	sp,sp,-64
 200d960:	dfc00f15 	stw	ra,60(sp)
 200d964:	df000e15 	stw	fp,56(sp)
 200d968:	dc000d15 	stw	r16,52(sp)
 200d96c:	df000e04 	addi	fp,sp,56
 200d970:	e13ffb15 	stw	r4,-20(fp)
 200d974:	e17ffc15 	stw	r5,-16(fp)
 200d978:	e1bffd15 	stw	r6,-12(fp)
 200d97c:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 200d980:	e0bffc17 	ldw	r2,-16(fp)
 200d984:	e0bff715 	stw	r2,-36(fp)
 200d988:	e0bffd17 	ldw	r2,-12(fp)
 200d98c:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 200d990:	e0bffc17 	ldw	r2,-16(fp)
 200d994:	e0bff715 	stw	r2,-36(fp)
 200d998:	e0bffd17 	ldw	r2,-12(fp)
 200d99c:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 200d9a0:	01400044 	movi	r5,1
 200d9a4:	e13ffb17 	ldw	r4,-20(fp)
 200d9a8:	200c4f40 	call	200c4f4 <_Balloc>
 200d9ac:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 200d9b0:	e0bff417 	ldw	r2,-48(fp)
 200d9b4:	10800504 	addi	r2,r2,20
 200d9b8:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 200d9bc:	e0fff817 	ldw	r3,-32(fp)
 200d9c0:	00800434 	movhi	r2,16
 200d9c4:	10bfffc4 	addi	r2,r2,-1
 200d9c8:	1884703a 	and	r2,r3,r2
 200d9cc:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 200d9d0:	e0fff817 	ldw	r3,-32(fp)
 200d9d4:	00a00034 	movhi	r2,32768
 200d9d8:	10bfffc4 	addi	r2,r2,-1
 200d9dc:	1884703a 	and	r2,r3,r2
 200d9e0:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 200d9e4:	e0bff817 	ldw	r2,-32(fp)
 200d9e8:	1004d53a 	srli	r2,r2,20
 200d9ec:	e0bff615 	stw	r2,-40(fp)
 200d9f0:	e0bff617 	ldw	r2,-40(fp)
 200d9f4:	10000326 	beq	r2,zero,200da04 <__d2b+0xa8>
    z |= Exp_msk1;
 200d9f8:	e0bffa17 	ldw	r2,-24(fp)
 200d9fc:	10800434 	orhi	r2,r2,16
 200da00:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 200da04:	e0bff717 	ldw	r2,-36(fp)
 200da08:	10002826 	beq	r2,zero,200daac <__d2b+0x150>
    {
      y = d1;
 200da0c:	e0bff717 	ldw	r2,-36(fp)
 200da10:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 200da14:	e0bff904 	addi	r2,fp,-28
 200da18:	1009883a 	mov	r4,r2
 200da1c:	200ca500 	call	200ca50 <__lo0bits>
 200da20:	e0bff315 	stw	r2,-52(fp)
      if (k)
 200da24:	e0bff317 	ldw	r2,-52(fp)
 200da28:	10000e26 	beq	r2,zero,200da64 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 200da2c:	e0fffa17 	ldw	r3,-24(fp)
 200da30:	01000804 	movi	r4,32
 200da34:	e0bff317 	ldw	r2,-52(fp)
 200da38:	2085c83a 	sub	r2,r4,r2
 200da3c:	1886983a 	sll	r3,r3,r2
 200da40:	e0bff917 	ldw	r2,-28(fp)
 200da44:	1886b03a 	or	r3,r3,r2
 200da48:	e0bff517 	ldw	r2,-44(fp)
 200da4c:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 200da50:	e0fffa17 	ldw	r3,-24(fp)
 200da54:	e0bff317 	ldw	r2,-52(fp)
 200da58:	1884d83a 	srl	r2,r3,r2
 200da5c:	e0bffa15 	stw	r2,-24(fp)
 200da60:	00000306 	br	200da70 <__d2b+0x114>
	}
      else
	x[0] = y;
 200da64:	e0fff917 	ldw	r3,-28(fp)
 200da68:	e0bff517 	ldw	r2,-44(fp)
 200da6c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 200da70:	e0bff517 	ldw	r2,-44(fp)
 200da74:	10800104 	addi	r2,r2,4
 200da78:	e0fffa17 	ldw	r3,-24(fp)
 200da7c:	10c00015 	stw	r3,0(r2)
 200da80:	10800017 	ldw	r2,0(r2)
 200da84:	10000226 	beq	r2,zero,200da90 <__d2b+0x134>
 200da88:	00800084 	movi	r2,2
 200da8c:	00000106 	br	200da94 <__d2b+0x138>
 200da90:	00800044 	movi	r2,1
 200da94:	e0fff417 	ldw	r3,-48(fp)
 200da98:	18800415 	stw	r2,16(r3)
 200da9c:	e0bff417 	ldw	r2,-48(fp)
 200daa0:	10800417 	ldw	r2,16(r2)
 200daa4:	e0bff215 	stw	r2,-56(fp)
 200daa8:	00001006 	br	200daec <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 200daac:	e0bffa04 	addi	r2,fp,-24
 200dab0:	1009883a 	mov	r4,r2
 200dab4:	200ca500 	call	200ca50 <__lo0bits>
 200dab8:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 200dabc:	e0fffa17 	ldw	r3,-24(fp)
 200dac0:	e0bff517 	ldw	r2,-44(fp)
 200dac4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 200dac8:	e0bff417 	ldw	r2,-48(fp)
 200dacc:	00c00044 	movi	r3,1
 200dad0:	10c00415 	stw	r3,16(r2)
 200dad4:	e0bff417 	ldw	r2,-48(fp)
 200dad8:	10800417 	ldw	r2,16(r2)
 200dadc:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 200dae0:	e0bff317 	ldw	r2,-52(fp)
 200dae4:	10800804 	addi	r2,r2,32
 200dae8:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 200daec:	e0bff617 	ldw	r2,-40(fp)
 200daf0:	10000c26 	beq	r2,zero,200db24 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 200daf4:	e0bff617 	ldw	r2,-40(fp)
 200daf8:	10fef344 	addi	r3,r2,-1075
 200dafc:	e0bff317 	ldw	r2,-52(fp)
 200db00:	1887883a 	add	r3,r3,r2
 200db04:	e0bffe17 	ldw	r2,-8(fp)
 200db08:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 200db0c:	00c00d44 	movi	r3,53
 200db10:	e0bff317 	ldw	r2,-52(fp)
 200db14:	1887c83a 	sub	r3,r3,r2
 200db18:	e0800217 	ldw	r2,8(fp)
 200db1c:	10c00015 	stw	r3,0(r2)
 200db20:	00001706 	br	200db80 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 200db24:	e0bff617 	ldw	r2,-40(fp)
 200db28:	10fef384 	addi	r3,r2,-1074
 200db2c:	e0bff317 	ldw	r2,-52(fp)
 200db30:	1887883a 	add	r3,r3,r2
 200db34:	e0bffe17 	ldw	r2,-8(fp)
 200db38:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 200db3c:	e0bff217 	ldw	r2,-56(fp)
 200db40:	1020917a 	slli	r16,r2,5
 200db44:	e0fff217 	ldw	r3,-56(fp)
 200db48:	00900034 	movhi	r2,16384
 200db4c:	10bfffc4 	addi	r2,r2,-1
 200db50:	1885883a 	add	r2,r3,r2
 200db54:	1085883a 	add	r2,r2,r2
 200db58:	1085883a 	add	r2,r2,r2
 200db5c:	1007883a 	mov	r3,r2
 200db60:	e0bff517 	ldw	r2,-44(fp)
 200db64:	10c5883a 	add	r2,r2,r3
 200db68:	10800017 	ldw	r2,0(r2)
 200db6c:	1009883a 	mov	r4,r2
 200db70:	200c9c00 	call	200c9c0 <__hi0bits>
 200db74:	8087c83a 	sub	r3,r16,r2
 200db78:	e0800217 	ldw	r2,8(fp)
 200db7c:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 200db80:	e0bff417 	ldw	r2,-48(fp)
}
 200db84:	e6ffff04 	addi	sp,fp,-4
 200db88:	dfc00217 	ldw	ra,8(sp)
 200db8c:	df000117 	ldw	fp,4(sp)
 200db90:	dc000017 	ldw	r16,0(sp)
 200db94:	dec00304 	addi	sp,sp,12
 200db98:	f800283a 	ret

0200db9c <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 200db9c:	defff504 	addi	sp,sp,-44
 200dba0:	dfc00a15 	stw	ra,40(sp)
 200dba4:	df000915 	stw	fp,36(sp)
 200dba8:	df000904 	addi	fp,sp,36
 200dbac:	e13ffe15 	stw	r4,-8(fp)
 200dbb0:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 200dbb4:	e0bffc04 	addi	r2,fp,-16
 200dbb8:	100b883a 	mov	r5,r2
 200dbbc:	e13ffe17 	ldw	r4,-8(fp)
 200dbc0:	200d7580 	call	200d758 <__b2d>
 200dbc4:	1009883a 	mov	r4,r2
 200dbc8:	180b883a 	mov	r5,r3
 200dbcc:	e13ff815 	stw	r4,-32(fp)
 200dbd0:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 200dbd4:	e0bffd04 	addi	r2,fp,-12
 200dbd8:	100b883a 	mov	r5,r2
 200dbdc:	e13fff17 	ldw	r4,-4(fp)
 200dbe0:	200d7580 	call	200d758 <__b2d>
 200dbe4:	1009883a 	mov	r4,r2
 200dbe8:	180b883a 	mov	r5,r3
 200dbec:	e13ffa15 	stw	r4,-24(fp)
 200dbf0:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 200dbf4:	e0fffc17 	ldw	r3,-16(fp)
 200dbf8:	e0bffd17 	ldw	r2,-12(fp)
 200dbfc:	1887c83a 	sub	r3,r3,r2
 200dc00:	e0bffe17 	ldw	r2,-8(fp)
 200dc04:	11000417 	ldw	r4,16(r2)
 200dc08:	e0bfff17 	ldw	r2,-4(fp)
 200dc0c:	10800417 	ldw	r2,16(r2)
 200dc10:	2085c83a 	sub	r2,r4,r2
 200dc14:	1004917a 	slli	r2,r2,5
 200dc18:	1885883a 	add	r2,r3,r2
 200dc1c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 200dc20:	e0bff717 	ldw	r2,-36(fp)
 200dc24:	0080060e 	bge	zero,r2,200dc40 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 200dc28:	e0fff917 	ldw	r3,-28(fp)
 200dc2c:	e0bff717 	ldw	r2,-36(fp)
 200dc30:	1004953a 	slli	r2,r2,20
 200dc34:	1885883a 	add	r2,r3,r2
 200dc38:	e0bff915 	stw	r2,-28(fp)
 200dc3c:	00000806 	br	200dc60 <__ratio+0xc4>
  else
    {
      k = -k;
 200dc40:	e0bff717 	ldw	r2,-36(fp)
 200dc44:	0085c83a 	sub	r2,zero,r2
 200dc48:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 200dc4c:	e0fffb17 	ldw	r3,-20(fp)
 200dc50:	e0bff717 	ldw	r2,-36(fp)
 200dc54:	1004953a 	slli	r2,r2,20
 200dc58:	1885883a 	add	r2,r3,r2
 200dc5c:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 200dc60:	e0bff817 	ldw	r2,-32(fp)
 200dc64:	e0fff917 	ldw	r3,-28(fp)
 200dc68:	e13ffa17 	ldw	r4,-24(fp)
 200dc6c:	e17ffb17 	ldw	r5,-20(fp)
 200dc70:	200d883a 	mov	r6,r4
 200dc74:	280f883a 	mov	r7,r5
 200dc78:	1009883a 	mov	r4,r2
 200dc7c:	180b883a 	mov	r5,r3
 200dc80:	20032ac0 	call	20032ac <__divdf3>
 200dc84:	100f883a 	mov	r7,r2
 200dc88:	1811883a 	mov	r8,r3
 200dc8c:	380b883a 	mov	r5,r7
 200dc90:	400d883a 	mov	r6,r8
 200dc94:	2807883a 	mov	r3,r5
 200dc98:	3009883a 	mov	r4,r6
}
 200dc9c:	1805883a 	mov	r2,r3
 200dca0:	2007883a 	mov	r3,r4
 200dca4:	e037883a 	mov	sp,fp
 200dca8:	dfc00117 	ldw	ra,4(sp)
 200dcac:	df000017 	ldw	fp,0(sp)
 200dcb0:	dec00204 	addi	sp,sp,8
 200dcb4:	f800283a 	ret

0200dcb8 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 200dcb8:	defffb04 	addi	sp,sp,-20
 200dcbc:	dfc00415 	stw	ra,16(sp)
 200dcc0:	df000315 	stw	fp,12(sp)
 200dcc4:	df000304 	addi	fp,sp,12
 200dcc8:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 200dccc:	e03ffd15 	stw	zero,-12(fp)
 200dcd0:	008ffc34 	movhi	r2,16368
 200dcd4:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 200dcd8:	e0bfff17 	ldw	r2,-4(fp)
 200dcdc:	10800608 	cmpgei	r2,r2,24
 200dce0:	1000141e 	bne	r2,zero,200dd34 <_mprec_log10+0x7c>
    return tens[dig];
 200dce4:	008080b4 	movhi	r2,514
 200dce8:	10ba2e04 	addi	r2,r2,-5960
 200dcec:	e0ffff17 	ldw	r3,-4(fp)
 200dcf0:	180690fa 	slli	r3,r3,3
 200dcf4:	10c9883a 	add	r4,r2,r3
 200dcf8:	20800017 	ldw	r2,0(r4)
 200dcfc:	20c00117 	ldw	r3,4(r4)
 200dd00:	00001006 	br	200dd44 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 200dd04:	000d883a 	mov	r6,zero
 200dd08:	01d00934 	movhi	r7,16420
 200dd0c:	e13ffd17 	ldw	r4,-12(fp)
 200dd10:	e17ffe17 	ldw	r5,-8(fp)
 200dd14:	2003d640 	call	2003d64 <__muldf3>
 200dd18:	1009883a 	mov	r4,r2
 200dd1c:	180b883a 	mov	r5,r3
 200dd20:	e13ffd15 	stw	r4,-12(fp)
 200dd24:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 200dd28:	e0bfff17 	ldw	r2,-4(fp)
 200dd2c:	10bfffc4 	addi	r2,r2,-1
 200dd30:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 200dd34:	e0bfff17 	ldw	r2,-4(fp)
 200dd38:	00bff216 	blt	zero,r2,200dd04 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 200dd3c:	e0bffd17 	ldw	r2,-12(fp)
 200dd40:	e0fffe17 	ldw	r3,-8(fp)
 200dd44:	1009883a 	mov	r4,r2
 200dd48:	180b883a 	mov	r5,r3
}
 200dd4c:	2005883a 	mov	r2,r4
 200dd50:	2807883a 	mov	r3,r5
 200dd54:	e037883a 	mov	sp,fp
 200dd58:	dfc00117 	ldw	ra,4(sp)
 200dd5c:	df000017 	ldw	fp,0(sp)
 200dd60:	dec00204 	addi	sp,sp,8
 200dd64:	f800283a 	ret

0200dd68 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 200dd68:	defff904 	addi	sp,sp,-28
 200dd6c:	df000615 	stw	fp,24(sp)
 200dd70:	df000604 	addi	fp,sp,24
 200dd74:	e13ffd15 	stw	r4,-12(fp)
 200dd78:	e17ffe15 	stw	r5,-8(fp)
 200dd7c:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 200dd80:	e0bffe17 	ldw	r2,-8(fp)
 200dd84:	10bfffc4 	addi	r2,r2,-1
 200dd88:	1005d17a 	srai	r2,r2,5
 200dd8c:	10800044 	addi	r2,r2,1
 200dd90:	1085883a 	add	r2,r2,r2
 200dd94:	1085883a 	add	r2,r2,r2
 200dd98:	1007883a 	mov	r3,r2
 200dd9c:	e0bffd17 	ldw	r2,-12(fp)
 200dda0:	10c5883a 	add	r2,r2,r3
 200dda4:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 200dda8:	e0bfff17 	ldw	r2,-4(fp)
 200ddac:	10800504 	addi	r2,r2,20
 200ddb0:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 200ddb4:	e0bfff17 	ldw	r2,-4(fp)
 200ddb8:	10800417 	ldw	r2,16(r2)
 200ddbc:	1085883a 	add	r2,r2,r2
 200ddc0:	1085883a 	add	r2,r2,r2
 200ddc4:	1007883a 	mov	r3,r2
 200ddc8:	e0bffa17 	ldw	r2,-24(fp)
 200ddcc:	10c5883a 	add	r2,r2,r3
 200ddd0:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 200ddd4:	00000806 	br	200ddf8 <__copybits+0x90>
		*c++ = *x++;
 200ddd8:	e0bffd17 	ldw	r2,-12(fp)
 200dddc:	10c00104 	addi	r3,r2,4
 200dde0:	e0fffd15 	stw	r3,-12(fp)
 200dde4:	e0fffa17 	ldw	r3,-24(fp)
 200dde8:	19000104 	addi	r4,r3,4
 200ddec:	e13ffa15 	stw	r4,-24(fp)
 200ddf0:	18c00017 	ldw	r3,0(r3)
 200ddf4:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 200ddf8:	e0fffa17 	ldw	r3,-24(fp)
 200ddfc:	e0bffc17 	ldw	r2,-16(fp)
 200de00:	18bff536 	bltu	r3,r2,200ddd8 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200de04:	00000406 	br	200de18 <__copybits+0xb0>
		*c++ = 0;
 200de08:	e0bffd17 	ldw	r2,-12(fp)
 200de0c:	10c00104 	addi	r3,r2,4
 200de10:	e0fffd15 	stw	r3,-12(fp)
 200de14:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200de18:	e0fffd17 	ldw	r3,-12(fp)
 200de1c:	e0bffb17 	ldw	r2,-20(fp)
 200de20:	18bff936 	bltu	r3,r2,200de08 <__copybits+0xa0>
		*c++ = 0;
}
 200de24:	0001883a 	nop
 200de28:	e037883a 	mov	sp,fp
 200de2c:	df000017 	ldw	fp,0(sp)
 200de30:	dec00104 	addi	sp,sp,4
 200de34:	f800283a 	ret

0200de38 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 200de38:	defff704 	addi	sp,sp,-36
 200de3c:	df000815 	stw	fp,32(sp)
 200de40:	df000804 	addi	fp,sp,32
 200de44:	e13ffe15 	stw	r4,-8(fp)
 200de48:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 200de4c:	e0bffe17 	ldw	r2,-8(fp)
 200de50:	10800504 	addi	r2,r2,20
 200de54:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 200de58:	e0bffe17 	ldw	r2,-8(fp)
 200de5c:	10800417 	ldw	r2,16(r2)
 200de60:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 200de64:	e0bfff17 	ldw	r2,-4(fp)
 200de68:	1005d17a 	srai	r2,r2,5
 200de6c:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 200de70:	e0bff817 	ldw	r2,-32(fp)
 200de74:	e0fffa17 	ldw	r3,-24(fp)
 200de78:	1880030e 	bge	r3,r2,200de88 <__any_on+0x50>
		n = nwds;
 200de7c:	e0bffa17 	ldw	r2,-24(fp)
 200de80:	e0bff815 	stw	r2,-32(fp)
 200de84:	00001f06 	br	200df04 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 200de88:	e0fff817 	ldw	r3,-32(fp)
 200de8c:	e0bffa17 	ldw	r2,-24(fp)
 200de90:	18801c0e 	bge	r3,r2,200df04 <__any_on+0xcc>
 200de94:	e0bfff17 	ldw	r2,-4(fp)
 200de98:	108007cc 	andi	r2,r2,31
 200de9c:	e0bfff15 	stw	r2,-4(fp)
 200dea0:	e0bfff17 	ldw	r2,-4(fp)
 200dea4:	10001726 	beq	r2,zero,200df04 <__any_on+0xcc>
		x1 = x2 = x[n];
 200dea8:	e0bff817 	ldw	r2,-32(fp)
 200deac:	1085883a 	add	r2,r2,r2
 200deb0:	1085883a 	add	r2,r2,r2
 200deb4:	1007883a 	mov	r3,r2
 200deb8:	e0bff917 	ldw	r2,-28(fp)
 200debc:	10c5883a 	add	r2,r2,r3
 200dec0:	10800017 	ldw	r2,0(r2)
 200dec4:	e0bffb15 	stw	r2,-20(fp)
 200dec8:	e0bffb17 	ldw	r2,-20(fp)
 200decc:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 200ded0:	e0fffc17 	ldw	r3,-16(fp)
 200ded4:	e0bfff17 	ldw	r2,-4(fp)
 200ded8:	1884d83a 	srl	r2,r3,r2
 200dedc:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 200dee0:	e0fffc17 	ldw	r3,-16(fp)
 200dee4:	e0bfff17 	ldw	r2,-4(fp)
 200dee8:	1884983a 	sll	r2,r3,r2
 200deec:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 200def0:	e0fffc17 	ldw	r3,-16(fp)
 200def4:	e0bffb17 	ldw	r2,-20(fp)
 200def8:	18800226 	beq	r3,r2,200df04 <__any_on+0xcc>
			return 1;
 200defc:	00800044 	movi	r2,1
 200df00:	00001606 	br	200df5c <__any_on+0x124>
		}
	x0 = x;
 200df04:	e0bff917 	ldw	r2,-28(fp)
 200df08:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 200df0c:	e0bff817 	ldw	r2,-32(fp)
 200df10:	1085883a 	add	r2,r2,r2
 200df14:	1085883a 	add	r2,r2,r2
 200df18:	1007883a 	mov	r3,r2
 200df1c:	e0bff917 	ldw	r2,-28(fp)
 200df20:	10c5883a 	add	r2,r2,r3
 200df24:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 200df28:	00000806 	br	200df4c <__any_on+0x114>
		if (*--x)
 200df2c:	e0bff917 	ldw	r2,-28(fp)
 200df30:	10bfff04 	addi	r2,r2,-4
 200df34:	e0bff915 	stw	r2,-28(fp)
 200df38:	e0bff917 	ldw	r2,-28(fp)
 200df3c:	10800017 	ldw	r2,0(r2)
 200df40:	10000226 	beq	r2,zero,200df4c <__any_on+0x114>
			return 1;
 200df44:	00800044 	movi	r2,1
 200df48:	00000406 	br	200df5c <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 200df4c:	e0bff917 	ldw	r2,-28(fp)
 200df50:	e0fffd17 	ldw	r3,-12(fp)
 200df54:	18bff536 	bltu	r3,r2,200df2c <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 200df58:	0005883a 	mov	r2,zero
}
 200df5c:	e037883a 	mov	sp,fp
 200df60:	df000017 	ldw	fp,0(sp)
 200df64:	dec00104 	addi	sp,sp,4
 200df68:	f800283a 	ret

0200df6c <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 200df6c:	deffe104 	addi	sp,sp,-124
 200df70:	dfc01e15 	stw	ra,120(sp)
 200df74:	df001d15 	stw	fp,116(sp)
 200df78:	df001d04 	addi	fp,sp,116
 200df7c:	e13ffd15 	stw	r4,-12(fp)
 200df80:	e17ffe15 	stw	r5,-8(fp)
 200df84:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 200df88:	e0bffe17 	ldw	r2,-8(fp)
 200df8c:	1000041e 	bne	r2,zero,200dfa0 <_realloc_r+0x34>
 200df90:	e17fff17 	ldw	r5,-4(fp)
 200df94:	e13ffd17 	ldw	r4,-12(fp)
 200df98:	200b5b40 	call	200b5b4 <_malloc_r>
 200df9c:	0002ea06 	br	200eb48 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 200dfa0:	e13ffd17 	ldw	r4,-12(fp)
 200dfa4:	2013a480 	call	2013a48 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 200dfa8:	e0bffe17 	ldw	r2,-8(fp)
 200dfac:	10bffe04 	addi	r2,r2,-8
 200dfb0:	e0bfef15 	stw	r2,-68(fp)
 200dfb4:	e0bfef17 	ldw	r2,-68(fp)
 200dfb8:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 200dfbc:	e0bfef17 	ldw	r2,-68(fp)
 200dfc0:	10c00117 	ldw	r3,4(r2)
 200dfc4:	00bfff04 	movi	r2,-4
 200dfc8:	1884703a 	and	r2,r3,r2
 200dfcc:	e0bff015 	stw	r2,-64(fp)
 200dfd0:	e0bff017 	ldw	r2,-64(fp)
 200dfd4:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 200dfd8:	e0bfff17 	ldw	r2,-4(fp)
 200dfdc:	108002c4 	addi	r2,r2,11
 200dfe0:	108005f0 	cmpltui	r2,r2,23
 200dfe4:	1000051e 	bne	r2,zero,200dffc <_realloc_r+0x90>
 200dfe8:	e0bfff17 	ldw	r2,-4(fp)
 200dfec:	10c002c4 	addi	r3,r2,11
 200dff0:	00bffe04 	movi	r2,-8
 200dff4:	1884703a 	and	r2,r3,r2
 200dff8:	00000106 	br	200e000 <_realloc_r+0x94>
 200dffc:	00800404 	movi	r2,16
 200e000:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200e004:	e0bff117 	ldw	r2,-60(fp)
 200e008:	10000316 	blt	r2,zero,200e018 <_realloc_r+0xac>
 200e00c:	e0fff117 	ldw	r3,-60(fp)
 200e010:	e0bfff17 	ldw	r2,-4(fp)
 200e014:	1880052e 	bgeu	r3,r2,200e02c <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 200e018:	e0bffd17 	ldw	r2,-12(fp)
 200e01c:	00c00304 	movi	r3,12
 200e020:	10c00015 	stw	r3,0(r2)
    return 0;
 200e024:	0005883a 	mov	r2,zero
 200e028:	0002c706 	br	200eb48 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 200e02c:	e0fff017 	ldw	r3,-64(fp)
 200e030:	e0bff117 	ldw	r2,-60(fp)
 200e034:	18828b0e 	bge	r3,r2,200ea64 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 200e038:	e0ffef17 	ldw	r3,-68(fp)
 200e03c:	e0bff017 	ldw	r2,-64(fp)
 200e040:	1885883a 	add	r2,r3,r2
 200e044:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 200e048:	008080b4 	movhi	r2,514
 200e04c:	10bc1904 	addi	r2,r2,-3996
 200e050:	10c00217 	ldw	r3,8(r2)
 200e054:	e0bfe517 	ldw	r2,-108(fp)
 200e058:	18800926 	beq	r3,r2,200e080 <_realloc_r+0x114>
 200e05c:	e0bfe517 	ldw	r2,-108(fp)
 200e060:	10c00117 	ldw	r3,4(r2)
 200e064:	00bfff84 	movi	r2,-2
 200e068:	1884703a 	and	r2,r3,r2
 200e06c:	e0ffe517 	ldw	r3,-108(fp)
 200e070:	1885883a 	add	r2,r3,r2
 200e074:	10800117 	ldw	r2,4(r2)
 200e078:	1080004c 	andi	r2,r2,1
 200e07c:	1000461e 	bne	r2,zero,200e198 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 200e080:	e0bfe517 	ldw	r2,-108(fp)
 200e084:	10c00117 	ldw	r3,4(r2)
 200e088:	00bfff04 	movi	r2,-4
 200e08c:	1884703a 	and	r2,r3,r2
 200e090:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 200e094:	008080b4 	movhi	r2,514
 200e098:	10bc1904 	addi	r2,r2,-3996
 200e09c:	10c00217 	ldw	r3,8(r2)
 200e0a0:	e0bfe517 	ldw	r2,-108(fp)
 200e0a4:	1880251e 	bne	r3,r2,200e13c <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 200e0a8:	e0ffe617 	ldw	r3,-104(fp)
 200e0ac:	e0bfe417 	ldw	r2,-112(fp)
 200e0b0:	1885883a 	add	r2,r3,r2
 200e0b4:	1007883a 	mov	r3,r2
 200e0b8:	e0bff117 	ldw	r2,-60(fp)
 200e0bc:	10800404 	addi	r2,r2,16
 200e0c0:	18803816 	blt	r3,r2,200e1a4 <_realloc_r+0x238>
        {
          newsize += nextsize;
 200e0c4:	e0ffe417 	ldw	r3,-112(fp)
 200e0c8:	e0bfe617 	ldw	r2,-104(fp)
 200e0cc:	1885883a 	add	r2,r3,r2
 200e0d0:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 200e0d4:	008080b4 	movhi	r2,514
 200e0d8:	10bc1904 	addi	r2,r2,-3996
 200e0dc:	e13fef17 	ldw	r4,-68(fp)
 200e0e0:	e0fff117 	ldw	r3,-60(fp)
 200e0e4:	20c7883a 	add	r3,r4,r3
 200e0e8:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 200e0ec:	008080b4 	movhi	r2,514
 200e0f0:	10bc1904 	addi	r2,r2,-3996
 200e0f4:	10800217 	ldw	r2,8(r2)
 200e0f8:	e13fe417 	ldw	r4,-112(fp)
 200e0fc:	e0fff117 	ldw	r3,-60(fp)
 200e100:	20c7c83a 	sub	r3,r4,r3
 200e104:	18c00054 	ori	r3,r3,1
 200e108:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 200e10c:	e0bfef17 	ldw	r2,-68(fp)
 200e110:	10800117 	ldw	r2,4(r2)
 200e114:	10c0004c 	andi	r3,r2,1
 200e118:	e0bff117 	ldw	r2,-60(fp)
 200e11c:	1886b03a 	or	r3,r3,r2
 200e120:	e0bfef17 	ldw	r2,-68(fp)
 200e124:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 200e128:	e13ffd17 	ldw	r4,-12(fp)
 200e12c:	2013b680 	call	2013b68 <__malloc_unlock>
          return chunk2mem(oldp);
 200e130:	e0bfef17 	ldw	r2,-68(fp)
 200e134:	10800204 	addi	r2,r2,8
 200e138:	00028306 	br	200eb48 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 200e13c:	e0ffe617 	ldw	r3,-104(fp)
 200e140:	e0bfe417 	ldw	r2,-112(fp)
 200e144:	1885883a 	add	r2,r3,r2
 200e148:	1007883a 	mov	r3,r2
 200e14c:	e0bff117 	ldw	r2,-60(fp)
 200e150:	18801416 	blt	r3,r2,200e1a4 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 200e154:	e0bfe517 	ldw	r2,-108(fp)
 200e158:	10800317 	ldw	r2,12(r2)
 200e15c:	e0bff215 	stw	r2,-56(fp)
 200e160:	e0bfe517 	ldw	r2,-108(fp)
 200e164:	10800217 	ldw	r2,8(r2)
 200e168:	e0bff315 	stw	r2,-52(fp)
 200e16c:	e0bff317 	ldw	r2,-52(fp)
 200e170:	e0fff217 	ldw	r3,-56(fp)
 200e174:	10c00315 	stw	r3,12(r2)
 200e178:	e0bff217 	ldw	r2,-56(fp)
 200e17c:	e0fff317 	ldw	r3,-52(fp)
 200e180:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 200e184:	e0ffe417 	ldw	r3,-112(fp)
 200e188:	e0bfe617 	ldw	r2,-104(fp)
 200e18c:	1885883a 	add	r2,r3,r2
 200e190:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 200e194:	00023306 	br	200ea64 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 200e198:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 200e19c:	e03fe615 	stw	zero,-104(fp)
 200e1a0:	00000106 	br	200e1a8 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 200e1a4:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 200e1a8:	e0bfef17 	ldw	r2,-68(fp)
 200e1ac:	10800117 	ldw	r2,4(r2)
 200e1b0:	1080004c 	andi	r2,r2,1
 200e1b4:	1001a91e 	bne	r2,zero,200e85c <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 200e1b8:	e0bfef17 	ldw	r2,-68(fp)
 200e1bc:	10800017 	ldw	r2,0(r2)
 200e1c0:	0085c83a 	sub	r2,zero,r2
 200e1c4:	e0ffef17 	ldw	r3,-68(fp)
 200e1c8:	1885883a 	add	r2,r3,r2
 200e1cc:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 200e1d0:	e0bff417 	ldw	r2,-48(fp)
 200e1d4:	10c00117 	ldw	r3,4(r2)
 200e1d8:	00bfff04 	movi	r2,-4
 200e1dc:	1884703a 	and	r2,r3,r2
 200e1e0:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 200e1e4:	e0bfe517 	ldw	r2,-108(fp)
 200e1e8:	10012226 	beq	r2,zero,200e674 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 200e1ec:	008080b4 	movhi	r2,514
 200e1f0:	10bc1904 	addi	r2,r2,-3996
 200e1f4:	10c00217 	ldw	r3,8(r2)
 200e1f8:	e0bfe517 	ldw	r2,-108(fp)
 200e1fc:	1880951e 	bne	r3,r2,200e454 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 200e200:	e0ffe617 	ldw	r3,-104(fp)
 200e204:	e0bff517 	ldw	r2,-44(fp)
 200e208:	1887883a 	add	r3,r3,r2
 200e20c:	e0bfe417 	ldw	r2,-112(fp)
 200e210:	1885883a 	add	r2,r3,r2
 200e214:	1007883a 	mov	r3,r2
 200e218:	e0bff117 	ldw	r2,-60(fp)
 200e21c:	10800404 	addi	r2,r2,16
 200e220:	18811416 	blt	r3,r2,200e674 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 200e224:	e0bff417 	ldw	r2,-48(fp)
 200e228:	10800317 	ldw	r2,12(r2)
 200e22c:	e0bff215 	stw	r2,-56(fp)
 200e230:	e0bff417 	ldw	r2,-48(fp)
 200e234:	10800217 	ldw	r2,8(r2)
 200e238:	e0bff315 	stw	r2,-52(fp)
 200e23c:	e0bff317 	ldw	r2,-52(fp)
 200e240:	e0fff217 	ldw	r3,-56(fp)
 200e244:	10c00315 	stw	r3,12(r2)
 200e248:	e0bff217 	ldw	r2,-56(fp)
 200e24c:	e0fff317 	ldw	r3,-52(fp)
 200e250:	10c00215 	stw	r3,8(r2)
            newp = prev;
 200e254:	e0bff417 	ldw	r2,-48(fp)
 200e258:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 200e25c:	e0fff517 	ldw	r3,-44(fp)
 200e260:	e0bfe617 	ldw	r2,-104(fp)
 200e264:	1885883a 	add	r2,r3,r2
 200e268:	e0ffe417 	ldw	r3,-112(fp)
 200e26c:	1885883a 	add	r2,r3,r2
 200e270:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 200e274:	e0bfe317 	ldw	r2,-116(fp)
 200e278:	10800204 	addi	r2,r2,8
 200e27c:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e280:	e0bff017 	ldw	r2,-64(fp)
 200e284:	10bfff04 	addi	r2,r2,-4
 200e288:	e0bff715 	stw	r2,-36(fp)
 200e28c:	e0bff717 	ldw	r2,-36(fp)
 200e290:	10800968 	cmpgeui	r2,r2,37
 200e294:	1000521e 	bne	r2,zero,200e3e0 <_realloc_r+0x474>
 200e298:	e0bffe17 	ldw	r2,-8(fp)
 200e29c:	e0bfe715 	stw	r2,-100(fp)
 200e2a0:	e0bff617 	ldw	r2,-40(fp)
 200e2a4:	e0bfe815 	stw	r2,-96(fp)
 200e2a8:	e0bff717 	ldw	r2,-36(fp)
 200e2ac:	10800530 	cmpltui	r2,r2,20
 200e2b0:	1000361e 	bne	r2,zero,200e38c <_realloc_r+0x420>
 200e2b4:	e0bfe817 	ldw	r2,-96(fp)
 200e2b8:	10c00104 	addi	r3,r2,4
 200e2bc:	e0ffe815 	stw	r3,-96(fp)
 200e2c0:	e0ffe717 	ldw	r3,-100(fp)
 200e2c4:	19000104 	addi	r4,r3,4
 200e2c8:	e13fe715 	stw	r4,-100(fp)
 200e2cc:	18c00017 	ldw	r3,0(r3)
 200e2d0:	10c00015 	stw	r3,0(r2)
 200e2d4:	e0bfe817 	ldw	r2,-96(fp)
 200e2d8:	10c00104 	addi	r3,r2,4
 200e2dc:	e0ffe815 	stw	r3,-96(fp)
 200e2e0:	e0ffe717 	ldw	r3,-100(fp)
 200e2e4:	19000104 	addi	r4,r3,4
 200e2e8:	e13fe715 	stw	r4,-100(fp)
 200e2ec:	18c00017 	ldw	r3,0(r3)
 200e2f0:	10c00015 	stw	r3,0(r2)
 200e2f4:	e0bff717 	ldw	r2,-36(fp)
 200e2f8:	10800730 	cmpltui	r2,r2,28
 200e2fc:	1000231e 	bne	r2,zero,200e38c <_realloc_r+0x420>
 200e300:	e0bfe817 	ldw	r2,-96(fp)
 200e304:	10c00104 	addi	r3,r2,4
 200e308:	e0ffe815 	stw	r3,-96(fp)
 200e30c:	e0ffe717 	ldw	r3,-100(fp)
 200e310:	19000104 	addi	r4,r3,4
 200e314:	e13fe715 	stw	r4,-100(fp)
 200e318:	18c00017 	ldw	r3,0(r3)
 200e31c:	10c00015 	stw	r3,0(r2)
 200e320:	e0bfe817 	ldw	r2,-96(fp)
 200e324:	10c00104 	addi	r3,r2,4
 200e328:	e0ffe815 	stw	r3,-96(fp)
 200e32c:	e0ffe717 	ldw	r3,-100(fp)
 200e330:	19000104 	addi	r4,r3,4
 200e334:	e13fe715 	stw	r4,-100(fp)
 200e338:	18c00017 	ldw	r3,0(r3)
 200e33c:	10c00015 	stw	r3,0(r2)
 200e340:	e0bff717 	ldw	r2,-36(fp)
 200e344:	10800930 	cmpltui	r2,r2,36
 200e348:	1000101e 	bne	r2,zero,200e38c <_realloc_r+0x420>
 200e34c:	e0bfe817 	ldw	r2,-96(fp)
 200e350:	10c00104 	addi	r3,r2,4
 200e354:	e0ffe815 	stw	r3,-96(fp)
 200e358:	e0ffe717 	ldw	r3,-100(fp)
 200e35c:	19000104 	addi	r4,r3,4
 200e360:	e13fe715 	stw	r4,-100(fp)
 200e364:	18c00017 	ldw	r3,0(r3)
 200e368:	10c00015 	stw	r3,0(r2)
 200e36c:	e0bfe817 	ldw	r2,-96(fp)
 200e370:	10c00104 	addi	r3,r2,4
 200e374:	e0ffe815 	stw	r3,-96(fp)
 200e378:	e0ffe717 	ldw	r3,-100(fp)
 200e37c:	19000104 	addi	r4,r3,4
 200e380:	e13fe715 	stw	r4,-100(fp)
 200e384:	18c00017 	ldw	r3,0(r3)
 200e388:	10c00015 	stw	r3,0(r2)
 200e38c:	e0bfe817 	ldw	r2,-96(fp)
 200e390:	10c00104 	addi	r3,r2,4
 200e394:	e0ffe815 	stw	r3,-96(fp)
 200e398:	e0ffe717 	ldw	r3,-100(fp)
 200e39c:	19000104 	addi	r4,r3,4
 200e3a0:	e13fe715 	stw	r4,-100(fp)
 200e3a4:	18c00017 	ldw	r3,0(r3)
 200e3a8:	10c00015 	stw	r3,0(r2)
 200e3ac:	e0bfe817 	ldw	r2,-96(fp)
 200e3b0:	10c00104 	addi	r3,r2,4
 200e3b4:	e0ffe815 	stw	r3,-96(fp)
 200e3b8:	e0ffe717 	ldw	r3,-100(fp)
 200e3bc:	19000104 	addi	r4,r3,4
 200e3c0:	e13fe715 	stw	r4,-100(fp)
 200e3c4:	18c00017 	ldw	r3,0(r3)
 200e3c8:	10c00015 	stw	r3,0(r2)
 200e3cc:	e0bfe717 	ldw	r2,-100(fp)
 200e3d0:	10c00017 	ldw	r3,0(r2)
 200e3d4:	e0bfe817 	ldw	r2,-96(fp)
 200e3d8:	10c00015 	stw	r3,0(r2)
 200e3dc:	00000406 	br	200e3f0 <_realloc_r+0x484>
 200e3e0:	e1bff717 	ldw	r6,-36(fp)
 200e3e4:	e17ffe17 	ldw	r5,-8(fp)
 200e3e8:	e13ff617 	ldw	r4,-40(fp)
 200e3ec:	200c2ec0 	call	200c2ec <memmove>
            top = chunk_at_offset(newp, nb);
 200e3f0:	008080b4 	movhi	r2,514
 200e3f4:	10bc1904 	addi	r2,r2,-3996
 200e3f8:	e13fe317 	ldw	r4,-116(fp)
 200e3fc:	e0fff117 	ldw	r3,-60(fp)
 200e400:	20c7883a 	add	r3,r4,r3
 200e404:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 200e408:	008080b4 	movhi	r2,514
 200e40c:	10bc1904 	addi	r2,r2,-3996
 200e410:	10800217 	ldw	r2,8(r2)
 200e414:	e13fe417 	ldw	r4,-112(fp)
 200e418:	e0fff117 	ldw	r3,-60(fp)
 200e41c:	20c7c83a 	sub	r3,r4,r3
 200e420:	18c00054 	ori	r3,r3,1
 200e424:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 200e428:	e0bfe317 	ldw	r2,-116(fp)
 200e42c:	10800117 	ldw	r2,4(r2)
 200e430:	10c0004c 	andi	r3,r2,1
 200e434:	e0bff117 	ldw	r2,-60(fp)
 200e438:	1886b03a 	or	r3,r3,r2
 200e43c:	e0bfe317 	ldw	r2,-116(fp)
 200e440:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 200e444:	e13ffd17 	ldw	r4,-12(fp)
 200e448:	2013b680 	call	2013b68 <__malloc_unlock>
            return newmem;
 200e44c:	e0bff617 	ldw	r2,-40(fp)
 200e450:	0001bd06 	br	200eb48 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 200e454:	e0ffe617 	ldw	r3,-104(fp)
 200e458:	e0bff517 	ldw	r2,-44(fp)
 200e45c:	1887883a 	add	r3,r3,r2
 200e460:	e0bfe417 	ldw	r2,-112(fp)
 200e464:	1885883a 	add	r2,r3,r2
 200e468:	1007883a 	mov	r3,r2
 200e46c:	e0bff117 	ldw	r2,-60(fp)
 200e470:	18808016 	blt	r3,r2,200e674 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 200e474:	e0bfe517 	ldw	r2,-108(fp)
 200e478:	10800317 	ldw	r2,12(r2)
 200e47c:	e0bff215 	stw	r2,-56(fp)
 200e480:	e0bfe517 	ldw	r2,-108(fp)
 200e484:	10800217 	ldw	r2,8(r2)
 200e488:	e0bff315 	stw	r2,-52(fp)
 200e48c:	e0bff317 	ldw	r2,-52(fp)
 200e490:	e0fff217 	ldw	r3,-56(fp)
 200e494:	10c00315 	stw	r3,12(r2)
 200e498:	e0bff217 	ldw	r2,-56(fp)
 200e49c:	e0fff317 	ldw	r3,-52(fp)
 200e4a0:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 200e4a4:	e0bff417 	ldw	r2,-48(fp)
 200e4a8:	10800317 	ldw	r2,12(r2)
 200e4ac:	e0bff215 	stw	r2,-56(fp)
 200e4b0:	e0bff417 	ldw	r2,-48(fp)
 200e4b4:	10800217 	ldw	r2,8(r2)
 200e4b8:	e0bff315 	stw	r2,-52(fp)
 200e4bc:	e0bff317 	ldw	r2,-52(fp)
 200e4c0:	e0fff217 	ldw	r3,-56(fp)
 200e4c4:	10c00315 	stw	r3,12(r2)
 200e4c8:	e0bff217 	ldw	r2,-56(fp)
 200e4cc:	e0fff317 	ldw	r3,-52(fp)
 200e4d0:	10c00215 	stw	r3,8(r2)
          newp = prev;
 200e4d4:	e0bff417 	ldw	r2,-48(fp)
 200e4d8:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 200e4dc:	e0ffe617 	ldw	r3,-104(fp)
 200e4e0:	e0bff517 	ldw	r2,-44(fp)
 200e4e4:	1885883a 	add	r2,r3,r2
 200e4e8:	e0ffe417 	ldw	r3,-112(fp)
 200e4ec:	1885883a 	add	r2,r3,r2
 200e4f0:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 200e4f4:	e0bfe317 	ldw	r2,-116(fp)
 200e4f8:	10800204 	addi	r2,r2,8
 200e4fc:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e500:	e0bff017 	ldw	r2,-64(fp)
 200e504:	10bfff04 	addi	r2,r2,-4
 200e508:	e0bff815 	stw	r2,-32(fp)
 200e50c:	e0bff817 	ldw	r2,-32(fp)
 200e510:	10800968 	cmpgeui	r2,r2,37
 200e514:	1000521e 	bne	r2,zero,200e660 <_realloc_r+0x6f4>
 200e518:	e0bffe17 	ldw	r2,-8(fp)
 200e51c:	e0bfe915 	stw	r2,-92(fp)
 200e520:	e0bff617 	ldw	r2,-40(fp)
 200e524:	e0bfea15 	stw	r2,-88(fp)
 200e528:	e0bff817 	ldw	r2,-32(fp)
 200e52c:	10800530 	cmpltui	r2,r2,20
 200e530:	1000361e 	bne	r2,zero,200e60c <_realloc_r+0x6a0>
 200e534:	e0bfea17 	ldw	r2,-88(fp)
 200e538:	10c00104 	addi	r3,r2,4
 200e53c:	e0ffea15 	stw	r3,-88(fp)
 200e540:	e0ffe917 	ldw	r3,-92(fp)
 200e544:	19000104 	addi	r4,r3,4
 200e548:	e13fe915 	stw	r4,-92(fp)
 200e54c:	18c00017 	ldw	r3,0(r3)
 200e550:	10c00015 	stw	r3,0(r2)
 200e554:	e0bfea17 	ldw	r2,-88(fp)
 200e558:	10c00104 	addi	r3,r2,4
 200e55c:	e0ffea15 	stw	r3,-88(fp)
 200e560:	e0ffe917 	ldw	r3,-92(fp)
 200e564:	19000104 	addi	r4,r3,4
 200e568:	e13fe915 	stw	r4,-92(fp)
 200e56c:	18c00017 	ldw	r3,0(r3)
 200e570:	10c00015 	stw	r3,0(r2)
 200e574:	e0bff817 	ldw	r2,-32(fp)
 200e578:	10800730 	cmpltui	r2,r2,28
 200e57c:	1000231e 	bne	r2,zero,200e60c <_realloc_r+0x6a0>
 200e580:	e0bfea17 	ldw	r2,-88(fp)
 200e584:	10c00104 	addi	r3,r2,4
 200e588:	e0ffea15 	stw	r3,-88(fp)
 200e58c:	e0ffe917 	ldw	r3,-92(fp)
 200e590:	19000104 	addi	r4,r3,4
 200e594:	e13fe915 	stw	r4,-92(fp)
 200e598:	18c00017 	ldw	r3,0(r3)
 200e59c:	10c00015 	stw	r3,0(r2)
 200e5a0:	e0bfea17 	ldw	r2,-88(fp)
 200e5a4:	10c00104 	addi	r3,r2,4
 200e5a8:	e0ffea15 	stw	r3,-88(fp)
 200e5ac:	e0ffe917 	ldw	r3,-92(fp)
 200e5b0:	19000104 	addi	r4,r3,4
 200e5b4:	e13fe915 	stw	r4,-92(fp)
 200e5b8:	18c00017 	ldw	r3,0(r3)
 200e5bc:	10c00015 	stw	r3,0(r2)
 200e5c0:	e0bff817 	ldw	r2,-32(fp)
 200e5c4:	10800930 	cmpltui	r2,r2,36
 200e5c8:	1000101e 	bne	r2,zero,200e60c <_realloc_r+0x6a0>
 200e5cc:	e0bfea17 	ldw	r2,-88(fp)
 200e5d0:	10c00104 	addi	r3,r2,4
 200e5d4:	e0ffea15 	stw	r3,-88(fp)
 200e5d8:	e0ffe917 	ldw	r3,-92(fp)
 200e5dc:	19000104 	addi	r4,r3,4
 200e5e0:	e13fe915 	stw	r4,-92(fp)
 200e5e4:	18c00017 	ldw	r3,0(r3)
 200e5e8:	10c00015 	stw	r3,0(r2)
 200e5ec:	e0bfea17 	ldw	r2,-88(fp)
 200e5f0:	10c00104 	addi	r3,r2,4
 200e5f4:	e0ffea15 	stw	r3,-88(fp)
 200e5f8:	e0ffe917 	ldw	r3,-92(fp)
 200e5fc:	19000104 	addi	r4,r3,4
 200e600:	e13fe915 	stw	r4,-92(fp)
 200e604:	18c00017 	ldw	r3,0(r3)
 200e608:	10c00015 	stw	r3,0(r2)
 200e60c:	e0bfea17 	ldw	r2,-88(fp)
 200e610:	10c00104 	addi	r3,r2,4
 200e614:	e0ffea15 	stw	r3,-88(fp)
 200e618:	e0ffe917 	ldw	r3,-92(fp)
 200e61c:	19000104 	addi	r4,r3,4
 200e620:	e13fe915 	stw	r4,-92(fp)
 200e624:	18c00017 	ldw	r3,0(r3)
 200e628:	10c00015 	stw	r3,0(r2)
 200e62c:	e0bfea17 	ldw	r2,-88(fp)
 200e630:	10c00104 	addi	r3,r2,4
 200e634:	e0ffea15 	stw	r3,-88(fp)
 200e638:	e0ffe917 	ldw	r3,-92(fp)
 200e63c:	19000104 	addi	r4,r3,4
 200e640:	e13fe915 	stw	r4,-92(fp)
 200e644:	18c00017 	ldw	r3,0(r3)
 200e648:	10c00015 	stw	r3,0(r2)
 200e64c:	e0bfe917 	ldw	r2,-92(fp)
 200e650:	10c00017 	ldw	r3,0(r2)
 200e654:	e0bfea17 	ldw	r2,-88(fp)
 200e658:	10c00015 	stw	r3,0(r2)
          goto split;
 200e65c:	00010106 	br	200ea64 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e660:	e1bff817 	ldw	r6,-32(fp)
 200e664:	e17ffe17 	ldw	r5,-8(fp)
 200e668:	e13ff617 	ldw	r4,-40(fp)
 200e66c:	200c2ec0 	call	200c2ec <memmove>
          goto split;
 200e670:	0000fc06 	br	200ea64 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 200e674:	e0bff417 	ldw	r2,-48(fp)
 200e678:	10007826 	beq	r2,zero,200e85c <_realloc_r+0x8f0>
 200e67c:	e0fff517 	ldw	r3,-44(fp)
 200e680:	e0bfe417 	ldw	r2,-112(fp)
 200e684:	1885883a 	add	r2,r3,r2
 200e688:	1007883a 	mov	r3,r2
 200e68c:	e0bff117 	ldw	r2,-60(fp)
 200e690:	18807216 	blt	r3,r2,200e85c <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 200e694:	e0bff417 	ldw	r2,-48(fp)
 200e698:	10800317 	ldw	r2,12(r2)
 200e69c:	e0bff215 	stw	r2,-56(fp)
 200e6a0:	e0bff417 	ldw	r2,-48(fp)
 200e6a4:	10800217 	ldw	r2,8(r2)
 200e6a8:	e0bff315 	stw	r2,-52(fp)
 200e6ac:	e0bff317 	ldw	r2,-52(fp)
 200e6b0:	e0fff217 	ldw	r3,-56(fp)
 200e6b4:	10c00315 	stw	r3,12(r2)
 200e6b8:	e0bff217 	ldw	r2,-56(fp)
 200e6bc:	e0fff317 	ldw	r3,-52(fp)
 200e6c0:	10c00215 	stw	r3,8(r2)
        newp = prev;
 200e6c4:	e0bff417 	ldw	r2,-48(fp)
 200e6c8:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 200e6cc:	e0ffe417 	ldw	r3,-112(fp)
 200e6d0:	e0bff517 	ldw	r2,-44(fp)
 200e6d4:	1885883a 	add	r2,r3,r2
 200e6d8:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 200e6dc:	e0bfe317 	ldw	r2,-116(fp)
 200e6e0:	10800204 	addi	r2,r2,8
 200e6e4:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e6e8:	e0bff017 	ldw	r2,-64(fp)
 200e6ec:	10bfff04 	addi	r2,r2,-4
 200e6f0:	e0bff915 	stw	r2,-28(fp)
 200e6f4:	e0bff917 	ldw	r2,-28(fp)
 200e6f8:	10800968 	cmpgeui	r2,r2,37
 200e6fc:	1000521e 	bne	r2,zero,200e848 <_realloc_r+0x8dc>
 200e700:	e0bffe17 	ldw	r2,-8(fp)
 200e704:	e0bfeb15 	stw	r2,-84(fp)
 200e708:	e0bff617 	ldw	r2,-40(fp)
 200e70c:	e0bfec15 	stw	r2,-80(fp)
 200e710:	e0bff917 	ldw	r2,-28(fp)
 200e714:	10800530 	cmpltui	r2,r2,20
 200e718:	1000361e 	bne	r2,zero,200e7f4 <_realloc_r+0x888>
 200e71c:	e0bfec17 	ldw	r2,-80(fp)
 200e720:	10c00104 	addi	r3,r2,4
 200e724:	e0ffec15 	stw	r3,-80(fp)
 200e728:	e0ffeb17 	ldw	r3,-84(fp)
 200e72c:	19000104 	addi	r4,r3,4
 200e730:	e13feb15 	stw	r4,-84(fp)
 200e734:	18c00017 	ldw	r3,0(r3)
 200e738:	10c00015 	stw	r3,0(r2)
 200e73c:	e0bfec17 	ldw	r2,-80(fp)
 200e740:	10c00104 	addi	r3,r2,4
 200e744:	e0ffec15 	stw	r3,-80(fp)
 200e748:	e0ffeb17 	ldw	r3,-84(fp)
 200e74c:	19000104 	addi	r4,r3,4
 200e750:	e13feb15 	stw	r4,-84(fp)
 200e754:	18c00017 	ldw	r3,0(r3)
 200e758:	10c00015 	stw	r3,0(r2)
 200e75c:	e0bff917 	ldw	r2,-28(fp)
 200e760:	10800730 	cmpltui	r2,r2,28
 200e764:	1000231e 	bne	r2,zero,200e7f4 <_realloc_r+0x888>
 200e768:	e0bfec17 	ldw	r2,-80(fp)
 200e76c:	10c00104 	addi	r3,r2,4
 200e770:	e0ffec15 	stw	r3,-80(fp)
 200e774:	e0ffeb17 	ldw	r3,-84(fp)
 200e778:	19000104 	addi	r4,r3,4
 200e77c:	e13feb15 	stw	r4,-84(fp)
 200e780:	18c00017 	ldw	r3,0(r3)
 200e784:	10c00015 	stw	r3,0(r2)
 200e788:	e0bfec17 	ldw	r2,-80(fp)
 200e78c:	10c00104 	addi	r3,r2,4
 200e790:	e0ffec15 	stw	r3,-80(fp)
 200e794:	e0ffeb17 	ldw	r3,-84(fp)
 200e798:	19000104 	addi	r4,r3,4
 200e79c:	e13feb15 	stw	r4,-84(fp)
 200e7a0:	18c00017 	ldw	r3,0(r3)
 200e7a4:	10c00015 	stw	r3,0(r2)
 200e7a8:	e0bff917 	ldw	r2,-28(fp)
 200e7ac:	10800930 	cmpltui	r2,r2,36
 200e7b0:	1000101e 	bne	r2,zero,200e7f4 <_realloc_r+0x888>
 200e7b4:	e0bfec17 	ldw	r2,-80(fp)
 200e7b8:	10c00104 	addi	r3,r2,4
 200e7bc:	e0ffec15 	stw	r3,-80(fp)
 200e7c0:	e0ffeb17 	ldw	r3,-84(fp)
 200e7c4:	19000104 	addi	r4,r3,4
 200e7c8:	e13feb15 	stw	r4,-84(fp)
 200e7cc:	18c00017 	ldw	r3,0(r3)
 200e7d0:	10c00015 	stw	r3,0(r2)
 200e7d4:	e0bfec17 	ldw	r2,-80(fp)
 200e7d8:	10c00104 	addi	r3,r2,4
 200e7dc:	e0ffec15 	stw	r3,-80(fp)
 200e7e0:	e0ffeb17 	ldw	r3,-84(fp)
 200e7e4:	19000104 	addi	r4,r3,4
 200e7e8:	e13feb15 	stw	r4,-84(fp)
 200e7ec:	18c00017 	ldw	r3,0(r3)
 200e7f0:	10c00015 	stw	r3,0(r2)
 200e7f4:	e0bfec17 	ldw	r2,-80(fp)
 200e7f8:	10c00104 	addi	r3,r2,4
 200e7fc:	e0ffec15 	stw	r3,-80(fp)
 200e800:	e0ffeb17 	ldw	r3,-84(fp)
 200e804:	19000104 	addi	r4,r3,4
 200e808:	e13feb15 	stw	r4,-84(fp)
 200e80c:	18c00017 	ldw	r3,0(r3)
 200e810:	10c00015 	stw	r3,0(r2)
 200e814:	e0bfec17 	ldw	r2,-80(fp)
 200e818:	10c00104 	addi	r3,r2,4
 200e81c:	e0ffec15 	stw	r3,-80(fp)
 200e820:	e0ffeb17 	ldw	r3,-84(fp)
 200e824:	19000104 	addi	r4,r3,4
 200e828:	e13feb15 	stw	r4,-84(fp)
 200e82c:	18c00017 	ldw	r3,0(r3)
 200e830:	10c00015 	stw	r3,0(r2)
 200e834:	e0bfeb17 	ldw	r2,-84(fp)
 200e838:	10c00017 	ldw	r3,0(r2)
 200e83c:	e0bfec17 	ldw	r2,-80(fp)
 200e840:	10c00015 	stw	r3,0(r2)
        goto split;
 200e844:	00008706 	br	200ea64 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e848:	e1bff917 	ldw	r6,-28(fp)
 200e84c:	e17ffe17 	ldw	r5,-8(fp)
 200e850:	e13ff617 	ldw	r4,-40(fp)
 200e854:	200c2ec0 	call	200c2ec <memmove>
        goto split;
 200e858:	00008206 	br	200ea64 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 200e85c:	e17fff17 	ldw	r5,-4(fp)
 200e860:	e13ffd17 	ldw	r4,-12(fp)
 200e864:	200b5b40 	call	200b5b4 <_malloc_r>
 200e868:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 200e86c:	e0bff617 	ldw	r2,-40(fp)
 200e870:	1000041e 	bne	r2,zero,200e884 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 200e874:	e13ffd17 	ldw	r4,-12(fp)
 200e878:	2013b680 	call	2013b68 <__malloc_unlock>
      return 0;
 200e87c:	0005883a 	mov	r2,zero
 200e880:	0000b106 	br	200eb48 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 200e884:	e0bff617 	ldw	r2,-40(fp)
 200e888:	10bffe04 	addi	r2,r2,-8
 200e88c:	e0bfe315 	stw	r2,-116(fp)
 200e890:	e0bfef17 	ldw	r2,-68(fp)
 200e894:	10c00117 	ldw	r3,4(r2)
 200e898:	00bfff84 	movi	r2,-2
 200e89c:	1884703a 	and	r2,r3,r2
 200e8a0:	e0ffef17 	ldw	r3,-68(fp)
 200e8a4:	1885883a 	add	r2,r3,r2
 200e8a8:	e0ffe317 	ldw	r3,-116(fp)
 200e8ac:	18800a1e 	bne	r3,r2,200e8d8 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 200e8b0:	e0bfe317 	ldw	r2,-116(fp)
 200e8b4:	10c00117 	ldw	r3,4(r2)
 200e8b8:	00bfff04 	movi	r2,-4
 200e8bc:	1884703a 	and	r2,r3,r2
 200e8c0:	e0ffe417 	ldw	r3,-112(fp)
 200e8c4:	1885883a 	add	r2,r3,r2
 200e8c8:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 200e8cc:	e0bfef17 	ldw	r2,-68(fp)
 200e8d0:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 200e8d4:	00006306 	br	200ea64 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e8d8:	e0bff017 	ldw	r2,-64(fp)
 200e8dc:	10bfff04 	addi	r2,r2,-4
 200e8e0:	e0bffa15 	stw	r2,-24(fp)
 200e8e4:	e0bffa17 	ldw	r2,-24(fp)
 200e8e8:	10800968 	cmpgeui	r2,r2,37
 200e8ec:	1000521e 	bne	r2,zero,200ea38 <_realloc_r+0xacc>
 200e8f0:	e0bffe17 	ldw	r2,-8(fp)
 200e8f4:	e0bfed15 	stw	r2,-76(fp)
 200e8f8:	e0bff617 	ldw	r2,-40(fp)
 200e8fc:	e0bfee15 	stw	r2,-72(fp)
 200e900:	e0bffa17 	ldw	r2,-24(fp)
 200e904:	10800530 	cmpltui	r2,r2,20
 200e908:	1000361e 	bne	r2,zero,200e9e4 <_realloc_r+0xa78>
 200e90c:	e0bfee17 	ldw	r2,-72(fp)
 200e910:	10c00104 	addi	r3,r2,4
 200e914:	e0ffee15 	stw	r3,-72(fp)
 200e918:	e0ffed17 	ldw	r3,-76(fp)
 200e91c:	19000104 	addi	r4,r3,4
 200e920:	e13fed15 	stw	r4,-76(fp)
 200e924:	18c00017 	ldw	r3,0(r3)
 200e928:	10c00015 	stw	r3,0(r2)
 200e92c:	e0bfee17 	ldw	r2,-72(fp)
 200e930:	10c00104 	addi	r3,r2,4
 200e934:	e0ffee15 	stw	r3,-72(fp)
 200e938:	e0ffed17 	ldw	r3,-76(fp)
 200e93c:	19000104 	addi	r4,r3,4
 200e940:	e13fed15 	stw	r4,-76(fp)
 200e944:	18c00017 	ldw	r3,0(r3)
 200e948:	10c00015 	stw	r3,0(r2)
 200e94c:	e0bffa17 	ldw	r2,-24(fp)
 200e950:	10800730 	cmpltui	r2,r2,28
 200e954:	1000231e 	bne	r2,zero,200e9e4 <_realloc_r+0xa78>
 200e958:	e0bfee17 	ldw	r2,-72(fp)
 200e95c:	10c00104 	addi	r3,r2,4
 200e960:	e0ffee15 	stw	r3,-72(fp)
 200e964:	e0ffed17 	ldw	r3,-76(fp)
 200e968:	19000104 	addi	r4,r3,4
 200e96c:	e13fed15 	stw	r4,-76(fp)
 200e970:	18c00017 	ldw	r3,0(r3)
 200e974:	10c00015 	stw	r3,0(r2)
 200e978:	e0bfee17 	ldw	r2,-72(fp)
 200e97c:	10c00104 	addi	r3,r2,4
 200e980:	e0ffee15 	stw	r3,-72(fp)
 200e984:	e0ffed17 	ldw	r3,-76(fp)
 200e988:	19000104 	addi	r4,r3,4
 200e98c:	e13fed15 	stw	r4,-76(fp)
 200e990:	18c00017 	ldw	r3,0(r3)
 200e994:	10c00015 	stw	r3,0(r2)
 200e998:	e0bffa17 	ldw	r2,-24(fp)
 200e99c:	10800930 	cmpltui	r2,r2,36
 200e9a0:	1000101e 	bne	r2,zero,200e9e4 <_realloc_r+0xa78>
 200e9a4:	e0bfee17 	ldw	r2,-72(fp)
 200e9a8:	10c00104 	addi	r3,r2,4
 200e9ac:	e0ffee15 	stw	r3,-72(fp)
 200e9b0:	e0ffed17 	ldw	r3,-76(fp)
 200e9b4:	19000104 	addi	r4,r3,4
 200e9b8:	e13fed15 	stw	r4,-76(fp)
 200e9bc:	18c00017 	ldw	r3,0(r3)
 200e9c0:	10c00015 	stw	r3,0(r2)
 200e9c4:	e0bfee17 	ldw	r2,-72(fp)
 200e9c8:	10c00104 	addi	r3,r2,4
 200e9cc:	e0ffee15 	stw	r3,-72(fp)
 200e9d0:	e0ffed17 	ldw	r3,-76(fp)
 200e9d4:	19000104 	addi	r4,r3,4
 200e9d8:	e13fed15 	stw	r4,-76(fp)
 200e9dc:	18c00017 	ldw	r3,0(r3)
 200e9e0:	10c00015 	stw	r3,0(r2)
 200e9e4:	e0bfee17 	ldw	r2,-72(fp)
 200e9e8:	10c00104 	addi	r3,r2,4
 200e9ec:	e0ffee15 	stw	r3,-72(fp)
 200e9f0:	e0ffed17 	ldw	r3,-76(fp)
 200e9f4:	19000104 	addi	r4,r3,4
 200e9f8:	e13fed15 	stw	r4,-76(fp)
 200e9fc:	18c00017 	ldw	r3,0(r3)
 200ea00:	10c00015 	stw	r3,0(r2)
 200ea04:	e0bfee17 	ldw	r2,-72(fp)
 200ea08:	10c00104 	addi	r3,r2,4
 200ea0c:	e0ffee15 	stw	r3,-72(fp)
 200ea10:	e0ffed17 	ldw	r3,-76(fp)
 200ea14:	19000104 	addi	r4,r3,4
 200ea18:	e13fed15 	stw	r4,-76(fp)
 200ea1c:	18c00017 	ldw	r3,0(r3)
 200ea20:	10c00015 	stw	r3,0(r2)
 200ea24:	e0bfed17 	ldw	r2,-76(fp)
 200ea28:	10c00017 	ldw	r3,0(r2)
 200ea2c:	e0bfee17 	ldw	r2,-72(fp)
 200ea30:	10c00015 	stw	r3,0(r2)
 200ea34:	00000406 	br	200ea48 <_realloc_r+0xadc>
 200ea38:	e1bffa17 	ldw	r6,-24(fp)
 200ea3c:	e17ffe17 	ldw	r5,-8(fp)
 200ea40:	e13ff617 	ldw	r4,-40(fp)
 200ea44:	200c2ec0 	call	200c2ec <memmove>
    fREe(RCALL oldmem);
 200ea48:	e17ffe17 	ldw	r5,-8(fp)
 200ea4c:	e13ffd17 	ldw	r4,-12(fp)
 200ea50:	2009f740 	call	2009f74 <_free_r>
    MALLOC_UNLOCK;
 200ea54:	e13ffd17 	ldw	r4,-12(fp)
 200ea58:	2013b680 	call	2013b68 <__malloc_unlock>
    return newmem;
 200ea5c:	e0bff617 	ldw	r2,-40(fp)
 200ea60:	00003906 	br	200eb48 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 200ea64:	e0ffe417 	ldw	r3,-112(fp)
 200ea68:	e0bff117 	ldw	r2,-60(fp)
 200ea6c:	1885c83a 	sub	r2,r3,r2
 200ea70:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 200ea74:	e0bffb17 	ldw	r2,-20(fp)
 200ea78:	10800430 	cmpltui	r2,r2,16
 200ea7c:	10001e1e 	bne	r2,zero,200eaf8 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 200ea80:	e0ffe317 	ldw	r3,-116(fp)
 200ea84:	e0bff117 	ldw	r2,-60(fp)
 200ea88:	1885883a 	add	r2,r3,r2
 200ea8c:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 200ea90:	e0bfe317 	ldw	r2,-116(fp)
 200ea94:	10800117 	ldw	r2,4(r2)
 200ea98:	10c0004c 	andi	r3,r2,1
 200ea9c:	e0bff117 	ldw	r2,-60(fp)
 200eaa0:	1886b03a 	or	r3,r3,r2
 200eaa4:	e0bfe317 	ldw	r2,-116(fp)
 200eaa8:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 200eaac:	e0bffb17 	ldw	r2,-20(fp)
 200eab0:	10c00054 	ori	r3,r2,1
 200eab4:	e0bffc17 	ldw	r2,-16(fp)
 200eab8:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 200eabc:	e0fffc17 	ldw	r3,-16(fp)
 200eac0:	e0bffb17 	ldw	r2,-20(fp)
 200eac4:	1885883a 	add	r2,r3,r2
 200eac8:	e13ffc17 	ldw	r4,-16(fp)
 200eacc:	e0fffb17 	ldw	r3,-20(fp)
 200ead0:	20c7883a 	add	r3,r4,r3
 200ead4:	18c00117 	ldw	r3,4(r3)
 200ead8:	18c00054 	ori	r3,r3,1
 200eadc:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 200eae0:	e0bffc17 	ldw	r2,-16(fp)
 200eae4:	10800204 	addi	r2,r2,8
 200eae8:	100b883a 	mov	r5,r2
 200eaec:	e13ffd17 	ldw	r4,-12(fp)
 200eaf0:	2009f740 	call	2009f74 <_free_r>
 200eaf4:	00001006 	br	200eb38 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 200eaf8:	e0bfe317 	ldw	r2,-116(fp)
 200eafc:	10800117 	ldw	r2,4(r2)
 200eb00:	10c0004c 	andi	r3,r2,1
 200eb04:	e0bfe417 	ldw	r2,-112(fp)
 200eb08:	1886b03a 	or	r3,r3,r2
 200eb0c:	e0bfe317 	ldw	r2,-116(fp)
 200eb10:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 200eb14:	e0ffe317 	ldw	r3,-116(fp)
 200eb18:	e0bfe417 	ldw	r2,-112(fp)
 200eb1c:	1885883a 	add	r2,r3,r2
 200eb20:	e13fe317 	ldw	r4,-116(fp)
 200eb24:	e0ffe417 	ldw	r3,-112(fp)
 200eb28:	20c7883a 	add	r3,r4,r3
 200eb2c:	18c00117 	ldw	r3,4(r3)
 200eb30:	18c00054 	ori	r3,r3,1
 200eb34:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 200eb38:	e13ffd17 	ldw	r4,-12(fp)
 200eb3c:	2013b680 	call	2013b68 <__malloc_unlock>
  return chunk2mem(newp);
 200eb40:	e0bfe317 	ldw	r2,-116(fp)
 200eb44:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200eb48:	e037883a 	mov	sp,fp
 200eb4c:	dfc00117 	ldw	ra,4(sp)
 200eb50:	df000017 	ldw	fp,0(sp)
 200eb54:	dec00204 	addi	sp,sp,8
 200eb58:	f800283a 	ret

0200eb5c <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 200eb5c:	defffb04 	addi	sp,sp,-20
 200eb60:	dfc00415 	stw	ra,16(sp)
 200eb64:	df000315 	stw	fp,12(sp)
 200eb68:	df000304 	addi	fp,sp,12
 200eb6c:	e13ffe15 	stw	r4,-8(fp)
 200eb70:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 200eb74:	d0272915 	stw	zero,-25436(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 200eb78:	e13fff17 	ldw	r4,-4(fp)
 200eb7c:	20137400 	call	2013740 <sbrk>
 200eb80:	e0bffd15 	stw	r2,-12(fp)
 200eb84:	e0bffd17 	ldw	r2,-12(fp)
 200eb88:	10bfffd8 	cmpnei	r2,r2,-1
 200eb8c:	1000051e 	bne	r2,zero,200eba4 <_sbrk_r+0x48>
 200eb90:	d0a72917 	ldw	r2,-25436(gp)
 200eb94:	10000326 	beq	r2,zero,200eba4 <_sbrk_r+0x48>
    ptr->_errno = errno;
 200eb98:	d0e72917 	ldw	r3,-25436(gp)
 200eb9c:	e0bffe17 	ldw	r2,-8(fp)
 200eba0:	10c00015 	stw	r3,0(r2)
  return ret;
 200eba4:	e0bffd17 	ldw	r2,-12(fp)
}
 200eba8:	e037883a 	mov	sp,fp
 200ebac:	dfc00117 	ldw	ra,4(sp)
 200ebb0:	df000017 	ldw	fp,0(sp)
 200ebb4:	dec00204 	addi	sp,sp,8
 200ebb8:	f800283a 	ret

0200ebbc <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ebbc:	defff804 	addi	sp,sp,-32
 200ebc0:	dfc00715 	stw	ra,28(sp)
 200ebc4:	df000615 	stw	fp,24(sp)
 200ebc8:	dc400515 	stw	r17,20(sp)
 200ebcc:	dc000415 	stw	r16,16(sp)
 200ebd0:	df000604 	addi	fp,sp,24
 200ebd4:	e13ffa15 	stw	r4,-24(fp)
 200ebd8:	e17ffb15 	stw	r5,-20(fp)
 200ebdc:	e1bffc15 	stw	r6,-16(fp)
 200ebe0:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200ebe4:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 200ebe8:	8080038b 	ldhu	r2,14(r16)
 200ebec:	10bfffcc 	andi	r2,r2,65535
 200ebf0:	10a0001c 	xori	r2,r2,32768
 200ebf4:	10a00004 	addi	r2,r2,-32768
 200ebf8:	e0fffd17 	ldw	r3,-12(fp)
 200ebfc:	180f883a 	mov	r7,r3
 200ec00:	e1bffc17 	ldw	r6,-16(fp)
 200ec04:	100b883a 	mov	r5,r2
 200ec08:	e13ffa17 	ldw	r4,-24(fp)
 200ec0c:	2010c640 	call	2010c64 <_read_r>
 200ec10:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 200ec14:	88000416 	blt	r17,zero,200ec28 <__sread+0x6c>
    fp->_offset += ret;
 200ec18:	80801417 	ldw	r2,80(r16)
 200ec1c:	1445883a 	add	r2,r2,r17
 200ec20:	80801415 	stw	r2,80(r16)
 200ec24:	00000406 	br	200ec38 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 200ec28:	80c0030b 	ldhu	r3,12(r16)
 200ec2c:	00bbffc4 	movi	r2,-4097
 200ec30:	1884703a 	and	r2,r3,r2
 200ec34:	8080030d 	sth	r2,12(r16)
  return ret;
 200ec38:	8805883a 	mov	r2,r17
}
 200ec3c:	e6fffe04 	addi	sp,fp,-8
 200ec40:	dfc00317 	ldw	ra,12(sp)
 200ec44:	df000217 	ldw	fp,8(sp)
 200ec48:	dc400117 	ldw	r17,4(sp)
 200ec4c:	dc000017 	ldw	r16,0(sp)
 200ec50:	dec00404 	addi	sp,sp,16
 200ec54:	f800283a 	ret

0200ec58 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 200ec58:	defffb04 	addi	sp,sp,-20
 200ec5c:	df000415 	stw	fp,16(sp)
 200ec60:	df000404 	addi	fp,sp,16
 200ec64:	e13ffc15 	stw	r4,-16(fp)
 200ec68:	e17ffd15 	stw	r5,-12(fp)
 200ec6c:	e1bffe15 	stw	r6,-8(fp)
 200ec70:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 200ec74:	0005883a 	mov	r2,zero
}
 200ec78:	e037883a 	mov	sp,fp
 200ec7c:	df000017 	ldw	fp,0(sp)
 200ec80:	dec00104 	addi	sp,sp,4
 200ec84:	f800283a 	ret

0200ec88 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ec88:	defff804 	addi	sp,sp,-32
 200ec8c:	dfc00715 	stw	ra,28(sp)
 200ec90:	df000615 	stw	fp,24(sp)
 200ec94:	dc000515 	stw	r16,20(sp)
 200ec98:	df000604 	addi	fp,sp,24
 200ec9c:	e13ffb15 	stw	r4,-20(fp)
 200eca0:	e17ffc15 	stw	r5,-16(fp)
 200eca4:	e1bffd15 	stw	r6,-12(fp)
 200eca8:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 200ecac:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 200ecb0:	8080030b 	ldhu	r2,12(r16)
 200ecb4:	10bfffcc 	andi	r2,r2,65535
 200ecb8:	1080400c 	andi	r2,r2,256
 200ecbc:	10000926 	beq	r2,zero,200ece4 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 200ecc0:	8080038b 	ldhu	r2,14(r16)
 200ecc4:	10bfffcc 	andi	r2,r2,65535
 200ecc8:	10a0001c 	xori	r2,r2,32768
 200eccc:	10a00004 	addi	r2,r2,-32768
 200ecd0:	01c00084 	movi	r7,2
 200ecd4:	000d883a 	mov	r6,zero
 200ecd8:	100b883a 	mov	r5,r2
 200ecdc:	e13ffb17 	ldw	r4,-20(fp)
 200ece0:	2010bf40 	call	2010bf4 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 200ece4:	80c0030b 	ldhu	r3,12(r16)
 200ece8:	00bbffc4 	movi	r2,-4097
 200ecec:	1884703a 	and	r2,r3,r2
 200ecf0:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 200ecf4:	8080038b 	ldhu	r2,14(r16)
 200ecf8:	10bfffcc 	andi	r2,r2,65535
 200ecfc:	10a0001c 	xori	r2,r2,32768
 200ed00:	10a00004 	addi	r2,r2,-32768
 200ed04:	e0fffe17 	ldw	r3,-8(fp)
 200ed08:	180f883a 	mov	r7,r3
 200ed0c:	e1bffd17 	ldw	r6,-12(fp)
 200ed10:	100b883a 	mov	r5,r2
 200ed14:	e13ffb17 	ldw	r4,-20(fp)
 200ed18:	20104b00 	call	20104b0 <_write_r>
 200ed1c:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 200ed20:	e0bffa17 	ldw	r2,-24(fp)
}
 200ed24:	e6ffff04 	addi	sp,fp,-4
 200ed28:	dfc00217 	ldw	ra,8(sp)
 200ed2c:	df000117 	ldw	fp,4(sp)
 200ed30:	dc000017 	ldw	r16,0(sp)
 200ed34:	dec00304 	addi	sp,sp,12
 200ed38:	f800283a 	ret

0200ed3c <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 200ed3c:	defff804 	addi	sp,sp,-32
 200ed40:	dfc00715 	stw	ra,28(sp)
 200ed44:	df000615 	stw	fp,24(sp)
 200ed48:	dc400515 	stw	r17,20(sp)
 200ed4c:	dc000415 	stw	r16,16(sp)
 200ed50:	df000604 	addi	fp,sp,24
 200ed54:	e13ffa15 	stw	r4,-24(fp)
 200ed58:	e17ffb15 	stw	r5,-20(fp)
 200ed5c:	e1bffc15 	stw	r6,-16(fp)
 200ed60:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200ed64:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 200ed68:	8080038b 	ldhu	r2,14(r16)
 200ed6c:	10bfffcc 	andi	r2,r2,65535
 200ed70:	10a0001c 	xori	r2,r2,32768
 200ed74:	10a00004 	addi	r2,r2,-32768
 200ed78:	e1fffd17 	ldw	r7,-12(fp)
 200ed7c:	e1bffc17 	ldw	r6,-16(fp)
 200ed80:	100b883a 	mov	r5,r2
 200ed84:	e13ffa17 	ldw	r4,-24(fp)
 200ed88:	2010bf40 	call	2010bf4 <_lseek_r>
 200ed8c:	1023883a 	mov	r17,r2
  if (ret == -1L)
 200ed90:	88bfffd8 	cmpnei	r2,r17,-1
 200ed94:	1000051e 	bne	r2,zero,200edac <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 200ed98:	80c0030b 	ldhu	r3,12(r16)
 200ed9c:	00bbffc4 	movi	r2,-4097
 200eda0:	1884703a 	and	r2,r3,r2
 200eda4:	8080030d 	sth	r2,12(r16)
 200eda8:	00000406 	br	200edbc <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 200edac:	8080030b 	ldhu	r2,12(r16)
 200edb0:	10840014 	ori	r2,r2,4096
 200edb4:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 200edb8:	84401415 	stw	r17,80(r16)
    }
  return ret;
 200edbc:	8805883a 	mov	r2,r17
}
 200edc0:	e6fffe04 	addi	sp,fp,-8
 200edc4:	dfc00317 	ldw	ra,12(sp)
 200edc8:	df000217 	ldw	fp,8(sp)
 200edcc:	dc400117 	ldw	r17,4(sp)
 200edd0:	dc000017 	ldw	r16,0(sp)
 200edd4:	dec00404 	addi	sp,sp,16
 200edd8:	f800283a 	ret

0200eddc <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 200eddc:	defffb04 	addi	sp,sp,-20
 200ede0:	dfc00415 	stw	ra,16(sp)
 200ede4:	df000315 	stw	fp,12(sp)
 200ede8:	df000304 	addi	fp,sp,12
 200edec:	e13ffe15 	stw	r4,-8(fp)
 200edf0:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 200edf4:	e0bfff17 	ldw	r2,-4(fp)
 200edf8:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 200edfc:	e0bffd17 	ldw	r2,-12(fp)
 200ee00:	1080038b 	ldhu	r2,14(r2)
 200ee04:	10bfffcc 	andi	r2,r2,65535
 200ee08:	10a0001c 	xori	r2,r2,32768
 200ee0c:	10a00004 	addi	r2,r2,-32768
 200ee10:	100b883a 	mov	r5,r2
 200ee14:	e13ffe17 	ldw	r4,-8(fp)
 200ee18:	20105200 	call	2010520 <_close_r>
}
 200ee1c:	e037883a 	mov	sp,fp
 200ee20:	dfc00117 	ldw	ra,4(sp)
 200ee24:	df000017 	ldw	fp,0(sp)
 200ee28:	dec00204 	addi	sp,sp,8
 200ee2c:	f800283a 	ret

0200ee30 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 200ee30:	defffb04 	addi	sp,sp,-20
 200ee34:	df000415 	stw	fp,16(sp)
 200ee38:	df000404 	addi	fp,sp,16
 200ee3c:	e13ffe15 	stw	r4,-8(fp)
 200ee40:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 200ee44:	e0fffe17 	ldw	r3,-8(fp)
 200ee48:	e0bfff17 	ldw	r2,-4(fp)
 200ee4c:	1884b03a 	or	r2,r3,r2
 200ee50:	108000cc 	andi	r2,r2,3
 200ee54:	10002a1e 	bne	r2,zero,200ef00 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 200ee58:	e0bffe17 	ldw	r2,-8(fp)
 200ee5c:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 200ee60:	e0bfff17 	ldw	r2,-4(fp)
 200ee64:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 200ee68:	00001506 	br	200eec0 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 200ee6c:	e0bffc17 	ldw	r2,-16(fp)
 200ee70:	10c00017 	ldw	r3,0(r2)
 200ee74:	00bfbff4 	movhi	r2,65279
 200ee78:	10bfbfc4 	addi	r2,r2,-257
 200ee7c:	1887883a 	add	r3,r3,r2
 200ee80:	e0bffc17 	ldw	r2,-16(fp)
 200ee84:	10800017 	ldw	r2,0(r2)
 200ee88:	0084303a 	nor	r2,zero,r2
 200ee8c:	1886703a 	and	r3,r3,r2
 200ee90:	00a02074 	movhi	r2,32897
 200ee94:	10a02004 	addi	r2,r2,-32640
 200ee98:	1884703a 	and	r2,r3,r2
 200ee9c:	10000226 	beq	r2,zero,200eea8 <strcmp+0x78>
	    return 0;
 200eea0:	0005883a 	mov	r2,zero
 200eea4:	00002e06 	br	200ef60 <strcmp+0x130>

          a1++;
 200eea8:	e0bffc17 	ldw	r2,-16(fp)
 200eeac:	10800104 	addi	r2,r2,4
 200eeb0:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 200eeb4:	e0bffd17 	ldw	r2,-12(fp)
 200eeb8:	10800104 	addi	r2,r2,4
 200eebc:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 200eec0:	e0bffc17 	ldw	r2,-16(fp)
 200eec4:	10c00017 	ldw	r3,0(r2)
 200eec8:	e0bffd17 	ldw	r2,-12(fp)
 200eecc:	10800017 	ldw	r2,0(r2)
 200eed0:	18bfe626 	beq	r3,r2,200ee6c <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 200eed4:	e0bffc17 	ldw	r2,-16(fp)
 200eed8:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 200eedc:	e0bffd17 	ldw	r2,-12(fp)
 200eee0:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 200eee4:	00000606 	br	200ef00 <strcmp+0xd0>
    {
      s1++;
 200eee8:	e0bffe17 	ldw	r2,-8(fp)
 200eeec:	10800044 	addi	r2,r2,1
 200eef0:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 200eef4:	e0bfff17 	ldw	r2,-4(fp)
 200eef8:	10800044 	addi	r2,r2,1
 200eefc:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 200ef00:	e0bffe17 	ldw	r2,-8(fp)
 200ef04:	10800003 	ldbu	r2,0(r2)
 200ef08:	10803fcc 	andi	r2,r2,255
 200ef0c:	1080201c 	xori	r2,r2,128
 200ef10:	10bfe004 	addi	r2,r2,-128
 200ef14:	10000b26 	beq	r2,zero,200ef44 <strcmp+0x114>
 200ef18:	e0bffe17 	ldw	r2,-8(fp)
 200ef1c:	10c00003 	ldbu	r3,0(r2)
 200ef20:	e0bfff17 	ldw	r2,-4(fp)
 200ef24:	10800003 	ldbu	r2,0(r2)
 200ef28:	18c03fcc 	andi	r3,r3,255
 200ef2c:	18c0201c 	xori	r3,r3,128
 200ef30:	18ffe004 	addi	r3,r3,-128
 200ef34:	10803fcc 	andi	r2,r2,255
 200ef38:	1080201c 	xori	r2,r2,128
 200ef3c:	10bfe004 	addi	r2,r2,-128
 200ef40:	18bfe926 	beq	r3,r2,200eee8 <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 200ef44:	e0bffe17 	ldw	r2,-8(fp)
 200ef48:	10800003 	ldbu	r2,0(r2)
 200ef4c:	10c03fcc 	andi	r3,r2,255
 200ef50:	e0bfff17 	ldw	r2,-4(fp)
 200ef54:	10800003 	ldbu	r2,0(r2)
 200ef58:	10803fcc 	andi	r2,r2,255
 200ef5c:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200ef60:	e037883a 	mov	sp,fp
 200ef64:	df000017 	ldw	fp,0(sp)
 200ef68:	dec00104 	addi	sp,sp,4
 200ef6c:	f800283a 	ret

0200ef70 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 200ef70:	defff604 	addi	sp,sp,-40
 200ef74:	dfc00915 	stw	ra,36(sp)
 200ef78:	df000815 	stw	fp,32(sp)
 200ef7c:	dc400715 	stw	r17,28(sp)
 200ef80:	dc000615 	stw	r16,24(sp)
 200ef84:	df000804 	addi	fp,sp,32
 200ef88:	e13ffc15 	stw	r4,-16(fp)
 200ef8c:	e17ffd15 	stw	r5,-12(fp)
 200ef90:	3021883a 	mov	r16,r6
	register int err = 0;
 200ef94:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 200ef98:	80800217 	ldw	r2,8(r16)
 200ef9c:	1000031e 	bne	r2,zero,200efac <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 200efa0:	80000115 	stw	zero,4(r16)
		return (0);
 200efa4:	0005883a 	mov	r2,zero
 200efa8:	00003906 	br	200f090 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 200efac:	e0bffd17 	ldw	r2,-12(fp)
 200efb0:	10801917 	ldw	r2,100(r2)
 200efb4:	1088000c 	andi	r2,r2,8192
 200efb8:	10002d26 	beq	r2,zero,200f070 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 200efbc:	80800017 	ldw	r2,0(r16)
 200efc0:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 200efc4:	00002706 	br	200f064 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 200efc8:	e0bff817 	ldw	r2,-32(fp)
 200efcc:	10800017 	ldw	r2,0(r2)
 200efd0:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 200efd4:	e0bff817 	ldw	r2,-32(fp)
 200efd8:	10800117 	ldw	r2,4(r2)
 200efdc:	1004d0ba 	srli	r2,r2,2
 200efe0:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 200efe4:	e03ff915 	stw	zero,-28(fp)
 200efe8:	00001206 	br	200f034 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 200efec:	e0bff917 	ldw	r2,-28(fp)
 200eff0:	1085883a 	add	r2,r2,r2
 200eff4:	1085883a 	add	r2,r2,r2
 200eff8:	1007883a 	mov	r3,r2
 200effc:	e0bffa17 	ldw	r2,-24(fp)
 200f000:	10c5883a 	add	r2,r2,r3
 200f004:	10800017 	ldw	r2,0(r2)
 200f008:	e1bffd17 	ldw	r6,-12(fp)
 200f00c:	100b883a 	mov	r5,r2
 200f010:	e13ffc17 	ldw	r4,-16(fp)
 200f014:	2010a3c0 	call	2010a3c <_fputwc_r>
 200f018:	10bfffd8 	cmpnei	r2,r2,-1
 200f01c:	1000021e 	bne	r2,zero,200f028 <__sprint_r+0xb8>
					err = -1;
 200f020:	047fffc4 	movi	r17,-1
					goto out;
 200f024:	00001706 	br	200f084 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 200f028:	e0bff917 	ldw	r2,-28(fp)
 200f02c:	10800044 	addi	r2,r2,1
 200f030:	e0bff915 	stw	r2,-28(fp)
 200f034:	e0fff917 	ldw	r3,-28(fp)
 200f038:	e0bffb17 	ldw	r2,-20(fp)
 200f03c:	18bfeb16 	blt	r3,r2,200efec <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 200f040:	80c00217 	ldw	r3,8(r16)
 200f044:	e0bffb17 	ldw	r2,-20(fp)
 200f048:	1085883a 	add	r2,r2,r2
 200f04c:	1085883a 	add	r2,r2,r2
 200f050:	1885c83a 	sub	r2,r3,r2
 200f054:	80800215 	stw	r2,8(r16)
 200f058:	e0bff817 	ldw	r2,-32(fp)
 200f05c:	10800204 	addi	r2,r2,8
 200f060:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 200f064:	80800217 	ldw	r2,8(r16)
 200f068:	103fd71e 	bne	r2,zero,200efc8 <__sprint_r+0x58>
 200f06c:	00000506 	br	200f084 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 200f070:	800d883a 	mov	r6,r16
 200f074:	e17ffd17 	ldw	r5,-12(fp)
 200f078:	e13ffc17 	ldw	r4,-16(fp)
 200f07c:	200a6a00 	call	200a6a0 <__sfvwrite_r>
 200f080:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 200f084:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 200f088:	80000115 	stw	zero,4(r16)
	return (err);
 200f08c:	8805883a 	mov	r2,r17
}
 200f090:	e6fffe04 	addi	sp,fp,-8
 200f094:	dfc00317 	ldw	ra,12(sp)
 200f098:	df000217 	ldw	fp,8(sp)
 200f09c:	dc400117 	ldw	r17,4(sp)
 200f0a0:	dc000017 	ldw	r16,0(sp)
 200f0a4:	dec00404 	addi	sp,sp,16
 200f0a8:	f800283a 	ret

0200f0ac <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200f0ac:	defedf04 	addi	sp,sp,-1156
 200f0b0:	dfc12015 	stw	ra,1152(sp)
 200f0b4:	df011f15 	stw	fp,1148(sp)
 200f0b8:	dc011e15 	stw	r16,1144(sp)
 200f0bc:	df011f04 	addi	fp,sp,1148
 200f0c0:	e13ffc15 	stw	r4,-16(fp)
 200f0c4:	2821883a 	mov	r16,r5
 200f0c8:	e1bffd15 	stw	r6,-12(fp)
 200f0cc:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200f0d0:	80c0030b 	ldhu	r3,12(r16)
 200f0d4:	00bfff44 	movi	r2,-3
 200f0d8:	1884703a 	and	r2,r3,r2
 200f0dc:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200f0e0:	80801917 	ldw	r2,100(r16)
 200f0e4:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200f0e8:	8080038b 	ldhu	r2,14(r16)
 200f0ec:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200f0f0:	80800717 	ldw	r2,28(r16)
 200f0f4:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200f0f8:	80800917 	ldw	r2,36(r16)
 200f0fc:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200f100:	e0befc04 	addi	r2,fp,-1040
 200f104:	e0bee215 	stw	r2,-1144(fp)
 200f108:	e0bee217 	ldw	r2,-1144(fp)
 200f10c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200f110:	00810004 	movi	r2,1024
 200f114:	e0bee415 	stw	r2,-1136(fp)
 200f118:	e0bee417 	ldw	r2,-1136(fp)
 200f11c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200f120:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200f124:	e0bee204 	addi	r2,fp,-1144
 200f128:	e1fffe17 	ldw	r7,-8(fp)
 200f12c:	e1bffd17 	ldw	r6,-12(fp)
 200f130:	100b883a 	mov	r5,r2
 200f134:	e13ffc17 	ldw	r4,-16(fp)
 200f138:	200f1ec0 	call	200f1ec <___vfiprintf_internal_r>
 200f13c:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200f140:	e0bee117 	ldw	r2,-1148(fp)
 200f144:	10000716 	blt	r2,zero,200f164 <__sbprintf+0xb8>
 200f148:	e0bee204 	addi	r2,fp,-1144
 200f14c:	100b883a 	mov	r5,r2
 200f150:	e13ffc17 	ldw	r4,-16(fp)
 200f154:	20098d40 	call	20098d4 <_fflush_r>
 200f158:	10000226 	beq	r2,zero,200f164 <__sbprintf+0xb8>
		ret = EOF;
 200f15c:	00bfffc4 	movi	r2,-1
 200f160:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200f164:	e0bee50b 	ldhu	r2,-1132(fp)
 200f168:	10bfffcc 	andi	r2,r2,65535
 200f16c:	1080100c 	andi	r2,r2,64
 200f170:	10000326 	beq	r2,zero,200f180 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200f174:	8080030b 	ldhu	r2,12(r16)
 200f178:	10801014 	ori	r2,r2,64
 200f17c:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200f180:	e0bee117 	ldw	r2,-1148(fp)
}
 200f184:	e6ffff04 	addi	sp,fp,-4
 200f188:	dfc00217 	ldw	ra,8(sp)
 200f18c:	df000117 	ldw	fp,4(sp)
 200f190:	dc000017 	ldw	r16,0(sp)
 200f194:	dec00304 	addi	sp,sp,12
 200f198:	f800283a 	ret

0200f19c <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200f19c:	defffa04 	addi	sp,sp,-24
 200f1a0:	dfc00515 	stw	ra,20(sp)
 200f1a4:	df000415 	stw	fp,16(sp)
 200f1a8:	df000404 	addi	fp,sp,16
 200f1ac:	e13ffd15 	stw	r4,-12(fp)
 200f1b0:	e17ffe15 	stw	r5,-8(fp)
 200f1b4:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200f1b8:	d0a00017 	ldw	r2,-32768(gp)
 200f1bc:	e1ffff17 	ldw	r7,-4(fp)
 200f1c0:	e1bffe17 	ldw	r6,-8(fp)
 200f1c4:	e17ffd17 	ldw	r5,-12(fp)
 200f1c8:	1009883a 	mov	r4,r2
 200f1cc:	200f1ec0 	call	200f1ec <___vfiprintf_internal_r>
 200f1d0:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200f1d4:	e0bffc17 	ldw	r2,-16(fp)
}
 200f1d8:	e037883a 	mov	sp,fp
 200f1dc:	dfc00117 	ldw	ra,4(sp)
 200f1e0:	df000017 	ldw	fp,0(sp)
 200f1e4:	dec00204 	addi	sp,sp,8
 200f1e8:	f800283a 	ret

0200f1ec <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200f1ec:	deffb704 	addi	sp,sp,-292
 200f1f0:	dfc04815 	stw	ra,288(sp)
 200f1f4:	df004715 	stw	fp,284(sp)
 200f1f8:	ddc04615 	stw	r23,280(sp)
 200f1fc:	dd804515 	stw	r22,276(sp)
 200f200:	dd404415 	stw	r21,272(sp)
 200f204:	dd004315 	stw	r20,268(sp)
 200f208:	dcc04215 	stw	r19,264(sp)
 200f20c:	dc804115 	stw	r18,260(sp)
 200f210:	dc404015 	stw	r17,256(sp)
 200f214:	dc003f15 	stw	r16,252(sp)
 200f218:	df004704 	addi	fp,sp,284
 200f21c:	e13fe615 	stw	r4,-104(fp)
 200f220:	e17fe715 	stw	r5,-100(fp)
 200f224:	e1bfe815 	stw	r6,-96(fp)
 200f228:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200f22c:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200f230:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200f234:	e0bfe617 	ldw	r2,-104(fp)
 200f238:	e0bfc415 	stw	r2,-240(fp)
 200f23c:	e0bfc417 	ldw	r2,-240(fp)
 200f240:	10000526 	beq	r2,zero,200f258 <___vfiprintf_internal_r+0x6c>
 200f244:	e0bfc417 	ldw	r2,-240(fp)
 200f248:	10800e17 	ldw	r2,56(r2)
 200f24c:	1000021e 	bne	r2,zero,200f258 <___vfiprintf_internal_r+0x6c>
 200f250:	e13fc417 	ldw	r4,-240(fp)
 200f254:	2009d540 	call	2009d54 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200f258:	e0bfe717 	ldw	r2,-100(fp)
 200f25c:	1080030b 	ldhu	r2,12(r2)
 200f260:	10bfffcc 	andi	r2,r2,65535
 200f264:	1088000c 	andi	r2,r2,8192
 200f268:	10000c1e 	bne	r2,zero,200f29c <___vfiprintf_internal_r+0xb0>
 200f26c:	e0bfe717 	ldw	r2,-100(fp)
 200f270:	1080030b 	ldhu	r2,12(r2)
 200f274:	10880014 	ori	r2,r2,8192
 200f278:	1007883a 	mov	r3,r2
 200f27c:	e0bfe717 	ldw	r2,-100(fp)
 200f280:	10c0030d 	sth	r3,12(r2)
 200f284:	e0bfe717 	ldw	r2,-100(fp)
 200f288:	10c01917 	ldw	r3,100(r2)
 200f28c:	00b7ffc4 	movi	r2,-8193
 200f290:	1886703a 	and	r3,r3,r2
 200f294:	e0bfe717 	ldw	r2,-100(fp)
 200f298:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200f29c:	e0bfe717 	ldw	r2,-100(fp)
 200f2a0:	1080030b 	ldhu	r2,12(r2)
 200f2a4:	10bfffcc 	andi	r2,r2,65535
 200f2a8:	1080020c 	andi	r2,r2,8
 200f2ac:	10000326 	beq	r2,zero,200f2bc <___vfiprintf_internal_r+0xd0>
 200f2b0:	e0bfe717 	ldw	r2,-100(fp)
 200f2b4:	10800417 	ldw	r2,16(r2)
 200f2b8:	1000061e 	bne	r2,zero,200f2d4 <___vfiprintf_internal_r+0xe8>
 200f2bc:	e17fe717 	ldw	r5,-100(fp)
 200f2c0:	e13fe617 	ldw	r4,-104(fp)
 200f2c4:	20075040 	call	2007504 <__swsetup_r>
 200f2c8:	10000226 	beq	r2,zero,200f2d4 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200f2cc:	00bfffc4 	movi	r2,-1
 200f2d0:	00046a06 	br	201047c <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f2d4:	e0bfe717 	ldw	r2,-100(fp)
 200f2d8:	1080030b 	ldhu	r2,12(r2)
 200f2dc:	10bfffcc 	andi	r2,r2,65535
 200f2e0:	1080068c 	andi	r2,r2,26
 200f2e4:	10800298 	cmpnei	r2,r2,10
 200f2e8:	10000c1e 	bne	r2,zero,200f31c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 200f2ec:	e0bfe717 	ldw	r2,-100(fp)
 200f2f0:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f2f4:	10bfffcc 	andi	r2,r2,65535
 200f2f8:	10a0001c 	xori	r2,r2,32768
 200f2fc:	10a00004 	addi	r2,r2,-32768
 200f300:	10000616 	blt	r2,zero,200f31c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200f304:	e1ffe917 	ldw	r7,-92(fp)
 200f308:	e1bfe817 	ldw	r6,-96(fp)
 200f30c:	e17fe717 	ldw	r5,-100(fp)
 200f310:	e13fe617 	ldw	r4,-104(fp)
 200f314:	200f0ac0 	call	200f0ac <__sbprintf>
 200f318:	00045806 	br	201047c <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200f31c:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200f320:	e4bfcb04 	addi	r18,fp,-212
 200f324:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 200f328:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200f32c:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200f330:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200f334:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f338:	00000106 	br	200f340 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 200f33c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f340:	a8800003 	ldbu	r2,0(r21)
 200f344:	10803fcc 	andi	r2,r2,255
 200f348:	1080201c 	xori	r2,r2,128
 200f34c:	10bfe004 	addi	r2,r2,-128
 200f350:	10000626 	beq	r2,zero,200f36c <___vfiprintf_internal_r+0x180>
 200f354:	a8800003 	ldbu	r2,0(r21)
 200f358:	10803fcc 	andi	r2,r2,255
 200f35c:	1080201c 	xori	r2,r2,128
 200f360:	10bfe004 	addi	r2,r2,-128
 200f364:	10800958 	cmpnei	r2,r2,37
 200f368:	103ff41e 	bne	r2,zero,200f33c <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200f36c:	a807883a 	mov	r3,r21
 200f370:	a005883a 	mov	r2,r20
 200f374:	18a1c83a 	sub	r16,r3,r2
 200f378:	80001826 	beq	r16,zero,200f3dc <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 200f37c:	95000015 	stw	r20,0(r18)
 200f380:	8005883a 	mov	r2,r16
 200f384:	90800115 	stw	r2,4(r18)
 200f388:	e0bfca17 	ldw	r2,-216(fp)
 200f38c:	8007883a 	mov	r3,r16
 200f390:	10c5883a 	add	r2,r2,r3
 200f394:	e0bfca15 	stw	r2,-216(fp)
 200f398:	94800204 	addi	r18,r18,8
 200f39c:	e0bfc917 	ldw	r2,-220(fp)
 200f3a0:	10800044 	addi	r2,r2,1
 200f3a4:	e0bfc915 	stw	r2,-220(fp)
 200f3a8:	e0bfc917 	ldw	r2,-220(fp)
 200f3ac:	10800210 	cmplti	r2,r2,8
 200f3b0:	1000071e 	bne	r2,zero,200f3d0 <___vfiprintf_internal_r+0x1e4>
 200f3b4:	e0bfc804 	addi	r2,fp,-224
 200f3b8:	100d883a 	mov	r6,r2
 200f3bc:	e17fe717 	ldw	r5,-100(fp)
 200f3c0:	e13fe617 	ldw	r4,-104(fp)
 200f3c4:	200ef700 	call	200ef70 <__sprint_r>
 200f3c8:	1004031e 	bne	r2,zero,20103d8 <___vfiprintf_internal_r+0x11ec>
 200f3cc:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 200f3d0:	e0bfb917 	ldw	r2,-284(fp)
 200f3d4:	1405883a 	add	r2,r2,r16
 200f3d8:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200f3dc:	a8800003 	ldbu	r2,0(r21)
 200f3e0:	10803fcc 	andi	r2,r2,255
 200f3e4:	1080201c 	xori	r2,r2,128
 200f3e8:	10bfe004 	addi	r2,r2,-128
 200f3ec:	1003ec26 	beq	r2,zero,20103a0 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 200f3f0:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 200f3f4:	ad400044 	addi	r21,r21,1

		flags = 0;
 200f3f8:	0027883a 	mov	r19,zero
		dprec = 0;
 200f3fc:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 200f400:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 200f404:	00bfffc4 	movi	r2,-1
 200f408:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 200f40c:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200f410:	a805883a 	mov	r2,r21
 200f414:	15400044 	addi	r21,r2,1
 200f418:	10800003 	ldbu	r2,0(r2)
 200f41c:	14403fcc 	andi	r17,r2,255
 200f420:	8c40201c 	xori	r17,r17,128
 200f424:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 200f428:	88bff804 	addi	r2,r17,-32
 200f42c:	10c01668 	cmpgeui	r3,r2,89
 200f430:	1802881e 	bne	r3,zero,200fe54 <___vfiprintf_internal_r+0xc68>
 200f434:	100690ba 	slli	r3,r2,2
 200f438:	00808074 	movhi	r2,513
 200f43c:	10bd1304 	addi	r2,r2,-2996
 200f440:	1885883a 	add	r2,r3,r2
 200f444:	10800017 	ldw	r2,0(r2)
 200f448:	1000683a 	jmp	r2
 200f44c:	0200f5b0 	cmpltui	r8,zero,982
 200f450:	0200fe54 	movui	r8,1017
 200f454:	0200fe54 	movui	r8,1017
 200f458:	0200f5d0 	cmplti	r8,zero,983
 200f45c:	0200fe54 	movui	r8,1017
 200f460:	0200fe54 	movui	r8,1017
 200f464:	0200fe54 	movui	r8,1017
 200f468:	0200fe54 	movui	r8,1017
 200f46c:	0200fe54 	movui	r8,1017
 200f470:	0200fe54 	movui	r8,1017
 200f474:	0200f5d8 	cmpnei	r8,zero,983
 200f478:	0200f60c 	andi	r8,zero,984
 200f47c:	0200fe54 	movui	r8,1017
 200f480:	0200f604 	movi	r8,984
 200f484:	0200f618 	cmpnei	r8,zero,984
 200f488:	0200fe54 	movui	r8,1017
 200f48c:	0200f6ac 	andhi	r8,zero,986
 200f490:	0200f6b4 	movhi	r8,986
 200f494:	0200f6b4 	movhi	r8,986
 200f498:	0200f6b4 	movhi	r8,986
 200f49c:	0200f6b4 	movhi	r8,986
 200f4a0:	0200f6b4 	movhi	r8,986
 200f4a4:	0200f6b4 	movhi	r8,986
 200f4a8:	0200f6b4 	movhi	r8,986
 200f4ac:	0200f6b4 	movhi	r8,986
 200f4b0:	0200f6b4 	movhi	r8,986
 200f4b4:	0200fe54 	movui	r8,1017
 200f4b8:	0200fe54 	movui	r8,1017
 200f4bc:	0200fe54 	movui	r8,1017
 200f4c0:	0200fe54 	movui	r8,1017
 200f4c4:	0200fe54 	movui	r8,1017
 200f4c8:	0200fe54 	movui	r8,1017
 200f4cc:	0200fe54 	movui	r8,1017
 200f4d0:	0200fe54 	movui	r8,1017
 200f4d4:	0200fe54 	movui	r8,1017
 200f4d8:	0200fe54 	movui	r8,1017
 200f4dc:	0200f754 	movui	r8,989
 200f4e0:	0200fe54 	movui	r8,1017
 200f4e4:	0200fe54 	movui	r8,1017
 200f4e8:	0200fe54 	movui	r8,1017
 200f4ec:	0200fe54 	movui	r8,1017
 200f4f0:	0200fe54 	movui	r8,1017
 200f4f4:	0200fe54 	movui	r8,1017
 200f4f8:	0200fe54 	movui	r8,1017
 200f4fc:	0200fe54 	movui	r8,1017
 200f500:	0200fe54 	movui	r8,1017
 200f504:	0200fe54 	movui	r8,1017
 200f508:	0200f8f4 	movhi	r8,995
 200f50c:	0200fe54 	movui	r8,1017
 200f510:	0200fe54 	movui	r8,1017
 200f514:	0200fe54 	movui	r8,1017
 200f518:	0200fe54 	movui	r8,1017
 200f51c:	0200fe54 	movui	r8,1017
 200f520:	0200fa70 	cmpltui	r8,zero,1001
 200f524:	0200fe54 	movui	r8,1017
 200f528:	0200fe54 	movui	r8,1017
 200f52c:	0200fb30 	cmpltui	r8,zero,1004
 200f530:	0200fe54 	movui	r8,1017
 200f534:	0200fe54 	movui	r8,1017
 200f538:	0200fe54 	movui	r8,1017
 200f53c:	0200fe54 	movui	r8,1017
 200f540:	0200fe54 	movui	r8,1017
 200f544:	0200fe54 	movui	r8,1017
 200f548:	0200fe54 	movui	r8,1017
 200f54c:	0200fe54 	movui	r8,1017
 200f550:	0200fe54 	movui	r8,1017
 200f554:	0200fe54 	movui	r8,1017
 200f558:	0200f72c 	andhi	r8,zero,988
 200f55c:	0200f758 	cmpnei	r8,zero,989
 200f560:	0200fe54 	movui	r8,1017
 200f564:	0200fe54 	movui	r8,1017
 200f568:	0200fe54 	movui	r8,1017
 200f56c:	0200f6f0 	cmpltui	r8,zero,987
 200f570:	0200f758 	cmpnei	r8,zero,989
 200f574:	0200fe54 	movui	r8,1017
 200f578:	0200fe54 	movui	r8,1017
 200f57c:	0200f6f8 	rdprs	r8,zero,987
 200f580:	0200fe54 	movui	r8,1017
 200f584:	0200f854 	movui	r8,993
 200f588:	0200f8f8 	rdprs	r8,zero,995
 200f58c:	0200f998 	cmpnei	r8,zero,998
 200f590:	0200f724 	muli	r8,zero,988
 200f594:	0200fe54 	movui	r8,1017
 200f598:	0200f9e0 	cmpeqi	r8,zero,999
 200f59c:	0200fe54 	movui	r8,1017
 200f5a0:	0200fa74 	movhi	r8,1001
 200f5a4:	0200fe54 	movui	r8,1017
 200f5a8:	0200fe54 	movui	r8,1017
 200f5ac:	0200fb40 	call	200fb4 <__alt_mem_mem_Nios_PI+0xfb4>
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200f5b0:	e0bfc703 	ldbu	r2,-228(fp)
 200f5b4:	10803fcc 	andi	r2,r2,255
 200f5b8:	1080201c 	xori	r2,r2,128
 200f5bc:	10bfe004 	addi	r2,r2,-128
 200f5c0:	103f931e 	bne	r2,zero,200f410 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 200f5c4:	00800804 	movi	r2,32
 200f5c8:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f5cc:	003f9006 	br	200f410 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 200f5d0:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200f5d4:	003f8e06 	br	200f410 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200f5d8:	e0bfe917 	ldw	r2,-92(fp)
 200f5dc:	10c00104 	addi	r3,r2,4
 200f5e0:	e0ffe915 	stw	r3,-92(fp)
 200f5e4:	10800017 	ldw	r2,0(r2)
 200f5e8:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200f5ec:	e0bfba17 	ldw	r2,-280(fp)
 200f5f0:	10000116 	blt	r2,zero,200f5f8 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 200f5f4:	003f8606 	br	200f410 <___vfiprintf_internal_r+0x224>
			width = -width;
 200f5f8:	e0bfba17 	ldw	r2,-280(fp)
 200f5fc:	0085c83a 	sub	r2,zero,r2
 200f600:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200f604:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200f608:	003f8106 	br	200f410 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 200f60c:	00800ac4 	movi	r2,43
 200f610:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f614:	003f7e06 	br	200f410 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 200f618:	a805883a 	mov	r2,r21
 200f61c:	15400044 	addi	r21,r2,1
 200f620:	10800003 	ldbu	r2,0(r2)
 200f624:	14403fcc 	andi	r17,r2,255
 200f628:	8c40201c 	xori	r17,r17,128
 200f62c:	8c7fe004 	addi	r17,r17,-128
 200f630:	88800a98 	cmpnei	r2,r17,42
 200f634:	10000a1e 	bne	r2,zero,200f660 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200f638:	e0bfe917 	ldw	r2,-92(fp)
 200f63c:	10c00104 	addi	r3,r2,4
 200f640:	e0ffe915 	stw	r3,-92(fp)
 200f644:	10800017 	ldw	r2,0(r2)
 200f648:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200f64c:	e0bfbb17 	ldw	r2,-276(fp)
 200f650:	103f6f0e 	bge	r2,zero,200f410 <___vfiprintf_internal_r+0x224>
					prec = -1;
 200f654:	00bfffc4 	movi	r2,-1
 200f658:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 200f65c:	003f6c06 	br	200f410 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 200f660:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200f664:	00000906 	br	200f68c <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 200f668:	80c002a4 	muli	r3,r16,10
 200f66c:	88bff404 	addi	r2,r17,-48
 200f670:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f674:	a805883a 	mov	r2,r21
 200f678:	15400044 	addi	r21,r2,1
 200f67c:	10800003 	ldbu	r2,0(r2)
 200f680:	14403fcc 	andi	r17,r2,255
 200f684:	8c40201c 	xori	r17,r17,128
 200f688:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200f68c:	88bff404 	addi	r2,r17,-48
 200f690:	108002b0 	cmpltui	r2,r2,10
 200f694:	103ff41e 	bne	r2,zero,200f668 <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200f698:	8005883a 	mov	r2,r16
 200f69c:	1000010e 	bge	r2,zero,200f6a4 <___vfiprintf_internal_r+0x4b8>
 200f6a0:	00bfffc4 	movi	r2,-1
 200f6a4:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 200f6a8:	003f5f06 	br	200f428 <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200f6ac:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200f6b0:	003f5706 	br	200f410 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200f6b4:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200f6b8:	80c002a4 	muli	r3,r16,10
 200f6bc:	88bff404 	addi	r2,r17,-48
 200f6c0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f6c4:	a805883a 	mov	r2,r21
 200f6c8:	15400044 	addi	r21,r2,1
 200f6cc:	10800003 	ldbu	r2,0(r2)
 200f6d0:	14403fcc 	andi	r17,r2,255
 200f6d4:	8c40201c 	xori	r17,r17,128
 200f6d8:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 200f6dc:	88bff404 	addi	r2,r17,-48
 200f6e0:	108002b0 	cmpltui	r2,r2,10
 200f6e4:	103ff41e 	bne	r2,zero,200f6b8 <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200f6e8:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 200f6ec:	003f4e06 	br	200f428 <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200f6f0:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200f6f4:	003f4606 	br	200f410 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200f6f8:	a8800003 	ldbu	r2,0(r21)
 200f6fc:	10803fcc 	andi	r2,r2,255
 200f700:	1080201c 	xori	r2,r2,128
 200f704:	10bfe004 	addi	r2,r2,-128
 200f708:	10801b18 	cmpnei	r2,r2,108
 200f70c:	1000031e 	bne	r2,zero,200f71c <___vfiprintf_internal_r+0x530>
				fmt++;
 200f710:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200f714:	9cc00814 	ori	r19,r19,32
 200f718:	003f3d06 	br	200f410 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 200f71c:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200f720:	003f3b06 	br	200f410 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 200f724:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200f728:	003f3906 	br	200f410 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200f72c:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200f730:	e0bfe917 	ldw	r2,-92(fp)
 200f734:	10c00104 	addi	r3,r2,4
 200f738:	e0ffe915 	stw	r3,-92(fp)
 200f73c:	10800017 	ldw	r2,0(r2)
 200f740:	a0800005 	stb	r2,0(r20)
				size = 1;
 200f744:	00800044 	movi	r2,1
 200f748:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 200f74c:	e03fc705 	stb	zero,-228(fp)
			break;
 200f750:	0001c806 	br	200fe74 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 200f754:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200f758:	9880080c 	andi	r2,r19,32
 200f75c:	10000826 	beq	r2,zero,200f780 <___vfiprintf_internal_r+0x594>
 200f760:	e13fe917 	ldw	r4,-92(fp)
 200f764:	20800204 	addi	r2,r4,8
 200f768:	e0bfe915 	stw	r2,-92(fp)
 200f76c:	20800017 	ldw	r2,0(r4)
 200f770:	20c00117 	ldw	r3,4(r4)
 200f774:	e0bfea15 	stw	r2,-88(fp)
 200f778:	e0ffeb15 	stw	r3,-84(fp)
 200f77c:	00001e06 	br	200f7f8 <___vfiprintf_internal_r+0x60c>
 200f780:	9880040c 	andi	r2,r19,16
 200f784:	10000826 	beq	r2,zero,200f7a8 <___vfiprintf_internal_r+0x5bc>
 200f788:	e0bfe917 	ldw	r2,-92(fp)
 200f78c:	10c00104 	addi	r3,r2,4
 200f790:	e0ffe915 	stw	r3,-92(fp)
 200f794:	10800017 	ldw	r2,0(r2)
 200f798:	e0bfea15 	stw	r2,-88(fp)
 200f79c:	1005d7fa 	srai	r2,r2,31
 200f7a0:	e0bfeb15 	stw	r2,-84(fp)
 200f7a4:	00001406 	br	200f7f8 <___vfiprintf_internal_r+0x60c>
 200f7a8:	9880100c 	andi	r2,r19,64
 200f7ac:	10000b26 	beq	r2,zero,200f7dc <___vfiprintf_internal_r+0x5f0>
 200f7b0:	e0bfe917 	ldw	r2,-92(fp)
 200f7b4:	10c00104 	addi	r3,r2,4
 200f7b8:	e0ffe915 	stw	r3,-92(fp)
 200f7bc:	10800017 	ldw	r2,0(r2)
 200f7c0:	10bfffcc 	andi	r2,r2,65535
 200f7c4:	10a0001c 	xori	r2,r2,32768
 200f7c8:	10a00004 	addi	r2,r2,-32768
 200f7cc:	e0bfea15 	stw	r2,-88(fp)
 200f7d0:	1005d7fa 	srai	r2,r2,31
 200f7d4:	e0bfeb15 	stw	r2,-84(fp)
 200f7d8:	00000706 	br	200f7f8 <___vfiprintf_internal_r+0x60c>
 200f7dc:	e0bfe917 	ldw	r2,-92(fp)
 200f7e0:	10c00104 	addi	r3,r2,4
 200f7e4:	e0ffe915 	stw	r3,-92(fp)
 200f7e8:	10800017 	ldw	r2,0(r2)
 200f7ec:	e0bfea15 	stw	r2,-88(fp)
 200f7f0:	1005d7fa 	srai	r2,r2,31
 200f7f4:	e0bfeb15 	stw	r2,-84(fp)
 200f7f8:	e0bfea17 	ldw	r2,-88(fp)
 200f7fc:	e0bfbc15 	stw	r2,-272(fp)
 200f800:	e0ffeb17 	ldw	r3,-84(fp)
 200f804:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200f808:	e0bfbc17 	ldw	r2,-272(fp)
 200f80c:	e0ffbd17 	ldw	r3,-268(fp)
 200f810:	18000d0e 	bge	r3,zero,200f848 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200f814:	000d883a 	mov	r6,zero
 200f818:	000f883a 	mov	r7,zero
 200f81c:	e13fbc17 	ldw	r4,-272(fp)
 200f820:	e17fbd17 	ldw	r5,-268(fp)
 200f824:	3105c83a 	sub	r2,r6,r4
 200f828:	3091803a 	cmpltu	r8,r6,r2
 200f82c:	3947c83a 	sub	r3,r7,r5
 200f830:	1a09c83a 	sub	r4,r3,r8
 200f834:	2007883a 	mov	r3,r4
 200f838:	e0bfbc15 	stw	r2,-272(fp)
 200f83c:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 200f840:	00800b44 	movi	r2,45
 200f844:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 200f848:	00800044 	movi	r2,1
 200f84c:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 200f850:	0000f806 	br	200fc34 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200f854:	9880080c 	andi	r2,r19,32
 200f858:	10000d26 	beq	r2,zero,200f890 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200f85c:	e0bfe917 	ldw	r2,-92(fp)
 200f860:	10c00104 	addi	r3,r2,4
 200f864:	e0ffe915 	stw	r3,-92(fp)
 200f868:	10800017 	ldw	r2,0(r2)
 200f86c:	e0ffb917 	ldw	r3,-284(fp)
 200f870:	e0fff015 	stw	r3,-64(fp)
 200f874:	1807d7fa 	srai	r3,r3,31
 200f878:	e0fff115 	stw	r3,-60(fp)
 200f87c:	e0fff017 	ldw	r3,-64(fp)
 200f880:	10c00015 	stw	r3,0(r2)
 200f884:	e0fff117 	ldw	r3,-60(fp)
 200f888:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200f88c:	0002c306 	br	201039c <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200f890:	9880040c 	andi	r2,r19,16
 200f894:	10000726 	beq	r2,zero,200f8b4 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200f898:	e0bfe917 	ldw	r2,-92(fp)
 200f89c:	10c00104 	addi	r3,r2,4
 200f8a0:	e0ffe915 	stw	r3,-92(fp)
 200f8a4:	10800017 	ldw	r2,0(r2)
 200f8a8:	e0ffb917 	ldw	r3,-284(fp)
 200f8ac:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200f8b0:	0002ba06 	br	201039c <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200f8b4:	9880100c 	andi	r2,r19,64
 200f8b8:	10000726 	beq	r2,zero,200f8d8 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200f8bc:	e0bfe917 	ldw	r2,-92(fp)
 200f8c0:	10c00104 	addi	r3,r2,4
 200f8c4:	e0ffe915 	stw	r3,-92(fp)
 200f8c8:	10800017 	ldw	r2,0(r2)
 200f8cc:	e0ffb917 	ldw	r3,-284(fp)
 200f8d0:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200f8d4:	0002b106 	br	201039c <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200f8d8:	e0bfe917 	ldw	r2,-92(fp)
 200f8dc:	10c00104 	addi	r3,r2,4
 200f8e0:	e0ffe915 	stw	r3,-92(fp)
 200f8e4:	10800017 	ldw	r2,0(r2)
 200f8e8:	e0ffb917 	ldw	r3,-284(fp)
 200f8ec:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200f8f0:	0002aa06 	br	201039c <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 200f8f4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200f8f8:	9880080c 	andi	r2,r19,32
 200f8fc:	10000626 	beq	r2,zero,200f918 <___vfiprintf_internal_r+0x72c>
 200f900:	e0bfe917 	ldw	r2,-92(fp)
 200f904:	10c00204 	addi	r3,r2,8
 200f908:	e0ffe915 	stw	r3,-92(fp)
 200f90c:	15800017 	ldw	r22,0(r2)
 200f910:	15c00117 	ldw	r23,4(r2)
 200f914:	00001c06 	br	200f988 <___vfiprintf_internal_r+0x79c>
 200f918:	9880040c 	andi	r2,r19,16
 200f91c:	10000726 	beq	r2,zero,200f93c <___vfiprintf_internal_r+0x750>
 200f920:	e0bfe917 	ldw	r2,-92(fp)
 200f924:	10c00104 	addi	r3,r2,4
 200f928:	e0ffe915 	stw	r3,-92(fp)
 200f92c:	10800017 	ldw	r2,0(r2)
 200f930:	102d883a 	mov	r22,r2
 200f934:	002f883a 	mov	r23,zero
 200f938:	00001306 	br	200f988 <___vfiprintf_internal_r+0x79c>
 200f93c:	9880100c 	andi	r2,r19,64
 200f940:	10000b26 	beq	r2,zero,200f970 <___vfiprintf_internal_r+0x784>
 200f944:	e0bfe917 	ldw	r2,-92(fp)
 200f948:	10c00104 	addi	r3,r2,4
 200f94c:	e0ffe915 	stw	r3,-92(fp)
 200f950:	10800017 	ldw	r2,0(r2)
 200f954:	e0bff215 	stw	r2,-56(fp)
 200f958:	e03ff315 	stw	zero,-52(fp)
 200f95c:	e0bff217 	ldw	r2,-56(fp)
 200f960:	15bfffcc 	andi	r22,r2,65535
 200f964:	e0fff317 	ldw	r3,-52(fp)
 200f968:	182e703a 	and	r23,r3,zero
 200f96c:	00000606 	br	200f988 <___vfiprintf_internal_r+0x79c>
 200f970:	e0bfe917 	ldw	r2,-92(fp)
 200f974:	10c00104 	addi	r3,r2,4
 200f978:	e0ffe915 	stw	r3,-92(fp)
 200f97c:	10800017 	ldw	r2,0(r2)
 200f980:	102d883a 	mov	r22,r2
 200f984:	002f883a 	mov	r23,zero
 200f988:	e5bfbc15 	stw	r22,-272(fp)
 200f98c:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 200f990:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200f994:	0000a606 	br	200fc30 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200f998:	e0bfe917 	ldw	r2,-92(fp)
 200f99c:	10c00104 	addi	r3,r2,4
 200f9a0:	e0ffe915 	stw	r3,-92(fp)
 200f9a4:	10800017 	ldw	r2,0(r2)
 200f9a8:	e0bfbc15 	stw	r2,-272(fp)
 200f9ac:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 200f9b0:	00800084 	movi	r2,2
 200f9b4:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 200f9b8:	008080b4 	movhi	r2,514
 200f9bc:	10ba7704 	addi	r2,r2,-5668
 200f9c0:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 200f9c4:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200f9c8:	00800c04 	movi	r2,48
 200f9cc:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200f9d0:	04401e04 	movi	r17,120
 200f9d4:	00801e04 	movi	r2,120
 200f9d8:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200f9dc:	00009406 	br	200fc30 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200f9e0:	e0bfe917 	ldw	r2,-92(fp)
 200f9e4:	10c00104 	addi	r3,r2,4
 200f9e8:	e0ffe915 	stw	r3,-92(fp)
 200f9ec:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200f9f0:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200f9f4:	a000081e 	bne	r20,zero,200fa18 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 200f9f8:	050080b4 	movhi	r20,514
 200f9fc:	a53a7c04 	addi	r20,r20,-5648
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200fa00:	e0bfbb17 	ldw	r2,-276(fp)
 200fa04:	10c001f0 	cmpltui	r3,r2,7
 200fa08:	1800011e 	bne	r3,zero,200fa10 <___vfiprintf_internal_r+0x824>
 200fa0c:	00800184 	movi	r2,6
 200fa10:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fa14:	00011706 	br	200fe74 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200fa18:	e0bfbb17 	ldw	r2,-276(fp)
 200fa1c:	10001016 	blt	r2,zero,200fa60 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200fa20:	e0bfbb17 	ldw	r2,-276(fp)
 200fa24:	100d883a 	mov	r6,r2
 200fa28:	000b883a 	mov	r5,zero
 200fa2c:	a009883a 	mov	r4,r20
 200fa30:	200c1300 	call	200c130 <memchr>
 200fa34:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 200fa38:	e0bfc617 	ldw	r2,-232(fp)
 200fa3c:	10000526 	beq	r2,zero,200fa54 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 200fa40:	e0bfc617 	ldw	r2,-232(fp)
 200fa44:	a007883a 	mov	r3,r20
 200fa48:	10c5c83a 	sub	r2,r2,r3
 200fa4c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fa50:	00010806 	br	200fe74 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200fa54:	e0bfbb17 	ldw	r2,-276(fp)
 200fa58:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 200fa5c:	00010506 	br	200fe74 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200fa60:	a009883a 	mov	r4,r20
 200fa64:	2004eb40 	call	2004eb4 <strlen>
 200fa68:	e0bfc115 	stw	r2,-252(fp)

			break;
 200fa6c:	00010106 	br	200fe74 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 200fa70:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200fa74:	9880080c 	andi	r2,r19,32
 200fa78:	10000826 	beq	r2,zero,200fa9c <___vfiprintf_internal_r+0x8b0>
 200fa7c:	e0bfe917 	ldw	r2,-92(fp)
 200fa80:	10c00204 	addi	r3,r2,8
 200fa84:	e0ffe915 	stw	r3,-92(fp)
 200fa88:	10c00017 	ldw	r3,0(r2)
 200fa8c:	e0ffec15 	stw	r3,-80(fp)
 200fa90:	10c00117 	ldw	r3,4(r2)
 200fa94:	e0ffed15 	stw	r3,-76(fp)
 200fa98:	00001e06 	br	200fb14 <___vfiprintf_internal_r+0x928>
 200fa9c:	9880040c 	andi	r2,r19,16
 200faa0:	10000726 	beq	r2,zero,200fac0 <___vfiprintf_internal_r+0x8d4>
 200faa4:	e0bfe917 	ldw	r2,-92(fp)
 200faa8:	10c00104 	addi	r3,r2,4
 200faac:	e0ffe915 	stw	r3,-92(fp)
 200fab0:	10800017 	ldw	r2,0(r2)
 200fab4:	e0bfec15 	stw	r2,-80(fp)
 200fab8:	e03fed15 	stw	zero,-76(fp)
 200fabc:	00001506 	br	200fb14 <___vfiprintf_internal_r+0x928>
 200fac0:	9880100c 	andi	r2,r19,64
 200fac4:	10000d26 	beq	r2,zero,200fafc <___vfiprintf_internal_r+0x910>
 200fac8:	e0bfe917 	ldw	r2,-92(fp)
 200facc:	10c00104 	addi	r3,r2,4
 200fad0:	e0ffe915 	stw	r3,-92(fp)
 200fad4:	10800017 	ldw	r2,0(r2)
 200fad8:	e0bff415 	stw	r2,-48(fp)
 200fadc:	e03ff515 	stw	zero,-44(fp)
 200fae0:	e0bff417 	ldw	r2,-48(fp)
 200fae4:	10bfffcc 	andi	r2,r2,65535
 200fae8:	e0bfec15 	stw	r2,-80(fp)
 200faec:	e0fff517 	ldw	r3,-44(fp)
 200faf0:	1806703a 	and	r3,r3,zero
 200faf4:	e0ffed15 	stw	r3,-76(fp)
 200faf8:	00000606 	br	200fb14 <___vfiprintf_internal_r+0x928>
 200fafc:	e0bfe917 	ldw	r2,-92(fp)
 200fb00:	10c00104 	addi	r3,r2,4
 200fb04:	e0ffe915 	stw	r3,-92(fp)
 200fb08:	10800017 	ldw	r2,0(r2)
 200fb0c:	e0bfec15 	stw	r2,-80(fp)
 200fb10:	e03fed15 	stw	zero,-76(fp)
 200fb14:	e0bfec17 	ldw	r2,-80(fp)
 200fb18:	e0bfbc15 	stw	r2,-272(fp)
 200fb1c:	e0ffed17 	ldw	r3,-76(fp)
 200fb20:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 200fb24:	00800044 	movi	r2,1
 200fb28:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 200fb2c:	00004006 	br	200fc30 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200fb30:	008080b4 	movhi	r2,514
 200fb34:	10ba7e04 	addi	r2,r2,-5640
 200fb38:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 200fb3c:	00000306 	br	200fb4c <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 200fb40:	008080b4 	movhi	r2,514
 200fb44:	10ba7704 	addi	r2,r2,-5668
 200fb48:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 200fb4c:	9880080c 	andi	r2,r19,32
 200fb50:	10000826 	beq	r2,zero,200fb74 <___vfiprintf_internal_r+0x988>
 200fb54:	e0bfe917 	ldw	r2,-92(fp)
 200fb58:	10c00204 	addi	r3,r2,8
 200fb5c:	e0ffe915 	stw	r3,-92(fp)
 200fb60:	10c00017 	ldw	r3,0(r2)
 200fb64:	e0ffee15 	stw	r3,-72(fp)
 200fb68:	10c00117 	ldw	r3,4(r2)
 200fb6c:	e0ffef15 	stw	r3,-68(fp)
 200fb70:	00001e06 	br	200fbec <___vfiprintf_internal_r+0xa00>
 200fb74:	9880040c 	andi	r2,r19,16
 200fb78:	10000726 	beq	r2,zero,200fb98 <___vfiprintf_internal_r+0x9ac>
 200fb7c:	e0bfe917 	ldw	r2,-92(fp)
 200fb80:	10c00104 	addi	r3,r2,4
 200fb84:	e0ffe915 	stw	r3,-92(fp)
 200fb88:	10800017 	ldw	r2,0(r2)
 200fb8c:	e0bfee15 	stw	r2,-72(fp)
 200fb90:	e03fef15 	stw	zero,-68(fp)
 200fb94:	00001506 	br	200fbec <___vfiprintf_internal_r+0xa00>
 200fb98:	9880100c 	andi	r2,r19,64
 200fb9c:	10000d26 	beq	r2,zero,200fbd4 <___vfiprintf_internal_r+0x9e8>
 200fba0:	e0bfe917 	ldw	r2,-92(fp)
 200fba4:	10c00104 	addi	r3,r2,4
 200fba8:	e0ffe915 	stw	r3,-92(fp)
 200fbac:	10800017 	ldw	r2,0(r2)
 200fbb0:	e0bff615 	stw	r2,-40(fp)
 200fbb4:	e03ff715 	stw	zero,-36(fp)
 200fbb8:	e0bff617 	ldw	r2,-40(fp)
 200fbbc:	10bfffcc 	andi	r2,r2,65535
 200fbc0:	e0bfee15 	stw	r2,-72(fp)
 200fbc4:	e0fff717 	ldw	r3,-36(fp)
 200fbc8:	1806703a 	and	r3,r3,zero
 200fbcc:	e0ffef15 	stw	r3,-68(fp)
 200fbd0:	00000606 	br	200fbec <___vfiprintf_internal_r+0xa00>
 200fbd4:	e0bfe917 	ldw	r2,-92(fp)
 200fbd8:	10c00104 	addi	r3,r2,4
 200fbdc:	e0ffe915 	stw	r3,-92(fp)
 200fbe0:	10800017 	ldw	r2,0(r2)
 200fbe4:	e0bfee15 	stw	r2,-72(fp)
 200fbe8:	e03fef15 	stw	zero,-68(fp)
 200fbec:	e0bfee17 	ldw	r2,-72(fp)
 200fbf0:	e0bfbc15 	stw	r2,-272(fp)
 200fbf4:	e0ffef17 	ldw	r3,-68(fp)
 200fbf8:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 200fbfc:	00800084 	movi	r2,2
 200fc00:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200fc04:	9880004c 	andi	r2,r19,1
 200fc08:	10000926 	beq	r2,zero,200fc30 <___vfiprintf_internal_r+0xa44>
 200fc0c:	e0bfbc17 	ldw	r2,-272(fp)
 200fc10:	e0ffbd17 	ldw	r3,-268(fp)
 200fc14:	10c4b03a 	or	r2,r2,r3
 200fc18:	10000526 	beq	r2,zero,200fc30 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 200fc1c:	00800c04 	movi	r2,48
 200fc20:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200fc24:	8805883a 	mov	r2,r17
 200fc28:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200fc2c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200fc30:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200fc34:	e0bfbb17 	ldw	r2,-276(fp)
 200fc38:	e0bfbf15 	stw	r2,-260(fp)
 200fc3c:	e0bfbf17 	ldw	r2,-260(fp)
 200fc40:	10000216 	blt	r2,zero,200fc4c <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 200fc44:	00bfdfc4 	movi	r2,-129
 200fc48:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200fc4c:	e53fdb04 	addi	r20,fp,-148
 200fc50:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 200fc54:	e0bfbc17 	ldw	r2,-272(fp)
 200fc58:	e0ffbd17 	ldw	r3,-268(fp)
 200fc5c:	10c4b03a 	or	r2,r2,r3
 200fc60:	1000021e 	bne	r2,zero,200fc6c <___vfiprintf_internal_r+0xa80>
 200fc64:	e0bfbb17 	ldw	r2,-276(fp)
 200fc68:	10006c26 	beq	r2,zero,200fe1c <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200fc6c:	e0bfbe03 	ldbu	r2,-264(fp)
 200fc70:	10c00060 	cmpeqi	r3,r2,1
 200fc74:	1800211e 	bne	r3,zero,200fcfc <___vfiprintf_internal_r+0xb10>
 200fc78:	10c000a0 	cmpeqi	r3,r2,2
 200fc7c:	1800491e 	bne	r3,zero,200fda4 <___vfiprintf_internal_r+0xbb8>
 200fc80:	10005d1e 	bne	r2,zero,200fdf8 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200fc84:	a53fffc4 	addi	r20,r20,-1
 200fc88:	e0bfbc17 	ldw	r2,-272(fp)
 200fc8c:	108001cc 	andi	r2,r2,7
 200fc90:	10800c04 	addi	r2,r2,48
 200fc94:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 200fc98:	e0bfbd17 	ldw	r2,-268(fp)
 200fc9c:	1004977a 	slli	r2,r2,29
 200fca0:	e0ffbc17 	ldw	r3,-272(fp)
 200fca4:	1806d0fa 	srli	r3,r3,3
 200fca8:	1884b03a 	or	r2,r3,r2
 200fcac:	e0bfbc15 	stw	r2,-272(fp)
 200fcb0:	e0bfbd17 	ldw	r2,-268(fp)
 200fcb4:	1004d0fa 	srli	r2,r2,3
 200fcb8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200fcbc:	e0bfbc17 	ldw	r2,-272(fp)
 200fcc0:	e0ffbd17 	ldw	r3,-268(fp)
 200fcc4:	10c4b03a 	or	r2,r2,r3
 200fcc8:	103fee1e 	bne	r2,zero,200fc84 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200fccc:	9880004c 	andi	r2,r19,1
 200fcd0:	10005026 	beq	r2,zero,200fe14 <___vfiprintf_internal_r+0xc28>
 200fcd4:	a0800003 	ldbu	r2,0(r20)
 200fcd8:	10803fcc 	andi	r2,r2,255
 200fcdc:	1080201c 	xori	r2,r2,128
 200fce0:	10bfe004 	addi	r2,r2,-128
 200fce4:	10800c20 	cmpeqi	r2,r2,48
 200fce8:	10004a1e 	bne	r2,zero,200fe14 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 200fcec:	a53fffc4 	addi	r20,r20,-1
 200fcf0:	00800c04 	movi	r2,48
 200fcf4:	a0800005 	stb	r2,0(r20)
					break;
 200fcf8:	00004606 	br	200fe14 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200fcfc:	e0bfbd17 	ldw	r2,-268(fp)
 200fd00:	10000a1e 	bne	r2,zero,200fd2c <___vfiprintf_internal_r+0xb40>
 200fd04:	e0bfbd17 	ldw	r2,-268(fp)
 200fd08:	1000031e 	bne	r2,zero,200fd18 <___vfiprintf_internal_r+0xb2c>
 200fd0c:	e0bfbc17 	ldw	r2,-272(fp)
 200fd10:	108002a8 	cmpgeui	r2,r2,10
 200fd14:	1000051e 	bne	r2,zero,200fd2c <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 200fd18:	a53fffc4 	addi	r20,r20,-1
 200fd1c:	e0bfbc17 	ldw	r2,-272(fp)
 200fd20:	10800c04 	addi	r2,r2,48
 200fd24:	a0800005 	stb	r2,0(r20)
						break;
 200fd28:	00003b06 	br	200fe18 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200fd2c:	a53fffc4 	addi	r20,r20,-1
 200fd30:	e0bfbc17 	ldw	r2,-272(fp)
 200fd34:	e0ffbd17 	ldw	r3,-268(fp)
 200fd38:	01800284 	movi	r6,10
 200fd3c:	000f883a 	mov	r7,zero
 200fd40:	1009883a 	mov	r4,r2
 200fd44:	180b883a 	mov	r5,r3
 200fd48:	201167c0 	call	201167c <__umoddi3>
 200fd4c:	1009883a 	mov	r4,r2
 200fd50:	180b883a 	mov	r5,r3
 200fd54:	2005883a 	mov	r2,r4
 200fd58:	2807883a 	mov	r3,r5
 200fd5c:	10800c04 	addi	r2,r2,48
 200fd60:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200fd64:	e0bfbc17 	ldw	r2,-272(fp)
 200fd68:	e0ffbd17 	ldw	r3,-268(fp)
 200fd6c:	01800284 	movi	r6,10
 200fd70:	000f883a 	mov	r7,zero
 200fd74:	1009883a 	mov	r4,r2
 200fd78:	180b883a 	mov	r5,r3
 200fd7c:	20111040 	call	2011104 <__udivdi3>
 200fd80:	1009883a 	mov	r4,r2
 200fd84:	180b883a 	mov	r5,r3
 200fd88:	e13fbc15 	stw	r4,-272(fp)
 200fd8c:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 200fd90:	e0bfbc17 	ldw	r2,-272(fp)
 200fd94:	e0ffbd17 	ldw	r3,-268(fp)
 200fd98:	10c4b03a 	or	r2,r2,r3
 200fd9c:	103fe31e 	bne	r2,zero,200fd2c <___vfiprintf_internal_r+0xb40>
					break;
 200fda0:	00001d06 	br	200fe18 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200fda4:	a53fffc4 	addi	r20,r20,-1
 200fda8:	e0bfbc17 	ldw	r2,-272(fp)
 200fdac:	108003cc 	andi	r2,r2,15
 200fdb0:	e0ffc217 	ldw	r3,-248(fp)
 200fdb4:	1885883a 	add	r2,r3,r2
 200fdb8:	10800003 	ldbu	r2,0(r2)
 200fdbc:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 200fdc0:	e0bfbd17 	ldw	r2,-268(fp)
 200fdc4:	1004973a 	slli	r2,r2,28
 200fdc8:	e0ffbc17 	ldw	r3,-272(fp)
 200fdcc:	1806d13a 	srli	r3,r3,4
 200fdd0:	1884b03a 	or	r2,r3,r2
 200fdd4:	e0bfbc15 	stw	r2,-272(fp)
 200fdd8:	e0bfbd17 	ldw	r2,-268(fp)
 200fddc:	1004d13a 	srli	r2,r2,4
 200fde0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200fde4:	e0bfbc17 	ldw	r2,-272(fp)
 200fde8:	e0ffbd17 	ldw	r3,-268(fp)
 200fdec:	10c4b03a 	or	r2,r2,r3
 200fdf0:	103fec1e 	bne	r2,zero,200fda4 <___vfiprintf_internal_r+0xbb8>
					break;
 200fdf4:	00000806 	br	200fe18 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 200fdf8:	050080b4 	movhi	r20,514
 200fdfc:	a53a8304 	addi	r20,r20,-5620
					size = strlen (cp);
 200fe00:	a009883a 	mov	r4,r20
 200fe04:	2004eb40 	call	2004eb4 <strlen>
 200fe08:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 200fe0c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200fe10:	00001806 	br	200fe74 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200fe14:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200fe18:	00000706 	br	200fe38 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200fe1c:	e0bfbe03 	ldbu	r2,-264(fp)
 200fe20:	1000051e 	bne	r2,zero,200fe38 <___vfiprintf_internal_r+0xc4c>
 200fe24:	9880004c 	andi	r2,r19,1
 200fe28:	10000326 	beq	r2,zero,200fe38 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 200fe2c:	a53fffc4 	addi	r20,r20,-1
 200fe30:	00800c04 	movi	r2,48
 200fe34:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 200fe38:	e0bfdb04 	addi	r2,fp,-148
 200fe3c:	10800a04 	addi	r2,r2,40
 200fe40:	1007883a 	mov	r3,r2
 200fe44:	a005883a 	mov	r2,r20
 200fe48:	1885c83a 	sub	r2,r3,r2
 200fe4c:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 200fe50:	00000806 	br	200fe74 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200fe54:	88015426 	beq	r17,zero,20103a8 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200fe58:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 200fe5c:	8805883a 	mov	r2,r17
 200fe60:	a0800005 	stb	r2,0(r20)
			size = 1;
 200fe64:	00800044 	movi	r2,1
 200fe68:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 200fe6c:	e03fc705 	stb	zero,-228(fp)
			break;
 200fe70:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200fe74:	e0ffbf17 	ldw	r3,-260(fp)
 200fe78:	e0bfc117 	ldw	r2,-252(fp)
 200fe7c:	10c0010e 	bge	r2,r3,200fe84 <___vfiprintf_internal_r+0xc98>
 200fe80:	1805883a 	mov	r2,r3
 200fe84:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 200fe88:	e0bfc703 	ldbu	r2,-228(fp)
 200fe8c:	10803fcc 	andi	r2,r2,255
 200fe90:	1080201c 	xori	r2,r2,128
 200fe94:	10bfe004 	addi	r2,r2,-128
 200fe98:	10000326 	beq	r2,zero,200fea8 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 200fe9c:	e0bfc017 	ldw	r2,-256(fp)
 200fea0:	10800044 	addi	r2,r2,1
 200fea4:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 200fea8:	9880008c 	andi	r2,r19,2
 200feac:	10000326 	beq	r2,zero,200febc <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 200feb0:	e0bfc017 	ldw	r2,-256(fp)
 200feb4:	10800084 	addi	r2,r2,2
 200feb8:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200febc:	9880210c 	andi	r2,r19,132
 200fec0:	1000351e 	bne	r2,zero,200ff98 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 200fec4:	e0ffba17 	ldw	r3,-280(fp)
 200fec8:	e0bfc017 	ldw	r2,-256(fp)
 200fecc:	18a1c83a 	sub	r16,r3,r2
 200fed0:	0400310e 	bge	zero,r16,200ff98 <___vfiprintf_internal_r+0xdac>
 200fed4:	00001706 	br	200ff34 <___vfiprintf_internal_r+0xd48>
 200fed8:	008080b4 	movhi	r2,514
 200fedc:	10ba8984 	addi	r2,r2,-5594
 200fee0:	90800015 	stw	r2,0(r18)
 200fee4:	00800404 	movi	r2,16
 200fee8:	90800115 	stw	r2,4(r18)
 200feec:	e0bfca17 	ldw	r2,-216(fp)
 200fef0:	10800404 	addi	r2,r2,16
 200fef4:	e0bfca15 	stw	r2,-216(fp)
 200fef8:	94800204 	addi	r18,r18,8
 200fefc:	e0bfc917 	ldw	r2,-220(fp)
 200ff00:	10800044 	addi	r2,r2,1
 200ff04:	e0bfc915 	stw	r2,-220(fp)
 200ff08:	e0bfc917 	ldw	r2,-220(fp)
 200ff0c:	10800210 	cmplti	r2,r2,8
 200ff10:	1000071e 	bne	r2,zero,200ff30 <___vfiprintf_internal_r+0xd44>
 200ff14:	e0bfc804 	addi	r2,fp,-224
 200ff18:	100d883a 	mov	r6,r2
 200ff1c:	e17fe717 	ldw	r5,-100(fp)
 200ff20:	e13fe617 	ldw	r4,-104(fp)
 200ff24:	200ef700 	call	200ef70 <__sprint_r>
 200ff28:	10012d1e 	bne	r2,zero,20103e0 <___vfiprintf_internal_r+0x11f4>
 200ff2c:	e4bfcb04 	addi	r18,fp,-212
 200ff30:	843ffc04 	addi	r16,r16,-16
 200ff34:	80800448 	cmpgei	r2,r16,17
 200ff38:	103fe71e 	bne	r2,zero,200fed8 <___vfiprintf_internal_r+0xcec>
 200ff3c:	008080b4 	movhi	r2,514
 200ff40:	10ba8984 	addi	r2,r2,-5594
 200ff44:	90800015 	stw	r2,0(r18)
 200ff48:	8005883a 	mov	r2,r16
 200ff4c:	90800115 	stw	r2,4(r18)
 200ff50:	e0bfca17 	ldw	r2,-216(fp)
 200ff54:	8007883a 	mov	r3,r16
 200ff58:	10c5883a 	add	r2,r2,r3
 200ff5c:	e0bfca15 	stw	r2,-216(fp)
 200ff60:	94800204 	addi	r18,r18,8
 200ff64:	e0bfc917 	ldw	r2,-220(fp)
 200ff68:	10800044 	addi	r2,r2,1
 200ff6c:	e0bfc915 	stw	r2,-220(fp)
 200ff70:	e0bfc917 	ldw	r2,-220(fp)
 200ff74:	10800210 	cmplti	r2,r2,8
 200ff78:	1000071e 	bne	r2,zero,200ff98 <___vfiprintf_internal_r+0xdac>
 200ff7c:	e0bfc804 	addi	r2,fp,-224
 200ff80:	100d883a 	mov	r6,r2
 200ff84:	e17fe717 	ldw	r5,-100(fp)
 200ff88:	e13fe617 	ldw	r4,-104(fp)
 200ff8c:	200ef700 	call	200ef70 <__sprint_r>
 200ff90:	1001151e 	bne	r2,zero,20103e8 <___vfiprintf_internal_r+0x11fc>
 200ff94:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 200ff98:	e0bfc703 	ldbu	r2,-228(fp)
 200ff9c:	10803fcc 	andi	r2,r2,255
 200ffa0:	1080201c 	xori	r2,r2,128
 200ffa4:	10bfe004 	addi	r2,r2,-128
 200ffa8:	10001526 	beq	r2,zero,2010000 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 200ffac:	e0bfc704 	addi	r2,fp,-228
 200ffb0:	90800015 	stw	r2,0(r18)
 200ffb4:	00800044 	movi	r2,1
 200ffb8:	90800115 	stw	r2,4(r18)
 200ffbc:	e0bfca17 	ldw	r2,-216(fp)
 200ffc0:	10800044 	addi	r2,r2,1
 200ffc4:	e0bfca15 	stw	r2,-216(fp)
 200ffc8:	94800204 	addi	r18,r18,8
 200ffcc:	e0bfc917 	ldw	r2,-220(fp)
 200ffd0:	10800044 	addi	r2,r2,1
 200ffd4:	e0bfc915 	stw	r2,-220(fp)
 200ffd8:	e0bfc917 	ldw	r2,-220(fp)
 200ffdc:	10800210 	cmplti	r2,r2,8
 200ffe0:	1000071e 	bne	r2,zero,2010000 <___vfiprintf_internal_r+0xe14>
 200ffe4:	e0bfc804 	addi	r2,fp,-224
 200ffe8:	100d883a 	mov	r6,r2
 200ffec:	e17fe717 	ldw	r5,-100(fp)
 200fff0:	e13fe617 	ldw	r4,-104(fp)
 200fff4:	200ef700 	call	200ef70 <__sprint_r>
 200fff8:	1000fd1e 	bne	r2,zero,20103f0 <___vfiprintf_internal_r+0x1204>
 200fffc:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2010000:	9880008c 	andi	r2,r19,2
 2010004:	10001526 	beq	r2,zero,201005c <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 2010008:	e0bfe504 	addi	r2,fp,-108
 201000c:	90800015 	stw	r2,0(r18)
 2010010:	00800084 	movi	r2,2
 2010014:	90800115 	stw	r2,4(r18)
 2010018:	e0bfca17 	ldw	r2,-216(fp)
 201001c:	10800084 	addi	r2,r2,2
 2010020:	e0bfca15 	stw	r2,-216(fp)
 2010024:	94800204 	addi	r18,r18,8
 2010028:	e0bfc917 	ldw	r2,-220(fp)
 201002c:	10800044 	addi	r2,r2,1
 2010030:	e0bfc915 	stw	r2,-220(fp)
 2010034:	e0bfc917 	ldw	r2,-220(fp)
 2010038:	10800210 	cmplti	r2,r2,8
 201003c:	1000071e 	bne	r2,zero,201005c <___vfiprintf_internal_r+0xe70>
 2010040:	e0bfc804 	addi	r2,fp,-224
 2010044:	100d883a 	mov	r6,r2
 2010048:	e17fe717 	ldw	r5,-100(fp)
 201004c:	e13fe617 	ldw	r4,-104(fp)
 2010050:	200ef700 	call	200ef70 <__sprint_r>
 2010054:	1000e81e 	bne	r2,zero,20103f8 <___vfiprintf_internal_r+0x120c>
 2010058:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 201005c:	9880210c 	andi	r2,r19,132
 2010060:	10802018 	cmpnei	r2,r2,128
 2010064:	1000351e 	bne	r2,zero,201013c <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 2010068:	e0ffba17 	ldw	r3,-280(fp)
 201006c:	e0bfc017 	ldw	r2,-256(fp)
 2010070:	18a1c83a 	sub	r16,r3,r2
 2010074:	0400310e 	bge	zero,r16,201013c <___vfiprintf_internal_r+0xf50>
 2010078:	00001706 	br	20100d8 <___vfiprintf_internal_r+0xeec>
 201007c:	008080b4 	movhi	r2,514
 2010080:	10ba8d84 	addi	r2,r2,-5578
 2010084:	90800015 	stw	r2,0(r18)
 2010088:	00800404 	movi	r2,16
 201008c:	90800115 	stw	r2,4(r18)
 2010090:	e0bfca17 	ldw	r2,-216(fp)
 2010094:	10800404 	addi	r2,r2,16
 2010098:	e0bfca15 	stw	r2,-216(fp)
 201009c:	94800204 	addi	r18,r18,8
 20100a0:	e0bfc917 	ldw	r2,-220(fp)
 20100a4:	10800044 	addi	r2,r2,1
 20100a8:	e0bfc915 	stw	r2,-220(fp)
 20100ac:	e0bfc917 	ldw	r2,-220(fp)
 20100b0:	10800210 	cmplti	r2,r2,8
 20100b4:	1000071e 	bne	r2,zero,20100d4 <___vfiprintf_internal_r+0xee8>
 20100b8:	e0bfc804 	addi	r2,fp,-224
 20100bc:	100d883a 	mov	r6,r2
 20100c0:	e17fe717 	ldw	r5,-100(fp)
 20100c4:	e13fe617 	ldw	r4,-104(fp)
 20100c8:	200ef700 	call	200ef70 <__sprint_r>
 20100cc:	1000cc1e 	bne	r2,zero,2010400 <___vfiprintf_internal_r+0x1214>
 20100d0:	e4bfcb04 	addi	r18,fp,-212
 20100d4:	843ffc04 	addi	r16,r16,-16
 20100d8:	80800448 	cmpgei	r2,r16,17
 20100dc:	103fe71e 	bne	r2,zero,201007c <___vfiprintf_internal_r+0xe90>
 20100e0:	008080b4 	movhi	r2,514
 20100e4:	10ba8d84 	addi	r2,r2,-5578
 20100e8:	90800015 	stw	r2,0(r18)
 20100ec:	8005883a 	mov	r2,r16
 20100f0:	90800115 	stw	r2,4(r18)
 20100f4:	e0bfca17 	ldw	r2,-216(fp)
 20100f8:	8007883a 	mov	r3,r16
 20100fc:	10c5883a 	add	r2,r2,r3
 2010100:	e0bfca15 	stw	r2,-216(fp)
 2010104:	94800204 	addi	r18,r18,8
 2010108:	e0bfc917 	ldw	r2,-220(fp)
 201010c:	10800044 	addi	r2,r2,1
 2010110:	e0bfc915 	stw	r2,-220(fp)
 2010114:	e0bfc917 	ldw	r2,-220(fp)
 2010118:	10800210 	cmplti	r2,r2,8
 201011c:	1000071e 	bne	r2,zero,201013c <___vfiprintf_internal_r+0xf50>
 2010120:	e0bfc804 	addi	r2,fp,-224
 2010124:	100d883a 	mov	r6,r2
 2010128:	e17fe717 	ldw	r5,-100(fp)
 201012c:	e13fe617 	ldw	r4,-104(fp)
 2010130:	200ef700 	call	200ef70 <__sprint_r>
 2010134:	1000b41e 	bne	r2,zero,2010408 <___vfiprintf_internal_r+0x121c>
 2010138:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 201013c:	e0ffbf17 	ldw	r3,-260(fp)
 2010140:	e0bfc117 	ldw	r2,-252(fp)
 2010144:	18a1c83a 	sub	r16,r3,r2
 2010148:	0400310e 	bge	zero,r16,2010210 <___vfiprintf_internal_r+0x1024>
 201014c:	00001706 	br	20101ac <___vfiprintf_internal_r+0xfc0>
 2010150:	008080b4 	movhi	r2,514
 2010154:	10ba8d84 	addi	r2,r2,-5578
 2010158:	90800015 	stw	r2,0(r18)
 201015c:	00800404 	movi	r2,16
 2010160:	90800115 	stw	r2,4(r18)
 2010164:	e0bfca17 	ldw	r2,-216(fp)
 2010168:	10800404 	addi	r2,r2,16
 201016c:	e0bfca15 	stw	r2,-216(fp)
 2010170:	94800204 	addi	r18,r18,8
 2010174:	e0bfc917 	ldw	r2,-220(fp)
 2010178:	10800044 	addi	r2,r2,1
 201017c:	e0bfc915 	stw	r2,-220(fp)
 2010180:	e0bfc917 	ldw	r2,-220(fp)
 2010184:	10800210 	cmplti	r2,r2,8
 2010188:	1000071e 	bne	r2,zero,20101a8 <___vfiprintf_internal_r+0xfbc>
 201018c:	e0bfc804 	addi	r2,fp,-224
 2010190:	100d883a 	mov	r6,r2
 2010194:	e17fe717 	ldw	r5,-100(fp)
 2010198:	e13fe617 	ldw	r4,-104(fp)
 201019c:	200ef700 	call	200ef70 <__sprint_r>
 20101a0:	10009b1e 	bne	r2,zero,2010410 <___vfiprintf_internal_r+0x1224>
 20101a4:	e4bfcb04 	addi	r18,fp,-212
 20101a8:	843ffc04 	addi	r16,r16,-16
 20101ac:	80800448 	cmpgei	r2,r16,17
 20101b0:	103fe71e 	bne	r2,zero,2010150 <___vfiprintf_internal_r+0xf64>
 20101b4:	008080b4 	movhi	r2,514
 20101b8:	10ba8d84 	addi	r2,r2,-5578
 20101bc:	90800015 	stw	r2,0(r18)
 20101c0:	8005883a 	mov	r2,r16
 20101c4:	90800115 	stw	r2,4(r18)
 20101c8:	e0bfca17 	ldw	r2,-216(fp)
 20101cc:	8007883a 	mov	r3,r16
 20101d0:	10c5883a 	add	r2,r2,r3
 20101d4:	e0bfca15 	stw	r2,-216(fp)
 20101d8:	94800204 	addi	r18,r18,8
 20101dc:	e0bfc917 	ldw	r2,-220(fp)
 20101e0:	10800044 	addi	r2,r2,1
 20101e4:	e0bfc915 	stw	r2,-220(fp)
 20101e8:	e0bfc917 	ldw	r2,-220(fp)
 20101ec:	10800210 	cmplti	r2,r2,8
 20101f0:	1000071e 	bne	r2,zero,2010210 <___vfiprintf_internal_r+0x1024>
 20101f4:	e0bfc804 	addi	r2,fp,-224
 20101f8:	100d883a 	mov	r6,r2
 20101fc:	e17fe717 	ldw	r5,-100(fp)
 2010200:	e13fe617 	ldw	r4,-104(fp)
 2010204:	200ef700 	call	200ef70 <__sprint_r>
 2010208:	1000831e 	bne	r2,zero,2010418 <___vfiprintf_internal_r+0x122c>
 201020c:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010210:	95000015 	stw	r20,0(r18)
 2010214:	e0bfc117 	ldw	r2,-252(fp)
 2010218:	90800115 	stw	r2,4(r18)
 201021c:	e0ffca17 	ldw	r3,-216(fp)
 2010220:	e0bfc117 	ldw	r2,-252(fp)
 2010224:	1885883a 	add	r2,r3,r2
 2010228:	e0bfca15 	stw	r2,-216(fp)
 201022c:	94800204 	addi	r18,r18,8
 2010230:	e0bfc917 	ldw	r2,-220(fp)
 2010234:	10800044 	addi	r2,r2,1
 2010238:	e0bfc915 	stw	r2,-220(fp)
 201023c:	e0bfc917 	ldw	r2,-220(fp)
 2010240:	10800210 	cmplti	r2,r2,8
 2010244:	1000071e 	bne	r2,zero,2010264 <___vfiprintf_internal_r+0x1078>
 2010248:	e0bfc804 	addi	r2,fp,-224
 201024c:	100d883a 	mov	r6,r2
 2010250:	e17fe717 	ldw	r5,-100(fp)
 2010254:	e13fe617 	ldw	r4,-104(fp)
 2010258:	200ef700 	call	200ef70 <__sprint_r>
 201025c:	1000701e 	bne	r2,zero,2010420 <___vfiprintf_internal_r+0x1234>
 2010260:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2010264:	9880010c 	andi	r2,r19,4
 2010268:	10003526 	beq	r2,zero,2010340 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 201026c:	e0ffba17 	ldw	r3,-280(fp)
 2010270:	e0bfc017 	ldw	r2,-256(fp)
 2010274:	18a1c83a 	sub	r16,r3,r2
 2010278:	0400310e 	bge	zero,r16,2010340 <___vfiprintf_internal_r+0x1154>
 201027c:	00001706 	br	20102dc <___vfiprintf_internal_r+0x10f0>
 2010280:	008080b4 	movhi	r2,514
 2010284:	10ba8984 	addi	r2,r2,-5594
 2010288:	90800015 	stw	r2,0(r18)
 201028c:	00800404 	movi	r2,16
 2010290:	90800115 	stw	r2,4(r18)
 2010294:	e0bfca17 	ldw	r2,-216(fp)
 2010298:	10800404 	addi	r2,r2,16
 201029c:	e0bfca15 	stw	r2,-216(fp)
 20102a0:	94800204 	addi	r18,r18,8
 20102a4:	e0bfc917 	ldw	r2,-220(fp)
 20102a8:	10800044 	addi	r2,r2,1
 20102ac:	e0bfc915 	stw	r2,-220(fp)
 20102b0:	e0bfc917 	ldw	r2,-220(fp)
 20102b4:	10800210 	cmplti	r2,r2,8
 20102b8:	1000071e 	bne	r2,zero,20102d8 <___vfiprintf_internal_r+0x10ec>
 20102bc:	e0bfc804 	addi	r2,fp,-224
 20102c0:	100d883a 	mov	r6,r2
 20102c4:	e17fe717 	ldw	r5,-100(fp)
 20102c8:	e13fe617 	ldw	r4,-104(fp)
 20102cc:	200ef700 	call	200ef70 <__sprint_r>
 20102d0:	1000551e 	bne	r2,zero,2010428 <___vfiprintf_internal_r+0x123c>
 20102d4:	e4bfcb04 	addi	r18,fp,-212
 20102d8:	843ffc04 	addi	r16,r16,-16
 20102dc:	80800448 	cmpgei	r2,r16,17
 20102e0:	103fe71e 	bne	r2,zero,2010280 <___vfiprintf_internal_r+0x1094>
 20102e4:	008080b4 	movhi	r2,514
 20102e8:	10ba8984 	addi	r2,r2,-5594
 20102ec:	90800015 	stw	r2,0(r18)
 20102f0:	8005883a 	mov	r2,r16
 20102f4:	90800115 	stw	r2,4(r18)
 20102f8:	e0bfca17 	ldw	r2,-216(fp)
 20102fc:	8007883a 	mov	r3,r16
 2010300:	10c5883a 	add	r2,r2,r3
 2010304:	e0bfca15 	stw	r2,-216(fp)
 2010308:	94800204 	addi	r18,r18,8
 201030c:	e0bfc917 	ldw	r2,-220(fp)
 2010310:	10800044 	addi	r2,r2,1
 2010314:	e0bfc915 	stw	r2,-220(fp)
 2010318:	e0bfc917 	ldw	r2,-220(fp)
 201031c:	10800210 	cmplti	r2,r2,8
 2010320:	1000071e 	bne	r2,zero,2010340 <___vfiprintf_internal_r+0x1154>
 2010324:	e0bfc804 	addi	r2,fp,-224
 2010328:	100d883a 	mov	r6,r2
 201032c:	e17fe717 	ldw	r5,-100(fp)
 2010330:	e13fe617 	ldw	r4,-104(fp)
 2010334:	200ef700 	call	200ef70 <__sprint_r>
 2010338:	10003d1e 	bne	r2,zero,2010430 <___vfiprintf_internal_r+0x1244>
 201033c:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2010340:	e0ffba17 	ldw	r3,-280(fp)
 2010344:	e0bfc017 	ldw	r2,-256(fp)
 2010348:	10c0010e 	bge	r2,r3,2010350 <___vfiprintf_internal_r+0x1164>
 201034c:	1805883a 	mov	r2,r3
 2010350:	e0ffb917 	ldw	r3,-284(fp)
 2010354:	1885883a 	add	r2,r3,r2
 2010358:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 201035c:	e0bfca17 	ldw	r2,-216(fp)
 2010360:	10000626 	beq	r2,zero,201037c <___vfiprintf_internal_r+0x1190>
 2010364:	e0bfc804 	addi	r2,fp,-224
 2010368:	100d883a 	mov	r6,r2
 201036c:	e17fe717 	ldw	r5,-100(fp)
 2010370:	e13fe617 	ldw	r4,-104(fp)
 2010374:	200ef700 	call	200ef70 <__sprint_r>
 2010378:	10002f1e 	bne	r2,zero,2010438 <___vfiprintf_internal_r+0x124c>
 201037c:	e03fc915 	stw	zero,-220(fp)
 2010380:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 2010384:	e0bfc317 	ldw	r2,-244(fp)
 2010388:	103bea26 	beq	r2,zero,200f334 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 201038c:	e17fc317 	ldw	r5,-244(fp)
 2010390:	e13fe617 	ldw	r4,-104(fp)
 2010394:	2009f740 	call	2009f74 <_free_r>
			malloc_buf = NULL;
 2010398:	e03fc315 	stw	zero,-244(fp)
		}
	}
 201039c:	003be506 	br	200f334 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 20103a0:	0001883a 	nop
 20103a4:	00000106 	br	20103ac <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 20103a8:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20103ac:	e0bfca17 	ldw	r2,-216(fp)
 20103b0:	10000626 	beq	r2,zero,20103cc <___vfiprintf_internal_r+0x11e0>
 20103b4:	e0bfc804 	addi	r2,fp,-224
 20103b8:	100d883a 	mov	r6,r2
 20103bc:	e17fe717 	ldw	r5,-100(fp)
 20103c0:	e13fe617 	ldw	r4,-104(fp)
 20103c4:	200ef700 	call	200ef70 <__sprint_r>
 20103c8:	10001d1e 	bne	r2,zero,2010440 <___vfiprintf_internal_r+0x1254>
 20103cc:	e03fc915 	stw	zero,-220(fp)
 20103d0:	e4bfcb04 	addi	r18,fp,-212
 20103d4:	00001b06 	br	2010444 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 20103d8:	0001883a 	nop
 20103dc:	00001906 	br	2010444 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 20103e0:	0001883a 	nop
 20103e4:	00001706 	br	2010444 <___vfiprintf_internal_r+0x1258>
 20103e8:	0001883a 	nop
 20103ec:	00001506 	br	2010444 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 20103f0:	0001883a 	nop
 20103f4:	00001306 	br	2010444 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 20103f8:	0001883a 	nop
 20103fc:	00001106 	br	2010444 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2010400:	0001883a 	nop
 2010404:	00000f06 	br	2010444 <___vfiprintf_internal_r+0x1258>
 2010408:	0001883a 	nop
 201040c:	00000d06 	br	2010444 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2010410:	0001883a 	nop
 2010414:	00000b06 	br	2010444 <___vfiprintf_internal_r+0x1258>
 2010418:	0001883a 	nop
 201041c:	00000906 	br	2010444 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010420:	0001883a 	nop
 2010424:	00000706 	br	2010444 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2010428:	0001883a 	nop
 201042c:	00000506 	br	2010444 <___vfiprintf_internal_r+0x1258>
 2010430:	0001883a 	nop
 2010434:	00000306 	br	2010444 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2010438:	0001883a 	nop
 201043c:	00000106 	br	2010444 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2010440:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2010444:	e0bfc317 	ldw	r2,-244(fp)
 2010448:	10000326 	beq	r2,zero,2010458 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 201044c:	e17fc317 	ldw	r5,-244(fp)
 2010450:	e13fe617 	ldw	r4,-104(fp)
 2010454:	2009f740 	call	2009f74 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2010458:	e0bfe717 	ldw	r2,-100(fp)
 201045c:	1080030b 	ldhu	r2,12(r2)
 2010460:	10bfffcc 	andi	r2,r2,65535
 2010464:	1080100c 	andi	r2,r2,64
 2010468:	1000021e 	bne	r2,zero,2010474 <___vfiprintf_internal_r+0x1288>
 201046c:	e0bfb917 	ldw	r2,-284(fp)
 2010470:	00000206 	br	201047c <___vfiprintf_internal_r+0x1290>
 2010474:	00bfffc4 	movi	r2,-1
 2010478:	0001883a 	nop
	/* NOTREACHED */
}
 201047c:	e6fff804 	addi	sp,fp,-32
 2010480:	dfc00917 	ldw	ra,36(sp)
 2010484:	df000817 	ldw	fp,32(sp)
 2010488:	ddc00717 	ldw	r23,28(sp)
 201048c:	dd800617 	ldw	r22,24(sp)
 2010490:	dd400517 	ldw	r21,20(sp)
 2010494:	dd000417 	ldw	r20,16(sp)
 2010498:	dcc00317 	ldw	r19,12(sp)
 201049c:	dc800217 	ldw	r18,8(sp)
 20104a0:	dc400117 	ldw	r17,4(sp)
 20104a4:	dc000017 	ldw	r16,0(sp)
 20104a8:	dec00a04 	addi	sp,sp,40
 20104ac:	f800283a 	ret

020104b0 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 20104b0:	defff904 	addi	sp,sp,-28
 20104b4:	dfc00615 	stw	ra,24(sp)
 20104b8:	df000515 	stw	fp,20(sp)
 20104bc:	df000504 	addi	fp,sp,20
 20104c0:	e13ffc15 	stw	r4,-16(fp)
 20104c4:	e17ffd15 	stw	r5,-12(fp)
 20104c8:	e1bffe15 	stw	r6,-8(fp)
 20104cc:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 20104d0:	d0272915 	stw	zero,-25436(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 20104d4:	e1bfff17 	ldw	r6,-4(fp)
 20104d8:	e17ffe17 	ldw	r5,-8(fp)
 20104dc:	e13ffd17 	ldw	r4,-12(fp)
 20104e0:	201382c0 	call	201382c <write>
 20104e4:	e0bffb15 	stw	r2,-20(fp)
 20104e8:	e0bffb17 	ldw	r2,-20(fp)
 20104ec:	10bfffd8 	cmpnei	r2,r2,-1
 20104f0:	1000051e 	bne	r2,zero,2010508 <_write_r+0x58>
 20104f4:	d0a72917 	ldw	r2,-25436(gp)
 20104f8:	10000326 	beq	r2,zero,2010508 <_write_r+0x58>
    ptr->_errno = errno;
 20104fc:	d0e72917 	ldw	r3,-25436(gp)
 2010500:	e0bffc17 	ldw	r2,-16(fp)
 2010504:	10c00015 	stw	r3,0(r2)
  return ret;
 2010508:	e0bffb17 	ldw	r2,-20(fp)
}
 201050c:	e037883a 	mov	sp,fp
 2010510:	dfc00117 	ldw	ra,4(sp)
 2010514:	df000017 	ldw	fp,0(sp)
 2010518:	dec00204 	addi	sp,sp,8
 201051c:	f800283a 	ret

02010520 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010520:	defffb04 	addi	sp,sp,-20
 2010524:	dfc00415 	stw	ra,16(sp)
 2010528:	df000315 	stw	fp,12(sp)
 201052c:	df000304 	addi	fp,sp,12
 2010530:	e13ffe15 	stw	r4,-8(fp)
 2010534:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2010538:	d0272915 	stw	zero,-25436(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 201053c:	e13fff17 	ldw	r4,-4(fp)
 2010540:	20130240 	call	2013024 <close>
 2010544:	e0bffd15 	stw	r2,-12(fp)
 2010548:	e0bffd17 	ldw	r2,-12(fp)
 201054c:	10bfffd8 	cmpnei	r2,r2,-1
 2010550:	1000051e 	bne	r2,zero,2010568 <_close_r+0x48>
 2010554:	d0a72917 	ldw	r2,-25436(gp)
 2010558:	10000326 	beq	r2,zero,2010568 <_close_r+0x48>
    ptr->_errno = errno;
 201055c:	d0e72917 	ldw	r3,-25436(gp)
 2010560:	e0bffe17 	ldw	r2,-8(fp)
 2010564:	10c00015 	stw	r3,0(r2)
  return ret;
 2010568:	e0bffd17 	ldw	r2,-12(fp)
}
 201056c:	e037883a 	mov	sp,fp
 2010570:	dfc00117 	ldw	ra,4(sp)
 2010574:	df000017 	ldw	fp,0(sp)
 2010578:	dec00204 	addi	sp,sp,8
 201057c:	f800283a 	ret

02010580 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 2010580:	defff504 	addi	sp,sp,-44
 2010584:	dfc00a15 	stw	ra,40(sp)
 2010588:	df000915 	stw	fp,36(sp)
 201058c:	df000904 	addi	fp,sp,36
 2010590:	e13ffd15 	stw	r4,-12(fp)
 2010594:	e17ffe15 	stw	r5,-8(fp)
 2010598:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 201059c:	e0fffe17 	ldw	r3,-8(fp)
 20105a0:	e0bfff17 	ldw	r2,-4(fp)
 20105a4:	1885383a 	mul	r2,r3,r2
 20105a8:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 20105ac:	e17ff817 	ldw	r5,-32(fp)
 20105b0:	e13ffd17 	ldw	r4,-12(fp)
 20105b4:	200b5b40 	call	200b5b4 <_malloc_r>
 20105b8:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 20105bc:	e0bff917 	ldw	r2,-28(fp)
 20105c0:	1000021e 	bne	r2,zero,20105cc <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 20105c4:	0005883a 	mov	r2,zero
 20105c8:	00004106 	br	20106d0 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 20105cc:	e0bff917 	ldw	r2,-28(fp)
 20105d0:	10bffe04 	addi	r2,r2,-8
 20105d4:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 20105d8:	e0bffa17 	ldw	r2,-24(fp)
 20105dc:	10c00117 	ldw	r3,4(r2)
 20105e0:	00bfff04 	movi	r2,-4
 20105e4:	1884703a 	and	r2,r3,r2
 20105e8:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 20105ec:	e0bffb17 	ldw	r2,-20(fp)
 20105f0:	10bfff04 	addi	r2,r2,-4
 20105f4:	e0bffc15 	stw	r2,-16(fp)
 20105f8:	e0bffc17 	ldw	r2,-16(fp)
 20105fc:	10800968 	cmpgeui	r2,r2,37
 2010600:	10002e1e 	bne	r2,zero,20106bc <_calloc_r+0x13c>
 2010604:	e0bff917 	ldw	r2,-28(fp)
 2010608:	e0bff715 	stw	r2,-36(fp)
 201060c:	e0bffc17 	ldw	r2,-16(fp)
 2010610:	10800530 	cmpltui	r2,r2,20
 2010614:	10001e1e 	bne	r2,zero,2010690 <_calloc_r+0x110>
 2010618:	e0bff717 	ldw	r2,-36(fp)
 201061c:	10c00104 	addi	r3,r2,4
 2010620:	e0fff715 	stw	r3,-36(fp)
 2010624:	10000015 	stw	zero,0(r2)
 2010628:	e0bff717 	ldw	r2,-36(fp)
 201062c:	10c00104 	addi	r3,r2,4
 2010630:	e0fff715 	stw	r3,-36(fp)
 2010634:	10000015 	stw	zero,0(r2)
 2010638:	e0bffc17 	ldw	r2,-16(fp)
 201063c:	10800730 	cmpltui	r2,r2,28
 2010640:	1000131e 	bne	r2,zero,2010690 <_calloc_r+0x110>
 2010644:	e0bff717 	ldw	r2,-36(fp)
 2010648:	10c00104 	addi	r3,r2,4
 201064c:	e0fff715 	stw	r3,-36(fp)
 2010650:	10000015 	stw	zero,0(r2)
 2010654:	e0bff717 	ldw	r2,-36(fp)
 2010658:	10c00104 	addi	r3,r2,4
 201065c:	e0fff715 	stw	r3,-36(fp)
 2010660:	10000015 	stw	zero,0(r2)
 2010664:	e0bffc17 	ldw	r2,-16(fp)
 2010668:	10800930 	cmpltui	r2,r2,36
 201066c:	1000081e 	bne	r2,zero,2010690 <_calloc_r+0x110>
 2010670:	e0bff717 	ldw	r2,-36(fp)
 2010674:	10c00104 	addi	r3,r2,4
 2010678:	e0fff715 	stw	r3,-36(fp)
 201067c:	10000015 	stw	zero,0(r2)
 2010680:	e0bff717 	ldw	r2,-36(fp)
 2010684:	10c00104 	addi	r3,r2,4
 2010688:	e0fff715 	stw	r3,-36(fp)
 201068c:	10000015 	stw	zero,0(r2)
 2010690:	e0bff717 	ldw	r2,-36(fp)
 2010694:	10c00104 	addi	r3,r2,4
 2010698:	e0fff715 	stw	r3,-36(fp)
 201069c:	10000015 	stw	zero,0(r2)
 20106a0:	e0bff717 	ldw	r2,-36(fp)
 20106a4:	10c00104 	addi	r3,r2,4
 20106a8:	e0fff715 	stw	r3,-36(fp)
 20106ac:	10000015 	stw	zero,0(r2)
 20106b0:	e0bff717 	ldw	r2,-36(fp)
 20106b4:	10000015 	stw	zero,0(r2)
 20106b8:	00000406 	br	20106cc <_calloc_r+0x14c>
 20106bc:	e1bffc17 	ldw	r6,-16(fp)
 20106c0:	000b883a 	mov	r5,zero
 20106c4:	e13ff917 	ldw	r4,-28(fp)
 20106c8:	2004ad40 	call	2004ad4 <memset>
    return mem;
 20106cc:	e0bff917 	ldw	r2,-28(fp)
  }
}
 20106d0:	e037883a 	mov	sp,fp
 20106d4:	dfc00117 	ldw	ra,4(sp)
 20106d8:	df000017 	ldw	fp,0(sp)
 20106dc:	dec00204 	addi	sp,sp,8
 20106e0:	f800283a 	ret

020106e4 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 20106e4:	defffa04 	addi	sp,sp,-24
 20106e8:	dfc00515 	stw	ra,20(sp)
 20106ec:	df000415 	stw	fp,16(sp)
 20106f0:	dc000315 	stw	r16,12(sp)
 20106f4:	df000404 	addi	fp,sp,16
 20106f8:	e13ffe15 	stw	r4,-8(fp)
 20106fc:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2010700:	8000021e 	bne	r16,zero,201070c <_fclose_r+0x28>
    return (0);			/* on NULL */
 2010704:	0005883a 	mov	r2,zero
 2010708:	00003b06 	br	20107f8 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 201070c:	e0bffe17 	ldw	r2,-8(fp)
 2010710:	e0bffd15 	stw	r2,-12(fp)
 2010714:	e0bffd17 	ldw	r2,-12(fp)
 2010718:	10000526 	beq	r2,zero,2010730 <_fclose_r+0x4c>
 201071c:	e0bffd17 	ldw	r2,-12(fp)
 2010720:	10800e17 	ldw	r2,56(r2)
 2010724:	1000021e 	bne	r2,zero,2010730 <_fclose_r+0x4c>
 2010728:	e13ffd17 	ldw	r4,-12(fp)
 201072c:	2009d540 	call	2009d54 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 2010730:	8080030b 	ldhu	r2,12(r16)
 2010734:	10bfffcc 	andi	r2,r2,65535
 2010738:	10a0001c 	xori	r2,r2,32768
 201073c:	10a00004 	addi	r2,r2,-32768
 2010740:	1000021e 	bne	r2,zero,201074c <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 2010744:	0005883a 	mov	r2,zero
 2010748:	00002b06 	br	20107f8 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 201074c:	800b883a 	mov	r5,r16
 2010750:	e13ffe17 	ldw	r4,-8(fp)
 2010754:	20095d00 	call	20095d0 <__sflush_r>
 2010758:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 201075c:	80800b17 	ldw	r2,44(r16)
 2010760:	10000826 	beq	r2,zero,2010784 <_fclose_r+0xa0>
 2010764:	80800b17 	ldw	r2,44(r16)
 2010768:	80c00717 	ldw	r3,28(r16)
 201076c:	180b883a 	mov	r5,r3
 2010770:	e13ffe17 	ldw	r4,-8(fp)
 2010774:	103ee83a 	callr	r2
 2010778:	1000020e 	bge	r2,zero,2010784 <_fclose_r+0xa0>
    r = EOF;
 201077c:	00bfffc4 	movi	r2,-1
 2010780:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 2010784:	8080030b 	ldhu	r2,12(r16)
 2010788:	10bfffcc 	andi	r2,r2,65535
 201078c:	1080200c 	andi	r2,r2,128
 2010790:	10000426 	beq	r2,zero,20107a4 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 2010794:	80800417 	ldw	r2,16(r16)
 2010798:	100b883a 	mov	r5,r2
 201079c:	e13ffe17 	ldw	r4,-8(fp)
 20107a0:	2009f740 	call	2009f74 <_free_r>
  if (HASUB (fp))
 20107a4:	80800c17 	ldw	r2,48(r16)
 20107a8:	10000826 	beq	r2,zero,20107cc <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 20107ac:	80c00c17 	ldw	r3,48(r16)
 20107b0:	80801004 	addi	r2,r16,64
 20107b4:	18800426 	beq	r3,r2,20107c8 <_fclose_r+0xe4>
 20107b8:	80800c17 	ldw	r2,48(r16)
 20107bc:	100b883a 	mov	r5,r2
 20107c0:	e13ffe17 	ldw	r4,-8(fp)
 20107c4:	2009f740 	call	2009f74 <_free_r>
 20107c8:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 20107cc:	80801117 	ldw	r2,68(r16)
 20107d0:	10000526 	beq	r2,zero,20107e8 <_fclose_r+0x104>
    FREELB (rptr, fp);
 20107d4:	80801117 	ldw	r2,68(r16)
 20107d8:	100b883a 	mov	r5,r2
 20107dc:	e13ffe17 	ldw	r4,-8(fp)
 20107e0:	2009f740 	call	2009f74 <_free_r>
 20107e4:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 20107e8:	2009e2c0 	call	2009e2c <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 20107ec:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 20107f0:	2009e4c0 	call	2009e4c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 20107f4:	e0bffc17 	ldw	r2,-16(fp)
}
 20107f8:	e6ffff04 	addi	sp,fp,-4
 20107fc:	dfc00217 	ldw	ra,8(sp)
 2010800:	df000117 	ldw	fp,4(sp)
 2010804:	dc000017 	ldw	r16,0(sp)
 2010808:	dec00304 	addi	sp,sp,12
 201080c:	f800283a 	ret

02010810 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2010810:	defffe04 	addi	sp,sp,-8
 2010814:	dfc00115 	stw	ra,4(sp)
 2010818:	df000015 	stw	fp,0(sp)
 201081c:	d839883a 	mov	fp,sp
 2010820:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 2010824:	d0a00017 	ldw	r2,-32768(gp)
 2010828:	180b883a 	mov	r5,r3
 201082c:	1009883a 	mov	r4,r2
 2010830:	20106e40 	call	20106e4 <_fclose_r>
}
 2010834:	e037883a 	mov	sp,fp
 2010838:	dfc00117 	ldw	ra,4(sp)
 201083c:	df000017 	ldw	fp,0(sp)
 2010840:	dec00204 	addi	sp,sp,8
 2010844:	f800283a 	ret

02010848 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010848:	defff804 	addi	sp,sp,-32
 201084c:	dfc00715 	stw	ra,28(sp)
 2010850:	df000615 	stw	fp,24(sp)
 2010854:	df000604 	addi	fp,sp,24
 2010858:	e13ffd15 	stw	r4,-12(fp)
 201085c:	e17ffe15 	stw	r5,-8(fp)
 2010860:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 2010864:	200aed80 	call	200aed8 <__locale_mb_cur_max>
 2010868:	10800058 	cmpnei	r2,r2,1
 201086c:	10000a1e 	bne	r2,zero,2010898 <__fputwc+0x50>
 2010870:	e0bffe17 	ldw	r2,-8(fp)
 2010874:	0080080e 	bge	zero,r2,2010898 <__fputwc+0x50>
 2010878:	e0bffe17 	ldw	r2,-8(fp)
 201087c:	10804008 	cmpgei	r2,r2,256
 2010880:	1000051e 	bne	r2,zero,2010898 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 2010884:	e0bffe17 	ldw	r2,-8(fp)
 2010888:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 201088c:	00800044 	movi	r2,1
 2010890:	e0bffb15 	stw	r2,-20(fp)
 2010894:	00001406 	br	20108e8 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 2010898:	e0bfff17 	ldw	r2,-4(fp)
 201089c:	10c01704 	addi	r3,r2,92
 20108a0:	e0bffc04 	addi	r2,fp,-16
 20108a4:	180f883a 	mov	r7,r3
 20108a8:	e1bffe17 	ldw	r6,-8(fp)
 20108ac:	100b883a 	mov	r5,r2
 20108b0:	e13ffd17 	ldw	r4,-12(fp)
 20108b4:	2010e7c0 	call	2010e7c <_wcrtomb_r>
 20108b8:	e0bffb15 	stw	r2,-20(fp)
 20108bc:	e0bffb17 	ldw	r2,-20(fp)
 20108c0:	10bfffd8 	cmpnei	r2,r2,-1
 20108c4:	1000081e 	bne	r2,zero,20108e8 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 20108c8:	e0bfff17 	ldw	r2,-4(fp)
 20108cc:	1080030b 	ldhu	r2,12(r2)
 20108d0:	10801014 	ori	r2,r2,64
 20108d4:	1007883a 	mov	r3,r2
 20108d8:	e0bfff17 	ldw	r2,-4(fp)
 20108dc:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 20108e0:	00bfffc4 	movi	r2,-1
 20108e4:	00005006 	br	2010a28 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 20108e8:	e03ffa15 	stw	zero,-24(fp)
 20108ec:	00004a06 	br	2010a18 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 20108f0:	e0bfff17 	ldw	r2,-4(fp)
 20108f4:	10800217 	ldw	r2,8(r2)
 20108f8:	10ffffc4 	addi	r3,r2,-1
 20108fc:	e0bfff17 	ldw	r2,-4(fp)
 2010900:	10c00215 	stw	r3,8(r2)
 2010904:	e0bfff17 	ldw	r2,-4(fp)
 2010908:	10800217 	ldw	r2,8(r2)
 201090c:	10002c0e 	bge	r2,zero,20109c0 <__fputwc+0x178>
 2010910:	e0bfff17 	ldw	r2,-4(fp)
 2010914:	10c00217 	ldw	r3,8(r2)
 2010918:	e0bfff17 	ldw	r2,-4(fp)
 201091c:	10800617 	ldw	r2,24(r2)
 2010920:	18801c16 	blt	r3,r2,2010994 <__fputwc+0x14c>
 2010924:	e0bfff17 	ldw	r2,-4(fp)
 2010928:	10800017 	ldw	r2,0(r2)
 201092c:	e13ffc04 	addi	r4,fp,-16
 2010930:	e0fffa17 	ldw	r3,-24(fp)
 2010934:	20c7883a 	add	r3,r4,r3
 2010938:	18c00003 	ldbu	r3,0(r3)
 201093c:	10c00005 	stb	r3,0(r2)
 2010940:	e0bfff17 	ldw	r2,-4(fp)
 2010944:	10800017 	ldw	r2,0(r2)
 2010948:	10800003 	ldbu	r2,0(r2)
 201094c:	10803fcc 	andi	r2,r2,255
 2010950:	108002a0 	cmpeqi	r2,r2,10
 2010954:	1000091e 	bne	r2,zero,201097c <__fputwc+0x134>
 2010958:	e0bfff17 	ldw	r2,-4(fp)
 201095c:	10800017 	ldw	r2,0(r2)
 2010960:	11000044 	addi	r4,r2,1
 2010964:	e0ffff17 	ldw	r3,-4(fp)
 2010968:	19000015 	stw	r4,0(r3)
 201096c:	10800003 	ldbu	r2,0(r2)
 2010970:	10803fcc 	andi	r2,r2,255
 2010974:	10bfffe0 	cmpeqi	r2,r2,-1
 2010978:	00002006 	br	20109fc <__fputwc+0x1b4>
 201097c:	e1bfff17 	ldw	r6,-4(fp)
 2010980:	01400284 	movi	r5,10
 2010984:	e13ffd17 	ldw	r4,-12(fp)
 2010988:	2010cd40 	call	2010cd4 <__swbuf_r>
 201098c:	10bfffe0 	cmpeqi	r2,r2,-1
 2010990:	00001a06 	br	20109fc <__fputwc+0x1b4>
 2010994:	e0fffc04 	addi	r3,fp,-16
 2010998:	e0bffa17 	ldw	r2,-24(fp)
 201099c:	1885883a 	add	r2,r3,r2
 20109a0:	10800003 	ldbu	r2,0(r2)
 20109a4:	10803fcc 	andi	r2,r2,255
 20109a8:	e1bfff17 	ldw	r6,-4(fp)
 20109ac:	100b883a 	mov	r5,r2
 20109b0:	e13ffd17 	ldw	r4,-12(fp)
 20109b4:	2010cd40 	call	2010cd4 <__swbuf_r>
 20109b8:	10bfffe0 	cmpeqi	r2,r2,-1
 20109bc:	00000f06 	br	20109fc <__fputwc+0x1b4>
 20109c0:	e0bfff17 	ldw	r2,-4(fp)
 20109c4:	10800017 	ldw	r2,0(r2)
 20109c8:	e13ffc04 	addi	r4,fp,-16
 20109cc:	e0fffa17 	ldw	r3,-24(fp)
 20109d0:	20c7883a 	add	r3,r4,r3
 20109d4:	18c00003 	ldbu	r3,0(r3)
 20109d8:	10c00005 	stb	r3,0(r2)
 20109dc:	e0bfff17 	ldw	r2,-4(fp)
 20109e0:	10800017 	ldw	r2,0(r2)
 20109e4:	11000044 	addi	r4,r2,1
 20109e8:	e0ffff17 	ldw	r3,-4(fp)
 20109ec:	19000015 	stw	r4,0(r3)
 20109f0:	10800003 	ldbu	r2,0(r2)
 20109f4:	10803fcc 	andi	r2,r2,255
 20109f8:	10bfffe0 	cmpeqi	r2,r2,-1
 20109fc:	10803fcc 	andi	r2,r2,255
 2010a00:	10000226 	beq	r2,zero,2010a0c <__fputwc+0x1c4>
      return WEOF;
 2010a04:	00bfffc4 	movi	r2,-1
 2010a08:	00000706 	br	2010a28 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2010a0c:	e0bffa17 	ldw	r2,-24(fp)
 2010a10:	10800044 	addi	r2,r2,1
 2010a14:	e0bffa15 	stw	r2,-24(fp)
 2010a18:	e0fffa17 	ldw	r3,-24(fp)
 2010a1c:	e0bffb17 	ldw	r2,-20(fp)
 2010a20:	18bfb336 	bltu	r3,r2,20108f0 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2010a24:	e0bffe17 	ldw	r2,-8(fp)
}
 2010a28:	e037883a 	mov	sp,fp
 2010a2c:	dfc00117 	ldw	ra,4(sp)
 2010a30:	df000017 	ldw	fp,0(sp)
 2010a34:	dec00204 	addi	sp,sp,8
 2010a38:	f800283a 	ret

02010a3c <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010a3c:	defffa04 	addi	sp,sp,-24
 2010a40:	dfc00515 	stw	ra,20(sp)
 2010a44:	df000415 	stw	fp,16(sp)
 2010a48:	df000404 	addi	fp,sp,16
 2010a4c:	e13ffd15 	stw	r4,-12(fp)
 2010a50:	e17ffe15 	stw	r5,-8(fp)
 2010a54:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 2010a58:	e0bfff17 	ldw	r2,-4(fp)
 2010a5c:	1080030b 	ldhu	r2,12(r2)
 2010a60:	10bfffcc 	andi	r2,r2,65535
 2010a64:	1088000c 	andi	r2,r2,8192
 2010a68:	10000b1e 	bne	r2,zero,2010a98 <_fputwc_r+0x5c>
 2010a6c:	e0bfff17 	ldw	r2,-4(fp)
 2010a70:	1080030b 	ldhu	r2,12(r2)
 2010a74:	10880014 	ori	r2,r2,8192
 2010a78:	1007883a 	mov	r3,r2
 2010a7c:	e0bfff17 	ldw	r2,-4(fp)
 2010a80:	10c0030d 	sth	r3,12(r2)
 2010a84:	e0bfff17 	ldw	r2,-4(fp)
 2010a88:	10801917 	ldw	r2,100(r2)
 2010a8c:	10c80014 	ori	r3,r2,8192
 2010a90:	e0bfff17 	ldw	r2,-4(fp)
 2010a94:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 2010a98:	e1bfff17 	ldw	r6,-4(fp)
 2010a9c:	e17ffe17 	ldw	r5,-8(fp)
 2010aa0:	e13ffd17 	ldw	r4,-12(fp)
 2010aa4:	20108480 	call	2010848 <__fputwc>
 2010aa8:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2010aac:	e0bffc17 	ldw	r2,-16(fp)
}
 2010ab0:	e037883a 	mov	sp,fp
 2010ab4:	dfc00117 	ldw	ra,4(sp)
 2010ab8:	df000017 	ldw	fp,0(sp)
 2010abc:	dec00204 	addi	sp,sp,8
 2010ac0:	f800283a 	ret

02010ac4 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2010ac4:	defffa04 	addi	sp,sp,-24
 2010ac8:	dfc00515 	stw	ra,20(sp)
 2010acc:	df000415 	stw	fp,16(sp)
 2010ad0:	df000404 	addi	fp,sp,16
 2010ad4:	e13ffe15 	stw	r4,-8(fp)
 2010ad8:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2010adc:	d0a00017 	ldw	r2,-32768(gp)
 2010ae0:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2010ae4:	e0bffc17 	ldw	r2,-16(fp)
 2010ae8:	e0bffd15 	stw	r2,-12(fp)
 2010aec:	e0bffd17 	ldw	r2,-12(fp)
 2010af0:	10000526 	beq	r2,zero,2010b08 <fputwc+0x44>
 2010af4:	e0bffd17 	ldw	r2,-12(fp)
 2010af8:	10800e17 	ldw	r2,56(r2)
 2010afc:	1000021e 	bne	r2,zero,2010b08 <fputwc+0x44>
 2010b00:	e13ffd17 	ldw	r4,-12(fp)
 2010b04:	2009d540 	call	2009d54 <__sinit>
  return _fputwc_r (reent, wc, fp);
 2010b08:	e1bfff17 	ldw	r6,-4(fp)
 2010b0c:	e17ffe17 	ldw	r5,-8(fp)
 2010b10:	e13ffc17 	ldw	r4,-16(fp)
 2010b14:	2010a3c0 	call	2010a3c <_fputwc_r>
}
 2010b18:	e037883a 	mov	sp,fp
 2010b1c:	dfc00117 	ldw	ra,4(sp)
 2010b20:	df000017 	ldw	fp,0(sp)
 2010b24:	dec00204 	addi	sp,sp,8
 2010b28:	f800283a 	ret

02010b2c <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2010b2c:	defffa04 	addi	sp,sp,-24
 2010b30:	dfc00515 	stw	ra,20(sp)
 2010b34:	df000415 	stw	fp,16(sp)
 2010b38:	df000404 	addi	fp,sp,16
 2010b3c:	e13ffd15 	stw	r4,-12(fp)
 2010b40:	e17ffe15 	stw	r5,-8(fp)
 2010b44:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 2010b48:	d0272915 	stw	zero,-25436(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2010b4c:	e17fff17 	ldw	r5,-4(fp)
 2010b50:	e13ffe17 	ldw	r4,-8(fp)
 2010b54:	201315c0 	call	201315c <fstat>
 2010b58:	e0bffc15 	stw	r2,-16(fp)
 2010b5c:	e0bffc17 	ldw	r2,-16(fp)
 2010b60:	10bfffd8 	cmpnei	r2,r2,-1
 2010b64:	1000051e 	bne	r2,zero,2010b7c <_fstat_r+0x50>
 2010b68:	d0a72917 	ldw	r2,-25436(gp)
 2010b6c:	10000326 	beq	r2,zero,2010b7c <_fstat_r+0x50>
    ptr->_errno = errno;
 2010b70:	d0e72917 	ldw	r3,-25436(gp)
 2010b74:	e0bffd17 	ldw	r2,-12(fp)
 2010b78:	10c00015 	stw	r3,0(r2)
  return ret;
 2010b7c:	e0bffc17 	ldw	r2,-16(fp)
}
 2010b80:	e037883a 	mov	sp,fp
 2010b84:	dfc00117 	ldw	ra,4(sp)
 2010b88:	df000017 	ldw	fp,0(sp)
 2010b8c:	dec00204 	addi	sp,sp,8
 2010b90:	f800283a 	ret

02010b94 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010b94:	defffb04 	addi	sp,sp,-20
 2010b98:	dfc00415 	stw	ra,16(sp)
 2010b9c:	df000315 	stw	fp,12(sp)
 2010ba0:	df000304 	addi	fp,sp,12
 2010ba4:	e13ffe15 	stw	r4,-8(fp)
 2010ba8:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2010bac:	d0272915 	stw	zero,-25436(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 2010bb0:	e13fff17 	ldw	r4,-4(fp)
 2010bb4:	20132480 	call	2013248 <isatty>
 2010bb8:	e0bffd15 	stw	r2,-12(fp)
 2010bbc:	e0bffd17 	ldw	r2,-12(fp)
 2010bc0:	10bfffd8 	cmpnei	r2,r2,-1
 2010bc4:	1000051e 	bne	r2,zero,2010bdc <_isatty_r+0x48>
 2010bc8:	d0a72917 	ldw	r2,-25436(gp)
 2010bcc:	10000326 	beq	r2,zero,2010bdc <_isatty_r+0x48>
    ptr->_errno = errno;
 2010bd0:	d0e72917 	ldw	r3,-25436(gp)
 2010bd4:	e0bffe17 	ldw	r2,-8(fp)
 2010bd8:	10c00015 	stw	r3,0(r2)
  return ret;
 2010bdc:	e0bffd17 	ldw	r2,-12(fp)
}
 2010be0:	e037883a 	mov	sp,fp
 2010be4:	dfc00117 	ldw	ra,4(sp)
 2010be8:	df000017 	ldw	fp,0(sp)
 2010bec:	dec00204 	addi	sp,sp,8
 2010bf0:	f800283a 	ret

02010bf4 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2010bf4:	defff904 	addi	sp,sp,-28
 2010bf8:	dfc00615 	stw	ra,24(sp)
 2010bfc:	df000515 	stw	fp,20(sp)
 2010c00:	df000504 	addi	fp,sp,20
 2010c04:	e13ffc15 	stw	r4,-16(fp)
 2010c08:	e17ffd15 	stw	r5,-12(fp)
 2010c0c:	e1bffe15 	stw	r6,-8(fp)
 2010c10:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2010c14:	d0272915 	stw	zero,-25436(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2010c18:	e1bfff17 	ldw	r6,-4(fp)
 2010c1c:	e17ffe17 	ldw	r5,-8(fp)
 2010c20:	e13ffd17 	ldw	r4,-12(fp)
 2010c24:	20134140 	call	2013414 <lseek>
 2010c28:	e0bffb15 	stw	r2,-20(fp)
 2010c2c:	e0bffb17 	ldw	r2,-20(fp)
 2010c30:	10bfffd8 	cmpnei	r2,r2,-1
 2010c34:	1000051e 	bne	r2,zero,2010c4c <_lseek_r+0x58>
 2010c38:	d0a72917 	ldw	r2,-25436(gp)
 2010c3c:	10000326 	beq	r2,zero,2010c4c <_lseek_r+0x58>
    ptr->_errno = errno;
 2010c40:	d0e72917 	ldw	r3,-25436(gp)
 2010c44:	e0bffc17 	ldw	r2,-16(fp)
 2010c48:	10c00015 	stw	r3,0(r2)
  return ret;
 2010c4c:	e0bffb17 	ldw	r2,-20(fp)
}
 2010c50:	e037883a 	mov	sp,fp
 2010c54:	dfc00117 	ldw	ra,4(sp)
 2010c58:	df000017 	ldw	fp,0(sp)
 2010c5c:	dec00204 	addi	sp,sp,8
 2010c60:	f800283a 	ret

02010c64 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 2010c64:	defff904 	addi	sp,sp,-28
 2010c68:	dfc00615 	stw	ra,24(sp)
 2010c6c:	df000515 	stw	fp,20(sp)
 2010c70:	df000504 	addi	fp,sp,20
 2010c74:	e13ffc15 	stw	r4,-16(fp)
 2010c78:	e17ffd15 	stw	r5,-12(fp)
 2010c7c:	e1bffe15 	stw	r6,-8(fp)
 2010c80:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2010c84:	d0272915 	stw	zero,-25436(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 2010c88:	e1bfff17 	ldw	r6,-4(fp)
 2010c8c:	e17ffe17 	ldw	r5,-8(fp)
 2010c90:	e13ffd17 	ldw	r4,-12(fp)
 2010c94:	20135e00 	call	20135e0 <read>
 2010c98:	e0bffb15 	stw	r2,-20(fp)
 2010c9c:	e0bffb17 	ldw	r2,-20(fp)
 2010ca0:	10bfffd8 	cmpnei	r2,r2,-1
 2010ca4:	1000051e 	bne	r2,zero,2010cbc <_read_r+0x58>
 2010ca8:	d0a72917 	ldw	r2,-25436(gp)
 2010cac:	10000326 	beq	r2,zero,2010cbc <_read_r+0x58>
    ptr->_errno = errno;
 2010cb0:	d0e72917 	ldw	r3,-25436(gp)
 2010cb4:	e0bffc17 	ldw	r2,-16(fp)
 2010cb8:	10c00015 	stw	r3,0(r2)
  return ret;
 2010cbc:	e0bffb17 	ldw	r2,-20(fp)
}
 2010cc0:	e037883a 	mov	sp,fp
 2010cc4:	dfc00117 	ldw	ra,4(sp)
 2010cc8:	df000017 	ldw	fp,0(sp)
 2010ccc:	dec00204 	addi	sp,sp,8
 2010cd0:	f800283a 	ret

02010cd4 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2010cd4:	defff904 	addi	sp,sp,-28
 2010cd8:	dfc00615 	stw	ra,24(sp)
 2010cdc:	df000515 	stw	fp,20(sp)
 2010ce0:	dc800415 	stw	r18,16(sp)
 2010ce4:	dc400315 	stw	r17,12(sp)
 2010ce8:	dc000215 	stw	r16,8(sp)
 2010cec:	df000504 	addi	fp,sp,20
 2010cf0:	e13ffc15 	stw	r4,-16(fp)
 2010cf4:	2825883a 	mov	r18,r5
 2010cf8:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2010cfc:	e0bffc17 	ldw	r2,-16(fp)
 2010d00:	e0bffb15 	stw	r2,-20(fp)
 2010d04:	e0bffb17 	ldw	r2,-20(fp)
 2010d08:	10000526 	beq	r2,zero,2010d20 <__swbuf_r+0x4c>
 2010d0c:	e0bffb17 	ldw	r2,-20(fp)
 2010d10:	10800e17 	ldw	r2,56(r2)
 2010d14:	1000021e 	bne	r2,zero,2010d20 <__swbuf_r+0x4c>
 2010d18:	e13ffb17 	ldw	r4,-20(fp)
 2010d1c:	2009d540 	call	2009d54 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2010d20:	80800617 	ldw	r2,24(r16)
 2010d24:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 2010d28:	8080030b 	ldhu	r2,12(r16)
 2010d2c:	10bfffcc 	andi	r2,r2,65535
 2010d30:	1080020c 	andi	r2,r2,8
 2010d34:	10000226 	beq	r2,zero,2010d40 <__swbuf_r+0x6c>
 2010d38:	80800417 	ldw	r2,16(r16)
 2010d3c:	1000061e 	bne	r2,zero,2010d58 <__swbuf_r+0x84>
 2010d40:	800b883a 	mov	r5,r16
 2010d44:	e13ffc17 	ldw	r4,-16(fp)
 2010d48:	20075040 	call	2007504 <__swsetup_r>
 2010d4c:	10000226 	beq	r2,zero,2010d58 <__swbuf_r+0x84>
    return EOF;
 2010d50:	00bfffc4 	movi	r2,-1
 2010d54:	00003106 	br	2010e1c <__swbuf_r+0x148>
  c = (unsigned char) c;
 2010d58:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 2010d5c:	8080030b 	ldhu	r2,12(r16)
 2010d60:	10bfffcc 	andi	r2,r2,65535
 2010d64:	1088000c 	andi	r2,r2,8192
 2010d68:	1000071e 	bne	r2,zero,2010d88 <__swbuf_r+0xb4>
 2010d6c:	8080030b 	ldhu	r2,12(r16)
 2010d70:	10880014 	ori	r2,r2,8192
 2010d74:	8080030d 	sth	r2,12(r16)
 2010d78:	80c01917 	ldw	r3,100(r16)
 2010d7c:	00b7ffc4 	movi	r2,-8193
 2010d80:	1884703a 	and	r2,r3,r2
 2010d84:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 2010d88:	80800017 	ldw	r2,0(r16)
 2010d8c:	1007883a 	mov	r3,r2
 2010d90:	80800417 	ldw	r2,16(r16)
 2010d94:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 2010d98:	80800517 	ldw	r2,20(r16)
 2010d9c:	88800716 	blt	r17,r2,2010dbc <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 2010da0:	800b883a 	mov	r5,r16
 2010da4:	e13ffc17 	ldw	r4,-16(fp)
 2010da8:	20098d40 	call	20098d4 <_fflush_r>
 2010dac:	10000226 	beq	r2,zero,2010db8 <__swbuf_r+0xe4>
	return EOF;
 2010db0:	00bfffc4 	movi	r2,-1
 2010db4:	00001906 	br	2010e1c <__swbuf_r+0x148>
      n = 0;
 2010db8:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 2010dbc:	80800217 	ldw	r2,8(r16)
 2010dc0:	10bfffc4 	addi	r2,r2,-1
 2010dc4:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 2010dc8:	80800017 	ldw	r2,0(r16)
 2010dcc:	10c00044 	addi	r3,r2,1
 2010dd0:	80c00015 	stw	r3,0(r16)
 2010dd4:	9007883a 	mov	r3,r18
 2010dd8:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2010ddc:	8c400044 	addi	r17,r17,1
 2010de0:	80800517 	ldw	r2,20(r16)
 2010de4:	88800626 	beq	r17,r2,2010e00 <__swbuf_r+0x12c>
 2010de8:	8080030b 	ldhu	r2,12(r16)
 2010dec:	10bfffcc 	andi	r2,r2,65535
 2010df0:	1080004c 	andi	r2,r2,1
 2010df4:	10000826 	beq	r2,zero,2010e18 <__swbuf_r+0x144>
 2010df8:	90800298 	cmpnei	r2,r18,10
 2010dfc:	1000061e 	bne	r2,zero,2010e18 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2010e00:	800b883a 	mov	r5,r16
 2010e04:	e13ffc17 	ldw	r4,-16(fp)
 2010e08:	20098d40 	call	20098d4 <_fflush_r>
 2010e0c:	10000226 	beq	r2,zero,2010e18 <__swbuf_r+0x144>
      return EOF;
 2010e10:	00bfffc4 	movi	r2,-1
 2010e14:	00000106 	br	2010e1c <__swbuf_r+0x148>
  return c;
 2010e18:	9005883a 	mov	r2,r18
}
 2010e1c:	e6fffd04 	addi	sp,fp,-12
 2010e20:	dfc00417 	ldw	ra,16(sp)
 2010e24:	df000317 	ldw	fp,12(sp)
 2010e28:	dc800217 	ldw	r18,8(sp)
 2010e2c:	dc400117 	ldw	r17,4(sp)
 2010e30:	dc000017 	ldw	r16,0(sp)
 2010e34:	dec00504 	addi	sp,sp,20
 2010e38:	f800283a 	ret

02010e3c <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2010e3c:	defffe04 	addi	sp,sp,-8
 2010e40:	dfc00115 	stw	ra,4(sp)
 2010e44:	df000015 	stw	fp,0(sp)
 2010e48:	d839883a 	mov	fp,sp
 2010e4c:	2007883a 	mov	r3,r4
 2010e50:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2010e54:	d0a00017 	ldw	r2,-32768(gp)
 2010e58:	200d883a 	mov	r6,r4
 2010e5c:	180b883a 	mov	r5,r3
 2010e60:	1009883a 	mov	r4,r2
 2010e64:	2010cd40 	call	2010cd4 <__swbuf_r>
}
 2010e68:	e037883a 	mov	sp,fp
 2010e6c:	dfc00117 	ldw	ra,4(sp)
 2010e70:	df000017 	ldw	fp,0(sp)
 2010e74:	dec00204 	addi	sp,sp,8
 2010e78:	f800283a 	ret

02010e7c <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 2010e7c:	defff404 	addi	sp,sp,-48
 2010e80:	dfc00b15 	stw	ra,44(sp)
 2010e84:	df000a15 	stw	fp,40(sp)
 2010e88:	dc000915 	stw	r16,36(sp)
 2010e8c:	df000a04 	addi	fp,sp,40
 2010e90:	e13ffb15 	stw	r4,-20(fp)
 2010e94:	e17ffc15 	stw	r5,-16(fp)
 2010e98:	e1bffd15 	stw	r6,-12(fp)
 2010e9c:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 2010ea0:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 2010ea4:	e0bffc17 	ldw	r2,-16(fp)
 2010ea8:	10000d1e 	bne	r2,zero,2010ee0 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 2010eac:	d4200517 	ldw	r16,-32748(gp)
 2010eb0:	200aeb40 	call	200aeb4 <__locale_charset>
 2010eb4:	1009883a 	mov	r4,r2
 2010eb8:	e0fff804 	addi	r3,fp,-32
 2010ebc:	e0bffe17 	ldw	r2,-8(fp)
 2010ec0:	d8800015 	stw	r2,0(sp)
 2010ec4:	200f883a 	mov	r7,r4
 2010ec8:	000d883a 	mov	r6,zero
 2010ecc:	180b883a 	mov	r5,r3
 2010ed0:	e13ffb17 	ldw	r4,-20(fp)
 2010ed4:	803ee83a 	callr	r16
 2010ed8:	e0bff715 	stw	r2,-36(fp)
 2010edc:	00000b06 	br	2010f0c <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2010ee0:	d4200517 	ldw	r16,-32748(gp)
 2010ee4:	200aeb40 	call	200aeb4 <__locale_charset>
 2010ee8:	1007883a 	mov	r3,r2
 2010eec:	e0bffe17 	ldw	r2,-8(fp)
 2010ef0:	d8800015 	stw	r2,0(sp)
 2010ef4:	180f883a 	mov	r7,r3
 2010ef8:	e1bffd17 	ldw	r6,-12(fp)
 2010efc:	e17ffc17 	ldw	r5,-16(fp)
 2010f00:	e13ffb17 	ldw	r4,-20(fp)
 2010f04:	803ee83a 	callr	r16
 2010f08:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2010f0c:	e0bff717 	ldw	r2,-36(fp)
 2010f10:	10bfffd8 	cmpnei	r2,r2,-1
 2010f14:	1000071e 	bne	r2,zero,2010f34 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 2010f18:	e0bffe17 	ldw	r2,-8(fp)
 2010f1c:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2010f20:	e0bffb17 	ldw	r2,-20(fp)
 2010f24:	00c02284 	movi	r3,138
 2010f28:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2010f2c:	00bfffc4 	movi	r2,-1
 2010f30:	00000106 	br	2010f38 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2010f34:	e0bff717 	ldw	r2,-36(fp)
}
 2010f38:	e6ffff04 	addi	sp,fp,-4
 2010f3c:	dfc00217 	ldw	ra,8(sp)
 2010f40:	df000117 	ldw	fp,4(sp)
 2010f44:	dc000017 	ldw	r16,0(sp)
 2010f48:	dec00304 	addi	sp,sp,12
 2010f4c:	f800283a 	ret

02010f50 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2010f50:	defff404 	addi	sp,sp,-48
 2010f54:	dfc00b15 	stw	ra,44(sp)
 2010f58:	df000a15 	stw	fp,40(sp)
 2010f5c:	dc000915 	stw	r16,36(sp)
 2010f60:	df000a04 	addi	fp,sp,40
 2010f64:	e13ffc15 	stw	r4,-16(fp)
 2010f68:	e17ffd15 	stw	r5,-12(fp)
 2010f6c:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 2010f70:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 2010f74:	d0a00017 	ldw	r2,-32768(gp)
 2010f78:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 2010f7c:	e0bffc17 	ldw	r2,-16(fp)
 2010f80:	10000d1e 	bne	r2,zero,2010fb8 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 2010f84:	d4200517 	ldw	r16,-32748(gp)
 2010f88:	200aeb40 	call	200aeb4 <__locale_charset>
 2010f8c:	1009883a 	mov	r4,r2
 2010f90:	e0fff904 	addi	r3,fp,-28
 2010f94:	e0bffe17 	ldw	r2,-8(fp)
 2010f98:	d8800015 	stw	r2,0(sp)
 2010f9c:	200f883a 	mov	r7,r4
 2010fa0:	000d883a 	mov	r6,zero
 2010fa4:	180b883a 	mov	r5,r3
 2010fa8:	e13ff817 	ldw	r4,-32(fp)
 2010fac:	803ee83a 	callr	r16
 2010fb0:	e0bff715 	stw	r2,-36(fp)
 2010fb4:	00000b06 	br	2010fe4 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 2010fb8:	d4200517 	ldw	r16,-32748(gp)
 2010fbc:	200aeb40 	call	200aeb4 <__locale_charset>
 2010fc0:	1007883a 	mov	r3,r2
 2010fc4:	e0bffe17 	ldw	r2,-8(fp)
 2010fc8:	d8800015 	stw	r2,0(sp)
 2010fcc:	180f883a 	mov	r7,r3
 2010fd0:	e1bffd17 	ldw	r6,-12(fp)
 2010fd4:	e17ffc17 	ldw	r5,-16(fp)
 2010fd8:	e13ff817 	ldw	r4,-32(fp)
 2010fdc:	803ee83a 	callr	r16
 2010fe0:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2010fe4:	e0bff717 	ldw	r2,-36(fp)
 2010fe8:	10bfffd8 	cmpnei	r2,r2,-1
 2010fec:	1000071e 	bne	r2,zero,201100c <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2010ff0:	e0bffe17 	ldw	r2,-8(fp)
 2010ff4:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 2010ff8:	e0bff817 	ldw	r2,-32(fp)
 2010ffc:	00c02284 	movi	r3,138
 2011000:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2011004:	00bfffc4 	movi	r2,-1
 2011008:	00000106 	br	2011010 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 201100c:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2011010:	e6ffff04 	addi	sp,fp,-4
 2011014:	dfc00217 	ldw	ra,8(sp)
 2011018:	df000117 	ldw	fp,4(sp)
 201101c:	dc000017 	ldw	r16,0(sp)
 2011020:	dec00304 	addi	sp,sp,12
 2011024:	f800283a 	ret

02011028 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 2011028:	defff804 	addi	sp,sp,-32
 201102c:	dfc00715 	stw	ra,28(sp)
 2011030:	df000615 	stw	fp,24(sp)
 2011034:	dc000515 	stw	r16,20(sp)
 2011038:	df000604 	addi	fp,sp,24
 201103c:	e13ffb15 	stw	r4,-20(fp)
 2011040:	e17ffc15 	stw	r5,-16(fp)
 2011044:	e1bffd15 	stw	r6,-12(fp)
 2011048:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 201104c:	d4200517 	ldw	r16,-32748(gp)
 2011050:	200aeb40 	call	200aeb4 <__locale_charset>
 2011054:	1007883a 	mov	r3,r2
 2011058:	e0bffe17 	ldw	r2,-8(fp)
 201105c:	d8800015 	stw	r2,0(sp)
 2011060:	180f883a 	mov	r7,r3
 2011064:	e1bffd17 	ldw	r6,-12(fp)
 2011068:	e17ffc17 	ldw	r5,-16(fp)
 201106c:	e13ffb17 	ldw	r4,-20(fp)
 2011070:	803ee83a 	callr	r16
}
 2011074:	e6ffff04 	addi	sp,fp,-4
 2011078:	dfc00217 	ldw	ra,8(sp)
 201107c:	df000117 	ldw	fp,4(sp)
 2011080:	dc000017 	ldw	r16,0(sp)
 2011084:	dec00304 	addi	sp,sp,12
 2011088:	f800283a 	ret

0201108c <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 201108c:	defffa04 	addi	sp,sp,-24
 2011090:	df000515 	stw	fp,20(sp)
 2011094:	df000504 	addi	fp,sp,20
 2011098:	e13ffc15 	stw	r4,-16(fp)
 201109c:	e17ffd15 	stw	r5,-12(fp)
 20110a0:	e1bffe15 	stw	r6,-8(fp)
 20110a4:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 20110a8:	e0bffe17 	ldw	r2,-8(fp)
 20110ac:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 20110b0:	e0bffd17 	ldw	r2,-12(fp)
 20110b4:	1000021e 	bne	r2,zero,20110c0 <__ascii_wctomb+0x34>
    return 0;
 20110b8:	0005883a 	mov	r2,zero
 20110bc:	00000d06 	br	20110f4 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 20110c0:	e0bffb17 	ldw	r2,-20(fp)
 20110c4:	10804030 	cmpltui	r2,r2,256
 20110c8:	1000051e 	bne	r2,zero,20110e0 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 20110cc:	e0bffc17 	ldw	r2,-16(fp)
 20110d0:	00c02284 	movi	r3,138
 20110d4:	10c00015 	stw	r3,0(r2)
      return -1;
 20110d8:	00bfffc4 	movi	r2,-1
 20110dc:	00000506 	br	20110f4 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 20110e0:	e0bffb17 	ldw	r2,-20(fp)
 20110e4:	1007883a 	mov	r3,r2
 20110e8:	e0bffd17 	ldw	r2,-12(fp)
 20110ec:	10c00005 	stb	r3,0(r2)
  return 1;
 20110f0:	00800044 	movi	r2,1
}
 20110f4:	e037883a 	mov	sp,fp
 20110f8:	df000017 	ldw	fp,0(sp)
 20110fc:	dec00104 	addi	sp,sp,4
 2011100:	f800283a 	ret

02011104 <__udivdi3>:
 2011104:	defff504 	addi	sp,sp,-44
 2011108:	dcc00415 	stw	r19,16(sp)
 201110c:	dc000115 	stw	r16,4(sp)
 2011110:	dfc00a15 	stw	ra,40(sp)
 2011114:	df000915 	stw	fp,36(sp)
 2011118:	ddc00815 	stw	r23,32(sp)
 201111c:	dd800715 	stw	r22,28(sp)
 2011120:	dd400615 	stw	r21,24(sp)
 2011124:	dd000515 	stw	r20,20(sp)
 2011128:	dc800315 	stw	r18,12(sp)
 201112c:	dc400215 	stw	r17,8(sp)
 2011130:	2027883a 	mov	r19,r4
 2011134:	2821883a 	mov	r16,r5
 2011138:	3800411e 	bne	r7,zero,2011240 <__udivdi3+0x13c>
 201113c:	3023883a 	mov	r17,r6
 2011140:	2025883a 	mov	r18,r4
 2011144:	2980522e 	bgeu	r5,r6,2011290 <__udivdi3+0x18c>
 2011148:	00bfffd4 	movui	r2,65535
 201114c:	282d883a 	mov	r22,r5
 2011150:	1180a836 	bltu	r2,r6,20113f4 <__udivdi3+0x2f0>
 2011154:	00803fc4 	movi	r2,255
 2011158:	1185803a 	cmpltu	r2,r2,r6
 201115c:	100490fa 	slli	r2,r2,3
 2011160:	3086d83a 	srl	r3,r6,r2
 2011164:	010080b4 	movhi	r4,514
 2011168:	2139c144 	addi	r4,r4,-6395
 201116c:	20c7883a 	add	r3,r4,r3
 2011170:	18c00003 	ldbu	r3,0(r3)
 2011174:	1885883a 	add	r2,r3,r2
 2011178:	00c00804 	movi	r3,32
 201117c:	1887c83a 	sub	r3,r3,r2
 2011180:	18000526 	beq	r3,zero,2011198 <__udivdi3+0x94>
 2011184:	80e0983a 	sll	r16,r16,r3
 2011188:	9884d83a 	srl	r2,r19,r2
 201118c:	30e2983a 	sll	r17,r6,r3
 2011190:	98e4983a 	sll	r18,r19,r3
 2011194:	142cb03a 	or	r22,r2,r16
 2011198:	882ad43a 	srli	r21,r17,16
 201119c:	b009883a 	mov	r4,r22
 20111a0:	8d3fffcc 	andi	r20,r17,65535
 20111a4:	a80b883a 	mov	r5,r21
 20111a8:	20048f40 	call	20048f4 <__umodsi3>
 20111ac:	b009883a 	mov	r4,r22
 20111b0:	a80b883a 	mov	r5,r21
 20111b4:	1027883a 	mov	r19,r2
 20111b8:	20048900 	call	2004890 <__udivsi3>
 20111bc:	102d883a 	mov	r22,r2
 20111c0:	9826943a 	slli	r19,r19,16
 20111c4:	9004d43a 	srli	r2,r18,16
 20111c8:	a5a1383a 	mul	r16,r20,r22
 20111cc:	14c4b03a 	or	r2,r2,r19
 20111d0:	1400052e 	bgeu	r2,r16,20111e8 <__udivdi3+0xe4>
 20111d4:	1445883a 	add	r2,r2,r17
 20111d8:	b0ffffc4 	addi	r3,r22,-1
 20111dc:	14400136 	bltu	r2,r17,20111e4 <__udivdi3+0xe0>
 20111e0:	14012336 	bltu	r2,r16,2011670 <__udivdi3+0x56c>
 20111e4:	182d883a 	mov	r22,r3
 20111e8:	1421c83a 	sub	r16,r2,r16
 20111ec:	a80b883a 	mov	r5,r21
 20111f0:	8009883a 	mov	r4,r16
 20111f4:	20048f40 	call	20048f4 <__umodsi3>
 20111f8:	1027883a 	mov	r19,r2
 20111fc:	a80b883a 	mov	r5,r21
 2011200:	8009883a 	mov	r4,r16
 2011204:	20048900 	call	2004890 <__udivsi3>
 2011208:	9826943a 	slli	r19,r19,16
 201120c:	a0a9383a 	mul	r20,r20,r2
 2011210:	94bfffcc 	andi	r18,r18,65535
 2011214:	94e4b03a 	or	r18,r18,r19
 2011218:	9500052e 	bgeu	r18,r20,2011230 <__udivdi3+0x12c>
 201121c:	8ca5883a 	add	r18,r17,r18
 2011220:	10ffffc4 	addi	r3,r2,-1
 2011224:	9440f136 	bltu	r18,r17,20115ec <__udivdi3+0x4e8>
 2011228:	9500f02e 	bgeu	r18,r20,20115ec <__udivdi3+0x4e8>
 201122c:	10bfff84 	addi	r2,r2,-2
 2011230:	b00c943a 	slli	r6,r22,16
 2011234:	0007883a 	mov	r3,zero
 2011238:	3084b03a 	or	r2,r6,r2
 201123c:	00005906 	br	20113a4 <__udivdi3+0x2a0>
 2011240:	29c05636 	bltu	r5,r7,201139c <__udivdi3+0x298>
 2011244:	00bfffd4 	movui	r2,65535
 2011248:	11c0622e 	bgeu	r2,r7,20113d4 <__udivdi3+0x2d0>
 201124c:	00804034 	movhi	r2,256
 2011250:	10bfffc4 	addi	r2,r2,-1
 2011254:	11c0ee36 	bltu	r2,r7,2011610 <__udivdi3+0x50c>
 2011258:	00800404 	movi	r2,16
 201125c:	3886d83a 	srl	r3,r7,r2
 2011260:	010080b4 	movhi	r4,514
 2011264:	2139c144 	addi	r4,r4,-6395
 2011268:	20c7883a 	add	r3,r4,r3
 201126c:	18c00003 	ldbu	r3,0(r3)
 2011270:	05400804 	movi	r21,32
 2011274:	1885883a 	add	r2,r3,r2
 2011278:	a8abc83a 	sub	r21,r21,r2
 201127c:	a800621e 	bne	r21,zero,2011408 <__udivdi3+0x304>
 2011280:	3c00e936 	bltu	r7,r16,2011628 <__udivdi3+0x524>
 2011284:	9985403a 	cmpgeu	r2,r19,r6
 2011288:	0007883a 	mov	r3,zero
 201128c:	00004506 	br	20113a4 <__udivdi3+0x2a0>
 2011290:	3000041e 	bne	r6,zero,20112a4 <__udivdi3+0x1a0>
 2011294:	000b883a 	mov	r5,zero
 2011298:	01000044 	movi	r4,1
 201129c:	20048900 	call	2004890 <__udivsi3>
 20112a0:	1023883a 	mov	r17,r2
 20112a4:	00bfffd4 	movui	r2,65535
 20112a8:	14404e2e 	bgeu	r2,r17,20113e4 <__udivdi3+0x2e0>
 20112ac:	00804034 	movhi	r2,256
 20112b0:	10bfffc4 	addi	r2,r2,-1
 20112b4:	1440d836 	bltu	r2,r17,2011618 <__udivdi3+0x514>
 20112b8:	00800404 	movi	r2,16
 20112bc:	8886d83a 	srl	r3,r17,r2
 20112c0:	010080b4 	movhi	r4,514
 20112c4:	2139c144 	addi	r4,r4,-6395
 20112c8:	20c7883a 	add	r3,r4,r3
 20112cc:	18c00003 	ldbu	r3,0(r3)
 20112d0:	1885883a 	add	r2,r3,r2
 20112d4:	00c00804 	movi	r3,32
 20112d8:	1887c83a 	sub	r3,r3,r2
 20112dc:	18008f1e 	bne	r3,zero,201151c <__udivdi3+0x418>
 20112e0:	882ad43a 	srli	r21,r17,16
 20112e4:	8461c83a 	sub	r16,r16,r17
 20112e8:	8d3fffcc 	andi	r20,r17,65535
 20112ec:	00c00044 	movi	r3,1
 20112f0:	8009883a 	mov	r4,r16
 20112f4:	a80b883a 	mov	r5,r21
 20112f8:	d8c00015 	stw	r3,0(sp)
 20112fc:	20048f40 	call	20048f4 <__umodsi3>
 2011300:	8009883a 	mov	r4,r16
 2011304:	a80b883a 	mov	r5,r21
 2011308:	1027883a 	mov	r19,r2
 201130c:	20048900 	call	2004890 <__udivsi3>
 2011310:	9826943a 	slli	r19,r19,16
 2011314:	9008d43a 	srli	r4,r18,16
 2011318:	1521383a 	mul	r16,r2,r20
 201131c:	102d883a 	mov	r22,r2
 2011320:	24c8b03a 	or	r4,r4,r19
 2011324:	d8c00017 	ldw	r3,0(sp)
 2011328:	2400052e 	bgeu	r4,r16,2011340 <__udivdi3+0x23c>
 201132c:	2449883a 	add	r4,r4,r17
 2011330:	b0bfffc4 	addi	r2,r22,-1
 2011334:	24400136 	bltu	r4,r17,201133c <__udivdi3+0x238>
 2011338:	2400ca36 	bltu	r4,r16,2011664 <__udivdi3+0x560>
 201133c:	102d883a 	mov	r22,r2
 2011340:	2421c83a 	sub	r16,r4,r16
 2011344:	a80b883a 	mov	r5,r21
 2011348:	8009883a 	mov	r4,r16
 201134c:	d8c00015 	stw	r3,0(sp)
 2011350:	20048f40 	call	20048f4 <__umodsi3>
 2011354:	1027883a 	mov	r19,r2
 2011358:	a80b883a 	mov	r5,r21
 201135c:	8009883a 	mov	r4,r16
 2011360:	20048900 	call	2004890 <__udivsi3>
 2011364:	9826943a 	slli	r19,r19,16
 2011368:	1529383a 	mul	r20,r2,r20
 201136c:	94bfffcc 	andi	r18,r18,65535
 2011370:	94e4b03a 	or	r18,r18,r19
 2011374:	d8c00017 	ldw	r3,0(sp)
 2011378:	9500052e 	bgeu	r18,r20,2011390 <__udivdi3+0x28c>
 201137c:	8ca5883a 	add	r18,r17,r18
 2011380:	113fffc4 	addi	r4,r2,-1
 2011384:	94409736 	bltu	r18,r17,20115e4 <__udivdi3+0x4e0>
 2011388:	9500962e 	bgeu	r18,r20,20115e4 <__udivdi3+0x4e0>
 201138c:	10bfff84 	addi	r2,r2,-2
 2011390:	b00c943a 	slli	r6,r22,16
 2011394:	3084b03a 	or	r2,r6,r2
 2011398:	00000206 	br	20113a4 <__udivdi3+0x2a0>
 201139c:	0007883a 	mov	r3,zero
 20113a0:	0005883a 	mov	r2,zero
 20113a4:	dfc00a17 	ldw	ra,40(sp)
 20113a8:	df000917 	ldw	fp,36(sp)
 20113ac:	ddc00817 	ldw	r23,32(sp)
 20113b0:	dd800717 	ldw	r22,28(sp)
 20113b4:	dd400617 	ldw	r21,24(sp)
 20113b8:	dd000517 	ldw	r20,20(sp)
 20113bc:	dcc00417 	ldw	r19,16(sp)
 20113c0:	dc800317 	ldw	r18,12(sp)
 20113c4:	dc400217 	ldw	r17,8(sp)
 20113c8:	dc000117 	ldw	r16,4(sp)
 20113cc:	dec00b04 	addi	sp,sp,44
 20113d0:	f800283a 	ret
 20113d4:	00803fc4 	movi	r2,255
 20113d8:	11c5803a 	cmpltu	r2,r2,r7
 20113dc:	100490fa 	slli	r2,r2,3
 20113e0:	003f9e06 	br	201125c <__udivdi3+0x158>
 20113e4:	00803fc4 	movi	r2,255
 20113e8:	1445803a 	cmpltu	r2,r2,r17
 20113ec:	100490fa 	slli	r2,r2,3
 20113f0:	003fb206 	br	20112bc <__udivdi3+0x1b8>
 20113f4:	00804034 	movhi	r2,256
 20113f8:	10bfffc4 	addi	r2,r2,-1
 20113fc:	11808836 	bltu	r2,r6,2011620 <__udivdi3+0x51c>
 2011400:	00800404 	movi	r2,16
 2011404:	003f5606 	br	2011160 <__udivdi3+0x5c>
 2011408:	30aed83a 	srl	r23,r6,r2
 201140c:	3d4e983a 	sll	r7,r7,r21
 2011410:	80acd83a 	srl	r22,r16,r2
 2011414:	9884d83a 	srl	r2,r19,r2
 2011418:	3deeb03a 	or	r23,r7,r23
 201141c:	b824d43a 	srli	r18,r23,16
 2011420:	8560983a 	sll	r16,r16,r21
 2011424:	b009883a 	mov	r4,r22
 2011428:	900b883a 	mov	r5,r18
 201142c:	3568983a 	sll	r20,r6,r21
 2011430:	1420b03a 	or	r16,r2,r16
 2011434:	20048f40 	call	20048f4 <__umodsi3>
 2011438:	b009883a 	mov	r4,r22
 201143c:	900b883a 	mov	r5,r18
 2011440:	1023883a 	mov	r17,r2
 2011444:	20048900 	call	2004890 <__udivsi3>
 2011448:	8808943a 	slli	r4,r17,16
 201144c:	bf3fffcc 	andi	fp,r23,65535
 2011450:	8006d43a 	srli	r3,r16,16
 2011454:	e0a3383a 	mul	r17,fp,r2
 2011458:	100d883a 	mov	r6,r2
 201145c:	1906b03a 	or	r3,r3,r4
 2011460:	1c40042e 	bgeu	r3,r17,2011474 <__udivdi3+0x370>
 2011464:	1dc7883a 	add	r3,r3,r23
 2011468:	10bfffc4 	addi	r2,r2,-1
 201146c:	1dc0752e 	bgeu	r3,r23,2011644 <__udivdi3+0x540>
 2011470:	100d883a 	mov	r6,r2
 2011474:	1c63c83a 	sub	r17,r3,r17
 2011478:	900b883a 	mov	r5,r18
 201147c:	8809883a 	mov	r4,r17
 2011480:	d9800015 	stw	r6,0(sp)
 2011484:	20048f40 	call	20048f4 <__umodsi3>
 2011488:	102d883a 	mov	r22,r2
 201148c:	8809883a 	mov	r4,r17
 2011490:	900b883a 	mov	r5,r18
 2011494:	20048900 	call	2004890 <__udivsi3>
 2011498:	b02c943a 	slli	r22,r22,16
 201149c:	e089383a 	mul	r4,fp,r2
 20114a0:	843fffcc 	andi	r16,r16,65535
 20114a4:	85a0b03a 	or	r16,r16,r22
 20114a8:	d9800017 	ldw	r6,0(sp)
 20114ac:	8100042e 	bgeu	r16,r4,20114c0 <__udivdi3+0x3bc>
 20114b0:	85e1883a 	add	r16,r16,r23
 20114b4:	10ffffc4 	addi	r3,r2,-1
 20114b8:	85c05e2e 	bgeu	r16,r23,2011634 <__udivdi3+0x530>
 20114bc:	1805883a 	mov	r2,r3
 20114c0:	300c943a 	slli	r6,r6,16
 20114c4:	a17fffcc 	andi	r5,r20,65535
 20114c8:	a028d43a 	srli	r20,r20,16
 20114cc:	3084b03a 	or	r2,r6,r2
 20114d0:	10ffffcc 	andi	r3,r2,65535
 20114d4:	100cd43a 	srli	r6,r2,16
 20114d8:	194f383a 	mul	r7,r3,r5
 20114dc:	1d07383a 	mul	r3,r3,r20
 20114e0:	314b383a 	mul	r5,r6,r5
 20114e4:	3810d43a 	srli	r8,r7,16
 20114e8:	8121c83a 	sub	r16,r16,r4
 20114ec:	1947883a 	add	r3,r3,r5
 20114f0:	40c7883a 	add	r3,r8,r3
 20114f4:	350d383a 	mul	r6,r6,r20
 20114f8:	1940022e 	bgeu	r3,r5,2011504 <__udivdi3+0x400>
 20114fc:	01000074 	movhi	r4,1
 2011500:	310d883a 	add	r6,r6,r4
 2011504:	1828d43a 	srli	r20,r3,16
 2011508:	a18d883a 	add	r6,r20,r6
 201150c:	81803e36 	bltu	r16,r6,2011608 <__udivdi3+0x504>
 2011510:	81803826 	beq	r16,r6,20115f4 <__udivdi3+0x4f0>
 2011514:	0007883a 	mov	r3,zero
 2011518:	003fa206 	br	20113a4 <__udivdi3+0x2a0>
 201151c:	88e2983a 	sll	r17,r17,r3
 2011520:	80a8d83a 	srl	r20,r16,r2
 2011524:	80e0983a 	sll	r16,r16,r3
 2011528:	882ad43a 	srli	r21,r17,16
 201152c:	9884d83a 	srl	r2,r19,r2
 2011530:	a009883a 	mov	r4,r20
 2011534:	a80b883a 	mov	r5,r21
 2011538:	142eb03a 	or	r23,r2,r16
 201153c:	98e4983a 	sll	r18,r19,r3
 2011540:	20048f40 	call	20048f4 <__umodsi3>
 2011544:	a009883a 	mov	r4,r20
 2011548:	a80b883a 	mov	r5,r21
 201154c:	1021883a 	mov	r16,r2
 2011550:	20048900 	call	2004890 <__udivsi3>
 2011554:	1039883a 	mov	fp,r2
 2011558:	8d3fffcc 	andi	r20,r17,65535
 201155c:	8020943a 	slli	r16,r16,16
 2011560:	b804d43a 	srli	r2,r23,16
 2011564:	a72d383a 	mul	r22,r20,fp
 2011568:	1404b03a 	or	r2,r2,r16
 201156c:	1580062e 	bgeu	r2,r22,2011588 <__udivdi3+0x484>
 2011570:	1445883a 	add	r2,r2,r17
 2011574:	e0ffffc4 	addi	r3,fp,-1
 2011578:	14403836 	bltu	r2,r17,201165c <__udivdi3+0x558>
 201157c:	1580372e 	bgeu	r2,r22,201165c <__udivdi3+0x558>
 2011580:	e73fff84 	addi	fp,fp,-2
 2011584:	1445883a 	add	r2,r2,r17
 2011588:	15adc83a 	sub	r22,r2,r22
 201158c:	a80b883a 	mov	r5,r21
 2011590:	b009883a 	mov	r4,r22
 2011594:	20048f40 	call	20048f4 <__umodsi3>
 2011598:	1027883a 	mov	r19,r2
 201159c:	b009883a 	mov	r4,r22
 20115a0:	a80b883a 	mov	r5,r21
 20115a4:	20048900 	call	2004890 <__udivsi3>
 20115a8:	9826943a 	slli	r19,r19,16
 20115ac:	a0a1383a 	mul	r16,r20,r2
 20115b0:	b93fffcc 	andi	r4,r23,65535
 20115b4:	24c8b03a 	or	r4,r4,r19
 20115b8:	2400062e 	bgeu	r4,r16,20115d4 <__udivdi3+0x4d0>
 20115bc:	2449883a 	add	r4,r4,r17
 20115c0:	10ffffc4 	addi	r3,r2,-1
 20115c4:	24402336 	bltu	r4,r17,2011654 <__udivdi3+0x550>
 20115c8:	2400222e 	bgeu	r4,r16,2011654 <__udivdi3+0x550>
 20115cc:	10bfff84 	addi	r2,r2,-2
 20115d0:	2449883a 	add	r4,r4,r17
 20115d4:	e038943a 	slli	fp,fp,16
 20115d8:	2421c83a 	sub	r16,r4,r16
 20115dc:	e086b03a 	or	r3,fp,r2
 20115e0:	003f4306 	br	20112f0 <__udivdi3+0x1ec>
 20115e4:	2005883a 	mov	r2,r4
 20115e8:	003f6906 	br	2011390 <__udivdi3+0x28c>
 20115ec:	1805883a 	mov	r2,r3
 20115f0:	003f0f06 	br	2011230 <__udivdi3+0x12c>
 20115f4:	1806943a 	slli	r3,r3,16
 20115f8:	9d66983a 	sll	r19,r19,r21
 20115fc:	39ffffcc 	andi	r7,r7,65535
 2011600:	19c7883a 	add	r3,r3,r7
 2011604:	98ffc32e 	bgeu	r19,r3,2011514 <__udivdi3+0x410>
 2011608:	10bfffc4 	addi	r2,r2,-1
 201160c:	003fc106 	br	2011514 <__udivdi3+0x410>
 2011610:	00800604 	movi	r2,24
 2011614:	003f1106 	br	201125c <__udivdi3+0x158>
 2011618:	00800604 	movi	r2,24
 201161c:	003f2706 	br	20112bc <__udivdi3+0x1b8>
 2011620:	00800604 	movi	r2,24
 2011624:	003ece06 	br	2011160 <__udivdi3+0x5c>
 2011628:	0007883a 	mov	r3,zero
 201162c:	00800044 	movi	r2,1
 2011630:	003f5c06 	br	20113a4 <__udivdi3+0x2a0>
 2011634:	813fa12e 	bgeu	r16,r4,20114bc <__udivdi3+0x3b8>
 2011638:	10bfff84 	addi	r2,r2,-2
 201163c:	85e1883a 	add	r16,r16,r23
 2011640:	003f9f06 	br	20114c0 <__udivdi3+0x3bc>
 2011644:	1c7f8a2e 	bgeu	r3,r17,2011470 <__udivdi3+0x36c>
 2011648:	31bfff84 	addi	r6,r6,-2
 201164c:	1dc7883a 	add	r3,r3,r23
 2011650:	003f8806 	br	2011474 <__udivdi3+0x370>
 2011654:	1805883a 	mov	r2,r3
 2011658:	003fde06 	br	20115d4 <__udivdi3+0x4d0>
 201165c:	1839883a 	mov	fp,r3
 2011660:	003fc906 	br	2011588 <__udivdi3+0x484>
 2011664:	b5bfff84 	addi	r22,r22,-2
 2011668:	2449883a 	add	r4,r4,r17
 201166c:	003f3406 	br	2011340 <__udivdi3+0x23c>
 2011670:	b5bfff84 	addi	r22,r22,-2
 2011674:	1445883a 	add	r2,r2,r17
 2011678:	003edb06 	br	20111e8 <__udivdi3+0xe4>

0201167c <__umoddi3>:
 201167c:	defff404 	addi	sp,sp,-48
 2011680:	df000a15 	stw	fp,40(sp)
 2011684:	dc400315 	stw	r17,12(sp)
 2011688:	dc000215 	stw	r16,8(sp)
 201168c:	dfc00b15 	stw	ra,44(sp)
 2011690:	ddc00915 	stw	r23,36(sp)
 2011694:	dd800815 	stw	r22,32(sp)
 2011698:	dd400715 	stw	r21,28(sp)
 201169c:	dd000615 	stw	r20,24(sp)
 20116a0:	dcc00515 	stw	r19,20(sp)
 20116a4:	dc800415 	stw	r18,16(sp)
 20116a8:	2021883a 	mov	r16,r4
 20116ac:	2823883a 	mov	r17,r5
 20116b0:	2839883a 	mov	fp,r5
 20116b4:	38003c1e 	bne	r7,zero,20117a8 <__umoddi3+0x12c>
 20116b8:	3027883a 	mov	r19,r6
 20116bc:	2029883a 	mov	r20,r4
 20116c0:	2980512e 	bgeu	r5,r6,2011808 <__umoddi3+0x18c>
 20116c4:	00bfffd4 	movui	r2,65535
 20116c8:	11809a36 	bltu	r2,r6,2011934 <__umoddi3+0x2b8>
 20116cc:	01003fc4 	movi	r4,255
 20116d0:	2189803a 	cmpltu	r4,r4,r6
 20116d4:	200890fa 	slli	r4,r4,3
 20116d8:	3104d83a 	srl	r2,r6,r4
 20116dc:	00c080b4 	movhi	r3,514
 20116e0:	18f9c144 	addi	r3,r3,-6395
 20116e4:	1885883a 	add	r2,r3,r2
 20116e8:	10c00003 	ldbu	r3,0(r2)
 20116ec:	00800804 	movi	r2,32
 20116f0:	1909883a 	add	r4,r3,r4
 20116f4:	1125c83a 	sub	r18,r2,r4
 20116f8:	90000526 	beq	r18,zero,2011710 <__umoddi3+0x94>
 20116fc:	8ca2983a 	sll	r17,r17,r18
 2011700:	8108d83a 	srl	r4,r16,r4
 2011704:	34a6983a 	sll	r19,r6,r18
 2011708:	84a8983a 	sll	r20,r16,r18
 201170c:	2478b03a 	or	fp,r4,r17
 2011710:	982ed43a 	srli	r23,r19,16
 2011714:	e009883a 	mov	r4,fp
 2011718:	9dbfffcc 	andi	r22,r19,65535
 201171c:	b80b883a 	mov	r5,r23
 2011720:	20048f40 	call	20048f4 <__umodsi3>
 2011724:	e009883a 	mov	r4,fp
 2011728:	b80b883a 	mov	r5,r23
 201172c:	102b883a 	mov	r21,r2
 2011730:	20048900 	call	2004890 <__udivsi3>
 2011734:	a806943a 	slli	r3,r21,16
 2011738:	a008d43a 	srli	r4,r20,16
 201173c:	b085383a 	mul	r2,r22,r2
 2011740:	20c8b03a 	or	r4,r4,r3
 2011744:	2080032e 	bgeu	r4,r2,2011754 <__umoddi3+0xd8>
 2011748:	24c9883a 	add	r4,r4,r19
 201174c:	24c00136 	bltu	r4,r19,2011754 <__umoddi3+0xd8>
 2011750:	20811036 	bltu	r4,r2,2011b94 <__umoddi3+0x518>
 2011754:	20abc83a 	sub	r21,r4,r2
 2011758:	b80b883a 	mov	r5,r23
 201175c:	a809883a 	mov	r4,r21
 2011760:	20048f40 	call	20048f4 <__umodsi3>
 2011764:	1023883a 	mov	r17,r2
 2011768:	b80b883a 	mov	r5,r23
 201176c:	a809883a 	mov	r4,r21
 2011770:	20048900 	call	2004890 <__udivsi3>
 2011774:	8822943a 	slli	r17,r17,16
 2011778:	b085383a 	mul	r2,r22,r2
 201177c:	a0ffffcc 	andi	r3,r20,65535
 2011780:	1c46b03a 	or	r3,r3,r17
 2011784:	1880042e 	bgeu	r3,r2,2011798 <__umoddi3+0x11c>
 2011788:	1cc7883a 	add	r3,r3,r19
 201178c:	1cc00236 	bltu	r3,r19,2011798 <__umoddi3+0x11c>
 2011790:	1880012e 	bgeu	r3,r2,2011798 <__umoddi3+0x11c>
 2011794:	1cc7883a 	add	r3,r3,r19
 2011798:	1885c83a 	sub	r2,r3,r2
 201179c:	1484d83a 	srl	r2,r2,r18
 20117a0:	0007883a 	mov	r3,zero
 20117a4:	00004f06 	br	20118e4 <__umoddi3+0x268>
 20117a8:	29c04c36 	bltu	r5,r7,20118dc <__umoddi3+0x260>
 20117ac:	00bfffd4 	movui	r2,65535
 20117b0:	11c0582e 	bgeu	r2,r7,2011914 <__umoddi3+0x298>
 20117b4:	00804034 	movhi	r2,256
 20117b8:	10bfffc4 	addi	r2,r2,-1
 20117bc:	11c0e736 	bltu	r2,r7,2011b5c <__umoddi3+0x4e0>
 20117c0:	01000404 	movi	r4,16
 20117c4:	3904d83a 	srl	r2,r7,r4
 20117c8:	00c080b4 	movhi	r3,514
 20117cc:	18f9c144 	addi	r3,r3,-6395
 20117d0:	1885883a 	add	r2,r3,r2
 20117d4:	14c00003 	ldbu	r19,0(r2)
 20117d8:	00c00804 	movi	r3,32
 20117dc:	9927883a 	add	r19,r19,r4
 20117e0:	1ce9c83a 	sub	r20,r3,r19
 20117e4:	a000581e 	bne	r20,zero,2011948 <__umoddi3+0x2cc>
 20117e8:	3c400136 	bltu	r7,r17,20117f0 <__umoddi3+0x174>
 20117ec:	8180eb36 	bltu	r16,r6,2011b9c <__umoddi3+0x520>
 20117f0:	8185c83a 	sub	r2,r16,r6
 20117f4:	89e3c83a 	sub	r17,r17,r7
 20117f8:	8089803a 	cmpltu	r4,r16,r2
 20117fc:	8939c83a 	sub	fp,r17,r4
 2011800:	e007883a 	mov	r3,fp
 2011804:	00003706 	br	20118e4 <__umoddi3+0x268>
 2011808:	3000041e 	bne	r6,zero,201181c <__umoddi3+0x1a0>
 201180c:	000b883a 	mov	r5,zero
 2011810:	01000044 	movi	r4,1
 2011814:	20048900 	call	2004890 <__udivsi3>
 2011818:	1027883a 	mov	r19,r2
 201181c:	00bfffd4 	movui	r2,65535
 2011820:	14c0402e 	bgeu	r2,r19,2011924 <__umoddi3+0x2a8>
 2011824:	00804034 	movhi	r2,256
 2011828:	10bfffc4 	addi	r2,r2,-1
 201182c:	14c0cd36 	bltu	r2,r19,2011b64 <__umoddi3+0x4e8>
 2011830:	00800404 	movi	r2,16
 2011834:	9886d83a 	srl	r3,r19,r2
 2011838:	010080b4 	movhi	r4,514
 201183c:	2139c144 	addi	r4,r4,-6395
 2011840:	20c7883a 	add	r3,r4,r3
 2011844:	18c00003 	ldbu	r3,0(r3)
 2011848:	1887883a 	add	r3,r3,r2
 201184c:	00800804 	movi	r2,32
 2011850:	10e5c83a 	sub	r18,r2,r3
 2011854:	9000901e 	bne	r18,zero,2011a98 <__umoddi3+0x41c>
 2011858:	982cd43a 	srli	r22,r19,16
 201185c:	8ce3c83a 	sub	r17,r17,r19
 2011860:	9d7fffcc 	andi	r21,r19,65535
 2011864:	b00b883a 	mov	r5,r22
 2011868:	8809883a 	mov	r4,r17
 201186c:	20048f40 	call	20048f4 <__umodsi3>
 2011870:	8809883a 	mov	r4,r17
 2011874:	b00b883a 	mov	r5,r22
 2011878:	1021883a 	mov	r16,r2
 201187c:	20048900 	call	2004890 <__udivsi3>
 2011880:	8006943a 	slli	r3,r16,16
 2011884:	a008d43a 	srli	r4,r20,16
 2011888:	1545383a 	mul	r2,r2,r21
 201188c:	20c8b03a 	or	r4,r4,r3
 2011890:	2080042e 	bgeu	r4,r2,20118a4 <__umoddi3+0x228>
 2011894:	24c9883a 	add	r4,r4,r19
 2011898:	24c00236 	bltu	r4,r19,20118a4 <__umoddi3+0x228>
 201189c:	2080012e 	bgeu	r4,r2,20118a4 <__umoddi3+0x228>
 20118a0:	24c9883a 	add	r4,r4,r19
 20118a4:	20a1c83a 	sub	r16,r4,r2
 20118a8:	b00b883a 	mov	r5,r22
 20118ac:	8009883a 	mov	r4,r16
 20118b0:	20048f40 	call	20048f4 <__umodsi3>
 20118b4:	1023883a 	mov	r17,r2
 20118b8:	b00b883a 	mov	r5,r22
 20118bc:	8009883a 	mov	r4,r16
 20118c0:	20048900 	call	2004890 <__udivsi3>
 20118c4:	8822943a 	slli	r17,r17,16
 20118c8:	1545383a 	mul	r2,r2,r21
 20118cc:	a53fffcc 	andi	r20,r20,65535
 20118d0:	a446b03a 	or	r3,r20,r17
 20118d4:	18bfb02e 	bgeu	r3,r2,2011798 <__umoddi3+0x11c>
 20118d8:	003fab06 	br	2011788 <__umoddi3+0x10c>
 20118dc:	2005883a 	mov	r2,r4
 20118e0:	2807883a 	mov	r3,r5
 20118e4:	dfc00b17 	ldw	ra,44(sp)
 20118e8:	df000a17 	ldw	fp,40(sp)
 20118ec:	ddc00917 	ldw	r23,36(sp)
 20118f0:	dd800817 	ldw	r22,32(sp)
 20118f4:	dd400717 	ldw	r21,28(sp)
 20118f8:	dd000617 	ldw	r20,24(sp)
 20118fc:	dcc00517 	ldw	r19,20(sp)
 2011900:	dc800417 	ldw	r18,16(sp)
 2011904:	dc400317 	ldw	r17,12(sp)
 2011908:	dc000217 	ldw	r16,8(sp)
 201190c:	dec00c04 	addi	sp,sp,48
 2011910:	f800283a 	ret
 2011914:	04c03fc4 	movi	r19,255
 2011918:	99c9803a 	cmpltu	r4,r19,r7
 201191c:	200890fa 	slli	r4,r4,3
 2011920:	003fa806 	br	20117c4 <__umoddi3+0x148>
 2011924:	00803fc4 	movi	r2,255
 2011928:	14c5803a 	cmpltu	r2,r2,r19
 201192c:	100490fa 	slli	r2,r2,3
 2011930:	003fc006 	br	2011834 <__umoddi3+0x1b8>
 2011934:	00804034 	movhi	r2,256
 2011938:	10bfffc4 	addi	r2,r2,-1
 201193c:	11808b36 	bltu	r2,r6,2011b6c <__umoddi3+0x4f0>
 2011940:	01000404 	movi	r4,16
 2011944:	003f6406 	br	20116d8 <__umoddi3+0x5c>
 2011948:	34c4d83a 	srl	r2,r6,r19
 201194c:	3d0e983a 	sll	r7,r7,r20
 2011950:	8cf8d83a 	srl	fp,r17,r19
 2011954:	8d10983a 	sll	r8,r17,r20
 2011958:	38aab03a 	or	r21,r7,r2
 201195c:	a82cd43a 	srli	r22,r21,16
 2011960:	84e2d83a 	srl	r17,r16,r19
 2011964:	e009883a 	mov	r4,fp
 2011968:	b00b883a 	mov	r5,r22
 201196c:	8a22b03a 	or	r17,r17,r8
 2011970:	3524983a 	sll	r18,r6,r20
 2011974:	20048f40 	call	20048f4 <__umodsi3>
 2011978:	e009883a 	mov	r4,fp
 201197c:	b00b883a 	mov	r5,r22
 2011980:	102f883a 	mov	r23,r2
 2011984:	20048900 	call	2004890 <__udivsi3>
 2011988:	100d883a 	mov	r6,r2
 201198c:	b808943a 	slli	r4,r23,16
 2011990:	aa3fffcc 	andi	r8,r21,65535
 2011994:	8804d43a 	srli	r2,r17,16
 2011998:	41af383a 	mul	r23,r8,r6
 201199c:	8520983a 	sll	r16,r16,r20
 20119a0:	1104b03a 	or	r2,r2,r4
 20119a4:	15c0042e 	bgeu	r2,r23,20119b8 <__umoddi3+0x33c>
 20119a8:	1545883a 	add	r2,r2,r21
 20119ac:	30ffffc4 	addi	r3,r6,-1
 20119b0:	1540742e 	bgeu	r2,r21,2011b84 <__umoddi3+0x508>
 20119b4:	180d883a 	mov	r6,r3
 20119b8:	15efc83a 	sub	r23,r2,r23
 20119bc:	b00b883a 	mov	r5,r22
 20119c0:	b809883a 	mov	r4,r23
 20119c4:	d9800115 	stw	r6,4(sp)
 20119c8:	da000015 	stw	r8,0(sp)
 20119cc:	20048f40 	call	20048f4 <__umodsi3>
 20119d0:	b00b883a 	mov	r5,r22
 20119d4:	b809883a 	mov	r4,r23
 20119d8:	1039883a 	mov	fp,r2
 20119dc:	20048900 	call	2004890 <__udivsi3>
 20119e0:	da000017 	ldw	r8,0(sp)
 20119e4:	e038943a 	slli	fp,fp,16
 20119e8:	100b883a 	mov	r5,r2
 20119ec:	4089383a 	mul	r4,r8,r2
 20119f0:	8a3fffcc 	andi	r8,r17,65535
 20119f4:	4710b03a 	or	r8,r8,fp
 20119f8:	d9800117 	ldw	r6,4(sp)
 20119fc:	4100042e 	bgeu	r8,r4,2011a10 <__umoddi3+0x394>
 2011a00:	4551883a 	add	r8,r8,r21
 2011a04:	10bfffc4 	addi	r2,r2,-1
 2011a08:	45405a2e 	bgeu	r8,r21,2011b74 <__umoddi3+0x4f8>
 2011a0c:	100b883a 	mov	r5,r2
 2011a10:	300c943a 	slli	r6,r6,16
 2011a14:	91ffffcc 	andi	r7,r18,65535
 2011a18:	9004d43a 	srli	r2,r18,16
 2011a1c:	314cb03a 	or	r6,r6,r5
 2011a20:	317fffcc 	andi	r5,r6,65535
 2011a24:	300cd43a 	srli	r6,r6,16
 2011a28:	29d3383a 	mul	r9,r5,r7
 2011a2c:	288b383a 	mul	r5,r5,r2
 2011a30:	31cf383a 	mul	r7,r6,r7
 2011a34:	4806d43a 	srli	r3,r9,16
 2011a38:	4111c83a 	sub	r8,r8,r4
 2011a3c:	29cb883a 	add	r5,r5,r7
 2011a40:	194b883a 	add	r5,r3,r5
 2011a44:	3085383a 	mul	r2,r6,r2
 2011a48:	29c0022e 	bgeu	r5,r7,2011a54 <__umoddi3+0x3d8>
 2011a4c:	00c00074 	movhi	r3,1
 2011a50:	10c5883a 	add	r2,r2,r3
 2011a54:	2808d43a 	srli	r4,r5,16
 2011a58:	280a943a 	slli	r5,r5,16
 2011a5c:	4a7fffcc 	andi	r9,r9,65535
 2011a60:	2085883a 	add	r2,r4,r2
 2011a64:	2a4b883a 	add	r5,r5,r9
 2011a68:	40803636 	bltu	r8,r2,2011b44 <__umoddi3+0x4c8>
 2011a6c:	40804d26 	beq	r8,r2,2011ba4 <__umoddi3+0x528>
 2011a70:	4089c83a 	sub	r4,r8,r2
 2011a74:	280f883a 	mov	r7,r5
 2011a78:	81cfc83a 	sub	r7,r16,r7
 2011a7c:	81c7803a 	cmpltu	r3,r16,r7
 2011a80:	20c7c83a 	sub	r3,r4,r3
 2011a84:	1cc4983a 	sll	r2,r3,r19
 2011a88:	3d0ed83a 	srl	r7,r7,r20
 2011a8c:	1d06d83a 	srl	r3,r3,r20
 2011a90:	11c4b03a 	or	r2,r2,r7
 2011a94:	003f9306 	br	20118e4 <__umoddi3+0x268>
 2011a98:	9ca6983a 	sll	r19,r19,r18
 2011a9c:	88e8d83a 	srl	r20,r17,r3
 2011aa0:	80c4d83a 	srl	r2,r16,r3
 2011aa4:	982cd43a 	srli	r22,r19,16
 2011aa8:	8ca2983a 	sll	r17,r17,r18
 2011aac:	a009883a 	mov	r4,r20
 2011ab0:	b00b883a 	mov	r5,r22
 2011ab4:	1478b03a 	or	fp,r2,r17
 2011ab8:	20048f40 	call	20048f4 <__umodsi3>
 2011abc:	a009883a 	mov	r4,r20
 2011ac0:	b00b883a 	mov	r5,r22
 2011ac4:	1023883a 	mov	r17,r2
 2011ac8:	20048900 	call	2004890 <__udivsi3>
 2011acc:	9d7fffcc 	andi	r21,r19,65535
 2011ad0:	880a943a 	slli	r5,r17,16
 2011ad4:	e008d43a 	srli	r4,fp,16
 2011ad8:	a885383a 	mul	r2,r21,r2
 2011adc:	84a8983a 	sll	r20,r16,r18
 2011ae0:	2148b03a 	or	r4,r4,r5
 2011ae4:	2080042e 	bgeu	r4,r2,2011af8 <__umoddi3+0x47c>
 2011ae8:	24c9883a 	add	r4,r4,r19
 2011aec:	24c00236 	bltu	r4,r19,2011af8 <__umoddi3+0x47c>
 2011af0:	2080012e 	bgeu	r4,r2,2011af8 <__umoddi3+0x47c>
 2011af4:	24c9883a 	add	r4,r4,r19
 2011af8:	20a3c83a 	sub	r17,r4,r2
 2011afc:	b00b883a 	mov	r5,r22
 2011b00:	8809883a 	mov	r4,r17
 2011b04:	20048f40 	call	20048f4 <__umodsi3>
 2011b08:	102f883a 	mov	r23,r2
 2011b0c:	8809883a 	mov	r4,r17
 2011b10:	b00b883a 	mov	r5,r22
 2011b14:	20048900 	call	2004890 <__udivsi3>
 2011b18:	b82e943a 	slli	r23,r23,16
 2011b1c:	a885383a 	mul	r2,r21,r2
 2011b20:	e13fffcc 	andi	r4,fp,65535
 2011b24:	25c8b03a 	or	r4,r4,r23
 2011b28:	2080042e 	bgeu	r4,r2,2011b3c <__umoddi3+0x4c0>
 2011b2c:	24c9883a 	add	r4,r4,r19
 2011b30:	24c00236 	bltu	r4,r19,2011b3c <__umoddi3+0x4c0>
 2011b34:	2080012e 	bgeu	r4,r2,2011b3c <__umoddi3+0x4c0>
 2011b38:	24c9883a 	add	r4,r4,r19
 2011b3c:	20a3c83a 	sub	r17,r4,r2
 2011b40:	003f4806 	br	2011864 <__umoddi3+0x1e8>
 2011b44:	2c8fc83a 	sub	r7,r5,r18
 2011b48:	1545c83a 	sub	r2,r2,r21
 2011b4c:	29cb803a 	cmpltu	r5,r5,r7
 2011b50:	1145c83a 	sub	r2,r2,r5
 2011b54:	4089c83a 	sub	r4,r8,r2
 2011b58:	003fc706 	br	2011a78 <__umoddi3+0x3fc>
 2011b5c:	01000604 	movi	r4,24
 2011b60:	003f1806 	br	20117c4 <__umoddi3+0x148>
 2011b64:	00800604 	movi	r2,24
 2011b68:	003f3206 	br	2011834 <__umoddi3+0x1b8>
 2011b6c:	01000604 	movi	r4,24
 2011b70:	003ed906 	br	20116d8 <__umoddi3+0x5c>
 2011b74:	413fa52e 	bgeu	r8,r4,2011a0c <__umoddi3+0x390>
 2011b78:	297fff84 	addi	r5,r5,-2
 2011b7c:	4551883a 	add	r8,r8,r21
 2011b80:	003fa306 	br	2011a10 <__umoddi3+0x394>
 2011b84:	15ff8b2e 	bgeu	r2,r23,20119b4 <__umoddi3+0x338>
 2011b88:	31bfff84 	addi	r6,r6,-2
 2011b8c:	1545883a 	add	r2,r2,r21
 2011b90:	003f8906 	br	20119b8 <__umoddi3+0x33c>
 2011b94:	24c9883a 	add	r4,r4,r19
 2011b98:	003eee06 	br	2011754 <__umoddi3+0xd8>
 2011b9c:	8005883a 	mov	r2,r16
 2011ba0:	003f1706 	br	2011800 <__umoddi3+0x184>
 2011ba4:	817fe736 	bltu	r16,r5,2011b44 <__umoddi3+0x4c8>
 2011ba8:	280f883a 	mov	r7,r5
 2011bac:	0009883a 	mov	r4,zero
 2011bb0:	003fb106 	br	2011a78 <__umoddi3+0x3fc>

02011bb4 <__adddf3>:
 2011bb4:	02c00434 	movhi	r11,16
 2011bb8:	5affffc4 	addi	r11,r11,-1
 2011bbc:	2806d7fa 	srli	r3,r5,31
 2011bc0:	2ad4703a 	and	r10,r5,r11
 2011bc4:	3ad2703a 	and	r9,r7,r11
 2011bc8:	3804d53a 	srli	r2,r7,20
 2011bcc:	3018d77a 	srli	r12,r6,29
 2011bd0:	280ad53a 	srli	r5,r5,20
 2011bd4:	501490fa 	slli	r10,r10,3
 2011bd8:	2010d77a 	srli	r8,r4,29
 2011bdc:	481290fa 	slli	r9,r9,3
 2011be0:	380ed7fa 	srli	r7,r7,31
 2011be4:	defffb04 	addi	sp,sp,-20
 2011be8:	dc800215 	stw	r18,8(sp)
 2011bec:	dc400115 	stw	r17,4(sp)
 2011bf0:	dc000015 	stw	r16,0(sp)
 2011bf4:	dfc00415 	stw	ra,16(sp)
 2011bf8:	dcc00315 	stw	r19,12(sp)
 2011bfc:	1c803fcc 	andi	r18,r3,255
 2011c00:	2c01ffcc 	andi	r16,r5,2047
 2011c04:	5210b03a 	or	r8,r10,r8
 2011c08:	202290fa 	slli	r17,r4,3
 2011c0c:	1081ffcc 	andi	r2,r2,2047
 2011c10:	4b12b03a 	or	r9,r9,r12
 2011c14:	300c90fa 	slli	r6,r6,3
 2011c18:	91c07526 	beq	r18,r7,2011df0 <__adddf3+0x23c>
 2011c1c:	8087c83a 	sub	r3,r16,r2
 2011c20:	00c0ab0e 	bge	zero,r3,2011ed0 <__adddf3+0x31c>
 2011c24:	10002a1e 	bne	r2,zero,2011cd0 <__adddf3+0x11c>
 2011c28:	4984b03a 	or	r2,r9,r6
 2011c2c:	1000961e 	bne	r2,zero,2011e88 <__adddf3+0x2d4>
 2011c30:	888001cc 	andi	r2,r17,7
 2011c34:	10000726 	beq	r2,zero,2011c54 <__adddf3+0xa0>
 2011c38:	888003cc 	andi	r2,r17,15
 2011c3c:	00c00104 	movi	r3,4
 2011c40:	10c00426 	beq	r2,r3,2011c54 <__adddf3+0xa0>
 2011c44:	88c7883a 	add	r3,r17,r3
 2011c48:	1c63803a 	cmpltu	r17,r3,r17
 2011c4c:	4451883a 	add	r8,r8,r17
 2011c50:	1823883a 	mov	r17,r3
 2011c54:	4080202c 	andhi	r2,r8,128
 2011c58:	10005926 	beq	r2,zero,2011dc0 <__adddf3+0x20c>
 2011c5c:	84000044 	addi	r16,r16,1
 2011c60:	0081ffc4 	movi	r2,2047
 2011c64:	8080ba26 	beq	r16,r2,2011f50 <__adddf3+0x39c>
 2011c68:	00bfe034 	movhi	r2,65408
 2011c6c:	10bfffc4 	addi	r2,r2,-1
 2011c70:	4090703a 	and	r8,r8,r2
 2011c74:	4004977a 	slli	r2,r8,29
 2011c78:	4010927a 	slli	r8,r8,9
 2011c7c:	8822d0fa 	srli	r17,r17,3
 2011c80:	8401ffcc 	andi	r16,r16,2047
 2011c84:	4010d33a 	srli	r8,r8,12
 2011c88:	9007883a 	mov	r3,r18
 2011c8c:	1444b03a 	or	r2,r2,r17
 2011c90:	8401ffcc 	andi	r16,r16,2047
 2011c94:	8020953a 	slli	r16,r16,20
 2011c98:	18c03fcc 	andi	r3,r3,255
 2011c9c:	01000434 	movhi	r4,16
 2011ca0:	213fffc4 	addi	r4,r4,-1
 2011ca4:	180697fa 	slli	r3,r3,31
 2011ca8:	4110703a 	and	r8,r8,r4
 2011cac:	4410b03a 	or	r8,r8,r16
 2011cb0:	40c6b03a 	or	r3,r8,r3
 2011cb4:	dfc00417 	ldw	ra,16(sp)
 2011cb8:	dcc00317 	ldw	r19,12(sp)
 2011cbc:	dc800217 	ldw	r18,8(sp)
 2011cc0:	dc400117 	ldw	r17,4(sp)
 2011cc4:	dc000017 	ldw	r16,0(sp)
 2011cc8:	dec00504 	addi	sp,sp,20
 2011ccc:	f800283a 	ret
 2011cd0:	0081ffc4 	movi	r2,2047
 2011cd4:	80bfd626 	beq	r16,r2,2011c30 <__adddf3+0x7c>
 2011cd8:	4a402034 	orhi	r9,r9,128
 2011cdc:	00800e04 	movi	r2,56
 2011ce0:	10c09f16 	blt	r2,r3,2011f60 <__adddf3+0x3ac>
 2011ce4:	008007c4 	movi	r2,31
 2011ce8:	10c0c216 	blt	r2,r3,2011ff4 <__adddf3+0x440>
 2011cec:	00800804 	movi	r2,32
 2011cf0:	10c5c83a 	sub	r2,r2,r3
 2011cf4:	488a983a 	sll	r5,r9,r2
 2011cf8:	30c8d83a 	srl	r4,r6,r3
 2011cfc:	3084983a 	sll	r2,r6,r2
 2011d00:	48c6d83a 	srl	r3,r9,r3
 2011d04:	290cb03a 	or	r6,r5,r4
 2011d08:	1004c03a 	cmpne	r2,r2,zero
 2011d0c:	308cb03a 	or	r6,r6,r2
 2011d10:	898dc83a 	sub	r6,r17,r6
 2011d14:	89a3803a 	cmpltu	r17,r17,r6
 2011d18:	40d1c83a 	sub	r8,r8,r3
 2011d1c:	4451c83a 	sub	r8,r8,r17
 2011d20:	3023883a 	mov	r17,r6
 2011d24:	4080202c 	andhi	r2,r8,128
 2011d28:	10002326 	beq	r2,zero,2011db8 <__adddf3+0x204>
 2011d2c:	04c02034 	movhi	r19,128
 2011d30:	9cffffc4 	addi	r19,r19,-1
 2011d34:	44e6703a 	and	r19,r8,r19
 2011d38:	98007626 	beq	r19,zero,2011f14 <__adddf3+0x360>
 2011d3c:	9809883a 	mov	r4,r19
 2011d40:	20047340 	call	2004734 <__clzsi2>
 2011d44:	10fffe04 	addi	r3,r2,-8
 2011d48:	010007c4 	movi	r4,31
 2011d4c:	20c07716 	blt	r4,r3,2011f2c <__adddf3+0x378>
 2011d50:	00800804 	movi	r2,32
 2011d54:	10c5c83a 	sub	r2,r2,r3
 2011d58:	8884d83a 	srl	r2,r17,r2
 2011d5c:	98d0983a 	sll	r8,r19,r3
 2011d60:	88e2983a 	sll	r17,r17,r3
 2011d64:	1204b03a 	or	r2,r2,r8
 2011d68:	1c007416 	blt	r3,r16,2011f3c <__adddf3+0x388>
 2011d6c:	1c21c83a 	sub	r16,r3,r16
 2011d70:	82000044 	addi	r8,r16,1
 2011d74:	00c007c4 	movi	r3,31
 2011d78:	1a009116 	blt	r3,r8,2011fc0 <__adddf3+0x40c>
 2011d7c:	00c00804 	movi	r3,32
 2011d80:	1a07c83a 	sub	r3,r3,r8
 2011d84:	8a08d83a 	srl	r4,r17,r8
 2011d88:	88e2983a 	sll	r17,r17,r3
 2011d8c:	10c6983a 	sll	r3,r2,r3
 2011d90:	1210d83a 	srl	r8,r2,r8
 2011d94:	8804c03a 	cmpne	r2,r17,zero
 2011d98:	1906b03a 	or	r3,r3,r4
 2011d9c:	18a2b03a 	or	r17,r3,r2
 2011da0:	0021883a 	mov	r16,zero
 2011da4:	003fa206 	br	2011c30 <__adddf3+0x7c>
 2011da8:	1890b03a 	or	r8,r3,r2
 2011dac:	40017d26 	beq	r8,zero,20123a4 <__adddf3+0x7f0>
 2011db0:	1011883a 	mov	r8,r2
 2011db4:	1823883a 	mov	r17,r3
 2011db8:	888001cc 	andi	r2,r17,7
 2011dbc:	103f9e1e 	bne	r2,zero,2011c38 <__adddf3+0x84>
 2011dc0:	4004977a 	slli	r2,r8,29
 2011dc4:	8822d0fa 	srli	r17,r17,3
 2011dc8:	4010d0fa 	srli	r8,r8,3
 2011dcc:	9007883a 	mov	r3,r18
 2011dd0:	1444b03a 	or	r2,r2,r17
 2011dd4:	0101ffc4 	movi	r4,2047
 2011dd8:	81002426 	beq	r16,r4,2011e6c <__adddf3+0x2b8>
 2011ddc:	8120703a 	and	r16,r16,r4
 2011de0:	01000434 	movhi	r4,16
 2011de4:	213fffc4 	addi	r4,r4,-1
 2011de8:	4110703a 	and	r8,r8,r4
 2011dec:	003fa806 	br	2011c90 <__adddf3+0xdc>
 2011df0:	8089c83a 	sub	r4,r16,r2
 2011df4:	01005e0e 	bge	zero,r4,2011f70 <__adddf3+0x3bc>
 2011df8:	10002b26 	beq	r2,zero,2011ea8 <__adddf3+0x2f4>
 2011dfc:	0081ffc4 	movi	r2,2047
 2011e00:	80bf8b26 	beq	r16,r2,2011c30 <__adddf3+0x7c>
 2011e04:	4a402034 	orhi	r9,r9,128
 2011e08:	00800e04 	movi	r2,56
 2011e0c:	1100a40e 	bge	r2,r4,20120a0 <__adddf3+0x4ec>
 2011e10:	498cb03a 	or	r6,r9,r6
 2011e14:	300ac03a 	cmpne	r5,r6,zero
 2011e18:	0013883a 	mov	r9,zero
 2011e1c:	2c4b883a 	add	r5,r5,r17
 2011e20:	2c63803a 	cmpltu	r17,r5,r17
 2011e24:	4a11883a 	add	r8,r9,r8
 2011e28:	8a11883a 	add	r8,r17,r8
 2011e2c:	2823883a 	mov	r17,r5
 2011e30:	4080202c 	andhi	r2,r8,128
 2011e34:	103fe026 	beq	r2,zero,2011db8 <__adddf3+0x204>
 2011e38:	84000044 	addi	r16,r16,1
 2011e3c:	0081ffc4 	movi	r2,2047
 2011e40:	8080d226 	beq	r16,r2,201218c <__adddf3+0x5d8>
 2011e44:	00bfe034 	movhi	r2,65408
 2011e48:	10bfffc4 	addi	r2,r2,-1
 2011e4c:	4090703a 	and	r8,r8,r2
 2011e50:	880ad07a 	srli	r5,r17,1
 2011e54:	400897fa 	slli	r4,r8,31
 2011e58:	88c0004c 	andi	r3,r17,1
 2011e5c:	28e2b03a 	or	r17,r5,r3
 2011e60:	4010d07a 	srli	r8,r8,1
 2011e64:	2462b03a 	or	r17,r4,r17
 2011e68:	003f7106 	br	2011c30 <__adddf3+0x7c>
 2011e6c:	4088b03a 	or	r4,r8,r2
 2011e70:	20014526 	beq	r4,zero,2012388 <__adddf3+0x7d4>
 2011e74:	01000434 	movhi	r4,16
 2011e78:	42000234 	orhi	r8,r8,8
 2011e7c:	213fffc4 	addi	r4,r4,-1
 2011e80:	4110703a 	and	r8,r8,r4
 2011e84:	003f8206 	br	2011c90 <__adddf3+0xdc>
 2011e88:	18ffffc4 	addi	r3,r3,-1
 2011e8c:	1800491e 	bne	r3,zero,2011fb4 <__adddf3+0x400>
 2011e90:	898bc83a 	sub	r5,r17,r6
 2011e94:	8963803a 	cmpltu	r17,r17,r5
 2011e98:	4251c83a 	sub	r8,r8,r9
 2011e9c:	4451c83a 	sub	r8,r8,r17
 2011ea0:	2823883a 	mov	r17,r5
 2011ea4:	003f9f06 	br	2011d24 <__adddf3+0x170>
 2011ea8:	4984b03a 	or	r2,r9,r6
 2011eac:	103f6026 	beq	r2,zero,2011c30 <__adddf3+0x7c>
 2011eb0:	213fffc4 	addi	r4,r4,-1
 2011eb4:	2000931e 	bne	r4,zero,2012104 <__adddf3+0x550>
 2011eb8:	898d883a 	add	r6,r17,r6
 2011ebc:	3463803a 	cmpltu	r17,r6,r17
 2011ec0:	4251883a 	add	r8,r8,r9
 2011ec4:	8a11883a 	add	r8,r17,r8
 2011ec8:	3023883a 	mov	r17,r6
 2011ecc:	003fd806 	br	2011e30 <__adddf3+0x27c>
 2011ed0:	1800541e 	bne	r3,zero,2012024 <__adddf3+0x470>
 2011ed4:	80800044 	addi	r2,r16,1
 2011ed8:	1081ffcc 	andi	r2,r2,2047
 2011edc:	00c00044 	movi	r3,1
 2011ee0:	1880a00e 	bge	r3,r2,2012164 <__adddf3+0x5b0>
 2011ee4:	8989c83a 	sub	r4,r17,r6
 2011ee8:	8905803a 	cmpltu	r2,r17,r4
 2011eec:	4267c83a 	sub	r19,r8,r9
 2011ef0:	98a7c83a 	sub	r19,r19,r2
 2011ef4:	9880202c 	andhi	r2,r19,128
 2011ef8:	10006326 	beq	r2,zero,2012088 <__adddf3+0x4d4>
 2011efc:	3463c83a 	sub	r17,r6,r17
 2011f00:	4a07c83a 	sub	r3,r9,r8
 2011f04:	344d803a 	cmpltu	r6,r6,r17
 2011f08:	19a7c83a 	sub	r19,r3,r6
 2011f0c:	3825883a 	mov	r18,r7
 2011f10:	983f8a1e 	bne	r19,zero,2011d3c <__adddf3+0x188>
 2011f14:	8809883a 	mov	r4,r17
 2011f18:	20047340 	call	2004734 <__clzsi2>
 2011f1c:	10800804 	addi	r2,r2,32
 2011f20:	10fffe04 	addi	r3,r2,-8
 2011f24:	010007c4 	movi	r4,31
 2011f28:	20ff890e 	bge	r4,r3,2011d50 <__adddf3+0x19c>
 2011f2c:	10bff604 	addi	r2,r2,-40
 2011f30:	8884983a 	sll	r2,r17,r2
 2011f34:	0023883a 	mov	r17,zero
 2011f38:	1c3f8c0e 	bge	r3,r16,2011d6c <__adddf3+0x1b8>
 2011f3c:	023fe034 	movhi	r8,65408
 2011f40:	423fffc4 	addi	r8,r8,-1
 2011f44:	80e1c83a 	sub	r16,r16,r3
 2011f48:	1210703a 	and	r8,r2,r8
 2011f4c:	003f3806 	br	2011c30 <__adddf3+0x7c>
 2011f50:	9007883a 	mov	r3,r18
 2011f54:	0011883a 	mov	r8,zero
 2011f58:	0005883a 	mov	r2,zero
 2011f5c:	003f4c06 	br	2011c90 <__adddf3+0xdc>
 2011f60:	498cb03a 	or	r6,r9,r6
 2011f64:	300cc03a 	cmpne	r6,r6,zero
 2011f68:	0007883a 	mov	r3,zero
 2011f6c:	003f6806 	br	2011d10 <__adddf3+0x15c>
 2011f70:	20009c1e 	bne	r4,zero,20121e4 <__adddf3+0x630>
 2011f74:	80800044 	addi	r2,r16,1
 2011f78:	1141ffcc 	andi	r5,r2,2047
 2011f7c:	01000044 	movi	r4,1
 2011f80:	2140670e 	bge	r4,r5,2012120 <__adddf3+0x56c>
 2011f84:	0101ffc4 	movi	r4,2047
 2011f88:	11007f26 	beq	r2,r4,2012188 <__adddf3+0x5d4>
 2011f8c:	898d883a 	add	r6,r17,r6
 2011f90:	4247883a 	add	r3,r8,r9
 2011f94:	3451803a 	cmpltu	r8,r6,r17
 2011f98:	40d1883a 	add	r8,r8,r3
 2011f9c:	402297fa 	slli	r17,r8,31
 2011fa0:	300cd07a 	srli	r6,r6,1
 2011fa4:	4010d07a 	srli	r8,r8,1
 2011fa8:	1021883a 	mov	r16,r2
 2011fac:	89a2b03a 	or	r17,r17,r6
 2011fb0:	003f1f06 	br	2011c30 <__adddf3+0x7c>
 2011fb4:	0081ffc4 	movi	r2,2047
 2011fb8:	80bf481e 	bne	r16,r2,2011cdc <__adddf3+0x128>
 2011fbc:	003f1c06 	br	2011c30 <__adddf3+0x7c>
 2011fc0:	843ff844 	addi	r16,r16,-31
 2011fc4:	01000804 	movi	r4,32
 2011fc8:	1406d83a 	srl	r3,r2,r16
 2011fcc:	41005026 	beq	r8,r4,2012110 <__adddf3+0x55c>
 2011fd0:	01001004 	movi	r4,64
 2011fd4:	2211c83a 	sub	r8,r4,r8
 2011fd8:	1204983a 	sll	r2,r2,r8
 2011fdc:	88a2b03a 	or	r17,r17,r2
 2011fe0:	8822c03a 	cmpne	r17,r17,zero
 2011fe4:	1c62b03a 	or	r17,r3,r17
 2011fe8:	0011883a 	mov	r8,zero
 2011fec:	0021883a 	mov	r16,zero
 2011ff0:	003f7106 	br	2011db8 <__adddf3+0x204>
 2011ff4:	193ff804 	addi	r4,r3,-32
 2011ff8:	00800804 	movi	r2,32
 2011ffc:	4908d83a 	srl	r4,r9,r4
 2012000:	18804526 	beq	r3,r2,2012118 <__adddf3+0x564>
 2012004:	00801004 	movi	r2,64
 2012008:	10c5c83a 	sub	r2,r2,r3
 201200c:	4886983a 	sll	r3,r9,r2
 2012010:	198cb03a 	or	r6,r3,r6
 2012014:	300cc03a 	cmpne	r6,r6,zero
 2012018:	218cb03a 	or	r6,r4,r6
 201201c:	0007883a 	mov	r3,zero
 2012020:	003f3b06 	br	2011d10 <__adddf3+0x15c>
 2012024:	80002a26 	beq	r16,zero,20120d0 <__adddf3+0x51c>
 2012028:	0101ffc4 	movi	r4,2047
 201202c:	11006826 	beq	r2,r4,20121d0 <__adddf3+0x61c>
 2012030:	00c7c83a 	sub	r3,zero,r3
 2012034:	42002034 	orhi	r8,r8,128
 2012038:	01000e04 	movi	r4,56
 201203c:	20c07c16 	blt	r4,r3,2012230 <__adddf3+0x67c>
 2012040:	010007c4 	movi	r4,31
 2012044:	20c0da16 	blt	r4,r3,20123b0 <__adddf3+0x7fc>
 2012048:	01000804 	movi	r4,32
 201204c:	20c9c83a 	sub	r4,r4,r3
 2012050:	4114983a 	sll	r10,r8,r4
 2012054:	88cad83a 	srl	r5,r17,r3
 2012058:	8908983a 	sll	r4,r17,r4
 201205c:	40c6d83a 	srl	r3,r8,r3
 2012060:	5162b03a 	or	r17,r10,r5
 2012064:	2008c03a 	cmpne	r4,r4,zero
 2012068:	8922b03a 	or	r17,r17,r4
 201206c:	3463c83a 	sub	r17,r6,r17
 2012070:	48c7c83a 	sub	r3,r9,r3
 2012074:	344d803a 	cmpltu	r6,r6,r17
 2012078:	1991c83a 	sub	r8,r3,r6
 201207c:	1021883a 	mov	r16,r2
 2012080:	3825883a 	mov	r18,r7
 2012084:	003f2706 	br	2011d24 <__adddf3+0x170>
 2012088:	24d0b03a 	or	r8,r4,r19
 201208c:	40001b1e 	bne	r8,zero,20120fc <__adddf3+0x548>
 2012090:	0005883a 	mov	r2,zero
 2012094:	0007883a 	mov	r3,zero
 2012098:	0021883a 	mov	r16,zero
 201209c:	003f4d06 	br	2011dd4 <__adddf3+0x220>
 20120a0:	008007c4 	movi	r2,31
 20120a4:	11003c16 	blt	r2,r4,2012198 <__adddf3+0x5e4>
 20120a8:	00800804 	movi	r2,32
 20120ac:	1105c83a 	sub	r2,r2,r4
 20120b0:	488e983a 	sll	r7,r9,r2
 20120b4:	310ad83a 	srl	r5,r6,r4
 20120b8:	3084983a 	sll	r2,r6,r2
 20120bc:	4912d83a 	srl	r9,r9,r4
 20120c0:	394ab03a 	or	r5,r7,r5
 20120c4:	1004c03a 	cmpne	r2,r2,zero
 20120c8:	288ab03a 	or	r5,r5,r2
 20120cc:	003f5306 	br	2011e1c <__adddf3+0x268>
 20120d0:	4448b03a 	or	r4,r8,r17
 20120d4:	20003e26 	beq	r4,zero,20121d0 <__adddf3+0x61c>
 20120d8:	00c6303a 	nor	r3,zero,r3
 20120dc:	18003a1e 	bne	r3,zero,20121c8 <__adddf3+0x614>
 20120e0:	3463c83a 	sub	r17,r6,r17
 20120e4:	4a07c83a 	sub	r3,r9,r8
 20120e8:	344d803a 	cmpltu	r6,r6,r17
 20120ec:	1991c83a 	sub	r8,r3,r6
 20120f0:	1021883a 	mov	r16,r2
 20120f4:	3825883a 	mov	r18,r7
 20120f8:	003f0a06 	br	2011d24 <__adddf3+0x170>
 20120fc:	2023883a 	mov	r17,r4
 2012100:	003f0d06 	br	2011d38 <__adddf3+0x184>
 2012104:	0081ffc4 	movi	r2,2047
 2012108:	80bf3f1e 	bne	r16,r2,2011e08 <__adddf3+0x254>
 201210c:	003ec806 	br	2011c30 <__adddf3+0x7c>
 2012110:	0005883a 	mov	r2,zero
 2012114:	003fb106 	br	2011fdc <__adddf3+0x428>
 2012118:	0007883a 	mov	r3,zero
 201211c:	003fbc06 	br	2012010 <__adddf3+0x45c>
 2012120:	4444b03a 	or	r2,r8,r17
 2012124:	8000871e 	bne	r16,zero,2012344 <__adddf3+0x790>
 2012128:	1000ba26 	beq	r2,zero,2012414 <__adddf3+0x860>
 201212c:	4984b03a 	or	r2,r9,r6
 2012130:	103ebf26 	beq	r2,zero,2011c30 <__adddf3+0x7c>
 2012134:	8985883a 	add	r2,r17,r6
 2012138:	4247883a 	add	r3,r8,r9
 201213c:	1451803a 	cmpltu	r8,r2,r17
 2012140:	40d1883a 	add	r8,r8,r3
 2012144:	40c0202c 	andhi	r3,r8,128
 2012148:	1023883a 	mov	r17,r2
 201214c:	183f1a26 	beq	r3,zero,2011db8 <__adddf3+0x204>
 2012150:	00bfe034 	movhi	r2,65408
 2012154:	10bfffc4 	addi	r2,r2,-1
 2012158:	2021883a 	mov	r16,r4
 201215c:	4090703a 	and	r8,r8,r2
 2012160:	003eb306 	br	2011c30 <__adddf3+0x7c>
 2012164:	4444b03a 	or	r2,r8,r17
 2012168:	8000291e 	bne	r16,zero,2012210 <__adddf3+0x65c>
 201216c:	10004b1e 	bne	r2,zero,201229c <__adddf3+0x6e8>
 2012170:	4990b03a 	or	r8,r9,r6
 2012174:	40008b26 	beq	r8,zero,20123a4 <__adddf3+0x7f0>
 2012178:	4811883a 	mov	r8,r9
 201217c:	3023883a 	mov	r17,r6
 2012180:	3825883a 	mov	r18,r7
 2012184:	003eaa06 	br	2011c30 <__adddf3+0x7c>
 2012188:	1021883a 	mov	r16,r2
 201218c:	0011883a 	mov	r8,zero
 2012190:	0005883a 	mov	r2,zero
 2012194:	003f0f06 	br	2011dd4 <__adddf3+0x220>
 2012198:	217ff804 	addi	r5,r4,-32
 201219c:	00800804 	movi	r2,32
 20121a0:	494ad83a 	srl	r5,r9,r5
 20121a4:	20807d26 	beq	r4,r2,201239c <__adddf3+0x7e8>
 20121a8:	00801004 	movi	r2,64
 20121ac:	1109c83a 	sub	r4,r2,r4
 20121b0:	4912983a 	sll	r9,r9,r4
 20121b4:	498cb03a 	or	r6,r9,r6
 20121b8:	300cc03a 	cmpne	r6,r6,zero
 20121bc:	298ab03a 	or	r5,r5,r6
 20121c0:	0013883a 	mov	r9,zero
 20121c4:	003f1506 	br	2011e1c <__adddf3+0x268>
 20121c8:	0101ffc4 	movi	r4,2047
 20121cc:	113f9a1e 	bne	r2,r4,2012038 <__adddf3+0x484>
 20121d0:	4811883a 	mov	r8,r9
 20121d4:	3023883a 	mov	r17,r6
 20121d8:	1021883a 	mov	r16,r2
 20121dc:	3825883a 	mov	r18,r7
 20121e0:	003e9306 	br	2011c30 <__adddf3+0x7c>
 20121e4:	8000161e 	bne	r16,zero,2012240 <__adddf3+0x68c>
 20121e8:	444ab03a 	or	r5,r8,r17
 20121ec:	28005126 	beq	r5,zero,2012334 <__adddf3+0x780>
 20121f0:	0108303a 	nor	r4,zero,r4
 20121f4:	20004d1e 	bne	r4,zero,201232c <__adddf3+0x778>
 20121f8:	89a3883a 	add	r17,r17,r6
 20121fc:	4253883a 	add	r9,r8,r9
 2012200:	898d803a 	cmpltu	r6,r17,r6
 2012204:	3251883a 	add	r8,r6,r9
 2012208:	1021883a 	mov	r16,r2
 201220c:	003f0806 	br	2011e30 <__adddf3+0x27c>
 2012210:	1000301e 	bne	r2,zero,20122d4 <__adddf3+0x720>
 2012214:	4984b03a 	or	r2,r9,r6
 2012218:	10007126 	beq	r2,zero,20123e0 <__adddf3+0x82c>
 201221c:	4811883a 	mov	r8,r9
 2012220:	3023883a 	mov	r17,r6
 2012224:	3825883a 	mov	r18,r7
 2012228:	0401ffc4 	movi	r16,2047
 201222c:	003e8006 	br	2011c30 <__adddf3+0x7c>
 2012230:	4462b03a 	or	r17,r8,r17
 2012234:	8822c03a 	cmpne	r17,r17,zero
 2012238:	0007883a 	mov	r3,zero
 201223c:	003f8b06 	br	201206c <__adddf3+0x4b8>
 2012240:	0141ffc4 	movi	r5,2047
 2012244:	11403b26 	beq	r2,r5,2012334 <__adddf3+0x780>
 2012248:	0109c83a 	sub	r4,zero,r4
 201224c:	42002034 	orhi	r8,r8,128
 2012250:	01400e04 	movi	r5,56
 2012254:	29006716 	blt	r5,r4,20123f4 <__adddf3+0x840>
 2012258:	014007c4 	movi	r5,31
 201225c:	29007016 	blt	r5,r4,2012420 <__adddf3+0x86c>
 2012260:	01400804 	movi	r5,32
 2012264:	290bc83a 	sub	r5,r5,r4
 2012268:	4154983a 	sll	r10,r8,r5
 201226c:	890ed83a 	srl	r7,r17,r4
 2012270:	894a983a 	sll	r5,r17,r5
 2012274:	4108d83a 	srl	r4,r8,r4
 2012278:	51e2b03a 	or	r17,r10,r7
 201227c:	280ac03a 	cmpne	r5,r5,zero
 2012280:	8962b03a 	or	r17,r17,r5
 2012284:	89a3883a 	add	r17,r17,r6
 2012288:	2253883a 	add	r9,r4,r9
 201228c:	898d803a 	cmpltu	r6,r17,r6
 2012290:	3251883a 	add	r8,r6,r9
 2012294:	1021883a 	mov	r16,r2
 2012298:	003ee506 	br	2011e30 <__adddf3+0x27c>
 201229c:	4984b03a 	or	r2,r9,r6
 20122a0:	103e6326 	beq	r2,zero,2011c30 <__adddf3+0x7c>
 20122a4:	8987c83a 	sub	r3,r17,r6
 20122a8:	88c9803a 	cmpltu	r4,r17,r3
 20122ac:	4245c83a 	sub	r2,r8,r9
 20122b0:	1105c83a 	sub	r2,r2,r4
 20122b4:	1100202c 	andhi	r4,r2,128
 20122b8:	203ebb26 	beq	r4,zero,2011da8 <__adddf3+0x1f4>
 20122bc:	3463c83a 	sub	r17,r6,r17
 20122c0:	4a07c83a 	sub	r3,r9,r8
 20122c4:	344d803a 	cmpltu	r6,r6,r17
 20122c8:	1991c83a 	sub	r8,r3,r6
 20122cc:	3825883a 	mov	r18,r7
 20122d0:	003e5706 	br	2011c30 <__adddf3+0x7c>
 20122d4:	4984b03a 	or	r2,r9,r6
 20122d8:	10002e26 	beq	r2,zero,2012394 <__adddf3+0x7e0>
 20122dc:	4004d0fa 	srli	r2,r8,3
 20122e0:	8822d0fa 	srli	r17,r17,3
 20122e4:	4010977a 	slli	r8,r8,29
 20122e8:	10c0022c 	andhi	r3,r2,8
 20122ec:	4462b03a 	or	r17,r8,r17
 20122f0:	18000826 	beq	r3,zero,2012314 <__adddf3+0x760>
 20122f4:	4808d0fa 	srli	r4,r9,3
 20122f8:	20c0022c 	andhi	r3,r4,8
 20122fc:	1800051e 	bne	r3,zero,2012314 <__adddf3+0x760>
 2012300:	300cd0fa 	srli	r6,r6,3
 2012304:	4806977a 	slli	r3,r9,29
 2012308:	2005883a 	mov	r2,r4
 201230c:	3825883a 	mov	r18,r7
 2012310:	19a2b03a 	or	r17,r3,r6
 2012314:	8810d77a 	srli	r8,r17,29
 2012318:	100490fa 	slli	r2,r2,3
 201231c:	882290fa 	slli	r17,r17,3
 2012320:	0401ffc4 	movi	r16,2047
 2012324:	4090b03a 	or	r8,r8,r2
 2012328:	003e4106 	br	2011c30 <__adddf3+0x7c>
 201232c:	0141ffc4 	movi	r5,2047
 2012330:	117fc71e 	bne	r2,r5,2012250 <__adddf3+0x69c>
 2012334:	4811883a 	mov	r8,r9
 2012338:	3023883a 	mov	r17,r6
 201233c:	1021883a 	mov	r16,r2
 2012340:	003e3b06 	br	2011c30 <__adddf3+0x7c>
 2012344:	10002f26 	beq	r2,zero,2012404 <__adddf3+0x850>
 2012348:	4984b03a 	or	r2,r9,r6
 201234c:	10001126 	beq	r2,zero,2012394 <__adddf3+0x7e0>
 2012350:	4004d0fa 	srli	r2,r8,3
 2012354:	8822d0fa 	srli	r17,r17,3
 2012358:	4010977a 	slli	r8,r8,29
 201235c:	10c0022c 	andhi	r3,r2,8
 2012360:	4462b03a 	or	r17,r8,r17
 2012364:	183feb26 	beq	r3,zero,2012314 <__adddf3+0x760>
 2012368:	4808d0fa 	srli	r4,r9,3
 201236c:	20c0022c 	andhi	r3,r4,8
 2012370:	183fe81e 	bne	r3,zero,2012314 <__adddf3+0x760>
 2012374:	300cd0fa 	srli	r6,r6,3
 2012378:	4806977a 	slli	r3,r9,29
 201237c:	2005883a 	mov	r2,r4
 2012380:	19a2b03a 	or	r17,r3,r6
 2012384:	003fe306 	br	2012314 <__adddf3+0x760>
 2012388:	0011883a 	mov	r8,zero
 201238c:	0005883a 	mov	r2,zero
 2012390:	003e3f06 	br	2011c90 <__adddf3+0xdc>
 2012394:	0401ffc4 	movi	r16,2047
 2012398:	003e2506 	br	2011c30 <__adddf3+0x7c>
 201239c:	0013883a 	mov	r9,zero
 20123a0:	003f8406 	br	20121b4 <__adddf3+0x600>
 20123a4:	0005883a 	mov	r2,zero
 20123a8:	0007883a 	mov	r3,zero
 20123ac:	003e8906 	br	2011dd4 <__adddf3+0x220>
 20123b0:	197ff804 	addi	r5,r3,-32
 20123b4:	01000804 	movi	r4,32
 20123b8:	414ad83a 	srl	r5,r8,r5
 20123bc:	19002426 	beq	r3,r4,2012450 <__adddf3+0x89c>
 20123c0:	01001004 	movi	r4,64
 20123c4:	20c7c83a 	sub	r3,r4,r3
 20123c8:	40c6983a 	sll	r3,r8,r3
 20123cc:	1c46b03a 	or	r3,r3,r17
 20123d0:	1806c03a 	cmpne	r3,r3,zero
 20123d4:	28e2b03a 	or	r17,r5,r3
 20123d8:	0007883a 	mov	r3,zero
 20123dc:	003f2306 	br	201206c <__adddf3+0x4b8>
 20123e0:	0007883a 	mov	r3,zero
 20123e4:	5811883a 	mov	r8,r11
 20123e8:	00bfffc4 	movi	r2,-1
 20123ec:	0401ffc4 	movi	r16,2047
 20123f0:	003e7806 	br	2011dd4 <__adddf3+0x220>
 20123f4:	4462b03a 	or	r17,r8,r17
 20123f8:	8822c03a 	cmpne	r17,r17,zero
 20123fc:	0009883a 	mov	r4,zero
 2012400:	003fa006 	br	2012284 <__adddf3+0x6d0>
 2012404:	4811883a 	mov	r8,r9
 2012408:	3023883a 	mov	r17,r6
 201240c:	0401ffc4 	movi	r16,2047
 2012410:	003e0706 	br	2011c30 <__adddf3+0x7c>
 2012414:	4811883a 	mov	r8,r9
 2012418:	3023883a 	mov	r17,r6
 201241c:	003e0406 	br	2011c30 <__adddf3+0x7c>
 2012420:	21fff804 	addi	r7,r4,-32
 2012424:	01400804 	movi	r5,32
 2012428:	41ced83a 	srl	r7,r8,r7
 201242c:	21400a26 	beq	r4,r5,2012458 <__adddf3+0x8a4>
 2012430:	01401004 	movi	r5,64
 2012434:	2909c83a 	sub	r4,r5,r4
 2012438:	4108983a 	sll	r4,r8,r4
 201243c:	2448b03a 	or	r4,r4,r17
 2012440:	2008c03a 	cmpne	r4,r4,zero
 2012444:	3922b03a 	or	r17,r7,r4
 2012448:	0009883a 	mov	r4,zero
 201244c:	003f8d06 	br	2012284 <__adddf3+0x6d0>
 2012450:	0007883a 	mov	r3,zero
 2012454:	003fdd06 	br	20123cc <__adddf3+0x818>
 2012458:	0009883a 	mov	r4,zero
 201245c:	003ff706 	br	201243c <__adddf3+0x888>

02012460 <__eqdf2>:
 2012460:	2804d53a 	srli	r2,r5,20
 2012464:	3806d53a 	srli	r3,r7,20
 2012468:	02000434 	movhi	r8,16
 201246c:	423fffc4 	addi	r8,r8,-1
 2012470:	1081ffcc 	andi	r2,r2,2047
 2012474:	0281ffc4 	movi	r10,2047
 2012478:	2a12703a 	and	r9,r5,r8
 201247c:	18c1ffcc 	andi	r3,r3,2047
 2012480:	3a10703a 	and	r8,r7,r8
 2012484:	280ad7fa 	srli	r5,r5,31
 2012488:	380ed7fa 	srli	r7,r7,31
 201248c:	12801026 	beq	r2,r10,20124d0 <__eqdf2+0x70>
 2012490:	0281ffc4 	movi	r10,2047
 2012494:	1a800a26 	beq	r3,r10,20124c0 <__eqdf2+0x60>
 2012498:	10c00226 	beq	r2,r3,20124a4 <__eqdf2+0x44>
 201249c:	00800044 	movi	r2,1
 20124a0:	f800283a 	ret
 20124a4:	4a3ffd1e 	bne	r9,r8,201249c <__eqdf2+0x3c>
 20124a8:	21bffc1e 	bne	r4,r6,201249c <__eqdf2+0x3c>
 20124ac:	29c00c26 	beq	r5,r7,20124e0 <__eqdf2+0x80>
 20124b0:	103ffa1e 	bne	r2,zero,201249c <__eqdf2+0x3c>
 20124b4:	2244b03a 	or	r2,r4,r9
 20124b8:	1004c03a 	cmpne	r2,r2,zero
 20124bc:	f800283a 	ret
 20124c0:	3214b03a 	or	r10,r6,r8
 20124c4:	503ff426 	beq	r10,zero,2012498 <__eqdf2+0x38>
 20124c8:	00800044 	movi	r2,1
 20124cc:	f800283a 	ret
 20124d0:	2254b03a 	or	r10,r4,r9
 20124d4:	503fee26 	beq	r10,zero,2012490 <__eqdf2+0x30>
 20124d8:	00800044 	movi	r2,1
 20124dc:	f800283a 	ret
 20124e0:	0005883a 	mov	r2,zero
 20124e4:	f800283a 	ret

020124e8 <__subdf3>:
 20124e8:	02000434 	movhi	r8,16
 20124ec:	423fffc4 	addi	r8,r8,-1
 20124f0:	defffb04 	addi	sp,sp,-20
 20124f4:	2a14703a 	and	r10,r5,r8
 20124f8:	3812d53a 	srli	r9,r7,20
 20124fc:	3a10703a 	and	r8,r7,r8
 2012500:	2006d77a 	srli	r3,r4,29
 2012504:	3004d77a 	srli	r2,r6,29
 2012508:	dc000015 	stw	r16,0(sp)
 201250c:	501490fa 	slli	r10,r10,3
 2012510:	2820d53a 	srli	r16,r5,20
 2012514:	401090fa 	slli	r8,r8,3
 2012518:	dc800215 	stw	r18,8(sp)
 201251c:	dc400115 	stw	r17,4(sp)
 2012520:	dfc00415 	stw	ra,16(sp)
 2012524:	202290fa 	slli	r17,r4,3
 2012528:	dcc00315 	stw	r19,12(sp)
 201252c:	4a41ffcc 	andi	r9,r9,2047
 2012530:	0101ffc4 	movi	r4,2047
 2012534:	2824d7fa 	srli	r18,r5,31
 2012538:	8401ffcc 	andi	r16,r16,2047
 201253c:	50c6b03a 	or	r3,r10,r3
 2012540:	380ed7fa 	srli	r7,r7,31
 2012544:	408ab03a 	or	r5,r8,r2
 2012548:	300c90fa 	slli	r6,r6,3
 201254c:	49009626 	beq	r9,r4,20127a8 <__subdf3+0x2c0>
 2012550:	39c0005c 	xori	r7,r7,1
 2012554:	8245c83a 	sub	r2,r16,r9
 2012558:	3c807426 	beq	r7,r18,201272c <__subdf3+0x244>
 201255c:	0080af0e 	bge	zero,r2,201281c <__subdf3+0x334>
 2012560:	48002a1e 	bne	r9,zero,201260c <__subdf3+0x124>
 2012564:	2988b03a 	or	r4,r5,r6
 2012568:	20009a1e 	bne	r4,zero,20127d4 <__subdf3+0x2ec>
 201256c:	888001cc 	andi	r2,r17,7
 2012570:	10000726 	beq	r2,zero,2012590 <__subdf3+0xa8>
 2012574:	888003cc 	andi	r2,r17,15
 2012578:	01000104 	movi	r4,4
 201257c:	11000426 	beq	r2,r4,2012590 <__subdf3+0xa8>
 2012580:	890b883a 	add	r5,r17,r4
 2012584:	2c63803a 	cmpltu	r17,r5,r17
 2012588:	1c47883a 	add	r3,r3,r17
 201258c:	2823883a 	mov	r17,r5
 2012590:	1880202c 	andhi	r2,r3,128
 2012594:	10005926 	beq	r2,zero,20126fc <__subdf3+0x214>
 2012598:	84000044 	addi	r16,r16,1
 201259c:	0081ffc4 	movi	r2,2047
 20125a0:	8080be26 	beq	r16,r2,201289c <__subdf3+0x3b4>
 20125a4:	017fe034 	movhi	r5,65408
 20125a8:	297fffc4 	addi	r5,r5,-1
 20125ac:	1946703a 	and	r3,r3,r5
 20125b0:	1804977a 	slli	r2,r3,29
 20125b4:	1806927a 	slli	r3,r3,9
 20125b8:	8822d0fa 	srli	r17,r17,3
 20125bc:	8401ffcc 	andi	r16,r16,2047
 20125c0:	180ad33a 	srli	r5,r3,12
 20125c4:	9100004c 	andi	r4,r18,1
 20125c8:	1444b03a 	or	r2,r2,r17
 20125cc:	80c1ffcc 	andi	r3,r16,2047
 20125d0:	1820953a 	slli	r16,r3,20
 20125d4:	20c03fcc 	andi	r3,r4,255
 20125d8:	180897fa 	slli	r4,r3,31
 20125dc:	00c00434 	movhi	r3,16
 20125e0:	18ffffc4 	addi	r3,r3,-1
 20125e4:	28c6703a 	and	r3,r5,r3
 20125e8:	1c06b03a 	or	r3,r3,r16
 20125ec:	1906b03a 	or	r3,r3,r4
 20125f0:	dfc00417 	ldw	ra,16(sp)
 20125f4:	dcc00317 	ldw	r19,12(sp)
 20125f8:	dc800217 	ldw	r18,8(sp)
 20125fc:	dc400117 	ldw	r17,4(sp)
 2012600:	dc000017 	ldw	r16,0(sp)
 2012604:	dec00504 	addi	sp,sp,20
 2012608:	f800283a 	ret
 201260c:	0101ffc4 	movi	r4,2047
 2012610:	813fd626 	beq	r16,r4,201256c <__subdf3+0x84>
 2012614:	29402034 	orhi	r5,r5,128
 2012618:	01000e04 	movi	r4,56
 201261c:	2080a316 	blt	r4,r2,20128ac <__subdf3+0x3c4>
 2012620:	010007c4 	movi	r4,31
 2012624:	2080c616 	blt	r4,r2,2012940 <__subdf3+0x458>
 2012628:	01000804 	movi	r4,32
 201262c:	2089c83a 	sub	r4,r4,r2
 2012630:	2910983a 	sll	r8,r5,r4
 2012634:	308ed83a 	srl	r7,r6,r2
 2012638:	3108983a 	sll	r4,r6,r4
 201263c:	2884d83a 	srl	r2,r5,r2
 2012640:	41ccb03a 	or	r6,r8,r7
 2012644:	2008c03a 	cmpne	r4,r4,zero
 2012648:	310cb03a 	or	r6,r6,r4
 201264c:	898dc83a 	sub	r6,r17,r6
 2012650:	89a3803a 	cmpltu	r17,r17,r6
 2012654:	1887c83a 	sub	r3,r3,r2
 2012658:	1c47c83a 	sub	r3,r3,r17
 201265c:	3023883a 	mov	r17,r6
 2012660:	1880202c 	andhi	r2,r3,128
 2012664:	10002326 	beq	r2,zero,20126f4 <__subdf3+0x20c>
 2012668:	04c02034 	movhi	r19,128
 201266c:	9cffffc4 	addi	r19,r19,-1
 2012670:	1ce6703a 	and	r19,r3,r19
 2012674:	98007a26 	beq	r19,zero,2012860 <__subdf3+0x378>
 2012678:	9809883a 	mov	r4,r19
 201267c:	20047340 	call	2004734 <__clzsi2>
 2012680:	113ffe04 	addi	r4,r2,-8
 2012684:	00c007c4 	movi	r3,31
 2012688:	19007b16 	blt	r3,r4,2012878 <__subdf3+0x390>
 201268c:	00800804 	movi	r2,32
 2012690:	1105c83a 	sub	r2,r2,r4
 2012694:	8884d83a 	srl	r2,r17,r2
 2012698:	9906983a 	sll	r3,r19,r4
 201269c:	8922983a 	sll	r17,r17,r4
 20126a0:	10c4b03a 	or	r2,r2,r3
 20126a4:	24007816 	blt	r4,r16,2012888 <__subdf3+0x3a0>
 20126a8:	2421c83a 	sub	r16,r4,r16
 20126ac:	80c00044 	addi	r3,r16,1
 20126b0:	010007c4 	movi	r4,31
 20126b4:	20c09516 	blt	r4,r3,201290c <__subdf3+0x424>
 20126b8:	01400804 	movi	r5,32
 20126bc:	28cbc83a 	sub	r5,r5,r3
 20126c0:	88c8d83a 	srl	r4,r17,r3
 20126c4:	8962983a 	sll	r17,r17,r5
 20126c8:	114a983a 	sll	r5,r2,r5
 20126cc:	10c6d83a 	srl	r3,r2,r3
 20126d0:	8804c03a 	cmpne	r2,r17,zero
 20126d4:	290ab03a 	or	r5,r5,r4
 20126d8:	28a2b03a 	or	r17,r5,r2
 20126dc:	0021883a 	mov	r16,zero
 20126e0:	003fa206 	br	201256c <__subdf3+0x84>
 20126e4:	2090b03a 	or	r8,r4,r2
 20126e8:	40018e26 	beq	r8,zero,2012d24 <__subdf3+0x83c>
 20126ec:	1007883a 	mov	r3,r2
 20126f0:	2023883a 	mov	r17,r4
 20126f4:	888001cc 	andi	r2,r17,7
 20126f8:	103f9e1e 	bne	r2,zero,2012574 <__subdf3+0x8c>
 20126fc:	1804977a 	slli	r2,r3,29
 2012700:	8822d0fa 	srli	r17,r17,3
 2012704:	1810d0fa 	srli	r8,r3,3
 2012708:	9100004c 	andi	r4,r18,1
 201270c:	1444b03a 	or	r2,r2,r17
 2012710:	00c1ffc4 	movi	r3,2047
 2012714:	80c02826 	beq	r16,r3,20127b8 <__subdf3+0x2d0>
 2012718:	01400434 	movhi	r5,16
 201271c:	297fffc4 	addi	r5,r5,-1
 2012720:	80e0703a 	and	r16,r16,r3
 2012724:	414a703a 	and	r5,r8,r5
 2012728:	003fa806 	br	20125cc <__subdf3+0xe4>
 201272c:	0080630e 	bge	zero,r2,20128bc <__subdf3+0x3d4>
 2012730:	48003026 	beq	r9,zero,20127f4 <__subdf3+0x30c>
 2012734:	0101ffc4 	movi	r4,2047
 2012738:	813f8c26 	beq	r16,r4,201256c <__subdf3+0x84>
 201273c:	29402034 	orhi	r5,r5,128
 2012740:	01000e04 	movi	r4,56
 2012744:	2080a90e 	bge	r4,r2,20129ec <__subdf3+0x504>
 2012748:	298cb03a 	or	r6,r5,r6
 201274c:	3012c03a 	cmpne	r9,r6,zero
 2012750:	0005883a 	mov	r2,zero
 2012754:	4c53883a 	add	r9,r9,r17
 2012758:	4c63803a 	cmpltu	r17,r9,r17
 201275c:	10c7883a 	add	r3,r2,r3
 2012760:	88c7883a 	add	r3,r17,r3
 2012764:	4823883a 	mov	r17,r9
 2012768:	1880202c 	andhi	r2,r3,128
 201276c:	1000d026 	beq	r2,zero,2012ab0 <__subdf3+0x5c8>
 2012770:	84000044 	addi	r16,r16,1
 2012774:	0081ffc4 	movi	r2,2047
 2012778:	8080fe26 	beq	r16,r2,2012b74 <__subdf3+0x68c>
 201277c:	00bfe034 	movhi	r2,65408
 2012780:	10bfffc4 	addi	r2,r2,-1
 2012784:	1886703a 	and	r3,r3,r2
 2012788:	880ad07a 	srli	r5,r17,1
 201278c:	180497fa 	slli	r2,r3,31
 2012790:	8900004c 	andi	r4,r17,1
 2012794:	2922b03a 	or	r17,r5,r4
 2012798:	1806d07a 	srli	r3,r3,1
 201279c:	1462b03a 	or	r17,r2,r17
 20127a0:	3825883a 	mov	r18,r7
 20127a4:	003f7106 	br	201256c <__subdf3+0x84>
 20127a8:	2984b03a 	or	r2,r5,r6
 20127ac:	103f6826 	beq	r2,zero,2012550 <__subdf3+0x68>
 20127b0:	39c03fcc 	andi	r7,r7,255
 20127b4:	003f6706 	br	2012554 <__subdf3+0x6c>
 20127b8:	4086b03a 	or	r3,r8,r2
 20127bc:	18015226 	beq	r3,zero,2012d08 <__subdf3+0x820>
 20127c0:	00c00434 	movhi	r3,16
 20127c4:	41400234 	orhi	r5,r8,8
 20127c8:	18ffffc4 	addi	r3,r3,-1
 20127cc:	28ca703a 	and	r5,r5,r3
 20127d0:	003f7e06 	br	20125cc <__subdf3+0xe4>
 20127d4:	10bfffc4 	addi	r2,r2,-1
 20127d8:	1000491e 	bne	r2,zero,2012900 <__subdf3+0x418>
 20127dc:	898fc83a 	sub	r7,r17,r6
 20127e0:	89e3803a 	cmpltu	r17,r17,r7
 20127e4:	1947c83a 	sub	r3,r3,r5
 20127e8:	1c47c83a 	sub	r3,r3,r17
 20127ec:	3823883a 	mov	r17,r7
 20127f0:	003f9b06 	br	2012660 <__subdf3+0x178>
 20127f4:	2988b03a 	or	r4,r5,r6
 20127f8:	203f5c26 	beq	r4,zero,201256c <__subdf3+0x84>
 20127fc:	10bfffc4 	addi	r2,r2,-1
 2012800:	1000931e 	bne	r2,zero,2012a50 <__subdf3+0x568>
 2012804:	898d883a 	add	r6,r17,r6
 2012808:	3463803a 	cmpltu	r17,r6,r17
 201280c:	1947883a 	add	r3,r3,r5
 2012810:	88c7883a 	add	r3,r17,r3
 2012814:	3023883a 	mov	r17,r6
 2012818:	003fd306 	br	2012768 <__subdf3+0x280>
 201281c:	1000541e 	bne	r2,zero,2012970 <__subdf3+0x488>
 2012820:	80800044 	addi	r2,r16,1
 2012824:	1081ffcc 	andi	r2,r2,2047
 2012828:	01000044 	movi	r4,1
 201282c:	2080a20e 	bge	r4,r2,2012ab8 <__subdf3+0x5d0>
 2012830:	8989c83a 	sub	r4,r17,r6
 2012834:	8905803a 	cmpltu	r2,r17,r4
 2012838:	1967c83a 	sub	r19,r3,r5
 201283c:	98a7c83a 	sub	r19,r19,r2
 2012840:	9880202c 	andhi	r2,r19,128
 2012844:	10006326 	beq	r2,zero,20129d4 <__subdf3+0x4ec>
 2012848:	3463c83a 	sub	r17,r6,r17
 201284c:	28c7c83a 	sub	r3,r5,r3
 2012850:	344d803a 	cmpltu	r6,r6,r17
 2012854:	19a7c83a 	sub	r19,r3,r6
 2012858:	3825883a 	mov	r18,r7
 201285c:	983f861e 	bne	r19,zero,2012678 <__subdf3+0x190>
 2012860:	8809883a 	mov	r4,r17
 2012864:	20047340 	call	2004734 <__clzsi2>
 2012868:	10800804 	addi	r2,r2,32
 201286c:	113ffe04 	addi	r4,r2,-8
 2012870:	00c007c4 	movi	r3,31
 2012874:	193f850e 	bge	r3,r4,201268c <__subdf3+0x1a4>
 2012878:	10bff604 	addi	r2,r2,-40
 201287c:	8884983a 	sll	r2,r17,r2
 2012880:	0023883a 	mov	r17,zero
 2012884:	243f880e 	bge	r4,r16,20126a8 <__subdf3+0x1c0>
 2012888:	00ffe034 	movhi	r3,65408
 201288c:	18ffffc4 	addi	r3,r3,-1
 2012890:	8121c83a 	sub	r16,r16,r4
 2012894:	10c6703a 	and	r3,r2,r3
 2012898:	003f3406 	br	201256c <__subdf3+0x84>
 201289c:	9100004c 	andi	r4,r18,1
 20128a0:	000b883a 	mov	r5,zero
 20128a4:	0005883a 	mov	r2,zero
 20128a8:	003f4806 	br	20125cc <__subdf3+0xe4>
 20128ac:	298cb03a 	or	r6,r5,r6
 20128b0:	300cc03a 	cmpne	r6,r6,zero
 20128b4:	0005883a 	mov	r2,zero
 20128b8:	003f6406 	br	201264c <__subdf3+0x164>
 20128bc:	10009a1e 	bne	r2,zero,2012b28 <__subdf3+0x640>
 20128c0:	82400044 	addi	r9,r16,1
 20128c4:	4881ffcc 	andi	r2,r9,2047
 20128c8:	02800044 	movi	r10,1
 20128cc:	5080670e 	bge	r10,r2,2012a6c <__subdf3+0x584>
 20128d0:	0081ffc4 	movi	r2,2047
 20128d4:	4880af26 	beq	r9,r2,2012b94 <__subdf3+0x6ac>
 20128d8:	898d883a 	add	r6,r17,r6
 20128dc:	1945883a 	add	r2,r3,r5
 20128e0:	3447803a 	cmpltu	r3,r6,r17
 20128e4:	1887883a 	add	r3,r3,r2
 20128e8:	182297fa 	slli	r17,r3,31
 20128ec:	300cd07a 	srli	r6,r6,1
 20128f0:	1806d07a 	srli	r3,r3,1
 20128f4:	4821883a 	mov	r16,r9
 20128f8:	89a2b03a 	or	r17,r17,r6
 20128fc:	003f1b06 	br	201256c <__subdf3+0x84>
 2012900:	0101ffc4 	movi	r4,2047
 2012904:	813f441e 	bne	r16,r4,2012618 <__subdf3+0x130>
 2012908:	003f1806 	br	201256c <__subdf3+0x84>
 201290c:	843ff844 	addi	r16,r16,-31
 2012910:	01400804 	movi	r5,32
 2012914:	1408d83a 	srl	r4,r2,r16
 2012918:	19405026 	beq	r3,r5,2012a5c <__subdf3+0x574>
 201291c:	01401004 	movi	r5,64
 2012920:	28c7c83a 	sub	r3,r5,r3
 2012924:	10c4983a 	sll	r2,r2,r3
 2012928:	88a2b03a 	or	r17,r17,r2
 201292c:	8822c03a 	cmpne	r17,r17,zero
 2012930:	2462b03a 	or	r17,r4,r17
 2012934:	0007883a 	mov	r3,zero
 2012938:	0021883a 	mov	r16,zero
 201293c:	003f6d06 	br	20126f4 <__subdf3+0x20c>
 2012940:	11fff804 	addi	r7,r2,-32
 2012944:	01000804 	movi	r4,32
 2012948:	29ced83a 	srl	r7,r5,r7
 201294c:	11004526 	beq	r2,r4,2012a64 <__subdf3+0x57c>
 2012950:	01001004 	movi	r4,64
 2012954:	2089c83a 	sub	r4,r4,r2
 2012958:	2904983a 	sll	r2,r5,r4
 201295c:	118cb03a 	or	r6,r2,r6
 2012960:	300cc03a 	cmpne	r6,r6,zero
 2012964:	398cb03a 	or	r6,r7,r6
 2012968:	0005883a 	mov	r2,zero
 201296c:	003f3706 	br	201264c <__subdf3+0x164>
 2012970:	80002a26 	beq	r16,zero,2012a1c <__subdf3+0x534>
 2012974:	0101ffc4 	movi	r4,2047
 2012978:	49006626 	beq	r9,r4,2012b14 <__subdf3+0x62c>
 201297c:	0085c83a 	sub	r2,zero,r2
 2012980:	18c02034 	orhi	r3,r3,128
 2012984:	01000e04 	movi	r4,56
 2012988:	20807e16 	blt	r4,r2,2012b84 <__subdf3+0x69c>
 201298c:	010007c4 	movi	r4,31
 2012990:	2080e716 	blt	r4,r2,2012d30 <__subdf3+0x848>
 2012994:	01000804 	movi	r4,32
 2012998:	2089c83a 	sub	r4,r4,r2
 201299c:	1914983a 	sll	r10,r3,r4
 20129a0:	8890d83a 	srl	r8,r17,r2
 20129a4:	8908983a 	sll	r4,r17,r4
 20129a8:	1884d83a 	srl	r2,r3,r2
 20129ac:	5222b03a 	or	r17,r10,r8
 20129b0:	2006c03a 	cmpne	r3,r4,zero
 20129b4:	88e2b03a 	or	r17,r17,r3
 20129b8:	3463c83a 	sub	r17,r6,r17
 20129bc:	2885c83a 	sub	r2,r5,r2
 20129c0:	344d803a 	cmpltu	r6,r6,r17
 20129c4:	1187c83a 	sub	r3,r2,r6
 20129c8:	4821883a 	mov	r16,r9
 20129cc:	3825883a 	mov	r18,r7
 20129d0:	003f2306 	br	2012660 <__subdf3+0x178>
 20129d4:	24d0b03a 	or	r8,r4,r19
 20129d8:	40001b1e 	bne	r8,zero,2012a48 <__subdf3+0x560>
 20129dc:	0005883a 	mov	r2,zero
 20129e0:	0009883a 	mov	r4,zero
 20129e4:	0021883a 	mov	r16,zero
 20129e8:	003f4906 	br	2012710 <__subdf3+0x228>
 20129ec:	010007c4 	movi	r4,31
 20129f0:	20803a16 	blt	r4,r2,2012adc <__subdf3+0x5f4>
 20129f4:	01000804 	movi	r4,32
 20129f8:	2089c83a 	sub	r4,r4,r2
 20129fc:	2912983a 	sll	r9,r5,r4
 2012a00:	3090d83a 	srl	r8,r6,r2
 2012a04:	3108983a 	sll	r4,r6,r4
 2012a08:	2884d83a 	srl	r2,r5,r2
 2012a0c:	4a12b03a 	or	r9,r9,r8
 2012a10:	2008c03a 	cmpne	r4,r4,zero
 2012a14:	4912b03a 	or	r9,r9,r4
 2012a18:	003f4e06 	br	2012754 <__subdf3+0x26c>
 2012a1c:	1c48b03a 	or	r4,r3,r17
 2012a20:	20003c26 	beq	r4,zero,2012b14 <__subdf3+0x62c>
 2012a24:	0084303a 	nor	r2,zero,r2
 2012a28:	1000381e 	bne	r2,zero,2012b0c <__subdf3+0x624>
 2012a2c:	3463c83a 	sub	r17,r6,r17
 2012a30:	28c5c83a 	sub	r2,r5,r3
 2012a34:	344d803a 	cmpltu	r6,r6,r17
 2012a38:	1187c83a 	sub	r3,r2,r6
 2012a3c:	4821883a 	mov	r16,r9
 2012a40:	3825883a 	mov	r18,r7
 2012a44:	003f0606 	br	2012660 <__subdf3+0x178>
 2012a48:	2023883a 	mov	r17,r4
 2012a4c:	003f0906 	br	2012674 <__subdf3+0x18c>
 2012a50:	0101ffc4 	movi	r4,2047
 2012a54:	813f3a1e 	bne	r16,r4,2012740 <__subdf3+0x258>
 2012a58:	003ec406 	br	201256c <__subdf3+0x84>
 2012a5c:	0005883a 	mov	r2,zero
 2012a60:	003fb106 	br	2012928 <__subdf3+0x440>
 2012a64:	0005883a 	mov	r2,zero
 2012a68:	003fbc06 	br	201295c <__subdf3+0x474>
 2012a6c:	1c44b03a 	or	r2,r3,r17
 2012a70:	80008e1e 	bne	r16,zero,2012cac <__subdf3+0x7c4>
 2012a74:	1000c826 	beq	r2,zero,2012d98 <__subdf3+0x8b0>
 2012a78:	2984b03a 	or	r2,r5,r6
 2012a7c:	103ebb26 	beq	r2,zero,201256c <__subdf3+0x84>
 2012a80:	8989883a 	add	r4,r17,r6
 2012a84:	1945883a 	add	r2,r3,r5
 2012a88:	2447803a 	cmpltu	r3,r4,r17
 2012a8c:	1887883a 	add	r3,r3,r2
 2012a90:	1880202c 	andhi	r2,r3,128
 2012a94:	2023883a 	mov	r17,r4
 2012a98:	103f1626 	beq	r2,zero,20126f4 <__subdf3+0x20c>
 2012a9c:	00bfe034 	movhi	r2,65408
 2012aa0:	10bfffc4 	addi	r2,r2,-1
 2012aa4:	5021883a 	mov	r16,r10
 2012aa8:	1886703a 	and	r3,r3,r2
 2012aac:	003eaf06 	br	201256c <__subdf3+0x84>
 2012ab0:	3825883a 	mov	r18,r7
 2012ab4:	003f0f06 	br	20126f4 <__subdf3+0x20c>
 2012ab8:	1c44b03a 	or	r2,r3,r17
 2012abc:	8000251e 	bne	r16,zero,2012b54 <__subdf3+0x66c>
 2012ac0:	1000661e 	bne	r2,zero,2012c5c <__subdf3+0x774>
 2012ac4:	2990b03a 	or	r8,r5,r6
 2012ac8:	40009626 	beq	r8,zero,2012d24 <__subdf3+0x83c>
 2012acc:	2807883a 	mov	r3,r5
 2012ad0:	3023883a 	mov	r17,r6
 2012ad4:	3825883a 	mov	r18,r7
 2012ad8:	003ea406 	br	201256c <__subdf3+0x84>
 2012adc:	127ff804 	addi	r9,r2,-32
 2012ae0:	01000804 	movi	r4,32
 2012ae4:	2a52d83a 	srl	r9,r5,r9
 2012ae8:	11008c26 	beq	r2,r4,2012d1c <__subdf3+0x834>
 2012aec:	01001004 	movi	r4,64
 2012af0:	2085c83a 	sub	r2,r4,r2
 2012af4:	2884983a 	sll	r2,r5,r2
 2012af8:	118cb03a 	or	r6,r2,r6
 2012afc:	300cc03a 	cmpne	r6,r6,zero
 2012b00:	4992b03a 	or	r9,r9,r6
 2012b04:	0005883a 	mov	r2,zero
 2012b08:	003f1206 	br	2012754 <__subdf3+0x26c>
 2012b0c:	0101ffc4 	movi	r4,2047
 2012b10:	493f9c1e 	bne	r9,r4,2012984 <__subdf3+0x49c>
 2012b14:	2807883a 	mov	r3,r5
 2012b18:	3023883a 	mov	r17,r6
 2012b1c:	4821883a 	mov	r16,r9
 2012b20:	3825883a 	mov	r18,r7
 2012b24:	003e9106 	br	201256c <__subdf3+0x84>
 2012b28:	80001f1e 	bne	r16,zero,2012ba8 <__subdf3+0x6c0>
 2012b2c:	1c48b03a 	or	r4,r3,r17
 2012b30:	20005a26 	beq	r4,zero,2012c9c <__subdf3+0x7b4>
 2012b34:	0084303a 	nor	r2,zero,r2
 2012b38:	1000561e 	bne	r2,zero,2012c94 <__subdf3+0x7ac>
 2012b3c:	89a3883a 	add	r17,r17,r6
 2012b40:	1945883a 	add	r2,r3,r5
 2012b44:	898d803a 	cmpltu	r6,r17,r6
 2012b48:	3087883a 	add	r3,r6,r2
 2012b4c:	4821883a 	mov	r16,r9
 2012b50:	003f0506 	br	2012768 <__subdf3+0x280>
 2012b54:	10002b1e 	bne	r2,zero,2012c04 <__subdf3+0x71c>
 2012b58:	2984b03a 	or	r2,r5,r6
 2012b5c:	10008026 	beq	r2,zero,2012d60 <__subdf3+0x878>
 2012b60:	2807883a 	mov	r3,r5
 2012b64:	3023883a 	mov	r17,r6
 2012b68:	3825883a 	mov	r18,r7
 2012b6c:	0401ffc4 	movi	r16,2047
 2012b70:	003e7e06 	br	201256c <__subdf3+0x84>
 2012b74:	3809883a 	mov	r4,r7
 2012b78:	0011883a 	mov	r8,zero
 2012b7c:	0005883a 	mov	r2,zero
 2012b80:	003ee306 	br	2012710 <__subdf3+0x228>
 2012b84:	1c62b03a 	or	r17,r3,r17
 2012b88:	8822c03a 	cmpne	r17,r17,zero
 2012b8c:	0005883a 	mov	r2,zero
 2012b90:	003f8906 	br	20129b8 <__subdf3+0x4d0>
 2012b94:	3809883a 	mov	r4,r7
 2012b98:	4821883a 	mov	r16,r9
 2012b9c:	0011883a 	mov	r8,zero
 2012ba0:	0005883a 	mov	r2,zero
 2012ba4:	003eda06 	br	2012710 <__subdf3+0x228>
 2012ba8:	0101ffc4 	movi	r4,2047
 2012bac:	49003b26 	beq	r9,r4,2012c9c <__subdf3+0x7b4>
 2012bb0:	0085c83a 	sub	r2,zero,r2
 2012bb4:	18c02034 	orhi	r3,r3,128
 2012bb8:	01000e04 	movi	r4,56
 2012bbc:	20806e16 	blt	r4,r2,2012d78 <__subdf3+0x890>
 2012bc0:	010007c4 	movi	r4,31
 2012bc4:	20807716 	blt	r4,r2,2012da4 <__subdf3+0x8bc>
 2012bc8:	01000804 	movi	r4,32
 2012bcc:	2089c83a 	sub	r4,r4,r2
 2012bd0:	1914983a 	sll	r10,r3,r4
 2012bd4:	8890d83a 	srl	r8,r17,r2
 2012bd8:	8908983a 	sll	r4,r17,r4
 2012bdc:	1884d83a 	srl	r2,r3,r2
 2012be0:	5222b03a 	or	r17,r10,r8
 2012be4:	2006c03a 	cmpne	r3,r4,zero
 2012be8:	88e2b03a 	or	r17,r17,r3
 2012bec:	89a3883a 	add	r17,r17,r6
 2012bf0:	1145883a 	add	r2,r2,r5
 2012bf4:	898d803a 	cmpltu	r6,r17,r6
 2012bf8:	3087883a 	add	r3,r6,r2
 2012bfc:	4821883a 	mov	r16,r9
 2012c00:	003ed906 	br	2012768 <__subdf3+0x280>
 2012c04:	2984b03a 	or	r2,r5,r6
 2012c08:	10004226 	beq	r2,zero,2012d14 <__subdf3+0x82c>
 2012c0c:	1808d0fa 	srli	r4,r3,3
 2012c10:	8822d0fa 	srli	r17,r17,3
 2012c14:	1806977a 	slli	r3,r3,29
 2012c18:	2080022c 	andhi	r2,r4,8
 2012c1c:	1c62b03a 	or	r17,r3,r17
 2012c20:	10000826 	beq	r2,zero,2012c44 <__subdf3+0x75c>
 2012c24:	2812d0fa 	srli	r9,r5,3
 2012c28:	4880022c 	andhi	r2,r9,8
 2012c2c:	1000051e 	bne	r2,zero,2012c44 <__subdf3+0x75c>
 2012c30:	300cd0fa 	srli	r6,r6,3
 2012c34:	2804977a 	slli	r2,r5,29
 2012c38:	4809883a 	mov	r4,r9
 2012c3c:	3825883a 	mov	r18,r7
 2012c40:	11a2b03a 	or	r17,r2,r6
 2012c44:	8806d77a 	srli	r3,r17,29
 2012c48:	200890fa 	slli	r4,r4,3
 2012c4c:	882290fa 	slli	r17,r17,3
 2012c50:	0401ffc4 	movi	r16,2047
 2012c54:	1906b03a 	or	r3,r3,r4
 2012c58:	003e4406 	br	201256c <__subdf3+0x84>
 2012c5c:	2984b03a 	or	r2,r5,r6
 2012c60:	103e4226 	beq	r2,zero,201256c <__subdf3+0x84>
 2012c64:	8989c83a 	sub	r4,r17,r6
 2012c68:	8911803a 	cmpltu	r8,r17,r4
 2012c6c:	1945c83a 	sub	r2,r3,r5
 2012c70:	1205c83a 	sub	r2,r2,r8
 2012c74:	1200202c 	andhi	r8,r2,128
 2012c78:	403e9a26 	beq	r8,zero,20126e4 <__subdf3+0x1fc>
 2012c7c:	3463c83a 	sub	r17,r6,r17
 2012c80:	28c5c83a 	sub	r2,r5,r3
 2012c84:	344d803a 	cmpltu	r6,r6,r17
 2012c88:	1187c83a 	sub	r3,r2,r6
 2012c8c:	3825883a 	mov	r18,r7
 2012c90:	003e3606 	br	201256c <__subdf3+0x84>
 2012c94:	0101ffc4 	movi	r4,2047
 2012c98:	493fc71e 	bne	r9,r4,2012bb8 <__subdf3+0x6d0>
 2012c9c:	2807883a 	mov	r3,r5
 2012ca0:	3023883a 	mov	r17,r6
 2012ca4:	4821883a 	mov	r16,r9
 2012ca8:	003e3006 	br	201256c <__subdf3+0x84>
 2012cac:	10003626 	beq	r2,zero,2012d88 <__subdf3+0x8a0>
 2012cb0:	2984b03a 	or	r2,r5,r6
 2012cb4:	10001726 	beq	r2,zero,2012d14 <__subdf3+0x82c>
 2012cb8:	1808d0fa 	srli	r4,r3,3
 2012cbc:	8822d0fa 	srli	r17,r17,3
 2012cc0:	1806977a 	slli	r3,r3,29
 2012cc4:	2080022c 	andhi	r2,r4,8
 2012cc8:	1c62b03a 	or	r17,r3,r17
 2012ccc:	10000726 	beq	r2,zero,2012cec <__subdf3+0x804>
 2012cd0:	2812d0fa 	srli	r9,r5,3
 2012cd4:	4880022c 	andhi	r2,r9,8
 2012cd8:	1000041e 	bne	r2,zero,2012cec <__subdf3+0x804>
 2012cdc:	300cd0fa 	srli	r6,r6,3
 2012ce0:	2804977a 	slli	r2,r5,29
 2012ce4:	4809883a 	mov	r4,r9
 2012ce8:	11a2b03a 	or	r17,r2,r6
 2012cec:	8806d77a 	srli	r3,r17,29
 2012cf0:	200890fa 	slli	r4,r4,3
 2012cf4:	882290fa 	slli	r17,r17,3
 2012cf8:	3825883a 	mov	r18,r7
 2012cfc:	1906b03a 	or	r3,r3,r4
 2012d00:	0401ffc4 	movi	r16,2047
 2012d04:	003e1906 	br	201256c <__subdf3+0x84>
 2012d08:	000b883a 	mov	r5,zero
 2012d0c:	0005883a 	mov	r2,zero
 2012d10:	003e2e06 	br	20125cc <__subdf3+0xe4>
 2012d14:	0401ffc4 	movi	r16,2047
 2012d18:	003e1406 	br	201256c <__subdf3+0x84>
 2012d1c:	0005883a 	mov	r2,zero
 2012d20:	003f7506 	br	2012af8 <__subdf3+0x610>
 2012d24:	0005883a 	mov	r2,zero
 2012d28:	0009883a 	mov	r4,zero
 2012d2c:	003e7806 	br	2012710 <__subdf3+0x228>
 2012d30:	123ff804 	addi	r8,r2,-32
 2012d34:	01000804 	movi	r4,32
 2012d38:	1a10d83a 	srl	r8,r3,r8
 2012d3c:	11002526 	beq	r2,r4,2012dd4 <__subdf3+0x8ec>
 2012d40:	01001004 	movi	r4,64
 2012d44:	2085c83a 	sub	r2,r4,r2
 2012d48:	1884983a 	sll	r2,r3,r2
 2012d4c:	1444b03a 	or	r2,r2,r17
 2012d50:	1004c03a 	cmpne	r2,r2,zero
 2012d54:	40a2b03a 	or	r17,r8,r2
 2012d58:	0005883a 	mov	r2,zero
 2012d5c:	003f1606 	br	20129b8 <__subdf3+0x4d0>
 2012d60:	02000434 	movhi	r8,16
 2012d64:	0009883a 	mov	r4,zero
 2012d68:	423fffc4 	addi	r8,r8,-1
 2012d6c:	00bfffc4 	movi	r2,-1
 2012d70:	0401ffc4 	movi	r16,2047
 2012d74:	003e6606 	br	2012710 <__subdf3+0x228>
 2012d78:	1c62b03a 	or	r17,r3,r17
 2012d7c:	8822c03a 	cmpne	r17,r17,zero
 2012d80:	0005883a 	mov	r2,zero
 2012d84:	003f9906 	br	2012bec <__subdf3+0x704>
 2012d88:	2807883a 	mov	r3,r5
 2012d8c:	3023883a 	mov	r17,r6
 2012d90:	0401ffc4 	movi	r16,2047
 2012d94:	003df506 	br	201256c <__subdf3+0x84>
 2012d98:	2807883a 	mov	r3,r5
 2012d9c:	3023883a 	mov	r17,r6
 2012da0:	003df206 	br	201256c <__subdf3+0x84>
 2012da4:	123ff804 	addi	r8,r2,-32
 2012da8:	01000804 	movi	r4,32
 2012dac:	1a10d83a 	srl	r8,r3,r8
 2012db0:	11000a26 	beq	r2,r4,2012ddc <__subdf3+0x8f4>
 2012db4:	01001004 	movi	r4,64
 2012db8:	2085c83a 	sub	r2,r4,r2
 2012dbc:	1884983a 	sll	r2,r3,r2
 2012dc0:	1444b03a 	or	r2,r2,r17
 2012dc4:	1004c03a 	cmpne	r2,r2,zero
 2012dc8:	40a2b03a 	or	r17,r8,r2
 2012dcc:	0005883a 	mov	r2,zero
 2012dd0:	003f8606 	br	2012bec <__subdf3+0x704>
 2012dd4:	0005883a 	mov	r2,zero
 2012dd8:	003fdc06 	br	2012d4c <__subdf3+0x864>
 2012ddc:	0005883a 	mov	r2,zero
 2012de0:	003ff706 	br	2012dc0 <__subdf3+0x8d8>

02012de4 <__fixdfsi>:
 2012de4:	280cd53a 	srli	r6,r5,20
 2012de8:	00c00434 	movhi	r3,16
 2012dec:	18ffffc4 	addi	r3,r3,-1
 2012df0:	3181ffcc 	andi	r6,r6,2047
 2012df4:	01c0ff84 	movi	r7,1022
 2012df8:	28c6703a 	and	r3,r5,r3
 2012dfc:	280ad7fa 	srli	r5,r5,31
 2012e00:	3980120e 	bge	r7,r6,2012e4c <__fixdfsi+0x68>
 2012e04:	00810744 	movi	r2,1053
 2012e08:	11800c16 	blt	r2,r6,2012e3c <__fixdfsi+0x58>
 2012e0c:	00810cc4 	movi	r2,1075
 2012e10:	1185c83a 	sub	r2,r2,r6
 2012e14:	01c007c4 	movi	r7,31
 2012e18:	18c00434 	orhi	r3,r3,16
 2012e1c:	38800d16 	blt	r7,r2,2012e54 <__fixdfsi+0x70>
 2012e20:	31befb44 	addi	r6,r6,-1043
 2012e24:	2084d83a 	srl	r2,r4,r2
 2012e28:	1986983a 	sll	r3,r3,r6
 2012e2c:	1884b03a 	or	r2,r3,r2
 2012e30:	28000726 	beq	r5,zero,2012e50 <__fixdfsi+0x6c>
 2012e34:	0085c83a 	sub	r2,zero,r2
 2012e38:	f800283a 	ret
 2012e3c:	00a00034 	movhi	r2,32768
 2012e40:	10bfffc4 	addi	r2,r2,-1
 2012e44:	2885883a 	add	r2,r5,r2
 2012e48:	f800283a 	ret
 2012e4c:	0005883a 	mov	r2,zero
 2012e50:	f800283a 	ret
 2012e54:	008104c4 	movi	r2,1043
 2012e58:	1185c83a 	sub	r2,r2,r6
 2012e5c:	1884d83a 	srl	r2,r3,r2
 2012e60:	003ff306 	br	2012e30 <__fixdfsi+0x4c>

02012e64 <__floatsidf>:
 2012e64:	defffd04 	addi	sp,sp,-12
 2012e68:	dfc00215 	stw	ra,8(sp)
 2012e6c:	dc400115 	stw	r17,4(sp)
 2012e70:	dc000015 	stw	r16,0(sp)
 2012e74:	20002b26 	beq	r4,zero,2012f24 <__floatsidf+0xc0>
 2012e78:	2023883a 	mov	r17,r4
 2012e7c:	2020d7fa 	srli	r16,r4,31
 2012e80:	20002d16 	blt	r4,zero,2012f38 <__floatsidf+0xd4>
 2012e84:	8809883a 	mov	r4,r17
 2012e88:	20047340 	call	2004734 <__clzsi2>
 2012e8c:	01410784 	movi	r5,1054
 2012e90:	288bc83a 	sub	r5,r5,r2
 2012e94:	01010cc4 	movi	r4,1075
 2012e98:	2149c83a 	sub	r4,r4,r5
 2012e9c:	00c007c4 	movi	r3,31
 2012ea0:	1900160e 	bge	r3,r4,2012efc <__floatsidf+0x98>
 2012ea4:	00c104c4 	movi	r3,1043
 2012ea8:	1947c83a 	sub	r3,r3,r5
 2012eac:	88c6983a 	sll	r3,r17,r3
 2012eb0:	00800434 	movhi	r2,16
 2012eb4:	10bfffc4 	addi	r2,r2,-1
 2012eb8:	1886703a 	and	r3,r3,r2
 2012ebc:	2941ffcc 	andi	r5,r5,2047
 2012ec0:	800d883a 	mov	r6,r16
 2012ec4:	0005883a 	mov	r2,zero
 2012ec8:	280a953a 	slli	r5,r5,20
 2012ecc:	31803fcc 	andi	r6,r6,255
 2012ed0:	01000434 	movhi	r4,16
 2012ed4:	300c97fa 	slli	r6,r6,31
 2012ed8:	213fffc4 	addi	r4,r4,-1
 2012edc:	1906703a 	and	r3,r3,r4
 2012ee0:	1946b03a 	or	r3,r3,r5
 2012ee4:	1986b03a 	or	r3,r3,r6
 2012ee8:	dfc00217 	ldw	ra,8(sp)
 2012eec:	dc400117 	ldw	r17,4(sp)
 2012ef0:	dc000017 	ldw	r16,0(sp)
 2012ef4:	dec00304 	addi	sp,sp,12
 2012ef8:	f800283a 	ret
 2012efc:	00c002c4 	movi	r3,11
 2012f00:	1887c83a 	sub	r3,r3,r2
 2012f04:	88c6d83a 	srl	r3,r17,r3
 2012f08:	8904983a 	sll	r2,r17,r4
 2012f0c:	01000434 	movhi	r4,16
 2012f10:	213fffc4 	addi	r4,r4,-1
 2012f14:	2941ffcc 	andi	r5,r5,2047
 2012f18:	1906703a 	and	r3,r3,r4
 2012f1c:	800d883a 	mov	r6,r16
 2012f20:	003fe906 	br	2012ec8 <__floatsidf+0x64>
 2012f24:	000d883a 	mov	r6,zero
 2012f28:	000b883a 	mov	r5,zero
 2012f2c:	0007883a 	mov	r3,zero
 2012f30:	0005883a 	mov	r2,zero
 2012f34:	003fe406 	br	2012ec8 <__floatsidf+0x64>
 2012f38:	0123c83a 	sub	r17,zero,r4
 2012f3c:	003fd106 	br	2012e84 <__floatsidf+0x20>

02012f40 <__floatunsidf>:
 2012f40:	defffe04 	addi	sp,sp,-8
 2012f44:	dc000015 	stw	r16,0(sp)
 2012f48:	dfc00115 	stw	ra,4(sp)
 2012f4c:	2021883a 	mov	r16,r4
 2012f50:	20002226 	beq	r4,zero,2012fdc <__floatunsidf+0x9c>
 2012f54:	20047340 	call	2004734 <__clzsi2>
 2012f58:	01010784 	movi	r4,1054
 2012f5c:	2089c83a 	sub	r4,r4,r2
 2012f60:	01810cc4 	movi	r6,1075
 2012f64:	310dc83a 	sub	r6,r6,r4
 2012f68:	00c007c4 	movi	r3,31
 2012f6c:	1980120e 	bge	r3,r6,2012fb8 <__floatunsidf+0x78>
 2012f70:	00c104c4 	movi	r3,1043
 2012f74:	1907c83a 	sub	r3,r3,r4
 2012f78:	80ca983a 	sll	r5,r16,r3
 2012f7c:	00800434 	movhi	r2,16
 2012f80:	10bfffc4 	addi	r2,r2,-1
 2012f84:	2101ffcc 	andi	r4,r4,2047
 2012f88:	0021883a 	mov	r16,zero
 2012f8c:	288a703a 	and	r5,r5,r2
 2012f90:	2008953a 	slli	r4,r4,20
 2012f94:	00c00434 	movhi	r3,16
 2012f98:	18ffffc4 	addi	r3,r3,-1
 2012f9c:	28c6703a 	and	r3,r5,r3
 2012fa0:	8005883a 	mov	r2,r16
 2012fa4:	1906b03a 	or	r3,r3,r4
 2012fa8:	dfc00117 	ldw	ra,4(sp)
 2012fac:	dc000017 	ldw	r16,0(sp)
 2012fb0:	dec00204 	addi	sp,sp,8
 2012fb4:	f800283a 	ret
 2012fb8:	00c002c4 	movi	r3,11
 2012fbc:	188bc83a 	sub	r5,r3,r2
 2012fc0:	814ad83a 	srl	r5,r16,r5
 2012fc4:	00c00434 	movhi	r3,16
 2012fc8:	18ffffc4 	addi	r3,r3,-1
 2012fcc:	81a0983a 	sll	r16,r16,r6
 2012fd0:	2101ffcc 	andi	r4,r4,2047
 2012fd4:	28ca703a 	and	r5,r5,r3
 2012fd8:	003fed06 	br	2012f90 <__floatunsidf+0x50>
 2012fdc:	0009883a 	mov	r4,zero
 2012fe0:	000b883a 	mov	r5,zero
 2012fe4:	003fea06 	br	2012f90 <__floatunsidf+0x50>

02012fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012fe8:	defffe04 	addi	sp,sp,-8
 2012fec:	dfc00115 	stw	ra,4(sp)
 2012ff0:	df000015 	stw	fp,0(sp)
 2012ff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012ff8:	d0a00b17 	ldw	r2,-32724(gp)
 2012ffc:	10000326 	beq	r2,zero,201300c <alt_get_errno+0x24>
 2013000:	d0a00b17 	ldw	r2,-32724(gp)
 2013004:	103ee83a 	callr	r2
 2013008:	00000106 	br	2013010 <alt_get_errno+0x28>
 201300c:	d0a72904 	addi	r2,gp,-25436
}
 2013010:	e037883a 	mov	sp,fp
 2013014:	dfc00117 	ldw	ra,4(sp)
 2013018:	df000017 	ldw	fp,0(sp)
 201301c:	dec00204 	addi	sp,sp,8
 2013020:	f800283a 	ret

02013024 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2013024:	defffb04 	addi	sp,sp,-20
 2013028:	dfc00415 	stw	ra,16(sp)
 201302c:	df000315 	stw	fp,12(sp)
 2013030:	df000304 	addi	fp,sp,12
 2013034:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2013038:	e0bfff17 	ldw	r2,-4(fp)
 201303c:	10000616 	blt	r2,zero,2013058 <close+0x34>
 2013040:	e0bfff17 	ldw	r2,-4(fp)
 2013044:	10c00324 	muli	r3,r2,12
 2013048:	008080b4 	movhi	r2,514
 201304c:	10bd2504 	addi	r2,r2,-2924
 2013050:	1885883a 	add	r2,r3,r2
 2013054:	00000106 	br	201305c <close+0x38>
 2013058:	0005883a 	mov	r2,zero
 201305c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2013060:	e0bffd17 	ldw	r2,-12(fp)
 2013064:	10001926 	beq	r2,zero,20130cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2013068:	e0bffd17 	ldw	r2,-12(fp)
 201306c:	10800017 	ldw	r2,0(r2)
 2013070:	10800417 	ldw	r2,16(r2)
 2013074:	10000626 	beq	r2,zero,2013090 <close+0x6c>
 2013078:	e0bffd17 	ldw	r2,-12(fp)
 201307c:	10800017 	ldw	r2,0(r2)
 2013080:	10800417 	ldw	r2,16(r2)
 2013084:	e13ffd17 	ldw	r4,-12(fp)
 2013088:	103ee83a 	callr	r2
 201308c:	00000106 	br	2013094 <close+0x70>
 2013090:	0005883a 	mov	r2,zero
 2013094:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2013098:	e13fff17 	ldw	r4,-4(fp)
 201309c:	20136dc0 	call	20136dc <alt_release_fd>
    if (rval < 0)
 20130a0:	e0bffe17 	ldw	r2,-8(fp)
 20130a4:	1000070e 	bge	r2,zero,20130c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20130a8:	2012fe80 	call	2012fe8 <alt_get_errno>
 20130ac:	1007883a 	mov	r3,r2
 20130b0:	e0bffe17 	ldw	r2,-8(fp)
 20130b4:	0085c83a 	sub	r2,zero,r2
 20130b8:	18800015 	stw	r2,0(r3)
      return -1;
 20130bc:	00bfffc4 	movi	r2,-1
 20130c0:	00000706 	br	20130e0 <close+0xbc>
    }
    return 0;
 20130c4:	0005883a 	mov	r2,zero
 20130c8:	00000506 	br	20130e0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20130cc:	2012fe80 	call	2012fe8 <alt_get_errno>
 20130d0:	1007883a 	mov	r3,r2
 20130d4:	00801444 	movi	r2,81
 20130d8:	18800015 	stw	r2,0(r3)
    return -1;
 20130dc:	00bfffc4 	movi	r2,-1
  }
}
 20130e0:	e037883a 	mov	sp,fp
 20130e4:	dfc00117 	ldw	ra,4(sp)
 20130e8:	df000017 	ldw	fp,0(sp)
 20130ec:	dec00204 	addi	sp,sp,8
 20130f0:	f800283a 	ret

020130f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 20130f4:	defffc04 	addi	sp,sp,-16
 20130f8:	df000315 	stw	fp,12(sp)
 20130fc:	df000304 	addi	fp,sp,12
 2013100:	e13ffd15 	stw	r4,-12(fp)
 2013104:	e17ffe15 	stw	r5,-8(fp)
 2013108:	e1bfff15 	stw	r6,-4(fp)
  return len;
 201310c:	e0bfff17 	ldw	r2,-4(fp)
}
 2013110:	e037883a 	mov	sp,fp
 2013114:	df000017 	ldw	fp,0(sp)
 2013118:	dec00104 	addi	sp,sp,4
 201311c:	f800283a 	ret

02013120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013120:	defffe04 	addi	sp,sp,-8
 2013124:	dfc00115 	stw	ra,4(sp)
 2013128:	df000015 	stw	fp,0(sp)
 201312c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013130:	d0a00b17 	ldw	r2,-32724(gp)
 2013134:	10000326 	beq	r2,zero,2013144 <alt_get_errno+0x24>
 2013138:	d0a00b17 	ldw	r2,-32724(gp)
 201313c:	103ee83a 	callr	r2
 2013140:	00000106 	br	2013148 <alt_get_errno+0x28>
 2013144:	d0a72904 	addi	r2,gp,-25436
}
 2013148:	e037883a 	mov	sp,fp
 201314c:	dfc00117 	ldw	ra,4(sp)
 2013150:	df000017 	ldw	fp,0(sp)
 2013154:	dec00204 	addi	sp,sp,8
 2013158:	f800283a 	ret

0201315c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 201315c:	defffb04 	addi	sp,sp,-20
 2013160:	dfc00415 	stw	ra,16(sp)
 2013164:	df000315 	stw	fp,12(sp)
 2013168:	df000304 	addi	fp,sp,12
 201316c:	e13ffe15 	stw	r4,-8(fp)
 2013170:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013174:	e0bffe17 	ldw	r2,-8(fp)
 2013178:	10000616 	blt	r2,zero,2013194 <fstat+0x38>
 201317c:	e0bffe17 	ldw	r2,-8(fp)
 2013180:	10c00324 	muli	r3,r2,12
 2013184:	008080b4 	movhi	r2,514
 2013188:	10bd2504 	addi	r2,r2,-2924
 201318c:	1885883a 	add	r2,r3,r2
 2013190:	00000106 	br	2013198 <fstat+0x3c>
 2013194:	0005883a 	mov	r2,zero
 2013198:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 201319c:	e0bffd17 	ldw	r2,-12(fp)
 20131a0:	10001026 	beq	r2,zero,20131e4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20131a4:	e0bffd17 	ldw	r2,-12(fp)
 20131a8:	10800017 	ldw	r2,0(r2)
 20131ac:	10800817 	ldw	r2,32(r2)
 20131b0:	10000726 	beq	r2,zero,20131d0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20131b4:	e0bffd17 	ldw	r2,-12(fp)
 20131b8:	10800017 	ldw	r2,0(r2)
 20131bc:	10800817 	ldw	r2,32(r2)
 20131c0:	e17fff17 	ldw	r5,-4(fp)
 20131c4:	e13ffd17 	ldw	r4,-12(fp)
 20131c8:	103ee83a 	callr	r2
 20131cc:	00000a06 	br	20131f8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20131d0:	e0bfff17 	ldw	r2,-4(fp)
 20131d4:	00c80004 	movi	r3,8192
 20131d8:	10c00115 	stw	r3,4(r2)
      return 0;
 20131dc:	0005883a 	mov	r2,zero
 20131e0:	00000506 	br	20131f8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20131e4:	20131200 	call	2013120 <alt_get_errno>
 20131e8:	1007883a 	mov	r3,r2
 20131ec:	00801444 	movi	r2,81
 20131f0:	18800015 	stw	r2,0(r3)
    return -1;
 20131f4:	00bfffc4 	movi	r2,-1
  }
}
 20131f8:	e037883a 	mov	sp,fp
 20131fc:	dfc00117 	ldw	ra,4(sp)
 2013200:	df000017 	ldw	fp,0(sp)
 2013204:	dec00204 	addi	sp,sp,8
 2013208:	f800283a 	ret

0201320c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201320c:	defffe04 	addi	sp,sp,-8
 2013210:	dfc00115 	stw	ra,4(sp)
 2013214:	df000015 	stw	fp,0(sp)
 2013218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201321c:	d0a00b17 	ldw	r2,-32724(gp)
 2013220:	10000326 	beq	r2,zero,2013230 <alt_get_errno+0x24>
 2013224:	d0a00b17 	ldw	r2,-32724(gp)
 2013228:	103ee83a 	callr	r2
 201322c:	00000106 	br	2013234 <alt_get_errno+0x28>
 2013230:	d0a72904 	addi	r2,gp,-25436
}
 2013234:	e037883a 	mov	sp,fp
 2013238:	dfc00117 	ldw	ra,4(sp)
 201323c:	df000017 	ldw	fp,0(sp)
 2013240:	dec00204 	addi	sp,sp,8
 2013244:	f800283a 	ret

02013248 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2013248:	deffed04 	addi	sp,sp,-76
 201324c:	dfc01215 	stw	ra,72(sp)
 2013250:	df001115 	stw	fp,68(sp)
 2013254:	df001104 	addi	fp,sp,68
 2013258:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201325c:	e0bfff17 	ldw	r2,-4(fp)
 2013260:	10000616 	blt	r2,zero,201327c <isatty+0x34>
 2013264:	e0bfff17 	ldw	r2,-4(fp)
 2013268:	10c00324 	muli	r3,r2,12
 201326c:	008080b4 	movhi	r2,514
 2013270:	10bd2504 	addi	r2,r2,-2924
 2013274:	1885883a 	add	r2,r3,r2
 2013278:	00000106 	br	2013280 <isatty+0x38>
 201327c:	0005883a 	mov	r2,zero
 2013280:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2013284:	e0bfef17 	ldw	r2,-68(fp)
 2013288:	10000e26 	beq	r2,zero,20132c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 201328c:	e0bfef17 	ldw	r2,-68(fp)
 2013290:	10800017 	ldw	r2,0(r2)
 2013294:	10800817 	ldw	r2,32(r2)
 2013298:	1000021e 	bne	r2,zero,20132a4 <isatty+0x5c>
    {
      return 1;
 201329c:	00800044 	movi	r2,1
 20132a0:	00000d06 	br	20132d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20132a4:	e0bff004 	addi	r2,fp,-64
 20132a8:	100b883a 	mov	r5,r2
 20132ac:	e13fff17 	ldw	r4,-4(fp)
 20132b0:	201315c0 	call	201315c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20132b4:	e0bff117 	ldw	r2,-60(fp)
 20132b8:	10880020 	cmpeqi	r2,r2,8192
 20132bc:	10803fcc 	andi	r2,r2,255
 20132c0:	00000506 	br	20132d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20132c4:	201320c0 	call	201320c <alt_get_errno>
 20132c8:	1007883a 	mov	r3,r2
 20132cc:	00801444 	movi	r2,81
 20132d0:	18800015 	stw	r2,0(r3)
    return 0;
 20132d4:	0005883a 	mov	r2,zero
  }
}
 20132d8:	e037883a 	mov	sp,fp
 20132dc:	dfc00117 	ldw	ra,4(sp)
 20132e0:	df000017 	ldw	fp,0(sp)
 20132e4:	dec00204 	addi	sp,sp,8
 20132e8:	f800283a 	ret

020132ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20132ec:	defffc04 	addi	sp,sp,-16
 20132f0:	df000315 	stw	fp,12(sp)
 20132f4:	df000304 	addi	fp,sp,12
 20132f8:	e13ffd15 	stw	r4,-12(fp)
 20132fc:	e17ffe15 	stw	r5,-8(fp)
 2013300:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2013304:	e0fffe17 	ldw	r3,-8(fp)
 2013308:	e0bffd17 	ldw	r2,-12(fp)
 201330c:	18800c26 	beq	r3,r2,2013340 <alt_load_section+0x54>
  {
    while( to != end )
 2013310:	00000806 	br	2013334 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2013314:	e0bffe17 	ldw	r2,-8(fp)
 2013318:	10c00104 	addi	r3,r2,4
 201331c:	e0fffe15 	stw	r3,-8(fp)
 2013320:	e0fffd17 	ldw	r3,-12(fp)
 2013324:	19000104 	addi	r4,r3,4
 2013328:	e13ffd15 	stw	r4,-12(fp)
 201332c:	18c00017 	ldw	r3,0(r3)
 2013330:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2013334:	e0fffe17 	ldw	r3,-8(fp)
 2013338:	e0bfff17 	ldw	r2,-4(fp)
 201333c:	18bff51e 	bne	r3,r2,2013314 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2013340:	0001883a 	nop
 2013344:	e037883a 	mov	sp,fp
 2013348:	df000017 	ldw	fp,0(sp)
 201334c:	dec00104 	addi	sp,sp,4
 2013350:	f800283a 	ret

02013354 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2013354:	defffe04 	addi	sp,sp,-8
 2013358:	dfc00115 	stw	ra,4(sp)
 201335c:	df000015 	stw	fp,0(sp)
 2013360:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2013364:	018080b4 	movhi	r6,514
 2013368:	3181cf04 	addi	r6,r6,1852
 201336c:	014080b4 	movhi	r5,514
 2013370:	297ae604 	addi	r5,r5,-5224
 2013374:	010080b4 	movhi	r4,514
 2013378:	2101cf04 	addi	r4,r4,1852
 201337c:	20132ec0 	call	20132ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2013380:	01808034 	movhi	r6,512
 2013384:	31809104 	addi	r6,r6,580
 2013388:	01408034 	movhi	r5,512
 201338c:	29400804 	addi	r5,r5,32
 2013390:	01008034 	movhi	r4,512
 2013394:	21000804 	addi	r4,r4,32
 2013398:	20132ec0 	call	20132ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 201339c:	018080b4 	movhi	r6,514
 20133a0:	31bae604 	addi	r6,r6,-5224
 20133a4:	014080b4 	movhi	r5,514
 20133a8:	29794c04 	addi	r5,r5,-6864
 20133ac:	010080b4 	movhi	r4,514
 20133b0:	21394c04 	addi	r4,r4,-6864
 20133b4:	20132ec0 	call	20132ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20133b8:	201ced80 	call	201ced8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20133bc:	201d0c00 	call	201d0c0 <alt_icache_flush_all>
}
 20133c0:	0001883a 	nop
 20133c4:	e037883a 	mov	sp,fp
 20133c8:	dfc00117 	ldw	ra,4(sp)
 20133cc:	df000017 	ldw	fp,0(sp)
 20133d0:	dec00204 	addi	sp,sp,8
 20133d4:	f800283a 	ret

020133d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20133d8:	defffe04 	addi	sp,sp,-8
 20133dc:	dfc00115 	stw	ra,4(sp)
 20133e0:	df000015 	stw	fp,0(sp)
 20133e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20133e8:	d0a00b17 	ldw	r2,-32724(gp)
 20133ec:	10000326 	beq	r2,zero,20133fc <alt_get_errno+0x24>
 20133f0:	d0a00b17 	ldw	r2,-32724(gp)
 20133f4:	103ee83a 	callr	r2
 20133f8:	00000106 	br	2013400 <alt_get_errno+0x28>
 20133fc:	d0a72904 	addi	r2,gp,-25436
}
 2013400:	e037883a 	mov	sp,fp
 2013404:	dfc00117 	ldw	ra,4(sp)
 2013408:	df000017 	ldw	fp,0(sp)
 201340c:	dec00204 	addi	sp,sp,8
 2013410:	f800283a 	ret

02013414 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2013414:	defff904 	addi	sp,sp,-28
 2013418:	dfc00615 	stw	ra,24(sp)
 201341c:	df000515 	stw	fp,20(sp)
 2013420:	df000504 	addi	fp,sp,20
 2013424:	e13ffd15 	stw	r4,-12(fp)
 2013428:	e17ffe15 	stw	r5,-8(fp)
 201342c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2013430:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013434:	e0bffd17 	ldw	r2,-12(fp)
 2013438:	10000616 	blt	r2,zero,2013454 <lseek+0x40>
 201343c:	e0bffd17 	ldw	r2,-12(fp)
 2013440:	10c00324 	muli	r3,r2,12
 2013444:	008080b4 	movhi	r2,514
 2013448:	10bd2504 	addi	r2,r2,-2924
 201344c:	1885883a 	add	r2,r3,r2
 2013450:	00000106 	br	2013458 <lseek+0x44>
 2013454:	0005883a 	mov	r2,zero
 2013458:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 201345c:	e0bffc17 	ldw	r2,-16(fp)
 2013460:	10001026 	beq	r2,zero,20134a4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2013464:	e0bffc17 	ldw	r2,-16(fp)
 2013468:	10800017 	ldw	r2,0(r2)
 201346c:	10800717 	ldw	r2,28(r2)
 2013470:	10000926 	beq	r2,zero,2013498 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2013474:	e0bffc17 	ldw	r2,-16(fp)
 2013478:	10800017 	ldw	r2,0(r2)
 201347c:	10800717 	ldw	r2,28(r2)
 2013480:	e1bfff17 	ldw	r6,-4(fp)
 2013484:	e17ffe17 	ldw	r5,-8(fp)
 2013488:	e13ffc17 	ldw	r4,-16(fp)
 201348c:	103ee83a 	callr	r2
 2013490:	e0bffb15 	stw	r2,-20(fp)
 2013494:	00000506 	br	20134ac <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2013498:	00bfde84 	movi	r2,-134
 201349c:	e0bffb15 	stw	r2,-20(fp)
 20134a0:	00000206 	br	20134ac <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 20134a4:	00bfebc4 	movi	r2,-81
 20134a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20134ac:	e0bffb17 	ldw	r2,-20(fp)
 20134b0:	1000070e 	bge	r2,zero,20134d0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 20134b4:	20133d80 	call	20133d8 <alt_get_errno>
 20134b8:	1007883a 	mov	r3,r2
 20134bc:	e0bffb17 	ldw	r2,-20(fp)
 20134c0:	0085c83a 	sub	r2,zero,r2
 20134c4:	18800015 	stw	r2,0(r3)
    rc = -1;
 20134c8:	00bfffc4 	movi	r2,-1
 20134cc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20134d0:	e0bffb17 	ldw	r2,-20(fp)
}
 20134d4:	e037883a 	mov	sp,fp
 20134d8:	dfc00117 	ldw	ra,4(sp)
 20134dc:	df000017 	ldw	fp,0(sp)
 20134e0:	dec00204 	addi	sp,sp,8
 20134e4:	f800283a 	ret

020134e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20134e8:	defff904 	addi	sp,sp,-28
 20134ec:	dfc00615 	stw	ra,24(sp)
 20134f0:	df000515 	stw	fp,20(sp)
 20134f4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20134f8:	0009883a 	mov	r4,zero
 20134fc:	201bef40 	call	201bef4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2013500:	20144a40 	call	20144a4 <OSInit>
 2013504:	01000044 	movi	r4,1
 2013508:	20198bc0 	call	20198bc <OSSemCreate>
 201350c:	d0a72f15 	stw	r2,-25412(gp)
 2013510:	01000044 	movi	r4,1
 2013514:	20198bc0 	call	20198bc <OSSemCreate>
 2013518:	d0a73115 	stw	r2,-25404(gp)
 201351c:	d0a72a04 	addi	r2,gp,-25432
 2013520:	e0bffc15 	stw	r2,-16(fp)
 2013524:	00800044 	movi	r2,1
 2013528:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 201352c:	e0bffd0b 	ldhu	r2,-12(fp)
 2013530:	1009883a 	mov	r4,r2
 2013534:	20198bc0 	call	20198bc <OSSemCreate>
 2013538:	1007883a 	mov	r3,r2
 201353c:	e0bffc17 	ldw	r2,-16(fp)
 2013540:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2013544:	201bf2c0 	call	201bf2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2013548:	018080b4 	movhi	r6,514
 201354c:	31ba9504 	addi	r6,r6,-5548
 2013550:	014080b4 	movhi	r5,514
 2013554:	297a9504 	addi	r5,r5,-5548
 2013558:	010080b4 	movhi	r4,514
 201355c:	213a9504 	addi	r4,r4,-5548
 2013560:	201d4580 	call	201d458 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2013564:	201d0000 	call	201d000 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2013568:	010080b4 	movhi	r4,514
 201356c:	21341804 	addi	r4,r4,-12192
 2013570:	201dfe80 	call	201dfe8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2013574:	d0a72b17 	ldw	r2,-25428(gp)
 2013578:	d0e72c17 	ldw	r3,-25424(gp)
 201357c:	d1272d17 	ldw	r4,-25420(gp)
 2013580:	200d883a 	mov	r6,r4
 2013584:	180b883a 	mov	r5,r3
 2013588:	1009883a 	mov	r4,r2
 201358c:	20025600 	call	2002560 <main>
 2013590:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2013594:	01000044 	movi	r4,1
 2013598:	20130240 	call	2013024 <close>
  exit (result);
 201359c:	e13ffb17 	ldw	r4,-20(fp)
 20135a0:	201e0240 	call	201e024 <exit>

020135a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20135a4:	defffe04 	addi	sp,sp,-8
 20135a8:	dfc00115 	stw	ra,4(sp)
 20135ac:	df000015 	stw	fp,0(sp)
 20135b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20135b4:	d0a00b17 	ldw	r2,-32724(gp)
 20135b8:	10000326 	beq	r2,zero,20135c8 <alt_get_errno+0x24>
 20135bc:	d0a00b17 	ldw	r2,-32724(gp)
 20135c0:	103ee83a 	callr	r2
 20135c4:	00000106 	br	20135cc <alt_get_errno+0x28>
 20135c8:	d0a72904 	addi	r2,gp,-25436
}
 20135cc:	e037883a 	mov	sp,fp
 20135d0:	dfc00117 	ldw	ra,4(sp)
 20135d4:	df000017 	ldw	fp,0(sp)
 20135d8:	dec00204 	addi	sp,sp,8
 20135dc:	f800283a 	ret

020135e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20135e0:	defff904 	addi	sp,sp,-28
 20135e4:	dfc00615 	stw	ra,24(sp)
 20135e8:	df000515 	stw	fp,20(sp)
 20135ec:	df000504 	addi	fp,sp,20
 20135f0:	e13ffd15 	stw	r4,-12(fp)
 20135f4:	e17ffe15 	stw	r5,-8(fp)
 20135f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20135fc:	e0bffd17 	ldw	r2,-12(fp)
 2013600:	10000616 	blt	r2,zero,201361c <read+0x3c>
 2013604:	e0bffd17 	ldw	r2,-12(fp)
 2013608:	10c00324 	muli	r3,r2,12
 201360c:	008080b4 	movhi	r2,514
 2013610:	10bd2504 	addi	r2,r2,-2924
 2013614:	1885883a 	add	r2,r3,r2
 2013618:	00000106 	br	2013620 <read+0x40>
 201361c:	0005883a 	mov	r2,zero
 2013620:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2013624:	e0bffb17 	ldw	r2,-20(fp)
 2013628:	10002226 	beq	r2,zero,20136b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201362c:	e0bffb17 	ldw	r2,-20(fp)
 2013630:	10800217 	ldw	r2,8(r2)
 2013634:	108000cc 	andi	r2,r2,3
 2013638:	10800060 	cmpeqi	r2,r2,1
 201363c:	1000181e 	bne	r2,zero,20136a0 <read+0xc0>
        (fd->dev->read))
 2013640:	e0bffb17 	ldw	r2,-20(fp)
 2013644:	10800017 	ldw	r2,0(r2)
 2013648:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201364c:	10001426 	beq	r2,zero,20136a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2013650:	e0bffb17 	ldw	r2,-20(fp)
 2013654:	10800017 	ldw	r2,0(r2)
 2013658:	10800517 	ldw	r2,20(r2)
 201365c:	e0ffff17 	ldw	r3,-4(fp)
 2013660:	180d883a 	mov	r6,r3
 2013664:	e17ffe17 	ldw	r5,-8(fp)
 2013668:	e13ffb17 	ldw	r4,-20(fp)
 201366c:	103ee83a 	callr	r2
 2013670:	e0bffc15 	stw	r2,-16(fp)
 2013674:	e0bffc17 	ldw	r2,-16(fp)
 2013678:	1000070e 	bge	r2,zero,2013698 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 201367c:	20135a40 	call	20135a4 <alt_get_errno>
 2013680:	1007883a 	mov	r3,r2
 2013684:	e0bffc17 	ldw	r2,-16(fp)
 2013688:	0085c83a 	sub	r2,zero,r2
 201368c:	18800015 	stw	r2,0(r3)
          return -1;
 2013690:	00bfffc4 	movi	r2,-1
 2013694:	00000c06 	br	20136c8 <read+0xe8>
        }
        return rval;
 2013698:	e0bffc17 	ldw	r2,-16(fp)
 201369c:	00000a06 	br	20136c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20136a0:	20135a40 	call	20135a4 <alt_get_errno>
 20136a4:	1007883a 	mov	r3,r2
 20136a8:	00800344 	movi	r2,13
 20136ac:	18800015 	stw	r2,0(r3)
 20136b0:	00000406 	br	20136c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20136b4:	20135a40 	call	20135a4 <alt_get_errno>
 20136b8:	1007883a 	mov	r3,r2
 20136bc:	00801444 	movi	r2,81
 20136c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20136c4:	00bfffc4 	movi	r2,-1
}
 20136c8:	e037883a 	mov	sp,fp
 20136cc:	dfc00117 	ldw	ra,4(sp)
 20136d0:	df000017 	ldw	fp,0(sp)
 20136d4:	dec00204 	addi	sp,sp,8
 20136d8:	f800283a 	ret

020136dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20136dc:	defffe04 	addi	sp,sp,-8
 20136e0:	df000115 	stw	fp,4(sp)
 20136e4:	df000104 	addi	fp,sp,4
 20136e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20136ec:	e0bfff17 	ldw	r2,-4(fp)
 20136f0:	108000d0 	cmplti	r2,r2,3
 20136f4:	10000d1e 	bne	r2,zero,201372c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20136f8:	008080b4 	movhi	r2,514
 20136fc:	10bd2504 	addi	r2,r2,-2924
 2013700:	e0ffff17 	ldw	r3,-4(fp)
 2013704:	18c00324 	muli	r3,r3,12
 2013708:	10c5883a 	add	r2,r2,r3
 201370c:	10800204 	addi	r2,r2,8
 2013710:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2013714:	008080b4 	movhi	r2,514
 2013718:	10bd2504 	addi	r2,r2,-2924
 201371c:	e0ffff17 	ldw	r3,-4(fp)
 2013720:	18c00324 	muli	r3,r3,12
 2013724:	10c5883a 	add	r2,r2,r3
 2013728:	10000015 	stw	zero,0(r2)
  }
}
 201372c:	0001883a 	nop
 2013730:	e037883a 	mov	sp,fp
 2013734:	df000017 	ldw	fp,0(sp)
 2013738:	dec00104 	addi	sp,sp,4
 201373c:	f800283a 	ret

02013740 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2013740:	defff904 	addi	sp,sp,-28
 2013744:	df000615 	stw	fp,24(sp)
 2013748:	df000604 	addi	fp,sp,24
 201374c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013750:	0005303a 	rdctl	r2,status
 2013754:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013758:	e0fffe17 	ldw	r3,-8(fp)
 201375c:	00bfff84 	movi	r2,-2
 2013760:	1884703a 	and	r2,r3,r2
 2013764:	1001703a 	wrctl	status,r2
  
  return context;
 2013768:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 201376c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2013770:	d0a00c17 	ldw	r2,-32720(gp)
 2013774:	10c000c4 	addi	r3,r2,3
 2013778:	00bfff04 	movi	r2,-4
 201377c:	1884703a 	and	r2,r3,r2
 2013780:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2013784:	d0e00c17 	ldw	r3,-32720(gp)
 2013788:	e0bfff17 	ldw	r2,-4(fp)
 201378c:	1887883a 	add	r3,r3,r2
 2013790:	00810034 	movhi	r2,1024
 2013794:	10800004 	addi	r2,r2,0
 2013798:	10c0062e 	bgeu	r2,r3,20137b4 <sbrk+0x74>
 201379c:	e0bffb17 	ldw	r2,-20(fp)
 20137a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20137a4:	e0bffa17 	ldw	r2,-24(fp)
 20137a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20137ac:	00bfffc4 	movi	r2,-1
 20137b0:	00000b06 	br	20137e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20137b4:	d0a00c17 	ldw	r2,-32720(gp)
 20137b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 20137bc:	d0e00c17 	ldw	r3,-32720(gp)
 20137c0:	e0bfff17 	ldw	r2,-4(fp)
 20137c4:	1885883a 	add	r2,r3,r2
 20137c8:	d0a00c15 	stw	r2,-32720(gp)
 20137cc:	e0bffb17 	ldw	r2,-20(fp)
 20137d0:	e0bffc15 	stw	r2,-16(fp)
 20137d4:	e0bffc17 	ldw	r2,-16(fp)
 20137d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20137dc:	e0bffd17 	ldw	r2,-12(fp)
} 
 20137e0:	e037883a 	mov	sp,fp
 20137e4:	df000017 	ldw	fp,0(sp)
 20137e8:	dec00104 	addi	sp,sp,4
 20137ec:	f800283a 	ret

020137f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20137f0:	defffe04 	addi	sp,sp,-8
 20137f4:	dfc00115 	stw	ra,4(sp)
 20137f8:	df000015 	stw	fp,0(sp)
 20137fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013800:	d0a00b17 	ldw	r2,-32724(gp)
 2013804:	10000326 	beq	r2,zero,2013814 <alt_get_errno+0x24>
 2013808:	d0a00b17 	ldw	r2,-32724(gp)
 201380c:	103ee83a 	callr	r2
 2013810:	00000106 	br	2013818 <alt_get_errno+0x28>
 2013814:	d0a72904 	addi	r2,gp,-25436
}
 2013818:	e037883a 	mov	sp,fp
 201381c:	dfc00117 	ldw	ra,4(sp)
 2013820:	df000017 	ldw	fp,0(sp)
 2013824:	dec00204 	addi	sp,sp,8
 2013828:	f800283a 	ret

0201382c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 201382c:	defff904 	addi	sp,sp,-28
 2013830:	dfc00615 	stw	ra,24(sp)
 2013834:	df000515 	stw	fp,20(sp)
 2013838:	df000504 	addi	fp,sp,20
 201383c:	e13ffd15 	stw	r4,-12(fp)
 2013840:	e17ffe15 	stw	r5,-8(fp)
 2013844:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013848:	e0bffd17 	ldw	r2,-12(fp)
 201384c:	10000616 	blt	r2,zero,2013868 <write+0x3c>
 2013850:	e0bffd17 	ldw	r2,-12(fp)
 2013854:	10c00324 	muli	r3,r2,12
 2013858:	008080b4 	movhi	r2,514
 201385c:	10bd2504 	addi	r2,r2,-2924
 2013860:	1885883a 	add	r2,r3,r2
 2013864:	00000106 	br	201386c <write+0x40>
 2013868:	0005883a 	mov	r2,zero
 201386c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2013870:	e0bffb17 	ldw	r2,-20(fp)
 2013874:	10002126 	beq	r2,zero,20138fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2013878:	e0bffb17 	ldw	r2,-20(fp)
 201387c:	10800217 	ldw	r2,8(r2)
 2013880:	108000cc 	andi	r2,r2,3
 2013884:	10001826 	beq	r2,zero,20138e8 <write+0xbc>
 2013888:	e0bffb17 	ldw	r2,-20(fp)
 201388c:	10800017 	ldw	r2,0(r2)
 2013890:	10800617 	ldw	r2,24(r2)
 2013894:	10001426 	beq	r2,zero,20138e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2013898:	e0bffb17 	ldw	r2,-20(fp)
 201389c:	10800017 	ldw	r2,0(r2)
 20138a0:	10800617 	ldw	r2,24(r2)
 20138a4:	e0ffff17 	ldw	r3,-4(fp)
 20138a8:	180d883a 	mov	r6,r3
 20138ac:	e17ffe17 	ldw	r5,-8(fp)
 20138b0:	e13ffb17 	ldw	r4,-20(fp)
 20138b4:	103ee83a 	callr	r2
 20138b8:	e0bffc15 	stw	r2,-16(fp)
 20138bc:	e0bffc17 	ldw	r2,-16(fp)
 20138c0:	1000070e 	bge	r2,zero,20138e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 20138c4:	20137f00 	call	20137f0 <alt_get_errno>
 20138c8:	1007883a 	mov	r3,r2
 20138cc:	e0bffc17 	ldw	r2,-16(fp)
 20138d0:	0085c83a 	sub	r2,zero,r2
 20138d4:	18800015 	stw	r2,0(r3)
        return -1;
 20138d8:	00bfffc4 	movi	r2,-1
 20138dc:	00000c06 	br	2013910 <write+0xe4>
      }
      return rval;
 20138e0:	e0bffc17 	ldw	r2,-16(fp)
 20138e4:	00000a06 	br	2013910 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20138e8:	20137f00 	call	20137f0 <alt_get_errno>
 20138ec:	1007883a 	mov	r3,r2
 20138f0:	00800344 	movi	r2,13
 20138f4:	18800015 	stw	r2,0(r3)
 20138f8:	00000406 	br	201390c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20138fc:	20137f00 	call	20137f0 <alt_get_errno>
 2013900:	1007883a 	mov	r3,r2
 2013904:	00801444 	movi	r2,81
 2013908:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201390c:	00bfffc4 	movi	r2,-1
}
 2013910:	e037883a 	mov	sp,fp
 2013914:	dfc00117 	ldw	ra,4(sp)
 2013918:	df000017 	ldw	fp,0(sp)
 201391c:	dec00204 	addi	sp,sp,8
 2013920:	f800283a 	ret

02013924 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2013924:	deffdf04 	addi	sp,sp,-132
 2013928:	dfc02015 	stw	ra,128(sp)
 201392c:	df001f15 	stw	fp,124(sp)
 2013930:	df001f04 	addi	fp,sp,124
 2013934:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013938:	e0bfe204 	addi	r2,fp,-120
 201393c:	100b883a 	mov	r5,r2
 2013940:	01003fc4 	movi	r4,255
 2013944:	201b8440 	call	201b844 <OSTaskQuery>
 2013948:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 201394c:	e0bffe83 	ldbu	r2,-6(fp)
 2013950:	10803fcc 	andi	r2,r2,255
 2013954:	10001e1e 	bne	r2,zero,20139d0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2013958:	e0bfee83 	ldbu	r2,-70(fp)
 201395c:	10803fcc 	andi	r2,r2,255
 2013960:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2013964:	d0a72f17 	ldw	r2,-25412(gp)
 2013968:	e0fffd04 	addi	r3,fp,-12
 201396c:	180b883a 	mov	r5,r3
 2013970:	1009883a 	mov	r4,r2
 2013974:	201a05c0 	call	201a05c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2013978:	e0bffe43 	ldbu	r2,-7(fp)
 201397c:	10803fcc 	andi	r2,r2,255
 2013980:	10000726 	beq	r2,zero,20139a0 <__env_lock+0x7c>
 2013984:	d0a00d17 	ldw	r2,-32716(gp)
 2013988:	e0ffe117 	ldw	r3,-124(fp)
 201398c:	1880041e 	bne	r3,r2,20139a0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2013990:	d0a72e17 	ldw	r2,-25416(gp)
 2013994:	10800044 	addi	r2,r2,1
 2013998:	d0a72e15 	stw	r2,-25416(gp)
 201399c:	00000a06 	br	20139c8 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 20139a0:	d0a72f17 	ldw	r2,-25412(gp)
 20139a4:	e0fffe84 	addi	r3,fp,-6
 20139a8:	180d883a 	mov	r6,r3
 20139ac:	000b883a 	mov	r5,zero
 20139b0:	1009883a 	mov	r4,r2
 20139b4:	2019bd40 	call	2019bd4 <OSSemPend>
    locks  = 1;
 20139b8:	00800044 	movi	r2,1
 20139bc:	d0a72e15 	stw	r2,-25416(gp)
    lockid = id;
 20139c0:	e0bfe117 	ldw	r2,-124(fp)
 20139c4:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 20139c8:	0001883a 	nop
 20139cc:	00000106 	br	20139d4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 20139d0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 20139d4:	e037883a 	mov	sp,fp
 20139d8:	dfc00117 	ldw	ra,4(sp)
 20139dc:	df000017 	ldw	fp,0(sp)
 20139e0:	dec00204 	addi	sp,sp,8
 20139e4:	f800283a 	ret

020139e8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 20139e8:	defffd04 	addi	sp,sp,-12
 20139ec:	dfc00215 	stw	ra,8(sp)
 20139f0:	df000115 	stw	fp,4(sp)
 20139f4:	df000104 	addi	fp,sp,4
 20139f8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 20139fc:	d0a72e17 	ldw	r2,-25416(gp)
 2013a00:	10000b26 	beq	r2,zero,2013a30 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2013a04:	d0a72e17 	ldw	r2,-25416(gp)
 2013a08:	10bfffc4 	addi	r2,r2,-1
 2013a0c:	d0a72e15 	stw	r2,-25416(gp)
 2013a10:	d0a72e17 	ldw	r2,-25416(gp)
 2013a14:	1000071e 	bne	r2,zero,2013a34 <__env_unlock+0x4c>
  {
    lockid = -1;
 2013a18:	00bfffc4 	movi	r2,-1
 2013a1c:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 2013a20:	d0a72f17 	ldw	r2,-25412(gp)
 2013a24:	1009883a 	mov	r4,r2
 2013a28:	2019f4c0 	call	2019f4c <OSSemPost>
 2013a2c:	00000106 	br	2013a34 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2013a30:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013a34:	e037883a 	mov	sp,fp
 2013a38:	dfc00117 	ldw	ra,4(sp)
 2013a3c:	df000017 	ldw	fp,0(sp)
 2013a40:	dec00204 	addi	sp,sp,8
 2013a44:	f800283a 	ret

02013a48 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2013a48:	deffdb04 	addi	sp,sp,-148
 2013a4c:	dfc02415 	stw	ra,144(sp)
 2013a50:	df002315 	stw	fp,140(sp)
 2013a54:	df002304 	addi	fp,sp,140
 2013a58:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013a5c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2013a60:	d0a73243 	ldbu	r2,-25399(gp)
 2013a64:	10803fcc 	andi	r2,r2,255
 2013a68:	10800060 	cmpeqi	r2,r2,1
 2013a6c:	10003626 	beq	r2,zero,2013b48 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013a70:	e0bfe204 	addi	r2,fp,-120
 2013a74:	100b883a 	mov	r5,r2
 2013a78:	01003fc4 	movi	r4,255
 2013a7c:	201b8440 	call	201b844 <OSTaskQuery>
 2013a80:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2013a84:	e0bffe83 	ldbu	r2,-6(fp)
 2013a88:	10803fcc 	andi	r2,r2,255
 2013a8c:	1000301e 	bne	r2,zero,2013b50 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2013a90:	e0bfee83 	ldbu	r2,-70(fp)
 2013a94:	10803fcc 	andi	r2,r2,255
 2013a98:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2013a9c:	d0a73117 	ldw	r2,-25404(gp)
 2013aa0:	e0fffd04 	addi	r3,fp,-12
 2013aa4:	180b883a 	mov	r5,r3
 2013aa8:	1009883a 	mov	r4,r2
 2013aac:	201a05c0 	call	201a05c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013ab0:	0005303a 	rdctl	r2,status
 2013ab4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013ab8:	e0ffe117 	ldw	r3,-124(fp)
 2013abc:	00bfff84 	movi	r2,-2
 2013ac0:	1884703a 	and	r2,r3,r2
 2013ac4:	1001703a 	wrctl	status,r2
  
  return context;
 2013ac8:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2013acc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2013ad0:	e0bffd0b 	ldhu	r2,-12(fp)
 2013ad4:	10bfffcc 	andi	r2,r2,65535
 2013ad8:	10000b1e 	bne	r2,zero,2013b08 <__malloc_lock+0xc0>
 2013adc:	d0a00e17 	ldw	r2,-32712(gp)
 2013ae0:	e0ffde17 	ldw	r3,-136(fp)
 2013ae4:	1880081e 	bne	r3,r2,2013b08 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2013ae8:	d0a73017 	ldw	r2,-25408(gp)
 2013aec:	10800044 	addi	r2,r2,1
 2013af0:	d0a73015 	stw	r2,-25408(gp)
 2013af4:	e0bfdd17 	ldw	r2,-140(fp)
 2013af8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013afc:	e0bfdf17 	ldw	r2,-132(fp)
 2013b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2013b04:	00000e06 	br	2013b40 <__malloc_lock+0xf8>
 2013b08:	e0bfdd17 	ldw	r2,-140(fp)
 2013b0c:	e0bfe015 	stw	r2,-128(fp)
 2013b10:	e0bfe017 	ldw	r2,-128(fp)
 2013b14:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2013b18:	d0a73117 	ldw	r2,-25404(gp)
 2013b1c:	e0fffe84 	addi	r3,fp,-6
 2013b20:	180d883a 	mov	r6,r3
 2013b24:	000b883a 	mov	r5,zero
 2013b28:	1009883a 	mov	r4,r2
 2013b2c:	2019bd40 	call	2019bd4 <OSSemPend>
    locks  = 1;
 2013b30:	00800044 	movi	r2,1
 2013b34:	d0a73015 	stw	r2,-25408(gp)
    lockid = id;
 2013b38:	e0bfde17 	ldw	r2,-136(fp)
 2013b3c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2013b40:	0001883a 	nop
 2013b44:	00000306 	br	2013b54 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2013b48:	0001883a 	nop
 2013b4c:	00000106 	br	2013b54 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2013b50:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2013b54:	e037883a 	mov	sp,fp
 2013b58:	dfc00117 	ldw	ra,4(sp)
 2013b5c:	df000017 	ldw	fp,0(sp)
 2013b60:	dec00204 	addi	sp,sp,8
 2013b64:	f800283a 	ret

02013b68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2013b68:	defff804 	addi	sp,sp,-32
 2013b6c:	dfc00715 	stw	ra,28(sp)
 2013b70:	df000615 	stw	fp,24(sp)
 2013b74:	df000604 	addi	fp,sp,24
 2013b78:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013b7c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2013b80:	d0a73243 	ldbu	r2,-25399(gp)
 2013b84:	10803fcc 	andi	r2,r2,255
 2013b88:	10800060 	cmpeqi	r2,r2,1
 2013b8c:	10002326 	beq	r2,zero,2013c1c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013b90:	0005303a 	rdctl	r2,status
 2013b94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013b98:	e0fffe17 	ldw	r3,-8(fp)
 2013b9c:	00bfff84 	movi	r2,-2
 2013ba0:	1884703a 	and	r2,r3,r2
 2013ba4:	1001703a 	wrctl	status,r2
  
  return context;
 2013ba8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2013bac:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2013bb0:	d0a73017 	ldw	r2,-25408(gp)
 2013bb4:	1000051e 	bne	r2,zero,2013bcc <__malloc_unlock+0x64>
 2013bb8:	e0bffa17 	ldw	r2,-24(fp)
 2013bbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013bc0:	e0bffb17 	ldw	r2,-20(fp)
 2013bc4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2013bc8:	00001506 	br	2013c20 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2013bcc:	d0a73017 	ldw	r2,-25408(gp)
 2013bd0:	10bfffc4 	addi	r2,r2,-1
 2013bd4:	d0a73015 	stw	r2,-25408(gp)
 2013bd8:	d0a73017 	ldw	r2,-25408(gp)
 2013bdc:	10000a1e 	bne	r2,zero,2013c08 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2013be0:	00bfffc4 	movi	r2,-1
 2013be4:	d0a00e15 	stw	r2,-32712(gp)
 2013be8:	e0bffa17 	ldw	r2,-24(fp)
 2013bec:	e0bffc15 	stw	r2,-16(fp)
 2013bf0:	e0bffc17 	ldw	r2,-16(fp)
 2013bf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2013bf8:	d0a73117 	ldw	r2,-25404(gp)
 2013bfc:	1009883a 	mov	r4,r2
 2013c00:	2019f4c0 	call	2019f4c <OSSemPost>
 2013c04:	00000606 	br	2013c20 <__malloc_unlock+0xb8>
 2013c08:	e0bffa17 	ldw	r2,-24(fp)
 2013c0c:	e0bffd15 	stw	r2,-12(fp)
 2013c10:	e0bffd17 	ldw	r2,-12(fp)
 2013c14:	1001703a 	wrctl	status,r2
 2013c18:	00000106 	br	2013c20 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2013c1c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013c20:	e037883a 	mov	sp,fp
 2013c24:	dfc00117 	ldw	ra,4(sp)
 2013c28:	df000017 	ldw	fp,0(sp)
 2013c2c:	dec00204 	addi	sp,sp,8
 2013c30:	f800283a 	ret

02013c34 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2013c34:	defff704 	addi	sp,sp,-36
 2013c38:	dfc00815 	stw	ra,32(sp)
 2013c3c:	df000715 	stw	fp,28(sp)
 2013c40:	df000704 	addi	fp,sp,28
 2013c44:	e13ffd15 	stw	r4,-12(fp)
 2013c48:	e17ffe15 	stw	r5,-8(fp)
 2013c4c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013c50:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013c54:	e0bfff17 	ldw	r2,-4(fp)
 2013c58:	1000021e 	bne	r2,zero,2013c64 <OSEventNameGet+0x30>
        return (0);
 2013c5c:	0005883a 	mov	r2,zero
 2013c60:	00003706 	br	2013d40 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2013c64:	e0bffd17 	ldw	r2,-12(fp)
 2013c68:	1000051e 	bne	r2,zero,2013c80 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2013c6c:	e0bfff17 	ldw	r2,-4(fp)
 2013c70:	00c00104 	movi	r3,4
 2013c74:	10c00005 	stb	r3,0(r2)
        return (0);
 2013c78:	0005883a 	mov	r2,zero
 2013c7c:	00003006 	br	2013d40 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013c80:	e0bffe17 	ldw	r2,-8(fp)
 2013c84:	1000051e 	bne	r2,zero,2013c9c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2013c88:	e0bfff17 	ldw	r2,-4(fp)
 2013c8c:	00c00304 	movi	r3,12
 2013c90:	10c00005 	stb	r3,0(r2)
        return (0);
 2013c94:	0005883a 	mov	r2,zero
 2013c98:	00002906 	br	2013d40 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013c9c:	d0a74003 	ldbu	r2,-25344(gp)
 2013ca0:	10803fcc 	andi	r2,r2,255
 2013ca4:	10000526 	beq	r2,zero,2013cbc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2013ca8:	e0bfff17 	ldw	r2,-4(fp)
 2013cac:	00c00444 	movi	r3,17
 2013cb0:	10c00005 	stb	r3,0(r2)
        return (0);
 2013cb4:	0005883a 	mov	r2,zero
 2013cb8:	00002106 	br	2013d40 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2013cbc:	e0bffd17 	ldw	r2,-12(fp)
 2013cc0:	10800003 	ldbu	r2,0(r2)
 2013cc4:	10803fcc 	andi	r2,r2,255
 2013cc8:	10bfffc4 	addi	r2,r2,-1
 2013ccc:	10800128 	cmpgeui	r2,r2,4
 2013cd0:	10000526 	beq	r2,zero,2013ce8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2013cd4:	e0bfff17 	ldw	r2,-4(fp)
 2013cd8:	00c00044 	movi	r3,1
 2013cdc:	10c00005 	stb	r3,0(r2)
             return (0);
 2013ce0:	0005883a 	mov	r2,zero
 2013ce4:	00001606 	br	2013d40 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2013ce8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013cec:	0005303a 	rdctl	r2,status
 2013cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013cf4:	e0fffb17 	ldw	r3,-20(fp)
 2013cf8:	00bfff84 	movi	r2,-2
 2013cfc:	1884703a 	and	r2,r3,r2
 2013d00:	1001703a 	wrctl	status,r2
  
  return context;
 2013d04:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2013d08:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2013d0c:	e0bffd17 	ldw	r2,-12(fp)
 2013d10:	10800384 	addi	r2,r2,14
 2013d14:	100b883a 	mov	r5,r2
 2013d18:	e13ffe17 	ldw	r4,-8(fp)
 2013d1c:	20156b80 	call	20156b8 <OS_StrCopy>
 2013d20:	e0bffa05 	stb	r2,-24(fp)
 2013d24:	e0bff917 	ldw	r2,-28(fp)
 2013d28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013d2c:	e0bffc17 	ldw	r2,-16(fp)
 2013d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013d34:	e0bfff17 	ldw	r2,-4(fp)
 2013d38:	10000005 	stb	zero,0(r2)
    return (len);
 2013d3c:	e0bffa03 	ldbu	r2,-24(fp)
}
 2013d40:	e037883a 	mov	sp,fp
 2013d44:	dfc00117 	ldw	ra,4(sp)
 2013d48:	df000017 	ldw	fp,0(sp)
 2013d4c:	dec00204 	addi	sp,sp,8
 2013d50:	f800283a 	ret

02013d54 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2013d54:	defff604 	addi	sp,sp,-40
 2013d58:	dfc00915 	stw	ra,36(sp)
 2013d5c:	df000815 	stw	fp,32(sp)
 2013d60:	df000804 	addi	fp,sp,32
 2013d64:	e13ffd15 	stw	r4,-12(fp)
 2013d68:	e17ffe15 	stw	r5,-8(fp)
 2013d6c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013d70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013d74:	e0bfff17 	ldw	r2,-4(fp)
 2013d78:	10004026 	beq	r2,zero,2013e7c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2013d7c:	e0bffd17 	ldw	r2,-12(fp)
 2013d80:	1000041e 	bne	r2,zero,2013d94 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2013d84:	e0bfff17 	ldw	r2,-4(fp)
 2013d88:	00c00104 	movi	r3,4
 2013d8c:	10c00005 	stb	r3,0(r2)
        return;
 2013d90:	00003b06 	br	2013e80 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013d94:	e0bffe17 	ldw	r2,-8(fp)
 2013d98:	1000041e 	bne	r2,zero,2013dac <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2013d9c:	e0bfff17 	ldw	r2,-4(fp)
 2013da0:	00c00304 	movi	r3,12
 2013da4:	10c00005 	stb	r3,0(r2)
        return;
 2013da8:	00003506 	br	2013e80 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013dac:	d0a74003 	ldbu	r2,-25344(gp)
 2013db0:	10803fcc 	andi	r2,r2,255
 2013db4:	10000426 	beq	r2,zero,2013dc8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2013db8:	e0bfff17 	ldw	r2,-4(fp)
 2013dbc:	00c00484 	movi	r3,18
 2013dc0:	10c00005 	stb	r3,0(r2)
        return;
 2013dc4:	00002e06 	br	2013e80 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2013dc8:	e0bffd17 	ldw	r2,-12(fp)
 2013dcc:	10800003 	ldbu	r2,0(r2)
 2013dd0:	10803fcc 	andi	r2,r2,255
 2013dd4:	10bfffc4 	addi	r2,r2,-1
 2013dd8:	10800128 	cmpgeui	r2,r2,4
 2013ddc:	10000426 	beq	r2,zero,2013df0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2013de0:	e0bfff17 	ldw	r2,-4(fp)
 2013de4:	00c00044 	movi	r3,1
 2013de8:	10c00005 	stb	r3,0(r2)
             return;
 2013dec:	00002406 	br	2013e80 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2013df0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013df4:	0005303a 	rdctl	r2,status
 2013df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013dfc:	e0fffc17 	ldw	r3,-16(fp)
 2013e00:	00bfff84 	movi	r2,-2
 2013e04:	1884703a 	and	r2,r3,r2
 2013e08:	1001703a 	wrctl	status,r2
  
  return context;
 2013e0c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2013e10:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2013e14:	e13ffe17 	ldw	r4,-8(fp)
 2013e18:	201572c0 	call	201572c <OS_StrLen>
 2013e1c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2013e20:	e0bffa03 	ldbu	r2,-24(fp)
 2013e24:	10800830 	cmpltui	r2,r2,32
 2013e28:	1000081e 	bne	r2,zero,2013e4c <OSEventNameSet+0xf8>
 2013e2c:	e0bff817 	ldw	r2,-32(fp)
 2013e30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013e34:	e0bff917 	ldw	r2,-28(fp)
 2013e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2013e3c:	e0bfff17 	ldw	r2,-4(fp)
 2013e40:	00c002c4 	movi	r3,11
 2013e44:	10c00005 	stb	r3,0(r2)
        return;
 2013e48:	00000d06 	br	2013e80 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2013e4c:	e0bffd17 	ldw	r2,-12(fp)
 2013e50:	10800384 	addi	r2,r2,14
 2013e54:	e17ffe17 	ldw	r5,-8(fp)
 2013e58:	1009883a 	mov	r4,r2
 2013e5c:	20156b80 	call	20156b8 <OS_StrCopy>
 2013e60:	e0bff817 	ldw	r2,-32(fp)
 2013e64:	e0bffb15 	stw	r2,-20(fp)
 2013e68:	e0bffb17 	ldw	r2,-20(fp)
 2013e6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013e70:	e0bfff17 	ldw	r2,-4(fp)
 2013e74:	10000005 	stb	zero,0(r2)
 2013e78:	00000106 	br	2013e80 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2013e7c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2013e80:	e037883a 	mov	sp,fp
 2013e84:	dfc00117 	ldw	ra,4(sp)
 2013e88:	df000017 	ldw	fp,0(sp)
 2013e8c:	dec00204 	addi	sp,sp,8
 2013e90:	f800283a 	ret

02013e94 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 2013e94:	deffed04 	addi	sp,sp,-76
 2013e98:	dfc01215 	stw	ra,72(sp)
 2013e9c:	df001115 	stw	fp,68(sp)
 2013ea0:	df001104 	addi	fp,sp,68
 2013ea4:	e13ffc15 	stw	r4,-16(fp)
 2013ea8:	e17ffd15 	stw	r5,-12(fp)
 2013eac:	e1bffe15 	stw	r6,-8(fp)
 2013eb0:	3805883a 	mov	r2,r7
 2013eb4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2013eb8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2013ebc:	e0800217 	ldw	r2,8(fp)
 2013ec0:	1000021e 	bne	r2,zero,2013ecc <OSEventPendMulti+0x38>
        return (0);
 2013ec4:	0005883a 	mov	r2,zero
 2013ec8:	00017106 	br	2014490 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2013ecc:	e0bffc17 	ldw	r2,-16(fp)
 2013ed0:	1000051e 	bne	r2,zero,2013ee8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 2013ed4:	e0800217 	ldw	r2,8(fp)
 2013ed8:	00c00104 	movi	r3,4
 2013edc:	10c00005 	stb	r3,0(r2)
        return (0);
 2013ee0:	0005883a 	mov	r2,zero
 2013ee4:	00016a06 	br	2014490 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2013ee8:	e0bffd17 	ldw	r2,-12(fp)
 2013eec:	1000051e 	bne	r2,zero,2013f04 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2013ef0:	e0800217 	ldw	r2,8(fp)
 2013ef4:	00c00104 	movi	r3,4
 2013ef8:	10c00005 	stb	r3,0(r2)
        return (0);
 2013efc:	0005883a 	mov	r2,zero
 2013f00:	00016306 	br	2014490 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2013f04:	e0bffe17 	ldw	r2,-8(fp)
 2013f08:	1000051e 	bne	r2,zero,2013f20 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2013f0c:	e0800217 	ldw	r2,8(fp)
 2013f10:	00c00104 	movi	r3,4
 2013f14:	10c00005 	stb	r3,0(r2)
        return (0);
 2013f18:	0005883a 	mov	r2,zero
 2013f1c:	00015c06 	br	2014490 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2013f20:	e0bffd17 	ldw	r2,-12(fp)
 2013f24:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2013f28:	e0bffc17 	ldw	r2,-16(fp)
 2013f2c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2013f30:	e0bfef17 	ldw	r2,-68(fp)
 2013f34:	10800017 	ldw	r2,0(r2)
 2013f38:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2013f3c:	00001906 	br	2013fa4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2013f40:	e0bff017 	ldw	r2,-64(fp)
 2013f44:	10800003 	ldbu	r2,0(r2)
 2013f48:	10803fcc 	andi	r2,r2,255
 2013f4c:	10c000a0 	cmpeqi	r3,r2,2
 2013f50:	1800091e 	bne	r3,zero,2013f78 <OSEventPendMulti+0xe4>
 2013f54:	10c000e0 	cmpeqi	r3,r2,3
 2013f58:	1800091e 	bne	r3,zero,2013f80 <OSEventPendMulti+0xec>
 2013f5c:	10800060 	cmpeqi	r2,r2,1
 2013f60:	1000091e 	bne	r2,zero,2013f88 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2013f64:	e0800217 	ldw	r2,8(fp)
 2013f68:	00c00044 	movi	r3,1
 2013f6c:	10c00005 	stb	r3,0(r2)
                 return (0);
 2013f70:	0005883a 	mov	r2,zero
 2013f74:	00014606 	br	2014490 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2013f78:	0001883a 	nop
 2013f7c:	00000306 	br	2013f8c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2013f80:	0001883a 	nop
 2013f84:	00000106 	br	2013f8c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2013f88:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2013f8c:	e0bfef17 	ldw	r2,-68(fp)
 2013f90:	10800104 	addi	r2,r2,4
 2013f94:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2013f98:	e0bfef17 	ldw	r2,-68(fp)
 2013f9c:	10800017 	ldw	r2,0(r2)
 2013fa0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 2013fa4:	e0bff017 	ldw	r2,-64(fp)
 2013fa8:	103fe51e 	bne	r2,zero,2013f40 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2013fac:	d0a74003 	ldbu	r2,-25344(gp)
 2013fb0:	10803fcc 	andi	r2,r2,255
 2013fb4:	10000526 	beq	r2,zero,2013fcc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2013fb8:	e0800217 	ldw	r2,8(fp)
 2013fbc:	00c00084 	movi	r3,2
 2013fc0:	10c00005 	stb	r3,0(r2)
        return (0);
 2013fc4:	0005883a 	mov	r2,zero
 2013fc8:	00013106 	br	2014490 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2013fcc:	d0a73203 	ldbu	r2,-25400(gp)
 2013fd0:	10803fcc 	andi	r2,r2,255
 2013fd4:	10000526 	beq	r2,zero,2013fec <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2013fd8:	e0800217 	ldw	r2,8(fp)
 2013fdc:	00c00344 	movi	r3,13
 2013fe0:	10c00005 	stb	r3,0(r2)
        return (0);
 2013fe4:	0005883a 	mov	r2,zero
 2013fe8:	00012906 	br	2014490 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013fec:	0005303a 	rdctl	r2,status
 2013ff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013ff4:	e0fffb17 	ldw	r3,-20(fp)
 2013ff8:	00bfff84 	movi	r2,-2
 2013ffc:	1884703a 	and	r2,r3,r2
 2014000:	1001703a 	wrctl	status,r2
  
  return context;
 2014004:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014008:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 201400c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2014010:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2014014:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2014018:	e0bffc17 	ldw	r2,-16(fp)
 201401c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2014020:	e0bfef17 	ldw	r2,-68(fp)
 2014024:	10800017 	ldw	r2,0(r2)
 2014028:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 201402c:	00008106 	br	2014234 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2014030:	e0bff017 	ldw	r2,-64(fp)
 2014034:	10800003 	ldbu	r2,0(r2)
 2014038:	10803fcc 	andi	r2,r2,255
 201403c:	10c000a0 	cmpeqi	r3,r2,2
 2014040:	18003c1e 	bne	r3,zero,2014134 <OSEventPendMulti+0x2a0>
 2014044:	10c000e0 	cmpeqi	r3,r2,3
 2014048:	1800031e 	bne	r3,zero,2014058 <OSEventPendMulti+0x1c4>
 201404c:	10800060 	cmpeqi	r2,r2,1
 2014050:	10001e1e 	bne	r2,zero,20140cc <OSEventPendMulti+0x238>
 2014054:	00006606 	br	20141f0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2014058:	e0bff017 	ldw	r2,-64(fp)
 201405c:	1080020b 	ldhu	r2,8(r2)
 2014060:	10bfffcc 	andi	r2,r2,65535
 2014064:	10001526 	beq	r2,zero,20140bc <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2014068:	e0bff017 	ldw	r2,-64(fp)
 201406c:	1080020b 	ldhu	r2,8(r2)
 2014070:	10bfffc4 	addi	r2,r2,-1
 2014074:	1007883a 	mov	r3,r2
 2014078:	e0bff017 	ldw	r2,-64(fp)
 201407c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2014080:	e0bffd17 	ldw	r2,-12(fp)
 2014084:	10c00104 	addi	r3,r2,4
 2014088:	e0fffd15 	stw	r3,-12(fp)
 201408c:	e0fff017 	ldw	r3,-64(fp)
 2014090:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 2014094:	00800044 	movi	r2,1
 2014098:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 201409c:	e0bffe17 	ldw	r2,-8(fp)
 20140a0:	10c00104 	addi	r3,r2,4
 20140a4:	e0fffe15 	stw	r3,-8(fp)
 20140a8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20140ac:	e0bff18b 	ldhu	r2,-58(fp)
 20140b0:	10800044 	addi	r2,r2,1
 20140b4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20140b8:	00005806 	br	201421c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20140bc:	e0bff203 	ldbu	r2,-56(fp)
 20140c0:	10800054 	ori	r2,r2,1
 20140c4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20140c8:	00005406 	br	201421c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20140cc:	e0bff017 	ldw	r2,-64(fp)
 20140d0:	10800117 	ldw	r2,4(r2)
 20140d4:	10001326 	beq	r2,zero,2014124 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20140d8:	e0bffe17 	ldw	r2,-8(fp)
 20140dc:	10c00104 	addi	r3,r2,4
 20140e0:	e0fffe15 	stw	r3,-8(fp)
 20140e4:	e0fff017 	ldw	r3,-64(fp)
 20140e8:	18c00117 	ldw	r3,4(r3)
 20140ec:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 20140f0:	e0bff017 	ldw	r2,-64(fp)
 20140f4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 20140f8:	e0bffd17 	ldw	r2,-12(fp)
 20140fc:	10c00104 	addi	r3,r2,4
 2014100:	e0fffd15 	stw	r3,-12(fp)
 2014104:	e0fff017 	ldw	r3,-64(fp)
 2014108:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 201410c:	00800044 	movi	r2,1
 2014110:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2014114:	e0bff18b 	ldhu	r2,-58(fp)
 2014118:	10800044 	addi	r2,r2,1
 201411c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2014120:	00003e06 	br	201421c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2014124:	e0bff203 	ldbu	r2,-56(fp)
 2014128:	10800094 	ori	r2,r2,2
 201412c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2014130:	00003a06 	br	201421c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2014134:	e0bff017 	ldw	r2,-64(fp)
 2014138:	10800117 	ldw	r2,4(r2)
 201413c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2014140:	e0bff517 	ldw	r2,-44(fp)
 2014144:	1080058b 	ldhu	r2,22(r2)
 2014148:	10bfffcc 	andi	r2,r2,65535
 201414c:	10002426 	beq	r2,zero,20141e0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2014150:	e0bffe17 	ldw	r2,-8(fp)
 2014154:	10c00104 	addi	r3,r2,4
 2014158:	e0fffe15 	stw	r3,-8(fp)
 201415c:	e0fff517 	ldw	r3,-44(fp)
 2014160:	18c00417 	ldw	r3,16(r3)
 2014164:	19400104 	addi	r5,r3,4
 2014168:	e13ff517 	ldw	r4,-44(fp)
 201416c:	21400415 	stw	r5,16(r4)
 2014170:	18c00017 	ldw	r3,0(r3)
 2014174:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2014178:	e0bff517 	ldw	r2,-44(fp)
 201417c:	10c00417 	ldw	r3,16(r2)
 2014180:	e0bff517 	ldw	r2,-44(fp)
 2014184:	10800217 	ldw	r2,8(r2)
 2014188:	1880041e 	bne	r3,r2,201419c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 201418c:	e0bff517 	ldw	r2,-44(fp)
 2014190:	10c00117 	ldw	r3,4(r2)
 2014194:	e0bff517 	ldw	r2,-44(fp)
 2014198:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 201419c:	e0bff517 	ldw	r2,-44(fp)
 20141a0:	1080058b 	ldhu	r2,22(r2)
 20141a4:	10bfffc4 	addi	r2,r2,-1
 20141a8:	1007883a 	mov	r3,r2
 20141ac:	e0bff517 	ldw	r2,-44(fp)
 20141b0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20141b4:	e0bffd17 	ldw	r2,-12(fp)
 20141b8:	10c00104 	addi	r3,r2,4
 20141bc:	e0fffd15 	stw	r3,-12(fp)
 20141c0:	e0fff017 	ldw	r3,-64(fp)
 20141c4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20141c8:	00800044 	movi	r2,1
 20141cc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20141d0:	e0bff18b 	ldhu	r2,-58(fp)
 20141d4:	10800044 	addi	r2,r2,1
 20141d8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20141dc:	00000f06 	br	201421c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20141e0:	e0bff203 	ldbu	r2,-56(fp)
 20141e4:	10800114 	ori	r2,r2,4
 20141e8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20141ec:	00000b06 	br	201421c <OSEventPendMulti+0x388>
 20141f0:	e0bff317 	ldw	r2,-52(fp)
 20141f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20141f8:	e0bff417 	ldw	r2,-48(fp)
 20141fc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2014200:	e0bffd17 	ldw	r2,-12(fp)
 2014204:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2014208:	e0800217 	ldw	r2,8(fp)
 201420c:	00c00044 	movi	r3,1
 2014210:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2014214:	e0bff18b 	ldhu	r2,-58(fp)
 2014218:	00009d06 	br	2014490 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 201421c:	e0bfef17 	ldw	r2,-68(fp)
 2014220:	10800104 	addi	r2,r2,4
 2014224:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2014228:	e0bfef17 	ldw	r2,-68(fp)
 201422c:	10800017 	ldw	r2,0(r2)
 2014230:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2014234:	e0bff017 	ldw	r2,-64(fp)
 2014238:	103f7d1e 	bne	r2,zero,2014030 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 201423c:	e0bff103 	ldbu	r2,-60(fp)
 2014240:	10800058 	cmpnei	r2,r2,1
 2014244:	10000a1e 	bne	r2,zero,2014270 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2014248:	e0bffd17 	ldw	r2,-12(fp)
 201424c:	10000015 	stw	zero,0(r2)
 2014250:	e0bff317 	ldw	r2,-52(fp)
 2014254:	e0bff615 	stw	r2,-40(fp)
 2014258:	e0bff617 	ldw	r2,-40(fp)
 201425c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2014260:	e0800217 	ldw	r2,8(fp)
 2014264:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2014268:	e0bff18b 	ldhu	r2,-58(fp)
 201426c:	00008806 	br	2014490 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2014270:	d0a74117 	ldw	r2,-25340(gp)
 2014274:	d0e74117 	ldw	r3,-25340(gp)
 2014278:	19000c03 	ldbu	r4,48(r3)
 201427c:	e0fff203 	ldbu	r3,-56(fp)
 2014280:	20c6b03a 	or	r3,r4,r3
 2014284:	1809883a 	mov	r4,r3
 2014288:	00ffe004 	movi	r3,-128
 201428c:	20c6b03a 	or	r3,r4,r3
 2014290:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014294:	d0a74117 	ldw	r2,-25340(gp)
 2014298:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 201429c:	d0a74117 	ldw	r2,-25340(gp)
 20142a0:	e0ffff0b 	ldhu	r3,-4(fp)
 20142a4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20142a8:	e13ffc17 	ldw	r4,-16(fp)
 20142ac:	2014dd00 	call	2014dd0 <OS_EventTaskWaitMulti>
 20142b0:	e0bff317 	ldw	r2,-52(fp)
 20142b4:	e0bff915 	stw	r2,-28(fp)
 20142b8:	e0bff917 	ldw	r2,-28(fp)
 20142bc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20142c0:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20142c4:	0005303a 	rdctl	r2,status
 20142c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20142cc:	e0fff717 	ldw	r3,-36(fp)
 20142d0:	00bfff84 	movi	r2,-2
 20142d4:	1884703a 	and	r2,r3,r2
 20142d8:	1001703a 	wrctl	status,r2
  
  return context;
 20142dc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20142e0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 20142e4:	d0a74117 	ldw	r2,-25340(gp)
 20142e8:	10800c43 	ldbu	r2,49(r2)
 20142ec:	10803fcc 	andi	r2,r2,255
 20142f0:	10000226 	beq	r2,zero,20142fc <OSEventPendMulti+0x468>
 20142f4:	108000a0 	cmpeqi	r2,r2,2
 20142f8:	10001826 	beq	r2,zero,201435c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 20142fc:	d0a74117 	ldw	r2,-25340(gp)
 2014300:	10800717 	ldw	r2,28(r2)
 2014304:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2014308:	e0bff017 	ldw	r2,-64(fp)
 201430c:	10000b26 	beq	r2,zero,201433c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2014310:	e0bffd17 	ldw	r2,-12(fp)
 2014314:	10c00104 	addi	r3,r2,4
 2014318:	e0fffd15 	stw	r3,-12(fp)
 201431c:	e0fff017 	ldw	r3,-64(fp)
 2014320:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2014324:	e0bffd17 	ldw	r2,-12(fp)
 2014328:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 201432c:	e0bff18b 	ldhu	r2,-58(fp)
 2014330:	10800044 	addi	r2,r2,1
 2014334:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 2014338:	00000d06 	br	2014370 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 201433c:	d0a74117 	ldw	r2,-25340(gp)
 2014340:	00c00044 	movi	r3,1
 2014344:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2014348:	d0a74117 	ldw	r2,-25340(gp)
 201434c:	e17ffc17 	ldw	r5,-16(fp)
 2014350:	1009883a 	mov	r4,r2
 2014354:	2014fd80 	call	2014fd8 <OS_EventTaskRemoveMulti>
             }
			 break;
 2014358:	00000506 	br	2014370 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201435c:	d0a74117 	ldw	r2,-25340(gp)
 2014360:	e17ffc17 	ldw	r5,-16(fp)
 2014364:	1009883a 	mov	r4,r2
 2014368:	2014fd80 	call	2014fd8 <OS_EventTaskRemoveMulti>
             break;
 201436c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2014370:	d0a74117 	ldw	r2,-25340(gp)
 2014374:	10800c43 	ldbu	r2,49(r2)
 2014378:	10803fcc 	andi	r2,r2,255
 201437c:	10000326 	beq	r2,zero,201438c <OSEventPendMulti+0x4f8>
 2014380:	108000a0 	cmpeqi	r2,r2,2
 2014384:	1000231e 	bne	r2,zero,2014414 <OSEventPendMulti+0x580>
 2014388:	00002a06 	br	2014434 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 201438c:	e0bff017 	ldw	r2,-64(fp)
 2014390:	10800003 	ldbu	r2,0(r2)
 2014394:	10803fcc 	andi	r2,r2,255
 2014398:	0080100e 	bge	zero,r2,20143dc <OSEventPendMulti+0x548>
 201439c:	10c000d0 	cmplti	r3,r2,3
 20143a0:	1800071e 	bne	r3,zero,20143c0 <OSEventPendMulti+0x52c>
 20143a4:	108000e0 	cmpeqi	r2,r2,3
 20143a8:	10000c26 	beq	r2,zero,20143dc <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20143ac:	e0bffe17 	ldw	r2,-8(fp)
 20143b0:	10c00104 	addi	r3,r2,4
 20143b4:	e0fffe15 	stw	r3,-8(fp)
 20143b8:	10000015 	stw	zero,0(r2)
                      break;
 20143bc:	00001206 	br	2014408 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20143c0:	e0bffe17 	ldw	r2,-8(fp)
 20143c4:	10c00104 	addi	r3,r2,4
 20143c8:	e0fffe15 	stw	r3,-8(fp)
 20143cc:	d0e74117 	ldw	r3,-25340(gp)
 20143d0:	18c00917 	ldw	r3,36(r3)
 20143d4:	10c00015 	stw	r3,0(r2)
                      break;
 20143d8:	00000b06 	br	2014408 <OSEventPendMulti+0x574>
 20143dc:	e0bff317 	ldw	r2,-52(fp)
 20143e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20143e4:	e0bff817 	ldw	r2,-32(fp)
 20143e8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20143ec:	e0bffd17 	ldw	r2,-12(fp)
 20143f0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 20143f4:	e0800217 	ldw	r2,8(fp)
 20143f8:	00c00044 	movi	r3,1
 20143fc:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2014400:	e0bff18b 	ldhu	r2,-58(fp)
 2014404:	00002206 	br	2014490 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2014408:	e0800217 	ldw	r2,8(fp)
 201440c:	10000005 	stb	zero,0(r2)
             break;
 2014410:	00001006 	br	2014454 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2014414:	e0bffe17 	ldw	r2,-8(fp)
 2014418:	10c00104 	addi	r3,r2,4
 201441c:	e0fffe15 	stw	r3,-8(fp)
 2014420:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2014424:	e0800217 	ldw	r2,8(fp)
 2014428:	00c00384 	movi	r3,14
 201442c:	10c00005 	stb	r3,0(r2)
             break;
 2014430:	00000806 	br	2014454 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2014434:	e0bffe17 	ldw	r2,-8(fp)
 2014438:	10c00104 	addi	r3,r2,4
 201443c:	e0fffe15 	stw	r3,-8(fp)
 2014440:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2014444:	e0800217 	ldw	r2,8(fp)
 2014448:	00c00284 	movi	r3,10
 201444c:	10c00005 	stb	r3,0(r2)
             break;
 2014450:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2014454:	d0a74117 	ldw	r2,-25340(gp)
 2014458:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 201445c:	d0a74117 	ldw	r2,-25340(gp)
 2014460:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2014464:	d0a74117 	ldw	r2,-25340(gp)
 2014468:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201446c:	d0a74117 	ldw	r2,-25340(gp)
 2014470:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2014474:	d0a74117 	ldw	r2,-25340(gp)
 2014478:	10000915 	stw	zero,36(r2)
 201447c:	e0bff317 	ldw	r2,-52(fp)
 2014480:	e0bffa15 	stw	r2,-24(fp)
 2014484:	e0bffa17 	ldw	r2,-24(fp)
 2014488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 201448c:	e0bff18b 	ldhu	r2,-58(fp)
}
 2014490:	e037883a 	mov	sp,fp
 2014494:	dfc00117 	ldw	ra,4(sp)
 2014498:	df000017 	ldw	fp,0(sp)
 201449c:	dec00204 	addi	sp,sp,8
 20144a0:	f800283a 	ret

020144a4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 20144a4:	defffe04 	addi	sp,sp,-8
 20144a8:	dfc00115 	stw	ra,4(sp)
 20144ac:	df000015 	stw	fp,0(sp)
 20144b0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20144b4:	201dbc40 	call	201dbc4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20144b8:	20152200 	call	2015220 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20144bc:	20152680 	call	2015268 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20144c0:	20153d40 	call	20153d4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20144c4:	20151400 	call	2015140 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20144c8:	20172740 	call	2017274 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20144cc:	201863c0 	call	201863c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20144d0:	20197640 	call	2019764 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20144d4:	20152d40 	call	20152d4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20144d8:	20153540 	call	2015354 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20144dc:	201dbe40 	call	201dbe4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20144e0:	2015c480 	call	2015c48 <OSDebugInit>
#endif
}
 20144e4:	0001883a 	nop
 20144e8:	e037883a 	mov	sp,fp
 20144ec:	dfc00117 	ldw	ra,4(sp)
 20144f0:	df000017 	ldw	fp,0(sp)
 20144f4:	dec00204 	addi	sp,sp,8
 20144f8:	f800283a 	ret

020144fc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 20144fc:	deffff04 	addi	sp,sp,-4
 2014500:	df000015 	stw	fp,0(sp)
 2014504:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2014508:	d0a73243 	ldbu	r2,-25399(gp)
 201450c:	10803fcc 	andi	r2,r2,255
 2014510:	10800058 	cmpnei	r2,r2,1
 2014514:	1000071e 	bne	r2,zero,2014534 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2014518:	d0a74003 	ldbu	r2,-25344(gp)
 201451c:	10803fcc 	andi	r2,r2,255
 2014520:	10803fe0 	cmpeqi	r2,r2,255
 2014524:	1000031e 	bne	r2,zero,2014534 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2014528:	d0a74003 	ldbu	r2,-25344(gp)
 201452c:	10800044 	addi	r2,r2,1
 2014530:	d0a74005 	stb	r2,-25344(gp)
        }
    }
}
 2014534:	0001883a 	nop
 2014538:	e037883a 	mov	sp,fp
 201453c:	df000017 	ldw	fp,0(sp)
 2014540:	dec00104 	addi	sp,sp,4
 2014544:	f800283a 	ret

02014548 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2014548:	defffb04 	addi	sp,sp,-20
 201454c:	dfc00415 	stw	ra,16(sp)
 2014550:	df000315 	stw	fp,12(sp)
 2014554:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014558:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 201455c:	d0a73243 	ldbu	r2,-25399(gp)
 2014560:	10803fcc 	andi	r2,r2,255
 2014564:	10800058 	cmpnei	r2,r2,1
 2014568:	10002f1e 	bne	r2,zero,2014628 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201456c:	0005303a 	rdctl	r2,status
 2014570:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014574:	e0ffff17 	ldw	r3,-4(fp)
 2014578:	00bfff84 	movi	r2,-2
 201457c:	1884703a 	and	r2,r3,r2
 2014580:	1001703a 	wrctl	status,r2
  
  return context;
 2014584:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2014588:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 201458c:	d0a74003 	ldbu	r2,-25344(gp)
 2014590:	10803fcc 	andi	r2,r2,255
 2014594:	10000326 	beq	r2,zero,20145a4 <OSIntExit+0x5c>
            OSIntNesting--;
 2014598:	d0a74003 	ldbu	r2,-25344(gp)
 201459c:	10bfffc4 	addi	r2,r2,-1
 20145a0:	d0a74005 	stb	r2,-25344(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 20145a4:	d0a74003 	ldbu	r2,-25344(gp)
 20145a8:	10803fcc 	andi	r2,r2,255
 20145ac:	10001a1e 	bne	r2,zero,2014618 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 20145b0:	d0a73203 	ldbu	r2,-25400(gp)
 20145b4:	10803fcc 	andi	r2,r2,255
 20145b8:	1000171e 	bne	r2,zero,2014618 <OSIntExit+0xd0>
                OS_SchedNew();
 20145bc:	20156440 	call	2015644 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20145c0:	d0e73403 	ldbu	r3,-25392(gp)
 20145c4:	d0a73443 	ldbu	r2,-25391(gp)
 20145c8:	18c03fcc 	andi	r3,r3,255
 20145cc:	10803fcc 	andi	r2,r2,255
 20145d0:	18801126 	beq	r3,r2,2014618 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20145d4:	d0a73403 	ldbu	r2,-25392(gp)
 20145d8:	10c03fcc 	andi	r3,r2,255
 20145dc:	008080f4 	movhi	r2,515
 20145e0:	10ad6904 	addi	r2,r2,-19036
 20145e4:	18c7883a 	add	r3,r3,r3
 20145e8:	18c7883a 	add	r3,r3,r3
 20145ec:	10c5883a 	add	r2,r2,r3
 20145f0:	10800017 	ldw	r2,0(r2)
 20145f4:	d0a73c15 	stw	r2,-25360(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 20145f8:	d0a73c17 	ldw	r2,-25360(gp)
 20145fc:	10c00e17 	ldw	r3,56(r2)
 2014600:	18c00044 	addi	r3,r3,1
 2014604:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2014608:	d0a73717 	ldw	r2,-25380(gp)
 201460c:	10800044 	addi	r2,r2,1
 2014610:	d0a73715 	stw	r2,-25380(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2014614:	201d8f00 	call	201d8f0 <OSCtxSw>
 2014618:	e0bffd17 	ldw	r2,-12(fp)
 201461c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014620:	e0bffe17 	ldw	r2,-8(fp)
 2014624:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2014628:	0001883a 	nop
 201462c:	e037883a 	mov	sp,fp
 2014630:	dfc00117 	ldw	ra,4(sp)
 2014634:	df000017 	ldw	fp,0(sp)
 2014638:	dec00204 	addi	sp,sp,8
 201463c:	f800283a 	ret

02014640 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2014640:	defffc04 	addi	sp,sp,-16
 2014644:	df000315 	stw	fp,12(sp)
 2014648:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201464c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2014650:	d0a73243 	ldbu	r2,-25399(gp)
 2014654:	10803fcc 	andi	r2,r2,255
 2014658:	10800058 	cmpnei	r2,r2,1
 201465c:	1000161e 	bne	r2,zero,20146b8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014660:	0005303a 	rdctl	r2,status
 2014664:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014668:	e0ffff17 	ldw	r3,-4(fp)
 201466c:	00bfff84 	movi	r2,-2
 2014670:	1884703a 	and	r2,r3,r2
 2014674:	1001703a 	wrctl	status,r2
  
  return context;
 2014678:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 201467c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2014680:	d0a74003 	ldbu	r2,-25344(gp)
 2014684:	10803fcc 	andi	r2,r2,255
 2014688:	1000071e 	bne	r2,zero,20146a8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 201468c:	d0a73203 	ldbu	r2,-25400(gp)
 2014690:	10803fcc 	andi	r2,r2,255
 2014694:	10803fe0 	cmpeqi	r2,r2,255
 2014698:	1000031e 	bne	r2,zero,20146a8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 201469c:	d0a73203 	ldbu	r2,-25400(gp)
 20146a0:	10800044 	addi	r2,r2,1
 20146a4:	d0a73205 	stb	r2,-25400(gp)
 20146a8:	e0bffd17 	ldw	r2,-12(fp)
 20146ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20146b0:	e0bffe17 	ldw	r2,-8(fp)
 20146b4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20146b8:	0001883a 	nop
 20146bc:	e037883a 	mov	sp,fp
 20146c0:	df000017 	ldw	fp,0(sp)
 20146c4:	dec00104 	addi	sp,sp,4
 20146c8:	f800283a 	ret

020146cc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20146cc:	defff804 	addi	sp,sp,-32
 20146d0:	dfc00715 	stw	ra,28(sp)
 20146d4:	df000615 	stw	fp,24(sp)
 20146d8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20146dc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20146e0:	d0a73243 	ldbu	r2,-25399(gp)
 20146e4:	10803fcc 	andi	r2,r2,255
 20146e8:	10800058 	cmpnei	r2,r2,1
 20146ec:	1000281e 	bne	r2,zero,2014790 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20146f0:	0005303a 	rdctl	r2,status
 20146f4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146f8:	e0ffff17 	ldw	r3,-4(fp)
 20146fc:	00bfff84 	movi	r2,-2
 2014700:	1884703a 	and	r2,r3,r2
 2014704:	1001703a 	wrctl	status,r2
  
  return context;
 2014708:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 201470c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2014710:	d0a73203 	ldbu	r2,-25400(gp)
 2014714:	10803fcc 	andi	r2,r2,255
 2014718:	10001926 	beq	r2,zero,2014780 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 201471c:	d0a73203 	ldbu	r2,-25400(gp)
 2014720:	10bfffc4 	addi	r2,r2,-1
 2014724:	d0a73205 	stb	r2,-25400(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2014728:	d0a73203 	ldbu	r2,-25400(gp)
 201472c:	10803fcc 	andi	r2,r2,255
 2014730:	10000e1e 	bne	r2,zero,201476c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2014734:	d0a74003 	ldbu	r2,-25344(gp)
 2014738:	10803fcc 	andi	r2,r2,255
 201473c:	1000061e 	bne	r2,zero,2014758 <OSSchedUnlock+0x8c>
 2014740:	e0bffa17 	ldw	r2,-24(fp)
 2014744:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014748:	e0bffb17 	ldw	r2,-20(fp)
 201474c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2014750:	20155740 	call	2015574 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2014754:	00000e06 	br	2014790 <OSSchedUnlock+0xc4>
 2014758:	e0bffa17 	ldw	r2,-24(fp)
 201475c:	e0bffc15 	stw	r2,-16(fp)
 2014760:	e0bffc17 	ldw	r2,-16(fp)
 2014764:	1001703a 	wrctl	status,r2
 2014768:	00000906 	br	2014790 <OSSchedUnlock+0xc4>
 201476c:	e0bffa17 	ldw	r2,-24(fp)
 2014770:	e0bffd15 	stw	r2,-12(fp)
 2014774:	e0bffd17 	ldw	r2,-12(fp)
 2014778:	1001703a 	wrctl	status,r2
 201477c:	00000406 	br	2014790 <OSSchedUnlock+0xc4>
 2014780:	e0bffa17 	ldw	r2,-24(fp)
 2014784:	e0bffe15 	stw	r2,-8(fp)
 2014788:	e0bffe17 	ldw	r2,-8(fp)
 201478c:	1001703a 	wrctl	status,r2
 2014790:	0001883a 	nop
 2014794:	e037883a 	mov	sp,fp
 2014798:	dfc00117 	ldw	ra,4(sp)
 201479c:	df000017 	ldw	fp,0(sp)
 20147a0:	dec00204 	addi	sp,sp,8
 20147a4:	f800283a 	ret

020147a8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 20147a8:	defffe04 	addi	sp,sp,-8
 20147ac:	dfc00115 	stw	ra,4(sp)
 20147b0:	df000015 	stw	fp,0(sp)
 20147b4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20147b8:	d0a73243 	ldbu	r2,-25399(gp)
 20147bc:	10803fcc 	andi	r2,r2,255
 20147c0:	10000f1e 	bne	r2,zero,2014800 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20147c4:	20156440 	call	2015644 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20147c8:	d0a73403 	ldbu	r2,-25392(gp)
 20147cc:	d0a73445 	stb	r2,-25391(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20147d0:	d0a73403 	ldbu	r2,-25392(gp)
 20147d4:	10c03fcc 	andi	r3,r2,255
 20147d8:	008080f4 	movhi	r2,515
 20147dc:	10ad6904 	addi	r2,r2,-19036
 20147e0:	18c7883a 	add	r3,r3,r3
 20147e4:	18c7883a 	add	r3,r3,r3
 20147e8:	10c5883a 	add	r2,r2,r3
 20147ec:	10800017 	ldw	r2,0(r2)
 20147f0:	d0a73c15 	stw	r2,-25360(gp)
        OSTCBCur      = OSTCBHighRdy;
 20147f4:	d0a73c17 	ldw	r2,-25360(gp)
 20147f8:	d0a74115 	stw	r2,-25340(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 20147fc:	201d97c0 	call	201d97c <OSStartHighRdy>
    }
}
 2014800:	0001883a 	nop
 2014804:	e037883a 	mov	sp,fp
 2014808:	dfc00117 	ldw	ra,4(sp)
 201480c:	df000017 	ldw	fp,0(sp)
 2014810:	dec00204 	addi	sp,sp,8
 2014814:	f800283a 	ret

02014818 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2014818:	defff904 	addi	sp,sp,-28
 201481c:	dfc00615 	stw	ra,24(sp)
 2014820:	df000515 	stw	fp,20(sp)
 2014824:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014828:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 201482c:	01000084 	movi	r4,2
 2014830:	201b9d80 	call	201b9d8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014834:	0005303a 	rdctl	r2,status
 2014838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201483c:	e0fffc17 	ldw	r3,-16(fp)
 2014840:	00bfff84 	movi	r2,-2
 2014844:	1884703a 	and	r2,r3,r2
 2014848:	1001703a 	wrctl	status,r2
  
  return context;
 201484c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2014850:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2014854:	d0273315 	stw	zero,-25396(gp)
 2014858:	e0bffb17 	ldw	r2,-20(fp)
 201485c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014860:	e0bffd17 	ldw	r2,-12(fp)
 2014864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2014868:	01001904 	movi	r4,100
 201486c:	201b9d80 	call	201b9d8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014870:	0005303a 	rdctl	r2,status
 2014874:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014878:	e0fffe17 	ldw	r3,-8(fp)
 201487c:	00bfff84 	movi	r2,-2
 2014880:	1884703a 	and	r2,r3,r2
 2014884:	1001703a 	wrctl	status,r2
  
  return context;
 2014888:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 201488c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2014890:	d0a73317 	ldw	r2,-25396(gp)
 2014894:	d0a73815 	stw	r2,-25376(gp)
    OSStatRdy    = OS_TRUE;
 2014898:	00800044 	movi	r2,1
 201489c:	d0a74405 	stb	r2,-25328(gp)
 20148a0:	e0bffb17 	ldw	r2,-20(fp)
 20148a4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20148a8:	e0bfff17 	ldw	r2,-4(fp)
 20148ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20148b0:	0001883a 	nop
 20148b4:	e037883a 	mov	sp,fp
 20148b8:	dfc00117 	ldw	ra,4(sp)
 20148bc:	df000017 	ldw	fp,0(sp)
 20148c0:	dec00204 	addi	sp,sp,8
 20148c4:	f800283a 	ret

020148c8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20148c8:	defff704 	addi	sp,sp,-36
 20148cc:	dfc00815 	stw	ra,32(sp)
 20148d0:	df000715 	stw	fp,28(sp)
 20148d4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20148d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 20148dc:	201dba40 	call	201dba4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20148e0:	0005303a 	rdctl	r2,status
 20148e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20148e8:	e0fffd17 	ldw	r3,-12(fp)
 20148ec:	00bfff84 	movi	r2,-2
 20148f0:	1884703a 	and	r2,r3,r2
 20148f4:	1001703a 	wrctl	status,r2
  
  return context;
 20148f8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 20148fc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2014900:	d0a74217 	ldw	r2,-25336(gp)
 2014904:	10800044 	addi	r2,r2,1
 2014908:	d0a74215 	stw	r2,-25336(gp)
 201490c:	e0bffb17 	ldw	r2,-20(fp)
 2014910:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014914:	e0bfff17 	ldw	r2,-4(fp)
 2014918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 201491c:	d0a73243 	ldbu	r2,-25399(gp)
 2014920:	10803fcc 	andi	r2,r2,255
 2014924:	10800058 	cmpnei	r2,r2,1
 2014928:	10006a1e 	bne	r2,zero,2014ad4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 201492c:	d0a73603 	ldbu	r2,-25384(gp)
 2014930:	10803fcc 	andi	r2,r2,255
 2014934:	10c00060 	cmpeqi	r3,r2,1
 2014938:	1800061e 	bne	r3,zero,2014954 <OSTimeTick+0x8c>
 201493c:	10c000a0 	cmpeqi	r3,r2,2
 2014940:	1800061e 	bne	r3,zero,201495c <OSTimeTick+0x94>
 2014944:	10000a1e 	bne	r2,zero,2014970 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2014948:	00800044 	movi	r2,1
 201494c:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2014950:	00000b06 	br	2014980 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2014954:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2014958:	00000906 	br	2014980 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 201495c:	00800044 	movi	r2,1
 2014960:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2014964:	00800044 	movi	r2,1
 2014968:	d0a73605 	stb	r2,-25384(gp)
                 break;
 201496c:	00000406 	br	2014980 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2014970:	00800044 	movi	r2,1
 2014974:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2014978:	d0273605 	stb	zero,-25384(gp)
                 break;
 201497c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2014980:	e0bffa03 	ldbu	r2,-24(fp)
 2014984:	10005226 	beq	r2,zero,2014ad0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2014988:	d0a73517 	ldw	r2,-25388(gp)
 201498c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014990:	00004906 	br	2014ab8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014994:	0005303a 	rdctl	r2,status
 2014998:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201499c:	e0fffc17 	ldw	r3,-16(fp)
 20149a0:	00bfff84 	movi	r2,-2
 20149a4:	1884703a 	and	r2,r3,r2
 20149a8:	1001703a 	wrctl	status,r2
  
  return context;
 20149ac:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 20149b0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 20149b4:	e0bff917 	ldw	r2,-28(fp)
 20149b8:	10800b8b 	ldhu	r2,46(r2)
 20149bc:	10bfffcc 	andi	r2,r2,65535
 20149c0:	10003626 	beq	r2,zero,2014a9c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 20149c4:	e0bff917 	ldw	r2,-28(fp)
 20149c8:	10800b8b 	ldhu	r2,46(r2)
 20149cc:	10bfffc4 	addi	r2,r2,-1
 20149d0:	1007883a 	mov	r3,r2
 20149d4:	e0bff917 	ldw	r2,-28(fp)
 20149d8:	10c00b8d 	sth	r3,46(r2)
 20149dc:	e0bff917 	ldw	r2,-28(fp)
 20149e0:	10800b8b 	ldhu	r2,46(r2)
 20149e4:	10bfffcc 	andi	r2,r2,65535
 20149e8:	10002c1e 	bne	r2,zero,2014a9c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 20149ec:	e0bff917 	ldw	r2,-28(fp)
 20149f0:	10800c03 	ldbu	r2,48(r2)
 20149f4:	10803fcc 	andi	r2,r2,255
 20149f8:	10800dcc 	andi	r2,r2,55
 20149fc:	10000b26 	beq	r2,zero,2014a2c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2014a00:	e0bff917 	ldw	r2,-28(fp)
 2014a04:	10c00c03 	ldbu	r3,48(r2)
 2014a08:	00bff204 	movi	r2,-56
 2014a0c:	1884703a 	and	r2,r3,r2
 2014a10:	1007883a 	mov	r3,r2
 2014a14:	e0bff917 	ldw	r2,-28(fp)
 2014a18:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2014a1c:	e0bff917 	ldw	r2,-28(fp)
 2014a20:	00c00044 	movi	r3,1
 2014a24:	10c00c45 	stb	r3,49(r2)
 2014a28:	00000206 	br	2014a34 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2014a2c:	e0bff917 	ldw	r2,-28(fp)
 2014a30:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2014a34:	e0bff917 	ldw	r2,-28(fp)
 2014a38:	10800c03 	ldbu	r2,48(r2)
 2014a3c:	10803fcc 	andi	r2,r2,255
 2014a40:	1080020c 	andi	r2,r2,8
 2014a44:	1000151e 	bne	r2,zero,2014a9c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2014a48:	e0bff917 	ldw	r2,-28(fp)
 2014a4c:	10c00d83 	ldbu	r3,54(r2)
 2014a50:	d0a73e03 	ldbu	r2,-25352(gp)
 2014a54:	1884b03a 	or	r2,r3,r2
 2014a58:	d0a73e05 	stb	r2,-25352(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2014a5c:	e0bff917 	ldw	r2,-28(fp)
 2014a60:	10800d03 	ldbu	r2,52(r2)
 2014a64:	10c03fcc 	andi	r3,r2,255
 2014a68:	e0bff917 	ldw	r2,-28(fp)
 2014a6c:	10800d03 	ldbu	r2,52(r2)
 2014a70:	11003fcc 	andi	r4,r2,255
 2014a74:	d0a73e44 	addi	r2,gp,-25351
 2014a78:	2085883a 	add	r2,r4,r2
 2014a7c:	11000003 	ldbu	r4,0(r2)
 2014a80:	e0bff917 	ldw	r2,-28(fp)
 2014a84:	10800d43 	ldbu	r2,53(r2)
 2014a88:	2084b03a 	or	r2,r4,r2
 2014a8c:	1009883a 	mov	r4,r2
 2014a90:	d0a73e44 	addi	r2,gp,-25351
 2014a94:	1885883a 	add	r2,r3,r2
 2014a98:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2014a9c:	e0bff917 	ldw	r2,-28(fp)
 2014aa0:	10800517 	ldw	r2,20(r2)
 2014aa4:	e0bff915 	stw	r2,-28(fp)
 2014aa8:	e0bffb17 	ldw	r2,-20(fp)
 2014aac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014ab0:	e0bffe17 	ldw	r2,-8(fp)
 2014ab4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014ab8:	e0bff917 	ldw	r2,-28(fp)
 2014abc:	10800c83 	ldbu	r2,50(r2)
 2014ac0:	10803fcc 	andi	r2,r2,255
 2014ac4:	10800518 	cmpnei	r2,r2,20
 2014ac8:	103fb21e 	bne	r2,zero,2014994 <OSTimeTick+0xcc>
 2014acc:	00000106 	br	2014ad4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2014ad0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2014ad4:	e037883a 	mov	sp,fp
 2014ad8:	dfc00117 	ldw	ra,4(sp)
 2014adc:	df000017 	ldw	fp,0(sp)
 2014ae0:	dec00204 	addi	sp,sp,8
 2014ae4:	f800283a 	ret

02014ae8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2014ae8:	deffff04 	addi	sp,sp,-4
 2014aec:	df000015 	stw	fp,0(sp)
 2014af0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2014af4:	00804784 	movi	r2,286
}
 2014af8:	e037883a 	mov	sp,fp
 2014afc:	df000017 	ldw	fp,0(sp)
 2014b00:	dec00104 	addi	sp,sp,4
 2014b04:	f800283a 	ret

02014b08 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2014b08:	deffff04 	addi	sp,sp,-4
 2014b0c:	df000015 	stw	fp,0(sp)
 2014b10:	d839883a 	mov	fp,sp
}
 2014b14:	0001883a 	nop
 2014b18:	e037883a 	mov	sp,fp
 2014b1c:	df000017 	ldw	fp,0(sp)
 2014b20:	dec00104 	addi	sp,sp,4
 2014b24:	f800283a 	ret

02014b28 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2014b28:	defff804 	addi	sp,sp,-32
 2014b2c:	dfc00715 	stw	ra,28(sp)
 2014b30:	df000615 	stw	fp,24(sp)
 2014b34:	df000604 	addi	fp,sp,24
 2014b38:	e13ffc15 	stw	r4,-16(fp)
 2014b3c:	e17ffd15 	stw	r5,-12(fp)
 2014b40:	3007883a 	mov	r3,r6
 2014b44:	3805883a 	mov	r2,r7
 2014b48:	e0fffe05 	stb	r3,-8(fp)
 2014b4c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2014b50:	e0bffc17 	ldw	r2,-16(fp)
 2014b54:	10800283 	ldbu	r2,10(r2)
 2014b58:	10c03fcc 	andi	r3,r2,255
 2014b5c:	008080b4 	movhi	r2,514
 2014b60:	10ba9904 	addi	r2,r2,-5532
 2014b64:	10c5883a 	add	r2,r2,r3
 2014b68:	10800003 	ldbu	r2,0(r2)
 2014b6c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2014b70:	e0bffa03 	ldbu	r2,-24(fp)
 2014b74:	e0fffc17 	ldw	r3,-16(fp)
 2014b78:	1885883a 	add	r2,r3,r2
 2014b7c:	108002c4 	addi	r2,r2,11
 2014b80:	10800003 	ldbu	r2,0(r2)
 2014b84:	10c03fcc 	andi	r3,r2,255
 2014b88:	008080b4 	movhi	r2,514
 2014b8c:	10ba9904 	addi	r2,r2,-5532
 2014b90:	10c5883a 	add	r2,r2,r3
 2014b94:	10800003 	ldbu	r2,0(r2)
 2014b98:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2014b9c:	e0bffa03 	ldbu	r2,-24(fp)
 2014ba0:	100490fa 	slli	r2,r2,3
 2014ba4:	1007883a 	mov	r3,r2
 2014ba8:	e0bffa43 	ldbu	r2,-23(fp)
 2014bac:	1885883a 	add	r2,r3,r2
 2014bb0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2014bb4:	e0fffa83 	ldbu	r3,-22(fp)
 2014bb8:	008080f4 	movhi	r2,515
 2014bbc:	10ad6904 	addi	r2,r2,-19036
 2014bc0:	18c7883a 	add	r3,r3,r3
 2014bc4:	18c7883a 	add	r3,r3,r3
 2014bc8:	10c5883a 	add	r2,r2,r3
 2014bcc:	10800017 	ldw	r2,0(r2)
 2014bd0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2014bd4:	e0bffb17 	ldw	r2,-20(fp)
 2014bd8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2014bdc:	e0bffb17 	ldw	r2,-20(fp)
 2014be0:	e0fffd17 	ldw	r3,-12(fp)
 2014be4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2014be8:	e0bffb17 	ldw	r2,-20(fp)
 2014bec:	10800c03 	ldbu	r2,48(r2)
 2014bf0:	1007883a 	mov	r3,r2
 2014bf4:	e0bffe03 	ldbu	r2,-8(fp)
 2014bf8:	0084303a 	nor	r2,zero,r2
 2014bfc:	1884703a 	and	r2,r3,r2
 2014c00:	1007883a 	mov	r3,r2
 2014c04:	e0bffb17 	ldw	r2,-20(fp)
 2014c08:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2014c0c:	e0bffb17 	ldw	r2,-20(fp)
 2014c10:	e0ffff03 	ldbu	r3,-4(fp)
 2014c14:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2014c18:	e0bffb17 	ldw	r2,-20(fp)
 2014c1c:	10800c03 	ldbu	r2,48(r2)
 2014c20:	10803fcc 	andi	r2,r2,255
 2014c24:	1080020c 	andi	r2,r2,8
 2014c28:	1000111e 	bne	r2,zero,2014c70 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2014c2c:	e0bffb17 	ldw	r2,-20(fp)
 2014c30:	10c00d83 	ldbu	r3,54(r2)
 2014c34:	d0a73e03 	ldbu	r2,-25352(gp)
 2014c38:	1884b03a 	or	r2,r3,r2
 2014c3c:	d0a73e05 	stb	r2,-25352(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2014c40:	e0fffa03 	ldbu	r3,-24(fp)
 2014c44:	e13ffa03 	ldbu	r4,-24(fp)
 2014c48:	d0a73e44 	addi	r2,gp,-25351
 2014c4c:	2085883a 	add	r2,r4,r2
 2014c50:	11000003 	ldbu	r4,0(r2)
 2014c54:	e0bffb17 	ldw	r2,-20(fp)
 2014c58:	10800d43 	ldbu	r2,53(r2)
 2014c5c:	2084b03a 	or	r2,r4,r2
 2014c60:	1009883a 	mov	r4,r2
 2014c64:	d0a73e44 	addi	r2,gp,-25351
 2014c68:	1885883a 	add	r2,r3,r2
 2014c6c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2014c70:	e17ffc17 	ldw	r5,-16(fp)
 2014c74:	e13ffb17 	ldw	r4,-20(fp)
 2014c78:	2014f200 	call	2014f20 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2014c7c:	e0bffb17 	ldw	r2,-20(fp)
 2014c80:	10800817 	ldw	r2,32(r2)
 2014c84:	10000826 	beq	r2,zero,2014ca8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2014c88:	e0bffb17 	ldw	r2,-20(fp)
 2014c8c:	10800817 	ldw	r2,32(r2)
 2014c90:	100b883a 	mov	r5,r2
 2014c94:	e13ffb17 	ldw	r4,-20(fp)
 2014c98:	2014fd80 	call	2014fd8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2014c9c:	e0bffb17 	ldw	r2,-20(fp)
 2014ca0:	e0fffc17 	ldw	r3,-16(fp)
 2014ca4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2014ca8:	e0bffa83 	ldbu	r2,-22(fp)
}
 2014cac:	e037883a 	mov	sp,fp
 2014cb0:	dfc00117 	ldw	ra,4(sp)
 2014cb4:	df000017 	ldw	fp,0(sp)
 2014cb8:	dec00204 	addi	sp,sp,8
 2014cbc:	f800283a 	ret

02014cc0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2014cc0:	defffd04 	addi	sp,sp,-12
 2014cc4:	df000215 	stw	fp,8(sp)
 2014cc8:	df000204 	addi	fp,sp,8
 2014ccc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2014cd0:	d0a74117 	ldw	r2,-25340(gp)
 2014cd4:	e0ffff17 	ldw	r3,-4(fp)
 2014cd8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2014cdc:	d0a74117 	ldw	r2,-25340(gp)
 2014ce0:	10800d03 	ldbu	r2,52(r2)
 2014ce4:	10803fcc 	andi	r2,r2,255
 2014ce8:	d0e74117 	ldw	r3,-25340(gp)
 2014cec:	18c00d03 	ldbu	r3,52(r3)
 2014cf0:	18c03fcc 	andi	r3,r3,255
 2014cf4:	e13fff17 	ldw	r4,-4(fp)
 2014cf8:	20c7883a 	add	r3,r4,r3
 2014cfc:	18c002c4 	addi	r3,r3,11
 2014d00:	19000003 	ldbu	r4,0(r3)
 2014d04:	d0e74117 	ldw	r3,-25340(gp)
 2014d08:	18c00d43 	ldbu	r3,53(r3)
 2014d0c:	20c6b03a 	or	r3,r4,r3
 2014d10:	1809883a 	mov	r4,r3
 2014d14:	e0ffff17 	ldw	r3,-4(fp)
 2014d18:	1885883a 	add	r2,r3,r2
 2014d1c:	108002c4 	addi	r2,r2,11
 2014d20:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2014d24:	e0bfff17 	ldw	r2,-4(fp)
 2014d28:	10c00283 	ldbu	r3,10(r2)
 2014d2c:	d0a74117 	ldw	r2,-25340(gp)
 2014d30:	10800d83 	ldbu	r2,54(r2)
 2014d34:	1884b03a 	or	r2,r3,r2
 2014d38:	1007883a 	mov	r3,r2
 2014d3c:	e0bfff17 	ldw	r2,-4(fp)
 2014d40:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2014d44:	d0a74117 	ldw	r2,-25340(gp)
 2014d48:	10800d03 	ldbu	r2,52(r2)
 2014d4c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2014d50:	e0fffe03 	ldbu	r3,-8(fp)
 2014d54:	e13ffe03 	ldbu	r4,-8(fp)
 2014d58:	d0a73e44 	addi	r2,gp,-25351
 2014d5c:	2085883a 	add	r2,r4,r2
 2014d60:	10800003 	ldbu	r2,0(r2)
 2014d64:	1009883a 	mov	r4,r2
 2014d68:	d0a74117 	ldw	r2,-25340(gp)
 2014d6c:	10800d43 	ldbu	r2,53(r2)
 2014d70:	0084303a 	nor	r2,zero,r2
 2014d74:	2084703a 	and	r2,r4,r2
 2014d78:	1009883a 	mov	r4,r2
 2014d7c:	d0a73e44 	addi	r2,gp,-25351
 2014d80:	1885883a 	add	r2,r3,r2
 2014d84:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2014d88:	e0fffe03 	ldbu	r3,-8(fp)
 2014d8c:	d0a73e44 	addi	r2,gp,-25351
 2014d90:	1885883a 	add	r2,r3,r2
 2014d94:	10800003 	ldbu	r2,0(r2)
 2014d98:	10803fcc 	andi	r2,r2,255
 2014d9c:	1000071e 	bne	r2,zero,2014dbc <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2014da0:	d0a74117 	ldw	r2,-25340(gp)
 2014da4:	10800d83 	ldbu	r2,54(r2)
 2014da8:	0084303a 	nor	r2,zero,r2
 2014dac:	1007883a 	mov	r3,r2
 2014db0:	d0a73e03 	ldbu	r2,-25352(gp)
 2014db4:	1884703a 	and	r2,r3,r2
 2014db8:	d0a73e05 	stb	r2,-25352(gp)
    }
}
 2014dbc:	0001883a 	nop
 2014dc0:	e037883a 	mov	sp,fp
 2014dc4:	df000017 	ldw	fp,0(sp)
 2014dc8:	dec00104 	addi	sp,sp,4
 2014dcc:	f800283a 	ret

02014dd0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2014dd0:	defffb04 	addi	sp,sp,-20
 2014dd4:	df000415 	stw	fp,16(sp)
 2014dd8:	df000404 	addi	fp,sp,16
 2014ddc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2014de0:	d0a74117 	ldw	r2,-25340(gp)
 2014de4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2014de8:	d0a74117 	ldw	r2,-25340(gp)
 2014dec:	e0ffff17 	ldw	r3,-4(fp)
 2014df0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2014df4:	e0bfff17 	ldw	r2,-4(fp)
 2014df8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2014dfc:	e0bffc17 	ldw	r2,-16(fp)
 2014e00:	10800017 	ldw	r2,0(r2)
 2014e04:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2014e08:	00002006 	br	2014e8c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2014e0c:	d0a74117 	ldw	r2,-25340(gp)
 2014e10:	10800d03 	ldbu	r2,52(r2)
 2014e14:	10803fcc 	andi	r2,r2,255
 2014e18:	d0e74117 	ldw	r3,-25340(gp)
 2014e1c:	18c00d03 	ldbu	r3,52(r3)
 2014e20:	18c03fcc 	andi	r3,r3,255
 2014e24:	e13ffd17 	ldw	r4,-12(fp)
 2014e28:	20c7883a 	add	r3,r4,r3
 2014e2c:	18c002c4 	addi	r3,r3,11
 2014e30:	19000003 	ldbu	r4,0(r3)
 2014e34:	d0e74117 	ldw	r3,-25340(gp)
 2014e38:	18c00d43 	ldbu	r3,53(r3)
 2014e3c:	20c6b03a 	or	r3,r4,r3
 2014e40:	1809883a 	mov	r4,r3
 2014e44:	e0fffd17 	ldw	r3,-12(fp)
 2014e48:	1885883a 	add	r2,r3,r2
 2014e4c:	108002c4 	addi	r2,r2,11
 2014e50:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2014e54:	e0bffd17 	ldw	r2,-12(fp)
 2014e58:	10c00283 	ldbu	r3,10(r2)
 2014e5c:	d0a74117 	ldw	r2,-25340(gp)
 2014e60:	10800d83 	ldbu	r2,54(r2)
 2014e64:	1884b03a 	or	r2,r3,r2
 2014e68:	1007883a 	mov	r3,r2
 2014e6c:	e0bffd17 	ldw	r2,-12(fp)
 2014e70:	10c00285 	stb	r3,10(r2)
        pevents++;
 2014e74:	e0bffc17 	ldw	r2,-16(fp)
 2014e78:	10800104 	addi	r2,r2,4
 2014e7c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2014e80:	e0bffc17 	ldw	r2,-16(fp)
 2014e84:	10800017 	ldw	r2,0(r2)
 2014e88:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2014e8c:	e0bffd17 	ldw	r2,-12(fp)
 2014e90:	103fde1e 	bne	r2,zero,2014e0c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2014e94:	d0a74117 	ldw	r2,-25340(gp)
 2014e98:	10800d03 	ldbu	r2,52(r2)
 2014e9c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2014ea0:	e0fffe03 	ldbu	r3,-8(fp)
 2014ea4:	e13ffe03 	ldbu	r4,-8(fp)
 2014ea8:	d0a73e44 	addi	r2,gp,-25351
 2014eac:	2085883a 	add	r2,r4,r2
 2014eb0:	10800003 	ldbu	r2,0(r2)
 2014eb4:	1009883a 	mov	r4,r2
 2014eb8:	d0a74117 	ldw	r2,-25340(gp)
 2014ebc:	10800d43 	ldbu	r2,53(r2)
 2014ec0:	0084303a 	nor	r2,zero,r2
 2014ec4:	2084703a 	and	r2,r4,r2
 2014ec8:	1009883a 	mov	r4,r2
 2014ecc:	d0a73e44 	addi	r2,gp,-25351
 2014ed0:	1885883a 	add	r2,r3,r2
 2014ed4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2014ed8:	e0fffe03 	ldbu	r3,-8(fp)
 2014edc:	d0a73e44 	addi	r2,gp,-25351
 2014ee0:	1885883a 	add	r2,r3,r2
 2014ee4:	10800003 	ldbu	r2,0(r2)
 2014ee8:	10803fcc 	andi	r2,r2,255
 2014eec:	1000071e 	bne	r2,zero,2014f0c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2014ef0:	d0a74117 	ldw	r2,-25340(gp)
 2014ef4:	10800d83 	ldbu	r2,54(r2)
 2014ef8:	0084303a 	nor	r2,zero,r2
 2014efc:	1007883a 	mov	r3,r2
 2014f00:	d0a73e03 	ldbu	r2,-25352(gp)
 2014f04:	1884703a 	and	r2,r3,r2
 2014f08:	d0a73e05 	stb	r2,-25352(gp)
    }
}
 2014f0c:	0001883a 	nop
 2014f10:	e037883a 	mov	sp,fp
 2014f14:	df000017 	ldw	fp,0(sp)
 2014f18:	dec00104 	addi	sp,sp,4
 2014f1c:	f800283a 	ret

02014f20 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2014f20:	defffc04 	addi	sp,sp,-16
 2014f24:	df000315 	stw	fp,12(sp)
 2014f28:	df000304 	addi	fp,sp,12
 2014f2c:	e13ffe15 	stw	r4,-8(fp)
 2014f30:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2014f34:	e0bffe17 	ldw	r2,-8(fp)
 2014f38:	10800d03 	ldbu	r2,52(r2)
 2014f3c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2014f40:	e0bffd03 	ldbu	r2,-12(fp)
 2014f44:	e0fffd03 	ldbu	r3,-12(fp)
 2014f48:	e13fff17 	ldw	r4,-4(fp)
 2014f4c:	20c7883a 	add	r3,r4,r3
 2014f50:	18c002c4 	addi	r3,r3,11
 2014f54:	18c00003 	ldbu	r3,0(r3)
 2014f58:	1809883a 	mov	r4,r3
 2014f5c:	e0fffe17 	ldw	r3,-8(fp)
 2014f60:	18c00d43 	ldbu	r3,53(r3)
 2014f64:	00c6303a 	nor	r3,zero,r3
 2014f68:	20c6703a 	and	r3,r4,r3
 2014f6c:	1809883a 	mov	r4,r3
 2014f70:	e0ffff17 	ldw	r3,-4(fp)
 2014f74:	1885883a 	add	r2,r3,r2
 2014f78:	108002c4 	addi	r2,r2,11
 2014f7c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2014f80:	e0bffd03 	ldbu	r2,-12(fp)
 2014f84:	e0ffff17 	ldw	r3,-4(fp)
 2014f88:	1885883a 	add	r2,r3,r2
 2014f8c:	108002c4 	addi	r2,r2,11
 2014f90:	10800003 	ldbu	r2,0(r2)
 2014f94:	10803fcc 	andi	r2,r2,255
 2014f98:	10000a1e 	bne	r2,zero,2014fc4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2014f9c:	e0bfff17 	ldw	r2,-4(fp)
 2014fa0:	10800283 	ldbu	r2,10(r2)
 2014fa4:	1007883a 	mov	r3,r2
 2014fa8:	e0bffe17 	ldw	r2,-8(fp)
 2014fac:	10800d83 	ldbu	r2,54(r2)
 2014fb0:	0084303a 	nor	r2,zero,r2
 2014fb4:	1884703a 	and	r2,r3,r2
 2014fb8:	1007883a 	mov	r3,r2
 2014fbc:	e0bfff17 	ldw	r2,-4(fp)
 2014fc0:	10c00285 	stb	r3,10(r2)
    }
}
 2014fc4:	0001883a 	nop
 2014fc8:	e037883a 	mov	sp,fp
 2014fcc:	df000017 	ldw	fp,0(sp)
 2014fd0:	dec00104 	addi	sp,sp,4
 2014fd4:	f800283a 	ret

02014fd8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2014fd8:	defffa04 	addi	sp,sp,-24
 2014fdc:	df000515 	stw	fp,20(sp)
 2014fe0:	df000504 	addi	fp,sp,20
 2014fe4:	e13ffe15 	stw	r4,-8(fp)
 2014fe8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2014fec:	e0bffe17 	ldw	r2,-8(fp)
 2014ff0:	10800d03 	ldbu	r2,52(r2)
 2014ff4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2014ff8:	e0bffe17 	ldw	r2,-8(fp)
 2014ffc:	10800d83 	ldbu	r2,54(r2)
 2015000:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2015004:	e0bffe17 	ldw	r2,-8(fp)
 2015008:	10800d43 	ldbu	r2,53(r2)
 201500c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2015010:	e0bfff17 	ldw	r2,-4(fp)
 2015014:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2015018:	e0bffb17 	ldw	r2,-20(fp)
 201501c:	10800017 	ldw	r2,0(r2)
 2015020:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2015024:	00002506 	br	20150bc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2015028:	e0bffd03 	ldbu	r2,-12(fp)
 201502c:	e0fffd03 	ldbu	r3,-12(fp)
 2015030:	e13ffc17 	ldw	r4,-16(fp)
 2015034:	20c7883a 	add	r3,r4,r3
 2015038:	18c002c4 	addi	r3,r3,11
 201503c:	18c00003 	ldbu	r3,0(r3)
 2015040:	1809883a 	mov	r4,r3
 2015044:	e0fffd83 	ldbu	r3,-10(fp)
 2015048:	00c6303a 	nor	r3,zero,r3
 201504c:	20c6703a 	and	r3,r4,r3
 2015050:	1809883a 	mov	r4,r3
 2015054:	e0fffc17 	ldw	r3,-16(fp)
 2015058:	1885883a 	add	r2,r3,r2
 201505c:	108002c4 	addi	r2,r2,11
 2015060:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2015064:	e0bffd03 	ldbu	r2,-12(fp)
 2015068:	e0fffc17 	ldw	r3,-16(fp)
 201506c:	1885883a 	add	r2,r3,r2
 2015070:	108002c4 	addi	r2,r2,11
 2015074:	10800003 	ldbu	r2,0(r2)
 2015078:	10803fcc 	andi	r2,r2,255
 201507c:	1000091e 	bne	r2,zero,20150a4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2015080:	e0bffc17 	ldw	r2,-16(fp)
 2015084:	10800283 	ldbu	r2,10(r2)
 2015088:	1007883a 	mov	r3,r2
 201508c:	e0bffd43 	ldbu	r2,-11(fp)
 2015090:	0084303a 	nor	r2,zero,r2
 2015094:	1884703a 	and	r2,r3,r2
 2015098:	1007883a 	mov	r3,r2
 201509c:	e0bffc17 	ldw	r2,-16(fp)
 20150a0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20150a4:	e0bffb17 	ldw	r2,-20(fp)
 20150a8:	10800104 	addi	r2,r2,4
 20150ac:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20150b0:	e0bffb17 	ldw	r2,-20(fp)
 20150b4:	10800017 	ldw	r2,0(r2)
 20150b8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20150bc:	e0bffc17 	ldw	r2,-16(fp)
 20150c0:	103fd91e 	bne	r2,zero,2015028 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20150c4:	0001883a 	nop
 20150c8:	e037883a 	mov	sp,fp
 20150cc:	df000017 	ldw	fp,0(sp)
 20150d0:	dec00104 	addi	sp,sp,4
 20150d4:	f800283a 	ret

020150d8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20150d8:	defffc04 	addi	sp,sp,-16
 20150dc:	df000315 	stw	fp,12(sp)
 20150e0:	df000304 	addi	fp,sp,12
 20150e4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 20150e8:	e0bfff17 	ldw	r2,-4(fp)
 20150ec:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 20150f0:	e0bfff17 	ldw	r2,-4(fp)
 20150f4:	108002c4 	addi	r2,r2,11
 20150f8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20150fc:	e03ffe05 	stb	zero,-8(fp)
 2015100:	00000706 	br	2015120 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2015104:	e0bffd17 	ldw	r2,-12(fp)
 2015108:	10c00044 	addi	r3,r2,1
 201510c:	e0fffd15 	stw	r3,-12(fp)
 2015110:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015114:	e0bffe03 	ldbu	r2,-8(fp)
 2015118:	10800044 	addi	r2,r2,1
 201511c:	e0bffe05 	stb	r2,-8(fp)
 2015120:	e0bffe03 	ldbu	r2,-8(fp)
 2015124:	108000f0 	cmpltui	r2,r2,3
 2015128:	103ff61e 	bne	r2,zero,2015104 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 201512c:	0001883a 	nop
 2015130:	e037883a 	mov	sp,fp
 2015134:	df000017 	ldw	fp,0(sp)
 2015138:	dec00104 	addi	sp,sp,4
 201513c:	f800283a 	ret

02015140 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2015140:	defffb04 	addi	sp,sp,-20
 2015144:	dfc00415 	stw	ra,16(sp)
 2015148:	df000315 	stw	fp,12(sp)
 201514c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2015150:	0142d004 	movi	r5,2880
 2015154:	010080f4 	movhi	r4,515
 2015158:	21295504 	addi	r4,r4,-23212
 201515c:	20154b80 	call	20154b8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2015160:	008080f4 	movhi	r2,515
 2015164:	10a95504 	addi	r2,r2,-23212
 2015168:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 201516c:	008080f4 	movhi	r2,515
 2015170:	10a96104 	addi	r2,r2,-23164
 2015174:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2015178:	e03ffd0d 	sth	zero,-12(fp)
 201517c:	00001306 	br	20151cc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015180:	e0bffe17 	ldw	r2,-8(fp)
 2015184:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2015188:	e0bffe17 	ldw	r2,-8(fp)
 201518c:	e0ffff17 	ldw	r3,-4(fp)
 2015190:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 2015194:	e0bffe17 	ldw	r2,-8(fp)
 2015198:	00c00fc4 	movi	r3,63
 201519c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20151a0:	e0bffe17 	ldw	r2,-8(fp)
 20151a4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20151a8:	e0bffe17 	ldw	r2,-8(fp)
 20151ac:	10800c04 	addi	r2,r2,48
 20151b0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20151b4:	e0bfff17 	ldw	r2,-4(fp)
 20151b8:	10800c04 	addi	r2,r2,48
 20151bc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20151c0:	e0bffd0b 	ldhu	r2,-12(fp)
 20151c4:	10800044 	addi	r2,r2,1
 20151c8:	e0bffd0d 	sth	r2,-12(fp)
 20151cc:	e0bffd0b 	ldhu	r2,-12(fp)
 20151d0:	10800ef0 	cmpltui	r2,r2,59
 20151d4:	103fea1e 	bne	r2,zero,2015180 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20151d8:	e0bffe17 	ldw	r2,-8(fp)
 20151dc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20151e0:	e0bffe17 	ldw	r2,-8(fp)
 20151e4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 20151e8:	e0bffe17 	ldw	r2,-8(fp)
 20151ec:	00c00fc4 	movi	r3,63
 20151f0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 20151f4:	e0bffe17 	ldw	r2,-8(fp)
 20151f8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 20151fc:	008080f4 	movhi	r2,515
 2015200:	10a95504 	addi	r2,r2,-23212
 2015204:	d0a73f15 	stw	r2,-25348(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2015208:	0001883a 	nop
 201520c:	e037883a 	mov	sp,fp
 2015210:	dfc00117 	ldw	ra,4(sp)
 2015214:	df000017 	ldw	fp,0(sp)
 2015218:	dec00204 	addi	sp,sp,8
 201521c:	f800283a 	ret

02015220 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2015220:	deffff04 	addi	sp,sp,-4
 2015224:	df000015 	stw	fp,0(sp)
 2015228:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 201522c:	d0274215 	stw	zero,-25336(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2015230:	d0274005 	stb	zero,-25344(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2015234:	d0273205 	stb	zero,-25400(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2015238:	d0273a45 	stb	zero,-25367(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 201523c:	d0273245 	stb	zero,-25399(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2015240:	d0273715 	stw	zero,-25380(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2015244:	d0273315 	stw	zero,-25396(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2015248:	d0274515 	stw	zero,-25324(gp)
    OSIdleCtrMax  = 0L;
 201524c:	d0273815 	stw	zero,-25376(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2015250:	d0274405 	stb	zero,-25328(gp)
#endif
}
 2015254:	0001883a 	nop
 2015258:	e037883a 	mov	sp,fp
 201525c:	df000017 	ldw	fp,0(sp)
 2015260:	dec00104 	addi	sp,sp,4
 2015264:	f800283a 	ret

02015268 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2015268:	defffd04 	addi	sp,sp,-12
 201526c:	df000215 	stw	fp,8(sp)
 2015270:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2015274:	d0273e05 	stb	zero,-25352(gp)
    prdytbl       = &OSRdyTbl[0];
 2015278:	d0a73e44 	addi	r2,gp,-25351
 201527c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2015280:	e03ffe05 	stb	zero,-8(fp)
 2015284:	00000706 	br	20152a4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2015288:	e0bfff17 	ldw	r2,-4(fp)
 201528c:	10c00044 	addi	r3,r2,1
 2015290:	e0ffff15 	stw	r3,-4(fp)
 2015294:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2015298:	e0bffe03 	ldbu	r2,-8(fp)
 201529c:	10800044 	addi	r2,r2,1
 20152a0:	e0bffe05 	stb	r2,-8(fp)
 20152a4:	e0bffe03 	ldbu	r2,-8(fp)
 20152a8:	108000f0 	cmpltui	r2,r2,3
 20152ac:	103ff61e 	bne	r2,zero,2015288 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20152b0:	d0273445 	stb	zero,-25391(gp)
    OSPrioHighRdy = 0;
 20152b4:	d0273405 	stb	zero,-25392(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20152b8:	d0273c15 	stw	zero,-25360(gp)
    OSTCBCur      = (OS_TCB *)0;
 20152bc:	d0274115 	stw	zero,-25340(gp)
}
 20152c0:	0001883a 	nop
 20152c4:	e037883a 	mov	sp,fp
 20152c8:	df000017 	ldw	fp,0(sp)
 20152cc:	dec00104 	addi	sp,sp,4
 20152d0:	f800283a 	ret

020152d4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20152d4:	defff804 	addi	sp,sp,-32
 20152d8:	dfc00715 	stw	ra,28(sp)
 20152dc:	df000615 	stw	fp,24(sp)
 20152e0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 20152e4:	008000c4 	movi	r2,3
 20152e8:	d8800415 	stw	r2,16(sp)
 20152ec:	d8000315 	stw	zero,12(sp)
 20152f0:	00808004 	movi	r2,512
 20152f4:	d8800215 	stw	r2,8(sp)
 20152f8:	008080f4 	movhi	r2,515
 20152fc:	10a75504 	addi	r2,r2,-25260
 2015300:	d8800115 	stw	r2,4(sp)
 2015304:	00bfffd4 	movui	r2,65535
 2015308:	d8800015 	stw	r2,0(sp)
 201530c:	01c00504 	movi	r7,20
 2015310:	018080f4 	movhi	r6,515
 2015314:	31a95404 	addi	r6,r6,-23216
 2015318:	000b883a 	mov	r5,zero
 201531c:	01008074 	movhi	r4,513
 2015320:	2115e004 	addi	r4,r4,22400
 2015324:	201a9080 	call	201a908 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2015328:	e1bfff04 	addi	r6,fp,-4
 201532c:	014080b4 	movhi	r5,514
 2015330:	297ad904 	addi	r5,r5,-5276
 2015334:	01000504 	movi	r4,20
 2015338:	201b1180 	call	201b118 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 201533c:	0001883a 	nop
 2015340:	e037883a 	mov	sp,fp
 2015344:	dfc00117 	ldw	ra,4(sp)
 2015348:	df000017 	ldw	fp,0(sp)
 201534c:	dec00204 	addi	sp,sp,8
 2015350:	f800283a 	ret

02015354 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2015354:	defff804 	addi	sp,sp,-32
 2015358:	dfc00715 	stw	ra,28(sp)
 201535c:	df000615 	stw	fp,24(sp)
 2015360:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2015364:	008000c4 	movi	r2,3
 2015368:	d8800415 	stw	r2,16(sp)
 201536c:	d8000315 	stw	zero,12(sp)
 2015370:	00808004 	movi	r2,512
 2015374:	d8800215 	stw	r2,8(sp)
 2015378:	008080f4 	movhi	r2,515
 201537c:	10a4dd04 	addi	r2,r2,-27788
 2015380:	d8800115 	stw	r2,4(sp)
 2015384:	00bfff94 	movui	r2,65534
 2015388:	d8800015 	stw	r2,0(sp)
 201538c:	01c004c4 	movi	r7,19
 2015390:	018080f4 	movhi	r6,515
 2015394:	31a6dc04 	addi	r6,r6,-25744
 2015398:	000b883a 	mov	r5,zero
 201539c:	01008074 	movhi	r4,513
 20153a0:	2115f704 	addi	r4,r4,22492
 20153a4:	201a9080 	call	201a908 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20153a8:	e1bfff04 	addi	r6,fp,-4
 20153ac:	014080b4 	movhi	r5,514
 20153b0:	297add04 	addi	r5,r5,-5260
 20153b4:	010004c4 	movi	r4,19
 20153b8:	201b1180 	call	201b118 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20153bc:	0001883a 	nop
 20153c0:	e037883a 	mov	sp,fp
 20153c4:	dfc00117 	ldw	ra,4(sp)
 20153c8:	df000017 	ldw	fp,0(sp)
 20153cc:	dec00204 	addi	sp,sp,8
 20153d0:	f800283a 	ret

020153d4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20153d4:	defffb04 	addi	sp,sp,-20
 20153d8:	dfc00415 	stw	ra,16(sp)
 20153dc:	df000315 	stw	fp,12(sp)
 20153e0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20153e4:	01414404 	movi	r5,1296
 20153e8:	010080f4 	movhi	r4,515
 20153ec:	212c2504 	addi	r4,r4,-20332
 20153f0:	20154b80 	call	20154b8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 20153f4:	01401504 	movi	r5,84
 20153f8:	010080f4 	movhi	r4,515
 20153fc:	212d6904 	addi	r4,r4,-19036
 2015400:	20154b80 	call	20154b8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2015404:	008080f4 	movhi	r2,515
 2015408:	10ac2504 	addi	r2,r2,-20332
 201540c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2015410:	008080f4 	movhi	r2,515
 2015414:	10ac4004 	addi	r2,r2,-20224
 2015418:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 201541c:	e03ffd05 	stb	zero,-12(fp)
 2015420:	00001106 	br	2015468 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2015424:	e0bffe17 	ldw	r2,-8(fp)
 2015428:	e0ffff17 	ldw	r3,-4(fp)
 201542c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2015430:	e0bffe17 	ldw	r2,-8(fp)
 2015434:	00c00fc4 	movi	r3,63
 2015438:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 201543c:	e0bffe17 	ldw	r2,-8(fp)
 2015440:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2015444:	e0bffe17 	ldw	r2,-8(fp)
 2015448:	10801b04 	addi	r2,r2,108
 201544c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2015450:	e0bfff17 	ldw	r2,-4(fp)
 2015454:	10801b04 	addi	r2,r2,108
 2015458:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 201545c:	e0bffd03 	ldbu	r2,-12(fp)
 2015460:	10800044 	addi	r2,r2,1
 2015464:	e0bffd05 	stb	r2,-12(fp)
 2015468:	e0bffd03 	ldbu	r2,-12(fp)
 201546c:	108002f0 	cmpltui	r2,r2,11
 2015470:	103fec1e 	bne	r2,zero,2015424 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2015474:	e0bffe17 	ldw	r2,-8(fp)
 2015478:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 201547c:	e0bffe17 	ldw	r2,-8(fp)
 2015480:	00c00fc4 	movi	r3,63
 2015484:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015488:	e0bffe17 	ldw	r2,-8(fp)
 201548c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2015490:	d0273515 	stw	zero,-25388(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2015494:	008080f4 	movhi	r2,515
 2015498:	10ac2504 	addi	r2,r2,-20332
 201549c:	d0a73915 	stw	r2,-25372(gp)
}
 20154a0:	0001883a 	nop
 20154a4:	e037883a 	mov	sp,fp
 20154a8:	dfc00117 	ldw	ra,4(sp)
 20154ac:	df000017 	ldw	fp,0(sp)
 20154b0:	dec00204 	addi	sp,sp,8
 20154b4:	f800283a 	ret

020154b8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20154b8:	defffd04 	addi	sp,sp,-12
 20154bc:	df000215 	stw	fp,8(sp)
 20154c0:	df000204 	addi	fp,sp,8
 20154c4:	e13ffe15 	stw	r4,-8(fp)
 20154c8:	2805883a 	mov	r2,r5
 20154cc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20154d0:	00000706 	br	20154f0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20154d4:	e0bffe17 	ldw	r2,-8(fp)
 20154d8:	10c00044 	addi	r3,r2,1
 20154dc:	e0fffe15 	stw	r3,-8(fp)
 20154e0:	10000005 	stb	zero,0(r2)
        size--;
 20154e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20154e8:	10bfffc4 	addi	r2,r2,-1
 20154ec:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 20154f0:	e0bfff0b 	ldhu	r2,-4(fp)
 20154f4:	103ff71e 	bne	r2,zero,20154d4 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 20154f8:	0001883a 	nop
 20154fc:	e037883a 	mov	sp,fp
 2015500:	df000017 	ldw	fp,0(sp)
 2015504:	dec00104 	addi	sp,sp,4
 2015508:	f800283a 	ret

0201550c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 201550c:	defffc04 	addi	sp,sp,-16
 2015510:	df000315 	stw	fp,12(sp)
 2015514:	df000304 	addi	fp,sp,12
 2015518:	e13ffd15 	stw	r4,-12(fp)
 201551c:	e17ffe15 	stw	r5,-8(fp)
 2015520:	3005883a 	mov	r2,r6
 2015524:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2015528:	00000b06 	br	2015558 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 201552c:	e0bffd17 	ldw	r2,-12(fp)
 2015530:	10c00044 	addi	r3,r2,1
 2015534:	e0fffd15 	stw	r3,-12(fp)
 2015538:	e0fffe17 	ldw	r3,-8(fp)
 201553c:	19000044 	addi	r4,r3,1
 2015540:	e13ffe15 	stw	r4,-8(fp)
 2015544:	18c00003 	ldbu	r3,0(r3)
 2015548:	10c00005 	stb	r3,0(r2)
        size--;
 201554c:	e0bfff0b 	ldhu	r2,-4(fp)
 2015550:	10bfffc4 	addi	r2,r2,-1
 2015554:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2015558:	e0bfff0b 	ldhu	r2,-4(fp)
 201555c:	103ff31e 	bne	r2,zero,201552c <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2015560:	0001883a 	nop
 2015564:	e037883a 	mov	sp,fp
 2015568:	df000017 	ldw	fp,0(sp)
 201556c:	dec00104 	addi	sp,sp,4
 2015570:	f800283a 	ret

02015574 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2015574:	defffb04 	addi	sp,sp,-20
 2015578:	dfc00415 	stw	ra,16(sp)
 201557c:	df000315 	stw	fp,12(sp)
 2015580:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2015584:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015588:	0005303a 	rdctl	r2,status
 201558c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015590:	e0ffff17 	ldw	r3,-4(fp)
 2015594:	00bfff84 	movi	r2,-2
 2015598:	1884703a 	and	r2,r3,r2
 201559c:	1001703a 	wrctl	status,r2
  
  return context;
 20155a0:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 20155a4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 20155a8:	d0a74003 	ldbu	r2,-25344(gp)
 20155ac:	10803fcc 	andi	r2,r2,255
 20155b0:	10001a1e 	bne	r2,zero,201561c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 20155b4:	d0a73203 	ldbu	r2,-25400(gp)
 20155b8:	10803fcc 	andi	r2,r2,255
 20155bc:	1000171e 	bne	r2,zero,201561c <OS_Sched+0xa8>
            OS_SchedNew();
 20155c0:	20156440 	call	2015644 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 20155c4:	d0e73403 	ldbu	r3,-25392(gp)
 20155c8:	d0a73443 	ldbu	r2,-25391(gp)
 20155cc:	18c03fcc 	andi	r3,r3,255
 20155d0:	10803fcc 	andi	r2,r2,255
 20155d4:	18801126 	beq	r3,r2,201561c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 20155d8:	d0a73403 	ldbu	r2,-25392(gp)
 20155dc:	10c03fcc 	andi	r3,r2,255
 20155e0:	008080f4 	movhi	r2,515
 20155e4:	10ad6904 	addi	r2,r2,-19036
 20155e8:	18c7883a 	add	r3,r3,r3
 20155ec:	18c7883a 	add	r3,r3,r3
 20155f0:	10c5883a 	add	r2,r2,r3
 20155f4:	10800017 	ldw	r2,0(r2)
 20155f8:	d0a73c15 	stw	r2,-25360(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 20155fc:	d0a73c17 	ldw	r2,-25360(gp)
 2015600:	10c00e17 	ldw	r3,56(r2)
 2015604:	18c00044 	addi	r3,r3,1
 2015608:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 201560c:	d0a73717 	ldw	r2,-25380(gp)
 2015610:	10800044 	addi	r2,r2,1
 2015614:	d0a73715 	stw	r2,-25380(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2015618:	201d8f00 	call	201d8f0 <OSCtxSw>
 201561c:	e0bffd17 	ldw	r2,-12(fp)
 2015620:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015624:	e0bffe17 	ldw	r2,-8(fp)
 2015628:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 201562c:	0001883a 	nop
 2015630:	e037883a 	mov	sp,fp
 2015634:	dfc00117 	ldw	ra,4(sp)
 2015638:	df000017 	ldw	fp,0(sp)
 201563c:	dec00204 	addi	sp,sp,8
 2015640:	f800283a 	ret

02015644 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2015644:	defffe04 	addi	sp,sp,-8
 2015648:	df000115 	stw	fp,4(sp)
 201564c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2015650:	d0a73e03 	ldbu	r2,-25352(gp)
 2015654:	10c03fcc 	andi	r3,r2,255
 2015658:	008080b4 	movhi	r2,514
 201565c:	10ba9904 	addi	r2,r2,-5532
 2015660:	10c5883a 	add	r2,r2,r3
 2015664:	10800003 	ldbu	r2,0(r2)
 2015668:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 201566c:	e0bfff03 	ldbu	r2,-4(fp)
 2015670:	100490fa 	slli	r2,r2,3
 2015674:	1009883a 	mov	r4,r2
 2015678:	e0ffff03 	ldbu	r3,-4(fp)
 201567c:	d0a73e44 	addi	r2,gp,-25351
 2015680:	1885883a 	add	r2,r3,r2
 2015684:	10800003 	ldbu	r2,0(r2)
 2015688:	10c03fcc 	andi	r3,r2,255
 201568c:	008080b4 	movhi	r2,514
 2015690:	10ba9904 	addi	r2,r2,-5532
 2015694:	10c5883a 	add	r2,r2,r3
 2015698:	10800003 	ldbu	r2,0(r2)
 201569c:	2085883a 	add	r2,r4,r2
 20156a0:	d0a73405 	stb	r2,-25392(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 20156a4:	0001883a 	nop
 20156a8:	e037883a 	mov	sp,fp
 20156ac:	df000017 	ldw	fp,0(sp)
 20156b0:	dec00104 	addi	sp,sp,4
 20156b4:	f800283a 	ret

020156b8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20156b8:	defffc04 	addi	sp,sp,-16
 20156bc:	df000315 	stw	fp,12(sp)
 20156c0:	df000304 	addi	fp,sp,12
 20156c4:	e13ffe15 	stw	r4,-8(fp)
 20156c8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20156cc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20156d0:	00000b06 	br	2015700 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 20156d4:	e0bffe17 	ldw	r2,-8(fp)
 20156d8:	10c00044 	addi	r3,r2,1
 20156dc:	e0fffe15 	stw	r3,-8(fp)
 20156e0:	e0ffff17 	ldw	r3,-4(fp)
 20156e4:	19000044 	addi	r4,r3,1
 20156e8:	e13fff15 	stw	r4,-4(fp)
 20156ec:	18c00003 	ldbu	r3,0(r3)
 20156f0:	10c00005 	stb	r3,0(r2)
        len++;
 20156f4:	e0bffd03 	ldbu	r2,-12(fp)
 20156f8:	10800044 	addi	r2,r2,1
 20156fc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2015700:	e0bfff17 	ldw	r2,-4(fp)
 2015704:	10800003 	ldbu	r2,0(r2)
 2015708:	10803fcc 	andi	r2,r2,255
 201570c:	103ff11e 	bne	r2,zero,20156d4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2015710:	e0bffe17 	ldw	r2,-8(fp)
 2015714:	10000005 	stb	zero,0(r2)
    return (len);
 2015718:	e0bffd03 	ldbu	r2,-12(fp)
}
 201571c:	e037883a 	mov	sp,fp
 2015720:	df000017 	ldw	fp,0(sp)
 2015724:	dec00104 	addi	sp,sp,4
 2015728:	f800283a 	ret

0201572c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 201572c:	defffd04 	addi	sp,sp,-12
 2015730:	df000215 	stw	fp,8(sp)
 2015734:	df000204 	addi	fp,sp,8
 2015738:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 201573c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2015740:	00000606 	br	201575c <OS_StrLen+0x30>
        psrc++;
 2015744:	e0bfff17 	ldw	r2,-4(fp)
 2015748:	10800044 	addi	r2,r2,1
 201574c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2015750:	e0bffe03 	ldbu	r2,-8(fp)
 2015754:	10800044 	addi	r2,r2,1
 2015758:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 201575c:	e0bfff17 	ldw	r2,-4(fp)
 2015760:	10800003 	ldbu	r2,0(r2)
 2015764:	10803fcc 	andi	r2,r2,255
 2015768:	103ff61e 	bne	r2,zero,2015744 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 201576c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2015770:	e037883a 	mov	sp,fp
 2015774:	df000017 	ldw	fp,0(sp)
 2015778:	dec00104 	addi	sp,sp,4
 201577c:	f800283a 	ret

02015780 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2015780:	defffa04 	addi	sp,sp,-24
 2015784:	dfc00515 	stw	ra,20(sp)
 2015788:	df000415 	stw	fp,16(sp)
 201578c:	df000404 	addi	fp,sp,16
 2015790:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015794:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015798:	0005303a 	rdctl	r2,status
 201579c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20157a0:	e0fffd17 	ldw	r3,-12(fp)
 20157a4:	00bfff84 	movi	r2,-2
 20157a8:	1884703a 	and	r2,r3,r2
 20157ac:	1001703a 	wrctl	status,r2
  
  return context;
 20157b0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20157b4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 20157b8:	d0a73317 	ldw	r2,-25396(gp)
 20157bc:	10800044 	addi	r2,r2,1
 20157c0:	d0a73315 	stw	r2,-25396(gp)
 20157c4:	e0bffc17 	ldw	r2,-16(fp)
 20157c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20157cc:	e0bffe17 	ldw	r2,-8(fp)
 20157d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20157d4:	201dc040 	call	201dc04 <OSTaskIdleHook>
    }
 20157d8:	003fef06 	br	2015798 <OS_TaskIdle+0x18>

020157dc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20157dc:	defffa04 	addi	sp,sp,-24
 20157e0:	dfc00515 	stw	ra,20(sp)
 20157e4:	df000415 	stw	fp,16(sp)
 20157e8:	df000404 	addi	fp,sp,16
 20157ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20157f0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20157f4:	00000206 	br	2015800 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 20157f8:	01003204 	movi	r4,200
 20157fc:	201b9d80 	call	201b9d8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2015800:	d0a74403 	ldbu	r2,-25328(gp)
 2015804:	10803fcc 	andi	r2,r2,255
 2015808:	103ffb26 	beq	r2,zero,20157f8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 201580c:	d0a73817 	ldw	r2,-25376(gp)
 2015810:	01401904 	movi	r5,100
 2015814:	1009883a 	mov	r4,r2
 2015818:	20048900 	call	2004890 <__udivsi3>
 201581c:	d0a73815 	stw	r2,-25376(gp)
    if (OSIdleCtrMax == 0L) {
 2015820:	d0a73817 	ldw	r2,-25376(gp)
 2015824:	1000031e 	bne	r2,zero,2015834 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2015828:	d0273a05 	stb	zero,-25368(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 201582c:	01003fc4 	movi	r4,255
 2015830:	201b6600 	call	201b660 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015834:	0005303a 	rdctl	r2,status
 2015838:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201583c:	e0fffd17 	ldw	r3,-12(fp)
 2015840:	00bfff84 	movi	r2,-2
 2015844:	1884703a 	and	r2,r3,r2
 2015848:	1001703a 	wrctl	status,r2
  
  return context;
 201584c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2015850:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2015854:	d0a73317 	ldw	r2,-25396(gp)
 2015858:	d0a74515 	stw	r2,-25324(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 201585c:	d0273315 	stw	zero,-25396(gp)
 2015860:	e0bffc17 	ldw	r2,-16(fp)
 2015864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015868:	e0bffe17 	ldw	r2,-8(fp)
 201586c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2015870:	d0a74517 	ldw	r2,-25324(gp)
 2015874:	d0e73817 	ldw	r3,-25376(gp)
 2015878:	180b883a 	mov	r5,r3
 201587c:	1009883a 	mov	r4,r2
 2015880:	20048900 	call	2004890 <__udivsi3>
 2015884:	1007883a 	mov	r3,r2
 2015888:	00801904 	movi	r2,100
 201588c:	10c5c83a 	sub	r2,r2,r3
 2015890:	d0a73a05 	stb	r2,-25368(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2015894:	201db840 	call	201db84 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2015898:	20158a80 	call	20158a8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 201589c:	01001904 	movi	r4,100
 20158a0:	201b9d80 	call	201b9d8 <OSTimeDly>
    }
 20158a4:	003fe306 	br	2015834 <OS_TaskStat+0x58>

020158a8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 20158a8:	defffa04 	addi	sp,sp,-24
 20158ac:	dfc00515 	stw	ra,20(sp)
 20158b0:	df000415 	stw	fp,16(sp)
 20158b4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20158b8:	e03ffc05 	stb	zero,-16(fp)
 20158bc:	00002406 	br	2015950 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20158c0:	e0bffc03 	ldbu	r2,-16(fp)
 20158c4:	e0fffe04 	addi	r3,fp,-8
 20158c8:	180b883a 	mov	r5,r3
 20158cc:	1009883a 	mov	r4,r2
 20158d0:	201b4a00 	call	201b4a0 <OSTaskStkChk>
 20158d4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20158d8:	e0bffc43 	ldbu	r2,-15(fp)
 20158dc:	1000191e 	bne	r2,zero,2015944 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20158e0:	e0fffc03 	ldbu	r3,-16(fp)
 20158e4:	008080f4 	movhi	r2,515
 20158e8:	10ad6904 	addi	r2,r2,-19036
 20158ec:	18c7883a 	add	r3,r3,r3
 20158f0:	18c7883a 	add	r3,r3,r3
 20158f4:	10c5883a 	add	r2,r2,r3
 20158f8:	10800017 	ldw	r2,0(r2)
 20158fc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2015900:	e0bffd17 	ldw	r2,-12(fp)
 2015904:	10000f26 	beq	r2,zero,2015944 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2015908:	e0bffd17 	ldw	r2,-12(fp)
 201590c:	10800060 	cmpeqi	r2,r2,1
 2015910:	10000c1e 	bne	r2,zero,2015944 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2015914:	e0bffd17 	ldw	r2,-12(fp)
 2015918:	10c00217 	ldw	r3,8(r2)
 201591c:	e0bffd17 	ldw	r2,-12(fp)
 2015920:	10800317 	ldw	r2,12(r2)
 2015924:	1085883a 	add	r2,r2,r2
 2015928:	1085883a 	add	r2,r2,r2
 201592c:	1887883a 	add	r3,r3,r2
 2015930:	e0bffd17 	ldw	r2,-12(fp)
 2015934:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2015938:	e0ffff17 	ldw	r3,-4(fp)
 201593c:	e0bffd17 	ldw	r2,-12(fp)
 2015940:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2015944:	e0bffc03 	ldbu	r2,-16(fp)
 2015948:	10800044 	addi	r2,r2,1
 201594c:	e0bffc05 	stb	r2,-16(fp)
 2015950:	e0bffc03 	ldbu	r2,-16(fp)
 2015954:	10800570 	cmpltui	r2,r2,21
 2015958:	103fd91e 	bne	r2,zero,20158c0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 201595c:	0001883a 	nop
 2015960:	e037883a 	mov	sp,fp
 2015964:	dfc00117 	ldw	ra,4(sp)
 2015968:	df000017 	ldw	fp,0(sp)
 201596c:	dec00204 	addi	sp,sp,8
 2015970:	f800283a 	ret

02015974 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2015974:	defff204 	addi	sp,sp,-56
 2015978:	dfc00d15 	stw	ra,52(sp)
 201597c:	df000c15 	stw	fp,48(sp)
 2015980:	df000c04 	addi	fp,sp,48
 2015984:	e17ffc15 	stw	r5,-16(fp)
 2015988:	e1bffd15 	stw	r6,-12(fp)
 201598c:	3807883a 	mov	r3,r7
 2015990:	e0800417 	ldw	r2,16(fp)
 2015994:	e13ffb05 	stb	r4,-20(fp)
 2015998:	e0fffe0d 	sth	r3,-8(fp)
 201599c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20159a0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159a4:	0005303a 	rdctl	r2,status
 20159a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159ac:	e0fffa17 	ldw	r3,-24(fp)
 20159b0:	00bfff84 	movi	r2,-2
 20159b4:	1884703a 	and	r2,r3,r2
 20159b8:	1001703a 	wrctl	status,r2
  
  return context;
 20159bc:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 20159c0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20159c4:	d0a73917 	ldw	r2,-25372(gp)
 20159c8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 20159cc:	e0bff617 	ldw	r2,-40(fp)
 20159d0:	10009326 	beq	r2,zero,2015c20 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 20159d4:	e0bff617 	ldw	r2,-40(fp)
 20159d8:	10800517 	ldw	r2,20(r2)
 20159dc:	d0a73915 	stw	r2,-25372(gp)
 20159e0:	e0bff417 	ldw	r2,-48(fp)
 20159e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159e8:	e0bff817 	ldw	r2,-32(fp)
 20159ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 20159f0:	e0bff617 	ldw	r2,-40(fp)
 20159f4:	e0fffc17 	ldw	r3,-16(fp)
 20159f8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 20159fc:	e0bff617 	ldw	r2,-40(fp)
 2015a00:	e0fffb03 	ldbu	r3,-20(fp)
 2015a04:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2015a08:	e0bff617 	ldw	r2,-40(fp)
 2015a0c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2015a10:	e0bff617 	ldw	r2,-40(fp)
 2015a14:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2015a18:	e0bff617 	ldw	r2,-40(fp)
 2015a1c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2015a20:	e0bff617 	ldw	r2,-40(fp)
 2015a24:	e0c00317 	ldw	r3,12(fp)
 2015a28:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2015a2c:	e0bff617 	ldw	r2,-40(fp)
 2015a30:	e0c00217 	ldw	r3,8(fp)
 2015a34:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2015a38:	e0bff617 	ldw	r2,-40(fp)
 2015a3c:	e0fffd17 	ldw	r3,-12(fp)
 2015a40:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2015a44:	e0bff617 	ldw	r2,-40(fp)
 2015a48:	e0ffff0b 	ldhu	r3,-4(fp)
 2015a4c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2015a50:	e0bff617 	ldw	r2,-40(fp)
 2015a54:	e0fffe0b 	ldhu	r3,-8(fp)
 2015a58:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2015a5c:	e0bff617 	ldw	r2,-40(fp)
 2015a60:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2015a64:	e0bffb03 	ldbu	r2,-20(fp)
 2015a68:	1004d0fa 	srli	r2,r2,3
 2015a6c:	1007883a 	mov	r3,r2
 2015a70:	e0bff617 	ldw	r2,-40(fp)
 2015a74:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2015a78:	e0bffb03 	ldbu	r2,-20(fp)
 2015a7c:	108001cc 	andi	r2,r2,7
 2015a80:	1007883a 	mov	r3,r2
 2015a84:	e0bff617 	ldw	r2,-40(fp)
 2015a88:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2015a8c:	e0bff617 	ldw	r2,-40(fp)
 2015a90:	10800d03 	ldbu	r2,52(r2)
 2015a94:	10803fcc 	andi	r2,r2,255
 2015a98:	00c00044 	movi	r3,1
 2015a9c:	1884983a 	sll	r2,r3,r2
 2015aa0:	1007883a 	mov	r3,r2
 2015aa4:	e0bff617 	ldw	r2,-40(fp)
 2015aa8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2015aac:	e0bff617 	ldw	r2,-40(fp)
 2015ab0:	10800cc3 	ldbu	r2,51(r2)
 2015ab4:	10803fcc 	andi	r2,r2,255
 2015ab8:	00c00044 	movi	r3,1
 2015abc:	1884983a 	sll	r2,r3,r2
 2015ac0:	1007883a 	mov	r3,r2
 2015ac4:	e0bff617 	ldw	r2,-40(fp)
 2015ac8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2015acc:	e0bff617 	ldw	r2,-40(fp)
 2015ad0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2015ad4:	e0bff617 	ldw	r2,-40(fp)
 2015ad8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2015adc:	e0bff617 	ldw	r2,-40(fp)
 2015ae0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2015ae4:	e0bff617 	ldw	r2,-40(fp)
 2015ae8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2015aec:	e0bff617 	ldw	r2,-40(fp)
 2015af0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2015af4:	e0bff617 	ldw	r2,-40(fp)
 2015af8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2015afc:	e0bff617 	ldw	r2,-40(fp)
 2015b00:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2015b04:	e0bff617 	ldw	r2,-40(fp)
 2015b08:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2015b0c:	e0bff617 	ldw	r2,-40(fp)
 2015b10:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2015b14:	e0bff617 	ldw	r2,-40(fp)
 2015b18:	00c00fc4 	movi	r3,63
 2015b1c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015b20:	e0bff617 	ldw	r2,-40(fp)
 2015b24:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2015b28:	e13ff617 	ldw	r4,-40(fp)
 2015b2c:	201dc240 	call	201dc24 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2015b30:	e13ff617 	ldw	r4,-40(fp)
 2015b34:	201db1c0 	call	201db1c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015b38:	0005303a 	rdctl	r2,status
 2015b3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015b40:	e0fff517 	ldw	r3,-44(fp)
 2015b44:	00bfff84 	movi	r2,-2
 2015b48:	1884703a 	and	r2,r3,r2
 2015b4c:	1001703a 	wrctl	status,r2
  
  return context;
 2015b50:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2015b54:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2015b58:	e0fffb03 	ldbu	r3,-20(fp)
 2015b5c:	008080f4 	movhi	r2,515
 2015b60:	10ad6904 	addi	r2,r2,-19036
 2015b64:	18c7883a 	add	r3,r3,r3
 2015b68:	18c7883a 	add	r3,r3,r3
 2015b6c:	10c5883a 	add	r2,r2,r3
 2015b70:	e0fff617 	ldw	r3,-40(fp)
 2015b74:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2015b78:	d0e73517 	ldw	r3,-25388(gp)
 2015b7c:	e0bff617 	ldw	r2,-40(fp)
 2015b80:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2015b84:	e0bff617 	ldw	r2,-40(fp)
 2015b88:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2015b8c:	d0a73517 	ldw	r2,-25388(gp)
 2015b90:	10000326 	beq	r2,zero,2015ba0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2015b94:	d0a73517 	ldw	r2,-25388(gp)
 2015b98:	e0fff617 	ldw	r3,-40(fp)
 2015b9c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2015ba0:	e0bff617 	ldw	r2,-40(fp)
 2015ba4:	d0a73515 	stw	r2,-25388(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2015ba8:	e0bff617 	ldw	r2,-40(fp)
 2015bac:	10c00d83 	ldbu	r3,54(r2)
 2015bb0:	d0a73e03 	ldbu	r2,-25352(gp)
 2015bb4:	1884b03a 	or	r2,r3,r2
 2015bb8:	d0a73e05 	stb	r2,-25352(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2015bbc:	e0bff617 	ldw	r2,-40(fp)
 2015bc0:	10800d03 	ldbu	r2,52(r2)
 2015bc4:	10c03fcc 	andi	r3,r2,255
 2015bc8:	e0bff617 	ldw	r2,-40(fp)
 2015bcc:	10800d03 	ldbu	r2,52(r2)
 2015bd0:	11003fcc 	andi	r4,r2,255
 2015bd4:	d0a73e44 	addi	r2,gp,-25351
 2015bd8:	2085883a 	add	r2,r4,r2
 2015bdc:	11000003 	ldbu	r4,0(r2)
 2015be0:	e0bff617 	ldw	r2,-40(fp)
 2015be4:	10800d43 	ldbu	r2,53(r2)
 2015be8:	2084b03a 	or	r2,r4,r2
 2015bec:	1009883a 	mov	r4,r2
 2015bf0:	d0a73e44 	addi	r2,gp,-25351
 2015bf4:	1885883a 	add	r2,r3,r2
 2015bf8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2015bfc:	d0a73a43 	ldbu	r2,-25367(gp)
 2015c00:	10800044 	addi	r2,r2,1
 2015c04:	d0a73a45 	stb	r2,-25367(gp)
 2015c08:	e0bff417 	ldw	r2,-48(fp)
 2015c0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c10:	e0bff717 	ldw	r2,-36(fp)
 2015c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2015c18:	0005883a 	mov	r2,zero
 2015c1c:	00000506 	br	2015c34 <OS_TCBInit+0x2c0>
 2015c20:	e0bff417 	ldw	r2,-48(fp)
 2015c24:	e0bff915 	stw	r2,-28(fp)
 2015c28:	e0bff917 	ldw	r2,-28(fp)
 2015c2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2015c30:	00801084 	movi	r2,66
}
 2015c34:	e037883a 	mov	sp,fp
 2015c38:	dfc00117 	ldw	ra,4(sp)
 2015c3c:	df000017 	ldw	fp,0(sp)
 2015c40:	dec00204 	addi	sp,sp,8
 2015c44:	f800283a 	ret

02015c48 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2015c48:	defffe04 	addi	sp,sp,-8
 2015c4c:	df000115 	stw	fp,4(sp)
 2015c50:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2015c54:	d0a00f04 	addi	r2,gp,-32708
 2015c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2015c5c:	d0a01004 	addi	r2,gp,-32704
 2015c60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2015c64:	d0a01184 	addi	r2,gp,-32698
 2015c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2015c6c:	d0a01204 	addi	r2,gp,-32696
 2015c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2015c74:	d0a01104 	addi	r2,gp,-32700
 2015c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2015c7c:	d0a01284 	addi	r2,gp,-32694
 2015c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2015c84:	d0a01304 	addi	r2,gp,-32692
 2015c88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2015c8c:	d0a01384 	addi	r2,gp,-32690
 2015c90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2015c94:	d0a01404 	addi	r2,gp,-32688
 2015c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2015c9c:	d0a01484 	addi	r2,gp,-32686
 2015ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2015ca4:	d0a01504 	addi	r2,gp,-32684
 2015ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2015cac:	d0a01584 	addi	r2,gp,-32682
 2015cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2015cb4:	d0a01604 	addi	r2,gp,-32680
 2015cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2015cbc:	d0a01684 	addi	r2,gp,-32678
 2015cc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2015cc4:	d0a01704 	addi	r2,gp,-32676
 2015cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2015ccc:	d0a01784 	addi	r2,gp,-32674
 2015cd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2015cd4:	d0a01804 	addi	r2,gp,-32672
 2015cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2015cdc:	d0a01884 	addi	r2,gp,-32670
 2015ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2015ce4:	d0a01904 	addi	r2,gp,-32668
 2015ce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2015cec:	d0a01984 	addi	r2,gp,-32666
 2015cf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2015cf4:	d0a01a04 	addi	r2,gp,-32664
 2015cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2015cfc:	d0a01a84 	addi	r2,gp,-32662
 2015d00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2015d04:	d0a01b04 	addi	r2,gp,-32660
 2015d08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2015d0c:	d0a01b84 	addi	r2,gp,-32658
 2015d10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2015d14:	d0a01c04 	addi	r2,gp,-32656
 2015d18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2015d1c:	d0a01c84 	addi	r2,gp,-32654
 2015d20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2015d24:	d0a01d04 	addi	r2,gp,-32652
 2015d28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2015d2c:	d0a01d84 	addi	r2,gp,-32650
 2015d30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2015d34:	d0a01e04 	addi	r2,gp,-32648
 2015d38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2015d3c:	d0a01e84 	addi	r2,gp,-32646
 2015d40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2015d44:	d0a01f04 	addi	r2,gp,-32644
 2015d48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2015d4c:	d0a01f84 	addi	r2,gp,-32642
 2015d50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2015d54:	d0a02004 	addi	r2,gp,-32640
 2015d58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2015d5c:	d0a02084 	addi	r2,gp,-32638
 2015d60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2015d64:	d0a02104 	addi	r2,gp,-32636
 2015d68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2015d6c:	d0a02184 	addi	r2,gp,-32634
 2015d70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2015d74:	d0a02204 	addi	r2,gp,-32632
 2015d78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2015d7c:	d0a02284 	addi	r2,gp,-32630
 2015d80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2015d84:	d0a02304 	addi	r2,gp,-32628
 2015d88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2015d8c:	d0a02384 	addi	r2,gp,-32626
 2015d90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2015d94:	d0a02404 	addi	r2,gp,-32624
 2015d98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2015d9c:	d0a02484 	addi	r2,gp,-32622
 2015da0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2015da4:	d0a02504 	addi	r2,gp,-32620
 2015da8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2015dac:	d0a02584 	addi	r2,gp,-32618
 2015db0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2015db4:	d0a02604 	addi	r2,gp,-32616
 2015db8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2015dbc:	d0a02b04 	addi	r2,gp,-32596
 2015dc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2015dc4:	0001883a 	nop
 2015dc8:	e037883a 	mov	sp,fp
 2015dcc:	df000017 	ldw	fp,0(sp)
 2015dd0:	dec00104 	addi	sp,sp,4
 2015dd4:	f800283a 	ret

02015dd8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2015dd8:	defff204 	addi	sp,sp,-56
 2015ddc:	df000d15 	stw	fp,52(sp)
 2015de0:	df000d04 	addi	fp,sp,52
 2015de4:	e13ffc15 	stw	r4,-16(fp)
 2015de8:	2807883a 	mov	r3,r5
 2015dec:	3005883a 	mov	r2,r6
 2015df0:	e1ffff15 	stw	r7,-4(fp)
 2015df4:	e0fffd0d 	sth	r3,-12(fp)
 2015df8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2015dfc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2015e00:	e0bfff17 	ldw	r2,-4(fp)
 2015e04:	1000021e 	bne	r2,zero,2015e10 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2015e08:	0005883a 	mov	r2,zero
 2015e0c:	0000b006 	br	20160d0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2015e10:	e0bffc17 	ldw	r2,-16(fp)
 2015e14:	1000051e 	bne	r2,zero,2015e2c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2015e18:	e0bfff17 	ldw	r2,-4(fp)
 2015e1c:	00c01b84 	movi	r3,110
 2015e20:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2015e24:	0005883a 	mov	r2,zero
 2015e28:	0000a906 	br	20160d0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2015e2c:	e0bffc17 	ldw	r2,-16(fp)
 2015e30:	10800003 	ldbu	r2,0(r2)
 2015e34:	10803fcc 	andi	r2,r2,255
 2015e38:	10800160 	cmpeqi	r2,r2,5
 2015e3c:	1000051e 	bne	r2,zero,2015e54 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2015e40:	e0bfff17 	ldw	r2,-4(fp)
 2015e44:	00c00044 	movi	r3,1
 2015e48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2015e4c:	0005883a 	mov	r2,zero
 2015e50:	00009f06 	br	20160d0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2015e54:	e0fffe03 	ldbu	r3,-8(fp)
 2015e58:	00bfe004 	movi	r2,-128
 2015e5c:	1884703a 	and	r2,r3,r2
 2015e60:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2015e64:	e0bff503 	ldbu	r2,-44(fp)
 2015e68:	10000626 	beq	r2,zero,2015e84 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2015e6c:	e0bffe03 	ldbu	r2,-8(fp)
 2015e70:	10801fcc 	andi	r2,r2,127
 2015e74:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2015e78:	00800044 	movi	r2,1
 2015e7c:	e0bff385 	stb	r2,-50(fp)
 2015e80:	00000106 	br	2015e88 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2015e84:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2015e88:	e0bfff17 	ldw	r2,-4(fp)
 2015e8c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015e90:	0005303a 	rdctl	r2,status
 2015e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015e98:	e0fffb17 	ldw	r3,-20(fp)
 2015e9c:	00bfff84 	movi	r2,-2
 2015ea0:	1884703a 	and	r2,r3,r2
 2015ea4:	1001703a 	wrctl	status,r2
  
  return context;
 2015ea8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2015eac:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2015eb0:	e0bffe03 	ldbu	r2,-8(fp)
 2015eb4:	10c00060 	cmpeqi	r3,r2,1
 2015eb8:	18005f1e 	bne	r3,zero,2016038 <OSFlagAccept+0x260>
 2015ebc:	10c00088 	cmpgei	r3,r2,2
 2015ec0:	1800021e 	bne	r3,zero,2015ecc <OSFlagAccept+0xf4>
 2015ec4:	10003f26 	beq	r2,zero,2015fc4 <OSFlagAccept+0x1ec>
 2015ec8:	00007706 	br	20160a8 <OSFlagAccept+0x2d0>
 2015ecc:	10c000a0 	cmpeqi	r3,r2,2
 2015ed0:	1800031e 	bne	r3,zero,2015ee0 <OSFlagAccept+0x108>
 2015ed4:	108000e0 	cmpeqi	r2,r2,3
 2015ed8:	10001e1e 	bne	r2,zero,2015f54 <OSFlagAccept+0x17c>
 2015edc:	00007206 	br	20160a8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2015ee0:	e0bffc17 	ldw	r2,-16(fp)
 2015ee4:	10c0020b 	ldhu	r3,8(r2)
 2015ee8:	e0bffd0b 	ldhu	r2,-12(fp)
 2015eec:	1884703a 	and	r2,r3,r2
 2015ef0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2015ef4:	e0fff30b 	ldhu	r3,-52(fp)
 2015ef8:	e0bffd0b 	ldhu	r2,-12(fp)
 2015efc:	18800d1e 	bne	r3,r2,2015f34 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2015f00:	e0bff383 	ldbu	r2,-50(fp)
 2015f04:	10800058 	cmpnei	r2,r2,1
 2015f08:	10000d1e 	bne	r2,zero,2015f40 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2015f0c:	e0bffc17 	ldw	r2,-16(fp)
 2015f10:	1080020b 	ldhu	r2,8(r2)
 2015f14:	1007883a 	mov	r3,r2
 2015f18:	e0bff30b 	ldhu	r2,-52(fp)
 2015f1c:	0084303a 	nor	r2,zero,r2
 2015f20:	1884703a 	and	r2,r3,r2
 2015f24:	1007883a 	mov	r3,r2
 2015f28:	e0bffc17 	ldw	r2,-16(fp)
 2015f2c:	10c0020d 	sth	r3,8(r2)
 2015f30:	00000306 	br	2015f40 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2015f34:	e0bfff17 	ldw	r2,-4(fp)
 2015f38:	00c01c04 	movi	r3,112
 2015f3c:	10c00005 	stb	r3,0(r2)
 2015f40:	e0bff417 	ldw	r2,-48(fp)
 2015f44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f48:	e0bff617 	ldw	r2,-40(fp)
 2015f4c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2015f50:	00005e06 	br	20160cc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2015f54:	e0bffc17 	ldw	r2,-16(fp)
 2015f58:	10c0020b 	ldhu	r3,8(r2)
 2015f5c:	e0bffd0b 	ldhu	r2,-12(fp)
 2015f60:	1884703a 	and	r2,r3,r2
 2015f64:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2015f68:	e0bff30b 	ldhu	r2,-52(fp)
 2015f6c:	10000d26 	beq	r2,zero,2015fa4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2015f70:	e0bff383 	ldbu	r2,-50(fp)
 2015f74:	10800058 	cmpnei	r2,r2,1
 2015f78:	10000d1e 	bne	r2,zero,2015fb0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2015f7c:	e0bffc17 	ldw	r2,-16(fp)
 2015f80:	1080020b 	ldhu	r2,8(r2)
 2015f84:	1007883a 	mov	r3,r2
 2015f88:	e0bff30b 	ldhu	r2,-52(fp)
 2015f8c:	0084303a 	nor	r2,zero,r2
 2015f90:	1884703a 	and	r2,r3,r2
 2015f94:	1007883a 	mov	r3,r2
 2015f98:	e0bffc17 	ldw	r2,-16(fp)
 2015f9c:	10c0020d 	sth	r3,8(r2)
 2015fa0:	00000306 	br	2015fb0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2015fa4:	e0bfff17 	ldw	r2,-4(fp)
 2015fa8:	00c01c04 	movi	r3,112
 2015fac:	10c00005 	stb	r3,0(r2)
 2015fb0:	e0bff417 	ldw	r2,-48(fp)
 2015fb4:	e0bff715 	stw	r2,-36(fp)
 2015fb8:	e0bff717 	ldw	r2,-36(fp)
 2015fbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2015fc0:	00004206 	br	20160cc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2015fc4:	e0bffc17 	ldw	r2,-16(fp)
 2015fc8:	1080020b 	ldhu	r2,8(r2)
 2015fcc:	0084303a 	nor	r2,zero,r2
 2015fd0:	1007883a 	mov	r3,r2
 2015fd4:	e0bffd0b 	ldhu	r2,-12(fp)
 2015fd8:	1884703a 	and	r2,r3,r2
 2015fdc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2015fe0:	e0fff30b 	ldhu	r3,-52(fp)
 2015fe4:	e0bffd0b 	ldhu	r2,-12(fp)
 2015fe8:	18800b1e 	bne	r3,r2,2016018 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2015fec:	e0bff383 	ldbu	r2,-50(fp)
 2015ff0:	10800058 	cmpnei	r2,r2,1
 2015ff4:	10000b1e 	bne	r2,zero,2016024 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2015ff8:	e0bffc17 	ldw	r2,-16(fp)
 2015ffc:	10c0020b 	ldhu	r3,8(r2)
 2016000:	e0bff30b 	ldhu	r2,-52(fp)
 2016004:	1884b03a 	or	r2,r3,r2
 2016008:	1007883a 	mov	r3,r2
 201600c:	e0bffc17 	ldw	r2,-16(fp)
 2016010:	10c0020d 	sth	r3,8(r2)
 2016014:	00000306 	br	2016024 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016018:	e0bfff17 	ldw	r2,-4(fp)
 201601c:	00c01c04 	movi	r3,112
 2016020:	10c00005 	stb	r3,0(r2)
 2016024:	e0bff417 	ldw	r2,-48(fp)
 2016028:	e0bff815 	stw	r2,-32(fp)
 201602c:	e0bff817 	ldw	r2,-32(fp)
 2016030:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016034:	00002506 	br	20160cc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016038:	e0bffc17 	ldw	r2,-16(fp)
 201603c:	1080020b 	ldhu	r2,8(r2)
 2016040:	0084303a 	nor	r2,zero,r2
 2016044:	1007883a 	mov	r3,r2
 2016048:	e0bffd0b 	ldhu	r2,-12(fp)
 201604c:	1884703a 	and	r2,r3,r2
 2016050:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016054:	e0bff30b 	ldhu	r2,-52(fp)
 2016058:	10000b26 	beq	r2,zero,2016088 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201605c:	e0bff383 	ldbu	r2,-50(fp)
 2016060:	10800058 	cmpnei	r2,r2,1
 2016064:	10000b1e 	bne	r2,zero,2016094 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016068:	e0bffc17 	ldw	r2,-16(fp)
 201606c:	10c0020b 	ldhu	r3,8(r2)
 2016070:	e0bff30b 	ldhu	r2,-52(fp)
 2016074:	1884b03a 	or	r2,r3,r2
 2016078:	1007883a 	mov	r3,r2
 201607c:	e0bffc17 	ldw	r2,-16(fp)
 2016080:	10c0020d 	sth	r3,8(r2)
 2016084:	00000306 	br	2016094 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016088:	e0bfff17 	ldw	r2,-4(fp)
 201608c:	00c01c04 	movi	r3,112
 2016090:	10c00005 	stb	r3,0(r2)
 2016094:	e0bff417 	ldw	r2,-48(fp)
 2016098:	e0bff915 	stw	r2,-28(fp)
 201609c:	e0bff917 	ldw	r2,-28(fp)
 20160a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20160a4:	00000906 	br	20160cc <OSFlagAccept+0x2f4>
 20160a8:	e0bff417 	ldw	r2,-48(fp)
 20160ac:	e0bffa15 	stw	r2,-24(fp)
 20160b0:	e0bffa17 	ldw	r2,-24(fp)
 20160b4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20160b8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20160bc:	e0bfff17 	ldw	r2,-4(fp)
 20160c0:	00c01bc4 	movi	r3,111
 20160c4:	10c00005 	stb	r3,0(r2)
             break;
 20160c8:	0001883a 	nop
    }
    return (flags_rdy);
 20160cc:	e0bff30b 	ldhu	r2,-52(fp)
}
 20160d0:	e037883a 	mov	sp,fp
 20160d4:	df000017 	ldw	fp,0(sp)
 20160d8:	dec00104 	addi	sp,sp,4
 20160dc:	f800283a 	ret

020160e0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20160e0:	defff804 	addi	sp,sp,-32
 20160e4:	df000715 	stw	fp,28(sp)
 20160e8:	df000704 	addi	fp,sp,28
 20160ec:	2005883a 	mov	r2,r4
 20160f0:	e17fff15 	stw	r5,-4(fp)
 20160f4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 20160f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 20160fc:	e0bfff17 	ldw	r2,-4(fp)
 2016100:	1000021e 	bne	r2,zero,201610c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2016104:	0005883a 	mov	r2,zero
 2016108:	00003306 	br	20161d8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 201610c:	d0a74003 	ldbu	r2,-25344(gp)
 2016110:	10803fcc 	andi	r2,r2,255
 2016114:	10000526 	beq	r2,zero,201612c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2016118:	e0bfff17 	ldw	r2,-4(fp)
 201611c:	00c00404 	movi	r3,16
 2016120:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2016124:	0005883a 	mov	r2,zero
 2016128:	00002b06 	br	20161d8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201612c:	0005303a 	rdctl	r2,status
 2016130:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016134:	e0fffd17 	ldw	r3,-12(fp)
 2016138:	00bfff84 	movi	r2,-2
 201613c:	1884703a 	and	r2,r3,r2
 2016140:	1001703a 	wrctl	status,r2
  
  return context;
 2016144:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2016148:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 201614c:	d0a74317 	ldw	r2,-25332(gp)
 2016150:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2016154:	e0bffb17 	ldw	r2,-20(fp)
 2016158:	10001726 	beq	r2,zero,20161b8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 201615c:	d0a74317 	ldw	r2,-25332(gp)
 2016160:	10800117 	ldw	r2,4(r2)
 2016164:	d0a74315 	stw	r2,-25332(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2016168:	e0bffb17 	ldw	r2,-20(fp)
 201616c:	00c00144 	movi	r3,5
 2016170:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2016174:	e0bffb17 	ldw	r2,-20(fp)
 2016178:	e0fffe0b 	ldhu	r3,-8(fp)
 201617c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2016180:	e0bffb17 	ldw	r2,-20(fp)
 2016184:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2016188:	e0bffb17 	ldw	r2,-20(fp)
 201618c:	00c00fc4 	movi	r3,63
 2016190:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2016194:	e0bffb17 	ldw	r2,-20(fp)
 2016198:	100002c5 	stb	zero,11(r2)
 201619c:	e0bff917 	ldw	r2,-28(fp)
 20161a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20161a4:	e0bffa17 	ldw	r2,-24(fp)
 20161a8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20161ac:	e0bfff17 	ldw	r2,-4(fp)
 20161b0:	10000005 	stb	zero,0(r2)
 20161b4:	00000706 	br	20161d4 <OSFlagCreate+0xf4>
 20161b8:	e0bff917 	ldw	r2,-28(fp)
 20161bc:	e0bffc15 	stw	r2,-16(fp)
 20161c0:	e0bffc17 	ldw	r2,-16(fp)
 20161c4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20161c8:	e0bfff17 	ldw	r2,-4(fp)
 20161cc:	00c01c84 	movi	r3,114
 20161d0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20161d4:	e0bffb17 	ldw	r2,-20(fp)
}
 20161d8:	e037883a 	mov	sp,fp
 20161dc:	df000017 	ldw	fp,0(sp)
 20161e0:	dec00104 	addi	sp,sp,4
 20161e4:	f800283a 	ret

020161e8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 20161e8:	defff204 	addi	sp,sp,-56
 20161ec:	dfc00d15 	stw	ra,52(sp)
 20161f0:	df000c15 	stw	fp,48(sp)
 20161f4:	df000c04 	addi	fp,sp,48
 20161f8:	e13ffd15 	stw	r4,-12(fp)
 20161fc:	2805883a 	mov	r2,r5
 2016200:	e1bfff15 	stw	r6,-4(fp)
 2016204:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016208:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201620c:	e0bfff17 	ldw	r2,-4(fp)
 2016210:	1000021e 	bne	r2,zero,201621c <OSFlagDel+0x34>
        return (pgrp);
 2016214:	e0bffd17 	ldw	r2,-12(fp)
 2016218:	00008006 	br	201641c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201621c:	e0bffd17 	ldw	r2,-12(fp)
 2016220:	1000051e 	bne	r2,zero,2016238 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016224:	e0bfff17 	ldw	r2,-4(fp)
 2016228:	00c01b84 	movi	r3,110
 201622c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016230:	e0bffd17 	ldw	r2,-12(fp)
 2016234:	00007906 	br	201641c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016238:	d0a74003 	ldbu	r2,-25344(gp)
 201623c:	10803fcc 	andi	r2,r2,255
 2016240:	10000526 	beq	r2,zero,2016258 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2016244:	e0bfff17 	ldw	r2,-4(fp)
 2016248:	00c003c4 	movi	r3,15
 201624c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016250:	e0bffd17 	ldw	r2,-12(fp)
 2016254:	00007106 	br	201641c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2016258:	e0bffd17 	ldw	r2,-12(fp)
 201625c:	10800003 	ldbu	r2,0(r2)
 2016260:	10803fcc 	andi	r2,r2,255
 2016264:	10800160 	cmpeqi	r2,r2,5
 2016268:	1000051e 	bne	r2,zero,2016280 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 201626c:	e0bfff17 	ldw	r2,-4(fp)
 2016270:	00c00044 	movi	r3,1
 2016274:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2016278:	e0bffd17 	ldw	r2,-12(fp)
 201627c:	00006706 	br	201641c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016280:	0005303a 	rdctl	r2,status
 2016284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016288:	e0fffc17 	ldw	r3,-16(fp)
 201628c:	00bfff84 	movi	r2,-2
 2016290:	1884703a 	and	r2,r3,r2
 2016294:	1001703a 	wrctl	status,r2
  
  return context;
 2016298:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201629c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20162a0:	e0bffd17 	ldw	r2,-12(fp)
 20162a4:	10800117 	ldw	r2,4(r2)
 20162a8:	10000326 	beq	r2,zero,20162b8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20162ac:	00800044 	movi	r2,1
 20162b0:	e0bff405 	stb	r2,-48(fp)
 20162b4:	00000106 	br	20162bc <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20162b8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20162bc:	e0bffe03 	ldbu	r2,-8(fp)
 20162c0:	10000326 	beq	r2,zero,20162d0 <OSFlagDel+0xe8>
 20162c4:	10800060 	cmpeqi	r2,r2,1
 20162c8:	1000231e 	bne	r2,zero,2016358 <OSFlagDel+0x170>
 20162cc:	00004806 	br	20163f0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20162d0:	e0bff403 	ldbu	r2,-48(fp)
 20162d4:	1000161e 	bne	r2,zero,2016330 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20162d8:	e0bffd17 	ldw	r2,-12(fp)
 20162dc:	00c00fc4 	movi	r3,63
 20162e0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20162e4:	e0bffd17 	ldw	r2,-12(fp)
 20162e8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20162ec:	e0bffd17 	ldw	r2,-12(fp)
 20162f0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 20162f4:	d0e74317 	ldw	r3,-25332(gp)
 20162f8:	e0bffd17 	ldw	r2,-12(fp)
 20162fc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2016300:	e0bffd17 	ldw	r2,-12(fp)
 2016304:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2016308:	e0bffd17 	ldw	r2,-12(fp)
 201630c:	d0a74315 	stw	r2,-25332(gp)
 2016310:	e0bff717 	ldw	r2,-36(fp)
 2016314:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016318:	e0bff817 	ldw	r2,-32(fp)
 201631c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2016320:	e0bfff17 	ldw	r2,-4(fp)
 2016324:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2016328:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 201632c:	00003a06 	br	2016418 <OSFlagDel+0x230>
 2016330:	e0bff717 	ldw	r2,-36(fp)
 2016334:	e0bff915 	stw	r2,-28(fp)
 2016338:	e0bff917 	ldw	r2,-28(fp)
 201633c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2016340:	e0bfff17 	ldw	r2,-4(fp)
 2016344:	00c01244 	movi	r3,73
 2016348:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 201634c:	e0bffd17 	ldw	r2,-12(fp)
 2016350:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2016354:	00003006 	br	2016418 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2016358:	e0bffd17 	ldw	r2,-12(fp)
 201635c:	10800117 	ldw	r2,4(r2)
 2016360:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2016364:	00000606 	br	2016380 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2016368:	000b883a 	mov	r5,zero
 201636c:	e13ff517 	ldw	r4,-44(fp)
 2016370:	20173540 	call	2017354 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2016374:	e0bff517 	ldw	r2,-44(fp)
 2016378:	10800017 	ldw	r2,0(r2)
 201637c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2016380:	e0bff517 	ldw	r2,-44(fp)
 2016384:	103ff81e 	bne	r2,zero,2016368 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2016388:	e0bffd17 	ldw	r2,-12(fp)
 201638c:	00c00fc4 	movi	r3,63
 2016390:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2016394:	e0bffd17 	ldw	r2,-12(fp)
 2016398:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201639c:	e0bffd17 	ldw	r2,-12(fp)
 20163a0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 20163a4:	d0e74317 	ldw	r3,-25332(gp)
 20163a8:	e0bffd17 	ldw	r2,-12(fp)
 20163ac:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20163b0:	e0bffd17 	ldw	r2,-12(fp)
 20163b4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20163b8:	e0bffd17 	ldw	r2,-12(fp)
 20163bc:	d0a74315 	stw	r2,-25332(gp)
 20163c0:	e0bff717 	ldw	r2,-36(fp)
 20163c4:	e0bffa15 	stw	r2,-24(fp)
 20163c8:	e0bffa17 	ldw	r2,-24(fp)
 20163cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20163d0:	e0bff403 	ldbu	r2,-48(fp)
 20163d4:	10800058 	cmpnei	r2,r2,1
 20163d8:	1000011e 	bne	r2,zero,20163e0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20163dc:	20155740 	call	2015574 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20163e0:	e0bfff17 	ldw	r2,-4(fp)
 20163e4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20163e8:	e03ff615 	stw	zero,-40(fp)
             break;
 20163ec:	00000a06 	br	2016418 <OSFlagDel+0x230>
 20163f0:	e0bff717 	ldw	r2,-36(fp)
 20163f4:	e0bffb15 	stw	r2,-20(fp)
 20163f8:	e0bffb17 	ldw	r2,-20(fp)
 20163fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2016400:	e0bfff17 	ldw	r2,-4(fp)
 2016404:	00c001c4 	movi	r3,7
 2016408:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 201640c:	e0bffd17 	ldw	r2,-12(fp)
 2016410:	e0bff615 	stw	r2,-40(fp)
             break;
 2016414:	0001883a 	nop
    }
    return (pgrp_return);
 2016418:	e0bff617 	ldw	r2,-40(fp)
}
 201641c:	e037883a 	mov	sp,fp
 2016420:	dfc00117 	ldw	ra,4(sp)
 2016424:	df000017 	ldw	fp,0(sp)
 2016428:	dec00204 	addi	sp,sp,8
 201642c:	f800283a 	ret

02016430 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2016430:	defff604 	addi	sp,sp,-40
 2016434:	dfc00915 	stw	ra,36(sp)
 2016438:	df000815 	stw	fp,32(sp)
 201643c:	df000804 	addi	fp,sp,32
 2016440:	e13ffd15 	stw	r4,-12(fp)
 2016444:	e17ffe15 	stw	r5,-8(fp)
 2016448:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201644c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016450:	e0bfff17 	ldw	r2,-4(fp)
 2016454:	1000021e 	bne	r2,zero,2016460 <OSFlagNameGet+0x30>
        return (0);
 2016458:	0005883a 	mov	r2,zero
 201645c:	00003906 	br	2016544 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2016460:	e0bffd17 	ldw	r2,-12(fp)
 2016464:	1000051e 	bne	r2,zero,201647c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016468:	e0bfff17 	ldw	r2,-4(fp)
 201646c:	00c01b84 	movi	r3,110
 2016470:	10c00005 	stb	r3,0(r2)
        return (0);
 2016474:	0005883a 	mov	r2,zero
 2016478:	00003206 	br	2016544 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201647c:	e0bffe17 	ldw	r2,-8(fp)
 2016480:	1000051e 	bne	r2,zero,2016498 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2016484:	e0bfff17 	ldw	r2,-4(fp)
 2016488:	00c00304 	movi	r3,12
 201648c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016490:	0005883a 	mov	r2,zero
 2016494:	00002b06 	br	2016544 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016498:	d0a74003 	ldbu	r2,-25344(gp)
 201649c:	10803fcc 	andi	r2,r2,255
 20164a0:	10000526 	beq	r2,zero,20164b8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20164a4:	e0bfff17 	ldw	r2,-4(fp)
 20164a8:	00c00444 	movi	r3,17
 20164ac:	10c00005 	stb	r3,0(r2)
        return (0);
 20164b0:	0005883a 	mov	r2,zero
 20164b4:	00002306 	br	2016544 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20164b8:	0005303a 	rdctl	r2,status
 20164bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20164c0:	e0fffc17 	ldw	r3,-16(fp)
 20164c4:	00bfff84 	movi	r2,-2
 20164c8:	1884703a 	and	r2,r3,r2
 20164cc:	1001703a 	wrctl	status,r2
  
  return context;
 20164d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20164d4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20164d8:	e0bffd17 	ldw	r2,-12(fp)
 20164dc:	10800003 	ldbu	r2,0(r2)
 20164e0:	10803fcc 	andi	r2,r2,255
 20164e4:	10800160 	cmpeqi	r2,r2,5
 20164e8:	1000091e 	bne	r2,zero,2016510 <OSFlagNameGet+0xe0>
 20164ec:	e0bff817 	ldw	r2,-32(fp)
 20164f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20164f4:	e0bff917 	ldw	r2,-28(fp)
 20164f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 20164fc:	e0bfff17 	ldw	r2,-4(fp)
 2016500:	00c00044 	movi	r3,1
 2016504:	10c00005 	stb	r3,0(r2)
        return (0);
 2016508:	0005883a 	mov	r2,zero
 201650c:	00000d06 	br	2016544 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2016510:	e0bffd17 	ldw	r2,-12(fp)
 2016514:	10800284 	addi	r2,r2,10
 2016518:	100b883a 	mov	r5,r2
 201651c:	e13ffe17 	ldw	r4,-8(fp)
 2016520:	20156b80 	call	20156b8 <OS_StrCopy>
 2016524:	e0bffb05 	stb	r2,-20(fp)
 2016528:	e0bff817 	ldw	r2,-32(fp)
 201652c:	e0bffa15 	stw	r2,-24(fp)
 2016530:	e0bffa17 	ldw	r2,-24(fp)
 2016534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016538:	e0bfff17 	ldw	r2,-4(fp)
 201653c:	10000005 	stb	zero,0(r2)
    return (len);
 2016540:	e0bffb03 	ldbu	r2,-20(fp)
}
 2016544:	e037883a 	mov	sp,fp
 2016548:	dfc00117 	ldw	ra,4(sp)
 201654c:	df000017 	ldw	fp,0(sp)
 2016550:	dec00204 	addi	sp,sp,8
 2016554:	f800283a 	ret

02016558 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2016558:	defff504 	addi	sp,sp,-44
 201655c:	dfc00a15 	stw	ra,40(sp)
 2016560:	df000915 	stw	fp,36(sp)
 2016564:	df000904 	addi	fp,sp,36
 2016568:	e13ffd15 	stw	r4,-12(fp)
 201656c:	e17ffe15 	stw	r5,-8(fp)
 2016570:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016574:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016578:	e0bfff17 	ldw	r2,-4(fp)
 201657c:	10004326 	beq	r2,zero,201668c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2016580:	e0bffd17 	ldw	r2,-12(fp)
 2016584:	1000041e 	bne	r2,zero,2016598 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016588:	e0bfff17 	ldw	r2,-4(fp)
 201658c:	00c01b84 	movi	r3,110
 2016590:	10c00005 	stb	r3,0(r2)
        return;
 2016594:	00003e06 	br	2016690 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2016598:	e0bffe17 	ldw	r2,-8(fp)
 201659c:	1000041e 	bne	r2,zero,20165b0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20165a0:	e0bfff17 	ldw	r2,-4(fp)
 20165a4:	00c00304 	movi	r3,12
 20165a8:	10c00005 	stb	r3,0(r2)
        return;
 20165ac:	00003806 	br	2016690 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20165b0:	d0a74003 	ldbu	r2,-25344(gp)
 20165b4:	10803fcc 	andi	r2,r2,255
 20165b8:	10000426 	beq	r2,zero,20165cc <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20165bc:	e0bfff17 	ldw	r2,-4(fp)
 20165c0:	00c00484 	movi	r3,18
 20165c4:	10c00005 	stb	r3,0(r2)
        return;
 20165c8:	00003106 	br	2016690 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20165cc:	0005303a 	rdctl	r2,status
 20165d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20165d4:	e0fffc17 	ldw	r3,-16(fp)
 20165d8:	00bfff84 	movi	r2,-2
 20165dc:	1884703a 	and	r2,r3,r2
 20165e0:	1001703a 	wrctl	status,r2
  
  return context;
 20165e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20165e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20165ec:	e0bffd17 	ldw	r2,-12(fp)
 20165f0:	10800003 	ldbu	r2,0(r2)
 20165f4:	10803fcc 	andi	r2,r2,255
 20165f8:	10800160 	cmpeqi	r2,r2,5
 20165fc:	1000081e 	bne	r2,zero,2016620 <OSFlagNameSet+0xc8>
 2016600:	e0bff717 	ldw	r2,-36(fp)
 2016604:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016608:	e0bff817 	ldw	r2,-32(fp)
 201660c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2016610:	e0bfff17 	ldw	r2,-4(fp)
 2016614:	00c00044 	movi	r3,1
 2016618:	10c00005 	stb	r3,0(r2)
        return;
 201661c:	00001c06 	br	2016690 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2016620:	e13ffe17 	ldw	r4,-8(fp)
 2016624:	201572c0 	call	201572c <OS_StrLen>
 2016628:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 201662c:	e0bffa03 	ldbu	r2,-24(fp)
 2016630:	10800830 	cmpltui	r2,r2,32
 2016634:	1000081e 	bne	r2,zero,2016658 <OSFlagNameSet+0x100>
 2016638:	e0bff717 	ldw	r2,-36(fp)
 201663c:	e0bff915 	stw	r2,-28(fp)
 2016640:	e0bff917 	ldw	r2,-28(fp)
 2016644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2016648:	e0bfff17 	ldw	r2,-4(fp)
 201664c:	00c01cc4 	movi	r3,115
 2016650:	10c00005 	stb	r3,0(r2)
        return;
 2016654:	00000e06 	br	2016690 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2016658:	e0bffd17 	ldw	r2,-12(fp)
 201665c:	10800284 	addi	r2,r2,10
 2016660:	e17ffe17 	ldw	r5,-8(fp)
 2016664:	1009883a 	mov	r4,r2
 2016668:	20156b80 	call	20156b8 <OS_StrCopy>
 201666c:	e0bff717 	ldw	r2,-36(fp)
 2016670:	e0bffb15 	stw	r2,-20(fp)
 2016674:	e0bffb17 	ldw	r2,-20(fp)
 2016678:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201667c:	e0bfff17 	ldw	r2,-4(fp)
 2016680:	10000005 	stb	zero,0(r2)
    return;
 2016684:	0001883a 	nop
 2016688:	00000106 	br	2016690 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201668c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2016690:	e037883a 	mov	sp,fp
 2016694:	dfc00117 	ldw	ra,4(sp)
 2016698:	df000017 	ldw	fp,0(sp)
 201669c:	dec00204 	addi	sp,sp,8
 20166a0:	f800283a 	ret

020166a4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 20166a4:	deffe104 	addi	sp,sp,-124
 20166a8:	dfc01e15 	stw	ra,120(sp)
 20166ac:	df001d15 	stw	fp,116(sp)
 20166b0:	df001d04 	addi	fp,sp,116
 20166b4:	e13ffc15 	stw	r4,-16(fp)
 20166b8:	2809883a 	mov	r4,r5
 20166bc:	3007883a 	mov	r3,r6
 20166c0:	3805883a 	mov	r2,r7
 20166c4:	e13ffd0d 	sth	r4,-12(fp)
 20166c8:	e0fffe05 	stb	r3,-8(fp)
 20166cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20166d0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20166d4:	e0800217 	ldw	r2,8(fp)
 20166d8:	1000021e 	bne	r2,zero,20166e4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 20166dc:	0005883a 	mov	r2,zero
 20166e0:	00015906 	br	2016c48 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20166e4:	e0bffc17 	ldw	r2,-16(fp)
 20166e8:	1000051e 	bne	r2,zero,2016700 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20166ec:	e0800217 	ldw	r2,8(fp)
 20166f0:	00c01b84 	movi	r3,110
 20166f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20166f8:	0005883a 	mov	r2,zero
 20166fc:	00015206 	br	2016c48 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016700:	d0a74003 	ldbu	r2,-25344(gp)
 2016704:	10803fcc 	andi	r2,r2,255
 2016708:	10000526 	beq	r2,zero,2016720 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 201670c:	e0800217 	ldw	r2,8(fp)
 2016710:	00c00084 	movi	r3,2
 2016714:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016718:	0005883a 	mov	r2,zero
 201671c:	00014a06 	br	2016c48 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2016720:	d0a73203 	ldbu	r2,-25400(gp)
 2016724:	10803fcc 	andi	r2,r2,255
 2016728:	10000526 	beq	r2,zero,2016740 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 201672c:	e0800217 	ldw	r2,8(fp)
 2016730:	00c00344 	movi	r3,13
 2016734:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016738:	0005883a 	mov	r2,zero
 201673c:	00014206 	br	2016c48 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2016740:	e0bffc17 	ldw	r2,-16(fp)
 2016744:	10800003 	ldbu	r2,0(r2)
 2016748:	10803fcc 	andi	r2,r2,255
 201674c:	10800160 	cmpeqi	r2,r2,5
 2016750:	1000051e 	bne	r2,zero,2016768 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2016754:	e0800217 	ldw	r2,8(fp)
 2016758:	00c00044 	movi	r3,1
 201675c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016760:	0005883a 	mov	r2,zero
 2016764:	00013806 	br	2016c48 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2016768:	e0fffe03 	ldbu	r3,-8(fp)
 201676c:	00bfe004 	movi	r2,-128
 2016770:	1884703a 	and	r2,r3,r2
 2016774:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2016778:	e0bfe603 	ldbu	r2,-104(fp)
 201677c:	10000626 	beq	r2,zero,2016798 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2016780:	e0bffe03 	ldbu	r2,-8(fp)
 2016784:	10801fcc 	andi	r2,r2,127
 2016788:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 201678c:	00800044 	movi	r2,1
 2016790:	e0bfe405 	stb	r2,-112(fp)
 2016794:	00000106 	br	201679c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2016798:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201679c:	0005303a 	rdctl	r2,status
 20167a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20167a4:	e0fff617 	ldw	r3,-40(fp)
 20167a8:	00bfff84 	movi	r2,-2
 20167ac:	1884703a 	and	r2,r3,r2
 20167b0:	1001703a 	wrctl	status,r2
  
  return context;
 20167b4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20167b8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 20167bc:	e0bffe03 	ldbu	r2,-8(fp)
 20167c0:	10c00060 	cmpeqi	r3,r2,1
 20167c4:	1800921e 	bne	r3,zero,2016a10 <OSFlagPend+0x36c>
 20167c8:	10c00088 	cmpgei	r3,r2,2
 20167cc:	1800021e 	bne	r3,zero,20167d8 <OSFlagPend+0x134>
 20167d0:	10006126 	beq	r2,zero,2016958 <OSFlagPend+0x2b4>
 20167d4:	0000bb06 	br	2016ac4 <OSFlagPend+0x420>
 20167d8:	10c000a0 	cmpeqi	r3,r2,2
 20167dc:	1800031e 	bne	r3,zero,20167ec <OSFlagPend+0x148>
 20167e0:	108000e0 	cmpeqi	r2,r2,3
 20167e4:	10002f1e 	bne	r2,zero,20168a4 <OSFlagPend+0x200>
 20167e8:	0000b606 	br	2016ac4 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 20167ec:	e0bffc17 	ldw	r2,-16(fp)
 20167f0:	10c0020b 	ldhu	r3,8(r2)
 20167f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20167f8:	1884703a 	and	r2,r3,r2
 20167fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016800:	e0ffe80b 	ldhu	r3,-96(fp)
 2016804:	e0bffd0b 	ldhu	r2,-12(fp)
 2016808:	1880171e 	bne	r3,r2,2016868 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201680c:	e0bfe403 	ldbu	r2,-112(fp)
 2016810:	10800058 	cmpnei	r2,r2,1
 2016814:	1000091e 	bne	r2,zero,201683c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2016818:	e0bffc17 	ldw	r2,-16(fp)
 201681c:	1080020b 	ldhu	r2,8(r2)
 2016820:	1007883a 	mov	r3,r2
 2016824:	e0bfe80b 	ldhu	r2,-96(fp)
 2016828:	0084303a 	nor	r2,zero,r2
 201682c:	1884703a 	and	r2,r3,r2
 2016830:	1007883a 	mov	r3,r2
 2016834:	e0bffc17 	ldw	r2,-16(fp)
 2016838:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201683c:	d0a74117 	ldw	r2,-25340(gp)
 2016840:	e0ffe80b 	ldhu	r3,-96(fp)
 2016844:	10c00b0d 	sth	r3,44(r2)
 2016848:	e0bfe517 	ldw	r2,-108(fp)
 201684c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016850:	e0bfe717 	ldw	r2,-100(fp)
 2016854:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016858:	e0800217 	ldw	r2,8(fp)
 201685c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016860:	e0bfe80b 	ldhu	r2,-96(fp)
 2016864:	0000f806 	br	2016c48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016868:	e13ffd0b 	ldhu	r4,-12(fp)
 201686c:	e17ffe03 	ldbu	r5,-8(fp)
 2016870:	e0bfff0b 	ldhu	r2,-4(fp)
 2016874:	e0fff704 	addi	r3,fp,-36
 2016878:	d8800015 	stw	r2,0(sp)
 201687c:	280f883a 	mov	r7,r5
 2016880:	200d883a 	mov	r6,r4
 2016884:	180b883a 	mov	r5,r3
 2016888:	e13ffc17 	ldw	r4,-16(fp)
 201688c:	20171140 	call	2017114 <OS_FlagBlock>
 2016890:	e0bfe517 	ldw	r2,-108(fp)
 2016894:	e0bfe915 	stw	r2,-92(fp)
 2016898:	e0bfe917 	ldw	r2,-92(fp)
 201689c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20168a0:	00009206 	br	2016aec <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 20168a4:	e0bffc17 	ldw	r2,-16(fp)
 20168a8:	10c0020b 	ldhu	r3,8(r2)
 20168ac:	e0bffd0b 	ldhu	r2,-12(fp)
 20168b0:	1884703a 	and	r2,r3,r2
 20168b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20168b8:	e0bfe80b 	ldhu	r2,-96(fp)
 20168bc:	10001726 	beq	r2,zero,201691c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20168c0:	e0bfe403 	ldbu	r2,-112(fp)
 20168c4:	10800058 	cmpnei	r2,r2,1
 20168c8:	1000091e 	bne	r2,zero,20168f0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20168cc:	e0bffc17 	ldw	r2,-16(fp)
 20168d0:	1080020b 	ldhu	r2,8(r2)
 20168d4:	1007883a 	mov	r3,r2
 20168d8:	e0bfe80b 	ldhu	r2,-96(fp)
 20168dc:	0084303a 	nor	r2,zero,r2
 20168e0:	1884703a 	and	r2,r3,r2
 20168e4:	1007883a 	mov	r3,r2
 20168e8:	e0bffc17 	ldw	r2,-16(fp)
 20168ec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20168f0:	d0a74117 	ldw	r2,-25340(gp)
 20168f4:	e0ffe80b 	ldhu	r3,-96(fp)
 20168f8:	10c00b0d 	sth	r3,44(r2)
 20168fc:	e0bfe517 	ldw	r2,-108(fp)
 2016900:	e0bfea15 	stw	r2,-88(fp)
 2016904:	e0bfea17 	ldw	r2,-88(fp)
 2016908:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201690c:	e0800217 	ldw	r2,8(fp)
 2016910:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016914:	e0bfe80b 	ldhu	r2,-96(fp)
 2016918:	0000cb06 	br	2016c48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201691c:	e13ffd0b 	ldhu	r4,-12(fp)
 2016920:	e17ffe03 	ldbu	r5,-8(fp)
 2016924:	e0bfff0b 	ldhu	r2,-4(fp)
 2016928:	e0fff704 	addi	r3,fp,-36
 201692c:	d8800015 	stw	r2,0(sp)
 2016930:	280f883a 	mov	r7,r5
 2016934:	200d883a 	mov	r6,r4
 2016938:	180b883a 	mov	r5,r3
 201693c:	e13ffc17 	ldw	r4,-16(fp)
 2016940:	20171140 	call	2017114 <OS_FlagBlock>
 2016944:	e0bfe517 	ldw	r2,-108(fp)
 2016948:	e0bfeb15 	stw	r2,-84(fp)
 201694c:	e0bfeb17 	ldw	r2,-84(fp)
 2016950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016954:	00006506 	br	2016aec <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2016958:	e0bffc17 	ldw	r2,-16(fp)
 201695c:	1080020b 	ldhu	r2,8(r2)
 2016960:	0084303a 	nor	r2,zero,r2
 2016964:	1007883a 	mov	r3,r2
 2016968:	e0bffd0b 	ldhu	r2,-12(fp)
 201696c:	1884703a 	and	r2,r3,r2
 2016970:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016974:	e0ffe80b 	ldhu	r3,-96(fp)
 2016978:	e0bffd0b 	ldhu	r2,-12(fp)
 201697c:	1880151e 	bne	r3,r2,20169d4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016980:	e0bfe403 	ldbu	r2,-112(fp)
 2016984:	10800058 	cmpnei	r2,r2,1
 2016988:	1000071e 	bne	r2,zero,20169a8 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201698c:	e0bffc17 	ldw	r2,-16(fp)
 2016990:	10c0020b 	ldhu	r3,8(r2)
 2016994:	e0bfe80b 	ldhu	r2,-96(fp)
 2016998:	1884b03a 	or	r2,r3,r2
 201699c:	1007883a 	mov	r3,r2
 20169a0:	e0bffc17 	ldw	r2,-16(fp)
 20169a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20169a8:	d0a74117 	ldw	r2,-25340(gp)
 20169ac:	e0ffe80b 	ldhu	r3,-96(fp)
 20169b0:	10c00b0d 	sth	r3,44(r2)
 20169b4:	e0bfe517 	ldw	r2,-108(fp)
 20169b8:	e0bfec15 	stw	r2,-80(fp)
 20169bc:	e0bfec17 	ldw	r2,-80(fp)
 20169c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20169c4:	e0800217 	ldw	r2,8(fp)
 20169c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20169cc:	e0bfe80b 	ldhu	r2,-96(fp)
 20169d0:	00009d06 	br	2016c48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20169d4:	e13ffd0b 	ldhu	r4,-12(fp)
 20169d8:	e17ffe03 	ldbu	r5,-8(fp)
 20169dc:	e0bfff0b 	ldhu	r2,-4(fp)
 20169e0:	e0fff704 	addi	r3,fp,-36
 20169e4:	d8800015 	stw	r2,0(sp)
 20169e8:	280f883a 	mov	r7,r5
 20169ec:	200d883a 	mov	r6,r4
 20169f0:	180b883a 	mov	r5,r3
 20169f4:	e13ffc17 	ldw	r4,-16(fp)
 20169f8:	20171140 	call	2017114 <OS_FlagBlock>
 20169fc:	e0bfe517 	ldw	r2,-108(fp)
 2016a00:	e0bfed15 	stw	r2,-76(fp)
 2016a04:	e0bfed17 	ldw	r2,-76(fp)
 2016a08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016a0c:	00003706 	br	2016aec <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016a10:	e0bffc17 	ldw	r2,-16(fp)
 2016a14:	1080020b 	ldhu	r2,8(r2)
 2016a18:	0084303a 	nor	r2,zero,r2
 2016a1c:	1007883a 	mov	r3,r2
 2016a20:	e0bffd0b 	ldhu	r2,-12(fp)
 2016a24:	1884703a 	and	r2,r3,r2
 2016a28:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016a2c:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a30:	10001526 	beq	r2,zero,2016a88 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016a34:	e0bfe403 	ldbu	r2,-112(fp)
 2016a38:	10800058 	cmpnei	r2,r2,1
 2016a3c:	1000071e 	bne	r2,zero,2016a5c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016a40:	e0bffc17 	ldw	r2,-16(fp)
 2016a44:	10c0020b 	ldhu	r3,8(r2)
 2016a48:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a4c:	1884b03a 	or	r2,r3,r2
 2016a50:	1007883a 	mov	r3,r2
 2016a54:	e0bffc17 	ldw	r2,-16(fp)
 2016a58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016a5c:	d0a74117 	ldw	r2,-25340(gp)
 2016a60:	e0ffe80b 	ldhu	r3,-96(fp)
 2016a64:	10c00b0d 	sth	r3,44(r2)
 2016a68:	e0bfe517 	ldw	r2,-108(fp)
 2016a6c:	e0bfee15 	stw	r2,-72(fp)
 2016a70:	e0bfee17 	ldw	r2,-72(fp)
 2016a74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016a78:	e0800217 	ldw	r2,8(fp)
 2016a7c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016a80:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a84:	00007006 	br	2016c48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016a88:	e13ffd0b 	ldhu	r4,-12(fp)
 2016a8c:	e17ffe03 	ldbu	r5,-8(fp)
 2016a90:	e0bfff0b 	ldhu	r2,-4(fp)
 2016a94:	e0fff704 	addi	r3,fp,-36
 2016a98:	d8800015 	stw	r2,0(sp)
 2016a9c:	280f883a 	mov	r7,r5
 2016aa0:	200d883a 	mov	r6,r4
 2016aa4:	180b883a 	mov	r5,r3
 2016aa8:	e13ffc17 	ldw	r4,-16(fp)
 2016aac:	20171140 	call	2017114 <OS_FlagBlock>
 2016ab0:	e0bfe517 	ldw	r2,-108(fp)
 2016ab4:	e0bfef15 	stw	r2,-68(fp)
 2016ab8:	e0bfef17 	ldw	r2,-68(fp)
 2016abc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016ac0:	00000a06 	br	2016aec <OSFlagPend+0x448>
 2016ac4:	e0bfe517 	ldw	r2,-108(fp)
 2016ac8:	e0bff015 	stw	r2,-64(fp)
 2016acc:	e0bff017 	ldw	r2,-64(fp)
 2016ad0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2016ad4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2016ad8:	e0800217 	ldw	r2,8(fp)
 2016adc:	00c01bc4 	movi	r3,111
 2016ae0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2016ae4:	e0bfe80b 	ldhu	r2,-96(fp)
 2016ae8:	00005706 	br	2016c48 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2016aec:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016af0:	0005303a 	rdctl	r2,status
 2016af4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016af8:	e0fff117 	ldw	r3,-60(fp)
 2016afc:	00bfff84 	movi	r2,-2
 2016b00:	1884703a 	and	r2,r3,r2
 2016b04:	1001703a 	wrctl	status,r2
  
  return context;
 2016b08:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2016b0c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2016b10:	d0a74117 	ldw	r2,-25340(gp)
 2016b14:	10800c43 	ldbu	r2,49(r2)
 2016b18:	10803fcc 	andi	r2,r2,255
 2016b1c:	10001c26 	beq	r2,zero,2016b90 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2016b20:	d0a74117 	ldw	r2,-25340(gp)
 2016b24:	10800c43 	ldbu	r2,49(r2)
 2016b28:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2016b2c:	d0a74117 	ldw	r2,-25340(gp)
 2016b30:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2016b34:	e0bff704 	addi	r2,fp,-36
 2016b38:	1009883a 	mov	r4,r2
 2016b3c:	20174480 	call	2017448 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2016b40:	d0a74117 	ldw	r2,-25340(gp)
 2016b44:	10000c05 	stb	zero,48(r2)
 2016b48:	e0bfe517 	ldw	r2,-108(fp)
 2016b4c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b50:	e0bff217 	ldw	r2,-56(fp)
 2016b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2016b58:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2016b5c:	e0bff303 	ldbu	r2,-52(fp)
 2016b60:	108000a0 	cmpeqi	r2,r2,2
 2016b64:	10000426 	beq	r2,zero,2016b78 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2016b68:	e0800217 	ldw	r2,8(fp)
 2016b6c:	00c00384 	movi	r3,14
 2016b70:	10c00005 	stb	r3,0(r2)
                 break;
 2016b74:	00000406 	br	2016b88 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2016b78:	e0800217 	ldw	r2,8(fp)
 2016b7c:	00c00284 	movi	r3,10
 2016b80:	10c00005 	stb	r3,0(r2)
                 break;
 2016b84:	0001883a 	nop
        }
        return (flags_rdy);
 2016b88:	e0bfe80b 	ldhu	r2,-96(fp)
 2016b8c:	00002e06 	br	2016c48 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2016b90:	d0a74117 	ldw	r2,-25340(gp)
 2016b94:	10800b0b 	ldhu	r2,44(r2)
 2016b98:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2016b9c:	e0bfe403 	ldbu	r2,-112(fp)
 2016ba0:	10800058 	cmpnei	r2,r2,1
 2016ba4:	1000211e 	bne	r2,zero,2016c2c <OSFlagPend+0x588>
        switch (wait_type) {
 2016ba8:	e0bffe03 	ldbu	r2,-8(fp)
 2016bac:	10001616 	blt	r2,zero,2016c08 <OSFlagPend+0x564>
 2016bb0:	10c00090 	cmplti	r3,r2,2
 2016bb4:	18000c1e 	bne	r3,zero,2016be8 <OSFlagPend+0x544>
 2016bb8:	10800108 	cmpgei	r2,r2,4
 2016bbc:	1000121e 	bne	r2,zero,2016c08 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2016bc0:	e0bffc17 	ldw	r2,-16(fp)
 2016bc4:	1080020b 	ldhu	r2,8(r2)
 2016bc8:	1007883a 	mov	r3,r2
 2016bcc:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bd0:	0084303a 	nor	r2,zero,r2
 2016bd4:	1884703a 	and	r2,r3,r2
 2016bd8:	1007883a 	mov	r3,r2
 2016bdc:	e0bffc17 	ldw	r2,-16(fp)
 2016be0:	10c0020d 	sth	r3,8(r2)
                 break;
 2016be4:	00001106 	br	2016c2c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2016be8:	e0bffc17 	ldw	r2,-16(fp)
 2016bec:	10c0020b 	ldhu	r3,8(r2)
 2016bf0:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bf4:	1884b03a 	or	r2,r3,r2
 2016bf8:	1007883a 	mov	r3,r2
 2016bfc:	e0bffc17 	ldw	r2,-16(fp)
 2016c00:	10c0020d 	sth	r3,8(r2)
                 break;
 2016c04:	00000906 	br	2016c2c <OSFlagPend+0x588>
 2016c08:	e0bfe517 	ldw	r2,-108(fp)
 2016c0c:	e0bff415 	stw	r2,-48(fp)
 2016c10:	e0bff417 	ldw	r2,-48(fp)
 2016c14:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2016c18:	e0800217 	ldw	r2,8(fp)
 2016c1c:	00c01bc4 	movi	r3,111
 2016c20:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2016c24:	0005883a 	mov	r2,zero
 2016c28:	00000706 	br	2016c48 <OSFlagPend+0x5a4>
 2016c2c:	e0bfe517 	ldw	r2,-108(fp)
 2016c30:	e0bff515 	stw	r2,-44(fp)
 2016c34:	e0bff517 	ldw	r2,-44(fp)
 2016c38:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2016c3c:	e0800217 	ldw	r2,8(fp)
 2016c40:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2016c44:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2016c48:	e037883a 	mov	sp,fp
 2016c4c:	dfc00117 	ldw	ra,4(sp)
 2016c50:	df000017 	ldw	fp,0(sp)
 2016c54:	dec00204 	addi	sp,sp,8
 2016c58:	f800283a 	ret

02016c5c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2016c5c:	defffb04 	addi	sp,sp,-20
 2016c60:	df000415 	stw	fp,16(sp)
 2016c64:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016c68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016c6c:	0005303a 	rdctl	r2,status
 2016c70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016c74:	e0fffe17 	ldw	r3,-8(fp)
 2016c78:	00bfff84 	movi	r2,-2
 2016c7c:	1884703a 	and	r2,r3,r2
 2016c80:	1001703a 	wrctl	status,r2
  
  return context;
 2016c84:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2016c88:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2016c8c:	d0a74117 	ldw	r2,-25340(gp)
 2016c90:	10800b0b 	ldhu	r2,44(r2)
 2016c94:	e0bffd0d 	sth	r2,-12(fp)
 2016c98:	e0bffc17 	ldw	r2,-16(fp)
 2016c9c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016ca0:	e0bfff17 	ldw	r2,-4(fp)
 2016ca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2016ca8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2016cac:	e037883a 	mov	sp,fp
 2016cb0:	df000017 	ldw	fp,0(sp)
 2016cb4:	dec00104 	addi	sp,sp,4
 2016cb8:	f800283a 	ret

02016cbc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2016cbc:	deffef04 	addi	sp,sp,-68
 2016cc0:	dfc01015 	stw	ra,64(sp)
 2016cc4:	df000f15 	stw	fp,60(sp)
 2016cc8:	df000f04 	addi	fp,sp,60
 2016ccc:	e13ffc15 	stw	r4,-16(fp)
 2016cd0:	2807883a 	mov	r3,r5
 2016cd4:	3005883a 	mov	r2,r6
 2016cd8:	e1ffff15 	stw	r7,-4(fp)
 2016cdc:	e0fffd0d 	sth	r3,-12(fp)
 2016ce0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2016ce4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2016ce8:	e0bfff17 	ldw	r2,-4(fp)
 2016cec:	1000021e 	bne	r2,zero,2016cf8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2016cf0:	0005883a 	mov	r2,zero
 2016cf4:	0000d106 	br	201703c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2016cf8:	e0bffc17 	ldw	r2,-16(fp)
 2016cfc:	1000051e 	bne	r2,zero,2016d14 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016d00:	e0bfff17 	ldw	r2,-4(fp)
 2016d04:	00c01b84 	movi	r3,110
 2016d08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016d0c:	0005883a 	mov	r2,zero
 2016d10:	0000ca06 	br	201703c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2016d14:	e0bffc17 	ldw	r2,-16(fp)
 2016d18:	10800003 	ldbu	r2,0(r2)
 2016d1c:	10803fcc 	andi	r2,r2,255
 2016d20:	10800160 	cmpeqi	r2,r2,5
 2016d24:	1000051e 	bne	r2,zero,2016d3c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2016d28:	e0bfff17 	ldw	r2,-4(fp)
 2016d2c:	00c00044 	movi	r3,1
 2016d30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016d34:	0005883a 	mov	r2,zero
 2016d38:	0000c006 	br	201703c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d3c:	0005303a 	rdctl	r2,status
 2016d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d44:	e0fffb17 	ldw	r3,-20(fp)
 2016d48:	00bfff84 	movi	r2,-2
 2016d4c:	1884703a 	and	r2,r3,r2
 2016d50:	1001703a 	wrctl	status,r2
  
  return context;
 2016d54:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016d58:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2016d5c:	e0bffe03 	ldbu	r2,-8(fp)
 2016d60:	10000326 	beq	r2,zero,2016d70 <OSFlagPost+0xb4>
 2016d64:	10800060 	cmpeqi	r2,r2,1
 2016d68:	10000b1e 	bne	r2,zero,2016d98 <OSFlagPost+0xdc>
 2016d6c:	00001206 	br	2016db8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2016d70:	e0bffc17 	ldw	r2,-16(fp)
 2016d74:	1080020b 	ldhu	r2,8(r2)
 2016d78:	1007883a 	mov	r3,r2
 2016d7c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016d80:	0084303a 	nor	r2,zero,r2
 2016d84:	1884703a 	and	r2,r3,r2
 2016d88:	1007883a 	mov	r3,r2
 2016d8c:	e0bffc17 	ldw	r2,-16(fp)
 2016d90:	10c0020d 	sth	r3,8(r2)
             break;
 2016d94:	00001106 	br	2016ddc <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2016d98:	e0bffc17 	ldw	r2,-16(fp)
 2016d9c:	10c0020b 	ldhu	r3,8(r2)
 2016da0:	e0bffd0b 	ldhu	r2,-12(fp)
 2016da4:	1884b03a 	or	r2,r3,r2
 2016da8:	1007883a 	mov	r3,r2
 2016dac:	e0bffc17 	ldw	r2,-16(fp)
 2016db0:	10c0020d 	sth	r3,8(r2)
             break;
 2016db4:	00000906 	br	2016ddc <OSFlagPost+0x120>
 2016db8:	e0bff317 	ldw	r2,-52(fp)
 2016dbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016dc0:	e0bff417 	ldw	r2,-48(fp)
 2016dc4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2016dc8:	e0bfff17 	ldw	r2,-4(fp)
 2016dcc:	00c01c44 	movi	r3,113
 2016dd0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 2016dd4:	0005883a 	mov	r2,zero
 2016dd8:	00009806 	br	201703c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2016ddc:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2016de0:	e0bffc17 	ldw	r2,-16(fp)
 2016de4:	10800117 	ldw	r2,4(r2)
 2016de8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2016dec:	00007706 	br	2016fcc <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2016df0:	e0bff117 	ldw	r2,-60(fp)
 2016df4:	10800483 	ldbu	r2,18(r2)
 2016df8:	10803fcc 	andi	r2,r2,255
 2016dfc:	10c00060 	cmpeqi	r3,r2,1
 2016e00:	18004a1e 	bne	r3,zero,2016f2c <OSFlagPost+0x270>
 2016e04:	10c00088 	cmpgei	r3,r2,2
 2016e08:	1800021e 	bne	r3,zero,2016e14 <OSFlagPost+0x158>
 2016e0c:	10002f26 	beq	r2,zero,2016ecc <OSFlagPost+0x210>
 2016e10:	00005b06 	br	2016f80 <OSFlagPost+0x2c4>
 2016e14:	10c000a0 	cmpeqi	r3,r2,2
 2016e18:	1800031e 	bne	r3,zero,2016e28 <OSFlagPost+0x16c>
 2016e1c:	108000e0 	cmpeqi	r2,r2,3
 2016e20:	1000171e 	bne	r2,zero,2016e80 <OSFlagPost+0x1c4>
 2016e24:	00005606 	br	2016f80 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016e28:	e0bffc17 	ldw	r2,-16(fp)
 2016e2c:	10c0020b 	ldhu	r3,8(r2)
 2016e30:	e0bff117 	ldw	r2,-60(fp)
 2016e34:	1080040b 	ldhu	r2,16(r2)
 2016e38:	1884703a 	and	r2,r3,r2
 2016e3c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2016e40:	e0bff117 	ldw	r2,-60(fp)
 2016e44:	1080040b 	ldhu	r2,16(r2)
 2016e48:	10ffffcc 	andi	r3,r2,65535
 2016e4c:	e0bff60b 	ldhu	r2,-40(fp)
 2016e50:	1880541e 	bne	r3,r2,2016fa4 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2016e54:	e0bff60b 	ldhu	r2,-40(fp)
 2016e58:	100b883a 	mov	r5,r2
 2016e5c:	e13ff117 	ldw	r4,-60(fp)
 2016e60:	20173540 	call	2017354 <OS_FlagTaskRdy>
 2016e64:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2016e68:	e0bff683 	ldbu	r2,-38(fp)
 2016e6c:	10800058 	cmpnei	r2,r2,1
 2016e70:	10004c1e 	bne	r2,zero,2016fa4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2016e74:	00800044 	movi	r2,1
 2016e78:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2016e7c:	00004906 	br	2016fa4 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016e80:	e0bffc17 	ldw	r2,-16(fp)
 2016e84:	10c0020b 	ldhu	r3,8(r2)
 2016e88:	e0bff117 	ldw	r2,-60(fp)
 2016e8c:	1080040b 	ldhu	r2,16(r2)
 2016e90:	1884703a 	and	r2,r3,r2
 2016e94:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2016e98:	e0bff60b 	ldhu	r2,-40(fp)
 2016e9c:	10004326 	beq	r2,zero,2016fac <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2016ea0:	e0bff60b 	ldhu	r2,-40(fp)
 2016ea4:	100b883a 	mov	r5,r2
 2016ea8:	e13ff117 	ldw	r4,-60(fp)
 2016eac:	20173540 	call	2017354 <OS_FlagTaskRdy>
 2016eb0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2016eb4:	e0bff683 	ldbu	r2,-38(fp)
 2016eb8:	10800058 	cmpnei	r2,r2,1
 2016ebc:	10003b1e 	bne	r2,zero,2016fac <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2016ec0:	00800044 	movi	r2,1
 2016ec4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2016ec8:	00003806 	br	2016fac <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016ecc:	e0bffc17 	ldw	r2,-16(fp)
 2016ed0:	1080020b 	ldhu	r2,8(r2)
 2016ed4:	0084303a 	nor	r2,zero,r2
 2016ed8:	1007883a 	mov	r3,r2
 2016edc:	e0bff117 	ldw	r2,-60(fp)
 2016ee0:	1080040b 	ldhu	r2,16(r2)
 2016ee4:	1884703a 	and	r2,r3,r2
 2016ee8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2016eec:	e0bff117 	ldw	r2,-60(fp)
 2016ef0:	1080040b 	ldhu	r2,16(r2)
 2016ef4:	10ffffcc 	andi	r3,r2,65535
 2016ef8:	e0bff60b 	ldhu	r2,-40(fp)
 2016efc:	18802d1e 	bne	r3,r2,2016fb4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2016f00:	e0bff60b 	ldhu	r2,-40(fp)
 2016f04:	100b883a 	mov	r5,r2
 2016f08:	e13ff117 	ldw	r4,-60(fp)
 2016f0c:	20173540 	call	2017354 <OS_FlagTaskRdy>
 2016f10:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2016f14:	e0bff683 	ldbu	r2,-38(fp)
 2016f18:	10800058 	cmpnei	r2,r2,1
 2016f1c:	1000251e 	bne	r2,zero,2016fb4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2016f20:	00800044 	movi	r2,1
 2016f24:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2016f28:	00002206 	br	2016fb4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016f2c:	e0bffc17 	ldw	r2,-16(fp)
 2016f30:	1080020b 	ldhu	r2,8(r2)
 2016f34:	0084303a 	nor	r2,zero,r2
 2016f38:	1007883a 	mov	r3,r2
 2016f3c:	e0bff117 	ldw	r2,-60(fp)
 2016f40:	1080040b 	ldhu	r2,16(r2)
 2016f44:	1884703a 	and	r2,r3,r2
 2016f48:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2016f4c:	e0bff60b 	ldhu	r2,-40(fp)
 2016f50:	10001a26 	beq	r2,zero,2016fbc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2016f54:	e0bff60b 	ldhu	r2,-40(fp)
 2016f58:	100b883a 	mov	r5,r2
 2016f5c:	e13ff117 	ldw	r4,-60(fp)
 2016f60:	20173540 	call	2017354 <OS_FlagTaskRdy>
 2016f64:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2016f68:	e0bff683 	ldbu	r2,-38(fp)
 2016f6c:	10800058 	cmpnei	r2,r2,1
 2016f70:	1000121e 	bne	r2,zero,2016fbc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2016f74:	00800044 	movi	r2,1
 2016f78:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2016f7c:	00000f06 	br	2016fbc <OSFlagPost+0x300>
 2016f80:	e0bff317 	ldw	r2,-52(fp)
 2016f84:	e0bff515 	stw	r2,-44(fp)
 2016f88:	e0bff517 	ldw	r2,-44(fp)
 2016f8c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2016f90:	e0bfff17 	ldw	r2,-4(fp)
 2016f94:	00c01bc4 	movi	r3,111
 2016f98:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2016f9c:	0005883a 	mov	r2,zero
 2016fa0:	00002606 	br	201703c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2016fa4:	0001883a 	nop
 2016fa8:	00000506 	br	2016fc0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2016fac:	0001883a 	nop
 2016fb0:	00000306 	br	2016fc0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2016fb4:	0001883a 	nop
 2016fb8:	00000106 	br	2016fc0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2016fbc:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2016fc0:	e0bff117 	ldw	r2,-60(fp)
 2016fc4:	10800017 	ldw	r2,0(r2)
 2016fc8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2016fcc:	e0bff117 	ldw	r2,-60(fp)
 2016fd0:	103f871e 	bne	r2,zero,2016df0 <OSFlagPost+0x134>
 2016fd4:	e0bff317 	ldw	r2,-52(fp)
 2016fd8:	e0bff715 	stw	r2,-36(fp)
 2016fdc:	e0bff717 	ldw	r2,-36(fp)
 2016fe0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2016fe4:	e0bff203 	ldbu	r2,-56(fp)
 2016fe8:	10800058 	cmpnei	r2,r2,1
 2016fec:	1000011e 	bne	r2,zero,2016ff4 <OSFlagPost+0x338>
        OS_Sched();
 2016ff0:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ff4:	0005303a 	rdctl	r2,status
 2016ff8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ffc:	e0fffa17 	ldw	r3,-24(fp)
 2017000:	00bfff84 	movi	r2,-2
 2017004:	1884703a 	and	r2,r3,r2
 2017008:	1001703a 	wrctl	status,r2
  
  return context;
 201700c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2017010:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2017014:	e0bffc17 	ldw	r2,-16(fp)
 2017018:	1080020b 	ldhu	r2,8(r2)
 201701c:	e0bff90d 	sth	r2,-28(fp)
 2017020:	e0bff317 	ldw	r2,-52(fp)
 2017024:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017028:	e0bff817 	ldw	r2,-32(fp)
 201702c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2017030:	e0bfff17 	ldw	r2,-4(fp)
 2017034:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2017038:	e0bff90b 	ldhu	r2,-28(fp)
}
 201703c:	e037883a 	mov	sp,fp
 2017040:	dfc00117 	ldw	ra,4(sp)
 2017044:	df000017 	ldw	fp,0(sp)
 2017048:	dec00204 	addi	sp,sp,8
 201704c:	f800283a 	ret

02017050 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2017050:	defff904 	addi	sp,sp,-28
 2017054:	df000615 	stw	fp,24(sp)
 2017058:	df000604 	addi	fp,sp,24
 201705c:	e13ffe15 	stw	r4,-8(fp)
 2017060:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2017064:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2017068:	e0bfff17 	ldw	r2,-4(fp)
 201706c:	1000021e 	bne	r2,zero,2017078 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2017070:	0005883a 	mov	r2,zero
 2017074:	00002306 	br	2017104 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2017078:	e0bffe17 	ldw	r2,-8(fp)
 201707c:	1000051e 	bne	r2,zero,2017094 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017080:	e0bfff17 	ldw	r2,-4(fp)
 2017084:	00c01b84 	movi	r3,110
 2017088:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201708c:	0005883a 	mov	r2,zero
 2017090:	00001c06 	br	2017104 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 2017094:	e0bffe17 	ldw	r2,-8(fp)
 2017098:	10800003 	ldbu	r2,0(r2)
 201709c:	10803fcc 	andi	r2,r2,255
 20170a0:	10800160 	cmpeqi	r2,r2,5
 20170a4:	1000051e 	bne	r2,zero,20170bc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20170a8:	e0bfff17 	ldw	r2,-4(fp)
 20170ac:	00c00044 	movi	r3,1
 20170b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20170b4:	0005883a 	mov	r2,zero
 20170b8:	00001206 	br	2017104 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20170bc:	0005303a 	rdctl	r2,status
 20170c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20170c4:	e0fffc17 	ldw	r3,-16(fp)
 20170c8:	00bfff84 	movi	r2,-2
 20170cc:	1884703a 	and	r2,r3,r2
 20170d0:	1001703a 	wrctl	status,r2
  
  return context;
 20170d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20170d8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 20170dc:	e0bffe17 	ldw	r2,-8(fp)
 20170e0:	1080020b 	ldhu	r2,8(r2)
 20170e4:	e0bffb0d 	sth	r2,-20(fp)
 20170e8:	e0bffa17 	ldw	r2,-24(fp)
 20170ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20170f0:	e0bffd17 	ldw	r2,-12(fp)
 20170f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20170f8:	e0bfff17 	ldw	r2,-4(fp)
 20170fc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2017100:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2017104:	e037883a 	mov	sp,fp
 2017108:	df000017 	ldw	fp,0(sp)
 201710c:	dec00104 	addi	sp,sp,4
 2017110:	f800283a 	ret

02017114 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2017114:	defff804 	addi	sp,sp,-32
 2017118:	df000715 	stw	fp,28(sp)
 201711c:	df000704 	addi	fp,sp,28
 2017120:	e13ffb15 	stw	r4,-20(fp)
 2017124:	e17ffc15 	stw	r5,-16(fp)
 2017128:	3009883a 	mov	r4,r6
 201712c:	3807883a 	mov	r3,r7
 2017130:	e0800117 	ldw	r2,4(fp)
 2017134:	e13ffd0d 	sth	r4,-12(fp)
 2017138:	e0fffe05 	stb	r3,-8(fp)
 201713c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2017140:	d0a74117 	ldw	r2,-25340(gp)
 2017144:	d0e74117 	ldw	r3,-25340(gp)
 2017148:	18c00c03 	ldbu	r3,48(r3)
 201714c:	18c00814 	ori	r3,r3,32
 2017150:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2017154:	d0a74117 	ldw	r2,-25340(gp)
 2017158:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201715c:	d0a74117 	ldw	r2,-25340(gp)
 2017160:	e0ffff0b 	ldhu	r3,-4(fp)
 2017164:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2017168:	d0a74117 	ldw	r2,-25340(gp)
 201716c:	e0fffc17 	ldw	r3,-16(fp)
 2017170:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2017174:	e0bffc17 	ldw	r2,-16(fp)
 2017178:	e0fffd0b 	ldhu	r3,-12(fp)
 201717c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2017180:	e0bffc17 	ldw	r2,-16(fp)
 2017184:	e0fffe03 	ldbu	r3,-8(fp)
 2017188:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201718c:	d0e74117 	ldw	r3,-25340(gp)
 2017190:	e0bffc17 	ldw	r2,-16(fp)
 2017194:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2017198:	e0bffb17 	ldw	r2,-20(fp)
 201719c:	10c00117 	ldw	r3,4(r2)
 20171a0:	e0bffc17 	ldw	r2,-16(fp)
 20171a4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 20171a8:	e0bffc17 	ldw	r2,-16(fp)
 20171ac:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 20171b0:	e0bffc17 	ldw	r2,-16(fp)
 20171b4:	e0fffb17 	ldw	r3,-20(fp)
 20171b8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20171bc:	e0bffb17 	ldw	r2,-20(fp)
 20171c0:	10800117 	ldw	r2,4(r2)
 20171c4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20171c8:	e0bff917 	ldw	r2,-28(fp)
 20171cc:	10000326 	beq	r2,zero,20171dc <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20171d0:	e0bff917 	ldw	r2,-28(fp)
 20171d4:	e0fffc17 	ldw	r3,-16(fp)
 20171d8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20171dc:	e0bffb17 	ldw	r2,-20(fp)
 20171e0:	e0fffc17 	ldw	r3,-16(fp)
 20171e4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 20171e8:	d0a74117 	ldw	r2,-25340(gp)
 20171ec:	10800d03 	ldbu	r2,52(r2)
 20171f0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 20171f4:	e0fffa03 	ldbu	r3,-24(fp)
 20171f8:	e13ffa03 	ldbu	r4,-24(fp)
 20171fc:	d0a73e44 	addi	r2,gp,-25351
 2017200:	2085883a 	add	r2,r4,r2
 2017204:	10800003 	ldbu	r2,0(r2)
 2017208:	1009883a 	mov	r4,r2
 201720c:	d0a74117 	ldw	r2,-25340(gp)
 2017210:	10800d43 	ldbu	r2,53(r2)
 2017214:	0084303a 	nor	r2,zero,r2
 2017218:	2084703a 	and	r2,r4,r2
 201721c:	1009883a 	mov	r4,r2
 2017220:	d0a73e44 	addi	r2,gp,-25351
 2017224:	1885883a 	add	r2,r3,r2
 2017228:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 201722c:	e0fffa03 	ldbu	r3,-24(fp)
 2017230:	d0a73e44 	addi	r2,gp,-25351
 2017234:	1885883a 	add	r2,r3,r2
 2017238:	10800003 	ldbu	r2,0(r2)
 201723c:	10803fcc 	andi	r2,r2,255
 2017240:	1000071e 	bne	r2,zero,2017260 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2017244:	d0a74117 	ldw	r2,-25340(gp)
 2017248:	10800d83 	ldbu	r2,54(r2)
 201724c:	0084303a 	nor	r2,zero,r2
 2017250:	1007883a 	mov	r3,r2
 2017254:	d0a73e03 	ldbu	r2,-25352(gp)
 2017258:	1884703a 	and	r2,r3,r2
 201725c:	d0a73e05 	stb	r2,-25352(gp)
    }
}
 2017260:	0001883a 	nop
 2017264:	e037883a 	mov	sp,fp
 2017268:	df000017 	ldw	fp,0(sp)
 201726c:	dec00104 	addi	sp,sp,4
 2017270:	f800283a 	ret

02017274 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2017274:	defffb04 	addi	sp,sp,-20
 2017278:	dfc00415 	stw	ra,16(sp)
 201727c:	df000315 	stw	fp,12(sp)
 2017280:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2017284:	0140dc04 	movi	r5,880
 2017288:	010080f4 	movhi	r4,515
 201728c:	2120f504 	addi	r4,r4,-31788
 2017290:	20154b80 	call	20154b8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 2017294:	008080f4 	movhi	r2,515
 2017298:	10a0f504 	addi	r2,r2,-31788
 201729c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20172a0:	008080f4 	movhi	r2,515
 20172a4:	10a10004 	addi	r2,r2,-31744
 20172a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20172ac:	e03ffd0d 	sth	zero,-12(fp)
 20172b0:	00001306 	br	2017300 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20172b4:	e0bffe17 	ldw	r2,-8(fp)
 20172b8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 20172bc:	e0bffe17 	ldw	r2,-8(fp)
 20172c0:	e0ffff17 	ldw	r3,-4(fp)
 20172c4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 20172c8:	e0bffe17 	ldw	r2,-8(fp)
 20172cc:	00c00fc4 	movi	r3,63
 20172d0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20172d4:	e0bffe17 	ldw	r2,-8(fp)
 20172d8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 20172dc:	e0bffe17 	ldw	r2,-8(fp)
 20172e0:	10800b04 	addi	r2,r2,44
 20172e4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 20172e8:	e0bfff17 	ldw	r2,-4(fp)
 20172ec:	10800b04 	addi	r2,r2,44
 20172f0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20172f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20172f8:	10800044 	addi	r2,r2,1
 20172fc:	e0bffd0d 	sth	r2,-12(fp)
 2017300:	e0bffd0b 	ldhu	r2,-12(fp)
 2017304:	108004f0 	cmpltui	r2,r2,19
 2017308:	103fea1e 	bne	r2,zero,20172b4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201730c:	e0bffe17 	ldw	r2,-8(fp)
 2017310:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2017314:	e0bffe17 	ldw	r2,-8(fp)
 2017318:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201731c:	e0bffe17 	ldw	r2,-8(fp)
 2017320:	00c00fc4 	movi	r3,63
 2017324:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2017328:	e0bffe17 	ldw	r2,-8(fp)
 201732c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2017330:	008080f4 	movhi	r2,515
 2017334:	10a0f504 	addi	r2,r2,-31788
 2017338:	d0a74315 	stw	r2,-25332(gp)
#endif
}
 201733c:	0001883a 	nop
 2017340:	e037883a 	mov	sp,fp
 2017344:	dfc00117 	ldw	ra,4(sp)
 2017348:	df000017 	ldw	fp,0(sp)
 201734c:	dec00204 	addi	sp,sp,8
 2017350:	f800283a 	ret

02017354 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2017354:	defffa04 	addi	sp,sp,-24
 2017358:	dfc00515 	stw	ra,20(sp)
 201735c:	df000415 	stw	fp,16(sp)
 2017360:	df000404 	addi	fp,sp,16
 2017364:	e13ffe15 	stw	r4,-8(fp)
 2017368:	2805883a 	mov	r2,r5
 201736c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2017370:	e0bffe17 	ldw	r2,-8(fp)
 2017374:	10800217 	ldw	r2,8(r2)
 2017378:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201737c:	e0bffd17 	ldw	r2,-12(fp)
 2017380:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 2017384:	e0bffd17 	ldw	r2,-12(fp)
 2017388:	e0ffff0b 	ldhu	r3,-4(fp)
 201738c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2017390:	e0bffd17 	ldw	r2,-12(fp)
 2017394:	10c00c03 	ldbu	r3,48(r2)
 2017398:	00bff7c4 	movi	r2,-33
 201739c:	1884703a 	and	r2,r3,r2
 20173a0:	1007883a 	mov	r3,r2
 20173a4:	e0bffd17 	ldw	r2,-12(fp)
 20173a8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 20173ac:	e0bffd17 	ldw	r2,-12(fp)
 20173b0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 20173b4:	e0bffd17 	ldw	r2,-12(fp)
 20173b8:	10800c03 	ldbu	r2,48(r2)
 20173bc:	10803fcc 	andi	r2,r2,255
 20173c0:	1000181e 	bne	r2,zero,2017424 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 20173c4:	e0bffd17 	ldw	r2,-12(fp)
 20173c8:	10c00d83 	ldbu	r3,54(r2)
 20173cc:	d0a73e03 	ldbu	r2,-25352(gp)
 20173d0:	1884b03a 	or	r2,r3,r2
 20173d4:	d0a73e05 	stb	r2,-25352(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20173d8:	e0bffd17 	ldw	r2,-12(fp)
 20173dc:	10800d03 	ldbu	r2,52(r2)
 20173e0:	10c03fcc 	andi	r3,r2,255
 20173e4:	e0bffd17 	ldw	r2,-12(fp)
 20173e8:	10800d03 	ldbu	r2,52(r2)
 20173ec:	11003fcc 	andi	r4,r2,255
 20173f0:	d0a73e44 	addi	r2,gp,-25351
 20173f4:	2085883a 	add	r2,r4,r2
 20173f8:	11000003 	ldbu	r4,0(r2)
 20173fc:	e0bffd17 	ldw	r2,-12(fp)
 2017400:	10800d43 	ldbu	r2,53(r2)
 2017404:	2084b03a 	or	r2,r4,r2
 2017408:	1009883a 	mov	r4,r2
 201740c:	d0a73e44 	addi	r2,gp,-25351
 2017410:	1885883a 	add	r2,r3,r2
 2017414:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2017418:	00800044 	movi	r2,1
 201741c:	e0bffc05 	stb	r2,-16(fp)
 2017420:	00000106 	br	2017428 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 2017424:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2017428:	e13ffe17 	ldw	r4,-8(fp)
 201742c:	20174480 	call	2017448 <OS_FlagUnlink>
    return (sched);
 2017430:	e0bffc03 	ldbu	r2,-16(fp)
}
 2017434:	e037883a 	mov	sp,fp
 2017438:	dfc00117 	ldw	ra,4(sp)
 201743c:	df000017 	ldw	fp,0(sp)
 2017440:	dec00204 	addi	sp,sp,8
 2017444:	f800283a 	ret

02017448 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2017448:	defffa04 	addi	sp,sp,-24
 201744c:	df000515 	stw	fp,20(sp)
 2017450:	df000504 	addi	fp,sp,20
 2017454:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2017458:	e0bfff17 	ldw	r2,-4(fp)
 201745c:	10800117 	ldw	r2,4(r2)
 2017460:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2017464:	e0bfff17 	ldw	r2,-4(fp)
 2017468:	10800017 	ldw	r2,0(r2)
 201746c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2017470:	e0bffb17 	ldw	r2,-20(fp)
 2017474:	10000b1e 	bne	r2,zero,20174a4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2017478:	e0bfff17 	ldw	r2,-4(fp)
 201747c:	10800317 	ldw	r2,12(r2)
 2017480:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 2017484:	e0bffd17 	ldw	r2,-12(fp)
 2017488:	e0fffc17 	ldw	r3,-16(fp)
 201748c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2017490:	e0bffc17 	ldw	r2,-16(fp)
 2017494:	10000b26 	beq	r2,zero,20174c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2017498:	e0bffc17 	ldw	r2,-16(fp)
 201749c:	10000115 	stw	zero,4(r2)
 20174a0:	00000806 	br	20174c4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 20174a4:	e0bffb17 	ldw	r2,-20(fp)
 20174a8:	e0fffc17 	ldw	r3,-16(fp)
 20174ac:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 20174b0:	e0bffc17 	ldw	r2,-16(fp)
 20174b4:	10000326 	beq	r2,zero,20174c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 20174b8:	e0bffc17 	ldw	r2,-16(fp)
 20174bc:	e0fffb17 	ldw	r3,-20(fp)
 20174c0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 20174c4:	e0bfff17 	ldw	r2,-4(fp)
 20174c8:	10800217 	ldw	r2,8(r2)
 20174cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 20174d0:	e0bffe17 	ldw	r2,-8(fp)
 20174d4:	10000a15 	stw	zero,40(r2)
#endif
}
 20174d8:	0001883a 	nop
 20174dc:	e037883a 	mov	sp,fp
 20174e0:	df000017 	ldw	fp,0(sp)
 20174e4:	dec00104 	addi	sp,sp,4
 20174e8:	f800283a 	ret

020174ec <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 20174ec:	defffa04 	addi	sp,sp,-24
 20174f0:	df000515 	stw	fp,20(sp)
 20174f4:	df000504 	addi	fp,sp,20
 20174f8:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 20174fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2017500:	e0bfff17 	ldw	r2,-4(fp)
 2017504:	1000021e 	bne	r2,zero,2017510 <OSMboxAccept+0x24>
        return ((void *)0);
 2017508:	0005883a 	mov	r2,zero
 201750c:	00001906 	br	2017574 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2017510:	e0bfff17 	ldw	r2,-4(fp)
 2017514:	10800003 	ldbu	r2,0(r2)
 2017518:	10803fcc 	andi	r2,r2,255
 201751c:	10800060 	cmpeqi	r2,r2,1
 2017520:	1000021e 	bne	r2,zero,201752c <OSMboxAccept+0x40>
        return ((void *)0);
 2017524:	0005883a 	mov	r2,zero
 2017528:	00001206 	br	2017574 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201752c:	0005303a 	rdctl	r2,status
 2017530:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017534:	e0fffd17 	ldw	r3,-12(fp)
 2017538:	00bfff84 	movi	r2,-2
 201753c:	1884703a 	and	r2,r3,r2
 2017540:	1001703a 	wrctl	status,r2
  
  return context;
 2017544:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017548:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201754c:	e0bfff17 	ldw	r2,-4(fp)
 2017550:	10800117 	ldw	r2,4(r2)
 2017554:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 2017558:	e0bfff17 	ldw	r2,-4(fp)
 201755c:	10000115 	stw	zero,4(r2)
 2017560:	e0bffb17 	ldw	r2,-20(fp)
 2017564:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017568:	e0bffe17 	ldw	r2,-8(fp)
 201756c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 2017570:	e0bffc17 	ldw	r2,-16(fp)
}
 2017574:	e037883a 	mov	sp,fp
 2017578:	df000017 	ldw	fp,0(sp)
 201757c:	dec00104 	addi	sp,sp,4
 2017580:	f800283a 	ret

02017584 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 2017584:	defff904 	addi	sp,sp,-28
 2017588:	dfc00615 	stw	ra,24(sp)
 201758c:	df000515 	stw	fp,20(sp)
 2017590:	df000504 	addi	fp,sp,20
 2017594:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017598:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201759c:	d0a74003 	ldbu	r2,-25344(gp)
 20175a0:	10803fcc 	andi	r2,r2,255
 20175a4:	10000226 	beq	r2,zero,20175b0 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 20175a8:	0005883a 	mov	r2,zero
 20175ac:	00002506 	br	2017644 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20175b0:	0005303a 	rdctl	r2,status
 20175b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20175b8:	e0fffe17 	ldw	r3,-8(fp)
 20175bc:	00bfff84 	movi	r2,-2
 20175c0:	1884703a 	and	r2,r3,r2
 20175c4:	1001703a 	wrctl	status,r2
  
  return context;
 20175c8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20175cc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 20175d0:	d0a73f17 	ldw	r2,-25348(gp)
 20175d4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 20175d8:	d0a73f17 	ldw	r2,-25348(gp)
 20175dc:	10000326 	beq	r2,zero,20175ec <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20175e0:	d0a73f17 	ldw	r2,-25348(gp)
 20175e4:	10800117 	ldw	r2,4(r2)
 20175e8:	d0a73f15 	stw	r2,-25348(gp)
 20175ec:	e0bffb17 	ldw	r2,-20(fp)
 20175f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20175f4:	e0bffc17 	ldw	r2,-16(fp)
 20175f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 20175fc:	e0bffd17 	ldw	r2,-12(fp)
 2017600:	10000f26 	beq	r2,zero,2017640 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 2017604:	e0bffd17 	ldw	r2,-12(fp)
 2017608:	00c00044 	movi	r3,1
 201760c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2017610:	e0bffd17 	ldw	r2,-12(fp)
 2017614:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2017618:	e0bffd17 	ldw	r2,-12(fp)
 201761c:	e0ffff17 	ldw	r3,-4(fp)
 2017620:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 2017624:	e0bffd17 	ldw	r2,-12(fp)
 2017628:	00c00fc4 	movi	r3,63
 201762c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2017630:	e0bffd17 	ldw	r2,-12(fp)
 2017634:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2017638:	e13ffd17 	ldw	r4,-12(fp)
 201763c:	20150d80 	call	20150d8 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 2017640:	e0bffd17 	ldw	r2,-12(fp)
}
 2017644:	e037883a 	mov	sp,fp
 2017648:	dfc00117 	ldw	ra,4(sp)
 201764c:	df000017 	ldw	fp,0(sp)
 2017650:	dec00204 	addi	sp,sp,8
 2017654:	f800283a 	ret

02017658 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017658:	defff304 	addi	sp,sp,-52
 201765c:	dfc00c15 	stw	ra,48(sp)
 2017660:	df000b15 	stw	fp,44(sp)
 2017664:	df000b04 	addi	fp,sp,44
 2017668:	e13ffd15 	stw	r4,-12(fp)
 201766c:	2805883a 	mov	r2,r5
 2017670:	e1bfff15 	stw	r6,-4(fp)
 2017674:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017678:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201767c:	e0bfff17 	ldw	r2,-4(fp)
 2017680:	1000021e 	bne	r2,zero,201768c <OSMboxDel+0x34>
        return (pevent);
 2017684:	e0bffd17 	ldw	r2,-12(fp)
 2017688:	00007e06 	br	2017884 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201768c:	e0bffd17 	ldw	r2,-12(fp)
 2017690:	1000051e 	bne	r2,zero,20176a8 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017694:	e0bfff17 	ldw	r2,-4(fp)
 2017698:	00c00104 	movi	r3,4
 201769c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20176a0:	e0bffd17 	ldw	r2,-12(fp)
 20176a4:	00007706 	br	2017884 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 20176a8:	e0bffd17 	ldw	r2,-12(fp)
 20176ac:	10800003 	ldbu	r2,0(r2)
 20176b0:	10803fcc 	andi	r2,r2,255
 20176b4:	10800060 	cmpeqi	r2,r2,1
 20176b8:	1000051e 	bne	r2,zero,20176d0 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20176bc:	e0bfff17 	ldw	r2,-4(fp)
 20176c0:	00c00044 	movi	r3,1
 20176c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20176c8:	e0bffd17 	ldw	r2,-12(fp)
 20176cc:	00006d06 	br	2017884 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20176d0:	d0a74003 	ldbu	r2,-25344(gp)
 20176d4:	10803fcc 	andi	r2,r2,255
 20176d8:	10000526 	beq	r2,zero,20176f0 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20176dc:	e0bfff17 	ldw	r2,-4(fp)
 20176e0:	00c003c4 	movi	r3,15
 20176e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20176e8:	e0bffd17 	ldw	r2,-12(fp)
 20176ec:	00006506 	br	2017884 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20176f0:	0005303a 	rdctl	r2,status
 20176f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20176f8:	e0fffc17 	ldw	r3,-16(fp)
 20176fc:	00bfff84 	movi	r2,-2
 2017700:	1884703a 	and	r2,r3,r2
 2017704:	1001703a 	wrctl	status,r2
  
  return context;
 2017708:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201770c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2017710:	e0bffd17 	ldw	r2,-12(fp)
 2017714:	10800283 	ldbu	r2,10(r2)
 2017718:	10803fcc 	andi	r2,r2,255
 201771c:	10000326 	beq	r2,zero,201772c <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2017720:	00800044 	movi	r2,1
 2017724:	e0bff505 	stb	r2,-44(fp)
 2017728:	00000106 	br	2017730 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201772c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2017730:	e0bffe03 	ldbu	r2,-8(fp)
 2017734:	10000326 	beq	r2,zero,2017744 <OSMboxDel+0xec>
 2017738:	10800060 	cmpeqi	r2,r2,1
 201773c:	1000281e 	bne	r2,zero,20177e0 <OSMboxDel+0x188>
 2017740:	00004506 	br	2017858 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 2017744:	e0bff503 	ldbu	r2,-44(fp)
 2017748:	1000161e 	bne	r2,zero,20177a4 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201774c:	e0bffd17 	ldw	r2,-12(fp)
 2017750:	00c00fc4 	movi	r3,63
 2017754:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2017758:	e0bffd17 	ldw	r2,-12(fp)
 201775c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 2017760:	e0bffd17 	ldw	r2,-12(fp)
 2017764:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 2017768:	d0e73f17 	ldw	r3,-25348(gp)
 201776c:	e0bffd17 	ldw	r2,-12(fp)
 2017770:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 2017774:	e0bffd17 	ldw	r2,-12(fp)
 2017778:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201777c:	e0bffd17 	ldw	r2,-12(fp)
 2017780:	d0a73f15 	stw	r2,-25348(gp)
 2017784:	e0bff717 	ldw	r2,-36(fp)
 2017788:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201778c:	e0bff817 	ldw	r2,-32(fp)
 2017790:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 2017794:	e0bfff17 	ldw	r2,-4(fp)
 2017798:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201779c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 20177a0:	00003706 	br	2017880 <OSMboxDel+0x228>
 20177a4:	e0bff717 	ldw	r2,-36(fp)
 20177a8:	e0bff915 	stw	r2,-28(fp)
 20177ac:	e0bff917 	ldw	r2,-28(fp)
 20177b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 20177b4:	e0bfff17 	ldw	r2,-4(fp)
 20177b8:	00c01244 	movi	r3,73
 20177bc:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 20177c0:	e0bffd17 	ldw	r2,-12(fp)
 20177c4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20177c8:	00002d06 	br	2017880 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20177cc:	000f883a 	mov	r7,zero
 20177d0:	01800084 	movi	r6,2
 20177d4:	000b883a 	mov	r5,zero
 20177d8:	e13ffd17 	ldw	r4,-12(fp)
 20177dc:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 20177e0:	e0bffd17 	ldw	r2,-12(fp)
 20177e4:	10800283 	ldbu	r2,10(r2)
 20177e8:	10803fcc 	andi	r2,r2,255
 20177ec:	103ff71e 	bne	r2,zero,20177cc <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20177f0:	e0bffd17 	ldw	r2,-12(fp)
 20177f4:	00c00fc4 	movi	r3,63
 20177f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20177fc:	e0bffd17 	ldw	r2,-12(fp)
 2017800:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2017804:	e0bffd17 	ldw	r2,-12(fp)
 2017808:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201780c:	d0e73f17 	ldw	r3,-25348(gp)
 2017810:	e0bffd17 	ldw	r2,-12(fp)
 2017814:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2017818:	e0bffd17 	ldw	r2,-12(fp)
 201781c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2017820:	e0bffd17 	ldw	r2,-12(fp)
 2017824:	d0a73f15 	stw	r2,-25348(gp)
 2017828:	e0bff717 	ldw	r2,-36(fp)
 201782c:	e0bffa15 	stw	r2,-24(fp)
 2017830:	e0bffa17 	ldw	r2,-24(fp)
 2017834:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2017838:	e0bff503 	ldbu	r2,-44(fp)
 201783c:	10800058 	cmpnei	r2,r2,1
 2017840:	1000011e 	bne	r2,zero,2017848 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2017844:	20155740 	call	2015574 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2017848:	e0bfff17 	ldw	r2,-4(fp)
 201784c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2017850:	e03ff615 	stw	zero,-40(fp)
             break;
 2017854:	00000a06 	br	2017880 <OSMboxDel+0x228>
 2017858:	e0bff717 	ldw	r2,-36(fp)
 201785c:	e0bffb15 	stw	r2,-20(fp)
 2017860:	e0bffb17 	ldw	r2,-20(fp)
 2017864:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2017868:	e0bfff17 	ldw	r2,-4(fp)
 201786c:	00c001c4 	movi	r3,7
 2017870:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 2017874:	e0bffd17 	ldw	r2,-12(fp)
 2017878:	e0bff615 	stw	r2,-40(fp)
             break;
 201787c:	0001883a 	nop
    }
    return (pevent_return);
 2017880:	e0bff617 	ldw	r2,-40(fp)
}
 2017884:	e037883a 	mov	sp,fp
 2017888:	dfc00117 	ldw	ra,4(sp)
 201788c:	df000017 	ldw	fp,0(sp)
 2017890:	dec00204 	addi	sp,sp,8
 2017894:	f800283a 	ret

02017898 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2017898:	defff404 	addi	sp,sp,-48
 201789c:	dfc00b15 	stw	ra,44(sp)
 20178a0:	df000a15 	stw	fp,40(sp)
 20178a4:	df000a04 	addi	fp,sp,40
 20178a8:	e13ffd15 	stw	r4,-12(fp)
 20178ac:	2805883a 	mov	r2,r5
 20178b0:	e1bfff15 	stw	r6,-4(fp)
 20178b4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20178b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20178bc:	e0bfff17 	ldw	r2,-4(fp)
 20178c0:	1000021e 	bne	r2,zero,20178cc <OSMboxPend+0x34>
        return ((void *)0);
 20178c4:	0005883a 	mov	r2,zero
 20178c8:	00007b06 	br	2017ab8 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20178cc:	e0bffd17 	ldw	r2,-12(fp)
 20178d0:	1000051e 	bne	r2,zero,20178e8 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20178d4:	e0bfff17 	ldw	r2,-4(fp)
 20178d8:	00c00104 	movi	r3,4
 20178dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20178e0:	0005883a 	mov	r2,zero
 20178e4:	00007406 	br	2017ab8 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 20178e8:	e0bffd17 	ldw	r2,-12(fp)
 20178ec:	10800003 	ldbu	r2,0(r2)
 20178f0:	10803fcc 	andi	r2,r2,255
 20178f4:	10800060 	cmpeqi	r2,r2,1
 20178f8:	1000051e 	bne	r2,zero,2017910 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20178fc:	e0bfff17 	ldw	r2,-4(fp)
 2017900:	00c00044 	movi	r3,1
 2017904:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017908:	0005883a 	mov	r2,zero
 201790c:	00006a06 	br	2017ab8 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2017910:	d0a74003 	ldbu	r2,-25344(gp)
 2017914:	10803fcc 	andi	r2,r2,255
 2017918:	10000526 	beq	r2,zero,2017930 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201791c:	e0bfff17 	ldw	r2,-4(fp)
 2017920:	00c00084 	movi	r3,2
 2017924:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017928:	0005883a 	mov	r2,zero
 201792c:	00006206 	br	2017ab8 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2017930:	d0a73203 	ldbu	r2,-25400(gp)
 2017934:	10803fcc 	andi	r2,r2,255
 2017938:	10000526 	beq	r2,zero,2017950 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201793c:	e0bfff17 	ldw	r2,-4(fp)
 2017940:	00c00344 	movi	r3,13
 2017944:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017948:	0005883a 	mov	r2,zero
 201794c:	00005a06 	br	2017ab8 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017950:	0005303a 	rdctl	r2,status
 2017954:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017958:	e0fffc17 	ldw	r3,-16(fp)
 201795c:	00bfff84 	movi	r2,-2
 2017960:	1884703a 	and	r2,r3,r2
 2017964:	1001703a 	wrctl	status,r2
  
  return context;
 2017968:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201796c:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2017970:	e0bffd17 	ldw	r2,-12(fp)
 2017974:	10800117 	ldw	r2,4(r2)
 2017978:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201797c:	e0bff617 	ldw	r2,-40(fp)
 2017980:	10000a26 	beq	r2,zero,20179ac <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2017984:	e0bffd17 	ldw	r2,-12(fp)
 2017988:	10000115 	stw	zero,4(r2)
 201798c:	e0bff717 	ldw	r2,-36(fp)
 2017990:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017994:	e0bff817 	ldw	r2,-32(fp)
 2017998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201799c:	e0bfff17 	ldw	r2,-4(fp)
 20179a0:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 20179a4:	e0bff617 	ldw	r2,-40(fp)
 20179a8:	00004306 	br	2017ab8 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 20179ac:	d0a74117 	ldw	r2,-25340(gp)
 20179b0:	d0e74117 	ldw	r3,-25340(gp)
 20179b4:	18c00c03 	ldbu	r3,48(r3)
 20179b8:	18c00094 	ori	r3,r3,2
 20179bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20179c0:	d0a74117 	ldw	r2,-25340(gp)
 20179c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 20179c8:	d0a74117 	ldw	r2,-25340(gp)
 20179cc:	e0fffe0b 	ldhu	r3,-8(fp)
 20179d0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 20179d4:	e13ffd17 	ldw	r4,-12(fp)
 20179d8:	2014cc00 	call	2014cc0 <OS_EventTaskWait>
 20179dc:	e0bff717 	ldw	r2,-36(fp)
 20179e0:	e0bffb15 	stw	r2,-20(fp)
 20179e4:	e0bffb17 	ldw	r2,-20(fp)
 20179e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 20179ec:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20179f0:	0005303a 	rdctl	r2,status
 20179f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20179f8:	e0fff917 	ldw	r3,-28(fp)
 20179fc:	00bfff84 	movi	r2,-2
 2017a00:	1884703a 	and	r2,r3,r2
 2017a04:	1001703a 	wrctl	status,r2
  
  return context;
 2017a08:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2017a0c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2017a10:	d0a74117 	ldw	r2,-25340(gp)
 2017a14:	10800c43 	ldbu	r2,49(r2)
 2017a18:	10803fcc 	andi	r2,r2,255
 2017a1c:	10000326 	beq	r2,zero,2017a2c <OSMboxPend+0x194>
 2017a20:	108000a0 	cmpeqi	r2,r2,2
 2017a24:	1000071e 	bne	r2,zero,2017a44 <OSMboxPend+0x1ac>
 2017a28:	00000b06 	br	2017a58 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2017a2c:	d0a74117 	ldw	r2,-25340(gp)
 2017a30:	10800917 	ldw	r2,36(r2)
 2017a34:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2017a38:	e0bfff17 	ldw	r2,-4(fp)
 2017a3c:	10000005 	stb	zero,0(r2)
             break;
 2017a40:	00000e06 	br	2017a7c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2017a44:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2017a48:	e0bfff17 	ldw	r2,-4(fp)
 2017a4c:	00c00384 	movi	r3,14
 2017a50:	10c00005 	stb	r3,0(r2)
             break;
 2017a54:	00000906 	br	2017a7c <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2017a58:	d0a74117 	ldw	r2,-25340(gp)
 2017a5c:	e17ffd17 	ldw	r5,-12(fp)
 2017a60:	1009883a 	mov	r4,r2
 2017a64:	2014f200 	call	2014f20 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2017a68:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2017a6c:	e0bfff17 	ldw	r2,-4(fp)
 2017a70:	00c00284 	movi	r3,10
 2017a74:	10c00005 	stb	r3,0(r2)
             break;
 2017a78:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2017a7c:	d0a74117 	ldw	r2,-25340(gp)
 2017a80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2017a84:	d0a74117 	ldw	r2,-25340(gp)
 2017a88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2017a8c:	d0a74117 	ldw	r2,-25340(gp)
 2017a90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017a94:	d0a74117 	ldw	r2,-25340(gp)
 2017a98:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2017a9c:	d0a74117 	ldw	r2,-25340(gp)
 2017aa0:	10000915 	stw	zero,36(r2)
 2017aa4:	e0bff717 	ldw	r2,-36(fp)
 2017aa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017aac:	e0bffa17 	ldw	r2,-24(fp)
 2017ab0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2017ab4:	e0bff617 	ldw	r2,-40(fp)
}
 2017ab8:	e037883a 	mov	sp,fp
 2017abc:	dfc00117 	ldw	ra,4(sp)
 2017ac0:	df000017 	ldw	fp,0(sp)
 2017ac4:	dec00204 	addi	sp,sp,8
 2017ac8:	f800283a 	ret

02017acc <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017acc:	defff604 	addi	sp,sp,-40
 2017ad0:	dfc00915 	stw	ra,36(sp)
 2017ad4:	df000815 	stw	fp,32(sp)
 2017ad8:	df000804 	addi	fp,sp,32
 2017adc:	e13ffd15 	stw	r4,-12(fp)
 2017ae0:	2805883a 	mov	r2,r5
 2017ae4:	e1bfff15 	stw	r6,-4(fp)
 2017ae8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017aec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2017af0:	e0bfff17 	ldw	r2,-4(fp)
 2017af4:	1000021e 	bne	r2,zero,2017b00 <OSMboxPendAbort+0x34>
        return (0);
 2017af8:	0005883a 	mov	r2,zero
 2017afc:	00004906 	br	2017c24 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017b00:	e0bffd17 	ldw	r2,-12(fp)
 2017b04:	1000051e 	bne	r2,zero,2017b1c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017b08:	e0bfff17 	ldw	r2,-4(fp)
 2017b0c:	00c00104 	movi	r3,4
 2017b10:	10c00005 	stb	r3,0(r2)
        return (0);
 2017b14:	0005883a 	mov	r2,zero
 2017b18:	00004206 	br	2017c24 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2017b1c:	e0bffd17 	ldw	r2,-12(fp)
 2017b20:	10800003 	ldbu	r2,0(r2)
 2017b24:	10803fcc 	andi	r2,r2,255
 2017b28:	10800060 	cmpeqi	r2,r2,1
 2017b2c:	1000051e 	bne	r2,zero,2017b44 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017b30:	e0bfff17 	ldw	r2,-4(fp)
 2017b34:	00c00044 	movi	r3,1
 2017b38:	10c00005 	stb	r3,0(r2)
        return (0);
 2017b3c:	0005883a 	mov	r2,zero
 2017b40:	00003806 	br	2017c24 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b44:	0005303a 	rdctl	r2,status
 2017b48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b4c:	e0fffc17 	ldw	r3,-16(fp)
 2017b50:	00bfff84 	movi	r2,-2
 2017b54:	1884703a 	and	r2,r3,r2
 2017b58:	1001703a 	wrctl	status,r2
  
  return context;
 2017b5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017b60:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2017b64:	e0bffd17 	ldw	r2,-12(fp)
 2017b68:	10800283 	ldbu	r2,10(r2)
 2017b6c:	10803fcc 	andi	r2,r2,255
 2017b70:	10002526 	beq	r2,zero,2017c08 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2017b74:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2017b78:	e0bffe03 	ldbu	r2,-8(fp)
 2017b7c:	10800060 	cmpeqi	r2,r2,1
 2017b80:	10000e26 	beq	r2,zero,2017bbc <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017b84:	00000806 	br	2017ba8 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017b88:	01c00084 	movi	r7,2
 2017b8c:	01800084 	movi	r6,2
 2017b90:	000b883a 	mov	r5,zero
 2017b94:	e13ffd17 	ldw	r4,-12(fp)
 2017b98:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                     nbr_tasks++;
 2017b9c:	e0bff803 	ldbu	r2,-32(fp)
 2017ba0:	10800044 	addi	r2,r2,1
 2017ba4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017ba8:	e0bffd17 	ldw	r2,-12(fp)
 2017bac:	10800283 	ldbu	r2,10(r2)
 2017bb0:	10803fcc 	andi	r2,r2,255
 2017bb4:	103ff41e 	bne	r2,zero,2017b88 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2017bb8:	00000906 	br	2017be0 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017bbc:	01c00084 	movi	r7,2
 2017bc0:	01800084 	movi	r6,2
 2017bc4:	000b883a 	mov	r5,zero
 2017bc8:	e13ffd17 	ldw	r4,-12(fp)
 2017bcc:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 nbr_tasks++;
 2017bd0:	e0bff803 	ldbu	r2,-32(fp)
 2017bd4:	10800044 	addi	r2,r2,1
 2017bd8:	e0bff805 	stb	r2,-32(fp)
                 break;
 2017bdc:	0001883a 	nop
 2017be0:	e0bff917 	ldw	r2,-28(fp)
 2017be4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017be8:	e0bffa17 	ldw	r2,-24(fp)
 2017bec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2017bf0:	20155740 	call	2015574 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2017bf4:	e0bfff17 	ldw	r2,-4(fp)
 2017bf8:	00c00384 	movi	r3,14
 2017bfc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2017c00:	e0bff803 	ldbu	r2,-32(fp)
 2017c04:	00000706 	br	2017c24 <OSMboxPendAbort+0x158>
 2017c08:	e0bff917 	ldw	r2,-28(fp)
 2017c0c:	e0bffb15 	stw	r2,-20(fp)
 2017c10:	e0bffb17 	ldw	r2,-20(fp)
 2017c14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017c18:	e0bfff17 	ldw	r2,-4(fp)
 2017c1c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2017c20:	0005883a 	mov	r2,zero
}
 2017c24:	e037883a 	mov	sp,fp
 2017c28:	dfc00117 	ldw	ra,4(sp)
 2017c2c:	df000017 	ldw	fp,0(sp)
 2017c30:	dec00204 	addi	sp,sp,8
 2017c34:	f800283a 	ret

02017c38 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2017c38:	defff704 	addi	sp,sp,-36
 2017c3c:	dfc00815 	stw	ra,32(sp)
 2017c40:	df000715 	stw	fp,28(sp)
 2017c44:	df000704 	addi	fp,sp,28
 2017c48:	e13ffe15 	stw	r4,-8(fp)
 2017c4c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017c50:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017c54:	e0bffe17 	ldw	r2,-8(fp)
 2017c58:	1000021e 	bne	r2,zero,2017c64 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2017c5c:	00800104 	movi	r2,4
 2017c60:	00003406 	br	2017d34 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2017c64:	e0bfff17 	ldw	r2,-4(fp)
 2017c68:	1000021e 	bne	r2,zero,2017c74 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2017c6c:	008000c4 	movi	r2,3
 2017c70:	00003006 	br	2017d34 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017c74:	e0bffe17 	ldw	r2,-8(fp)
 2017c78:	10800003 	ldbu	r2,0(r2)
 2017c7c:	10803fcc 	andi	r2,r2,255
 2017c80:	10800060 	cmpeqi	r2,r2,1
 2017c84:	1000021e 	bne	r2,zero,2017c90 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2017c88:	00800044 	movi	r2,1
 2017c8c:	00002906 	br	2017d34 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017c90:	0005303a 	rdctl	r2,status
 2017c94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017c98:	e0fffd17 	ldw	r3,-12(fp)
 2017c9c:	00bfff84 	movi	r2,-2
 2017ca0:	1884703a 	and	r2,r3,r2
 2017ca4:	1001703a 	wrctl	status,r2
  
  return context;
 2017ca8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017cac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2017cb0:	e0bffe17 	ldw	r2,-8(fp)
 2017cb4:	10800283 	ldbu	r2,10(r2)
 2017cb8:	10803fcc 	andi	r2,r2,255
 2017cbc:	10000c26 	beq	r2,zero,2017cf0 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017cc0:	000f883a 	mov	r7,zero
 2017cc4:	01800084 	movi	r6,2
 2017cc8:	e17fff17 	ldw	r5,-4(fp)
 2017ccc:	e13ffe17 	ldw	r4,-8(fp)
 2017cd0:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 2017cd4:	e0bff917 	ldw	r2,-28(fp)
 2017cd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017cdc:	e0bffa17 	ldw	r2,-24(fp)
 2017ce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2017ce4:	20155740 	call	2015574 <OS_Sched>
        return (OS_ERR_NONE);
 2017ce8:	0005883a 	mov	r2,zero
 2017cec:	00001106 	br	2017d34 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2017cf0:	e0bffe17 	ldw	r2,-8(fp)
 2017cf4:	10800117 	ldw	r2,4(r2)
 2017cf8:	10000626 	beq	r2,zero,2017d14 <OSMboxPost+0xdc>
 2017cfc:	e0bff917 	ldw	r2,-28(fp)
 2017d00:	e0bffb15 	stw	r2,-20(fp)
 2017d04:	e0bffb17 	ldw	r2,-20(fp)
 2017d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2017d0c:	00800504 	movi	r2,20
 2017d10:	00000806 	br	2017d34 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2017d14:	e0bffe17 	ldw	r2,-8(fp)
 2017d18:	e0ffff17 	ldw	r3,-4(fp)
 2017d1c:	10c00115 	stw	r3,4(r2)
 2017d20:	e0bff917 	ldw	r2,-28(fp)
 2017d24:	e0bffc15 	stw	r2,-16(fp)
 2017d28:	e0bffc17 	ldw	r2,-16(fp)
 2017d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2017d30:	0005883a 	mov	r2,zero
}
 2017d34:	e037883a 	mov	sp,fp
 2017d38:	dfc00117 	ldw	ra,4(sp)
 2017d3c:	df000017 	ldw	fp,0(sp)
 2017d40:	dec00204 	addi	sp,sp,8
 2017d44:	f800283a 	ret

02017d48 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2017d48:	defff604 	addi	sp,sp,-40
 2017d4c:	dfc00915 	stw	ra,36(sp)
 2017d50:	df000815 	stw	fp,32(sp)
 2017d54:	df000804 	addi	fp,sp,32
 2017d58:	e13ffd15 	stw	r4,-12(fp)
 2017d5c:	e17ffe15 	stw	r5,-8(fp)
 2017d60:	3005883a 	mov	r2,r6
 2017d64:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017d68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017d6c:	e0bffd17 	ldw	r2,-12(fp)
 2017d70:	1000021e 	bne	r2,zero,2017d7c <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2017d74:	00800104 	movi	r2,4
 2017d78:	00004506 	br	2017e90 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2017d7c:	e0bffe17 	ldw	r2,-8(fp)
 2017d80:	1000021e 	bne	r2,zero,2017d8c <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2017d84:	008000c4 	movi	r2,3
 2017d88:	00004106 	br	2017e90 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017d8c:	e0bffd17 	ldw	r2,-12(fp)
 2017d90:	10800003 	ldbu	r2,0(r2)
 2017d94:	10803fcc 	andi	r2,r2,255
 2017d98:	10800060 	cmpeqi	r2,r2,1
 2017d9c:	1000021e 	bne	r2,zero,2017da8 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2017da0:	00800044 	movi	r2,1
 2017da4:	00003a06 	br	2017e90 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017da8:	0005303a 	rdctl	r2,status
 2017dac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017db0:	e0fffc17 	ldw	r3,-16(fp)
 2017db4:	00bfff84 	movi	r2,-2
 2017db8:	1884703a 	and	r2,r3,r2
 2017dbc:	1001703a 	wrctl	status,r2
  
  return context;
 2017dc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017dc4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2017dc8:	e0bffd17 	ldw	r2,-12(fp)
 2017dcc:	10800283 	ldbu	r2,10(r2)
 2017dd0:	10803fcc 	andi	r2,r2,255
 2017dd4:	10001d26 	beq	r2,zero,2017e4c <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2017dd8:	e0bfff03 	ldbu	r2,-4(fp)
 2017ddc:	1080004c 	andi	r2,r2,1
 2017de0:	10000b26 	beq	r2,zero,2017e10 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2017de4:	00000506 	br	2017dfc <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017de8:	000f883a 	mov	r7,zero
 2017dec:	01800084 	movi	r6,2
 2017df0:	e17ffe17 	ldw	r5,-8(fp)
 2017df4:	e13ffd17 	ldw	r4,-12(fp)
 2017df8:	2014b280 	call	2014b28 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2017dfc:	e0bffd17 	ldw	r2,-12(fp)
 2017e00:	10800283 	ldbu	r2,10(r2)
 2017e04:	10803fcc 	andi	r2,r2,255
 2017e08:	103ff71e 	bne	r2,zero,2017de8 <OSMboxPostOpt+0xa0>
 2017e0c:	00000506 	br	2017e24 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017e10:	000f883a 	mov	r7,zero
 2017e14:	01800084 	movi	r6,2
 2017e18:	e17ffe17 	ldw	r5,-8(fp)
 2017e1c:	e13ffd17 	ldw	r4,-12(fp)
 2017e20:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 2017e24:	e0bff817 	ldw	r2,-32(fp)
 2017e28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e2c:	e0bff917 	ldw	r2,-28(fp)
 2017e30:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2017e34:	e0bfff03 	ldbu	r2,-4(fp)
 2017e38:	1080010c 	andi	r2,r2,4
 2017e3c:	1000011e 	bne	r2,zero,2017e44 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2017e40:	20155740 	call	2015574 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2017e44:	0005883a 	mov	r2,zero
 2017e48:	00001106 	br	2017e90 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2017e4c:	e0bffd17 	ldw	r2,-12(fp)
 2017e50:	10800117 	ldw	r2,4(r2)
 2017e54:	10000626 	beq	r2,zero,2017e70 <OSMboxPostOpt+0x128>
 2017e58:	e0bff817 	ldw	r2,-32(fp)
 2017e5c:	e0bffa15 	stw	r2,-24(fp)
 2017e60:	e0bffa17 	ldw	r2,-24(fp)
 2017e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2017e68:	00800504 	movi	r2,20
 2017e6c:	00000806 	br	2017e90 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2017e70:	e0bffd17 	ldw	r2,-12(fp)
 2017e74:	e0fffe17 	ldw	r3,-8(fp)
 2017e78:	10c00115 	stw	r3,4(r2)
 2017e7c:	e0bff817 	ldw	r2,-32(fp)
 2017e80:	e0bffb15 	stw	r2,-20(fp)
 2017e84:	e0bffb17 	ldw	r2,-20(fp)
 2017e88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2017e8c:	0005883a 	mov	r2,zero
}
 2017e90:	e037883a 	mov	sp,fp
 2017e94:	dfc00117 	ldw	ra,4(sp)
 2017e98:	df000017 	ldw	fp,0(sp)
 2017e9c:	dec00204 	addi	sp,sp,8
 2017ea0:	f800283a 	ret

02017ea4 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 2017ea4:	defff704 	addi	sp,sp,-36
 2017ea8:	df000815 	stw	fp,32(sp)
 2017eac:	df000804 	addi	fp,sp,32
 2017eb0:	e13ffe15 	stw	r4,-8(fp)
 2017eb4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017eb8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017ebc:	e0bffe17 	ldw	r2,-8(fp)
 2017ec0:	1000021e 	bne	r2,zero,2017ecc <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2017ec4:	00800104 	movi	r2,4
 2017ec8:	00003606 	br	2017fa4 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 2017ecc:	e0bfff17 	ldw	r2,-4(fp)
 2017ed0:	1000021e 	bne	r2,zero,2017edc <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2017ed4:	00800244 	movi	r2,9
 2017ed8:	00003206 	br	2017fa4 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2017edc:	e0bffe17 	ldw	r2,-8(fp)
 2017ee0:	10800003 	ldbu	r2,0(r2)
 2017ee4:	10803fcc 	andi	r2,r2,255
 2017ee8:	10800060 	cmpeqi	r2,r2,1
 2017eec:	1000021e 	bne	r2,zero,2017ef8 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2017ef0:	00800044 	movi	r2,1
 2017ef4:	00002b06 	br	2017fa4 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ef8:	0005303a 	rdctl	r2,status
 2017efc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f00:	e0fffd17 	ldw	r3,-12(fp)
 2017f04:	00bfff84 	movi	r2,-2
 2017f08:	1884703a 	and	r2,r3,r2
 2017f0c:	1001703a 	wrctl	status,r2
  
  return context;
 2017f10:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017f14:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2017f18:	e0bffe17 	ldw	r2,-8(fp)
 2017f1c:	10c00283 	ldbu	r3,10(r2)
 2017f20:	e0bfff17 	ldw	r2,-4(fp)
 2017f24:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2017f28:	e0bffe17 	ldw	r2,-8(fp)
 2017f2c:	108002c4 	addi	r2,r2,11
 2017f30:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 2017f34:	e0bfff17 	ldw	r2,-4(fp)
 2017f38:	10800104 	addi	r2,r2,4
 2017f3c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017f40:	e03ff805 	stb	zero,-32(fp)
 2017f44:	00000b06 	br	2017f74 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2017f48:	e0bffa17 	ldw	r2,-24(fp)
 2017f4c:	10c00044 	addi	r3,r2,1
 2017f50:	e0fffa15 	stw	r3,-24(fp)
 2017f54:	e0fff917 	ldw	r3,-28(fp)
 2017f58:	19000044 	addi	r4,r3,1
 2017f5c:	e13ff915 	stw	r4,-28(fp)
 2017f60:	18c00003 	ldbu	r3,0(r3)
 2017f64:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017f68:	e0bff803 	ldbu	r2,-32(fp)
 2017f6c:	10800044 	addi	r2,r2,1
 2017f70:	e0bff805 	stb	r2,-32(fp)
 2017f74:	e0bff803 	ldbu	r2,-32(fp)
 2017f78:	108000f0 	cmpltui	r2,r2,3
 2017f7c:	103ff21e 	bne	r2,zero,2017f48 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2017f80:	e0bffe17 	ldw	r2,-8(fp)
 2017f84:	10c00117 	ldw	r3,4(r2)
 2017f88:	e0bfff17 	ldw	r2,-4(fp)
 2017f8c:	10c00015 	stw	r3,0(r2)
 2017f90:	e0bffb17 	ldw	r2,-20(fp)
 2017f94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f98:	e0bffc17 	ldw	r2,-16(fp)
 2017f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2017fa0:	0005883a 	mov	r2,zero
}
 2017fa4:	e037883a 	mov	sp,fp
 2017fa8:	df000017 	ldw	fp,0(sp)
 2017fac:	dec00104 	addi	sp,sp,4
 2017fb0:	f800283a 	ret

02017fb4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 2017fb4:	defff404 	addi	sp,sp,-48
 2017fb8:	df000b15 	stw	fp,44(sp)
 2017fbc:	df000b04 	addi	fp,sp,44
 2017fc0:	e13ffc15 	stw	r4,-16(fp)
 2017fc4:	e17ffd15 	stw	r5,-12(fp)
 2017fc8:	e1bffe15 	stw	r6,-8(fp)
 2017fcc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017fd0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2017fd4:	e0bfff17 	ldw	r2,-4(fp)
 2017fd8:	1000021e 	bne	r2,zero,2017fe4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 2017fdc:	0005883a 	mov	r2,zero
 2017fe0:	00006506 	br	2018178 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 2017fe4:	e0bffc17 	ldw	r2,-16(fp)
 2017fe8:	1000051e 	bne	r2,zero,2018000 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2017fec:	e0bfff17 	ldw	r2,-4(fp)
 2017ff0:	00c01884 	movi	r3,98
 2017ff4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2017ff8:	0005883a 	mov	r2,zero
 2017ffc:	00005e06 	br	2018178 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2018000:	e0bffc17 	ldw	r2,-16(fp)
 2018004:	108000cc 	andi	r2,r2,3
 2018008:	10000526 	beq	r2,zero,2018020 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201800c:	e0bfff17 	ldw	r2,-4(fp)
 2018010:	00c01884 	movi	r3,98
 2018014:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018018:	0005883a 	mov	r2,zero
 201801c:	00005606 	br	2018178 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2018020:	e0bffd17 	ldw	r2,-12(fp)
 2018024:	108000a8 	cmpgeui	r2,r2,2
 2018028:	1000051e 	bne	r2,zero,2018040 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201802c:	e0bfff17 	ldw	r2,-4(fp)
 2018030:	00c016c4 	movi	r3,91
 2018034:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018038:	0005883a 	mov	r2,zero
 201803c:	00004e06 	br	2018178 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2018040:	e0bffe17 	ldw	r2,-8(fp)
 2018044:	10800128 	cmpgeui	r2,r2,4
 2018048:	1000051e 	bne	r2,zero,2018060 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201804c:	e0bfff17 	ldw	r2,-4(fp)
 2018050:	00c01704 	movi	r3,92
 2018054:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018058:	0005883a 	mov	r2,zero
 201805c:	00004606 	br	2018178 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018060:	0005303a 	rdctl	r2,status
 2018064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018068:	e0fffb17 	ldw	r3,-20(fp)
 201806c:	00bfff84 	movi	r2,-2
 2018070:	1884703a 	and	r2,r3,r2
 2018074:	1001703a 	wrctl	status,r2
  
  return context;
 2018078:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201807c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2018080:	d0a73b17 	ldw	r2,-25364(gp)
 2018084:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2018088:	d0a73b17 	ldw	r2,-25364(gp)
 201808c:	10000326 	beq	r2,zero,201809c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2018090:	d0a73b17 	ldw	r2,-25364(gp)
 2018094:	10800117 	ldw	r2,4(r2)
 2018098:	d0a73b15 	stw	r2,-25364(gp)
 201809c:	e0bff817 	ldw	r2,-32(fp)
 20180a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20180a4:	e0bff917 	ldw	r2,-28(fp)
 20180a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 20180ac:	e0bffa17 	ldw	r2,-24(fp)
 20180b0:	1000051e 	bne	r2,zero,20180c8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 20180b4:	e0bfff17 	ldw	r2,-4(fp)
 20180b8:	00c01684 	movi	r3,90
 20180bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20180c0:	0005883a 	mov	r2,zero
 20180c4:	00002c06 	br	2018178 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20180c8:	e0bffc17 	ldw	r2,-16(fp)
 20180cc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20180d0:	e0fffc17 	ldw	r3,-16(fp)
 20180d4:	e0bffe17 	ldw	r2,-8(fp)
 20180d8:	1885883a 	add	r2,r3,r2
 20180dc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20180e0:	e03ff715 	stw	zero,-36(fp)
 20180e4:	00000c06 	br	2018118 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 20180e8:	e0bff617 	ldw	r2,-40(fp)
 20180ec:	e0fff517 	ldw	r3,-44(fp)
 20180f0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 20180f4:	e0bff517 	ldw	r2,-44(fp)
 20180f8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 20180fc:	e0fff517 	ldw	r3,-44(fp)
 2018100:	e0bffe17 	ldw	r2,-8(fp)
 2018104:	1885883a 	add	r2,r3,r2
 2018108:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201810c:	e0bff717 	ldw	r2,-36(fp)
 2018110:	10800044 	addi	r2,r2,1
 2018114:	e0bff715 	stw	r2,-36(fp)
 2018118:	e0bffd17 	ldw	r2,-12(fp)
 201811c:	10bfffc4 	addi	r2,r2,-1
 2018120:	e0fff717 	ldw	r3,-36(fp)
 2018124:	18bff036 	bltu	r3,r2,20180e8 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2018128:	e0bff617 	ldw	r2,-40(fp)
 201812c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2018130:	e0bffa17 	ldw	r2,-24(fp)
 2018134:	e0fffc17 	ldw	r3,-16(fp)
 2018138:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201813c:	e0bffa17 	ldw	r2,-24(fp)
 2018140:	e0fffc17 	ldw	r3,-16(fp)
 2018144:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2018148:	e0bffa17 	ldw	r2,-24(fp)
 201814c:	e0fffd17 	ldw	r3,-12(fp)
 2018150:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 2018154:	e0bffa17 	ldw	r2,-24(fp)
 2018158:	e0fffd17 	ldw	r3,-12(fp)
 201815c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2018160:	e0bffa17 	ldw	r2,-24(fp)
 2018164:	e0fffe17 	ldw	r3,-8(fp)
 2018168:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201816c:	e0bfff17 	ldw	r2,-4(fp)
 2018170:	10000005 	stb	zero,0(r2)
    return (pmem);
 2018174:	e0bffa17 	ldw	r2,-24(fp)
}
 2018178:	e037883a 	mov	sp,fp
 201817c:	df000017 	ldw	fp,0(sp)
 2018180:	dec00104 	addi	sp,sp,4
 2018184:	f800283a 	ret

02018188 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2018188:	defff804 	addi	sp,sp,-32
 201818c:	df000715 	stw	fp,28(sp)
 2018190:	df000704 	addi	fp,sp,28
 2018194:	e13ffe15 	stw	r4,-8(fp)
 2018198:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201819c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20181a0:	e0bfff17 	ldw	r2,-4(fp)
 20181a4:	1000021e 	bne	r2,zero,20181b0 <OSMemGet+0x28>
        return ((void *)0);
 20181a8:	0005883a 	mov	r2,zero
 20181ac:	00002e06 	br	2018268 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 20181b0:	e0bffe17 	ldw	r2,-8(fp)
 20181b4:	1000051e 	bne	r2,zero,20181cc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20181b8:	e0bfff17 	ldw	r2,-4(fp)
 20181bc:	00c01804 	movi	r3,96
 20181c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20181c4:	0005883a 	mov	r2,zero
 20181c8:	00002706 	br	2018268 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20181cc:	0005303a 	rdctl	r2,status
 20181d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20181d4:	e0fffd17 	ldw	r3,-12(fp)
 20181d8:	00bfff84 	movi	r2,-2
 20181dc:	1884703a 	and	r2,r3,r2
 20181e0:	1001703a 	wrctl	status,r2
  
  return context;
 20181e4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20181e8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 20181ec:	e0bffe17 	ldw	r2,-8(fp)
 20181f0:	10800417 	ldw	r2,16(r2)
 20181f4:	10001426 	beq	r2,zero,2018248 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 20181f8:	e0bffe17 	ldw	r2,-8(fp)
 20181fc:	10800117 	ldw	r2,4(r2)
 2018200:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2018204:	e0bffb17 	ldw	r2,-20(fp)
 2018208:	10c00017 	ldw	r3,0(r2)
 201820c:	e0bffe17 	ldw	r2,-8(fp)
 2018210:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2018214:	e0bffe17 	ldw	r2,-8(fp)
 2018218:	10800417 	ldw	r2,16(r2)
 201821c:	10ffffc4 	addi	r3,r2,-1
 2018220:	e0bffe17 	ldw	r2,-8(fp)
 2018224:	10c00415 	stw	r3,16(r2)
 2018228:	e0bff917 	ldw	r2,-28(fp)
 201822c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018230:	e0bffa17 	ldw	r2,-24(fp)
 2018234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2018238:	e0bfff17 	ldw	r2,-4(fp)
 201823c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2018240:	e0bffb17 	ldw	r2,-20(fp)
 2018244:	00000806 	br	2018268 <OSMemGet+0xe0>
 2018248:	e0bff917 	ldw	r2,-28(fp)
 201824c:	e0bffc15 	stw	r2,-16(fp)
 2018250:	e0bffc17 	ldw	r2,-16(fp)
 2018254:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2018258:	e0bfff17 	ldw	r2,-4(fp)
 201825c:	00c01744 	movi	r3,93
 2018260:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2018264:	0005883a 	mov	r2,zero
}
 2018268:	e037883a 	mov	sp,fp
 201826c:	df000017 	ldw	fp,0(sp)
 2018270:	dec00104 	addi	sp,sp,4
 2018274:	f800283a 	ret

02018278 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018278:	defff704 	addi	sp,sp,-36
 201827c:	dfc00815 	stw	ra,32(sp)
 2018280:	df000715 	stw	fp,28(sp)
 2018284:	df000704 	addi	fp,sp,28
 2018288:	e13ffd15 	stw	r4,-12(fp)
 201828c:	e17ffe15 	stw	r5,-8(fp)
 2018290:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018294:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018298:	e0bfff17 	ldw	r2,-4(fp)
 201829c:	1000021e 	bne	r2,zero,20182a8 <OSMemNameGet+0x30>
        return (0);
 20182a0:	0005883a 	mov	r2,zero
 20182a4:	00002b06 	br	2018354 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20182a8:	e0bffd17 	ldw	r2,-12(fp)
 20182ac:	1000051e 	bne	r2,zero,20182c4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20182b0:	e0bfff17 	ldw	r2,-4(fp)
 20182b4:	00c01804 	movi	r3,96
 20182b8:	10c00005 	stb	r3,0(r2)
        return (0);
 20182bc:	0005883a 	mov	r2,zero
 20182c0:	00002406 	br	2018354 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20182c4:	e0bffe17 	ldw	r2,-8(fp)
 20182c8:	1000051e 	bne	r2,zero,20182e0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20182cc:	e0bfff17 	ldw	r2,-4(fp)
 20182d0:	00c00304 	movi	r3,12
 20182d4:	10c00005 	stb	r3,0(r2)
        return (0);
 20182d8:	0005883a 	mov	r2,zero
 20182dc:	00001d06 	br	2018354 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20182e0:	d0a74003 	ldbu	r2,-25344(gp)
 20182e4:	10803fcc 	andi	r2,r2,255
 20182e8:	10000526 	beq	r2,zero,2018300 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20182ec:	e0bfff17 	ldw	r2,-4(fp)
 20182f0:	00c00444 	movi	r3,17
 20182f4:	10c00005 	stb	r3,0(r2)
        return (0);
 20182f8:	0005883a 	mov	r2,zero
 20182fc:	00001506 	br	2018354 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018300:	0005303a 	rdctl	r2,status
 2018304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018308:	e0fffb17 	ldw	r3,-20(fp)
 201830c:	00bfff84 	movi	r2,-2
 2018310:	1884703a 	and	r2,r3,r2
 2018314:	1001703a 	wrctl	status,r2
  
  return context;
 2018318:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201831c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2018320:	e0bffd17 	ldw	r2,-12(fp)
 2018324:	10800504 	addi	r2,r2,20
 2018328:	100b883a 	mov	r5,r2
 201832c:	e13ffe17 	ldw	r4,-8(fp)
 2018330:	20156b80 	call	20156b8 <OS_StrCopy>
 2018334:	e0bffa05 	stb	r2,-24(fp)
 2018338:	e0bff917 	ldw	r2,-28(fp)
 201833c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018340:	e0bffc17 	ldw	r2,-16(fp)
 2018344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018348:	e0bfff17 	ldw	r2,-4(fp)
 201834c:	10000005 	stb	zero,0(r2)
    return (len);
 2018350:	e0bffa03 	ldbu	r2,-24(fp)
}
 2018354:	e037883a 	mov	sp,fp
 2018358:	dfc00117 	ldw	ra,4(sp)
 201835c:	df000017 	ldw	fp,0(sp)
 2018360:	dec00204 	addi	sp,sp,8
 2018364:	f800283a 	ret

02018368 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018368:	defff604 	addi	sp,sp,-40
 201836c:	dfc00915 	stw	ra,36(sp)
 2018370:	df000815 	stw	fp,32(sp)
 2018374:	df000804 	addi	fp,sp,32
 2018378:	e13ffd15 	stw	r4,-12(fp)
 201837c:	e17ffe15 	stw	r5,-8(fp)
 2018380:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018388:	e0bfff17 	ldw	r2,-4(fp)
 201838c:	10003526 	beq	r2,zero,2018464 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2018390:	e0bffd17 	ldw	r2,-12(fp)
 2018394:	1000041e 	bne	r2,zero,20183a8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2018398:	e0bfff17 	ldw	r2,-4(fp)
 201839c:	00c01804 	movi	r3,96
 20183a0:	10c00005 	stb	r3,0(r2)
        return;
 20183a4:	00003006 	br	2018468 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20183a8:	e0bffe17 	ldw	r2,-8(fp)
 20183ac:	1000041e 	bne	r2,zero,20183c0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20183b0:	e0bfff17 	ldw	r2,-4(fp)
 20183b4:	00c00304 	movi	r3,12
 20183b8:	10c00005 	stb	r3,0(r2)
        return;
 20183bc:	00002a06 	br	2018468 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20183c0:	d0a74003 	ldbu	r2,-25344(gp)
 20183c4:	10803fcc 	andi	r2,r2,255
 20183c8:	10000426 	beq	r2,zero,20183dc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20183cc:	e0bfff17 	ldw	r2,-4(fp)
 20183d0:	00c00484 	movi	r3,18
 20183d4:	10c00005 	stb	r3,0(r2)
        return;
 20183d8:	00002306 	br	2018468 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20183dc:	0005303a 	rdctl	r2,status
 20183e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20183e4:	e0fffc17 	ldw	r3,-16(fp)
 20183e8:	00bfff84 	movi	r2,-2
 20183ec:	1884703a 	and	r2,r3,r2
 20183f0:	1001703a 	wrctl	status,r2
  
  return context;
 20183f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20183f8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 20183fc:	e13ffe17 	ldw	r4,-8(fp)
 2018400:	201572c0 	call	201572c <OS_StrLen>
 2018404:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2018408:	e0bffa03 	ldbu	r2,-24(fp)
 201840c:	10800830 	cmpltui	r2,r2,32
 2018410:	1000081e 	bne	r2,zero,2018434 <OSMemNameSet+0xcc>
 2018414:	e0bff817 	ldw	r2,-32(fp)
 2018418:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201841c:	e0bff917 	ldw	r2,-28(fp)
 2018420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2018424:	e0bfff17 	ldw	r2,-4(fp)
 2018428:	00c018c4 	movi	r3,99
 201842c:	10c00005 	stb	r3,0(r2)
        return;
 2018430:	00000d06 	br	2018468 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2018434:	e0bffd17 	ldw	r2,-12(fp)
 2018438:	10800504 	addi	r2,r2,20
 201843c:	e17ffe17 	ldw	r5,-8(fp)
 2018440:	1009883a 	mov	r4,r2
 2018444:	20156b80 	call	20156b8 <OS_StrCopy>
 2018448:	e0bff817 	ldw	r2,-32(fp)
 201844c:	e0bffb15 	stw	r2,-20(fp)
 2018450:	e0bffb17 	ldw	r2,-20(fp)
 2018454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018458:	e0bfff17 	ldw	r2,-4(fp)
 201845c:	10000005 	stb	zero,0(r2)
 2018460:	00000106 	br	2018468 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2018464:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2018468:	e037883a 	mov	sp,fp
 201846c:	dfc00117 	ldw	ra,4(sp)
 2018470:	df000017 	ldw	fp,0(sp)
 2018474:	dec00204 	addi	sp,sp,8
 2018478:	f800283a 	ret

0201847c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201847c:	defff904 	addi	sp,sp,-28
 2018480:	df000615 	stw	fp,24(sp)
 2018484:	df000604 	addi	fp,sp,24
 2018488:	e13ffe15 	stw	r4,-8(fp)
 201848c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018490:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2018494:	e0bffe17 	ldw	r2,-8(fp)
 2018498:	1000021e 	bne	r2,zero,20184a4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201849c:	00801804 	movi	r2,96
 20184a0:	00002806 	br	2018544 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 20184a4:	e0bfff17 	ldw	r2,-4(fp)
 20184a8:	1000021e 	bne	r2,zero,20184b4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 20184ac:	008017c4 	movi	r2,95
 20184b0:	00002406 	br	2018544 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20184b4:	0005303a 	rdctl	r2,status
 20184b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20184bc:	e0fffd17 	ldw	r3,-12(fp)
 20184c0:	00bfff84 	movi	r2,-2
 20184c4:	1884703a 	and	r2,r3,r2
 20184c8:	1001703a 	wrctl	status,r2
  
  return context;
 20184cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20184d0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 20184d4:	e0bffe17 	ldw	r2,-8(fp)
 20184d8:	10c00417 	ldw	r3,16(r2)
 20184dc:	e0bffe17 	ldw	r2,-8(fp)
 20184e0:	10800317 	ldw	r2,12(r2)
 20184e4:	18800636 	bltu	r3,r2,2018500 <OSMemPut+0x84>
 20184e8:	e0bffa17 	ldw	r2,-24(fp)
 20184ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184f0:	e0bffb17 	ldw	r2,-20(fp)
 20184f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 20184f8:	00801784 	movi	r2,94
 20184fc:	00001106 	br	2018544 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2018500:	e0bffe17 	ldw	r2,-8(fp)
 2018504:	10c00117 	ldw	r3,4(r2)
 2018508:	e0bfff17 	ldw	r2,-4(fp)
 201850c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2018510:	e0bffe17 	ldw	r2,-8(fp)
 2018514:	e0ffff17 	ldw	r3,-4(fp)
 2018518:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201851c:	e0bffe17 	ldw	r2,-8(fp)
 2018520:	10800417 	ldw	r2,16(r2)
 2018524:	10c00044 	addi	r3,r2,1
 2018528:	e0bffe17 	ldw	r2,-8(fp)
 201852c:	10c00415 	stw	r3,16(r2)
 2018530:	e0bffa17 	ldw	r2,-24(fp)
 2018534:	e0bffc15 	stw	r2,-16(fp)
 2018538:	e0bffc17 	ldw	r2,-16(fp)
 201853c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2018540:	0005883a 	mov	r2,zero
}
 2018544:	e037883a 	mov	sp,fp
 2018548:	df000017 	ldw	fp,0(sp)
 201854c:	dec00104 	addi	sp,sp,4
 2018550:	f800283a 	ret

02018554 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2018554:	defffa04 	addi	sp,sp,-24
 2018558:	df000515 	stw	fp,20(sp)
 201855c:	df000504 	addi	fp,sp,20
 2018560:	e13ffe15 	stw	r4,-8(fp)
 2018564:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018568:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201856c:	e0bffe17 	ldw	r2,-8(fp)
 2018570:	1000021e 	bne	r2,zero,201857c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2018574:	00801804 	movi	r2,96
 2018578:	00002c06 	br	201862c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201857c:	e0bfff17 	ldw	r2,-4(fp)
 2018580:	1000021e 	bne	r2,zero,201858c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 2018584:	00801844 	movi	r2,97
 2018588:	00002806 	br	201862c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201858c:	0005303a 	rdctl	r2,status
 2018590:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018594:	e0fffc17 	ldw	r3,-16(fp)
 2018598:	00bfff84 	movi	r2,-2
 201859c:	1884703a 	and	r2,r3,r2
 20185a0:	1001703a 	wrctl	status,r2
  
  return context;
 20185a4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20185a8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 20185ac:	e0bffe17 	ldw	r2,-8(fp)
 20185b0:	10c00017 	ldw	r3,0(r2)
 20185b4:	e0bfff17 	ldw	r2,-4(fp)
 20185b8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 20185bc:	e0bffe17 	ldw	r2,-8(fp)
 20185c0:	10c00117 	ldw	r3,4(r2)
 20185c4:	e0bfff17 	ldw	r2,-4(fp)
 20185c8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 20185cc:	e0bffe17 	ldw	r2,-8(fp)
 20185d0:	10c00217 	ldw	r3,8(r2)
 20185d4:	e0bfff17 	ldw	r2,-4(fp)
 20185d8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 20185dc:	e0bffe17 	ldw	r2,-8(fp)
 20185e0:	10c00317 	ldw	r3,12(r2)
 20185e4:	e0bfff17 	ldw	r2,-4(fp)
 20185e8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 20185ec:	e0bffe17 	ldw	r2,-8(fp)
 20185f0:	10c00417 	ldw	r3,16(r2)
 20185f4:	e0bfff17 	ldw	r2,-4(fp)
 20185f8:	10c00415 	stw	r3,16(r2)
 20185fc:	e0bffb17 	ldw	r2,-20(fp)
 2018600:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018604:	e0bffd17 	ldw	r2,-12(fp)
 2018608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201860c:	e0bfff17 	ldw	r2,-4(fp)
 2018610:	10c00317 	ldw	r3,12(r2)
 2018614:	e0bfff17 	ldw	r2,-4(fp)
 2018618:	10800417 	ldw	r2,16(r2)
 201861c:	1887c83a 	sub	r3,r3,r2
 2018620:	e0bfff17 	ldw	r2,-4(fp)
 2018624:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2018628:	0005883a 	mov	r2,zero
}
 201862c:	e037883a 	mov	sp,fp
 2018630:	df000017 	ldw	fp,0(sp)
 2018634:	dec00104 	addi	sp,sp,4
 2018638:	f800283a 	ret

0201863c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201863c:	defffc04 	addi	sp,sp,-16
 2018640:	dfc00315 	stw	ra,12(sp)
 2018644:	df000215 	stw	fp,8(sp)
 2018648:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201864c:	01430c04 	movi	r5,3120
 2018650:	010080f4 	movhi	r4,515
 2018654:	2121d104 	addi	r4,r4,-30908
 2018658:	20154b80 	call	20154b8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201865c:	008080f4 	movhi	r2,515
 2018660:	10a1d104 	addi	r2,r2,-30908
 2018664:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2018668:	e03fff0d 	sth	zero,-4(fp)
 201866c:	00001306 	br	20186bc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2018670:	e0bfff0b 	ldhu	r2,-4(fp)
 2018674:	10800044 	addi	r2,r2,1
 2018678:	10c00d24 	muli	r3,r2,52
 201867c:	008080f4 	movhi	r2,515
 2018680:	10a1d104 	addi	r2,r2,-30908
 2018684:	1887883a 	add	r3,r3,r2
 2018688:	e0bffe17 	ldw	r2,-8(fp)
 201868c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2018690:	e0bffe17 	ldw	r2,-8(fp)
 2018694:	00c00fc4 	movi	r3,63
 2018698:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201869c:	e0bffe17 	ldw	r2,-8(fp)
 20186a0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 20186a4:	e0bffe17 	ldw	r2,-8(fp)
 20186a8:	10800d04 	addi	r2,r2,52
 20186ac:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20186b0:	e0bfff0b 	ldhu	r2,-4(fp)
 20186b4:	10800044 	addi	r2,r2,1
 20186b8:	e0bfff0d 	sth	r2,-4(fp)
 20186bc:	e0bfff0b 	ldhu	r2,-4(fp)
 20186c0:	10800ef0 	cmpltui	r2,r2,59
 20186c4:	103fea1e 	bne	r2,zero,2018670 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 20186c8:	e0bffe17 	ldw	r2,-8(fp)
 20186cc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 20186d0:	e0bffe17 	ldw	r2,-8(fp)
 20186d4:	00c00fc4 	movi	r3,63
 20186d8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 20186dc:	e0bffe17 	ldw	r2,-8(fp)
 20186e0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 20186e4:	008080f4 	movhi	r2,515
 20186e8:	10a1d104 	addi	r2,r2,-30908
 20186ec:	d0a73b15 	stw	r2,-25364(gp)
#endif
}
 20186f0:	0001883a 	nop
 20186f4:	e037883a 	mov	sp,fp
 20186f8:	dfc00117 	ldw	ra,4(sp)
 20186fc:	df000017 	ldw	fp,0(sp)
 2018700:	dec00204 	addi	sp,sp,8
 2018704:	f800283a 	ret

02018708 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2018708:	defff804 	addi	sp,sp,-32
 201870c:	df000715 	stw	fp,28(sp)
 2018710:	df000704 	addi	fp,sp,28
 2018714:	e13ffe15 	stw	r4,-8(fp)
 2018718:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201871c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018720:	e0bfff17 	ldw	r2,-4(fp)
 2018724:	1000021e 	bne	r2,zero,2018730 <OSQAccept+0x28>
        return ((void *)0);
 2018728:	0005883a 	mov	r2,zero
 201872c:	00004206 	br	2018838 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2018730:	e0bffe17 	ldw	r2,-8(fp)
 2018734:	1000051e 	bne	r2,zero,201874c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2018738:	e0bfff17 	ldw	r2,-4(fp)
 201873c:	00c00104 	movi	r3,4
 2018740:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018744:	0005883a 	mov	r2,zero
 2018748:	00003b06 	br	2018838 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201874c:	e0bffe17 	ldw	r2,-8(fp)
 2018750:	10800003 	ldbu	r2,0(r2)
 2018754:	10803fcc 	andi	r2,r2,255
 2018758:	108000a0 	cmpeqi	r2,r2,2
 201875c:	1000051e 	bne	r2,zero,2018774 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2018760:	e0bfff17 	ldw	r2,-4(fp)
 2018764:	00c00044 	movi	r3,1
 2018768:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201876c:	0005883a 	mov	r2,zero
 2018770:	00003106 	br	2018838 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018774:	0005303a 	rdctl	r2,status
 2018778:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201877c:	e0fffd17 	ldw	r3,-12(fp)
 2018780:	00bfff84 	movi	r2,-2
 2018784:	1884703a 	and	r2,r3,r2
 2018788:	1001703a 	wrctl	status,r2
  
  return context;
 201878c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018790:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2018794:	e0bffe17 	ldw	r2,-8(fp)
 2018798:	10800117 	ldw	r2,4(r2)
 201879c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 20187a0:	e0bffc17 	ldw	r2,-16(fp)
 20187a4:	1080058b 	ldhu	r2,22(r2)
 20187a8:	10bfffcc 	andi	r2,r2,65535
 20187ac:	10001926 	beq	r2,zero,2018814 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20187b0:	e0bffc17 	ldw	r2,-16(fp)
 20187b4:	10800417 	ldw	r2,16(r2)
 20187b8:	11000104 	addi	r4,r2,4
 20187bc:	e0fffc17 	ldw	r3,-16(fp)
 20187c0:	19000415 	stw	r4,16(r3)
 20187c4:	10800017 	ldw	r2,0(r2)
 20187c8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20187cc:	e0bffc17 	ldw	r2,-16(fp)
 20187d0:	1080058b 	ldhu	r2,22(r2)
 20187d4:	10bfffc4 	addi	r2,r2,-1
 20187d8:	1007883a 	mov	r3,r2
 20187dc:	e0bffc17 	ldw	r2,-16(fp)
 20187e0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20187e4:	e0bffc17 	ldw	r2,-16(fp)
 20187e8:	10c00417 	ldw	r3,16(r2)
 20187ec:	e0bffc17 	ldw	r2,-16(fp)
 20187f0:	10800217 	ldw	r2,8(r2)
 20187f4:	1880041e 	bne	r3,r2,2018808 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 20187f8:	e0bffc17 	ldw	r2,-16(fp)
 20187fc:	10c00117 	ldw	r3,4(r2)
 2018800:	e0bffc17 	ldw	r2,-16(fp)
 2018804:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2018808:	e0bfff17 	ldw	r2,-4(fp)
 201880c:	10000005 	stb	zero,0(r2)
 2018810:	00000406 	br	2018824 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2018814:	e0bfff17 	ldw	r2,-4(fp)
 2018818:	00c007c4 	movi	r3,31
 201881c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2018820:	e03ff915 	stw	zero,-28(fp)
 2018824:	e0bffa17 	ldw	r2,-24(fp)
 2018828:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201882c:	e0bffb17 	ldw	r2,-20(fp)
 2018830:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2018834:	e0bff917 	ldw	r2,-28(fp)
}
 2018838:	e037883a 	mov	sp,fp
 201883c:	df000017 	ldw	fp,0(sp)
 2018840:	dec00104 	addi	sp,sp,4
 2018844:	f800283a 	ret

02018848 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2018848:	defff404 	addi	sp,sp,-48
 201884c:	dfc00b15 	stw	ra,44(sp)
 2018850:	df000a15 	stw	fp,40(sp)
 2018854:	df000a04 	addi	fp,sp,40
 2018858:	e13ffe15 	stw	r4,-8(fp)
 201885c:	2805883a 	mov	r2,r5
 2018860:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018864:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2018868:	d0a74003 	ldbu	r2,-25344(gp)
 201886c:	10803fcc 	andi	r2,r2,255
 2018870:	10000226 	beq	r2,zero,201887c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2018874:	0005883a 	mov	r2,zero
 2018878:	00005906 	br	20189e0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201887c:	0005303a 	rdctl	r2,status
 2018880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018884:	e0fffd17 	ldw	r3,-12(fp)
 2018888:	00bfff84 	movi	r2,-2
 201888c:	1884703a 	and	r2,r3,r2
 2018890:	1001703a 	wrctl	status,r2
  
  return context;
 2018894:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018898:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201889c:	d0a73f17 	ldw	r2,-25348(gp)
 20188a0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 20188a4:	d0a73f17 	ldw	r2,-25348(gp)
 20188a8:	10000326 	beq	r2,zero,20188b8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20188ac:	d0a73f17 	ldw	r2,-25348(gp)
 20188b0:	10800117 	ldw	r2,4(r2)
 20188b4:	d0a73f15 	stw	r2,-25348(gp)
 20188b8:	e0bff717 	ldw	r2,-36(fp)
 20188bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20188c0:	e0bff817 	ldw	r2,-32(fp)
 20188c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 20188c8:	e0bff617 	ldw	r2,-40(fp)
 20188cc:	10004326 	beq	r2,zero,20189dc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20188d0:	0005303a 	rdctl	r2,status
 20188d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20188d8:	e0fff917 	ldw	r3,-28(fp)
 20188dc:	00bfff84 	movi	r2,-2
 20188e0:	1884703a 	and	r2,r3,r2
 20188e4:	1001703a 	wrctl	status,r2
  
  return context;
 20188e8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 20188ec:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 20188f0:	d0a73d17 	ldw	r2,-25356(gp)
 20188f4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 20188f8:	e0bffb17 	ldw	r2,-20(fp)
 20188fc:	10002d26 	beq	r2,zero,20189b4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2018900:	d0a73d17 	ldw	r2,-25356(gp)
 2018904:	10800017 	ldw	r2,0(r2)
 2018908:	d0a73d15 	stw	r2,-25356(gp)
 201890c:	e0bff717 	ldw	r2,-36(fp)
 2018910:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018914:	e0bffa17 	ldw	r2,-24(fp)
 2018918:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 201891c:	e0bffb17 	ldw	r2,-20(fp)
 2018920:	e0fffe17 	ldw	r3,-8(fp)
 2018924:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2018928:	e0bfff0b 	ldhu	r2,-4(fp)
 201892c:	1085883a 	add	r2,r2,r2
 2018930:	1085883a 	add	r2,r2,r2
 2018934:	1007883a 	mov	r3,r2
 2018938:	e0bffe17 	ldw	r2,-8(fp)
 201893c:	10c7883a 	add	r3,r2,r3
 2018940:	e0bffb17 	ldw	r2,-20(fp)
 2018944:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2018948:	e0bffb17 	ldw	r2,-20(fp)
 201894c:	e0fffe17 	ldw	r3,-8(fp)
 2018950:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2018954:	e0bffb17 	ldw	r2,-20(fp)
 2018958:	e0fffe17 	ldw	r3,-8(fp)
 201895c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2018960:	e0bffb17 	ldw	r2,-20(fp)
 2018964:	e0ffff0b 	ldhu	r3,-4(fp)
 2018968:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201896c:	e0bffb17 	ldw	r2,-20(fp)
 2018970:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2018974:	e0bff617 	ldw	r2,-40(fp)
 2018978:	00c00084 	movi	r3,2
 201897c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2018980:	e0bff617 	ldw	r2,-40(fp)
 2018984:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2018988:	e0bff617 	ldw	r2,-40(fp)
 201898c:	e0fffb17 	ldw	r3,-20(fp)
 2018990:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2018994:	e0bff617 	ldw	r2,-40(fp)
 2018998:	00c00fc4 	movi	r3,63
 201899c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 20189a0:	e0bff617 	ldw	r2,-40(fp)
 20189a4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 20189a8:	e13ff617 	ldw	r4,-40(fp)
 20189ac:	20150d80 	call	20150d8 <OS_EventWaitListInit>
 20189b0:	00000a06 	br	20189dc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 20189b4:	d0e73f17 	ldw	r3,-25348(gp)
 20189b8:	e0bff617 	ldw	r2,-40(fp)
 20189bc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 20189c0:	e0bff617 	ldw	r2,-40(fp)
 20189c4:	d0a73f15 	stw	r2,-25348(gp)
 20189c8:	e0bff717 	ldw	r2,-36(fp)
 20189cc:	e0bffc15 	stw	r2,-16(fp)
 20189d0:	e0bffc17 	ldw	r2,-16(fp)
 20189d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 20189d8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 20189dc:	e0bff617 	ldw	r2,-40(fp)
}
 20189e0:	e037883a 	mov	sp,fp
 20189e4:	dfc00117 	ldw	ra,4(sp)
 20189e8:	df000017 	ldw	fp,0(sp)
 20189ec:	dec00204 	addi	sp,sp,8
 20189f0:	f800283a 	ret

020189f4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20189f4:	defff204 	addi	sp,sp,-56
 20189f8:	dfc00d15 	stw	ra,52(sp)
 20189fc:	df000c15 	stw	fp,48(sp)
 2018a00:	df000c04 	addi	fp,sp,48
 2018a04:	e13ffd15 	stw	r4,-12(fp)
 2018a08:	2805883a 	mov	r2,r5
 2018a0c:	e1bfff15 	stw	r6,-4(fp)
 2018a10:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018a14:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018a18:	e0bfff17 	ldw	r2,-4(fp)
 2018a1c:	1000021e 	bne	r2,zero,2018a28 <OSQDel+0x34>
        return (pevent);
 2018a20:	e0bffd17 	ldw	r2,-12(fp)
 2018a24:	00008e06 	br	2018c60 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2018a28:	e0bffd17 	ldw	r2,-12(fp)
 2018a2c:	1000051e 	bne	r2,zero,2018a44 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018a30:	e0bfff17 	ldw	r2,-4(fp)
 2018a34:	00c00104 	movi	r3,4
 2018a38:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018a3c:	e0bffd17 	ldw	r2,-12(fp)
 2018a40:	00008706 	br	2018c60 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2018a44:	e0bffd17 	ldw	r2,-12(fp)
 2018a48:	10800003 	ldbu	r2,0(r2)
 2018a4c:	10803fcc 	andi	r2,r2,255
 2018a50:	108000a0 	cmpeqi	r2,r2,2
 2018a54:	1000051e 	bne	r2,zero,2018a6c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2018a58:	e0bfff17 	ldw	r2,-4(fp)
 2018a5c:	00c00044 	movi	r3,1
 2018a60:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018a64:	e0bffd17 	ldw	r2,-12(fp)
 2018a68:	00007d06 	br	2018c60 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2018a6c:	d0a74003 	ldbu	r2,-25344(gp)
 2018a70:	10803fcc 	andi	r2,r2,255
 2018a74:	10000526 	beq	r2,zero,2018a8c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2018a78:	e0bfff17 	ldw	r2,-4(fp)
 2018a7c:	00c003c4 	movi	r3,15
 2018a80:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018a84:	e0bffd17 	ldw	r2,-12(fp)
 2018a88:	00007506 	br	2018c60 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a8c:	0005303a 	rdctl	r2,status
 2018a90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018a94:	e0fffc17 	ldw	r3,-16(fp)
 2018a98:	00bfff84 	movi	r2,-2
 2018a9c:	1884703a 	and	r2,r3,r2
 2018aa0:	1001703a 	wrctl	status,r2
  
  return context;
 2018aa4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018aa8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2018aac:	e0bffd17 	ldw	r2,-12(fp)
 2018ab0:	10800283 	ldbu	r2,10(r2)
 2018ab4:	10803fcc 	andi	r2,r2,255
 2018ab8:	10000326 	beq	r2,zero,2018ac8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2018abc:	00800044 	movi	r2,1
 2018ac0:	e0bff405 	stb	r2,-48(fp)
 2018ac4:	00000106 	br	2018acc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2018ac8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2018acc:	e0bffe03 	ldbu	r2,-8(fp)
 2018ad0:	10000326 	beq	r2,zero,2018ae0 <OSQDel+0xec>
 2018ad4:	10800060 	cmpeqi	r2,r2,1
 2018ad8:	1000301e 	bne	r2,zero,2018b9c <OSQDel+0x1a8>
 2018adc:	00005506 	br	2018c34 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2018ae0:	e0bff403 	ldbu	r2,-48(fp)
 2018ae4:	10001e1e 	bne	r2,zero,2018b60 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2018ae8:	e0bffd17 	ldw	r2,-12(fp)
 2018aec:	00c00fc4 	movi	r3,63
 2018af0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2018af4:	e0bffd17 	ldw	r2,-12(fp)
 2018af8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2018afc:	e0bffd17 	ldw	r2,-12(fp)
 2018b00:	10800117 	ldw	r2,4(r2)
 2018b04:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2018b08:	d0e73d17 	ldw	r3,-25356(gp)
 2018b0c:	e0bff817 	ldw	r2,-32(fp)
 2018b10:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2018b14:	e0bff817 	ldw	r2,-32(fp)
 2018b18:	d0a73d15 	stw	r2,-25356(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018b1c:	e0bffd17 	ldw	r2,-12(fp)
 2018b20:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2018b24:	d0e73f17 	ldw	r3,-25348(gp)
 2018b28:	e0bffd17 	ldw	r2,-12(fp)
 2018b2c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2018b30:	e0bffd17 	ldw	r2,-12(fp)
 2018b34:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2018b38:	e0bffd17 	ldw	r2,-12(fp)
 2018b3c:	d0a73f15 	stw	r2,-25348(gp)
 2018b40:	e0bff617 	ldw	r2,-40(fp)
 2018b44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018b48:	e0bff717 	ldw	r2,-36(fp)
 2018b4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2018b50:	e0bfff17 	ldw	r2,-4(fp)
 2018b54:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2018b58:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2018b5c:	00003f06 	br	2018c5c <OSQDel+0x268>
 2018b60:	e0bff617 	ldw	r2,-40(fp)
 2018b64:	e0bff915 	stw	r2,-28(fp)
 2018b68:	e0bff917 	ldw	r2,-28(fp)
 2018b6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2018b70:	e0bfff17 	ldw	r2,-4(fp)
 2018b74:	00c01244 	movi	r3,73
 2018b78:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2018b7c:	e0bffd17 	ldw	r2,-12(fp)
 2018b80:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2018b84:	00003506 	br	2018c5c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2018b88:	000f883a 	mov	r7,zero
 2018b8c:	01800104 	movi	r6,4
 2018b90:	000b883a 	mov	r5,zero
 2018b94:	e13ffd17 	ldw	r4,-12(fp)
 2018b98:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2018b9c:	e0bffd17 	ldw	r2,-12(fp)
 2018ba0:	10800283 	ldbu	r2,10(r2)
 2018ba4:	10803fcc 	andi	r2,r2,255
 2018ba8:	103ff71e 	bne	r2,zero,2018b88 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2018bac:	e0bffd17 	ldw	r2,-12(fp)
 2018bb0:	00c00fc4 	movi	r3,63
 2018bb4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2018bb8:	e0bffd17 	ldw	r2,-12(fp)
 2018bbc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2018bc0:	e0bffd17 	ldw	r2,-12(fp)
 2018bc4:	10800117 	ldw	r2,4(r2)
 2018bc8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2018bcc:	d0e73d17 	ldw	r3,-25356(gp)
 2018bd0:	e0bff817 	ldw	r2,-32(fp)
 2018bd4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2018bd8:	e0bff817 	ldw	r2,-32(fp)
 2018bdc:	d0a73d15 	stw	r2,-25356(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018be0:	e0bffd17 	ldw	r2,-12(fp)
 2018be4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2018be8:	d0e73f17 	ldw	r3,-25348(gp)
 2018bec:	e0bffd17 	ldw	r2,-12(fp)
 2018bf0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2018bf4:	e0bffd17 	ldw	r2,-12(fp)
 2018bf8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2018bfc:	e0bffd17 	ldw	r2,-12(fp)
 2018c00:	d0a73f15 	stw	r2,-25348(gp)
 2018c04:	e0bff617 	ldw	r2,-40(fp)
 2018c08:	e0bffa15 	stw	r2,-24(fp)
 2018c0c:	e0bffa17 	ldw	r2,-24(fp)
 2018c10:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2018c14:	e0bff403 	ldbu	r2,-48(fp)
 2018c18:	10800058 	cmpnei	r2,r2,1
 2018c1c:	1000011e 	bne	r2,zero,2018c24 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2018c20:	20155740 	call	2015574 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2018c24:	e0bfff17 	ldw	r2,-4(fp)
 2018c28:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2018c2c:	e03ff515 	stw	zero,-44(fp)
             break;
 2018c30:	00000a06 	br	2018c5c <OSQDel+0x268>
 2018c34:	e0bff617 	ldw	r2,-40(fp)
 2018c38:	e0bffb15 	stw	r2,-20(fp)
 2018c3c:	e0bffb17 	ldw	r2,-20(fp)
 2018c40:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2018c44:	e0bfff17 	ldw	r2,-4(fp)
 2018c48:	00c001c4 	movi	r3,7
 2018c4c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2018c50:	e0bffd17 	ldw	r2,-12(fp)
 2018c54:	e0bff515 	stw	r2,-44(fp)
             break;
 2018c58:	0001883a 	nop
    }
    return (pevent_return);
 2018c5c:	e0bff517 	ldw	r2,-44(fp)
}
 2018c60:	e037883a 	mov	sp,fp
 2018c64:	dfc00117 	ldw	ra,4(sp)
 2018c68:	df000017 	ldw	fp,0(sp)
 2018c6c:	dec00204 	addi	sp,sp,8
 2018c70:	f800283a 	ret

02018c74 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2018c74:	defffa04 	addi	sp,sp,-24
 2018c78:	df000515 	stw	fp,20(sp)
 2018c7c:	df000504 	addi	fp,sp,20
 2018c80:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018c84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2018c88:	e0bfff17 	ldw	r2,-4(fp)
 2018c8c:	1000021e 	bne	r2,zero,2018c98 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2018c90:	00800104 	movi	r2,4
 2018c94:	00002106 	br	2018d1c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2018c98:	e0bfff17 	ldw	r2,-4(fp)
 2018c9c:	10800003 	ldbu	r2,0(r2)
 2018ca0:	10803fcc 	andi	r2,r2,255
 2018ca4:	108000a0 	cmpeqi	r2,r2,2
 2018ca8:	1000021e 	bne	r2,zero,2018cb4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2018cac:	00800044 	movi	r2,1
 2018cb0:	00001a06 	br	2018d1c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018cb4:	0005303a 	rdctl	r2,status
 2018cb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018cbc:	e0fffd17 	ldw	r3,-12(fp)
 2018cc0:	00bfff84 	movi	r2,-2
 2018cc4:	1884703a 	and	r2,r3,r2
 2018cc8:	1001703a 	wrctl	status,r2
  
  return context;
 2018ccc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018cd0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2018cd4:	e0bfff17 	ldw	r2,-4(fp)
 2018cd8:	10800117 	ldw	r2,4(r2)
 2018cdc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2018ce0:	e0bffc17 	ldw	r2,-16(fp)
 2018ce4:	10c00117 	ldw	r3,4(r2)
 2018ce8:	e0bffc17 	ldw	r2,-16(fp)
 2018cec:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2018cf0:	e0bffc17 	ldw	r2,-16(fp)
 2018cf4:	10c00117 	ldw	r3,4(r2)
 2018cf8:	e0bffc17 	ldw	r2,-16(fp)
 2018cfc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2018d00:	e0bffc17 	ldw	r2,-16(fp)
 2018d04:	1000058d 	sth	zero,22(r2)
 2018d08:	e0bffb17 	ldw	r2,-20(fp)
 2018d0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018d10:	e0bffe17 	ldw	r2,-8(fp)
 2018d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018d18:	0005883a 	mov	r2,zero
}
 2018d1c:	e037883a 	mov	sp,fp
 2018d20:	df000017 	ldw	fp,0(sp)
 2018d24:	dec00104 	addi	sp,sp,4
 2018d28:	f800283a 	ret

02018d2c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2018d2c:	defff304 	addi	sp,sp,-52
 2018d30:	dfc00c15 	stw	ra,48(sp)
 2018d34:	df000b15 	stw	fp,44(sp)
 2018d38:	df000b04 	addi	fp,sp,44
 2018d3c:	e13ffd15 	stw	r4,-12(fp)
 2018d40:	2805883a 	mov	r2,r5
 2018d44:	e1bfff15 	stw	r6,-4(fp)
 2018d48:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018d4c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018d50:	e0bfff17 	ldw	r2,-4(fp)
 2018d54:	1000021e 	bne	r2,zero,2018d60 <OSQPend+0x34>
        return ((void *)0);
 2018d58:	0005883a 	mov	r2,zero
 2018d5c:	00009106 	br	2018fa4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2018d60:	e0bffd17 	ldw	r2,-12(fp)
 2018d64:	1000051e 	bne	r2,zero,2018d7c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018d68:	e0bfff17 	ldw	r2,-4(fp)
 2018d6c:	00c00104 	movi	r3,4
 2018d70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018d74:	0005883a 	mov	r2,zero
 2018d78:	00008a06 	br	2018fa4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2018d7c:	e0bffd17 	ldw	r2,-12(fp)
 2018d80:	10800003 	ldbu	r2,0(r2)
 2018d84:	10803fcc 	andi	r2,r2,255
 2018d88:	108000a0 	cmpeqi	r2,r2,2
 2018d8c:	1000051e 	bne	r2,zero,2018da4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2018d90:	e0bfff17 	ldw	r2,-4(fp)
 2018d94:	00c00044 	movi	r3,1
 2018d98:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018d9c:	0005883a 	mov	r2,zero
 2018da0:	00008006 	br	2018fa4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2018da4:	d0a74003 	ldbu	r2,-25344(gp)
 2018da8:	10803fcc 	andi	r2,r2,255
 2018dac:	10000526 	beq	r2,zero,2018dc4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2018db0:	e0bfff17 	ldw	r2,-4(fp)
 2018db4:	00c00084 	movi	r3,2
 2018db8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018dbc:	0005883a 	mov	r2,zero
 2018dc0:	00007806 	br	2018fa4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2018dc4:	d0a73203 	ldbu	r2,-25400(gp)
 2018dc8:	10803fcc 	andi	r2,r2,255
 2018dcc:	10000526 	beq	r2,zero,2018de4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2018dd0:	e0bfff17 	ldw	r2,-4(fp)
 2018dd4:	00c00344 	movi	r3,13
 2018dd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018ddc:	0005883a 	mov	r2,zero
 2018de0:	00007006 	br	2018fa4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018de4:	0005303a 	rdctl	r2,status
 2018de8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018dec:	e0fffc17 	ldw	r3,-16(fp)
 2018df0:	00bfff84 	movi	r2,-2
 2018df4:	1884703a 	and	r2,r3,r2
 2018df8:	1001703a 	wrctl	status,r2
  
  return context;
 2018dfc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018e00:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2018e04:	e0bffd17 	ldw	r2,-12(fp)
 2018e08:	10800117 	ldw	r2,4(r2)
 2018e0c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2018e10:	e0bff817 	ldw	r2,-32(fp)
 2018e14:	1080058b 	ldhu	r2,22(r2)
 2018e18:	10bfffcc 	andi	r2,r2,65535
 2018e1c:	10001e26 	beq	r2,zero,2018e98 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2018e20:	e0bff817 	ldw	r2,-32(fp)
 2018e24:	10800417 	ldw	r2,16(r2)
 2018e28:	11000104 	addi	r4,r2,4
 2018e2c:	e0fff817 	ldw	r3,-32(fp)
 2018e30:	19000415 	stw	r4,16(r3)
 2018e34:	10800017 	ldw	r2,0(r2)
 2018e38:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2018e3c:	e0bff817 	ldw	r2,-32(fp)
 2018e40:	1080058b 	ldhu	r2,22(r2)
 2018e44:	10bfffc4 	addi	r2,r2,-1
 2018e48:	1007883a 	mov	r3,r2
 2018e4c:	e0bff817 	ldw	r2,-32(fp)
 2018e50:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2018e54:	e0bff817 	ldw	r2,-32(fp)
 2018e58:	10c00417 	ldw	r3,16(r2)
 2018e5c:	e0bff817 	ldw	r2,-32(fp)
 2018e60:	10800217 	ldw	r2,8(r2)
 2018e64:	1880041e 	bne	r3,r2,2018e78 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2018e68:	e0bff817 	ldw	r2,-32(fp)
 2018e6c:	10c00117 	ldw	r3,4(r2)
 2018e70:	e0bff817 	ldw	r2,-32(fp)
 2018e74:	10c00415 	stw	r3,16(r2)
 2018e78:	e0bff617 	ldw	r2,-40(fp)
 2018e7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e80:	e0bff717 	ldw	r2,-36(fp)
 2018e84:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2018e88:	e0bfff17 	ldw	r2,-4(fp)
 2018e8c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2018e90:	e0bff517 	ldw	r2,-44(fp)
 2018e94:	00004306 	br	2018fa4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2018e98:	d0a74117 	ldw	r2,-25340(gp)
 2018e9c:	d0e74117 	ldw	r3,-25340(gp)
 2018ea0:	18c00c03 	ldbu	r3,48(r3)
 2018ea4:	18c00114 	ori	r3,r3,4
 2018ea8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2018eac:	d0a74117 	ldw	r2,-25340(gp)
 2018eb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 2018eb4:	d0a74117 	ldw	r2,-25340(gp)
 2018eb8:	e0fffe0b 	ldhu	r3,-8(fp)
 2018ebc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2018ec0:	e13ffd17 	ldw	r4,-12(fp)
 2018ec4:	2014cc00 	call	2014cc0 <OS_EventTaskWait>
 2018ec8:	e0bff617 	ldw	r2,-40(fp)
 2018ecc:	e0bffb15 	stw	r2,-20(fp)
 2018ed0:	e0bffb17 	ldw	r2,-20(fp)
 2018ed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2018ed8:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018edc:	0005303a 	rdctl	r2,status
 2018ee0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018ee4:	e0fff917 	ldw	r3,-28(fp)
 2018ee8:	00bfff84 	movi	r2,-2
 2018eec:	1884703a 	and	r2,r3,r2
 2018ef0:	1001703a 	wrctl	status,r2
  
  return context;
 2018ef4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2018ef8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2018efc:	d0a74117 	ldw	r2,-25340(gp)
 2018f00:	10800c43 	ldbu	r2,49(r2)
 2018f04:	10803fcc 	andi	r2,r2,255
 2018f08:	10000326 	beq	r2,zero,2018f18 <OSQPend+0x1ec>
 2018f0c:	108000a0 	cmpeqi	r2,r2,2
 2018f10:	1000071e 	bne	r2,zero,2018f30 <OSQPend+0x204>
 2018f14:	00000b06 	br	2018f44 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2018f18:	d0a74117 	ldw	r2,-25340(gp)
 2018f1c:	10800917 	ldw	r2,36(r2)
 2018f20:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2018f24:	e0bfff17 	ldw	r2,-4(fp)
 2018f28:	10000005 	stb	zero,0(r2)
             break;
 2018f2c:	00000e06 	br	2018f68 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2018f30:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2018f34:	e0bfff17 	ldw	r2,-4(fp)
 2018f38:	00c00384 	movi	r3,14
 2018f3c:	10c00005 	stb	r3,0(r2)
             break;
 2018f40:	00000906 	br	2018f68 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2018f44:	d0a74117 	ldw	r2,-25340(gp)
 2018f48:	e17ffd17 	ldw	r5,-12(fp)
 2018f4c:	1009883a 	mov	r4,r2
 2018f50:	2014f200 	call	2014f20 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2018f54:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2018f58:	e0bfff17 	ldw	r2,-4(fp)
 2018f5c:	00c00284 	movi	r3,10
 2018f60:	10c00005 	stb	r3,0(r2)
             break;
 2018f64:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2018f68:	d0a74117 	ldw	r2,-25340(gp)
 2018f6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2018f70:	d0a74117 	ldw	r2,-25340(gp)
 2018f74:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2018f78:	d0a74117 	ldw	r2,-25340(gp)
 2018f7c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2018f80:	d0a74117 	ldw	r2,-25340(gp)
 2018f84:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2018f88:	d0a74117 	ldw	r2,-25340(gp)
 2018f8c:	10000915 	stw	zero,36(r2)
 2018f90:	e0bff617 	ldw	r2,-40(fp)
 2018f94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018f98:	e0bffa17 	ldw	r2,-24(fp)
 2018f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2018fa0:	e0bff517 	ldw	r2,-44(fp)
}
 2018fa4:	e037883a 	mov	sp,fp
 2018fa8:	dfc00117 	ldw	ra,4(sp)
 2018fac:	df000017 	ldw	fp,0(sp)
 2018fb0:	dec00204 	addi	sp,sp,8
 2018fb4:	f800283a 	ret

02018fb8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2018fb8:	defff604 	addi	sp,sp,-40
 2018fbc:	dfc00915 	stw	ra,36(sp)
 2018fc0:	df000815 	stw	fp,32(sp)
 2018fc4:	df000804 	addi	fp,sp,32
 2018fc8:	e13ffd15 	stw	r4,-12(fp)
 2018fcc:	2805883a 	mov	r2,r5
 2018fd0:	e1bfff15 	stw	r6,-4(fp)
 2018fd4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018fd8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018fdc:	e0bfff17 	ldw	r2,-4(fp)
 2018fe0:	1000021e 	bne	r2,zero,2018fec <OSQPendAbort+0x34>
        return (0);
 2018fe4:	0005883a 	mov	r2,zero
 2018fe8:	00004906 	br	2019110 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2018fec:	e0bffd17 	ldw	r2,-12(fp)
 2018ff0:	1000051e 	bne	r2,zero,2019008 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018ff4:	e0bfff17 	ldw	r2,-4(fp)
 2018ff8:	00c00104 	movi	r3,4
 2018ffc:	10c00005 	stb	r3,0(r2)
        return (0);
 2019000:	0005883a 	mov	r2,zero
 2019004:	00004206 	br	2019110 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2019008:	e0bffd17 	ldw	r2,-12(fp)
 201900c:	10800003 	ldbu	r2,0(r2)
 2019010:	10803fcc 	andi	r2,r2,255
 2019014:	108000a0 	cmpeqi	r2,r2,2
 2019018:	1000051e 	bne	r2,zero,2019030 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201901c:	e0bfff17 	ldw	r2,-4(fp)
 2019020:	00c00044 	movi	r3,1
 2019024:	10c00005 	stb	r3,0(r2)
        return (0);
 2019028:	0005883a 	mov	r2,zero
 201902c:	00003806 	br	2019110 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019030:	0005303a 	rdctl	r2,status
 2019034:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019038:	e0fffc17 	ldw	r3,-16(fp)
 201903c:	00bfff84 	movi	r2,-2
 2019040:	1884703a 	and	r2,r3,r2
 2019044:	1001703a 	wrctl	status,r2
  
  return context;
 2019048:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201904c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2019050:	e0bffd17 	ldw	r2,-12(fp)
 2019054:	10800283 	ldbu	r2,10(r2)
 2019058:	10803fcc 	andi	r2,r2,255
 201905c:	10002526 	beq	r2,zero,20190f4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 2019060:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2019064:	e0bffe03 	ldbu	r2,-8(fp)
 2019068:	10800060 	cmpeqi	r2,r2,1
 201906c:	10000e26 	beq	r2,zero,20190a8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2019070:	00000806 	br	2019094 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2019074:	01c00084 	movi	r7,2
 2019078:	01800104 	movi	r6,4
 201907c:	000b883a 	mov	r5,zero
 2019080:	e13ffd17 	ldw	r4,-12(fp)
 2019084:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                     nbr_tasks++;
 2019088:	e0bff803 	ldbu	r2,-32(fp)
 201908c:	10800044 	addi	r2,r2,1
 2019090:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2019094:	e0bffd17 	ldw	r2,-12(fp)
 2019098:	10800283 	ldbu	r2,10(r2)
 201909c:	10803fcc 	andi	r2,r2,255
 20190a0:	103ff41e 	bne	r2,zero,2019074 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20190a4:	00000906 	br	20190cc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20190a8:	01c00084 	movi	r7,2
 20190ac:	01800104 	movi	r6,4
 20190b0:	000b883a 	mov	r5,zero
 20190b4:	e13ffd17 	ldw	r4,-12(fp)
 20190b8:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 nbr_tasks++;
 20190bc:	e0bff803 	ldbu	r2,-32(fp)
 20190c0:	10800044 	addi	r2,r2,1
 20190c4:	e0bff805 	stb	r2,-32(fp)
                 break;
 20190c8:	0001883a 	nop
 20190cc:	e0bff917 	ldw	r2,-28(fp)
 20190d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20190d4:	e0bffa17 	ldw	r2,-24(fp)
 20190d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20190dc:	20155740 	call	2015574 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20190e0:	e0bfff17 	ldw	r2,-4(fp)
 20190e4:	00c00384 	movi	r3,14
 20190e8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 20190ec:	e0bff803 	ldbu	r2,-32(fp)
 20190f0:	00000706 	br	2019110 <OSQPendAbort+0x158>
 20190f4:	e0bff917 	ldw	r2,-28(fp)
 20190f8:	e0bffb15 	stw	r2,-20(fp)
 20190fc:	e0bffb17 	ldw	r2,-20(fp)
 2019100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019104:	e0bfff17 	ldw	r2,-4(fp)
 2019108:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201910c:	0005883a 	mov	r2,zero
}
 2019110:	e037883a 	mov	sp,fp
 2019114:	dfc00117 	ldw	ra,4(sp)
 2019118:	df000017 	ldw	fp,0(sp)
 201911c:	dec00204 	addi	sp,sp,8
 2019120:	f800283a 	ret

02019124 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2019124:	defff604 	addi	sp,sp,-40
 2019128:	dfc00915 	stw	ra,36(sp)
 201912c:	df000815 	stw	fp,32(sp)
 2019130:	df000804 	addi	fp,sp,32
 2019134:	e13ffe15 	stw	r4,-8(fp)
 2019138:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201913c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019140:	e0bffe17 	ldw	r2,-8(fp)
 2019144:	1000021e 	bne	r2,zero,2019150 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2019148:	00800104 	movi	r2,4
 201914c:	00004a06 	br	2019278 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019150:	e0bffe17 	ldw	r2,-8(fp)
 2019154:	10800003 	ldbu	r2,0(r2)
 2019158:	10803fcc 	andi	r2,r2,255
 201915c:	108000a0 	cmpeqi	r2,r2,2
 2019160:	1000021e 	bne	r2,zero,201916c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 2019164:	00800044 	movi	r2,1
 2019168:	00004306 	br	2019278 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201916c:	0005303a 	rdctl	r2,status
 2019170:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019174:	e0fffd17 	ldw	r3,-12(fp)
 2019178:	00bfff84 	movi	r2,-2
 201917c:	1884703a 	and	r2,r3,r2
 2019180:	1001703a 	wrctl	status,r2
  
  return context;
 2019184:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019188:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201918c:	e0bffe17 	ldw	r2,-8(fp)
 2019190:	10800283 	ldbu	r2,10(r2)
 2019194:	10803fcc 	andi	r2,r2,255
 2019198:	10000c26 	beq	r2,zero,20191cc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201919c:	000f883a 	mov	r7,zero
 20191a0:	01800104 	movi	r6,4
 20191a4:	e17fff17 	ldw	r5,-4(fp)
 20191a8:	e13ffe17 	ldw	r4,-8(fp)
 20191ac:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 20191b0:	e0bff817 	ldw	r2,-32(fp)
 20191b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20191b8:	e0bff917 	ldw	r2,-28(fp)
 20191bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 20191c0:	20155740 	call	2015574 <OS_Sched>
        return (OS_ERR_NONE);
 20191c4:	0005883a 	mov	r2,zero
 20191c8:	00002b06 	br	2019278 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 20191cc:	e0bffe17 	ldw	r2,-8(fp)
 20191d0:	10800117 	ldw	r2,4(r2)
 20191d4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 20191d8:	e0bffb17 	ldw	r2,-20(fp)
 20191dc:	10c0058b 	ldhu	r3,22(r2)
 20191e0:	e0bffb17 	ldw	r2,-20(fp)
 20191e4:	1080050b 	ldhu	r2,20(r2)
 20191e8:	18ffffcc 	andi	r3,r3,65535
 20191ec:	10bfffcc 	andi	r2,r2,65535
 20191f0:	18800636 	bltu	r3,r2,201920c <OSQPost+0xe8>
 20191f4:	e0bff817 	ldw	r2,-32(fp)
 20191f8:	e0bffa15 	stw	r2,-24(fp)
 20191fc:	e0bffa17 	ldw	r2,-24(fp)
 2019200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019204:	00800784 	movi	r2,30
 2019208:	00001b06 	br	2019278 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201920c:	e0bffb17 	ldw	r2,-20(fp)
 2019210:	10800317 	ldw	r2,12(r2)
 2019214:	11000104 	addi	r4,r2,4
 2019218:	e0fffb17 	ldw	r3,-20(fp)
 201921c:	19000315 	stw	r4,12(r3)
 2019220:	e0ffff17 	ldw	r3,-4(fp)
 2019224:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2019228:	e0bffb17 	ldw	r2,-20(fp)
 201922c:	1080058b 	ldhu	r2,22(r2)
 2019230:	10800044 	addi	r2,r2,1
 2019234:	1007883a 	mov	r3,r2
 2019238:	e0bffb17 	ldw	r2,-20(fp)
 201923c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2019240:	e0bffb17 	ldw	r2,-20(fp)
 2019244:	10c00317 	ldw	r3,12(r2)
 2019248:	e0bffb17 	ldw	r2,-20(fp)
 201924c:	10800217 	ldw	r2,8(r2)
 2019250:	1880041e 	bne	r3,r2,2019264 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 2019254:	e0bffb17 	ldw	r2,-20(fp)
 2019258:	10c00117 	ldw	r3,4(r2)
 201925c:	e0bffb17 	ldw	r2,-20(fp)
 2019260:	10c00315 	stw	r3,12(r2)
 2019264:	e0bff817 	ldw	r2,-32(fp)
 2019268:	e0bffc15 	stw	r2,-16(fp)
 201926c:	e0bffc17 	ldw	r2,-16(fp)
 2019270:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019274:	0005883a 	mov	r2,zero
}
 2019278:	e037883a 	mov	sp,fp
 201927c:	dfc00117 	ldw	ra,4(sp)
 2019280:	df000017 	ldw	fp,0(sp)
 2019284:	dec00204 	addi	sp,sp,8
 2019288:	f800283a 	ret

0201928c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201928c:	defff604 	addi	sp,sp,-40
 2019290:	dfc00915 	stw	ra,36(sp)
 2019294:	df000815 	stw	fp,32(sp)
 2019298:	df000804 	addi	fp,sp,32
 201929c:	e13ffe15 	stw	r4,-8(fp)
 20192a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20192a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20192a8:	e0bffe17 	ldw	r2,-8(fp)
 20192ac:	1000021e 	bne	r2,zero,20192b8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20192b0:	00800104 	movi	r2,4
 20192b4:	00004c06 	br	20193e8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20192b8:	e0bffe17 	ldw	r2,-8(fp)
 20192bc:	10800003 	ldbu	r2,0(r2)
 20192c0:	10803fcc 	andi	r2,r2,255
 20192c4:	108000a0 	cmpeqi	r2,r2,2
 20192c8:	1000021e 	bne	r2,zero,20192d4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 20192cc:	00800044 	movi	r2,1
 20192d0:	00004506 	br	20193e8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20192d4:	0005303a 	rdctl	r2,status
 20192d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20192dc:	e0fffd17 	ldw	r3,-12(fp)
 20192e0:	00bfff84 	movi	r2,-2
 20192e4:	1884703a 	and	r2,r3,r2
 20192e8:	1001703a 	wrctl	status,r2
  
  return context;
 20192ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20192f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 20192f4:	e0bffe17 	ldw	r2,-8(fp)
 20192f8:	10800283 	ldbu	r2,10(r2)
 20192fc:	10803fcc 	andi	r2,r2,255
 2019300:	10000c26 	beq	r2,zero,2019334 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019304:	000f883a 	mov	r7,zero
 2019308:	01800104 	movi	r6,4
 201930c:	e17fff17 	ldw	r5,-4(fp)
 2019310:	e13ffe17 	ldw	r4,-8(fp)
 2019314:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 2019318:	e0bff817 	ldw	r2,-32(fp)
 201931c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019320:	e0bff917 	ldw	r2,-28(fp)
 2019324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2019328:	20155740 	call	2015574 <OS_Sched>
        return (OS_ERR_NONE);
 201932c:	0005883a 	mov	r2,zero
 2019330:	00002d06 	br	20193e8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019334:	e0bffe17 	ldw	r2,-8(fp)
 2019338:	10800117 	ldw	r2,4(r2)
 201933c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2019340:	e0bffb17 	ldw	r2,-20(fp)
 2019344:	10c0058b 	ldhu	r3,22(r2)
 2019348:	e0bffb17 	ldw	r2,-20(fp)
 201934c:	1080050b 	ldhu	r2,20(r2)
 2019350:	18ffffcc 	andi	r3,r3,65535
 2019354:	10bfffcc 	andi	r2,r2,65535
 2019358:	18800636 	bltu	r3,r2,2019374 <OSQPostFront+0xe8>
 201935c:	e0bff817 	ldw	r2,-32(fp)
 2019360:	e0bffa15 	stw	r2,-24(fp)
 2019364:	e0bffa17 	ldw	r2,-24(fp)
 2019368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201936c:	00800784 	movi	r2,30
 2019370:	00001d06 	br	20193e8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2019374:	e0bffb17 	ldw	r2,-20(fp)
 2019378:	10c00417 	ldw	r3,16(r2)
 201937c:	e0bffb17 	ldw	r2,-20(fp)
 2019380:	10800117 	ldw	r2,4(r2)
 2019384:	1880041e 	bne	r3,r2,2019398 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2019388:	e0bffb17 	ldw	r2,-20(fp)
 201938c:	10c00217 	ldw	r3,8(r2)
 2019390:	e0bffb17 	ldw	r2,-20(fp)
 2019394:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2019398:	e0bffb17 	ldw	r2,-20(fp)
 201939c:	10800417 	ldw	r2,16(r2)
 20193a0:	10ffff04 	addi	r3,r2,-4
 20193a4:	e0bffb17 	ldw	r2,-20(fp)
 20193a8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 20193ac:	e0bffb17 	ldw	r2,-20(fp)
 20193b0:	10800417 	ldw	r2,16(r2)
 20193b4:	e0ffff17 	ldw	r3,-4(fp)
 20193b8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20193bc:	e0bffb17 	ldw	r2,-20(fp)
 20193c0:	1080058b 	ldhu	r2,22(r2)
 20193c4:	10800044 	addi	r2,r2,1
 20193c8:	1007883a 	mov	r3,r2
 20193cc:	e0bffb17 	ldw	r2,-20(fp)
 20193d0:	10c0058d 	sth	r3,22(r2)
 20193d4:	e0bff817 	ldw	r2,-32(fp)
 20193d8:	e0bffc15 	stw	r2,-16(fp)
 20193dc:	e0bffc17 	ldw	r2,-16(fp)
 20193e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20193e4:	0005883a 	mov	r2,zero
}
 20193e8:	e037883a 	mov	sp,fp
 20193ec:	dfc00117 	ldw	ra,4(sp)
 20193f0:	df000017 	ldw	fp,0(sp)
 20193f4:	dec00204 	addi	sp,sp,8
 20193f8:	f800283a 	ret

020193fc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 20193fc:	defff504 	addi	sp,sp,-44
 2019400:	dfc00a15 	stw	ra,40(sp)
 2019404:	df000915 	stw	fp,36(sp)
 2019408:	df000904 	addi	fp,sp,36
 201940c:	e13ffd15 	stw	r4,-12(fp)
 2019410:	e17ffe15 	stw	r5,-8(fp)
 2019414:	3005883a 	mov	r2,r6
 2019418:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201941c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019420:	e0bffd17 	ldw	r2,-12(fp)
 2019424:	1000021e 	bne	r2,zero,2019430 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2019428:	00800104 	movi	r2,4
 201942c:	00007106 	br	20195f4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2019430:	e0bffd17 	ldw	r2,-12(fp)
 2019434:	10800003 	ldbu	r2,0(r2)
 2019438:	10803fcc 	andi	r2,r2,255
 201943c:	108000a0 	cmpeqi	r2,r2,2
 2019440:	1000021e 	bne	r2,zero,201944c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 2019444:	00800044 	movi	r2,1
 2019448:	00006a06 	br	20195f4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201944c:	0005303a 	rdctl	r2,status
 2019450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019454:	e0fffc17 	ldw	r3,-16(fp)
 2019458:	00bfff84 	movi	r2,-2
 201945c:	1884703a 	and	r2,r3,r2
 2019460:	1001703a 	wrctl	status,r2
  
  return context;
 2019464:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019468:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201946c:	e0bffd17 	ldw	r2,-12(fp)
 2019470:	10800283 	ldbu	r2,10(r2)
 2019474:	10803fcc 	andi	r2,r2,255
 2019478:	10001d26 	beq	r2,zero,20194f0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201947c:	e0bfff03 	ldbu	r2,-4(fp)
 2019480:	1080004c 	andi	r2,r2,1
 2019484:	10000b26 	beq	r2,zero,20194b4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019488:	00000506 	br	20194a0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201948c:	000f883a 	mov	r7,zero
 2019490:	01800104 	movi	r6,4
 2019494:	e17ffe17 	ldw	r5,-8(fp)
 2019498:	e13ffd17 	ldw	r4,-12(fp)
 201949c:	2014b280 	call	2014b28 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20194a0:	e0bffd17 	ldw	r2,-12(fp)
 20194a4:	10800283 	ldbu	r2,10(r2)
 20194a8:	10803fcc 	andi	r2,r2,255
 20194ac:	103ff71e 	bne	r2,zero,201948c <OSQPostOpt+0x90>
 20194b0:	00000506 	br	20194c8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20194b4:	000f883a 	mov	r7,zero
 20194b8:	01800104 	movi	r6,4
 20194bc:	e17ffe17 	ldw	r5,-8(fp)
 20194c0:	e13ffd17 	ldw	r4,-12(fp)
 20194c4:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 20194c8:	e0bff717 	ldw	r2,-36(fp)
 20194cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20194d0:	e0bff817 	ldw	r2,-32(fp)
 20194d4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 20194d8:	e0bfff03 	ldbu	r2,-4(fp)
 20194dc:	1080010c 	andi	r2,r2,4
 20194e0:	1000011e 	bne	r2,zero,20194e8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 20194e4:	20155740 	call	2015574 <OS_Sched>
        }
        return (OS_ERR_NONE);
 20194e8:	0005883a 	mov	r2,zero
 20194ec:	00004106 	br	20195f4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20194f0:	e0bffd17 	ldw	r2,-12(fp)
 20194f4:	10800117 	ldw	r2,4(r2)
 20194f8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20194fc:	e0bffa17 	ldw	r2,-24(fp)
 2019500:	10c0058b 	ldhu	r3,22(r2)
 2019504:	e0bffa17 	ldw	r2,-24(fp)
 2019508:	1080050b 	ldhu	r2,20(r2)
 201950c:	18ffffcc 	andi	r3,r3,65535
 2019510:	10bfffcc 	andi	r2,r2,65535
 2019514:	18800636 	bltu	r3,r2,2019530 <OSQPostOpt+0x134>
 2019518:	e0bff717 	ldw	r2,-36(fp)
 201951c:	e0bff915 	stw	r2,-28(fp)
 2019520:	e0bff917 	ldw	r2,-28(fp)
 2019524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019528:	00800784 	movi	r2,30
 201952c:	00003106 	br	20195f4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2019530:	e0bfff03 	ldbu	r2,-4(fp)
 2019534:	1080008c 	andi	r2,r2,2
 2019538:	10001326 	beq	r2,zero,2019588 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201953c:	e0bffa17 	ldw	r2,-24(fp)
 2019540:	10c00417 	ldw	r3,16(r2)
 2019544:	e0bffa17 	ldw	r2,-24(fp)
 2019548:	10800117 	ldw	r2,4(r2)
 201954c:	1880041e 	bne	r3,r2,2019560 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2019550:	e0bffa17 	ldw	r2,-24(fp)
 2019554:	10c00217 	ldw	r3,8(r2)
 2019558:	e0bffa17 	ldw	r2,-24(fp)
 201955c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2019560:	e0bffa17 	ldw	r2,-24(fp)
 2019564:	10800417 	ldw	r2,16(r2)
 2019568:	10ffff04 	addi	r3,r2,-4
 201956c:	e0bffa17 	ldw	r2,-24(fp)
 2019570:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2019574:	e0bffa17 	ldw	r2,-24(fp)
 2019578:	10800417 	ldw	r2,16(r2)
 201957c:	e0fffe17 	ldw	r3,-8(fp)
 2019580:	10c00015 	stw	r3,0(r2)
 2019584:	00001006 	br	20195c8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2019588:	e0bffa17 	ldw	r2,-24(fp)
 201958c:	10800317 	ldw	r2,12(r2)
 2019590:	11000104 	addi	r4,r2,4
 2019594:	e0fffa17 	ldw	r3,-24(fp)
 2019598:	19000315 	stw	r4,12(r3)
 201959c:	e0fffe17 	ldw	r3,-8(fp)
 20195a0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 20195a4:	e0bffa17 	ldw	r2,-24(fp)
 20195a8:	10c00317 	ldw	r3,12(r2)
 20195ac:	e0bffa17 	ldw	r2,-24(fp)
 20195b0:	10800217 	ldw	r2,8(r2)
 20195b4:	1880041e 	bne	r3,r2,20195c8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 20195b8:	e0bffa17 	ldw	r2,-24(fp)
 20195bc:	10c00117 	ldw	r3,4(r2)
 20195c0:	e0bffa17 	ldw	r2,-24(fp)
 20195c4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20195c8:	e0bffa17 	ldw	r2,-24(fp)
 20195cc:	1080058b 	ldhu	r2,22(r2)
 20195d0:	10800044 	addi	r2,r2,1
 20195d4:	1007883a 	mov	r3,r2
 20195d8:	e0bffa17 	ldw	r2,-24(fp)
 20195dc:	10c0058d 	sth	r3,22(r2)
 20195e0:	e0bff717 	ldw	r2,-36(fp)
 20195e4:	e0bffb15 	stw	r2,-20(fp)
 20195e8:	e0bffb17 	ldw	r2,-20(fp)
 20195ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20195f0:	0005883a 	mov	r2,zero
}
 20195f4:	e037883a 	mov	sp,fp
 20195f8:	dfc00117 	ldw	ra,4(sp)
 20195fc:	df000017 	ldw	fp,0(sp)
 2019600:	dec00204 	addi	sp,sp,8
 2019604:	f800283a 	ret

02019608 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2019608:	defff604 	addi	sp,sp,-40
 201960c:	df000915 	stw	fp,36(sp)
 2019610:	df000904 	addi	fp,sp,36
 2019614:	e13ffe15 	stw	r4,-8(fp)
 2019618:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201961c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019620:	e0bffe17 	ldw	r2,-8(fp)
 2019624:	1000021e 	bne	r2,zero,2019630 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2019628:	00800104 	movi	r2,4
 201962c:	00004906 	br	2019754 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2019630:	e0bfff17 	ldw	r2,-4(fp)
 2019634:	1000021e 	bne	r2,zero,2019640 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2019638:	00800244 	movi	r2,9
 201963c:	00004506 	br	2019754 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019640:	e0bffe17 	ldw	r2,-8(fp)
 2019644:	10800003 	ldbu	r2,0(r2)
 2019648:	10803fcc 	andi	r2,r2,255
 201964c:	108000a0 	cmpeqi	r2,r2,2
 2019650:	1000021e 	bne	r2,zero,201965c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2019654:	00800044 	movi	r2,1
 2019658:	00003e06 	br	2019754 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201965c:	0005303a 	rdctl	r2,status
 2019660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019664:	e0fffd17 	ldw	r3,-12(fp)
 2019668:	00bfff84 	movi	r2,-2
 201966c:	1884703a 	and	r2,r3,r2
 2019670:	1001703a 	wrctl	status,r2
  
  return context;
 2019674:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019678:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201967c:	e0bffe17 	ldw	r2,-8(fp)
 2019680:	10c00283 	ldbu	r3,10(r2)
 2019684:	e0bfff17 	ldw	r2,-4(fp)
 2019688:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201968c:	e0bffe17 	ldw	r2,-8(fp)
 2019690:	108002c4 	addi	r2,r2,11
 2019694:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2019698:	e0bfff17 	ldw	r2,-4(fp)
 201969c:	10800204 	addi	r2,r2,8
 20196a0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20196a4:	e03ff705 	stb	zero,-36(fp)
 20196a8:	00000b06 	br	20196d8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 20196ac:	e0bff917 	ldw	r2,-28(fp)
 20196b0:	10c00044 	addi	r3,r2,1
 20196b4:	e0fff915 	stw	r3,-28(fp)
 20196b8:	e0fff817 	ldw	r3,-32(fp)
 20196bc:	19000044 	addi	r4,r3,1
 20196c0:	e13ff815 	stw	r4,-32(fp)
 20196c4:	18c00003 	ldbu	r3,0(r3)
 20196c8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20196cc:	e0bff703 	ldbu	r2,-36(fp)
 20196d0:	10800044 	addi	r2,r2,1
 20196d4:	e0bff705 	stb	r2,-36(fp)
 20196d8:	e0bff703 	ldbu	r2,-36(fp)
 20196dc:	108000f0 	cmpltui	r2,r2,3
 20196e0:	103ff21e 	bne	r2,zero,20196ac <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 20196e4:	e0bffe17 	ldw	r2,-8(fp)
 20196e8:	10800117 	ldw	r2,4(r2)
 20196ec:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 20196f0:	e0bffc17 	ldw	r2,-16(fp)
 20196f4:	1080058b 	ldhu	r2,22(r2)
 20196f8:	10bfffcc 	andi	r2,r2,65535
 20196fc:	10000626 	beq	r2,zero,2019718 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2019700:	e0bffc17 	ldw	r2,-16(fp)
 2019704:	10800417 	ldw	r2,16(r2)
 2019708:	10c00017 	ldw	r3,0(r2)
 201970c:	e0bfff17 	ldw	r2,-4(fp)
 2019710:	10c00015 	stw	r3,0(r2)
 2019714:	00000206 	br	2019720 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2019718:	e0bfff17 	ldw	r2,-4(fp)
 201971c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2019720:	e0bffc17 	ldw	r2,-16(fp)
 2019724:	10c0058b 	ldhu	r3,22(r2)
 2019728:	e0bfff17 	ldw	r2,-4(fp)
 201972c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2019730:	e0bffc17 	ldw	r2,-16(fp)
 2019734:	10c0050b 	ldhu	r3,20(r2)
 2019738:	e0bfff17 	ldw	r2,-4(fp)
 201973c:	10c0018d 	sth	r3,6(r2)
 2019740:	e0bffa17 	ldw	r2,-24(fp)
 2019744:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019748:	e0bffb17 	ldw	r2,-20(fp)
 201974c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019750:	0005883a 	mov	r2,zero
}
 2019754:	e037883a 	mov	sp,fp
 2019758:	df000017 	ldw	fp,0(sp)
 201975c:	dec00104 	addi	sp,sp,4
 2019760:	f800283a 	ret

02019764 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2019764:	defffb04 	addi	sp,sp,-20
 2019768:	dfc00415 	stw	ra,16(sp)
 201976c:	df000315 	stw	fp,12(sp)
 2019770:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2019774:	01407804 	movi	r5,480
 2019778:	010080f4 	movhi	r4,515
 201977c:	2126dd04 	addi	r4,r4,-25740
 2019780:	20154b80 	call	20154b8 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2019784:	008080f4 	movhi	r2,515
 2019788:	10a6dd04 	addi	r2,r2,-25740
 201978c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2019790:	008080f4 	movhi	r2,515
 2019794:	10a6e304 	addi	r2,r2,-25716
 2019798:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201979c:	e03ffd0d 	sth	zero,-12(fp)
 20197a0:	00000c06 	br	20197d4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 20197a4:	e0bffe17 	ldw	r2,-8(fp)
 20197a8:	e0ffff17 	ldw	r3,-4(fp)
 20197ac:	10c00015 	stw	r3,0(r2)
        pq1++;
 20197b0:	e0bffe17 	ldw	r2,-8(fp)
 20197b4:	10800604 	addi	r2,r2,24
 20197b8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 20197bc:	e0bfff17 	ldw	r2,-4(fp)
 20197c0:	10800604 	addi	r2,r2,24
 20197c4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 20197c8:	e0bffd0b 	ldhu	r2,-12(fp)
 20197cc:	10800044 	addi	r2,r2,1
 20197d0:	e0bffd0d 	sth	r2,-12(fp)
 20197d4:	e0bffd0b 	ldhu	r2,-12(fp)
 20197d8:	108004f0 	cmpltui	r2,r2,19
 20197dc:	103ff11e 	bne	r2,zero,20197a4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 20197e0:	e0bffe17 	ldw	r2,-8(fp)
 20197e4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 20197e8:	008080f4 	movhi	r2,515
 20197ec:	10a6dd04 	addi	r2,r2,-25740
 20197f0:	d0a73d15 	stw	r2,-25356(gp)
#endif
}
 20197f4:	0001883a 	nop
 20197f8:	e037883a 	mov	sp,fp
 20197fc:	dfc00117 	ldw	ra,4(sp)
 2019800:	df000017 	ldw	fp,0(sp)
 2019804:	dec00204 	addi	sp,sp,8
 2019808:	f800283a 	ret

0201980c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201980c:	defffa04 	addi	sp,sp,-24
 2019810:	df000515 	stw	fp,20(sp)
 2019814:	df000504 	addi	fp,sp,20
 2019818:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201981c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019820:	e0bfff17 	ldw	r2,-4(fp)
 2019824:	1000021e 	bne	r2,zero,2019830 <OSSemAccept+0x24>
        return (0);
 2019828:	0005883a 	mov	r2,zero
 201982c:	00001f06 	br	20198ac <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019830:	e0bfff17 	ldw	r2,-4(fp)
 2019834:	10800003 	ldbu	r2,0(r2)
 2019838:	10803fcc 	andi	r2,r2,255
 201983c:	108000e0 	cmpeqi	r2,r2,3
 2019840:	1000021e 	bne	r2,zero,201984c <OSSemAccept+0x40>
        return (0);
 2019844:	0005883a 	mov	r2,zero
 2019848:	00001806 	br	20198ac <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201984c:	0005303a 	rdctl	r2,status
 2019850:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019854:	e0fffe17 	ldw	r3,-8(fp)
 2019858:	00bfff84 	movi	r2,-2
 201985c:	1884703a 	and	r2,r3,r2
 2019860:	1001703a 	wrctl	status,r2
  
  return context;
 2019864:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019868:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 201986c:	e0bfff17 	ldw	r2,-4(fp)
 2019870:	1080020b 	ldhu	r2,8(r2)
 2019874:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2019878:	e0bffd0b 	ldhu	r2,-12(fp)
 201987c:	10000626 	beq	r2,zero,2019898 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2019880:	e0bfff17 	ldw	r2,-4(fp)
 2019884:	1080020b 	ldhu	r2,8(r2)
 2019888:	10bfffc4 	addi	r2,r2,-1
 201988c:	1007883a 	mov	r3,r2
 2019890:	e0bfff17 	ldw	r2,-4(fp)
 2019894:	10c0020d 	sth	r3,8(r2)
 2019898:	e0bffb17 	ldw	r2,-20(fp)
 201989c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20198a0:	e0bffc17 	ldw	r2,-16(fp)
 20198a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 20198a8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20198ac:	e037883a 	mov	sp,fp
 20198b0:	df000017 	ldw	fp,0(sp)
 20198b4:	dec00104 	addi	sp,sp,4
 20198b8:	f800283a 	ret

020198bc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 20198bc:	defff904 	addi	sp,sp,-28
 20198c0:	dfc00615 	stw	ra,24(sp)
 20198c4:	df000515 	stw	fp,20(sp)
 20198c8:	df000504 	addi	fp,sp,20
 20198cc:	2005883a 	mov	r2,r4
 20198d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20198d4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20198d8:	d0a74003 	ldbu	r2,-25344(gp)
 20198dc:	10803fcc 	andi	r2,r2,255
 20198e0:	10000226 	beq	r2,zero,20198ec <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 20198e4:	0005883a 	mov	r2,zero
 20198e8:	00002506 	br	2019980 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20198ec:	0005303a 	rdctl	r2,status
 20198f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20198f4:	e0fffe17 	ldw	r3,-8(fp)
 20198f8:	00bfff84 	movi	r2,-2
 20198fc:	1884703a 	and	r2,r3,r2
 2019900:	1001703a 	wrctl	status,r2
  
  return context;
 2019904:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019908:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201990c:	d0a73f17 	ldw	r2,-25348(gp)
 2019910:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2019914:	d0a73f17 	ldw	r2,-25348(gp)
 2019918:	10000326 	beq	r2,zero,2019928 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201991c:	d0a73f17 	ldw	r2,-25348(gp)
 2019920:	10800117 	ldw	r2,4(r2)
 2019924:	d0a73f15 	stw	r2,-25348(gp)
 2019928:	e0bffb17 	ldw	r2,-20(fp)
 201992c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019930:	e0bffc17 	ldw	r2,-16(fp)
 2019934:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2019938:	e0bffd17 	ldw	r2,-12(fp)
 201993c:	10000f26 	beq	r2,zero,201997c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2019940:	e0bffd17 	ldw	r2,-12(fp)
 2019944:	00c000c4 	movi	r3,3
 2019948:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201994c:	e0bffd17 	ldw	r2,-12(fp)
 2019950:	e0ffff0b 	ldhu	r3,-4(fp)
 2019954:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2019958:	e0bffd17 	ldw	r2,-12(fp)
 201995c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2019960:	e0bffd17 	ldw	r2,-12(fp)
 2019964:	00c00fc4 	movi	r3,63
 2019968:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201996c:	e0bffd17 	ldw	r2,-12(fp)
 2019970:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2019974:	e13ffd17 	ldw	r4,-12(fp)
 2019978:	20150d80 	call	20150d8 <OS_EventWaitListInit>
    }
    return (pevent);
 201997c:	e0bffd17 	ldw	r2,-12(fp)
}
 2019980:	e037883a 	mov	sp,fp
 2019984:	dfc00117 	ldw	ra,4(sp)
 2019988:	df000017 	ldw	fp,0(sp)
 201998c:	dec00204 	addi	sp,sp,8
 2019990:	f800283a 	ret

02019994 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019994:	defff304 	addi	sp,sp,-52
 2019998:	dfc00c15 	stw	ra,48(sp)
 201999c:	df000b15 	stw	fp,44(sp)
 20199a0:	df000b04 	addi	fp,sp,44
 20199a4:	e13ffd15 	stw	r4,-12(fp)
 20199a8:	2805883a 	mov	r2,r5
 20199ac:	e1bfff15 	stw	r6,-4(fp)
 20199b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20199b4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20199b8:	e0bfff17 	ldw	r2,-4(fp)
 20199bc:	1000021e 	bne	r2,zero,20199c8 <OSSemDel+0x34>
        return (pevent);
 20199c0:	e0bffd17 	ldw	r2,-12(fp)
 20199c4:	00007e06 	br	2019bc0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20199c8:	e0bffd17 	ldw	r2,-12(fp)
 20199cc:	1000051e 	bne	r2,zero,20199e4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20199d0:	e0bfff17 	ldw	r2,-4(fp)
 20199d4:	00c00104 	movi	r3,4
 20199d8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20199dc:	e0bffd17 	ldw	r2,-12(fp)
 20199e0:	00007706 	br	2019bc0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 20199e4:	e0bffd17 	ldw	r2,-12(fp)
 20199e8:	10800003 	ldbu	r2,0(r2)
 20199ec:	10803fcc 	andi	r2,r2,255
 20199f0:	108000e0 	cmpeqi	r2,r2,3
 20199f4:	1000051e 	bne	r2,zero,2019a0c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20199f8:	e0bfff17 	ldw	r2,-4(fp)
 20199fc:	00c00044 	movi	r3,1
 2019a00:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019a04:	e0bffd17 	ldw	r2,-12(fp)
 2019a08:	00006d06 	br	2019bc0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019a0c:	d0a74003 	ldbu	r2,-25344(gp)
 2019a10:	10803fcc 	andi	r2,r2,255
 2019a14:	10000526 	beq	r2,zero,2019a2c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2019a18:	e0bfff17 	ldw	r2,-4(fp)
 2019a1c:	00c003c4 	movi	r3,15
 2019a20:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019a24:	e0bffd17 	ldw	r2,-12(fp)
 2019a28:	00006506 	br	2019bc0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019a2c:	0005303a 	rdctl	r2,status
 2019a30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019a34:	e0fffc17 	ldw	r3,-16(fp)
 2019a38:	00bfff84 	movi	r2,-2
 2019a3c:	1884703a 	and	r2,r3,r2
 2019a40:	1001703a 	wrctl	status,r2
  
  return context;
 2019a44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019a48:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2019a4c:	e0bffd17 	ldw	r2,-12(fp)
 2019a50:	10800283 	ldbu	r2,10(r2)
 2019a54:	10803fcc 	andi	r2,r2,255
 2019a58:	10000326 	beq	r2,zero,2019a68 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2019a5c:	00800044 	movi	r2,1
 2019a60:	e0bff505 	stb	r2,-44(fp)
 2019a64:	00000106 	br	2019a6c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2019a68:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2019a6c:	e0bffe03 	ldbu	r2,-8(fp)
 2019a70:	10000326 	beq	r2,zero,2019a80 <OSSemDel+0xec>
 2019a74:	10800060 	cmpeqi	r2,r2,1
 2019a78:	1000281e 	bne	r2,zero,2019b1c <OSSemDel+0x188>
 2019a7c:	00004506 	br	2019b94 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2019a80:	e0bff503 	ldbu	r2,-44(fp)
 2019a84:	1000161e 	bne	r2,zero,2019ae0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2019a88:	e0bffd17 	ldw	r2,-12(fp)
 2019a8c:	00c00fc4 	movi	r3,63
 2019a90:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2019a94:	e0bffd17 	ldw	r2,-12(fp)
 2019a98:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019a9c:	e0bffd17 	ldw	r2,-12(fp)
 2019aa0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2019aa4:	d0e73f17 	ldw	r3,-25348(gp)
 2019aa8:	e0bffd17 	ldw	r2,-12(fp)
 2019aac:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2019ab0:	e0bffd17 	ldw	r2,-12(fp)
 2019ab4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2019ab8:	e0bffd17 	ldw	r2,-12(fp)
 2019abc:	d0a73f15 	stw	r2,-25348(gp)
 2019ac0:	e0bff717 	ldw	r2,-36(fp)
 2019ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019ac8:	e0bff817 	ldw	r2,-32(fp)
 2019acc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2019ad0:	e0bfff17 	ldw	r2,-4(fp)
 2019ad4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2019ad8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2019adc:	00003706 	br	2019bbc <OSSemDel+0x228>
 2019ae0:	e0bff717 	ldw	r2,-36(fp)
 2019ae4:	e0bff915 	stw	r2,-28(fp)
 2019ae8:	e0bff917 	ldw	r2,-28(fp)
 2019aec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2019af0:	e0bfff17 	ldw	r2,-4(fp)
 2019af4:	00c01244 	movi	r3,73
 2019af8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2019afc:	e0bffd17 	ldw	r2,-12(fp)
 2019b00:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019b04:	00002d06 	br	2019bbc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2019b08:	000f883a 	mov	r7,zero
 2019b0c:	01800044 	movi	r6,1
 2019b10:	000b883a 	mov	r5,zero
 2019b14:	e13ffd17 	ldw	r4,-12(fp)
 2019b18:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2019b1c:	e0bffd17 	ldw	r2,-12(fp)
 2019b20:	10800283 	ldbu	r2,10(r2)
 2019b24:	10803fcc 	andi	r2,r2,255
 2019b28:	103ff71e 	bne	r2,zero,2019b08 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2019b2c:	e0bffd17 	ldw	r2,-12(fp)
 2019b30:	00c00fc4 	movi	r3,63
 2019b34:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2019b38:	e0bffd17 	ldw	r2,-12(fp)
 2019b3c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019b40:	e0bffd17 	ldw	r2,-12(fp)
 2019b44:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2019b48:	d0e73f17 	ldw	r3,-25348(gp)
 2019b4c:	e0bffd17 	ldw	r2,-12(fp)
 2019b50:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2019b54:	e0bffd17 	ldw	r2,-12(fp)
 2019b58:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2019b5c:	e0bffd17 	ldw	r2,-12(fp)
 2019b60:	d0a73f15 	stw	r2,-25348(gp)
 2019b64:	e0bff717 	ldw	r2,-36(fp)
 2019b68:	e0bffa15 	stw	r2,-24(fp)
 2019b6c:	e0bffa17 	ldw	r2,-24(fp)
 2019b70:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2019b74:	e0bff503 	ldbu	r2,-44(fp)
 2019b78:	10800058 	cmpnei	r2,r2,1
 2019b7c:	1000011e 	bne	r2,zero,2019b84 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2019b80:	20155740 	call	2015574 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2019b84:	e0bfff17 	ldw	r2,-4(fp)
 2019b88:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2019b8c:	e03ff615 	stw	zero,-40(fp)
             break;
 2019b90:	00000a06 	br	2019bbc <OSSemDel+0x228>
 2019b94:	e0bff717 	ldw	r2,-36(fp)
 2019b98:	e0bffb15 	stw	r2,-20(fp)
 2019b9c:	e0bffb17 	ldw	r2,-20(fp)
 2019ba0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2019ba4:	e0bfff17 	ldw	r2,-4(fp)
 2019ba8:	00c001c4 	movi	r3,7
 2019bac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2019bb0:	e0bffd17 	ldw	r2,-12(fp)
 2019bb4:	e0bff615 	stw	r2,-40(fp)
             break;
 2019bb8:	0001883a 	nop
    }
    return (pevent_return);
 2019bbc:	e0bff617 	ldw	r2,-40(fp)
}
 2019bc0:	e037883a 	mov	sp,fp
 2019bc4:	dfc00117 	ldw	ra,4(sp)
 2019bc8:	df000017 	ldw	fp,0(sp)
 2019bcc:	dec00204 	addi	sp,sp,8
 2019bd0:	f800283a 	ret

02019bd4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2019bd4:	defff504 	addi	sp,sp,-44
 2019bd8:	dfc00a15 	stw	ra,40(sp)
 2019bdc:	df000915 	stw	fp,36(sp)
 2019be0:	df000904 	addi	fp,sp,36
 2019be4:	e13ffd15 	stw	r4,-12(fp)
 2019be8:	2805883a 	mov	r2,r5
 2019bec:	e1bfff15 	stw	r6,-4(fp)
 2019bf0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019bf4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2019bf8:	e0bfff17 	ldw	r2,-4(fp)
 2019bfc:	10007226 	beq	r2,zero,2019dc8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019c00:	e0bffd17 	ldw	r2,-12(fp)
 2019c04:	1000041e 	bne	r2,zero,2019c18 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2019c08:	e0bfff17 	ldw	r2,-4(fp)
 2019c0c:	00c00104 	movi	r3,4
 2019c10:	10c00005 	stb	r3,0(r2)
        return;
 2019c14:	00006d06 	br	2019dcc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019c18:	e0bffd17 	ldw	r2,-12(fp)
 2019c1c:	10800003 	ldbu	r2,0(r2)
 2019c20:	10803fcc 	andi	r2,r2,255
 2019c24:	108000e0 	cmpeqi	r2,r2,3
 2019c28:	1000041e 	bne	r2,zero,2019c3c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2019c2c:	e0bfff17 	ldw	r2,-4(fp)
 2019c30:	00c00044 	movi	r3,1
 2019c34:	10c00005 	stb	r3,0(r2)
        return;
 2019c38:	00006406 	br	2019dcc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2019c3c:	d0a74003 	ldbu	r2,-25344(gp)
 2019c40:	10803fcc 	andi	r2,r2,255
 2019c44:	10000426 	beq	r2,zero,2019c58 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2019c48:	e0bfff17 	ldw	r2,-4(fp)
 2019c4c:	00c00084 	movi	r3,2
 2019c50:	10c00005 	stb	r3,0(r2)
        return;
 2019c54:	00005d06 	br	2019dcc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2019c58:	d0a73203 	ldbu	r2,-25400(gp)
 2019c5c:	10803fcc 	andi	r2,r2,255
 2019c60:	10000426 	beq	r2,zero,2019c74 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2019c64:	e0bfff17 	ldw	r2,-4(fp)
 2019c68:	00c00344 	movi	r3,13
 2019c6c:	10c00005 	stb	r3,0(r2)
        return;
 2019c70:	00005606 	br	2019dcc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019c74:	0005303a 	rdctl	r2,status
 2019c78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c7c:	e0fffc17 	ldw	r3,-16(fp)
 2019c80:	00bfff84 	movi	r2,-2
 2019c84:	1884703a 	and	r2,r3,r2
 2019c88:	1001703a 	wrctl	status,r2
  
  return context;
 2019c8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019c90:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2019c94:	e0bffd17 	ldw	r2,-12(fp)
 2019c98:	1080020b 	ldhu	r2,8(r2)
 2019c9c:	10bfffcc 	andi	r2,r2,65535
 2019ca0:	10000d26 	beq	r2,zero,2019cd8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2019ca4:	e0bffd17 	ldw	r2,-12(fp)
 2019ca8:	1080020b 	ldhu	r2,8(r2)
 2019cac:	10bfffc4 	addi	r2,r2,-1
 2019cb0:	1007883a 	mov	r3,r2
 2019cb4:	e0bffd17 	ldw	r2,-12(fp)
 2019cb8:	10c0020d 	sth	r3,8(r2)
 2019cbc:	e0bff717 	ldw	r2,-36(fp)
 2019cc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019cc4:	e0bff817 	ldw	r2,-32(fp)
 2019cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2019ccc:	e0bfff17 	ldw	r2,-4(fp)
 2019cd0:	10000005 	stb	zero,0(r2)
        return;
 2019cd4:	00003d06 	br	2019dcc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2019cd8:	d0a74117 	ldw	r2,-25340(gp)
 2019cdc:	d0e74117 	ldw	r3,-25340(gp)
 2019ce0:	18c00c03 	ldbu	r3,48(r3)
 2019ce4:	18c00054 	ori	r3,r3,1
 2019ce8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019cec:	d0a74117 	ldw	r2,-25340(gp)
 2019cf0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2019cf4:	d0a74117 	ldw	r2,-25340(gp)
 2019cf8:	e0fffe0b 	ldhu	r3,-8(fp)
 2019cfc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2019d00:	e13ffd17 	ldw	r4,-12(fp)
 2019d04:	2014cc00 	call	2014cc0 <OS_EventTaskWait>
 2019d08:	e0bff717 	ldw	r2,-36(fp)
 2019d0c:	e0bffb15 	stw	r2,-20(fp)
 2019d10:	e0bffb17 	ldw	r2,-20(fp)
 2019d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2019d18:	20155740 	call	2015574 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019d1c:	0005303a 	rdctl	r2,status
 2019d20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019d24:	e0fff917 	ldw	r3,-28(fp)
 2019d28:	00bfff84 	movi	r2,-2
 2019d2c:	1884703a 	and	r2,r3,r2
 2019d30:	1001703a 	wrctl	status,r2
  
  return context;
 2019d34:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2019d38:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2019d3c:	d0a74117 	ldw	r2,-25340(gp)
 2019d40:	10800c43 	ldbu	r2,49(r2)
 2019d44:	10803fcc 	andi	r2,r2,255
 2019d48:	10000326 	beq	r2,zero,2019d58 <OSSemPend+0x184>
 2019d4c:	108000a0 	cmpeqi	r2,r2,2
 2019d50:	1000041e 	bne	r2,zero,2019d64 <OSSemPend+0x190>
 2019d54:	00000706 	br	2019d74 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2019d58:	e0bfff17 	ldw	r2,-4(fp)
 2019d5c:	10000005 	stb	zero,0(r2)
             break;
 2019d60:	00000c06 	br	2019d94 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2019d64:	e0bfff17 	ldw	r2,-4(fp)
 2019d68:	00c00384 	movi	r3,14
 2019d6c:	10c00005 	stb	r3,0(r2)
             break;
 2019d70:	00000806 	br	2019d94 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2019d74:	d0a74117 	ldw	r2,-25340(gp)
 2019d78:	e17ffd17 	ldw	r5,-12(fp)
 2019d7c:	1009883a 	mov	r4,r2
 2019d80:	2014f200 	call	2014f20 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2019d84:	e0bfff17 	ldw	r2,-4(fp)
 2019d88:	00c00284 	movi	r3,10
 2019d8c:	10c00005 	stb	r3,0(r2)
             break;
 2019d90:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2019d94:	d0a74117 	ldw	r2,-25340(gp)
 2019d98:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2019d9c:	d0a74117 	ldw	r2,-25340(gp)
 2019da0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2019da4:	d0a74117 	ldw	r2,-25340(gp)
 2019da8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2019dac:	d0a74117 	ldw	r2,-25340(gp)
 2019db0:	10000815 	stw	zero,32(r2)
 2019db4:	e0bff717 	ldw	r2,-36(fp)
 2019db8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019dbc:	e0bffa17 	ldw	r2,-24(fp)
 2019dc0:	1001703a 	wrctl	status,r2
 2019dc4:	00000106 	br	2019dcc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2019dc8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2019dcc:	e037883a 	mov	sp,fp
 2019dd0:	dfc00117 	ldw	ra,4(sp)
 2019dd4:	df000017 	ldw	fp,0(sp)
 2019dd8:	dec00204 	addi	sp,sp,8
 2019ddc:	f800283a 	ret

02019de0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019de0:	defff604 	addi	sp,sp,-40
 2019de4:	dfc00915 	stw	ra,36(sp)
 2019de8:	df000815 	stw	fp,32(sp)
 2019dec:	df000804 	addi	fp,sp,32
 2019df0:	e13ffd15 	stw	r4,-12(fp)
 2019df4:	2805883a 	mov	r2,r5
 2019df8:	e1bfff15 	stw	r6,-4(fp)
 2019dfc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019e00:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2019e04:	e0bfff17 	ldw	r2,-4(fp)
 2019e08:	1000021e 	bne	r2,zero,2019e14 <OSSemPendAbort+0x34>
        return (0);
 2019e0c:	0005883a 	mov	r2,zero
 2019e10:	00004906 	br	2019f38 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019e14:	e0bffd17 	ldw	r2,-12(fp)
 2019e18:	1000051e 	bne	r2,zero,2019e30 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019e1c:	e0bfff17 	ldw	r2,-4(fp)
 2019e20:	00c00104 	movi	r3,4
 2019e24:	10c00005 	stb	r3,0(r2)
        return (0);
 2019e28:	0005883a 	mov	r2,zero
 2019e2c:	00004206 	br	2019f38 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019e30:	e0bffd17 	ldw	r2,-12(fp)
 2019e34:	10800003 	ldbu	r2,0(r2)
 2019e38:	10803fcc 	andi	r2,r2,255
 2019e3c:	108000e0 	cmpeqi	r2,r2,3
 2019e40:	1000051e 	bne	r2,zero,2019e58 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2019e44:	e0bfff17 	ldw	r2,-4(fp)
 2019e48:	00c00044 	movi	r3,1
 2019e4c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019e50:	0005883a 	mov	r2,zero
 2019e54:	00003806 	br	2019f38 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019e58:	0005303a 	rdctl	r2,status
 2019e5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019e60:	e0fffc17 	ldw	r3,-16(fp)
 2019e64:	00bfff84 	movi	r2,-2
 2019e68:	1884703a 	and	r2,r3,r2
 2019e6c:	1001703a 	wrctl	status,r2
  
  return context;
 2019e70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019e74:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2019e78:	e0bffd17 	ldw	r2,-12(fp)
 2019e7c:	10800283 	ldbu	r2,10(r2)
 2019e80:	10803fcc 	andi	r2,r2,255
 2019e84:	10002526 	beq	r2,zero,2019f1c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 2019e88:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2019e8c:	e0bffe03 	ldbu	r2,-8(fp)
 2019e90:	10800060 	cmpeqi	r2,r2,1
 2019e94:	10000e26 	beq	r2,zero,2019ed0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2019e98:	00000806 	br	2019ebc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2019e9c:	01c00084 	movi	r7,2
 2019ea0:	01800044 	movi	r6,1
 2019ea4:	000b883a 	mov	r5,zero
 2019ea8:	e13ffd17 	ldw	r4,-12(fp)
 2019eac:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                     nbr_tasks++;
 2019eb0:	e0bff803 	ldbu	r2,-32(fp)
 2019eb4:	10800044 	addi	r2,r2,1
 2019eb8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2019ebc:	e0bffd17 	ldw	r2,-12(fp)
 2019ec0:	10800283 	ldbu	r2,10(r2)
 2019ec4:	10803fcc 	andi	r2,r2,255
 2019ec8:	103ff41e 	bne	r2,zero,2019e9c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2019ecc:	00000906 	br	2019ef4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2019ed0:	01c00084 	movi	r7,2
 2019ed4:	01800044 	movi	r6,1
 2019ed8:	000b883a 	mov	r5,zero
 2019edc:	e13ffd17 	ldw	r4,-12(fp)
 2019ee0:	2014b280 	call	2014b28 <OS_EventTaskRdy>
                 nbr_tasks++;
 2019ee4:	e0bff803 	ldbu	r2,-32(fp)
 2019ee8:	10800044 	addi	r2,r2,1
 2019eec:	e0bff805 	stb	r2,-32(fp)
                 break;
 2019ef0:	0001883a 	nop
 2019ef4:	e0bff917 	ldw	r2,-28(fp)
 2019ef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019efc:	e0bffa17 	ldw	r2,-24(fp)
 2019f00:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2019f04:	20155740 	call	2015574 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2019f08:	e0bfff17 	ldw	r2,-4(fp)
 2019f0c:	00c00384 	movi	r3,14
 2019f10:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2019f14:	e0bff803 	ldbu	r2,-32(fp)
 2019f18:	00000706 	br	2019f38 <OSSemPendAbort+0x158>
 2019f1c:	e0bff917 	ldw	r2,-28(fp)
 2019f20:	e0bffb15 	stw	r2,-20(fp)
 2019f24:	e0bffb17 	ldw	r2,-20(fp)
 2019f28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019f2c:	e0bfff17 	ldw	r2,-4(fp)
 2019f30:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 2019f34:	0005883a 	mov	r2,zero
}
 2019f38:	e037883a 	mov	sp,fp
 2019f3c:	dfc00117 	ldw	ra,4(sp)
 2019f40:	df000017 	ldw	fp,0(sp)
 2019f44:	dec00204 	addi	sp,sp,8
 2019f48:	f800283a 	ret

02019f4c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 2019f4c:	defff804 	addi	sp,sp,-32
 2019f50:	dfc00715 	stw	ra,28(sp)
 2019f54:	df000615 	stw	fp,24(sp)
 2019f58:	df000604 	addi	fp,sp,24
 2019f5c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019f60:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019f64:	e0bfff17 	ldw	r2,-4(fp)
 2019f68:	1000021e 	bne	r2,zero,2019f74 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 2019f6c:	00800104 	movi	r2,4
 2019f70:	00003506 	br	201a048 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019f74:	e0bfff17 	ldw	r2,-4(fp)
 2019f78:	10800003 	ldbu	r2,0(r2)
 2019f7c:	10803fcc 	andi	r2,r2,255
 2019f80:	108000e0 	cmpeqi	r2,r2,3
 2019f84:	1000021e 	bne	r2,zero,2019f90 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 2019f88:	00800044 	movi	r2,1
 2019f8c:	00002e06 	br	201a048 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019f90:	0005303a 	rdctl	r2,status
 2019f94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019f98:	e0fffe17 	ldw	r3,-8(fp)
 2019f9c:	00bfff84 	movi	r2,-2
 2019fa0:	1884703a 	and	r2,r3,r2
 2019fa4:	1001703a 	wrctl	status,r2
  
  return context;
 2019fa8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019fac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 2019fb0:	e0bfff17 	ldw	r2,-4(fp)
 2019fb4:	10800283 	ldbu	r2,10(r2)
 2019fb8:	10803fcc 	andi	r2,r2,255
 2019fbc:	10000c26 	beq	r2,zero,2019ff0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2019fc0:	000f883a 	mov	r7,zero
 2019fc4:	01800044 	movi	r6,1
 2019fc8:	000b883a 	mov	r5,zero
 2019fcc:	e13fff17 	ldw	r4,-4(fp)
 2019fd0:	2014b280 	call	2014b28 <OS_EventTaskRdy>
 2019fd4:	e0bffa17 	ldw	r2,-24(fp)
 2019fd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019fdc:	e0bffb17 	ldw	r2,-20(fp)
 2019fe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2019fe4:	20155740 	call	2015574 <OS_Sched>
        return (OS_ERR_NONE);
 2019fe8:	0005883a 	mov	r2,zero
 2019fec:	00001606 	br	201a048 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 2019ff0:	e0bfff17 	ldw	r2,-4(fp)
 2019ff4:	1080020b 	ldhu	r2,8(r2)
 2019ff8:	10ffffcc 	andi	r3,r2,65535
 2019ffc:	00bfffd4 	movui	r2,65535
 201a000:	18800c26 	beq	r3,r2,201a034 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201a004:	e0bfff17 	ldw	r2,-4(fp)
 201a008:	1080020b 	ldhu	r2,8(r2)
 201a00c:	10800044 	addi	r2,r2,1
 201a010:	1007883a 	mov	r3,r2
 201a014:	e0bfff17 	ldw	r2,-4(fp)
 201a018:	10c0020d 	sth	r3,8(r2)
 201a01c:	e0bffa17 	ldw	r2,-24(fp)
 201a020:	e0bffc15 	stw	r2,-16(fp)
 201a024:	e0bffc17 	ldw	r2,-16(fp)
 201a028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201a02c:	0005883a 	mov	r2,zero
 201a030:	00000506 	br	201a048 <OSSemPost+0xfc>
 201a034:	e0bffa17 	ldw	r2,-24(fp)
 201a038:	e0bffd15 	stw	r2,-12(fp)
 201a03c:	e0bffd17 	ldw	r2,-12(fp)
 201a040:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201a044:	00800c84 	movi	r2,50
}
 201a048:	e037883a 	mov	sp,fp
 201a04c:	dfc00117 	ldw	ra,4(sp)
 201a050:	df000017 	ldw	fp,0(sp)
 201a054:	dec00204 	addi	sp,sp,8
 201a058:	f800283a 	ret

0201a05c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201a05c:	defff704 	addi	sp,sp,-36
 201a060:	df000815 	stw	fp,32(sp)
 201a064:	df000804 	addi	fp,sp,32
 201a068:	e13ffe15 	stw	r4,-8(fp)
 201a06c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a070:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a074:	e0bffe17 	ldw	r2,-8(fp)
 201a078:	1000021e 	bne	r2,zero,201a084 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201a07c:	00800104 	movi	r2,4
 201a080:	00003606 	br	201a15c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201a084:	e0bfff17 	ldw	r2,-4(fp)
 201a088:	1000021e 	bne	r2,zero,201a094 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201a08c:	00800244 	movi	r2,9
 201a090:	00003206 	br	201a15c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201a094:	e0bffe17 	ldw	r2,-8(fp)
 201a098:	10800003 	ldbu	r2,0(r2)
 201a09c:	10803fcc 	andi	r2,r2,255
 201a0a0:	108000e0 	cmpeqi	r2,r2,3
 201a0a4:	1000021e 	bne	r2,zero,201a0b0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201a0a8:	00800044 	movi	r2,1
 201a0ac:	00002b06 	br	201a15c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a0b0:	0005303a 	rdctl	r2,status
 201a0b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a0b8:	e0fffd17 	ldw	r3,-12(fp)
 201a0bc:	00bfff84 	movi	r2,-2
 201a0c0:	1884703a 	and	r2,r3,r2
 201a0c4:	1001703a 	wrctl	status,r2
  
  return context;
 201a0c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a0cc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201a0d0:	e0bffe17 	ldw	r2,-8(fp)
 201a0d4:	10c00283 	ldbu	r3,10(r2)
 201a0d8:	e0bfff17 	ldw	r2,-4(fp)
 201a0dc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201a0e0:	e0bffe17 	ldw	r2,-8(fp)
 201a0e4:	108002c4 	addi	r2,r2,11
 201a0e8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201a0ec:	e0bfff17 	ldw	r2,-4(fp)
 201a0f0:	10800084 	addi	r2,r2,2
 201a0f4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a0f8:	e03ffa05 	stb	zero,-24(fp)
 201a0fc:	00000b06 	br	201a12c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201a100:	e0bff917 	ldw	r2,-28(fp)
 201a104:	10c00044 	addi	r3,r2,1
 201a108:	e0fff915 	stw	r3,-28(fp)
 201a10c:	e0fff817 	ldw	r3,-32(fp)
 201a110:	19000044 	addi	r4,r3,1
 201a114:	e13ff815 	stw	r4,-32(fp)
 201a118:	18c00003 	ldbu	r3,0(r3)
 201a11c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a120:	e0bffa03 	ldbu	r2,-24(fp)
 201a124:	10800044 	addi	r2,r2,1
 201a128:	e0bffa05 	stb	r2,-24(fp)
 201a12c:	e0bffa03 	ldbu	r2,-24(fp)
 201a130:	108000f0 	cmpltui	r2,r2,3
 201a134:	103ff21e 	bne	r2,zero,201a100 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201a138:	e0bffe17 	ldw	r2,-8(fp)
 201a13c:	10c0020b 	ldhu	r3,8(r2)
 201a140:	e0bfff17 	ldw	r2,-4(fp)
 201a144:	10c0000d 	sth	r3,0(r2)
 201a148:	e0bffb17 	ldw	r2,-20(fp)
 201a14c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a150:	e0bffc17 	ldw	r2,-16(fp)
 201a154:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201a158:	0005883a 	mov	r2,zero
}
 201a15c:	e037883a 	mov	sp,fp
 201a160:	df000017 	ldw	fp,0(sp)
 201a164:	dec00104 	addi	sp,sp,4
 201a168:	f800283a 	ret

0201a16c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201a16c:	defff904 	addi	sp,sp,-28
 201a170:	df000615 	stw	fp,24(sp)
 201a174:	df000604 	addi	fp,sp,24
 201a178:	e13ffd15 	stw	r4,-12(fp)
 201a17c:	2805883a 	mov	r2,r5
 201a180:	e1bfff15 	stw	r6,-4(fp)
 201a184:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a188:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a18c:	e0bfff17 	ldw	r2,-4(fp)
 201a190:	10003126 	beq	r2,zero,201a258 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a194:	e0bffd17 	ldw	r2,-12(fp)
 201a198:	1000041e 	bne	r2,zero,201a1ac <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201a19c:	e0bfff17 	ldw	r2,-4(fp)
 201a1a0:	00c00104 	movi	r3,4
 201a1a4:	10c00005 	stb	r3,0(r2)
        return;
 201a1a8:	00002c06 	br	201a25c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a1ac:	e0bffd17 	ldw	r2,-12(fp)
 201a1b0:	10800003 	ldbu	r2,0(r2)
 201a1b4:	10803fcc 	andi	r2,r2,255
 201a1b8:	108000e0 	cmpeqi	r2,r2,3
 201a1bc:	1000041e 	bne	r2,zero,201a1d0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201a1c0:	e0bfff17 	ldw	r2,-4(fp)
 201a1c4:	00c00044 	movi	r3,1
 201a1c8:	10c00005 	stb	r3,0(r2)
        return;
 201a1cc:	00002306 	br	201a25c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a1d0:	0005303a 	rdctl	r2,status
 201a1d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a1d8:	e0fffc17 	ldw	r3,-16(fp)
 201a1dc:	00bfff84 	movi	r2,-2
 201a1e0:	1884703a 	and	r2,r3,r2
 201a1e4:	1001703a 	wrctl	status,r2
  
  return context;
 201a1e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a1ec:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201a1f0:	e0bfff17 	ldw	r2,-4(fp)
 201a1f4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201a1f8:	e0bffd17 	ldw	r2,-12(fp)
 201a1fc:	1080020b 	ldhu	r2,8(r2)
 201a200:	10bfffcc 	andi	r2,r2,65535
 201a204:	10000426 	beq	r2,zero,201a218 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201a208:	e0bffd17 	ldw	r2,-12(fp)
 201a20c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a210:	10c0020d 	sth	r3,8(r2)
 201a214:	00000b06 	br	201a244 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201a218:	e0bffd17 	ldw	r2,-12(fp)
 201a21c:	10800283 	ldbu	r2,10(r2)
 201a220:	10803fcc 	andi	r2,r2,255
 201a224:	1000041e 	bne	r2,zero,201a238 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201a228:	e0bffd17 	ldw	r2,-12(fp)
 201a22c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a230:	10c0020d 	sth	r3,8(r2)
 201a234:	00000306 	br	201a244 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201a238:	e0bfff17 	ldw	r2,-4(fp)
 201a23c:	00c01244 	movi	r3,73
 201a240:	10c00005 	stb	r3,0(r2)
 201a244:	e0bffa17 	ldw	r2,-24(fp)
 201a248:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a24c:	e0bffb17 	ldw	r2,-20(fp)
 201a250:	1001703a 	wrctl	status,r2
 201a254:	00000106 	br	201a25c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201a258:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201a25c:	e037883a 	mov	sp,fp
 201a260:	df000017 	ldw	fp,0(sp)
 201a264:	dec00104 	addi	sp,sp,4
 201a268:	f800283a 	ret

0201a26c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201a26c:	defff104 	addi	sp,sp,-60
 201a270:	dfc00e15 	stw	ra,56(sp)
 201a274:	df000d15 	stw	fp,52(sp)
 201a278:	df000d04 	addi	fp,sp,52
 201a27c:	2007883a 	mov	r3,r4
 201a280:	2805883a 	mov	r2,r5
 201a284:	e0fffe05 	stb	r3,-8(fp)
 201a288:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201a28c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201a290:	e0bffe03 	ldbu	r2,-8(fp)
 201a294:	10800530 	cmpltui	r2,r2,20
 201a298:	1000051e 	bne	r2,zero,201a2b0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201a29c:	e0bffe03 	ldbu	r2,-8(fp)
 201a2a0:	10803fe0 	cmpeqi	r2,r2,255
 201a2a4:	1000021e 	bne	r2,zero,201a2b0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201a2a8:	00800a84 	movi	r2,42
 201a2ac:	00012606 	br	201a748 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201a2b0:	e0bfff03 	ldbu	r2,-4(fp)
 201a2b4:	10800530 	cmpltui	r2,r2,20
 201a2b8:	1000021e 	bne	r2,zero,201a2c4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201a2bc:	00800a84 	movi	r2,42
 201a2c0:	00012106 	br	201a748 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a2c4:	0005303a 	rdctl	r2,status
 201a2c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a2cc:	e0fffd17 	ldw	r3,-12(fp)
 201a2d0:	00bfff84 	movi	r2,-2
 201a2d4:	1884703a 	and	r2,r3,r2
 201a2d8:	1001703a 	wrctl	status,r2
  
  return context;
 201a2dc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a2e0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201a2e4:	e0ffff03 	ldbu	r3,-4(fp)
 201a2e8:	008080f4 	movhi	r2,515
 201a2ec:	10ad6904 	addi	r2,r2,-19036
 201a2f0:	18c7883a 	add	r3,r3,r3
 201a2f4:	18c7883a 	add	r3,r3,r3
 201a2f8:	10c5883a 	add	r2,r2,r3
 201a2fc:	10800017 	ldw	r2,0(r2)
 201a300:	10000626 	beq	r2,zero,201a31c <OSTaskChangePrio+0xb0>
 201a304:	e0bff517 	ldw	r2,-44(fp)
 201a308:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a30c:	e0bff617 	ldw	r2,-40(fp)
 201a310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201a314:	00800a04 	movi	r2,40
 201a318:	00010b06 	br	201a748 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201a31c:	e0bffe03 	ldbu	r2,-8(fp)
 201a320:	10803fd8 	cmpnei	r2,r2,255
 201a324:	1000031e 	bne	r2,zero,201a334 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201a328:	d0a74117 	ldw	r2,-25340(gp)
 201a32c:	10800c83 	ldbu	r2,50(r2)
 201a330:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201a334:	e0fffe03 	ldbu	r3,-8(fp)
 201a338:	008080f4 	movhi	r2,515
 201a33c:	10ad6904 	addi	r2,r2,-19036
 201a340:	18c7883a 	add	r3,r3,r3
 201a344:	18c7883a 	add	r3,r3,r3
 201a348:	10c5883a 	add	r2,r2,r3
 201a34c:	10800017 	ldw	r2,0(r2)
 201a350:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201a354:	e0bff817 	ldw	r2,-32(fp)
 201a358:	1000061e 	bne	r2,zero,201a374 <OSTaskChangePrio+0x108>
 201a35c:	e0bff517 	ldw	r2,-44(fp)
 201a360:	e0bff715 	stw	r2,-36(fp)
 201a364:	e0bff717 	ldw	r2,-36(fp)
 201a368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201a36c:	00800a44 	movi	r2,41
 201a370:	0000f506 	br	201a748 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201a374:	e0bff817 	ldw	r2,-32(fp)
 201a378:	10800058 	cmpnei	r2,r2,1
 201a37c:	1000061e 	bne	r2,zero,201a398 <OSTaskChangePrio+0x12c>
 201a380:	e0bff517 	ldw	r2,-44(fp)
 201a384:	e0bff915 	stw	r2,-28(fp)
 201a388:	e0bff917 	ldw	r2,-28(fp)
 201a38c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201a390:	008010c4 	movi	r2,67
 201a394:	0000ec06 	br	201a748 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201a398:	e0bfff03 	ldbu	r2,-4(fp)
 201a39c:	1004d0fa 	srli	r2,r2,3
 201a3a0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201a3a4:	e0bfff03 	ldbu	r2,-4(fp)
 201a3a8:	108001cc 	andi	r2,r2,7
 201a3ac:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201a3b0:	e0bffb03 	ldbu	r2,-20(fp)
 201a3b4:	00c00044 	movi	r3,1
 201a3b8:	1884983a 	sll	r2,r3,r2
 201a3bc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201a3c0:	e0bffb43 	ldbu	r2,-19(fp)
 201a3c4:	00c00044 	movi	r3,1
 201a3c8:	1884983a 	sll	r2,r3,r2
 201a3cc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201a3d0:	e0fffe03 	ldbu	r3,-8(fp)
 201a3d4:	008080f4 	movhi	r2,515
 201a3d8:	10ad6904 	addi	r2,r2,-19036
 201a3dc:	18c7883a 	add	r3,r3,r3
 201a3e0:	18c7883a 	add	r3,r3,r3
 201a3e4:	10c5883a 	add	r2,r2,r3
 201a3e8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201a3ec:	e0ffff03 	ldbu	r3,-4(fp)
 201a3f0:	008080f4 	movhi	r2,515
 201a3f4:	10ad6904 	addi	r2,r2,-19036
 201a3f8:	18c7883a 	add	r3,r3,r3
 201a3fc:	18c7883a 	add	r3,r3,r3
 201a400:	10c5883a 	add	r2,r2,r3
 201a404:	e0fff817 	ldw	r3,-32(fp)
 201a408:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201a40c:	e0bff817 	ldw	r2,-32(fp)
 201a410:	10800d03 	ldbu	r2,52(r2)
 201a414:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201a418:	e0bff817 	ldw	r2,-32(fp)
 201a41c:	10800d83 	ldbu	r2,54(r2)
 201a420:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201a424:	e0bff817 	ldw	r2,-32(fp)
 201a428:	10800d43 	ldbu	r2,53(r2)
 201a42c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201a430:	e0fffc03 	ldbu	r3,-16(fp)
 201a434:	d0a73e44 	addi	r2,gp,-25351
 201a438:	1885883a 	add	r2,r3,r2
 201a43c:	10c00003 	ldbu	r3,0(r2)
 201a440:	e0bffc83 	ldbu	r2,-14(fp)
 201a444:	1884703a 	and	r2,r3,r2
 201a448:	10803fcc 	andi	r2,r2,255
 201a44c:	10002826 	beq	r2,zero,201a4f0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201a450:	e0fffc03 	ldbu	r3,-16(fp)
 201a454:	e13ffc03 	ldbu	r4,-16(fp)
 201a458:	d0a73e44 	addi	r2,gp,-25351
 201a45c:	2085883a 	add	r2,r4,r2
 201a460:	10800003 	ldbu	r2,0(r2)
 201a464:	1009883a 	mov	r4,r2
 201a468:	e0bffc83 	ldbu	r2,-14(fp)
 201a46c:	0084303a 	nor	r2,zero,r2
 201a470:	2084703a 	and	r2,r4,r2
 201a474:	1009883a 	mov	r4,r2
 201a478:	d0a73e44 	addi	r2,gp,-25351
 201a47c:	1885883a 	add	r2,r3,r2
 201a480:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201a484:	e0fffc03 	ldbu	r3,-16(fp)
 201a488:	d0a73e44 	addi	r2,gp,-25351
 201a48c:	1885883a 	add	r2,r3,r2
 201a490:	10800003 	ldbu	r2,0(r2)
 201a494:	10803fcc 	andi	r2,r2,255
 201a498:	1000061e 	bne	r2,zero,201a4b4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201a49c:	e0bffc43 	ldbu	r2,-15(fp)
 201a4a0:	0084303a 	nor	r2,zero,r2
 201a4a4:	1007883a 	mov	r3,r2
 201a4a8:	d0a73e03 	ldbu	r2,-25352(gp)
 201a4ac:	1884703a 	and	r2,r3,r2
 201a4b0:	d0a73e05 	stb	r2,-25352(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201a4b4:	d0e73e03 	ldbu	r3,-25352(gp)
 201a4b8:	e0bffb83 	ldbu	r2,-18(fp)
 201a4bc:	1884b03a 	or	r2,r3,r2
 201a4c0:	d0a73e05 	stb	r2,-25352(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201a4c4:	e0fffb03 	ldbu	r3,-20(fp)
 201a4c8:	e13ffb03 	ldbu	r4,-20(fp)
 201a4cc:	d0a73e44 	addi	r2,gp,-25351
 201a4d0:	2085883a 	add	r2,r4,r2
 201a4d4:	11000003 	ldbu	r4,0(r2)
 201a4d8:	e0bffbc3 	ldbu	r2,-17(fp)
 201a4dc:	2084b03a 	or	r2,r4,r2
 201a4e0:	1009883a 	mov	r4,r2
 201a4e4:	d0a73e44 	addi	r2,gp,-25351
 201a4e8:	1885883a 	add	r2,r3,r2
 201a4ec:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201a4f0:	e0bff817 	ldw	r2,-32(fp)
 201a4f4:	10800717 	ldw	r2,28(r2)
 201a4f8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201a4fc:	e0bff317 	ldw	r2,-52(fp)
 201a500:	10003326 	beq	r2,zero,201a5d0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201a504:	e0bffc03 	ldbu	r2,-16(fp)
 201a508:	e0fffc03 	ldbu	r3,-16(fp)
 201a50c:	e13ff317 	ldw	r4,-52(fp)
 201a510:	20c7883a 	add	r3,r4,r3
 201a514:	18c002c4 	addi	r3,r3,11
 201a518:	18c00003 	ldbu	r3,0(r3)
 201a51c:	1809883a 	mov	r4,r3
 201a520:	e0fffc83 	ldbu	r3,-14(fp)
 201a524:	00c6303a 	nor	r3,zero,r3
 201a528:	20c6703a 	and	r3,r4,r3
 201a52c:	1809883a 	mov	r4,r3
 201a530:	e0fff317 	ldw	r3,-52(fp)
 201a534:	1885883a 	add	r2,r3,r2
 201a538:	108002c4 	addi	r2,r2,11
 201a53c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201a540:	e0bffc03 	ldbu	r2,-16(fp)
 201a544:	e0fff317 	ldw	r3,-52(fp)
 201a548:	1885883a 	add	r2,r3,r2
 201a54c:	108002c4 	addi	r2,r2,11
 201a550:	10800003 	ldbu	r2,0(r2)
 201a554:	10803fcc 	andi	r2,r2,255
 201a558:	1000091e 	bne	r2,zero,201a580 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201a55c:	e0bff317 	ldw	r2,-52(fp)
 201a560:	10800283 	ldbu	r2,10(r2)
 201a564:	1007883a 	mov	r3,r2
 201a568:	e0bffc43 	ldbu	r2,-15(fp)
 201a56c:	0084303a 	nor	r2,zero,r2
 201a570:	1884703a 	and	r2,r3,r2
 201a574:	1007883a 	mov	r3,r2
 201a578:	e0bff317 	ldw	r2,-52(fp)
 201a57c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201a580:	e0bff317 	ldw	r2,-52(fp)
 201a584:	10c00283 	ldbu	r3,10(r2)
 201a588:	e0bffb83 	ldbu	r2,-18(fp)
 201a58c:	1884b03a 	or	r2,r3,r2
 201a590:	1007883a 	mov	r3,r2
 201a594:	e0bff317 	ldw	r2,-52(fp)
 201a598:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201a59c:	e0bffb03 	ldbu	r2,-20(fp)
 201a5a0:	e0fffb03 	ldbu	r3,-20(fp)
 201a5a4:	e13ff317 	ldw	r4,-52(fp)
 201a5a8:	20c7883a 	add	r3,r4,r3
 201a5ac:	18c002c4 	addi	r3,r3,11
 201a5b0:	19000003 	ldbu	r4,0(r3)
 201a5b4:	e0fffbc3 	ldbu	r3,-17(fp)
 201a5b8:	20c6b03a 	or	r3,r4,r3
 201a5bc:	1809883a 	mov	r4,r3
 201a5c0:	e0fff317 	ldw	r3,-52(fp)
 201a5c4:	1885883a 	add	r2,r3,r2
 201a5c8:	108002c4 	addi	r2,r2,11
 201a5cc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201a5d0:	e0bff817 	ldw	r2,-32(fp)
 201a5d4:	10800817 	ldw	r2,32(r2)
 201a5d8:	10004226 	beq	r2,zero,201a6e4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201a5dc:	e0bff817 	ldw	r2,-32(fp)
 201a5e0:	10800817 	ldw	r2,32(r2)
 201a5e4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201a5e8:	e0bff417 	ldw	r2,-48(fp)
 201a5ec:	10800017 	ldw	r2,0(r2)
 201a5f0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201a5f4:	00003906 	br	201a6dc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201a5f8:	e0bffc03 	ldbu	r2,-16(fp)
 201a5fc:	e0fffc03 	ldbu	r3,-16(fp)
 201a600:	e13ff317 	ldw	r4,-52(fp)
 201a604:	20c7883a 	add	r3,r4,r3
 201a608:	18c002c4 	addi	r3,r3,11
 201a60c:	18c00003 	ldbu	r3,0(r3)
 201a610:	1809883a 	mov	r4,r3
 201a614:	e0fffc83 	ldbu	r3,-14(fp)
 201a618:	00c6303a 	nor	r3,zero,r3
 201a61c:	20c6703a 	and	r3,r4,r3
 201a620:	1809883a 	mov	r4,r3
 201a624:	e0fff317 	ldw	r3,-52(fp)
 201a628:	1885883a 	add	r2,r3,r2
 201a62c:	108002c4 	addi	r2,r2,11
 201a630:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201a634:	e0bffc03 	ldbu	r2,-16(fp)
 201a638:	e0fff317 	ldw	r3,-52(fp)
 201a63c:	1885883a 	add	r2,r3,r2
 201a640:	108002c4 	addi	r2,r2,11
 201a644:	10800003 	ldbu	r2,0(r2)
 201a648:	10803fcc 	andi	r2,r2,255
 201a64c:	1000091e 	bne	r2,zero,201a674 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201a650:	e0bff317 	ldw	r2,-52(fp)
 201a654:	10800283 	ldbu	r2,10(r2)
 201a658:	1007883a 	mov	r3,r2
 201a65c:	e0bffc43 	ldbu	r2,-15(fp)
 201a660:	0084303a 	nor	r2,zero,r2
 201a664:	1884703a 	and	r2,r3,r2
 201a668:	1007883a 	mov	r3,r2
 201a66c:	e0bff317 	ldw	r2,-52(fp)
 201a670:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201a674:	e0bff317 	ldw	r2,-52(fp)
 201a678:	10c00283 	ldbu	r3,10(r2)
 201a67c:	e0bffb83 	ldbu	r2,-18(fp)
 201a680:	1884b03a 	or	r2,r3,r2
 201a684:	1007883a 	mov	r3,r2
 201a688:	e0bff317 	ldw	r2,-52(fp)
 201a68c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201a690:	e0bffb03 	ldbu	r2,-20(fp)
 201a694:	e0fffb03 	ldbu	r3,-20(fp)
 201a698:	e13ff317 	ldw	r4,-52(fp)
 201a69c:	20c7883a 	add	r3,r4,r3
 201a6a0:	18c002c4 	addi	r3,r3,11
 201a6a4:	19000003 	ldbu	r4,0(r3)
 201a6a8:	e0fffbc3 	ldbu	r3,-17(fp)
 201a6ac:	20c6b03a 	or	r3,r4,r3
 201a6b0:	1809883a 	mov	r4,r3
 201a6b4:	e0fff317 	ldw	r3,-52(fp)
 201a6b8:	1885883a 	add	r2,r3,r2
 201a6bc:	108002c4 	addi	r2,r2,11
 201a6c0:	11000005 	stb	r4,0(r2)
            pevents++;
 201a6c4:	e0bff417 	ldw	r2,-48(fp)
 201a6c8:	10800104 	addi	r2,r2,4
 201a6cc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201a6d0:	e0bff417 	ldw	r2,-48(fp)
 201a6d4:	10800017 	ldw	r2,0(r2)
 201a6d8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201a6dc:	e0bff317 	ldw	r2,-52(fp)
 201a6e0:	103fc51e 	bne	r2,zero,201a5f8 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201a6e4:	e0bff817 	ldw	r2,-32(fp)
 201a6e8:	e0ffff03 	ldbu	r3,-4(fp)
 201a6ec:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201a6f0:	e0bff817 	ldw	r2,-32(fp)
 201a6f4:	e0fffb03 	ldbu	r3,-20(fp)
 201a6f8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201a6fc:	e0bff817 	ldw	r2,-32(fp)
 201a700:	e0fffb43 	ldbu	r3,-19(fp)
 201a704:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201a708:	e0bff817 	ldw	r2,-32(fp)
 201a70c:	e0fffb83 	ldbu	r3,-18(fp)
 201a710:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201a714:	e0bff817 	ldw	r2,-32(fp)
 201a718:	e0fffbc3 	ldbu	r3,-17(fp)
 201a71c:	10c00d45 	stb	r3,53(r2)
 201a720:	e0bff517 	ldw	r2,-44(fp)
 201a724:	e0bffa15 	stw	r2,-24(fp)
 201a728:	e0bffa17 	ldw	r2,-24(fp)
 201a72c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201a730:	d0a73243 	ldbu	r2,-25399(gp)
 201a734:	10803fcc 	andi	r2,r2,255
 201a738:	10800058 	cmpnei	r2,r2,1
 201a73c:	1000011e 	bne	r2,zero,201a744 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201a740:	20155740 	call	2015574 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201a744:	0005883a 	mov	r2,zero
}
 201a748:	e037883a 	mov	sp,fp
 201a74c:	dfc00117 	ldw	ra,4(sp)
 201a750:	df000017 	ldw	fp,0(sp)
 201a754:	dec00204 	addi	sp,sp,8
 201a758:	f800283a 	ret

0201a75c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201a75c:	deffee04 	addi	sp,sp,-72
 201a760:	dfc01115 	stw	ra,68(sp)
 201a764:	df001015 	stw	fp,64(sp)
 201a768:	df001004 	addi	fp,sp,64
 201a76c:	e13ffc15 	stw	r4,-16(fp)
 201a770:	e17ffd15 	stw	r5,-12(fp)
 201a774:	e1bffe15 	stw	r6,-8(fp)
 201a778:	3805883a 	mov	r2,r7
 201a77c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201a780:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201a784:	e0bfff03 	ldbu	r2,-4(fp)
 201a788:	10800570 	cmpltui	r2,r2,21
 201a78c:	1000021e 	bne	r2,zero,201a798 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201a790:	00800a84 	movi	r2,42
 201a794:	00005706 	br	201a8f4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a798:	0005303a 	rdctl	r2,status
 201a79c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a7a0:	e0fffb17 	ldw	r3,-20(fp)
 201a7a4:	00bfff84 	movi	r2,-2
 201a7a8:	1884703a 	and	r2,r3,r2
 201a7ac:	1001703a 	wrctl	status,r2
  
  return context;
 201a7b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a7b4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201a7b8:	d0a74003 	ldbu	r2,-25344(gp)
 201a7bc:	10803fcc 	andi	r2,r2,255
 201a7c0:	10000626 	beq	r2,zero,201a7dc <OSTaskCreate+0x80>
 201a7c4:	e0bff317 	ldw	r2,-52(fp)
 201a7c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a7cc:	e0bff417 	ldw	r2,-48(fp)
 201a7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201a7d4:	00800f04 	movi	r2,60
 201a7d8:	00004606 	br	201a8f4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201a7dc:	e0ffff03 	ldbu	r3,-4(fp)
 201a7e0:	008080f4 	movhi	r2,515
 201a7e4:	10ad6904 	addi	r2,r2,-19036
 201a7e8:	18c7883a 	add	r3,r3,r3
 201a7ec:	18c7883a 	add	r3,r3,r3
 201a7f0:	10c5883a 	add	r2,r2,r3
 201a7f4:	10800017 	ldw	r2,0(r2)
 201a7f8:	1000391e 	bne	r2,zero,201a8e0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201a7fc:	e0ffff03 	ldbu	r3,-4(fp)
 201a800:	008080f4 	movhi	r2,515
 201a804:	10ad6904 	addi	r2,r2,-19036
 201a808:	18c7883a 	add	r3,r3,r3
 201a80c:	18c7883a 	add	r3,r3,r3
 201a810:	10c5883a 	add	r2,r2,r3
 201a814:	00c00044 	movi	r3,1
 201a818:	10c00015 	stw	r3,0(r2)
 201a81c:	e0bff317 	ldw	r2,-52(fp)
 201a820:	e0bff515 	stw	r2,-44(fp)
 201a824:	e0bff517 	ldw	r2,-44(fp)
 201a828:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201a82c:	000f883a 	mov	r7,zero
 201a830:	e1bffe17 	ldw	r6,-8(fp)
 201a834:	e17ffd17 	ldw	r5,-12(fp)
 201a838:	e13ffc17 	ldw	r4,-16(fp)
 201a83c:	201d9c00 	call	201d9c0 <OSTaskStkInit>
 201a840:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201a844:	e0bfff03 	ldbu	r2,-4(fp)
 201a848:	d8000215 	stw	zero,8(sp)
 201a84c:	d8000115 	stw	zero,4(sp)
 201a850:	d8000015 	stw	zero,0(sp)
 201a854:	000f883a 	mov	r7,zero
 201a858:	000d883a 	mov	r6,zero
 201a85c:	e17ff717 	ldw	r5,-36(fp)
 201a860:	1009883a 	mov	r4,r2
 201a864:	20159740 	call	2015974 <OS_TCBInit>
 201a868:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201a86c:	e0bff803 	ldbu	r2,-32(fp)
 201a870:	1000061e 	bne	r2,zero,201a88c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201a874:	d0a73243 	ldbu	r2,-25399(gp)
 201a878:	10803fcc 	andi	r2,r2,255
 201a87c:	10800058 	cmpnei	r2,r2,1
 201a880:	1000151e 	bne	r2,zero,201a8d8 <OSTaskCreate+0x17c>
                OS_Sched();
 201a884:	20155740 	call	2015574 <OS_Sched>
 201a888:	00001306 	br	201a8d8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a88c:	0005303a 	rdctl	r2,status
 201a890:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a894:	e0fffa17 	ldw	r3,-24(fp)
 201a898:	00bfff84 	movi	r2,-2
 201a89c:	1884703a 	and	r2,r3,r2
 201a8a0:	1001703a 	wrctl	status,r2
  
  return context;
 201a8a4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201a8a8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201a8ac:	e0ffff03 	ldbu	r3,-4(fp)
 201a8b0:	008080f4 	movhi	r2,515
 201a8b4:	10ad6904 	addi	r2,r2,-19036
 201a8b8:	18c7883a 	add	r3,r3,r3
 201a8bc:	18c7883a 	add	r3,r3,r3
 201a8c0:	10c5883a 	add	r2,r2,r3
 201a8c4:	10000015 	stw	zero,0(r2)
 201a8c8:	e0bff317 	ldw	r2,-52(fp)
 201a8cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a8d0:	e0bff617 	ldw	r2,-40(fp)
 201a8d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201a8d8:	e0bff803 	ldbu	r2,-32(fp)
 201a8dc:	00000506 	br	201a8f4 <OSTaskCreate+0x198>
 201a8e0:	e0bff317 	ldw	r2,-52(fp)
 201a8e4:	e0bff915 	stw	r2,-28(fp)
 201a8e8:	e0bff917 	ldw	r2,-28(fp)
 201a8ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201a8f0:	00800a04 	movi	r2,40
}
 201a8f4:	e037883a 	mov	sp,fp
 201a8f8:	dfc00117 	ldw	ra,4(sp)
 201a8fc:	df000017 	ldw	fp,0(sp)
 201a900:	dec00204 	addi	sp,sp,8
 201a904:	f800283a 	ret

0201a908 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201a908:	deffec04 	addi	sp,sp,-80
 201a90c:	dfc01315 	stw	ra,76(sp)
 201a910:	df001215 	stw	fp,72(sp)
 201a914:	df001204 	addi	fp,sp,72
 201a918:	e13ffa15 	stw	r4,-24(fp)
 201a91c:	e17ffb15 	stw	r5,-20(fp)
 201a920:	e1bffc15 	stw	r6,-16(fp)
 201a924:	3809883a 	mov	r4,r7
 201a928:	e0c00217 	ldw	r3,8(fp)
 201a92c:	e0800617 	ldw	r2,24(fp)
 201a930:	e13ffd05 	stb	r4,-12(fp)
 201a934:	e0fffe0d 	sth	r3,-8(fp)
 201a938:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201a93c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201a940:	e0bffd03 	ldbu	r2,-12(fp)
 201a944:	10800570 	cmpltui	r2,r2,21
 201a948:	1000021e 	bne	r2,zero,201a954 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201a94c:	00800a84 	movi	r2,42
 201a950:	00006106 	br	201aad8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a954:	0005303a 	rdctl	r2,status
 201a958:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a95c:	e0fff917 	ldw	r3,-28(fp)
 201a960:	00bfff84 	movi	r2,-2
 201a964:	1884703a 	and	r2,r3,r2
 201a968:	1001703a 	wrctl	status,r2
  
  return context;
 201a96c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a970:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201a974:	d0a74003 	ldbu	r2,-25344(gp)
 201a978:	10803fcc 	andi	r2,r2,255
 201a97c:	10000626 	beq	r2,zero,201a998 <OSTaskCreateExt+0x90>
 201a980:	e0bff117 	ldw	r2,-60(fp)
 201a984:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a988:	e0bff217 	ldw	r2,-56(fp)
 201a98c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201a990:	00800f04 	movi	r2,60
 201a994:	00005006 	br	201aad8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201a998:	e0fffd03 	ldbu	r3,-12(fp)
 201a99c:	008080f4 	movhi	r2,515
 201a9a0:	10ad6904 	addi	r2,r2,-19036
 201a9a4:	18c7883a 	add	r3,r3,r3
 201a9a8:	18c7883a 	add	r3,r3,r3
 201a9ac:	10c5883a 	add	r2,r2,r3
 201a9b0:	10800017 	ldw	r2,0(r2)
 201a9b4:	1000431e 	bne	r2,zero,201aac4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201a9b8:	e0fffd03 	ldbu	r3,-12(fp)
 201a9bc:	008080f4 	movhi	r2,515
 201a9c0:	10ad6904 	addi	r2,r2,-19036
 201a9c4:	18c7883a 	add	r3,r3,r3
 201a9c8:	18c7883a 	add	r3,r3,r3
 201a9cc:	10c5883a 	add	r2,r2,r3
 201a9d0:	00c00044 	movi	r3,1
 201a9d4:	10c00015 	stw	r3,0(r2)
 201a9d8:	e0bff117 	ldw	r2,-60(fp)
 201a9dc:	e0bff315 	stw	r2,-52(fp)
 201a9e0:	e0bff317 	ldw	r2,-52(fp)
 201a9e4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201a9e8:	e0bfff0b 	ldhu	r2,-4(fp)
 201a9ec:	100d883a 	mov	r6,r2
 201a9f0:	e1400417 	ldw	r5,16(fp)
 201a9f4:	e1000317 	ldw	r4,12(fp)
 201a9f8:	201b9680 	call	201b968 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201a9fc:	e0bfff0b 	ldhu	r2,-4(fp)
 201aa00:	100f883a 	mov	r7,r2
 201aa04:	e1bffc17 	ldw	r6,-16(fp)
 201aa08:	e17ffb17 	ldw	r5,-20(fp)
 201aa0c:	e13ffa17 	ldw	r4,-24(fp)
 201aa10:	201d9c00 	call	201d9c0 <OSTaskStkInit>
 201aa14:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201aa18:	e0fffd03 	ldbu	r3,-12(fp)
 201aa1c:	e13ffe0b 	ldhu	r4,-8(fp)
 201aa20:	e0bfff0b 	ldhu	r2,-4(fp)
 201aa24:	d8800215 	stw	r2,8(sp)
 201aa28:	e0800517 	ldw	r2,20(fp)
 201aa2c:	d8800115 	stw	r2,4(sp)
 201aa30:	e0800417 	ldw	r2,16(fp)
 201aa34:	d8800015 	stw	r2,0(sp)
 201aa38:	200f883a 	mov	r7,r4
 201aa3c:	e1800317 	ldw	r6,12(fp)
 201aa40:	e17ff517 	ldw	r5,-44(fp)
 201aa44:	1809883a 	mov	r4,r3
 201aa48:	20159740 	call	2015974 <OS_TCBInit>
 201aa4c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201aa50:	e0bff603 	ldbu	r2,-40(fp)
 201aa54:	1000061e 	bne	r2,zero,201aa70 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201aa58:	d0a73243 	ldbu	r2,-25399(gp)
 201aa5c:	10803fcc 	andi	r2,r2,255
 201aa60:	10800058 	cmpnei	r2,r2,1
 201aa64:	1000151e 	bne	r2,zero,201aabc <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201aa68:	20155740 	call	2015574 <OS_Sched>
 201aa6c:	00001306 	br	201aabc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aa70:	0005303a 	rdctl	r2,status
 201aa74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aa78:	e0fff817 	ldw	r3,-32(fp)
 201aa7c:	00bfff84 	movi	r2,-2
 201aa80:	1884703a 	and	r2,r3,r2
 201aa84:	1001703a 	wrctl	status,r2
  
  return context;
 201aa88:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201aa8c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201aa90:	e0fffd03 	ldbu	r3,-12(fp)
 201aa94:	008080f4 	movhi	r2,515
 201aa98:	10ad6904 	addi	r2,r2,-19036
 201aa9c:	18c7883a 	add	r3,r3,r3
 201aaa0:	18c7883a 	add	r3,r3,r3
 201aaa4:	10c5883a 	add	r2,r2,r3
 201aaa8:	10000015 	stw	zero,0(r2)
 201aaac:	e0bff117 	ldw	r2,-60(fp)
 201aab0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aab4:	e0bff417 	ldw	r2,-48(fp)
 201aab8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201aabc:	e0bff603 	ldbu	r2,-40(fp)
 201aac0:	00000506 	br	201aad8 <OSTaskCreateExt+0x1d0>
 201aac4:	e0bff117 	ldw	r2,-60(fp)
 201aac8:	e0bff715 	stw	r2,-36(fp)
 201aacc:	e0bff717 	ldw	r2,-36(fp)
 201aad0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201aad4:	00800a04 	movi	r2,40
}
 201aad8:	e037883a 	mov	sp,fp
 201aadc:	dfc00117 	ldw	ra,4(sp)
 201aae0:	df000017 	ldw	fp,0(sp)
 201aae4:	dec00204 	addi	sp,sp,8
 201aae8:	f800283a 	ret

0201aaec <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201aaec:	defff404 	addi	sp,sp,-48
 201aaf0:	dfc00b15 	stw	ra,44(sp)
 201aaf4:	df000a15 	stw	fp,40(sp)
 201aaf8:	df000a04 	addi	fp,sp,40
 201aafc:	2005883a 	mov	r2,r4
 201ab00:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201ab04:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201ab08:	d0a74003 	ldbu	r2,-25344(gp)
 201ab0c:	10803fcc 	andi	r2,r2,255
 201ab10:	10000226 	beq	r2,zero,201ab1c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201ab14:	00801004 	movi	r2,64
 201ab18:	0000c006 	br	201ae1c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201ab1c:	e0bfff03 	ldbu	r2,-4(fp)
 201ab20:	10800518 	cmpnei	r2,r2,20
 201ab24:	1000021e 	bne	r2,zero,201ab30 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201ab28:	00800f84 	movi	r2,62
 201ab2c:	0000bb06 	br	201ae1c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201ab30:	e0bfff03 	ldbu	r2,-4(fp)
 201ab34:	10800530 	cmpltui	r2,r2,20
 201ab38:	1000051e 	bne	r2,zero,201ab50 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201ab3c:	e0bfff03 	ldbu	r2,-4(fp)
 201ab40:	10803fe0 	cmpeqi	r2,r2,255
 201ab44:	1000021e 	bne	r2,zero,201ab50 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201ab48:	00800a84 	movi	r2,42
 201ab4c:	0000b306 	br	201ae1c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ab50:	0005303a 	rdctl	r2,status
 201ab54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ab58:	e0fffe17 	ldw	r3,-8(fp)
 201ab5c:	00bfff84 	movi	r2,-2
 201ab60:	1884703a 	and	r2,r3,r2
 201ab64:	1001703a 	wrctl	status,r2
  
  return context;
 201ab68:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201ab6c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201ab70:	e0bfff03 	ldbu	r2,-4(fp)
 201ab74:	10803fd8 	cmpnei	r2,r2,255
 201ab78:	1000031e 	bne	r2,zero,201ab88 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201ab7c:	d0a74117 	ldw	r2,-25340(gp)
 201ab80:	10800c83 	ldbu	r2,50(r2)
 201ab84:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ab88:	e0ffff03 	ldbu	r3,-4(fp)
 201ab8c:	008080f4 	movhi	r2,515
 201ab90:	10ad6904 	addi	r2,r2,-19036
 201ab94:	18c7883a 	add	r3,r3,r3
 201ab98:	18c7883a 	add	r3,r3,r3
 201ab9c:	10c5883a 	add	r2,r2,r3
 201aba0:	10800017 	ldw	r2,0(r2)
 201aba4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201aba8:	e0bff817 	ldw	r2,-32(fp)
 201abac:	1000061e 	bne	r2,zero,201abc8 <OSTaskDel+0xdc>
 201abb0:	e0bff617 	ldw	r2,-40(fp)
 201abb4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201abb8:	e0bff717 	ldw	r2,-36(fp)
 201abbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201abc0:	008010c4 	movi	r2,67
 201abc4:	00009506 	br	201ae1c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201abc8:	e0bff817 	ldw	r2,-32(fp)
 201abcc:	10800058 	cmpnei	r2,r2,1
 201abd0:	1000061e 	bne	r2,zero,201abec <OSTaskDel+0x100>
 201abd4:	e0bff617 	ldw	r2,-40(fp)
 201abd8:	e0bff915 	stw	r2,-28(fp)
 201abdc:	e0bff917 	ldw	r2,-28(fp)
 201abe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201abe4:	00800f44 	movi	r2,61
 201abe8:	00008c06 	br	201ae1c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201abec:	e0bff817 	ldw	r2,-32(fp)
 201abf0:	10800d03 	ldbu	r2,52(r2)
 201abf4:	10c03fcc 	andi	r3,r2,255
 201abf8:	e0bff817 	ldw	r2,-32(fp)
 201abfc:	10800d03 	ldbu	r2,52(r2)
 201ac00:	11003fcc 	andi	r4,r2,255
 201ac04:	d0a73e44 	addi	r2,gp,-25351
 201ac08:	2085883a 	add	r2,r4,r2
 201ac0c:	10800003 	ldbu	r2,0(r2)
 201ac10:	1009883a 	mov	r4,r2
 201ac14:	e0bff817 	ldw	r2,-32(fp)
 201ac18:	10800d43 	ldbu	r2,53(r2)
 201ac1c:	0084303a 	nor	r2,zero,r2
 201ac20:	2084703a 	and	r2,r4,r2
 201ac24:	1009883a 	mov	r4,r2
 201ac28:	d0a73e44 	addi	r2,gp,-25351
 201ac2c:	1885883a 	add	r2,r3,r2
 201ac30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201ac34:	e0bff817 	ldw	r2,-32(fp)
 201ac38:	10800d03 	ldbu	r2,52(r2)
 201ac3c:	10c03fcc 	andi	r3,r2,255
 201ac40:	d0a73e44 	addi	r2,gp,-25351
 201ac44:	1885883a 	add	r2,r3,r2
 201ac48:	10800003 	ldbu	r2,0(r2)
 201ac4c:	10803fcc 	andi	r2,r2,255
 201ac50:	1000071e 	bne	r2,zero,201ac70 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201ac54:	e0bff817 	ldw	r2,-32(fp)
 201ac58:	10800d83 	ldbu	r2,54(r2)
 201ac5c:	0084303a 	nor	r2,zero,r2
 201ac60:	1007883a 	mov	r3,r2
 201ac64:	d0a73e03 	ldbu	r2,-25352(gp)
 201ac68:	1884703a 	and	r2,r3,r2
 201ac6c:	d0a73e05 	stb	r2,-25352(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201ac70:	e0bff817 	ldw	r2,-32(fp)
 201ac74:	10800717 	ldw	r2,28(r2)
 201ac78:	10000526 	beq	r2,zero,201ac90 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201ac7c:	e0bff817 	ldw	r2,-32(fp)
 201ac80:	10800717 	ldw	r2,28(r2)
 201ac84:	100b883a 	mov	r5,r2
 201ac88:	e13ff817 	ldw	r4,-32(fp)
 201ac8c:	2014f200 	call	2014f20 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201ac90:	e0bff817 	ldw	r2,-32(fp)
 201ac94:	10800817 	ldw	r2,32(r2)
 201ac98:	10000526 	beq	r2,zero,201acb0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201ac9c:	e0bff817 	ldw	r2,-32(fp)
 201aca0:	10800817 	ldw	r2,32(r2)
 201aca4:	100b883a 	mov	r5,r2
 201aca8:	e13ff817 	ldw	r4,-32(fp)
 201acac:	2014fd80 	call	2014fd8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201acb0:	e0bff817 	ldw	r2,-32(fp)
 201acb4:	10800a17 	ldw	r2,40(r2)
 201acb8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201acbc:	e0bffb17 	ldw	r2,-20(fp)
 201acc0:	10000226 	beq	r2,zero,201accc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201acc4:	e13ffb17 	ldw	r4,-20(fp)
 201acc8:	20174480 	call	2017448 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201accc:	e0bff817 	ldw	r2,-32(fp)
 201acd0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201acd4:	e0bff817 	ldw	r2,-32(fp)
 201acd8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201acdc:	e0bff817 	ldw	r2,-32(fp)
 201ace0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201ace4:	d0a73203 	ldbu	r2,-25400(gp)
 201ace8:	10803fcc 	andi	r2,r2,255
 201acec:	10803fe0 	cmpeqi	r2,r2,255
 201acf0:	1000031e 	bne	r2,zero,201ad00 <OSTaskDel+0x214>
        OSLockNesting++;
 201acf4:	d0a73203 	ldbu	r2,-25400(gp)
 201acf8:	10800044 	addi	r2,r2,1
 201acfc:	d0a73205 	stb	r2,-25400(gp)
 201ad00:	e0bff617 	ldw	r2,-40(fp)
 201ad04:	e0bffd15 	stw	r2,-12(fp)
 201ad08:	e0bffd17 	ldw	r2,-12(fp)
 201ad0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201ad10:	2014b080 	call	2014b08 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad14:	0005303a 	rdctl	r2,status
 201ad18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad1c:	e0fffa17 	ldw	r3,-24(fp)
 201ad20:	00bfff84 	movi	r2,-2
 201ad24:	1884703a 	and	r2,r3,r2
 201ad28:	1001703a 	wrctl	status,r2
  
  return context;
 201ad2c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201ad30:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201ad34:	d0a73203 	ldbu	r2,-25400(gp)
 201ad38:	10803fcc 	andi	r2,r2,255
 201ad3c:	10000326 	beq	r2,zero,201ad4c <OSTaskDel+0x260>
        OSLockNesting--;
 201ad40:	d0a73203 	ldbu	r2,-25400(gp)
 201ad44:	10bfffc4 	addi	r2,r2,-1
 201ad48:	d0a73205 	stb	r2,-25400(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201ad4c:	e13ff817 	ldw	r4,-32(fp)
 201ad50:	201db400 	call	201db40 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201ad54:	d0a73a43 	ldbu	r2,-25367(gp)
 201ad58:	10bfffc4 	addi	r2,r2,-1
 201ad5c:	d0a73a45 	stb	r2,-25367(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201ad60:	e0ffff03 	ldbu	r3,-4(fp)
 201ad64:	008080f4 	movhi	r2,515
 201ad68:	10ad6904 	addi	r2,r2,-19036
 201ad6c:	18c7883a 	add	r3,r3,r3
 201ad70:	18c7883a 	add	r3,r3,r3
 201ad74:	10c5883a 	add	r2,r2,r3
 201ad78:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201ad7c:	e0bff817 	ldw	r2,-32(fp)
 201ad80:	10800617 	ldw	r2,24(r2)
 201ad84:	1000071e 	bne	r2,zero,201ada4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201ad88:	e0bff817 	ldw	r2,-32(fp)
 201ad8c:	10800517 	ldw	r2,20(r2)
 201ad90:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201ad94:	e0bff817 	ldw	r2,-32(fp)
 201ad98:	10800517 	ldw	r2,20(r2)
 201ad9c:	d0a73515 	stw	r2,-25388(gp)
 201ada0:	00000a06 	br	201adcc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201ada4:	e0bff817 	ldw	r2,-32(fp)
 201ada8:	10800617 	ldw	r2,24(r2)
 201adac:	e0fff817 	ldw	r3,-32(fp)
 201adb0:	18c00517 	ldw	r3,20(r3)
 201adb4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201adb8:	e0bff817 	ldw	r2,-32(fp)
 201adbc:	10800517 	ldw	r2,20(r2)
 201adc0:	e0fff817 	ldw	r3,-32(fp)
 201adc4:	18c00617 	ldw	r3,24(r3)
 201adc8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201adcc:	d0e73917 	ldw	r3,-25372(gp)
 201add0:	e0bff817 	ldw	r2,-32(fp)
 201add4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201add8:	e0bff817 	ldw	r2,-32(fp)
 201addc:	d0a73915 	stw	r2,-25372(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201ade0:	e0bff817 	ldw	r2,-32(fp)
 201ade4:	00c00fc4 	movi	r3,63
 201ade8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201adec:	e0bff817 	ldw	r2,-32(fp)
 201adf0:	10001345 	stb	zero,77(r2)
 201adf4:	e0bff617 	ldw	r2,-40(fp)
 201adf8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201adfc:	e0bffc17 	ldw	r2,-16(fp)
 201ae00:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201ae04:	d0a73243 	ldbu	r2,-25399(gp)
 201ae08:	10803fcc 	andi	r2,r2,255
 201ae0c:	10800058 	cmpnei	r2,r2,1
 201ae10:	1000011e 	bne	r2,zero,201ae18 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201ae14:	20155740 	call	2015574 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201ae18:	0005883a 	mov	r2,zero
}
 201ae1c:	e037883a 	mov	sp,fp
 201ae20:	dfc00117 	ldw	ra,4(sp)
 201ae24:	df000017 	ldw	fp,0(sp)
 201ae28:	dec00204 	addi	sp,sp,8
 201ae2c:	f800283a 	ret

0201ae30 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201ae30:	defff504 	addi	sp,sp,-44
 201ae34:	df000a15 	stw	fp,40(sp)
 201ae38:	df000a04 	addi	fp,sp,40
 201ae3c:	2005883a 	mov	r2,r4
 201ae40:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ae44:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201ae48:	e0bfff03 	ldbu	r2,-4(fp)
 201ae4c:	10800518 	cmpnei	r2,r2,20
 201ae50:	1000021e 	bne	r2,zero,201ae5c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201ae54:	00800f84 	movi	r2,62
 201ae58:	00004506 	br	201af70 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201ae5c:	e0bfff03 	ldbu	r2,-4(fp)
 201ae60:	10800530 	cmpltui	r2,r2,20
 201ae64:	1000051e 	bne	r2,zero,201ae7c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201ae68:	e0bfff03 	ldbu	r2,-4(fp)
 201ae6c:	10803fe0 	cmpeqi	r2,r2,255
 201ae70:	1000021e 	bne	r2,zero,201ae7c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201ae74:	00800a84 	movi	r2,42
 201ae78:	00003d06 	br	201af70 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201ae7c:	e0bfff03 	ldbu	r2,-4(fp)
 201ae80:	10803fd8 	cmpnei	r2,r2,255
 201ae84:	1000111e 	bne	r2,zero,201aecc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ae88:	0005303a 	rdctl	r2,status
 201ae8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ae90:	e0fff917 	ldw	r3,-28(fp)
 201ae94:	00bfff84 	movi	r2,-2
 201ae98:	1884703a 	and	r2,r3,r2
 201ae9c:	1001703a 	wrctl	status,r2
  
  return context;
 201aea0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201aea4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201aea8:	d0a74117 	ldw	r2,-25340(gp)
 201aeac:	10800dc3 	ldbu	r2,55(r2)
 201aeb0:	e0bff805 	stb	r2,-32(fp)
 201aeb4:	e0bff617 	ldw	r2,-40(fp)
 201aeb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aebc:	e0bffe17 	ldw	r2,-8(fp)
 201aec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201aec4:	e0bff803 	ldbu	r2,-32(fp)
 201aec8:	00002906 	br	201af70 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aecc:	0005303a 	rdctl	r2,status
 201aed0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aed4:	e0fff717 	ldw	r3,-36(fp)
 201aed8:	00bfff84 	movi	r2,-2
 201aedc:	1884703a 	and	r2,r3,r2
 201aee0:	1001703a 	wrctl	status,r2
  
  return context;
 201aee4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201aee8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201aeec:	e0ffff03 	ldbu	r3,-4(fp)
 201aef0:	008080f4 	movhi	r2,515
 201aef4:	10ad6904 	addi	r2,r2,-19036
 201aef8:	18c7883a 	add	r3,r3,r3
 201aefc:	18c7883a 	add	r3,r3,r3
 201af00:	10c5883a 	add	r2,r2,r3
 201af04:	10800017 	ldw	r2,0(r2)
 201af08:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201af0c:	e0bffb17 	ldw	r2,-20(fp)
 201af10:	1000061e 	bne	r2,zero,201af2c <OSTaskDelReq+0xfc>
 201af14:	e0bff617 	ldw	r2,-40(fp)
 201af18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201af1c:	e0bffa17 	ldw	r2,-24(fp)
 201af20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201af24:	008010c4 	movi	r2,67
 201af28:	00001106 	br	201af70 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201af2c:	e0bffb17 	ldw	r2,-20(fp)
 201af30:	10800058 	cmpnei	r2,r2,1
 201af34:	1000061e 	bne	r2,zero,201af50 <OSTaskDelReq+0x120>
 201af38:	e0bff617 	ldw	r2,-40(fp)
 201af3c:	e0bffc15 	stw	r2,-16(fp)
 201af40:	e0bffc17 	ldw	r2,-16(fp)
 201af44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201af48:	00800f44 	movi	r2,61
 201af4c:	00000806 	br	201af70 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201af50:	e0bffb17 	ldw	r2,-20(fp)
 201af54:	00c00fc4 	movi	r3,63
 201af58:	10c00dc5 	stb	r3,55(r2)
 201af5c:	e0bff617 	ldw	r2,-40(fp)
 201af60:	e0bffd15 	stw	r2,-12(fp)
 201af64:	e0bffd17 	ldw	r2,-12(fp)
 201af68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201af6c:	0005883a 	mov	r2,zero
}
 201af70:	e037883a 	mov	sp,fp
 201af74:	df000017 	ldw	fp,0(sp)
 201af78:	dec00104 	addi	sp,sp,4
 201af7c:	f800283a 	ret

0201af80 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201af80:	defff404 	addi	sp,sp,-48
 201af84:	dfc00b15 	stw	ra,44(sp)
 201af88:	df000a15 	stw	fp,40(sp)
 201af8c:	df000a04 	addi	fp,sp,40
 201af90:	2005883a 	mov	r2,r4
 201af94:	e17ffe15 	stw	r5,-8(fp)
 201af98:	e1bfff15 	stw	r6,-4(fp)
 201af9c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201afa0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201afa4:	e0bfff17 	ldw	r2,-4(fp)
 201afa8:	1000021e 	bne	r2,zero,201afb4 <OSTaskNameGet+0x34>
        return (0);
 201afac:	0005883a 	mov	r2,zero
 201afb0:	00005406 	br	201b104 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201afb4:	e0bffd03 	ldbu	r2,-12(fp)
 201afb8:	10800570 	cmpltui	r2,r2,21
 201afbc:	1000081e 	bne	r2,zero,201afe0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201afc0:	e0bffd03 	ldbu	r2,-12(fp)
 201afc4:	10803fe0 	cmpeqi	r2,r2,255
 201afc8:	1000051e 	bne	r2,zero,201afe0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201afcc:	e0bfff17 	ldw	r2,-4(fp)
 201afd0:	00c00a84 	movi	r3,42
 201afd4:	10c00005 	stb	r3,0(r2)
            return (0);
 201afd8:	0005883a 	mov	r2,zero
 201afdc:	00004906 	br	201b104 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201afe0:	e0bffe17 	ldw	r2,-8(fp)
 201afe4:	1000051e 	bne	r2,zero,201affc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201afe8:	e0bfff17 	ldw	r2,-4(fp)
 201afec:	00c00304 	movi	r3,12
 201aff0:	10c00005 	stb	r3,0(r2)
        return (0);
 201aff4:	0005883a 	mov	r2,zero
 201aff8:	00004206 	br	201b104 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201affc:	d0a74003 	ldbu	r2,-25344(gp)
 201b000:	10803fcc 	andi	r2,r2,255
 201b004:	10000526 	beq	r2,zero,201b01c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201b008:	e0bfff17 	ldw	r2,-4(fp)
 201b00c:	00c00444 	movi	r3,17
 201b010:	10c00005 	stb	r3,0(r2)
        return (0);
 201b014:	0005883a 	mov	r2,zero
 201b018:	00003a06 	br	201b104 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b01c:	0005303a 	rdctl	r2,status
 201b020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b024:	e0fffc17 	ldw	r3,-16(fp)
 201b028:	00bfff84 	movi	r2,-2
 201b02c:	1884703a 	and	r2,r3,r2
 201b030:	1001703a 	wrctl	status,r2
  
  return context;
 201b034:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b038:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201b03c:	e0bffd03 	ldbu	r2,-12(fp)
 201b040:	10803fd8 	cmpnei	r2,r2,255
 201b044:	1000031e 	bne	r2,zero,201b054 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201b048:	d0a74117 	ldw	r2,-25340(gp)
 201b04c:	10800c83 	ldbu	r2,50(r2)
 201b050:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b054:	e0fffd03 	ldbu	r3,-12(fp)
 201b058:	008080f4 	movhi	r2,515
 201b05c:	10ad6904 	addi	r2,r2,-19036
 201b060:	18c7883a 	add	r3,r3,r3
 201b064:	18c7883a 	add	r3,r3,r3
 201b068:	10c5883a 	add	r2,r2,r3
 201b06c:	10800017 	ldw	r2,0(r2)
 201b070:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201b074:	e0bff817 	ldw	r2,-32(fp)
 201b078:	1000091e 	bne	r2,zero,201b0a0 <OSTaskNameGet+0x120>
 201b07c:	e0bff617 	ldw	r2,-40(fp)
 201b080:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b084:	e0bff717 	ldw	r2,-36(fp)
 201b088:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b08c:	e0bfff17 	ldw	r2,-4(fp)
 201b090:	00c010c4 	movi	r3,67
 201b094:	10c00005 	stb	r3,0(r2)
        return (0);
 201b098:	0005883a 	mov	r2,zero
 201b09c:	00001906 	br	201b104 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201b0a0:	e0bff817 	ldw	r2,-32(fp)
 201b0a4:	10800058 	cmpnei	r2,r2,1
 201b0a8:	1000091e 	bne	r2,zero,201b0d0 <OSTaskNameGet+0x150>
 201b0ac:	e0bff617 	ldw	r2,-40(fp)
 201b0b0:	e0bff915 	stw	r2,-28(fp)
 201b0b4:	e0bff917 	ldw	r2,-28(fp)
 201b0b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b0bc:	e0bfff17 	ldw	r2,-4(fp)
 201b0c0:	00c010c4 	movi	r3,67
 201b0c4:	10c00005 	stb	r3,0(r2)
        return (0);
 201b0c8:	0005883a 	mov	r2,zero
 201b0cc:	00000d06 	br	201b104 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201b0d0:	e0bff817 	ldw	r2,-32(fp)
 201b0d4:	10801304 	addi	r2,r2,76
 201b0d8:	100b883a 	mov	r5,r2
 201b0dc:	e13ffe17 	ldw	r4,-8(fp)
 201b0e0:	20156b80 	call	20156b8 <OS_StrCopy>
 201b0e4:	e0bffb05 	stb	r2,-20(fp)
 201b0e8:	e0bff617 	ldw	r2,-40(fp)
 201b0ec:	e0bffa15 	stw	r2,-24(fp)
 201b0f0:	e0bffa17 	ldw	r2,-24(fp)
 201b0f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b0f8:	e0bfff17 	ldw	r2,-4(fp)
 201b0fc:	10000005 	stb	zero,0(r2)
    return (len);
 201b100:	e0bffb03 	ldbu	r2,-20(fp)
}
 201b104:	e037883a 	mov	sp,fp
 201b108:	dfc00117 	ldw	ra,4(sp)
 201b10c:	df000017 	ldw	fp,0(sp)
 201b110:	dec00204 	addi	sp,sp,8
 201b114:	f800283a 	ret

0201b118 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201b118:	defff304 	addi	sp,sp,-52
 201b11c:	dfc00c15 	stw	ra,48(sp)
 201b120:	df000b15 	stw	fp,44(sp)
 201b124:	df000b04 	addi	fp,sp,44
 201b128:	2005883a 	mov	r2,r4
 201b12c:	e17ffe15 	stw	r5,-8(fp)
 201b130:	e1bfff15 	stw	r6,-4(fp)
 201b134:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b138:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201b13c:	e0bfff17 	ldw	r2,-4(fp)
 201b140:	10005c26 	beq	r2,zero,201b2b4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201b144:	e0bffd03 	ldbu	r2,-12(fp)
 201b148:	10800570 	cmpltui	r2,r2,21
 201b14c:	1000071e 	bne	r2,zero,201b16c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201b150:	e0bffd03 	ldbu	r2,-12(fp)
 201b154:	10803fe0 	cmpeqi	r2,r2,255
 201b158:	1000041e 	bne	r2,zero,201b16c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201b15c:	e0bfff17 	ldw	r2,-4(fp)
 201b160:	00c00a84 	movi	r3,42
 201b164:	10c00005 	stb	r3,0(r2)
            return;
 201b168:	00005306 	br	201b2b8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201b16c:	e0bffe17 	ldw	r2,-8(fp)
 201b170:	1000041e 	bne	r2,zero,201b184 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201b174:	e0bfff17 	ldw	r2,-4(fp)
 201b178:	00c00304 	movi	r3,12
 201b17c:	10c00005 	stb	r3,0(r2)
        return;
 201b180:	00004d06 	br	201b2b8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201b184:	d0a74003 	ldbu	r2,-25344(gp)
 201b188:	10803fcc 	andi	r2,r2,255
 201b18c:	10000426 	beq	r2,zero,201b1a0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201b190:	e0bfff17 	ldw	r2,-4(fp)
 201b194:	00c00484 	movi	r3,18
 201b198:	10c00005 	stb	r3,0(r2)
        return;
 201b19c:	00004606 	br	201b2b8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b1a0:	0005303a 	rdctl	r2,status
 201b1a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b1a8:	e0fffc17 	ldw	r3,-16(fp)
 201b1ac:	00bfff84 	movi	r2,-2
 201b1b0:	1884703a 	and	r2,r3,r2
 201b1b4:	1001703a 	wrctl	status,r2
  
  return context;
 201b1b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b1bc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201b1c0:	e0bffd03 	ldbu	r2,-12(fp)
 201b1c4:	10803fd8 	cmpnei	r2,r2,255
 201b1c8:	1000031e 	bne	r2,zero,201b1d8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201b1cc:	d0a74117 	ldw	r2,-25340(gp)
 201b1d0:	10800c83 	ldbu	r2,50(r2)
 201b1d4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b1d8:	e0fffd03 	ldbu	r3,-12(fp)
 201b1dc:	008080f4 	movhi	r2,515
 201b1e0:	10ad6904 	addi	r2,r2,-19036
 201b1e4:	18c7883a 	add	r3,r3,r3
 201b1e8:	18c7883a 	add	r3,r3,r3
 201b1ec:	10c5883a 	add	r2,r2,r3
 201b1f0:	10800017 	ldw	r2,0(r2)
 201b1f4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201b1f8:	e0bff717 	ldw	r2,-36(fp)
 201b1fc:	1000081e 	bne	r2,zero,201b220 <OSTaskNameSet+0x108>
 201b200:	e0bff517 	ldw	r2,-44(fp)
 201b204:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b208:	e0bff617 	ldw	r2,-40(fp)
 201b20c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b210:	e0bfff17 	ldw	r2,-4(fp)
 201b214:	00c010c4 	movi	r3,67
 201b218:	10c00005 	stb	r3,0(r2)
        return;
 201b21c:	00002606 	br	201b2b8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201b220:	e0bff717 	ldw	r2,-36(fp)
 201b224:	10800058 	cmpnei	r2,r2,1
 201b228:	1000081e 	bne	r2,zero,201b24c <OSTaskNameSet+0x134>
 201b22c:	e0bff517 	ldw	r2,-44(fp)
 201b230:	e0bff815 	stw	r2,-32(fp)
 201b234:	e0bff817 	ldw	r2,-32(fp)
 201b238:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b23c:	e0bfff17 	ldw	r2,-4(fp)
 201b240:	00c010c4 	movi	r3,67
 201b244:	10c00005 	stb	r3,0(r2)
        return;
 201b248:	00001b06 	br	201b2b8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201b24c:	e13ffe17 	ldw	r4,-8(fp)
 201b250:	201572c0 	call	201572c <OS_StrLen>
 201b254:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201b258:	e0bffa03 	ldbu	r2,-24(fp)
 201b25c:	10800830 	cmpltui	r2,r2,32
 201b260:	1000081e 	bne	r2,zero,201b284 <OSTaskNameSet+0x16c>
 201b264:	e0bff517 	ldw	r2,-44(fp)
 201b268:	e0bff915 	stw	r2,-28(fp)
 201b26c:	e0bff917 	ldw	r2,-28(fp)
 201b270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201b274:	e0bfff17 	ldw	r2,-4(fp)
 201b278:	00c01044 	movi	r3,65
 201b27c:	10c00005 	stb	r3,0(r2)
        return;
 201b280:	00000d06 	br	201b2b8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201b284:	e0bff717 	ldw	r2,-36(fp)
 201b288:	10801304 	addi	r2,r2,76
 201b28c:	e17ffe17 	ldw	r5,-8(fp)
 201b290:	1009883a 	mov	r4,r2
 201b294:	20156b80 	call	20156b8 <OS_StrCopy>
 201b298:	e0bff517 	ldw	r2,-44(fp)
 201b29c:	e0bffb15 	stw	r2,-20(fp)
 201b2a0:	e0bffb17 	ldw	r2,-20(fp)
 201b2a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b2a8:	e0bfff17 	ldw	r2,-4(fp)
 201b2ac:	10000005 	stb	zero,0(r2)
 201b2b0:	00000106 	br	201b2b8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201b2b4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201b2b8:	e037883a 	mov	sp,fp
 201b2bc:	dfc00117 	ldw	ra,4(sp)
 201b2c0:	df000017 	ldw	fp,0(sp)
 201b2c4:	dec00204 	addi	sp,sp,8
 201b2c8:	f800283a 	ret

0201b2cc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201b2cc:	defff404 	addi	sp,sp,-48
 201b2d0:	dfc00b15 	stw	ra,44(sp)
 201b2d4:	df000a15 	stw	fp,40(sp)
 201b2d8:	df000a04 	addi	fp,sp,40
 201b2dc:	2005883a 	mov	r2,r4
 201b2e0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b2e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201b2e8:	e0bfff03 	ldbu	r2,-4(fp)
 201b2ec:	10800530 	cmpltui	r2,r2,20
 201b2f0:	1000021e 	bne	r2,zero,201b2fc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201b2f4:	00800a84 	movi	r2,42
 201b2f8:	00006406 	br	201b48c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b2fc:	0005303a 	rdctl	r2,status
 201b300:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b304:	e0fffe17 	ldw	r3,-8(fp)
 201b308:	00bfff84 	movi	r2,-2
 201b30c:	1884703a 	and	r2,r3,r2
 201b310:	1001703a 	wrctl	status,r2
  
  return context;
 201b314:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b318:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201b31c:	e0ffff03 	ldbu	r3,-4(fp)
 201b320:	008080f4 	movhi	r2,515
 201b324:	10ad6904 	addi	r2,r2,-19036
 201b328:	18c7883a 	add	r3,r3,r3
 201b32c:	18c7883a 	add	r3,r3,r3
 201b330:	10c5883a 	add	r2,r2,r3
 201b334:	10800017 	ldw	r2,0(r2)
 201b338:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201b33c:	e0bff817 	ldw	r2,-32(fp)
 201b340:	1000061e 	bne	r2,zero,201b35c <OSTaskResume+0x90>
 201b344:	e0bff617 	ldw	r2,-40(fp)
 201b348:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b34c:	e0bff717 	ldw	r2,-36(fp)
 201b350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201b354:	00801184 	movi	r2,70
 201b358:	00004c06 	br	201b48c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201b35c:	e0bff817 	ldw	r2,-32(fp)
 201b360:	10800058 	cmpnei	r2,r2,1
 201b364:	1000061e 	bne	r2,zero,201b380 <OSTaskResume+0xb4>
 201b368:	e0bff617 	ldw	r2,-40(fp)
 201b36c:	e0bff915 	stw	r2,-28(fp)
 201b370:	e0bff917 	ldw	r2,-28(fp)
 201b374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b378:	008010c4 	movi	r2,67
 201b37c:	00004306 	br	201b48c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201b380:	e0bff817 	ldw	r2,-32(fp)
 201b384:	10800c03 	ldbu	r2,48(r2)
 201b388:	10803fcc 	andi	r2,r2,255
 201b38c:	1080020c 	andi	r2,r2,8
 201b390:	10003926 	beq	r2,zero,201b478 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201b394:	e0bff817 	ldw	r2,-32(fp)
 201b398:	10c00c03 	ldbu	r3,48(r2)
 201b39c:	00bffdc4 	movi	r2,-9
 201b3a0:	1884703a 	and	r2,r3,r2
 201b3a4:	1007883a 	mov	r3,r2
 201b3a8:	e0bff817 	ldw	r2,-32(fp)
 201b3ac:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201b3b0:	e0bff817 	ldw	r2,-32(fp)
 201b3b4:	10800c03 	ldbu	r2,48(r2)
 201b3b8:	10803fcc 	andi	r2,r2,255
 201b3bc:	1000281e 	bne	r2,zero,201b460 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201b3c0:	e0bff817 	ldw	r2,-32(fp)
 201b3c4:	10800b8b 	ldhu	r2,46(r2)
 201b3c8:	10bfffcc 	andi	r2,r2,65535
 201b3cc:	10001f1e 	bne	r2,zero,201b44c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201b3d0:	e0bff817 	ldw	r2,-32(fp)
 201b3d4:	10c00d83 	ldbu	r3,54(r2)
 201b3d8:	d0a73e03 	ldbu	r2,-25352(gp)
 201b3dc:	1884b03a 	or	r2,r3,r2
 201b3e0:	d0a73e05 	stb	r2,-25352(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201b3e4:	e0bff817 	ldw	r2,-32(fp)
 201b3e8:	10800d03 	ldbu	r2,52(r2)
 201b3ec:	10c03fcc 	andi	r3,r2,255
 201b3f0:	e0bff817 	ldw	r2,-32(fp)
 201b3f4:	10800d03 	ldbu	r2,52(r2)
 201b3f8:	11003fcc 	andi	r4,r2,255
 201b3fc:	d0a73e44 	addi	r2,gp,-25351
 201b400:	2085883a 	add	r2,r4,r2
 201b404:	11000003 	ldbu	r4,0(r2)
 201b408:	e0bff817 	ldw	r2,-32(fp)
 201b40c:	10800d43 	ldbu	r2,53(r2)
 201b410:	2084b03a 	or	r2,r4,r2
 201b414:	1009883a 	mov	r4,r2
 201b418:	d0a73e44 	addi	r2,gp,-25351
 201b41c:	1885883a 	add	r2,r3,r2
 201b420:	11000005 	stb	r4,0(r2)
 201b424:	e0bff617 	ldw	r2,-40(fp)
 201b428:	e0bffa15 	stw	r2,-24(fp)
 201b42c:	e0bffa17 	ldw	r2,-24(fp)
 201b430:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201b434:	d0a73243 	ldbu	r2,-25399(gp)
 201b438:	10803fcc 	andi	r2,r2,255
 201b43c:	10800058 	cmpnei	r2,r2,1
 201b440:	10000b1e 	bne	r2,zero,201b470 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201b444:	20155740 	call	2015574 <OS_Sched>
 201b448:	00000906 	br	201b470 <OSTaskResume+0x1a4>
 201b44c:	e0bff617 	ldw	r2,-40(fp)
 201b450:	e0bffb15 	stw	r2,-20(fp)
 201b454:	e0bffb17 	ldw	r2,-20(fp)
 201b458:	1001703a 	wrctl	status,r2
 201b45c:	00000406 	br	201b470 <OSTaskResume+0x1a4>
 201b460:	e0bff617 	ldw	r2,-40(fp)
 201b464:	e0bffc15 	stw	r2,-16(fp)
 201b468:	e0bffc17 	ldw	r2,-16(fp)
 201b46c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201b470:	0005883a 	mov	r2,zero
 201b474:	00000506 	br	201b48c <OSTaskResume+0x1c0>
 201b478:	e0bff617 	ldw	r2,-40(fp)
 201b47c:	e0bffd15 	stw	r2,-12(fp)
 201b480:	e0bffd17 	ldw	r2,-12(fp)
 201b484:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201b488:	00801104 	movi	r2,68
}
 201b48c:	e037883a 	mov	sp,fp
 201b490:	dfc00117 	ldw	ra,4(sp)
 201b494:	df000017 	ldw	fp,0(sp)
 201b498:	dec00204 	addi	sp,sp,8
 201b49c:	f800283a 	ret

0201b4a0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201b4a0:	defff304 	addi	sp,sp,-52
 201b4a4:	df000c15 	stw	fp,48(sp)
 201b4a8:	df000c04 	addi	fp,sp,48
 201b4ac:	2005883a 	mov	r2,r4
 201b4b0:	e17fff15 	stw	r5,-4(fp)
 201b4b4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201b4b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201b4bc:	e0bffe03 	ldbu	r2,-8(fp)
 201b4c0:	10800570 	cmpltui	r2,r2,21
 201b4c4:	1000051e 	bne	r2,zero,201b4dc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201b4c8:	e0bffe03 	ldbu	r2,-8(fp)
 201b4cc:	10803fe0 	cmpeqi	r2,r2,255
 201b4d0:	1000021e 	bne	r2,zero,201b4dc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201b4d4:	00800a84 	movi	r2,42
 201b4d8:	00005d06 	br	201b650 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201b4dc:	e0bfff17 	ldw	r2,-4(fp)
 201b4e0:	1000021e 	bne	r2,zero,201b4ec <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201b4e4:	00800244 	movi	r2,9
 201b4e8:	00005906 	br	201b650 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201b4ec:	e0bfff17 	ldw	r2,-4(fp)
 201b4f0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201b4f4:	e0bfff17 	ldw	r2,-4(fp)
 201b4f8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b4fc:	0005303a 	rdctl	r2,status
 201b500:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b504:	e0fffd17 	ldw	r3,-12(fp)
 201b508:	00bfff84 	movi	r2,-2
 201b50c:	1884703a 	and	r2,r3,r2
 201b510:	1001703a 	wrctl	status,r2
  
  return context;
 201b514:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201b518:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201b51c:	e0bffe03 	ldbu	r2,-8(fp)
 201b520:	10803fd8 	cmpnei	r2,r2,255
 201b524:	1000031e 	bne	r2,zero,201b534 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b528:	d0a74117 	ldw	r2,-25340(gp)
 201b52c:	10800c83 	ldbu	r2,50(r2)
 201b530:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b534:	e0fffe03 	ldbu	r3,-8(fp)
 201b538:	008080f4 	movhi	r2,515
 201b53c:	10ad6904 	addi	r2,r2,-19036
 201b540:	18c7883a 	add	r3,r3,r3
 201b544:	18c7883a 	add	r3,r3,r3
 201b548:	10c5883a 	add	r2,r2,r3
 201b54c:	10800017 	ldw	r2,0(r2)
 201b550:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201b554:	e0bff817 	ldw	r2,-32(fp)
 201b558:	1000061e 	bne	r2,zero,201b574 <OSTaskStkChk+0xd4>
 201b55c:	e0bff617 	ldw	r2,-40(fp)
 201b560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b564:	e0bff717 	ldw	r2,-36(fp)
 201b568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b56c:	008010c4 	movi	r2,67
 201b570:	00003706 	br	201b650 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201b574:	e0bff817 	ldw	r2,-32(fp)
 201b578:	10800058 	cmpnei	r2,r2,1
 201b57c:	1000061e 	bne	r2,zero,201b598 <OSTaskStkChk+0xf8>
 201b580:	e0bff617 	ldw	r2,-40(fp)
 201b584:	e0bff915 	stw	r2,-28(fp)
 201b588:	e0bff917 	ldw	r2,-28(fp)
 201b58c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b590:	008010c4 	movi	r2,67
 201b594:	00002e06 	br	201b650 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201b598:	e0bff817 	ldw	r2,-32(fp)
 201b59c:	1080040b 	ldhu	r2,16(r2)
 201b5a0:	10bfffcc 	andi	r2,r2,65535
 201b5a4:	1080004c 	andi	r2,r2,1
 201b5a8:	1000061e 	bne	r2,zero,201b5c4 <OSTaskStkChk+0x124>
 201b5ac:	e0bff617 	ldw	r2,-40(fp)
 201b5b0:	e0bffa15 	stw	r2,-24(fp)
 201b5b4:	e0bffa17 	ldw	r2,-24(fp)
 201b5b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201b5bc:	00801144 	movi	r2,69
 201b5c0:	00002306 	br	201b650 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201b5c4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201b5c8:	e0bff817 	ldw	r2,-32(fp)
 201b5cc:	10800317 	ldw	r2,12(r2)
 201b5d0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201b5d4:	e0bff817 	ldw	r2,-32(fp)
 201b5d8:	10800217 	ldw	r2,8(r2)
 201b5dc:	e0bff415 	stw	r2,-48(fp)
 201b5e0:	e0bff617 	ldw	r2,-40(fp)
 201b5e4:	e0bffb15 	stw	r2,-20(fp)
 201b5e8:	e0bffb17 	ldw	r2,-20(fp)
 201b5ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b5f0:	00000306 	br	201b600 <OSTaskStkChk+0x160>
        nfree++;
 201b5f4:	e0bff517 	ldw	r2,-44(fp)
 201b5f8:	10800044 	addi	r2,r2,1
 201b5fc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b600:	e0bff417 	ldw	r2,-48(fp)
 201b604:	10c00104 	addi	r3,r2,4
 201b608:	e0fff415 	stw	r3,-48(fp)
 201b60c:	10800017 	ldw	r2,0(r2)
 201b610:	103ff826 	beq	r2,zero,201b5f4 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201b614:	e0bff517 	ldw	r2,-44(fp)
 201b618:	1085883a 	add	r2,r2,r2
 201b61c:	1085883a 	add	r2,r2,r2
 201b620:	1007883a 	mov	r3,r2
 201b624:	e0bfff17 	ldw	r2,-4(fp)
 201b628:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201b62c:	e0fffc17 	ldw	r3,-16(fp)
 201b630:	e0bff517 	ldw	r2,-44(fp)
 201b634:	1885c83a 	sub	r2,r3,r2
 201b638:	1085883a 	add	r2,r2,r2
 201b63c:	1085883a 	add	r2,r2,r2
 201b640:	1007883a 	mov	r3,r2
 201b644:	e0bfff17 	ldw	r2,-4(fp)
 201b648:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201b64c:	0005883a 	mov	r2,zero
}
 201b650:	e037883a 	mov	sp,fp
 201b654:	df000017 	ldw	fp,0(sp)
 201b658:	dec00104 	addi	sp,sp,4
 201b65c:	f800283a 	ret

0201b660 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201b660:	defff504 	addi	sp,sp,-44
 201b664:	dfc00a15 	stw	ra,40(sp)
 201b668:	df000915 	stw	fp,36(sp)
 201b66c:	df000904 	addi	fp,sp,36
 201b670:	2005883a 	mov	r2,r4
 201b674:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b678:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201b67c:	e0bfff03 	ldbu	r2,-4(fp)
 201b680:	10800518 	cmpnei	r2,r2,20
 201b684:	1000021e 	bne	r2,zero,201b690 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201b688:	008011c4 	movi	r2,71
 201b68c:	00006806 	br	201b830 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201b690:	e0bfff03 	ldbu	r2,-4(fp)
 201b694:	10800530 	cmpltui	r2,r2,20
 201b698:	1000051e 	bne	r2,zero,201b6b0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201b69c:	e0bfff03 	ldbu	r2,-4(fp)
 201b6a0:	10803fe0 	cmpeqi	r2,r2,255
 201b6a4:	1000021e 	bne	r2,zero,201b6b0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201b6a8:	00800a84 	movi	r2,42
 201b6ac:	00006006 	br	201b830 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b6b0:	0005303a 	rdctl	r2,status
 201b6b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b6b8:	e0fffe17 	ldw	r3,-8(fp)
 201b6bc:	00bfff84 	movi	r2,-2
 201b6c0:	1884703a 	and	r2,r3,r2
 201b6c4:	1001703a 	wrctl	status,r2
  
  return context;
 201b6c8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201b6cc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201b6d0:	e0bfff03 	ldbu	r2,-4(fp)
 201b6d4:	10803fd8 	cmpnei	r2,r2,255
 201b6d8:	1000061e 	bne	r2,zero,201b6f4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b6dc:	d0a74117 	ldw	r2,-25340(gp)
 201b6e0:	10800c83 	ldbu	r2,50(r2)
 201b6e4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201b6e8:	00800044 	movi	r2,1
 201b6ec:	e0bff705 	stb	r2,-36(fp)
 201b6f0:	00000906 	br	201b718 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201b6f4:	d0a74117 	ldw	r2,-25340(gp)
 201b6f8:	10800c83 	ldbu	r2,50(r2)
 201b6fc:	10c03fcc 	andi	r3,r2,255
 201b700:	e0bfff03 	ldbu	r2,-4(fp)
 201b704:	1880031e 	bne	r3,r2,201b714 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201b708:	00800044 	movi	r2,1
 201b70c:	e0bff705 	stb	r2,-36(fp)
 201b710:	00000106 	br	201b718 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201b714:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b718:	e0ffff03 	ldbu	r3,-4(fp)
 201b71c:	008080f4 	movhi	r2,515
 201b720:	10ad6904 	addi	r2,r2,-19036
 201b724:	18c7883a 	add	r3,r3,r3
 201b728:	18c7883a 	add	r3,r3,r3
 201b72c:	10c5883a 	add	r2,r2,r3
 201b730:	10800017 	ldw	r2,0(r2)
 201b734:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201b738:	e0bffa17 	ldw	r2,-24(fp)
 201b73c:	1000061e 	bne	r2,zero,201b758 <OSTaskSuspend+0xf8>
 201b740:	e0bff817 	ldw	r2,-32(fp)
 201b744:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b748:	e0bff917 	ldw	r2,-28(fp)
 201b74c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201b750:	00801204 	movi	r2,72
 201b754:	00003606 	br	201b830 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201b758:	e0bffa17 	ldw	r2,-24(fp)
 201b75c:	10800058 	cmpnei	r2,r2,1
 201b760:	1000061e 	bne	r2,zero,201b77c <OSTaskSuspend+0x11c>
 201b764:	e0bff817 	ldw	r2,-32(fp)
 201b768:	e0bffb15 	stw	r2,-20(fp)
 201b76c:	e0bffb17 	ldw	r2,-20(fp)
 201b770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b774:	008010c4 	movi	r2,67
 201b778:	00002d06 	br	201b830 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201b77c:	e0bffa17 	ldw	r2,-24(fp)
 201b780:	10800d03 	ldbu	r2,52(r2)
 201b784:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201b788:	e0fffd03 	ldbu	r3,-12(fp)
 201b78c:	e13ffd03 	ldbu	r4,-12(fp)
 201b790:	d0a73e44 	addi	r2,gp,-25351
 201b794:	2085883a 	add	r2,r4,r2
 201b798:	10800003 	ldbu	r2,0(r2)
 201b79c:	1009883a 	mov	r4,r2
 201b7a0:	e0bffa17 	ldw	r2,-24(fp)
 201b7a4:	10800d43 	ldbu	r2,53(r2)
 201b7a8:	0084303a 	nor	r2,zero,r2
 201b7ac:	2084703a 	and	r2,r4,r2
 201b7b0:	1009883a 	mov	r4,r2
 201b7b4:	d0a73e44 	addi	r2,gp,-25351
 201b7b8:	1885883a 	add	r2,r3,r2
 201b7bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201b7c0:	e0fffd03 	ldbu	r3,-12(fp)
 201b7c4:	d0a73e44 	addi	r2,gp,-25351
 201b7c8:	1885883a 	add	r2,r3,r2
 201b7cc:	10800003 	ldbu	r2,0(r2)
 201b7d0:	10803fcc 	andi	r2,r2,255
 201b7d4:	1000071e 	bne	r2,zero,201b7f4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201b7d8:	e0bffa17 	ldw	r2,-24(fp)
 201b7dc:	10800d83 	ldbu	r2,54(r2)
 201b7e0:	0084303a 	nor	r2,zero,r2
 201b7e4:	1007883a 	mov	r3,r2
 201b7e8:	d0a73e03 	ldbu	r2,-25352(gp)
 201b7ec:	1884703a 	and	r2,r3,r2
 201b7f0:	d0a73e05 	stb	r2,-25352(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201b7f4:	e0bffa17 	ldw	r2,-24(fp)
 201b7f8:	10800c03 	ldbu	r2,48(r2)
 201b7fc:	10800214 	ori	r2,r2,8
 201b800:	1007883a 	mov	r3,r2
 201b804:	e0bffa17 	ldw	r2,-24(fp)
 201b808:	10c00c05 	stb	r3,48(r2)
 201b80c:	e0bff817 	ldw	r2,-32(fp)
 201b810:	e0bffc15 	stw	r2,-16(fp)
 201b814:	e0bffc17 	ldw	r2,-16(fp)
 201b818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201b81c:	e0bff703 	ldbu	r2,-36(fp)
 201b820:	10800058 	cmpnei	r2,r2,1
 201b824:	1000011e 	bne	r2,zero,201b82c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201b828:	20155740 	call	2015574 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201b82c:	0005883a 	mov	r2,zero
}
 201b830:	e037883a 	mov	sp,fp
 201b834:	dfc00117 	ldw	ra,4(sp)
 201b838:	df000017 	ldw	fp,0(sp)
 201b83c:	dec00204 	addi	sp,sp,8
 201b840:	f800283a 	ret

0201b844 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201b844:	defff604 	addi	sp,sp,-40
 201b848:	dfc00915 	stw	ra,36(sp)
 201b84c:	df000815 	stw	fp,32(sp)
 201b850:	df000804 	addi	fp,sp,32
 201b854:	2005883a 	mov	r2,r4
 201b858:	e17fff15 	stw	r5,-4(fp)
 201b85c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b860:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201b864:	e0bffe03 	ldbu	r2,-8(fp)
 201b868:	10800570 	cmpltui	r2,r2,21
 201b86c:	1000051e 	bne	r2,zero,201b884 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201b870:	e0bffe03 	ldbu	r2,-8(fp)
 201b874:	10803fe0 	cmpeqi	r2,r2,255
 201b878:	1000021e 	bne	r2,zero,201b884 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201b87c:	00800a84 	movi	r2,42
 201b880:	00003406 	br	201b954 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201b884:	e0bfff17 	ldw	r2,-4(fp)
 201b888:	1000021e 	bne	r2,zero,201b894 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201b88c:	00800244 	movi	r2,9
 201b890:	00003006 	br	201b954 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b894:	0005303a 	rdctl	r2,status
 201b898:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b89c:	e0fffd17 	ldw	r3,-12(fp)
 201b8a0:	00bfff84 	movi	r2,-2
 201b8a4:	1884703a 	and	r2,r3,r2
 201b8a8:	1001703a 	wrctl	status,r2
  
  return context;
 201b8ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b8b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201b8b4:	e0bffe03 	ldbu	r2,-8(fp)
 201b8b8:	10803fd8 	cmpnei	r2,r2,255
 201b8bc:	1000031e 	bne	r2,zero,201b8cc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201b8c0:	d0a74117 	ldw	r2,-25340(gp)
 201b8c4:	10800c83 	ldbu	r2,50(r2)
 201b8c8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b8cc:	e0fffe03 	ldbu	r3,-8(fp)
 201b8d0:	008080f4 	movhi	r2,515
 201b8d4:	10ad6904 	addi	r2,r2,-19036
 201b8d8:	18c7883a 	add	r3,r3,r3
 201b8dc:	18c7883a 	add	r3,r3,r3
 201b8e0:	10c5883a 	add	r2,r2,r3
 201b8e4:	10800017 	ldw	r2,0(r2)
 201b8e8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201b8ec:	e0bffa17 	ldw	r2,-24(fp)
 201b8f0:	1000061e 	bne	r2,zero,201b90c <OSTaskQuery+0xc8>
 201b8f4:	e0bff817 	ldw	r2,-32(fp)
 201b8f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b8fc:	e0bff917 	ldw	r2,-28(fp)
 201b900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201b904:	00800a44 	movi	r2,41
 201b908:	00001206 	br	201b954 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201b90c:	e0bffa17 	ldw	r2,-24(fp)
 201b910:	10800058 	cmpnei	r2,r2,1
 201b914:	1000061e 	bne	r2,zero,201b930 <OSTaskQuery+0xec>
 201b918:	e0bff817 	ldw	r2,-32(fp)
 201b91c:	e0bffb15 	stw	r2,-20(fp)
 201b920:	e0bffb17 	ldw	r2,-20(fp)
 201b924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b928:	008010c4 	movi	r2,67
 201b92c:	00000906 	br	201b954 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201b930:	01801b04 	movi	r6,108
 201b934:	e17ffa17 	ldw	r5,-24(fp)
 201b938:	e13fff17 	ldw	r4,-4(fp)
 201b93c:	201550c0 	call	201550c <OS_MemCopy>
 201b940:	e0bff817 	ldw	r2,-32(fp)
 201b944:	e0bffc15 	stw	r2,-16(fp)
 201b948:	e0bffc17 	ldw	r2,-16(fp)
 201b94c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b950:	0005883a 	mov	r2,zero
}
 201b954:	e037883a 	mov	sp,fp
 201b958:	dfc00117 	ldw	ra,4(sp)
 201b95c:	df000017 	ldw	fp,0(sp)
 201b960:	dec00204 	addi	sp,sp,8
 201b964:	f800283a 	ret

0201b968 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201b968:	defffc04 	addi	sp,sp,-16
 201b96c:	df000315 	stw	fp,12(sp)
 201b970:	df000304 	addi	fp,sp,12
 201b974:	e13ffd15 	stw	r4,-12(fp)
 201b978:	e17ffe15 	stw	r5,-8(fp)
 201b97c:	3005883a 	mov	r2,r6
 201b980:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201b984:	e0bfff0b 	ldhu	r2,-4(fp)
 201b988:	1080004c 	andi	r2,r2,1
 201b98c:	10000d26 	beq	r2,zero,201b9c4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201b990:	e0bfff0b 	ldhu	r2,-4(fp)
 201b994:	1080008c 	andi	r2,r2,2
 201b998:	10000a26 	beq	r2,zero,201b9c4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201b99c:	00000706 	br	201b9bc <OS_TaskStkClr+0x54>
                size--;
 201b9a0:	e0bffe17 	ldw	r2,-8(fp)
 201b9a4:	10bfffc4 	addi	r2,r2,-1
 201b9a8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201b9ac:	e0bffd17 	ldw	r2,-12(fp)
 201b9b0:	10c00104 	addi	r3,r2,4
 201b9b4:	e0fffd15 	stw	r3,-12(fp)
 201b9b8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201b9bc:	e0bffe17 	ldw	r2,-8(fp)
 201b9c0:	103ff71e 	bne	r2,zero,201b9a0 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201b9c4:	0001883a 	nop
 201b9c8:	e037883a 	mov	sp,fp
 201b9cc:	df000017 	ldw	fp,0(sp)
 201b9d0:	dec00104 	addi	sp,sp,4
 201b9d4:	f800283a 	ret

0201b9d8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201b9d8:	defff904 	addi	sp,sp,-28
 201b9dc:	dfc00615 	stw	ra,24(sp)
 201b9e0:	df000515 	stw	fp,20(sp)
 201b9e4:	df000504 	addi	fp,sp,20
 201b9e8:	2005883a 	mov	r2,r4
 201b9ec:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b9f0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201b9f4:	d0a74003 	ldbu	r2,-25344(gp)
 201b9f8:	10803fcc 	andi	r2,r2,255
 201b9fc:	1000311e 	bne	r2,zero,201bac4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201ba00:	e0bfff0b 	ldhu	r2,-4(fp)
 201ba04:	10003026 	beq	r2,zero,201bac8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ba08:	0005303a 	rdctl	r2,status
 201ba0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ba10:	e0fffe17 	ldw	r3,-8(fp)
 201ba14:	00bfff84 	movi	r2,-2
 201ba18:	1884703a 	and	r2,r3,r2
 201ba1c:	1001703a 	wrctl	status,r2
  
  return context;
 201ba20:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201ba24:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201ba28:	d0a74117 	ldw	r2,-25340(gp)
 201ba2c:	10800d03 	ldbu	r2,52(r2)
 201ba30:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201ba34:	e0fffd03 	ldbu	r3,-12(fp)
 201ba38:	e13ffd03 	ldbu	r4,-12(fp)
 201ba3c:	d0a73e44 	addi	r2,gp,-25351
 201ba40:	2085883a 	add	r2,r4,r2
 201ba44:	10800003 	ldbu	r2,0(r2)
 201ba48:	1009883a 	mov	r4,r2
 201ba4c:	d0a74117 	ldw	r2,-25340(gp)
 201ba50:	10800d43 	ldbu	r2,53(r2)
 201ba54:	0084303a 	nor	r2,zero,r2
 201ba58:	2084703a 	and	r2,r4,r2
 201ba5c:	1009883a 	mov	r4,r2
 201ba60:	d0a73e44 	addi	r2,gp,-25351
 201ba64:	1885883a 	add	r2,r3,r2
 201ba68:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201ba6c:	e0fffd03 	ldbu	r3,-12(fp)
 201ba70:	d0a73e44 	addi	r2,gp,-25351
 201ba74:	1885883a 	add	r2,r3,r2
 201ba78:	10800003 	ldbu	r2,0(r2)
 201ba7c:	10803fcc 	andi	r2,r2,255
 201ba80:	1000071e 	bne	r2,zero,201baa0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201ba84:	d0a74117 	ldw	r2,-25340(gp)
 201ba88:	10800d83 	ldbu	r2,54(r2)
 201ba8c:	0084303a 	nor	r2,zero,r2
 201ba90:	1007883a 	mov	r3,r2
 201ba94:	d0a73e03 	ldbu	r2,-25352(gp)
 201ba98:	1884703a 	and	r2,r3,r2
 201ba9c:	d0a73e05 	stb	r2,-25352(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201baa0:	d0a74117 	ldw	r2,-25340(gp)
 201baa4:	e0ffff0b 	ldhu	r3,-4(fp)
 201baa8:	10c00b8d 	sth	r3,46(r2)
 201baac:	e0bffb17 	ldw	r2,-20(fp)
 201bab0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bab4:	e0bffc17 	ldw	r2,-16(fp)
 201bab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201babc:	20155740 	call	2015574 <OS_Sched>
 201bac0:	00000106 	br	201bac8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201bac4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201bac8:	e037883a 	mov	sp,fp
 201bacc:	dfc00117 	ldw	ra,4(sp)
 201bad0:	df000017 	ldw	fp,0(sp)
 201bad4:	dec00204 	addi	sp,sp,8
 201bad8:	f800283a 	ret

0201badc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201badc:	defff704 	addi	sp,sp,-36
 201bae0:	dfc00815 	stw	ra,32(sp)
 201bae4:	df000715 	stw	fp,28(sp)
 201bae8:	dc000615 	stw	r16,24(sp)
 201baec:	df000704 	addi	fp,sp,28
 201baf0:	2011883a 	mov	r8,r4
 201baf4:	2809883a 	mov	r4,r5
 201baf8:	3007883a 	mov	r3,r6
 201bafc:	3805883a 	mov	r2,r7
 201bb00:	e23ffb05 	stb	r8,-20(fp)
 201bb04:	e13ffc05 	stb	r4,-16(fp)
 201bb08:	e0fffd05 	stb	r3,-12(fp)
 201bb0c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bb10:	d0a74003 	ldbu	r2,-25344(gp)
 201bb14:	10803fcc 	andi	r2,r2,255
 201bb18:	10000226 	beq	r2,zero,201bb24 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201bb1c:	00801544 	movi	r2,85
 201bb20:	00003d06 	br	201bc18 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201bb24:	e0bffb03 	ldbu	r2,-20(fp)
 201bb28:	1000081e 	bne	r2,zero,201bb4c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201bb2c:	e0bffc03 	ldbu	r2,-16(fp)
 201bb30:	1000061e 	bne	r2,zero,201bb4c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201bb34:	e0bffd03 	ldbu	r2,-12(fp)
 201bb38:	1000041e 	bne	r2,zero,201bb4c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201bb3c:	e0bffe0b 	ldhu	r2,-8(fp)
 201bb40:	1000021e 	bne	r2,zero,201bb4c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201bb44:	00801504 	movi	r2,84
 201bb48:	00003306 	br	201bc18 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201bb4c:	e0bffc03 	ldbu	r2,-16(fp)
 201bb50:	10800f30 	cmpltui	r2,r2,60
 201bb54:	1000021e 	bne	r2,zero,201bb60 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201bb58:	00801444 	movi	r2,81
 201bb5c:	00002e06 	br	201bc18 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201bb60:	e0bffd03 	ldbu	r2,-12(fp)
 201bb64:	10800f30 	cmpltui	r2,r2,60
 201bb68:	1000021e 	bne	r2,zero,201bb74 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201bb6c:	00801484 	movi	r2,82
 201bb70:	00002906 	br	201bc18 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201bb74:	e0bffe0b 	ldhu	r2,-8(fp)
 201bb78:	1080fa30 	cmpltui	r2,r2,1000
 201bb7c:	1000021e 	bne	r2,zero,201bb88 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201bb80:	008014c4 	movi	r2,83
 201bb84:	00002406 	br	201bc18 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201bb88:	e0bffb03 	ldbu	r2,-20(fp)
 201bb8c:	10c38424 	muli	r3,r2,3600
 201bb90:	e0bffc03 	ldbu	r2,-16(fp)
 201bb94:	10800f24 	muli	r2,r2,60
 201bb98:	1887883a 	add	r3,r3,r2
 201bb9c:	e0bffd03 	ldbu	r2,-12(fp)
 201bba0:	1885883a 	add	r2,r3,r2
 201bba4:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201bba8:	e0bffe0b 	ldhu	r2,-8(fp)
 201bbac:	1080fa24 	muli	r2,r2,1000
 201bbb0:	0140fa04 	movi	r5,1000
 201bbb4:	1009883a 	mov	r4,r2
 201bbb8:	20048900 	call	2004890 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201bbbc:	8085883a 	add	r2,r16,r2
 201bbc0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201bbc4:	e0bffa17 	ldw	r2,-24(fp)
 201bbc8:	1004d43a 	srli	r2,r2,16
 201bbcc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201bbd0:	e0bffa17 	ldw	r2,-24(fp)
 201bbd4:	10bfffcc 	andi	r2,r2,65535
 201bbd8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201bbdc:	e0bffa17 	ldw	r2,-24(fp)
 201bbe0:	10bfffcc 	andi	r2,r2,65535
 201bbe4:	1009883a 	mov	r4,r2
 201bbe8:	201b9d80 	call	201b9d8 <OSTimeDly>
    while (loops > 0) {
 201bbec:	00000706 	br	201bc0c <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201bbf0:	01200014 	movui	r4,32768
 201bbf4:	201b9d80 	call	201b9d8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201bbf8:	01200014 	movui	r4,32768
 201bbfc:	201b9d80 	call	201b9d8 <OSTimeDly>
        loops--;
 201bc00:	e0bff90b 	ldhu	r2,-28(fp)
 201bc04:	10bfffc4 	addi	r2,r2,-1
 201bc08:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201bc0c:	e0bff90b 	ldhu	r2,-28(fp)
 201bc10:	103ff71e 	bne	r2,zero,201bbf0 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201bc14:	0005883a 	mov	r2,zero
}
 201bc18:	e6ffff04 	addi	sp,fp,-4
 201bc1c:	dfc00217 	ldw	ra,8(sp)
 201bc20:	df000117 	ldw	fp,4(sp)
 201bc24:	dc000017 	ldw	r16,0(sp)
 201bc28:	dec00304 	addi	sp,sp,12
 201bc2c:	f800283a 	ret

0201bc30 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201bc30:	defff504 	addi	sp,sp,-44
 201bc34:	dfc00a15 	stw	ra,40(sp)
 201bc38:	df000915 	stw	fp,36(sp)
 201bc3c:	df000904 	addi	fp,sp,36
 201bc40:	2005883a 	mov	r2,r4
 201bc44:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201bc48:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201bc4c:	e0bfff03 	ldbu	r2,-4(fp)
 201bc50:	10800530 	cmpltui	r2,r2,20
 201bc54:	1000021e 	bne	r2,zero,201bc60 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201bc58:	00800a84 	movi	r2,42
 201bc5c:	00006406 	br	201bdf0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bc60:	0005303a 	rdctl	r2,status
 201bc64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bc68:	e0fffe17 	ldw	r3,-8(fp)
 201bc6c:	00bfff84 	movi	r2,-2
 201bc70:	1884703a 	and	r2,r3,r2
 201bc74:	1001703a 	wrctl	status,r2
  
  return context;
 201bc78:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201bc7c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201bc80:	e0ffff03 	ldbu	r3,-4(fp)
 201bc84:	008080f4 	movhi	r2,515
 201bc88:	10ad6904 	addi	r2,r2,-19036
 201bc8c:	18c7883a 	add	r3,r3,r3
 201bc90:	18c7883a 	add	r3,r3,r3
 201bc94:	10c5883a 	add	r2,r2,r3
 201bc98:	10800017 	ldw	r2,0(r2)
 201bc9c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201bca0:	e0bff917 	ldw	r2,-28(fp)
 201bca4:	1000061e 	bne	r2,zero,201bcc0 <OSTimeDlyResume+0x90>
 201bca8:	e0bff717 	ldw	r2,-36(fp)
 201bcac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bcb0:	e0bff817 	ldw	r2,-32(fp)
 201bcb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201bcb8:	008010c4 	movi	r2,67
 201bcbc:	00004c06 	br	201bdf0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201bcc0:	e0bff917 	ldw	r2,-28(fp)
 201bcc4:	10800058 	cmpnei	r2,r2,1
 201bcc8:	1000061e 	bne	r2,zero,201bce4 <OSTimeDlyResume+0xb4>
 201bccc:	e0bff717 	ldw	r2,-36(fp)
 201bcd0:	e0bffa15 	stw	r2,-24(fp)
 201bcd4:	e0bffa17 	ldw	r2,-24(fp)
 201bcd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201bcdc:	008010c4 	movi	r2,67
 201bce0:	00004306 	br	201bdf0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201bce4:	e0bff917 	ldw	r2,-28(fp)
 201bce8:	10800b8b 	ldhu	r2,46(r2)
 201bcec:	10bfffcc 	andi	r2,r2,65535
 201bcf0:	1000061e 	bne	r2,zero,201bd0c <OSTimeDlyResume+0xdc>
 201bcf4:	e0bff717 	ldw	r2,-36(fp)
 201bcf8:	e0bffb15 	stw	r2,-20(fp)
 201bcfc:	e0bffb17 	ldw	r2,-20(fp)
 201bd00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201bd04:	00801404 	movi	r2,80
 201bd08:	00003906 	br	201bdf0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201bd0c:	e0bff917 	ldw	r2,-28(fp)
 201bd10:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201bd14:	e0bff917 	ldw	r2,-28(fp)
 201bd18:	10800c03 	ldbu	r2,48(r2)
 201bd1c:	10803fcc 	andi	r2,r2,255
 201bd20:	10800dcc 	andi	r2,r2,55
 201bd24:	10000b26 	beq	r2,zero,201bd54 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201bd28:	e0bff917 	ldw	r2,-28(fp)
 201bd2c:	10c00c03 	ldbu	r3,48(r2)
 201bd30:	00bff204 	movi	r2,-56
 201bd34:	1884703a 	and	r2,r3,r2
 201bd38:	1007883a 	mov	r3,r2
 201bd3c:	e0bff917 	ldw	r2,-28(fp)
 201bd40:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201bd44:	e0bff917 	ldw	r2,-28(fp)
 201bd48:	00c00044 	movi	r3,1
 201bd4c:	10c00c45 	stb	r3,49(r2)
 201bd50:	00000206 	br	201bd5c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201bd54:	e0bff917 	ldw	r2,-28(fp)
 201bd58:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201bd5c:	e0bff917 	ldw	r2,-28(fp)
 201bd60:	10800c03 	ldbu	r2,48(r2)
 201bd64:	10803fcc 	andi	r2,r2,255
 201bd68:	1080020c 	andi	r2,r2,8
 201bd6c:	10001b1e 	bne	r2,zero,201bddc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201bd70:	e0bff917 	ldw	r2,-28(fp)
 201bd74:	10c00d83 	ldbu	r3,54(r2)
 201bd78:	d0a73e03 	ldbu	r2,-25352(gp)
 201bd7c:	1884b03a 	or	r2,r3,r2
 201bd80:	d0a73e05 	stb	r2,-25352(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201bd84:	e0bff917 	ldw	r2,-28(fp)
 201bd88:	10800d03 	ldbu	r2,52(r2)
 201bd8c:	10c03fcc 	andi	r3,r2,255
 201bd90:	e0bff917 	ldw	r2,-28(fp)
 201bd94:	10800d03 	ldbu	r2,52(r2)
 201bd98:	11003fcc 	andi	r4,r2,255
 201bd9c:	d0a73e44 	addi	r2,gp,-25351
 201bda0:	2085883a 	add	r2,r4,r2
 201bda4:	11000003 	ldbu	r4,0(r2)
 201bda8:	e0bff917 	ldw	r2,-28(fp)
 201bdac:	10800d43 	ldbu	r2,53(r2)
 201bdb0:	2084b03a 	or	r2,r4,r2
 201bdb4:	1009883a 	mov	r4,r2
 201bdb8:	d0a73e44 	addi	r2,gp,-25351
 201bdbc:	1885883a 	add	r2,r3,r2
 201bdc0:	11000005 	stb	r4,0(r2)
 201bdc4:	e0bff717 	ldw	r2,-36(fp)
 201bdc8:	e0bffc15 	stw	r2,-16(fp)
 201bdcc:	e0bffc17 	ldw	r2,-16(fp)
 201bdd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201bdd4:	20155740 	call	2015574 <OS_Sched>
 201bdd8:	00000406 	br	201bdec <OSTimeDlyResume+0x1bc>
 201bddc:	e0bff717 	ldw	r2,-36(fp)
 201bde0:	e0bffd15 	stw	r2,-12(fp)
 201bde4:	e0bffd17 	ldw	r2,-12(fp)
 201bde8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201bdec:	0005883a 	mov	r2,zero
}
 201bdf0:	e037883a 	mov	sp,fp
 201bdf4:	dfc00117 	ldw	ra,4(sp)
 201bdf8:	df000017 	ldw	fp,0(sp)
 201bdfc:	dec00204 	addi	sp,sp,8
 201be00:	f800283a 	ret

0201be04 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201be04:	defffb04 	addi	sp,sp,-20
 201be08:	df000415 	stw	fp,16(sp)
 201be0c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201be10:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201be14:	0005303a 	rdctl	r2,status
 201be18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201be1c:	e0fffe17 	ldw	r3,-8(fp)
 201be20:	00bfff84 	movi	r2,-2
 201be24:	1884703a 	and	r2,r3,r2
 201be28:	1001703a 	wrctl	status,r2
  
  return context;
 201be2c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201be30:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201be34:	d0a74217 	ldw	r2,-25336(gp)
 201be38:	e0bffd15 	stw	r2,-12(fp)
 201be3c:	e0bffc17 	ldw	r2,-16(fp)
 201be40:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201be44:	e0bfff17 	ldw	r2,-4(fp)
 201be48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201be4c:	e0bffd17 	ldw	r2,-12(fp)
}
 201be50:	e037883a 	mov	sp,fp
 201be54:	df000017 	ldw	fp,0(sp)
 201be58:	dec00104 	addi	sp,sp,4
 201be5c:	f800283a 	ret

0201be60 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201be60:	defffb04 	addi	sp,sp,-20
 201be64:	df000415 	stw	fp,16(sp)
 201be68:	df000404 	addi	fp,sp,16
 201be6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201be70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201be74:	0005303a 	rdctl	r2,status
 201be78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201be7c:	e0fffd17 	ldw	r3,-12(fp)
 201be80:	00bfff84 	movi	r2,-2
 201be84:	1884703a 	and	r2,r3,r2
 201be88:	1001703a 	wrctl	status,r2
  
  return context;
 201be8c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201be90:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201be94:	e0bfff17 	ldw	r2,-4(fp)
 201be98:	d0a74215 	stw	r2,-25336(gp)
 201be9c:	e0bffc17 	ldw	r2,-16(fp)
 201bea0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bea4:	e0bffe17 	ldw	r2,-8(fp)
 201bea8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201beac:	0001883a 	nop
 201beb0:	e037883a 	mov	sp,fp
 201beb4:	df000017 	ldw	fp,0(sp)
 201beb8:	dec00104 	addi	sp,sp,4
 201bebc:	f800283a 	ret

0201bec0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201bec0:	defffd04 	addi	sp,sp,-12
 201bec4:	dfc00215 	stw	ra,8(sp)
 201bec8:	df000115 	stw	fp,4(sp)
 201becc:	df000104 	addi	fp,sp,4
 201bed0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201bed4:	d1600804 	addi	r5,gp,-32736
 201bed8:	e13fff17 	ldw	r4,-4(fp)
 201bedc:	201cf5c0 	call	201cf5c <alt_dev_llist_insert>
}
 201bee0:	e037883a 	mov	sp,fp
 201bee4:	dfc00117 	ldw	ra,4(sp)
 201bee8:	df000017 	ldw	fp,0(sp)
 201beec:	dec00204 	addi	sp,sp,8
 201bef0:	f800283a 	ret

0201bef4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201bef4:	defffd04 	addi	sp,sp,-12
 201bef8:	dfc00215 	stw	ra,8(sp)
 201befc:	df000115 	stw	fp,4(sp)
 201bf00:	df000104 	addi	fp,sp,4
 201bf04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201bf08:	201d8cc0 	call	201d8cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201bf0c:	00800044 	movi	r2,1
 201bf10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201bf14:	0001883a 	nop
 201bf18:	e037883a 	mov	sp,fp
 201bf1c:	dfc00117 	ldw	ra,4(sp)
 201bf20:	df000017 	ldw	fp,0(sp)
 201bf24:	dec00204 	addi	sp,sp,8
 201bf28:	f800283a 	ret

0201bf2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201bf2c:	defffe04 	addi	sp,sp,-8
 201bf30:	dfc00115 	stw	ra,4(sp)
 201bf34:	df000015 	stw	fp,0(sp)
 201bf38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201bf3c:	01c0fa04 	movi	r7,1000
 201bf40:	01800044 	movi	r6,1
 201bf44:	000b883a 	mov	r5,zero
 201bf48:	0009883a 	mov	r4,zero
 201bf4c:	201cd300 	call	201cd30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201bf50:	000d883a 	mov	r6,zero
 201bf54:	000b883a 	mov	r5,zero
 201bf58:	010080b4 	movhi	r4,514
 201bf5c:	213d8f04 	addi	r4,r4,-2500
 201bf60:	201c0f00 	call	201c0f0 <altera_avalon_jtag_uart_init>
 201bf64:	010080b4 	movhi	r4,514
 201bf68:	213d8504 	addi	r4,r4,-2540
 201bf6c:	201bec00 	call	201bec0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201bf70:	0001883a 	nop
}
 201bf74:	0001883a 	nop
 201bf78:	e037883a 	mov	sp,fp
 201bf7c:	dfc00117 	ldw	ra,4(sp)
 201bf80:	df000017 	ldw	fp,0(sp)
 201bf84:	dec00204 	addi	sp,sp,8
 201bf88:	f800283a 	ret

0201bf8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201bf8c:	defffa04 	addi	sp,sp,-24
 201bf90:	dfc00515 	stw	ra,20(sp)
 201bf94:	df000415 	stw	fp,16(sp)
 201bf98:	df000404 	addi	fp,sp,16
 201bf9c:	e13ffd15 	stw	r4,-12(fp)
 201bfa0:	e17ffe15 	stw	r5,-8(fp)
 201bfa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201bfa8:	e0bffd17 	ldw	r2,-12(fp)
 201bfac:	10800017 	ldw	r2,0(r2)
 201bfb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201bfb4:	e0bffc17 	ldw	r2,-16(fp)
 201bfb8:	10c00a04 	addi	r3,r2,40
 201bfbc:	e0bffd17 	ldw	r2,-12(fp)
 201bfc0:	10800217 	ldw	r2,8(r2)
 201bfc4:	100f883a 	mov	r7,r2
 201bfc8:	e1bfff17 	ldw	r6,-4(fp)
 201bfcc:	e17ffe17 	ldw	r5,-8(fp)
 201bfd0:	1809883a 	mov	r4,r3
 201bfd4:	201c7380 	call	201c738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201bfd8:	e037883a 	mov	sp,fp
 201bfdc:	dfc00117 	ldw	ra,4(sp)
 201bfe0:	df000017 	ldw	fp,0(sp)
 201bfe4:	dec00204 	addi	sp,sp,8
 201bfe8:	f800283a 	ret

0201bfec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201bfec:	defffa04 	addi	sp,sp,-24
 201bff0:	dfc00515 	stw	ra,20(sp)
 201bff4:	df000415 	stw	fp,16(sp)
 201bff8:	df000404 	addi	fp,sp,16
 201bffc:	e13ffd15 	stw	r4,-12(fp)
 201c000:	e17ffe15 	stw	r5,-8(fp)
 201c004:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c008:	e0bffd17 	ldw	r2,-12(fp)
 201c00c:	10800017 	ldw	r2,0(r2)
 201c010:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201c014:	e0bffc17 	ldw	r2,-16(fp)
 201c018:	10c00a04 	addi	r3,r2,40
 201c01c:	e0bffd17 	ldw	r2,-12(fp)
 201c020:	10800217 	ldw	r2,8(r2)
 201c024:	100f883a 	mov	r7,r2
 201c028:	e1bfff17 	ldw	r6,-4(fp)
 201c02c:	e17ffe17 	ldw	r5,-8(fp)
 201c030:	1809883a 	mov	r4,r3
 201c034:	201c9f40 	call	201c9f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201c038:	e037883a 	mov	sp,fp
 201c03c:	dfc00117 	ldw	ra,4(sp)
 201c040:	df000017 	ldw	fp,0(sp)
 201c044:	dec00204 	addi	sp,sp,8
 201c048:	f800283a 	ret

0201c04c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201c04c:	defffc04 	addi	sp,sp,-16
 201c050:	dfc00315 	stw	ra,12(sp)
 201c054:	df000215 	stw	fp,8(sp)
 201c058:	df000204 	addi	fp,sp,8
 201c05c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c060:	e0bfff17 	ldw	r2,-4(fp)
 201c064:	10800017 	ldw	r2,0(r2)
 201c068:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201c06c:	e0bffe17 	ldw	r2,-8(fp)
 201c070:	10c00a04 	addi	r3,r2,40
 201c074:	e0bfff17 	ldw	r2,-4(fp)
 201c078:	10800217 	ldw	r2,8(r2)
 201c07c:	100b883a 	mov	r5,r2
 201c080:	1809883a 	mov	r4,r3
 201c084:	201c5e00 	call	201c5e0 <altera_avalon_jtag_uart_close>
}
 201c088:	e037883a 	mov	sp,fp
 201c08c:	dfc00117 	ldw	ra,4(sp)
 201c090:	df000017 	ldw	fp,0(sp)
 201c094:	dec00204 	addi	sp,sp,8
 201c098:	f800283a 	ret

0201c09c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201c09c:	defffa04 	addi	sp,sp,-24
 201c0a0:	dfc00515 	stw	ra,20(sp)
 201c0a4:	df000415 	stw	fp,16(sp)
 201c0a8:	df000404 	addi	fp,sp,16
 201c0ac:	e13ffd15 	stw	r4,-12(fp)
 201c0b0:	e17ffe15 	stw	r5,-8(fp)
 201c0b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201c0b8:	e0bffd17 	ldw	r2,-12(fp)
 201c0bc:	10800017 	ldw	r2,0(r2)
 201c0c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201c0c4:	e0bffc17 	ldw	r2,-16(fp)
 201c0c8:	10800a04 	addi	r2,r2,40
 201c0cc:	e1bfff17 	ldw	r6,-4(fp)
 201c0d0:	e17ffe17 	ldw	r5,-8(fp)
 201c0d4:	1009883a 	mov	r4,r2
 201c0d8:	201c6480 	call	201c648 <altera_avalon_jtag_uart_ioctl>
}
 201c0dc:	e037883a 	mov	sp,fp
 201c0e0:	dfc00117 	ldw	ra,4(sp)
 201c0e4:	df000017 	ldw	fp,0(sp)
 201c0e8:	dec00204 	addi	sp,sp,8
 201c0ec:	f800283a 	ret

0201c0f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201c0f0:	defff104 	addi	sp,sp,-60
 201c0f4:	dfc00e15 	stw	ra,56(sp)
 201c0f8:	df000d15 	stw	fp,52(sp)
 201c0fc:	df000d04 	addi	fp,sp,52
 201c100:	e13ff915 	stw	r4,-28(fp)
 201c104:	e17ffa15 	stw	r5,-24(fp)
 201c108:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201c10c:	e0bff917 	ldw	r2,-28(fp)
 201c110:	10800c04 	addi	r2,r2,48
 201c114:	e0bff415 	stw	r2,-48(fp)
 201c118:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201c11c:	e0bff80b 	ldhu	r2,-32(fp)
 201c120:	e0fff884 	addi	r3,fp,-30
 201c124:	180b883a 	mov	r5,r3
 201c128:	1009883a 	mov	r4,r2
 201c12c:	20160e00 	call	20160e0 <OSFlagCreate>
 201c130:	1007883a 	mov	r3,r2
 201c134:	e0bff417 	ldw	r2,-48(fp)
 201c138:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201c13c:	e0bff917 	ldw	r2,-28(fp)
 201c140:	10800a04 	addi	r2,r2,40
 201c144:	e0bff515 	stw	r2,-44(fp)
 201c148:	00800044 	movi	r2,1
 201c14c:	e0bff78d 	sth	r2,-34(fp)
 201c150:	e0bff78b 	ldhu	r2,-34(fp)
 201c154:	1009883a 	mov	r4,r2
 201c158:	20198bc0 	call	20198bc <OSSemCreate>
 201c15c:	1007883a 	mov	r3,r2
 201c160:	e0bff517 	ldw	r2,-44(fp)
 201c164:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201c168:	e0bff917 	ldw	r2,-28(fp)
 201c16c:	10800b04 	addi	r2,r2,44
 201c170:	e0bff615 	stw	r2,-40(fp)
 201c174:	00800044 	movi	r2,1
 201c178:	e0bff70d 	sth	r2,-36(fp)
 201c17c:	e0bff70b 	ldhu	r2,-36(fp)
 201c180:	1009883a 	mov	r4,r2
 201c184:	20198bc0 	call	20198bc <OSSemCreate>
 201c188:	1007883a 	mov	r3,r2
 201c18c:	e0bff617 	ldw	r2,-40(fp)
 201c190:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c194:	e0bff917 	ldw	r2,-28(fp)
 201c198:	00c00044 	movi	r3,1
 201c19c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201c1a0:	e0bff917 	ldw	r2,-28(fp)
 201c1a4:	10800017 	ldw	r2,0(r2)
 201c1a8:	10800104 	addi	r2,r2,4
 201c1ac:	1007883a 	mov	r3,r2
 201c1b0:	e0bff917 	ldw	r2,-28(fp)
 201c1b4:	10800817 	ldw	r2,32(r2)
 201c1b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201c1bc:	e0bffa17 	ldw	r2,-24(fp)
 201c1c0:	e0fffb17 	ldw	r3,-20(fp)
 201c1c4:	d8000015 	stw	zero,0(sp)
 201c1c8:	e1fff917 	ldw	r7,-28(fp)
 201c1cc:	018080b4 	movhi	r6,514
 201c1d0:	31b08e04 	addi	r6,r6,-15816
 201c1d4:	180b883a 	mov	r5,r3
 201c1d8:	1009883a 	mov	r4,r2
 201c1dc:	201d0f40 	call	201d0f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201c1e0:	e0bff917 	ldw	r2,-28(fp)
 201c1e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201c1e8:	e0bff917 	ldw	r2,-28(fp)
 201c1ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201c1f0:	d0e74717 	ldw	r3,-25316(gp)
 201c1f4:	e1fff917 	ldw	r7,-28(fp)
 201c1f8:	018080b4 	movhi	r6,514
 201c1fc:	31b13704 	addi	r6,r6,-15140
 201c200:	180b883a 	mov	r5,r3
 201c204:	1009883a 	mov	r4,r2
 201c208:	201cdac0 	call	201cdac <alt_alarm_start>
 201c20c:	1000040e 	bge	r2,zero,201c220 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201c210:	e0fff917 	ldw	r3,-28(fp)
 201c214:	00a00034 	movhi	r2,32768
 201c218:	10bfffc4 	addi	r2,r2,-1
 201c21c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201c220:	0001883a 	nop
 201c224:	e037883a 	mov	sp,fp
 201c228:	dfc00117 	ldw	ra,4(sp)
 201c22c:	df000017 	ldw	fp,0(sp)
 201c230:	dec00204 	addi	sp,sp,8
 201c234:	f800283a 	ret

0201c238 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201c238:	defff204 	addi	sp,sp,-56
 201c23c:	dfc00d15 	stw	ra,52(sp)
 201c240:	df000c15 	stw	fp,48(sp)
 201c244:	df000c04 	addi	fp,sp,48
 201c248:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201c24c:	e0bfff17 	ldw	r2,-4(fp)
 201c250:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 201c254:	e0bff617 	ldw	r2,-40(fp)
 201c258:	10800017 	ldw	r2,0(r2)
 201c25c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c260:	e0bff717 	ldw	r2,-36(fp)
 201c264:	10800104 	addi	r2,r2,4
 201c268:	10800037 	ldwio	r2,0(r2)
 201c26c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201c270:	e0bff817 	ldw	r2,-32(fp)
 201c274:	1080c00c 	andi	r2,r2,768
 201c278:	10009126 	beq	r2,zero,201c4c0 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201c27c:	e0bff817 	ldw	r2,-32(fp)
 201c280:	1080400c 	andi	r2,r2,256
 201c284:	10004726 	beq	r2,zero,201c3a4 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201c288:	00800074 	movhi	r2,1
 201c28c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c290:	e0bff617 	ldw	r2,-40(fp)
 201c294:	10800d17 	ldw	r2,52(r2)
 201c298:	10800044 	addi	r2,r2,1
 201c29c:	1081ffcc 	andi	r2,r2,2047
 201c2a0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 201c2a4:	e0bff617 	ldw	r2,-40(fp)
 201c2a8:	10c00e17 	ldw	r3,56(r2)
 201c2ac:	e0bff917 	ldw	r2,-28(fp)
 201c2b0:	18802726 	beq	r3,r2,201c350 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201c2b4:	e0bff717 	ldw	r2,-36(fp)
 201c2b8:	10800037 	ldwio	r2,0(r2)
 201c2bc:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201c2c0:	e0bff417 	ldw	r2,-48(fp)
 201c2c4:	10a0000c 	andi	r2,r2,32768
 201c2c8:	10002326 	beq	r2,zero,201c358 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201c2cc:	e0bff617 	ldw	r2,-40(fp)
 201c2d0:	10800d17 	ldw	r2,52(r2)
 201c2d4:	e0fff417 	ldw	r3,-48(fp)
 201c2d8:	1809883a 	mov	r4,r3
 201c2dc:	e0fff617 	ldw	r3,-40(fp)
 201c2e0:	1885883a 	add	r2,r3,r2
 201c2e4:	10801104 	addi	r2,r2,68
 201c2e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c2ec:	e0bff617 	ldw	r2,-40(fp)
 201c2f0:	10800d17 	ldw	r2,52(r2)
 201c2f4:	10800044 	addi	r2,r2,1
 201c2f8:	10c1ffcc 	andi	r3,r2,2047
 201c2fc:	e0bff617 	ldw	r2,-40(fp)
 201c300:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201c304:	e0bff617 	ldw	r2,-40(fp)
 201c308:	10800c17 	ldw	r2,48(r2)
 201c30c:	e0bffb15 	stw	r2,-20(fp)
 201c310:	00800044 	movi	r2,1
 201c314:	e0bffc0d 	sth	r2,-16(fp)
 201c318:	00800044 	movi	r2,1
 201c31c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c320:	d0a73243 	ldbu	r2,-25399(gp)
 201c324:	10803fcc 	andi	r2,r2,255
 201c328:	103fd926 	beq	r2,zero,201c290 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 201c32c:	e0bffc0b 	ldhu	r2,-16(fp)
 201c330:	e0fffc83 	ldbu	r3,-14(fp)
 201c334:	e13ffdc4 	addi	r4,fp,-9
 201c338:	200f883a 	mov	r7,r4
 201c33c:	180d883a 	mov	r6,r3
 201c340:	100b883a 	mov	r5,r2
 201c344:	e13ffb17 	ldw	r4,-20(fp)
 201c348:	2016cbc0 	call	2016cbc <OSFlagPost>
      }
 201c34c:	003fd006 	br	201c290 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201c350:	0001883a 	nop
 201c354:	00000106 	br	201c35c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201c358:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201c35c:	e0bff417 	ldw	r2,-48(fp)
 201c360:	10bfffec 	andhi	r2,r2,65535
 201c364:	10000f26 	beq	r2,zero,201c3a4 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c368:	e0bff617 	ldw	r2,-40(fp)
 201c36c:	10c00817 	ldw	r3,32(r2)
 201c370:	00bfff84 	movi	r2,-2
 201c374:	1886703a 	and	r3,r3,r2
 201c378:	e0bff617 	ldw	r2,-40(fp)
 201c37c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201c380:	e0bff717 	ldw	r2,-36(fp)
 201c384:	10800104 	addi	r2,r2,4
 201c388:	1007883a 	mov	r3,r2
 201c38c:	e0bff617 	ldw	r2,-40(fp)
 201c390:	10800817 	ldw	r2,32(r2)
 201c394:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c398:	e0bff717 	ldw	r2,-36(fp)
 201c39c:	10800104 	addi	r2,r2,4
 201c3a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201c3a4:	e0bff817 	ldw	r2,-32(fp)
 201c3a8:	1080800c 	andi	r2,r2,512
 201c3ac:	103fac26 	beq	r2,zero,201c260 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201c3b0:	e0bff817 	ldw	r2,-32(fp)
 201c3b4:	1004d43a 	srli	r2,r2,16
 201c3b8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c3bc:	00002606 	br	201c458 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201c3c0:	e0bff717 	ldw	r2,-36(fp)
 201c3c4:	e0fff617 	ldw	r3,-40(fp)
 201c3c8:	18c01017 	ldw	r3,64(r3)
 201c3cc:	e13ff617 	ldw	r4,-40(fp)
 201c3d0:	20c7883a 	add	r3,r4,r3
 201c3d4:	18c21104 	addi	r3,r3,2116
 201c3d8:	18c00003 	ldbu	r3,0(r3)
 201c3dc:	18c03fcc 	andi	r3,r3,255
 201c3e0:	18c0201c 	xori	r3,r3,128
 201c3e4:	18ffe004 	addi	r3,r3,-128
 201c3e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c3ec:	e0bff617 	ldw	r2,-40(fp)
 201c3f0:	10801017 	ldw	r2,64(r2)
 201c3f4:	10800044 	addi	r2,r2,1
 201c3f8:	10c1ffcc 	andi	r3,r2,2047
 201c3fc:	e0bff617 	ldw	r2,-40(fp)
 201c400:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201c404:	e0bff617 	ldw	r2,-40(fp)
 201c408:	10800c17 	ldw	r2,48(r2)
 201c40c:	e0bffa15 	stw	r2,-24(fp)
 201c410:	00800084 	movi	r2,2
 201c414:	e0bffd0d 	sth	r2,-12(fp)
 201c418:	00800044 	movi	r2,1
 201c41c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c420:	d0a73243 	ldbu	r2,-25399(gp)
 201c424:	10803fcc 	andi	r2,r2,255
 201c428:	10000826 	beq	r2,zero,201c44c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 201c42c:	e0bffd0b 	ldhu	r2,-12(fp)
 201c430:	e0fffd83 	ldbu	r3,-10(fp)
 201c434:	e13ffe04 	addi	r4,fp,-8
 201c438:	200f883a 	mov	r7,r4
 201c43c:	180d883a 	mov	r6,r3
 201c440:	100b883a 	mov	r5,r2
 201c444:	e13ffa17 	ldw	r4,-24(fp)
 201c448:	2016cbc0 	call	2016cbc <OSFlagPost>

        space--;
 201c44c:	e0bff517 	ldw	r2,-44(fp)
 201c450:	10bfffc4 	addi	r2,r2,-1
 201c454:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c458:	e0bff517 	ldw	r2,-44(fp)
 201c45c:	10000526 	beq	r2,zero,201c474 <altera_avalon_jtag_uart_irq+0x23c>
 201c460:	e0bff617 	ldw	r2,-40(fp)
 201c464:	10c01017 	ldw	r3,64(r2)
 201c468:	e0bff617 	ldw	r2,-40(fp)
 201c46c:	10800f17 	ldw	r2,60(r2)
 201c470:	18bfd31e 	bne	r3,r2,201c3c0 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201c474:	e0bff517 	ldw	r2,-44(fp)
 201c478:	103f7926 	beq	r2,zero,201c260 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201c47c:	e0bff617 	ldw	r2,-40(fp)
 201c480:	10c00817 	ldw	r3,32(r2)
 201c484:	00bfff44 	movi	r2,-3
 201c488:	1886703a 	and	r3,r3,r2
 201c48c:	e0bff617 	ldw	r2,-40(fp)
 201c490:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201c494:	e0bff617 	ldw	r2,-40(fp)
 201c498:	10800017 	ldw	r2,0(r2)
 201c49c:	10800104 	addi	r2,r2,4
 201c4a0:	1007883a 	mov	r3,r2
 201c4a4:	e0bff617 	ldw	r2,-40(fp)
 201c4a8:	10800817 	ldw	r2,32(r2)
 201c4ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c4b0:	e0bff717 	ldw	r2,-36(fp)
 201c4b4:	10800104 	addi	r2,r2,4
 201c4b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201c4bc:	003f6806 	br	201c260 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201c4c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201c4c4:	0001883a 	nop
 201c4c8:	e037883a 	mov	sp,fp
 201c4cc:	dfc00117 	ldw	ra,4(sp)
 201c4d0:	df000017 	ldw	fp,0(sp)
 201c4d4:	dec00204 	addi	sp,sp,8
 201c4d8:	f800283a 	ret

0201c4dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201c4dc:	defff904 	addi	sp,sp,-28
 201c4e0:	dfc00615 	stw	ra,24(sp)
 201c4e4:	df000515 	stw	fp,20(sp)
 201c4e8:	df000504 	addi	fp,sp,20
 201c4ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201c4f0:	e0bfff17 	ldw	r2,-4(fp)
 201c4f4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201c4f8:	e0bffb17 	ldw	r2,-20(fp)
 201c4fc:	10800017 	ldw	r2,0(r2)
 201c500:	10800104 	addi	r2,r2,4
 201c504:	10800037 	ldwio	r2,0(r2)
 201c508:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201c50c:	e0bffc17 	ldw	r2,-16(fp)
 201c510:	1081000c 	andi	r2,r2,1024
 201c514:	10000b26 	beq	r2,zero,201c544 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201c518:	e0bffb17 	ldw	r2,-20(fp)
 201c51c:	10800017 	ldw	r2,0(r2)
 201c520:	10800104 	addi	r2,r2,4
 201c524:	1007883a 	mov	r3,r2
 201c528:	e0bffb17 	ldw	r2,-20(fp)
 201c52c:	10800817 	ldw	r2,32(r2)
 201c530:	10810014 	ori	r2,r2,1024
 201c534:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201c538:	e0bffb17 	ldw	r2,-20(fp)
 201c53c:	10000915 	stw	zero,36(r2)
 201c540:	00002106 	br	201c5c8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201c544:	e0bffb17 	ldw	r2,-20(fp)
 201c548:	10c00917 	ldw	r3,36(r2)
 201c54c:	00a00034 	movhi	r2,32768
 201c550:	10bfff04 	addi	r2,r2,-4
 201c554:	10c01c36 	bltu	r2,r3,201c5c8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201c558:	e0bffb17 	ldw	r2,-20(fp)
 201c55c:	10800917 	ldw	r2,36(r2)
 201c560:	10c00044 	addi	r3,r2,1
 201c564:	e0bffb17 	ldw	r2,-20(fp)
 201c568:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201c56c:	e0bffb17 	ldw	r2,-20(fp)
 201c570:	10c00917 	ldw	r3,36(r2)
 201c574:	e0bffb17 	ldw	r2,-20(fp)
 201c578:	10800117 	ldw	r2,4(r2)
 201c57c:	18801236 	bltu	r3,r2,201c5c8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201c580:	e0bffb17 	ldw	r2,-20(fp)
 201c584:	10800c17 	ldw	r2,48(r2)
 201c588:	e0bffd15 	stw	r2,-12(fp)
 201c58c:	00800104 	movi	r2,4
 201c590:	e0bffe0d 	sth	r2,-8(fp)
 201c594:	00800044 	movi	r2,1
 201c598:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c59c:	d0a73243 	ldbu	r2,-25399(gp)
 201c5a0:	10803fcc 	andi	r2,r2,255
 201c5a4:	10000826 	beq	r2,zero,201c5c8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201c5a8:	e0bffe0b 	ldhu	r2,-8(fp)
 201c5ac:	e0fffe83 	ldbu	r3,-6(fp)
 201c5b0:	e13ffec4 	addi	r4,fp,-5
 201c5b4:	200f883a 	mov	r7,r4
 201c5b8:	180d883a 	mov	r6,r3
 201c5bc:	100b883a 	mov	r5,r2
 201c5c0:	e13ffd17 	ldw	r4,-12(fp)
 201c5c4:	2016cbc0 	call	2016cbc <OSFlagPost>
 201c5c8:	d0a74717 	ldw	r2,-25316(gp)
    }
  }

  return alt_ticks_per_second();
}
 201c5cc:	e037883a 	mov	sp,fp
 201c5d0:	dfc00117 	ldw	ra,4(sp)
 201c5d4:	df000017 	ldw	fp,0(sp)
 201c5d8:	dec00204 	addi	sp,sp,8
 201c5dc:	f800283a 	ret

0201c5e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201c5e0:	defffd04 	addi	sp,sp,-12
 201c5e4:	df000215 	stw	fp,8(sp)
 201c5e8:	df000204 	addi	fp,sp,8
 201c5ec:	e13ffe15 	stw	r4,-8(fp)
 201c5f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c5f4:	00000506 	br	201c60c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201c5f8:	e0bfff17 	ldw	r2,-4(fp)
 201c5fc:	1090000c 	andi	r2,r2,16384
 201c600:	10000226 	beq	r2,zero,201c60c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201c604:	00bffd44 	movi	r2,-11
 201c608:	00000b06 	br	201c638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c60c:	e0bffe17 	ldw	r2,-8(fp)
 201c610:	10c01017 	ldw	r3,64(r2)
 201c614:	e0bffe17 	ldw	r2,-8(fp)
 201c618:	10800f17 	ldw	r2,60(r2)
 201c61c:	18800526 	beq	r3,r2,201c634 <altera_avalon_jtag_uart_close+0x54>
 201c620:	e0bffe17 	ldw	r2,-8(fp)
 201c624:	10c00917 	ldw	r3,36(r2)
 201c628:	e0bffe17 	ldw	r2,-8(fp)
 201c62c:	10800117 	ldw	r2,4(r2)
 201c630:	18bff136 	bltu	r3,r2,201c5f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201c634:	0005883a 	mov	r2,zero
}
 201c638:	e037883a 	mov	sp,fp
 201c63c:	df000017 	ldw	fp,0(sp)
 201c640:	dec00104 	addi	sp,sp,4
 201c644:	f800283a 	ret

0201c648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201c648:	defffa04 	addi	sp,sp,-24
 201c64c:	df000515 	stw	fp,20(sp)
 201c650:	df000504 	addi	fp,sp,20
 201c654:	e13ffd15 	stw	r4,-12(fp)
 201c658:	e17ffe15 	stw	r5,-8(fp)
 201c65c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201c660:	00bff9c4 	movi	r2,-25
 201c664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201c668:	e0bffe17 	ldw	r2,-8(fp)
 201c66c:	10da8060 	cmpeqi	r3,r2,27137
 201c670:	1800031e 	bne	r3,zero,201c680 <altera_avalon_jtag_uart_ioctl+0x38>
 201c674:	109a80a0 	cmpeqi	r2,r2,27138
 201c678:	1000181e 	bne	r2,zero,201c6dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201c67c:	00002906 	br	201c724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201c680:	e0bffd17 	ldw	r2,-12(fp)
 201c684:	10c00117 	ldw	r3,4(r2)
 201c688:	00a00034 	movhi	r2,32768
 201c68c:	10bfffc4 	addi	r2,r2,-1
 201c690:	18802126 	beq	r3,r2,201c718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201c694:	e0bfff17 	ldw	r2,-4(fp)
 201c698:	10800017 	ldw	r2,0(r2)
 201c69c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201c6a0:	e0bffc17 	ldw	r2,-16(fp)
 201c6a4:	10800090 	cmplti	r2,r2,2
 201c6a8:	1000061e 	bne	r2,zero,201c6c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 201c6ac:	e0fffc17 	ldw	r3,-16(fp)
 201c6b0:	00a00034 	movhi	r2,32768
 201c6b4:	10bfffc4 	addi	r2,r2,-1
 201c6b8:	18800226 	beq	r3,r2,201c6c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 201c6bc:	e0bffc17 	ldw	r2,-16(fp)
 201c6c0:	00000206 	br	201c6cc <altera_avalon_jtag_uart_ioctl+0x84>
 201c6c4:	00a00034 	movhi	r2,32768
 201c6c8:	10bfff84 	addi	r2,r2,-2
 201c6cc:	e0fffd17 	ldw	r3,-12(fp)
 201c6d0:	18800115 	stw	r2,4(r3)
      rc = 0;
 201c6d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201c6d8:	00000f06 	br	201c718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201c6dc:	e0bffd17 	ldw	r2,-12(fp)
 201c6e0:	10c00117 	ldw	r3,4(r2)
 201c6e4:	00a00034 	movhi	r2,32768
 201c6e8:	10bfffc4 	addi	r2,r2,-1
 201c6ec:	18800c26 	beq	r3,r2,201c720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201c6f0:	e0bffd17 	ldw	r2,-12(fp)
 201c6f4:	10c00917 	ldw	r3,36(r2)
 201c6f8:	e0bffd17 	ldw	r2,-12(fp)
 201c6fc:	10800117 	ldw	r2,4(r2)
 201c700:	1885803a 	cmpltu	r2,r3,r2
 201c704:	10c03fcc 	andi	r3,r2,255
 201c708:	e0bfff17 	ldw	r2,-4(fp)
 201c70c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201c710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201c714:	00000206 	br	201c720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201c718:	0001883a 	nop
 201c71c:	00000106 	br	201c724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201c720:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201c724:	e0bffb17 	ldw	r2,-20(fp)
}
 201c728:	e037883a 	mov	sp,fp
 201c72c:	df000017 	ldw	fp,0(sp)
 201c730:	dec00104 	addi	sp,sp,4
 201c734:	f800283a 	ret

0201c738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201c738:	deffed04 	addi	sp,sp,-76
 201c73c:	dfc01215 	stw	ra,72(sp)
 201c740:	df001115 	stw	fp,68(sp)
 201c744:	df001104 	addi	fp,sp,68
 201c748:	e13ffc15 	stw	r4,-16(fp)
 201c74c:	e17ffd15 	stw	r5,-12(fp)
 201c750:	e1bffe15 	stw	r6,-8(fp)
 201c754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201c758:	e0bffd17 	ldw	r2,-12(fp)
 201c75c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201c760:	e0bffc17 	ldw	r2,-16(fp)
 201c764:	10800a17 	ldw	r2,40(r2)
 201c768:	e0bff815 	stw	r2,-32(fp)
 201c76c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201c770:	e0bff90b 	ldhu	r2,-28(fp)
 201c774:	e0fffb04 	addi	r3,fp,-20
 201c778:	180d883a 	mov	r6,r3
 201c77c:	100b883a 	mov	r5,r2
 201c780:	e13ff817 	ldw	r4,-32(fp)
 201c784:	2019bd40 	call	2019bd4 <OSSemPend>

  while (space > 0)
 201c788:	00006106 	br	201c910 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201c78c:	e0bffc17 	ldw	r2,-16(fp)
 201c790:	10800d17 	ldw	r2,52(r2)
 201c794:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201c798:	e0bffc17 	ldw	r2,-16(fp)
 201c79c:	10800e17 	ldw	r2,56(r2)
 201c7a0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201c7a4:	e0fff317 	ldw	r3,-52(fp)
 201c7a8:	e0bff417 	ldw	r2,-48(fp)
 201c7ac:	18800536 	bltu	r3,r2,201c7c4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201c7b0:	e0fff317 	ldw	r3,-52(fp)
 201c7b4:	e0bff417 	ldw	r2,-48(fp)
 201c7b8:	1885c83a 	sub	r2,r3,r2
 201c7bc:	e0bff115 	stw	r2,-60(fp)
 201c7c0:	00000406 	br	201c7d4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201c7c4:	00c20004 	movi	r3,2048
 201c7c8:	e0bff417 	ldw	r2,-48(fp)
 201c7cc:	1885c83a 	sub	r2,r3,r2
 201c7d0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201c7d4:	e0bff117 	ldw	r2,-60(fp)
 201c7d8:	10001e26 	beq	r2,zero,201c854 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201c7dc:	e0fffe17 	ldw	r3,-8(fp)
 201c7e0:	e0bff117 	ldw	r2,-60(fp)
 201c7e4:	1880022e 	bgeu	r3,r2,201c7f0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201c7e8:	e0bffe17 	ldw	r2,-8(fp)
 201c7ec:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201c7f0:	e0bffc17 	ldw	r2,-16(fp)
 201c7f4:	10c01104 	addi	r3,r2,68
 201c7f8:	e0bff417 	ldw	r2,-48(fp)
 201c7fc:	1885883a 	add	r2,r3,r2
 201c800:	e1bff117 	ldw	r6,-60(fp)
 201c804:	100b883a 	mov	r5,r2
 201c808:	e13ff017 	ldw	r4,-64(fp)
 201c80c:	200494c0 	call	200494c <memcpy>
      ptr   += n;
 201c810:	e0fff017 	ldw	r3,-64(fp)
 201c814:	e0bff117 	ldw	r2,-60(fp)
 201c818:	1885883a 	add	r2,r3,r2
 201c81c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201c820:	e0fffe17 	ldw	r3,-8(fp)
 201c824:	e0bff117 	ldw	r2,-60(fp)
 201c828:	1885c83a 	sub	r2,r3,r2
 201c82c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c830:	e0fff417 	ldw	r3,-48(fp)
 201c834:	e0bff117 	ldw	r2,-60(fp)
 201c838:	1885883a 	add	r2,r3,r2
 201c83c:	10c1ffcc 	andi	r3,r2,2047
 201c840:	e0bffc17 	ldw	r2,-16(fp)
 201c844:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201c848:	e0bffe17 	ldw	r2,-8(fp)
 201c84c:	00bfcf16 	blt	zero,r2,201c78c <altera_avalon_jtag_uart_read+0x54>
 201c850:	00000106 	br	201c858 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201c854:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201c858:	e0fff017 	ldw	r3,-64(fp)
 201c85c:	e0bffd17 	ldw	r2,-12(fp)
 201c860:	18802e1e 	bne	r3,r2,201c91c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201c864:	e0bfff17 	ldw	r2,-4(fp)
 201c868:	1090000c 	andi	r2,r2,16384
 201c86c:	10002d1e 	bne	r2,zero,201c924 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201c870:	d0a73243 	ldbu	r2,-25399(gp)
 201c874:	10803fcc 	andi	r2,r2,255
 201c878:	10800058 	cmpnei	r2,r2,1
 201c87c:	1000161e 	bne	r2,zero,201c8d8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201c880:	e0bffc17 	ldw	r2,-16(fp)
 201c884:	10800c17 	ldw	r2,48(r2)
 201c888:	e0bff215 	stw	r2,-56(fp)
 201c88c:	00800144 	movi	r2,5
 201c890:	e0bff98d 	sth	r2,-26(fp)
 201c894:	00bfe0c4 	movi	r2,-125
 201c898:	e0bffa05 	stb	r2,-24(fp)
 201c89c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201c8a0:	d0a73243 	ldbu	r2,-25399(gp)
 201c8a4:	10803fcc 	andi	r2,r2,255
 201c8a8:	10001526 	beq	r2,zero,201c900 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201c8ac:	e0fff98b 	ldhu	r3,-26(fp)
 201c8b0:	e13ffa03 	ldbu	r4,-24(fp)
 201c8b4:	e17ffa8b 	ldhu	r5,-22(fp)
 201c8b8:	e0bffb44 	addi	r2,fp,-19
 201c8bc:	d8800015 	stw	r2,0(sp)
 201c8c0:	280f883a 	mov	r7,r5
 201c8c4:	200d883a 	mov	r6,r4
 201c8c8:	180b883a 	mov	r5,r3
 201c8cc:	e13ff217 	ldw	r4,-56(fp)
 201c8d0:	20166a40 	call	20166a4 <OSFlagPend>
 201c8d4:	00000a06 	br	201c900 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201c8d8:	0001883a 	nop
 201c8dc:	e0bffc17 	ldw	r2,-16(fp)
 201c8e0:	10c00d17 	ldw	r3,52(r2)
 201c8e4:	e0bff317 	ldw	r2,-52(fp)
 201c8e8:	1880051e 	bne	r3,r2,201c900 <altera_avalon_jtag_uart_read+0x1c8>
 201c8ec:	e0bffc17 	ldw	r2,-16(fp)
 201c8f0:	10c00917 	ldw	r3,36(r2)
 201c8f4:	e0bffc17 	ldw	r2,-16(fp)
 201c8f8:	10800117 	ldw	r2,4(r2)
 201c8fc:	18bff736 	bltu	r3,r2,201c8dc <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201c900:	e0bffc17 	ldw	r2,-16(fp)
 201c904:	10c00d17 	ldw	r3,52(r2)
 201c908:	e0bff317 	ldw	r2,-52(fp)
 201c90c:	18800726 	beq	r3,r2,201c92c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201c910:	e0bffe17 	ldw	r2,-8(fp)
 201c914:	00bf9d16 	blt	zero,r2,201c78c <altera_avalon_jtag_uart_read+0x54>
 201c918:	00000506 	br	201c930 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201c91c:	0001883a 	nop
 201c920:	00000306 	br	201c930 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201c924:	0001883a 	nop
 201c928:	00000106 	br	201c930 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201c92c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201c930:	e0bffc17 	ldw	r2,-16(fp)
 201c934:	10800a17 	ldw	r2,40(r2)
 201c938:	1009883a 	mov	r4,r2
 201c93c:	2019f4c0 	call	2019f4c <OSSemPost>

  if (ptr != buffer)
 201c940:	e0fff017 	ldw	r3,-64(fp)
 201c944:	e0bffd17 	ldw	r2,-12(fp)
 201c948:	18801826 	beq	r3,r2,201c9ac <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c94c:	0005303a 	rdctl	r2,status
 201c950:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c954:	e0fff717 	ldw	r3,-36(fp)
 201c958:	00bfff84 	movi	r2,-2
 201c95c:	1884703a 	and	r2,r3,r2
 201c960:	1001703a 	wrctl	status,r2
  
  return context;
 201c964:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201c968:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c96c:	e0bffc17 	ldw	r2,-16(fp)
 201c970:	10800817 	ldw	r2,32(r2)
 201c974:	10c00054 	ori	r3,r2,1
 201c978:	e0bffc17 	ldw	r2,-16(fp)
 201c97c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201c980:	e0bffc17 	ldw	r2,-16(fp)
 201c984:	10800017 	ldw	r2,0(r2)
 201c988:	10800104 	addi	r2,r2,4
 201c98c:	1007883a 	mov	r3,r2
 201c990:	e0bffc17 	ldw	r2,-16(fp)
 201c994:	10800817 	ldw	r2,32(r2)
 201c998:	18800035 	stwio	r2,0(r3)
 201c99c:	e0bff617 	ldw	r2,-40(fp)
 201c9a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c9a4:	e0bff517 	ldw	r2,-44(fp)
 201c9a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201c9ac:	e0fff017 	ldw	r3,-64(fp)
 201c9b0:	e0bffd17 	ldw	r2,-12(fp)
 201c9b4:	18800426 	beq	r3,r2,201c9c8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201c9b8:	e0fff017 	ldw	r3,-64(fp)
 201c9bc:	e0bffd17 	ldw	r2,-12(fp)
 201c9c0:	1885c83a 	sub	r2,r3,r2
 201c9c4:	00000606 	br	201c9e0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201c9c8:	e0bfff17 	ldw	r2,-4(fp)
 201c9cc:	1090000c 	andi	r2,r2,16384
 201c9d0:	10000226 	beq	r2,zero,201c9dc <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201c9d4:	00bffd44 	movi	r2,-11
 201c9d8:	00000106 	br	201c9e0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201c9dc:	00bffec4 	movi	r2,-5
}
 201c9e0:	e037883a 	mov	sp,fp
 201c9e4:	dfc00117 	ldw	ra,4(sp)
 201c9e8:	df000017 	ldw	fp,0(sp)
 201c9ec:	dec00204 	addi	sp,sp,8
 201c9f0:	f800283a 	ret

0201c9f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201c9f4:	deffed04 	addi	sp,sp,-76
 201c9f8:	dfc01215 	stw	ra,72(sp)
 201c9fc:	df001115 	stw	fp,68(sp)
 201ca00:	df001104 	addi	fp,sp,68
 201ca04:	e13ffc15 	stw	r4,-16(fp)
 201ca08:	e17ffd15 	stw	r5,-12(fp)
 201ca0c:	e1bffe15 	stw	r6,-8(fp)
 201ca10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201ca14:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201ca18:	e0bffd17 	ldw	r2,-12(fp)
 201ca1c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201ca20:	e0bffc17 	ldw	r2,-16(fp)
 201ca24:	10800b17 	ldw	r2,44(r2)
 201ca28:	e0bff815 	stw	r2,-32(fp)
 201ca2c:	e03ff90d 	sth	zero,-28(fp)
 201ca30:	e0bff90b 	ldhu	r2,-28(fp)
 201ca34:	e0fffb44 	addi	r3,fp,-19
 201ca38:	180d883a 	mov	r6,r3
 201ca3c:	100b883a 	mov	r5,r2
 201ca40:	e13ff817 	ldw	r4,-32(fp)
 201ca44:	2019bd40 	call	2019bd4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201ca48:	00003706 	br	201cb28 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201ca4c:	e0bffc17 	ldw	r2,-16(fp)
 201ca50:	10800f17 	ldw	r2,60(r2)
 201ca54:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201ca58:	e0bffc17 	ldw	r2,-16(fp)
 201ca5c:	10801017 	ldw	r2,64(r2)
 201ca60:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 201ca64:	e0fff417 	ldw	r3,-48(fp)
 201ca68:	e0bff017 	ldw	r2,-64(fp)
 201ca6c:	1880062e 	bgeu	r3,r2,201ca88 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 201ca70:	e0fff017 	ldw	r3,-64(fp)
 201ca74:	e0bff417 	ldw	r2,-48(fp)
 201ca78:	1885c83a 	sub	r2,r3,r2
 201ca7c:	10bfffc4 	addi	r2,r2,-1
 201ca80:	e0bff115 	stw	r2,-60(fp)
 201ca84:	00000b06 	br	201cab4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 201ca88:	e0bff017 	ldw	r2,-64(fp)
 201ca8c:	10000526 	beq	r2,zero,201caa4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201ca90:	00c20004 	movi	r3,2048
 201ca94:	e0bff417 	ldw	r2,-48(fp)
 201ca98:	1885c83a 	sub	r2,r3,r2
 201ca9c:	e0bff115 	stw	r2,-60(fp)
 201caa0:	00000406 	br	201cab4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201caa4:	00c1ffc4 	movi	r3,2047
 201caa8:	e0bff417 	ldw	r2,-48(fp)
 201caac:	1885c83a 	sub	r2,r3,r2
 201cab0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201cab4:	e0bff117 	ldw	r2,-60(fp)
 201cab8:	10001e26 	beq	r2,zero,201cb34 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 201cabc:	e0fffe17 	ldw	r3,-8(fp)
 201cac0:	e0bff117 	ldw	r2,-60(fp)
 201cac4:	1880022e 	bgeu	r3,r2,201cad0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201cac8:	e0bffe17 	ldw	r2,-8(fp)
 201cacc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201cad0:	e0bffc17 	ldw	r2,-16(fp)
 201cad4:	10c21104 	addi	r3,r2,2116
 201cad8:	e0bff417 	ldw	r2,-48(fp)
 201cadc:	1885883a 	add	r2,r3,r2
 201cae0:	e1bff117 	ldw	r6,-60(fp)
 201cae4:	e17ffd17 	ldw	r5,-12(fp)
 201cae8:	1009883a 	mov	r4,r2
 201caec:	200494c0 	call	200494c <memcpy>
      ptr   += n;
 201caf0:	e0fffd17 	ldw	r3,-12(fp)
 201caf4:	e0bff117 	ldw	r2,-60(fp)
 201caf8:	1885883a 	add	r2,r3,r2
 201cafc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201cb00:	e0fffe17 	ldw	r3,-8(fp)
 201cb04:	e0bff117 	ldw	r2,-60(fp)
 201cb08:	1885c83a 	sub	r2,r3,r2
 201cb0c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201cb10:	e0fff417 	ldw	r3,-48(fp)
 201cb14:	e0bff117 	ldw	r2,-60(fp)
 201cb18:	1885883a 	add	r2,r3,r2
 201cb1c:	10c1ffcc 	andi	r3,r2,2047
 201cb20:	e0bffc17 	ldw	r2,-16(fp)
 201cb24:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201cb28:	e0bffe17 	ldw	r2,-8(fp)
 201cb2c:	00bfc716 	blt	zero,r2,201ca4c <altera_avalon_jtag_uart_write+0x58>
 201cb30:	00000106 	br	201cb38 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 201cb34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cb38:	0005303a 	rdctl	r2,status
 201cb3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cb40:	e0fff717 	ldw	r3,-36(fp)
 201cb44:	00bfff84 	movi	r2,-2
 201cb48:	1884703a 	and	r2,r3,r2
 201cb4c:	1001703a 	wrctl	status,r2
  
  return context;
 201cb50:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201cb54:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201cb58:	e0bffc17 	ldw	r2,-16(fp)
 201cb5c:	10800817 	ldw	r2,32(r2)
 201cb60:	10c00094 	ori	r3,r2,2
 201cb64:	e0bffc17 	ldw	r2,-16(fp)
 201cb68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201cb6c:	e0bffc17 	ldw	r2,-16(fp)
 201cb70:	10800017 	ldw	r2,0(r2)
 201cb74:	10800104 	addi	r2,r2,4
 201cb78:	1007883a 	mov	r3,r2
 201cb7c:	e0bffc17 	ldw	r2,-16(fp)
 201cb80:	10800817 	ldw	r2,32(r2)
 201cb84:	18800035 	stwio	r2,0(r3)
 201cb88:	e0bff617 	ldw	r2,-40(fp)
 201cb8c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cb90:	e0bff317 	ldw	r2,-52(fp)
 201cb94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201cb98:	e0bffe17 	ldw	r2,-8(fp)
 201cb9c:	00802a0e 	bge	zero,r2,201cc48 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 201cba0:	e0bfff17 	ldw	r2,-4(fp)
 201cba4:	1090000c 	andi	r2,r2,16384
 201cba8:	10002a1e 	bne	r2,zero,201cc54 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201cbac:	d0a73243 	ldbu	r2,-25399(gp)
 201cbb0:	10803fcc 	andi	r2,r2,255
 201cbb4:	10800058 	cmpnei	r2,r2,1
 201cbb8:	1000161e 	bne	r2,zero,201cc14 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201cbbc:	e0bffc17 	ldw	r2,-16(fp)
 201cbc0:	10800c17 	ldw	r2,48(r2)
 201cbc4:	e0bff515 	stw	r2,-44(fp)
 201cbc8:	00800184 	movi	r2,6
 201cbcc:	e0bff98d 	sth	r2,-26(fp)
 201cbd0:	00bfe0c4 	movi	r2,-125
 201cbd4:	e0bffa05 	stb	r2,-24(fp)
 201cbd8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201cbdc:	d0a73243 	ldbu	r2,-25399(gp)
 201cbe0:	10803fcc 	andi	r2,r2,255
 201cbe4:	10001526 	beq	r2,zero,201cc3c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201cbe8:	e0fff98b 	ldhu	r3,-26(fp)
 201cbec:	e13ffa03 	ldbu	r4,-24(fp)
 201cbf0:	e17ffa8b 	ldhu	r5,-22(fp)
 201cbf4:	e0bffb04 	addi	r2,fp,-20
 201cbf8:	d8800015 	stw	r2,0(sp)
 201cbfc:	280f883a 	mov	r7,r5
 201cc00:	200d883a 	mov	r6,r4
 201cc04:	180b883a 	mov	r5,r3
 201cc08:	e13ff517 	ldw	r4,-44(fp)
 201cc0c:	20166a40 	call	20166a4 <OSFlagPend>
 201cc10:	00000a06 	br	201cc3c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201cc14:	0001883a 	nop
 201cc18:	e0bffc17 	ldw	r2,-16(fp)
 201cc1c:	10c01017 	ldw	r3,64(r2)
 201cc20:	e0bff017 	ldw	r2,-64(fp)
 201cc24:	1880051e 	bne	r3,r2,201cc3c <altera_avalon_jtag_uart_write+0x248>
 201cc28:	e0bffc17 	ldw	r2,-16(fp)
 201cc2c:	10c00917 	ldw	r3,36(r2)
 201cc30:	e0bffc17 	ldw	r2,-16(fp)
 201cc34:	10800117 	ldw	r2,4(r2)
 201cc38:	18bff736 	bltu	r3,r2,201cc18 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 201cc3c:	e0bffc17 	ldw	r2,-16(fp)
 201cc40:	10800917 	ldw	r2,36(r2)
 201cc44:	1000051e 	bne	r2,zero,201cc5c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201cc48:	e0bffe17 	ldw	r2,-8(fp)
 201cc4c:	00bfb616 	blt	zero,r2,201cb28 <altera_avalon_jtag_uart_write+0x134>
 201cc50:	00000306 	br	201cc60 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201cc54:	0001883a 	nop
 201cc58:	00000106 	br	201cc60 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 201cc5c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201cc60:	e0bffc17 	ldw	r2,-16(fp)
 201cc64:	10800b17 	ldw	r2,44(r2)
 201cc68:	1009883a 	mov	r4,r2
 201cc6c:	2019f4c0 	call	2019f4c <OSSemPost>

  if (ptr != start)
 201cc70:	e0fffd17 	ldw	r3,-12(fp)
 201cc74:	e0bff217 	ldw	r2,-56(fp)
 201cc78:	18800426 	beq	r3,r2,201cc8c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 201cc7c:	e0fffd17 	ldw	r3,-12(fp)
 201cc80:	e0bff217 	ldw	r2,-56(fp)
 201cc84:	1885c83a 	sub	r2,r3,r2
 201cc88:	00000606 	br	201cca4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 201cc8c:	e0bfff17 	ldw	r2,-4(fp)
 201cc90:	1090000c 	andi	r2,r2,16384
 201cc94:	10000226 	beq	r2,zero,201cca0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 201cc98:	00bffd44 	movi	r2,-11
 201cc9c:	00000106 	br	201cca4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201cca0:	00bffec4 	movi	r2,-5
}
 201cca4:	e037883a 	mov	sp,fp
 201cca8:	dfc00117 	ldw	ra,4(sp)
 201ccac:	df000017 	ldw	fp,0(sp)
 201ccb0:	dec00204 	addi	sp,sp,8
 201ccb4:	f800283a 	ret

0201ccb8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201ccb8:	defffa04 	addi	sp,sp,-24
 201ccbc:	dfc00515 	stw	ra,20(sp)
 201ccc0:	df000415 	stw	fp,16(sp)
 201ccc4:	df000404 	addi	fp,sp,16
 201ccc8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201cccc:	0007883a 	mov	r3,zero
 201ccd0:	e0bfff17 	ldw	r2,-4(fp)
 201ccd4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201ccd8:	e0bfff17 	ldw	r2,-4(fp)
 201ccdc:	10800104 	addi	r2,r2,4
 201cce0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cce4:	0005303a 	rdctl	r2,status
 201cce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ccec:	e0fffd17 	ldw	r3,-12(fp)
 201ccf0:	00bfff84 	movi	r2,-2
 201ccf4:	1884703a 	and	r2,r3,r2
 201ccf8:	1001703a 	wrctl	status,r2
  
  return context;
 201ccfc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201cd00:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201cd04:	201d7c40 	call	201d7c4 <alt_tick>
 201cd08:	e0bffc17 	ldw	r2,-16(fp)
 201cd0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cd10:	e0bffe17 	ldw	r2,-8(fp)
 201cd14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201cd18:	0001883a 	nop
 201cd1c:	e037883a 	mov	sp,fp
 201cd20:	dfc00117 	ldw	ra,4(sp)
 201cd24:	df000017 	ldw	fp,0(sp)
 201cd28:	dec00204 	addi	sp,sp,8
 201cd2c:	f800283a 	ret

0201cd30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201cd30:	defff804 	addi	sp,sp,-32
 201cd34:	dfc00715 	stw	ra,28(sp)
 201cd38:	df000615 	stw	fp,24(sp)
 201cd3c:	df000604 	addi	fp,sp,24
 201cd40:	e13ffc15 	stw	r4,-16(fp)
 201cd44:	e17ffd15 	stw	r5,-12(fp)
 201cd48:	e1bffe15 	stw	r6,-8(fp)
 201cd4c:	e1ffff15 	stw	r7,-4(fp)
 201cd50:	e0bfff17 	ldw	r2,-4(fp)
 201cd54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201cd58:	d0a74717 	ldw	r2,-25316(gp)
 201cd5c:	1000021e 	bne	r2,zero,201cd68 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 201cd60:	e0bffb17 	ldw	r2,-20(fp)
 201cd64:	d0a74715 	stw	r2,-25316(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201cd68:	e0bffc17 	ldw	r2,-16(fp)
 201cd6c:	10800104 	addi	r2,r2,4
 201cd70:	00c001c4 	movi	r3,7
 201cd74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201cd78:	d8000015 	stw	zero,0(sp)
 201cd7c:	e1fffc17 	ldw	r7,-16(fp)
 201cd80:	018080b4 	movhi	r6,514
 201cd84:	31b32e04 	addi	r6,r6,-13128
 201cd88:	e17ffe17 	ldw	r5,-8(fp)
 201cd8c:	e13ffd17 	ldw	r4,-12(fp)
 201cd90:	201d0f40 	call	201d0f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 201cd94:	0001883a 	nop
 201cd98:	e037883a 	mov	sp,fp
 201cd9c:	dfc00117 	ldw	ra,4(sp)
 201cda0:	df000017 	ldw	fp,0(sp)
 201cda4:	dec00204 	addi	sp,sp,8
 201cda8:	f800283a 	ret

0201cdac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201cdac:	defff504 	addi	sp,sp,-44
 201cdb0:	df000a15 	stw	fp,40(sp)
 201cdb4:	df000a04 	addi	fp,sp,40
 201cdb8:	e13ffc15 	stw	r4,-16(fp)
 201cdbc:	e17ffd15 	stw	r5,-12(fp)
 201cdc0:	e1bffe15 	stw	r6,-8(fp)
 201cdc4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201cdc8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201cdcc:	d0a74717 	ldw	r2,-25316(gp)
  
  if (alt_ticks_per_second ())
 201cdd0:	10003c26 	beq	r2,zero,201cec4 <alt_alarm_start+0x118>
  {
    if (alarm)
 201cdd4:	e0bffc17 	ldw	r2,-16(fp)
 201cdd8:	10003826 	beq	r2,zero,201cebc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201cddc:	e0bffc17 	ldw	r2,-16(fp)
 201cde0:	e0fffe17 	ldw	r3,-8(fp)
 201cde4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201cde8:	e0bffc17 	ldw	r2,-16(fp)
 201cdec:	e0ffff17 	ldw	r3,-4(fp)
 201cdf0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cdf4:	0005303a 	rdctl	r2,status
 201cdf8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cdfc:	e0fff917 	ldw	r3,-28(fp)
 201ce00:	00bfff84 	movi	r2,-2
 201ce04:	1884703a 	and	r2,r3,r2
 201ce08:	1001703a 	wrctl	status,r2
  
  return context;
 201ce0c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 201ce10:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201ce14:	d0a74817 	ldw	r2,-25312(gp)
      
      current_nticks = alt_nticks();
 201ce18:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201ce1c:	e0fffd17 	ldw	r3,-12(fp)
 201ce20:	e0bff617 	ldw	r2,-40(fp)
 201ce24:	1885883a 	add	r2,r3,r2
 201ce28:	10c00044 	addi	r3,r2,1
 201ce2c:	e0bffc17 	ldw	r2,-16(fp)
 201ce30:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201ce34:	e0bffc17 	ldw	r2,-16(fp)
 201ce38:	10c00217 	ldw	r3,8(r2)
 201ce3c:	e0bff617 	ldw	r2,-40(fp)
 201ce40:	1880042e 	bgeu	r3,r2,201ce54 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 201ce44:	e0bffc17 	ldw	r2,-16(fp)
 201ce48:	00c00044 	movi	r3,1
 201ce4c:	10c00405 	stb	r3,16(r2)
 201ce50:	00000206 	br	201ce5c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 201ce54:	e0bffc17 	ldw	r2,-16(fp)
 201ce58:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201ce5c:	e0bffc17 	ldw	r2,-16(fp)
 201ce60:	d0e02d04 	addi	r3,gp,-32588
 201ce64:	e0fffa15 	stw	r3,-24(fp)
 201ce68:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201ce6c:	e0bffb17 	ldw	r2,-20(fp)
 201ce70:	e0fffa17 	ldw	r3,-24(fp)
 201ce74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201ce78:	e0bffa17 	ldw	r2,-24(fp)
 201ce7c:	10c00017 	ldw	r3,0(r2)
 201ce80:	e0bffb17 	ldw	r2,-20(fp)
 201ce84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201ce88:	e0bffa17 	ldw	r2,-24(fp)
 201ce8c:	10800017 	ldw	r2,0(r2)
 201ce90:	e0fffb17 	ldw	r3,-20(fp)
 201ce94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201ce98:	e0bffa17 	ldw	r2,-24(fp)
 201ce9c:	e0fffb17 	ldw	r3,-20(fp)
 201cea0:	10c00015 	stw	r3,0(r2)
 201cea4:	e0bff817 	ldw	r2,-32(fp)
 201cea8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ceac:	e0bff717 	ldw	r2,-36(fp)
 201ceb0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201ceb4:	0005883a 	mov	r2,zero
 201ceb8:	00000306 	br	201cec8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 201cebc:	00bffa84 	movi	r2,-22
 201cec0:	00000106 	br	201cec8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 201cec4:	00bfde84 	movi	r2,-134
  }
}
 201cec8:	e037883a 	mov	sp,fp
 201cecc:	df000017 	ldw	fp,0(sp)
 201ced0:	dec00104 	addi	sp,sp,4
 201ced4:	f800283a 	ret

0201ced8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201ced8:	defffe04 	addi	sp,sp,-8
 201cedc:	df000115 	stw	fp,4(sp)
 201cee0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201cee4:	e03fff15 	stw	zero,-4(fp)
 201cee8:	00000506 	br	201cf00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 201ceec:	e0bfff17 	ldw	r2,-4(fp)
 201cef0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201cef4:	e0bfff17 	ldw	r2,-4(fp)
 201cef8:	10800804 	addi	r2,r2,32
 201cefc:	e0bfff15 	stw	r2,-4(fp)
 201cf00:	e0bfff17 	ldw	r2,-4(fp)
 201cf04:	10820030 	cmpltui	r2,r2,2048
 201cf08:	103ff81e 	bne	r2,zero,201ceec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201cf0c:	0001883a 	nop
 201cf10:	e037883a 	mov	sp,fp
 201cf14:	df000017 	ldw	fp,0(sp)
 201cf18:	dec00104 	addi	sp,sp,4
 201cf1c:	f800283a 	ret

0201cf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201cf20:	defffe04 	addi	sp,sp,-8
 201cf24:	dfc00115 	stw	ra,4(sp)
 201cf28:	df000015 	stw	fp,0(sp)
 201cf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201cf30:	d0a00b17 	ldw	r2,-32724(gp)
 201cf34:	10000326 	beq	r2,zero,201cf44 <alt_get_errno+0x24>
 201cf38:	d0a00b17 	ldw	r2,-32724(gp)
 201cf3c:	103ee83a 	callr	r2
 201cf40:	00000106 	br	201cf48 <alt_get_errno+0x28>
 201cf44:	d0a72904 	addi	r2,gp,-25436
}
 201cf48:	e037883a 	mov	sp,fp
 201cf4c:	dfc00117 	ldw	ra,4(sp)
 201cf50:	df000017 	ldw	fp,0(sp)
 201cf54:	dec00204 	addi	sp,sp,8
 201cf58:	f800283a 	ret

0201cf5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201cf5c:	defffa04 	addi	sp,sp,-24
 201cf60:	dfc00515 	stw	ra,20(sp)
 201cf64:	df000415 	stw	fp,16(sp)
 201cf68:	df000404 	addi	fp,sp,16
 201cf6c:	e13ffe15 	stw	r4,-8(fp)
 201cf70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201cf74:	e0bffe17 	ldw	r2,-8(fp)
 201cf78:	10000326 	beq	r2,zero,201cf88 <alt_dev_llist_insert+0x2c>
 201cf7c:	e0bffe17 	ldw	r2,-8(fp)
 201cf80:	10800217 	ldw	r2,8(r2)
 201cf84:	1000061e 	bne	r2,zero,201cfa0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201cf88:	201cf200 	call	201cf20 <alt_get_errno>
 201cf8c:	1007883a 	mov	r3,r2
 201cf90:	00800584 	movi	r2,22
 201cf94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201cf98:	00bffa84 	movi	r2,-22
 201cf9c:	00001306 	br	201cfec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201cfa0:	e0bffe17 	ldw	r2,-8(fp)
 201cfa4:	e0ffff17 	ldw	r3,-4(fp)
 201cfa8:	e0fffc15 	stw	r3,-16(fp)
 201cfac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201cfb0:	e0bffd17 	ldw	r2,-12(fp)
 201cfb4:	e0fffc17 	ldw	r3,-16(fp)
 201cfb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201cfbc:	e0bffc17 	ldw	r2,-16(fp)
 201cfc0:	10c00017 	ldw	r3,0(r2)
 201cfc4:	e0bffd17 	ldw	r2,-12(fp)
 201cfc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201cfcc:	e0bffc17 	ldw	r2,-16(fp)
 201cfd0:	10800017 	ldw	r2,0(r2)
 201cfd4:	e0fffd17 	ldw	r3,-12(fp)
 201cfd8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201cfdc:	e0bffc17 	ldw	r2,-16(fp)
 201cfe0:	e0fffd17 	ldw	r3,-12(fp)
 201cfe4:	10c00015 	stw	r3,0(r2)

  return 0;  
 201cfe8:	0005883a 	mov	r2,zero
}
 201cfec:	e037883a 	mov	sp,fp
 201cff0:	dfc00117 	ldw	ra,4(sp)
 201cff4:	df000017 	ldw	fp,0(sp)
 201cff8:	dec00204 	addi	sp,sp,8
 201cffc:	f800283a 	ret

0201d000 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201d000:	defffd04 	addi	sp,sp,-12
 201d004:	dfc00215 	stw	ra,8(sp)
 201d008:	df000115 	stw	fp,4(sp)
 201d00c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d010:	008080b4 	movhi	r2,514
 201d014:	10b94b04 	addi	r2,r2,-6868
 201d018:	e0bfff15 	stw	r2,-4(fp)
 201d01c:	00000606 	br	201d038 <_do_ctors+0x38>
        (*ctor) (); 
 201d020:	e0bfff17 	ldw	r2,-4(fp)
 201d024:	10800017 	ldw	r2,0(r2)
 201d028:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d02c:	e0bfff17 	ldw	r2,-4(fp)
 201d030:	10bfff04 	addi	r2,r2,-4
 201d034:	e0bfff15 	stw	r2,-4(fp)
 201d038:	e0ffff17 	ldw	r3,-4(fp)
 201d03c:	008080b4 	movhi	r2,514
 201d040:	10b94c04 	addi	r2,r2,-6864
 201d044:	18bff62e 	bgeu	r3,r2,201d020 <_do_ctors+0x20>
        (*ctor) (); 
}
 201d048:	0001883a 	nop
 201d04c:	e037883a 	mov	sp,fp
 201d050:	dfc00117 	ldw	ra,4(sp)
 201d054:	df000017 	ldw	fp,0(sp)
 201d058:	dec00204 	addi	sp,sp,8
 201d05c:	f800283a 	ret

0201d060 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201d060:	defffd04 	addi	sp,sp,-12
 201d064:	dfc00215 	stw	ra,8(sp)
 201d068:	df000115 	stw	fp,4(sp)
 201d06c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d070:	008080b4 	movhi	r2,514
 201d074:	10b94b04 	addi	r2,r2,-6868
 201d078:	e0bfff15 	stw	r2,-4(fp)
 201d07c:	00000606 	br	201d098 <_do_dtors+0x38>
        (*dtor) (); 
 201d080:	e0bfff17 	ldw	r2,-4(fp)
 201d084:	10800017 	ldw	r2,0(r2)
 201d088:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d08c:	e0bfff17 	ldw	r2,-4(fp)
 201d090:	10bfff04 	addi	r2,r2,-4
 201d094:	e0bfff15 	stw	r2,-4(fp)
 201d098:	e0ffff17 	ldw	r3,-4(fp)
 201d09c:	008080b4 	movhi	r2,514
 201d0a0:	10b94c04 	addi	r2,r2,-6864
 201d0a4:	18bff62e 	bgeu	r3,r2,201d080 <_do_dtors+0x20>
        (*dtor) (); 
}
 201d0a8:	0001883a 	nop
 201d0ac:	e037883a 	mov	sp,fp
 201d0b0:	dfc00117 	ldw	ra,4(sp)
 201d0b4:	df000017 	ldw	fp,0(sp)
 201d0b8:	dec00204 	addi	sp,sp,8
 201d0bc:	f800283a 	ret

0201d0c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201d0c0:	defffe04 	addi	sp,sp,-8
 201d0c4:	dfc00115 	stw	ra,4(sp)
 201d0c8:	df000015 	stw	fp,0(sp)
 201d0cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 201d0d0:	01440004 	movi	r5,4096
 201d0d4:	0009883a 	mov	r4,zero
 201d0d8:	201debc0 	call	201debc <alt_icache_flush>
#endif
}
 201d0dc:	0001883a 	nop
 201d0e0:	e037883a 	mov	sp,fp
 201d0e4:	dfc00117 	ldw	ra,4(sp)
 201d0e8:	df000017 	ldw	fp,0(sp)
 201d0ec:	dec00204 	addi	sp,sp,8
 201d0f0:	f800283a 	ret

0201d0f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d0f4:	defff904 	addi	sp,sp,-28
 201d0f8:	dfc00615 	stw	ra,24(sp)
 201d0fc:	df000515 	stw	fp,20(sp)
 201d100:	df000504 	addi	fp,sp,20
 201d104:	e13ffc15 	stw	r4,-16(fp)
 201d108:	e17ffd15 	stw	r5,-12(fp)
 201d10c:	e1bffe15 	stw	r6,-8(fp)
 201d110:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201d114:	e0800217 	ldw	r2,8(fp)
 201d118:	d8800015 	stw	r2,0(sp)
 201d11c:	e1ffff17 	ldw	r7,-4(fp)
 201d120:	e1bffe17 	ldw	r6,-8(fp)
 201d124:	e17ffd17 	ldw	r5,-12(fp)
 201d128:	e13ffc17 	ldw	r4,-16(fp)
 201d12c:	201d2a40 	call	201d2a4 <alt_iic_isr_register>
}  
 201d130:	e037883a 	mov	sp,fp
 201d134:	dfc00117 	ldw	ra,4(sp)
 201d138:	df000017 	ldw	fp,0(sp)
 201d13c:	dec00204 	addi	sp,sp,8
 201d140:	f800283a 	ret

0201d144 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201d144:	defff904 	addi	sp,sp,-28
 201d148:	df000615 	stw	fp,24(sp)
 201d14c:	df000604 	addi	fp,sp,24
 201d150:	e13ffe15 	stw	r4,-8(fp)
 201d154:	e17fff15 	stw	r5,-4(fp)
 201d158:	e0bfff17 	ldw	r2,-4(fp)
 201d15c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d160:	0005303a 	rdctl	r2,status
 201d164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d168:	e0fffb17 	ldw	r3,-20(fp)
 201d16c:	00bfff84 	movi	r2,-2
 201d170:	1884703a 	and	r2,r3,r2
 201d174:	1001703a 	wrctl	status,r2
  
  return context;
 201d178:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d17c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201d180:	00c00044 	movi	r3,1
 201d184:	e0bffa17 	ldw	r2,-24(fp)
 201d188:	1884983a 	sll	r2,r3,r2
 201d18c:	1007883a 	mov	r3,r2
 201d190:	d0a74617 	ldw	r2,-25320(gp)
 201d194:	1884b03a 	or	r2,r3,r2
 201d198:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d19c:	d0a74617 	ldw	r2,-25320(gp)
 201d1a0:	100170fa 	wrctl	ienable,r2
 201d1a4:	e0bffc17 	ldw	r2,-16(fp)
 201d1a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d1ac:	e0bffd17 	ldw	r2,-12(fp)
 201d1b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d1b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201d1b8:	0001883a 	nop
}
 201d1bc:	e037883a 	mov	sp,fp
 201d1c0:	df000017 	ldw	fp,0(sp)
 201d1c4:	dec00104 	addi	sp,sp,4
 201d1c8:	f800283a 	ret

0201d1cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201d1cc:	defff904 	addi	sp,sp,-28
 201d1d0:	df000615 	stw	fp,24(sp)
 201d1d4:	df000604 	addi	fp,sp,24
 201d1d8:	e13ffe15 	stw	r4,-8(fp)
 201d1dc:	e17fff15 	stw	r5,-4(fp)
 201d1e0:	e0bfff17 	ldw	r2,-4(fp)
 201d1e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d1e8:	0005303a 	rdctl	r2,status
 201d1ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d1f0:	e0fffb17 	ldw	r3,-20(fp)
 201d1f4:	00bfff84 	movi	r2,-2
 201d1f8:	1884703a 	and	r2,r3,r2
 201d1fc:	1001703a 	wrctl	status,r2
  
  return context;
 201d200:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d204:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201d208:	00c00044 	movi	r3,1
 201d20c:	e0bffa17 	ldw	r2,-24(fp)
 201d210:	1884983a 	sll	r2,r3,r2
 201d214:	0084303a 	nor	r2,zero,r2
 201d218:	1007883a 	mov	r3,r2
 201d21c:	d0a74617 	ldw	r2,-25320(gp)
 201d220:	1884703a 	and	r2,r3,r2
 201d224:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d228:	d0a74617 	ldw	r2,-25320(gp)
 201d22c:	100170fa 	wrctl	ienable,r2
 201d230:	e0bffc17 	ldw	r2,-16(fp)
 201d234:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d238:	e0bffd17 	ldw	r2,-12(fp)
 201d23c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d240:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201d244:	0001883a 	nop
}
 201d248:	e037883a 	mov	sp,fp
 201d24c:	df000017 	ldw	fp,0(sp)
 201d250:	dec00104 	addi	sp,sp,4
 201d254:	f800283a 	ret

0201d258 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201d258:	defffc04 	addi	sp,sp,-16
 201d25c:	df000315 	stw	fp,12(sp)
 201d260:	df000304 	addi	fp,sp,12
 201d264:	e13ffe15 	stw	r4,-8(fp)
 201d268:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201d26c:	000530fa 	rdctl	r2,ienable
 201d270:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201d274:	00c00044 	movi	r3,1
 201d278:	e0bfff17 	ldw	r2,-4(fp)
 201d27c:	1884983a 	sll	r2,r3,r2
 201d280:	1007883a 	mov	r3,r2
 201d284:	e0bffd17 	ldw	r2,-12(fp)
 201d288:	1884703a 	and	r2,r3,r2
 201d28c:	1004c03a 	cmpne	r2,r2,zero
 201d290:	10803fcc 	andi	r2,r2,255
}
 201d294:	e037883a 	mov	sp,fp
 201d298:	df000017 	ldw	fp,0(sp)
 201d29c:	dec00104 	addi	sp,sp,4
 201d2a0:	f800283a 	ret

0201d2a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d2a4:	defff504 	addi	sp,sp,-44
 201d2a8:	dfc00a15 	stw	ra,40(sp)
 201d2ac:	df000915 	stw	fp,36(sp)
 201d2b0:	df000904 	addi	fp,sp,36
 201d2b4:	e13ffc15 	stw	r4,-16(fp)
 201d2b8:	e17ffd15 	stw	r5,-12(fp)
 201d2bc:	e1bffe15 	stw	r6,-8(fp)
 201d2c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201d2c4:	00bffa84 	movi	r2,-22
 201d2c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201d2cc:	e0bffd17 	ldw	r2,-12(fp)
 201d2d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201d2d4:	e0bff817 	ldw	r2,-32(fp)
 201d2d8:	10800808 	cmpgei	r2,r2,32
 201d2dc:	1000271e 	bne	r2,zero,201d37c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d2e0:	0005303a 	rdctl	r2,status
 201d2e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d2e8:	e0fffb17 	ldw	r3,-20(fp)
 201d2ec:	00bfff84 	movi	r2,-2
 201d2f0:	1884703a 	and	r2,r3,r2
 201d2f4:	1001703a 	wrctl	status,r2
  
  return context;
 201d2f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201d2fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 201d300:	008080f4 	movhi	r2,515
 201d304:	10ad7e04 	addi	r2,r2,-18952
 201d308:	e0fff817 	ldw	r3,-32(fp)
 201d30c:	180690fa 	slli	r3,r3,3
 201d310:	10c5883a 	add	r2,r2,r3
 201d314:	e0fffe17 	ldw	r3,-8(fp)
 201d318:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201d31c:	008080f4 	movhi	r2,515
 201d320:	10ad7e04 	addi	r2,r2,-18952
 201d324:	e0fff817 	ldw	r3,-32(fp)
 201d328:	180690fa 	slli	r3,r3,3
 201d32c:	10c5883a 	add	r2,r2,r3
 201d330:	10800104 	addi	r2,r2,4
 201d334:	e0ffff17 	ldw	r3,-4(fp)
 201d338:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201d33c:	e0bffe17 	ldw	r2,-8(fp)
 201d340:	10000526 	beq	r2,zero,201d358 <alt_iic_isr_register+0xb4>
 201d344:	e0bff817 	ldw	r2,-32(fp)
 201d348:	100b883a 	mov	r5,r2
 201d34c:	e13ffc17 	ldw	r4,-16(fp)
 201d350:	201d1440 	call	201d144 <alt_ic_irq_enable>
 201d354:	00000406 	br	201d368 <alt_iic_isr_register+0xc4>
 201d358:	e0bff817 	ldw	r2,-32(fp)
 201d35c:	100b883a 	mov	r5,r2
 201d360:	e13ffc17 	ldw	r4,-16(fp)
 201d364:	201d1cc0 	call	201d1cc <alt_ic_irq_disable>
 201d368:	e0bff715 	stw	r2,-36(fp)
 201d36c:	e0bffa17 	ldw	r2,-24(fp)
 201d370:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d374:	e0bff917 	ldw	r2,-28(fp)
 201d378:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201d37c:	e0bff717 	ldw	r2,-36(fp)
}
 201d380:	e037883a 	mov	sp,fp
 201d384:	dfc00117 	ldw	ra,4(sp)
 201d388:	df000017 	ldw	fp,0(sp)
 201d38c:	dec00204 	addi	sp,sp,8
 201d390:	f800283a 	ret

0201d394 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201d394:	defff904 	addi	sp,sp,-28
 201d398:	dfc00615 	stw	ra,24(sp)
 201d39c:	df000515 	stw	fp,20(sp)
 201d3a0:	df000504 	addi	fp,sp,20
 201d3a4:	e13ffc15 	stw	r4,-16(fp)
 201d3a8:	e17ffd15 	stw	r5,-12(fp)
 201d3ac:	e1bffe15 	stw	r6,-8(fp)
 201d3b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201d3b4:	e1bfff17 	ldw	r6,-4(fp)
 201d3b8:	e17ffe17 	ldw	r5,-8(fp)
 201d3bc:	e13ffd17 	ldw	r4,-12(fp)
 201d3c0:	201d5d40 	call	201d5d4 <open>
 201d3c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201d3c8:	e0bffb17 	ldw	r2,-20(fp)
 201d3cc:	10001c16 	blt	r2,zero,201d440 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 201d3d0:	008080b4 	movhi	r2,514
 201d3d4:	10bd2504 	addi	r2,r2,-2924
 201d3d8:	e0fffb17 	ldw	r3,-20(fp)
 201d3dc:	18c00324 	muli	r3,r3,12
 201d3e0:	10c5883a 	add	r2,r2,r3
 201d3e4:	10c00017 	ldw	r3,0(r2)
 201d3e8:	e0bffc17 	ldw	r2,-16(fp)
 201d3ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201d3f0:	008080b4 	movhi	r2,514
 201d3f4:	10bd2504 	addi	r2,r2,-2924
 201d3f8:	e0fffb17 	ldw	r3,-20(fp)
 201d3fc:	18c00324 	muli	r3,r3,12
 201d400:	10c5883a 	add	r2,r2,r3
 201d404:	10800104 	addi	r2,r2,4
 201d408:	10c00017 	ldw	r3,0(r2)
 201d40c:	e0bffc17 	ldw	r2,-16(fp)
 201d410:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201d414:	008080b4 	movhi	r2,514
 201d418:	10bd2504 	addi	r2,r2,-2924
 201d41c:	e0fffb17 	ldw	r3,-20(fp)
 201d420:	18c00324 	muli	r3,r3,12
 201d424:	10c5883a 	add	r2,r2,r3
 201d428:	10800204 	addi	r2,r2,8
 201d42c:	10c00017 	ldw	r3,0(r2)
 201d430:	e0bffc17 	ldw	r2,-16(fp)
 201d434:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201d438:	e13ffb17 	ldw	r4,-20(fp)
 201d43c:	20136dc0 	call	20136dc <alt_release_fd>
  }
} 
 201d440:	0001883a 	nop
 201d444:	e037883a 	mov	sp,fp
 201d448:	dfc00117 	ldw	ra,4(sp)
 201d44c:	df000017 	ldw	fp,0(sp)
 201d450:	dec00204 	addi	sp,sp,8
 201d454:	f800283a 	ret

0201d458 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201d458:	defffb04 	addi	sp,sp,-20
 201d45c:	dfc00415 	stw	ra,16(sp)
 201d460:	df000315 	stw	fp,12(sp)
 201d464:	df000304 	addi	fp,sp,12
 201d468:	e13ffd15 	stw	r4,-12(fp)
 201d46c:	e17ffe15 	stw	r5,-8(fp)
 201d470:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201d474:	01c07fc4 	movi	r7,511
 201d478:	01800044 	movi	r6,1
 201d47c:	e17ffd17 	ldw	r5,-12(fp)
 201d480:	010080b4 	movhi	r4,514
 201d484:	213d2804 	addi	r4,r4,-2912
 201d488:	201d3940 	call	201d394 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201d48c:	01c07fc4 	movi	r7,511
 201d490:	000d883a 	mov	r6,zero
 201d494:	e17ffe17 	ldw	r5,-8(fp)
 201d498:	010080b4 	movhi	r4,514
 201d49c:	213d2504 	addi	r4,r4,-2924
 201d4a0:	201d3940 	call	201d394 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201d4a4:	01c07fc4 	movi	r7,511
 201d4a8:	01800044 	movi	r6,1
 201d4ac:	e17fff17 	ldw	r5,-4(fp)
 201d4b0:	010080b4 	movhi	r4,514
 201d4b4:	213d2b04 	addi	r4,r4,-2900
 201d4b8:	201d3940 	call	201d394 <alt_open_fd>
}  
 201d4bc:	0001883a 	nop
 201d4c0:	e037883a 	mov	sp,fp
 201d4c4:	dfc00117 	ldw	ra,4(sp)
 201d4c8:	df000017 	ldw	fp,0(sp)
 201d4cc:	dec00204 	addi	sp,sp,8
 201d4d0:	f800283a 	ret

0201d4d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201d4d4:	defffe04 	addi	sp,sp,-8
 201d4d8:	dfc00115 	stw	ra,4(sp)
 201d4dc:	df000015 	stw	fp,0(sp)
 201d4e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201d4e4:	d0a00b17 	ldw	r2,-32724(gp)
 201d4e8:	10000326 	beq	r2,zero,201d4f8 <alt_get_errno+0x24>
 201d4ec:	d0a00b17 	ldw	r2,-32724(gp)
 201d4f0:	103ee83a 	callr	r2
 201d4f4:	00000106 	br	201d4fc <alt_get_errno+0x28>
 201d4f8:	d0a72904 	addi	r2,gp,-25436
}
 201d4fc:	e037883a 	mov	sp,fp
 201d500:	dfc00117 	ldw	ra,4(sp)
 201d504:	df000017 	ldw	fp,0(sp)
 201d508:	dec00204 	addi	sp,sp,8
 201d50c:	f800283a 	ret

0201d510 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201d510:	defffd04 	addi	sp,sp,-12
 201d514:	df000215 	stw	fp,8(sp)
 201d518:	df000204 	addi	fp,sp,8
 201d51c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201d520:	e0bfff17 	ldw	r2,-4(fp)
 201d524:	10800217 	ldw	r2,8(r2)
 201d528:	10d00034 	orhi	r3,r2,16384
 201d52c:	e0bfff17 	ldw	r2,-4(fp)
 201d530:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d534:	e03ffe15 	stw	zero,-8(fp)
 201d538:	00001d06 	br	201d5b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d53c:	008080b4 	movhi	r2,514
 201d540:	10bd2504 	addi	r2,r2,-2924
 201d544:	e0fffe17 	ldw	r3,-8(fp)
 201d548:	18c00324 	muli	r3,r3,12
 201d54c:	10c5883a 	add	r2,r2,r3
 201d550:	10c00017 	ldw	r3,0(r2)
 201d554:	e0bfff17 	ldw	r2,-4(fp)
 201d558:	10800017 	ldw	r2,0(r2)
 201d55c:	1880111e 	bne	r3,r2,201d5a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d560:	008080b4 	movhi	r2,514
 201d564:	10bd2504 	addi	r2,r2,-2924
 201d568:	e0fffe17 	ldw	r3,-8(fp)
 201d56c:	18c00324 	muli	r3,r3,12
 201d570:	10c5883a 	add	r2,r2,r3
 201d574:	10800204 	addi	r2,r2,8
 201d578:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d57c:	1000090e 	bge	r2,zero,201d5a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201d580:	e0bffe17 	ldw	r2,-8(fp)
 201d584:	10c00324 	muli	r3,r2,12
 201d588:	008080b4 	movhi	r2,514
 201d58c:	10bd2504 	addi	r2,r2,-2924
 201d590:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d594:	e0bfff17 	ldw	r2,-4(fp)
 201d598:	18800226 	beq	r3,r2,201d5a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201d59c:	00bffcc4 	movi	r2,-13
 201d5a0:	00000806 	br	201d5c4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d5a4:	e0bffe17 	ldw	r2,-8(fp)
 201d5a8:	10800044 	addi	r2,r2,1
 201d5ac:	e0bffe15 	stw	r2,-8(fp)
 201d5b0:	d0a00a17 	ldw	r2,-32728(gp)
 201d5b4:	1007883a 	mov	r3,r2
 201d5b8:	e0bffe17 	ldw	r2,-8(fp)
 201d5bc:	18bfdf2e 	bgeu	r3,r2,201d53c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201d5c0:	0005883a 	mov	r2,zero
}
 201d5c4:	e037883a 	mov	sp,fp
 201d5c8:	df000017 	ldw	fp,0(sp)
 201d5cc:	dec00104 	addi	sp,sp,4
 201d5d0:	f800283a 	ret

0201d5d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201d5d4:	defff604 	addi	sp,sp,-40
 201d5d8:	dfc00915 	stw	ra,36(sp)
 201d5dc:	df000815 	stw	fp,32(sp)
 201d5e0:	df000804 	addi	fp,sp,32
 201d5e4:	e13ffd15 	stw	r4,-12(fp)
 201d5e8:	e17ffe15 	stw	r5,-8(fp)
 201d5ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201d5f0:	00bfffc4 	movi	r2,-1
 201d5f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201d5f8:	00bffb44 	movi	r2,-19
 201d5fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201d600:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201d604:	d1600804 	addi	r5,gp,-32736
 201d608:	e13ffd17 	ldw	r4,-12(fp)
 201d60c:	201dc480 	call	201dc48 <alt_find_dev>
 201d610:	e0bff815 	stw	r2,-32(fp)
 201d614:	e0bff817 	ldw	r2,-32(fp)
 201d618:	1000051e 	bne	r2,zero,201d630 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201d61c:	e13ffd17 	ldw	r4,-12(fp)
 201d620:	201dcd80 	call	201dcd8 <alt_find_file>
 201d624:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201d628:	00800044 	movi	r2,1
 201d62c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201d630:	e0bff817 	ldw	r2,-32(fp)
 201d634:	10002926 	beq	r2,zero,201d6dc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201d638:	e13ff817 	ldw	r4,-32(fp)
 201d63c:	201dde00 	call	201dde0 <alt_get_fd>
 201d640:	e0bff915 	stw	r2,-28(fp)
 201d644:	e0bff917 	ldw	r2,-28(fp)
 201d648:	1000030e 	bge	r2,zero,201d658 <open+0x84>
    {
      status = index;
 201d64c:	e0bff917 	ldw	r2,-28(fp)
 201d650:	e0bffa15 	stw	r2,-24(fp)
 201d654:	00002306 	br	201d6e4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 201d658:	e0bff917 	ldw	r2,-28(fp)
 201d65c:	10c00324 	muli	r3,r2,12
 201d660:	008080b4 	movhi	r2,514
 201d664:	10bd2504 	addi	r2,r2,-2924
 201d668:	1885883a 	add	r2,r3,r2
 201d66c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201d670:	e0fffe17 	ldw	r3,-8(fp)
 201d674:	00900034 	movhi	r2,16384
 201d678:	10bfffc4 	addi	r2,r2,-1
 201d67c:	1886703a 	and	r3,r3,r2
 201d680:	e0bffc17 	ldw	r2,-16(fp)
 201d684:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201d688:	e0bffb17 	ldw	r2,-20(fp)
 201d68c:	1000051e 	bne	r2,zero,201d6a4 <open+0xd0>
 201d690:	e13ffc17 	ldw	r4,-16(fp)
 201d694:	201d5100 	call	201d510 <alt_file_locked>
 201d698:	e0bffa15 	stw	r2,-24(fp)
 201d69c:	e0bffa17 	ldw	r2,-24(fp)
 201d6a0:	10001016 	blt	r2,zero,201d6e4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201d6a4:	e0bff817 	ldw	r2,-32(fp)
 201d6a8:	10800317 	ldw	r2,12(r2)
 201d6ac:	10000826 	beq	r2,zero,201d6d0 <open+0xfc>
 201d6b0:	e0bff817 	ldw	r2,-32(fp)
 201d6b4:	10800317 	ldw	r2,12(r2)
 201d6b8:	e1ffff17 	ldw	r7,-4(fp)
 201d6bc:	e1bffe17 	ldw	r6,-8(fp)
 201d6c0:	e17ffd17 	ldw	r5,-12(fp)
 201d6c4:	e13ffc17 	ldw	r4,-16(fp)
 201d6c8:	103ee83a 	callr	r2
 201d6cc:	00000106 	br	201d6d4 <open+0x100>
 201d6d0:	0005883a 	mov	r2,zero
 201d6d4:	e0bffa15 	stw	r2,-24(fp)
 201d6d8:	00000206 	br	201d6e4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201d6dc:	00bffb44 	movi	r2,-19
 201d6e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201d6e4:	e0bffa17 	ldw	r2,-24(fp)
 201d6e8:	1000090e 	bge	r2,zero,201d710 <open+0x13c>
  {
    alt_release_fd (index);  
 201d6ec:	e13ff917 	ldw	r4,-28(fp)
 201d6f0:	20136dc0 	call	20136dc <alt_release_fd>
    ALT_ERRNO = -status;
 201d6f4:	201d4d40 	call	201d4d4 <alt_get_errno>
 201d6f8:	1007883a 	mov	r3,r2
 201d6fc:	e0bffa17 	ldw	r2,-24(fp)
 201d700:	0085c83a 	sub	r2,zero,r2
 201d704:	18800015 	stw	r2,0(r3)
    return -1;
 201d708:	00bfffc4 	movi	r2,-1
 201d70c:	00000106 	br	201d714 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 201d710:	e0bff917 	ldw	r2,-28(fp)
}
 201d714:	e037883a 	mov	sp,fp
 201d718:	dfc00117 	ldw	ra,4(sp)
 201d71c:	df000017 	ldw	fp,0(sp)
 201d720:	dec00204 	addi	sp,sp,8
 201d724:	f800283a 	ret

0201d728 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201d728:	defffa04 	addi	sp,sp,-24
 201d72c:	df000515 	stw	fp,20(sp)
 201d730:	df000504 	addi	fp,sp,20
 201d734:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d738:	0005303a 	rdctl	r2,status
 201d73c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d740:	e0fffc17 	ldw	r3,-16(fp)
 201d744:	00bfff84 	movi	r2,-2
 201d748:	1884703a 	and	r2,r3,r2
 201d74c:	1001703a 	wrctl	status,r2
  
  return context;
 201d750:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201d754:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201d758:	e0bfff17 	ldw	r2,-4(fp)
 201d75c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201d760:	e0bffd17 	ldw	r2,-12(fp)
 201d764:	10800017 	ldw	r2,0(r2)
 201d768:	e0fffd17 	ldw	r3,-12(fp)
 201d76c:	18c00117 	ldw	r3,4(r3)
 201d770:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 201d774:	e0bffd17 	ldw	r2,-12(fp)
 201d778:	10800117 	ldw	r2,4(r2)
 201d77c:	e0fffd17 	ldw	r3,-12(fp)
 201d780:	18c00017 	ldw	r3,0(r3)
 201d784:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201d788:	e0bffd17 	ldw	r2,-12(fp)
 201d78c:	e0fffd17 	ldw	r3,-12(fp)
 201d790:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 201d794:	e0bffd17 	ldw	r2,-12(fp)
 201d798:	e0fffd17 	ldw	r3,-12(fp)
 201d79c:	10c00015 	stw	r3,0(r2)
 201d7a0:	e0bffb17 	ldw	r2,-20(fp)
 201d7a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d7a8:	e0bffe17 	ldw	r2,-8(fp)
 201d7ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201d7b0:	0001883a 	nop
 201d7b4:	e037883a 	mov	sp,fp
 201d7b8:	df000017 	ldw	fp,0(sp)
 201d7bc:	dec00104 	addi	sp,sp,4
 201d7c0:	f800283a 	ret

0201d7c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201d7c4:	defffb04 	addi	sp,sp,-20
 201d7c8:	dfc00415 	stw	ra,16(sp)
 201d7cc:	df000315 	stw	fp,12(sp)
 201d7d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201d7d4:	d0a02d17 	ldw	r2,-32588(gp)
 201d7d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201d7dc:	d0a74817 	ldw	r2,-25312(gp)
 201d7e0:	10800044 	addi	r2,r2,1
 201d7e4:	d0a74815 	stw	r2,-25312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201d7e8:	00002e06 	br	201d8a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201d7ec:	e0bffd17 	ldw	r2,-12(fp)
 201d7f0:	10800017 	ldw	r2,0(r2)
 201d7f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201d7f8:	e0bffd17 	ldw	r2,-12(fp)
 201d7fc:	10800403 	ldbu	r2,16(r2)
 201d800:	10803fcc 	andi	r2,r2,255
 201d804:	10000426 	beq	r2,zero,201d818 <alt_tick+0x54>
 201d808:	d0a74817 	ldw	r2,-25312(gp)
 201d80c:	1000021e 	bne	r2,zero,201d818 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201d810:	e0bffd17 	ldw	r2,-12(fp)
 201d814:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201d818:	e0bffd17 	ldw	r2,-12(fp)
 201d81c:	10800217 	ldw	r2,8(r2)
 201d820:	d0e74817 	ldw	r3,-25312(gp)
 201d824:	18801d36 	bltu	r3,r2,201d89c <alt_tick+0xd8>
 201d828:	e0bffd17 	ldw	r2,-12(fp)
 201d82c:	10800403 	ldbu	r2,16(r2)
 201d830:	10803fcc 	andi	r2,r2,255
 201d834:	1000191e 	bne	r2,zero,201d89c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201d838:	e0bffd17 	ldw	r2,-12(fp)
 201d83c:	10800317 	ldw	r2,12(r2)
 201d840:	e0fffd17 	ldw	r3,-12(fp)
 201d844:	18c00517 	ldw	r3,20(r3)
 201d848:	1809883a 	mov	r4,r3
 201d84c:	103ee83a 	callr	r2
 201d850:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201d854:	e0bfff17 	ldw	r2,-4(fp)
 201d858:	1000031e 	bne	r2,zero,201d868 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 201d85c:	e13ffd17 	ldw	r4,-12(fp)
 201d860:	201d7280 	call	201d728 <alt_alarm_stop>
 201d864:	00000d06 	br	201d89c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201d868:	e0bffd17 	ldw	r2,-12(fp)
 201d86c:	10c00217 	ldw	r3,8(r2)
 201d870:	e0bfff17 	ldw	r2,-4(fp)
 201d874:	1887883a 	add	r3,r3,r2
 201d878:	e0bffd17 	ldw	r2,-12(fp)
 201d87c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201d880:	e0bffd17 	ldw	r2,-12(fp)
 201d884:	10c00217 	ldw	r3,8(r2)
 201d888:	d0a74817 	ldw	r2,-25312(gp)
 201d88c:	1880032e 	bgeu	r3,r2,201d89c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201d890:	e0bffd17 	ldw	r2,-12(fp)
 201d894:	00c00044 	movi	r3,1
 201d898:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201d89c:	e0bffe17 	ldw	r2,-8(fp)
 201d8a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201d8a4:	e0fffd17 	ldw	r3,-12(fp)
 201d8a8:	d0a02d04 	addi	r2,gp,-32588
 201d8ac:	18bfcf1e 	bne	r3,r2,201d7ec <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 201d8b0:	20148c80 	call	20148c8 <OSTimeTick>
}
 201d8b4:	0001883a 	nop
 201d8b8:	e037883a 	mov	sp,fp
 201d8bc:	dfc00117 	ldw	ra,4(sp)
 201d8c0:	df000017 	ldw	fp,0(sp)
 201d8c4:	dec00204 	addi	sp,sp,8
 201d8c8:	f800283a 	ret

0201d8cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201d8cc:	deffff04 	addi	sp,sp,-4
 201d8d0:	df000015 	stw	fp,0(sp)
 201d8d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201d8d8:	000170fa 	wrctl	ienable,zero
}
 201d8dc:	0001883a 	nop
 201d8e0:	e037883a 	mov	sp,fp
 201d8e4:	df000017 	ldw	fp,0(sp)
 201d8e8:	dec00104 	addi	sp,sp,4
 201d8ec:	f800283a 	ret

0201d8f0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201d8f0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201d8f4:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201d8f8:	d1274117 	ldw	r4,-25340(gp)

      stw ra,  0(sp)
 201d8fc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201d900:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201d904:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201d908:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201d90c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201d910:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201d914:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201d918:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201d91c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201d920:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201d924:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201d928:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201d92c:	201db640 	call	201db64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201d930:	d1273c17 	ldw	r4,-25360(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201d934:	d1673407 	ldb	r5,-25392(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201d938:	d1274115 	stw	r4,-25340(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201d93c:	d1673445 	stb	r5,-25391(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201d940:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201d944:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201d948:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201d94c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201d950:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201d954:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201d958:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201d95c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201d960:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201d964:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201d968:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201d96c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201d970:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201d974:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201d978:	f800283a 	ret

0201d97c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201d97c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201d980:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201d984:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201d988:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201d98c:	201db640 	call	201db64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201d990:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201d994:	d4a73245 	stb	r18,-25399(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201d998:	003fe506 	br	201d930 <OSCtxSw+0x40>

0201d99c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201d99c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201d9a0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201d9a4:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201d9a8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201d9ac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201d9b0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201d9b4:	dec00204 	addi	sp,sp,8

      callr r2
 201d9b8:	103ee83a 	callr	r2

      nop
 201d9bc:	0001883a 	nop

0201d9c0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201d9c0:	defff704 	addi	sp,sp,-36
 201d9c4:	dfc00815 	stw	ra,32(sp)
 201d9c8:	df000715 	stw	fp,28(sp)
 201d9cc:	df000704 	addi	fp,sp,28
 201d9d0:	e13ffc15 	stw	r4,-16(fp)
 201d9d4:	e17ffd15 	stw	r5,-12(fp)
 201d9d8:	e1bffe15 	stw	r6,-8(fp)
 201d9dc:	3805883a 	mov	r2,r7
 201d9e0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201d9e4:	e0fffe17 	ldw	r3,-8(fp)
 201d9e8:	00bfff04 	movi	r2,-4
 201d9ec:	1884703a 	and	r2,r3,r2
 201d9f0:	10bef704 	addi	r2,r2,-1060
 201d9f4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201d9f8:	01810904 	movi	r6,1060
 201d9fc:	000b883a 	mov	r5,zero
 201da00:	e13ff917 	ldw	r4,-28(fp)
 201da04:	2004ad40 	call	2004ad4 <memset>
 201da08:	e0bff917 	ldw	r2,-28(fp)
 201da0c:	10c0bb04 	addi	r3,r2,748
 201da10:	e0bff917 	ldw	r2,-28(fp)
 201da14:	10c00115 	stw	r3,4(r2)
 201da18:	e0bff917 	ldw	r2,-28(fp)
 201da1c:	10c0d504 	addi	r3,r2,852
 201da20:	e0bff917 	ldw	r2,-28(fp)
 201da24:	10c00215 	stw	r3,8(r2)
 201da28:	e0bff917 	ldw	r2,-28(fp)
 201da2c:	10c0ef04 	addi	r3,r2,956
 201da30:	e0bff917 	ldw	r2,-28(fp)
 201da34:	10c00315 	stw	r3,12(r2)
 201da38:	e0fff917 	ldw	r3,-28(fp)
 201da3c:	008080b4 	movhi	r2,514
 201da40:	10bae504 	addi	r2,r2,-5228
 201da44:	18800d15 	stw	r2,52(r3)
 201da48:	e0bff917 	ldw	r2,-28(fp)
 201da4c:	00c00044 	movi	r3,1
 201da50:	10c02915 	stw	r3,164(r2)
 201da54:	10002a15 	stw	zero,168(r2)
 201da58:	e0bff917 	ldw	r2,-28(fp)
 201da5c:	00ccc384 	movi	r3,13070
 201da60:	10c02b0d 	sth	r3,172(r2)
 201da64:	e0bff917 	ldw	r2,-28(fp)
 201da68:	00eaf344 	movi	r3,-21555
 201da6c:	10c02b8d 	sth	r3,174(r2)
 201da70:	e0bff917 	ldw	r2,-28(fp)
 201da74:	00c48d04 	movi	r3,4660
 201da78:	10c02c0d 	sth	r3,176(r2)
 201da7c:	e0bff917 	ldw	r2,-28(fp)
 201da80:	00f99b44 	movi	r3,-6547
 201da84:	10c02c8d 	sth	r3,178(r2)
 201da88:	e0bff917 	ldw	r2,-28(fp)
 201da8c:	00f7bb04 	movi	r3,-8468
 201da90:	10c02d0d 	sth	r3,180(r2)
 201da94:	e0bff917 	ldw	r2,-28(fp)
 201da98:	00c00144 	movi	r3,5
 201da9c:	10c02d8d 	sth	r3,182(r2)
 201daa0:	e0bff917 	ldw	r2,-28(fp)
 201daa4:	00c002c4 	movi	r3,11
 201daa8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201daac:	e0bff917 	ldw	r2,-28(fp)
 201dab0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201dab4:	e0bffa17 	ldw	r2,-24(fp)
 201dab8:	10bff304 	addi	r2,r2,-52
 201dabc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201dac0:	e0bffb17 	ldw	r2,-20(fp)
 201dac4:	10800c04 	addi	r2,r2,48
 201dac8:	e0fffc17 	ldw	r3,-16(fp)
 201dacc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201dad0:	e0bffb17 	ldw	r2,-20(fp)
 201dad4:	10800b04 	addi	r2,r2,44
 201dad8:	e0fffd17 	ldw	r3,-12(fp)
 201dadc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201dae0:	e0bffb17 	ldw	r2,-20(fp)
 201dae4:	10800a04 	addi	r2,r2,40
 201dae8:	e0fff917 	ldw	r3,-28(fp)
 201daec:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201daf0:	008080b4 	movhi	r2,514
 201daf4:	10b66704 	addi	r2,r2,-9828
 201daf8:	10c00104 	addi	r3,r2,4
 201dafc:	e0bffb17 	ldw	r2,-20(fp)
 201db00:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201db04:	e0bffb17 	ldw	r2,-20(fp)
}
 201db08:	e037883a 	mov	sp,fp
 201db0c:	dfc00117 	ldw	ra,4(sp)
 201db10:	df000017 	ldw	fp,0(sp)
 201db14:	dec00204 	addi	sp,sp,8
 201db18:	f800283a 	ret

0201db1c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201db1c:	defffe04 	addi	sp,sp,-8
 201db20:	df000115 	stw	fp,4(sp)
 201db24:	df000104 	addi	fp,sp,4
 201db28:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201db2c:	0001883a 	nop
 201db30:	e037883a 	mov	sp,fp
 201db34:	df000017 	ldw	fp,0(sp)
 201db38:	dec00104 	addi	sp,sp,4
 201db3c:	f800283a 	ret

0201db40 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201db40:	defffe04 	addi	sp,sp,-8
 201db44:	df000115 	stw	fp,4(sp)
 201db48:	df000104 	addi	fp,sp,4
 201db4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201db50:	0001883a 	nop
 201db54:	e037883a 	mov	sp,fp
 201db58:	df000017 	ldw	fp,0(sp)
 201db5c:	dec00104 	addi	sp,sp,4
 201db60:	f800283a 	ret

0201db64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201db64:	deffff04 	addi	sp,sp,-4
 201db68:	df000015 	stw	fp,0(sp)
 201db6c:	d839883a 	mov	fp,sp
}
 201db70:	0001883a 	nop
 201db74:	e037883a 	mov	sp,fp
 201db78:	df000017 	ldw	fp,0(sp)
 201db7c:	dec00104 	addi	sp,sp,4
 201db80:	f800283a 	ret

0201db84 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201db84:	deffff04 	addi	sp,sp,-4
 201db88:	df000015 	stw	fp,0(sp)
 201db8c:	d839883a 	mov	fp,sp
}
 201db90:	0001883a 	nop
 201db94:	e037883a 	mov	sp,fp
 201db98:	df000017 	ldw	fp,0(sp)
 201db9c:	dec00104 	addi	sp,sp,4
 201dba0:	f800283a 	ret

0201dba4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201dba4:	deffff04 	addi	sp,sp,-4
 201dba8:	df000015 	stw	fp,0(sp)
 201dbac:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201dbb0:	0001883a 	nop
 201dbb4:	e037883a 	mov	sp,fp
 201dbb8:	df000017 	ldw	fp,0(sp)
 201dbbc:	dec00104 	addi	sp,sp,4
 201dbc0:	f800283a 	ret

0201dbc4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201dbc4:	deffff04 	addi	sp,sp,-4
 201dbc8:	df000015 	stw	fp,0(sp)
 201dbcc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201dbd0:	0001883a 	nop
 201dbd4:	e037883a 	mov	sp,fp
 201dbd8:	df000017 	ldw	fp,0(sp)
 201dbdc:	dec00104 	addi	sp,sp,4
 201dbe0:	f800283a 	ret

0201dbe4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201dbe4:	deffff04 	addi	sp,sp,-4
 201dbe8:	df000015 	stw	fp,0(sp)
 201dbec:	d839883a 	mov	fp,sp
}
 201dbf0:	0001883a 	nop
 201dbf4:	e037883a 	mov	sp,fp
 201dbf8:	df000017 	ldw	fp,0(sp)
 201dbfc:	dec00104 	addi	sp,sp,4
 201dc00:	f800283a 	ret

0201dc04 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201dc04:	deffff04 	addi	sp,sp,-4
 201dc08:	df000015 	stw	fp,0(sp)
 201dc0c:	d839883a 	mov	fp,sp
}
 201dc10:	0001883a 	nop
 201dc14:	e037883a 	mov	sp,fp
 201dc18:	df000017 	ldw	fp,0(sp)
 201dc1c:	dec00104 	addi	sp,sp,4
 201dc20:	f800283a 	ret

0201dc24 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201dc24:	defffe04 	addi	sp,sp,-8
 201dc28:	df000115 	stw	fp,4(sp)
 201dc2c:	df000104 	addi	fp,sp,4
 201dc30:	e13fff15 	stw	r4,-4(fp)
}
 201dc34:	0001883a 	nop
 201dc38:	e037883a 	mov	sp,fp
 201dc3c:	df000017 	ldw	fp,0(sp)
 201dc40:	dec00104 	addi	sp,sp,4
 201dc44:	f800283a 	ret

0201dc48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201dc48:	defffa04 	addi	sp,sp,-24
 201dc4c:	dfc00515 	stw	ra,20(sp)
 201dc50:	df000415 	stw	fp,16(sp)
 201dc54:	df000404 	addi	fp,sp,16
 201dc58:	e13ffe15 	stw	r4,-8(fp)
 201dc5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201dc60:	e0bfff17 	ldw	r2,-4(fp)
 201dc64:	10800017 	ldw	r2,0(r2)
 201dc68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201dc6c:	e13ffe17 	ldw	r4,-8(fp)
 201dc70:	2004eb40 	call	2004eb4 <strlen>
 201dc74:	10800044 	addi	r2,r2,1
 201dc78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201dc7c:	00000d06 	br	201dcb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201dc80:	e0bffc17 	ldw	r2,-16(fp)
 201dc84:	10800217 	ldw	r2,8(r2)
 201dc88:	e0fffd17 	ldw	r3,-12(fp)
 201dc8c:	180d883a 	mov	r6,r3
 201dc90:	e17ffe17 	ldw	r5,-8(fp)
 201dc94:	1009883a 	mov	r4,r2
 201dc98:	201e06c0 	call	201e06c <memcmp>
 201dc9c:	1000021e 	bne	r2,zero,201dca8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201dca0:	e0bffc17 	ldw	r2,-16(fp)
 201dca4:	00000706 	br	201dcc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201dca8:	e0bffc17 	ldw	r2,-16(fp)
 201dcac:	10800017 	ldw	r2,0(r2)
 201dcb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201dcb4:	e0fffc17 	ldw	r3,-16(fp)
 201dcb8:	e0bfff17 	ldw	r2,-4(fp)
 201dcbc:	18bff01e 	bne	r3,r2,201dc80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201dcc0:	0005883a 	mov	r2,zero
}
 201dcc4:	e037883a 	mov	sp,fp
 201dcc8:	dfc00117 	ldw	ra,4(sp)
 201dccc:	df000017 	ldw	fp,0(sp)
 201dcd0:	dec00204 	addi	sp,sp,8
 201dcd4:	f800283a 	ret

0201dcd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201dcd8:	defffb04 	addi	sp,sp,-20
 201dcdc:	dfc00415 	stw	ra,16(sp)
 201dce0:	df000315 	stw	fp,12(sp)
 201dce4:	df000304 	addi	fp,sp,12
 201dce8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201dcec:	d0a00617 	ldw	r2,-32744(gp)
 201dcf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201dcf4:	00003106 	br	201ddbc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 201dcf8:	e0bffd17 	ldw	r2,-12(fp)
 201dcfc:	10800217 	ldw	r2,8(r2)
 201dd00:	1009883a 	mov	r4,r2
 201dd04:	2004eb40 	call	2004eb4 <strlen>
 201dd08:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201dd0c:	e0bffd17 	ldw	r2,-12(fp)
 201dd10:	10c00217 	ldw	r3,8(r2)
 201dd14:	e0bffe17 	ldw	r2,-8(fp)
 201dd18:	10bfffc4 	addi	r2,r2,-1
 201dd1c:	1885883a 	add	r2,r3,r2
 201dd20:	10800003 	ldbu	r2,0(r2)
 201dd24:	10803fcc 	andi	r2,r2,255
 201dd28:	1080201c 	xori	r2,r2,128
 201dd2c:	10bfe004 	addi	r2,r2,-128
 201dd30:	10800bd8 	cmpnei	r2,r2,47
 201dd34:	1000031e 	bne	r2,zero,201dd44 <alt_find_file+0x6c>
    {
      len -= 1;
 201dd38:	e0bffe17 	ldw	r2,-8(fp)
 201dd3c:	10bfffc4 	addi	r2,r2,-1
 201dd40:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201dd44:	e0bffe17 	ldw	r2,-8(fp)
 201dd48:	e0ffff17 	ldw	r3,-4(fp)
 201dd4c:	1885883a 	add	r2,r3,r2
 201dd50:	10800003 	ldbu	r2,0(r2)
 201dd54:	10803fcc 	andi	r2,r2,255
 201dd58:	1080201c 	xori	r2,r2,128
 201dd5c:	10bfe004 	addi	r2,r2,-128
 201dd60:	10800be0 	cmpeqi	r2,r2,47
 201dd64:	1000081e 	bne	r2,zero,201dd88 <alt_find_file+0xb0>
 201dd68:	e0bffe17 	ldw	r2,-8(fp)
 201dd6c:	e0ffff17 	ldw	r3,-4(fp)
 201dd70:	1885883a 	add	r2,r3,r2
 201dd74:	10800003 	ldbu	r2,0(r2)
 201dd78:	10803fcc 	andi	r2,r2,255
 201dd7c:	1080201c 	xori	r2,r2,128
 201dd80:	10bfe004 	addi	r2,r2,-128
 201dd84:	10000a1e 	bne	r2,zero,201ddb0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 201dd88:	e0bffd17 	ldw	r2,-12(fp)
 201dd8c:	10800217 	ldw	r2,8(r2)
 201dd90:	e0fffe17 	ldw	r3,-8(fp)
 201dd94:	180d883a 	mov	r6,r3
 201dd98:	e17fff17 	ldw	r5,-4(fp)
 201dd9c:	1009883a 	mov	r4,r2
 201dda0:	201e06c0 	call	201e06c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201dda4:	1000021e 	bne	r2,zero,201ddb0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201dda8:	e0bffd17 	ldw	r2,-12(fp)
 201ddac:	00000706 	br	201ddcc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201ddb0:	e0bffd17 	ldw	r2,-12(fp)
 201ddb4:	10800017 	ldw	r2,0(r2)
 201ddb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201ddbc:	e0fffd17 	ldw	r3,-12(fp)
 201ddc0:	d0a00604 	addi	r2,gp,-32744
 201ddc4:	18bfcc1e 	bne	r3,r2,201dcf8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201ddc8:	0005883a 	mov	r2,zero
}
 201ddcc:	e037883a 	mov	sp,fp
 201ddd0:	dfc00117 	ldw	ra,4(sp)
 201ddd4:	df000017 	ldw	fp,0(sp)
 201ddd8:	dec00204 	addi	sp,sp,8
 201dddc:	f800283a 	ret

0201dde0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201dde0:	defff904 	addi	sp,sp,-28
 201dde4:	dfc00615 	stw	ra,24(sp)
 201dde8:	df000515 	stw	fp,20(sp)
 201ddec:	df000504 	addi	fp,sp,20
 201ddf0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201ddf4:	00bffa04 	movi	r2,-24
 201ddf8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201ddfc:	d0a72a17 	ldw	r2,-25432(gp)
 201de00:	e0bffd15 	stw	r2,-12(fp)
 201de04:	e03ffe0d 	sth	zero,-8(fp)
 201de08:	e0bffe0b 	ldhu	r2,-8(fp)
 201de0c:	e0fffe84 	addi	r3,fp,-6
 201de10:	180d883a 	mov	r6,r3
 201de14:	100b883a 	mov	r5,r2
 201de18:	e13ffd17 	ldw	r4,-12(fp)
 201de1c:	2019bd40 	call	2019bd4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201de20:	e03ffb15 	stw	zero,-20(fp)
 201de24:	00001906 	br	201de8c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 201de28:	008080b4 	movhi	r2,514
 201de2c:	10bd2504 	addi	r2,r2,-2924
 201de30:	e0fffb17 	ldw	r3,-20(fp)
 201de34:	18c00324 	muli	r3,r3,12
 201de38:	10c5883a 	add	r2,r2,r3
 201de3c:	10800017 	ldw	r2,0(r2)
 201de40:	10000f1e 	bne	r2,zero,201de80 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 201de44:	008080b4 	movhi	r2,514
 201de48:	10bd2504 	addi	r2,r2,-2924
 201de4c:	e0fffb17 	ldw	r3,-20(fp)
 201de50:	18c00324 	muli	r3,r3,12
 201de54:	10c5883a 	add	r2,r2,r3
 201de58:	e0ffff17 	ldw	r3,-4(fp)
 201de5c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201de60:	d0e00a17 	ldw	r3,-32728(gp)
 201de64:	e0bffb17 	ldw	r2,-20(fp)
 201de68:	1880020e 	bge	r3,r2,201de74 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 201de6c:	e0bffb17 	ldw	r2,-20(fp)
 201de70:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 201de74:	e0bffb17 	ldw	r2,-20(fp)
 201de78:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 201de7c:	00000606 	br	201de98 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201de80:	e0bffb17 	ldw	r2,-20(fp)
 201de84:	10800044 	addi	r2,r2,1
 201de88:	e0bffb15 	stw	r2,-20(fp)
 201de8c:	e0bffb17 	ldw	r2,-20(fp)
 201de90:	10800810 	cmplti	r2,r2,32
 201de94:	103fe41e 	bne	r2,zero,201de28 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201de98:	d0a72a17 	ldw	r2,-25432(gp)
 201de9c:	1009883a 	mov	r4,r2
 201dea0:	2019f4c0 	call	2019f4c <OSSemPost>

  return rc;
 201dea4:	e0bffc17 	ldw	r2,-16(fp)
}
 201dea8:	e037883a 	mov	sp,fp
 201deac:	dfc00117 	ldw	ra,4(sp)
 201deb0:	df000017 	ldw	fp,0(sp)
 201deb4:	dec00204 	addi	sp,sp,8
 201deb8:	f800283a 	ret

0201debc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 201debc:	defffb04 	addi	sp,sp,-20
 201dec0:	df000415 	stw	fp,16(sp)
 201dec4:	df000404 	addi	fp,sp,16
 201dec8:	e13ffe15 	stw	r4,-8(fp)
 201decc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 201ded0:	e0bfff17 	ldw	r2,-4(fp)
 201ded4:	10840070 	cmpltui	r2,r2,4097
 201ded8:	1000021e 	bne	r2,zero,201dee4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 201dedc:	00840004 	movi	r2,4096
 201dee0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 201dee4:	e0fffe17 	ldw	r3,-8(fp)
 201dee8:	e0bfff17 	ldw	r2,-4(fp)
 201deec:	1885883a 	add	r2,r3,r2
 201def0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201def4:	e0bffe17 	ldw	r2,-8(fp)
 201def8:	e0bffc15 	stw	r2,-16(fp)
 201defc:	00000506 	br	201df14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 201df00:	e0bffc17 	ldw	r2,-16(fp)
 201df04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201df08:	e0bffc17 	ldw	r2,-16(fp)
 201df0c:	10800804 	addi	r2,r2,32
 201df10:	e0bffc15 	stw	r2,-16(fp)
 201df14:	e0fffc17 	ldw	r3,-16(fp)
 201df18:	e0bffd17 	ldw	r2,-12(fp)
 201df1c:	18bff836 	bltu	r3,r2,201df00 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 201df20:	e0bffe17 	ldw	r2,-8(fp)
 201df24:	108007cc 	andi	r2,r2,31
 201df28:	10000226 	beq	r2,zero,201df34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 201df2c:	e0bffc17 	ldw	r2,-16(fp)
 201df30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 201df34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 201df38:	0001883a 	nop
 201df3c:	e037883a 	mov	sp,fp
 201df40:	df000017 	ldw	fp,0(sp)
 201df44:	dec00104 	addi	sp,sp,4
 201df48:	f800283a 	ret

0201df4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201df4c:	defffe04 	addi	sp,sp,-8
 201df50:	df000115 	stw	fp,4(sp)
 201df54:	df000104 	addi	fp,sp,4
 201df58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201df5c:	e0bfff17 	ldw	r2,-4(fp)
 201df60:	10bffe84 	addi	r2,r2,-6
 201df64:	10c00428 	cmpgeui	r3,r2,16
 201df68:	18001a1e 	bne	r3,zero,201dfd4 <alt_exception_cause_generated_bad_addr+0x88>
 201df6c:	100690ba 	slli	r3,r2,2
 201df70:	008080b4 	movhi	r2,514
 201df74:	10b7e104 	addi	r2,r2,-8316
 201df78:	1885883a 	add	r2,r3,r2
 201df7c:	10800017 	ldw	r2,0(r2)
 201df80:	1000683a 	jmp	r2
 201df84:	0201dfc4 	movi	r8,1919
 201df88:	0201dfc4 	movi	r8,1919
 201df8c:	0201dfd4 	movui	r8,1919
 201df90:	0201dfd4 	movui	r8,1919
 201df94:	0201dfd4 	movui	r8,1919
 201df98:	0201dfc4 	movi	r8,1919
 201df9c:	0201dfcc 	andi	r8,zero,1919
 201dfa0:	0201dfd4 	movui	r8,1919
 201dfa4:	0201dfc4 	movi	r8,1919
 201dfa8:	0201dfc4 	movi	r8,1919
 201dfac:	0201dfd4 	movui	r8,1919
 201dfb0:	0201dfc4 	movi	r8,1919
 201dfb4:	0201dfcc 	andi	r8,zero,1919
 201dfb8:	0201dfd4 	movui	r8,1919
 201dfbc:	0201dfd4 	movui	r8,1919
 201dfc0:	0201dfc4 	movi	r8,1919
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201dfc4:	00800044 	movi	r2,1
 201dfc8:	00000306 	br	201dfd8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201dfcc:	0005883a 	mov	r2,zero
 201dfd0:	00000106 	br	201dfd8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201dfd4:	0005883a 	mov	r2,zero
  }
}
 201dfd8:	e037883a 	mov	sp,fp
 201dfdc:	df000017 	ldw	fp,0(sp)
 201dfe0:	dec00104 	addi	sp,sp,4
 201dfe4:	f800283a 	ret

0201dfe8 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 201dfe8:	defffd04 	addi	sp,sp,-12
 201dfec:	dfc00215 	stw	ra,8(sp)
 201dff0:	df000115 	stw	fp,4(sp)
 201dff4:	df000104 	addi	fp,sp,4
 201dff8:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 201dffc:	000f883a 	mov	r7,zero
 201e000:	000d883a 	mov	r6,zero
 201e004:	e17fff17 	ldw	r5,-4(fp)
 201e008:	0009883a 	mov	r4,zero
 201e00c:	201e1a00 	call	201e1a0 <__register_exitproc>
}
 201e010:	e037883a 	mov	sp,fp
 201e014:	dfc00117 	ldw	ra,4(sp)
 201e018:	df000017 	ldw	fp,0(sp)
 201e01c:	dec00204 	addi	sp,sp,8
 201e020:	f800283a 	ret

0201e024 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 201e024:	defffd04 	addi	sp,sp,-12
 201e028:	dfc00215 	stw	ra,8(sp)
 201e02c:	df000115 	stw	fp,4(sp)
 201e030:	df000104 	addi	fp,sp,4
 201e034:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 201e038:	000b883a 	mov	r5,zero
 201e03c:	e13fff17 	ldw	r4,-4(fp)
 201e040:	201e3100 	call	201e310 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 201e044:	d0a00117 	ldw	r2,-32764(gp)
 201e048:	10800f17 	ldw	r2,60(r2)
 201e04c:	10000526 	beq	r2,zero,201e064 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 201e050:	d0a00117 	ldw	r2,-32764(gp)
 201e054:	10800f17 	ldw	r2,60(r2)
 201e058:	d0e00117 	ldw	r3,-32764(gp)
 201e05c:	1809883a 	mov	r4,r3
 201e060:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 201e064:	e13fff17 	ldw	r4,-4(fp)
 201e068:	201e4fc0 	call	201e4fc <_exit>

0201e06c <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 201e06c:	defff804 	addi	sp,sp,-32
 201e070:	df000715 	stw	fp,28(sp)
 201e074:	df000704 	addi	fp,sp,28
 201e078:	e13ffd15 	stw	r4,-12(fp)
 201e07c:	e17ffe15 	stw	r5,-8(fp)
 201e080:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 201e084:	e0bffd17 	ldw	r2,-12(fp)
 201e088:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 201e08c:	e0bffe17 	ldw	r2,-8(fp)
 201e090:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 201e094:	e0bfff17 	ldw	r2,-4(fp)
 201e098:	10800130 	cmpltui	r2,r2,4
 201e09c:	1000371e 	bne	r2,zero,201e17c <memcmp+0x110>
 201e0a0:	e0fff917 	ldw	r3,-28(fp)
 201e0a4:	e0bffa17 	ldw	r2,-24(fp)
 201e0a8:	1884b03a 	or	r2,r3,r2
 201e0ac:	108000cc 	andi	r2,r2,3
 201e0b0:	1000321e 	bne	r2,zero,201e17c <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 201e0b4:	e0bff917 	ldw	r2,-28(fp)
 201e0b8:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 201e0bc:	e0bffa17 	ldw	r2,-24(fp)
 201e0c0:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 201e0c4:	00000e06 	br	201e100 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 201e0c8:	e0bffb17 	ldw	r2,-20(fp)
 201e0cc:	10c00017 	ldw	r3,0(r2)
 201e0d0:	e0bffc17 	ldw	r2,-16(fp)
 201e0d4:	10800017 	ldw	r2,0(r2)
 201e0d8:	18800d1e 	bne	r3,r2,201e110 <memcmp+0xa4>
   	    break;
          a1++;
 201e0dc:	e0bffb17 	ldw	r2,-20(fp)
 201e0e0:	10800104 	addi	r2,r2,4
 201e0e4:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 201e0e8:	e0bffc17 	ldw	r2,-16(fp)
 201e0ec:	10800104 	addi	r2,r2,4
 201e0f0:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 201e0f4:	e0bfff17 	ldw	r2,-4(fp)
 201e0f8:	10bfff04 	addi	r2,r2,-4
 201e0fc:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 201e100:	e0bfff17 	ldw	r2,-4(fp)
 201e104:	10800128 	cmpgeui	r2,r2,4
 201e108:	103fef1e 	bne	r2,zero,201e0c8 <memcmp+0x5c>
 201e10c:	00000106 	br	201e114 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 201e110:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 201e114:	e0bffb17 	ldw	r2,-20(fp)
 201e118:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 201e11c:	e0bffc17 	ldw	r2,-16(fp)
 201e120:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 201e124:	00001506 	br	201e17c <memcmp+0x110>
    {
      if (*s1 != *s2)
 201e128:	e0bff917 	ldw	r2,-28(fp)
 201e12c:	10c00003 	ldbu	r3,0(r2)
 201e130:	e0bffa17 	ldw	r2,-24(fp)
 201e134:	10800003 	ldbu	r2,0(r2)
 201e138:	18c03fcc 	andi	r3,r3,255
 201e13c:	10803fcc 	andi	r2,r2,255
 201e140:	18800826 	beq	r3,r2,201e164 <memcmp+0xf8>
	return *s1 - *s2;
 201e144:	e0bff917 	ldw	r2,-28(fp)
 201e148:	10800003 	ldbu	r2,0(r2)
 201e14c:	10c03fcc 	andi	r3,r2,255
 201e150:	e0bffa17 	ldw	r2,-24(fp)
 201e154:	10800003 	ldbu	r2,0(r2)
 201e158:	10803fcc 	andi	r2,r2,255
 201e15c:	1885c83a 	sub	r2,r3,r2
 201e160:	00000b06 	br	201e190 <memcmp+0x124>
      s1++;
 201e164:	e0bff917 	ldw	r2,-28(fp)
 201e168:	10800044 	addi	r2,r2,1
 201e16c:	e0bff915 	stw	r2,-28(fp)
      s2++;
 201e170:	e0bffa17 	ldw	r2,-24(fp)
 201e174:	10800044 	addi	r2,r2,1
 201e178:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 201e17c:	e0bfff17 	ldw	r2,-4(fp)
 201e180:	10ffffc4 	addi	r3,r2,-1
 201e184:	e0ffff15 	stw	r3,-4(fp)
 201e188:	103fe71e 	bne	r2,zero,201e128 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 201e18c:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 201e190:	e037883a 	mov	sp,fp
 201e194:	df000017 	ldw	fp,0(sp)
 201e198:	dec00104 	addi	sp,sp,4
 201e19c:	f800283a 	ret

0201e1a0 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 201e1a0:	defff804 	addi	sp,sp,-32
 201e1a4:	dfc00715 	stw	ra,28(sp)
 201e1a8:	df000615 	stw	fp,24(sp)
 201e1ac:	dc000515 	stw	r16,20(sp)
 201e1b0:	df000604 	addi	fp,sp,24
 201e1b4:	e13ffb15 	stw	r4,-20(fp)
 201e1b8:	e17ffc15 	stw	r5,-16(fp)
 201e1bc:	e1bffd15 	stw	r6,-12(fp)
 201e1c0:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 201e1c4:	d0a00117 	ldw	r2,-32764(gp)
 201e1c8:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 201e1cc:	8000041e 	bne	r16,zero,201e1e0 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 201e1d0:	d0a00117 	ldw	r2,-32764(gp)
 201e1d4:	d0e00117 	ldw	r3,-32764(gp)
 201e1d8:	1c005304 	addi	r16,r3,332
 201e1dc:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 201e1e0:	80800117 	ldw	r2,4(r16)
 201e1e4:	10800810 	cmplti	r2,r2,32
 201e1e8:	1000131e 	bne	r2,zero,201e238 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 201e1ec:	00800034 	movhi	r2,0
 201e1f0:	10800004 	addi	r2,r2,0
 201e1f4:	1000021e 	bne	r2,zero,201e200 <__register_exitproc+0x60>
	return -1;
 201e1f8:	00bfffc4 	movi	r2,-1
 201e1fc:	00003e06 	br	201e2f8 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 201e200:	01006404 	movi	r4,400
 201e204:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201e208:	1021883a 	mov	r16,r2
      if (p == NULL)
 201e20c:	8000021e 	bne	r16,zero,201e218 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 201e210:	00bfffc4 	movi	r2,-1
 201e214:	00003806 	br	201e2f8 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 201e218:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 201e21c:	d0a00117 	ldw	r2,-32764(gp)
 201e220:	10805217 	ldw	r2,328(r2)
 201e224:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 201e228:	d0a00117 	ldw	r2,-32764(gp)
 201e22c:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 201e230:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 201e234:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 201e238:	e0bffb17 	ldw	r2,-20(fp)
 201e23c:	10002426 	beq	r2,zero,201e2d0 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 201e240:	80802204 	addi	r2,r16,136
 201e244:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 201e248:	80800117 	ldw	r2,4(r16)
 201e24c:	e0fffa17 	ldw	r3,-24(fp)
 201e250:	1085883a 	add	r2,r2,r2
 201e254:	1085883a 	add	r2,r2,r2
 201e258:	1885883a 	add	r2,r3,r2
 201e25c:	e0fffd17 	ldw	r3,-12(fp)
 201e260:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 201e264:	e0bffa17 	ldw	r2,-24(fp)
 201e268:	10804017 	ldw	r2,256(r2)
 201e26c:	80c00117 	ldw	r3,4(r16)
 201e270:	01000044 	movi	r4,1
 201e274:	20c6983a 	sll	r3,r4,r3
 201e278:	10c6b03a 	or	r3,r2,r3
 201e27c:	e0bffa17 	ldw	r2,-24(fp)
 201e280:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 201e284:	80800117 	ldw	r2,4(r16)
 201e288:	e0fffa17 	ldw	r3,-24(fp)
 201e28c:	10800804 	addi	r2,r2,32
 201e290:	1085883a 	add	r2,r2,r2
 201e294:	1085883a 	add	r2,r2,r2
 201e298:	1885883a 	add	r2,r3,r2
 201e29c:	e0fffe17 	ldw	r3,-8(fp)
 201e2a0:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 201e2a4:	e0bffb17 	ldw	r2,-20(fp)
 201e2a8:	10800098 	cmpnei	r2,r2,2
 201e2ac:	1000081e 	bne	r2,zero,201e2d0 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 201e2b0:	e0bffa17 	ldw	r2,-24(fp)
 201e2b4:	10804117 	ldw	r2,260(r2)
 201e2b8:	80c00117 	ldw	r3,4(r16)
 201e2bc:	01000044 	movi	r4,1
 201e2c0:	20c6983a 	sll	r3,r4,r3
 201e2c4:	10c6b03a 	or	r3,r2,r3
 201e2c8:	e0bffa17 	ldw	r2,-24(fp)
 201e2cc:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 201e2d0:	80800117 	ldw	r2,4(r16)
 201e2d4:	10c00044 	addi	r3,r2,1
 201e2d8:	80c00115 	stw	r3,4(r16)
 201e2dc:	10800084 	addi	r2,r2,2
 201e2e0:	1085883a 	add	r2,r2,r2
 201e2e4:	1085883a 	add	r2,r2,r2
 201e2e8:	8085883a 	add	r2,r16,r2
 201e2ec:	e0fffc17 	ldw	r3,-16(fp)
 201e2f0:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 201e2f4:	0005883a 	mov	r2,zero
}
 201e2f8:	e6ffff04 	addi	sp,fp,-4
 201e2fc:	dfc00217 	ldw	ra,8(sp)
 201e300:	df000117 	ldw	fp,4(sp)
 201e304:	dc000017 	ldw	r16,0(sp)
 201e308:	dec00304 	addi	sp,sp,12
 201e30c:	f800283a 	ret

0201e310 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 201e310:	defff504 	addi	sp,sp,-44
 201e314:	dfc00a15 	stw	ra,40(sp)
 201e318:	df000915 	stw	fp,36(sp)
 201e31c:	dc800815 	stw	r18,32(sp)
 201e320:	dc400715 	stw	r17,28(sp)
 201e324:	dc000615 	stw	r16,24(sp)
 201e328:	df000904 	addi	fp,sp,36
 201e32c:	e13ffb15 	stw	r4,-20(fp)
 201e330:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 201e334:	d0a00117 	ldw	r2,-32764(gp)
 201e338:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 201e33c:	d0a00117 	ldw	r2,-32764(gp)
 201e340:	10805204 	addi	r2,r2,328
 201e344:	e0bff715 	stw	r2,-36(fp)
  while (p)
 201e348:	00006006 	br	201e4cc <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 201e34c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e350:	80800117 	ldw	r2,4(r16)
 201e354:	147fffc4 	addi	r17,r2,-1
 201e358:	00004a06 	br	201e484 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 201e35c:	00800044 	movi	r2,1
 201e360:	1444983a 	sll	r2,r2,r17
 201e364:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 201e368:	e0bffc17 	ldw	r2,-16(fp)
 201e36c:	10000826 	beq	r2,zero,201e390 <__call_exitprocs+0x80>
 201e370:	90004026 	beq	r18,zero,201e474 <__call_exitprocs+0x164>
 201e374:	88800804 	addi	r2,r17,32
 201e378:	1085883a 	add	r2,r2,r2
 201e37c:	1085883a 	add	r2,r2,r2
 201e380:	9085883a 	add	r2,r18,r2
 201e384:	10c00017 	ldw	r3,0(r2)
 201e388:	e0bffc17 	ldw	r2,-16(fp)
 201e38c:	1880391e 	bne	r3,r2,201e474 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 201e390:	88800084 	addi	r2,r17,2
 201e394:	1085883a 	add	r2,r2,r2
 201e398:	1085883a 	add	r2,r2,r2
 201e39c:	8085883a 	add	r2,r16,r2
 201e3a0:	10800017 	ldw	r2,0(r2)
 201e3a4:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 201e3a8:	80800117 	ldw	r2,4(r16)
 201e3ac:	10bfffc4 	addi	r2,r2,-1
 201e3b0:	1440041e 	bne	r2,r17,201e3c4 <__call_exitprocs+0xb4>
	    p->_ind--;
 201e3b4:	80800117 	ldw	r2,4(r16)
 201e3b8:	10bfffc4 	addi	r2,r2,-1
 201e3bc:	80800115 	stw	r2,4(r16)
 201e3c0:	00000506 	br	201e3d8 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 201e3c4:	88800084 	addi	r2,r17,2
 201e3c8:	1085883a 	add	r2,r2,r2
 201e3cc:	1085883a 	add	r2,r2,r2
 201e3d0:	8085883a 	add	r2,r16,r2
 201e3d4:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 201e3d8:	e0bff917 	ldw	r2,-28(fp)
 201e3dc:	10002726 	beq	r2,zero,201e47c <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 201e3e0:	80800117 	ldw	r2,4(r16)
 201e3e4:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 201e3e8:	90000426 	beq	r18,zero,201e3fc <__call_exitprocs+0xec>
 201e3ec:	90c04017 	ldw	r3,256(r18)
 201e3f0:	e0bff817 	ldw	r2,-32(fp)
 201e3f4:	1884703a 	and	r2,r3,r2
 201e3f8:	1000031e 	bne	r2,zero,201e408 <__call_exitprocs+0xf8>
	    fn ();
 201e3fc:	e0bff917 	ldw	r2,-28(fp)
 201e400:	103ee83a 	callr	r2
 201e404:	00001406 	br	201e458 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 201e408:	90c04117 	ldw	r3,260(r18)
 201e40c:	e0bff817 	ldw	r2,-32(fp)
 201e410:	1884703a 	and	r2,r3,r2
 201e414:	1000091e 	bne	r2,zero,201e43c <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 201e418:	8c45883a 	add	r2,r17,r17
 201e41c:	1085883a 	add	r2,r2,r2
 201e420:	9085883a 	add	r2,r18,r2
 201e424:	10c00017 	ldw	r3,0(r2)
 201e428:	e0bff917 	ldw	r2,-28(fp)
 201e42c:	180b883a 	mov	r5,r3
 201e430:	e13ffb17 	ldw	r4,-20(fp)
 201e434:	103ee83a 	callr	r2
 201e438:	00000706 	br	201e458 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 201e43c:	8c45883a 	add	r2,r17,r17
 201e440:	1085883a 	add	r2,r2,r2
 201e444:	9085883a 	add	r2,r18,r2
 201e448:	10c00017 	ldw	r3,0(r2)
 201e44c:	e0bff917 	ldw	r2,-28(fp)
 201e450:	1809883a 	mov	r4,r3
 201e454:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 201e458:	80c00117 	ldw	r3,4(r16)
 201e45c:	e0bffa17 	ldw	r2,-24(fp)
 201e460:	18bfb41e 	bne	r3,r2,201e334 <__call_exitprocs+0x24>
 201e464:	e0bff717 	ldw	r2,-36(fp)
 201e468:	10800017 	ldw	r2,0(r2)
 201e46c:	143fb11e 	bne	r2,r16,201e334 <__call_exitprocs+0x24>
 201e470:	00000306 	br	201e480 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 201e474:	0001883a 	nop
 201e478:	00000106 	br	201e480 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 201e47c:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e480:	8c7fffc4 	addi	r17,r17,-1
 201e484:	883fb50e 	bge	r17,zero,201e35c <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 201e488:	00800034 	movhi	r2,0
 201e48c:	10800004 	addi	r2,r2,0
 201e490:	10001026 	beq	r2,zero,201e4d4 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 201e494:	80800117 	ldw	r2,4(r16)
 201e498:	10000a1e 	bne	r2,zero,201e4c4 <__call_exitprocs+0x1b4>
 201e49c:	80800017 	ldw	r2,0(r16)
 201e4a0:	10000826 	beq	r2,zero,201e4c4 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 201e4a4:	80c00017 	ldw	r3,0(r16)
 201e4a8:	e0bff717 	ldw	r2,-36(fp)
 201e4ac:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 201e4b0:	8009883a 	mov	r4,r16
 201e4b4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 201e4b8:	e0bff717 	ldw	r2,-36(fp)
 201e4bc:	14000017 	ldw	r16,0(r2)
 201e4c0:	00000206 	br	201e4cc <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 201e4c4:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 201e4c8:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 201e4cc:	803f9f1e 	bne	r16,zero,201e34c <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e4d0:	00000106 	br	201e4d8 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 201e4d4:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e4d8:	0001883a 	nop
 201e4dc:	e6fffd04 	addi	sp,fp,-12
 201e4e0:	dfc00417 	ldw	ra,16(sp)
 201e4e4:	df000317 	ldw	fp,12(sp)
 201e4e8:	dc800217 	ldw	r18,8(sp)
 201e4ec:	dc400117 	ldw	r17,4(sp)
 201e4f0:	dc000017 	ldw	r16,0(sp)
 201e4f4:	dec00504 	addi	sp,sp,20
 201e4f8:	f800283a 	ret

0201e4fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201e4fc:	defffd04 	addi	sp,sp,-12
 201e500:	df000215 	stw	fp,8(sp)
 201e504:	df000204 	addi	fp,sp,8
 201e508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201e50c:	d0273245 	stb	zero,-25399(gp)
 201e510:	e0bfff17 	ldw	r2,-4(fp)
 201e514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201e518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 201e51c:	10000226 	beq	r2,zero,201e528 <_exit+0x2c>
    ALT_SIM_FAIL();
 201e520:	002af070 	cmpltui	zero,zero,43969
 201e524:	00000106 	br	201e52c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201e528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 201e52c:	003fff06 	br	201e52c <_exit+0x30>
