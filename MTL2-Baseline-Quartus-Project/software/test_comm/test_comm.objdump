
test_comm.elf:     file format elf32-littlenios2
test_comm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000e9b8 memsz 0x0000e9b8 flags r-x
    LOAD off    0x0000f9d8 vaddr 0x0200e9d8 paddr 0x020104cc align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00011fc0 vaddr 0x02011fc0 paddr 0x02011fc0 align 2**12
         filesz 0x00000000 memsz 0x000093fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e63c  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000016c  0200e86c  0200e86c  0000f86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0200e9d8  020104cc  0000f9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093fc  02011fc0  02011fc0  00011fc0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  000114cc  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0201b3bc  0201b3bc  000114cc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000114cc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000bb0  00000000  00000000  000114f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000209a1  00000000  00000000  000120a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007d69  00000000  00000000  00032a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000939f  00000000  00000000  0003a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002764  00000000  00000000  00043b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a76  00000000  00000000  000462b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00049d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0004e800  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0004e810  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00052f0a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00052f10  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00052f13  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00052f14  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00052f15  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00052f19  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00052f1d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00052f21  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00052f2a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00052f33  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00052f3c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00052f45  2**0
                  CONTENTS, READONLY
 30 .jdi          0000380b  00000000  00000000  00052f84  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005203d  00000000  00000000  0005678f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
0200e86c l    d  .rodata	00000000 .rodata
0200e9d8 l    d  .rwdata	00000000 .rwdata
02011fc0 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
0201b3bc l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_comm_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
02000814 l     F .text	00000008 __fp_unlock
02000828 l     F .text	0000019c __sinit.part.1
020009c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0200e9d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
020034b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
020035c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020035f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
020036e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020037d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020038bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
02003a90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02010440 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02003d04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
02010444 l     O .rwdata	00000004 lockid
02012000 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
02010448 l     O .rwdata	00000004 lockid
02012008 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0200573c l     F .text	00000048 OS_InitMisc
02005784 l     F .text	0000006c OS_InitRdyList
020058f0 l     F .text	000000e4 OS_InitTCBList
0200565c l     F .text	000000e0 OS_InitEventList
020057f0 l     F .text	00000080 OS_InitTaskIdle
02005870 l     F .text	00000080 OS_InitTaskStat
02005b60 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02007870 l     F .text	000000f4 OS_FlagTaskRdy
02007630 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200c410 l     F .text	00000034 alt_dev_reg
0200f3ac l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200c78c l     F .text	000002a4 altera_avalon_jtag_uart_irq
0200ca30 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200d20c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200d44c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200d8ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0200da0c l     F .text	0000003c alt_get_errno
0200da48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0201206c g     O .bss	00000004 alt_instruction_exception_handler
02010496 g     O .rwdata	00000002 OSTaskNameSize
02003284 g     F .text	00000054 _isatty_r
020039d4 g     F .text	000000bc alt_main
020006a8 g     F .text	000000c0 _puts_r
0201b2bc g     O .bss	00000100 alt_irq
02011fc0 g     O .bss	00000004 MailBox6
02002fac g     F .text	00000060 _lseek_r
02008b58 g     F .text	000000d8 OS_MemInit
020104cc g       *ABS*	00000000 __flash_rwdata_start
0200c3b0 g     F .text	00000060 OSTimeSet
020043b0 g     F .text	00000610 OSEventPendMulti
0201b3bc g       *ABS*	00000000 __alt_heap_start
0200e084 g     F .text	00000024 OSTaskCreateHook
02012098 g     O .bss	00002000 task1_stk
0201046e g     O .rwdata	00000002 OSMboxEn
02004a18 g     F .text	0000004c OSIntEnter
02002560 g     F .text	0000005c __sseek
02000b74 g     F .text	00000010 __sinit
0201047e g     O .rwdata	00000002 OSQEn
020009cc g     F .text	00000078 __sfmoreglue
02004084 g     F .text	000000cc __malloc_unlock
0200e0ec g     F .text	00000020 OSTaskStatHook
02012010 g     O .bss	00000001 OSLockNesting
020104bc g     O .rwdata	00000002 OSDataSize
02012011 g     O .bss	00000001 OSRunning
02001c4c g     F .text	0000015c memmove
0200e12c g     F .text	00000020 OSInitHookBegin
020104b4 g     O .rwdata	00000002 OSTmrSize
02000b5c g     F .text	00000018 _cleanup
02012014 g     O .bss	00000004 OSIdleCtr
0200de34 g     F .text	00000024 altera_nios2_gen2_irq_init
0200df04 g       .text	00000000 OSStartTsk
02005e90 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000000c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
020104ba g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201045a g     O .rwdata	00000002 OSEventSize
02012018 g     O .bss	00000001 OSPrioHighRdy
02003228 g     F .text	0000005c _fstat_r
0200e0a8 g     F .text	00000024 OSTaskDelHook
02011fec g     O .bss	00000004 errno
020024dc g     F .text	00000008 __seofread
0200dee4 g       .text	00000000 OSStartHighRdy
0200ae30 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02007178 g     F .text	00000060 OSFlagPendGetFlagsRdy
0201049a g     O .rwdata	00000002 OSTaskStatStkSize
020062f4 g     F .text	00000308 OSFlagAccept
0200919c g     F .text	000000b8 OSQFlush
02008c30 g     F .text	00000140 OSQAccept
02011ff8 g     O .bss	00000004 alt_argv
02018418 g       *ABS*	00000000 _gp
0200ac84 g     F .text	000001ac OSTaskCreate
0200a794 g     F .text	000004f0 OSTaskChangePrio
0201200c g     O .bss	00000004 alt_heapsem
02006164 g     F .text	00000190 OSDebugInit
0200b014 g     F .text	00000344 OSTaskDel
0200f22c g     O .rwdata	00000180 alt_fd_list
02018098 g     O .bss	00000370 OSFlagTbl
0200543c g     F .text	000000b8 OS_EventTaskRemove
0200e1b0 g     F .text	00000090 alt_find_dev
02001b04 g     F .text	00000148 memcpy
02010484 g     O .rwdata	00000002 OSRdyTblSize
02011fc4 g     O .bss	00000004 MailBox3
0200081c g     F .text	0000000c _cleanup_r
0200d990 g     F .text	0000007c alt_io_redirect
0200e86c g       *ABS*	00000000 __DTOR_END__
02000768 g     F .text	00000014 puts
0200e43c g     F .text	0000009c alt_exception_cause_generated_bad_addr
02004150 g     F .text	00000120 OSEventNameGet
02010468 g     O .rwdata	00000002 OSFlagMax
02004a64 g     F .text	000000f8 OSIntExit
020104a2 g     O .rwdata	00000002 OSTCBSize
02012019 g     O .bss	00000001 OSPrioCur
0200cc8c g     F .text	000002bc altera_avalon_jtag_uart_read
020033d0 g     F .text	00000064 .hidden __udivsi3
02003724 g     F .text	000000ac isatty
02010488 g     O .rwdata	00000002 OSStkWidth
0201047c g     O .rwdata	00000002 OSPtrSize
0201045c g     O .rwdata	00000002 OSEventTblSize
0200de58 g       .text	00000000 OSCtxSw
02011fe8 g     O .bss	00000004 __malloc_top_pad
0201201c g     O .bss	00000004 OSTCBList
02011ff0 g     O .bss	00000004 alt_fd_list_lock
02000bc4 g     F .text	000004c8 __sfvwrite_r
02018408 g     O .bss	00000c30 OSMemTbl
02012020 g     O .bss	00000001 OSTickStepState
02002434 g     F .text	00000054 _sbrk_r
02010480 g     O .rwdata	00000002 OSQMax
02019038 g     O .bss	00000800 OSTaskStatStk
02008794 g     F .text	000000f0 OSMemNameGet
02010460 g     O .rwdata	00000002 OSFlagEn
020031c8 g     F .text	00000060 _read_r
020104a6 g     O .rwdata	00000002 OSTimeTickHookEn
0200964c g     F .text	00000168 OSQPost
02007964 g     F .text	000000a4 OS_FlagUnlink
02010438 g     O .rwdata	00000004 alt_max_fd
02005a28 g     F .text	00000068 OS_MemCopy
02005a90 g     F .text	000000d0 OS_Sched
020027cc g     F .text	000000f0 _fclose_r
020086a4 g     F .text	000000f0 OSMemGet
020083c0 g     F .text	00000110 OSMboxQuery
0200b640 g     F .text	000001b4 OSTaskNameSet
02002b48 g     F .text	00000030 fflush
02011fe4 g     O .bss	00000004 __malloc_max_sbrked_mem
02012024 g     O .bss	00000004 OSCtxSwCtr
0200e10c g     F .text	00000020 OSTimeTickHook
0201046a g     O .rwdata	00000002 OSFlagNameSize
02011fc8 g     O .bss	00000004 AnimationFlagGrp
020054f4 g     F .text	00000100 OS_EventTaskRemoveMulti
020052ec g     F .text	00000150 OS_EventTaskWaitMulti
02010482 g     O .rwdata	00000002 OSQSize
020038f8 g     F .text	000000dc lseek
0200a0fc g     F .text	0000020c OSSemPend
02010418 g     O .rwdata	00000004 _global_impure_ptr
02001ed0 g     F .text	00000564 _realloc_r
0201046c g     O .rwdata	00000002 OSLowestPrio
0201b3bc g       *ABS*	00000000 __bss_end
0200d7bc g     F .text	000000f0 alt_iic_isr_register
0200e18c g     F .text	00000024 OSTCBInitHook
020104b2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0200dd2c g     F .text	00000108 alt_tick
02008154 g     F .text	00000110 OSMboxPost
02010454 g     O .rwdata	00000002 OSEventEn
020104ae g     O .rwdata	00000002 OSTmrCfgNameSize
02000b94 g     F .text	00000018 __fp_lock_all
0200d770 g     F .text	0000004c alt_ic_irq_enabled
02011fcc g     O .bss	00000004 MailBox5
02007790 g     F .text	000000e0 OS_FlagInit
0200dc90 g     F .text	0000009c alt_alarm_stop
02010490 g     O .rwdata	00000002 OSTaskIdleStkSize
02012060 g     O .bss	00000004 alt_irq_active
02009d34 g     F .text	000000b0 OSSemAccept
02008998 g     F .text	000000d8 OSMemPut
020084d0 g     F .text	000001d4 OSMemCreate
02012028 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0200f204 g     O .rwdata	00000028 alt_dev_null
020104a4 g     O .rwdata	00000002 OSTicksPerSec
0200de58 g       .text	00000000 OSIntCtxSw
0200d42c g     F .text	00000020 alt_dcache_flush_all
0201202c g     O .bss	00000004 OSTCBFreeList
020104cc g       *ABS*	00000000 __ram_rwdata_end
0200a308 g     F .text	0000016c OSSemPendAbort
02010430 g     O .rwdata	00000008 alt_dev_list
02003d40 g     F .text	00000100 write
020104a8 g     O .rwdata	00000002 OSVersionNbr
0200e9d8 g       *ABS*	00000000 __ram_rodata_end
02003630 g     F .text	000000b8 fstat
02010450 g     O .rwdata	00000004 OSEndiannessTest
02003434 g     F .text	00000058 .hidden __umodsi3
02010462 g     O .rwdata	00000002 OSFlagGrpSize
0201b3bc g       *ABS*	00000000 end
0200c644 g     F .text	00000148 altera_avalon_jtag_uart_init
02005cf8 g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0200e86c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200d284 g     F .text	0000007c alt_avalon_timer_sc_init
0200cf48 g     F .text	000002c4 altera_avalon_jtag_uart_write
02000b84 g     F .text	00000004 __sfp_lock_acquire
02001a20 g     F .text	000000e4 memchr
020059d4 g     F .text	00000054 OS_MemClr
0200df28 g     F .text	0000015c OSTaskStkInit
0200026c g     F .text	000000ac task1
02002c9c g     F .text	00000310 _free_r
02005044 g     F .text	00000198 OS_EventTaskRdy
0200e6b8 g     F .text	00000180 __call_exitprocs
02012030 g     O .bss	00000001 OSCPUUsage
02010420 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
02000318 g     F .text	000000b8 task2
02012064 g     O .bss	00000004 _alt_tick_rate
02009254 g     F .text	0000028c OSQPend
0200bf00 g     F .text	00000104 OSTimeDly
02012068 g     O .bss	00000004 _alt_nticks
02003acc g     F .text	00000104 read
0200c47c g     F .text	00000064 alt_sys_init
0200e5a0 g     F .text	00000118 __register_exitproc
02012031 g     O .bss	00000001 OSTaskCtr
02011fd0 g     O .bss	00000004 MailBox2
0200c004 g     F .text	0000017c OSTimeDlyHMSM
0200cb34 g     F .text	00000068 altera_avalon_jtag_uart_close
0200348c g     F .text	00000028 .hidden __mulsi3
0200e9d8 g       *ABS*	00000000 __ram_rwdata_start
0200e86c g       *ABS*	00000000 __ram_rodata_start
02012070 g     O .bss	00000028 __malloc_current_mallinfo
02010456 g     O .rwdata	00000002 OSEventMax
0200a474 g     F .text	00000110 OSSemPost
02004be8 g     F .text	000000dc OSSchedUnlock
0200c4e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0200e348 g     F .text	000000f4 alt_get_fd
02012034 g     O .bss	00000004 OSMemFreeList
02004d34 g     F .text	000000b0 OSStatInit
0200756c g     F .text	000000c4 OSFlagQuery
0201048c g     O .rwdata	00000002 OSTaskCreateExtEn
02002778 g     F .text	00000054 _close_r
0200e524 g     F .text	0000007c memcmp
02005024 g     F .text	00000020 OS_Dummy
0200c5a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0201b3bc g       *ABS*	00000000 __alt_stack_base
0200c5f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02002624 g     F .text	00000154 __swsetup_r
02019838 g     O .bss	000001e0 OSQTbl
02000a44 g     F .text	00000118 __sfp
0200edfc g     O .rwdata	00000408 __malloc_av_
02000b90 g     F .text	00000004 __sinit_lock_release
02012038 g     O .bss	00000004 OSTCBHighRdy
02002488 g     F .text	00000054 __sread
0201203c g     O .bss	00000004 OSQFreeList
0200e240 g     F .text	00000108 alt_find_file
0200d488 g     F .text	000000a4 alt_dev_llist_insert
02003f64 g     F .text	00000120 __malloc_lock
02003c54 g     F .text	000000b0 sbrk
02004270 g     F .text	00000140 OSEventNameSet
02002aec g     F .text	0000005c _fflush_r
02012040 g     O .bss	00000001 OSRdyGrp
02011fc0 g       *ABS*	00000000 __bss_start
02001da8 g     F .text	00000128 memset
02000574 g     F .text	00000134 main
02011ffc g     O .bss	00000004 alt_envp
02011fe0 g     O .bss	00000004 __malloc_max_total_mem
0200c540 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200e8a4 g     O .rodata	00000100 OSUnMapTbl
02010486 g     O .rwdata	00000002 OSSemEn
020071d8 g     F .text	00000394 OSFlagPost
020025bc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
020028bc g     F .text	00000014 fclose
020051dc g     F .text	00000110 OS_EventTaskWait
02014098 g     O .bss	00002000 task2_stk
02005dc4 g     F .text	000000cc OS_TaskStatStkChk
0200b358 g     F .text	00000150 OSTaskDelReq
02001214 g     F .text	0000080c _malloc_r
0201043c g     O .rwdata	00000004 alt_errno
02004cc4 g     F .text	00000070 OSStart
02016098 g     O .bss	00002000 task3_stk
02003f04 g     F .text	00000060 __env_unlock
0200108c g     F .text	000000c4 _fwalk
0200b7f4 g     F .text	000001d4 OSTaskResume
02008a70 g     F .text	000000e8 OSMemQuery
02010498 g     O .rwdata	00000002 OSTaskStatEn
02010472 g     O .rwdata	00000002 OSMemMax
020097b4 g     F .text	00000170 OSQPostFront
020032d8 g     F .text	00000084 .hidden __divsi3
02012041 g     O .bss	00000003 OSRdyTbl
0201044c g     O .rwdata	00000002 OSDebugEn
02002b78 g     F .text	00000124 _malloc_trim_r
02011fd4 g     O .bss	00000004 MailBox4
0200e86c g       *ABS*	00000000 __CTOR_END__
02010464 g     O .rwdata	00000002 OSFlagNodeSize
020104ac g     O .rwdata	00000002 OSTmrCfgMax
02008d70 g     F .text	000001ac OSQCreate
0200b4a8 g     F .text	00000198 OSTaskNameGet
0200e86c g       *ABS*	00000000 __flash_rodata_start
02009924 g     F .text	0000020c OSQPostOpt
02004de4 g     F .text	00000220 OSTimeTick
02010494 g     O .rwdata	00000002 OSTaskMax
0200e86c g       *ABS*	00000000 __DTOR_LIST__
02009de4 g     F .text	000000d8 OSSemCreate
020104b8 g     O .rwdata	00000002 OSTmrWheelSize
0201048e g     O .rwdata	00000002 OSTaskDelEn
0200a584 g     F .text	00000110 OSSemQuery
02008f1c g     F .text	00000280 OSQDel
020094e0 g     F .text	0000016c OSQPendAbort
0200c444 g     F .text	00000038 alt_irq_init
02003bd0 g     F .text	00000084 alt_release_fd
0200e4d8 g     F .text	00000014 atexit
020025c4 g     F .text	00000060 _write_r
02004b5c g     F .text	0000008c OSSchedLock
020065fc g     F .text	00000108 OSFlagCreate
0201041c g     O .rwdata	00000004 _impure_ptr
02011ff4 g     O .bss	00000004 alt_argc
020028d0 g     F .text	0000021c __sflush_r
0200d58c g     F .text	00000060 _do_dtors
0201045e g     O .rwdata	00000002 OSEventMultiEn
02006704 g     F .text	00000248 OSFlagDel
02012044 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02007fe8 g     F .text	0000016c OSMboxPendAbort
020104aa g     O .rwdata	00000002 OSTmrEn
02006bc0 g     F .text	000005b8 OSFlagPend
02000bac g     F .text	00000018 __fp_unlock_all
02010428 g     O .rwdata	00000008 alt_fs_list
02005bd4 g     F .text	00000074 OS_StrCopy
02010474 g     O .rwdata	00000002 OSMemNameSize
0200e14c g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
020104a0 g     O .rwdata	00000002 OSTCBPrioTblMax
0201049c g     O .rwdata	00000002 OSTaskStatStkChkEn
02007aa0 g     F .text	000000d4 OSMboxCreate
0200d60c g     F .text	00000050 alt_ic_isr_register
02010470 g     O .rwdata	00000002 OSMemEn
0201047a g     O .rwdata	00000002 OSMutexEn
020104cc g       *ABS*	00000000 _edata
0201b3bc g       *ABS*	00000000 _end
02012048 g     O .bss	00000001 OSIntNesting
02000230 g       *ABS*	00000000 __ram_exceptions_end
0200cb9c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0200c180 g     F .text	000001d4 OSTimeDlyResume
02006a74 g     F .text	0000014c OSFlagNameSet
02007db4 g     F .text	00000234 OSMboxPend
0200b9c8 g     F .text	000001c0 OSTaskStkChk
0200d6e4 g     F .text	0000008c alt_ic_irq_disable
02010476 g     O .rwdata	00000002 OSMemSize
020024e4 g     F .text	0000007c __swrite
02010424 g     O .rwdata	00000004 __malloc_trim_threshold
0201204c g     O .bss	00000004 OSTCBCur
0200e4ec g     F .text	00000038 exit
02010478 g     O .rwdata	00000002 OSMemTblSize
02001150 g     F .text	000000c4 _fwalk_reent
02011fd8 g     O .bss	00000004 MailBox1
0200335c g     F .text	00000074 .hidden __modsi3
02007a08 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02000b88 g     F .text	00000004 __sfp_lock_release
020049c0 g     F .text	00000058 OSInit
0200bd6c g     F .text	00000124 OSTaskQuery
02009c8c g     F .text	000000a8 OS_QInit
02005c48 g     F .text	00000054 OS_StrLen
02008884 g     F .text	00000114 OSMemNameSet
02010492 g     O .rwdata	00000002 OSTaskProfileEn
02012050 g     O .bss	00000004 OSTime
02011fdc g     O .bss	00000004 isActiveFlagGrp
02019a18 g     O .bss	00000800 OSTaskIdleStk
0200e838 g     F .text	00000034 _exit
02008264 g     F .text	0000015c OSMboxPostOpt
0200d300 g     F .text	0000012c alt_alarm_start
0200694c g     F .text	00000128 OSFlagNameGet
0200c354 g     F .text	0000005c OSTimeGet
0200300c g     F .text	000001bc __smakebuf_r
0200077c g     F .text	00000098 strlen
0200e0cc g     F .text	00000020 OSTaskSwHook
0200db34 g     F .text	0000015c open
0201a218 g     O .bss	00000b40 OSEventTbl
0201ad58 g     O .bss	00000510 OSTCBTbl
0200a694 g     F .text	00000100 OSSemSet
0200d5ec g     F .text	00000020 alt_icache_flush_all
020104c0 g     O .rwdata	00000004 alt_priority_mask
02009ebc g     F .text	00000240 OSSemDel
02012054 g     O .bss	00000004 OSFlagFreeList
020003d0 g     F .text	000001a4 task3
0200d65c g     F .text	00000088 alt_ic_irq_enable
02010458 g     O .rwdata	00000002 OSEventNameSize
02007b74 g     F .text	00000240 OSMboxDel
02012058 g     O .bss	00000001 OSStatRdy
0201b268 g     O .bss	00000054 OSTCBPrioTbl
02003e40 g     F .text	000000c4 __env_lock
0201049e g     O .rwdata	00000002 OSTaskSwHookEn
020104c4 g     O .rwdata	00000008 alt_alarm_list
02010466 g     O .rwdata	00000002 OSFlagWidth
0200d52c g     F .text	00000060 _do_ctors
020034f0 g     F .text	000000d8 close
02012004 g     O .bss	00000004 alt_envsem
0201205c g     O .bss	00000004 OSIdleCtrRun
02005004 g     F .text	00000020 OSVersion
020104b0 g     O .rwdata	00000002 OSTmrCfgWheelSize
02003838 g     F .text	00000084 alt_load
0200be90 g     F .text	00000070 OS_TaskStkClr
0201048a g     O .rwdata	00000002 OSTaskCreateEn
020055f4 g     F .text	00000068 OS_EventWaitListInit
0200e16c g     F .text	00000020 OSTaskIdleHook
02000b8c g     F .text	00000004 __sinit_lock_acquire
0200bb88 g     F .text	000001e4 OSTaskSuspend
02005c9c g     F .text	0000005c OS_TaskIdle
020104b6 g     O .rwdata	00000002 OSTmrTblSize
02009b30 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	2004a180 	call	2004a18 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080b4 	movhi	r2,514
 2000140:	10acaf04 	addi	r2,r2,-19780
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080b4 	movhi	r2,514
 2000158:	10acaf04 	addi	r2,r2,-19780
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	2004a640 	call	2004a64 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a71517 	ldw	r2,-25516(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a71517 	ldw	r2,-25516(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6a10614 	ori	gp,gp,33816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	1087f014 	ori	r2,r2,8128

    movhi r3, %hi(__bss_end)
 2000248:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 200024c:	18ecef14 	ori	r3,r3,46012

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	20038380 	call	2003838 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	20039d40 	call	20039d4 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <alt_after_alt_main>

0200026c <task1>:
#define IS_ACTIVE (OS_FLAGS) 0x0001
#define ANIMATION (OS_FLAGS) 0x0001

/*  */
void task1(void* pdata)
{
 200026c:	defff504 	addi	sp,sp,-44
 2000270:	dfc00a15 	stw	ra,40(sp)
 2000274:	df000915 	stw	fp,36(sp)
 2000278:	df000904 	addi	fp,sp,36
 200027c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  while (1)
  { 
    printf("Hello from task1\n");
 2000280:	01008074 	movhi	r4,513
 2000284:	213a1b04 	addi	r4,r4,-6036
 2000288:	20007680 	call	2000768 <puts>

    double vector_x=2/3;
 200028c:	e03ff915 	stw	zero,-28(fp)
 2000290:	e03ffa15 	stw	zero,-24(fp)
	double vector_y=3/4;
 2000294:	e03ffb15 	stw	zero,-20(fp)
 2000298:	e03ffc15 	stw	zero,-16(fp)
	double speed = 6/9;
 200029c:	e03ffd15 	stw	zero,-12(fp)
 20002a0:	e03ffe15 	stw	zero,-8(fp)

    OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002a4:	d0a6f117 	ldw	r2,-25660(gp)
 20002a8:	e0fff804 	addi	r3,fp,-32
 20002ac:	d8c00015 	stw	r3,0(sp)
 20002b0:	000f883a 	mov	r7,zero
 20002b4:	01802084 	movi	r6,130
 20002b8:	01400044 	movi	r5,1
 20002bc:	1009883a 	mov	r4,r2
 20002c0:	2006bc00 	call	2006bc0 <OSFlagPend>
    OSMboxPost(MailBox1, &vector_x);
 20002c4:	d0a6f017 	ldw	r2,-25664(gp)
 20002c8:	e0fff904 	addi	r3,fp,-28
 20002cc:	180b883a 	mov	r5,r3
 20002d0:	1009883a 	mov	r4,r2
 20002d4:	20081540 	call	2008154 <OSMboxPost>
    OSMboxPost(MailBox2, &vector_y);
 20002d8:	d0a6ee17 	ldw	r2,-25672(gp)
 20002dc:	e0fffb04 	addi	r3,fp,-20
 20002e0:	180b883a 	mov	r5,r3
 20002e4:	1009883a 	mov	r4,r2
 20002e8:	20081540 	call	2008154 <OSMboxPost>
    OSMboxPost(MailBox3, &speed);
 20002ec:	d0a6eb17 	ldw	r2,-25684(gp)
 20002f0:	e0fffd04 	addi	r3,fp,-12
 20002f4:	180b883a 	mov	r5,r3
 20002f8:	1009883a 	mov	r4,r2
 20002fc:	20081540 	call	2008154 <OSMboxPost>
    OSTimeDlyHMSM(0, 0, 3, 0);
 2000300:	000f883a 	mov	r7,zero
 2000304:	018000c4 	movi	r6,3
 2000308:	000b883a 	mov	r5,zero
 200030c:	0009883a 	mov	r4,zero
 2000310:	200c0040 	call	200c004 <OSTimeDlyHMSM>
  }
 2000314:	003fda06 	br	2000280 <task1+0x14>

02000318 <task2>:
}

void task2(void* pdata)
{
 2000318:	defff804 	addi	sp,sp,-32
 200031c:	dfc00715 	stw	ra,28(sp)
 2000320:	df000615 	stw	fp,24(sp)
 2000324:	df000604 	addi	fp,sp,24
 2000328:	e13fff15 	stw	r4,-4(fp)

  INT8U err;
  INT8U opt_task2;
  while (1)
  { 
   opt_task2= OS_FLAG_SET;
 200032c:	00800044 	movi	r2,1
 2000330:	e0bffa05 	stb	r2,-24(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000334:	d0a6ec17 	ldw	r2,-25680(gp)
 2000338:	e0fffa03 	ldbu	r3,-24(fp)
 200033c:	e13ffe04 	addi	r4,fp,-8
 2000340:	200f883a 	mov	r7,r4
 2000344:	180d883a 	mov	r6,r3
 2000348:	01400044 	movi	r5,1
 200034c:	1009883a 	mov	r4,r2
 2000350:	20071d80 	call	20071d8 <OSFlagPost>
   float *vector_x = OSMboxPend(MailBox3,0,&err);
 2000354:	d0a6eb17 	ldw	r2,-25684(gp)
 2000358:	e0fffe04 	addi	r3,fp,-8
 200035c:	180d883a 	mov	r6,r3
 2000360:	000b883a 	mov	r5,zero
 2000364:	1009883a 	mov	r4,r2
 2000368:	2007db40 	call	2007db4 <OSMboxPend>
 200036c:	e0bffb15 	stw	r2,-20(fp)
   float *vector_y = OSMboxPend(MailBox4,0,&err);
 2000370:	d0a6ef17 	ldw	r2,-25668(gp)
 2000374:	e0fffe04 	addi	r3,fp,-8
 2000378:	180d883a 	mov	r6,r3
 200037c:	000b883a 	mov	r5,zero
 2000380:	1009883a 	mov	r4,r2
 2000384:	2007db40 	call	2007db4 <OSMboxPend>
 2000388:	e0bffc15 	stw	r2,-16(fp)
   float *speed_msg = OSMboxPend(MailBox5,0,&err);
 200038c:	d0a6ed17 	ldw	r2,-25676(gp)
 2000390:	e0fffe04 	addi	r3,fp,-8
 2000394:	180d883a 	mov	r6,r3
 2000398:	000b883a 	mov	r5,zero
 200039c:	1009883a 	mov	r4,r2
 20003a0:	2007db40 	call	2007db4 <OSMboxPend>
 20003a4:	e0bffd15 	stw	r2,-12(fp)

   opt_task2= OS_FLAG_CLR;
 20003a8:	e03ffa05 	stb	zero,-24(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20003ac:	d0a6ec17 	ldw	r2,-25680(gp)
 20003b0:	e0fffa03 	ldbu	r3,-24(fp)
 20003b4:	e13ffe04 	addi	r4,fp,-8
 20003b8:	200f883a 	mov	r7,r4
 20003bc:	180d883a 	mov	r6,r3
 20003c0:	01400044 	movi	r5,1
 20003c4:	1009883a 	mov	r4,r2
 20003c8:	20071d80 	call	20071d8 <OSFlagPost>
  }
 20003cc:	003fd706 	br	200032c <task2+0x14>

020003d0 <task3>:
}


void task3(void* pdata)
{
 20003d0:	defff204 	addi	sp,sp,-56
 20003d4:	dfc00d15 	stw	ra,52(sp)
 20003d8:	df000c15 	stw	fp,48(sp)
 20003dc:	df000c04 	addi	fp,sp,48
 20003e0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U opt_task1;

	float * XdirSend = (float*) MEM_NIOS_PI_BASE+1;
 20003e4:	00800834 	movhi	r2,32
 20003e8:	10800104 	addi	r2,r2,4
 20003ec:	e0bff415 	stw	r2,-48(fp)
	float * YdirSend = (float*) MEM_NIOS_PI_BASE+2;
 20003f0:	00800834 	movhi	r2,32
 20003f4:	10800204 	addi	r2,r2,8
 20003f8:	e0bff515 	stw	r2,-44(fp)
	int * isSend = (int*) MEM_NIOS_PI_BASE+3;
 20003fc:	00800834 	movhi	r2,32
 2000400:	10800304 	addi	r2,r2,12
 2000404:	e0bff615 	stw	r2,-40(fp)
	int * isReceived = (int*) MEM_NIOS_PI_BASE+4;
 2000408:	00800834 	movhi	r2,32
 200040c:	10800404 	addi	r2,r2,16
 2000410:	e0bff715 	stw	r2,-36(fp)
	//int * AckSend     = (int*) MEM_NIOS_PI_BASE+5;
	//int * AckReceived     = (int*) MEM_NIOS_PI_BASE+6;
	float * XdirRec = (float*) MEM_NIOS_PI_BASE+7;
 2000414:	00800834 	movhi	r2,32
 2000418:	10800704 	addi	r2,r2,28
 200041c:	e0bff815 	stw	r2,-32(fp)
	float * YdirRec = (float*) MEM_NIOS_PI_BASE+8;
 2000420:	00800834 	movhi	r2,32
 2000424:	10800804 	addi	r2,r2,32
 2000428:	e0bff915 	stw	r2,-28(fp)
	float * speedRec = (float*) MEM_NIOS_PI_BASE+9;
 200042c:	00800834 	movhi	r2,32
 2000430:	10800904 	addi	r2,r2,36
 2000434:	e0bffa15 	stw	r2,-24(fp)
  {
	  // est-ce qu'on envoie ou on recoit ?
	  // Si on envoie, recup des infos de la tache 1 + transmettre à la tache 2 + envoir SPI + block la tache 1 avec flag CLEAR
	  // Si on recoit, on transmet a la tache 2 + deblocque la tache 1 avec SET si task2 a finit l'animation (flag_animation task2 est CLR)

	 if(*isSend){
 2000438:	e0bff617 	ldw	r2,-40(fp)
 200043c:	10800017 	ldw	r2,0(r2)
 2000440:	10003226 	beq	r2,zero,200050c <task3+0x13c>

		  float *vector_x = OSMboxPend(MailBox1,0,&err);
 2000444:	d0a6f017 	ldw	r2,-25664(gp)
 2000448:	e0fffe44 	addi	r3,fp,-7
 200044c:	180d883a 	mov	r6,r3
 2000450:	000b883a 	mov	r5,zero
 2000454:	1009883a 	mov	r4,r2
 2000458:	2007db40 	call	2007db4 <OSMboxPend>
 200045c:	e0bffb15 	stw	r2,-20(fp)
		  float *vector_y = OSMboxPend(MailBox2,0,&err);
 2000460:	d0a6ee17 	ldw	r2,-25672(gp)
 2000464:	e0fffe44 	addi	r3,fp,-7
 2000468:	180d883a 	mov	r6,r3
 200046c:	000b883a 	mov	r5,zero
 2000470:	1009883a 	mov	r4,r2
 2000474:	2007db40 	call	2007db4 <OSMboxPend>
 2000478:	e0bffc15 	stw	r2,-16(fp)
		  float *speed_msg = OSMboxPend(MailBox3,0,&err);
 200047c:	d0a6eb17 	ldw	r2,-25684(gp)
 2000480:	e0fffe44 	addi	r3,fp,-7
 2000484:	180d883a 	mov	r6,r3
 2000488:	000b883a 	mov	r5,zero
 200048c:	1009883a 	mov	r4,r2
 2000490:	2007db40 	call	2007db4 <OSMboxPend>
 2000494:	e0bffd15 	stw	r2,-12(fp)

		  OSMboxPost(MailBox4, vector_x);
 2000498:	d0a6ef17 	ldw	r2,-25668(gp)
 200049c:	e17ffb17 	ldw	r5,-20(fp)
 20004a0:	1009883a 	mov	r4,r2
 20004a4:	20081540 	call	2008154 <OSMboxPost>
		  OSMboxPost(MailBox5, vector_y);
 20004a8:	d0a6ed17 	ldw	r2,-25676(gp)
 20004ac:	e17ffc17 	ldw	r5,-16(fp)
 20004b0:	1009883a 	mov	r4,r2
 20004b4:	20081540 	call	2008154 <OSMboxPost>
		  OSMboxPost(MailBox6, speed_msg);
 20004b8:	d0a6ea17 	ldw	r2,-25688(gp)
 20004bc:	e17ffd17 	ldw	r5,-12(fp)
 20004c0:	1009883a 	mov	r4,r2
 20004c4:	20081540 	call	2008154 <OSMboxPost>

		  *XdirSend = *vector_x;
 20004c8:	e0bffb17 	ldw	r2,-20(fp)
 20004cc:	10c00017 	ldw	r3,0(r2)
 20004d0:	e0bff417 	ldw	r2,-48(fp)
 20004d4:	10c00015 	stw	r3,0(r2)
		  *YdirSend = *vector_y;
 20004d8:	e0bffc17 	ldw	r2,-16(fp)
 20004dc:	10c00017 	ldw	r3,0(r2)
 20004e0:	e0bff517 	ldw	r2,-44(fp)
 20004e4:	10c00015 	stw	r3,0(r2)

		  opt_task1=OS_FLAG_CLR;
 20004e8:	e03ffe05 	stb	zero,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20004ec:	d0a6f117 	ldw	r2,-25660(gp)
 20004f0:	e0fffe03 	ldbu	r3,-8(fp)
 20004f4:	e13ffe44 	addi	r4,fp,-7
 20004f8:	200f883a 	mov	r7,r4
 20004fc:	180d883a 	mov	r6,r3
 2000500:	01400044 	movi	r5,1
 2000504:	1009883a 	mov	r4,r2
 2000508:	20071d80 	call	20071d8 <OSFlagPost>
	  }

	  if(*isReceived){
 200050c:	e0bff717 	ldw	r2,-36(fp)
 2000510:	10800017 	ldw	r2,0(r2)
 2000514:	103fc826 	beq	r2,zero,2000438 <task3+0x68>

		  OSMboxPost(MailBox4, XdirRec);
 2000518:	d0a6ef17 	ldw	r2,-25668(gp)
 200051c:	e17ff817 	ldw	r5,-32(fp)
 2000520:	1009883a 	mov	r4,r2
 2000524:	20081540 	call	2008154 <OSMboxPost>
		  OSMboxPost(MailBox5, YdirRec);
 2000528:	d0a6ed17 	ldw	r2,-25676(gp)
 200052c:	e17ff917 	ldw	r5,-28(fp)
 2000530:	1009883a 	mov	r4,r2
 2000534:	20081540 	call	2008154 <OSMboxPost>
		  OSMboxPost(MailBox6, speedRec);
 2000538:	d0a6ea17 	ldw	r2,-25688(gp)
 200053c:	e17ffa17 	ldw	r5,-24(fp)
 2000540:	1009883a 	mov	r4,r2
 2000544:	20081540 	call	2008154 <OSMboxPost>
		  opt_task1=OS_FLAG_SET;
 2000548:	00800044 	movi	r2,1
 200054c:	e0bffe05 	stb	r2,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2000550:	d0a6f117 	ldw	r2,-25660(gp)
 2000554:	e0fffe03 	ldbu	r3,-8(fp)
 2000558:	e13ffe44 	addi	r4,fp,-7
 200055c:	200f883a 	mov	r7,r4
 2000560:	180d883a 	mov	r6,r3
 2000564:	01400044 	movi	r5,1
 2000568:	1009883a 	mov	r4,r2
 200056c:	20071d80 	call	20071d8 <OSFlagPost>
	  }
  }
 2000570:	003fb106 	br	2000438 <task3+0x68>

02000574 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2000574:	defff904 	addi	sp,sp,-28
 2000578:	dfc00615 	stw	ra,24(sp)
 200057c:	df000515 	stw	fp,20(sp)
 2000580:	df000504 	addi	fp,sp,20

  MailBox1 = OSMboxCreate(NULL);
 2000584:	0009883a 	mov	r4,zero
 2000588:	2007aa00 	call	2007aa0 <OSMboxCreate>
 200058c:	d0a6f015 	stw	r2,-25664(gp)
  MailBox2 = OSMboxCreate(NULL);
 2000590:	0009883a 	mov	r4,zero
 2000594:	2007aa00 	call	2007aa0 <OSMboxCreate>
 2000598:	d0a6ee15 	stw	r2,-25672(gp)
  MailBox3 = OSMboxCreate(NULL);
 200059c:	0009883a 	mov	r4,zero
 20005a0:	2007aa00 	call	2007aa0 <OSMboxCreate>
 20005a4:	d0a6eb15 	stw	r2,-25684(gp)

  MailBox4 = OSMboxCreate(NULL);
 20005a8:	0009883a 	mov	r4,zero
 20005ac:	2007aa00 	call	2007aa0 <OSMboxCreate>
 20005b0:	d0a6ef15 	stw	r2,-25668(gp)
  MailBox5 = OSMboxCreate(NULL);
 20005b4:	0009883a 	mov	r4,zero
 20005b8:	2007aa00 	call	2007aa0 <OSMboxCreate>
 20005bc:	d0a6ed15 	stw	r2,-25676(gp)
  MailBox6 = OSMboxCreate(NULL);
 20005c0:	0009883a 	mov	r4,zero
 20005c4:	2007aa00 	call	2007aa0 <OSMboxCreate>
 20005c8:	d0a6ea15 	stw	r2,-25688(gp)

  OSTaskCreateExt(task1,
 20005cc:	d8000415 	stw	zero,16(sp)
 20005d0:	d8000315 	stw	zero,12(sp)
 20005d4:	00820004 	movi	r2,2048
 20005d8:	d8800215 	stw	r2,8(sp)
 20005dc:	00808074 	movhi	r2,513
 20005e0:	10882604 	addi	r2,r2,8344
 20005e4:	d8800115 	stw	r2,4(sp)
 20005e8:	00800044 	movi	r2,1
 20005ec:	d8800015 	stw	r2,0(sp)
 20005f0:	01c00044 	movi	r7,1
 20005f4:	01808074 	movhi	r6,513
 20005f8:	31902504 	addi	r6,r6,16532
 20005fc:	000b883a 	mov	r5,zero
 2000600:	01008034 	movhi	r4,512
 2000604:	21009b04 	addi	r4,r4,620
 2000608:	200ae300 	call	200ae30 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
 200060c:	d8000415 	stw	zero,16(sp)
 2000610:	d8000315 	stw	zero,12(sp)
 2000614:	00820004 	movi	r2,2048
 2000618:	d8800215 	stw	r2,8(sp)
 200061c:	00808074 	movhi	r2,513
 2000620:	10902604 	addi	r2,r2,16536
 2000624:	d8800115 	stw	r2,4(sp)
 2000628:	00800084 	movi	r2,2
 200062c:	d8800015 	stw	r2,0(sp)
 2000630:	01c00084 	movi	r7,2
 2000634:	01808074 	movhi	r6,513
 2000638:	31982504 	addi	r6,r6,24724
 200063c:	000b883a 	mov	r5,zero
 2000640:	01008034 	movhi	r4,512
 2000644:	2100c604 	addi	r4,r4,792
 2000648:	200ae300 	call	200ae30 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 200064c:	d8000415 	stw	zero,16(sp)
 2000650:	d8000315 	stw	zero,12(sp)
 2000654:	00820004 	movi	r2,2048
 2000658:	d8800215 	stw	r2,8(sp)
 200065c:	00808074 	movhi	r2,513
 2000660:	10982604 	addi	r2,r2,24728
 2000664:	d8800115 	stw	r2,4(sp)
 2000668:	008000c4 	movi	r2,3
 200066c:	d8800015 	stw	r2,0(sp)
 2000670:	01c000c4 	movi	r7,3
 2000674:	018080b4 	movhi	r6,514
 2000678:	31a02504 	addi	r6,r6,-32620
 200067c:	000b883a 	mov	r5,zero
 2000680:	01008034 	movhi	r4,512
 2000684:	2100f404 	addi	r4,r4,976
 2000688:	200ae300 	call	200ae30 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
 200068c:	2004cc40 	call	2004cc4 <OSStart>
  return 0;
 2000690:	0005883a 	mov	r2,zero
}
 2000694:	e037883a 	mov	sp,fp
 2000698:	dfc00117 	ldw	ra,4(sp)
 200069c:	df000017 	ldw	fp,0(sp)
 20006a0:	dec00204 	addi	sp,sp,8
 20006a4:	f800283a 	ret

020006a8 <_puts_r>:
 20006a8:	defff604 	addi	sp,sp,-40
 20006ac:	dc000715 	stw	r16,28(sp)
 20006b0:	2021883a 	mov	r16,r4
 20006b4:	2809883a 	mov	r4,r5
 20006b8:	dc400815 	stw	r17,32(sp)
 20006bc:	dfc00915 	stw	ra,36(sp)
 20006c0:	2823883a 	mov	r17,r5
 20006c4:	200077c0 	call	200077c <strlen>
 20006c8:	10c00044 	addi	r3,r2,1
 20006cc:	d8800115 	stw	r2,4(sp)
 20006d0:	00808074 	movhi	r2,513
 20006d4:	10ba2004 	addi	r2,r2,-6016
 20006d8:	d8800215 	stw	r2,8(sp)
 20006dc:	00800044 	movi	r2,1
 20006e0:	d8800315 	stw	r2,12(sp)
 20006e4:	00800084 	movi	r2,2
 20006e8:	dc400015 	stw	r17,0(sp)
 20006ec:	d8c00615 	stw	r3,24(sp)
 20006f0:	dec00415 	stw	sp,16(sp)
 20006f4:	d8800515 	stw	r2,20(sp)
 20006f8:	80000226 	beq	r16,zero,2000704 <_puts_r+0x5c>
 20006fc:	80800e17 	ldw	r2,56(r16)
 2000700:	10001426 	beq	r2,zero,2000754 <_puts_r+0xac>
 2000704:	81400217 	ldw	r5,8(r16)
 2000708:	2880030b 	ldhu	r2,12(r5)
 200070c:	10c8000c 	andi	r3,r2,8192
 2000710:	1800061e 	bne	r3,zero,200072c <_puts_r+0x84>
 2000714:	29001917 	ldw	r4,100(r5)
 2000718:	00f7ffc4 	movi	r3,-8193
 200071c:	10880014 	ori	r2,r2,8192
 2000720:	20c6703a 	and	r3,r4,r3
 2000724:	2880030d 	sth	r2,12(r5)
 2000728:	28c01915 	stw	r3,100(r5)
 200072c:	d9800404 	addi	r6,sp,16
 2000730:	8009883a 	mov	r4,r16
 2000734:	2000bc40 	call	2000bc4 <__sfvwrite_r>
 2000738:	1000091e 	bne	r2,zero,2000760 <_puts_r+0xb8>
 200073c:	00800284 	movi	r2,10
 2000740:	dfc00917 	ldw	ra,36(sp)
 2000744:	dc400817 	ldw	r17,32(sp)
 2000748:	dc000717 	ldw	r16,28(sp)
 200074c:	dec00a04 	addi	sp,sp,40
 2000750:	f800283a 	ret
 2000754:	8009883a 	mov	r4,r16
 2000758:	2000b740 	call	2000b74 <__sinit>
 200075c:	003fe906 	br	2000704 <_puts_r+0x5c>
 2000760:	00bfffc4 	movi	r2,-1
 2000764:	003ff606 	br	2000740 <_puts_r+0x98>

02000768 <puts>:
 2000768:	00808074 	movhi	r2,513
 200076c:	10810704 	addi	r2,r2,1052
 2000770:	200b883a 	mov	r5,r4
 2000774:	11000017 	ldw	r4,0(r2)
 2000778:	20006a81 	jmpi	20006a8 <_puts_r>

0200077c <strlen>:
 200077c:	208000cc 	andi	r2,r4,3
 2000780:	10002026 	beq	r2,zero,2000804 <strlen+0x88>
 2000784:	20800007 	ldb	r2,0(r4)
 2000788:	10002026 	beq	r2,zero,200080c <strlen+0x90>
 200078c:	2005883a 	mov	r2,r4
 2000790:	00000206 	br	200079c <strlen+0x20>
 2000794:	10c00007 	ldb	r3,0(r2)
 2000798:	18001826 	beq	r3,zero,20007fc <strlen+0x80>
 200079c:	10800044 	addi	r2,r2,1
 20007a0:	10c000cc 	andi	r3,r2,3
 20007a4:	183ffb1e 	bne	r3,zero,2000794 <strlen+0x18>
 20007a8:	10c00017 	ldw	r3,0(r2)
 20007ac:	01ffbff4 	movhi	r7,65279
 20007b0:	39ffbfc4 	addi	r7,r7,-257
 20007b4:	00ca303a 	nor	r5,zero,r3
 20007b8:	01a02074 	movhi	r6,32897
 20007bc:	19c7883a 	add	r3,r3,r7
 20007c0:	31a02004 	addi	r6,r6,-32640
 20007c4:	1946703a 	and	r3,r3,r5
 20007c8:	1986703a 	and	r3,r3,r6
 20007cc:	1800091e 	bne	r3,zero,20007f4 <strlen+0x78>
 20007d0:	10800104 	addi	r2,r2,4
 20007d4:	10c00017 	ldw	r3,0(r2)
 20007d8:	19cb883a 	add	r5,r3,r7
 20007dc:	00c6303a 	nor	r3,zero,r3
 20007e0:	28c6703a 	and	r3,r5,r3
 20007e4:	1986703a 	and	r3,r3,r6
 20007e8:	183ff926 	beq	r3,zero,20007d0 <strlen+0x54>
 20007ec:	00000106 	br	20007f4 <strlen+0x78>
 20007f0:	10800044 	addi	r2,r2,1
 20007f4:	10c00007 	ldb	r3,0(r2)
 20007f8:	183ffd1e 	bne	r3,zero,20007f0 <strlen+0x74>
 20007fc:	1105c83a 	sub	r2,r2,r4
 2000800:	f800283a 	ret
 2000804:	2005883a 	mov	r2,r4
 2000808:	003fe706 	br	20007a8 <strlen+0x2c>
 200080c:	0005883a 	mov	r2,zero
 2000810:	f800283a 	ret

02000814 <__fp_unlock>:
 2000814:	0005883a 	mov	r2,zero
 2000818:	f800283a 	ret

0200081c <_cleanup_r>:
 200081c:	01408034 	movhi	r5,512
 2000820:	2949f304 	addi	r5,r5,10188
 2000824:	20011501 	jmpi	2001150 <_fwalk_reent>

02000828 <__sinit.part.1>:
 2000828:	defff704 	addi	sp,sp,-36
 200082c:	00c08034 	movhi	r3,512
 2000830:	dfc00815 	stw	ra,32(sp)
 2000834:	ddc00715 	stw	r23,28(sp)
 2000838:	dd800615 	stw	r22,24(sp)
 200083c:	dd400515 	stw	r21,20(sp)
 2000840:	dd000415 	stw	r20,16(sp)
 2000844:	dcc00315 	stw	r19,12(sp)
 2000848:	dc800215 	stw	r18,8(sp)
 200084c:	dc400115 	stw	r17,4(sp)
 2000850:	dc000015 	stw	r16,0(sp)
 2000854:	18c20704 	addi	r3,r3,2076
 2000858:	24000117 	ldw	r16,4(r4)
 200085c:	20c00f15 	stw	r3,60(r4)
 2000860:	2080bb04 	addi	r2,r4,748
 2000864:	00c000c4 	movi	r3,3
 2000868:	20c0b915 	stw	r3,740(r4)
 200086c:	2080ba15 	stw	r2,744(r4)
 2000870:	2000b815 	stw	zero,736(r4)
 2000874:	05c00204 	movi	r23,8
 2000878:	00800104 	movi	r2,4
 200087c:	2025883a 	mov	r18,r4
 2000880:	b80d883a 	mov	r6,r23
 2000884:	81001704 	addi	r4,r16,92
 2000888:	000b883a 	mov	r5,zero
 200088c:	80000015 	stw	zero,0(r16)
 2000890:	80000115 	stw	zero,4(r16)
 2000894:	80000215 	stw	zero,8(r16)
 2000898:	8080030d 	sth	r2,12(r16)
 200089c:	80001915 	stw	zero,100(r16)
 20008a0:	8000038d 	sth	zero,14(r16)
 20008a4:	80000415 	stw	zero,16(r16)
 20008a8:	80000515 	stw	zero,20(r16)
 20008ac:	80000615 	stw	zero,24(r16)
 20008b0:	2001da80 	call	2001da8 <memset>
 20008b4:	05808034 	movhi	r22,512
 20008b8:	94400217 	ldw	r17,8(r18)
 20008bc:	05408034 	movhi	r21,512
 20008c0:	05008034 	movhi	r20,512
 20008c4:	04c08034 	movhi	r19,512
 20008c8:	b5892204 	addi	r22,r22,9352
 20008cc:	ad493904 	addi	r21,r21,9444
 20008d0:	a5095804 	addi	r20,r20,9568
 20008d4:	9cc96f04 	addi	r19,r19,9660
 20008d8:	85800815 	stw	r22,32(r16)
 20008dc:	85400915 	stw	r21,36(r16)
 20008e0:	85000a15 	stw	r20,40(r16)
 20008e4:	84c00b15 	stw	r19,44(r16)
 20008e8:	84000715 	stw	r16,28(r16)
 20008ec:	00800284 	movi	r2,10
 20008f0:	8880030d 	sth	r2,12(r17)
 20008f4:	00800044 	movi	r2,1
 20008f8:	b80d883a 	mov	r6,r23
 20008fc:	89001704 	addi	r4,r17,92
 2000900:	000b883a 	mov	r5,zero
 2000904:	88000015 	stw	zero,0(r17)
 2000908:	88000115 	stw	zero,4(r17)
 200090c:	88000215 	stw	zero,8(r17)
 2000910:	88001915 	stw	zero,100(r17)
 2000914:	8880038d 	sth	r2,14(r17)
 2000918:	88000415 	stw	zero,16(r17)
 200091c:	88000515 	stw	zero,20(r17)
 2000920:	88000615 	stw	zero,24(r17)
 2000924:	2001da80 	call	2001da8 <memset>
 2000928:	94000317 	ldw	r16,12(r18)
 200092c:	00800484 	movi	r2,18
 2000930:	8c400715 	stw	r17,28(r17)
 2000934:	8d800815 	stw	r22,32(r17)
 2000938:	8d400915 	stw	r21,36(r17)
 200093c:	8d000a15 	stw	r20,40(r17)
 2000940:	8cc00b15 	stw	r19,44(r17)
 2000944:	8080030d 	sth	r2,12(r16)
 2000948:	00800084 	movi	r2,2
 200094c:	80000015 	stw	zero,0(r16)
 2000950:	80000115 	stw	zero,4(r16)
 2000954:	80000215 	stw	zero,8(r16)
 2000958:	80001915 	stw	zero,100(r16)
 200095c:	8080038d 	sth	r2,14(r16)
 2000960:	80000415 	stw	zero,16(r16)
 2000964:	80000515 	stw	zero,20(r16)
 2000968:	80000615 	stw	zero,24(r16)
 200096c:	b80d883a 	mov	r6,r23
 2000970:	000b883a 	mov	r5,zero
 2000974:	81001704 	addi	r4,r16,92
 2000978:	2001da80 	call	2001da8 <memset>
 200097c:	00800044 	movi	r2,1
 2000980:	84000715 	stw	r16,28(r16)
 2000984:	85800815 	stw	r22,32(r16)
 2000988:	85400915 	stw	r21,36(r16)
 200098c:	85000a15 	stw	r20,40(r16)
 2000990:	84c00b15 	stw	r19,44(r16)
 2000994:	90800e15 	stw	r2,56(r18)
 2000998:	dfc00817 	ldw	ra,32(sp)
 200099c:	ddc00717 	ldw	r23,28(sp)
 20009a0:	dd800617 	ldw	r22,24(sp)
 20009a4:	dd400517 	ldw	r21,20(sp)
 20009a8:	dd000417 	ldw	r20,16(sp)
 20009ac:	dcc00317 	ldw	r19,12(sp)
 20009b0:	dc800217 	ldw	r18,8(sp)
 20009b4:	dc400117 	ldw	r17,4(sp)
 20009b8:	dc000017 	ldw	r16,0(sp)
 20009bc:	dec00904 	addi	sp,sp,36
 20009c0:	f800283a 	ret

020009c4 <__fp_lock>:
 20009c4:	0005883a 	mov	r2,zero
 20009c8:	f800283a 	ret

020009cc <__sfmoreglue>:
 20009cc:	defffc04 	addi	sp,sp,-16
 20009d0:	dc800215 	stw	r18,8(sp)
 20009d4:	2825883a 	mov	r18,r5
 20009d8:	dc000015 	stw	r16,0(sp)
 20009dc:	01401a04 	movi	r5,104
 20009e0:	2021883a 	mov	r16,r4
 20009e4:	913fffc4 	addi	r4,r18,-1
 20009e8:	dfc00315 	stw	ra,12(sp)
 20009ec:	dc400115 	stw	r17,4(sp)
 20009f0:	200348c0 	call	200348c <__mulsi3>
 20009f4:	8009883a 	mov	r4,r16
 20009f8:	11401d04 	addi	r5,r2,116
 20009fc:	1023883a 	mov	r17,r2
 2000a00:	20012140 	call	2001214 <_malloc_r>
 2000a04:	1021883a 	mov	r16,r2
 2000a08:	10000726 	beq	r2,zero,2000a28 <__sfmoreglue+0x5c>
 2000a0c:	11000304 	addi	r4,r2,12
 2000a10:	10000015 	stw	zero,0(r2)
 2000a14:	14800115 	stw	r18,4(r2)
 2000a18:	11000215 	stw	r4,8(r2)
 2000a1c:	89801a04 	addi	r6,r17,104
 2000a20:	000b883a 	mov	r5,zero
 2000a24:	2001da80 	call	2001da8 <memset>
 2000a28:	8005883a 	mov	r2,r16
 2000a2c:	dfc00317 	ldw	ra,12(sp)
 2000a30:	dc800217 	ldw	r18,8(sp)
 2000a34:	dc400117 	ldw	r17,4(sp)
 2000a38:	dc000017 	ldw	r16,0(sp)
 2000a3c:	dec00404 	addi	sp,sp,16
 2000a40:	f800283a 	ret

02000a44 <__sfp>:
 2000a44:	defffb04 	addi	sp,sp,-20
 2000a48:	dc000015 	stw	r16,0(sp)
 2000a4c:	04008074 	movhi	r16,513
 2000a50:	84010604 	addi	r16,r16,1048
 2000a54:	dcc00315 	stw	r19,12(sp)
 2000a58:	2027883a 	mov	r19,r4
 2000a5c:	81000017 	ldw	r4,0(r16)
 2000a60:	dfc00415 	stw	ra,16(sp)
 2000a64:	dc800215 	stw	r18,8(sp)
 2000a68:	20800e17 	ldw	r2,56(r4)
 2000a6c:	dc400115 	stw	r17,4(sp)
 2000a70:	1000021e 	bne	r2,zero,2000a7c <__sfp+0x38>
 2000a74:	20008280 	call	2000828 <__sinit.part.1>
 2000a78:	81000017 	ldw	r4,0(r16)
 2000a7c:	2480b804 	addi	r18,r4,736
 2000a80:	047fffc4 	movi	r17,-1
 2000a84:	91000117 	ldw	r4,4(r18)
 2000a88:	94000217 	ldw	r16,8(r18)
 2000a8c:	213fffc4 	addi	r4,r4,-1
 2000a90:	20000a16 	blt	r4,zero,2000abc <__sfp+0x78>
 2000a94:	8080030f 	ldh	r2,12(r16)
 2000a98:	10000c26 	beq	r2,zero,2000acc <__sfp+0x88>
 2000a9c:	80c01d04 	addi	r3,r16,116
 2000aa0:	00000206 	br	2000aac <__sfp+0x68>
 2000aa4:	18bfe60f 	ldh	r2,-104(r3)
 2000aa8:	10000826 	beq	r2,zero,2000acc <__sfp+0x88>
 2000aac:	213fffc4 	addi	r4,r4,-1
 2000ab0:	1c3ffd04 	addi	r16,r3,-12
 2000ab4:	18c01a04 	addi	r3,r3,104
 2000ab8:	247ffa1e 	bne	r4,r17,2000aa4 <__sfp+0x60>
 2000abc:	90800017 	ldw	r2,0(r18)
 2000ac0:	10001d26 	beq	r2,zero,2000b38 <__sfp+0xf4>
 2000ac4:	1025883a 	mov	r18,r2
 2000ac8:	003fee06 	br	2000a84 <__sfp+0x40>
 2000acc:	00bfffc4 	movi	r2,-1
 2000ad0:	8080038d 	sth	r2,14(r16)
 2000ad4:	00800044 	movi	r2,1
 2000ad8:	8080030d 	sth	r2,12(r16)
 2000adc:	80001915 	stw	zero,100(r16)
 2000ae0:	80000015 	stw	zero,0(r16)
 2000ae4:	80000215 	stw	zero,8(r16)
 2000ae8:	80000115 	stw	zero,4(r16)
 2000aec:	80000415 	stw	zero,16(r16)
 2000af0:	80000515 	stw	zero,20(r16)
 2000af4:	80000615 	stw	zero,24(r16)
 2000af8:	01800204 	movi	r6,8
 2000afc:	000b883a 	mov	r5,zero
 2000b00:	81001704 	addi	r4,r16,92
 2000b04:	2001da80 	call	2001da8 <memset>
 2000b08:	8005883a 	mov	r2,r16
 2000b0c:	80000c15 	stw	zero,48(r16)
 2000b10:	80000d15 	stw	zero,52(r16)
 2000b14:	80001115 	stw	zero,68(r16)
 2000b18:	80001215 	stw	zero,72(r16)
 2000b1c:	dfc00417 	ldw	ra,16(sp)
 2000b20:	dcc00317 	ldw	r19,12(sp)
 2000b24:	dc800217 	ldw	r18,8(sp)
 2000b28:	dc400117 	ldw	r17,4(sp)
 2000b2c:	dc000017 	ldw	r16,0(sp)
 2000b30:	dec00504 	addi	sp,sp,20
 2000b34:	f800283a 	ret
 2000b38:	01400104 	movi	r5,4
 2000b3c:	9809883a 	mov	r4,r19
 2000b40:	20009cc0 	call	20009cc <__sfmoreglue>
 2000b44:	90800015 	stw	r2,0(r18)
 2000b48:	103fde1e 	bne	r2,zero,2000ac4 <__sfp+0x80>
 2000b4c:	00800304 	movi	r2,12
 2000b50:	98800015 	stw	r2,0(r19)
 2000b54:	0005883a 	mov	r2,zero
 2000b58:	003ff006 	br	2000b1c <__sfp+0xd8>

02000b5c <_cleanup>:
 2000b5c:	00808074 	movhi	r2,513
 2000b60:	10810604 	addi	r2,r2,1048
 2000b64:	11000017 	ldw	r4,0(r2)
 2000b68:	01408034 	movhi	r5,512
 2000b6c:	2949f304 	addi	r5,r5,10188
 2000b70:	20011501 	jmpi	2001150 <_fwalk_reent>

02000b74 <__sinit>:
 2000b74:	20800e17 	ldw	r2,56(r4)
 2000b78:	10000126 	beq	r2,zero,2000b80 <__sinit+0xc>
 2000b7c:	f800283a 	ret
 2000b80:	20008281 	jmpi	2000828 <__sinit.part.1>

02000b84 <__sfp_lock_acquire>:
 2000b84:	f800283a 	ret

02000b88 <__sfp_lock_release>:
 2000b88:	f800283a 	ret

02000b8c <__sinit_lock_acquire>:
 2000b8c:	f800283a 	ret

02000b90 <__sinit_lock_release>:
 2000b90:	f800283a 	ret

02000b94 <__fp_lock_all>:
 2000b94:	00808074 	movhi	r2,513
 2000b98:	10810704 	addi	r2,r2,1052
 2000b9c:	11000017 	ldw	r4,0(r2)
 2000ba0:	01408034 	movhi	r5,512
 2000ba4:	29427104 	addi	r5,r5,2500
 2000ba8:	200108c1 	jmpi	200108c <_fwalk>

02000bac <__fp_unlock_all>:
 2000bac:	00808074 	movhi	r2,513
 2000bb0:	10810704 	addi	r2,r2,1052
 2000bb4:	11000017 	ldw	r4,0(r2)
 2000bb8:	01408034 	movhi	r5,512
 2000bbc:	29420504 	addi	r5,r5,2068
 2000bc0:	200108c1 	jmpi	200108c <_fwalk>

02000bc4 <__sfvwrite_r>:
 2000bc4:	30800217 	ldw	r2,8(r6)
 2000bc8:	10006726 	beq	r2,zero,2000d68 <__sfvwrite_r+0x1a4>
 2000bcc:	28c0030b 	ldhu	r3,12(r5)
 2000bd0:	defff404 	addi	sp,sp,-48
 2000bd4:	dd400715 	stw	r21,28(sp)
 2000bd8:	dd000615 	stw	r20,24(sp)
 2000bdc:	dc000215 	stw	r16,8(sp)
 2000be0:	dfc00b15 	stw	ra,44(sp)
 2000be4:	df000a15 	stw	fp,40(sp)
 2000be8:	ddc00915 	stw	r23,36(sp)
 2000bec:	dd800815 	stw	r22,32(sp)
 2000bf0:	dcc00515 	stw	r19,20(sp)
 2000bf4:	dc800415 	stw	r18,16(sp)
 2000bf8:	dc400315 	stw	r17,12(sp)
 2000bfc:	1880020c 	andi	r2,r3,8
 2000c00:	2821883a 	mov	r16,r5
 2000c04:	202b883a 	mov	r21,r4
 2000c08:	3029883a 	mov	r20,r6
 2000c0c:	10002726 	beq	r2,zero,2000cac <__sfvwrite_r+0xe8>
 2000c10:	28800417 	ldw	r2,16(r5)
 2000c14:	10002526 	beq	r2,zero,2000cac <__sfvwrite_r+0xe8>
 2000c18:	1880008c 	andi	r2,r3,2
 2000c1c:	a4400017 	ldw	r17,0(r20)
 2000c20:	10002a26 	beq	r2,zero,2000ccc <__sfvwrite_r+0x108>
 2000c24:	05a00034 	movhi	r22,32768
 2000c28:	0027883a 	mov	r19,zero
 2000c2c:	0025883a 	mov	r18,zero
 2000c30:	b5bf0004 	addi	r22,r22,-1024
 2000c34:	980d883a 	mov	r6,r19
 2000c38:	a809883a 	mov	r4,r21
 2000c3c:	90004626 	beq	r18,zero,2000d58 <__sfvwrite_r+0x194>
 2000c40:	900f883a 	mov	r7,r18
 2000c44:	b480022e 	bgeu	r22,r18,2000c50 <__sfvwrite_r+0x8c>
 2000c48:	01e00034 	movhi	r7,32768
 2000c4c:	39ff0004 	addi	r7,r7,-1024
 2000c50:	80800917 	ldw	r2,36(r16)
 2000c54:	81400717 	ldw	r5,28(r16)
 2000c58:	103ee83a 	callr	r2
 2000c5c:	00805a0e 	bge	zero,r2,2000dc8 <__sfvwrite_r+0x204>
 2000c60:	a0c00217 	ldw	r3,8(r20)
 2000c64:	98a7883a 	add	r19,r19,r2
 2000c68:	90a5c83a 	sub	r18,r18,r2
 2000c6c:	1885c83a 	sub	r2,r3,r2
 2000c70:	a0800215 	stw	r2,8(r20)
 2000c74:	103fef1e 	bne	r2,zero,2000c34 <__sfvwrite_r+0x70>
 2000c78:	0005883a 	mov	r2,zero
 2000c7c:	dfc00b17 	ldw	ra,44(sp)
 2000c80:	df000a17 	ldw	fp,40(sp)
 2000c84:	ddc00917 	ldw	r23,36(sp)
 2000c88:	dd800817 	ldw	r22,32(sp)
 2000c8c:	dd400717 	ldw	r21,28(sp)
 2000c90:	dd000617 	ldw	r20,24(sp)
 2000c94:	dcc00517 	ldw	r19,20(sp)
 2000c98:	dc800417 	ldw	r18,16(sp)
 2000c9c:	dc400317 	ldw	r17,12(sp)
 2000ca0:	dc000217 	ldw	r16,8(sp)
 2000ca4:	dec00c04 	addi	sp,sp,48
 2000ca8:	f800283a 	ret
 2000cac:	800b883a 	mov	r5,r16
 2000cb0:	a809883a 	mov	r4,r21
 2000cb4:	20026240 	call	2002624 <__swsetup_r>
 2000cb8:	1000ee1e 	bne	r2,zero,2001074 <__sfvwrite_r+0x4b0>
 2000cbc:	80c0030b 	ldhu	r3,12(r16)
 2000cc0:	a4400017 	ldw	r17,0(r20)
 2000cc4:	1880008c 	andi	r2,r3,2
 2000cc8:	103fd61e 	bne	r2,zero,2000c24 <__sfvwrite_r+0x60>
 2000ccc:	1880004c 	andi	r2,r3,1
 2000cd0:	1000421e 	bne	r2,zero,2000ddc <__sfvwrite_r+0x218>
 2000cd4:	0039883a 	mov	fp,zero
 2000cd8:	0025883a 	mov	r18,zero
 2000cdc:	90001a26 	beq	r18,zero,2000d48 <__sfvwrite_r+0x184>
 2000ce0:	1880800c 	andi	r2,r3,512
 2000ce4:	84c00217 	ldw	r19,8(r16)
 2000ce8:	10002126 	beq	r2,zero,2000d70 <__sfvwrite_r+0x1ac>
 2000cec:	982f883a 	mov	r23,r19
 2000cf0:	94c09636 	bltu	r18,r19,2000f4c <__sfvwrite_r+0x388>
 2000cf4:	1881200c 	andi	r2,r3,1152
 2000cf8:	1000a11e 	bne	r2,zero,2000f80 <__sfvwrite_r+0x3bc>
 2000cfc:	81000017 	ldw	r4,0(r16)
 2000d00:	b80d883a 	mov	r6,r23
 2000d04:	e00b883a 	mov	r5,fp
 2000d08:	2001c4c0 	call	2001c4c <memmove>
 2000d0c:	80c00217 	ldw	r3,8(r16)
 2000d10:	81000017 	ldw	r4,0(r16)
 2000d14:	9005883a 	mov	r2,r18
 2000d18:	1ce7c83a 	sub	r19,r3,r19
 2000d1c:	25cf883a 	add	r7,r4,r23
 2000d20:	84c00215 	stw	r19,8(r16)
 2000d24:	81c00015 	stw	r7,0(r16)
 2000d28:	a0c00217 	ldw	r3,8(r20)
 2000d2c:	e0b9883a 	add	fp,fp,r2
 2000d30:	90a5c83a 	sub	r18,r18,r2
 2000d34:	18a7c83a 	sub	r19,r3,r2
 2000d38:	a4c00215 	stw	r19,8(r20)
 2000d3c:	983fce26 	beq	r19,zero,2000c78 <__sfvwrite_r+0xb4>
 2000d40:	80c0030b 	ldhu	r3,12(r16)
 2000d44:	903fe61e 	bne	r18,zero,2000ce0 <__sfvwrite_r+0x11c>
 2000d48:	8f000017 	ldw	fp,0(r17)
 2000d4c:	8c800117 	ldw	r18,4(r17)
 2000d50:	8c400204 	addi	r17,r17,8
 2000d54:	003fe106 	br	2000cdc <__sfvwrite_r+0x118>
 2000d58:	8cc00017 	ldw	r19,0(r17)
 2000d5c:	8c800117 	ldw	r18,4(r17)
 2000d60:	8c400204 	addi	r17,r17,8
 2000d64:	003fb306 	br	2000c34 <__sfvwrite_r+0x70>
 2000d68:	0005883a 	mov	r2,zero
 2000d6c:	f800283a 	ret
 2000d70:	81000017 	ldw	r4,0(r16)
 2000d74:	80800417 	ldw	r2,16(r16)
 2000d78:	11005a36 	bltu	r2,r4,2000ee4 <__sfvwrite_r+0x320>
 2000d7c:	85c00517 	ldw	r23,20(r16)
 2000d80:	95c05836 	bltu	r18,r23,2000ee4 <__sfvwrite_r+0x320>
 2000d84:	00a00034 	movhi	r2,32768
 2000d88:	10bfffc4 	addi	r2,r2,-1
 2000d8c:	9009883a 	mov	r4,r18
 2000d90:	1480012e 	bgeu	r2,r18,2000d98 <__sfvwrite_r+0x1d4>
 2000d94:	1009883a 	mov	r4,r2
 2000d98:	b80b883a 	mov	r5,r23
 2000d9c:	20032d80 	call	20032d8 <__divsi3>
 2000da0:	b80b883a 	mov	r5,r23
 2000da4:	1009883a 	mov	r4,r2
 2000da8:	200348c0 	call	200348c <__mulsi3>
 2000dac:	81400717 	ldw	r5,28(r16)
 2000db0:	80c00917 	ldw	r3,36(r16)
 2000db4:	100f883a 	mov	r7,r2
 2000db8:	e00d883a 	mov	r6,fp
 2000dbc:	a809883a 	mov	r4,r21
 2000dc0:	183ee83a 	callr	r3
 2000dc4:	00bfd816 	blt	zero,r2,2000d28 <__sfvwrite_r+0x164>
 2000dc8:	8080030b 	ldhu	r2,12(r16)
 2000dcc:	10801014 	ori	r2,r2,64
 2000dd0:	8080030d 	sth	r2,12(r16)
 2000dd4:	00bfffc4 	movi	r2,-1
 2000dd8:	003fa806 	br	2000c7c <__sfvwrite_r+0xb8>
 2000ddc:	0027883a 	mov	r19,zero
 2000de0:	0011883a 	mov	r8,zero
 2000de4:	0039883a 	mov	fp,zero
 2000de8:	0025883a 	mov	r18,zero
 2000dec:	90001f26 	beq	r18,zero,2000e6c <__sfvwrite_r+0x2a8>
 2000df0:	40005a26 	beq	r8,zero,2000f5c <__sfvwrite_r+0x398>
 2000df4:	982d883a 	mov	r22,r19
 2000df8:	94c0012e 	bgeu	r18,r19,2000e00 <__sfvwrite_r+0x23c>
 2000dfc:	902d883a 	mov	r22,r18
 2000e00:	81000017 	ldw	r4,0(r16)
 2000e04:	80800417 	ldw	r2,16(r16)
 2000e08:	b02f883a 	mov	r23,r22
 2000e0c:	81c00517 	ldw	r7,20(r16)
 2000e10:	1100032e 	bgeu	r2,r4,2000e20 <__sfvwrite_r+0x25c>
 2000e14:	80c00217 	ldw	r3,8(r16)
 2000e18:	38c7883a 	add	r3,r7,r3
 2000e1c:	1d801816 	blt	r3,r22,2000e80 <__sfvwrite_r+0x2bc>
 2000e20:	b1c03e16 	blt	r22,r7,2000f1c <__sfvwrite_r+0x358>
 2000e24:	80800917 	ldw	r2,36(r16)
 2000e28:	81400717 	ldw	r5,28(r16)
 2000e2c:	e00d883a 	mov	r6,fp
 2000e30:	da000115 	stw	r8,4(sp)
 2000e34:	a809883a 	mov	r4,r21
 2000e38:	103ee83a 	callr	r2
 2000e3c:	102f883a 	mov	r23,r2
 2000e40:	da000117 	ldw	r8,4(sp)
 2000e44:	00bfe00e 	bge	zero,r2,2000dc8 <__sfvwrite_r+0x204>
 2000e48:	9de7c83a 	sub	r19,r19,r23
 2000e4c:	98001f26 	beq	r19,zero,2000ecc <__sfvwrite_r+0x308>
 2000e50:	a0800217 	ldw	r2,8(r20)
 2000e54:	e5f9883a 	add	fp,fp,r23
 2000e58:	95e5c83a 	sub	r18,r18,r23
 2000e5c:	15efc83a 	sub	r23,r2,r23
 2000e60:	a5c00215 	stw	r23,8(r20)
 2000e64:	b83f8426 	beq	r23,zero,2000c78 <__sfvwrite_r+0xb4>
 2000e68:	903fe11e 	bne	r18,zero,2000df0 <__sfvwrite_r+0x22c>
 2000e6c:	8f000017 	ldw	fp,0(r17)
 2000e70:	8c800117 	ldw	r18,4(r17)
 2000e74:	0011883a 	mov	r8,zero
 2000e78:	8c400204 	addi	r17,r17,8
 2000e7c:	003fdb06 	br	2000dec <__sfvwrite_r+0x228>
 2000e80:	180d883a 	mov	r6,r3
 2000e84:	e00b883a 	mov	r5,fp
 2000e88:	da000115 	stw	r8,4(sp)
 2000e8c:	d8c00015 	stw	r3,0(sp)
 2000e90:	2001c4c0 	call	2001c4c <memmove>
 2000e94:	d8c00017 	ldw	r3,0(sp)
 2000e98:	80800017 	ldw	r2,0(r16)
 2000e9c:	800b883a 	mov	r5,r16
 2000ea0:	a809883a 	mov	r4,r21
 2000ea4:	10c5883a 	add	r2,r2,r3
 2000ea8:	80800015 	stw	r2,0(r16)
 2000eac:	d8c00015 	stw	r3,0(sp)
 2000eb0:	2002aec0 	call	2002aec <_fflush_r>
 2000eb4:	d8c00017 	ldw	r3,0(sp)
 2000eb8:	da000117 	ldw	r8,4(sp)
 2000ebc:	103fc21e 	bne	r2,zero,2000dc8 <__sfvwrite_r+0x204>
 2000ec0:	182f883a 	mov	r23,r3
 2000ec4:	9de7c83a 	sub	r19,r19,r23
 2000ec8:	983fe11e 	bne	r19,zero,2000e50 <__sfvwrite_r+0x28c>
 2000ecc:	800b883a 	mov	r5,r16
 2000ed0:	a809883a 	mov	r4,r21
 2000ed4:	2002aec0 	call	2002aec <_fflush_r>
 2000ed8:	103fbb1e 	bne	r2,zero,2000dc8 <__sfvwrite_r+0x204>
 2000edc:	0011883a 	mov	r8,zero
 2000ee0:	003fdb06 	br	2000e50 <__sfvwrite_r+0x28c>
 2000ee4:	94c0012e 	bgeu	r18,r19,2000eec <__sfvwrite_r+0x328>
 2000ee8:	9027883a 	mov	r19,r18
 2000eec:	980d883a 	mov	r6,r19
 2000ef0:	e00b883a 	mov	r5,fp
 2000ef4:	2001c4c0 	call	2001c4c <memmove>
 2000ef8:	80800217 	ldw	r2,8(r16)
 2000efc:	80c00017 	ldw	r3,0(r16)
 2000f00:	14c5c83a 	sub	r2,r2,r19
 2000f04:	1cc7883a 	add	r3,r3,r19
 2000f08:	80800215 	stw	r2,8(r16)
 2000f0c:	80c00015 	stw	r3,0(r16)
 2000f10:	10004326 	beq	r2,zero,2001020 <__sfvwrite_r+0x45c>
 2000f14:	9805883a 	mov	r2,r19
 2000f18:	003f8306 	br	2000d28 <__sfvwrite_r+0x164>
 2000f1c:	b00d883a 	mov	r6,r22
 2000f20:	e00b883a 	mov	r5,fp
 2000f24:	da000115 	stw	r8,4(sp)
 2000f28:	2001c4c0 	call	2001c4c <memmove>
 2000f2c:	80800217 	ldw	r2,8(r16)
 2000f30:	80c00017 	ldw	r3,0(r16)
 2000f34:	da000117 	ldw	r8,4(sp)
 2000f38:	1585c83a 	sub	r2,r2,r22
 2000f3c:	1dad883a 	add	r22,r3,r22
 2000f40:	80800215 	stw	r2,8(r16)
 2000f44:	85800015 	stw	r22,0(r16)
 2000f48:	003fbf06 	br	2000e48 <__sfvwrite_r+0x284>
 2000f4c:	81000017 	ldw	r4,0(r16)
 2000f50:	9027883a 	mov	r19,r18
 2000f54:	902f883a 	mov	r23,r18
 2000f58:	003f6906 	br	2000d00 <__sfvwrite_r+0x13c>
 2000f5c:	900d883a 	mov	r6,r18
 2000f60:	01400284 	movi	r5,10
 2000f64:	e009883a 	mov	r4,fp
 2000f68:	2001a200 	call	2001a20 <memchr>
 2000f6c:	10003e26 	beq	r2,zero,2001068 <__sfvwrite_r+0x4a4>
 2000f70:	10800044 	addi	r2,r2,1
 2000f74:	1727c83a 	sub	r19,r2,fp
 2000f78:	02000044 	movi	r8,1
 2000f7c:	003f9d06 	br	2000df4 <__sfvwrite_r+0x230>
 2000f80:	80800517 	ldw	r2,20(r16)
 2000f84:	81400417 	ldw	r5,16(r16)
 2000f88:	81c00017 	ldw	r7,0(r16)
 2000f8c:	10a7883a 	add	r19,r2,r2
 2000f90:	9885883a 	add	r2,r19,r2
 2000f94:	1026d7fa 	srli	r19,r2,31
 2000f98:	396dc83a 	sub	r22,r7,r5
 2000f9c:	b1000044 	addi	r4,r22,1
 2000fa0:	9885883a 	add	r2,r19,r2
 2000fa4:	1027d07a 	srai	r19,r2,1
 2000fa8:	2485883a 	add	r2,r4,r18
 2000fac:	980d883a 	mov	r6,r19
 2000fb0:	9880022e 	bgeu	r19,r2,2000fbc <__sfvwrite_r+0x3f8>
 2000fb4:	1027883a 	mov	r19,r2
 2000fb8:	100d883a 	mov	r6,r2
 2000fbc:	18c1000c 	andi	r3,r3,1024
 2000fc0:	18001c26 	beq	r3,zero,2001034 <__sfvwrite_r+0x470>
 2000fc4:	300b883a 	mov	r5,r6
 2000fc8:	a809883a 	mov	r4,r21
 2000fcc:	20012140 	call	2001214 <_malloc_r>
 2000fd0:	102f883a 	mov	r23,r2
 2000fd4:	10002926 	beq	r2,zero,200107c <__sfvwrite_r+0x4b8>
 2000fd8:	81400417 	ldw	r5,16(r16)
 2000fdc:	b00d883a 	mov	r6,r22
 2000fe0:	1009883a 	mov	r4,r2
 2000fe4:	2001b040 	call	2001b04 <memcpy>
 2000fe8:	8080030b 	ldhu	r2,12(r16)
 2000fec:	00fedfc4 	movi	r3,-1153
 2000ff0:	10c4703a 	and	r2,r2,r3
 2000ff4:	10802014 	ori	r2,r2,128
 2000ff8:	8080030d 	sth	r2,12(r16)
 2000ffc:	bd89883a 	add	r4,r23,r22
 2001000:	9d8fc83a 	sub	r7,r19,r22
 2001004:	85c00415 	stw	r23,16(r16)
 2001008:	84c00515 	stw	r19,20(r16)
 200100c:	81000015 	stw	r4,0(r16)
 2001010:	9027883a 	mov	r19,r18
 2001014:	81c00215 	stw	r7,8(r16)
 2001018:	902f883a 	mov	r23,r18
 200101c:	003f3806 	br	2000d00 <__sfvwrite_r+0x13c>
 2001020:	800b883a 	mov	r5,r16
 2001024:	a809883a 	mov	r4,r21
 2001028:	2002aec0 	call	2002aec <_fflush_r>
 200102c:	103fb926 	beq	r2,zero,2000f14 <__sfvwrite_r+0x350>
 2001030:	003f6506 	br	2000dc8 <__sfvwrite_r+0x204>
 2001034:	a809883a 	mov	r4,r21
 2001038:	2001ed00 	call	2001ed0 <_realloc_r>
 200103c:	102f883a 	mov	r23,r2
 2001040:	103fee1e 	bne	r2,zero,2000ffc <__sfvwrite_r+0x438>
 2001044:	81400417 	ldw	r5,16(r16)
 2001048:	a809883a 	mov	r4,r21
 200104c:	2002c9c0 	call	2002c9c <_free_r>
 2001050:	8080030b 	ldhu	r2,12(r16)
 2001054:	00ffdfc4 	movi	r3,-129
 2001058:	1884703a 	and	r2,r3,r2
 200105c:	00c00304 	movi	r3,12
 2001060:	a8c00015 	stw	r3,0(r21)
 2001064:	003f5906 	br	2000dcc <__sfvwrite_r+0x208>
 2001068:	94c00044 	addi	r19,r18,1
 200106c:	02000044 	movi	r8,1
 2001070:	003f6006 	br	2000df4 <__sfvwrite_r+0x230>
 2001074:	00bfffc4 	movi	r2,-1
 2001078:	003f0006 	br	2000c7c <__sfvwrite_r+0xb8>
 200107c:	00800304 	movi	r2,12
 2001080:	a8800015 	stw	r2,0(r21)
 2001084:	8080030b 	ldhu	r2,12(r16)
 2001088:	003f5006 	br	2000dcc <__sfvwrite_r+0x208>

0200108c <_fwalk>:
 200108c:	defff704 	addi	sp,sp,-36
 2001090:	dd000415 	stw	r20,16(sp)
 2001094:	dfc00815 	stw	ra,32(sp)
 2001098:	ddc00715 	stw	r23,28(sp)
 200109c:	dd800615 	stw	r22,24(sp)
 20010a0:	dd400515 	stw	r21,20(sp)
 20010a4:	dcc00315 	stw	r19,12(sp)
 20010a8:	dc800215 	stw	r18,8(sp)
 20010ac:	dc400115 	stw	r17,4(sp)
 20010b0:	dc000015 	stw	r16,0(sp)
 20010b4:	2500b804 	addi	r20,r4,736
 20010b8:	a0002326 	beq	r20,zero,2001148 <_fwalk+0xbc>
 20010bc:	282b883a 	mov	r21,r5
 20010c0:	002f883a 	mov	r23,zero
 20010c4:	05800044 	movi	r22,1
 20010c8:	04ffffc4 	movi	r19,-1
 20010cc:	a4400117 	ldw	r17,4(r20)
 20010d0:	a4800217 	ldw	r18,8(r20)
 20010d4:	8c7fffc4 	addi	r17,r17,-1
 20010d8:	88000d16 	blt	r17,zero,2001110 <_fwalk+0x84>
 20010dc:	94000304 	addi	r16,r18,12
 20010e0:	94800384 	addi	r18,r18,14
 20010e4:	8080000b 	ldhu	r2,0(r16)
 20010e8:	8c7fffc4 	addi	r17,r17,-1
 20010ec:	813ffd04 	addi	r4,r16,-12
 20010f0:	b080042e 	bgeu	r22,r2,2001104 <_fwalk+0x78>
 20010f4:	9080000f 	ldh	r2,0(r18)
 20010f8:	14c00226 	beq	r2,r19,2001104 <_fwalk+0x78>
 20010fc:	a83ee83a 	callr	r21
 2001100:	b8aeb03a 	or	r23,r23,r2
 2001104:	84001a04 	addi	r16,r16,104
 2001108:	94801a04 	addi	r18,r18,104
 200110c:	8cfff51e 	bne	r17,r19,20010e4 <_fwalk+0x58>
 2001110:	a5000017 	ldw	r20,0(r20)
 2001114:	a03fed1e 	bne	r20,zero,20010cc <_fwalk+0x40>
 2001118:	b805883a 	mov	r2,r23
 200111c:	dfc00817 	ldw	ra,32(sp)
 2001120:	ddc00717 	ldw	r23,28(sp)
 2001124:	dd800617 	ldw	r22,24(sp)
 2001128:	dd400517 	ldw	r21,20(sp)
 200112c:	dd000417 	ldw	r20,16(sp)
 2001130:	dcc00317 	ldw	r19,12(sp)
 2001134:	dc800217 	ldw	r18,8(sp)
 2001138:	dc400117 	ldw	r17,4(sp)
 200113c:	dc000017 	ldw	r16,0(sp)
 2001140:	dec00904 	addi	sp,sp,36
 2001144:	f800283a 	ret
 2001148:	002f883a 	mov	r23,zero
 200114c:	003ff206 	br	2001118 <_fwalk+0x8c>

02001150 <_fwalk_reent>:
 2001150:	defff704 	addi	sp,sp,-36
 2001154:	dd000415 	stw	r20,16(sp)
 2001158:	dfc00815 	stw	ra,32(sp)
 200115c:	ddc00715 	stw	r23,28(sp)
 2001160:	dd800615 	stw	r22,24(sp)
 2001164:	dd400515 	stw	r21,20(sp)
 2001168:	dcc00315 	stw	r19,12(sp)
 200116c:	dc800215 	stw	r18,8(sp)
 2001170:	dc400115 	stw	r17,4(sp)
 2001174:	dc000015 	stw	r16,0(sp)
 2001178:	2500b804 	addi	r20,r4,736
 200117c:	a0002326 	beq	r20,zero,200120c <_fwalk_reent+0xbc>
 2001180:	282b883a 	mov	r21,r5
 2001184:	2027883a 	mov	r19,r4
 2001188:	002f883a 	mov	r23,zero
 200118c:	05800044 	movi	r22,1
 2001190:	04bfffc4 	movi	r18,-1
 2001194:	a4400117 	ldw	r17,4(r20)
 2001198:	a4000217 	ldw	r16,8(r20)
 200119c:	8c7fffc4 	addi	r17,r17,-1
 20011a0:	88000c16 	blt	r17,zero,20011d4 <_fwalk_reent+0x84>
 20011a4:	84000304 	addi	r16,r16,12
 20011a8:	8080000b 	ldhu	r2,0(r16)
 20011ac:	8c7fffc4 	addi	r17,r17,-1
 20011b0:	817ffd04 	addi	r5,r16,-12
 20011b4:	b080052e 	bgeu	r22,r2,20011cc <_fwalk_reent+0x7c>
 20011b8:	8080008f 	ldh	r2,2(r16)
 20011bc:	9809883a 	mov	r4,r19
 20011c0:	14800226 	beq	r2,r18,20011cc <_fwalk_reent+0x7c>
 20011c4:	a83ee83a 	callr	r21
 20011c8:	b8aeb03a 	or	r23,r23,r2
 20011cc:	84001a04 	addi	r16,r16,104
 20011d0:	8cbff51e 	bne	r17,r18,20011a8 <_fwalk_reent+0x58>
 20011d4:	a5000017 	ldw	r20,0(r20)
 20011d8:	a03fee1e 	bne	r20,zero,2001194 <_fwalk_reent+0x44>
 20011dc:	b805883a 	mov	r2,r23
 20011e0:	dfc00817 	ldw	ra,32(sp)
 20011e4:	ddc00717 	ldw	r23,28(sp)
 20011e8:	dd800617 	ldw	r22,24(sp)
 20011ec:	dd400517 	ldw	r21,20(sp)
 20011f0:	dd000417 	ldw	r20,16(sp)
 20011f4:	dcc00317 	ldw	r19,12(sp)
 20011f8:	dc800217 	ldw	r18,8(sp)
 20011fc:	dc400117 	ldw	r17,4(sp)
 2001200:	dc000017 	ldw	r16,0(sp)
 2001204:	dec00904 	addi	sp,sp,36
 2001208:	f800283a 	ret
 200120c:	002f883a 	mov	r23,zero
 2001210:	003ff206 	br	20011dc <_fwalk_reent+0x8c>

02001214 <_malloc_r>:
 2001214:	defff504 	addi	sp,sp,-44
 2001218:	dc800315 	stw	r18,12(sp)
 200121c:	dfc00a15 	stw	ra,40(sp)
 2001220:	df000915 	stw	fp,36(sp)
 2001224:	ddc00815 	stw	r23,32(sp)
 2001228:	dd800715 	stw	r22,28(sp)
 200122c:	dd400615 	stw	r21,24(sp)
 2001230:	dd000515 	stw	r20,20(sp)
 2001234:	dcc00415 	stw	r19,16(sp)
 2001238:	dc400215 	stw	r17,8(sp)
 200123c:	dc000115 	stw	r16,4(sp)
 2001240:	288002c4 	addi	r2,r5,11
 2001244:	00c00584 	movi	r3,22
 2001248:	2025883a 	mov	r18,r4
 200124c:	18807f2e 	bgeu	r3,r2,200144c <_malloc_r+0x238>
 2001250:	047ffe04 	movi	r17,-8
 2001254:	1462703a 	and	r17,r2,r17
 2001258:	8800a316 	blt	r17,zero,20014e8 <_malloc_r+0x2d4>
 200125c:	8940a236 	bltu	r17,r5,20014e8 <_malloc_r+0x2d4>
 2001260:	2003f640 	call	2003f64 <__malloc_lock>
 2001264:	00807dc4 	movi	r2,503
 2001268:	1441e92e 	bgeu	r2,r17,2001a10 <_malloc_r+0x7fc>
 200126c:	8804d27a 	srli	r2,r17,9
 2001270:	1000a126 	beq	r2,zero,20014f8 <_malloc_r+0x2e4>
 2001274:	00c00104 	movi	r3,4
 2001278:	18811e36 	bltu	r3,r2,20016f4 <_malloc_r+0x4e0>
 200127c:	8804d1ba 	srli	r2,r17,6
 2001280:	12000e44 	addi	r8,r2,57
 2001284:	11c00e04 	addi	r7,r2,56
 2001288:	4209883a 	add	r4,r8,r8
 200128c:	04c08074 	movhi	r19,513
 2001290:	2109883a 	add	r4,r4,r4
 2001294:	9cfb7f04 	addi	r19,r19,-4612
 2001298:	2109883a 	add	r4,r4,r4
 200129c:	9909883a 	add	r4,r19,r4
 20012a0:	24000117 	ldw	r16,4(r4)
 20012a4:	213ffe04 	addi	r4,r4,-8
 20012a8:	24009726 	beq	r4,r16,2001508 <_malloc_r+0x2f4>
 20012ac:	80800117 	ldw	r2,4(r16)
 20012b0:	01bfff04 	movi	r6,-4
 20012b4:	014003c4 	movi	r5,15
 20012b8:	1184703a 	and	r2,r2,r6
 20012bc:	1447c83a 	sub	r3,r2,r17
 20012c0:	28c00716 	blt	r5,r3,20012e0 <_malloc_r+0xcc>
 20012c4:	1800920e 	bge	r3,zero,2001510 <_malloc_r+0x2fc>
 20012c8:	84000317 	ldw	r16,12(r16)
 20012cc:	24008e26 	beq	r4,r16,2001508 <_malloc_r+0x2f4>
 20012d0:	80800117 	ldw	r2,4(r16)
 20012d4:	1184703a 	and	r2,r2,r6
 20012d8:	1447c83a 	sub	r3,r2,r17
 20012dc:	28fff90e 	bge	r5,r3,20012c4 <_malloc_r+0xb0>
 20012e0:	3809883a 	mov	r4,r7
 20012e4:	01808074 	movhi	r6,513
 20012e8:	9c000417 	ldw	r16,16(r19)
 20012ec:	31bb7f04 	addi	r6,r6,-4612
 20012f0:	32000204 	addi	r8,r6,8
 20012f4:	82013426 	beq	r16,r8,20017c8 <_malloc_r+0x5b4>
 20012f8:	80c00117 	ldw	r3,4(r16)
 20012fc:	00bfff04 	movi	r2,-4
 2001300:	188e703a 	and	r7,r3,r2
 2001304:	3c45c83a 	sub	r2,r7,r17
 2001308:	00c003c4 	movi	r3,15
 200130c:	18811f16 	blt	r3,r2,200178c <_malloc_r+0x578>
 2001310:	32000515 	stw	r8,20(r6)
 2001314:	32000415 	stw	r8,16(r6)
 2001318:	10007f0e 	bge	r2,zero,2001518 <_malloc_r+0x304>
 200131c:	00807fc4 	movi	r2,511
 2001320:	11c0fd36 	bltu	r2,r7,2001718 <_malloc_r+0x504>
 2001324:	3806d0fa 	srli	r3,r7,3
 2001328:	01c00044 	movi	r7,1
 200132c:	30800117 	ldw	r2,4(r6)
 2001330:	19400044 	addi	r5,r3,1
 2001334:	294b883a 	add	r5,r5,r5
 2001338:	1807d0ba 	srai	r3,r3,2
 200133c:	294b883a 	add	r5,r5,r5
 2001340:	294b883a 	add	r5,r5,r5
 2001344:	298b883a 	add	r5,r5,r6
 2001348:	38c6983a 	sll	r3,r7,r3
 200134c:	29c00017 	ldw	r7,0(r5)
 2001350:	2a7ffe04 	addi	r9,r5,-8
 2001354:	1886b03a 	or	r3,r3,r2
 2001358:	82400315 	stw	r9,12(r16)
 200135c:	81c00215 	stw	r7,8(r16)
 2001360:	30c00115 	stw	r3,4(r6)
 2001364:	2c000015 	stw	r16,0(r5)
 2001368:	3c000315 	stw	r16,12(r7)
 200136c:	2005d0ba 	srai	r2,r4,2
 2001370:	01400044 	movi	r5,1
 2001374:	288a983a 	sll	r5,r5,r2
 2001378:	19406f36 	bltu	r3,r5,2001538 <_malloc_r+0x324>
 200137c:	28c4703a 	and	r2,r5,r3
 2001380:	10000a1e 	bne	r2,zero,20013ac <_malloc_r+0x198>
 2001384:	00bfff04 	movi	r2,-4
 2001388:	294b883a 	add	r5,r5,r5
 200138c:	2088703a 	and	r4,r4,r2
 2001390:	28c4703a 	and	r2,r5,r3
 2001394:	21000104 	addi	r4,r4,4
 2001398:	1000041e 	bne	r2,zero,20013ac <_malloc_r+0x198>
 200139c:	294b883a 	add	r5,r5,r5
 20013a0:	28c4703a 	and	r2,r5,r3
 20013a4:	21000104 	addi	r4,r4,4
 20013a8:	103ffc26 	beq	r2,zero,200139c <_malloc_r+0x188>
 20013ac:	02bfff04 	movi	r10,-4
 20013b0:	024003c4 	movi	r9,15
 20013b4:	21800044 	addi	r6,r4,1
 20013b8:	318d883a 	add	r6,r6,r6
 20013bc:	318d883a 	add	r6,r6,r6
 20013c0:	318d883a 	add	r6,r6,r6
 20013c4:	998d883a 	add	r6,r19,r6
 20013c8:	333ffe04 	addi	r12,r6,-8
 20013cc:	2017883a 	mov	r11,r4
 20013d0:	31800104 	addi	r6,r6,4
 20013d4:	34000017 	ldw	r16,0(r6)
 20013d8:	31fffd04 	addi	r7,r6,-12
 20013dc:	81c0041e 	bne	r16,r7,20013f0 <_malloc_r+0x1dc>
 20013e0:	0000fb06 	br	20017d0 <_malloc_r+0x5bc>
 20013e4:	1801030e 	bge	r3,zero,20017f4 <_malloc_r+0x5e0>
 20013e8:	84000317 	ldw	r16,12(r16)
 20013ec:	81c0f826 	beq	r16,r7,20017d0 <_malloc_r+0x5bc>
 20013f0:	80800117 	ldw	r2,4(r16)
 20013f4:	1284703a 	and	r2,r2,r10
 20013f8:	1447c83a 	sub	r3,r2,r17
 20013fc:	48fff90e 	bge	r9,r3,20013e4 <_malloc_r+0x1d0>
 2001400:	80800317 	ldw	r2,12(r16)
 2001404:	81000217 	ldw	r4,8(r16)
 2001408:	89400054 	ori	r5,r17,1
 200140c:	81400115 	stw	r5,4(r16)
 2001410:	20800315 	stw	r2,12(r4)
 2001414:	11000215 	stw	r4,8(r2)
 2001418:	8463883a 	add	r17,r16,r17
 200141c:	9c400515 	stw	r17,20(r19)
 2001420:	9c400415 	stw	r17,16(r19)
 2001424:	18800054 	ori	r2,r3,1
 2001428:	88800115 	stw	r2,4(r17)
 200142c:	8a000315 	stw	r8,12(r17)
 2001430:	8a000215 	stw	r8,8(r17)
 2001434:	88e3883a 	add	r17,r17,r3
 2001438:	88c00015 	stw	r3,0(r17)
 200143c:	9009883a 	mov	r4,r18
 2001440:	20040840 	call	2004084 <__malloc_unlock>
 2001444:	80800204 	addi	r2,r16,8
 2001448:	00001b06 	br	20014b8 <_malloc_r+0x2a4>
 200144c:	04400404 	movi	r17,16
 2001450:	89402536 	bltu	r17,r5,20014e8 <_malloc_r+0x2d4>
 2001454:	2003f640 	call	2003f64 <__malloc_lock>
 2001458:	00800184 	movi	r2,6
 200145c:	01000084 	movi	r4,2
 2001460:	04c08074 	movhi	r19,513
 2001464:	1085883a 	add	r2,r2,r2
 2001468:	9cfb7f04 	addi	r19,r19,-4612
 200146c:	1085883a 	add	r2,r2,r2
 2001470:	9885883a 	add	r2,r19,r2
 2001474:	14000117 	ldw	r16,4(r2)
 2001478:	10fffe04 	addi	r3,r2,-8
 200147c:	80c0d926 	beq	r16,r3,20017e4 <_malloc_r+0x5d0>
 2001480:	80c00117 	ldw	r3,4(r16)
 2001484:	81000317 	ldw	r4,12(r16)
 2001488:	00bfff04 	movi	r2,-4
 200148c:	1884703a 	and	r2,r3,r2
 2001490:	81400217 	ldw	r5,8(r16)
 2001494:	8085883a 	add	r2,r16,r2
 2001498:	10c00117 	ldw	r3,4(r2)
 200149c:	29000315 	stw	r4,12(r5)
 20014a0:	21400215 	stw	r5,8(r4)
 20014a4:	18c00054 	ori	r3,r3,1
 20014a8:	10c00115 	stw	r3,4(r2)
 20014ac:	9009883a 	mov	r4,r18
 20014b0:	20040840 	call	2004084 <__malloc_unlock>
 20014b4:	80800204 	addi	r2,r16,8
 20014b8:	dfc00a17 	ldw	ra,40(sp)
 20014bc:	df000917 	ldw	fp,36(sp)
 20014c0:	ddc00817 	ldw	r23,32(sp)
 20014c4:	dd800717 	ldw	r22,28(sp)
 20014c8:	dd400617 	ldw	r21,24(sp)
 20014cc:	dd000517 	ldw	r20,20(sp)
 20014d0:	dcc00417 	ldw	r19,16(sp)
 20014d4:	dc800317 	ldw	r18,12(sp)
 20014d8:	dc400217 	ldw	r17,8(sp)
 20014dc:	dc000117 	ldw	r16,4(sp)
 20014e0:	dec00b04 	addi	sp,sp,44
 20014e4:	f800283a 	ret
 20014e8:	00800304 	movi	r2,12
 20014ec:	90800015 	stw	r2,0(r18)
 20014f0:	0005883a 	mov	r2,zero
 20014f4:	003ff006 	br	20014b8 <_malloc_r+0x2a4>
 20014f8:	01002004 	movi	r4,128
 20014fc:	02001004 	movi	r8,64
 2001500:	01c00fc4 	movi	r7,63
 2001504:	003f6106 	br	200128c <_malloc_r+0x78>
 2001508:	4009883a 	mov	r4,r8
 200150c:	003f7506 	br	20012e4 <_malloc_r+0xd0>
 2001510:	81000317 	ldw	r4,12(r16)
 2001514:	003fde06 	br	2001490 <_malloc_r+0x27c>
 2001518:	81c5883a 	add	r2,r16,r7
 200151c:	11400117 	ldw	r5,4(r2)
 2001520:	9009883a 	mov	r4,r18
 2001524:	29400054 	ori	r5,r5,1
 2001528:	11400115 	stw	r5,4(r2)
 200152c:	20040840 	call	2004084 <__malloc_unlock>
 2001530:	80800204 	addi	r2,r16,8
 2001534:	003fe006 	br	20014b8 <_malloc_r+0x2a4>
 2001538:	9c000217 	ldw	r16,8(r19)
 200153c:	00bfff04 	movi	r2,-4
 2001540:	85800117 	ldw	r22,4(r16)
 2001544:	b0ac703a 	and	r22,r22,r2
 2001548:	b4400336 	bltu	r22,r17,2001558 <_malloc_r+0x344>
 200154c:	b445c83a 	sub	r2,r22,r17
 2001550:	00c003c4 	movi	r3,15
 2001554:	18805d16 	blt	r3,r2,20016cc <_malloc_r+0x4b8>
 2001558:	05c08074 	movhi	r23,513
 200155c:	00808074 	movhi	r2,513
 2001560:	1087fa04 	addi	r2,r2,8168
 2001564:	bdc10804 	addi	r23,r23,1056
 2001568:	15400017 	ldw	r21,0(r2)
 200156c:	b8c00017 	ldw	r3,0(r23)
 2001570:	00bfffc4 	movi	r2,-1
 2001574:	858d883a 	add	r6,r16,r22
 2001578:	8d6b883a 	add	r21,r17,r21
 200157c:	1880ea26 	beq	r3,r2,2001928 <_malloc_r+0x714>
 2001580:	ad4403c4 	addi	r21,r21,4111
 2001584:	00bc0004 	movi	r2,-4096
 2001588:	a8aa703a 	and	r21,r21,r2
 200158c:	a80b883a 	mov	r5,r21
 2001590:	9009883a 	mov	r4,r18
 2001594:	d9800015 	stw	r6,0(sp)
 2001598:	20024340 	call	2002434 <_sbrk_r>
 200159c:	1029883a 	mov	r20,r2
 20015a0:	00bfffc4 	movi	r2,-1
 20015a4:	d9800017 	ldw	r6,0(sp)
 20015a8:	a080e826 	beq	r20,r2,200194c <_malloc_r+0x738>
 20015ac:	a180a636 	bltu	r20,r6,2001848 <_malloc_r+0x634>
 20015b0:	07008074 	movhi	fp,513
 20015b4:	e7081c04 	addi	fp,fp,8304
 20015b8:	e0800017 	ldw	r2,0(fp)
 20015bc:	a887883a 	add	r3,r21,r2
 20015c0:	e0c00015 	stw	r3,0(fp)
 20015c4:	3500e626 	beq	r6,r20,2001960 <_malloc_r+0x74c>
 20015c8:	b9000017 	ldw	r4,0(r23)
 20015cc:	00bfffc4 	movi	r2,-1
 20015d0:	2080ee26 	beq	r4,r2,200198c <_malloc_r+0x778>
 20015d4:	a185c83a 	sub	r2,r20,r6
 20015d8:	10c5883a 	add	r2,r2,r3
 20015dc:	e0800015 	stw	r2,0(fp)
 20015e0:	a0c001cc 	andi	r3,r20,7
 20015e4:	1800bc26 	beq	r3,zero,20018d8 <_malloc_r+0x6c4>
 20015e8:	a0e9c83a 	sub	r20,r20,r3
 20015ec:	00840204 	movi	r2,4104
 20015f0:	a5000204 	addi	r20,r20,8
 20015f4:	10c7c83a 	sub	r3,r2,r3
 20015f8:	a545883a 	add	r2,r20,r21
 20015fc:	1083ffcc 	andi	r2,r2,4095
 2001600:	18abc83a 	sub	r21,r3,r2
 2001604:	a80b883a 	mov	r5,r21
 2001608:	9009883a 	mov	r4,r18
 200160c:	20024340 	call	2002434 <_sbrk_r>
 2001610:	00ffffc4 	movi	r3,-1
 2001614:	10c0e126 	beq	r2,r3,200199c <_malloc_r+0x788>
 2001618:	1505c83a 	sub	r2,r2,r20
 200161c:	1545883a 	add	r2,r2,r21
 2001620:	10800054 	ori	r2,r2,1
 2001624:	e0c00017 	ldw	r3,0(fp)
 2001628:	9d000215 	stw	r20,8(r19)
 200162c:	a0800115 	stw	r2,4(r20)
 2001630:	a8c7883a 	add	r3,r21,r3
 2001634:	e0c00015 	stw	r3,0(fp)
 2001638:	84c00e26 	beq	r16,r19,2001674 <_malloc_r+0x460>
 200163c:	018003c4 	movi	r6,15
 2001640:	3580a72e 	bgeu	r6,r22,20018e0 <_malloc_r+0x6cc>
 2001644:	81400117 	ldw	r5,4(r16)
 2001648:	013ffe04 	movi	r4,-8
 200164c:	b0bffd04 	addi	r2,r22,-12
 2001650:	1104703a 	and	r2,r2,r4
 2001654:	2900004c 	andi	r4,r5,1
 2001658:	2088b03a 	or	r4,r4,r2
 200165c:	81000115 	stw	r4,4(r16)
 2001660:	01400144 	movi	r5,5
 2001664:	8089883a 	add	r4,r16,r2
 2001668:	21400115 	stw	r5,4(r4)
 200166c:	21400215 	stw	r5,8(r4)
 2001670:	3080cd36 	bltu	r6,r2,20019a8 <_malloc_r+0x794>
 2001674:	00808074 	movhi	r2,513
 2001678:	1087f904 	addi	r2,r2,8164
 200167c:	11000017 	ldw	r4,0(r2)
 2001680:	20c0012e 	bgeu	r4,r3,2001688 <_malloc_r+0x474>
 2001684:	10c00015 	stw	r3,0(r2)
 2001688:	00808074 	movhi	r2,513
 200168c:	1087f804 	addi	r2,r2,8160
 2001690:	11000017 	ldw	r4,0(r2)
 2001694:	9c000217 	ldw	r16,8(r19)
 2001698:	20c0012e 	bgeu	r4,r3,20016a0 <_malloc_r+0x48c>
 200169c:	10c00015 	stw	r3,0(r2)
 20016a0:	80c00117 	ldw	r3,4(r16)
 20016a4:	00bfff04 	movi	r2,-4
 20016a8:	1886703a 	and	r3,r3,r2
 20016ac:	1c45c83a 	sub	r2,r3,r17
 20016b0:	1c400236 	bltu	r3,r17,20016bc <_malloc_r+0x4a8>
 20016b4:	00c003c4 	movi	r3,15
 20016b8:	18800416 	blt	r3,r2,20016cc <_malloc_r+0x4b8>
 20016bc:	9009883a 	mov	r4,r18
 20016c0:	20040840 	call	2004084 <__malloc_unlock>
 20016c4:	0005883a 	mov	r2,zero
 20016c8:	003f7b06 	br	20014b8 <_malloc_r+0x2a4>
 20016cc:	88c00054 	ori	r3,r17,1
 20016d0:	80c00115 	stw	r3,4(r16)
 20016d4:	8463883a 	add	r17,r16,r17
 20016d8:	10800054 	ori	r2,r2,1
 20016dc:	9c400215 	stw	r17,8(r19)
 20016e0:	88800115 	stw	r2,4(r17)
 20016e4:	9009883a 	mov	r4,r18
 20016e8:	20040840 	call	2004084 <__malloc_unlock>
 20016ec:	80800204 	addi	r2,r16,8
 20016f0:	003f7106 	br	20014b8 <_malloc_r+0x2a4>
 20016f4:	00c00504 	movi	r3,20
 20016f8:	18804a2e 	bgeu	r3,r2,2001824 <_malloc_r+0x610>
 20016fc:	00c01504 	movi	r3,84
 2001700:	18806e36 	bltu	r3,r2,20018bc <_malloc_r+0x6a8>
 2001704:	8804d33a 	srli	r2,r17,12
 2001708:	12001bc4 	addi	r8,r2,111
 200170c:	11c01b84 	addi	r7,r2,110
 2001710:	4209883a 	add	r4,r8,r8
 2001714:	003edd06 	br	200128c <_malloc_r+0x78>
 2001718:	3804d27a 	srli	r2,r7,9
 200171c:	00c00104 	movi	r3,4
 2001720:	1880442e 	bgeu	r3,r2,2001834 <_malloc_r+0x620>
 2001724:	00c00504 	movi	r3,20
 2001728:	18808136 	bltu	r3,r2,2001930 <_malloc_r+0x71c>
 200172c:	11401704 	addi	r5,r2,92
 2001730:	10c016c4 	addi	r3,r2,91
 2001734:	294b883a 	add	r5,r5,r5
 2001738:	294b883a 	add	r5,r5,r5
 200173c:	294b883a 	add	r5,r5,r5
 2001740:	994b883a 	add	r5,r19,r5
 2001744:	28800017 	ldw	r2,0(r5)
 2001748:	01808074 	movhi	r6,513
 200174c:	297ffe04 	addi	r5,r5,-8
 2001750:	31bb7f04 	addi	r6,r6,-4612
 2001754:	28806526 	beq	r5,r2,20018ec <_malloc_r+0x6d8>
 2001758:	01bfff04 	movi	r6,-4
 200175c:	10c00117 	ldw	r3,4(r2)
 2001760:	1986703a 	and	r3,r3,r6
 2001764:	38c0022e 	bgeu	r7,r3,2001770 <_malloc_r+0x55c>
 2001768:	10800217 	ldw	r2,8(r2)
 200176c:	28bffb1e 	bne	r5,r2,200175c <_malloc_r+0x548>
 2001770:	11400317 	ldw	r5,12(r2)
 2001774:	98c00117 	ldw	r3,4(r19)
 2001778:	81400315 	stw	r5,12(r16)
 200177c:	80800215 	stw	r2,8(r16)
 2001780:	2c000215 	stw	r16,8(r5)
 2001784:	14000315 	stw	r16,12(r2)
 2001788:	003ef806 	br	200136c <_malloc_r+0x158>
 200178c:	88c00054 	ori	r3,r17,1
 2001790:	80c00115 	stw	r3,4(r16)
 2001794:	8463883a 	add	r17,r16,r17
 2001798:	34400515 	stw	r17,20(r6)
 200179c:	34400415 	stw	r17,16(r6)
 20017a0:	10c00054 	ori	r3,r2,1
 20017a4:	8a000315 	stw	r8,12(r17)
 20017a8:	8a000215 	stw	r8,8(r17)
 20017ac:	88c00115 	stw	r3,4(r17)
 20017b0:	88a3883a 	add	r17,r17,r2
 20017b4:	88800015 	stw	r2,0(r17)
 20017b8:	9009883a 	mov	r4,r18
 20017bc:	20040840 	call	2004084 <__malloc_unlock>
 20017c0:	80800204 	addi	r2,r16,8
 20017c4:	003f3c06 	br	20014b8 <_malloc_r+0x2a4>
 20017c8:	30c00117 	ldw	r3,4(r6)
 20017cc:	003ee706 	br	200136c <_malloc_r+0x158>
 20017d0:	5ac00044 	addi	r11,r11,1
 20017d4:	588000cc 	andi	r2,r11,3
 20017d8:	31800204 	addi	r6,r6,8
 20017dc:	103efd1e 	bne	r2,zero,20013d4 <_malloc_r+0x1c0>
 20017e0:	00002406 	br	2001874 <_malloc_r+0x660>
 20017e4:	14000317 	ldw	r16,12(r2)
 20017e8:	143f251e 	bne	r2,r16,2001480 <_malloc_r+0x26c>
 20017ec:	21000084 	addi	r4,r4,2
 20017f0:	003ebc06 	br	20012e4 <_malloc_r+0xd0>
 20017f4:	8085883a 	add	r2,r16,r2
 20017f8:	10c00117 	ldw	r3,4(r2)
 20017fc:	81000317 	ldw	r4,12(r16)
 2001800:	81400217 	ldw	r5,8(r16)
 2001804:	18c00054 	ori	r3,r3,1
 2001808:	10c00115 	stw	r3,4(r2)
 200180c:	29000315 	stw	r4,12(r5)
 2001810:	21400215 	stw	r5,8(r4)
 2001814:	9009883a 	mov	r4,r18
 2001818:	20040840 	call	2004084 <__malloc_unlock>
 200181c:	80800204 	addi	r2,r16,8
 2001820:	003f2506 	br	20014b8 <_malloc_r+0x2a4>
 2001824:	12001704 	addi	r8,r2,92
 2001828:	11c016c4 	addi	r7,r2,91
 200182c:	4209883a 	add	r4,r8,r8
 2001830:	003e9606 	br	200128c <_malloc_r+0x78>
 2001834:	3804d1ba 	srli	r2,r7,6
 2001838:	11400e44 	addi	r5,r2,57
 200183c:	10c00e04 	addi	r3,r2,56
 2001840:	294b883a 	add	r5,r5,r5
 2001844:	003fbc06 	br	2001738 <_malloc_r+0x524>
 2001848:	84ff5926 	beq	r16,r19,20015b0 <_malloc_r+0x39c>
 200184c:	00808074 	movhi	r2,513
 2001850:	10bb7f04 	addi	r2,r2,-4612
 2001854:	14000217 	ldw	r16,8(r2)
 2001858:	00bfff04 	movi	r2,-4
 200185c:	80c00117 	ldw	r3,4(r16)
 2001860:	1886703a 	and	r3,r3,r2
 2001864:	003f9106 	br	20016ac <_malloc_r+0x498>
 2001868:	60800217 	ldw	r2,8(r12)
 200186c:	213fffc4 	addi	r4,r4,-1
 2001870:	1300651e 	bne	r2,r12,2001a08 <_malloc_r+0x7f4>
 2001874:	208000cc 	andi	r2,r4,3
 2001878:	633ffe04 	addi	r12,r12,-8
 200187c:	103ffa1e 	bne	r2,zero,2001868 <_malloc_r+0x654>
 2001880:	98800117 	ldw	r2,4(r19)
 2001884:	0146303a 	nor	r3,zero,r5
 2001888:	1884703a 	and	r2,r3,r2
 200188c:	98800115 	stw	r2,4(r19)
 2001890:	294b883a 	add	r5,r5,r5
 2001894:	117f2836 	bltu	r2,r5,2001538 <_malloc_r+0x324>
 2001898:	283f2726 	beq	r5,zero,2001538 <_malloc_r+0x324>
 200189c:	2886703a 	and	r3,r5,r2
 20018a0:	5809883a 	mov	r4,r11
 20018a4:	183ec31e 	bne	r3,zero,20013b4 <_malloc_r+0x1a0>
 20018a8:	294b883a 	add	r5,r5,r5
 20018ac:	2886703a 	and	r3,r5,r2
 20018b0:	21000104 	addi	r4,r4,4
 20018b4:	183ffc26 	beq	r3,zero,20018a8 <_malloc_r+0x694>
 20018b8:	003ebe06 	br	20013b4 <_malloc_r+0x1a0>
 20018bc:	00c05504 	movi	r3,340
 20018c0:	18801236 	bltu	r3,r2,200190c <_malloc_r+0x6f8>
 20018c4:	8804d3fa 	srli	r2,r17,15
 20018c8:	12001e04 	addi	r8,r2,120
 20018cc:	11c01dc4 	addi	r7,r2,119
 20018d0:	4209883a 	add	r4,r8,r8
 20018d4:	003e6d06 	br	200128c <_malloc_r+0x78>
 20018d8:	00c40004 	movi	r3,4096
 20018dc:	003f4606 	br	20015f8 <_malloc_r+0x3e4>
 20018e0:	00800044 	movi	r2,1
 20018e4:	a0800115 	stw	r2,4(r20)
 20018e8:	003f7406 	br	20016bc <_malloc_r+0x4a8>
 20018ec:	1805d0ba 	srai	r2,r3,2
 20018f0:	01c00044 	movi	r7,1
 20018f4:	30c00117 	ldw	r3,4(r6)
 20018f8:	388e983a 	sll	r7,r7,r2
 20018fc:	2805883a 	mov	r2,r5
 2001900:	38c6b03a 	or	r3,r7,r3
 2001904:	30c00115 	stw	r3,4(r6)
 2001908:	003f9b06 	br	2001778 <_malloc_r+0x564>
 200190c:	00c15504 	movi	r3,1364
 2001910:	18801a36 	bltu	r3,r2,200197c <_malloc_r+0x768>
 2001914:	8804d4ba 	srli	r2,r17,18
 2001918:	12001f44 	addi	r8,r2,125
 200191c:	11c01f04 	addi	r7,r2,124
 2001920:	4209883a 	add	r4,r8,r8
 2001924:	003e5906 	br	200128c <_malloc_r+0x78>
 2001928:	ad400404 	addi	r21,r21,16
 200192c:	003f1706 	br	200158c <_malloc_r+0x378>
 2001930:	00c01504 	movi	r3,84
 2001934:	18802336 	bltu	r3,r2,20019c4 <_malloc_r+0x7b0>
 2001938:	3804d33a 	srli	r2,r7,12
 200193c:	11401bc4 	addi	r5,r2,111
 2001940:	10c01b84 	addi	r3,r2,110
 2001944:	294b883a 	add	r5,r5,r5
 2001948:	003f7b06 	br	2001738 <_malloc_r+0x524>
 200194c:	9c000217 	ldw	r16,8(r19)
 2001950:	00bfff04 	movi	r2,-4
 2001954:	80c00117 	ldw	r3,4(r16)
 2001958:	1886703a 	and	r3,r3,r2
 200195c:	003f5306 	br	20016ac <_malloc_r+0x498>
 2001960:	3083ffcc 	andi	r2,r6,4095
 2001964:	103f181e 	bne	r2,zero,20015c8 <_malloc_r+0x3b4>
 2001968:	99000217 	ldw	r4,8(r19)
 200196c:	b545883a 	add	r2,r22,r21
 2001970:	10800054 	ori	r2,r2,1
 2001974:	20800115 	stw	r2,4(r4)
 2001978:	003f3e06 	br	2001674 <_malloc_r+0x460>
 200197c:	01003f84 	movi	r4,254
 2001980:	02001fc4 	movi	r8,127
 2001984:	01c01f84 	movi	r7,126
 2001988:	003e4006 	br	200128c <_malloc_r+0x78>
 200198c:	00808074 	movhi	r2,513
 2001990:	10810804 	addi	r2,r2,1056
 2001994:	15000015 	stw	r20,0(r2)
 2001998:	003f1106 	br	20015e0 <_malloc_r+0x3cc>
 200199c:	00800044 	movi	r2,1
 20019a0:	002b883a 	mov	r21,zero
 20019a4:	003f1f06 	br	2001624 <_malloc_r+0x410>
 20019a8:	81400204 	addi	r5,r16,8
 20019ac:	9009883a 	mov	r4,r18
 20019b0:	2002c9c0 	call	2002c9c <_free_r>
 20019b4:	00808074 	movhi	r2,513
 20019b8:	10881c04 	addi	r2,r2,8304
 20019bc:	10c00017 	ldw	r3,0(r2)
 20019c0:	003f2c06 	br	2001674 <_malloc_r+0x460>
 20019c4:	00c05504 	movi	r3,340
 20019c8:	18800536 	bltu	r3,r2,20019e0 <_malloc_r+0x7cc>
 20019cc:	3804d3fa 	srli	r2,r7,15
 20019d0:	11401e04 	addi	r5,r2,120
 20019d4:	10c01dc4 	addi	r3,r2,119
 20019d8:	294b883a 	add	r5,r5,r5
 20019dc:	003f5606 	br	2001738 <_malloc_r+0x524>
 20019e0:	00c15504 	movi	r3,1364
 20019e4:	18800536 	bltu	r3,r2,20019fc <_malloc_r+0x7e8>
 20019e8:	3804d4ba 	srli	r2,r7,18
 20019ec:	11401f44 	addi	r5,r2,125
 20019f0:	10c01f04 	addi	r3,r2,124
 20019f4:	294b883a 	add	r5,r5,r5
 20019f8:	003f4f06 	br	2001738 <_malloc_r+0x524>
 20019fc:	01403f84 	movi	r5,254
 2001a00:	00c01f84 	movi	r3,126
 2001a04:	003f4c06 	br	2001738 <_malloc_r+0x524>
 2001a08:	98800117 	ldw	r2,4(r19)
 2001a0c:	003fa006 	br	2001890 <_malloc_r+0x67c>
 2001a10:	8808d0fa 	srli	r4,r17,3
 2001a14:	20800044 	addi	r2,r4,1
 2001a18:	1085883a 	add	r2,r2,r2
 2001a1c:	003e9006 	br	2001460 <_malloc_r+0x24c>

02001a20 <memchr>:
 2001a20:	208000cc 	andi	r2,r4,3
 2001a24:	280f883a 	mov	r7,r5
 2001a28:	10003426 	beq	r2,zero,2001afc <memchr+0xdc>
 2001a2c:	30bfffc4 	addi	r2,r6,-1
 2001a30:	30001a26 	beq	r6,zero,2001a9c <memchr+0x7c>
 2001a34:	20c00003 	ldbu	r3,0(r4)
 2001a38:	29803fcc 	andi	r6,r5,255
 2001a3c:	30c0051e 	bne	r6,r3,2001a54 <memchr+0x34>
 2001a40:	00001806 	br	2001aa4 <memchr+0x84>
 2001a44:	10001526 	beq	r2,zero,2001a9c <memchr+0x7c>
 2001a48:	20c00003 	ldbu	r3,0(r4)
 2001a4c:	10bfffc4 	addi	r2,r2,-1
 2001a50:	30c01426 	beq	r6,r3,2001aa4 <memchr+0x84>
 2001a54:	21000044 	addi	r4,r4,1
 2001a58:	20c000cc 	andi	r3,r4,3
 2001a5c:	183ff91e 	bne	r3,zero,2001a44 <memchr+0x24>
 2001a60:	020000c4 	movi	r8,3
 2001a64:	40801136 	bltu	r8,r2,2001aac <memchr+0x8c>
 2001a68:	10000c26 	beq	r2,zero,2001a9c <memchr+0x7c>
 2001a6c:	20c00003 	ldbu	r3,0(r4)
 2001a70:	29403fcc 	andi	r5,r5,255
 2001a74:	28c00b26 	beq	r5,r3,2001aa4 <memchr+0x84>
 2001a78:	20c00044 	addi	r3,r4,1
 2001a7c:	39803fcc 	andi	r6,r7,255
 2001a80:	2089883a 	add	r4,r4,r2
 2001a84:	00000306 	br	2001a94 <memchr+0x74>
 2001a88:	18c00044 	addi	r3,r3,1
 2001a8c:	197fffc3 	ldbu	r5,-1(r3)
 2001a90:	31400526 	beq	r6,r5,2001aa8 <memchr+0x88>
 2001a94:	1805883a 	mov	r2,r3
 2001a98:	20fffb1e 	bne	r4,r3,2001a88 <memchr+0x68>
 2001a9c:	0005883a 	mov	r2,zero
 2001aa0:	f800283a 	ret
 2001aa4:	2005883a 	mov	r2,r4
 2001aa8:	f800283a 	ret
 2001aac:	28c03fcc 	andi	r3,r5,255
 2001ab0:	1812923a 	slli	r9,r3,8
 2001ab4:	02ffbff4 	movhi	r11,65279
 2001ab8:	02a02074 	movhi	r10,32897
 2001abc:	48d2b03a 	or	r9,r9,r3
 2001ac0:	4806943a 	slli	r3,r9,16
 2001ac4:	5affbfc4 	addi	r11,r11,-257
 2001ac8:	52a02004 	addi	r10,r10,-32640
 2001acc:	48d2b03a 	or	r9,r9,r3
 2001ad0:	20c00017 	ldw	r3,0(r4)
 2001ad4:	48c6f03a 	xor	r3,r9,r3
 2001ad8:	1acd883a 	add	r6,r3,r11
 2001adc:	00c6303a 	nor	r3,zero,r3
 2001ae0:	30c6703a 	and	r3,r6,r3
 2001ae4:	1a86703a 	and	r3,r3,r10
 2001ae8:	183fe01e 	bne	r3,zero,2001a6c <memchr+0x4c>
 2001aec:	10bfff04 	addi	r2,r2,-4
 2001af0:	21000104 	addi	r4,r4,4
 2001af4:	40bff636 	bltu	r8,r2,2001ad0 <memchr+0xb0>
 2001af8:	003fdb06 	br	2001a68 <memchr+0x48>
 2001afc:	3005883a 	mov	r2,r6
 2001b00:	003fd706 	br	2001a60 <memchr+0x40>

02001b04 <memcpy>:
 2001b04:	defffd04 	addi	sp,sp,-12
 2001b08:	dfc00215 	stw	ra,8(sp)
 2001b0c:	dc400115 	stw	r17,4(sp)
 2001b10:	dc000015 	stw	r16,0(sp)
 2001b14:	00c003c4 	movi	r3,15
 2001b18:	2005883a 	mov	r2,r4
 2001b1c:	1980452e 	bgeu	r3,r6,2001c34 <memcpy+0x130>
 2001b20:	2906b03a 	or	r3,r5,r4
 2001b24:	18c000cc 	andi	r3,r3,3
 2001b28:	1800441e 	bne	r3,zero,2001c3c <memcpy+0x138>
 2001b2c:	347ffc04 	addi	r17,r6,-16
 2001b30:	8822d13a 	srli	r17,r17,4
 2001b34:	28c00104 	addi	r3,r5,4
 2001b38:	23400104 	addi	r13,r4,4
 2001b3c:	8820913a 	slli	r16,r17,4
 2001b40:	2b000204 	addi	r12,r5,8
 2001b44:	22c00204 	addi	r11,r4,8
 2001b48:	84000504 	addi	r16,r16,20
 2001b4c:	2a800304 	addi	r10,r5,12
 2001b50:	22400304 	addi	r9,r4,12
 2001b54:	2c21883a 	add	r16,r5,r16
 2001b58:	2811883a 	mov	r8,r5
 2001b5c:	200f883a 	mov	r7,r4
 2001b60:	41000017 	ldw	r4,0(r8)
 2001b64:	1fc00017 	ldw	ra,0(r3)
 2001b68:	63c00017 	ldw	r15,0(r12)
 2001b6c:	39000015 	stw	r4,0(r7)
 2001b70:	53800017 	ldw	r14,0(r10)
 2001b74:	6fc00015 	stw	ra,0(r13)
 2001b78:	5bc00015 	stw	r15,0(r11)
 2001b7c:	4b800015 	stw	r14,0(r9)
 2001b80:	18c00404 	addi	r3,r3,16
 2001b84:	39c00404 	addi	r7,r7,16
 2001b88:	42000404 	addi	r8,r8,16
 2001b8c:	6b400404 	addi	r13,r13,16
 2001b90:	63000404 	addi	r12,r12,16
 2001b94:	5ac00404 	addi	r11,r11,16
 2001b98:	52800404 	addi	r10,r10,16
 2001b9c:	4a400404 	addi	r9,r9,16
 2001ba0:	1c3fef1e 	bne	r3,r16,2001b60 <memcpy+0x5c>
 2001ba4:	89c00044 	addi	r7,r17,1
 2001ba8:	380e913a 	slli	r7,r7,4
 2001bac:	310003cc 	andi	r4,r6,15
 2001bb0:	02c000c4 	movi	r11,3
 2001bb4:	11c7883a 	add	r3,r2,r7
 2001bb8:	29cb883a 	add	r5,r5,r7
 2001bbc:	5900212e 	bgeu	r11,r4,2001c44 <memcpy+0x140>
 2001bc0:	1813883a 	mov	r9,r3
 2001bc4:	2811883a 	mov	r8,r5
 2001bc8:	200f883a 	mov	r7,r4
 2001bcc:	42800017 	ldw	r10,0(r8)
 2001bd0:	4a400104 	addi	r9,r9,4
 2001bd4:	39ffff04 	addi	r7,r7,-4
 2001bd8:	4abfff15 	stw	r10,-4(r9)
 2001bdc:	42000104 	addi	r8,r8,4
 2001be0:	59fffa36 	bltu	r11,r7,2001bcc <memcpy+0xc8>
 2001be4:	213fff04 	addi	r4,r4,-4
 2001be8:	2008d0ba 	srli	r4,r4,2
 2001bec:	318000cc 	andi	r6,r6,3
 2001bf0:	21000044 	addi	r4,r4,1
 2001bf4:	2109883a 	add	r4,r4,r4
 2001bf8:	2109883a 	add	r4,r4,r4
 2001bfc:	1907883a 	add	r3,r3,r4
 2001c00:	290b883a 	add	r5,r5,r4
 2001c04:	30000626 	beq	r6,zero,2001c20 <memcpy+0x11c>
 2001c08:	198d883a 	add	r6,r3,r6
 2001c0c:	29c00003 	ldbu	r7,0(r5)
 2001c10:	18c00044 	addi	r3,r3,1
 2001c14:	29400044 	addi	r5,r5,1
 2001c18:	19ffffc5 	stb	r7,-1(r3)
 2001c1c:	19bffb1e 	bne	r3,r6,2001c0c <memcpy+0x108>
 2001c20:	dfc00217 	ldw	ra,8(sp)
 2001c24:	dc400117 	ldw	r17,4(sp)
 2001c28:	dc000017 	ldw	r16,0(sp)
 2001c2c:	dec00304 	addi	sp,sp,12
 2001c30:	f800283a 	ret
 2001c34:	2007883a 	mov	r3,r4
 2001c38:	003ff206 	br	2001c04 <memcpy+0x100>
 2001c3c:	2007883a 	mov	r3,r4
 2001c40:	003ff106 	br	2001c08 <memcpy+0x104>
 2001c44:	200d883a 	mov	r6,r4
 2001c48:	003fee06 	br	2001c04 <memcpy+0x100>

02001c4c <memmove>:
 2001c4c:	2005883a 	mov	r2,r4
 2001c50:	29000b2e 	bgeu	r5,r4,2001c80 <memmove+0x34>
 2001c54:	298f883a 	add	r7,r5,r6
 2001c58:	21c0092e 	bgeu	r4,r7,2001c80 <memmove+0x34>
 2001c5c:	2187883a 	add	r3,r4,r6
 2001c60:	198bc83a 	sub	r5,r3,r6
 2001c64:	30004826 	beq	r6,zero,2001d88 <memmove+0x13c>
 2001c68:	39ffffc4 	addi	r7,r7,-1
 2001c6c:	39000003 	ldbu	r4,0(r7)
 2001c70:	18ffffc4 	addi	r3,r3,-1
 2001c74:	19000005 	stb	r4,0(r3)
 2001c78:	28fffb1e 	bne	r5,r3,2001c68 <memmove+0x1c>
 2001c7c:	f800283a 	ret
 2001c80:	00c003c4 	movi	r3,15
 2001c84:	1980412e 	bgeu	r3,r6,2001d8c <memmove+0x140>
 2001c88:	2886b03a 	or	r3,r5,r2
 2001c8c:	18c000cc 	andi	r3,r3,3
 2001c90:	1800401e 	bne	r3,zero,2001d94 <memmove+0x148>
 2001c94:	33fffc04 	addi	r15,r6,-16
 2001c98:	781ed13a 	srli	r15,r15,4
 2001c9c:	28c00104 	addi	r3,r5,4
 2001ca0:	13400104 	addi	r13,r2,4
 2001ca4:	781c913a 	slli	r14,r15,4
 2001ca8:	2b000204 	addi	r12,r5,8
 2001cac:	12c00204 	addi	r11,r2,8
 2001cb0:	73800504 	addi	r14,r14,20
 2001cb4:	2a800304 	addi	r10,r5,12
 2001cb8:	12400304 	addi	r9,r2,12
 2001cbc:	2b9d883a 	add	r14,r5,r14
 2001cc0:	2811883a 	mov	r8,r5
 2001cc4:	100f883a 	mov	r7,r2
 2001cc8:	41000017 	ldw	r4,0(r8)
 2001ccc:	39c00404 	addi	r7,r7,16
 2001cd0:	18c00404 	addi	r3,r3,16
 2001cd4:	393ffc15 	stw	r4,-16(r7)
 2001cd8:	193ffc17 	ldw	r4,-16(r3)
 2001cdc:	6b400404 	addi	r13,r13,16
 2001ce0:	5ac00404 	addi	r11,r11,16
 2001ce4:	693ffc15 	stw	r4,-16(r13)
 2001ce8:	61000017 	ldw	r4,0(r12)
 2001cec:	4a400404 	addi	r9,r9,16
 2001cf0:	42000404 	addi	r8,r8,16
 2001cf4:	593ffc15 	stw	r4,-16(r11)
 2001cf8:	51000017 	ldw	r4,0(r10)
 2001cfc:	63000404 	addi	r12,r12,16
 2001d00:	52800404 	addi	r10,r10,16
 2001d04:	493ffc15 	stw	r4,-16(r9)
 2001d08:	1bbfef1e 	bne	r3,r14,2001cc8 <memmove+0x7c>
 2001d0c:	79000044 	addi	r4,r15,1
 2001d10:	2008913a 	slli	r4,r4,4
 2001d14:	328003cc 	andi	r10,r6,15
 2001d18:	02c000c4 	movi	r11,3
 2001d1c:	1107883a 	add	r3,r2,r4
 2001d20:	290b883a 	add	r5,r5,r4
 2001d24:	5a801e2e 	bgeu	r11,r10,2001da0 <memmove+0x154>
 2001d28:	1813883a 	mov	r9,r3
 2001d2c:	2811883a 	mov	r8,r5
 2001d30:	500f883a 	mov	r7,r10
 2001d34:	41000017 	ldw	r4,0(r8)
 2001d38:	4a400104 	addi	r9,r9,4
 2001d3c:	39ffff04 	addi	r7,r7,-4
 2001d40:	493fff15 	stw	r4,-4(r9)
 2001d44:	42000104 	addi	r8,r8,4
 2001d48:	59fffa36 	bltu	r11,r7,2001d34 <memmove+0xe8>
 2001d4c:	513fff04 	addi	r4,r10,-4
 2001d50:	2008d0ba 	srli	r4,r4,2
 2001d54:	318000cc 	andi	r6,r6,3
 2001d58:	21000044 	addi	r4,r4,1
 2001d5c:	2109883a 	add	r4,r4,r4
 2001d60:	2109883a 	add	r4,r4,r4
 2001d64:	1907883a 	add	r3,r3,r4
 2001d68:	290b883a 	add	r5,r5,r4
 2001d6c:	30000b26 	beq	r6,zero,2001d9c <memmove+0x150>
 2001d70:	198d883a 	add	r6,r3,r6
 2001d74:	29c00003 	ldbu	r7,0(r5)
 2001d78:	18c00044 	addi	r3,r3,1
 2001d7c:	29400044 	addi	r5,r5,1
 2001d80:	19ffffc5 	stb	r7,-1(r3)
 2001d84:	19bffb1e 	bne	r3,r6,2001d74 <memmove+0x128>
 2001d88:	f800283a 	ret
 2001d8c:	1007883a 	mov	r3,r2
 2001d90:	003ff606 	br	2001d6c <memmove+0x120>
 2001d94:	1007883a 	mov	r3,r2
 2001d98:	003ff506 	br	2001d70 <memmove+0x124>
 2001d9c:	f800283a 	ret
 2001da0:	500d883a 	mov	r6,r10
 2001da4:	003ff106 	br	2001d6c <memmove+0x120>

02001da8 <memset>:
 2001da8:	20c000cc 	andi	r3,r4,3
 2001dac:	2005883a 	mov	r2,r4
 2001db0:	18004426 	beq	r3,zero,2001ec4 <memset+0x11c>
 2001db4:	31ffffc4 	addi	r7,r6,-1
 2001db8:	30004026 	beq	r6,zero,2001ebc <memset+0x114>
 2001dbc:	2813883a 	mov	r9,r5
 2001dc0:	200d883a 	mov	r6,r4
 2001dc4:	2007883a 	mov	r3,r4
 2001dc8:	00000406 	br	2001ddc <memset+0x34>
 2001dcc:	3a3fffc4 	addi	r8,r7,-1
 2001dd0:	31800044 	addi	r6,r6,1
 2001dd4:	38003926 	beq	r7,zero,2001ebc <memset+0x114>
 2001dd8:	400f883a 	mov	r7,r8
 2001ddc:	18c00044 	addi	r3,r3,1
 2001de0:	32400005 	stb	r9,0(r6)
 2001de4:	1a0000cc 	andi	r8,r3,3
 2001de8:	403ff81e 	bne	r8,zero,2001dcc <memset+0x24>
 2001dec:	010000c4 	movi	r4,3
 2001df0:	21c02d2e 	bgeu	r4,r7,2001ea8 <memset+0x100>
 2001df4:	29003fcc 	andi	r4,r5,255
 2001df8:	200c923a 	slli	r6,r4,8
 2001dfc:	3108b03a 	or	r4,r6,r4
 2001e00:	200c943a 	slli	r6,r4,16
 2001e04:	218cb03a 	or	r6,r4,r6
 2001e08:	010003c4 	movi	r4,15
 2001e0c:	21c0182e 	bgeu	r4,r7,2001e70 <memset+0xc8>
 2001e10:	3b3ffc04 	addi	r12,r7,-16
 2001e14:	6018d13a 	srli	r12,r12,4
 2001e18:	1a000104 	addi	r8,r3,4
 2001e1c:	1ac00204 	addi	r11,r3,8
 2001e20:	6008913a 	slli	r4,r12,4
 2001e24:	1a800304 	addi	r10,r3,12
 2001e28:	1813883a 	mov	r9,r3
 2001e2c:	21000504 	addi	r4,r4,20
 2001e30:	1909883a 	add	r4,r3,r4
 2001e34:	49800015 	stw	r6,0(r9)
 2001e38:	41800015 	stw	r6,0(r8)
 2001e3c:	59800015 	stw	r6,0(r11)
 2001e40:	51800015 	stw	r6,0(r10)
 2001e44:	42000404 	addi	r8,r8,16
 2001e48:	4a400404 	addi	r9,r9,16
 2001e4c:	5ac00404 	addi	r11,r11,16
 2001e50:	52800404 	addi	r10,r10,16
 2001e54:	413ff71e 	bne	r8,r4,2001e34 <memset+0x8c>
 2001e58:	63000044 	addi	r12,r12,1
 2001e5c:	6018913a 	slli	r12,r12,4
 2001e60:	39c003cc 	andi	r7,r7,15
 2001e64:	010000c4 	movi	r4,3
 2001e68:	1b07883a 	add	r3,r3,r12
 2001e6c:	21c00e2e 	bgeu	r4,r7,2001ea8 <memset+0x100>
 2001e70:	1813883a 	mov	r9,r3
 2001e74:	3811883a 	mov	r8,r7
 2001e78:	010000c4 	movi	r4,3
 2001e7c:	49800015 	stw	r6,0(r9)
 2001e80:	423fff04 	addi	r8,r8,-4
 2001e84:	4a400104 	addi	r9,r9,4
 2001e88:	223ffc36 	bltu	r4,r8,2001e7c <memset+0xd4>
 2001e8c:	393fff04 	addi	r4,r7,-4
 2001e90:	2008d0ba 	srli	r4,r4,2
 2001e94:	39c000cc 	andi	r7,r7,3
 2001e98:	21000044 	addi	r4,r4,1
 2001e9c:	2109883a 	add	r4,r4,r4
 2001ea0:	2109883a 	add	r4,r4,r4
 2001ea4:	1907883a 	add	r3,r3,r4
 2001ea8:	38000526 	beq	r7,zero,2001ec0 <memset+0x118>
 2001eac:	19cf883a 	add	r7,r3,r7
 2001eb0:	19400005 	stb	r5,0(r3)
 2001eb4:	18c00044 	addi	r3,r3,1
 2001eb8:	38fffd1e 	bne	r7,r3,2001eb0 <memset+0x108>
 2001ebc:	f800283a 	ret
 2001ec0:	f800283a 	ret
 2001ec4:	2007883a 	mov	r3,r4
 2001ec8:	300f883a 	mov	r7,r6
 2001ecc:	003fc706 	br	2001dec <memset+0x44>

02001ed0 <_realloc_r>:
 2001ed0:	defff604 	addi	sp,sp,-40
 2001ed4:	dc800215 	stw	r18,8(sp)
 2001ed8:	dfc00915 	stw	ra,36(sp)
 2001edc:	df000815 	stw	fp,32(sp)
 2001ee0:	ddc00715 	stw	r23,28(sp)
 2001ee4:	dd800615 	stw	r22,24(sp)
 2001ee8:	dd400515 	stw	r21,20(sp)
 2001eec:	dd000415 	stw	r20,16(sp)
 2001ef0:	dcc00315 	stw	r19,12(sp)
 2001ef4:	dc400115 	stw	r17,4(sp)
 2001ef8:	dc000015 	stw	r16,0(sp)
 2001efc:	3025883a 	mov	r18,r6
 2001f00:	2800b726 	beq	r5,zero,20021e0 <_realloc_r+0x310>
 2001f04:	282b883a 	mov	r21,r5
 2001f08:	2029883a 	mov	r20,r4
 2001f0c:	2003f640 	call	2003f64 <__malloc_lock>
 2001f10:	a8bfff17 	ldw	r2,-4(r21)
 2001f14:	043fff04 	movi	r16,-4
 2001f18:	90c002c4 	addi	r3,r18,11
 2001f1c:	01000584 	movi	r4,22
 2001f20:	acfffe04 	addi	r19,r21,-8
 2001f24:	1420703a 	and	r16,r2,r16
 2001f28:	20c0332e 	bgeu	r4,r3,2001ff8 <_realloc_r+0x128>
 2001f2c:	047ffe04 	movi	r17,-8
 2001f30:	1c62703a 	and	r17,r3,r17
 2001f34:	8807883a 	mov	r3,r17
 2001f38:	88005816 	blt	r17,zero,200209c <_realloc_r+0x1cc>
 2001f3c:	8c805736 	bltu	r17,r18,200209c <_realloc_r+0x1cc>
 2001f40:	80c0300e 	bge	r16,r3,2002004 <_realloc_r+0x134>
 2001f44:	07008074 	movhi	fp,513
 2001f48:	e73b7f04 	addi	fp,fp,-4612
 2001f4c:	e1c00217 	ldw	r7,8(fp)
 2001f50:	9c09883a 	add	r4,r19,r16
 2001f54:	22000117 	ldw	r8,4(r4)
 2001f58:	21c06326 	beq	r4,r7,20020e8 <_realloc_r+0x218>
 2001f5c:	017fff84 	movi	r5,-2
 2001f60:	414a703a 	and	r5,r8,r5
 2001f64:	214b883a 	add	r5,r4,r5
 2001f68:	29800117 	ldw	r6,4(r5)
 2001f6c:	3180004c 	andi	r6,r6,1
 2001f70:	30003f26 	beq	r6,zero,2002070 <_realloc_r+0x1a0>
 2001f74:	1080004c 	andi	r2,r2,1
 2001f78:	10008326 	beq	r2,zero,2002188 <_realloc_r+0x2b8>
 2001f7c:	900b883a 	mov	r5,r18
 2001f80:	a009883a 	mov	r4,r20
 2001f84:	20012140 	call	2001214 <_malloc_r>
 2001f88:	1025883a 	mov	r18,r2
 2001f8c:	10011e26 	beq	r2,zero,2002408 <_realloc_r+0x538>
 2001f90:	a93fff17 	ldw	r4,-4(r21)
 2001f94:	10fffe04 	addi	r3,r2,-8
 2001f98:	00bfff84 	movi	r2,-2
 2001f9c:	2084703a 	and	r2,r4,r2
 2001fa0:	9885883a 	add	r2,r19,r2
 2001fa4:	1880ee26 	beq	r3,r2,2002360 <_realloc_r+0x490>
 2001fa8:	81bfff04 	addi	r6,r16,-4
 2001fac:	00800904 	movi	r2,36
 2001fb0:	1180b836 	bltu	r2,r6,2002294 <_realloc_r+0x3c4>
 2001fb4:	00c004c4 	movi	r3,19
 2001fb8:	19809636 	bltu	r3,r6,2002214 <_realloc_r+0x344>
 2001fbc:	9005883a 	mov	r2,r18
 2001fc0:	a807883a 	mov	r3,r21
 2001fc4:	19000017 	ldw	r4,0(r3)
 2001fc8:	11000015 	stw	r4,0(r2)
 2001fcc:	19000117 	ldw	r4,4(r3)
 2001fd0:	11000115 	stw	r4,4(r2)
 2001fd4:	18c00217 	ldw	r3,8(r3)
 2001fd8:	10c00215 	stw	r3,8(r2)
 2001fdc:	a80b883a 	mov	r5,r21
 2001fe0:	a009883a 	mov	r4,r20
 2001fe4:	2002c9c0 	call	2002c9c <_free_r>
 2001fe8:	a009883a 	mov	r4,r20
 2001fec:	20040840 	call	2004084 <__malloc_unlock>
 2001ff0:	9005883a 	mov	r2,r18
 2001ff4:	00001206 	br	2002040 <_realloc_r+0x170>
 2001ff8:	00c00404 	movi	r3,16
 2001ffc:	1823883a 	mov	r17,r3
 2002000:	003fce06 	br	2001f3c <_realloc_r+0x6c>
 2002004:	a825883a 	mov	r18,r21
 2002008:	8445c83a 	sub	r2,r16,r17
 200200c:	00c003c4 	movi	r3,15
 2002010:	18802636 	bltu	r3,r2,20020ac <_realloc_r+0x1dc>
 2002014:	99800117 	ldw	r6,4(r19)
 2002018:	9c07883a 	add	r3,r19,r16
 200201c:	3180004c 	andi	r6,r6,1
 2002020:	3420b03a 	or	r16,r6,r16
 2002024:	9c000115 	stw	r16,4(r19)
 2002028:	18800117 	ldw	r2,4(r3)
 200202c:	10800054 	ori	r2,r2,1
 2002030:	18800115 	stw	r2,4(r3)
 2002034:	a009883a 	mov	r4,r20
 2002038:	20040840 	call	2004084 <__malloc_unlock>
 200203c:	9005883a 	mov	r2,r18
 2002040:	dfc00917 	ldw	ra,36(sp)
 2002044:	df000817 	ldw	fp,32(sp)
 2002048:	ddc00717 	ldw	r23,28(sp)
 200204c:	dd800617 	ldw	r22,24(sp)
 2002050:	dd400517 	ldw	r21,20(sp)
 2002054:	dd000417 	ldw	r20,16(sp)
 2002058:	dcc00317 	ldw	r19,12(sp)
 200205c:	dc800217 	ldw	r18,8(sp)
 2002060:	dc400117 	ldw	r17,4(sp)
 2002064:	dc000017 	ldw	r16,0(sp)
 2002068:	dec00a04 	addi	sp,sp,40
 200206c:	f800283a 	ret
 2002070:	017fff04 	movi	r5,-4
 2002074:	414a703a 	and	r5,r8,r5
 2002078:	814d883a 	add	r6,r16,r5
 200207c:	30c01f16 	blt	r6,r3,20020fc <_realloc_r+0x22c>
 2002080:	20800317 	ldw	r2,12(r4)
 2002084:	20c00217 	ldw	r3,8(r4)
 2002088:	a825883a 	mov	r18,r21
 200208c:	3021883a 	mov	r16,r6
 2002090:	18800315 	stw	r2,12(r3)
 2002094:	10c00215 	stw	r3,8(r2)
 2002098:	003fdb06 	br	2002008 <_realloc_r+0x138>
 200209c:	00800304 	movi	r2,12
 20020a0:	a0800015 	stw	r2,0(r20)
 20020a4:	0005883a 	mov	r2,zero
 20020a8:	003fe506 	br	2002040 <_realloc_r+0x170>
 20020ac:	98c00117 	ldw	r3,4(r19)
 20020b0:	9c4b883a 	add	r5,r19,r17
 20020b4:	11000054 	ori	r4,r2,1
 20020b8:	18c0004c 	andi	r3,r3,1
 20020bc:	1c62b03a 	or	r17,r3,r17
 20020c0:	9c400115 	stw	r17,4(r19)
 20020c4:	29000115 	stw	r4,4(r5)
 20020c8:	2885883a 	add	r2,r5,r2
 20020cc:	10c00117 	ldw	r3,4(r2)
 20020d0:	29400204 	addi	r5,r5,8
 20020d4:	a009883a 	mov	r4,r20
 20020d8:	18c00054 	ori	r3,r3,1
 20020dc:	10c00115 	stw	r3,4(r2)
 20020e0:	2002c9c0 	call	2002c9c <_free_r>
 20020e4:	003fd306 	br	2002034 <_realloc_r+0x164>
 20020e8:	017fff04 	movi	r5,-4
 20020ec:	414a703a 	and	r5,r8,r5
 20020f0:	89800404 	addi	r6,r17,16
 20020f4:	8151883a 	add	r8,r16,r5
 20020f8:	4180590e 	bge	r8,r6,2002260 <_realloc_r+0x390>
 20020fc:	1080004c 	andi	r2,r2,1
 2002100:	103f9e1e 	bne	r2,zero,2001f7c <_realloc_r+0xac>
 2002104:	adbffe17 	ldw	r22,-8(r21)
 2002108:	00bfff04 	movi	r2,-4
 200210c:	9dadc83a 	sub	r22,r19,r22
 2002110:	b1800117 	ldw	r6,4(r22)
 2002114:	3084703a 	and	r2,r6,r2
 2002118:	20002026 	beq	r4,zero,200219c <_realloc_r+0x2cc>
 200211c:	80af883a 	add	r23,r16,r2
 2002120:	b96f883a 	add	r23,r23,r5
 2002124:	21c05f26 	beq	r4,r7,20022a4 <_realloc_r+0x3d4>
 2002128:	b8c01c16 	blt	r23,r3,200219c <_realloc_r+0x2cc>
 200212c:	20800317 	ldw	r2,12(r4)
 2002130:	20c00217 	ldw	r3,8(r4)
 2002134:	81bfff04 	addi	r6,r16,-4
 2002138:	01000904 	movi	r4,36
 200213c:	18800315 	stw	r2,12(r3)
 2002140:	10c00215 	stw	r3,8(r2)
 2002144:	b0c00217 	ldw	r3,8(r22)
 2002148:	b0800317 	ldw	r2,12(r22)
 200214c:	b4800204 	addi	r18,r22,8
 2002150:	18800315 	stw	r2,12(r3)
 2002154:	10c00215 	stw	r3,8(r2)
 2002158:	21801b36 	bltu	r4,r6,20021c8 <_realloc_r+0x2f8>
 200215c:	008004c4 	movi	r2,19
 2002160:	1180352e 	bgeu	r2,r6,2002238 <_realloc_r+0x368>
 2002164:	a8800017 	ldw	r2,0(r21)
 2002168:	b0800215 	stw	r2,8(r22)
 200216c:	a8800117 	ldw	r2,4(r21)
 2002170:	b0800315 	stw	r2,12(r22)
 2002174:	008006c4 	movi	r2,27
 2002178:	11807f36 	bltu	r2,r6,2002378 <_realloc_r+0x4a8>
 200217c:	b0800404 	addi	r2,r22,16
 2002180:	ad400204 	addi	r21,r21,8
 2002184:	00002d06 	br	200223c <_realloc_r+0x36c>
 2002188:	adbffe17 	ldw	r22,-8(r21)
 200218c:	00bfff04 	movi	r2,-4
 2002190:	9dadc83a 	sub	r22,r19,r22
 2002194:	b1000117 	ldw	r4,4(r22)
 2002198:	2084703a 	and	r2,r4,r2
 200219c:	b03f7726 	beq	r22,zero,2001f7c <_realloc_r+0xac>
 20021a0:	80af883a 	add	r23,r16,r2
 20021a4:	b8ff7516 	blt	r23,r3,2001f7c <_realloc_r+0xac>
 20021a8:	b0800317 	ldw	r2,12(r22)
 20021ac:	b0c00217 	ldw	r3,8(r22)
 20021b0:	81bfff04 	addi	r6,r16,-4
 20021b4:	01000904 	movi	r4,36
 20021b8:	18800315 	stw	r2,12(r3)
 20021bc:	10c00215 	stw	r3,8(r2)
 20021c0:	b4800204 	addi	r18,r22,8
 20021c4:	21bfe52e 	bgeu	r4,r6,200215c <_realloc_r+0x28c>
 20021c8:	a80b883a 	mov	r5,r21
 20021cc:	9009883a 	mov	r4,r18
 20021d0:	2001c4c0 	call	2001c4c <memmove>
 20021d4:	b821883a 	mov	r16,r23
 20021d8:	b027883a 	mov	r19,r22
 20021dc:	003f8a06 	br	2002008 <_realloc_r+0x138>
 20021e0:	300b883a 	mov	r5,r6
 20021e4:	dfc00917 	ldw	ra,36(sp)
 20021e8:	df000817 	ldw	fp,32(sp)
 20021ec:	ddc00717 	ldw	r23,28(sp)
 20021f0:	dd800617 	ldw	r22,24(sp)
 20021f4:	dd400517 	ldw	r21,20(sp)
 20021f8:	dd000417 	ldw	r20,16(sp)
 20021fc:	dcc00317 	ldw	r19,12(sp)
 2002200:	dc800217 	ldw	r18,8(sp)
 2002204:	dc400117 	ldw	r17,4(sp)
 2002208:	dc000017 	ldw	r16,0(sp)
 200220c:	dec00a04 	addi	sp,sp,40
 2002210:	20012141 	jmpi	2001214 <_malloc_r>
 2002214:	a8c00017 	ldw	r3,0(r21)
 2002218:	90c00015 	stw	r3,0(r18)
 200221c:	a8c00117 	ldw	r3,4(r21)
 2002220:	90c00115 	stw	r3,4(r18)
 2002224:	00c006c4 	movi	r3,27
 2002228:	19804536 	bltu	r3,r6,2002340 <_realloc_r+0x470>
 200222c:	90800204 	addi	r2,r18,8
 2002230:	a8c00204 	addi	r3,r21,8
 2002234:	003f6306 	br	2001fc4 <_realloc_r+0xf4>
 2002238:	9005883a 	mov	r2,r18
 200223c:	a8c00017 	ldw	r3,0(r21)
 2002240:	b821883a 	mov	r16,r23
 2002244:	b027883a 	mov	r19,r22
 2002248:	10c00015 	stw	r3,0(r2)
 200224c:	a8c00117 	ldw	r3,4(r21)
 2002250:	10c00115 	stw	r3,4(r2)
 2002254:	a8c00217 	ldw	r3,8(r21)
 2002258:	10c00215 	stw	r3,8(r2)
 200225c:	003f6a06 	br	2002008 <_realloc_r+0x138>
 2002260:	9c67883a 	add	r19,r19,r17
 2002264:	4445c83a 	sub	r2,r8,r17
 2002268:	e4c00215 	stw	r19,8(fp)
 200226c:	10800054 	ori	r2,r2,1
 2002270:	98800115 	stw	r2,4(r19)
 2002274:	a8bfff17 	ldw	r2,-4(r21)
 2002278:	a009883a 	mov	r4,r20
 200227c:	1080004c 	andi	r2,r2,1
 2002280:	1462b03a 	or	r17,r2,r17
 2002284:	ac7fff15 	stw	r17,-4(r21)
 2002288:	20040840 	call	2004084 <__malloc_unlock>
 200228c:	a805883a 	mov	r2,r21
 2002290:	003f6b06 	br	2002040 <_realloc_r+0x170>
 2002294:	a80b883a 	mov	r5,r21
 2002298:	9009883a 	mov	r4,r18
 200229c:	2001c4c0 	call	2001c4c <memmove>
 20022a0:	003f4e06 	br	2001fdc <_realloc_r+0x10c>
 20022a4:	89000404 	addi	r4,r17,16
 20022a8:	b93fbc16 	blt	r23,r4,200219c <_realloc_r+0x2cc>
 20022ac:	b0800317 	ldw	r2,12(r22)
 20022b0:	b0c00217 	ldw	r3,8(r22)
 20022b4:	81bfff04 	addi	r6,r16,-4
 20022b8:	01000904 	movi	r4,36
 20022bc:	18800315 	stw	r2,12(r3)
 20022c0:	10c00215 	stw	r3,8(r2)
 20022c4:	b4800204 	addi	r18,r22,8
 20022c8:	21804336 	bltu	r4,r6,20023d8 <_realloc_r+0x508>
 20022cc:	008004c4 	movi	r2,19
 20022d0:	11803f2e 	bgeu	r2,r6,20023d0 <_realloc_r+0x500>
 20022d4:	a8800017 	ldw	r2,0(r21)
 20022d8:	b0800215 	stw	r2,8(r22)
 20022dc:	a8800117 	ldw	r2,4(r21)
 20022e0:	b0800315 	stw	r2,12(r22)
 20022e4:	008006c4 	movi	r2,27
 20022e8:	11803f36 	bltu	r2,r6,20023e8 <_realloc_r+0x518>
 20022ec:	b0800404 	addi	r2,r22,16
 20022f0:	ad400204 	addi	r21,r21,8
 20022f4:	a8c00017 	ldw	r3,0(r21)
 20022f8:	10c00015 	stw	r3,0(r2)
 20022fc:	a8c00117 	ldw	r3,4(r21)
 2002300:	10c00115 	stw	r3,4(r2)
 2002304:	a8c00217 	ldw	r3,8(r21)
 2002308:	10c00215 	stw	r3,8(r2)
 200230c:	b447883a 	add	r3,r22,r17
 2002310:	bc45c83a 	sub	r2,r23,r17
 2002314:	e0c00215 	stw	r3,8(fp)
 2002318:	10800054 	ori	r2,r2,1
 200231c:	18800115 	stw	r2,4(r3)
 2002320:	b0800117 	ldw	r2,4(r22)
 2002324:	a009883a 	mov	r4,r20
 2002328:	1080004c 	andi	r2,r2,1
 200232c:	1462b03a 	or	r17,r2,r17
 2002330:	b4400115 	stw	r17,4(r22)
 2002334:	20040840 	call	2004084 <__malloc_unlock>
 2002338:	9005883a 	mov	r2,r18
 200233c:	003f4006 	br	2002040 <_realloc_r+0x170>
 2002340:	a8c00217 	ldw	r3,8(r21)
 2002344:	90c00215 	stw	r3,8(r18)
 2002348:	a8c00317 	ldw	r3,12(r21)
 200234c:	90c00315 	stw	r3,12(r18)
 2002350:	30801126 	beq	r6,r2,2002398 <_realloc_r+0x4c8>
 2002354:	90800404 	addi	r2,r18,16
 2002358:	a8c00404 	addi	r3,r21,16
 200235c:	003f1906 	br	2001fc4 <_realloc_r+0xf4>
 2002360:	90ffff17 	ldw	r3,-4(r18)
 2002364:	00bfff04 	movi	r2,-4
 2002368:	a825883a 	mov	r18,r21
 200236c:	1884703a 	and	r2,r3,r2
 2002370:	80a1883a 	add	r16,r16,r2
 2002374:	003f2406 	br	2002008 <_realloc_r+0x138>
 2002378:	a8800217 	ldw	r2,8(r21)
 200237c:	b0800415 	stw	r2,16(r22)
 2002380:	a8800317 	ldw	r2,12(r21)
 2002384:	b0800515 	stw	r2,20(r22)
 2002388:	31000a26 	beq	r6,r4,20023b4 <_realloc_r+0x4e4>
 200238c:	b0800604 	addi	r2,r22,24
 2002390:	ad400404 	addi	r21,r21,16
 2002394:	003fa906 	br	200223c <_realloc_r+0x36c>
 2002398:	a9000417 	ldw	r4,16(r21)
 200239c:	90800604 	addi	r2,r18,24
 20023a0:	a8c00604 	addi	r3,r21,24
 20023a4:	91000415 	stw	r4,16(r18)
 20023a8:	a9000517 	ldw	r4,20(r21)
 20023ac:	91000515 	stw	r4,20(r18)
 20023b0:	003f0406 	br	2001fc4 <_realloc_r+0xf4>
 20023b4:	a8c00417 	ldw	r3,16(r21)
 20023b8:	ad400604 	addi	r21,r21,24
 20023bc:	b0800804 	addi	r2,r22,32
 20023c0:	b0c00615 	stw	r3,24(r22)
 20023c4:	a8ffff17 	ldw	r3,-4(r21)
 20023c8:	b0c00715 	stw	r3,28(r22)
 20023cc:	003f9b06 	br	200223c <_realloc_r+0x36c>
 20023d0:	9005883a 	mov	r2,r18
 20023d4:	003fc706 	br	20022f4 <_realloc_r+0x424>
 20023d8:	a80b883a 	mov	r5,r21
 20023dc:	9009883a 	mov	r4,r18
 20023e0:	2001c4c0 	call	2001c4c <memmove>
 20023e4:	003fc906 	br	200230c <_realloc_r+0x43c>
 20023e8:	a8800217 	ldw	r2,8(r21)
 20023ec:	b0800415 	stw	r2,16(r22)
 20023f0:	a8800317 	ldw	r2,12(r21)
 20023f4:	b0800515 	stw	r2,20(r22)
 20023f8:	31000726 	beq	r6,r4,2002418 <_realloc_r+0x548>
 20023fc:	b0800604 	addi	r2,r22,24
 2002400:	ad400404 	addi	r21,r21,16
 2002404:	003fbb06 	br	20022f4 <_realloc_r+0x424>
 2002408:	a009883a 	mov	r4,r20
 200240c:	20040840 	call	2004084 <__malloc_unlock>
 2002410:	0005883a 	mov	r2,zero
 2002414:	003f0a06 	br	2002040 <_realloc_r+0x170>
 2002418:	a8c00417 	ldw	r3,16(r21)
 200241c:	ad400604 	addi	r21,r21,24
 2002420:	b0800804 	addi	r2,r22,32
 2002424:	b0c00615 	stw	r3,24(r22)
 2002428:	a8ffff17 	ldw	r3,-4(r21)
 200242c:	b0c00715 	stw	r3,28(r22)
 2002430:	003fb006 	br	20022f4 <_realloc_r+0x424>

02002434 <_sbrk_r>:
 2002434:	defffd04 	addi	sp,sp,-12
 2002438:	dc000015 	stw	r16,0(sp)
 200243c:	04008074 	movhi	r16,513
 2002440:	dc400115 	stw	r17,4(sp)
 2002444:	8407fb04 	addi	r16,r16,8172
 2002448:	2023883a 	mov	r17,r4
 200244c:	2809883a 	mov	r4,r5
 2002450:	dfc00215 	stw	ra,8(sp)
 2002454:	80000015 	stw	zero,0(r16)
 2002458:	2003c540 	call	2003c54 <sbrk>
 200245c:	00ffffc4 	movi	r3,-1
 2002460:	10c00526 	beq	r2,r3,2002478 <_sbrk_r+0x44>
 2002464:	dfc00217 	ldw	ra,8(sp)
 2002468:	dc400117 	ldw	r17,4(sp)
 200246c:	dc000017 	ldw	r16,0(sp)
 2002470:	dec00304 	addi	sp,sp,12
 2002474:	f800283a 	ret
 2002478:	80c00017 	ldw	r3,0(r16)
 200247c:	183ff926 	beq	r3,zero,2002464 <_sbrk_r+0x30>
 2002480:	88c00015 	stw	r3,0(r17)
 2002484:	003ff706 	br	2002464 <_sbrk_r+0x30>

02002488 <__sread>:
 2002488:	defffe04 	addi	sp,sp,-8
 200248c:	dc000015 	stw	r16,0(sp)
 2002490:	2821883a 	mov	r16,r5
 2002494:	2940038f 	ldh	r5,14(r5)
 2002498:	dfc00115 	stw	ra,4(sp)
 200249c:	20031c80 	call	20031c8 <_read_r>
 20024a0:	10000716 	blt	r2,zero,20024c0 <__sread+0x38>
 20024a4:	80c01417 	ldw	r3,80(r16)
 20024a8:	1887883a 	add	r3,r3,r2
 20024ac:	80c01415 	stw	r3,80(r16)
 20024b0:	dfc00117 	ldw	ra,4(sp)
 20024b4:	dc000017 	ldw	r16,0(sp)
 20024b8:	dec00204 	addi	sp,sp,8
 20024bc:	f800283a 	ret
 20024c0:	80c0030b 	ldhu	r3,12(r16)
 20024c4:	18fbffcc 	andi	r3,r3,61439
 20024c8:	80c0030d 	sth	r3,12(r16)
 20024cc:	dfc00117 	ldw	ra,4(sp)
 20024d0:	dc000017 	ldw	r16,0(sp)
 20024d4:	dec00204 	addi	sp,sp,8
 20024d8:	f800283a 	ret

020024dc <__seofread>:
 20024dc:	0005883a 	mov	r2,zero
 20024e0:	f800283a 	ret

020024e4 <__swrite>:
 20024e4:	2880030b 	ldhu	r2,12(r5)
 20024e8:	defffb04 	addi	sp,sp,-20
 20024ec:	dcc00315 	stw	r19,12(sp)
 20024f0:	dc800215 	stw	r18,8(sp)
 20024f4:	dc400115 	stw	r17,4(sp)
 20024f8:	dc000015 	stw	r16,0(sp)
 20024fc:	dfc00415 	stw	ra,16(sp)
 2002500:	10c0400c 	andi	r3,r2,256
 2002504:	2821883a 	mov	r16,r5
 2002508:	2023883a 	mov	r17,r4
 200250c:	3025883a 	mov	r18,r6
 2002510:	3827883a 	mov	r19,r7
 2002514:	18000526 	beq	r3,zero,200252c <__swrite+0x48>
 2002518:	2940038f 	ldh	r5,14(r5)
 200251c:	01c00084 	movi	r7,2
 2002520:	000d883a 	mov	r6,zero
 2002524:	2002fac0 	call	2002fac <_lseek_r>
 2002528:	8080030b 	ldhu	r2,12(r16)
 200252c:	8140038f 	ldh	r5,14(r16)
 2002530:	10bbffcc 	andi	r2,r2,61439
 2002534:	980f883a 	mov	r7,r19
 2002538:	900d883a 	mov	r6,r18
 200253c:	8809883a 	mov	r4,r17
 2002540:	8080030d 	sth	r2,12(r16)
 2002544:	dfc00417 	ldw	ra,16(sp)
 2002548:	dcc00317 	ldw	r19,12(sp)
 200254c:	dc800217 	ldw	r18,8(sp)
 2002550:	dc400117 	ldw	r17,4(sp)
 2002554:	dc000017 	ldw	r16,0(sp)
 2002558:	dec00504 	addi	sp,sp,20
 200255c:	20025c41 	jmpi	20025c4 <_write_r>

02002560 <__sseek>:
 2002560:	defffe04 	addi	sp,sp,-8
 2002564:	dc000015 	stw	r16,0(sp)
 2002568:	2821883a 	mov	r16,r5
 200256c:	2940038f 	ldh	r5,14(r5)
 2002570:	dfc00115 	stw	ra,4(sp)
 2002574:	2002fac0 	call	2002fac <_lseek_r>
 2002578:	00ffffc4 	movi	r3,-1
 200257c:	10c00826 	beq	r2,r3,20025a0 <__sseek+0x40>
 2002580:	80c0030b 	ldhu	r3,12(r16)
 2002584:	80801415 	stw	r2,80(r16)
 2002588:	18c40014 	ori	r3,r3,4096
 200258c:	80c0030d 	sth	r3,12(r16)
 2002590:	dfc00117 	ldw	ra,4(sp)
 2002594:	dc000017 	ldw	r16,0(sp)
 2002598:	dec00204 	addi	sp,sp,8
 200259c:	f800283a 	ret
 20025a0:	80c0030b 	ldhu	r3,12(r16)
 20025a4:	18fbffcc 	andi	r3,r3,61439
 20025a8:	80c0030d 	sth	r3,12(r16)
 20025ac:	dfc00117 	ldw	ra,4(sp)
 20025b0:	dc000017 	ldw	r16,0(sp)
 20025b4:	dec00204 	addi	sp,sp,8
 20025b8:	f800283a 	ret

020025bc <__sclose>:
 20025bc:	2940038f 	ldh	r5,14(r5)
 20025c0:	20027781 	jmpi	2002778 <_close_r>

020025c4 <_write_r>:
 20025c4:	defffd04 	addi	sp,sp,-12
 20025c8:	2805883a 	mov	r2,r5
 20025cc:	dc000015 	stw	r16,0(sp)
 20025d0:	04008074 	movhi	r16,513
 20025d4:	dc400115 	stw	r17,4(sp)
 20025d8:	300b883a 	mov	r5,r6
 20025dc:	8407fb04 	addi	r16,r16,8172
 20025e0:	2023883a 	mov	r17,r4
 20025e4:	380d883a 	mov	r6,r7
 20025e8:	1009883a 	mov	r4,r2
 20025ec:	dfc00215 	stw	ra,8(sp)
 20025f0:	80000015 	stw	zero,0(r16)
 20025f4:	2003d400 	call	2003d40 <write>
 20025f8:	00ffffc4 	movi	r3,-1
 20025fc:	10c00526 	beq	r2,r3,2002614 <_write_r+0x50>
 2002600:	dfc00217 	ldw	ra,8(sp)
 2002604:	dc400117 	ldw	r17,4(sp)
 2002608:	dc000017 	ldw	r16,0(sp)
 200260c:	dec00304 	addi	sp,sp,12
 2002610:	f800283a 	ret
 2002614:	80c00017 	ldw	r3,0(r16)
 2002618:	183ff926 	beq	r3,zero,2002600 <_write_r+0x3c>
 200261c:	88c00015 	stw	r3,0(r17)
 2002620:	003ff706 	br	2002600 <_write_r+0x3c>

02002624 <__swsetup_r>:
 2002624:	00808074 	movhi	r2,513
 2002628:	defffd04 	addi	sp,sp,-12
 200262c:	10810704 	addi	r2,r2,1052
 2002630:	dc400115 	stw	r17,4(sp)
 2002634:	2023883a 	mov	r17,r4
 2002638:	11000017 	ldw	r4,0(r2)
 200263c:	dc000015 	stw	r16,0(sp)
 2002640:	dfc00215 	stw	ra,8(sp)
 2002644:	2821883a 	mov	r16,r5
 2002648:	20000226 	beq	r4,zero,2002654 <__swsetup_r+0x30>
 200264c:	20800e17 	ldw	r2,56(r4)
 2002650:	10003126 	beq	r2,zero,2002718 <__swsetup_r+0xf4>
 2002654:	8080030b 	ldhu	r2,12(r16)
 2002658:	10c0020c 	andi	r3,r2,8
 200265c:	1009883a 	mov	r4,r2
 2002660:	18000f26 	beq	r3,zero,20026a0 <__swsetup_r+0x7c>
 2002664:	80c00417 	ldw	r3,16(r16)
 2002668:	18001526 	beq	r3,zero,20026c0 <__swsetup_r+0x9c>
 200266c:	1100004c 	andi	r4,r2,1
 2002670:	20001c1e 	bne	r4,zero,20026e4 <__swsetup_r+0xc0>
 2002674:	1080008c 	andi	r2,r2,2
 2002678:	1000291e 	bne	r2,zero,2002720 <__swsetup_r+0xfc>
 200267c:	80800517 	ldw	r2,20(r16)
 2002680:	80800215 	stw	r2,8(r16)
 2002684:	18001c26 	beq	r3,zero,20026f8 <__swsetup_r+0xd4>
 2002688:	0005883a 	mov	r2,zero
 200268c:	dfc00217 	ldw	ra,8(sp)
 2002690:	dc400117 	ldw	r17,4(sp)
 2002694:	dc000017 	ldw	r16,0(sp)
 2002698:	dec00304 	addi	sp,sp,12
 200269c:	f800283a 	ret
 20026a0:	2080040c 	andi	r2,r4,16
 20026a4:	10002e26 	beq	r2,zero,2002760 <__swsetup_r+0x13c>
 20026a8:	2080010c 	andi	r2,r4,4
 20026ac:	10001e1e 	bne	r2,zero,2002728 <__swsetup_r+0x104>
 20026b0:	80c00417 	ldw	r3,16(r16)
 20026b4:	20800214 	ori	r2,r4,8
 20026b8:	8080030d 	sth	r2,12(r16)
 20026bc:	183feb1e 	bne	r3,zero,200266c <__swsetup_r+0x48>
 20026c0:	1100a00c 	andi	r4,r2,640
 20026c4:	01408004 	movi	r5,512
 20026c8:	217fe826 	beq	r4,r5,200266c <__swsetup_r+0x48>
 20026cc:	800b883a 	mov	r5,r16
 20026d0:	8809883a 	mov	r4,r17
 20026d4:	200300c0 	call	200300c <__smakebuf_r>
 20026d8:	8080030b 	ldhu	r2,12(r16)
 20026dc:	80c00417 	ldw	r3,16(r16)
 20026e0:	003fe206 	br	200266c <__swsetup_r+0x48>
 20026e4:	80800517 	ldw	r2,20(r16)
 20026e8:	80000215 	stw	zero,8(r16)
 20026ec:	0085c83a 	sub	r2,zero,r2
 20026f0:	80800615 	stw	r2,24(r16)
 20026f4:	183fe41e 	bne	r3,zero,2002688 <__swsetup_r+0x64>
 20026f8:	80c0030b 	ldhu	r3,12(r16)
 20026fc:	0005883a 	mov	r2,zero
 2002700:	1900200c 	andi	r4,r3,128
 2002704:	203fe126 	beq	r4,zero,200268c <__swsetup_r+0x68>
 2002708:	18c01014 	ori	r3,r3,64
 200270c:	80c0030d 	sth	r3,12(r16)
 2002710:	00bfffc4 	movi	r2,-1
 2002714:	003fdd06 	br	200268c <__swsetup_r+0x68>
 2002718:	2000b740 	call	2000b74 <__sinit>
 200271c:	003fcd06 	br	2002654 <__swsetup_r+0x30>
 2002720:	0005883a 	mov	r2,zero
 2002724:	003fd606 	br	2002680 <__swsetup_r+0x5c>
 2002728:	81400c17 	ldw	r5,48(r16)
 200272c:	28000626 	beq	r5,zero,2002748 <__swsetup_r+0x124>
 2002730:	80801004 	addi	r2,r16,64
 2002734:	28800326 	beq	r5,r2,2002744 <__swsetup_r+0x120>
 2002738:	8809883a 	mov	r4,r17
 200273c:	2002c9c0 	call	2002c9c <_free_r>
 2002740:	8100030b 	ldhu	r4,12(r16)
 2002744:	80000c15 	stw	zero,48(r16)
 2002748:	80c00417 	ldw	r3,16(r16)
 200274c:	00bff6c4 	movi	r2,-37
 2002750:	1108703a 	and	r4,r2,r4
 2002754:	80000115 	stw	zero,4(r16)
 2002758:	80c00015 	stw	r3,0(r16)
 200275c:	003fd506 	br	20026b4 <__swsetup_r+0x90>
 2002760:	00800244 	movi	r2,9
 2002764:	88800015 	stw	r2,0(r17)
 2002768:	20801014 	ori	r2,r4,64
 200276c:	8080030d 	sth	r2,12(r16)
 2002770:	00bfffc4 	movi	r2,-1
 2002774:	003fc506 	br	200268c <__swsetup_r+0x68>

02002778 <_close_r>:
 2002778:	defffd04 	addi	sp,sp,-12
 200277c:	dc000015 	stw	r16,0(sp)
 2002780:	04008074 	movhi	r16,513
 2002784:	dc400115 	stw	r17,4(sp)
 2002788:	8407fb04 	addi	r16,r16,8172
 200278c:	2023883a 	mov	r17,r4
 2002790:	2809883a 	mov	r4,r5
 2002794:	dfc00215 	stw	ra,8(sp)
 2002798:	80000015 	stw	zero,0(r16)
 200279c:	20034f00 	call	20034f0 <close>
 20027a0:	00ffffc4 	movi	r3,-1
 20027a4:	10c00526 	beq	r2,r3,20027bc <_close_r+0x44>
 20027a8:	dfc00217 	ldw	ra,8(sp)
 20027ac:	dc400117 	ldw	r17,4(sp)
 20027b0:	dc000017 	ldw	r16,0(sp)
 20027b4:	dec00304 	addi	sp,sp,12
 20027b8:	f800283a 	ret
 20027bc:	80c00017 	ldw	r3,0(r16)
 20027c0:	183ff926 	beq	r3,zero,20027a8 <_close_r+0x30>
 20027c4:	88c00015 	stw	r3,0(r17)
 20027c8:	003ff706 	br	20027a8 <_close_r+0x30>

020027cc <_fclose_r>:
 20027cc:	28003926 	beq	r5,zero,20028b4 <_fclose_r+0xe8>
 20027d0:	defffc04 	addi	sp,sp,-16
 20027d4:	dc400115 	stw	r17,4(sp)
 20027d8:	dc000015 	stw	r16,0(sp)
 20027dc:	dfc00315 	stw	ra,12(sp)
 20027e0:	dc800215 	stw	r18,8(sp)
 20027e4:	2023883a 	mov	r17,r4
 20027e8:	2821883a 	mov	r16,r5
 20027ec:	20000226 	beq	r4,zero,20027f8 <_fclose_r+0x2c>
 20027f0:	20800e17 	ldw	r2,56(r4)
 20027f4:	10002726 	beq	r2,zero,2002894 <_fclose_r+0xc8>
 20027f8:	8080030f 	ldh	r2,12(r16)
 20027fc:	1000071e 	bne	r2,zero,200281c <_fclose_r+0x50>
 2002800:	0005883a 	mov	r2,zero
 2002804:	dfc00317 	ldw	ra,12(sp)
 2002808:	dc800217 	ldw	r18,8(sp)
 200280c:	dc400117 	ldw	r17,4(sp)
 2002810:	dc000017 	ldw	r16,0(sp)
 2002814:	dec00404 	addi	sp,sp,16
 2002818:	f800283a 	ret
 200281c:	800b883a 	mov	r5,r16
 2002820:	8809883a 	mov	r4,r17
 2002824:	20028d00 	call	20028d0 <__sflush_r>
 2002828:	1025883a 	mov	r18,r2
 200282c:	80800b17 	ldw	r2,44(r16)
 2002830:	10000426 	beq	r2,zero,2002844 <_fclose_r+0x78>
 2002834:	81400717 	ldw	r5,28(r16)
 2002838:	8809883a 	mov	r4,r17
 200283c:	103ee83a 	callr	r2
 2002840:	10001616 	blt	r2,zero,200289c <_fclose_r+0xd0>
 2002844:	8080030b 	ldhu	r2,12(r16)
 2002848:	1080200c 	andi	r2,r2,128
 200284c:	1000151e 	bne	r2,zero,20028a4 <_fclose_r+0xd8>
 2002850:	81400c17 	ldw	r5,48(r16)
 2002854:	28000526 	beq	r5,zero,200286c <_fclose_r+0xa0>
 2002858:	80801004 	addi	r2,r16,64
 200285c:	28800226 	beq	r5,r2,2002868 <_fclose_r+0x9c>
 2002860:	8809883a 	mov	r4,r17
 2002864:	2002c9c0 	call	2002c9c <_free_r>
 2002868:	80000c15 	stw	zero,48(r16)
 200286c:	81401117 	ldw	r5,68(r16)
 2002870:	28000326 	beq	r5,zero,2002880 <_fclose_r+0xb4>
 2002874:	8809883a 	mov	r4,r17
 2002878:	2002c9c0 	call	2002c9c <_free_r>
 200287c:	80001115 	stw	zero,68(r16)
 2002880:	2000b840 	call	2000b84 <__sfp_lock_acquire>
 2002884:	8000030d 	sth	zero,12(r16)
 2002888:	2000b880 	call	2000b88 <__sfp_lock_release>
 200288c:	9005883a 	mov	r2,r18
 2002890:	003fdc06 	br	2002804 <_fclose_r+0x38>
 2002894:	2000b740 	call	2000b74 <__sinit>
 2002898:	003fd706 	br	20027f8 <_fclose_r+0x2c>
 200289c:	04bfffc4 	movi	r18,-1
 20028a0:	003fe806 	br	2002844 <_fclose_r+0x78>
 20028a4:	81400417 	ldw	r5,16(r16)
 20028a8:	8809883a 	mov	r4,r17
 20028ac:	2002c9c0 	call	2002c9c <_free_r>
 20028b0:	003fe706 	br	2002850 <_fclose_r+0x84>
 20028b4:	0005883a 	mov	r2,zero
 20028b8:	f800283a 	ret

020028bc <fclose>:
 20028bc:	00808074 	movhi	r2,513
 20028c0:	10810704 	addi	r2,r2,1052
 20028c4:	200b883a 	mov	r5,r4
 20028c8:	11000017 	ldw	r4,0(r2)
 20028cc:	20027cc1 	jmpi	20027cc <_fclose_r>

020028d0 <__sflush_r>:
 20028d0:	2880030b 	ldhu	r2,12(r5)
 20028d4:	defffb04 	addi	sp,sp,-20
 20028d8:	dcc00315 	stw	r19,12(sp)
 20028dc:	dc400115 	stw	r17,4(sp)
 20028e0:	dfc00415 	stw	ra,16(sp)
 20028e4:	dc800215 	stw	r18,8(sp)
 20028e8:	dc000015 	stw	r16,0(sp)
 20028ec:	10c0020c 	andi	r3,r2,8
 20028f0:	2823883a 	mov	r17,r5
 20028f4:	2027883a 	mov	r19,r4
 20028f8:	1800311e 	bne	r3,zero,20029c0 <__sflush_r+0xf0>
 20028fc:	28c00117 	ldw	r3,4(r5)
 2002900:	10820014 	ori	r2,r2,2048
 2002904:	2880030d 	sth	r2,12(r5)
 2002908:	00c04b0e 	bge	zero,r3,2002a38 <__sflush_r+0x168>
 200290c:	8a000a17 	ldw	r8,40(r17)
 2002910:	40002326 	beq	r8,zero,20029a0 <__sflush_r+0xd0>
 2002914:	9c000017 	ldw	r16,0(r19)
 2002918:	10c4000c 	andi	r3,r2,4096
 200291c:	98000015 	stw	zero,0(r19)
 2002920:	18004826 	beq	r3,zero,2002a44 <__sflush_r+0x174>
 2002924:	89801417 	ldw	r6,80(r17)
 2002928:	10c0010c 	andi	r3,r2,4
 200292c:	18000626 	beq	r3,zero,2002948 <__sflush_r+0x78>
 2002930:	88c00117 	ldw	r3,4(r17)
 2002934:	88800c17 	ldw	r2,48(r17)
 2002938:	30cdc83a 	sub	r6,r6,r3
 200293c:	10000226 	beq	r2,zero,2002948 <__sflush_r+0x78>
 2002940:	88800f17 	ldw	r2,60(r17)
 2002944:	308dc83a 	sub	r6,r6,r2
 2002948:	89400717 	ldw	r5,28(r17)
 200294c:	000f883a 	mov	r7,zero
 2002950:	9809883a 	mov	r4,r19
 2002954:	403ee83a 	callr	r8
 2002958:	00ffffc4 	movi	r3,-1
 200295c:	10c04426 	beq	r2,r3,2002a70 <__sflush_r+0x1a0>
 2002960:	88c0030b 	ldhu	r3,12(r17)
 2002964:	89000417 	ldw	r4,16(r17)
 2002968:	88000115 	stw	zero,4(r17)
 200296c:	197dffcc 	andi	r5,r3,63487
 2002970:	8940030d 	sth	r5,12(r17)
 2002974:	89000015 	stw	r4,0(r17)
 2002978:	18c4000c 	andi	r3,r3,4096
 200297c:	18002c1e 	bne	r3,zero,2002a30 <__sflush_r+0x160>
 2002980:	89400c17 	ldw	r5,48(r17)
 2002984:	9c000015 	stw	r16,0(r19)
 2002988:	28000526 	beq	r5,zero,20029a0 <__sflush_r+0xd0>
 200298c:	88801004 	addi	r2,r17,64
 2002990:	28800226 	beq	r5,r2,200299c <__sflush_r+0xcc>
 2002994:	9809883a 	mov	r4,r19
 2002998:	2002c9c0 	call	2002c9c <_free_r>
 200299c:	88000c15 	stw	zero,48(r17)
 20029a0:	0005883a 	mov	r2,zero
 20029a4:	dfc00417 	ldw	ra,16(sp)
 20029a8:	dcc00317 	ldw	r19,12(sp)
 20029ac:	dc800217 	ldw	r18,8(sp)
 20029b0:	dc400117 	ldw	r17,4(sp)
 20029b4:	dc000017 	ldw	r16,0(sp)
 20029b8:	dec00504 	addi	sp,sp,20
 20029bc:	f800283a 	ret
 20029c0:	2c800417 	ldw	r18,16(r5)
 20029c4:	903ff626 	beq	r18,zero,20029a0 <__sflush_r+0xd0>
 20029c8:	2c000017 	ldw	r16,0(r5)
 20029cc:	108000cc 	andi	r2,r2,3
 20029d0:	2c800015 	stw	r18,0(r5)
 20029d4:	84a1c83a 	sub	r16,r16,r18
 20029d8:	1000131e 	bne	r2,zero,2002a28 <__sflush_r+0x158>
 20029dc:	28800517 	ldw	r2,20(r5)
 20029e0:	88800215 	stw	r2,8(r17)
 20029e4:	04000316 	blt	zero,r16,20029f4 <__sflush_r+0x124>
 20029e8:	003fed06 	br	20029a0 <__sflush_r+0xd0>
 20029ec:	90a5883a 	add	r18,r18,r2
 20029f0:	043feb0e 	bge	zero,r16,20029a0 <__sflush_r+0xd0>
 20029f4:	88800917 	ldw	r2,36(r17)
 20029f8:	89400717 	ldw	r5,28(r17)
 20029fc:	800f883a 	mov	r7,r16
 2002a00:	900d883a 	mov	r6,r18
 2002a04:	9809883a 	mov	r4,r19
 2002a08:	103ee83a 	callr	r2
 2002a0c:	80a1c83a 	sub	r16,r16,r2
 2002a10:	00bff616 	blt	zero,r2,20029ec <__sflush_r+0x11c>
 2002a14:	88c0030b 	ldhu	r3,12(r17)
 2002a18:	00bfffc4 	movi	r2,-1
 2002a1c:	18c01014 	ori	r3,r3,64
 2002a20:	88c0030d 	sth	r3,12(r17)
 2002a24:	003fdf06 	br	20029a4 <__sflush_r+0xd4>
 2002a28:	0005883a 	mov	r2,zero
 2002a2c:	003fec06 	br	20029e0 <__sflush_r+0x110>
 2002a30:	88801415 	stw	r2,80(r17)
 2002a34:	003fd206 	br	2002980 <__sflush_r+0xb0>
 2002a38:	28c00f17 	ldw	r3,60(r5)
 2002a3c:	00ffb316 	blt	zero,r3,200290c <__sflush_r+0x3c>
 2002a40:	003fd706 	br	20029a0 <__sflush_r+0xd0>
 2002a44:	89400717 	ldw	r5,28(r17)
 2002a48:	000d883a 	mov	r6,zero
 2002a4c:	01c00044 	movi	r7,1
 2002a50:	9809883a 	mov	r4,r19
 2002a54:	403ee83a 	callr	r8
 2002a58:	100d883a 	mov	r6,r2
 2002a5c:	00bfffc4 	movi	r2,-1
 2002a60:	30801426 	beq	r6,r2,2002ab4 <__sflush_r+0x1e4>
 2002a64:	8880030b 	ldhu	r2,12(r17)
 2002a68:	8a000a17 	ldw	r8,40(r17)
 2002a6c:	003fae06 	br	2002928 <__sflush_r+0x58>
 2002a70:	98c00017 	ldw	r3,0(r19)
 2002a74:	183fba26 	beq	r3,zero,2002960 <__sflush_r+0x90>
 2002a78:	01000744 	movi	r4,29
 2002a7c:	19000626 	beq	r3,r4,2002a98 <__sflush_r+0x1c8>
 2002a80:	01000584 	movi	r4,22
 2002a84:	19000426 	beq	r3,r4,2002a98 <__sflush_r+0x1c8>
 2002a88:	88c0030b 	ldhu	r3,12(r17)
 2002a8c:	18c01014 	ori	r3,r3,64
 2002a90:	88c0030d 	sth	r3,12(r17)
 2002a94:	003fc306 	br	20029a4 <__sflush_r+0xd4>
 2002a98:	8880030b 	ldhu	r2,12(r17)
 2002a9c:	88c00417 	ldw	r3,16(r17)
 2002aa0:	88000115 	stw	zero,4(r17)
 2002aa4:	10bdffcc 	andi	r2,r2,63487
 2002aa8:	8880030d 	sth	r2,12(r17)
 2002aac:	88c00015 	stw	r3,0(r17)
 2002ab0:	003fb306 	br	2002980 <__sflush_r+0xb0>
 2002ab4:	98800017 	ldw	r2,0(r19)
 2002ab8:	103fea26 	beq	r2,zero,2002a64 <__sflush_r+0x194>
 2002abc:	00c00744 	movi	r3,29
 2002ac0:	10c00226 	beq	r2,r3,2002acc <__sflush_r+0x1fc>
 2002ac4:	00c00584 	movi	r3,22
 2002ac8:	10c0031e 	bne	r2,r3,2002ad8 <__sflush_r+0x208>
 2002acc:	9c000015 	stw	r16,0(r19)
 2002ad0:	0005883a 	mov	r2,zero
 2002ad4:	003fb306 	br	20029a4 <__sflush_r+0xd4>
 2002ad8:	88c0030b 	ldhu	r3,12(r17)
 2002adc:	3005883a 	mov	r2,r6
 2002ae0:	18c01014 	ori	r3,r3,64
 2002ae4:	88c0030d 	sth	r3,12(r17)
 2002ae8:	003fae06 	br	20029a4 <__sflush_r+0xd4>

02002aec <_fflush_r>:
 2002aec:	defffd04 	addi	sp,sp,-12
 2002af0:	dc000115 	stw	r16,4(sp)
 2002af4:	dfc00215 	stw	ra,8(sp)
 2002af8:	2021883a 	mov	r16,r4
 2002afc:	20000226 	beq	r4,zero,2002b08 <_fflush_r+0x1c>
 2002b00:	20800e17 	ldw	r2,56(r4)
 2002b04:	10000c26 	beq	r2,zero,2002b38 <_fflush_r+0x4c>
 2002b08:	2880030f 	ldh	r2,12(r5)
 2002b0c:	1000051e 	bne	r2,zero,2002b24 <_fflush_r+0x38>
 2002b10:	0005883a 	mov	r2,zero
 2002b14:	dfc00217 	ldw	ra,8(sp)
 2002b18:	dc000117 	ldw	r16,4(sp)
 2002b1c:	dec00304 	addi	sp,sp,12
 2002b20:	f800283a 	ret
 2002b24:	8009883a 	mov	r4,r16
 2002b28:	dfc00217 	ldw	ra,8(sp)
 2002b2c:	dc000117 	ldw	r16,4(sp)
 2002b30:	dec00304 	addi	sp,sp,12
 2002b34:	20028d01 	jmpi	20028d0 <__sflush_r>
 2002b38:	d9400015 	stw	r5,0(sp)
 2002b3c:	2000b740 	call	2000b74 <__sinit>
 2002b40:	d9400017 	ldw	r5,0(sp)
 2002b44:	003ff006 	br	2002b08 <_fflush_r+0x1c>

02002b48 <fflush>:
 2002b48:	20000526 	beq	r4,zero,2002b60 <fflush+0x18>
 2002b4c:	00808074 	movhi	r2,513
 2002b50:	10810704 	addi	r2,r2,1052
 2002b54:	200b883a 	mov	r5,r4
 2002b58:	11000017 	ldw	r4,0(r2)
 2002b5c:	2002aec1 	jmpi	2002aec <_fflush_r>
 2002b60:	00808074 	movhi	r2,513
 2002b64:	10810604 	addi	r2,r2,1048
 2002b68:	11000017 	ldw	r4,0(r2)
 2002b6c:	01408034 	movhi	r5,512
 2002b70:	294abb04 	addi	r5,r5,10988
 2002b74:	20011501 	jmpi	2001150 <_fwalk_reent>

02002b78 <_malloc_trim_r>:
 2002b78:	defffb04 	addi	sp,sp,-20
 2002b7c:	dcc00315 	stw	r19,12(sp)
 2002b80:	04c08074 	movhi	r19,513
 2002b84:	dc800215 	stw	r18,8(sp)
 2002b88:	dc400115 	stw	r17,4(sp)
 2002b8c:	dc000015 	stw	r16,0(sp)
 2002b90:	dfc00415 	stw	ra,16(sp)
 2002b94:	2821883a 	mov	r16,r5
 2002b98:	9cfb7f04 	addi	r19,r19,-4612
 2002b9c:	2025883a 	mov	r18,r4
 2002ba0:	2003f640 	call	2003f64 <__malloc_lock>
 2002ba4:	98800217 	ldw	r2,8(r19)
 2002ba8:	14400117 	ldw	r17,4(r2)
 2002bac:	00bfff04 	movi	r2,-4
 2002bb0:	88a2703a 	and	r17,r17,r2
 2002bb4:	8c21c83a 	sub	r16,r17,r16
 2002bb8:	8403fbc4 	addi	r16,r16,4079
 2002bbc:	8020d33a 	srli	r16,r16,12
 2002bc0:	0083ffc4 	movi	r2,4095
 2002bc4:	843fffc4 	addi	r16,r16,-1
 2002bc8:	8020933a 	slli	r16,r16,12
 2002bcc:	1400060e 	bge	r2,r16,2002be8 <_malloc_trim_r+0x70>
 2002bd0:	000b883a 	mov	r5,zero
 2002bd4:	9009883a 	mov	r4,r18
 2002bd8:	20024340 	call	2002434 <_sbrk_r>
 2002bdc:	98c00217 	ldw	r3,8(r19)
 2002be0:	1c47883a 	add	r3,r3,r17
 2002be4:	10c00a26 	beq	r2,r3,2002c10 <_malloc_trim_r+0x98>
 2002be8:	9009883a 	mov	r4,r18
 2002bec:	20040840 	call	2004084 <__malloc_unlock>
 2002bf0:	0005883a 	mov	r2,zero
 2002bf4:	dfc00417 	ldw	ra,16(sp)
 2002bf8:	dcc00317 	ldw	r19,12(sp)
 2002bfc:	dc800217 	ldw	r18,8(sp)
 2002c00:	dc400117 	ldw	r17,4(sp)
 2002c04:	dc000017 	ldw	r16,0(sp)
 2002c08:	dec00504 	addi	sp,sp,20
 2002c0c:	f800283a 	ret
 2002c10:	040bc83a 	sub	r5,zero,r16
 2002c14:	9009883a 	mov	r4,r18
 2002c18:	20024340 	call	2002434 <_sbrk_r>
 2002c1c:	00ffffc4 	movi	r3,-1
 2002c20:	10c00d26 	beq	r2,r3,2002c58 <_malloc_trim_r+0xe0>
 2002c24:	00c08074 	movhi	r3,513
 2002c28:	18c81c04 	addi	r3,r3,8304
 2002c2c:	18800017 	ldw	r2,0(r3)
 2002c30:	99000217 	ldw	r4,8(r19)
 2002c34:	8c23c83a 	sub	r17,r17,r16
 2002c38:	8c400054 	ori	r17,r17,1
 2002c3c:	1421c83a 	sub	r16,r2,r16
 2002c40:	24400115 	stw	r17,4(r4)
 2002c44:	9009883a 	mov	r4,r18
 2002c48:	1c000015 	stw	r16,0(r3)
 2002c4c:	20040840 	call	2004084 <__malloc_unlock>
 2002c50:	00800044 	movi	r2,1
 2002c54:	003fe706 	br	2002bf4 <_malloc_trim_r+0x7c>
 2002c58:	000b883a 	mov	r5,zero
 2002c5c:	9009883a 	mov	r4,r18
 2002c60:	20024340 	call	2002434 <_sbrk_r>
 2002c64:	99000217 	ldw	r4,8(r19)
 2002c68:	014003c4 	movi	r5,15
 2002c6c:	1107c83a 	sub	r3,r2,r4
 2002c70:	28ffdd0e 	bge	r5,r3,2002be8 <_malloc_trim_r+0x70>
 2002c74:	01408074 	movhi	r5,513
 2002c78:	29410804 	addi	r5,r5,1056
 2002c7c:	29400017 	ldw	r5,0(r5)
 2002c80:	18c00054 	ori	r3,r3,1
 2002c84:	20c00115 	stw	r3,4(r4)
 2002c88:	00c08074 	movhi	r3,513
 2002c8c:	1145c83a 	sub	r2,r2,r5
 2002c90:	18c81c04 	addi	r3,r3,8304
 2002c94:	18800015 	stw	r2,0(r3)
 2002c98:	003fd306 	br	2002be8 <_malloc_trim_r+0x70>

02002c9c <_free_r>:
 2002c9c:	28004126 	beq	r5,zero,2002da4 <_free_r+0x108>
 2002ca0:	defffd04 	addi	sp,sp,-12
 2002ca4:	dc400115 	stw	r17,4(sp)
 2002ca8:	dc000015 	stw	r16,0(sp)
 2002cac:	2023883a 	mov	r17,r4
 2002cb0:	2821883a 	mov	r16,r5
 2002cb4:	dfc00215 	stw	ra,8(sp)
 2002cb8:	2003f640 	call	2003f64 <__malloc_lock>
 2002cbc:	81ffff17 	ldw	r7,-4(r16)
 2002cc0:	00bfff84 	movi	r2,-2
 2002cc4:	01008074 	movhi	r4,513
 2002cc8:	81bffe04 	addi	r6,r16,-8
 2002ccc:	3884703a 	and	r2,r7,r2
 2002cd0:	213b7f04 	addi	r4,r4,-4612
 2002cd4:	308b883a 	add	r5,r6,r2
 2002cd8:	2a400117 	ldw	r9,4(r5)
 2002cdc:	22000217 	ldw	r8,8(r4)
 2002ce0:	00ffff04 	movi	r3,-4
 2002ce4:	48c6703a 	and	r3,r9,r3
 2002ce8:	2a005726 	beq	r5,r8,2002e48 <_free_r+0x1ac>
 2002cec:	28c00115 	stw	r3,4(r5)
 2002cf0:	39c0004c 	andi	r7,r7,1
 2002cf4:	3800091e 	bne	r7,zero,2002d1c <_free_r+0x80>
 2002cf8:	823ffe17 	ldw	r8,-8(r16)
 2002cfc:	22400204 	addi	r9,r4,8
 2002d00:	320dc83a 	sub	r6,r6,r8
 2002d04:	31c00217 	ldw	r7,8(r6)
 2002d08:	1205883a 	add	r2,r2,r8
 2002d0c:	3a406526 	beq	r7,r9,2002ea4 <_free_r+0x208>
 2002d10:	32000317 	ldw	r8,12(r6)
 2002d14:	3a000315 	stw	r8,12(r7)
 2002d18:	41c00215 	stw	r7,8(r8)
 2002d1c:	28cf883a 	add	r7,r5,r3
 2002d20:	39c00117 	ldw	r7,4(r7)
 2002d24:	39c0004c 	andi	r7,r7,1
 2002d28:	38003a26 	beq	r7,zero,2002e14 <_free_r+0x178>
 2002d2c:	10c00054 	ori	r3,r2,1
 2002d30:	30c00115 	stw	r3,4(r6)
 2002d34:	3087883a 	add	r3,r6,r2
 2002d38:	18800015 	stw	r2,0(r3)
 2002d3c:	00c07fc4 	movi	r3,511
 2002d40:	18801936 	bltu	r3,r2,2002da8 <_free_r+0x10c>
 2002d44:	1004d0fa 	srli	r2,r2,3
 2002d48:	01c00044 	movi	r7,1
 2002d4c:	21400117 	ldw	r5,4(r4)
 2002d50:	10c00044 	addi	r3,r2,1
 2002d54:	18c7883a 	add	r3,r3,r3
 2002d58:	1005d0ba 	srai	r2,r2,2
 2002d5c:	18c7883a 	add	r3,r3,r3
 2002d60:	18c7883a 	add	r3,r3,r3
 2002d64:	1907883a 	add	r3,r3,r4
 2002d68:	3884983a 	sll	r2,r7,r2
 2002d6c:	19c00017 	ldw	r7,0(r3)
 2002d70:	1a3ffe04 	addi	r8,r3,-8
 2002d74:	1144b03a 	or	r2,r2,r5
 2002d78:	32000315 	stw	r8,12(r6)
 2002d7c:	31c00215 	stw	r7,8(r6)
 2002d80:	20800115 	stw	r2,4(r4)
 2002d84:	19800015 	stw	r6,0(r3)
 2002d88:	39800315 	stw	r6,12(r7)
 2002d8c:	8809883a 	mov	r4,r17
 2002d90:	dfc00217 	ldw	ra,8(sp)
 2002d94:	dc400117 	ldw	r17,4(sp)
 2002d98:	dc000017 	ldw	r16,0(sp)
 2002d9c:	dec00304 	addi	sp,sp,12
 2002da0:	20040841 	jmpi	2004084 <__malloc_unlock>
 2002da4:	f800283a 	ret
 2002da8:	100ad27a 	srli	r5,r2,9
 2002dac:	00c00104 	movi	r3,4
 2002db0:	19404a36 	bltu	r3,r5,2002edc <_free_r+0x240>
 2002db4:	100ad1ba 	srli	r5,r2,6
 2002db8:	28c00e44 	addi	r3,r5,57
 2002dbc:	18c7883a 	add	r3,r3,r3
 2002dc0:	29400e04 	addi	r5,r5,56
 2002dc4:	18c7883a 	add	r3,r3,r3
 2002dc8:	18c7883a 	add	r3,r3,r3
 2002dcc:	1909883a 	add	r4,r3,r4
 2002dd0:	20c00017 	ldw	r3,0(r4)
 2002dd4:	01c08074 	movhi	r7,513
 2002dd8:	213ffe04 	addi	r4,r4,-8
 2002ddc:	39fb7f04 	addi	r7,r7,-4612
 2002de0:	20c04426 	beq	r4,r3,2002ef4 <_free_r+0x258>
 2002de4:	01ffff04 	movi	r7,-4
 2002de8:	19400117 	ldw	r5,4(r3)
 2002dec:	29ca703a 	and	r5,r5,r7
 2002df0:	1140022e 	bgeu	r2,r5,2002dfc <_free_r+0x160>
 2002df4:	18c00217 	ldw	r3,8(r3)
 2002df8:	20fffb1e 	bne	r4,r3,2002de8 <_free_r+0x14c>
 2002dfc:	19000317 	ldw	r4,12(r3)
 2002e00:	31000315 	stw	r4,12(r6)
 2002e04:	30c00215 	stw	r3,8(r6)
 2002e08:	21800215 	stw	r6,8(r4)
 2002e0c:	19800315 	stw	r6,12(r3)
 2002e10:	003fde06 	br	2002d8c <_free_r+0xf0>
 2002e14:	29c00217 	ldw	r7,8(r5)
 2002e18:	10c5883a 	add	r2,r2,r3
 2002e1c:	00c08074 	movhi	r3,513
 2002e20:	18fb8104 	addi	r3,r3,-4604
 2002e24:	38c03b26 	beq	r7,r3,2002f14 <_free_r+0x278>
 2002e28:	2a000317 	ldw	r8,12(r5)
 2002e2c:	11400054 	ori	r5,r2,1
 2002e30:	3087883a 	add	r3,r6,r2
 2002e34:	3a000315 	stw	r8,12(r7)
 2002e38:	41c00215 	stw	r7,8(r8)
 2002e3c:	31400115 	stw	r5,4(r6)
 2002e40:	18800015 	stw	r2,0(r3)
 2002e44:	003fbd06 	br	2002d3c <_free_r+0xa0>
 2002e48:	39c0004c 	andi	r7,r7,1
 2002e4c:	10c5883a 	add	r2,r2,r3
 2002e50:	3800071e 	bne	r7,zero,2002e70 <_free_r+0x1d4>
 2002e54:	81fffe17 	ldw	r7,-8(r16)
 2002e58:	31cdc83a 	sub	r6,r6,r7
 2002e5c:	30c00317 	ldw	r3,12(r6)
 2002e60:	31400217 	ldw	r5,8(r6)
 2002e64:	11c5883a 	add	r2,r2,r7
 2002e68:	28c00315 	stw	r3,12(r5)
 2002e6c:	19400215 	stw	r5,8(r3)
 2002e70:	10c00054 	ori	r3,r2,1
 2002e74:	30c00115 	stw	r3,4(r6)
 2002e78:	00c08074 	movhi	r3,513
 2002e7c:	18c10904 	addi	r3,r3,1060
 2002e80:	18c00017 	ldw	r3,0(r3)
 2002e84:	21800215 	stw	r6,8(r4)
 2002e88:	10ffc036 	bltu	r2,r3,2002d8c <_free_r+0xf0>
 2002e8c:	00808074 	movhi	r2,513
 2002e90:	1087fa04 	addi	r2,r2,8168
 2002e94:	11400017 	ldw	r5,0(r2)
 2002e98:	8809883a 	mov	r4,r17
 2002e9c:	2002b780 	call	2002b78 <_malloc_trim_r>
 2002ea0:	003fba06 	br	2002d8c <_free_r+0xf0>
 2002ea4:	28c9883a 	add	r4,r5,r3
 2002ea8:	21000117 	ldw	r4,4(r4)
 2002eac:	2100004c 	andi	r4,r4,1
 2002eb0:	2000391e 	bne	r4,zero,2002f98 <_free_r+0x2fc>
 2002eb4:	29c00217 	ldw	r7,8(r5)
 2002eb8:	29000317 	ldw	r4,12(r5)
 2002ebc:	1885883a 	add	r2,r3,r2
 2002ec0:	10c00054 	ori	r3,r2,1
 2002ec4:	39000315 	stw	r4,12(r7)
 2002ec8:	21c00215 	stw	r7,8(r4)
 2002ecc:	30c00115 	stw	r3,4(r6)
 2002ed0:	308d883a 	add	r6,r6,r2
 2002ed4:	30800015 	stw	r2,0(r6)
 2002ed8:	003fac06 	br	2002d8c <_free_r+0xf0>
 2002edc:	00c00504 	movi	r3,20
 2002ee0:	19401536 	bltu	r3,r5,2002f38 <_free_r+0x29c>
 2002ee4:	28c01704 	addi	r3,r5,92
 2002ee8:	18c7883a 	add	r3,r3,r3
 2002eec:	294016c4 	addi	r5,r5,91
 2002ef0:	003fb406 	br	2002dc4 <_free_r+0x128>
 2002ef4:	280bd0ba 	srai	r5,r5,2
 2002ef8:	00c00044 	movi	r3,1
 2002efc:	38800117 	ldw	r2,4(r7)
 2002f00:	194a983a 	sll	r5,r3,r5
 2002f04:	2007883a 	mov	r3,r4
 2002f08:	2884b03a 	or	r2,r5,r2
 2002f0c:	38800115 	stw	r2,4(r7)
 2002f10:	003fbb06 	br	2002e00 <_free_r+0x164>
 2002f14:	21800515 	stw	r6,20(r4)
 2002f18:	21800415 	stw	r6,16(r4)
 2002f1c:	10c00054 	ori	r3,r2,1
 2002f20:	31c00315 	stw	r7,12(r6)
 2002f24:	31c00215 	stw	r7,8(r6)
 2002f28:	30c00115 	stw	r3,4(r6)
 2002f2c:	308d883a 	add	r6,r6,r2
 2002f30:	30800015 	stw	r2,0(r6)
 2002f34:	003f9506 	br	2002d8c <_free_r+0xf0>
 2002f38:	00c01504 	movi	r3,84
 2002f3c:	19400536 	bltu	r3,r5,2002f54 <_free_r+0x2b8>
 2002f40:	100ad33a 	srli	r5,r2,12
 2002f44:	28c01bc4 	addi	r3,r5,111
 2002f48:	18c7883a 	add	r3,r3,r3
 2002f4c:	29401b84 	addi	r5,r5,110
 2002f50:	003f9c06 	br	2002dc4 <_free_r+0x128>
 2002f54:	00c05504 	movi	r3,340
 2002f58:	19400536 	bltu	r3,r5,2002f70 <_free_r+0x2d4>
 2002f5c:	100ad3fa 	srli	r5,r2,15
 2002f60:	28c01e04 	addi	r3,r5,120
 2002f64:	18c7883a 	add	r3,r3,r3
 2002f68:	29401dc4 	addi	r5,r5,119
 2002f6c:	003f9506 	br	2002dc4 <_free_r+0x128>
 2002f70:	00c15504 	movi	r3,1364
 2002f74:	19400536 	bltu	r3,r5,2002f8c <_free_r+0x2f0>
 2002f78:	100ad4ba 	srli	r5,r2,18
 2002f7c:	28c01f44 	addi	r3,r5,125
 2002f80:	18c7883a 	add	r3,r3,r3
 2002f84:	29401f04 	addi	r5,r5,124
 2002f88:	003f8e06 	br	2002dc4 <_free_r+0x128>
 2002f8c:	00c03f84 	movi	r3,254
 2002f90:	01401f84 	movi	r5,126
 2002f94:	003f8b06 	br	2002dc4 <_free_r+0x128>
 2002f98:	10c00054 	ori	r3,r2,1
 2002f9c:	30c00115 	stw	r3,4(r6)
 2002fa0:	308d883a 	add	r6,r6,r2
 2002fa4:	30800015 	stw	r2,0(r6)
 2002fa8:	003f7806 	br	2002d8c <_free_r+0xf0>

02002fac <_lseek_r>:
 2002fac:	defffd04 	addi	sp,sp,-12
 2002fb0:	2805883a 	mov	r2,r5
 2002fb4:	dc000015 	stw	r16,0(sp)
 2002fb8:	04008074 	movhi	r16,513
 2002fbc:	dc400115 	stw	r17,4(sp)
 2002fc0:	300b883a 	mov	r5,r6
 2002fc4:	8407fb04 	addi	r16,r16,8172
 2002fc8:	2023883a 	mov	r17,r4
 2002fcc:	380d883a 	mov	r6,r7
 2002fd0:	1009883a 	mov	r4,r2
 2002fd4:	dfc00215 	stw	ra,8(sp)
 2002fd8:	80000015 	stw	zero,0(r16)
 2002fdc:	20038f80 	call	20038f8 <lseek>
 2002fe0:	00ffffc4 	movi	r3,-1
 2002fe4:	10c00526 	beq	r2,r3,2002ffc <_lseek_r+0x50>
 2002fe8:	dfc00217 	ldw	ra,8(sp)
 2002fec:	dc400117 	ldw	r17,4(sp)
 2002ff0:	dc000017 	ldw	r16,0(sp)
 2002ff4:	dec00304 	addi	sp,sp,12
 2002ff8:	f800283a 	ret
 2002ffc:	80c00017 	ldw	r3,0(r16)
 2003000:	183ff926 	beq	r3,zero,2002fe8 <_lseek_r+0x3c>
 2003004:	88c00015 	stw	r3,0(r17)
 2003008:	003ff706 	br	2002fe8 <_lseek_r+0x3c>

0200300c <__smakebuf_r>:
 200300c:	2880030b 	ldhu	r2,12(r5)
 2003010:	10c0008c 	andi	r3,r2,2
 2003014:	1800411e 	bne	r3,zero,200311c <__smakebuf_r+0x110>
 2003018:	deffec04 	addi	sp,sp,-80
 200301c:	dc000f15 	stw	r16,60(sp)
 2003020:	2821883a 	mov	r16,r5
 2003024:	2940038f 	ldh	r5,14(r5)
 2003028:	dc401015 	stw	r17,64(sp)
 200302c:	dfc01315 	stw	ra,76(sp)
 2003030:	dcc01215 	stw	r19,72(sp)
 2003034:	dc801115 	stw	r18,68(sp)
 2003038:	2023883a 	mov	r17,r4
 200303c:	28001c16 	blt	r5,zero,20030b0 <__smakebuf_r+0xa4>
 2003040:	d80d883a 	mov	r6,sp
 2003044:	20032280 	call	2003228 <_fstat_r>
 2003048:	10001816 	blt	r2,zero,20030ac <__smakebuf_r+0xa0>
 200304c:	d8800117 	ldw	r2,4(sp)
 2003050:	00e00014 	movui	r3,32768
 2003054:	10bc000c 	andi	r2,r2,61440
 2003058:	14c80020 	cmpeqi	r19,r2,8192
 200305c:	10c03726 	beq	r2,r3,200313c <__smakebuf_r+0x130>
 2003060:	80c0030b 	ldhu	r3,12(r16)
 2003064:	18c20014 	ori	r3,r3,2048
 2003068:	80c0030d 	sth	r3,12(r16)
 200306c:	00c80004 	movi	r3,8192
 2003070:	10c0521e 	bne	r2,r3,20031bc <__smakebuf_r+0x1b0>
 2003074:	8140038f 	ldh	r5,14(r16)
 2003078:	8809883a 	mov	r4,r17
 200307c:	20032840 	call	2003284 <_isatty_r>
 2003080:	10004c26 	beq	r2,zero,20031b4 <__smakebuf_r+0x1a8>
 2003084:	8080030b 	ldhu	r2,12(r16)
 2003088:	80c010c4 	addi	r3,r16,67
 200308c:	80c00015 	stw	r3,0(r16)
 2003090:	10800054 	ori	r2,r2,1
 2003094:	8080030d 	sth	r2,12(r16)
 2003098:	00800044 	movi	r2,1
 200309c:	80c00415 	stw	r3,16(r16)
 20030a0:	80800515 	stw	r2,20(r16)
 20030a4:	04810004 	movi	r18,1024
 20030a8:	00000706 	br	20030c8 <__smakebuf_r+0xbc>
 20030ac:	8080030b 	ldhu	r2,12(r16)
 20030b0:	10c0200c 	andi	r3,r2,128
 20030b4:	18001f1e 	bne	r3,zero,2003134 <__smakebuf_r+0x128>
 20030b8:	04810004 	movi	r18,1024
 20030bc:	10820014 	ori	r2,r2,2048
 20030c0:	8080030d 	sth	r2,12(r16)
 20030c4:	0027883a 	mov	r19,zero
 20030c8:	900b883a 	mov	r5,r18
 20030cc:	8809883a 	mov	r4,r17
 20030d0:	20012140 	call	2001214 <_malloc_r>
 20030d4:	10002c26 	beq	r2,zero,2003188 <__smakebuf_r+0x17c>
 20030d8:	80c0030b 	ldhu	r3,12(r16)
 20030dc:	01008034 	movhi	r4,512
 20030e0:	21020704 	addi	r4,r4,2076
 20030e4:	89000f15 	stw	r4,60(r17)
 20030e8:	18c02014 	ori	r3,r3,128
 20030ec:	80c0030d 	sth	r3,12(r16)
 20030f0:	80800015 	stw	r2,0(r16)
 20030f4:	80800415 	stw	r2,16(r16)
 20030f8:	84800515 	stw	r18,20(r16)
 20030fc:	98001a1e 	bne	r19,zero,2003168 <__smakebuf_r+0x15c>
 2003100:	dfc01317 	ldw	ra,76(sp)
 2003104:	dcc01217 	ldw	r19,72(sp)
 2003108:	dc801117 	ldw	r18,68(sp)
 200310c:	dc401017 	ldw	r17,64(sp)
 2003110:	dc000f17 	ldw	r16,60(sp)
 2003114:	dec01404 	addi	sp,sp,80
 2003118:	f800283a 	ret
 200311c:	288010c4 	addi	r2,r5,67
 2003120:	28800015 	stw	r2,0(r5)
 2003124:	28800415 	stw	r2,16(r5)
 2003128:	00800044 	movi	r2,1
 200312c:	28800515 	stw	r2,20(r5)
 2003130:	f800283a 	ret
 2003134:	04801004 	movi	r18,64
 2003138:	003fe006 	br	20030bc <__smakebuf_r+0xb0>
 200313c:	81000a17 	ldw	r4,40(r16)
 2003140:	00c08034 	movhi	r3,512
 2003144:	18c95804 	addi	r3,r3,9568
 2003148:	20ffc51e 	bne	r4,r3,2003060 <__smakebuf_r+0x54>
 200314c:	8080030b 	ldhu	r2,12(r16)
 2003150:	04810004 	movi	r18,1024
 2003154:	84801315 	stw	r18,76(r16)
 2003158:	1484b03a 	or	r2,r2,r18
 200315c:	8080030d 	sth	r2,12(r16)
 2003160:	0027883a 	mov	r19,zero
 2003164:	003fd806 	br	20030c8 <__smakebuf_r+0xbc>
 2003168:	8140038f 	ldh	r5,14(r16)
 200316c:	8809883a 	mov	r4,r17
 2003170:	20032840 	call	2003284 <_isatty_r>
 2003174:	103fe226 	beq	r2,zero,2003100 <__smakebuf_r+0xf4>
 2003178:	8080030b 	ldhu	r2,12(r16)
 200317c:	10800054 	ori	r2,r2,1
 2003180:	8080030d 	sth	r2,12(r16)
 2003184:	003fde06 	br	2003100 <__smakebuf_r+0xf4>
 2003188:	8080030b 	ldhu	r2,12(r16)
 200318c:	10c0800c 	andi	r3,r2,512
 2003190:	183fdb1e 	bne	r3,zero,2003100 <__smakebuf_r+0xf4>
 2003194:	10800094 	ori	r2,r2,2
 2003198:	80c010c4 	addi	r3,r16,67
 200319c:	8080030d 	sth	r2,12(r16)
 20031a0:	00800044 	movi	r2,1
 20031a4:	80c00015 	stw	r3,0(r16)
 20031a8:	80c00415 	stw	r3,16(r16)
 20031ac:	80800515 	stw	r2,20(r16)
 20031b0:	003fd306 	br	2003100 <__smakebuf_r+0xf4>
 20031b4:	04810004 	movi	r18,1024
 20031b8:	003fc306 	br	20030c8 <__smakebuf_r+0xbc>
 20031bc:	0027883a 	mov	r19,zero
 20031c0:	04810004 	movi	r18,1024
 20031c4:	003fc006 	br	20030c8 <__smakebuf_r+0xbc>

020031c8 <_read_r>:
 20031c8:	defffd04 	addi	sp,sp,-12
 20031cc:	2805883a 	mov	r2,r5
 20031d0:	dc000015 	stw	r16,0(sp)
 20031d4:	04008074 	movhi	r16,513
 20031d8:	dc400115 	stw	r17,4(sp)
 20031dc:	300b883a 	mov	r5,r6
 20031e0:	8407fb04 	addi	r16,r16,8172
 20031e4:	2023883a 	mov	r17,r4
 20031e8:	380d883a 	mov	r6,r7
 20031ec:	1009883a 	mov	r4,r2
 20031f0:	dfc00215 	stw	ra,8(sp)
 20031f4:	80000015 	stw	zero,0(r16)
 20031f8:	2003acc0 	call	2003acc <read>
 20031fc:	00ffffc4 	movi	r3,-1
 2003200:	10c00526 	beq	r2,r3,2003218 <_read_r+0x50>
 2003204:	dfc00217 	ldw	ra,8(sp)
 2003208:	dc400117 	ldw	r17,4(sp)
 200320c:	dc000017 	ldw	r16,0(sp)
 2003210:	dec00304 	addi	sp,sp,12
 2003214:	f800283a 	ret
 2003218:	80c00017 	ldw	r3,0(r16)
 200321c:	183ff926 	beq	r3,zero,2003204 <_read_r+0x3c>
 2003220:	88c00015 	stw	r3,0(r17)
 2003224:	003ff706 	br	2003204 <_read_r+0x3c>

02003228 <_fstat_r>:
 2003228:	defffd04 	addi	sp,sp,-12
 200322c:	2805883a 	mov	r2,r5
 2003230:	dc000015 	stw	r16,0(sp)
 2003234:	04008074 	movhi	r16,513
 2003238:	dc400115 	stw	r17,4(sp)
 200323c:	8407fb04 	addi	r16,r16,8172
 2003240:	2023883a 	mov	r17,r4
 2003244:	300b883a 	mov	r5,r6
 2003248:	1009883a 	mov	r4,r2
 200324c:	dfc00215 	stw	ra,8(sp)
 2003250:	80000015 	stw	zero,0(r16)
 2003254:	20036300 	call	2003630 <fstat>
 2003258:	00ffffc4 	movi	r3,-1
 200325c:	10c00526 	beq	r2,r3,2003274 <_fstat_r+0x4c>
 2003260:	dfc00217 	ldw	ra,8(sp)
 2003264:	dc400117 	ldw	r17,4(sp)
 2003268:	dc000017 	ldw	r16,0(sp)
 200326c:	dec00304 	addi	sp,sp,12
 2003270:	f800283a 	ret
 2003274:	80c00017 	ldw	r3,0(r16)
 2003278:	183ff926 	beq	r3,zero,2003260 <_fstat_r+0x38>
 200327c:	88c00015 	stw	r3,0(r17)
 2003280:	003ff706 	br	2003260 <_fstat_r+0x38>

02003284 <_isatty_r>:
 2003284:	defffd04 	addi	sp,sp,-12
 2003288:	dc000015 	stw	r16,0(sp)
 200328c:	04008074 	movhi	r16,513
 2003290:	dc400115 	stw	r17,4(sp)
 2003294:	8407fb04 	addi	r16,r16,8172
 2003298:	2023883a 	mov	r17,r4
 200329c:	2809883a 	mov	r4,r5
 20032a0:	dfc00215 	stw	ra,8(sp)
 20032a4:	80000015 	stw	zero,0(r16)
 20032a8:	20037240 	call	2003724 <isatty>
 20032ac:	00ffffc4 	movi	r3,-1
 20032b0:	10c00526 	beq	r2,r3,20032c8 <_isatty_r+0x44>
 20032b4:	dfc00217 	ldw	ra,8(sp)
 20032b8:	dc400117 	ldw	r17,4(sp)
 20032bc:	dc000017 	ldw	r16,0(sp)
 20032c0:	dec00304 	addi	sp,sp,12
 20032c4:	f800283a 	ret
 20032c8:	80c00017 	ldw	r3,0(r16)
 20032cc:	183ff926 	beq	r3,zero,20032b4 <_isatty_r+0x30>
 20032d0:	88c00015 	stw	r3,0(r17)
 20032d4:	003ff706 	br	20032b4 <_isatty_r+0x30>

020032d8 <__divsi3>:
 20032d8:	20001b16 	blt	r4,zero,2003348 <__divsi3+0x70>
 20032dc:	000f883a 	mov	r7,zero
 20032e0:	28001616 	blt	r5,zero,200333c <__divsi3+0x64>
 20032e4:	200d883a 	mov	r6,r4
 20032e8:	29001a2e 	bgeu	r5,r4,2003354 <__divsi3+0x7c>
 20032ec:	00800804 	movi	r2,32
 20032f0:	00c00044 	movi	r3,1
 20032f4:	00000106 	br	20032fc <__divsi3+0x24>
 20032f8:	10000d26 	beq	r2,zero,2003330 <__divsi3+0x58>
 20032fc:	294b883a 	add	r5,r5,r5
 2003300:	10bfffc4 	addi	r2,r2,-1
 2003304:	18c7883a 	add	r3,r3,r3
 2003308:	293ffb36 	bltu	r5,r4,20032f8 <__divsi3+0x20>
 200330c:	0005883a 	mov	r2,zero
 2003310:	18000726 	beq	r3,zero,2003330 <__divsi3+0x58>
 2003314:	0005883a 	mov	r2,zero
 2003318:	31400236 	bltu	r6,r5,2003324 <__divsi3+0x4c>
 200331c:	314dc83a 	sub	r6,r6,r5
 2003320:	10c4b03a 	or	r2,r2,r3
 2003324:	1806d07a 	srli	r3,r3,1
 2003328:	280ad07a 	srli	r5,r5,1
 200332c:	183ffa1e 	bne	r3,zero,2003318 <__divsi3+0x40>
 2003330:	38000126 	beq	r7,zero,2003338 <__divsi3+0x60>
 2003334:	0085c83a 	sub	r2,zero,r2
 2003338:	f800283a 	ret
 200333c:	014bc83a 	sub	r5,zero,r5
 2003340:	39c0005c 	xori	r7,r7,1
 2003344:	003fe706 	br	20032e4 <__divsi3+0xc>
 2003348:	0109c83a 	sub	r4,zero,r4
 200334c:	01c00044 	movi	r7,1
 2003350:	003fe306 	br	20032e0 <__divsi3+0x8>
 2003354:	00c00044 	movi	r3,1
 2003358:	003fee06 	br	2003314 <__divsi3+0x3c>

0200335c <__modsi3>:
 200335c:	20001716 	blt	r4,zero,20033bc <__modsi3+0x60>
 2003360:	000f883a 	mov	r7,zero
 2003364:	2005883a 	mov	r2,r4
 2003368:	28001216 	blt	r5,zero,20033b4 <__modsi3+0x58>
 200336c:	2900162e 	bgeu	r5,r4,20033c8 <__modsi3+0x6c>
 2003370:	01800804 	movi	r6,32
 2003374:	00c00044 	movi	r3,1
 2003378:	00000106 	br	2003380 <__modsi3+0x24>
 200337c:	30000a26 	beq	r6,zero,20033a8 <__modsi3+0x4c>
 2003380:	294b883a 	add	r5,r5,r5
 2003384:	31bfffc4 	addi	r6,r6,-1
 2003388:	18c7883a 	add	r3,r3,r3
 200338c:	293ffb36 	bltu	r5,r4,200337c <__modsi3+0x20>
 2003390:	18000526 	beq	r3,zero,20033a8 <__modsi3+0x4c>
 2003394:	1806d07a 	srli	r3,r3,1
 2003398:	11400136 	bltu	r2,r5,20033a0 <__modsi3+0x44>
 200339c:	1145c83a 	sub	r2,r2,r5
 20033a0:	280ad07a 	srli	r5,r5,1
 20033a4:	183ffb1e 	bne	r3,zero,2003394 <__modsi3+0x38>
 20033a8:	38000126 	beq	r7,zero,20033b0 <__modsi3+0x54>
 20033ac:	0085c83a 	sub	r2,zero,r2
 20033b0:	f800283a 	ret
 20033b4:	014bc83a 	sub	r5,zero,r5
 20033b8:	003fec06 	br	200336c <__modsi3+0x10>
 20033bc:	0109c83a 	sub	r4,zero,r4
 20033c0:	01c00044 	movi	r7,1
 20033c4:	003fe706 	br	2003364 <__modsi3+0x8>
 20033c8:	00c00044 	movi	r3,1
 20033cc:	003ff106 	br	2003394 <__modsi3+0x38>

020033d0 <__udivsi3>:
 20033d0:	200d883a 	mov	r6,r4
 20033d4:	2900152e 	bgeu	r5,r4,200342c <__udivsi3+0x5c>
 20033d8:	28001416 	blt	r5,zero,200342c <__udivsi3+0x5c>
 20033dc:	00800804 	movi	r2,32
 20033e0:	00c00044 	movi	r3,1
 20033e4:	00000206 	br	20033f0 <__udivsi3+0x20>
 20033e8:	10000e26 	beq	r2,zero,2003424 <__udivsi3+0x54>
 20033ec:	28000516 	blt	r5,zero,2003404 <__udivsi3+0x34>
 20033f0:	294b883a 	add	r5,r5,r5
 20033f4:	10bfffc4 	addi	r2,r2,-1
 20033f8:	18c7883a 	add	r3,r3,r3
 20033fc:	293ffa36 	bltu	r5,r4,20033e8 <__udivsi3+0x18>
 2003400:	18000826 	beq	r3,zero,2003424 <__udivsi3+0x54>
 2003404:	0005883a 	mov	r2,zero
 2003408:	31400236 	bltu	r6,r5,2003414 <__udivsi3+0x44>
 200340c:	314dc83a 	sub	r6,r6,r5
 2003410:	10c4b03a 	or	r2,r2,r3
 2003414:	1806d07a 	srli	r3,r3,1
 2003418:	280ad07a 	srli	r5,r5,1
 200341c:	183ffa1e 	bne	r3,zero,2003408 <__udivsi3+0x38>
 2003420:	f800283a 	ret
 2003424:	0005883a 	mov	r2,zero
 2003428:	f800283a 	ret
 200342c:	00c00044 	movi	r3,1
 2003430:	003ff406 	br	2003404 <__udivsi3+0x34>

02003434 <__umodsi3>:
 2003434:	2005883a 	mov	r2,r4
 2003438:	2900122e 	bgeu	r5,r4,2003484 <__umodsi3+0x50>
 200343c:	28001116 	blt	r5,zero,2003484 <__umodsi3+0x50>
 2003440:	01800804 	movi	r6,32
 2003444:	00c00044 	movi	r3,1
 2003448:	00000206 	br	2003454 <__umodsi3+0x20>
 200344c:	30000c26 	beq	r6,zero,2003480 <__umodsi3+0x4c>
 2003450:	28000516 	blt	r5,zero,2003468 <__umodsi3+0x34>
 2003454:	294b883a 	add	r5,r5,r5
 2003458:	31bfffc4 	addi	r6,r6,-1
 200345c:	18c7883a 	add	r3,r3,r3
 2003460:	293ffa36 	bltu	r5,r4,200344c <__umodsi3+0x18>
 2003464:	18000626 	beq	r3,zero,2003480 <__umodsi3+0x4c>
 2003468:	1806d07a 	srli	r3,r3,1
 200346c:	11400136 	bltu	r2,r5,2003474 <__umodsi3+0x40>
 2003470:	1145c83a 	sub	r2,r2,r5
 2003474:	280ad07a 	srli	r5,r5,1
 2003478:	183ffb1e 	bne	r3,zero,2003468 <__umodsi3+0x34>
 200347c:	f800283a 	ret
 2003480:	f800283a 	ret
 2003484:	00c00044 	movi	r3,1
 2003488:	003ff706 	br	2003468 <__umodsi3+0x34>

0200348c <__mulsi3>:
 200348c:	0005883a 	mov	r2,zero
 2003490:	20000726 	beq	r4,zero,20034b0 <__mulsi3+0x24>
 2003494:	20c0004c 	andi	r3,r4,1
 2003498:	2008d07a 	srli	r4,r4,1
 200349c:	18000126 	beq	r3,zero,20034a4 <__mulsi3+0x18>
 20034a0:	1145883a 	add	r2,r2,r5
 20034a4:	294b883a 	add	r5,r5,r5
 20034a8:	203ffa1e 	bne	r4,zero,2003494 <__mulsi3+0x8>
 20034ac:	f800283a 	ret
 20034b0:	f800283a 	ret

020034b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20034b4:	defffe04 	addi	sp,sp,-8
 20034b8:	dfc00115 	stw	ra,4(sp)
 20034bc:	df000015 	stw	fp,0(sp)
 20034c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20034c4:	d0a00917 	ldw	r2,-32732(gp)
 20034c8:	10000326 	beq	r2,zero,20034d8 <alt_get_errno+0x24>
 20034cc:	d0a00917 	ldw	r2,-32732(gp)
 20034d0:	103ee83a 	callr	r2
 20034d4:	00000106 	br	20034dc <alt_get_errno+0x28>
 20034d8:	d0a6f504 	addi	r2,gp,-25644
}
 20034dc:	e037883a 	mov	sp,fp
 20034e0:	dfc00117 	ldw	ra,4(sp)
 20034e4:	df000017 	ldw	fp,0(sp)
 20034e8:	dec00204 	addi	sp,sp,8
 20034ec:	f800283a 	ret

020034f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20034f0:	defffb04 	addi	sp,sp,-20
 20034f4:	dfc00415 	stw	ra,16(sp)
 20034f8:	df000315 	stw	fp,12(sp)
 20034fc:	df000304 	addi	fp,sp,12
 2003500:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2003504:	e0bfff17 	ldw	r2,-4(fp)
 2003508:	10000816 	blt	r2,zero,200352c <close+0x3c>
 200350c:	01400304 	movi	r5,12
 2003510:	e13fff17 	ldw	r4,-4(fp)
 2003514:	200348c0 	call	200348c <__mulsi3>
 2003518:	1007883a 	mov	r3,r2
 200351c:	00808074 	movhi	r2,513
 2003520:	10bc8b04 	addi	r2,r2,-3540
 2003524:	1885883a 	add	r2,r3,r2
 2003528:	00000106 	br	2003530 <close+0x40>
 200352c:	0005883a 	mov	r2,zero
 2003530:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2003534:	e0bffd17 	ldw	r2,-12(fp)
 2003538:	10001926 	beq	r2,zero,20035a0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200353c:	e0bffd17 	ldw	r2,-12(fp)
 2003540:	10800017 	ldw	r2,0(r2)
 2003544:	10800417 	ldw	r2,16(r2)
 2003548:	10000626 	beq	r2,zero,2003564 <close+0x74>
 200354c:	e0bffd17 	ldw	r2,-12(fp)
 2003550:	10800017 	ldw	r2,0(r2)
 2003554:	10800417 	ldw	r2,16(r2)
 2003558:	e13ffd17 	ldw	r4,-12(fp)
 200355c:	103ee83a 	callr	r2
 2003560:	00000106 	br	2003568 <close+0x78>
 2003564:	0005883a 	mov	r2,zero
 2003568:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200356c:	e13fff17 	ldw	r4,-4(fp)
 2003570:	2003bd00 	call	2003bd0 <alt_release_fd>
    if (rval < 0)
 2003574:	e0bffe17 	ldw	r2,-8(fp)
 2003578:	1000070e 	bge	r2,zero,2003598 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200357c:	20034b40 	call	20034b4 <alt_get_errno>
 2003580:	1007883a 	mov	r3,r2
 2003584:	e0bffe17 	ldw	r2,-8(fp)
 2003588:	0085c83a 	sub	r2,zero,r2
 200358c:	18800015 	stw	r2,0(r3)
      return -1;
 2003590:	00bfffc4 	movi	r2,-1
 2003594:	00000706 	br	20035b4 <close+0xc4>
    }
    return 0;
 2003598:	0005883a 	mov	r2,zero
 200359c:	00000506 	br	20035b4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20035a0:	20034b40 	call	20034b4 <alt_get_errno>
 20035a4:	1007883a 	mov	r3,r2
 20035a8:	00801444 	movi	r2,81
 20035ac:	18800015 	stw	r2,0(r3)
    return -1;
 20035b0:	00bfffc4 	movi	r2,-1
  }
}
 20035b4:	e037883a 	mov	sp,fp
 20035b8:	dfc00117 	ldw	ra,4(sp)
 20035bc:	df000017 	ldw	fp,0(sp)
 20035c0:	dec00204 	addi	sp,sp,8
 20035c4:	f800283a 	ret

020035c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 20035c8:	defffc04 	addi	sp,sp,-16
 20035cc:	df000315 	stw	fp,12(sp)
 20035d0:	df000304 	addi	fp,sp,12
 20035d4:	e13ffd15 	stw	r4,-12(fp)
 20035d8:	e17ffe15 	stw	r5,-8(fp)
 20035dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 20035e0:	e0bfff17 	ldw	r2,-4(fp)
}
 20035e4:	e037883a 	mov	sp,fp
 20035e8:	df000017 	ldw	fp,0(sp)
 20035ec:	dec00104 	addi	sp,sp,4
 20035f0:	f800283a 	ret

020035f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20035f4:	defffe04 	addi	sp,sp,-8
 20035f8:	dfc00115 	stw	ra,4(sp)
 20035fc:	df000015 	stw	fp,0(sp)
 2003600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003604:	d0a00917 	ldw	r2,-32732(gp)
 2003608:	10000326 	beq	r2,zero,2003618 <alt_get_errno+0x24>
 200360c:	d0a00917 	ldw	r2,-32732(gp)
 2003610:	103ee83a 	callr	r2
 2003614:	00000106 	br	200361c <alt_get_errno+0x28>
 2003618:	d0a6f504 	addi	r2,gp,-25644
}
 200361c:	e037883a 	mov	sp,fp
 2003620:	dfc00117 	ldw	ra,4(sp)
 2003624:	df000017 	ldw	fp,0(sp)
 2003628:	dec00204 	addi	sp,sp,8
 200362c:	f800283a 	ret

02003630 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2003630:	defffb04 	addi	sp,sp,-20
 2003634:	dfc00415 	stw	ra,16(sp)
 2003638:	df000315 	stw	fp,12(sp)
 200363c:	df000304 	addi	fp,sp,12
 2003640:	e13ffe15 	stw	r4,-8(fp)
 2003644:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003648:	e0bffe17 	ldw	r2,-8(fp)
 200364c:	10000816 	blt	r2,zero,2003670 <fstat+0x40>
 2003650:	01400304 	movi	r5,12
 2003654:	e13ffe17 	ldw	r4,-8(fp)
 2003658:	200348c0 	call	200348c <__mulsi3>
 200365c:	1007883a 	mov	r3,r2
 2003660:	00808074 	movhi	r2,513
 2003664:	10bc8b04 	addi	r2,r2,-3540
 2003668:	1885883a 	add	r2,r3,r2
 200366c:	00000106 	br	2003674 <fstat+0x44>
 2003670:	0005883a 	mov	r2,zero
 2003674:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2003678:	e0bffd17 	ldw	r2,-12(fp)
 200367c:	10001026 	beq	r2,zero,20036c0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2003680:	e0bffd17 	ldw	r2,-12(fp)
 2003684:	10800017 	ldw	r2,0(r2)
 2003688:	10800817 	ldw	r2,32(r2)
 200368c:	10000726 	beq	r2,zero,20036ac <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 2003690:	e0bffd17 	ldw	r2,-12(fp)
 2003694:	10800017 	ldw	r2,0(r2)
 2003698:	10800817 	ldw	r2,32(r2)
 200369c:	e17fff17 	ldw	r5,-4(fp)
 20036a0:	e13ffd17 	ldw	r4,-12(fp)
 20036a4:	103ee83a 	callr	r2
 20036a8:	00000a06 	br	20036d4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20036ac:	e0bfff17 	ldw	r2,-4(fp)
 20036b0:	00c80004 	movi	r3,8192
 20036b4:	10c00115 	stw	r3,4(r2)
      return 0;
 20036b8:	0005883a 	mov	r2,zero
 20036bc:	00000506 	br	20036d4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20036c0:	20035f40 	call	20035f4 <alt_get_errno>
 20036c4:	1007883a 	mov	r3,r2
 20036c8:	00801444 	movi	r2,81
 20036cc:	18800015 	stw	r2,0(r3)
    return -1;
 20036d0:	00bfffc4 	movi	r2,-1
  }
}
 20036d4:	e037883a 	mov	sp,fp
 20036d8:	dfc00117 	ldw	ra,4(sp)
 20036dc:	df000017 	ldw	fp,0(sp)
 20036e0:	dec00204 	addi	sp,sp,8
 20036e4:	f800283a 	ret

020036e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20036e8:	defffe04 	addi	sp,sp,-8
 20036ec:	dfc00115 	stw	ra,4(sp)
 20036f0:	df000015 	stw	fp,0(sp)
 20036f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20036f8:	d0a00917 	ldw	r2,-32732(gp)
 20036fc:	10000326 	beq	r2,zero,200370c <alt_get_errno+0x24>
 2003700:	d0a00917 	ldw	r2,-32732(gp)
 2003704:	103ee83a 	callr	r2
 2003708:	00000106 	br	2003710 <alt_get_errno+0x28>
 200370c:	d0a6f504 	addi	r2,gp,-25644
}
 2003710:	e037883a 	mov	sp,fp
 2003714:	dfc00117 	ldw	ra,4(sp)
 2003718:	df000017 	ldw	fp,0(sp)
 200371c:	dec00204 	addi	sp,sp,8
 2003720:	f800283a 	ret

02003724 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2003724:	deffed04 	addi	sp,sp,-76
 2003728:	dfc01215 	stw	ra,72(sp)
 200372c:	df001115 	stw	fp,68(sp)
 2003730:	df001104 	addi	fp,sp,68
 2003734:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003738:	e0bfff17 	ldw	r2,-4(fp)
 200373c:	10000816 	blt	r2,zero,2003760 <isatty+0x3c>
 2003740:	01400304 	movi	r5,12
 2003744:	e13fff17 	ldw	r4,-4(fp)
 2003748:	200348c0 	call	200348c <__mulsi3>
 200374c:	1007883a 	mov	r3,r2
 2003750:	00808074 	movhi	r2,513
 2003754:	10bc8b04 	addi	r2,r2,-3540
 2003758:	1885883a 	add	r2,r3,r2
 200375c:	00000106 	br	2003764 <isatty+0x40>
 2003760:	0005883a 	mov	r2,zero
 2003764:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2003768:	e0bfef17 	ldw	r2,-68(fp)
 200376c:	10000e26 	beq	r2,zero,20037a8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2003770:	e0bfef17 	ldw	r2,-68(fp)
 2003774:	10800017 	ldw	r2,0(r2)
 2003778:	10800817 	ldw	r2,32(r2)
 200377c:	1000021e 	bne	r2,zero,2003788 <isatty+0x64>
    {
      return 1;
 2003780:	00800044 	movi	r2,1
 2003784:	00000d06 	br	20037bc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2003788:	e0bff004 	addi	r2,fp,-64
 200378c:	100b883a 	mov	r5,r2
 2003790:	e13fff17 	ldw	r4,-4(fp)
 2003794:	20036300 	call	2003630 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2003798:	e0bff117 	ldw	r2,-60(fp)
 200379c:	10880020 	cmpeqi	r2,r2,8192
 20037a0:	10803fcc 	andi	r2,r2,255
 20037a4:	00000506 	br	20037bc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20037a8:	20036e80 	call	20036e8 <alt_get_errno>
 20037ac:	1007883a 	mov	r3,r2
 20037b0:	00801444 	movi	r2,81
 20037b4:	18800015 	stw	r2,0(r3)
    return 0;
 20037b8:	0005883a 	mov	r2,zero
  }
}
 20037bc:	e037883a 	mov	sp,fp
 20037c0:	dfc00117 	ldw	ra,4(sp)
 20037c4:	df000017 	ldw	fp,0(sp)
 20037c8:	dec00204 	addi	sp,sp,8
 20037cc:	f800283a 	ret

020037d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20037d0:	defffc04 	addi	sp,sp,-16
 20037d4:	df000315 	stw	fp,12(sp)
 20037d8:	df000304 	addi	fp,sp,12
 20037dc:	e13ffd15 	stw	r4,-12(fp)
 20037e0:	e17ffe15 	stw	r5,-8(fp)
 20037e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20037e8:	e0fffe17 	ldw	r3,-8(fp)
 20037ec:	e0bffd17 	ldw	r2,-12(fp)
 20037f0:	18800c26 	beq	r3,r2,2003824 <alt_load_section+0x54>
  {
    while( to != end )
 20037f4:	00000806 	br	2003818 <alt_load_section+0x48>
    {
      *to++ = *from++;
 20037f8:	e0bffe17 	ldw	r2,-8(fp)
 20037fc:	10c00104 	addi	r3,r2,4
 2003800:	e0fffe15 	stw	r3,-8(fp)
 2003804:	e0fffd17 	ldw	r3,-12(fp)
 2003808:	19000104 	addi	r4,r3,4
 200380c:	e13ffd15 	stw	r4,-12(fp)
 2003810:	18c00017 	ldw	r3,0(r3)
 2003814:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003818:	e0fffe17 	ldw	r3,-8(fp)
 200381c:	e0bfff17 	ldw	r2,-4(fp)
 2003820:	18bff51e 	bne	r3,r2,20037f8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2003824:	0001883a 	nop
 2003828:	e037883a 	mov	sp,fp
 200382c:	df000017 	ldw	fp,0(sp)
 2003830:	dec00104 	addi	sp,sp,4
 2003834:	f800283a 	ret

02003838 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2003838:	defffe04 	addi	sp,sp,-8
 200383c:	dfc00115 	stw	ra,4(sp)
 2003840:	df000015 	stw	fp,0(sp)
 2003844:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2003848:	01808074 	movhi	r6,513
 200384c:	31813304 	addi	r6,r6,1228
 2003850:	01408074 	movhi	r5,513
 2003854:	297a7604 	addi	r5,r5,-5672
 2003858:	01008074 	movhi	r4,513
 200385c:	21013304 	addi	r4,r4,1228
 2003860:	20037d00 	call	20037d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2003864:	01808034 	movhi	r6,512
 2003868:	31808c04 	addi	r6,r6,560
 200386c:	01408034 	movhi	r5,512
 2003870:	29400804 	addi	r5,r5,32
 2003874:	01008034 	movhi	r4,512
 2003878:	21000804 	addi	r4,r4,32
 200387c:	20037d00 	call	20037d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2003880:	01808074 	movhi	r6,513
 2003884:	31ba7604 	addi	r6,r6,-5672
 2003888:	01408074 	movhi	r5,513
 200388c:	297a1b04 	addi	r5,r5,-6036
 2003890:	01008074 	movhi	r4,513
 2003894:	213a1b04 	addi	r4,r4,-6036
 2003898:	20037d00 	call	20037d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200389c:	200d42c0 	call	200d42c <alt_dcache_flush_all>
  alt_icache_flush_all();
 20038a0:	200d5ec0 	call	200d5ec <alt_icache_flush_all>
}
 20038a4:	0001883a 	nop
 20038a8:	e037883a 	mov	sp,fp
 20038ac:	dfc00117 	ldw	ra,4(sp)
 20038b0:	df000017 	ldw	fp,0(sp)
 20038b4:	dec00204 	addi	sp,sp,8
 20038b8:	f800283a 	ret

020038bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20038bc:	defffe04 	addi	sp,sp,-8
 20038c0:	dfc00115 	stw	ra,4(sp)
 20038c4:	df000015 	stw	fp,0(sp)
 20038c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20038cc:	d0a00917 	ldw	r2,-32732(gp)
 20038d0:	10000326 	beq	r2,zero,20038e0 <alt_get_errno+0x24>
 20038d4:	d0a00917 	ldw	r2,-32732(gp)
 20038d8:	103ee83a 	callr	r2
 20038dc:	00000106 	br	20038e4 <alt_get_errno+0x28>
 20038e0:	d0a6f504 	addi	r2,gp,-25644
}
 20038e4:	e037883a 	mov	sp,fp
 20038e8:	dfc00117 	ldw	ra,4(sp)
 20038ec:	df000017 	ldw	fp,0(sp)
 20038f0:	dec00204 	addi	sp,sp,8
 20038f4:	f800283a 	ret

020038f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 20038f8:	defff904 	addi	sp,sp,-28
 20038fc:	dfc00615 	stw	ra,24(sp)
 2003900:	df000515 	stw	fp,20(sp)
 2003904:	df000504 	addi	fp,sp,20
 2003908:	e13ffd15 	stw	r4,-12(fp)
 200390c:	e17ffe15 	stw	r5,-8(fp)
 2003910:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2003914:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003918:	e0bffd17 	ldw	r2,-12(fp)
 200391c:	10000816 	blt	r2,zero,2003940 <lseek+0x48>
 2003920:	01400304 	movi	r5,12
 2003924:	e13ffd17 	ldw	r4,-12(fp)
 2003928:	200348c0 	call	200348c <__mulsi3>
 200392c:	1007883a 	mov	r3,r2
 2003930:	00808074 	movhi	r2,513
 2003934:	10bc8b04 	addi	r2,r2,-3540
 2003938:	1885883a 	add	r2,r3,r2
 200393c:	00000106 	br	2003944 <lseek+0x4c>
 2003940:	0005883a 	mov	r2,zero
 2003944:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2003948:	e0bffc17 	ldw	r2,-16(fp)
 200394c:	10001026 	beq	r2,zero,2003990 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2003950:	e0bffc17 	ldw	r2,-16(fp)
 2003954:	10800017 	ldw	r2,0(r2)
 2003958:	10800717 	ldw	r2,28(r2)
 200395c:	10000926 	beq	r2,zero,2003984 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2003960:	e0bffc17 	ldw	r2,-16(fp)
 2003964:	10800017 	ldw	r2,0(r2)
 2003968:	10800717 	ldw	r2,28(r2)
 200396c:	e1bfff17 	ldw	r6,-4(fp)
 2003970:	e17ffe17 	ldw	r5,-8(fp)
 2003974:	e13ffc17 	ldw	r4,-16(fp)
 2003978:	103ee83a 	callr	r2
 200397c:	e0bffb15 	stw	r2,-20(fp)
 2003980:	00000506 	br	2003998 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003984:	00bfde84 	movi	r2,-134
 2003988:	e0bffb15 	stw	r2,-20(fp)
 200398c:	00000206 	br	2003998 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003990:	00bfebc4 	movi	r2,-81
 2003994:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2003998:	e0bffb17 	ldw	r2,-20(fp)
 200399c:	1000070e 	bge	r2,zero,20039bc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 20039a0:	20038bc0 	call	20038bc <alt_get_errno>
 20039a4:	1007883a 	mov	r3,r2
 20039a8:	e0bffb17 	ldw	r2,-20(fp)
 20039ac:	0085c83a 	sub	r2,zero,r2
 20039b0:	18800015 	stw	r2,0(r3)
    rc = -1;
 20039b4:	00bfffc4 	movi	r2,-1
 20039b8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20039bc:	e0bffb17 	ldw	r2,-20(fp)
}
 20039c0:	e037883a 	mov	sp,fp
 20039c4:	dfc00117 	ldw	ra,4(sp)
 20039c8:	df000017 	ldw	fp,0(sp)
 20039cc:	dec00204 	addi	sp,sp,8
 20039d0:	f800283a 	ret

020039d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20039d4:	defff904 	addi	sp,sp,-28
 20039d8:	dfc00615 	stw	ra,24(sp)
 20039dc:	df000515 	stw	fp,20(sp)
 20039e0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20039e4:	0009883a 	mov	r4,zero
 20039e8:	200c4440 	call	200c444 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20039ec:	20049c00 	call	20049c0 <OSInit>
 20039f0:	01000044 	movi	r4,1
 20039f4:	2009de40 	call	2009de4 <OSSemCreate>
 20039f8:	d0a6fb15 	stw	r2,-25620(gp)
 20039fc:	01000044 	movi	r4,1
 2003a00:	2009de40 	call	2009de4 <OSSemCreate>
 2003a04:	d0a6fd15 	stw	r2,-25612(gp)
 2003a08:	d0a6f604 	addi	r2,gp,-25640
 2003a0c:	e0bffc15 	stw	r2,-16(fp)
 2003a10:	00800044 	movi	r2,1
 2003a14:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2003a18:	e0bffd0b 	ldhu	r2,-12(fp)
 2003a1c:	1009883a 	mov	r4,r2
 2003a20:	2009de40 	call	2009de4 <OSSemCreate>
 2003a24:	1007883a 	mov	r3,r2
 2003a28:	e0bffc17 	ldw	r2,-16(fp)
 2003a2c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2003a30:	200c47c0 	call	200c47c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2003a34:	01808074 	movhi	r6,513
 2003a38:	31ba2504 	addi	r6,r6,-5996
 2003a3c:	01408074 	movhi	r5,513
 2003a40:	297a2504 	addi	r5,r5,-5996
 2003a44:	01008074 	movhi	r4,513
 2003a48:	213a2504 	addi	r4,r4,-5996
 2003a4c:	200d9900 	call	200d990 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2003a50:	200d52c0 	call	200d52c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003a54:	01008074 	movhi	r4,513
 2003a58:	21356304 	addi	r4,r4,-10868
 2003a5c:	200e4d80 	call	200e4d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2003a60:	d0a6f717 	ldw	r2,-25636(gp)
 2003a64:	d0e6f817 	ldw	r3,-25632(gp)
 2003a68:	d126f917 	ldw	r4,-25628(gp)
 2003a6c:	200d883a 	mov	r6,r4
 2003a70:	180b883a 	mov	r5,r3
 2003a74:	1009883a 	mov	r4,r2
 2003a78:	20005740 	call	2000574 <main>
 2003a7c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2003a80:	01000044 	movi	r4,1
 2003a84:	20034f00 	call	20034f0 <close>
  exit (result);
 2003a88:	e13ffb17 	ldw	r4,-20(fp)
 2003a8c:	200e4ec0 	call	200e4ec <exit>

02003a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003a90:	defffe04 	addi	sp,sp,-8
 2003a94:	dfc00115 	stw	ra,4(sp)
 2003a98:	df000015 	stw	fp,0(sp)
 2003a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003aa0:	d0a00917 	ldw	r2,-32732(gp)
 2003aa4:	10000326 	beq	r2,zero,2003ab4 <alt_get_errno+0x24>
 2003aa8:	d0a00917 	ldw	r2,-32732(gp)
 2003aac:	103ee83a 	callr	r2
 2003ab0:	00000106 	br	2003ab8 <alt_get_errno+0x28>
 2003ab4:	d0a6f504 	addi	r2,gp,-25644
}
 2003ab8:	e037883a 	mov	sp,fp
 2003abc:	dfc00117 	ldw	ra,4(sp)
 2003ac0:	df000017 	ldw	fp,0(sp)
 2003ac4:	dec00204 	addi	sp,sp,8
 2003ac8:	f800283a 	ret

02003acc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2003acc:	defff904 	addi	sp,sp,-28
 2003ad0:	dfc00615 	stw	ra,24(sp)
 2003ad4:	df000515 	stw	fp,20(sp)
 2003ad8:	df000504 	addi	fp,sp,20
 2003adc:	e13ffd15 	stw	r4,-12(fp)
 2003ae0:	e17ffe15 	stw	r5,-8(fp)
 2003ae4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003ae8:	e0bffd17 	ldw	r2,-12(fp)
 2003aec:	10000816 	blt	r2,zero,2003b10 <read+0x44>
 2003af0:	01400304 	movi	r5,12
 2003af4:	e13ffd17 	ldw	r4,-12(fp)
 2003af8:	200348c0 	call	200348c <__mulsi3>
 2003afc:	1007883a 	mov	r3,r2
 2003b00:	00808074 	movhi	r2,513
 2003b04:	10bc8b04 	addi	r2,r2,-3540
 2003b08:	1885883a 	add	r2,r3,r2
 2003b0c:	00000106 	br	2003b14 <read+0x48>
 2003b10:	0005883a 	mov	r2,zero
 2003b14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003b18:	e0bffb17 	ldw	r2,-20(fp)
 2003b1c:	10002226 	beq	r2,zero,2003ba8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003b20:	e0bffb17 	ldw	r2,-20(fp)
 2003b24:	10800217 	ldw	r2,8(r2)
 2003b28:	108000cc 	andi	r2,r2,3
 2003b2c:	10800060 	cmpeqi	r2,r2,1
 2003b30:	1000181e 	bne	r2,zero,2003b94 <read+0xc8>
        (fd->dev->read))
 2003b34:	e0bffb17 	ldw	r2,-20(fp)
 2003b38:	10800017 	ldw	r2,0(r2)
 2003b3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003b40:	10001426 	beq	r2,zero,2003b94 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003b44:	e0bffb17 	ldw	r2,-20(fp)
 2003b48:	10800017 	ldw	r2,0(r2)
 2003b4c:	10800517 	ldw	r2,20(r2)
 2003b50:	e0ffff17 	ldw	r3,-4(fp)
 2003b54:	180d883a 	mov	r6,r3
 2003b58:	e17ffe17 	ldw	r5,-8(fp)
 2003b5c:	e13ffb17 	ldw	r4,-20(fp)
 2003b60:	103ee83a 	callr	r2
 2003b64:	e0bffc15 	stw	r2,-16(fp)
 2003b68:	e0bffc17 	ldw	r2,-16(fp)
 2003b6c:	1000070e 	bge	r2,zero,2003b8c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 2003b70:	2003a900 	call	2003a90 <alt_get_errno>
 2003b74:	1007883a 	mov	r3,r2
 2003b78:	e0bffc17 	ldw	r2,-16(fp)
 2003b7c:	0085c83a 	sub	r2,zero,r2
 2003b80:	18800015 	stw	r2,0(r3)
          return -1;
 2003b84:	00bfffc4 	movi	r2,-1
 2003b88:	00000c06 	br	2003bbc <read+0xf0>
        }
        return rval;
 2003b8c:	e0bffc17 	ldw	r2,-16(fp)
 2003b90:	00000a06 	br	2003bbc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2003b94:	2003a900 	call	2003a90 <alt_get_errno>
 2003b98:	1007883a 	mov	r3,r2
 2003b9c:	00800344 	movi	r2,13
 2003ba0:	18800015 	stw	r2,0(r3)
 2003ba4:	00000406 	br	2003bb8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2003ba8:	2003a900 	call	2003a90 <alt_get_errno>
 2003bac:	1007883a 	mov	r3,r2
 2003bb0:	00801444 	movi	r2,81
 2003bb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003bb8:	00bfffc4 	movi	r2,-1
}
 2003bbc:	e037883a 	mov	sp,fp
 2003bc0:	dfc00117 	ldw	ra,4(sp)
 2003bc4:	df000017 	ldw	fp,0(sp)
 2003bc8:	dec00204 	addi	sp,sp,8
 2003bcc:	f800283a 	ret

02003bd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2003bd0:	defffc04 	addi	sp,sp,-16
 2003bd4:	dfc00315 	stw	ra,12(sp)
 2003bd8:	df000215 	stw	fp,8(sp)
 2003bdc:	dc000115 	stw	r16,4(sp)
 2003be0:	df000204 	addi	fp,sp,8
 2003be4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 2003be8:	e0bffe17 	ldw	r2,-8(fp)
 2003bec:	108000d0 	cmplti	r2,r2,3
 2003bf0:	1000111e 	bne	r2,zero,2003c38 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2003bf4:	04008074 	movhi	r16,513
 2003bf8:	843c8b04 	addi	r16,r16,-3540
 2003bfc:	e0bffe17 	ldw	r2,-8(fp)
 2003c00:	01400304 	movi	r5,12
 2003c04:	1009883a 	mov	r4,r2
 2003c08:	200348c0 	call	200348c <__mulsi3>
 2003c0c:	8085883a 	add	r2,r16,r2
 2003c10:	10800204 	addi	r2,r2,8
 2003c14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003c18:	04008074 	movhi	r16,513
 2003c1c:	843c8b04 	addi	r16,r16,-3540
 2003c20:	e0bffe17 	ldw	r2,-8(fp)
 2003c24:	01400304 	movi	r5,12
 2003c28:	1009883a 	mov	r4,r2
 2003c2c:	200348c0 	call	200348c <__mulsi3>
 2003c30:	8085883a 	add	r2,r16,r2
 2003c34:	10000015 	stw	zero,0(r2)
  }
}
 2003c38:	0001883a 	nop
 2003c3c:	e6ffff04 	addi	sp,fp,-4
 2003c40:	dfc00217 	ldw	ra,8(sp)
 2003c44:	df000117 	ldw	fp,4(sp)
 2003c48:	dc000017 	ldw	r16,0(sp)
 2003c4c:	dec00304 	addi	sp,sp,12
 2003c50:	f800283a 	ret

02003c54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2003c54:	defff904 	addi	sp,sp,-28
 2003c58:	df000615 	stw	fp,24(sp)
 2003c5c:	df000604 	addi	fp,sp,24
 2003c60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003c64:	0005303a 	rdctl	r2,status
 2003c68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003c6c:	e0fffe17 	ldw	r3,-8(fp)
 2003c70:	00bfff84 	movi	r2,-2
 2003c74:	1884703a 	and	r2,r3,r2
 2003c78:	1001703a 	wrctl	status,r2
  
  return context;
 2003c7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003c80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2003c84:	d0a00a17 	ldw	r2,-32728(gp)
 2003c88:	10c000c4 	addi	r3,r2,3
 2003c8c:	00bfff04 	movi	r2,-4
 2003c90:	1884703a 	and	r2,r3,r2
 2003c94:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2003c98:	d0e00a17 	ldw	r3,-32728(gp)
 2003c9c:	e0bfff17 	ldw	r2,-4(fp)
 2003ca0:	1887883a 	add	r3,r3,r2
 2003ca4:	00810034 	movhi	r2,1024
 2003ca8:	10800004 	addi	r2,r2,0
 2003cac:	10c0062e 	bgeu	r2,r3,2003cc8 <sbrk+0x74>
 2003cb0:	e0bffb17 	ldw	r2,-20(fp)
 2003cb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003cb8:	e0bffa17 	ldw	r2,-24(fp)
 2003cbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2003cc0:	00bfffc4 	movi	r2,-1
 2003cc4:	00000b06 	br	2003cf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2003cc8:	d0a00a17 	ldw	r2,-32728(gp)
 2003ccc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2003cd0:	d0e00a17 	ldw	r3,-32728(gp)
 2003cd4:	e0bfff17 	ldw	r2,-4(fp)
 2003cd8:	1885883a 	add	r2,r3,r2
 2003cdc:	d0a00a15 	stw	r2,-32728(gp)
 2003ce0:	e0bffb17 	ldw	r2,-20(fp)
 2003ce4:	e0bffc15 	stw	r2,-16(fp)
 2003ce8:	e0bffc17 	ldw	r2,-16(fp)
 2003cec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2003cf0:	e0bffd17 	ldw	r2,-12(fp)
} 
 2003cf4:	e037883a 	mov	sp,fp
 2003cf8:	df000017 	ldw	fp,0(sp)
 2003cfc:	dec00104 	addi	sp,sp,4
 2003d00:	f800283a 	ret

02003d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003d04:	defffe04 	addi	sp,sp,-8
 2003d08:	dfc00115 	stw	ra,4(sp)
 2003d0c:	df000015 	stw	fp,0(sp)
 2003d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003d14:	d0a00917 	ldw	r2,-32732(gp)
 2003d18:	10000326 	beq	r2,zero,2003d28 <alt_get_errno+0x24>
 2003d1c:	d0a00917 	ldw	r2,-32732(gp)
 2003d20:	103ee83a 	callr	r2
 2003d24:	00000106 	br	2003d2c <alt_get_errno+0x28>
 2003d28:	d0a6f504 	addi	r2,gp,-25644
}
 2003d2c:	e037883a 	mov	sp,fp
 2003d30:	dfc00117 	ldw	ra,4(sp)
 2003d34:	df000017 	ldw	fp,0(sp)
 2003d38:	dec00204 	addi	sp,sp,8
 2003d3c:	f800283a 	ret

02003d40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2003d40:	defff904 	addi	sp,sp,-28
 2003d44:	dfc00615 	stw	ra,24(sp)
 2003d48:	df000515 	stw	fp,20(sp)
 2003d4c:	df000504 	addi	fp,sp,20
 2003d50:	e13ffd15 	stw	r4,-12(fp)
 2003d54:	e17ffe15 	stw	r5,-8(fp)
 2003d58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003d5c:	e0bffd17 	ldw	r2,-12(fp)
 2003d60:	10000816 	blt	r2,zero,2003d84 <write+0x44>
 2003d64:	01400304 	movi	r5,12
 2003d68:	e13ffd17 	ldw	r4,-12(fp)
 2003d6c:	200348c0 	call	200348c <__mulsi3>
 2003d70:	1007883a 	mov	r3,r2
 2003d74:	00808074 	movhi	r2,513
 2003d78:	10bc8b04 	addi	r2,r2,-3540
 2003d7c:	1885883a 	add	r2,r3,r2
 2003d80:	00000106 	br	2003d88 <write+0x48>
 2003d84:	0005883a 	mov	r2,zero
 2003d88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003d8c:	e0bffb17 	ldw	r2,-20(fp)
 2003d90:	10002126 	beq	r2,zero,2003e18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2003d94:	e0bffb17 	ldw	r2,-20(fp)
 2003d98:	10800217 	ldw	r2,8(r2)
 2003d9c:	108000cc 	andi	r2,r2,3
 2003da0:	10001826 	beq	r2,zero,2003e04 <write+0xc4>
 2003da4:	e0bffb17 	ldw	r2,-20(fp)
 2003da8:	10800017 	ldw	r2,0(r2)
 2003dac:	10800617 	ldw	r2,24(r2)
 2003db0:	10001426 	beq	r2,zero,2003e04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2003db4:	e0bffb17 	ldw	r2,-20(fp)
 2003db8:	10800017 	ldw	r2,0(r2)
 2003dbc:	10800617 	ldw	r2,24(r2)
 2003dc0:	e0ffff17 	ldw	r3,-4(fp)
 2003dc4:	180d883a 	mov	r6,r3
 2003dc8:	e17ffe17 	ldw	r5,-8(fp)
 2003dcc:	e13ffb17 	ldw	r4,-20(fp)
 2003dd0:	103ee83a 	callr	r2
 2003dd4:	e0bffc15 	stw	r2,-16(fp)
 2003dd8:	e0bffc17 	ldw	r2,-16(fp)
 2003ddc:	1000070e 	bge	r2,zero,2003dfc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 2003de0:	2003d040 	call	2003d04 <alt_get_errno>
 2003de4:	1007883a 	mov	r3,r2
 2003de8:	e0bffc17 	ldw	r2,-16(fp)
 2003dec:	0085c83a 	sub	r2,zero,r2
 2003df0:	18800015 	stw	r2,0(r3)
        return -1;
 2003df4:	00bfffc4 	movi	r2,-1
 2003df8:	00000c06 	br	2003e2c <write+0xec>
      }
      return rval;
 2003dfc:	e0bffc17 	ldw	r2,-16(fp)
 2003e00:	00000a06 	br	2003e2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2003e04:	2003d040 	call	2003d04 <alt_get_errno>
 2003e08:	1007883a 	mov	r3,r2
 2003e0c:	00800344 	movi	r2,13
 2003e10:	18800015 	stw	r2,0(r3)
 2003e14:	00000406 	br	2003e28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2003e18:	2003d040 	call	2003d04 <alt_get_errno>
 2003e1c:	1007883a 	mov	r3,r2
 2003e20:	00801444 	movi	r2,81
 2003e24:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003e28:	00bfffc4 	movi	r2,-1
}
 2003e2c:	e037883a 	mov	sp,fp
 2003e30:	dfc00117 	ldw	ra,4(sp)
 2003e34:	df000017 	ldw	fp,0(sp)
 2003e38:	dec00204 	addi	sp,sp,8
 2003e3c:	f800283a 	ret

02003e40 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2003e40:	deffdf04 	addi	sp,sp,-132
 2003e44:	dfc02015 	stw	ra,128(sp)
 2003e48:	df001f15 	stw	fp,124(sp)
 2003e4c:	df001f04 	addi	fp,sp,124
 2003e50:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2003e54:	e0bfe204 	addi	r2,fp,-120
 2003e58:	100b883a 	mov	r5,r2
 2003e5c:	01003fc4 	movi	r4,255
 2003e60:	200bd6c0 	call	200bd6c <OSTaskQuery>
 2003e64:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2003e68:	e0bffe83 	ldbu	r2,-6(fp)
 2003e6c:	10803fcc 	andi	r2,r2,255
 2003e70:	10001e1e 	bne	r2,zero,2003eec <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2003e74:	e0bfee83 	ldbu	r2,-70(fp)
 2003e78:	10803fcc 	andi	r2,r2,255
 2003e7c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2003e80:	d0a6fb17 	ldw	r2,-25620(gp)
 2003e84:	e0fffd04 	addi	r3,fp,-12
 2003e88:	180b883a 	mov	r5,r3
 2003e8c:	1009883a 	mov	r4,r2
 2003e90:	200a5840 	call	200a584 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2003e94:	e0bffe43 	ldbu	r2,-7(fp)
 2003e98:	10803fcc 	andi	r2,r2,255
 2003e9c:	10000726 	beq	r2,zero,2003ebc <__env_lock+0x7c>
 2003ea0:	d0a00b17 	ldw	r2,-32724(gp)
 2003ea4:	e0ffe117 	ldw	r3,-124(fp)
 2003ea8:	1880041e 	bne	r3,r2,2003ebc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2003eac:	d0a6fa17 	ldw	r2,-25624(gp)
 2003eb0:	10800044 	addi	r2,r2,1
 2003eb4:	d0a6fa15 	stw	r2,-25624(gp)
 2003eb8:	00000a06 	br	2003ee4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2003ebc:	d0a6fb17 	ldw	r2,-25620(gp)
 2003ec0:	e0fffe84 	addi	r3,fp,-6
 2003ec4:	180d883a 	mov	r6,r3
 2003ec8:	000b883a 	mov	r5,zero
 2003ecc:	1009883a 	mov	r4,r2
 2003ed0:	200a0fc0 	call	200a0fc <OSSemPend>
    locks  = 1;
 2003ed4:	00800044 	movi	r2,1
 2003ed8:	d0a6fa15 	stw	r2,-25624(gp)
    lockid = id;
 2003edc:	e0bfe117 	ldw	r2,-124(fp)
 2003ee0:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2003ee4:	0001883a 	nop
 2003ee8:	00000106 	br	2003ef0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2003eec:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2003ef0:	e037883a 	mov	sp,fp
 2003ef4:	dfc00117 	ldw	ra,4(sp)
 2003ef8:	df000017 	ldw	fp,0(sp)
 2003efc:	dec00204 	addi	sp,sp,8
 2003f00:	f800283a 	ret

02003f04 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2003f04:	defffd04 	addi	sp,sp,-12
 2003f08:	dfc00215 	stw	ra,8(sp)
 2003f0c:	df000115 	stw	fp,4(sp)
 2003f10:	df000104 	addi	fp,sp,4
 2003f14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2003f18:	d0a6fa17 	ldw	r2,-25624(gp)
 2003f1c:	10000b26 	beq	r2,zero,2003f4c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2003f20:	d0a6fa17 	ldw	r2,-25624(gp)
 2003f24:	10bfffc4 	addi	r2,r2,-1
 2003f28:	d0a6fa15 	stw	r2,-25624(gp)
 2003f2c:	d0a6fa17 	ldw	r2,-25624(gp)
 2003f30:	1000071e 	bne	r2,zero,2003f50 <__env_unlock+0x4c>
  {
    lockid = -1;
 2003f34:	00bfffc4 	movi	r2,-1
 2003f38:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
 2003f3c:	d0a6fb17 	ldw	r2,-25620(gp)
 2003f40:	1009883a 	mov	r4,r2
 2003f44:	200a4740 	call	200a474 <OSSemPost>
 2003f48:	00000106 	br	2003f50 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2003f4c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2003f50:	e037883a 	mov	sp,fp
 2003f54:	dfc00117 	ldw	ra,4(sp)
 2003f58:	df000017 	ldw	fp,0(sp)
 2003f5c:	dec00204 	addi	sp,sp,8
 2003f60:	f800283a 	ret

02003f64 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2003f64:	deffdb04 	addi	sp,sp,-148
 2003f68:	dfc02415 	stw	ra,144(sp)
 2003f6c:	df002315 	stw	fp,140(sp)
 2003f70:	df002304 	addi	fp,sp,140
 2003f74:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2003f78:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2003f7c:	d0a6fe43 	ldbu	r2,-25607(gp)
 2003f80:	10803fcc 	andi	r2,r2,255
 2003f84:	10800060 	cmpeqi	r2,r2,1
 2003f88:	10003626 	beq	r2,zero,2004064 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2003f8c:	e0bfe204 	addi	r2,fp,-120
 2003f90:	100b883a 	mov	r5,r2
 2003f94:	01003fc4 	movi	r4,255
 2003f98:	200bd6c0 	call	200bd6c <OSTaskQuery>
 2003f9c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2003fa0:	e0bffe83 	ldbu	r2,-6(fp)
 2003fa4:	10803fcc 	andi	r2,r2,255
 2003fa8:	1000301e 	bne	r2,zero,200406c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2003fac:	e0bfee83 	ldbu	r2,-70(fp)
 2003fb0:	10803fcc 	andi	r2,r2,255
 2003fb4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2003fb8:	d0a6fd17 	ldw	r2,-25612(gp)
 2003fbc:	e0fffd04 	addi	r3,fp,-12
 2003fc0:	180b883a 	mov	r5,r3
 2003fc4:	1009883a 	mov	r4,r2
 2003fc8:	200a5840 	call	200a584 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003fcc:	0005303a 	rdctl	r2,status
 2003fd0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003fd4:	e0ffe117 	ldw	r3,-124(fp)
 2003fd8:	00bfff84 	movi	r2,-2
 2003fdc:	1884703a 	and	r2,r3,r2
 2003fe0:	1001703a 	wrctl	status,r2
  
  return context;
 2003fe4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2003fe8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2003fec:	e0bffd0b 	ldhu	r2,-12(fp)
 2003ff0:	10bfffcc 	andi	r2,r2,65535
 2003ff4:	10000b1e 	bne	r2,zero,2004024 <__malloc_lock+0xc0>
 2003ff8:	d0a00c17 	ldw	r2,-32720(gp)
 2003ffc:	e0ffde17 	ldw	r3,-136(fp)
 2004000:	1880081e 	bne	r3,r2,2004024 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2004004:	d0a6fc17 	ldw	r2,-25616(gp)
 2004008:	10800044 	addi	r2,r2,1
 200400c:	d0a6fc15 	stw	r2,-25616(gp)
 2004010:	e0bfdd17 	ldw	r2,-140(fp)
 2004014:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004018:	e0bfdf17 	ldw	r2,-132(fp)
 200401c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2004020:	00000e06 	br	200405c <__malloc_lock+0xf8>
 2004024:	e0bfdd17 	ldw	r2,-140(fp)
 2004028:	e0bfe015 	stw	r2,-128(fp)
 200402c:	e0bfe017 	ldw	r2,-128(fp)
 2004030:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2004034:	d0a6fd17 	ldw	r2,-25612(gp)
 2004038:	e0fffe84 	addi	r3,fp,-6
 200403c:	180d883a 	mov	r6,r3
 2004040:	000b883a 	mov	r5,zero
 2004044:	1009883a 	mov	r4,r2
 2004048:	200a0fc0 	call	200a0fc <OSSemPend>
    locks  = 1;
 200404c:	00800044 	movi	r2,1
 2004050:	d0a6fc15 	stw	r2,-25616(gp)
    lockid = id;
 2004054:	e0bfde17 	ldw	r2,-136(fp)
 2004058:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 200405c:	0001883a 	nop
 2004060:	00000306 	br	2004070 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2004064:	0001883a 	nop
 2004068:	00000106 	br	2004070 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 200406c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2004070:	e037883a 	mov	sp,fp
 2004074:	dfc00117 	ldw	ra,4(sp)
 2004078:	df000017 	ldw	fp,0(sp)
 200407c:	dec00204 	addi	sp,sp,8
 2004080:	f800283a 	ret

02004084 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2004084:	defff804 	addi	sp,sp,-32
 2004088:	dfc00715 	stw	ra,28(sp)
 200408c:	df000615 	stw	fp,24(sp)
 2004090:	df000604 	addi	fp,sp,24
 2004094:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004098:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 200409c:	d0a6fe43 	ldbu	r2,-25607(gp)
 20040a0:	10803fcc 	andi	r2,r2,255
 20040a4:	10800060 	cmpeqi	r2,r2,1
 20040a8:	10002326 	beq	r2,zero,2004138 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20040ac:	0005303a 	rdctl	r2,status
 20040b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20040b4:	e0fffe17 	ldw	r3,-8(fp)
 20040b8:	00bfff84 	movi	r2,-2
 20040bc:	1884703a 	and	r2,r3,r2
 20040c0:	1001703a 	wrctl	status,r2
  
  return context;
 20040c4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 20040c8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 20040cc:	d0a6fc17 	ldw	r2,-25616(gp)
 20040d0:	1000051e 	bne	r2,zero,20040e8 <__malloc_unlock+0x64>
 20040d4:	e0bffa17 	ldw	r2,-24(fp)
 20040d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20040dc:	e0bffb17 	ldw	r2,-20(fp)
 20040e0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 20040e4:	00001506 	br	200413c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 20040e8:	d0a6fc17 	ldw	r2,-25616(gp)
 20040ec:	10bfffc4 	addi	r2,r2,-1
 20040f0:	d0a6fc15 	stw	r2,-25616(gp)
 20040f4:	d0a6fc17 	ldw	r2,-25616(gp)
 20040f8:	10000a1e 	bne	r2,zero,2004124 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 20040fc:	00bfffc4 	movi	r2,-1
 2004100:	d0a00c15 	stw	r2,-32720(gp)
 2004104:	e0bffa17 	ldw	r2,-24(fp)
 2004108:	e0bffc15 	stw	r2,-16(fp)
 200410c:	e0bffc17 	ldw	r2,-16(fp)
 2004110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2004114:	d0a6fd17 	ldw	r2,-25612(gp)
 2004118:	1009883a 	mov	r4,r2
 200411c:	200a4740 	call	200a474 <OSSemPost>
 2004120:	00000606 	br	200413c <__malloc_unlock+0xb8>
 2004124:	e0bffa17 	ldw	r2,-24(fp)
 2004128:	e0bffd15 	stw	r2,-12(fp)
 200412c:	e0bffd17 	ldw	r2,-12(fp)
 2004130:	1001703a 	wrctl	status,r2
 2004134:	00000106 	br	200413c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2004138:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200413c:	e037883a 	mov	sp,fp
 2004140:	dfc00117 	ldw	ra,4(sp)
 2004144:	df000017 	ldw	fp,0(sp)
 2004148:	dec00204 	addi	sp,sp,8
 200414c:	f800283a 	ret

02004150 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2004150:	defff704 	addi	sp,sp,-36
 2004154:	dfc00815 	stw	ra,32(sp)
 2004158:	df000715 	stw	fp,28(sp)
 200415c:	df000704 	addi	fp,sp,28
 2004160:	e13ffd15 	stw	r4,-12(fp)
 2004164:	e17ffe15 	stw	r5,-8(fp)
 2004168:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200416c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2004170:	e0bfff17 	ldw	r2,-4(fp)
 2004174:	1000021e 	bne	r2,zero,2004180 <OSEventNameGet+0x30>
        return (0);
 2004178:	0005883a 	mov	r2,zero
 200417c:	00003706 	br	200425c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2004180:	e0bffd17 	ldw	r2,-12(fp)
 2004184:	1000051e 	bne	r2,zero,200419c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2004188:	e0bfff17 	ldw	r2,-4(fp)
 200418c:	00c00104 	movi	r3,4
 2004190:	10c00005 	stb	r3,0(r2)
        return (0);
 2004194:	0005883a 	mov	r2,zero
 2004198:	00003006 	br	200425c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200419c:	e0bffe17 	ldw	r2,-8(fp)
 20041a0:	1000051e 	bne	r2,zero,20041b8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20041a4:	e0bfff17 	ldw	r2,-4(fp)
 20041a8:	00c00304 	movi	r3,12
 20041ac:	10c00005 	stb	r3,0(r2)
        return (0);
 20041b0:	0005883a 	mov	r2,zero
 20041b4:	00002906 	br	200425c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20041b8:	d0a70c03 	ldbu	r2,-25552(gp)
 20041bc:	10803fcc 	andi	r2,r2,255
 20041c0:	10000526 	beq	r2,zero,20041d8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 20041c4:	e0bfff17 	ldw	r2,-4(fp)
 20041c8:	00c00444 	movi	r3,17
 20041cc:	10c00005 	stb	r3,0(r2)
        return (0);
 20041d0:	0005883a 	mov	r2,zero
 20041d4:	00002106 	br	200425c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 20041d8:	e0bffd17 	ldw	r2,-12(fp)
 20041dc:	10800003 	ldbu	r2,0(r2)
 20041e0:	10803fcc 	andi	r2,r2,255
 20041e4:	10bfffc4 	addi	r2,r2,-1
 20041e8:	10800128 	cmpgeui	r2,r2,4
 20041ec:	10000526 	beq	r2,zero,2004204 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20041f0:	e0bfff17 	ldw	r2,-4(fp)
 20041f4:	00c00044 	movi	r3,1
 20041f8:	10c00005 	stb	r3,0(r2)
             return (0);
 20041fc:	0005883a 	mov	r2,zero
 2004200:	00001606 	br	200425c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2004204:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004208:	0005303a 	rdctl	r2,status
 200420c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004210:	e0fffb17 	ldw	r3,-20(fp)
 2004214:	00bfff84 	movi	r2,-2
 2004218:	1884703a 	and	r2,r3,r2
 200421c:	1001703a 	wrctl	status,r2
  
  return context;
 2004220:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2004224:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2004228:	e0bffd17 	ldw	r2,-12(fp)
 200422c:	10800384 	addi	r2,r2,14
 2004230:	100b883a 	mov	r5,r2
 2004234:	e13ffe17 	ldw	r4,-8(fp)
 2004238:	2005bd40 	call	2005bd4 <OS_StrCopy>
 200423c:	e0bffa05 	stb	r2,-24(fp)
 2004240:	e0bff917 	ldw	r2,-28(fp)
 2004244:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004248:	e0bffc17 	ldw	r2,-16(fp)
 200424c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2004250:	e0bfff17 	ldw	r2,-4(fp)
 2004254:	10000005 	stb	zero,0(r2)
    return (len);
 2004258:	e0bffa03 	ldbu	r2,-24(fp)
}
 200425c:	e037883a 	mov	sp,fp
 2004260:	dfc00117 	ldw	ra,4(sp)
 2004264:	df000017 	ldw	fp,0(sp)
 2004268:	dec00204 	addi	sp,sp,8
 200426c:	f800283a 	ret

02004270 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2004270:	defff604 	addi	sp,sp,-40
 2004274:	dfc00915 	stw	ra,36(sp)
 2004278:	df000815 	stw	fp,32(sp)
 200427c:	df000804 	addi	fp,sp,32
 2004280:	e13ffd15 	stw	r4,-12(fp)
 2004284:	e17ffe15 	stw	r5,-8(fp)
 2004288:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200428c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2004290:	e0bfff17 	ldw	r2,-4(fp)
 2004294:	10004026 	beq	r2,zero,2004398 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2004298:	e0bffd17 	ldw	r2,-12(fp)
 200429c:	1000041e 	bne	r2,zero,20042b0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 20042a0:	e0bfff17 	ldw	r2,-4(fp)
 20042a4:	00c00104 	movi	r3,4
 20042a8:	10c00005 	stb	r3,0(r2)
        return;
 20042ac:	00003b06 	br	200439c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20042b0:	e0bffe17 	ldw	r2,-8(fp)
 20042b4:	1000041e 	bne	r2,zero,20042c8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20042b8:	e0bfff17 	ldw	r2,-4(fp)
 20042bc:	00c00304 	movi	r3,12
 20042c0:	10c00005 	stb	r3,0(r2)
        return;
 20042c4:	00003506 	br	200439c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20042c8:	d0a70c03 	ldbu	r2,-25552(gp)
 20042cc:	10803fcc 	andi	r2,r2,255
 20042d0:	10000426 	beq	r2,zero,20042e4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20042d4:	e0bfff17 	ldw	r2,-4(fp)
 20042d8:	00c00484 	movi	r3,18
 20042dc:	10c00005 	stb	r3,0(r2)
        return;
 20042e0:	00002e06 	br	200439c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 20042e4:	e0bffd17 	ldw	r2,-12(fp)
 20042e8:	10800003 	ldbu	r2,0(r2)
 20042ec:	10803fcc 	andi	r2,r2,255
 20042f0:	10bfffc4 	addi	r2,r2,-1
 20042f4:	10800128 	cmpgeui	r2,r2,4
 20042f8:	10000426 	beq	r2,zero,200430c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20042fc:	e0bfff17 	ldw	r2,-4(fp)
 2004300:	00c00044 	movi	r3,1
 2004304:	10c00005 	stb	r3,0(r2)
             return;
 2004308:	00002406 	br	200439c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 200430c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004310:	0005303a 	rdctl	r2,status
 2004314:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004318:	e0fffc17 	ldw	r3,-16(fp)
 200431c:	00bfff84 	movi	r2,-2
 2004320:	1884703a 	and	r2,r3,r2
 2004324:	1001703a 	wrctl	status,r2
  
  return context;
 2004328:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 200432c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2004330:	e13ffe17 	ldw	r4,-8(fp)
 2004334:	2005c480 	call	2005c48 <OS_StrLen>
 2004338:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 200433c:	e0bffa03 	ldbu	r2,-24(fp)
 2004340:	10800830 	cmpltui	r2,r2,32
 2004344:	1000081e 	bne	r2,zero,2004368 <OSEventNameSet+0xf8>
 2004348:	e0bff817 	ldw	r2,-32(fp)
 200434c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004350:	e0bff917 	ldw	r2,-28(fp)
 2004354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2004358:	e0bfff17 	ldw	r2,-4(fp)
 200435c:	00c002c4 	movi	r3,11
 2004360:	10c00005 	stb	r3,0(r2)
        return;
 2004364:	00000d06 	br	200439c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2004368:	e0bffd17 	ldw	r2,-12(fp)
 200436c:	10800384 	addi	r2,r2,14
 2004370:	e17ffe17 	ldw	r5,-8(fp)
 2004374:	1009883a 	mov	r4,r2
 2004378:	2005bd40 	call	2005bd4 <OS_StrCopy>
 200437c:	e0bff817 	ldw	r2,-32(fp)
 2004380:	e0bffb15 	stw	r2,-20(fp)
 2004384:	e0bffb17 	ldw	r2,-20(fp)
 2004388:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200438c:	e0bfff17 	ldw	r2,-4(fp)
 2004390:	10000005 	stb	zero,0(r2)
 2004394:	00000106 	br	200439c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2004398:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 200439c:	e037883a 	mov	sp,fp
 20043a0:	dfc00117 	ldw	ra,4(sp)
 20043a4:	df000017 	ldw	fp,0(sp)
 20043a8:	dec00204 	addi	sp,sp,8
 20043ac:	f800283a 	ret

020043b0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 20043b0:	deffed04 	addi	sp,sp,-76
 20043b4:	dfc01215 	stw	ra,72(sp)
 20043b8:	df001115 	stw	fp,68(sp)
 20043bc:	df001104 	addi	fp,sp,68
 20043c0:	e13ffc15 	stw	r4,-16(fp)
 20043c4:	e17ffd15 	stw	r5,-12(fp)
 20043c8:	e1bffe15 	stw	r6,-8(fp)
 20043cc:	3805883a 	mov	r2,r7
 20043d0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 20043d4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 20043d8:	e0800217 	ldw	r2,8(fp)
 20043dc:	1000021e 	bne	r2,zero,20043e8 <OSEventPendMulti+0x38>
        return (0);
 20043e0:	0005883a 	mov	r2,zero
 20043e4:	00017106 	br	20049ac <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 20043e8:	e0bffc17 	ldw	r2,-16(fp)
 20043ec:	1000051e 	bne	r2,zero,2004404 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 20043f0:	e0800217 	ldw	r2,8(fp)
 20043f4:	00c00104 	movi	r3,4
 20043f8:	10c00005 	stb	r3,0(r2)
        return (0);
 20043fc:	0005883a 	mov	r2,zero
 2004400:	00016a06 	br	20049ac <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2004404:	e0bffd17 	ldw	r2,-12(fp)
 2004408:	1000051e 	bne	r2,zero,2004420 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 200440c:	e0800217 	ldw	r2,8(fp)
 2004410:	00c00104 	movi	r3,4
 2004414:	10c00005 	stb	r3,0(r2)
        return (0);
 2004418:	0005883a 	mov	r2,zero
 200441c:	00016306 	br	20049ac <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2004420:	e0bffe17 	ldw	r2,-8(fp)
 2004424:	1000051e 	bne	r2,zero,200443c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2004428:	e0800217 	ldw	r2,8(fp)
 200442c:	00c00104 	movi	r3,4
 2004430:	10c00005 	stb	r3,0(r2)
        return (0);
 2004434:	0005883a 	mov	r2,zero
 2004438:	00015c06 	br	20049ac <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 200443c:	e0bffd17 	ldw	r2,-12(fp)
 2004440:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2004444:	e0bffc17 	ldw	r2,-16(fp)
 2004448:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 200444c:	e0bfef17 	ldw	r2,-68(fp)
 2004450:	10800017 	ldw	r2,0(r2)
 2004454:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2004458:	00001906 	br	20044c0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 200445c:	e0bff017 	ldw	r2,-64(fp)
 2004460:	10800003 	ldbu	r2,0(r2)
 2004464:	10803fcc 	andi	r2,r2,255
 2004468:	10c000a0 	cmpeqi	r3,r2,2
 200446c:	1800091e 	bne	r3,zero,2004494 <OSEventPendMulti+0xe4>
 2004470:	10c000e0 	cmpeqi	r3,r2,3
 2004474:	1800091e 	bne	r3,zero,200449c <OSEventPendMulti+0xec>
 2004478:	10800060 	cmpeqi	r2,r2,1
 200447c:	1000091e 	bne	r2,zero,20044a4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2004480:	e0800217 	ldw	r2,8(fp)
 2004484:	00c00044 	movi	r3,1
 2004488:	10c00005 	stb	r3,0(r2)
                 return (0);
 200448c:	0005883a 	mov	r2,zero
 2004490:	00014606 	br	20049ac <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2004494:	0001883a 	nop
 2004498:	00000306 	br	20044a8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 200449c:	0001883a 	nop
 20044a0:	00000106 	br	20044a8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 20044a4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 20044a8:	e0bfef17 	ldw	r2,-68(fp)
 20044ac:	10800104 	addi	r2,r2,4
 20044b0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20044b4:	e0bfef17 	ldw	r2,-68(fp)
 20044b8:	10800017 	ldw	r2,0(r2)
 20044bc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20044c0:	e0bff017 	ldw	r2,-64(fp)
 20044c4:	103fe51e 	bne	r2,zero,200445c <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20044c8:	d0a70c03 	ldbu	r2,-25552(gp)
 20044cc:	10803fcc 	andi	r2,r2,255
 20044d0:	10000526 	beq	r2,zero,20044e8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20044d4:	e0800217 	ldw	r2,8(fp)
 20044d8:	00c00084 	movi	r3,2
 20044dc:	10c00005 	stb	r3,0(r2)
        return (0);
 20044e0:	0005883a 	mov	r2,zero
 20044e4:	00013106 	br	20049ac <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20044e8:	d0a6fe03 	ldbu	r2,-25608(gp)
 20044ec:	10803fcc 	andi	r2,r2,255
 20044f0:	10000526 	beq	r2,zero,2004508 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20044f4:	e0800217 	ldw	r2,8(fp)
 20044f8:	00c00344 	movi	r3,13
 20044fc:	10c00005 	stb	r3,0(r2)
        return (0);
 2004500:	0005883a 	mov	r2,zero
 2004504:	00012906 	br	20049ac <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004508:	0005303a 	rdctl	r2,status
 200450c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004510:	e0fffb17 	ldw	r3,-20(fp)
 2004514:	00bfff84 	movi	r2,-2
 2004518:	1884703a 	and	r2,r3,r2
 200451c:	1001703a 	wrctl	status,r2
  
  return context;
 2004520:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2004524:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2004528:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 200452c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2004530:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2004534:	e0bffc17 	ldw	r2,-16(fp)
 2004538:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 200453c:	e0bfef17 	ldw	r2,-68(fp)
 2004540:	10800017 	ldw	r2,0(r2)
 2004544:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2004548:	00008106 	br	2004750 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 200454c:	e0bff017 	ldw	r2,-64(fp)
 2004550:	10800003 	ldbu	r2,0(r2)
 2004554:	10803fcc 	andi	r2,r2,255
 2004558:	10c000a0 	cmpeqi	r3,r2,2
 200455c:	18003c1e 	bne	r3,zero,2004650 <OSEventPendMulti+0x2a0>
 2004560:	10c000e0 	cmpeqi	r3,r2,3
 2004564:	1800031e 	bne	r3,zero,2004574 <OSEventPendMulti+0x1c4>
 2004568:	10800060 	cmpeqi	r2,r2,1
 200456c:	10001e1e 	bne	r2,zero,20045e8 <OSEventPendMulti+0x238>
 2004570:	00006606 	br	200470c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2004574:	e0bff017 	ldw	r2,-64(fp)
 2004578:	1080020b 	ldhu	r2,8(r2)
 200457c:	10bfffcc 	andi	r2,r2,65535
 2004580:	10001526 	beq	r2,zero,20045d8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2004584:	e0bff017 	ldw	r2,-64(fp)
 2004588:	1080020b 	ldhu	r2,8(r2)
 200458c:	10bfffc4 	addi	r2,r2,-1
 2004590:	1007883a 	mov	r3,r2
 2004594:	e0bff017 	ldw	r2,-64(fp)
 2004598:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 200459c:	e0bffd17 	ldw	r2,-12(fp)
 20045a0:	10c00104 	addi	r3,r2,4
 20045a4:	e0fffd15 	stw	r3,-12(fp)
 20045a8:	e0fff017 	ldw	r3,-64(fp)
 20045ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 20045b0:	00800044 	movi	r2,1
 20045b4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20045b8:	e0bffe17 	ldw	r2,-8(fp)
 20045bc:	10c00104 	addi	r3,r2,4
 20045c0:	e0fffe15 	stw	r3,-8(fp)
 20045c4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20045c8:	e0bff18b 	ldhu	r2,-58(fp)
 20045cc:	10800044 	addi	r2,r2,1
 20045d0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20045d4:	00005806 	br	2004738 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20045d8:	e0bff203 	ldbu	r2,-56(fp)
 20045dc:	10800054 	ori	r2,r2,1
 20045e0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20045e4:	00005406 	br	2004738 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20045e8:	e0bff017 	ldw	r2,-64(fp)
 20045ec:	10800117 	ldw	r2,4(r2)
 20045f0:	10001326 	beq	r2,zero,2004640 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20045f4:	e0bffe17 	ldw	r2,-8(fp)
 20045f8:	10c00104 	addi	r3,r2,4
 20045fc:	e0fffe15 	stw	r3,-8(fp)
 2004600:	e0fff017 	ldw	r3,-64(fp)
 2004604:	18c00117 	ldw	r3,4(r3)
 2004608:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 200460c:	e0bff017 	ldw	r2,-64(fp)
 2004610:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2004614:	e0bffd17 	ldw	r2,-12(fp)
 2004618:	10c00104 	addi	r3,r2,4
 200461c:	e0fffd15 	stw	r3,-12(fp)
 2004620:	e0fff017 	ldw	r3,-64(fp)
 2004624:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2004628:	00800044 	movi	r2,1
 200462c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2004630:	e0bff18b 	ldhu	r2,-58(fp)
 2004634:	10800044 	addi	r2,r2,1
 2004638:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 200463c:	00003e06 	br	2004738 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2004640:	e0bff203 	ldbu	r2,-56(fp)
 2004644:	10800094 	ori	r2,r2,2
 2004648:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200464c:	00003a06 	br	2004738 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2004650:	e0bff017 	ldw	r2,-64(fp)
 2004654:	10800117 	ldw	r2,4(r2)
 2004658:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 200465c:	e0bff517 	ldw	r2,-44(fp)
 2004660:	1080058b 	ldhu	r2,22(r2)
 2004664:	10bfffcc 	andi	r2,r2,65535
 2004668:	10002426 	beq	r2,zero,20046fc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 200466c:	e0bffe17 	ldw	r2,-8(fp)
 2004670:	10c00104 	addi	r3,r2,4
 2004674:	e0fffe15 	stw	r3,-8(fp)
 2004678:	e0fff517 	ldw	r3,-44(fp)
 200467c:	18c00417 	ldw	r3,16(r3)
 2004680:	19400104 	addi	r5,r3,4
 2004684:	e13ff517 	ldw	r4,-44(fp)
 2004688:	21400415 	stw	r5,16(r4)
 200468c:	18c00017 	ldw	r3,0(r3)
 2004690:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2004694:	e0bff517 	ldw	r2,-44(fp)
 2004698:	10c00417 	ldw	r3,16(r2)
 200469c:	e0bff517 	ldw	r2,-44(fp)
 20046a0:	10800217 	ldw	r2,8(r2)
 20046a4:	1880041e 	bne	r3,r2,20046b8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 20046a8:	e0bff517 	ldw	r2,-44(fp)
 20046ac:	10c00117 	ldw	r3,4(r2)
 20046b0:	e0bff517 	ldw	r2,-44(fp)
 20046b4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20046b8:	e0bff517 	ldw	r2,-44(fp)
 20046bc:	1080058b 	ldhu	r2,22(r2)
 20046c0:	10bfffc4 	addi	r2,r2,-1
 20046c4:	1007883a 	mov	r3,r2
 20046c8:	e0bff517 	ldw	r2,-44(fp)
 20046cc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20046d0:	e0bffd17 	ldw	r2,-12(fp)
 20046d4:	10c00104 	addi	r3,r2,4
 20046d8:	e0fffd15 	stw	r3,-12(fp)
 20046dc:	e0fff017 	ldw	r3,-64(fp)
 20046e0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20046e4:	00800044 	movi	r2,1
 20046e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20046ec:	e0bff18b 	ldhu	r2,-58(fp)
 20046f0:	10800044 	addi	r2,r2,1
 20046f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20046f8:	00000f06 	br	2004738 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20046fc:	e0bff203 	ldbu	r2,-56(fp)
 2004700:	10800114 	ori	r2,r2,4
 2004704:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2004708:	00000b06 	br	2004738 <OSEventPendMulti+0x388>
 200470c:	e0bff317 	ldw	r2,-52(fp)
 2004710:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004714:	e0bff417 	ldw	r2,-48(fp)
 2004718:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 200471c:	e0bffd17 	ldw	r2,-12(fp)
 2004720:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2004724:	e0800217 	ldw	r2,8(fp)
 2004728:	00c00044 	movi	r3,1
 200472c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2004730:	e0bff18b 	ldhu	r2,-58(fp)
 2004734:	00009d06 	br	20049ac <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2004738:	e0bfef17 	ldw	r2,-68(fp)
 200473c:	10800104 	addi	r2,r2,4
 2004740:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2004744:	e0bfef17 	ldw	r2,-68(fp)
 2004748:	10800017 	ldw	r2,0(r2)
 200474c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2004750:	e0bff017 	ldw	r2,-64(fp)
 2004754:	103f7d1e 	bne	r2,zero,200454c <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2004758:	e0bff103 	ldbu	r2,-60(fp)
 200475c:	10800058 	cmpnei	r2,r2,1
 2004760:	10000a1e 	bne	r2,zero,200478c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2004764:	e0bffd17 	ldw	r2,-12(fp)
 2004768:	10000015 	stw	zero,0(r2)
 200476c:	e0bff317 	ldw	r2,-52(fp)
 2004770:	e0bff615 	stw	r2,-40(fp)
 2004774:	e0bff617 	ldw	r2,-40(fp)
 2004778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 200477c:	e0800217 	ldw	r2,8(fp)
 2004780:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2004784:	e0bff18b 	ldhu	r2,-58(fp)
 2004788:	00008806 	br	20049ac <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 200478c:	d0a70d17 	ldw	r2,-25548(gp)
 2004790:	d0e70d17 	ldw	r3,-25548(gp)
 2004794:	19000c03 	ldbu	r4,48(r3)
 2004798:	e0fff203 	ldbu	r3,-56(fp)
 200479c:	20c6b03a 	or	r3,r4,r3
 20047a0:	1809883a 	mov	r4,r3
 20047a4:	00ffe004 	movi	r3,-128
 20047a8:	20c6b03a 	or	r3,r4,r3
 20047ac:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20047b0:	d0a70d17 	ldw	r2,-25548(gp)
 20047b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 20047b8:	d0a70d17 	ldw	r2,-25548(gp)
 20047bc:	e0ffff0b 	ldhu	r3,-4(fp)
 20047c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20047c4:	e13ffc17 	ldw	r4,-16(fp)
 20047c8:	20052ec0 	call	20052ec <OS_EventTaskWaitMulti>
 20047cc:	e0bff317 	ldw	r2,-52(fp)
 20047d0:	e0bff915 	stw	r2,-28(fp)
 20047d4:	e0bff917 	ldw	r2,-28(fp)
 20047d8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20047dc:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20047e0:	0005303a 	rdctl	r2,status
 20047e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20047e8:	e0fff717 	ldw	r3,-36(fp)
 20047ec:	00bfff84 	movi	r2,-2
 20047f0:	1884703a 	and	r2,r3,r2
 20047f4:	1001703a 	wrctl	status,r2
  
  return context;
 20047f8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20047fc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2004800:	d0a70d17 	ldw	r2,-25548(gp)
 2004804:	10800c43 	ldbu	r2,49(r2)
 2004808:	10803fcc 	andi	r2,r2,255
 200480c:	10000226 	beq	r2,zero,2004818 <OSEventPendMulti+0x468>
 2004810:	108000a0 	cmpeqi	r2,r2,2
 2004814:	10001826 	beq	r2,zero,2004878 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2004818:	d0a70d17 	ldw	r2,-25548(gp)
 200481c:	10800717 	ldw	r2,28(r2)
 2004820:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2004824:	e0bff017 	ldw	r2,-64(fp)
 2004828:	10000b26 	beq	r2,zero,2004858 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 200482c:	e0bffd17 	ldw	r2,-12(fp)
 2004830:	10c00104 	addi	r3,r2,4
 2004834:	e0fffd15 	stw	r3,-12(fp)
 2004838:	e0fff017 	ldw	r3,-64(fp)
 200483c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2004840:	e0bffd17 	ldw	r2,-12(fp)
 2004844:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2004848:	e0bff18b 	ldhu	r2,-58(fp)
 200484c:	10800044 	addi	r2,r2,1
 2004850:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 2004854:	00000d06 	br	200488c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2004858:	d0a70d17 	ldw	r2,-25548(gp)
 200485c:	00c00044 	movi	r3,1
 2004860:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2004864:	d0a70d17 	ldw	r2,-25548(gp)
 2004868:	e17ffc17 	ldw	r5,-16(fp)
 200486c:	1009883a 	mov	r4,r2
 2004870:	20054f40 	call	20054f4 <OS_EventTaskRemoveMulti>
             }
			 break;
 2004874:	00000506 	br	200488c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2004878:	d0a70d17 	ldw	r2,-25548(gp)
 200487c:	e17ffc17 	ldw	r5,-16(fp)
 2004880:	1009883a 	mov	r4,r2
 2004884:	20054f40 	call	20054f4 <OS_EventTaskRemoveMulti>
             break;
 2004888:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 200488c:	d0a70d17 	ldw	r2,-25548(gp)
 2004890:	10800c43 	ldbu	r2,49(r2)
 2004894:	10803fcc 	andi	r2,r2,255
 2004898:	10000326 	beq	r2,zero,20048a8 <OSEventPendMulti+0x4f8>
 200489c:	108000a0 	cmpeqi	r2,r2,2
 20048a0:	1000231e 	bne	r2,zero,2004930 <OSEventPendMulti+0x580>
 20048a4:	00002a06 	br	2004950 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 20048a8:	e0bff017 	ldw	r2,-64(fp)
 20048ac:	10800003 	ldbu	r2,0(r2)
 20048b0:	10803fcc 	andi	r2,r2,255
 20048b4:	0080100e 	bge	zero,r2,20048f8 <OSEventPendMulti+0x548>
 20048b8:	10c000d0 	cmplti	r3,r2,3
 20048bc:	1800071e 	bne	r3,zero,20048dc <OSEventPendMulti+0x52c>
 20048c0:	108000e0 	cmpeqi	r2,r2,3
 20048c4:	10000c26 	beq	r2,zero,20048f8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20048c8:	e0bffe17 	ldw	r2,-8(fp)
 20048cc:	10c00104 	addi	r3,r2,4
 20048d0:	e0fffe15 	stw	r3,-8(fp)
 20048d4:	10000015 	stw	zero,0(r2)
                      break;
 20048d8:	00001206 	br	2004924 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20048dc:	e0bffe17 	ldw	r2,-8(fp)
 20048e0:	10c00104 	addi	r3,r2,4
 20048e4:	e0fffe15 	stw	r3,-8(fp)
 20048e8:	d0e70d17 	ldw	r3,-25548(gp)
 20048ec:	18c00917 	ldw	r3,36(r3)
 20048f0:	10c00015 	stw	r3,0(r2)
                      break;
 20048f4:	00000b06 	br	2004924 <OSEventPendMulti+0x574>
 20048f8:	e0bff317 	ldw	r2,-52(fp)
 20048fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004900:	e0bff817 	ldw	r2,-32(fp)
 2004904:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2004908:	e0bffd17 	ldw	r2,-12(fp)
 200490c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2004910:	e0800217 	ldw	r2,8(fp)
 2004914:	00c00044 	movi	r3,1
 2004918:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 200491c:	e0bff18b 	ldhu	r2,-58(fp)
 2004920:	00002206 	br	20049ac <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2004924:	e0800217 	ldw	r2,8(fp)
 2004928:	10000005 	stb	zero,0(r2)
             break;
 200492c:	00001006 	br	2004970 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2004930:	e0bffe17 	ldw	r2,-8(fp)
 2004934:	10c00104 	addi	r3,r2,4
 2004938:	e0fffe15 	stw	r3,-8(fp)
 200493c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2004940:	e0800217 	ldw	r2,8(fp)
 2004944:	00c00384 	movi	r3,14
 2004948:	10c00005 	stb	r3,0(r2)
             break;
 200494c:	00000806 	br	2004970 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2004950:	e0bffe17 	ldw	r2,-8(fp)
 2004954:	10c00104 	addi	r3,r2,4
 2004958:	e0fffe15 	stw	r3,-8(fp)
 200495c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2004960:	e0800217 	ldw	r2,8(fp)
 2004964:	00c00284 	movi	r3,10
 2004968:	10c00005 	stb	r3,0(r2)
             break;
 200496c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2004970:	d0a70d17 	ldw	r2,-25548(gp)
 2004974:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2004978:	d0a70d17 	ldw	r2,-25548(gp)
 200497c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2004980:	d0a70d17 	ldw	r2,-25548(gp)
 2004984:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2004988:	d0a70d17 	ldw	r2,-25548(gp)
 200498c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2004990:	d0a70d17 	ldw	r2,-25548(gp)
 2004994:	10000915 	stw	zero,36(r2)
 2004998:	e0bff317 	ldw	r2,-52(fp)
 200499c:	e0bffa15 	stw	r2,-24(fp)
 20049a0:	e0bffa17 	ldw	r2,-24(fp)
 20049a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 20049a8:	e0bff18b 	ldhu	r2,-58(fp)
}
 20049ac:	e037883a 	mov	sp,fp
 20049b0:	dfc00117 	ldw	ra,4(sp)
 20049b4:	df000017 	ldw	fp,0(sp)
 20049b8:	dec00204 	addi	sp,sp,8
 20049bc:	f800283a 	ret

020049c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 20049c0:	defffe04 	addi	sp,sp,-8
 20049c4:	dfc00115 	stw	ra,4(sp)
 20049c8:	df000015 	stw	fp,0(sp)
 20049cc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20049d0:	200e12c0 	call	200e12c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20049d4:	200573c0 	call	200573c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20049d8:	20057840 	call	2005784 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20049dc:	20058f00 	call	20058f0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20049e0:	200565c0 	call	200565c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20049e4:	20077900 	call	2007790 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20049e8:	2008b580 	call	2008b58 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20049ec:	2009c8c0 	call	2009c8c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20049f0:	20057f00 	call	20057f0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20049f4:	20058700 	call	2005870 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20049f8:	200e14c0 	call	200e14c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20049fc:	20061640 	call	2006164 <OSDebugInit>
#endif
}
 2004a00:	0001883a 	nop
 2004a04:	e037883a 	mov	sp,fp
 2004a08:	dfc00117 	ldw	ra,4(sp)
 2004a0c:	df000017 	ldw	fp,0(sp)
 2004a10:	dec00204 	addi	sp,sp,8
 2004a14:	f800283a 	ret

02004a18 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2004a18:	deffff04 	addi	sp,sp,-4
 2004a1c:	df000015 	stw	fp,0(sp)
 2004a20:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2004a24:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004a28:	10803fcc 	andi	r2,r2,255
 2004a2c:	10800058 	cmpnei	r2,r2,1
 2004a30:	1000071e 	bne	r2,zero,2004a50 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2004a34:	d0a70c03 	ldbu	r2,-25552(gp)
 2004a38:	10803fcc 	andi	r2,r2,255
 2004a3c:	10803fe0 	cmpeqi	r2,r2,255
 2004a40:	1000031e 	bne	r2,zero,2004a50 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2004a44:	d0a70c03 	ldbu	r2,-25552(gp)
 2004a48:	10800044 	addi	r2,r2,1
 2004a4c:	d0a70c05 	stb	r2,-25552(gp)
        }
    }
}
 2004a50:	0001883a 	nop
 2004a54:	e037883a 	mov	sp,fp
 2004a58:	df000017 	ldw	fp,0(sp)
 2004a5c:	dec00104 	addi	sp,sp,4
 2004a60:	f800283a 	ret

02004a64 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2004a64:	defffb04 	addi	sp,sp,-20
 2004a68:	dfc00415 	stw	ra,16(sp)
 2004a6c:	df000315 	stw	fp,12(sp)
 2004a70:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2004a74:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2004a78:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004a7c:	10803fcc 	andi	r2,r2,255
 2004a80:	10800058 	cmpnei	r2,r2,1
 2004a84:	10002f1e 	bne	r2,zero,2004b44 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004a88:	0005303a 	rdctl	r2,status
 2004a8c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004a90:	e0ffff17 	ldw	r3,-4(fp)
 2004a94:	00bfff84 	movi	r2,-2
 2004a98:	1884703a 	and	r2,r3,r2
 2004a9c:	1001703a 	wrctl	status,r2
  
  return context;
 2004aa0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2004aa4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2004aa8:	d0a70c03 	ldbu	r2,-25552(gp)
 2004aac:	10803fcc 	andi	r2,r2,255
 2004ab0:	10000326 	beq	r2,zero,2004ac0 <OSIntExit+0x5c>
            OSIntNesting--;
 2004ab4:	d0a70c03 	ldbu	r2,-25552(gp)
 2004ab8:	10bfffc4 	addi	r2,r2,-1
 2004abc:	d0a70c05 	stb	r2,-25552(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2004ac0:	d0a70c03 	ldbu	r2,-25552(gp)
 2004ac4:	10803fcc 	andi	r2,r2,255
 2004ac8:	10001a1e 	bne	r2,zero,2004b34 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2004acc:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004ad0:	10803fcc 	andi	r2,r2,255
 2004ad4:	1000171e 	bne	r2,zero,2004b34 <OSIntExit+0xd0>
                OS_SchedNew();
 2004ad8:	2005b600 	call	2005b60 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2004adc:	d0e70003 	ldbu	r3,-25600(gp)
 2004ae0:	d0a70043 	ldbu	r2,-25599(gp)
 2004ae4:	18c03fcc 	andi	r3,r3,255
 2004ae8:	10803fcc 	andi	r2,r2,255
 2004aec:	18801126 	beq	r3,r2,2004b34 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2004af0:	d0a70003 	ldbu	r2,-25600(gp)
 2004af4:	10c03fcc 	andi	r3,r2,255
 2004af8:	008080b4 	movhi	r2,514
 2004afc:	10ac9a04 	addi	r2,r2,-19864
 2004b00:	18c7883a 	add	r3,r3,r3
 2004b04:	18c7883a 	add	r3,r3,r3
 2004b08:	10c5883a 	add	r2,r2,r3
 2004b0c:	10800017 	ldw	r2,0(r2)
 2004b10:	d0a70815 	stw	r2,-25568(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2004b14:	d0a70817 	ldw	r2,-25568(gp)
 2004b18:	10c00e17 	ldw	r3,56(r2)
 2004b1c:	18c00044 	addi	r3,r3,1
 2004b20:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2004b24:	d0a70317 	ldw	r2,-25588(gp)
 2004b28:	10800044 	addi	r2,r2,1
 2004b2c:	d0a70315 	stw	r2,-25588(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2004b30:	200de580 	call	200de58 <OSCtxSw>
 2004b34:	e0bffd17 	ldw	r2,-12(fp)
 2004b38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004b3c:	e0bffe17 	ldw	r2,-8(fp)
 2004b40:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2004b44:	0001883a 	nop
 2004b48:	e037883a 	mov	sp,fp
 2004b4c:	dfc00117 	ldw	ra,4(sp)
 2004b50:	df000017 	ldw	fp,0(sp)
 2004b54:	dec00204 	addi	sp,sp,8
 2004b58:	f800283a 	ret

02004b5c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2004b5c:	defffc04 	addi	sp,sp,-16
 2004b60:	df000315 	stw	fp,12(sp)
 2004b64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004b68:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2004b6c:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004b70:	10803fcc 	andi	r2,r2,255
 2004b74:	10800058 	cmpnei	r2,r2,1
 2004b78:	1000161e 	bne	r2,zero,2004bd4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004b7c:	0005303a 	rdctl	r2,status
 2004b80:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004b84:	e0ffff17 	ldw	r3,-4(fp)
 2004b88:	00bfff84 	movi	r2,-2
 2004b8c:	1884703a 	and	r2,r3,r2
 2004b90:	1001703a 	wrctl	status,r2
  
  return context;
 2004b94:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2004b98:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2004b9c:	d0a70c03 	ldbu	r2,-25552(gp)
 2004ba0:	10803fcc 	andi	r2,r2,255
 2004ba4:	1000071e 	bne	r2,zero,2004bc4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2004ba8:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004bac:	10803fcc 	andi	r2,r2,255
 2004bb0:	10803fe0 	cmpeqi	r2,r2,255
 2004bb4:	1000031e 	bne	r2,zero,2004bc4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2004bb8:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004bbc:	10800044 	addi	r2,r2,1
 2004bc0:	d0a6fe05 	stb	r2,-25608(gp)
 2004bc4:	e0bffd17 	ldw	r2,-12(fp)
 2004bc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004bcc:	e0bffe17 	ldw	r2,-8(fp)
 2004bd0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2004bd4:	0001883a 	nop
 2004bd8:	e037883a 	mov	sp,fp
 2004bdc:	df000017 	ldw	fp,0(sp)
 2004be0:	dec00104 	addi	sp,sp,4
 2004be4:	f800283a 	ret

02004be8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2004be8:	defff804 	addi	sp,sp,-32
 2004bec:	dfc00715 	stw	ra,28(sp)
 2004bf0:	df000615 	stw	fp,24(sp)
 2004bf4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2004bf8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2004bfc:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004c00:	10803fcc 	andi	r2,r2,255
 2004c04:	10800058 	cmpnei	r2,r2,1
 2004c08:	1000281e 	bne	r2,zero,2004cac <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004c0c:	0005303a 	rdctl	r2,status
 2004c10:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004c14:	e0ffff17 	ldw	r3,-4(fp)
 2004c18:	00bfff84 	movi	r2,-2
 2004c1c:	1884703a 	and	r2,r3,r2
 2004c20:	1001703a 	wrctl	status,r2
  
  return context;
 2004c24:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2004c28:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2004c2c:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004c30:	10803fcc 	andi	r2,r2,255
 2004c34:	10001926 	beq	r2,zero,2004c9c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2004c38:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004c3c:	10bfffc4 	addi	r2,r2,-1
 2004c40:	d0a6fe05 	stb	r2,-25608(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2004c44:	d0a6fe03 	ldbu	r2,-25608(gp)
 2004c48:	10803fcc 	andi	r2,r2,255
 2004c4c:	10000e1e 	bne	r2,zero,2004c88 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2004c50:	d0a70c03 	ldbu	r2,-25552(gp)
 2004c54:	10803fcc 	andi	r2,r2,255
 2004c58:	1000061e 	bne	r2,zero,2004c74 <OSSchedUnlock+0x8c>
 2004c5c:	e0bffa17 	ldw	r2,-24(fp)
 2004c60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004c64:	e0bffb17 	ldw	r2,-20(fp)
 2004c68:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2004c6c:	2005a900 	call	2005a90 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2004c70:	00000e06 	br	2004cac <OSSchedUnlock+0xc4>
 2004c74:	e0bffa17 	ldw	r2,-24(fp)
 2004c78:	e0bffc15 	stw	r2,-16(fp)
 2004c7c:	e0bffc17 	ldw	r2,-16(fp)
 2004c80:	1001703a 	wrctl	status,r2
 2004c84:	00000906 	br	2004cac <OSSchedUnlock+0xc4>
 2004c88:	e0bffa17 	ldw	r2,-24(fp)
 2004c8c:	e0bffd15 	stw	r2,-12(fp)
 2004c90:	e0bffd17 	ldw	r2,-12(fp)
 2004c94:	1001703a 	wrctl	status,r2
 2004c98:	00000406 	br	2004cac <OSSchedUnlock+0xc4>
 2004c9c:	e0bffa17 	ldw	r2,-24(fp)
 2004ca0:	e0bffe15 	stw	r2,-8(fp)
 2004ca4:	e0bffe17 	ldw	r2,-8(fp)
 2004ca8:	1001703a 	wrctl	status,r2
 2004cac:	0001883a 	nop
 2004cb0:	e037883a 	mov	sp,fp
 2004cb4:	dfc00117 	ldw	ra,4(sp)
 2004cb8:	df000017 	ldw	fp,0(sp)
 2004cbc:	dec00204 	addi	sp,sp,8
 2004cc0:	f800283a 	ret

02004cc4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2004cc4:	defffe04 	addi	sp,sp,-8
 2004cc8:	dfc00115 	stw	ra,4(sp)
 2004ccc:	df000015 	stw	fp,0(sp)
 2004cd0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2004cd4:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004cd8:	10803fcc 	andi	r2,r2,255
 2004cdc:	10000f1e 	bne	r2,zero,2004d1c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2004ce0:	2005b600 	call	2005b60 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2004ce4:	d0a70003 	ldbu	r2,-25600(gp)
 2004ce8:	d0a70045 	stb	r2,-25599(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2004cec:	d0a70003 	ldbu	r2,-25600(gp)
 2004cf0:	10c03fcc 	andi	r3,r2,255
 2004cf4:	008080b4 	movhi	r2,514
 2004cf8:	10ac9a04 	addi	r2,r2,-19864
 2004cfc:	18c7883a 	add	r3,r3,r3
 2004d00:	18c7883a 	add	r3,r3,r3
 2004d04:	10c5883a 	add	r2,r2,r3
 2004d08:	10800017 	ldw	r2,0(r2)
 2004d0c:	d0a70815 	stw	r2,-25568(gp)
        OSTCBCur      = OSTCBHighRdy;
 2004d10:	d0a70817 	ldw	r2,-25568(gp)
 2004d14:	d0a70d15 	stw	r2,-25548(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2004d18:	200dee40 	call	200dee4 <OSStartHighRdy>
    }
}
 2004d1c:	0001883a 	nop
 2004d20:	e037883a 	mov	sp,fp
 2004d24:	dfc00117 	ldw	ra,4(sp)
 2004d28:	df000017 	ldw	fp,0(sp)
 2004d2c:	dec00204 	addi	sp,sp,8
 2004d30:	f800283a 	ret

02004d34 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2004d34:	defff904 	addi	sp,sp,-28
 2004d38:	dfc00615 	stw	ra,24(sp)
 2004d3c:	df000515 	stw	fp,20(sp)
 2004d40:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004d44:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2004d48:	01000084 	movi	r4,2
 2004d4c:	200bf000 	call	200bf00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004d50:	0005303a 	rdctl	r2,status
 2004d54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004d58:	e0fffc17 	ldw	r3,-16(fp)
 2004d5c:	00bfff84 	movi	r2,-2
 2004d60:	1884703a 	and	r2,r3,r2
 2004d64:	1001703a 	wrctl	status,r2
  
  return context;
 2004d68:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2004d6c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2004d70:	d026ff15 	stw	zero,-25604(gp)
 2004d74:	e0bffb17 	ldw	r2,-20(fp)
 2004d78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004d7c:	e0bffd17 	ldw	r2,-12(fp)
 2004d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2004d84:	01001904 	movi	r4,100
 2004d88:	200bf000 	call	200bf00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004d8c:	0005303a 	rdctl	r2,status
 2004d90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004d94:	e0fffe17 	ldw	r3,-8(fp)
 2004d98:	00bfff84 	movi	r2,-2
 2004d9c:	1884703a 	and	r2,r3,r2
 2004da0:	1001703a 	wrctl	status,r2
  
  return context;
 2004da4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2004da8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2004dac:	d0a6ff17 	ldw	r2,-25604(gp)
 2004db0:	d0a70415 	stw	r2,-25584(gp)
    OSStatRdy    = OS_TRUE;
 2004db4:	00800044 	movi	r2,1
 2004db8:	d0a71005 	stb	r2,-25536(gp)
 2004dbc:	e0bffb17 	ldw	r2,-20(fp)
 2004dc0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004dc4:	e0bfff17 	ldw	r2,-4(fp)
 2004dc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2004dcc:	0001883a 	nop
 2004dd0:	e037883a 	mov	sp,fp
 2004dd4:	dfc00117 	ldw	ra,4(sp)
 2004dd8:	df000017 	ldw	fp,0(sp)
 2004ddc:	dec00204 	addi	sp,sp,8
 2004de0:	f800283a 	ret

02004de4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2004de4:	defff704 	addi	sp,sp,-36
 2004de8:	dfc00815 	stw	ra,32(sp)
 2004dec:	df000715 	stw	fp,28(sp)
 2004df0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2004df4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2004df8:	200e10c0 	call	200e10c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004dfc:	0005303a 	rdctl	r2,status
 2004e00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004e04:	e0fffd17 	ldw	r3,-12(fp)
 2004e08:	00bfff84 	movi	r2,-2
 2004e0c:	1884703a 	and	r2,r3,r2
 2004e10:	1001703a 	wrctl	status,r2
  
  return context;
 2004e14:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2004e18:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2004e1c:	d0a70e17 	ldw	r2,-25544(gp)
 2004e20:	10800044 	addi	r2,r2,1
 2004e24:	d0a70e15 	stw	r2,-25544(gp)
 2004e28:	e0bffb17 	ldw	r2,-20(fp)
 2004e2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004e30:	e0bfff17 	ldw	r2,-4(fp)
 2004e34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2004e38:	d0a6fe43 	ldbu	r2,-25607(gp)
 2004e3c:	10803fcc 	andi	r2,r2,255
 2004e40:	10800058 	cmpnei	r2,r2,1
 2004e44:	10006a1e 	bne	r2,zero,2004ff0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2004e48:	d0a70203 	ldbu	r2,-25592(gp)
 2004e4c:	10803fcc 	andi	r2,r2,255
 2004e50:	10c00060 	cmpeqi	r3,r2,1
 2004e54:	1800061e 	bne	r3,zero,2004e70 <OSTimeTick+0x8c>
 2004e58:	10c000a0 	cmpeqi	r3,r2,2
 2004e5c:	1800061e 	bne	r3,zero,2004e78 <OSTimeTick+0x94>
 2004e60:	10000a1e 	bne	r2,zero,2004e8c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2004e64:	00800044 	movi	r2,1
 2004e68:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2004e6c:	00000b06 	br	2004e9c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2004e70:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2004e74:	00000906 	br	2004e9c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2004e78:	00800044 	movi	r2,1
 2004e7c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2004e80:	00800044 	movi	r2,1
 2004e84:	d0a70205 	stb	r2,-25592(gp)
                 break;
 2004e88:	00000406 	br	2004e9c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2004e8c:	00800044 	movi	r2,1
 2004e90:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2004e94:	d0270205 	stb	zero,-25592(gp)
                 break;
 2004e98:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2004e9c:	e0bffa03 	ldbu	r2,-24(fp)
 2004ea0:	10005226 	beq	r2,zero,2004fec <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2004ea4:	d0a70117 	ldw	r2,-25596(gp)
 2004ea8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2004eac:	00004906 	br	2004fd4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004eb0:	0005303a 	rdctl	r2,status
 2004eb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004eb8:	e0fffc17 	ldw	r3,-16(fp)
 2004ebc:	00bfff84 	movi	r2,-2
 2004ec0:	1884703a 	and	r2,r3,r2
 2004ec4:	1001703a 	wrctl	status,r2
  
  return context;
 2004ec8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2004ecc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2004ed0:	e0bff917 	ldw	r2,-28(fp)
 2004ed4:	10800b8b 	ldhu	r2,46(r2)
 2004ed8:	10bfffcc 	andi	r2,r2,65535
 2004edc:	10003626 	beq	r2,zero,2004fb8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2004ee0:	e0bff917 	ldw	r2,-28(fp)
 2004ee4:	10800b8b 	ldhu	r2,46(r2)
 2004ee8:	10bfffc4 	addi	r2,r2,-1
 2004eec:	1007883a 	mov	r3,r2
 2004ef0:	e0bff917 	ldw	r2,-28(fp)
 2004ef4:	10c00b8d 	sth	r3,46(r2)
 2004ef8:	e0bff917 	ldw	r2,-28(fp)
 2004efc:	10800b8b 	ldhu	r2,46(r2)
 2004f00:	10bfffcc 	andi	r2,r2,65535
 2004f04:	10002c1e 	bne	r2,zero,2004fb8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2004f08:	e0bff917 	ldw	r2,-28(fp)
 2004f0c:	10800c03 	ldbu	r2,48(r2)
 2004f10:	10803fcc 	andi	r2,r2,255
 2004f14:	10800dcc 	andi	r2,r2,55
 2004f18:	10000b26 	beq	r2,zero,2004f48 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2004f1c:	e0bff917 	ldw	r2,-28(fp)
 2004f20:	10c00c03 	ldbu	r3,48(r2)
 2004f24:	00bff204 	movi	r2,-56
 2004f28:	1884703a 	and	r2,r3,r2
 2004f2c:	1007883a 	mov	r3,r2
 2004f30:	e0bff917 	ldw	r2,-28(fp)
 2004f34:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2004f38:	e0bff917 	ldw	r2,-28(fp)
 2004f3c:	00c00044 	movi	r3,1
 2004f40:	10c00c45 	stb	r3,49(r2)
 2004f44:	00000206 	br	2004f50 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2004f48:	e0bff917 	ldw	r2,-28(fp)
 2004f4c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2004f50:	e0bff917 	ldw	r2,-28(fp)
 2004f54:	10800c03 	ldbu	r2,48(r2)
 2004f58:	10803fcc 	andi	r2,r2,255
 2004f5c:	1080020c 	andi	r2,r2,8
 2004f60:	1000151e 	bne	r2,zero,2004fb8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2004f64:	e0bff917 	ldw	r2,-28(fp)
 2004f68:	10c00d83 	ldbu	r3,54(r2)
 2004f6c:	d0a70a03 	ldbu	r2,-25560(gp)
 2004f70:	1884b03a 	or	r2,r3,r2
 2004f74:	d0a70a05 	stb	r2,-25560(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2004f78:	e0bff917 	ldw	r2,-28(fp)
 2004f7c:	10800d03 	ldbu	r2,52(r2)
 2004f80:	10c03fcc 	andi	r3,r2,255
 2004f84:	e0bff917 	ldw	r2,-28(fp)
 2004f88:	10800d03 	ldbu	r2,52(r2)
 2004f8c:	11003fcc 	andi	r4,r2,255
 2004f90:	d0a70a44 	addi	r2,gp,-25559
 2004f94:	2085883a 	add	r2,r4,r2
 2004f98:	11000003 	ldbu	r4,0(r2)
 2004f9c:	e0bff917 	ldw	r2,-28(fp)
 2004fa0:	10800d43 	ldbu	r2,53(r2)
 2004fa4:	2084b03a 	or	r2,r4,r2
 2004fa8:	1009883a 	mov	r4,r2
 2004fac:	d0a70a44 	addi	r2,gp,-25559
 2004fb0:	1885883a 	add	r2,r3,r2
 2004fb4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2004fb8:	e0bff917 	ldw	r2,-28(fp)
 2004fbc:	10800517 	ldw	r2,20(r2)
 2004fc0:	e0bff915 	stw	r2,-28(fp)
 2004fc4:	e0bffb17 	ldw	r2,-20(fp)
 2004fc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004fcc:	e0bffe17 	ldw	r2,-8(fp)
 2004fd0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2004fd4:	e0bff917 	ldw	r2,-28(fp)
 2004fd8:	10800c83 	ldbu	r2,50(r2)
 2004fdc:	10803fcc 	andi	r2,r2,255
 2004fe0:	10800518 	cmpnei	r2,r2,20
 2004fe4:	103fb21e 	bne	r2,zero,2004eb0 <OSTimeTick+0xcc>
 2004fe8:	00000106 	br	2004ff0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2004fec:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2004ff0:	e037883a 	mov	sp,fp
 2004ff4:	dfc00117 	ldw	ra,4(sp)
 2004ff8:	df000017 	ldw	fp,0(sp)
 2004ffc:	dec00204 	addi	sp,sp,8
 2005000:	f800283a 	ret

02005004 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2005004:	deffff04 	addi	sp,sp,-4
 2005008:	df000015 	stw	fp,0(sp)
 200500c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2005010:	00804784 	movi	r2,286
}
 2005014:	e037883a 	mov	sp,fp
 2005018:	df000017 	ldw	fp,0(sp)
 200501c:	dec00104 	addi	sp,sp,4
 2005020:	f800283a 	ret

02005024 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2005024:	deffff04 	addi	sp,sp,-4
 2005028:	df000015 	stw	fp,0(sp)
 200502c:	d839883a 	mov	fp,sp
}
 2005030:	0001883a 	nop
 2005034:	e037883a 	mov	sp,fp
 2005038:	df000017 	ldw	fp,0(sp)
 200503c:	dec00104 	addi	sp,sp,4
 2005040:	f800283a 	ret

02005044 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2005044:	defff804 	addi	sp,sp,-32
 2005048:	dfc00715 	stw	ra,28(sp)
 200504c:	df000615 	stw	fp,24(sp)
 2005050:	df000604 	addi	fp,sp,24
 2005054:	e13ffc15 	stw	r4,-16(fp)
 2005058:	e17ffd15 	stw	r5,-12(fp)
 200505c:	3007883a 	mov	r3,r6
 2005060:	3805883a 	mov	r2,r7
 2005064:	e0fffe05 	stb	r3,-8(fp)
 2005068:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 200506c:	e0bffc17 	ldw	r2,-16(fp)
 2005070:	10800283 	ldbu	r2,10(r2)
 2005074:	10c03fcc 	andi	r3,r2,255
 2005078:	00808074 	movhi	r2,513
 200507c:	10ba2904 	addi	r2,r2,-5980
 2005080:	10c5883a 	add	r2,r2,r3
 2005084:	10800003 	ldbu	r2,0(r2)
 2005088:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 200508c:	e0bffa03 	ldbu	r2,-24(fp)
 2005090:	e0fffc17 	ldw	r3,-16(fp)
 2005094:	1885883a 	add	r2,r3,r2
 2005098:	108002c4 	addi	r2,r2,11
 200509c:	10800003 	ldbu	r2,0(r2)
 20050a0:	10c03fcc 	andi	r3,r2,255
 20050a4:	00808074 	movhi	r2,513
 20050a8:	10ba2904 	addi	r2,r2,-5980
 20050ac:	10c5883a 	add	r2,r2,r3
 20050b0:	10800003 	ldbu	r2,0(r2)
 20050b4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 20050b8:	e0bffa03 	ldbu	r2,-24(fp)
 20050bc:	100490fa 	slli	r2,r2,3
 20050c0:	1007883a 	mov	r3,r2
 20050c4:	e0bffa43 	ldbu	r2,-23(fp)
 20050c8:	1885883a 	add	r2,r3,r2
 20050cc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20050d0:	e0fffa83 	ldbu	r3,-22(fp)
 20050d4:	008080b4 	movhi	r2,514
 20050d8:	10ac9a04 	addi	r2,r2,-19864
 20050dc:	18c7883a 	add	r3,r3,r3
 20050e0:	18c7883a 	add	r3,r3,r3
 20050e4:	10c5883a 	add	r2,r2,r3
 20050e8:	10800017 	ldw	r2,0(r2)
 20050ec:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 20050f0:	e0bffb17 	ldw	r2,-20(fp)
 20050f4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 20050f8:	e0bffb17 	ldw	r2,-20(fp)
 20050fc:	e0fffd17 	ldw	r3,-12(fp)
 2005100:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2005104:	e0bffb17 	ldw	r2,-20(fp)
 2005108:	10800c03 	ldbu	r2,48(r2)
 200510c:	1007883a 	mov	r3,r2
 2005110:	e0bffe03 	ldbu	r2,-8(fp)
 2005114:	0084303a 	nor	r2,zero,r2
 2005118:	1884703a 	and	r2,r3,r2
 200511c:	1007883a 	mov	r3,r2
 2005120:	e0bffb17 	ldw	r2,-20(fp)
 2005124:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2005128:	e0bffb17 	ldw	r2,-20(fp)
 200512c:	e0ffff03 	ldbu	r3,-4(fp)
 2005130:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2005134:	e0bffb17 	ldw	r2,-20(fp)
 2005138:	10800c03 	ldbu	r2,48(r2)
 200513c:	10803fcc 	andi	r2,r2,255
 2005140:	1080020c 	andi	r2,r2,8
 2005144:	1000111e 	bne	r2,zero,200518c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2005148:	e0bffb17 	ldw	r2,-20(fp)
 200514c:	10c00d83 	ldbu	r3,54(r2)
 2005150:	d0a70a03 	ldbu	r2,-25560(gp)
 2005154:	1884b03a 	or	r2,r3,r2
 2005158:	d0a70a05 	stb	r2,-25560(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 200515c:	e0fffa03 	ldbu	r3,-24(fp)
 2005160:	e13ffa03 	ldbu	r4,-24(fp)
 2005164:	d0a70a44 	addi	r2,gp,-25559
 2005168:	2085883a 	add	r2,r4,r2
 200516c:	11000003 	ldbu	r4,0(r2)
 2005170:	e0bffb17 	ldw	r2,-20(fp)
 2005174:	10800d43 	ldbu	r2,53(r2)
 2005178:	2084b03a 	or	r2,r4,r2
 200517c:	1009883a 	mov	r4,r2
 2005180:	d0a70a44 	addi	r2,gp,-25559
 2005184:	1885883a 	add	r2,r3,r2
 2005188:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 200518c:	e17ffc17 	ldw	r5,-16(fp)
 2005190:	e13ffb17 	ldw	r4,-20(fp)
 2005194:	200543c0 	call	200543c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2005198:	e0bffb17 	ldw	r2,-20(fp)
 200519c:	10800817 	ldw	r2,32(r2)
 20051a0:	10000826 	beq	r2,zero,20051c4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 20051a4:	e0bffb17 	ldw	r2,-20(fp)
 20051a8:	10800817 	ldw	r2,32(r2)
 20051ac:	100b883a 	mov	r5,r2
 20051b0:	e13ffb17 	ldw	r4,-20(fp)
 20051b4:	20054f40 	call	20054f4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 20051b8:	e0bffb17 	ldw	r2,-20(fp)
 20051bc:	e0fffc17 	ldw	r3,-16(fp)
 20051c0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 20051c4:	e0bffa83 	ldbu	r2,-22(fp)
}
 20051c8:	e037883a 	mov	sp,fp
 20051cc:	dfc00117 	ldw	ra,4(sp)
 20051d0:	df000017 	ldw	fp,0(sp)
 20051d4:	dec00204 	addi	sp,sp,8
 20051d8:	f800283a 	ret

020051dc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 20051dc:	defffd04 	addi	sp,sp,-12
 20051e0:	df000215 	stw	fp,8(sp)
 20051e4:	df000204 	addi	fp,sp,8
 20051e8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 20051ec:	d0a70d17 	ldw	r2,-25548(gp)
 20051f0:	e0ffff17 	ldw	r3,-4(fp)
 20051f4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 20051f8:	d0a70d17 	ldw	r2,-25548(gp)
 20051fc:	10800d03 	ldbu	r2,52(r2)
 2005200:	10803fcc 	andi	r2,r2,255
 2005204:	d0e70d17 	ldw	r3,-25548(gp)
 2005208:	18c00d03 	ldbu	r3,52(r3)
 200520c:	18c03fcc 	andi	r3,r3,255
 2005210:	e13fff17 	ldw	r4,-4(fp)
 2005214:	20c7883a 	add	r3,r4,r3
 2005218:	18c002c4 	addi	r3,r3,11
 200521c:	19000003 	ldbu	r4,0(r3)
 2005220:	d0e70d17 	ldw	r3,-25548(gp)
 2005224:	18c00d43 	ldbu	r3,53(r3)
 2005228:	20c6b03a 	or	r3,r4,r3
 200522c:	1809883a 	mov	r4,r3
 2005230:	e0ffff17 	ldw	r3,-4(fp)
 2005234:	1885883a 	add	r2,r3,r2
 2005238:	108002c4 	addi	r2,r2,11
 200523c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2005240:	e0bfff17 	ldw	r2,-4(fp)
 2005244:	10c00283 	ldbu	r3,10(r2)
 2005248:	d0a70d17 	ldw	r2,-25548(gp)
 200524c:	10800d83 	ldbu	r2,54(r2)
 2005250:	1884b03a 	or	r2,r3,r2
 2005254:	1007883a 	mov	r3,r2
 2005258:	e0bfff17 	ldw	r2,-4(fp)
 200525c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2005260:	d0a70d17 	ldw	r2,-25548(gp)
 2005264:	10800d03 	ldbu	r2,52(r2)
 2005268:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 200526c:	e0fffe03 	ldbu	r3,-8(fp)
 2005270:	e13ffe03 	ldbu	r4,-8(fp)
 2005274:	d0a70a44 	addi	r2,gp,-25559
 2005278:	2085883a 	add	r2,r4,r2
 200527c:	10800003 	ldbu	r2,0(r2)
 2005280:	1009883a 	mov	r4,r2
 2005284:	d0a70d17 	ldw	r2,-25548(gp)
 2005288:	10800d43 	ldbu	r2,53(r2)
 200528c:	0084303a 	nor	r2,zero,r2
 2005290:	2084703a 	and	r2,r4,r2
 2005294:	1009883a 	mov	r4,r2
 2005298:	d0a70a44 	addi	r2,gp,-25559
 200529c:	1885883a 	add	r2,r3,r2
 20052a0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20052a4:	e0fffe03 	ldbu	r3,-8(fp)
 20052a8:	d0a70a44 	addi	r2,gp,-25559
 20052ac:	1885883a 	add	r2,r3,r2
 20052b0:	10800003 	ldbu	r2,0(r2)
 20052b4:	10803fcc 	andi	r2,r2,255
 20052b8:	1000071e 	bne	r2,zero,20052d8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20052bc:	d0a70d17 	ldw	r2,-25548(gp)
 20052c0:	10800d83 	ldbu	r2,54(r2)
 20052c4:	0084303a 	nor	r2,zero,r2
 20052c8:	1007883a 	mov	r3,r2
 20052cc:	d0a70a03 	ldbu	r2,-25560(gp)
 20052d0:	1884703a 	and	r2,r3,r2
 20052d4:	d0a70a05 	stb	r2,-25560(gp)
    }
}
 20052d8:	0001883a 	nop
 20052dc:	e037883a 	mov	sp,fp
 20052e0:	df000017 	ldw	fp,0(sp)
 20052e4:	dec00104 	addi	sp,sp,4
 20052e8:	f800283a 	ret

020052ec <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 20052ec:	defffb04 	addi	sp,sp,-20
 20052f0:	df000415 	stw	fp,16(sp)
 20052f4:	df000404 	addi	fp,sp,16
 20052f8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 20052fc:	d0a70d17 	ldw	r2,-25548(gp)
 2005300:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2005304:	d0a70d17 	ldw	r2,-25548(gp)
 2005308:	e0ffff17 	ldw	r3,-4(fp)
 200530c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2005310:	e0bfff17 	ldw	r2,-4(fp)
 2005314:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2005318:	e0bffc17 	ldw	r2,-16(fp)
 200531c:	10800017 	ldw	r2,0(r2)
 2005320:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2005324:	00002006 	br	20053a8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2005328:	d0a70d17 	ldw	r2,-25548(gp)
 200532c:	10800d03 	ldbu	r2,52(r2)
 2005330:	10803fcc 	andi	r2,r2,255
 2005334:	d0e70d17 	ldw	r3,-25548(gp)
 2005338:	18c00d03 	ldbu	r3,52(r3)
 200533c:	18c03fcc 	andi	r3,r3,255
 2005340:	e13ffd17 	ldw	r4,-12(fp)
 2005344:	20c7883a 	add	r3,r4,r3
 2005348:	18c002c4 	addi	r3,r3,11
 200534c:	19000003 	ldbu	r4,0(r3)
 2005350:	d0e70d17 	ldw	r3,-25548(gp)
 2005354:	18c00d43 	ldbu	r3,53(r3)
 2005358:	20c6b03a 	or	r3,r4,r3
 200535c:	1809883a 	mov	r4,r3
 2005360:	e0fffd17 	ldw	r3,-12(fp)
 2005364:	1885883a 	add	r2,r3,r2
 2005368:	108002c4 	addi	r2,r2,11
 200536c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2005370:	e0bffd17 	ldw	r2,-12(fp)
 2005374:	10c00283 	ldbu	r3,10(r2)
 2005378:	d0a70d17 	ldw	r2,-25548(gp)
 200537c:	10800d83 	ldbu	r2,54(r2)
 2005380:	1884b03a 	or	r2,r3,r2
 2005384:	1007883a 	mov	r3,r2
 2005388:	e0bffd17 	ldw	r2,-12(fp)
 200538c:	10c00285 	stb	r3,10(r2)
        pevents++;
 2005390:	e0bffc17 	ldw	r2,-16(fp)
 2005394:	10800104 	addi	r2,r2,4
 2005398:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 200539c:	e0bffc17 	ldw	r2,-16(fp)
 20053a0:	10800017 	ldw	r2,0(r2)
 20053a4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 20053a8:	e0bffd17 	ldw	r2,-12(fp)
 20053ac:	103fde1e 	bne	r2,zero,2005328 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20053b0:	d0a70d17 	ldw	r2,-25548(gp)
 20053b4:	10800d03 	ldbu	r2,52(r2)
 20053b8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20053bc:	e0fffe03 	ldbu	r3,-8(fp)
 20053c0:	e13ffe03 	ldbu	r4,-8(fp)
 20053c4:	d0a70a44 	addi	r2,gp,-25559
 20053c8:	2085883a 	add	r2,r4,r2
 20053cc:	10800003 	ldbu	r2,0(r2)
 20053d0:	1009883a 	mov	r4,r2
 20053d4:	d0a70d17 	ldw	r2,-25548(gp)
 20053d8:	10800d43 	ldbu	r2,53(r2)
 20053dc:	0084303a 	nor	r2,zero,r2
 20053e0:	2084703a 	and	r2,r4,r2
 20053e4:	1009883a 	mov	r4,r2
 20053e8:	d0a70a44 	addi	r2,gp,-25559
 20053ec:	1885883a 	add	r2,r3,r2
 20053f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20053f4:	e0fffe03 	ldbu	r3,-8(fp)
 20053f8:	d0a70a44 	addi	r2,gp,-25559
 20053fc:	1885883a 	add	r2,r3,r2
 2005400:	10800003 	ldbu	r2,0(r2)
 2005404:	10803fcc 	andi	r2,r2,255
 2005408:	1000071e 	bne	r2,zero,2005428 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 200540c:	d0a70d17 	ldw	r2,-25548(gp)
 2005410:	10800d83 	ldbu	r2,54(r2)
 2005414:	0084303a 	nor	r2,zero,r2
 2005418:	1007883a 	mov	r3,r2
 200541c:	d0a70a03 	ldbu	r2,-25560(gp)
 2005420:	1884703a 	and	r2,r3,r2
 2005424:	d0a70a05 	stb	r2,-25560(gp)
    }
}
 2005428:	0001883a 	nop
 200542c:	e037883a 	mov	sp,fp
 2005430:	df000017 	ldw	fp,0(sp)
 2005434:	dec00104 	addi	sp,sp,4
 2005438:	f800283a 	ret

0200543c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 200543c:	defffc04 	addi	sp,sp,-16
 2005440:	df000315 	stw	fp,12(sp)
 2005444:	df000304 	addi	fp,sp,12
 2005448:	e13ffe15 	stw	r4,-8(fp)
 200544c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2005450:	e0bffe17 	ldw	r2,-8(fp)
 2005454:	10800d03 	ldbu	r2,52(r2)
 2005458:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 200545c:	e0bffd03 	ldbu	r2,-12(fp)
 2005460:	e0fffd03 	ldbu	r3,-12(fp)
 2005464:	e13fff17 	ldw	r4,-4(fp)
 2005468:	20c7883a 	add	r3,r4,r3
 200546c:	18c002c4 	addi	r3,r3,11
 2005470:	18c00003 	ldbu	r3,0(r3)
 2005474:	1809883a 	mov	r4,r3
 2005478:	e0fffe17 	ldw	r3,-8(fp)
 200547c:	18c00d43 	ldbu	r3,53(r3)
 2005480:	00c6303a 	nor	r3,zero,r3
 2005484:	20c6703a 	and	r3,r4,r3
 2005488:	1809883a 	mov	r4,r3
 200548c:	e0ffff17 	ldw	r3,-4(fp)
 2005490:	1885883a 	add	r2,r3,r2
 2005494:	108002c4 	addi	r2,r2,11
 2005498:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 200549c:	e0bffd03 	ldbu	r2,-12(fp)
 20054a0:	e0ffff17 	ldw	r3,-4(fp)
 20054a4:	1885883a 	add	r2,r3,r2
 20054a8:	108002c4 	addi	r2,r2,11
 20054ac:	10800003 	ldbu	r2,0(r2)
 20054b0:	10803fcc 	andi	r2,r2,255
 20054b4:	10000a1e 	bne	r2,zero,20054e0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20054b8:	e0bfff17 	ldw	r2,-4(fp)
 20054bc:	10800283 	ldbu	r2,10(r2)
 20054c0:	1007883a 	mov	r3,r2
 20054c4:	e0bffe17 	ldw	r2,-8(fp)
 20054c8:	10800d83 	ldbu	r2,54(r2)
 20054cc:	0084303a 	nor	r2,zero,r2
 20054d0:	1884703a 	and	r2,r3,r2
 20054d4:	1007883a 	mov	r3,r2
 20054d8:	e0bfff17 	ldw	r2,-4(fp)
 20054dc:	10c00285 	stb	r3,10(r2)
    }
}
 20054e0:	0001883a 	nop
 20054e4:	e037883a 	mov	sp,fp
 20054e8:	df000017 	ldw	fp,0(sp)
 20054ec:	dec00104 	addi	sp,sp,4
 20054f0:	f800283a 	ret

020054f4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20054f4:	defffa04 	addi	sp,sp,-24
 20054f8:	df000515 	stw	fp,20(sp)
 20054fc:	df000504 	addi	fp,sp,20
 2005500:	e13ffe15 	stw	r4,-8(fp)
 2005504:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2005508:	e0bffe17 	ldw	r2,-8(fp)
 200550c:	10800d03 	ldbu	r2,52(r2)
 2005510:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2005514:	e0bffe17 	ldw	r2,-8(fp)
 2005518:	10800d83 	ldbu	r2,54(r2)
 200551c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2005520:	e0bffe17 	ldw	r2,-8(fp)
 2005524:	10800d43 	ldbu	r2,53(r2)
 2005528:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 200552c:	e0bfff17 	ldw	r2,-4(fp)
 2005530:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2005534:	e0bffb17 	ldw	r2,-20(fp)
 2005538:	10800017 	ldw	r2,0(r2)
 200553c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2005540:	00002506 	br	20055d8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2005544:	e0bffd03 	ldbu	r2,-12(fp)
 2005548:	e0fffd03 	ldbu	r3,-12(fp)
 200554c:	e13ffc17 	ldw	r4,-16(fp)
 2005550:	20c7883a 	add	r3,r4,r3
 2005554:	18c002c4 	addi	r3,r3,11
 2005558:	18c00003 	ldbu	r3,0(r3)
 200555c:	1809883a 	mov	r4,r3
 2005560:	e0fffd83 	ldbu	r3,-10(fp)
 2005564:	00c6303a 	nor	r3,zero,r3
 2005568:	20c6703a 	and	r3,r4,r3
 200556c:	1809883a 	mov	r4,r3
 2005570:	e0fffc17 	ldw	r3,-16(fp)
 2005574:	1885883a 	add	r2,r3,r2
 2005578:	108002c4 	addi	r2,r2,11
 200557c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2005580:	e0bffd03 	ldbu	r2,-12(fp)
 2005584:	e0fffc17 	ldw	r3,-16(fp)
 2005588:	1885883a 	add	r2,r3,r2
 200558c:	108002c4 	addi	r2,r2,11
 2005590:	10800003 	ldbu	r2,0(r2)
 2005594:	10803fcc 	andi	r2,r2,255
 2005598:	1000091e 	bne	r2,zero,20055c0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 200559c:	e0bffc17 	ldw	r2,-16(fp)
 20055a0:	10800283 	ldbu	r2,10(r2)
 20055a4:	1007883a 	mov	r3,r2
 20055a8:	e0bffd43 	ldbu	r2,-11(fp)
 20055ac:	0084303a 	nor	r2,zero,r2
 20055b0:	1884703a 	and	r2,r3,r2
 20055b4:	1007883a 	mov	r3,r2
 20055b8:	e0bffc17 	ldw	r2,-16(fp)
 20055bc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20055c0:	e0bffb17 	ldw	r2,-20(fp)
 20055c4:	10800104 	addi	r2,r2,4
 20055c8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20055cc:	e0bffb17 	ldw	r2,-20(fp)
 20055d0:	10800017 	ldw	r2,0(r2)
 20055d4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20055d8:	e0bffc17 	ldw	r2,-16(fp)
 20055dc:	103fd91e 	bne	r2,zero,2005544 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20055e0:	0001883a 	nop
 20055e4:	e037883a 	mov	sp,fp
 20055e8:	df000017 	ldw	fp,0(sp)
 20055ec:	dec00104 	addi	sp,sp,4
 20055f0:	f800283a 	ret

020055f4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20055f4:	defffc04 	addi	sp,sp,-16
 20055f8:	df000315 	stw	fp,12(sp)
 20055fc:	df000304 	addi	fp,sp,12
 2005600:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2005604:	e0bfff17 	ldw	r2,-4(fp)
 2005608:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 200560c:	e0bfff17 	ldw	r2,-4(fp)
 2005610:	108002c4 	addi	r2,r2,11
 2005614:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2005618:	e03ffe05 	stb	zero,-8(fp)
 200561c:	00000706 	br	200563c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2005620:	e0bffd17 	ldw	r2,-12(fp)
 2005624:	10c00044 	addi	r3,r2,1
 2005628:	e0fffd15 	stw	r3,-12(fp)
 200562c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2005630:	e0bffe03 	ldbu	r2,-8(fp)
 2005634:	10800044 	addi	r2,r2,1
 2005638:	e0bffe05 	stb	r2,-8(fp)
 200563c:	e0bffe03 	ldbu	r2,-8(fp)
 2005640:	108000f0 	cmpltui	r2,r2,3
 2005644:	103ff61e 	bne	r2,zero,2005620 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2005648:	0001883a 	nop
 200564c:	e037883a 	mov	sp,fp
 2005650:	df000017 	ldw	fp,0(sp)
 2005654:	dec00104 	addi	sp,sp,4
 2005658:	f800283a 	ret

0200565c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 200565c:	defffb04 	addi	sp,sp,-20
 2005660:	dfc00415 	stw	ra,16(sp)
 2005664:	df000315 	stw	fp,12(sp)
 2005668:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 200566c:	0142d004 	movi	r5,2880
 2005670:	010080b4 	movhi	r4,514
 2005674:	21288604 	addi	r4,r4,-24040
 2005678:	20059d40 	call	20059d4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 200567c:	008080b4 	movhi	r2,514
 2005680:	10a88604 	addi	r2,r2,-24040
 2005684:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2005688:	008080b4 	movhi	r2,514
 200568c:	10a89204 	addi	r2,r2,-23992
 2005690:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2005694:	e03ffd0d 	sth	zero,-12(fp)
 2005698:	00001306 	br	20056e8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 200569c:	e0bffe17 	ldw	r2,-8(fp)
 20056a0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 20056a4:	e0bffe17 	ldw	r2,-8(fp)
 20056a8:	e0ffff17 	ldw	r3,-4(fp)
 20056ac:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20056b0:	e0bffe17 	ldw	r2,-8(fp)
 20056b4:	00c00fc4 	movi	r3,63
 20056b8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20056bc:	e0bffe17 	ldw	r2,-8(fp)
 20056c0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20056c4:	e0bffe17 	ldw	r2,-8(fp)
 20056c8:	10800c04 	addi	r2,r2,48
 20056cc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20056d0:	e0bfff17 	ldw	r2,-4(fp)
 20056d4:	10800c04 	addi	r2,r2,48
 20056d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20056dc:	e0bffd0b 	ldhu	r2,-12(fp)
 20056e0:	10800044 	addi	r2,r2,1
 20056e4:	e0bffd0d 	sth	r2,-12(fp)
 20056e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20056ec:	10800ef0 	cmpltui	r2,r2,59
 20056f0:	103fea1e 	bne	r2,zero,200569c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20056f4:	e0bffe17 	ldw	r2,-8(fp)
 20056f8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20056fc:	e0bffe17 	ldw	r2,-8(fp)
 2005700:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2005704:	e0bffe17 	ldw	r2,-8(fp)
 2005708:	00c00fc4 	movi	r3,63
 200570c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2005710:	e0bffe17 	ldw	r2,-8(fp)
 2005714:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2005718:	008080b4 	movhi	r2,514
 200571c:	10a88604 	addi	r2,r2,-24040
 2005720:	d0a70b15 	stw	r2,-25556(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2005724:	0001883a 	nop
 2005728:	e037883a 	mov	sp,fp
 200572c:	dfc00117 	ldw	ra,4(sp)
 2005730:	df000017 	ldw	fp,0(sp)
 2005734:	dec00204 	addi	sp,sp,8
 2005738:	f800283a 	ret

0200573c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 200573c:	deffff04 	addi	sp,sp,-4
 2005740:	df000015 	stw	fp,0(sp)
 2005744:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2005748:	d0270e15 	stw	zero,-25544(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 200574c:	d0270c05 	stb	zero,-25552(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2005750:	d026fe05 	stb	zero,-25608(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2005754:	d0270645 	stb	zero,-25575(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2005758:	d026fe45 	stb	zero,-25607(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 200575c:	d0270315 	stw	zero,-25588(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2005760:	d026ff15 	stw	zero,-25604(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2005764:	d0271115 	stw	zero,-25532(gp)
    OSIdleCtrMax  = 0L;
 2005768:	d0270415 	stw	zero,-25584(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 200576c:	d0271005 	stb	zero,-25536(gp)
#endif
}
 2005770:	0001883a 	nop
 2005774:	e037883a 	mov	sp,fp
 2005778:	df000017 	ldw	fp,0(sp)
 200577c:	dec00104 	addi	sp,sp,4
 2005780:	f800283a 	ret

02005784 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2005784:	defffd04 	addi	sp,sp,-12
 2005788:	df000215 	stw	fp,8(sp)
 200578c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2005790:	d0270a05 	stb	zero,-25560(gp)
    prdytbl       = &OSRdyTbl[0];
 2005794:	d0a70a44 	addi	r2,gp,-25559
 2005798:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 200579c:	e03ffe05 	stb	zero,-8(fp)
 20057a0:	00000706 	br	20057c0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 20057a4:	e0bfff17 	ldw	r2,-4(fp)
 20057a8:	10c00044 	addi	r3,r2,1
 20057ac:	e0ffff15 	stw	r3,-4(fp)
 20057b0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20057b4:	e0bffe03 	ldbu	r2,-8(fp)
 20057b8:	10800044 	addi	r2,r2,1
 20057bc:	e0bffe05 	stb	r2,-8(fp)
 20057c0:	e0bffe03 	ldbu	r2,-8(fp)
 20057c4:	108000f0 	cmpltui	r2,r2,3
 20057c8:	103ff61e 	bne	r2,zero,20057a4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20057cc:	d0270045 	stb	zero,-25599(gp)
    OSPrioHighRdy = 0;
 20057d0:	d0270005 	stb	zero,-25600(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20057d4:	d0270815 	stw	zero,-25568(gp)
    OSTCBCur      = (OS_TCB *)0;
 20057d8:	d0270d15 	stw	zero,-25548(gp)
}
 20057dc:	0001883a 	nop
 20057e0:	e037883a 	mov	sp,fp
 20057e4:	df000017 	ldw	fp,0(sp)
 20057e8:	dec00104 	addi	sp,sp,4
 20057ec:	f800283a 	ret

020057f0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20057f0:	defff804 	addi	sp,sp,-32
 20057f4:	dfc00715 	stw	ra,28(sp)
 20057f8:	df000615 	stw	fp,24(sp)
 20057fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2005800:	008000c4 	movi	r2,3
 2005804:	d8800415 	stw	r2,16(sp)
 2005808:	d8000315 	stw	zero,12(sp)
 200580c:	00808004 	movi	r2,512
 2005810:	d8800215 	stw	r2,8(sp)
 2005814:	008080b4 	movhi	r2,514
 2005818:	10a68604 	addi	r2,r2,-26088
 200581c:	d8800115 	stw	r2,4(sp)
 2005820:	00bfffd4 	movui	r2,65535
 2005824:	d8800015 	stw	r2,0(sp)
 2005828:	01c00504 	movi	r7,20
 200582c:	018080b4 	movhi	r6,514
 2005830:	31a88504 	addi	r6,r6,-24044
 2005834:	000b883a 	mov	r5,zero
 2005838:	01008034 	movhi	r4,512
 200583c:	21172704 	addi	r4,r4,23708
 2005840:	200ae300 	call	200ae30 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2005844:	e1bfff04 	addi	r6,fp,-4
 2005848:	01408074 	movhi	r5,513
 200584c:	297a6904 	addi	r5,r5,-5724
 2005850:	01000504 	movi	r4,20
 2005854:	200b6400 	call	200b640 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2005858:	0001883a 	nop
 200585c:	e037883a 	mov	sp,fp
 2005860:	dfc00117 	ldw	ra,4(sp)
 2005864:	df000017 	ldw	fp,0(sp)
 2005868:	dec00204 	addi	sp,sp,8
 200586c:	f800283a 	ret

02005870 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2005870:	defff804 	addi	sp,sp,-32
 2005874:	dfc00715 	stw	ra,28(sp)
 2005878:	df000615 	stw	fp,24(sp)
 200587c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2005880:	008000c4 	movi	r2,3
 2005884:	d8800415 	stw	r2,16(sp)
 2005888:	d8000315 	stw	zero,12(sp)
 200588c:	00808004 	movi	r2,512
 2005890:	d8800215 	stw	r2,8(sp)
 2005894:	008080b4 	movhi	r2,514
 2005898:	10a40e04 	addi	r2,r2,-28616
 200589c:	d8800115 	stw	r2,4(sp)
 20058a0:	00bfff94 	movui	r2,65534
 20058a4:	d8800015 	stw	r2,0(sp)
 20058a8:	01c004c4 	movi	r7,19
 20058ac:	018080b4 	movhi	r6,514
 20058b0:	31a60d04 	addi	r6,r6,-26572
 20058b4:	000b883a 	mov	r5,zero
 20058b8:	01008034 	movhi	r4,512
 20058bc:	21173e04 	addi	r4,r4,23800
 20058c0:	200ae300 	call	200ae30 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20058c4:	e1bfff04 	addi	r6,fp,-4
 20058c8:	01408074 	movhi	r5,513
 20058cc:	297a6d04 	addi	r5,r5,-5708
 20058d0:	010004c4 	movi	r4,19
 20058d4:	200b6400 	call	200b640 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20058d8:	0001883a 	nop
 20058dc:	e037883a 	mov	sp,fp
 20058e0:	dfc00117 	ldw	ra,4(sp)
 20058e4:	df000017 	ldw	fp,0(sp)
 20058e8:	dec00204 	addi	sp,sp,8
 20058ec:	f800283a 	ret

020058f0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20058f0:	defffb04 	addi	sp,sp,-20
 20058f4:	dfc00415 	stw	ra,16(sp)
 20058f8:	df000315 	stw	fp,12(sp)
 20058fc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2005900:	01414404 	movi	r5,1296
 2005904:	010080b4 	movhi	r4,514
 2005908:	212b5604 	addi	r4,r4,-21160
 200590c:	20059d40 	call	20059d4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2005910:	01401504 	movi	r5,84
 2005914:	010080b4 	movhi	r4,514
 2005918:	212c9a04 	addi	r4,r4,-19864
 200591c:	20059d40 	call	20059d4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2005920:	008080b4 	movhi	r2,514
 2005924:	10ab5604 	addi	r2,r2,-21160
 2005928:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 200592c:	008080b4 	movhi	r2,514
 2005930:	10ab7104 	addi	r2,r2,-21052
 2005934:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2005938:	e03ffd05 	stb	zero,-12(fp)
 200593c:	00001106 	br	2005984 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2005940:	e0bffe17 	ldw	r2,-8(fp)
 2005944:	e0ffff17 	ldw	r3,-4(fp)
 2005948:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 200594c:	e0bffe17 	ldw	r2,-8(fp)
 2005950:	00c00fc4 	movi	r3,63
 2005954:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2005958:	e0bffe17 	ldw	r2,-8(fp)
 200595c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2005960:	e0bffe17 	ldw	r2,-8(fp)
 2005964:	10801b04 	addi	r2,r2,108
 2005968:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 200596c:	e0bfff17 	ldw	r2,-4(fp)
 2005970:	10801b04 	addi	r2,r2,108
 2005974:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2005978:	e0bffd03 	ldbu	r2,-12(fp)
 200597c:	10800044 	addi	r2,r2,1
 2005980:	e0bffd05 	stb	r2,-12(fp)
 2005984:	e0bffd03 	ldbu	r2,-12(fp)
 2005988:	108002f0 	cmpltui	r2,r2,11
 200598c:	103fec1e 	bne	r2,zero,2005940 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2005990:	e0bffe17 	ldw	r2,-8(fp)
 2005994:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2005998:	e0bffe17 	ldw	r2,-8(fp)
 200599c:	00c00fc4 	movi	r3,63
 20059a0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20059a4:	e0bffe17 	ldw	r2,-8(fp)
 20059a8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 20059ac:	d0270115 	stw	zero,-25596(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 20059b0:	008080b4 	movhi	r2,514
 20059b4:	10ab5604 	addi	r2,r2,-21160
 20059b8:	d0a70515 	stw	r2,-25580(gp)
}
 20059bc:	0001883a 	nop
 20059c0:	e037883a 	mov	sp,fp
 20059c4:	dfc00117 	ldw	ra,4(sp)
 20059c8:	df000017 	ldw	fp,0(sp)
 20059cc:	dec00204 	addi	sp,sp,8
 20059d0:	f800283a 	ret

020059d4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20059d4:	defffd04 	addi	sp,sp,-12
 20059d8:	df000215 	stw	fp,8(sp)
 20059dc:	df000204 	addi	fp,sp,8
 20059e0:	e13ffe15 	stw	r4,-8(fp)
 20059e4:	2805883a 	mov	r2,r5
 20059e8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20059ec:	00000706 	br	2005a0c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20059f0:	e0bffe17 	ldw	r2,-8(fp)
 20059f4:	10c00044 	addi	r3,r2,1
 20059f8:	e0fffe15 	stw	r3,-8(fp)
 20059fc:	10000005 	stb	zero,0(r2)
        size--;
 2005a00:	e0bfff0b 	ldhu	r2,-4(fp)
 2005a04:	10bfffc4 	addi	r2,r2,-1
 2005a08:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2005a0c:	e0bfff0b 	ldhu	r2,-4(fp)
 2005a10:	103ff71e 	bne	r2,zero,20059f0 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2005a14:	0001883a 	nop
 2005a18:	e037883a 	mov	sp,fp
 2005a1c:	df000017 	ldw	fp,0(sp)
 2005a20:	dec00104 	addi	sp,sp,4
 2005a24:	f800283a 	ret

02005a28 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2005a28:	defffc04 	addi	sp,sp,-16
 2005a2c:	df000315 	stw	fp,12(sp)
 2005a30:	df000304 	addi	fp,sp,12
 2005a34:	e13ffd15 	stw	r4,-12(fp)
 2005a38:	e17ffe15 	stw	r5,-8(fp)
 2005a3c:	3005883a 	mov	r2,r6
 2005a40:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2005a44:	00000b06 	br	2005a74 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2005a48:	e0bffd17 	ldw	r2,-12(fp)
 2005a4c:	10c00044 	addi	r3,r2,1
 2005a50:	e0fffd15 	stw	r3,-12(fp)
 2005a54:	e0fffe17 	ldw	r3,-8(fp)
 2005a58:	19000044 	addi	r4,r3,1
 2005a5c:	e13ffe15 	stw	r4,-8(fp)
 2005a60:	18c00003 	ldbu	r3,0(r3)
 2005a64:	10c00005 	stb	r3,0(r2)
        size--;
 2005a68:	e0bfff0b 	ldhu	r2,-4(fp)
 2005a6c:	10bfffc4 	addi	r2,r2,-1
 2005a70:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2005a74:	e0bfff0b 	ldhu	r2,-4(fp)
 2005a78:	103ff31e 	bne	r2,zero,2005a48 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2005a7c:	0001883a 	nop
 2005a80:	e037883a 	mov	sp,fp
 2005a84:	df000017 	ldw	fp,0(sp)
 2005a88:	dec00104 	addi	sp,sp,4
 2005a8c:	f800283a 	ret

02005a90 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2005a90:	defffb04 	addi	sp,sp,-20
 2005a94:	dfc00415 	stw	ra,16(sp)
 2005a98:	df000315 	stw	fp,12(sp)
 2005a9c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2005aa0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005aa4:	0005303a 	rdctl	r2,status
 2005aa8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005aac:	e0ffff17 	ldw	r3,-4(fp)
 2005ab0:	00bfff84 	movi	r2,-2
 2005ab4:	1884703a 	and	r2,r3,r2
 2005ab8:	1001703a 	wrctl	status,r2
  
  return context;
 2005abc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 2005ac0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2005ac4:	d0a70c03 	ldbu	r2,-25552(gp)
 2005ac8:	10803fcc 	andi	r2,r2,255
 2005acc:	10001a1e 	bne	r2,zero,2005b38 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2005ad0:	d0a6fe03 	ldbu	r2,-25608(gp)
 2005ad4:	10803fcc 	andi	r2,r2,255
 2005ad8:	1000171e 	bne	r2,zero,2005b38 <OS_Sched+0xa8>
            OS_SchedNew();
 2005adc:	2005b600 	call	2005b60 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2005ae0:	d0e70003 	ldbu	r3,-25600(gp)
 2005ae4:	d0a70043 	ldbu	r2,-25599(gp)
 2005ae8:	18c03fcc 	andi	r3,r3,255
 2005aec:	10803fcc 	andi	r2,r2,255
 2005af0:	18801126 	beq	r3,r2,2005b38 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2005af4:	d0a70003 	ldbu	r2,-25600(gp)
 2005af8:	10c03fcc 	andi	r3,r2,255
 2005afc:	008080b4 	movhi	r2,514
 2005b00:	10ac9a04 	addi	r2,r2,-19864
 2005b04:	18c7883a 	add	r3,r3,r3
 2005b08:	18c7883a 	add	r3,r3,r3
 2005b0c:	10c5883a 	add	r2,r2,r3
 2005b10:	10800017 	ldw	r2,0(r2)
 2005b14:	d0a70815 	stw	r2,-25568(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2005b18:	d0a70817 	ldw	r2,-25568(gp)
 2005b1c:	10c00e17 	ldw	r3,56(r2)
 2005b20:	18c00044 	addi	r3,r3,1
 2005b24:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2005b28:	d0a70317 	ldw	r2,-25588(gp)
 2005b2c:	10800044 	addi	r2,r2,1
 2005b30:	d0a70315 	stw	r2,-25588(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2005b34:	200de580 	call	200de58 <OSCtxSw>
 2005b38:	e0bffd17 	ldw	r2,-12(fp)
 2005b3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005b40:	e0bffe17 	ldw	r2,-8(fp)
 2005b44:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2005b48:	0001883a 	nop
 2005b4c:	e037883a 	mov	sp,fp
 2005b50:	dfc00117 	ldw	ra,4(sp)
 2005b54:	df000017 	ldw	fp,0(sp)
 2005b58:	dec00204 	addi	sp,sp,8
 2005b5c:	f800283a 	ret

02005b60 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2005b60:	defffe04 	addi	sp,sp,-8
 2005b64:	df000115 	stw	fp,4(sp)
 2005b68:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2005b6c:	d0a70a03 	ldbu	r2,-25560(gp)
 2005b70:	10c03fcc 	andi	r3,r2,255
 2005b74:	00808074 	movhi	r2,513
 2005b78:	10ba2904 	addi	r2,r2,-5980
 2005b7c:	10c5883a 	add	r2,r2,r3
 2005b80:	10800003 	ldbu	r2,0(r2)
 2005b84:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2005b88:	e0bfff03 	ldbu	r2,-4(fp)
 2005b8c:	100490fa 	slli	r2,r2,3
 2005b90:	1009883a 	mov	r4,r2
 2005b94:	e0ffff03 	ldbu	r3,-4(fp)
 2005b98:	d0a70a44 	addi	r2,gp,-25559
 2005b9c:	1885883a 	add	r2,r3,r2
 2005ba0:	10800003 	ldbu	r2,0(r2)
 2005ba4:	10c03fcc 	andi	r3,r2,255
 2005ba8:	00808074 	movhi	r2,513
 2005bac:	10ba2904 	addi	r2,r2,-5980
 2005bb0:	10c5883a 	add	r2,r2,r3
 2005bb4:	10800003 	ldbu	r2,0(r2)
 2005bb8:	2085883a 	add	r2,r4,r2
 2005bbc:	d0a70005 	stb	r2,-25600(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2005bc0:	0001883a 	nop
 2005bc4:	e037883a 	mov	sp,fp
 2005bc8:	df000017 	ldw	fp,0(sp)
 2005bcc:	dec00104 	addi	sp,sp,4
 2005bd0:	f800283a 	ret

02005bd4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2005bd4:	defffc04 	addi	sp,sp,-16
 2005bd8:	df000315 	stw	fp,12(sp)
 2005bdc:	df000304 	addi	fp,sp,12
 2005be0:	e13ffe15 	stw	r4,-8(fp)
 2005be4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2005be8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2005bec:	00000b06 	br	2005c1c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 2005bf0:	e0bffe17 	ldw	r2,-8(fp)
 2005bf4:	10c00044 	addi	r3,r2,1
 2005bf8:	e0fffe15 	stw	r3,-8(fp)
 2005bfc:	e0ffff17 	ldw	r3,-4(fp)
 2005c00:	19000044 	addi	r4,r3,1
 2005c04:	e13fff15 	stw	r4,-4(fp)
 2005c08:	18c00003 	ldbu	r3,0(r3)
 2005c0c:	10c00005 	stb	r3,0(r2)
        len++;
 2005c10:	e0bffd03 	ldbu	r2,-12(fp)
 2005c14:	10800044 	addi	r2,r2,1
 2005c18:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2005c1c:	e0bfff17 	ldw	r2,-4(fp)
 2005c20:	10800003 	ldbu	r2,0(r2)
 2005c24:	10803fcc 	andi	r2,r2,255
 2005c28:	103ff11e 	bne	r2,zero,2005bf0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2005c2c:	e0bffe17 	ldw	r2,-8(fp)
 2005c30:	10000005 	stb	zero,0(r2)
    return (len);
 2005c34:	e0bffd03 	ldbu	r2,-12(fp)
}
 2005c38:	e037883a 	mov	sp,fp
 2005c3c:	df000017 	ldw	fp,0(sp)
 2005c40:	dec00104 	addi	sp,sp,4
 2005c44:	f800283a 	ret

02005c48 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2005c48:	defffd04 	addi	sp,sp,-12
 2005c4c:	df000215 	stw	fp,8(sp)
 2005c50:	df000204 	addi	fp,sp,8
 2005c54:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2005c58:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2005c5c:	00000606 	br	2005c78 <OS_StrLen+0x30>
        psrc++;
 2005c60:	e0bfff17 	ldw	r2,-4(fp)
 2005c64:	10800044 	addi	r2,r2,1
 2005c68:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2005c6c:	e0bffe03 	ldbu	r2,-8(fp)
 2005c70:	10800044 	addi	r2,r2,1
 2005c74:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2005c78:	e0bfff17 	ldw	r2,-4(fp)
 2005c7c:	10800003 	ldbu	r2,0(r2)
 2005c80:	10803fcc 	andi	r2,r2,255
 2005c84:	103ff61e 	bne	r2,zero,2005c60 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2005c88:	e0bffe03 	ldbu	r2,-8(fp)
}
 2005c8c:	e037883a 	mov	sp,fp
 2005c90:	df000017 	ldw	fp,0(sp)
 2005c94:	dec00104 	addi	sp,sp,4
 2005c98:	f800283a 	ret

02005c9c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2005c9c:	defffa04 	addi	sp,sp,-24
 2005ca0:	dfc00515 	stw	ra,20(sp)
 2005ca4:	df000415 	stw	fp,16(sp)
 2005ca8:	df000404 	addi	fp,sp,16
 2005cac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2005cb0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005cb4:	0005303a 	rdctl	r2,status
 2005cb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005cbc:	e0fffd17 	ldw	r3,-12(fp)
 2005cc0:	00bfff84 	movi	r2,-2
 2005cc4:	1884703a 	and	r2,r3,r2
 2005cc8:	1001703a 	wrctl	status,r2
  
  return context;
 2005ccc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2005cd0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2005cd4:	d0a6ff17 	ldw	r2,-25604(gp)
 2005cd8:	10800044 	addi	r2,r2,1
 2005cdc:	d0a6ff15 	stw	r2,-25604(gp)
 2005ce0:	e0bffc17 	ldw	r2,-16(fp)
 2005ce4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005ce8:	e0bffe17 	ldw	r2,-8(fp)
 2005cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2005cf0:	200e16c0 	call	200e16c <OSTaskIdleHook>
    }
 2005cf4:	003fef06 	br	2005cb4 <OS_TaskIdle+0x18>

02005cf8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2005cf8:	defffa04 	addi	sp,sp,-24
 2005cfc:	dfc00515 	stw	ra,20(sp)
 2005d00:	df000415 	stw	fp,16(sp)
 2005d04:	df000404 	addi	fp,sp,16
 2005d08:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2005d0c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2005d10:	00000206 	br	2005d1c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2005d14:	01003204 	movi	r4,200
 2005d18:	200bf000 	call	200bf00 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2005d1c:	d0a71003 	ldbu	r2,-25536(gp)
 2005d20:	10803fcc 	andi	r2,r2,255
 2005d24:	103ffb26 	beq	r2,zero,2005d14 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2005d28:	d0a70417 	ldw	r2,-25584(gp)
 2005d2c:	01401904 	movi	r5,100
 2005d30:	1009883a 	mov	r4,r2
 2005d34:	20033d00 	call	20033d0 <__udivsi3>
 2005d38:	d0a70415 	stw	r2,-25584(gp)
    if (OSIdleCtrMax == 0L) {
 2005d3c:	d0a70417 	ldw	r2,-25584(gp)
 2005d40:	1000031e 	bne	r2,zero,2005d50 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2005d44:	d0270605 	stb	zero,-25576(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2005d48:	01003fc4 	movi	r4,255
 2005d4c:	200bb880 	call	200bb88 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005d50:	0005303a 	rdctl	r2,status
 2005d54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005d58:	e0fffd17 	ldw	r3,-12(fp)
 2005d5c:	00bfff84 	movi	r2,-2
 2005d60:	1884703a 	and	r2,r3,r2
 2005d64:	1001703a 	wrctl	status,r2
  
  return context;
 2005d68:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2005d6c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2005d70:	d0a6ff17 	ldw	r2,-25604(gp)
 2005d74:	d0a71115 	stw	r2,-25532(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2005d78:	d026ff15 	stw	zero,-25604(gp)
 2005d7c:	e0bffc17 	ldw	r2,-16(fp)
 2005d80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005d84:	e0bffe17 	ldw	r2,-8(fp)
 2005d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2005d8c:	d0a71117 	ldw	r2,-25532(gp)
 2005d90:	d0e70417 	ldw	r3,-25584(gp)
 2005d94:	180b883a 	mov	r5,r3
 2005d98:	1009883a 	mov	r4,r2
 2005d9c:	20033d00 	call	20033d0 <__udivsi3>
 2005da0:	1007883a 	mov	r3,r2
 2005da4:	00801904 	movi	r2,100
 2005da8:	10c5c83a 	sub	r2,r2,r3
 2005dac:	d0a70605 	stb	r2,-25576(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2005db0:	200e0ec0 	call	200e0ec <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2005db4:	2005dc40 	call	2005dc4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2005db8:	01001904 	movi	r4,100
 2005dbc:	200bf000 	call	200bf00 <OSTimeDly>
    }
 2005dc0:	003fe306 	br	2005d50 <OS_TaskStat+0x58>

02005dc4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2005dc4:	defffa04 	addi	sp,sp,-24
 2005dc8:	dfc00515 	stw	ra,20(sp)
 2005dcc:	df000415 	stw	fp,16(sp)
 2005dd0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2005dd4:	e03ffc05 	stb	zero,-16(fp)
 2005dd8:	00002406 	br	2005e6c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2005ddc:	e0bffc03 	ldbu	r2,-16(fp)
 2005de0:	e0fffe04 	addi	r3,fp,-8
 2005de4:	180b883a 	mov	r5,r3
 2005de8:	1009883a 	mov	r4,r2
 2005dec:	200b9c80 	call	200b9c8 <OSTaskStkChk>
 2005df0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2005df4:	e0bffc43 	ldbu	r2,-15(fp)
 2005df8:	1000191e 	bne	r2,zero,2005e60 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2005dfc:	e0fffc03 	ldbu	r3,-16(fp)
 2005e00:	008080b4 	movhi	r2,514
 2005e04:	10ac9a04 	addi	r2,r2,-19864
 2005e08:	18c7883a 	add	r3,r3,r3
 2005e0c:	18c7883a 	add	r3,r3,r3
 2005e10:	10c5883a 	add	r2,r2,r3
 2005e14:	10800017 	ldw	r2,0(r2)
 2005e18:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2005e1c:	e0bffd17 	ldw	r2,-12(fp)
 2005e20:	10000f26 	beq	r2,zero,2005e60 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2005e24:	e0bffd17 	ldw	r2,-12(fp)
 2005e28:	10800060 	cmpeqi	r2,r2,1
 2005e2c:	10000c1e 	bne	r2,zero,2005e60 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2005e30:	e0bffd17 	ldw	r2,-12(fp)
 2005e34:	10c00217 	ldw	r3,8(r2)
 2005e38:	e0bffd17 	ldw	r2,-12(fp)
 2005e3c:	10800317 	ldw	r2,12(r2)
 2005e40:	1085883a 	add	r2,r2,r2
 2005e44:	1085883a 	add	r2,r2,r2
 2005e48:	1887883a 	add	r3,r3,r2
 2005e4c:	e0bffd17 	ldw	r2,-12(fp)
 2005e50:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2005e54:	e0ffff17 	ldw	r3,-4(fp)
 2005e58:	e0bffd17 	ldw	r2,-12(fp)
 2005e5c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2005e60:	e0bffc03 	ldbu	r2,-16(fp)
 2005e64:	10800044 	addi	r2,r2,1
 2005e68:	e0bffc05 	stb	r2,-16(fp)
 2005e6c:	e0bffc03 	ldbu	r2,-16(fp)
 2005e70:	10800570 	cmpltui	r2,r2,21
 2005e74:	103fd91e 	bne	r2,zero,2005ddc <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2005e78:	0001883a 	nop
 2005e7c:	e037883a 	mov	sp,fp
 2005e80:	dfc00117 	ldw	ra,4(sp)
 2005e84:	df000017 	ldw	fp,0(sp)
 2005e88:	dec00204 	addi	sp,sp,8
 2005e8c:	f800283a 	ret

02005e90 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2005e90:	defff204 	addi	sp,sp,-56
 2005e94:	dfc00d15 	stw	ra,52(sp)
 2005e98:	df000c15 	stw	fp,48(sp)
 2005e9c:	df000c04 	addi	fp,sp,48
 2005ea0:	e17ffc15 	stw	r5,-16(fp)
 2005ea4:	e1bffd15 	stw	r6,-12(fp)
 2005ea8:	3807883a 	mov	r3,r7
 2005eac:	e0800417 	ldw	r2,16(fp)
 2005eb0:	e13ffb05 	stb	r4,-20(fp)
 2005eb4:	e0fffe0d 	sth	r3,-8(fp)
 2005eb8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2005ebc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005ec0:	0005303a 	rdctl	r2,status
 2005ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005ec8:	e0fffa17 	ldw	r3,-24(fp)
 2005ecc:	00bfff84 	movi	r2,-2
 2005ed0:	1884703a 	and	r2,r3,r2
 2005ed4:	1001703a 	wrctl	status,r2
  
  return context;
 2005ed8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2005edc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2005ee0:	d0a70517 	ldw	r2,-25580(gp)
 2005ee4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2005ee8:	e0bff617 	ldw	r2,-40(fp)
 2005eec:	10009326 	beq	r2,zero,200613c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2005ef0:	e0bff617 	ldw	r2,-40(fp)
 2005ef4:	10800517 	ldw	r2,20(r2)
 2005ef8:	d0a70515 	stw	r2,-25580(gp)
 2005efc:	e0bff417 	ldw	r2,-48(fp)
 2005f00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005f04:	e0bff817 	ldw	r2,-32(fp)
 2005f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2005f0c:	e0bff617 	ldw	r2,-40(fp)
 2005f10:	e0fffc17 	ldw	r3,-16(fp)
 2005f14:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2005f18:	e0bff617 	ldw	r2,-40(fp)
 2005f1c:	e0fffb03 	ldbu	r3,-20(fp)
 2005f20:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2005f24:	e0bff617 	ldw	r2,-40(fp)
 2005f28:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2005f2c:	e0bff617 	ldw	r2,-40(fp)
 2005f30:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2005f34:	e0bff617 	ldw	r2,-40(fp)
 2005f38:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2005f3c:	e0bff617 	ldw	r2,-40(fp)
 2005f40:	e0c00317 	ldw	r3,12(fp)
 2005f44:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2005f48:	e0bff617 	ldw	r2,-40(fp)
 2005f4c:	e0c00217 	ldw	r3,8(fp)
 2005f50:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2005f54:	e0bff617 	ldw	r2,-40(fp)
 2005f58:	e0fffd17 	ldw	r3,-12(fp)
 2005f5c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2005f60:	e0bff617 	ldw	r2,-40(fp)
 2005f64:	e0ffff0b 	ldhu	r3,-4(fp)
 2005f68:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2005f6c:	e0bff617 	ldw	r2,-40(fp)
 2005f70:	e0fffe0b 	ldhu	r3,-8(fp)
 2005f74:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2005f78:	e0bff617 	ldw	r2,-40(fp)
 2005f7c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2005f80:	e0bffb03 	ldbu	r2,-20(fp)
 2005f84:	1004d0fa 	srli	r2,r2,3
 2005f88:	1007883a 	mov	r3,r2
 2005f8c:	e0bff617 	ldw	r2,-40(fp)
 2005f90:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2005f94:	e0bffb03 	ldbu	r2,-20(fp)
 2005f98:	108001cc 	andi	r2,r2,7
 2005f9c:	1007883a 	mov	r3,r2
 2005fa0:	e0bff617 	ldw	r2,-40(fp)
 2005fa4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2005fa8:	e0bff617 	ldw	r2,-40(fp)
 2005fac:	10800d03 	ldbu	r2,52(r2)
 2005fb0:	10803fcc 	andi	r2,r2,255
 2005fb4:	00c00044 	movi	r3,1
 2005fb8:	1884983a 	sll	r2,r3,r2
 2005fbc:	1007883a 	mov	r3,r2
 2005fc0:	e0bff617 	ldw	r2,-40(fp)
 2005fc4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2005fc8:	e0bff617 	ldw	r2,-40(fp)
 2005fcc:	10800cc3 	ldbu	r2,51(r2)
 2005fd0:	10803fcc 	andi	r2,r2,255
 2005fd4:	00c00044 	movi	r3,1
 2005fd8:	1884983a 	sll	r2,r3,r2
 2005fdc:	1007883a 	mov	r3,r2
 2005fe0:	e0bff617 	ldw	r2,-40(fp)
 2005fe4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2005fe8:	e0bff617 	ldw	r2,-40(fp)
 2005fec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2005ff0:	e0bff617 	ldw	r2,-40(fp)
 2005ff4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2005ff8:	e0bff617 	ldw	r2,-40(fp)
 2005ffc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2006000:	e0bff617 	ldw	r2,-40(fp)
 2006004:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2006008:	e0bff617 	ldw	r2,-40(fp)
 200600c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2006010:	e0bff617 	ldw	r2,-40(fp)
 2006014:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2006018:	e0bff617 	ldw	r2,-40(fp)
 200601c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2006020:	e0bff617 	ldw	r2,-40(fp)
 2006024:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2006028:	e0bff617 	ldw	r2,-40(fp)
 200602c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2006030:	e0bff617 	ldw	r2,-40(fp)
 2006034:	00c00fc4 	movi	r3,63
 2006038:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 200603c:	e0bff617 	ldw	r2,-40(fp)
 2006040:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2006044:	e13ff617 	ldw	r4,-40(fp)
 2006048:	200e18c0 	call	200e18c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 200604c:	e13ff617 	ldw	r4,-40(fp)
 2006050:	200e0840 	call	200e084 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006054:	0005303a 	rdctl	r2,status
 2006058:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200605c:	e0fff517 	ldw	r3,-44(fp)
 2006060:	00bfff84 	movi	r2,-2
 2006064:	1884703a 	and	r2,r3,r2
 2006068:	1001703a 	wrctl	status,r2
  
  return context;
 200606c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2006070:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2006074:	e0fffb03 	ldbu	r3,-20(fp)
 2006078:	008080b4 	movhi	r2,514
 200607c:	10ac9a04 	addi	r2,r2,-19864
 2006080:	18c7883a 	add	r3,r3,r3
 2006084:	18c7883a 	add	r3,r3,r3
 2006088:	10c5883a 	add	r2,r2,r3
 200608c:	e0fff617 	ldw	r3,-40(fp)
 2006090:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2006094:	d0e70117 	ldw	r3,-25596(gp)
 2006098:	e0bff617 	ldw	r2,-40(fp)
 200609c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 20060a0:	e0bff617 	ldw	r2,-40(fp)
 20060a4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 20060a8:	d0a70117 	ldw	r2,-25596(gp)
 20060ac:	10000326 	beq	r2,zero,20060bc <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 20060b0:	d0a70117 	ldw	r2,-25596(gp)
 20060b4:	e0fff617 	ldw	r3,-40(fp)
 20060b8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 20060bc:	e0bff617 	ldw	r2,-40(fp)
 20060c0:	d0a70115 	stw	r2,-25596(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 20060c4:	e0bff617 	ldw	r2,-40(fp)
 20060c8:	10c00d83 	ldbu	r3,54(r2)
 20060cc:	d0a70a03 	ldbu	r2,-25560(gp)
 20060d0:	1884b03a 	or	r2,r3,r2
 20060d4:	d0a70a05 	stb	r2,-25560(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20060d8:	e0bff617 	ldw	r2,-40(fp)
 20060dc:	10800d03 	ldbu	r2,52(r2)
 20060e0:	10c03fcc 	andi	r3,r2,255
 20060e4:	e0bff617 	ldw	r2,-40(fp)
 20060e8:	10800d03 	ldbu	r2,52(r2)
 20060ec:	11003fcc 	andi	r4,r2,255
 20060f0:	d0a70a44 	addi	r2,gp,-25559
 20060f4:	2085883a 	add	r2,r4,r2
 20060f8:	11000003 	ldbu	r4,0(r2)
 20060fc:	e0bff617 	ldw	r2,-40(fp)
 2006100:	10800d43 	ldbu	r2,53(r2)
 2006104:	2084b03a 	or	r2,r4,r2
 2006108:	1009883a 	mov	r4,r2
 200610c:	d0a70a44 	addi	r2,gp,-25559
 2006110:	1885883a 	add	r2,r3,r2
 2006114:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2006118:	d0a70643 	ldbu	r2,-25575(gp)
 200611c:	10800044 	addi	r2,r2,1
 2006120:	d0a70645 	stb	r2,-25575(gp)
 2006124:	e0bff417 	ldw	r2,-48(fp)
 2006128:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200612c:	e0bff717 	ldw	r2,-36(fp)
 2006130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2006134:	0005883a 	mov	r2,zero
 2006138:	00000506 	br	2006150 <OS_TCBInit+0x2c0>
 200613c:	e0bff417 	ldw	r2,-48(fp)
 2006140:	e0bff915 	stw	r2,-28(fp)
 2006144:	e0bff917 	ldw	r2,-28(fp)
 2006148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 200614c:	00801084 	movi	r2,66
}
 2006150:	e037883a 	mov	sp,fp
 2006154:	dfc00117 	ldw	ra,4(sp)
 2006158:	df000017 	ldw	fp,0(sp)
 200615c:	dec00204 	addi	sp,sp,8
 2006160:	f800283a 	ret

02006164 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2006164:	defffe04 	addi	sp,sp,-8
 2006168:	df000115 	stw	fp,4(sp)
 200616c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2006170:	d0a00d04 	addi	r2,gp,-32716
 2006174:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2006178:	d0a00e04 	addi	r2,gp,-32712
 200617c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2006180:	d0a00f84 	addi	r2,gp,-32706
 2006184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2006188:	d0a01004 	addi	r2,gp,-32704
 200618c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2006190:	d0a00f04 	addi	r2,gp,-32708
 2006194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2006198:	d0a01084 	addi	r2,gp,-32702
 200619c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 20061a0:	d0a01104 	addi	r2,gp,-32700
 20061a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 20061a8:	d0a01184 	addi	r2,gp,-32698
 20061ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 20061b0:	d0a01204 	addi	r2,gp,-32696
 20061b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 20061b8:	d0a01284 	addi	r2,gp,-32694
 20061bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 20061c0:	d0a01304 	addi	r2,gp,-32692
 20061c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20061c8:	d0a01384 	addi	r2,gp,-32690
 20061cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20061d0:	d0a01404 	addi	r2,gp,-32688
 20061d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20061d8:	d0a01484 	addi	r2,gp,-32686
 20061dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20061e0:	d0a01504 	addi	r2,gp,-32684
 20061e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20061e8:	d0a01584 	addi	r2,gp,-32682
 20061ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20061f0:	d0a01604 	addi	r2,gp,-32680
 20061f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20061f8:	d0a01684 	addi	r2,gp,-32678
 20061fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2006200:	d0a01704 	addi	r2,gp,-32676
 2006204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2006208:	d0a01784 	addi	r2,gp,-32674
 200620c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2006210:	d0a01804 	addi	r2,gp,-32672
 2006214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2006218:	d0a01884 	addi	r2,gp,-32670
 200621c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2006220:	d0a01904 	addi	r2,gp,-32668
 2006224:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2006228:	d0a01984 	addi	r2,gp,-32666
 200622c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2006230:	d0a01a04 	addi	r2,gp,-32664
 2006234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2006238:	d0a01a84 	addi	r2,gp,-32662
 200623c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2006240:	d0a01b04 	addi	r2,gp,-32660
 2006244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2006248:	d0a01b84 	addi	r2,gp,-32658
 200624c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2006250:	d0a01c04 	addi	r2,gp,-32656
 2006254:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2006258:	d0a01c84 	addi	r2,gp,-32654
 200625c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2006260:	d0a01d04 	addi	r2,gp,-32652
 2006264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2006268:	d0a01d84 	addi	r2,gp,-32650
 200626c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2006270:	d0a01e04 	addi	r2,gp,-32648
 2006274:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2006278:	d0a01e84 	addi	r2,gp,-32646
 200627c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2006280:	d0a01f04 	addi	r2,gp,-32644
 2006284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2006288:	d0a01f84 	addi	r2,gp,-32642
 200628c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2006290:	d0a02004 	addi	r2,gp,-32640
 2006294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2006298:	d0a02084 	addi	r2,gp,-32638
 200629c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 20062a0:	d0a02104 	addi	r2,gp,-32636
 20062a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 20062a8:	d0a02184 	addi	r2,gp,-32634
 20062ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20062b0:	d0a02204 	addi	r2,gp,-32632
 20062b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20062b8:	d0a02284 	addi	r2,gp,-32630
 20062bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20062c0:	d0a02304 	addi	r2,gp,-32628
 20062c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20062c8:	d0a02384 	addi	r2,gp,-32626
 20062cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20062d0:	d0a02404 	addi	r2,gp,-32624
 20062d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20062d8:	d0a02904 	addi	r2,gp,-32604
 20062dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20062e0:	0001883a 	nop
 20062e4:	e037883a 	mov	sp,fp
 20062e8:	df000017 	ldw	fp,0(sp)
 20062ec:	dec00104 	addi	sp,sp,4
 20062f0:	f800283a 	ret

020062f4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20062f4:	defff204 	addi	sp,sp,-56
 20062f8:	df000d15 	stw	fp,52(sp)
 20062fc:	df000d04 	addi	fp,sp,52
 2006300:	e13ffc15 	stw	r4,-16(fp)
 2006304:	2807883a 	mov	r3,r5
 2006308:	3005883a 	mov	r2,r6
 200630c:	e1ffff15 	stw	r7,-4(fp)
 2006310:	e0fffd0d 	sth	r3,-12(fp)
 2006314:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2006318:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 200631c:	e0bfff17 	ldw	r2,-4(fp)
 2006320:	1000021e 	bne	r2,zero,200632c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2006324:	0005883a 	mov	r2,zero
 2006328:	0000b006 	br	20065ec <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 200632c:	e0bffc17 	ldw	r2,-16(fp)
 2006330:	1000051e 	bne	r2,zero,2006348 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006334:	e0bfff17 	ldw	r2,-4(fp)
 2006338:	00c01b84 	movi	r3,110
 200633c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006340:	0005883a 	mov	r2,zero
 2006344:	0000a906 	br	20065ec <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2006348:	e0bffc17 	ldw	r2,-16(fp)
 200634c:	10800003 	ldbu	r2,0(r2)
 2006350:	10803fcc 	andi	r2,r2,255
 2006354:	10800160 	cmpeqi	r2,r2,5
 2006358:	1000051e 	bne	r2,zero,2006370 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 200635c:	e0bfff17 	ldw	r2,-4(fp)
 2006360:	00c00044 	movi	r3,1
 2006364:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006368:	0005883a 	mov	r2,zero
 200636c:	00009f06 	br	20065ec <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2006370:	e0fffe03 	ldbu	r3,-8(fp)
 2006374:	00bfe004 	movi	r2,-128
 2006378:	1884703a 	and	r2,r3,r2
 200637c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2006380:	e0bff503 	ldbu	r2,-44(fp)
 2006384:	10000626 	beq	r2,zero,20063a0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2006388:	e0bffe03 	ldbu	r2,-8(fp)
 200638c:	10801fcc 	andi	r2,r2,127
 2006390:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2006394:	00800044 	movi	r2,1
 2006398:	e0bff385 	stb	r2,-50(fp)
 200639c:	00000106 	br	20063a4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 20063a0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 20063a4:	e0bfff17 	ldw	r2,-4(fp)
 20063a8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20063ac:	0005303a 	rdctl	r2,status
 20063b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20063b4:	e0fffb17 	ldw	r3,-20(fp)
 20063b8:	00bfff84 	movi	r2,-2
 20063bc:	1884703a 	and	r2,r3,r2
 20063c0:	1001703a 	wrctl	status,r2
  
  return context;
 20063c4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 20063c8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20063cc:	e0bffe03 	ldbu	r2,-8(fp)
 20063d0:	10c00060 	cmpeqi	r3,r2,1
 20063d4:	18005f1e 	bne	r3,zero,2006554 <OSFlagAccept+0x260>
 20063d8:	10c00088 	cmpgei	r3,r2,2
 20063dc:	1800021e 	bne	r3,zero,20063e8 <OSFlagAccept+0xf4>
 20063e0:	10003f26 	beq	r2,zero,20064e0 <OSFlagAccept+0x1ec>
 20063e4:	00007706 	br	20065c4 <OSFlagAccept+0x2d0>
 20063e8:	10c000a0 	cmpeqi	r3,r2,2
 20063ec:	1800031e 	bne	r3,zero,20063fc <OSFlagAccept+0x108>
 20063f0:	108000e0 	cmpeqi	r2,r2,3
 20063f4:	10001e1e 	bne	r2,zero,2006470 <OSFlagAccept+0x17c>
 20063f8:	00007206 	br	20065c4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20063fc:	e0bffc17 	ldw	r2,-16(fp)
 2006400:	10c0020b 	ldhu	r3,8(r2)
 2006404:	e0bffd0b 	ldhu	r2,-12(fp)
 2006408:	1884703a 	and	r2,r3,r2
 200640c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2006410:	e0fff30b 	ldhu	r3,-52(fp)
 2006414:	e0bffd0b 	ldhu	r2,-12(fp)
 2006418:	18800d1e 	bne	r3,r2,2006450 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 200641c:	e0bff383 	ldbu	r2,-50(fp)
 2006420:	10800058 	cmpnei	r2,r2,1
 2006424:	10000d1e 	bne	r2,zero,200645c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2006428:	e0bffc17 	ldw	r2,-16(fp)
 200642c:	1080020b 	ldhu	r2,8(r2)
 2006430:	1007883a 	mov	r3,r2
 2006434:	e0bff30b 	ldhu	r2,-52(fp)
 2006438:	0084303a 	nor	r2,zero,r2
 200643c:	1884703a 	and	r2,r3,r2
 2006440:	1007883a 	mov	r3,r2
 2006444:	e0bffc17 	ldw	r2,-16(fp)
 2006448:	10c0020d 	sth	r3,8(r2)
 200644c:	00000306 	br	200645c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2006450:	e0bfff17 	ldw	r2,-4(fp)
 2006454:	00c01c04 	movi	r3,112
 2006458:	10c00005 	stb	r3,0(r2)
 200645c:	e0bff417 	ldw	r2,-48(fp)
 2006460:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006464:	e0bff617 	ldw	r2,-40(fp)
 2006468:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 200646c:	00005e06 	br	20065e8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2006470:	e0bffc17 	ldw	r2,-16(fp)
 2006474:	10c0020b 	ldhu	r3,8(r2)
 2006478:	e0bffd0b 	ldhu	r2,-12(fp)
 200647c:	1884703a 	and	r2,r3,r2
 2006480:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2006484:	e0bff30b 	ldhu	r2,-52(fp)
 2006488:	10000d26 	beq	r2,zero,20064c0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 200648c:	e0bff383 	ldbu	r2,-50(fp)
 2006490:	10800058 	cmpnei	r2,r2,1
 2006494:	10000d1e 	bne	r2,zero,20064cc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2006498:	e0bffc17 	ldw	r2,-16(fp)
 200649c:	1080020b 	ldhu	r2,8(r2)
 20064a0:	1007883a 	mov	r3,r2
 20064a4:	e0bff30b 	ldhu	r2,-52(fp)
 20064a8:	0084303a 	nor	r2,zero,r2
 20064ac:	1884703a 	and	r2,r3,r2
 20064b0:	1007883a 	mov	r3,r2
 20064b4:	e0bffc17 	ldw	r2,-16(fp)
 20064b8:	10c0020d 	sth	r3,8(r2)
 20064bc:	00000306 	br	20064cc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20064c0:	e0bfff17 	ldw	r2,-4(fp)
 20064c4:	00c01c04 	movi	r3,112
 20064c8:	10c00005 	stb	r3,0(r2)
 20064cc:	e0bff417 	ldw	r2,-48(fp)
 20064d0:	e0bff715 	stw	r2,-36(fp)
 20064d4:	e0bff717 	ldw	r2,-36(fp)
 20064d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20064dc:	00004206 	br	20065e8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20064e0:	e0bffc17 	ldw	r2,-16(fp)
 20064e4:	1080020b 	ldhu	r2,8(r2)
 20064e8:	0084303a 	nor	r2,zero,r2
 20064ec:	1007883a 	mov	r3,r2
 20064f0:	e0bffd0b 	ldhu	r2,-12(fp)
 20064f4:	1884703a 	and	r2,r3,r2
 20064f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20064fc:	e0fff30b 	ldhu	r3,-52(fp)
 2006500:	e0bffd0b 	ldhu	r2,-12(fp)
 2006504:	18800b1e 	bne	r3,r2,2006534 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006508:	e0bff383 	ldbu	r2,-50(fp)
 200650c:	10800058 	cmpnei	r2,r2,1
 2006510:	10000b1e 	bne	r2,zero,2006540 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2006514:	e0bffc17 	ldw	r2,-16(fp)
 2006518:	10c0020b 	ldhu	r3,8(r2)
 200651c:	e0bff30b 	ldhu	r2,-52(fp)
 2006520:	1884b03a 	or	r2,r3,r2
 2006524:	1007883a 	mov	r3,r2
 2006528:	e0bffc17 	ldw	r2,-16(fp)
 200652c:	10c0020d 	sth	r3,8(r2)
 2006530:	00000306 	br	2006540 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2006534:	e0bfff17 	ldw	r2,-4(fp)
 2006538:	00c01c04 	movi	r3,112
 200653c:	10c00005 	stb	r3,0(r2)
 2006540:	e0bff417 	ldw	r2,-48(fp)
 2006544:	e0bff815 	stw	r2,-32(fp)
 2006548:	e0bff817 	ldw	r2,-32(fp)
 200654c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2006550:	00002506 	br	20065e8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2006554:	e0bffc17 	ldw	r2,-16(fp)
 2006558:	1080020b 	ldhu	r2,8(r2)
 200655c:	0084303a 	nor	r2,zero,r2
 2006560:	1007883a 	mov	r3,r2
 2006564:	e0bffd0b 	ldhu	r2,-12(fp)
 2006568:	1884703a 	and	r2,r3,r2
 200656c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2006570:	e0bff30b 	ldhu	r2,-52(fp)
 2006574:	10000b26 	beq	r2,zero,20065a4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006578:	e0bff383 	ldbu	r2,-50(fp)
 200657c:	10800058 	cmpnei	r2,r2,1
 2006580:	10000b1e 	bne	r2,zero,20065b0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2006584:	e0bffc17 	ldw	r2,-16(fp)
 2006588:	10c0020b 	ldhu	r3,8(r2)
 200658c:	e0bff30b 	ldhu	r2,-52(fp)
 2006590:	1884b03a 	or	r2,r3,r2
 2006594:	1007883a 	mov	r3,r2
 2006598:	e0bffc17 	ldw	r2,-16(fp)
 200659c:	10c0020d 	sth	r3,8(r2)
 20065a0:	00000306 	br	20065b0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20065a4:	e0bfff17 	ldw	r2,-4(fp)
 20065a8:	00c01c04 	movi	r3,112
 20065ac:	10c00005 	stb	r3,0(r2)
 20065b0:	e0bff417 	ldw	r2,-48(fp)
 20065b4:	e0bff915 	stw	r2,-28(fp)
 20065b8:	e0bff917 	ldw	r2,-28(fp)
 20065bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20065c0:	00000906 	br	20065e8 <OSFlagAccept+0x2f4>
 20065c4:	e0bff417 	ldw	r2,-48(fp)
 20065c8:	e0bffa15 	stw	r2,-24(fp)
 20065cc:	e0bffa17 	ldw	r2,-24(fp)
 20065d0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20065d4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20065d8:	e0bfff17 	ldw	r2,-4(fp)
 20065dc:	00c01bc4 	movi	r3,111
 20065e0:	10c00005 	stb	r3,0(r2)
             break;
 20065e4:	0001883a 	nop
    }
    return (flags_rdy);
 20065e8:	e0bff30b 	ldhu	r2,-52(fp)
}
 20065ec:	e037883a 	mov	sp,fp
 20065f0:	df000017 	ldw	fp,0(sp)
 20065f4:	dec00104 	addi	sp,sp,4
 20065f8:	f800283a 	ret

020065fc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20065fc:	defff804 	addi	sp,sp,-32
 2006600:	df000715 	stw	fp,28(sp)
 2006604:	df000704 	addi	fp,sp,28
 2006608:	2005883a 	mov	r2,r4
 200660c:	e17fff15 	stw	r5,-4(fp)
 2006610:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2006614:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2006618:	e0bfff17 	ldw	r2,-4(fp)
 200661c:	1000021e 	bne	r2,zero,2006628 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2006620:	0005883a 	mov	r2,zero
 2006624:	00003306 	br	20066f4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2006628:	d0a70c03 	ldbu	r2,-25552(gp)
 200662c:	10803fcc 	andi	r2,r2,255
 2006630:	10000526 	beq	r2,zero,2006648 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2006634:	e0bfff17 	ldw	r2,-4(fp)
 2006638:	00c00404 	movi	r3,16
 200663c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2006640:	0005883a 	mov	r2,zero
 2006644:	00002b06 	br	20066f4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006648:	0005303a 	rdctl	r2,status
 200664c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006650:	e0fffd17 	ldw	r3,-12(fp)
 2006654:	00bfff84 	movi	r2,-2
 2006658:	1884703a 	and	r2,r3,r2
 200665c:	1001703a 	wrctl	status,r2
  
  return context;
 2006660:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2006664:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2006668:	d0a70f17 	ldw	r2,-25540(gp)
 200666c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2006670:	e0bffb17 	ldw	r2,-20(fp)
 2006674:	10001726 	beq	r2,zero,20066d4 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2006678:	d0a70f17 	ldw	r2,-25540(gp)
 200667c:	10800117 	ldw	r2,4(r2)
 2006680:	d0a70f15 	stw	r2,-25540(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2006684:	e0bffb17 	ldw	r2,-20(fp)
 2006688:	00c00144 	movi	r3,5
 200668c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2006690:	e0bffb17 	ldw	r2,-20(fp)
 2006694:	e0fffe0b 	ldhu	r3,-8(fp)
 2006698:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 200669c:	e0bffb17 	ldw	r2,-20(fp)
 20066a0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 20066a4:	e0bffb17 	ldw	r2,-20(fp)
 20066a8:	00c00fc4 	movi	r3,63
 20066ac:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20066b0:	e0bffb17 	ldw	r2,-20(fp)
 20066b4:	100002c5 	stb	zero,11(r2)
 20066b8:	e0bff917 	ldw	r2,-28(fp)
 20066bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20066c0:	e0bffa17 	ldw	r2,-24(fp)
 20066c4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20066c8:	e0bfff17 	ldw	r2,-4(fp)
 20066cc:	10000005 	stb	zero,0(r2)
 20066d0:	00000706 	br	20066f0 <OSFlagCreate+0xf4>
 20066d4:	e0bff917 	ldw	r2,-28(fp)
 20066d8:	e0bffc15 	stw	r2,-16(fp)
 20066dc:	e0bffc17 	ldw	r2,-16(fp)
 20066e0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20066e4:	e0bfff17 	ldw	r2,-4(fp)
 20066e8:	00c01c84 	movi	r3,114
 20066ec:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20066f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20066f4:	e037883a 	mov	sp,fp
 20066f8:	df000017 	ldw	fp,0(sp)
 20066fc:	dec00104 	addi	sp,sp,4
 2006700:	f800283a 	ret

02006704 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2006704:	defff204 	addi	sp,sp,-56
 2006708:	dfc00d15 	stw	ra,52(sp)
 200670c:	df000c15 	stw	fp,48(sp)
 2006710:	df000c04 	addi	fp,sp,48
 2006714:	e13ffd15 	stw	r4,-12(fp)
 2006718:	2805883a 	mov	r2,r5
 200671c:	e1bfff15 	stw	r6,-4(fp)
 2006720:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2006724:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2006728:	e0bfff17 	ldw	r2,-4(fp)
 200672c:	1000021e 	bne	r2,zero,2006738 <OSFlagDel+0x34>
        return (pgrp);
 2006730:	e0bffd17 	ldw	r2,-12(fp)
 2006734:	00008006 	br	2006938 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2006738:	e0bffd17 	ldw	r2,-12(fp)
 200673c:	1000051e 	bne	r2,zero,2006754 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006740:	e0bfff17 	ldw	r2,-4(fp)
 2006744:	00c01b84 	movi	r3,110
 2006748:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 200674c:	e0bffd17 	ldw	r2,-12(fp)
 2006750:	00007906 	br	2006938 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2006754:	d0a70c03 	ldbu	r2,-25552(gp)
 2006758:	10803fcc 	andi	r2,r2,255
 200675c:	10000526 	beq	r2,zero,2006774 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2006760:	e0bfff17 	ldw	r2,-4(fp)
 2006764:	00c003c4 	movi	r3,15
 2006768:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 200676c:	e0bffd17 	ldw	r2,-12(fp)
 2006770:	00007106 	br	2006938 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2006774:	e0bffd17 	ldw	r2,-12(fp)
 2006778:	10800003 	ldbu	r2,0(r2)
 200677c:	10803fcc 	andi	r2,r2,255
 2006780:	10800160 	cmpeqi	r2,r2,5
 2006784:	1000051e 	bne	r2,zero,200679c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2006788:	e0bfff17 	ldw	r2,-4(fp)
 200678c:	00c00044 	movi	r3,1
 2006790:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2006794:	e0bffd17 	ldw	r2,-12(fp)
 2006798:	00006706 	br	2006938 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200679c:	0005303a 	rdctl	r2,status
 20067a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20067a4:	e0fffc17 	ldw	r3,-16(fp)
 20067a8:	00bfff84 	movi	r2,-2
 20067ac:	1884703a 	and	r2,r3,r2
 20067b0:	1001703a 	wrctl	status,r2
  
  return context;
 20067b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20067b8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20067bc:	e0bffd17 	ldw	r2,-12(fp)
 20067c0:	10800117 	ldw	r2,4(r2)
 20067c4:	10000326 	beq	r2,zero,20067d4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20067c8:	00800044 	movi	r2,1
 20067cc:	e0bff405 	stb	r2,-48(fp)
 20067d0:	00000106 	br	20067d8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20067d4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20067d8:	e0bffe03 	ldbu	r2,-8(fp)
 20067dc:	10000326 	beq	r2,zero,20067ec <OSFlagDel+0xe8>
 20067e0:	10800060 	cmpeqi	r2,r2,1
 20067e4:	1000231e 	bne	r2,zero,2006874 <OSFlagDel+0x170>
 20067e8:	00004806 	br	200690c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20067ec:	e0bff403 	ldbu	r2,-48(fp)
 20067f0:	1000161e 	bne	r2,zero,200684c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20067f4:	e0bffd17 	ldw	r2,-12(fp)
 20067f8:	00c00fc4 	movi	r3,63
 20067fc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2006800:	e0bffd17 	ldw	r2,-12(fp)
 2006804:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2006808:	e0bffd17 	ldw	r2,-12(fp)
 200680c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2006810:	d0e70f17 	ldw	r3,-25540(gp)
 2006814:	e0bffd17 	ldw	r2,-12(fp)
 2006818:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 200681c:	e0bffd17 	ldw	r2,-12(fp)
 2006820:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2006824:	e0bffd17 	ldw	r2,-12(fp)
 2006828:	d0a70f15 	stw	r2,-25540(gp)
 200682c:	e0bff717 	ldw	r2,-36(fp)
 2006830:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006834:	e0bff817 	ldw	r2,-32(fp)
 2006838:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 200683c:	e0bfff17 	ldw	r2,-4(fp)
 2006840:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2006844:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2006848:	00003a06 	br	2006934 <OSFlagDel+0x230>
 200684c:	e0bff717 	ldw	r2,-36(fp)
 2006850:	e0bff915 	stw	r2,-28(fp)
 2006854:	e0bff917 	ldw	r2,-28(fp)
 2006858:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 200685c:	e0bfff17 	ldw	r2,-4(fp)
 2006860:	00c01244 	movi	r3,73
 2006864:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2006868:	e0bffd17 	ldw	r2,-12(fp)
 200686c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2006870:	00003006 	br	2006934 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2006874:	e0bffd17 	ldw	r2,-12(fp)
 2006878:	10800117 	ldw	r2,4(r2)
 200687c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2006880:	00000606 	br	200689c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2006884:	000b883a 	mov	r5,zero
 2006888:	e13ff517 	ldw	r4,-44(fp)
 200688c:	20078700 	call	2007870 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2006890:	e0bff517 	ldw	r2,-44(fp)
 2006894:	10800017 	ldw	r2,0(r2)
 2006898:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 200689c:	e0bff517 	ldw	r2,-44(fp)
 20068a0:	103ff81e 	bne	r2,zero,2006884 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 20068a4:	e0bffd17 	ldw	r2,-12(fp)
 20068a8:	00c00fc4 	movi	r3,63
 20068ac:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20068b0:	e0bffd17 	ldw	r2,-12(fp)
 20068b4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20068b8:	e0bffd17 	ldw	r2,-12(fp)
 20068bc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 20068c0:	d0e70f17 	ldw	r3,-25540(gp)
 20068c4:	e0bffd17 	ldw	r2,-12(fp)
 20068c8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20068cc:	e0bffd17 	ldw	r2,-12(fp)
 20068d0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20068d4:	e0bffd17 	ldw	r2,-12(fp)
 20068d8:	d0a70f15 	stw	r2,-25540(gp)
 20068dc:	e0bff717 	ldw	r2,-36(fp)
 20068e0:	e0bffa15 	stw	r2,-24(fp)
 20068e4:	e0bffa17 	ldw	r2,-24(fp)
 20068e8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20068ec:	e0bff403 	ldbu	r2,-48(fp)
 20068f0:	10800058 	cmpnei	r2,r2,1
 20068f4:	1000011e 	bne	r2,zero,20068fc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20068f8:	2005a900 	call	2005a90 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20068fc:	e0bfff17 	ldw	r2,-4(fp)
 2006900:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2006904:	e03ff615 	stw	zero,-40(fp)
             break;
 2006908:	00000a06 	br	2006934 <OSFlagDel+0x230>
 200690c:	e0bff717 	ldw	r2,-36(fp)
 2006910:	e0bffb15 	stw	r2,-20(fp)
 2006914:	e0bffb17 	ldw	r2,-20(fp)
 2006918:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 200691c:	e0bfff17 	ldw	r2,-4(fp)
 2006920:	00c001c4 	movi	r3,7
 2006924:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2006928:	e0bffd17 	ldw	r2,-12(fp)
 200692c:	e0bff615 	stw	r2,-40(fp)
             break;
 2006930:	0001883a 	nop
    }
    return (pgrp_return);
 2006934:	e0bff617 	ldw	r2,-40(fp)
}
 2006938:	e037883a 	mov	sp,fp
 200693c:	dfc00117 	ldw	ra,4(sp)
 2006940:	df000017 	ldw	fp,0(sp)
 2006944:	dec00204 	addi	sp,sp,8
 2006948:	f800283a 	ret

0200694c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 200694c:	defff604 	addi	sp,sp,-40
 2006950:	dfc00915 	stw	ra,36(sp)
 2006954:	df000815 	stw	fp,32(sp)
 2006958:	df000804 	addi	fp,sp,32
 200695c:	e13ffd15 	stw	r4,-12(fp)
 2006960:	e17ffe15 	stw	r5,-8(fp)
 2006964:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006968:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200696c:	e0bfff17 	ldw	r2,-4(fp)
 2006970:	1000021e 	bne	r2,zero,200697c <OSFlagNameGet+0x30>
        return (0);
 2006974:	0005883a 	mov	r2,zero
 2006978:	00003906 	br	2006a60 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 200697c:	e0bffd17 	ldw	r2,-12(fp)
 2006980:	1000051e 	bne	r2,zero,2006998 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006984:	e0bfff17 	ldw	r2,-4(fp)
 2006988:	00c01b84 	movi	r3,110
 200698c:	10c00005 	stb	r3,0(r2)
        return (0);
 2006990:	0005883a 	mov	r2,zero
 2006994:	00003206 	br	2006a60 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2006998:	e0bffe17 	ldw	r2,-8(fp)
 200699c:	1000051e 	bne	r2,zero,20069b4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20069a0:	e0bfff17 	ldw	r2,-4(fp)
 20069a4:	00c00304 	movi	r3,12
 20069a8:	10c00005 	stb	r3,0(r2)
        return (0);
 20069ac:	0005883a 	mov	r2,zero
 20069b0:	00002b06 	br	2006a60 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20069b4:	d0a70c03 	ldbu	r2,-25552(gp)
 20069b8:	10803fcc 	andi	r2,r2,255
 20069bc:	10000526 	beq	r2,zero,20069d4 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 20069c0:	e0bfff17 	ldw	r2,-4(fp)
 20069c4:	00c00444 	movi	r3,17
 20069c8:	10c00005 	stb	r3,0(r2)
        return (0);
 20069cc:	0005883a 	mov	r2,zero
 20069d0:	00002306 	br	2006a60 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20069d4:	0005303a 	rdctl	r2,status
 20069d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20069dc:	e0fffc17 	ldw	r3,-16(fp)
 20069e0:	00bfff84 	movi	r2,-2
 20069e4:	1884703a 	and	r2,r3,r2
 20069e8:	1001703a 	wrctl	status,r2
  
  return context;
 20069ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20069f0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20069f4:	e0bffd17 	ldw	r2,-12(fp)
 20069f8:	10800003 	ldbu	r2,0(r2)
 20069fc:	10803fcc 	andi	r2,r2,255
 2006a00:	10800160 	cmpeqi	r2,r2,5
 2006a04:	1000091e 	bne	r2,zero,2006a2c <OSFlagNameGet+0xe0>
 2006a08:	e0bff817 	ldw	r2,-32(fp)
 2006a0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006a10:	e0bff917 	ldw	r2,-28(fp)
 2006a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2006a18:	e0bfff17 	ldw	r2,-4(fp)
 2006a1c:	00c00044 	movi	r3,1
 2006a20:	10c00005 	stb	r3,0(r2)
        return (0);
 2006a24:	0005883a 	mov	r2,zero
 2006a28:	00000d06 	br	2006a60 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2006a2c:	e0bffd17 	ldw	r2,-12(fp)
 2006a30:	10800284 	addi	r2,r2,10
 2006a34:	100b883a 	mov	r5,r2
 2006a38:	e13ffe17 	ldw	r4,-8(fp)
 2006a3c:	2005bd40 	call	2005bd4 <OS_StrCopy>
 2006a40:	e0bffb05 	stb	r2,-20(fp)
 2006a44:	e0bff817 	ldw	r2,-32(fp)
 2006a48:	e0bffa15 	stw	r2,-24(fp)
 2006a4c:	e0bffa17 	ldw	r2,-24(fp)
 2006a50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2006a54:	e0bfff17 	ldw	r2,-4(fp)
 2006a58:	10000005 	stb	zero,0(r2)
    return (len);
 2006a5c:	e0bffb03 	ldbu	r2,-20(fp)
}
 2006a60:	e037883a 	mov	sp,fp
 2006a64:	dfc00117 	ldw	ra,4(sp)
 2006a68:	df000017 	ldw	fp,0(sp)
 2006a6c:	dec00204 	addi	sp,sp,8
 2006a70:	f800283a 	ret

02006a74 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2006a74:	defff504 	addi	sp,sp,-44
 2006a78:	dfc00a15 	stw	ra,40(sp)
 2006a7c:	df000915 	stw	fp,36(sp)
 2006a80:	df000904 	addi	fp,sp,36
 2006a84:	e13ffd15 	stw	r4,-12(fp)
 2006a88:	e17ffe15 	stw	r5,-8(fp)
 2006a8c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006a90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2006a94:	e0bfff17 	ldw	r2,-4(fp)
 2006a98:	10004326 	beq	r2,zero,2006ba8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2006a9c:	e0bffd17 	ldw	r2,-12(fp)
 2006aa0:	1000041e 	bne	r2,zero,2006ab4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006aa4:	e0bfff17 	ldw	r2,-4(fp)
 2006aa8:	00c01b84 	movi	r3,110
 2006aac:	10c00005 	stb	r3,0(r2)
        return;
 2006ab0:	00003e06 	br	2006bac <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2006ab4:	e0bffe17 	ldw	r2,-8(fp)
 2006ab8:	1000041e 	bne	r2,zero,2006acc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2006abc:	e0bfff17 	ldw	r2,-4(fp)
 2006ac0:	00c00304 	movi	r3,12
 2006ac4:	10c00005 	stb	r3,0(r2)
        return;
 2006ac8:	00003806 	br	2006bac <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2006acc:	d0a70c03 	ldbu	r2,-25552(gp)
 2006ad0:	10803fcc 	andi	r2,r2,255
 2006ad4:	10000426 	beq	r2,zero,2006ae8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2006ad8:	e0bfff17 	ldw	r2,-4(fp)
 2006adc:	00c00484 	movi	r3,18
 2006ae0:	10c00005 	stb	r3,0(r2)
        return;
 2006ae4:	00003106 	br	2006bac <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006ae8:	0005303a 	rdctl	r2,status
 2006aec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006af0:	e0fffc17 	ldw	r3,-16(fp)
 2006af4:	00bfff84 	movi	r2,-2
 2006af8:	1884703a 	and	r2,r3,r2
 2006afc:	1001703a 	wrctl	status,r2
  
  return context;
 2006b00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2006b04:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2006b08:	e0bffd17 	ldw	r2,-12(fp)
 2006b0c:	10800003 	ldbu	r2,0(r2)
 2006b10:	10803fcc 	andi	r2,r2,255
 2006b14:	10800160 	cmpeqi	r2,r2,5
 2006b18:	1000081e 	bne	r2,zero,2006b3c <OSFlagNameSet+0xc8>
 2006b1c:	e0bff717 	ldw	r2,-36(fp)
 2006b20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006b24:	e0bff817 	ldw	r2,-32(fp)
 2006b28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2006b2c:	e0bfff17 	ldw	r2,-4(fp)
 2006b30:	00c00044 	movi	r3,1
 2006b34:	10c00005 	stb	r3,0(r2)
        return;
 2006b38:	00001c06 	br	2006bac <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2006b3c:	e13ffe17 	ldw	r4,-8(fp)
 2006b40:	2005c480 	call	2005c48 <OS_StrLen>
 2006b44:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2006b48:	e0bffa03 	ldbu	r2,-24(fp)
 2006b4c:	10800830 	cmpltui	r2,r2,32
 2006b50:	1000081e 	bne	r2,zero,2006b74 <OSFlagNameSet+0x100>
 2006b54:	e0bff717 	ldw	r2,-36(fp)
 2006b58:	e0bff915 	stw	r2,-28(fp)
 2006b5c:	e0bff917 	ldw	r2,-28(fp)
 2006b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2006b64:	e0bfff17 	ldw	r2,-4(fp)
 2006b68:	00c01cc4 	movi	r3,115
 2006b6c:	10c00005 	stb	r3,0(r2)
        return;
 2006b70:	00000e06 	br	2006bac <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2006b74:	e0bffd17 	ldw	r2,-12(fp)
 2006b78:	10800284 	addi	r2,r2,10
 2006b7c:	e17ffe17 	ldw	r5,-8(fp)
 2006b80:	1009883a 	mov	r4,r2
 2006b84:	2005bd40 	call	2005bd4 <OS_StrCopy>
 2006b88:	e0bff717 	ldw	r2,-36(fp)
 2006b8c:	e0bffb15 	stw	r2,-20(fp)
 2006b90:	e0bffb17 	ldw	r2,-20(fp)
 2006b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2006b98:	e0bfff17 	ldw	r2,-4(fp)
 2006b9c:	10000005 	stb	zero,0(r2)
    return;
 2006ba0:	0001883a 	nop
 2006ba4:	00000106 	br	2006bac <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2006ba8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2006bac:	e037883a 	mov	sp,fp
 2006bb0:	dfc00117 	ldw	ra,4(sp)
 2006bb4:	df000017 	ldw	fp,0(sp)
 2006bb8:	dec00204 	addi	sp,sp,8
 2006bbc:	f800283a 	ret

02006bc0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2006bc0:	deffe104 	addi	sp,sp,-124
 2006bc4:	dfc01e15 	stw	ra,120(sp)
 2006bc8:	df001d15 	stw	fp,116(sp)
 2006bcc:	df001d04 	addi	fp,sp,116
 2006bd0:	e13ffc15 	stw	r4,-16(fp)
 2006bd4:	2809883a 	mov	r4,r5
 2006bd8:	3007883a 	mov	r3,r6
 2006bdc:	3805883a 	mov	r2,r7
 2006be0:	e13ffd0d 	sth	r4,-12(fp)
 2006be4:	e0fffe05 	stb	r3,-8(fp)
 2006be8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2006bec:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2006bf0:	e0800217 	ldw	r2,8(fp)
 2006bf4:	1000021e 	bne	r2,zero,2006c00 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2006bf8:	0005883a 	mov	r2,zero
 2006bfc:	00015906 	br	2007164 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2006c00:	e0bffc17 	ldw	r2,-16(fp)
 2006c04:	1000051e 	bne	r2,zero,2006c1c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006c08:	e0800217 	ldw	r2,8(fp)
 2006c0c:	00c01b84 	movi	r3,110
 2006c10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006c14:	0005883a 	mov	r2,zero
 2006c18:	00015206 	br	2007164 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2006c1c:	d0a70c03 	ldbu	r2,-25552(gp)
 2006c20:	10803fcc 	andi	r2,r2,255
 2006c24:	10000526 	beq	r2,zero,2006c3c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2006c28:	e0800217 	ldw	r2,8(fp)
 2006c2c:	00c00084 	movi	r3,2
 2006c30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006c34:	0005883a 	mov	r2,zero
 2006c38:	00014a06 	br	2007164 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2006c3c:	d0a6fe03 	ldbu	r2,-25608(gp)
 2006c40:	10803fcc 	andi	r2,r2,255
 2006c44:	10000526 	beq	r2,zero,2006c5c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2006c48:	e0800217 	ldw	r2,8(fp)
 2006c4c:	00c00344 	movi	r3,13
 2006c50:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006c54:	0005883a 	mov	r2,zero
 2006c58:	00014206 	br	2007164 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2006c5c:	e0bffc17 	ldw	r2,-16(fp)
 2006c60:	10800003 	ldbu	r2,0(r2)
 2006c64:	10803fcc 	andi	r2,r2,255
 2006c68:	10800160 	cmpeqi	r2,r2,5
 2006c6c:	1000051e 	bne	r2,zero,2006c84 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2006c70:	e0800217 	ldw	r2,8(fp)
 2006c74:	00c00044 	movi	r3,1
 2006c78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2006c7c:	0005883a 	mov	r2,zero
 2006c80:	00013806 	br	2007164 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2006c84:	e0fffe03 	ldbu	r3,-8(fp)
 2006c88:	00bfe004 	movi	r2,-128
 2006c8c:	1884703a 	and	r2,r3,r2
 2006c90:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2006c94:	e0bfe603 	ldbu	r2,-104(fp)
 2006c98:	10000626 	beq	r2,zero,2006cb4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2006c9c:	e0bffe03 	ldbu	r2,-8(fp)
 2006ca0:	10801fcc 	andi	r2,r2,127
 2006ca4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2006ca8:	00800044 	movi	r2,1
 2006cac:	e0bfe405 	stb	r2,-112(fp)
 2006cb0:	00000106 	br	2006cb8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2006cb4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006cb8:	0005303a 	rdctl	r2,status
 2006cbc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006cc0:	e0fff617 	ldw	r3,-40(fp)
 2006cc4:	00bfff84 	movi	r2,-2
 2006cc8:	1884703a 	and	r2,r3,r2
 2006ccc:	1001703a 	wrctl	status,r2
  
  return context;
 2006cd0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2006cd4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2006cd8:	e0bffe03 	ldbu	r2,-8(fp)
 2006cdc:	10c00060 	cmpeqi	r3,r2,1
 2006ce0:	1800921e 	bne	r3,zero,2006f2c <OSFlagPend+0x36c>
 2006ce4:	10c00088 	cmpgei	r3,r2,2
 2006ce8:	1800021e 	bne	r3,zero,2006cf4 <OSFlagPend+0x134>
 2006cec:	10006126 	beq	r2,zero,2006e74 <OSFlagPend+0x2b4>
 2006cf0:	0000bb06 	br	2006fe0 <OSFlagPend+0x420>
 2006cf4:	10c000a0 	cmpeqi	r3,r2,2
 2006cf8:	1800031e 	bne	r3,zero,2006d08 <OSFlagPend+0x148>
 2006cfc:	108000e0 	cmpeqi	r2,r2,3
 2006d00:	10002f1e 	bne	r2,zero,2006dc0 <OSFlagPend+0x200>
 2006d04:	0000b606 	br	2006fe0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2006d08:	e0bffc17 	ldw	r2,-16(fp)
 2006d0c:	10c0020b 	ldhu	r3,8(r2)
 2006d10:	e0bffd0b 	ldhu	r2,-12(fp)
 2006d14:	1884703a 	and	r2,r3,r2
 2006d18:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2006d1c:	e0ffe80b 	ldhu	r3,-96(fp)
 2006d20:	e0bffd0b 	ldhu	r2,-12(fp)
 2006d24:	1880171e 	bne	r3,r2,2006d84 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006d28:	e0bfe403 	ldbu	r2,-112(fp)
 2006d2c:	10800058 	cmpnei	r2,r2,1
 2006d30:	1000091e 	bne	r2,zero,2006d58 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2006d34:	e0bffc17 	ldw	r2,-16(fp)
 2006d38:	1080020b 	ldhu	r2,8(r2)
 2006d3c:	1007883a 	mov	r3,r2
 2006d40:	e0bfe80b 	ldhu	r2,-96(fp)
 2006d44:	0084303a 	nor	r2,zero,r2
 2006d48:	1884703a 	and	r2,r3,r2
 2006d4c:	1007883a 	mov	r3,r2
 2006d50:	e0bffc17 	ldw	r2,-16(fp)
 2006d54:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2006d58:	d0a70d17 	ldw	r2,-25548(gp)
 2006d5c:	e0ffe80b 	ldhu	r3,-96(fp)
 2006d60:	10c00b0d 	sth	r3,44(r2)
 2006d64:	e0bfe517 	ldw	r2,-108(fp)
 2006d68:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006d6c:	e0bfe717 	ldw	r2,-100(fp)
 2006d70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2006d74:	e0800217 	ldw	r2,8(fp)
 2006d78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2006d7c:	e0bfe80b 	ldhu	r2,-96(fp)
 2006d80:	0000f806 	br	2007164 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2006d84:	e13ffd0b 	ldhu	r4,-12(fp)
 2006d88:	e17ffe03 	ldbu	r5,-8(fp)
 2006d8c:	e0bfff0b 	ldhu	r2,-4(fp)
 2006d90:	e0fff704 	addi	r3,fp,-36
 2006d94:	d8800015 	stw	r2,0(sp)
 2006d98:	280f883a 	mov	r7,r5
 2006d9c:	200d883a 	mov	r6,r4
 2006da0:	180b883a 	mov	r5,r3
 2006da4:	e13ffc17 	ldw	r4,-16(fp)
 2006da8:	20076300 	call	2007630 <OS_FlagBlock>
 2006dac:	e0bfe517 	ldw	r2,-108(fp)
 2006db0:	e0bfe915 	stw	r2,-92(fp)
 2006db4:	e0bfe917 	ldw	r2,-92(fp)
 2006db8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2006dbc:	00009206 	br	2007008 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2006dc0:	e0bffc17 	ldw	r2,-16(fp)
 2006dc4:	10c0020b 	ldhu	r3,8(r2)
 2006dc8:	e0bffd0b 	ldhu	r2,-12(fp)
 2006dcc:	1884703a 	and	r2,r3,r2
 2006dd0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2006dd4:	e0bfe80b 	ldhu	r2,-96(fp)
 2006dd8:	10001726 	beq	r2,zero,2006e38 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006ddc:	e0bfe403 	ldbu	r2,-112(fp)
 2006de0:	10800058 	cmpnei	r2,r2,1
 2006de4:	1000091e 	bne	r2,zero,2006e0c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2006de8:	e0bffc17 	ldw	r2,-16(fp)
 2006dec:	1080020b 	ldhu	r2,8(r2)
 2006df0:	1007883a 	mov	r3,r2
 2006df4:	e0bfe80b 	ldhu	r2,-96(fp)
 2006df8:	0084303a 	nor	r2,zero,r2
 2006dfc:	1884703a 	and	r2,r3,r2
 2006e00:	1007883a 	mov	r3,r2
 2006e04:	e0bffc17 	ldw	r2,-16(fp)
 2006e08:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2006e0c:	d0a70d17 	ldw	r2,-25548(gp)
 2006e10:	e0ffe80b 	ldhu	r3,-96(fp)
 2006e14:	10c00b0d 	sth	r3,44(r2)
 2006e18:	e0bfe517 	ldw	r2,-108(fp)
 2006e1c:	e0bfea15 	stw	r2,-88(fp)
 2006e20:	e0bfea17 	ldw	r2,-88(fp)
 2006e24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2006e28:	e0800217 	ldw	r2,8(fp)
 2006e2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2006e30:	e0bfe80b 	ldhu	r2,-96(fp)
 2006e34:	0000cb06 	br	2007164 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2006e38:	e13ffd0b 	ldhu	r4,-12(fp)
 2006e3c:	e17ffe03 	ldbu	r5,-8(fp)
 2006e40:	e0bfff0b 	ldhu	r2,-4(fp)
 2006e44:	e0fff704 	addi	r3,fp,-36
 2006e48:	d8800015 	stw	r2,0(sp)
 2006e4c:	280f883a 	mov	r7,r5
 2006e50:	200d883a 	mov	r6,r4
 2006e54:	180b883a 	mov	r5,r3
 2006e58:	e13ffc17 	ldw	r4,-16(fp)
 2006e5c:	20076300 	call	2007630 <OS_FlagBlock>
 2006e60:	e0bfe517 	ldw	r2,-108(fp)
 2006e64:	e0bfeb15 	stw	r2,-84(fp)
 2006e68:	e0bfeb17 	ldw	r2,-84(fp)
 2006e6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2006e70:	00006506 	br	2007008 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2006e74:	e0bffc17 	ldw	r2,-16(fp)
 2006e78:	1080020b 	ldhu	r2,8(r2)
 2006e7c:	0084303a 	nor	r2,zero,r2
 2006e80:	1007883a 	mov	r3,r2
 2006e84:	e0bffd0b 	ldhu	r2,-12(fp)
 2006e88:	1884703a 	and	r2,r3,r2
 2006e8c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2006e90:	e0ffe80b 	ldhu	r3,-96(fp)
 2006e94:	e0bffd0b 	ldhu	r2,-12(fp)
 2006e98:	1880151e 	bne	r3,r2,2006ef0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006e9c:	e0bfe403 	ldbu	r2,-112(fp)
 2006ea0:	10800058 	cmpnei	r2,r2,1
 2006ea4:	1000071e 	bne	r2,zero,2006ec4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2006ea8:	e0bffc17 	ldw	r2,-16(fp)
 2006eac:	10c0020b 	ldhu	r3,8(r2)
 2006eb0:	e0bfe80b 	ldhu	r2,-96(fp)
 2006eb4:	1884b03a 	or	r2,r3,r2
 2006eb8:	1007883a 	mov	r3,r2
 2006ebc:	e0bffc17 	ldw	r2,-16(fp)
 2006ec0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2006ec4:	d0a70d17 	ldw	r2,-25548(gp)
 2006ec8:	e0ffe80b 	ldhu	r3,-96(fp)
 2006ecc:	10c00b0d 	sth	r3,44(r2)
 2006ed0:	e0bfe517 	ldw	r2,-108(fp)
 2006ed4:	e0bfec15 	stw	r2,-80(fp)
 2006ed8:	e0bfec17 	ldw	r2,-80(fp)
 2006edc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2006ee0:	e0800217 	ldw	r2,8(fp)
 2006ee4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2006ee8:	e0bfe80b 	ldhu	r2,-96(fp)
 2006eec:	00009d06 	br	2007164 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2006ef0:	e13ffd0b 	ldhu	r4,-12(fp)
 2006ef4:	e17ffe03 	ldbu	r5,-8(fp)
 2006ef8:	e0bfff0b 	ldhu	r2,-4(fp)
 2006efc:	e0fff704 	addi	r3,fp,-36
 2006f00:	d8800015 	stw	r2,0(sp)
 2006f04:	280f883a 	mov	r7,r5
 2006f08:	200d883a 	mov	r6,r4
 2006f0c:	180b883a 	mov	r5,r3
 2006f10:	e13ffc17 	ldw	r4,-16(fp)
 2006f14:	20076300 	call	2007630 <OS_FlagBlock>
 2006f18:	e0bfe517 	ldw	r2,-108(fp)
 2006f1c:	e0bfed15 	stw	r2,-76(fp)
 2006f20:	e0bfed17 	ldw	r2,-76(fp)
 2006f24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2006f28:	00003706 	br	2007008 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2006f2c:	e0bffc17 	ldw	r2,-16(fp)
 2006f30:	1080020b 	ldhu	r2,8(r2)
 2006f34:	0084303a 	nor	r2,zero,r2
 2006f38:	1007883a 	mov	r3,r2
 2006f3c:	e0bffd0b 	ldhu	r2,-12(fp)
 2006f40:	1884703a 	and	r2,r3,r2
 2006f44:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2006f48:	e0bfe80b 	ldhu	r2,-96(fp)
 2006f4c:	10001526 	beq	r2,zero,2006fa4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006f50:	e0bfe403 	ldbu	r2,-112(fp)
 2006f54:	10800058 	cmpnei	r2,r2,1
 2006f58:	1000071e 	bne	r2,zero,2006f78 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2006f5c:	e0bffc17 	ldw	r2,-16(fp)
 2006f60:	10c0020b 	ldhu	r3,8(r2)
 2006f64:	e0bfe80b 	ldhu	r2,-96(fp)
 2006f68:	1884b03a 	or	r2,r3,r2
 2006f6c:	1007883a 	mov	r3,r2
 2006f70:	e0bffc17 	ldw	r2,-16(fp)
 2006f74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2006f78:	d0a70d17 	ldw	r2,-25548(gp)
 2006f7c:	e0ffe80b 	ldhu	r3,-96(fp)
 2006f80:	10c00b0d 	sth	r3,44(r2)
 2006f84:	e0bfe517 	ldw	r2,-108(fp)
 2006f88:	e0bfee15 	stw	r2,-72(fp)
 2006f8c:	e0bfee17 	ldw	r2,-72(fp)
 2006f90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2006f94:	e0800217 	ldw	r2,8(fp)
 2006f98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2006f9c:	e0bfe80b 	ldhu	r2,-96(fp)
 2006fa0:	00007006 	br	2007164 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2006fa4:	e13ffd0b 	ldhu	r4,-12(fp)
 2006fa8:	e17ffe03 	ldbu	r5,-8(fp)
 2006fac:	e0bfff0b 	ldhu	r2,-4(fp)
 2006fb0:	e0fff704 	addi	r3,fp,-36
 2006fb4:	d8800015 	stw	r2,0(sp)
 2006fb8:	280f883a 	mov	r7,r5
 2006fbc:	200d883a 	mov	r6,r4
 2006fc0:	180b883a 	mov	r5,r3
 2006fc4:	e13ffc17 	ldw	r4,-16(fp)
 2006fc8:	20076300 	call	2007630 <OS_FlagBlock>
 2006fcc:	e0bfe517 	ldw	r2,-108(fp)
 2006fd0:	e0bfef15 	stw	r2,-68(fp)
 2006fd4:	e0bfef17 	ldw	r2,-68(fp)
 2006fd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2006fdc:	00000a06 	br	2007008 <OSFlagPend+0x448>
 2006fe0:	e0bfe517 	ldw	r2,-108(fp)
 2006fe4:	e0bff015 	stw	r2,-64(fp)
 2006fe8:	e0bff017 	ldw	r2,-64(fp)
 2006fec:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2006ff0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2006ff4:	e0800217 	ldw	r2,8(fp)
 2006ff8:	00c01bc4 	movi	r3,111
 2006ffc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2007000:	e0bfe80b 	ldhu	r2,-96(fp)
 2007004:	00005706 	br	2007164 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2007008:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200700c:	0005303a 	rdctl	r2,status
 2007010:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007014:	e0fff117 	ldw	r3,-60(fp)
 2007018:	00bfff84 	movi	r2,-2
 200701c:	1884703a 	and	r2,r3,r2
 2007020:	1001703a 	wrctl	status,r2
  
  return context;
 2007024:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2007028:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 200702c:	d0a70d17 	ldw	r2,-25548(gp)
 2007030:	10800c43 	ldbu	r2,49(r2)
 2007034:	10803fcc 	andi	r2,r2,255
 2007038:	10001c26 	beq	r2,zero,20070ac <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 200703c:	d0a70d17 	ldw	r2,-25548(gp)
 2007040:	10800c43 	ldbu	r2,49(r2)
 2007044:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2007048:	d0a70d17 	ldw	r2,-25548(gp)
 200704c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2007050:	e0bff704 	addi	r2,fp,-36
 2007054:	1009883a 	mov	r4,r2
 2007058:	20079640 	call	2007964 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 200705c:	d0a70d17 	ldw	r2,-25548(gp)
 2007060:	10000c05 	stb	zero,48(r2)
 2007064:	e0bfe517 	ldw	r2,-108(fp)
 2007068:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200706c:	e0bff217 	ldw	r2,-56(fp)
 2007070:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2007074:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2007078:	e0bff303 	ldbu	r2,-52(fp)
 200707c:	108000a0 	cmpeqi	r2,r2,2
 2007080:	10000426 	beq	r2,zero,2007094 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2007084:	e0800217 	ldw	r2,8(fp)
 2007088:	00c00384 	movi	r3,14
 200708c:	10c00005 	stb	r3,0(r2)
                 break;
 2007090:	00000406 	br	20070a4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2007094:	e0800217 	ldw	r2,8(fp)
 2007098:	00c00284 	movi	r3,10
 200709c:	10c00005 	stb	r3,0(r2)
                 break;
 20070a0:	0001883a 	nop
        }
        return (flags_rdy);
 20070a4:	e0bfe80b 	ldhu	r2,-96(fp)
 20070a8:	00002e06 	br	2007164 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 20070ac:	d0a70d17 	ldw	r2,-25548(gp)
 20070b0:	10800b0b 	ldhu	r2,44(r2)
 20070b4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 20070b8:	e0bfe403 	ldbu	r2,-112(fp)
 20070bc:	10800058 	cmpnei	r2,r2,1
 20070c0:	1000211e 	bne	r2,zero,2007148 <OSFlagPend+0x588>
        switch (wait_type) {
 20070c4:	e0bffe03 	ldbu	r2,-8(fp)
 20070c8:	10001616 	blt	r2,zero,2007124 <OSFlagPend+0x564>
 20070cc:	10c00090 	cmplti	r3,r2,2
 20070d0:	18000c1e 	bne	r3,zero,2007104 <OSFlagPend+0x544>
 20070d4:	10800108 	cmpgei	r2,r2,4
 20070d8:	1000121e 	bne	r2,zero,2007124 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 20070dc:	e0bffc17 	ldw	r2,-16(fp)
 20070e0:	1080020b 	ldhu	r2,8(r2)
 20070e4:	1007883a 	mov	r3,r2
 20070e8:	e0bfe80b 	ldhu	r2,-96(fp)
 20070ec:	0084303a 	nor	r2,zero,r2
 20070f0:	1884703a 	and	r2,r3,r2
 20070f4:	1007883a 	mov	r3,r2
 20070f8:	e0bffc17 	ldw	r2,-16(fp)
 20070fc:	10c0020d 	sth	r3,8(r2)
                 break;
 2007100:	00001106 	br	2007148 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2007104:	e0bffc17 	ldw	r2,-16(fp)
 2007108:	10c0020b 	ldhu	r3,8(r2)
 200710c:	e0bfe80b 	ldhu	r2,-96(fp)
 2007110:	1884b03a 	or	r2,r3,r2
 2007114:	1007883a 	mov	r3,r2
 2007118:	e0bffc17 	ldw	r2,-16(fp)
 200711c:	10c0020d 	sth	r3,8(r2)
                 break;
 2007120:	00000906 	br	2007148 <OSFlagPend+0x588>
 2007124:	e0bfe517 	ldw	r2,-108(fp)
 2007128:	e0bff415 	stw	r2,-48(fp)
 200712c:	e0bff417 	ldw	r2,-48(fp)
 2007130:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2007134:	e0800217 	ldw	r2,8(fp)
 2007138:	00c01bc4 	movi	r3,111
 200713c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2007140:	0005883a 	mov	r2,zero
 2007144:	00000706 	br	2007164 <OSFlagPend+0x5a4>
 2007148:	e0bfe517 	ldw	r2,-108(fp)
 200714c:	e0bff515 	stw	r2,-44(fp)
 2007150:	e0bff517 	ldw	r2,-44(fp)
 2007154:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2007158:	e0800217 	ldw	r2,8(fp)
 200715c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2007160:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2007164:	e037883a 	mov	sp,fp
 2007168:	dfc00117 	ldw	ra,4(sp)
 200716c:	df000017 	ldw	fp,0(sp)
 2007170:	dec00204 	addi	sp,sp,8
 2007174:	f800283a 	ret

02007178 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2007178:	defffb04 	addi	sp,sp,-20
 200717c:	df000415 	stw	fp,16(sp)
 2007180:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2007184:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007188:	0005303a 	rdctl	r2,status
 200718c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007190:	e0fffe17 	ldw	r3,-8(fp)
 2007194:	00bfff84 	movi	r2,-2
 2007198:	1884703a 	and	r2,r3,r2
 200719c:	1001703a 	wrctl	status,r2
  
  return context;
 20071a0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 20071a4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 20071a8:	d0a70d17 	ldw	r2,-25548(gp)
 20071ac:	10800b0b 	ldhu	r2,44(r2)
 20071b0:	e0bffd0d 	sth	r2,-12(fp)
 20071b4:	e0bffc17 	ldw	r2,-16(fp)
 20071b8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20071bc:	e0bfff17 	ldw	r2,-4(fp)
 20071c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 20071c4:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20071c8:	e037883a 	mov	sp,fp
 20071cc:	df000017 	ldw	fp,0(sp)
 20071d0:	dec00104 	addi	sp,sp,4
 20071d4:	f800283a 	ret

020071d8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 20071d8:	deffef04 	addi	sp,sp,-68
 20071dc:	dfc01015 	stw	ra,64(sp)
 20071e0:	df000f15 	stw	fp,60(sp)
 20071e4:	df000f04 	addi	fp,sp,60
 20071e8:	e13ffc15 	stw	r4,-16(fp)
 20071ec:	2807883a 	mov	r3,r5
 20071f0:	3005883a 	mov	r2,r6
 20071f4:	e1ffff15 	stw	r7,-4(fp)
 20071f8:	e0fffd0d 	sth	r3,-12(fp)
 20071fc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2007200:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2007204:	e0bfff17 	ldw	r2,-4(fp)
 2007208:	1000021e 	bne	r2,zero,2007214 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 200720c:	0005883a 	mov	r2,zero
 2007210:	0000d106 	br	2007558 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2007214:	e0bffc17 	ldw	r2,-16(fp)
 2007218:	1000051e 	bne	r2,zero,2007230 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 200721c:	e0bfff17 	ldw	r2,-4(fp)
 2007220:	00c01b84 	movi	r3,110
 2007224:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2007228:	0005883a 	mov	r2,zero
 200722c:	0000ca06 	br	2007558 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2007230:	e0bffc17 	ldw	r2,-16(fp)
 2007234:	10800003 	ldbu	r2,0(r2)
 2007238:	10803fcc 	andi	r2,r2,255
 200723c:	10800160 	cmpeqi	r2,r2,5
 2007240:	1000051e 	bne	r2,zero,2007258 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2007244:	e0bfff17 	ldw	r2,-4(fp)
 2007248:	00c00044 	movi	r3,1
 200724c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2007250:	0005883a 	mov	r2,zero
 2007254:	0000c006 	br	2007558 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007258:	0005303a 	rdctl	r2,status
 200725c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007260:	e0fffb17 	ldw	r3,-20(fp)
 2007264:	00bfff84 	movi	r2,-2
 2007268:	1884703a 	and	r2,r3,r2
 200726c:	1001703a 	wrctl	status,r2
  
  return context;
 2007270:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2007274:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2007278:	e0bffe03 	ldbu	r2,-8(fp)
 200727c:	10000326 	beq	r2,zero,200728c <OSFlagPost+0xb4>
 2007280:	10800060 	cmpeqi	r2,r2,1
 2007284:	10000b1e 	bne	r2,zero,20072b4 <OSFlagPost+0xdc>
 2007288:	00001206 	br	20072d4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 200728c:	e0bffc17 	ldw	r2,-16(fp)
 2007290:	1080020b 	ldhu	r2,8(r2)
 2007294:	1007883a 	mov	r3,r2
 2007298:	e0bffd0b 	ldhu	r2,-12(fp)
 200729c:	0084303a 	nor	r2,zero,r2
 20072a0:	1884703a 	and	r2,r3,r2
 20072a4:	1007883a 	mov	r3,r2
 20072a8:	e0bffc17 	ldw	r2,-16(fp)
 20072ac:	10c0020d 	sth	r3,8(r2)
             break;
 20072b0:	00001106 	br	20072f8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 20072b4:	e0bffc17 	ldw	r2,-16(fp)
 20072b8:	10c0020b 	ldhu	r3,8(r2)
 20072bc:	e0bffd0b 	ldhu	r2,-12(fp)
 20072c0:	1884b03a 	or	r2,r3,r2
 20072c4:	1007883a 	mov	r3,r2
 20072c8:	e0bffc17 	ldw	r2,-16(fp)
 20072cc:	10c0020d 	sth	r3,8(r2)
             break;
 20072d0:	00000906 	br	20072f8 <OSFlagPost+0x120>
 20072d4:	e0bff317 	ldw	r2,-52(fp)
 20072d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20072dc:	e0bff417 	ldw	r2,-48(fp)
 20072e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 20072e4:	e0bfff17 	ldw	r2,-4(fp)
 20072e8:	00c01c44 	movi	r3,113
 20072ec:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 20072f0:	0005883a 	mov	r2,zero
 20072f4:	00009806 	br	2007558 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 20072f8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20072fc:	e0bffc17 	ldw	r2,-16(fp)
 2007300:	10800117 	ldw	r2,4(r2)
 2007304:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2007308:	00007706 	br	20074e8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 200730c:	e0bff117 	ldw	r2,-60(fp)
 2007310:	10800483 	ldbu	r2,18(r2)
 2007314:	10803fcc 	andi	r2,r2,255
 2007318:	10c00060 	cmpeqi	r3,r2,1
 200731c:	18004a1e 	bne	r3,zero,2007448 <OSFlagPost+0x270>
 2007320:	10c00088 	cmpgei	r3,r2,2
 2007324:	1800021e 	bne	r3,zero,2007330 <OSFlagPost+0x158>
 2007328:	10002f26 	beq	r2,zero,20073e8 <OSFlagPost+0x210>
 200732c:	00005b06 	br	200749c <OSFlagPost+0x2c4>
 2007330:	10c000a0 	cmpeqi	r3,r2,2
 2007334:	1800031e 	bne	r3,zero,2007344 <OSFlagPost+0x16c>
 2007338:	108000e0 	cmpeqi	r2,r2,3
 200733c:	1000171e 	bne	r2,zero,200739c <OSFlagPost+0x1c4>
 2007340:	00005606 	br	200749c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2007344:	e0bffc17 	ldw	r2,-16(fp)
 2007348:	10c0020b 	ldhu	r3,8(r2)
 200734c:	e0bff117 	ldw	r2,-60(fp)
 2007350:	1080040b 	ldhu	r2,16(r2)
 2007354:	1884703a 	and	r2,r3,r2
 2007358:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 200735c:	e0bff117 	ldw	r2,-60(fp)
 2007360:	1080040b 	ldhu	r2,16(r2)
 2007364:	10ffffcc 	andi	r3,r2,65535
 2007368:	e0bff60b 	ldhu	r2,-40(fp)
 200736c:	1880541e 	bne	r3,r2,20074c0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2007370:	e0bff60b 	ldhu	r2,-40(fp)
 2007374:	100b883a 	mov	r5,r2
 2007378:	e13ff117 	ldw	r4,-60(fp)
 200737c:	20078700 	call	2007870 <OS_FlagTaskRdy>
 2007380:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2007384:	e0bff683 	ldbu	r2,-38(fp)
 2007388:	10800058 	cmpnei	r2,r2,1
 200738c:	10004c1e 	bne	r2,zero,20074c0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2007390:	00800044 	movi	r2,1
 2007394:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2007398:	00004906 	br	20074c0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 200739c:	e0bffc17 	ldw	r2,-16(fp)
 20073a0:	10c0020b 	ldhu	r3,8(r2)
 20073a4:	e0bff117 	ldw	r2,-60(fp)
 20073a8:	1080040b 	ldhu	r2,16(r2)
 20073ac:	1884703a 	and	r2,r3,r2
 20073b0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 20073b4:	e0bff60b 	ldhu	r2,-40(fp)
 20073b8:	10004326 	beq	r2,zero,20074c8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20073bc:	e0bff60b 	ldhu	r2,-40(fp)
 20073c0:	100b883a 	mov	r5,r2
 20073c4:	e13ff117 	ldw	r4,-60(fp)
 20073c8:	20078700 	call	2007870 <OS_FlagTaskRdy>
 20073cc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20073d0:	e0bff683 	ldbu	r2,-38(fp)
 20073d4:	10800058 	cmpnei	r2,r2,1
 20073d8:	10003b1e 	bne	r2,zero,20074c8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20073dc:	00800044 	movi	r2,1
 20073e0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20073e4:	00003806 	br	20074c8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20073e8:	e0bffc17 	ldw	r2,-16(fp)
 20073ec:	1080020b 	ldhu	r2,8(r2)
 20073f0:	0084303a 	nor	r2,zero,r2
 20073f4:	1007883a 	mov	r3,r2
 20073f8:	e0bff117 	ldw	r2,-60(fp)
 20073fc:	1080040b 	ldhu	r2,16(r2)
 2007400:	1884703a 	and	r2,r3,r2
 2007404:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2007408:	e0bff117 	ldw	r2,-60(fp)
 200740c:	1080040b 	ldhu	r2,16(r2)
 2007410:	10ffffcc 	andi	r3,r2,65535
 2007414:	e0bff60b 	ldhu	r2,-40(fp)
 2007418:	18802d1e 	bne	r3,r2,20074d0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 200741c:	e0bff60b 	ldhu	r2,-40(fp)
 2007420:	100b883a 	mov	r5,r2
 2007424:	e13ff117 	ldw	r4,-60(fp)
 2007428:	20078700 	call	2007870 <OS_FlagTaskRdy>
 200742c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2007430:	e0bff683 	ldbu	r2,-38(fp)
 2007434:	10800058 	cmpnei	r2,r2,1
 2007438:	1000251e 	bne	r2,zero,20074d0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 200743c:	00800044 	movi	r2,1
 2007440:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2007444:	00002206 	br	20074d0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2007448:	e0bffc17 	ldw	r2,-16(fp)
 200744c:	1080020b 	ldhu	r2,8(r2)
 2007450:	0084303a 	nor	r2,zero,r2
 2007454:	1007883a 	mov	r3,r2
 2007458:	e0bff117 	ldw	r2,-60(fp)
 200745c:	1080040b 	ldhu	r2,16(r2)
 2007460:	1884703a 	and	r2,r3,r2
 2007464:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2007468:	e0bff60b 	ldhu	r2,-40(fp)
 200746c:	10001a26 	beq	r2,zero,20074d8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2007470:	e0bff60b 	ldhu	r2,-40(fp)
 2007474:	100b883a 	mov	r5,r2
 2007478:	e13ff117 	ldw	r4,-60(fp)
 200747c:	20078700 	call	2007870 <OS_FlagTaskRdy>
 2007480:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2007484:	e0bff683 	ldbu	r2,-38(fp)
 2007488:	10800058 	cmpnei	r2,r2,1
 200748c:	1000121e 	bne	r2,zero,20074d8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2007490:	00800044 	movi	r2,1
 2007494:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2007498:	00000f06 	br	20074d8 <OSFlagPost+0x300>
 200749c:	e0bff317 	ldw	r2,-52(fp)
 20074a0:	e0bff515 	stw	r2,-44(fp)
 20074a4:	e0bff517 	ldw	r2,-44(fp)
 20074a8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 20074ac:	e0bfff17 	ldw	r2,-4(fp)
 20074b0:	00c01bc4 	movi	r3,111
 20074b4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 20074b8:	0005883a 	mov	r2,zero
 20074bc:	00002606 	br	2007558 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20074c0:	0001883a 	nop
 20074c4:	00000506 	br	20074dc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20074c8:	0001883a 	nop
 20074cc:	00000306 	br	20074dc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20074d0:	0001883a 	nop
 20074d4:	00000106 	br	20074dc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 20074d8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 20074dc:	e0bff117 	ldw	r2,-60(fp)
 20074e0:	10800017 	ldw	r2,0(r2)
 20074e4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20074e8:	e0bff117 	ldw	r2,-60(fp)
 20074ec:	103f871e 	bne	r2,zero,200730c <OSFlagPost+0x134>
 20074f0:	e0bff317 	ldw	r2,-52(fp)
 20074f4:	e0bff715 	stw	r2,-36(fp)
 20074f8:	e0bff717 	ldw	r2,-36(fp)
 20074fc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2007500:	e0bff203 	ldbu	r2,-56(fp)
 2007504:	10800058 	cmpnei	r2,r2,1
 2007508:	1000011e 	bne	r2,zero,2007510 <OSFlagPost+0x338>
        OS_Sched();
 200750c:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007510:	0005303a 	rdctl	r2,status
 2007514:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007518:	e0fffa17 	ldw	r3,-24(fp)
 200751c:	00bfff84 	movi	r2,-2
 2007520:	1884703a 	and	r2,r3,r2
 2007524:	1001703a 	wrctl	status,r2
  
  return context;
 2007528:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 200752c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2007530:	e0bffc17 	ldw	r2,-16(fp)
 2007534:	1080020b 	ldhu	r2,8(r2)
 2007538:	e0bff90d 	sth	r2,-28(fp)
 200753c:	e0bff317 	ldw	r2,-52(fp)
 2007540:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007544:	e0bff817 	ldw	r2,-32(fp)
 2007548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 200754c:	e0bfff17 	ldw	r2,-4(fp)
 2007550:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2007554:	e0bff90b 	ldhu	r2,-28(fp)
}
 2007558:	e037883a 	mov	sp,fp
 200755c:	dfc00117 	ldw	ra,4(sp)
 2007560:	df000017 	ldw	fp,0(sp)
 2007564:	dec00204 	addi	sp,sp,8
 2007568:	f800283a 	ret

0200756c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 200756c:	defff904 	addi	sp,sp,-28
 2007570:	df000615 	stw	fp,24(sp)
 2007574:	df000604 	addi	fp,sp,24
 2007578:	e13ffe15 	stw	r4,-8(fp)
 200757c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2007580:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2007584:	e0bfff17 	ldw	r2,-4(fp)
 2007588:	1000021e 	bne	r2,zero,2007594 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 200758c:	0005883a 	mov	r2,zero
 2007590:	00002306 	br	2007620 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2007594:	e0bffe17 	ldw	r2,-8(fp)
 2007598:	1000051e 	bne	r2,zero,20075b0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 200759c:	e0bfff17 	ldw	r2,-4(fp)
 20075a0:	00c01b84 	movi	r3,110
 20075a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20075a8:	0005883a 	mov	r2,zero
 20075ac:	00001c06 	br	2007620 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 20075b0:	e0bffe17 	ldw	r2,-8(fp)
 20075b4:	10800003 	ldbu	r2,0(r2)
 20075b8:	10803fcc 	andi	r2,r2,255
 20075bc:	10800160 	cmpeqi	r2,r2,5
 20075c0:	1000051e 	bne	r2,zero,20075d8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20075c4:	e0bfff17 	ldw	r2,-4(fp)
 20075c8:	00c00044 	movi	r3,1
 20075cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20075d0:	0005883a 	mov	r2,zero
 20075d4:	00001206 	br	2007620 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20075d8:	0005303a 	rdctl	r2,status
 20075dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20075e0:	e0fffc17 	ldw	r3,-16(fp)
 20075e4:	00bfff84 	movi	r2,-2
 20075e8:	1884703a 	and	r2,r3,r2
 20075ec:	1001703a 	wrctl	status,r2
  
  return context;
 20075f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20075f4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 20075f8:	e0bffe17 	ldw	r2,-8(fp)
 20075fc:	1080020b 	ldhu	r2,8(r2)
 2007600:	e0bffb0d 	sth	r2,-20(fp)
 2007604:	e0bffa17 	ldw	r2,-24(fp)
 2007608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200760c:	e0bffd17 	ldw	r2,-12(fp)
 2007610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2007614:	e0bfff17 	ldw	r2,-4(fp)
 2007618:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 200761c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2007620:	e037883a 	mov	sp,fp
 2007624:	df000017 	ldw	fp,0(sp)
 2007628:	dec00104 	addi	sp,sp,4
 200762c:	f800283a 	ret

02007630 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2007630:	defff804 	addi	sp,sp,-32
 2007634:	df000715 	stw	fp,28(sp)
 2007638:	df000704 	addi	fp,sp,28
 200763c:	e13ffb15 	stw	r4,-20(fp)
 2007640:	e17ffc15 	stw	r5,-16(fp)
 2007644:	3009883a 	mov	r4,r6
 2007648:	3807883a 	mov	r3,r7
 200764c:	e0800117 	ldw	r2,4(fp)
 2007650:	e13ffd0d 	sth	r4,-12(fp)
 2007654:	e0fffe05 	stb	r3,-8(fp)
 2007658:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 200765c:	d0a70d17 	ldw	r2,-25548(gp)
 2007660:	d0e70d17 	ldw	r3,-25548(gp)
 2007664:	18c00c03 	ldbu	r3,48(r3)
 2007668:	18c00814 	ori	r3,r3,32
 200766c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2007670:	d0a70d17 	ldw	r2,-25548(gp)
 2007674:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2007678:	d0a70d17 	ldw	r2,-25548(gp)
 200767c:	e0ffff0b 	ldhu	r3,-4(fp)
 2007680:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2007684:	d0a70d17 	ldw	r2,-25548(gp)
 2007688:	e0fffc17 	ldw	r3,-16(fp)
 200768c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2007690:	e0bffc17 	ldw	r2,-16(fp)
 2007694:	e0fffd0b 	ldhu	r3,-12(fp)
 2007698:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 200769c:	e0bffc17 	ldw	r2,-16(fp)
 20076a0:	e0fffe03 	ldbu	r3,-8(fp)
 20076a4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 20076a8:	d0e70d17 	ldw	r3,-25548(gp)
 20076ac:	e0bffc17 	ldw	r2,-16(fp)
 20076b0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 20076b4:	e0bffb17 	ldw	r2,-20(fp)
 20076b8:	10c00117 	ldw	r3,4(r2)
 20076bc:	e0bffc17 	ldw	r2,-16(fp)
 20076c0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 20076c4:	e0bffc17 	ldw	r2,-16(fp)
 20076c8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 20076cc:	e0bffc17 	ldw	r2,-16(fp)
 20076d0:	e0fffb17 	ldw	r3,-20(fp)
 20076d4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20076d8:	e0bffb17 	ldw	r2,-20(fp)
 20076dc:	10800117 	ldw	r2,4(r2)
 20076e0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20076e4:	e0bff917 	ldw	r2,-28(fp)
 20076e8:	10000326 	beq	r2,zero,20076f8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20076ec:	e0bff917 	ldw	r2,-28(fp)
 20076f0:	e0fffc17 	ldw	r3,-16(fp)
 20076f4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20076f8:	e0bffb17 	ldw	r2,-20(fp)
 20076fc:	e0fffc17 	ldw	r3,-16(fp)
 2007700:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2007704:	d0a70d17 	ldw	r2,-25548(gp)
 2007708:	10800d03 	ldbu	r2,52(r2)
 200770c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2007710:	e0fffa03 	ldbu	r3,-24(fp)
 2007714:	e13ffa03 	ldbu	r4,-24(fp)
 2007718:	d0a70a44 	addi	r2,gp,-25559
 200771c:	2085883a 	add	r2,r4,r2
 2007720:	10800003 	ldbu	r2,0(r2)
 2007724:	1009883a 	mov	r4,r2
 2007728:	d0a70d17 	ldw	r2,-25548(gp)
 200772c:	10800d43 	ldbu	r2,53(r2)
 2007730:	0084303a 	nor	r2,zero,r2
 2007734:	2084703a 	and	r2,r4,r2
 2007738:	1009883a 	mov	r4,r2
 200773c:	d0a70a44 	addi	r2,gp,-25559
 2007740:	1885883a 	add	r2,r3,r2
 2007744:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2007748:	e0fffa03 	ldbu	r3,-24(fp)
 200774c:	d0a70a44 	addi	r2,gp,-25559
 2007750:	1885883a 	add	r2,r3,r2
 2007754:	10800003 	ldbu	r2,0(r2)
 2007758:	10803fcc 	andi	r2,r2,255
 200775c:	1000071e 	bne	r2,zero,200777c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2007760:	d0a70d17 	ldw	r2,-25548(gp)
 2007764:	10800d83 	ldbu	r2,54(r2)
 2007768:	0084303a 	nor	r2,zero,r2
 200776c:	1007883a 	mov	r3,r2
 2007770:	d0a70a03 	ldbu	r2,-25560(gp)
 2007774:	1884703a 	and	r2,r3,r2
 2007778:	d0a70a05 	stb	r2,-25560(gp)
    }
}
 200777c:	0001883a 	nop
 2007780:	e037883a 	mov	sp,fp
 2007784:	df000017 	ldw	fp,0(sp)
 2007788:	dec00104 	addi	sp,sp,4
 200778c:	f800283a 	ret

02007790 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2007790:	defffb04 	addi	sp,sp,-20
 2007794:	dfc00415 	stw	ra,16(sp)
 2007798:	df000315 	stw	fp,12(sp)
 200779c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 20077a0:	0140dc04 	movi	r5,880
 20077a4:	010080b4 	movhi	r4,514
 20077a8:	21202604 	addi	r4,r4,-32616
 20077ac:	20059d40 	call	20059d4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 20077b0:	008080b4 	movhi	r2,514
 20077b4:	10a02604 	addi	r2,r2,-32616
 20077b8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20077bc:	008080b4 	movhi	r2,514
 20077c0:	10a03104 	addi	r2,r2,-32572
 20077c4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20077c8:	e03ffd0d 	sth	zero,-12(fp)
 20077cc:	00001306 	br	200781c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20077d0:	e0bffe17 	ldw	r2,-8(fp)
 20077d4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 20077d8:	e0bffe17 	ldw	r2,-8(fp)
 20077dc:	e0ffff17 	ldw	r3,-4(fp)
 20077e0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 20077e4:	e0bffe17 	ldw	r2,-8(fp)
 20077e8:	00c00fc4 	movi	r3,63
 20077ec:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20077f0:	e0bffe17 	ldw	r2,-8(fp)
 20077f4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 20077f8:	e0bffe17 	ldw	r2,-8(fp)
 20077fc:	10800b04 	addi	r2,r2,44
 2007800:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2007804:	e0bfff17 	ldw	r2,-4(fp)
 2007808:	10800b04 	addi	r2,r2,44
 200780c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2007810:	e0bffd0b 	ldhu	r2,-12(fp)
 2007814:	10800044 	addi	r2,r2,1
 2007818:	e0bffd0d 	sth	r2,-12(fp)
 200781c:	e0bffd0b 	ldhu	r2,-12(fp)
 2007820:	108004f0 	cmpltui	r2,r2,19
 2007824:	103fea1e 	bne	r2,zero,20077d0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2007828:	e0bffe17 	ldw	r2,-8(fp)
 200782c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2007830:	e0bffe17 	ldw	r2,-8(fp)
 2007834:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2007838:	e0bffe17 	ldw	r2,-8(fp)
 200783c:	00c00fc4 	movi	r3,63
 2007840:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2007844:	e0bffe17 	ldw	r2,-8(fp)
 2007848:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 200784c:	008080b4 	movhi	r2,514
 2007850:	10a02604 	addi	r2,r2,-32616
 2007854:	d0a70f15 	stw	r2,-25540(gp)
#endif
}
 2007858:	0001883a 	nop
 200785c:	e037883a 	mov	sp,fp
 2007860:	dfc00117 	ldw	ra,4(sp)
 2007864:	df000017 	ldw	fp,0(sp)
 2007868:	dec00204 	addi	sp,sp,8
 200786c:	f800283a 	ret

02007870 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2007870:	defffa04 	addi	sp,sp,-24
 2007874:	dfc00515 	stw	ra,20(sp)
 2007878:	df000415 	stw	fp,16(sp)
 200787c:	df000404 	addi	fp,sp,16
 2007880:	e13ffe15 	stw	r4,-8(fp)
 2007884:	2805883a 	mov	r2,r5
 2007888:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 200788c:	e0bffe17 	ldw	r2,-8(fp)
 2007890:	10800217 	ldw	r2,8(r2)
 2007894:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2007898:	e0bffd17 	ldw	r2,-12(fp)
 200789c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 20078a0:	e0bffd17 	ldw	r2,-12(fp)
 20078a4:	e0ffff0b 	ldhu	r3,-4(fp)
 20078a8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 20078ac:	e0bffd17 	ldw	r2,-12(fp)
 20078b0:	10c00c03 	ldbu	r3,48(r2)
 20078b4:	00bff7c4 	movi	r2,-33
 20078b8:	1884703a 	and	r2,r3,r2
 20078bc:	1007883a 	mov	r3,r2
 20078c0:	e0bffd17 	ldw	r2,-12(fp)
 20078c4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 20078c8:	e0bffd17 	ldw	r2,-12(fp)
 20078cc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 20078d0:	e0bffd17 	ldw	r2,-12(fp)
 20078d4:	10800c03 	ldbu	r2,48(r2)
 20078d8:	10803fcc 	andi	r2,r2,255
 20078dc:	1000181e 	bne	r2,zero,2007940 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 20078e0:	e0bffd17 	ldw	r2,-12(fp)
 20078e4:	10c00d83 	ldbu	r3,54(r2)
 20078e8:	d0a70a03 	ldbu	r2,-25560(gp)
 20078ec:	1884b03a 	or	r2,r3,r2
 20078f0:	d0a70a05 	stb	r2,-25560(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20078f4:	e0bffd17 	ldw	r2,-12(fp)
 20078f8:	10800d03 	ldbu	r2,52(r2)
 20078fc:	10c03fcc 	andi	r3,r2,255
 2007900:	e0bffd17 	ldw	r2,-12(fp)
 2007904:	10800d03 	ldbu	r2,52(r2)
 2007908:	11003fcc 	andi	r4,r2,255
 200790c:	d0a70a44 	addi	r2,gp,-25559
 2007910:	2085883a 	add	r2,r4,r2
 2007914:	11000003 	ldbu	r4,0(r2)
 2007918:	e0bffd17 	ldw	r2,-12(fp)
 200791c:	10800d43 	ldbu	r2,53(r2)
 2007920:	2084b03a 	or	r2,r4,r2
 2007924:	1009883a 	mov	r4,r2
 2007928:	d0a70a44 	addi	r2,gp,-25559
 200792c:	1885883a 	add	r2,r3,r2
 2007930:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2007934:	00800044 	movi	r2,1
 2007938:	e0bffc05 	stb	r2,-16(fp)
 200793c:	00000106 	br	2007944 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 2007940:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2007944:	e13ffe17 	ldw	r4,-8(fp)
 2007948:	20079640 	call	2007964 <OS_FlagUnlink>
    return (sched);
 200794c:	e0bffc03 	ldbu	r2,-16(fp)
}
 2007950:	e037883a 	mov	sp,fp
 2007954:	dfc00117 	ldw	ra,4(sp)
 2007958:	df000017 	ldw	fp,0(sp)
 200795c:	dec00204 	addi	sp,sp,8
 2007960:	f800283a 	ret

02007964 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2007964:	defffa04 	addi	sp,sp,-24
 2007968:	df000515 	stw	fp,20(sp)
 200796c:	df000504 	addi	fp,sp,20
 2007970:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2007974:	e0bfff17 	ldw	r2,-4(fp)
 2007978:	10800117 	ldw	r2,4(r2)
 200797c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2007980:	e0bfff17 	ldw	r2,-4(fp)
 2007984:	10800017 	ldw	r2,0(r2)
 2007988:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 200798c:	e0bffb17 	ldw	r2,-20(fp)
 2007990:	10000b1e 	bne	r2,zero,20079c0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2007994:	e0bfff17 	ldw	r2,-4(fp)
 2007998:	10800317 	ldw	r2,12(r2)
 200799c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 20079a0:	e0bffd17 	ldw	r2,-12(fp)
 20079a4:	e0fffc17 	ldw	r3,-16(fp)
 20079a8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 20079ac:	e0bffc17 	ldw	r2,-16(fp)
 20079b0:	10000b26 	beq	r2,zero,20079e0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 20079b4:	e0bffc17 	ldw	r2,-16(fp)
 20079b8:	10000115 	stw	zero,4(r2)
 20079bc:	00000806 	br	20079e0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 20079c0:	e0bffb17 	ldw	r2,-20(fp)
 20079c4:	e0fffc17 	ldw	r3,-16(fp)
 20079c8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 20079cc:	e0bffc17 	ldw	r2,-16(fp)
 20079d0:	10000326 	beq	r2,zero,20079e0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 20079d4:	e0bffc17 	ldw	r2,-16(fp)
 20079d8:	e0fffb17 	ldw	r3,-20(fp)
 20079dc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 20079e0:	e0bfff17 	ldw	r2,-4(fp)
 20079e4:	10800217 	ldw	r2,8(r2)
 20079e8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 20079ec:	e0bffe17 	ldw	r2,-8(fp)
 20079f0:	10000a15 	stw	zero,40(r2)
#endif
}
 20079f4:	0001883a 	nop
 20079f8:	e037883a 	mov	sp,fp
 20079fc:	df000017 	ldw	fp,0(sp)
 2007a00:	dec00104 	addi	sp,sp,4
 2007a04:	f800283a 	ret

02007a08 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 2007a08:	defffa04 	addi	sp,sp,-24
 2007a0c:	df000515 	stw	fp,20(sp)
 2007a10:	df000504 	addi	fp,sp,20
 2007a14:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 2007a18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2007a1c:	e0bfff17 	ldw	r2,-4(fp)
 2007a20:	1000021e 	bne	r2,zero,2007a2c <OSMboxAccept+0x24>
        return ((void *)0);
 2007a24:	0005883a 	mov	r2,zero
 2007a28:	00001906 	br	2007a90 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2007a2c:	e0bfff17 	ldw	r2,-4(fp)
 2007a30:	10800003 	ldbu	r2,0(r2)
 2007a34:	10803fcc 	andi	r2,r2,255
 2007a38:	10800060 	cmpeqi	r2,r2,1
 2007a3c:	1000021e 	bne	r2,zero,2007a48 <OSMboxAccept+0x40>
        return ((void *)0);
 2007a40:	0005883a 	mov	r2,zero
 2007a44:	00001206 	br	2007a90 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007a48:	0005303a 	rdctl	r2,status
 2007a4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007a50:	e0fffd17 	ldw	r3,-12(fp)
 2007a54:	00bfff84 	movi	r2,-2
 2007a58:	1884703a 	and	r2,r3,r2
 2007a5c:	1001703a 	wrctl	status,r2
  
  return context;
 2007a60:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2007a64:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 2007a68:	e0bfff17 	ldw	r2,-4(fp)
 2007a6c:	10800117 	ldw	r2,4(r2)
 2007a70:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 2007a74:	e0bfff17 	ldw	r2,-4(fp)
 2007a78:	10000115 	stw	zero,4(r2)
 2007a7c:	e0bffb17 	ldw	r2,-20(fp)
 2007a80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007a84:	e0bffe17 	ldw	r2,-8(fp)
 2007a88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 2007a8c:	e0bffc17 	ldw	r2,-16(fp)
}
 2007a90:	e037883a 	mov	sp,fp
 2007a94:	df000017 	ldw	fp,0(sp)
 2007a98:	dec00104 	addi	sp,sp,4
 2007a9c:	f800283a 	ret

02007aa0 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 2007aa0:	defff904 	addi	sp,sp,-28
 2007aa4:	dfc00615 	stw	ra,24(sp)
 2007aa8:	df000515 	stw	fp,20(sp)
 2007aac:	df000504 	addi	fp,sp,20
 2007ab0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2007ab4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2007ab8:	d0a70c03 	ldbu	r2,-25552(gp)
 2007abc:	10803fcc 	andi	r2,r2,255
 2007ac0:	10000226 	beq	r2,zero,2007acc <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2007ac4:	0005883a 	mov	r2,zero
 2007ac8:	00002506 	br	2007b60 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007acc:	0005303a 	rdctl	r2,status
 2007ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007ad4:	e0fffe17 	ldw	r3,-8(fp)
 2007ad8:	00bfff84 	movi	r2,-2
 2007adc:	1884703a 	and	r2,r3,r2
 2007ae0:	1001703a 	wrctl	status,r2
  
  return context;
 2007ae4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2007ae8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2007aec:	d0a70b17 	ldw	r2,-25556(gp)
 2007af0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2007af4:	d0a70b17 	ldw	r2,-25556(gp)
 2007af8:	10000326 	beq	r2,zero,2007b08 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2007afc:	d0a70b17 	ldw	r2,-25556(gp)
 2007b00:	10800117 	ldw	r2,4(r2)
 2007b04:	d0a70b15 	stw	r2,-25556(gp)
 2007b08:	e0bffb17 	ldw	r2,-20(fp)
 2007b0c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007b10:	e0bffc17 	ldw	r2,-16(fp)
 2007b14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 2007b18:	e0bffd17 	ldw	r2,-12(fp)
 2007b1c:	10000f26 	beq	r2,zero,2007b5c <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 2007b20:	e0bffd17 	ldw	r2,-12(fp)
 2007b24:	00c00044 	movi	r3,1
 2007b28:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2007b2c:	e0bffd17 	ldw	r2,-12(fp)
 2007b30:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2007b34:	e0bffd17 	ldw	r2,-12(fp)
 2007b38:	e0ffff17 	ldw	r3,-4(fp)
 2007b3c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 2007b40:	e0bffd17 	ldw	r2,-12(fp)
 2007b44:	00c00fc4 	movi	r3,63
 2007b48:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2007b4c:	e0bffd17 	ldw	r2,-12(fp)
 2007b50:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2007b54:	e13ffd17 	ldw	r4,-12(fp)
 2007b58:	20055f40 	call	20055f4 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 2007b5c:	e0bffd17 	ldw	r2,-12(fp)
}
 2007b60:	e037883a 	mov	sp,fp
 2007b64:	dfc00117 	ldw	ra,4(sp)
 2007b68:	df000017 	ldw	fp,0(sp)
 2007b6c:	dec00204 	addi	sp,sp,8
 2007b70:	f800283a 	ret

02007b74 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2007b74:	defff304 	addi	sp,sp,-52
 2007b78:	dfc00c15 	stw	ra,48(sp)
 2007b7c:	df000b15 	stw	fp,44(sp)
 2007b80:	df000b04 	addi	fp,sp,44
 2007b84:	e13ffd15 	stw	r4,-12(fp)
 2007b88:	2805883a 	mov	r2,r5
 2007b8c:	e1bfff15 	stw	r6,-4(fp)
 2007b90:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2007b94:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2007b98:	e0bfff17 	ldw	r2,-4(fp)
 2007b9c:	1000021e 	bne	r2,zero,2007ba8 <OSMboxDel+0x34>
        return (pevent);
 2007ba0:	e0bffd17 	ldw	r2,-12(fp)
 2007ba4:	00007e06 	br	2007da0 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2007ba8:	e0bffd17 	ldw	r2,-12(fp)
 2007bac:	1000051e 	bne	r2,zero,2007bc4 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2007bb0:	e0bfff17 	ldw	r2,-4(fp)
 2007bb4:	00c00104 	movi	r3,4
 2007bb8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2007bbc:	e0bffd17 	ldw	r2,-12(fp)
 2007bc0:	00007706 	br	2007da0 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2007bc4:	e0bffd17 	ldw	r2,-12(fp)
 2007bc8:	10800003 	ldbu	r2,0(r2)
 2007bcc:	10803fcc 	andi	r2,r2,255
 2007bd0:	10800060 	cmpeqi	r2,r2,1
 2007bd4:	1000051e 	bne	r2,zero,2007bec <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2007bd8:	e0bfff17 	ldw	r2,-4(fp)
 2007bdc:	00c00044 	movi	r3,1
 2007be0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2007be4:	e0bffd17 	ldw	r2,-12(fp)
 2007be8:	00006d06 	br	2007da0 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2007bec:	d0a70c03 	ldbu	r2,-25552(gp)
 2007bf0:	10803fcc 	andi	r2,r2,255
 2007bf4:	10000526 	beq	r2,zero,2007c0c <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2007bf8:	e0bfff17 	ldw	r2,-4(fp)
 2007bfc:	00c003c4 	movi	r3,15
 2007c00:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2007c04:	e0bffd17 	ldw	r2,-12(fp)
 2007c08:	00006506 	br	2007da0 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007c0c:	0005303a 	rdctl	r2,status
 2007c10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007c14:	e0fffc17 	ldw	r3,-16(fp)
 2007c18:	00bfff84 	movi	r2,-2
 2007c1c:	1884703a 	and	r2,r3,r2
 2007c20:	1001703a 	wrctl	status,r2
  
  return context;
 2007c24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2007c28:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2007c2c:	e0bffd17 	ldw	r2,-12(fp)
 2007c30:	10800283 	ldbu	r2,10(r2)
 2007c34:	10803fcc 	andi	r2,r2,255
 2007c38:	10000326 	beq	r2,zero,2007c48 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2007c3c:	00800044 	movi	r2,1
 2007c40:	e0bff505 	stb	r2,-44(fp)
 2007c44:	00000106 	br	2007c4c <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2007c48:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2007c4c:	e0bffe03 	ldbu	r2,-8(fp)
 2007c50:	10000326 	beq	r2,zero,2007c60 <OSMboxDel+0xec>
 2007c54:	10800060 	cmpeqi	r2,r2,1
 2007c58:	1000281e 	bne	r2,zero,2007cfc <OSMboxDel+0x188>
 2007c5c:	00004506 	br	2007d74 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 2007c60:	e0bff503 	ldbu	r2,-44(fp)
 2007c64:	1000161e 	bne	r2,zero,2007cc0 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2007c68:	e0bffd17 	ldw	r2,-12(fp)
 2007c6c:	00c00fc4 	movi	r3,63
 2007c70:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2007c74:	e0bffd17 	ldw	r2,-12(fp)
 2007c78:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 2007c7c:	e0bffd17 	ldw	r2,-12(fp)
 2007c80:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 2007c84:	d0e70b17 	ldw	r3,-25556(gp)
 2007c88:	e0bffd17 	ldw	r2,-12(fp)
 2007c8c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 2007c90:	e0bffd17 	ldw	r2,-12(fp)
 2007c94:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 2007c98:	e0bffd17 	ldw	r2,-12(fp)
 2007c9c:	d0a70b15 	stw	r2,-25556(gp)
 2007ca0:	e0bff717 	ldw	r2,-36(fp)
 2007ca4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007ca8:	e0bff817 	ldw	r2,-32(fp)
 2007cac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 2007cb0:	e0bfff17 	ldw	r2,-4(fp)
 2007cb4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 2007cb8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2007cbc:	00003706 	br	2007d9c <OSMboxDel+0x228>
 2007cc0:	e0bff717 	ldw	r2,-36(fp)
 2007cc4:	e0bff915 	stw	r2,-28(fp)
 2007cc8:	e0bff917 	ldw	r2,-28(fp)
 2007ccc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 2007cd0:	e0bfff17 	ldw	r2,-4(fp)
 2007cd4:	00c01244 	movi	r3,73
 2007cd8:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 2007cdc:	e0bffd17 	ldw	r2,-12(fp)
 2007ce0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2007ce4:	00002d06 	br	2007d9c <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2007ce8:	000f883a 	mov	r7,zero
 2007cec:	01800084 	movi	r6,2
 2007cf0:	000b883a 	mov	r5,zero
 2007cf4:	e13ffd17 	ldw	r4,-12(fp)
 2007cf8:	20050440 	call	2005044 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 2007cfc:	e0bffd17 	ldw	r2,-12(fp)
 2007d00:	10800283 	ldbu	r2,10(r2)
 2007d04:	10803fcc 	andi	r2,r2,255
 2007d08:	103ff71e 	bne	r2,zero,2007ce8 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2007d0c:	e0bffd17 	ldw	r2,-12(fp)
 2007d10:	00c00fc4 	movi	r3,63
 2007d14:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2007d18:	e0bffd17 	ldw	r2,-12(fp)
 2007d1c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2007d20:	e0bffd17 	ldw	r2,-12(fp)
 2007d24:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2007d28:	d0e70b17 	ldw	r3,-25556(gp)
 2007d2c:	e0bffd17 	ldw	r2,-12(fp)
 2007d30:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2007d34:	e0bffd17 	ldw	r2,-12(fp)
 2007d38:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2007d3c:	e0bffd17 	ldw	r2,-12(fp)
 2007d40:	d0a70b15 	stw	r2,-25556(gp)
 2007d44:	e0bff717 	ldw	r2,-36(fp)
 2007d48:	e0bffa15 	stw	r2,-24(fp)
 2007d4c:	e0bffa17 	ldw	r2,-24(fp)
 2007d50:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2007d54:	e0bff503 	ldbu	r2,-44(fp)
 2007d58:	10800058 	cmpnei	r2,r2,1
 2007d5c:	1000011e 	bne	r2,zero,2007d64 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2007d60:	2005a900 	call	2005a90 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2007d64:	e0bfff17 	ldw	r2,-4(fp)
 2007d68:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2007d6c:	e03ff615 	stw	zero,-40(fp)
             break;
 2007d70:	00000a06 	br	2007d9c <OSMboxDel+0x228>
 2007d74:	e0bff717 	ldw	r2,-36(fp)
 2007d78:	e0bffb15 	stw	r2,-20(fp)
 2007d7c:	e0bffb17 	ldw	r2,-20(fp)
 2007d80:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2007d84:	e0bfff17 	ldw	r2,-4(fp)
 2007d88:	00c001c4 	movi	r3,7
 2007d8c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 2007d90:	e0bffd17 	ldw	r2,-12(fp)
 2007d94:	e0bff615 	stw	r2,-40(fp)
             break;
 2007d98:	0001883a 	nop
    }
    return (pevent_return);
 2007d9c:	e0bff617 	ldw	r2,-40(fp)
}
 2007da0:	e037883a 	mov	sp,fp
 2007da4:	dfc00117 	ldw	ra,4(sp)
 2007da8:	df000017 	ldw	fp,0(sp)
 2007dac:	dec00204 	addi	sp,sp,8
 2007db0:	f800283a 	ret

02007db4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2007db4:	defff404 	addi	sp,sp,-48
 2007db8:	dfc00b15 	stw	ra,44(sp)
 2007dbc:	df000a15 	stw	fp,40(sp)
 2007dc0:	df000a04 	addi	fp,sp,40
 2007dc4:	e13ffd15 	stw	r4,-12(fp)
 2007dc8:	2805883a 	mov	r2,r5
 2007dcc:	e1bfff15 	stw	r6,-4(fp)
 2007dd0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2007dd4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2007dd8:	e0bfff17 	ldw	r2,-4(fp)
 2007ddc:	1000021e 	bne	r2,zero,2007de8 <OSMboxPend+0x34>
        return ((void *)0);
 2007de0:	0005883a 	mov	r2,zero
 2007de4:	00007b06 	br	2007fd4 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2007de8:	e0bffd17 	ldw	r2,-12(fp)
 2007dec:	1000051e 	bne	r2,zero,2007e04 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2007df0:	e0bfff17 	ldw	r2,-4(fp)
 2007df4:	00c00104 	movi	r3,4
 2007df8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2007dfc:	0005883a 	mov	r2,zero
 2007e00:	00007406 	br	2007fd4 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2007e04:	e0bffd17 	ldw	r2,-12(fp)
 2007e08:	10800003 	ldbu	r2,0(r2)
 2007e0c:	10803fcc 	andi	r2,r2,255
 2007e10:	10800060 	cmpeqi	r2,r2,1
 2007e14:	1000051e 	bne	r2,zero,2007e2c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2007e18:	e0bfff17 	ldw	r2,-4(fp)
 2007e1c:	00c00044 	movi	r3,1
 2007e20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2007e24:	0005883a 	mov	r2,zero
 2007e28:	00006a06 	br	2007fd4 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2007e2c:	d0a70c03 	ldbu	r2,-25552(gp)
 2007e30:	10803fcc 	andi	r2,r2,255
 2007e34:	10000526 	beq	r2,zero,2007e4c <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2007e38:	e0bfff17 	ldw	r2,-4(fp)
 2007e3c:	00c00084 	movi	r3,2
 2007e40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2007e44:	0005883a 	mov	r2,zero
 2007e48:	00006206 	br	2007fd4 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2007e4c:	d0a6fe03 	ldbu	r2,-25608(gp)
 2007e50:	10803fcc 	andi	r2,r2,255
 2007e54:	10000526 	beq	r2,zero,2007e6c <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2007e58:	e0bfff17 	ldw	r2,-4(fp)
 2007e5c:	00c00344 	movi	r3,13
 2007e60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2007e64:	0005883a 	mov	r2,zero
 2007e68:	00005a06 	br	2007fd4 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007e6c:	0005303a 	rdctl	r2,status
 2007e70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007e74:	e0fffc17 	ldw	r3,-16(fp)
 2007e78:	00bfff84 	movi	r2,-2
 2007e7c:	1884703a 	and	r2,r3,r2
 2007e80:	1001703a 	wrctl	status,r2
  
  return context;
 2007e84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2007e88:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2007e8c:	e0bffd17 	ldw	r2,-12(fp)
 2007e90:	10800117 	ldw	r2,4(r2)
 2007e94:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 2007e98:	e0bff617 	ldw	r2,-40(fp)
 2007e9c:	10000a26 	beq	r2,zero,2007ec8 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2007ea0:	e0bffd17 	ldw	r2,-12(fp)
 2007ea4:	10000115 	stw	zero,4(r2)
 2007ea8:	e0bff717 	ldw	r2,-36(fp)
 2007eac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007eb0:	e0bff817 	ldw	r2,-32(fp)
 2007eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2007eb8:	e0bfff17 	ldw	r2,-4(fp)
 2007ebc:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2007ec0:	e0bff617 	ldw	r2,-40(fp)
 2007ec4:	00004306 	br	2007fd4 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2007ec8:	d0a70d17 	ldw	r2,-25548(gp)
 2007ecc:	d0e70d17 	ldw	r3,-25548(gp)
 2007ed0:	18c00c03 	ldbu	r3,48(r3)
 2007ed4:	18c00094 	ori	r3,r3,2
 2007ed8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2007edc:	d0a70d17 	ldw	r2,-25548(gp)
 2007ee0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2007ee4:	d0a70d17 	ldw	r2,-25548(gp)
 2007ee8:	e0fffe0b 	ldhu	r3,-8(fp)
 2007eec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2007ef0:	e13ffd17 	ldw	r4,-12(fp)
 2007ef4:	20051dc0 	call	20051dc <OS_EventTaskWait>
 2007ef8:	e0bff717 	ldw	r2,-36(fp)
 2007efc:	e0bffb15 	stw	r2,-20(fp)
 2007f00:	e0bffb17 	ldw	r2,-20(fp)
 2007f04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2007f08:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007f0c:	0005303a 	rdctl	r2,status
 2007f10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007f14:	e0fff917 	ldw	r3,-28(fp)
 2007f18:	00bfff84 	movi	r2,-2
 2007f1c:	1884703a 	and	r2,r3,r2
 2007f20:	1001703a 	wrctl	status,r2
  
  return context;
 2007f24:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2007f28:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2007f2c:	d0a70d17 	ldw	r2,-25548(gp)
 2007f30:	10800c43 	ldbu	r2,49(r2)
 2007f34:	10803fcc 	andi	r2,r2,255
 2007f38:	10000326 	beq	r2,zero,2007f48 <OSMboxPend+0x194>
 2007f3c:	108000a0 	cmpeqi	r2,r2,2
 2007f40:	1000071e 	bne	r2,zero,2007f60 <OSMboxPend+0x1ac>
 2007f44:	00000b06 	br	2007f74 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2007f48:	d0a70d17 	ldw	r2,-25548(gp)
 2007f4c:	10800917 	ldw	r2,36(r2)
 2007f50:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2007f54:	e0bfff17 	ldw	r2,-4(fp)
 2007f58:	10000005 	stb	zero,0(r2)
             break;
 2007f5c:	00000e06 	br	2007f98 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2007f60:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2007f64:	e0bfff17 	ldw	r2,-4(fp)
 2007f68:	00c00384 	movi	r3,14
 2007f6c:	10c00005 	stb	r3,0(r2)
             break;
 2007f70:	00000906 	br	2007f98 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2007f74:	d0a70d17 	ldw	r2,-25548(gp)
 2007f78:	e17ffd17 	ldw	r5,-12(fp)
 2007f7c:	1009883a 	mov	r4,r2
 2007f80:	200543c0 	call	200543c <OS_EventTaskRemove>
             pmsg = (void *)0;
 2007f84:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2007f88:	e0bfff17 	ldw	r2,-4(fp)
 2007f8c:	00c00284 	movi	r3,10
 2007f90:	10c00005 	stb	r3,0(r2)
             break;
 2007f94:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2007f98:	d0a70d17 	ldw	r2,-25548(gp)
 2007f9c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2007fa0:	d0a70d17 	ldw	r2,-25548(gp)
 2007fa4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2007fa8:	d0a70d17 	ldw	r2,-25548(gp)
 2007fac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2007fb0:	d0a70d17 	ldw	r2,-25548(gp)
 2007fb4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2007fb8:	d0a70d17 	ldw	r2,-25548(gp)
 2007fbc:	10000915 	stw	zero,36(r2)
 2007fc0:	e0bff717 	ldw	r2,-36(fp)
 2007fc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007fc8:	e0bffa17 	ldw	r2,-24(fp)
 2007fcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2007fd0:	e0bff617 	ldw	r2,-40(fp)
}
 2007fd4:	e037883a 	mov	sp,fp
 2007fd8:	dfc00117 	ldw	ra,4(sp)
 2007fdc:	df000017 	ldw	fp,0(sp)
 2007fe0:	dec00204 	addi	sp,sp,8
 2007fe4:	f800283a 	ret

02007fe8 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2007fe8:	defff604 	addi	sp,sp,-40
 2007fec:	dfc00915 	stw	ra,36(sp)
 2007ff0:	df000815 	stw	fp,32(sp)
 2007ff4:	df000804 	addi	fp,sp,32
 2007ff8:	e13ffd15 	stw	r4,-12(fp)
 2007ffc:	2805883a 	mov	r2,r5
 2008000:	e1bfff15 	stw	r6,-4(fp)
 2008004:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2008008:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 200800c:	e0bfff17 	ldw	r2,-4(fp)
 2008010:	1000021e 	bne	r2,zero,200801c <OSMboxPendAbort+0x34>
        return (0);
 2008014:	0005883a 	mov	r2,zero
 2008018:	00004906 	br	2008140 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 200801c:	e0bffd17 	ldw	r2,-12(fp)
 2008020:	1000051e 	bne	r2,zero,2008038 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2008024:	e0bfff17 	ldw	r2,-4(fp)
 2008028:	00c00104 	movi	r3,4
 200802c:	10c00005 	stb	r3,0(r2)
        return (0);
 2008030:	0005883a 	mov	r2,zero
 2008034:	00004206 	br	2008140 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2008038:	e0bffd17 	ldw	r2,-12(fp)
 200803c:	10800003 	ldbu	r2,0(r2)
 2008040:	10803fcc 	andi	r2,r2,255
 2008044:	10800060 	cmpeqi	r2,r2,1
 2008048:	1000051e 	bne	r2,zero,2008060 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 200804c:	e0bfff17 	ldw	r2,-4(fp)
 2008050:	00c00044 	movi	r3,1
 2008054:	10c00005 	stb	r3,0(r2)
        return (0);
 2008058:	0005883a 	mov	r2,zero
 200805c:	00003806 	br	2008140 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008060:	0005303a 	rdctl	r2,status
 2008064:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008068:	e0fffc17 	ldw	r3,-16(fp)
 200806c:	00bfff84 	movi	r2,-2
 2008070:	1884703a 	and	r2,r3,r2
 2008074:	1001703a 	wrctl	status,r2
  
  return context;
 2008078:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200807c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2008080:	e0bffd17 	ldw	r2,-12(fp)
 2008084:	10800283 	ldbu	r2,10(r2)
 2008088:	10803fcc 	andi	r2,r2,255
 200808c:	10002526 	beq	r2,zero,2008124 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2008090:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2008094:	e0bffe03 	ldbu	r2,-8(fp)
 2008098:	10800060 	cmpeqi	r2,r2,1
 200809c:	10000e26 	beq	r2,zero,20080d8 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 20080a0:	00000806 	br	20080c4 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 20080a4:	01c00084 	movi	r7,2
 20080a8:	01800084 	movi	r6,2
 20080ac:	000b883a 	mov	r5,zero
 20080b0:	e13ffd17 	ldw	r4,-12(fp)
 20080b4:	20050440 	call	2005044 <OS_EventTaskRdy>
                     nbr_tasks++;
 20080b8:	e0bff803 	ldbu	r2,-32(fp)
 20080bc:	10800044 	addi	r2,r2,1
 20080c0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 20080c4:	e0bffd17 	ldw	r2,-12(fp)
 20080c8:	10800283 	ldbu	r2,10(r2)
 20080cc:	10803fcc 	andi	r2,r2,255
 20080d0:	103ff41e 	bne	r2,zero,20080a4 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20080d4:	00000906 	br	20080fc <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 20080d8:	01c00084 	movi	r7,2
 20080dc:	01800084 	movi	r6,2
 20080e0:	000b883a 	mov	r5,zero
 20080e4:	e13ffd17 	ldw	r4,-12(fp)
 20080e8:	20050440 	call	2005044 <OS_EventTaskRdy>
                 nbr_tasks++;
 20080ec:	e0bff803 	ldbu	r2,-32(fp)
 20080f0:	10800044 	addi	r2,r2,1
 20080f4:	e0bff805 	stb	r2,-32(fp)
                 break;
 20080f8:	0001883a 	nop
 20080fc:	e0bff917 	ldw	r2,-28(fp)
 2008100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008104:	e0bffa17 	ldw	r2,-24(fp)
 2008108:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 200810c:	2005a900 	call	2005a90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2008110:	e0bfff17 	ldw	r2,-4(fp)
 2008114:	00c00384 	movi	r3,14
 2008118:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 200811c:	e0bff803 	ldbu	r2,-32(fp)
 2008120:	00000706 	br	2008140 <OSMboxPendAbort+0x158>
 2008124:	e0bff917 	ldw	r2,-28(fp)
 2008128:	e0bffb15 	stw	r2,-20(fp)
 200812c:	e0bffb17 	ldw	r2,-20(fp)
 2008130:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2008134:	e0bfff17 	ldw	r2,-4(fp)
 2008138:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 200813c:	0005883a 	mov	r2,zero
}
 2008140:	e037883a 	mov	sp,fp
 2008144:	dfc00117 	ldw	ra,4(sp)
 2008148:	df000017 	ldw	fp,0(sp)
 200814c:	dec00204 	addi	sp,sp,8
 2008150:	f800283a 	ret

02008154 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2008154:	defff704 	addi	sp,sp,-36
 2008158:	dfc00815 	stw	ra,32(sp)
 200815c:	df000715 	stw	fp,28(sp)
 2008160:	df000704 	addi	fp,sp,28
 2008164:	e13ffe15 	stw	r4,-8(fp)
 2008168:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200816c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2008170:	e0bffe17 	ldw	r2,-8(fp)
 2008174:	1000021e 	bne	r2,zero,2008180 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2008178:	00800104 	movi	r2,4
 200817c:	00003406 	br	2008250 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2008180:	e0bfff17 	ldw	r2,-4(fp)
 2008184:	1000021e 	bne	r2,zero,2008190 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2008188:	008000c4 	movi	r2,3
 200818c:	00003006 	br	2008250 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2008190:	e0bffe17 	ldw	r2,-8(fp)
 2008194:	10800003 	ldbu	r2,0(r2)
 2008198:	10803fcc 	andi	r2,r2,255
 200819c:	10800060 	cmpeqi	r2,r2,1
 20081a0:	1000021e 	bne	r2,zero,20081ac <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 20081a4:	00800044 	movi	r2,1
 20081a8:	00002906 	br	2008250 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20081ac:	0005303a 	rdctl	r2,status
 20081b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20081b4:	e0fffd17 	ldw	r3,-12(fp)
 20081b8:	00bfff84 	movi	r2,-2
 20081bc:	1884703a 	and	r2,r3,r2
 20081c0:	1001703a 	wrctl	status,r2
  
  return context;
 20081c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20081c8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 20081cc:	e0bffe17 	ldw	r2,-8(fp)
 20081d0:	10800283 	ldbu	r2,10(r2)
 20081d4:	10803fcc 	andi	r2,r2,255
 20081d8:	10000c26 	beq	r2,zero,200820c <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 20081dc:	000f883a 	mov	r7,zero
 20081e0:	01800084 	movi	r6,2
 20081e4:	e17fff17 	ldw	r5,-4(fp)
 20081e8:	e13ffe17 	ldw	r4,-8(fp)
 20081ec:	20050440 	call	2005044 <OS_EventTaskRdy>
 20081f0:	e0bff917 	ldw	r2,-28(fp)
 20081f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20081f8:	e0bffa17 	ldw	r2,-24(fp)
 20081fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2008200:	2005a900 	call	2005a90 <OS_Sched>
        return (OS_ERR_NONE);
 2008204:	0005883a 	mov	r2,zero
 2008208:	00001106 	br	2008250 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 200820c:	e0bffe17 	ldw	r2,-8(fp)
 2008210:	10800117 	ldw	r2,4(r2)
 2008214:	10000626 	beq	r2,zero,2008230 <OSMboxPost+0xdc>
 2008218:	e0bff917 	ldw	r2,-28(fp)
 200821c:	e0bffb15 	stw	r2,-20(fp)
 2008220:	e0bffb17 	ldw	r2,-20(fp)
 2008224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2008228:	00800504 	movi	r2,20
 200822c:	00000806 	br	2008250 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2008230:	e0bffe17 	ldw	r2,-8(fp)
 2008234:	e0ffff17 	ldw	r3,-4(fp)
 2008238:	10c00115 	stw	r3,4(r2)
 200823c:	e0bff917 	ldw	r2,-28(fp)
 2008240:	e0bffc15 	stw	r2,-16(fp)
 2008244:	e0bffc17 	ldw	r2,-16(fp)
 2008248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200824c:	0005883a 	mov	r2,zero
}
 2008250:	e037883a 	mov	sp,fp
 2008254:	dfc00117 	ldw	ra,4(sp)
 2008258:	df000017 	ldw	fp,0(sp)
 200825c:	dec00204 	addi	sp,sp,8
 2008260:	f800283a 	ret

02008264 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2008264:	defff604 	addi	sp,sp,-40
 2008268:	dfc00915 	stw	ra,36(sp)
 200826c:	df000815 	stw	fp,32(sp)
 2008270:	df000804 	addi	fp,sp,32
 2008274:	e13ffd15 	stw	r4,-12(fp)
 2008278:	e17ffe15 	stw	r5,-8(fp)
 200827c:	3005883a 	mov	r2,r6
 2008280:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2008284:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2008288:	e0bffd17 	ldw	r2,-12(fp)
 200828c:	1000021e 	bne	r2,zero,2008298 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2008290:	00800104 	movi	r2,4
 2008294:	00004506 	br	20083ac <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2008298:	e0bffe17 	ldw	r2,-8(fp)
 200829c:	1000021e 	bne	r2,zero,20082a8 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 20082a0:	008000c4 	movi	r2,3
 20082a4:	00004106 	br	20083ac <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 20082a8:	e0bffd17 	ldw	r2,-12(fp)
 20082ac:	10800003 	ldbu	r2,0(r2)
 20082b0:	10803fcc 	andi	r2,r2,255
 20082b4:	10800060 	cmpeqi	r2,r2,1
 20082b8:	1000021e 	bne	r2,zero,20082c4 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 20082bc:	00800044 	movi	r2,1
 20082c0:	00003a06 	br	20083ac <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20082c4:	0005303a 	rdctl	r2,status
 20082c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20082cc:	e0fffc17 	ldw	r3,-16(fp)
 20082d0:	00bfff84 	movi	r2,-2
 20082d4:	1884703a 	and	r2,r3,r2
 20082d8:	1001703a 	wrctl	status,r2
  
  return context;
 20082dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20082e0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 20082e4:	e0bffd17 	ldw	r2,-12(fp)
 20082e8:	10800283 	ldbu	r2,10(r2)
 20082ec:	10803fcc 	andi	r2,r2,255
 20082f0:	10001d26 	beq	r2,zero,2008368 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20082f4:	e0bfff03 	ldbu	r2,-4(fp)
 20082f8:	1080004c 	andi	r2,r2,1
 20082fc:	10000b26 	beq	r2,zero,200832c <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2008300:	00000506 	br	2008318 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2008304:	000f883a 	mov	r7,zero
 2008308:	01800084 	movi	r6,2
 200830c:	e17ffe17 	ldw	r5,-8(fp)
 2008310:	e13ffd17 	ldw	r4,-12(fp)
 2008314:	20050440 	call	2005044 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2008318:	e0bffd17 	ldw	r2,-12(fp)
 200831c:	10800283 	ldbu	r2,10(r2)
 2008320:	10803fcc 	andi	r2,r2,255
 2008324:	103ff71e 	bne	r2,zero,2008304 <OSMboxPostOpt+0xa0>
 2008328:	00000506 	br	2008340 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 200832c:	000f883a 	mov	r7,zero
 2008330:	01800084 	movi	r6,2
 2008334:	e17ffe17 	ldw	r5,-8(fp)
 2008338:	e13ffd17 	ldw	r4,-12(fp)
 200833c:	20050440 	call	2005044 <OS_EventTaskRdy>
 2008340:	e0bff817 	ldw	r2,-32(fp)
 2008344:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008348:	e0bff917 	ldw	r2,-28(fp)
 200834c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2008350:	e0bfff03 	ldbu	r2,-4(fp)
 2008354:	1080010c 	andi	r2,r2,4
 2008358:	1000011e 	bne	r2,zero,2008360 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 200835c:	2005a900 	call	2005a90 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2008360:	0005883a 	mov	r2,zero
 2008364:	00001106 	br	20083ac <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2008368:	e0bffd17 	ldw	r2,-12(fp)
 200836c:	10800117 	ldw	r2,4(r2)
 2008370:	10000626 	beq	r2,zero,200838c <OSMboxPostOpt+0x128>
 2008374:	e0bff817 	ldw	r2,-32(fp)
 2008378:	e0bffa15 	stw	r2,-24(fp)
 200837c:	e0bffa17 	ldw	r2,-24(fp)
 2008380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2008384:	00800504 	movi	r2,20
 2008388:	00000806 	br	20083ac <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 200838c:	e0bffd17 	ldw	r2,-12(fp)
 2008390:	e0fffe17 	ldw	r3,-8(fp)
 2008394:	10c00115 	stw	r3,4(r2)
 2008398:	e0bff817 	ldw	r2,-32(fp)
 200839c:	e0bffb15 	stw	r2,-20(fp)
 20083a0:	e0bffb17 	ldw	r2,-20(fp)
 20083a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20083a8:	0005883a 	mov	r2,zero
}
 20083ac:	e037883a 	mov	sp,fp
 20083b0:	dfc00117 	ldw	ra,4(sp)
 20083b4:	df000017 	ldw	fp,0(sp)
 20083b8:	dec00204 	addi	sp,sp,8
 20083bc:	f800283a 	ret

020083c0 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 20083c0:	defff704 	addi	sp,sp,-36
 20083c4:	df000815 	stw	fp,32(sp)
 20083c8:	df000804 	addi	fp,sp,32
 20083cc:	e13ffe15 	stw	r4,-8(fp)
 20083d0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20083d4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20083d8:	e0bffe17 	ldw	r2,-8(fp)
 20083dc:	1000021e 	bne	r2,zero,20083e8 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20083e0:	00800104 	movi	r2,4
 20083e4:	00003606 	br	20084c0 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 20083e8:	e0bfff17 	ldw	r2,-4(fp)
 20083ec:	1000021e 	bne	r2,zero,20083f8 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20083f0:	00800244 	movi	r2,9
 20083f4:	00003206 	br	20084c0 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 20083f8:	e0bffe17 	ldw	r2,-8(fp)
 20083fc:	10800003 	ldbu	r2,0(r2)
 2008400:	10803fcc 	andi	r2,r2,255
 2008404:	10800060 	cmpeqi	r2,r2,1
 2008408:	1000021e 	bne	r2,zero,2008414 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 200840c:	00800044 	movi	r2,1
 2008410:	00002b06 	br	20084c0 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008414:	0005303a 	rdctl	r2,status
 2008418:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200841c:	e0fffd17 	ldw	r3,-12(fp)
 2008420:	00bfff84 	movi	r2,-2
 2008424:	1884703a 	and	r2,r3,r2
 2008428:	1001703a 	wrctl	status,r2
  
  return context;
 200842c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2008430:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2008434:	e0bffe17 	ldw	r2,-8(fp)
 2008438:	10c00283 	ldbu	r3,10(r2)
 200843c:	e0bfff17 	ldw	r2,-4(fp)
 2008440:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2008444:	e0bffe17 	ldw	r2,-8(fp)
 2008448:	108002c4 	addi	r2,r2,11
 200844c:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 2008450:	e0bfff17 	ldw	r2,-4(fp)
 2008454:	10800104 	addi	r2,r2,4
 2008458:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200845c:	e03ff805 	stb	zero,-32(fp)
 2008460:	00000b06 	br	2008490 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2008464:	e0bffa17 	ldw	r2,-24(fp)
 2008468:	10c00044 	addi	r3,r2,1
 200846c:	e0fffa15 	stw	r3,-24(fp)
 2008470:	e0fff917 	ldw	r3,-28(fp)
 2008474:	19000044 	addi	r4,r3,1
 2008478:	e13ff915 	stw	r4,-28(fp)
 200847c:	18c00003 	ldbu	r3,0(r3)
 2008480:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2008484:	e0bff803 	ldbu	r2,-32(fp)
 2008488:	10800044 	addi	r2,r2,1
 200848c:	e0bff805 	stb	r2,-32(fp)
 2008490:	e0bff803 	ldbu	r2,-32(fp)
 2008494:	108000f0 	cmpltui	r2,r2,3
 2008498:	103ff21e 	bne	r2,zero,2008464 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 200849c:	e0bffe17 	ldw	r2,-8(fp)
 20084a0:	10c00117 	ldw	r3,4(r2)
 20084a4:	e0bfff17 	ldw	r2,-4(fp)
 20084a8:	10c00015 	stw	r3,0(r2)
 20084ac:	e0bffb17 	ldw	r2,-20(fp)
 20084b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20084b4:	e0bffc17 	ldw	r2,-16(fp)
 20084b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20084bc:	0005883a 	mov	r2,zero
}
 20084c0:	e037883a 	mov	sp,fp
 20084c4:	df000017 	ldw	fp,0(sp)
 20084c8:	dec00104 	addi	sp,sp,4
 20084cc:	f800283a 	ret

020084d0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 20084d0:	defff404 	addi	sp,sp,-48
 20084d4:	df000b15 	stw	fp,44(sp)
 20084d8:	df000b04 	addi	fp,sp,44
 20084dc:	e13ffc15 	stw	r4,-16(fp)
 20084e0:	e17ffd15 	stw	r5,-12(fp)
 20084e4:	e1bffe15 	stw	r6,-8(fp)
 20084e8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20084ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20084f0:	e0bfff17 	ldw	r2,-4(fp)
 20084f4:	1000021e 	bne	r2,zero,2008500 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 20084f8:	0005883a 	mov	r2,zero
 20084fc:	00006506 	br	2008694 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 2008500:	e0bffc17 	ldw	r2,-16(fp)
 2008504:	1000051e 	bne	r2,zero,200851c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2008508:	e0bfff17 	ldw	r2,-4(fp)
 200850c:	00c01884 	movi	r3,98
 2008510:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2008514:	0005883a 	mov	r2,zero
 2008518:	00005e06 	br	2008694 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 200851c:	e0bffc17 	ldw	r2,-16(fp)
 2008520:	108000cc 	andi	r2,r2,3
 2008524:	10000526 	beq	r2,zero,200853c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2008528:	e0bfff17 	ldw	r2,-4(fp)
 200852c:	00c01884 	movi	r3,98
 2008530:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2008534:	0005883a 	mov	r2,zero
 2008538:	00005606 	br	2008694 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 200853c:	e0bffd17 	ldw	r2,-12(fp)
 2008540:	108000a8 	cmpgeui	r2,r2,2
 2008544:	1000051e 	bne	r2,zero,200855c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 2008548:	e0bfff17 	ldw	r2,-4(fp)
 200854c:	00c016c4 	movi	r3,91
 2008550:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2008554:	0005883a 	mov	r2,zero
 2008558:	00004e06 	br	2008694 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 200855c:	e0bffe17 	ldw	r2,-8(fp)
 2008560:	10800128 	cmpgeui	r2,r2,4
 2008564:	1000051e 	bne	r2,zero,200857c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 2008568:	e0bfff17 	ldw	r2,-4(fp)
 200856c:	00c01704 	movi	r3,92
 2008570:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2008574:	0005883a 	mov	r2,zero
 2008578:	00004606 	br	2008694 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200857c:	0005303a 	rdctl	r2,status
 2008580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008584:	e0fffb17 	ldw	r3,-20(fp)
 2008588:	00bfff84 	movi	r2,-2
 200858c:	1884703a 	and	r2,r3,r2
 2008590:	1001703a 	wrctl	status,r2
  
  return context;
 2008594:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008598:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 200859c:	d0a70717 	ldw	r2,-25572(gp)
 20085a0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 20085a4:	d0a70717 	ldw	r2,-25572(gp)
 20085a8:	10000326 	beq	r2,zero,20085b8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 20085ac:	d0a70717 	ldw	r2,-25572(gp)
 20085b0:	10800117 	ldw	r2,4(r2)
 20085b4:	d0a70715 	stw	r2,-25572(gp)
 20085b8:	e0bff817 	ldw	r2,-32(fp)
 20085bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20085c0:	e0bff917 	ldw	r2,-28(fp)
 20085c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 20085c8:	e0bffa17 	ldw	r2,-24(fp)
 20085cc:	1000051e 	bne	r2,zero,20085e4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 20085d0:	e0bfff17 	ldw	r2,-4(fp)
 20085d4:	00c01684 	movi	r3,90
 20085d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20085dc:	0005883a 	mov	r2,zero
 20085e0:	00002c06 	br	2008694 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20085e4:	e0bffc17 	ldw	r2,-16(fp)
 20085e8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20085ec:	e0fffc17 	ldw	r3,-16(fp)
 20085f0:	e0bffe17 	ldw	r2,-8(fp)
 20085f4:	1885883a 	add	r2,r3,r2
 20085f8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20085fc:	e03ff715 	stw	zero,-36(fp)
 2008600:	00000c06 	br	2008634 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2008604:	e0bff617 	ldw	r2,-40(fp)
 2008608:	e0fff517 	ldw	r3,-44(fp)
 200860c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2008610:	e0bff517 	ldw	r2,-44(fp)
 2008614:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 2008618:	e0fff517 	ldw	r3,-44(fp)
 200861c:	e0bffe17 	ldw	r2,-8(fp)
 2008620:	1885883a 	add	r2,r3,r2
 2008624:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2008628:	e0bff717 	ldw	r2,-36(fp)
 200862c:	10800044 	addi	r2,r2,1
 2008630:	e0bff715 	stw	r2,-36(fp)
 2008634:	e0bffd17 	ldw	r2,-12(fp)
 2008638:	10bfffc4 	addi	r2,r2,-1
 200863c:	e0fff717 	ldw	r3,-36(fp)
 2008640:	18bff036 	bltu	r3,r2,2008604 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2008644:	e0bff617 	ldw	r2,-40(fp)
 2008648:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 200864c:	e0bffa17 	ldw	r2,-24(fp)
 2008650:	e0fffc17 	ldw	r3,-16(fp)
 2008654:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2008658:	e0bffa17 	ldw	r2,-24(fp)
 200865c:	e0fffc17 	ldw	r3,-16(fp)
 2008660:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2008664:	e0bffa17 	ldw	r2,-24(fp)
 2008668:	e0fffd17 	ldw	r3,-12(fp)
 200866c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 2008670:	e0bffa17 	ldw	r2,-24(fp)
 2008674:	e0fffd17 	ldw	r3,-12(fp)
 2008678:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 200867c:	e0bffa17 	ldw	r2,-24(fp)
 2008680:	e0fffe17 	ldw	r3,-8(fp)
 2008684:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 2008688:	e0bfff17 	ldw	r2,-4(fp)
 200868c:	10000005 	stb	zero,0(r2)
    return (pmem);
 2008690:	e0bffa17 	ldw	r2,-24(fp)
}
 2008694:	e037883a 	mov	sp,fp
 2008698:	df000017 	ldw	fp,0(sp)
 200869c:	dec00104 	addi	sp,sp,4
 20086a0:	f800283a 	ret

020086a4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 20086a4:	defff804 	addi	sp,sp,-32
 20086a8:	df000715 	stw	fp,28(sp)
 20086ac:	df000704 	addi	fp,sp,28
 20086b0:	e13ffe15 	stw	r4,-8(fp)
 20086b4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20086b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20086bc:	e0bfff17 	ldw	r2,-4(fp)
 20086c0:	1000021e 	bne	r2,zero,20086cc <OSMemGet+0x28>
        return ((void *)0);
 20086c4:	0005883a 	mov	r2,zero
 20086c8:	00002e06 	br	2008784 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 20086cc:	e0bffe17 	ldw	r2,-8(fp)
 20086d0:	1000051e 	bne	r2,zero,20086e8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20086d4:	e0bfff17 	ldw	r2,-4(fp)
 20086d8:	00c01804 	movi	r3,96
 20086dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20086e0:	0005883a 	mov	r2,zero
 20086e4:	00002706 	br	2008784 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20086e8:	0005303a 	rdctl	r2,status
 20086ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20086f0:	e0fffd17 	ldw	r3,-12(fp)
 20086f4:	00bfff84 	movi	r2,-2
 20086f8:	1884703a 	and	r2,r3,r2
 20086fc:	1001703a 	wrctl	status,r2
  
  return context;
 2008700:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008704:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2008708:	e0bffe17 	ldw	r2,-8(fp)
 200870c:	10800417 	ldw	r2,16(r2)
 2008710:	10001426 	beq	r2,zero,2008764 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2008714:	e0bffe17 	ldw	r2,-8(fp)
 2008718:	10800117 	ldw	r2,4(r2)
 200871c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2008720:	e0bffb17 	ldw	r2,-20(fp)
 2008724:	10c00017 	ldw	r3,0(r2)
 2008728:	e0bffe17 	ldw	r2,-8(fp)
 200872c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2008730:	e0bffe17 	ldw	r2,-8(fp)
 2008734:	10800417 	ldw	r2,16(r2)
 2008738:	10ffffc4 	addi	r3,r2,-1
 200873c:	e0bffe17 	ldw	r2,-8(fp)
 2008740:	10c00415 	stw	r3,16(r2)
 2008744:	e0bff917 	ldw	r2,-28(fp)
 2008748:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200874c:	e0bffa17 	ldw	r2,-24(fp)
 2008750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2008754:	e0bfff17 	ldw	r2,-4(fp)
 2008758:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 200875c:	e0bffb17 	ldw	r2,-20(fp)
 2008760:	00000806 	br	2008784 <OSMemGet+0xe0>
 2008764:	e0bff917 	ldw	r2,-28(fp)
 2008768:	e0bffc15 	stw	r2,-16(fp)
 200876c:	e0bffc17 	ldw	r2,-16(fp)
 2008770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2008774:	e0bfff17 	ldw	r2,-4(fp)
 2008778:	00c01744 	movi	r3,93
 200877c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2008780:	0005883a 	mov	r2,zero
}
 2008784:	e037883a 	mov	sp,fp
 2008788:	df000017 	ldw	fp,0(sp)
 200878c:	dec00104 	addi	sp,sp,4
 2008790:	f800283a 	ret

02008794 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2008794:	defff704 	addi	sp,sp,-36
 2008798:	dfc00815 	stw	ra,32(sp)
 200879c:	df000715 	stw	fp,28(sp)
 20087a0:	df000704 	addi	fp,sp,28
 20087a4:	e13ffd15 	stw	r4,-12(fp)
 20087a8:	e17ffe15 	stw	r5,-8(fp)
 20087ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20087b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20087b4:	e0bfff17 	ldw	r2,-4(fp)
 20087b8:	1000021e 	bne	r2,zero,20087c4 <OSMemNameGet+0x30>
        return (0);
 20087bc:	0005883a 	mov	r2,zero
 20087c0:	00002b06 	br	2008870 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20087c4:	e0bffd17 	ldw	r2,-12(fp)
 20087c8:	1000051e 	bne	r2,zero,20087e0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20087cc:	e0bfff17 	ldw	r2,-4(fp)
 20087d0:	00c01804 	movi	r3,96
 20087d4:	10c00005 	stb	r3,0(r2)
        return (0);
 20087d8:	0005883a 	mov	r2,zero
 20087dc:	00002406 	br	2008870 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20087e0:	e0bffe17 	ldw	r2,-8(fp)
 20087e4:	1000051e 	bne	r2,zero,20087fc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20087e8:	e0bfff17 	ldw	r2,-4(fp)
 20087ec:	00c00304 	movi	r3,12
 20087f0:	10c00005 	stb	r3,0(r2)
        return (0);
 20087f4:	0005883a 	mov	r2,zero
 20087f8:	00001d06 	br	2008870 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20087fc:	d0a70c03 	ldbu	r2,-25552(gp)
 2008800:	10803fcc 	andi	r2,r2,255
 2008804:	10000526 	beq	r2,zero,200881c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2008808:	e0bfff17 	ldw	r2,-4(fp)
 200880c:	00c00444 	movi	r3,17
 2008810:	10c00005 	stb	r3,0(r2)
        return (0);
 2008814:	0005883a 	mov	r2,zero
 2008818:	00001506 	br	2008870 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200881c:	0005303a 	rdctl	r2,status
 2008820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008824:	e0fffb17 	ldw	r3,-20(fp)
 2008828:	00bfff84 	movi	r2,-2
 200882c:	1884703a 	and	r2,r3,r2
 2008830:	1001703a 	wrctl	status,r2
  
  return context;
 2008834:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2008838:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 200883c:	e0bffd17 	ldw	r2,-12(fp)
 2008840:	10800504 	addi	r2,r2,20
 2008844:	100b883a 	mov	r5,r2
 2008848:	e13ffe17 	ldw	r4,-8(fp)
 200884c:	2005bd40 	call	2005bd4 <OS_StrCopy>
 2008850:	e0bffa05 	stb	r2,-24(fp)
 2008854:	e0bff917 	ldw	r2,-28(fp)
 2008858:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200885c:	e0bffc17 	ldw	r2,-16(fp)
 2008860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2008864:	e0bfff17 	ldw	r2,-4(fp)
 2008868:	10000005 	stb	zero,0(r2)
    return (len);
 200886c:	e0bffa03 	ldbu	r2,-24(fp)
}
 2008870:	e037883a 	mov	sp,fp
 2008874:	dfc00117 	ldw	ra,4(sp)
 2008878:	df000017 	ldw	fp,0(sp)
 200887c:	dec00204 	addi	sp,sp,8
 2008880:	f800283a 	ret

02008884 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2008884:	defff604 	addi	sp,sp,-40
 2008888:	dfc00915 	stw	ra,36(sp)
 200888c:	df000815 	stw	fp,32(sp)
 2008890:	df000804 	addi	fp,sp,32
 2008894:	e13ffd15 	stw	r4,-12(fp)
 2008898:	e17ffe15 	stw	r5,-8(fp)
 200889c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20088a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20088a4:	e0bfff17 	ldw	r2,-4(fp)
 20088a8:	10003526 	beq	r2,zero,2008980 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20088ac:	e0bffd17 	ldw	r2,-12(fp)
 20088b0:	1000041e 	bne	r2,zero,20088c4 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20088b4:	e0bfff17 	ldw	r2,-4(fp)
 20088b8:	00c01804 	movi	r3,96
 20088bc:	10c00005 	stb	r3,0(r2)
        return;
 20088c0:	00003006 	br	2008984 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20088c4:	e0bffe17 	ldw	r2,-8(fp)
 20088c8:	1000041e 	bne	r2,zero,20088dc <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20088cc:	e0bfff17 	ldw	r2,-4(fp)
 20088d0:	00c00304 	movi	r3,12
 20088d4:	10c00005 	stb	r3,0(r2)
        return;
 20088d8:	00002a06 	br	2008984 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20088dc:	d0a70c03 	ldbu	r2,-25552(gp)
 20088e0:	10803fcc 	andi	r2,r2,255
 20088e4:	10000426 	beq	r2,zero,20088f8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20088e8:	e0bfff17 	ldw	r2,-4(fp)
 20088ec:	00c00484 	movi	r3,18
 20088f0:	10c00005 	stb	r3,0(r2)
        return;
 20088f4:	00002306 	br	2008984 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20088f8:	0005303a 	rdctl	r2,status
 20088fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008900:	e0fffc17 	ldw	r3,-16(fp)
 2008904:	00bfff84 	movi	r2,-2
 2008908:	1884703a 	and	r2,r3,r2
 200890c:	1001703a 	wrctl	status,r2
  
  return context;
 2008910:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2008914:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2008918:	e13ffe17 	ldw	r4,-8(fp)
 200891c:	2005c480 	call	2005c48 <OS_StrLen>
 2008920:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2008924:	e0bffa03 	ldbu	r2,-24(fp)
 2008928:	10800830 	cmpltui	r2,r2,32
 200892c:	1000081e 	bne	r2,zero,2008950 <OSMemNameSet+0xcc>
 2008930:	e0bff817 	ldw	r2,-32(fp)
 2008934:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008938:	e0bff917 	ldw	r2,-28(fp)
 200893c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2008940:	e0bfff17 	ldw	r2,-4(fp)
 2008944:	00c018c4 	movi	r3,99
 2008948:	10c00005 	stb	r3,0(r2)
        return;
 200894c:	00000d06 	br	2008984 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2008950:	e0bffd17 	ldw	r2,-12(fp)
 2008954:	10800504 	addi	r2,r2,20
 2008958:	e17ffe17 	ldw	r5,-8(fp)
 200895c:	1009883a 	mov	r4,r2
 2008960:	2005bd40 	call	2005bd4 <OS_StrCopy>
 2008964:	e0bff817 	ldw	r2,-32(fp)
 2008968:	e0bffb15 	stw	r2,-20(fp)
 200896c:	e0bffb17 	ldw	r2,-20(fp)
 2008970:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2008974:	e0bfff17 	ldw	r2,-4(fp)
 2008978:	10000005 	stb	zero,0(r2)
 200897c:	00000106 	br	2008984 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2008980:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2008984:	e037883a 	mov	sp,fp
 2008988:	dfc00117 	ldw	ra,4(sp)
 200898c:	df000017 	ldw	fp,0(sp)
 2008990:	dec00204 	addi	sp,sp,8
 2008994:	f800283a 	ret

02008998 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2008998:	defff904 	addi	sp,sp,-28
 200899c:	df000615 	stw	fp,24(sp)
 20089a0:	df000604 	addi	fp,sp,24
 20089a4:	e13ffe15 	stw	r4,-8(fp)
 20089a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20089ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20089b0:	e0bffe17 	ldw	r2,-8(fp)
 20089b4:	1000021e 	bne	r2,zero,20089c0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20089b8:	00801804 	movi	r2,96
 20089bc:	00002806 	br	2008a60 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 20089c0:	e0bfff17 	ldw	r2,-4(fp)
 20089c4:	1000021e 	bne	r2,zero,20089d0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 20089c8:	008017c4 	movi	r2,95
 20089cc:	00002406 	br	2008a60 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20089d0:	0005303a 	rdctl	r2,status
 20089d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20089d8:	e0fffd17 	ldw	r3,-12(fp)
 20089dc:	00bfff84 	movi	r2,-2
 20089e0:	1884703a 	and	r2,r3,r2
 20089e4:	1001703a 	wrctl	status,r2
  
  return context;
 20089e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20089ec:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 20089f0:	e0bffe17 	ldw	r2,-8(fp)
 20089f4:	10c00417 	ldw	r3,16(r2)
 20089f8:	e0bffe17 	ldw	r2,-8(fp)
 20089fc:	10800317 	ldw	r2,12(r2)
 2008a00:	18800636 	bltu	r3,r2,2008a1c <OSMemPut+0x84>
 2008a04:	e0bffa17 	ldw	r2,-24(fp)
 2008a08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008a0c:	e0bffb17 	ldw	r2,-20(fp)
 2008a10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2008a14:	00801784 	movi	r2,94
 2008a18:	00001106 	br	2008a60 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2008a1c:	e0bffe17 	ldw	r2,-8(fp)
 2008a20:	10c00117 	ldw	r3,4(r2)
 2008a24:	e0bfff17 	ldw	r2,-4(fp)
 2008a28:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2008a2c:	e0bffe17 	ldw	r2,-8(fp)
 2008a30:	e0ffff17 	ldw	r3,-4(fp)
 2008a34:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2008a38:	e0bffe17 	ldw	r2,-8(fp)
 2008a3c:	10800417 	ldw	r2,16(r2)
 2008a40:	10c00044 	addi	r3,r2,1
 2008a44:	e0bffe17 	ldw	r2,-8(fp)
 2008a48:	10c00415 	stw	r3,16(r2)
 2008a4c:	e0bffa17 	ldw	r2,-24(fp)
 2008a50:	e0bffc15 	stw	r2,-16(fp)
 2008a54:	e0bffc17 	ldw	r2,-16(fp)
 2008a58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2008a5c:	0005883a 	mov	r2,zero
}
 2008a60:	e037883a 	mov	sp,fp
 2008a64:	df000017 	ldw	fp,0(sp)
 2008a68:	dec00104 	addi	sp,sp,4
 2008a6c:	f800283a 	ret

02008a70 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2008a70:	defffa04 	addi	sp,sp,-24
 2008a74:	df000515 	stw	fp,20(sp)
 2008a78:	df000504 	addi	fp,sp,20
 2008a7c:	e13ffe15 	stw	r4,-8(fp)
 2008a80:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008a84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2008a88:	e0bffe17 	ldw	r2,-8(fp)
 2008a8c:	1000021e 	bne	r2,zero,2008a98 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2008a90:	00801804 	movi	r2,96
 2008a94:	00002c06 	br	2008b48 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2008a98:	e0bfff17 	ldw	r2,-4(fp)
 2008a9c:	1000021e 	bne	r2,zero,2008aa8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 2008aa0:	00801844 	movi	r2,97
 2008aa4:	00002806 	br	2008b48 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008aa8:	0005303a 	rdctl	r2,status
 2008aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008ab0:	e0fffc17 	ldw	r3,-16(fp)
 2008ab4:	00bfff84 	movi	r2,-2
 2008ab8:	1884703a 	and	r2,r3,r2
 2008abc:	1001703a 	wrctl	status,r2
  
  return context;
 2008ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008ac4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2008ac8:	e0bffe17 	ldw	r2,-8(fp)
 2008acc:	10c00017 	ldw	r3,0(r2)
 2008ad0:	e0bfff17 	ldw	r2,-4(fp)
 2008ad4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2008ad8:	e0bffe17 	ldw	r2,-8(fp)
 2008adc:	10c00117 	ldw	r3,4(r2)
 2008ae0:	e0bfff17 	ldw	r2,-4(fp)
 2008ae4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2008ae8:	e0bffe17 	ldw	r2,-8(fp)
 2008aec:	10c00217 	ldw	r3,8(r2)
 2008af0:	e0bfff17 	ldw	r2,-4(fp)
 2008af4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2008af8:	e0bffe17 	ldw	r2,-8(fp)
 2008afc:	10c00317 	ldw	r3,12(r2)
 2008b00:	e0bfff17 	ldw	r2,-4(fp)
 2008b04:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2008b08:	e0bffe17 	ldw	r2,-8(fp)
 2008b0c:	10c00417 	ldw	r3,16(r2)
 2008b10:	e0bfff17 	ldw	r2,-4(fp)
 2008b14:	10c00415 	stw	r3,16(r2)
 2008b18:	e0bffb17 	ldw	r2,-20(fp)
 2008b1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008b20:	e0bffd17 	ldw	r2,-12(fp)
 2008b24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2008b28:	e0bfff17 	ldw	r2,-4(fp)
 2008b2c:	10c00317 	ldw	r3,12(r2)
 2008b30:	e0bfff17 	ldw	r2,-4(fp)
 2008b34:	10800417 	ldw	r2,16(r2)
 2008b38:	1887c83a 	sub	r3,r3,r2
 2008b3c:	e0bfff17 	ldw	r2,-4(fp)
 2008b40:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2008b44:	0005883a 	mov	r2,zero
}
 2008b48:	e037883a 	mov	sp,fp
 2008b4c:	df000017 	ldw	fp,0(sp)
 2008b50:	dec00104 	addi	sp,sp,4
 2008b54:	f800283a 	ret

02008b58 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2008b58:	defffc04 	addi	sp,sp,-16
 2008b5c:	dfc00315 	stw	ra,12(sp)
 2008b60:	df000215 	stw	fp,8(sp)
 2008b64:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2008b68:	01430c04 	movi	r5,3120
 2008b6c:	010080b4 	movhi	r4,514
 2008b70:	21210204 	addi	r4,r4,-31736
 2008b74:	20059d40 	call	20059d4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2008b78:	008080b4 	movhi	r2,514
 2008b7c:	10a10204 	addi	r2,r2,-31736
 2008b80:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2008b84:	e03fff0d 	sth	zero,-4(fp)
 2008b88:	00001606 	br	2008be4 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2008b8c:	e0bfff0b 	ldhu	r2,-4(fp)
 2008b90:	10800044 	addi	r2,r2,1
 2008b94:	01400d04 	movi	r5,52
 2008b98:	1009883a 	mov	r4,r2
 2008b9c:	200348c0 	call	200348c <__mulsi3>
 2008ba0:	1007883a 	mov	r3,r2
 2008ba4:	008080b4 	movhi	r2,514
 2008ba8:	10a10204 	addi	r2,r2,-31736
 2008bac:	1887883a 	add	r3,r3,r2
 2008bb0:	e0bffe17 	ldw	r2,-8(fp)
 2008bb4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2008bb8:	e0bffe17 	ldw	r2,-8(fp)
 2008bbc:	00c00fc4 	movi	r3,63
 2008bc0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2008bc4:	e0bffe17 	ldw	r2,-8(fp)
 2008bc8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2008bcc:	e0bffe17 	ldw	r2,-8(fp)
 2008bd0:	10800d04 	addi	r2,r2,52
 2008bd4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2008bd8:	e0bfff0b 	ldhu	r2,-4(fp)
 2008bdc:	10800044 	addi	r2,r2,1
 2008be0:	e0bfff0d 	sth	r2,-4(fp)
 2008be4:	e0bfff0b 	ldhu	r2,-4(fp)
 2008be8:	10800ef0 	cmpltui	r2,r2,59
 2008bec:	103fe71e 	bne	r2,zero,2008b8c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2008bf0:	e0bffe17 	ldw	r2,-8(fp)
 2008bf4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2008bf8:	e0bffe17 	ldw	r2,-8(fp)
 2008bfc:	00c00fc4 	movi	r3,63
 2008c00:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2008c04:	e0bffe17 	ldw	r2,-8(fp)
 2008c08:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2008c0c:	008080b4 	movhi	r2,514
 2008c10:	10a10204 	addi	r2,r2,-31736
 2008c14:	d0a70715 	stw	r2,-25572(gp)
#endif
}
 2008c18:	0001883a 	nop
 2008c1c:	e037883a 	mov	sp,fp
 2008c20:	dfc00117 	ldw	ra,4(sp)
 2008c24:	df000017 	ldw	fp,0(sp)
 2008c28:	dec00204 	addi	sp,sp,8
 2008c2c:	f800283a 	ret

02008c30 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2008c30:	defff804 	addi	sp,sp,-32
 2008c34:	df000715 	stw	fp,28(sp)
 2008c38:	df000704 	addi	fp,sp,28
 2008c3c:	e13ffe15 	stw	r4,-8(fp)
 2008c40:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008c44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2008c48:	e0bfff17 	ldw	r2,-4(fp)
 2008c4c:	1000021e 	bne	r2,zero,2008c58 <OSQAccept+0x28>
        return ((void *)0);
 2008c50:	0005883a 	mov	r2,zero
 2008c54:	00004206 	br	2008d60 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2008c58:	e0bffe17 	ldw	r2,-8(fp)
 2008c5c:	1000051e 	bne	r2,zero,2008c74 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2008c60:	e0bfff17 	ldw	r2,-4(fp)
 2008c64:	00c00104 	movi	r3,4
 2008c68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2008c6c:	0005883a 	mov	r2,zero
 2008c70:	00003b06 	br	2008d60 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2008c74:	e0bffe17 	ldw	r2,-8(fp)
 2008c78:	10800003 	ldbu	r2,0(r2)
 2008c7c:	10803fcc 	andi	r2,r2,255
 2008c80:	108000a0 	cmpeqi	r2,r2,2
 2008c84:	1000051e 	bne	r2,zero,2008c9c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2008c88:	e0bfff17 	ldw	r2,-4(fp)
 2008c8c:	00c00044 	movi	r3,1
 2008c90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2008c94:	0005883a 	mov	r2,zero
 2008c98:	00003106 	br	2008d60 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008c9c:	0005303a 	rdctl	r2,status
 2008ca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008ca4:	e0fffd17 	ldw	r3,-12(fp)
 2008ca8:	00bfff84 	movi	r2,-2
 2008cac:	1884703a 	and	r2,r3,r2
 2008cb0:	1001703a 	wrctl	status,r2
  
  return context;
 2008cb4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2008cb8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2008cbc:	e0bffe17 	ldw	r2,-8(fp)
 2008cc0:	10800117 	ldw	r2,4(r2)
 2008cc4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2008cc8:	e0bffc17 	ldw	r2,-16(fp)
 2008ccc:	1080058b 	ldhu	r2,22(r2)
 2008cd0:	10bfffcc 	andi	r2,r2,65535
 2008cd4:	10001926 	beq	r2,zero,2008d3c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2008cd8:	e0bffc17 	ldw	r2,-16(fp)
 2008cdc:	10800417 	ldw	r2,16(r2)
 2008ce0:	11000104 	addi	r4,r2,4
 2008ce4:	e0fffc17 	ldw	r3,-16(fp)
 2008ce8:	19000415 	stw	r4,16(r3)
 2008cec:	10800017 	ldw	r2,0(r2)
 2008cf0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2008cf4:	e0bffc17 	ldw	r2,-16(fp)
 2008cf8:	1080058b 	ldhu	r2,22(r2)
 2008cfc:	10bfffc4 	addi	r2,r2,-1
 2008d00:	1007883a 	mov	r3,r2
 2008d04:	e0bffc17 	ldw	r2,-16(fp)
 2008d08:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2008d0c:	e0bffc17 	ldw	r2,-16(fp)
 2008d10:	10c00417 	ldw	r3,16(r2)
 2008d14:	e0bffc17 	ldw	r2,-16(fp)
 2008d18:	10800217 	ldw	r2,8(r2)
 2008d1c:	1880041e 	bne	r3,r2,2008d30 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 2008d20:	e0bffc17 	ldw	r2,-16(fp)
 2008d24:	10c00117 	ldw	r3,4(r2)
 2008d28:	e0bffc17 	ldw	r2,-16(fp)
 2008d2c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2008d30:	e0bfff17 	ldw	r2,-4(fp)
 2008d34:	10000005 	stb	zero,0(r2)
 2008d38:	00000406 	br	2008d4c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2008d3c:	e0bfff17 	ldw	r2,-4(fp)
 2008d40:	00c007c4 	movi	r3,31
 2008d44:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2008d48:	e03ff915 	stw	zero,-28(fp)
 2008d4c:	e0bffa17 	ldw	r2,-24(fp)
 2008d50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008d54:	e0bffb17 	ldw	r2,-20(fp)
 2008d58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2008d5c:	e0bff917 	ldw	r2,-28(fp)
}
 2008d60:	e037883a 	mov	sp,fp
 2008d64:	df000017 	ldw	fp,0(sp)
 2008d68:	dec00104 	addi	sp,sp,4
 2008d6c:	f800283a 	ret

02008d70 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2008d70:	defff404 	addi	sp,sp,-48
 2008d74:	dfc00b15 	stw	ra,44(sp)
 2008d78:	df000a15 	stw	fp,40(sp)
 2008d7c:	df000a04 	addi	fp,sp,40
 2008d80:	e13ffe15 	stw	r4,-8(fp)
 2008d84:	2805883a 	mov	r2,r5
 2008d88:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008d8c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2008d90:	d0a70c03 	ldbu	r2,-25552(gp)
 2008d94:	10803fcc 	andi	r2,r2,255
 2008d98:	10000226 	beq	r2,zero,2008da4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2008d9c:	0005883a 	mov	r2,zero
 2008da0:	00005906 	br	2008f08 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008da4:	0005303a 	rdctl	r2,status
 2008da8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008dac:	e0fffd17 	ldw	r3,-12(fp)
 2008db0:	00bfff84 	movi	r2,-2
 2008db4:	1884703a 	and	r2,r3,r2
 2008db8:	1001703a 	wrctl	status,r2
  
  return context;
 2008dbc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2008dc0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2008dc4:	d0a70b17 	ldw	r2,-25556(gp)
 2008dc8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2008dcc:	d0a70b17 	ldw	r2,-25556(gp)
 2008dd0:	10000326 	beq	r2,zero,2008de0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2008dd4:	d0a70b17 	ldw	r2,-25556(gp)
 2008dd8:	10800117 	ldw	r2,4(r2)
 2008ddc:	d0a70b15 	stw	r2,-25556(gp)
 2008de0:	e0bff717 	ldw	r2,-36(fp)
 2008de4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008de8:	e0bff817 	ldw	r2,-32(fp)
 2008dec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2008df0:	e0bff617 	ldw	r2,-40(fp)
 2008df4:	10004326 	beq	r2,zero,2008f04 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008df8:	0005303a 	rdctl	r2,status
 2008dfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008e00:	e0fff917 	ldw	r3,-28(fp)
 2008e04:	00bfff84 	movi	r2,-2
 2008e08:	1884703a 	and	r2,r3,r2
 2008e0c:	1001703a 	wrctl	status,r2
  
  return context;
 2008e10:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 2008e14:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2008e18:	d0a70917 	ldw	r2,-25564(gp)
 2008e1c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2008e20:	e0bffb17 	ldw	r2,-20(fp)
 2008e24:	10002d26 	beq	r2,zero,2008edc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2008e28:	d0a70917 	ldw	r2,-25564(gp)
 2008e2c:	10800017 	ldw	r2,0(r2)
 2008e30:	d0a70915 	stw	r2,-25564(gp)
 2008e34:	e0bff717 	ldw	r2,-36(fp)
 2008e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008e3c:	e0bffa17 	ldw	r2,-24(fp)
 2008e40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2008e44:	e0bffb17 	ldw	r2,-20(fp)
 2008e48:	e0fffe17 	ldw	r3,-8(fp)
 2008e4c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2008e50:	e0bfff0b 	ldhu	r2,-4(fp)
 2008e54:	1085883a 	add	r2,r2,r2
 2008e58:	1085883a 	add	r2,r2,r2
 2008e5c:	1007883a 	mov	r3,r2
 2008e60:	e0bffe17 	ldw	r2,-8(fp)
 2008e64:	10c7883a 	add	r3,r2,r3
 2008e68:	e0bffb17 	ldw	r2,-20(fp)
 2008e6c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2008e70:	e0bffb17 	ldw	r2,-20(fp)
 2008e74:	e0fffe17 	ldw	r3,-8(fp)
 2008e78:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2008e7c:	e0bffb17 	ldw	r2,-20(fp)
 2008e80:	e0fffe17 	ldw	r3,-8(fp)
 2008e84:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2008e88:	e0bffb17 	ldw	r2,-20(fp)
 2008e8c:	e0ffff0b 	ldhu	r3,-4(fp)
 2008e90:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2008e94:	e0bffb17 	ldw	r2,-20(fp)
 2008e98:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2008e9c:	e0bff617 	ldw	r2,-40(fp)
 2008ea0:	00c00084 	movi	r3,2
 2008ea4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2008ea8:	e0bff617 	ldw	r2,-40(fp)
 2008eac:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2008eb0:	e0bff617 	ldw	r2,-40(fp)
 2008eb4:	e0fffb17 	ldw	r3,-20(fp)
 2008eb8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2008ebc:	e0bff617 	ldw	r2,-40(fp)
 2008ec0:	00c00fc4 	movi	r3,63
 2008ec4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2008ec8:	e0bff617 	ldw	r2,-40(fp)
 2008ecc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2008ed0:	e13ff617 	ldw	r4,-40(fp)
 2008ed4:	20055f40 	call	20055f4 <OS_EventWaitListInit>
 2008ed8:	00000a06 	br	2008f04 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2008edc:	d0e70b17 	ldw	r3,-25556(gp)
 2008ee0:	e0bff617 	ldw	r2,-40(fp)
 2008ee4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2008ee8:	e0bff617 	ldw	r2,-40(fp)
 2008eec:	d0a70b15 	stw	r2,-25556(gp)
 2008ef0:	e0bff717 	ldw	r2,-36(fp)
 2008ef4:	e0bffc15 	stw	r2,-16(fp)
 2008ef8:	e0bffc17 	ldw	r2,-16(fp)
 2008efc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2008f00:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2008f04:	e0bff617 	ldw	r2,-40(fp)
}
 2008f08:	e037883a 	mov	sp,fp
 2008f0c:	dfc00117 	ldw	ra,4(sp)
 2008f10:	df000017 	ldw	fp,0(sp)
 2008f14:	dec00204 	addi	sp,sp,8
 2008f18:	f800283a 	ret

02008f1c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2008f1c:	defff204 	addi	sp,sp,-56
 2008f20:	dfc00d15 	stw	ra,52(sp)
 2008f24:	df000c15 	stw	fp,48(sp)
 2008f28:	df000c04 	addi	fp,sp,48
 2008f2c:	e13ffd15 	stw	r4,-12(fp)
 2008f30:	2805883a 	mov	r2,r5
 2008f34:	e1bfff15 	stw	r6,-4(fp)
 2008f38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2008f3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2008f40:	e0bfff17 	ldw	r2,-4(fp)
 2008f44:	1000021e 	bne	r2,zero,2008f50 <OSQDel+0x34>
        return (pevent);
 2008f48:	e0bffd17 	ldw	r2,-12(fp)
 2008f4c:	00008e06 	br	2009188 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2008f50:	e0bffd17 	ldw	r2,-12(fp)
 2008f54:	1000051e 	bne	r2,zero,2008f6c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2008f58:	e0bfff17 	ldw	r2,-4(fp)
 2008f5c:	00c00104 	movi	r3,4
 2008f60:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2008f64:	e0bffd17 	ldw	r2,-12(fp)
 2008f68:	00008706 	br	2009188 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2008f6c:	e0bffd17 	ldw	r2,-12(fp)
 2008f70:	10800003 	ldbu	r2,0(r2)
 2008f74:	10803fcc 	andi	r2,r2,255
 2008f78:	108000a0 	cmpeqi	r2,r2,2
 2008f7c:	1000051e 	bne	r2,zero,2008f94 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2008f80:	e0bfff17 	ldw	r2,-4(fp)
 2008f84:	00c00044 	movi	r3,1
 2008f88:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2008f8c:	e0bffd17 	ldw	r2,-12(fp)
 2008f90:	00007d06 	br	2009188 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2008f94:	d0a70c03 	ldbu	r2,-25552(gp)
 2008f98:	10803fcc 	andi	r2,r2,255
 2008f9c:	10000526 	beq	r2,zero,2008fb4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2008fa0:	e0bfff17 	ldw	r2,-4(fp)
 2008fa4:	00c003c4 	movi	r3,15
 2008fa8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2008fac:	e0bffd17 	ldw	r2,-12(fp)
 2008fb0:	00007506 	br	2009188 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008fb4:	0005303a 	rdctl	r2,status
 2008fb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008fbc:	e0fffc17 	ldw	r3,-16(fp)
 2008fc0:	00bfff84 	movi	r2,-2
 2008fc4:	1884703a 	and	r2,r3,r2
 2008fc8:	1001703a 	wrctl	status,r2
  
  return context;
 2008fcc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2008fd0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2008fd4:	e0bffd17 	ldw	r2,-12(fp)
 2008fd8:	10800283 	ldbu	r2,10(r2)
 2008fdc:	10803fcc 	andi	r2,r2,255
 2008fe0:	10000326 	beq	r2,zero,2008ff0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2008fe4:	00800044 	movi	r2,1
 2008fe8:	e0bff405 	stb	r2,-48(fp)
 2008fec:	00000106 	br	2008ff4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2008ff0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2008ff4:	e0bffe03 	ldbu	r2,-8(fp)
 2008ff8:	10000326 	beq	r2,zero,2009008 <OSQDel+0xec>
 2008ffc:	10800060 	cmpeqi	r2,r2,1
 2009000:	1000301e 	bne	r2,zero,20090c4 <OSQDel+0x1a8>
 2009004:	00005506 	br	200915c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2009008:	e0bff403 	ldbu	r2,-48(fp)
 200900c:	10001e1e 	bne	r2,zero,2009088 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2009010:	e0bffd17 	ldw	r2,-12(fp)
 2009014:	00c00fc4 	movi	r3,63
 2009018:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 200901c:	e0bffd17 	ldw	r2,-12(fp)
 2009020:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2009024:	e0bffd17 	ldw	r2,-12(fp)
 2009028:	10800117 	ldw	r2,4(r2)
 200902c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2009030:	d0e70917 	ldw	r3,-25564(gp)
 2009034:	e0bff817 	ldw	r2,-32(fp)
 2009038:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 200903c:	e0bff817 	ldw	r2,-32(fp)
 2009040:	d0a70915 	stw	r2,-25564(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2009044:	e0bffd17 	ldw	r2,-12(fp)
 2009048:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 200904c:	d0e70b17 	ldw	r3,-25556(gp)
 2009050:	e0bffd17 	ldw	r2,-12(fp)
 2009054:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2009058:	e0bffd17 	ldw	r2,-12(fp)
 200905c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2009060:	e0bffd17 	ldw	r2,-12(fp)
 2009064:	d0a70b15 	stw	r2,-25556(gp)
 2009068:	e0bff617 	ldw	r2,-40(fp)
 200906c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009070:	e0bff717 	ldw	r2,-36(fp)
 2009074:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2009078:	e0bfff17 	ldw	r2,-4(fp)
 200907c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2009080:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2009084:	00003f06 	br	2009184 <OSQDel+0x268>
 2009088:	e0bff617 	ldw	r2,-40(fp)
 200908c:	e0bff915 	stw	r2,-28(fp)
 2009090:	e0bff917 	ldw	r2,-28(fp)
 2009094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2009098:	e0bfff17 	ldw	r2,-4(fp)
 200909c:	00c01244 	movi	r3,73
 20090a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 20090a4:	e0bffd17 	ldw	r2,-12(fp)
 20090a8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 20090ac:	00003506 	br	2009184 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 20090b0:	000f883a 	mov	r7,zero
 20090b4:	01800104 	movi	r6,4
 20090b8:	000b883a 	mov	r5,zero
 20090bc:	e13ffd17 	ldw	r4,-12(fp)
 20090c0:	20050440 	call	2005044 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 20090c4:	e0bffd17 	ldw	r2,-12(fp)
 20090c8:	10800283 	ldbu	r2,10(r2)
 20090cc:	10803fcc 	andi	r2,r2,255
 20090d0:	103ff71e 	bne	r2,zero,20090b0 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20090d4:	e0bffd17 	ldw	r2,-12(fp)
 20090d8:	00c00fc4 	movi	r3,63
 20090dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20090e0:	e0bffd17 	ldw	r2,-12(fp)
 20090e4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 20090e8:	e0bffd17 	ldw	r2,-12(fp)
 20090ec:	10800117 	ldw	r2,4(r2)
 20090f0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 20090f4:	d0e70917 	ldw	r3,-25564(gp)
 20090f8:	e0bff817 	ldw	r2,-32(fp)
 20090fc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2009100:	e0bff817 	ldw	r2,-32(fp)
 2009104:	d0a70915 	stw	r2,-25564(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2009108:	e0bffd17 	ldw	r2,-12(fp)
 200910c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2009110:	d0e70b17 	ldw	r3,-25556(gp)
 2009114:	e0bffd17 	ldw	r2,-12(fp)
 2009118:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 200911c:	e0bffd17 	ldw	r2,-12(fp)
 2009120:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2009124:	e0bffd17 	ldw	r2,-12(fp)
 2009128:	d0a70b15 	stw	r2,-25556(gp)
 200912c:	e0bff617 	ldw	r2,-40(fp)
 2009130:	e0bffa15 	stw	r2,-24(fp)
 2009134:	e0bffa17 	ldw	r2,-24(fp)
 2009138:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 200913c:	e0bff403 	ldbu	r2,-48(fp)
 2009140:	10800058 	cmpnei	r2,r2,1
 2009144:	1000011e 	bne	r2,zero,200914c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2009148:	2005a900 	call	2005a90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 200914c:	e0bfff17 	ldw	r2,-4(fp)
 2009150:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2009154:	e03ff515 	stw	zero,-44(fp)
             break;
 2009158:	00000a06 	br	2009184 <OSQDel+0x268>
 200915c:	e0bff617 	ldw	r2,-40(fp)
 2009160:	e0bffb15 	stw	r2,-20(fp)
 2009164:	e0bffb17 	ldw	r2,-20(fp)
 2009168:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 200916c:	e0bfff17 	ldw	r2,-4(fp)
 2009170:	00c001c4 	movi	r3,7
 2009174:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2009178:	e0bffd17 	ldw	r2,-12(fp)
 200917c:	e0bff515 	stw	r2,-44(fp)
             break;
 2009180:	0001883a 	nop
    }
    return (pevent_return);
 2009184:	e0bff517 	ldw	r2,-44(fp)
}
 2009188:	e037883a 	mov	sp,fp
 200918c:	dfc00117 	ldw	ra,4(sp)
 2009190:	df000017 	ldw	fp,0(sp)
 2009194:	dec00204 	addi	sp,sp,8
 2009198:	f800283a 	ret

0200919c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 200919c:	defffa04 	addi	sp,sp,-24
 20091a0:	df000515 	stw	fp,20(sp)
 20091a4:	df000504 	addi	fp,sp,20
 20091a8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20091ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20091b0:	e0bfff17 	ldw	r2,-4(fp)
 20091b4:	1000021e 	bne	r2,zero,20091c0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 20091b8:	00800104 	movi	r2,4
 20091bc:	00002106 	br	2009244 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20091c0:	e0bfff17 	ldw	r2,-4(fp)
 20091c4:	10800003 	ldbu	r2,0(r2)
 20091c8:	10803fcc 	andi	r2,r2,255
 20091cc:	108000a0 	cmpeqi	r2,r2,2
 20091d0:	1000021e 	bne	r2,zero,20091dc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 20091d4:	00800044 	movi	r2,1
 20091d8:	00001a06 	br	2009244 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20091dc:	0005303a 	rdctl	r2,status
 20091e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20091e4:	e0fffd17 	ldw	r3,-12(fp)
 20091e8:	00bfff84 	movi	r2,-2
 20091ec:	1884703a 	and	r2,r3,r2
 20091f0:	1001703a 	wrctl	status,r2
  
  return context;
 20091f4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20091f8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 20091fc:	e0bfff17 	ldw	r2,-4(fp)
 2009200:	10800117 	ldw	r2,4(r2)
 2009204:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2009208:	e0bffc17 	ldw	r2,-16(fp)
 200920c:	10c00117 	ldw	r3,4(r2)
 2009210:	e0bffc17 	ldw	r2,-16(fp)
 2009214:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2009218:	e0bffc17 	ldw	r2,-16(fp)
 200921c:	10c00117 	ldw	r3,4(r2)
 2009220:	e0bffc17 	ldw	r2,-16(fp)
 2009224:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2009228:	e0bffc17 	ldw	r2,-16(fp)
 200922c:	1000058d 	sth	zero,22(r2)
 2009230:	e0bffb17 	ldw	r2,-20(fp)
 2009234:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009238:	e0bffe17 	ldw	r2,-8(fp)
 200923c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2009240:	0005883a 	mov	r2,zero
}
 2009244:	e037883a 	mov	sp,fp
 2009248:	df000017 	ldw	fp,0(sp)
 200924c:	dec00104 	addi	sp,sp,4
 2009250:	f800283a 	ret

02009254 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2009254:	defff304 	addi	sp,sp,-52
 2009258:	dfc00c15 	stw	ra,48(sp)
 200925c:	df000b15 	stw	fp,44(sp)
 2009260:	df000b04 	addi	fp,sp,44
 2009264:	e13ffd15 	stw	r4,-12(fp)
 2009268:	2805883a 	mov	r2,r5
 200926c:	e1bfff15 	stw	r6,-4(fp)
 2009270:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2009274:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2009278:	e0bfff17 	ldw	r2,-4(fp)
 200927c:	1000021e 	bne	r2,zero,2009288 <OSQPend+0x34>
        return ((void *)0);
 2009280:	0005883a 	mov	r2,zero
 2009284:	00009106 	br	20094cc <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2009288:	e0bffd17 	ldw	r2,-12(fp)
 200928c:	1000051e 	bne	r2,zero,20092a4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2009290:	e0bfff17 	ldw	r2,-4(fp)
 2009294:	00c00104 	movi	r3,4
 2009298:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 200929c:	0005883a 	mov	r2,zero
 20092a0:	00008a06 	br	20094cc <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20092a4:	e0bffd17 	ldw	r2,-12(fp)
 20092a8:	10800003 	ldbu	r2,0(r2)
 20092ac:	10803fcc 	andi	r2,r2,255
 20092b0:	108000a0 	cmpeqi	r2,r2,2
 20092b4:	1000051e 	bne	r2,zero,20092cc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20092b8:	e0bfff17 	ldw	r2,-4(fp)
 20092bc:	00c00044 	movi	r3,1
 20092c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20092c4:	0005883a 	mov	r2,zero
 20092c8:	00008006 	br	20094cc <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20092cc:	d0a70c03 	ldbu	r2,-25552(gp)
 20092d0:	10803fcc 	andi	r2,r2,255
 20092d4:	10000526 	beq	r2,zero,20092ec <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 20092d8:	e0bfff17 	ldw	r2,-4(fp)
 20092dc:	00c00084 	movi	r3,2
 20092e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20092e4:	0005883a 	mov	r2,zero
 20092e8:	00007806 	br	20094cc <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 20092ec:	d0a6fe03 	ldbu	r2,-25608(gp)
 20092f0:	10803fcc 	andi	r2,r2,255
 20092f4:	10000526 	beq	r2,zero,200930c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 20092f8:	e0bfff17 	ldw	r2,-4(fp)
 20092fc:	00c00344 	movi	r3,13
 2009300:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2009304:	0005883a 	mov	r2,zero
 2009308:	00007006 	br	20094cc <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200930c:	0005303a 	rdctl	r2,status
 2009310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009314:	e0fffc17 	ldw	r3,-16(fp)
 2009318:	00bfff84 	movi	r2,-2
 200931c:	1884703a 	and	r2,r3,r2
 2009320:	1001703a 	wrctl	status,r2
  
  return context;
 2009324:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2009328:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 200932c:	e0bffd17 	ldw	r2,-12(fp)
 2009330:	10800117 	ldw	r2,4(r2)
 2009334:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2009338:	e0bff817 	ldw	r2,-32(fp)
 200933c:	1080058b 	ldhu	r2,22(r2)
 2009340:	10bfffcc 	andi	r2,r2,65535
 2009344:	10001e26 	beq	r2,zero,20093c0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2009348:	e0bff817 	ldw	r2,-32(fp)
 200934c:	10800417 	ldw	r2,16(r2)
 2009350:	11000104 	addi	r4,r2,4
 2009354:	e0fff817 	ldw	r3,-32(fp)
 2009358:	19000415 	stw	r4,16(r3)
 200935c:	10800017 	ldw	r2,0(r2)
 2009360:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2009364:	e0bff817 	ldw	r2,-32(fp)
 2009368:	1080058b 	ldhu	r2,22(r2)
 200936c:	10bfffc4 	addi	r2,r2,-1
 2009370:	1007883a 	mov	r3,r2
 2009374:	e0bff817 	ldw	r2,-32(fp)
 2009378:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 200937c:	e0bff817 	ldw	r2,-32(fp)
 2009380:	10c00417 	ldw	r3,16(r2)
 2009384:	e0bff817 	ldw	r2,-32(fp)
 2009388:	10800217 	ldw	r2,8(r2)
 200938c:	1880041e 	bne	r3,r2,20093a0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2009390:	e0bff817 	ldw	r2,-32(fp)
 2009394:	10c00117 	ldw	r3,4(r2)
 2009398:	e0bff817 	ldw	r2,-32(fp)
 200939c:	10c00415 	stw	r3,16(r2)
 20093a0:	e0bff617 	ldw	r2,-40(fp)
 20093a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20093a8:	e0bff717 	ldw	r2,-36(fp)
 20093ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20093b0:	e0bfff17 	ldw	r2,-4(fp)
 20093b4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 20093b8:	e0bff517 	ldw	r2,-44(fp)
 20093bc:	00004306 	br	20094cc <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 20093c0:	d0a70d17 	ldw	r2,-25548(gp)
 20093c4:	d0e70d17 	ldw	r3,-25548(gp)
 20093c8:	18c00c03 	ldbu	r3,48(r3)
 20093cc:	18c00114 	ori	r3,r3,4
 20093d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20093d4:	d0a70d17 	ldw	r2,-25548(gp)
 20093d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 20093dc:	d0a70d17 	ldw	r2,-25548(gp)
 20093e0:	e0fffe0b 	ldhu	r3,-8(fp)
 20093e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 20093e8:	e13ffd17 	ldw	r4,-12(fp)
 20093ec:	20051dc0 	call	20051dc <OS_EventTaskWait>
 20093f0:	e0bff617 	ldw	r2,-40(fp)
 20093f4:	e0bffb15 	stw	r2,-20(fp)
 20093f8:	e0bffb17 	ldw	r2,-20(fp)
 20093fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2009400:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009404:	0005303a 	rdctl	r2,status
 2009408:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200940c:	e0fff917 	ldw	r3,-28(fp)
 2009410:	00bfff84 	movi	r2,-2
 2009414:	1884703a 	and	r2,r3,r2
 2009418:	1001703a 	wrctl	status,r2
  
  return context;
 200941c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2009420:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2009424:	d0a70d17 	ldw	r2,-25548(gp)
 2009428:	10800c43 	ldbu	r2,49(r2)
 200942c:	10803fcc 	andi	r2,r2,255
 2009430:	10000326 	beq	r2,zero,2009440 <OSQPend+0x1ec>
 2009434:	108000a0 	cmpeqi	r2,r2,2
 2009438:	1000071e 	bne	r2,zero,2009458 <OSQPend+0x204>
 200943c:	00000b06 	br	200946c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2009440:	d0a70d17 	ldw	r2,-25548(gp)
 2009444:	10800917 	ldw	r2,36(r2)
 2009448:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 200944c:	e0bfff17 	ldw	r2,-4(fp)
 2009450:	10000005 	stb	zero,0(r2)
             break;
 2009454:	00000e06 	br	2009490 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2009458:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 200945c:	e0bfff17 	ldw	r2,-4(fp)
 2009460:	00c00384 	movi	r3,14
 2009464:	10c00005 	stb	r3,0(r2)
             break;
 2009468:	00000906 	br	2009490 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 200946c:	d0a70d17 	ldw	r2,-25548(gp)
 2009470:	e17ffd17 	ldw	r5,-12(fp)
 2009474:	1009883a 	mov	r4,r2
 2009478:	200543c0 	call	200543c <OS_EventTaskRemove>
             pmsg = (void *)0;
 200947c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2009480:	e0bfff17 	ldw	r2,-4(fp)
 2009484:	00c00284 	movi	r3,10
 2009488:	10c00005 	stb	r3,0(r2)
             break;
 200948c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2009490:	d0a70d17 	ldw	r2,-25548(gp)
 2009494:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2009498:	d0a70d17 	ldw	r2,-25548(gp)
 200949c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 20094a0:	d0a70d17 	ldw	r2,-25548(gp)
 20094a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20094a8:	d0a70d17 	ldw	r2,-25548(gp)
 20094ac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 20094b0:	d0a70d17 	ldw	r2,-25548(gp)
 20094b4:	10000915 	stw	zero,36(r2)
 20094b8:	e0bff617 	ldw	r2,-40(fp)
 20094bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20094c0:	e0bffa17 	ldw	r2,-24(fp)
 20094c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 20094c8:	e0bff517 	ldw	r2,-44(fp)
}
 20094cc:	e037883a 	mov	sp,fp
 20094d0:	dfc00117 	ldw	ra,4(sp)
 20094d4:	df000017 	ldw	fp,0(sp)
 20094d8:	dec00204 	addi	sp,sp,8
 20094dc:	f800283a 	ret

020094e0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20094e0:	defff604 	addi	sp,sp,-40
 20094e4:	dfc00915 	stw	ra,36(sp)
 20094e8:	df000815 	stw	fp,32(sp)
 20094ec:	df000804 	addi	fp,sp,32
 20094f0:	e13ffd15 	stw	r4,-12(fp)
 20094f4:	2805883a 	mov	r2,r5
 20094f8:	e1bfff15 	stw	r6,-4(fp)
 20094fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2009500:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2009504:	e0bfff17 	ldw	r2,-4(fp)
 2009508:	1000021e 	bne	r2,zero,2009514 <OSQPendAbort+0x34>
        return (0);
 200950c:	0005883a 	mov	r2,zero
 2009510:	00004906 	br	2009638 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2009514:	e0bffd17 	ldw	r2,-12(fp)
 2009518:	1000051e 	bne	r2,zero,2009530 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 200951c:	e0bfff17 	ldw	r2,-4(fp)
 2009520:	00c00104 	movi	r3,4
 2009524:	10c00005 	stb	r3,0(r2)
        return (0);
 2009528:	0005883a 	mov	r2,zero
 200952c:	00004206 	br	2009638 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2009530:	e0bffd17 	ldw	r2,-12(fp)
 2009534:	10800003 	ldbu	r2,0(r2)
 2009538:	10803fcc 	andi	r2,r2,255
 200953c:	108000a0 	cmpeqi	r2,r2,2
 2009540:	1000051e 	bne	r2,zero,2009558 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2009544:	e0bfff17 	ldw	r2,-4(fp)
 2009548:	00c00044 	movi	r3,1
 200954c:	10c00005 	stb	r3,0(r2)
        return (0);
 2009550:	0005883a 	mov	r2,zero
 2009554:	00003806 	br	2009638 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009558:	0005303a 	rdctl	r2,status
 200955c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009560:	e0fffc17 	ldw	r3,-16(fp)
 2009564:	00bfff84 	movi	r2,-2
 2009568:	1884703a 	and	r2,r3,r2
 200956c:	1001703a 	wrctl	status,r2
  
  return context;
 2009570:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2009574:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2009578:	e0bffd17 	ldw	r2,-12(fp)
 200957c:	10800283 	ldbu	r2,10(r2)
 2009580:	10803fcc 	andi	r2,r2,255
 2009584:	10002526 	beq	r2,zero,200961c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 2009588:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 200958c:	e0bffe03 	ldbu	r2,-8(fp)
 2009590:	10800060 	cmpeqi	r2,r2,1
 2009594:	10000e26 	beq	r2,zero,20095d0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2009598:	00000806 	br	20095bc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 200959c:	01c00084 	movi	r7,2
 20095a0:	01800104 	movi	r6,4
 20095a4:	000b883a 	mov	r5,zero
 20095a8:	e13ffd17 	ldw	r4,-12(fp)
 20095ac:	20050440 	call	2005044 <OS_EventTaskRdy>
                     nbr_tasks++;
 20095b0:	e0bff803 	ldbu	r2,-32(fp)
 20095b4:	10800044 	addi	r2,r2,1
 20095b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20095bc:	e0bffd17 	ldw	r2,-12(fp)
 20095c0:	10800283 	ldbu	r2,10(r2)
 20095c4:	10803fcc 	andi	r2,r2,255
 20095c8:	103ff41e 	bne	r2,zero,200959c <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20095cc:	00000906 	br	20095f4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20095d0:	01c00084 	movi	r7,2
 20095d4:	01800104 	movi	r6,4
 20095d8:	000b883a 	mov	r5,zero
 20095dc:	e13ffd17 	ldw	r4,-12(fp)
 20095e0:	20050440 	call	2005044 <OS_EventTaskRdy>
                 nbr_tasks++;
 20095e4:	e0bff803 	ldbu	r2,-32(fp)
 20095e8:	10800044 	addi	r2,r2,1
 20095ec:	e0bff805 	stb	r2,-32(fp)
                 break;
 20095f0:	0001883a 	nop
 20095f4:	e0bff917 	ldw	r2,-28(fp)
 20095f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20095fc:	e0bffa17 	ldw	r2,-24(fp)
 2009600:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2009604:	2005a900 	call	2005a90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2009608:	e0bfff17 	ldw	r2,-4(fp)
 200960c:	00c00384 	movi	r3,14
 2009610:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2009614:	e0bff803 	ldbu	r2,-32(fp)
 2009618:	00000706 	br	2009638 <OSQPendAbort+0x158>
 200961c:	e0bff917 	ldw	r2,-28(fp)
 2009620:	e0bffb15 	stw	r2,-20(fp)
 2009624:	e0bffb17 	ldw	r2,-20(fp)
 2009628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200962c:	e0bfff17 	ldw	r2,-4(fp)
 2009630:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2009634:	0005883a 	mov	r2,zero
}
 2009638:	e037883a 	mov	sp,fp
 200963c:	dfc00117 	ldw	ra,4(sp)
 2009640:	df000017 	ldw	fp,0(sp)
 2009644:	dec00204 	addi	sp,sp,8
 2009648:	f800283a 	ret

0200964c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 200964c:	defff604 	addi	sp,sp,-40
 2009650:	dfc00915 	stw	ra,36(sp)
 2009654:	df000815 	stw	fp,32(sp)
 2009658:	df000804 	addi	fp,sp,32
 200965c:	e13ffe15 	stw	r4,-8(fp)
 2009660:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2009664:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2009668:	e0bffe17 	ldw	r2,-8(fp)
 200966c:	1000021e 	bne	r2,zero,2009678 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2009670:	00800104 	movi	r2,4
 2009674:	00004a06 	br	20097a0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2009678:	e0bffe17 	ldw	r2,-8(fp)
 200967c:	10800003 	ldbu	r2,0(r2)
 2009680:	10803fcc 	andi	r2,r2,255
 2009684:	108000a0 	cmpeqi	r2,r2,2
 2009688:	1000021e 	bne	r2,zero,2009694 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 200968c:	00800044 	movi	r2,1
 2009690:	00004306 	br	20097a0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009694:	0005303a 	rdctl	r2,status
 2009698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200969c:	e0fffd17 	ldw	r3,-12(fp)
 20096a0:	00bfff84 	movi	r2,-2
 20096a4:	1884703a 	and	r2,r3,r2
 20096a8:	1001703a 	wrctl	status,r2
  
  return context;
 20096ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20096b0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 20096b4:	e0bffe17 	ldw	r2,-8(fp)
 20096b8:	10800283 	ldbu	r2,10(r2)
 20096bc:	10803fcc 	andi	r2,r2,255
 20096c0:	10000c26 	beq	r2,zero,20096f4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20096c4:	000f883a 	mov	r7,zero
 20096c8:	01800104 	movi	r6,4
 20096cc:	e17fff17 	ldw	r5,-4(fp)
 20096d0:	e13ffe17 	ldw	r4,-8(fp)
 20096d4:	20050440 	call	2005044 <OS_EventTaskRdy>
 20096d8:	e0bff817 	ldw	r2,-32(fp)
 20096dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20096e0:	e0bff917 	ldw	r2,-28(fp)
 20096e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 20096e8:	2005a900 	call	2005a90 <OS_Sched>
        return (OS_ERR_NONE);
 20096ec:	0005883a 	mov	r2,zero
 20096f0:	00002b06 	br	20097a0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 20096f4:	e0bffe17 	ldw	r2,-8(fp)
 20096f8:	10800117 	ldw	r2,4(r2)
 20096fc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2009700:	e0bffb17 	ldw	r2,-20(fp)
 2009704:	10c0058b 	ldhu	r3,22(r2)
 2009708:	e0bffb17 	ldw	r2,-20(fp)
 200970c:	1080050b 	ldhu	r2,20(r2)
 2009710:	18ffffcc 	andi	r3,r3,65535
 2009714:	10bfffcc 	andi	r2,r2,65535
 2009718:	18800636 	bltu	r3,r2,2009734 <OSQPost+0xe8>
 200971c:	e0bff817 	ldw	r2,-32(fp)
 2009720:	e0bffa15 	stw	r2,-24(fp)
 2009724:	e0bffa17 	ldw	r2,-24(fp)
 2009728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 200972c:	00800784 	movi	r2,30
 2009730:	00001b06 	br	20097a0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2009734:	e0bffb17 	ldw	r2,-20(fp)
 2009738:	10800317 	ldw	r2,12(r2)
 200973c:	11000104 	addi	r4,r2,4
 2009740:	e0fffb17 	ldw	r3,-20(fp)
 2009744:	19000315 	stw	r4,12(r3)
 2009748:	e0ffff17 	ldw	r3,-4(fp)
 200974c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2009750:	e0bffb17 	ldw	r2,-20(fp)
 2009754:	1080058b 	ldhu	r2,22(r2)
 2009758:	10800044 	addi	r2,r2,1
 200975c:	1007883a 	mov	r3,r2
 2009760:	e0bffb17 	ldw	r2,-20(fp)
 2009764:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2009768:	e0bffb17 	ldw	r2,-20(fp)
 200976c:	10c00317 	ldw	r3,12(r2)
 2009770:	e0bffb17 	ldw	r2,-20(fp)
 2009774:	10800217 	ldw	r2,8(r2)
 2009778:	1880041e 	bne	r3,r2,200978c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 200977c:	e0bffb17 	ldw	r2,-20(fp)
 2009780:	10c00117 	ldw	r3,4(r2)
 2009784:	e0bffb17 	ldw	r2,-20(fp)
 2009788:	10c00315 	stw	r3,12(r2)
 200978c:	e0bff817 	ldw	r2,-32(fp)
 2009790:	e0bffc15 	stw	r2,-16(fp)
 2009794:	e0bffc17 	ldw	r2,-16(fp)
 2009798:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200979c:	0005883a 	mov	r2,zero
}
 20097a0:	e037883a 	mov	sp,fp
 20097a4:	dfc00117 	ldw	ra,4(sp)
 20097a8:	df000017 	ldw	fp,0(sp)
 20097ac:	dec00204 	addi	sp,sp,8
 20097b0:	f800283a 	ret

020097b4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 20097b4:	defff604 	addi	sp,sp,-40
 20097b8:	dfc00915 	stw	ra,36(sp)
 20097bc:	df000815 	stw	fp,32(sp)
 20097c0:	df000804 	addi	fp,sp,32
 20097c4:	e13ffe15 	stw	r4,-8(fp)
 20097c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20097cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20097d0:	e0bffe17 	ldw	r2,-8(fp)
 20097d4:	1000021e 	bne	r2,zero,20097e0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20097d8:	00800104 	movi	r2,4
 20097dc:	00004c06 	br	2009910 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20097e0:	e0bffe17 	ldw	r2,-8(fp)
 20097e4:	10800003 	ldbu	r2,0(r2)
 20097e8:	10803fcc 	andi	r2,r2,255
 20097ec:	108000a0 	cmpeqi	r2,r2,2
 20097f0:	1000021e 	bne	r2,zero,20097fc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 20097f4:	00800044 	movi	r2,1
 20097f8:	00004506 	br	2009910 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20097fc:	0005303a 	rdctl	r2,status
 2009800:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009804:	e0fffd17 	ldw	r3,-12(fp)
 2009808:	00bfff84 	movi	r2,-2
 200980c:	1884703a 	and	r2,r3,r2
 2009810:	1001703a 	wrctl	status,r2
  
  return context;
 2009814:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2009818:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 200981c:	e0bffe17 	ldw	r2,-8(fp)
 2009820:	10800283 	ldbu	r2,10(r2)
 2009824:	10803fcc 	andi	r2,r2,255
 2009828:	10000c26 	beq	r2,zero,200985c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 200982c:	000f883a 	mov	r7,zero
 2009830:	01800104 	movi	r6,4
 2009834:	e17fff17 	ldw	r5,-4(fp)
 2009838:	e13ffe17 	ldw	r4,-8(fp)
 200983c:	20050440 	call	2005044 <OS_EventTaskRdy>
 2009840:	e0bff817 	ldw	r2,-32(fp)
 2009844:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009848:	e0bff917 	ldw	r2,-28(fp)
 200984c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2009850:	2005a900 	call	2005a90 <OS_Sched>
        return (OS_ERR_NONE);
 2009854:	0005883a 	mov	r2,zero
 2009858:	00002d06 	br	2009910 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 200985c:	e0bffe17 	ldw	r2,-8(fp)
 2009860:	10800117 	ldw	r2,4(r2)
 2009864:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2009868:	e0bffb17 	ldw	r2,-20(fp)
 200986c:	10c0058b 	ldhu	r3,22(r2)
 2009870:	e0bffb17 	ldw	r2,-20(fp)
 2009874:	1080050b 	ldhu	r2,20(r2)
 2009878:	18ffffcc 	andi	r3,r3,65535
 200987c:	10bfffcc 	andi	r2,r2,65535
 2009880:	18800636 	bltu	r3,r2,200989c <OSQPostFront+0xe8>
 2009884:	e0bff817 	ldw	r2,-32(fp)
 2009888:	e0bffa15 	stw	r2,-24(fp)
 200988c:	e0bffa17 	ldw	r2,-24(fp)
 2009890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2009894:	00800784 	movi	r2,30
 2009898:	00001d06 	br	2009910 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 200989c:	e0bffb17 	ldw	r2,-20(fp)
 20098a0:	10c00417 	ldw	r3,16(r2)
 20098a4:	e0bffb17 	ldw	r2,-20(fp)
 20098a8:	10800117 	ldw	r2,4(r2)
 20098ac:	1880041e 	bne	r3,r2,20098c0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 20098b0:	e0bffb17 	ldw	r2,-20(fp)
 20098b4:	10c00217 	ldw	r3,8(r2)
 20098b8:	e0bffb17 	ldw	r2,-20(fp)
 20098bc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 20098c0:	e0bffb17 	ldw	r2,-20(fp)
 20098c4:	10800417 	ldw	r2,16(r2)
 20098c8:	10ffff04 	addi	r3,r2,-4
 20098cc:	e0bffb17 	ldw	r2,-20(fp)
 20098d0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 20098d4:	e0bffb17 	ldw	r2,-20(fp)
 20098d8:	10800417 	ldw	r2,16(r2)
 20098dc:	e0ffff17 	ldw	r3,-4(fp)
 20098e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20098e4:	e0bffb17 	ldw	r2,-20(fp)
 20098e8:	1080058b 	ldhu	r2,22(r2)
 20098ec:	10800044 	addi	r2,r2,1
 20098f0:	1007883a 	mov	r3,r2
 20098f4:	e0bffb17 	ldw	r2,-20(fp)
 20098f8:	10c0058d 	sth	r3,22(r2)
 20098fc:	e0bff817 	ldw	r2,-32(fp)
 2009900:	e0bffc15 	stw	r2,-16(fp)
 2009904:	e0bffc17 	ldw	r2,-16(fp)
 2009908:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200990c:	0005883a 	mov	r2,zero
}
 2009910:	e037883a 	mov	sp,fp
 2009914:	dfc00117 	ldw	ra,4(sp)
 2009918:	df000017 	ldw	fp,0(sp)
 200991c:	dec00204 	addi	sp,sp,8
 2009920:	f800283a 	ret

02009924 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2009924:	defff504 	addi	sp,sp,-44
 2009928:	dfc00a15 	stw	ra,40(sp)
 200992c:	df000915 	stw	fp,36(sp)
 2009930:	df000904 	addi	fp,sp,36
 2009934:	e13ffd15 	stw	r4,-12(fp)
 2009938:	e17ffe15 	stw	r5,-8(fp)
 200993c:	3005883a 	mov	r2,r6
 2009940:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2009944:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2009948:	e0bffd17 	ldw	r2,-12(fp)
 200994c:	1000021e 	bne	r2,zero,2009958 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2009950:	00800104 	movi	r2,4
 2009954:	00007106 	br	2009b1c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2009958:	e0bffd17 	ldw	r2,-12(fp)
 200995c:	10800003 	ldbu	r2,0(r2)
 2009960:	10803fcc 	andi	r2,r2,255
 2009964:	108000a0 	cmpeqi	r2,r2,2
 2009968:	1000021e 	bne	r2,zero,2009974 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 200996c:	00800044 	movi	r2,1
 2009970:	00006a06 	br	2009b1c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009974:	0005303a 	rdctl	r2,status
 2009978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200997c:	e0fffc17 	ldw	r3,-16(fp)
 2009980:	00bfff84 	movi	r2,-2
 2009984:	1884703a 	and	r2,r3,r2
 2009988:	1001703a 	wrctl	status,r2
  
  return context;
 200998c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2009990:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2009994:	e0bffd17 	ldw	r2,-12(fp)
 2009998:	10800283 	ldbu	r2,10(r2)
 200999c:	10803fcc 	andi	r2,r2,255
 20099a0:	10001d26 	beq	r2,zero,2009a18 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20099a4:	e0bfff03 	ldbu	r2,-4(fp)
 20099a8:	1080004c 	andi	r2,r2,1
 20099ac:	10000b26 	beq	r2,zero,20099dc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20099b0:	00000506 	br	20099c8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20099b4:	000f883a 	mov	r7,zero
 20099b8:	01800104 	movi	r6,4
 20099bc:	e17ffe17 	ldw	r5,-8(fp)
 20099c0:	e13ffd17 	ldw	r4,-12(fp)
 20099c4:	20050440 	call	2005044 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20099c8:	e0bffd17 	ldw	r2,-12(fp)
 20099cc:	10800283 	ldbu	r2,10(r2)
 20099d0:	10803fcc 	andi	r2,r2,255
 20099d4:	103ff71e 	bne	r2,zero,20099b4 <OSQPostOpt+0x90>
 20099d8:	00000506 	br	20099f0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20099dc:	000f883a 	mov	r7,zero
 20099e0:	01800104 	movi	r6,4
 20099e4:	e17ffe17 	ldw	r5,-8(fp)
 20099e8:	e13ffd17 	ldw	r4,-12(fp)
 20099ec:	20050440 	call	2005044 <OS_EventTaskRdy>
 20099f0:	e0bff717 	ldw	r2,-36(fp)
 20099f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20099f8:	e0bff817 	ldw	r2,-32(fp)
 20099fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2009a00:	e0bfff03 	ldbu	r2,-4(fp)
 2009a04:	1080010c 	andi	r2,r2,4
 2009a08:	1000011e 	bne	r2,zero,2009a10 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 2009a0c:	2005a900 	call	2005a90 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2009a10:	0005883a 	mov	r2,zero
 2009a14:	00004106 	br	2009b1c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2009a18:	e0bffd17 	ldw	r2,-12(fp)
 2009a1c:	10800117 	ldw	r2,4(r2)
 2009a20:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2009a24:	e0bffa17 	ldw	r2,-24(fp)
 2009a28:	10c0058b 	ldhu	r3,22(r2)
 2009a2c:	e0bffa17 	ldw	r2,-24(fp)
 2009a30:	1080050b 	ldhu	r2,20(r2)
 2009a34:	18ffffcc 	andi	r3,r3,65535
 2009a38:	10bfffcc 	andi	r2,r2,65535
 2009a3c:	18800636 	bltu	r3,r2,2009a58 <OSQPostOpt+0x134>
 2009a40:	e0bff717 	ldw	r2,-36(fp)
 2009a44:	e0bff915 	stw	r2,-28(fp)
 2009a48:	e0bff917 	ldw	r2,-28(fp)
 2009a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2009a50:	00800784 	movi	r2,30
 2009a54:	00003106 	br	2009b1c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2009a58:	e0bfff03 	ldbu	r2,-4(fp)
 2009a5c:	1080008c 	andi	r2,r2,2
 2009a60:	10001326 	beq	r2,zero,2009ab0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 2009a64:	e0bffa17 	ldw	r2,-24(fp)
 2009a68:	10c00417 	ldw	r3,16(r2)
 2009a6c:	e0bffa17 	ldw	r2,-24(fp)
 2009a70:	10800117 	ldw	r2,4(r2)
 2009a74:	1880041e 	bne	r3,r2,2009a88 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2009a78:	e0bffa17 	ldw	r2,-24(fp)
 2009a7c:	10c00217 	ldw	r3,8(r2)
 2009a80:	e0bffa17 	ldw	r2,-24(fp)
 2009a84:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2009a88:	e0bffa17 	ldw	r2,-24(fp)
 2009a8c:	10800417 	ldw	r2,16(r2)
 2009a90:	10ffff04 	addi	r3,r2,-4
 2009a94:	e0bffa17 	ldw	r2,-24(fp)
 2009a98:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2009a9c:	e0bffa17 	ldw	r2,-24(fp)
 2009aa0:	10800417 	ldw	r2,16(r2)
 2009aa4:	e0fffe17 	ldw	r3,-8(fp)
 2009aa8:	10c00015 	stw	r3,0(r2)
 2009aac:	00001006 	br	2009af0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2009ab0:	e0bffa17 	ldw	r2,-24(fp)
 2009ab4:	10800317 	ldw	r2,12(r2)
 2009ab8:	11000104 	addi	r4,r2,4
 2009abc:	e0fffa17 	ldw	r3,-24(fp)
 2009ac0:	19000315 	stw	r4,12(r3)
 2009ac4:	e0fffe17 	ldw	r3,-8(fp)
 2009ac8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 2009acc:	e0bffa17 	ldw	r2,-24(fp)
 2009ad0:	10c00317 	ldw	r3,12(r2)
 2009ad4:	e0bffa17 	ldw	r2,-24(fp)
 2009ad8:	10800217 	ldw	r2,8(r2)
 2009adc:	1880041e 	bne	r3,r2,2009af0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2009ae0:	e0bffa17 	ldw	r2,-24(fp)
 2009ae4:	10c00117 	ldw	r3,4(r2)
 2009ae8:	e0bffa17 	ldw	r2,-24(fp)
 2009aec:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2009af0:	e0bffa17 	ldw	r2,-24(fp)
 2009af4:	1080058b 	ldhu	r2,22(r2)
 2009af8:	10800044 	addi	r2,r2,1
 2009afc:	1007883a 	mov	r3,r2
 2009b00:	e0bffa17 	ldw	r2,-24(fp)
 2009b04:	10c0058d 	sth	r3,22(r2)
 2009b08:	e0bff717 	ldw	r2,-36(fp)
 2009b0c:	e0bffb15 	stw	r2,-20(fp)
 2009b10:	e0bffb17 	ldw	r2,-20(fp)
 2009b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2009b18:	0005883a 	mov	r2,zero
}
 2009b1c:	e037883a 	mov	sp,fp
 2009b20:	dfc00117 	ldw	ra,4(sp)
 2009b24:	df000017 	ldw	fp,0(sp)
 2009b28:	dec00204 	addi	sp,sp,8
 2009b2c:	f800283a 	ret

02009b30 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2009b30:	defff604 	addi	sp,sp,-40
 2009b34:	df000915 	stw	fp,36(sp)
 2009b38:	df000904 	addi	fp,sp,36
 2009b3c:	e13ffe15 	stw	r4,-8(fp)
 2009b40:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2009b44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2009b48:	e0bffe17 	ldw	r2,-8(fp)
 2009b4c:	1000021e 	bne	r2,zero,2009b58 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2009b50:	00800104 	movi	r2,4
 2009b54:	00004906 	br	2009c7c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2009b58:	e0bfff17 	ldw	r2,-4(fp)
 2009b5c:	1000021e 	bne	r2,zero,2009b68 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2009b60:	00800244 	movi	r2,9
 2009b64:	00004506 	br	2009c7c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2009b68:	e0bffe17 	ldw	r2,-8(fp)
 2009b6c:	10800003 	ldbu	r2,0(r2)
 2009b70:	10803fcc 	andi	r2,r2,255
 2009b74:	108000a0 	cmpeqi	r2,r2,2
 2009b78:	1000021e 	bne	r2,zero,2009b84 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2009b7c:	00800044 	movi	r2,1
 2009b80:	00003e06 	br	2009c7c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009b84:	0005303a 	rdctl	r2,status
 2009b88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009b8c:	e0fffd17 	ldw	r3,-12(fp)
 2009b90:	00bfff84 	movi	r2,-2
 2009b94:	1884703a 	and	r2,r3,r2
 2009b98:	1001703a 	wrctl	status,r2
  
  return context;
 2009b9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2009ba0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2009ba4:	e0bffe17 	ldw	r2,-8(fp)
 2009ba8:	10c00283 	ldbu	r3,10(r2)
 2009bac:	e0bfff17 	ldw	r2,-4(fp)
 2009bb0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2009bb4:	e0bffe17 	ldw	r2,-8(fp)
 2009bb8:	108002c4 	addi	r2,r2,11
 2009bbc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2009bc0:	e0bfff17 	ldw	r2,-4(fp)
 2009bc4:	10800204 	addi	r2,r2,8
 2009bc8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2009bcc:	e03ff705 	stb	zero,-36(fp)
 2009bd0:	00000b06 	br	2009c00 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 2009bd4:	e0bff917 	ldw	r2,-28(fp)
 2009bd8:	10c00044 	addi	r3,r2,1
 2009bdc:	e0fff915 	stw	r3,-28(fp)
 2009be0:	e0fff817 	ldw	r3,-32(fp)
 2009be4:	19000044 	addi	r4,r3,1
 2009be8:	e13ff815 	stw	r4,-32(fp)
 2009bec:	18c00003 	ldbu	r3,0(r3)
 2009bf0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2009bf4:	e0bff703 	ldbu	r2,-36(fp)
 2009bf8:	10800044 	addi	r2,r2,1
 2009bfc:	e0bff705 	stb	r2,-36(fp)
 2009c00:	e0bff703 	ldbu	r2,-36(fp)
 2009c04:	108000f0 	cmpltui	r2,r2,3
 2009c08:	103ff21e 	bne	r2,zero,2009bd4 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 2009c0c:	e0bffe17 	ldw	r2,-8(fp)
 2009c10:	10800117 	ldw	r2,4(r2)
 2009c14:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2009c18:	e0bffc17 	ldw	r2,-16(fp)
 2009c1c:	1080058b 	ldhu	r2,22(r2)
 2009c20:	10bfffcc 	andi	r2,r2,65535
 2009c24:	10000626 	beq	r2,zero,2009c40 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2009c28:	e0bffc17 	ldw	r2,-16(fp)
 2009c2c:	10800417 	ldw	r2,16(r2)
 2009c30:	10c00017 	ldw	r3,0(r2)
 2009c34:	e0bfff17 	ldw	r2,-4(fp)
 2009c38:	10c00015 	stw	r3,0(r2)
 2009c3c:	00000206 	br	2009c48 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2009c40:	e0bfff17 	ldw	r2,-4(fp)
 2009c44:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2009c48:	e0bffc17 	ldw	r2,-16(fp)
 2009c4c:	10c0058b 	ldhu	r3,22(r2)
 2009c50:	e0bfff17 	ldw	r2,-4(fp)
 2009c54:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2009c58:	e0bffc17 	ldw	r2,-16(fp)
 2009c5c:	10c0050b 	ldhu	r3,20(r2)
 2009c60:	e0bfff17 	ldw	r2,-4(fp)
 2009c64:	10c0018d 	sth	r3,6(r2)
 2009c68:	e0bffa17 	ldw	r2,-24(fp)
 2009c6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009c70:	e0bffb17 	ldw	r2,-20(fp)
 2009c74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2009c78:	0005883a 	mov	r2,zero
}
 2009c7c:	e037883a 	mov	sp,fp
 2009c80:	df000017 	ldw	fp,0(sp)
 2009c84:	dec00104 	addi	sp,sp,4
 2009c88:	f800283a 	ret

02009c8c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2009c8c:	defffb04 	addi	sp,sp,-20
 2009c90:	dfc00415 	stw	ra,16(sp)
 2009c94:	df000315 	stw	fp,12(sp)
 2009c98:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2009c9c:	01407804 	movi	r5,480
 2009ca0:	010080b4 	movhi	r4,514
 2009ca4:	21260e04 	addi	r4,r4,-26568
 2009ca8:	20059d40 	call	20059d4 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2009cac:	008080b4 	movhi	r2,514
 2009cb0:	10a60e04 	addi	r2,r2,-26568
 2009cb4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2009cb8:	008080b4 	movhi	r2,514
 2009cbc:	10a61404 	addi	r2,r2,-26544
 2009cc0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2009cc4:	e03ffd0d 	sth	zero,-12(fp)
 2009cc8:	00000c06 	br	2009cfc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2009ccc:	e0bffe17 	ldw	r2,-8(fp)
 2009cd0:	e0ffff17 	ldw	r3,-4(fp)
 2009cd4:	10c00015 	stw	r3,0(r2)
        pq1++;
 2009cd8:	e0bffe17 	ldw	r2,-8(fp)
 2009cdc:	10800604 	addi	r2,r2,24
 2009ce0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2009ce4:	e0bfff17 	ldw	r2,-4(fp)
 2009ce8:	10800604 	addi	r2,r2,24
 2009cec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2009cf0:	e0bffd0b 	ldhu	r2,-12(fp)
 2009cf4:	10800044 	addi	r2,r2,1
 2009cf8:	e0bffd0d 	sth	r2,-12(fp)
 2009cfc:	e0bffd0b 	ldhu	r2,-12(fp)
 2009d00:	108004f0 	cmpltui	r2,r2,19
 2009d04:	103ff11e 	bne	r2,zero,2009ccc <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2009d08:	e0bffe17 	ldw	r2,-8(fp)
 2009d0c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2009d10:	008080b4 	movhi	r2,514
 2009d14:	10a60e04 	addi	r2,r2,-26568
 2009d18:	d0a70915 	stw	r2,-25564(gp)
#endif
}
 2009d1c:	0001883a 	nop
 2009d20:	e037883a 	mov	sp,fp
 2009d24:	dfc00117 	ldw	ra,4(sp)
 2009d28:	df000017 	ldw	fp,0(sp)
 2009d2c:	dec00204 	addi	sp,sp,8
 2009d30:	f800283a 	ret

02009d34 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2009d34:	defffa04 	addi	sp,sp,-24
 2009d38:	df000515 	stw	fp,20(sp)
 2009d3c:	df000504 	addi	fp,sp,20
 2009d40:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2009d44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2009d48:	e0bfff17 	ldw	r2,-4(fp)
 2009d4c:	1000021e 	bne	r2,zero,2009d58 <OSSemAccept+0x24>
        return (0);
 2009d50:	0005883a 	mov	r2,zero
 2009d54:	00001f06 	br	2009dd4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2009d58:	e0bfff17 	ldw	r2,-4(fp)
 2009d5c:	10800003 	ldbu	r2,0(r2)
 2009d60:	10803fcc 	andi	r2,r2,255
 2009d64:	108000e0 	cmpeqi	r2,r2,3
 2009d68:	1000021e 	bne	r2,zero,2009d74 <OSSemAccept+0x40>
        return (0);
 2009d6c:	0005883a 	mov	r2,zero
 2009d70:	00001806 	br	2009dd4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009d74:	0005303a 	rdctl	r2,status
 2009d78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009d7c:	e0fffe17 	ldw	r3,-8(fp)
 2009d80:	00bfff84 	movi	r2,-2
 2009d84:	1884703a 	and	r2,r3,r2
 2009d88:	1001703a 	wrctl	status,r2
  
  return context;
 2009d8c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2009d90:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2009d94:	e0bfff17 	ldw	r2,-4(fp)
 2009d98:	1080020b 	ldhu	r2,8(r2)
 2009d9c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2009da0:	e0bffd0b 	ldhu	r2,-12(fp)
 2009da4:	10000626 	beq	r2,zero,2009dc0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2009da8:	e0bfff17 	ldw	r2,-4(fp)
 2009dac:	1080020b 	ldhu	r2,8(r2)
 2009db0:	10bfffc4 	addi	r2,r2,-1
 2009db4:	1007883a 	mov	r3,r2
 2009db8:	e0bfff17 	ldw	r2,-4(fp)
 2009dbc:	10c0020d 	sth	r3,8(r2)
 2009dc0:	e0bffb17 	ldw	r2,-20(fp)
 2009dc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009dc8:	e0bffc17 	ldw	r2,-16(fp)
 2009dcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2009dd0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2009dd4:	e037883a 	mov	sp,fp
 2009dd8:	df000017 	ldw	fp,0(sp)
 2009ddc:	dec00104 	addi	sp,sp,4
 2009de0:	f800283a 	ret

02009de4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2009de4:	defff904 	addi	sp,sp,-28
 2009de8:	dfc00615 	stw	ra,24(sp)
 2009dec:	df000515 	stw	fp,20(sp)
 2009df0:	df000504 	addi	fp,sp,20
 2009df4:	2005883a 	mov	r2,r4
 2009df8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2009dfc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2009e00:	d0a70c03 	ldbu	r2,-25552(gp)
 2009e04:	10803fcc 	andi	r2,r2,255
 2009e08:	10000226 	beq	r2,zero,2009e14 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2009e0c:	0005883a 	mov	r2,zero
 2009e10:	00002506 	br	2009ea8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009e14:	0005303a 	rdctl	r2,status
 2009e18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009e1c:	e0fffe17 	ldw	r3,-8(fp)
 2009e20:	00bfff84 	movi	r2,-2
 2009e24:	1884703a 	and	r2,r3,r2
 2009e28:	1001703a 	wrctl	status,r2
  
  return context;
 2009e2c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2009e30:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2009e34:	d0a70b17 	ldw	r2,-25556(gp)
 2009e38:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2009e3c:	d0a70b17 	ldw	r2,-25556(gp)
 2009e40:	10000326 	beq	r2,zero,2009e50 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2009e44:	d0a70b17 	ldw	r2,-25556(gp)
 2009e48:	10800117 	ldw	r2,4(r2)
 2009e4c:	d0a70b15 	stw	r2,-25556(gp)
 2009e50:	e0bffb17 	ldw	r2,-20(fp)
 2009e54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009e58:	e0bffc17 	ldw	r2,-16(fp)
 2009e5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2009e60:	e0bffd17 	ldw	r2,-12(fp)
 2009e64:	10000f26 	beq	r2,zero,2009ea4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2009e68:	e0bffd17 	ldw	r2,-12(fp)
 2009e6c:	00c000c4 	movi	r3,3
 2009e70:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2009e74:	e0bffd17 	ldw	r2,-12(fp)
 2009e78:	e0ffff0b 	ldhu	r3,-4(fp)
 2009e7c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2009e80:	e0bffd17 	ldw	r2,-12(fp)
 2009e84:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2009e88:	e0bffd17 	ldw	r2,-12(fp)
 2009e8c:	00c00fc4 	movi	r3,63
 2009e90:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2009e94:	e0bffd17 	ldw	r2,-12(fp)
 2009e98:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2009e9c:	e13ffd17 	ldw	r4,-12(fp)
 2009ea0:	20055f40 	call	20055f4 <OS_EventWaitListInit>
    }
    return (pevent);
 2009ea4:	e0bffd17 	ldw	r2,-12(fp)
}
 2009ea8:	e037883a 	mov	sp,fp
 2009eac:	dfc00117 	ldw	ra,4(sp)
 2009eb0:	df000017 	ldw	fp,0(sp)
 2009eb4:	dec00204 	addi	sp,sp,8
 2009eb8:	f800283a 	ret

02009ebc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2009ebc:	defff304 	addi	sp,sp,-52
 2009ec0:	dfc00c15 	stw	ra,48(sp)
 2009ec4:	df000b15 	stw	fp,44(sp)
 2009ec8:	df000b04 	addi	fp,sp,44
 2009ecc:	e13ffd15 	stw	r4,-12(fp)
 2009ed0:	2805883a 	mov	r2,r5
 2009ed4:	e1bfff15 	stw	r6,-4(fp)
 2009ed8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2009edc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2009ee0:	e0bfff17 	ldw	r2,-4(fp)
 2009ee4:	1000021e 	bne	r2,zero,2009ef0 <OSSemDel+0x34>
        return (pevent);
 2009ee8:	e0bffd17 	ldw	r2,-12(fp)
 2009eec:	00007e06 	br	200a0e8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2009ef0:	e0bffd17 	ldw	r2,-12(fp)
 2009ef4:	1000051e 	bne	r2,zero,2009f0c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2009ef8:	e0bfff17 	ldw	r2,-4(fp)
 2009efc:	00c00104 	movi	r3,4
 2009f00:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2009f04:	e0bffd17 	ldw	r2,-12(fp)
 2009f08:	00007706 	br	200a0e8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2009f0c:	e0bffd17 	ldw	r2,-12(fp)
 2009f10:	10800003 	ldbu	r2,0(r2)
 2009f14:	10803fcc 	andi	r2,r2,255
 2009f18:	108000e0 	cmpeqi	r2,r2,3
 2009f1c:	1000051e 	bne	r2,zero,2009f34 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2009f20:	e0bfff17 	ldw	r2,-4(fp)
 2009f24:	00c00044 	movi	r3,1
 2009f28:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2009f2c:	e0bffd17 	ldw	r2,-12(fp)
 2009f30:	00006d06 	br	200a0e8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2009f34:	d0a70c03 	ldbu	r2,-25552(gp)
 2009f38:	10803fcc 	andi	r2,r2,255
 2009f3c:	10000526 	beq	r2,zero,2009f54 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2009f40:	e0bfff17 	ldw	r2,-4(fp)
 2009f44:	00c003c4 	movi	r3,15
 2009f48:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2009f4c:	e0bffd17 	ldw	r2,-12(fp)
 2009f50:	00006506 	br	200a0e8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009f54:	0005303a 	rdctl	r2,status
 2009f58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009f5c:	e0fffc17 	ldw	r3,-16(fp)
 2009f60:	00bfff84 	movi	r2,-2
 2009f64:	1884703a 	and	r2,r3,r2
 2009f68:	1001703a 	wrctl	status,r2
  
  return context;
 2009f6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2009f70:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2009f74:	e0bffd17 	ldw	r2,-12(fp)
 2009f78:	10800283 	ldbu	r2,10(r2)
 2009f7c:	10803fcc 	andi	r2,r2,255
 2009f80:	10000326 	beq	r2,zero,2009f90 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2009f84:	00800044 	movi	r2,1
 2009f88:	e0bff505 	stb	r2,-44(fp)
 2009f8c:	00000106 	br	2009f94 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2009f90:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2009f94:	e0bffe03 	ldbu	r2,-8(fp)
 2009f98:	10000326 	beq	r2,zero,2009fa8 <OSSemDel+0xec>
 2009f9c:	10800060 	cmpeqi	r2,r2,1
 2009fa0:	1000281e 	bne	r2,zero,200a044 <OSSemDel+0x188>
 2009fa4:	00004506 	br	200a0bc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2009fa8:	e0bff503 	ldbu	r2,-44(fp)
 2009fac:	1000161e 	bne	r2,zero,200a008 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2009fb0:	e0bffd17 	ldw	r2,-12(fp)
 2009fb4:	00c00fc4 	movi	r3,63
 2009fb8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2009fbc:	e0bffd17 	ldw	r2,-12(fp)
 2009fc0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2009fc4:	e0bffd17 	ldw	r2,-12(fp)
 2009fc8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2009fcc:	d0e70b17 	ldw	r3,-25556(gp)
 2009fd0:	e0bffd17 	ldw	r2,-12(fp)
 2009fd4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2009fd8:	e0bffd17 	ldw	r2,-12(fp)
 2009fdc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2009fe0:	e0bffd17 	ldw	r2,-12(fp)
 2009fe4:	d0a70b15 	stw	r2,-25556(gp)
 2009fe8:	e0bff717 	ldw	r2,-36(fp)
 2009fec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009ff0:	e0bff817 	ldw	r2,-32(fp)
 2009ff4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2009ff8:	e0bfff17 	ldw	r2,-4(fp)
 2009ffc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 200a000:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 200a004:	00003706 	br	200a0e4 <OSSemDel+0x228>
 200a008:	e0bff717 	ldw	r2,-36(fp)
 200a00c:	e0bff915 	stw	r2,-28(fp)
 200a010:	e0bff917 	ldw	r2,-28(fp)
 200a014:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 200a018:	e0bfff17 	ldw	r2,-4(fp)
 200a01c:	00c01244 	movi	r3,73
 200a020:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 200a024:	e0bffd17 	ldw	r2,-12(fp)
 200a028:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 200a02c:	00002d06 	br	200a0e4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 200a030:	000f883a 	mov	r7,zero
 200a034:	01800044 	movi	r6,1
 200a038:	000b883a 	mov	r5,zero
 200a03c:	e13ffd17 	ldw	r4,-12(fp)
 200a040:	20050440 	call	2005044 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 200a044:	e0bffd17 	ldw	r2,-12(fp)
 200a048:	10800283 	ldbu	r2,10(r2)
 200a04c:	10803fcc 	andi	r2,r2,255
 200a050:	103ff71e 	bne	r2,zero,200a030 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 200a054:	e0bffd17 	ldw	r2,-12(fp)
 200a058:	00c00fc4 	movi	r3,63
 200a05c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 200a060:	e0bffd17 	ldw	r2,-12(fp)
 200a064:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 200a068:	e0bffd17 	ldw	r2,-12(fp)
 200a06c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 200a070:	d0e70b17 	ldw	r3,-25556(gp)
 200a074:	e0bffd17 	ldw	r2,-12(fp)
 200a078:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 200a07c:	e0bffd17 	ldw	r2,-12(fp)
 200a080:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 200a084:	e0bffd17 	ldw	r2,-12(fp)
 200a088:	d0a70b15 	stw	r2,-25556(gp)
 200a08c:	e0bff717 	ldw	r2,-36(fp)
 200a090:	e0bffa15 	stw	r2,-24(fp)
 200a094:	e0bffa17 	ldw	r2,-24(fp)
 200a098:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 200a09c:	e0bff503 	ldbu	r2,-44(fp)
 200a0a0:	10800058 	cmpnei	r2,r2,1
 200a0a4:	1000011e 	bne	r2,zero,200a0ac <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 200a0a8:	2005a900 	call	2005a90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 200a0ac:	e0bfff17 	ldw	r2,-4(fp)
 200a0b0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 200a0b4:	e03ff615 	stw	zero,-40(fp)
             break;
 200a0b8:	00000a06 	br	200a0e4 <OSSemDel+0x228>
 200a0bc:	e0bff717 	ldw	r2,-36(fp)
 200a0c0:	e0bffb15 	stw	r2,-20(fp)
 200a0c4:	e0bffb17 	ldw	r2,-20(fp)
 200a0c8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 200a0cc:	e0bfff17 	ldw	r2,-4(fp)
 200a0d0:	00c001c4 	movi	r3,7
 200a0d4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 200a0d8:	e0bffd17 	ldw	r2,-12(fp)
 200a0dc:	e0bff615 	stw	r2,-40(fp)
             break;
 200a0e0:	0001883a 	nop
    }
    return (pevent_return);
 200a0e4:	e0bff617 	ldw	r2,-40(fp)
}
 200a0e8:	e037883a 	mov	sp,fp
 200a0ec:	dfc00117 	ldw	ra,4(sp)
 200a0f0:	df000017 	ldw	fp,0(sp)
 200a0f4:	dec00204 	addi	sp,sp,8
 200a0f8:	f800283a 	ret

0200a0fc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 200a0fc:	defff504 	addi	sp,sp,-44
 200a100:	dfc00a15 	stw	ra,40(sp)
 200a104:	df000915 	stw	fp,36(sp)
 200a108:	df000904 	addi	fp,sp,36
 200a10c:	e13ffd15 	stw	r4,-12(fp)
 200a110:	2805883a 	mov	r2,r5
 200a114:	e1bfff15 	stw	r6,-4(fp)
 200a118:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a11c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a120:	e0bfff17 	ldw	r2,-4(fp)
 200a124:	10007226 	beq	r2,zero,200a2f0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a128:	e0bffd17 	ldw	r2,-12(fp)
 200a12c:	1000041e 	bne	r2,zero,200a140 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 200a130:	e0bfff17 	ldw	r2,-4(fp)
 200a134:	00c00104 	movi	r3,4
 200a138:	10c00005 	stb	r3,0(r2)
        return;
 200a13c:	00006d06 	br	200a2f4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a140:	e0bffd17 	ldw	r2,-12(fp)
 200a144:	10800003 	ldbu	r2,0(r2)
 200a148:	10803fcc 	andi	r2,r2,255
 200a14c:	108000e0 	cmpeqi	r2,r2,3
 200a150:	1000041e 	bne	r2,zero,200a164 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 200a154:	e0bfff17 	ldw	r2,-4(fp)
 200a158:	00c00044 	movi	r3,1
 200a15c:	10c00005 	stb	r3,0(r2)
        return;
 200a160:	00006406 	br	200a2f4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 200a164:	d0a70c03 	ldbu	r2,-25552(gp)
 200a168:	10803fcc 	andi	r2,r2,255
 200a16c:	10000426 	beq	r2,zero,200a180 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 200a170:	e0bfff17 	ldw	r2,-4(fp)
 200a174:	00c00084 	movi	r3,2
 200a178:	10c00005 	stb	r3,0(r2)
        return;
 200a17c:	00005d06 	br	200a2f4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 200a180:	d0a6fe03 	ldbu	r2,-25608(gp)
 200a184:	10803fcc 	andi	r2,r2,255
 200a188:	10000426 	beq	r2,zero,200a19c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 200a18c:	e0bfff17 	ldw	r2,-4(fp)
 200a190:	00c00344 	movi	r3,13
 200a194:	10c00005 	stb	r3,0(r2)
        return;
 200a198:	00005606 	br	200a2f4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a19c:	0005303a 	rdctl	r2,status
 200a1a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a1a4:	e0fffc17 	ldw	r3,-16(fp)
 200a1a8:	00bfff84 	movi	r2,-2
 200a1ac:	1884703a 	and	r2,r3,r2
 200a1b0:	1001703a 	wrctl	status,r2
  
  return context;
 200a1b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200a1b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 200a1bc:	e0bffd17 	ldw	r2,-12(fp)
 200a1c0:	1080020b 	ldhu	r2,8(r2)
 200a1c4:	10bfffcc 	andi	r2,r2,65535
 200a1c8:	10000d26 	beq	r2,zero,200a200 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 200a1cc:	e0bffd17 	ldw	r2,-12(fp)
 200a1d0:	1080020b 	ldhu	r2,8(r2)
 200a1d4:	10bfffc4 	addi	r2,r2,-1
 200a1d8:	1007883a 	mov	r3,r2
 200a1dc:	e0bffd17 	ldw	r2,-12(fp)
 200a1e0:	10c0020d 	sth	r3,8(r2)
 200a1e4:	e0bff717 	ldw	r2,-36(fp)
 200a1e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a1ec:	e0bff817 	ldw	r2,-32(fp)
 200a1f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 200a1f4:	e0bfff17 	ldw	r2,-4(fp)
 200a1f8:	10000005 	stb	zero,0(r2)
        return;
 200a1fc:	00003d06 	br	200a2f4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 200a200:	d0a70d17 	ldw	r2,-25548(gp)
 200a204:	d0e70d17 	ldw	r3,-25548(gp)
 200a208:	18c00c03 	ldbu	r3,48(r3)
 200a20c:	18c00054 	ori	r3,r3,1
 200a210:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200a214:	d0a70d17 	ldw	r2,-25548(gp)
 200a218:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 200a21c:	d0a70d17 	ldw	r2,-25548(gp)
 200a220:	e0fffe0b 	ldhu	r3,-8(fp)
 200a224:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 200a228:	e13ffd17 	ldw	r4,-12(fp)
 200a22c:	20051dc0 	call	20051dc <OS_EventTaskWait>
 200a230:	e0bff717 	ldw	r2,-36(fp)
 200a234:	e0bffb15 	stw	r2,-20(fp)
 200a238:	e0bffb17 	ldw	r2,-20(fp)
 200a23c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 200a240:	2005a900 	call	2005a90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a244:	0005303a 	rdctl	r2,status
 200a248:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a24c:	e0fff917 	ldw	r3,-28(fp)
 200a250:	00bfff84 	movi	r2,-2
 200a254:	1884703a 	and	r2,r3,r2
 200a258:	1001703a 	wrctl	status,r2
  
  return context;
 200a25c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 200a260:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 200a264:	d0a70d17 	ldw	r2,-25548(gp)
 200a268:	10800c43 	ldbu	r2,49(r2)
 200a26c:	10803fcc 	andi	r2,r2,255
 200a270:	10000326 	beq	r2,zero,200a280 <OSSemPend+0x184>
 200a274:	108000a0 	cmpeqi	r2,r2,2
 200a278:	1000041e 	bne	r2,zero,200a28c <OSSemPend+0x190>
 200a27c:	00000706 	br	200a29c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 200a280:	e0bfff17 	ldw	r2,-4(fp)
 200a284:	10000005 	stb	zero,0(r2)
             break;
 200a288:	00000c06 	br	200a2bc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 200a28c:	e0bfff17 	ldw	r2,-4(fp)
 200a290:	00c00384 	movi	r3,14
 200a294:	10c00005 	stb	r3,0(r2)
             break;
 200a298:	00000806 	br	200a2bc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 200a29c:	d0a70d17 	ldw	r2,-25548(gp)
 200a2a0:	e17ffd17 	ldw	r5,-12(fp)
 200a2a4:	1009883a 	mov	r4,r2
 200a2a8:	200543c0 	call	200543c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 200a2ac:	e0bfff17 	ldw	r2,-4(fp)
 200a2b0:	00c00284 	movi	r3,10
 200a2b4:	10c00005 	stb	r3,0(r2)
             break;
 200a2b8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 200a2bc:	d0a70d17 	ldw	r2,-25548(gp)
 200a2c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 200a2c4:	d0a70d17 	ldw	r2,-25548(gp)
 200a2c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 200a2cc:	d0a70d17 	ldw	r2,-25548(gp)
 200a2d0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 200a2d4:	d0a70d17 	ldw	r2,-25548(gp)
 200a2d8:	10000815 	stw	zero,32(r2)
 200a2dc:	e0bff717 	ldw	r2,-36(fp)
 200a2e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a2e4:	e0bffa17 	ldw	r2,-24(fp)
 200a2e8:	1001703a 	wrctl	status,r2
 200a2ec:	00000106 	br	200a2f4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 200a2f0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 200a2f4:	e037883a 	mov	sp,fp
 200a2f8:	dfc00117 	ldw	ra,4(sp)
 200a2fc:	df000017 	ldw	fp,0(sp)
 200a300:	dec00204 	addi	sp,sp,8
 200a304:	f800283a 	ret

0200a308 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 200a308:	defff604 	addi	sp,sp,-40
 200a30c:	dfc00915 	stw	ra,36(sp)
 200a310:	df000815 	stw	fp,32(sp)
 200a314:	df000804 	addi	fp,sp,32
 200a318:	e13ffd15 	stw	r4,-12(fp)
 200a31c:	2805883a 	mov	r2,r5
 200a320:	e1bfff15 	stw	r6,-4(fp)
 200a324:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a328:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a32c:	e0bfff17 	ldw	r2,-4(fp)
 200a330:	1000021e 	bne	r2,zero,200a33c <OSSemPendAbort+0x34>
        return (0);
 200a334:	0005883a 	mov	r2,zero
 200a338:	00004906 	br	200a460 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a33c:	e0bffd17 	ldw	r2,-12(fp)
 200a340:	1000051e 	bne	r2,zero,200a358 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 200a344:	e0bfff17 	ldw	r2,-4(fp)
 200a348:	00c00104 	movi	r3,4
 200a34c:	10c00005 	stb	r3,0(r2)
        return (0);
 200a350:	0005883a 	mov	r2,zero
 200a354:	00004206 	br	200a460 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a358:	e0bffd17 	ldw	r2,-12(fp)
 200a35c:	10800003 	ldbu	r2,0(r2)
 200a360:	10803fcc 	andi	r2,r2,255
 200a364:	108000e0 	cmpeqi	r2,r2,3
 200a368:	1000051e 	bne	r2,zero,200a380 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 200a36c:	e0bfff17 	ldw	r2,-4(fp)
 200a370:	00c00044 	movi	r3,1
 200a374:	10c00005 	stb	r3,0(r2)
        return (0);
 200a378:	0005883a 	mov	r2,zero
 200a37c:	00003806 	br	200a460 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a380:	0005303a 	rdctl	r2,status
 200a384:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a388:	e0fffc17 	ldw	r3,-16(fp)
 200a38c:	00bfff84 	movi	r2,-2
 200a390:	1884703a 	and	r2,r3,r2
 200a394:	1001703a 	wrctl	status,r2
  
  return context;
 200a398:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200a39c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 200a3a0:	e0bffd17 	ldw	r2,-12(fp)
 200a3a4:	10800283 	ldbu	r2,10(r2)
 200a3a8:	10803fcc 	andi	r2,r2,255
 200a3ac:	10002526 	beq	r2,zero,200a444 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 200a3b0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 200a3b4:	e0bffe03 	ldbu	r2,-8(fp)
 200a3b8:	10800060 	cmpeqi	r2,r2,1
 200a3bc:	10000e26 	beq	r2,zero,200a3f8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 200a3c0:	00000806 	br	200a3e4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 200a3c4:	01c00084 	movi	r7,2
 200a3c8:	01800044 	movi	r6,1
 200a3cc:	000b883a 	mov	r5,zero
 200a3d0:	e13ffd17 	ldw	r4,-12(fp)
 200a3d4:	20050440 	call	2005044 <OS_EventTaskRdy>
                     nbr_tasks++;
 200a3d8:	e0bff803 	ldbu	r2,-32(fp)
 200a3dc:	10800044 	addi	r2,r2,1
 200a3e0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 200a3e4:	e0bffd17 	ldw	r2,-12(fp)
 200a3e8:	10800283 	ldbu	r2,10(r2)
 200a3ec:	10803fcc 	andi	r2,r2,255
 200a3f0:	103ff41e 	bne	r2,zero,200a3c4 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 200a3f4:	00000906 	br	200a41c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 200a3f8:	01c00084 	movi	r7,2
 200a3fc:	01800044 	movi	r6,1
 200a400:	000b883a 	mov	r5,zero
 200a404:	e13ffd17 	ldw	r4,-12(fp)
 200a408:	20050440 	call	2005044 <OS_EventTaskRdy>
                 nbr_tasks++;
 200a40c:	e0bff803 	ldbu	r2,-32(fp)
 200a410:	10800044 	addi	r2,r2,1
 200a414:	e0bff805 	stb	r2,-32(fp)
                 break;
 200a418:	0001883a 	nop
 200a41c:	e0bff917 	ldw	r2,-28(fp)
 200a420:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a424:	e0bffa17 	ldw	r2,-24(fp)
 200a428:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 200a42c:	2005a900 	call	2005a90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 200a430:	e0bfff17 	ldw	r2,-4(fp)
 200a434:	00c00384 	movi	r3,14
 200a438:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 200a43c:	e0bff803 	ldbu	r2,-32(fp)
 200a440:	00000706 	br	200a460 <OSSemPendAbort+0x158>
 200a444:	e0bff917 	ldw	r2,-28(fp)
 200a448:	e0bffb15 	stw	r2,-20(fp)
 200a44c:	e0bffb17 	ldw	r2,-20(fp)
 200a450:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200a454:	e0bfff17 	ldw	r2,-4(fp)
 200a458:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 200a45c:	0005883a 	mov	r2,zero
}
 200a460:	e037883a 	mov	sp,fp
 200a464:	dfc00117 	ldw	ra,4(sp)
 200a468:	df000017 	ldw	fp,0(sp)
 200a46c:	dec00204 	addi	sp,sp,8
 200a470:	f800283a 	ret

0200a474 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 200a474:	defff804 	addi	sp,sp,-32
 200a478:	dfc00715 	stw	ra,28(sp)
 200a47c:	df000615 	stw	fp,24(sp)
 200a480:	df000604 	addi	fp,sp,24
 200a484:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a488:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a48c:	e0bfff17 	ldw	r2,-4(fp)
 200a490:	1000021e 	bne	r2,zero,200a49c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 200a494:	00800104 	movi	r2,4
 200a498:	00003506 	br	200a570 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a49c:	e0bfff17 	ldw	r2,-4(fp)
 200a4a0:	10800003 	ldbu	r2,0(r2)
 200a4a4:	10803fcc 	andi	r2,r2,255
 200a4a8:	108000e0 	cmpeqi	r2,r2,3
 200a4ac:	1000021e 	bne	r2,zero,200a4b8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 200a4b0:	00800044 	movi	r2,1
 200a4b4:	00002e06 	br	200a570 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a4b8:	0005303a 	rdctl	r2,status
 200a4bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a4c0:	e0fffe17 	ldw	r3,-8(fp)
 200a4c4:	00bfff84 	movi	r2,-2
 200a4c8:	1884703a 	and	r2,r3,r2
 200a4cc:	1001703a 	wrctl	status,r2
  
  return context;
 200a4d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 200a4d4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 200a4d8:	e0bfff17 	ldw	r2,-4(fp)
 200a4dc:	10800283 	ldbu	r2,10(r2)
 200a4e0:	10803fcc 	andi	r2,r2,255
 200a4e4:	10000c26 	beq	r2,zero,200a518 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 200a4e8:	000f883a 	mov	r7,zero
 200a4ec:	01800044 	movi	r6,1
 200a4f0:	000b883a 	mov	r5,zero
 200a4f4:	e13fff17 	ldw	r4,-4(fp)
 200a4f8:	20050440 	call	2005044 <OS_EventTaskRdy>
 200a4fc:	e0bffa17 	ldw	r2,-24(fp)
 200a500:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a504:	e0bffb17 	ldw	r2,-20(fp)
 200a508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 200a50c:	2005a900 	call	2005a90 <OS_Sched>
        return (OS_ERR_NONE);
 200a510:	0005883a 	mov	r2,zero
 200a514:	00001606 	br	200a570 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 200a518:	e0bfff17 	ldw	r2,-4(fp)
 200a51c:	1080020b 	ldhu	r2,8(r2)
 200a520:	10ffffcc 	andi	r3,r2,65535
 200a524:	00bfffd4 	movui	r2,65535
 200a528:	18800c26 	beq	r3,r2,200a55c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 200a52c:	e0bfff17 	ldw	r2,-4(fp)
 200a530:	1080020b 	ldhu	r2,8(r2)
 200a534:	10800044 	addi	r2,r2,1
 200a538:	1007883a 	mov	r3,r2
 200a53c:	e0bfff17 	ldw	r2,-4(fp)
 200a540:	10c0020d 	sth	r3,8(r2)
 200a544:	e0bffa17 	ldw	r2,-24(fp)
 200a548:	e0bffc15 	stw	r2,-16(fp)
 200a54c:	e0bffc17 	ldw	r2,-16(fp)
 200a550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 200a554:	0005883a 	mov	r2,zero
 200a558:	00000506 	br	200a570 <OSSemPost+0xfc>
 200a55c:	e0bffa17 	ldw	r2,-24(fp)
 200a560:	e0bffd15 	stw	r2,-12(fp)
 200a564:	e0bffd17 	ldw	r2,-12(fp)
 200a568:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 200a56c:	00800c84 	movi	r2,50
}
 200a570:	e037883a 	mov	sp,fp
 200a574:	dfc00117 	ldw	ra,4(sp)
 200a578:	df000017 	ldw	fp,0(sp)
 200a57c:	dec00204 	addi	sp,sp,8
 200a580:	f800283a 	ret

0200a584 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 200a584:	defff704 	addi	sp,sp,-36
 200a588:	df000815 	stw	fp,32(sp)
 200a58c:	df000804 	addi	fp,sp,32
 200a590:	e13ffe15 	stw	r4,-8(fp)
 200a594:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200a598:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 200a59c:	e0bffe17 	ldw	r2,-8(fp)
 200a5a0:	1000021e 	bne	r2,zero,200a5ac <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 200a5a4:	00800104 	movi	r2,4
 200a5a8:	00003606 	br	200a684 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 200a5ac:	e0bfff17 	ldw	r2,-4(fp)
 200a5b0:	1000021e 	bne	r2,zero,200a5bc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 200a5b4:	00800244 	movi	r2,9
 200a5b8:	00003206 	br	200a684 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 200a5bc:	e0bffe17 	ldw	r2,-8(fp)
 200a5c0:	10800003 	ldbu	r2,0(r2)
 200a5c4:	10803fcc 	andi	r2,r2,255
 200a5c8:	108000e0 	cmpeqi	r2,r2,3
 200a5cc:	1000021e 	bne	r2,zero,200a5d8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 200a5d0:	00800044 	movi	r2,1
 200a5d4:	00002b06 	br	200a684 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a5d8:	0005303a 	rdctl	r2,status
 200a5dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a5e0:	e0fffd17 	ldw	r3,-12(fp)
 200a5e4:	00bfff84 	movi	r2,-2
 200a5e8:	1884703a 	and	r2,r3,r2
 200a5ec:	1001703a 	wrctl	status,r2
  
  return context;
 200a5f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 200a5f4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 200a5f8:	e0bffe17 	ldw	r2,-8(fp)
 200a5fc:	10c00283 	ldbu	r3,10(r2)
 200a600:	e0bfff17 	ldw	r2,-4(fp)
 200a604:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 200a608:	e0bffe17 	ldw	r2,-8(fp)
 200a60c:	108002c4 	addi	r2,r2,11
 200a610:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 200a614:	e0bfff17 	ldw	r2,-4(fp)
 200a618:	10800084 	addi	r2,r2,2
 200a61c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200a620:	e03ffa05 	stb	zero,-24(fp)
 200a624:	00000b06 	br	200a654 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 200a628:	e0bff917 	ldw	r2,-28(fp)
 200a62c:	10c00044 	addi	r3,r2,1
 200a630:	e0fff915 	stw	r3,-28(fp)
 200a634:	e0fff817 	ldw	r3,-32(fp)
 200a638:	19000044 	addi	r4,r3,1
 200a63c:	e13ff815 	stw	r4,-32(fp)
 200a640:	18c00003 	ldbu	r3,0(r3)
 200a644:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200a648:	e0bffa03 	ldbu	r2,-24(fp)
 200a64c:	10800044 	addi	r2,r2,1
 200a650:	e0bffa05 	stb	r2,-24(fp)
 200a654:	e0bffa03 	ldbu	r2,-24(fp)
 200a658:	108000f0 	cmpltui	r2,r2,3
 200a65c:	103ff21e 	bne	r2,zero,200a628 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 200a660:	e0bffe17 	ldw	r2,-8(fp)
 200a664:	10c0020b 	ldhu	r3,8(r2)
 200a668:	e0bfff17 	ldw	r2,-4(fp)
 200a66c:	10c0000d 	sth	r3,0(r2)
 200a670:	e0bffb17 	ldw	r2,-20(fp)
 200a674:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a678:	e0bffc17 	ldw	r2,-16(fp)
 200a67c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200a680:	0005883a 	mov	r2,zero
}
 200a684:	e037883a 	mov	sp,fp
 200a688:	df000017 	ldw	fp,0(sp)
 200a68c:	dec00104 	addi	sp,sp,4
 200a690:	f800283a 	ret

0200a694 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 200a694:	defff904 	addi	sp,sp,-28
 200a698:	df000615 	stw	fp,24(sp)
 200a69c:	df000604 	addi	fp,sp,24
 200a6a0:	e13ffd15 	stw	r4,-12(fp)
 200a6a4:	2805883a 	mov	r2,r5
 200a6a8:	e1bfff15 	stw	r6,-4(fp)
 200a6ac:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a6b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a6b4:	e0bfff17 	ldw	r2,-4(fp)
 200a6b8:	10003126 	beq	r2,zero,200a780 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a6bc:	e0bffd17 	ldw	r2,-12(fp)
 200a6c0:	1000041e 	bne	r2,zero,200a6d4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 200a6c4:	e0bfff17 	ldw	r2,-4(fp)
 200a6c8:	00c00104 	movi	r3,4
 200a6cc:	10c00005 	stb	r3,0(r2)
        return;
 200a6d0:	00002c06 	br	200a784 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a6d4:	e0bffd17 	ldw	r2,-12(fp)
 200a6d8:	10800003 	ldbu	r2,0(r2)
 200a6dc:	10803fcc 	andi	r2,r2,255
 200a6e0:	108000e0 	cmpeqi	r2,r2,3
 200a6e4:	1000041e 	bne	r2,zero,200a6f8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 200a6e8:	e0bfff17 	ldw	r2,-4(fp)
 200a6ec:	00c00044 	movi	r3,1
 200a6f0:	10c00005 	stb	r3,0(r2)
        return;
 200a6f4:	00002306 	br	200a784 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a6f8:	0005303a 	rdctl	r2,status
 200a6fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a700:	e0fffc17 	ldw	r3,-16(fp)
 200a704:	00bfff84 	movi	r2,-2
 200a708:	1884703a 	and	r2,r3,r2
 200a70c:	1001703a 	wrctl	status,r2
  
  return context;
 200a710:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200a714:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 200a718:	e0bfff17 	ldw	r2,-4(fp)
 200a71c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 200a720:	e0bffd17 	ldw	r2,-12(fp)
 200a724:	1080020b 	ldhu	r2,8(r2)
 200a728:	10bfffcc 	andi	r2,r2,65535
 200a72c:	10000426 	beq	r2,zero,200a740 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 200a730:	e0bffd17 	ldw	r2,-12(fp)
 200a734:	e0fffe0b 	ldhu	r3,-8(fp)
 200a738:	10c0020d 	sth	r3,8(r2)
 200a73c:	00000b06 	br	200a76c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 200a740:	e0bffd17 	ldw	r2,-12(fp)
 200a744:	10800283 	ldbu	r2,10(r2)
 200a748:	10803fcc 	andi	r2,r2,255
 200a74c:	1000041e 	bne	r2,zero,200a760 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 200a750:	e0bffd17 	ldw	r2,-12(fp)
 200a754:	e0fffe0b 	ldhu	r3,-8(fp)
 200a758:	10c0020d 	sth	r3,8(r2)
 200a75c:	00000306 	br	200a76c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 200a760:	e0bfff17 	ldw	r2,-4(fp)
 200a764:	00c01244 	movi	r3,73
 200a768:	10c00005 	stb	r3,0(r2)
 200a76c:	e0bffa17 	ldw	r2,-24(fp)
 200a770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a774:	e0bffb17 	ldw	r2,-20(fp)
 200a778:	1001703a 	wrctl	status,r2
 200a77c:	00000106 	br	200a784 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 200a780:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 200a784:	e037883a 	mov	sp,fp
 200a788:	df000017 	ldw	fp,0(sp)
 200a78c:	dec00104 	addi	sp,sp,4
 200a790:	f800283a 	ret

0200a794 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 200a794:	defff104 	addi	sp,sp,-60
 200a798:	dfc00e15 	stw	ra,56(sp)
 200a79c:	df000d15 	stw	fp,52(sp)
 200a7a0:	df000d04 	addi	fp,sp,52
 200a7a4:	2007883a 	mov	r3,r4
 200a7a8:	2805883a 	mov	r2,r5
 200a7ac:	e0fffe05 	stb	r3,-8(fp)
 200a7b0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 200a7b4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 200a7b8:	e0bffe03 	ldbu	r2,-8(fp)
 200a7bc:	10800530 	cmpltui	r2,r2,20
 200a7c0:	1000051e 	bne	r2,zero,200a7d8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 200a7c4:	e0bffe03 	ldbu	r2,-8(fp)
 200a7c8:	10803fe0 	cmpeqi	r2,r2,255
 200a7cc:	1000021e 	bne	r2,zero,200a7d8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 200a7d0:	00800a84 	movi	r2,42
 200a7d4:	00012606 	br	200ac70 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 200a7d8:	e0bfff03 	ldbu	r2,-4(fp)
 200a7dc:	10800530 	cmpltui	r2,r2,20
 200a7e0:	1000021e 	bne	r2,zero,200a7ec <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 200a7e4:	00800a84 	movi	r2,42
 200a7e8:	00012106 	br	200ac70 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a7ec:	0005303a 	rdctl	r2,status
 200a7f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a7f4:	e0fffd17 	ldw	r3,-12(fp)
 200a7f8:	00bfff84 	movi	r2,-2
 200a7fc:	1884703a 	and	r2,r3,r2
 200a800:	1001703a 	wrctl	status,r2
  
  return context;
 200a804:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200a808:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 200a80c:	e0ffff03 	ldbu	r3,-4(fp)
 200a810:	008080b4 	movhi	r2,514
 200a814:	10ac9a04 	addi	r2,r2,-19864
 200a818:	18c7883a 	add	r3,r3,r3
 200a81c:	18c7883a 	add	r3,r3,r3
 200a820:	10c5883a 	add	r2,r2,r3
 200a824:	10800017 	ldw	r2,0(r2)
 200a828:	10000626 	beq	r2,zero,200a844 <OSTaskChangePrio+0xb0>
 200a82c:	e0bff517 	ldw	r2,-44(fp)
 200a830:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a834:	e0bff617 	ldw	r2,-40(fp)
 200a838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 200a83c:	00800a04 	movi	r2,40
 200a840:	00010b06 	br	200ac70 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 200a844:	e0bffe03 	ldbu	r2,-8(fp)
 200a848:	10803fd8 	cmpnei	r2,r2,255
 200a84c:	1000031e 	bne	r2,zero,200a85c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 200a850:	d0a70d17 	ldw	r2,-25548(gp)
 200a854:	10800c83 	ldbu	r2,50(r2)
 200a858:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 200a85c:	e0fffe03 	ldbu	r3,-8(fp)
 200a860:	008080b4 	movhi	r2,514
 200a864:	10ac9a04 	addi	r2,r2,-19864
 200a868:	18c7883a 	add	r3,r3,r3
 200a86c:	18c7883a 	add	r3,r3,r3
 200a870:	10c5883a 	add	r2,r2,r3
 200a874:	10800017 	ldw	r2,0(r2)
 200a878:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 200a87c:	e0bff817 	ldw	r2,-32(fp)
 200a880:	1000061e 	bne	r2,zero,200a89c <OSTaskChangePrio+0x108>
 200a884:	e0bff517 	ldw	r2,-44(fp)
 200a888:	e0bff715 	stw	r2,-36(fp)
 200a88c:	e0bff717 	ldw	r2,-36(fp)
 200a890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 200a894:	00800a44 	movi	r2,41
 200a898:	0000f506 	br	200ac70 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 200a89c:	e0bff817 	ldw	r2,-32(fp)
 200a8a0:	10800058 	cmpnei	r2,r2,1
 200a8a4:	1000061e 	bne	r2,zero,200a8c0 <OSTaskChangePrio+0x12c>
 200a8a8:	e0bff517 	ldw	r2,-44(fp)
 200a8ac:	e0bff915 	stw	r2,-28(fp)
 200a8b0:	e0bff917 	ldw	r2,-28(fp)
 200a8b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 200a8b8:	008010c4 	movi	r2,67
 200a8bc:	0000ec06 	br	200ac70 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 200a8c0:	e0bfff03 	ldbu	r2,-4(fp)
 200a8c4:	1004d0fa 	srli	r2,r2,3
 200a8c8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 200a8cc:	e0bfff03 	ldbu	r2,-4(fp)
 200a8d0:	108001cc 	andi	r2,r2,7
 200a8d4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 200a8d8:	e0bffb03 	ldbu	r2,-20(fp)
 200a8dc:	00c00044 	movi	r3,1
 200a8e0:	1884983a 	sll	r2,r3,r2
 200a8e4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 200a8e8:	e0bffb43 	ldbu	r2,-19(fp)
 200a8ec:	00c00044 	movi	r3,1
 200a8f0:	1884983a 	sll	r2,r3,r2
 200a8f4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 200a8f8:	e0fffe03 	ldbu	r3,-8(fp)
 200a8fc:	008080b4 	movhi	r2,514
 200a900:	10ac9a04 	addi	r2,r2,-19864
 200a904:	18c7883a 	add	r3,r3,r3
 200a908:	18c7883a 	add	r3,r3,r3
 200a90c:	10c5883a 	add	r2,r2,r3
 200a910:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 200a914:	e0ffff03 	ldbu	r3,-4(fp)
 200a918:	008080b4 	movhi	r2,514
 200a91c:	10ac9a04 	addi	r2,r2,-19864
 200a920:	18c7883a 	add	r3,r3,r3
 200a924:	18c7883a 	add	r3,r3,r3
 200a928:	10c5883a 	add	r2,r2,r3
 200a92c:	e0fff817 	ldw	r3,-32(fp)
 200a930:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 200a934:	e0bff817 	ldw	r2,-32(fp)
 200a938:	10800d03 	ldbu	r2,52(r2)
 200a93c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 200a940:	e0bff817 	ldw	r2,-32(fp)
 200a944:	10800d83 	ldbu	r2,54(r2)
 200a948:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 200a94c:	e0bff817 	ldw	r2,-32(fp)
 200a950:	10800d43 	ldbu	r2,53(r2)
 200a954:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 200a958:	e0fffc03 	ldbu	r3,-16(fp)
 200a95c:	d0a70a44 	addi	r2,gp,-25559
 200a960:	1885883a 	add	r2,r3,r2
 200a964:	10c00003 	ldbu	r3,0(r2)
 200a968:	e0bffc83 	ldbu	r2,-14(fp)
 200a96c:	1884703a 	and	r2,r3,r2
 200a970:	10803fcc 	andi	r2,r2,255
 200a974:	10002826 	beq	r2,zero,200aa18 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 200a978:	e0fffc03 	ldbu	r3,-16(fp)
 200a97c:	e13ffc03 	ldbu	r4,-16(fp)
 200a980:	d0a70a44 	addi	r2,gp,-25559
 200a984:	2085883a 	add	r2,r4,r2
 200a988:	10800003 	ldbu	r2,0(r2)
 200a98c:	1009883a 	mov	r4,r2
 200a990:	e0bffc83 	ldbu	r2,-14(fp)
 200a994:	0084303a 	nor	r2,zero,r2
 200a998:	2084703a 	and	r2,r4,r2
 200a99c:	1009883a 	mov	r4,r2
 200a9a0:	d0a70a44 	addi	r2,gp,-25559
 200a9a4:	1885883a 	add	r2,r3,r2
 200a9a8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 200a9ac:	e0fffc03 	ldbu	r3,-16(fp)
 200a9b0:	d0a70a44 	addi	r2,gp,-25559
 200a9b4:	1885883a 	add	r2,r3,r2
 200a9b8:	10800003 	ldbu	r2,0(r2)
 200a9bc:	10803fcc 	andi	r2,r2,255
 200a9c0:	1000061e 	bne	r2,zero,200a9dc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 200a9c4:	e0bffc43 	ldbu	r2,-15(fp)
 200a9c8:	0084303a 	nor	r2,zero,r2
 200a9cc:	1007883a 	mov	r3,r2
 200a9d0:	d0a70a03 	ldbu	r2,-25560(gp)
 200a9d4:	1884703a 	and	r2,r3,r2
 200a9d8:	d0a70a05 	stb	r2,-25560(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 200a9dc:	d0e70a03 	ldbu	r3,-25560(gp)
 200a9e0:	e0bffb83 	ldbu	r2,-18(fp)
 200a9e4:	1884b03a 	or	r2,r3,r2
 200a9e8:	d0a70a05 	stb	r2,-25560(gp)
         OSRdyTbl[y_new] |= bitx_new;
 200a9ec:	e0fffb03 	ldbu	r3,-20(fp)
 200a9f0:	e13ffb03 	ldbu	r4,-20(fp)
 200a9f4:	d0a70a44 	addi	r2,gp,-25559
 200a9f8:	2085883a 	add	r2,r4,r2
 200a9fc:	11000003 	ldbu	r4,0(r2)
 200aa00:	e0bffbc3 	ldbu	r2,-17(fp)
 200aa04:	2084b03a 	or	r2,r4,r2
 200aa08:	1009883a 	mov	r4,r2
 200aa0c:	d0a70a44 	addi	r2,gp,-25559
 200aa10:	1885883a 	add	r2,r3,r2
 200aa14:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 200aa18:	e0bff817 	ldw	r2,-32(fp)
 200aa1c:	10800717 	ldw	r2,28(r2)
 200aa20:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 200aa24:	e0bff317 	ldw	r2,-52(fp)
 200aa28:	10003326 	beq	r2,zero,200aaf8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 200aa2c:	e0bffc03 	ldbu	r2,-16(fp)
 200aa30:	e0fffc03 	ldbu	r3,-16(fp)
 200aa34:	e13ff317 	ldw	r4,-52(fp)
 200aa38:	20c7883a 	add	r3,r4,r3
 200aa3c:	18c002c4 	addi	r3,r3,11
 200aa40:	18c00003 	ldbu	r3,0(r3)
 200aa44:	1809883a 	mov	r4,r3
 200aa48:	e0fffc83 	ldbu	r3,-14(fp)
 200aa4c:	00c6303a 	nor	r3,zero,r3
 200aa50:	20c6703a 	and	r3,r4,r3
 200aa54:	1809883a 	mov	r4,r3
 200aa58:	e0fff317 	ldw	r3,-52(fp)
 200aa5c:	1885883a 	add	r2,r3,r2
 200aa60:	108002c4 	addi	r2,r2,11
 200aa64:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 200aa68:	e0bffc03 	ldbu	r2,-16(fp)
 200aa6c:	e0fff317 	ldw	r3,-52(fp)
 200aa70:	1885883a 	add	r2,r3,r2
 200aa74:	108002c4 	addi	r2,r2,11
 200aa78:	10800003 	ldbu	r2,0(r2)
 200aa7c:	10803fcc 	andi	r2,r2,255
 200aa80:	1000091e 	bne	r2,zero,200aaa8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 200aa84:	e0bff317 	ldw	r2,-52(fp)
 200aa88:	10800283 	ldbu	r2,10(r2)
 200aa8c:	1007883a 	mov	r3,r2
 200aa90:	e0bffc43 	ldbu	r2,-15(fp)
 200aa94:	0084303a 	nor	r2,zero,r2
 200aa98:	1884703a 	and	r2,r3,r2
 200aa9c:	1007883a 	mov	r3,r2
 200aaa0:	e0bff317 	ldw	r2,-52(fp)
 200aaa4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 200aaa8:	e0bff317 	ldw	r2,-52(fp)
 200aaac:	10c00283 	ldbu	r3,10(r2)
 200aab0:	e0bffb83 	ldbu	r2,-18(fp)
 200aab4:	1884b03a 	or	r2,r3,r2
 200aab8:	1007883a 	mov	r3,r2
 200aabc:	e0bff317 	ldw	r2,-52(fp)
 200aac0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 200aac4:	e0bffb03 	ldbu	r2,-20(fp)
 200aac8:	e0fffb03 	ldbu	r3,-20(fp)
 200aacc:	e13ff317 	ldw	r4,-52(fp)
 200aad0:	20c7883a 	add	r3,r4,r3
 200aad4:	18c002c4 	addi	r3,r3,11
 200aad8:	19000003 	ldbu	r4,0(r3)
 200aadc:	e0fffbc3 	ldbu	r3,-17(fp)
 200aae0:	20c6b03a 	or	r3,r4,r3
 200aae4:	1809883a 	mov	r4,r3
 200aae8:	e0fff317 	ldw	r3,-52(fp)
 200aaec:	1885883a 	add	r2,r3,r2
 200aaf0:	108002c4 	addi	r2,r2,11
 200aaf4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 200aaf8:	e0bff817 	ldw	r2,-32(fp)
 200aafc:	10800817 	ldw	r2,32(r2)
 200ab00:	10004226 	beq	r2,zero,200ac0c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 200ab04:	e0bff817 	ldw	r2,-32(fp)
 200ab08:	10800817 	ldw	r2,32(r2)
 200ab0c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 200ab10:	e0bff417 	ldw	r2,-48(fp)
 200ab14:	10800017 	ldw	r2,0(r2)
 200ab18:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 200ab1c:	00003906 	br	200ac04 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 200ab20:	e0bffc03 	ldbu	r2,-16(fp)
 200ab24:	e0fffc03 	ldbu	r3,-16(fp)
 200ab28:	e13ff317 	ldw	r4,-52(fp)
 200ab2c:	20c7883a 	add	r3,r4,r3
 200ab30:	18c002c4 	addi	r3,r3,11
 200ab34:	18c00003 	ldbu	r3,0(r3)
 200ab38:	1809883a 	mov	r4,r3
 200ab3c:	e0fffc83 	ldbu	r3,-14(fp)
 200ab40:	00c6303a 	nor	r3,zero,r3
 200ab44:	20c6703a 	and	r3,r4,r3
 200ab48:	1809883a 	mov	r4,r3
 200ab4c:	e0fff317 	ldw	r3,-52(fp)
 200ab50:	1885883a 	add	r2,r3,r2
 200ab54:	108002c4 	addi	r2,r2,11
 200ab58:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 200ab5c:	e0bffc03 	ldbu	r2,-16(fp)
 200ab60:	e0fff317 	ldw	r3,-52(fp)
 200ab64:	1885883a 	add	r2,r3,r2
 200ab68:	108002c4 	addi	r2,r2,11
 200ab6c:	10800003 	ldbu	r2,0(r2)
 200ab70:	10803fcc 	andi	r2,r2,255
 200ab74:	1000091e 	bne	r2,zero,200ab9c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 200ab78:	e0bff317 	ldw	r2,-52(fp)
 200ab7c:	10800283 	ldbu	r2,10(r2)
 200ab80:	1007883a 	mov	r3,r2
 200ab84:	e0bffc43 	ldbu	r2,-15(fp)
 200ab88:	0084303a 	nor	r2,zero,r2
 200ab8c:	1884703a 	and	r2,r3,r2
 200ab90:	1007883a 	mov	r3,r2
 200ab94:	e0bff317 	ldw	r2,-52(fp)
 200ab98:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 200ab9c:	e0bff317 	ldw	r2,-52(fp)
 200aba0:	10c00283 	ldbu	r3,10(r2)
 200aba4:	e0bffb83 	ldbu	r2,-18(fp)
 200aba8:	1884b03a 	or	r2,r3,r2
 200abac:	1007883a 	mov	r3,r2
 200abb0:	e0bff317 	ldw	r2,-52(fp)
 200abb4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 200abb8:	e0bffb03 	ldbu	r2,-20(fp)
 200abbc:	e0fffb03 	ldbu	r3,-20(fp)
 200abc0:	e13ff317 	ldw	r4,-52(fp)
 200abc4:	20c7883a 	add	r3,r4,r3
 200abc8:	18c002c4 	addi	r3,r3,11
 200abcc:	19000003 	ldbu	r4,0(r3)
 200abd0:	e0fffbc3 	ldbu	r3,-17(fp)
 200abd4:	20c6b03a 	or	r3,r4,r3
 200abd8:	1809883a 	mov	r4,r3
 200abdc:	e0fff317 	ldw	r3,-52(fp)
 200abe0:	1885883a 	add	r2,r3,r2
 200abe4:	108002c4 	addi	r2,r2,11
 200abe8:	11000005 	stb	r4,0(r2)
            pevents++;
 200abec:	e0bff417 	ldw	r2,-48(fp)
 200abf0:	10800104 	addi	r2,r2,4
 200abf4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 200abf8:	e0bff417 	ldw	r2,-48(fp)
 200abfc:	10800017 	ldw	r2,0(r2)
 200ac00:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 200ac04:	e0bff317 	ldw	r2,-52(fp)
 200ac08:	103fc51e 	bne	r2,zero,200ab20 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 200ac0c:	e0bff817 	ldw	r2,-32(fp)
 200ac10:	e0ffff03 	ldbu	r3,-4(fp)
 200ac14:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 200ac18:	e0bff817 	ldw	r2,-32(fp)
 200ac1c:	e0fffb03 	ldbu	r3,-20(fp)
 200ac20:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 200ac24:	e0bff817 	ldw	r2,-32(fp)
 200ac28:	e0fffb43 	ldbu	r3,-19(fp)
 200ac2c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 200ac30:	e0bff817 	ldw	r2,-32(fp)
 200ac34:	e0fffb83 	ldbu	r3,-18(fp)
 200ac38:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 200ac3c:	e0bff817 	ldw	r2,-32(fp)
 200ac40:	e0fffbc3 	ldbu	r3,-17(fp)
 200ac44:	10c00d45 	stb	r3,53(r2)
 200ac48:	e0bff517 	ldw	r2,-44(fp)
 200ac4c:	e0bffa15 	stw	r2,-24(fp)
 200ac50:	e0bffa17 	ldw	r2,-24(fp)
 200ac54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 200ac58:	d0a6fe43 	ldbu	r2,-25607(gp)
 200ac5c:	10803fcc 	andi	r2,r2,255
 200ac60:	10800058 	cmpnei	r2,r2,1
 200ac64:	1000011e 	bne	r2,zero,200ac6c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 200ac68:	2005a900 	call	2005a90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200ac6c:	0005883a 	mov	r2,zero
}
 200ac70:	e037883a 	mov	sp,fp
 200ac74:	dfc00117 	ldw	ra,4(sp)
 200ac78:	df000017 	ldw	fp,0(sp)
 200ac7c:	dec00204 	addi	sp,sp,8
 200ac80:	f800283a 	ret

0200ac84 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 200ac84:	deffee04 	addi	sp,sp,-72
 200ac88:	dfc01115 	stw	ra,68(sp)
 200ac8c:	df001015 	stw	fp,64(sp)
 200ac90:	df001004 	addi	fp,sp,64
 200ac94:	e13ffc15 	stw	r4,-16(fp)
 200ac98:	e17ffd15 	stw	r5,-12(fp)
 200ac9c:	e1bffe15 	stw	r6,-8(fp)
 200aca0:	3805883a 	mov	r2,r7
 200aca4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 200aca8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 200acac:	e0bfff03 	ldbu	r2,-4(fp)
 200acb0:	10800570 	cmpltui	r2,r2,21
 200acb4:	1000021e 	bne	r2,zero,200acc0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 200acb8:	00800a84 	movi	r2,42
 200acbc:	00005706 	br	200ae1c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200acc0:	0005303a 	rdctl	r2,status
 200acc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200acc8:	e0fffb17 	ldw	r3,-20(fp)
 200accc:	00bfff84 	movi	r2,-2
 200acd0:	1884703a 	and	r2,r3,r2
 200acd4:	1001703a 	wrctl	status,r2
  
  return context;
 200acd8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200acdc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 200ace0:	d0a70c03 	ldbu	r2,-25552(gp)
 200ace4:	10803fcc 	andi	r2,r2,255
 200ace8:	10000626 	beq	r2,zero,200ad04 <OSTaskCreate+0x80>
 200acec:	e0bff317 	ldw	r2,-52(fp)
 200acf0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200acf4:	e0bff417 	ldw	r2,-48(fp)
 200acf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 200acfc:	00800f04 	movi	r2,60
 200ad00:	00004606 	br	200ae1c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 200ad04:	e0ffff03 	ldbu	r3,-4(fp)
 200ad08:	008080b4 	movhi	r2,514
 200ad0c:	10ac9a04 	addi	r2,r2,-19864
 200ad10:	18c7883a 	add	r3,r3,r3
 200ad14:	18c7883a 	add	r3,r3,r3
 200ad18:	10c5883a 	add	r2,r2,r3
 200ad1c:	10800017 	ldw	r2,0(r2)
 200ad20:	1000391e 	bne	r2,zero,200ae08 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 200ad24:	e0ffff03 	ldbu	r3,-4(fp)
 200ad28:	008080b4 	movhi	r2,514
 200ad2c:	10ac9a04 	addi	r2,r2,-19864
 200ad30:	18c7883a 	add	r3,r3,r3
 200ad34:	18c7883a 	add	r3,r3,r3
 200ad38:	10c5883a 	add	r2,r2,r3
 200ad3c:	00c00044 	movi	r3,1
 200ad40:	10c00015 	stw	r3,0(r2)
 200ad44:	e0bff317 	ldw	r2,-52(fp)
 200ad48:	e0bff515 	stw	r2,-44(fp)
 200ad4c:	e0bff517 	ldw	r2,-44(fp)
 200ad50:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 200ad54:	000f883a 	mov	r7,zero
 200ad58:	e1bffe17 	ldw	r6,-8(fp)
 200ad5c:	e17ffd17 	ldw	r5,-12(fp)
 200ad60:	e13ffc17 	ldw	r4,-16(fp)
 200ad64:	200df280 	call	200df28 <OSTaskStkInit>
 200ad68:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 200ad6c:	e0bfff03 	ldbu	r2,-4(fp)
 200ad70:	d8000215 	stw	zero,8(sp)
 200ad74:	d8000115 	stw	zero,4(sp)
 200ad78:	d8000015 	stw	zero,0(sp)
 200ad7c:	000f883a 	mov	r7,zero
 200ad80:	000d883a 	mov	r6,zero
 200ad84:	e17ff717 	ldw	r5,-36(fp)
 200ad88:	1009883a 	mov	r4,r2
 200ad8c:	2005e900 	call	2005e90 <OS_TCBInit>
 200ad90:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 200ad94:	e0bff803 	ldbu	r2,-32(fp)
 200ad98:	1000061e 	bne	r2,zero,200adb4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 200ad9c:	d0a6fe43 	ldbu	r2,-25607(gp)
 200ada0:	10803fcc 	andi	r2,r2,255
 200ada4:	10800058 	cmpnei	r2,r2,1
 200ada8:	1000151e 	bne	r2,zero,200ae00 <OSTaskCreate+0x17c>
                OS_Sched();
 200adac:	2005a900 	call	2005a90 <OS_Sched>
 200adb0:	00001306 	br	200ae00 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200adb4:	0005303a 	rdctl	r2,status
 200adb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200adbc:	e0fffa17 	ldw	r3,-24(fp)
 200adc0:	00bfff84 	movi	r2,-2
 200adc4:	1884703a 	and	r2,r3,r2
 200adc8:	1001703a 	wrctl	status,r2
  
  return context;
 200adcc:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 200add0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 200add4:	e0ffff03 	ldbu	r3,-4(fp)
 200add8:	008080b4 	movhi	r2,514
 200addc:	10ac9a04 	addi	r2,r2,-19864
 200ade0:	18c7883a 	add	r3,r3,r3
 200ade4:	18c7883a 	add	r3,r3,r3
 200ade8:	10c5883a 	add	r2,r2,r3
 200adec:	10000015 	stw	zero,0(r2)
 200adf0:	e0bff317 	ldw	r2,-52(fp)
 200adf4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200adf8:	e0bff617 	ldw	r2,-40(fp)
 200adfc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 200ae00:	e0bff803 	ldbu	r2,-32(fp)
 200ae04:	00000506 	br	200ae1c <OSTaskCreate+0x198>
 200ae08:	e0bff317 	ldw	r2,-52(fp)
 200ae0c:	e0bff915 	stw	r2,-28(fp)
 200ae10:	e0bff917 	ldw	r2,-28(fp)
 200ae14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 200ae18:	00800a04 	movi	r2,40
}
 200ae1c:	e037883a 	mov	sp,fp
 200ae20:	dfc00117 	ldw	ra,4(sp)
 200ae24:	df000017 	ldw	fp,0(sp)
 200ae28:	dec00204 	addi	sp,sp,8
 200ae2c:	f800283a 	ret

0200ae30 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 200ae30:	deffec04 	addi	sp,sp,-80
 200ae34:	dfc01315 	stw	ra,76(sp)
 200ae38:	df001215 	stw	fp,72(sp)
 200ae3c:	df001204 	addi	fp,sp,72
 200ae40:	e13ffa15 	stw	r4,-24(fp)
 200ae44:	e17ffb15 	stw	r5,-20(fp)
 200ae48:	e1bffc15 	stw	r6,-16(fp)
 200ae4c:	3809883a 	mov	r4,r7
 200ae50:	e0c00217 	ldw	r3,8(fp)
 200ae54:	e0800617 	ldw	r2,24(fp)
 200ae58:	e13ffd05 	stb	r4,-12(fp)
 200ae5c:	e0fffe0d 	sth	r3,-8(fp)
 200ae60:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 200ae64:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 200ae68:	e0bffd03 	ldbu	r2,-12(fp)
 200ae6c:	10800570 	cmpltui	r2,r2,21
 200ae70:	1000021e 	bne	r2,zero,200ae7c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 200ae74:	00800a84 	movi	r2,42
 200ae78:	00006106 	br	200b000 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ae7c:	0005303a 	rdctl	r2,status
 200ae80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ae84:	e0fff917 	ldw	r3,-28(fp)
 200ae88:	00bfff84 	movi	r2,-2
 200ae8c:	1884703a 	and	r2,r3,r2
 200ae90:	1001703a 	wrctl	status,r2
  
  return context;
 200ae94:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200ae98:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 200ae9c:	d0a70c03 	ldbu	r2,-25552(gp)
 200aea0:	10803fcc 	andi	r2,r2,255
 200aea4:	10000626 	beq	r2,zero,200aec0 <OSTaskCreateExt+0x90>
 200aea8:	e0bff117 	ldw	r2,-60(fp)
 200aeac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200aeb0:	e0bff217 	ldw	r2,-56(fp)
 200aeb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 200aeb8:	00800f04 	movi	r2,60
 200aebc:	00005006 	br	200b000 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 200aec0:	e0fffd03 	ldbu	r3,-12(fp)
 200aec4:	008080b4 	movhi	r2,514
 200aec8:	10ac9a04 	addi	r2,r2,-19864
 200aecc:	18c7883a 	add	r3,r3,r3
 200aed0:	18c7883a 	add	r3,r3,r3
 200aed4:	10c5883a 	add	r2,r2,r3
 200aed8:	10800017 	ldw	r2,0(r2)
 200aedc:	1000431e 	bne	r2,zero,200afec <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 200aee0:	e0fffd03 	ldbu	r3,-12(fp)
 200aee4:	008080b4 	movhi	r2,514
 200aee8:	10ac9a04 	addi	r2,r2,-19864
 200aeec:	18c7883a 	add	r3,r3,r3
 200aef0:	18c7883a 	add	r3,r3,r3
 200aef4:	10c5883a 	add	r2,r2,r3
 200aef8:	00c00044 	movi	r3,1
 200aefc:	10c00015 	stw	r3,0(r2)
 200af00:	e0bff117 	ldw	r2,-60(fp)
 200af04:	e0bff315 	stw	r2,-52(fp)
 200af08:	e0bff317 	ldw	r2,-52(fp)
 200af0c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 200af10:	e0bfff0b 	ldhu	r2,-4(fp)
 200af14:	100d883a 	mov	r6,r2
 200af18:	e1400417 	ldw	r5,16(fp)
 200af1c:	e1000317 	ldw	r4,12(fp)
 200af20:	200be900 	call	200be90 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 200af24:	e0bfff0b 	ldhu	r2,-4(fp)
 200af28:	100f883a 	mov	r7,r2
 200af2c:	e1bffc17 	ldw	r6,-16(fp)
 200af30:	e17ffb17 	ldw	r5,-20(fp)
 200af34:	e13ffa17 	ldw	r4,-24(fp)
 200af38:	200df280 	call	200df28 <OSTaskStkInit>
 200af3c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 200af40:	e0fffd03 	ldbu	r3,-12(fp)
 200af44:	e13ffe0b 	ldhu	r4,-8(fp)
 200af48:	e0bfff0b 	ldhu	r2,-4(fp)
 200af4c:	d8800215 	stw	r2,8(sp)
 200af50:	e0800517 	ldw	r2,20(fp)
 200af54:	d8800115 	stw	r2,4(sp)
 200af58:	e0800417 	ldw	r2,16(fp)
 200af5c:	d8800015 	stw	r2,0(sp)
 200af60:	200f883a 	mov	r7,r4
 200af64:	e1800317 	ldw	r6,12(fp)
 200af68:	e17ff517 	ldw	r5,-44(fp)
 200af6c:	1809883a 	mov	r4,r3
 200af70:	2005e900 	call	2005e90 <OS_TCBInit>
 200af74:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 200af78:	e0bff603 	ldbu	r2,-40(fp)
 200af7c:	1000061e 	bne	r2,zero,200af98 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 200af80:	d0a6fe43 	ldbu	r2,-25607(gp)
 200af84:	10803fcc 	andi	r2,r2,255
 200af88:	10800058 	cmpnei	r2,r2,1
 200af8c:	1000151e 	bne	r2,zero,200afe4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 200af90:	2005a900 	call	2005a90 <OS_Sched>
 200af94:	00001306 	br	200afe4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200af98:	0005303a 	rdctl	r2,status
 200af9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200afa0:	e0fff817 	ldw	r3,-32(fp)
 200afa4:	00bfff84 	movi	r2,-2
 200afa8:	1884703a 	and	r2,r3,r2
 200afac:	1001703a 	wrctl	status,r2
  
  return context;
 200afb0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 200afb4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 200afb8:	e0fffd03 	ldbu	r3,-12(fp)
 200afbc:	008080b4 	movhi	r2,514
 200afc0:	10ac9a04 	addi	r2,r2,-19864
 200afc4:	18c7883a 	add	r3,r3,r3
 200afc8:	18c7883a 	add	r3,r3,r3
 200afcc:	10c5883a 	add	r2,r2,r3
 200afd0:	10000015 	stw	zero,0(r2)
 200afd4:	e0bff117 	ldw	r2,-60(fp)
 200afd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200afdc:	e0bff417 	ldw	r2,-48(fp)
 200afe0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 200afe4:	e0bff603 	ldbu	r2,-40(fp)
 200afe8:	00000506 	br	200b000 <OSTaskCreateExt+0x1d0>
 200afec:	e0bff117 	ldw	r2,-60(fp)
 200aff0:	e0bff715 	stw	r2,-36(fp)
 200aff4:	e0bff717 	ldw	r2,-36(fp)
 200aff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 200affc:	00800a04 	movi	r2,40
}
 200b000:	e037883a 	mov	sp,fp
 200b004:	dfc00117 	ldw	ra,4(sp)
 200b008:	df000017 	ldw	fp,0(sp)
 200b00c:	dec00204 	addi	sp,sp,8
 200b010:	f800283a 	ret

0200b014 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 200b014:	defff404 	addi	sp,sp,-48
 200b018:	dfc00b15 	stw	ra,44(sp)
 200b01c:	df000a15 	stw	fp,40(sp)
 200b020:	df000a04 	addi	fp,sp,40
 200b024:	2005883a 	mov	r2,r4
 200b028:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 200b02c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 200b030:	d0a70c03 	ldbu	r2,-25552(gp)
 200b034:	10803fcc 	andi	r2,r2,255
 200b038:	10000226 	beq	r2,zero,200b044 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 200b03c:	00801004 	movi	r2,64
 200b040:	0000c006 	br	200b344 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 200b044:	e0bfff03 	ldbu	r2,-4(fp)
 200b048:	10800518 	cmpnei	r2,r2,20
 200b04c:	1000021e 	bne	r2,zero,200b058 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 200b050:	00800f84 	movi	r2,62
 200b054:	0000bb06 	br	200b344 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 200b058:	e0bfff03 	ldbu	r2,-4(fp)
 200b05c:	10800530 	cmpltui	r2,r2,20
 200b060:	1000051e 	bne	r2,zero,200b078 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 200b064:	e0bfff03 	ldbu	r2,-4(fp)
 200b068:	10803fe0 	cmpeqi	r2,r2,255
 200b06c:	1000021e 	bne	r2,zero,200b078 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 200b070:	00800a84 	movi	r2,42
 200b074:	0000b306 	br	200b344 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b078:	0005303a 	rdctl	r2,status
 200b07c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b080:	e0fffe17 	ldw	r3,-8(fp)
 200b084:	00bfff84 	movi	r2,-2
 200b088:	1884703a 	and	r2,r3,r2
 200b08c:	1001703a 	wrctl	status,r2
  
  return context;
 200b090:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 200b094:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 200b098:	e0bfff03 	ldbu	r2,-4(fp)
 200b09c:	10803fd8 	cmpnei	r2,r2,255
 200b0a0:	1000031e 	bne	r2,zero,200b0b0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 200b0a4:	d0a70d17 	ldw	r2,-25548(gp)
 200b0a8:	10800c83 	ldbu	r2,50(r2)
 200b0ac:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b0b0:	e0ffff03 	ldbu	r3,-4(fp)
 200b0b4:	008080b4 	movhi	r2,514
 200b0b8:	10ac9a04 	addi	r2,r2,-19864
 200b0bc:	18c7883a 	add	r3,r3,r3
 200b0c0:	18c7883a 	add	r3,r3,r3
 200b0c4:	10c5883a 	add	r2,r2,r3
 200b0c8:	10800017 	ldw	r2,0(r2)
 200b0cc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 200b0d0:	e0bff817 	ldw	r2,-32(fp)
 200b0d4:	1000061e 	bne	r2,zero,200b0f0 <OSTaskDel+0xdc>
 200b0d8:	e0bff617 	ldw	r2,-40(fp)
 200b0dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b0e0:	e0bff717 	ldw	r2,-36(fp)
 200b0e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200b0e8:	008010c4 	movi	r2,67
 200b0ec:	00009506 	br	200b344 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 200b0f0:	e0bff817 	ldw	r2,-32(fp)
 200b0f4:	10800058 	cmpnei	r2,r2,1
 200b0f8:	1000061e 	bne	r2,zero,200b114 <OSTaskDel+0x100>
 200b0fc:	e0bff617 	ldw	r2,-40(fp)
 200b100:	e0bff915 	stw	r2,-28(fp)
 200b104:	e0bff917 	ldw	r2,-28(fp)
 200b108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 200b10c:	00800f44 	movi	r2,61
 200b110:	00008c06 	br	200b344 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 200b114:	e0bff817 	ldw	r2,-32(fp)
 200b118:	10800d03 	ldbu	r2,52(r2)
 200b11c:	10c03fcc 	andi	r3,r2,255
 200b120:	e0bff817 	ldw	r2,-32(fp)
 200b124:	10800d03 	ldbu	r2,52(r2)
 200b128:	11003fcc 	andi	r4,r2,255
 200b12c:	d0a70a44 	addi	r2,gp,-25559
 200b130:	2085883a 	add	r2,r4,r2
 200b134:	10800003 	ldbu	r2,0(r2)
 200b138:	1009883a 	mov	r4,r2
 200b13c:	e0bff817 	ldw	r2,-32(fp)
 200b140:	10800d43 	ldbu	r2,53(r2)
 200b144:	0084303a 	nor	r2,zero,r2
 200b148:	2084703a 	and	r2,r4,r2
 200b14c:	1009883a 	mov	r4,r2
 200b150:	d0a70a44 	addi	r2,gp,-25559
 200b154:	1885883a 	add	r2,r3,r2
 200b158:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 200b15c:	e0bff817 	ldw	r2,-32(fp)
 200b160:	10800d03 	ldbu	r2,52(r2)
 200b164:	10c03fcc 	andi	r3,r2,255
 200b168:	d0a70a44 	addi	r2,gp,-25559
 200b16c:	1885883a 	add	r2,r3,r2
 200b170:	10800003 	ldbu	r2,0(r2)
 200b174:	10803fcc 	andi	r2,r2,255
 200b178:	1000071e 	bne	r2,zero,200b198 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 200b17c:	e0bff817 	ldw	r2,-32(fp)
 200b180:	10800d83 	ldbu	r2,54(r2)
 200b184:	0084303a 	nor	r2,zero,r2
 200b188:	1007883a 	mov	r3,r2
 200b18c:	d0a70a03 	ldbu	r2,-25560(gp)
 200b190:	1884703a 	and	r2,r3,r2
 200b194:	d0a70a05 	stb	r2,-25560(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 200b198:	e0bff817 	ldw	r2,-32(fp)
 200b19c:	10800717 	ldw	r2,28(r2)
 200b1a0:	10000526 	beq	r2,zero,200b1b8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 200b1a4:	e0bff817 	ldw	r2,-32(fp)
 200b1a8:	10800717 	ldw	r2,28(r2)
 200b1ac:	100b883a 	mov	r5,r2
 200b1b0:	e13ff817 	ldw	r4,-32(fp)
 200b1b4:	200543c0 	call	200543c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 200b1b8:	e0bff817 	ldw	r2,-32(fp)
 200b1bc:	10800817 	ldw	r2,32(r2)
 200b1c0:	10000526 	beq	r2,zero,200b1d8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 200b1c4:	e0bff817 	ldw	r2,-32(fp)
 200b1c8:	10800817 	ldw	r2,32(r2)
 200b1cc:	100b883a 	mov	r5,r2
 200b1d0:	e13ff817 	ldw	r4,-32(fp)
 200b1d4:	20054f40 	call	20054f4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 200b1d8:	e0bff817 	ldw	r2,-32(fp)
 200b1dc:	10800a17 	ldw	r2,40(r2)
 200b1e0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 200b1e4:	e0bffb17 	ldw	r2,-20(fp)
 200b1e8:	10000226 	beq	r2,zero,200b1f4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 200b1ec:	e13ffb17 	ldw	r4,-20(fp)
 200b1f0:	20079640 	call	2007964 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 200b1f4:	e0bff817 	ldw	r2,-32(fp)
 200b1f8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 200b1fc:	e0bff817 	ldw	r2,-32(fp)
 200b200:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 200b204:	e0bff817 	ldw	r2,-32(fp)
 200b208:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 200b20c:	d0a6fe03 	ldbu	r2,-25608(gp)
 200b210:	10803fcc 	andi	r2,r2,255
 200b214:	10803fe0 	cmpeqi	r2,r2,255
 200b218:	1000031e 	bne	r2,zero,200b228 <OSTaskDel+0x214>
        OSLockNesting++;
 200b21c:	d0a6fe03 	ldbu	r2,-25608(gp)
 200b220:	10800044 	addi	r2,r2,1
 200b224:	d0a6fe05 	stb	r2,-25608(gp)
 200b228:	e0bff617 	ldw	r2,-40(fp)
 200b22c:	e0bffd15 	stw	r2,-12(fp)
 200b230:	e0bffd17 	ldw	r2,-12(fp)
 200b234:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 200b238:	20050240 	call	2005024 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b23c:	0005303a 	rdctl	r2,status
 200b240:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b244:	e0fffa17 	ldw	r3,-24(fp)
 200b248:	00bfff84 	movi	r2,-2
 200b24c:	1884703a 	and	r2,r3,r2
 200b250:	1001703a 	wrctl	status,r2
  
  return context;
 200b254:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 200b258:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 200b25c:	d0a6fe03 	ldbu	r2,-25608(gp)
 200b260:	10803fcc 	andi	r2,r2,255
 200b264:	10000326 	beq	r2,zero,200b274 <OSTaskDel+0x260>
        OSLockNesting--;
 200b268:	d0a6fe03 	ldbu	r2,-25608(gp)
 200b26c:	10bfffc4 	addi	r2,r2,-1
 200b270:	d0a6fe05 	stb	r2,-25608(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 200b274:	e13ff817 	ldw	r4,-32(fp)
 200b278:	200e0a80 	call	200e0a8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 200b27c:	d0a70643 	ldbu	r2,-25575(gp)
 200b280:	10bfffc4 	addi	r2,r2,-1
 200b284:	d0a70645 	stb	r2,-25575(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 200b288:	e0ffff03 	ldbu	r3,-4(fp)
 200b28c:	008080b4 	movhi	r2,514
 200b290:	10ac9a04 	addi	r2,r2,-19864
 200b294:	18c7883a 	add	r3,r3,r3
 200b298:	18c7883a 	add	r3,r3,r3
 200b29c:	10c5883a 	add	r2,r2,r3
 200b2a0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 200b2a4:	e0bff817 	ldw	r2,-32(fp)
 200b2a8:	10800617 	ldw	r2,24(r2)
 200b2ac:	1000071e 	bne	r2,zero,200b2cc <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 200b2b0:	e0bff817 	ldw	r2,-32(fp)
 200b2b4:	10800517 	ldw	r2,20(r2)
 200b2b8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 200b2bc:	e0bff817 	ldw	r2,-32(fp)
 200b2c0:	10800517 	ldw	r2,20(r2)
 200b2c4:	d0a70115 	stw	r2,-25596(gp)
 200b2c8:	00000a06 	br	200b2f4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 200b2cc:	e0bff817 	ldw	r2,-32(fp)
 200b2d0:	10800617 	ldw	r2,24(r2)
 200b2d4:	e0fff817 	ldw	r3,-32(fp)
 200b2d8:	18c00517 	ldw	r3,20(r3)
 200b2dc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 200b2e0:	e0bff817 	ldw	r2,-32(fp)
 200b2e4:	10800517 	ldw	r2,20(r2)
 200b2e8:	e0fff817 	ldw	r3,-32(fp)
 200b2ec:	18c00617 	ldw	r3,24(r3)
 200b2f0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 200b2f4:	d0e70517 	ldw	r3,-25580(gp)
 200b2f8:	e0bff817 	ldw	r2,-32(fp)
 200b2fc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 200b300:	e0bff817 	ldw	r2,-32(fp)
 200b304:	d0a70515 	stw	r2,-25580(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 200b308:	e0bff817 	ldw	r2,-32(fp)
 200b30c:	00c00fc4 	movi	r3,63
 200b310:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 200b314:	e0bff817 	ldw	r2,-32(fp)
 200b318:	10001345 	stb	zero,77(r2)
 200b31c:	e0bff617 	ldw	r2,-40(fp)
 200b320:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b324:	e0bffc17 	ldw	r2,-16(fp)
 200b328:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 200b32c:	d0a6fe43 	ldbu	r2,-25607(gp)
 200b330:	10803fcc 	andi	r2,r2,255
 200b334:	10800058 	cmpnei	r2,r2,1
 200b338:	1000011e 	bne	r2,zero,200b340 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 200b33c:	2005a900 	call	2005a90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200b340:	0005883a 	mov	r2,zero
}
 200b344:	e037883a 	mov	sp,fp
 200b348:	dfc00117 	ldw	ra,4(sp)
 200b34c:	df000017 	ldw	fp,0(sp)
 200b350:	dec00204 	addi	sp,sp,8
 200b354:	f800283a 	ret

0200b358 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 200b358:	defff504 	addi	sp,sp,-44
 200b35c:	df000a15 	stw	fp,40(sp)
 200b360:	df000a04 	addi	fp,sp,40
 200b364:	2005883a 	mov	r2,r4
 200b368:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200b36c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 200b370:	e0bfff03 	ldbu	r2,-4(fp)
 200b374:	10800518 	cmpnei	r2,r2,20
 200b378:	1000021e 	bne	r2,zero,200b384 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 200b37c:	00800f84 	movi	r2,62
 200b380:	00004506 	br	200b498 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 200b384:	e0bfff03 	ldbu	r2,-4(fp)
 200b388:	10800530 	cmpltui	r2,r2,20
 200b38c:	1000051e 	bne	r2,zero,200b3a4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 200b390:	e0bfff03 	ldbu	r2,-4(fp)
 200b394:	10803fe0 	cmpeqi	r2,r2,255
 200b398:	1000021e 	bne	r2,zero,200b3a4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 200b39c:	00800a84 	movi	r2,42
 200b3a0:	00003d06 	br	200b498 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 200b3a4:	e0bfff03 	ldbu	r2,-4(fp)
 200b3a8:	10803fd8 	cmpnei	r2,r2,255
 200b3ac:	1000111e 	bne	r2,zero,200b3f4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b3b0:	0005303a 	rdctl	r2,status
 200b3b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b3b8:	e0fff917 	ldw	r3,-28(fp)
 200b3bc:	00bfff84 	movi	r2,-2
 200b3c0:	1884703a 	and	r2,r3,r2
 200b3c4:	1001703a 	wrctl	status,r2
  
  return context;
 200b3c8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 200b3cc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 200b3d0:	d0a70d17 	ldw	r2,-25548(gp)
 200b3d4:	10800dc3 	ldbu	r2,55(r2)
 200b3d8:	e0bff805 	stb	r2,-32(fp)
 200b3dc:	e0bff617 	ldw	r2,-40(fp)
 200b3e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b3e4:	e0bffe17 	ldw	r2,-8(fp)
 200b3e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 200b3ec:	e0bff803 	ldbu	r2,-32(fp)
 200b3f0:	00002906 	br	200b498 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b3f4:	0005303a 	rdctl	r2,status
 200b3f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b3fc:	e0fff717 	ldw	r3,-36(fp)
 200b400:	00bfff84 	movi	r2,-2
 200b404:	1884703a 	and	r2,r3,r2
 200b408:	1001703a 	wrctl	status,r2
  
  return context;
 200b40c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 200b410:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 200b414:	e0ffff03 	ldbu	r3,-4(fp)
 200b418:	008080b4 	movhi	r2,514
 200b41c:	10ac9a04 	addi	r2,r2,-19864
 200b420:	18c7883a 	add	r3,r3,r3
 200b424:	18c7883a 	add	r3,r3,r3
 200b428:	10c5883a 	add	r2,r2,r3
 200b42c:	10800017 	ldw	r2,0(r2)
 200b430:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 200b434:	e0bffb17 	ldw	r2,-20(fp)
 200b438:	1000061e 	bne	r2,zero,200b454 <OSTaskDelReq+0xfc>
 200b43c:	e0bff617 	ldw	r2,-40(fp)
 200b440:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b444:	e0bffa17 	ldw	r2,-24(fp)
 200b448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 200b44c:	008010c4 	movi	r2,67
 200b450:	00001106 	br	200b498 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 200b454:	e0bffb17 	ldw	r2,-20(fp)
 200b458:	10800058 	cmpnei	r2,r2,1
 200b45c:	1000061e 	bne	r2,zero,200b478 <OSTaskDelReq+0x120>
 200b460:	e0bff617 	ldw	r2,-40(fp)
 200b464:	e0bffc15 	stw	r2,-16(fp)
 200b468:	e0bffc17 	ldw	r2,-16(fp)
 200b46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 200b470:	00800f44 	movi	r2,61
 200b474:	00000806 	br	200b498 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 200b478:	e0bffb17 	ldw	r2,-20(fp)
 200b47c:	00c00fc4 	movi	r3,63
 200b480:	10c00dc5 	stb	r3,55(r2)
 200b484:	e0bff617 	ldw	r2,-40(fp)
 200b488:	e0bffd15 	stw	r2,-12(fp)
 200b48c:	e0bffd17 	ldw	r2,-12(fp)
 200b490:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200b494:	0005883a 	mov	r2,zero
}
 200b498:	e037883a 	mov	sp,fp
 200b49c:	df000017 	ldw	fp,0(sp)
 200b4a0:	dec00104 	addi	sp,sp,4
 200b4a4:	f800283a 	ret

0200b4a8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 200b4a8:	defff404 	addi	sp,sp,-48
 200b4ac:	dfc00b15 	stw	ra,44(sp)
 200b4b0:	df000a15 	stw	fp,40(sp)
 200b4b4:	df000a04 	addi	fp,sp,40
 200b4b8:	2005883a 	mov	r2,r4
 200b4bc:	e17ffe15 	stw	r5,-8(fp)
 200b4c0:	e1bfff15 	stw	r6,-4(fp)
 200b4c4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 200b4c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 200b4cc:	e0bfff17 	ldw	r2,-4(fp)
 200b4d0:	1000021e 	bne	r2,zero,200b4dc <OSTaskNameGet+0x34>
        return (0);
 200b4d4:	0005883a 	mov	r2,zero
 200b4d8:	00005406 	br	200b62c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 200b4dc:	e0bffd03 	ldbu	r2,-12(fp)
 200b4e0:	10800570 	cmpltui	r2,r2,21
 200b4e4:	1000081e 	bne	r2,zero,200b508 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 200b4e8:	e0bffd03 	ldbu	r2,-12(fp)
 200b4ec:	10803fe0 	cmpeqi	r2,r2,255
 200b4f0:	1000051e 	bne	r2,zero,200b508 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 200b4f4:	e0bfff17 	ldw	r2,-4(fp)
 200b4f8:	00c00a84 	movi	r3,42
 200b4fc:	10c00005 	stb	r3,0(r2)
            return (0);
 200b500:	0005883a 	mov	r2,zero
 200b504:	00004906 	br	200b62c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 200b508:	e0bffe17 	ldw	r2,-8(fp)
 200b50c:	1000051e 	bne	r2,zero,200b524 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 200b510:	e0bfff17 	ldw	r2,-4(fp)
 200b514:	00c00304 	movi	r3,12
 200b518:	10c00005 	stb	r3,0(r2)
        return (0);
 200b51c:	0005883a 	mov	r2,zero
 200b520:	00004206 	br	200b62c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 200b524:	d0a70c03 	ldbu	r2,-25552(gp)
 200b528:	10803fcc 	andi	r2,r2,255
 200b52c:	10000526 	beq	r2,zero,200b544 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 200b530:	e0bfff17 	ldw	r2,-4(fp)
 200b534:	00c00444 	movi	r3,17
 200b538:	10c00005 	stb	r3,0(r2)
        return (0);
 200b53c:	0005883a 	mov	r2,zero
 200b540:	00003a06 	br	200b62c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b544:	0005303a 	rdctl	r2,status
 200b548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b54c:	e0fffc17 	ldw	r3,-16(fp)
 200b550:	00bfff84 	movi	r2,-2
 200b554:	1884703a 	and	r2,r3,r2
 200b558:	1001703a 	wrctl	status,r2
  
  return context;
 200b55c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200b560:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 200b564:	e0bffd03 	ldbu	r2,-12(fp)
 200b568:	10803fd8 	cmpnei	r2,r2,255
 200b56c:	1000031e 	bne	r2,zero,200b57c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 200b570:	d0a70d17 	ldw	r2,-25548(gp)
 200b574:	10800c83 	ldbu	r2,50(r2)
 200b578:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b57c:	e0fffd03 	ldbu	r3,-12(fp)
 200b580:	008080b4 	movhi	r2,514
 200b584:	10ac9a04 	addi	r2,r2,-19864
 200b588:	18c7883a 	add	r3,r3,r3
 200b58c:	18c7883a 	add	r3,r3,r3
 200b590:	10c5883a 	add	r2,r2,r3
 200b594:	10800017 	ldw	r2,0(r2)
 200b598:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 200b59c:	e0bff817 	ldw	r2,-32(fp)
 200b5a0:	1000091e 	bne	r2,zero,200b5c8 <OSTaskNameGet+0x120>
 200b5a4:	e0bff617 	ldw	r2,-40(fp)
 200b5a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b5ac:	e0bff717 	ldw	r2,-36(fp)
 200b5b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b5b4:	e0bfff17 	ldw	r2,-4(fp)
 200b5b8:	00c010c4 	movi	r3,67
 200b5bc:	10c00005 	stb	r3,0(r2)
        return (0);
 200b5c0:	0005883a 	mov	r2,zero
 200b5c4:	00001906 	br	200b62c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 200b5c8:	e0bff817 	ldw	r2,-32(fp)
 200b5cc:	10800058 	cmpnei	r2,r2,1
 200b5d0:	1000091e 	bne	r2,zero,200b5f8 <OSTaskNameGet+0x150>
 200b5d4:	e0bff617 	ldw	r2,-40(fp)
 200b5d8:	e0bff915 	stw	r2,-28(fp)
 200b5dc:	e0bff917 	ldw	r2,-28(fp)
 200b5e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b5e4:	e0bfff17 	ldw	r2,-4(fp)
 200b5e8:	00c010c4 	movi	r3,67
 200b5ec:	10c00005 	stb	r3,0(r2)
        return (0);
 200b5f0:	0005883a 	mov	r2,zero
 200b5f4:	00000d06 	br	200b62c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 200b5f8:	e0bff817 	ldw	r2,-32(fp)
 200b5fc:	10801304 	addi	r2,r2,76
 200b600:	100b883a 	mov	r5,r2
 200b604:	e13ffe17 	ldw	r4,-8(fp)
 200b608:	2005bd40 	call	2005bd4 <OS_StrCopy>
 200b60c:	e0bffb05 	stb	r2,-20(fp)
 200b610:	e0bff617 	ldw	r2,-40(fp)
 200b614:	e0bffa15 	stw	r2,-24(fp)
 200b618:	e0bffa17 	ldw	r2,-24(fp)
 200b61c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200b620:	e0bfff17 	ldw	r2,-4(fp)
 200b624:	10000005 	stb	zero,0(r2)
    return (len);
 200b628:	e0bffb03 	ldbu	r2,-20(fp)
}
 200b62c:	e037883a 	mov	sp,fp
 200b630:	dfc00117 	ldw	ra,4(sp)
 200b634:	df000017 	ldw	fp,0(sp)
 200b638:	dec00204 	addi	sp,sp,8
 200b63c:	f800283a 	ret

0200b640 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 200b640:	defff304 	addi	sp,sp,-52
 200b644:	dfc00c15 	stw	ra,48(sp)
 200b648:	df000b15 	stw	fp,44(sp)
 200b64c:	df000b04 	addi	fp,sp,44
 200b650:	2005883a 	mov	r2,r4
 200b654:	e17ffe15 	stw	r5,-8(fp)
 200b658:	e1bfff15 	stw	r6,-4(fp)
 200b65c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 200b660:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 200b664:	e0bfff17 	ldw	r2,-4(fp)
 200b668:	10005c26 	beq	r2,zero,200b7dc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 200b66c:	e0bffd03 	ldbu	r2,-12(fp)
 200b670:	10800570 	cmpltui	r2,r2,21
 200b674:	1000071e 	bne	r2,zero,200b694 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 200b678:	e0bffd03 	ldbu	r2,-12(fp)
 200b67c:	10803fe0 	cmpeqi	r2,r2,255
 200b680:	1000041e 	bne	r2,zero,200b694 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 200b684:	e0bfff17 	ldw	r2,-4(fp)
 200b688:	00c00a84 	movi	r3,42
 200b68c:	10c00005 	stb	r3,0(r2)
            return;
 200b690:	00005306 	br	200b7e0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 200b694:	e0bffe17 	ldw	r2,-8(fp)
 200b698:	1000041e 	bne	r2,zero,200b6ac <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 200b69c:	e0bfff17 	ldw	r2,-4(fp)
 200b6a0:	00c00304 	movi	r3,12
 200b6a4:	10c00005 	stb	r3,0(r2)
        return;
 200b6a8:	00004d06 	br	200b7e0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 200b6ac:	d0a70c03 	ldbu	r2,-25552(gp)
 200b6b0:	10803fcc 	andi	r2,r2,255
 200b6b4:	10000426 	beq	r2,zero,200b6c8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 200b6b8:	e0bfff17 	ldw	r2,-4(fp)
 200b6bc:	00c00484 	movi	r3,18
 200b6c0:	10c00005 	stb	r3,0(r2)
        return;
 200b6c4:	00004606 	br	200b7e0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b6c8:	0005303a 	rdctl	r2,status
 200b6cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b6d0:	e0fffc17 	ldw	r3,-16(fp)
 200b6d4:	00bfff84 	movi	r2,-2
 200b6d8:	1884703a 	and	r2,r3,r2
 200b6dc:	1001703a 	wrctl	status,r2
  
  return context;
 200b6e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200b6e4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 200b6e8:	e0bffd03 	ldbu	r2,-12(fp)
 200b6ec:	10803fd8 	cmpnei	r2,r2,255
 200b6f0:	1000031e 	bne	r2,zero,200b700 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 200b6f4:	d0a70d17 	ldw	r2,-25548(gp)
 200b6f8:	10800c83 	ldbu	r2,50(r2)
 200b6fc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b700:	e0fffd03 	ldbu	r3,-12(fp)
 200b704:	008080b4 	movhi	r2,514
 200b708:	10ac9a04 	addi	r2,r2,-19864
 200b70c:	18c7883a 	add	r3,r3,r3
 200b710:	18c7883a 	add	r3,r3,r3
 200b714:	10c5883a 	add	r2,r2,r3
 200b718:	10800017 	ldw	r2,0(r2)
 200b71c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 200b720:	e0bff717 	ldw	r2,-36(fp)
 200b724:	1000081e 	bne	r2,zero,200b748 <OSTaskNameSet+0x108>
 200b728:	e0bff517 	ldw	r2,-44(fp)
 200b72c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b730:	e0bff617 	ldw	r2,-40(fp)
 200b734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b738:	e0bfff17 	ldw	r2,-4(fp)
 200b73c:	00c010c4 	movi	r3,67
 200b740:	10c00005 	stb	r3,0(r2)
        return;
 200b744:	00002606 	br	200b7e0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 200b748:	e0bff717 	ldw	r2,-36(fp)
 200b74c:	10800058 	cmpnei	r2,r2,1
 200b750:	1000081e 	bne	r2,zero,200b774 <OSTaskNameSet+0x134>
 200b754:	e0bff517 	ldw	r2,-44(fp)
 200b758:	e0bff815 	stw	r2,-32(fp)
 200b75c:	e0bff817 	ldw	r2,-32(fp)
 200b760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b764:	e0bfff17 	ldw	r2,-4(fp)
 200b768:	00c010c4 	movi	r3,67
 200b76c:	10c00005 	stb	r3,0(r2)
        return;
 200b770:	00001b06 	br	200b7e0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 200b774:	e13ffe17 	ldw	r4,-8(fp)
 200b778:	2005c480 	call	2005c48 <OS_StrLen>
 200b77c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 200b780:	e0bffa03 	ldbu	r2,-24(fp)
 200b784:	10800830 	cmpltui	r2,r2,32
 200b788:	1000081e 	bne	r2,zero,200b7ac <OSTaskNameSet+0x16c>
 200b78c:	e0bff517 	ldw	r2,-44(fp)
 200b790:	e0bff915 	stw	r2,-28(fp)
 200b794:	e0bff917 	ldw	r2,-28(fp)
 200b798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 200b79c:	e0bfff17 	ldw	r2,-4(fp)
 200b7a0:	00c01044 	movi	r3,65
 200b7a4:	10c00005 	stb	r3,0(r2)
        return;
 200b7a8:	00000d06 	br	200b7e0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 200b7ac:	e0bff717 	ldw	r2,-36(fp)
 200b7b0:	10801304 	addi	r2,r2,76
 200b7b4:	e17ffe17 	ldw	r5,-8(fp)
 200b7b8:	1009883a 	mov	r4,r2
 200b7bc:	2005bd40 	call	2005bd4 <OS_StrCopy>
 200b7c0:	e0bff517 	ldw	r2,-44(fp)
 200b7c4:	e0bffb15 	stw	r2,-20(fp)
 200b7c8:	e0bffb17 	ldw	r2,-20(fp)
 200b7cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200b7d0:	e0bfff17 	ldw	r2,-4(fp)
 200b7d4:	10000005 	stb	zero,0(r2)
 200b7d8:	00000106 	br	200b7e0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 200b7dc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 200b7e0:	e037883a 	mov	sp,fp
 200b7e4:	dfc00117 	ldw	ra,4(sp)
 200b7e8:	df000017 	ldw	fp,0(sp)
 200b7ec:	dec00204 	addi	sp,sp,8
 200b7f0:	f800283a 	ret

0200b7f4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 200b7f4:	defff404 	addi	sp,sp,-48
 200b7f8:	dfc00b15 	stw	ra,44(sp)
 200b7fc:	df000a15 	stw	fp,40(sp)
 200b800:	df000a04 	addi	fp,sp,40
 200b804:	2005883a 	mov	r2,r4
 200b808:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 200b80c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 200b810:	e0bfff03 	ldbu	r2,-4(fp)
 200b814:	10800530 	cmpltui	r2,r2,20
 200b818:	1000021e 	bne	r2,zero,200b824 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 200b81c:	00800a84 	movi	r2,42
 200b820:	00006406 	br	200b9b4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b824:	0005303a 	rdctl	r2,status
 200b828:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b82c:	e0fffe17 	ldw	r3,-8(fp)
 200b830:	00bfff84 	movi	r2,-2
 200b834:	1884703a 	and	r2,r3,r2
 200b838:	1001703a 	wrctl	status,r2
  
  return context;
 200b83c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200b840:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 200b844:	e0ffff03 	ldbu	r3,-4(fp)
 200b848:	008080b4 	movhi	r2,514
 200b84c:	10ac9a04 	addi	r2,r2,-19864
 200b850:	18c7883a 	add	r3,r3,r3
 200b854:	18c7883a 	add	r3,r3,r3
 200b858:	10c5883a 	add	r2,r2,r3
 200b85c:	10800017 	ldw	r2,0(r2)
 200b860:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 200b864:	e0bff817 	ldw	r2,-32(fp)
 200b868:	1000061e 	bne	r2,zero,200b884 <OSTaskResume+0x90>
 200b86c:	e0bff617 	ldw	r2,-40(fp)
 200b870:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b874:	e0bff717 	ldw	r2,-36(fp)
 200b878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 200b87c:	00801184 	movi	r2,70
 200b880:	00004c06 	br	200b9b4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 200b884:	e0bff817 	ldw	r2,-32(fp)
 200b888:	10800058 	cmpnei	r2,r2,1
 200b88c:	1000061e 	bne	r2,zero,200b8a8 <OSTaskResume+0xb4>
 200b890:	e0bff617 	ldw	r2,-40(fp)
 200b894:	e0bff915 	stw	r2,-28(fp)
 200b898:	e0bff917 	ldw	r2,-28(fp)
 200b89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200b8a0:	008010c4 	movi	r2,67
 200b8a4:	00004306 	br	200b9b4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 200b8a8:	e0bff817 	ldw	r2,-32(fp)
 200b8ac:	10800c03 	ldbu	r2,48(r2)
 200b8b0:	10803fcc 	andi	r2,r2,255
 200b8b4:	1080020c 	andi	r2,r2,8
 200b8b8:	10003926 	beq	r2,zero,200b9a0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 200b8bc:	e0bff817 	ldw	r2,-32(fp)
 200b8c0:	10c00c03 	ldbu	r3,48(r2)
 200b8c4:	00bffdc4 	movi	r2,-9
 200b8c8:	1884703a 	and	r2,r3,r2
 200b8cc:	1007883a 	mov	r3,r2
 200b8d0:	e0bff817 	ldw	r2,-32(fp)
 200b8d4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 200b8d8:	e0bff817 	ldw	r2,-32(fp)
 200b8dc:	10800c03 	ldbu	r2,48(r2)
 200b8e0:	10803fcc 	andi	r2,r2,255
 200b8e4:	1000281e 	bne	r2,zero,200b988 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 200b8e8:	e0bff817 	ldw	r2,-32(fp)
 200b8ec:	10800b8b 	ldhu	r2,46(r2)
 200b8f0:	10bfffcc 	andi	r2,r2,65535
 200b8f4:	10001f1e 	bne	r2,zero,200b974 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 200b8f8:	e0bff817 	ldw	r2,-32(fp)
 200b8fc:	10c00d83 	ldbu	r3,54(r2)
 200b900:	d0a70a03 	ldbu	r2,-25560(gp)
 200b904:	1884b03a 	or	r2,r3,r2
 200b908:	d0a70a05 	stb	r2,-25560(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200b90c:	e0bff817 	ldw	r2,-32(fp)
 200b910:	10800d03 	ldbu	r2,52(r2)
 200b914:	10c03fcc 	andi	r3,r2,255
 200b918:	e0bff817 	ldw	r2,-32(fp)
 200b91c:	10800d03 	ldbu	r2,52(r2)
 200b920:	11003fcc 	andi	r4,r2,255
 200b924:	d0a70a44 	addi	r2,gp,-25559
 200b928:	2085883a 	add	r2,r4,r2
 200b92c:	11000003 	ldbu	r4,0(r2)
 200b930:	e0bff817 	ldw	r2,-32(fp)
 200b934:	10800d43 	ldbu	r2,53(r2)
 200b938:	2084b03a 	or	r2,r4,r2
 200b93c:	1009883a 	mov	r4,r2
 200b940:	d0a70a44 	addi	r2,gp,-25559
 200b944:	1885883a 	add	r2,r3,r2
 200b948:	11000005 	stb	r4,0(r2)
 200b94c:	e0bff617 	ldw	r2,-40(fp)
 200b950:	e0bffa15 	stw	r2,-24(fp)
 200b954:	e0bffa17 	ldw	r2,-24(fp)
 200b958:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 200b95c:	d0a6fe43 	ldbu	r2,-25607(gp)
 200b960:	10803fcc 	andi	r2,r2,255
 200b964:	10800058 	cmpnei	r2,r2,1
 200b968:	10000b1e 	bne	r2,zero,200b998 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 200b96c:	2005a900 	call	2005a90 <OS_Sched>
 200b970:	00000906 	br	200b998 <OSTaskResume+0x1a4>
 200b974:	e0bff617 	ldw	r2,-40(fp)
 200b978:	e0bffb15 	stw	r2,-20(fp)
 200b97c:	e0bffb17 	ldw	r2,-20(fp)
 200b980:	1001703a 	wrctl	status,r2
 200b984:	00000406 	br	200b998 <OSTaskResume+0x1a4>
 200b988:	e0bff617 	ldw	r2,-40(fp)
 200b98c:	e0bffc15 	stw	r2,-16(fp)
 200b990:	e0bffc17 	ldw	r2,-16(fp)
 200b994:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 200b998:	0005883a 	mov	r2,zero
 200b99c:	00000506 	br	200b9b4 <OSTaskResume+0x1c0>
 200b9a0:	e0bff617 	ldw	r2,-40(fp)
 200b9a4:	e0bffd15 	stw	r2,-12(fp)
 200b9a8:	e0bffd17 	ldw	r2,-12(fp)
 200b9ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 200b9b0:	00801104 	movi	r2,68
}
 200b9b4:	e037883a 	mov	sp,fp
 200b9b8:	dfc00117 	ldw	ra,4(sp)
 200b9bc:	df000017 	ldw	fp,0(sp)
 200b9c0:	dec00204 	addi	sp,sp,8
 200b9c4:	f800283a 	ret

0200b9c8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 200b9c8:	defff304 	addi	sp,sp,-52
 200b9cc:	df000c15 	stw	fp,48(sp)
 200b9d0:	df000c04 	addi	fp,sp,48
 200b9d4:	2005883a 	mov	r2,r4
 200b9d8:	e17fff15 	stw	r5,-4(fp)
 200b9dc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200b9e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 200b9e4:	e0bffe03 	ldbu	r2,-8(fp)
 200b9e8:	10800570 	cmpltui	r2,r2,21
 200b9ec:	1000051e 	bne	r2,zero,200ba04 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 200b9f0:	e0bffe03 	ldbu	r2,-8(fp)
 200b9f4:	10803fe0 	cmpeqi	r2,r2,255
 200b9f8:	1000021e 	bne	r2,zero,200ba04 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 200b9fc:	00800a84 	movi	r2,42
 200ba00:	00005d06 	br	200bb78 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 200ba04:	e0bfff17 	ldw	r2,-4(fp)
 200ba08:	1000021e 	bne	r2,zero,200ba14 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 200ba0c:	00800244 	movi	r2,9
 200ba10:	00005906 	br	200bb78 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 200ba14:	e0bfff17 	ldw	r2,-4(fp)
 200ba18:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 200ba1c:	e0bfff17 	ldw	r2,-4(fp)
 200ba20:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ba24:	0005303a 	rdctl	r2,status
 200ba28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ba2c:	e0fffd17 	ldw	r3,-12(fp)
 200ba30:	00bfff84 	movi	r2,-2
 200ba34:	1884703a 	and	r2,r3,r2
 200ba38:	1001703a 	wrctl	status,r2
  
  return context;
 200ba3c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 200ba40:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 200ba44:	e0bffe03 	ldbu	r2,-8(fp)
 200ba48:	10803fd8 	cmpnei	r2,r2,255
 200ba4c:	1000031e 	bne	r2,zero,200ba5c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 200ba50:	d0a70d17 	ldw	r2,-25548(gp)
 200ba54:	10800c83 	ldbu	r2,50(r2)
 200ba58:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200ba5c:	e0fffe03 	ldbu	r3,-8(fp)
 200ba60:	008080b4 	movhi	r2,514
 200ba64:	10ac9a04 	addi	r2,r2,-19864
 200ba68:	18c7883a 	add	r3,r3,r3
 200ba6c:	18c7883a 	add	r3,r3,r3
 200ba70:	10c5883a 	add	r2,r2,r3
 200ba74:	10800017 	ldw	r2,0(r2)
 200ba78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 200ba7c:	e0bff817 	ldw	r2,-32(fp)
 200ba80:	1000061e 	bne	r2,zero,200ba9c <OSTaskStkChk+0xd4>
 200ba84:	e0bff617 	ldw	r2,-40(fp)
 200ba88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ba8c:	e0bff717 	ldw	r2,-36(fp)
 200ba90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200ba94:	008010c4 	movi	r2,67
 200ba98:	00003706 	br	200bb78 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 200ba9c:	e0bff817 	ldw	r2,-32(fp)
 200baa0:	10800058 	cmpnei	r2,r2,1
 200baa4:	1000061e 	bne	r2,zero,200bac0 <OSTaskStkChk+0xf8>
 200baa8:	e0bff617 	ldw	r2,-40(fp)
 200baac:	e0bff915 	stw	r2,-28(fp)
 200bab0:	e0bff917 	ldw	r2,-28(fp)
 200bab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bab8:	008010c4 	movi	r2,67
 200babc:	00002e06 	br	200bb78 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 200bac0:	e0bff817 	ldw	r2,-32(fp)
 200bac4:	1080040b 	ldhu	r2,16(r2)
 200bac8:	10bfffcc 	andi	r2,r2,65535
 200bacc:	1080004c 	andi	r2,r2,1
 200bad0:	1000061e 	bne	r2,zero,200baec <OSTaskStkChk+0x124>
 200bad4:	e0bff617 	ldw	r2,-40(fp)
 200bad8:	e0bffa15 	stw	r2,-24(fp)
 200badc:	e0bffa17 	ldw	r2,-24(fp)
 200bae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 200bae4:	00801144 	movi	r2,69
 200bae8:	00002306 	br	200bb78 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 200baec:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 200baf0:	e0bff817 	ldw	r2,-32(fp)
 200baf4:	10800317 	ldw	r2,12(r2)
 200baf8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 200bafc:	e0bff817 	ldw	r2,-32(fp)
 200bb00:	10800217 	ldw	r2,8(r2)
 200bb04:	e0bff415 	stw	r2,-48(fp)
 200bb08:	e0bff617 	ldw	r2,-40(fp)
 200bb0c:	e0bffb15 	stw	r2,-20(fp)
 200bb10:	e0bffb17 	ldw	r2,-20(fp)
 200bb14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 200bb18:	00000306 	br	200bb28 <OSTaskStkChk+0x160>
        nfree++;
 200bb1c:	e0bff517 	ldw	r2,-44(fp)
 200bb20:	10800044 	addi	r2,r2,1
 200bb24:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 200bb28:	e0bff417 	ldw	r2,-48(fp)
 200bb2c:	10c00104 	addi	r3,r2,4
 200bb30:	e0fff415 	stw	r3,-48(fp)
 200bb34:	10800017 	ldw	r2,0(r2)
 200bb38:	103ff826 	beq	r2,zero,200bb1c <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 200bb3c:	e0bff517 	ldw	r2,-44(fp)
 200bb40:	1085883a 	add	r2,r2,r2
 200bb44:	1085883a 	add	r2,r2,r2
 200bb48:	1007883a 	mov	r3,r2
 200bb4c:	e0bfff17 	ldw	r2,-4(fp)
 200bb50:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 200bb54:	e0fffc17 	ldw	r3,-16(fp)
 200bb58:	e0bff517 	ldw	r2,-44(fp)
 200bb5c:	1885c83a 	sub	r2,r3,r2
 200bb60:	1085883a 	add	r2,r2,r2
 200bb64:	1085883a 	add	r2,r2,r2
 200bb68:	1007883a 	mov	r3,r2
 200bb6c:	e0bfff17 	ldw	r2,-4(fp)
 200bb70:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 200bb74:	0005883a 	mov	r2,zero
}
 200bb78:	e037883a 	mov	sp,fp
 200bb7c:	df000017 	ldw	fp,0(sp)
 200bb80:	dec00104 	addi	sp,sp,4
 200bb84:	f800283a 	ret

0200bb88 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 200bb88:	defff504 	addi	sp,sp,-44
 200bb8c:	dfc00a15 	stw	ra,40(sp)
 200bb90:	df000915 	stw	fp,36(sp)
 200bb94:	df000904 	addi	fp,sp,36
 200bb98:	2005883a 	mov	r2,r4
 200bb9c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200bba0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 200bba4:	e0bfff03 	ldbu	r2,-4(fp)
 200bba8:	10800518 	cmpnei	r2,r2,20
 200bbac:	1000021e 	bne	r2,zero,200bbb8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 200bbb0:	008011c4 	movi	r2,71
 200bbb4:	00006806 	br	200bd58 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 200bbb8:	e0bfff03 	ldbu	r2,-4(fp)
 200bbbc:	10800530 	cmpltui	r2,r2,20
 200bbc0:	1000051e 	bne	r2,zero,200bbd8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 200bbc4:	e0bfff03 	ldbu	r2,-4(fp)
 200bbc8:	10803fe0 	cmpeqi	r2,r2,255
 200bbcc:	1000021e 	bne	r2,zero,200bbd8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 200bbd0:	00800a84 	movi	r2,42
 200bbd4:	00006006 	br	200bd58 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200bbd8:	0005303a 	rdctl	r2,status
 200bbdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200bbe0:	e0fffe17 	ldw	r3,-8(fp)
 200bbe4:	00bfff84 	movi	r2,-2
 200bbe8:	1884703a 	and	r2,r3,r2
 200bbec:	1001703a 	wrctl	status,r2
  
  return context;
 200bbf0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 200bbf4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 200bbf8:	e0bfff03 	ldbu	r2,-4(fp)
 200bbfc:	10803fd8 	cmpnei	r2,r2,255
 200bc00:	1000061e 	bne	r2,zero,200bc1c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 200bc04:	d0a70d17 	ldw	r2,-25548(gp)
 200bc08:	10800c83 	ldbu	r2,50(r2)
 200bc0c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 200bc10:	00800044 	movi	r2,1
 200bc14:	e0bff705 	stb	r2,-36(fp)
 200bc18:	00000906 	br	200bc40 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 200bc1c:	d0a70d17 	ldw	r2,-25548(gp)
 200bc20:	10800c83 	ldbu	r2,50(r2)
 200bc24:	10c03fcc 	andi	r3,r2,255
 200bc28:	e0bfff03 	ldbu	r2,-4(fp)
 200bc2c:	1880031e 	bne	r3,r2,200bc3c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 200bc30:	00800044 	movi	r2,1
 200bc34:	e0bff705 	stb	r2,-36(fp)
 200bc38:	00000106 	br	200bc40 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 200bc3c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200bc40:	e0ffff03 	ldbu	r3,-4(fp)
 200bc44:	008080b4 	movhi	r2,514
 200bc48:	10ac9a04 	addi	r2,r2,-19864
 200bc4c:	18c7883a 	add	r3,r3,r3
 200bc50:	18c7883a 	add	r3,r3,r3
 200bc54:	10c5883a 	add	r2,r2,r3
 200bc58:	10800017 	ldw	r2,0(r2)
 200bc5c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 200bc60:	e0bffa17 	ldw	r2,-24(fp)
 200bc64:	1000061e 	bne	r2,zero,200bc80 <OSTaskSuspend+0xf8>
 200bc68:	e0bff817 	ldw	r2,-32(fp)
 200bc6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200bc70:	e0bff917 	ldw	r2,-28(fp)
 200bc74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 200bc78:	00801204 	movi	r2,72
 200bc7c:	00003606 	br	200bd58 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 200bc80:	e0bffa17 	ldw	r2,-24(fp)
 200bc84:	10800058 	cmpnei	r2,r2,1
 200bc88:	1000061e 	bne	r2,zero,200bca4 <OSTaskSuspend+0x11c>
 200bc8c:	e0bff817 	ldw	r2,-32(fp)
 200bc90:	e0bffb15 	stw	r2,-20(fp)
 200bc94:	e0bffb17 	ldw	r2,-20(fp)
 200bc98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bc9c:	008010c4 	movi	r2,67
 200bca0:	00002d06 	br	200bd58 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 200bca4:	e0bffa17 	ldw	r2,-24(fp)
 200bca8:	10800d03 	ldbu	r2,52(r2)
 200bcac:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 200bcb0:	e0fffd03 	ldbu	r3,-12(fp)
 200bcb4:	e13ffd03 	ldbu	r4,-12(fp)
 200bcb8:	d0a70a44 	addi	r2,gp,-25559
 200bcbc:	2085883a 	add	r2,r4,r2
 200bcc0:	10800003 	ldbu	r2,0(r2)
 200bcc4:	1009883a 	mov	r4,r2
 200bcc8:	e0bffa17 	ldw	r2,-24(fp)
 200bccc:	10800d43 	ldbu	r2,53(r2)
 200bcd0:	0084303a 	nor	r2,zero,r2
 200bcd4:	2084703a 	and	r2,r4,r2
 200bcd8:	1009883a 	mov	r4,r2
 200bcdc:	d0a70a44 	addi	r2,gp,-25559
 200bce0:	1885883a 	add	r2,r3,r2
 200bce4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 200bce8:	e0fffd03 	ldbu	r3,-12(fp)
 200bcec:	d0a70a44 	addi	r2,gp,-25559
 200bcf0:	1885883a 	add	r2,r3,r2
 200bcf4:	10800003 	ldbu	r2,0(r2)
 200bcf8:	10803fcc 	andi	r2,r2,255
 200bcfc:	1000071e 	bne	r2,zero,200bd1c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 200bd00:	e0bffa17 	ldw	r2,-24(fp)
 200bd04:	10800d83 	ldbu	r2,54(r2)
 200bd08:	0084303a 	nor	r2,zero,r2
 200bd0c:	1007883a 	mov	r3,r2
 200bd10:	d0a70a03 	ldbu	r2,-25560(gp)
 200bd14:	1884703a 	and	r2,r3,r2
 200bd18:	d0a70a05 	stb	r2,-25560(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 200bd1c:	e0bffa17 	ldw	r2,-24(fp)
 200bd20:	10800c03 	ldbu	r2,48(r2)
 200bd24:	10800214 	ori	r2,r2,8
 200bd28:	1007883a 	mov	r3,r2
 200bd2c:	e0bffa17 	ldw	r2,-24(fp)
 200bd30:	10c00c05 	stb	r3,48(r2)
 200bd34:	e0bff817 	ldw	r2,-32(fp)
 200bd38:	e0bffc15 	stw	r2,-16(fp)
 200bd3c:	e0bffc17 	ldw	r2,-16(fp)
 200bd40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 200bd44:	e0bff703 	ldbu	r2,-36(fp)
 200bd48:	10800058 	cmpnei	r2,r2,1
 200bd4c:	1000011e 	bne	r2,zero,200bd54 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 200bd50:	2005a900 	call	2005a90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200bd54:	0005883a 	mov	r2,zero
}
 200bd58:	e037883a 	mov	sp,fp
 200bd5c:	dfc00117 	ldw	ra,4(sp)
 200bd60:	df000017 	ldw	fp,0(sp)
 200bd64:	dec00204 	addi	sp,sp,8
 200bd68:	f800283a 	ret

0200bd6c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 200bd6c:	defff604 	addi	sp,sp,-40
 200bd70:	dfc00915 	stw	ra,36(sp)
 200bd74:	df000815 	stw	fp,32(sp)
 200bd78:	df000804 	addi	fp,sp,32
 200bd7c:	2005883a 	mov	r2,r4
 200bd80:	e17fff15 	stw	r5,-4(fp)
 200bd84:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200bd88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 200bd8c:	e0bffe03 	ldbu	r2,-8(fp)
 200bd90:	10800570 	cmpltui	r2,r2,21
 200bd94:	1000051e 	bne	r2,zero,200bdac <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 200bd98:	e0bffe03 	ldbu	r2,-8(fp)
 200bd9c:	10803fe0 	cmpeqi	r2,r2,255
 200bda0:	1000021e 	bne	r2,zero,200bdac <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 200bda4:	00800a84 	movi	r2,42
 200bda8:	00003406 	br	200be7c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 200bdac:	e0bfff17 	ldw	r2,-4(fp)
 200bdb0:	1000021e 	bne	r2,zero,200bdbc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 200bdb4:	00800244 	movi	r2,9
 200bdb8:	00003006 	br	200be7c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200bdbc:	0005303a 	rdctl	r2,status
 200bdc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200bdc4:	e0fffd17 	ldw	r3,-12(fp)
 200bdc8:	00bfff84 	movi	r2,-2
 200bdcc:	1884703a 	and	r2,r3,r2
 200bdd0:	1001703a 	wrctl	status,r2
  
  return context;
 200bdd4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200bdd8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 200bddc:	e0bffe03 	ldbu	r2,-8(fp)
 200bde0:	10803fd8 	cmpnei	r2,r2,255
 200bde4:	1000031e 	bne	r2,zero,200bdf4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 200bde8:	d0a70d17 	ldw	r2,-25548(gp)
 200bdec:	10800c83 	ldbu	r2,50(r2)
 200bdf0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200bdf4:	e0fffe03 	ldbu	r3,-8(fp)
 200bdf8:	008080b4 	movhi	r2,514
 200bdfc:	10ac9a04 	addi	r2,r2,-19864
 200be00:	18c7883a 	add	r3,r3,r3
 200be04:	18c7883a 	add	r3,r3,r3
 200be08:	10c5883a 	add	r2,r2,r3
 200be0c:	10800017 	ldw	r2,0(r2)
 200be10:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 200be14:	e0bffa17 	ldw	r2,-24(fp)
 200be18:	1000061e 	bne	r2,zero,200be34 <OSTaskQuery+0xc8>
 200be1c:	e0bff817 	ldw	r2,-32(fp)
 200be20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200be24:	e0bff917 	ldw	r2,-28(fp)
 200be28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 200be2c:	00800a44 	movi	r2,41
 200be30:	00001206 	br	200be7c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 200be34:	e0bffa17 	ldw	r2,-24(fp)
 200be38:	10800058 	cmpnei	r2,r2,1
 200be3c:	1000061e 	bne	r2,zero,200be58 <OSTaskQuery+0xec>
 200be40:	e0bff817 	ldw	r2,-32(fp)
 200be44:	e0bffb15 	stw	r2,-20(fp)
 200be48:	e0bffb17 	ldw	r2,-20(fp)
 200be4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200be50:	008010c4 	movi	r2,67
 200be54:	00000906 	br	200be7c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 200be58:	01801b04 	movi	r6,108
 200be5c:	e17ffa17 	ldw	r5,-24(fp)
 200be60:	e13fff17 	ldw	r4,-4(fp)
 200be64:	2005a280 	call	2005a28 <OS_MemCopy>
 200be68:	e0bff817 	ldw	r2,-32(fp)
 200be6c:	e0bffc15 	stw	r2,-16(fp)
 200be70:	e0bffc17 	ldw	r2,-16(fp)
 200be74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200be78:	0005883a 	mov	r2,zero
}
 200be7c:	e037883a 	mov	sp,fp
 200be80:	dfc00117 	ldw	ra,4(sp)
 200be84:	df000017 	ldw	fp,0(sp)
 200be88:	dec00204 	addi	sp,sp,8
 200be8c:	f800283a 	ret

0200be90 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 200be90:	defffc04 	addi	sp,sp,-16
 200be94:	df000315 	stw	fp,12(sp)
 200be98:	df000304 	addi	fp,sp,12
 200be9c:	e13ffd15 	stw	r4,-12(fp)
 200bea0:	e17ffe15 	stw	r5,-8(fp)
 200bea4:	3005883a 	mov	r2,r6
 200bea8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 200beac:	e0bfff0b 	ldhu	r2,-4(fp)
 200beb0:	1080004c 	andi	r2,r2,1
 200beb4:	10000d26 	beq	r2,zero,200beec <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 200beb8:	e0bfff0b 	ldhu	r2,-4(fp)
 200bebc:	1080008c 	andi	r2,r2,2
 200bec0:	10000a26 	beq	r2,zero,200beec <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 200bec4:	00000706 	br	200bee4 <OS_TaskStkClr+0x54>
                size--;
 200bec8:	e0bffe17 	ldw	r2,-8(fp)
 200becc:	10bfffc4 	addi	r2,r2,-1
 200bed0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 200bed4:	e0bffd17 	ldw	r2,-12(fp)
 200bed8:	10c00104 	addi	r3,r2,4
 200bedc:	e0fffd15 	stw	r3,-12(fp)
 200bee0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 200bee4:	e0bffe17 	ldw	r2,-8(fp)
 200bee8:	103ff71e 	bne	r2,zero,200bec8 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 200beec:	0001883a 	nop
 200bef0:	e037883a 	mov	sp,fp
 200bef4:	df000017 	ldw	fp,0(sp)
 200bef8:	dec00104 	addi	sp,sp,4
 200befc:	f800283a 	ret

0200bf00 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 200bf00:	defff904 	addi	sp,sp,-28
 200bf04:	dfc00615 	stw	ra,24(sp)
 200bf08:	df000515 	stw	fp,20(sp)
 200bf0c:	df000504 	addi	fp,sp,20
 200bf10:	2005883a 	mov	r2,r4
 200bf14:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200bf18:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200bf1c:	d0a70c03 	ldbu	r2,-25552(gp)
 200bf20:	10803fcc 	andi	r2,r2,255
 200bf24:	1000311e 	bne	r2,zero,200bfec <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 200bf28:	e0bfff0b 	ldhu	r2,-4(fp)
 200bf2c:	10003026 	beq	r2,zero,200bff0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200bf30:	0005303a 	rdctl	r2,status
 200bf34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200bf38:	e0fffe17 	ldw	r3,-8(fp)
 200bf3c:	00bfff84 	movi	r2,-2
 200bf40:	1884703a 	and	r2,r3,r2
 200bf44:	1001703a 	wrctl	status,r2
  
  return context;
 200bf48:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 200bf4c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 200bf50:	d0a70d17 	ldw	r2,-25548(gp)
 200bf54:	10800d03 	ldbu	r2,52(r2)
 200bf58:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 200bf5c:	e0fffd03 	ldbu	r3,-12(fp)
 200bf60:	e13ffd03 	ldbu	r4,-12(fp)
 200bf64:	d0a70a44 	addi	r2,gp,-25559
 200bf68:	2085883a 	add	r2,r4,r2
 200bf6c:	10800003 	ldbu	r2,0(r2)
 200bf70:	1009883a 	mov	r4,r2
 200bf74:	d0a70d17 	ldw	r2,-25548(gp)
 200bf78:	10800d43 	ldbu	r2,53(r2)
 200bf7c:	0084303a 	nor	r2,zero,r2
 200bf80:	2084703a 	and	r2,r4,r2
 200bf84:	1009883a 	mov	r4,r2
 200bf88:	d0a70a44 	addi	r2,gp,-25559
 200bf8c:	1885883a 	add	r2,r3,r2
 200bf90:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 200bf94:	e0fffd03 	ldbu	r3,-12(fp)
 200bf98:	d0a70a44 	addi	r2,gp,-25559
 200bf9c:	1885883a 	add	r2,r3,r2
 200bfa0:	10800003 	ldbu	r2,0(r2)
 200bfa4:	10803fcc 	andi	r2,r2,255
 200bfa8:	1000071e 	bne	r2,zero,200bfc8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 200bfac:	d0a70d17 	ldw	r2,-25548(gp)
 200bfb0:	10800d83 	ldbu	r2,54(r2)
 200bfb4:	0084303a 	nor	r2,zero,r2
 200bfb8:	1007883a 	mov	r3,r2
 200bfbc:	d0a70a03 	ldbu	r2,-25560(gp)
 200bfc0:	1884703a 	and	r2,r3,r2
 200bfc4:	d0a70a05 	stb	r2,-25560(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 200bfc8:	d0a70d17 	ldw	r2,-25548(gp)
 200bfcc:	e0ffff0b 	ldhu	r3,-4(fp)
 200bfd0:	10c00b8d 	sth	r3,46(r2)
 200bfd4:	e0bffb17 	ldw	r2,-20(fp)
 200bfd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200bfdc:	e0bffc17 	ldw	r2,-16(fp)
 200bfe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 200bfe4:	2005a900 	call	2005a90 <OS_Sched>
 200bfe8:	00000106 	br	200bff0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 200bfec:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 200bff0:	e037883a 	mov	sp,fp
 200bff4:	dfc00117 	ldw	ra,4(sp)
 200bff8:	df000017 	ldw	fp,0(sp)
 200bffc:	dec00204 	addi	sp,sp,8
 200c000:	f800283a 	ret

0200c004 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 200c004:	defff704 	addi	sp,sp,-36
 200c008:	dfc00815 	stw	ra,32(sp)
 200c00c:	df000715 	stw	fp,28(sp)
 200c010:	dc000615 	stw	r16,24(sp)
 200c014:	df000704 	addi	fp,sp,28
 200c018:	2011883a 	mov	r8,r4
 200c01c:	2809883a 	mov	r4,r5
 200c020:	3007883a 	mov	r3,r6
 200c024:	3805883a 	mov	r2,r7
 200c028:	e23ffb05 	stb	r8,-20(fp)
 200c02c:	e13ffc05 	stb	r4,-16(fp)
 200c030:	e0fffd05 	stb	r3,-12(fp)
 200c034:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200c038:	d0a70c03 	ldbu	r2,-25552(gp)
 200c03c:	10803fcc 	andi	r2,r2,255
 200c040:	10000226 	beq	r2,zero,200c04c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 200c044:	00801544 	movi	r2,85
 200c048:	00004706 	br	200c168 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 200c04c:	e0bffb03 	ldbu	r2,-20(fp)
 200c050:	1000081e 	bne	r2,zero,200c074 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 200c054:	e0bffc03 	ldbu	r2,-16(fp)
 200c058:	1000061e 	bne	r2,zero,200c074 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 200c05c:	e0bffd03 	ldbu	r2,-12(fp)
 200c060:	1000041e 	bne	r2,zero,200c074 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 200c064:	e0bffe0b 	ldhu	r2,-8(fp)
 200c068:	1000021e 	bne	r2,zero,200c074 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 200c06c:	00801504 	movi	r2,84
 200c070:	00003d06 	br	200c168 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
 200c074:	e0bffc03 	ldbu	r2,-16(fp)
 200c078:	10800f30 	cmpltui	r2,r2,60
 200c07c:	1000021e 	bne	r2,zero,200c088 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 200c080:	00801444 	movi	r2,81
 200c084:	00003806 	br	200c168 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
 200c088:	e0bffd03 	ldbu	r2,-12(fp)
 200c08c:	10800f30 	cmpltui	r2,r2,60
 200c090:	1000021e 	bne	r2,zero,200c09c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 200c094:	00801484 	movi	r2,82
 200c098:	00003306 	br	200c168 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
 200c09c:	e0bffe0b 	ldhu	r2,-8(fp)
 200c0a0:	1080fa30 	cmpltui	r2,r2,1000
 200c0a4:	1000021e 	bne	r2,zero,200c0b0 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 200c0a8:	008014c4 	movi	r2,83
 200c0ac:	00002e06 	br	200c168 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 200c0b0:	e0bffb03 	ldbu	r2,-20(fp)
 200c0b4:	01438404 	movi	r5,3600
 200c0b8:	1009883a 	mov	r4,r2
 200c0bc:	200348c0 	call	200348c <__mulsi3>
 200c0c0:	1021883a 	mov	r16,r2
 200c0c4:	e0bffc03 	ldbu	r2,-16(fp)
 200c0c8:	01400f04 	movi	r5,60
 200c0cc:	1009883a 	mov	r4,r2
 200c0d0:	200348c0 	call	200348c <__mulsi3>
 200c0d4:	8087883a 	add	r3,r16,r2
 200c0d8:	e0bffd03 	ldbu	r2,-12(fp)
 200c0dc:	1885883a 	add	r2,r3,r2
 200c0e0:	0140fa04 	movi	r5,1000
 200c0e4:	1009883a 	mov	r4,r2
 200c0e8:	200348c0 	call	200348c <__mulsi3>
 200c0ec:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 200c0f0:	e0bffe0b 	ldhu	r2,-8(fp)
 200c0f4:	0140fa04 	movi	r5,1000
 200c0f8:	1009883a 	mov	r4,r2
 200c0fc:	200348c0 	call	200348c <__mulsi3>
 200c100:	0140fa04 	movi	r5,1000
 200c104:	1009883a 	mov	r4,r2
 200c108:	20033d00 	call	20033d0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 200c10c:	8085883a 	add	r2,r16,r2
 200c110:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 200c114:	e0bffa17 	ldw	r2,-24(fp)
 200c118:	1004d43a 	srli	r2,r2,16
 200c11c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 200c120:	e0bffa17 	ldw	r2,-24(fp)
 200c124:	10bfffcc 	andi	r2,r2,65535
 200c128:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 200c12c:	e0bffa17 	ldw	r2,-24(fp)
 200c130:	10bfffcc 	andi	r2,r2,65535
 200c134:	1009883a 	mov	r4,r2
 200c138:	200bf000 	call	200bf00 <OSTimeDly>
    while (loops > 0) {
 200c13c:	00000706 	br	200c15c <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
 200c140:	01200014 	movui	r4,32768
 200c144:	200bf000 	call	200bf00 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 200c148:	01200014 	movui	r4,32768
 200c14c:	200bf000 	call	200bf00 <OSTimeDly>
        loops--;
 200c150:	e0bff90b 	ldhu	r2,-28(fp)
 200c154:	10bfffc4 	addi	r2,r2,-1
 200c158:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 200c15c:	e0bff90b 	ldhu	r2,-28(fp)
 200c160:	103ff71e 	bne	r2,zero,200c140 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 200c164:	0005883a 	mov	r2,zero
}
 200c168:	e6ffff04 	addi	sp,fp,-4
 200c16c:	dfc00217 	ldw	ra,8(sp)
 200c170:	df000117 	ldw	fp,4(sp)
 200c174:	dc000017 	ldw	r16,0(sp)
 200c178:	dec00304 	addi	sp,sp,12
 200c17c:	f800283a 	ret

0200c180 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 200c180:	defff504 	addi	sp,sp,-44
 200c184:	dfc00a15 	stw	ra,40(sp)
 200c188:	df000915 	stw	fp,36(sp)
 200c18c:	df000904 	addi	fp,sp,36
 200c190:	2005883a 	mov	r2,r4
 200c194:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200c198:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 200c19c:	e0bfff03 	ldbu	r2,-4(fp)
 200c1a0:	10800530 	cmpltui	r2,r2,20
 200c1a4:	1000021e 	bne	r2,zero,200c1b0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 200c1a8:	00800a84 	movi	r2,42
 200c1ac:	00006406 	br	200c340 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c1b0:	0005303a 	rdctl	r2,status
 200c1b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c1b8:	e0fffe17 	ldw	r3,-8(fp)
 200c1bc:	00bfff84 	movi	r2,-2
 200c1c0:	1884703a 	and	r2,r3,r2
 200c1c4:	1001703a 	wrctl	status,r2
  
  return context;
 200c1c8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 200c1cc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 200c1d0:	e0ffff03 	ldbu	r3,-4(fp)
 200c1d4:	008080b4 	movhi	r2,514
 200c1d8:	10ac9a04 	addi	r2,r2,-19864
 200c1dc:	18c7883a 	add	r3,r3,r3
 200c1e0:	18c7883a 	add	r3,r3,r3
 200c1e4:	10c5883a 	add	r2,r2,r3
 200c1e8:	10800017 	ldw	r2,0(r2)
 200c1ec:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 200c1f0:	e0bff917 	ldw	r2,-28(fp)
 200c1f4:	1000061e 	bne	r2,zero,200c210 <OSTimeDlyResume+0x90>
 200c1f8:	e0bff717 	ldw	r2,-36(fp)
 200c1fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c200:	e0bff817 	ldw	r2,-32(fp)
 200c204:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 200c208:	008010c4 	movi	r2,67
 200c20c:	00004c06 	br	200c340 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 200c210:	e0bff917 	ldw	r2,-28(fp)
 200c214:	10800058 	cmpnei	r2,r2,1
 200c218:	1000061e 	bne	r2,zero,200c234 <OSTimeDlyResume+0xb4>
 200c21c:	e0bff717 	ldw	r2,-36(fp)
 200c220:	e0bffa15 	stw	r2,-24(fp)
 200c224:	e0bffa17 	ldw	r2,-24(fp)
 200c228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 200c22c:	008010c4 	movi	r2,67
 200c230:	00004306 	br	200c340 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 200c234:	e0bff917 	ldw	r2,-28(fp)
 200c238:	10800b8b 	ldhu	r2,46(r2)
 200c23c:	10bfffcc 	andi	r2,r2,65535
 200c240:	1000061e 	bne	r2,zero,200c25c <OSTimeDlyResume+0xdc>
 200c244:	e0bff717 	ldw	r2,-36(fp)
 200c248:	e0bffb15 	stw	r2,-20(fp)
 200c24c:	e0bffb17 	ldw	r2,-20(fp)
 200c250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 200c254:	00801404 	movi	r2,80
 200c258:	00003906 	br	200c340 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 200c25c:	e0bff917 	ldw	r2,-28(fp)
 200c260:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 200c264:	e0bff917 	ldw	r2,-28(fp)
 200c268:	10800c03 	ldbu	r2,48(r2)
 200c26c:	10803fcc 	andi	r2,r2,255
 200c270:	10800dcc 	andi	r2,r2,55
 200c274:	10000b26 	beq	r2,zero,200c2a4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 200c278:	e0bff917 	ldw	r2,-28(fp)
 200c27c:	10c00c03 	ldbu	r3,48(r2)
 200c280:	00bff204 	movi	r2,-56
 200c284:	1884703a 	and	r2,r3,r2
 200c288:	1007883a 	mov	r3,r2
 200c28c:	e0bff917 	ldw	r2,-28(fp)
 200c290:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 200c294:	e0bff917 	ldw	r2,-28(fp)
 200c298:	00c00044 	movi	r3,1
 200c29c:	10c00c45 	stb	r3,49(r2)
 200c2a0:	00000206 	br	200c2ac <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 200c2a4:	e0bff917 	ldw	r2,-28(fp)
 200c2a8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 200c2ac:	e0bff917 	ldw	r2,-28(fp)
 200c2b0:	10800c03 	ldbu	r2,48(r2)
 200c2b4:	10803fcc 	andi	r2,r2,255
 200c2b8:	1080020c 	andi	r2,r2,8
 200c2bc:	10001b1e 	bne	r2,zero,200c32c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 200c2c0:	e0bff917 	ldw	r2,-28(fp)
 200c2c4:	10c00d83 	ldbu	r3,54(r2)
 200c2c8:	d0a70a03 	ldbu	r2,-25560(gp)
 200c2cc:	1884b03a 	or	r2,r3,r2
 200c2d0:	d0a70a05 	stb	r2,-25560(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200c2d4:	e0bff917 	ldw	r2,-28(fp)
 200c2d8:	10800d03 	ldbu	r2,52(r2)
 200c2dc:	10c03fcc 	andi	r3,r2,255
 200c2e0:	e0bff917 	ldw	r2,-28(fp)
 200c2e4:	10800d03 	ldbu	r2,52(r2)
 200c2e8:	11003fcc 	andi	r4,r2,255
 200c2ec:	d0a70a44 	addi	r2,gp,-25559
 200c2f0:	2085883a 	add	r2,r4,r2
 200c2f4:	11000003 	ldbu	r4,0(r2)
 200c2f8:	e0bff917 	ldw	r2,-28(fp)
 200c2fc:	10800d43 	ldbu	r2,53(r2)
 200c300:	2084b03a 	or	r2,r4,r2
 200c304:	1009883a 	mov	r4,r2
 200c308:	d0a70a44 	addi	r2,gp,-25559
 200c30c:	1885883a 	add	r2,r3,r2
 200c310:	11000005 	stb	r4,0(r2)
 200c314:	e0bff717 	ldw	r2,-36(fp)
 200c318:	e0bffc15 	stw	r2,-16(fp)
 200c31c:	e0bffc17 	ldw	r2,-16(fp)
 200c320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 200c324:	2005a900 	call	2005a90 <OS_Sched>
 200c328:	00000406 	br	200c33c <OSTimeDlyResume+0x1bc>
 200c32c:	e0bff717 	ldw	r2,-36(fp)
 200c330:	e0bffd15 	stw	r2,-12(fp)
 200c334:	e0bffd17 	ldw	r2,-12(fp)
 200c338:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 200c33c:	0005883a 	mov	r2,zero
}
 200c340:	e037883a 	mov	sp,fp
 200c344:	dfc00117 	ldw	ra,4(sp)
 200c348:	df000017 	ldw	fp,0(sp)
 200c34c:	dec00204 	addi	sp,sp,8
 200c350:	f800283a 	ret

0200c354 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 200c354:	defffb04 	addi	sp,sp,-20
 200c358:	df000415 	stw	fp,16(sp)
 200c35c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c360:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c364:	0005303a 	rdctl	r2,status
 200c368:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c36c:	e0fffe17 	ldw	r3,-8(fp)
 200c370:	00bfff84 	movi	r2,-2
 200c374:	1884703a 	and	r2,r3,r2
 200c378:	1001703a 	wrctl	status,r2
  
  return context;
 200c37c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 200c380:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 200c384:	d0a70e17 	ldw	r2,-25544(gp)
 200c388:	e0bffd15 	stw	r2,-12(fp)
 200c38c:	e0bffc17 	ldw	r2,-16(fp)
 200c390:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c394:	e0bfff17 	ldw	r2,-4(fp)
 200c398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 200c39c:	e0bffd17 	ldw	r2,-12(fp)
}
 200c3a0:	e037883a 	mov	sp,fp
 200c3a4:	df000017 	ldw	fp,0(sp)
 200c3a8:	dec00104 	addi	sp,sp,4
 200c3ac:	f800283a 	ret

0200c3b0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 200c3b0:	defffb04 	addi	sp,sp,-20
 200c3b4:	df000415 	stw	fp,16(sp)
 200c3b8:	df000404 	addi	fp,sp,16
 200c3bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c3c0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c3c4:	0005303a 	rdctl	r2,status
 200c3c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c3cc:	e0fffd17 	ldw	r3,-12(fp)
 200c3d0:	00bfff84 	movi	r2,-2
 200c3d4:	1884703a 	and	r2,r3,r2
 200c3d8:	1001703a 	wrctl	status,r2
  
  return context;
 200c3dc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 200c3e0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 200c3e4:	e0bfff17 	ldw	r2,-4(fp)
 200c3e8:	d0a70e15 	stw	r2,-25544(gp)
 200c3ec:	e0bffc17 	ldw	r2,-16(fp)
 200c3f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c3f4:	e0bffe17 	ldw	r2,-8(fp)
 200c3f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 200c3fc:	0001883a 	nop
 200c400:	e037883a 	mov	sp,fp
 200c404:	df000017 	ldw	fp,0(sp)
 200c408:	dec00104 	addi	sp,sp,4
 200c40c:	f800283a 	ret

0200c410 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200c410:	defffd04 	addi	sp,sp,-12
 200c414:	dfc00215 	stw	ra,8(sp)
 200c418:	df000115 	stw	fp,4(sp)
 200c41c:	df000104 	addi	fp,sp,4
 200c420:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200c424:	d1600604 	addi	r5,gp,-32744
 200c428:	e13fff17 	ldw	r4,-4(fp)
 200c42c:	200d4880 	call	200d488 <alt_dev_llist_insert>
}
 200c430:	e037883a 	mov	sp,fp
 200c434:	dfc00117 	ldw	ra,4(sp)
 200c438:	df000017 	ldw	fp,0(sp)
 200c43c:	dec00204 	addi	sp,sp,8
 200c440:	f800283a 	ret

0200c444 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200c444:	defffd04 	addi	sp,sp,-12
 200c448:	dfc00215 	stw	ra,8(sp)
 200c44c:	df000115 	stw	fp,4(sp)
 200c450:	df000104 	addi	fp,sp,4
 200c454:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 200c458:	200de340 	call	200de34 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200c45c:	00800044 	movi	r2,1
 200c460:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200c464:	0001883a 	nop
 200c468:	e037883a 	mov	sp,fp
 200c46c:	dfc00117 	ldw	ra,4(sp)
 200c470:	df000017 	ldw	fp,0(sp)
 200c474:	dec00204 	addi	sp,sp,8
 200c478:	f800283a 	ret

0200c47c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200c47c:	defffe04 	addi	sp,sp,-8
 200c480:	dfc00115 	stw	ra,4(sp)
 200c484:	df000015 	stw	fp,0(sp)
 200c488:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
 200c48c:	01c0fa04 	movi	r7,1000
 200c490:	01800084 	movi	r6,2
 200c494:	000b883a 	mov	r5,zero
 200c498:	01000074 	movhi	r4,1
 200c49c:	21040004 	addi	r4,r4,4096
 200c4a0:	200d2840 	call	200d284 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 200c4a4:	000d883a 	mov	r6,zero
 200c4a8:	000b883a 	mov	r5,zero
 200c4ac:	01008074 	movhi	r4,513
 200c4b0:	213cf504 	addi	r4,r4,-3116
 200c4b4:	200c6440 	call	200c644 <altera_avalon_jtag_uart_init>
 200c4b8:	01008074 	movhi	r4,513
 200c4bc:	213ceb04 	addi	r4,r4,-3156
 200c4c0:	200c4100 	call	200c410 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 200c4c4:	0001883a 	nop
}
 200c4c8:	0001883a 	nop
 200c4cc:	e037883a 	mov	sp,fp
 200c4d0:	dfc00117 	ldw	ra,4(sp)
 200c4d4:	df000017 	ldw	fp,0(sp)
 200c4d8:	dec00204 	addi	sp,sp,8
 200c4dc:	f800283a 	ret

0200c4e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200c4e0:	defffa04 	addi	sp,sp,-24
 200c4e4:	dfc00515 	stw	ra,20(sp)
 200c4e8:	df000415 	stw	fp,16(sp)
 200c4ec:	df000404 	addi	fp,sp,16
 200c4f0:	e13ffd15 	stw	r4,-12(fp)
 200c4f4:	e17ffe15 	stw	r5,-8(fp)
 200c4f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c4fc:	e0bffd17 	ldw	r2,-12(fp)
 200c500:	10800017 	ldw	r2,0(r2)
 200c504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200c508:	e0bffc17 	ldw	r2,-16(fp)
 200c50c:	10c00a04 	addi	r3,r2,40
 200c510:	e0bffd17 	ldw	r2,-12(fp)
 200c514:	10800217 	ldw	r2,8(r2)
 200c518:	100f883a 	mov	r7,r2
 200c51c:	e1bfff17 	ldw	r6,-4(fp)
 200c520:	e17ffe17 	ldw	r5,-8(fp)
 200c524:	1809883a 	mov	r4,r3
 200c528:	200cc8c0 	call	200cc8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200c52c:	e037883a 	mov	sp,fp
 200c530:	dfc00117 	ldw	ra,4(sp)
 200c534:	df000017 	ldw	fp,0(sp)
 200c538:	dec00204 	addi	sp,sp,8
 200c53c:	f800283a 	ret

0200c540 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200c540:	defffa04 	addi	sp,sp,-24
 200c544:	dfc00515 	stw	ra,20(sp)
 200c548:	df000415 	stw	fp,16(sp)
 200c54c:	df000404 	addi	fp,sp,16
 200c550:	e13ffd15 	stw	r4,-12(fp)
 200c554:	e17ffe15 	stw	r5,-8(fp)
 200c558:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c55c:	e0bffd17 	ldw	r2,-12(fp)
 200c560:	10800017 	ldw	r2,0(r2)
 200c564:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200c568:	e0bffc17 	ldw	r2,-16(fp)
 200c56c:	10c00a04 	addi	r3,r2,40
 200c570:	e0bffd17 	ldw	r2,-12(fp)
 200c574:	10800217 	ldw	r2,8(r2)
 200c578:	100f883a 	mov	r7,r2
 200c57c:	e1bfff17 	ldw	r6,-4(fp)
 200c580:	e17ffe17 	ldw	r5,-8(fp)
 200c584:	1809883a 	mov	r4,r3
 200c588:	200cf480 	call	200cf48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200c58c:	e037883a 	mov	sp,fp
 200c590:	dfc00117 	ldw	ra,4(sp)
 200c594:	df000017 	ldw	fp,0(sp)
 200c598:	dec00204 	addi	sp,sp,8
 200c59c:	f800283a 	ret

0200c5a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200c5a0:	defffc04 	addi	sp,sp,-16
 200c5a4:	dfc00315 	stw	ra,12(sp)
 200c5a8:	df000215 	stw	fp,8(sp)
 200c5ac:	df000204 	addi	fp,sp,8
 200c5b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c5b4:	e0bfff17 	ldw	r2,-4(fp)
 200c5b8:	10800017 	ldw	r2,0(r2)
 200c5bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200c5c0:	e0bffe17 	ldw	r2,-8(fp)
 200c5c4:	10c00a04 	addi	r3,r2,40
 200c5c8:	e0bfff17 	ldw	r2,-4(fp)
 200c5cc:	10800217 	ldw	r2,8(r2)
 200c5d0:	100b883a 	mov	r5,r2
 200c5d4:	1809883a 	mov	r4,r3
 200c5d8:	200cb340 	call	200cb34 <altera_avalon_jtag_uart_close>
}
 200c5dc:	e037883a 	mov	sp,fp
 200c5e0:	dfc00117 	ldw	ra,4(sp)
 200c5e4:	df000017 	ldw	fp,0(sp)
 200c5e8:	dec00204 	addi	sp,sp,8
 200c5ec:	f800283a 	ret

0200c5f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200c5f0:	defffa04 	addi	sp,sp,-24
 200c5f4:	dfc00515 	stw	ra,20(sp)
 200c5f8:	df000415 	stw	fp,16(sp)
 200c5fc:	df000404 	addi	fp,sp,16
 200c600:	e13ffd15 	stw	r4,-12(fp)
 200c604:	e17ffe15 	stw	r5,-8(fp)
 200c608:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200c60c:	e0bffd17 	ldw	r2,-12(fp)
 200c610:	10800017 	ldw	r2,0(r2)
 200c614:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200c618:	e0bffc17 	ldw	r2,-16(fp)
 200c61c:	10800a04 	addi	r2,r2,40
 200c620:	e1bfff17 	ldw	r6,-4(fp)
 200c624:	e17ffe17 	ldw	r5,-8(fp)
 200c628:	1009883a 	mov	r4,r2
 200c62c:	200cb9c0 	call	200cb9c <altera_avalon_jtag_uart_ioctl>
}
 200c630:	e037883a 	mov	sp,fp
 200c634:	dfc00117 	ldw	ra,4(sp)
 200c638:	df000017 	ldw	fp,0(sp)
 200c63c:	dec00204 	addi	sp,sp,8
 200c640:	f800283a 	ret

0200c644 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200c644:	defff104 	addi	sp,sp,-60
 200c648:	dfc00e15 	stw	ra,56(sp)
 200c64c:	df000d15 	stw	fp,52(sp)
 200c650:	df000d04 	addi	fp,sp,52
 200c654:	e13ff915 	stw	r4,-28(fp)
 200c658:	e17ffa15 	stw	r5,-24(fp)
 200c65c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 200c660:	e0bff917 	ldw	r2,-28(fp)
 200c664:	10800c04 	addi	r2,r2,48
 200c668:	e0bff415 	stw	r2,-48(fp)
 200c66c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 200c670:	e0bff80b 	ldhu	r2,-32(fp)
 200c674:	e0fff884 	addi	r3,fp,-30
 200c678:	180b883a 	mov	r5,r3
 200c67c:	1009883a 	mov	r4,r2
 200c680:	20065fc0 	call	20065fc <OSFlagCreate>
 200c684:	1007883a 	mov	r3,r2
 200c688:	e0bff417 	ldw	r2,-48(fp)
 200c68c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 200c690:	e0bff917 	ldw	r2,-28(fp)
 200c694:	10800a04 	addi	r2,r2,40
 200c698:	e0bff515 	stw	r2,-44(fp)
 200c69c:	00800044 	movi	r2,1
 200c6a0:	e0bff78d 	sth	r2,-34(fp)
 200c6a4:	e0bff78b 	ldhu	r2,-34(fp)
 200c6a8:	1009883a 	mov	r4,r2
 200c6ac:	2009de40 	call	2009de4 <OSSemCreate>
 200c6b0:	1007883a 	mov	r3,r2
 200c6b4:	e0bff517 	ldw	r2,-44(fp)
 200c6b8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 200c6bc:	e0bff917 	ldw	r2,-28(fp)
 200c6c0:	10800b04 	addi	r2,r2,44
 200c6c4:	e0bff615 	stw	r2,-40(fp)
 200c6c8:	00800044 	movi	r2,1
 200c6cc:	e0bff70d 	sth	r2,-36(fp)
 200c6d0:	e0bff70b 	ldhu	r2,-36(fp)
 200c6d4:	1009883a 	mov	r4,r2
 200c6d8:	2009de40 	call	2009de4 <OSSemCreate>
 200c6dc:	1007883a 	mov	r3,r2
 200c6e0:	e0bff617 	ldw	r2,-40(fp)
 200c6e4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c6e8:	e0bff917 	ldw	r2,-28(fp)
 200c6ec:	00c00044 	movi	r3,1
 200c6f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200c6f4:	e0bff917 	ldw	r2,-28(fp)
 200c6f8:	10800017 	ldw	r2,0(r2)
 200c6fc:	10800104 	addi	r2,r2,4
 200c700:	1007883a 	mov	r3,r2
 200c704:	e0bff917 	ldw	r2,-28(fp)
 200c708:	10800817 	ldw	r2,32(r2)
 200c70c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200c710:	e0bffa17 	ldw	r2,-24(fp)
 200c714:	e0fffb17 	ldw	r3,-20(fp)
 200c718:	d8000015 	stw	zero,0(sp)
 200c71c:	e1fff917 	ldw	r7,-28(fp)
 200c720:	01808074 	movhi	r6,513
 200c724:	31b1e304 	addi	r6,r6,-14452
 200c728:	180b883a 	mov	r5,r3
 200c72c:	1009883a 	mov	r4,r2
 200c730:	200d60c0 	call	200d60c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200c734:	e0bff917 	ldw	r2,-28(fp)
 200c738:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200c73c:	e0bff917 	ldw	r2,-28(fp)
 200c740:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200c744:	d0e71317 	ldw	r3,-25524(gp)
 200c748:	e1fff917 	ldw	r7,-28(fp)
 200c74c:	01808074 	movhi	r6,513
 200c750:	31b28c04 	addi	r6,r6,-13776
 200c754:	180b883a 	mov	r5,r3
 200c758:	1009883a 	mov	r4,r2
 200c75c:	200d3000 	call	200d300 <alt_alarm_start>
 200c760:	1000040e 	bge	r2,zero,200c774 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200c764:	e0fff917 	ldw	r3,-28(fp)
 200c768:	00a00034 	movhi	r2,32768
 200c76c:	10bfffc4 	addi	r2,r2,-1
 200c770:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200c774:	0001883a 	nop
 200c778:	e037883a 	mov	sp,fp
 200c77c:	dfc00117 	ldw	ra,4(sp)
 200c780:	df000017 	ldw	fp,0(sp)
 200c784:	dec00204 	addi	sp,sp,8
 200c788:	f800283a 	ret

0200c78c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200c78c:	defff204 	addi	sp,sp,-56
 200c790:	dfc00d15 	stw	ra,52(sp)
 200c794:	df000c15 	stw	fp,48(sp)
 200c798:	df000c04 	addi	fp,sp,48
 200c79c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200c7a0:	e0bfff17 	ldw	r2,-4(fp)
 200c7a4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 200c7a8:	e0bff617 	ldw	r2,-40(fp)
 200c7ac:	10800017 	ldw	r2,0(r2)
 200c7b0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c7b4:	e0bff717 	ldw	r2,-36(fp)
 200c7b8:	10800104 	addi	r2,r2,4
 200c7bc:	10800037 	ldwio	r2,0(r2)
 200c7c0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200c7c4:	e0bff817 	ldw	r2,-32(fp)
 200c7c8:	1080c00c 	andi	r2,r2,768
 200c7cc:	10009126 	beq	r2,zero,200ca14 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200c7d0:	e0bff817 	ldw	r2,-32(fp)
 200c7d4:	1080400c 	andi	r2,r2,256
 200c7d8:	10004726 	beq	r2,zero,200c8f8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200c7dc:	00800074 	movhi	r2,1
 200c7e0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c7e4:	e0bff617 	ldw	r2,-40(fp)
 200c7e8:	10800d17 	ldw	r2,52(r2)
 200c7ec:	10800044 	addi	r2,r2,1
 200c7f0:	1081ffcc 	andi	r2,r2,2047
 200c7f4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 200c7f8:	e0bff617 	ldw	r2,-40(fp)
 200c7fc:	10c00e17 	ldw	r3,56(r2)
 200c800:	e0bff917 	ldw	r2,-28(fp)
 200c804:	18802726 	beq	r3,r2,200c8a4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200c808:	e0bff717 	ldw	r2,-36(fp)
 200c80c:	10800037 	ldwio	r2,0(r2)
 200c810:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200c814:	e0bff417 	ldw	r2,-48(fp)
 200c818:	10a0000c 	andi	r2,r2,32768
 200c81c:	10002326 	beq	r2,zero,200c8ac <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200c820:	e0bff617 	ldw	r2,-40(fp)
 200c824:	10800d17 	ldw	r2,52(r2)
 200c828:	e0fff417 	ldw	r3,-48(fp)
 200c82c:	1809883a 	mov	r4,r3
 200c830:	e0fff617 	ldw	r3,-40(fp)
 200c834:	1885883a 	add	r2,r3,r2
 200c838:	10801104 	addi	r2,r2,68
 200c83c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c840:	e0bff617 	ldw	r2,-40(fp)
 200c844:	10800d17 	ldw	r2,52(r2)
 200c848:	10800044 	addi	r2,r2,1
 200c84c:	10c1ffcc 	andi	r3,r2,2047
 200c850:	e0bff617 	ldw	r2,-40(fp)
 200c854:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 200c858:	e0bff617 	ldw	r2,-40(fp)
 200c85c:	10800c17 	ldw	r2,48(r2)
 200c860:	e0bffb15 	stw	r2,-20(fp)
 200c864:	00800044 	movi	r2,1
 200c868:	e0bffc0d 	sth	r2,-16(fp)
 200c86c:	00800044 	movi	r2,1
 200c870:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200c874:	d0a6fe43 	ldbu	r2,-25607(gp)
 200c878:	10803fcc 	andi	r2,r2,255
 200c87c:	103fd926 	beq	r2,zero,200c7e4 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 200c880:	e0bffc0b 	ldhu	r2,-16(fp)
 200c884:	e0fffc83 	ldbu	r3,-14(fp)
 200c888:	e13ffdc4 	addi	r4,fp,-9
 200c88c:	200f883a 	mov	r7,r4
 200c890:	180d883a 	mov	r6,r3
 200c894:	100b883a 	mov	r5,r2
 200c898:	e13ffb17 	ldw	r4,-20(fp)
 200c89c:	20071d80 	call	20071d8 <OSFlagPost>
      }
 200c8a0:	003fd006 	br	200c7e4 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200c8a4:	0001883a 	nop
 200c8a8:	00000106 	br	200c8b0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200c8ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200c8b0:	e0bff417 	ldw	r2,-48(fp)
 200c8b4:	10bfffec 	andhi	r2,r2,65535
 200c8b8:	10000f26 	beq	r2,zero,200c8f8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c8bc:	e0bff617 	ldw	r2,-40(fp)
 200c8c0:	10c00817 	ldw	r3,32(r2)
 200c8c4:	00bfff84 	movi	r2,-2
 200c8c8:	1886703a 	and	r3,r3,r2
 200c8cc:	e0bff617 	ldw	r2,-40(fp)
 200c8d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200c8d4:	e0bff717 	ldw	r2,-36(fp)
 200c8d8:	10800104 	addi	r2,r2,4
 200c8dc:	1007883a 	mov	r3,r2
 200c8e0:	e0bff617 	ldw	r2,-40(fp)
 200c8e4:	10800817 	ldw	r2,32(r2)
 200c8e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c8ec:	e0bff717 	ldw	r2,-36(fp)
 200c8f0:	10800104 	addi	r2,r2,4
 200c8f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200c8f8:	e0bff817 	ldw	r2,-32(fp)
 200c8fc:	1080800c 	andi	r2,r2,512
 200c900:	103fac26 	beq	r2,zero,200c7b4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200c904:	e0bff817 	ldw	r2,-32(fp)
 200c908:	1004d43a 	srli	r2,r2,16
 200c90c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200c910:	00002606 	br	200c9ac <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200c914:	e0bff717 	ldw	r2,-36(fp)
 200c918:	e0fff617 	ldw	r3,-40(fp)
 200c91c:	18c01017 	ldw	r3,64(r3)
 200c920:	e13ff617 	ldw	r4,-40(fp)
 200c924:	20c7883a 	add	r3,r4,r3
 200c928:	18c21104 	addi	r3,r3,2116
 200c92c:	18c00003 	ldbu	r3,0(r3)
 200c930:	18c03fcc 	andi	r3,r3,255
 200c934:	18c0201c 	xori	r3,r3,128
 200c938:	18ffe004 	addi	r3,r3,-128
 200c93c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c940:	e0bff617 	ldw	r2,-40(fp)
 200c944:	10801017 	ldw	r2,64(r2)
 200c948:	10800044 	addi	r2,r2,1
 200c94c:	10c1ffcc 	andi	r3,r2,2047
 200c950:	e0bff617 	ldw	r2,-40(fp)
 200c954:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 200c958:	e0bff617 	ldw	r2,-40(fp)
 200c95c:	10800c17 	ldw	r2,48(r2)
 200c960:	e0bffa15 	stw	r2,-24(fp)
 200c964:	00800084 	movi	r2,2
 200c968:	e0bffd0d 	sth	r2,-12(fp)
 200c96c:	00800044 	movi	r2,1
 200c970:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200c974:	d0a6fe43 	ldbu	r2,-25607(gp)
 200c978:	10803fcc 	andi	r2,r2,255
 200c97c:	10000826 	beq	r2,zero,200c9a0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 200c980:	e0bffd0b 	ldhu	r2,-12(fp)
 200c984:	e0fffd83 	ldbu	r3,-10(fp)
 200c988:	e13ffe04 	addi	r4,fp,-8
 200c98c:	200f883a 	mov	r7,r4
 200c990:	180d883a 	mov	r6,r3
 200c994:	100b883a 	mov	r5,r2
 200c998:	e13ffa17 	ldw	r4,-24(fp)
 200c99c:	20071d80 	call	20071d8 <OSFlagPost>

        space--;
 200c9a0:	e0bff517 	ldw	r2,-44(fp)
 200c9a4:	10bfffc4 	addi	r2,r2,-1
 200c9a8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200c9ac:	e0bff517 	ldw	r2,-44(fp)
 200c9b0:	10000526 	beq	r2,zero,200c9c8 <altera_avalon_jtag_uart_irq+0x23c>
 200c9b4:	e0bff617 	ldw	r2,-40(fp)
 200c9b8:	10c01017 	ldw	r3,64(r2)
 200c9bc:	e0bff617 	ldw	r2,-40(fp)
 200c9c0:	10800f17 	ldw	r2,60(r2)
 200c9c4:	18bfd31e 	bne	r3,r2,200c914 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200c9c8:	e0bff517 	ldw	r2,-44(fp)
 200c9cc:	103f7926 	beq	r2,zero,200c7b4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200c9d0:	e0bff617 	ldw	r2,-40(fp)
 200c9d4:	10c00817 	ldw	r3,32(r2)
 200c9d8:	00bfff44 	movi	r2,-3
 200c9dc:	1886703a 	and	r3,r3,r2
 200c9e0:	e0bff617 	ldw	r2,-40(fp)
 200c9e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200c9e8:	e0bff617 	ldw	r2,-40(fp)
 200c9ec:	10800017 	ldw	r2,0(r2)
 200c9f0:	10800104 	addi	r2,r2,4
 200c9f4:	1007883a 	mov	r3,r2
 200c9f8:	e0bff617 	ldw	r2,-40(fp)
 200c9fc:	10800817 	ldw	r2,32(r2)
 200ca00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200ca04:	e0bff717 	ldw	r2,-36(fp)
 200ca08:	10800104 	addi	r2,r2,4
 200ca0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200ca10:	003f6806 	br	200c7b4 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200ca14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200ca18:	0001883a 	nop
 200ca1c:	e037883a 	mov	sp,fp
 200ca20:	dfc00117 	ldw	ra,4(sp)
 200ca24:	df000017 	ldw	fp,0(sp)
 200ca28:	dec00204 	addi	sp,sp,8
 200ca2c:	f800283a 	ret

0200ca30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200ca30:	defff904 	addi	sp,sp,-28
 200ca34:	dfc00615 	stw	ra,24(sp)
 200ca38:	df000515 	stw	fp,20(sp)
 200ca3c:	df000504 	addi	fp,sp,20
 200ca40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200ca44:	e0bfff17 	ldw	r2,-4(fp)
 200ca48:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200ca4c:	e0bffb17 	ldw	r2,-20(fp)
 200ca50:	10800017 	ldw	r2,0(r2)
 200ca54:	10800104 	addi	r2,r2,4
 200ca58:	10800037 	ldwio	r2,0(r2)
 200ca5c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200ca60:	e0bffc17 	ldw	r2,-16(fp)
 200ca64:	1081000c 	andi	r2,r2,1024
 200ca68:	10000b26 	beq	r2,zero,200ca98 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200ca6c:	e0bffb17 	ldw	r2,-20(fp)
 200ca70:	10800017 	ldw	r2,0(r2)
 200ca74:	10800104 	addi	r2,r2,4
 200ca78:	1007883a 	mov	r3,r2
 200ca7c:	e0bffb17 	ldw	r2,-20(fp)
 200ca80:	10800817 	ldw	r2,32(r2)
 200ca84:	10810014 	ori	r2,r2,1024
 200ca88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 200ca8c:	e0bffb17 	ldw	r2,-20(fp)
 200ca90:	10000915 	stw	zero,36(r2)
 200ca94:	00002106 	br	200cb1c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200ca98:	e0bffb17 	ldw	r2,-20(fp)
 200ca9c:	10c00917 	ldw	r3,36(r2)
 200caa0:	00a00034 	movhi	r2,32768
 200caa4:	10bfff04 	addi	r2,r2,-4
 200caa8:	10c01c36 	bltu	r2,r3,200cb1c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 200caac:	e0bffb17 	ldw	r2,-20(fp)
 200cab0:	10800917 	ldw	r2,36(r2)
 200cab4:	10c00044 	addi	r3,r2,1
 200cab8:	e0bffb17 	ldw	r2,-20(fp)
 200cabc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 200cac0:	e0bffb17 	ldw	r2,-20(fp)
 200cac4:	10c00917 	ldw	r3,36(r2)
 200cac8:	e0bffb17 	ldw	r2,-20(fp)
 200cacc:	10800117 	ldw	r2,4(r2)
 200cad0:	18801236 	bltu	r3,r2,200cb1c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 200cad4:	e0bffb17 	ldw	r2,-20(fp)
 200cad8:	10800c17 	ldw	r2,48(r2)
 200cadc:	e0bffd15 	stw	r2,-12(fp)
 200cae0:	00800104 	movi	r2,4
 200cae4:	e0bffe0d 	sth	r2,-8(fp)
 200cae8:	00800044 	movi	r2,1
 200caec:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200caf0:	d0a6fe43 	ldbu	r2,-25607(gp)
 200caf4:	10803fcc 	andi	r2,r2,255
 200caf8:	10000826 	beq	r2,zero,200cb1c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 200cafc:	e0bffe0b 	ldhu	r2,-8(fp)
 200cb00:	e0fffe83 	ldbu	r3,-6(fp)
 200cb04:	e13ffec4 	addi	r4,fp,-5
 200cb08:	200f883a 	mov	r7,r4
 200cb0c:	180d883a 	mov	r6,r3
 200cb10:	100b883a 	mov	r5,r2
 200cb14:	e13ffd17 	ldw	r4,-12(fp)
 200cb18:	20071d80 	call	20071d8 <OSFlagPost>
 200cb1c:	d0a71317 	ldw	r2,-25524(gp)
    }
  }

  return alt_ticks_per_second();
}
 200cb20:	e037883a 	mov	sp,fp
 200cb24:	dfc00117 	ldw	ra,4(sp)
 200cb28:	df000017 	ldw	fp,0(sp)
 200cb2c:	dec00204 	addi	sp,sp,8
 200cb30:	f800283a 	ret

0200cb34 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200cb34:	defffd04 	addi	sp,sp,-12
 200cb38:	df000215 	stw	fp,8(sp)
 200cb3c:	df000204 	addi	fp,sp,8
 200cb40:	e13ffe15 	stw	r4,-8(fp)
 200cb44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200cb48:	00000506 	br	200cb60 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200cb4c:	e0bfff17 	ldw	r2,-4(fp)
 200cb50:	1090000c 	andi	r2,r2,16384
 200cb54:	10000226 	beq	r2,zero,200cb60 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200cb58:	00bffd44 	movi	r2,-11
 200cb5c:	00000b06 	br	200cb8c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200cb60:	e0bffe17 	ldw	r2,-8(fp)
 200cb64:	10c01017 	ldw	r3,64(r2)
 200cb68:	e0bffe17 	ldw	r2,-8(fp)
 200cb6c:	10800f17 	ldw	r2,60(r2)
 200cb70:	18800526 	beq	r3,r2,200cb88 <altera_avalon_jtag_uart_close+0x54>
 200cb74:	e0bffe17 	ldw	r2,-8(fp)
 200cb78:	10c00917 	ldw	r3,36(r2)
 200cb7c:	e0bffe17 	ldw	r2,-8(fp)
 200cb80:	10800117 	ldw	r2,4(r2)
 200cb84:	18bff136 	bltu	r3,r2,200cb4c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200cb88:	0005883a 	mov	r2,zero
}
 200cb8c:	e037883a 	mov	sp,fp
 200cb90:	df000017 	ldw	fp,0(sp)
 200cb94:	dec00104 	addi	sp,sp,4
 200cb98:	f800283a 	ret

0200cb9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200cb9c:	defffa04 	addi	sp,sp,-24
 200cba0:	df000515 	stw	fp,20(sp)
 200cba4:	df000504 	addi	fp,sp,20
 200cba8:	e13ffd15 	stw	r4,-12(fp)
 200cbac:	e17ffe15 	stw	r5,-8(fp)
 200cbb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200cbb4:	00bff9c4 	movi	r2,-25
 200cbb8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200cbbc:	e0bffe17 	ldw	r2,-8(fp)
 200cbc0:	10da8060 	cmpeqi	r3,r2,27137
 200cbc4:	1800031e 	bne	r3,zero,200cbd4 <altera_avalon_jtag_uart_ioctl+0x38>
 200cbc8:	109a80a0 	cmpeqi	r2,r2,27138
 200cbcc:	1000181e 	bne	r2,zero,200cc30 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 200cbd0:	00002906 	br	200cc78 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200cbd4:	e0bffd17 	ldw	r2,-12(fp)
 200cbd8:	10c00117 	ldw	r3,4(r2)
 200cbdc:	00a00034 	movhi	r2,32768
 200cbe0:	10bfffc4 	addi	r2,r2,-1
 200cbe4:	18802126 	beq	r3,r2,200cc6c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 200cbe8:	e0bfff17 	ldw	r2,-4(fp)
 200cbec:	10800017 	ldw	r2,0(r2)
 200cbf0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200cbf4:	e0bffc17 	ldw	r2,-16(fp)
 200cbf8:	10800090 	cmplti	r2,r2,2
 200cbfc:	1000061e 	bne	r2,zero,200cc18 <altera_avalon_jtag_uart_ioctl+0x7c>
 200cc00:	e0fffc17 	ldw	r3,-16(fp)
 200cc04:	00a00034 	movhi	r2,32768
 200cc08:	10bfffc4 	addi	r2,r2,-1
 200cc0c:	18800226 	beq	r3,r2,200cc18 <altera_avalon_jtag_uart_ioctl+0x7c>
 200cc10:	e0bffc17 	ldw	r2,-16(fp)
 200cc14:	00000206 	br	200cc20 <altera_avalon_jtag_uart_ioctl+0x84>
 200cc18:	00a00034 	movhi	r2,32768
 200cc1c:	10bfff84 	addi	r2,r2,-2
 200cc20:	e0fffd17 	ldw	r3,-12(fp)
 200cc24:	18800115 	stw	r2,4(r3)
      rc = 0;
 200cc28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200cc2c:	00000f06 	br	200cc6c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200cc30:	e0bffd17 	ldw	r2,-12(fp)
 200cc34:	10c00117 	ldw	r3,4(r2)
 200cc38:	00a00034 	movhi	r2,32768
 200cc3c:	10bfffc4 	addi	r2,r2,-1
 200cc40:	18800c26 	beq	r3,r2,200cc74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200cc44:	e0bffd17 	ldw	r2,-12(fp)
 200cc48:	10c00917 	ldw	r3,36(r2)
 200cc4c:	e0bffd17 	ldw	r2,-12(fp)
 200cc50:	10800117 	ldw	r2,4(r2)
 200cc54:	1885803a 	cmpltu	r2,r3,r2
 200cc58:	10c03fcc 	andi	r3,r2,255
 200cc5c:	e0bfff17 	ldw	r2,-4(fp)
 200cc60:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200cc64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200cc68:	00000206 	br	200cc74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200cc6c:	0001883a 	nop
 200cc70:	00000106 	br	200cc78 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200cc74:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200cc78:	e0bffb17 	ldw	r2,-20(fp)
}
 200cc7c:	e037883a 	mov	sp,fp
 200cc80:	df000017 	ldw	fp,0(sp)
 200cc84:	dec00104 	addi	sp,sp,4
 200cc88:	f800283a 	ret

0200cc8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200cc8c:	deffed04 	addi	sp,sp,-76
 200cc90:	dfc01215 	stw	ra,72(sp)
 200cc94:	df001115 	stw	fp,68(sp)
 200cc98:	df001104 	addi	fp,sp,68
 200cc9c:	e13ffc15 	stw	r4,-16(fp)
 200cca0:	e17ffd15 	stw	r5,-12(fp)
 200cca4:	e1bffe15 	stw	r6,-8(fp)
 200cca8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200ccac:	e0bffd17 	ldw	r2,-12(fp)
 200ccb0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 200ccb4:	e0bffc17 	ldw	r2,-16(fp)
 200ccb8:	10800a17 	ldw	r2,40(r2)
 200ccbc:	e0bff815 	stw	r2,-32(fp)
 200ccc0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 200ccc4:	e0bff90b 	ldhu	r2,-28(fp)
 200ccc8:	e0fffb04 	addi	r3,fp,-20
 200cccc:	180d883a 	mov	r6,r3
 200ccd0:	100b883a 	mov	r5,r2
 200ccd4:	e13ff817 	ldw	r4,-32(fp)
 200ccd8:	200a0fc0 	call	200a0fc <OSSemPend>

  while (space > 0)
 200ccdc:	00006106 	br	200ce64 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200cce0:	e0bffc17 	ldw	r2,-16(fp)
 200cce4:	10800d17 	ldw	r2,52(r2)
 200cce8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 200ccec:	e0bffc17 	ldw	r2,-16(fp)
 200ccf0:	10800e17 	ldw	r2,56(r2)
 200ccf4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 200ccf8:	e0fff317 	ldw	r3,-52(fp)
 200ccfc:	e0bff417 	ldw	r2,-48(fp)
 200cd00:	18800536 	bltu	r3,r2,200cd18 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 200cd04:	e0fff317 	ldw	r3,-52(fp)
 200cd08:	e0bff417 	ldw	r2,-48(fp)
 200cd0c:	1885c83a 	sub	r2,r3,r2
 200cd10:	e0bff115 	stw	r2,-60(fp)
 200cd14:	00000406 	br	200cd28 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200cd18:	00c20004 	movi	r3,2048
 200cd1c:	e0bff417 	ldw	r2,-48(fp)
 200cd20:	1885c83a 	sub	r2,r3,r2
 200cd24:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 200cd28:	e0bff117 	ldw	r2,-60(fp)
 200cd2c:	10001e26 	beq	r2,zero,200cda8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 200cd30:	e0fffe17 	ldw	r3,-8(fp)
 200cd34:	e0bff117 	ldw	r2,-60(fp)
 200cd38:	1880022e 	bgeu	r3,r2,200cd44 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 200cd3c:	e0bffe17 	ldw	r2,-8(fp)
 200cd40:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200cd44:	e0bffc17 	ldw	r2,-16(fp)
 200cd48:	10c01104 	addi	r3,r2,68
 200cd4c:	e0bff417 	ldw	r2,-48(fp)
 200cd50:	1885883a 	add	r2,r3,r2
 200cd54:	e1bff117 	ldw	r6,-60(fp)
 200cd58:	100b883a 	mov	r5,r2
 200cd5c:	e13ff017 	ldw	r4,-64(fp)
 200cd60:	2001b040 	call	2001b04 <memcpy>
      ptr   += n;
 200cd64:	e0fff017 	ldw	r3,-64(fp)
 200cd68:	e0bff117 	ldw	r2,-60(fp)
 200cd6c:	1885883a 	add	r2,r3,r2
 200cd70:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 200cd74:	e0fffe17 	ldw	r3,-8(fp)
 200cd78:	e0bff117 	ldw	r2,-60(fp)
 200cd7c:	1885c83a 	sub	r2,r3,r2
 200cd80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200cd84:	e0fff417 	ldw	r3,-48(fp)
 200cd88:	e0bff117 	ldw	r2,-60(fp)
 200cd8c:	1885883a 	add	r2,r3,r2
 200cd90:	10c1ffcc 	andi	r3,r2,2047
 200cd94:	e0bffc17 	ldw	r2,-16(fp)
 200cd98:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 200cd9c:	e0bffe17 	ldw	r2,-8(fp)
 200cda0:	00bfcf16 	blt	zero,r2,200cce0 <altera_avalon_jtag_uart_read+0x54>
 200cda4:	00000106 	br	200cdac <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200cda8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200cdac:	e0fff017 	ldw	r3,-64(fp)
 200cdb0:	e0bffd17 	ldw	r2,-12(fp)
 200cdb4:	18802e1e 	bne	r3,r2,200ce70 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200cdb8:	e0bfff17 	ldw	r2,-4(fp)
 200cdbc:	1090000c 	andi	r2,r2,16384
 200cdc0:	10002d1e 	bne	r2,zero,200ce78 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 200cdc4:	d0a6fe43 	ldbu	r2,-25607(gp)
 200cdc8:	10803fcc 	andi	r2,r2,255
 200cdcc:	10800058 	cmpnei	r2,r2,1
 200cdd0:	1000161e 	bne	r2,zero,200ce2c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 200cdd4:	e0bffc17 	ldw	r2,-16(fp)
 200cdd8:	10800c17 	ldw	r2,48(r2)
 200cddc:	e0bff215 	stw	r2,-56(fp)
 200cde0:	00800144 	movi	r2,5
 200cde4:	e0bff98d 	sth	r2,-26(fp)
 200cde8:	00bfe0c4 	movi	r2,-125
 200cdec:	e0bffa05 	stb	r2,-24(fp)
 200cdf0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 200cdf4:	d0a6fe43 	ldbu	r2,-25607(gp)
 200cdf8:	10803fcc 	andi	r2,r2,255
 200cdfc:	10001526 	beq	r2,zero,200ce54 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 200ce00:	e0fff98b 	ldhu	r3,-26(fp)
 200ce04:	e13ffa03 	ldbu	r4,-24(fp)
 200ce08:	e17ffa8b 	ldhu	r5,-22(fp)
 200ce0c:	e0bffb44 	addi	r2,fp,-19
 200ce10:	d8800015 	stw	r2,0(sp)
 200ce14:	280f883a 	mov	r7,r5
 200ce18:	200d883a 	mov	r6,r4
 200ce1c:	180b883a 	mov	r5,r3
 200ce20:	e13ff217 	ldw	r4,-56(fp)
 200ce24:	2006bc00 	call	2006bc0 <OSFlagPend>
 200ce28:	00000a06 	br	200ce54 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200ce2c:	0001883a 	nop
 200ce30:	e0bffc17 	ldw	r2,-16(fp)
 200ce34:	10c00d17 	ldw	r3,52(r2)
 200ce38:	e0bff317 	ldw	r2,-52(fp)
 200ce3c:	1880051e 	bne	r3,r2,200ce54 <altera_avalon_jtag_uart_read+0x1c8>
 200ce40:	e0bffc17 	ldw	r2,-16(fp)
 200ce44:	10c00917 	ldw	r3,36(r2)
 200ce48:	e0bffc17 	ldw	r2,-16(fp)
 200ce4c:	10800117 	ldw	r2,4(r2)
 200ce50:	18bff736 	bltu	r3,r2,200ce30 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200ce54:	e0bffc17 	ldw	r2,-16(fp)
 200ce58:	10c00d17 	ldw	r3,52(r2)
 200ce5c:	e0bff317 	ldw	r2,-52(fp)
 200ce60:	18800726 	beq	r3,r2,200ce80 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200ce64:	e0bffe17 	ldw	r2,-8(fp)
 200ce68:	00bf9d16 	blt	zero,r2,200cce0 <altera_avalon_jtag_uart_read+0x54>
 200ce6c:	00000506 	br	200ce84 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200ce70:	0001883a 	nop
 200ce74:	00000306 	br	200ce84 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200ce78:	0001883a 	nop
 200ce7c:	00000106 	br	200ce84 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200ce80:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 200ce84:	e0bffc17 	ldw	r2,-16(fp)
 200ce88:	10800a17 	ldw	r2,40(r2)
 200ce8c:	1009883a 	mov	r4,r2
 200ce90:	200a4740 	call	200a474 <OSSemPost>

  if (ptr != buffer)
 200ce94:	e0fff017 	ldw	r3,-64(fp)
 200ce98:	e0bffd17 	ldw	r2,-12(fp)
 200ce9c:	18801826 	beq	r3,r2,200cf00 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200cea0:	0005303a 	rdctl	r2,status
 200cea4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200cea8:	e0fff717 	ldw	r3,-36(fp)
 200ceac:	00bfff84 	movi	r2,-2
 200ceb0:	1884703a 	and	r2,r3,r2
 200ceb4:	1001703a 	wrctl	status,r2
  
  return context;
 200ceb8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200cebc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200cec0:	e0bffc17 	ldw	r2,-16(fp)
 200cec4:	10800817 	ldw	r2,32(r2)
 200cec8:	10c00054 	ori	r3,r2,1
 200cecc:	e0bffc17 	ldw	r2,-16(fp)
 200ced0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ced4:	e0bffc17 	ldw	r2,-16(fp)
 200ced8:	10800017 	ldw	r2,0(r2)
 200cedc:	10800104 	addi	r2,r2,4
 200cee0:	1007883a 	mov	r3,r2
 200cee4:	e0bffc17 	ldw	r2,-16(fp)
 200cee8:	10800817 	ldw	r2,32(r2)
 200ceec:	18800035 	stwio	r2,0(r3)
 200cef0:	e0bff617 	ldw	r2,-40(fp)
 200cef4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200cef8:	e0bff517 	ldw	r2,-44(fp)
 200cefc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200cf00:	e0fff017 	ldw	r3,-64(fp)
 200cf04:	e0bffd17 	ldw	r2,-12(fp)
 200cf08:	18800426 	beq	r3,r2,200cf1c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 200cf0c:	e0fff017 	ldw	r3,-64(fp)
 200cf10:	e0bffd17 	ldw	r2,-12(fp)
 200cf14:	1885c83a 	sub	r2,r3,r2
 200cf18:	00000606 	br	200cf34 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 200cf1c:	e0bfff17 	ldw	r2,-4(fp)
 200cf20:	1090000c 	andi	r2,r2,16384
 200cf24:	10000226 	beq	r2,zero,200cf30 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 200cf28:	00bffd44 	movi	r2,-11
 200cf2c:	00000106 	br	200cf34 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 200cf30:	00bffec4 	movi	r2,-5
}
 200cf34:	e037883a 	mov	sp,fp
 200cf38:	dfc00117 	ldw	ra,4(sp)
 200cf3c:	df000017 	ldw	fp,0(sp)
 200cf40:	dec00204 	addi	sp,sp,8
 200cf44:	f800283a 	ret

0200cf48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200cf48:	deffed04 	addi	sp,sp,-76
 200cf4c:	dfc01215 	stw	ra,72(sp)
 200cf50:	df001115 	stw	fp,68(sp)
 200cf54:	df001104 	addi	fp,sp,68
 200cf58:	e13ffc15 	stw	r4,-16(fp)
 200cf5c:	e17ffd15 	stw	r5,-12(fp)
 200cf60:	e1bffe15 	stw	r6,-8(fp)
 200cf64:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200cf68:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200cf6c:	e0bffd17 	ldw	r2,-12(fp)
 200cf70:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 200cf74:	e0bffc17 	ldw	r2,-16(fp)
 200cf78:	10800b17 	ldw	r2,44(r2)
 200cf7c:	e0bff815 	stw	r2,-32(fp)
 200cf80:	e03ff90d 	sth	zero,-28(fp)
 200cf84:	e0bff90b 	ldhu	r2,-28(fp)
 200cf88:	e0fffb44 	addi	r3,fp,-19
 200cf8c:	180d883a 	mov	r6,r3
 200cf90:	100b883a 	mov	r5,r2
 200cf94:	e13ff817 	ldw	r4,-32(fp)
 200cf98:	200a0fc0 	call	200a0fc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200cf9c:	00003706 	br	200d07c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200cfa0:	e0bffc17 	ldw	r2,-16(fp)
 200cfa4:	10800f17 	ldw	r2,60(r2)
 200cfa8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 200cfac:	e0bffc17 	ldw	r2,-16(fp)
 200cfb0:	10801017 	ldw	r2,64(r2)
 200cfb4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 200cfb8:	e0fff417 	ldw	r3,-48(fp)
 200cfbc:	e0bff017 	ldw	r2,-64(fp)
 200cfc0:	1880062e 	bgeu	r3,r2,200cfdc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 200cfc4:	e0fff017 	ldw	r3,-64(fp)
 200cfc8:	e0bff417 	ldw	r2,-48(fp)
 200cfcc:	1885c83a 	sub	r2,r3,r2
 200cfd0:	10bfffc4 	addi	r2,r2,-1
 200cfd4:	e0bff115 	stw	r2,-60(fp)
 200cfd8:	00000b06 	br	200d008 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 200cfdc:	e0bff017 	ldw	r2,-64(fp)
 200cfe0:	10000526 	beq	r2,zero,200cff8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200cfe4:	00c20004 	movi	r3,2048
 200cfe8:	e0bff417 	ldw	r2,-48(fp)
 200cfec:	1885c83a 	sub	r2,r3,r2
 200cff0:	e0bff115 	stw	r2,-60(fp)
 200cff4:	00000406 	br	200d008 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200cff8:	00c1ffc4 	movi	r3,2047
 200cffc:	e0bff417 	ldw	r2,-48(fp)
 200d000:	1885c83a 	sub	r2,r3,r2
 200d004:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 200d008:	e0bff117 	ldw	r2,-60(fp)
 200d00c:	10001e26 	beq	r2,zero,200d088 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 200d010:	e0fffe17 	ldw	r3,-8(fp)
 200d014:	e0bff117 	ldw	r2,-60(fp)
 200d018:	1880022e 	bgeu	r3,r2,200d024 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 200d01c:	e0bffe17 	ldw	r2,-8(fp)
 200d020:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200d024:	e0bffc17 	ldw	r2,-16(fp)
 200d028:	10c21104 	addi	r3,r2,2116
 200d02c:	e0bff417 	ldw	r2,-48(fp)
 200d030:	1885883a 	add	r2,r3,r2
 200d034:	e1bff117 	ldw	r6,-60(fp)
 200d038:	e17ffd17 	ldw	r5,-12(fp)
 200d03c:	1009883a 	mov	r4,r2
 200d040:	2001b040 	call	2001b04 <memcpy>
      ptr   += n;
 200d044:	e0fffd17 	ldw	r3,-12(fp)
 200d048:	e0bff117 	ldw	r2,-60(fp)
 200d04c:	1885883a 	add	r2,r3,r2
 200d050:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200d054:	e0fffe17 	ldw	r3,-8(fp)
 200d058:	e0bff117 	ldw	r2,-60(fp)
 200d05c:	1885c83a 	sub	r2,r3,r2
 200d060:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200d064:	e0fff417 	ldw	r3,-48(fp)
 200d068:	e0bff117 	ldw	r2,-60(fp)
 200d06c:	1885883a 	add	r2,r3,r2
 200d070:	10c1ffcc 	andi	r3,r2,2047
 200d074:	e0bffc17 	ldw	r2,-16(fp)
 200d078:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200d07c:	e0bffe17 	ldw	r2,-8(fp)
 200d080:	00bfc716 	blt	zero,r2,200cfa0 <altera_avalon_jtag_uart_write+0x58>
 200d084:	00000106 	br	200d08c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200d088:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d08c:	0005303a 	rdctl	r2,status
 200d090:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d094:	e0fff717 	ldw	r3,-36(fp)
 200d098:	00bfff84 	movi	r2,-2
 200d09c:	1884703a 	and	r2,r3,r2
 200d0a0:	1001703a 	wrctl	status,r2
  
  return context;
 200d0a4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200d0a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200d0ac:	e0bffc17 	ldw	r2,-16(fp)
 200d0b0:	10800817 	ldw	r2,32(r2)
 200d0b4:	10c00094 	ori	r3,r2,2
 200d0b8:	e0bffc17 	ldw	r2,-16(fp)
 200d0bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200d0c0:	e0bffc17 	ldw	r2,-16(fp)
 200d0c4:	10800017 	ldw	r2,0(r2)
 200d0c8:	10800104 	addi	r2,r2,4
 200d0cc:	1007883a 	mov	r3,r2
 200d0d0:	e0bffc17 	ldw	r2,-16(fp)
 200d0d4:	10800817 	ldw	r2,32(r2)
 200d0d8:	18800035 	stwio	r2,0(r3)
 200d0dc:	e0bff617 	ldw	r2,-40(fp)
 200d0e0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d0e4:	e0bff317 	ldw	r2,-52(fp)
 200d0e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200d0ec:	e0bffe17 	ldw	r2,-8(fp)
 200d0f0:	00802a0e 	bge	zero,r2,200d19c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 200d0f4:	e0bfff17 	ldw	r2,-4(fp)
 200d0f8:	1090000c 	andi	r2,r2,16384
 200d0fc:	10002a1e 	bne	r2,zero,200d1a8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 200d100:	d0a6fe43 	ldbu	r2,-25607(gp)
 200d104:	10803fcc 	andi	r2,r2,255
 200d108:	10800058 	cmpnei	r2,r2,1
 200d10c:	1000161e 	bne	r2,zero,200d168 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 200d110:	e0bffc17 	ldw	r2,-16(fp)
 200d114:	10800c17 	ldw	r2,48(r2)
 200d118:	e0bff515 	stw	r2,-44(fp)
 200d11c:	00800184 	movi	r2,6
 200d120:	e0bff98d 	sth	r2,-26(fp)
 200d124:	00bfe0c4 	movi	r2,-125
 200d128:	e0bffa05 	stb	r2,-24(fp)
 200d12c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 200d130:	d0a6fe43 	ldbu	r2,-25607(gp)
 200d134:	10803fcc 	andi	r2,r2,255
 200d138:	10001526 	beq	r2,zero,200d190 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 200d13c:	e0fff98b 	ldhu	r3,-26(fp)
 200d140:	e13ffa03 	ldbu	r4,-24(fp)
 200d144:	e17ffa8b 	ldhu	r5,-22(fp)
 200d148:	e0bffb04 	addi	r2,fp,-20
 200d14c:	d8800015 	stw	r2,0(sp)
 200d150:	280f883a 	mov	r7,r5
 200d154:	200d883a 	mov	r6,r4
 200d158:	180b883a 	mov	r5,r3
 200d15c:	e13ff517 	ldw	r4,-44(fp)
 200d160:	2006bc00 	call	2006bc0 <OSFlagPend>
 200d164:	00000a06 	br	200d190 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200d168:	0001883a 	nop
 200d16c:	e0bffc17 	ldw	r2,-16(fp)
 200d170:	10c01017 	ldw	r3,64(r2)
 200d174:	e0bff017 	ldw	r2,-64(fp)
 200d178:	1880051e 	bne	r3,r2,200d190 <altera_avalon_jtag_uart_write+0x248>
 200d17c:	e0bffc17 	ldw	r2,-16(fp)
 200d180:	10c00917 	ldw	r3,36(r2)
 200d184:	e0bffc17 	ldw	r2,-16(fp)
 200d188:	10800117 	ldw	r2,4(r2)
 200d18c:	18bff736 	bltu	r3,r2,200d16c <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 200d190:	e0bffc17 	ldw	r2,-16(fp)
 200d194:	10800917 	ldw	r2,36(r2)
 200d198:	1000051e 	bne	r2,zero,200d1b0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 200d19c:	e0bffe17 	ldw	r2,-8(fp)
 200d1a0:	00bfb616 	blt	zero,r2,200d07c <altera_avalon_jtag_uart_write+0x134>
 200d1a4:	00000306 	br	200d1b4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200d1a8:	0001883a 	nop
 200d1ac:	00000106 	br	200d1b4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 200d1b0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 200d1b4:	e0bffc17 	ldw	r2,-16(fp)
 200d1b8:	10800b17 	ldw	r2,44(r2)
 200d1bc:	1009883a 	mov	r4,r2
 200d1c0:	200a4740 	call	200a474 <OSSemPost>

  if (ptr != start)
 200d1c4:	e0fffd17 	ldw	r3,-12(fp)
 200d1c8:	e0bff217 	ldw	r2,-56(fp)
 200d1cc:	18800426 	beq	r3,r2,200d1e0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 200d1d0:	e0fffd17 	ldw	r3,-12(fp)
 200d1d4:	e0bff217 	ldw	r2,-56(fp)
 200d1d8:	1885c83a 	sub	r2,r3,r2
 200d1dc:	00000606 	br	200d1f8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 200d1e0:	e0bfff17 	ldw	r2,-4(fp)
 200d1e4:	1090000c 	andi	r2,r2,16384
 200d1e8:	10000226 	beq	r2,zero,200d1f4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 200d1ec:	00bffd44 	movi	r2,-11
 200d1f0:	00000106 	br	200d1f8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200d1f4:	00bffec4 	movi	r2,-5
}
 200d1f8:	e037883a 	mov	sp,fp
 200d1fc:	dfc00117 	ldw	ra,4(sp)
 200d200:	df000017 	ldw	fp,0(sp)
 200d204:	dec00204 	addi	sp,sp,8
 200d208:	f800283a 	ret

0200d20c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200d20c:	defffa04 	addi	sp,sp,-24
 200d210:	dfc00515 	stw	ra,20(sp)
 200d214:	df000415 	stw	fp,16(sp)
 200d218:	df000404 	addi	fp,sp,16
 200d21c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200d220:	0007883a 	mov	r3,zero
 200d224:	e0bfff17 	ldw	r2,-4(fp)
 200d228:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200d22c:	e0bfff17 	ldw	r2,-4(fp)
 200d230:	10800104 	addi	r2,r2,4
 200d234:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d238:	0005303a 	rdctl	r2,status
 200d23c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d240:	e0fffd17 	ldw	r3,-12(fp)
 200d244:	00bfff84 	movi	r2,-2
 200d248:	1884703a 	and	r2,r3,r2
 200d24c:	1001703a 	wrctl	status,r2
  
  return context;
 200d250:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200d254:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 200d258:	200dd2c0 	call	200dd2c <alt_tick>
 200d25c:	e0bffc17 	ldw	r2,-16(fp)
 200d260:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d264:	e0bffe17 	ldw	r2,-8(fp)
 200d268:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200d26c:	0001883a 	nop
 200d270:	e037883a 	mov	sp,fp
 200d274:	dfc00117 	ldw	ra,4(sp)
 200d278:	df000017 	ldw	fp,0(sp)
 200d27c:	dec00204 	addi	sp,sp,8
 200d280:	f800283a 	ret

0200d284 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200d284:	defff804 	addi	sp,sp,-32
 200d288:	dfc00715 	stw	ra,28(sp)
 200d28c:	df000615 	stw	fp,24(sp)
 200d290:	df000604 	addi	fp,sp,24
 200d294:	e13ffc15 	stw	r4,-16(fp)
 200d298:	e17ffd15 	stw	r5,-12(fp)
 200d29c:	e1bffe15 	stw	r6,-8(fp)
 200d2a0:	e1ffff15 	stw	r7,-4(fp)
 200d2a4:	e0bfff17 	ldw	r2,-4(fp)
 200d2a8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200d2ac:	d0a71317 	ldw	r2,-25524(gp)
 200d2b0:	1000021e 	bne	r2,zero,200d2bc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 200d2b4:	e0bffb17 	ldw	r2,-20(fp)
 200d2b8:	d0a71315 	stw	r2,-25524(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200d2bc:	e0bffc17 	ldw	r2,-16(fp)
 200d2c0:	10800104 	addi	r2,r2,4
 200d2c4:	00c001c4 	movi	r3,7
 200d2c8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200d2cc:	d8000015 	stw	zero,0(sp)
 200d2d0:	e1fffc17 	ldw	r7,-16(fp)
 200d2d4:	01808074 	movhi	r6,513
 200d2d8:	31b48304 	addi	r6,r6,-11764
 200d2dc:	e17ffe17 	ldw	r5,-8(fp)
 200d2e0:	e13ffd17 	ldw	r4,-12(fp)
 200d2e4:	200d60c0 	call	200d60c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200d2e8:	0001883a 	nop
 200d2ec:	e037883a 	mov	sp,fp
 200d2f0:	dfc00117 	ldw	ra,4(sp)
 200d2f4:	df000017 	ldw	fp,0(sp)
 200d2f8:	dec00204 	addi	sp,sp,8
 200d2fc:	f800283a 	ret

0200d300 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200d300:	defff504 	addi	sp,sp,-44
 200d304:	df000a15 	stw	fp,40(sp)
 200d308:	df000a04 	addi	fp,sp,40
 200d30c:	e13ffc15 	stw	r4,-16(fp)
 200d310:	e17ffd15 	stw	r5,-12(fp)
 200d314:	e1bffe15 	stw	r6,-8(fp)
 200d318:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200d31c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200d320:	d0a71317 	ldw	r2,-25524(gp)
  
  if (alt_ticks_per_second ())
 200d324:	10003c26 	beq	r2,zero,200d418 <alt_alarm_start+0x118>
  {
    if (alarm)
 200d328:	e0bffc17 	ldw	r2,-16(fp)
 200d32c:	10003826 	beq	r2,zero,200d410 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 200d330:	e0bffc17 	ldw	r2,-16(fp)
 200d334:	e0fffe17 	ldw	r3,-8(fp)
 200d338:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 200d33c:	e0bffc17 	ldw	r2,-16(fp)
 200d340:	e0ffff17 	ldw	r3,-4(fp)
 200d344:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d348:	0005303a 	rdctl	r2,status
 200d34c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d350:	e0fff917 	ldw	r3,-28(fp)
 200d354:	00bfff84 	movi	r2,-2
 200d358:	1884703a 	and	r2,r3,r2
 200d35c:	1001703a 	wrctl	status,r2
  
  return context;
 200d360:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 200d364:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200d368:	d0a71417 	ldw	r2,-25520(gp)
      
      current_nticks = alt_nticks();
 200d36c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200d370:	e0fffd17 	ldw	r3,-12(fp)
 200d374:	e0bff617 	ldw	r2,-40(fp)
 200d378:	1885883a 	add	r2,r3,r2
 200d37c:	10c00044 	addi	r3,r2,1
 200d380:	e0bffc17 	ldw	r2,-16(fp)
 200d384:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200d388:	e0bffc17 	ldw	r2,-16(fp)
 200d38c:	10c00217 	ldw	r3,8(r2)
 200d390:	e0bff617 	ldw	r2,-40(fp)
 200d394:	1880042e 	bgeu	r3,r2,200d3a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 200d398:	e0bffc17 	ldw	r2,-16(fp)
 200d39c:	00c00044 	movi	r3,1
 200d3a0:	10c00405 	stb	r3,16(r2)
 200d3a4:	00000206 	br	200d3b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 200d3a8:	e0bffc17 	ldw	r2,-16(fp)
 200d3ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200d3b0:	e0bffc17 	ldw	r2,-16(fp)
 200d3b4:	d0e02b04 	addi	r3,gp,-32596
 200d3b8:	e0fffa15 	stw	r3,-24(fp)
 200d3bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200d3c0:	e0bffb17 	ldw	r2,-20(fp)
 200d3c4:	e0fffa17 	ldw	r3,-24(fp)
 200d3c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200d3cc:	e0bffa17 	ldw	r2,-24(fp)
 200d3d0:	10c00017 	ldw	r3,0(r2)
 200d3d4:	e0bffb17 	ldw	r2,-20(fp)
 200d3d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200d3dc:	e0bffa17 	ldw	r2,-24(fp)
 200d3e0:	10800017 	ldw	r2,0(r2)
 200d3e4:	e0fffb17 	ldw	r3,-20(fp)
 200d3e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200d3ec:	e0bffa17 	ldw	r2,-24(fp)
 200d3f0:	e0fffb17 	ldw	r3,-20(fp)
 200d3f4:	10c00015 	stw	r3,0(r2)
 200d3f8:	e0bff817 	ldw	r2,-32(fp)
 200d3fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d400:	e0bff717 	ldw	r2,-36(fp)
 200d404:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200d408:	0005883a 	mov	r2,zero
 200d40c:	00000306 	br	200d41c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 200d410:	00bffa84 	movi	r2,-22
 200d414:	00000106 	br	200d41c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 200d418:	00bfde84 	movi	r2,-134
  }
}
 200d41c:	e037883a 	mov	sp,fp
 200d420:	df000017 	ldw	fp,0(sp)
 200d424:	dec00104 	addi	sp,sp,4
 200d428:	f800283a 	ret

0200d42c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200d42c:	deffff04 	addi	sp,sp,-4
 200d430:	df000015 	stw	fp,0(sp)
 200d434:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200d438:	0001883a 	nop
 200d43c:	e037883a 	mov	sp,fp
 200d440:	df000017 	ldw	fp,0(sp)
 200d444:	dec00104 	addi	sp,sp,4
 200d448:	f800283a 	ret

0200d44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d44c:	defffe04 	addi	sp,sp,-8
 200d450:	dfc00115 	stw	ra,4(sp)
 200d454:	df000015 	stw	fp,0(sp)
 200d458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200d45c:	d0a00917 	ldw	r2,-32732(gp)
 200d460:	10000326 	beq	r2,zero,200d470 <alt_get_errno+0x24>
 200d464:	d0a00917 	ldw	r2,-32732(gp)
 200d468:	103ee83a 	callr	r2
 200d46c:	00000106 	br	200d474 <alt_get_errno+0x28>
 200d470:	d0a6f504 	addi	r2,gp,-25644
}
 200d474:	e037883a 	mov	sp,fp
 200d478:	dfc00117 	ldw	ra,4(sp)
 200d47c:	df000017 	ldw	fp,0(sp)
 200d480:	dec00204 	addi	sp,sp,8
 200d484:	f800283a 	ret

0200d488 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200d488:	defffa04 	addi	sp,sp,-24
 200d48c:	dfc00515 	stw	ra,20(sp)
 200d490:	df000415 	stw	fp,16(sp)
 200d494:	df000404 	addi	fp,sp,16
 200d498:	e13ffe15 	stw	r4,-8(fp)
 200d49c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200d4a0:	e0bffe17 	ldw	r2,-8(fp)
 200d4a4:	10000326 	beq	r2,zero,200d4b4 <alt_dev_llist_insert+0x2c>
 200d4a8:	e0bffe17 	ldw	r2,-8(fp)
 200d4ac:	10800217 	ldw	r2,8(r2)
 200d4b0:	1000061e 	bne	r2,zero,200d4cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 200d4b4:	200d44c0 	call	200d44c <alt_get_errno>
 200d4b8:	1007883a 	mov	r3,r2
 200d4bc:	00800584 	movi	r2,22
 200d4c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200d4c4:	00bffa84 	movi	r2,-22
 200d4c8:	00001306 	br	200d518 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200d4cc:	e0bffe17 	ldw	r2,-8(fp)
 200d4d0:	e0ffff17 	ldw	r3,-4(fp)
 200d4d4:	e0fffc15 	stw	r3,-16(fp)
 200d4d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200d4dc:	e0bffd17 	ldw	r2,-12(fp)
 200d4e0:	e0fffc17 	ldw	r3,-16(fp)
 200d4e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200d4e8:	e0bffc17 	ldw	r2,-16(fp)
 200d4ec:	10c00017 	ldw	r3,0(r2)
 200d4f0:	e0bffd17 	ldw	r2,-12(fp)
 200d4f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200d4f8:	e0bffc17 	ldw	r2,-16(fp)
 200d4fc:	10800017 	ldw	r2,0(r2)
 200d500:	e0fffd17 	ldw	r3,-12(fp)
 200d504:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200d508:	e0bffc17 	ldw	r2,-16(fp)
 200d50c:	e0fffd17 	ldw	r3,-12(fp)
 200d510:	10c00015 	stw	r3,0(r2)

  return 0;  
 200d514:	0005883a 	mov	r2,zero
}
 200d518:	e037883a 	mov	sp,fp
 200d51c:	dfc00117 	ldw	ra,4(sp)
 200d520:	df000017 	ldw	fp,0(sp)
 200d524:	dec00204 	addi	sp,sp,8
 200d528:	f800283a 	ret

0200d52c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200d52c:	defffd04 	addi	sp,sp,-12
 200d530:	dfc00215 	stw	ra,8(sp)
 200d534:	df000115 	stw	fp,4(sp)
 200d538:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200d53c:	00808074 	movhi	r2,513
 200d540:	10ba1a04 	addi	r2,r2,-6040
 200d544:	e0bfff15 	stw	r2,-4(fp)
 200d548:	00000606 	br	200d564 <_do_ctors+0x38>
        (*ctor) (); 
 200d54c:	e0bfff17 	ldw	r2,-4(fp)
 200d550:	10800017 	ldw	r2,0(r2)
 200d554:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200d558:	e0bfff17 	ldw	r2,-4(fp)
 200d55c:	10bfff04 	addi	r2,r2,-4
 200d560:	e0bfff15 	stw	r2,-4(fp)
 200d564:	e0ffff17 	ldw	r3,-4(fp)
 200d568:	00808074 	movhi	r2,513
 200d56c:	10ba1b04 	addi	r2,r2,-6036
 200d570:	18bff62e 	bgeu	r3,r2,200d54c <_do_ctors+0x20>
        (*ctor) (); 
}
 200d574:	0001883a 	nop
 200d578:	e037883a 	mov	sp,fp
 200d57c:	dfc00117 	ldw	ra,4(sp)
 200d580:	df000017 	ldw	fp,0(sp)
 200d584:	dec00204 	addi	sp,sp,8
 200d588:	f800283a 	ret

0200d58c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200d58c:	defffd04 	addi	sp,sp,-12
 200d590:	dfc00215 	stw	ra,8(sp)
 200d594:	df000115 	stw	fp,4(sp)
 200d598:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200d59c:	00808074 	movhi	r2,513
 200d5a0:	10ba1a04 	addi	r2,r2,-6040
 200d5a4:	e0bfff15 	stw	r2,-4(fp)
 200d5a8:	00000606 	br	200d5c4 <_do_dtors+0x38>
        (*dtor) (); 
 200d5ac:	e0bfff17 	ldw	r2,-4(fp)
 200d5b0:	10800017 	ldw	r2,0(r2)
 200d5b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200d5b8:	e0bfff17 	ldw	r2,-4(fp)
 200d5bc:	10bfff04 	addi	r2,r2,-4
 200d5c0:	e0bfff15 	stw	r2,-4(fp)
 200d5c4:	e0ffff17 	ldw	r3,-4(fp)
 200d5c8:	00808074 	movhi	r2,513
 200d5cc:	10ba1b04 	addi	r2,r2,-6036
 200d5d0:	18bff62e 	bgeu	r3,r2,200d5ac <_do_dtors+0x20>
        (*dtor) (); 
}
 200d5d4:	0001883a 	nop
 200d5d8:	e037883a 	mov	sp,fp
 200d5dc:	dfc00117 	ldw	ra,4(sp)
 200d5e0:	df000017 	ldw	fp,0(sp)
 200d5e4:	dec00204 	addi	sp,sp,8
 200d5e8:	f800283a 	ret

0200d5ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200d5ec:	deffff04 	addi	sp,sp,-4
 200d5f0:	df000015 	stw	fp,0(sp)
 200d5f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200d5f8:	0001883a 	nop
 200d5fc:	e037883a 	mov	sp,fp
 200d600:	df000017 	ldw	fp,0(sp)
 200d604:	dec00104 	addi	sp,sp,4
 200d608:	f800283a 	ret

0200d60c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200d60c:	defff904 	addi	sp,sp,-28
 200d610:	dfc00615 	stw	ra,24(sp)
 200d614:	df000515 	stw	fp,20(sp)
 200d618:	df000504 	addi	fp,sp,20
 200d61c:	e13ffc15 	stw	r4,-16(fp)
 200d620:	e17ffd15 	stw	r5,-12(fp)
 200d624:	e1bffe15 	stw	r6,-8(fp)
 200d628:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200d62c:	e0800217 	ldw	r2,8(fp)
 200d630:	d8800015 	stw	r2,0(sp)
 200d634:	e1ffff17 	ldw	r7,-4(fp)
 200d638:	e1bffe17 	ldw	r6,-8(fp)
 200d63c:	e17ffd17 	ldw	r5,-12(fp)
 200d640:	e13ffc17 	ldw	r4,-16(fp)
 200d644:	200d7bc0 	call	200d7bc <alt_iic_isr_register>
}  
 200d648:	e037883a 	mov	sp,fp
 200d64c:	dfc00117 	ldw	ra,4(sp)
 200d650:	df000017 	ldw	fp,0(sp)
 200d654:	dec00204 	addi	sp,sp,8
 200d658:	f800283a 	ret

0200d65c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200d65c:	defff904 	addi	sp,sp,-28
 200d660:	df000615 	stw	fp,24(sp)
 200d664:	df000604 	addi	fp,sp,24
 200d668:	e13ffe15 	stw	r4,-8(fp)
 200d66c:	e17fff15 	stw	r5,-4(fp)
 200d670:	e0bfff17 	ldw	r2,-4(fp)
 200d674:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d678:	0005303a 	rdctl	r2,status
 200d67c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d680:	e0fffb17 	ldw	r3,-20(fp)
 200d684:	00bfff84 	movi	r2,-2
 200d688:	1884703a 	and	r2,r3,r2
 200d68c:	1001703a 	wrctl	status,r2
  
  return context;
 200d690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200d694:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 200d698:	00c00044 	movi	r3,1
 200d69c:	e0bffa17 	ldw	r2,-24(fp)
 200d6a0:	1884983a 	sll	r2,r3,r2
 200d6a4:	1007883a 	mov	r3,r2
 200d6a8:	d0a71217 	ldw	r2,-25528(gp)
 200d6ac:	1884b03a 	or	r2,r3,r2
 200d6b0:	d0a71215 	stw	r2,-25528(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200d6b4:	d0a71217 	ldw	r2,-25528(gp)
 200d6b8:	100170fa 	wrctl	ienable,r2
 200d6bc:	e0bffc17 	ldw	r2,-16(fp)
 200d6c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d6c4:	e0bffd17 	ldw	r2,-12(fp)
 200d6c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200d6cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 200d6d0:	0001883a 	nop
}
 200d6d4:	e037883a 	mov	sp,fp
 200d6d8:	df000017 	ldw	fp,0(sp)
 200d6dc:	dec00104 	addi	sp,sp,4
 200d6e0:	f800283a 	ret

0200d6e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200d6e4:	defff904 	addi	sp,sp,-28
 200d6e8:	df000615 	stw	fp,24(sp)
 200d6ec:	df000604 	addi	fp,sp,24
 200d6f0:	e13ffe15 	stw	r4,-8(fp)
 200d6f4:	e17fff15 	stw	r5,-4(fp)
 200d6f8:	e0bfff17 	ldw	r2,-4(fp)
 200d6fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d700:	0005303a 	rdctl	r2,status
 200d704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d708:	e0fffb17 	ldw	r3,-20(fp)
 200d70c:	00bfff84 	movi	r2,-2
 200d710:	1884703a 	and	r2,r3,r2
 200d714:	1001703a 	wrctl	status,r2
  
  return context;
 200d718:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200d71c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 200d720:	00c00044 	movi	r3,1
 200d724:	e0bffa17 	ldw	r2,-24(fp)
 200d728:	1884983a 	sll	r2,r3,r2
 200d72c:	0084303a 	nor	r2,zero,r2
 200d730:	1007883a 	mov	r3,r2
 200d734:	d0a71217 	ldw	r2,-25528(gp)
 200d738:	1884703a 	and	r2,r3,r2
 200d73c:	d0a71215 	stw	r2,-25528(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200d740:	d0a71217 	ldw	r2,-25528(gp)
 200d744:	100170fa 	wrctl	ienable,r2
 200d748:	e0bffc17 	ldw	r2,-16(fp)
 200d74c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d750:	e0bffd17 	ldw	r2,-12(fp)
 200d754:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200d758:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 200d75c:	0001883a 	nop
}
 200d760:	e037883a 	mov	sp,fp
 200d764:	df000017 	ldw	fp,0(sp)
 200d768:	dec00104 	addi	sp,sp,4
 200d76c:	f800283a 	ret

0200d770 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200d770:	defffc04 	addi	sp,sp,-16
 200d774:	df000315 	stw	fp,12(sp)
 200d778:	df000304 	addi	fp,sp,12
 200d77c:	e13ffe15 	stw	r4,-8(fp)
 200d780:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200d784:	000530fa 	rdctl	r2,ienable
 200d788:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200d78c:	00c00044 	movi	r3,1
 200d790:	e0bfff17 	ldw	r2,-4(fp)
 200d794:	1884983a 	sll	r2,r3,r2
 200d798:	1007883a 	mov	r3,r2
 200d79c:	e0bffd17 	ldw	r2,-12(fp)
 200d7a0:	1884703a 	and	r2,r3,r2
 200d7a4:	1004c03a 	cmpne	r2,r2,zero
 200d7a8:	10803fcc 	andi	r2,r2,255
}
 200d7ac:	e037883a 	mov	sp,fp
 200d7b0:	df000017 	ldw	fp,0(sp)
 200d7b4:	dec00104 	addi	sp,sp,4
 200d7b8:	f800283a 	ret

0200d7bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200d7bc:	defff504 	addi	sp,sp,-44
 200d7c0:	dfc00a15 	stw	ra,40(sp)
 200d7c4:	df000915 	stw	fp,36(sp)
 200d7c8:	df000904 	addi	fp,sp,36
 200d7cc:	e13ffc15 	stw	r4,-16(fp)
 200d7d0:	e17ffd15 	stw	r5,-12(fp)
 200d7d4:	e1bffe15 	stw	r6,-8(fp)
 200d7d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 200d7dc:	00bffa84 	movi	r2,-22
 200d7e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 200d7e4:	e0bffd17 	ldw	r2,-12(fp)
 200d7e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200d7ec:	e0bff817 	ldw	r2,-32(fp)
 200d7f0:	10800808 	cmpgei	r2,r2,32
 200d7f4:	1000271e 	bne	r2,zero,200d894 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d7f8:	0005303a 	rdctl	r2,status
 200d7fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d800:	e0fffb17 	ldw	r3,-20(fp)
 200d804:	00bfff84 	movi	r2,-2
 200d808:	1884703a 	and	r2,r3,r2
 200d80c:	1001703a 	wrctl	status,r2
  
  return context;
 200d810:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 200d814:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 200d818:	008080b4 	movhi	r2,514
 200d81c:	10acaf04 	addi	r2,r2,-19780
 200d820:	e0fff817 	ldw	r3,-32(fp)
 200d824:	180690fa 	slli	r3,r3,3
 200d828:	10c5883a 	add	r2,r2,r3
 200d82c:	e0fffe17 	ldw	r3,-8(fp)
 200d830:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 200d834:	008080b4 	movhi	r2,514
 200d838:	10acaf04 	addi	r2,r2,-19780
 200d83c:	e0fff817 	ldw	r3,-32(fp)
 200d840:	180690fa 	slli	r3,r3,3
 200d844:	10c5883a 	add	r2,r2,r3
 200d848:	10800104 	addi	r2,r2,4
 200d84c:	e0ffff17 	ldw	r3,-4(fp)
 200d850:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200d854:	e0bffe17 	ldw	r2,-8(fp)
 200d858:	10000526 	beq	r2,zero,200d870 <alt_iic_isr_register+0xb4>
 200d85c:	e0bff817 	ldw	r2,-32(fp)
 200d860:	100b883a 	mov	r5,r2
 200d864:	e13ffc17 	ldw	r4,-16(fp)
 200d868:	200d65c0 	call	200d65c <alt_ic_irq_enable>
 200d86c:	00000406 	br	200d880 <alt_iic_isr_register+0xc4>
 200d870:	e0bff817 	ldw	r2,-32(fp)
 200d874:	100b883a 	mov	r5,r2
 200d878:	e13ffc17 	ldw	r4,-16(fp)
 200d87c:	200d6e40 	call	200d6e4 <alt_ic_irq_disable>
 200d880:	e0bff715 	stw	r2,-36(fp)
 200d884:	e0bffa17 	ldw	r2,-24(fp)
 200d888:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d88c:	e0bff917 	ldw	r2,-28(fp)
 200d890:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200d894:	e0bff717 	ldw	r2,-36(fp)
}
 200d898:	e037883a 	mov	sp,fp
 200d89c:	dfc00117 	ldw	ra,4(sp)
 200d8a0:	df000017 	ldw	fp,0(sp)
 200d8a4:	dec00204 	addi	sp,sp,8
 200d8a8:	f800283a 	ret

0200d8ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200d8ac:	defff804 	addi	sp,sp,-32
 200d8b0:	dfc00715 	stw	ra,28(sp)
 200d8b4:	df000615 	stw	fp,24(sp)
 200d8b8:	dc000515 	stw	r16,20(sp)
 200d8bc:	df000604 	addi	fp,sp,24
 200d8c0:	e13ffb15 	stw	r4,-20(fp)
 200d8c4:	e17ffc15 	stw	r5,-16(fp)
 200d8c8:	e1bffd15 	stw	r6,-12(fp)
 200d8cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 200d8d0:	e1bffe17 	ldw	r6,-8(fp)
 200d8d4:	e17ffd17 	ldw	r5,-12(fp)
 200d8d8:	e13ffc17 	ldw	r4,-16(fp)
 200d8dc:	200db340 	call	200db34 <open>
 200d8e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 200d8e4:	e0bffa17 	ldw	r2,-24(fp)
 200d8e8:	10002216 	blt	r2,zero,200d974 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 200d8ec:	04008074 	movhi	r16,513
 200d8f0:	843c8b04 	addi	r16,r16,-3540
 200d8f4:	e0bffa17 	ldw	r2,-24(fp)
 200d8f8:	01400304 	movi	r5,12
 200d8fc:	1009883a 	mov	r4,r2
 200d900:	200348c0 	call	200348c <__mulsi3>
 200d904:	8085883a 	add	r2,r16,r2
 200d908:	10c00017 	ldw	r3,0(r2)
 200d90c:	e0bffb17 	ldw	r2,-20(fp)
 200d910:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200d914:	04008074 	movhi	r16,513
 200d918:	843c8b04 	addi	r16,r16,-3540
 200d91c:	e0bffa17 	ldw	r2,-24(fp)
 200d920:	01400304 	movi	r5,12
 200d924:	1009883a 	mov	r4,r2
 200d928:	200348c0 	call	200348c <__mulsi3>
 200d92c:	8085883a 	add	r2,r16,r2
 200d930:	10800104 	addi	r2,r2,4
 200d934:	10c00017 	ldw	r3,0(r2)
 200d938:	e0bffb17 	ldw	r2,-20(fp)
 200d93c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200d940:	04008074 	movhi	r16,513
 200d944:	843c8b04 	addi	r16,r16,-3540
 200d948:	e0bffa17 	ldw	r2,-24(fp)
 200d94c:	01400304 	movi	r5,12
 200d950:	1009883a 	mov	r4,r2
 200d954:	200348c0 	call	200348c <__mulsi3>
 200d958:	8085883a 	add	r2,r16,r2
 200d95c:	10800204 	addi	r2,r2,8
 200d960:	10c00017 	ldw	r3,0(r2)
 200d964:	e0bffb17 	ldw	r2,-20(fp)
 200d968:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200d96c:	e13ffa17 	ldw	r4,-24(fp)
 200d970:	2003bd00 	call	2003bd0 <alt_release_fd>
  }
} 
 200d974:	0001883a 	nop
 200d978:	e6ffff04 	addi	sp,fp,-4
 200d97c:	dfc00217 	ldw	ra,8(sp)
 200d980:	df000117 	ldw	fp,4(sp)
 200d984:	dc000017 	ldw	r16,0(sp)
 200d988:	dec00304 	addi	sp,sp,12
 200d98c:	f800283a 	ret

0200d990 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200d990:	defffb04 	addi	sp,sp,-20
 200d994:	dfc00415 	stw	ra,16(sp)
 200d998:	df000315 	stw	fp,12(sp)
 200d99c:	df000304 	addi	fp,sp,12
 200d9a0:	e13ffd15 	stw	r4,-12(fp)
 200d9a4:	e17ffe15 	stw	r5,-8(fp)
 200d9a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200d9ac:	01c07fc4 	movi	r7,511
 200d9b0:	01800044 	movi	r6,1
 200d9b4:	e17ffd17 	ldw	r5,-12(fp)
 200d9b8:	01008074 	movhi	r4,513
 200d9bc:	213c8e04 	addi	r4,r4,-3528
 200d9c0:	200d8ac0 	call	200d8ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200d9c4:	01c07fc4 	movi	r7,511
 200d9c8:	000d883a 	mov	r6,zero
 200d9cc:	e17ffe17 	ldw	r5,-8(fp)
 200d9d0:	01008074 	movhi	r4,513
 200d9d4:	213c8b04 	addi	r4,r4,-3540
 200d9d8:	200d8ac0 	call	200d8ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200d9dc:	01c07fc4 	movi	r7,511
 200d9e0:	01800044 	movi	r6,1
 200d9e4:	e17fff17 	ldw	r5,-4(fp)
 200d9e8:	01008074 	movhi	r4,513
 200d9ec:	213c9104 	addi	r4,r4,-3516
 200d9f0:	200d8ac0 	call	200d8ac <alt_open_fd>
}  
 200d9f4:	0001883a 	nop
 200d9f8:	e037883a 	mov	sp,fp
 200d9fc:	dfc00117 	ldw	ra,4(sp)
 200da00:	df000017 	ldw	fp,0(sp)
 200da04:	dec00204 	addi	sp,sp,8
 200da08:	f800283a 	ret

0200da0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200da0c:	defffe04 	addi	sp,sp,-8
 200da10:	dfc00115 	stw	ra,4(sp)
 200da14:	df000015 	stw	fp,0(sp)
 200da18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200da1c:	d0a00917 	ldw	r2,-32732(gp)
 200da20:	10000326 	beq	r2,zero,200da30 <alt_get_errno+0x24>
 200da24:	d0a00917 	ldw	r2,-32732(gp)
 200da28:	103ee83a 	callr	r2
 200da2c:	00000106 	br	200da34 <alt_get_errno+0x28>
 200da30:	d0a6f504 	addi	r2,gp,-25644
}
 200da34:	e037883a 	mov	sp,fp
 200da38:	dfc00117 	ldw	ra,4(sp)
 200da3c:	df000017 	ldw	fp,0(sp)
 200da40:	dec00204 	addi	sp,sp,8
 200da44:	f800283a 	ret

0200da48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200da48:	defffb04 	addi	sp,sp,-20
 200da4c:	dfc00415 	stw	ra,16(sp)
 200da50:	df000315 	stw	fp,12(sp)
 200da54:	dc000215 	stw	r16,8(sp)
 200da58:	df000304 	addi	fp,sp,12
 200da5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200da60:	e0bffe17 	ldw	r2,-8(fp)
 200da64:	10800217 	ldw	r2,8(r2)
 200da68:	10d00034 	orhi	r3,r2,16384
 200da6c:	e0bffe17 	ldw	r2,-8(fp)
 200da70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200da74:	e03ffd15 	stw	zero,-12(fp)
 200da78:	00002306 	br	200db08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200da7c:	04008074 	movhi	r16,513
 200da80:	843c8b04 	addi	r16,r16,-3540
 200da84:	e0bffd17 	ldw	r2,-12(fp)
 200da88:	01400304 	movi	r5,12
 200da8c:	1009883a 	mov	r4,r2
 200da90:	200348c0 	call	200348c <__mulsi3>
 200da94:	8085883a 	add	r2,r16,r2
 200da98:	10c00017 	ldw	r3,0(r2)
 200da9c:	e0bffe17 	ldw	r2,-8(fp)
 200daa0:	10800017 	ldw	r2,0(r2)
 200daa4:	1880151e 	bne	r3,r2,200dafc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200daa8:	04008074 	movhi	r16,513
 200daac:	843c8b04 	addi	r16,r16,-3540
 200dab0:	e0bffd17 	ldw	r2,-12(fp)
 200dab4:	01400304 	movi	r5,12
 200dab8:	1009883a 	mov	r4,r2
 200dabc:	200348c0 	call	200348c <__mulsi3>
 200dac0:	8085883a 	add	r2,r16,r2
 200dac4:	10800204 	addi	r2,r2,8
 200dac8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200dacc:	10000b0e 	bge	r2,zero,200dafc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200dad0:	01400304 	movi	r5,12
 200dad4:	e13ffd17 	ldw	r4,-12(fp)
 200dad8:	200348c0 	call	200348c <__mulsi3>
 200dadc:	1007883a 	mov	r3,r2
 200dae0:	00808074 	movhi	r2,513
 200dae4:	10bc8b04 	addi	r2,r2,-3540
 200dae8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200daec:	e0bffe17 	ldw	r2,-8(fp)
 200daf0:	18800226 	beq	r3,r2,200dafc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200daf4:	00bffcc4 	movi	r2,-13
 200daf8:	00000806 	br	200db1c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200dafc:	e0bffd17 	ldw	r2,-12(fp)
 200db00:	10800044 	addi	r2,r2,1
 200db04:	e0bffd15 	stw	r2,-12(fp)
 200db08:	d0a00817 	ldw	r2,-32736(gp)
 200db0c:	1007883a 	mov	r3,r2
 200db10:	e0bffd17 	ldw	r2,-12(fp)
 200db14:	18bfd92e 	bgeu	r3,r2,200da7c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200db18:	0005883a 	mov	r2,zero
}
 200db1c:	e6ffff04 	addi	sp,fp,-4
 200db20:	dfc00217 	ldw	ra,8(sp)
 200db24:	df000117 	ldw	fp,4(sp)
 200db28:	dc000017 	ldw	r16,0(sp)
 200db2c:	dec00304 	addi	sp,sp,12
 200db30:	f800283a 	ret

0200db34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200db34:	defff604 	addi	sp,sp,-40
 200db38:	dfc00915 	stw	ra,36(sp)
 200db3c:	df000815 	stw	fp,32(sp)
 200db40:	df000804 	addi	fp,sp,32
 200db44:	e13ffd15 	stw	r4,-12(fp)
 200db48:	e17ffe15 	stw	r5,-8(fp)
 200db4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200db50:	00bfffc4 	movi	r2,-1
 200db54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200db58:	00bffb44 	movi	r2,-19
 200db5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200db60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200db64:	d1600604 	addi	r5,gp,-32744
 200db68:	e13ffd17 	ldw	r4,-12(fp)
 200db6c:	200e1b00 	call	200e1b0 <alt_find_dev>
 200db70:	e0bff815 	stw	r2,-32(fp)
 200db74:	e0bff817 	ldw	r2,-32(fp)
 200db78:	1000051e 	bne	r2,zero,200db90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200db7c:	e13ffd17 	ldw	r4,-12(fp)
 200db80:	200e2400 	call	200e240 <alt_find_file>
 200db84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200db88:	00800044 	movi	r2,1
 200db8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200db90:	e0bff817 	ldw	r2,-32(fp)
 200db94:	10002b26 	beq	r2,zero,200dc44 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200db98:	e13ff817 	ldw	r4,-32(fp)
 200db9c:	200e3480 	call	200e348 <alt_get_fd>
 200dba0:	e0bff915 	stw	r2,-28(fp)
 200dba4:	e0bff917 	ldw	r2,-28(fp)
 200dba8:	1000030e 	bge	r2,zero,200dbb8 <open+0x84>
    {
      status = index;
 200dbac:	e0bff917 	ldw	r2,-28(fp)
 200dbb0:	e0bffa15 	stw	r2,-24(fp)
 200dbb4:	00002506 	br	200dc4c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 200dbb8:	01400304 	movi	r5,12
 200dbbc:	e13ff917 	ldw	r4,-28(fp)
 200dbc0:	200348c0 	call	200348c <__mulsi3>
 200dbc4:	1007883a 	mov	r3,r2
 200dbc8:	00808074 	movhi	r2,513
 200dbcc:	10bc8b04 	addi	r2,r2,-3540
 200dbd0:	1885883a 	add	r2,r3,r2
 200dbd4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200dbd8:	e0fffe17 	ldw	r3,-8(fp)
 200dbdc:	00900034 	movhi	r2,16384
 200dbe0:	10bfffc4 	addi	r2,r2,-1
 200dbe4:	1886703a 	and	r3,r3,r2
 200dbe8:	e0bffc17 	ldw	r2,-16(fp)
 200dbec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200dbf0:	e0bffb17 	ldw	r2,-20(fp)
 200dbf4:	1000051e 	bne	r2,zero,200dc0c <open+0xd8>
 200dbf8:	e13ffc17 	ldw	r4,-16(fp)
 200dbfc:	200da480 	call	200da48 <alt_file_locked>
 200dc00:	e0bffa15 	stw	r2,-24(fp)
 200dc04:	e0bffa17 	ldw	r2,-24(fp)
 200dc08:	10001016 	blt	r2,zero,200dc4c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200dc0c:	e0bff817 	ldw	r2,-32(fp)
 200dc10:	10800317 	ldw	r2,12(r2)
 200dc14:	10000826 	beq	r2,zero,200dc38 <open+0x104>
 200dc18:	e0bff817 	ldw	r2,-32(fp)
 200dc1c:	10800317 	ldw	r2,12(r2)
 200dc20:	e1ffff17 	ldw	r7,-4(fp)
 200dc24:	e1bffe17 	ldw	r6,-8(fp)
 200dc28:	e17ffd17 	ldw	r5,-12(fp)
 200dc2c:	e13ffc17 	ldw	r4,-16(fp)
 200dc30:	103ee83a 	callr	r2
 200dc34:	00000106 	br	200dc3c <open+0x108>
 200dc38:	0005883a 	mov	r2,zero
 200dc3c:	e0bffa15 	stw	r2,-24(fp)
 200dc40:	00000206 	br	200dc4c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200dc44:	00bffb44 	movi	r2,-19
 200dc48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200dc4c:	e0bffa17 	ldw	r2,-24(fp)
 200dc50:	1000090e 	bge	r2,zero,200dc78 <open+0x144>
  {
    alt_release_fd (index);  
 200dc54:	e13ff917 	ldw	r4,-28(fp)
 200dc58:	2003bd00 	call	2003bd0 <alt_release_fd>
    ALT_ERRNO = -status;
 200dc5c:	200da0c0 	call	200da0c <alt_get_errno>
 200dc60:	1007883a 	mov	r3,r2
 200dc64:	e0bffa17 	ldw	r2,-24(fp)
 200dc68:	0085c83a 	sub	r2,zero,r2
 200dc6c:	18800015 	stw	r2,0(r3)
    return -1;
 200dc70:	00bfffc4 	movi	r2,-1
 200dc74:	00000106 	br	200dc7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 200dc78:	e0bff917 	ldw	r2,-28(fp)
}
 200dc7c:	e037883a 	mov	sp,fp
 200dc80:	dfc00117 	ldw	ra,4(sp)
 200dc84:	df000017 	ldw	fp,0(sp)
 200dc88:	dec00204 	addi	sp,sp,8
 200dc8c:	f800283a 	ret

0200dc90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200dc90:	defffa04 	addi	sp,sp,-24
 200dc94:	df000515 	stw	fp,20(sp)
 200dc98:	df000504 	addi	fp,sp,20
 200dc9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dca0:	0005303a 	rdctl	r2,status
 200dca4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dca8:	e0fffc17 	ldw	r3,-16(fp)
 200dcac:	00bfff84 	movi	r2,-2
 200dcb0:	1884703a 	and	r2,r3,r2
 200dcb4:	1001703a 	wrctl	status,r2
  
  return context;
 200dcb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200dcbc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200dcc0:	e0bfff17 	ldw	r2,-4(fp)
 200dcc4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200dcc8:	e0bffd17 	ldw	r2,-12(fp)
 200dccc:	10800017 	ldw	r2,0(r2)
 200dcd0:	e0fffd17 	ldw	r3,-12(fp)
 200dcd4:	18c00117 	ldw	r3,4(r3)
 200dcd8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 200dcdc:	e0bffd17 	ldw	r2,-12(fp)
 200dce0:	10800117 	ldw	r2,4(r2)
 200dce4:	e0fffd17 	ldw	r3,-12(fp)
 200dce8:	18c00017 	ldw	r3,0(r3)
 200dcec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200dcf0:	e0bffd17 	ldw	r2,-12(fp)
 200dcf4:	e0fffd17 	ldw	r3,-12(fp)
 200dcf8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 200dcfc:	e0bffd17 	ldw	r2,-12(fp)
 200dd00:	e0fffd17 	ldw	r3,-12(fp)
 200dd04:	10c00015 	stw	r3,0(r2)
 200dd08:	e0bffb17 	ldw	r2,-20(fp)
 200dd0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200dd10:	e0bffe17 	ldw	r2,-8(fp)
 200dd14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200dd18:	0001883a 	nop
 200dd1c:	e037883a 	mov	sp,fp
 200dd20:	df000017 	ldw	fp,0(sp)
 200dd24:	dec00104 	addi	sp,sp,4
 200dd28:	f800283a 	ret

0200dd2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200dd2c:	defffb04 	addi	sp,sp,-20
 200dd30:	dfc00415 	stw	ra,16(sp)
 200dd34:	df000315 	stw	fp,12(sp)
 200dd38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200dd3c:	d0a02b17 	ldw	r2,-32596(gp)
 200dd40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200dd44:	d0a71417 	ldw	r2,-25520(gp)
 200dd48:	10800044 	addi	r2,r2,1
 200dd4c:	d0a71415 	stw	r2,-25520(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200dd50:	00002e06 	br	200de0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200dd54:	e0bffd17 	ldw	r2,-12(fp)
 200dd58:	10800017 	ldw	r2,0(r2)
 200dd5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200dd60:	e0bffd17 	ldw	r2,-12(fp)
 200dd64:	10800403 	ldbu	r2,16(r2)
 200dd68:	10803fcc 	andi	r2,r2,255
 200dd6c:	10000426 	beq	r2,zero,200dd80 <alt_tick+0x54>
 200dd70:	d0a71417 	ldw	r2,-25520(gp)
 200dd74:	1000021e 	bne	r2,zero,200dd80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200dd78:	e0bffd17 	ldw	r2,-12(fp)
 200dd7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200dd80:	e0bffd17 	ldw	r2,-12(fp)
 200dd84:	10800217 	ldw	r2,8(r2)
 200dd88:	d0e71417 	ldw	r3,-25520(gp)
 200dd8c:	18801d36 	bltu	r3,r2,200de04 <alt_tick+0xd8>
 200dd90:	e0bffd17 	ldw	r2,-12(fp)
 200dd94:	10800403 	ldbu	r2,16(r2)
 200dd98:	10803fcc 	andi	r2,r2,255
 200dd9c:	1000191e 	bne	r2,zero,200de04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 200dda0:	e0bffd17 	ldw	r2,-12(fp)
 200dda4:	10800317 	ldw	r2,12(r2)
 200dda8:	e0fffd17 	ldw	r3,-12(fp)
 200ddac:	18c00517 	ldw	r3,20(r3)
 200ddb0:	1809883a 	mov	r4,r3
 200ddb4:	103ee83a 	callr	r2
 200ddb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200ddbc:	e0bfff17 	ldw	r2,-4(fp)
 200ddc0:	1000031e 	bne	r2,zero,200ddd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200ddc4:	e13ffd17 	ldw	r4,-12(fp)
 200ddc8:	200dc900 	call	200dc90 <alt_alarm_stop>
 200ddcc:	00000d06 	br	200de04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 200ddd0:	e0bffd17 	ldw	r2,-12(fp)
 200ddd4:	10c00217 	ldw	r3,8(r2)
 200ddd8:	e0bfff17 	ldw	r2,-4(fp)
 200dddc:	1887883a 	add	r3,r3,r2
 200dde0:	e0bffd17 	ldw	r2,-12(fp)
 200dde4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200dde8:	e0bffd17 	ldw	r2,-12(fp)
 200ddec:	10c00217 	ldw	r3,8(r2)
 200ddf0:	d0a71417 	ldw	r2,-25520(gp)
 200ddf4:	1880032e 	bgeu	r3,r2,200de04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 200ddf8:	e0bffd17 	ldw	r2,-12(fp)
 200ddfc:	00c00044 	movi	r3,1
 200de00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200de04:	e0bffe17 	ldw	r2,-8(fp)
 200de08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200de0c:	e0fffd17 	ldw	r3,-12(fp)
 200de10:	d0a02b04 	addi	r2,gp,-32596
 200de14:	18bfcf1e 	bne	r3,r2,200dd54 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200de18:	2004de40 	call	2004de4 <OSTimeTick>
}
 200de1c:	0001883a 	nop
 200de20:	e037883a 	mov	sp,fp
 200de24:	dfc00117 	ldw	ra,4(sp)
 200de28:	df000017 	ldw	fp,0(sp)
 200de2c:	dec00204 	addi	sp,sp,8
 200de30:	f800283a 	ret

0200de34 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 200de34:	deffff04 	addi	sp,sp,-4
 200de38:	df000015 	stw	fp,0(sp)
 200de3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200de40:	000170fa 	wrctl	ienable,zero
}
 200de44:	0001883a 	nop
 200de48:	e037883a 	mov	sp,fp
 200de4c:	df000017 	ldw	fp,0(sp)
 200de50:	dec00104 	addi	sp,sp,4
 200de54:	f800283a 	ret

0200de58 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 200de58:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 200de5c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 200de60:	d1270d17 	ldw	r4,-25548(gp)

      stw ra,  0(sp)
 200de64:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 200de68:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 200de6c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 200de70:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 200de74:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 200de78:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 200de7c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 200de80:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 200de84:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 200de88:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 200de8c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 200de90:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 200de94:	200e0cc0 	call	200e0cc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 200de98:	d1270817 	ldw	r4,-25568(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 200de9c:	d1670007 	ldb	r5,-25600(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 200dea0:	d1270d15 	stw	r4,-25548(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 200dea4:	d1670045 	stb	r5,-25599(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 200dea8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 200deac:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 200deb0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 200deb4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 200deb8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 200debc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 200dec0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 200dec4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 200dec8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 200decc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 200ded0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 200ded4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 200ded8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 200dedc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 200dee0:	f800283a 	ret

0200dee4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 200dee4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 200dee8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 200deec:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 200def0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 200def4:	200e0cc0 	call	200e0cc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 200def8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 200defc:	d4a6fe45 	stb	r18,-25607(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 200df00:	003fe506 	br	200de98 <OSCtxSw+0x40>

0200df04 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 200df04:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 200df08:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 200df0c:	10800054 	ori	r2,r2,1
      wrctl status, r2
 200df10:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 200df14:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 200df18:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 200df1c:	dec00204 	addi	sp,sp,8

      callr r2
 200df20:	103ee83a 	callr	r2

      nop
 200df24:	0001883a 	nop

0200df28 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 200df28:	defff704 	addi	sp,sp,-36
 200df2c:	dfc00815 	stw	ra,32(sp)
 200df30:	df000715 	stw	fp,28(sp)
 200df34:	df000704 	addi	fp,sp,28
 200df38:	e13ffc15 	stw	r4,-16(fp)
 200df3c:	e17ffd15 	stw	r5,-12(fp)
 200df40:	e1bffe15 	stw	r6,-8(fp)
 200df44:	3805883a 	mov	r2,r7
 200df48:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 200df4c:	e0fffe17 	ldw	r3,-8(fp)
 200df50:	00bfff04 	movi	r2,-4
 200df54:	1884703a 	and	r2,r3,r2
 200df58:	10bef704 	addi	r2,r2,-1060
 200df5c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 200df60:	01810904 	movi	r6,1060
 200df64:	000b883a 	mov	r5,zero
 200df68:	e13ff917 	ldw	r4,-28(fp)
 200df6c:	2001da80 	call	2001da8 <memset>
 200df70:	e0bff917 	ldw	r2,-28(fp)
 200df74:	10c0bb04 	addi	r3,r2,748
 200df78:	e0bff917 	ldw	r2,-28(fp)
 200df7c:	10c00115 	stw	r3,4(r2)
 200df80:	e0bff917 	ldw	r2,-28(fp)
 200df84:	10c0d504 	addi	r3,r2,852
 200df88:	e0bff917 	ldw	r2,-28(fp)
 200df8c:	10c00215 	stw	r3,8(r2)
 200df90:	e0bff917 	ldw	r2,-28(fp)
 200df94:	10c0ef04 	addi	r3,r2,956
 200df98:	e0bff917 	ldw	r2,-28(fp)
 200df9c:	10c00315 	stw	r3,12(r2)
 200dfa0:	e0fff917 	ldw	r3,-28(fp)
 200dfa4:	00808074 	movhi	r2,513
 200dfa8:	10ba7504 	addi	r2,r2,-5676
 200dfac:	18800d15 	stw	r2,52(r3)
 200dfb0:	e0bff917 	ldw	r2,-28(fp)
 200dfb4:	00c00044 	movi	r3,1
 200dfb8:	10c02915 	stw	r3,164(r2)
 200dfbc:	10002a15 	stw	zero,168(r2)
 200dfc0:	e0bff917 	ldw	r2,-28(fp)
 200dfc4:	00ccc384 	movi	r3,13070
 200dfc8:	10c02b0d 	sth	r3,172(r2)
 200dfcc:	e0bff917 	ldw	r2,-28(fp)
 200dfd0:	00eaf344 	movi	r3,-21555
 200dfd4:	10c02b8d 	sth	r3,174(r2)
 200dfd8:	e0bff917 	ldw	r2,-28(fp)
 200dfdc:	00c48d04 	movi	r3,4660
 200dfe0:	10c02c0d 	sth	r3,176(r2)
 200dfe4:	e0bff917 	ldw	r2,-28(fp)
 200dfe8:	00f99b44 	movi	r3,-6547
 200dfec:	10c02c8d 	sth	r3,178(r2)
 200dff0:	e0bff917 	ldw	r2,-28(fp)
 200dff4:	00f7bb04 	movi	r3,-8468
 200dff8:	10c02d0d 	sth	r3,180(r2)
 200dffc:	e0bff917 	ldw	r2,-28(fp)
 200e000:	00c00144 	movi	r3,5
 200e004:	10c02d8d 	sth	r3,182(r2)
 200e008:	e0bff917 	ldw	r2,-28(fp)
 200e00c:	00c002c4 	movi	r3,11
 200e010:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 200e014:	e0bff917 	ldw	r2,-28(fp)
 200e018:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 200e01c:	e0bffa17 	ldw	r2,-24(fp)
 200e020:	10bff304 	addi	r2,r2,-52
 200e024:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 200e028:	e0bffb17 	ldw	r2,-20(fp)
 200e02c:	10800c04 	addi	r2,r2,48
 200e030:	e0fffc17 	ldw	r3,-16(fp)
 200e034:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 200e038:	e0bffb17 	ldw	r2,-20(fp)
 200e03c:	10800b04 	addi	r2,r2,44
 200e040:	e0fffd17 	ldw	r3,-12(fp)
 200e044:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 200e048:	e0bffb17 	ldw	r2,-20(fp)
 200e04c:	10800a04 	addi	r2,r2,40
 200e050:	e0fff917 	ldw	r3,-28(fp)
 200e054:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 200e058:	00808074 	movhi	r2,513
 200e05c:	10b7c104 	addi	r2,r2,-8444
 200e060:	10c00104 	addi	r3,r2,4
 200e064:	e0bffb17 	ldw	r2,-20(fp)
 200e068:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 200e06c:	e0bffb17 	ldw	r2,-20(fp)
}
 200e070:	e037883a 	mov	sp,fp
 200e074:	dfc00117 	ldw	ra,4(sp)
 200e078:	df000017 	ldw	fp,0(sp)
 200e07c:	dec00204 	addi	sp,sp,8
 200e080:	f800283a 	ret

0200e084 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 200e084:	defffe04 	addi	sp,sp,-8
 200e088:	df000115 	stw	fp,4(sp)
 200e08c:	df000104 	addi	fp,sp,4
 200e090:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 200e094:	0001883a 	nop
 200e098:	e037883a 	mov	sp,fp
 200e09c:	df000017 	ldw	fp,0(sp)
 200e0a0:	dec00104 	addi	sp,sp,4
 200e0a4:	f800283a 	ret

0200e0a8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 200e0a8:	defffe04 	addi	sp,sp,-8
 200e0ac:	df000115 	stw	fp,4(sp)
 200e0b0:	df000104 	addi	fp,sp,4
 200e0b4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 200e0b8:	0001883a 	nop
 200e0bc:	e037883a 	mov	sp,fp
 200e0c0:	df000017 	ldw	fp,0(sp)
 200e0c4:	dec00104 	addi	sp,sp,4
 200e0c8:	f800283a 	ret

0200e0cc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 200e0cc:	deffff04 	addi	sp,sp,-4
 200e0d0:	df000015 	stw	fp,0(sp)
 200e0d4:	d839883a 	mov	fp,sp
}
 200e0d8:	0001883a 	nop
 200e0dc:	e037883a 	mov	sp,fp
 200e0e0:	df000017 	ldw	fp,0(sp)
 200e0e4:	dec00104 	addi	sp,sp,4
 200e0e8:	f800283a 	ret

0200e0ec <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 200e0ec:	deffff04 	addi	sp,sp,-4
 200e0f0:	df000015 	stw	fp,0(sp)
 200e0f4:	d839883a 	mov	fp,sp
}
 200e0f8:	0001883a 	nop
 200e0fc:	e037883a 	mov	sp,fp
 200e100:	df000017 	ldw	fp,0(sp)
 200e104:	dec00104 	addi	sp,sp,4
 200e108:	f800283a 	ret

0200e10c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 200e10c:	deffff04 	addi	sp,sp,-4
 200e110:	df000015 	stw	fp,0(sp)
 200e114:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 200e118:	0001883a 	nop
 200e11c:	e037883a 	mov	sp,fp
 200e120:	df000017 	ldw	fp,0(sp)
 200e124:	dec00104 	addi	sp,sp,4
 200e128:	f800283a 	ret

0200e12c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 200e12c:	deffff04 	addi	sp,sp,-4
 200e130:	df000015 	stw	fp,0(sp)
 200e134:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 200e138:	0001883a 	nop
 200e13c:	e037883a 	mov	sp,fp
 200e140:	df000017 	ldw	fp,0(sp)
 200e144:	dec00104 	addi	sp,sp,4
 200e148:	f800283a 	ret

0200e14c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 200e14c:	deffff04 	addi	sp,sp,-4
 200e150:	df000015 	stw	fp,0(sp)
 200e154:	d839883a 	mov	fp,sp
}
 200e158:	0001883a 	nop
 200e15c:	e037883a 	mov	sp,fp
 200e160:	df000017 	ldw	fp,0(sp)
 200e164:	dec00104 	addi	sp,sp,4
 200e168:	f800283a 	ret

0200e16c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 200e16c:	deffff04 	addi	sp,sp,-4
 200e170:	df000015 	stw	fp,0(sp)
 200e174:	d839883a 	mov	fp,sp
}
 200e178:	0001883a 	nop
 200e17c:	e037883a 	mov	sp,fp
 200e180:	df000017 	ldw	fp,0(sp)
 200e184:	dec00104 	addi	sp,sp,4
 200e188:	f800283a 	ret

0200e18c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 200e18c:	defffe04 	addi	sp,sp,-8
 200e190:	df000115 	stw	fp,4(sp)
 200e194:	df000104 	addi	fp,sp,4
 200e198:	e13fff15 	stw	r4,-4(fp)
}
 200e19c:	0001883a 	nop
 200e1a0:	e037883a 	mov	sp,fp
 200e1a4:	df000017 	ldw	fp,0(sp)
 200e1a8:	dec00104 	addi	sp,sp,4
 200e1ac:	f800283a 	ret

0200e1b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200e1b0:	defffa04 	addi	sp,sp,-24
 200e1b4:	dfc00515 	stw	ra,20(sp)
 200e1b8:	df000415 	stw	fp,16(sp)
 200e1bc:	df000404 	addi	fp,sp,16
 200e1c0:	e13ffe15 	stw	r4,-8(fp)
 200e1c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200e1c8:	e0bfff17 	ldw	r2,-4(fp)
 200e1cc:	10800017 	ldw	r2,0(r2)
 200e1d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200e1d4:	e13ffe17 	ldw	r4,-8(fp)
 200e1d8:	200077c0 	call	200077c <strlen>
 200e1dc:	10800044 	addi	r2,r2,1
 200e1e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e1e4:	00000d06 	br	200e21c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200e1e8:	e0bffc17 	ldw	r2,-16(fp)
 200e1ec:	10800217 	ldw	r2,8(r2)
 200e1f0:	e0fffd17 	ldw	r3,-12(fp)
 200e1f4:	180d883a 	mov	r6,r3
 200e1f8:	e17ffe17 	ldw	r5,-8(fp)
 200e1fc:	1009883a 	mov	r4,r2
 200e200:	200e5240 	call	200e524 <memcmp>
 200e204:	1000021e 	bne	r2,zero,200e210 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200e208:	e0bffc17 	ldw	r2,-16(fp)
 200e20c:	00000706 	br	200e22c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200e210:	e0bffc17 	ldw	r2,-16(fp)
 200e214:	10800017 	ldw	r2,0(r2)
 200e218:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e21c:	e0fffc17 	ldw	r3,-16(fp)
 200e220:	e0bfff17 	ldw	r2,-4(fp)
 200e224:	18bff01e 	bne	r3,r2,200e1e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200e228:	0005883a 	mov	r2,zero
}
 200e22c:	e037883a 	mov	sp,fp
 200e230:	dfc00117 	ldw	ra,4(sp)
 200e234:	df000017 	ldw	fp,0(sp)
 200e238:	dec00204 	addi	sp,sp,8
 200e23c:	f800283a 	ret

0200e240 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200e240:	defffb04 	addi	sp,sp,-20
 200e244:	dfc00415 	stw	ra,16(sp)
 200e248:	df000315 	stw	fp,12(sp)
 200e24c:	df000304 	addi	fp,sp,12
 200e250:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200e254:	d0a00417 	ldw	r2,-32752(gp)
 200e258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e25c:	00003106 	br	200e324 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 200e260:	e0bffd17 	ldw	r2,-12(fp)
 200e264:	10800217 	ldw	r2,8(r2)
 200e268:	1009883a 	mov	r4,r2
 200e26c:	200077c0 	call	200077c <strlen>
 200e270:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 200e274:	e0bffd17 	ldw	r2,-12(fp)
 200e278:	10c00217 	ldw	r3,8(r2)
 200e27c:	e0bffe17 	ldw	r2,-8(fp)
 200e280:	10bfffc4 	addi	r2,r2,-1
 200e284:	1885883a 	add	r2,r3,r2
 200e288:	10800003 	ldbu	r2,0(r2)
 200e28c:	10803fcc 	andi	r2,r2,255
 200e290:	1080201c 	xori	r2,r2,128
 200e294:	10bfe004 	addi	r2,r2,-128
 200e298:	10800bd8 	cmpnei	r2,r2,47
 200e29c:	1000031e 	bne	r2,zero,200e2ac <alt_find_file+0x6c>
    {
      len -= 1;
 200e2a0:	e0bffe17 	ldw	r2,-8(fp)
 200e2a4:	10bfffc4 	addi	r2,r2,-1
 200e2a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200e2ac:	e0bffe17 	ldw	r2,-8(fp)
 200e2b0:	e0ffff17 	ldw	r3,-4(fp)
 200e2b4:	1885883a 	add	r2,r3,r2
 200e2b8:	10800003 	ldbu	r2,0(r2)
 200e2bc:	10803fcc 	andi	r2,r2,255
 200e2c0:	1080201c 	xori	r2,r2,128
 200e2c4:	10bfe004 	addi	r2,r2,-128
 200e2c8:	10800be0 	cmpeqi	r2,r2,47
 200e2cc:	1000081e 	bne	r2,zero,200e2f0 <alt_find_file+0xb0>
 200e2d0:	e0bffe17 	ldw	r2,-8(fp)
 200e2d4:	e0ffff17 	ldw	r3,-4(fp)
 200e2d8:	1885883a 	add	r2,r3,r2
 200e2dc:	10800003 	ldbu	r2,0(r2)
 200e2e0:	10803fcc 	andi	r2,r2,255
 200e2e4:	1080201c 	xori	r2,r2,128
 200e2e8:	10bfe004 	addi	r2,r2,-128
 200e2ec:	10000a1e 	bne	r2,zero,200e318 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 200e2f0:	e0bffd17 	ldw	r2,-12(fp)
 200e2f4:	10800217 	ldw	r2,8(r2)
 200e2f8:	e0fffe17 	ldw	r3,-8(fp)
 200e2fc:	180d883a 	mov	r6,r3
 200e300:	e17fff17 	ldw	r5,-4(fp)
 200e304:	1009883a 	mov	r4,r2
 200e308:	200e5240 	call	200e524 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200e30c:	1000021e 	bne	r2,zero,200e318 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200e310:	e0bffd17 	ldw	r2,-12(fp)
 200e314:	00000706 	br	200e334 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 200e318:	e0bffd17 	ldw	r2,-12(fp)
 200e31c:	10800017 	ldw	r2,0(r2)
 200e320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e324:	e0fffd17 	ldw	r3,-12(fp)
 200e328:	d0a00404 	addi	r2,gp,-32752
 200e32c:	18bfcc1e 	bne	r3,r2,200e260 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200e330:	0005883a 	mov	r2,zero
}
 200e334:	e037883a 	mov	sp,fp
 200e338:	dfc00117 	ldw	ra,4(sp)
 200e33c:	df000017 	ldw	fp,0(sp)
 200e340:	dec00204 	addi	sp,sp,8
 200e344:	f800283a 	ret

0200e348 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200e348:	defff804 	addi	sp,sp,-32
 200e34c:	dfc00715 	stw	ra,28(sp)
 200e350:	df000615 	stw	fp,24(sp)
 200e354:	dc000515 	stw	r16,20(sp)
 200e358:	df000604 	addi	fp,sp,24
 200e35c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 200e360:	00bffa04 	movi	r2,-24
 200e364:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 200e368:	d0a6f617 	ldw	r2,-25640(gp)
 200e36c:	e0bffc15 	stw	r2,-16(fp)
 200e370:	e03ffd0d 	sth	zero,-12(fp)
 200e374:	e0bffd0b 	ldhu	r2,-12(fp)
 200e378:	e0fffd84 	addi	r3,fp,-10
 200e37c:	180d883a 	mov	r6,r3
 200e380:	100b883a 	mov	r5,r2
 200e384:	e13ffc17 	ldw	r4,-16(fp)
 200e388:	200a0fc0 	call	200a0fc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200e38c:	e03ffa15 	stw	zero,-24(fp)
 200e390:	00001d06 	br	200e408 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 200e394:	04008074 	movhi	r16,513
 200e398:	843c8b04 	addi	r16,r16,-3540
 200e39c:	e0bffa17 	ldw	r2,-24(fp)
 200e3a0:	01400304 	movi	r5,12
 200e3a4:	1009883a 	mov	r4,r2
 200e3a8:	200348c0 	call	200348c <__mulsi3>
 200e3ac:	8085883a 	add	r2,r16,r2
 200e3b0:	10800017 	ldw	r2,0(r2)
 200e3b4:	1000111e 	bne	r2,zero,200e3fc <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 200e3b8:	04008074 	movhi	r16,513
 200e3bc:	843c8b04 	addi	r16,r16,-3540
 200e3c0:	e0bffa17 	ldw	r2,-24(fp)
 200e3c4:	01400304 	movi	r5,12
 200e3c8:	1009883a 	mov	r4,r2
 200e3cc:	200348c0 	call	200348c <__mulsi3>
 200e3d0:	8085883a 	add	r2,r16,r2
 200e3d4:	e0fffe17 	ldw	r3,-8(fp)
 200e3d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 200e3dc:	d0e00817 	ldw	r3,-32736(gp)
 200e3e0:	e0bffa17 	ldw	r2,-24(fp)
 200e3e4:	1880020e 	bge	r3,r2,200e3f0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 200e3e8:	e0bffa17 	ldw	r2,-24(fp)
 200e3ec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 200e3f0:	e0bffa17 	ldw	r2,-24(fp)
 200e3f4:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 200e3f8:	00000606 	br	200e414 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200e3fc:	e0bffa17 	ldw	r2,-24(fp)
 200e400:	10800044 	addi	r2,r2,1
 200e404:	e0bffa15 	stw	r2,-24(fp)
 200e408:	e0bffa17 	ldw	r2,-24(fp)
 200e40c:	10800810 	cmplti	r2,r2,32
 200e410:	103fe01e 	bne	r2,zero,200e394 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 200e414:	d0a6f617 	ldw	r2,-25640(gp)
 200e418:	1009883a 	mov	r4,r2
 200e41c:	200a4740 	call	200a474 <OSSemPost>

  return rc;
 200e420:	e0bffb17 	ldw	r2,-20(fp)
}
 200e424:	e6ffff04 	addi	sp,fp,-4
 200e428:	dfc00217 	ldw	ra,8(sp)
 200e42c:	df000117 	ldw	fp,4(sp)
 200e430:	dc000017 	ldw	r16,0(sp)
 200e434:	dec00304 	addi	sp,sp,12
 200e438:	f800283a 	ret

0200e43c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 200e43c:	defffe04 	addi	sp,sp,-8
 200e440:	df000115 	stw	fp,4(sp)
 200e444:	df000104 	addi	fp,sp,4
 200e448:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 200e44c:	e0bfff17 	ldw	r2,-4(fp)
 200e450:	10bffe84 	addi	r2,r2,-6
 200e454:	10c00428 	cmpgeui	r3,r2,16
 200e458:	18001a1e 	bne	r3,zero,200e4c4 <alt_exception_cause_generated_bad_addr+0x88>
 200e45c:	100690ba 	slli	r3,r2,2
 200e460:	00808074 	movhi	r2,513
 200e464:	10b91d04 	addi	r2,r2,-7052
 200e468:	1885883a 	add	r2,r3,r2
 200e46c:	10800017 	ldw	r2,0(r2)
 200e470:	1000683a 	jmp	r2
 200e474:	0200e4b4 	movhi	r8,914
 200e478:	0200e4b4 	movhi	r8,914
 200e47c:	0200e4c4 	movi	r8,915
 200e480:	0200e4c4 	movi	r8,915
 200e484:	0200e4c4 	movi	r8,915
 200e488:	0200e4b4 	movhi	r8,914
 200e48c:	0200e4bc 	xorhi	r8,zero,914
 200e490:	0200e4c4 	movi	r8,915
 200e494:	0200e4b4 	movhi	r8,914
 200e498:	0200e4b4 	movhi	r8,914
 200e49c:	0200e4c4 	movi	r8,915
 200e4a0:	0200e4b4 	movhi	r8,914
 200e4a4:	0200e4bc 	xorhi	r8,zero,914
 200e4a8:	0200e4c4 	movi	r8,915
 200e4ac:	0200e4c4 	movi	r8,915
 200e4b0:	0200e4b4 	movhi	r8,914
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 200e4b4:	00800044 	movi	r2,1
 200e4b8:	00000306 	br	200e4c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 200e4bc:	0005883a 	mov	r2,zero
 200e4c0:	00000106 	br	200e4c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 200e4c4:	0005883a 	mov	r2,zero
  }
}
 200e4c8:	e037883a 	mov	sp,fp
 200e4cc:	df000017 	ldw	fp,0(sp)
 200e4d0:	dec00104 	addi	sp,sp,4
 200e4d4:	f800283a 	ret

0200e4d8 <atexit>:
 200e4d8:	200b883a 	mov	r5,r4
 200e4dc:	000f883a 	mov	r7,zero
 200e4e0:	000d883a 	mov	r6,zero
 200e4e4:	0009883a 	mov	r4,zero
 200e4e8:	200e5a01 	jmpi	200e5a0 <__register_exitproc>

0200e4ec <exit>:
 200e4ec:	defffe04 	addi	sp,sp,-8
 200e4f0:	000b883a 	mov	r5,zero
 200e4f4:	dc000015 	stw	r16,0(sp)
 200e4f8:	dfc00115 	stw	ra,4(sp)
 200e4fc:	2021883a 	mov	r16,r4
 200e500:	200e6b80 	call	200e6b8 <__call_exitprocs>
 200e504:	00808074 	movhi	r2,513
 200e508:	10810604 	addi	r2,r2,1048
 200e50c:	11000017 	ldw	r4,0(r2)
 200e510:	20800f17 	ldw	r2,60(r4)
 200e514:	10000126 	beq	r2,zero,200e51c <exit+0x30>
 200e518:	103ee83a 	callr	r2
 200e51c:	8009883a 	mov	r4,r16
 200e520:	200e8380 	call	200e838 <_exit>

0200e524 <memcmp>:
 200e524:	01c000c4 	movi	r7,3
 200e528:	3980192e 	bgeu	r7,r6,200e590 <memcmp+0x6c>
 200e52c:	2144b03a 	or	r2,r4,r5
 200e530:	11c4703a 	and	r2,r2,r7
 200e534:	10000f26 	beq	r2,zero,200e574 <memcmp+0x50>
 200e538:	20800003 	ldbu	r2,0(r4)
 200e53c:	28c00003 	ldbu	r3,0(r5)
 200e540:	10c0151e 	bne	r2,r3,200e598 <memcmp+0x74>
 200e544:	31bfff84 	addi	r6,r6,-2
 200e548:	01ffffc4 	movi	r7,-1
 200e54c:	00000406 	br	200e560 <memcmp+0x3c>
 200e550:	20800003 	ldbu	r2,0(r4)
 200e554:	28c00003 	ldbu	r3,0(r5)
 200e558:	31bfffc4 	addi	r6,r6,-1
 200e55c:	10c00e1e 	bne	r2,r3,200e598 <memcmp+0x74>
 200e560:	21000044 	addi	r4,r4,1
 200e564:	29400044 	addi	r5,r5,1
 200e568:	31fff91e 	bne	r6,r7,200e550 <memcmp+0x2c>
 200e56c:	0005883a 	mov	r2,zero
 200e570:	f800283a 	ret
 200e574:	20c00017 	ldw	r3,0(r4)
 200e578:	28800017 	ldw	r2,0(r5)
 200e57c:	18bfee1e 	bne	r3,r2,200e538 <memcmp+0x14>
 200e580:	31bfff04 	addi	r6,r6,-4
 200e584:	21000104 	addi	r4,r4,4
 200e588:	29400104 	addi	r5,r5,4
 200e58c:	39bff936 	bltu	r7,r6,200e574 <memcmp+0x50>
 200e590:	303fe91e 	bne	r6,zero,200e538 <memcmp+0x14>
 200e594:	003ff506 	br	200e56c <memcmp+0x48>
 200e598:	10c5c83a 	sub	r2,r2,r3
 200e59c:	f800283a 	ret

0200e5a0 <__register_exitproc>:
 200e5a0:	defffa04 	addi	sp,sp,-24
 200e5a4:	dc000315 	stw	r16,12(sp)
 200e5a8:	04008074 	movhi	r16,513
 200e5ac:	84010604 	addi	r16,r16,1048
 200e5b0:	80c00017 	ldw	r3,0(r16)
 200e5b4:	dc400415 	stw	r17,16(sp)
 200e5b8:	dfc00515 	stw	ra,20(sp)
 200e5bc:	18805217 	ldw	r2,328(r3)
 200e5c0:	2023883a 	mov	r17,r4
 200e5c4:	10003726 	beq	r2,zero,200e6a4 <__register_exitproc+0x104>
 200e5c8:	10c00117 	ldw	r3,4(r2)
 200e5cc:	010007c4 	movi	r4,31
 200e5d0:	20c00e16 	blt	r4,r3,200e60c <__register_exitproc+0x6c>
 200e5d4:	1a000044 	addi	r8,r3,1
 200e5d8:	8800221e 	bne	r17,zero,200e664 <__register_exitproc+0xc4>
 200e5dc:	18c00084 	addi	r3,r3,2
 200e5e0:	18c7883a 	add	r3,r3,r3
 200e5e4:	18c7883a 	add	r3,r3,r3
 200e5e8:	12000115 	stw	r8,4(r2)
 200e5ec:	10c7883a 	add	r3,r2,r3
 200e5f0:	19400015 	stw	r5,0(r3)
 200e5f4:	0005883a 	mov	r2,zero
 200e5f8:	dfc00517 	ldw	ra,20(sp)
 200e5fc:	dc400417 	ldw	r17,16(sp)
 200e600:	dc000317 	ldw	r16,12(sp)
 200e604:	dec00604 	addi	sp,sp,24
 200e608:	f800283a 	ret
 200e60c:	00800034 	movhi	r2,0
 200e610:	10800004 	addi	r2,r2,0
 200e614:	10002626 	beq	r2,zero,200e6b0 <__register_exitproc+0x110>
 200e618:	01006404 	movi	r4,400
 200e61c:	d9400015 	stw	r5,0(sp)
 200e620:	d9800115 	stw	r6,4(sp)
 200e624:	d9c00215 	stw	r7,8(sp)
 200e628:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 200e62c:	d9400017 	ldw	r5,0(sp)
 200e630:	d9800117 	ldw	r6,4(sp)
 200e634:	d9c00217 	ldw	r7,8(sp)
 200e638:	10001d26 	beq	r2,zero,200e6b0 <__register_exitproc+0x110>
 200e63c:	81000017 	ldw	r4,0(r16)
 200e640:	10000115 	stw	zero,4(r2)
 200e644:	02000044 	movi	r8,1
 200e648:	22405217 	ldw	r9,328(r4)
 200e64c:	0007883a 	mov	r3,zero
 200e650:	12400015 	stw	r9,0(r2)
 200e654:	20805215 	stw	r2,328(r4)
 200e658:	10006215 	stw	zero,392(r2)
 200e65c:	10006315 	stw	zero,396(r2)
 200e660:	883fde26 	beq	r17,zero,200e5dc <__register_exitproc+0x3c>
 200e664:	18c9883a 	add	r4,r3,r3
 200e668:	2109883a 	add	r4,r4,r4
 200e66c:	1109883a 	add	r4,r2,r4
 200e670:	21802215 	stw	r6,136(r4)
 200e674:	01800044 	movi	r6,1
 200e678:	12406217 	ldw	r9,392(r2)
 200e67c:	30cc983a 	sll	r6,r6,r3
 200e680:	4992b03a 	or	r9,r9,r6
 200e684:	12406215 	stw	r9,392(r2)
 200e688:	21c04215 	stw	r7,264(r4)
 200e68c:	01000084 	movi	r4,2
 200e690:	893fd21e 	bne	r17,r4,200e5dc <__register_exitproc+0x3c>
 200e694:	11006317 	ldw	r4,396(r2)
 200e698:	218cb03a 	or	r6,r4,r6
 200e69c:	11806315 	stw	r6,396(r2)
 200e6a0:	003fce06 	br	200e5dc <__register_exitproc+0x3c>
 200e6a4:	18805304 	addi	r2,r3,332
 200e6a8:	18805215 	stw	r2,328(r3)
 200e6ac:	003fc606 	br	200e5c8 <__register_exitproc+0x28>
 200e6b0:	00bfffc4 	movi	r2,-1
 200e6b4:	003fd006 	br	200e5f8 <__register_exitproc+0x58>

0200e6b8 <__call_exitprocs>:
 200e6b8:	defff504 	addi	sp,sp,-44
 200e6bc:	df000915 	stw	fp,36(sp)
 200e6c0:	dd400615 	stw	r21,24(sp)
 200e6c4:	dc800315 	stw	r18,12(sp)
 200e6c8:	dfc00a15 	stw	ra,40(sp)
 200e6cc:	ddc00815 	stw	r23,32(sp)
 200e6d0:	dd800715 	stw	r22,28(sp)
 200e6d4:	dd000515 	stw	r20,20(sp)
 200e6d8:	dcc00415 	stw	r19,16(sp)
 200e6dc:	dc400215 	stw	r17,8(sp)
 200e6e0:	dc000115 	stw	r16,4(sp)
 200e6e4:	d9000015 	stw	r4,0(sp)
 200e6e8:	2839883a 	mov	fp,r5
 200e6ec:	04800044 	movi	r18,1
 200e6f0:	057fffc4 	movi	r21,-1
 200e6f4:	00808074 	movhi	r2,513
 200e6f8:	10810604 	addi	r2,r2,1048
 200e6fc:	12000017 	ldw	r8,0(r2)
 200e700:	45005217 	ldw	r20,328(r8)
 200e704:	44c05204 	addi	r19,r8,328
 200e708:	a0001c26 	beq	r20,zero,200e77c <__call_exitprocs+0xc4>
 200e70c:	a0800117 	ldw	r2,4(r20)
 200e710:	15ffffc4 	addi	r23,r2,-1
 200e714:	b8000d16 	blt	r23,zero,200e74c <__call_exitprocs+0x94>
 200e718:	14000044 	addi	r16,r2,1
 200e71c:	8421883a 	add	r16,r16,r16
 200e720:	8421883a 	add	r16,r16,r16
 200e724:	84402004 	addi	r17,r16,128
 200e728:	a463883a 	add	r17,r20,r17
 200e72c:	a421883a 	add	r16,r20,r16
 200e730:	e0001e26 	beq	fp,zero,200e7ac <__call_exitprocs+0xf4>
 200e734:	80804017 	ldw	r2,256(r16)
 200e738:	e0801c26 	beq	fp,r2,200e7ac <__call_exitprocs+0xf4>
 200e73c:	bdffffc4 	addi	r23,r23,-1
 200e740:	843fff04 	addi	r16,r16,-4
 200e744:	8c7fff04 	addi	r17,r17,-4
 200e748:	bd7ff91e 	bne	r23,r21,200e730 <__call_exitprocs+0x78>
 200e74c:	00800034 	movhi	r2,0
 200e750:	10800004 	addi	r2,r2,0
 200e754:	10000926 	beq	r2,zero,200e77c <__call_exitprocs+0xc4>
 200e758:	a0800117 	ldw	r2,4(r20)
 200e75c:	1000301e 	bne	r2,zero,200e820 <__call_exitprocs+0x168>
 200e760:	a0800017 	ldw	r2,0(r20)
 200e764:	10003226 	beq	r2,zero,200e830 <__call_exitprocs+0x178>
 200e768:	a009883a 	mov	r4,r20
 200e76c:	98800015 	stw	r2,0(r19)
 200e770:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 200e774:	9d000017 	ldw	r20,0(r19)
 200e778:	a03fe41e 	bne	r20,zero,200e70c <__call_exitprocs+0x54>
 200e77c:	dfc00a17 	ldw	ra,40(sp)
 200e780:	df000917 	ldw	fp,36(sp)
 200e784:	ddc00817 	ldw	r23,32(sp)
 200e788:	dd800717 	ldw	r22,28(sp)
 200e78c:	dd400617 	ldw	r21,24(sp)
 200e790:	dd000517 	ldw	r20,20(sp)
 200e794:	dcc00417 	ldw	r19,16(sp)
 200e798:	dc800317 	ldw	r18,12(sp)
 200e79c:	dc400217 	ldw	r17,8(sp)
 200e7a0:	dc000117 	ldw	r16,4(sp)
 200e7a4:	dec00b04 	addi	sp,sp,44
 200e7a8:	f800283a 	ret
 200e7ac:	a0800117 	ldw	r2,4(r20)
 200e7b0:	80c00017 	ldw	r3,0(r16)
 200e7b4:	10bfffc4 	addi	r2,r2,-1
 200e7b8:	15c01426 	beq	r2,r23,200e80c <__call_exitprocs+0x154>
 200e7bc:	80000015 	stw	zero,0(r16)
 200e7c0:	183fde26 	beq	r3,zero,200e73c <__call_exitprocs+0x84>
 200e7c4:	95c8983a 	sll	r4,r18,r23
 200e7c8:	a0806217 	ldw	r2,392(r20)
 200e7cc:	a5800117 	ldw	r22,4(r20)
 200e7d0:	2084703a 	and	r2,r4,r2
 200e7d4:	10000b26 	beq	r2,zero,200e804 <__call_exitprocs+0x14c>
 200e7d8:	a0806317 	ldw	r2,396(r20)
 200e7dc:	2088703a 	and	r4,r4,r2
 200e7e0:	20000c1e 	bne	r4,zero,200e814 <__call_exitprocs+0x15c>
 200e7e4:	89400017 	ldw	r5,0(r17)
 200e7e8:	d9000017 	ldw	r4,0(sp)
 200e7ec:	183ee83a 	callr	r3
 200e7f0:	a0800117 	ldw	r2,4(r20)
 200e7f4:	15bfbf1e 	bne	r2,r22,200e6f4 <__call_exitprocs+0x3c>
 200e7f8:	98800017 	ldw	r2,0(r19)
 200e7fc:	153fcf26 	beq	r2,r20,200e73c <__call_exitprocs+0x84>
 200e800:	003fbc06 	br	200e6f4 <__call_exitprocs+0x3c>
 200e804:	183ee83a 	callr	r3
 200e808:	003ff906 	br	200e7f0 <__call_exitprocs+0x138>
 200e80c:	a5c00115 	stw	r23,4(r20)
 200e810:	003feb06 	br	200e7c0 <__call_exitprocs+0x108>
 200e814:	89000017 	ldw	r4,0(r17)
 200e818:	183ee83a 	callr	r3
 200e81c:	003ff406 	br	200e7f0 <__call_exitprocs+0x138>
 200e820:	a0800017 	ldw	r2,0(r20)
 200e824:	a027883a 	mov	r19,r20
 200e828:	1029883a 	mov	r20,r2
 200e82c:	003fb606 	br	200e708 <__call_exitprocs+0x50>
 200e830:	0005883a 	mov	r2,zero
 200e834:	003ffb06 	br	200e824 <__call_exitprocs+0x16c>

0200e838 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200e838:	defffd04 	addi	sp,sp,-12
 200e83c:	df000215 	stw	fp,8(sp)
 200e840:	df000204 	addi	fp,sp,8
 200e844:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200e848:	d026fe45 	stb	zero,-25607(gp)
 200e84c:	e0bfff17 	ldw	r2,-4(fp)
 200e850:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 200e854:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200e858:	10000226 	beq	r2,zero,200e864 <_exit+0x2c>
    ALT_SIM_FAIL();
 200e85c:	002af070 	cmpltui	zero,zero,43969
 200e860:	00000106 	br	200e868 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 200e864:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200e868:	003fff06 	br	200e868 <_exit+0x30>
