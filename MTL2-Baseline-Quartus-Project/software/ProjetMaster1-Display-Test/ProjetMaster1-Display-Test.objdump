
ProjetMaster1-Display-Test.elf:     file format elf32-littlenios2
ProjetMaster1-Display-Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001303c memsz 0x0001303c flags r-x
    LOAD off    0x0001405c vaddr 0x0201305c paddr 0x02014b74 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x0001668c vaddr 0x0201668c paddr 0x0201668c align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012a18  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003fc  02012c60  02012c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0201305c  02014b74  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  0201668c  0201668c  0001668c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  00015b74  2**0
                  CONTENTS
  7 .sdram_controller 00000000  020167fc  020167fc  00015b74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015b74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ee8  00000000  00000000  00015b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00021248  00000000  00000000  00016a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000082c2  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab4a  00000000  00000000  0003ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023c4  00000000  00000000  0004aad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fcb  00000000  00000000  0004ce98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008a9b  00000000  00000000  00050e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00059900  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001308  00000000  00000000  00059930  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005df46  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0005df49  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005df4c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005df4d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005df4e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005df52  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005df56  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005df5a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005df63  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005df6c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0005df75  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  0005df7e  2**0
                  CONTENTS, READONLY
 30 .jdi          00005000  00000000  00000000  0005dfb2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006901b  00000000  00000000  00062fb2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
02012c60 l    d  .rodata	00000000 .rodata
0201305c l    d  .rwdata	00000000 .rwdata
0201668c l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
020167fc l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ProjetMaster1-Display-Test_bsp//obj/HAL/src/crt0.o
02000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02000a2c l     F .text	000000f0 __sbprintf
02002c3c l     F .text	0000020c cvt
02002e48 l     F .text	00000140 exponent
02012e36 l     O .rodata	00000010 blanks.4403
02012e46 l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02003128 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02005434 l     F .text	000000f4 std
0201668c l     O .bss	00000004 __sfp_lock
02016690 l     O .bss	00000004 __sinit_lock
02005930 l     F .text	00000024 __fp_lock
02005954 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201305c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
02013480 l     O .rwdata	00000038 lconv
020134b8 l     O .rwdata	00000020 lc_ctype_charset
020134d8 l     O .rwdata	00000020 lc_message_charset
020166a0 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
02006c84 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02012f9c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200af80 l     F .text	000000f0 __sbprintf
02012ff2 l     O .rodata	00000010 blanks.4348
02013002 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02010070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0201017c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020101a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02010294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02010374 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02010460 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02010634 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02014b64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02010880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020109b4 l     F .text	00000034 alt_dev_reg
02013aa8 l     O .rwdata	00001060 jtag_uart
02014b08 l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02010ca4 l     F .text	00000210 altera_avalon_jtag_uart_irq
02010eb4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020114ec l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02011b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02011d64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02012024 l     F .text	0000003c alt_get_errno
02012060 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020166d0 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
020166cc g     O .bss	00000004 alt_instruction_exception_handler
02009a88 g     F .text	000000b0 _mprec_log10
02009c08 g     F .text	00000134 __any_on
0200ca68 g     F .text	00000060 _isatty_r
02012f74 g     O .rodata	00000028 __mprec_tinytens
02010570 g     F .text	0000007c alt_main
020007e8 g     F .text	00000118 _puts_r
020166fc g     O .bss	00000100 alt_irq
0200cac8 g     F .text	00000070 _lseek_r
02014b74 g       *ABS*	00000000 __flash_rwdata_start
0200edd0 g     F .text	00000088 .hidden __eqdf2
020167fc g       *ABS*	00000000 __alt_heap_start
02000780 g     F .text	00000068 printf
0200cd50 g     F .text	000000d4 _wcrtomb_r
0200ac10 g     F .text	000000a0 __sseek
020057d8 g     F .text	000000d8 __sinit
0200cba8 g     F .text	00000168 __swbuf_r
020068b4 g     F .text	00000084 _setlocale_r
02005528 g     F .text	000000a4 __sfmoreglue
02010610 g     F .text	00000024 __malloc_unlock
02007ef8 g     F .text	00000208 memmove
020057a4 g     F .text	00000034 _cleanup
020082c4 g     F .text	00000130 _Balloc
0200ee58 g     F .text	000000dc .hidden __gtdf2
0201241c g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000001c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
02011728 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200ca00 g     F .text	00000068 _fstat_r
020166b0 g     O .bss	00000004 errno
0200ab2c g     F .text	00000030 __seofread
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
020166b8 g     O .bss	00000004 alt_argv
0201cb34 g       *ABS*	00000000 _gp
02013928 g     O .rwdata	00000180 alt_fd_list
02011ca0 g     F .text	00000090 alt_find_dev
02007d70 g     F .text	00000188 memcpy
02005760 g     F .text	00000044 _cleanup_r
020005dc g     F .text	000000dc .hidden __floatsidf
02011e28 g     F .text	0000007c alt_io_redirect
020004e8 g     F .text	000000f4 .hidden __ltdf2
02012c60 g       *ABS*	00000000 __DTOR_END__
02000900 g     F .text	00000038 puts
0201267c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0200a92c g     F .text	00000104 __fpclassifyd
0200996c g     F .text	0000011c __ratio
0200b070 g     F .text	00000050 __vfiprintf_internal
020110ac g     F .text	0000021c altera_avalon_jtag_uart_read
0200071c g     F .text	00000064 _printf_r
0200db80 g     F .text	00000064 .hidden __udivsi3
020102d0 g     F .text	000000a4 isatty
02012e84 g     O .rodata	000000c8 __mprec_tens
02006938 g     F .text	00000024 __locale_charset
020125ec g     F .text	00000090 alt_icache_flush
020166a4 g     O .bss	00000004 __malloc_top_pad
02014b3c g     O .rwdata	00000004 __mb_cur_max
020069c0 g     F .text	00000028 _localeconv_r
0200890c g     F .text	00000058 __i2b
02006124 g     F .text	000005dc __sfvwrite_r
0200aa30 g     F .text	00000060 _sbrk_r
0200cb38 g     F .text	00000070 _read_r
02014b5c g     O .rwdata	00000004 alt_max_fd
0200c5b8 g     F .text	0000012c _fclose_r
020053e0 g     F .text	00000054 fflush
020166a8 g     O .bss	00000004 __malloc_max_sbrked_mem
02011ea4 g     F .text	00000180 alt_irq_register
0200dc3c g     F .text	000008ac .hidden __adddf3
02009528 g     F .text	00000204 __b2d
0200d550 g     F .text	00000538 .hidden __umoddi3
0201049c g     F .text	000000d4 lseek
02014b38 g     O .rwdata	00000004 _global_impure_ptr
02009d3c g     F .text	00000bf0 _realloc_r
020167fc g       *ABS*	00000000 __bss_end
02012314 g     F .text	00000108 alt_tick
0200cfd8 g     F .text	00000578 .hidden __udivdi3
0200c910 g     F .text	00000088 _fputwc_r
02012f4c g     O .rodata	00000028 __mprec_bigtens
02008604 g     F .text	0000018c __s2b
0200ffc8 g     F .text	000000a8 .hidden __floatunsidf
020090a4 g     F .text	00000114 __mcmp
02005978 g     F .text	00000040 __fp_lock_all
02012278 g     F .text	0000009c alt_alarm_stop
020166c0 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d8 alt_irq_handler
02013900 g     O .rwdata	00000028 alt_dev_null
02011ab8 g     F .text	00000048 alt_dcache_flush_all
02008790 g     F .text	00000090 __hi0bits
0200ff48 g     F .text	00000080 .hidden __fixdfsi
02014b74 g       *ABS*	00000000 __ram_rwdata_end
02014b54 g     O .rwdata	00000008 alt_dev_list
020108bc g     F .text	000000f8 write
0201305c g       *ABS*	00000000 __ram_rodata_end
020101e4 g     F .text	000000b0 fstat
020004e8 g     F .text	000000f4 .hidden __ledf2
02008d34 g     F .text	00000178 __pow5mult
0200b0c0 g     F .text	000012c4 ___vfiprintf_internal_r
02016694 g     O .bss	00000004 __nlocale_changed
0200dbe4 g     F .text	00000058 .hidden __umodsi3
020167fc g       *ABS*	00000000 end
02010bf0 g     F .text	000000b4 altera_avalon_jtag_uart_init
020001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
02012c60 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02011568 g     F .text	00000074 alt_avalon_timer_sc_init
020006b8 g     F .text	00000064 .hidden __clzsi2
020112c8 g     F .text	00000224 altera_avalon_jtag_uart_write
020058b0 g     F .text	00000020 __sfp_lock_acquire
02007bb4 g     F .text	000001bc memchr
02000b6c g     F .text	000020d0 ___vfprintf_internal_r
020059f8 g     F .text	00000560 _free_r
0200695c g     F .text	00000020 __locale_mb_cur_max
02012a40 g     F .text	000001ec __call_exitprocs
02016698 g     O .bss	00000004 __mlocale_changed
02014b44 g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000004c _start
020166c4 g     O .bss	00000004 _alt_tick_rate
02008eac g     F .text	000001f8 __lshift
020166c8 g     O .bss	00000004 _alt_nticks
02010670 g     F .text	000000fc read
02010a20 g     F .text	0000006c alt_sys_init
02011618 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
020128d0 g     F .text	00000170 __register_exitproc
02008964 g     F .text	000003d0 __multiply
02010f54 g     F .text	00000068 altera_avalon_jtag_uart_close
0201305c g       *ABS*	00000000 __ram_rwdata_start
02012c60 g       *ABS*	00000000 __ram_rodata_start
020166d4 g     O .bss	00000028 __malloc_current_mallinfo
0200972c g     F .text	00000240 __d2b
02010a8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02012548 g     F .text	000000a4 alt_get_fd
020117f4 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
0200c3f4 g     F .text	00000060 _close_r
0201279c g     F .text	00000134 memcmp
02010b4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020167fc g       *ABS*	00000000 __alt_stack_base
02010b9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02002f88 g     F .text	000001a0 __swsetup_r
0200e4e8 g     F .text	000008e8 .hidden __divdf3
020055cc g     F .text	00000194 __sfp
02009b38 g     F .text	000000d0 __copybits
020134f8 g     O .rwdata	00000408 __malloc_av_
02005910 g     F .text	00000020 __sinit_lock_release
0200ef34 g     F .text	00000718 .hidden __muldf3
0200aa90 g     F .text	0000009c __sread
02012440 g     F .text	00000108 alt_find_file
02011b3c g     F .text	000000a4 alt_dev_llist_insert
020105ec g     F .text	00000024 __malloc_lock
020107d0 g     F .text	000000b0 sbrk
02005358 g     F .text	00000088 _fflush_r
0200c454 g     F .text	00000164 _calloc_r
0201668c g       *ABS*	00000000 __bss_start
02008100 g     F .text	000001c4 memset
02000294 g     F .text	00000254 main
020166bc g     O .bss	00000004 alt_envp
020166ac g     O .bss	00000004 __malloc_max_total_mem
02010aec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200cd10 g     F .text	00000040 __swbuf
0200acb0 g     F .text	00000054 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200c6e4 g     F .text	00000038 fclose
020034dc g     F .text	00001b78 _dtoa_r
02007038 g     F .text	00000b7c _malloc_r
0200cf60 g     F .text	00000078 __ascii_wctomb
02014b60 g     O .rwdata	00000004 alt_errno
02006700 g     F .text	000000d8 _fwalk
0200da88 g     F .text	00000084 .hidden __divsi3
02005f58 g     F .text	000001cc _malloc_trim_r
02012c60 g       *ABS*	00000000 __CTOR_END__
0200ad04 g     F .text	00000140 strcmp
02012c60 g       *ABS*	00000000 __flash_rodata_start
02012c60 g       *ABS*	00000000 __DTOR_LIST__
0200edd0 g     F .text	00000088 .hidden __nedf2
020109e8 g     F .text	00000038 alt_irq_init
0201076c g     F .text	00000064 alt_release_fd
02012cd3 g     O .rodata	00000100 .hidden __clz_tab
0201669c g     O .bss	00000004 _PathLocale
02012718 g     F .text	0000003c atexit
0200c384 g     F .text	00000070 _write_r
020069e8 g     F .text	00000040 setlocale
02014b34 g     O .rwdata	00000004 _impure_ptr
020166b4 g     O .bss	00000004 alt_argc
02005054 g     F .text	00000304 __sflush_r
02011c40 g     F .text	00000060 _do_dtors
020069a0 g     F .text	00000020 __locale_cjk_lang
02000020 g       .exceptions	00000000 alt_irq_entry
0200945c g     F .text	000000cc __ulp
020059b8 g     F .text	00000040 __fp_unlock_all
02014b4c g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
020115dc g     F .text	0000003c alt_up_accelerometer_spi_open_dev
02006a28 g     F .text	00000030 localeconv
02014b74 g       *ABS*	00000000 _edata
020167fc g       *ABS*	00000000 _end
0200c71c g     F .text	000001f4 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
02010fbc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0200ab5c g     F .text	000000b4 __swrite
02014b40 g     O .rwdata	00000004 __malloc_trim_threshold
0200697c g     F .text	00000024 __locale_msgcharset
02012754 g     F .text	00000048 exit
020067d8 g     F .text	000000dc _fwalk_reent
020091b8 g     F .text	000002a4 __mdiff
0200db0c g     F .text	00000074 .hidden __modsi3
020118c0 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020058d0 g     F .text	00000020 __sfp_lock_release
02012c2c g     F .text	00000034 _exit
0201198c g     F .text	0000012c alt_alarm_start
0201165c g     F .text	00000068 alt_up_accelerometer_spi_read
020116c4 g     F .text	00000064 alt_up_accelerometer_spi_write
02006a58 g     F .text	0000022c __smakebuf_r
02000938 g     F .text	000000f4 strlen
02012124 g     F .text	00000154 open
0200ee58 g     F .text	000000dc .hidden __gedf2
02014b48 g     O .rwdata	00000004 __wctomb
0200ae44 g     F .text	0000013c __sprint_r
02011d30 g     F .text	00000034 alt_icache_flush_all
02014b68 g     O .rwdata	00000004 alt_priority_mask
02000b1c g     F .text	00000050 __vfprintf_internal
0200cefc g     F .text	00000064 _wctomb_r
0200f64c g     F .text	000008fc .hidden __subdf3
02008820 g     F .text	000000ec __lo0bits
02014b6c g     O .rwdata	00000008 alt_alarm_list
02011be0 g     F .text	00000060 _do_ctors
0200ce24 g     F .text	000000d8 wcrtomb
020100ac g     F .text	000000d0 close
020103dc g     F .text	00000084 alt_load
0200c998 g     F .text	00000068 fputwc
020058f0 g     F .text	00000020 __sinit_lock_acquire
02008470 g     F .text	00000194 __multadd
020083f4 g     F .text	0000007c _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_mem_Nios_PI-0x200000>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d40 	call	20001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001526 	beq	r2,zero,2000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200013c:	00808074 	movhi	r2,513
 2000140:	1099bf04 	addi	r2,r2,26364
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	1099bf04 	addi	r2,r2,26364
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	e17ffd17 	ldw	r5,-12(fp)
 2000174:	1009883a 	mov	r4,r2
 2000178:	183ee83a 	callr	r3
#endif
        break;
 200017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000180:	0005313a 	rdctl	r2,ipending
 2000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000188:	e0bfff17 	ldw	r2,-4(fp)
 200018c:	00000706 	br	20001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 2000190:	e0bffc17 	ldw	r2,-16(fp)
 2000194:	1085883a 	add	r2,r2,r2
 2000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 200019c:	e0bffd17 	ldw	r2,-12(fp)
 20001a0:	10800044 	addi	r2,r2,1
 20001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a8:	003fe006 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001b0:	e0bffb17 	ldw	r2,-20(fp)
 20001b4:	103fda1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b8:	0001883a 	nop
}
 20001bc:	0001883a 	nop
 20001c0:	e037883a 	mov	sp,fp
 20001c4:	dfc00117 	ldw	ra,4(sp)
 20001c8:	df000017 	ldw	fp,0(sp)
 20001cc:	dec00204 	addi	sp,sp,8
 20001d0:	f800283a 	ret

020001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d4:	defffb04 	addi	sp,sp,-20
 20001d8:	dfc00415 	stw	ra,16(sp)
 20001dc:	df000315 	stw	fp,12(sp)
 20001e0:	df000304 	addi	fp,sp,12
 20001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e8:	000531fa 	rdctl	r2,exception
 20001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001f0:	e0bffd17 	ldw	r2,-12(fp)
 20001f4:	10801f0c 	andi	r2,r2,124
 20001f8:	1004d0ba 	srli	r2,r2,2
 20001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 2000200:	0005333a 	rdctl	r2,badaddr
 2000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000208:	d0a6e617 	ldw	r2,-25704(gp)
 200020c:	10000726 	beq	r2,zero,200022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000210:	d0a6e617 	ldw	r2,-25704(gp)
 2000214:	e0fffd17 	ldw	r3,-12(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	e17fff17 	ldw	r5,-4(fp)
 2000220:	1809883a 	mov	r4,r3
 2000224:	103ee83a 	callr	r2
 2000228:	00000206 	br	2000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 200022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000230:	0005883a 	mov	r2,zero
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 200024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000254:	00bffd16 	blt	zero,r2,200024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000260:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 2000264:	d6b2cd14 	ori	gp,gp,52020
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000268:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 200026c:	1099a314 	ori	r2,r2,26252

    movhi r3, %hi(__bss_end)
 2000270:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 2000274:	18d9ff14 	ori	r3,r3,26620

    beq r2, r3, 1f
 2000278:	10c00326 	beq	r2,r3,2000288 <_start+0x40>

0:
    stw zero, (r2)
 200027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000284:	10fffd36 	bltu	r2,r3,200027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000288:	20103dc0 	call	20103dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200028c:	20105700 	call	2010570 <alt_main>

02000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000290:	003fff06 	br	2000290 <alt_after_alt_main>

02000294 <main>:
#else
    #define DEBUG_PRINT
#endif

int main()
{
 2000294:	defff704 	addi	sp,sp,-36
 2000298:	dfc00815 	stw	ra,32(sp)
 200029c:	df000715 	stw	fp,28(sp)
 20002a0:	df000704 	addi	fp,sp,28
	int x_axis,x_prev, y_axis, y_prev;

	//Accelerometer part: definition of it (by his name, and the definition of the value that he is returning X_value and Y_value)
	// just to check if the accelerometer is 'alive'

	const char * accel_name =ACCELEROMETER_SPI_0_NAME;
 20002a4:	00808074 	movhi	r2,513
 20002a8:	108b1804 	addi	r2,r2,11360
 20002ac:	e0bffc15 	stw	r2,-16(fp)
	alt_up_accelerometer_spi_dev * accel_spi = NULL;
 20002b0:	e03ffd15 	stw	zero,-12(fp)

	accel_spi = alt_up_accelerometer_spi_open_dev(accel_name);
 20002b4:	e13ffc17 	ldw	r4,-16(fp)
 20002b8:	20115dc0 	call	20115dc <alt_up_accelerometer_spi_open_dev>
 20002bc:	e0bffd15 	stw	r2,-12(fp)
	if(accel_spi == NULL){
 20002c0:	e0bffd17 	ldw	r2,-12(fp)
 20002c4:	1000031e 	bne	r2,zero,20002d4 <main+0x40>
		printf("Accelerometer device not found.\n");
 20002c8:	01008074 	movhi	r4,513
 20002cc:	210b1f04 	addi	r4,r4,11388
 20002d0:	20009000 	call	2000900 <puts>
	}

  IOWR(MTL_IP_BASE,13,4);
 20002d4:	00c00104 	movi	r3,4
 20002d8:	008000b4 	movhi	r2,2
 20002dc:	10800d04 	addi	r2,r2,52
 20002e0:	10c00035 	stwio	r3,0(r2)
  int val = IORD(GPIO_BASE,0);
 20002e4:	00800834 	movhi	r2,32
 20002e8:	10810004 	addi	r2,r2,1024
 20002ec:	10800037 	ldwio	r2,0(r2)
 20002f0:	e0bff915 	stw	r2,-28(fp)
  while(!val)
 20002f4:	00001806 	br	2000358 <main+0xc4>
  {
	  val = IORD(GPIO_BASE,0);
 20002f8:	00800834 	movhi	r2,32
 20002fc:	10810004 	addi	r2,r2,1024
 2000300:	10800037 	ldwio	r2,0(r2)
 2000304:	e0bff915 	stw	r2,-28(fp)
	  printf("gpio value : %d\n",val);
 2000308:	e17ff917 	ldw	r5,-28(fp)
 200030c:	01008074 	movhi	r4,513
 2000310:	210b2704 	addi	r4,r4,11420
 2000314:	20007800 	call	2000780 <printf>
  int delay;
  for (delay = 0; delay < 5*5E4;delay++);
 2000318:	e03ffa15 	stw	zero,-24(fp)
 200031c:	00000306 	br	200032c <main+0x98>
 2000320:	e0bffa17 	ldw	r2,-24(fp)
 2000324:	10800044 	addi	r2,r2,1
 2000328:	e0bffa15 	stw	r2,-24(fp)
 200032c:	e13ffa17 	ldw	r4,-24(fp)
 2000330:	20005dc0 	call	20005dc <__floatsidf>
 2000334:	1011883a 	mov	r8,r2
 2000338:	1813883a 	mov	r9,r3
 200033c:	000d883a 	mov	r6,zero
 2000340:	01d043f4 	movhi	r7,16655
 2000344:	39e12004 	addi	r7,r7,-31616
 2000348:	4009883a 	mov	r4,r8
 200034c:	480b883a 	mov	r5,r9
 2000350:	20004e80 	call	20004e8 <__ledf2>
 2000354:	103ff216 	blt	r2,zero,2000320 <main+0x8c>
		printf("Accelerometer device not found.\n");
	}

  IOWR(MTL_IP_BASE,13,4);
  int val = IORD(GPIO_BASE,0);
  while(!val)
 2000358:	e0bff917 	ldw	r2,-28(fp)
 200035c:	103fe626 	beq	r2,zero,20002f8 <main+0x64>
	  val = IORD(GPIO_BASE,0);
	  printf("gpio value : %d\n",val);
  int delay;
  for (delay = 0; delay < 5*5E4;delay++);
  }
  IOWR(MTL_IP_BASE,13,2);
 2000360:	00c00084 	movi	r3,2
 2000364:	008000b4 	movhi	r2,2
 2000368:	10800d04 	addi	r2,r2,52
 200036c:	10c00035 	stwio	r3,0(r2)

  printf("Hello from Nios II!\n");
 2000370:	01008074 	movhi	r4,513
 2000374:	210b2c04 	addi	r4,r4,11440
 2000378:	20009000 	call	2000900 <puts>
  int x = 200;
 200037c:	00803204 	movi	r2,200
 2000380:	e0bffe15 	stw	r2,-8(fp)
  int y = 180;
 2000384:	00802d04 	movi	r2,180
 2000388:	e0bfff15 	stw	r2,-4(fp)
  IOWR(MTL_IP_BASE,11,(y<<10)+x);
 200038c:	e0bfff17 	ldw	r2,-4(fp)
 2000390:	100692ba 	slli	r3,r2,10
 2000394:	e0bffe17 	ldw	r2,-8(fp)
 2000398:	1887883a 	add	r3,r3,r2
 200039c:	008000b4 	movhi	r2,2
 20003a0:	10800b04 	addi	r2,r2,44
 20003a4:	10c00035 	stwio	r3,0(r2)
  IOWR(MTL_IP_BASE,12,2);
 20003a8:	00c00084 	movi	r3,2
 20003ac:	008000b4 	movhi	r2,2
 20003b0:	10800c04 	addi	r2,r2,48
 20003b4:	10c00035 	stwio	r3,0(r2)
  IOWR(MTL_IP_BASE,13,2);
 20003b8:	00c00084 	movi	r3,2
 20003bc:	008000b4 	movhi	r2,2
 20003c0:	10800d04 	addi	r2,r2,52
 20003c4:	10c00035 	stwio	r3,0(r2)
  int delay;
  for (delay = 0; delay < 5*5E5;delay++);
 20003c8:	e03ffb15 	stw	zero,-20(fp)
 20003cc:	00000306 	br	20003dc <main+0x148>
 20003d0:	e0bffb17 	ldw	r2,-20(fp)
 20003d4:	10800044 	addi	r2,r2,1
 20003d8:	e0bffb15 	stw	r2,-20(fp)
 20003dc:	e13ffb17 	ldw	r4,-20(fp)
 20003e0:	20005dc0 	call	20005dc <__floatsidf>
 20003e4:	1011883a 	mov	r8,r2
 20003e8:	1813883a 	mov	r9,r3
 20003ec:	000d883a 	mov	r6,zero
 20003f0:	01d050f4 	movhi	r7,16707
 20003f4:	39c4b404 	addi	r7,r7,4816
 20003f8:	4009883a 	mov	r4,r8
 20003fc:	480b883a 	mov	r5,r9
 2000400:	20004e80 	call	20004e8 <__ledf2>
 2000404:	103ff216 	blt	r2,zero,20003d0 <main+0x13c>
  printf("Switch display");
 2000408:	01008074 	movhi	r4,513
 200040c:	210b3104 	addi	r4,r4,11460
 2000410:	20007800 	call	2000780 <printf>
  IOWR(MTL_IP_BASE,13,3);
 2000414:	00c000c4 	movi	r3,3
 2000418:	008000b4 	movhi	r2,2
 200041c:	10800d04 	addi	r2,r2,52
 2000420:	10c00035 	stwio	r3,0(r2)
  for (delay = 0; delay < 5*5E5;delay++);
 2000424:	e03ffb15 	stw	zero,-20(fp)
 2000428:	00000306 	br	2000438 <main+0x1a4>
 200042c:	e0bffb17 	ldw	r2,-20(fp)
 2000430:	10800044 	addi	r2,r2,1
 2000434:	e0bffb15 	stw	r2,-20(fp)
 2000438:	e13ffb17 	ldw	r4,-20(fp)
 200043c:	20005dc0 	call	20005dc <__floatsidf>
 2000440:	1011883a 	mov	r8,r2
 2000444:	1813883a 	mov	r9,r3
 2000448:	000d883a 	mov	r6,zero
 200044c:	01d050f4 	movhi	r7,16707
 2000450:	39c4b404 	addi	r7,r7,4816
 2000454:	4009883a 	mov	r4,r8
 2000458:	480b883a 	mov	r5,r9
 200045c:	20004e80 	call	20004e8 <__ledf2>
 2000460:	103ff216 	blt	r2,zero,200042c <main+0x198>
    printf("Switch display");
 2000464:	01008074 	movhi	r4,513
 2000468:	210b3104 	addi	r4,r4,11460
 200046c:	20007800 	call	2000780 <printf>
    IOWR(MTL_IP_BASE,13,4);
 2000470:	00c00104 	movi	r3,4
 2000474:	008000b4 	movhi	r2,2
 2000478:	10800d04 	addi	r2,r2,52
 200047c:	10c00035 	stwio	r3,0(r2)
  for (delay = 0; delay < 5*5E5;delay++);
 2000480:	e03ffb15 	stw	zero,-20(fp)
 2000484:	00000306 	br	2000494 <main+0x200>
 2000488:	e0bffb17 	ldw	r2,-20(fp)
 200048c:	10800044 	addi	r2,r2,1
 2000490:	e0bffb15 	stw	r2,-20(fp)
 2000494:	e13ffb17 	ldw	r4,-20(fp)
 2000498:	20005dc0 	call	20005dc <__floatsidf>
 200049c:	1011883a 	mov	r8,r2
 20004a0:	1813883a 	mov	r9,r3
 20004a4:	000d883a 	mov	r6,zero
 20004a8:	01d050f4 	movhi	r7,16707
 20004ac:	39c4b404 	addi	r7,r7,4816
 20004b0:	4009883a 	mov	r4,r8
 20004b4:	480b883a 	mov	r5,r9
 20004b8:	20004e80 	call	20004e8 <__ledf2>
 20004bc:	103ff216 	blt	r2,zero,2000488 <main+0x1f4>
  IOWR(MTL_IP_BASE,12,2);
 20004c0:	00c00084 	movi	r3,2
 20004c4:	008000b4 	movhi	r2,2
 20004c8:	10800c04 	addi	r2,r2,48
 20004cc:	10c00035 	stwio	r3,0(r2)
//  		gesture_detected = 0;
//  		for (delay = 0; delay < 5E5;delay++);
  		//OSTimeDlyHMSM(0, 0, 0, 500);


  return 0;
 20004d0:	0005883a 	mov	r2,zero
}
 20004d4:	e037883a 	mov	sp,fp
 20004d8:	dfc00117 	ldw	ra,4(sp)
 20004dc:	df000017 	ldw	fp,0(sp)
 20004e0:	dec00204 	addi	sp,sp,8
 20004e4:	f800283a 	ret

020004e8 <__ledf2>:
 20004e8:	2804d53a 	srli	r2,r5,20
 20004ec:	3810d53a 	srli	r8,r7,20
 20004f0:	00c00434 	movhi	r3,16
 20004f4:	18ffffc4 	addi	r3,r3,-1
 20004f8:	1081ffcc 	andi	r2,r2,2047
 20004fc:	0241ffc4 	movi	r9,2047
 2000500:	28d4703a 	and	r10,r5,r3
 2000504:	4201ffcc 	andi	r8,r8,2047
 2000508:	38c6703a 	and	r3,r7,r3
 200050c:	280ad7fa 	srli	r5,r5,31
 2000510:	380ed7fa 	srli	r7,r7,31
 2000514:	12401f26 	beq	r2,r9,2000594 <__ledf2+0xac>
 2000518:	0241ffc4 	movi	r9,2047
 200051c:	42401426 	beq	r8,r9,2000570 <__ledf2+0x88>
 2000520:	1000091e 	bne	r2,zero,2000548 <__ledf2+0x60>
 2000524:	2296b03a 	or	r11,r4,r10
 2000528:	5813003a 	cmpeq	r9,r11,zero
 200052c:	29403fcc 	andi	r5,r5,255
 2000530:	40000a1e 	bne	r8,zero,200055c <__ledf2+0x74>
 2000534:	30d8b03a 	or	r12,r6,r3
 2000538:	6000081e 	bne	r12,zero,200055c <__ledf2+0x74>
 200053c:	0005883a 	mov	r2,zero
 2000540:	5800111e 	bne	r11,zero,2000588 <__ledf2+0xa0>
 2000544:	f800283a 	ret
 2000548:	29403fcc 	andi	r5,r5,255
 200054c:	40000c1e 	bne	r8,zero,2000580 <__ledf2+0x98>
 2000550:	30d2b03a 	or	r9,r6,r3
 2000554:	48000c26 	beq	r9,zero,2000588 <__ledf2+0xa0>
 2000558:	0013883a 	mov	r9,zero
 200055c:	39c03fcc 	andi	r7,r7,255
 2000560:	48000826 	beq	r9,zero,2000584 <__ledf2+0x9c>
 2000564:	38001126 	beq	r7,zero,20005ac <__ledf2+0xc4>
 2000568:	00800044 	movi	r2,1
 200056c:	f800283a 	ret
 2000570:	30d2b03a 	or	r9,r6,r3
 2000574:	483fea26 	beq	r9,zero,2000520 <__ledf2+0x38>
 2000578:	00800084 	movi	r2,2
 200057c:	f800283a 	ret
 2000580:	39c03fcc 	andi	r7,r7,255
 2000584:	39400726 	beq	r7,r5,20005a4 <__ledf2+0xbc>
 2000588:	2800081e 	bne	r5,zero,20005ac <__ledf2+0xc4>
 200058c:	00800044 	movi	r2,1
 2000590:	f800283a 	ret
 2000594:	2292b03a 	or	r9,r4,r10
 2000598:	483fdf26 	beq	r9,zero,2000518 <__ledf2+0x30>
 200059c:	00800084 	movi	r2,2
 20005a0:	f800283a 	ret
 20005a4:	4080030e 	bge	r8,r2,20005b4 <__ledf2+0xcc>
 20005a8:	383fef26 	beq	r7,zero,2000568 <__ledf2+0x80>
 20005ac:	00bfffc4 	movi	r2,-1
 20005b0:	f800283a 	ret
 20005b4:	123feb16 	blt	r2,r8,2000564 <__ledf2+0x7c>
 20005b8:	1abff336 	bltu	r3,r10,2000588 <__ledf2+0xa0>
 20005bc:	50c00326 	beq	r10,r3,20005cc <__ledf2+0xe4>
 20005c0:	50c0042e 	bgeu	r10,r3,20005d4 <__ledf2+0xec>
 20005c4:	283fe81e 	bne	r5,zero,2000568 <__ledf2+0x80>
 20005c8:	003ff806 	br	20005ac <__ledf2+0xc4>
 20005cc:	313fee36 	bltu	r6,r4,2000588 <__ledf2+0xa0>
 20005d0:	21bffc36 	bltu	r4,r6,20005c4 <__ledf2+0xdc>
 20005d4:	0005883a 	mov	r2,zero
 20005d8:	f800283a 	ret

020005dc <__floatsidf>:
 20005dc:	defffd04 	addi	sp,sp,-12
 20005e0:	dfc00215 	stw	ra,8(sp)
 20005e4:	dc400115 	stw	r17,4(sp)
 20005e8:	dc000015 	stw	r16,0(sp)
 20005ec:	20002b26 	beq	r4,zero,200069c <__floatsidf+0xc0>
 20005f0:	2023883a 	mov	r17,r4
 20005f4:	2020d7fa 	srli	r16,r4,31
 20005f8:	20002d16 	blt	r4,zero,20006b0 <__floatsidf+0xd4>
 20005fc:	8809883a 	mov	r4,r17
 2000600:	20006b80 	call	20006b8 <__clzsi2>
 2000604:	01410784 	movi	r5,1054
 2000608:	288bc83a 	sub	r5,r5,r2
 200060c:	01010cc4 	movi	r4,1075
 2000610:	2149c83a 	sub	r4,r4,r5
 2000614:	00c007c4 	movi	r3,31
 2000618:	1900160e 	bge	r3,r4,2000674 <__floatsidf+0x98>
 200061c:	00c104c4 	movi	r3,1043
 2000620:	1947c83a 	sub	r3,r3,r5
 2000624:	88c6983a 	sll	r3,r17,r3
 2000628:	00800434 	movhi	r2,16
 200062c:	10bfffc4 	addi	r2,r2,-1
 2000630:	1886703a 	and	r3,r3,r2
 2000634:	2941ffcc 	andi	r5,r5,2047
 2000638:	800d883a 	mov	r6,r16
 200063c:	0005883a 	mov	r2,zero
 2000640:	280a953a 	slli	r5,r5,20
 2000644:	31803fcc 	andi	r6,r6,255
 2000648:	01000434 	movhi	r4,16
 200064c:	300c97fa 	slli	r6,r6,31
 2000650:	213fffc4 	addi	r4,r4,-1
 2000654:	1906703a 	and	r3,r3,r4
 2000658:	1946b03a 	or	r3,r3,r5
 200065c:	1986b03a 	or	r3,r3,r6
 2000660:	dfc00217 	ldw	ra,8(sp)
 2000664:	dc400117 	ldw	r17,4(sp)
 2000668:	dc000017 	ldw	r16,0(sp)
 200066c:	dec00304 	addi	sp,sp,12
 2000670:	f800283a 	ret
 2000674:	00c002c4 	movi	r3,11
 2000678:	1887c83a 	sub	r3,r3,r2
 200067c:	88c6d83a 	srl	r3,r17,r3
 2000680:	8904983a 	sll	r2,r17,r4
 2000684:	01000434 	movhi	r4,16
 2000688:	213fffc4 	addi	r4,r4,-1
 200068c:	2941ffcc 	andi	r5,r5,2047
 2000690:	1906703a 	and	r3,r3,r4
 2000694:	800d883a 	mov	r6,r16
 2000698:	003fe906 	br	2000640 <__floatsidf+0x64>
 200069c:	000d883a 	mov	r6,zero
 20006a0:	000b883a 	mov	r5,zero
 20006a4:	0007883a 	mov	r3,zero
 20006a8:	0005883a 	mov	r2,zero
 20006ac:	003fe406 	br	2000640 <__floatsidf+0x64>
 20006b0:	0123c83a 	sub	r17,zero,r4
 20006b4:	003fd106 	br	20005fc <__floatsidf+0x20>

020006b8 <__clzsi2>:
 20006b8:	00bfffd4 	movui	r2,65535
 20006bc:	11000536 	bltu	r2,r4,20006d4 <__clzsi2+0x1c>
 20006c0:	00803fc4 	movi	r2,255
 20006c4:	11000f36 	bltu	r2,r4,2000704 <__clzsi2+0x4c>
 20006c8:	00800804 	movi	r2,32
 20006cc:	0007883a 	mov	r3,zero
 20006d0:	00000506 	br	20006e8 <__clzsi2+0x30>
 20006d4:	00804034 	movhi	r2,256
 20006d8:	10bfffc4 	addi	r2,r2,-1
 20006dc:	11000c2e 	bgeu	r2,r4,2000710 <__clzsi2+0x58>
 20006e0:	00800204 	movi	r2,8
 20006e4:	00c00604 	movi	r3,24
 20006e8:	20c8d83a 	srl	r4,r4,r3
 20006ec:	00c08074 	movhi	r3,513
 20006f0:	18cb34c4 	addi	r3,r3,11475
 20006f4:	1909883a 	add	r4,r3,r4
 20006f8:	20c00003 	ldbu	r3,0(r4)
 20006fc:	10c5c83a 	sub	r2,r2,r3
 2000700:	f800283a 	ret
 2000704:	00800604 	movi	r2,24
 2000708:	00c00204 	movi	r3,8
 200070c:	003ff606 	br	20006e8 <__clzsi2+0x30>
 2000710:	00800404 	movi	r2,16
 2000714:	1007883a 	mov	r3,r2
 2000718:	003ff306 	br	20006e8 <__clzsi2+0x30>

0200071c <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 200071c:	defff804 	addi	sp,sp,-32
 2000720:	dfc00515 	stw	ra,20(sp)
 2000724:	df000415 	stw	fp,16(sp)
 2000728:	df000404 	addi	fp,sp,16
 200072c:	e13ffe15 	stw	r4,-8(fp)
 2000730:	e17fff15 	stw	r5,-4(fp)
 2000734:	e1800215 	stw	r6,8(fp)
 2000738:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 200073c:	e0800204 	addi	r2,fp,8
 2000740:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2000744:	e0bffe17 	ldw	r2,-8(fp)
 2000748:	10800217 	ldw	r2,8(r2)
 200074c:	e0fffd17 	ldw	r3,-12(fp)
 2000750:	180f883a 	mov	r7,r3
 2000754:	e1bfff17 	ldw	r6,-4(fp)
 2000758:	100b883a 	mov	r5,r2
 200075c:	e13ffe17 	ldw	r4,-8(fp)
 2000760:	2000b6c0 	call	2000b6c <___vfprintf_internal_r>
 2000764:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2000768:	e0bffc17 	ldw	r2,-16(fp)
}
 200076c:	e037883a 	mov	sp,fp
 2000770:	dfc00117 	ldw	ra,4(sp)
 2000774:	df000017 	ldw	fp,0(sp)
 2000778:	dec00404 	addi	sp,sp,16
 200077c:	f800283a 	ret

02000780 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2000780:	defff704 	addi	sp,sp,-36
 2000784:	dfc00515 	stw	ra,20(sp)
 2000788:	df000415 	stw	fp,16(sp)
 200078c:	df000404 	addi	fp,sp,16
 2000790:	e13fff15 	stw	r4,-4(fp)
 2000794:	e1400215 	stw	r5,8(fp)
 2000798:	e1800315 	stw	r6,12(fp)
 200079c:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 20007a0:	d0a00017 	ldw	r2,-32768(gp)
 20007a4:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 20007a8:	e0800204 	addi	r2,fp,8
 20007ac:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 20007b0:	d0a00017 	ldw	r2,-32768(gp)
 20007b4:	10800217 	ldw	r2,8(r2)
 20007b8:	e0fffe17 	ldw	r3,-8(fp)
 20007bc:	180d883a 	mov	r6,r3
 20007c0:	e17fff17 	ldw	r5,-4(fp)
 20007c4:	1009883a 	mov	r4,r2
 20007c8:	2000b1c0 	call	2000b1c <__vfprintf_internal>
 20007cc:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 20007d0:	e0bffd17 	ldw	r2,-12(fp)
}
 20007d4:	e037883a 	mov	sp,fp
 20007d8:	dfc00117 	ldw	ra,4(sp)
 20007dc:	df000017 	ldw	fp,0(sp)
 20007e0:	dec00504 	addi	sp,sp,20
 20007e4:	f800283a 	ret

020007e8 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 20007e8:	defff104 	addi	sp,sp,-60
 20007ec:	dfc00e15 	stw	ra,56(sp)
 20007f0:	df000d15 	stw	fp,52(sp)
 20007f4:	df000d04 	addi	fp,sp,52
 20007f8:	e13ffe15 	stw	r4,-8(fp)
 20007fc:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 2000800:	e13fff17 	ldw	r4,-4(fp)
 2000804:	20009380 	call	2000938 <strlen>
 2000808:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 200080c:	e0bfff17 	ldw	r2,-4(fp)
 2000810:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 2000814:	e0bff317 	ldw	r2,-52(fp)
 2000818:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 200081c:	00808074 	movhi	r2,513
 2000820:	108b7504 	addi	r2,r2,11732
 2000824:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 2000828:	00800044 	movi	r2,1
 200082c:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2000830:	e0bff317 	ldw	r2,-52(fp)
 2000834:	10800044 	addi	r2,r2,1
 2000838:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 200083c:	e0bffa04 	addi	r2,fp,-24
 2000840:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2000844:	00800084 	movi	r2,2
 2000848:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 200084c:	e0bffe17 	ldw	r2,-8(fp)
 2000850:	e0bff415 	stw	r2,-48(fp)
 2000854:	e0bff417 	ldw	r2,-48(fp)
 2000858:	10000526 	beq	r2,zero,2000870 <_puts_r+0x88>
 200085c:	e0bff417 	ldw	r2,-48(fp)
 2000860:	10800e17 	ldw	r2,56(r2)
 2000864:	1000021e 	bne	r2,zero,2000870 <_puts_r+0x88>
 2000868:	e13ff417 	ldw	r4,-48(fp)
 200086c:	20057d80 	call	20057d8 <__sinit>
  fp = _stdout_r (ptr);
 2000870:	e0bffe17 	ldw	r2,-8(fp)
 2000874:	10800217 	ldw	r2,8(r2)
 2000878:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 200087c:	e0bff517 	ldw	r2,-44(fp)
 2000880:	1080030b 	ldhu	r2,12(r2)
 2000884:	10bfffcc 	andi	r2,r2,65535
 2000888:	1088000c 	andi	r2,r2,8192
 200088c:	10000c1e 	bne	r2,zero,20008c0 <_puts_r+0xd8>
 2000890:	e0bff517 	ldw	r2,-44(fp)
 2000894:	1080030b 	ldhu	r2,12(r2)
 2000898:	10880014 	ori	r2,r2,8192
 200089c:	1007883a 	mov	r3,r2
 20008a0:	e0bff517 	ldw	r2,-44(fp)
 20008a4:	10c0030d 	sth	r3,12(r2)
 20008a8:	e0bff517 	ldw	r2,-44(fp)
 20008ac:	10c01917 	ldw	r3,100(r2)
 20008b0:	00b7ffc4 	movi	r2,-8193
 20008b4:	1886703a 	and	r3,r3,r2
 20008b8:	e0bff517 	ldw	r2,-44(fp)
 20008bc:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 20008c0:	e0bff704 	addi	r2,fp,-36
 20008c4:	100d883a 	mov	r6,r2
 20008c8:	e17ff517 	ldw	r5,-44(fp)
 20008cc:	e13ffe17 	ldw	r4,-8(fp)
 20008d0:	20061240 	call	2006124 <__sfvwrite_r>
 20008d4:	10000226 	beq	r2,zero,20008e0 <_puts_r+0xf8>
 20008d8:	00bfffc4 	movi	r2,-1
 20008dc:	00000106 	br	20008e4 <_puts_r+0xfc>
 20008e0:	00800284 	movi	r2,10
 20008e4:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 20008e8:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 20008ec:	e037883a 	mov	sp,fp
 20008f0:	dfc00117 	ldw	ra,4(sp)
 20008f4:	df000017 	ldw	fp,0(sp)
 20008f8:	dec00204 	addi	sp,sp,8
 20008fc:	f800283a 	ret

02000900 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 2000900:	defffd04 	addi	sp,sp,-12
 2000904:	dfc00215 	stw	ra,8(sp)
 2000908:	df000115 	stw	fp,4(sp)
 200090c:	df000104 	addi	fp,sp,4
 2000910:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 2000914:	d0a00017 	ldw	r2,-32768(gp)
 2000918:	e17fff17 	ldw	r5,-4(fp)
 200091c:	1009883a 	mov	r4,r2
 2000920:	20007e80 	call	20007e8 <_puts_r>
}
 2000924:	e037883a 	mov	sp,fp
 2000928:	dfc00117 	ldw	ra,4(sp)
 200092c:	df000017 	ldw	fp,0(sp)
 2000930:	dec00204 	addi	sp,sp,8
 2000934:	f800283a 	ret

02000938 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 2000938:	defffc04 	addi	sp,sp,-16
 200093c:	df000315 	stw	fp,12(sp)
 2000940:	df000304 	addi	fp,sp,12
 2000944:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 2000948:	e0bfff17 	ldw	r2,-4(fp)
 200094c:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2000950:	00000d06 	br	2000988 <strlen+0x50>
    {
      if (!*str)
 2000954:	e0bfff17 	ldw	r2,-4(fp)
 2000958:	10800003 	ldbu	r2,0(r2)
 200095c:	10803fcc 	andi	r2,r2,255
 2000960:	1080201c 	xori	r2,r2,128
 2000964:	10bfe004 	addi	r2,r2,-128
 2000968:	1000041e 	bne	r2,zero,200097c <strlen+0x44>
	return str - start;
 200096c:	e0ffff17 	ldw	r3,-4(fp)
 2000970:	e0bffe17 	ldw	r2,-8(fp)
 2000974:	1885c83a 	sub	r2,r3,r2
 2000978:	00002806 	br	2000a1c <strlen+0xe4>
      str++;
 200097c:	e0bfff17 	ldw	r2,-4(fp)
 2000980:	10800044 	addi	r2,r2,1
 2000984:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2000988:	e0bfff17 	ldw	r2,-4(fp)
 200098c:	108000cc 	andi	r2,r2,3
 2000990:	103ff01e 	bne	r2,zero,2000954 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2000994:	e0bfff17 	ldw	r2,-4(fp)
 2000998:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 200099c:	00000306 	br	20009ac <strlen+0x74>
    aligned_addr++;
 20009a0:	e0bffd17 	ldw	r2,-12(fp)
 20009a4:	10800104 	addi	r2,r2,4
 20009a8:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 20009ac:	e0bffd17 	ldw	r2,-12(fp)
 20009b0:	10c00017 	ldw	r3,0(r2)
 20009b4:	00bfbff4 	movhi	r2,65279
 20009b8:	10bfbfc4 	addi	r2,r2,-257
 20009bc:	1887883a 	add	r3,r3,r2
 20009c0:	e0bffd17 	ldw	r2,-12(fp)
 20009c4:	10800017 	ldw	r2,0(r2)
 20009c8:	0084303a 	nor	r2,zero,r2
 20009cc:	1886703a 	and	r3,r3,r2
 20009d0:	00a02074 	movhi	r2,32897
 20009d4:	10a02004 	addi	r2,r2,-32640
 20009d8:	1884703a 	and	r2,r3,r2
 20009dc:	103ff026 	beq	r2,zero,20009a0 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 20009e0:	e0bffd17 	ldw	r2,-12(fp)
 20009e4:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20009e8:	00000306 	br	20009f8 <strlen+0xc0>
    str++;
 20009ec:	e0bfff17 	ldw	r2,-4(fp)
 20009f0:	10800044 	addi	r2,r2,1
 20009f4:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20009f8:	e0bfff17 	ldw	r2,-4(fp)
 20009fc:	10800003 	ldbu	r2,0(r2)
 2000a00:	10803fcc 	andi	r2,r2,255
 2000a04:	1080201c 	xori	r2,r2,128
 2000a08:	10bfe004 	addi	r2,r2,-128
 2000a0c:	103ff71e 	bne	r2,zero,20009ec <strlen+0xb4>
    str++;
  return str - start;
 2000a10:	e0ffff17 	ldw	r3,-4(fp)
 2000a14:	e0bffe17 	ldw	r2,-8(fp)
 2000a18:	1885c83a 	sub	r2,r3,r2
}
 2000a1c:	e037883a 	mov	sp,fp
 2000a20:	df000017 	ldw	fp,0(sp)
 2000a24:	dec00104 	addi	sp,sp,4
 2000a28:	f800283a 	ret

02000a2c <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2000a2c:	defedf04 	addi	sp,sp,-1156
 2000a30:	dfc12015 	stw	ra,1152(sp)
 2000a34:	df011f15 	stw	fp,1148(sp)
 2000a38:	dc011e15 	stw	r16,1144(sp)
 2000a3c:	df011f04 	addi	fp,sp,1148
 2000a40:	e13ffc15 	stw	r4,-16(fp)
 2000a44:	2821883a 	mov	r16,r5
 2000a48:	e1bffd15 	stw	r6,-12(fp)
 2000a4c:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2000a50:	80c0030b 	ldhu	r3,12(r16)
 2000a54:	00bfff44 	movi	r2,-3
 2000a58:	1884703a 	and	r2,r3,r2
 2000a5c:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2000a60:	80801917 	ldw	r2,100(r16)
 2000a64:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2000a68:	8080038b 	ldhu	r2,14(r16)
 2000a6c:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2000a70:	80800717 	ldw	r2,28(r16)
 2000a74:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2000a78:	80800917 	ldw	r2,36(r16)
 2000a7c:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2000a80:	e0befc04 	addi	r2,fp,-1040
 2000a84:	e0bee215 	stw	r2,-1144(fp)
 2000a88:	e0bee217 	ldw	r2,-1144(fp)
 2000a8c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2000a90:	00810004 	movi	r2,1024
 2000a94:	e0bee415 	stw	r2,-1136(fp)
 2000a98:	e0bee417 	ldw	r2,-1136(fp)
 2000a9c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2000aa0:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2000aa4:	e0bee204 	addi	r2,fp,-1144
 2000aa8:	e1fffe17 	ldw	r7,-8(fp)
 2000aac:	e1bffd17 	ldw	r6,-12(fp)
 2000ab0:	100b883a 	mov	r5,r2
 2000ab4:	e13ffc17 	ldw	r4,-16(fp)
 2000ab8:	2000b6c0 	call	2000b6c <___vfprintf_internal_r>
 2000abc:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2000ac0:	e0bee117 	ldw	r2,-1148(fp)
 2000ac4:	10000716 	blt	r2,zero,2000ae4 <__sbprintf+0xb8>
 2000ac8:	e0bee204 	addi	r2,fp,-1144
 2000acc:	100b883a 	mov	r5,r2
 2000ad0:	e13ffc17 	ldw	r4,-16(fp)
 2000ad4:	20053580 	call	2005358 <_fflush_r>
 2000ad8:	10000226 	beq	r2,zero,2000ae4 <__sbprintf+0xb8>
		ret = EOF;
 2000adc:	00bfffc4 	movi	r2,-1
 2000ae0:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2000ae4:	e0bee50b 	ldhu	r2,-1132(fp)
 2000ae8:	10bfffcc 	andi	r2,r2,65535
 2000aec:	1080100c 	andi	r2,r2,64
 2000af0:	10000326 	beq	r2,zero,2000b00 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2000af4:	8080030b 	ldhu	r2,12(r16)
 2000af8:	10801014 	ori	r2,r2,64
 2000afc:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2000b00:	e0bee117 	ldw	r2,-1148(fp)
}
 2000b04:	e6ffff04 	addi	sp,fp,-4
 2000b08:	dfc00217 	ldw	ra,8(sp)
 2000b0c:	df000117 	ldw	fp,4(sp)
 2000b10:	dc000017 	ldw	r16,0(sp)
 2000b14:	dec00304 	addi	sp,sp,12
 2000b18:	f800283a 	ret

02000b1c <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2000b1c:	defffa04 	addi	sp,sp,-24
 2000b20:	dfc00515 	stw	ra,20(sp)
 2000b24:	df000415 	stw	fp,16(sp)
 2000b28:	df000404 	addi	fp,sp,16
 2000b2c:	e13ffd15 	stw	r4,-12(fp)
 2000b30:	e17ffe15 	stw	r5,-8(fp)
 2000b34:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 2000b38:	d0a00017 	ldw	r2,-32768(gp)
 2000b3c:	e1ffff17 	ldw	r7,-4(fp)
 2000b40:	e1bffe17 	ldw	r6,-8(fp)
 2000b44:	e17ffd17 	ldw	r5,-12(fp)
 2000b48:	1009883a 	mov	r4,r2
 2000b4c:	2000b6c0 	call	2000b6c <___vfprintf_internal_r>
 2000b50:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2000b54:	e0bffc17 	ldw	r2,-16(fp)
}
 2000b58:	e037883a 	mov	sp,fp
 2000b5c:	dfc00117 	ldw	ra,4(sp)
 2000b60:	df000017 	ldw	fp,0(sp)
 2000b64:	dec00204 	addi	sp,sp,8
 2000b68:	f800283a 	ret

02000b6c <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2000b6c:	deffa404 	addi	sp,sp,-368
 2000b70:	dfc05b15 	stw	ra,364(sp)
 2000b74:	df005a15 	stw	fp,360(sp)
 2000b78:	ddc05915 	stw	r23,356(sp)
 2000b7c:	dd805815 	stw	r22,352(sp)
 2000b80:	dd405715 	stw	r21,348(sp)
 2000b84:	dd005615 	stw	r20,344(sp)
 2000b88:	dcc05515 	stw	r19,340(sp)
 2000b8c:	dc805415 	stw	r18,336(sp)
 2000b90:	dc405315 	stw	r17,332(sp)
 2000b94:	dc005215 	stw	r16,328(sp)
 2000b98:	df005a04 	addi	fp,sp,360
 2000b9c:	e13fe615 	stw	r4,-104(fp)
 2000ba0:	e17fe715 	stw	r5,-100(fp)
 2000ba4:	e1bfe815 	stw	r6,-96(fp)
 2000ba8:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 2000bac:	e13fe617 	ldw	r4,-104(fp)
 2000bb0:	20069c00 	call	20069c0 <_localeconv_r>
 2000bb4:	10800017 	ldw	r2,0(r2)
 2000bb8:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2000bbc:	e13fbb17 	ldw	r4,-276(fp)
 2000bc0:	20009380 	call	2000938 <strlen>
 2000bc4:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2000bc8:	e03fc215 	stw	zero,-248(fp)
 2000bcc:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 2000bd0:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2000bd4:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2000bd8:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2000bdc:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2000be0:	e0bfe617 	ldw	r2,-104(fp)
 2000be4:	e0bfbd15 	stw	r2,-268(fp)
 2000be8:	e0bfbd17 	ldw	r2,-268(fp)
 2000bec:	10000526 	beq	r2,zero,2000c04 <___vfprintf_internal_r+0x98>
 2000bf0:	e0bfbd17 	ldw	r2,-268(fp)
 2000bf4:	10800e17 	ldw	r2,56(r2)
 2000bf8:	1000021e 	bne	r2,zero,2000c04 <___vfprintf_internal_r+0x98>
 2000bfc:	e13fbd17 	ldw	r4,-268(fp)
 2000c00:	20057d80 	call	20057d8 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2000c04:	e0bfe717 	ldw	r2,-100(fp)
 2000c08:	1080030b 	ldhu	r2,12(r2)
 2000c0c:	10bfffcc 	andi	r2,r2,65535
 2000c10:	1088000c 	andi	r2,r2,8192
 2000c14:	10000c1e 	bne	r2,zero,2000c48 <___vfprintf_internal_r+0xdc>
 2000c18:	e0bfe717 	ldw	r2,-100(fp)
 2000c1c:	1080030b 	ldhu	r2,12(r2)
 2000c20:	10880014 	ori	r2,r2,8192
 2000c24:	1007883a 	mov	r3,r2
 2000c28:	e0bfe717 	ldw	r2,-100(fp)
 2000c2c:	10c0030d 	sth	r3,12(r2)
 2000c30:	e0bfe717 	ldw	r2,-100(fp)
 2000c34:	10c01917 	ldw	r3,100(r2)
 2000c38:	00b7ffc4 	movi	r2,-8193
 2000c3c:	1886703a 	and	r3,r3,r2
 2000c40:	e0bfe717 	ldw	r2,-100(fp)
 2000c44:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2000c48:	e0bfe717 	ldw	r2,-100(fp)
 2000c4c:	1080030b 	ldhu	r2,12(r2)
 2000c50:	10bfffcc 	andi	r2,r2,65535
 2000c54:	1080020c 	andi	r2,r2,8
 2000c58:	10000326 	beq	r2,zero,2000c68 <___vfprintf_internal_r+0xfc>
 2000c5c:	e0bfe717 	ldw	r2,-100(fp)
 2000c60:	10800417 	ldw	r2,16(r2)
 2000c64:	1000061e 	bne	r2,zero,2000c80 <___vfprintf_internal_r+0x114>
 2000c68:	e17fe717 	ldw	r5,-100(fp)
 2000c6c:	e13fe617 	ldw	r4,-104(fp)
 2000c70:	2002f880 	call	2002f88 <__swsetup_r>
 2000c74:	10000226 	beq	r2,zero,2000c80 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2000c78:	00bfffc4 	movi	r2,-1
 2000c7c:	0007e206 	br	2002c08 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2000c80:	e0bfe717 	ldw	r2,-100(fp)
 2000c84:	1080030b 	ldhu	r2,12(r2)
 2000c88:	10bfffcc 	andi	r2,r2,65535
 2000c8c:	1080068c 	andi	r2,r2,26
 2000c90:	10800298 	cmpnei	r2,r2,10
 2000c94:	10000c1e 	bne	r2,zero,2000cc8 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2000c98:	e0bfe717 	ldw	r2,-100(fp)
 2000c9c:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2000ca0:	10bfffcc 	andi	r2,r2,65535
 2000ca4:	10a0001c 	xori	r2,r2,32768
 2000ca8:	10a00004 	addi	r2,r2,-32768
 2000cac:	10000616 	blt	r2,zero,2000cc8 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2000cb0:	e1ffe917 	ldw	r7,-92(fp)
 2000cb4:	e1bfe817 	ldw	r6,-96(fp)
 2000cb8:	e17fe717 	ldw	r5,-100(fp)
 2000cbc:	e13fe617 	ldw	r4,-104(fp)
 2000cc0:	2000a2c0 	call	2000a2c <__sbprintf>
 2000cc4:	0007d006 	br	2002c08 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2000cc8:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2000ccc:	e47fcb04 	addi	r17,fp,-212
 2000cd0:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2000cd4:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2000cd8:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2000cdc:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2000ce0:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2000ce4:	00000106 	br	2000cec <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2000ce8:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2000cec:	a8800003 	ldbu	r2,0(r21)
 2000cf0:	10803fcc 	andi	r2,r2,255
 2000cf4:	1080201c 	xori	r2,r2,128
 2000cf8:	10bfe004 	addi	r2,r2,-128
 2000cfc:	10000626 	beq	r2,zero,2000d18 <___vfprintf_internal_r+0x1ac>
 2000d00:	a8800003 	ldbu	r2,0(r21)
 2000d04:	10803fcc 	andi	r2,r2,255
 2000d08:	1080201c 	xori	r2,r2,128
 2000d0c:	10bfe004 	addi	r2,r2,-128
 2000d10:	10800958 	cmpnei	r2,r2,37
 2000d14:	103ff41e 	bne	r2,zero,2000ce8 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2000d18:	a807883a 	mov	r3,r21
 2000d1c:	9005883a 	mov	r2,r18
 2000d20:	18a1c83a 	sub	r16,r3,r2
 2000d24:	80001826 	beq	r16,zero,2000d88 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 2000d28:	8c800015 	stw	r18,0(r17)
 2000d2c:	8005883a 	mov	r2,r16
 2000d30:	88800115 	stw	r2,4(r17)
 2000d34:	e0bfca17 	ldw	r2,-216(fp)
 2000d38:	8007883a 	mov	r3,r16
 2000d3c:	10c5883a 	add	r2,r2,r3
 2000d40:	e0bfca15 	stw	r2,-216(fp)
 2000d44:	8c400204 	addi	r17,r17,8
 2000d48:	e0bfc917 	ldw	r2,-220(fp)
 2000d4c:	10800044 	addi	r2,r2,1
 2000d50:	e0bfc915 	stw	r2,-220(fp)
 2000d54:	e0bfc917 	ldw	r2,-220(fp)
 2000d58:	10800210 	cmplti	r2,r2,8
 2000d5c:	1000071e 	bne	r2,zero,2000d7c <___vfprintf_internal_r+0x210>
 2000d60:	e0bfc804 	addi	r2,fp,-224
 2000d64:	100d883a 	mov	r6,r2
 2000d68:	e17fe717 	ldw	r5,-100(fp)
 2000d6c:	e13fe617 	ldw	r4,-104(fp)
 2000d70:	200ae440 	call	200ae44 <__sprint_r>
 2000d74:	10074d1e 	bne	r2,zero,2002aac <___vfprintf_internal_r+0x1f40>
 2000d78:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2000d7c:	e0bfac17 	ldw	r2,-336(fp)
 2000d80:	1405883a 	add	r2,r2,r16
 2000d84:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2000d88:	a8800003 	ldbu	r2,0(r21)
 2000d8c:	10803fcc 	andi	r2,r2,255
 2000d90:	1080201c 	xori	r2,r2,128
 2000d94:	10bfe004 	addi	r2,r2,-128
 2000d98:	10073626 	beq	r2,zero,2002a74 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2000d9c:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 2000da0:	ad400044 	addi	r21,r21,1

		flags = 0;
 2000da4:	0027883a 	mov	r19,zero
		dprec = 0;
 2000da8:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 2000dac:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 2000db0:	00bfffc4 	movi	r2,-1
 2000db4:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 2000db8:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2000dbc:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2000dc0:	a805883a 	mov	r2,r21
 2000dc4:	15400044 	addi	r21,r2,1
 2000dc8:	10800003 	ldbu	r2,0(r2)
 2000dcc:	15003fcc 	andi	r20,r2,255
 2000dd0:	a500201c 	xori	r20,r20,128
 2000dd4:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 2000dd8:	a0bff804 	addi	r2,r20,-32
 2000ddc:	10c01668 	cmpgeui	r3,r2,89
 2000de0:	1803491e 	bne	r3,zero,2001b08 <___vfprintf_internal_r+0xf9c>
 2000de4:	100690ba 	slli	r3,r2,2
 2000de8:	00808034 	movhi	r2,512
 2000dec:	10837f04 	addi	r2,r2,3580
 2000df0:	1885883a 	add	r2,r3,r2
 2000df4:	10800017 	ldw	r2,0(r2)
 2000df8:	1000683a 	jmp	r2
 2000dfc:	02000f60 	cmpeqi	r8,zero,61
 2000e00:	02001b08 	cmpgei	r8,zero,108
 2000e04:	02001b08 	cmpgei	r8,zero,108
 2000e08:	02000f80 	call	2000f8 <__alt_mem_mem_Nios_PI+0xf8>
 2000e0c:	02001b08 	cmpgei	r8,zero,108
 2000e10:	02001b08 	cmpgei	r8,zero,108
 2000e14:	02001b08 	cmpgei	r8,zero,108
 2000e18:	02001b08 	cmpgei	r8,zero,108
 2000e1c:	02001b08 	cmpgei	r8,zero,108
 2000e20:	02001b08 	cmpgei	r8,zero,108
 2000e24:	02000f88 	cmpgei	r8,zero,62
 2000e28:	02000fbc 	xorhi	r8,zero,62
 2000e2c:	02001b08 	cmpgei	r8,zero,108
 2000e30:	02000fb4 	movhi	r8,62
 2000e34:	02000fc8 	cmpgei	r8,zero,63
 2000e38:	02001b08 	cmpgei	r8,zero,108
 2000e3c:	0200105c 	xori	r8,zero,65
 2000e40:	02001064 	muli	r8,zero,65
 2000e44:	02001064 	muli	r8,zero,65
 2000e48:	02001064 	muli	r8,zero,65
 2000e4c:	02001064 	muli	r8,zero,65
 2000e50:	02001064 	muli	r8,zero,65
 2000e54:	02001064 	muli	r8,zero,65
 2000e58:	02001064 	muli	r8,zero,65
 2000e5c:	02001064 	muli	r8,zero,65
 2000e60:	02001064 	muli	r8,zero,65
 2000e64:	02001b08 	cmpgei	r8,zero,108
 2000e68:	02001b08 	cmpgei	r8,zero,108
 2000e6c:	02001b08 	cmpgei	r8,zero,108
 2000e70:	02001b08 	cmpgei	r8,zero,108
 2000e74:	02001b08 	cmpgei	r8,zero,108
 2000e78:	02001b08 	cmpgei	r8,zero,108
 2000e7c:	02001b08 	cmpgei	r8,zero,108
 2000e80:	02001b08 	cmpgei	r8,zero,108
 2000e84:	02001b08 	cmpgei	r8,zero,108
 2000e88:	02001b08 	cmpgei	r8,zero,108
 2000e8c:	0200110c 	andi	r8,zero,68
 2000e90:	0200120c 	andi	r8,zero,72
 2000e94:	02001b08 	cmpgei	r8,zero,108
 2000e98:	0200120c 	andi	r8,zero,72
 2000e9c:	02001b08 	cmpgei	r8,zero,108
 2000ea0:	02001b08 	cmpgei	r8,zero,108
 2000ea4:	02001b08 	cmpgei	r8,zero,108
 2000ea8:	02001b08 	cmpgei	r8,zero,108
 2000eac:	020010a0 	cmpeqi	r8,zero,66
 2000eb0:	02001b08 	cmpgei	r8,zero,108
 2000eb4:	02001b08 	cmpgei	r8,zero,108
 2000eb8:	020015a8 	cmpgeui	r8,zero,86
 2000ebc:	02001b08 	cmpgei	r8,zero,108
 2000ec0:	02001b08 	cmpgei	r8,zero,108
 2000ec4:	02001b08 	cmpgei	r8,zero,108
 2000ec8:	02001b08 	cmpgei	r8,zero,108
 2000ecc:	02001b08 	cmpgei	r8,zero,108
 2000ed0:	02001724 	muli	r8,zero,92
 2000ed4:	02001b08 	cmpgei	r8,zero,108
 2000ed8:	02001b08 	cmpgei	r8,zero,108
 2000edc:	020017e4 	muli	r8,zero,95
 2000ee0:	02001b08 	cmpgei	r8,zero,108
 2000ee4:	02001b08 	cmpgei	r8,zero,108
 2000ee8:	02001b08 	cmpgei	r8,zero,108
 2000eec:	02001b08 	cmpgei	r8,zero,108
 2000ef0:	02001b08 	cmpgei	r8,zero,108
 2000ef4:	02001b08 	cmpgei	r8,zero,108
 2000ef8:	02001b08 	cmpgei	r8,zero,108
 2000efc:	02001b08 	cmpgei	r8,zero,108
 2000f00:	02001b08 	cmpgei	r8,zero,108
 2000f04:	02001b08 	cmpgei	r8,zero,108
 2000f08:	020010e4 	muli	r8,zero,67
 2000f0c:	02001110 	cmplti	r8,zero,68
 2000f10:	0200120c 	andi	r8,zero,72
 2000f14:	0200120c 	andi	r8,zero,72
 2000f18:	0200120c 	andi	r8,zero,72
 2000f1c:	020010a8 	cmpgeui	r8,zero,66
 2000f20:	02001110 	cmplti	r8,zero,68
 2000f24:	02001b08 	cmpgei	r8,zero,108
 2000f28:	02001b08 	cmpgei	r8,zero,108
 2000f2c:	020010b0 	cmpltui	r8,zero,66
 2000f30:	02001b08 	cmpgei	r8,zero,108
 2000f34:	02001508 	cmpgei	r8,zero,84
 2000f38:	020015ac 	andhi	r8,zero,86
 2000f3c:	0200164c 	andi	r8,zero,89
 2000f40:	020010dc 	xori	r8,zero,67
 2000f44:	02001b08 	cmpgei	r8,zero,108
 2000f48:	02001694 	movui	r8,90
 2000f4c:	02001b08 	cmpgei	r8,zero,108
 2000f50:	02001728 	cmpgeui	r8,zero,92
 2000f54:	02001b08 	cmpgei	r8,zero,108
 2000f58:	02001b08 	cmpgei	r8,zero,108
 2000f5c:	020017f4 	movhi	r8,95
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2000f60:	e0bfc103 	ldbu	r2,-252(fp)
 2000f64:	10803fcc 	andi	r2,r2,255
 2000f68:	1080201c 	xori	r2,r2,128
 2000f6c:	10bfe004 	addi	r2,r2,-128
 2000f70:	103f931e 	bne	r2,zero,2000dc0 <___vfprintf_internal_r+0x254>
				sign = ' ';
 2000f74:	00800804 	movi	r2,32
 2000f78:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2000f7c:	003f9006 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 2000f80:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2000f84:	003f8e06 	br	2000dc0 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2000f88:	e0bfe917 	ldw	r2,-92(fp)
 2000f8c:	10c00104 	addi	r3,r2,4
 2000f90:	e0ffe915 	stw	r3,-92(fp)
 2000f94:	10800017 	ldw	r2,0(r2)
 2000f98:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2000f9c:	e0bfad17 	ldw	r2,-332(fp)
 2000fa0:	10000116 	blt	r2,zero,2000fa8 <___vfprintf_internal_r+0x43c>
				goto rflag;
 2000fa4:	003f8606 	br	2000dc0 <___vfprintf_internal_r+0x254>
			width = -width;
 2000fa8:	e0bfad17 	ldw	r2,-332(fp)
 2000fac:	0085c83a 	sub	r2,zero,r2
 2000fb0:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2000fb4:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2000fb8:	003f8106 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2000fbc:	00800ac4 	movi	r2,43
 2000fc0:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2000fc4:	003f7e06 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 2000fc8:	a805883a 	mov	r2,r21
 2000fcc:	15400044 	addi	r21,r2,1
 2000fd0:	10800003 	ldbu	r2,0(r2)
 2000fd4:	15003fcc 	andi	r20,r2,255
 2000fd8:	a500201c 	xori	r20,r20,128
 2000fdc:	a53fe004 	addi	r20,r20,-128
 2000fe0:	a0800a98 	cmpnei	r2,r20,42
 2000fe4:	10000a1e 	bne	r2,zero,2001010 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2000fe8:	e0bfe917 	ldw	r2,-92(fp)
 2000fec:	10c00104 	addi	r3,r2,4
 2000ff0:	e0ffe915 	stw	r3,-92(fp)
 2000ff4:	10800017 	ldw	r2,0(r2)
 2000ff8:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2000ffc:	e0bfae17 	ldw	r2,-328(fp)
 2001000:	103f6f0e 	bge	r2,zero,2000dc0 <___vfprintf_internal_r+0x254>
					prec = -1;
 2001004:	00bfffc4 	movi	r2,-1
 2001008:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 200100c:	003f6c06 	br	2000dc0 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2001010:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2001014:	00000906 	br	200103c <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 2001018:	80c002a4 	muli	r3,r16,10
 200101c:	a0bff404 	addi	r2,r20,-48
 2001020:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2001024:	a805883a 	mov	r2,r21
 2001028:	15400044 	addi	r21,r2,1
 200102c:	10800003 	ldbu	r2,0(r2)
 2001030:	15003fcc 	andi	r20,r2,255
 2001034:	a500201c 	xori	r20,r20,128
 2001038:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200103c:	a0bff404 	addi	r2,r20,-48
 2001040:	108002b0 	cmpltui	r2,r2,10
 2001044:	103ff41e 	bne	r2,zero,2001018 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 2001048:	8005883a 	mov	r2,r16
 200104c:	1000010e 	bge	r2,zero,2001054 <___vfprintf_internal_r+0x4e8>
 2001050:	00bfffc4 	movi	r2,-1
 2001054:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 2001058:	003f5f06 	br	2000dd8 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200105c:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2001060:	003f5706 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 2001064:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2001068:	80c002a4 	muli	r3,r16,10
 200106c:	a0bff404 	addi	r2,r20,-48
 2001070:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2001074:	a805883a 	mov	r2,r21
 2001078:	15400044 	addi	r21,r2,1
 200107c:	10800003 	ldbu	r2,0(r2)
 2001080:	15003fcc 	andi	r20,r2,255
 2001084:	a500201c 	xori	r20,r20,128
 2001088:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 200108c:	a0bff404 	addi	r2,r20,-48
 2001090:	108002b0 	cmpltui	r2,r2,10
 2001094:	103ff41e 	bne	r2,zero,2001068 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2001098:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 200109c:	003f4e06 	br	2000dd8 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 20010a0:	9cc00214 	ori	r19,r19,8
			goto rflag;
 20010a4:	003f4606 	br	2000dc0 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 20010a8:	9cc01014 	ori	r19,r19,64
			goto rflag;
 20010ac:	003f4406 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 20010b0:	a8800003 	ldbu	r2,0(r21)
 20010b4:	10803fcc 	andi	r2,r2,255
 20010b8:	1080201c 	xori	r2,r2,128
 20010bc:	10bfe004 	addi	r2,r2,-128
 20010c0:	10801b18 	cmpnei	r2,r2,108
 20010c4:	1000031e 	bne	r2,zero,20010d4 <___vfprintf_internal_r+0x568>
				fmt++;
 20010c8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 20010cc:	9cc00814 	ori	r19,r19,32
 20010d0:	003f3b06 	br	2000dc0 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 20010d4:	9cc00414 	ori	r19,r19,16
			goto rflag;
 20010d8:	003f3906 	br	2000dc0 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 20010dc:	9cc00814 	ori	r19,r19,32
			goto rflag;
 20010e0:	003f3706 	br	2000dc0 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 20010e4:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 20010e8:	e0bfe917 	ldw	r2,-92(fp)
 20010ec:	10c00104 	addi	r3,r2,4
 20010f0:	e0ffe915 	stw	r3,-92(fp)
 20010f4:	10800017 	ldw	r2,0(r2)
 20010f8:	90800005 	stb	r2,0(r18)
				size = 1;
 20010fc:	00800044 	movi	r2,1
 2001100:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 2001104:	e03fc105 	stb	zero,-252(fp)
			break;
 2001108:	00028806 	br	2001b2c <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 200110c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2001110:	9880080c 	andi	r2,r19,32
 2001114:	10000826 	beq	r2,zero,2001138 <___vfprintf_internal_r+0x5cc>
 2001118:	e13fe917 	ldw	r4,-92(fp)
 200111c:	20800204 	addi	r2,r4,8
 2001120:	e0bfe915 	stw	r2,-92(fp)
 2001124:	20800017 	ldw	r2,0(r4)
 2001128:	20c00117 	ldw	r3,4(r4)
 200112c:	e0bfea15 	stw	r2,-88(fp)
 2001130:	e0ffeb15 	stw	r3,-84(fp)
 2001134:	00001e06 	br	20011b0 <___vfprintf_internal_r+0x644>
 2001138:	9880040c 	andi	r2,r19,16
 200113c:	10000826 	beq	r2,zero,2001160 <___vfprintf_internal_r+0x5f4>
 2001140:	e0bfe917 	ldw	r2,-92(fp)
 2001144:	10c00104 	addi	r3,r2,4
 2001148:	e0ffe915 	stw	r3,-92(fp)
 200114c:	10800017 	ldw	r2,0(r2)
 2001150:	e0bfea15 	stw	r2,-88(fp)
 2001154:	1005d7fa 	srai	r2,r2,31
 2001158:	e0bfeb15 	stw	r2,-84(fp)
 200115c:	00001406 	br	20011b0 <___vfprintf_internal_r+0x644>
 2001160:	9880100c 	andi	r2,r19,64
 2001164:	10000b26 	beq	r2,zero,2001194 <___vfprintf_internal_r+0x628>
 2001168:	e0bfe917 	ldw	r2,-92(fp)
 200116c:	10c00104 	addi	r3,r2,4
 2001170:	e0ffe915 	stw	r3,-92(fp)
 2001174:	10800017 	ldw	r2,0(r2)
 2001178:	10bfffcc 	andi	r2,r2,65535
 200117c:	10a0001c 	xori	r2,r2,32768
 2001180:	10a00004 	addi	r2,r2,-32768
 2001184:	e0bfea15 	stw	r2,-88(fp)
 2001188:	1005d7fa 	srai	r2,r2,31
 200118c:	e0bfeb15 	stw	r2,-84(fp)
 2001190:	00000706 	br	20011b0 <___vfprintf_internal_r+0x644>
 2001194:	e0bfe917 	ldw	r2,-92(fp)
 2001198:	10c00104 	addi	r3,r2,4
 200119c:	e0ffe915 	stw	r3,-92(fp)
 20011a0:	10800017 	ldw	r2,0(r2)
 20011a4:	e0bfea15 	stw	r2,-88(fp)
 20011a8:	1005d7fa 	srai	r2,r2,31
 20011ac:	e0bfeb15 	stw	r2,-84(fp)
 20011b0:	e0bfea17 	ldw	r2,-88(fp)
 20011b4:	e0bfb115 	stw	r2,-316(fp)
 20011b8:	e0ffeb17 	ldw	r3,-84(fp)
 20011bc:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 20011c0:	e0bfb117 	ldw	r2,-316(fp)
 20011c4:	e0ffb217 	ldw	r3,-312(fp)
 20011c8:	18000d0e 	bge	r3,zero,2001200 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 20011cc:	000f883a 	mov	r7,zero
 20011d0:	0011883a 	mov	r8,zero
 20011d4:	e13fb117 	ldw	r4,-316(fp)
 20011d8:	e17fb217 	ldw	r5,-312(fp)
 20011dc:	3905c83a 	sub	r2,r7,r4
 20011e0:	388d803a 	cmpltu	r6,r7,r2
 20011e4:	4147c83a 	sub	r3,r8,r5
 20011e8:	1989c83a 	sub	r4,r3,r6
 20011ec:	2007883a 	mov	r3,r4
 20011f0:	e0bfb115 	stw	r2,-316(fp)
 20011f4:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 20011f8:	00800b44 	movi	r2,45
 20011fc:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 2001200:	00800044 	movi	r2,1
 2001204:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2001208:	0001b706 	br	20018e8 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 200120c:	9880020c 	andi	r2,r19,8
 2001210:	10000826 	beq	r2,zero,2001234 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2001214:	e13fe917 	ldw	r4,-92(fp)
 2001218:	20800204 	addi	r2,r4,8
 200121c:	e0bfe915 	stw	r2,-92(fp)
 2001220:	20800017 	ldw	r2,0(r4)
 2001224:	20c00117 	ldw	r3,4(r4)
 2001228:	e0bfc215 	stw	r2,-248(fp)
 200122c:	e0ffc315 	stw	r3,-244(fp)
 2001230:	00000706 	br	2001250 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 2001234:	e13fe917 	ldw	r4,-92(fp)
 2001238:	20800204 	addi	r2,r4,8
 200123c:	e0bfe915 	stw	r2,-92(fp)
 2001240:	20800017 	ldw	r2,0(r4)
 2001244:	20c00117 	ldw	r3,4(r4)
 2001248:	e0bfc215 	stw	r2,-248(fp)
 200124c:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 2001250:	e0bfc217 	ldw	r2,-248(fp)
 2001254:	e0ffc317 	ldw	r3,-244(fp)
 2001258:	1009883a 	mov	r4,r2
 200125c:	180b883a 	mov	r5,r3
 2001260:	200a92c0 	call	200a92c <__fpclassifyd>
 2001264:	10800058 	cmpnei	r2,r2,1
 2001268:	1000161e 	bne	r2,zero,20012c4 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 200126c:	e0bfc217 	ldw	r2,-248(fp)
 2001270:	e0ffc317 	ldw	r3,-244(fp)
 2001274:	000d883a 	mov	r6,zero
 2001278:	000f883a 	mov	r7,zero
 200127c:	1009883a 	mov	r4,r2
 2001280:	180b883a 	mov	r5,r3
 2001284:	20004e80 	call	20004e8 <__ledf2>
 2001288:	1000020e 	bge	r2,zero,2001294 <___vfprintf_internal_r+0x728>
					sign = '-';
 200128c:	00800b44 	movi	r2,45
 2001290:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2001294:	a0801208 	cmpgei	r2,r20,72
 2001298:	1000031e 	bne	r2,zero,20012a8 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 200129c:	04808074 	movhi	r18,513
 20012a0:	948b7604 	addi	r18,r18,11736
 20012a4:	00000206 	br	20012b0 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 20012a8:	04808074 	movhi	r18,513
 20012ac:	948b7704 	addi	r18,r18,11740
				size = 3;
 20012b0:	008000c4 	movi	r2,3
 20012b4:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 20012b8:	00bfdfc4 	movi	r2,-129
 20012bc:	98a6703a 	and	r19,r19,r2
				break;
 20012c0:	00021a06 	br	2001b2c <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 20012c4:	e0bfc217 	ldw	r2,-248(fp)
 20012c8:	e0ffc317 	ldw	r3,-244(fp)
 20012cc:	1009883a 	mov	r4,r2
 20012d0:	180b883a 	mov	r5,r3
 20012d4:	200a92c0 	call	200a92c <__fpclassifyd>
 20012d8:	10000c1e 	bne	r2,zero,200130c <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 20012dc:	a0801208 	cmpgei	r2,r20,72
 20012e0:	1000031e 	bne	r2,zero,20012f0 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 20012e4:	04808074 	movhi	r18,513
 20012e8:	948b7804 	addi	r18,r18,11744
 20012ec:	00000206 	br	20012f8 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 20012f0:	04808074 	movhi	r18,513
 20012f4:	948b7904 	addi	r18,r18,11748
				size = 3;
 20012f8:	008000c4 	movi	r2,3
 20012fc:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2001300:	00bfdfc4 	movi	r2,-129
 2001304:	98a6703a 	and	r19,r19,r2
				break;
 2001308:	00020806 	br	2001b2c <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 200130c:	e0bfae17 	ldw	r2,-328(fp)
 2001310:	10bfffd8 	cmpnei	r2,r2,-1
 2001314:	1000031e 	bne	r2,zero,2001324 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2001318:	00800184 	movi	r2,6
 200131c:	e0bfae15 	stw	r2,-328(fp)
 2001320:	00000806 	br	2001344 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 2001324:	a08019e0 	cmpeqi	r2,r20,103
 2001328:	1000021e 	bne	r2,zero,2001334 <___vfprintf_internal_r+0x7c8>
 200132c:	a08011d8 	cmpnei	r2,r20,71
 2001330:	1000041e 	bne	r2,zero,2001344 <___vfprintf_internal_r+0x7d8>
 2001334:	e0bfae17 	ldw	r2,-328(fp)
 2001338:	1000021e 	bne	r2,zero,2001344 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 200133c:	00800044 	movi	r2,1
 2001340:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 2001344:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 2001348:	e0bfc217 	ldw	r2,-248(fp)
 200134c:	e0ffc317 	ldw	r3,-244(fp)
 2001350:	dc800515 	stw	r18,20(sp)
 2001354:	e13fc704 	addi	r4,fp,-228
 2001358:	d9000415 	stw	r4,16(sp)
 200135c:	dd000315 	stw	r20,12(sp)
 2001360:	e13fc404 	addi	r4,fp,-240
 2001364:	d9000215 	stw	r4,8(sp)
 2001368:	e13fc144 	addi	r4,fp,-251
 200136c:	d9000115 	stw	r4,4(sp)
 2001370:	dcc00015 	stw	r19,0(sp)
 2001374:	e1ffae17 	ldw	r7,-328(fp)
 2001378:	100b883a 	mov	r5,r2
 200137c:	180d883a 	mov	r6,r3
 2001380:	e13fe617 	ldw	r4,-104(fp)
 2001384:	2002c3c0 	call	2002c3c <cvt>
 2001388:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 200138c:	a08019e0 	cmpeqi	r2,r20,103
 2001390:	1000021e 	bne	r2,zero,200139c <___vfprintf_internal_r+0x830>
 2001394:	a08011d8 	cmpnei	r2,r20,71
 2001398:	1000091e 	bne	r2,zero,20013c0 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 200139c:	e0bfc417 	ldw	r2,-240(fp)
 20013a0:	10bfff50 	cmplti	r2,r2,-3
 20013a4:	1000031e 	bne	r2,zero,20013b4 <___vfprintf_internal_r+0x848>
 20013a8:	e0bfc417 	ldw	r2,-240(fp)
 20013ac:	e0ffae17 	ldw	r3,-328(fp)
 20013b0:	1880020e 	bge	r3,r2,20013bc <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 20013b4:	a53fff84 	addi	r20,r20,-2
 20013b8:	00000106 	br	20013c0 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 20013bc:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 20013c0:	a0801988 	cmpgei	r2,r20,102
 20013c4:	1000171e 	bne	r2,zero,2001424 <___vfprintf_internal_r+0x8b8>
				--expt;
 20013c8:	e0bfc417 	ldw	r2,-240(fp)
 20013cc:	10bfffc4 	addi	r2,r2,-1
 20013d0:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 20013d4:	e0bfc417 	ldw	r2,-240(fp)
 20013d8:	e0ffc504 	addi	r3,fp,-236
 20013dc:	a00d883a 	mov	r6,r20
 20013e0:	100b883a 	mov	r5,r2
 20013e4:	1809883a 	mov	r4,r3
 20013e8:	2002e480 	call	2002e48 <exponent>
 20013ec:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 20013f0:	e0bfc717 	ldw	r2,-228(fp)
 20013f4:	e0ffaf17 	ldw	r3,-324(fp)
 20013f8:	1885883a 	add	r2,r3,r2
 20013fc:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 2001400:	e0bfc717 	ldw	r2,-228(fp)
 2001404:	10800088 	cmpgei	r2,r2,2
 2001408:	1000021e 	bne	r2,zero,2001414 <___vfprintf_internal_r+0x8a8>
 200140c:	9880004c 	andi	r2,r19,1
 2001410:	10003526 	beq	r2,zero,20014e8 <___vfprintf_internal_r+0x97c>
					++size;
 2001414:	e0bfb617 	ldw	r2,-296(fp)
 2001418:	10800044 	addi	r2,r2,1
 200141c:	e0bfb615 	stw	r2,-296(fp)
 2001420:	00003106 	br	20014e8 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 2001424:	a0801998 	cmpnei	r2,r20,102
 2001428:	1000181e 	bne	r2,zero,200148c <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 200142c:	e0bfc417 	ldw	r2,-240(fp)
 2001430:	00800c0e 	bge	zero,r2,2001464 <___vfprintf_internal_r+0x8f8>
						size = expt;
 2001434:	e0bfc417 	ldw	r2,-240(fp)
 2001438:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 200143c:	e0bfae17 	ldw	r2,-328(fp)
 2001440:	1000021e 	bne	r2,zero,200144c <___vfprintf_internal_r+0x8e0>
 2001444:	9880004c 	andi	r2,r19,1
 2001448:	10002526 	beq	r2,zero,20014e0 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 200144c:	e0bfae17 	ldw	r2,-328(fp)
 2001450:	10800044 	addi	r2,r2,1
 2001454:	e0ffb617 	ldw	r3,-296(fp)
 2001458:	1885883a 	add	r2,r3,r2
 200145c:	e0bfb615 	stw	r2,-296(fp)
 2001460:	00001f06 	br	20014e0 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 2001464:	e0bfae17 	ldw	r2,-328(fp)
 2001468:	1000021e 	bne	r2,zero,2001474 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200146c:	9880004c 	andi	r2,r19,1
 2001470:	10000326 	beq	r2,zero,2001480 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 2001474:	e0bfae17 	ldw	r2,-328(fp)
 2001478:	10800084 	addi	r2,r2,2
 200147c:	00000106 	br	2001484 <___vfprintf_internal_r+0x918>
 2001480:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2001484:	e0bfb615 	stw	r2,-296(fp)
 2001488:	00001506 	br	20014e0 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 200148c:	e0ffc417 	ldw	r3,-240(fp)
 2001490:	e0bfc717 	ldw	r2,-228(fp)
 2001494:	18800816 	blt	r3,r2,20014b8 <___vfprintf_internal_r+0x94c>
					size = expt;
 2001498:	e0bfc417 	ldw	r2,-240(fp)
 200149c:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 20014a0:	9880004c 	andi	r2,r19,1
 20014a4:	10000e26 	beq	r2,zero,20014e0 <___vfprintf_internal_r+0x974>
						++size;
 20014a8:	e0bfb617 	ldw	r2,-296(fp)
 20014ac:	10800044 	addi	r2,r2,1
 20014b0:	e0bfb615 	stw	r2,-296(fp)
 20014b4:	00000a06 	br	20014e0 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 20014b8:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 20014bc:	00800416 	blt	zero,r2,20014d0 <___vfprintf_internal_r+0x964>
 20014c0:	e0bfc417 	ldw	r2,-240(fp)
 20014c4:	00c00084 	movi	r3,2
 20014c8:	1885c83a 	sub	r2,r3,r2
 20014cc:	00000106 	br	20014d4 <___vfprintf_internal_r+0x968>
 20014d0:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 20014d4:	e0ffc717 	ldw	r3,-228(fp)
 20014d8:	10c5883a 	add	r2,r2,r3
 20014dc:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 20014e0:	e0bfc417 	ldw	r2,-240(fp)
 20014e4:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 20014e8:	e0bfc143 	ldbu	r2,-251(fp)
 20014ec:	10803fcc 	andi	r2,r2,255
 20014f0:	1080201c 	xori	r2,r2,128
 20014f4:	10bfe004 	addi	r2,r2,-128
 20014f8:	10018b26 	beq	r2,zero,2001b28 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 20014fc:	00800b44 	movi	r2,45
 2001500:	e0bfc105 	stb	r2,-252(fp)
			break;
 2001504:	00018806 	br	2001b28 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2001508:	9880080c 	andi	r2,r19,32
 200150c:	10000d26 	beq	r2,zero,2001544 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2001510:	e0bfe917 	ldw	r2,-92(fp)
 2001514:	10c00104 	addi	r3,r2,4
 2001518:	e0ffe915 	stw	r3,-92(fp)
 200151c:	10800017 	ldw	r2,0(r2)
 2001520:	e0ffac17 	ldw	r3,-336(fp)
 2001524:	e0fff015 	stw	r3,-64(fp)
 2001528:	1807d7fa 	srai	r3,r3,31
 200152c:	e0fff115 	stw	r3,-60(fp)
 2001530:	e0fff017 	ldw	r3,-64(fp)
 2001534:	10c00015 	stw	r3,0(r2)
 2001538:	e0fff117 	ldw	r3,-60(fp)
 200153c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2001540:	00054b06 	br	2002a70 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2001544:	9880040c 	andi	r2,r19,16
 2001548:	10000726 	beq	r2,zero,2001568 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200154c:	e0bfe917 	ldw	r2,-92(fp)
 2001550:	10c00104 	addi	r3,r2,4
 2001554:	e0ffe915 	stw	r3,-92(fp)
 2001558:	10800017 	ldw	r2,0(r2)
 200155c:	e0ffac17 	ldw	r3,-336(fp)
 2001560:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2001564:	00054206 	br	2002a70 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2001568:	9880100c 	andi	r2,r19,64
 200156c:	10000726 	beq	r2,zero,200158c <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2001570:	e0bfe917 	ldw	r2,-92(fp)
 2001574:	10c00104 	addi	r3,r2,4
 2001578:	e0ffe915 	stw	r3,-92(fp)
 200157c:	10800017 	ldw	r2,0(r2)
 2001580:	e0ffac17 	ldw	r3,-336(fp)
 2001584:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2001588:	00053906 	br	2002a70 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200158c:	e0bfe917 	ldw	r2,-92(fp)
 2001590:	10c00104 	addi	r3,r2,4
 2001594:	e0ffe915 	stw	r3,-92(fp)
 2001598:	10800017 	ldw	r2,0(r2)
 200159c:	e0ffac17 	ldw	r3,-336(fp)
 20015a0:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 20015a4:	00053206 	br	2002a70 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 20015a8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 20015ac:	9880080c 	andi	r2,r19,32
 20015b0:	10000626 	beq	r2,zero,20015cc <___vfprintf_internal_r+0xa60>
 20015b4:	e0bfe917 	ldw	r2,-92(fp)
 20015b8:	10c00204 	addi	r3,r2,8
 20015bc:	e0ffe915 	stw	r3,-92(fp)
 20015c0:	15800017 	ldw	r22,0(r2)
 20015c4:	15c00117 	ldw	r23,4(r2)
 20015c8:	00001c06 	br	200163c <___vfprintf_internal_r+0xad0>
 20015cc:	9880040c 	andi	r2,r19,16
 20015d0:	10000726 	beq	r2,zero,20015f0 <___vfprintf_internal_r+0xa84>
 20015d4:	e0bfe917 	ldw	r2,-92(fp)
 20015d8:	10c00104 	addi	r3,r2,4
 20015dc:	e0ffe915 	stw	r3,-92(fp)
 20015e0:	10800017 	ldw	r2,0(r2)
 20015e4:	102d883a 	mov	r22,r2
 20015e8:	002f883a 	mov	r23,zero
 20015ec:	00001306 	br	200163c <___vfprintf_internal_r+0xad0>
 20015f0:	9880100c 	andi	r2,r19,64
 20015f4:	10000b26 	beq	r2,zero,2001624 <___vfprintf_internal_r+0xab8>
 20015f8:	e0bfe917 	ldw	r2,-92(fp)
 20015fc:	10c00104 	addi	r3,r2,4
 2001600:	e0ffe915 	stw	r3,-92(fp)
 2001604:	10800017 	ldw	r2,0(r2)
 2001608:	e0bff215 	stw	r2,-56(fp)
 200160c:	e03ff315 	stw	zero,-52(fp)
 2001610:	e0bff217 	ldw	r2,-56(fp)
 2001614:	15bfffcc 	andi	r22,r2,65535
 2001618:	e0fff317 	ldw	r3,-52(fp)
 200161c:	182e703a 	and	r23,r3,zero
 2001620:	00000606 	br	200163c <___vfprintf_internal_r+0xad0>
 2001624:	e0bfe917 	ldw	r2,-92(fp)
 2001628:	10c00104 	addi	r3,r2,4
 200162c:	e0ffe915 	stw	r3,-92(fp)
 2001630:	10800017 	ldw	r2,0(r2)
 2001634:	102d883a 	mov	r22,r2
 2001638:	002f883a 	mov	r23,zero
 200163c:	e5bfb115 	stw	r22,-316(fp)
 2001640:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 2001644:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2001648:	0000a606 	br	20018e4 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200164c:	e0bfe917 	ldw	r2,-92(fp)
 2001650:	10c00104 	addi	r3,r2,4
 2001654:	e0ffe915 	stw	r3,-92(fp)
 2001658:	10800017 	ldw	r2,0(r2)
 200165c:	e0bfb115 	stw	r2,-316(fp)
 2001660:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 2001664:	00800084 	movi	r2,2
 2001668:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 200166c:	00808074 	movhi	r2,513
 2001670:	108b7a04 	addi	r2,r2,11752
 2001674:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2001678:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200167c:	00800c04 	movi	r2,48
 2001680:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2001684:	05001e04 	movi	r20,120
 2001688:	00801e04 	movi	r2,120
 200168c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2001690:	00009406 	br	20018e4 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2001694:	e0bfe917 	ldw	r2,-92(fp)
 2001698:	10c00104 	addi	r3,r2,4
 200169c:	e0ffe915 	stw	r3,-92(fp)
 20016a0:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 20016a4:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 20016a8:	9000081e 	bne	r18,zero,20016cc <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 20016ac:	04808074 	movhi	r18,513
 20016b0:	948b7f04 	addi	r18,r18,11772
				size = ((unsigned) prec > 6U) ? 6 : prec;
 20016b4:	e0bfae17 	ldw	r2,-328(fp)
 20016b8:	10c001f0 	cmpltui	r3,r2,7
 20016bc:	1800011e 	bne	r3,zero,20016c4 <___vfprintf_internal_r+0xb58>
 20016c0:	00800184 	movi	r2,6
 20016c4:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 20016c8:	00011806 	br	2001b2c <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 20016cc:	e0bfae17 	ldw	r2,-328(fp)
 20016d0:	10001016 	blt	r2,zero,2001714 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 20016d4:	e0bfae17 	ldw	r2,-328(fp)
 20016d8:	100d883a 	mov	r6,r2
 20016dc:	000b883a 	mov	r5,zero
 20016e0:	9009883a 	mov	r4,r18
 20016e4:	2007bb40 	call	2007bb4 <memchr>
 20016e8:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 20016ec:	e0bfbf17 	ldw	r2,-260(fp)
 20016f0:	10000526 	beq	r2,zero,2001708 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 20016f4:	e0bfbf17 	ldw	r2,-260(fp)
 20016f8:	9007883a 	mov	r3,r18
 20016fc:	10c5c83a 	sub	r2,r2,r3
 2001700:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2001704:	00010906 	br	2001b2c <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2001708:	e0bfae17 	ldw	r2,-328(fp)
 200170c:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2001710:	00010606 	br	2001b2c <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2001714:	9009883a 	mov	r4,r18
 2001718:	20009380 	call	2000938 <strlen>
 200171c:	e0bfb615 	stw	r2,-296(fp)

			break;
 2001720:	00010206 	br	2001b2c <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2001724:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2001728:	9880080c 	andi	r2,r19,32
 200172c:	10000826 	beq	r2,zero,2001750 <___vfprintf_internal_r+0xbe4>
 2001730:	e0bfe917 	ldw	r2,-92(fp)
 2001734:	10c00204 	addi	r3,r2,8
 2001738:	e0ffe915 	stw	r3,-92(fp)
 200173c:	10c00017 	ldw	r3,0(r2)
 2001740:	e0ffec15 	stw	r3,-80(fp)
 2001744:	10c00117 	ldw	r3,4(r2)
 2001748:	e0ffed15 	stw	r3,-76(fp)
 200174c:	00001e06 	br	20017c8 <___vfprintf_internal_r+0xc5c>
 2001750:	9880040c 	andi	r2,r19,16
 2001754:	10000726 	beq	r2,zero,2001774 <___vfprintf_internal_r+0xc08>
 2001758:	e0bfe917 	ldw	r2,-92(fp)
 200175c:	10c00104 	addi	r3,r2,4
 2001760:	e0ffe915 	stw	r3,-92(fp)
 2001764:	10800017 	ldw	r2,0(r2)
 2001768:	e0bfec15 	stw	r2,-80(fp)
 200176c:	e03fed15 	stw	zero,-76(fp)
 2001770:	00001506 	br	20017c8 <___vfprintf_internal_r+0xc5c>
 2001774:	9880100c 	andi	r2,r19,64
 2001778:	10000d26 	beq	r2,zero,20017b0 <___vfprintf_internal_r+0xc44>
 200177c:	e0bfe917 	ldw	r2,-92(fp)
 2001780:	10c00104 	addi	r3,r2,4
 2001784:	e0ffe915 	stw	r3,-92(fp)
 2001788:	10800017 	ldw	r2,0(r2)
 200178c:	e0bff415 	stw	r2,-48(fp)
 2001790:	e03ff515 	stw	zero,-44(fp)
 2001794:	e0bff417 	ldw	r2,-48(fp)
 2001798:	10bfffcc 	andi	r2,r2,65535
 200179c:	e0bfec15 	stw	r2,-80(fp)
 20017a0:	e0fff517 	ldw	r3,-44(fp)
 20017a4:	1806703a 	and	r3,r3,zero
 20017a8:	e0ffed15 	stw	r3,-76(fp)
 20017ac:	00000606 	br	20017c8 <___vfprintf_internal_r+0xc5c>
 20017b0:	e0bfe917 	ldw	r2,-92(fp)
 20017b4:	10c00104 	addi	r3,r2,4
 20017b8:	e0ffe915 	stw	r3,-92(fp)
 20017bc:	10800017 	ldw	r2,0(r2)
 20017c0:	e0bfec15 	stw	r2,-80(fp)
 20017c4:	e03fed15 	stw	zero,-76(fp)
 20017c8:	e0bfec17 	ldw	r2,-80(fp)
 20017cc:	e0bfb115 	stw	r2,-316(fp)
 20017d0:	e0ffed17 	ldw	r3,-76(fp)
 20017d4:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 20017d8:	00800044 	movi	r2,1
 20017dc:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 20017e0:	00004006 	br	20018e4 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 20017e4:	00808074 	movhi	r2,513
 20017e8:	108b8104 	addi	r2,r2,11780
 20017ec:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 20017f0:	00000306 	br	2001800 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 20017f4:	00808074 	movhi	r2,513
 20017f8:	108b7a04 	addi	r2,r2,11752
 20017fc:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 2001800:	9880080c 	andi	r2,r19,32
 2001804:	10000826 	beq	r2,zero,2001828 <___vfprintf_internal_r+0xcbc>
 2001808:	e0bfe917 	ldw	r2,-92(fp)
 200180c:	10c00204 	addi	r3,r2,8
 2001810:	e0ffe915 	stw	r3,-92(fp)
 2001814:	10c00017 	ldw	r3,0(r2)
 2001818:	e0ffee15 	stw	r3,-72(fp)
 200181c:	10c00117 	ldw	r3,4(r2)
 2001820:	e0ffef15 	stw	r3,-68(fp)
 2001824:	00001e06 	br	20018a0 <___vfprintf_internal_r+0xd34>
 2001828:	9880040c 	andi	r2,r19,16
 200182c:	10000726 	beq	r2,zero,200184c <___vfprintf_internal_r+0xce0>
 2001830:	e0bfe917 	ldw	r2,-92(fp)
 2001834:	10c00104 	addi	r3,r2,4
 2001838:	e0ffe915 	stw	r3,-92(fp)
 200183c:	10800017 	ldw	r2,0(r2)
 2001840:	e0bfee15 	stw	r2,-72(fp)
 2001844:	e03fef15 	stw	zero,-68(fp)
 2001848:	00001506 	br	20018a0 <___vfprintf_internal_r+0xd34>
 200184c:	9880100c 	andi	r2,r19,64
 2001850:	10000d26 	beq	r2,zero,2001888 <___vfprintf_internal_r+0xd1c>
 2001854:	e0bfe917 	ldw	r2,-92(fp)
 2001858:	10c00104 	addi	r3,r2,4
 200185c:	e0ffe915 	stw	r3,-92(fp)
 2001860:	10800017 	ldw	r2,0(r2)
 2001864:	e0bff615 	stw	r2,-40(fp)
 2001868:	e03ff715 	stw	zero,-36(fp)
 200186c:	e0bff617 	ldw	r2,-40(fp)
 2001870:	10bfffcc 	andi	r2,r2,65535
 2001874:	e0bfee15 	stw	r2,-72(fp)
 2001878:	e0fff717 	ldw	r3,-36(fp)
 200187c:	1806703a 	and	r3,r3,zero
 2001880:	e0ffef15 	stw	r3,-68(fp)
 2001884:	00000606 	br	20018a0 <___vfprintf_internal_r+0xd34>
 2001888:	e0bfe917 	ldw	r2,-92(fp)
 200188c:	10c00104 	addi	r3,r2,4
 2001890:	e0ffe915 	stw	r3,-92(fp)
 2001894:	10800017 	ldw	r2,0(r2)
 2001898:	e0bfee15 	stw	r2,-72(fp)
 200189c:	e03fef15 	stw	zero,-68(fp)
 20018a0:	e0bfee17 	ldw	r2,-72(fp)
 20018a4:	e0bfb115 	stw	r2,-316(fp)
 20018a8:	e0ffef17 	ldw	r3,-68(fp)
 20018ac:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 20018b0:	00800084 	movi	r2,2
 20018b4:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 20018b8:	9880004c 	andi	r2,r19,1
 20018bc:	10000926 	beq	r2,zero,20018e4 <___vfprintf_internal_r+0xd78>
 20018c0:	e0bfb117 	ldw	r2,-316(fp)
 20018c4:	e0ffb217 	ldw	r3,-312(fp)
 20018c8:	10c4b03a 	or	r2,r2,r3
 20018cc:	10000526 	beq	r2,zero,20018e4 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 20018d0:	00800c04 	movi	r2,48
 20018d4:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 20018d8:	a005883a 	mov	r2,r20
 20018dc:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 20018e0:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 20018e4:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 20018e8:	e0bfae17 	ldw	r2,-328(fp)
 20018ec:	e0bfb415 	stw	r2,-304(fp)
 20018f0:	e0bfb417 	ldw	r2,-304(fp)
 20018f4:	10000216 	blt	r2,zero,2001900 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 20018f8:	00bfdfc4 	movi	r2,-129
 20018fc:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2001900:	e4bfdb04 	addi	r18,fp,-148
 2001904:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 2001908:	e0bfb117 	ldw	r2,-316(fp)
 200190c:	e0ffb217 	ldw	r3,-312(fp)
 2001910:	10c4b03a 	or	r2,r2,r3
 2001914:	1000021e 	bne	r2,zero,2001920 <___vfprintf_internal_r+0xdb4>
 2001918:	e0bfae17 	ldw	r2,-328(fp)
 200191c:	10006c26 	beq	r2,zero,2001ad0 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2001920:	e0bfb303 	ldbu	r2,-308(fp)
 2001924:	10c00060 	cmpeqi	r3,r2,1
 2001928:	1800211e 	bne	r3,zero,20019b0 <___vfprintf_internal_r+0xe44>
 200192c:	10c000a0 	cmpeqi	r3,r2,2
 2001930:	1800491e 	bne	r3,zero,2001a58 <___vfprintf_internal_r+0xeec>
 2001934:	10005d1e 	bne	r2,zero,2001aac <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 2001938:	94bfffc4 	addi	r18,r18,-1
 200193c:	e0bfb117 	ldw	r2,-316(fp)
 2001940:	108001cc 	andi	r2,r2,7
 2001944:	10800c04 	addi	r2,r2,48
 2001948:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 200194c:	e0bfb217 	ldw	r2,-312(fp)
 2001950:	1004977a 	slli	r2,r2,29
 2001954:	e0ffb117 	ldw	r3,-316(fp)
 2001958:	1806d0fa 	srli	r3,r3,3
 200195c:	1884b03a 	or	r2,r3,r2
 2001960:	e0bfb115 	stw	r2,-316(fp)
 2001964:	e0bfb217 	ldw	r2,-312(fp)
 2001968:	1004d0fa 	srli	r2,r2,3
 200196c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2001970:	e0bfb117 	ldw	r2,-316(fp)
 2001974:	e0ffb217 	ldw	r3,-312(fp)
 2001978:	10c4b03a 	or	r2,r2,r3
 200197c:	103fee1e 	bne	r2,zero,2001938 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2001980:	9880004c 	andi	r2,r19,1
 2001984:	10005026 	beq	r2,zero,2001ac8 <___vfprintf_internal_r+0xf5c>
 2001988:	90800003 	ldbu	r2,0(r18)
 200198c:	10803fcc 	andi	r2,r2,255
 2001990:	1080201c 	xori	r2,r2,128
 2001994:	10bfe004 	addi	r2,r2,-128
 2001998:	10800c20 	cmpeqi	r2,r2,48
 200199c:	10004a1e 	bne	r2,zero,2001ac8 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 20019a0:	94bfffc4 	addi	r18,r18,-1
 20019a4:	00800c04 	movi	r2,48
 20019a8:	90800005 	stb	r2,0(r18)
					break;
 20019ac:	00004606 	br	2001ac8 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 20019b0:	e0bfb217 	ldw	r2,-312(fp)
 20019b4:	10000a1e 	bne	r2,zero,20019e0 <___vfprintf_internal_r+0xe74>
 20019b8:	e0bfb217 	ldw	r2,-312(fp)
 20019bc:	1000031e 	bne	r2,zero,20019cc <___vfprintf_internal_r+0xe60>
 20019c0:	e0bfb117 	ldw	r2,-316(fp)
 20019c4:	108002a8 	cmpgeui	r2,r2,10
 20019c8:	1000051e 	bne	r2,zero,20019e0 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 20019cc:	94bfffc4 	addi	r18,r18,-1
 20019d0:	e0bfb117 	ldw	r2,-316(fp)
 20019d4:	10800c04 	addi	r2,r2,48
 20019d8:	90800005 	stb	r2,0(r18)
						break;
 20019dc:	00003b06 	br	2001acc <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 20019e0:	94bfffc4 	addi	r18,r18,-1
 20019e4:	e0bfb117 	ldw	r2,-316(fp)
 20019e8:	e0ffb217 	ldw	r3,-312(fp)
 20019ec:	01800284 	movi	r6,10
 20019f0:	000f883a 	mov	r7,zero
 20019f4:	1009883a 	mov	r4,r2
 20019f8:	180b883a 	mov	r5,r3
 20019fc:	200d5500 	call	200d550 <__umoddi3>
 2001a00:	1009883a 	mov	r4,r2
 2001a04:	180b883a 	mov	r5,r3
 2001a08:	2005883a 	mov	r2,r4
 2001a0c:	2807883a 	mov	r3,r5
 2001a10:	10800c04 	addi	r2,r2,48
 2001a14:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2001a18:	e0bfb117 	ldw	r2,-316(fp)
 2001a1c:	e0ffb217 	ldw	r3,-312(fp)
 2001a20:	01800284 	movi	r6,10
 2001a24:	000f883a 	mov	r7,zero
 2001a28:	1009883a 	mov	r4,r2
 2001a2c:	180b883a 	mov	r5,r3
 2001a30:	200cfd80 	call	200cfd8 <__udivdi3>
 2001a34:	1009883a 	mov	r4,r2
 2001a38:	180b883a 	mov	r5,r3
 2001a3c:	e13fb115 	stw	r4,-316(fp)
 2001a40:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 2001a44:	e0bfb117 	ldw	r2,-316(fp)
 2001a48:	e0ffb217 	ldw	r3,-312(fp)
 2001a4c:	10c4b03a 	or	r2,r2,r3
 2001a50:	103fe31e 	bne	r2,zero,20019e0 <___vfprintf_internal_r+0xe74>
					break;
 2001a54:	00001d06 	br	2001acc <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 2001a58:	94bfffc4 	addi	r18,r18,-1
 2001a5c:	e0bfb117 	ldw	r2,-316(fp)
 2001a60:	108003cc 	andi	r2,r2,15
 2001a64:	e0ffb717 	ldw	r3,-292(fp)
 2001a68:	1885883a 	add	r2,r3,r2
 2001a6c:	10800003 	ldbu	r2,0(r2)
 2001a70:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 2001a74:	e0bfb217 	ldw	r2,-312(fp)
 2001a78:	1004973a 	slli	r2,r2,28
 2001a7c:	e0ffb117 	ldw	r3,-316(fp)
 2001a80:	1806d13a 	srli	r3,r3,4
 2001a84:	1884b03a 	or	r2,r3,r2
 2001a88:	e0bfb115 	stw	r2,-316(fp)
 2001a8c:	e0bfb217 	ldw	r2,-312(fp)
 2001a90:	1004d13a 	srli	r2,r2,4
 2001a94:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2001a98:	e0bfb117 	ldw	r2,-316(fp)
 2001a9c:	e0ffb217 	ldw	r3,-312(fp)
 2001aa0:	10c4b03a 	or	r2,r2,r3
 2001aa4:	103fec1e 	bne	r2,zero,2001a58 <___vfprintf_internal_r+0xeec>
					break;
 2001aa8:	00000806 	br	2001acc <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 2001aac:	04808074 	movhi	r18,513
 2001ab0:	948b8604 	addi	r18,r18,11800
					size = strlen (cp);
 2001ab4:	9009883a 	mov	r4,r18
 2001ab8:	20009380 	call	2000938 <strlen>
 2001abc:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 2001ac0:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2001ac4:	00001906 	br	2001b2c <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2001ac8:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2001acc:	00000706 	br	2001aec <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2001ad0:	e0bfb303 	ldbu	r2,-308(fp)
 2001ad4:	1000051e 	bne	r2,zero,2001aec <___vfprintf_internal_r+0xf80>
 2001ad8:	9880004c 	andi	r2,r19,1
 2001adc:	10000326 	beq	r2,zero,2001aec <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 2001ae0:	94bfffc4 	addi	r18,r18,-1
 2001ae4:	00800c04 	movi	r2,48
 2001ae8:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 2001aec:	e0bfdb04 	addi	r2,fp,-148
 2001af0:	10800a04 	addi	r2,r2,40
 2001af4:	1007883a 	mov	r3,r2
 2001af8:	9005883a 	mov	r2,r18
 2001afc:	1885c83a 	sub	r2,r3,r2
 2001b00:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 2001b04:	00000906 	br	2001b2c <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2001b08:	a003dc26 	beq	r20,zero,2002a7c <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2001b0c:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 2001b10:	a005883a 	mov	r2,r20
 2001b14:	90800005 	stb	r2,0(r18)
			size = 1;
 2001b18:	00800044 	movi	r2,1
 2001b1c:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 2001b20:	e03fc105 	stb	zero,-252(fp)
			break;
 2001b24:	00000106 	br	2001b2c <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 2001b28:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2001b2c:	e0ffb417 	ldw	r3,-304(fp)
 2001b30:	e0bfb617 	ldw	r2,-296(fp)
 2001b34:	10c0010e 	bge	r2,r3,2001b3c <___vfprintf_internal_r+0xfd0>
 2001b38:	1805883a 	mov	r2,r3
 2001b3c:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 2001b40:	e0bfc103 	ldbu	r2,-252(fp)
 2001b44:	10803fcc 	andi	r2,r2,255
 2001b48:	1080201c 	xori	r2,r2,128
 2001b4c:	10bfe004 	addi	r2,r2,-128
 2001b50:	10000326 	beq	r2,zero,2001b60 <___vfprintf_internal_r+0xff4>
			realsz++;
 2001b54:	e0bfb517 	ldw	r2,-300(fp)
 2001b58:	10800044 	addi	r2,r2,1
 2001b5c:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 2001b60:	9880008c 	andi	r2,r19,2
 2001b64:	10000326 	beq	r2,zero,2001b74 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 2001b68:	e0bfb517 	ldw	r2,-300(fp)
 2001b6c:	10800084 	addi	r2,r2,2
 2001b70:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2001b74:	9880210c 	andi	r2,r19,132
 2001b78:	1000351e 	bne	r2,zero,2001c50 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 2001b7c:	e0ffad17 	ldw	r3,-332(fp)
 2001b80:	e0bfb517 	ldw	r2,-300(fp)
 2001b84:	18a1c83a 	sub	r16,r3,r2
 2001b88:	0400310e 	bge	zero,r16,2001c50 <___vfprintf_internal_r+0x10e4>
 2001b8c:	00001706 	br	2001bec <___vfprintf_internal_r+0x1080>
 2001b90:	00808074 	movhi	r2,513
 2001b94:	108b8d84 	addi	r2,r2,11830
 2001b98:	88800015 	stw	r2,0(r17)
 2001b9c:	00800404 	movi	r2,16
 2001ba0:	88800115 	stw	r2,4(r17)
 2001ba4:	e0bfca17 	ldw	r2,-216(fp)
 2001ba8:	10800404 	addi	r2,r2,16
 2001bac:	e0bfca15 	stw	r2,-216(fp)
 2001bb0:	8c400204 	addi	r17,r17,8
 2001bb4:	e0bfc917 	ldw	r2,-220(fp)
 2001bb8:	10800044 	addi	r2,r2,1
 2001bbc:	e0bfc915 	stw	r2,-220(fp)
 2001bc0:	e0bfc917 	ldw	r2,-220(fp)
 2001bc4:	10800210 	cmplti	r2,r2,8
 2001bc8:	1000071e 	bne	r2,zero,2001be8 <___vfprintf_internal_r+0x107c>
 2001bcc:	e0bfc804 	addi	r2,fp,-224
 2001bd0:	100d883a 	mov	r6,r2
 2001bd4:	e17fe717 	ldw	r5,-100(fp)
 2001bd8:	e13fe617 	ldw	r4,-104(fp)
 2001bdc:	200ae440 	call	200ae44 <__sprint_r>
 2001be0:	1003b41e 	bne	r2,zero,2002ab4 <___vfprintf_internal_r+0x1f48>
 2001be4:	e47fcb04 	addi	r17,fp,-212
 2001be8:	843ffc04 	addi	r16,r16,-16
 2001bec:	80800448 	cmpgei	r2,r16,17
 2001bf0:	103fe71e 	bne	r2,zero,2001b90 <___vfprintf_internal_r+0x1024>
 2001bf4:	00808074 	movhi	r2,513
 2001bf8:	108b8d84 	addi	r2,r2,11830
 2001bfc:	88800015 	stw	r2,0(r17)
 2001c00:	8005883a 	mov	r2,r16
 2001c04:	88800115 	stw	r2,4(r17)
 2001c08:	e0bfca17 	ldw	r2,-216(fp)
 2001c0c:	8007883a 	mov	r3,r16
 2001c10:	10c5883a 	add	r2,r2,r3
 2001c14:	e0bfca15 	stw	r2,-216(fp)
 2001c18:	8c400204 	addi	r17,r17,8
 2001c1c:	e0bfc917 	ldw	r2,-220(fp)
 2001c20:	10800044 	addi	r2,r2,1
 2001c24:	e0bfc915 	stw	r2,-220(fp)
 2001c28:	e0bfc917 	ldw	r2,-220(fp)
 2001c2c:	10800210 	cmplti	r2,r2,8
 2001c30:	1000071e 	bne	r2,zero,2001c50 <___vfprintf_internal_r+0x10e4>
 2001c34:	e0bfc804 	addi	r2,fp,-224
 2001c38:	100d883a 	mov	r6,r2
 2001c3c:	e17fe717 	ldw	r5,-100(fp)
 2001c40:	e13fe617 	ldw	r4,-104(fp)
 2001c44:	200ae440 	call	200ae44 <__sprint_r>
 2001c48:	10039c1e 	bne	r2,zero,2002abc <___vfprintf_internal_r+0x1f50>
 2001c4c:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 2001c50:	e0bfc103 	ldbu	r2,-252(fp)
 2001c54:	10803fcc 	andi	r2,r2,255
 2001c58:	1080201c 	xori	r2,r2,128
 2001c5c:	10bfe004 	addi	r2,r2,-128
 2001c60:	10001526 	beq	r2,zero,2001cb8 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 2001c64:	e0bfc104 	addi	r2,fp,-252
 2001c68:	88800015 	stw	r2,0(r17)
 2001c6c:	00800044 	movi	r2,1
 2001c70:	88800115 	stw	r2,4(r17)
 2001c74:	e0bfca17 	ldw	r2,-216(fp)
 2001c78:	10800044 	addi	r2,r2,1
 2001c7c:	e0bfca15 	stw	r2,-216(fp)
 2001c80:	8c400204 	addi	r17,r17,8
 2001c84:	e0bfc917 	ldw	r2,-220(fp)
 2001c88:	10800044 	addi	r2,r2,1
 2001c8c:	e0bfc915 	stw	r2,-220(fp)
 2001c90:	e0bfc917 	ldw	r2,-220(fp)
 2001c94:	10800210 	cmplti	r2,r2,8
 2001c98:	1000071e 	bne	r2,zero,2001cb8 <___vfprintf_internal_r+0x114c>
 2001c9c:	e0bfc804 	addi	r2,fp,-224
 2001ca0:	100d883a 	mov	r6,r2
 2001ca4:	e17fe717 	ldw	r5,-100(fp)
 2001ca8:	e13fe617 	ldw	r4,-104(fp)
 2001cac:	200ae440 	call	200ae44 <__sprint_r>
 2001cb0:	1003841e 	bne	r2,zero,2002ac4 <___vfprintf_internal_r+0x1f58>
 2001cb4:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 2001cb8:	9880008c 	andi	r2,r19,2
 2001cbc:	10001526 	beq	r2,zero,2001d14 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 2001cc0:	e0bfe504 	addi	r2,fp,-108
 2001cc4:	88800015 	stw	r2,0(r17)
 2001cc8:	00800084 	movi	r2,2
 2001ccc:	88800115 	stw	r2,4(r17)
 2001cd0:	e0bfca17 	ldw	r2,-216(fp)
 2001cd4:	10800084 	addi	r2,r2,2
 2001cd8:	e0bfca15 	stw	r2,-216(fp)
 2001cdc:	8c400204 	addi	r17,r17,8
 2001ce0:	e0bfc917 	ldw	r2,-220(fp)
 2001ce4:	10800044 	addi	r2,r2,1
 2001ce8:	e0bfc915 	stw	r2,-220(fp)
 2001cec:	e0bfc917 	ldw	r2,-220(fp)
 2001cf0:	10800210 	cmplti	r2,r2,8
 2001cf4:	1000071e 	bne	r2,zero,2001d14 <___vfprintf_internal_r+0x11a8>
 2001cf8:	e0bfc804 	addi	r2,fp,-224
 2001cfc:	100d883a 	mov	r6,r2
 2001d00:	e17fe717 	ldw	r5,-100(fp)
 2001d04:	e13fe617 	ldw	r4,-104(fp)
 2001d08:	200ae440 	call	200ae44 <__sprint_r>
 2001d0c:	10036f1e 	bne	r2,zero,2002acc <___vfprintf_internal_r+0x1f60>
 2001d10:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2001d14:	9880210c 	andi	r2,r19,132
 2001d18:	10802018 	cmpnei	r2,r2,128
 2001d1c:	1000351e 	bne	r2,zero,2001df4 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 2001d20:	e0ffad17 	ldw	r3,-332(fp)
 2001d24:	e0bfb517 	ldw	r2,-300(fp)
 2001d28:	18a1c83a 	sub	r16,r3,r2
 2001d2c:	0400310e 	bge	zero,r16,2001df4 <___vfprintf_internal_r+0x1288>
 2001d30:	00001706 	br	2001d90 <___vfprintf_internal_r+0x1224>
 2001d34:	00808074 	movhi	r2,513
 2001d38:	108b9184 	addi	r2,r2,11846
 2001d3c:	88800015 	stw	r2,0(r17)
 2001d40:	00800404 	movi	r2,16
 2001d44:	88800115 	stw	r2,4(r17)
 2001d48:	e0bfca17 	ldw	r2,-216(fp)
 2001d4c:	10800404 	addi	r2,r2,16
 2001d50:	e0bfca15 	stw	r2,-216(fp)
 2001d54:	8c400204 	addi	r17,r17,8
 2001d58:	e0bfc917 	ldw	r2,-220(fp)
 2001d5c:	10800044 	addi	r2,r2,1
 2001d60:	e0bfc915 	stw	r2,-220(fp)
 2001d64:	e0bfc917 	ldw	r2,-220(fp)
 2001d68:	10800210 	cmplti	r2,r2,8
 2001d6c:	1000071e 	bne	r2,zero,2001d8c <___vfprintf_internal_r+0x1220>
 2001d70:	e0bfc804 	addi	r2,fp,-224
 2001d74:	100d883a 	mov	r6,r2
 2001d78:	e17fe717 	ldw	r5,-100(fp)
 2001d7c:	e13fe617 	ldw	r4,-104(fp)
 2001d80:	200ae440 	call	200ae44 <__sprint_r>
 2001d84:	1003531e 	bne	r2,zero,2002ad4 <___vfprintf_internal_r+0x1f68>
 2001d88:	e47fcb04 	addi	r17,fp,-212
 2001d8c:	843ffc04 	addi	r16,r16,-16
 2001d90:	80800448 	cmpgei	r2,r16,17
 2001d94:	103fe71e 	bne	r2,zero,2001d34 <___vfprintf_internal_r+0x11c8>
 2001d98:	00808074 	movhi	r2,513
 2001d9c:	108b9184 	addi	r2,r2,11846
 2001da0:	88800015 	stw	r2,0(r17)
 2001da4:	8005883a 	mov	r2,r16
 2001da8:	88800115 	stw	r2,4(r17)
 2001dac:	e0bfca17 	ldw	r2,-216(fp)
 2001db0:	8007883a 	mov	r3,r16
 2001db4:	10c5883a 	add	r2,r2,r3
 2001db8:	e0bfca15 	stw	r2,-216(fp)
 2001dbc:	8c400204 	addi	r17,r17,8
 2001dc0:	e0bfc917 	ldw	r2,-220(fp)
 2001dc4:	10800044 	addi	r2,r2,1
 2001dc8:	e0bfc915 	stw	r2,-220(fp)
 2001dcc:	e0bfc917 	ldw	r2,-220(fp)
 2001dd0:	10800210 	cmplti	r2,r2,8
 2001dd4:	1000071e 	bne	r2,zero,2001df4 <___vfprintf_internal_r+0x1288>
 2001dd8:	e0bfc804 	addi	r2,fp,-224
 2001ddc:	100d883a 	mov	r6,r2
 2001de0:	e17fe717 	ldw	r5,-100(fp)
 2001de4:	e13fe617 	ldw	r4,-104(fp)
 2001de8:	200ae440 	call	200ae44 <__sprint_r>
 2001dec:	10033b1e 	bne	r2,zero,2002adc <___vfprintf_internal_r+0x1f70>
 2001df0:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2001df4:	e0ffb417 	ldw	r3,-304(fp)
 2001df8:	e0bfb617 	ldw	r2,-296(fp)
 2001dfc:	18a1c83a 	sub	r16,r3,r2
 2001e00:	0400310e 	bge	zero,r16,2001ec8 <___vfprintf_internal_r+0x135c>
 2001e04:	00001706 	br	2001e64 <___vfprintf_internal_r+0x12f8>
 2001e08:	00808074 	movhi	r2,513
 2001e0c:	108b9184 	addi	r2,r2,11846
 2001e10:	88800015 	stw	r2,0(r17)
 2001e14:	00800404 	movi	r2,16
 2001e18:	88800115 	stw	r2,4(r17)
 2001e1c:	e0bfca17 	ldw	r2,-216(fp)
 2001e20:	10800404 	addi	r2,r2,16
 2001e24:	e0bfca15 	stw	r2,-216(fp)
 2001e28:	8c400204 	addi	r17,r17,8
 2001e2c:	e0bfc917 	ldw	r2,-220(fp)
 2001e30:	10800044 	addi	r2,r2,1
 2001e34:	e0bfc915 	stw	r2,-220(fp)
 2001e38:	e0bfc917 	ldw	r2,-220(fp)
 2001e3c:	10800210 	cmplti	r2,r2,8
 2001e40:	1000071e 	bne	r2,zero,2001e60 <___vfprintf_internal_r+0x12f4>
 2001e44:	e0bfc804 	addi	r2,fp,-224
 2001e48:	100d883a 	mov	r6,r2
 2001e4c:	e17fe717 	ldw	r5,-100(fp)
 2001e50:	e13fe617 	ldw	r4,-104(fp)
 2001e54:	200ae440 	call	200ae44 <__sprint_r>
 2001e58:	1003221e 	bne	r2,zero,2002ae4 <___vfprintf_internal_r+0x1f78>
 2001e5c:	e47fcb04 	addi	r17,fp,-212
 2001e60:	843ffc04 	addi	r16,r16,-16
 2001e64:	80800448 	cmpgei	r2,r16,17
 2001e68:	103fe71e 	bne	r2,zero,2001e08 <___vfprintf_internal_r+0x129c>
 2001e6c:	00808074 	movhi	r2,513
 2001e70:	108b9184 	addi	r2,r2,11846
 2001e74:	88800015 	stw	r2,0(r17)
 2001e78:	8005883a 	mov	r2,r16
 2001e7c:	88800115 	stw	r2,4(r17)
 2001e80:	e0bfca17 	ldw	r2,-216(fp)
 2001e84:	8007883a 	mov	r3,r16
 2001e88:	10c5883a 	add	r2,r2,r3
 2001e8c:	e0bfca15 	stw	r2,-216(fp)
 2001e90:	8c400204 	addi	r17,r17,8
 2001e94:	e0bfc917 	ldw	r2,-220(fp)
 2001e98:	10800044 	addi	r2,r2,1
 2001e9c:	e0bfc915 	stw	r2,-220(fp)
 2001ea0:	e0bfc917 	ldw	r2,-220(fp)
 2001ea4:	10800210 	cmplti	r2,r2,8
 2001ea8:	1000071e 	bne	r2,zero,2001ec8 <___vfprintf_internal_r+0x135c>
 2001eac:	e0bfc804 	addi	r2,fp,-224
 2001eb0:	100d883a 	mov	r6,r2
 2001eb4:	e17fe717 	ldw	r5,-100(fp)
 2001eb8:	e13fe617 	ldw	r4,-104(fp)
 2001ebc:	200ae440 	call	200ae44 <__sprint_r>
 2001ec0:	10030a1e 	bne	r2,zero,2002aec <___vfprintf_internal_r+0x1f80>
 2001ec4:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 2001ec8:	9880400c 	andi	r2,r19,256
 2001ecc:	1000161e 	bne	r2,zero,2001f28 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 2001ed0:	8c800015 	stw	r18,0(r17)
 2001ed4:	e0bfb617 	ldw	r2,-296(fp)
 2001ed8:	88800115 	stw	r2,4(r17)
 2001edc:	e0ffca17 	ldw	r3,-216(fp)
 2001ee0:	e0bfb617 	ldw	r2,-296(fp)
 2001ee4:	1885883a 	add	r2,r3,r2
 2001ee8:	e0bfca15 	stw	r2,-216(fp)
 2001eec:	8c400204 	addi	r17,r17,8
 2001ef0:	e0bfc917 	ldw	r2,-220(fp)
 2001ef4:	10800044 	addi	r2,r2,1
 2001ef8:	e0bfc915 	stw	r2,-220(fp)
 2001efc:	e0bfc917 	ldw	r2,-220(fp)
 2001f00:	10800210 	cmplti	r2,r2,8
 2001f04:	10028c1e 	bne	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
 2001f08:	e0bfc804 	addi	r2,fp,-224
 2001f0c:	100d883a 	mov	r6,r2
 2001f10:	e17fe717 	ldw	r5,-100(fp)
 2001f14:	e13fe617 	ldw	r4,-104(fp)
 2001f18:	200ae440 	call	200ae44 <__sprint_r>
 2001f1c:	1002f51e 	bne	r2,zero,2002af4 <___vfprintf_internal_r+0x1f88>
 2001f20:	e47fcb04 	addi	r17,fp,-212
 2001f24:	00028406 	br	2002938 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 2001f28:	a0801990 	cmplti	r2,r20,102
 2001f2c:	1001d11e 	bne	r2,zero,2002674 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 2001f30:	e0bfc217 	ldw	r2,-248(fp)
 2001f34:	e0ffc317 	ldw	r3,-244(fp)
 2001f38:	000d883a 	mov	r6,zero
 2001f3c:	000f883a 	mov	r7,zero
 2001f40:	1009883a 	mov	r4,r2
 2001f44:	180b883a 	mov	r5,r3
 2001f48:	200edd00 	call	200edd0 <__eqdf2>
 2001f4c:	1000661e 	bne	r2,zero,20020e8 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2001f50:	00808074 	movhi	r2,513
 2001f54:	108b8d04 	addi	r2,r2,11828
 2001f58:	88800015 	stw	r2,0(r17)
 2001f5c:	00800044 	movi	r2,1
 2001f60:	88800115 	stw	r2,4(r17)
 2001f64:	e0bfca17 	ldw	r2,-216(fp)
 2001f68:	10800044 	addi	r2,r2,1
 2001f6c:	e0bfca15 	stw	r2,-216(fp)
 2001f70:	8c400204 	addi	r17,r17,8
 2001f74:	e0bfc917 	ldw	r2,-220(fp)
 2001f78:	10800044 	addi	r2,r2,1
 2001f7c:	e0bfc915 	stw	r2,-220(fp)
 2001f80:	e0bfc917 	ldw	r2,-220(fp)
 2001f84:	10800210 	cmplti	r2,r2,8
 2001f88:	1000071e 	bne	r2,zero,2001fa8 <___vfprintf_internal_r+0x143c>
 2001f8c:	e0bfc804 	addi	r2,fp,-224
 2001f90:	100d883a 	mov	r6,r2
 2001f94:	e17fe717 	ldw	r5,-100(fp)
 2001f98:	e13fe617 	ldw	r4,-104(fp)
 2001f9c:	200ae440 	call	200ae44 <__sprint_r>
 2001fa0:	1002d61e 	bne	r2,zero,2002afc <___vfprintf_internal_r+0x1f90>
 2001fa4:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 2001fa8:	e0ffc417 	ldw	r3,-240(fp)
 2001fac:	e0bfc717 	ldw	r2,-228(fp)
 2001fb0:	18800216 	blt	r3,r2,2001fbc <___vfprintf_internal_r+0x1450>
 2001fb4:	9880004c 	andi	r2,r19,1
 2001fb8:	10025f26 	beq	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2001fbc:	e0bfbb17 	ldw	r2,-276(fp)
 2001fc0:	88800015 	stw	r2,0(r17)
 2001fc4:	e0bfbc17 	ldw	r2,-272(fp)
 2001fc8:	88800115 	stw	r2,4(r17)
 2001fcc:	e0ffca17 	ldw	r3,-216(fp)
 2001fd0:	e0bfbc17 	ldw	r2,-272(fp)
 2001fd4:	1885883a 	add	r2,r3,r2
 2001fd8:	e0bfca15 	stw	r2,-216(fp)
 2001fdc:	8c400204 	addi	r17,r17,8
 2001fe0:	e0bfc917 	ldw	r2,-220(fp)
 2001fe4:	10800044 	addi	r2,r2,1
 2001fe8:	e0bfc915 	stw	r2,-220(fp)
 2001fec:	e0bfc917 	ldw	r2,-220(fp)
 2001ff0:	10800210 	cmplti	r2,r2,8
 2001ff4:	1000071e 	bne	r2,zero,2002014 <___vfprintf_internal_r+0x14a8>
 2001ff8:	e0bfc804 	addi	r2,fp,-224
 2001ffc:	100d883a 	mov	r6,r2
 2002000:	e17fe717 	ldw	r5,-100(fp)
 2002004:	e13fe617 	ldw	r4,-104(fp)
 2002008:	200ae440 	call	200ae44 <__sprint_r>
 200200c:	1002bd1e 	bne	r2,zero,2002b04 <___vfprintf_internal_r+0x1f98>
 2002010:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 2002014:	e0bfc717 	ldw	r2,-228(fp)
 2002018:	143fffc4 	addi	r16,r2,-1
 200201c:	0402460e 	bge	zero,r16,2002938 <___vfprintf_internal_r+0x1dcc>
 2002020:	00001706 	br	2002080 <___vfprintf_internal_r+0x1514>
 2002024:	00808074 	movhi	r2,513
 2002028:	108b9184 	addi	r2,r2,11846
 200202c:	88800015 	stw	r2,0(r17)
 2002030:	00800404 	movi	r2,16
 2002034:	88800115 	stw	r2,4(r17)
 2002038:	e0bfca17 	ldw	r2,-216(fp)
 200203c:	10800404 	addi	r2,r2,16
 2002040:	e0bfca15 	stw	r2,-216(fp)
 2002044:	8c400204 	addi	r17,r17,8
 2002048:	e0bfc917 	ldw	r2,-220(fp)
 200204c:	10800044 	addi	r2,r2,1
 2002050:	e0bfc915 	stw	r2,-220(fp)
 2002054:	e0bfc917 	ldw	r2,-220(fp)
 2002058:	10800210 	cmplti	r2,r2,8
 200205c:	1000071e 	bne	r2,zero,200207c <___vfprintf_internal_r+0x1510>
 2002060:	e0bfc804 	addi	r2,fp,-224
 2002064:	100d883a 	mov	r6,r2
 2002068:	e17fe717 	ldw	r5,-100(fp)
 200206c:	e13fe617 	ldw	r4,-104(fp)
 2002070:	200ae440 	call	200ae44 <__sprint_r>
 2002074:	1002a51e 	bne	r2,zero,2002b0c <___vfprintf_internal_r+0x1fa0>
 2002078:	e47fcb04 	addi	r17,fp,-212
 200207c:	843ffc04 	addi	r16,r16,-16
 2002080:	80800448 	cmpgei	r2,r16,17
 2002084:	103fe71e 	bne	r2,zero,2002024 <___vfprintf_internal_r+0x14b8>
 2002088:	00808074 	movhi	r2,513
 200208c:	108b9184 	addi	r2,r2,11846
 2002090:	88800015 	stw	r2,0(r17)
 2002094:	8005883a 	mov	r2,r16
 2002098:	88800115 	stw	r2,4(r17)
 200209c:	e0bfca17 	ldw	r2,-216(fp)
 20020a0:	8007883a 	mov	r3,r16
 20020a4:	10c5883a 	add	r2,r2,r3
 20020a8:	e0bfca15 	stw	r2,-216(fp)
 20020ac:	8c400204 	addi	r17,r17,8
 20020b0:	e0bfc917 	ldw	r2,-220(fp)
 20020b4:	10800044 	addi	r2,r2,1
 20020b8:	e0bfc915 	stw	r2,-220(fp)
 20020bc:	e0bfc917 	ldw	r2,-220(fp)
 20020c0:	10800210 	cmplti	r2,r2,8
 20020c4:	10021c1e 	bne	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
 20020c8:	e0bfc804 	addi	r2,fp,-224
 20020cc:	100d883a 	mov	r6,r2
 20020d0:	e17fe717 	ldw	r5,-100(fp)
 20020d4:	e13fe617 	ldw	r4,-104(fp)
 20020d8:	200ae440 	call	200ae44 <__sprint_r>
 20020dc:	10028d1e 	bne	r2,zero,2002b14 <___vfprintf_internal_r+0x1fa8>
 20020e0:	e47fcb04 	addi	r17,fp,-212
 20020e4:	00021406 	br	2002938 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 20020e8:	e0bfc417 	ldw	r2,-240(fp)
 20020ec:	00807c16 	blt	zero,r2,20022e0 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 20020f0:	00808074 	movhi	r2,513
 20020f4:	108b8d04 	addi	r2,r2,11828
 20020f8:	88800015 	stw	r2,0(r17)
 20020fc:	00800044 	movi	r2,1
 2002100:	88800115 	stw	r2,4(r17)
 2002104:	e0bfca17 	ldw	r2,-216(fp)
 2002108:	10800044 	addi	r2,r2,1
 200210c:	e0bfca15 	stw	r2,-216(fp)
 2002110:	8c400204 	addi	r17,r17,8
 2002114:	e0bfc917 	ldw	r2,-220(fp)
 2002118:	10800044 	addi	r2,r2,1
 200211c:	e0bfc915 	stw	r2,-220(fp)
 2002120:	e0bfc917 	ldw	r2,-220(fp)
 2002124:	10800210 	cmplti	r2,r2,8
 2002128:	1000071e 	bne	r2,zero,2002148 <___vfprintf_internal_r+0x15dc>
 200212c:	e0bfc804 	addi	r2,fp,-224
 2002130:	100d883a 	mov	r6,r2
 2002134:	e17fe717 	ldw	r5,-100(fp)
 2002138:	e13fe617 	ldw	r4,-104(fp)
 200213c:	200ae440 	call	200ae44 <__sprint_r>
 2002140:	1002761e 	bne	r2,zero,2002b1c <___vfprintf_internal_r+0x1fb0>
 2002144:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 2002148:	e0bfc417 	ldw	r2,-240(fp)
 200214c:	1000041e 	bne	r2,zero,2002160 <___vfprintf_internal_r+0x15f4>
 2002150:	e0bfc717 	ldw	r2,-228(fp)
 2002154:	1000021e 	bne	r2,zero,2002160 <___vfprintf_internal_r+0x15f4>
 2002158:	9880004c 	andi	r2,r19,1
 200215c:	1001f626 	beq	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2002160:	e0bfbb17 	ldw	r2,-276(fp)
 2002164:	88800015 	stw	r2,0(r17)
 2002168:	e0bfbc17 	ldw	r2,-272(fp)
 200216c:	88800115 	stw	r2,4(r17)
 2002170:	e0ffca17 	ldw	r3,-216(fp)
 2002174:	e0bfbc17 	ldw	r2,-272(fp)
 2002178:	1885883a 	add	r2,r3,r2
 200217c:	e0bfca15 	stw	r2,-216(fp)
 2002180:	8c400204 	addi	r17,r17,8
 2002184:	e0bfc917 	ldw	r2,-220(fp)
 2002188:	10800044 	addi	r2,r2,1
 200218c:	e0bfc915 	stw	r2,-220(fp)
 2002190:	e0bfc917 	ldw	r2,-220(fp)
 2002194:	10800210 	cmplti	r2,r2,8
 2002198:	1000071e 	bne	r2,zero,20021b8 <___vfprintf_internal_r+0x164c>
 200219c:	e0bfc804 	addi	r2,fp,-224
 20021a0:	100d883a 	mov	r6,r2
 20021a4:	e17fe717 	ldw	r5,-100(fp)
 20021a8:	e13fe617 	ldw	r4,-104(fp)
 20021ac:	200ae440 	call	200ae44 <__sprint_r>
 20021b0:	10025c1e 	bne	r2,zero,2002b24 <___vfprintf_internal_r+0x1fb8>
 20021b4:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 20021b8:	e0bfc417 	ldw	r2,-240(fp)
 20021bc:	00a1c83a 	sub	r16,zero,r2
 20021c0:	0400310e 	bge	zero,r16,2002288 <___vfprintf_internal_r+0x171c>
 20021c4:	00001706 	br	2002224 <___vfprintf_internal_r+0x16b8>
 20021c8:	00808074 	movhi	r2,513
 20021cc:	108b9184 	addi	r2,r2,11846
 20021d0:	88800015 	stw	r2,0(r17)
 20021d4:	00800404 	movi	r2,16
 20021d8:	88800115 	stw	r2,4(r17)
 20021dc:	e0bfca17 	ldw	r2,-216(fp)
 20021e0:	10800404 	addi	r2,r2,16
 20021e4:	e0bfca15 	stw	r2,-216(fp)
 20021e8:	8c400204 	addi	r17,r17,8
 20021ec:	e0bfc917 	ldw	r2,-220(fp)
 20021f0:	10800044 	addi	r2,r2,1
 20021f4:	e0bfc915 	stw	r2,-220(fp)
 20021f8:	e0bfc917 	ldw	r2,-220(fp)
 20021fc:	10800210 	cmplti	r2,r2,8
 2002200:	1000071e 	bne	r2,zero,2002220 <___vfprintf_internal_r+0x16b4>
 2002204:	e0bfc804 	addi	r2,fp,-224
 2002208:	100d883a 	mov	r6,r2
 200220c:	e17fe717 	ldw	r5,-100(fp)
 2002210:	e13fe617 	ldw	r4,-104(fp)
 2002214:	200ae440 	call	200ae44 <__sprint_r>
 2002218:	1002441e 	bne	r2,zero,2002b2c <___vfprintf_internal_r+0x1fc0>
 200221c:	e47fcb04 	addi	r17,fp,-212
 2002220:	843ffc04 	addi	r16,r16,-16
 2002224:	80800448 	cmpgei	r2,r16,17
 2002228:	103fe71e 	bne	r2,zero,20021c8 <___vfprintf_internal_r+0x165c>
 200222c:	00808074 	movhi	r2,513
 2002230:	108b9184 	addi	r2,r2,11846
 2002234:	88800015 	stw	r2,0(r17)
 2002238:	8005883a 	mov	r2,r16
 200223c:	88800115 	stw	r2,4(r17)
 2002240:	e0bfca17 	ldw	r2,-216(fp)
 2002244:	8007883a 	mov	r3,r16
 2002248:	10c5883a 	add	r2,r2,r3
 200224c:	e0bfca15 	stw	r2,-216(fp)
 2002250:	8c400204 	addi	r17,r17,8
 2002254:	e0bfc917 	ldw	r2,-220(fp)
 2002258:	10800044 	addi	r2,r2,1
 200225c:	e0bfc915 	stw	r2,-220(fp)
 2002260:	e0bfc917 	ldw	r2,-220(fp)
 2002264:	10800210 	cmplti	r2,r2,8
 2002268:	1000071e 	bne	r2,zero,2002288 <___vfprintf_internal_r+0x171c>
 200226c:	e0bfc804 	addi	r2,fp,-224
 2002270:	100d883a 	mov	r6,r2
 2002274:	e17fe717 	ldw	r5,-100(fp)
 2002278:	e13fe617 	ldw	r4,-104(fp)
 200227c:	200ae440 	call	200ae44 <__sprint_r>
 2002280:	10022c1e 	bne	r2,zero,2002b34 <___vfprintf_internal_r+0x1fc8>
 2002284:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 2002288:	8c800015 	stw	r18,0(r17)
 200228c:	e0bfc717 	ldw	r2,-228(fp)
 2002290:	88800115 	stw	r2,4(r17)
 2002294:	e0bfca17 	ldw	r2,-216(fp)
 2002298:	e0ffc717 	ldw	r3,-228(fp)
 200229c:	10c5883a 	add	r2,r2,r3
 20022a0:	e0bfca15 	stw	r2,-216(fp)
 20022a4:	8c400204 	addi	r17,r17,8
 20022a8:	e0bfc917 	ldw	r2,-220(fp)
 20022ac:	10800044 	addi	r2,r2,1
 20022b0:	e0bfc915 	stw	r2,-220(fp)
 20022b4:	e0bfc917 	ldw	r2,-220(fp)
 20022b8:	10800210 	cmplti	r2,r2,8
 20022bc:	10019e1e 	bne	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
 20022c0:	e0bfc804 	addi	r2,fp,-224
 20022c4:	100d883a 	mov	r6,r2
 20022c8:	e17fe717 	ldw	r5,-100(fp)
 20022cc:	e13fe617 	ldw	r4,-104(fp)
 20022d0:	200ae440 	call	200ae44 <__sprint_r>
 20022d4:	1002191e 	bne	r2,zero,2002b3c <___vfprintf_internal_r+0x1fd0>
 20022d8:	e47fcb04 	addi	r17,fp,-212
 20022dc:	00019606 	br	2002938 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 20022e0:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 20022e4:	e0bfc717 	ldw	r2,-228(fp)
 20022e8:	1007883a 	mov	r3,r2
 20022ec:	e0bfc017 	ldw	r2,-256(fp)
 20022f0:	10c5883a 	add	r2,r2,r3
 20022f4:	1007883a 	mov	r3,r2
 20022f8:	9005883a 	mov	r2,r18
 20022fc:	1885c83a 	sub	r2,r3,r2
 2002300:	e0bfb915 	stw	r2,-284(fp)
 2002304:	e0bfb917 	ldw	r2,-284(fp)
 2002308:	e0ffb017 	ldw	r3,-320(fp)
 200230c:	1880020e 	bge	r3,r2,2002318 <___vfprintf_internal_r+0x17ac>
 2002310:	e0bfb017 	ldw	r2,-320(fp)
 2002314:	e0bfb915 	stw	r2,-284(fp)
 2002318:	e0bfb917 	ldw	r2,-284(fp)
 200231c:	0080150e 	bge	zero,r2,2002374 <___vfprintf_internal_r+0x1808>
 2002320:	8c800015 	stw	r18,0(r17)
 2002324:	e0bfb917 	ldw	r2,-284(fp)
 2002328:	88800115 	stw	r2,4(r17)
 200232c:	e0ffca17 	ldw	r3,-216(fp)
 2002330:	e0bfb917 	ldw	r2,-284(fp)
 2002334:	1885883a 	add	r2,r3,r2
 2002338:	e0bfca15 	stw	r2,-216(fp)
 200233c:	8c400204 	addi	r17,r17,8
 2002340:	e0bfc917 	ldw	r2,-220(fp)
 2002344:	10800044 	addi	r2,r2,1
 2002348:	e0bfc915 	stw	r2,-220(fp)
 200234c:	e0bfc917 	ldw	r2,-220(fp)
 2002350:	10800210 	cmplti	r2,r2,8
 2002354:	1000071e 	bne	r2,zero,2002374 <___vfprintf_internal_r+0x1808>
 2002358:	e0bfc804 	addi	r2,fp,-224
 200235c:	100d883a 	mov	r6,r2
 2002360:	e17fe717 	ldw	r5,-100(fp)
 2002364:	e13fe617 	ldw	r4,-104(fp)
 2002368:	200ae440 	call	200ae44 <__sprint_r>
 200236c:	1001f51e 	bne	r2,zero,2002b44 <___vfprintf_internal_r+0x1fd8>
 2002370:	e47fcb04 	addi	r17,fp,-212
 2002374:	e0bfb917 	ldw	r2,-284(fp)
 2002378:	1000010e 	bge	r2,zero,2002380 <___vfprintf_internal_r+0x1814>
 200237c:	0005883a 	mov	r2,zero
 2002380:	e0ffb017 	ldw	r3,-320(fp)
 2002384:	1885c83a 	sub	r2,r3,r2
 2002388:	e0bfb915 	stw	r2,-284(fp)
 200238c:	e0bfb917 	ldw	r2,-284(fp)
 2002390:	0080340e 	bge	zero,r2,2002464 <___vfprintf_internal_r+0x18f8>
 2002394:	00001906 	br	20023fc <___vfprintf_internal_r+0x1890>
 2002398:	00808074 	movhi	r2,513
 200239c:	108b9184 	addi	r2,r2,11846
 20023a0:	88800015 	stw	r2,0(r17)
 20023a4:	00800404 	movi	r2,16
 20023a8:	88800115 	stw	r2,4(r17)
 20023ac:	e0bfca17 	ldw	r2,-216(fp)
 20023b0:	10800404 	addi	r2,r2,16
 20023b4:	e0bfca15 	stw	r2,-216(fp)
 20023b8:	8c400204 	addi	r17,r17,8
 20023bc:	e0bfc917 	ldw	r2,-220(fp)
 20023c0:	10800044 	addi	r2,r2,1
 20023c4:	e0bfc915 	stw	r2,-220(fp)
 20023c8:	e0bfc917 	ldw	r2,-220(fp)
 20023cc:	10800210 	cmplti	r2,r2,8
 20023d0:	1000071e 	bne	r2,zero,20023f0 <___vfprintf_internal_r+0x1884>
 20023d4:	e0bfc804 	addi	r2,fp,-224
 20023d8:	100d883a 	mov	r6,r2
 20023dc:	e17fe717 	ldw	r5,-100(fp)
 20023e0:	e13fe617 	ldw	r4,-104(fp)
 20023e4:	200ae440 	call	200ae44 <__sprint_r>
 20023e8:	1001d81e 	bne	r2,zero,2002b4c <___vfprintf_internal_r+0x1fe0>
 20023ec:	e47fcb04 	addi	r17,fp,-212
 20023f0:	e0bfb917 	ldw	r2,-284(fp)
 20023f4:	10bffc04 	addi	r2,r2,-16
 20023f8:	e0bfb915 	stw	r2,-284(fp)
 20023fc:	e0bfb917 	ldw	r2,-284(fp)
 2002400:	10800448 	cmpgei	r2,r2,17
 2002404:	103fe41e 	bne	r2,zero,2002398 <___vfprintf_internal_r+0x182c>
 2002408:	00808074 	movhi	r2,513
 200240c:	108b9184 	addi	r2,r2,11846
 2002410:	88800015 	stw	r2,0(r17)
 2002414:	e0bfb917 	ldw	r2,-284(fp)
 2002418:	88800115 	stw	r2,4(r17)
 200241c:	e0ffca17 	ldw	r3,-216(fp)
 2002420:	e0bfb917 	ldw	r2,-284(fp)
 2002424:	1885883a 	add	r2,r3,r2
 2002428:	e0bfca15 	stw	r2,-216(fp)
 200242c:	8c400204 	addi	r17,r17,8
 2002430:	e0bfc917 	ldw	r2,-220(fp)
 2002434:	10800044 	addi	r2,r2,1
 2002438:	e0bfc915 	stw	r2,-220(fp)
 200243c:	e0bfc917 	ldw	r2,-220(fp)
 2002440:	10800210 	cmplti	r2,r2,8
 2002444:	1000071e 	bne	r2,zero,2002464 <___vfprintf_internal_r+0x18f8>
 2002448:	e0bfc804 	addi	r2,fp,-224
 200244c:	100d883a 	mov	r6,r2
 2002450:	e17fe717 	ldw	r5,-100(fp)
 2002454:	e13fe617 	ldw	r4,-104(fp)
 2002458:	200ae440 	call	200ae44 <__sprint_r>
 200245c:	1001bd1e 	bne	r2,zero,2002b54 <___vfprintf_internal_r+0x1fe8>
 2002460:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 2002464:	e0bfb017 	ldw	r2,-320(fp)
 2002468:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 200246c:	e0ffc417 	ldw	r3,-240(fp)
 2002470:	e0bfc717 	ldw	r2,-228(fp)
 2002474:	18800216 	blt	r3,r2,2002480 <___vfprintf_internal_r+0x1914>
 2002478:	9880004c 	andi	r2,r19,1
 200247c:	10001626 	beq	r2,zero,20024d8 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 2002480:	e0bfbb17 	ldw	r2,-276(fp)
 2002484:	88800015 	stw	r2,0(r17)
 2002488:	e0bfbc17 	ldw	r2,-272(fp)
 200248c:	88800115 	stw	r2,4(r17)
 2002490:	e0ffca17 	ldw	r3,-216(fp)
 2002494:	e0bfbc17 	ldw	r2,-272(fp)
 2002498:	1885883a 	add	r2,r3,r2
 200249c:	e0bfca15 	stw	r2,-216(fp)
 20024a0:	8c400204 	addi	r17,r17,8
 20024a4:	e0bfc917 	ldw	r2,-220(fp)
 20024a8:	10800044 	addi	r2,r2,1
 20024ac:	e0bfc915 	stw	r2,-220(fp)
 20024b0:	e0bfc917 	ldw	r2,-220(fp)
 20024b4:	10800210 	cmplti	r2,r2,8
 20024b8:	1000071e 	bne	r2,zero,20024d8 <___vfprintf_internal_r+0x196c>
 20024bc:	e0bfc804 	addi	r2,fp,-224
 20024c0:	100d883a 	mov	r6,r2
 20024c4:	e17fe717 	ldw	r5,-100(fp)
 20024c8:	e13fe617 	ldw	r4,-104(fp)
 20024cc:	200ae440 	call	200ae44 <__sprint_r>
 20024d0:	1001a21e 	bne	r2,zero,2002b5c <___vfprintf_internal_r+0x1ff0>
 20024d4:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 20024d8:	e0bfc717 	ldw	r2,-228(fp)
 20024dc:	1007883a 	mov	r3,r2
 20024e0:	e0bfc017 	ldw	r2,-256(fp)
 20024e4:	10c5883a 	add	r2,r2,r3
 20024e8:	1007883a 	mov	r3,r2
 20024ec:	9005883a 	mov	r2,r18
 20024f0:	1885c83a 	sub	r2,r3,r2
 20024f4:	e0bfba15 	stw	r2,-280(fp)
 20024f8:	e0ffc717 	ldw	r3,-228(fp)
 20024fc:	e0bfc417 	ldw	r2,-240(fp)
 2002500:	1887c83a 	sub	r3,r3,r2
 2002504:	e0bfba17 	ldw	r2,-280(fp)
 2002508:	1880040e 	bge	r3,r2,200251c <___vfprintf_internal_r+0x19b0>
 200250c:	e0ffc717 	ldw	r3,-228(fp)
 2002510:	e0bfc417 	ldw	r2,-240(fp)
 2002514:	1885c83a 	sub	r2,r3,r2
 2002518:	e0bfba15 	stw	r2,-280(fp)
 200251c:	e0bfba17 	ldw	r2,-280(fp)
 2002520:	0080150e 	bge	zero,r2,2002578 <___vfprintf_internal_r+0x1a0c>
 2002524:	8c800015 	stw	r18,0(r17)
 2002528:	e0bfba17 	ldw	r2,-280(fp)
 200252c:	88800115 	stw	r2,4(r17)
 2002530:	e0ffca17 	ldw	r3,-216(fp)
 2002534:	e0bfba17 	ldw	r2,-280(fp)
 2002538:	1885883a 	add	r2,r3,r2
 200253c:	e0bfca15 	stw	r2,-216(fp)
 2002540:	8c400204 	addi	r17,r17,8
 2002544:	e0bfc917 	ldw	r2,-220(fp)
 2002548:	10800044 	addi	r2,r2,1
 200254c:	e0bfc915 	stw	r2,-220(fp)
 2002550:	e0bfc917 	ldw	r2,-220(fp)
 2002554:	10800210 	cmplti	r2,r2,8
 2002558:	1000071e 	bne	r2,zero,2002578 <___vfprintf_internal_r+0x1a0c>
 200255c:	e0bfc804 	addi	r2,fp,-224
 2002560:	100d883a 	mov	r6,r2
 2002564:	e17fe717 	ldw	r5,-100(fp)
 2002568:	e13fe617 	ldw	r4,-104(fp)
 200256c:	200ae440 	call	200ae44 <__sprint_r>
 2002570:	10017c1e 	bne	r2,zero,2002b64 <___vfprintf_internal_r+0x1ff8>
 2002574:	e47fcb04 	addi	r17,fp,-212
 2002578:	e0ffc717 	ldw	r3,-228(fp)
 200257c:	e0bfc417 	ldw	r2,-240(fp)
 2002580:	1887c83a 	sub	r3,r3,r2
 2002584:	e0bfba17 	ldw	r2,-280(fp)
 2002588:	1000010e 	bge	r2,zero,2002590 <___vfprintf_internal_r+0x1a24>
 200258c:	0005883a 	mov	r2,zero
 2002590:	1885c83a 	sub	r2,r3,r2
 2002594:	e0bfba15 	stw	r2,-280(fp)
 2002598:	e0bfba17 	ldw	r2,-280(fp)
 200259c:	0080e60e 	bge	zero,r2,2002938 <___vfprintf_internal_r+0x1dcc>
 20025a0:	00001906 	br	2002608 <___vfprintf_internal_r+0x1a9c>
 20025a4:	00808074 	movhi	r2,513
 20025a8:	108b9184 	addi	r2,r2,11846
 20025ac:	88800015 	stw	r2,0(r17)
 20025b0:	00800404 	movi	r2,16
 20025b4:	88800115 	stw	r2,4(r17)
 20025b8:	e0bfca17 	ldw	r2,-216(fp)
 20025bc:	10800404 	addi	r2,r2,16
 20025c0:	e0bfca15 	stw	r2,-216(fp)
 20025c4:	8c400204 	addi	r17,r17,8
 20025c8:	e0bfc917 	ldw	r2,-220(fp)
 20025cc:	10800044 	addi	r2,r2,1
 20025d0:	e0bfc915 	stw	r2,-220(fp)
 20025d4:	e0bfc917 	ldw	r2,-220(fp)
 20025d8:	10800210 	cmplti	r2,r2,8
 20025dc:	1000071e 	bne	r2,zero,20025fc <___vfprintf_internal_r+0x1a90>
 20025e0:	e0bfc804 	addi	r2,fp,-224
 20025e4:	100d883a 	mov	r6,r2
 20025e8:	e17fe717 	ldw	r5,-100(fp)
 20025ec:	e13fe617 	ldw	r4,-104(fp)
 20025f0:	200ae440 	call	200ae44 <__sprint_r>
 20025f4:	10015d1e 	bne	r2,zero,2002b6c <___vfprintf_internal_r+0x2000>
 20025f8:	e47fcb04 	addi	r17,fp,-212
 20025fc:	e0bfba17 	ldw	r2,-280(fp)
 2002600:	10bffc04 	addi	r2,r2,-16
 2002604:	e0bfba15 	stw	r2,-280(fp)
 2002608:	e0bfba17 	ldw	r2,-280(fp)
 200260c:	10800448 	cmpgei	r2,r2,17
 2002610:	103fe41e 	bne	r2,zero,20025a4 <___vfprintf_internal_r+0x1a38>
 2002614:	00808074 	movhi	r2,513
 2002618:	108b9184 	addi	r2,r2,11846
 200261c:	88800015 	stw	r2,0(r17)
 2002620:	e0bfba17 	ldw	r2,-280(fp)
 2002624:	88800115 	stw	r2,4(r17)
 2002628:	e0ffca17 	ldw	r3,-216(fp)
 200262c:	e0bfba17 	ldw	r2,-280(fp)
 2002630:	1885883a 	add	r2,r3,r2
 2002634:	e0bfca15 	stw	r2,-216(fp)
 2002638:	8c400204 	addi	r17,r17,8
 200263c:	e0bfc917 	ldw	r2,-220(fp)
 2002640:	10800044 	addi	r2,r2,1
 2002644:	e0bfc915 	stw	r2,-220(fp)
 2002648:	e0bfc917 	ldw	r2,-220(fp)
 200264c:	10800210 	cmplti	r2,r2,8
 2002650:	1000b91e 	bne	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
 2002654:	e0bfc804 	addi	r2,fp,-224
 2002658:	100d883a 	mov	r6,r2
 200265c:	e17fe717 	ldw	r5,-100(fp)
 2002660:	e13fe617 	ldw	r4,-104(fp)
 2002664:	200ae440 	call	200ae44 <__sprint_r>
 2002668:	1001421e 	bne	r2,zero,2002b74 <___vfprintf_internal_r+0x2008>
 200266c:	e47fcb04 	addi	r17,fp,-212
 2002670:	0000b106 	br	2002938 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 2002674:	e0bfc717 	ldw	r2,-228(fp)
 2002678:	10800088 	cmpgei	r2,r2,2
 200267c:	1000021e 	bne	r2,zero,2002688 <___vfprintf_internal_r+0x1b1c>
 2002680:	9880004c 	andi	r2,r19,1
 2002684:	10008026 	beq	r2,zero,2002888 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2002688:	8c800015 	stw	r18,0(r17)
 200268c:	00800044 	movi	r2,1
 2002690:	88800115 	stw	r2,4(r17)
 2002694:	e0bfca17 	ldw	r2,-216(fp)
 2002698:	10800044 	addi	r2,r2,1
 200269c:	e0bfca15 	stw	r2,-216(fp)
 20026a0:	8c400204 	addi	r17,r17,8
 20026a4:	e0bfc917 	ldw	r2,-220(fp)
 20026a8:	10800044 	addi	r2,r2,1
 20026ac:	e0bfc915 	stw	r2,-220(fp)
 20026b0:	e0bfc917 	ldw	r2,-220(fp)
 20026b4:	10800210 	cmplti	r2,r2,8
 20026b8:	1000071e 	bne	r2,zero,20026d8 <___vfprintf_internal_r+0x1b6c>
 20026bc:	e0bfc804 	addi	r2,fp,-224
 20026c0:	100d883a 	mov	r6,r2
 20026c4:	e17fe717 	ldw	r5,-100(fp)
 20026c8:	e13fe617 	ldw	r4,-104(fp)
 20026cc:	200ae440 	call	200ae44 <__sprint_r>
 20026d0:	10012a1e 	bne	r2,zero,2002b7c <___vfprintf_internal_r+0x2010>
 20026d4:	e47fcb04 	addi	r17,fp,-212
					cp++;
 20026d8:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 20026dc:	e0bfbb17 	ldw	r2,-276(fp)
 20026e0:	88800015 	stw	r2,0(r17)
 20026e4:	e0bfbc17 	ldw	r2,-272(fp)
 20026e8:	88800115 	stw	r2,4(r17)
 20026ec:	e0ffca17 	ldw	r3,-216(fp)
 20026f0:	e0bfbc17 	ldw	r2,-272(fp)
 20026f4:	1885883a 	add	r2,r3,r2
 20026f8:	e0bfca15 	stw	r2,-216(fp)
 20026fc:	8c400204 	addi	r17,r17,8
 2002700:	e0bfc917 	ldw	r2,-220(fp)
 2002704:	10800044 	addi	r2,r2,1
 2002708:	e0bfc915 	stw	r2,-220(fp)
 200270c:	e0bfc917 	ldw	r2,-220(fp)
 2002710:	10800210 	cmplti	r2,r2,8
 2002714:	1000071e 	bne	r2,zero,2002734 <___vfprintf_internal_r+0x1bc8>
 2002718:	e0bfc804 	addi	r2,fp,-224
 200271c:	100d883a 	mov	r6,r2
 2002720:	e17fe717 	ldw	r5,-100(fp)
 2002724:	e13fe617 	ldw	r4,-104(fp)
 2002728:	200ae440 	call	200ae44 <__sprint_r>
 200272c:	1001151e 	bne	r2,zero,2002b84 <___vfprintf_internal_r+0x2018>
 2002730:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2002734:	e0bfc217 	ldw	r2,-248(fp)
 2002738:	e0ffc317 	ldw	r3,-244(fp)
 200273c:	000d883a 	mov	r6,zero
 2002740:	000f883a 	mov	r7,zero
 2002744:	1009883a 	mov	r4,r2
 2002748:	180b883a 	mov	r5,r3
 200274c:	200edd00 	call	200edd0 <__eqdf2>
 2002750:	10001826 	beq	r2,zero,20027b4 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2002754:	8c800015 	stw	r18,0(r17)
 2002758:	e0bfc717 	ldw	r2,-228(fp)
 200275c:	10bfffc4 	addi	r2,r2,-1
 2002760:	88800115 	stw	r2,4(r17)
 2002764:	e0bfca17 	ldw	r2,-216(fp)
 2002768:	e0ffc717 	ldw	r3,-228(fp)
 200276c:	10c5883a 	add	r2,r2,r3
 2002770:	10bfffc4 	addi	r2,r2,-1
 2002774:	e0bfca15 	stw	r2,-216(fp)
 2002778:	8c400204 	addi	r17,r17,8
 200277c:	e0bfc917 	ldw	r2,-220(fp)
 2002780:	10800044 	addi	r2,r2,1
 2002784:	e0bfc915 	stw	r2,-220(fp)
 2002788:	e0bfc917 	ldw	r2,-220(fp)
 200278c:	10800210 	cmplti	r2,r2,8
 2002790:	1000521e 	bne	r2,zero,20028dc <___vfprintf_internal_r+0x1d70>
 2002794:	e0bfc804 	addi	r2,fp,-224
 2002798:	100d883a 	mov	r6,r2
 200279c:	e17fe717 	ldw	r5,-100(fp)
 20027a0:	e13fe617 	ldw	r4,-104(fp)
 20027a4:	200ae440 	call	200ae44 <__sprint_r>
 20027a8:	1000f81e 	bne	r2,zero,2002b8c <___vfprintf_internal_r+0x2020>
 20027ac:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 20027b0:	00004a06 	br	20028dc <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 20027b4:	e0bfc717 	ldw	r2,-228(fp)
 20027b8:	143fffc4 	addi	r16,r2,-1
 20027bc:	0400470e 	bge	zero,r16,20028dc <___vfprintf_internal_r+0x1d70>
 20027c0:	00001706 	br	2002820 <___vfprintf_internal_r+0x1cb4>
 20027c4:	00808074 	movhi	r2,513
 20027c8:	108b9184 	addi	r2,r2,11846
 20027cc:	88800015 	stw	r2,0(r17)
 20027d0:	00800404 	movi	r2,16
 20027d4:	88800115 	stw	r2,4(r17)
 20027d8:	e0bfca17 	ldw	r2,-216(fp)
 20027dc:	10800404 	addi	r2,r2,16
 20027e0:	e0bfca15 	stw	r2,-216(fp)
 20027e4:	8c400204 	addi	r17,r17,8
 20027e8:	e0bfc917 	ldw	r2,-220(fp)
 20027ec:	10800044 	addi	r2,r2,1
 20027f0:	e0bfc915 	stw	r2,-220(fp)
 20027f4:	e0bfc917 	ldw	r2,-220(fp)
 20027f8:	10800210 	cmplti	r2,r2,8
 20027fc:	1000071e 	bne	r2,zero,200281c <___vfprintf_internal_r+0x1cb0>
 2002800:	e0bfc804 	addi	r2,fp,-224
 2002804:	100d883a 	mov	r6,r2
 2002808:	e17fe717 	ldw	r5,-100(fp)
 200280c:	e13fe617 	ldw	r4,-104(fp)
 2002810:	200ae440 	call	200ae44 <__sprint_r>
 2002814:	1000df1e 	bne	r2,zero,2002b94 <___vfprintf_internal_r+0x2028>
 2002818:	e47fcb04 	addi	r17,fp,-212
 200281c:	843ffc04 	addi	r16,r16,-16
 2002820:	80800448 	cmpgei	r2,r16,17
 2002824:	103fe71e 	bne	r2,zero,20027c4 <___vfprintf_internal_r+0x1c58>
 2002828:	00808074 	movhi	r2,513
 200282c:	108b9184 	addi	r2,r2,11846
 2002830:	88800015 	stw	r2,0(r17)
 2002834:	8005883a 	mov	r2,r16
 2002838:	88800115 	stw	r2,4(r17)
 200283c:	e0bfca17 	ldw	r2,-216(fp)
 2002840:	8007883a 	mov	r3,r16
 2002844:	10c5883a 	add	r2,r2,r3
 2002848:	e0bfca15 	stw	r2,-216(fp)
 200284c:	8c400204 	addi	r17,r17,8
 2002850:	e0bfc917 	ldw	r2,-220(fp)
 2002854:	10800044 	addi	r2,r2,1
 2002858:	e0bfc915 	stw	r2,-220(fp)
 200285c:	e0bfc917 	ldw	r2,-220(fp)
 2002860:	10800210 	cmplti	r2,r2,8
 2002864:	10001d1e 	bne	r2,zero,20028dc <___vfprintf_internal_r+0x1d70>
 2002868:	e0bfc804 	addi	r2,fp,-224
 200286c:	100d883a 	mov	r6,r2
 2002870:	e17fe717 	ldw	r5,-100(fp)
 2002874:	e13fe617 	ldw	r4,-104(fp)
 2002878:	200ae440 	call	200ae44 <__sprint_r>
 200287c:	1000c71e 	bne	r2,zero,2002b9c <___vfprintf_internal_r+0x2030>
 2002880:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2002884:	00001506 	br	20028dc <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 2002888:	8c800015 	stw	r18,0(r17)
 200288c:	00800044 	movi	r2,1
 2002890:	88800115 	stw	r2,4(r17)
 2002894:	e0bfca17 	ldw	r2,-216(fp)
 2002898:	10800044 	addi	r2,r2,1
 200289c:	e0bfca15 	stw	r2,-216(fp)
 20028a0:	8c400204 	addi	r17,r17,8
 20028a4:	e0bfc917 	ldw	r2,-220(fp)
 20028a8:	10800044 	addi	r2,r2,1
 20028ac:	e0bfc915 	stw	r2,-220(fp)
 20028b0:	e0bfc917 	ldw	r2,-220(fp)
 20028b4:	10800210 	cmplti	r2,r2,8
 20028b8:	1000091e 	bne	r2,zero,20028e0 <___vfprintf_internal_r+0x1d74>
 20028bc:	e0bfc804 	addi	r2,fp,-224
 20028c0:	100d883a 	mov	r6,r2
 20028c4:	e17fe717 	ldw	r5,-100(fp)
 20028c8:	e13fe617 	ldw	r4,-104(fp)
 20028cc:	200ae440 	call	200ae44 <__sprint_r>
 20028d0:	1000b41e 	bne	r2,zero,2002ba4 <___vfprintf_internal_r+0x2038>
 20028d4:	e47fcb04 	addi	r17,fp,-212
 20028d8:	00000106 	br	20028e0 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 20028dc:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 20028e0:	e0bfc504 	addi	r2,fp,-236
 20028e4:	88800015 	stw	r2,0(r17)
 20028e8:	e0bfaf17 	ldw	r2,-324(fp)
 20028ec:	88800115 	stw	r2,4(r17)
 20028f0:	e0ffca17 	ldw	r3,-216(fp)
 20028f4:	e0bfaf17 	ldw	r2,-324(fp)
 20028f8:	1885883a 	add	r2,r3,r2
 20028fc:	e0bfca15 	stw	r2,-216(fp)
 2002900:	8c400204 	addi	r17,r17,8
 2002904:	e0bfc917 	ldw	r2,-220(fp)
 2002908:	10800044 	addi	r2,r2,1
 200290c:	e0bfc915 	stw	r2,-220(fp)
 2002910:	e0bfc917 	ldw	r2,-220(fp)
 2002914:	10800210 	cmplti	r2,r2,8
 2002918:	1000071e 	bne	r2,zero,2002938 <___vfprintf_internal_r+0x1dcc>
 200291c:	e0bfc804 	addi	r2,fp,-224
 2002920:	100d883a 	mov	r6,r2
 2002924:	e17fe717 	ldw	r5,-100(fp)
 2002928:	e13fe617 	ldw	r4,-104(fp)
 200292c:	200ae440 	call	200ae44 <__sprint_r>
 2002930:	10009e1e 	bne	r2,zero,2002bac <___vfprintf_internal_r+0x2040>
 2002934:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2002938:	9880010c 	andi	r2,r19,4
 200293c:	10003526 	beq	r2,zero,2002a14 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 2002940:	e0ffad17 	ldw	r3,-332(fp)
 2002944:	e0bfb517 	ldw	r2,-300(fp)
 2002948:	18a1c83a 	sub	r16,r3,r2
 200294c:	0400310e 	bge	zero,r16,2002a14 <___vfprintf_internal_r+0x1ea8>
 2002950:	00001706 	br	20029b0 <___vfprintf_internal_r+0x1e44>
 2002954:	00808074 	movhi	r2,513
 2002958:	108b8d84 	addi	r2,r2,11830
 200295c:	88800015 	stw	r2,0(r17)
 2002960:	00800404 	movi	r2,16
 2002964:	88800115 	stw	r2,4(r17)
 2002968:	e0bfca17 	ldw	r2,-216(fp)
 200296c:	10800404 	addi	r2,r2,16
 2002970:	e0bfca15 	stw	r2,-216(fp)
 2002974:	8c400204 	addi	r17,r17,8
 2002978:	e0bfc917 	ldw	r2,-220(fp)
 200297c:	10800044 	addi	r2,r2,1
 2002980:	e0bfc915 	stw	r2,-220(fp)
 2002984:	e0bfc917 	ldw	r2,-220(fp)
 2002988:	10800210 	cmplti	r2,r2,8
 200298c:	1000071e 	bne	r2,zero,20029ac <___vfprintf_internal_r+0x1e40>
 2002990:	e0bfc804 	addi	r2,fp,-224
 2002994:	100d883a 	mov	r6,r2
 2002998:	e17fe717 	ldw	r5,-100(fp)
 200299c:	e13fe617 	ldw	r4,-104(fp)
 20029a0:	200ae440 	call	200ae44 <__sprint_r>
 20029a4:	1000831e 	bne	r2,zero,2002bb4 <___vfprintf_internal_r+0x2048>
 20029a8:	e47fcb04 	addi	r17,fp,-212
 20029ac:	843ffc04 	addi	r16,r16,-16
 20029b0:	80800448 	cmpgei	r2,r16,17
 20029b4:	103fe71e 	bne	r2,zero,2002954 <___vfprintf_internal_r+0x1de8>
 20029b8:	00808074 	movhi	r2,513
 20029bc:	108b8d84 	addi	r2,r2,11830
 20029c0:	88800015 	stw	r2,0(r17)
 20029c4:	8005883a 	mov	r2,r16
 20029c8:	88800115 	stw	r2,4(r17)
 20029cc:	e0bfca17 	ldw	r2,-216(fp)
 20029d0:	8007883a 	mov	r3,r16
 20029d4:	10c5883a 	add	r2,r2,r3
 20029d8:	e0bfca15 	stw	r2,-216(fp)
 20029dc:	8c400204 	addi	r17,r17,8
 20029e0:	e0bfc917 	ldw	r2,-220(fp)
 20029e4:	10800044 	addi	r2,r2,1
 20029e8:	e0bfc915 	stw	r2,-220(fp)
 20029ec:	e0bfc917 	ldw	r2,-220(fp)
 20029f0:	10800210 	cmplti	r2,r2,8
 20029f4:	1000071e 	bne	r2,zero,2002a14 <___vfprintf_internal_r+0x1ea8>
 20029f8:	e0bfc804 	addi	r2,fp,-224
 20029fc:	100d883a 	mov	r6,r2
 2002a00:	e17fe717 	ldw	r5,-100(fp)
 2002a04:	e13fe617 	ldw	r4,-104(fp)
 2002a08:	200ae440 	call	200ae44 <__sprint_r>
 2002a0c:	10006b1e 	bne	r2,zero,2002bbc <___vfprintf_internal_r+0x2050>
 2002a10:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2002a14:	e0ffad17 	ldw	r3,-332(fp)
 2002a18:	e0bfb517 	ldw	r2,-300(fp)
 2002a1c:	10c0010e 	bge	r2,r3,2002a24 <___vfprintf_internal_r+0x1eb8>
 2002a20:	1805883a 	mov	r2,r3
 2002a24:	e0ffac17 	ldw	r3,-336(fp)
 2002a28:	1885883a 	add	r2,r3,r2
 2002a2c:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2002a30:	e0bfca17 	ldw	r2,-216(fp)
 2002a34:	10000626 	beq	r2,zero,2002a50 <___vfprintf_internal_r+0x1ee4>
 2002a38:	e0bfc804 	addi	r2,fp,-224
 2002a3c:	100d883a 	mov	r6,r2
 2002a40:	e17fe717 	ldw	r5,-100(fp)
 2002a44:	e13fe617 	ldw	r4,-104(fp)
 2002a48:	200ae440 	call	200ae44 <__sprint_r>
 2002a4c:	10005d1e 	bne	r2,zero,2002bc4 <___vfprintf_internal_r+0x2058>
 2002a50:	e03fc915 	stw	zero,-220(fp)
 2002a54:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 2002a58:	e0bfb817 	ldw	r2,-288(fp)
 2002a5c:	1038a026 	beq	r2,zero,2000ce0 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 2002a60:	e17fb817 	ldw	r5,-288(fp)
 2002a64:	e13fe617 	ldw	r4,-104(fp)
 2002a68:	20059f80 	call	20059f8 <_free_r>
			malloc_buf = NULL;
 2002a6c:	e03fb815 	stw	zero,-288(fp)
		}
	}
 2002a70:	00389b06 	br	2000ce0 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2002a74:	0001883a 	nop
 2002a78:	00000106 	br	2002a80 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2002a7c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2002a80:	e0bfca17 	ldw	r2,-216(fp)
 2002a84:	10000626 	beq	r2,zero,2002aa0 <___vfprintf_internal_r+0x1f34>
 2002a88:	e0bfc804 	addi	r2,fp,-224
 2002a8c:	100d883a 	mov	r6,r2
 2002a90:	e17fe717 	ldw	r5,-100(fp)
 2002a94:	e13fe617 	ldw	r4,-104(fp)
 2002a98:	200ae440 	call	200ae44 <__sprint_r>
 2002a9c:	10004b1e 	bne	r2,zero,2002bcc <___vfprintf_internal_r+0x2060>
 2002aa0:	e03fc915 	stw	zero,-220(fp)
 2002aa4:	e47fcb04 	addi	r17,fp,-212
 2002aa8:	00004906 	br	2002bd0 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2002aac:	0001883a 	nop
 2002ab0:	00004706 	br	2002bd0 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2002ab4:	0001883a 	nop
 2002ab8:	00004506 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002abc:	0001883a 	nop
 2002ac0:	00004306 	br	2002bd0 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2002ac4:	0001883a 	nop
 2002ac8:	00004106 	br	2002bd0 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2002acc:	0001883a 	nop
 2002ad0:	00003f06 	br	2002bd0 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2002ad4:	0001883a 	nop
 2002ad8:	00003d06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002adc:	0001883a 	nop
 2002ae0:	00003b06 	br	2002bd0 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2002ae4:	0001883a 	nop
 2002ae8:	00003906 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002aec:	0001883a 	nop
 2002af0:	00003706 	br	2002bd0 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 2002af4:	0001883a 	nop
 2002af8:	00003506 	br	2002bd0 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2002afc:	0001883a 	nop
 2002b00:	00003306 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2002b04:	0001883a 	nop
 2002b08:	00003106 	br	2002bd0 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2002b0c:	0001883a 	nop
 2002b10:	00002f06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b14:	0001883a 	nop
 2002b18:	00002d06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 2002b1c:	0001883a 	nop
 2002b20:	00002b06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2002b24:	0001883a 	nop
 2002b28:	00002906 	br	2002bd0 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 2002b2c:	0001883a 	nop
 2002b30:	00002706 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b34:	0001883a 	nop
 2002b38:	00002506 	br	2002bd0 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 2002b3c:	0001883a 	nop
 2002b40:	00002306 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 2002b44:	0001883a 	nop
 2002b48:	00002106 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b4c:	0001883a 	nop
 2002b50:	00001f06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b54:	0001883a 	nop
 2002b58:	00001d06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 2002b5c:	0001883a 	nop
 2002b60:	00001b06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 2002b64:	0001883a 	nop
 2002b68:	00001906 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b6c:	0001883a 	nop
 2002b70:	00001706 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b74:	0001883a 	nop
 2002b78:	00001506 	br	2002bd0 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 2002b7c:	0001883a 	nop
 2002b80:	00001306 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 2002b84:	0001883a 	nop
 2002b88:	00001106 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 2002b8c:	0001883a 	nop
 2002b90:	00000f06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2002b94:	0001883a 	nop
 2002b98:	00000d06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002b9c:	0001883a 	nop
 2002ba0:	00000b06 	br	2002bd0 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 2002ba4:	0001883a 	nop
 2002ba8:	00000906 	br	2002bd0 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 2002bac:	0001883a 	nop
 2002bb0:	00000706 	br	2002bd0 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2002bb4:	0001883a 	nop
 2002bb8:	00000506 	br	2002bd0 <___vfprintf_internal_r+0x2064>
 2002bbc:	0001883a 	nop
 2002bc0:	00000306 	br	2002bd0 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2002bc4:	0001883a 	nop
 2002bc8:	00000106 	br	2002bd0 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2002bcc:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2002bd0:	e0bfb817 	ldw	r2,-288(fp)
 2002bd4:	10000326 	beq	r2,zero,2002be4 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 2002bd8:	e17fb817 	ldw	r5,-288(fp)
 2002bdc:	e13fe617 	ldw	r4,-104(fp)
 2002be0:	20059f80 	call	20059f8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2002be4:	e0bfe717 	ldw	r2,-100(fp)
 2002be8:	1080030b 	ldhu	r2,12(r2)
 2002bec:	10bfffcc 	andi	r2,r2,65535
 2002bf0:	1080100c 	andi	r2,r2,64
 2002bf4:	1000021e 	bne	r2,zero,2002c00 <___vfprintf_internal_r+0x2094>
 2002bf8:	e0bfac17 	ldw	r2,-336(fp)
 2002bfc:	00000206 	br	2002c08 <___vfprintf_internal_r+0x209c>
 2002c00:	00bfffc4 	movi	r2,-1
 2002c04:	0001883a 	nop
	/* NOTREACHED */
}
 2002c08:	e6fff804 	addi	sp,fp,-32
 2002c0c:	dfc00917 	ldw	ra,36(sp)
 2002c10:	df000817 	ldw	fp,32(sp)
 2002c14:	ddc00717 	ldw	r23,28(sp)
 2002c18:	dd800617 	ldw	r22,24(sp)
 2002c1c:	dd400517 	ldw	r21,20(sp)
 2002c20:	dd000417 	ldw	r20,16(sp)
 2002c24:	dcc00317 	ldw	r19,12(sp)
 2002c28:	dc800217 	ldw	r18,8(sp)
 2002c2c:	dc400117 	ldw	r17,4(sp)
 2002c30:	dc000017 	ldw	r16,0(sp)
 2002c34:	dec00a04 	addi	sp,sp,40
 2002c38:	f800283a 	ret

02002c3c <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 2002c3c:	deffef04 	addi	sp,sp,-68
 2002c40:	dfc01015 	stw	ra,64(sp)
 2002c44:	df000f15 	stw	fp,60(sp)
 2002c48:	df000f04 	addi	fp,sp,60
 2002c4c:	e13ffc15 	stw	r4,-16(fp)
 2002c50:	e17ffd15 	stw	r5,-12(fp)
 2002c54:	e1bffe15 	stw	r6,-8(fp)
 2002c58:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 2002c5c:	e0bffd17 	ldw	r2,-12(fp)
 2002c60:	e0bffa15 	stw	r2,-24(fp)
 2002c64:	e0bffe17 	ldw	r2,-8(fp)
 2002c68:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 2002c6c:	e0bffb17 	ldw	r2,-20(fp)
 2002c70:	1000090e 	bge	r2,zero,2002c98 <cvt+0x5c>
		value = -value;
 2002c74:	e0bffd17 	ldw	r2,-12(fp)
 2002c78:	e0bffd15 	stw	r2,-12(fp)
 2002c7c:	e0bffe17 	ldw	r2,-8(fp)
 2002c80:	10a0003c 	xorhi	r2,r2,32768
 2002c84:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 2002c88:	e0800317 	ldw	r2,12(fp)
 2002c8c:	00c00b44 	movi	r3,45
 2002c90:	10c00005 	stb	r3,0(r2)
 2002c94:	00000206 	br	2002ca0 <cvt+0x64>
	} else
		*sign = '\000';
 2002c98:	e0800317 	ldw	r2,12(fp)
 2002c9c:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 2002ca0:	e0800517 	ldw	r2,20(fp)
 2002ca4:	108019a0 	cmpeqi	r2,r2,102
 2002ca8:	1000031e 	bne	r2,zero,2002cb8 <cvt+0x7c>
 2002cac:	e0800517 	ldw	r2,20(fp)
 2002cb0:	10801198 	cmpnei	r2,r2,70
 2002cb4:	1000031e 	bne	r2,zero,2002cc4 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 2002cb8:	008000c4 	movi	r2,3
 2002cbc:	e0bff515 	stw	r2,-44(fp)
 2002cc0:	00000b06 	br	2002cf0 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 2002cc4:	e0800517 	ldw	r2,20(fp)
 2002cc8:	10801960 	cmpeqi	r2,r2,101
 2002ccc:	1000031e 	bne	r2,zero,2002cdc <cvt+0xa0>
 2002cd0:	e0800517 	ldw	r2,20(fp)
 2002cd4:	10801158 	cmpnei	r2,r2,69
 2002cd8:	1000031e 	bne	r2,zero,2002ce8 <cvt+0xac>
			ndigits++;
 2002cdc:	e0bfff17 	ldw	r2,-4(fp)
 2002ce0:	10800044 	addi	r2,r2,1
 2002ce4:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 2002ce8:	00800084 	movi	r2,2
 2002cec:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 2002cf0:	e0bff904 	addi	r2,fp,-28
 2002cf4:	d8800315 	stw	r2,12(sp)
 2002cf8:	e0bff804 	addi	r2,fp,-32
 2002cfc:	d8800215 	stw	r2,8(sp)
 2002d00:	e0800417 	ldw	r2,16(fp)
 2002d04:	d8800115 	stw	r2,4(sp)
 2002d08:	e0bfff17 	ldw	r2,-4(fp)
 2002d0c:	d8800015 	stw	r2,0(sp)
 2002d10:	e1fff517 	ldw	r7,-44(fp)
 2002d14:	e17ffd17 	ldw	r5,-12(fp)
 2002d18:	e1bffe17 	ldw	r6,-8(fp)
 2002d1c:	e13ffc17 	ldw	r4,-16(fp)
 2002d20:	20034dc0 	call	20034dc <_dtoa_r>
 2002d24:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 2002d28:	e0800517 	ldw	r2,20(fp)
 2002d2c:	108019e0 	cmpeqi	r2,r2,103
 2002d30:	1000031e 	bne	r2,zero,2002d40 <cvt+0x104>
 2002d34:	e0800517 	ldw	r2,20(fp)
 2002d38:	108011d8 	cmpnei	r2,r2,71
 2002d3c:	1000031e 	bne	r2,zero,2002d4c <cvt+0x110>
 2002d40:	e0800217 	ldw	r2,8(fp)
 2002d44:	1080004c 	andi	r2,r2,1
 2002d48:	10003326 	beq	r2,zero,2002e18 <cvt+0x1dc>
		bp = digits + ndigits;
 2002d4c:	e0bfff17 	ldw	r2,-4(fp)
 2002d50:	e0fff717 	ldw	r3,-36(fp)
 2002d54:	1885883a 	add	r2,r3,r2
 2002d58:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 2002d5c:	e0800517 	ldw	r2,20(fp)
 2002d60:	108019a0 	cmpeqi	r2,r2,102
 2002d64:	1000031e 	bne	r2,zero,2002d74 <cvt+0x138>
 2002d68:	e0800517 	ldw	r2,20(fp)
 2002d6c:	10801198 	cmpnei	r2,r2,70
 2002d70:	1000181e 	bne	r2,zero,2002dd4 <cvt+0x198>
			if (*digits == '0' && value)
 2002d74:	e0bff717 	ldw	r2,-36(fp)
 2002d78:	10800003 	ldbu	r2,0(r2)
 2002d7c:	10803fcc 	andi	r2,r2,255
 2002d80:	1080201c 	xori	r2,r2,128
 2002d84:	10bfe004 	addi	r2,r2,-128
 2002d88:	10800c18 	cmpnei	r2,r2,48
 2002d8c:	10000b1e 	bne	r2,zero,2002dbc <cvt+0x180>
 2002d90:	000d883a 	mov	r6,zero
 2002d94:	000f883a 	mov	r7,zero
 2002d98:	e13ffd17 	ldw	r4,-12(fp)
 2002d9c:	e17ffe17 	ldw	r5,-8(fp)
 2002da0:	200edd00 	call	200edd0 <__eqdf2>
 2002da4:	10000526 	beq	r2,zero,2002dbc <cvt+0x180>
				*decpt = -ndigits + 1;
 2002da8:	00c00044 	movi	r3,1
 2002dac:	e0bfff17 	ldw	r2,-4(fp)
 2002db0:	1887c83a 	sub	r3,r3,r2
 2002db4:	e0800417 	ldw	r2,16(fp)
 2002db8:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 2002dbc:	e0800417 	ldw	r2,16(fp)
 2002dc0:	10800017 	ldw	r2,0(r2)
 2002dc4:	1007883a 	mov	r3,r2
 2002dc8:	e0bff617 	ldw	r2,-40(fp)
 2002dcc:	10c5883a 	add	r2,r2,r3
 2002dd0:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 2002dd4:	000d883a 	mov	r6,zero
 2002dd8:	000f883a 	mov	r7,zero
 2002ddc:	e13ffd17 	ldw	r4,-12(fp)
 2002de0:	e17ffe17 	ldw	r5,-8(fp)
 2002de4:	200edd00 	call	200edd0 <__eqdf2>
 2002de8:	1000081e 	bne	r2,zero,2002e0c <cvt+0x1d0>
			rve = bp;
 2002dec:	e0bff617 	ldw	r2,-40(fp)
 2002df0:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 2002df4:	00000506 	br	2002e0c <cvt+0x1d0>
			*rve++ = '0';
 2002df8:	e0bff917 	ldw	r2,-28(fp)
 2002dfc:	10c00044 	addi	r3,r2,1
 2002e00:	e0fff915 	stw	r3,-28(fp)
 2002e04:	00c00c04 	movi	r3,48
 2002e08:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 2002e0c:	e0fff917 	ldw	r3,-28(fp)
 2002e10:	e0bff617 	ldw	r2,-40(fp)
 2002e14:	18bff836 	bltu	r3,r2,2002df8 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 2002e18:	e0bff917 	ldw	r2,-28(fp)
 2002e1c:	1007883a 	mov	r3,r2
 2002e20:	e0bff717 	ldw	r2,-36(fp)
 2002e24:	1887c83a 	sub	r3,r3,r2
 2002e28:	e0800617 	ldw	r2,24(fp)
 2002e2c:	10c00015 	stw	r3,0(r2)
	return (digits);
 2002e30:	e0bff717 	ldw	r2,-36(fp)
}
 2002e34:	e037883a 	mov	sp,fp
 2002e38:	dfc00117 	ldw	ra,4(sp)
 2002e3c:	df000017 	ldw	fp,0(sp)
 2002e40:	dec00204 	addi	sp,sp,8
 2002e44:	f800283a 	ret

02002e48 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 2002e48:	defff704 	addi	sp,sp,-36
 2002e4c:	dfc00815 	stw	ra,32(sp)
 2002e50:	df000715 	stw	fp,28(sp)
 2002e54:	dc400615 	stw	r17,24(sp)
 2002e58:	dc000515 	stw	r16,20(sp)
 2002e5c:	df000704 	addi	fp,sp,28
 2002e60:	e13ffb15 	stw	r4,-20(fp)
 2002e64:	e17ffc15 	stw	r5,-16(fp)
 2002e68:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 2002e6c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 2002e70:	8805883a 	mov	r2,r17
 2002e74:	14400044 	addi	r17,r2,1
 2002e78:	e0fffd17 	ldw	r3,-12(fp)
 2002e7c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 2002e80:	e0bffc17 	ldw	r2,-16(fp)
 2002e84:	1000080e 	bge	r2,zero,2002ea8 <exponent+0x60>
		exp = -exp;
 2002e88:	e0bffc17 	ldw	r2,-16(fp)
 2002e8c:	0085c83a 	sub	r2,zero,r2
 2002e90:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 2002e94:	8805883a 	mov	r2,r17
 2002e98:	14400044 	addi	r17,r2,1
 2002e9c:	00c00b44 	movi	r3,45
 2002ea0:	10c00005 	stb	r3,0(r2)
 2002ea4:	00000406 	br	2002eb8 <exponent+0x70>
	}
	else
		*p++ = '+';
 2002ea8:	8805883a 	mov	r2,r17
 2002eac:	14400044 	addi	r17,r2,1
 2002eb0:	00c00ac4 	movi	r3,43
 2002eb4:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 2002eb8:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 2002ebc:	e0bffc17 	ldw	r2,-16(fp)
 2002ec0:	10800290 	cmplti	r2,r2,10
 2002ec4:	10001d1e 	bne	r2,zero,2002f3c <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 2002ec8:	843fffc4 	addi	r16,r16,-1
 2002ecc:	e0bffc17 	ldw	r2,-16(fp)
 2002ed0:	01400284 	movi	r5,10
 2002ed4:	1009883a 	mov	r4,r2
 2002ed8:	200db0c0 	call	200db0c <__modsi3>
 2002edc:	10800c04 	addi	r2,r2,48
 2002ee0:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 2002ee4:	e0bffc17 	ldw	r2,-16(fp)
 2002ee8:	01400284 	movi	r5,10
 2002eec:	1009883a 	mov	r4,r2
 2002ef0:	200da880 	call	200da88 <__divsi3>
 2002ef4:	e0bffc15 	stw	r2,-16(fp)
 2002ef8:	e0bffc17 	ldw	r2,-16(fp)
 2002efc:	10800288 	cmpgei	r2,r2,10
 2002f00:	103ff11e 	bne	r2,zero,2002ec8 <exponent+0x80>
		*--t = to_char (exp);
 2002f04:	843fffc4 	addi	r16,r16,-1
 2002f08:	e0bffc17 	ldw	r2,-16(fp)
 2002f0c:	10800c04 	addi	r2,r2,48
 2002f10:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 2002f14:	00000606 	br	2002f30 <exponent+0xe8>
 2002f18:	8805883a 	mov	r2,r17
 2002f1c:	14400044 	addi	r17,r2,1
 2002f20:	8007883a 	mov	r3,r16
 2002f24:	1c000044 	addi	r16,r3,1
 2002f28:	18c00003 	ldbu	r3,0(r3)
 2002f2c:	10c00005 	stb	r3,0(r2)
 2002f30:	e0bffac4 	addi	r2,fp,-21
 2002f34:	80bff836 	bltu	r16,r2,2002f18 <exponent+0xd0>
 2002f38:	00000906 	br	2002f60 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 2002f3c:	8805883a 	mov	r2,r17
 2002f40:	14400044 	addi	r17,r2,1
 2002f44:	00c00c04 	movi	r3,48
 2002f48:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 2002f4c:	8805883a 	mov	r2,r17
 2002f50:	14400044 	addi	r17,r2,1
 2002f54:	e0fffc17 	ldw	r3,-16(fp)
 2002f58:	18c00c04 	addi	r3,r3,48
 2002f5c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 2002f60:	8807883a 	mov	r3,r17
 2002f64:	e0bffb17 	ldw	r2,-20(fp)
 2002f68:	1885c83a 	sub	r2,r3,r2
}
 2002f6c:	e6fffe04 	addi	sp,fp,-8
 2002f70:	dfc00317 	ldw	ra,12(sp)
 2002f74:	df000217 	ldw	fp,8(sp)
 2002f78:	dc400117 	ldw	r17,4(sp)
 2002f7c:	dc000017 	ldw	r16,0(sp)
 2002f80:	dec00404 	addi	sp,sp,16
 2002f84:	f800283a 	ret

02002f88 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2002f88:	defffb04 	addi	sp,sp,-20
 2002f8c:	dfc00415 	stw	ra,16(sp)
 2002f90:	df000315 	stw	fp,12(sp)
 2002f94:	dc000215 	stw	r16,8(sp)
 2002f98:	df000304 	addi	fp,sp,12
 2002f9c:	e13ffe15 	stw	r4,-8(fp)
 2002fa0:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 2002fa4:	d0a00017 	ldw	r2,-32768(gp)
 2002fa8:	e0bffd15 	stw	r2,-12(fp)
 2002fac:	e0bffd17 	ldw	r2,-12(fp)
 2002fb0:	10000526 	beq	r2,zero,2002fc8 <__swsetup_r+0x40>
 2002fb4:	e0bffd17 	ldw	r2,-12(fp)
 2002fb8:	10800e17 	ldw	r2,56(r2)
 2002fbc:	1000021e 	bne	r2,zero,2002fc8 <__swsetup_r+0x40>
 2002fc0:	e13ffd17 	ldw	r4,-12(fp)
 2002fc4:	20057d80 	call	20057d8 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 2002fc8:	8080030b 	ldhu	r2,12(r16)
 2002fcc:	10bfffcc 	andi	r2,r2,65535
 2002fd0:	1080020c 	andi	r2,r2,8
 2002fd4:	1000241e 	bne	r2,zero,2003068 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 2002fd8:	8080030b 	ldhu	r2,12(r16)
 2002fdc:	10bfffcc 	andi	r2,r2,65535
 2002fe0:	1080040c 	andi	r2,r2,16
 2002fe4:	1000081e 	bne	r2,zero,2003008 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 2002fe8:	e0bffe17 	ldw	r2,-8(fp)
 2002fec:	00c00244 	movi	r3,9
 2002ff0:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 2002ff4:	8080030b 	ldhu	r2,12(r16)
 2002ff8:	10801014 	ori	r2,r2,64
 2002ffc:	8080030d 	sth	r2,12(r16)
	  return EOF;
 2003000:	00bfffc4 	movi	r2,-1
 2003004:	00004206 	br	2003110 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 2003008:	8080030b 	ldhu	r2,12(r16)
 200300c:	10bfffcc 	andi	r2,r2,65535
 2003010:	1080010c 	andi	r2,r2,4
 2003014:	10001126 	beq	r2,zero,200305c <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 2003018:	80800c17 	ldw	r2,48(r16)
 200301c:	10000826 	beq	r2,zero,2003040 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 2003020:	80c00c17 	ldw	r3,48(r16)
 2003024:	80801004 	addi	r2,r16,64
 2003028:	18800426 	beq	r3,r2,200303c <__swsetup_r+0xb4>
 200302c:	80800c17 	ldw	r2,48(r16)
 2003030:	100b883a 	mov	r5,r2
 2003034:	e13ffe17 	ldw	r4,-8(fp)
 2003038:	20059f80 	call	20059f8 <_free_r>
 200303c:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 2003040:	80c0030b 	ldhu	r3,12(r16)
 2003044:	00bff6c4 	movi	r2,-37
 2003048:	1884703a 	and	r2,r3,r2
 200304c:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 2003050:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 2003054:	80800417 	ldw	r2,16(r16)
 2003058:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 200305c:	8080030b 	ldhu	r2,12(r16)
 2003060:	10800214 	ori	r2,r2,8
 2003064:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 2003068:	80800417 	ldw	r2,16(r16)
 200306c:	10000b1e 	bne	r2,zero,200309c <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 2003070:	8080030b 	ldhu	r2,12(r16)
 2003074:	10bfffcc 	andi	r2,r2,65535
 2003078:	1080800c 	andi	r2,r2,512
 200307c:	10000426 	beq	r2,zero,2003090 <__swsetup_r+0x108>
 2003080:	8080030b 	ldhu	r2,12(r16)
 2003084:	10bfffcc 	andi	r2,r2,65535
 2003088:	1080200c 	andi	r2,r2,128
 200308c:	10000326 	beq	r2,zero,200309c <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 2003090:	800b883a 	mov	r5,r16
 2003094:	e13ffe17 	ldw	r4,-8(fp)
 2003098:	2006a580 	call	2006a58 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 200309c:	8080030b 	ldhu	r2,12(r16)
 20030a0:	10bfffcc 	andi	r2,r2,65535
 20030a4:	1080004c 	andi	r2,r2,1
 20030a8:	10000526 	beq	r2,zero,20030c0 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 20030ac:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 20030b0:	80800517 	ldw	r2,20(r16)
 20030b4:	0085c83a 	sub	r2,zero,r2
 20030b8:	80800615 	stw	r2,24(r16)
 20030bc:	00000806 	br	20030e0 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 20030c0:	8080030b 	ldhu	r2,12(r16)
 20030c4:	10bfffcc 	andi	r2,r2,65535
 20030c8:	1080008c 	andi	r2,r2,2
 20030cc:	1000021e 	bne	r2,zero,20030d8 <__swsetup_r+0x150>
 20030d0:	80800517 	ldw	r2,20(r16)
 20030d4:	00000106 	br	20030dc <__swsetup_r+0x154>
 20030d8:	0005883a 	mov	r2,zero
 20030dc:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 20030e0:	80800417 	ldw	r2,16(r16)
 20030e4:	1000091e 	bne	r2,zero,200310c <__swsetup_r+0x184>
 20030e8:	8080030b 	ldhu	r2,12(r16)
 20030ec:	10bfffcc 	andi	r2,r2,65535
 20030f0:	1080200c 	andi	r2,r2,128
 20030f4:	10000526 	beq	r2,zero,200310c <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 20030f8:	8080030b 	ldhu	r2,12(r16)
 20030fc:	10801014 	ori	r2,r2,64
 2003100:	8080030d 	sth	r2,12(r16)
      return EOF;
 2003104:	00bfffc4 	movi	r2,-1
 2003108:	00000106 	br	2003110 <__swsetup_r+0x188>
    }
  return 0;
 200310c:	0005883a 	mov	r2,zero
}
 2003110:	e6ffff04 	addi	sp,fp,-4
 2003114:	dfc00217 	ldw	ra,8(sp)
 2003118:	df000117 	ldw	fp,4(sp)
 200311c:	dc000017 	ldw	r16,0(sp)
 2003120:	dec00304 	addi	sp,sp,12
 2003124:	f800283a 	ret

02003128 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 2003128:	deffef04 	addi	sp,sp,-68
 200312c:	dfc01015 	stw	ra,64(sp)
 2003130:	df000f15 	stw	fp,60(sp)
 2003134:	df000f04 	addi	fp,sp,60
 2003138:	e13ffe15 	stw	r4,-8(fp)
 200313c:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 2003140:	e0bfff17 	ldw	r2,-4(fp)
 2003144:	10800417 	ldw	r2,16(r2)
 2003148:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 200314c:	e0bffe17 	ldw	r2,-8(fp)
 2003150:	10c00417 	ldw	r3,16(r2)
 2003154:	e0bff117 	ldw	r2,-60(fp)
 2003158:	1880020e 	bge	r3,r2,2003164 <quorem+0x3c>
    return 0;
 200315c:	0005883a 	mov	r2,zero
 2003160:	0000d906 	br	20034c8 <quorem+0x3a0>
  sx = S->_x;
 2003164:	e0bfff17 	ldw	r2,-4(fp)
 2003168:	10800504 	addi	r2,r2,20
 200316c:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 2003170:	e0bff117 	ldw	r2,-60(fp)
 2003174:	10bfffc4 	addi	r2,r2,-1
 2003178:	e0bff115 	stw	r2,-60(fp)
 200317c:	e0bff117 	ldw	r2,-60(fp)
 2003180:	1085883a 	add	r2,r2,r2
 2003184:	1085883a 	add	r2,r2,r2
 2003188:	1007883a 	mov	r3,r2
 200318c:	e0bff717 	ldw	r2,-36(fp)
 2003190:	10c5883a 	add	r2,r2,r3
 2003194:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 2003198:	e0bffe17 	ldw	r2,-8(fp)
 200319c:	10800504 	addi	r2,r2,20
 20031a0:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 20031a4:	e0bff117 	ldw	r2,-60(fp)
 20031a8:	1085883a 	add	r2,r2,r2
 20031ac:	1085883a 	add	r2,r2,r2
 20031b0:	1007883a 	mov	r3,r2
 20031b4:	e0bff517 	ldw	r2,-44(fp)
 20031b8:	10c5883a 	add	r2,r2,r3
 20031bc:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 20031c0:	e0bff617 	ldw	r2,-40(fp)
 20031c4:	10c00017 	ldw	r3,0(r2)
 20031c8:	e0bff817 	ldw	r2,-32(fp)
 20031cc:	10800017 	ldw	r2,0(r2)
 20031d0:	10800044 	addi	r2,r2,1
 20031d4:	100b883a 	mov	r5,r2
 20031d8:	1809883a 	mov	r4,r3
 20031dc:	200db800 	call	200db80 <__udivsi3>
 20031e0:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 20031e4:	e0bff417 	ldw	r2,-48(fp)
 20031e8:	10005326 	beq	r2,zero,2003338 <quorem+0x210>
    {
      borrow = 0;
 20031ec:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 20031f0:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 20031f4:	e0bff717 	ldw	r2,-36(fp)
 20031f8:	10c00104 	addi	r3,r2,4
 20031fc:	e0fff715 	stw	r3,-36(fp)
 2003200:	10800017 	ldw	r2,0(r2)
 2003204:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 2003208:	e0bff917 	ldw	r2,-28(fp)
 200320c:	10ffffcc 	andi	r3,r2,65535
 2003210:	e0bff417 	ldw	r2,-48(fp)
 2003214:	1887383a 	mul	r3,r3,r2
 2003218:	e0bff317 	ldw	r2,-52(fp)
 200321c:	1885883a 	add	r2,r3,r2
 2003220:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 2003224:	e0bff917 	ldw	r2,-28(fp)
 2003228:	1006d43a 	srli	r3,r2,16
 200322c:	e0bff417 	ldw	r2,-48(fp)
 2003230:	1887383a 	mul	r3,r3,r2
 2003234:	e0bffa17 	ldw	r2,-24(fp)
 2003238:	1004d43a 	srli	r2,r2,16
 200323c:	1885883a 	add	r2,r3,r2
 2003240:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2003244:	e0bffb17 	ldw	r2,-20(fp)
 2003248:	1004d43a 	srli	r2,r2,16
 200324c:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2003250:	e0bff517 	ldw	r2,-44(fp)
 2003254:	10800017 	ldw	r2,0(r2)
 2003258:	10ffffcc 	andi	r3,r2,65535
 200325c:	e0bffa17 	ldw	r2,-24(fp)
 2003260:	10bfffcc 	andi	r2,r2,65535
 2003264:	1887c83a 	sub	r3,r3,r2
 2003268:	e0bff217 	ldw	r2,-56(fp)
 200326c:	1885883a 	add	r2,r3,r2
 2003270:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2003274:	e0bffc17 	ldw	r2,-16(fp)
 2003278:	1005d43a 	srai	r2,r2,16
 200327c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2003280:	e0bff517 	ldw	r2,-44(fp)
 2003284:	10800017 	ldw	r2,0(r2)
 2003288:	1006d43a 	srli	r3,r2,16
 200328c:	e0bffb17 	ldw	r2,-20(fp)
 2003290:	10bfffcc 	andi	r2,r2,65535
 2003294:	1887c83a 	sub	r3,r3,r2
 2003298:	e0bff217 	ldw	r2,-56(fp)
 200329c:	1885883a 	add	r2,r3,r2
 20032a0:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 20032a4:	e0bffd17 	ldw	r2,-12(fp)
 20032a8:	1005d43a 	srai	r2,r2,16
 20032ac:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 20032b0:	e0bff517 	ldw	r2,-44(fp)
 20032b4:	10c00104 	addi	r3,r2,4
 20032b8:	e0fff515 	stw	r3,-44(fp)
 20032bc:	e0fffd17 	ldw	r3,-12(fp)
 20032c0:	1808943a 	slli	r4,r3,16
 20032c4:	e0fffc17 	ldw	r3,-16(fp)
 20032c8:	18ffffcc 	andi	r3,r3,65535
 20032cc:	20c6b03a 	or	r3,r4,r3
 20032d0:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 20032d4:	e0bff717 	ldw	r2,-36(fp)
 20032d8:	e0fff817 	ldw	r3,-32(fp)
 20032dc:	18bfc52e 	bgeu	r3,r2,20031f4 <quorem+0xcc>
      if (!*bxe)
 20032e0:	e0bff617 	ldw	r2,-40(fp)
 20032e4:	10800017 	ldw	r2,0(r2)
 20032e8:	1000131e 	bne	r2,zero,2003338 <quorem+0x210>
	{
	  bx = b->_x;
 20032ec:	e0bffe17 	ldw	r2,-8(fp)
 20032f0:	10800504 	addi	r2,r2,20
 20032f4:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 20032f8:	00000306 	br	2003308 <quorem+0x1e0>
	    --n;
 20032fc:	e0bff117 	ldw	r2,-60(fp)
 2003300:	10bfffc4 	addi	r2,r2,-1
 2003304:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 2003308:	e0bff617 	ldw	r2,-40(fp)
 200330c:	10bfff04 	addi	r2,r2,-4
 2003310:	e0bff615 	stw	r2,-40(fp)
 2003314:	e0bff617 	ldw	r2,-40(fp)
 2003318:	e0fff517 	ldw	r3,-44(fp)
 200331c:	1880032e 	bgeu	r3,r2,200332c <quorem+0x204>
 2003320:	e0bff617 	ldw	r2,-40(fp)
 2003324:	10800017 	ldw	r2,0(r2)
 2003328:	103ff426 	beq	r2,zero,20032fc <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 200332c:	e0bffe17 	ldw	r2,-8(fp)
 2003330:	e0fff117 	ldw	r3,-60(fp)
 2003334:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 2003338:	e17fff17 	ldw	r5,-4(fp)
 200333c:	e13ffe17 	ldw	r4,-8(fp)
 2003340:	20090a40 	call	20090a4 <__mcmp>
 2003344:	10005f16 	blt	r2,zero,20034c4 <quorem+0x39c>
    {
      q++;
 2003348:	e0bff417 	ldw	r2,-48(fp)
 200334c:	10800044 	addi	r2,r2,1
 2003350:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 2003354:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2003358:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 200335c:	e0bffe17 	ldw	r2,-8(fp)
 2003360:	10800504 	addi	r2,r2,20
 2003364:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 2003368:	e0bfff17 	ldw	r2,-4(fp)
 200336c:	10800504 	addi	r2,r2,20
 2003370:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2003374:	e0bff717 	ldw	r2,-36(fp)
 2003378:	10c00104 	addi	r3,r2,4
 200337c:	e0fff715 	stw	r3,-36(fp)
 2003380:	10800017 	ldw	r2,0(r2)
 2003384:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 2003388:	e0bff917 	ldw	r2,-28(fp)
 200338c:	10ffffcc 	andi	r3,r2,65535
 2003390:	e0bff317 	ldw	r2,-52(fp)
 2003394:	1885883a 	add	r2,r3,r2
 2003398:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 200339c:	e0bff917 	ldw	r2,-28(fp)
 20033a0:	1006d43a 	srli	r3,r2,16
 20033a4:	e0bffa17 	ldw	r2,-24(fp)
 20033a8:	1004d43a 	srli	r2,r2,16
 20033ac:	1885883a 	add	r2,r3,r2
 20033b0:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 20033b4:	e0bffb17 	ldw	r2,-20(fp)
 20033b8:	1004d43a 	srli	r2,r2,16
 20033bc:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 20033c0:	e0bff517 	ldw	r2,-44(fp)
 20033c4:	10800017 	ldw	r2,0(r2)
 20033c8:	10ffffcc 	andi	r3,r2,65535
 20033cc:	e0bffa17 	ldw	r2,-24(fp)
 20033d0:	10bfffcc 	andi	r2,r2,65535
 20033d4:	1887c83a 	sub	r3,r3,r2
 20033d8:	e0bff217 	ldw	r2,-56(fp)
 20033dc:	1885883a 	add	r2,r3,r2
 20033e0:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 20033e4:	e0bffc17 	ldw	r2,-16(fp)
 20033e8:	1005d43a 	srai	r2,r2,16
 20033ec:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 20033f0:	e0bff517 	ldw	r2,-44(fp)
 20033f4:	10800017 	ldw	r2,0(r2)
 20033f8:	1006d43a 	srli	r3,r2,16
 20033fc:	e0bffb17 	ldw	r2,-20(fp)
 2003400:	10bfffcc 	andi	r2,r2,65535
 2003404:	1887c83a 	sub	r3,r3,r2
 2003408:	e0bff217 	ldw	r2,-56(fp)
 200340c:	1885883a 	add	r2,r3,r2
 2003410:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2003414:	e0bffd17 	ldw	r2,-12(fp)
 2003418:	1005d43a 	srai	r2,r2,16
 200341c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2003420:	e0bff517 	ldw	r2,-44(fp)
 2003424:	10c00104 	addi	r3,r2,4
 2003428:	e0fff515 	stw	r3,-44(fp)
 200342c:	e0fffd17 	ldw	r3,-12(fp)
 2003430:	1808943a 	slli	r4,r3,16
 2003434:	e0fffc17 	ldw	r3,-16(fp)
 2003438:	18ffffcc 	andi	r3,r3,65535
 200343c:	20c6b03a 	or	r3,r4,r3
 2003440:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2003444:	e0bff717 	ldw	r2,-36(fp)
 2003448:	e0fff817 	ldw	r3,-32(fp)
 200344c:	18bfc92e 	bgeu	r3,r2,2003374 <quorem+0x24c>
      bx = b->_x;
 2003450:	e0bffe17 	ldw	r2,-8(fp)
 2003454:	10800504 	addi	r2,r2,20
 2003458:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 200345c:	e0bff117 	ldw	r2,-60(fp)
 2003460:	1085883a 	add	r2,r2,r2
 2003464:	1085883a 	add	r2,r2,r2
 2003468:	1007883a 	mov	r3,r2
 200346c:	e0bff517 	ldw	r2,-44(fp)
 2003470:	10c5883a 	add	r2,r2,r3
 2003474:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 2003478:	e0bff617 	ldw	r2,-40(fp)
 200347c:	10800017 	ldw	r2,0(r2)
 2003480:	1000101e 	bne	r2,zero,20034c4 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 2003484:	00000306 	br	2003494 <quorem+0x36c>
	    --n;
 2003488:	e0bff117 	ldw	r2,-60(fp)
 200348c:	10bfffc4 	addi	r2,r2,-1
 2003490:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 2003494:	e0bff617 	ldw	r2,-40(fp)
 2003498:	10bfff04 	addi	r2,r2,-4
 200349c:	e0bff615 	stw	r2,-40(fp)
 20034a0:	e0bff617 	ldw	r2,-40(fp)
 20034a4:	e0fff517 	ldw	r3,-44(fp)
 20034a8:	1880032e 	bgeu	r3,r2,20034b8 <quorem+0x390>
 20034ac:	e0bff617 	ldw	r2,-40(fp)
 20034b0:	10800017 	ldw	r2,0(r2)
 20034b4:	103ff426 	beq	r2,zero,2003488 <quorem+0x360>
	    --n;
	  b->_wds = n;
 20034b8:	e0bffe17 	ldw	r2,-8(fp)
 20034bc:	e0fff117 	ldw	r3,-60(fp)
 20034c0:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 20034c4:	e0bff417 	ldw	r2,-48(fp)
}
 20034c8:	e037883a 	mov	sp,fp
 20034cc:	dfc00117 	ldw	ra,4(sp)
 20034d0:	df000017 	ldw	fp,0(sp)
 20034d4:	dec00204 	addi	sp,sp,8
 20034d8:	f800283a 	ret

020034dc <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 20034dc:	deffcc04 	addi	sp,sp,-208
 20034e0:	dfc03315 	stw	ra,204(sp)
 20034e4:	df003215 	stw	fp,200(sp)
 20034e8:	dcc03115 	stw	r19,196(sp)
 20034ec:	dc803015 	stw	r18,192(sp)
 20034f0:	dc402f15 	stw	r17,188(sp)
 20034f4:	dc002e15 	stw	r16,184(sp)
 20034f8:	df003204 	addi	fp,sp,200
 20034fc:	e13ff815 	stw	r4,-32(fp)
 2003500:	e17ff915 	stw	r5,-28(fp)
 2003504:	e1bffa15 	stw	r6,-24(fp)
 2003508:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 200350c:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 2003510:	e0bff917 	ldw	r2,-28(fp)
 2003514:	e0bff215 	stw	r2,-56(fp)
 2003518:	e0bffa17 	ldw	r2,-24(fp)
 200351c:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 2003520:	e0bff817 	ldw	r2,-32(fp)
 2003524:	10801017 	ldw	r2,64(r2)
 2003528:	10001326 	beq	r2,zero,2003578 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 200352c:	e0bff817 	ldw	r2,-32(fp)
 2003530:	10801017 	ldw	r2,64(r2)
 2003534:	e0fff817 	ldw	r3,-32(fp)
 2003538:	18c01117 	ldw	r3,68(r3)
 200353c:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 2003540:	e0bff817 	ldw	r2,-32(fp)
 2003544:	10801017 	ldw	r2,64(r2)
 2003548:	e0fff817 	ldw	r3,-32(fp)
 200354c:	18c01117 	ldw	r3,68(r3)
 2003550:	01000044 	movi	r4,1
 2003554:	20c6983a 	sll	r3,r4,r3
 2003558:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 200355c:	e0bff817 	ldw	r2,-32(fp)
 2003560:	10801017 	ldw	r2,64(r2)
 2003564:	100b883a 	mov	r5,r2
 2003568:	e13ff817 	ldw	r4,-32(fp)
 200356c:	20083f40 	call	20083f4 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 2003570:	e0bff817 	ldw	r2,-32(fp)
 2003574:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 2003578:	e0bff317 	ldw	r2,-52(fp)
 200357c:	1000090e 	bge	r2,zero,20035a4 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 2003580:	e0800417 	ldw	r2,16(fp)
 2003584:	00c00044 	movi	r3,1
 2003588:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 200358c:	e0fff317 	ldw	r3,-52(fp)
 2003590:	00a00034 	movhi	r2,32768
 2003594:	10bfffc4 	addi	r2,r2,-1
 2003598:	1884703a 	and	r2,r3,r2
 200359c:	e0bff315 	stw	r2,-52(fp)
 20035a0:	00000206 	br	20035ac <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 20035a4:	e0800417 	ldw	r2,16(fp)
 20035a8:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 20035ac:	e0bff317 	ldw	r2,-52(fp)
 20035b0:	10dffc2c 	andhi	r3,r2,32752
 20035b4:	009ffc34 	movhi	r2,32752
 20035b8:	1880221e 	bne	r3,r2,2003644 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 20035bc:	e0800317 	ldw	r2,12(fp)
 20035c0:	00c9c3c4 	movi	r3,9999
 20035c4:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 20035c8:	e0bff217 	ldw	r2,-56(fp)
 20035cc:	1000081e 	bne	r2,zero,20035f0 <_dtoa_r+0x114>
 20035d0:	e0fff317 	ldw	r3,-52(fp)
 20035d4:	00800434 	movhi	r2,16
 20035d8:	10bfffc4 	addi	r2,r2,-1
 20035dc:	1884703a 	and	r2,r3,r2
 20035e0:	1000031e 	bne	r2,zero,20035f0 <_dtoa_r+0x114>
 20035e4:	00808074 	movhi	r2,513
 20035e8:	108b9604 	addi	r2,r2,11864
 20035ec:	00000206 	br	20035f8 <_dtoa_r+0x11c>
 20035f0:	00808074 	movhi	r2,513
 20035f4:	108b9904 	addi	r2,r2,11876
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 20035f8:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 20035fc:	e0800517 	ldw	r2,20(fp)
 2003600:	10000e26 	beq	r2,zero,200363c <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 2003604:	e0bfe717 	ldw	r2,-100(fp)
 2003608:	108000c4 	addi	r2,r2,3
 200360c:	10800003 	ldbu	r2,0(r2)
 2003610:	10803fcc 	andi	r2,r2,255
 2003614:	1080201c 	xori	r2,r2,128
 2003618:	10bfe004 	addi	r2,r2,-128
 200361c:	10000326 	beq	r2,zero,200362c <_dtoa_r+0x150>
 2003620:	e0bfe717 	ldw	r2,-100(fp)
 2003624:	10800204 	addi	r2,r2,8
 2003628:	00000206 	br	2003634 <_dtoa_r+0x158>
 200362c:	e0bfe717 	ldw	r2,-100(fp)
 2003630:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 2003634:	e0c00517 	ldw	r3,20(fp)
 2003638:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 200363c:	e0bfe717 	ldw	r2,-100(fp)
 2003640:	00067b06 	br	2005030 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 2003644:	e0bff217 	ldw	r2,-56(fp)
 2003648:	e0fff317 	ldw	r3,-52(fp)
 200364c:	000d883a 	mov	r6,zero
 2003650:	000f883a 	mov	r7,zero
 2003654:	1009883a 	mov	r4,r2
 2003658:	180b883a 	mov	r5,r3
 200365c:	200edd00 	call	200edd0 <__eqdf2>
 2003660:	10000e1e 	bne	r2,zero,200369c <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 2003664:	e0800317 	ldw	r2,12(fp)
 2003668:	00c00044 	movi	r3,1
 200366c:	10c00015 	stw	r3,0(r2)
      s = "0";
 2003670:	00808074 	movhi	r2,513
 2003674:	108b9a04 	addi	r2,r2,11880
 2003678:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 200367c:	e0800517 	ldw	r2,20(fp)
 2003680:	10000426 	beq	r2,zero,2003694 <_dtoa_r+0x1b8>
	*rve = s + 1;
 2003684:	e0bfe717 	ldw	r2,-100(fp)
 2003688:	10c00044 	addi	r3,r2,1
 200368c:	e0800517 	ldw	r2,20(fp)
 2003690:	10c00015 	stw	r3,0(r2)
      return s;
 2003694:	e0bfe717 	ldw	r2,-100(fp)
 2003698:	00066506 	br	2005030 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 200369c:	e0bff217 	ldw	r2,-56(fp)
 20036a0:	e0fff317 	ldw	r3,-52(fp)
 20036a4:	e17ff104 	addi	r5,fp,-60
 20036a8:	e13ff004 	addi	r4,fp,-64
 20036ac:	d9000015 	stw	r4,0(sp)
 20036b0:	280f883a 	mov	r7,r5
 20036b4:	100b883a 	mov	r5,r2
 20036b8:	180d883a 	mov	r6,r3
 20036bc:	e13ff817 	ldw	r4,-32(fp)
 20036c0:	200972c0 	call	200972c <__d2b>
 20036c4:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 20036c8:	e0bff317 	ldw	r2,-52(fp)
 20036cc:	1004d53a 	srli	r2,r2,20
 20036d0:	1081ffcc 	andi	r2,r2,2047
 20036d4:	e0bfd215 	stw	r2,-184(fp)
 20036d8:	e0bfd217 	ldw	r2,-184(fp)
 20036dc:	10001126 	beq	r2,zero,2003724 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 20036e0:	e0bff217 	ldw	r2,-56(fp)
 20036e4:	e0fff317 	ldw	r3,-52(fp)
 20036e8:	e0bff415 	stw	r2,-48(fp)
 20036ec:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 20036f0:	e0fff517 	ldw	r3,-44(fp)
 20036f4:	00800434 	movhi	r2,16
 20036f8:	10bfffc4 	addi	r2,r2,-1
 20036fc:	1884703a 	and	r2,r3,r2
 2003700:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 2003704:	e0bff517 	ldw	r2,-44(fp)
 2003708:	108ffc34 	orhi	r2,r2,16368
 200370c:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 2003710:	e0bfd217 	ldw	r2,-184(fp)
 2003714:	10bf0044 	addi	r2,r2,-1023
 2003718:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 200371c:	e03fe015 	stw	zero,-128(fp)
 2003720:	00002806 	br	20037c4 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 2003724:	e0fff017 	ldw	r3,-64(fp)
 2003728:	e0bff117 	ldw	r2,-60(fp)
 200372c:	1885883a 	add	r2,r3,r2
 2003730:	10810c84 	addi	r2,r2,1074
 2003734:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 2003738:	e0bfd217 	ldw	r2,-184(fp)
 200373c:	10800850 	cmplti	r2,r2,33
 2003740:	10000b1e 	bne	r2,zero,2003770 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2003744:	e0fff317 	ldw	r3,-52(fp)
 2003748:	01001004 	movi	r4,64
 200374c:	e0bfd217 	ldw	r2,-184(fp)
 2003750:	2085c83a 	sub	r2,r4,r2
 2003754:	1886983a 	sll	r3,r3,r2
 2003758:	e13ff217 	ldw	r4,-56(fp)
 200375c:	e0bfd217 	ldw	r2,-184(fp)
 2003760:	10bff804 	addi	r2,r2,-32
 2003764:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 2003768:	1884b03a 	or	r2,r3,r2
 200376c:	00000506 	br	2003784 <_dtoa_r+0x2a8>
 2003770:	e0fff217 	ldw	r3,-56(fp)
 2003774:	01000804 	movi	r4,32
 2003778:	e0bfd217 	ldw	r2,-184(fp)
 200377c:	2085c83a 	sub	r2,r4,r2
 2003780:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2003784:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 2003788:	e13fe817 	ldw	r4,-96(fp)
 200378c:	200ffc80 	call	200ffc8 <__floatunsidf>
 2003790:	1009883a 	mov	r4,r2
 2003794:	180b883a 	mov	r5,r3
 2003798:	e13ff415 	stw	r4,-48(fp)
 200379c:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 20037a0:	e0fff517 	ldw	r3,-44(fp)
 20037a4:	00bf8434 	movhi	r2,65040
 20037a8:	1885883a 	add	r2,r3,r2
 20037ac:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 20037b0:	e0bfd217 	ldw	r2,-184(fp)
 20037b4:	10bef344 	addi	r2,r2,-1075
 20037b8:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 20037bc:	00800044 	movi	r2,1
 20037c0:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 20037c4:	e0bff417 	ldw	r2,-48(fp)
 20037c8:	e0fff517 	ldw	r3,-44(fp)
 20037cc:	000d883a 	mov	r6,zero
 20037d0:	01cffe34 	movhi	r7,16376
 20037d4:	1009883a 	mov	r4,r2
 20037d8:	180b883a 	mov	r5,r3
 20037dc:	200f64c0 	call	200f64c <__subdf3>
 20037e0:	1009883a 	mov	r4,r2
 20037e4:	180b883a 	mov	r5,r3
 20037e8:	2005883a 	mov	r2,r4
 20037ec:	2807883a 	mov	r3,r5
 20037f0:	0198dbf4 	movhi	r6,25455
 20037f4:	3190d844 	addi	r6,r6,17249
 20037f8:	01cff4f4 	movhi	r7,16339
 20037fc:	39e1e9c4 	addi	r7,r7,-30809
 2003800:	1009883a 	mov	r4,r2
 2003804:	180b883a 	mov	r5,r3
 2003808:	200ef340 	call	200ef34 <__muldf3>
 200380c:	1009883a 	mov	r4,r2
 2003810:	180b883a 	mov	r5,r3
 2003814:	2005883a 	mov	r2,r4
 2003818:	2807883a 	mov	r3,r5
 200381c:	01a2d874 	movhi	r6,35681
 2003820:	31b22cc4 	addi	r6,r6,-14157
 2003824:	01cff1f4 	movhi	r7,16327
 2003828:	39e28a04 	addi	r7,r7,-30168
 200382c:	1009883a 	mov	r4,r2
 2003830:	180b883a 	mov	r5,r3
 2003834:	200dc3c0 	call	200dc3c <__adddf3>
 2003838:	1009883a 	mov	r4,r2
 200383c:	180b883a 	mov	r5,r3
 2003840:	2025883a 	mov	r18,r4
 2003844:	2827883a 	mov	r19,r5
 2003848:	e13fd217 	ldw	r4,-184(fp)
 200384c:	20005dc0 	call	20005dc <__floatsidf>
 2003850:	1011883a 	mov	r8,r2
 2003854:	1813883a 	mov	r9,r3
 2003858:	019427f4 	movhi	r6,20639
 200385c:	319e7ec4 	addi	r6,r6,31227
 2003860:	01cff4f4 	movhi	r7,16339
 2003864:	39d104c4 	addi	r7,r7,17427
 2003868:	4009883a 	mov	r4,r8
 200386c:	480b883a 	mov	r5,r9
 2003870:	200ef340 	call	200ef34 <__muldf3>
 2003874:	1009883a 	mov	r4,r2
 2003878:	180b883a 	mov	r5,r3
 200387c:	2005883a 	mov	r2,r4
 2003880:	2807883a 	mov	r3,r5
 2003884:	100d883a 	mov	r6,r2
 2003888:	180f883a 	mov	r7,r3
 200388c:	9009883a 	mov	r4,r18
 2003890:	980b883a 	mov	r5,r19
 2003894:	200dc3c0 	call	200dc3c <__adddf3>
 2003898:	1009883a 	mov	r4,r2
 200389c:	180b883a 	mov	r5,r3
 20038a0:	e13fe515 	stw	r4,-108(fp)
 20038a4:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 20038a8:	e13fe517 	ldw	r4,-108(fp)
 20038ac:	e17fe617 	ldw	r5,-104(fp)
 20038b0:	200ff480 	call	200ff48 <__fixdfsi>
 20038b4:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 20038b8:	000d883a 	mov	r6,zero
 20038bc:	000f883a 	mov	r7,zero
 20038c0:	e13fe517 	ldw	r4,-108(fp)
 20038c4:	e17fe617 	ldw	r5,-104(fp)
 20038c8:	20004e80 	call	20004e8 <__ledf2>
 20038cc:	10000d0e 	bge	r2,zero,2003904 <_dtoa_r+0x428>
 20038d0:	e13fd717 	ldw	r4,-164(fp)
 20038d4:	20005dc0 	call	20005dc <__floatsidf>
 20038d8:	1011883a 	mov	r8,r2
 20038dc:	1813883a 	mov	r9,r3
 20038e0:	e1bfe517 	ldw	r6,-108(fp)
 20038e4:	e1ffe617 	ldw	r7,-104(fp)
 20038e8:	4009883a 	mov	r4,r8
 20038ec:	480b883a 	mov	r5,r9
 20038f0:	200edd00 	call	200edd0 <__eqdf2>
 20038f4:	10000326 	beq	r2,zero,2003904 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 20038f8:	e0bfd717 	ldw	r2,-164(fp)
 20038fc:	10bfffc4 	addi	r2,r2,-1
 2003900:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 2003904:	00800044 	movi	r2,1
 2003908:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 200390c:	e0bfd717 	ldw	r2,-164(fp)
 2003910:	10001616 	blt	r2,zero,200396c <_dtoa_r+0x490>
 2003914:	e0bfd717 	ldw	r2,-164(fp)
 2003918:	108005c8 	cmpgei	r2,r2,23
 200391c:	1000131e 	bne	r2,zero,200396c <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 2003920:	e0bff217 	ldw	r2,-56(fp)
 2003924:	e0fff317 	ldw	r3,-52(fp)
 2003928:	01008074 	movhi	r4,513
 200392c:	210ba104 	addi	r4,r4,11908
 2003930:	e17fd717 	ldw	r5,-164(fp)
 2003934:	280a90fa 	slli	r5,r5,3
 2003938:	214d883a 	add	r6,r4,r5
 200393c:	31000017 	ldw	r4,0(r6)
 2003940:	31400117 	ldw	r5,4(r6)
 2003944:	200d883a 	mov	r6,r4
 2003948:	280f883a 	mov	r7,r5
 200394c:	1009883a 	mov	r4,r2
 2003950:	180b883a 	mov	r5,r3
 2003954:	20004e80 	call	20004e8 <__ledf2>
 2003958:	1000030e 	bge	r2,zero,2003968 <_dtoa_r+0x48c>
	k--;
 200395c:	e0bfd717 	ldw	r2,-164(fp)
 2003960:	10bfffc4 	addi	r2,r2,-1
 2003964:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 2003968:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 200396c:	e0fff017 	ldw	r3,-64(fp)
 2003970:	e0bfd217 	ldw	r2,-184(fp)
 2003974:	1885c83a 	sub	r2,r3,r2
 2003978:	10bfffc4 	addi	r2,r2,-1
 200397c:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 2003980:	e0bfd617 	ldw	r2,-168(fp)
 2003984:	10000416 	blt	r2,zero,2003998 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 2003988:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 200398c:	e0bfd617 	ldw	r2,-168(fp)
 2003990:	e0bfdc15 	stw	r2,-144(fp)
 2003994:	00000406 	br	20039a8 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 2003998:	e0bfd617 	ldw	r2,-168(fp)
 200399c:	0085c83a 	sub	r2,zero,r2
 20039a0:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 20039a4:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 20039a8:	e0bfd717 	ldw	r2,-164(fp)
 20039ac:	10000816 	blt	r2,zero,20039d0 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 20039b0:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 20039b4:	e0bfd717 	ldw	r2,-164(fp)
 20039b8:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 20039bc:	e0ffdc17 	ldw	r3,-144(fp)
 20039c0:	e0bfd717 	ldw	r2,-164(fp)
 20039c4:	1885883a 	add	r2,r3,r2
 20039c8:	e0bfdc15 	stw	r2,-144(fp)
 20039cc:	00000806 	br	20039f0 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 20039d0:	e0ffcf17 	ldw	r3,-196(fp)
 20039d4:	e0bfd717 	ldw	r2,-164(fp)
 20039d8:	1885c83a 	sub	r2,r3,r2
 20039dc:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 20039e0:	e0bfd717 	ldw	r2,-164(fp)
 20039e4:	0085c83a 	sub	r2,zero,r2
 20039e8:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 20039ec:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 20039f0:	e0bffb17 	ldw	r2,-20(fp)
 20039f4:	10000316 	blt	r2,zero,2003a04 <_dtoa_r+0x528>
 20039f8:	e0bffb17 	ldw	r2,-20(fp)
 20039fc:	10800290 	cmplti	r2,r2,10
 2003a00:	1000011e 	bne	r2,zero,2003a08 <_dtoa_r+0x52c>
    mode = 0;
 2003a04:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 2003a08:	00800044 	movi	r2,1
 2003a0c:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 2003a10:	e0bffb17 	ldw	r2,-20(fp)
 2003a14:	10800190 	cmplti	r2,r2,6
 2003a18:	1000041e 	bne	r2,zero,2003a2c <_dtoa_r+0x550>
    {
      mode -= 4;
 2003a1c:	e0bffb17 	ldw	r2,-20(fp)
 2003a20:	10bfff04 	addi	r2,r2,-4
 2003a24:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 2003a28:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 2003a2c:	00800044 	movi	r2,1
 2003a30:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 2003a34:	00bfffc4 	movi	r2,-1
 2003a38:	e0bfd515 	stw	r2,-172(fp)
 2003a3c:	e0bfd517 	ldw	r2,-172(fp)
 2003a40:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 2003a44:	e0bffb17 	ldw	r2,-20(fp)
 2003a48:	108001a8 	cmpgeui	r2,r2,6
 2003a4c:	10002c1e 	bne	r2,zero,2003b00 <_dtoa_r+0x624>
 2003a50:	e0bffb17 	ldw	r2,-20(fp)
 2003a54:	100690ba 	slli	r3,r2,2
 2003a58:	00808034 	movhi	r2,512
 2003a5c:	108e9b04 	addi	r2,r2,14956
 2003a60:	1885883a 	add	r2,r3,r2
 2003a64:	10800017 	ldw	r2,0(r2)
 2003a68:	1000683a 	jmp	r2
 2003a6c:	02003a84 	movi	r8,234
 2003a70:	02003a84 	movi	r8,234
 2003a74:	02003a94 	movui	r8,234
 2003a78:	02003ac4 	movi	r8,235
 2003a7c:	02003a98 	cmpnei	r8,zero,234
 2003a80:	02003ac8 	cmpgei	r8,zero,235
    {
    case 0:
    case 1:
      i = 18;
 2003a84:	00800484 	movi	r2,18
 2003a88:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 2003a8c:	e0000215 	stw	zero,8(fp)
      break;
 2003a90:	00001b06 	br	2003b00 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 2003a94:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 2003a98:	e0800217 	ldw	r2,8(fp)
 2003a9c:	00800216 	blt	zero,r2,2003aa8 <_dtoa_r+0x5cc>
	ndigits = 1;
 2003aa0:	00800044 	movi	r2,1
 2003aa4:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 2003aa8:	e0800217 	ldw	r2,8(fp)
 2003aac:	e0bfd215 	stw	r2,-184(fp)
 2003ab0:	e0bfd217 	ldw	r2,-184(fp)
 2003ab4:	e0bfd515 	stw	r2,-172(fp)
 2003ab8:	e0bfd517 	ldw	r2,-172(fp)
 2003abc:	e0bfd415 	stw	r2,-176(fp)
      break;
 2003ac0:	00000f06 	br	2003b00 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 2003ac4:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 2003ac8:	e0c00217 	ldw	r3,8(fp)
 2003acc:	e0bfd717 	ldw	r2,-164(fp)
 2003ad0:	1885883a 	add	r2,r3,r2
 2003ad4:	10800044 	addi	r2,r2,1
 2003ad8:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 2003adc:	e0bfd217 	ldw	r2,-184(fp)
 2003ae0:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 2003ae4:	e0bfd217 	ldw	r2,-184(fp)
 2003ae8:	10bfffc4 	addi	r2,r2,-1
 2003aec:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 2003af0:	e0bfd217 	ldw	r2,-184(fp)
 2003af4:	00800216 	blt	zero,r2,2003b00 <_dtoa_r+0x624>
	i = 1;
 2003af8:	00800044 	movi	r2,1
 2003afc:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 2003b00:	00800104 	movi	r2,4
 2003b04:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2003b08:	e0bff817 	ldw	r2,-32(fp)
 2003b0c:	10001115 	stw	zero,68(r2)
 2003b10:	00000806 	br	2003b34 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 2003b14:	e0bff817 	ldw	r2,-32(fp)
 2003b18:	10801117 	ldw	r2,68(r2)
 2003b1c:	10c00044 	addi	r3,r2,1
 2003b20:	e0bff817 	ldw	r2,-32(fp)
 2003b24:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 2003b28:	e0bfd617 	ldw	r2,-168(fp)
 2003b2c:	1085883a 	add	r2,r2,r2
 2003b30:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2003b34:	e0bfd617 	ldw	r2,-168(fp)
 2003b38:	10800504 	addi	r2,r2,20
 2003b3c:	e0ffd217 	ldw	r3,-184(fp)
 2003b40:	18bff42e 	bgeu	r3,r2,2003b14 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 2003b44:	e0bff817 	ldw	r2,-32(fp)
 2003b48:	10801117 	ldw	r2,68(r2)
 2003b4c:	100b883a 	mov	r5,r2
 2003b50:	e13ff817 	ldw	r4,-32(fp)
 2003b54:	20082c40 	call	20082c4 <_Balloc>
 2003b58:	1007883a 	mov	r3,r2
 2003b5c:	e0bff817 	ldw	r2,-32(fp)
 2003b60:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 2003b64:	e0bff817 	ldw	r2,-32(fp)
 2003b68:	10801017 	ldw	r2,64(r2)
 2003b6c:	e0bfe915 	stw	r2,-92(fp)
 2003b70:	e0bfe917 	ldw	r2,-92(fp)
 2003b74:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 2003b78:	e0bfd417 	ldw	r2,-176(fp)
 2003b7c:	10021616 	blt	r2,zero,20043d8 <_dtoa_r+0xefc>
 2003b80:	e0bfd417 	ldw	r2,-176(fp)
 2003b84:	108003c8 	cmpgei	r2,r2,15
 2003b88:	1002131e 	bne	r2,zero,20043d8 <_dtoa_r+0xefc>
 2003b8c:	e0bfdf17 	ldw	r2,-132(fp)
 2003b90:	10021126 	beq	r2,zero,20043d8 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 2003b94:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 2003b98:	e0bff217 	ldw	r2,-56(fp)
 2003b9c:	e0fff317 	ldw	r3,-52(fp)
 2003ba0:	e0bff415 	stw	r2,-48(fp)
 2003ba4:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 2003ba8:	e0bfd717 	ldw	r2,-164(fp)
 2003bac:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 2003bb0:	e0bfd417 	ldw	r2,-176(fp)
 2003bb4:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 2003bb8:	00800084 	movi	r2,2
 2003bbc:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 2003bc0:	e0bfd717 	ldw	r2,-164(fp)
 2003bc4:	0080540e 	bge	zero,r2,2003d18 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 2003bc8:	e0bfd717 	ldw	r2,-164(fp)
 2003bcc:	10c003cc 	andi	r3,r2,15
 2003bd0:	00808074 	movhi	r2,513
 2003bd4:	108ba104 	addi	r2,r2,11908
 2003bd8:	180690fa 	slli	r3,r3,3
 2003bdc:	10c5883a 	add	r2,r2,r3
 2003be0:	10c00017 	ldw	r3,0(r2)
 2003be4:	e0ffe515 	stw	r3,-108(fp)
 2003be8:	10800117 	ldw	r2,4(r2)
 2003bec:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 2003bf0:	e0bfd717 	ldw	r2,-164(fp)
 2003bf4:	1005d13a 	srai	r2,r2,4
 2003bf8:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 2003bfc:	e0bfd617 	ldw	r2,-168(fp)
 2003c00:	1080040c 	andi	r2,r2,16
 2003c04:	10003426 	beq	r2,zero,2003cd8 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 2003c08:	e0bfd617 	ldw	r2,-168(fp)
 2003c0c:	108003cc 	andi	r2,r2,15
 2003c10:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 2003c14:	e0bff217 	ldw	r2,-56(fp)
 2003c18:	e0fff317 	ldw	r3,-52(fp)
 2003c1c:	01808074 	movhi	r6,513
 2003c20:	318bd304 	addi	r6,r6,12108
 2003c24:	31000817 	ldw	r4,32(r6)
 2003c28:	31400917 	ldw	r5,36(r6)
 2003c2c:	200d883a 	mov	r6,r4
 2003c30:	280f883a 	mov	r7,r5
 2003c34:	1009883a 	mov	r4,r2
 2003c38:	180b883a 	mov	r5,r3
 2003c3c:	200e4e80 	call	200e4e8 <__divdf3>
 2003c40:	1009883a 	mov	r4,r2
 2003c44:	180b883a 	mov	r5,r3
 2003c48:	2005883a 	mov	r2,r4
 2003c4c:	2807883a 	mov	r3,r5
 2003c50:	e0bff215 	stw	r2,-56(fp)
 2003c54:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 2003c58:	e0bfd317 	ldw	r2,-180(fp)
 2003c5c:	10800044 	addi	r2,r2,1
 2003c60:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 2003c64:	00001c06 	br	2003cd8 <_dtoa_r+0x7fc>
	    if (j & 1)
 2003c68:	e0bfd617 	ldw	r2,-168(fp)
 2003c6c:	1080004c 	andi	r2,r2,1
 2003c70:	10001326 	beq	r2,zero,2003cc0 <_dtoa_r+0x7e4>
	      {
		ieps++;
 2003c74:	e0bfd317 	ldw	r2,-180(fp)
 2003c78:	10800044 	addi	r2,r2,1
 2003c7c:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 2003c80:	00808074 	movhi	r2,513
 2003c84:	108bd304 	addi	r2,r2,12108
 2003c88:	e0ffd217 	ldw	r3,-184(fp)
 2003c8c:	180690fa 	slli	r3,r3,3
 2003c90:	10c9883a 	add	r4,r2,r3
 2003c94:	20800017 	ldw	r2,0(r4)
 2003c98:	20c00117 	ldw	r3,4(r4)
 2003c9c:	100d883a 	mov	r6,r2
 2003ca0:	180f883a 	mov	r7,r3
 2003ca4:	e13fe517 	ldw	r4,-108(fp)
 2003ca8:	e17fe617 	ldw	r5,-104(fp)
 2003cac:	200ef340 	call	200ef34 <__muldf3>
 2003cb0:	1009883a 	mov	r4,r2
 2003cb4:	180b883a 	mov	r5,r3
 2003cb8:	e13fe515 	stw	r4,-108(fp)
 2003cbc:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 2003cc0:	e0bfd617 	ldw	r2,-168(fp)
 2003cc4:	1005d07a 	srai	r2,r2,1
 2003cc8:	e0bfd615 	stw	r2,-168(fp)
 2003ccc:	e0bfd217 	ldw	r2,-184(fp)
 2003cd0:	10800044 	addi	r2,r2,1
 2003cd4:	e0bfd215 	stw	r2,-184(fp)
 2003cd8:	e0bfd617 	ldw	r2,-168(fp)
 2003cdc:	103fe21e 	bne	r2,zero,2003c68 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 2003ce0:	e0bff217 	ldw	r2,-56(fp)
 2003ce4:	e0fff317 	ldw	r3,-52(fp)
 2003ce8:	e1bfe517 	ldw	r6,-108(fp)
 2003cec:	e1ffe617 	ldw	r7,-104(fp)
 2003cf0:	1009883a 	mov	r4,r2
 2003cf4:	180b883a 	mov	r5,r3
 2003cf8:	200e4e80 	call	200e4e8 <__divdf3>
 2003cfc:	1009883a 	mov	r4,r2
 2003d00:	180b883a 	mov	r5,r3
 2003d04:	2005883a 	mov	r2,r4
 2003d08:	2807883a 	mov	r3,r5
 2003d0c:	e0bff215 	stw	r2,-56(fp)
 2003d10:	e0fff315 	stw	r3,-52(fp)
 2003d14:	00004006 	br	2003e18 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 2003d18:	e0bfd717 	ldw	r2,-164(fp)
 2003d1c:	0085c83a 	sub	r2,zero,r2
 2003d20:	e0bfec15 	stw	r2,-80(fp)
 2003d24:	e0bfec17 	ldw	r2,-80(fp)
 2003d28:	10003b26 	beq	r2,zero,2003e18 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 2003d2c:	e0bff217 	ldw	r2,-56(fp)
 2003d30:	e0fff317 	ldw	r3,-52(fp)
 2003d34:	e13fec17 	ldw	r4,-80(fp)
 2003d38:	214003cc 	andi	r5,r4,15
 2003d3c:	01008074 	movhi	r4,513
 2003d40:	210ba104 	addi	r4,r4,11908
 2003d44:	280a90fa 	slli	r5,r5,3
 2003d48:	214d883a 	add	r6,r4,r5
 2003d4c:	31000017 	ldw	r4,0(r6)
 2003d50:	31400117 	ldw	r5,4(r6)
 2003d54:	200d883a 	mov	r6,r4
 2003d58:	280f883a 	mov	r7,r5
 2003d5c:	1009883a 	mov	r4,r2
 2003d60:	180b883a 	mov	r5,r3
 2003d64:	200ef340 	call	200ef34 <__muldf3>
 2003d68:	1009883a 	mov	r4,r2
 2003d6c:	180b883a 	mov	r5,r3
 2003d70:	2005883a 	mov	r2,r4
 2003d74:	2807883a 	mov	r3,r5
 2003d78:	e0bff215 	stw	r2,-56(fp)
 2003d7c:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 2003d80:	e0bfec17 	ldw	r2,-80(fp)
 2003d84:	1005d13a 	srai	r2,r2,4
 2003d88:	e0bfd615 	stw	r2,-168(fp)
 2003d8c:	00002006 	br	2003e10 <_dtoa_r+0x934>
	    if (j & 1)
 2003d90:	e0bfd617 	ldw	r2,-168(fp)
 2003d94:	1080004c 	andi	r2,r2,1
 2003d98:	10001726 	beq	r2,zero,2003df8 <_dtoa_r+0x91c>
	      {
		ieps++;
 2003d9c:	e0bfd317 	ldw	r2,-180(fp)
 2003da0:	10800044 	addi	r2,r2,1
 2003da4:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 2003da8:	e0bff217 	ldw	r2,-56(fp)
 2003dac:	e0fff317 	ldw	r3,-52(fp)
 2003db0:	01008074 	movhi	r4,513
 2003db4:	210bd304 	addi	r4,r4,12108
 2003db8:	e17fd217 	ldw	r5,-184(fp)
 2003dbc:	280a90fa 	slli	r5,r5,3
 2003dc0:	214d883a 	add	r6,r4,r5
 2003dc4:	31000017 	ldw	r4,0(r6)
 2003dc8:	31400117 	ldw	r5,4(r6)
 2003dcc:	200d883a 	mov	r6,r4
 2003dd0:	280f883a 	mov	r7,r5
 2003dd4:	1009883a 	mov	r4,r2
 2003dd8:	180b883a 	mov	r5,r3
 2003ddc:	200ef340 	call	200ef34 <__muldf3>
 2003de0:	1009883a 	mov	r4,r2
 2003de4:	180b883a 	mov	r5,r3
 2003de8:	2005883a 	mov	r2,r4
 2003dec:	2807883a 	mov	r3,r5
 2003df0:	e0bff215 	stw	r2,-56(fp)
 2003df4:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 2003df8:	e0bfd617 	ldw	r2,-168(fp)
 2003dfc:	1005d07a 	srai	r2,r2,1
 2003e00:	e0bfd615 	stw	r2,-168(fp)
 2003e04:	e0bfd217 	ldw	r2,-184(fp)
 2003e08:	10800044 	addi	r2,r2,1
 2003e0c:	e0bfd215 	stw	r2,-184(fp)
 2003e10:	e0bfd617 	ldw	r2,-168(fp)
 2003e14:	103fde1e 	bne	r2,zero,2003d90 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 2003e18:	e0bfd817 	ldw	r2,-160(fp)
 2003e1c:	10002126 	beq	r2,zero,2003ea4 <_dtoa_r+0x9c8>
 2003e20:	e0bff217 	ldw	r2,-56(fp)
 2003e24:	e0fff317 	ldw	r3,-52(fp)
 2003e28:	000d883a 	mov	r6,zero
 2003e2c:	01cffc34 	movhi	r7,16368
 2003e30:	1009883a 	mov	r4,r2
 2003e34:	180b883a 	mov	r5,r3
 2003e38:	20004e80 	call	20004e8 <__ledf2>
 2003e3c:	1000190e 	bge	r2,zero,2003ea4 <_dtoa_r+0x9c8>
 2003e40:	e0bfd417 	ldw	r2,-176(fp)
 2003e44:	0080170e 	bge	zero,r2,2003ea4 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 2003e48:	e0bfd517 	ldw	r2,-172(fp)
 2003e4c:	0081550e 	bge	zero,r2,20043a4 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 2003e50:	e0bfd517 	ldw	r2,-172(fp)
 2003e54:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 2003e58:	e0bfd717 	ldw	r2,-164(fp)
 2003e5c:	10bfffc4 	addi	r2,r2,-1
 2003e60:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 2003e64:	e0bff217 	ldw	r2,-56(fp)
 2003e68:	e0fff317 	ldw	r3,-52(fp)
 2003e6c:	000d883a 	mov	r6,zero
 2003e70:	01d00934 	movhi	r7,16420
 2003e74:	1009883a 	mov	r4,r2
 2003e78:	180b883a 	mov	r5,r3
 2003e7c:	200ef340 	call	200ef34 <__muldf3>
 2003e80:	1009883a 	mov	r4,r2
 2003e84:	180b883a 	mov	r5,r3
 2003e88:	2005883a 	mov	r2,r4
 2003e8c:	2807883a 	mov	r3,r5
 2003e90:	e0bff215 	stw	r2,-56(fp)
 2003e94:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 2003e98:	e0bfd317 	ldw	r2,-180(fp)
 2003e9c:	10800044 	addi	r2,r2,1
 2003ea0:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 2003ea4:	e13fd317 	ldw	r4,-180(fp)
 2003ea8:	20005dc0 	call	20005dc <__floatsidf>
 2003eac:	1011883a 	mov	r8,r2
 2003eb0:	1813883a 	mov	r9,r3
 2003eb4:	e0bff217 	ldw	r2,-56(fp)
 2003eb8:	e0fff317 	ldw	r3,-52(fp)
 2003ebc:	100d883a 	mov	r6,r2
 2003ec0:	180f883a 	mov	r7,r3
 2003ec4:	4009883a 	mov	r4,r8
 2003ec8:	480b883a 	mov	r5,r9
 2003ecc:	200ef340 	call	200ef34 <__muldf3>
 2003ed0:	1009883a 	mov	r4,r2
 2003ed4:	180b883a 	mov	r5,r3
 2003ed8:	2005883a 	mov	r2,r4
 2003edc:	2807883a 	mov	r3,r5
 2003ee0:	000d883a 	mov	r6,zero
 2003ee4:	01d00734 	movhi	r7,16412
 2003ee8:	1009883a 	mov	r4,r2
 2003eec:	180b883a 	mov	r5,r3
 2003ef0:	200dc3c0 	call	200dc3c <__adddf3>
 2003ef4:	1009883a 	mov	r4,r2
 2003ef8:	180b883a 	mov	r5,r3
 2003efc:	2005883a 	mov	r2,r4
 2003f00:	2807883a 	mov	r3,r5
 2003f04:	e0bff615 	stw	r2,-40(fp)
 2003f08:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 2003f0c:	e0fff717 	ldw	r3,-36(fp)
 2003f10:	00bf3034 	movhi	r2,64704
 2003f14:	1885883a 	add	r2,r3,r2
 2003f18:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 2003f1c:	e0bfd417 	ldw	r2,-176(fp)
 2003f20:	1000271e 	bne	r2,zero,2003fc0 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 2003f24:	e03fe315 	stw	zero,-116(fp)
 2003f28:	e0bfe317 	ldw	r2,-116(fp)
 2003f2c:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 2003f30:	e0bff217 	ldw	r2,-56(fp)
 2003f34:	e0fff317 	ldw	r3,-52(fp)
 2003f38:	000d883a 	mov	r6,zero
 2003f3c:	01d00534 	movhi	r7,16404
 2003f40:	1009883a 	mov	r4,r2
 2003f44:	180b883a 	mov	r5,r3
 2003f48:	200f64c0 	call	200f64c <__subdf3>
 2003f4c:	1009883a 	mov	r4,r2
 2003f50:	180b883a 	mov	r5,r3
 2003f54:	2005883a 	mov	r2,r4
 2003f58:	2807883a 	mov	r3,r5
 2003f5c:	e0bff215 	stw	r2,-56(fp)
 2003f60:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 2003f64:	e0bff217 	ldw	r2,-56(fp)
 2003f68:	e0fff317 	ldw	r3,-52(fp)
 2003f6c:	e13ff617 	ldw	r4,-40(fp)
 2003f70:	e17ff717 	ldw	r5,-36(fp)
 2003f74:	200d883a 	mov	r6,r4
 2003f78:	280f883a 	mov	r7,r5
 2003f7c:	1009883a 	mov	r4,r2
 2003f80:	180b883a 	mov	r5,r3
 2003f84:	200ee580 	call	200ee58 <__gedf2>
 2003f88:	0082eb16 	blt	zero,r2,2004b38 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 2003f8c:	e23ff217 	ldw	r8,-56(fp)
 2003f90:	e27ff317 	ldw	r9,-52(fp)
 2003f94:	e0bff617 	ldw	r2,-40(fp)
 2003f98:	e0fff717 	ldw	r3,-36(fp)
 2003f9c:	1021883a 	mov	r16,r2
 2003fa0:	1c60003c 	xorhi	r17,r3,32768
 2003fa4:	800d883a 	mov	r6,r16
 2003fa8:	880f883a 	mov	r7,r17
 2003fac:	4009883a 	mov	r4,r8
 2003fb0:	480b883a 	mov	r5,r9
 2003fb4:	20004e80 	call	20004e8 <__ledf2>
 2003fb8:	1002da16 	blt	r2,zero,2004b24 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 2003fbc:	0000fc06 	br	20043b0 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 2003fc0:	e0bfd917 	ldw	r2,-156(fp)
 2003fc4:	10007a26 	beq	r2,zero,20041b0 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 2003fc8:	e0bfd417 	ldw	r2,-176(fp)
 2003fcc:	10ffffc4 	addi	r3,r2,-1
 2003fd0:	00808074 	movhi	r2,513
 2003fd4:	108ba104 	addi	r2,r2,11908
 2003fd8:	180690fa 	slli	r3,r3,3
 2003fdc:	10c9883a 	add	r4,r2,r3
 2003fe0:	20800017 	ldw	r2,0(r4)
 2003fe4:	20c00117 	ldw	r3,4(r4)
 2003fe8:	100d883a 	mov	r6,r2
 2003fec:	180f883a 	mov	r7,r3
 2003ff0:	0009883a 	mov	r4,zero
 2003ff4:	014ff834 	movhi	r5,16352
 2003ff8:	200e4e80 	call	200e4e8 <__divdf3>
 2003ffc:	1009883a 	mov	r4,r2
 2004000:	180b883a 	mov	r5,r3
 2004004:	2011883a 	mov	r8,r4
 2004008:	2813883a 	mov	r9,r5
 200400c:	e0bff617 	ldw	r2,-40(fp)
 2004010:	e0fff717 	ldw	r3,-36(fp)
 2004014:	100d883a 	mov	r6,r2
 2004018:	180f883a 	mov	r7,r3
 200401c:	4009883a 	mov	r4,r8
 2004020:	480b883a 	mov	r5,r9
 2004024:	200f64c0 	call	200f64c <__subdf3>
 2004028:	1009883a 	mov	r4,r2
 200402c:	180b883a 	mov	r5,r3
 2004030:	2005883a 	mov	r2,r4
 2004034:	2807883a 	mov	r3,r5
 2004038:	e0bff615 	stw	r2,-40(fp)
 200403c:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 2004040:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 2004044:	e0bff217 	ldw	r2,-56(fp)
 2004048:	e0fff317 	ldw	r3,-52(fp)
 200404c:	1009883a 	mov	r4,r2
 2004050:	180b883a 	mov	r5,r3
 2004054:	200ff480 	call	200ff48 <__fixdfsi>
 2004058:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200405c:	e43ff217 	ldw	r16,-56(fp)
 2004060:	e47ff317 	ldw	r17,-52(fp)
 2004064:	e13fed17 	ldw	r4,-76(fp)
 2004068:	20005dc0 	call	20005dc <__floatsidf>
 200406c:	1009883a 	mov	r4,r2
 2004070:	180b883a 	mov	r5,r3
 2004074:	200d883a 	mov	r6,r4
 2004078:	280f883a 	mov	r7,r5
 200407c:	8009883a 	mov	r4,r16
 2004080:	880b883a 	mov	r5,r17
 2004084:	200f64c0 	call	200f64c <__subdf3>
 2004088:	1009883a 	mov	r4,r2
 200408c:	180b883a 	mov	r5,r3
 2004090:	2005883a 	mov	r2,r4
 2004094:	2807883a 	mov	r3,r5
 2004098:	e0bff215 	stw	r2,-56(fp)
 200409c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 20040a0:	e0bfe717 	ldw	r2,-100(fp)
 20040a4:	10c00044 	addi	r3,r2,1
 20040a8:	e0ffe715 	stw	r3,-100(fp)
 20040ac:	e0ffed17 	ldw	r3,-76(fp)
 20040b0:	18c00c04 	addi	r3,r3,48
 20040b4:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 20040b8:	e0bff217 	ldw	r2,-56(fp)
 20040bc:	e0fff317 	ldw	r3,-52(fp)
 20040c0:	e13ff617 	ldw	r4,-40(fp)
 20040c4:	e17ff717 	ldw	r5,-36(fp)
 20040c8:	200d883a 	mov	r6,r4
 20040cc:	280f883a 	mov	r7,r5
 20040d0:	1009883a 	mov	r4,r2
 20040d4:	180b883a 	mov	r5,r3
 20040d8:	20004e80 	call	20004e8 <__ledf2>
 20040dc:	1003c416 	blt	r2,zero,2004ff0 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 20040e0:	e0bff217 	ldw	r2,-56(fp)
 20040e4:	e0fff317 	ldw	r3,-52(fp)
 20040e8:	100d883a 	mov	r6,r2
 20040ec:	180f883a 	mov	r7,r3
 20040f0:	0009883a 	mov	r4,zero
 20040f4:	014ffc34 	movhi	r5,16368
 20040f8:	200f64c0 	call	200f64c <__subdf3>
 20040fc:	1009883a 	mov	r4,r2
 2004100:	180b883a 	mov	r5,r3
 2004104:	2011883a 	mov	r8,r4
 2004108:	2813883a 	mov	r9,r5
 200410c:	e0bff617 	ldw	r2,-40(fp)
 2004110:	e0fff717 	ldw	r3,-36(fp)
 2004114:	100d883a 	mov	r6,r2
 2004118:	180f883a 	mov	r7,r3
 200411c:	4009883a 	mov	r4,r8
 2004120:	480b883a 	mov	r5,r9
 2004124:	20004e80 	call	20004e8 <__ledf2>
 2004128:	10012916 	blt	r2,zero,20045d0 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 200412c:	e0bfd217 	ldw	r2,-184(fp)
 2004130:	10800044 	addi	r2,r2,1
 2004134:	e0bfd215 	stw	r2,-184(fp)
 2004138:	e0ffd217 	ldw	r3,-184(fp)
 200413c:	e0bfd417 	ldw	r2,-176(fp)
 2004140:	18809a0e 	bge	r3,r2,20043ac <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 2004144:	e0bff617 	ldw	r2,-40(fp)
 2004148:	e0fff717 	ldw	r3,-36(fp)
 200414c:	000d883a 	mov	r6,zero
 2004150:	01d00934 	movhi	r7,16420
 2004154:	1009883a 	mov	r4,r2
 2004158:	180b883a 	mov	r5,r3
 200415c:	200ef340 	call	200ef34 <__muldf3>
 2004160:	1009883a 	mov	r4,r2
 2004164:	180b883a 	mov	r5,r3
 2004168:	2005883a 	mov	r2,r4
 200416c:	2807883a 	mov	r3,r5
 2004170:	e0bff615 	stw	r2,-40(fp)
 2004174:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 2004178:	e0bff217 	ldw	r2,-56(fp)
 200417c:	e0fff317 	ldw	r3,-52(fp)
 2004180:	000d883a 	mov	r6,zero
 2004184:	01d00934 	movhi	r7,16420
 2004188:	1009883a 	mov	r4,r2
 200418c:	180b883a 	mov	r5,r3
 2004190:	200ef340 	call	200ef34 <__muldf3>
 2004194:	1009883a 	mov	r4,r2
 2004198:	180b883a 	mov	r5,r3
 200419c:	2005883a 	mov	r2,r4
 20041a0:	2807883a 	mov	r3,r5
 20041a4:	e0bff215 	stw	r2,-56(fp)
 20041a8:	e0fff315 	stw	r3,-52(fp)
	    }
 20041ac:	003fa506 	br	2004044 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 20041b0:	e0bff617 	ldw	r2,-40(fp)
 20041b4:	e0fff717 	ldw	r3,-36(fp)
 20041b8:	e13fd417 	ldw	r4,-176(fp)
 20041bc:	217fffc4 	addi	r5,r4,-1
 20041c0:	01008074 	movhi	r4,513
 20041c4:	210ba104 	addi	r4,r4,11908
 20041c8:	280a90fa 	slli	r5,r5,3
 20041cc:	214d883a 	add	r6,r4,r5
 20041d0:	31000017 	ldw	r4,0(r6)
 20041d4:	31400117 	ldw	r5,4(r6)
 20041d8:	200d883a 	mov	r6,r4
 20041dc:	280f883a 	mov	r7,r5
 20041e0:	1009883a 	mov	r4,r2
 20041e4:	180b883a 	mov	r5,r3
 20041e8:	200ef340 	call	200ef34 <__muldf3>
 20041ec:	1009883a 	mov	r4,r2
 20041f0:	180b883a 	mov	r5,r3
 20041f4:	2005883a 	mov	r2,r4
 20041f8:	2807883a 	mov	r3,r5
 20041fc:	e0bff615 	stw	r2,-40(fp)
 2004200:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 2004204:	00800044 	movi	r2,1
 2004208:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 200420c:	e0bff217 	ldw	r2,-56(fp)
 2004210:	e0fff317 	ldw	r3,-52(fp)
 2004214:	1009883a 	mov	r4,r2
 2004218:	180b883a 	mov	r5,r3
 200421c:	200ff480 	call	200ff48 <__fixdfsi>
 2004220:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 2004224:	e43ff217 	ldw	r16,-56(fp)
 2004228:	e47ff317 	ldw	r17,-52(fp)
 200422c:	e13fed17 	ldw	r4,-76(fp)
 2004230:	20005dc0 	call	20005dc <__floatsidf>
 2004234:	1009883a 	mov	r4,r2
 2004238:	180b883a 	mov	r5,r3
 200423c:	200d883a 	mov	r6,r4
 2004240:	280f883a 	mov	r7,r5
 2004244:	8009883a 	mov	r4,r16
 2004248:	880b883a 	mov	r5,r17
 200424c:	200f64c0 	call	200f64c <__subdf3>
 2004250:	1009883a 	mov	r4,r2
 2004254:	180b883a 	mov	r5,r3
 2004258:	2005883a 	mov	r2,r4
 200425c:	2807883a 	mov	r3,r5
 2004260:	e0bff215 	stw	r2,-56(fp)
 2004264:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 2004268:	e0bfe717 	ldw	r2,-100(fp)
 200426c:	10c00044 	addi	r3,r2,1
 2004270:	e0ffe715 	stw	r3,-100(fp)
 2004274:	e0ffed17 	ldw	r3,-76(fp)
 2004278:	18c00c04 	addi	r3,r3,48
 200427c:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 2004280:	e0ffd217 	ldw	r3,-184(fp)
 2004284:	e0bfd417 	ldw	r2,-176(fp)
 2004288:	1880351e 	bne	r3,r2,2004360 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 200428c:	e43ff217 	ldw	r16,-56(fp)
 2004290:	e47ff317 	ldw	r17,-52(fp)
 2004294:	e0bff617 	ldw	r2,-40(fp)
 2004298:	e0fff717 	ldw	r3,-36(fp)
 200429c:	000d883a 	mov	r6,zero
 20042a0:	01cff834 	movhi	r7,16352
 20042a4:	1009883a 	mov	r4,r2
 20042a8:	180b883a 	mov	r5,r3
 20042ac:	200dc3c0 	call	200dc3c <__adddf3>
 20042b0:	1009883a 	mov	r4,r2
 20042b4:	180b883a 	mov	r5,r3
 20042b8:	2005883a 	mov	r2,r4
 20042bc:	2807883a 	mov	r3,r5
 20042c0:	100d883a 	mov	r6,r2
 20042c4:	180f883a 	mov	r7,r3
 20042c8:	8009883a 	mov	r4,r16
 20042cc:	880b883a 	mov	r5,r17
 20042d0:	200ee580 	call	200ee58 <__gedf2>
 20042d4:	0080c016 	blt	zero,r2,20045d8 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 20042d8:	e43ff217 	ldw	r16,-56(fp)
 20042dc:	e47ff317 	ldw	r17,-52(fp)
 20042e0:	e0bff617 	ldw	r2,-40(fp)
 20042e4:	e0fff717 	ldw	r3,-36(fp)
 20042e8:	100d883a 	mov	r6,r2
 20042ec:	180f883a 	mov	r7,r3
 20042f0:	0009883a 	mov	r4,zero
 20042f4:	014ff834 	movhi	r5,16352
 20042f8:	200f64c0 	call	200f64c <__subdf3>
 20042fc:	1009883a 	mov	r4,r2
 2004300:	180b883a 	mov	r5,r3
 2004304:	2005883a 	mov	r2,r4
 2004308:	2807883a 	mov	r3,r5
 200430c:	100d883a 	mov	r6,r2
 2004310:	180f883a 	mov	r7,r3
 2004314:	8009883a 	mov	r4,r16
 2004318:	880b883a 	mov	r5,r17
 200431c:	20004e80 	call	20004e8 <__ledf2>
 2004320:	10000116 	blt	r2,zero,2004328 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 2004324:	00002206 	br	20043b0 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 2004328:	e0bfe717 	ldw	r2,-100(fp)
 200432c:	10bfffc4 	addi	r2,r2,-1
 2004330:	e0bfe715 	stw	r2,-100(fp)
 2004334:	e0bfe717 	ldw	r2,-100(fp)
 2004338:	10800003 	ldbu	r2,0(r2)
 200433c:	10803fcc 	andi	r2,r2,255
 2004340:	1080201c 	xori	r2,r2,128
 2004344:	10bfe004 	addi	r2,r2,-128
 2004348:	10800c20 	cmpeqi	r2,r2,48
 200434c:	103ff61e 	bne	r2,zero,2004328 <_dtoa_r+0xe4c>
		      s++;
 2004350:	e0bfe717 	ldw	r2,-100(fp)
 2004354:	10800044 	addi	r2,r2,1
 2004358:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 200435c:	00032506 	br	2004ff4 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 2004360:	e0bfd217 	ldw	r2,-184(fp)
 2004364:	10800044 	addi	r2,r2,1
 2004368:	e0bfd215 	stw	r2,-184(fp)
 200436c:	e0bff217 	ldw	r2,-56(fp)
 2004370:	e0fff317 	ldw	r3,-52(fp)
 2004374:	000d883a 	mov	r6,zero
 2004378:	01d00934 	movhi	r7,16420
 200437c:	1009883a 	mov	r4,r2
 2004380:	180b883a 	mov	r5,r3
 2004384:	200ef340 	call	200ef34 <__muldf3>
 2004388:	1009883a 	mov	r4,r2
 200438c:	180b883a 	mov	r5,r3
 2004390:	2005883a 	mov	r2,r4
 2004394:	2807883a 	mov	r3,r5
 2004398:	e0bff215 	stw	r2,-56(fp)
 200439c:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 20043a0:	003f9a06 	br	200420c <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 20043a4:	0001883a 	nop
 20043a8:	00000106 	br	20043b0 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 20043ac:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 20043b0:	e0bfe917 	ldw	r2,-92(fp)
 20043b4:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 20043b8:	e0bff417 	ldw	r2,-48(fp)
 20043bc:	e0fff517 	ldw	r3,-44(fp)
 20043c0:	e0bff215 	stw	r2,-56(fp)
 20043c4:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 20043c8:	e0bfea17 	ldw	r2,-88(fp)
 20043cc:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 20043d0:	e0bfeb17 	ldw	r2,-84(fp)
 20043d4:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 20043d8:	e0bff117 	ldw	r2,-60(fp)
 20043dc:	1000b816 	blt	r2,zero,20046c0 <_dtoa_r+0x11e4>
 20043e0:	e0bfd717 	ldw	r2,-164(fp)
 20043e4:	108003c8 	cmpgei	r2,r2,15
 20043e8:	1000b51e 	bne	r2,zero,20046c0 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 20043ec:	00808074 	movhi	r2,513
 20043f0:	108ba104 	addi	r2,r2,11908
 20043f4:	e0ffd717 	ldw	r3,-164(fp)
 20043f8:	180690fa 	slli	r3,r3,3
 20043fc:	10c5883a 	add	r2,r2,r3
 2004400:	10c00017 	ldw	r3,0(r2)
 2004404:	e0ffe515 	stw	r3,-108(fp)
 2004408:	10800117 	ldw	r2,4(r2)
 200440c:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 2004410:	e0800217 	ldw	r2,8(fp)
 2004414:	1000190e 	bge	r2,zero,200447c <_dtoa_r+0xfa0>
 2004418:	e0bfd417 	ldw	r2,-176(fp)
 200441c:	00801716 	blt	zero,r2,200447c <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 2004420:	e03fe315 	stw	zero,-116(fp)
 2004424:	e0bfe317 	ldw	r2,-116(fp)
 2004428:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 200442c:	e0bfd417 	ldw	r2,-176(fp)
 2004430:	1001bd16 	blt	r2,zero,2004b28 <_dtoa_r+0x164c>
 2004434:	e43ff217 	ldw	r16,-56(fp)
 2004438:	e47ff317 	ldw	r17,-52(fp)
 200443c:	000d883a 	mov	r6,zero
 2004440:	01d00534 	movhi	r7,16404
 2004444:	e13fe517 	ldw	r4,-108(fp)
 2004448:	e17fe617 	ldw	r5,-104(fp)
 200444c:	200ef340 	call	200ef34 <__muldf3>
 2004450:	1009883a 	mov	r4,r2
 2004454:	180b883a 	mov	r5,r3
 2004458:	2005883a 	mov	r2,r4
 200445c:	2807883a 	mov	r3,r5
 2004460:	100d883a 	mov	r6,r2
 2004464:	180f883a 	mov	r7,r3
 2004468:	8009883a 	mov	r4,r16
 200446c:	880b883a 	mov	r5,r17
 2004470:	20004e80 	call	20004e8 <__ledf2>
 2004474:	0081ac0e 	bge	zero,r2,2004b28 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 2004478:	0001b006 	br	2004b3c <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 200447c:	00800044 	movi	r2,1
 2004480:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 2004484:	e0bff217 	ldw	r2,-56(fp)
 2004488:	e0fff317 	ldw	r3,-52(fp)
 200448c:	e1bfe517 	ldw	r6,-108(fp)
 2004490:	e1ffe617 	ldw	r7,-104(fp)
 2004494:	1009883a 	mov	r4,r2
 2004498:	180b883a 	mov	r5,r3
 200449c:	200e4e80 	call	200e4e8 <__divdf3>
 20044a0:	1009883a 	mov	r4,r2
 20044a4:	180b883a 	mov	r5,r3
 20044a8:	2005883a 	mov	r2,r4
 20044ac:	2807883a 	mov	r3,r5
 20044b0:	1009883a 	mov	r4,r2
 20044b4:	180b883a 	mov	r5,r3
 20044b8:	200ff480 	call	200ff48 <__fixdfsi>
 20044bc:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 20044c0:	e43ff217 	ldw	r16,-56(fp)
 20044c4:	e47ff317 	ldw	r17,-52(fp)
 20044c8:	e13fed17 	ldw	r4,-76(fp)
 20044cc:	20005dc0 	call	20005dc <__floatsidf>
 20044d0:	1011883a 	mov	r8,r2
 20044d4:	1813883a 	mov	r9,r3
 20044d8:	e1bfe517 	ldw	r6,-108(fp)
 20044dc:	e1ffe617 	ldw	r7,-104(fp)
 20044e0:	4009883a 	mov	r4,r8
 20044e4:	480b883a 	mov	r5,r9
 20044e8:	200ef340 	call	200ef34 <__muldf3>
 20044ec:	1009883a 	mov	r4,r2
 20044f0:	180b883a 	mov	r5,r3
 20044f4:	2005883a 	mov	r2,r4
 20044f8:	2807883a 	mov	r3,r5
 20044fc:	100d883a 	mov	r6,r2
 2004500:	180f883a 	mov	r7,r3
 2004504:	8009883a 	mov	r4,r16
 2004508:	880b883a 	mov	r5,r17
 200450c:	200f64c0 	call	200f64c <__subdf3>
 2004510:	1009883a 	mov	r4,r2
 2004514:	180b883a 	mov	r5,r3
 2004518:	2005883a 	mov	r2,r4
 200451c:	2807883a 	mov	r3,r5
 2004520:	e0bff215 	stw	r2,-56(fp)
 2004524:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 2004528:	e0bfe717 	ldw	r2,-100(fp)
 200452c:	10c00044 	addi	r3,r2,1
 2004530:	e0ffe715 	stw	r3,-100(fp)
 2004534:	e0ffed17 	ldw	r3,-76(fp)
 2004538:	18c00c04 	addi	r3,r3,48
 200453c:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2004540:	e0ffd217 	ldw	r3,-184(fp)
 2004544:	e0bfd417 	ldw	r2,-176(fp)
 2004548:	1880401e 	bne	r3,r2,200464c <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 200454c:	e0bff217 	ldw	r2,-56(fp)
 2004550:	e0fff317 	ldw	r3,-52(fp)
 2004554:	100d883a 	mov	r6,r2
 2004558:	180f883a 	mov	r7,r3
 200455c:	1009883a 	mov	r4,r2
 2004560:	180b883a 	mov	r5,r3
 2004564:	200dc3c0 	call	200dc3c <__adddf3>
 2004568:	1009883a 	mov	r4,r2
 200456c:	180b883a 	mov	r5,r3
 2004570:	2005883a 	mov	r2,r4
 2004574:	2807883a 	mov	r3,r5
 2004578:	e0bff215 	stw	r2,-56(fp)
 200457c:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 2004580:	e0bff217 	ldw	r2,-56(fp)
 2004584:	e0fff317 	ldw	r3,-52(fp)
 2004588:	e1bfe517 	ldw	r6,-108(fp)
 200458c:	e1ffe617 	ldw	r7,-104(fp)
 2004590:	1009883a 	mov	r4,r2
 2004594:	180b883a 	mov	r5,r3
 2004598:	200ee580 	call	200ee58 <__gedf2>
 200459c:	00801a16 	blt	zero,r2,2004608 <_dtoa_r+0x112c>
 20045a0:	e0bff217 	ldw	r2,-56(fp)
 20045a4:	e0fff317 	ldw	r3,-52(fp)
 20045a8:	e1bfe517 	ldw	r6,-108(fp)
 20045ac:	e1ffe617 	ldw	r7,-104(fp)
 20045b0:	1009883a 	mov	r4,r2
 20045b4:	180b883a 	mov	r5,r3
 20045b8:	200edd00 	call	200edd0 <__eqdf2>
 20045bc:	10003c1e 	bne	r2,zero,20046b0 <_dtoa_r+0x11d4>
 20045c0:	e0bfed17 	ldw	r2,-76(fp)
 20045c4:	1080004c 	andi	r2,r2,1
 20045c8:	10003926 	beq	r2,zero,20046b0 <_dtoa_r+0x11d4>
 20045cc:	00000e06 	br	2004608 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 20045d0:	0001883a 	nop
 20045d4:	00000c06 	br	2004608 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 20045d8:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 20045dc:	00000a06 	br	2004608 <_dtoa_r+0x112c>
		    if (s == s0)
 20045e0:	e0ffe717 	ldw	r3,-100(fp)
 20045e4:	e0bfe917 	ldw	r2,-92(fp)
 20045e8:	1880071e 	bne	r3,r2,2004608 <_dtoa_r+0x112c>
		      {
			k++;
 20045ec:	e0bfd717 	ldw	r2,-164(fp)
 20045f0:	10800044 	addi	r2,r2,1
 20045f4:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 20045f8:	e0bfe717 	ldw	r2,-100(fp)
 20045fc:	00c00c04 	movi	r3,48
 2004600:	10c00005 	stb	r3,0(r2)
			break;
 2004604:	00000a06 	br	2004630 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2004608:	e0bfe717 	ldw	r2,-100(fp)
 200460c:	10bfffc4 	addi	r2,r2,-1
 2004610:	e0bfe715 	stw	r2,-100(fp)
 2004614:	e0bfe717 	ldw	r2,-100(fp)
 2004618:	10800003 	ldbu	r2,0(r2)
 200461c:	10803fcc 	andi	r2,r2,255
 2004620:	1080201c 	xori	r2,r2,128
 2004624:	10bfe004 	addi	r2,r2,-128
 2004628:	10800e60 	cmpeqi	r2,r2,57
 200462c:	103fec1e 	bne	r2,zero,20045e0 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 2004630:	e0bfe717 	ldw	r2,-100(fp)
 2004634:	10c00044 	addi	r3,r2,1
 2004638:	e0ffe715 	stw	r3,-100(fp)
 200463c:	10c00003 	ldbu	r3,0(r2)
 2004640:	18c00044 	addi	r3,r3,1
 2004644:	10c00005 	stb	r3,0(r2)
		}
	      break;
 2004648:	00001906 	br	20046b0 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 200464c:	e0bff217 	ldw	r2,-56(fp)
 2004650:	e0fff317 	ldw	r3,-52(fp)
 2004654:	000d883a 	mov	r6,zero
 2004658:	01d00934 	movhi	r7,16420
 200465c:	1009883a 	mov	r4,r2
 2004660:	180b883a 	mov	r5,r3
 2004664:	200ef340 	call	200ef34 <__muldf3>
 2004668:	1009883a 	mov	r4,r2
 200466c:	180b883a 	mov	r5,r3
 2004670:	2005883a 	mov	r2,r4
 2004674:	2807883a 	mov	r3,r5
 2004678:	e0bff215 	stw	r2,-56(fp)
 200467c:	e0fff315 	stw	r3,-52(fp)
 2004680:	e0bff217 	ldw	r2,-56(fp)
 2004684:	e0fff317 	ldw	r3,-52(fp)
 2004688:	000d883a 	mov	r6,zero
 200468c:	000f883a 	mov	r7,zero
 2004690:	1009883a 	mov	r4,r2
 2004694:	180b883a 	mov	r5,r3
 2004698:	200edd00 	call	200edd0 <__eqdf2>
 200469c:	10000626 	beq	r2,zero,20046b8 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 20046a0:	e0bfd217 	ldw	r2,-184(fp)
 20046a4:	10800044 	addi	r2,r2,1
 20046a8:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 20046ac:	003f7506 	br	2004484 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 20046b0:	0001883a 	nop
 20046b4:	00024f06 	br	2004ff4 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 20046b8:	0001883a 	nop
	}
      goto ret1;
 20046bc:	00024d06 	br	2004ff4 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 20046c0:	e0bfcf17 	ldw	r2,-196(fp)
 20046c4:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 20046c8:	e0bfd017 	ldw	r2,-192(fp)
 20046cc:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 20046d0:	e03fe215 	stw	zero,-120(fp)
 20046d4:	e0bfe217 	ldw	r2,-120(fp)
 20046d8:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 20046dc:	e0bfd917 	ldw	r2,-156(fp)
 20046e0:	10003a26 	beq	r2,zero,20047cc <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 20046e4:	e0bffb17 	ldw	r2,-20(fp)
 20046e8:	10800088 	cmpgei	r2,r2,2
 20046ec:	10000a1e 	bne	r2,zero,2004718 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 20046f0:	e0bfe017 	ldw	r2,-128(fp)
 20046f4:	10000326 	beq	r2,zero,2004704 <_dtoa_r+0x1228>
 20046f8:	e0bff117 	ldw	r2,-60(fp)
 20046fc:	10810cc4 	addi	r2,r2,1075
 2004700:	00000306 	br	2004710 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 2004704:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2004708:	00c00d84 	movi	r3,54
 200470c:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 2004710:	e0bfd215 	stw	r2,-184(fp)
 2004714:	00002106 	br	200479c <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 2004718:	e0bfd417 	ldw	r2,-176(fp)
 200471c:	10bfffc4 	addi	r2,r2,-1
 2004720:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 2004724:	e0ffdb17 	ldw	r3,-148(fp)
 2004728:	e0bfd617 	ldw	r2,-168(fp)
 200472c:	18800516 	blt	r3,r2,2004744 <_dtoa_r+0x1268>
	    m5 -= j;
 2004730:	e0ffdb17 	ldw	r3,-148(fp)
 2004734:	e0bfd617 	ldw	r2,-168(fp)
 2004738:	1885c83a 	sub	r2,r3,r2
 200473c:	e0bfdb15 	stw	r2,-148(fp)
 2004740:	00000d06 	br	2004778 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 2004744:	e0ffd617 	ldw	r3,-168(fp)
 2004748:	e0bfdb17 	ldw	r2,-148(fp)
 200474c:	1885c83a 	sub	r2,r3,r2
 2004750:	e0bfd615 	stw	r2,-168(fp)
 2004754:	e0bfd617 	ldw	r2,-168(fp)
 2004758:	e0ffdd17 	ldw	r3,-140(fp)
 200475c:	1885883a 	add	r2,r3,r2
 2004760:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 2004764:	e0ffd017 	ldw	r3,-192(fp)
 2004768:	e0bfd617 	ldw	r2,-168(fp)
 200476c:	1885883a 	add	r2,r3,r2
 2004770:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 2004774:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 2004778:	e0bfd417 	ldw	r2,-176(fp)
 200477c:	e0bfd215 	stw	r2,-184(fp)
 2004780:	e0bfd217 	ldw	r2,-184(fp)
 2004784:	1000050e 	bge	r2,zero,200479c <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 2004788:	e0ffda17 	ldw	r3,-152(fp)
 200478c:	e0bfd217 	ldw	r2,-184(fp)
 2004790:	1885c83a 	sub	r2,r3,r2
 2004794:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 2004798:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 200479c:	e0ffcf17 	ldw	r3,-196(fp)
 20047a0:	e0bfd217 	ldw	r2,-184(fp)
 20047a4:	1885883a 	add	r2,r3,r2
 20047a8:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 20047ac:	e0ffdc17 	ldw	r3,-144(fp)
 20047b0:	e0bfd217 	ldw	r2,-184(fp)
 20047b4:	1885883a 	add	r2,r3,r2
 20047b8:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 20047bc:	01400044 	movi	r5,1
 20047c0:	e13ff817 	ldw	r4,-32(fp)
 20047c4:	200890c0 	call	200890c <__i2b>
 20047c8:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 20047cc:	e0bfda17 	ldw	r2,-152(fp)
 20047d0:	0080130e 	bge	zero,r2,2004820 <_dtoa_r+0x1344>
 20047d4:	e0bfdc17 	ldw	r2,-144(fp)
 20047d8:	0080110e 	bge	zero,r2,2004820 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 20047dc:	e0ffda17 	ldw	r3,-152(fp)
 20047e0:	e0bfdc17 	ldw	r2,-144(fp)
 20047e4:	1880010e 	bge	r3,r2,20047ec <_dtoa_r+0x1310>
 20047e8:	1805883a 	mov	r2,r3
 20047ec:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 20047f0:	e0ffcf17 	ldw	r3,-196(fp)
 20047f4:	e0bfd217 	ldw	r2,-184(fp)
 20047f8:	1885c83a 	sub	r2,r3,r2
 20047fc:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 2004800:	e0ffda17 	ldw	r3,-152(fp)
 2004804:	e0bfd217 	ldw	r2,-184(fp)
 2004808:	1885c83a 	sub	r2,r3,r2
 200480c:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 2004810:	e0ffdc17 	ldw	r3,-144(fp)
 2004814:	e0bfd217 	ldw	r2,-184(fp)
 2004818:	1885c83a 	sub	r2,r3,r2
 200481c:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 2004820:	e0bfd017 	ldw	r2,-192(fp)
 2004824:	0080240e 	bge	zero,r2,20048b8 <_dtoa_r+0x13dc>
    {
      if (leftright)
 2004828:	e0bfd917 	ldw	r2,-156(fp)
 200482c:	10001d26 	beq	r2,zero,20048a4 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 2004830:	e0bfdb17 	ldw	r2,-148(fp)
 2004834:	00800f0e 	bge	zero,r2,2004874 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 2004838:	e1bfdb17 	ldw	r6,-148(fp)
 200483c:	e17fe317 	ldw	r5,-116(fp)
 2004840:	e13ff817 	ldw	r4,-32(fp)
 2004844:	2008d340 	call	2008d34 <__pow5mult>
 2004848:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 200484c:	e1bfe117 	ldw	r6,-124(fp)
 2004850:	e17fe317 	ldw	r5,-116(fp)
 2004854:	e13ff817 	ldw	r4,-32(fp)
 2004858:	20089640 	call	2008964 <__multiply>
 200485c:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 2004860:	e17fe117 	ldw	r5,-124(fp)
 2004864:	e13ff817 	ldw	r4,-32(fp)
 2004868:	20083f40 	call	20083f4 <_Bfree>
	      b = b1;
 200486c:	e0bfee17 	ldw	r2,-72(fp)
 2004870:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 2004874:	e0ffd017 	ldw	r3,-192(fp)
 2004878:	e0bfdb17 	ldw	r2,-148(fp)
 200487c:	1885c83a 	sub	r2,r3,r2
 2004880:	e0bfd615 	stw	r2,-168(fp)
 2004884:	e0bfd617 	ldw	r2,-168(fp)
 2004888:	10000b26 	beq	r2,zero,20048b8 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 200488c:	e1bfd617 	ldw	r6,-168(fp)
 2004890:	e17fe117 	ldw	r5,-124(fp)
 2004894:	e13ff817 	ldw	r4,-32(fp)
 2004898:	2008d340 	call	2008d34 <__pow5mult>
 200489c:	e0bfe115 	stw	r2,-124(fp)
 20048a0:	00000506 	br	20048b8 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 20048a4:	e1bfd017 	ldw	r6,-192(fp)
 20048a8:	e17fe117 	ldw	r5,-124(fp)
 20048ac:	e13ff817 	ldw	r4,-32(fp)
 20048b0:	2008d340 	call	2008d34 <__pow5mult>
 20048b4:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 20048b8:	01400044 	movi	r5,1
 20048bc:	e13ff817 	ldw	r4,-32(fp)
 20048c0:	200890c0 	call	200890c <__i2b>
 20048c4:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 20048c8:	e0bfdd17 	ldw	r2,-140(fp)
 20048cc:	0080050e 	bge	zero,r2,20048e4 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 20048d0:	e1bfdd17 	ldw	r6,-140(fp)
 20048d4:	e17fe417 	ldw	r5,-112(fp)
 20048d8:	e13ff817 	ldw	r4,-32(fp)
 20048dc:	2008d340 	call	2008d34 <__pow5mult>
 20048e0:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 20048e4:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 20048e8:	e0bffb17 	ldw	r2,-20(fp)
 20048ec:	10800088 	cmpgei	r2,r2,2
 20048f0:	1000121e 	bne	r2,zero,200493c <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 20048f4:	e0bff217 	ldw	r2,-56(fp)
 20048f8:	1000101e 	bne	r2,zero,200493c <_dtoa_r+0x1460>
 20048fc:	e0fff317 	ldw	r3,-52(fp)
 2004900:	00800434 	movhi	r2,16
 2004904:	10bfffc4 	addi	r2,r2,-1
 2004908:	1884703a 	and	r2,r3,r2
 200490c:	10000b1e 	bne	r2,zero,200493c <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 2004910:	e0bff317 	ldw	r2,-52(fp)
 2004914:	109ffc2c 	andhi	r2,r2,32752
 2004918:	10000826 	beq	r2,zero,200493c <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 200491c:	e0bfcf17 	ldw	r2,-196(fp)
 2004920:	10800044 	addi	r2,r2,1
 2004924:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 2004928:	e0bfdc17 	ldw	r2,-144(fp)
 200492c:	10800044 	addi	r2,r2,1
 2004930:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 2004934:	00800044 	movi	r2,1
 2004938:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 200493c:	e0bfdd17 	ldw	r2,-140(fp)
 2004940:	10000f26 	beq	r2,zero,2004980 <_dtoa_r+0x14a4>
 2004944:	e0bfe417 	ldw	r2,-112(fp)
 2004948:	10800417 	ldw	r2,16(r2)
 200494c:	10bfffc4 	addi	r2,r2,-1
 2004950:	e0ffe417 	ldw	r3,-112(fp)
 2004954:	10800144 	addi	r2,r2,5
 2004958:	1085883a 	add	r2,r2,r2
 200495c:	1085883a 	add	r2,r2,r2
 2004960:	1885883a 	add	r2,r3,r2
 2004964:	10800017 	ldw	r2,0(r2)
 2004968:	1009883a 	mov	r4,r2
 200496c:	20087900 	call	2008790 <__hi0bits>
 2004970:	1007883a 	mov	r3,r2
 2004974:	00800804 	movi	r2,32
 2004978:	10c5c83a 	sub	r2,r2,r3
 200497c:	00000106 	br	2004984 <_dtoa_r+0x14a8>
 2004980:	00800044 	movi	r2,1
 2004984:	e0ffdc17 	ldw	r3,-144(fp)
 2004988:	10c5883a 	add	r2,r2,r3
 200498c:	108007cc 	andi	r2,r2,31
 2004990:	e0bfd215 	stw	r2,-184(fp)
 2004994:	e0bfd217 	ldw	r2,-184(fp)
 2004998:	10000426 	beq	r2,zero,20049ac <_dtoa_r+0x14d0>
    i = 32 - i;
 200499c:	00c00804 	movi	r3,32
 20049a0:	e0bfd217 	ldw	r2,-184(fp)
 20049a4:	1885c83a 	sub	r2,r3,r2
 20049a8:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 20049ac:	e0bfd217 	ldw	r2,-184(fp)
 20049b0:	10800150 	cmplti	r2,r2,5
 20049b4:	1000101e 	bne	r2,zero,20049f8 <_dtoa_r+0x151c>
    {
      i -= 4;
 20049b8:	e0bfd217 	ldw	r2,-184(fp)
 20049bc:	10bfff04 	addi	r2,r2,-4
 20049c0:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 20049c4:	e0ffcf17 	ldw	r3,-196(fp)
 20049c8:	e0bfd217 	ldw	r2,-184(fp)
 20049cc:	1885883a 	add	r2,r3,r2
 20049d0:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 20049d4:	e0ffda17 	ldw	r3,-152(fp)
 20049d8:	e0bfd217 	ldw	r2,-184(fp)
 20049dc:	1885883a 	add	r2,r3,r2
 20049e0:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 20049e4:	e0ffdc17 	ldw	r3,-144(fp)
 20049e8:	e0bfd217 	ldw	r2,-184(fp)
 20049ec:	1885883a 	add	r2,r3,r2
 20049f0:	e0bfdc15 	stw	r2,-144(fp)
 20049f4:	00001206 	br	2004a40 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 20049f8:	e0bfd217 	ldw	r2,-184(fp)
 20049fc:	10800108 	cmpgei	r2,r2,4
 2004a00:	10000f1e 	bne	r2,zero,2004a40 <_dtoa_r+0x1564>
    {
      i += 28;
 2004a04:	e0bfd217 	ldw	r2,-184(fp)
 2004a08:	10800704 	addi	r2,r2,28
 2004a0c:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2004a10:	e0ffcf17 	ldw	r3,-196(fp)
 2004a14:	e0bfd217 	ldw	r2,-184(fp)
 2004a18:	1885883a 	add	r2,r3,r2
 2004a1c:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2004a20:	e0ffda17 	ldw	r3,-152(fp)
 2004a24:	e0bfd217 	ldw	r2,-184(fp)
 2004a28:	1885883a 	add	r2,r3,r2
 2004a2c:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2004a30:	e0ffdc17 	ldw	r3,-144(fp)
 2004a34:	e0bfd217 	ldw	r2,-184(fp)
 2004a38:	1885883a 	add	r2,r3,r2
 2004a3c:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 2004a40:	e0bfcf17 	ldw	r2,-196(fp)
 2004a44:	0080050e 	bge	zero,r2,2004a5c <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 2004a48:	e1bfcf17 	ldw	r6,-196(fp)
 2004a4c:	e17fe117 	ldw	r5,-124(fp)
 2004a50:	e13ff817 	ldw	r4,-32(fp)
 2004a54:	2008eac0 	call	2008eac <__lshift>
 2004a58:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 2004a5c:	e0bfdc17 	ldw	r2,-144(fp)
 2004a60:	0080050e 	bge	zero,r2,2004a78 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 2004a64:	e1bfdc17 	ldw	r6,-144(fp)
 2004a68:	e17fe417 	ldw	r5,-112(fp)
 2004a6c:	e13ff817 	ldw	r4,-32(fp)
 2004a70:	2008eac0 	call	2008eac <__lshift>
 2004a74:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 2004a78:	e0bfd817 	ldw	r2,-160(fp)
 2004a7c:	10001726 	beq	r2,zero,2004adc <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 2004a80:	e17fe417 	ldw	r5,-112(fp)
 2004a84:	e13fe117 	ldw	r4,-124(fp)
 2004a88:	20090a40 	call	20090a4 <__mcmp>
 2004a8c:	1000130e 	bge	r2,zero,2004adc <_dtoa_r+0x1600>
	{
	  k--;
 2004a90:	e0bfd717 	ldw	r2,-164(fp)
 2004a94:	10bfffc4 	addi	r2,r2,-1
 2004a98:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 2004a9c:	000f883a 	mov	r7,zero
 2004aa0:	01800284 	movi	r6,10
 2004aa4:	e17fe117 	ldw	r5,-124(fp)
 2004aa8:	e13ff817 	ldw	r4,-32(fp)
 2004aac:	20084700 	call	2008470 <__multadd>
 2004ab0:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 2004ab4:	e0bfd917 	ldw	r2,-156(fp)
 2004ab8:	10000626 	beq	r2,zero,2004ad4 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 2004abc:	000f883a 	mov	r7,zero
 2004ac0:	01800284 	movi	r6,10
 2004ac4:	e17fe317 	ldw	r5,-116(fp)
 2004ac8:	e13ff817 	ldw	r4,-32(fp)
 2004acc:	20084700 	call	2008470 <__multadd>
 2004ad0:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 2004ad4:	e0bfd517 	ldw	r2,-172(fp)
 2004ad8:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 2004adc:	e0bfd417 	ldw	r2,-176(fp)
 2004ae0:	00801f16 	blt	zero,r2,2004b60 <_dtoa_r+0x1684>
 2004ae4:	e0bffb17 	ldw	r2,-20(fp)
 2004ae8:	108000d0 	cmplti	r2,r2,3
 2004aec:	10001c1e 	bne	r2,zero,2004b60 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 2004af0:	e0bfd417 	ldw	r2,-176(fp)
 2004af4:	10000c16 	blt	r2,zero,2004b28 <_dtoa_r+0x164c>
 2004af8:	000f883a 	mov	r7,zero
 2004afc:	01800144 	movi	r6,5
 2004b00:	e17fe417 	ldw	r5,-112(fp)
 2004b04:	e13ff817 	ldw	r4,-32(fp)
 2004b08:	20084700 	call	2008470 <__multadd>
 2004b0c:	e0bfe415 	stw	r2,-112(fp)
 2004b10:	e17fe417 	ldw	r5,-112(fp)
 2004b14:	e13fe117 	ldw	r4,-124(fp)
 2004b18:	20090a40 	call	20090a4 <__mcmp>
 2004b1c:	00800716 	blt	zero,r2,2004b3c <_dtoa_r+0x1660>
 2004b20:	00000106 	br	2004b28 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 2004b24:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 2004b28:	e0800217 	ldw	r2,8(fp)
 2004b2c:	0084303a 	nor	r2,zero,r2
 2004b30:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 2004b34:	00011d06 	br	2004fac <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 2004b38:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 2004b3c:	e0bfe717 	ldw	r2,-100(fp)
 2004b40:	10c00044 	addi	r3,r2,1
 2004b44:	e0ffe715 	stw	r3,-100(fp)
 2004b48:	00c00c44 	movi	r3,49
 2004b4c:	10c00005 	stb	r3,0(r2)
      k++;
 2004b50:	e0bfd717 	ldw	r2,-164(fp)
 2004b54:	10800044 	addi	r2,r2,1
 2004b58:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 2004b5c:	00011306 	br	2004fac <_dtoa_r+0x1ad0>
    }
  if (leftright)
 2004b60:	e0bfd917 	ldw	r2,-156(fp)
 2004b64:	1000ba26 	beq	r2,zero,2004e50 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 2004b68:	e0bfda17 	ldw	r2,-152(fp)
 2004b6c:	0080050e 	bge	zero,r2,2004b84 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 2004b70:	e1bfda17 	ldw	r6,-152(fp)
 2004b74:	e17fe317 	ldw	r5,-116(fp)
 2004b78:	e13ff817 	ldw	r4,-32(fp)
 2004b7c:	2008eac0 	call	2008eac <__lshift>
 2004b80:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 2004b84:	e0bfe317 	ldw	r2,-116(fp)
 2004b88:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 2004b8c:	e0bfde17 	ldw	r2,-136(fp)
 2004b90:	10001826 	beq	r2,zero,2004bf4 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 2004b94:	e0bfe317 	ldw	r2,-116(fp)
 2004b98:	10800117 	ldw	r2,4(r2)
 2004b9c:	100b883a 	mov	r5,r2
 2004ba0:	e13ff817 	ldw	r4,-32(fp)
 2004ba4:	20082c40 	call	20082c4 <_Balloc>
 2004ba8:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 2004bac:	e0bfe317 	ldw	r2,-116(fp)
 2004bb0:	10c00304 	addi	r3,r2,12
 2004bb4:	e0bfe217 	ldw	r2,-120(fp)
 2004bb8:	11000304 	addi	r4,r2,12
 2004bbc:	e0bfe217 	ldw	r2,-120(fp)
 2004bc0:	10800417 	ldw	r2,16(r2)
 2004bc4:	10800084 	addi	r2,r2,2
 2004bc8:	1085883a 	add	r2,r2,r2
 2004bcc:	1085883a 	add	r2,r2,r2
 2004bd0:	100d883a 	mov	r6,r2
 2004bd4:	200b883a 	mov	r5,r4
 2004bd8:	1809883a 	mov	r4,r3
 2004bdc:	2007d700 	call	2007d70 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 2004be0:	01800044 	movi	r6,1
 2004be4:	e17fe317 	ldw	r5,-116(fp)
 2004be8:	e13ff817 	ldw	r4,-32(fp)
 2004bec:	2008eac0 	call	2008eac <__lshift>
 2004bf0:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 2004bf4:	00800044 	movi	r2,1
 2004bf8:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 2004bfc:	e17fe417 	ldw	r5,-112(fp)
 2004c00:	e13fe117 	ldw	r4,-124(fp)
 2004c04:	20031280 	call	2003128 <quorem>
 2004c08:	10800c04 	addi	r2,r2,48
 2004c0c:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 2004c10:	e17fe217 	ldw	r5,-120(fp)
 2004c14:	e13fe117 	ldw	r4,-124(fp)
 2004c18:	20090a40 	call	20090a4 <__mcmp>
 2004c1c:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 2004c20:	e1bfe317 	ldw	r6,-116(fp)
 2004c24:	e17fe417 	ldw	r5,-112(fp)
 2004c28:	e13ff817 	ldw	r4,-32(fp)
 2004c2c:	20091b80 	call	20091b8 <__mdiff>
 2004c30:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 2004c34:	e0bfef17 	ldw	r2,-68(fp)
 2004c38:	10800317 	ldw	r2,12(r2)
 2004c3c:	1000041e 	bne	r2,zero,2004c50 <_dtoa_r+0x1774>
 2004c40:	e17fef17 	ldw	r5,-68(fp)
 2004c44:	e13fe117 	ldw	r4,-124(fp)
 2004c48:	20090a40 	call	20090a4 <__mcmp>
 2004c4c:	00000106 	br	2004c54 <_dtoa_r+0x1778>
 2004c50:	00800044 	movi	r2,1
 2004c54:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 2004c58:	e17fef17 	ldw	r5,-68(fp)
 2004c5c:	e13ff817 	ldw	r4,-32(fp)
 2004c60:	20083f40 	call	20083f4 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 2004c64:	e0bfec17 	ldw	r2,-80(fp)
 2004c68:	1000131e 	bne	r2,zero,2004cb8 <_dtoa_r+0x17dc>
 2004c6c:	e0bffb17 	ldw	r2,-20(fp)
 2004c70:	1000111e 	bne	r2,zero,2004cb8 <_dtoa_r+0x17dc>
 2004c74:	e0bff217 	ldw	r2,-56(fp)
 2004c78:	1080004c 	andi	r2,r2,1
 2004c7c:	10000e1e 	bne	r2,zero,2004cb8 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 2004c80:	e0bfd117 	ldw	r2,-188(fp)
 2004c84:	10800e58 	cmpnei	r2,r2,57
 2004c88:	10003726 	beq	r2,zero,2004d68 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 2004c8c:	e0bfd617 	ldw	r2,-168(fp)
 2004c90:	0080030e 	bge	zero,r2,2004ca0 <_dtoa_r+0x17c4>
		dig++;
 2004c94:	e0bfd117 	ldw	r2,-188(fp)
 2004c98:	10800044 	addi	r2,r2,1
 2004c9c:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 2004ca0:	e0bfe717 	ldw	r2,-100(fp)
 2004ca4:	10c00044 	addi	r3,r2,1
 2004ca8:	e0ffe715 	stw	r3,-100(fp)
 2004cac:	e0ffd117 	ldw	r3,-188(fp)
 2004cb0:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2004cb4:	0000bd06 	br	2004fac <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 2004cb8:	e0bfd617 	ldw	r2,-168(fp)
 2004cbc:	10000716 	blt	r2,zero,2004cdc <_dtoa_r+0x1800>
 2004cc0:	e0bfd617 	ldw	r2,-168(fp)
 2004cc4:	1000221e 	bne	r2,zero,2004d50 <_dtoa_r+0x1874>
 2004cc8:	e0bffb17 	ldw	r2,-20(fp)
 2004ccc:	1000201e 	bne	r2,zero,2004d50 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 2004cd0:	e0bff217 	ldw	r2,-56(fp)
 2004cd4:	1080004c 	andi	r2,r2,1
 2004cd8:	10001d1e 	bne	r2,zero,2004d50 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 2004cdc:	e0bfec17 	ldw	r2,-80(fp)
 2004ce0:	0080150e 	bge	zero,r2,2004d38 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 2004ce4:	01800044 	movi	r6,1
 2004ce8:	e17fe117 	ldw	r5,-124(fp)
 2004cec:	e13ff817 	ldw	r4,-32(fp)
 2004cf0:	2008eac0 	call	2008eac <__lshift>
 2004cf4:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 2004cf8:	e17fe417 	ldw	r5,-112(fp)
 2004cfc:	e13fe117 	ldw	r4,-124(fp)
 2004d00:	20090a40 	call	20090a4 <__mcmp>
 2004d04:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 2004d08:	e0bfec17 	ldw	r2,-80(fp)
 2004d0c:	00800516 	blt	zero,r2,2004d24 <_dtoa_r+0x1848>
 2004d10:	e0bfec17 	ldw	r2,-80(fp)
 2004d14:	1000081e 	bne	r2,zero,2004d38 <_dtoa_r+0x185c>
 2004d18:	e0bfd117 	ldw	r2,-188(fp)
 2004d1c:	1080004c 	andi	r2,r2,1
 2004d20:	10000526 	beq	r2,zero,2004d38 <_dtoa_r+0x185c>
		      && dig++ == '9')
 2004d24:	e0bfd117 	ldw	r2,-188(fp)
 2004d28:	10c00044 	addi	r3,r2,1
 2004d2c:	e0ffd115 	stw	r3,-188(fp)
 2004d30:	10800e58 	cmpnei	r2,r2,57
 2004d34:	10000e26 	beq	r2,zero,2004d70 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 2004d38:	e0bfe717 	ldw	r2,-100(fp)
 2004d3c:	10c00044 	addi	r3,r2,1
 2004d40:	e0ffe715 	stw	r3,-100(fp)
 2004d44:	e0ffd117 	ldw	r3,-188(fp)
 2004d48:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2004d4c:	00009706 	br	2004fac <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 2004d50:	e0bfec17 	ldw	r2,-80(fp)
 2004d54:	0080140e 	bge	zero,r2,2004da8 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 2004d58:	e0bfd117 	ldw	r2,-188(fp)
 2004d5c:	10800e58 	cmpnei	r2,r2,57
 2004d60:	10000a1e 	bne	r2,zero,2004d8c <_dtoa_r+0x18b0>
 2004d64:	00000306 	br	2004d74 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 2004d68:	0001883a 	nop
 2004d6c:	00000106 	br	2004d74 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 2004d70:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 2004d74:	e0bfe717 	ldw	r2,-100(fp)
 2004d78:	10c00044 	addi	r3,r2,1
 2004d7c:	e0ffe715 	stw	r3,-100(fp)
 2004d80:	00c00e44 	movi	r3,57
 2004d84:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 2004d88:	00005d06 	br	2004f00 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 2004d8c:	e0bfe717 	ldw	r2,-100(fp)
 2004d90:	10c00044 	addi	r3,r2,1
 2004d94:	e0ffe715 	stw	r3,-100(fp)
 2004d98:	e0ffd117 	ldw	r3,-188(fp)
 2004d9c:	18c00044 	addi	r3,r3,1
 2004da0:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2004da4:	00008106 	br	2004fac <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 2004da8:	e0bfe717 	ldw	r2,-100(fp)
 2004dac:	10c00044 	addi	r3,r2,1
 2004db0:	e0ffe715 	stw	r3,-100(fp)
 2004db4:	e0ffd117 	ldw	r3,-188(fp)
 2004db8:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2004dbc:	e0ffd217 	ldw	r3,-184(fp)
 2004dc0:	e0bfd417 	ldw	r2,-176(fp)
 2004dc4:	18803b26 	beq	r3,r2,2004eb4 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 2004dc8:	000f883a 	mov	r7,zero
 2004dcc:	01800284 	movi	r6,10
 2004dd0:	e17fe117 	ldw	r5,-124(fp)
 2004dd4:	e13ff817 	ldw	r4,-32(fp)
 2004dd8:	20084700 	call	2008470 <__multadd>
 2004ddc:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 2004de0:	e0ffe217 	ldw	r3,-120(fp)
 2004de4:	e0bfe317 	ldw	r2,-116(fp)
 2004de8:	1880091e 	bne	r3,r2,2004e10 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 2004dec:	000f883a 	mov	r7,zero
 2004df0:	01800284 	movi	r6,10
 2004df4:	e17fe317 	ldw	r5,-116(fp)
 2004df8:	e13ff817 	ldw	r4,-32(fp)
 2004dfc:	20084700 	call	2008470 <__multadd>
 2004e00:	e0bfe315 	stw	r2,-116(fp)
 2004e04:	e0bfe317 	ldw	r2,-116(fp)
 2004e08:	e0bfe215 	stw	r2,-120(fp)
 2004e0c:	00000c06 	br	2004e40 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 2004e10:	000f883a 	mov	r7,zero
 2004e14:	01800284 	movi	r6,10
 2004e18:	e17fe217 	ldw	r5,-120(fp)
 2004e1c:	e13ff817 	ldw	r4,-32(fp)
 2004e20:	20084700 	call	2008470 <__multadd>
 2004e24:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 2004e28:	000f883a 	mov	r7,zero
 2004e2c:	01800284 	movi	r6,10
 2004e30:	e17fe317 	ldw	r5,-116(fp)
 2004e34:	e13ff817 	ldw	r4,-32(fp)
 2004e38:	20084700 	call	2008470 <__multadd>
 2004e3c:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 2004e40:	e0bfd217 	ldw	r2,-184(fp)
 2004e44:	10800044 	addi	r2,r2,1
 2004e48:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 2004e4c:	003f6b06 	br	2004bfc <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 2004e50:	00800044 	movi	r2,1
 2004e54:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 2004e58:	e43fe717 	ldw	r16,-100(fp)
 2004e5c:	80800044 	addi	r2,r16,1
 2004e60:	e0bfe715 	stw	r2,-100(fp)
 2004e64:	e17fe417 	ldw	r5,-112(fp)
 2004e68:	e13fe117 	ldw	r4,-124(fp)
 2004e6c:	20031280 	call	2003128 <quorem>
 2004e70:	10800c04 	addi	r2,r2,48
 2004e74:	e0bfd115 	stw	r2,-188(fp)
 2004e78:	e0bfd117 	ldw	r2,-188(fp)
 2004e7c:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 2004e80:	e0ffd217 	ldw	r3,-184(fp)
 2004e84:	e0bfd417 	ldw	r2,-176(fp)
 2004e88:	18800c0e 	bge	r3,r2,2004ebc <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 2004e8c:	000f883a 	mov	r7,zero
 2004e90:	01800284 	movi	r6,10
 2004e94:	e17fe117 	ldw	r5,-124(fp)
 2004e98:	e13ff817 	ldw	r4,-32(fp)
 2004e9c:	20084700 	call	2008470 <__multadd>
 2004ea0:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 2004ea4:	e0bfd217 	ldw	r2,-184(fp)
 2004ea8:	10800044 	addi	r2,r2,1
 2004eac:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 2004eb0:	003fe906 	br	2004e58 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 2004eb4:	0001883a 	nop
 2004eb8:	00000106 	br	2004ec0 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 2004ebc:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 2004ec0:	01800044 	movi	r6,1
 2004ec4:	e17fe117 	ldw	r5,-124(fp)
 2004ec8:	e13ff817 	ldw	r4,-32(fp)
 2004ecc:	2008eac0 	call	2008eac <__lshift>
 2004ed0:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 2004ed4:	e17fe417 	ldw	r5,-112(fp)
 2004ed8:	e13fe117 	ldw	r4,-124(fp)
 2004edc:	20090a40 	call	20090a4 <__mcmp>
 2004ee0:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 2004ee4:	e0bfd617 	ldw	r2,-168(fp)
 2004ee8:	00801216 	blt	zero,r2,2004f34 <_dtoa_r+0x1a58>
 2004eec:	e0bfd617 	ldw	r2,-168(fp)
 2004ef0:	1000211e 	bne	r2,zero,2004f78 <_dtoa_r+0x1a9c>
 2004ef4:	e0bfd117 	ldw	r2,-188(fp)
 2004ef8:	1080004c 	andi	r2,r2,1
 2004efc:	10001e26 	beq	r2,zero,2004f78 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 2004f00:	00000c06 	br	2004f34 <_dtoa_r+0x1a58>
	if (s == s0)
 2004f04:	e0ffe717 	ldw	r3,-100(fp)
 2004f08:	e0bfe917 	ldw	r2,-92(fp)
 2004f0c:	1880091e 	bne	r3,r2,2004f34 <_dtoa_r+0x1a58>
	  {
	    k++;
 2004f10:	e0bfd717 	ldw	r2,-164(fp)
 2004f14:	10800044 	addi	r2,r2,1
 2004f18:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 2004f1c:	e0bfe717 	ldw	r2,-100(fp)
 2004f20:	10c00044 	addi	r3,r2,1
 2004f24:	e0ffe715 	stw	r3,-100(fp)
 2004f28:	00c00c44 	movi	r3,49
 2004f2c:	10c00005 	stb	r3,0(r2)
	    goto ret;
 2004f30:	00001e06 	br	2004fac <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 2004f34:	e0bfe717 	ldw	r2,-100(fp)
 2004f38:	10bfffc4 	addi	r2,r2,-1
 2004f3c:	e0bfe715 	stw	r2,-100(fp)
 2004f40:	e0bfe717 	ldw	r2,-100(fp)
 2004f44:	10800003 	ldbu	r2,0(r2)
 2004f48:	10803fcc 	andi	r2,r2,255
 2004f4c:	1080201c 	xori	r2,r2,128
 2004f50:	10bfe004 	addi	r2,r2,-128
 2004f54:	10800e60 	cmpeqi	r2,r2,57
 2004f58:	103fea1e 	bne	r2,zero,2004f04 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 2004f5c:	e0bfe717 	ldw	r2,-100(fp)
 2004f60:	10c00044 	addi	r3,r2,1
 2004f64:	e0ffe715 	stw	r3,-100(fp)
 2004f68:	10c00003 	ldbu	r3,0(r2)
 2004f6c:	18c00044 	addi	r3,r3,1
 2004f70:	10c00005 	stb	r3,0(r2)
 2004f74:	00000d06 	br	2004fac <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 2004f78:	e0bfe717 	ldw	r2,-100(fp)
 2004f7c:	10bfffc4 	addi	r2,r2,-1
 2004f80:	e0bfe715 	stw	r2,-100(fp)
 2004f84:	e0bfe717 	ldw	r2,-100(fp)
 2004f88:	10800003 	ldbu	r2,0(r2)
 2004f8c:	10803fcc 	andi	r2,r2,255
 2004f90:	1080201c 	xori	r2,r2,128
 2004f94:	10bfe004 	addi	r2,r2,-128
 2004f98:	10800c20 	cmpeqi	r2,r2,48
 2004f9c:	103ff61e 	bne	r2,zero,2004f78 <_dtoa_r+0x1a9c>
      s++;
 2004fa0:	e0bfe717 	ldw	r2,-100(fp)
 2004fa4:	10800044 	addi	r2,r2,1
 2004fa8:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 2004fac:	e17fe417 	ldw	r5,-112(fp)
 2004fb0:	e13ff817 	ldw	r4,-32(fp)
 2004fb4:	20083f40 	call	20083f4 <_Bfree>
  if (mhi)
 2004fb8:	e0bfe317 	ldw	r2,-116(fp)
 2004fbc:	10000d26 	beq	r2,zero,2004ff4 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 2004fc0:	e0bfe217 	ldw	r2,-120(fp)
 2004fc4:	10000626 	beq	r2,zero,2004fe0 <_dtoa_r+0x1b04>
 2004fc8:	e0ffe217 	ldw	r3,-120(fp)
 2004fcc:	e0bfe317 	ldw	r2,-116(fp)
 2004fd0:	18800326 	beq	r3,r2,2004fe0 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 2004fd4:	e17fe217 	ldw	r5,-120(fp)
 2004fd8:	e13ff817 	ldw	r4,-32(fp)
 2004fdc:	20083f40 	call	20083f4 <_Bfree>
      Bfree (ptr, mhi);
 2004fe0:	e17fe317 	ldw	r5,-116(fp)
 2004fe4:	e13ff817 	ldw	r4,-32(fp)
 2004fe8:	20083f40 	call	20083f4 <_Bfree>
 2004fec:	00000106 	br	2004ff4 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 2004ff0:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 2004ff4:	e17fe117 	ldw	r5,-124(fp)
 2004ff8:	e13ff817 	ldw	r4,-32(fp)
 2004ffc:	20083f40 	call	20083f4 <_Bfree>
  *s = 0;
 2005000:	e0bfe717 	ldw	r2,-100(fp)
 2005004:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 2005008:	e0bfd717 	ldw	r2,-164(fp)
 200500c:	10c00044 	addi	r3,r2,1
 2005010:	e0800317 	ldw	r2,12(fp)
 2005014:	10c00015 	stw	r3,0(r2)
  if (rve)
 2005018:	e0800517 	ldw	r2,20(fp)
 200501c:	10000326 	beq	r2,zero,200502c <_dtoa_r+0x1b50>
    *rve = s;
 2005020:	e0800517 	ldw	r2,20(fp)
 2005024:	e0ffe717 	ldw	r3,-100(fp)
 2005028:	10c00015 	stw	r3,0(r2)
  return s0;
 200502c:	e0bfe917 	ldw	r2,-92(fp)
}
 2005030:	e6fffc04 	addi	sp,fp,-16
 2005034:	dfc00517 	ldw	ra,20(sp)
 2005038:	df000417 	ldw	fp,16(sp)
 200503c:	dcc00317 	ldw	r19,12(sp)
 2005040:	dc800217 	ldw	r18,8(sp)
 2005044:	dc400117 	ldw	r17,4(sp)
 2005048:	dc000017 	ldw	r16,0(sp)
 200504c:	dec00604 	addi	sp,sp,24
 2005050:	f800283a 	ret

02005054 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2005054:	defff504 	addi	sp,sp,-44
 2005058:	dfc00a15 	stw	ra,40(sp)
 200505c:	df000915 	stw	fp,36(sp)
 2005060:	dcc00815 	stw	r19,32(sp)
 2005064:	dc800715 	stw	r18,28(sp)
 2005068:	dc400615 	stw	r17,24(sp)
 200506c:	dc000515 	stw	r16,20(sp)
 2005070:	df000904 	addi	fp,sp,36
 2005074:	e13ffb15 	stw	r4,-20(fp)
 2005078:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 200507c:	8080030b 	ldhu	r2,12(r16)
 2005080:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 2005084:	e0bff90b 	ldhu	r2,-28(fp)
 2005088:	10bfffcc 	andi	r2,r2,65535
 200508c:	1080020c 	andi	r2,r2,8
 2005090:	1000831e 	bne	r2,zero,20052a0 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 2005094:	8080030b 	ldhu	r2,12(r16)
 2005098:	10820014 	ori	r2,r2,2048
 200509c:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 20050a0:	80800117 	ldw	r2,4(r16)
 20050a4:	00800216 	blt	zero,r2,20050b0 <__sflush_r+0x5c>
 20050a8:	80800f17 	ldw	r2,60(r16)
 20050ac:	00807a0e 	bge	zero,r2,2005298 <__sflush_r+0x244>
 20050b0:	80800a17 	ldw	r2,40(r16)
 20050b4:	10007826 	beq	r2,zero,2005298 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 20050b8:	e0bffb17 	ldw	r2,-20(fp)
 20050bc:	10800017 	ldw	r2,0(r2)
 20050c0:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 20050c4:	e0bffb17 	ldw	r2,-20(fp)
 20050c8:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 20050cc:	8080030b 	ldhu	r2,12(r16)
 20050d0:	10bfffcc 	andi	r2,r2,65535
 20050d4:	1084000c 	andi	r2,r2,4096
 20050d8:	10000326 	beq	r2,zero,20050e8 <__sflush_r+0x94>
	    curoff = fp->_offset;
 20050dc:	80801417 	ldw	r2,80(r16)
 20050e0:	e0bff715 	stw	r2,-36(fp)
 20050e4:	00002206 	br	2005170 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 20050e8:	80800a17 	ldw	r2,40(r16)
 20050ec:	80c00717 	ldw	r3,28(r16)
 20050f0:	01c00044 	movi	r7,1
 20050f4:	000d883a 	mov	r6,zero
 20050f8:	180b883a 	mov	r5,r3
 20050fc:	e13ffb17 	ldw	r4,-20(fp)
 2005100:	103ee83a 	callr	r2
 2005104:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 2005108:	e0bff717 	ldw	r2,-36(fp)
 200510c:	10bfffd8 	cmpnei	r2,r2,-1
 2005110:	1000171e 	bne	r2,zero,2005170 <__sflush_r+0x11c>
 2005114:	e0bffb17 	ldw	r2,-20(fp)
 2005118:	10800017 	ldw	r2,0(r2)
 200511c:	10001426 	beq	r2,zero,2005170 <__sflush_r+0x11c>
		{
		  int result = EOF;
 2005120:	00bfffc4 	movi	r2,-1
 2005124:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 2005128:	e0bffb17 	ldw	r2,-20(fp)
 200512c:	10800017 	ldw	r2,0(r2)
 2005130:	10800760 	cmpeqi	r2,r2,29
 2005134:	1000041e 	bne	r2,zero,2005148 <__sflush_r+0xf4>
 2005138:	e0bffb17 	ldw	r2,-20(fp)
 200513c:	10800017 	ldw	r2,0(r2)
 2005140:	10800598 	cmpnei	r2,r2,22
 2005144:	1000051e 	bne	r2,zero,200515c <__sflush_r+0x108>
		    {
		      result = 0;
 2005148:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 200514c:	e0bffb17 	ldw	r2,-20(fp)
 2005150:	e0fffa17 	ldw	r3,-24(fp)
 2005154:	10c00015 	stw	r3,0(r2)
 2005158:	00000306 	br	2005168 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 200515c:	8080030b 	ldhu	r2,12(r16)
 2005160:	10801014 	ori	r2,r2,64
 2005164:	8080030d 	sth	r2,12(r16)
		  return result;
 2005168:	e0bff817 	ldw	r2,-32(fp)
 200516c:	00007106 	br	2005334 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 2005170:	8080030b 	ldhu	r2,12(r16)
 2005174:	10bfffcc 	andi	r2,r2,65535
 2005178:	1080010c 	andi	r2,r2,4
 200517c:	10000a26 	beq	r2,zero,20051a8 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 2005180:	80800117 	ldw	r2,4(r16)
 2005184:	e0fff717 	ldw	r3,-36(fp)
 2005188:	1885c83a 	sub	r2,r3,r2
 200518c:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 2005190:	80800c17 	ldw	r2,48(r16)
 2005194:	10000426 	beq	r2,zero,20051a8 <__sflush_r+0x154>
                curoff -= fp->_ur;
 2005198:	80800f17 	ldw	r2,60(r16)
 200519c:	e0fff717 	ldw	r3,-36(fp)
 20051a0:	1885c83a 	sub	r2,r3,r2
 20051a4:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 20051a8:	80800a17 	ldw	r2,40(r16)
 20051ac:	80c00717 	ldw	r3,28(r16)
 20051b0:	000f883a 	mov	r7,zero
 20051b4:	e1bff717 	ldw	r6,-36(fp)
 20051b8:	180b883a 	mov	r5,r3
 20051bc:	e13ffb17 	ldw	r4,-20(fp)
 20051c0:	103ee83a 	callr	r2
 20051c4:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 20051c8:	e0bff717 	ldw	r2,-36(fp)
 20051cc:	10bfffd8 	cmpnei	r2,r2,-1
 20051d0:	10000b1e 	bne	r2,zero,2005200 <__sflush_r+0x1ac>
 20051d4:	e0bffb17 	ldw	r2,-20(fp)
 20051d8:	10800017 	ldw	r2,0(r2)
 20051dc:	10000826 	beq	r2,zero,2005200 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 20051e0:	e0bffb17 	ldw	r2,-20(fp)
 20051e4:	10800017 	ldw	r2,0(r2)
 20051e8:	10800760 	cmpeqi	r2,r2,29
 20051ec:	1000041e 	bne	r2,zero,2005200 <__sflush_r+0x1ac>
 20051f0:	e0bffb17 	ldw	r2,-20(fp)
 20051f4:	10800017 	ldw	r2,0(r2)
 20051f8:	10800598 	cmpnei	r2,r2,22
 20051fc:	1000211e 	bne	r2,zero,2005284 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 2005200:	80c0030b 	ldhu	r3,12(r16)
 2005204:	00bdffc4 	movi	r2,-2049
 2005208:	1884703a 	and	r2,r3,r2
 200520c:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 2005210:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 2005214:	80800417 	ldw	r2,16(r16)
 2005218:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 200521c:	8080030b 	ldhu	r2,12(r16)
 2005220:	10bfffcc 	andi	r2,r2,65535
 2005224:	1084000c 	andi	r2,r2,4096
 2005228:	10000826 	beq	r2,zero,200524c <__sflush_r+0x1f8>
 200522c:	e0bff717 	ldw	r2,-36(fp)
 2005230:	10bfffd8 	cmpnei	r2,r2,-1
 2005234:	1000031e 	bne	r2,zero,2005244 <__sflush_r+0x1f0>
 2005238:	e0bffb17 	ldw	r2,-20(fp)
 200523c:	10800017 	ldw	r2,0(r2)
 2005240:	1000021e 	bne	r2,zero,200524c <__sflush_r+0x1f8>
		fp->_offset = curoff;
 2005244:	e0bff717 	ldw	r2,-36(fp)
 2005248:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 200524c:	e0bffb17 	ldw	r2,-20(fp)
 2005250:	e0fffa17 	ldw	r3,-24(fp)
 2005254:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 2005258:	80800c17 	ldw	r2,48(r16)
 200525c:	10000e26 	beq	r2,zero,2005298 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 2005260:	80c00c17 	ldw	r3,48(r16)
 2005264:	80801004 	addi	r2,r16,64
 2005268:	18800426 	beq	r3,r2,200527c <__sflush_r+0x228>
 200526c:	80800c17 	ldw	r2,48(r16)
 2005270:	100b883a 	mov	r5,r2
 2005274:	e13ffb17 	ldw	r4,-20(fp)
 2005278:	20059f80 	call	20059f8 <_free_r>
 200527c:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 2005280:	00000506 	br	2005298 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 2005284:	8080030b 	ldhu	r2,12(r16)
 2005288:	10801014 	ori	r2,r2,64
 200528c:	8080030d 	sth	r2,12(r16)
	      return EOF;
 2005290:	00bfffc4 	movi	r2,-1
 2005294:	00002706 	br	2005334 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 2005298:	0005883a 	mov	r2,zero
 200529c:	00002506 	br	2005334 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 20052a0:	84400417 	ldw	r17,16(r16)
 20052a4:	8800021e 	bne	r17,zero,20052b0 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 20052a8:	0005883a 	mov	r2,zero
 20052ac:	00002106 	br	2005334 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 20052b0:	80800017 	ldw	r2,0(r16)
 20052b4:	1007883a 	mov	r3,r2
 20052b8:	8805883a 	mov	r2,r17
 20052bc:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 20052c0:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 20052c4:	e0bff90b 	ldhu	r2,-28(fp)
 20052c8:	10bfffcc 	andi	r2,r2,65535
 20052cc:	108000cc 	andi	r2,r2,3
 20052d0:	1000021e 	bne	r2,zero,20052dc <__sflush_r+0x288>
 20052d4:	80800517 	ldw	r2,20(r16)
 20052d8:	00000106 	br	20052e0 <__sflush_r+0x28c>
 20052dc:	0005883a 	mov	r2,zero
 20052e0:	80800215 	stw	r2,8(r16)

  while (n > 0)
 20052e4:	00001106 	br	200532c <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 20052e8:	80800917 	ldw	r2,36(r16)
 20052ec:	80c00717 	ldw	r3,28(r16)
 20052f0:	900f883a 	mov	r7,r18
 20052f4:	880d883a 	mov	r6,r17
 20052f8:	180b883a 	mov	r5,r3
 20052fc:	e13ffb17 	ldw	r4,-20(fp)
 2005300:	103ee83a 	callr	r2
 2005304:	1027883a 	mov	r19,r2
      if (t <= 0)
 2005308:	04c00516 	blt	zero,r19,2005320 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 200530c:	8080030b 	ldhu	r2,12(r16)
 2005310:	10801014 	ori	r2,r2,64
 2005314:	8080030d 	sth	r2,12(r16)
          return EOF;
 2005318:	00bfffc4 	movi	r2,-1
 200531c:	00000506 	br	2005334 <__sflush_r+0x2e0>
	}
      p += t;
 2005320:	9805883a 	mov	r2,r19
 2005324:	88a3883a 	add	r17,r17,r2
      n -= t;
 2005328:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 200532c:	04bfee16 	blt	zero,r18,20052e8 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 2005330:	0005883a 	mov	r2,zero
}
 2005334:	e6fffc04 	addi	sp,fp,-16
 2005338:	dfc00517 	ldw	ra,20(sp)
 200533c:	df000417 	ldw	fp,16(sp)
 2005340:	dcc00317 	ldw	r19,12(sp)
 2005344:	dc800217 	ldw	r18,8(sp)
 2005348:	dc400117 	ldw	r17,4(sp)
 200534c:	dc000017 	ldw	r16,0(sp)
 2005350:	dec00604 	addi	sp,sp,24
 2005354:	f800283a 	ret

02005358 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2005358:	defffa04 	addi	sp,sp,-24
 200535c:	dfc00515 	stw	ra,20(sp)
 2005360:	df000415 	stw	fp,16(sp)
 2005364:	dc000315 	stw	r16,12(sp)
 2005368:	df000404 	addi	fp,sp,16
 200536c:	e13ffe15 	stw	r4,-8(fp)
 2005370:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 2005374:	e0bffe17 	ldw	r2,-8(fp)
 2005378:	e0bffc15 	stw	r2,-16(fp)
 200537c:	e0bffc17 	ldw	r2,-16(fp)
 2005380:	10000526 	beq	r2,zero,2005398 <_fflush_r+0x40>
 2005384:	e0bffc17 	ldw	r2,-16(fp)
 2005388:	10800e17 	ldw	r2,56(r2)
 200538c:	1000021e 	bne	r2,zero,2005398 <_fflush_r+0x40>
 2005390:	e13ffc17 	ldw	r4,-16(fp)
 2005394:	20057d80 	call	20057d8 <__sinit>

  if (!fp->_flags)
 2005398:	8080030b 	ldhu	r2,12(r16)
 200539c:	10bfffcc 	andi	r2,r2,65535
 20053a0:	10a0001c 	xori	r2,r2,32768
 20053a4:	10a00004 	addi	r2,r2,-32768
 20053a8:	1000021e 	bne	r2,zero,20053b4 <_fflush_r+0x5c>
    return 0;
 20053ac:	0005883a 	mov	r2,zero
 20053b0:	00000506 	br	20053c8 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 20053b4:	800b883a 	mov	r5,r16
 20053b8:	e13ffe17 	ldw	r4,-8(fp)
 20053bc:	20050540 	call	2005054 <__sflush_r>
 20053c0:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 20053c4:	e0bffd17 	ldw	r2,-12(fp)
}
 20053c8:	e6ffff04 	addi	sp,fp,-4
 20053cc:	dfc00217 	ldw	ra,8(sp)
 20053d0:	df000117 	ldw	fp,4(sp)
 20053d4:	dc000017 	ldw	r16,0(sp)
 20053d8:	dec00304 	addi	sp,sp,12
 20053dc:	f800283a 	ret

020053e0 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 20053e0:	defffe04 	addi	sp,sp,-8
 20053e4:	dfc00115 	stw	ra,4(sp)
 20053e8:	df000015 	stw	fp,0(sp)
 20053ec:	d839883a 	mov	fp,sp
 20053f0:	2005883a 	mov	r2,r4
  if (fp == NULL)
 20053f4:	1000061e 	bne	r2,zero,2005410 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 20053f8:	d0a00117 	ldw	r2,-32764(gp)
 20053fc:	01408034 	movhi	r5,512
 2005400:	2954d604 	addi	r5,r5,21336
 2005404:	1009883a 	mov	r4,r2
 2005408:	20067d80 	call	20067d8 <_fwalk_reent>
 200540c:	00000406 	br	2005420 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 2005410:	d0e00017 	ldw	r3,-32768(gp)
 2005414:	100b883a 	mov	r5,r2
 2005418:	1809883a 	mov	r4,r3
 200541c:	20053580 	call	2005358 <_fflush_r>
}
 2005420:	e037883a 	mov	sp,fp
 2005424:	dfc00117 	ldw	ra,4(sp)
 2005428:	df000017 	ldw	fp,0(sp)
 200542c:	dec00204 	addi	sp,sp,8
 2005430:	f800283a 	ret

02005434 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 2005434:	defffa04 	addi	sp,sp,-24
 2005438:	dfc00515 	stw	ra,20(sp)
 200543c:	df000415 	stw	fp,16(sp)
 2005440:	df000404 	addi	fp,sp,16
 2005444:	e13ffc15 	stw	r4,-16(fp)
 2005448:	e17ffd15 	stw	r5,-12(fp)
 200544c:	e1bffe15 	stw	r6,-8(fp)
 2005450:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 2005454:	e0bffc17 	ldw	r2,-16(fp)
 2005458:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 200545c:	e0bffc17 	ldw	r2,-16(fp)
 2005460:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 2005464:	e0bffc17 	ldw	r2,-16(fp)
 2005468:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 200546c:	e0bffd17 	ldw	r2,-12(fp)
 2005470:	1007883a 	mov	r3,r2
 2005474:	e0bffc17 	ldw	r2,-16(fp)
 2005478:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 200547c:	e0bffc17 	ldw	r2,-16(fp)
 2005480:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 2005484:	e0bffe17 	ldw	r2,-8(fp)
 2005488:	1007883a 	mov	r3,r2
 200548c:	e0bffc17 	ldw	r2,-16(fp)
 2005490:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 2005494:	e0bffc17 	ldw	r2,-16(fp)
 2005498:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 200549c:	e0bffc17 	ldw	r2,-16(fp)
 20054a0:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 20054a4:	e0bffc17 	ldw	r2,-16(fp)
 20054a8:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 20054ac:	e0bffc17 	ldw	r2,-16(fp)
 20054b0:	10801704 	addi	r2,r2,92
 20054b4:	01800204 	movi	r6,8
 20054b8:	000b883a 	mov	r5,zero
 20054bc:	1009883a 	mov	r4,r2
 20054c0:	20081000 	call	2008100 <memset>
  ptr->_cookie = ptr;
 20054c4:	e0bffc17 	ldw	r2,-16(fp)
 20054c8:	e0fffc17 	ldw	r3,-16(fp)
 20054cc:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 20054d0:	e0fffc17 	ldw	r3,-16(fp)
 20054d4:	00808074 	movhi	r2,513
 20054d8:	10aaa404 	addi	r2,r2,-21872
 20054dc:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 20054e0:	e0fffc17 	ldw	r3,-16(fp)
 20054e4:	00808074 	movhi	r2,513
 20054e8:	10aad704 	addi	r2,r2,-21668
 20054ec:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 20054f0:	e0fffc17 	ldw	r3,-16(fp)
 20054f4:	00808074 	movhi	r2,513
 20054f8:	10ab0404 	addi	r2,r2,-21488
 20054fc:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 2005500:	e0fffc17 	ldw	r3,-16(fp)
 2005504:	00808074 	movhi	r2,513
 2005508:	10ab2c04 	addi	r2,r2,-21328
 200550c:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 2005510:	0001883a 	nop
 2005514:	e037883a 	mov	sp,fp
 2005518:	dfc00117 	ldw	ra,4(sp)
 200551c:	df000017 	ldw	fp,0(sp)
 2005520:	dec00204 	addi	sp,sp,8
 2005524:	f800283a 	ret

02005528 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 2005528:	defffb04 	addi	sp,sp,-20
 200552c:	dfc00415 	stw	ra,16(sp)
 2005530:	df000315 	stw	fp,12(sp)
 2005534:	dc000215 	stw	r16,8(sp)
 2005538:	df000304 	addi	fp,sp,12
 200553c:	e13ffe15 	stw	r4,-8(fp)
 2005540:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 2005544:	80bfffc4 	addi	r2,r16,-1
 2005548:	10801a24 	muli	r2,r2,104
 200554c:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 2005550:	100b883a 	mov	r5,r2
 2005554:	e13ffe17 	ldw	r4,-8(fp)
 2005558:	20070380 	call	2007038 <_malloc_r>
 200555c:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 2005560:	e0bffd17 	ldw	r2,-12(fp)
 2005564:	1000021e 	bne	r2,zero,2005570 <__sfmoreglue+0x48>
    return NULL;
 2005568:	0005883a 	mov	r2,zero
 200556c:	00001106 	br	20055b4 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 2005570:	e0bffd17 	ldw	r2,-12(fp)
 2005574:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 2005578:	e0bffd17 	ldw	r2,-12(fp)
 200557c:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 2005580:	e0bffd17 	ldw	r2,-12(fp)
 2005584:	10c00304 	addi	r3,r2,12
 2005588:	e0bffd17 	ldw	r2,-12(fp)
 200558c:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 2005590:	e0bffd17 	ldw	r2,-12(fp)
 2005594:	10800304 	addi	r2,r2,12
 2005598:	8007883a 	mov	r3,r16
 200559c:	18c01a24 	muli	r3,r3,104
 20055a0:	180d883a 	mov	r6,r3
 20055a4:	000b883a 	mov	r5,zero
 20055a8:	1009883a 	mov	r4,r2
 20055ac:	20081000 	call	2008100 <memset>
  return &g->glue;
 20055b0:	e0bffd17 	ldw	r2,-12(fp)
}
 20055b4:	e6ffff04 	addi	sp,fp,-4
 20055b8:	dfc00217 	ldw	ra,8(sp)
 20055bc:	df000117 	ldw	fp,4(sp)
 20055c0:	dc000017 	ldw	r16,0(sp)
 20055c4:	dec00304 	addi	sp,sp,12
 20055c8:	f800283a 	ret

020055cc <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 20055cc:	defffa04 	addi	sp,sp,-24
 20055d0:	dfc00515 	stw	ra,20(sp)
 20055d4:	df000415 	stw	fp,16(sp)
 20055d8:	df000404 	addi	fp,sp,16
 20055dc:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 20055e0:	20058b00 	call	20058b0 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 20055e4:	d0a00117 	ldw	r2,-32764(gp)
 20055e8:	10800e17 	ldw	r2,56(r2)
 20055ec:	1000031e 	bne	r2,zero,20055fc <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 20055f0:	d0a00117 	ldw	r2,-32764(gp)
 20055f4:	1009883a 	mov	r4,r2
 20055f8:	20057d80 	call	20057d8 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 20055fc:	d0a00117 	ldw	r2,-32764(gp)
 2005600:	1080b804 	addi	r2,r2,736
 2005604:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2005608:	e0bffe17 	ldw	r2,-8(fp)
 200560c:	10800217 	ldw	r2,8(r2)
 2005610:	e0bffc15 	stw	r2,-16(fp)
 2005614:	e0bffe17 	ldw	r2,-8(fp)
 2005618:	10800117 	ldw	r2,4(r2)
 200561c:	e0bffd15 	stw	r2,-12(fp)
 2005620:	00000906 	br	2005648 <__sfp+0x7c>
	if (fp->_flags == 0)
 2005624:	e0bffc17 	ldw	r2,-16(fp)
 2005628:	1080030b 	ldhu	r2,12(r2)
 200562c:	10bfffcc 	andi	r2,r2,65535
 2005630:	10a0001c 	xori	r2,r2,32768
 2005634:	10a00004 	addi	r2,r2,-32768
 2005638:	10001f26 	beq	r2,zero,20056b8 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200563c:	e0bffc17 	ldw	r2,-16(fp)
 2005640:	10801a04 	addi	r2,r2,104
 2005644:	e0bffc15 	stw	r2,-16(fp)
 2005648:	e0bffd17 	ldw	r2,-12(fp)
 200564c:	10bfffc4 	addi	r2,r2,-1
 2005650:	e0bffd15 	stw	r2,-12(fp)
 2005654:	e0bffd17 	ldw	r2,-12(fp)
 2005658:	103ff20e 	bge	r2,zero,2005624 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200565c:	e0bffe17 	ldw	r2,-8(fp)
 2005660:	10800017 	ldw	r2,0(r2)
 2005664:	1000091e 	bne	r2,zero,200568c <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 2005668:	01400104 	movi	r5,4
 200566c:	e13fff17 	ldw	r4,-4(fp)
 2005670:	20055280 	call	2005528 <__sfmoreglue>
 2005674:	1007883a 	mov	r3,r2
 2005678:	e0bffe17 	ldw	r2,-8(fp)
 200567c:	10c00015 	stw	r3,0(r2)
 2005680:	e0bffe17 	ldw	r2,-8(fp)
 2005684:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2005688:	10000426 	beq	r2,zero,200569c <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200568c:	e0bffe17 	ldw	r2,-8(fp)
 2005690:	10800017 	ldw	r2,0(r2)
 2005694:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 2005698:	003fdb06 	br	2005608 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 200569c:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 20056a0:	20058d00 	call	20058d0 <__sfp_lock_release>
  d->_errno = ENOMEM;
 20056a4:	e0bfff17 	ldw	r2,-4(fp)
 20056a8:	00c00304 	movi	r3,12
 20056ac:	10c00015 	stw	r3,0(r2)
  return NULL;
 20056b0:	0005883a 	mov	r2,zero
 20056b4:	00002506 	br	200574c <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 20056b8:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 20056bc:	e0bffc17 	ldw	r2,-16(fp)
 20056c0:	00ffffc4 	movi	r3,-1
 20056c4:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 20056c8:	e0bffc17 	ldw	r2,-16(fp)
 20056cc:	00c00044 	movi	r3,1
 20056d0:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 20056d4:	e0bffc17 	ldw	r2,-16(fp)
 20056d8:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 20056dc:	20058d00 	call	20058d0 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 20056e0:	e0bffc17 	ldw	r2,-16(fp)
 20056e4:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 20056e8:	e0bffc17 	ldw	r2,-16(fp)
 20056ec:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 20056f0:	e0bffc17 	ldw	r2,-16(fp)
 20056f4:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 20056f8:	e0bffc17 	ldw	r2,-16(fp)
 20056fc:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 2005700:	e0bffc17 	ldw	r2,-16(fp)
 2005704:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 2005708:	e0bffc17 	ldw	r2,-16(fp)
 200570c:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 2005710:	e0bffc17 	ldw	r2,-16(fp)
 2005714:	10801704 	addi	r2,r2,92
 2005718:	01800204 	movi	r6,8
 200571c:	000b883a 	mov	r5,zero
 2005720:	1009883a 	mov	r4,r2
 2005724:	20081000 	call	2008100 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 2005728:	e0bffc17 	ldw	r2,-16(fp)
 200572c:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 2005730:	e0bffc17 	ldw	r2,-16(fp)
 2005734:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 2005738:	e0bffc17 	ldw	r2,-16(fp)
 200573c:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 2005740:	e0bffc17 	ldw	r2,-16(fp)
 2005744:	10001215 	stw	zero,72(r2)

  return fp;
 2005748:	e0bffc17 	ldw	r2,-16(fp)
}
 200574c:	e037883a 	mov	sp,fp
 2005750:	dfc00117 	ldw	ra,4(sp)
 2005754:	df000017 	ldw	fp,0(sp)
 2005758:	dec00204 	addi	sp,sp,8
 200575c:	f800283a 	ret

02005760 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 2005760:	defffc04 	addi	sp,sp,-16
 2005764:	dfc00315 	stw	ra,12(sp)
 2005768:	df000215 	stw	fp,8(sp)
 200576c:	df000204 	addi	fp,sp,8
 2005770:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 2005774:	00808074 	movhi	r2,513
 2005778:	10b16e04 	addi	r2,r2,-14920
 200577c:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 2005780:	e17ffe17 	ldw	r5,-8(fp)
 2005784:	e13fff17 	ldw	r4,-4(fp)
 2005788:	20067d80 	call	20067d8 <_fwalk_reent>
}
 200578c:	0001883a 	nop
 2005790:	e037883a 	mov	sp,fp
 2005794:	dfc00117 	ldw	ra,4(sp)
 2005798:	df000017 	ldw	fp,0(sp)
 200579c:	dec00204 	addi	sp,sp,8
 20057a0:	f800283a 	ret

020057a4 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 20057a4:	defffe04 	addi	sp,sp,-8
 20057a8:	dfc00115 	stw	ra,4(sp)
 20057ac:	df000015 	stw	fp,0(sp)
 20057b0:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 20057b4:	d0a00117 	ldw	r2,-32764(gp)
 20057b8:	1009883a 	mov	r4,r2
 20057bc:	20057600 	call	2005760 <_cleanup_r>
}
 20057c0:	0001883a 	nop
 20057c4:	e037883a 	mov	sp,fp
 20057c8:	dfc00117 	ldw	ra,4(sp)
 20057cc:	df000017 	ldw	fp,0(sp)
 20057d0:	dec00204 	addi	sp,sp,8
 20057d4:	f800283a 	ret

020057d8 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 20057d8:	defffd04 	addi	sp,sp,-12
 20057dc:	dfc00215 	stw	ra,8(sp)
 20057e0:	df000115 	stw	fp,4(sp)
 20057e4:	df000104 	addi	fp,sp,4
 20057e8:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 20057ec:	20058f00 	call	20058f0 <__sinit_lock_acquire>

  if (s->__sdidinit)
 20057f0:	e0bfff17 	ldw	r2,-4(fp)
 20057f4:	10800e17 	ldw	r2,56(r2)
 20057f8:	10000226 	beq	r2,zero,2005804 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 20057fc:	20059100 	call	2005910 <__sinit_lock_release>
      return;
 2005800:	00002606 	br	200589c <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 2005804:	e0ffff17 	ldw	r3,-4(fp)
 2005808:	00808034 	movhi	r2,512
 200580c:	1095d804 	addi	r2,r2,22368
 2005810:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 2005814:	e0bfff17 	ldw	r2,-4(fp)
 2005818:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200581c:	e0bfff17 	ldw	r2,-4(fp)
 2005820:	00c000c4 	movi	r3,3
 2005824:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 2005828:	e0bfff17 	ldw	r2,-4(fp)
 200582c:	10c0bb04 	addi	r3,r2,748
 2005830:	e0bfff17 	ldw	r2,-4(fp)
 2005834:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 2005838:	e0bfff17 	ldw	r2,-4(fp)
 200583c:	10800117 	ldw	r2,4(r2)
 2005840:	e1ffff17 	ldw	r7,-4(fp)
 2005844:	000d883a 	mov	r6,zero
 2005848:	01400104 	movi	r5,4
 200584c:	1009883a 	mov	r4,r2
 2005850:	20054340 	call	2005434 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 2005854:	e0bfff17 	ldw	r2,-4(fp)
 2005858:	10800217 	ldw	r2,8(r2)
 200585c:	e1ffff17 	ldw	r7,-4(fp)
 2005860:	01800044 	movi	r6,1
 2005864:	01400284 	movi	r5,10
 2005868:	1009883a 	mov	r4,r2
 200586c:	20054340 	call	2005434 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 2005870:	e0bfff17 	ldw	r2,-4(fp)
 2005874:	10800317 	ldw	r2,12(r2)
 2005878:	e1ffff17 	ldw	r7,-4(fp)
 200587c:	01800084 	movi	r6,2
 2005880:	01400484 	movi	r5,18
 2005884:	1009883a 	mov	r4,r2
 2005888:	20054340 	call	2005434 <std>

  s->__sdidinit = 1;
 200588c:	e0bfff17 	ldw	r2,-4(fp)
 2005890:	00c00044 	movi	r3,1
 2005894:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 2005898:	20059100 	call	2005910 <__sinit_lock_release>
}
 200589c:	e037883a 	mov	sp,fp
 20058a0:	dfc00117 	ldw	ra,4(sp)
 20058a4:	df000017 	ldw	fp,0(sp)
 20058a8:	dec00204 	addi	sp,sp,8
 20058ac:	f800283a 	ret

020058b0 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 20058b0:	deffff04 	addi	sp,sp,-4
 20058b4:	df000015 	stw	fp,0(sp)
 20058b8:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 20058bc:	0001883a 	nop
 20058c0:	e037883a 	mov	sp,fp
 20058c4:	df000017 	ldw	fp,0(sp)
 20058c8:	dec00104 	addi	sp,sp,4
 20058cc:	f800283a 	ret

020058d0 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 20058d0:	deffff04 	addi	sp,sp,-4
 20058d4:	df000015 	stw	fp,0(sp)
 20058d8:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 20058dc:	0001883a 	nop
 20058e0:	e037883a 	mov	sp,fp
 20058e4:	df000017 	ldw	fp,0(sp)
 20058e8:	dec00104 	addi	sp,sp,4
 20058ec:	f800283a 	ret

020058f0 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 20058f0:	deffff04 	addi	sp,sp,-4
 20058f4:	df000015 	stw	fp,0(sp)
 20058f8:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 20058fc:	0001883a 	nop
 2005900:	e037883a 	mov	sp,fp
 2005904:	df000017 	ldw	fp,0(sp)
 2005908:	dec00104 	addi	sp,sp,4
 200590c:	f800283a 	ret

02005910 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 2005910:	deffff04 	addi	sp,sp,-4
 2005914:	df000015 	stw	fp,0(sp)
 2005918:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200591c:	0001883a 	nop
 2005920:	e037883a 	mov	sp,fp
 2005924:	df000017 	ldw	fp,0(sp)
 2005928:	dec00104 	addi	sp,sp,4
 200592c:	f800283a 	ret

02005930 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 2005930:	defffe04 	addi	sp,sp,-8
 2005934:	df000115 	stw	fp,4(sp)
 2005938:	df000104 	addi	fp,sp,4
 200593c:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 2005940:	0005883a 	mov	r2,zero
}
 2005944:	e037883a 	mov	sp,fp
 2005948:	df000017 	ldw	fp,0(sp)
 200594c:	dec00104 	addi	sp,sp,4
 2005950:	f800283a 	ret

02005954 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 2005954:	defffe04 	addi	sp,sp,-8
 2005958:	df000115 	stw	fp,4(sp)
 200595c:	df000104 	addi	fp,sp,4
 2005960:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 2005964:	0005883a 	mov	r2,zero
}
 2005968:	e037883a 	mov	sp,fp
 200596c:	df000017 	ldw	fp,0(sp)
 2005970:	dec00104 	addi	sp,sp,4
 2005974:	f800283a 	ret

02005978 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 2005978:	defffe04 	addi	sp,sp,-8
 200597c:	dfc00115 	stw	ra,4(sp)
 2005980:	df000015 	stw	fp,0(sp)
 2005984:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 2005988:	20058b00 	call	20058b0 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200598c:	d0a00017 	ldw	r2,-32768(gp)
 2005990:	01408034 	movhi	r5,512
 2005994:	29564c04 	addi	r5,r5,22832
 2005998:	1009883a 	mov	r4,r2
 200599c:	20067000 	call	2006700 <_fwalk>
}
 20059a0:	0001883a 	nop
 20059a4:	e037883a 	mov	sp,fp
 20059a8:	dfc00117 	ldw	ra,4(sp)
 20059ac:	df000017 	ldw	fp,0(sp)
 20059b0:	dec00204 	addi	sp,sp,8
 20059b4:	f800283a 	ret

020059b8 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 20059b8:	defffe04 	addi	sp,sp,-8
 20059bc:	dfc00115 	stw	ra,4(sp)
 20059c0:	df000015 	stw	fp,0(sp)
 20059c4:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 20059c8:	d0a00017 	ldw	r2,-32768(gp)
 20059cc:	01408034 	movhi	r5,512
 20059d0:	29565504 	addi	r5,r5,22868
 20059d4:	1009883a 	mov	r4,r2
 20059d8:	20067000 	call	2006700 <_fwalk>

  __sfp_lock_release ();
 20059dc:	20058d00 	call	20058d0 <__sfp_lock_release>
}
 20059e0:	0001883a 	nop
 20059e4:	e037883a 	mov	sp,fp
 20059e8:	dfc00117 	ldw	ra,4(sp)
 20059ec:	df000017 	ldw	fp,0(sp)
 20059f0:	dec00204 	addi	sp,sp,8
 20059f4:	f800283a 	ret

020059f8 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 20059f8:	defff204 	addi	sp,sp,-56
 20059fc:	dfc00d15 	stw	ra,52(sp)
 2005a00:	df000c15 	stw	fp,48(sp)
 2005a04:	df000c04 	addi	fp,sp,48
 2005a08:	e13ffe15 	stw	r4,-8(fp)
 2005a0c:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 2005a10:	e0bfff17 	ldw	r2,-4(fp)
 2005a14:	10014a26 	beq	r2,zero,2005f40 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 2005a18:	e13ffe17 	ldw	r4,-8(fp)
 2005a1c:	20105ec0 	call	20105ec <__malloc_lock>

  p = mem2chunk(mem);
 2005a20:	e0bfff17 	ldw	r2,-4(fp)
 2005a24:	10bffe04 	addi	r2,r2,-8
 2005a28:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 2005a2c:	e0bff417 	ldw	r2,-48(fp)
 2005a30:	10800117 	ldw	r2,4(r2)
 2005a34:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 2005a38:	e0fff917 	ldw	r3,-28(fp)
 2005a3c:	00bfff84 	movi	r2,-2
 2005a40:	1884703a 	and	r2,r3,r2
 2005a44:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 2005a48:	e0fff417 	ldw	r3,-48(fp)
 2005a4c:	e0bff517 	ldw	r2,-44(fp)
 2005a50:	1885883a 	add	r2,r3,r2
 2005a54:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 2005a58:	e0bffa17 	ldw	r2,-24(fp)
 2005a5c:	10c00117 	ldw	r3,4(r2)
 2005a60:	00bfff04 	movi	r2,-4
 2005a64:	1884703a 	and	r2,r3,r2
 2005a68:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 2005a6c:	00808074 	movhi	r2,513
 2005a70:	108d3e04 	addi	r2,r2,13560
 2005a74:	10c00217 	ldw	r3,8(r2)
 2005a78:	e0bffa17 	ldw	r2,-24(fp)
 2005a7c:	1880311e 	bne	r3,r2,2005b44 <_free_r+0x14c>
  {
    sz += nextsz;
 2005a80:	e0fff517 	ldw	r3,-44(fp)
 2005a84:	e0bffb17 	ldw	r2,-20(fp)
 2005a88:	1885883a 	add	r2,r3,r2
 2005a8c:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 2005a90:	e0bff917 	ldw	r2,-28(fp)
 2005a94:	1080004c 	andi	r2,r2,1
 2005a98:	1000181e 	bne	r2,zero,2005afc <_free_r+0x104>
    {
      prevsz = p->prev_size;
 2005a9c:	e0bff417 	ldw	r2,-48(fp)
 2005aa0:	10800017 	ldw	r2,0(r2)
 2005aa4:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 2005aa8:	e0bffc17 	ldw	r2,-16(fp)
 2005aac:	0085c83a 	sub	r2,zero,r2
 2005ab0:	e0fff417 	ldw	r3,-48(fp)
 2005ab4:	1885883a 	add	r2,r3,r2
 2005ab8:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 2005abc:	e0fff517 	ldw	r3,-44(fp)
 2005ac0:	e0bffc17 	ldw	r2,-16(fp)
 2005ac4:	1885883a 	add	r2,r3,r2
 2005ac8:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 2005acc:	e0bff417 	ldw	r2,-48(fp)
 2005ad0:	10800317 	ldw	r2,12(r2)
 2005ad4:	e0bff615 	stw	r2,-40(fp)
 2005ad8:	e0bff417 	ldw	r2,-48(fp)
 2005adc:	10800217 	ldw	r2,8(r2)
 2005ae0:	e0bff715 	stw	r2,-36(fp)
 2005ae4:	e0bff717 	ldw	r2,-36(fp)
 2005ae8:	e0fff617 	ldw	r3,-40(fp)
 2005aec:	10c00315 	stw	r3,12(r2)
 2005af0:	e0bff617 	ldw	r2,-40(fp)
 2005af4:	e0fff717 	ldw	r3,-36(fp)
 2005af8:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 2005afc:	e0bff517 	ldw	r2,-44(fp)
 2005b00:	10c00054 	ori	r3,r2,1
 2005b04:	e0bff417 	ldw	r2,-48(fp)
 2005b08:	10c00115 	stw	r3,4(r2)
    top = p;
 2005b0c:	00808074 	movhi	r2,513
 2005b10:	108d3e04 	addi	r2,r2,13560
 2005b14:	e0fff417 	ldw	r3,-48(fp)
 2005b18:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 2005b1c:	d0a00317 	ldw	r2,-32756(gp)
 2005b20:	e0fff517 	ldw	r3,-44(fp)
 2005b24:	18800436 	bltu	r3,r2,2005b38 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 2005b28:	d0a6dc17 	ldw	r2,-25744(gp)
 2005b2c:	100b883a 	mov	r5,r2
 2005b30:	e13ffe17 	ldw	r4,-8(fp)
 2005b34:	2005f580 	call	2005f58 <_malloc_trim_r>
    MALLOC_UNLOCK;
 2005b38:	e13ffe17 	ldw	r4,-8(fp)
 2005b3c:	20106100 	call	2010610 <__malloc_unlock>
    return;
 2005b40:	00010006 	br	2005f44 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 2005b44:	e0bffa17 	ldw	r2,-24(fp)
 2005b48:	e0fffb17 	ldw	r3,-20(fp)
 2005b4c:	10c00115 	stw	r3,4(r2)

  islr = 0;
 2005b50:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 2005b54:	e0bff917 	ldw	r2,-28(fp)
 2005b58:	1080004c 	andi	r2,r2,1
 2005b5c:	1000201e 	bne	r2,zero,2005be0 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 2005b60:	e0bff417 	ldw	r2,-48(fp)
 2005b64:	10800017 	ldw	r2,0(r2)
 2005b68:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 2005b6c:	e0bffc17 	ldw	r2,-16(fp)
 2005b70:	0085c83a 	sub	r2,zero,r2
 2005b74:	e0fff417 	ldw	r3,-48(fp)
 2005b78:	1885883a 	add	r2,r3,r2
 2005b7c:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 2005b80:	e0fff517 	ldw	r3,-44(fp)
 2005b84:	e0bffc17 	ldw	r2,-16(fp)
 2005b88:	1885883a 	add	r2,r3,r2
 2005b8c:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 2005b90:	e0bff417 	ldw	r2,-48(fp)
 2005b94:	10c00217 	ldw	r3,8(r2)
 2005b98:	00808074 	movhi	r2,513
 2005b9c:	108d4004 	addi	r2,r2,13568
 2005ba0:	1880031e 	bne	r3,r2,2005bb0 <_free_r+0x1b8>
      islr = 1;
 2005ba4:	00800044 	movi	r2,1
 2005ba8:	e0bff815 	stw	r2,-32(fp)
 2005bac:	00000c06 	br	2005be0 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 2005bb0:	e0bff417 	ldw	r2,-48(fp)
 2005bb4:	10800317 	ldw	r2,12(r2)
 2005bb8:	e0bff615 	stw	r2,-40(fp)
 2005bbc:	e0bff417 	ldw	r2,-48(fp)
 2005bc0:	10800217 	ldw	r2,8(r2)
 2005bc4:	e0bff715 	stw	r2,-36(fp)
 2005bc8:	e0bff717 	ldw	r2,-36(fp)
 2005bcc:	e0fff617 	ldw	r3,-40(fp)
 2005bd0:	10c00315 	stw	r3,12(r2)
 2005bd4:	e0bff617 	ldw	r2,-40(fp)
 2005bd8:	e0fff717 	ldw	r3,-36(fp)
 2005bdc:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 2005be0:	e0fffa17 	ldw	r3,-24(fp)
 2005be4:	e0bffb17 	ldw	r2,-20(fp)
 2005be8:	1885883a 	add	r2,r3,r2
 2005bec:	10800117 	ldw	r2,4(r2)
 2005bf0:	1080004c 	andi	r2,r2,1
 2005bf4:	10002a1e 	bne	r2,zero,2005ca0 <_free_r+0x2a8>
  {
    sz += nextsz;
 2005bf8:	e0fff517 	ldw	r3,-44(fp)
 2005bfc:	e0bffb17 	ldw	r2,-20(fp)
 2005c00:	1885883a 	add	r2,r3,r2
 2005c04:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 2005c08:	e0bff817 	ldw	r2,-32(fp)
 2005c0c:	1000181e 	bne	r2,zero,2005c70 <_free_r+0x278>
 2005c10:	e0bffa17 	ldw	r2,-24(fp)
 2005c14:	10c00217 	ldw	r3,8(r2)
 2005c18:	00808074 	movhi	r2,513
 2005c1c:	108d4004 	addi	r2,r2,13568
 2005c20:	1880131e 	bne	r3,r2,2005c70 <_free_r+0x278>
    {
      islr = 1;
 2005c24:	00800044 	movi	r2,1
 2005c28:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 2005c2c:	00c08074 	movhi	r3,513
 2005c30:	18cd4004 	addi	r3,r3,13568
 2005c34:	00808074 	movhi	r2,513
 2005c38:	108d4004 	addi	r2,r2,13568
 2005c3c:	e13ff417 	ldw	r4,-48(fp)
 2005c40:	11000315 	stw	r4,12(r2)
 2005c44:	10800317 	ldw	r2,12(r2)
 2005c48:	18800215 	stw	r2,8(r3)
 2005c4c:	00808074 	movhi	r2,513
 2005c50:	108d4004 	addi	r2,r2,13568
 2005c54:	e0fff417 	ldw	r3,-48(fp)
 2005c58:	18800315 	stw	r2,12(r3)
 2005c5c:	e0bff417 	ldw	r2,-48(fp)
 2005c60:	10c00317 	ldw	r3,12(r2)
 2005c64:	e0bff417 	ldw	r2,-48(fp)
 2005c68:	10c00215 	stw	r3,8(r2)
 2005c6c:	00000c06 	br	2005ca0 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 2005c70:	e0bffa17 	ldw	r2,-24(fp)
 2005c74:	10800317 	ldw	r2,12(r2)
 2005c78:	e0bff615 	stw	r2,-40(fp)
 2005c7c:	e0bffa17 	ldw	r2,-24(fp)
 2005c80:	10800217 	ldw	r2,8(r2)
 2005c84:	e0bff715 	stw	r2,-36(fp)
 2005c88:	e0bff717 	ldw	r2,-36(fp)
 2005c8c:	e0fff617 	ldw	r3,-40(fp)
 2005c90:	10c00315 	stw	r3,12(r2)
 2005c94:	e0bff617 	ldw	r2,-40(fp)
 2005c98:	e0fff717 	ldw	r3,-36(fp)
 2005c9c:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 2005ca0:	e0bff517 	ldw	r2,-44(fp)
 2005ca4:	10c00054 	ori	r3,r2,1
 2005ca8:	e0bff417 	ldw	r2,-48(fp)
 2005cac:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 2005cb0:	e0fff417 	ldw	r3,-48(fp)
 2005cb4:	e0bff517 	ldw	r2,-44(fp)
 2005cb8:	1885883a 	add	r2,r3,r2
 2005cbc:	e0fff517 	ldw	r3,-44(fp)
 2005cc0:	10c00015 	stw	r3,0(r2)
  if (!islr)
 2005cc4:	e0bff817 	ldw	r2,-32(fp)
 2005cc8:	10009a1e 	bne	r2,zero,2005f34 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 2005ccc:	e0bff517 	ldw	r2,-44(fp)
 2005cd0:	10808028 	cmpgeui	r2,r2,512
 2005cd4:	10002c1e 	bne	r2,zero,2005d88 <_free_r+0x390>
 2005cd8:	e0bff517 	ldw	r2,-44(fp)
 2005cdc:	1004d0fa 	srli	r2,r2,3
 2005ce0:	e0bffd15 	stw	r2,-12(fp)
 2005ce4:	00c08074 	movhi	r3,513
 2005ce8:	18cd3e04 	addi	r3,r3,13560
 2005cec:	00808074 	movhi	r2,513
 2005cf0:	108d3e04 	addi	r2,r2,13560
 2005cf4:	11000117 	ldw	r4,4(r2)
 2005cf8:	e0bffd17 	ldw	r2,-12(fp)
 2005cfc:	1000010e 	bge	r2,zero,2005d04 <_free_r+0x30c>
 2005d00:	108000c4 	addi	r2,r2,3
 2005d04:	1005d0ba 	srai	r2,r2,2
 2005d08:	100b883a 	mov	r5,r2
 2005d0c:	00800044 	movi	r2,1
 2005d10:	1144983a 	sll	r2,r2,r5
 2005d14:	2084b03a 	or	r2,r4,r2
 2005d18:	18800115 	stw	r2,4(r3)
 2005d1c:	e0bffd17 	ldw	r2,-12(fp)
 2005d20:	10800044 	addi	r2,r2,1
 2005d24:	1085883a 	add	r2,r2,r2
 2005d28:	1085883a 	add	r2,r2,r2
 2005d2c:	1087883a 	add	r3,r2,r2
 2005d30:	00808074 	movhi	r2,513
 2005d34:	108d3e04 	addi	r2,r2,13560
 2005d38:	1885883a 	add	r2,r3,r2
 2005d3c:	10bffe04 	addi	r2,r2,-8
 2005d40:	e0bff615 	stw	r2,-40(fp)
 2005d44:	e0bff617 	ldw	r2,-40(fp)
 2005d48:	10800217 	ldw	r2,8(r2)
 2005d4c:	e0bff715 	stw	r2,-36(fp)
 2005d50:	e0bff417 	ldw	r2,-48(fp)
 2005d54:	e0fff617 	ldw	r3,-40(fp)
 2005d58:	10c00315 	stw	r3,12(r2)
 2005d5c:	e0bff417 	ldw	r2,-48(fp)
 2005d60:	e0fff717 	ldw	r3,-36(fp)
 2005d64:	10c00215 	stw	r3,8(r2)
 2005d68:	e0bff617 	ldw	r2,-40(fp)
 2005d6c:	e0fff417 	ldw	r3,-48(fp)
 2005d70:	10c00215 	stw	r3,8(r2)
 2005d74:	e0bff617 	ldw	r2,-40(fp)
 2005d78:	10c00217 	ldw	r3,8(r2)
 2005d7c:	e0bff717 	ldw	r2,-36(fp)
 2005d80:	10c00315 	stw	r3,12(r2)
 2005d84:	00006b06 	br	2005f34 <_free_r+0x53c>
 2005d88:	e0bff517 	ldw	r2,-44(fp)
 2005d8c:	1004d27a 	srli	r2,r2,9
 2005d90:	1000031e 	bne	r2,zero,2005da0 <_free_r+0x3a8>
 2005d94:	e0bff517 	ldw	r2,-44(fp)
 2005d98:	1004d0fa 	srli	r2,r2,3
 2005d9c:	00002906 	br	2005e44 <_free_r+0x44c>
 2005da0:	e0bff517 	ldw	r2,-44(fp)
 2005da4:	1004d27a 	srli	r2,r2,9
 2005da8:	10800168 	cmpgeui	r2,r2,5
 2005dac:	1000041e 	bne	r2,zero,2005dc0 <_free_r+0x3c8>
 2005db0:	e0bff517 	ldw	r2,-44(fp)
 2005db4:	1004d1ba 	srli	r2,r2,6
 2005db8:	10800e04 	addi	r2,r2,56
 2005dbc:	00002106 	br	2005e44 <_free_r+0x44c>
 2005dc0:	e0bff517 	ldw	r2,-44(fp)
 2005dc4:	1004d27a 	srli	r2,r2,9
 2005dc8:	10800568 	cmpgeui	r2,r2,21
 2005dcc:	1000041e 	bne	r2,zero,2005de0 <_free_r+0x3e8>
 2005dd0:	e0bff517 	ldw	r2,-44(fp)
 2005dd4:	1004d27a 	srli	r2,r2,9
 2005dd8:	108016c4 	addi	r2,r2,91
 2005ddc:	00001906 	br	2005e44 <_free_r+0x44c>
 2005de0:	e0bff517 	ldw	r2,-44(fp)
 2005de4:	1004d27a 	srli	r2,r2,9
 2005de8:	10801568 	cmpgeui	r2,r2,85
 2005dec:	1000041e 	bne	r2,zero,2005e00 <_free_r+0x408>
 2005df0:	e0bff517 	ldw	r2,-44(fp)
 2005df4:	1004d33a 	srli	r2,r2,12
 2005df8:	10801b84 	addi	r2,r2,110
 2005dfc:	00001106 	br	2005e44 <_free_r+0x44c>
 2005e00:	e0bff517 	ldw	r2,-44(fp)
 2005e04:	1004d27a 	srli	r2,r2,9
 2005e08:	10805568 	cmpgeui	r2,r2,341
 2005e0c:	1000041e 	bne	r2,zero,2005e20 <_free_r+0x428>
 2005e10:	e0bff517 	ldw	r2,-44(fp)
 2005e14:	1004d3fa 	srli	r2,r2,15
 2005e18:	10801dc4 	addi	r2,r2,119
 2005e1c:	00000906 	br	2005e44 <_free_r+0x44c>
 2005e20:	e0bff517 	ldw	r2,-44(fp)
 2005e24:	1004d27a 	srli	r2,r2,9
 2005e28:	10815568 	cmpgeui	r2,r2,1365
 2005e2c:	1000041e 	bne	r2,zero,2005e40 <_free_r+0x448>
 2005e30:	e0bff517 	ldw	r2,-44(fp)
 2005e34:	1004d4ba 	srli	r2,r2,18
 2005e38:	10801f04 	addi	r2,r2,124
 2005e3c:	00000106 	br	2005e44 <_free_r+0x44c>
 2005e40:	00801f84 	movi	r2,126
 2005e44:	e0bffd15 	stw	r2,-12(fp)
 2005e48:	e0bffd17 	ldw	r2,-12(fp)
 2005e4c:	10800044 	addi	r2,r2,1
 2005e50:	1085883a 	add	r2,r2,r2
 2005e54:	1085883a 	add	r2,r2,r2
 2005e58:	1087883a 	add	r3,r2,r2
 2005e5c:	00808074 	movhi	r2,513
 2005e60:	108d3e04 	addi	r2,r2,13560
 2005e64:	1885883a 	add	r2,r3,r2
 2005e68:	10bffe04 	addi	r2,r2,-8
 2005e6c:	e0bff615 	stw	r2,-40(fp)
 2005e70:	e0bff617 	ldw	r2,-40(fp)
 2005e74:	10800217 	ldw	r2,8(r2)
 2005e78:	e0bff715 	stw	r2,-36(fp)
 2005e7c:	e0fff717 	ldw	r3,-36(fp)
 2005e80:	e0bff617 	ldw	r2,-40(fp)
 2005e84:	1880121e 	bne	r3,r2,2005ed0 <_free_r+0x4d8>
 2005e88:	00c08074 	movhi	r3,513
 2005e8c:	18cd3e04 	addi	r3,r3,13560
 2005e90:	00808074 	movhi	r2,513
 2005e94:	108d3e04 	addi	r2,r2,13560
 2005e98:	11000117 	ldw	r4,4(r2)
 2005e9c:	e0bffd17 	ldw	r2,-12(fp)
 2005ea0:	1000010e 	bge	r2,zero,2005ea8 <_free_r+0x4b0>
 2005ea4:	108000c4 	addi	r2,r2,3
 2005ea8:	1005d0ba 	srai	r2,r2,2
 2005eac:	100b883a 	mov	r5,r2
 2005eb0:	00800044 	movi	r2,1
 2005eb4:	1144983a 	sll	r2,r2,r5
 2005eb8:	2084b03a 	or	r2,r4,r2
 2005ebc:	18800115 	stw	r2,4(r3)
 2005ec0:	00000f06 	br	2005f00 <_free_r+0x508>
 2005ec4:	e0bff717 	ldw	r2,-36(fp)
 2005ec8:	10800217 	ldw	r2,8(r2)
 2005ecc:	e0bff715 	stw	r2,-36(fp)
 2005ed0:	e0fff717 	ldw	r3,-36(fp)
 2005ed4:	e0bff617 	ldw	r2,-40(fp)
 2005ed8:	18800626 	beq	r3,r2,2005ef4 <_free_r+0x4fc>
 2005edc:	e0bff717 	ldw	r2,-36(fp)
 2005ee0:	10c00117 	ldw	r3,4(r2)
 2005ee4:	00bfff04 	movi	r2,-4
 2005ee8:	1884703a 	and	r2,r3,r2
 2005eec:	e0fff517 	ldw	r3,-44(fp)
 2005ef0:	18bff436 	bltu	r3,r2,2005ec4 <_free_r+0x4cc>
 2005ef4:	e0bff717 	ldw	r2,-36(fp)
 2005ef8:	10800317 	ldw	r2,12(r2)
 2005efc:	e0bff615 	stw	r2,-40(fp)
 2005f00:	e0bff417 	ldw	r2,-48(fp)
 2005f04:	e0fff617 	ldw	r3,-40(fp)
 2005f08:	10c00315 	stw	r3,12(r2)
 2005f0c:	e0bff417 	ldw	r2,-48(fp)
 2005f10:	e0fff717 	ldw	r3,-36(fp)
 2005f14:	10c00215 	stw	r3,8(r2)
 2005f18:	e0bff617 	ldw	r2,-40(fp)
 2005f1c:	e0fff417 	ldw	r3,-48(fp)
 2005f20:	10c00215 	stw	r3,8(r2)
 2005f24:	e0bff617 	ldw	r2,-40(fp)
 2005f28:	10c00217 	ldw	r3,8(r2)
 2005f2c:	e0bff717 	ldw	r2,-36(fp)
 2005f30:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 2005f34:	e13ffe17 	ldw	r4,-8(fp)
 2005f38:	20106100 	call	2010610 <__malloc_unlock>
 2005f3c:	00000106 	br	2005f44 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 2005f40:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 2005f44:	e037883a 	mov	sp,fp
 2005f48:	dfc00117 	ldw	ra,4(sp)
 2005f4c:	df000017 	ldw	fp,0(sp)
 2005f50:	dec00204 	addi	sp,sp,8
 2005f54:	f800283a 	ret

02005f58 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 2005f58:	defff704 	addi	sp,sp,-36
 2005f5c:	dfc00815 	stw	ra,32(sp)
 2005f60:	df000715 	stw	fp,28(sp)
 2005f64:	df000704 	addi	fp,sp,28
 2005f68:	e13ffe15 	stw	r4,-8(fp)
 2005f6c:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 2005f70:	00840004 	movi	r2,4096
 2005f74:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 2005f78:	e13ffe17 	ldw	r4,-8(fp)
 2005f7c:	20105ec0 	call	20105ec <__malloc_lock>

  top_size = chunksize(top);
 2005f80:	00808074 	movhi	r2,513
 2005f84:	108d3e04 	addi	r2,r2,13560
 2005f88:	10800217 	ldw	r2,8(r2)
 2005f8c:	10800117 	ldw	r2,4(r2)
 2005f90:	1007883a 	mov	r3,r2
 2005f94:	00bfff04 	movi	r2,-4
 2005f98:	1884703a 	and	r2,r3,r2
 2005f9c:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 2005fa0:	e0fffa17 	ldw	r3,-24(fp)
 2005fa4:	e0bfff17 	ldw	r2,-4(fp)
 2005fa8:	1887c83a 	sub	r3,r3,r2
 2005fac:	e0bff917 	ldw	r2,-28(fp)
 2005fb0:	1885883a 	add	r2,r3,r2
 2005fb4:	10bffbc4 	addi	r2,r2,-17
 2005fb8:	e17ff917 	ldw	r5,-28(fp)
 2005fbc:	1009883a 	mov	r4,r2
 2005fc0:	200db800 	call	200db80 <__udivsi3>
 2005fc4:	10ffffc4 	addi	r3,r2,-1
 2005fc8:	e0bff917 	ldw	r2,-28(fp)
 2005fcc:	1885383a 	mul	r2,r3,r2
 2005fd0:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 2005fd4:	e0bff917 	ldw	r2,-28(fp)
 2005fd8:	e0fffb17 	ldw	r3,-20(fp)
 2005fdc:	1880040e 	bge	r3,r2,2005ff0 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 2005fe0:	e13ffe17 	ldw	r4,-8(fp)
 2005fe4:	20106100 	call	2010610 <__malloc_unlock>
    return 0;
 2005fe8:	0005883a 	mov	r2,zero
 2005fec:	00004806 	br	2006110 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 2005ff0:	000b883a 	mov	r5,zero
 2005ff4:	e13ffe17 	ldw	r4,-8(fp)
 2005ff8:	200aa300 	call	200aa30 <_sbrk_r>
 2005ffc:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 2006000:	00808074 	movhi	r2,513
 2006004:	108d3e04 	addi	r2,r2,13560
 2006008:	10c00217 	ldw	r3,8(r2)
 200600c:	e0bffa17 	ldw	r2,-24(fp)
 2006010:	1887883a 	add	r3,r3,r2
 2006014:	e0bffc17 	ldw	r2,-16(fp)
 2006018:	18800426 	beq	r3,r2,200602c <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200601c:	e13ffe17 	ldw	r4,-8(fp)
 2006020:	20106100 	call	2010610 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 2006024:	0005883a 	mov	r2,zero
 2006028:	00003906 	br	2006110 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200602c:	e0bffb17 	ldw	r2,-20(fp)
 2006030:	0085c83a 	sub	r2,zero,r2
 2006034:	100b883a 	mov	r5,r2
 2006038:	e13ffe17 	ldw	r4,-8(fp)
 200603c:	200aa300 	call	200aa30 <_sbrk_r>
 2006040:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 2006044:	e0bffd17 	ldw	r2,-12(fp)
 2006048:	10bfffd8 	cmpnei	r2,r2,-1
 200604c:	10001d1e 	bne	r2,zero,20060c4 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 2006050:	000b883a 	mov	r5,zero
 2006054:	e13ffe17 	ldw	r4,-8(fp)
 2006058:	200aa300 	call	200aa30 <_sbrk_r>
 200605c:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 2006060:	e0fffc17 	ldw	r3,-16(fp)
 2006064:	00808074 	movhi	r2,513
 2006068:	108d3e04 	addi	r2,r2,13560
 200606c:	10800217 	ldw	r2,8(r2)
 2006070:	1885c83a 	sub	r2,r3,r2
 2006074:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 2006078:	e0bffa17 	ldw	r2,-24(fp)
 200607c:	10800410 	cmplti	r2,r2,16
 2006080:	10000c1e 	bne	r2,zero,20060b4 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 2006084:	e0bffc17 	ldw	r2,-16(fp)
 2006088:	d0e00417 	ldw	r3,-32752(gp)
 200608c:	10c7c83a 	sub	r3,r2,r3
 2006090:	00808074 	movhi	r2,513
 2006094:	1099b504 	addi	r2,r2,26324
 2006098:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200609c:	00808074 	movhi	r2,513
 20060a0:	108d3e04 	addi	r2,r2,13560
 20060a4:	10800217 	ldw	r2,8(r2)
 20060a8:	e0fffa17 	ldw	r3,-24(fp)
 20060ac:	18c00054 	ori	r3,r3,1
 20060b0:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 20060b4:	e13ffe17 	ldw	r4,-8(fp)
 20060b8:	20106100 	call	2010610 <__malloc_unlock>
        return 0; 
 20060bc:	0005883a 	mov	r2,zero
 20060c0:	00001306 	br	2006110 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 20060c4:	00808074 	movhi	r2,513
 20060c8:	108d3e04 	addi	r2,r2,13560
 20060cc:	10800217 	ldw	r2,8(r2)
 20060d0:	e13ffa17 	ldw	r4,-24(fp)
 20060d4:	e0fffb17 	ldw	r3,-20(fp)
 20060d8:	20c7c83a 	sub	r3,r4,r3
 20060dc:	18c00054 	ori	r3,r3,1
 20060e0:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 20060e4:	00808074 	movhi	r2,513
 20060e8:	1099b504 	addi	r2,r2,26324
 20060ec:	10c00017 	ldw	r3,0(r2)
 20060f0:	e0bffb17 	ldw	r2,-20(fp)
 20060f4:	1887c83a 	sub	r3,r3,r2
 20060f8:	00808074 	movhi	r2,513
 20060fc:	1099b504 	addi	r2,r2,26324
 2006100:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 2006104:	e13ffe17 	ldw	r4,-8(fp)
 2006108:	20106100 	call	2010610 <__malloc_unlock>
        return 1;
 200610c:	00800044 	movi	r2,1
      }
    }
  }
}
 2006110:	e037883a 	mov	sp,fp
 2006114:	dfc00117 	ldw	ra,4(sp)
 2006118:	df000017 	ldw	fp,0(sp)
 200611c:	dec00204 	addi	sp,sp,8
 2006120:	f800283a 	ret

02006124 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 2006124:	defff004 	addi	sp,sp,-64
 2006128:	dfc00f15 	stw	ra,60(sp)
 200612c:	df000e15 	stw	fp,56(sp)
 2006130:	dd800d15 	stw	r22,52(sp)
 2006134:	dd400c15 	stw	r21,48(sp)
 2006138:	dd000b15 	stw	r20,44(sp)
 200613c:	dcc00a15 	stw	r19,40(sp)
 2006140:	dc800915 	stw	r18,36(sp)
 2006144:	dc400815 	stw	r17,32(sp)
 2006148:	dc000715 	stw	r16,28(sp)
 200614c:	df000e04 	addi	fp,sp,56
 2006150:	e13ff815 	stw	r4,-32(fp)
 2006154:	2821883a 	mov	r16,r5
 2006158:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200615c:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 2006160:	ac800217 	ldw	r18,8(r21)
 2006164:	9000021e 	bne	r18,zero,2006170 <__sfvwrite_r+0x4c>
    return 0;
 2006168:	0005883a 	mov	r2,zero
 200616c:	00015806 	br	20066d0 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 2006170:	8080030b 	ldhu	r2,12(r16)
 2006174:	10bfffcc 	andi	r2,r2,65535
 2006178:	1080020c 	andi	r2,r2,8
 200617c:	10000226 	beq	r2,zero,2006188 <__sfvwrite_r+0x64>
 2006180:	80800417 	ldw	r2,16(r16)
 2006184:	1000061e 	bne	r2,zero,20061a0 <__sfvwrite_r+0x7c>
 2006188:	800b883a 	mov	r5,r16
 200618c:	e13ff817 	ldw	r4,-32(fp)
 2006190:	2002f880 	call	2002f88 <__swsetup_r>
 2006194:	10000226 	beq	r2,zero,20061a0 <__sfvwrite_r+0x7c>
    return EOF;
 2006198:	00bfffc4 	movi	r2,-1
 200619c:	00014c06 	br	20066d0 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 20061a0:	ad000017 	ldw	r20,0(r21)
  len = 0;
 20061a4:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 20061a8:	8080030b 	ldhu	r2,12(r16)
 20061ac:	10bfffcc 	andi	r2,r2,65535
 20061b0:	1080008c 	andi	r2,r2,2
 20061b4:	10001f26 	beq	r2,zero,2006234 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 20061b8:	00000306 	br	20061c8 <__sfvwrite_r+0xa4>
 20061bc:	a4c00017 	ldw	r19,0(r20)
 20061c0:	a4800117 	ldw	r18,4(r20)
 20061c4:	a5000204 	addi	r20,r20,8
 20061c8:	903ffc26 	beq	r18,zero,20061bc <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 20061cc:	82000917 	ldw	r8,36(r16)
 20061d0:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 20061d4:	9005883a 	mov	r2,r18
 20061d8:	00e00034 	movhi	r3,32768
 20061dc:	18ff0004 	addi	r3,r3,-1024
 20061e0:	1880022e 	bgeu	r3,r2,20061ec <__sfvwrite_r+0xc8>
 20061e4:	00a00034 	movhi	r2,32768
 20061e8:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 20061ec:	100f883a 	mov	r7,r2
 20061f0:	980d883a 	mov	r6,r19
 20061f4:	200b883a 	mov	r5,r4
 20061f8:	e13ff817 	ldw	r4,-32(fp)
 20061fc:	403ee83a 	callr	r8
 2006200:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 2006204:	0441290e 	bge	zero,r17,20066ac <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 2006208:	8805883a 	mov	r2,r17
 200620c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 2006210:	8805883a 	mov	r2,r17
 2006214:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 2006218:	a8800217 	ldw	r2,8(r21)
 200621c:	8807883a 	mov	r3,r17
 2006220:	10c5c83a 	sub	r2,r2,r3
 2006224:	a8800215 	stw	r2,8(r21)
 2006228:	a8800217 	ldw	r2,8(r21)
 200622c:	103fe61e 	bne	r2,zero,20061c8 <__sfvwrite_r+0xa4>
 2006230:	00011c06 	br	20066a4 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 2006234:	8080030b 	ldhu	r2,12(r16)
 2006238:	10bfffcc 	andi	r2,r2,65535
 200623c:	1080004c 	andi	r2,r2,1
 2006240:	1000b51e 	bne	r2,zero,2006518 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 2006244:	00000306 	br	2006254 <__sfvwrite_r+0x130>
 2006248:	a4c00017 	ldw	r19,0(r20)
 200624c:	a4800117 	ldw	r18,4(r20)
 2006250:	a5000204 	addi	r20,r20,8
 2006254:	903ffc26 	beq	r18,zero,2006248 <__sfvwrite_r+0x124>
	  w = fp->_w;
 2006258:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200625c:	8080030b 	ldhu	r2,12(r16)
 2006260:	10bfffcc 	andi	r2,r2,65535
 2006264:	1080800c 	andi	r2,r2,512
 2006268:	10006b26 	beq	r2,zero,2006418 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200626c:	8805883a 	mov	r2,r17
 2006270:	90805736 	bltu	r18,r2,20063d0 <__sfvwrite_r+0x2ac>
 2006274:	8080030b 	ldhu	r2,12(r16)
 2006278:	10bfffcc 	andi	r2,r2,65535
 200627c:	1081200c 	andi	r2,r2,1152
 2006280:	10005326 	beq	r2,zero,20063d0 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 2006284:	80800017 	ldw	r2,0(r16)
 2006288:	1007883a 	mov	r3,r2
 200628c:	80800417 	ldw	r2,16(r16)
 2006290:	1885c83a 	sub	r2,r3,r2
 2006294:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 2006298:	80c00517 	ldw	r3,20(r16)
 200629c:	1805883a 	mov	r2,r3
 20062a0:	1085883a 	add	r2,r2,r2
 20062a4:	10c5883a 	add	r2,r2,r3
 20062a8:	1006d7fa 	srli	r3,r2,31
 20062ac:	1885883a 	add	r2,r3,r2
 20062b0:	1005d07a 	srai	r2,r2,1
 20062b4:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 20062b8:	e0bff617 	ldw	r2,-40(fp)
 20062bc:	1485883a 	add	r2,r2,r18
 20062c0:	10800044 	addi	r2,r2,1
 20062c4:	e0fff517 	ldw	r3,-44(fp)
 20062c8:	1880042e 	bgeu	r3,r2,20062dc <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 20062cc:	e0bff617 	ldw	r2,-40(fp)
 20062d0:	1485883a 	add	r2,r2,r18
 20062d4:	10800044 	addi	r2,r2,1
 20062d8:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 20062dc:	8080030b 	ldhu	r2,12(r16)
 20062e0:	10bfffcc 	andi	r2,r2,65535
 20062e4:	1081000c 	andi	r2,r2,1024
 20062e8:	10001726 	beq	r2,zero,2006348 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 20062ec:	e0bff517 	ldw	r2,-44(fp)
 20062f0:	100b883a 	mov	r5,r2
 20062f4:	e13ff817 	ldw	r4,-32(fp)
 20062f8:	20070380 	call	2007038 <_malloc_r>
 20062fc:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 2006300:	e0bff417 	ldw	r2,-48(fp)
 2006304:	1000041e 	bne	r2,zero,2006318 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 2006308:	e0bff817 	ldw	r2,-32(fp)
 200630c:	00c00304 	movi	r3,12
 2006310:	10c00015 	stw	r3,0(r2)
			  goto err;
 2006314:	0000ea06 	br	20066c0 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 2006318:	80800417 	ldw	r2,16(r16)
 200631c:	e0fff617 	ldw	r3,-40(fp)
 2006320:	180d883a 	mov	r6,r3
 2006324:	100b883a 	mov	r5,r2
 2006328:	e13ff417 	ldw	r4,-48(fp)
 200632c:	2007d700 	call	2007d70 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 2006330:	80c0030b 	ldhu	r3,12(r16)
 2006334:	00bedfc4 	movi	r2,-1153
 2006338:	1884703a 	and	r2,r3,r2
 200633c:	10802014 	ori	r2,r2,128
 2006340:	8080030d 	sth	r2,12(r16)
 2006344:	00001506 	br	200639c <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 2006348:	80800417 	ldw	r2,16(r16)
 200634c:	e0fff517 	ldw	r3,-44(fp)
 2006350:	180d883a 	mov	r6,r3
 2006354:	100b883a 	mov	r5,r2
 2006358:	e13ff817 	ldw	r4,-32(fp)
 200635c:	2009d3c0 	call	2009d3c <_realloc_r>
 2006360:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 2006364:	e0bff417 	ldw	r2,-48(fp)
 2006368:	10000c1e 	bne	r2,zero,200639c <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200636c:	80800417 	ldw	r2,16(r16)
 2006370:	100b883a 	mov	r5,r2
 2006374:	e13ff817 	ldw	r4,-32(fp)
 2006378:	20059f80 	call	20059f8 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200637c:	80c0030b 	ldhu	r3,12(r16)
 2006380:	00bfdfc4 	movi	r2,-129
 2006384:	1884703a 	and	r2,r3,r2
 2006388:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200638c:	e0bff817 	ldw	r2,-32(fp)
 2006390:	00c00304 	movi	r3,12
 2006394:	10c00015 	stw	r3,0(r2)
			  goto err;
 2006398:	0000c906 	br	20066c0 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200639c:	e0bff417 	ldw	r2,-48(fp)
 20063a0:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 20063a4:	e0bff617 	ldw	r2,-40(fp)
 20063a8:	e0fff417 	ldw	r3,-48(fp)
 20063ac:	1885883a 	add	r2,r3,r2
 20063b0:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 20063b4:	e0bff517 	ldw	r2,-44(fp)
 20063b8:	80800515 	stw	r2,20(r16)
		  w = len;
 20063bc:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 20063c0:	e0fff517 	ldw	r3,-44(fp)
 20063c4:	e0bff617 	ldw	r2,-40(fp)
 20063c8:	1885c83a 	sub	r2,r3,r2
 20063cc:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 20063d0:	8805883a 	mov	r2,r17
 20063d4:	9080012e 	bgeu	r18,r2,20063dc <__sfvwrite_r+0x2b8>
		w = len;
 20063d8:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 20063dc:	80800017 	ldw	r2,0(r16)
 20063e0:	8807883a 	mov	r3,r17
 20063e4:	180d883a 	mov	r6,r3
 20063e8:	980b883a 	mov	r5,r19
 20063ec:	1009883a 	mov	r4,r2
 20063f0:	2007ef80 	call	2007ef8 <memmove>
	      fp->_w -= w;
 20063f4:	80800217 	ldw	r2,8(r16)
 20063f8:	1445c83a 	sub	r2,r2,r17
 20063fc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2006400:	80800017 	ldw	r2,0(r16)
 2006404:	8807883a 	mov	r3,r17
 2006408:	10c5883a 	add	r2,r2,r3
 200640c:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 2006410:	9023883a 	mov	r17,r18
 2006414:	00003506 	br	20064ec <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 2006418:	80800017 	ldw	r2,0(r16)
 200641c:	80c00417 	ldw	r3,16(r16)
 2006420:	18800236 	bltu	r3,r2,200642c <__sfvwrite_r+0x308>
 2006424:	80800517 	ldw	r2,20(r16)
 2006428:	9080182e 	bgeu	r18,r2,200648c <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200642c:	8805883a 	mov	r2,r17
 2006430:	9080012e 	bgeu	r18,r2,2006438 <__sfvwrite_r+0x314>
 2006434:	9005883a 	mov	r2,r18
 2006438:	1023883a 	mov	r17,r2
	      COPY (w);
 200643c:	80800017 	ldw	r2,0(r16)
 2006440:	8807883a 	mov	r3,r17
 2006444:	180d883a 	mov	r6,r3
 2006448:	980b883a 	mov	r5,r19
 200644c:	1009883a 	mov	r4,r2
 2006450:	2007ef80 	call	2007ef8 <memmove>
	      fp->_w -= w;
 2006454:	80800217 	ldw	r2,8(r16)
 2006458:	1445c83a 	sub	r2,r2,r17
 200645c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2006460:	80800017 	ldw	r2,0(r16)
 2006464:	8807883a 	mov	r3,r17
 2006468:	10c5883a 	add	r2,r2,r3
 200646c:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 2006470:	80800217 	ldw	r2,8(r16)
 2006474:	10001c1e 	bne	r2,zero,20064e8 <__sfvwrite_r+0x3c4>
 2006478:	800b883a 	mov	r5,r16
 200647c:	e13ff817 	ldw	r4,-32(fp)
 2006480:	20053580 	call	2005358 <_fflush_r>
 2006484:	10001826 	beq	r2,zero,20064e8 <__sfvwrite_r+0x3c4>
		goto err;
 2006488:	00008d06 	br	20066c0 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200648c:	9005883a 	mov	r2,r18
 2006490:	00e00034 	movhi	r3,32768
 2006494:	10c00236 	bltu	r2,r3,20064a0 <__sfvwrite_r+0x37c>
 2006498:	00a00034 	movhi	r2,32768
 200649c:	10bfffc4 	addi	r2,r2,-1
 20064a0:	1007883a 	mov	r3,r2
 20064a4:	80800517 	ldw	r2,20(r16)
 20064a8:	100b883a 	mov	r5,r2
 20064ac:	1809883a 	mov	r4,r3
 20064b0:	200da880 	call	200da88 <__divsi3>
 20064b4:	1007883a 	mov	r3,r2
 20064b8:	80800517 	ldw	r2,20(r16)
 20064bc:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 20064c0:	80800917 	ldw	r2,36(r16)
 20064c4:	80c00717 	ldw	r3,28(r16)
 20064c8:	880f883a 	mov	r7,r17
 20064cc:	980d883a 	mov	r6,r19
 20064d0:	180b883a 	mov	r5,r3
 20064d4:	e13ff817 	ldw	r4,-32(fp)
 20064d8:	103ee83a 	callr	r2
 20064dc:	1023883a 	mov	r17,r2
	      if (w <= 0)
 20064e0:	0440740e 	bge	zero,r17,20066b4 <__sfvwrite_r+0x590>
 20064e4:	00000106 	br	20064ec <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 20064e8:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 20064ec:	8805883a 	mov	r2,r17
 20064f0:	98a7883a 	add	r19,r19,r2
	  len -= w;
 20064f4:	8805883a 	mov	r2,r17
 20064f8:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 20064fc:	a8800217 	ldw	r2,8(r21)
 2006500:	8807883a 	mov	r3,r17
 2006504:	10c5c83a 	sub	r2,r2,r3
 2006508:	a8800215 	stw	r2,8(r21)
 200650c:	a8800217 	ldw	r2,8(r21)
 2006510:	103f501e 	bne	r2,zero,2006254 <__sfvwrite_r+0x130>
 2006514:	00006306 	br	20066a4 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 2006518:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200651c:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 2006520:	00000406 	br	2006534 <__sfvwrite_r+0x410>
 2006524:	e03ff215 	stw	zero,-56(fp)
 2006528:	a4c00017 	ldw	r19,0(r20)
 200652c:	a4800117 	ldw	r18,4(r20)
 2006530:	a5000204 	addi	r20,r20,8
 2006534:	903ffb26 	beq	r18,zero,2006524 <__sfvwrite_r+0x400>
	  if (!nlknown)
 2006538:	e0bff217 	ldw	r2,-56(fp)
 200653c:	1000111e 	bne	r2,zero,2006584 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 2006540:	900d883a 	mov	r6,r18
 2006544:	01400284 	movi	r5,10
 2006548:	9809883a 	mov	r4,r19
 200654c:	2007bb40 	call	2007bb4 <memchr>
 2006550:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 2006554:	e0bff717 	ldw	r2,-36(fp)
 2006558:	10000626 	beq	r2,zero,2006574 <__sfvwrite_r+0x450>
 200655c:	e0bff717 	ldw	r2,-36(fp)
 2006560:	10800044 	addi	r2,r2,1
 2006564:	1007883a 	mov	r3,r2
 2006568:	9805883a 	mov	r2,r19
 200656c:	1885c83a 	sub	r2,r3,r2
 2006570:	00000106 	br	2006578 <__sfvwrite_r+0x454>
 2006574:	90800044 	addi	r2,r18,1
 2006578:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200657c:	00800044 	movi	r2,1
 2006580:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 2006584:	e0bff317 	ldw	r2,-52(fp)
 2006588:	9080012e 	bgeu	r18,r2,2006590 <__sfvwrite_r+0x46c>
 200658c:	9005883a 	mov	r2,r18
 2006590:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 2006594:	80c00217 	ldw	r3,8(r16)
 2006598:	80800517 	ldw	r2,20(r16)
 200659c:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 20065a0:	80800017 	ldw	r2,0(r16)
 20065a4:	80c00417 	ldw	r3,16(r16)
 20065a8:	1880102e 	bgeu	r3,r2,20065ec <__sfvwrite_r+0x4c8>
 20065ac:	8d800f0e 	bge	r17,r22,20065ec <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 20065b0:	80800017 	ldw	r2,0(r16)
 20065b4:	8807883a 	mov	r3,r17
 20065b8:	180d883a 	mov	r6,r3
 20065bc:	980b883a 	mov	r5,r19
 20065c0:	1009883a 	mov	r4,r2
 20065c4:	2007ef80 	call	2007ef8 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 20065c8:	80800017 	ldw	r2,0(r16)
 20065cc:	8807883a 	mov	r3,r17
 20065d0:	10c5883a 	add	r2,r2,r3
 20065d4:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 20065d8:	800b883a 	mov	r5,r16
 20065dc:	e13ff817 	ldw	r4,-32(fp)
 20065e0:	20053580 	call	2005358 <_fflush_r>
 20065e4:	10001b26 	beq	r2,zero,2006654 <__sfvwrite_r+0x530>
		goto err;
 20065e8:	00003506 	br	20066c0 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 20065ec:	84400517 	ldw	r17,20(r16)
 20065f0:	b4400a16 	blt	r22,r17,200661c <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 20065f4:	80800917 	ldw	r2,36(r16)
 20065f8:	80c00717 	ldw	r3,28(r16)
 20065fc:	880f883a 	mov	r7,r17
 2006600:	980d883a 	mov	r6,r19
 2006604:	180b883a 	mov	r5,r3
 2006608:	e13ff817 	ldw	r4,-32(fp)
 200660c:	103ee83a 	callr	r2
 2006610:	1023883a 	mov	r17,r2
	      if (w <= 0)
 2006614:	04400f16 	blt	zero,r17,2006654 <__sfvwrite_r+0x530>
		goto err;
 2006618:	00002906 	br	20066c0 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200661c:	b023883a 	mov	r17,r22
	      COPY (w);
 2006620:	80800017 	ldw	r2,0(r16)
 2006624:	8807883a 	mov	r3,r17
 2006628:	180d883a 	mov	r6,r3
 200662c:	980b883a 	mov	r5,r19
 2006630:	1009883a 	mov	r4,r2
 2006634:	2007ef80 	call	2007ef8 <memmove>
	      fp->_w -= w;
 2006638:	80800217 	ldw	r2,8(r16)
 200663c:	1445c83a 	sub	r2,r2,r17
 2006640:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2006644:	80800017 	ldw	r2,0(r16)
 2006648:	8807883a 	mov	r3,r17
 200664c:	10c5883a 	add	r2,r2,r3
 2006650:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 2006654:	e0bff317 	ldw	r2,-52(fp)
 2006658:	1445c83a 	sub	r2,r2,r17
 200665c:	e0bff315 	stw	r2,-52(fp)
 2006660:	e0bff317 	ldw	r2,-52(fp)
 2006664:	1000051e 	bne	r2,zero,200667c <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 2006668:	800b883a 	mov	r5,r16
 200666c:	e13ff817 	ldw	r4,-32(fp)
 2006670:	20053580 	call	2005358 <_fflush_r>
 2006674:	1000111e 	bne	r2,zero,20066bc <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 2006678:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200667c:	8805883a 	mov	r2,r17
 2006680:	98a7883a 	add	r19,r19,r2
	  len -= w;
 2006684:	8805883a 	mov	r2,r17
 2006688:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200668c:	a8800217 	ldw	r2,8(r21)
 2006690:	8807883a 	mov	r3,r17
 2006694:	10c5c83a 	sub	r2,r2,r3
 2006698:	a8800215 	stw	r2,8(r21)
 200669c:	a8800217 	ldw	r2,8(r21)
 20066a0:	103fa41e 	bne	r2,zero,2006534 <__sfvwrite_r+0x410>
    }
  return 0;
 20066a4:	0005883a 	mov	r2,zero
 20066a8:	00000906 	br	20066d0 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 20066ac:	0001883a 	nop
 20066b0:	00000306 	br	20066c0 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 20066b4:	0001883a 	nop
 20066b8:	00000106 	br	20066c0 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 20066bc:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 20066c0:	8080030b 	ldhu	r2,12(r16)
 20066c4:	10801014 	ori	r2,r2,64
 20066c8:	8080030d 	sth	r2,12(r16)
  return EOF;
 20066cc:	00bfffc4 	movi	r2,-1
}
 20066d0:	e6fff904 	addi	sp,fp,-28
 20066d4:	dfc00817 	ldw	ra,32(sp)
 20066d8:	df000717 	ldw	fp,28(sp)
 20066dc:	dd800617 	ldw	r22,24(sp)
 20066e0:	dd400517 	ldw	r21,20(sp)
 20066e4:	dd000417 	ldw	r20,16(sp)
 20066e8:	dcc00317 	ldw	r19,12(sp)
 20066ec:	dc800217 	ldw	r18,8(sp)
 20066f0:	dc400117 	ldw	r17,4(sp)
 20066f4:	dc000017 	ldw	r16,0(sp)
 20066f8:	dec00904 	addi	sp,sp,36
 20066fc:	f800283a 	ret

02006700 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 2006700:	defff804 	addi	sp,sp,-32
 2006704:	dfc00715 	stw	ra,28(sp)
 2006708:	df000615 	stw	fp,24(sp)
 200670c:	dd000515 	stw	r20,20(sp)
 2006710:	dcc00415 	stw	r19,16(sp)
 2006714:	dc800315 	stw	r18,12(sp)
 2006718:	dc400215 	stw	r17,8(sp)
 200671c:	dc000115 	stw	r16,4(sp)
 2006720:	df000604 	addi	fp,sp,24
 2006724:	e13ffa15 	stw	r4,-24(fp)
 2006728:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200672c:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2006730:	e0bffa17 	ldw	r2,-24(fp)
 2006734:	1440b804 	addi	r17,r2,736
 2006738:	00001b06 	br	20067a8 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200673c:	8c000217 	ldw	r16,8(r17)
 2006740:	8c800117 	ldw	r18,4(r17)
 2006744:	00001506 	br	200679c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 2006748:	8080030b 	ldhu	r2,12(r16)
 200674c:	10bfffcc 	andi	r2,r2,65535
 2006750:	10a0001c 	xori	r2,r2,32768
 2006754:	10a00004 	addi	r2,r2,-32768
 2006758:	10000f26 	beq	r2,zero,2006798 <_fwalk+0x98>
 200675c:	8080030b 	ldhu	r2,12(r16)
 2006760:	10bfffcc 	andi	r2,r2,65535
 2006764:	10a0001c 	xori	r2,r2,32768
 2006768:	10a00004 	addi	r2,r2,-32768
 200676c:	10800060 	cmpeqi	r2,r2,1
 2006770:	1000091e 	bne	r2,zero,2006798 <_fwalk+0x98>
 2006774:	8080038b 	ldhu	r2,14(r16)
 2006778:	10bfffcc 	andi	r2,r2,65535
 200677c:	10a0001c 	xori	r2,r2,32768
 2006780:	10a00004 	addi	r2,r2,-32768
 2006784:	10bfffe0 	cmpeqi	r2,r2,-1
 2006788:	1000031e 	bne	r2,zero,2006798 <_fwalk+0x98>
	ret |= (*function) (fp);
 200678c:	8009883a 	mov	r4,r16
 2006790:	a03ee83a 	callr	r20
 2006794:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2006798:	84001a04 	addi	r16,r16,104
 200679c:	94bfffc4 	addi	r18,r18,-1
 20067a0:	903fe90e 	bge	r18,zero,2006748 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 20067a4:	8c400017 	ldw	r17,0(r17)
 20067a8:	883fe41e 	bne	r17,zero,200673c <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 20067ac:	9805883a 	mov	r2,r19
}
 20067b0:	e6fffb04 	addi	sp,fp,-20
 20067b4:	dfc00617 	ldw	ra,24(sp)
 20067b8:	df000517 	ldw	fp,20(sp)
 20067bc:	dd000417 	ldw	r20,16(sp)
 20067c0:	dcc00317 	ldw	r19,12(sp)
 20067c4:	dc800217 	ldw	r18,8(sp)
 20067c8:	dc400117 	ldw	r17,4(sp)
 20067cc:	dc000017 	ldw	r16,0(sp)
 20067d0:	dec00704 	addi	sp,sp,28
 20067d4:	f800283a 	ret

020067d8 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 20067d8:	defff804 	addi	sp,sp,-32
 20067dc:	dfc00715 	stw	ra,28(sp)
 20067e0:	df000615 	stw	fp,24(sp)
 20067e4:	dd000515 	stw	r20,20(sp)
 20067e8:	dcc00415 	stw	r19,16(sp)
 20067ec:	dc800315 	stw	r18,12(sp)
 20067f0:	dc400215 	stw	r17,8(sp)
 20067f4:	dc000115 	stw	r16,4(sp)
 20067f8:	df000604 	addi	fp,sp,24
 20067fc:	e13ffa15 	stw	r4,-24(fp)
 2006800:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 2006804:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2006808:	e0bffa17 	ldw	r2,-24(fp)
 200680c:	1440b804 	addi	r17,r2,736
 2006810:	00001c06 	br	2006884 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2006814:	8c000217 	ldw	r16,8(r17)
 2006818:	8c800117 	ldw	r18,4(r17)
 200681c:	00001606 	br	2006878 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 2006820:	8080030b 	ldhu	r2,12(r16)
 2006824:	10bfffcc 	andi	r2,r2,65535
 2006828:	10a0001c 	xori	r2,r2,32768
 200682c:	10a00004 	addi	r2,r2,-32768
 2006830:	10001026 	beq	r2,zero,2006874 <_fwalk_reent+0x9c>
 2006834:	8080030b 	ldhu	r2,12(r16)
 2006838:	10bfffcc 	andi	r2,r2,65535
 200683c:	10a0001c 	xori	r2,r2,32768
 2006840:	10a00004 	addi	r2,r2,-32768
 2006844:	10800060 	cmpeqi	r2,r2,1
 2006848:	10000a1e 	bne	r2,zero,2006874 <_fwalk_reent+0x9c>
 200684c:	8080038b 	ldhu	r2,14(r16)
 2006850:	10bfffcc 	andi	r2,r2,65535
 2006854:	10a0001c 	xori	r2,r2,32768
 2006858:	10a00004 	addi	r2,r2,-32768
 200685c:	10bfffe0 	cmpeqi	r2,r2,-1
 2006860:	1000041e 	bne	r2,zero,2006874 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 2006864:	800b883a 	mov	r5,r16
 2006868:	e13ffa17 	ldw	r4,-24(fp)
 200686c:	a03ee83a 	callr	r20
 2006870:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2006874:	84001a04 	addi	r16,r16,104
 2006878:	94bfffc4 	addi	r18,r18,-1
 200687c:	903fe80e 	bge	r18,zero,2006820 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2006880:	8c400017 	ldw	r17,0(r17)
 2006884:	883fe31e 	bne	r17,zero,2006814 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 2006888:	9805883a 	mov	r2,r19
}
 200688c:	e6fffb04 	addi	sp,fp,-20
 2006890:	dfc00617 	ldw	ra,24(sp)
 2006894:	df000517 	ldw	fp,20(sp)
 2006898:	dd000417 	ldw	r20,16(sp)
 200689c:	dcc00317 	ldw	r19,12(sp)
 20068a0:	dc800217 	ldw	r18,8(sp)
 20068a4:	dc400117 	ldw	r17,4(sp)
 20068a8:	dc000017 	ldw	r16,0(sp)
 20068ac:	dec00704 	addi	sp,sp,28
 20068b0:	f800283a 	ret

020068b4 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 20068b4:	defffb04 	addi	sp,sp,-20
 20068b8:	dfc00415 	stw	ra,16(sp)
 20068bc:	df000315 	stw	fp,12(sp)
 20068c0:	df000304 	addi	fp,sp,12
 20068c4:	e13ffd15 	stw	r4,-12(fp)
 20068c8:	e17ffe15 	stw	r5,-8(fp)
 20068cc:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 20068d0:	e0bfff17 	ldw	r2,-4(fp)
 20068d4:	10001126 	beq	r2,zero,200691c <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 20068d8:	01408074 	movhi	r5,513
 20068dc:	294b9e04 	addi	r5,r5,11896
 20068e0:	e13fff17 	ldw	r4,-4(fp)
 20068e4:	200ad040 	call	200ad04 <strcmp>
 20068e8:	10000c26 	beq	r2,zero,200691c <_setlocale_r+0x68>
 20068ec:	01408074 	movhi	r5,513
 20068f0:	294ba004 	addi	r5,r5,11904
 20068f4:	e13fff17 	ldw	r4,-4(fp)
 20068f8:	200ad040 	call	200ad04 <strcmp>
 20068fc:	10000726 	beq	r2,zero,200691c <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 2006900:	01408074 	movhi	r5,513
 2006904:	294b9d04 	addi	r5,r5,11892
 2006908:	e13fff17 	ldw	r4,-4(fp)
 200690c:	200ad040 	call	200ad04 <strcmp>
 2006910:	10000226 	beq	r2,zero,200691c <_setlocale_r+0x68>
        return NULL;
 2006914:	0005883a 	mov	r2,zero
 2006918:	00000206 	br	2006924 <_setlocale_r+0x70>
    }
  return "C";
 200691c:	00808074 	movhi	r2,513
 2006920:	108ba004 	addi	r2,r2,11904
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 2006924:	e037883a 	mov	sp,fp
 2006928:	dfc00117 	ldw	ra,4(sp)
 200692c:	df000017 	ldw	fp,0(sp)
 2006930:	dec00204 	addi	sp,sp,8
 2006934:	f800283a 	ret

02006938 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 2006938:	deffff04 	addi	sp,sp,-4
 200693c:	df000015 	stw	fp,0(sp)
 2006940:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 2006944:	00808074 	movhi	r2,513
 2006948:	108d2e04 	addi	r2,r2,13496
#endif
}
 200694c:	e037883a 	mov	sp,fp
 2006950:	df000017 	ldw	fp,0(sp)
 2006954:	dec00104 	addi	sp,sp,4
 2006958:	f800283a 	ret

0200695c <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200695c:	deffff04 	addi	sp,sp,-4
 2006960:	df000015 	stw	fp,0(sp)
 2006964:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 2006968:	d0a00217 	ldw	r2,-32760(gp)
#endif
}
 200696c:	e037883a 	mov	sp,fp
 2006970:	df000017 	ldw	fp,0(sp)
 2006974:	dec00104 	addi	sp,sp,4
 2006978:	f800283a 	ret

0200697c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200697c:	deffff04 	addi	sp,sp,-4
 2006980:	df000015 	stw	fp,0(sp)
 2006984:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 2006988:	00808074 	movhi	r2,513
 200698c:	108d3604 	addi	r2,r2,13528
#endif
}
 2006990:	e037883a 	mov	sp,fp
 2006994:	df000017 	ldw	fp,0(sp)
 2006998:	dec00104 	addi	sp,sp,4
 200699c:	f800283a 	ret

020069a0 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 20069a0:	deffff04 	addi	sp,sp,-4
 20069a4:	df000015 	stw	fp,0(sp)
 20069a8:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 20069ac:	d0a6db17 	ldw	r2,-25748(gp)
}
 20069b0:	e037883a 	mov	sp,fp
 20069b4:	df000017 	ldw	fp,0(sp)
 20069b8:	dec00104 	addi	sp,sp,4
 20069bc:	f800283a 	ret

020069c0 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 20069c0:	defffe04 	addi	sp,sp,-8
 20069c4:	df000115 	stw	fp,4(sp)
 20069c8:	df000104 	addi	fp,sp,4
 20069cc:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 20069d0:	00808074 	movhi	r2,513
 20069d4:	108d2004 	addi	r2,r2,13440
}
 20069d8:	e037883a 	mov	sp,fp
 20069dc:	df000017 	ldw	fp,0(sp)
 20069e0:	dec00104 	addi	sp,sp,4
 20069e4:	f800283a 	ret

020069e8 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 20069e8:	defffc04 	addi	sp,sp,-16
 20069ec:	dfc00315 	stw	ra,12(sp)
 20069f0:	df000215 	stw	fp,8(sp)
 20069f4:	df000204 	addi	fp,sp,8
 20069f8:	e13ffe15 	stw	r4,-8(fp)
 20069fc:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 2006a00:	d0a00017 	ldw	r2,-32768(gp)
 2006a04:	e1bfff17 	ldw	r6,-4(fp)
 2006a08:	e17ffe17 	ldw	r5,-8(fp)
 2006a0c:	1009883a 	mov	r4,r2
 2006a10:	20068b40 	call	20068b4 <_setlocale_r>
}
 2006a14:	e037883a 	mov	sp,fp
 2006a18:	dfc00117 	ldw	ra,4(sp)
 2006a1c:	df000017 	ldw	fp,0(sp)
 2006a20:	dec00204 	addi	sp,sp,8
 2006a24:	f800283a 	ret

02006a28 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 2006a28:	defffe04 	addi	sp,sp,-8
 2006a2c:	dfc00115 	stw	ra,4(sp)
 2006a30:	df000015 	stw	fp,0(sp)
 2006a34:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 2006a38:	d0a00017 	ldw	r2,-32768(gp)
 2006a3c:	1009883a 	mov	r4,r2
 2006a40:	20069c00 	call	20069c0 <_localeconv_r>
}
 2006a44:	e037883a 	mov	sp,fp
 2006a48:	dfc00117 	ldw	ra,4(sp)
 2006a4c:	df000017 	ldw	fp,0(sp)
 2006a50:	dec00204 	addi	sp,sp,8
 2006a54:	f800283a 	ret

02006a58 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 2006a58:	deffea04 	addi	sp,sp,-88
 2006a5c:	dfc01515 	stw	ra,84(sp)
 2006a60:	df001415 	stw	fp,80(sp)
 2006a64:	dcc01315 	stw	r19,76(sp)
 2006a68:	dc801215 	stw	r18,72(sp)
 2006a6c:	dc401115 	stw	r17,68(sp)
 2006a70:	dc001015 	stw	r16,64(sp)
 2006a74:	df001404 	addi	fp,sp,80
 2006a78:	e13ffb15 	stw	r4,-20(fp)
 2006a7c:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 2006a80:	8080030b 	ldhu	r2,12(r16)
 2006a84:	10bfffcc 	andi	r2,r2,65535
 2006a88:	1080008c 	andi	r2,r2,2
 2006a8c:	10000726 	beq	r2,zero,2006aac <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 2006a90:	808010c4 	addi	r2,r16,67
 2006a94:	80800015 	stw	r2,0(r16)
 2006a98:	80800017 	ldw	r2,0(r16)
 2006a9c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 2006aa0:	00800044 	movi	r2,1
 2006aa4:	80800515 	stw	r2,20(r16)
 2006aa8:	00006d06 	br	2006c60 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 2006aac:	8080038b 	ldhu	r2,14(r16)
 2006ab0:	10bfffcc 	andi	r2,r2,65535
 2006ab4:	10a0001c 	xori	r2,r2,32768
 2006ab8:	10a00004 	addi	r2,r2,-32768
 2006abc:	10000916 	blt	r2,zero,2006ae4 <__smakebuf_r+0x8c>
 2006ac0:	8080038b 	ldhu	r2,14(r16)
 2006ac4:	10bfffcc 	andi	r2,r2,65535
 2006ac8:	10a0001c 	xori	r2,r2,32768
 2006acc:	10a00004 	addi	r2,r2,-32768
 2006ad0:	e1bfec04 	addi	r6,fp,-80
 2006ad4:	100b883a 	mov	r5,r2
 2006ad8:	e13ffb17 	ldw	r4,-20(fp)
 2006adc:	200ca000 	call	200ca00 <_fstat_r>
 2006ae0:	10000c0e 	bge	r2,zero,2006b14 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 2006ae4:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 2006ae8:	8080030b 	ldhu	r2,12(r16)
 2006aec:	10bfffcc 	andi	r2,r2,65535
 2006af0:	1080200c 	andi	r2,r2,128
 2006af4:	10000226 	beq	r2,zero,2006b00 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 2006af8:	04401004 	movi	r17,64
 2006afc:	00000106 	br	2006b04 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 2006b00:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 2006b04:	8080030b 	ldhu	r2,12(r16)
 2006b08:	10820014 	ori	r2,r2,2048
 2006b0c:	8080030d 	sth	r2,12(r16)
 2006b10:	00001606 	br	2006b6c <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 2006b14:	e0bfed17 	ldw	r2,-76(fp)
 2006b18:	10bc000c 	andi	r2,r2,61440
 2006b1c:	10880020 	cmpeqi	r2,r2,8192
 2006b20:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 2006b24:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 2006b28:	e0bfed17 	ldw	r2,-76(fp)
 2006b2c:	10fc000c 	andi	r3,r2,61440
 2006b30:	00a00014 	movui	r2,32768
 2006b34:	18800a1e 	bne	r3,r2,2006b60 <__smakebuf_r+0x108>
 2006b38:	80c00a17 	ldw	r3,40(r16)
 2006b3c:	00808074 	movhi	r2,513
 2006b40:	10ab0404 	addi	r2,r2,-21488
 2006b44:	1880061e 	bne	r3,r2,2006b60 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 2006b48:	8080030b 	ldhu	r2,12(r16)
 2006b4c:	10810014 	ori	r2,r2,1024
 2006b50:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 2006b54:	00810004 	movi	r2,1024
 2006b58:	80801315 	stw	r2,76(r16)
 2006b5c:	00000306 	br	2006b6c <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 2006b60:	8080030b 	ldhu	r2,12(r16)
 2006b64:	10820014 	ori	r2,r2,2048
 2006b68:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 2006b6c:	90001126 	beq	r18,zero,2006bb4 <__smakebuf_r+0x15c>
 2006b70:	8080038b 	ldhu	r2,14(r16)
 2006b74:	10bfffcc 	andi	r2,r2,65535
 2006b78:	10a0001c 	xori	r2,r2,32768
 2006b7c:	10a00004 	addi	r2,r2,-32768
 2006b80:	100b883a 	mov	r5,r2
 2006b84:	e13ffb17 	ldw	r4,-20(fp)
 2006b88:	200ca680 	call	200ca68 <_isatty_r>
 2006b8c:	10000926 	beq	r2,zero,2006bb4 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 2006b90:	8080030b 	ldhu	r2,12(r16)
 2006b94:	10800054 	ori	r2,r2,1
 2006b98:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 2006b9c:	808010c4 	addi	r2,r16,67
 2006ba0:	80800015 	stw	r2,0(r16)
 2006ba4:	80800017 	ldw	r2,0(r16)
 2006ba8:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 2006bac:	00800044 	movi	r2,1
 2006bb0:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 2006bb4:	880b883a 	mov	r5,r17
 2006bb8:	e13ffb17 	ldw	r4,-20(fp)
 2006bbc:	20070380 	call	2007038 <_malloc_r>
 2006bc0:	1027883a 	mov	r19,r2
 2006bc4:	98000e1e 	bne	r19,zero,2006c00 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 2006bc8:	8080030b 	ldhu	r2,12(r16)
 2006bcc:	10bfffcc 	andi	r2,r2,65535
 2006bd0:	1080800c 	andi	r2,r2,512
 2006bd4:	1000221e 	bne	r2,zero,2006c60 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 2006bd8:	8080030b 	ldhu	r2,12(r16)
 2006bdc:	10800094 	ori	r2,r2,2
 2006be0:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 2006be4:	808010c4 	addi	r2,r16,67
 2006be8:	80800015 	stw	r2,0(r16)
 2006bec:	80800017 	ldw	r2,0(r16)
 2006bf0:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 2006bf4:	00800044 	movi	r2,1
 2006bf8:	80800515 	stw	r2,20(r16)
 2006bfc:	00001806 	br	2006c60 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 2006c00:	e0fffb17 	ldw	r3,-20(fp)
 2006c04:	00808034 	movhi	r2,512
 2006c08:	1095d804 	addi	r2,r2,22368
 2006c0c:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 2006c10:	8080030b 	ldhu	r2,12(r16)
 2006c14:	10802014 	ori	r2,r2,128
 2006c18:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 2006c1c:	84c00015 	stw	r19,0(r16)
 2006c20:	80800017 	ldw	r2,0(r16)
 2006c24:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 2006c28:	8805883a 	mov	r2,r17
 2006c2c:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 2006c30:	90000b26 	beq	r18,zero,2006c60 <__smakebuf_r+0x208>
 2006c34:	8080038b 	ldhu	r2,14(r16)
 2006c38:	10bfffcc 	andi	r2,r2,65535
 2006c3c:	10a0001c 	xori	r2,r2,32768
 2006c40:	10a00004 	addi	r2,r2,-32768
 2006c44:	100b883a 	mov	r5,r2
 2006c48:	e13ffb17 	ldw	r4,-20(fp)
 2006c4c:	200ca680 	call	200ca68 <_isatty_r>
 2006c50:	10000326 	beq	r2,zero,2006c60 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 2006c54:	8080030b 	ldhu	r2,12(r16)
 2006c58:	10800054 	ori	r2,r2,1
 2006c5c:	8080030d 	sth	r2,12(r16)
    }
}
 2006c60:	e6fffc04 	addi	sp,fp,-16
 2006c64:	dfc00517 	ldw	ra,20(sp)
 2006c68:	df000417 	ldw	fp,16(sp)
 2006c6c:	dcc00317 	ldw	r19,12(sp)
 2006c70:	dc800217 	ldw	r18,8(sp)
 2006c74:	dc400117 	ldw	r17,4(sp)
 2006c78:	dc000017 	ldw	r16,0(sp)
 2006c7c:	dec00604 	addi	sp,sp,24
 2006c80:	f800283a 	ret

02006c84 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 2006c84:	defff104 	addi	sp,sp,-60
 2006c88:	dfc00e15 	stw	ra,56(sp)
 2006c8c:	df000d15 	stw	fp,52(sp)
 2006c90:	df000d04 	addi	fp,sp,52
 2006c94:	e13ffe15 	stw	r4,-8(fp)
 2006c98:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 2006c9c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 2006ca0:	00808074 	movhi	r2,513
 2006ca4:	108d3e04 	addi	r2,r2,13560
 2006ca8:	10800217 	ldw	r2,8(r2)
 2006cac:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 2006cb0:	e0bff817 	ldw	r2,-32(fp)
 2006cb4:	10c00117 	ldw	r3,4(r2)
 2006cb8:	00bfff04 	movi	r2,-4
 2006cbc:	1884703a 	and	r2,r3,r2
 2006cc0:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 2006cc4:	e0fff817 	ldw	r3,-32(fp)
 2006cc8:	e0bff917 	ldw	r2,-28(fp)
 2006ccc:	1885883a 	add	r2,r3,r2
 2006cd0:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 2006cd4:	d0e6dc17 	ldw	r3,-25744(gp)
 2006cd8:	e0bfff17 	ldw	r2,-4(fp)
 2006cdc:	1885883a 	add	r2,r3,r2
 2006ce0:	10800404 	addi	r2,r2,16
 2006ce4:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 2006ce8:	00840004 	movi	r2,4096
 2006cec:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 2006cf0:	d0a00417 	ldw	r2,-32752(gp)
 2006cf4:	10bfffe0 	cmpeqi	r2,r2,-1
 2006cf8:	1000081e 	bne	r2,zero,2006d1c <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 2006cfc:	e0fffb17 	ldw	r3,-20(fp)
 2006d00:	e0bff617 	ldw	r2,-40(fp)
 2006d04:	1885883a 	add	r2,r3,r2
 2006d08:	10ffffc4 	addi	r3,r2,-1
 2006d0c:	e0bffb17 	ldw	r2,-20(fp)
 2006d10:	0085c83a 	sub	r2,zero,r2
 2006d14:	1884703a 	and	r2,r3,r2
 2006d18:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 2006d1c:	e0bff617 	ldw	r2,-40(fp)
 2006d20:	100b883a 	mov	r5,r2
 2006d24:	e13ffe17 	ldw	r4,-8(fp)
 2006d28:	200aa300 	call	200aa30 <_sbrk_r>
 2006d2c:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 2006d30:	e0bff317 	ldw	r2,-52(fp)
 2006d34:	10bfffe0 	cmpeqi	r2,r2,-1
 2006d38:	1000b91e 	bne	r2,zero,2007020 <malloc_extend_top+0x39c>
 2006d3c:	e0fff317 	ldw	r3,-52(fp)
 2006d40:	e0bffa17 	ldw	r2,-24(fp)
 2006d44:	1880042e 	bgeu	r3,r2,2006d58 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 2006d48:	00808074 	movhi	r2,513
 2006d4c:	108d3e04 	addi	r2,r2,13560
 2006d50:	e0fff817 	ldw	r3,-32(fp)
 2006d54:	1880b21e 	bne	r3,r2,2007020 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 2006d58:	00808074 	movhi	r2,513
 2006d5c:	1099b504 	addi	r2,r2,26324
 2006d60:	10800017 	ldw	r2,0(r2)
 2006d64:	1007883a 	mov	r3,r2
 2006d68:	e0bff617 	ldw	r2,-40(fp)
 2006d6c:	1885883a 	add	r2,r3,r2
 2006d70:	1007883a 	mov	r3,r2
 2006d74:	00808074 	movhi	r2,513
 2006d78:	1099b504 	addi	r2,r2,26324
 2006d7c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 2006d80:	e0fff317 	ldw	r3,-52(fp)
 2006d84:	e0bffa17 	ldw	r2,-24(fp)
 2006d88:	1880101e 	bne	r3,r2,2006dcc <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 2006d8c:	e0bffb17 	ldw	r2,-20(fp)
 2006d90:	10ffffc4 	addi	r3,r2,-1
 2006d94:	e0bffa17 	ldw	r2,-24(fp)
 2006d98:	1884703a 	and	r2,r3,r2
 2006d9c:	10000b1e 	bne	r2,zero,2006dcc <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 2006da0:	e0fff617 	ldw	r3,-40(fp)
 2006da4:	e0bff917 	ldw	r2,-28(fp)
 2006da8:	1885883a 	add	r2,r3,r2
 2006dac:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 2006db0:	00808074 	movhi	r2,513
 2006db4:	108d3e04 	addi	r2,r2,13560
 2006db8:	10800217 	ldw	r2,8(r2)
 2006dbc:	e0fffc17 	ldw	r3,-16(fp)
 2006dc0:	18c00054 	ori	r3,r3,1
 2006dc4:	10c00115 	stw	r3,4(r2)
 2006dc8:	00008006 	br	2006fcc <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 2006dcc:	d0a00417 	ldw	r2,-32752(gp)
 2006dd0:	10bfffd8 	cmpnei	r2,r2,-1
 2006dd4:	1000031e 	bne	r2,zero,2006de4 <malloc_extend_top+0x160>
      sbrk_base = brk;
 2006dd8:	e0bff317 	ldw	r2,-52(fp)
 2006ddc:	d0a00415 	stw	r2,-32752(gp)
 2006de0:	00000a06 	br	2006e0c <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 2006de4:	00808074 	movhi	r2,513
 2006de8:	1099b504 	addi	r2,r2,26324
 2006dec:	10c00017 	ldw	r3,0(r2)
 2006df0:	e13ff317 	ldw	r4,-52(fp)
 2006df4:	e0bffa17 	ldw	r2,-24(fp)
 2006df8:	2085c83a 	sub	r2,r4,r2
 2006dfc:	1887883a 	add	r3,r3,r2
 2006e00:	00808074 	movhi	r2,513
 2006e04:	1099b504 	addi	r2,r2,26324
 2006e08:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 2006e0c:	e0bff317 	ldw	r2,-52(fp)
 2006e10:	10800204 	addi	r2,r2,8
 2006e14:	108001cc 	andi	r2,r2,7
 2006e18:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 2006e1c:	e0bffd17 	ldw	r2,-12(fp)
 2006e20:	10000926 	beq	r2,zero,2006e48 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 2006e24:	00c00204 	movi	r3,8
 2006e28:	e0bffd17 	ldw	r2,-12(fp)
 2006e2c:	1885c83a 	sub	r2,r3,r2
 2006e30:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 2006e34:	e0fff317 	ldw	r3,-52(fp)
 2006e38:	e0bff417 	ldw	r2,-48(fp)
 2006e3c:	1885883a 	add	r2,r3,r2
 2006e40:	e0bff315 	stw	r2,-52(fp)
 2006e44:	00000106 	br	2006e4c <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 2006e48:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 2006e4c:	e0fff317 	ldw	r3,-52(fp)
 2006e50:	e0bff617 	ldw	r2,-40(fp)
 2006e54:	1885883a 	add	r2,r3,r2
 2006e58:	1007883a 	mov	r3,r2
 2006e5c:	e0bffb17 	ldw	r2,-20(fp)
 2006e60:	10bfffc4 	addi	r2,r2,-1
 2006e64:	1884703a 	and	r2,r3,r2
 2006e68:	e0fffb17 	ldw	r3,-20(fp)
 2006e6c:	1885c83a 	sub	r2,r3,r2
 2006e70:	e0fff417 	ldw	r3,-48(fp)
 2006e74:	1885883a 	add	r2,r3,r2
 2006e78:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 2006e7c:	e0bff417 	ldw	r2,-48(fp)
 2006e80:	100b883a 	mov	r5,r2
 2006e84:	e13ffe17 	ldw	r4,-8(fp)
 2006e88:	200aa300 	call	200aa30 <_sbrk_r>
 2006e8c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 2006e90:	e0bff517 	ldw	r2,-44(fp)
 2006e94:	10bfffd8 	cmpnei	r2,r2,-1
 2006e98:	1000051e 	bne	r2,zero,2006eb0 <malloc_extend_top+0x22c>
      {
	correction = 0;
 2006e9c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 2006ea0:	00800044 	movi	r2,1
 2006ea4:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 2006ea8:	e0bff317 	ldw	r2,-52(fp)
 2006eac:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 2006eb0:	00808074 	movhi	r2,513
 2006eb4:	1099b504 	addi	r2,r2,26324
 2006eb8:	10800017 	ldw	r2,0(r2)
 2006ebc:	1007883a 	mov	r3,r2
 2006ec0:	e0bff417 	ldw	r2,-48(fp)
 2006ec4:	1885883a 	add	r2,r3,r2
 2006ec8:	1007883a 	mov	r3,r2
 2006ecc:	00808074 	movhi	r2,513
 2006ed0:	1099b504 	addi	r2,r2,26324
 2006ed4:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 2006ed8:	00808074 	movhi	r2,513
 2006edc:	108d3e04 	addi	r2,r2,13560
 2006ee0:	e0fff317 	ldw	r3,-52(fp)
 2006ee4:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 2006ee8:	e0fff517 	ldw	r3,-44(fp)
 2006eec:	e0bff317 	ldw	r2,-52(fp)
 2006ef0:	1885c83a 	sub	r2,r3,r2
 2006ef4:	1007883a 	mov	r3,r2
 2006ef8:	e0bff417 	ldw	r2,-48(fp)
 2006efc:	1885883a 	add	r2,r3,r2
 2006f00:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 2006f04:	00808074 	movhi	r2,513
 2006f08:	108d3e04 	addi	r2,r2,13560
 2006f0c:	10800217 	ldw	r2,8(r2)
 2006f10:	e0fffc17 	ldw	r3,-16(fp)
 2006f14:	18c00054 	ori	r3,r3,1
 2006f18:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 2006f1c:	00808074 	movhi	r2,513
 2006f20:	108d3e04 	addi	r2,r2,13560
 2006f24:	e0fff817 	ldw	r3,-32(fp)
 2006f28:	18802826 	beq	r3,r2,2006fcc <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 2006f2c:	e0bff917 	ldw	r2,-28(fp)
 2006f30:	10800428 	cmpgeui	r2,r2,16
 2006f34:	1000061e 	bne	r2,zero,2006f50 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 2006f38:	00808074 	movhi	r2,513
 2006f3c:	108d3e04 	addi	r2,r2,13560
 2006f40:	10800217 	ldw	r2,8(r2)
 2006f44:	00c00044 	movi	r3,1
 2006f48:	10c00115 	stw	r3,4(r2)
        return;
 2006f4c:	00003506 	br	2007024 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 2006f50:	e0bff917 	ldw	r2,-28(fp)
 2006f54:	10fffd04 	addi	r3,r2,-12
 2006f58:	00bffe04 	movi	r2,-8
 2006f5c:	1884703a 	and	r2,r3,r2
 2006f60:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 2006f64:	e0bff817 	ldw	r2,-32(fp)
 2006f68:	10800117 	ldw	r2,4(r2)
 2006f6c:	10c0004c 	andi	r3,r2,1
 2006f70:	e0bff917 	ldw	r2,-28(fp)
 2006f74:	1886b03a 	or	r3,r3,r2
 2006f78:	e0bff817 	ldw	r2,-32(fp)
 2006f7c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 2006f80:	e0fff817 	ldw	r3,-32(fp)
 2006f84:	e0bff917 	ldw	r2,-28(fp)
 2006f88:	1885883a 	add	r2,r3,r2
 2006f8c:	00c00144 	movi	r3,5
 2006f90:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 2006f94:	e0bff917 	ldw	r2,-28(fp)
 2006f98:	10800104 	addi	r2,r2,4
 2006f9c:	e0fff817 	ldw	r3,-32(fp)
 2006fa0:	1885883a 	add	r2,r3,r2
 2006fa4:	00c00144 	movi	r3,5
 2006fa8:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 2006fac:	e0bff917 	ldw	r2,-28(fp)
 2006fb0:	10800430 	cmpltui	r2,r2,16
 2006fb4:	1000051e 	bne	r2,zero,2006fcc <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 2006fb8:	e0bff817 	ldw	r2,-32(fp)
 2006fbc:	10800204 	addi	r2,r2,8
 2006fc0:	100b883a 	mov	r5,r2
 2006fc4:	e13ffe17 	ldw	r4,-8(fp)
 2006fc8:	20059f80 	call	20059f8 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 2006fcc:	00808074 	movhi	r2,513
 2006fd0:	1099b504 	addi	r2,r2,26324
 2006fd4:	10800017 	ldw	r2,0(r2)
 2006fd8:	1007883a 	mov	r3,r2
 2006fdc:	d0a6dd17 	ldw	r2,-25740(gp)
 2006fe0:	10c0042e 	bgeu	r2,r3,2006ff4 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 2006fe4:	00808074 	movhi	r2,513
 2006fe8:	1099b504 	addi	r2,r2,26324
 2006fec:	10800017 	ldw	r2,0(r2)
 2006ff0:	d0a6dd15 	stw	r2,-25740(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 2006ff4:	00808074 	movhi	r2,513
 2006ff8:	1099b504 	addi	r2,r2,26324
 2006ffc:	10800017 	ldw	r2,0(r2)
 2007000:	1007883a 	mov	r3,r2
 2007004:	d0a6de17 	ldw	r2,-25736(gp)
 2007008:	10c0062e 	bgeu	r2,r3,2007024 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200700c:	00808074 	movhi	r2,513
 2007010:	1099b504 	addi	r2,r2,26324
 2007014:	10800017 	ldw	r2,0(r2)
 2007018:	d0a6de15 	stw	r2,-25736(gp)
 200701c:	00000106 	br	2007024 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 2007020:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 2007024:	e037883a 	mov	sp,fp
 2007028:	dfc00117 	ldw	ra,4(sp)
 200702c:	df000017 	ldw	fp,0(sp)
 2007030:	dec00204 	addi	sp,sp,8
 2007034:	f800283a 	ret

02007038 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 2007038:	deffef04 	addi	sp,sp,-68
 200703c:	dfc01015 	stw	ra,64(sp)
 2007040:	df000f15 	stw	fp,60(sp)
 2007044:	df000f04 	addi	fp,sp,60
 2007048:	e13ffe15 	stw	r4,-8(fp)
 200704c:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 2007050:	e0bfff17 	ldw	r2,-4(fp)
 2007054:	108002c4 	addi	r2,r2,11
 2007058:	108005f0 	cmpltui	r2,r2,23
 200705c:	1000051e 	bne	r2,zero,2007074 <_malloc_r+0x3c>
 2007060:	e0bfff17 	ldw	r2,-4(fp)
 2007064:	10c002c4 	addi	r3,r2,11
 2007068:	00bffe04 	movi	r2,-8
 200706c:	1884703a 	and	r2,r3,r2
 2007070:	00000106 	br	2007078 <_malloc_r+0x40>
 2007074:	00800404 	movi	r2,16
 2007078:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200707c:	e0bffa17 	ldw	r2,-24(fp)
 2007080:	10000316 	blt	r2,zero,2007090 <_malloc_r+0x58>
 2007084:	e0fffa17 	ldw	r3,-24(fp)
 2007088:	e0bfff17 	ldw	r2,-4(fp)
 200708c:	1880052e 	bgeu	r3,r2,20070a4 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 2007090:	e0bffe17 	ldw	r2,-8(fp)
 2007094:	00c00304 	movi	r3,12
 2007098:	10c00015 	stw	r3,0(r2)
    return 0;
 200709c:	0005883a 	mov	r2,zero
 20070a0:	0002bf06 	br	2007ba0 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 20070a4:	e13ffe17 	ldw	r4,-8(fp)
 20070a8:	20105ec0 	call	20105ec <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 20070ac:	e0bffa17 	ldw	r2,-24(fp)
 20070b0:	10807e28 	cmpgeui	r2,r2,504
 20070b4:	10003f1e 	bne	r2,zero,20071b4 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 20070b8:	e0bffa17 	ldw	r2,-24(fp)
 20070bc:	1004d0fa 	srli	r2,r2,3
 20070c0:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 20070c4:	e0bff217 	ldw	r2,-56(fp)
 20070c8:	10800044 	addi	r2,r2,1
 20070cc:	1085883a 	add	r2,r2,r2
 20070d0:	1085883a 	add	r2,r2,r2
 20070d4:	1087883a 	add	r3,r2,r2
 20070d8:	00808074 	movhi	r2,513
 20070dc:	108d3e04 	addi	r2,r2,13560
 20070e0:	1885883a 	add	r2,r3,r2
 20070e4:	10bffe04 	addi	r2,r2,-8
 20070e8:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 20070ec:	e0bff917 	ldw	r2,-28(fp)
 20070f0:	10800317 	ldw	r2,12(r2)
 20070f4:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 20070f8:	e0fff117 	ldw	r3,-60(fp)
 20070fc:	e0bff917 	ldw	r2,-28(fp)
 2007100:	1880061e 	bne	r3,r2,200711c <_malloc_r+0xe4>
    {
      q = next_bin(q);
 2007104:	e0bff917 	ldw	r2,-28(fp)
 2007108:	10800204 	addi	r2,r2,8
 200710c:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 2007110:	e0bff917 	ldw	r2,-28(fp)
 2007114:	10800317 	ldw	r2,12(r2)
 2007118:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200711c:	e0fff117 	ldw	r3,-60(fp)
 2007120:	e0bff917 	ldw	r2,-28(fp)
 2007124:	18801f26 	beq	r3,r2,20071a4 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 2007128:	e0bff117 	ldw	r2,-60(fp)
 200712c:	10c00117 	ldw	r3,4(r2)
 2007130:	00bfff04 	movi	r2,-4
 2007134:	1884703a 	and	r2,r3,r2
 2007138:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200713c:	e0bff117 	ldw	r2,-60(fp)
 2007140:	10800317 	ldw	r2,12(r2)
 2007144:	e0bff815 	stw	r2,-32(fp)
 2007148:	e0bff117 	ldw	r2,-60(fp)
 200714c:	10800217 	ldw	r2,8(r2)
 2007150:	e0bff715 	stw	r2,-36(fp)
 2007154:	e0bff717 	ldw	r2,-36(fp)
 2007158:	e0fff817 	ldw	r3,-32(fp)
 200715c:	10c00315 	stw	r3,12(r2)
 2007160:	e0bff817 	ldw	r2,-32(fp)
 2007164:	e0fff717 	ldw	r3,-36(fp)
 2007168:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200716c:	e0fff117 	ldw	r3,-60(fp)
 2007170:	e0bffb17 	ldw	r2,-20(fp)
 2007174:	1885883a 	add	r2,r3,r2
 2007178:	e13ff117 	ldw	r4,-60(fp)
 200717c:	e0fffb17 	ldw	r3,-20(fp)
 2007180:	20c7883a 	add	r3,r4,r3
 2007184:	18c00117 	ldw	r3,4(r3)
 2007188:	18c00054 	ori	r3,r3,1
 200718c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2007190:	e13ffe17 	ldw	r4,-8(fp)
 2007194:	20106100 	call	2010610 <__malloc_unlock>
      return chunk2mem(victim);
 2007198:	e0bff117 	ldw	r2,-60(fp)
 200719c:	10800204 	addi	r2,r2,8
 20071a0:	00027f06 	br	2007ba0 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 20071a4:	e0bff217 	ldw	r2,-56(fp)
 20071a8:	10800084 	addi	r2,r2,2
 20071ac:	e0bff215 	stw	r2,-56(fp)
 20071b0:	00007306 	br	2007380 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 20071b4:	e0bffa17 	ldw	r2,-24(fp)
 20071b8:	1004d27a 	srli	r2,r2,9
 20071bc:	1000031e 	bne	r2,zero,20071cc <_malloc_r+0x194>
 20071c0:	e0bffa17 	ldw	r2,-24(fp)
 20071c4:	1004d0fa 	srli	r2,r2,3
 20071c8:	00002906 	br	2007270 <_malloc_r+0x238>
 20071cc:	e0bffa17 	ldw	r2,-24(fp)
 20071d0:	1004d27a 	srli	r2,r2,9
 20071d4:	10800168 	cmpgeui	r2,r2,5
 20071d8:	1000041e 	bne	r2,zero,20071ec <_malloc_r+0x1b4>
 20071dc:	e0bffa17 	ldw	r2,-24(fp)
 20071e0:	1004d1ba 	srli	r2,r2,6
 20071e4:	10800e04 	addi	r2,r2,56
 20071e8:	00002106 	br	2007270 <_malloc_r+0x238>
 20071ec:	e0bffa17 	ldw	r2,-24(fp)
 20071f0:	1004d27a 	srli	r2,r2,9
 20071f4:	10800568 	cmpgeui	r2,r2,21
 20071f8:	1000041e 	bne	r2,zero,200720c <_malloc_r+0x1d4>
 20071fc:	e0bffa17 	ldw	r2,-24(fp)
 2007200:	1004d27a 	srli	r2,r2,9
 2007204:	108016c4 	addi	r2,r2,91
 2007208:	00001906 	br	2007270 <_malloc_r+0x238>
 200720c:	e0bffa17 	ldw	r2,-24(fp)
 2007210:	1004d27a 	srli	r2,r2,9
 2007214:	10801568 	cmpgeui	r2,r2,85
 2007218:	1000041e 	bne	r2,zero,200722c <_malloc_r+0x1f4>
 200721c:	e0bffa17 	ldw	r2,-24(fp)
 2007220:	1004d33a 	srli	r2,r2,12
 2007224:	10801b84 	addi	r2,r2,110
 2007228:	00001106 	br	2007270 <_malloc_r+0x238>
 200722c:	e0bffa17 	ldw	r2,-24(fp)
 2007230:	1004d27a 	srli	r2,r2,9
 2007234:	10805568 	cmpgeui	r2,r2,341
 2007238:	1000041e 	bne	r2,zero,200724c <_malloc_r+0x214>
 200723c:	e0bffa17 	ldw	r2,-24(fp)
 2007240:	1004d3fa 	srli	r2,r2,15
 2007244:	10801dc4 	addi	r2,r2,119
 2007248:	00000906 	br	2007270 <_malloc_r+0x238>
 200724c:	e0bffa17 	ldw	r2,-24(fp)
 2007250:	1004d27a 	srli	r2,r2,9
 2007254:	10815568 	cmpgeui	r2,r2,1365
 2007258:	1000041e 	bne	r2,zero,200726c <_malloc_r+0x234>
 200725c:	e0bffa17 	ldw	r2,-24(fp)
 2007260:	1004d4ba 	srli	r2,r2,18
 2007264:	10801f04 	addi	r2,r2,124
 2007268:	00000106 	br	2007270 <_malloc_r+0x238>
 200726c:	00801f84 	movi	r2,126
 2007270:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 2007274:	e0bff217 	ldw	r2,-56(fp)
 2007278:	10800044 	addi	r2,r2,1
 200727c:	1085883a 	add	r2,r2,r2
 2007280:	1085883a 	add	r2,r2,r2
 2007284:	1087883a 	add	r3,r2,r2
 2007288:	00808074 	movhi	r2,513
 200728c:	108d3e04 	addi	r2,r2,13560
 2007290:	1885883a 	add	r2,r3,r2
 2007294:	10bffe04 	addi	r2,r2,-8
 2007298:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200729c:	e0bff317 	ldw	r2,-52(fp)
 20072a0:	10800317 	ldw	r2,12(r2)
 20072a4:	e0bff115 	stw	r2,-60(fp)
 20072a8:	00002f06 	br	2007368 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 20072ac:	e0bff117 	ldw	r2,-60(fp)
 20072b0:	10c00117 	ldw	r3,4(r2)
 20072b4:	00bfff04 	movi	r2,-4
 20072b8:	1884703a 	and	r2,r3,r2
 20072bc:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 20072c0:	e0fffb17 	ldw	r3,-20(fp)
 20072c4:	e0bffa17 	ldw	r2,-24(fp)
 20072c8:	1885c83a 	sub	r2,r3,r2
 20072cc:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 20072d0:	e0bff417 	ldw	r2,-48(fp)
 20072d4:	10800410 	cmplti	r2,r2,16
 20072d8:	1000041e 	bne	r2,zero,20072ec <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 20072dc:	e0bff217 	ldw	r2,-56(fp)
 20072e0:	10bfffc4 	addi	r2,r2,-1
 20072e4:	e0bff215 	stw	r2,-56(fp)
        break;   
 20072e8:	00002206 	br	2007374 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 20072ec:	e0bff417 	ldw	r2,-48(fp)
 20072f0:	10001a16 	blt	r2,zero,200735c <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 20072f4:	e0bff117 	ldw	r2,-60(fp)
 20072f8:	10800317 	ldw	r2,12(r2)
 20072fc:	e0bff815 	stw	r2,-32(fp)
 2007300:	e0bff117 	ldw	r2,-60(fp)
 2007304:	10800217 	ldw	r2,8(r2)
 2007308:	e0bff715 	stw	r2,-36(fp)
 200730c:	e0bff717 	ldw	r2,-36(fp)
 2007310:	e0fff817 	ldw	r3,-32(fp)
 2007314:	10c00315 	stw	r3,12(r2)
 2007318:	e0bff817 	ldw	r2,-32(fp)
 200731c:	e0fff717 	ldw	r3,-36(fp)
 2007320:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 2007324:	e0fff117 	ldw	r3,-60(fp)
 2007328:	e0bffb17 	ldw	r2,-20(fp)
 200732c:	1885883a 	add	r2,r3,r2
 2007330:	e13ff117 	ldw	r4,-60(fp)
 2007334:	e0fffb17 	ldw	r3,-20(fp)
 2007338:	20c7883a 	add	r3,r4,r3
 200733c:	18c00117 	ldw	r3,4(r3)
 2007340:	18c00054 	ori	r3,r3,1
 2007344:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 2007348:	e13ffe17 	ldw	r4,-8(fp)
 200734c:	20106100 	call	2010610 <__malloc_unlock>
        return chunk2mem(victim);
 2007350:	e0bff117 	ldw	r2,-60(fp)
 2007354:	10800204 	addi	r2,r2,8
 2007358:	00021106 	br	2007ba0 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200735c:	e0bff117 	ldw	r2,-60(fp)
 2007360:	10800317 	ldw	r2,12(r2)
 2007364:	e0bff115 	stw	r2,-60(fp)
 2007368:	e0fff117 	ldw	r3,-60(fp)
 200736c:	e0bff317 	ldw	r2,-52(fp)
 2007370:	18bfce1e 	bne	r3,r2,20072ac <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 2007374:	e0bff217 	ldw	r2,-56(fp)
 2007378:	10800044 	addi	r2,r2,1
 200737c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 2007380:	00808074 	movhi	r2,513
 2007384:	108d4004 	addi	r2,r2,13568
 2007388:	10800217 	ldw	r2,8(r2)
 200738c:	e0bff115 	stw	r2,-60(fp)
 2007390:	00808074 	movhi	r2,513
 2007394:	108d4004 	addi	r2,r2,13568
 2007398:	e0fff117 	ldw	r3,-60(fp)
 200739c:	1880e626 	beq	r3,r2,2007738 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 20073a0:	e0bff117 	ldw	r2,-60(fp)
 20073a4:	10c00117 	ldw	r3,4(r2)
 20073a8:	00bfff04 	movi	r2,-4
 20073ac:	1884703a 	and	r2,r3,r2
 20073b0:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 20073b4:	e0fffb17 	ldw	r3,-20(fp)
 20073b8:	e0bffa17 	ldw	r2,-24(fp)
 20073bc:	1885c83a 	sub	r2,r3,r2
 20073c0:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 20073c4:	e0bff417 	ldw	r2,-48(fp)
 20073c8:	10800410 	cmplti	r2,r2,16
 20073cc:	1000271e 	bne	r2,zero,200746c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 20073d0:	e0fff117 	ldw	r3,-60(fp)
 20073d4:	e0bffa17 	ldw	r2,-24(fp)
 20073d8:	1885883a 	add	r2,r3,r2
 20073dc:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 20073e0:	e0bffa17 	ldw	r2,-24(fp)
 20073e4:	10c00054 	ori	r3,r2,1
 20073e8:	e0bff117 	ldw	r2,-60(fp)
 20073ec:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 20073f0:	00c08074 	movhi	r3,513
 20073f4:	18cd4004 	addi	r3,r3,13568
 20073f8:	00808074 	movhi	r2,513
 20073fc:	108d4004 	addi	r2,r2,13568
 2007400:	e13ffc17 	ldw	r4,-16(fp)
 2007404:	11000315 	stw	r4,12(r2)
 2007408:	10800317 	ldw	r2,12(r2)
 200740c:	18800215 	stw	r2,8(r3)
 2007410:	00808074 	movhi	r2,513
 2007414:	108d4004 	addi	r2,r2,13568
 2007418:	e0fffc17 	ldw	r3,-16(fp)
 200741c:	18800315 	stw	r2,12(r3)
 2007420:	e0bffc17 	ldw	r2,-16(fp)
 2007424:	10c00317 	ldw	r3,12(r2)
 2007428:	e0bffc17 	ldw	r2,-16(fp)
 200742c:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 2007430:	e0bff417 	ldw	r2,-48(fp)
 2007434:	10800054 	ori	r2,r2,1
 2007438:	1007883a 	mov	r3,r2
 200743c:	e0bffc17 	ldw	r2,-16(fp)
 2007440:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 2007444:	e0bff417 	ldw	r2,-48(fp)
 2007448:	e0fffc17 	ldw	r3,-16(fp)
 200744c:	1885883a 	add	r2,r3,r2
 2007450:	e0fff417 	ldw	r3,-48(fp)
 2007454:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2007458:	e13ffe17 	ldw	r4,-8(fp)
 200745c:	20106100 	call	2010610 <__malloc_unlock>
      return chunk2mem(victim);
 2007460:	e0bff117 	ldw	r2,-60(fp)
 2007464:	10800204 	addi	r2,r2,8
 2007468:	0001cd06 	br	2007ba0 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200746c:	00c08074 	movhi	r3,513
 2007470:	18cd4004 	addi	r3,r3,13568
 2007474:	00808074 	movhi	r2,513
 2007478:	108d4004 	addi	r2,r2,13568
 200747c:	01008074 	movhi	r4,513
 2007480:	210d4004 	addi	r4,r4,13568
 2007484:	11000315 	stw	r4,12(r2)
 2007488:	10800317 	ldw	r2,12(r2)
 200748c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 2007490:	e0bff417 	ldw	r2,-48(fp)
 2007494:	10000e16 	blt	r2,zero,20074d0 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 2007498:	e0fff117 	ldw	r3,-60(fp)
 200749c:	e0bffb17 	ldw	r2,-20(fp)
 20074a0:	1885883a 	add	r2,r3,r2
 20074a4:	e13ff117 	ldw	r4,-60(fp)
 20074a8:	e0fffb17 	ldw	r3,-20(fp)
 20074ac:	20c7883a 	add	r3,r4,r3
 20074b0:	18c00117 	ldw	r3,4(r3)
 20074b4:	18c00054 	ori	r3,r3,1
 20074b8:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 20074bc:	e13ffe17 	ldw	r4,-8(fp)
 20074c0:	20106100 	call	2010610 <__malloc_unlock>
      return chunk2mem(victim);
 20074c4:	e0bff117 	ldw	r2,-60(fp)
 20074c8:	10800204 	addi	r2,r2,8
 20074cc:	0001b406 	br	2007ba0 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 20074d0:	e0bffb17 	ldw	r2,-20(fp)
 20074d4:	10808028 	cmpgeui	r2,r2,512
 20074d8:	10002c1e 	bne	r2,zero,200758c <_malloc_r+0x554>
 20074dc:	e0bffb17 	ldw	r2,-20(fp)
 20074e0:	1004d0fa 	srli	r2,r2,3
 20074e4:	e0bffd15 	stw	r2,-12(fp)
 20074e8:	00c08074 	movhi	r3,513
 20074ec:	18cd3e04 	addi	r3,r3,13560
 20074f0:	00808074 	movhi	r2,513
 20074f4:	108d3e04 	addi	r2,r2,13560
 20074f8:	11000117 	ldw	r4,4(r2)
 20074fc:	e0bffd17 	ldw	r2,-12(fp)
 2007500:	1000010e 	bge	r2,zero,2007508 <_malloc_r+0x4d0>
 2007504:	108000c4 	addi	r2,r2,3
 2007508:	1005d0ba 	srai	r2,r2,2
 200750c:	100b883a 	mov	r5,r2
 2007510:	00800044 	movi	r2,1
 2007514:	1144983a 	sll	r2,r2,r5
 2007518:	2084b03a 	or	r2,r4,r2
 200751c:	18800115 	stw	r2,4(r3)
 2007520:	e0bffd17 	ldw	r2,-12(fp)
 2007524:	10800044 	addi	r2,r2,1
 2007528:	1085883a 	add	r2,r2,r2
 200752c:	1085883a 	add	r2,r2,r2
 2007530:	1087883a 	add	r3,r2,r2
 2007534:	00808074 	movhi	r2,513
 2007538:	108d3e04 	addi	r2,r2,13560
 200753c:	1885883a 	add	r2,r3,r2
 2007540:	10bffe04 	addi	r2,r2,-8
 2007544:	e0bff815 	stw	r2,-32(fp)
 2007548:	e0bff817 	ldw	r2,-32(fp)
 200754c:	10800217 	ldw	r2,8(r2)
 2007550:	e0bff715 	stw	r2,-36(fp)
 2007554:	e0bff117 	ldw	r2,-60(fp)
 2007558:	e0fff817 	ldw	r3,-32(fp)
 200755c:	10c00315 	stw	r3,12(r2)
 2007560:	e0bff117 	ldw	r2,-60(fp)
 2007564:	e0fff717 	ldw	r3,-36(fp)
 2007568:	10c00215 	stw	r3,8(r2)
 200756c:	e0bff817 	ldw	r2,-32(fp)
 2007570:	e0fff117 	ldw	r3,-60(fp)
 2007574:	10c00215 	stw	r3,8(r2)
 2007578:	e0bff817 	ldw	r2,-32(fp)
 200757c:	10c00217 	ldw	r3,8(r2)
 2007580:	e0bff717 	ldw	r2,-36(fp)
 2007584:	10c00315 	stw	r3,12(r2)
 2007588:	00006b06 	br	2007738 <_malloc_r+0x700>
 200758c:	e0bffb17 	ldw	r2,-20(fp)
 2007590:	1004d27a 	srli	r2,r2,9
 2007594:	1000031e 	bne	r2,zero,20075a4 <_malloc_r+0x56c>
 2007598:	e0bffb17 	ldw	r2,-20(fp)
 200759c:	1004d0fa 	srli	r2,r2,3
 20075a0:	00002906 	br	2007648 <_malloc_r+0x610>
 20075a4:	e0bffb17 	ldw	r2,-20(fp)
 20075a8:	1004d27a 	srli	r2,r2,9
 20075ac:	10800168 	cmpgeui	r2,r2,5
 20075b0:	1000041e 	bne	r2,zero,20075c4 <_malloc_r+0x58c>
 20075b4:	e0bffb17 	ldw	r2,-20(fp)
 20075b8:	1004d1ba 	srli	r2,r2,6
 20075bc:	10800e04 	addi	r2,r2,56
 20075c0:	00002106 	br	2007648 <_malloc_r+0x610>
 20075c4:	e0bffb17 	ldw	r2,-20(fp)
 20075c8:	1004d27a 	srli	r2,r2,9
 20075cc:	10800568 	cmpgeui	r2,r2,21
 20075d0:	1000041e 	bne	r2,zero,20075e4 <_malloc_r+0x5ac>
 20075d4:	e0bffb17 	ldw	r2,-20(fp)
 20075d8:	1004d27a 	srli	r2,r2,9
 20075dc:	108016c4 	addi	r2,r2,91
 20075e0:	00001906 	br	2007648 <_malloc_r+0x610>
 20075e4:	e0bffb17 	ldw	r2,-20(fp)
 20075e8:	1004d27a 	srli	r2,r2,9
 20075ec:	10801568 	cmpgeui	r2,r2,85
 20075f0:	1000041e 	bne	r2,zero,2007604 <_malloc_r+0x5cc>
 20075f4:	e0bffb17 	ldw	r2,-20(fp)
 20075f8:	1004d33a 	srli	r2,r2,12
 20075fc:	10801b84 	addi	r2,r2,110
 2007600:	00001106 	br	2007648 <_malloc_r+0x610>
 2007604:	e0bffb17 	ldw	r2,-20(fp)
 2007608:	1004d27a 	srli	r2,r2,9
 200760c:	10805568 	cmpgeui	r2,r2,341
 2007610:	1000041e 	bne	r2,zero,2007624 <_malloc_r+0x5ec>
 2007614:	e0bffb17 	ldw	r2,-20(fp)
 2007618:	1004d3fa 	srli	r2,r2,15
 200761c:	10801dc4 	addi	r2,r2,119
 2007620:	00000906 	br	2007648 <_malloc_r+0x610>
 2007624:	e0bffb17 	ldw	r2,-20(fp)
 2007628:	1004d27a 	srli	r2,r2,9
 200762c:	10815568 	cmpgeui	r2,r2,1365
 2007630:	1000041e 	bne	r2,zero,2007644 <_malloc_r+0x60c>
 2007634:	e0bffb17 	ldw	r2,-20(fp)
 2007638:	1004d4ba 	srli	r2,r2,18
 200763c:	10801f04 	addi	r2,r2,124
 2007640:	00000106 	br	2007648 <_malloc_r+0x610>
 2007644:	00801f84 	movi	r2,126
 2007648:	e0bffd15 	stw	r2,-12(fp)
 200764c:	e0bffd17 	ldw	r2,-12(fp)
 2007650:	10800044 	addi	r2,r2,1
 2007654:	1085883a 	add	r2,r2,r2
 2007658:	1085883a 	add	r2,r2,r2
 200765c:	1087883a 	add	r3,r2,r2
 2007660:	00808074 	movhi	r2,513
 2007664:	108d3e04 	addi	r2,r2,13560
 2007668:	1885883a 	add	r2,r3,r2
 200766c:	10bffe04 	addi	r2,r2,-8
 2007670:	e0bff815 	stw	r2,-32(fp)
 2007674:	e0bff817 	ldw	r2,-32(fp)
 2007678:	10800217 	ldw	r2,8(r2)
 200767c:	e0bff715 	stw	r2,-36(fp)
 2007680:	e0fff717 	ldw	r3,-36(fp)
 2007684:	e0bff817 	ldw	r2,-32(fp)
 2007688:	1880121e 	bne	r3,r2,20076d4 <_malloc_r+0x69c>
 200768c:	00c08074 	movhi	r3,513
 2007690:	18cd3e04 	addi	r3,r3,13560
 2007694:	00808074 	movhi	r2,513
 2007698:	108d3e04 	addi	r2,r2,13560
 200769c:	11000117 	ldw	r4,4(r2)
 20076a0:	e0bffd17 	ldw	r2,-12(fp)
 20076a4:	1000010e 	bge	r2,zero,20076ac <_malloc_r+0x674>
 20076a8:	108000c4 	addi	r2,r2,3
 20076ac:	1005d0ba 	srai	r2,r2,2
 20076b0:	100b883a 	mov	r5,r2
 20076b4:	00800044 	movi	r2,1
 20076b8:	1144983a 	sll	r2,r2,r5
 20076bc:	2084b03a 	or	r2,r4,r2
 20076c0:	18800115 	stw	r2,4(r3)
 20076c4:	00000f06 	br	2007704 <_malloc_r+0x6cc>
 20076c8:	e0bff717 	ldw	r2,-36(fp)
 20076cc:	10800217 	ldw	r2,8(r2)
 20076d0:	e0bff715 	stw	r2,-36(fp)
 20076d4:	e0fff717 	ldw	r3,-36(fp)
 20076d8:	e0bff817 	ldw	r2,-32(fp)
 20076dc:	18800626 	beq	r3,r2,20076f8 <_malloc_r+0x6c0>
 20076e0:	e0bff717 	ldw	r2,-36(fp)
 20076e4:	10c00117 	ldw	r3,4(r2)
 20076e8:	00bfff04 	movi	r2,-4
 20076ec:	1884703a 	and	r2,r3,r2
 20076f0:	e0fffb17 	ldw	r3,-20(fp)
 20076f4:	18bff436 	bltu	r3,r2,20076c8 <_malloc_r+0x690>
 20076f8:	e0bff717 	ldw	r2,-36(fp)
 20076fc:	10800317 	ldw	r2,12(r2)
 2007700:	e0bff815 	stw	r2,-32(fp)
 2007704:	e0bff117 	ldw	r2,-60(fp)
 2007708:	e0fff817 	ldw	r3,-32(fp)
 200770c:	10c00315 	stw	r3,12(r2)
 2007710:	e0bff117 	ldw	r2,-60(fp)
 2007714:	e0fff717 	ldw	r3,-36(fp)
 2007718:	10c00215 	stw	r3,8(r2)
 200771c:	e0bff817 	ldw	r2,-32(fp)
 2007720:	e0fff117 	ldw	r3,-60(fp)
 2007724:	10c00215 	stw	r3,8(r2)
 2007728:	e0bff817 	ldw	r2,-32(fp)
 200772c:	10c00217 	ldw	r3,8(r2)
 2007730:	e0bff717 	ldw	r2,-36(fp)
 2007734:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 2007738:	e0bff217 	ldw	r2,-56(fp)
 200773c:	1000010e 	bge	r2,zero,2007744 <_malloc_r+0x70c>
 2007740:	108000c4 	addi	r2,r2,3
 2007744:	1005d0ba 	srai	r2,r2,2
 2007748:	1007883a 	mov	r3,r2
 200774c:	00800044 	movi	r2,1
 2007750:	10c4983a 	sll	r2,r2,r3
 2007754:	e0bff515 	stw	r2,-44(fp)
 2007758:	00808074 	movhi	r2,513
 200775c:	108d3e04 	addi	r2,r2,13560
 2007760:	10c00117 	ldw	r3,4(r2)
 2007764:	e0bff517 	ldw	r2,-44(fp)
 2007768:	1880c636 	bltu	r3,r2,2007a84 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200776c:	00808074 	movhi	r2,513
 2007770:	108d3e04 	addi	r2,r2,13560
 2007774:	10c00117 	ldw	r3,4(r2)
 2007778:	e0bff517 	ldw	r2,-44(fp)
 200777c:	1884703a 	and	r2,r3,r2
 2007780:	1000151e 	bne	r2,zero,20077d8 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 2007784:	e0fff217 	ldw	r3,-56(fp)
 2007788:	00bfff04 	movi	r2,-4
 200778c:	1884703a 	and	r2,r3,r2
 2007790:	10800104 	addi	r2,r2,4
 2007794:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 2007798:	e0bff517 	ldw	r2,-44(fp)
 200779c:	1085883a 	add	r2,r2,r2
 20077a0:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 20077a4:	00000606 	br	20077c0 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 20077a8:	e0bff217 	ldw	r2,-56(fp)
 20077ac:	10800104 	addi	r2,r2,4
 20077b0:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 20077b4:	e0bff517 	ldw	r2,-44(fp)
 20077b8:	1085883a 	add	r2,r2,r2
 20077bc:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 20077c0:	00808074 	movhi	r2,513
 20077c4:	108d3e04 	addi	r2,r2,13560
 20077c8:	10c00117 	ldw	r3,4(r2)
 20077cc:	e0bff517 	ldw	r2,-44(fp)
 20077d0:	1884703a 	and	r2,r3,r2
 20077d4:	103ff426 	beq	r2,zero,20077a8 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 20077d8:	e0bff217 	ldw	r2,-56(fp)
 20077dc:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 20077e0:	e0bff217 	ldw	r2,-56(fp)
 20077e4:	10800044 	addi	r2,r2,1
 20077e8:	1085883a 	add	r2,r2,r2
 20077ec:	1085883a 	add	r2,r2,r2
 20077f0:	1087883a 	add	r3,r2,r2
 20077f4:	00808074 	movhi	r2,513
 20077f8:	108d3e04 	addi	r2,r2,13560
 20077fc:	1885883a 	add	r2,r3,r2
 2007800:	10bffe04 	addi	r2,r2,-8
 2007804:	e0bff315 	stw	r2,-52(fp)
 2007808:	e0bff317 	ldw	r2,-52(fp)
 200780c:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 2007810:	e0bff317 	ldw	r2,-52(fp)
 2007814:	10800317 	ldw	r2,12(r2)
 2007818:	e0bff115 	stw	r2,-60(fp)
 200781c:	00005e06 	br	2007998 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 2007820:	e0bff117 	ldw	r2,-60(fp)
 2007824:	10c00117 	ldw	r3,4(r2)
 2007828:	00bfff04 	movi	r2,-4
 200782c:	1884703a 	and	r2,r3,r2
 2007830:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 2007834:	e0fffb17 	ldw	r3,-20(fp)
 2007838:	e0bffa17 	ldw	r2,-24(fp)
 200783c:	1885c83a 	sub	r2,r3,r2
 2007840:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 2007844:	e0bff417 	ldw	r2,-48(fp)
 2007848:	10800410 	cmplti	r2,r2,16
 200784c:	1000331e 	bne	r2,zero,200791c <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 2007850:	e0fff117 	ldw	r3,-60(fp)
 2007854:	e0bffa17 	ldw	r2,-24(fp)
 2007858:	1885883a 	add	r2,r3,r2
 200785c:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 2007860:	e0bffa17 	ldw	r2,-24(fp)
 2007864:	10c00054 	ori	r3,r2,1
 2007868:	e0bff117 	ldw	r2,-60(fp)
 200786c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2007870:	e0bff117 	ldw	r2,-60(fp)
 2007874:	10800317 	ldw	r2,12(r2)
 2007878:	e0bff815 	stw	r2,-32(fp)
 200787c:	e0bff117 	ldw	r2,-60(fp)
 2007880:	10800217 	ldw	r2,8(r2)
 2007884:	e0bff715 	stw	r2,-36(fp)
 2007888:	e0bff717 	ldw	r2,-36(fp)
 200788c:	e0fff817 	ldw	r3,-32(fp)
 2007890:	10c00315 	stw	r3,12(r2)
 2007894:	e0bff817 	ldw	r2,-32(fp)
 2007898:	e0fff717 	ldw	r3,-36(fp)
 200789c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 20078a0:	00c08074 	movhi	r3,513
 20078a4:	18cd4004 	addi	r3,r3,13568
 20078a8:	00808074 	movhi	r2,513
 20078ac:	108d4004 	addi	r2,r2,13568
 20078b0:	e13ffc17 	ldw	r4,-16(fp)
 20078b4:	11000315 	stw	r4,12(r2)
 20078b8:	10800317 	ldw	r2,12(r2)
 20078bc:	18800215 	stw	r2,8(r3)
 20078c0:	00808074 	movhi	r2,513
 20078c4:	108d4004 	addi	r2,r2,13568
 20078c8:	e0fffc17 	ldw	r3,-16(fp)
 20078cc:	18800315 	stw	r2,12(r3)
 20078d0:	e0bffc17 	ldw	r2,-16(fp)
 20078d4:	10c00317 	ldw	r3,12(r2)
 20078d8:	e0bffc17 	ldw	r2,-16(fp)
 20078dc:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 20078e0:	e0bff417 	ldw	r2,-48(fp)
 20078e4:	10800054 	ori	r2,r2,1
 20078e8:	1007883a 	mov	r3,r2
 20078ec:	e0bffc17 	ldw	r2,-16(fp)
 20078f0:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 20078f4:	e0bff417 	ldw	r2,-48(fp)
 20078f8:	e0fffc17 	ldw	r3,-16(fp)
 20078fc:	1885883a 	add	r2,r3,r2
 2007900:	e0fff417 	ldw	r3,-48(fp)
 2007904:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 2007908:	e13ffe17 	ldw	r4,-8(fp)
 200790c:	20106100 	call	2010610 <__malloc_unlock>
            return chunk2mem(victim);
 2007910:	e0bff117 	ldw	r2,-60(fp)
 2007914:	10800204 	addi	r2,r2,8
 2007918:	0000a106 	br	2007ba0 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200791c:	e0bff417 	ldw	r2,-48(fp)
 2007920:	10001a16 	blt	r2,zero,200798c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 2007924:	e0fff117 	ldw	r3,-60(fp)
 2007928:	e0bffb17 	ldw	r2,-20(fp)
 200792c:	1885883a 	add	r2,r3,r2
 2007930:	e13ff117 	ldw	r4,-60(fp)
 2007934:	e0fffb17 	ldw	r3,-20(fp)
 2007938:	20c7883a 	add	r3,r4,r3
 200793c:	18c00117 	ldw	r3,4(r3)
 2007940:	18c00054 	ori	r3,r3,1
 2007944:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2007948:	e0bff117 	ldw	r2,-60(fp)
 200794c:	10800317 	ldw	r2,12(r2)
 2007950:	e0bff815 	stw	r2,-32(fp)
 2007954:	e0bff117 	ldw	r2,-60(fp)
 2007958:	10800217 	ldw	r2,8(r2)
 200795c:	e0bff715 	stw	r2,-36(fp)
 2007960:	e0bff717 	ldw	r2,-36(fp)
 2007964:	e0fff817 	ldw	r3,-32(fp)
 2007968:	10c00315 	stw	r3,12(r2)
 200796c:	e0bff817 	ldw	r2,-32(fp)
 2007970:	e0fff717 	ldw	r3,-36(fp)
 2007974:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 2007978:	e13ffe17 	ldw	r4,-8(fp)
 200797c:	20106100 	call	2010610 <__malloc_unlock>
            return chunk2mem(victim);
 2007980:	e0bff117 	ldw	r2,-60(fp)
 2007984:	10800204 	addi	r2,r2,8
 2007988:	00008506 	br	2007ba0 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200798c:	e0bff117 	ldw	r2,-60(fp)
 2007990:	10800317 	ldw	r2,12(r2)
 2007994:	e0bff115 	stw	r2,-60(fp)
 2007998:	e0fff117 	ldw	r3,-60(fp)
 200799c:	e0bff317 	ldw	r2,-52(fp)
 20079a0:	18bf9f1e 	bne	r3,r2,2007820 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 20079a4:	e0bff317 	ldw	r2,-52(fp)
 20079a8:	10800204 	addi	r2,r2,8
 20079ac:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 20079b0:	e0bff217 	ldw	r2,-56(fp)
 20079b4:	10800044 	addi	r2,r2,1
 20079b8:	e0bff215 	stw	r2,-56(fp)
 20079bc:	e0bff217 	ldw	r2,-56(fp)
 20079c0:	108000cc 	andi	r2,r2,3
 20079c4:	103f921e 	bne	r2,zero,2007810 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 20079c8:	e0bff617 	ldw	r2,-40(fp)
 20079cc:	108000cc 	andi	r2,r2,3
 20079d0:	10000a1e 	bne	r2,zero,20079fc <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 20079d4:	00808074 	movhi	r2,513
 20079d8:	108d3e04 	addi	r2,r2,13560
 20079dc:	00c08074 	movhi	r3,513
 20079e0:	18cd3e04 	addi	r3,r3,13560
 20079e4:	19000117 	ldw	r4,4(r3)
 20079e8:	e0fff517 	ldw	r3,-44(fp)
 20079ec:	00c6303a 	nor	r3,zero,r3
 20079f0:	20c6703a 	and	r3,r4,r3
 20079f4:	10c00115 	stw	r3,4(r2)
          break;
 20079f8:	00000a06 	br	2007a24 <_malloc_r+0x9ec>
        }
        --startidx;
 20079fc:	e0bff617 	ldw	r2,-40(fp)
 2007a00:	10bfffc4 	addi	r2,r2,-1
 2007a04:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 2007a08:	e0bff917 	ldw	r2,-28(fp)
 2007a0c:	10bffe04 	addi	r2,r2,-8
 2007a10:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 2007a14:	e0bff917 	ldw	r2,-28(fp)
 2007a18:	10c00217 	ldw	r3,8(r2)
 2007a1c:	e0bff917 	ldw	r2,-28(fp)
 2007a20:	18bfe926 	beq	r3,r2,20079c8 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 2007a24:	e0bff517 	ldw	r2,-44(fp)
 2007a28:	1085883a 	add	r2,r2,r2
 2007a2c:	e0bff515 	stw	r2,-44(fp)
 2007a30:	00808074 	movhi	r2,513
 2007a34:	108d3e04 	addi	r2,r2,13560
 2007a38:	10c00117 	ldw	r3,4(r2)
 2007a3c:	e0bff517 	ldw	r2,-44(fp)
 2007a40:	18801036 	bltu	r3,r2,2007a84 <_malloc_r+0xa4c>
 2007a44:	e0bff517 	ldw	r2,-44(fp)
 2007a48:	10000e26 	beq	r2,zero,2007a84 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 2007a4c:	00000606 	br	2007a68 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 2007a50:	e0bff217 	ldw	r2,-56(fp)
 2007a54:	10800104 	addi	r2,r2,4
 2007a58:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 2007a5c:	e0bff517 	ldw	r2,-44(fp)
 2007a60:	1085883a 	add	r2,r2,r2
 2007a64:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 2007a68:	00808074 	movhi	r2,513
 2007a6c:	108d3e04 	addi	r2,r2,13560
 2007a70:	10c00117 	ldw	r3,4(r2)
 2007a74:	e0bff517 	ldw	r2,-44(fp)
 2007a78:	1884703a 	and	r2,r3,r2
 2007a7c:	103ff426 	beq	r2,zero,2007a50 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 2007a80:	003f5506 	br	20077d8 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 2007a84:	00808074 	movhi	r2,513
 2007a88:	108d3e04 	addi	r2,r2,13560
 2007a8c:	10800217 	ldw	r2,8(r2)
 2007a90:	10c00117 	ldw	r3,4(r2)
 2007a94:	00bfff04 	movi	r2,-4
 2007a98:	1886703a 	and	r3,r3,r2
 2007a9c:	e0bffa17 	ldw	r2,-24(fp)
 2007aa0:	1885c83a 	sub	r2,r3,r2
 2007aa4:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2007aa8:	00808074 	movhi	r2,513
 2007aac:	108d3e04 	addi	r2,r2,13560
 2007ab0:	10800217 	ldw	r2,8(r2)
 2007ab4:	10c00117 	ldw	r3,4(r2)
 2007ab8:	00bfff04 	movi	r2,-4
 2007abc:	1886703a 	and	r3,r3,r2
 2007ac0:	e0bffa17 	ldw	r2,-24(fp)
 2007ac4:	18800336 	bltu	r3,r2,2007ad4 <_malloc_r+0xa9c>
 2007ac8:	e0bff417 	ldw	r2,-48(fp)
 2007acc:	10800408 	cmpgei	r2,r2,16
 2007ad0:	10001b1e 	bne	r2,zero,2007b40 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 2007ad4:	e17ffa17 	ldw	r5,-24(fp)
 2007ad8:	e13ffe17 	ldw	r4,-8(fp)
 2007adc:	2006c840 	call	2006c84 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 2007ae0:	00808074 	movhi	r2,513
 2007ae4:	108d3e04 	addi	r2,r2,13560
 2007ae8:	10800217 	ldw	r2,8(r2)
 2007aec:	10c00117 	ldw	r3,4(r2)
 2007af0:	00bfff04 	movi	r2,-4
 2007af4:	1886703a 	and	r3,r3,r2
 2007af8:	e0bffa17 	ldw	r2,-24(fp)
 2007afc:	1885c83a 	sub	r2,r3,r2
 2007b00:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2007b04:	00808074 	movhi	r2,513
 2007b08:	108d3e04 	addi	r2,r2,13560
 2007b0c:	10800217 	ldw	r2,8(r2)
 2007b10:	10c00117 	ldw	r3,4(r2)
 2007b14:	00bfff04 	movi	r2,-4
 2007b18:	1886703a 	and	r3,r3,r2
 2007b1c:	e0bffa17 	ldw	r2,-24(fp)
 2007b20:	18800336 	bltu	r3,r2,2007b30 <_malloc_r+0xaf8>
 2007b24:	e0bff417 	ldw	r2,-48(fp)
 2007b28:	10800408 	cmpgei	r2,r2,16
 2007b2c:	1000041e 	bne	r2,zero,2007b40 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 2007b30:	e13ffe17 	ldw	r4,-8(fp)
 2007b34:	20106100 	call	2010610 <__malloc_unlock>
      return 0; /* propagate failure */
 2007b38:	0005883a 	mov	r2,zero
 2007b3c:	00001806 	br	2007ba0 <_malloc_r+0xb68>
    }
  }

  victim = top;
 2007b40:	00808074 	movhi	r2,513
 2007b44:	108d3e04 	addi	r2,r2,13560
 2007b48:	10800217 	ldw	r2,8(r2)
 2007b4c:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 2007b50:	e0bffa17 	ldw	r2,-24(fp)
 2007b54:	10c00054 	ori	r3,r2,1
 2007b58:	e0bff117 	ldw	r2,-60(fp)
 2007b5c:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 2007b60:	00808074 	movhi	r2,513
 2007b64:	108d3e04 	addi	r2,r2,13560
 2007b68:	e13ff117 	ldw	r4,-60(fp)
 2007b6c:	e0fffa17 	ldw	r3,-24(fp)
 2007b70:	20c7883a 	add	r3,r4,r3
 2007b74:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 2007b78:	00808074 	movhi	r2,513
 2007b7c:	108d3e04 	addi	r2,r2,13560
 2007b80:	10800217 	ldw	r2,8(r2)
 2007b84:	e0fff417 	ldw	r3,-48(fp)
 2007b88:	18c00054 	ori	r3,r3,1
 2007b8c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 2007b90:	e13ffe17 	ldw	r4,-8(fp)
 2007b94:	20106100 	call	2010610 <__malloc_unlock>
  return chunk2mem(victim);
 2007b98:	e0bff117 	ldw	r2,-60(fp)
 2007b9c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 2007ba0:	e037883a 	mov	sp,fp
 2007ba4:	dfc00117 	ldw	ra,4(sp)
 2007ba8:	df000017 	ldw	fp,0(sp)
 2007bac:	dec00204 	addi	sp,sp,8
 2007bb0:	f800283a 	ret

02007bb4 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 2007bb4:	defff704 	addi	sp,sp,-36
 2007bb8:	df000815 	stw	fp,32(sp)
 2007bbc:	df000804 	addi	fp,sp,32
 2007bc0:	e13ffd15 	stw	r4,-12(fp)
 2007bc4:	e17ffe15 	stw	r5,-8(fp)
 2007bc8:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 2007bcc:	e0bffd17 	ldw	r2,-12(fp)
 2007bd0:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 2007bd4:	e0bffe17 	ldw	r2,-8(fp)
 2007bd8:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 2007bdc:	00001006 	br	2007c20 <memchr+0x6c>
    {
      if (!length--)
 2007be0:	e0bfff17 	ldw	r2,-4(fp)
 2007be4:	10ffffc4 	addi	r3,r2,-1
 2007be8:	e0ffff15 	stw	r3,-4(fp)
 2007bec:	1000021e 	bne	r2,zero,2007bf8 <memchr+0x44>
        return NULL;
 2007bf0:	0005883a 	mov	r2,zero
 2007bf4:	00005a06 	br	2007d60 <memchr+0x1ac>
      if (*src == d)
 2007bf8:	e0bff817 	ldw	r2,-32(fp)
 2007bfc:	10800003 	ldbu	r2,0(r2)
 2007c00:	10c03fcc 	andi	r3,r2,255
 2007c04:	e0bffc03 	ldbu	r2,-16(fp)
 2007c08:	1880021e 	bne	r3,r2,2007c14 <memchr+0x60>
        return (void *) src;
 2007c0c:	e0bff817 	ldw	r2,-32(fp)
 2007c10:	00005306 	br	2007d60 <memchr+0x1ac>
      src++;
 2007c14:	e0bff817 	ldw	r2,-32(fp)
 2007c18:	10800044 	addi	r2,r2,1
 2007c1c:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 2007c20:	e0bff817 	ldw	r2,-32(fp)
 2007c24:	108000cc 	andi	r2,r2,3
 2007c28:	103fed1e 	bne	r2,zero,2007be0 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 2007c2c:	e0bfff17 	ldw	r2,-4(fp)
 2007c30:	10800130 	cmpltui	r2,r2,4
 2007c34:	1000451e 	bne	r2,zero,2007d4c <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 2007c38:	e0bff817 	ldw	r2,-32(fp)
 2007c3c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 2007c40:	e0bffc03 	ldbu	r2,-16(fp)
 2007c44:	1006923a 	slli	r3,r2,8
 2007c48:	e0bffc03 	ldbu	r2,-16(fp)
 2007c4c:	1884b03a 	or	r2,r3,r2
 2007c50:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 2007c54:	e0bffa17 	ldw	r2,-24(fp)
 2007c58:	1004943a 	slli	r2,r2,16
 2007c5c:	e0fffa17 	ldw	r3,-24(fp)
 2007c60:	1884b03a 	or	r2,r3,r2
 2007c64:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2007c68:	00800804 	movi	r2,32
 2007c6c:	e0bffb15 	stw	r2,-20(fp)
 2007c70:	00000906 	br	2007c98 <memchr+0xe4>
        mask = (mask << i) | mask;
 2007c74:	e0fffa17 	ldw	r3,-24(fp)
 2007c78:	e0bffb17 	ldw	r2,-20(fp)
 2007c7c:	1884983a 	sll	r2,r3,r2
 2007c80:	e0fffa17 	ldw	r3,-24(fp)
 2007c84:	1884b03a 	or	r2,r3,r2
 2007c88:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2007c8c:	e0bffb17 	ldw	r2,-20(fp)
 2007c90:	1085883a 	add	r2,r2,r2
 2007c94:	e0bffb15 	stw	r2,-20(fp)
 2007c98:	e0bffb17 	ldw	r2,-20(fp)
 2007c9c:	10800830 	cmpltui	r2,r2,32
 2007ca0:	103ff41e 	bne	r2,zero,2007c74 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2007ca4:	00001706 	br	2007d04 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 2007ca8:	e0bff917 	ldw	r2,-28(fp)
 2007cac:	10c00017 	ldw	r3,0(r2)
 2007cb0:	e0bffa17 	ldw	r2,-24(fp)
 2007cb4:	1886f03a 	xor	r3,r3,r2
 2007cb8:	00bfbff4 	movhi	r2,65279
 2007cbc:	10bfbfc4 	addi	r2,r2,-257
 2007cc0:	1887883a 	add	r3,r3,r2
 2007cc4:	e0bff917 	ldw	r2,-28(fp)
 2007cc8:	11000017 	ldw	r4,0(r2)
 2007ccc:	e0bffa17 	ldw	r2,-24(fp)
 2007cd0:	2084f03a 	xor	r2,r4,r2
 2007cd4:	0084303a 	nor	r2,zero,r2
 2007cd8:	1886703a 	and	r3,r3,r2
 2007cdc:	00a02074 	movhi	r2,32897
 2007ce0:	10a02004 	addi	r2,r2,-32640
 2007ce4:	1884703a 	and	r2,r3,r2
 2007ce8:	10000a1e 	bne	r2,zero,2007d14 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 2007cec:	e0bfff17 	ldw	r2,-4(fp)
 2007cf0:	10bfff04 	addi	r2,r2,-4
 2007cf4:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 2007cf8:	e0bff917 	ldw	r2,-28(fp)
 2007cfc:	10800104 	addi	r2,r2,4
 2007d00:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2007d04:	e0bfff17 	ldw	r2,-4(fp)
 2007d08:	10800128 	cmpgeui	r2,r2,4
 2007d0c:	103fe61e 	bne	r2,zero,2007ca8 <memchr+0xf4>
 2007d10:	00000106 	br	2007d18 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 2007d14:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 2007d18:	e0bff917 	ldw	r2,-28(fp)
 2007d1c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2007d20:	00000a06 	br	2007d4c <memchr+0x198>
    {
      if (*src == d)
 2007d24:	e0bff817 	ldw	r2,-32(fp)
 2007d28:	10800003 	ldbu	r2,0(r2)
 2007d2c:	10c03fcc 	andi	r3,r2,255
 2007d30:	e0bffc03 	ldbu	r2,-16(fp)
 2007d34:	1880021e 	bne	r3,r2,2007d40 <memchr+0x18c>
        return (void *) src;
 2007d38:	e0bff817 	ldw	r2,-32(fp)
 2007d3c:	00000806 	br	2007d60 <memchr+0x1ac>
      src++;
 2007d40:	e0bff817 	ldw	r2,-32(fp)
 2007d44:	10800044 	addi	r2,r2,1
 2007d48:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2007d4c:	e0bfff17 	ldw	r2,-4(fp)
 2007d50:	10ffffc4 	addi	r3,r2,-1
 2007d54:	e0ffff15 	stw	r3,-4(fp)
 2007d58:	103ff21e 	bne	r2,zero,2007d24 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 2007d5c:	0005883a 	mov	r2,zero
}
 2007d60:	e037883a 	mov	sp,fp
 2007d64:	df000017 	ldw	fp,0(sp)
 2007d68:	dec00104 	addi	sp,sp,4
 2007d6c:	f800283a 	ret

02007d70 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 2007d70:	defff804 	addi	sp,sp,-32
 2007d74:	df000715 	stw	fp,28(sp)
 2007d78:	df000704 	addi	fp,sp,28
 2007d7c:	e13ffd15 	stw	r4,-12(fp)
 2007d80:	e17ffe15 	stw	r5,-8(fp)
 2007d84:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 2007d88:	e0bffd17 	ldw	r2,-12(fp)
 2007d8c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 2007d90:	e0bffe17 	ldw	r2,-8(fp)
 2007d94:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 2007d98:	e0bfff17 	ldw	r2,-4(fp)
 2007d9c:	10800430 	cmpltui	r2,r2,16
 2007da0:	10004c1e 	bne	r2,zero,2007ed4 <memcpy+0x164>
 2007da4:	e0fffa17 	ldw	r3,-24(fp)
 2007da8:	e0bff917 	ldw	r2,-28(fp)
 2007dac:	1884b03a 	or	r2,r3,r2
 2007db0:	108000cc 	andi	r2,r2,3
 2007db4:	1000471e 	bne	r2,zero,2007ed4 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2007db8:	e0bff917 	ldw	r2,-28(fp)
 2007dbc:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 2007dc0:	e0bffa17 	ldw	r2,-24(fp)
 2007dc4:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2007dc8:	00002306 	br	2007e58 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2007dcc:	e0bffb17 	ldw	r2,-20(fp)
 2007dd0:	10c00104 	addi	r3,r2,4
 2007dd4:	e0fffb15 	stw	r3,-20(fp)
 2007dd8:	e0fffc17 	ldw	r3,-16(fp)
 2007ddc:	19000104 	addi	r4,r3,4
 2007de0:	e13ffc15 	stw	r4,-16(fp)
 2007de4:	18c00017 	ldw	r3,0(r3)
 2007de8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007dec:	e0bffb17 	ldw	r2,-20(fp)
 2007df0:	10c00104 	addi	r3,r2,4
 2007df4:	e0fffb15 	stw	r3,-20(fp)
 2007df8:	e0fffc17 	ldw	r3,-16(fp)
 2007dfc:	19000104 	addi	r4,r3,4
 2007e00:	e13ffc15 	stw	r4,-16(fp)
 2007e04:	18c00017 	ldw	r3,0(r3)
 2007e08:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007e0c:	e0bffb17 	ldw	r2,-20(fp)
 2007e10:	10c00104 	addi	r3,r2,4
 2007e14:	e0fffb15 	stw	r3,-20(fp)
 2007e18:	e0fffc17 	ldw	r3,-16(fp)
 2007e1c:	19000104 	addi	r4,r3,4
 2007e20:	e13ffc15 	stw	r4,-16(fp)
 2007e24:	18c00017 	ldw	r3,0(r3)
 2007e28:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007e2c:	e0bffb17 	ldw	r2,-20(fp)
 2007e30:	10c00104 	addi	r3,r2,4
 2007e34:	e0fffb15 	stw	r3,-20(fp)
 2007e38:	e0fffc17 	ldw	r3,-16(fp)
 2007e3c:	19000104 	addi	r4,r3,4
 2007e40:	e13ffc15 	stw	r4,-16(fp)
 2007e44:	18c00017 	ldw	r3,0(r3)
 2007e48:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2007e4c:	e0bfff17 	ldw	r2,-4(fp)
 2007e50:	10bffc04 	addi	r2,r2,-16
 2007e54:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2007e58:	e0bfff17 	ldw	r2,-4(fp)
 2007e5c:	10800428 	cmpgeui	r2,r2,16
 2007e60:	103fda1e 	bne	r2,zero,2007dcc <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2007e64:	00000b06 	br	2007e94 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2007e68:	e0bffb17 	ldw	r2,-20(fp)
 2007e6c:	10c00104 	addi	r3,r2,4
 2007e70:	e0fffb15 	stw	r3,-20(fp)
 2007e74:	e0fffc17 	ldw	r3,-16(fp)
 2007e78:	19000104 	addi	r4,r3,4
 2007e7c:	e13ffc15 	stw	r4,-16(fp)
 2007e80:	18c00017 	ldw	r3,0(r3)
 2007e84:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 2007e88:	e0bfff17 	ldw	r2,-4(fp)
 2007e8c:	10bfff04 	addi	r2,r2,-4
 2007e90:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2007e94:	e0bfff17 	ldw	r2,-4(fp)
 2007e98:	10800128 	cmpgeui	r2,r2,4
 2007e9c:	103ff21e 	bne	r2,zero,2007e68 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 2007ea0:	e0bffb17 	ldw	r2,-20(fp)
 2007ea4:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2007ea8:	e0bffc17 	ldw	r2,-16(fp)
 2007eac:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2007eb0:	00000806 	br	2007ed4 <memcpy+0x164>
    *dst++ = *src++;
 2007eb4:	e0bff917 	ldw	r2,-28(fp)
 2007eb8:	10c00044 	addi	r3,r2,1
 2007ebc:	e0fff915 	stw	r3,-28(fp)
 2007ec0:	e0fffa17 	ldw	r3,-24(fp)
 2007ec4:	19000044 	addi	r4,r3,1
 2007ec8:	e13ffa15 	stw	r4,-24(fp)
 2007ecc:	18c00003 	ldbu	r3,0(r3)
 2007ed0:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2007ed4:	e0bfff17 	ldw	r2,-4(fp)
 2007ed8:	10ffffc4 	addi	r3,r2,-1
 2007edc:	e0ffff15 	stw	r3,-4(fp)
 2007ee0:	103ff41e 	bne	r2,zero,2007eb4 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2007ee4:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2007ee8:	e037883a 	mov	sp,fp
 2007eec:	df000017 	ldw	fp,0(sp)
 2007ef0:	dec00104 	addi	sp,sp,4
 2007ef4:	f800283a 	ret

02007ef8 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 2007ef8:	defff804 	addi	sp,sp,-32
 2007efc:	df000715 	stw	fp,28(sp)
 2007f00:	df000704 	addi	fp,sp,28
 2007f04:	e13ffd15 	stw	r4,-12(fp)
 2007f08:	e17ffe15 	stw	r5,-8(fp)
 2007f0c:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 2007f10:	e0bffd17 	ldw	r2,-12(fp)
 2007f14:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 2007f18:	e0bffe17 	ldw	r2,-8(fp)
 2007f1c:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2007f20:	e0fffa17 	ldw	r3,-24(fp)
 2007f24:	e0bff917 	ldw	r2,-28(fp)
 2007f28:	18801d2e 	bgeu	r3,r2,2007fa0 <memmove+0xa8>
 2007f2c:	e0fffa17 	ldw	r3,-24(fp)
 2007f30:	e0bfff17 	ldw	r2,-4(fp)
 2007f34:	1885883a 	add	r2,r3,r2
 2007f38:	e0fff917 	ldw	r3,-28(fp)
 2007f3c:	1880182e 	bgeu	r3,r2,2007fa0 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 2007f40:	e0fffa17 	ldw	r3,-24(fp)
 2007f44:	e0bfff17 	ldw	r2,-4(fp)
 2007f48:	1885883a 	add	r2,r3,r2
 2007f4c:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 2007f50:	e0fff917 	ldw	r3,-28(fp)
 2007f54:	e0bfff17 	ldw	r2,-4(fp)
 2007f58:	1885883a 	add	r2,r3,r2
 2007f5c:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 2007f60:	00000a06 	br	2007f8c <memmove+0x94>
	{
	  *--dst = *--src;
 2007f64:	e0bff917 	ldw	r2,-28(fp)
 2007f68:	10bfffc4 	addi	r2,r2,-1
 2007f6c:	e0bff915 	stw	r2,-28(fp)
 2007f70:	e0bffa17 	ldw	r2,-24(fp)
 2007f74:	10bfffc4 	addi	r2,r2,-1
 2007f78:	e0bffa15 	stw	r2,-24(fp)
 2007f7c:	e0bffa17 	ldw	r2,-24(fp)
 2007f80:	10c00003 	ldbu	r3,0(r2)
 2007f84:	e0bff917 	ldw	r2,-28(fp)
 2007f88:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 2007f8c:	e0bfff17 	ldw	r2,-4(fp)
 2007f90:	10ffffc4 	addi	r3,r2,-1
 2007f94:	e0ffff15 	stw	r3,-4(fp)
 2007f98:	103ff21e 	bne	r2,zero,2007f64 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2007f9c:	00005306 	br	20080ec <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 2007fa0:	e0bfff17 	ldw	r2,-4(fp)
 2007fa4:	10800430 	cmpltui	r2,r2,16
 2007fa8:	10004c1e 	bne	r2,zero,20080dc <memmove+0x1e4>
 2007fac:	e0fffa17 	ldw	r3,-24(fp)
 2007fb0:	e0bff917 	ldw	r2,-28(fp)
 2007fb4:	1884b03a 	or	r2,r3,r2
 2007fb8:	108000cc 	andi	r2,r2,3
 2007fbc:	1000471e 	bne	r2,zero,20080dc <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 2007fc0:	e0bff917 	ldw	r2,-28(fp)
 2007fc4:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 2007fc8:	e0bffa17 	ldw	r2,-24(fp)
 2007fcc:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2007fd0:	00002306 	br	2008060 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 2007fd4:	e0bffb17 	ldw	r2,-20(fp)
 2007fd8:	10c00104 	addi	r3,r2,4
 2007fdc:	e0fffb15 	stw	r3,-20(fp)
 2007fe0:	e0fffc17 	ldw	r3,-16(fp)
 2007fe4:	19000104 	addi	r4,r3,4
 2007fe8:	e13ffc15 	stw	r4,-16(fp)
 2007fec:	18c00017 	ldw	r3,0(r3)
 2007ff0:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2007ff4:	e0bffb17 	ldw	r2,-20(fp)
 2007ff8:	10c00104 	addi	r3,r2,4
 2007ffc:	e0fffb15 	stw	r3,-20(fp)
 2008000:	e0fffc17 	ldw	r3,-16(fp)
 2008004:	19000104 	addi	r4,r3,4
 2008008:	e13ffc15 	stw	r4,-16(fp)
 200800c:	18c00017 	ldw	r3,0(r3)
 2008010:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2008014:	e0bffb17 	ldw	r2,-20(fp)
 2008018:	10c00104 	addi	r3,r2,4
 200801c:	e0fffb15 	stw	r3,-20(fp)
 2008020:	e0fffc17 	ldw	r3,-16(fp)
 2008024:	19000104 	addi	r4,r3,4
 2008028:	e13ffc15 	stw	r4,-16(fp)
 200802c:	18c00017 	ldw	r3,0(r3)
 2008030:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2008034:	e0bffb17 	ldw	r2,-20(fp)
 2008038:	10c00104 	addi	r3,r2,4
 200803c:	e0fffb15 	stw	r3,-20(fp)
 2008040:	e0fffc17 	ldw	r3,-16(fp)
 2008044:	19000104 	addi	r4,r3,4
 2008048:	e13ffc15 	stw	r4,-16(fp)
 200804c:	18c00017 	ldw	r3,0(r3)
 2008050:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 2008054:	e0bfff17 	ldw	r2,-4(fp)
 2008058:	10bffc04 	addi	r2,r2,-16
 200805c:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2008060:	e0bfff17 	ldw	r2,-4(fp)
 2008064:	10800428 	cmpgeui	r2,r2,16
 2008068:	103fda1e 	bne	r2,zero,2007fd4 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200806c:	00000b06 	br	200809c <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 2008070:	e0bffb17 	ldw	r2,-20(fp)
 2008074:	10c00104 	addi	r3,r2,4
 2008078:	e0fffb15 	stw	r3,-20(fp)
 200807c:	e0fffc17 	ldw	r3,-16(fp)
 2008080:	19000104 	addi	r4,r3,4
 2008084:	e13ffc15 	stw	r4,-16(fp)
 2008088:	18c00017 	ldw	r3,0(r3)
 200808c:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 2008090:	e0bfff17 	ldw	r2,-4(fp)
 2008094:	10bfff04 	addi	r2,r2,-4
 2008098:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200809c:	e0bfff17 	ldw	r2,-4(fp)
 20080a0:	10800128 	cmpgeui	r2,r2,4
 20080a4:	103ff21e 	bne	r2,zero,2008070 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 20080a8:	e0bffb17 	ldw	r2,-20(fp)
 20080ac:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 20080b0:	e0bffc17 	ldw	r2,-16(fp)
 20080b4:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 20080b8:	00000806 	br	20080dc <memmove+0x1e4>
        {
          *dst++ = *src++;
 20080bc:	e0bff917 	ldw	r2,-28(fp)
 20080c0:	10c00044 	addi	r3,r2,1
 20080c4:	e0fff915 	stw	r3,-28(fp)
 20080c8:	e0fffa17 	ldw	r3,-24(fp)
 20080cc:	19000044 	addi	r4,r3,1
 20080d0:	e13ffa15 	stw	r4,-24(fp)
 20080d4:	18c00003 	ldbu	r3,0(r3)
 20080d8:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 20080dc:	e0bfff17 	ldw	r2,-4(fp)
 20080e0:	10ffffc4 	addi	r3,r2,-1
 20080e4:	e0ffff15 	stw	r3,-4(fp)
 20080e8:	103ff41e 	bne	r2,zero,20080bc <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 20080ec:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 20080f0:	e037883a 	mov	sp,fp
 20080f4:	df000017 	ldw	fp,0(sp)
 20080f8:	dec00104 	addi	sp,sp,4
 20080fc:	f800283a 	ret

02008100 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2008100:	defff704 	addi	sp,sp,-36
 2008104:	df000815 	stw	fp,32(sp)
 2008108:	df000804 	addi	fp,sp,32
 200810c:	e13ffd15 	stw	r4,-12(fp)
 2008110:	e17ffe15 	stw	r5,-8(fp)
 2008114:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2008118:	e0bffd17 	ldw	r2,-12(fp)
 200811c:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2008120:	e0bffe17 	ldw	r2,-8(fp)
 2008124:	10803fcc 	andi	r2,r2,255
 2008128:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 200812c:	00000c06 	br	2008160 <memset+0x60>
    {
      if (n--)
 2008130:	e0bfff17 	ldw	r2,-4(fp)
 2008134:	10ffffc4 	addi	r3,r2,-1
 2008138:	e0ffff15 	stw	r3,-4(fp)
 200813c:	10000626 	beq	r2,zero,2008158 <memset+0x58>
        *s++ = (char) c;
 2008140:	e0bff817 	ldw	r2,-32(fp)
 2008144:	10c00044 	addi	r3,r2,1
 2008148:	e0fff815 	stw	r3,-32(fp)
 200814c:	e0fffe17 	ldw	r3,-8(fp)
 2008150:	10c00005 	stb	r3,0(r2)
 2008154:	00000206 	br	2008160 <memset+0x60>
      else
        return m;
 2008158:	e0bffd17 	ldw	r2,-12(fp)
 200815c:	00005506 	br	20082b4 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2008160:	e0bff817 	ldw	r2,-32(fp)
 2008164:	108000cc 	andi	r2,r2,3
 2008168:	103ff11e 	bne	r2,zero,2008130 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 200816c:	e0bfff17 	ldw	r2,-4(fp)
 2008170:	10800130 	cmpltui	r2,r2,4
 2008174:	10004a1e 	bne	r2,zero,20082a0 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2008178:	e0bff817 	ldw	r2,-32(fp)
 200817c:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2008180:	e0bffc17 	ldw	r2,-16(fp)
 2008184:	1006923a 	slli	r3,r2,8
 2008188:	e0bffc17 	ldw	r2,-16(fp)
 200818c:	1884b03a 	or	r2,r3,r2
 2008190:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 2008194:	e0bffa17 	ldw	r2,-24(fp)
 2008198:	1004943a 	slli	r2,r2,16
 200819c:	e0fffa17 	ldw	r3,-24(fp)
 20081a0:	1884b03a 	or	r2,r3,r2
 20081a4:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20081a8:	00800804 	movi	r2,32
 20081ac:	e0bff915 	stw	r2,-28(fp)
 20081b0:	00000906 	br	20081d8 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 20081b4:	e0fffa17 	ldw	r3,-24(fp)
 20081b8:	e0bff917 	ldw	r2,-28(fp)
 20081bc:	1884983a 	sll	r2,r3,r2
 20081c0:	e0fffa17 	ldw	r3,-24(fp)
 20081c4:	1884b03a 	or	r2,r3,r2
 20081c8:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20081cc:	e0bff917 	ldw	r2,-28(fp)
 20081d0:	1085883a 	add	r2,r2,r2
 20081d4:	e0bff915 	stw	r2,-28(fp)
 20081d8:	e0bff917 	ldw	r2,-28(fp)
 20081dc:	10800830 	cmpltui	r2,r2,32
 20081e0:	103ff41e 	bne	r2,zero,20081b4 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 20081e4:	00001706 	br	2008244 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 20081e8:	e0bffb17 	ldw	r2,-20(fp)
 20081ec:	10c00104 	addi	r3,r2,4
 20081f0:	e0fffb15 	stw	r3,-20(fp)
 20081f4:	e0fffa17 	ldw	r3,-24(fp)
 20081f8:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 20081fc:	e0bffb17 	ldw	r2,-20(fp)
 2008200:	10c00104 	addi	r3,r2,4
 2008204:	e0fffb15 	stw	r3,-20(fp)
 2008208:	e0fffa17 	ldw	r3,-24(fp)
 200820c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2008210:	e0bffb17 	ldw	r2,-20(fp)
 2008214:	10c00104 	addi	r3,r2,4
 2008218:	e0fffb15 	stw	r3,-20(fp)
 200821c:	e0fffa17 	ldw	r3,-24(fp)
 2008220:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2008224:	e0bffb17 	ldw	r2,-20(fp)
 2008228:	10c00104 	addi	r3,r2,4
 200822c:	e0fffb15 	stw	r3,-20(fp)
 2008230:	e0fffa17 	ldw	r3,-24(fp)
 2008234:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2008238:	e0bfff17 	ldw	r2,-4(fp)
 200823c:	10bffc04 	addi	r2,r2,-16
 2008240:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2008244:	e0bfff17 	ldw	r2,-4(fp)
 2008248:	10800428 	cmpgeui	r2,r2,16
 200824c:	103fe61e 	bne	r2,zero,20081e8 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2008250:	00000806 	br	2008274 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2008254:	e0bffb17 	ldw	r2,-20(fp)
 2008258:	10c00104 	addi	r3,r2,4
 200825c:	e0fffb15 	stw	r3,-20(fp)
 2008260:	e0fffa17 	ldw	r3,-24(fp)
 2008264:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2008268:	e0bfff17 	ldw	r2,-4(fp)
 200826c:	10bfff04 	addi	r2,r2,-4
 2008270:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2008274:	e0bfff17 	ldw	r2,-4(fp)
 2008278:	10800128 	cmpgeui	r2,r2,4
 200827c:	103ff51e 	bne	r2,zero,2008254 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2008280:	e0bffb17 	ldw	r2,-20(fp)
 2008284:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2008288:	00000506 	br	20082a0 <memset+0x1a0>
    *s++ = (char) c;
 200828c:	e0bff817 	ldw	r2,-32(fp)
 2008290:	10c00044 	addi	r3,r2,1
 2008294:	e0fff815 	stw	r3,-32(fp)
 2008298:	e0fffe17 	ldw	r3,-8(fp)
 200829c:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20082a0:	e0bfff17 	ldw	r2,-4(fp)
 20082a4:	10ffffc4 	addi	r3,r2,-1
 20082a8:	e0ffff15 	stw	r3,-4(fp)
 20082ac:	103ff71e 	bne	r2,zero,200828c <memset+0x18c>
    *s++ = (char) c;

  return m;
 20082b0:	e0bffd17 	ldw	r2,-12(fp)
}
 20082b4:	e037883a 	mov	sp,fp
 20082b8:	df000017 	ldw	fp,0(sp)
 20082bc:	dec00104 	addi	sp,sp,4
 20082c0:	f800283a 	ret

020082c4 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 20082c4:	defffa04 	addi	sp,sp,-24
 20082c8:	dfc00515 	stw	ra,20(sp)
 20082cc:	df000415 	stw	fp,16(sp)
 20082d0:	df000404 	addi	fp,sp,16
 20082d4:	e13ffe15 	stw	r4,-8(fp)
 20082d8:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 20082dc:	e0bffe17 	ldw	r2,-8(fp)
 20082e0:	10801317 	ldw	r2,76(r2)
 20082e4:	10000c1e 	bne	r2,zero,2008318 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 20082e8:	01800844 	movi	r6,33
 20082ec:	01400104 	movi	r5,4
 20082f0:	e13ffe17 	ldw	r4,-8(fp)
 20082f4:	200c4540 	call	200c454 <_calloc_r>
 20082f8:	1007883a 	mov	r3,r2
 20082fc:	e0bffe17 	ldw	r2,-8(fp)
 2008300:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 2008304:	e0bffe17 	ldw	r2,-8(fp)
 2008308:	10801317 	ldw	r2,76(r2)
 200830c:	1000021e 	bne	r2,zero,2008318 <_Balloc+0x54>
	{
	  return NULL;
 2008310:	0005883a 	mov	r2,zero
 2008314:	00003206 	br	20083e0 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 2008318:	e0bffe17 	ldw	r2,-8(fp)
 200831c:	10c01317 	ldw	r3,76(r2)
 2008320:	e0bfff17 	ldw	r2,-4(fp)
 2008324:	1085883a 	add	r2,r2,r2
 2008328:	1085883a 	add	r2,r2,r2
 200832c:	1885883a 	add	r2,r3,r2
 2008330:	10800017 	ldw	r2,0(r2)
 2008334:	e0bffc15 	stw	r2,-16(fp)
 2008338:	e0bffc17 	ldw	r2,-16(fp)
 200833c:	10000a26 	beq	r2,zero,2008368 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 2008340:	e0bffe17 	ldw	r2,-8(fp)
 2008344:	10c01317 	ldw	r3,76(r2)
 2008348:	e0bfff17 	ldw	r2,-4(fp)
 200834c:	1085883a 	add	r2,r2,r2
 2008350:	1085883a 	add	r2,r2,r2
 2008354:	1885883a 	add	r2,r3,r2
 2008358:	e0fffc17 	ldw	r3,-16(fp)
 200835c:	18c00017 	ldw	r3,0(r3)
 2008360:	10c00015 	stw	r3,0(r2)
 2008364:	00001706 	br	20083c4 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 2008368:	00c00044 	movi	r3,1
 200836c:	e0bfff17 	ldw	r2,-4(fp)
 2008370:	1884983a 	sll	r2,r3,r2
 2008374:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 2008378:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200837c:	10800144 	addi	r2,r2,5
 2008380:	1085883a 	add	r2,r2,r2
 2008384:	1085883a 	add	r2,r2,r2
 2008388:	100d883a 	mov	r6,r2
 200838c:	01400044 	movi	r5,1
 2008390:	e13ffe17 	ldw	r4,-8(fp)
 2008394:	200c4540 	call	200c454 <_calloc_r>
 2008398:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200839c:	e0bffc17 	ldw	r2,-16(fp)
 20083a0:	1000021e 	bne	r2,zero,20083ac <_Balloc+0xe8>
 20083a4:	0005883a 	mov	r2,zero
 20083a8:	00000d06 	br	20083e0 <_Balloc+0x11c>
      rv->_k = k;
 20083ac:	e0bffc17 	ldw	r2,-16(fp)
 20083b0:	e0ffff17 	ldw	r3,-4(fp)
 20083b4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 20083b8:	e0bffc17 	ldw	r2,-16(fp)
 20083bc:	e0fffd17 	ldw	r3,-12(fp)
 20083c0:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 20083c4:	e0bffc17 	ldw	r2,-16(fp)
 20083c8:	10000415 	stw	zero,16(r2)
 20083cc:	e0bffc17 	ldw	r2,-16(fp)
 20083d0:	10c00417 	ldw	r3,16(r2)
 20083d4:	e0bffc17 	ldw	r2,-16(fp)
 20083d8:	10c00315 	stw	r3,12(r2)
  return rv;
 20083dc:	e0bffc17 	ldw	r2,-16(fp)
}
 20083e0:	e037883a 	mov	sp,fp
 20083e4:	dfc00117 	ldw	ra,4(sp)
 20083e8:	df000017 	ldw	fp,0(sp)
 20083ec:	dec00204 	addi	sp,sp,8
 20083f0:	f800283a 	ret

020083f4 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 20083f4:	defffd04 	addi	sp,sp,-12
 20083f8:	df000215 	stw	fp,8(sp)
 20083fc:	df000204 	addi	fp,sp,8
 2008400:	e13ffe15 	stw	r4,-8(fp)
 2008404:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 2008408:	e0bfff17 	ldw	r2,-4(fp)
 200840c:	10001326 	beq	r2,zero,200845c <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 2008410:	e0bffe17 	ldw	r2,-8(fp)
 2008414:	10c01317 	ldw	r3,76(r2)
 2008418:	e0bfff17 	ldw	r2,-4(fp)
 200841c:	10800117 	ldw	r2,4(r2)
 2008420:	1085883a 	add	r2,r2,r2
 2008424:	1085883a 	add	r2,r2,r2
 2008428:	1885883a 	add	r2,r3,r2
 200842c:	10c00017 	ldw	r3,0(r2)
 2008430:	e0bfff17 	ldw	r2,-4(fp)
 2008434:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 2008438:	e0bffe17 	ldw	r2,-8(fp)
 200843c:	10c01317 	ldw	r3,76(r2)
 2008440:	e0bfff17 	ldw	r2,-4(fp)
 2008444:	10800117 	ldw	r2,4(r2)
 2008448:	1085883a 	add	r2,r2,r2
 200844c:	1085883a 	add	r2,r2,r2
 2008450:	1885883a 	add	r2,r3,r2
 2008454:	e0ffff17 	ldw	r3,-4(fp)
 2008458:	10c00015 	stw	r3,0(r2)
    }
}
 200845c:	0001883a 	nop
 2008460:	e037883a 	mov	sp,fp
 2008464:	df000017 	ldw	fp,0(sp)
 2008468:	dec00104 	addi	sp,sp,4
 200846c:	f800283a 	ret

02008470 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 2008470:	defff304 	addi	sp,sp,-52
 2008474:	dfc00c15 	stw	ra,48(sp)
 2008478:	df000b15 	stw	fp,44(sp)
 200847c:	df000b04 	addi	fp,sp,44
 2008480:	e13ffc15 	stw	r4,-16(fp)
 2008484:	e17ffd15 	stw	r5,-12(fp)
 2008488:	e1bffe15 	stw	r6,-8(fp)
 200848c:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 2008490:	e0bffd17 	ldw	r2,-12(fp)
 2008494:	10800417 	ldw	r2,16(r2)
 2008498:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200849c:	e0bffd17 	ldw	r2,-12(fp)
 20084a0:	10800504 	addi	r2,r2,20
 20084a4:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 20084a8:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 20084ac:	e0bff617 	ldw	r2,-40(fp)
 20084b0:	10800017 	ldw	r2,0(r2)
 20084b4:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 20084b8:	e0bff817 	ldw	r2,-32(fp)
 20084bc:	10ffffcc 	andi	r3,r2,65535
 20084c0:	e0bffe17 	ldw	r2,-8(fp)
 20084c4:	1887383a 	mul	r3,r3,r2
 20084c8:	e0bfff17 	ldw	r2,-4(fp)
 20084cc:	1885883a 	add	r2,r3,r2
 20084d0:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 20084d4:	e0bff817 	ldw	r2,-32(fp)
 20084d8:	1006d43a 	srli	r3,r2,16
 20084dc:	e0bffe17 	ldw	r2,-8(fp)
 20084e0:	1887383a 	mul	r3,r3,r2
 20084e4:	e0bff917 	ldw	r2,-28(fp)
 20084e8:	1004d43a 	srli	r2,r2,16
 20084ec:	1885883a 	add	r2,r3,r2
 20084f0:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 20084f4:	e0bffa17 	ldw	r2,-24(fp)
 20084f8:	1004d43a 	srli	r2,r2,16
 20084fc:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 2008500:	e0bff617 	ldw	r2,-40(fp)
 2008504:	10c00104 	addi	r3,r2,4
 2008508:	e0fff615 	stw	r3,-40(fp)
 200850c:	e0fffa17 	ldw	r3,-24(fp)
 2008510:	1808943a 	slli	r4,r3,16
 2008514:	e0fff917 	ldw	r3,-28(fp)
 2008518:	18ffffcc 	andi	r3,r3,65535
 200851c:	20c7883a 	add	r3,r4,r3
 2008520:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 2008524:	e0bff517 	ldw	r2,-44(fp)
 2008528:	10800044 	addi	r2,r2,1
 200852c:	e0bff515 	stw	r2,-44(fp)
 2008530:	e0fff517 	ldw	r3,-44(fp)
 2008534:	e0bff717 	ldw	r2,-36(fp)
 2008538:	18bfdc16 	blt	r3,r2,20084ac <__multadd+0x3c>
  if (a)
 200853c:	e0bfff17 	ldw	r2,-4(fp)
 2008540:	10002a26 	beq	r2,zero,20085ec <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 2008544:	e0bffd17 	ldw	r2,-12(fp)
 2008548:	10800217 	ldw	r2,8(r2)
 200854c:	e0fff717 	ldw	r3,-36(fp)
 2008550:	18801916 	blt	r3,r2,20085b8 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 2008554:	e0bffd17 	ldw	r2,-12(fp)
 2008558:	10800117 	ldw	r2,4(r2)
 200855c:	10800044 	addi	r2,r2,1
 2008560:	100b883a 	mov	r5,r2
 2008564:	e13ffc17 	ldw	r4,-16(fp)
 2008568:	20082c40 	call	20082c4 <_Balloc>
 200856c:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 2008570:	e0bffb17 	ldw	r2,-20(fp)
 2008574:	10c00304 	addi	r3,r2,12
 2008578:	e0bffd17 	ldw	r2,-12(fp)
 200857c:	11000304 	addi	r4,r2,12
 2008580:	e0bffd17 	ldw	r2,-12(fp)
 2008584:	10800417 	ldw	r2,16(r2)
 2008588:	10800084 	addi	r2,r2,2
 200858c:	1085883a 	add	r2,r2,r2
 2008590:	1085883a 	add	r2,r2,r2
 2008594:	100d883a 	mov	r6,r2
 2008598:	200b883a 	mov	r5,r4
 200859c:	1809883a 	mov	r4,r3
 20085a0:	2007d700 	call	2007d70 <memcpy>
	  Bfree (ptr, b);
 20085a4:	e17ffd17 	ldw	r5,-12(fp)
 20085a8:	e13ffc17 	ldw	r4,-16(fp)
 20085ac:	20083f40 	call	20083f4 <_Bfree>
	  b = b1;
 20085b0:	e0bffb17 	ldw	r2,-20(fp)
 20085b4:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 20085b8:	e0bff717 	ldw	r2,-36(fp)
 20085bc:	10c00044 	addi	r3,r2,1
 20085c0:	e0fff715 	stw	r3,-36(fp)
 20085c4:	e0ffff17 	ldw	r3,-4(fp)
 20085c8:	e13ffd17 	ldw	r4,-12(fp)
 20085cc:	10800144 	addi	r2,r2,5
 20085d0:	1085883a 	add	r2,r2,r2
 20085d4:	1085883a 	add	r2,r2,r2
 20085d8:	2085883a 	add	r2,r4,r2
 20085dc:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 20085e0:	e0bffd17 	ldw	r2,-12(fp)
 20085e4:	e0fff717 	ldw	r3,-36(fp)
 20085e8:	10c00415 	stw	r3,16(r2)
    }
  return b;
 20085ec:	e0bffd17 	ldw	r2,-12(fp)
}
 20085f0:	e037883a 	mov	sp,fp
 20085f4:	dfc00117 	ldw	ra,4(sp)
 20085f8:	df000017 	ldw	fp,0(sp)
 20085fc:	dec00204 	addi	sp,sp,8
 2008600:	f800283a 	ret

02008604 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 2008604:	defff504 	addi	sp,sp,-44
 2008608:	dfc00a15 	stw	ra,40(sp)
 200860c:	df000915 	stw	fp,36(sp)
 2008610:	df000904 	addi	fp,sp,36
 2008614:	e13ffc15 	stw	r4,-16(fp)
 2008618:	e17ffd15 	stw	r5,-12(fp)
 200861c:	e1bffe15 	stw	r6,-8(fp)
 2008620:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 2008624:	e0bfff17 	ldw	r2,-4(fp)
 2008628:	10800204 	addi	r2,r2,8
 200862c:	01400244 	movi	r5,9
 2008630:	1009883a 	mov	r4,r2
 2008634:	200da880 	call	200da88 <__divsi3>
 2008638:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200863c:	e03ff915 	stw	zero,-28(fp)
 2008640:	00800044 	movi	r2,1
 2008644:	e0bffa15 	stw	r2,-24(fp)
 2008648:	00000606 	br	2008664 <__s2b+0x60>
 200864c:	e0bffa17 	ldw	r2,-24(fp)
 2008650:	1085883a 	add	r2,r2,r2
 2008654:	e0bffa15 	stw	r2,-24(fp)
 2008658:	e0bff917 	ldw	r2,-28(fp)
 200865c:	10800044 	addi	r2,r2,1
 2008660:	e0bff915 	stw	r2,-28(fp)
 2008664:	e0bffb17 	ldw	r2,-20(fp)
 2008668:	e0fffa17 	ldw	r3,-24(fp)
 200866c:	18bff716 	blt	r3,r2,200864c <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 2008670:	e17ff917 	ldw	r5,-28(fp)
 2008674:	e13ffc17 	ldw	r4,-16(fp)
 2008678:	20082c40 	call	20082c4 <_Balloc>
 200867c:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 2008680:	e0bff717 	ldw	r2,-36(fp)
 2008684:	e0c00217 	ldw	r3,8(fp)
 2008688:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200868c:	e0bff717 	ldw	r2,-36(fp)
 2008690:	00c00044 	movi	r3,1
 2008694:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 2008698:	00800244 	movi	r2,9
 200869c:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 20086a0:	e0bffe17 	ldw	r2,-8(fp)
 20086a4:	10800290 	cmplti	r2,r2,10
 20086a8:	10001b1e 	bne	r2,zero,2008718 <__s2b+0x114>
    {
      s += 9;
 20086ac:	e0bffd17 	ldw	r2,-12(fp)
 20086b0:	10800244 	addi	r2,r2,9
 20086b4:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 20086b8:	e0bffd17 	ldw	r2,-12(fp)
 20086bc:	10c00044 	addi	r3,r2,1
 20086c0:	e0fffd15 	stw	r3,-12(fp)
 20086c4:	10800003 	ldbu	r2,0(r2)
 20086c8:	10803fcc 	andi	r2,r2,255
 20086cc:	1080201c 	xori	r2,r2,128
 20086d0:	10bfe004 	addi	r2,r2,-128
 20086d4:	10bff404 	addi	r2,r2,-48
 20086d8:	100f883a 	mov	r7,r2
 20086dc:	01800284 	movi	r6,10
 20086e0:	e17ff717 	ldw	r5,-36(fp)
 20086e4:	e13ffc17 	ldw	r4,-16(fp)
 20086e8:	20084700 	call	2008470 <__multadd>
 20086ec:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 20086f0:	e0bff817 	ldw	r2,-32(fp)
 20086f4:	10800044 	addi	r2,r2,1
 20086f8:	e0bff815 	stw	r2,-32(fp)
 20086fc:	e0fff817 	ldw	r3,-32(fp)
 2008700:	e0bffe17 	ldw	r2,-8(fp)
 2008704:	18bfec16 	blt	r3,r2,20086b8 <__s2b+0xb4>
      s++;
 2008708:	e0bffd17 	ldw	r2,-12(fp)
 200870c:	10800044 	addi	r2,r2,1
 2008710:	e0bffd15 	stw	r2,-12(fp)
 2008714:	00001506 	br	200876c <__s2b+0x168>
    }
  else
    s += 10;
 2008718:	e0bffd17 	ldw	r2,-12(fp)
 200871c:	10800284 	addi	r2,r2,10
 2008720:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 2008724:	00001106 	br	200876c <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 2008728:	e0bffd17 	ldw	r2,-12(fp)
 200872c:	10c00044 	addi	r3,r2,1
 2008730:	e0fffd15 	stw	r3,-12(fp)
 2008734:	10800003 	ldbu	r2,0(r2)
 2008738:	10803fcc 	andi	r2,r2,255
 200873c:	1080201c 	xori	r2,r2,128
 2008740:	10bfe004 	addi	r2,r2,-128
 2008744:	10bff404 	addi	r2,r2,-48
 2008748:	100f883a 	mov	r7,r2
 200874c:	01800284 	movi	r6,10
 2008750:	e17ff717 	ldw	r5,-36(fp)
 2008754:	e13ffc17 	ldw	r4,-16(fp)
 2008758:	20084700 	call	2008470 <__multadd>
 200875c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 2008760:	e0bff817 	ldw	r2,-32(fp)
 2008764:	10800044 	addi	r2,r2,1
 2008768:	e0bff815 	stw	r2,-32(fp)
 200876c:	e0fff817 	ldw	r3,-32(fp)
 2008770:	e0bfff17 	ldw	r2,-4(fp)
 2008774:	18bfec16 	blt	r3,r2,2008728 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 2008778:	e0bff717 	ldw	r2,-36(fp)
}
 200877c:	e037883a 	mov	sp,fp
 2008780:	dfc00117 	ldw	ra,4(sp)
 2008784:	df000017 	ldw	fp,0(sp)
 2008788:	dec00204 	addi	sp,sp,8
 200878c:	f800283a 	ret

02008790 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 2008790:	defffe04 	addi	sp,sp,-8
 2008794:	df000115 	stw	fp,4(sp)
 2008798:	dc000015 	stw	r16,0(sp)
 200879c:	df000104 	addi	fp,sp,4
 20087a0:	2005883a 	mov	r2,r4
  register int k = 0;
 20087a4:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 20087a8:	10ffffec 	andhi	r3,r2,65535
 20087ac:	1800021e 	bne	r3,zero,20087b8 <__hi0bits+0x28>
    {
      k = 16;
 20087b0:	04000404 	movi	r16,16
      x <<= 16;
 20087b4:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 20087b8:	10ffc02c 	andhi	r3,r2,65280
 20087bc:	1800021e 	bne	r3,zero,20087c8 <__hi0bits+0x38>
    {
      k += 8;
 20087c0:	84000204 	addi	r16,r16,8
      x <<= 8;
 20087c4:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 20087c8:	10fc002c 	andhi	r3,r2,61440
 20087cc:	1800021e 	bne	r3,zero,20087d8 <__hi0bits+0x48>
    {
      k += 4;
 20087d0:	84000104 	addi	r16,r16,4
      x <<= 4;
 20087d4:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 20087d8:	10f0002c 	andhi	r3,r2,49152
 20087dc:	1800031e 	bne	r3,zero,20087ec <__hi0bits+0x5c>
    {
      k += 2;
 20087e0:	84000084 	addi	r16,r16,2
      x <<= 2;
 20087e4:	1085883a 	add	r2,r2,r2
 20087e8:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 20087ec:	1007883a 	mov	r3,r2
 20087f0:	18000516 	blt	r3,zero,2008808 <__hi0bits+0x78>
    {
      k++;
 20087f4:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 20087f8:	1090002c 	andhi	r2,r2,16384
 20087fc:	1000021e 	bne	r2,zero,2008808 <__hi0bits+0x78>
	return 32;
 2008800:	00800804 	movi	r2,32
 2008804:	00000106 	br	200880c <__hi0bits+0x7c>
    }
  return k;
 2008808:	8005883a 	mov	r2,r16
}
 200880c:	e6ffff04 	addi	sp,fp,-4
 2008810:	df000117 	ldw	fp,4(sp)
 2008814:	dc000017 	ldw	r16,0(sp)
 2008818:	dec00204 	addi	sp,sp,8
 200881c:	f800283a 	ret

02008820 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 2008820:	defffc04 	addi	sp,sp,-16
 2008824:	df000315 	stw	fp,12(sp)
 2008828:	dc400215 	stw	r17,8(sp)
 200882c:	dc000115 	stw	r16,4(sp)
 2008830:	df000304 	addi	fp,sp,12
 2008834:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 2008838:	e0bffd17 	ldw	r2,-12(fp)
 200883c:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 2008840:	808001cc 	andi	r2,r16,7
 2008844:	10001026 	beq	r2,zero,2008888 <__lo0bits+0x68>
    {
      if (x & 1)
 2008848:	8080004c 	andi	r2,r16,1
 200884c:	10000226 	beq	r2,zero,2008858 <__lo0bits+0x38>
	return 0;
 2008850:	0005883a 	mov	r2,zero
 2008854:	00002706 	br	20088f4 <__lo0bits+0xd4>
      if (x & 2)
 2008858:	8080008c 	andi	r2,r16,2
 200885c:	10000526 	beq	r2,zero,2008874 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 2008860:	8006d07a 	srli	r3,r16,1
 2008864:	e0bffd17 	ldw	r2,-12(fp)
 2008868:	10c00015 	stw	r3,0(r2)
	  return 1;
 200886c:	00800044 	movi	r2,1
 2008870:	00002006 	br	20088f4 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 2008874:	8006d0ba 	srli	r3,r16,2
 2008878:	e0bffd17 	ldw	r2,-12(fp)
 200887c:	10c00015 	stw	r3,0(r2)
      return 2;
 2008880:	00800084 	movi	r2,2
 2008884:	00001b06 	br	20088f4 <__lo0bits+0xd4>
    }
  k = 0;
 2008888:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200888c:	80bfffcc 	andi	r2,r16,65535
 2008890:	1000021e 	bne	r2,zero,200889c <__lo0bits+0x7c>
    {
      k = 16;
 2008894:	04400404 	movi	r17,16
      x >>= 16;
 2008898:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200889c:	80803fcc 	andi	r2,r16,255
 20088a0:	1000021e 	bne	r2,zero,20088ac <__lo0bits+0x8c>
    {
      k += 8;
 20088a4:	8c400204 	addi	r17,r17,8
      x >>= 8;
 20088a8:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 20088ac:	808003cc 	andi	r2,r16,15
 20088b0:	1000021e 	bne	r2,zero,20088bc <__lo0bits+0x9c>
    {
      k += 4;
 20088b4:	8c400104 	addi	r17,r17,4
      x >>= 4;
 20088b8:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 20088bc:	808000cc 	andi	r2,r16,3
 20088c0:	1000021e 	bne	r2,zero,20088cc <__lo0bits+0xac>
    {
      k += 2;
 20088c4:	8c400084 	addi	r17,r17,2
      x >>= 2;
 20088c8:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 20088cc:	8080004c 	andi	r2,r16,1
 20088d0:	1000051e 	bne	r2,zero,20088e8 <__lo0bits+0xc8>
    {
      k++;
 20088d4:	8c400044 	addi	r17,r17,1
      x >>= 1;
 20088d8:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 20088dc:	8000021e 	bne	r16,zero,20088e8 <__lo0bits+0xc8>
	return 32;
 20088e0:	00800804 	movi	r2,32
 20088e4:	00000306 	br	20088f4 <__lo0bits+0xd4>
    }
  *y = x;
 20088e8:	e0bffd17 	ldw	r2,-12(fp)
 20088ec:	14000015 	stw	r16,0(r2)
  return k;
 20088f0:	8805883a 	mov	r2,r17
}
 20088f4:	e6fffe04 	addi	sp,fp,-8
 20088f8:	df000217 	ldw	fp,8(sp)
 20088fc:	dc400117 	ldw	r17,4(sp)
 2008900:	dc000017 	ldw	r16,0(sp)
 2008904:	dec00304 	addi	sp,sp,12
 2008908:	f800283a 	ret

0200890c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200890c:	defffb04 	addi	sp,sp,-20
 2008910:	dfc00415 	stw	ra,16(sp)
 2008914:	df000315 	stw	fp,12(sp)
 2008918:	df000304 	addi	fp,sp,12
 200891c:	e13ffe15 	stw	r4,-8(fp)
 2008920:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 2008924:	01400044 	movi	r5,1
 2008928:	e13ffe17 	ldw	r4,-8(fp)
 200892c:	20082c40 	call	20082c4 <_Balloc>
 2008930:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 2008934:	e0ffff17 	ldw	r3,-4(fp)
 2008938:	e0bffd17 	ldw	r2,-12(fp)
 200893c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 2008940:	e0bffd17 	ldw	r2,-12(fp)
 2008944:	00c00044 	movi	r3,1
 2008948:	10c00415 	stw	r3,16(r2)
  return b;
 200894c:	e0bffd17 	ldw	r2,-12(fp)
}
 2008950:	e037883a 	mov	sp,fp
 2008954:	dfc00117 	ldw	ra,4(sp)
 2008958:	df000017 	ldw	fp,0(sp)
 200895c:	dec00204 	addi	sp,sp,8
 2008960:	f800283a 	ret

02008964 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 2008964:	deffeb04 	addi	sp,sp,-84
 2008968:	dfc01415 	stw	ra,80(sp)
 200896c:	df001315 	stw	fp,76(sp)
 2008970:	df001304 	addi	fp,sp,76
 2008974:	e13ffd15 	stw	r4,-12(fp)
 2008978:	e17ffe15 	stw	r5,-8(fp)
 200897c:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 2008980:	e0bffe17 	ldw	r2,-8(fp)
 2008984:	10c00417 	ldw	r3,16(r2)
 2008988:	e0bfff17 	ldw	r2,-4(fp)
 200898c:	10800417 	ldw	r2,16(r2)
 2008990:	1880060e 	bge	r3,r2,20089ac <__multiply+0x48>
    {
      c = a;
 2008994:	e0bffe17 	ldw	r2,-8(fp)
 2008998:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200899c:	e0bfff17 	ldw	r2,-4(fp)
 20089a0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 20089a4:	e0bff517 	ldw	r2,-44(fp)
 20089a8:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 20089ac:	e0bffe17 	ldw	r2,-8(fp)
 20089b0:	10800117 	ldw	r2,4(r2)
 20089b4:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 20089b8:	e0bffe17 	ldw	r2,-8(fp)
 20089bc:	10800417 	ldw	r2,16(r2)
 20089c0:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 20089c4:	e0bfff17 	ldw	r2,-4(fp)
 20089c8:	10800417 	ldw	r2,16(r2)
 20089cc:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 20089d0:	e0fff617 	ldw	r3,-40(fp)
 20089d4:	e0bff717 	ldw	r2,-36(fp)
 20089d8:	1885883a 	add	r2,r3,r2
 20089dc:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 20089e0:	e0bffe17 	ldw	r2,-8(fp)
 20089e4:	10c00217 	ldw	r3,8(r2)
 20089e8:	e0bfee17 	ldw	r2,-72(fp)
 20089ec:	1880030e 	bge	r3,r2,20089fc <__multiply+0x98>
    k++;
 20089f0:	e0bfed17 	ldw	r2,-76(fp)
 20089f4:	10800044 	addi	r2,r2,1
 20089f8:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 20089fc:	e17fed17 	ldw	r5,-76(fp)
 2008a00:	e13ffd17 	ldw	r4,-12(fp)
 2008a04:	20082c40 	call	20082c4 <_Balloc>
 2008a08:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2008a0c:	e0bff517 	ldw	r2,-44(fp)
 2008a10:	10800504 	addi	r2,r2,20
 2008a14:	e0bff015 	stw	r2,-64(fp)
 2008a18:	e0bfee17 	ldw	r2,-72(fp)
 2008a1c:	1085883a 	add	r2,r2,r2
 2008a20:	1085883a 	add	r2,r2,r2
 2008a24:	1007883a 	mov	r3,r2
 2008a28:	e0bff017 	ldw	r2,-64(fp)
 2008a2c:	10c5883a 	add	r2,r2,r3
 2008a30:	e0bff815 	stw	r2,-32(fp)
 2008a34:	00000506 	br	2008a4c <__multiply+0xe8>
    *x = 0;
 2008a38:	e0bff017 	ldw	r2,-64(fp)
 2008a3c:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2008a40:	e0bff017 	ldw	r2,-64(fp)
 2008a44:	10800104 	addi	r2,r2,4
 2008a48:	e0bff015 	stw	r2,-64(fp)
 2008a4c:	e0fff017 	ldw	r3,-64(fp)
 2008a50:	e0bff817 	ldw	r2,-32(fp)
 2008a54:	18bff836 	bltu	r3,r2,2008a38 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 2008a58:	e0bffe17 	ldw	r2,-8(fp)
 2008a5c:	10800504 	addi	r2,r2,20
 2008a60:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 2008a64:	e0bff617 	ldw	r2,-40(fp)
 2008a68:	1085883a 	add	r2,r2,r2
 2008a6c:	1085883a 	add	r2,r2,r2
 2008a70:	1007883a 	mov	r3,r2
 2008a74:	e0bff817 	ldw	r2,-32(fp)
 2008a78:	10c5883a 	add	r2,r2,r3
 2008a7c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2008a80:	e0bfff17 	ldw	r2,-4(fp)
 2008a84:	10800504 	addi	r2,r2,20
 2008a88:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 2008a8c:	e0bff717 	ldw	r2,-36(fp)
 2008a90:	1085883a 	add	r2,r2,r2
 2008a94:	1085883a 	add	r2,r2,r2
 2008a98:	1007883a 	mov	r3,r2
 2008a9c:	e0bff117 	ldw	r2,-60(fp)
 2008aa0:	10c5883a 	add	r2,r2,r3
 2008aa4:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 2008aa8:	e0bff517 	ldw	r2,-44(fp)
 2008aac:	10800504 	addi	r2,r2,20
 2008ab0:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 2008ab4:	00007d06 	br	2008cac <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 2008ab8:	e0bff117 	ldw	r2,-60(fp)
 2008abc:	10800017 	ldw	r2,0(r2)
 2008ac0:	10bfffcc 	andi	r2,r2,65535
 2008ac4:	e0bffb15 	stw	r2,-20(fp)
 2008ac8:	e0bffb17 	ldw	r2,-20(fp)
 2008acc:	10003426 	beq	r2,zero,2008ba0 <__multiply+0x23c>
	{
	  x = xa;
 2008ad0:	e0bff817 	ldw	r2,-32(fp)
 2008ad4:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2008ad8:	e0bff317 	ldw	r2,-52(fp)
 2008adc:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2008ae0:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 2008ae4:	e0bff017 	ldw	r2,-64(fp)
 2008ae8:	10800017 	ldw	r2,0(r2)
 2008aec:	10ffffcc 	andi	r3,r2,65535
 2008af0:	e0bffb17 	ldw	r2,-20(fp)
 2008af4:	1887383a 	mul	r3,r3,r2
 2008af8:	e0bff217 	ldw	r2,-56(fp)
 2008afc:	10800017 	ldw	r2,0(r2)
 2008b00:	10bfffcc 	andi	r2,r2,65535
 2008b04:	1887883a 	add	r3,r3,r2
 2008b08:	e0bfef17 	ldw	r2,-68(fp)
 2008b0c:	1885883a 	add	r2,r3,r2
 2008b10:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 2008b14:	e0bffc17 	ldw	r2,-16(fp)
 2008b18:	1004d43a 	srli	r2,r2,16
 2008b1c:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 2008b20:	e0bff017 	ldw	r2,-64(fp)
 2008b24:	10c00104 	addi	r3,r2,4
 2008b28:	e0fff015 	stw	r3,-64(fp)
 2008b2c:	10800017 	ldw	r2,0(r2)
 2008b30:	1006d43a 	srli	r3,r2,16
 2008b34:	e0bffb17 	ldw	r2,-20(fp)
 2008b38:	1887383a 	mul	r3,r3,r2
 2008b3c:	e0bff217 	ldw	r2,-56(fp)
 2008b40:	10800017 	ldw	r2,0(r2)
 2008b44:	1004d43a 	srli	r2,r2,16
 2008b48:	1887883a 	add	r3,r3,r2
 2008b4c:	e0bfef17 	ldw	r2,-68(fp)
 2008b50:	1885883a 	add	r2,r3,r2
 2008b54:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 2008b58:	e0bff417 	ldw	r2,-48(fp)
 2008b5c:	1004d43a 	srli	r2,r2,16
 2008b60:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 2008b64:	e0bff217 	ldw	r2,-56(fp)
 2008b68:	10c00104 	addi	r3,r2,4
 2008b6c:	e0fff215 	stw	r3,-56(fp)
 2008b70:	e0fff417 	ldw	r3,-48(fp)
 2008b74:	1808943a 	slli	r4,r3,16
 2008b78:	e0fffc17 	ldw	r3,-16(fp)
 2008b7c:	18ffffcc 	andi	r3,r3,65535
 2008b80:	20c6b03a 	or	r3,r4,r3
 2008b84:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 2008b88:	e0fff017 	ldw	r3,-64(fp)
 2008b8c:	e0bff917 	ldw	r2,-28(fp)
 2008b90:	18bfd436 	bltu	r3,r2,2008ae4 <__multiply+0x180>
	  *xc = carry;
 2008b94:	e0bff217 	ldw	r2,-56(fp)
 2008b98:	e0ffef17 	ldw	r3,-68(fp)
 2008b9c:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 2008ba0:	e0bff117 	ldw	r2,-60(fp)
 2008ba4:	10800017 	ldw	r2,0(r2)
 2008ba8:	1004d43a 	srli	r2,r2,16
 2008bac:	e0bffb15 	stw	r2,-20(fp)
 2008bb0:	e0bffb17 	ldw	r2,-20(fp)
 2008bb4:	10003726 	beq	r2,zero,2008c94 <__multiply+0x330>
	{
	  x = xa;
 2008bb8:	e0bff817 	ldw	r2,-32(fp)
 2008bbc:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2008bc0:	e0bff317 	ldw	r2,-52(fp)
 2008bc4:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2008bc8:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 2008bcc:	e0bff217 	ldw	r2,-56(fp)
 2008bd0:	10800017 	ldw	r2,0(r2)
 2008bd4:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 2008bd8:	e0bff017 	ldw	r2,-64(fp)
 2008bdc:	10800017 	ldw	r2,0(r2)
 2008be0:	10ffffcc 	andi	r3,r2,65535
 2008be4:	e0bffb17 	ldw	r2,-20(fp)
 2008be8:	1887383a 	mul	r3,r3,r2
 2008bec:	e0bff217 	ldw	r2,-56(fp)
 2008bf0:	10800017 	ldw	r2,0(r2)
 2008bf4:	1004d43a 	srli	r2,r2,16
 2008bf8:	1887883a 	add	r3,r3,r2
 2008bfc:	e0bfef17 	ldw	r2,-68(fp)
 2008c00:	1885883a 	add	r2,r3,r2
 2008c04:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 2008c08:	e0bffc17 	ldw	r2,-16(fp)
 2008c0c:	1004d43a 	srli	r2,r2,16
 2008c10:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 2008c14:	e0bff217 	ldw	r2,-56(fp)
 2008c18:	10c00104 	addi	r3,r2,4
 2008c1c:	e0fff215 	stw	r3,-56(fp)
 2008c20:	e0fffc17 	ldw	r3,-16(fp)
 2008c24:	1808943a 	slli	r4,r3,16
 2008c28:	e0fff417 	ldw	r3,-48(fp)
 2008c2c:	18ffffcc 	andi	r3,r3,65535
 2008c30:	20c6b03a 	or	r3,r4,r3
 2008c34:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 2008c38:	e0bff017 	ldw	r2,-64(fp)
 2008c3c:	10c00104 	addi	r3,r2,4
 2008c40:	e0fff015 	stw	r3,-64(fp)
 2008c44:	10800017 	ldw	r2,0(r2)
 2008c48:	1006d43a 	srli	r3,r2,16
 2008c4c:	e0bffb17 	ldw	r2,-20(fp)
 2008c50:	1887383a 	mul	r3,r3,r2
 2008c54:	e0bff217 	ldw	r2,-56(fp)
 2008c58:	10800017 	ldw	r2,0(r2)
 2008c5c:	10bfffcc 	andi	r2,r2,65535
 2008c60:	1887883a 	add	r3,r3,r2
 2008c64:	e0bfef17 	ldw	r2,-68(fp)
 2008c68:	1885883a 	add	r2,r3,r2
 2008c6c:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 2008c70:	e0bff417 	ldw	r2,-48(fp)
 2008c74:	1004d43a 	srli	r2,r2,16
 2008c78:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 2008c7c:	e0fff017 	ldw	r3,-64(fp)
 2008c80:	e0bff917 	ldw	r2,-28(fp)
 2008c84:	18bfd436 	bltu	r3,r2,2008bd8 <__multiply+0x274>
	  *xc = z2;
 2008c88:	e0bff217 	ldw	r2,-56(fp)
 2008c8c:	e0fff417 	ldw	r3,-48(fp)
 2008c90:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 2008c94:	e0bff117 	ldw	r2,-60(fp)
 2008c98:	10800104 	addi	r2,r2,4
 2008c9c:	e0bff115 	stw	r2,-60(fp)
 2008ca0:	e0bff317 	ldw	r2,-52(fp)
 2008ca4:	10800104 	addi	r2,r2,4
 2008ca8:	e0bff315 	stw	r2,-52(fp)
 2008cac:	e0fff117 	ldw	r3,-60(fp)
 2008cb0:	e0bffa17 	ldw	r2,-24(fp)
 2008cb4:	18bf8036 	bltu	r3,r2,2008ab8 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 2008cb8:	e0bff517 	ldw	r2,-44(fp)
 2008cbc:	10800504 	addi	r2,r2,20
 2008cc0:	e0bff315 	stw	r2,-52(fp)
 2008cc4:	e0bfee17 	ldw	r2,-72(fp)
 2008cc8:	1085883a 	add	r2,r2,r2
 2008ccc:	1085883a 	add	r2,r2,r2
 2008cd0:	1007883a 	mov	r3,r2
 2008cd4:	e0bff317 	ldw	r2,-52(fp)
 2008cd8:	10c5883a 	add	r2,r2,r3
 2008cdc:	e0bff215 	stw	r2,-56(fp)
 2008ce0:	00000306 	br	2008cf0 <__multiply+0x38c>
 2008ce4:	e0bfee17 	ldw	r2,-72(fp)
 2008ce8:	10bfffc4 	addi	r2,r2,-1
 2008cec:	e0bfee15 	stw	r2,-72(fp)
 2008cf0:	e0bfee17 	ldw	r2,-72(fp)
 2008cf4:	0080060e 	bge	zero,r2,2008d10 <__multiply+0x3ac>
 2008cf8:	e0bff217 	ldw	r2,-56(fp)
 2008cfc:	10bfff04 	addi	r2,r2,-4
 2008d00:	e0bff215 	stw	r2,-56(fp)
 2008d04:	e0bff217 	ldw	r2,-56(fp)
 2008d08:	10800017 	ldw	r2,0(r2)
 2008d0c:	103ff526 	beq	r2,zero,2008ce4 <__multiply+0x380>
  c->_wds = wc;
 2008d10:	e0bff517 	ldw	r2,-44(fp)
 2008d14:	e0ffee17 	ldw	r3,-72(fp)
 2008d18:	10c00415 	stw	r3,16(r2)
  return c;
 2008d1c:	e0bff517 	ldw	r2,-44(fp)
}
 2008d20:	e037883a 	mov	sp,fp
 2008d24:	dfc00117 	ldw	ra,4(sp)
 2008d28:	df000017 	ldw	fp,0(sp)
 2008d2c:	dec00204 	addi	sp,sp,8
 2008d30:	f800283a 	ret

02008d34 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2008d34:	defff704 	addi	sp,sp,-36
 2008d38:	dfc00815 	stw	ra,32(sp)
 2008d3c:	df000715 	stw	fp,28(sp)
 2008d40:	df000704 	addi	fp,sp,28
 2008d44:	e13ffd15 	stw	r4,-12(fp)
 2008d48:	e17ffe15 	stw	r5,-8(fp)
 2008d4c:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 2008d50:	e0bfff17 	ldw	r2,-4(fp)
 2008d54:	108000cc 	andi	r2,r2,3
 2008d58:	e0bffb15 	stw	r2,-20(fp)
 2008d5c:	e0bffb17 	ldw	r2,-20(fp)
 2008d60:	10000e26 	beq	r2,zero,2008d9c <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 2008d64:	e0bffb17 	ldw	r2,-20(fp)
 2008d68:	10ffffc4 	addi	r3,r2,-1
 2008d6c:	00808074 	movhi	r2,513
 2008d70:	108be704 	addi	r2,r2,12188
 2008d74:	18c7883a 	add	r3,r3,r3
 2008d78:	18c7883a 	add	r3,r3,r3
 2008d7c:	10c5883a 	add	r2,r2,r3
 2008d80:	10800017 	ldw	r2,0(r2)
 2008d84:	000f883a 	mov	r7,zero
 2008d88:	100d883a 	mov	r6,r2
 2008d8c:	e17ffe17 	ldw	r5,-8(fp)
 2008d90:	e13ffd17 	ldw	r4,-12(fp)
 2008d94:	20084700 	call	2008470 <__multadd>
 2008d98:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 2008d9c:	e0bfff17 	ldw	r2,-4(fp)
 2008da0:	1005d0ba 	srai	r2,r2,2
 2008da4:	e0bfff15 	stw	r2,-4(fp)
 2008da8:	e0bfff17 	ldw	r2,-4(fp)
 2008dac:	1000021e 	bne	r2,zero,2008db8 <__pow5mult+0x84>
    return b;
 2008db0:	e0bffe17 	ldw	r2,-8(fp)
 2008db4:	00003806 	br	2008e98 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 2008db8:	e0bffd17 	ldw	r2,-12(fp)
 2008dbc:	10801217 	ldw	r2,72(r2)
 2008dc0:	e0bff915 	stw	r2,-28(fp)
 2008dc4:	e0bff917 	ldw	r2,-28(fp)
 2008dc8:	10000b1e 	bne	r2,zero,2008df8 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 2008dcc:	01409c44 	movi	r5,625
 2008dd0:	e13ffd17 	ldw	r4,-12(fp)
 2008dd4:	200890c0 	call	200890c <__i2b>
 2008dd8:	1007883a 	mov	r3,r2
 2008ddc:	e0bffd17 	ldw	r2,-12(fp)
 2008de0:	10c01215 	stw	r3,72(r2)
 2008de4:	e0bffd17 	ldw	r2,-12(fp)
 2008de8:	10801217 	ldw	r2,72(r2)
 2008dec:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 2008df0:	e0bff917 	ldw	r2,-28(fp)
 2008df4:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 2008df8:	e0bfff17 	ldw	r2,-4(fp)
 2008dfc:	1080004c 	andi	r2,r2,1
 2008e00:	10000a26 	beq	r2,zero,2008e2c <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 2008e04:	e1bff917 	ldw	r6,-28(fp)
 2008e08:	e17ffe17 	ldw	r5,-8(fp)
 2008e0c:	e13ffd17 	ldw	r4,-12(fp)
 2008e10:	20089640 	call	2008964 <__multiply>
 2008e14:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 2008e18:	e17ffe17 	ldw	r5,-8(fp)
 2008e1c:	e13ffd17 	ldw	r4,-12(fp)
 2008e20:	20083f40 	call	20083f4 <_Bfree>
	  b = b1;
 2008e24:	e0bffc17 	ldw	r2,-16(fp)
 2008e28:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 2008e2c:	e0bfff17 	ldw	r2,-4(fp)
 2008e30:	1005d07a 	srai	r2,r2,1
 2008e34:	e0bfff15 	stw	r2,-4(fp)
 2008e38:	e0bfff17 	ldw	r2,-4(fp)
 2008e3c:	10001426 	beq	r2,zero,2008e90 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 2008e40:	e0bff917 	ldw	r2,-28(fp)
 2008e44:	10800017 	ldw	r2,0(r2)
 2008e48:	e0bffa15 	stw	r2,-24(fp)
 2008e4c:	e0bffa17 	ldw	r2,-24(fp)
 2008e50:	10000c1e 	bne	r2,zero,2008e84 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 2008e54:	e1bff917 	ldw	r6,-28(fp)
 2008e58:	e17ff917 	ldw	r5,-28(fp)
 2008e5c:	e13ffd17 	ldw	r4,-12(fp)
 2008e60:	20089640 	call	2008964 <__multiply>
 2008e64:	1007883a 	mov	r3,r2
 2008e68:	e0bff917 	ldw	r2,-28(fp)
 2008e6c:	10c00015 	stw	r3,0(r2)
 2008e70:	e0bff917 	ldw	r2,-28(fp)
 2008e74:	10800017 	ldw	r2,0(r2)
 2008e78:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 2008e7c:	e0bffa17 	ldw	r2,-24(fp)
 2008e80:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 2008e84:	e0bffa17 	ldw	r2,-24(fp)
 2008e88:	e0bff915 	stw	r2,-28(fp)
    }
 2008e8c:	003fda06 	br	2008df8 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 2008e90:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 2008e94:	e0bffe17 	ldw	r2,-8(fp)
}
 2008e98:	e037883a 	mov	sp,fp
 2008e9c:	dfc00117 	ldw	ra,4(sp)
 2008ea0:	df000017 	ldw	fp,0(sp)
 2008ea4:	dec00204 	addi	sp,sp,8
 2008ea8:	f800283a 	ret

02008eac <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2008eac:	defff204 	addi	sp,sp,-56
 2008eb0:	dfc00d15 	stw	ra,52(sp)
 2008eb4:	df000c15 	stw	fp,48(sp)
 2008eb8:	df000c04 	addi	fp,sp,48
 2008ebc:	e13ffd15 	stw	r4,-12(fp)
 2008ec0:	e17ffe15 	stw	r5,-8(fp)
 2008ec4:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 2008ec8:	e0bfff17 	ldw	r2,-4(fp)
 2008ecc:	1005d17a 	srai	r2,r2,5
 2008ed0:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 2008ed4:	e0bffe17 	ldw	r2,-8(fp)
 2008ed8:	10800117 	ldw	r2,4(r2)
 2008edc:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 2008ee0:	e0bffe17 	ldw	r2,-8(fp)
 2008ee4:	10c00417 	ldw	r3,16(r2)
 2008ee8:	e0bffa17 	ldw	r2,-24(fp)
 2008eec:	1885883a 	add	r2,r3,r2
 2008ef0:	10800044 	addi	r2,r2,1
 2008ef4:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2008ef8:	e0bffe17 	ldw	r2,-8(fp)
 2008efc:	10800217 	ldw	r2,8(r2)
 2008f00:	e0bff415 	stw	r2,-48(fp)
 2008f04:	00000606 	br	2008f20 <__lshift+0x74>
    k1++;
 2008f08:	e0bff517 	ldw	r2,-44(fp)
 2008f0c:	10800044 	addi	r2,r2,1
 2008f10:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2008f14:	e0bff417 	ldw	r2,-48(fp)
 2008f18:	1085883a 	add	r2,r2,r2
 2008f1c:	e0bff415 	stw	r2,-48(fp)
 2008f20:	e0bff617 	ldw	r2,-40(fp)
 2008f24:	e0fff417 	ldw	r3,-48(fp)
 2008f28:	18bff716 	blt	r3,r2,2008f08 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 2008f2c:	e17ff517 	ldw	r5,-44(fp)
 2008f30:	e13ffd17 	ldw	r4,-12(fp)
 2008f34:	20082c40 	call	20082c4 <_Balloc>
 2008f38:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 2008f3c:	e0bffb17 	ldw	r2,-20(fp)
 2008f40:	10800504 	addi	r2,r2,20
 2008f44:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 2008f48:	e03ff415 	stw	zero,-48(fp)
 2008f4c:	00000706 	br	2008f6c <__lshift+0xc0>
    *x1++ = 0;
 2008f50:	e0bff817 	ldw	r2,-32(fp)
 2008f54:	10c00104 	addi	r3,r2,4
 2008f58:	e0fff815 	stw	r3,-32(fp)
 2008f5c:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 2008f60:	e0bff417 	ldw	r2,-48(fp)
 2008f64:	10800044 	addi	r2,r2,1
 2008f68:	e0bff415 	stw	r2,-48(fp)
 2008f6c:	e0fff417 	ldw	r3,-48(fp)
 2008f70:	e0bffa17 	ldw	r2,-24(fp)
 2008f74:	18bff616 	blt	r3,r2,2008f50 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 2008f78:	e0bffe17 	ldw	r2,-8(fp)
 2008f7c:	10800504 	addi	r2,r2,20
 2008f80:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 2008f84:	e0bffe17 	ldw	r2,-8(fp)
 2008f88:	10800417 	ldw	r2,16(r2)
 2008f8c:	1085883a 	add	r2,r2,r2
 2008f90:	1085883a 	add	r2,r2,r2
 2008f94:	1007883a 	mov	r3,r2
 2008f98:	e0bff717 	ldw	r2,-36(fp)
 2008f9c:	10c5883a 	add	r2,r2,r3
 2008fa0:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 2008fa4:	e0bfff17 	ldw	r2,-4(fp)
 2008fa8:	108007cc 	andi	r2,r2,31
 2008fac:	e0bfff15 	stw	r2,-4(fp)
 2008fb0:	e0bfff17 	ldw	r2,-4(fp)
 2008fb4:	10002326 	beq	r2,zero,2009044 <__lshift+0x198>
    {
      k1 = 32 - k;
 2008fb8:	00c00804 	movi	r3,32
 2008fbc:	e0bfff17 	ldw	r2,-4(fp)
 2008fc0:	1885c83a 	sub	r2,r3,r2
 2008fc4:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 2008fc8:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 2008fcc:	e0bff817 	ldw	r2,-32(fp)
 2008fd0:	10c00104 	addi	r3,r2,4
 2008fd4:	e0fff815 	stw	r3,-32(fp)
 2008fd8:	e0fff717 	ldw	r3,-36(fp)
 2008fdc:	19000017 	ldw	r4,0(r3)
 2008fe0:	e0ffff17 	ldw	r3,-4(fp)
 2008fe4:	20c8983a 	sll	r4,r4,r3
 2008fe8:	e0fff917 	ldw	r3,-28(fp)
 2008fec:	20c6b03a 	or	r3,r4,r3
 2008ff0:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 2008ff4:	e0bff717 	ldw	r2,-36(fp)
 2008ff8:	10c00104 	addi	r3,r2,4
 2008ffc:	e0fff715 	stw	r3,-36(fp)
 2009000:	10c00017 	ldw	r3,0(r2)
 2009004:	e0bff517 	ldw	r2,-44(fp)
 2009008:	1884d83a 	srl	r2,r3,r2
 200900c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 2009010:	e0fff717 	ldw	r3,-36(fp)
 2009014:	e0bffc17 	ldw	r2,-16(fp)
 2009018:	18bfec36 	bltu	r3,r2,2008fcc <__lshift+0x120>
      if ((*x1 = z) != 0)
 200901c:	e0bff817 	ldw	r2,-32(fp)
 2009020:	e0fff917 	ldw	r3,-28(fp)
 2009024:	10c00015 	stw	r3,0(r2)
 2009028:	e0bff817 	ldw	r2,-32(fp)
 200902c:	10800017 	ldw	r2,0(r2)
 2009030:	10000f26 	beq	r2,zero,2009070 <__lshift+0x1c4>
	++n1;
 2009034:	e0bff617 	ldw	r2,-40(fp)
 2009038:	10800044 	addi	r2,r2,1
 200903c:	e0bff615 	stw	r2,-40(fp)
 2009040:	00000b06 	br	2009070 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 2009044:	e0bff817 	ldw	r2,-32(fp)
 2009048:	10c00104 	addi	r3,r2,4
 200904c:	e0fff815 	stw	r3,-32(fp)
 2009050:	e0fff717 	ldw	r3,-36(fp)
 2009054:	19000104 	addi	r4,r3,4
 2009058:	e13ff715 	stw	r4,-36(fp)
 200905c:	18c00017 	ldw	r3,0(r3)
 2009060:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 2009064:	e0fff717 	ldw	r3,-36(fp)
 2009068:	e0bffc17 	ldw	r2,-16(fp)
 200906c:	18bff536 	bltu	r3,r2,2009044 <__lshift+0x198>
  b1->_wds = n1 - 1;
 2009070:	e0bff617 	ldw	r2,-40(fp)
 2009074:	10ffffc4 	addi	r3,r2,-1
 2009078:	e0bffb17 	ldw	r2,-20(fp)
 200907c:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 2009080:	e17ffe17 	ldw	r5,-8(fp)
 2009084:	e13ffd17 	ldw	r4,-12(fp)
 2009088:	20083f40 	call	20083f4 <_Bfree>
  return b1;
 200908c:	e0bffb17 	ldw	r2,-20(fp)
}
 2009090:	e037883a 	mov	sp,fp
 2009094:	dfc00117 	ldw	ra,4(sp)
 2009098:	df000017 	ldw	fp,0(sp)
 200909c:	dec00204 	addi	sp,sp,8
 20090a0:	f800283a 	ret

020090a4 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 20090a4:	defff704 	addi	sp,sp,-36
 20090a8:	df000815 	stw	fp,32(sp)
 20090ac:	df000804 	addi	fp,sp,32
 20090b0:	e13ffe15 	stw	r4,-8(fp)
 20090b4:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 20090b8:	e0bffe17 	ldw	r2,-8(fp)
 20090bc:	10800417 	ldw	r2,16(r2)
 20090c0:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 20090c4:	e0bfff17 	ldw	r2,-4(fp)
 20090c8:	10800417 	ldw	r2,16(r2)
 20090cc:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 20090d0:	e0fffa17 	ldw	r3,-24(fp)
 20090d4:	e0bffb17 	ldw	r2,-20(fp)
 20090d8:	1885c83a 	sub	r2,r3,r2
 20090dc:	e0bffa15 	stw	r2,-24(fp)
 20090e0:	e0bffa17 	ldw	r2,-24(fp)
 20090e4:	10000226 	beq	r2,zero,20090f0 <__mcmp+0x4c>
    return i;
 20090e8:	e0bffa17 	ldw	r2,-24(fp)
 20090ec:	00002e06 	br	20091a8 <__mcmp+0x104>
  xa0 = a->_x;
 20090f0:	e0bffe17 	ldw	r2,-8(fp)
 20090f4:	10800504 	addi	r2,r2,20
 20090f8:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 20090fc:	e0bffb17 	ldw	r2,-20(fp)
 2009100:	1085883a 	add	r2,r2,r2
 2009104:	1085883a 	add	r2,r2,r2
 2009108:	1007883a 	mov	r3,r2
 200910c:	e0bffc17 	ldw	r2,-16(fp)
 2009110:	10c5883a 	add	r2,r2,r3
 2009114:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 2009118:	e0bfff17 	ldw	r2,-4(fp)
 200911c:	10800504 	addi	r2,r2,20
 2009120:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 2009124:	e0bffb17 	ldw	r2,-20(fp)
 2009128:	1085883a 	add	r2,r2,r2
 200912c:	1085883a 	add	r2,r2,r2
 2009130:	1007883a 	mov	r3,r2
 2009134:	e0bffd17 	ldw	r2,-12(fp)
 2009138:	10c5883a 	add	r2,r2,r3
 200913c:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 2009140:	e0bff817 	ldw	r2,-32(fp)
 2009144:	10bfff04 	addi	r2,r2,-4
 2009148:	e0bff815 	stw	r2,-32(fp)
 200914c:	e0bff817 	ldw	r2,-32(fp)
 2009150:	10c00017 	ldw	r3,0(r2)
 2009154:	e0bff917 	ldw	r2,-28(fp)
 2009158:	10bfff04 	addi	r2,r2,-4
 200915c:	e0bff915 	stw	r2,-28(fp)
 2009160:	e0bff917 	ldw	r2,-28(fp)
 2009164:	10800017 	ldw	r2,0(r2)
 2009168:	18800926 	beq	r3,r2,2009190 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 200916c:	e0bff817 	ldw	r2,-32(fp)
 2009170:	10c00017 	ldw	r3,0(r2)
 2009174:	e0bff917 	ldw	r2,-28(fp)
 2009178:	10800017 	ldw	r2,0(r2)
 200917c:	1880022e 	bgeu	r3,r2,2009188 <__mcmp+0xe4>
 2009180:	00bfffc4 	movi	r2,-1
 2009184:	00000806 	br	20091a8 <__mcmp+0x104>
 2009188:	00800044 	movi	r2,1
 200918c:	00000606 	br	20091a8 <__mcmp+0x104>
      if (xa <= xa0)
 2009190:	e0bff817 	ldw	r2,-32(fp)
 2009194:	e0fffc17 	ldw	r3,-16(fp)
 2009198:	1880012e 	bgeu	r3,r2,20091a0 <__mcmp+0xfc>
	break;
    }
 200919c:	003fe806 	br	2009140 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 20091a0:	0001883a 	nop
    }
  return 0;
 20091a4:	0005883a 	mov	r2,zero
}
 20091a8:	e037883a 	mov	sp,fp
 20091ac:	df000017 	ldw	fp,0(sp)
 20091b0:	dec00104 	addi	sp,sp,4
 20091b4:	f800283a 	ret

020091b8 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 20091b8:	deffef04 	addi	sp,sp,-68
 20091bc:	dfc01015 	stw	ra,64(sp)
 20091c0:	df000f15 	stw	fp,60(sp)
 20091c4:	df000f04 	addi	fp,sp,60
 20091c8:	e13ffd15 	stw	r4,-12(fp)
 20091cc:	e17ffe15 	stw	r5,-8(fp)
 20091d0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 20091d4:	e17fff17 	ldw	r5,-4(fp)
 20091d8:	e13ffe17 	ldw	r4,-8(fp)
 20091dc:	20090a40 	call	20090a4 <__mcmp>
 20091e0:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 20091e4:	e0bff117 	ldw	r2,-60(fp)
 20091e8:	10000b1e 	bne	r2,zero,2009218 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 20091ec:	000b883a 	mov	r5,zero
 20091f0:	e13ffd17 	ldw	r4,-12(fp)
 20091f4:	20082c40 	call	20082c4 <_Balloc>
 20091f8:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 20091fc:	e0bff717 	ldw	r2,-36(fp)
 2009200:	00c00044 	movi	r3,1
 2009204:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 2009208:	e0bff717 	ldw	r2,-36(fp)
 200920c:	10000515 	stw	zero,20(r2)
      return c;
 2009210:	e0bff717 	ldw	r2,-36(fp)
 2009214:	00008c06 	br	2009448 <__mdiff+0x290>
    }
  if (i < 0)
 2009218:	e0bff117 	ldw	r2,-60(fp)
 200921c:	1000090e 	bge	r2,zero,2009244 <__mdiff+0x8c>
    {
      c = a;
 2009220:	e0bffe17 	ldw	r2,-8(fp)
 2009224:	e0bff715 	stw	r2,-36(fp)
      a = b;
 2009228:	e0bfff17 	ldw	r2,-4(fp)
 200922c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2009230:	e0bff717 	ldw	r2,-36(fp)
 2009234:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 2009238:	00800044 	movi	r2,1
 200923c:	e0bff115 	stw	r2,-60(fp)
 2009240:	00000106 	br	2009248 <__mdiff+0x90>
    }
  else
    i = 0;
 2009244:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 2009248:	e0bffe17 	ldw	r2,-8(fp)
 200924c:	10800117 	ldw	r2,4(r2)
 2009250:	100b883a 	mov	r5,r2
 2009254:	e13ffd17 	ldw	r4,-12(fp)
 2009258:	20082c40 	call	20082c4 <_Balloc>
 200925c:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 2009260:	e0bff717 	ldw	r2,-36(fp)
 2009264:	e0fff117 	ldw	r3,-60(fp)
 2009268:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 200926c:	e0bffe17 	ldw	r2,-8(fp)
 2009270:	10800417 	ldw	r2,16(r2)
 2009274:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 2009278:	e0bffe17 	ldw	r2,-8(fp)
 200927c:	10800504 	addi	r2,r2,20
 2009280:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 2009284:	e0bff217 	ldw	r2,-56(fp)
 2009288:	1085883a 	add	r2,r2,r2
 200928c:	1085883a 	add	r2,r2,r2
 2009290:	1007883a 	mov	r3,r2
 2009294:	e0bff417 	ldw	r2,-48(fp)
 2009298:	10c5883a 	add	r2,r2,r3
 200929c:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 20092a0:	e0bfff17 	ldw	r2,-4(fp)
 20092a4:	10800417 	ldw	r2,16(r2)
 20092a8:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 20092ac:	e0bfff17 	ldw	r2,-4(fp)
 20092b0:	10800504 	addi	r2,r2,20
 20092b4:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 20092b8:	e0bff917 	ldw	r2,-28(fp)
 20092bc:	1085883a 	add	r2,r2,r2
 20092c0:	1085883a 	add	r2,r2,r2
 20092c4:	1007883a 	mov	r3,r2
 20092c8:	e0bff517 	ldw	r2,-44(fp)
 20092cc:	10c5883a 	add	r2,r2,r3
 20092d0:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 20092d4:	e0bff717 	ldw	r2,-36(fp)
 20092d8:	10800504 	addi	r2,r2,20
 20092dc:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 20092e0:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 20092e4:	e0bff417 	ldw	r2,-48(fp)
 20092e8:	10800017 	ldw	r2,0(r2)
 20092ec:	10ffffcc 	andi	r3,r2,65535
 20092f0:	e0bff517 	ldw	r2,-44(fp)
 20092f4:	10800017 	ldw	r2,0(r2)
 20092f8:	10bfffcc 	andi	r2,r2,65535
 20092fc:	1887c83a 	sub	r3,r3,r2
 2009300:	e0bff317 	ldw	r2,-52(fp)
 2009304:	1885883a 	add	r2,r3,r2
 2009308:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200930c:	e0bffb17 	ldw	r2,-20(fp)
 2009310:	1005d43a 	srai	r2,r2,16
 2009314:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 2009318:	e0bff417 	ldw	r2,-48(fp)
 200931c:	10c00104 	addi	r3,r2,4
 2009320:	e0fff415 	stw	r3,-48(fp)
 2009324:	10800017 	ldw	r2,0(r2)
 2009328:	1006d43a 	srli	r3,r2,16
 200932c:	e0bff517 	ldw	r2,-44(fp)
 2009330:	11000104 	addi	r4,r2,4
 2009334:	e13ff515 	stw	r4,-44(fp)
 2009338:	10800017 	ldw	r2,0(r2)
 200933c:	1004d43a 	srli	r2,r2,16
 2009340:	1887c83a 	sub	r3,r3,r2
 2009344:	e0bff317 	ldw	r2,-52(fp)
 2009348:	1885883a 	add	r2,r3,r2
 200934c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2009350:	e0bffc17 	ldw	r2,-16(fp)
 2009354:	1005d43a 	srai	r2,r2,16
 2009358:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200935c:	e0bff617 	ldw	r2,-40(fp)
 2009360:	10c00104 	addi	r3,r2,4
 2009364:	e0fff615 	stw	r3,-40(fp)
 2009368:	e0fffc17 	ldw	r3,-16(fp)
 200936c:	1808943a 	slli	r4,r3,16
 2009370:	e0fffb17 	ldw	r3,-20(fp)
 2009374:	18ffffcc 	andi	r3,r3,65535
 2009378:	20c6b03a 	or	r3,r4,r3
 200937c:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 2009380:	e0fff517 	ldw	r3,-44(fp)
 2009384:	e0bffa17 	ldw	r2,-24(fp)
 2009388:	18bfd636 	bltu	r3,r2,20092e4 <__mdiff+0x12c>
  while (xa < xae)
 200938c:	00001d06 	br	2009404 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 2009390:	e0bff417 	ldw	r2,-48(fp)
 2009394:	10800017 	ldw	r2,0(r2)
 2009398:	10ffffcc 	andi	r3,r2,65535
 200939c:	e0bff317 	ldw	r2,-52(fp)
 20093a0:	1885883a 	add	r2,r3,r2
 20093a4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 20093a8:	e0bffb17 	ldw	r2,-20(fp)
 20093ac:	1005d43a 	srai	r2,r2,16
 20093b0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 20093b4:	e0bff417 	ldw	r2,-48(fp)
 20093b8:	10c00104 	addi	r3,r2,4
 20093bc:	e0fff415 	stw	r3,-48(fp)
 20093c0:	10800017 	ldw	r2,0(r2)
 20093c4:	1006d43a 	srli	r3,r2,16
 20093c8:	e0bff317 	ldw	r2,-52(fp)
 20093cc:	1885883a 	add	r2,r3,r2
 20093d0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 20093d4:	e0bffc17 	ldw	r2,-16(fp)
 20093d8:	1005d43a 	srai	r2,r2,16
 20093dc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 20093e0:	e0bff617 	ldw	r2,-40(fp)
 20093e4:	10c00104 	addi	r3,r2,4
 20093e8:	e0fff615 	stw	r3,-40(fp)
 20093ec:	e0fffc17 	ldw	r3,-16(fp)
 20093f0:	1808943a 	slli	r4,r3,16
 20093f4:	e0fffb17 	ldw	r3,-20(fp)
 20093f8:	18ffffcc 	andi	r3,r3,65535
 20093fc:	20c6b03a 	or	r3,r4,r3
 2009400:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 2009404:	e0fff417 	ldw	r3,-48(fp)
 2009408:	e0bff817 	ldw	r2,-32(fp)
 200940c:	18bfe036 	bltu	r3,r2,2009390 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2009410:	00000306 	br	2009420 <__mdiff+0x268>
    wa--;
 2009414:	e0bff217 	ldw	r2,-56(fp)
 2009418:	10bfffc4 	addi	r2,r2,-1
 200941c:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2009420:	e0bff617 	ldw	r2,-40(fp)
 2009424:	10bfff04 	addi	r2,r2,-4
 2009428:	e0bff615 	stw	r2,-40(fp)
 200942c:	e0bff617 	ldw	r2,-40(fp)
 2009430:	10800017 	ldw	r2,0(r2)
 2009434:	103ff726 	beq	r2,zero,2009414 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 2009438:	e0bff717 	ldw	r2,-36(fp)
 200943c:	e0fff217 	ldw	r3,-56(fp)
 2009440:	10c00415 	stw	r3,16(r2)
  return c;
 2009444:	e0bff717 	ldw	r2,-36(fp)
}
 2009448:	e037883a 	mov	sp,fp
 200944c:	dfc00117 	ldw	ra,4(sp)
 2009450:	df000017 	ldw	fp,0(sp)
 2009454:	dec00204 	addi	sp,sp,8
 2009458:	f800283a 	ret

0200945c <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 200945c:	defff804 	addi	sp,sp,-32
 2009460:	df000715 	stw	fp,28(sp)
 2009464:	dc000615 	stw	r16,24(sp)
 2009468:	df000704 	addi	fp,sp,28
 200946c:	e13ffd15 	stw	r4,-12(fp)
 2009470:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 2009474:	e0bffd17 	ldw	r2,-12(fp)
 2009478:	e0bff915 	stw	r2,-28(fp)
 200947c:	e0bffe17 	ldw	r2,-8(fp)
 2009480:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 2009484:	e0bffa17 	ldw	r2,-24(fp)
 2009488:	10dffc2c 	andhi	r3,r2,32752
 200948c:	00bf3034 	movhi	r2,64704
 2009490:	1885883a 	add	r2,r3,r2
 2009494:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 2009498:	0400040e 	bge	zero,r16,20094ac <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 200949c:	8005883a 	mov	r2,r16
 20094a0:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 20094a4:	e03ffb15 	stw	zero,-20(fp)
 20094a8:	00001406 	br	20094fc <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 20094ac:	0405c83a 	sub	r2,zero,r16
 20094b0:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 20094b4:	80800508 	cmpgei	r2,r16,20
 20094b8:	1000051e 	bne	r2,zero,20094d0 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 20094bc:	00800234 	movhi	r2,8
 20094c0:	1405d83a 	sra	r2,r2,r16
 20094c4:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 20094c8:	e03ffb15 	stw	zero,-20(fp)
 20094cc:	00000b06 	br	20094fc <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 20094d0:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 20094d4:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 20094d8:	808007c8 	cmpgei	r2,r16,31
 20094dc:	1000051e 	bne	r2,zero,20094f4 <__ulp+0x98>
 20094e0:	008007c4 	movi	r2,31
 20094e4:	1405c83a 	sub	r2,r2,r16
 20094e8:	00c00044 	movi	r3,1
 20094ec:	1884983a 	sll	r2,r3,r2
 20094f0:	00000106 	br	20094f8 <__ulp+0x9c>
 20094f4:	00800044 	movi	r2,1
 20094f8:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 20094fc:	e0bffb17 	ldw	r2,-20(fp)
 2009500:	e0fffc17 	ldw	r3,-16(fp)
 2009504:	1009883a 	mov	r4,r2
 2009508:	180b883a 	mov	r5,r3
}
 200950c:	2005883a 	mov	r2,r4
 2009510:	2807883a 	mov	r3,r5
 2009514:	e6ffff04 	addi	sp,fp,-4
 2009518:	df000117 	ldw	fp,4(sp)
 200951c:	dc000017 	ldw	r16,0(sp)
 2009520:	dec00204 	addi	sp,sp,8
 2009524:	f800283a 	ret

02009528 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 2009528:	defff404 	addi	sp,sp,-48
 200952c:	dfc00b15 	stw	ra,44(sp)
 2009530:	df000a15 	stw	fp,40(sp)
 2009534:	df000a04 	addi	fp,sp,40
 2009538:	e13ffe15 	stw	r4,-8(fp)
 200953c:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 2009540:	e0bffe17 	ldw	r2,-8(fp)
 2009544:	10800504 	addi	r2,r2,20
 2009548:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 200954c:	e0bffe17 	ldw	r2,-8(fp)
 2009550:	10800417 	ldw	r2,16(r2)
 2009554:	1085883a 	add	r2,r2,r2
 2009558:	1085883a 	add	r2,r2,r2
 200955c:	1007883a 	mov	r3,r2
 2009560:	e0bff717 	ldw	r2,-36(fp)
 2009564:	10c5883a 	add	r2,r2,r3
 2009568:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 200956c:	e0bff617 	ldw	r2,-40(fp)
 2009570:	10bfff04 	addi	r2,r2,-4
 2009574:	e0bff615 	stw	r2,-40(fp)
 2009578:	e0bff617 	ldw	r2,-40(fp)
 200957c:	10800017 	ldw	r2,0(r2)
 2009580:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 2009584:	e13ff817 	ldw	r4,-32(fp)
 2009588:	20087900 	call	2008790 <__hi0bits>
 200958c:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 2009590:	00c00804 	movi	r3,32
 2009594:	e0bff917 	ldw	r2,-28(fp)
 2009598:	1887c83a 	sub	r3,r3,r2
 200959c:	e0bfff17 	ldw	r2,-4(fp)
 20095a0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 20095a4:	e0bff917 	ldw	r2,-28(fp)
 20095a8:	108002c8 	cmpgei	r2,r2,11
 20095ac:	10001e1e 	bne	r2,zero,2009628 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 20095b0:	00c002c4 	movi	r3,11
 20095b4:	e0bff917 	ldw	r2,-28(fp)
 20095b8:	1885c83a 	sub	r2,r3,r2
 20095bc:	e0fff817 	ldw	r3,-32(fp)
 20095c0:	1884d83a 	srl	r2,r3,r2
 20095c4:	108ffc34 	orhi	r2,r2,16368
 20095c8:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 20095cc:	e0bff617 	ldw	r2,-40(fp)
 20095d0:	e0fff717 	ldw	r3,-36(fp)
 20095d4:	1880062e 	bgeu	r3,r2,20095f0 <__b2d+0xc8>
 20095d8:	e0bff617 	ldw	r2,-40(fp)
 20095dc:	10bfff04 	addi	r2,r2,-4
 20095e0:	e0bff615 	stw	r2,-40(fp)
 20095e4:	e0bff617 	ldw	r2,-40(fp)
 20095e8:	10800017 	ldw	r2,0(r2)
 20095ec:	00000106 	br	20095f4 <__b2d+0xcc>
 20095f0:	0005883a 	mov	r2,zero
 20095f4:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 20095f8:	e0bff917 	ldw	r2,-28(fp)
 20095fc:	10800544 	addi	r2,r2,21
 2009600:	e0fff817 	ldw	r3,-32(fp)
 2009604:	1886983a 	sll	r3,r3,r2
 2009608:	010002c4 	movi	r4,11
 200960c:	e0bff917 	ldw	r2,-28(fp)
 2009610:	2085c83a 	sub	r2,r4,r2
 2009614:	e13ffa17 	ldw	r4,-24(fp)
 2009618:	2084d83a 	srl	r2,r4,r2
 200961c:	1884b03a 	or	r2,r3,r2
 2009620:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 2009624:	00003606 	br	2009700 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 2009628:	e0bff617 	ldw	r2,-40(fp)
 200962c:	e0fff717 	ldw	r3,-36(fp)
 2009630:	1880062e 	bgeu	r3,r2,200964c <__b2d+0x124>
 2009634:	e0bff617 	ldw	r2,-40(fp)
 2009638:	10bfff04 	addi	r2,r2,-4
 200963c:	e0bff615 	stw	r2,-40(fp)
 2009640:	e0bff617 	ldw	r2,-40(fp)
 2009644:	10800017 	ldw	r2,0(r2)
 2009648:	00000106 	br	2009650 <__b2d+0x128>
 200964c:	0005883a 	mov	r2,zero
 2009650:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 2009654:	e0bff917 	ldw	r2,-28(fp)
 2009658:	10bffd44 	addi	r2,r2,-11
 200965c:	e0bff915 	stw	r2,-28(fp)
 2009660:	e0bff917 	ldw	r2,-28(fp)
 2009664:	10002126 	beq	r2,zero,20096ec <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 2009668:	e0fff817 	ldw	r3,-32(fp)
 200966c:	e0bff917 	ldw	r2,-28(fp)
 2009670:	1886983a 	sll	r3,r3,r2
 2009674:	01000804 	movi	r4,32
 2009678:	e0bff917 	ldw	r2,-28(fp)
 200967c:	2085c83a 	sub	r2,r4,r2
 2009680:	e13ffb17 	ldw	r4,-20(fp)
 2009684:	2084d83a 	srl	r2,r4,r2
 2009688:	1884b03a 	or	r2,r3,r2
 200968c:	108ffc34 	orhi	r2,r2,16368
 2009690:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 2009694:	e0bff617 	ldw	r2,-40(fp)
 2009698:	e0fff717 	ldw	r3,-36(fp)
 200969c:	1880062e 	bgeu	r3,r2,20096b8 <__b2d+0x190>
 20096a0:	e0bff617 	ldw	r2,-40(fp)
 20096a4:	10bfff04 	addi	r2,r2,-4
 20096a8:	e0bff615 	stw	r2,-40(fp)
 20096ac:	e0bff617 	ldw	r2,-40(fp)
 20096b0:	10800017 	ldw	r2,0(r2)
 20096b4:	00000106 	br	20096bc <__b2d+0x194>
 20096b8:	0005883a 	mov	r2,zero
 20096bc:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 20096c0:	e0fffb17 	ldw	r3,-20(fp)
 20096c4:	e0bff917 	ldw	r2,-28(fp)
 20096c8:	1886983a 	sll	r3,r3,r2
 20096cc:	01000804 	movi	r4,32
 20096d0:	e0bff917 	ldw	r2,-28(fp)
 20096d4:	2085c83a 	sub	r2,r4,r2
 20096d8:	e13ff817 	ldw	r4,-32(fp)
 20096dc:	2084d83a 	srl	r2,r4,r2
 20096e0:	1884b03a 	or	r2,r3,r2
 20096e4:	e0bffc15 	stw	r2,-16(fp)
 20096e8:	00000506 	br	2009700 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 20096ec:	e0bff817 	ldw	r2,-32(fp)
 20096f0:	108ffc34 	orhi	r2,r2,16368
 20096f4:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 20096f8:	e0bffb17 	ldw	r2,-20(fp)
 20096fc:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 2009700:	e0bffc17 	ldw	r2,-16(fp)
 2009704:	e0fffd17 	ldw	r3,-12(fp)
 2009708:	1009883a 	mov	r4,r2
 200970c:	180b883a 	mov	r5,r3
}
 2009710:	2005883a 	mov	r2,r4
 2009714:	2807883a 	mov	r3,r5
 2009718:	e037883a 	mov	sp,fp
 200971c:	dfc00117 	ldw	ra,4(sp)
 2009720:	df000017 	ldw	fp,0(sp)
 2009724:	dec00204 	addi	sp,sp,8
 2009728:	f800283a 	ret

0200972c <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 200972c:	defff004 	addi	sp,sp,-64
 2009730:	dfc00f15 	stw	ra,60(sp)
 2009734:	df000e15 	stw	fp,56(sp)
 2009738:	dc000d15 	stw	r16,52(sp)
 200973c:	df000e04 	addi	fp,sp,56
 2009740:	e13ffb15 	stw	r4,-20(fp)
 2009744:	e17ffc15 	stw	r5,-16(fp)
 2009748:	e1bffd15 	stw	r6,-12(fp)
 200974c:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 2009750:	e0bffc17 	ldw	r2,-16(fp)
 2009754:	e0bff715 	stw	r2,-36(fp)
 2009758:	e0bffd17 	ldw	r2,-12(fp)
 200975c:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 2009760:	e0bffc17 	ldw	r2,-16(fp)
 2009764:	e0bff715 	stw	r2,-36(fp)
 2009768:	e0bffd17 	ldw	r2,-12(fp)
 200976c:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 2009770:	01400044 	movi	r5,1
 2009774:	e13ffb17 	ldw	r4,-20(fp)
 2009778:	20082c40 	call	20082c4 <_Balloc>
 200977c:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 2009780:	e0bff417 	ldw	r2,-48(fp)
 2009784:	10800504 	addi	r2,r2,20
 2009788:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 200978c:	e0fff817 	ldw	r3,-32(fp)
 2009790:	00800434 	movhi	r2,16
 2009794:	10bfffc4 	addi	r2,r2,-1
 2009798:	1884703a 	and	r2,r3,r2
 200979c:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 20097a0:	e0fff817 	ldw	r3,-32(fp)
 20097a4:	00a00034 	movhi	r2,32768
 20097a8:	10bfffc4 	addi	r2,r2,-1
 20097ac:	1884703a 	and	r2,r3,r2
 20097b0:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 20097b4:	e0bff817 	ldw	r2,-32(fp)
 20097b8:	1004d53a 	srli	r2,r2,20
 20097bc:	e0bff615 	stw	r2,-40(fp)
 20097c0:	e0bff617 	ldw	r2,-40(fp)
 20097c4:	10000326 	beq	r2,zero,20097d4 <__d2b+0xa8>
    z |= Exp_msk1;
 20097c8:	e0bffa17 	ldw	r2,-24(fp)
 20097cc:	10800434 	orhi	r2,r2,16
 20097d0:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 20097d4:	e0bff717 	ldw	r2,-36(fp)
 20097d8:	10002826 	beq	r2,zero,200987c <__d2b+0x150>
    {
      y = d1;
 20097dc:	e0bff717 	ldw	r2,-36(fp)
 20097e0:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 20097e4:	e0bff904 	addi	r2,fp,-28
 20097e8:	1009883a 	mov	r4,r2
 20097ec:	20088200 	call	2008820 <__lo0bits>
 20097f0:	e0bff315 	stw	r2,-52(fp)
      if (k)
 20097f4:	e0bff317 	ldw	r2,-52(fp)
 20097f8:	10000e26 	beq	r2,zero,2009834 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 20097fc:	e0fffa17 	ldw	r3,-24(fp)
 2009800:	01000804 	movi	r4,32
 2009804:	e0bff317 	ldw	r2,-52(fp)
 2009808:	2085c83a 	sub	r2,r4,r2
 200980c:	1886983a 	sll	r3,r3,r2
 2009810:	e0bff917 	ldw	r2,-28(fp)
 2009814:	1886b03a 	or	r3,r3,r2
 2009818:	e0bff517 	ldw	r2,-44(fp)
 200981c:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 2009820:	e0fffa17 	ldw	r3,-24(fp)
 2009824:	e0bff317 	ldw	r2,-52(fp)
 2009828:	1884d83a 	srl	r2,r3,r2
 200982c:	e0bffa15 	stw	r2,-24(fp)
 2009830:	00000306 	br	2009840 <__d2b+0x114>
	}
      else
	x[0] = y;
 2009834:	e0fff917 	ldw	r3,-28(fp)
 2009838:	e0bff517 	ldw	r2,-44(fp)
 200983c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 2009840:	e0bff517 	ldw	r2,-44(fp)
 2009844:	10800104 	addi	r2,r2,4
 2009848:	e0fffa17 	ldw	r3,-24(fp)
 200984c:	10c00015 	stw	r3,0(r2)
 2009850:	10800017 	ldw	r2,0(r2)
 2009854:	10000226 	beq	r2,zero,2009860 <__d2b+0x134>
 2009858:	00800084 	movi	r2,2
 200985c:	00000106 	br	2009864 <__d2b+0x138>
 2009860:	00800044 	movi	r2,1
 2009864:	e0fff417 	ldw	r3,-48(fp)
 2009868:	18800415 	stw	r2,16(r3)
 200986c:	e0bff417 	ldw	r2,-48(fp)
 2009870:	10800417 	ldw	r2,16(r2)
 2009874:	e0bff215 	stw	r2,-56(fp)
 2009878:	00001006 	br	20098bc <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 200987c:	e0bffa04 	addi	r2,fp,-24
 2009880:	1009883a 	mov	r4,r2
 2009884:	20088200 	call	2008820 <__lo0bits>
 2009888:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 200988c:	e0fffa17 	ldw	r3,-24(fp)
 2009890:	e0bff517 	ldw	r2,-44(fp)
 2009894:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 2009898:	e0bff417 	ldw	r2,-48(fp)
 200989c:	00c00044 	movi	r3,1
 20098a0:	10c00415 	stw	r3,16(r2)
 20098a4:	e0bff417 	ldw	r2,-48(fp)
 20098a8:	10800417 	ldw	r2,16(r2)
 20098ac:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 20098b0:	e0bff317 	ldw	r2,-52(fp)
 20098b4:	10800804 	addi	r2,r2,32
 20098b8:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 20098bc:	e0bff617 	ldw	r2,-40(fp)
 20098c0:	10000c26 	beq	r2,zero,20098f4 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 20098c4:	e0bff617 	ldw	r2,-40(fp)
 20098c8:	10fef344 	addi	r3,r2,-1075
 20098cc:	e0bff317 	ldw	r2,-52(fp)
 20098d0:	1887883a 	add	r3,r3,r2
 20098d4:	e0bffe17 	ldw	r2,-8(fp)
 20098d8:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 20098dc:	00c00d44 	movi	r3,53
 20098e0:	e0bff317 	ldw	r2,-52(fp)
 20098e4:	1887c83a 	sub	r3,r3,r2
 20098e8:	e0800217 	ldw	r2,8(fp)
 20098ec:	10c00015 	stw	r3,0(r2)
 20098f0:	00001706 	br	2009950 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 20098f4:	e0bff617 	ldw	r2,-40(fp)
 20098f8:	10fef384 	addi	r3,r2,-1074
 20098fc:	e0bff317 	ldw	r2,-52(fp)
 2009900:	1887883a 	add	r3,r3,r2
 2009904:	e0bffe17 	ldw	r2,-8(fp)
 2009908:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 200990c:	e0bff217 	ldw	r2,-56(fp)
 2009910:	1020917a 	slli	r16,r2,5
 2009914:	e0fff217 	ldw	r3,-56(fp)
 2009918:	00900034 	movhi	r2,16384
 200991c:	10bfffc4 	addi	r2,r2,-1
 2009920:	1885883a 	add	r2,r3,r2
 2009924:	1085883a 	add	r2,r2,r2
 2009928:	1085883a 	add	r2,r2,r2
 200992c:	1007883a 	mov	r3,r2
 2009930:	e0bff517 	ldw	r2,-44(fp)
 2009934:	10c5883a 	add	r2,r2,r3
 2009938:	10800017 	ldw	r2,0(r2)
 200993c:	1009883a 	mov	r4,r2
 2009940:	20087900 	call	2008790 <__hi0bits>
 2009944:	8087c83a 	sub	r3,r16,r2
 2009948:	e0800217 	ldw	r2,8(fp)
 200994c:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 2009950:	e0bff417 	ldw	r2,-48(fp)
}
 2009954:	e6ffff04 	addi	sp,fp,-4
 2009958:	dfc00217 	ldw	ra,8(sp)
 200995c:	df000117 	ldw	fp,4(sp)
 2009960:	dc000017 	ldw	r16,0(sp)
 2009964:	dec00304 	addi	sp,sp,12
 2009968:	f800283a 	ret

0200996c <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 200996c:	defff504 	addi	sp,sp,-44
 2009970:	dfc00a15 	stw	ra,40(sp)
 2009974:	df000915 	stw	fp,36(sp)
 2009978:	df000904 	addi	fp,sp,36
 200997c:	e13ffe15 	stw	r4,-8(fp)
 2009980:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 2009984:	e0bffc04 	addi	r2,fp,-16
 2009988:	100b883a 	mov	r5,r2
 200998c:	e13ffe17 	ldw	r4,-8(fp)
 2009990:	20095280 	call	2009528 <__b2d>
 2009994:	1009883a 	mov	r4,r2
 2009998:	180b883a 	mov	r5,r3
 200999c:	e13ff815 	stw	r4,-32(fp)
 20099a0:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 20099a4:	e0bffd04 	addi	r2,fp,-12
 20099a8:	100b883a 	mov	r5,r2
 20099ac:	e13fff17 	ldw	r4,-4(fp)
 20099b0:	20095280 	call	2009528 <__b2d>
 20099b4:	1009883a 	mov	r4,r2
 20099b8:	180b883a 	mov	r5,r3
 20099bc:	e13ffa15 	stw	r4,-24(fp)
 20099c0:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 20099c4:	e0fffc17 	ldw	r3,-16(fp)
 20099c8:	e0bffd17 	ldw	r2,-12(fp)
 20099cc:	1887c83a 	sub	r3,r3,r2
 20099d0:	e0bffe17 	ldw	r2,-8(fp)
 20099d4:	11000417 	ldw	r4,16(r2)
 20099d8:	e0bfff17 	ldw	r2,-4(fp)
 20099dc:	10800417 	ldw	r2,16(r2)
 20099e0:	2085c83a 	sub	r2,r4,r2
 20099e4:	1004917a 	slli	r2,r2,5
 20099e8:	1885883a 	add	r2,r3,r2
 20099ec:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 20099f0:	e0bff717 	ldw	r2,-36(fp)
 20099f4:	0080060e 	bge	zero,r2,2009a10 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 20099f8:	e0fff917 	ldw	r3,-28(fp)
 20099fc:	e0bff717 	ldw	r2,-36(fp)
 2009a00:	1004953a 	slli	r2,r2,20
 2009a04:	1885883a 	add	r2,r3,r2
 2009a08:	e0bff915 	stw	r2,-28(fp)
 2009a0c:	00000806 	br	2009a30 <__ratio+0xc4>
  else
    {
      k = -k;
 2009a10:	e0bff717 	ldw	r2,-36(fp)
 2009a14:	0085c83a 	sub	r2,zero,r2
 2009a18:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 2009a1c:	e0fffb17 	ldw	r3,-20(fp)
 2009a20:	e0bff717 	ldw	r2,-36(fp)
 2009a24:	1004953a 	slli	r2,r2,20
 2009a28:	1885883a 	add	r2,r3,r2
 2009a2c:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 2009a30:	e0bff817 	ldw	r2,-32(fp)
 2009a34:	e0fff917 	ldw	r3,-28(fp)
 2009a38:	e13ffa17 	ldw	r4,-24(fp)
 2009a3c:	e17ffb17 	ldw	r5,-20(fp)
 2009a40:	200d883a 	mov	r6,r4
 2009a44:	280f883a 	mov	r7,r5
 2009a48:	1009883a 	mov	r4,r2
 2009a4c:	180b883a 	mov	r5,r3
 2009a50:	200e4e80 	call	200e4e8 <__divdf3>
 2009a54:	100f883a 	mov	r7,r2
 2009a58:	1811883a 	mov	r8,r3
 2009a5c:	380b883a 	mov	r5,r7
 2009a60:	400d883a 	mov	r6,r8
 2009a64:	2807883a 	mov	r3,r5
 2009a68:	3009883a 	mov	r4,r6
}
 2009a6c:	1805883a 	mov	r2,r3
 2009a70:	2007883a 	mov	r3,r4
 2009a74:	e037883a 	mov	sp,fp
 2009a78:	dfc00117 	ldw	ra,4(sp)
 2009a7c:	df000017 	ldw	fp,0(sp)
 2009a80:	dec00204 	addi	sp,sp,8
 2009a84:	f800283a 	ret

02009a88 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 2009a88:	defffb04 	addi	sp,sp,-20
 2009a8c:	dfc00415 	stw	ra,16(sp)
 2009a90:	df000315 	stw	fp,12(sp)
 2009a94:	df000304 	addi	fp,sp,12
 2009a98:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 2009a9c:	e03ffd15 	stw	zero,-12(fp)
 2009aa0:	008ffc34 	movhi	r2,16368
 2009aa4:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 2009aa8:	e0bfff17 	ldw	r2,-4(fp)
 2009aac:	10800608 	cmpgei	r2,r2,24
 2009ab0:	1000141e 	bne	r2,zero,2009b04 <_mprec_log10+0x7c>
    return tens[dig];
 2009ab4:	00808074 	movhi	r2,513
 2009ab8:	108ba104 	addi	r2,r2,11908
 2009abc:	e0ffff17 	ldw	r3,-4(fp)
 2009ac0:	180690fa 	slli	r3,r3,3
 2009ac4:	10c9883a 	add	r4,r2,r3
 2009ac8:	20800017 	ldw	r2,0(r4)
 2009acc:	20c00117 	ldw	r3,4(r4)
 2009ad0:	00001006 	br	2009b14 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 2009ad4:	000d883a 	mov	r6,zero
 2009ad8:	01d00934 	movhi	r7,16420
 2009adc:	e13ffd17 	ldw	r4,-12(fp)
 2009ae0:	e17ffe17 	ldw	r5,-8(fp)
 2009ae4:	200ef340 	call	200ef34 <__muldf3>
 2009ae8:	1009883a 	mov	r4,r2
 2009aec:	180b883a 	mov	r5,r3
 2009af0:	e13ffd15 	stw	r4,-12(fp)
 2009af4:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 2009af8:	e0bfff17 	ldw	r2,-4(fp)
 2009afc:	10bfffc4 	addi	r2,r2,-1
 2009b00:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 2009b04:	e0bfff17 	ldw	r2,-4(fp)
 2009b08:	00bff216 	blt	zero,r2,2009ad4 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 2009b0c:	e0bffd17 	ldw	r2,-12(fp)
 2009b10:	e0fffe17 	ldw	r3,-8(fp)
 2009b14:	1009883a 	mov	r4,r2
 2009b18:	180b883a 	mov	r5,r3
}
 2009b1c:	2005883a 	mov	r2,r4
 2009b20:	2807883a 	mov	r3,r5
 2009b24:	e037883a 	mov	sp,fp
 2009b28:	dfc00117 	ldw	ra,4(sp)
 2009b2c:	df000017 	ldw	fp,0(sp)
 2009b30:	dec00204 	addi	sp,sp,8
 2009b34:	f800283a 	ret

02009b38 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 2009b38:	defff904 	addi	sp,sp,-28
 2009b3c:	df000615 	stw	fp,24(sp)
 2009b40:	df000604 	addi	fp,sp,24
 2009b44:	e13ffd15 	stw	r4,-12(fp)
 2009b48:	e17ffe15 	stw	r5,-8(fp)
 2009b4c:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 2009b50:	e0bffe17 	ldw	r2,-8(fp)
 2009b54:	10bfffc4 	addi	r2,r2,-1
 2009b58:	1005d17a 	srai	r2,r2,5
 2009b5c:	10800044 	addi	r2,r2,1
 2009b60:	1085883a 	add	r2,r2,r2
 2009b64:	1085883a 	add	r2,r2,r2
 2009b68:	1007883a 	mov	r3,r2
 2009b6c:	e0bffd17 	ldw	r2,-12(fp)
 2009b70:	10c5883a 	add	r2,r2,r3
 2009b74:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 2009b78:	e0bfff17 	ldw	r2,-4(fp)
 2009b7c:	10800504 	addi	r2,r2,20
 2009b80:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 2009b84:	e0bfff17 	ldw	r2,-4(fp)
 2009b88:	10800417 	ldw	r2,16(r2)
 2009b8c:	1085883a 	add	r2,r2,r2
 2009b90:	1085883a 	add	r2,r2,r2
 2009b94:	1007883a 	mov	r3,r2
 2009b98:	e0bffa17 	ldw	r2,-24(fp)
 2009b9c:	10c5883a 	add	r2,r2,r3
 2009ba0:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 2009ba4:	00000806 	br	2009bc8 <__copybits+0x90>
		*c++ = *x++;
 2009ba8:	e0bffd17 	ldw	r2,-12(fp)
 2009bac:	10c00104 	addi	r3,r2,4
 2009bb0:	e0fffd15 	stw	r3,-12(fp)
 2009bb4:	e0fffa17 	ldw	r3,-24(fp)
 2009bb8:	19000104 	addi	r4,r3,4
 2009bbc:	e13ffa15 	stw	r4,-24(fp)
 2009bc0:	18c00017 	ldw	r3,0(r3)
 2009bc4:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 2009bc8:	e0fffa17 	ldw	r3,-24(fp)
 2009bcc:	e0bffc17 	ldw	r2,-16(fp)
 2009bd0:	18bff536 	bltu	r3,r2,2009ba8 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2009bd4:	00000406 	br	2009be8 <__copybits+0xb0>
		*c++ = 0;
 2009bd8:	e0bffd17 	ldw	r2,-12(fp)
 2009bdc:	10c00104 	addi	r3,r2,4
 2009be0:	e0fffd15 	stw	r3,-12(fp)
 2009be4:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2009be8:	e0fffd17 	ldw	r3,-12(fp)
 2009bec:	e0bffb17 	ldw	r2,-20(fp)
 2009bf0:	18bff936 	bltu	r3,r2,2009bd8 <__copybits+0xa0>
		*c++ = 0;
}
 2009bf4:	0001883a 	nop
 2009bf8:	e037883a 	mov	sp,fp
 2009bfc:	df000017 	ldw	fp,0(sp)
 2009c00:	dec00104 	addi	sp,sp,4
 2009c04:	f800283a 	ret

02009c08 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 2009c08:	defff704 	addi	sp,sp,-36
 2009c0c:	df000815 	stw	fp,32(sp)
 2009c10:	df000804 	addi	fp,sp,32
 2009c14:	e13ffe15 	stw	r4,-8(fp)
 2009c18:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 2009c1c:	e0bffe17 	ldw	r2,-8(fp)
 2009c20:	10800504 	addi	r2,r2,20
 2009c24:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 2009c28:	e0bffe17 	ldw	r2,-8(fp)
 2009c2c:	10800417 	ldw	r2,16(r2)
 2009c30:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 2009c34:	e0bfff17 	ldw	r2,-4(fp)
 2009c38:	1005d17a 	srai	r2,r2,5
 2009c3c:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 2009c40:	e0bff817 	ldw	r2,-32(fp)
 2009c44:	e0fffa17 	ldw	r3,-24(fp)
 2009c48:	1880030e 	bge	r3,r2,2009c58 <__any_on+0x50>
		n = nwds;
 2009c4c:	e0bffa17 	ldw	r2,-24(fp)
 2009c50:	e0bff815 	stw	r2,-32(fp)
 2009c54:	00001f06 	br	2009cd4 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 2009c58:	e0fff817 	ldw	r3,-32(fp)
 2009c5c:	e0bffa17 	ldw	r2,-24(fp)
 2009c60:	18801c0e 	bge	r3,r2,2009cd4 <__any_on+0xcc>
 2009c64:	e0bfff17 	ldw	r2,-4(fp)
 2009c68:	108007cc 	andi	r2,r2,31
 2009c6c:	e0bfff15 	stw	r2,-4(fp)
 2009c70:	e0bfff17 	ldw	r2,-4(fp)
 2009c74:	10001726 	beq	r2,zero,2009cd4 <__any_on+0xcc>
		x1 = x2 = x[n];
 2009c78:	e0bff817 	ldw	r2,-32(fp)
 2009c7c:	1085883a 	add	r2,r2,r2
 2009c80:	1085883a 	add	r2,r2,r2
 2009c84:	1007883a 	mov	r3,r2
 2009c88:	e0bff917 	ldw	r2,-28(fp)
 2009c8c:	10c5883a 	add	r2,r2,r3
 2009c90:	10800017 	ldw	r2,0(r2)
 2009c94:	e0bffb15 	stw	r2,-20(fp)
 2009c98:	e0bffb17 	ldw	r2,-20(fp)
 2009c9c:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 2009ca0:	e0fffc17 	ldw	r3,-16(fp)
 2009ca4:	e0bfff17 	ldw	r2,-4(fp)
 2009ca8:	1884d83a 	srl	r2,r3,r2
 2009cac:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 2009cb0:	e0fffc17 	ldw	r3,-16(fp)
 2009cb4:	e0bfff17 	ldw	r2,-4(fp)
 2009cb8:	1884983a 	sll	r2,r3,r2
 2009cbc:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 2009cc0:	e0fffc17 	ldw	r3,-16(fp)
 2009cc4:	e0bffb17 	ldw	r2,-20(fp)
 2009cc8:	18800226 	beq	r3,r2,2009cd4 <__any_on+0xcc>
			return 1;
 2009ccc:	00800044 	movi	r2,1
 2009cd0:	00001606 	br	2009d2c <__any_on+0x124>
		}
	x0 = x;
 2009cd4:	e0bff917 	ldw	r2,-28(fp)
 2009cd8:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 2009cdc:	e0bff817 	ldw	r2,-32(fp)
 2009ce0:	1085883a 	add	r2,r2,r2
 2009ce4:	1085883a 	add	r2,r2,r2
 2009ce8:	1007883a 	mov	r3,r2
 2009cec:	e0bff917 	ldw	r2,-28(fp)
 2009cf0:	10c5883a 	add	r2,r2,r3
 2009cf4:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 2009cf8:	00000806 	br	2009d1c <__any_on+0x114>
		if (*--x)
 2009cfc:	e0bff917 	ldw	r2,-28(fp)
 2009d00:	10bfff04 	addi	r2,r2,-4
 2009d04:	e0bff915 	stw	r2,-28(fp)
 2009d08:	e0bff917 	ldw	r2,-28(fp)
 2009d0c:	10800017 	ldw	r2,0(r2)
 2009d10:	10000226 	beq	r2,zero,2009d1c <__any_on+0x114>
			return 1;
 2009d14:	00800044 	movi	r2,1
 2009d18:	00000406 	br	2009d2c <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 2009d1c:	e0bff917 	ldw	r2,-28(fp)
 2009d20:	e0fffd17 	ldw	r3,-12(fp)
 2009d24:	18bff536 	bltu	r3,r2,2009cfc <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 2009d28:	0005883a 	mov	r2,zero
}
 2009d2c:	e037883a 	mov	sp,fp
 2009d30:	df000017 	ldw	fp,0(sp)
 2009d34:	dec00104 	addi	sp,sp,4
 2009d38:	f800283a 	ret

02009d3c <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 2009d3c:	deffe104 	addi	sp,sp,-124
 2009d40:	dfc01e15 	stw	ra,120(sp)
 2009d44:	df001d15 	stw	fp,116(sp)
 2009d48:	df001d04 	addi	fp,sp,116
 2009d4c:	e13ffd15 	stw	r4,-12(fp)
 2009d50:	e17ffe15 	stw	r5,-8(fp)
 2009d54:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 2009d58:	e0bffe17 	ldw	r2,-8(fp)
 2009d5c:	1000041e 	bne	r2,zero,2009d70 <_realloc_r+0x34>
 2009d60:	e17fff17 	ldw	r5,-4(fp)
 2009d64:	e13ffd17 	ldw	r4,-12(fp)
 2009d68:	20070380 	call	2007038 <_malloc_r>
 2009d6c:	0002ea06 	br	200a918 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 2009d70:	e13ffd17 	ldw	r4,-12(fp)
 2009d74:	20105ec0 	call	20105ec <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 2009d78:	e0bffe17 	ldw	r2,-8(fp)
 2009d7c:	10bffe04 	addi	r2,r2,-8
 2009d80:	e0bfef15 	stw	r2,-68(fp)
 2009d84:	e0bfef17 	ldw	r2,-68(fp)
 2009d88:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 2009d8c:	e0bfef17 	ldw	r2,-68(fp)
 2009d90:	10c00117 	ldw	r3,4(r2)
 2009d94:	00bfff04 	movi	r2,-4
 2009d98:	1884703a 	and	r2,r3,r2
 2009d9c:	e0bff015 	stw	r2,-64(fp)
 2009da0:	e0bff017 	ldw	r2,-64(fp)
 2009da4:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 2009da8:	e0bfff17 	ldw	r2,-4(fp)
 2009dac:	108002c4 	addi	r2,r2,11
 2009db0:	108005f0 	cmpltui	r2,r2,23
 2009db4:	1000051e 	bne	r2,zero,2009dcc <_realloc_r+0x90>
 2009db8:	e0bfff17 	ldw	r2,-4(fp)
 2009dbc:	10c002c4 	addi	r3,r2,11
 2009dc0:	00bffe04 	movi	r2,-8
 2009dc4:	1884703a 	and	r2,r3,r2
 2009dc8:	00000106 	br	2009dd0 <_realloc_r+0x94>
 2009dcc:	00800404 	movi	r2,16
 2009dd0:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2009dd4:	e0bff117 	ldw	r2,-60(fp)
 2009dd8:	10000316 	blt	r2,zero,2009de8 <_realloc_r+0xac>
 2009ddc:	e0fff117 	ldw	r3,-60(fp)
 2009de0:	e0bfff17 	ldw	r2,-4(fp)
 2009de4:	1880052e 	bgeu	r3,r2,2009dfc <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 2009de8:	e0bffd17 	ldw	r2,-12(fp)
 2009dec:	00c00304 	movi	r3,12
 2009df0:	10c00015 	stw	r3,0(r2)
    return 0;
 2009df4:	0005883a 	mov	r2,zero
 2009df8:	0002c706 	br	200a918 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 2009dfc:	e0fff017 	ldw	r3,-64(fp)
 2009e00:	e0bff117 	ldw	r2,-60(fp)
 2009e04:	18828b0e 	bge	r3,r2,200a834 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 2009e08:	e0ffef17 	ldw	r3,-68(fp)
 2009e0c:	e0bff017 	ldw	r2,-64(fp)
 2009e10:	1885883a 	add	r2,r3,r2
 2009e14:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 2009e18:	00808074 	movhi	r2,513
 2009e1c:	108d3e04 	addi	r2,r2,13560
 2009e20:	10c00217 	ldw	r3,8(r2)
 2009e24:	e0bfe517 	ldw	r2,-108(fp)
 2009e28:	18800926 	beq	r3,r2,2009e50 <_realloc_r+0x114>
 2009e2c:	e0bfe517 	ldw	r2,-108(fp)
 2009e30:	10c00117 	ldw	r3,4(r2)
 2009e34:	00bfff84 	movi	r2,-2
 2009e38:	1884703a 	and	r2,r3,r2
 2009e3c:	e0ffe517 	ldw	r3,-108(fp)
 2009e40:	1885883a 	add	r2,r3,r2
 2009e44:	10800117 	ldw	r2,4(r2)
 2009e48:	1080004c 	andi	r2,r2,1
 2009e4c:	1000461e 	bne	r2,zero,2009f68 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 2009e50:	e0bfe517 	ldw	r2,-108(fp)
 2009e54:	10c00117 	ldw	r3,4(r2)
 2009e58:	00bfff04 	movi	r2,-4
 2009e5c:	1884703a 	and	r2,r3,r2
 2009e60:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 2009e64:	00808074 	movhi	r2,513
 2009e68:	108d3e04 	addi	r2,r2,13560
 2009e6c:	10c00217 	ldw	r3,8(r2)
 2009e70:	e0bfe517 	ldw	r2,-108(fp)
 2009e74:	1880251e 	bne	r3,r2,2009f0c <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 2009e78:	e0ffe617 	ldw	r3,-104(fp)
 2009e7c:	e0bfe417 	ldw	r2,-112(fp)
 2009e80:	1885883a 	add	r2,r3,r2
 2009e84:	1007883a 	mov	r3,r2
 2009e88:	e0bff117 	ldw	r2,-60(fp)
 2009e8c:	10800404 	addi	r2,r2,16
 2009e90:	18803816 	blt	r3,r2,2009f74 <_realloc_r+0x238>
        {
          newsize += nextsize;
 2009e94:	e0ffe417 	ldw	r3,-112(fp)
 2009e98:	e0bfe617 	ldw	r2,-104(fp)
 2009e9c:	1885883a 	add	r2,r3,r2
 2009ea0:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 2009ea4:	00808074 	movhi	r2,513
 2009ea8:	108d3e04 	addi	r2,r2,13560
 2009eac:	e13fef17 	ldw	r4,-68(fp)
 2009eb0:	e0fff117 	ldw	r3,-60(fp)
 2009eb4:	20c7883a 	add	r3,r4,r3
 2009eb8:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 2009ebc:	00808074 	movhi	r2,513
 2009ec0:	108d3e04 	addi	r2,r2,13560
 2009ec4:	10800217 	ldw	r2,8(r2)
 2009ec8:	e13fe417 	ldw	r4,-112(fp)
 2009ecc:	e0fff117 	ldw	r3,-60(fp)
 2009ed0:	20c7c83a 	sub	r3,r4,r3
 2009ed4:	18c00054 	ori	r3,r3,1
 2009ed8:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 2009edc:	e0bfef17 	ldw	r2,-68(fp)
 2009ee0:	10800117 	ldw	r2,4(r2)
 2009ee4:	10c0004c 	andi	r3,r2,1
 2009ee8:	e0bff117 	ldw	r2,-60(fp)
 2009eec:	1886b03a 	or	r3,r3,r2
 2009ef0:	e0bfef17 	ldw	r2,-68(fp)
 2009ef4:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 2009ef8:	e13ffd17 	ldw	r4,-12(fp)
 2009efc:	20106100 	call	2010610 <__malloc_unlock>
          return chunk2mem(oldp);
 2009f00:	e0bfef17 	ldw	r2,-68(fp)
 2009f04:	10800204 	addi	r2,r2,8
 2009f08:	00028306 	br	200a918 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 2009f0c:	e0ffe617 	ldw	r3,-104(fp)
 2009f10:	e0bfe417 	ldw	r2,-112(fp)
 2009f14:	1885883a 	add	r2,r3,r2
 2009f18:	1007883a 	mov	r3,r2
 2009f1c:	e0bff117 	ldw	r2,-60(fp)
 2009f20:	18801416 	blt	r3,r2,2009f74 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 2009f24:	e0bfe517 	ldw	r2,-108(fp)
 2009f28:	10800317 	ldw	r2,12(r2)
 2009f2c:	e0bff215 	stw	r2,-56(fp)
 2009f30:	e0bfe517 	ldw	r2,-108(fp)
 2009f34:	10800217 	ldw	r2,8(r2)
 2009f38:	e0bff315 	stw	r2,-52(fp)
 2009f3c:	e0bff317 	ldw	r2,-52(fp)
 2009f40:	e0fff217 	ldw	r3,-56(fp)
 2009f44:	10c00315 	stw	r3,12(r2)
 2009f48:	e0bff217 	ldw	r2,-56(fp)
 2009f4c:	e0fff317 	ldw	r3,-52(fp)
 2009f50:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 2009f54:	e0ffe417 	ldw	r3,-112(fp)
 2009f58:	e0bfe617 	ldw	r2,-104(fp)
 2009f5c:	1885883a 	add	r2,r3,r2
 2009f60:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 2009f64:	00023306 	br	200a834 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 2009f68:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 2009f6c:	e03fe615 	stw	zero,-104(fp)
 2009f70:	00000106 	br	2009f78 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 2009f74:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 2009f78:	e0bfef17 	ldw	r2,-68(fp)
 2009f7c:	10800117 	ldw	r2,4(r2)
 2009f80:	1080004c 	andi	r2,r2,1
 2009f84:	1001a91e 	bne	r2,zero,200a62c <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 2009f88:	e0bfef17 	ldw	r2,-68(fp)
 2009f8c:	10800017 	ldw	r2,0(r2)
 2009f90:	0085c83a 	sub	r2,zero,r2
 2009f94:	e0ffef17 	ldw	r3,-68(fp)
 2009f98:	1885883a 	add	r2,r3,r2
 2009f9c:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 2009fa0:	e0bff417 	ldw	r2,-48(fp)
 2009fa4:	10c00117 	ldw	r3,4(r2)
 2009fa8:	00bfff04 	movi	r2,-4
 2009fac:	1884703a 	and	r2,r3,r2
 2009fb0:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 2009fb4:	e0bfe517 	ldw	r2,-108(fp)
 2009fb8:	10012226 	beq	r2,zero,200a444 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 2009fbc:	00808074 	movhi	r2,513
 2009fc0:	108d3e04 	addi	r2,r2,13560
 2009fc4:	10c00217 	ldw	r3,8(r2)
 2009fc8:	e0bfe517 	ldw	r2,-108(fp)
 2009fcc:	1880951e 	bne	r3,r2,200a224 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 2009fd0:	e0ffe617 	ldw	r3,-104(fp)
 2009fd4:	e0bff517 	ldw	r2,-44(fp)
 2009fd8:	1887883a 	add	r3,r3,r2
 2009fdc:	e0bfe417 	ldw	r2,-112(fp)
 2009fe0:	1885883a 	add	r2,r3,r2
 2009fe4:	1007883a 	mov	r3,r2
 2009fe8:	e0bff117 	ldw	r2,-60(fp)
 2009fec:	10800404 	addi	r2,r2,16
 2009ff0:	18811416 	blt	r3,r2,200a444 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 2009ff4:	e0bff417 	ldw	r2,-48(fp)
 2009ff8:	10800317 	ldw	r2,12(r2)
 2009ffc:	e0bff215 	stw	r2,-56(fp)
 200a000:	e0bff417 	ldw	r2,-48(fp)
 200a004:	10800217 	ldw	r2,8(r2)
 200a008:	e0bff315 	stw	r2,-52(fp)
 200a00c:	e0bff317 	ldw	r2,-52(fp)
 200a010:	e0fff217 	ldw	r3,-56(fp)
 200a014:	10c00315 	stw	r3,12(r2)
 200a018:	e0bff217 	ldw	r2,-56(fp)
 200a01c:	e0fff317 	ldw	r3,-52(fp)
 200a020:	10c00215 	stw	r3,8(r2)
            newp = prev;
 200a024:	e0bff417 	ldw	r2,-48(fp)
 200a028:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 200a02c:	e0fff517 	ldw	r3,-44(fp)
 200a030:	e0bfe617 	ldw	r2,-104(fp)
 200a034:	1885883a 	add	r2,r3,r2
 200a038:	e0ffe417 	ldw	r3,-112(fp)
 200a03c:	1885883a 	add	r2,r3,r2
 200a040:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 200a044:	e0bfe317 	ldw	r2,-116(fp)
 200a048:	10800204 	addi	r2,r2,8
 200a04c:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a050:	e0bff017 	ldw	r2,-64(fp)
 200a054:	10bfff04 	addi	r2,r2,-4
 200a058:	e0bff715 	stw	r2,-36(fp)
 200a05c:	e0bff717 	ldw	r2,-36(fp)
 200a060:	10800968 	cmpgeui	r2,r2,37
 200a064:	1000521e 	bne	r2,zero,200a1b0 <_realloc_r+0x474>
 200a068:	e0bffe17 	ldw	r2,-8(fp)
 200a06c:	e0bfe715 	stw	r2,-100(fp)
 200a070:	e0bff617 	ldw	r2,-40(fp)
 200a074:	e0bfe815 	stw	r2,-96(fp)
 200a078:	e0bff717 	ldw	r2,-36(fp)
 200a07c:	10800530 	cmpltui	r2,r2,20
 200a080:	1000361e 	bne	r2,zero,200a15c <_realloc_r+0x420>
 200a084:	e0bfe817 	ldw	r2,-96(fp)
 200a088:	10c00104 	addi	r3,r2,4
 200a08c:	e0ffe815 	stw	r3,-96(fp)
 200a090:	e0ffe717 	ldw	r3,-100(fp)
 200a094:	19000104 	addi	r4,r3,4
 200a098:	e13fe715 	stw	r4,-100(fp)
 200a09c:	18c00017 	ldw	r3,0(r3)
 200a0a0:	10c00015 	stw	r3,0(r2)
 200a0a4:	e0bfe817 	ldw	r2,-96(fp)
 200a0a8:	10c00104 	addi	r3,r2,4
 200a0ac:	e0ffe815 	stw	r3,-96(fp)
 200a0b0:	e0ffe717 	ldw	r3,-100(fp)
 200a0b4:	19000104 	addi	r4,r3,4
 200a0b8:	e13fe715 	stw	r4,-100(fp)
 200a0bc:	18c00017 	ldw	r3,0(r3)
 200a0c0:	10c00015 	stw	r3,0(r2)
 200a0c4:	e0bff717 	ldw	r2,-36(fp)
 200a0c8:	10800730 	cmpltui	r2,r2,28
 200a0cc:	1000231e 	bne	r2,zero,200a15c <_realloc_r+0x420>
 200a0d0:	e0bfe817 	ldw	r2,-96(fp)
 200a0d4:	10c00104 	addi	r3,r2,4
 200a0d8:	e0ffe815 	stw	r3,-96(fp)
 200a0dc:	e0ffe717 	ldw	r3,-100(fp)
 200a0e0:	19000104 	addi	r4,r3,4
 200a0e4:	e13fe715 	stw	r4,-100(fp)
 200a0e8:	18c00017 	ldw	r3,0(r3)
 200a0ec:	10c00015 	stw	r3,0(r2)
 200a0f0:	e0bfe817 	ldw	r2,-96(fp)
 200a0f4:	10c00104 	addi	r3,r2,4
 200a0f8:	e0ffe815 	stw	r3,-96(fp)
 200a0fc:	e0ffe717 	ldw	r3,-100(fp)
 200a100:	19000104 	addi	r4,r3,4
 200a104:	e13fe715 	stw	r4,-100(fp)
 200a108:	18c00017 	ldw	r3,0(r3)
 200a10c:	10c00015 	stw	r3,0(r2)
 200a110:	e0bff717 	ldw	r2,-36(fp)
 200a114:	10800930 	cmpltui	r2,r2,36
 200a118:	1000101e 	bne	r2,zero,200a15c <_realloc_r+0x420>
 200a11c:	e0bfe817 	ldw	r2,-96(fp)
 200a120:	10c00104 	addi	r3,r2,4
 200a124:	e0ffe815 	stw	r3,-96(fp)
 200a128:	e0ffe717 	ldw	r3,-100(fp)
 200a12c:	19000104 	addi	r4,r3,4
 200a130:	e13fe715 	stw	r4,-100(fp)
 200a134:	18c00017 	ldw	r3,0(r3)
 200a138:	10c00015 	stw	r3,0(r2)
 200a13c:	e0bfe817 	ldw	r2,-96(fp)
 200a140:	10c00104 	addi	r3,r2,4
 200a144:	e0ffe815 	stw	r3,-96(fp)
 200a148:	e0ffe717 	ldw	r3,-100(fp)
 200a14c:	19000104 	addi	r4,r3,4
 200a150:	e13fe715 	stw	r4,-100(fp)
 200a154:	18c00017 	ldw	r3,0(r3)
 200a158:	10c00015 	stw	r3,0(r2)
 200a15c:	e0bfe817 	ldw	r2,-96(fp)
 200a160:	10c00104 	addi	r3,r2,4
 200a164:	e0ffe815 	stw	r3,-96(fp)
 200a168:	e0ffe717 	ldw	r3,-100(fp)
 200a16c:	19000104 	addi	r4,r3,4
 200a170:	e13fe715 	stw	r4,-100(fp)
 200a174:	18c00017 	ldw	r3,0(r3)
 200a178:	10c00015 	stw	r3,0(r2)
 200a17c:	e0bfe817 	ldw	r2,-96(fp)
 200a180:	10c00104 	addi	r3,r2,4
 200a184:	e0ffe815 	stw	r3,-96(fp)
 200a188:	e0ffe717 	ldw	r3,-100(fp)
 200a18c:	19000104 	addi	r4,r3,4
 200a190:	e13fe715 	stw	r4,-100(fp)
 200a194:	18c00017 	ldw	r3,0(r3)
 200a198:	10c00015 	stw	r3,0(r2)
 200a19c:	e0bfe717 	ldw	r2,-100(fp)
 200a1a0:	10c00017 	ldw	r3,0(r2)
 200a1a4:	e0bfe817 	ldw	r2,-96(fp)
 200a1a8:	10c00015 	stw	r3,0(r2)
 200a1ac:	00000406 	br	200a1c0 <_realloc_r+0x484>
 200a1b0:	e1bff717 	ldw	r6,-36(fp)
 200a1b4:	e17ffe17 	ldw	r5,-8(fp)
 200a1b8:	e13ff617 	ldw	r4,-40(fp)
 200a1bc:	2007ef80 	call	2007ef8 <memmove>
            top = chunk_at_offset(newp, nb);
 200a1c0:	00808074 	movhi	r2,513
 200a1c4:	108d3e04 	addi	r2,r2,13560
 200a1c8:	e13fe317 	ldw	r4,-116(fp)
 200a1cc:	e0fff117 	ldw	r3,-60(fp)
 200a1d0:	20c7883a 	add	r3,r4,r3
 200a1d4:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 200a1d8:	00808074 	movhi	r2,513
 200a1dc:	108d3e04 	addi	r2,r2,13560
 200a1e0:	10800217 	ldw	r2,8(r2)
 200a1e4:	e13fe417 	ldw	r4,-112(fp)
 200a1e8:	e0fff117 	ldw	r3,-60(fp)
 200a1ec:	20c7c83a 	sub	r3,r4,r3
 200a1f0:	18c00054 	ori	r3,r3,1
 200a1f4:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 200a1f8:	e0bfe317 	ldw	r2,-116(fp)
 200a1fc:	10800117 	ldw	r2,4(r2)
 200a200:	10c0004c 	andi	r3,r2,1
 200a204:	e0bff117 	ldw	r2,-60(fp)
 200a208:	1886b03a 	or	r3,r3,r2
 200a20c:	e0bfe317 	ldw	r2,-116(fp)
 200a210:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 200a214:	e13ffd17 	ldw	r4,-12(fp)
 200a218:	20106100 	call	2010610 <__malloc_unlock>
            return newmem;
 200a21c:	e0bff617 	ldw	r2,-40(fp)
 200a220:	0001bd06 	br	200a918 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 200a224:	e0ffe617 	ldw	r3,-104(fp)
 200a228:	e0bff517 	ldw	r2,-44(fp)
 200a22c:	1887883a 	add	r3,r3,r2
 200a230:	e0bfe417 	ldw	r2,-112(fp)
 200a234:	1885883a 	add	r2,r3,r2
 200a238:	1007883a 	mov	r3,r2
 200a23c:	e0bff117 	ldw	r2,-60(fp)
 200a240:	18808016 	blt	r3,r2,200a444 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 200a244:	e0bfe517 	ldw	r2,-108(fp)
 200a248:	10800317 	ldw	r2,12(r2)
 200a24c:	e0bff215 	stw	r2,-56(fp)
 200a250:	e0bfe517 	ldw	r2,-108(fp)
 200a254:	10800217 	ldw	r2,8(r2)
 200a258:	e0bff315 	stw	r2,-52(fp)
 200a25c:	e0bff317 	ldw	r2,-52(fp)
 200a260:	e0fff217 	ldw	r3,-56(fp)
 200a264:	10c00315 	stw	r3,12(r2)
 200a268:	e0bff217 	ldw	r2,-56(fp)
 200a26c:	e0fff317 	ldw	r3,-52(fp)
 200a270:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 200a274:	e0bff417 	ldw	r2,-48(fp)
 200a278:	10800317 	ldw	r2,12(r2)
 200a27c:	e0bff215 	stw	r2,-56(fp)
 200a280:	e0bff417 	ldw	r2,-48(fp)
 200a284:	10800217 	ldw	r2,8(r2)
 200a288:	e0bff315 	stw	r2,-52(fp)
 200a28c:	e0bff317 	ldw	r2,-52(fp)
 200a290:	e0fff217 	ldw	r3,-56(fp)
 200a294:	10c00315 	stw	r3,12(r2)
 200a298:	e0bff217 	ldw	r2,-56(fp)
 200a29c:	e0fff317 	ldw	r3,-52(fp)
 200a2a0:	10c00215 	stw	r3,8(r2)
          newp = prev;
 200a2a4:	e0bff417 	ldw	r2,-48(fp)
 200a2a8:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 200a2ac:	e0ffe617 	ldw	r3,-104(fp)
 200a2b0:	e0bff517 	ldw	r2,-44(fp)
 200a2b4:	1885883a 	add	r2,r3,r2
 200a2b8:	e0ffe417 	ldw	r3,-112(fp)
 200a2bc:	1885883a 	add	r2,r3,r2
 200a2c0:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 200a2c4:	e0bfe317 	ldw	r2,-116(fp)
 200a2c8:	10800204 	addi	r2,r2,8
 200a2cc:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a2d0:	e0bff017 	ldw	r2,-64(fp)
 200a2d4:	10bfff04 	addi	r2,r2,-4
 200a2d8:	e0bff815 	stw	r2,-32(fp)
 200a2dc:	e0bff817 	ldw	r2,-32(fp)
 200a2e0:	10800968 	cmpgeui	r2,r2,37
 200a2e4:	1000521e 	bne	r2,zero,200a430 <_realloc_r+0x6f4>
 200a2e8:	e0bffe17 	ldw	r2,-8(fp)
 200a2ec:	e0bfe915 	stw	r2,-92(fp)
 200a2f0:	e0bff617 	ldw	r2,-40(fp)
 200a2f4:	e0bfea15 	stw	r2,-88(fp)
 200a2f8:	e0bff817 	ldw	r2,-32(fp)
 200a2fc:	10800530 	cmpltui	r2,r2,20
 200a300:	1000361e 	bne	r2,zero,200a3dc <_realloc_r+0x6a0>
 200a304:	e0bfea17 	ldw	r2,-88(fp)
 200a308:	10c00104 	addi	r3,r2,4
 200a30c:	e0ffea15 	stw	r3,-88(fp)
 200a310:	e0ffe917 	ldw	r3,-92(fp)
 200a314:	19000104 	addi	r4,r3,4
 200a318:	e13fe915 	stw	r4,-92(fp)
 200a31c:	18c00017 	ldw	r3,0(r3)
 200a320:	10c00015 	stw	r3,0(r2)
 200a324:	e0bfea17 	ldw	r2,-88(fp)
 200a328:	10c00104 	addi	r3,r2,4
 200a32c:	e0ffea15 	stw	r3,-88(fp)
 200a330:	e0ffe917 	ldw	r3,-92(fp)
 200a334:	19000104 	addi	r4,r3,4
 200a338:	e13fe915 	stw	r4,-92(fp)
 200a33c:	18c00017 	ldw	r3,0(r3)
 200a340:	10c00015 	stw	r3,0(r2)
 200a344:	e0bff817 	ldw	r2,-32(fp)
 200a348:	10800730 	cmpltui	r2,r2,28
 200a34c:	1000231e 	bne	r2,zero,200a3dc <_realloc_r+0x6a0>
 200a350:	e0bfea17 	ldw	r2,-88(fp)
 200a354:	10c00104 	addi	r3,r2,4
 200a358:	e0ffea15 	stw	r3,-88(fp)
 200a35c:	e0ffe917 	ldw	r3,-92(fp)
 200a360:	19000104 	addi	r4,r3,4
 200a364:	e13fe915 	stw	r4,-92(fp)
 200a368:	18c00017 	ldw	r3,0(r3)
 200a36c:	10c00015 	stw	r3,0(r2)
 200a370:	e0bfea17 	ldw	r2,-88(fp)
 200a374:	10c00104 	addi	r3,r2,4
 200a378:	e0ffea15 	stw	r3,-88(fp)
 200a37c:	e0ffe917 	ldw	r3,-92(fp)
 200a380:	19000104 	addi	r4,r3,4
 200a384:	e13fe915 	stw	r4,-92(fp)
 200a388:	18c00017 	ldw	r3,0(r3)
 200a38c:	10c00015 	stw	r3,0(r2)
 200a390:	e0bff817 	ldw	r2,-32(fp)
 200a394:	10800930 	cmpltui	r2,r2,36
 200a398:	1000101e 	bne	r2,zero,200a3dc <_realloc_r+0x6a0>
 200a39c:	e0bfea17 	ldw	r2,-88(fp)
 200a3a0:	10c00104 	addi	r3,r2,4
 200a3a4:	e0ffea15 	stw	r3,-88(fp)
 200a3a8:	e0ffe917 	ldw	r3,-92(fp)
 200a3ac:	19000104 	addi	r4,r3,4
 200a3b0:	e13fe915 	stw	r4,-92(fp)
 200a3b4:	18c00017 	ldw	r3,0(r3)
 200a3b8:	10c00015 	stw	r3,0(r2)
 200a3bc:	e0bfea17 	ldw	r2,-88(fp)
 200a3c0:	10c00104 	addi	r3,r2,4
 200a3c4:	e0ffea15 	stw	r3,-88(fp)
 200a3c8:	e0ffe917 	ldw	r3,-92(fp)
 200a3cc:	19000104 	addi	r4,r3,4
 200a3d0:	e13fe915 	stw	r4,-92(fp)
 200a3d4:	18c00017 	ldw	r3,0(r3)
 200a3d8:	10c00015 	stw	r3,0(r2)
 200a3dc:	e0bfea17 	ldw	r2,-88(fp)
 200a3e0:	10c00104 	addi	r3,r2,4
 200a3e4:	e0ffea15 	stw	r3,-88(fp)
 200a3e8:	e0ffe917 	ldw	r3,-92(fp)
 200a3ec:	19000104 	addi	r4,r3,4
 200a3f0:	e13fe915 	stw	r4,-92(fp)
 200a3f4:	18c00017 	ldw	r3,0(r3)
 200a3f8:	10c00015 	stw	r3,0(r2)
 200a3fc:	e0bfea17 	ldw	r2,-88(fp)
 200a400:	10c00104 	addi	r3,r2,4
 200a404:	e0ffea15 	stw	r3,-88(fp)
 200a408:	e0ffe917 	ldw	r3,-92(fp)
 200a40c:	19000104 	addi	r4,r3,4
 200a410:	e13fe915 	stw	r4,-92(fp)
 200a414:	18c00017 	ldw	r3,0(r3)
 200a418:	10c00015 	stw	r3,0(r2)
 200a41c:	e0bfe917 	ldw	r2,-92(fp)
 200a420:	10c00017 	ldw	r3,0(r2)
 200a424:	e0bfea17 	ldw	r2,-88(fp)
 200a428:	10c00015 	stw	r3,0(r2)
          goto split;
 200a42c:	00010106 	br	200a834 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a430:	e1bff817 	ldw	r6,-32(fp)
 200a434:	e17ffe17 	ldw	r5,-8(fp)
 200a438:	e13ff617 	ldw	r4,-40(fp)
 200a43c:	2007ef80 	call	2007ef8 <memmove>
          goto split;
 200a440:	0000fc06 	br	200a834 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 200a444:	e0bff417 	ldw	r2,-48(fp)
 200a448:	10007826 	beq	r2,zero,200a62c <_realloc_r+0x8f0>
 200a44c:	e0fff517 	ldw	r3,-44(fp)
 200a450:	e0bfe417 	ldw	r2,-112(fp)
 200a454:	1885883a 	add	r2,r3,r2
 200a458:	1007883a 	mov	r3,r2
 200a45c:	e0bff117 	ldw	r2,-60(fp)
 200a460:	18807216 	blt	r3,r2,200a62c <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 200a464:	e0bff417 	ldw	r2,-48(fp)
 200a468:	10800317 	ldw	r2,12(r2)
 200a46c:	e0bff215 	stw	r2,-56(fp)
 200a470:	e0bff417 	ldw	r2,-48(fp)
 200a474:	10800217 	ldw	r2,8(r2)
 200a478:	e0bff315 	stw	r2,-52(fp)
 200a47c:	e0bff317 	ldw	r2,-52(fp)
 200a480:	e0fff217 	ldw	r3,-56(fp)
 200a484:	10c00315 	stw	r3,12(r2)
 200a488:	e0bff217 	ldw	r2,-56(fp)
 200a48c:	e0fff317 	ldw	r3,-52(fp)
 200a490:	10c00215 	stw	r3,8(r2)
        newp = prev;
 200a494:	e0bff417 	ldw	r2,-48(fp)
 200a498:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 200a49c:	e0ffe417 	ldw	r3,-112(fp)
 200a4a0:	e0bff517 	ldw	r2,-44(fp)
 200a4a4:	1885883a 	add	r2,r3,r2
 200a4a8:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 200a4ac:	e0bfe317 	ldw	r2,-116(fp)
 200a4b0:	10800204 	addi	r2,r2,8
 200a4b4:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a4b8:	e0bff017 	ldw	r2,-64(fp)
 200a4bc:	10bfff04 	addi	r2,r2,-4
 200a4c0:	e0bff915 	stw	r2,-28(fp)
 200a4c4:	e0bff917 	ldw	r2,-28(fp)
 200a4c8:	10800968 	cmpgeui	r2,r2,37
 200a4cc:	1000521e 	bne	r2,zero,200a618 <_realloc_r+0x8dc>
 200a4d0:	e0bffe17 	ldw	r2,-8(fp)
 200a4d4:	e0bfeb15 	stw	r2,-84(fp)
 200a4d8:	e0bff617 	ldw	r2,-40(fp)
 200a4dc:	e0bfec15 	stw	r2,-80(fp)
 200a4e0:	e0bff917 	ldw	r2,-28(fp)
 200a4e4:	10800530 	cmpltui	r2,r2,20
 200a4e8:	1000361e 	bne	r2,zero,200a5c4 <_realloc_r+0x888>
 200a4ec:	e0bfec17 	ldw	r2,-80(fp)
 200a4f0:	10c00104 	addi	r3,r2,4
 200a4f4:	e0ffec15 	stw	r3,-80(fp)
 200a4f8:	e0ffeb17 	ldw	r3,-84(fp)
 200a4fc:	19000104 	addi	r4,r3,4
 200a500:	e13feb15 	stw	r4,-84(fp)
 200a504:	18c00017 	ldw	r3,0(r3)
 200a508:	10c00015 	stw	r3,0(r2)
 200a50c:	e0bfec17 	ldw	r2,-80(fp)
 200a510:	10c00104 	addi	r3,r2,4
 200a514:	e0ffec15 	stw	r3,-80(fp)
 200a518:	e0ffeb17 	ldw	r3,-84(fp)
 200a51c:	19000104 	addi	r4,r3,4
 200a520:	e13feb15 	stw	r4,-84(fp)
 200a524:	18c00017 	ldw	r3,0(r3)
 200a528:	10c00015 	stw	r3,0(r2)
 200a52c:	e0bff917 	ldw	r2,-28(fp)
 200a530:	10800730 	cmpltui	r2,r2,28
 200a534:	1000231e 	bne	r2,zero,200a5c4 <_realloc_r+0x888>
 200a538:	e0bfec17 	ldw	r2,-80(fp)
 200a53c:	10c00104 	addi	r3,r2,4
 200a540:	e0ffec15 	stw	r3,-80(fp)
 200a544:	e0ffeb17 	ldw	r3,-84(fp)
 200a548:	19000104 	addi	r4,r3,4
 200a54c:	e13feb15 	stw	r4,-84(fp)
 200a550:	18c00017 	ldw	r3,0(r3)
 200a554:	10c00015 	stw	r3,0(r2)
 200a558:	e0bfec17 	ldw	r2,-80(fp)
 200a55c:	10c00104 	addi	r3,r2,4
 200a560:	e0ffec15 	stw	r3,-80(fp)
 200a564:	e0ffeb17 	ldw	r3,-84(fp)
 200a568:	19000104 	addi	r4,r3,4
 200a56c:	e13feb15 	stw	r4,-84(fp)
 200a570:	18c00017 	ldw	r3,0(r3)
 200a574:	10c00015 	stw	r3,0(r2)
 200a578:	e0bff917 	ldw	r2,-28(fp)
 200a57c:	10800930 	cmpltui	r2,r2,36
 200a580:	1000101e 	bne	r2,zero,200a5c4 <_realloc_r+0x888>
 200a584:	e0bfec17 	ldw	r2,-80(fp)
 200a588:	10c00104 	addi	r3,r2,4
 200a58c:	e0ffec15 	stw	r3,-80(fp)
 200a590:	e0ffeb17 	ldw	r3,-84(fp)
 200a594:	19000104 	addi	r4,r3,4
 200a598:	e13feb15 	stw	r4,-84(fp)
 200a59c:	18c00017 	ldw	r3,0(r3)
 200a5a0:	10c00015 	stw	r3,0(r2)
 200a5a4:	e0bfec17 	ldw	r2,-80(fp)
 200a5a8:	10c00104 	addi	r3,r2,4
 200a5ac:	e0ffec15 	stw	r3,-80(fp)
 200a5b0:	e0ffeb17 	ldw	r3,-84(fp)
 200a5b4:	19000104 	addi	r4,r3,4
 200a5b8:	e13feb15 	stw	r4,-84(fp)
 200a5bc:	18c00017 	ldw	r3,0(r3)
 200a5c0:	10c00015 	stw	r3,0(r2)
 200a5c4:	e0bfec17 	ldw	r2,-80(fp)
 200a5c8:	10c00104 	addi	r3,r2,4
 200a5cc:	e0ffec15 	stw	r3,-80(fp)
 200a5d0:	e0ffeb17 	ldw	r3,-84(fp)
 200a5d4:	19000104 	addi	r4,r3,4
 200a5d8:	e13feb15 	stw	r4,-84(fp)
 200a5dc:	18c00017 	ldw	r3,0(r3)
 200a5e0:	10c00015 	stw	r3,0(r2)
 200a5e4:	e0bfec17 	ldw	r2,-80(fp)
 200a5e8:	10c00104 	addi	r3,r2,4
 200a5ec:	e0ffec15 	stw	r3,-80(fp)
 200a5f0:	e0ffeb17 	ldw	r3,-84(fp)
 200a5f4:	19000104 	addi	r4,r3,4
 200a5f8:	e13feb15 	stw	r4,-84(fp)
 200a5fc:	18c00017 	ldw	r3,0(r3)
 200a600:	10c00015 	stw	r3,0(r2)
 200a604:	e0bfeb17 	ldw	r2,-84(fp)
 200a608:	10c00017 	ldw	r3,0(r2)
 200a60c:	e0bfec17 	ldw	r2,-80(fp)
 200a610:	10c00015 	stw	r3,0(r2)
        goto split;
 200a614:	00008706 	br	200a834 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a618:	e1bff917 	ldw	r6,-28(fp)
 200a61c:	e17ffe17 	ldw	r5,-8(fp)
 200a620:	e13ff617 	ldw	r4,-40(fp)
 200a624:	2007ef80 	call	2007ef8 <memmove>
        goto split;
 200a628:	00008206 	br	200a834 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 200a62c:	e17fff17 	ldw	r5,-4(fp)
 200a630:	e13ffd17 	ldw	r4,-12(fp)
 200a634:	20070380 	call	2007038 <_malloc_r>
 200a638:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 200a63c:	e0bff617 	ldw	r2,-40(fp)
 200a640:	1000041e 	bne	r2,zero,200a654 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 200a644:	e13ffd17 	ldw	r4,-12(fp)
 200a648:	20106100 	call	2010610 <__malloc_unlock>
      return 0;
 200a64c:	0005883a 	mov	r2,zero
 200a650:	0000b106 	br	200a918 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 200a654:	e0bff617 	ldw	r2,-40(fp)
 200a658:	10bffe04 	addi	r2,r2,-8
 200a65c:	e0bfe315 	stw	r2,-116(fp)
 200a660:	e0bfef17 	ldw	r2,-68(fp)
 200a664:	10c00117 	ldw	r3,4(r2)
 200a668:	00bfff84 	movi	r2,-2
 200a66c:	1884703a 	and	r2,r3,r2
 200a670:	e0ffef17 	ldw	r3,-68(fp)
 200a674:	1885883a 	add	r2,r3,r2
 200a678:	e0ffe317 	ldw	r3,-116(fp)
 200a67c:	18800a1e 	bne	r3,r2,200a6a8 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 200a680:	e0bfe317 	ldw	r2,-116(fp)
 200a684:	10c00117 	ldw	r3,4(r2)
 200a688:	00bfff04 	movi	r2,-4
 200a68c:	1884703a 	and	r2,r3,r2
 200a690:	e0ffe417 	ldw	r3,-112(fp)
 200a694:	1885883a 	add	r2,r3,r2
 200a698:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 200a69c:	e0bfef17 	ldw	r2,-68(fp)
 200a6a0:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 200a6a4:	00006306 	br	200a834 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200a6a8:	e0bff017 	ldw	r2,-64(fp)
 200a6ac:	10bfff04 	addi	r2,r2,-4
 200a6b0:	e0bffa15 	stw	r2,-24(fp)
 200a6b4:	e0bffa17 	ldw	r2,-24(fp)
 200a6b8:	10800968 	cmpgeui	r2,r2,37
 200a6bc:	1000521e 	bne	r2,zero,200a808 <_realloc_r+0xacc>
 200a6c0:	e0bffe17 	ldw	r2,-8(fp)
 200a6c4:	e0bfed15 	stw	r2,-76(fp)
 200a6c8:	e0bff617 	ldw	r2,-40(fp)
 200a6cc:	e0bfee15 	stw	r2,-72(fp)
 200a6d0:	e0bffa17 	ldw	r2,-24(fp)
 200a6d4:	10800530 	cmpltui	r2,r2,20
 200a6d8:	1000361e 	bne	r2,zero,200a7b4 <_realloc_r+0xa78>
 200a6dc:	e0bfee17 	ldw	r2,-72(fp)
 200a6e0:	10c00104 	addi	r3,r2,4
 200a6e4:	e0ffee15 	stw	r3,-72(fp)
 200a6e8:	e0ffed17 	ldw	r3,-76(fp)
 200a6ec:	19000104 	addi	r4,r3,4
 200a6f0:	e13fed15 	stw	r4,-76(fp)
 200a6f4:	18c00017 	ldw	r3,0(r3)
 200a6f8:	10c00015 	stw	r3,0(r2)
 200a6fc:	e0bfee17 	ldw	r2,-72(fp)
 200a700:	10c00104 	addi	r3,r2,4
 200a704:	e0ffee15 	stw	r3,-72(fp)
 200a708:	e0ffed17 	ldw	r3,-76(fp)
 200a70c:	19000104 	addi	r4,r3,4
 200a710:	e13fed15 	stw	r4,-76(fp)
 200a714:	18c00017 	ldw	r3,0(r3)
 200a718:	10c00015 	stw	r3,0(r2)
 200a71c:	e0bffa17 	ldw	r2,-24(fp)
 200a720:	10800730 	cmpltui	r2,r2,28
 200a724:	1000231e 	bne	r2,zero,200a7b4 <_realloc_r+0xa78>
 200a728:	e0bfee17 	ldw	r2,-72(fp)
 200a72c:	10c00104 	addi	r3,r2,4
 200a730:	e0ffee15 	stw	r3,-72(fp)
 200a734:	e0ffed17 	ldw	r3,-76(fp)
 200a738:	19000104 	addi	r4,r3,4
 200a73c:	e13fed15 	stw	r4,-76(fp)
 200a740:	18c00017 	ldw	r3,0(r3)
 200a744:	10c00015 	stw	r3,0(r2)
 200a748:	e0bfee17 	ldw	r2,-72(fp)
 200a74c:	10c00104 	addi	r3,r2,4
 200a750:	e0ffee15 	stw	r3,-72(fp)
 200a754:	e0ffed17 	ldw	r3,-76(fp)
 200a758:	19000104 	addi	r4,r3,4
 200a75c:	e13fed15 	stw	r4,-76(fp)
 200a760:	18c00017 	ldw	r3,0(r3)
 200a764:	10c00015 	stw	r3,0(r2)
 200a768:	e0bffa17 	ldw	r2,-24(fp)
 200a76c:	10800930 	cmpltui	r2,r2,36
 200a770:	1000101e 	bne	r2,zero,200a7b4 <_realloc_r+0xa78>
 200a774:	e0bfee17 	ldw	r2,-72(fp)
 200a778:	10c00104 	addi	r3,r2,4
 200a77c:	e0ffee15 	stw	r3,-72(fp)
 200a780:	e0ffed17 	ldw	r3,-76(fp)
 200a784:	19000104 	addi	r4,r3,4
 200a788:	e13fed15 	stw	r4,-76(fp)
 200a78c:	18c00017 	ldw	r3,0(r3)
 200a790:	10c00015 	stw	r3,0(r2)
 200a794:	e0bfee17 	ldw	r2,-72(fp)
 200a798:	10c00104 	addi	r3,r2,4
 200a79c:	e0ffee15 	stw	r3,-72(fp)
 200a7a0:	e0ffed17 	ldw	r3,-76(fp)
 200a7a4:	19000104 	addi	r4,r3,4
 200a7a8:	e13fed15 	stw	r4,-76(fp)
 200a7ac:	18c00017 	ldw	r3,0(r3)
 200a7b0:	10c00015 	stw	r3,0(r2)
 200a7b4:	e0bfee17 	ldw	r2,-72(fp)
 200a7b8:	10c00104 	addi	r3,r2,4
 200a7bc:	e0ffee15 	stw	r3,-72(fp)
 200a7c0:	e0ffed17 	ldw	r3,-76(fp)
 200a7c4:	19000104 	addi	r4,r3,4
 200a7c8:	e13fed15 	stw	r4,-76(fp)
 200a7cc:	18c00017 	ldw	r3,0(r3)
 200a7d0:	10c00015 	stw	r3,0(r2)
 200a7d4:	e0bfee17 	ldw	r2,-72(fp)
 200a7d8:	10c00104 	addi	r3,r2,4
 200a7dc:	e0ffee15 	stw	r3,-72(fp)
 200a7e0:	e0ffed17 	ldw	r3,-76(fp)
 200a7e4:	19000104 	addi	r4,r3,4
 200a7e8:	e13fed15 	stw	r4,-76(fp)
 200a7ec:	18c00017 	ldw	r3,0(r3)
 200a7f0:	10c00015 	stw	r3,0(r2)
 200a7f4:	e0bfed17 	ldw	r2,-76(fp)
 200a7f8:	10c00017 	ldw	r3,0(r2)
 200a7fc:	e0bfee17 	ldw	r2,-72(fp)
 200a800:	10c00015 	stw	r3,0(r2)
 200a804:	00000406 	br	200a818 <_realloc_r+0xadc>
 200a808:	e1bffa17 	ldw	r6,-24(fp)
 200a80c:	e17ffe17 	ldw	r5,-8(fp)
 200a810:	e13ff617 	ldw	r4,-40(fp)
 200a814:	2007ef80 	call	2007ef8 <memmove>
    fREe(RCALL oldmem);
 200a818:	e17ffe17 	ldw	r5,-8(fp)
 200a81c:	e13ffd17 	ldw	r4,-12(fp)
 200a820:	20059f80 	call	20059f8 <_free_r>
    MALLOC_UNLOCK;
 200a824:	e13ffd17 	ldw	r4,-12(fp)
 200a828:	20106100 	call	2010610 <__malloc_unlock>
    return newmem;
 200a82c:	e0bff617 	ldw	r2,-40(fp)
 200a830:	00003906 	br	200a918 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 200a834:	e0ffe417 	ldw	r3,-112(fp)
 200a838:	e0bff117 	ldw	r2,-60(fp)
 200a83c:	1885c83a 	sub	r2,r3,r2
 200a840:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 200a844:	e0bffb17 	ldw	r2,-20(fp)
 200a848:	10800430 	cmpltui	r2,r2,16
 200a84c:	10001e1e 	bne	r2,zero,200a8c8 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 200a850:	e0ffe317 	ldw	r3,-116(fp)
 200a854:	e0bff117 	ldw	r2,-60(fp)
 200a858:	1885883a 	add	r2,r3,r2
 200a85c:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 200a860:	e0bfe317 	ldw	r2,-116(fp)
 200a864:	10800117 	ldw	r2,4(r2)
 200a868:	10c0004c 	andi	r3,r2,1
 200a86c:	e0bff117 	ldw	r2,-60(fp)
 200a870:	1886b03a 	or	r3,r3,r2
 200a874:	e0bfe317 	ldw	r2,-116(fp)
 200a878:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 200a87c:	e0bffb17 	ldw	r2,-20(fp)
 200a880:	10c00054 	ori	r3,r2,1
 200a884:	e0bffc17 	ldw	r2,-16(fp)
 200a888:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 200a88c:	e0fffc17 	ldw	r3,-16(fp)
 200a890:	e0bffb17 	ldw	r2,-20(fp)
 200a894:	1885883a 	add	r2,r3,r2
 200a898:	e13ffc17 	ldw	r4,-16(fp)
 200a89c:	e0fffb17 	ldw	r3,-20(fp)
 200a8a0:	20c7883a 	add	r3,r4,r3
 200a8a4:	18c00117 	ldw	r3,4(r3)
 200a8a8:	18c00054 	ori	r3,r3,1
 200a8ac:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 200a8b0:	e0bffc17 	ldw	r2,-16(fp)
 200a8b4:	10800204 	addi	r2,r2,8
 200a8b8:	100b883a 	mov	r5,r2
 200a8bc:	e13ffd17 	ldw	r4,-12(fp)
 200a8c0:	20059f80 	call	20059f8 <_free_r>
 200a8c4:	00001006 	br	200a908 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 200a8c8:	e0bfe317 	ldw	r2,-116(fp)
 200a8cc:	10800117 	ldw	r2,4(r2)
 200a8d0:	10c0004c 	andi	r3,r2,1
 200a8d4:	e0bfe417 	ldw	r2,-112(fp)
 200a8d8:	1886b03a 	or	r3,r3,r2
 200a8dc:	e0bfe317 	ldw	r2,-116(fp)
 200a8e0:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 200a8e4:	e0ffe317 	ldw	r3,-116(fp)
 200a8e8:	e0bfe417 	ldw	r2,-112(fp)
 200a8ec:	1885883a 	add	r2,r3,r2
 200a8f0:	e13fe317 	ldw	r4,-116(fp)
 200a8f4:	e0ffe417 	ldw	r3,-112(fp)
 200a8f8:	20c7883a 	add	r3,r4,r3
 200a8fc:	18c00117 	ldw	r3,4(r3)
 200a900:	18c00054 	ori	r3,r3,1
 200a904:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 200a908:	e13ffd17 	ldw	r4,-12(fp)
 200a90c:	20106100 	call	2010610 <__malloc_unlock>
  return chunk2mem(newp);
 200a910:	e0bfe317 	ldw	r2,-116(fp)
 200a914:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200a918:	e037883a 	mov	sp,fp
 200a91c:	dfc00117 	ldw	ra,4(sp)
 200a920:	df000017 	ldw	fp,0(sp)
 200a924:	dec00204 	addi	sp,sp,8
 200a928:	f800283a 	ret

0200a92c <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 200a92c:	defff904 	addi	sp,sp,-28
 200a930:	df000615 	stw	fp,24(sp)
 200a934:	df000604 	addi	fp,sp,24
 200a938:	e13ffe15 	stw	r4,-8(fp)
 200a93c:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 200a940:	e0bffe17 	ldw	r2,-8(fp)
 200a944:	e0bffc15 	stw	r2,-16(fp)
 200a948:	e0bfff17 	ldw	r2,-4(fp)
 200a94c:	e0bffd15 	stw	r2,-12(fp)
 200a950:	e0bffd17 	ldw	r2,-12(fp)
 200a954:	e0bffa15 	stw	r2,-24(fp)
 200a958:	e0bffc17 	ldw	r2,-16(fp)
 200a95c:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 200a960:	e0bffa17 	ldw	r2,-24(fp)
 200a964:	1000021e 	bne	r2,zero,200a970 <__fpclassifyd+0x44>
 200a968:	e0bffb17 	ldw	r2,-20(fp)
 200a96c:	10000526 	beq	r2,zero,200a984 <__fpclassifyd+0x58>
 200a970:	e0fffa17 	ldw	r3,-24(fp)
 200a974:	00a00034 	movhi	r2,32768
 200a978:	1880041e 	bne	r3,r2,200a98c <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 200a97c:	e0bffb17 	ldw	r2,-20(fp)
 200a980:	1000021e 	bne	r2,zero,200a98c <__fpclassifyd+0x60>
    return FP_ZERO;
 200a984:	00800084 	movi	r2,2
 200a988:	00002506 	br	200aa20 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 200a98c:	e0fffa17 	ldw	r3,-24(fp)
 200a990:	00800434 	movhi	r2,16
 200a994:	18800336 	bltu	r3,r2,200a9a4 <__fpclassifyd+0x78>
 200a998:	e0fffa17 	ldw	r3,-24(fp)
 200a99c:	009ffc34 	movhi	r2,32752
 200a9a0:	18800636 	bltu	r3,r2,200a9bc <__fpclassifyd+0x90>
 200a9a4:	e0fffa17 	ldw	r3,-24(fp)
 200a9a8:	00a00434 	movhi	r2,32784
 200a9ac:	18800536 	bltu	r3,r2,200a9c4 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 200a9b0:	e0fffa17 	ldw	r3,-24(fp)
 200a9b4:	00bffc34 	movhi	r2,65520
 200a9b8:	1880022e 	bgeu	r3,r2,200a9c4 <__fpclassifyd+0x98>
    return FP_NORMAL;
 200a9bc:	00800104 	movi	r2,4
 200a9c0:	00001706 	br	200aa20 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200a9c4:	e0fffa17 	ldw	r3,-24(fp)
 200a9c8:	00800434 	movhi	r2,16
 200a9cc:	18800536 	bltu	r3,r2,200a9e4 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200a9d0:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200a9d4:	1000050e 	bge	r2,zero,200a9ec <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200a9d8:	e0fffa17 	ldw	r3,-24(fp)
 200a9dc:	00a00434 	movhi	r2,32784
 200a9e0:	1880022e 	bgeu	r3,r2,200a9ec <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 200a9e4:	008000c4 	movi	r2,3
 200a9e8:	00000d06 	br	200aa20 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 200a9ec:	e0fffa17 	ldw	r3,-24(fp)
 200a9f0:	009ffc34 	movhi	r2,32752
 200a9f4:	1880021e 	bne	r3,r2,200aa00 <__fpclassifyd+0xd4>
 200a9f8:	e0bffb17 	ldw	r2,-20(fp)
 200a9fc:	10000526 	beq	r2,zero,200aa14 <__fpclassifyd+0xe8>
 200aa00:	e0fffa17 	ldw	r3,-24(fp)
 200aa04:	00bffc34 	movhi	r2,65520
 200aa08:	1880041e 	bne	r3,r2,200aa1c <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 200aa0c:	e0bffb17 	ldw	r2,-20(fp)
 200aa10:	1000021e 	bne	r2,zero,200aa1c <__fpclassifyd+0xf0>
    return FP_INFINITE;
 200aa14:	00800044 	movi	r2,1
 200aa18:	00000106 	br	200aa20 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 200aa1c:	0005883a 	mov	r2,zero
}
 200aa20:	e037883a 	mov	sp,fp
 200aa24:	df000017 	ldw	fp,0(sp)
 200aa28:	dec00104 	addi	sp,sp,4
 200aa2c:	f800283a 	ret

0200aa30 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 200aa30:	defffb04 	addi	sp,sp,-20
 200aa34:	dfc00415 	stw	ra,16(sp)
 200aa38:	df000315 	stw	fp,12(sp)
 200aa3c:	df000304 	addi	fp,sp,12
 200aa40:	e13ffe15 	stw	r4,-8(fp)
 200aa44:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 200aa48:	d026df15 	stw	zero,-25732(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 200aa4c:	e13fff17 	ldw	r4,-4(fp)
 200aa50:	20107d00 	call	20107d0 <sbrk>
 200aa54:	e0bffd15 	stw	r2,-12(fp)
 200aa58:	e0bffd17 	ldw	r2,-12(fp)
 200aa5c:	10bfffd8 	cmpnei	r2,r2,-1
 200aa60:	1000051e 	bne	r2,zero,200aa78 <_sbrk_r+0x48>
 200aa64:	d0a6df17 	ldw	r2,-25732(gp)
 200aa68:	10000326 	beq	r2,zero,200aa78 <_sbrk_r+0x48>
    ptr->_errno = errno;
 200aa6c:	d0e6df17 	ldw	r3,-25732(gp)
 200aa70:	e0bffe17 	ldw	r2,-8(fp)
 200aa74:	10c00015 	stw	r3,0(r2)
  return ret;
 200aa78:	e0bffd17 	ldw	r2,-12(fp)
}
 200aa7c:	e037883a 	mov	sp,fp
 200aa80:	dfc00117 	ldw	ra,4(sp)
 200aa84:	df000017 	ldw	fp,0(sp)
 200aa88:	dec00204 	addi	sp,sp,8
 200aa8c:	f800283a 	ret

0200aa90 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200aa90:	defff804 	addi	sp,sp,-32
 200aa94:	dfc00715 	stw	ra,28(sp)
 200aa98:	df000615 	stw	fp,24(sp)
 200aa9c:	dc400515 	stw	r17,20(sp)
 200aaa0:	dc000415 	stw	r16,16(sp)
 200aaa4:	df000604 	addi	fp,sp,24
 200aaa8:	e13ffa15 	stw	r4,-24(fp)
 200aaac:	e17ffb15 	stw	r5,-20(fp)
 200aab0:	e1bffc15 	stw	r6,-16(fp)
 200aab4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200aab8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 200aabc:	8080038b 	ldhu	r2,14(r16)
 200aac0:	10bfffcc 	andi	r2,r2,65535
 200aac4:	10a0001c 	xori	r2,r2,32768
 200aac8:	10a00004 	addi	r2,r2,-32768
 200aacc:	e0fffd17 	ldw	r3,-12(fp)
 200aad0:	180f883a 	mov	r7,r3
 200aad4:	e1bffc17 	ldw	r6,-16(fp)
 200aad8:	100b883a 	mov	r5,r2
 200aadc:	e13ffa17 	ldw	r4,-24(fp)
 200aae0:	200cb380 	call	200cb38 <_read_r>
 200aae4:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 200aae8:	88000416 	blt	r17,zero,200aafc <__sread+0x6c>
    fp->_offset += ret;
 200aaec:	80801417 	ldw	r2,80(r16)
 200aaf0:	1445883a 	add	r2,r2,r17
 200aaf4:	80801415 	stw	r2,80(r16)
 200aaf8:	00000406 	br	200ab0c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 200aafc:	80c0030b 	ldhu	r3,12(r16)
 200ab00:	00bbffc4 	movi	r2,-4097
 200ab04:	1884703a 	and	r2,r3,r2
 200ab08:	8080030d 	sth	r2,12(r16)
  return ret;
 200ab0c:	8805883a 	mov	r2,r17
}
 200ab10:	e6fffe04 	addi	sp,fp,-8
 200ab14:	dfc00317 	ldw	ra,12(sp)
 200ab18:	df000217 	ldw	fp,8(sp)
 200ab1c:	dc400117 	ldw	r17,4(sp)
 200ab20:	dc000017 	ldw	r16,0(sp)
 200ab24:	dec00404 	addi	sp,sp,16
 200ab28:	f800283a 	ret

0200ab2c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 200ab2c:	defffb04 	addi	sp,sp,-20
 200ab30:	df000415 	stw	fp,16(sp)
 200ab34:	df000404 	addi	fp,sp,16
 200ab38:	e13ffc15 	stw	r4,-16(fp)
 200ab3c:	e17ffd15 	stw	r5,-12(fp)
 200ab40:	e1bffe15 	stw	r6,-8(fp)
 200ab44:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 200ab48:	0005883a 	mov	r2,zero
}
 200ab4c:	e037883a 	mov	sp,fp
 200ab50:	df000017 	ldw	fp,0(sp)
 200ab54:	dec00104 	addi	sp,sp,4
 200ab58:	f800283a 	ret

0200ab5c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ab5c:	defff804 	addi	sp,sp,-32
 200ab60:	dfc00715 	stw	ra,28(sp)
 200ab64:	df000615 	stw	fp,24(sp)
 200ab68:	dc000515 	stw	r16,20(sp)
 200ab6c:	df000604 	addi	fp,sp,24
 200ab70:	e13ffb15 	stw	r4,-20(fp)
 200ab74:	e17ffc15 	stw	r5,-16(fp)
 200ab78:	e1bffd15 	stw	r6,-12(fp)
 200ab7c:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 200ab80:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 200ab84:	8080030b 	ldhu	r2,12(r16)
 200ab88:	10bfffcc 	andi	r2,r2,65535
 200ab8c:	1080400c 	andi	r2,r2,256
 200ab90:	10000926 	beq	r2,zero,200abb8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 200ab94:	8080038b 	ldhu	r2,14(r16)
 200ab98:	10bfffcc 	andi	r2,r2,65535
 200ab9c:	10a0001c 	xori	r2,r2,32768
 200aba0:	10a00004 	addi	r2,r2,-32768
 200aba4:	01c00084 	movi	r7,2
 200aba8:	000d883a 	mov	r6,zero
 200abac:	100b883a 	mov	r5,r2
 200abb0:	e13ffb17 	ldw	r4,-20(fp)
 200abb4:	200cac80 	call	200cac8 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 200abb8:	80c0030b 	ldhu	r3,12(r16)
 200abbc:	00bbffc4 	movi	r2,-4097
 200abc0:	1884703a 	and	r2,r3,r2
 200abc4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 200abc8:	8080038b 	ldhu	r2,14(r16)
 200abcc:	10bfffcc 	andi	r2,r2,65535
 200abd0:	10a0001c 	xori	r2,r2,32768
 200abd4:	10a00004 	addi	r2,r2,-32768
 200abd8:	e0fffe17 	ldw	r3,-8(fp)
 200abdc:	180f883a 	mov	r7,r3
 200abe0:	e1bffd17 	ldw	r6,-12(fp)
 200abe4:	100b883a 	mov	r5,r2
 200abe8:	e13ffb17 	ldw	r4,-20(fp)
 200abec:	200c3840 	call	200c384 <_write_r>
 200abf0:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 200abf4:	e0bffa17 	ldw	r2,-24(fp)
}
 200abf8:	e6ffff04 	addi	sp,fp,-4
 200abfc:	dfc00217 	ldw	ra,8(sp)
 200ac00:	df000117 	ldw	fp,4(sp)
 200ac04:	dc000017 	ldw	r16,0(sp)
 200ac08:	dec00304 	addi	sp,sp,12
 200ac0c:	f800283a 	ret

0200ac10 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 200ac10:	defff804 	addi	sp,sp,-32
 200ac14:	dfc00715 	stw	ra,28(sp)
 200ac18:	df000615 	stw	fp,24(sp)
 200ac1c:	dc400515 	stw	r17,20(sp)
 200ac20:	dc000415 	stw	r16,16(sp)
 200ac24:	df000604 	addi	fp,sp,24
 200ac28:	e13ffa15 	stw	r4,-24(fp)
 200ac2c:	e17ffb15 	stw	r5,-20(fp)
 200ac30:	e1bffc15 	stw	r6,-16(fp)
 200ac34:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200ac38:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 200ac3c:	8080038b 	ldhu	r2,14(r16)
 200ac40:	10bfffcc 	andi	r2,r2,65535
 200ac44:	10a0001c 	xori	r2,r2,32768
 200ac48:	10a00004 	addi	r2,r2,-32768
 200ac4c:	e1fffd17 	ldw	r7,-12(fp)
 200ac50:	e1bffc17 	ldw	r6,-16(fp)
 200ac54:	100b883a 	mov	r5,r2
 200ac58:	e13ffa17 	ldw	r4,-24(fp)
 200ac5c:	200cac80 	call	200cac8 <_lseek_r>
 200ac60:	1023883a 	mov	r17,r2
  if (ret == -1L)
 200ac64:	88bfffd8 	cmpnei	r2,r17,-1
 200ac68:	1000051e 	bne	r2,zero,200ac80 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 200ac6c:	80c0030b 	ldhu	r3,12(r16)
 200ac70:	00bbffc4 	movi	r2,-4097
 200ac74:	1884703a 	and	r2,r3,r2
 200ac78:	8080030d 	sth	r2,12(r16)
 200ac7c:	00000406 	br	200ac90 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 200ac80:	8080030b 	ldhu	r2,12(r16)
 200ac84:	10840014 	ori	r2,r2,4096
 200ac88:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 200ac8c:	84401415 	stw	r17,80(r16)
    }
  return ret;
 200ac90:	8805883a 	mov	r2,r17
}
 200ac94:	e6fffe04 	addi	sp,fp,-8
 200ac98:	dfc00317 	ldw	ra,12(sp)
 200ac9c:	df000217 	ldw	fp,8(sp)
 200aca0:	dc400117 	ldw	r17,4(sp)
 200aca4:	dc000017 	ldw	r16,0(sp)
 200aca8:	dec00404 	addi	sp,sp,16
 200acac:	f800283a 	ret

0200acb0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 200acb0:	defffb04 	addi	sp,sp,-20
 200acb4:	dfc00415 	stw	ra,16(sp)
 200acb8:	df000315 	stw	fp,12(sp)
 200acbc:	df000304 	addi	fp,sp,12
 200acc0:	e13ffe15 	stw	r4,-8(fp)
 200acc4:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 200acc8:	e0bfff17 	ldw	r2,-4(fp)
 200accc:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 200acd0:	e0bffd17 	ldw	r2,-12(fp)
 200acd4:	1080038b 	ldhu	r2,14(r2)
 200acd8:	10bfffcc 	andi	r2,r2,65535
 200acdc:	10a0001c 	xori	r2,r2,32768
 200ace0:	10a00004 	addi	r2,r2,-32768
 200ace4:	100b883a 	mov	r5,r2
 200ace8:	e13ffe17 	ldw	r4,-8(fp)
 200acec:	200c3f40 	call	200c3f4 <_close_r>
}
 200acf0:	e037883a 	mov	sp,fp
 200acf4:	dfc00117 	ldw	ra,4(sp)
 200acf8:	df000017 	ldw	fp,0(sp)
 200acfc:	dec00204 	addi	sp,sp,8
 200ad00:	f800283a 	ret

0200ad04 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 200ad04:	defffb04 	addi	sp,sp,-20
 200ad08:	df000415 	stw	fp,16(sp)
 200ad0c:	df000404 	addi	fp,sp,16
 200ad10:	e13ffe15 	stw	r4,-8(fp)
 200ad14:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 200ad18:	e0fffe17 	ldw	r3,-8(fp)
 200ad1c:	e0bfff17 	ldw	r2,-4(fp)
 200ad20:	1884b03a 	or	r2,r3,r2
 200ad24:	108000cc 	andi	r2,r2,3
 200ad28:	10002a1e 	bne	r2,zero,200add4 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 200ad2c:	e0bffe17 	ldw	r2,-8(fp)
 200ad30:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 200ad34:	e0bfff17 	ldw	r2,-4(fp)
 200ad38:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 200ad3c:	00001506 	br	200ad94 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 200ad40:	e0bffc17 	ldw	r2,-16(fp)
 200ad44:	10c00017 	ldw	r3,0(r2)
 200ad48:	00bfbff4 	movhi	r2,65279
 200ad4c:	10bfbfc4 	addi	r2,r2,-257
 200ad50:	1887883a 	add	r3,r3,r2
 200ad54:	e0bffc17 	ldw	r2,-16(fp)
 200ad58:	10800017 	ldw	r2,0(r2)
 200ad5c:	0084303a 	nor	r2,zero,r2
 200ad60:	1886703a 	and	r3,r3,r2
 200ad64:	00a02074 	movhi	r2,32897
 200ad68:	10a02004 	addi	r2,r2,-32640
 200ad6c:	1884703a 	and	r2,r3,r2
 200ad70:	10000226 	beq	r2,zero,200ad7c <strcmp+0x78>
	    return 0;
 200ad74:	0005883a 	mov	r2,zero
 200ad78:	00002e06 	br	200ae34 <strcmp+0x130>

          a1++;
 200ad7c:	e0bffc17 	ldw	r2,-16(fp)
 200ad80:	10800104 	addi	r2,r2,4
 200ad84:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 200ad88:	e0bffd17 	ldw	r2,-12(fp)
 200ad8c:	10800104 	addi	r2,r2,4
 200ad90:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 200ad94:	e0bffc17 	ldw	r2,-16(fp)
 200ad98:	10c00017 	ldw	r3,0(r2)
 200ad9c:	e0bffd17 	ldw	r2,-12(fp)
 200ada0:	10800017 	ldw	r2,0(r2)
 200ada4:	18bfe626 	beq	r3,r2,200ad40 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 200ada8:	e0bffc17 	ldw	r2,-16(fp)
 200adac:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 200adb0:	e0bffd17 	ldw	r2,-12(fp)
 200adb4:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 200adb8:	00000606 	br	200add4 <strcmp+0xd0>
    {
      s1++;
 200adbc:	e0bffe17 	ldw	r2,-8(fp)
 200adc0:	10800044 	addi	r2,r2,1
 200adc4:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 200adc8:	e0bfff17 	ldw	r2,-4(fp)
 200adcc:	10800044 	addi	r2,r2,1
 200add0:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 200add4:	e0bffe17 	ldw	r2,-8(fp)
 200add8:	10800003 	ldbu	r2,0(r2)
 200addc:	10803fcc 	andi	r2,r2,255
 200ade0:	1080201c 	xori	r2,r2,128
 200ade4:	10bfe004 	addi	r2,r2,-128
 200ade8:	10000b26 	beq	r2,zero,200ae18 <strcmp+0x114>
 200adec:	e0bffe17 	ldw	r2,-8(fp)
 200adf0:	10c00003 	ldbu	r3,0(r2)
 200adf4:	e0bfff17 	ldw	r2,-4(fp)
 200adf8:	10800003 	ldbu	r2,0(r2)
 200adfc:	18c03fcc 	andi	r3,r3,255
 200ae00:	18c0201c 	xori	r3,r3,128
 200ae04:	18ffe004 	addi	r3,r3,-128
 200ae08:	10803fcc 	andi	r2,r2,255
 200ae0c:	1080201c 	xori	r2,r2,128
 200ae10:	10bfe004 	addi	r2,r2,-128
 200ae14:	18bfe926 	beq	r3,r2,200adbc <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 200ae18:	e0bffe17 	ldw	r2,-8(fp)
 200ae1c:	10800003 	ldbu	r2,0(r2)
 200ae20:	10c03fcc 	andi	r3,r2,255
 200ae24:	e0bfff17 	ldw	r2,-4(fp)
 200ae28:	10800003 	ldbu	r2,0(r2)
 200ae2c:	10803fcc 	andi	r2,r2,255
 200ae30:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200ae34:	e037883a 	mov	sp,fp
 200ae38:	df000017 	ldw	fp,0(sp)
 200ae3c:	dec00104 	addi	sp,sp,4
 200ae40:	f800283a 	ret

0200ae44 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 200ae44:	defff604 	addi	sp,sp,-40
 200ae48:	dfc00915 	stw	ra,36(sp)
 200ae4c:	df000815 	stw	fp,32(sp)
 200ae50:	dc400715 	stw	r17,28(sp)
 200ae54:	dc000615 	stw	r16,24(sp)
 200ae58:	df000804 	addi	fp,sp,32
 200ae5c:	e13ffc15 	stw	r4,-16(fp)
 200ae60:	e17ffd15 	stw	r5,-12(fp)
 200ae64:	3021883a 	mov	r16,r6
	register int err = 0;
 200ae68:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 200ae6c:	80800217 	ldw	r2,8(r16)
 200ae70:	1000031e 	bne	r2,zero,200ae80 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 200ae74:	80000115 	stw	zero,4(r16)
		return (0);
 200ae78:	0005883a 	mov	r2,zero
 200ae7c:	00003906 	br	200af64 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 200ae80:	e0bffd17 	ldw	r2,-12(fp)
 200ae84:	10801917 	ldw	r2,100(r2)
 200ae88:	1088000c 	andi	r2,r2,8192
 200ae8c:	10002d26 	beq	r2,zero,200af44 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 200ae90:	80800017 	ldw	r2,0(r16)
 200ae94:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 200ae98:	00002706 	br	200af38 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 200ae9c:	e0bff817 	ldw	r2,-32(fp)
 200aea0:	10800017 	ldw	r2,0(r2)
 200aea4:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 200aea8:	e0bff817 	ldw	r2,-32(fp)
 200aeac:	10800117 	ldw	r2,4(r2)
 200aeb0:	1004d0ba 	srli	r2,r2,2
 200aeb4:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 200aeb8:	e03ff915 	stw	zero,-28(fp)
 200aebc:	00001206 	br	200af08 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 200aec0:	e0bff917 	ldw	r2,-28(fp)
 200aec4:	1085883a 	add	r2,r2,r2
 200aec8:	1085883a 	add	r2,r2,r2
 200aecc:	1007883a 	mov	r3,r2
 200aed0:	e0bffa17 	ldw	r2,-24(fp)
 200aed4:	10c5883a 	add	r2,r2,r3
 200aed8:	10800017 	ldw	r2,0(r2)
 200aedc:	e1bffd17 	ldw	r6,-12(fp)
 200aee0:	100b883a 	mov	r5,r2
 200aee4:	e13ffc17 	ldw	r4,-16(fp)
 200aee8:	200c9100 	call	200c910 <_fputwc_r>
 200aeec:	10bfffd8 	cmpnei	r2,r2,-1
 200aef0:	1000021e 	bne	r2,zero,200aefc <__sprint_r+0xb8>
					err = -1;
 200aef4:	047fffc4 	movi	r17,-1
					goto out;
 200aef8:	00001706 	br	200af58 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 200aefc:	e0bff917 	ldw	r2,-28(fp)
 200af00:	10800044 	addi	r2,r2,1
 200af04:	e0bff915 	stw	r2,-28(fp)
 200af08:	e0fff917 	ldw	r3,-28(fp)
 200af0c:	e0bffb17 	ldw	r2,-20(fp)
 200af10:	18bfeb16 	blt	r3,r2,200aec0 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 200af14:	80c00217 	ldw	r3,8(r16)
 200af18:	e0bffb17 	ldw	r2,-20(fp)
 200af1c:	1085883a 	add	r2,r2,r2
 200af20:	1085883a 	add	r2,r2,r2
 200af24:	1885c83a 	sub	r2,r3,r2
 200af28:	80800215 	stw	r2,8(r16)
 200af2c:	e0bff817 	ldw	r2,-32(fp)
 200af30:	10800204 	addi	r2,r2,8
 200af34:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 200af38:	80800217 	ldw	r2,8(r16)
 200af3c:	103fd71e 	bne	r2,zero,200ae9c <__sprint_r+0x58>
 200af40:	00000506 	br	200af58 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 200af44:	800d883a 	mov	r6,r16
 200af48:	e17ffd17 	ldw	r5,-12(fp)
 200af4c:	e13ffc17 	ldw	r4,-16(fp)
 200af50:	20061240 	call	2006124 <__sfvwrite_r>
 200af54:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 200af58:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 200af5c:	80000115 	stw	zero,4(r16)
	return (err);
 200af60:	8805883a 	mov	r2,r17
}
 200af64:	e6fffe04 	addi	sp,fp,-8
 200af68:	dfc00317 	ldw	ra,12(sp)
 200af6c:	df000217 	ldw	fp,8(sp)
 200af70:	dc400117 	ldw	r17,4(sp)
 200af74:	dc000017 	ldw	r16,0(sp)
 200af78:	dec00404 	addi	sp,sp,16
 200af7c:	f800283a 	ret

0200af80 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200af80:	defedf04 	addi	sp,sp,-1156
 200af84:	dfc12015 	stw	ra,1152(sp)
 200af88:	df011f15 	stw	fp,1148(sp)
 200af8c:	dc011e15 	stw	r16,1144(sp)
 200af90:	df011f04 	addi	fp,sp,1148
 200af94:	e13ffc15 	stw	r4,-16(fp)
 200af98:	2821883a 	mov	r16,r5
 200af9c:	e1bffd15 	stw	r6,-12(fp)
 200afa0:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200afa4:	80c0030b 	ldhu	r3,12(r16)
 200afa8:	00bfff44 	movi	r2,-3
 200afac:	1884703a 	and	r2,r3,r2
 200afb0:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200afb4:	80801917 	ldw	r2,100(r16)
 200afb8:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200afbc:	8080038b 	ldhu	r2,14(r16)
 200afc0:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200afc4:	80800717 	ldw	r2,28(r16)
 200afc8:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200afcc:	80800917 	ldw	r2,36(r16)
 200afd0:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200afd4:	e0befc04 	addi	r2,fp,-1040
 200afd8:	e0bee215 	stw	r2,-1144(fp)
 200afdc:	e0bee217 	ldw	r2,-1144(fp)
 200afe0:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200afe4:	00810004 	movi	r2,1024
 200afe8:	e0bee415 	stw	r2,-1136(fp)
 200afec:	e0bee417 	ldw	r2,-1136(fp)
 200aff0:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200aff4:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200aff8:	e0bee204 	addi	r2,fp,-1144
 200affc:	e1fffe17 	ldw	r7,-8(fp)
 200b000:	e1bffd17 	ldw	r6,-12(fp)
 200b004:	100b883a 	mov	r5,r2
 200b008:	e13ffc17 	ldw	r4,-16(fp)
 200b00c:	200b0c00 	call	200b0c0 <___vfiprintf_internal_r>
 200b010:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200b014:	e0bee117 	ldw	r2,-1148(fp)
 200b018:	10000716 	blt	r2,zero,200b038 <__sbprintf+0xb8>
 200b01c:	e0bee204 	addi	r2,fp,-1144
 200b020:	100b883a 	mov	r5,r2
 200b024:	e13ffc17 	ldw	r4,-16(fp)
 200b028:	20053580 	call	2005358 <_fflush_r>
 200b02c:	10000226 	beq	r2,zero,200b038 <__sbprintf+0xb8>
		ret = EOF;
 200b030:	00bfffc4 	movi	r2,-1
 200b034:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200b038:	e0bee50b 	ldhu	r2,-1132(fp)
 200b03c:	10bfffcc 	andi	r2,r2,65535
 200b040:	1080100c 	andi	r2,r2,64
 200b044:	10000326 	beq	r2,zero,200b054 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200b048:	8080030b 	ldhu	r2,12(r16)
 200b04c:	10801014 	ori	r2,r2,64
 200b050:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200b054:	e0bee117 	ldw	r2,-1148(fp)
}
 200b058:	e6ffff04 	addi	sp,fp,-4
 200b05c:	dfc00217 	ldw	ra,8(sp)
 200b060:	df000117 	ldw	fp,4(sp)
 200b064:	dc000017 	ldw	r16,0(sp)
 200b068:	dec00304 	addi	sp,sp,12
 200b06c:	f800283a 	ret

0200b070 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200b070:	defffa04 	addi	sp,sp,-24
 200b074:	dfc00515 	stw	ra,20(sp)
 200b078:	df000415 	stw	fp,16(sp)
 200b07c:	df000404 	addi	fp,sp,16
 200b080:	e13ffd15 	stw	r4,-12(fp)
 200b084:	e17ffe15 	stw	r5,-8(fp)
 200b088:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200b08c:	d0a00017 	ldw	r2,-32768(gp)
 200b090:	e1ffff17 	ldw	r7,-4(fp)
 200b094:	e1bffe17 	ldw	r6,-8(fp)
 200b098:	e17ffd17 	ldw	r5,-12(fp)
 200b09c:	1009883a 	mov	r4,r2
 200b0a0:	200b0c00 	call	200b0c0 <___vfiprintf_internal_r>
 200b0a4:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200b0a8:	e0bffc17 	ldw	r2,-16(fp)
}
 200b0ac:	e037883a 	mov	sp,fp
 200b0b0:	dfc00117 	ldw	ra,4(sp)
 200b0b4:	df000017 	ldw	fp,0(sp)
 200b0b8:	dec00204 	addi	sp,sp,8
 200b0bc:	f800283a 	ret

0200b0c0 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200b0c0:	deffb704 	addi	sp,sp,-292
 200b0c4:	dfc04815 	stw	ra,288(sp)
 200b0c8:	df004715 	stw	fp,284(sp)
 200b0cc:	ddc04615 	stw	r23,280(sp)
 200b0d0:	dd804515 	stw	r22,276(sp)
 200b0d4:	dd404415 	stw	r21,272(sp)
 200b0d8:	dd004315 	stw	r20,268(sp)
 200b0dc:	dcc04215 	stw	r19,264(sp)
 200b0e0:	dc804115 	stw	r18,260(sp)
 200b0e4:	dc404015 	stw	r17,256(sp)
 200b0e8:	dc003f15 	stw	r16,252(sp)
 200b0ec:	df004704 	addi	fp,sp,284
 200b0f0:	e13fe615 	stw	r4,-104(fp)
 200b0f4:	e17fe715 	stw	r5,-100(fp)
 200b0f8:	e1bfe815 	stw	r6,-96(fp)
 200b0fc:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200b100:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200b104:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200b108:	e0bfe617 	ldw	r2,-104(fp)
 200b10c:	e0bfc415 	stw	r2,-240(fp)
 200b110:	e0bfc417 	ldw	r2,-240(fp)
 200b114:	10000526 	beq	r2,zero,200b12c <___vfiprintf_internal_r+0x6c>
 200b118:	e0bfc417 	ldw	r2,-240(fp)
 200b11c:	10800e17 	ldw	r2,56(r2)
 200b120:	1000021e 	bne	r2,zero,200b12c <___vfiprintf_internal_r+0x6c>
 200b124:	e13fc417 	ldw	r4,-240(fp)
 200b128:	20057d80 	call	20057d8 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200b12c:	e0bfe717 	ldw	r2,-100(fp)
 200b130:	1080030b 	ldhu	r2,12(r2)
 200b134:	10bfffcc 	andi	r2,r2,65535
 200b138:	1088000c 	andi	r2,r2,8192
 200b13c:	10000c1e 	bne	r2,zero,200b170 <___vfiprintf_internal_r+0xb0>
 200b140:	e0bfe717 	ldw	r2,-100(fp)
 200b144:	1080030b 	ldhu	r2,12(r2)
 200b148:	10880014 	ori	r2,r2,8192
 200b14c:	1007883a 	mov	r3,r2
 200b150:	e0bfe717 	ldw	r2,-100(fp)
 200b154:	10c0030d 	sth	r3,12(r2)
 200b158:	e0bfe717 	ldw	r2,-100(fp)
 200b15c:	10c01917 	ldw	r3,100(r2)
 200b160:	00b7ffc4 	movi	r2,-8193
 200b164:	1886703a 	and	r3,r3,r2
 200b168:	e0bfe717 	ldw	r2,-100(fp)
 200b16c:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200b170:	e0bfe717 	ldw	r2,-100(fp)
 200b174:	1080030b 	ldhu	r2,12(r2)
 200b178:	10bfffcc 	andi	r2,r2,65535
 200b17c:	1080020c 	andi	r2,r2,8
 200b180:	10000326 	beq	r2,zero,200b190 <___vfiprintf_internal_r+0xd0>
 200b184:	e0bfe717 	ldw	r2,-100(fp)
 200b188:	10800417 	ldw	r2,16(r2)
 200b18c:	1000061e 	bne	r2,zero,200b1a8 <___vfiprintf_internal_r+0xe8>
 200b190:	e17fe717 	ldw	r5,-100(fp)
 200b194:	e13fe617 	ldw	r4,-104(fp)
 200b198:	2002f880 	call	2002f88 <__swsetup_r>
 200b19c:	10000226 	beq	r2,zero,200b1a8 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200b1a0:	00bfffc4 	movi	r2,-1
 200b1a4:	00046a06 	br	200c350 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200b1a8:	e0bfe717 	ldw	r2,-100(fp)
 200b1ac:	1080030b 	ldhu	r2,12(r2)
 200b1b0:	10bfffcc 	andi	r2,r2,65535
 200b1b4:	1080068c 	andi	r2,r2,26
 200b1b8:	10800298 	cmpnei	r2,r2,10
 200b1bc:	10000c1e 	bne	r2,zero,200b1f0 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 200b1c0:	e0bfe717 	ldw	r2,-100(fp)
 200b1c4:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200b1c8:	10bfffcc 	andi	r2,r2,65535
 200b1cc:	10a0001c 	xori	r2,r2,32768
 200b1d0:	10a00004 	addi	r2,r2,-32768
 200b1d4:	10000616 	blt	r2,zero,200b1f0 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200b1d8:	e1ffe917 	ldw	r7,-92(fp)
 200b1dc:	e1bfe817 	ldw	r6,-96(fp)
 200b1e0:	e17fe717 	ldw	r5,-100(fp)
 200b1e4:	e13fe617 	ldw	r4,-104(fp)
 200b1e8:	200af800 	call	200af80 <__sbprintf>
 200b1ec:	00045806 	br	200c350 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200b1f0:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200b1f4:	e4bfcb04 	addi	r18,fp,-212
 200b1f8:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 200b1fc:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200b200:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200b204:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200b208:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200b20c:	00000106 	br	200b214 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 200b210:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200b214:	a8800003 	ldbu	r2,0(r21)
 200b218:	10803fcc 	andi	r2,r2,255
 200b21c:	1080201c 	xori	r2,r2,128
 200b220:	10bfe004 	addi	r2,r2,-128
 200b224:	10000626 	beq	r2,zero,200b240 <___vfiprintf_internal_r+0x180>
 200b228:	a8800003 	ldbu	r2,0(r21)
 200b22c:	10803fcc 	andi	r2,r2,255
 200b230:	1080201c 	xori	r2,r2,128
 200b234:	10bfe004 	addi	r2,r2,-128
 200b238:	10800958 	cmpnei	r2,r2,37
 200b23c:	103ff41e 	bne	r2,zero,200b210 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200b240:	a807883a 	mov	r3,r21
 200b244:	a005883a 	mov	r2,r20
 200b248:	18a1c83a 	sub	r16,r3,r2
 200b24c:	80001826 	beq	r16,zero,200b2b0 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 200b250:	95000015 	stw	r20,0(r18)
 200b254:	8005883a 	mov	r2,r16
 200b258:	90800115 	stw	r2,4(r18)
 200b25c:	e0bfca17 	ldw	r2,-216(fp)
 200b260:	8007883a 	mov	r3,r16
 200b264:	10c5883a 	add	r2,r2,r3
 200b268:	e0bfca15 	stw	r2,-216(fp)
 200b26c:	94800204 	addi	r18,r18,8
 200b270:	e0bfc917 	ldw	r2,-220(fp)
 200b274:	10800044 	addi	r2,r2,1
 200b278:	e0bfc915 	stw	r2,-220(fp)
 200b27c:	e0bfc917 	ldw	r2,-220(fp)
 200b280:	10800210 	cmplti	r2,r2,8
 200b284:	1000071e 	bne	r2,zero,200b2a4 <___vfiprintf_internal_r+0x1e4>
 200b288:	e0bfc804 	addi	r2,fp,-224
 200b28c:	100d883a 	mov	r6,r2
 200b290:	e17fe717 	ldw	r5,-100(fp)
 200b294:	e13fe617 	ldw	r4,-104(fp)
 200b298:	200ae440 	call	200ae44 <__sprint_r>
 200b29c:	1004031e 	bne	r2,zero,200c2ac <___vfiprintf_internal_r+0x11ec>
 200b2a0:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 200b2a4:	e0bfb917 	ldw	r2,-284(fp)
 200b2a8:	1405883a 	add	r2,r2,r16
 200b2ac:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200b2b0:	a8800003 	ldbu	r2,0(r21)
 200b2b4:	10803fcc 	andi	r2,r2,255
 200b2b8:	1080201c 	xori	r2,r2,128
 200b2bc:	10bfe004 	addi	r2,r2,-128
 200b2c0:	1003ec26 	beq	r2,zero,200c274 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 200b2c4:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 200b2c8:	ad400044 	addi	r21,r21,1

		flags = 0;
 200b2cc:	0027883a 	mov	r19,zero
		dprec = 0;
 200b2d0:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 200b2d4:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 200b2d8:	00bfffc4 	movi	r2,-1
 200b2dc:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 200b2e0:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200b2e4:	a805883a 	mov	r2,r21
 200b2e8:	15400044 	addi	r21,r2,1
 200b2ec:	10800003 	ldbu	r2,0(r2)
 200b2f0:	14403fcc 	andi	r17,r2,255
 200b2f4:	8c40201c 	xori	r17,r17,128
 200b2f8:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 200b2fc:	88bff804 	addi	r2,r17,-32
 200b300:	10c01668 	cmpgeui	r3,r2,89
 200b304:	1802881e 	bne	r3,zero,200bd28 <___vfiprintf_internal_r+0xc68>
 200b308:	100690ba 	slli	r3,r2,2
 200b30c:	00808074 	movhi	r2,513
 200b310:	10acc804 	addi	r2,r2,-19680
 200b314:	1885883a 	add	r2,r3,r2
 200b318:	10800017 	ldw	r2,0(r2)
 200b31c:	1000683a 	jmp	r2
 200b320:	0200b484 	movi	r8,722
 200b324:	0200bd28 	cmpgeui	r8,zero,756
 200b328:	0200bd28 	cmpgeui	r8,zero,756
 200b32c:	0200b4a4 	muli	r8,zero,722
 200b330:	0200bd28 	cmpgeui	r8,zero,756
 200b334:	0200bd28 	cmpgeui	r8,zero,756
 200b338:	0200bd28 	cmpgeui	r8,zero,756
 200b33c:	0200bd28 	cmpgeui	r8,zero,756
 200b340:	0200bd28 	cmpgeui	r8,zero,756
 200b344:	0200bd28 	cmpgeui	r8,zero,756
 200b348:	0200b4ac 	andhi	r8,zero,722
 200b34c:	0200b4e0 	cmpeqi	r8,zero,723
 200b350:	0200bd28 	cmpgeui	r8,zero,756
 200b354:	0200b4d8 	cmpnei	r8,zero,723
 200b358:	0200b4ec 	andhi	r8,zero,723
 200b35c:	0200bd28 	cmpgeui	r8,zero,756
 200b360:	0200b580 	call	200b58 <__alt_mem_mem_Nios_PI+0xb58>
 200b364:	0200b588 	cmpgei	r8,zero,726
 200b368:	0200b588 	cmpgei	r8,zero,726
 200b36c:	0200b588 	cmpgei	r8,zero,726
 200b370:	0200b588 	cmpgei	r8,zero,726
 200b374:	0200b588 	cmpgei	r8,zero,726
 200b378:	0200b588 	cmpgei	r8,zero,726
 200b37c:	0200b588 	cmpgei	r8,zero,726
 200b380:	0200b588 	cmpgei	r8,zero,726
 200b384:	0200b588 	cmpgei	r8,zero,726
 200b388:	0200bd28 	cmpgeui	r8,zero,756
 200b38c:	0200bd28 	cmpgeui	r8,zero,756
 200b390:	0200bd28 	cmpgeui	r8,zero,756
 200b394:	0200bd28 	cmpgeui	r8,zero,756
 200b398:	0200bd28 	cmpgeui	r8,zero,756
 200b39c:	0200bd28 	cmpgeui	r8,zero,756
 200b3a0:	0200bd28 	cmpgeui	r8,zero,756
 200b3a4:	0200bd28 	cmpgeui	r8,zero,756
 200b3a8:	0200bd28 	cmpgeui	r8,zero,756
 200b3ac:	0200bd28 	cmpgeui	r8,zero,756
 200b3b0:	0200b628 	cmpgeui	r8,zero,728
 200b3b4:	0200bd28 	cmpgeui	r8,zero,756
 200b3b8:	0200bd28 	cmpgeui	r8,zero,756
 200b3bc:	0200bd28 	cmpgeui	r8,zero,756
 200b3c0:	0200bd28 	cmpgeui	r8,zero,756
 200b3c4:	0200bd28 	cmpgeui	r8,zero,756
 200b3c8:	0200bd28 	cmpgeui	r8,zero,756
 200b3cc:	0200bd28 	cmpgeui	r8,zero,756
 200b3d0:	0200bd28 	cmpgeui	r8,zero,756
 200b3d4:	0200bd28 	cmpgeui	r8,zero,756
 200b3d8:	0200bd28 	cmpgeui	r8,zero,756
 200b3dc:	0200b7c8 	cmpgei	r8,zero,735
 200b3e0:	0200bd28 	cmpgeui	r8,zero,756
 200b3e4:	0200bd28 	cmpgeui	r8,zero,756
 200b3e8:	0200bd28 	cmpgeui	r8,zero,756
 200b3ec:	0200bd28 	cmpgeui	r8,zero,756
 200b3f0:	0200bd28 	cmpgeui	r8,zero,756
 200b3f4:	0200b944 	movi	r8,741
 200b3f8:	0200bd28 	cmpgeui	r8,zero,756
 200b3fc:	0200bd28 	cmpgeui	r8,zero,756
 200b400:	0200ba04 	movi	r8,744
 200b404:	0200bd28 	cmpgeui	r8,zero,756
 200b408:	0200bd28 	cmpgeui	r8,zero,756
 200b40c:	0200bd28 	cmpgeui	r8,zero,756
 200b410:	0200bd28 	cmpgeui	r8,zero,756
 200b414:	0200bd28 	cmpgeui	r8,zero,756
 200b418:	0200bd28 	cmpgeui	r8,zero,756
 200b41c:	0200bd28 	cmpgeui	r8,zero,756
 200b420:	0200bd28 	cmpgeui	r8,zero,756
 200b424:	0200bd28 	cmpgeui	r8,zero,756
 200b428:	0200bd28 	cmpgeui	r8,zero,756
 200b42c:	0200b600 	call	200b60 <__alt_mem_mem_Nios_PI+0xb60>
 200b430:	0200b62c 	andhi	r8,zero,728
 200b434:	0200bd28 	cmpgeui	r8,zero,756
 200b438:	0200bd28 	cmpgeui	r8,zero,756
 200b43c:	0200bd28 	cmpgeui	r8,zero,756
 200b440:	0200b5c4 	movi	r8,727
 200b444:	0200b62c 	andhi	r8,zero,728
 200b448:	0200bd28 	cmpgeui	r8,zero,756
 200b44c:	0200bd28 	cmpgeui	r8,zero,756
 200b450:	0200b5cc 	andi	r8,zero,727
 200b454:	0200bd28 	cmpgeui	r8,zero,756
 200b458:	0200b728 	cmpgeui	r8,zero,732
 200b45c:	0200b7cc 	andi	r8,zero,735
 200b460:	0200b86c 	andhi	r8,zero,737
 200b464:	0200b5f8 	rdprs	r8,zero,727
 200b468:	0200bd28 	cmpgeui	r8,zero,756
 200b46c:	0200b8b4 	movhi	r8,738
 200b470:	0200bd28 	cmpgeui	r8,zero,756
 200b474:	0200b948 	cmpgei	r8,zero,741
 200b478:	0200bd28 	cmpgeui	r8,zero,756
 200b47c:	0200bd28 	cmpgeui	r8,zero,756
 200b480:	0200ba14 	movui	r8,744
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200b484:	e0bfc703 	ldbu	r2,-228(fp)
 200b488:	10803fcc 	andi	r2,r2,255
 200b48c:	1080201c 	xori	r2,r2,128
 200b490:	10bfe004 	addi	r2,r2,-128
 200b494:	103f931e 	bne	r2,zero,200b2e4 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 200b498:	00800804 	movi	r2,32
 200b49c:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200b4a0:	003f9006 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 200b4a4:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200b4a8:	003f8e06 	br	200b2e4 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200b4ac:	e0bfe917 	ldw	r2,-92(fp)
 200b4b0:	10c00104 	addi	r3,r2,4
 200b4b4:	e0ffe915 	stw	r3,-92(fp)
 200b4b8:	10800017 	ldw	r2,0(r2)
 200b4bc:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200b4c0:	e0bfba17 	ldw	r2,-280(fp)
 200b4c4:	10000116 	blt	r2,zero,200b4cc <___vfiprintf_internal_r+0x40c>
				goto rflag;
 200b4c8:	003f8606 	br	200b2e4 <___vfiprintf_internal_r+0x224>
			width = -width;
 200b4cc:	e0bfba17 	ldw	r2,-280(fp)
 200b4d0:	0085c83a 	sub	r2,zero,r2
 200b4d4:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200b4d8:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200b4dc:	003f8106 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 200b4e0:	00800ac4 	movi	r2,43
 200b4e4:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200b4e8:	003f7e06 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 200b4ec:	a805883a 	mov	r2,r21
 200b4f0:	15400044 	addi	r21,r2,1
 200b4f4:	10800003 	ldbu	r2,0(r2)
 200b4f8:	14403fcc 	andi	r17,r2,255
 200b4fc:	8c40201c 	xori	r17,r17,128
 200b500:	8c7fe004 	addi	r17,r17,-128
 200b504:	88800a98 	cmpnei	r2,r17,42
 200b508:	10000a1e 	bne	r2,zero,200b534 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200b50c:	e0bfe917 	ldw	r2,-92(fp)
 200b510:	10c00104 	addi	r3,r2,4
 200b514:	e0ffe915 	stw	r3,-92(fp)
 200b518:	10800017 	ldw	r2,0(r2)
 200b51c:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200b520:	e0bfbb17 	ldw	r2,-276(fp)
 200b524:	103f6f0e 	bge	r2,zero,200b2e4 <___vfiprintf_internal_r+0x224>
					prec = -1;
 200b528:	00bfffc4 	movi	r2,-1
 200b52c:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 200b530:	003f6c06 	br	200b2e4 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 200b534:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200b538:	00000906 	br	200b560 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 200b53c:	80c002a4 	muli	r3,r16,10
 200b540:	88bff404 	addi	r2,r17,-48
 200b544:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200b548:	a805883a 	mov	r2,r21
 200b54c:	15400044 	addi	r21,r2,1
 200b550:	10800003 	ldbu	r2,0(r2)
 200b554:	14403fcc 	andi	r17,r2,255
 200b558:	8c40201c 	xori	r17,r17,128
 200b55c:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200b560:	88bff404 	addi	r2,r17,-48
 200b564:	108002b0 	cmpltui	r2,r2,10
 200b568:	103ff41e 	bne	r2,zero,200b53c <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200b56c:	8005883a 	mov	r2,r16
 200b570:	1000010e 	bge	r2,zero,200b578 <___vfiprintf_internal_r+0x4b8>
 200b574:	00bfffc4 	movi	r2,-1
 200b578:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 200b57c:	003f5f06 	br	200b2fc <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200b580:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200b584:	003f5706 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200b588:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200b58c:	80c002a4 	muli	r3,r16,10
 200b590:	88bff404 	addi	r2,r17,-48
 200b594:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200b598:	a805883a 	mov	r2,r21
 200b59c:	15400044 	addi	r21,r2,1
 200b5a0:	10800003 	ldbu	r2,0(r2)
 200b5a4:	14403fcc 	andi	r17,r2,255
 200b5a8:	8c40201c 	xori	r17,r17,128
 200b5ac:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 200b5b0:	88bff404 	addi	r2,r17,-48
 200b5b4:	108002b0 	cmpltui	r2,r2,10
 200b5b8:	103ff41e 	bne	r2,zero,200b58c <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200b5bc:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 200b5c0:	003f4e06 	br	200b2fc <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200b5c4:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200b5c8:	003f4606 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200b5cc:	a8800003 	ldbu	r2,0(r21)
 200b5d0:	10803fcc 	andi	r2,r2,255
 200b5d4:	1080201c 	xori	r2,r2,128
 200b5d8:	10bfe004 	addi	r2,r2,-128
 200b5dc:	10801b18 	cmpnei	r2,r2,108
 200b5e0:	1000031e 	bne	r2,zero,200b5f0 <___vfiprintf_internal_r+0x530>
				fmt++;
 200b5e4:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200b5e8:	9cc00814 	ori	r19,r19,32
 200b5ec:	003f3d06 	br	200b2e4 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 200b5f0:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200b5f4:	003f3b06 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 200b5f8:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200b5fc:	003f3906 	br	200b2e4 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200b600:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200b604:	e0bfe917 	ldw	r2,-92(fp)
 200b608:	10c00104 	addi	r3,r2,4
 200b60c:	e0ffe915 	stw	r3,-92(fp)
 200b610:	10800017 	ldw	r2,0(r2)
 200b614:	a0800005 	stb	r2,0(r20)
				size = 1;
 200b618:	00800044 	movi	r2,1
 200b61c:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 200b620:	e03fc705 	stb	zero,-228(fp)
			break;
 200b624:	0001c806 	br	200bd48 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 200b628:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200b62c:	9880080c 	andi	r2,r19,32
 200b630:	10000826 	beq	r2,zero,200b654 <___vfiprintf_internal_r+0x594>
 200b634:	e13fe917 	ldw	r4,-92(fp)
 200b638:	20800204 	addi	r2,r4,8
 200b63c:	e0bfe915 	stw	r2,-92(fp)
 200b640:	20800017 	ldw	r2,0(r4)
 200b644:	20c00117 	ldw	r3,4(r4)
 200b648:	e0bfea15 	stw	r2,-88(fp)
 200b64c:	e0ffeb15 	stw	r3,-84(fp)
 200b650:	00001e06 	br	200b6cc <___vfiprintf_internal_r+0x60c>
 200b654:	9880040c 	andi	r2,r19,16
 200b658:	10000826 	beq	r2,zero,200b67c <___vfiprintf_internal_r+0x5bc>
 200b65c:	e0bfe917 	ldw	r2,-92(fp)
 200b660:	10c00104 	addi	r3,r2,4
 200b664:	e0ffe915 	stw	r3,-92(fp)
 200b668:	10800017 	ldw	r2,0(r2)
 200b66c:	e0bfea15 	stw	r2,-88(fp)
 200b670:	1005d7fa 	srai	r2,r2,31
 200b674:	e0bfeb15 	stw	r2,-84(fp)
 200b678:	00001406 	br	200b6cc <___vfiprintf_internal_r+0x60c>
 200b67c:	9880100c 	andi	r2,r19,64
 200b680:	10000b26 	beq	r2,zero,200b6b0 <___vfiprintf_internal_r+0x5f0>
 200b684:	e0bfe917 	ldw	r2,-92(fp)
 200b688:	10c00104 	addi	r3,r2,4
 200b68c:	e0ffe915 	stw	r3,-92(fp)
 200b690:	10800017 	ldw	r2,0(r2)
 200b694:	10bfffcc 	andi	r2,r2,65535
 200b698:	10a0001c 	xori	r2,r2,32768
 200b69c:	10a00004 	addi	r2,r2,-32768
 200b6a0:	e0bfea15 	stw	r2,-88(fp)
 200b6a4:	1005d7fa 	srai	r2,r2,31
 200b6a8:	e0bfeb15 	stw	r2,-84(fp)
 200b6ac:	00000706 	br	200b6cc <___vfiprintf_internal_r+0x60c>
 200b6b0:	e0bfe917 	ldw	r2,-92(fp)
 200b6b4:	10c00104 	addi	r3,r2,4
 200b6b8:	e0ffe915 	stw	r3,-92(fp)
 200b6bc:	10800017 	ldw	r2,0(r2)
 200b6c0:	e0bfea15 	stw	r2,-88(fp)
 200b6c4:	1005d7fa 	srai	r2,r2,31
 200b6c8:	e0bfeb15 	stw	r2,-84(fp)
 200b6cc:	e0bfea17 	ldw	r2,-88(fp)
 200b6d0:	e0bfbc15 	stw	r2,-272(fp)
 200b6d4:	e0ffeb17 	ldw	r3,-84(fp)
 200b6d8:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200b6dc:	e0bfbc17 	ldw	r2,-272(fp)
 200b6e0:	e0ffbd17 	ldw	r3,-268(fp)
 200b6e4:	18000d0e 	bge	r3,zero,200b71c <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200b6e8:	000d883a 	mov	r6,zero
 200b6ec:	000f883a 	mov	r7,zero
 200b6f0:	e13fbc17 	ldw	r4,-272(fp)
 200b6f4:	e17fbd17 	ldw	r5,-268(fp)
 200b6f8:	3105c83a 	sub	r2,r6,r4
 200b6fc:	3091803a 	cmpltu	r8,r6,r2
 200b700:	3947c83a 	sub	r3,r7,r5
 200b704:	1a09c83a 	sub	r4,r3,r8
 200b708:	2007883a 	mov	r3,r4
 200b70c:	e0bfbc15 	stw	r2,-272(fp)
 200b710:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 200b714:	00800b44 	movi	r2,45
 200b718:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 200b71c:	00800044 	movi	r2,1
 200b720:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 200b724:	0000f806 	br	200bb08 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200b728:	9880080c 	andi	r2,r19,32
 200b72c:	10000d26 	beq	r2,zero,200b764 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200b730:	e0bfe917 	ldw	r2,-92(fp)
 200b734:	10c00104 	addi	r3,r2,4
 200b738:	e0ffe915 	stw	r3,-92(fp)
 200b73c:	10800017 	ldw	r2,0(r2)
 200b740:	e0ffb917 	ldw	r3,-284(fp)
 200b744:	e0fff015 	stw	r3,-64(fp)
 200b748:	1807d7fa 	srai	r3,r3,31
 200b74c:	e0fff115 	stw	r3,-60(fp)
 200b750:	e0fff017 	ldw	r3,-64(fp)
 200b754:	10c00015 	stw	r3,0(r2)
 200b758:	e0fff117 	ldw	r3,-60(fp)
 200b75c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200b760:	0002c306 	br	200c270 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200b764:	9880040c 	andi	r2,r19,16
 200b768:	10000726 	beq	r2,zero,200b788 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200b76c:	e0bfe917 	ldw	r2,-92(fp)
 200b770:	10c00104 	addi	r3,r2,4
 200b774:	e0ffe915 	stw	r3,-92(fp)
 200b778:	10800017 	ldw	r2,0(r2)
 200b77c:	e0ffb917 	ldw	r3,-284(fp)
 200b780:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200b784:	0002ba06 	br	200c270 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200b788:	9880100c 	andi	r2,r19,64
 200b78c:	10000726 	beq	r2,zero,200b7ac <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200b790:	e0bfe917 	ldw	r2,-92(fp)
 200b794:	10c00104 	addi	r3,r2,4
 200b798:	e0ffe915 	stw	r3,-92(fp)
 200b79c:	10800017 	ldw	r2,0(r2)
 200b7a0:	e0ffb917 	ldw	r3,-284(fp)
 200b7a4:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200b7a8:	0002b106 	br	200c270 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200b7ac:	e0bfe917 	ldw	r2,-92(fp)
 200b7b0:	10c00104 	addi	r3,r2,4
 200b7b4:	e0ffe915 	stw	r3,-92(fp)
 200b7b8:	10800017 	ldw	r2,0(r2)
 200b7bc:	e0ffb917 	ldw	r3,-284(fp)
 200b7c0:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200b7c4:	0002aa06 	br	200c270 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 200b7c8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200b7cc:	9880080c 	andi	r2,r19,32
 200b7d0:	10000626 	beq	r2,zero,200b7ec <___vfiprintf_internal_r+0x72c>
 200b7d4:	e0bfe917 	ldw	r2,-92(fp)
 200b7d8:	10c00204 	addi	r3,r2,8
 200b7dc:	e0ffe915 	stw	r3,-92(fp)
 200b7e0:	15800017 	ldw	r22,0(r2)
 200b7e4:	15c00117 	ldw	r23,4(r2)
 200b7e8:	00001c06 	br	200b85c <___vfiprintf_internal_r+0x79c>
 200b7ec:	9880040c 	andi	r2,r19,16
 200b7f0:	10000726 	beq	r2,zero,200b810 <___vfiprintf_internal_r+0x750>
 200b7f4:	e0bfe917 	ldw	r2,-92(fp)
 200b7f8:	10c00104 	addi	r3,r2,4
 200b7fc:	e0ffe915 	stw	r3,-92(fp)
 200b800:	10800017 	ldw	r2,0(r2)
 200b804:	102d883a 	mov	r22,r2
 200b808:	002f883a 	mov	r23,zero
 200b80c:	00001306 	br	200b85c <___vfiprintf_internal_r+0x79c>
 200b810:	9880100c 	andi	r2,r19,64
 200b814:	10000b26 	beq	r2,zero,200b844 <___vfiprintf_internal_r+0x784>
 200b818:	e0bfe917 	ldw	r2,-92(fp)
 200b81c:	10c00104 	addi	r3,r2,4
 200b820:	e0ffe915 	stw	r3,-92(fp)
 200b824:	10800017 	ldw	r2,0(r2)
 200b828:	e0bff215 	stw	r2,-56(fp)
 200b82c:	e03ff315 	stw	zero,-52(fp)
 200b830:	e0bff217 	ldw	r2,-56(fp)
 200b834:	15bfffcc 	andi	r22,r2,65535
 200b838:	e0fff317 	ldw	r3,-52(fp)
 200b83c:	182e703a 	and	r23,r3,zero
 200b840:	00000606 	br	200b85c <___vfiprintf_internal_r+0x79c>
 200b844:	e0bfe917 	ldw	r2,-92(fp)
 200b848:	10c00104 	addi	r3,r2,4
 200b84c:	e0ffe915 	stw	r3,-92(fp)
 200b850:	10800017 	ldw	r2,0(r2)
 200b854:	102d883a 	mov	r22,r2
 200b858:	002f883a 	mov	r23,zero
 200b85c:	e5bfbc15 	stw	r22,-272(fp)
 200b860:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 200b864:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200b868:	0000a606 	br	200bb04 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200b86c:	e0bfe917 	ldw	r2,-92(fp)
 200b870:	10c00104 	addi	r3,r2,4
 200b874:	e0ffe915 	stw	r3,-92(fp)
 200b878:	10800017 	ldw	r2,0(r2)
 200b87c:	e0bfbc15 	stw	r2,-272(fp)
 200b880:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 200b884:	00800084 	movi	r2,2
 200b888:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 200b88c:	00808074 	movhi	r2,513
 200b890:	108bea04 	addi	r2,r2,12200
 200b894:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 200b898:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200b89c:	00800c04 	movi	r2,48
 200b8a0:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200b8a4:	04401e04 	movi	r17,120
 200b8a8:	00801e04 	movi	r2,120
 200b8ac:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200b8b0:	00009406 	br	200bb04 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200b8b4:	e0bfe917 	ldw	r2,-92(fp)
 200b8b8:	10c00104 	addi	r3,r2,4
 200b8bc:	e0ffe915 	stw	r3,-92(fp)
 200b8c0:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200b8c4:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200b8c8:	a000081e 	bne	r20,zero,200b8ec <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 200b8cc:	05008074 	movhi	r20,513
 200b8d0:	a50bef04 	addi	r20,r20,12220
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200b8d4:	e0bfbb17 	ldw	r2,-276(fp)
 200b8d8:	10c001f0 	cmpltui	r3,r2,7
 200b8dc:	1800011e 	bne	r3,zero,200b8e4 <___vfiprintf_internal_r+0x824>
 200b8e0:	00800184 	movi	r2,6
 200b8e4:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200b8e8:	00011706 	br	200bd48 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200b8ec:	e0bfbb17 	ldw	r2,-276(fp)
 200b8f0:	10001016 	blt	r2,zero,200b934 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200b8f4:	e0bfbb17 	ldw	r2,-276(fp)
 200b8f8:	100d883a 	mov	r6,r2
 200b8fc:	000b883a 	mov	r5,zero
 200b900:	a009883a 	mov	r4,r20
 200b904:	2007bb40 	call	2007bb4 <memchr>
 200b908:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 200b90c:	e0bfc617 	ldw	r2,-232(fp)
 200b910:	10000526 	beq	r2,zero,200b928 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 200b914:	e0bfc617 	ldw	r2,-232(fp)
 200b918:	a007883a 	mov	r3,r20
 200b91c:	10c5c83a 	sub	r2,r2,r3
 200b920:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200b924:	00010806 	br	200bd48 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200b928:	e0bfbb17 	ldw	r2,-276(fp)
 200b92c:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 200b930:	00010506 	br	200bd48 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200b934:	a009883a 	mov	r4,r20
 200b938:	20009380 	call	2000938 <strlen>
 200b93c:	e0bfc115 	stw	r2,-252(fp)

			break;
 200b940:	00010106 	br	200bd48 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 200b944:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200b948:	9880080c 	andi	r2,r19,32
 200b94c:	10000826 	beq	r2,zero,200b970 <___vfiprintf_internal_r+0x8b0>
 200b950:	e0bfe917 	ldw	r2,-92(fp)
 200b954:	10c00204 	addi	r3,r2,8
 200b958:	e0ffe915 	stw	r3,-92(fp)
 200b95c:	10c00017 	ldw	r3,0(r2)
 200b960:	e0ffec15 	stw	r3,-80(fp)
 200b964:	10c00117 	ldw	r3,4(r2)
 200b968:	e0ffed15 	stw	r3,-76(fp)
 200b96c:	00001e06 	br	200b9e8 <___vfiprintf_internal_r+0x928>
 200b970:	9880040c 	andi	r2,r19,16
 200b974:	10000726 	beq	r2,zero,200b994 <___vfiprintf_internal_r+0x8d4>
 200b978:	e0bfe917 	ldw	r2,-92(fp)
 200b97c:	10c00104 	addi	r3,r2,4
 200b980:	e0ffe915 	stw	r3,-92(fp)
 200b984:	10800017 	ldw	r2,0(r2)
 200b988:	e0bfec15 	stw	r2,-80(fp)
 200b98c:	e03fed15 	stw	zero,-76(fp)
 200b990:	00001506 	br	200b9e8 <___vfiprintf_internal_r+0x928>
 200b994:	9880100c 	andi	r2,r19,64
 200b998:	10000d26 	beq	r2,zero,200b9d0 <___vfiprintf_internal_r+0x910>
 200b99c:	e0bfe917 	ldw	r2,-92(fp)
 200b9a0:	10c00104 	addi	r3,r2,4
 200b9a4:	e0ffe915 	stw	r3,-92(fp)
 200b9a8:	10800017 	ldw	r2,0(r2)
 200b9ac:	e0bff415 	stw	r2,-48(fp)
 200b9b0:	e03ff515 	stw	zero,-44(fp)
 200b9b4:	e0bff417 	ldw	r2,-48(fp)
 200b9b8:	10bfffcc 	andi	r2,r2,65535
 200b9bc:	e0bfec15 	stw	r2,-80(fp)
 200b9c0:	e0fff517 	ldw	r3,-44(fp)
 200b9c4:	1806703a 	and	r3,r3,zero
 200b9c8:	e0ffed15 	stw	r3,-76(fp)
 200b9cc:	00000606 	br	200b9e8 <___vfiprintf_internal_r+0x928>
 200b9d0:	e0bfe917 	ldw	r2,-92(fp)
 200b9d4:	10c00104 	addi	r3,r2,4
 200b9d8:	e0ffe915 	stw	r3,-92(fp)
 200b9dc:	10800017 	ldw	r2,0(r2)
 200b9e0:	e0bfec15 	stw	r2,-80(fp)
 200b9e4:	e03fed15 	stw	zero,-76(fp)
 200b9e8:	e0bfec17 	ldw	r2,-80(fp)
 200b9ec:	e0bfbc15 	stw	r2,-272(fp)
 200b9f0:	e0ffed17 	ldw	r3,-76(fp)
 200b9f4:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 200b9f8:	00800044 	movi	r2,1
 200b9fc:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 200ba00:	00004006 	br	200bb04 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200ba04:	00808074 	movhi	r2,513
 200ba08:	108bf104 	addi	r2,r2,12228
 200ba0c:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 200ba10:	00000306 	br	200ba20 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 200ba14:	00808074 	movhi	r2,513
 200ba18:	108bea04 	addi	r2,r2,12200
 200ba1c:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 200ba20:	9880080c 	andi	r2,r19,32
 200ba24:	10000826 	beq	r2,zero,200ba48 <___vfiprintf_internal_r+0x988>
 200ba28:	e0bfe917 	ldw	r2,-92(fp)
 200ba2c:	10c00204 	addi	r3,r2,8
 200ba30:	e0ffe915 	stw	r3,-92(fp)
 200ba34:	10c00017 	ldw	r3,0(r2)
 200ba38:	e0ffee15 	stw	r3,-72(fp)
 200ba3c:	10c00117 	ldw	r3,4(r2)
 200ba40:	e0ffef15 	stw	r3,-68(fp)
 200ba44:	00001e06 	br	200bac0 <___vfiprintf_internal_r+0xa00>
 200ba48:	9880040c 	andi	r2,r19,16
 200ba4c:	10000726 	beq	r2,zero,200ba6c <___vfiprintf_internal_r+0x9ac>
 200ba50:	e0bfe917 	ldw	r2,-92(fp)
 200ba54:	10c00104 	addi	r3,r2,4
 200ba58:	e0ffe915 	stw	r3,-92(fp)
 200ba5c:	10800017 	ldw	r2,0(r2)
 200ba60:	e0bfee15 	stw	r2,-72(fp)
 200ba64:	e03fef15 	stw	zero,-68(fp)
 200ba68:	00001506 	br	200bac0 <___vfiprintf_internal_r+0xa00>
 200ba6c:	9880100c 	andi	r2,r19,64
 200ba70:	10000d26 	beq	r2,zero,200baa8 <___vfiprintf_internal_r+0x9e8>
 200ba74:	e0bfe917 	ldw	r2,-92(fp)
 200ba78:	10c00104 	addi	r3,r2,4
 200ba7c:	e0ffe915 	stw	r3,-92(fp)
 200ba80:	10800017 	ldw	r2,0(r2)
 200ba84:	e0bff615 	stw	r2,-40(fp)
 200ba88:	e03ff715 	stw	zero,-36(fp)
 200ba8c:	e0bff617 	ldw	r2,-40(fp)
 200ba90:	10bfffcc 	andi	r2,r2,65535
 200ba94:	e0bfee15 	stw	r2,-72(fp)
 200ba98:	e0fff717 	ldw	r3,-36(fp)
 200ba9c:	1806703a 	and	r3,r3,zero
 200baa0:	e0ffef15 	stw	r3,-68(fp)
 200baa4:	00000606 	br	200bac0 <___vfiprintf_internal_r+0xa00>
 200baa8:	e0bfe917 	ldw	r2,-92(fp)
 200baac:	10c00104 	addi	r3,r2,4
 200bab0:	e0ffe915 	stw	r3,-92(fp)
 200bab4:	10800017 	ldw	r2,0(r2)
 200bab8:	e0bfee15 	stw	r2,-72(fp)
 200babc:	e03fef15 	stw	zero,-68(fp)
 200bac0:	e0bfee17 	ldw	r2,-72(fp)
 200bac4:	e0bfbc15 	stw	r2,-272(fp)
 200bac8:	e0ffef17 	ldw	r3,-68(fp)
 200bacc:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 200bad0:	00800084 	movi	r2,2
 200bad4:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200bad8:	9880004c 	andi	r2,r19,1
 200badc:	10000926 	beq	r2,zero,200bb04 <___vfiprintf_internal_r+0xa44>
 200bae0:	e0bfbc17 	ldw	r2,-272(fp)
 200bae4:	e0ffbd17 	ldw	r3,-268(fp)
 200bae8:	10c4b03a 	or	r2,r2,r3
 200baec:	10000526 	beq	r2,zero,200bb04 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 200baf0:	00800c04 	movi	r2,48
 200baf4:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200baf8:	8805883a 	mov	r2,r17
 200bafc:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200bb00:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200bb04:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200bb08:	e0bfbb17 	ldw	r2,-276(fp)
 200bb0c:	e0bfbf15 	stw	r2,-260(fp)
 200bb10:	e0bfbf17 	ldw	r2,-260(fp)
 200bb14:	10000216 	blt	r2,zero,200bb20 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 200bb18:	00bfdfc4 	movi	r2,-129
 200bb1c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200bb20:	e53fdb04 	addi	r20,fp,-148
 200bb24:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 200bb28:	e0bfbc17 	ldw	r2,-272(fp)
 200bb2c:	e0ffbd17 	ldw	r3,-268(fp)
 200bb30:	10c4b03a 	or	r2,r2,r3
 200bb34:	1000021e 	bne	r2,zero,200bb40 <___vfiprintf_internal_r+0xa80>
 200bb38:	e0bfbb17 	ldw	r2,-276(fp)
 200bb3c:	10006c26 	beq	r2,zero,200bcf0 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200bb40:	e0bfbe03 	ldbu	r2,-264(fp)
 200bb44:	10c00060 	cmpeqi	r3,r2,1
 200bb48:	1800211e 	bne	r3,zero,200bbd0 <___vfiprintf_internal_r+0xb10>
 200bb4c:	10c000a0 	cmpeqi	r3,r2,2
 200bb50:	1800491e 	bne	r3,zero,200bc78 <___vfiprintf_internal_r+0xbb8>
 200bb54:	10005d1e 	bne	r2,zero,200bccc <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200bb58:	a53fffc4 	addi	r20,r20,-1
 200bb5c:	e0bfbc17 	ldw	r2,-272(fp)
 200bb60:	108001cc 	andi	r2,r2,7
 200bb64:	10800c04 	addi	r2,r2,48
 200bb68:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 200bb6c:	e0bfbd17 	ldw	r2,-268(fp)
 200bb70:	1004977a 	slli	r2,r2,29
 200bb74:	e0ffbc17 	ldw	r3,-272(fp)
 200bb78:	1806d0fa 	srli	r3,r3,3
 200bb7c:	1884b03a 	or	r2,r3,r2
 200bb80:	e0bfbc15 	stw	r2,-272(fp)
 200bb84:	e0bfbd17 	ldw	r2,-268(fp)
 200bb88:	1004d0fa 	srli	r2,r2,3
 200bb8c:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200bb90:	e0bfbc17 	ldw	r2,-272(fp)
 200bb94:	e0ffbd17 	ldw	r3,-268(fp)
 200bb98:	10c4b03a 	or	r2,r2,r3
 200bb9c:	103fee1e 	bne	r2,zero,200bb58 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200bba0:	9880004c 	andi	r2,r19,1
 200bba4:	10005026 	beq	r2,zero,200bce8 <___vfiprintf_internal_r+0xc28>
 200bba8:	a0800003 	ldbu	r2,0(r20)
 200bbac:	10803fcc 	andi	r2,r2,255
 200bbb0:	1080201c 	xori	r2,r2,128
 200bbb4:	10bfe004 	addi	r2,r2,-128
 200bbb8:	10800c20 	cmpeqi	r2,r2,48
 200bbbc:	10004a1e 	bne	r2,zero,200bce8 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 200bbc0:	a53fffc4 	addi	r20,r20,-1
 200bbc4:	00800c04 	movi	r2,48
 200bbc8:	a0800005 	stb	r2,0(r20)
					break;
 200bbcc:	00004606 	br	200bce8 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200bbd0:	e0bfbd17 	ldw	r2,-268(fp)
 200bbd4:	10000a1e 	bne	r2,zero,200bc00 <___vfiprintf_internal_r+0xb40>
 200bbd8:	e0bfbd17 	ldw	r2,-268(fp)
 200bbdc:	1000031e 	bne	r2,zero,200bbec <___vfiprintf_internal_r+0xb2c>
 200bbe0:	e0bfbc17 	ldw	r2,-272(fp)
 200bbe4:	108002a8 	cmpgeui	r2,r2,10
 200bbe8:	1000051e 	bne	r2,zero,200bc00 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 200bbec:	a53fffc4 	addi	r20,r20,-1
 200bbf0:	e0bfbc17 	ldw	r2,-272(fp)
 200bbf4:	10800c04 	addi	r2,r2,48
 200bbf8:	a0800005 	stb	r2,0(r20)
						break;
 200bbfc:	00003b06 	br	200bcec <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200bc00:	a53fffc4 	addi	r20,r20,-1
 200bc04:	e0bfbc17 	ldw	r2,-272(fp)
 200bc08:	e0ffbd17 	ldw	r3,-268(fp)
 200bc0c:	01800284 	movi	r6,10
 200bc10:	000f883a 	mov	r7,zero
 200bc14:	1009883a 	mov	r4,r2
 200bc18:	180b883a 	mov	r5,r3
 200bc1c:	200d5500 	call	200d550 <__umoddi3>
 200bc20:	1009883a 	mov	r4,r2
 200bc24:	180b883a 	mov	r5,r3
 200bc28:	2005883a 	mov	r2,r4
 200bc2c:	2807883a 	mov	r3,r5
 200bc30:	10800c04 	addi	r2,r2,48
 200bc34:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200bc38:	e0bfbc17 	ldw	r2,-272(fp)
 200bc3c:	e0ffbd17 	ldw	r3,-268(fp)
 200bc40:	01800284 	movi	r6,10
 200bc44:	000f883a 	mov	r7,zero
 200bc48:	1009883a 	mov	r4,r2
 200bc4c:	180b883a 	mov	r5,r3
 200bc50:	200cfd80 	call	200cfd8 <__udivdi3>
 200bc54:	1009883a 	mov	r4,r2
 200bc58:	180b883a 	mov	r5,r3
 200bc5c:	e13fbc15 	stw	r4,-272(fp)
 200bc60:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 200bc64:	e0bfbc17 	ldw	r2,-272(fp)
 200bc68:	e0ffbd17 	ldw	r3,-268(fp)
 200bc6c:	10c4b03a 	or	r2,r2,r3
 200bc70:	103fe31e 	bne	r2,zero,200bc00 <___vfiprintf_internal_r+0xb40>
					break;
 200bc74:	00001d06 	br	200bcec <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200bc78:	a53fffc4 	addi	r20,r20,-1
 200bc7c:	e0bfbc17 	ldw	r2,-272(fp)
 200bc80:	108003cc 	andi	r2,r2,15
 200bc84:	e0ffc217 	ldw	r3,-248(fp)
 200bc88:	1885883a 	add	r2,r3,r2
 200bc8c:	10800003 	ldbu	r2,0(r2)
 200bc90:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 200bc94:	e0bfbd17 	ldw	r2,-268(fp)
 200bc98:	1004973a 	slli	r2,r2,28
 200bc9c:	e0ffbc17 	ldw	r3,-272(fp)
 200bca0:	1806d13a 	srli	r3,r3,4
 200bca4:	1884b03a 	or	r2,r3,r2
 200bca8:	e0bfbc15 	stw	r2,-272(fp)
 200bcac:	e0bfbd17 	ldw	r2,-268(fp)
 200bcb0:	1004d13a 	srli	r2,r2,4
 200bcb4:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200bcb8:	e0bfbc17 	ldw	r2,-272(fp)
 200bcbc:	e0ffbd17 	ldw	r3,-268(fp)
 200bcc0:	10c4b03a 	or	r2,r2,r3
 200bcc4:	103fec1e 	bne	r2,zero,200bc78 <___vfiprintf_internal_r+0xbb8>
					break;
 200bcc8:	00000806 	br	200bcec <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 200bccc:	05008074 	movhi	r20,513
 200bcd0:	a50bf604 	addi	r20,r20,12248
					size = strlen (cp);
 200bcd4:	a009883a 	mov	r4,r20
 200bcd8:	20009380 	call	2000938 <strlen>
 200bcdc:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 200bce0:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200bce4:	00001806 	br	200bd48 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200bce8:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200bcec:	00000706 	br	200bd0c <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200bcf0:	e0bfbe03 	ldbu	r2,-264(fp)
 200bcf4:	1000051e 	bne	r2,zero,200bd0c <___vfiprintf_internal_r+0xc4c>
 200bcf8:	9880004c 	andi	r2,r19,1
 200bcfc:	10000326 	beq	r2,zero,200bd0c <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 200bd00:	a53fffc4 	addi	r20,r20,-1
 200bd04:	00800c04 	movi	r2,48
 200bd08:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 200bd0c:	e0bfdb04 	addi	r2,fp,-148
 200bd10:	10800a04 	addi	r2,r2,40
 200bd14:	1007883a 	mov	r3,r2
 200bd18:	a005883a 	mov	r2,r20
 200bd1c:	1885c83a 	sub	r2,r3,r2
 200bd20:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 200bd24:	00000806 	br	200bd48 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200bd28:	88015426 	beq	r17,zero,200c27c <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200bd2c:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 200bd30:	8805883a 	mov	r2,r17
 200bd34:	a0800005 	stb	r2,0(r20)
			size = 1;
 200bd38:	00800044 	movi	r2,1
 200bd3c:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 200bd40:	e03fc705 	stb	zero,-228(fp)
			break;
 200bd44:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200bd48:	e0ffbf17 	ldw	r3,-260(fp)
 200bd4c:	e0bfc117 	ldw	r2,-252(fp)
 200bd50:	10c0010e 	bge	r2,r3,200bd58 <___vfiprintf_internal_r+0xc98>
 200bd54:	1805883a 	mov	r2,r3
 200bd58:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 200bd5c:	e0bfc703 	ldbu	r2,-228(fp)
 200bd60:	10803fcc 	andi	r2,r2,255
 200bd64:	1080201c 	xori	r2,r2,128
 200bd68:	10bfe004 	addi	r2,r2,-128
 200bd6c:	10000326 	beq	r2,zero,200bd7c <___vfiprintf_internal_r+0xcbc>
			realsz++;
 200bd70:	e0bfc017 	ldw	r2,-256(fp)
 200bd74:	10800044 	addi	r2,r2,1
 200bd78:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 200bd7c:	9880008c 	andi	r2,r19,2
 200bd80:	10000326 	beq	r2,zero,200bd90 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 200bd84:	e0bfc017 	ldw	r2,-256(fp)
 200bd88:	10800084 	addi	r2,r2,2
 200bd8c:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200bd90:	9880210c 	andi	r2,r19,132
 200bd94:	1000351e 	bne	r2,zero,200be6c <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 200bd98:	e0ffba17 	ldw	r3,-280(fp)
 200bd9c:	e0bfc017 	ldw	r2,-256(fp)
 200bda0:	18a1c83a 	sub	r16,r3,r2
 200bda4:	0400310e 	bge	zero,r16,200be6c <___vfiprintf_internal_r+0xdac>
 200bda8:	00001706 	br	200be08 <___vfiprintf_internal_r+0xd48>
 200bdac:	00808074 	movhi	r2,513
 200bdb0:	108bfc84 	addi	r2,r2,12274
 200bdb4:	90800015 	stw	r2,0(r18)
 200bdb8:	00800404 	movi	r2,16
 200bdbc:	90800115 	stw	r2,4(r18)
 200bdc0:	e0bfca17 	ldw	r2,-216(fp)
 200bdc4:	10800404 	addi	r2,r2,16
 200bdc8:	e0bfca15 	stw	r2,-216(fp)
 200bdcc:	94800204 	addi	r18,r18,8
 200bdd0:	e0bfc917 	ldw	r2,-220(fp)
 200bdd4:	10800044 	addi	r2,r2,1
 200bdd8:	e0bfc915 	stw	r2,-220(fp)
 200bddc:	e0bfc917 	ldw	r2,-220(fp)
 200bde0:	10800210 	cmplti	r2,r2,8
 200bde4:	1000071e 	bne	r2,zero,200be04 <___vfiprintf_internal_r+0xd44>
 200bde8:	e0bfc804 	addi	r2,fp,-224
 200bdec:	100d883a 	mov	r6,r2
 200bdf0:	e17fe717 	ldw	r5,-100(fp)
 200bdf4:	e13fe617 	ldw	r4,-104(fp)
 200bdf8:	200ae440 	call	200ae44 <__sprint_r>
 200bdfc:	10012d1e 	bne	r2,zero,200c2b4 <___vfiprintf_internal_r+0x11f4>
 200be00:	e4bfcb04 	addi	r18,fp,-212
 200be04:	843ffc04 	addi	r16,r16,-16
 200be08:	80800448 	cmpgei	r2,r16,17
 200be0c:	103fe71e 	bne	r2,zero,200bdac <___vfiprintf_internal_r+0xcec>
 200be10:	00808074 	movhi	r2,513
 200be14:	108bfc84 	addi	r2,r2,12274
 200be18:	90800015 	stw	r2,0(r18)
 200be1c:	8005883a 	mov	r2,r16
 200be20:	90800115 	stw	r2,4(r18)
 200be24:	e0bfca17 	ldw	r2,-216(fp)
 200be28:	8007883a 	mov	r3,r16
 200be2c:	10c5883a 	add	r2,r2,r3
 200be30:	e0bfca15 	stw	r2,-216(fp)
 200be34:	94800204 	addi	r18,r18,8
 200be38:	e0bfc917 	ldw	r2,-220(fp)
 200be3c:	10800044 	addi	r2,r2,1
 200be40:	e0bfc915 	stw	r2,-220(fp)
 200be44:	e0bfc917 	ldw	r2,-220(fp)
 200be48:	10800210 	cmplti	r2,r2,8
 200be4c:	1000071e 	bne	r2,zero,200be6c <___vfiprintf_internal_r+0xdac>
 200be50:	e0bfc804 	addi	r2,fp,-224
 200be54:	100d883a 	mov	r6,r2
 200be58:	e17fe717 	ldw	r5,-100(fp)
 200be5c:	e13fe617 	ldw	r4,-104(fp)
 200be60:	200ae440 	call	200ae44 <__sprint_r>
 200be64:	1001151e 	bne	r2,zero,200c2bc <___vfiprintf_internal_r+0x11fc>
 200be68:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 200be6c:	e0bfc703 	ldbu	r2,-228(fp)
 200be70:	10803fcc 	andi	r2,r2,255
 200be74:	1080201c 	xori	r2,r2,128
 200be78:	10bfe004 	addi	r2,r2,-128
 200be7c:	10001526 	beq	r2,zero,200bed4 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 200be80:	e0bfc704 	addi	r2,fp,-228
 200be84:	90800015 	stw	r2,0(r18)
 200be88:	00800044 	movi	r2,1
 200be8c:	90800115 	stw	r2,4(r18)
 200be90:	e0bfca17 	ldw	r2,-216(fp)
 200be94:	10800044 	addi	r2,r2,1
 200be98:	e0bfca15 	stw	r2,-216(fp)
 200be9c:	94800204 	addi	r18,r18,8
 200bea0:	e0bfc917 	ldw	r2,-220(fp)
 200bea4:	10800044 	addi	r2,r2,1
 200bea8:	e0bfc915 	stw	r2,-220(fp)
 200beac:	e0bfc917 	ldw	r2,-220(fp)
 200beb0:	10800210 	cmplti	r2,r2,8
 200beb4:	1000071e 	bne	r2,zero,200bed4 <___vfiprintf_internal_r+0xe14>
 200beb8:	e0bfc804 	addi	r2,fp,-224
 200bebc:	100d883a 	mov	r6,r2
 200bec0:	e17fe717 	ldw	r5,-100(fp)
 200bec4:	e13fe617 	ldw	r4,-104(fp)
 200bec8:	200ae440 	call	200ae44 <__sprint_r>
 200becc:	1000fd1e 	bne	r2,zero,200c2c4 <___vfiprintf_internal_r+0x1204>
 200bed0:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 200bed4:	9880008c 	andi	r2,r19,2
 200bed8:	10001526 	beq	r2,zero,200bf30 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 200bedc:	e0bfe504 	addi	r2,fp,-108
 200bee0:	90800015 	stw	r2,0(r18)
 200bee4:	00800084 	movi	r2,2
 200bee8:	90800115 	stw	r2,4(r18)
 200beec:	e0bfca17 	ldw	r2,-216(fp)
 200bef0:	10800084 	addi	r2,r2,2
 200bef4:	e0bfca15 	stw	r2,-216(fp)
 200bef8:	94800204 	addi	r18,r18,8
 200befc:	e0bfc917 	ldw	r2,-220(fp)
 200bf00:	10800044 	addi	r2,r2,1
 200bf04:	e0bfc915 	stw	r2,-220(fp)
 200bf08:	e0bfc917 	ldw	r2,-220(fp)
 200bf0c:	10800210 	cmplti	r2,r2,8
 200bf10:	1000071e 	bne	r2,zero,200bf30 <___vfiprintf_internal_r+0xe70>
 200bf14:	e0bfc804 	addi	r2,fp,-224
 200bf18:	100d883a 	mov	r6,r2
 200bf1c:	e17fe717 	ldw	r5,-100(fp)
 200bf20:	e13fe617 	ldw	r4,-104(fp)
 200bf24:	200ae440 	call	200ae44 <__sprint_r>
 200bf28:	1000e81e 	bne	r2,zero,200c2cc <___vfiprintf_internal_r+0x120c>
 200bf2c:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200bf30:	9880210c 	andi	r2,r19,132
 200bf34:	10802018 	cmpnei	r2,r2,128
 200bf38:	1000351e 	bne	r2,zero,200c010 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 200bf3c:	e0ffba17 	ldw	r3,-280(fp)
 200bf40:	e0bfc017 	ldw	r2,-256(fp)
 200bf44:	18a1c83a 	sub	r16,r3,r2
 200bf48:	0400310e 	bge	zero,r16,200c010 <___vfiprintf_internal_r+0xf50>
 200bf4c:	00001706 	br	200bfac <___vfiprintf_internal_r+0xeec>
 200bf50:	00808074 	movhi	r2,513
 200bf54:	108c0084 	addi	r2,r2,12290
 200bf58:	90800015 	stw	r2,0(r18)
 200bf5c:	00800404 	movi	r2,16
 200bf60:	90800115 	stw	r2,4(r18)
 200bf64:	e0bfca17 	ldw	r2,-216(fp)
 200bf68:	10800404 	addi	r2,r2,16
 200bf6c:	e0bfca15 	stw	r2,-216(fp)
 200bf70:	94800204 	addi	r18,r18,8
 200bf74:	e0bfc917 	ldw	r2,-220(fp)
 200bf78:	10800044 	addi	r2,r2,1
 200bf7c:	e0bfc915 	stw	r2,-220(fp)
 200bf80:	e0bfc917 	ldw	r2,-220(fp)
 200bf84:	10800210 	cmplti	r2,r2,8
 200bf88:	1000071e 	bne	r2,zero,200bfa8 <___vfiprintf_internal_r+0xee8>
 200bf8c:	e0bfc804 	addi	r2,fp,-224
 200bf90:	100d883a 	mov	r6,r2
 200bf94:	e17fe717 	ldw	r5,-100(fp)
 200bf98:	e13fe617 	ldw	r4,-104(fp)
 200bf9c:	200ae440 	call	200ae44 <__sprint_r>
 200bfa0:	1000cc1e 	bne	r2,zero,200c2d4 <___vfiprintf_internal_r+0x1214>
 200bfa4:	e4bfcb04 	addi	r18,fp,-212
 200bfa8:	843ffc04 	addi	r16,r16,-16
 200bfac:	80800448 	cmpgei	r2,r16,17
 200bfb0:	103fe71e 	bne	r2,zero,200bf50 <___vfiprintf_internal_r+0xe90>
 200bfb4:	00808074 	movhi	r2,513
 200bfb8:	108c0084 	addi	r2,r2,12290
 200bfbc:	90800015 	stw	r2,0(r18)
 200bfc0:	8005883a 	mov	r2,r16
 200bfc4:	90800115 	stw	r2,4(r18)
 200bfc8:	e0bfca17 	ldw	r2,-216(fp)
 200bfcc:	8007883a 	mov	r3,r16
 200bfd0:	10c5883a 	add	r2,r2,r3
 200bfd4:	e0bfca15 	stw	r2,-216(fp)
 200bfd8:	94800204 	addi	r18,r18,8
 200bfdc:	e0bfc917 	ldw	r2,-220(fp)
 200bfe0:	10800044 	addi	r2,r2,1
 200bfe4:	e0bfc915 	stw	r2,-220(fp)
 200bfe8:	e0bfc917 	ldw	r2,-220(fp)
 200bfec:	10800210 	cmplti	r2,r2,8
 200bff0:	1000071e 	bne	r2,zero,200c010 <___vfiprintf_internal_r+0xf50>
 200bff4:	e0bfc804 	addi	r2,fp,-224
 200bff8:	100d883a 	mov	r6,r2
 200bffc:	e17fe717 	ldw	r5,-100(fp)
 200c000:	e13fe617 	ldw	r4,-104(fp)
 200c004:	200ae440 	call	200ae44 <__sprint_r>
 200c008:	1000b41e 	bne	r2,zero,200c2dc <___vfiprintf_internal_r+0x121c>
 200c00c:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200c010:	e0ffbf17 	ldw	r3,-260(fp)
 200c014:	e0bfc117 	ldw	r2,-252(fp)
 200c018:	18a1c83a 	sub	r16,r3,r2
 200c01c:	0400310e 	bge	zero,r16,200c0e4 <___vfiprintf_internal_r+0x1024>
 200c020:	00001706 	br	200c080 <___vfiprintf_internal_r+0xfc0>
 200c024:	00808074 	movhi	r2,513
 200c028:	108c0084 	addi	r2,r2,12290
 200c02c:	90800015 	stw	r2,0(r18)
 200c030:	00800404 	movi	r2,16
 200c034:	90800115 	stw	r2,4(r18)
 200c038:	e0bfca17 	ldw	r2,-216(fp)
 200c03c:	10800404 	addi	r2,r2,16
 200c040:	e0bfca15 	stw	r2,-216(fp)
 200c044:	94800204 	addi	r18,r18,8
 200c048:	e0bfc917 	ldw	r2,-220(fp)
 200c04c:	10800044 	addi	r2,r2,1
 200c050:	e0bfc915 	stw	r2,-220(fp)
 200c054:	e0bfc917 	ldw	r2,-220(fp)
 200c058:	10800210 	cmplti	r2,r2,8
 200c05c:	1000071e 	bne	r2,zero,200c07c <___vfiprintf_internal_r+0xfbc>
 200c060:	e0bfc804 	addi	r2,fp,-224
 200c064:	100d883a 	mov	r6,r2
 200c068:	e17fe717 	ldw	r5,-100(fp)
 200c06c:	e13fe617 	ldw	r4,-104(fp)
 200c070:	200ae440 	call	200ae44 <__sprint_r>
 200c074:	10009b1e 	bne	r2,zero,200c2e4 <___vfiprintf_internal_r+0x1224>
 200c078:	e4bfcb04 	addi	r18,fp,-212
 200c07c:	843ffc04 	addi	r16,r16,-16
 200c080:	80800448 	cmpgei	r2,r16,17
 200c084:	103fe71e 	bne	r2,zero,200c024 <___vfiprintf_internal_r+0xf64>
 200c088:	00808074 	movhi	r2,513
 200c08c:	108c0084 	addi	r2,r2,12290
 200c090:	90800015 	stw	r2,0(r18)
 200c094:	8005883a 	mov	r2,r16
 200c098:	90800115 	stw	r2,4(r18)
 200c09c:	e0bfca17 	ldw	r2,-216(fp)
 200c0a0:	8007883a 	mov	r3,r16
 200c0a4:	10c5883a 	add	r2,r2,r3
 200c0a8:	e0bfca15 	stw	r2,-216(fp)
 200c0ac:	94800204 	addi	r18,r18,8
 200c0b0:	e0bfc917 	ldw	r2,-220(fp)
 200c0b4:	10800044 	addi	r2,r2,1
 200c0b8:	e0bfc915 	stw	r2,-220(fp)
 200c0bc:	e0bfc917 	ldw	r2,-220(fp)
 200c0c0:	10800210 	cmplti	r2,r2,8
 200c0c4:	1000071e 	bne	r2,zero,200c0e4 <___vfiprintf_internal_r+0x1024>
 200c0c8:	e0bfc804 	addi	r2,fp,-224
 200c0cc:	100d883a 	mov	r6,r2
 200c0d0:	e17fe717 	ldw	r5,-100(fp)
 200c0d4:	e13fe617 	ldw	r4,-104(fp)
 200c0d8:	200ae440 	call	200ae44 <__sprint_r>
 200c0dc:	1000831e 	bne	r2,zero,200c2ec <___vfiprintf_internal_r+0x122c>
 200c0e0:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 200c0e4:	95000015 	stw	r20,0(r18)
 200c0e8:	e0bfc117 	ldw	r2,-252(fp)
 200c0ec:	90800115 	stw	r2,4(r18)
 200c0f0:	e0ffca17 	ldw	r3,-216(fp)
 200c0f4:	e0bfc117 	ldw	r2,-252(fp)
 200c0f8:	1885883a 	add	r2,r3,r2
 200c0fc:	e0bfca15 	stw	r2,-216(fp)
 200c100:	94800204 	addi	r18,r18,8
 200c104:	e0bfc917 	ldw	r2,-220(fp)
 200c108:	10800044 	addi	r2,r2,1
 200c10c:	e0bfc915 	stw	r2,-220(fp)
 200c110:	e0bfc917 	ldw	r2,-220(fp)
 200c114:	10800210 	cmplti	r2,r2,8
 200c118:	1000071e 	bne	r2,zero,200c138 <___vfiprintf_internal_r+0x1078>
 200c11c:	e0bfc804 	addi	r2,fp,-224
 200c120:	100d883a 	mov	r6,r2
 200c124:	e17fe717 	ldw	r5,-100(fp)
 200c128:	e13fe617 	ldw	r4,-104(fp)
 200c12c:	200ae440 	call	200ae44 <__sprint_r>
 200c130:	1000701e 	bne	r2,zero,200c2f4 <___vfiprintf_internal_r+0x1234>
 200c134:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200c138:	9880010c 	andi	r2,r19,4
 200c13c:	10003526 	beq	r2,zero,200c214 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 200c140:	e0ffba17 	ldw	r3,-280(fp)
 200c144:	e0bfc017 	ldw	r2,-256(fp)
 200c148:	18a1c83a 	sub	r16,r3,r2
 200c14c:	0400310e 	bge	zero,r16,200c214 <___vfiprintf_internal_r+0x1154>
 200c150:	00001706 	br	200c1b0 <___vfiprintf_internal_r+0x10f0>
 200c154:	00808074 	movhi	r2,513
 200c158:	108bfc84 	addi	r2,r2,12274
 200c15c:	90800015 	stw	r2,0(r18)
 200c160:	00800404 	movi	r2,16
 200c164:	90800115 	stw	r2,4(r18)
 200c168:	e0bfca17 	ldw	r2,-216(fp)
 200c16c:	10800404 	addi	r2,r2,16
 200c170:	e0bfca15 	stw	r2,-216(fp)
 200c174:	94800204 	addi	r18,r18,8
 200c178:	e0bfc917 	ldw	r2,-220(fp)
 200c17c:	10800044 	addi	r2,r2,1
 200c180:	e0bfc915 	stw	r2,-220(fp)
 200c184:	e0bfc917 	ldw	r2,-220(fp)
 200c188:	10800210 	cmplti	r2,r2,8
 200c18c:	1000071e 	bne	r2,zero,200c1ac <___vfiprintf_internal_r+0x10ec>
 200c190:	e0bfc804 	addi	r2,fp,-224
 200c194:	100d883a 	mov	r6,r2
 200c198:	e17fe717 	ldw	r5,-100(fp)
 200c19c:	e13fe617 	ldw	r4,-104(fp)
 200c1a0:	200ae440 	call	200ae44 <__sprint_r>
 200c1a4:	1000551e 	bne	r2,zero,200c2fc <___vfiprintf_internal_r+0x123c>
 200c1a8:	e4bfcb04 	addi	r18,fp,-212
 200c1ac:	843ffc04 	addi	r16,r16,-16
 200c1b0:	80800448 	cmpgei	r2,r16,17
 200c1b4:	103fe71e 	bne	r2,zero,200c154 <___vfiprintf_internal_r+0x1094>
 200c1b8:	00808074 	movhi	r2,513
 200c1bc:	108bfc84 	addi	r2,r2,12274
 200c1c0:	90800015 	stw	r2,0(r18)
 200c1c4:	8005883a 	mov	r2,r16
 200c1c8:	90800115 	stw	r2,4(r18)
 200c1cc:	e0bfca17 	ldw	r2,-216(fp)
 200c1d0:	8007883a 	mov	r3,r16
 200c1d4:	10c5883a 	add	r2,r2,r3
 200c1d8:	e0bfca15 	stw	r2,-216(fp)
 200c1dc:	94800204 	addi	r18,r18,8
 200c1e0:	e0bfc917 	ldw	r2,-220(fp)
 200c1e4:	10800044 	addi	r2,r2,1
 200c1e8:	e0bfc915 	stw	r2,-220(fp)
 200c1ec:	e0bfc917 	ldw	r2,-220(fp)
 200c1f0:	10800210 	cmplti	r2,r2,8
 200c1f4:	1000071e 	bne	r2,zero,200c214 <___vfiprintf_internal_r+0x1154>
 200c1f8:	e0bfc804 	addi	r2,fp,-224
 200c1fc:	100d883a 	mov	r6,r2
 200c200:	e17fe717 	ldw	r5,-100(fp)
 200c204:	e13fe617 	ldw	r4,-104(fp)
 200c208:	200ae440 	call	200ae44 <__sprint_r>
 200c20c:	10003d1e 	bne	r2,zero,200c304 <___vfiprintf_internal_r+0x1244>
 200c210:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 200c214:	e0ffba17 	ldw	r3,-280(fp)
 200c218:	e0bfc017 	ldw	r2,-256(fp)
 200c21c:	10c0010e 	bge	r2,r3,200c224 <___vfiprintf_internal_r+0x1164>
 200c220:	1805883a 	mov	r2,r3
 200c224:	e0ffb917 	ldw	r3,-284(fp)
 200c228:	1885883a 	add	r2,r3,r2
 200c22c:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 200c230:	e0bfca17 	ldw	r2,-216(fp)
 200c234:	10000626 	beq	r2,zero,200c250 <___vfiprintf_internal_r+0x1190>
 200c238:	e0bfc804 	addi	r2,fp,-224
 200c23c:	100d883a 	mov	r6,r2
 200c240:	e17fe717 	ldw	r5,-100(fp)
 200c244:	e13fe617 	ldw	r4,-104(fp)
 200c248:	200ae440 	call	200ae44 <__sprint_r>
 200c24c:	10002f1e 	bne	r2,zero,200c30c <___vfiprintf_internal_r+0x124c>
 200c250:	e03fc915 	stw	zero,-220(fp)
 200c254:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 200c258:	e0bfc317 	ldw	r2,-244(fp)
 200c25c:	103bea26 	beq	r2,zero,200b208 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 200c260:	e17fc317 	ldw	r5,-244(fp)
 200c264:	e13fe617 	ldw	r4,-104(fp)
 200c268:	20059f80 	call	20059f8 <_free_r>
			malloc_buf = NULL;
 200c26c:	e03fc315 	stw	zero,-244(fp)
		}
	}
 200c270:	003be506 	br	200b208 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 200c274:	0001883a 	nop
 200c278:	00000106 	br	200c280 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 200c27c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200c280:	e0bfca17 	ldw	r2,-216(fp)
 200c284:	10000626 	beq	r2,zero,200c2a0 <___vfiprintf_internal_r+0x11e0>
 200c288:	e0bfc804 	addi	r2,fp,-224
 200c28c:	100d883a 	mov	r6,r2
 200c290:	e17fe717 	ldw	r5,-100(fp)
 200c294:	e13fe617 	ldw	r4,-104(fp)
 200c298:	200ae440 	call	200ae44 <__sprint_r>
 200c29c:	10001d1e 	bne	r2,zero,200c314 <___vfiprintf_internal_r+0x1254>
 200c2a0:	e03fc915 	stw	zero,-220(fp)
 200c2a4:	e4bfcb04 	addi	r18,fp,-212
 200c2a8:	00001b06 	br	200c318 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 200c2ac:	0001883a 	nop
 200c2b0:	00001906 	br	200c318 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 200c2b4:	0001883a 	nop
 200c2b8:	00001706 	br	200c318 <___vfiprintf_internal_r+0x1258>
 200c2bc:	0001883a 	nop
 200c2c0:	00001506 	br	200c318 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 200c2c4:	0001883a 	nop
 200c2c8:	00001306 	br	200c318 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 200c2cc:	0001883a 	nop
 200c2d0:	00001106 	br	200c318 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 200c2d4:	0001883a 	nop
 200c2d8:	00000f06 	br	200c318 <___vfiprintf_internal_r+0x1258>
 200c2dc:	0001883a 	nop
 200c2e0:	00000d06 	br	200c318 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200c2e4:	0001883a 	nop
 200c2e8:	00000b06 	br	200c318 <___vfiprintf_internal_r+0x1258>
 200c2ec:	0001883a 	nop
 200c2f0:	00000906 	br	200c318 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 200c2f4:	0001883a 	nop
 200c2f8:	00000706 	br	200c318 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 200c2fc:	0001883a 	nop
 200c300:	00000506 	br	200c318 <___vfiprintf_internal_r+0x1258>
 200c304:	0001883a 	nop
 200c308:	00000306 	br	200c318 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 200c30c:	0001883a 	nop
 200c310:	00000106 	br	200c318 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200c314:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200c318:	e0bfc317 	ldw	r2,-244(fp)
 200c31c:	10000326 	beq	r2,zero,200c32c <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 200c320:	e17fc317 	ldw	r5,-244(fp)
 200c324:	e13fe617 	ldw	r4,-104(fp)
 200c328:	20059f80 	call	20059f8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 200c32c:	e0bfe717 	ldw	r2,-100(fp)
 200c330:	1080030b 	ldhu	r2,12(r2)
 200c334:	10bfffcc 	andi	r2,r2,65535
 200c338:	1080100c 	andi	r2,r2,64
 200c33c:	1000021e 	bne	r2,zero,200c348 <___vfiprintf_internal_r+0x1288>
 200c340:	e0bfb917 	ldw	r2,-284(fp)
 200c344:	00000206 	br	200c350 <___vfiprintf_internal_r+0x1290>
 200c348:	00bfffc4 	movi	r2,-1
 200c34c:	0001883a 	nop
	/* NOTREACHED */
}
 200c350:	e6fff804 	addi	sp,fp,-32
 200c354:	dfc00917 	ldw	ra,36(sp)
 200c358:	df000817 	ldw	fp,32(sp)
 200c35c:	ddc00717 	ldw	r23,28(sp)
 200c360:	dd800617 	ldw	r22,24(sp)
 200c364:	dd400517 	ldw	r21,20(sp)
 200c368:	dd000417 	ldw	r20,16(sp)
 200c36c:	dcc00317 	ldw	r19,12(sp)
 200c370:	dc800217 	ldw	r18,8(sp)
 200c374:	dc400117 	ldw	r17,4(sp)
 200c378:	dc000017 	ldw	r16,0(sp)
 200c37c:	dec00a04 	addi	sp,sp,40
 200c380:	f800283a 	ret

0200c384 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 200c384:	defff904 	addi	sp,sp,-28
 200c388:	dfc00615 	stw	ra,24(sp)
 200c38c:	df000515 	stw	fp,20(sp)
 200c390:	df000504 	addi	fp,sp,20
 200c394:	e13ffc15 	stw	r4,-16(fp)
 200c398:	e17ffd15 	stw	r5,-12(fp)
 200c39c:	e1bffe15 	stw	r6,-8(fp)
 200c3a0:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 200c3a4:	d026df15 	stw	zero,-25732(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 200c3a8:	e1bfff17 	ldw	r6,-4(fp)
 200c3ac:	e17ffe17 	ldw	r5,-8(fp)
 200c3b0:	e13ffd17 	ldw	r4,-12(fp)
 200c3b4:	20108bc0 	call	20108bc <write>
 200c3b8:	e0bffb15 	stw	r2,-20(fp)
 200c3bc:	e0bffb17 	ldw	r2,-20(fp)
 200c3c0:	10bfffd8 	cmpnei	r2,r2,-1
 200c3c4:	1000051e 	bne	r2,zero,200c3dc <_write_r+0x58>
 200c3c8:	d0a6df17 	ldw	r2,-25732(gp)
 200c3cc:	10000326 	beq	r2,zero,200c3dc <_write_r+0x58>
    ptr->_errno = errno;
 200c3d0:	d0e6df17 	ldw	r3,-25732(gp)
 200c3d4:	e0bffc17 	ldw	r2,-16(fp)
 200c3d8:	10c00015 	stw	r3,0(r2)
  return ret;
 200c3dc:	e0bffb17 	ldw	r2,-20(fp)
}
 200c3e0:	e037883a 	mov	sp,fp
 200c3e4:	dfc00117 	ldw	ra,4(sp)
 200c3e8:	df000017 	ldw	fp,0(sp)
 200c3ec:	dec00204 	addi	sp,sp,8
 200c3f0:	f800283a 	ret

0200c3f4 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 200c3f4:	defffb04 	addi	sp,sp,-20
 200c3f8:	dfc00415 	stw	ra,16(sp)
 200c3fc:	df000315 	stw	fp,12(sp)
 200c400:	df000304 	addi	fp,sp,12
 200c404:	e13ffe15 	stw	r4,-8(fp)
 200c408:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 200c40c:	d026df15 	stw	zero,-25732(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 200c410:	e13fff17 	ldw	r4,-4(fp)
 200c414:	20100ac0 	call	20100ac <close>
 200c418:	e0bffd15 	stw	r2,-12(fp)
 200c41c:	e0bffd17 	ldw	r2,-12(fp)
 200c420:	10bfffd8 	cmpnei	r2,r2,-1
 200c424:	1000051e 	bne	r2,zero,200c43c <_close_r+0x48>
 200c428:	d0a6df17 	ldw	r2,-25732(gp)
 200c42c:	10000326 	beq	r2,zero,200c43c <_close_r+0x48>
    ptr->_errno = errno;
 200c430:	d0e6df17 	ldw	r3,-25732(gp)
 200c434:	e0bffe17 	ldw	r2,-8(fp)
 200c438:	10c00015 	stw	r3,0(r2)
  return ret;
 200c43c:	e0bffd17 	ldw	r2,-12(fp)
}
 200c440:	e037883a 	mov	sp,fp
 200c444:	dfc00117 	ldw	ra,4(sp)
 200c448:	df000017 	ldw	fp,0(sp)
 200c44c:	dec00204 	addi	sp,sp,8
 200c450:	f800283a 	ret

0200c454 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 200c454:	defff504 	addi	sp,sp,-44
 200c458:	dfc00a15 	stw	ra,40(sp)
 200c45c:	df000915 	stw	fp,36(sp)
 200c460:	df000904 	addi	fp,sp,36
 200c464:	e13ffd15 	stw	r4,-12(fp)
 200c468:	e17ffe15 	stw	r5,-8(fp)
 200c46c:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 200c470:	e0fffe17 	ldw	r3,-8(fp)
 200c474:	e0bfff17 	ldw	r2,-4(fp)
 200c478:	1885383a 	mul	r2,r3,r2
 200c47c:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 200c480:	e17ff817 	ldw	r5,-32(fp)
 200c484:	e13ffd17 	ldw	r4,-12(fp)
 200c488:	20070380 	call	2007038 <_malloc_r>
 200c48c:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 200c490:	e0bff917 	ldw	r2,-28(fp)
 200c494:	1000021e 	bne	r2,zero,200c4a0 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 200c498:	0005883a 	mov	r2,zero
 200c49c:	00004106 	br	200c5a4 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 200c4a0:	e0bff917 	ldw	r2,-28(fp)
 200c4a4:	10bffe04 	addi	r2,r2,-8
 200c4a8:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 200c4ac:	e0bffa17 	ldw	r2,-24(fp)
 200c4b0:	10c00117 	ldw	r3,4(r2)
 200c4b4:	00bfff04 	movi	r2,-4
 200c4b8:	1884703a 	and	r2,r3,r2
 200c4bc:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 200c4c0:	e0bffb17 	ldw	r2,-20(fp)
 200c4c4:	10bfff04 	addi	r2,r2,-4
 200c4c8:	e0bffc15 	stw	r2,-16(fp)
 200c4cc:	e0bffc17 	ldw	r2,-16(fp)
 200c4d0:	10800968 	cmpgeui	r2,r2,37
 200c4d4:	10002e1e 	bne	r2,zero,200c590 <_calloc_r+0x13c>
 200c4d8:	e0bff917 	ldw	r2,-28(fp)
 200c4dc:	e0bff715 	stw	r2,-36(fp)
 200c4e0:	e0bffc17 	ldw	r2,-16(fp)
 200c4e4:	10800530 	cmpltui	r2,r2,20
 200c4e8:	10001e1e 	bne	r2,zero,200c564 <_calloc_r+0x110>
 200c4ec:	e0bff717 	ldw	r2,-36(fp)
 200c4f0:	10c00104 	addi	r3,r2,4
 200c4f4:	e0fff715 	stw	r3,-36(fp)
 200c4f8:	10000015 	stw	zero,0(r2)
 200c4fc:	e0bff717 	ldw	r2,-36(fp)
 200c500:	10c00104 	addi	r3,r2,4
 200c504:	e0fff715 	stw	r3,-36(fp)
 200c508:	10000015 	stw	zero,0(r2)
 200c50c:	e0bffc17 	ldw	r2,-16(fp)
 200c510:	10800730 	cmpltui	r2,r2,28
 200c514:	1000131e 	bne	r2,zero,200c564 <_calloc_r+0x110>
 200c518:	e0bff717 	ldw	r2,-36(fp)
 200c51c:	10c00104 	addi	r3,r2,4
 200c520:	e0fff715 	stw	r3,-36(fp)
 200c524:	10000015 	stw	zero,0(r2)
 200c528:	e0bff717 	ldw	r2,-36(fp)
 200c52c:	10c00104 	addi	r3,r2,4
 200c530:	e0fff715 	stw	r3,-36(fp)
 200c534:	10000015 	stw	zero,0(r2)
 200c538:	e0bffc17 	ldw	r2,-16(fp)
 200c53c:	10800930 	cmpltui	r2,r2,36
 200c540:	1000081e 	bne	r2,zero,200c564 <_calloc_r+0x110>
 200c544:	e0bff717 	ldw	r2,-36(fp)
 200c548:	10c00104 	addi	r3,r2,4
 200c54c:	e0fff715 	stw	r3,-36(fp)
 200c550:	10000015 	stw	zero,0(r2)
 200c554:	e0bff717 	ldw	r2,-36(fp)
 200c558:	10c00104 	addi	r3,r2,4
 200c55c:	e0fff715 	stw	r3,-36(fp)
 200c560:	10000015 	stw	zero,0(r2)
 200c564:	e0bff717 	ldw	r2,-36(fp)
 200c568:	10c00104 	addi	r3,r2,4
 200c56c:	e0fff715 	stw	r3,-36(fp)
 200c570:	10000015 	stw	zero,0(r2)
 200c574:	e0bff717 	ldw	r2,-36(fp)
 200c578:	10c00104 	addi	r3,r2,4
 200c57c:	e0fff715 	stw	r3,-36(fp)
 200c580:	10000015 	stw	zero,0(r2)
 200c584:	e0bff717 	ldw	r2,-36(fp)
 200c588:	10000015 	stw	zero,0(r2)
 200c58c:	00000406 	br	200c5a0 <_calloc_r+0x14c>
 200c590:	e1bffc17 	ldw	r6,-16(fp)
 200c594:	000b883a 	mov	r5,zero
 200c598:	e13ff917 	ldw	r4,-28(fp)
 200c59c:	20081000 	call	2008100 <memset>
    return mem;
 200c5a0:	e0bff917 	ldw	r2,-28(fp)
  }
}
 200c5a4:	e037883a 	mov	sp,fp
 200c5a8:	dfc00117 	ldw	ra,4(sp)
 200c5ac:	df000017 	ldw	fp,0(sp)
 200c5b0:	dec00204 	addi	sp,sp,8
 200c5b4:	f800283a 	ret

0200c5b8 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 200c5b8:	defffa04 	addi	sp,sp,-24
 200c5bc:	dfc00515 	stw	ra,20(sp)
 200c5c0:	df000415 	stw	fp,16(sp)
 200c5c4:	dc000315 	stw	r16,12(sp)
 200c5c8:	df000404 	addi	fp,sp,16
 200c5cc:	e13ffe15 	stw	r4,-8(fp)
 200c5d0:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 200c5d4:	8000021e 	bne	r16,zero,200c5e0 <_fclose_r+0x28>
    return (0);			/* on NULL */
 200c5d8:	0005883a 	mov	r2,zero
 200c5dc:	00003b06 	br	200c6cc <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 200c5e0:	e0bffe17 	ldw	r2,-8(fp)
 200c5e4:	e0bffd15 	stw	r2,-12(fp)
 200c5e8:	e0bffd17 	ldw	r2,-12(fp)
 200c5ec:	10000526 	beq	r2,zero,200c604 <_fclose_r+0x4c>
 200c5f0:	e0bffd17 	ldw	r2,-12(fp)
 200c5f4:	10800e17 	ldw	r2,56(r2)
 200c5f8:	1000021e 	bne	r2,zero,200c604 <_fclose_r+0x4c>
 200c5fc:	e13ffd17 	ldw	r4,-12(fp)
 200c600:	20057d80 	call	20057d8 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 200c604:	8080030b 	ldhu	r2,12(r16)
 200c608:	10bfffcc 	andi	r2,r2,65535
 200c60c:	10a0001c 	xori	r2,r2,32768
 200c610:	10a00004 	addi	r2,r2,-32768
 200c614:	1000021e 	bne	r2,zero,200c620 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 200c618:	0005883a 	mov	r2,zero
 200c61c:	00002b06 	br	200c6cc <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 200c620:	800b883a 	mov	r5,r16
 200c624:	e13ffe17 	ldw	r4,-8(fp)
 200c628:	20050540 	call	2005054 <__sflush_r>
 200c62c:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 200c630:	80800b17 	ldw	r2,44(r16)
 200c634:	10000826 	beq	r2,zero,200c658 <_fclose_r+0xa0>
 200c638:	80800b17 	ldw	r2,44(r16)
 200c63c:	80c00717 	ldw	r3,28(r16)
 200c640:	180b883a 	mov	r5,r3
 200c644:	e13ffe17 	ldw	r4,-8(fp)
 200c648:	103ee83a 	callr	r2
 200c64c:	1000020e 	bge	r2,zero,200c658 <_fclose_r+0xa0>
    r = EOF;
 200c650:	00bfffc4 	movi	r2,-1
 200c654:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 200c658:	8080030b 	ldhu	r2,12(r16)
 200c65c:	10bfffcc 	andi	r2,r2,65535
 200c660:	1080200c 	andi	r2,r2,128
 200c664:	10000426 	beq	r2,zero,200c678 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 200c668:	80800417 	ldw	r2,16(r16)
 200c66c:	100b883a 	mov	r5,r2
 200c670:	e13ffe17 	ldw	r4,-8(fp)
 200c674:	20059f80 	call	20059f8 <_free_r>
  if (HASUB (fp))
 200c678:	80800c17 	ldw	r2,48(r16)
 200c67c:	10000826 	beq	r2,zero,200c6a0 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 200c680:	80c00c17 	ldw	r3,48(r16)
 200c684:	80801004 	addi	r2,r16,64
 200c688:	18800426 	beq	r3,r2,200c69c <_fclose_r+0xe4>
 200c68c:	80800c17 	ldw	r2,48(r16)
 200c690:	100b883a 	mov	r5,r2
 200c694:	e13ffe17 	ldw	r4,-8(fp)
 200c698:	20059f80 	call	20059f8 <_free_r>
 200c69c:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 200c6a0:	80801117 	ldw	r2,68(r16)
 200c6a4:	10000526 	beq	r2,zero,200c6bc <_fclose_r+0x104>
    FREELB (rptr, fp);
 200c6a8:	80801117 	ldw	r2,68(r16)
 200c6ac:	100b883a 	mov	r5,r2
 200c6b0:	e13ffe17 	ldw	r4,-8(fp)
 200c6b4:	20059f80 	call	20059f8 <_free_r>
 200c6b8:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 200c6bc:	20058b00 	call	20058b0 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 200c6c0:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 200c6c4:	20058d00 	call	20058d0 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 200c6c8:	e0bffc17 	ldw	r2,-16(fp)
}
 200c6cc:	e6ffff04 	addi	sp,fp,-4
 200c6d0:	dfc00217 	ldw	ra,8(sp)
 200c6d4:	df000117 	ldw	fp,4(sp)
 200c6d8:	dc000017 	ldw	r16,0(sp)
 200c6dc:	dec00304 	addi	sp,sp,12
 200c6e0:	f800283a 	ret

0200c6e4 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 200c6e4:	defffe04 	addi	sp,sp,-8
 200c6e8:	dfc00115 	stw	ra,4(sp)
 200c6ec:	df000015 	stw	fp,0(sp)
 200c6f0:	d839883a 	mov	fp,sp
 200c6f4:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 200c6f8:	d0a00017 	ldw	r2,-32768(gp)
 200c6fc:	180b883a 	mov	r5,r3
 200c700:	1009883a 	mov	r4,r2
 200c704:	200c5b80 	call	200c5b8 <_fclose_r>
}
 200c708:	e037883a 	mov	sp,fp
 200c70c:	dfc00117 	ldw	ra,4(sp)
 200c710:	df000017 	ldw	fp,0(sp)
 200c714:	dec00204 	addi	sp,sp,8
 200c718:	f800283a 	ret

0200c71c <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 200c71c:	defff804 	addi	sp,sp,-32
 200c720:	dfc00715 	stw	ra,28(sp)
 200c724:	df000615 	stw	fp,24(sp)
 200c728:	df000604 	addi	fp,sp,24
 200c72c:	e13ffd15 	stw	r4,-12(fp)
 200c730:	e17ffe15 	stw	r5,-8(fp)
 200c734:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 200c738:	200695c0 	call	200695c <__locale_mb_cur_max>
 200c73c:	10800058 	cmpnei	r2,r2,1
 200c740:	10000a1e 	bne	r2,zero,200c76c <__fputwc+0x50>
 200c744:	e0bffe17 	ldw	r2,-8(fp)
 200c748:	0080080e 	bge	zero,r2,200c76c <__fputwc+0x50>
 200c74c:	e0bffe17 	ldw	r2,-8(fp)
 200c750:	10804008 	cmpgei	r2,r2,256
 200c754:	1000051e 	bne	r2,zero,200c76c <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 200c758:	e0bffe17 	ldw	r2,-8(fp)
 200c75c:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 200c760:	00800044 	movi	r2,1
 200c764:	e0bffb15 	stw	r2,-20(fp)
 200c768:	00001406 	br	200c7bc <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 200c76c:	e0bfff17 	ldw	r2,-4(fp)
 200c770:	10c01704 	addi	r3,r2,92
 200c774:	e0bffc04 	addi	r2,fp,-16
 200c778:	180f883a 	mov	r7,r3
 200c77c:	e1bffe17 	ldw	r6,-8(fp)
 200c780:	100b883a 	mov	r5,r2
 200c784:	e13ffd17 	ldw	r4,-12(fp)
 200c788:	200cd500 	call	200cd50 <_wcrtomb_r>
 200c78c:	e0bffb15 	stw	r2,-20(fp)
 200c790:	e0bffb17 	ldw	r2,-20(fp)
 200c794:	10bfffd8 	cmpnei	r2,r2,-1
 200c798:	1000081e 	bne	r2,zero,200c7bc <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 200c79c:	e0bfff17 	ldw	r2,-4(fp)
 200c7a0:	1080030b 	ldhu	r2,12(r2)
 200c7a4:	10801014 	ori	r2,r2,64
 200c7a8:	1007883a 	mov	r3,r2
 200c7ac:	e0bfff17 	ldw	r2,-4(fp)
 200c7b0:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 200c7b4:	00bfffc4 	movi	r2,-1
 200c7b8:	00005006 	br	200c8fc <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 200c7bc:	e03ffa15 	stw	zero,-24(fp)
 200c7c0:	00004a06 	br	200c8ec <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 200c7c4:	e0bfff17 	ldw	r2,-4(fp)
 200c7c8:	10800217 	ldw	r2,8(r2)
 200c7cc:	10ffffc4 	addi	r3,r2,-1
 200c7d0:	e0bfff17 	ldw	r2,-4(fp)
 200c7d4:	10c00215 	stw	r3,8(r2)
 200c7d8:	e0bfff17 	ldw	r2,-4(fp)
 200c7dc:	10800217 	ldw	r2,8(r2)
 200c7e0:	10002c0e 	bge	r2,zero,200c894 <__fputwc+0x178>
 200c7e4:	e0bfff17 	ldw	r2,-4(fp)
 200c7e8:	10c00217 	ldw	r3,8(r2)
 200c7ec:	e0bfff17 	ldw	r2,-4(fp)
 200c7f0:	10800617 	ldw	r2,24(r2)
 200c7f4:	18801c16 	blt	r3,r2,200c868 <__fputwc+0x14c>
 200c7f8:	e0bfff17 	ldw	r2,-4(fp)
 200c7fc:	10800017 	ldw	r2,0(r2)
 200c800:	e13ffc04 	addi	r4,fp,-16
 200c804:	e0fffa17 	ldw	r3,-24(fp)
 200c808:	20c7883a 	add	r3,r4,r3
 200c80c:	18c00003 	ldbu	r3,0(r3)
 200c810:	10c00005 	stb	r3,0(r2)
 200c814:	e0bfff17 	ldw	r2,-4(fp)
 200c818:	10800017 	ldw	r2,0(r2)
 200c81c:	10800003 	ldbu	r2,0(r2)
 200c820:	10803fcc 	andi	r2,r2,255
 200c824:	108002a0 	cmpeqi	r2,r2,10
 200c828:	1000091e 	bne	r2,zero,200c850 <__fputwc+0x134>
 200c82c:	e0bfff17 	ldw	r2,-4(fp)
 200c830:	10800017 	ldw	r2,0(r2)
 200c834:	11000044 	addi	r4,r2,1
 200c838:	e0ffff17 	ldw	r3,-4(fp)
 200c83c:	19000015 	stw	r4,0(r3)
 200c840:	10800003 	ldbu	r2,0(r2)
 200c844:	10803fcc 	andi	r2,r2,255
 200c848:	10bfffe0 	cmpeqi	r2,r2,-1
 200c84c:	00002006 	br	200c8d0 <__fputwc+0x1b4>
 200c850:	e1bfff17 	ldw	r6,-4(fp)
 200c854:	01400284 	movi	r5,10
 200c858:	e13ffd17 	ldw	r4,-12(fp)
 200c85c:	200cba80 	call	200cba8 <__swbuf_r>
 200c860:	10bfffe0 	cmpeqi	r2,r2,-1
 200c864:	00001a06 	br	200c8d0 <__fputwc+0x1b4>
 200c868:	e0fffc04 	addi	r3,fp,-16
 200c86c:	e0bffa17 	ldw	r2,-24(fp)
 200c870:	1885883a 	add	r2,r3,r2
 200c874:	10800003 	ldbu	r2,0(r2)
 200c878:	10803fcc 	andi	r2,r2,255
 200c87c:	e1bfff17 	ldw	r6,-4(fp)
 200c880:	100b883a 	mov	r5,r2
 200c884:	e13ffd17 	ldw	r4,-12(fp)
 200c888:	200cba80 	call	200cba8 <__swbuf_r>
 200c88c:	10bfffe0 	cmpeqi	r2,r2,-1
 200c890:	00000f06 	br	200c8d0 <__fputwc+0x1b4>
 200c894:	e0bfff17 	ldw	r2,-4(fp)
 200c898:	10800017 	ldw	r2,0(r2)
 200c89c:	e13ffc04 	addi	r4,fp,-16
 200c8a0:	e0fffa17 	ldw	r3,-24(fp)
 200c8a4:	20c7883a 	add	r3,r4,r3
 200c8a8:	18c00003 	ldbu	r3,0(r3)
 200c8ac:	10c00005 	stb	r3,0(r2)
 200c8b0:	e0bfff17 	ldw	r2,-4(fp)
 200c8b4:	10800017 	ldw	r2,0(r2)
 200c8b8:	11000044 	addi	r4,r2,1
 200c8bc:	e0ffff17 	ldw	r3,-4(fp)
 200c8c0:	19000015 	stw	r4,0(r3)
 200c8c4:	10800003 	ldbu	r2,0(r2)
 200c8c8:	10803fcc 	andi	r2,r2,255
 200c8cc:	10bfffe0 	cmpeqi	r2,r2,-1
 200c8d0:	10803fcc 	andi	r2,r2,255
 200c8d4:	10000226 	beq	r2,zero,200c8e0 <__fputwc+0x1c4>
      return WEOF;
 200c8d8:	00bfffc4 	movi	r2,-1
 200c8dc:	00000706 	br	200c8fc <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 200c8e0:	e0bffa17 	ldw	r2,-24(fp)
 200c8e4:	10800044 	addi	r2,r2,1
 200c8e8:	e0bffa15 	stw	r2,-24(fp)
 200c8ec:	e0fffa17 	ldw	r3,-24(fp)
 200c8f0:	e0bffb17 	ldw	r2,-20(fp)
 200c8f4:	18bfb336 	bltu	r3,r2,200c7c4 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 200c8f8:	e0bffe17 	ldw	r2,-8(fp)
}
 200c8fc:	e037883a 	mov	sp,fp
 200c900:	dfc00117 	ldw	ra,4(sp)
 200c904:	df000017 	ldw	fp,0(sp)
 200c908:	dec00204 	addi	sp,sp,8
 200c90c:	f800283a 	ret

0200c910 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 200c910:	defffa04 	addi	sp,sp,-24
 200c914:	dfc00515 	stw	ra,20(sp)
 200c918:	df000415 	stw	fp,16(sp)
 200c91c:	df000404 	addi	fp,sp,16
 200c920:	e13ffd15 	stw	r4,-12(fp)
 200c924:	e17ffe15 	stw	r5,-8(fp)
 200c928:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 200c92c:	e0bfff17 	ldw	r2,-4(fp)
 200c930:	1080030b 	ldhu	r2,12(r2)
 200c934:	10bfffcc 	andi	r2,r2,65535
 200c938:	1088000c 	andi	r2,r2,8192
 200c93c:	10000b1e 	bne	r2,zero,200c96c <_fputwc_r+0x5c>
 200c940:	e0bfff17 	ldw	r2,-4(fp)
 200c944:	1080030b 	ldhu	r2,12(r2)
 200c948:	10880014 	ori	r2,r2,8192
 200c94c:	1007883a 	mov	r3,r2
 200c950:	e0bfff17 	ldw	r2,-4(fp)
 200c954:	10c0030d 	sth	r3,12(r2)
 200c958:	e0bfff17 	ldw	r2,-4(fp)
 200c95c:	10801917 	ldw	r2,100(r2)
 200c960:	10c80014 	ori	r3,r2,8192
 200c964:	e0bfff17 	ldw	r2,-4(fp)
 200c968:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 200c96c:	e1bfff17 	ldw	r6,-4(fp)
 200c970:	e17ffe17 	ldw	r5,-8(fp)
 200c974:	e13ffd17 	ldw	r4,-12(fp)
 200c978:	200c71c0 	call	200c71c <__fputwc>
 200c97c:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 200c980:	e0bffc17 	ldw	r2,-16(fp)
}
 200c984:	e037883a 	mov	sp,fp
 200c988:	dfc00117 	ldw	ra,4(sp)
 200c98c:	df000017 	ldw	fp,0(sp)
 200c990:	dec00204 	addi	sp,sp,8
 200c994:	f800283a 	ret

0200c998 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 200c998:	defffa04 	addi	sp,sp,-24
 200c99c:	dfc00515 	stw	ra,20(sp)
 200c9a0:	df000415 	stw	fp,16(sp)
 200c9a4:	df000404 	addi	fp,sp,16
 200c9a8:	e13ffe15 	stw	r4,-8(fp)
 200c9ac:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 200c9b0:	d0a00017 	ldw	r2,-32768(gp)
 200c9b4:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 200c9b8:	e0bffc17 	ldw	r2,-16(fp)
 200c9bc:	e0bffd15 	stw	r2,-12(fp)
 200c9c0:	e0bffd17 	ldw	r2,-12(fp)
 200c9c4:	10000526 	beq	r2,zero,200c9dc <fputwc+0x44>
 200c9c8:	e0bffd17 	ldw	r2,-12(fp)
 200c9cc:	10800e17 	ldw	r2,56(r2)
 200c9d0:	1000021e 	bne	r2,zero,200c9dc <fputwc+0x44>
 200c9d4:	e13ffd17 	ldw	r4,-12(fp)
 200c9d8:	20057d80 	call	20057d8 <__sinit>
  return _fputwc_r (reent, wc, fp);
 200c9dc:	e1bfff17 	ldw	r6,-4(fp)
 200c9e0:	e17ffe17 	ldw	r5,-8(fp)
 200c9e4:	e13ffc17 	ldw	r4,-16(fp)
 200c9e8:	200c9100 	call	200c910 <_fputwc_r>
}
 200c9ec:	e037883a 	mov	sp,fp
 200c9f0:	dfc00117 	ldw	ra,4(sp)
 200c9f4:	df000017 	ldw	fp,0(sp)
 200c9f8:	dec00204 	addi	sp,sp,8
 200c9fc:	f800283a 	ret

0200ca00 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 200ca00:	defffa04 	addi	sp,sp,-24
 200ca04:	dfc00515 	stw	ra,20(sp)
 200ca08:	df000415 	stw	fp,16(sp)
 200ca0c:	df000404 	addi	fp,sp,16
 200ca10:	e13ffd15 	stw	r4,-12(fp)
 200ca14:	e17ffe15 	stw	r5,-8(fp)
 200ca18:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 200ca1c:	d026df15 	stw	zero,-25732(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 200ca20:	e17fff17 	ldw	r5,-4(fp)
 200ca24:	e13ffe17 	ldw	r4,-8(fp)
 200ca28:	20101e40 	call	20101e4 <fstat>
 200ca2c:	e0bffc15 	stw	r2,-16(fp)
 200ca30:	e0bffc17 	ldw	r2,-16(fp)
 200ca34:	10bfffd8 	cmpnei	r2,r2,-1
 200ca38:	1000051e 	bne	r2,zero,200ca50 <_fstat_r+0x50>
 200ca3c:	d0a6df17 	ldw	r2,-25732(gp)
 200ca40:	10000326 	beq	r2,zero,200ca50 <_fstat_r+0x50>
    ptr->_errno = errno;
 200ca44:	d0e6df17 	ldw	r3,-25732(gp)
 200ca48:	e0bffd17 	ldw	r2,-12(fp)
 200ca4c:	10c00015 	stw	r3,0(r2)
  return ret;
 200ca50:	e0bffc17 	ldw	r2,-16(fp)
}
 200ca54:	e037883a 	mov	sp,fp
 200ca58:	dfc00117 	ldw	ra,4(sp)
 200ca5c:	df000017 	ldw	fp,0(sp)
 200ca60:	dec00204 	addi	sp,sp,8
 200ca64:	f800283a 	ret

0200ca68 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 200ca68:	defffb04 	addi	sp,sp,-20
 200ca6c:	dfc00415 	stw	ra,16(sp)
 200ca70:	df000315 	stw	fp,12(sp)
 200ca74:	df000304 	addi	fp,sp,12
 200ca78:	e13ffe15 	stw	r4,-8(fp)
 200ca7c:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 200ca80:	d026df15 	stw	zero,-25732(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 200ca84:	e13fff17 	ldw	r4,-4(fp)
 200ca88:	20102d00 	call	20102d0 <isatty>
 200ca8c:	e0bffd15 	stw	r2,-12(fp)
 200ca90:	e0bffd17 	ldw	r2,-12(fp)
 200ca94:	10bfffd8 	cmpnei	r2,r2,-1
 200ca98:	1000051e 	bne	r2,zero,200cab0 <_isatty_r+0x48>
 200ca9c:	d0a6df17 	ldw	r2,-25732(gp)
 200caa0:	10000326 	beq	r2,zero,200cab0 <_isatty_r+0x48>
    ptr->_errno = errno;
 200caa4:	d0e6df17 	ldw	r3,-25732(gp)
 200caa8:	e0bffe17 	ldw	r2,-8(fp)
 200caac:	10c00015 	stw	r3,0(r2)
  return ret;
 200cab0:	e0bffd17 	ldw	r2,-12(fp)
}
 200cab4:	e037883a 	mov	sp,fp
 200cab8:	dfc00117 	ldw	ra,4(sp)
 200cabc:	df000017 	ldw	fp,0(sp)
 200cac0:	dec00204 	addi	sp,sp,8
 200cac4:	f800283a 	ret

0200cac8 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 200cac8:	defff904 	addi	sp,sp,-28
 200cacc:	dfc00615 	stw	ra,24(sp)
 200cad0:	df000515 	stw	fp,20(sp)
 200cad4:	df000504 	addi	fp,sp,20
 200cad8:	e13ffc15 	stw	r4,-16(fp)
 200cadc:	e17ffd15 	stw	r5,-12(fp)
 200cae0:	e1bffe15 	stw	r6,-8(fp)
 200cae4:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 200cae8:	d026df15 	stw	zero,-25732(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 200caec:	e1bfff17 	ldw	r6,-4(fp)
 200caf0:	e17ffe17 	ldw	r5,-8(fp)
 200caf4:	e13ffd17 	ldw	r4,-12(fp)
 200caf8:	201049c0 	call	201049c <lseek>
 200cafc:	e0bffb15 	stw	r2,-20(fp)
 200cb00:	e0bffb17 	ldw	r2,-20(fp)
 200cb04:	10bfffd8 	cmpnei	r2,r2,-1
 200cb08:	1000051e 	bne	r2,zero,200cb20 <_lseek_r+0x58>
 200cb0c:	d0a6df17 	ldw	r2,-25732(gp)
 200cb10:	10000326 	beq	r2,zero,200cb20 <_lseek_r+0x58>
    ptr->_errno = errno;
 200cb14:	d0e6df17 	ldw	r3,-25732(gp)
 200cb18:	e0bffc17 	ldw	r2,-16(fp)
 200cb1c:	10c00015 	stw	r3,0(r2)
  return ret;
 200cb20:	e0bffb17 	ldw	r2,-20(fp)
}
 200cb24:	e037883a 	mov	sp,fp
 200cb28:	dfc00117 	ldw	ra,4(sp)
 200cb2c:	df000017 	ldw	fp,0(sp)
 200cb30:	dec00204 	addi	sp,sp,8
 200cb34:	f800283a 	ret

0200cb38 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 200cb38:	defff904 	addi	sp,sp,-28
 200cb3c:	dfc00615 	stw	ra,24(sp)
 200cb40:	df000515 	stw	fp,20(sp)
 200cb44:	df000504 	addi	fp,sp,20
 200cb48:	e13ffc15 	stw	r4,-16(fp)
 200cb4c:	e17ffd15 	stw	r5,-12(fp)
 200cb50:	e1bffe15 	stw	r6,-8(fp)
 200cb54:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 200cb58:	d026df15 	stw	zero,-25732(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 200cb5c:	e1bfff17 	ldw	r6,-4(fp)
 200cb60:	e17ffe17 	ldw	r5,-8(fp)
 200cb64:	e13ffd17 	ldw	r4,-12(fp)
 200cb68:	20106700 	call	2010670 <read>
 200cb6c:	e0bffb15 	stw	r2,-20(fp)
 200cb70:	e0bffb17 	ldw	r2,-20(fp)
 200cb74:	10bfffd8 	cmpnei	r2,r2,-1
 200cb78:	1000051e 	bne	r2,zero,200cb90 <_read_r+0x58>
 200cb7c:	d0a6df17 	ldw	r2,-25732(gp)
 200cb80:	10000326 	beq	r2,zero,200cb90 <_read_r+0x58>
    ptr->_errno = errno;
 200cb84:	d0e6df17 	ldw	r3,-25732(gp)
 200cb88:	e0bffc17 	ldw	r2,-16(fp)
 200cb8c:	10c00015 	stw	r3,0(r2)
  return ret;
 200cb90:	e0bffb17 	ldw	r2,-20(fp)
}
 200cb94:	e037883a 	mov	sp,fp
 200cb98:	dfc00117 	ldw	ra,4(sp)
 200cb9c:	df000017 	ldw	fp,0(sp)
 200cba0:	dec00204 	addi	sp,sp,8
 200cba4:	f800283a 	ret

0200cba8 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 200cba8:	defff904 	addi	sp,sp,-28
 200cbac:	dfc00615 	stw	ra,24(sp)
 200cbb0:	df000515 	stw	fp,20(sp)
 200cbb4:	dc800415 	stw	r18,16(sp)
 200cbb8:	dc400315 	stw	r17,12(sp)
 200cbbc:	dc000215 	stw	r16,8(sp)
 200cbc0:	df000504 	addi	fp,sp,20
 200cbc4:	e13ffc15 	stw	r4,-16(fp)
 200cbc8:	2825883a 	mov	r18,r5
 200cbcc:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 200cbd0:	e0bffc17 	ldw	r2,-16(fp)
 200cbd4:	e0bffb15 	stw	r2,-20(fp)
 200cbd8:	e0bffb17 	ldw	r2,-20(fp)
 200cbdc:	10000526 	beq	r2,zero,200cbf4 <__swbuf_r+0x4c>
 200cbe0:	e0bffb17 	ldw	r2,-20(fp)
 200cbe4:	10800e17 	ldw	r2,56(r2)
 200cbe8:	1000021e 	bne	r2,zero,200cbf4 <__swbuf_r+0x4c>
 200cbec:	e13ffb17 	ldw	r4,-20(fp)
 200cbf0:	20057d80 	call	20057d8 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 200cbf4:	80800617 	ldw	r2,24(r16)
 200cbf8:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 200cbfc:	8080030b 	ldhu	r2,12(r16)
 200cc00:	10bfffcc 	andi	r2,r2,65535
 200cc04:	1080020c 	andi	r2,r2,8
 200cc08:	10000226 	beq	r2,zero,200cc14 <__swbuf_r+0x6c>
 200cc0c:	80800417 	ldw	r2,16(r16)
 200cc10:	1000061e 	bne	r2,zero,200cc2c <__swbuf_r+0x84>
 200cc14:	800b883a 	mov	r5,r16
 200cc18:	e13ffc17 	ldw	r4,-16(fp)
 200cc1c:	2002f880 	call	2002f88 <__swsetup_r>
 200cc20:	10000226 	beq	r2,zero,200cc2c <__swbuf_r+0x84>
    return EOF;
 200cc24:	00bfffc4 	movi	r2,-1
 200cc28:	00003106 	br	200ccf0 <__swbuf_r+0x148>
  c = (unsigned char) c;
 200cc2c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 200cc30:	8080030b 	ldhu	r2,12(r16)
 200cc34:	10bfffcc 	andi	r2,r2,65535
 200cc38:	1088000c 	andi	r2,r2,8192
 200cc3c:	1000071e 	bne	r2,zero,200cc5c <__swbuf_r+0xb4>
 200cc40:	8080030b 	ldhu	r2,12(r16)
 200cc44:	10880014 	ori	r2,r2,8192
 200cc48:	8080030d 	sth	r2,12(r16)
 200cc4c:	80c01917 	ldw	r3,100(r16)
 200cc50:	00b7ffc4 	movi	r2,-8193
 200cc54:	1884703a 	and	r2,r3,r2
 200cc58:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 200cc5c:	80800017 	ldw	r2,0(r16)
 200cc60:	1007883a 	mov	r3,r2
 200cc64:	80800417 	ldw	r2,16(r16)
 200cc68:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 200cc6c:	80800517 	ldw	r2,20(r16)
 200cc70:	88800716 	blt	r17,r2,200cc90 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 200cc74:	800b883a 	mov	r5,r16
 200cc78:	e13ffc17 	ldw	r4,-16(fp)
 200cc7c:	20053580 	call	2005358 <_fflush_r>
 200cc80:	10000226 	beq	r2,zero,200cc8c <__swbuf_r+0xe4>
	return EOF;
 200cc84:	00bfffc4 	movi	r2,-1
 200cc88:	00001906 	br	200ccf0 <__swbuf_r+0x148>
      n = 0;
 200cc8c:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 200cc90:	80800217 	ldw	r2,8(r16)
 200cc94:	10bfffc4 	addi	r2,r2,-1
 200cc98:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 200cc9c:	80800017 	ldw	r2,0(r16)
 200cca0:	10c00044 	addi	r3,r2,1
 200cca4:	80c00015 	stw	r3,0(r16)
 200cca8:	9007883a 	mov	r3,r18
 200ccac:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 200ccb0:	8c400044 	addi	r17,r17,1
 200ccb4:	80800517 	ldw	r2,20(r16)
 200ccb8:	88800626 	beq	r17,r2,200ccd4 <__swbuf_r+0x12c>
 200ccbc:	8080030b 	ldhu	r2,12(r16)
 200ccc0:	10bfffcc 	andi	r2,r2,65535
 200ccc4:	1080004c 	andi	r2,r2,1
 200ccc8:	10000826 	beq	r2,zero,200ccec <__swbuf_r+0x144>
 200cccc:	90800298 	cmpnei	r2,r18,10
 200ccd0:	1000061e 	bne	r2,zero,200ccec <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 200ccd4:	800b883a 	mov	r5,r16
 200ccd8:	e13ffc17 	ldw	r4,-16(fp)
 200ccdc:	20053580 	call	2005358 <_fflush_r>
 200cce0:	10000226 	beq	r2,zero,200ccec <__swbuf_r+0x144>
      return EOF;
 200cce4:	00bfffc4 	movi	r2,-1
 200cce8:	00000106 	br	200ccf0 <__swbuf_r+0x148>
  return c;
 200ccec:	9005883a 	mov	r2,r18
}
 200ccf0:	e6fffd04 	addi	sp,fp,-12
 200ccf4:	dfc00417 	ldw	ra,16(sp)
 200ccf8:	df000317 	ldw	fp,12(sp)
 200ccfc:	dc800217 	ldw	r18,8(sp)
 200cd00:	dc400117 	ldw	r17,4(sp)
 200cd04:	dc000017 	ldw	r16,0(sp)
 200cd08:	dec00504 	addi	sp,sp,20
 200cd0c:	f800283a 	ret

0200cd10 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 200cd10:	defffe04 	addi	sp,sp,-8
 200cd14:	dfc00115 	stw	ra,4(sp)
 200cd18:	df000015 	stw	fp,0(sp)
 200cd1c:	d839883a 	mov	fp,sp
 200cd20:	2007883a 	mov	r3,r4
 200cd24:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 200cd28:	d0a00017 	ldw	r2,-32768(gp)
 200cd2c:	200d883a 	mov	r6,r4
 200cd30:	180b883a 	mov	r5,r3
 200cd34:	1009883a 	mov	r4,r2
 200cd38:	200cba80 	call	200cba8 <__swbuf_r>
}
 200cd3c:	e037883a 	mov	sp,fp
 200cd40:	dfc00117 	ldw	ra,4(sp)
 200cd44:	df000017 	ldw	fp,0(sp)
 200cd48:	dec00204 	addi	sp,sp,8
 200cd4c:	f800283a 	ret

0200cd50 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 200cd50:	defff404 	addi	sp,sp,-48
 200cd54:	dfc00b15 	stw	ra,44(sp)
 200cd58:	df000a15 	stw	fp,40(sp)
 200cd5c:	dc000915 	stw	r16,36(sp)
 200cd60:	df000a04 	addi	fp,sp,40
 200cd64:	e13ffb15 	stw	r4,-20(fp)
 200cd68:	e17ffc15 	stw	r5,-16(fp)
 200cd6c:	e1bffd15 	stw	r6,-12(fp)
 200cd70:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 200cd74:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 200cd78:	e0bffc17 	ldw	r2,-16(fp)
 200cd7c:	10000d1e 	bne	r2,zero,200cdb4 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 200cd80:	d4200517 	ldw	r16,-32748(gp)
 200cd84:	20069380 	call	2006938 <__locale_charset>
 200cd88:	1009883a 	mov	r4,r2
 200cd8c:	e0fff804 	addi	r3,fp,-32
 200cd90:	e0bffe17 	ldw	r2,-8(fp)
 200cd94:	d8800015 	stw	r2,0(sp)
 200cd98:	200f883a 	mov	r7,r4
 200cd9c:	000d883a 	mov	r6,zero
 200cda0:	180b883a 	mov	r5,r3
 200cda4:	e13ffb17 	ldw	r4,-20(fp)
 200cda8:	803ee83a 	callr	r16
 200cdac:	e0bff715 	stw	r2,-36(fp)
 200cdb0:	00000b06 	br	200cde0 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 200cdb4:	d4200517 	ldw	r16,-32748(gp)
 200cdb8:	20069380 	call	2006938 <__locale_charset>
 200cdbc:	1007883a 	mov	r3,r2
 200cdc0:	e0bffe17 	ldw	r2,-8(fp)
 200cdc4:	d8800015 	stw	r2,0(sp)
 200cdc8:	180f883a 	mov	r7,r3
 200cdcc:	e1bffd17 	ldw	r6,-12(fp)
 200cdd0:	e17ffc17 	ldw	r5,-16(fp)
 200cdd4:	e13ffb17 	ldw	r4,-20(fp)
 200cdd8:	803ee83a 	callr	r16
 200cddc:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 200cde0:	e0bff717 	ldw	r2,-36(fp)
 200cde4:	10bfffd8 	cmpnei	r2,r2,-1
 200cde8:	1000071e 	bne	r2,zero,200ce08 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 200cdec:	e0bffe17 	ldw	r2,-8(fp)
 200cdf0:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 200cdf4:	e0bffb17 	ldw	r2,-20(fp)
 200cdf8:	00c02284 	movi	r3,138
 200cdfc:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 200ce00:	00bfffc4 	movi	r2,-1
 200ce04:	00000106 	br	200ce0c <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 200ce08:	e0bff717 	ldw	r2,-36(fp)
}
 200ce0c:	e6ffff04 	addi	sp,fp,-4
 200ce10:	dfc00217 	ldw	ra,8(sp)
 200ce14:	df000117 	ldw	fp,4(sp)
 200ce18:	dc000017 	ldw	r16,0(sp)
 200ce1c:	dec00304 	addi	sp,sp,12
 200ce20:	f800283a 	ret

0200ce24 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 200ce24:	defff404 	addi	sp,sp,-48
 200ce28:	dfc00b15 	stw	ra,44(sp)
 200ce2c:	df000a15 	stw	fp,40(sp)
 200ce30:	dc000915 	stw	r16,36(sp)
 200ce34:	df000a04 	addi	fp,sp,40
 200ce38:	e13ffc15 	stw	r4,-16(fp)
 200ce3c:	e17ffd15 	stw	r5,-12(fp)
 200ce40:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 200ce44:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 200ce48:	d0a00017 	ldw	r2,-32768(gp)
 200ce4c:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 200ce50:	e0bffc17 	ldw	r2,-16(fp)
 200ce54:	10000d1e 	bne	r2,zero,200ce8c <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 200ce58:	d4200517 	ldw	r16,-32748(gp)
 200ce5c:	20069380 	call	2006938 <__locale_charset>
 200ce60:	1009883a 	mov	r4,r2
 200ce64:	e0fff904 	addi	r3,fp,-28
 200ce68:	e0bffe17 	ldw	r2,-8(fp)
 200ce6c:	d8800015 	stw	r2,0(sp)
 200ce70:	200f883a 	mov	r7,r4
 200ce74:	000d883a 	mov	r6,zero
 200ce78:	180b883a 	mov	r5,r3
 200ce7c:	e13ff817 	ldw	r4,-32(fp)
 200ce80:	803ee83a 	callr	r16
 200ce84:	e0bff715 	stw	r2,-36(fp)
 200ce88:	00000b06 	br	200ceb8 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 200ce8c:	d4200517 	ldw	r16,-32748(gp)
 200ce90:	20069380 	call	2006938 <__locale_charset>
 200ce94:	1007883a 	mov	r3,r2
 200ce98:	e0bffe17 	ldw	r2,-8(fp)
 200ce9c:	d8800015 	stw	r2,0(sp)
 200cea0:	180f883a 	mov	r7,r3
 200cea4:	e1bffd17 	ldw	r6,-12(fp)
 200cea8:	e17ffc17 	ldw	r5,-16(fp)
 200ceac:	e13ff817 	ldw	r4,-32(fp)
 200ceb0:	803ee83a 	callr	r16
 200ceb4:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 200ceb8:	e0bff717 	ldw	r2,-36(fp)
 200cebc:	10bfffd8 	cmpnei	r2,r2,-1
 200cec0:	1000071e 	bne	r2,zero,200cee0 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 200cec4:	e0bffe17 	ldw	r2,-8(fp)
 200cec8:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 200cecc:	e0bff817 	ldw	r2,-32(fp)
 200ced0:	00c02284 	movi	r3,138
 200ced4:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 200ced8:	00bfffc4 	movi	r2,-1
 200cedc:	00000106 	br	200cee4 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 200cee0:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200cee4:	e6ffff04 	addi	sp,fp,-4
 200cee8:	dfc00217 	ldw	ra,8(sp)
 200ceec:	df000117 	ldw	fp,4(sp)
 200cef0:	dc000017 	ldw	r16,0(sp)
 200cef4:	dec00304 	addi	sp,sp,12
 200cef8:	f800283a 	ret

0200cefc <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 200cefc:	defff804 	addi	sp,sp,-32
 200cf00:	dfc00715 	stw	ra,28(sp)
 200cf04:	df000615 	stw	fp,24(sp)
 200cf08:	dc000515 	stw	r16,20(sp)
 200cf0c:	df000604 	addi	fp,sp,24
 200cf10:	e13ffb15 	stw	r4,-20(fp)
 200cf14:	e17ffc15 	stw	r5,-16(fp)
 200cf18:	e1bffd15 	stw	r6,-12(fp)
 200cf1c:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 200cf20:	d4200517 	ldw	r16,-32748(gp)
 200cf24:	20069380 	call	2006938 <__locale_charset>
 200cf28:	1007883a 	mov	r3,r2
 200cf2c:	e0bffe17 	ldw	r2,-8(fp)
 200cf30:	d8800015 	stw	r2,0(sp)
 200cf34:	180f883a 	mov	r7,r3
 200cf38:	e1bffd17 	ldw	r6,-12(fp)
 200cf3c:	e17ffc17 	ldw	r5,-16(fp)
 200cf40:	e13ffb17 	ldw	r4,-20(fp)
 200cf44:	803ee83a 	callr	r16
}
 200cf48:	e6ffff04 	addi	sp,fp,-4
 200cf4c:	dfc00217 	ldw	ra,8(sp)
 200cf50:	df000117 	ldw	fp,4(sp)
 200cf54:	dc000017 	ldw	r16,0(sp)
 200cf58:	dec00304 	addi	sp,sp,12
 200cf5c:	f800283a 	ret

0200cf60 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 200cf60:	defffa04 	addi	sp,sp,-24
 200cf64:	df000515 	stw	fp,20(sp)
 200cf68:	df000504 	addi	fp,sp,20
 200cf6c:	e13ffc15 	stw	r4,-16(fp)
 200cf70:	e17ffd15 	stw	r5,-12(fp)
 200cf74:	e1bffe15 	stw	r6,-8(fp)
 200cf78:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 200cf7c:	e0bffe17 	ldw	r2,-8(fp)
 200cf80:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 200cf84:	e0bffd17 	ldw	r2,-12(fp)
 200cf88:	1000021e 	bne	r2,zero,200cf94 <__ascii_wctomb+0x34>
    return 0;
 200cf8c:	0005883a 	mov	r2,zero
 200cf90:	00000d06 	br	200cfc8 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 200cf94:	e0bffb17 	ldw	r2,-20(fp)
 200cf98:	10804030 	cmpltui	r2,r2,256
 200cf9c:	1000051e 	bne	r2,zero,200cfb4 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 200cfa0:	e0bffc17 	ldw	r2,-16(fp)
 200cfa4:	00c02284 	movi	r3,138
 200cfa8:	10c00015 	stw	r3,0(r2)
      return -1;
 200cfac:	00bfffc4 	movi	r2,-1
 200cfb0:	00000506 	br	200cfc8 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 200cfb4:	e0bffb17 	ldw	r2,-20(fp)
 200cfb8:	1007883a 	mov	r3,r2
 200cfbc:	e0bffd17 	ldw	r2,-12(fp)
 200cfc0:	10c00005 	stb	r3,0(r2)
  return 1;
 200cfc4:	00800044 	movi	r2,1
}
 200cfc8:	e037883a 	mov	sp,fp
 200cfcc:	df000017 	ldw	fp,0(sp)
 200cfd0:	dec00104 	addi	sp,sp,4
 200cfd4:	f800283a 	ret

0200cfd8 <__udivdi3>:
 200cfd8:	defff504 	addi	sp,sp,-44
 200cfdc:	dcc00415 	stw	r19,16(sp)
 200cfe0:	dc000115 	stw	r16,4(sp)
 200cfe4:	dfc00a15 	stw	ra,40(sp)
 200cfe8:	df000915 	stw	fp,36(sp)
 200cfec:	ddc00815 	stw	r23,32(sp)
 200cff0:	dd800715 	stw	r22,28(sp)
 200cff4:	dd400615 	stw	r21,24(sp)
 200cff8:	dd000515 	stw	r20,20(sp)
 200cffc:	dc800315 	stw	r18,12(sp)
 200d000:	dc400215 	stw	r17,8(sp)
 200d004:	2027883a 	mov	r19,r4
 200d008:	2821883a 	mov	r16,r5
 200d00c:	3800411e 	bne	r7,zero,200d114 <__udivdi3+0x13c>
 200d010:	3023883a 	mov	r17,r6
 200d014:	2025883a 	mov	r18,r4
 200d018:	2980522e 	bgeu	r5,r6,200d164 <__udivdi3+0x18c>
 200d01c:	00bfffd4 	movui	r2,65535
 200d020:	282d883a 	mov	r22,r5
 200d024:	1180a836 	bltu	r2,r6,200d2c8 <__udivdi3+0x2f0>
 200d028:	00803fc4 	movi	r2,255
 200d02c:	1185803a 	cmpltu	r2,r2,r6
 200d030:	100490fa 	slli	r2,r2,3
 200d034:	3086d83a 	srl	r3,r6,r2
 200d038:	01008074 	movhi	r4,513
 200d03c:	210b34c4 	addi	r4,r4,11475
 200d040:	20c7883a 	add	r3,r4,r3
 200d044:	18c00003 	ldbu	r3,0(r3)
 200d048:	1885883a 	add	r2,r3,r2
 200d04c:	00c00804 	movi	r3,32
 200d050:	1887c83a 	sub	r3,r3,r2
 200d054:	18000526 	beq	r3,zero,200d06c <__udivdi3+0x94>
 200d058:	80e0983a 	sll	r16,r16,r3
 200d05c:	9884d83a 	srl	r2,r19,r2
 200d060:	30e2983a 	sll	r17,r6,r3
 200d064:	98e4983a 	sll	r18,r19,r3
 200d068:	142cb03a 	or	r22,r2,r16
 200d06c:	882ad43a 	srli	r21,r17,16
 200d070:	b009883a 	mov	r4,r22
 200d074:	8d3fffcc 	andi	r20,r17,65535
 200d078:	a80b883a 	mov	r5,r21
 200d07c:	200dbe40 	call	200dbe4 <__umodsi3>
 200d080:	b009883a 	mov	r4,r22
 200d084:	a80b883a 	mov	r5,r21
 200d088:	1027883a 	mov	r19,r2
 200d08c:	200db800 	call	200db80 <__udivsi3>
 200d090:	102d883a 	mov	r22,r2
 200d094:	9826943a 	slli	r19,r19,16
 200d098:	9004d43a 	srli	r2,r18,16
 200d09c:	a5a1383a 	mul	r16,r20,r22
 200d0a0:	14c4b03a 	or	r2,r2,r19
 200d0a4:	1400052e 	bgeu	r2,r16,200d0bc <__udivdi3+0xe4>
 200d0a8:	1445883a 	add	r2,r2,r17
 200d0ac:	b0ffffc4 	addi	r3,r22,-1
 200d0b0:	14400136 	bltu	r2,r17,200d0b8 <__udivdi3+0xe0>
 200d0b4:	14012336 	bltu	r2,r16,200d544 <__udivdi3+0x56c>
 200d0b8:	182d883a 	mov	r22,r3
 200d0bc:	1421c83a 	sub	r16,r2,r16
 200d0c0:	a80b883a 	mov	r5,r21
 200d0c4:	8009883a 	mov	r4,r16
 200d0c8:	200dbe40 	call	200dbe4 <__umodsi3>
 200d0cc:	1027883a 	mov	r19,r2
 200d0d0:	a80b883a 	mov	r5,r21
 200d0d4:	8009883a 	mov	r4,r16
 200d0d8:	200db800 	call	200db80 <__udivsi3>
 200d0dc:	9826943a 	slli	r19,r19,16
 200d0e0:	a0a9383a 	mul	r20,r20,r2
 200d0e4:	94bfffcc 	andi	r18,r18,65535
 200d0e8:	94e4b03a 	or	r18,r18,r19
 200d0ec:	9500052e 	bgeu	r18,r20,200d104 <__udivdi3+0x12c>
 200d0f0:	8ca5883a 	add	r18,r17,r18
 200d0f4:	10ffffc4 	addi	r3,r2,-1
 200d0f8:	9440f136 	bltu	r18,r17,200d4c0 <__udivdi3+0x4e8>
 200d0fc:	9500f02e 	bgeu	r18,r20,200d4c0 <__udivdi3+0x4e8>
 200d100:	10bfff84 	addi	r2,r2,-2
 200d104:	b00c943a 	slli	r6,r22,16
 200d108:	0007883a 	mov	r3,zero
 200d10c:	3084b03a 	or	r2,r6,r2
 200d110:	00005906 	br	200d278 <__udivdi3+0x2a0>
 200d114:	29c05636 	bltu	r5,r7,200d270 <__udivdi3+0x298>
 200d118:	00bfffd4 	movui	r2,65535
 200d11c:	11c0622e 	bgeu	r2,r7,200d2a8 <__udivdi3+0x2d0>
 200d120:	00804034 	movhi	r2,256
 200d124:	10bfffc4 	addi	r2,r2,-1
 200d128:	11c0ee36 	bltu	r2,r7,200d4e4 <__udivdi3+0x50c>
 200d12c:	00800404 	movi	r2,16
 200d130:	3886d83a 	srl	r3,r7,r2
 200d134:	01008074 	movhi	r4,513
 200d138:	210b34c4 	addi	r4,r4,11475
 200d13c:	20c7883a 	add	r3,r4,r3
 200d140:	18c00003 	ldbu	r3,0(r3)
 200d144:	05400804 	movi	r21,32
 200d148:	1885883a 	add	r2,r3,r2
 200d14c:	a8abc83a 	sub	r21,r21,r2
 200d150:	a800621e 	bne	r21,zero,200d2dc <__udivdi3+0x304>
 200d154:	3c00e936 	bltu	r7,r16,200d4fc <__udivdi3+0x524>
 200d158:	9985403a 	cmpgeu	r2,r19,r6
 200d15c:	0007883a 	mov	r3,zero
 200d160:	00004506 	br	200d278 <__udivdi3+0x2a0>
 200d164:	3000041e 	bne	r6,zero,200d178 <__udivdi3+0x1a0>
 200d168:	000b883a 	mov	r5,zero
 200d16c:	01000044 	movi	r4,1
 200d170:	200db800 	call	200db80 <__udivsi3>
 200d174:	1023883a 	mov	r17,r2
 200d178:	00bfffd4 	movui	r2,65535
 200d17c:	14404e2e 	bgeu	r2,r17,200d2b8 <__udivdi3+0x2e0>
 200d180:	00804034 	movhi	r2,256
 200d184:	10bfffc4 	addi	r2,r2,-1
 200d188:	1440d836 	bltu	r2,r17,200d4ec <__udivdi3+0x514>
 200d18c:	00800404 	movi	r2,16
 200d190:	8886d83a 	srl	r3,r17,r2
 200d194:	01008074 	movhi	r4,513
 200d198:	210b34c4 	addi	r4,r4,11475
 200d19c:	20c7883a 	add	r3,r4,r3
 200d1a0:	18c00003 	ldbu	r3,0(r3)
 200d1a4:	1885883a 	add	r2,r3,r2
 200d1a8:	00c00804 	movi	r3,32
 200d1ac:	1887c83a 	sub	r3,r3,r2
 200d1b0:	18008f1e 	bne	r3,zero,200d3f0 <__udivdi3+0x418>
 200d1b4:	882ad43a 	srli	r21,r17,16
 200d1b8:	8461c83a 	sub	r16,r16,r17
 200d1bc:	8d3fffcc 	andi	r20,r17,65535
 200d1c0:	00c00044 	movi	r3,1
 200d1c4:	8009883a 	mov	r4,r16
 200d1c8:	a80b883a 	mov	r5,r21
 200d1cc:	d8c00015 	stw	r3,0(sp)
 200d1d0:	200dbe40 	call	200dbe4 <__umodsi3>
 200d1d4:	8009883a 	mov	r4,r16
 200d1d8:	a80b883a 	mov	r5,r21
 200d1dc:	1027883a 	mov	r19,r2
 200d1e0:	200db800 	call	200db80 <__udivsi3>
 200d1e4:	9826943a 	slli	r19,r19,16
 200d1e8:	9008d43a 	srli	r4,r18,16
 200d1ec:	1521383a 	mul	r16,r2,r20
 200d1f0:	102d883a 	mov	r22,r2
 200d1f4:	24c8b03a 	or	r4,r4,r19
 200d1f8:	d8c00017 	ldw	r3,0(sp)
 200d1fc:	2400052e 	bgeu	r4,r16,200d214 <__udivdi3+0x23c>
 200d200:	2449883a 	add	r4,r4,r17
 200d204:	b0bfffc4 	addi	r2,r22,-1
 200d208:	24400136 	bltu	r4,r17,200d210 <__udivdi3+0x238>
 200d20c:	2400ca36 	bltu	r4,r16,200d538 <__udivdi3+0x560>
 200d210:	102d883a 	mov	r22,r2
 200d214:	2421c83a 	sub	r16,r4,r16
 200d218:	a80b883a 	mov	r5,r21
 200d21c:	8009883a 	mov	r4,r16
 200d220:	d8c00015 	stw	r3,0(sp)
 200d224:	200dbe40 	call	200dbe4 <__umodsi3>
 200d228:	1027883a 	mov	r19,r2
 200d22c:	a80b883a 	mov	r5,r21
 200d230:	8009883a 	mov	r4,r16
 200d234:	200db800 	call	200db80 <__udivsi3>
 200d238:	9826943a 	slli	r19,r19,16
 200d23c:	1529383a 	mul	r20,r2,r20
 200d240:	94bfffcc 	andi	r18,r18,65535
 200d244:	94e4b03a 	or	r18,r18,r19
 200d248:	d8c00017 	ldw	r3,0(sp)
 200d24c:	9500052e 	bgeu	r18,r20,200d264 <__udivdi3+0x28c>
 200d250:	8ca5883a 	add	r18,r17,r18
 200d254:	113fffc4 	addi	r4,r2,-1
 200d258:	94409736 	bltu	r18,r17,200d4b8 <__udivdi3+0x4e0>
 200d25c:	9500962e 	bgeu	r18,r20,200d4b8 <__udivdi3+0x4e0>
 200d260:	10bfff84 	addi	r2,r2,-2
 200d264:	b00c943a 	slli	r6,r22,16
 200d268:	3084b03a 	or	r2,r6,r2
 200d26c:	00000206 	br	200d278 <__udivdi3+0x2a0>
 200d270:	0007883a 	mov	r3,zero
 200d274:	0005883a 	mov	r2,zero
 200d278:	dfc00a17 	ldw	ra,40(sp)
 200d27c:	df000917 	ldw	fp,36(sp)
 200d280:	ddc00817 	ldw	r23,32(sp)
 200d284:	dd800717 	ldw	r22,28(sp)
 200d288:	dd400617 	ldw	r21,24(sp)
 200d28c:	dd000517 	ldw	r20,20(sp)
 200d290:	dcc00417 	ldw	r19,16(sp)
 200d294:	dc800317 	ldw	r18,12(sp)
 200d298:	dc400217 	ldw	r17,8(sp)
 200d29c:	dc000117 	ldw	r16,4(sp)
 200d2a0:	dec00b04 	addi	sp,sp,44
 200d2a4:	f800283a 	ret
 200d2a8:	00803fc4 	movi	r2,255
 200d2ac:	11c5803a 	cmpltu	r2,r2,r7
 200d2b0:	100490fa 	slli	r2,r2,3
 200d2b4:	003f9e06 	br	200d130 <__udivdi3+0x158>
 200d2b8:	00803fc4 	movi	r2,255
 200d2bc:	1445803a 	cmpltu	r2,r2,r17
 200d2c0:	100490fa 	slli	r2,r2,3
 200d2c4:	003fb206 	br	200d190 <__udivdi3+0x1b8>
 200d2c8:	00804034 	movhi	r2,256
 200d2cc:	10bfffc4 	addi	r2,r2,-1
 200d2d0:	11808836 	bltu	r2,r6,200d4f4 <__udivdi3+0x51c>
 200d2d4:	00800404 	movi	r2,16
 200d2d8:	003f5606 	br	200d034 <__udivdi3+0x5c>
 200d2dc:	30aed83a 	srl	r23,r6,r2
 200d2e0:	3d4e983a 	sll	r7,r7,r21
 200d2e4:	80acd83a 	srl	r22,r16,r2
 200d2e8:	9884d83a 	srl	r2,r19,r2
 200d2ec:	3deeb03a 	or	r23,r7,r23
 200d2f0:	b824d43a 	srli	r18,r23,16
 200d2f4:	8560983a 	sll	r16,r16,r21
 200d2f8:	b009883a 	mov	r4,r22
 200d2fc:	900b883a 	mov	r5,r18
 200d300:	3568983a 	sll	r20,r6,r21
 200d304:	1420b03a 	or	r16,r2,r16
 200d308:	200dbe40 	call	200dbe4 <__umodsi3>
 200d30c:	b009883a 	mov	r4,r22
 200d310:	900b883a 	mov	r5,r18
 200d314:	1023883a 	mov	r17,r2
 200d318:	200db800 	call	200db80 <__udivsi3>
 200d31c:	8808943a 	slli	r4,r17,16
 200d320:	bf3fffcc 	andi	fp,r23,65535
 200d324:	8006d43a 	srli	r3,r16,16
 200d328:	e0a3383a 	mul	r17,fp,r2
 200d32c:	100d883a 	mov	r6,r2
 200d330:	1906b03a 	or	r3,r3,r4
 200d334:	1c40042e 	bgeu	r3,r17,200d348 <__udivdi3+0x370>
 200d338:	1dc7883a 	add	r3,r3,r23
 200d33c:	10bfffc4 	addi	r2,r2,-1
 200d340:	1dc0752e 	bgeu	r3,r23,200d518 <__udivdi3+0x540>
 200d344:	100d883a 	mov	r6,r2
 200d348:	1c63c83a 	sub	r17,r3,r17
 200d34c:	900b883a 	mov	r5,r18
 200d350:	8809883a 	mov	r4,r17
 200d354:	d9800015 	stw	r6,0(sp)
 200d358:	200dbe40 	call	200dbe4 <__umodsi3>
 200d35c:	102d883a 	mov	r22,r2
 200d360:	8809883a 	mov	r4,r17
 200d364:	900b883a 	mov	r5,r18
 200d368:	200db800 	call	200db80 <__udivsi3>
 200d36c:	b02c943a 	slli	r22,r22,16
 200d370:	e089383a 	mul	r4,fp,r2
 200d374:	843fffcc 	andi	r16,r16,65535
 200d378:	85a0b03a 	or	r16,r16,r22
 200d37c:	d9800017 	ldw	r6,0(sp)
 200d380:	8100042e 	bgeu	r16,r4,200d394 <__udivdi3+0x3bc>
 200d384:	85e1883a 	add	r16,r16,r23
 200d388:	10ffffc4 	addi	r3,r2,-1
 200d38c:	85c05e2e 	bgeu	r16,r23,200d508 <__udivdi3+0x530>
 200d390:	1805883a 	mov	r2,r3
 200d394:	300c943a 	slli	r6,r6,16
 200d398:	a17fffcc 	andi	r5,r20,65535
 200d39c:	a028d43a 	srli	r20,r20,16
 200d3a0:	3084b03a 	or	r2,r6,r2
 200d3a4:	10ffffcc 	andi	r3,r2,65535
 200d3a8:	100cd43a 	srli	r6,r2,16
 200d3ac:	194f383a 	mul	r7,r3,r5
 200d3b0:	1d07383a 	mul	r3,r3,r20
 200d3b4:	314b383a 	mul	r5,r6,r5
 200d3b8:	3810d43a 	srli	r8,r7,16
 200d3bc:	8121c83a 	sub	r16,r16,r4
 200d3c0:	1947883a 	add	r3,r3,r5
 200d3c4:	40c7883a 	add	r3,r8,r3
 200d3c8:	350d383a 	mul	r6,r6,r20
 200d3cc:	1940022e 	bgeu	r3,r5,200d3d8 <__udivdi3+0x400>
 200d3d0:	01000074 	movhi	r4,1
 200d3d4:	310d883a 	add	r6,r6,r4
 200d3d8:	1828d43a 	srli	r20,r3,16
 200d3dc:	a18d883a 	add	r6,r20,r6
 200d3e0:	81803e36 	bltu	r16,r6,200d4dc <__udivdi3+0x504>
 200d3e4:	81803826 	beq	r16,r6,200d4c8 <__udivdi3+0x4f0>
 200d3e8:	0007883a 	mov	r3,zero
 200d3ec:	003fa206 	br	200d278 <__udivdi3+0x2a0>
 200d3f0:	88e2983a 	sll	r17,r17,r3
 200d3f4:	80a8d83a 	srl	r20,r16,r2
 200d3f8:	80e0983a 	sll	r16,r16,r3
 200d3fc:	882ad43a 	srli	r21,r17,16
 200d400:	9884d83a 	srl	r2,r19,r2
 200d404:	a009883a 	mov	r4,r20
 200d408:	a80b883a 	mov	r5,r21
 200d40c:	142eb03a 	or	r23,r2,r16
 200d410:	98e4983a 	sll	r18,r19,r3
 200d414:	200dbe40 	call	200dbe4 <__umodsi3>
 200d418:	a009883a 	mov	r4,r20
 200d41c:	a80b883a 	mov	r5,r21
 200d420:	1021883a 	mov	r16,r2
 200d424:	200db800 	call	200db80 <__udivsi3>
 200d428:	1039883a 	mov	fp,r2
 200d42c:	8d3fffcc 	andi	r20,r17,65535
 200d430:	8020943a 	slli	r16,r16,16
 200d434:	b804d43a 	srli	r2,r23,16
 200d438:	a72d383a 	mul	r22,r20,fp
 200d43c:	1404b03a 	or	r2,r2,r16
 200d440:	1580062e 	bgeu	r2,r22,200d45c <__udivdi3+0x484>
 200d444:	1445883a 	add	r2,r2,r17
 200d448:	e0ffffc4 	addi	r3,fp,-1
 200d44c:	14403836 	bltu	r2,r17,200d530 <__udivdi3+0x558>
 200d450:	1580372e 	bgeu	r2,r22,200d530 <__udivdi3+0x558>
 200d454:	e73fff84 	addi	fp,fp,-2
 200d458:	1445883a 	add	r2,r2,r17
 200d45c:	15adc83a 	sub	r22,r2,r22
 200d460:	a80b883a 	mov	r5,r21
 200d464:	b009883a 	mov	r4,r22
 200d468:	200dbe40 	call	200dbe4 <__umodsi3>
 200d46c:	1027883a 	mov	r19,r2
 200d470:	b009883a 	mov	r4,r22
 200d474:	a80b883a 	mov	r5,r21
 200d478:	200db800 	call	200db80 <__udivsi3>
 200d47c:	9826943a 	slli	r19,r19,16
 200d480:	a0a1383a 	mul	r16,r20,r2
 200d484:	b93fffcc 	andi	r4,r23,65535
 200d488:	24c8b03a 	or	r4,r4,r19
 200d48c:	2400062e 	bgeu	r4,r16,200d4a8 <__udivdi3+0x4d0>
 200d490:	2449883a 	add	r4,r4,r17
 200d494:	10ffffc4 	addi	r3,r2,-1
 200d498:	24402336 	bltu	r4,r17,200d528 <__udivdi3+0x550>
 200d49c:	2400222e 	bgeu	r4,r16,200d528 <__udivdi3+0x550>
 200d4a0:	10bfff84 	addi	r2,r2,-2
 200d4a4:	2449883a 	add	r4,r4,r17
 200d4a8:	e038943a 	slli	fp,fp,16
 200d4ac:	2421c83a 	sub	r16,r4,r16
 200d4b0:	e086b03a 	or	r3,fp,r2
 200d4b4:	003f4306 	br	200d1c4 <__udivdi3+0x1ec>
 200d4b8:	2005883a 	mov	r2,r4
 200d4bc:	003f6906 	br	200d264 <__udivdi3+0x28c>
 200d4c0:	1805883a 	mov	r2,r3
 200d4c4:	003f0f06 	br	200d104 <__udivdi3+0x12c>
 200d4c8:	1806943a 	slli	r3,r3,16
 200d4cc:	9d66983a 	sll	r19,r19,r21
 200d4d0:	39ffffcc 	andi	r7,r7,65535
 200d4d4:	19c7883a 	add	r3,r3,r7
 200d4d8:	98ffc32e 	bgeu	r19,r3,200d3e8 <__udivdi3+0x410>
 200d4dc:	10bfffc4 	addi	r2,r2,-1
 200d4e0:	003fc106 	br	200d3e8 <__udivdi3+0x410>
 200d4e4:	00800604 	movi	r2,24
 200d4e8:	003f1106 	br	200d130 <__udivdi3+0x158>
 200d4ec:	00800604 	movi	r2,24
 200d4f0:	003f2706 	br	200d190 <__udivdi3+0x1b8>
 200d4f4:	00800604 	movi	r2,24
 200d4f8:	003ece06 	br	200d034 <__udivdi3+0x5c>
 200d4fc:	0007883a 	mov	r3,zero
 200d500:	00800044 	movi	r2,1
 200d504:	003f5c06 	br	200d278 <__udivdi3+0x2a0>
 200d508:	813fa12e 	bgeu	r16,r4,200d390 <__udivdi3+0x3b8>
 200d50c:	10bfff84 	addi	r2,r2,-2
 200d510:	85e1883a 	add	r16,r16,r23
 200d514:	003f9f06 	br	200d394 <__udivdi3+0x3bc>
 200d518:	1c7f8a2e 	bgeu	r3,r17,200d344 <__udivdi3+0x36c>
 200d51c:	31bfff84 	addi	r6,r6,-2
 200d520:	1dc7883a 	add	r3,r3,r23
 200d524:	003f8806 	br	200d348 <__udivdi3+0x370>
 200d528:	1805883a 	mov	r2,r3
 200d52c:	003fde06 	br	200d4a8 <__udivdi3+0x4d0>
 200d530:	1839883a 	mov	fp,r3
 200d534:	003fc906 	br	200d45c <__udivdi3+0x484>
 200d538:	b5bfff84 	addi	r22,r22,-2
 200d53c:	2449883a 	add	r4,r4,r17
 200d540:	003f3406 	br	200d214 <__udivdi3+0x23c>
 200d544:	b5bfff84 	addi	r22,r22,-2
 200d548:	1445883a 	add	r2,r2,r17
 200d54c:	003edb06 	br	200d0bc <__udivdi3+0xe4>

0200d550 <__umoddi3>:
 200d550:	defff404 	addi	sp,sp,-48
 200d554:	df000a15 	stw	fp,40(sp)
 200d558:	dc400315 	stw	r17,12(sp)
 200d55c:	dc000215 	stw	r16,8(sp)
 200d560:	dfc00b15 	stw	ra,44(sp)
 200d564:	ddc00915 	stw	r23,36(sp)
 200d568:	dd800815 	stw	r22,32(sp)
 200d56c:	dd400715 	stw	r21,28(sp)
 200d570:	dd000615 	stw	r20,24(sp)
 200d574:	dcc00515 	stw	r19,20(sp)
 200d578:	dc800415 	stw	r18,16(sp)
 200d57c:	2021883a 	mov	r16,r4
 200d580:	2823883a 	mov	r17,r5
 200d584:	2839883a 	mov	fp,r5
 200d588:	38003c1e 	bne	r7,zero,200d67c <__umoddi3+0x12c>
 200d58c:	3027883a 	mov	r19,r6
 200d590:	2029883a 	mov	r20,r4
 200d594:	2980512e 	bgeu	r5,r6,200d6dc <__umoddi3+0x18c>
 200d598:	00bfffd4 	movui	r2,65535
 200d59c:	11809a36 	bltu	r2,r6,200d808 <__umoddi3+0x2b8>
 200d5a0:	01003fc4 	movi	r4,255
 200d5a4:	2189803a 	cmpltu	r4,r4,r6
 200d5a8:	200890fa 	slli	r4,r4,3
 200d5ac:	3104d83a 	srl	r2,r6,r4
 200d5b0:	00c08074 	movhi	r3,513
 200d5b4:	18cb34c4 	addi	r3,r3,11475
 200d5b8:	1885883a 	add	r2,r3,r2
 200d5bc:	10c00003 	ldbu	r3,0(r2)
 200d5c0:	00800804 	movi	r2,32
 200d5c4:	1909883a 	add	r4,r3,r4
 200d5c8:	1125c83a 	sub	r18,r2,r4
 200d5cc:	90000526 	beq	r18,zero,200d5e4 <__umoddi3+0x94>
 200d5d0:	8ca2983a 	sll	r17,r17,r18
 200d5d4:	8108d83a 	srl	r4,r16,r4
 200d5d8:	34a6983a 	sll	r19,r6,r18
 200d5dc:	84a8983a 	sll	r20,r16,r18
 200d5e0:	2478b03a 	or	fp,r4,r17
 200d5e4:	982ed43a 	srli	r23,r19,16
 200d5e8:	e009883a 	mov	r4,fp
 200d5ec:	9dbfffcc 	andi	r22,r19,65535
 200d5f0:	b80b883a 	mov	r5,r23
 200d5f4:	200dbe40 	call	200dbe4 <__umodsi3>
 200d5f8:	e009883a 	mov	r4,fp
 200d5fc:	b80b883a 	mov	r5,r23
 200d600:	102b883a 	mov	r21,r2
 200d604:	200db800 	call	200db80 <__udivsi3>
 200d608:	a806943a 	slli	r3,r21,16
 200d60c:	a008d43a 	srli	r4,r20,16
 200d610:	b085383a 	mul	r2,r22,r2
 200d614:	20c8b03a 	or	r4,r4,r3
 200d618:	2080032e 	bgeu	r4,r2,200d628 <__umoddi3+0xd8>
 200d61c:	24c9883a 	add	r4,r4,r19
 200d620:	24c00136 	bltu	r4,r19,200d628 <__umoddi3+0xd8>
 200d624:	20811036 	bltu	r4,r2,200da68 <__umoddi3+0x518>
 200d628:	20abc83a 	sub	r21,r4,r2
 200d62c:	b80b883a 	mov	r5,r23
 200d630:	a809883a 	mov	r4,r21
 200d634:	200dbe40 	call	200dbe4 <__umodsi3>
 200d638:	1023883a 	mov	r17,r2
 200d63c:	b80b883a 	mov	r5,r23
 200d640:	a809883a 	mov	r4,r21
 200d644:	200db800 	call	200db80 <__udivsi3>
 200d648:	8822943a 	slli	r17,r17,16
 200d64c:	b085383a 	mul	r2,r22,r2
 200d650:	a0ffffcc 	andi	r3,r20,65535
 200d654:	1c46b03a 	or	r3,r3,r17
 200d658:	1880042e 	bgeu	r3,r2,200d66c <__umoddi3+0x11c>
 200d65c:	1cc7883a 	add	r3,r3,r19
 200d660:	1cc00236 	bltu	r3,r19,200d66c <__umoddi3+0x11c>
 200d664:	1880012e 	bgeu	r3,r2,200d66c <__umoddi3+0x11c>
 200d668:	1cc7883a 	add	r3,r3,r19
 200d66c:	1885c83a 	sub	r2,r3,r2
 200d670:	1484d83a 	srl	r2,r2,r18
 200d674:	0007883a 	mov	r3,zero
 200d678:	00004f06 	br	200d7b8 <__umoddi3+0x268>
 200d67c:	29c04c36 	bltu	r5,r7,200d7b0 <__umoddi3+0x260>
 200d680:	00bfffd4 	movui	r2,65535
 200d684:	11c0582e 	bgeu	r2,r7,200d7e8 <__umoddi3+0x298>
 200d688:	00804034 	movhi	r2,256
 200d68c:	10bfffc4 	addi	r2,r2,-1
 200d690:	11c0e736 	bltu	r2,r7,200da30 <__umoddi3+0x4e0>
 200d694:	01000404 	movi	r4,16
 200d698:	3904d83a 	srl	r2,r7,r4
 200d69c:	00c08074 	movhi	r3,513
 200d6a0:	18cb34c4 	addi	r3,r3,11475
 200d6a4:	1885883a 	add	r2,r3,r2
 200d6a8:	14c00003 	ldbu	r19,0(r2)
 200d6ac:	00c00804 	movi	r3,32
 200d6b0:	9927883a 	add	r19,r19,r4
 200d6b4:	1ce9c83a 	sub	r20,r3,r19
 200d6b8:	a000581e 	bne	r20,zero,200d81c <__umoddi3+0x2cc>
 200d6bc:	3c400136 	bltu	r7,r17,200d6c4 <__umoddi3+0x174>
 200d6c0:	8180eb36 	bltu	r16,r6,200da70 <__umoddi3+0x520>
 200d6c4:	8185c83a 	sub	r2,r16,r6
 200d6c8:	89e3c83a 	sub	r17,r17,r7
 200d6cc:	8089803a 	cmpltu	r4,r16,r2
 200d6d0:	8939c83a 	sub	fp,r17,r4
 200d6d4:	e007883a 	mov	r3,fp
 200d6d8:	00003706 	br	200d7b8 <__umoddi3+0x268>
 200d6dc:	3000041e 	bne	r6,zero,200d6f0 <__umoddi3+0x1a0>
 200d6e0:	000b883a 	mov	r5,zero
 200d6e4:	01000044 	movi	r4,1
 200d6e8:	200db800 	call	200db80 <__udivsi3>
 200d6ec:	1027883a 	mov	r19,r2
 200d6f0:	00bfffd4 	movui	r2,65535
 200d6f4:	14c0402e 	bgeu	r2,r19,200d7f8 <__umoddi3+0x2a8>
 200d6f8:	00804034 	movhi	r2,256
 200d6fc:	10bfffc4 	addi	r2,r2,-1
 200d700:	14c0cd36 	bltu	r2,r19,200da38 <__umoddi3+0x4e8>
 200d704:	00800404 	movi	r2,16
 200d708:	9886d83a 	srl	r3,r19,r2
 200d70c:	01008074 	movhi	r4,513
 200d710:	210b34c4 	addi	r4,r4,11475
 200d714:	20c7883a 	add	r3,r4,r3
 200d718:	18c00003 	ldbu	r3,0(r3)
 200d71c:	1887883a 	add	r3,r3,r2
 200d720:	00800804 	movi	r2,32
 200d724:	10e5c83a 	sub	r18,r2,r3
 200d728:	9000901e 	bne	r18,zero,200d96c <__umoddi3+0x41c>
 200d72c:	982cd43a 	srli	r22,r19,16
 200d730:	8ce3c83a 	sub	r17,r17,r19
 200d734:	9d7fffcc 	andi	r21,r19,65535
 200d738:	b00b883a 	mov	r5,r22
 200d73c:	8809883a 	mov	r4,r17
 200d740:	200dbe40 	call	200dbe4 <__umodsi3>
 200d744:	8809883a 	mov	r4,r17
 200d748:	b00b883a 	mov	r5,r22
 200d74c:	1021883a 	mov	r16,r2
 200d750:	200db800 	call	200db80 <__udivsi3>
 200d754:	8006943a 	slli	r3,r16,16
 200d758:	a008d43a 	srli	r4,r20,16
 200d75c:	1545383a 	mul	r2,r2,r21
 200d760:	20c8b03a 	or	r4,r4,r3
 200d764:	2080042e 	bgeu	r4,r2,200d778 <__umoddi3+0x228>
 200d768:	24c9883a 	add	r4,r4,r19
 200d76c:	24c00236 	bltu	r4,r19,200d778 <__umoddi3+0x228>
 200d770:	2080012e 	bgeu	r4,r2,200d778 <__umoddi3+0x228>
 200d774:	24c9883a 	add	r4,r4,r19
 200d778:	20a1c83a 	sub	r16,r4,r2
 200d77c:	b00b883a 	mov	r5,r22
 200d780:	8009883a 	mov	r4,r16
 200d784:	200dbe40 	call	200dbe4 <__umodsi3>
 200d788:	1023883a 	mov	r17,r2
 200d78c:	b00b883a 	mov	r5,r22
 200d790:	8009883a 	mov	r4,r16
 200d794:	200db800 	call	200db80 <__udivsi3>
 200d798:	8822943a 	slli	r17,r17,16
 200d79c:	1545383a 	mul	r2,r2,r21
 200d7a0:	a53fffcc 	andi	r20,r20,65535
 200d7a4:	a446b03a 	or	r3,r20,r17
 200d7a8:	18bfb02e 	bgeu	r3,r2,200d66c <__umoddi3+0x11c>
 200d7ac:	003fab06 	br	200d65c <__umoddi3+0x10c>
 200d7b0:	2005883a 	mov	r2,r4
 200d7b4:	2807883a 	mov	r3,r5
 200d7b8:	dfc00b17 	ldw	ra,44(sp)
 200d7bc:	df000a17 	ldw	fp,40(sp)
 200d7c0:	ddc00917 	ldw	r23,36(sp)
 200d7c4:	dd800817 	ldw	r22,32(sp)
 200d7c8:	dd400717 	ldw	r21,28(sp)
 200d7cc:	dd000617 	ldw	r20,24(sp)
 200d7d0:	dcc00517 	ldw	r19,20(sp)
 200d7d4:	dc800417 	ldw	r18,16(sp)
 200d7d8:	dc400317 	ldw	r17,12(sp)
 200d7dc:	dc000217 	ldw	r16,8(sp)
 200d7e0:	dec00c04 	addi	sp,sp,48
 200d7e4:	f800283a 	ret
 200d7e8:	04c03fc4 	movi	r19,255
 200d7ec:	99c9803a 	cmpltu	r4,r19,r7
 200d7f0:	200890fa 	slli	r4,r4,3
 200d7f4:	003fa806 	br	200d698 <__umoddi3+0x148>
 200d7f8:	00803fc4 	movi	r2,255
 200d7fc:	14c5803a 	cmpltu	r2,r2,r19
 200d800:	100490fa 	slli	r2,r2,3
 200d804:	003fc006 	br	200d708 <__umoddi3+0x1b8>
 200d808:	00804034 	movhi	r2,256
 200d80c:	10bfffc4 	addi	r2,r2,-1
 200d810:	11808b36 	bltu	r2,r6,200da40 <__umoddi3+0x4f0>
 200d814:	01000404 	movi	r4,16
 200d818:	003f6406 	br	200d5ac <__umoddi3+0x5c>
 200d81c:	34c4d83a 	srl	r2,r6,r19
 200d820:	3d0e983a 	sll	r7,r7,r20
 200d824:	8cf8d83a 	srl	fp,r17,r19
 200d828:	8d10983a 	sll	r8,r17,r20
 200d82c:	38aab03a 	or	r21,r7,r2
 200d830:	a82cd43a 	srli	r22,r21,16
 200d834:	84e2d83a 	srl	r17,r16,r19
 200d838:	e009883a 	mov	r4,fp
 200d83c:	b00b883a 	mov	r5,r22
 200d840:	8a22b03a 	or	r17,r17,r8
 200d844:	3524983a 	sll	r18,r6,r20
 200d848:	200dbe40 	call	200dbe4 <__umodsi3>
 200d84c:	e009883a 	mov	r4,fp
 200d850:	b00b883a 	mov	r5,r22
 200d854:	102f883a 	mov	r23,r2
 200d858:	200db800 	call	200db80 <__udivsi3>
 200d85c:	100d883a 	mov	r6,r2
 200d860:	b808943a 	slli	r4,r23,16
 200d864:	aa3fffcc 	andi	r8,r21,65535
 200d868:	8804d43a 	srli	r2,r17,16
 200d86c:	41af383a 	mul	r23,r8,r6
 200d870:	8520983a 	sll	r16,r16,r20
 200d874:	1104b03a 	or	r2,r2,r4
 200d878:	15c0042e 	bgeu	r2,r23,200d88c <__umoddi3+0x33c>
 200d87c:	1545883a 	add	r2,r2,r21
 200d880:	30ffffc4 	addi	r3,r6,-1
 200d884:	1540742e 	bgeu	r2,r21,200da58 <__umoddi3+0x508>
 200d888:	180d883a 	mov	r6,r3
 200d88c:	15efc83a 	sub	r23,r2,r23
 200d890:	b00b883a 	mov	r5,r22
 200d894:	b809883a 	mov	r4,r23
 200d898:	d9800115 	stw	r6,4(sp)
 200d89c:	da000015 	stw	r8,0(sp)
 200d8a0:	200dbe40 	call	200dbe4 <__umodsi3>
 200d8a4:	b00b883a 	mov	r5,r22
 200d8a8:	b809883a 	mov	r4,r23
 200d8ac:	1039883a 	mov	fp,r2
 200d8b0:	200db800 	call	200db80 <__udivsi3>
 200d8b4:	da000017 	ldw	r8,0(sp)
 200d8b8:	e038943a 	slli	fp,fp,16
 200d8bc:	100b883a 	mov	r5,r2
 200d8c0:	4089383a 	mul	r4,r8,r2
 200d8c4:	8a3fffcc 	andi	r8,r17,65535
 200d8c8:	4710b03a 	or	r8,r8,fp
 200d8cc:	d9800117 	ldw	r6,4(sp)
 200d8d0:	4100042e 	bgeu	r8,r4,200d8e4 <__umoddi3+0x394>
 200d8d4:	4551883a 	add	r8,r8,r21
 200d8d8:	10bfffc4 	addi	r2,r2,-1
 200d8dc:	45405a2e 	bgeu	r8,r21,200da48 <__umoddi3+0x4f8>
 200d8e0:	100b883a 	mov	r5,r2
 200d8e4:	300c943a 	slli	r6,r6,16
 200d8e8:	91ffffcc 	andi	r7,r18,65535
 200d8ec:	9004d43a 	srli	r2,r18,16
 200d8f0:	314cb03a 	or	r6,r6,r5
 200d8f4:	317fffcc 	andi	r5,r6,65535
 200d8f8:	300cd43a 	srli	r6,r6,16
 200d8fc:	29d3383a 	mul	r9,r5,r7
 200d900:	288b383a 	mul	r5,r5,r2
 200d904:	31cf383a 	mul	r7,r6,r7
 200d908:	4806d43a 	srli	r3,r9,16
 200d90c:	4111c83a 	sub	r8,r8,r4
 200d910:	29cb883a 	add	r5,r5,r7
 200d914:	194b883a 	add	r5,r3,r5
 200d918:	3085383a 	mul	r2,r6,r2
 200d91c:	29c0022e 	bgeu	r5,r7,200d928 <__umoddi3+0x3d8>
 200d920:	00c00074 	movhi	r3,1
 200d924:	10c5883a 	add	r2,r2,r3
 200d928:	2808d43a 	srli	r4,r5,16
 200d92c:	280a943a 	slli	r5,r5,16
 200d930:	4a7fffcc 	andi	r9,r9,65535
 200d934:	2085883a 	add	r2,r4,r2
 200d938:	2a4b883a 	add	r5,r5,r9
 200d93c:	40803636 	bltu	r8,r2,200da18 <__umoddi3+0x4c8>
 200d940:	40804d26 	beq	r8,r2,200da78 <__umoddi3+0x528>
 200d944:	4089c83a 	sub	r4,r8,r2
 200d948:	280f883a 	mov	r7,r5
 200d94c:	81cfc83a 	sub	r7,r16,r7
 200d950:	81c7803a 	cmpltu	r3,r16,r7
 200d954:	20c7c83a 	sub	r3,r4,r3
 200d958:	1cc4983a 	sll	r2,r3,r19
 200d95c:	3d0ed83a 	srl	r7,r7,r20
 200d960:	1d06d83a 	srl	r3,r3,r20
 200d964:	11c4b03a 	or	r2,r2,r7
 200d968:	003f9306 	br	200d7b8 <__umoddi3+0x268>
 200d96c:	9ca6983a 	sll	r19,r19,r18
 200d970:	88e8d83a 	srl	r20,r17,r3
 200d974:	80c4d83a 	srl	r2,r16,r3
 200d978:	982cd43a 	srli	r22,r19,16
 200d97c:	8ca2983a 	sll	r17,r17,r18
 200d980:	a009883a 	mov	r4,r20
 200d984:	b00b883a 	mov	r5,r22
 200d988:	1478b03a 	or	fp,r2,r17
 200d98c:	200dbe40 	call	200dbe4 <__umodsi3>
 200d990:	a009883a 	mov	r4,r20
 200d994:	b00b883a 	mov	r5,r22
 200d998:	1023883a 	mov	r17,r2
 200d99c:	200db800 	call	200db80 <__udivsi3>
 200d9a0:	9d7fffcc 	andi	r21,r19,65535
 200d9a4:	880a943a 	slli	r5,r17,16
 200d9a8:	e008d43a 	srli	r4,fp,16
 200d9ac:	a885383a 	mul	r2,r21,r2
 200d9b0:	84a8983a 	sll	r20,r16,r18
 200d9b4:	2148b03a 	or	r4,r4,r5
 200d9b8:	2080042e 	bgeu	r4,r2,200d9cc <__umoddi3+0x47c>
 200d9bc:	24c9883a 	add	r4,r4,r19
 200d9c0:	24c00236 	bltu	r4,r19,200d9cc <__umoddi3+0x47c>
 200d9c4:	2080012e 	bgeu	r4,r2,200d9cc <__umoddi3+0x47c>
 200d9c8:	24c9883a 	add	r4,r4,r19
 200d9cc:	20a3c83a 	sub	r17,r4,r2
 200d9d0:	b00b883a 	mov	r5,r22
 200d9d4:	8809883a 	mov	r4,r17
 200d9d8:	200dbe40 	call	200dbe4 <__umodsi3>
 200d9dc:	102f883a 	mov	r23,r2
 200d9e0:	8809883a 	mov	r4,r17
 200d9e4:	b00b883a 	mov	r5,r22
 200d9e8:	200db800 	call	200db80 <__udivsi3>
 200d9ec:	b82e943a 	slli	r23,r23,16
 200d9f0:	a885383a 	mul	r2,r21,r2
 200d9f4:	e13fffcc 	andi	r4,fp,65535
 200d9f8:	25c8b03a 	or	r4,r4,r23
 200d9fc:	2080042e 	bgeu	r4,r2,200da10 <__umoddi3+0x4c0>
 200da00:	24c9883a 	add	r4,r4,r19
 200da04:	24c00236 	bltu	r4,r19,200da10 <__umoddi3+0x4c0>
 200da08:	2080012e 	bgeu	r4,r2,200da10 <__umoddi3+0x4c0>
 200da0c:	24c9883a 	add	r4,r4,r19
 200da10:	20a3c83a 	sub	r17,r4,r2
 200da14:	003f4806 	br	200d738 <__umoddi3+0x1e8>
 200da18:	2c8fc83a 	sub	r7,r5,r18
 200da1c:	1545c83a 	sub	r2,r2,r21
 200da20:	29cb803a 	cmpltu	r5,r5,r7
 200da24:	1145c83a 	sub	r2,r2,r5
 200da28:	4089c83a 	sub	r4,r8,r2
 200da2c:	003fc706 	br	200d94c <__umoddi3+0x3fc>
 200da30:	01000604 	movi	r4,24
 200da34:	003f1806 	br	200d698 <__umoddi3+0x148>
 200da38:	00800604 	movi	r2,24
 200da3c:	003f3206 	br	200d708 <__umoddi3+0x1b8>
 200da40:	01000604 	movi	r4,24
 200da44:	003ed906 	br	200d5ac <__umoddi3+0x5c>
 200da48:	413fa52e 	bgeu	r8,r4,200d8e0 <__umoddi3+0x390>
 200da4c:	297fff84 	addi	r5,r5,-2
 200da50:	4551883a 	add	r8,r8,r21
 200da54:	003fa306 	br	200d8e4 <__umoddi3+0x394>
 200da58:	15ff8b2e 	bgeu	r2,r23,200d888 <__umoddi3+0x338>
 200da5c:	31bfff84 	addi	r6,r6,-2
 200da60:	1545883a 	add	r2,r2,r21
 200da64:	003f8906 	br	200d88c <__umoddi3+0x33c>
 200da68:	24c9883a 	add	r4,r4,r19
 200da6c:	003eee06 	br	200d628 <__umoddi3+0xd8>
 200da70:	8005883a 	mov	r2,r16
 200da74:	003f1706 	br	200d6d4 <__umoddi3+0x184>
 200da78:	817fe736 	bltu	r16,r5,200da18 <__umoddi3+0x4c8>
 200da7c:	280f883a 	mov	r7,r5
 200da80:	0009883a 	mov	r4,zero
 200da84:	003fb106 	br	200d94c <__umoddi3+0x3fc>

0200da88 <__divsi3>:
 200da88:	20001b16 	blt	r4,zero,200daf8 <__divsi3+0x70>
 200da8c:	000f883a 	mov	r7,zero
 200da90:	28001616 	blt	r5,zero,200daec <__divsi3+0x64>
 200da94:	200d883a 	mov	r6,r4
 200da98:	29001a2e 	bgeu	r5,r4,200db04 <__divsi3+0x7c>
 200da9c:	00800804 	movi	r2,32
 200daa0:	00c00044 	movi	r3,1
 200daa4:	00000106 	br	200daac <__divsi3+0x24>
 200daa8:	10000d26 	beq	r2,zero,200dae0 <__divsi3+0x58>
 200daac:	294b883a 	add	r5,r5,r5
 200dab0:	10bfffc4 	addi	r2,r2,-1
 200dab4:	18c7883a 	add	r3,r3,r3
 200dab8:	293ffb36 	bltu	r5,r4,200daa8 <__divsi3+0x20>
 200dabc:	0005883a 	mov	r2,zero
 200dac0:	18000726 	beq	r3,zero,200dae0 <__divsi3+0x58>
 200dac4:	0005883a 	mov	r2,zero
 200dac8:	31400236 	bltu	r6,r5,200dad4 <__divsi3+0x4c>
 200dacc:	314dc83a 	sub	r6,r6,r5
 200dad0:	10c4b03a 	or	r2,r2,r3
 200dad4:	1806d07a 	srli	r3,r3,1
 200dad8:	280ad07a 	srli	r5,r5,1
 200dadc:	183ffa1e 	bne	r3,zero,200dac8 <__divsi3+0x40>
 200dae0:	38000126 	beq	r7,zero,200dae8 <__divsi3+0x60>
 200dae4:	0085c83a 	sub	r2,zero,r2
 200dae8:	f800283a 	ret
 200daec:	014bc83a 	sub	r5,zero,r5
 200daf0:	39c0005c 	xori	r7,r7,1
 200daf4:	003fe706 	br	200da94 <__divsi3+0xc>
 200daf8:	0109c83a 	sub	r4,zero,r4
 200dafc:	01c00044 	movi	r7,1
 200db00:	003fe306 	br	200da90 <__divsi3+0x8>
 200db04:	00c00044 	movi	r3,1
 200db08:	003fee06 	br	200dac4 <__divsi3+0x3c>

0200db0c <__modsi3>:
 200db0c:	20001716 	blt	r4,zero,200db6c <__modsi3+0x60>
 200db10:	000f883a 	mov	r7,zero
 200db14:	2005883a 	mov	r2,r4
 200db18:	28001216 	blt	r5,zero,200db64 <__modsi3+0x58>
 200db1c:	2900162e 	bgeu	r5,r4,200db78 <__modsi3+0x6c>
 200db20:	01800804 	movi	r6,32
 200db24:	00c00044 	movi	r3,1
 200db28:	00000106 	br	200db30 <__modsi3+0x24>
 200db2c:	30000a26 	beq	r6,zero,200db58 <__modsi3+0x4c>
 200db30:	294b883a 	add	r5,r5,r5
 200db34:	31bfffc4 	addi	r6,r6,-1
 200db38:	18c7883a 	add	r3,r3,r3
 200db3c:	293ffb36 	bltu	r5,r4,200db2c <__modsi3+0x20>
 200db40:	18000526 	beq	r3,zero,200db58 <__modsi3+0x4c>
 200db44:	1806d07a 	srli	r3,r3,1
 200db48:	11400136 	bltu	r2,r5,200db50 <__modsi3+0x44>
 200db4c:	1145c83a 	sub	r2,r2,r5
 200db50:	280ad07a 	srli	r5,r5,1
 200db54:	183ffb1e 	bne	r3,zero,200db44 <__modsi3+0x38>
 200db58:	38000126 	beq	r7,zero,200db60 <__modsi3+0x54>
 200db5c:	0085c83a 	sub	r2,zero,r2
 200db60:	f800283a 	ret
 200db64:	014bc83a 	sub	r5,zero,r5
 200db68:	003fec06 	br	200db1c <__modsi3+0x10>
 200db6c:	0109c83a 	sub	r4,zero,r4
 200db70:	01c00044 	movi	r7,1
 200db74:	003fe706 	br	200db14 <__modsi3+0x8>
 200db78:	00c00044 	movi	r3,1
 200db7c:	003ff106 	br	200db44 <__modsi3+0x38>

0200db80 <__udivsi3>:
 200db80:	200d883a 	mov	r6,r4
 200db84:	2900152e 	bgeu	r5,r4,200dbdc <__udivsi3+0x5c>
 200db88:	28001416 	blt	r5,zero,200dbdc <__udivsi3+0x5c>
 200db8c:	00800804 	movi	r2,32
 200db90:	00c00044 	movi	r3,1
 200db94:	00000206 	br	200dba0 <__udivsi3+0x20>
 200db98:	10000e26 	beq	r2,zero,200dbd4 <__udivsi3+0x54>
 200db9c:	28000516 	blt	r5,zero,200dbb4 <__udivsi3+0x34>
 200dba0:	294b883a 	add	r5,r5,r5
 200dba4:	10bfffc4 	addi	r2,r2,-1
 200dba8:	18c7883a 	add	r3,r3,r3
 200dbac:	293ffa36 	bltu	r5,r4,200db98 <__udivsi3+0x18>
 200dbb0:	18000826 	beq	r3,zero,200dbd4 <__udivsi3+0x54>
 200dbb4:	0005883a 	mov	r2,zero
 200dbb8:	31400236 	bltu	r6,r5,200dbc4 <__udivsi3+0x44>
 200dbbc:	314dc83a 	sub	r6,r6,r5
 200dbc0:	10c4b03a 	or	r2,r2,r3
 200dbc4:	1806d07a 	srli	r3,r3,1
 200dbc8:	280ad07a 	srli	r5,r5,1
 200dbcc:	183ffa1e 	bne	r3,zero,200dbb8 <__udivsi3+0x38>
 200dbd0:	f800283a 	ret
 200dbd4:	0005883a 	mov	r2,zero
 200dbd8:	f800283a 	ret
 200dbdc:	00c00044 	movi	r3,1
 200dbe0:	003ff406 	br	200dbb4 <__udivsi3+0x34>

0200dbe4 <__umodsi3>:
 200dbe4:	2005883a 	mov	r2,r4
 200dbe8:	2900122e 	bgeu	r5,r4,200dc34 <__umodsi3+0x50>
 200dbec:	28001116 	blt	r5,zero,200dc34 <__umodsi3+0x50>
 200dbf0:	01800804 	movi	r6,32
 200dbf4:	00c00044 	movi	r3,1
 200dbf8:	00000206 	br	200dc04 <__umodsi3+0x20>
 200dbfc:	30000c26 	beq	r6,zero,200dc30 <__umodsi3+0x4c>
 200dc00:	28000516 	blt	r5,zero,200dc18 <__umodsi3+0x34>
 200dc04:	294b883a 	add	r5,r5,r5
 200dc08:	31bfffc4 	addi	r6,r6,-1
 200dc0c:	18c7883a 	add	r3,r3,r3
 200dc10:	293ffa36 	bltu	r5,r4,200dbfc <__umodsi3+0x18>
 200dc14:	18000626 	beq	r3,zero,200dc30 <__umodsi3+0x4c>
 200dc18:	1806d07a 	srli	r3,r3,1
 200dc1c:	11400136 	bltu	r2,r5,200dc24 <__umodsi3+0x40>
 200dc20:	1145c83a 	sub	r2,r2,r5
 200dc24:	280ad07a 	srli	r5,r5,1
 200dc28:	183ffb1e 	bne	r3,zero,200dc18 <__umodsi3+0x34>
 200dc2c:	f800283a 	ret
 200dc30:	f800283a 	ret
 200dc34:	00c00044 	movi	r3,1
 200dc38:	003ff706 	br	200dc18 <__umodsi3+0x34>

0200dc3c <__adddf3>:
 200dc3c:	02c00434 	movhi	r11,16
 200dc40:	5affffc4 	addi	r11,r11,-1
 200dc44:	2806d7fa 	srli	r3,r5,31
 200dc48:	2ad4703a 	and	r10,r5,r11
 200dc4c:	3ad2703a 	and	r9,r7,r11
 200dc50:	3804d53a 	srli	r2,r7,20
 200dc54:	3018d77a 	srli	r12,r6,29
 200dc58:	280ad53a 	srli	r5,r5,20
 200dc5c:	501490fa 	slli	r10,r10,3
 200dc60:	2010d77a 	srli	r8,r4,29
 200dc64:	481290fa 	slli	r9,r9,3
 200dc68:	380ed7fa 	srli	r7,r7,31
 200dc6c:	defffb04 	addi	sp,sp,-20
 200dc70:	dc800215 	stw	r18,8(sp)
 200dc74:	dc400115 	stw	r17,4(sp)
 200dc78:	dc000015 	stw	r16,0(sp)
 200dc7c:	dfc00415 	stw	ra,16(sp)
 200dc80:	dcc00315 	stw	r19,12(sp)
 200dc84:	1c803fcc 	andi	r18,r3,255
 200dc88:	2c01ffcc 	andi	r16,r5,2047
 200dc8c:	5210b03a 	or	r8,r10,r8
 200dc90:	202290fa 	slli	r17,r4,3
 200dc94:	1081ffcc 	andi	r2,r2,2047
 200dc98:	4b12b03a 	or	r9,r9,r12
 200dc9c:	300c90fa 	slli	r6,r6,3
 200dca0:	91c07526 	beq	r18,r7,200de78 <__adddf3+0x23c>
 200dca4:	8087c83a 	sub	r3,r16,r2
 200dca8:	00c0ab0e 	bge	zero,r3,200df58 <__adddf3+0x31c>
 200dcac:	10002a1e 	bne	r2,zero,200dd58 <__adddf3+0x11c>
 200dcb0:	4984b03a 	or	r2,r9,r6
 200dcb4:	1000961e 	bne	r2,zero,200df10 <__adddf3+0x2d4>
 200dcb8:	888001cc 	andi	r2,r17,7
 200dcbc:	10000726 	beq	r2,zero,200dcdc <__adddf3+0xa0>
 200dcc0:	888003cc 	andi	r2,r17,15
 200dcc4:	00c00104 	movi	r3,4
 200dcc8:	10c00426 	beq	r2,r3,200dcdc <__adddf3+0xa0>
 200dccc:	88c7883a 	add	r3,r17,r3
 200dcd0:	1c63803a 	cmpltu	r17,r3,r17
 200dcd4:	4451883a 	add	r8,r8,r17
 200dcd8:	1823883a 	mov	r17,r3
 200dcdc:	4080202c 	andhi	r2,r8,128
 200dce0:	10005926 	beq	r2,zero,200de48 <__adddf3+0x20c>
 200dce4:	84000044 	addi	r16,r16,1
 200dce8:	0081ffc4 	movi	r2,2047
 200dcec:	8080ba26 	beq	r16,r2,200dfd8 <__adddf3+0x39c>
 200dcf0:	00bfe034 	movhi	r2,65408
 200dcf4:	10bfffc4 	addi	r2,r2,-1
 200dcf8:	4090703a 	and	r8,r8,r2
 200dcfc:	4004977a 	slli	r2,r8,29
 200dd00:	4010927a 	slli	r8,r8,9
 200dd04:	8822d0fa 	srli	r17,r17,3
 200dd08:	8401ffcc 	andi	r16,r16,2047
 200dd0c:	4010d33a 	srli	r8,r8,12
 200dd10:	9007883a 	mov	r3,r18
 200dd14:	1444b03a 	or	r2,r2,r17
 200dd18:	8401ffcc 	andi	r16,r16,2047
 200dd1c:	8020953a 	slli	r16,r16,20
 200dd20:	18c03fcc 	andi	r3,r3,255
 200dd24:	01000434 	movhi	r4,16
 200dd28:	213fffc4 	addi	r4,r4,-1
 200dd2c:	180697fa 	slli	r3,r3,31
 200dd30:	4110703a 	and	r8,r8,r4
 200dd34:	4410b03a 	or	r8,r8,r16
 200dd38:	40c6b03a 	or	r3,r8,r3
 200dd3c:	dfc00417 	ldw	ra,16(sp)
 200dd40:	dcc00317 	ldw	r19,12(sp)
 200dd44:	dc800217 	ldw	r18,8(sp)
 200dd48:	dc400117 	ldw	r17,4(sp)
 200dd4c:	dc000017 	ldw	r16,0(sp)
 200dd50:	dec00504 	addi	sp,sp,20
 200dd54:	f800283a 	ret
 200dd58:	0081ffc4 	movi	r2,2047
 200dd5c:	80bfd626 	beq	r16,r2,200dcb8 <__adddf3+0x7c>
 200dd60:	4a402034 	orhi	r9,r9,128
 200dd64:	00800e04 	movi	r2,56
 200dd68:	10c09f16 	blt	r2,r3,200dfe8 <__adddf3+0x3ac>
 200dd6c:	008007c4 	movi	r2,31
 200dd70:	10c0c216 	blt	r2,r3,200e07c <__adddf3+0x440>
 200dd74:	00800804 	movi	r2,32
 200dd78:	10c5c83a 	sub	r2,r2,r3
 200dd7c:	488a983a 	sll	r5,r9,r2
 200dd80:	30c8d83a 	srl	r4,r6,r3
 200dd84:	3084983a 	sll	r2,r6,r2
 200dd88:	48c6d83a 	srl	r3,r9,r3
 200dd8c:	290cb03a 	or	r6,r5,r4
 200dd90:	1004c03a 	cmpne	r2,r2,zero
 200dd94:	308cb03a 	or	r6,r6,r2
 200dd98:	898dc83a 	sub	r6,r17,r6
 200dd9c:	89a3803a 	cmpltu	r17,r17,r6
 200dda0:	40d1c83a 	sub	r8,r8,r3
 200dda4:	4451c83a 	sub	r8,r8,r17
 200dda8:	3023883a 	mov	r17,r6
 200ddac:	4080202c 	andhi	r2,r8,128
 200ddb0:	10002326 	beq	r2,zero,200de40 <__adddf3+0x204>
 200ddb4:	04c02034 	movhi	r19,128
 200ddb8:	9cffffc4 	addi	r19,r19,-1
 200ddbc:	44e6703a 	and	r19,r8,r19
 200ddc0:	98007626 	beq	r19,zero,200df9c <__adddf3+0x360>
 200ddc4:	9809883a 	mov	r4,r19
 200ddc8:	20006b80 	call	20006b8 <__clzsi2>
 200ddcc:	10fffe04 	addi	r3,r2,-8
 200ddd0:	010007c4 	movi	r4,31
 200ddd4:	20c07716 	blt	r4,r3,200dfb4 <__adddf3+0x378>
 200ddd8:	00800804 	movi	r2,32
 200dddc:	10c5c83a 	sub	r2,r2,r3
 200dde0:	8884d83a 	srl	r2,r17,r2
 200dde4:	98d0983a 	sll	r8,r19,r3
 200dde8:	88e2983a 	sll	r17,r17,r3
 200ddec:	1204b03a 	or	r2,r2,r8
 200ddf0:	1c007416 	blt	r3,r16,200dfc4 <__adddf3+0x388>
 200ddf4:	1c21c83a 	sub	r16,r3,r16
 200ddf8:	82000044 	addi	r8,r16,1
 200ddfc:	00c007c4 	movi	r3,31
 200de00:	1a009116 	blt	r3,r8,200e048 <__adddf3+0x40c>
 200de04:	00c00804 	movi	r3,32
 200de08:	1a07c83a 	sub	r3,r3,r8
 200de0c:	8a08d83a 	srl	r4,r17,r8
 200de10:	88e2983a 	sll	r17,r17,r3
 200de14:	10c6983a 	sll	r3,r2,r3
 200de18:	1210d83a 	srl	r8,r2,r8
 200de1c:	8804c03a 	cmpne	r2,r17,zero
 200de20:	1906b03a 	or	r3,r3,r4
 200de24:	18a2b03a 	or	r17,r3,r2
 200de28:	0021883a 	mov	r16,zero
 200de2c:	003fa206 	br	200dcb8 <__adddf3+0x7c>
 200de30:	1890b03a 	or	r8,r3,r2
 200de34:	40017d26 	beq	r8,zero,200e42c <__adddf3+0x7f0>
 200de38:	1011883a 	mov	r8,r2
 200de3c:	1823883a 	mov	r17,r3
 200de40:	888001cc 	andi	r2,r17,7
 200de44:	103f9e1e 	bne	r2,zero,200dcc0 <__adddf3+0x84>
 200de48:	4004977a 	slli	r2,r8,29
 200de4c:	8822d0fa 	srli	r17,r17,3
 200de50:	4010d0fa 	srli	r8,r8,3
 200de54:	9007883a 	mov	r3,r18
 200de58:	1444b03a 	or	r2,r2,r17
 200de5c:	0101ffc4 	movi	r4,2047
 200de60:	81002426 	beq	r16,r4,200def4 <__adddf3+0x2b8>
 200de64:	8120703a 	and	r16,r16,r4
 200de68:	01000434 	movhi	r4,16
 200de6c:	213fffc4 	addi	r4,r4,-1
 200de70:	4110703a 	and	r8,r8,r4
 200de74:	003fa806 	br	200dd18 <__adddf3+0xdc>
 200de78:	8089c83a 	sub	r4,r16,r2
 200de7c:	01005e0e 	bge	zero,r4,200dff8 <__adddf3+0x3bc>
 200de80:	10002b26 	beq	r2,zero,200df30 <__adddf3+0x2f4>
 200de84:	0081ffc4 	movi	r2,2047
 200de88:	80bf8b26 	beq	r16,r2,200dcb8 <__adddf3+0x7c>
 200de8c:	4a402034 	orhi	r9,r9,128
 200de90:	00800e04 	movi	r2,56
 200de94:	1100a40e 	bge	r2,r4,200e128 <__adddf3+0x4ec>
 200de98:	498cb03a 	or	r6,r9,r6
 200de9c:	300ac03a 	cmpne	r5,r6,zero
 200dea0:	0013883a 	mov	r9,zero
 200dea4:	2c4b883a 	add	r5,r5,r17
 200dea8:	2c63803a 	cmpltu	r17,r5,r17
 200deac:	4a11883a 	add	r8,r9,r8
 200deb0:	8a11883a 	add	r8,r17,r8
 200deb4:	2823883a 	mov	r17,r5
 200deb8:	4080202c 	andhi	r2,r8,128
 200debc:	103fe026 	beq	r2,zero,200de40 <__adddf3+0x204>
 200dec0:	84000044 	addi	r16,r16,1
 200dec4:	0081ffc4 	movi	r2,2047
 200dec8:	8080d226 	beq	r16,r2,200e214 <__adddf3+0x5d8>
 200decc:	00bfe034 	movhi	r2,65408
 200ded0:	10bfffc4 	addi	r2,r2,-1
 200ded4:	4090703a 	and	r8,r8,r2
 200ded8:	880ad07a 	srli	r5,r17,1
 200dedc:	400897fa 	slli	r4,r8,31
 200dee0:	88c0004c 	andi	r3,r17,1
 200dee4:	28e2b03a 	or	r17,r5,r3
 200dee8:	4010d07a 	srli	r8,r8,1
 200deec:	2462b03a 	or	r17,r4,r17
 200def0:	003f7106 	br	200dcb8 <__adddf3+0x7c>
 200def4:	4088b03a 	or	r4,r8,r2
 200def8:	20014526 	beq	r4,zero,200e410 <__adddf3+0x7d4>
 200defc:	01000434 	movhi	r4,16
 200df00:	42000234 	orhi	r8,r8,8
 200df04:	213fffc4 	addi	r4,r4,-1
 200df08:	4110703a 	and	r8,r8,r4
 200df0c:	003f8206 	br	200dd18 <__adddf3+0xdc>
 200df10:	18ffffc4 	addi	r3,r3,-1
 200df14:	1800491e 	bne	r3,zero,200e03c <__adddf3+0x400>
 200df18:	898bc83a 	sub	r5,r17,r6
 200df1c:	8963803a 	cmpltu	r17,r17,r5
 200df20:	4251c83a 	sub	r8,r8,r9
 200df24:	4451c83a 	sub	r8,r8,r17
 200df28:	2823883a 	mov	r17,r5
 200df2c:	003f9f06 	br	200ddac <__adddf3+0x170>
 200df30:	4984b03a 	or	r2,r9,r6
 200df34:	103f6026 	beq	r2,zero,200dcb8 <__adddf3+0x7c>
 200df38:	213fffc4 	addi	r4,r4,-1
 200df3c:	2000931e 	bne	r4,zero,200e18c <__adddf3+0x550>
 200df40:	898d883a 	add	r6,r17,r6
 200df44:	3463803a 	cmpltu	r17,r6,r17
 200df48:	4251883a 	add	r8,r8,r9
 200df4c:	8a11883a 	add	r8,r17,r8
 200df50:	3023883a 	mov	r17,r6
 200df54:	003fd806 	br	200deb8 <__adddf3+0x27c>
 200df58:	1800541e 	bne	r3,zero,200e0ac <__adddf3+0x470>
 200df5c:	80800044 	addi	r2,r16,1
 200df60:	1081ffcc 	andi	r2,r2,2047
 200df64:	00c00044 	movi	r3,1
 200df68:	1880a00e 	bge	r3,r2,200e1ec <__adddf3+0x5b0>
 200df6c:	8989c83a 	sub	r4,r17,r6
 200df70:	8905803a 	cmpltu	r2,r17,r4
 200df74:	4267c83a 	sub	r19,r8,r9
 200df78:	98a7c83a 	sub	r19,r19,r2
 200df7c:	9880202c 	andhi	r2,r19,128
 200df80:	10006326 	beq	r2,zero,200e110 <__adddf3+0x4d4>
 200df84:	3463c83a 	sub	r17,r6,r17
 200df88:	4a07c83a 	sub	r3,r9,r8
 200df8c:	344d803a 	cmpltu	r6,r6,r17
 200df90:	19a7c83a 	sub	r19,r3,r6
 200df94:	3825883a 	mov	r18,r7
 200df98:	983f8a1e 	bne	r19,zero,200ddc4 <__adddf3+0x188>
 200df9c:	8809883a 	mov	r4,r17
 200dfa0:	20006b80 	call	20006b8 <__clzsi2>
 200dfa4:	10800804 	addi	r2,r2,32
 200dfa8:	10fffe04 	addi	r3,r2,-8
 200dfac:	010007c4 	movi	r4,31
 200dfb0:	20ff890e 	bge	r4,r3,200ddd8 <__adddf3+0x19c>
 200dfb4:	10bff604 	addi	r2,r2,-40
 200dfb8:	8884983a 	sll	r2,r17,r2
 200dfbc:	0023883a 	mov	r17,zero
 200dfc0:	1c3f8c0e 	bge	r3,r16,200ddf4 <__adddf3+0x1b8>
 200dfc4:	023fe034 	movhi	r8,65408
 200dfc8:	423fffc4 	addi	r8,r8,-1
 200dfcc:	80e1c83a 	sub	r16,r16,r3
 200dfd0:	1210703a 	and	r8,r2,r8
 200dfd4:	003f3806 	br	200dcb8 <__adddf3+0x7c>
 200dfd8:	9007883a 	mov	r3,r18
 200dfdc:	0011883a 	mov	r8,zero
 200dfe0:	0005883a 	mov	r2,zero
 200dfe4:	003f4c06 	br	200dd18 <__adddf3+0xdc>
 200dfe8:	498cb03a 	or	r6,r9,r6
 200dfec:	300cc03a 	cmpne	r6,r6,zero
 200dff0:	0007883a 	mov	r3,zero
 200dff4:	003f6806 	br	200dd98 <__adddf3+0x15c>
 200dff8:	20009c1e 	bne	r4,zero,200e26c <__adddf3+0x630>
 200dffc:	80800044 	addi	r2,r16,1
 200e000:	1141ffcc 	andi	r5,r2,2047
 200e004:	01000044 	movi	r4,1
 200e008:	2140670e 	bge	r4,r5,200e1a8 <__adddf3+0x56c>
 200e00c:	0101ffc4 	movi	r4,2047
 200e010:	11007f26 	beq	r2,r4,200e210 <__adddf3+0x5d4>
 200e014:	898d883a 	add	r6,r17,r6
 200e018:	4247883a 	add	r3,r8,r9
 200e01c:	3451803a 	cmpltu	r8,r6,r17
 200e020:	40d1883a 	add	r8,r8,r3
 200e024:	402297fa 	slli	r17,r8,31
 200e028:	300cd07a 	srli	r6,r6,1
 200e02c:	4010d07a 	srli	r8,r8,1
 200e030:	1021883a 	mov	r16,r2
 200e034:	89a2b03a 	or	r17,r17,r6
 200e038:	003f1f06 	br	200dcb8 <__adddf3+0x7c>
 200e03c:	0081ffc4 	movi	r2,2047
 200e040:	80bf481e 	bne	r16,r2,200dd64 <__adddf3+0x128>
 200e044:	003f1c06 	br	200dcb8 <__adddf3+0x7c>
 200e048:	843ff844 	addi	r16,r16,-31
 200e04c:	01000804 	movi	r4,32
 200e050:	1406d83a 	srl	r3,r2,r16
 200e054:	41005026 	beq	r8,r4,200e198 <__adddf3+0x55c>
 200e058:	01001004 	movi	r4,64
 200e05c:	2211c83a 	sub	r8,r4,r8
 200e060:	1204983a 	sll	r2,r2,r8
 200e064:	88a2b03a 	or	r17,r17,r2
 200e068:	8822c03a 	cmpne	r17,r17,zero
 200e06c:	1c62b03a 	or	r17,r3,r17
 200e070:	0011883a 	mov	r8,zero
 200e074:	0021883a 	mov	r16,zero
 200e078:	003f7106 	br	200de40 <__adddf3+0x204>
 200e07c:	193ff804 	addi	r4,r3,-32
 200e080:	00800804 	movi	r2,32
 200e084:	4908d83a 	srl	r4,r9,r4
 200e088:	18804526 	beq	r3,r2,200e1a0 <__adddf3+0x564>
 200e08c:	00801004 	movi	r2,64
 200e090:	10c5c83a 	sub	r2,r2,r3
 200e094:	4886983a 	sll	r3,r9,r2
 200e098:	198cb03a 	or	r6,r3,r6
 200e09c:	300cc03a 	cmpne	r6,r6,zero
 200e0a0:	218cb03a 	or	r6,r4,r6
 200e0a4:	0007883a 	mov	r3,zero
 200e0a8:	003f3b06 	br	200dd98 <__adddf3+0x15c>
 200e0ac:	80002a26 	beq	r16,zero,200e158 <__adddf3+0x51c>
 200e0b0:	0101ffc4 	movi	r4,2047
 200e0b4:	11006826 	beq	r2,r4,200e258 <__adddf3+0x61c>
 200e0b8:	00c7c83a 	sub	r3,zero,r3
 200e0bc:	42002034 	orhi	r8,r8,128
 200e0c0:	01000e04 	movi	r4,56
 200e0c4:	20c07c16 	blt	r4,r3,200e2b8 <__adddf3+0x67c>
 200e0c8:	010007c4 	movi	r4,31
 200e0cc:	20c0da16 	blt	r4,r3,200e438 <__adddf3+0x7fc>
 200e0d0:	01000804 	movi	r4,32
 200e0d4:	20c9c83a 	sub	r4,r4,r3
 200e0d8:	4114983a 	sll	r10,r8,r4
 200e0dc:	88cad83a 	srl	r5,r17,r3
 200e0e0:	8908983a 	sll	r4,r17,r4
 200e0e4:	40c6d83a 	srl	r3,r8,r3
 200e0e8:	5162b03a 	or	r17,r10,r5
 200e0ec:	2008c03a 	cmpne	r4,r4,zero
 200e0f0:	8922b03a 	or	r17,r17,r4
 200e0f4:	3463c83a 	sub	r17,r6,r17
 200e0f8:	48c7c83a 	sub	r3,r9,r3
 200e0fc:	344d803a 	cmpltu	r6,r6,r17
 200e100:	1991c83a 	sub	r8,r3,r6
 200e104:	1021883a 	mov	r16,r2
 200e108:	3825883a 	mov	r18,r7
 200e10c:	003f2706 	br	200ddac <__adddf3+0x170>
 200e110:	24d0b03a 	or	r8,r4,r19
 200e114:	40001b1e 	bne	r8,zero,200e184 <__adddf3+0x548>
 200e118:	0005883a 	mov	r2,zero
 200e11c:	0007883a 	mov	r3,zero
 200e120:	0021883a 	mov	r16,zero
 200e124:	003f4d06 	br	200de5c <__adddf3+0x220>
 200e128:	008007c4 	movi	r2,31
 200e12c:	11003c16 	blt	r2,r4,200e220 <__adddf3+0x5e4>
 200e130:	00800804 	movi	r2,32
 200e134:	1105c83a 	sub	r2,r2,r4
 200e138:	488e983a 	sll	r7,r9,r2
 200e13c:	310ad83a 	srl	r5,r6,r4
 200e140:	3084983a 	sll	r2,r6,r2
 200e144:	4912d83a 	srl	r9,r9,r4
 200e148:	394ab03a 	or	r5,r7,r5
 200e14c:	1004c03a 	cmpne	r2,r2,zero
 200e150:	288ab03a 	or	r5,r5,r2
 200e154:	003f5306 	br	200dea4 <__adddf3+0x268>
 200e158:	4448b03a 	or	r4,r8,r17
 200e15c:	20003e26 	beq	r4,zero,200e258 <__adddf3+0x61c>
 200e160:	00c6303a 	nor	r3,zero,r3
 200e164:	18003a1e 	bne	r3,zero,200e250 <__adddf3+0x614>
 200e168:	3463c83a 	sub	r17,r6,r17
 200e16c:	4a07c83a 	sub	r3,r9,r8
 200e170:	344d803a 	cmpltu	r6,r6,r17
 200e174:	1991c83a 	sub	r8,r3,r6
 200e178:	1021883a 	mov	r16,r2
 200e17c:	3825883a 	mov	r18,r7
 200e180:	003f0a06 	br	200ddac <__adddf3+0x170>
 200e184:	2023883a 	mov	r17,r4
 200e188:	003f0d06 	br	200ddc0 <__adddf3+0x184>
 200e18c:	0081ffc4 	movi	r2,2047
 200e190:	80bf3f1e 	bne	r16,r2,200de90 <__adddf3+0x254>
 200e194:	003ec806 	br	200dcb8 <__adddf3+0x7c>
 200e198:	0005883a 	mov	r2,zero
 200e19c:	003fb106 	br	200e064 <__adddf3+0x428>
 200e1a0:	0007883a 	mov	r3,zero
 200e1a4:	003fbc06 	br	200e098 <__adddf3+0x45c>
 200e1a8:	4444b03a 	or	r2,r8,r17
 200e1ac:	8000871e 	bne	r16,zero,200e3cc <__adddf3+0x790>
 200e1b0:	1000ba26 	beq	r2,zero,200e49c <__adddf3+0x860>
 200e1b4:	4984b03a 	or	r2,r9,r6
 200e1b8:	103ebf26 	beq	r2,zero,200dcb8 <__adddf3+0x7c>
 200e1bc:	8985883a 	add	r2,r17,r6
 200e1c0:	4247883a 	add	r3,r8,r9
 200e1c4:	1451803a 	cmpltu	r8,r2,r17
 200e1c8:	40d1883a 	add	r8,r8,r3
 200e1cc:	40c0202c 	andhi	r3,r8,128
 200e1d0:	1023883a 	mov	r17,r2
 200e1d4:	183f1a26 	beq	r3,zero,200de40 <__adddf3+0x204>
 200e1d8:	00bfe034 	movhi	r2,65408
 200e1dc:	10bfffc4 	addi	r2,r2,-1
 200e1e0:	2021883a 	mov	r16,r4
 200e1e4:	4090703a 	and	r8,r8,r2
 200e1e8:	003eb306 	br	200dcb8 <__adddf3+0x7c>
 200e1ec:	4444b03a 	or	r2,r8,r17
 200e1f0:	8000291e 	bne	r16,zero,200e298 <__adddf3+0x65c>
 200e1f4:	10004b1e 	bne	r2,zero,200e324 <__adddf3+0x6e8>
 200e1f8:	4990b03a 	or	r8,r9,r6
 200e1fc:	40008b26 	beq	r8,zero,200e42c <__adddf3+0x7f0>
 200e200:	4811883a 	mov	r8,r9
 200e204:	3023883a 	mov	r17,r6
 200e208:	3825883a 	mov	r18,r7
 200e20c:	003eaa06 	br	200dcb8 <__adddf3+0x7c>
 200e210:	1021883a 	mov	r16,r2
 200e214:	0011883a 	mov	r8,zero
 200e218:	0005883a 	mov	r2,zero
 200e21c:	003f0f06 	br	200de5c <__adddf3+0x220>
 200e220:	217ff804 	addi	r5,r4,-32
 200e224:	00800804 	movi	r2,32
 200e228:	494ad83a 	srl	r5,r9,r5
 200e22c:	20807d26 	beq	r4,r2,200e424 <__adddf3+0x7e8>
 200e230:	00801004 	movi	r2,64
 200e234:	1109c83a 	sub	r4,r2,r4
 200e238:	4912983a 	sll	r9,r9,r4
 200e23c:	498cb03a 	or	r6,r9,r6
 200e240:	300cc03a 	cmpne	r6,r6,zero
 200e244:	298ab03a 	or	r5,r5,r6
 200e248:	0013883a 	mov	r9,zero
 200e24c:	003f1506 	br	200dea4 <__adddf3+0x268>
 200e250:	0101ffc4 	movi	r4,2047
 200e254:	113f9a1e 	bne	r2,r4,200e0c0 <__adddf3+0x484>
 200e258:	4811883a 	mov	r8,r9
 200e25c:	3023883a 	mov	r17,r6
 200e260:	1021883a 	mov	r16,r2
 200e264:	3825883a 	mov	r18,r7
 200e268:	003e9306 	br	200dcb8 <__adddf3+0x7c>
 200e26c:	8000161e 	bne	r16,zero,200e2c8 <__adddf3+0x68c>
 200e270:	444ab03a 	or	r5,r8,r17
 200e274:	28005126 	beq	r5,zero,200e3bc <__adddf3+0x780>
 200e278:	0108303a 	nor	r4,zero,r4
 200e27c:	20004d1e 	bne	r4,zero,200e3b4 <__adddf3+0x778>
 200e280:	89a3883a 	add	r17,r17,r6
 200e284:	4253883a 	add	r9,r8,r9
 200e288:	898d803a 	cmpltu	r6,r17,r6
 200e28c:	3251883a 	add	r8,r6,r9
 200e290:	1021883a 	mov	r16,r2
 200e294:	003f0806 	br	200deb8 <__adddf3+0x27c>
 200e298:	1000301e 	bne	r2,zero,200e35c <__adddf3+0x720>
 200e29c:	4984b03a 	or	r2,r9,r6
 200e2a0:	10007126 	beq	r2,zero,200e468 <__adddf3+0x82c>
 200e2a4:	4811883a 	mov	r8,r9
 200e2a8:	3023883a 	mov	r17,r6
 200e2ac:	3825883a 	mov	r18,r7
 200e2b0:	0401ffc4 	movi	r16,2047
 200e2b4:	003e8006 	br	200dcb8 <__adddf3+0x7c>
 200e2b8:	4462b03a 	or	r17,r8,r17
 200e2bc:	8822c03a 	cmpne	r17,r17,zero
 200e2c0:	0007883a 	mov	r3,zero
 200e2c4:	003f8b06 	br	200e0f4 <__adddf3+0x4b8>
 200e2c8:	0141ffc4 	movi	r5,2047
 200e2cc:	11403b26 	beq	r2,r5,200e3bc <__adddf3+0x780>
 200e2d0:	0109c83a 	sub	r4,zero,r4
 200e2d4:	42002034 	orhi	r8,r8,128
 200e2d8:	01400e04 	movi	r5,56
 200e2dc:	29006716 	blt	r5,r4,200e47c <__adddf3+0x840>
 200e2e0:	014007c4 	movi	r5,31
 200e2e4:	29007016 	blt	r5,r4,200e4a8 <__adddf3+0x86c>
 200e2e8:	01400804 	movi	r5,32
 200e2ec:	290bc83a 	sub	r5,r5,r4
 200e2f0:	4154983a 	sll	r10,r8,r5
 200e2f4:	890ed83a 	srl	r7,r17,r4
 200e2f8:	894a983a 	sll	r5,r17,r5
 200e2fc:	4108d83a 	srl	r4,r8,r4
 200e300:	51e2b03a 	or	r17,r10,r7
 200e304:	280ac03a 	cmpne	r5,r5,zero
 200e308:	8962b03a 	or	r17,r17,r5
 200e30c:	89a3883a 	add	r17,r17,r6
 200e310:	2253883a 	add	r9,r4,r9
 200e314:	898d803a 	cmpltu	r6,r17,r6
 200e318:	3251883a 	add	r8,r6,r9
 200e31c:	1021883a 	mov	r16,r2
 200e320:	003ee506 	br	200deb8 <__adddf3+0x27c>
 200e324:	4984b03a 	or	r2,r9,r6
 200e328:	103e6326 	beq	r2,zero,200dcb8 <__adddf3+0x7c>
 200e32c:	8987c83a 	sub	r3,r17,r6
 200e330:	88c9803a 	cmpltu	r4,r17,r3
 200e334:	4245c83a 	sub	r2,r8,r9
 200e338:	1105c83a 	sub	r2,r2,r4
 200e33c:	1100202c 	andhi	r4,r2,128
 200e340:	203ebb26 	beq	r4,zero,200de30 <__adddf3+0x1f4>
 200e344:	3463c83a 	sub	r17,r6,r17
 200e348:	4a07c83a 	sub	r3,r9,r8
 200e34c:	344d803a 	cmpltu	r6,r6,r17
 200e350:	1991c83a 	sub	r8,r3,r6
 200e354:	3825883a 	mov	r18,r7
 200e358:	003e5706 	br	200dcb8 <__adddf3+0x7c>
 200e35c:	4984b03a 	or	r2,r9,r6
 200e360:	10002e26 	beq	r2,zero,200e41c <__adddf3+0x7e0>
 200e364:	4004d0fa 	srli	r2,r8,3
 200e368:	8822d0fa 	srli	r17,r17,3
 200e36c:	4010977a 	slli	r8,r8,29
 200e370:	10c0022c 	andhi	r3,r2,8
 200e374:	4462b03a 	or	r17,r8,r17
 200e378:	18000826 	beq	r3,zero,200e39c <__adddf3+0x760>
 200e37c:	4808d0fa 	srli	r4,r9,3
 200e380:	20c0022c 	andhi	r3,r4,8
 200e384:	1800051e 	bne	r3,zero,200e39c <__adddf3+0x760>
 200e388:	300cd0fa 	srli	r6,r6,3
 200e38c:	4806977a 	slli	r3,r9,29
 200e390:	2005883a 	mov	r2,r4
 200e394:	3825883a 	mov	r18,r7
 200e398:	19a2b03a 	or	r17,r3,r6
 200e39c:	8810d77a 	srli	r8,r17,29
 200e3a0:	100490fa 	slli	r2,r2,3
 200e3a4:	882290fa 	slli	r17,r17,3
 200e3a8:	0401ffc4 	movi	r16,2047
 200e3ac:	4090b03a 	or	r8,r8,r2
 200e3b0:	003e4106 	br	200dcb8 <__adddf3+0x7c>
 200e3b4:	0141ffc4 	movi	r5,2047
 200e3b8:	117fc71e 	bne	r2,r5,200e2d8 <__adddf3+0x69c>
 200e3bc:	4811883a 	mov	r8,r9
 200e3c0:	3023883a 	mov	r17,r6
 200e3c4:	1021883a 	mov	r16,r2
 200e3c8:	003e3b06 	br	200dcb8 <__adddf3+0x7c>
 200e3cc:	10002f26 	beq	r2,zero,200e48c <__adddf3+0x850>
 200e3d0:	4984b03a 	or	r2,r9,r6
 200e3d4:	10001126 	beq	r2,zero,200e41c <__adddf3+0x7e0>
 200e3d8:	4004d0fa 	srli	r2,r8,3
 200e3dc:	8822d0fa 	srli	r17,r17,3
 200e3e0:	4010977a 	slli	r8,r8,29
 200e3e4:	10c0022c 	andhi	r3,r2,8
 200e3e8:	4462b03a 	or	r17,r8,r17
 200e3ec:	183feb26 	beq	r3,zero,200e39c <__adddf3+0x760>
 200e3f0:	4808d0fa 	srli	r4,r9,3
 200e3f4:	20c0022c 	andhi	r3,r4,8
 200e3f8:	183fe81e 	bne	r3,zero,200e39c <__adddf3+0x760>
 200e3fc:	300cd0fa 	srli	r6,r6,3
 200e400:	4806977a 	slli	r3,r9,29
 200e404:	2005883a 	mov	r2,r4
 200e408:	19a2b03a 	or	r17,r3,r6
 200e40c:	003fe306 	br	200e39c <__adddf3+0x760>
 200e410:	0011883a 	mov	r8,zero
 200e414:	0005883a 	mov	r2,zero
 200e418:	003e3f06 	br	200dd18 <__adddf3+0xdc>
 200e41c:	0401ffc4 	movi	r16,2047
 200e420:	003e2506 	br	200dcb8 <__adddf3+0x7c>
 200e424:	0013883a 	mov	r9,zero
 200e428:	003f8406 	br	200e23c <__adddf3+0x600>
 200e42c:	0005883a 	mov	r2,zero
 200e430:	0007883a 	mov	r3,zero
 200e434:	003e8906 	br	200de5c <__adddf3+0x220>
 200e438:	197ff804 	addi	r5,r3,-32
 200e43c:	01000804 	movi	r4,32
 200e440:	414ad83a 	srl	r5,r8,r5
 200e444:	19002426 	beq	r3,r4,200e4d8 <__adddf3+0x89c>
 200e448:	01001004 	movi	r4,64
 200e44c:	20c7c83a 	sub	r3,r4,r3
 200e450:	40c6983a 	sll	r3,r8,r3
 200e454:	1c46b03a 	or	r3,r3,r17
 200e458:	1806c03a 	cmpne	r3,r3,zero
 200e45c:	28e2b03a 	or	r17,r5,r3
 200e460:	0007883a 	mov	r3,zero
 200e464:	003f2306 	br	200e0f4 <__adddf3+0x4b8>
 200e468:	0007883a 	mov	r3,zero
 200e46c:	5811883a 	mov	r8,r11
 200e470:	00bfffc4 	movi	r2,-1
 200e474:	0401ffc4 	movi	r16,2047
 200e478:	003e7806 	br	200de5c <__adddf3+0x220>
 200e47c:	4462b03a 	or	r17,r8,r17
 200e480:	8822c03a 	cmpne	r17,r17,zero
 200e484:	0009883a 	mov	r4,zero
 200e488:	003fa006 	br	200e30c <__adddf3+0x6d0>
 200e48c:	4811883a 	mov	r8,r9
 200e490:	3023883a 	mov	r17,r6
 200e494:	0401ffc4 	movi	r16,2047
 200e498:	003e0706 	br	200dcb8 <__adddf3+0x7c>
 200e49c:	4811883a 	mov	r8,r9
 200e4a0:	3023883a 	mov	r17,r6
 200e4a4:	003e0406 	br	200dcb8 <__adddf3+0x7c>
 200e4a8:	21fff804 	addi	r7,r4,-32
 200e4ac:	01400804 	movi	r5,32
 200e4b0:	41ced83a 	srl	r7,r8,r7
 200e4b4:	21400a26 	beq	r4,r5,200e4e0 <__adddf3+0x8a4>
 200e4b8:	01401004 	movi	r5,64
 200e4bc:	2909c83a 	sub	r4,r5,r4
 200e4c0:	4108983a 	sll	r4,r8,r4
 200e4c4:	2448b03a 	or	r4,r4,r17
 200e4c8:	2008c03a 	cmpne	r4,r4,zero
 200e4cc:	3922b03a 	or	r17,r7,r4
 200e4d0:	0009883a 	mov	r4,zero
 200e4d4:	003f8d06 	br	200e30c <__adddf3+0x6d0>
 200e4d8:	0007883a 	mov	r3,zero
 200e4dc:	003fdd06 	br	200e454 <__adddf3+0x818>
 200e4e0:	0009883a 	mov	r4,zero
 200e4e4:	003ff706 	br	200e4c4 <__adddf3+0x888>

0200e4e8 <__divdf3>:
 200e4e8:	defff204 	addi	sp,sp,-56
 200e4ec:	dd400915 	stw	r21,36(sp)
 200e4f0:	282ad53a 	srli	r21,r5,20
 200e4f4:	dd000815 	stw	r20,32(sp)
 200e4f8:	2828d7fa 	srli	r20,r5,31
 200e4fc:	dc000415 	stw	r16,16(sp)
 200e500:	04000434 	movhi	r16,16
 200e504:	df000c15 	stw	fp,48(sp)
 200e508:	843fffc4 	addi	r16,r16,-1
 200e50c:	dfc00d15 	stw	ra,52(sp)
 200e510:	ddc00b15 	stw	r23,44(sp)
 200e514:	dd800a15 	stw	r22,40(sp)
 200e518:	dcc00715 	stw	r19,28(sp)
 200e51c:	dc800615 	stw	r18,24(sp)
 200e520:	dc400515 	stw	r17,20(sp)
 200e524:	ad41ffcc 	andi	r21,r21,2047
 200e528:	2c20703a 	and	r16,r5,r16
 200e52c:	a7003fcc 	andi	fp,r20,255
 200e530:	a8006126 	beq	r21,zero,200e6b8 <__divdf3+0x1d0>
 200e534:	0081ffc4 	movi	r2,2047
 200e538:	2025883a 	mov	r18,r4
 200e53c:	a8803726 	beq	r21,r2,200e61c <__divdf3+0x134>
 200e540:	80800434 	orhi	r2,r16,16
 200e544:	100490fa 	slli	r2,r2,3
 200e548:	2020d77a 	srli	r16,r4,29
 200e54c:	202490fa 	slli	r18,r4,3
 200e550:	ad7f0044 	addi	r21,r21,-1023
 200e554:	80a0b03a 	or	r16,r16,r2
 200e558:	0027883a 	mov	r19,zero
 200e55c:	0013883a 	mov	r9,zero
 200e560:	3804d53a 	srli	r2,r7,20
 200e564:	382cd7fa 	srli	r22,r7,31
 200e568:	04400434 	movhi	r17,16
 200e56c:	8c7fffc4 	addi	r17,r17,-1
 200e570:	1081ffcc 	andi	r2,r2,2047
 200e574:	3011883a 	mov	r8,r6
 200e578:	3c62703a 	and	r17,r7,r17
 200e57c:	b5c03fcc 	andi	r23,r22,255
 200e580:	10006c26 	beq	r2,zero,200e734 <__divdf3+0x24c>
 200e584:	00c1ffc4 	movi	r3,2047
 200e588:	10c06426 	beq	r2,r3,200e71c <__divdf3+0x234>
 200e58c:	88c00434 	orhi	r3,r17,16
 200e590:	180690fa 	slli	r3,r3,3
 200e594:	3022d77a 	srli	r17,r6,29
 200e598:	301090fa 	slli	r8,r6,3
 200e59c:	10bf0044 	addi	r2,r2,-1023
 200e5a0:	88e2b03a 	or	r17,r17,r3
 200e5a4:	000f883a 	mov	r7,zero
 200e5a8:	a58cf03a 	xor	r6,r20,r22
 200e5ac:	3cc8b03a 	or	r4,r7,r19
 200e5b0:	a8abc83a 	sub	r21,r21,r2
 200e5b4:	008003c4 	movi	r2,15
 200e5b8:	3007883a 	mov	r3,r6
 200e5bc:	34c03fcc 	andi	r19,r6,255
 200e5c0:	11009036 	bltu	r2,r4,200e804 <__divdf3+0x31c>
 200e5c4:	200890ba 	slli	r4,r4,2
 200e5c8:	00808074 	movhi	r2,513
 200e5cc:	10b97704 	addi	r2,r2,-6692
 200e5d0:	2089883a 	add	r4,r4,r2
 200e5d4:	20800017 	ldw	r2,0(r4)
 200e5d8:	1000683a 	jmp	r2
 200e5dc:	0200e804 	movi	r8,928
 200e5e0:	0200e654 	movui	r8,921
 200e5e4:	0200e7f4 	movhi	r8,927
 200e5e8:	0200e648 	cmpgei	r8,zero,921
 200e5ec:	0200e7f4 	movhi	r8,927
 200e5f0:	0200e7c8 	cmpgei	r8,zero,927
 200e5f4:	0200e7f4 	movhi	r8,927
 200e5f8:	0200e648 	cmpgei	r8,zero,921
 200e5fc:	0200e654 	movui	r8,921
 200e600:	0200e654 	movui	r8,921
 200e604:	0200e7c8 	cmpgei	r8,zero,927
 200e608:	0200e648 	cmpgei	r8,zero,921
 200e60c:	0200e638 	rdprs	r8,zero,920
 200e610:	0200e638 	rdprs	r8,zero,920
 200e614:	0200e638 	rdprs	r8,zero,920
 200e618:	0200eae8 	cmpgeui	r8,zero,939
 200e61c:	2404b03a 	or	r2,r4,r16
 200e620:	1000661e 	bne	r2,zero,200e7bc <__divdf3+0x2d4>
 200e624:	04c00204 	movi	r19,8
 200e628:	0021883a 	mov	r16,zero
 200e62c:	0025883a 	mov	r18,zero
 200e630:	02400084 	movi	r9,2
 200e634:	003fca06 	br	200e560 <__divdf3+0x78>
 200e638:	8023883a 	mov	r17,r16
 200e63c:	9011883a 	mov	r8,r18
 200e640:	e02f883a 	mov	r23,fp
 200e644:	480f883a 	mov	r7,r9
 200e648:	00800084 	movi	r2,2
 200e64c:	3881311e 	bne	r7,r2,200eb14 <__divdf3+0x62c>
 200e650:	b827883a 	mov	r19,r23
 200e654:	98c0004c 	andi	r3,r19,1
 200e658:	0081ffc4 	movi	r2,2047
 200e65c:	000b883a 	mov	r5,zero
 200e660:	0025883a 	mov	r18,zero
 200e664:	1004953a 	slli	r2,r2,20
 200e668:	18c03fcc 	andi	r3,r3,255
 200e66c:	04400434 	movhi	r17,16
 200e670:	8c7fffc4 	addi	r17,r17,-1
 200e674:	180697fa 	slli	r3,r3,31
 200e678:	2c4a703a 	and	r5,r5,r17
 200e67c:	288ab03a 	or	r5,r5,r2
 200e680:	28c6b03a 	or	r3,r5,r3
 200e684:	9005883a 	mov	r2,r18
 200e688:	dfc00d17 	ldw	ra,52(sp)
 200e68c:	df000c17 	ldw	fp,48(sp)
 200e690:	ddc00b17 	ldw	r23,44(sp)
 200e694:	dd800a17 	ldw	r22,40(sp)
 200e698:	dd400917 	ldw	r21,36(sp)
 200e69c:	dd000817 	ldw	r20,32(sp)
 200e6a0:	dcc00717 	ldw	r19,28(sp)
 200e6a4:	dc800617 	ldw	r18,24(sp)
 200e6a8:	dc400517 	ldw	r17,20(sp)
 200e6ac:	dc000417 	ldw	r16,16(sp)
 200e6b0:	dec00e04 	addi	sp,sp,56
 200e6b4:	f800283a 	ret
 200e6b8:	2404b03a 	or	r2,r4,r16
 200e6bc:	2027883a 	mov	r19,r4
 200e6c0:	10003926 	beq	r2,zero,200e7a8 <__divdf3+0x2c0>
 200e6c4:	80012e26 	beq	r16,zero,200eb80 <__divdf3+0x698>
 200e6c8:	8009883a 	mov	r4,r16
 200e6cc:	d9800315 	stw	r6,12(sp)
 200e6d0:	d9c00215 	stw	r7,8(sp)
 200e6d4:	20006b80 	call	20006b8 <__clzsi2>
 200e6d8:	d9800317 	ldw	r6,12(sp)
 200e6dc:	d9c00217 	ldw	r7,8(sp)
 200e6e0:	113ffd44 	addi	r4,r2,-11
 200e6e4:	00c00704 	movi	r3,28
 200e6e8:	19012116 	blt	r3,r4,200eb70 <__divdf3+0x688>
 200e6ec:	00c00744 	movi	r3,29
 200e6f0:	147ffe04 	addi	r17,r2,-8
 200e6f4:	1907c83a 	sub	r3,r3,r4
 200e6f8:	8460983a 	sll	r16,r16,r17
 200e6fc:	98c6d83a 	srl	r3,r19,r3
 200e700:	9c64983a 	sll	r18,r19,r17
 200e704:	1c20b03a 	or	r16,r3,r16
 200e708:	1080fcc4 	addi	r2,r2,1011
 200e70c:	00abc83a 	sub	r21,zero,r2
 200e710:	0027883a 	mov	r19,zero
 200e714:	0013883a 	mov	r9,zero
 200e718:	003f9106 	br	200e560 <__divdf3+0x78>
 200e71c:	3446b03a 	or	r3,r6,r17
 200e720:	18001f1e 	bne	r3,zero,200e7a0 <__divdf3+0x2b8>
 200e724:	0023883a 	mov	r17,zero
 200e728:	0011883a 	mov	r8,zero
 200e72c:	01c00084 	movi	r7,2
 200e730:	003f9d06 	br	200e5a8 <__divdf3+0xc0>
 200e734:	3446b03a 	or	r3,r6,r17
 200e738:	18001526 	beq	r3,zero,200e790 <__divdf3+0x2a8>
 200e73c:	88011b26 	beq	r17,zero,200ebac <__divdf3+0x6c4>
 200e740:	8809883a 	mov	r4,r17
 200e744:	d9800315 	stw	r6,12(sp)
 200e748:	da400115 	stw	r9,4(sp)
 200e74c:	20006b80 	call	20006b8 <__clzsi2>
 200e750:	d9800317 	ldw	r6,12(sp)
 200e754:	da400117 	ldw	r9,4(sp)
 200e758:	113ffd44 	addi	r4,r2,-11
 200e75c:	00c00704 	movi	r3,28
 200e760:	19010e16 	blt	r3,r4,200eb9c <__divdf3+0x6b4>
 200e764:	00c00744 	movi	r3,29
 200e768:	123ffe04 	addi	r8,r2,-8
 200e76c:	1907c83a 	sub	r3,r3,r4
 200e770:	8a22983a 	sll	r17,r17,r8
 200e774:	30c6d83a 	srl	r3,r6,r3
 200e778:	3210983a 	sll	r8,r6,r8
 200e77c:	1c62b03a 	or	r17,r3,r17
 200e780:	1080fcc4 	addi	r2,r2,1011
 200e784:	0085c83a 	sub	r2,zero,r2
 200e788:	000f883a 	mov	r7,zero
 200e78c:	003f8606 	br	200e5a8 <__divdf3+0xc0>
 200e790:	0023883a 	mov	r17,zero
 200e794:	0011883a 	mov	r8,zero
 200e798:	01c00044 	movi	r7,1
 200e79c:	003f8206 	br	200e5a8 <__divdf3+0xc0>
 200e7a0:	01c000c4 	movi	r7,3
 200e7a4:	003f8006 	br	200e5a8 <__divdf3+0xc0>
 200e7a8:	04c00104 	movi	r19,4
 200e7ac:	0021883a 	mov	r16,zero
 200e7b0:	0025883a 	mov	r18,zero
 200e7b4:	02400044 	movi	r9,1
 200e7b8:	003f6906 	br	200e560 <__divdf3+0x78>
 200e7bc:	04c00304 	movi	r19,12
 200e7c0:	024000c4 	movi	r9,3
 200e7c4:	003f6606 	br	200e560 <__divdf3+0x78>
 200e7c8:	01400434 	movhi	r5,16
 200e7cc:	0007883a 	mov	r3,zero
 200e7d0:	297fffc4 	addi	r5,r5,-1
 200e7d4:	04bfffc4 	movi	r18,-1
 200e7d8:	0081ffc4 	movi	r2,2047
 200e7dc:	003fa106 	br	200e664 <__divdf3+0x17c>
 200e7e0:	00c00044 	movi	r3,1
 200e7e4:	1887c83a 	sub	r3,r3,r2
 200e7e8:	01000e04 	movi	r4,56
 200e7ec:	20c1210e 	bge	r4,r3,200ec74 <__divdf3+0x78c>
 200e7f0:	98c0004c 	andi	r3,r19,1
 200e7f4:	0005883a 	mov	r2,zero
 200e7f8:	000b883a 	mov	r5,zero
 200e7fc:	0025883a 	mov	r18,zero
 200e800:	003f9806 	br	200e664 <__divdf3+0x17c>
 200e804:	8c00fd36 	bltu	r17,r16,200ebfc <__divdf3+0x714>
 200e808:	8440fb26 	beq	r16,r17,200ebf8 <__divdf3+0x710>
 200e80c:	8007883a 	mov	r3,r16
 200e810:	ad7fffc4 	addi	r21,r21,-1
 200e814:	0021883a 	mov	r16,zero
 200e818:	4004d63a 	srli	r2,r8,24
 200e81c:	8822923a 	slli	r17,r17,8
 200e820:	1809883a 	mov	r4,r3
 200e824:	402c923a 	slli	r22,r8,8
 200e828:	88b8b03a 	or	fp,r17,r2
 200e82c:	e028d43a 	srli	r20,fp,16
 200e830:	d8c00015 	stw	r3,0(sp)
 200e834:	e5ffffcc 	andi	r23,fp,65535
 200e838:	a00b883a 	mov	r5,r20
 200e83c:	200db800 	call	200db80 <__udivsi3>
 200e840:	d8c00017 	ldw	r3,0(sp)
 200e844:	a00b883a 	mov	r5,r20
 200e848:	d8800315 	stw	r2,12(sp)
 200e84c:	1809883a 	mov	r4,r3
 200e850:	200dbe40 	call	200dbe4 <__umodsi3>
 200e854:	d9800317 	ldw	r6,12(sp)
 200e858:	1006943a 	slli	r3,r2,16
 200e85c:	9004d43a 	srli	r2,r18,16
 200e860:	b9a3383a 	mul	r17,r23,r6
 200e864:	10c4b03a 	or	r2,r2,r3
 200e868:	1440062e 	bgeu	r2,r17,200e884 <__divdf3+0x39c>
 200e86c:	1705883a 	add	r2,r2,fp
 200e870:	30ffffc4 	addi	r3,r6,-1
 200e874:	1700ee36 	bltu	r2,fp,200ec30 <__divdf3+0x748>
 200e878:	1440ed2e 	bgeu	r2,r17,200ec30 <__divdf3+0x748>
 200e87c:	31bfff84 	addi	r6,r6,-2
 200e880:	1705883a 	add	r2,r2,fp
 200e884:	1463c83a 	sub	r17,r2,r17
 200e888:	a00b883a 	mov	r5,r20
 200e88c:	8809883a 	mov	r4,r17
 200e890:	d9800315 	stw	r6,12(sp)
 200e894:	200db800 	call	200db80 <__udivsi3>
 200e898:	a00b883a 	mov	r5,r20
 200e89c:	8809883a 	mov	r4,r17
 200e8a0:	d8800215 	stw	r2,8(sp)
 200e8a4:	200dbe40 	call	200dbe4 <__umodsi3>
 200e8a8:	d9c00217 	ldw	r7,8(sp)
 200e8ac:	1004943a 	slli	r2,r2,16
 200e8b0:	94bfffcc 	andi	r18,r18,65535
 200e8b4:	b9d1383a 	mul	r8,r23,r7
 200e8b8:	90a4b03a 	or	r18,r18,r2
 200e8bc:	d9800317 	ldw	r6,12(sp)
 200e8c0:	9200062e 	bgeu	r18,r8,200e8dc <__divdf3+0x3f4>
 200e8c4:	9725883a 	add	r18,r18,fp
 200e8c8:	38bfffc4 	addi	r2,r7,-1
 200e8cc:	9700d636 	bltu	r18,fp,200ec28 <__divdf3+0x740>
 200e8d0:	9200d52e 	bgeu	r18,r8,200ec28 <__divdf3+0x740>
 200e8d4:	39ffff84 	addi	r7,r7,-2
 200e8d8:	9725883a 	add	r18,r18,fp
 200e8dc:	3004943a 	slli	r2,r6,16
 200e8e0:	b012d43a 	srli	r9,r22,16
 200e8e4:	b1bfffcc 	andi	r6,r22,65535
 200e8e8:	11e2b03a 	or	r17,r2,r7
 200e8ec:	8806d43a 	srli	r3,r17,16
 200e8f0:	893fffcc 	andi	r4,r17,65535
 200e8f4:	218b383a 	mul	r5,r4,r6
 200e8f8:	30c5383a 	mul	r2,r6,r3
 200e8fc:	2249383a 	mul	r4,r4,r9
 200e900:	280ed43a 	srli	r7,r5,16
 200e904:	9225c83a 	sub	r18,r18,r8
 200e908:	2089883a 	add	r4,r4,r2
 200e90c:	3909883a 	add	r4,r7,r4
 200e910:	1a47383a 	mul	r3,r3,r9
 200e914:	2080022e 	bgeu	r4,r2,200e920 <__divdf3+0x438>
 200e918:	00800074 	movhi	r2,1
 200e91c:	1887883a 	add	r3,r3,r2
 200e920:	2004d43a 	srli	r2,r4,16
 200e924:	2008943a 	slli	r4,r4,16
 200e928:	297fffcc 	andi	r5,r5,65535
 200e92c:	10c7883a 	add	r3,r2,r3
 200e930:	2149883a 	add	r4,r4,r5
 200e934:	90c0a536 	bltu	r18,r3,200ebcc <__divdf3+0x6e4>
 200e938:	90c0bf26 	beq	r18,r3,200ec38 <__divdf3+0x750>
 200e93c:	90c7c83a 	sub	r3,r18,r3
 200e940:	810fc83a 	sub	r7,r16,r4
 200e944:	81e5803a 	cmpltu	r18,r16,r7
 200e948:	1ca5c83a 	sub	r18,r3,r18
 200e94c:	e480c126 	beq	fp,r18,200ec54 <__divdf3+0x76c>
 200e950:	a00b883a 	mov	r5,r20
 200e954:	9009883a 	mov	r4,r18
 200e958:	d9800315 	stw	r6,12(sp)
 200e95c:	d9c00215 	stw	r7,8(sp)
 200e960:	da400115 	stw	r9,4(sp)
 200e964:	200db800 	call	200db80 <__udivsi3>
 200e968:	a00b883a 	mov	r5,r20
 200e96c:	9009883a 	mov	r4,r18
 200e970:	d8800015 	stw	r2,0(sp)
 200e974:	200dbe40 	call	200dbe4 <__umodsi3>
 200e978:	d9c00217 	ldw	r7,8(sp)
 200e97c:	da000017 	ldw	r8,0(sp)
 200e980:	1006943a 	slli	r3,r2,16
 200e984:	3804d43a 	srli	r2,r7,16
 200e988:	ba21383a 	mul	r16,r23,r8
 200e98c:	d9800317 	ldw	r6,12(sp)
 200e990:	10c4b03a 	or	r2,r2,r3
 200e994:	da400117 	ldw	r9,4(sp)
 200e998:	1400062e 	bgeu	r2,r16,200e9b4 <__divdf3+0x4cc>
 200e99c:	1705883a 	add	r2,r2,fp
 200e9a0:	40ffffc4 	addi	r3,r8,-1
 200e9a4:	1700ad36 	bltu	r2,fp,200ec5c <__divdf3+0x774>
 200e9a8:	1400ac2e 	bgeu	r2,r16,200ec5c <__divdf3+0x774>
 200e9ac:	423fff84 	addi	r8,r8,-2
 200e9b0:	1705883a 	add	r2,r2,fp
 200e9b4:	1421c83a 	sub	r16,r2,r16
 200e9b8:	a00b883a 	mov	r5,r20
 200e9bc:	8009883a 	mov	r4,r16
 200e9c0:	d9800315 	stw	r6,12(sp)
 200e9c4:	d9c00215 	stw	r7,8(sp)
 200e9c8:	da000015 	stw	r8,0(sp)
 200e9cc:	da400115 	stw	r9,4(sp)
 200e9d0:	200db800 	call	200db80 <__udivsi3>
 200e9d4:	8009883a 	mov	r4,r16
 200e9d8:	a00b883a 	mov	r5,r20
 200e9dc:	1025883a 	mov	r18,r2
 200e9e0:	200dbe40 	call	200dbe4 <__umodsi3>
 200e9e4:	d9c00217 	ldw	r7,8(sp)
 200e9e8:	1004943a 	slli	r2,r2,16
 200e9ec:	bcaf383a 	mul	r23,r23,r18
 200e9f0:	393fffcc 	andi	r4,r7,65535
 200e9f4:	2088b03a 	or	r4,r4,r2
 200e9f8:	d9800317 	ldw	r6,12(sp)
 200e9fc:	da000017 	ldw	r8,0(sp)
 200ea00:	da400117 	ldw	r9,4(sp)
 200ea04:	25c0062e 	bgeu	r4,r23,200ea20 <__divdf3+0x538>
 200ea08:	2709883a 	add	r4,r4,fp
 200ea0c:	90bfffc4 	addi	r2,r18,-1
 200ea10:	27009436 	bltu	r4,fp,200ec64 <__divdf3+0x77c>
 200ea14:	25c0932e 	bgeu	r4,r23,200ec64 <__divdf3+0x77c>
 200ea18:	94bfff84 	addi	r18,r18,-2
 200ea1c:	2709883a 	add	r4,r4,fp
 200ea20:	4004943a 	slli	r2,r8,16
 200ea24:	25efc83a 	sub	r23,r4,r23
 200ea28:	1490b03a 	or	r8,r2,r18
 200ea2c:	4008d43a 	srli	r4,r8,16
 200ea30:	40ffffcc 	andi	r3,r8,65535
 200ea34:	30c5383a 	mul	r2,r6,r3
 200ea38:	1a47383a 	mul	r3,r3,r9
 200ea3c:	310d383a 	mul	r6,r6,r4
 200ea40:	100ad43a 	srli	r5,r2,16
 200ea44:	4913383a 	mul	r9,r9,r4
 200ea48:	1987883a 	add	r3,r3,r6
 200ea4c:	28c7883a 	add	r3,r5,r3
 200ea50:	1980022e 	bgeu	r3,r6,200ea5c <__divdf3+0x574>
 200ea54:	01000074 	movhi	r4,1
 200ea58:	4913883a 	add	r9,r9,r4
 200ea5c:	1808d43a 	srli	r4,r3,16
 200ea60:	1806943a 	slli	r3,r3,16
 200ea64:	10bfffcc 	andi	r2,r2,65535
 200ea68:	2253883a 	add	r9,r4,r9
 200ea6c:	1887883a 	add	r3,r3,r2
 200ea70:	ba403836 	bltu	r23,r9,200eb54 <__divdf3+0x66c>
 200ea74:	ba403626 	beq	r23,r9,200eb50 <__divdf3+0x668>
 200ea78:	42000054 	ori	r8,r8,1
 200ea7c:	a880ffc4 	addi	r2,r21,1023
 200ea80:	00bf570e 	bge	zero,r2,200e7e0 <__divdf3+0x2f8>
 200ea84:	40c001cc 	andi	r3,r8,7
 200ea88:	18000726 	beq	r3,zero,200eaa8 <__divdf3+0x5c0>
 200ea8c:	40c003cc 	andi	r3,r8,15
 200ea90:	01000104 	movi	r4,4
 200ea94:	19000426 	beq	r3,r4,200eaa8 <__divdf3+0x5c0>
 200ea98:	4107883a 	add	r3,r8,r4
 200ea9c:	1a11803a 	cmpltu	r8,r3,r8
 200eaa0:	8a23883a 	add	r17,r17,r8
 200eaa4:	1811883a 	mov	r8,r3
 200eaa8:	88c0402c 	andhi	r3,r17,256
 200eaac:	18000426 	beq	r3,zero,200eac0 <__divdf3+0x5d8>
 200eab0:	00ffc034 	movhi	r3,65280
 200eab4:	18ffffc4 	addi	r3,r3,-1
 200eab8:	a8810004 	addi	r2,r21,1024
 200eabc:	88e2703a 	and	r17,r17,r3
 200eac0:	00c1ff84 	movi	r3,2046
 200eac4:	18bee316 	blt	r3,r2,200e654 <__divdf3+0x16c>
 200eac8:	8824977a 	slli	r18,r17,29
 200eacc:	4010d0fa 	srli	r8,r8,3
 200ead0:	8822927a 	slli	r17,r17,9
 200ead4:	1081ffcc 	andi	r2,r2,2047
 200ead8:	9224b03a 	or	r18,r18,r8
 200eadc:	880ad33a 	srli	r5,r17,12
 200eae0:	98c0004c 	andi	r3,r19,1
 200eae4:	003edf06 	br	200e664 <__divdf3+0x17c>
 200eae8:	8080022c 	andhi	r2,r16,8
 200eaec:	10001226 	beq	r2,zero,200eb38 <__divdf3+0x650>
 200eaf0:	8880022c 	andhi	r2,r17,8
 200eaf4:	1000101e 	bne	r2,zero,200eb38 <__divdf3+0x650>
 200eaf8:	00800434 	movhi	r2,16
 200eafc:	89400234 	orhi	r5,r17,8
 200eb00:	10bfffc4 	addi	r2,r2,-1
 200eb04:	b007883a 	mov	r3,r22
 200eb08:	288a703a 	and	r5,r5,r2
 200eb0c:	4025883a 	mov	r18,r8
 200eb10:	003f3106 	br	200e7d8 <__divdf3+0x2f0>
 200eb14:	008000c4 	movi	r2,3
 200eb18:	3880a626 	beq	r7,r2,200edb4 <__divdf3+0x8cc>
 200eb1c:	00800044 	movi	r2,1
 200eb20:	3880521e 	bne	r7,r2,200ec6c <__divdf3+0x784>
 200eb24:	b807883a 	mov	r3,r23
 200eb28:	0005883a 	mov	r2,zero
 200eb2c:	000b883a 	mov	r5,zero
 200eb30:	0025883a 	mov	r18,zero
 200eb34:	003ecb06 	br	200e664 <__divdf3+0x17c>
 200eb38:	00800434 	movhi	r2,16
 200eb3c:	81400234 	orhi	r5,r16,8
 200eb40:	10bfffc4 	addi	r2,r2,-1
 200eb44:	a007883a 	mov	r3,r20
 200eb48:	288a703a 	and	r5,r5,r2
 200eb4c:	003f2206 	br	200e7d8 <__divdf3+0x2f0>
 200eb50:	183fca26 	beq	r3,zero,200ea7c <__divdf3+0x594>
 200eb54:	e5ef883a 	add	r23,fp,r23
 200eb58:	40bfffc4 	addi	r2,r8,-1
 200eb5c:	bf00392e 	bgeu	r23,fp,200ec44 <__divdf3+0x75c>
 200eb60:	1011883a 	mov	r8,r2
 200eb64:	ba7fc41e 	bne	r23,r9,200ea78 <__divdf3+0x590>
 200eb68:	b0ffc31e 	bne	r22,r3,200ea78 <__divdf3+0x590>
 200eb6c:	003fc306 	br	200ea7c <__divdf3+0x594>
 200eb70:	143ff604 	addi	r16,r2,-40
 200eb74:	9c20983a 	sll	r16,r19,r16
 200eb78:	0025883a 	mov	r18,zero
 200eb7c:	003ee206 	br	200e708 <__divdf3+0x220>
 200eb80:	d9800315 	stw	r6,12(sp)
 200eb84:	d9c00215 	stw	r7,8(sp)
 200eb88:	20006b80 	call	20006b8 <__clzsi2>
 200eb8c:	10800804 	addi	r2,r2,32
 200eb90:	d9c00217 	ldw	r7,8(sp)
 200eb94:	d9800317 	ldw	r6,12(sp)
 200eb98:	003ed106 	br	200e6e0 <__divdf3+0x1f8>
 200eb9c:	147ff604 	addi	r17,r2,-40
 200eba0:	3462983a 	sll	r17,r6,r17
 200eba4:	0011883a 	mov	r8,zero
 200eba8:	003ef506 	br	200e780 <__divdf3+0x298>
 200ebac:	3009883a 	mov	r4,r6
 200ebb0:	d9800315 	stw	r6,12(sp)
 200ebb4:	da400115 	stw	r9,4(sp)
 200ebb8:	20006b80 	call	20006b8 <__clzsi2>
 200ebbc:	10800804 	addi	r2,r2,32
 200ebc0:	da400117 	ldw	r9,4(sp)
 200ebc4:	d9800317 	ldw	r6,12(sp)
 200ebc8:	003ee306 	br	200e758 <__divdf3+0x270>
 200ebcc:	85a1883a 	add	r16,r16,r22
 200ebd0:	8585803a 	cmpltu	r2,r16,r22
 200ebd4:	1705883a 	add	r2,r2,fp
 200ebd8:	14a5883a 	add	r18,r2,r18
 200ebdc:	88bfffc4 	addi	r2,r17,-1
 200ebe0:	e4800c2e 	bgeu	fp,r18,200ec14 <__divdf3+0x72c>
 200ebe4:	90c03e36 	bltu	r18,r3,200ece0 <__divdf3+0x7f8>
 200ebe8:	1c806926 	beq	r3,r18,200ed90 <__divdf3+0x8a8>
 200ebec:	90c7c83a 	sub	r3,r18,r3
 200ebf0:	1023883a 	mov	r17,r2
 200ebf4:	003f5206 	br	200e940 <__divdf3+0x458>
 200ebf8:	923f0436 	bltu	r18,r8,200e80c <__divdf3+0x324>
 200ebfc:	800897fa 	slli	r4,r16,31
 200ec00:	9004d07a 	srli	r2,r18,1
 200ec04:	8006d07a 	srli	r3,r16,1
 200ec08:	902097fa 	slli	r16,r18,31
 200ec0c:	20a4b03a 	or	r18,r4,r2
 200ec10:	003f0106 	br	200e818 <__divdf3+0x330>
 200ec14:	e4bff51e 	bne	fp,r18,200ebec <__divdf3+0x704>
 200ec18:	85bff22e 	bgeu	r16,r22,200ebe4 <__divdf3+0x6fc>
 200ec1c:	e0c7c83a 	sub	r3,fp,r3
 200ec20:	1023883a 	mov	r17,r2
 200ec24:	003f4606 	br	200e940 <__divdf3+0x458>
 200ec28:	100f883a 	mov	r7,r2
 200ec2c:	003f2b06 	br	200e8dc <__divdf3+0x3f4>
 200ec30:	180d883a 	mov	r6,r3
 200ec34:	003f1306 	br	200e884 <__divdf3+0x39c>
 200ec38:	813fe436 	bltu	r16,r4,200ebcc <__divdf3+0x6e4>
 200ec3c:	0007883a 	mov	r3,zero
 200ec40:	003f3f06 	br	200e940 <__divdf3+0x458>
 200ec44:	ba402c36 	bltu	r23,r9,200ecf8 <__divdf3+0x810>
 200ec48:	4dc05426 	beq	r9,r23,200ed9c <__divdf3+0x8b4>
 200ec4c:	1011883a 	mov	r8,r2
 200ec50:	003f8906 	br	200ea78 <__divdf3+0x590>
 200ec54:	023fffc4 	movi	r8,-1
 200ec58:	003f8806 	br	200ea7c <__divdf3+0x594>
 200ec5c:	1811883a 	mov	r8,r3
 200ec60:	003f5406 	br	200e9b4 <__divdf3+0x4cc>
 200ec64:	1025883a 	mov	r18,r2
 200ec68:	003f6d06 	br	200ea20 <__divdf3+0x538>
 200ec6c:	b827883a 	mov	r19,r23
 200ec70:	003f8206 	br	200ea7c <__divdf3+0x594>
 200ec74:	010007c4 	movi	r4,31
 200ec78:	20c02616 	blt	r4,r3,200ed14 <__divdf3+0x82c>
 200ec7c:	00800804 	movi	r2,32
 200ec80:	10c5c83a 	sub	r2,r2,r3
 200ec84:	888a983a 	sll	r5,r17,r2
 200ec88:	40c8d83a 	srl	r4,r8,r3
 200ec8c:	4084983a 	sll	r2,r8,r2
 200ec90:	88e2d83a 	srl	r17,r17,r3
 200ec94:	2906b03a 	or	r3,r5,r4
 200ec98:	1004c03a 	cmpne	r2,r2,zero
 200ec9c:	1886b03a 	or	r3,r3,r2
 200eca0:	188001cc 	andi	r2,r3,7
 200eca4:	10000726 	beq	r2,zero,200ecc4 <__divdf3+0x7dc>
 200eca8:	188003cc 	andi	r2,r3,15
 200ecac:	01000104 	movi	r4,4
 200ecb0:	11000426 	beq	r2,r4,200ecc4 <__divdf3+0x7dc>
 200ecb4:	1805883a 	mov	r2,r3
 200ecb8:	10c00104 	addi	r3,r2,4
 200ecbc:	1885803a 	cmpltu	r2,r3,r2
 200ecc0:	88a3883a 	add	r17,r17,r2
 200ecc4:	8880202c 	andhi	r2,r17,128
 200ecc8:	10002726 	beq	r2,zero,200ed68 <__divdf3+0x880>
 200eccc:	98c0004c 	andi	r3,r19,1
 200ecd0:	00800044 	movi	r2,1
 200ecd4:	000b883a 	mov	r5,zero
 200ecd8:	0025883a 	mov	r18,zero
 200ecdc:	003e6106 	br	200e664 <__divdf3+0x17c>
 200ece0:	85a1883a 	add	r16,r16,r22
 200ece4:	8585803a 	cmpltu	r2,r16,r22
 200ece8:	1705883a 	add	r2,r2,fp
 200ecec:	14a5883a 	add	r18,r2,r18
 200ecf0:	8c7fff84 	addi	r17,r17,-2
 200ecf4:	003f1106 	br	200e93c <__divdf3+0x454>
 200ecf8:	b589883a 	add	r4,r22,r22
 200ecfc:	25ad803a 	cmpltu	r22,r4,r22
 200ed00:	b739883a 	add	fp,r22,fp
 200ed04:	40bfff84 	addi	r2,r8,-2
 200ed08:	bf2f883a 	add	r23,r23,fp
 200ed0c:	202d883a 	mov	r22,r4
 200ed10:	003f9306 	br	200eb60 <__divdf3+0x678>
 200ed14:	013ff844 	movi	r4,-31
 200ed18:	2085c83a 	sub	r2,r4,r2
 200ed1c:	8888d83a 	srl	r4,r17,r2
 200ed20:	00800804 	movi	r2,32
 200ed24:	18802126 	beq	r3,r2,200edac <__divdf3+0x8c4>
 200ed28:	00801004 	movi	r2,64
 200ed2c:	10c5c83a 	sub	r2,r2,r3
 200ed30:	8884983a 	sll	r2,r17,r2
 200ed34:	1204b03a 	or	r2,r2,r8
 200ed38:	1004c03a 	cmpne	r2,r2,zero
 200ed3c:	2084b03a 	or	r2,r4,r2
 200ed40:	144001cc 	andi	r17,r2,7
 200ed44:	88000d1e 	bne	r17,zero,200ed7c <__divdf3+0x894>
 200ed48:	000b883a 	mov	r5,zero
 200ed4c:	1024d0fa 	srli	r18,r2,3
 200ed50:	98c0004c 	andi	r3,r19,1
 200ed54:	0005883a 	mov	r2,zero
 200ed58:	9464b03a 	or	r18,r18,r17
 200ed5c:	003e4106 	br	200e664 <__divdf3+0x17c>
 200ed60:	1007883a 	mov	r3,r2
 200ed64:	0023883a 	mov	r17,zero
 200ed68:	880a927a 	slli	r5,r17,9
 200ed6c:	1805883a 	mov	r2,r3
 200ed70:	8822977a 	slli	r17,r17,29
 200ed74:	280ad33a 	srli	r5,r5,12
 200ed78:	003ff406 	br	200ed4c <__divdf3+0x864>
 200ed7c:	10c003cc 	andi	r3,r2,15
 200ed80:	01000104 	movi	r4,4
 200ed84:	193ff626 	beq	r3,r4,200ed60 <__divdf3+0x878>
 200ed88:	0023883a 	mov	r17,zero
 200ed8c:	003fca06 	br	200ecb8 <__divdf3+0x7d0>
 200ed90:	813fd336 	bltu	r16,r4,200ece0 <__divdf3+0x7f8>
 200ed94:	1023883a 	mov	r17,r2
 200ed98:	003fa806 	br	200ec3c <__divdf3+0x754>
 200ed9c:	b0ffd636 	bltu	r22,r3,200ecf8 <__divdf3+0x810>
 200eda0:	1011883a 	mov	r8,r2
 200eda4:	b0ff341e 	bne	r22,r3,200ea78 <__divdf3+0x590>
 200eda8:	003f3406 	br	200ea7c <__divdf3+0x594>
 200edac:	0005883a 	mov	r2,zero
 200edb0:	003fe006 	br	200ed34 <__divdf3+0x84c>
 200edb4:	00800434 	movhi	r2,16
 200edb8:	89400234 	orhi	r5,r17,8
 200edbc:	10bfffc4 	addi	r2,r2,-1
 200edc0:	b807883a 	mov	r3,r23
 200edc4:	288a703a 	and	r5,r5,r2
 200edc8:	4025883a 	mov	r18,r8
 200edcc:	003e8206 	br	200e7d8 <__divdf3+0x2f0>

0200edd0 <__eqdf2>:
 200edd0:	2804d53a 	srli	r2,r5,20
 200edd4:	3806d53a 	srli	r3,r7,20
 200edd8:	02000434 	movhi	r8,16
 200eddc:	423fffc4 	addi	r8,r8,-1
 200ede0:	1081ffcc 	andi	r2,r2,2047
 200ede4:	0281ffc4 	movi	r10,2047
 200ede8:	2a12703a 	and	r9,r5,r8
 200edec:	18c1ffcc 	andi	r3,r3,2047
 200edf0:	3a10703a 	and	r8,r7,r8
 200edf4:	280ad7fa 	srli	r5,r5,31
 200edf8:	380ed7fa 	srli	r7,r7,31
 200edfc:	12801026 	beq	r2,r10,200ee40 <__eqdf2+0x70>
 200ee00:	0281ffc4 	movi	r10,2047
 200ee04:	1a800a26 	beq	r3,r10,200ee30 <__eqdf2+0x60>
 200ee08:	10c00226 	beq	r2,r3,200ee14 <__eqdf2+0x44>
 200ee0c:	00800044 	movi	r2,1
 200ee10:	f800283a 	ret
 200ee14:	4a3ffd1e 	bne	r9,r8,200ee0c <__eqdf2+0x3c>
 200ee18:	21bffc1e 	bne	r4,r6,200ee0c <__eqdf2+0x3c>
 200ee1c:	29c00c26 	beq	r5,r7,200ee50 <__eqdf2+0x80>
 200ee20:	103ffa1e 	bne	r2,zero,200ee0c <__eqdf2+0x3c>
 200ee24:	2244b03a 	or	r2,r4,r9
 200ee28:	1004c03a 	cmpne	r2,r2,zero
 200ee2c:	f800283a 	ret
 200ee30:	3214b03a 	or	r10,r6,r8
 200ee34:	503ff426 	beq	r10,zero,200ee08 <__eqdf2+0x38>
 200ee38:	00800044 	movi	r2,1
 200ee3c:	f800283a 	ret
 200ee40:	2254b03a 	or	r10,r4,r9
 200ee44:	503fee26 	beq	r10,zero,200ee00 <__eqdf2+0x30>
 200ee48:	00800044 	movi	r2,1
 200ee4c:	f800283a 	ret
 200ee50:	0005883a 	mov	r2,zero
 200ee54:	f800283a 	ret

0200ee58 <__gedf2>:
 200ee58:	2804d53a 	srli	r2,r5,20
 200ee5c:	3806d53a 	srli	r3,r7,20
 200ee60:	02000434 	movhi	r8,16
 200ee64:	423fffc4 	addi	r8,r8,-1
 200ee68:	1081ffcc 	andi	r2,r2,2047
 200ee6c:	0241ffc4 	movi	r9,2047
 200ee70:	2a14703a 	and	r10,r5,r8
 200ee74:	18c1ffcc 	andi	r3,r3,2047
 200ee78:	3a10703a 	and	r8,r7,r8
 200ee7c:	280ad7fa 	srli	r5,r5,31
 200ee80:	380ed7fa 	srli	r7,r7,31
 200ee84:	12401d26 	beq	r2,r9,200eefc <__gedf2+0xa4>
 200ee88:	0241ffc4 	movi	r9,2047
 200ee8c:	1a401226 	beq	r3,r9,200eed8 <__gedf2+0x80>
 200ee90:	1000081e 	bne	r2,zero,200eeb4 <__gedf2+0x5c>
 200ee94:	2296b03a 	or	r11,r4,r10
 200ee98:	5813003a 	cmpeq	r9,r11,zero
 200ee9c:	1800091e 	bne	r3,zero,200eec4 <__gedf2+0x6c>
 200eea0:	3218b03a 	or	r12,r6,r8
 200eea4:	6000071e 	bne	r12,zero,200eec4 <__gedf2+0x6c>
 200eea8:	0005883a 	mov	r2,zero
 200eeac:	5800101e 	bne	r11,zero,200eef0 <__gedf2+0x98>
 200eeb0:	f800283a 	ret
 200eeb4:	18000c1e 	bne	r3,zero,200eee8 <__gedf2+0x90>
 200eeb8:	3212b03a 	or	r9,r6,r8
 200eebc:	48000c26 	beq	r9,zero,200eef0 <__gedf2+0x98>
 200eec0:	0013883a 	mov	r9,zero
 200eec4:	39c03fcc 	andi	r7,r7,255
 200eec8:	48000826 	beq	r9,zero,200eeec <__gedf2+0x94>
 200eecc:	38000926 	beq	r7,zero,200eef4 <__gedf2+0x9c>
 200eed0:	00800044 	movi	r2,1
 200eed4:	f800283a 	ret
 200eed8:	3212b03a 	or	r9,r6,r8
 200eedc:	483fec26 	beq	r9,zero,200ee90 <__gedf2+0x38>
 200eee0:	00bfff84 	movi	r2,-2
 200eee4:	f800283a 	ret
 200eee8:	39c03fcc 	andi	r7,r7,255
 200eeec:	29c00626 	beq	r5,r7,200ef08 <__gedf2+0xb0>
 200eef0:	283ff726 	beq	r5,zero,200eed0 <__gedf2+0x78>
 200eef4:	00bfffc4 	movi	r2,-1
 200eef8:	f800283a 	ret
 200eefc:	2292b03a 	or	r9,r4,r10
 200ef00:	483fe126 	beq	r9,zero,200ee88 <__gedf2+0x30>
 200ef04:	003ff606 	br	200eee0 <__gedf2+0x88>
 200ef08:	18bff916 	blt	r3,r2,200eef0 <__gedf2+0x98>
 200ef0c:	10c00316 	blt	r2,r3,200ef1c <__gedf2+0xc4>
 200ef10:	42bff736 	bltu	r8,r10,200eef0 <__gedf2+0x98>
 200ef14:	52000326 	beq	r10,r8,200ef24 <__gedf2+0xcc>
 200ef18:	5200042e 	bgeu	r10,r8,200ef2c <__gedf2+0xd4>
 200ef1c:	283fec1e 	bne	r5,zero,200eed0 <__gedf2+0x78>
 200ef20:	003ff406 	br	200eef4 <__gedf2+0x9c>
 200ef24:	313ff236 	bltu	r6,r4,200eef0 <__gedf2+0x98>
 200ef28:	21bffc36 	bltu	r4,r6,200ef1c <__gedf2+0xc4>
 200ef2c:	0005883a 	mov	r2,zero
 200ef30:	f800283a 	ret

0200ef34 <__muldf3>:
 200ef34:	defff304 	addi	sp,sp,-52
 200ef38:	2804d53a 	srli	r2,r5,20
 200ef3c:	dd800915 	stw	r22,36(sp)
 200ef40:	282cd7fa 	srli	r22,r5,31
 200ef44:	dc000315 	stw	r16,12(sp)
 200ef48:	04000434 	movhi	r16,16
 200ef4c:	dd400815 	stw	r21,32(sp)
 200ef50:	dc800515 	stw	r18,20(sp)
 200ef54:	843fffc4 	addi	r16,r16,-1
 200ef58:	dfc00c15 	stw	ra,48(sp)
 200ef5c:	df000b15 	stw	fp,44(sp)
 200ef60:	ddc00a15 	stw	r23,40(sp)
 200ef64:	dd000715 	stw	r20,28(sp)
 200ef68:	dcc00615 	stw	r19,24(sp)
 200ef6c:	dc400415 	stw	r17,16(sp)
 200ef70:	1481ffcc 	andi	r18,r2,2047
 200ef74:	2c20703a 	and	r16,r5,r16
 200ef78:	b02b883a 	mov	r21,r22
 200ef7c:	b2403fcc 	andi	r9,r22,255
 200ef80:	90006026 	beq	r18,zero,200f104 <__muldf3+0x1d0>
 200ef84:	0081ffc4 	movi	r2,2047
 200ef88:	2029883a 	mov	r20,r4
 200ef8c:	90803626 	beq	r18,r2,200f068 <__muldf3+0x134>
 200ef90:	80800434 	orhi	r2,r16,16
 200ef94:	100490fa 	slli	r2,r2,3
 200ef98:	2020d77a 	srli	r16,r4,29
 200ef9c:	202890fa 	slli	r20,r4,3
 200efa0:	94bf0044 	addi	r18,r18,-1023
 200efa4:	80a0b03a 	or	r16,r16,r2
 200efa8:	0027883a 	mov	r19,zero
 200efac:	0039883a 	mov	fp,zero
 200efb0:	3804d53a 	srli	r2,r7,20
 200efb4:	382ed7fa 	srli	r23,r7,31
 200efb8:	04400434 	movhi	r17,16
 200efbc:	8c7fffc4 	addi	r17,r17,-1
 200efc0:	1081ffcc 	andi	r2,r2,2047
 200efc4:	3011883a 	mov	r8,r6
 200efc8:	3c62703a 	and	r17,r7,r17
 200efcc:	ba803fcc 	andi	r10,r23,255
 200efd0:	10006d26 	beq	r2,zero,200f188 <__muldf3+0x254>
 200efd4:	00c1ffc4 	movi	r3,2047
 200efd8:	10c06526 	beq	r2,r3,200f170 <__muldf3+0x23c>
 200efdc:	88c00434 	orhi	r3,r17,16
 200efe0:	180690fa 	slli	r3,r3,3
 200efe4:	3022d77a 	srli	r17,r6,29
 200efe8:	301090fa 	slli	r8,r6,3
 200efec:	10bf0044 	addi	r2,r2,-1023
 200eff0:	88e2b03a 	or	r17,r17,r3
 200eff4:	000b883a 	mov	r5,zero
 200eff8:	9085883a 	add	r2,r18,r2
 200effc:	2cc8b03a 	or	r4,r5,r19
 200f000:	00c003c4 	movi	r3,15
 200f004:	bdacf03a 	xor	r22,r23,r22
 200f008:	12c00044 	addi	r11,r2,1
 200f00c:	19009936 	bltu	r3,r4,200f274 <__muldf3+0x340>
 200f010:	200890ba 	slli	r4,r4,2
 200f014:	00c08074 	movhi	r3,513
 200f018:	18fc0a04 	addi	r3,r3,-4056
 200f01c:	20c9883a 	add	r4,r4,r3
 200f020:	20c00017 	ldw	r3,0(r4)
 200f024:	1800683a 	jmp	r3
 200f028:	0200f274 	movhi	r8,969
 200f02c:	0200f088 	cmpgei	r8,zero,962
 200f030:	0200f088 	cmpgei	r8,zero,962
 200f034:	0200f084 	movi	r8,962
 200f038:	0200f250 	cmplti	r8,zero,969
 200f03c:	0200f250 	cmplti	r8,zero,969
 200f040:	0200f238 	rdprs	r8,zero,968
 200f044:	0200f084 	movi	r8,962
 200f048:	0200f250 	cmplti	r8,zero,969
 200f04c:	0200f238 	rdprs	r8,zero,968
 200f050:	0200f250 	cmplti	r8,zero,969
 200f054:	0200f084 	movi	r8,962
 200f058:	0200f260 	cmpeqi	r8,zero,969
 200f05c:	0200f260 	cmpeqi	r8,zero,969
 200f060:	0200f260 	cmpeqi	r8,zero,969
 200f064:	0200f47c 	xorhi	r8,zero,977
 200f068:	2404b03a 	or	r2,r4,r16
 200f06c:	10006f1e 	bne	r2,zero,200f22c <__muldf3+0x2f8>
 200f070:	04c00204 	movi	r19,8
 200f074:	0021883a 	mov	r16,zero
 200f078:	0029883a 	mov	r20,zero
 200f07c:	07000084 	movi	fp,2
 200f080:	003fcb06 	br	200efb0 <__muldf3+0x7c>
 200f084:	502d883a 	mov	r22,r10
 200f088:	00800084 	movi	r2,2
 200f08c:	28805726 	beq	r5,r2,200f1ec <__muldf3+0x2b8>
 200f090:	008000c4 	movi	r2,3
 200f094:	28816626 	beq	r5,r2,200f630 <__muldf3+0x6fc>
 200f098:	00800044 	movi	r2,1
 200f09c:	2881411e 	bne	r5,r2,200f5a4 <__muldf3+0x670>
 200f0a0:	b02b883a 	mov	r21,r22
 200f0a4:	0005883a 	mov	r2,zero
 200f0a8:	000b883a 	mov	r5,zero
 200f0ac:	0029883a 	mov	r20,zero
 200f0b0:	1004953a 	slli	r2,r2,20
 200f0b4:	a8c03fcc 	andi	r3,r21,255
 200f0b8:	04400434 	movhi	r17,16
 200f0bc:	8c7fffc4 	addi	r17,r17,-1
 200f0c0:	180697fa 	slli	r3,r3,31
 200f0c4:	2c4a703a 	and	r5,r5,r17
 200f0c8:	288ab03a 	or	r5,r5,r2
 200f0cc:	28c6b03a 	or	r3,r5,r3
 200f0d0:	a005883a 	mov	r2,r20
 200f0d4:	dfc00c17 	ldw	ra,48(sp)
 200f0d8:	df000b17 	ldw	fp,44(sp)
 200f0dc:	ddc00a17 	ldw	r23,40(sp)
 200f0e0:	dd800917 	ldw	r22,36(sp)
 200f0e4:	dd400817 	ldw	r21,32(sp)
 200f0e8:	dd000717 	ldw	r20,28(sp)
 200f0ec:	dcc00617 	ldw	r19,24(sp)
 200f0f0:	dc800517 	ldw	r18,20(sp)
 200f0f4:	dc400417 	ldw	r17,16(sp)
 200f0f8:	dc000317 	ldw	r16,12(sp)
 200f0fc:	dec00d04 	addi	sp,sp,52
 200f100:	f800283a 	ret
 200f104:	2404b03a 	or	r2,r4,r16
 200f108:	2027883a 	mov	r19,r4
 200f10c:	10004226 	beq	r2,zero,200f218 <__muldf3+0x2e4>
 200f110:	8000fc26 	beq	r16,zero,200f504 <__muldf3+0x5d0>
 200f114:	8009883a 	mov	r4,r16
 200f118:	d9800215 	stw	r6,8(sp)
 200f11c:	d9c00015 	stw	r7,0(sp)
 200f120:	da400115 	stw	r9,4(sp)
 200f124:	20006b80 	call	20006b8 <__clzsi2>
 200f128:	d9800217 	ldw	r6,8(sp)
 200f12c:	d9c00017 	ldw	r7,0(sp)
 200f130:	da400117 	ldw	r9,4(sp)
 200f134:	113ffd44 	addi	r4,r2,-11
 200f138:	00c00704 	movi	r3,28
 200f13c:	1900ed16 	blt	r3,r4,200f4f4 <__muldf3+0x5c0>
 200f140:	00c00744 	movi	r3,29
 200f144:	147ffe04 	addi	r17,r2,-8
 200f148:	1907c83a 	sub	r3,r3,r4
 200f14c:	8460983a 	sll	r16,r16,r17
 200f150:	98c6d83a 	srl	r3,r19,r3
 200f154:	9c68983a 	sll	r20,r19,r17
 200f158:	1c20b03a 	or	r16,r3,r16
 200f15c:	1080fcc4 	addi	r2,r2,1011
 200f160:	00a5c83a 	sub	r18,zero,r2
 200f164:	0027883a 	mov	r19,zero
 200f168:	0039883a 	mov	fp,zero
 200f16c:	003f9006 	br	200efb0 <__muldf3+0x7c>
 200f170:	3446b03a 	or	r3,r6,r17
 200f174:	1800261e 	bne	r3,zero,200f210 <__muldf3+0x2dc>
 200f178:	0023883a 	mov	r17,zero
 200f17c:	0011883a 	mov	r8,zero
 200f180:	01400084 	movi	r5,2
 200f184:	003f9c06 	br	200eff8 <__muldf3+0xc4>
 200f188:	3446b03a 	or	r3,r6,r17
 200f18c:	18001c26 	beq	r3,zero,200f200 <__muldf3+0x2cc>
 200f190:	8800ce26 	beq	r17,zero,200f4cc <__muldf3+0x598>
 200f194:	8809883a 	mov	r4,r17
 200f198:	d9800215 	stw	r6,8(sp)
 200f19c:	da400115 	stw	r9,4(sp)
 200f1a0:	da800015 	stw	r10,0(sp)
 200f1a4:	20006b80 	call	20006b8 <__clzsi2>
 200f1a8:	d9800217 	ldw	r6,8(sp)
 200f1ac:	da400117 	ldw	r9,4(sp)
 200f1b0:	da800017 	ldw	r10,0(sp)
 200f1b4:	113ffd44 	addi	r4,r2,-11
 200f1b8:	00c00704 	movi	r3,28
 200f1bc:	1900bf16 	blt	r3,r4,200f4bc <__muldf3+0x588>
 200f1c0:	00c00744 	movi	r3,29
 200f1c4:	123ffe04 	addi	r8,r2,-8
 200f1c8:	1907c83a 	sub	r3,r3,r4
 200f1cc:	8a22983a 	sll	r17,r17,r8
 200f1d0:	30c6d83a 	srl	r3,r6,r3
 200f1d4:	3210983a 	sll	r8,r6,r8
 200f1d8:	1c62b03a 	or	r17,r3,r17
 200f1dc:	1080fcc4 	addi	r2,r2,1011
 200f1e0:	0085c83a 	sub	r2,zero,r2
 200f1e4:	000b883a 	mov	r5,zero
 200f1e8:	003f8306 	br	200eff8 <__muldf3+0xc4>
 200f1ec:	b02b883a 	mov	r21,r22
 200f1f0:	0081ffc4 	movi	r2,2047
 200f1f4:	000b883a 	mov	r5,zero
 200f1f8:	0029883a 	mov	r20,zero
 200f1fc:	003fac06 	br	200f0b0 <__muldf3+0x17c>
 200f200:	0023883a 	mov	r17,zero
 200f204:	0011883a 	mov	r8,zero
 200f208:	01400044 	movi	r5,1
 200f20c:	003f7a06 	br	200eff8 <__muldf3+0xc4>
 200f210:	014000c4 	movi	r5,3
 200f214:	003f7806 	br	200eff8 <__muldf3+0xc4>
 200f218:	04c00104 	movi	r19,4
 200f21c:	0021883a 	mov	r16,zero
 200f220:	0029883a 	mov	r20,zero
 200f224:	07000044 	movi	fp,1
 200f228:	003f6106 	br	200efb0 <__muldf3+0x7c>
 200f22c:	04c00304 	movi	r19,12
 200f230:	070000c4 	movi	fp,3
 200f234:	003f5e06 	br	200efb0 <__muldf3+0x7c>
 200f238:	01400434 	movhi	r5,16
 200f23c:	002b883a 	mov	r21,zero
 200f240:	297fffc4 	addi	r5,r5,-1
 200f244:	053fffc4 	movi	r20,-1
 200f248:	0081ffc4 	movi	r2,2047
 200f24c:	003f9806 	br	200f0b0 <__muldf3+0x17c>
 200f250:	8023883a 	mov	r17,r16
 200f254:	a011883a 	mov	r8,r20
 200f258:	e00b883a 	mov	r5,fp
 200f25c:	003f8a06 	br	200f088 <__muldf3+0x154>
 200f260:	8023883a 	mov	r17,r16
 200f264:	a011883a 	mov	r8,r20
 200f268:	482d883a 	mov	r22,r9
 200f26c:	e00b883a 	mov	r5,fp
 200f270:	003f8506 	br	200f088 <__muldf3+0x154>
 200f274:	a00ad43a 	srli	r5,r20,16
 200f278:	401ad43a 	srli	r13,r8,16
 200f27c:	a53fffcc 	andi	r20,r20,65535
 200f280:	423fffcc 	andi	r8,r8,65535
 200f284:	4519383a 	mul	r12,r8,r20
 200f288:	4147383a 	mul	r3,r8,r5
 200f28c:	6d09383a 	mul	r4,r13,r20
 200f290:	600cd43a 	srli	r6,r12,16
 200f294:	2b5d383a 	mul	r14,r5,r13
 200f298:	20c9883a 	add	r4,r4,r3
 200f29c:	310d883a 	add	r6,r6,r4
 200f2a0:	30c0022e 	bgeu	r6,r3,200f2ac <__muldf3+0x378>
 200f2a4:	00c00074 	movhi	r3,1
 200f2a8:	70dd883a 	add	r14,r14,r3
 200f2ac:	8826d43a 	srli	r19,r17,16
 200f2b0:	8bffffcc 	andi	r15,r17,65535
 200f2b4:	7d23383a 	mul	r17,r15,r20
 200f2b8:	7949383a 	mul	r4,r15,r5
 200f2bc:	9d29383a 	mul	r20,r19,r20
 200f2c0:	8814d43a 	srli	r10,r17,16
 200f2c4:	3012943a 	slli	r9,r6,16
 200f2c8:	a129883a 	add	r20,r20,r4
 200f2cc:	633fffcc 	andi	r12,r12,65535
 200f2d0:	5515883a 	add	r10,r10,r20
 200f2d4:	3006d43a 	srli	r3,r6,16
 200f2d8:	4b13883a 	add	r9,r9,r12
 200f2dc:	2ccb383a 	mul	r5,r5,r19
 200f2e0:	5100022e 	bgeu	r10,r4,200f2ec <__muldf3+0x3b8>
 200f2e4:	01000074 	movhi	r4,1
 200f2e8:	290b883a 	add	r5,r5,r4
 200f2ec:	802ad43a 	srli	r21,r16,16
 200f2f0:	843fffcc 	andi	r16,r16,65535
 200f2f4:	440d383a 	mul	r6,r8,r16
 200f2f8:	4565383a 	mul	r18,r8,r21
 200f2fc:	8349383a 	mul	r4,r16,r13
 200f300:	500e943a 	slli	r7,r10,16
 200f304:	3010d43a 	srli	r8,r6,16
 200f308:	5028d43a 	srli	r20,r10,16
 200f30c:	2489883a 	add	r4,r4,r18
 200f310:	8abfffcc 	andi	r10,r17,65535
 200f314:	3a95883a 	add	r10,r7,r10
 200f318:	4119883a 	add	r12,r8,r4
 200f31c:	a169883a 	add	r20,r20,r5
 200f320:	1a87883a 	add	r3,r3,r10
 200f324:	6d5b383a 	mul	r13,r13,r21
 200f328:	6480022e 	bgeu	r12,r18,200f334 <__muldf3+0x400>
 200f32c:	01000074 	movhi	r4,1
 200f330:	691b883a 	add	r13,r13,r4
 200f334:	7c25383a 	mul	r18,r15,r16
 200f338:	7d4b383a 	mul	r5,r15,r21
 200f33c:	84cf383a 	mul	r7,r16,r19
 200f340:	901ed43a 	srli	r15,r18,16
 200f344:	6008d43a 	srli	r4,r12,16
 200f348:	6010943a 	slli	r8,r12,16
 200f34c:	394f883a 	add	r7,r7,r5
 200f350:	333fffcc 	andi	r12,r6,65535
 200f354:	79df883a 	add	r15,r15,r7
 200f358:	235b883a 	add	r13,r4,r13
 200f35c:	9d63383a 	mul	r17,r19,r21
 200f360:	4309883a 	add	r4,r8,r12
 200f364:	7940022e 	bgeu	r15,r5,200f370 <__muldf3+0x43c>
 200f368:	01400074 	movhi	r5,1
 200f36c:	8963883a 	add	r17,r17,r5
 200f370:	780a943a 	slli	r5,r15,16
 200f374:	91bfffcc 	andi	r6,r18,65535
 200f378:	70c7883a 	add	r3,r14,r3
 200f37c:	298d883a 	add	r6,r5,r6
 200f380:	1a8f803a 	cmpltu	r7,r3,r10
 200f384:	350b883a 	add	r5,r6,r20
 200f388:	20c7883a 	add	r3,r4,r3
 200f38c:	3955883a 	add	r10,r7,r5
 200f390:	1909803a 	cmpltu	r4,r3,r4
 200f394:	6a91883a 	add	r8,r13,r10
 200f398:	780cd43a 	srli	r6,r15,16
 200f39c:	2219883a 	add	r12,r4,r8
 200f3a0:	2d0b803a 	cmpltu	r5,r5,r20
 200f3a4:	51cf803a 	cmpltu	r7,r10,r7
 200f3a8:	29ceb03a 	or	r7,r5,r7
 200f3ac:	4351803a 	cmpltu	r8,r8,r13
 200f3b0:	610b803a 	cmpltu	r5,r12,r4
 200f3b4:	4148b03a 	or	r4,r8,r5
 200f3b8:	398f883a 	add	r7,r7,r6
 200f3bc:	3909883a 	add	r4,r7,r4
 200f3c0:	1810927a 	slli	r8,r3,9
 200f3c4:	2449883a 	add	r4,r4,r17
 200f3c8:	2008927a 	slli	r4,r4,9
 200f3cc:	6022d5fa 	srli	r17,r12,23
 200f3d0:	1806d5fa 	srli	r3,r3,23
 200f3d4:	4252b03a 	or	r9,r8,r9
 200f3d8:	600a927a 	slli	r5,r12,9
 200f3dc:	4810c03a 	cmpne	r8,r9,zero
 200f3e0:	2462b03a 	or	r17,r4,r17
 200f3e4:	40c6b03a 	or	r3,r8,r3
 200f3e8:	8900402c 	andhi	r4,r17,256
 200f3ec:	1950b03a 	or	r8,r3,r5
 200f3f0:	20000726 	beq	r4,zero,200f410 <__muldf3+0x4dc>
 200f3f4:	4006d07a 	srli	r3,r8,1
 200f3f8:	880497fa 	slli	r2,r17,31
 200f3fc:	4200004c 	andi	r8,r8,1
 200f400:	8822d07a 	srli	r17,r17,1
 200f404:	1a10b03a 	or	r8,r3,r8
 200f408:	1210b03a 	or	r8,r2,r8
 200f40c:	5805883a 	mov	r2,r11
 200f410:	1140ffc4 	addi	r5,r2,1023
 200f414:	0140440e 	bge	zero,r5,200f528 <__muldf3+0x5f4>
 200f418:	40c001cc 	andi	r3,r8,7
 200f41c:	18000726 	beq	r3,zero,200f43c <__muldf3+0x508>
 200f420:	40c003cc 	andi	r3,r8,15
 200f424:	01000104 	movi	r4,4
 200f428:	19000426 	beq	r3,r4,200f43c <__muldf3+0x508>
 200f42c:	4107883a 	add	r3,r8,r4
 200f430:	1a11803a 	cmpltu	r8,r3,r8
 200f434:	8a23883a 	add	r17,r17,r8
 200f438:	1811883a 	mov	r8,r3
 200f43c:	88c0402c 	andhi	r3,r17,256
 200f440:	18000426 	beq	r3,zero,200f454 <__muldf3+0x520>
 200f444:	11410004 	addi	r5,r2,1024
 200f448:	00bfc034 	movhi	r2,65280
 200f44c:	10bfffc4 	addi	r2,r2,-1
 200f450:	88a2703a 	and	r17,r17,r2
 200f454:	0081ff84 	movi	r2,2046
 200f458:	117f6416 	blt	r2,r5,200f1ec <__muldf3+0x2b8>
 200f45c:	8828977a 	slli	r20,r17,29
 200f460:	4010d0fa 	srli	r8,r8,3
 200f464:	8822927a 	slli	r17,r17,9
 200f468:	2881ffcc 	andi	r2,r5,2047
 200f46c:	a228b03a 	or	r20,r20,r8
 200f470:	880ad33a 	srli	r5,r17,12
 200f474:	b02b883a 	mov	r21,r22
 200f478:	003f0d06 	br	200f0b0 <__muldf3+0x17c>
 200f47c:	8080022c 	andhi	r2,r16,8
 200f480:	10000926 	beq	r2,zero,200f4a8 <__muldf3+0x574>
 200f484:	8880022c 	andhi	r2,r17,8
 200f488:	1000071e 	bne	r2,zero,200f4a8 <__muldf3+0x574>
 200f48c:	00800434 	movhi	r2,16
 200f490:	89400234 	orhi	r5,r17,8
 200f494:	10bfffc4 	addi	r2,r2,-1
 200f498:	b82b883a 	mov	r21,r23
 200f49c:	288a703a 	and	r5,r5,r2
 200f4a0:	4029883a 	mov	r20,r8
 200f4a4:	003f6806 	br	200f248 <__muldf3+0x314>
 200f4a8:	00800434 	movhi	r2,16
 200f4ac:	81400234 	orhi	r5,r16,8
 200f4b0:	10bfffc4 	addi	r2,r2,-1
 200f4b4:	288a703a 	and	r5,r5,r2
 200f4b8:	003f6306 	br	200f248 <__muldf3+0x314>
 200f4bc:	147ff604 	addi	r17,r2,-40
 200f4c0:	3462983a 	sll	r17,r6,r17
 200f4c4:	0011883a 	mov	r8,zero
 200f4c8:	003f4406 	br	200f1dc <__muldf3+0x2a8>
 200f4cc:	3009883a 	mov	r4,r6
 200f4d0:	d9800215 	stw	r6,8(sp)
 200f4d4:	da400115 	stw	r9,4(sp)
 200f4d8:	da800015 	stw	r10,0(sp)
 200f4dc:	20006b80 	call	20006b8 <__clzsi2>
 200f4e0:	10800804 	addi	r2,r2,32
 200f4e4:	da800017 	ldw	r10,0(sp)
 200f4e8:	da400117 	ldw	r9,4(sp)
 200f4ec:	d9800217 	ldw	r6,8(sp)
 200f4f0:	003f3006 	br	200f1b4 <__muldf3+0x280>
 200f4f4:	143ff604 	addi	r16,r2,-40
 200f4f8:	9c20983a 	sll	r16,r19,r16
 200f4fc:	0029883a 	mov	r20,zero
 200f500:	003f1606 	br	200f15c <__muldf3+0x228>
 200f504:	d9800215 	stw	r6,8(sp)
 200f508:	d9c00015 	stw	r7,0(sp)
 200f50c:	da400115 	stw	r9,4(sp)
 200f510:	20006b80 	call	20006b8 <__clzsi2>
 200f514:	10800804 	addi	r2,r2,32
 200f518:	da400117 	ldw	r9,4(sp)
 200f51c:	d9c00017 	ldw	r7,0(sp)
 200f520:	d9800217 	ldw	r6,8(sp)
 200f524:	003f0306 	br	200f134 <__muldf3+0x200>
 200f528:	00c00044 	movi	r3,1
 200f52c:	1947c83a 	sub	r3,r3,r5
 200f530:	00800e04 	movi	r2,56
 200f534:	10feda16 	blt	r2,r3,200f0a0 <__muldf3+0x16c>
 200f538:	008007c4 	movi	r2,31
 200f53c:	10c01b16 	blt	r2,r3,200f5ac <__muldf3+0x678>
 200f540:	00800804 	movi	r2,32
 200f544:	10c5c83a 	sub	r2,r2,r3
 200f548:	888a983a 	sll	r5,r17,r2
 200f54c:	40c8d83a 	srl	r4,r8,r3
 200f550:	4084983a 	sll	r2,r8,r2
 200f554:	88e2d83a 	srl	r17,r17,r3
 200f558:	2906b03a 	or	r3,r5,r4
 200f55c:	1004c03a 	cmpne	r2,r2,zero
 200f560:	1886b03a 	or	r3,r3,r2
 200f564:	188001cc 	andi	r2,r3,7
 200f568:	10000726 	beq	r2,zero,200f588 <__muldf3+0x654>
 200f56c:	188003cc 	andi	r2,r3,15
 200f570:	01000104 	movi	r4,4
 200f574:	11000426 	beq	r2,r4,200f588 <__muldf3+0x654>
 200f578:	1805883a 	mov	r2,r3
 200f57c:	10c00104 	addi	r3,r2,4
 200f580:	1885803a 	cmpltu	r2,r3,r2
 200f584:	88a3883a 	add	r17,r17,r2
 200f588:	8880202c 	andhi	r2,r17,128
 200f58c:	10001c26 	beq	r2,zero,200f600 <__muldf3+0x6cc>
 200f590:	b02b883a 	mov	r21,r22
 200f594:	00800044 	movi	r2,1
 200f598:	000b883a 	mov	r5,zero
 200f59c:	0029883a 	mov	r20,zero
 200f5a0:	003ec306 	br	200f0b0 <__muldf3+0x17c>
 200f5a4:	5805883a 	mov	r2,r11
 200f5a8:	003f9906 	br	200f410 <__muldf3+0x4dc>
 200f5ac:	00bff844 	movi	r2,-31
 200f5b0:	1145c83a 	sub	r2,r2,r5
 200f5b4:	8888d83a 	srl	r4,r17,r2
 200f5b8:	00800804 	movi	r2,32
 200f5bc:	18801a26 	beq	r3,r2,200f628 <__muldf3+0x6f4>
 200f5c0:	00801004 	movi	r2,64
 200f5c4:	10c5c83a 	sub	r2,r2,r3
 200f5c8:	8884983a 	sll	r2,r17,r2
 200f5cc:	1204b03a 	or	r2,r2,r8
 200f5d0:	1004c03a 	cmpne	r2,r2,zero
 200f5d4:	2084b03a 	or	r2,r4,r2
 200f5d8:	144001cc 	andi	r17,r2,7
 200f5dc:	88000d1e 	bne	r17,zero,200f614 <__muldf3+0x6e0>
 200f5e0:	000b883a 	mov	r5,zero
 200f5e4:	1028d0fa 	srli	r20,r2,3
 200f5e8:	b02b883a 	mov	r21,r22
 200f5ec:	0005883a 	mov	r2,zero
 200f5f0:	a468b03a 	or	r20,r20,r17
 200f5f4:	003eae06 	br	200f0b0 <__muldf3+0x17c>
 200f5f8:	1007883a 	mov	r3,r2
 200f5fc:	0023883a 	mov	r17,zero
 200f600:	880a927a 	slli	r5,r17,9
 200f604:	1805883a 	mov	r2,r3
 200f608:	8822977a 	slli	r17,r17,29
 200f60c:	280ad33a 	srli	r5,r5,12
 200f610:	003ff406 	br	200f5e4 <__muldf3+0x6b0>
 200f614:	10c003cc 	andi	r3,r2,15
 200f618:	01000104 	movi	r4,4
 200f61c:	193ff626 	beq	r3,r4,200f5f8 <__muldf3+0x6c4>
 200f620:	0023883a 	mov	r17,zero
 200f624:	003fd506 	br	200f57c <__muldf3+0x648>
 200f628:	0005883a 	mov	r2,zero
 200f62c:	003fe706 	br	200f5cc <__muldf3+0x698>
 200f630:	00800434 	movhi	r2,16
 200f634:	89400234 	orhi	r5,r17,8
 200f638:	10bfffc4 	addi	r2,r2,-1
 200f63c:	b02b883a 	mov	r21,r22
 200f640:	288a703a 	and	r5,r5,r2
 200f644:	4029883a 	mov	r20,r8
 200f648:	003eff06 	br	200f248 <__muldf3+0x314>

0200f64c <__subdf3>:
 200f64c:	02000434 	movhi	r8,16
 200f650:	423fffc4 	addi	r8,r8,-1
 200f654:	defffb04 	addi	sp,sp,-20
 200f658:	2a14703a 	and	r10,r5,r8
 200f65c:	3812d53a 	srli	r9,r7,20
 200f660:	3a10703a 	and	r8,r7,r8
 200f664:	2006d77a 	srli	r3,r4,29
 200f668:	3004d77a 	srli	r2,r6,29
 200f66c:	dc000015 	stw	r16,0(sp)
 200f670:	501490fa 	slli	r10,r10,3
 200f674:	2820d53a 	srli	r16,r5,20
 200f678:	401090fa 	slli	r8,r8,3
 200f67c:	dc800215 	stw	r18,8(sp)
 200f680:	dc400115 	stw	r17,4(sp)
 200f684:	dfc00415 	stw	ra,16(sp)
 200f688:	202290fa 	slli	r17,r4,3
 200f68c:	dcc00315 	stw	r19,12(sp)
 200f690:	4a41ffcc 	andi	r9,r9,2047
 200f694:	0101ffc4 	movi	r4,2047
 200f698:	2824d7fa 	srli	r18,r5,31
 200f69c:	8401ffcc 	andi	r16,r16,2047
 200f6a0:	50c6b03a 	or	r3,r10,r3
 200f6a4:	380ed7fa 	srli	r7,r7,31
 200f6a8:	408ab03a 	or	r5,r8,r2
 200f6ac:	300c90fa 	slli	r6,r6,3
 200f6b0:	49009626 	beq	r9,r4,200f90c <__subdf3+0x2c0>
 200f6b4:	39c0005c 	xori	r7,r7,1
 200f6b8:	8245c83a 	sub	r2,r16,r9
 200f6bc:	3c807426 	beq	r7,r18,200f890 <__subdf3+0x244>
 200f6c0:	0080af0e 	bge	zero,r2,200f980 <__subdf3+0x334>
 200f6c4:	48002a1e 	bne	r9,zero,200f770 <__subdf3+0x124>
 200f6c8:	2988b03a 	or	r4,r5,r6
 200f6cc:	20009a1e 	bne	r4,zero,200f938 <__subdf3+0x2ec>
 200f6d0:	888001cc 	andi	r2,r17,7
 200f6d4:	10000726 	beq	r2,zero,200f6f4 <__subdf3+0xa8>
 200f6d8:	888003cc 	andi	r2,r17,15
 200f6dc:	01000104 	movi	r4,4
 200f6e0:	11000426 	beq	r2,r4,200f6f4 <__subdf3+0xa8>
 200f6e4:	890b883a 	add	r5,r17,r4
 200f6e8:	2c63803a 	cmpltu	r17,r5,r17
 200f6ec:	1c47883a 	add	r3,r3,r17
 200f6f0:	2823883a 	mov	r17,r5
 200f6f4:	1880202c 	andhi	r2,r3,128
 200f6f8:	10005926 	beq	r2,zero,200f860 <__subdf3+0x214>
 200f6fc:	84000044 	addi	r16,r16,1
 200f700:	0081ffc4 	movi	r2,2047
 200f704:	8080be26 	beq	r16,r2,200fa00 <__subdf3+0x3b4>
 200f708:	017fe034 	movhi	r5,65408
 200f70c:	297fffc4 	addi	r5,r5,-1
 200f710:	1946703a 	and	r3,r3,r5
 200f714:	1804977a 	slli	r2,r3,29
 200f718:	1806927a 	slli	r3,r3,9
 200f71c:	8822d0fa 	srli	r17,r17,3
 200f720:	8401ffcc 	andi	r16,r16,2047
 200f724:	180ad33a 	srli	r5,r3,12
 200f728:	9100004c 	andi	r4,r18,1
 200f72c:	1444b03a 	or	r2,r2,r17
 200f730:	80c1ffcc 	andi	r3,r16,2047
 200f734:	1820953a 	slli	r16,r3,20
 200f738:	20c03fcc 	andi	r3,r4,255
 200f73c:	180897fa 	slli	r4,r3,31
 200f740:	00c00434 	movhi	r3,16
 200f744:	18ffffc4 	addi	r3,r3,-1
 200f748:	28c6703a 	and	r3,r5,r3
 200f74c:	1c06b03a 	or	r3,r3,r16
 200f750:	1906b03a 	or	r3,r3,r4
 200f754:	dfc00417 	ldw	ra,16(sp)
 200f758:	dcc00317 	ldw	r19,12(sp)
 200f75c:	dc800217 	ldw	r18,8(sp)
 200f760:	dc400117 	ldw	r17,4(sp)
 200f764:	dc000017 	ldw	r16,0(sp)
 200f768:	dec00504 	addi	sp,sp,20
 200f76c:	f800283a 	ret
 200f770:	0101ffc4 	movi	r4,2047
 200f774:	813fd626 	beq	r16,r4,200f6d0 <__subdf3+0x84>
 200f778:	29402034 	orhi	r5,r5,128
 200f77c:	01000e04 	movi	r4,56
 200f780:	2080a316 	blt	r4,r2,200fa10 <__subdf3+0x3c4>
 200f784:	010007c4 	movi	r4,31
 200f788:	2080c616 	blt	r4,r2,200faa4 <__subdf3+0x458>
 200f78c:	01000804 	movi	r4,32
 200f790:	2089c83a 	sub	r4,r4,r2
 200f794:	2910983a 	sll	r8,r5,r4
 200f798:	308ed83a 	srl	r7,r6,r2
 200f79c:	3108983a 	sll	r4,r6,r4
 200f7a0:	2884d83a 	srl	r2,r5,r2
 200f7a4:	41ccb03a 	or	r6,r8,r7
 200f7a8:	2008c03a 	cmpne	r4,r4,zero
 200f7ac:	310cb03a 	or	r6,r6,r4
 200f7b0:	898dc83a 	sub	r6,r17,r6
 200f7b4:	89a3803a 	cmpltu	r17,r17,r6
 200f7b8:	1887c83a 	sub	r3,r3,r2
 200f7bc:	1c47c83a 	sub	r3,r3,r17
 200f7c0:	3023883a 	mov	r17,r6
 200f7c4:	1880202c 	andhi	r2,r3,128
 200f7c8:	10002326 	beq	r2,zero,200f858 <__subdf3+0x20c>
 200f7cc:	04c02034 	movhi	r19,128
 200f7d0:	9cffffc4 	addi	r19,r19,-1
 200f7d4:	1ce6703a 	and	r19,r3,r19
 200f7d8:	98007a26 	beq	r19,zero,200f9c4 <__subdf3+0x378>
 200f7dc:	9809883a 	mov	r4,r19
 200f7e0:	20006b80 	call	20006b8 <__clzsi2>
 200f7e4:	113ffe04 	addi	r4,r2,-8
 200f7e8:	00c007c4 	movi	r3,31
 200f7ec:	19007b16 	blt	r3,r4,200f9dc <__subdf3+0x390>
 200f7f0:	00800804 	movi	r2,32
 200f7f4:	1105c83a 	sub	r2,r2,r4
 200f7f8:	8884d83a 	srl	r2,r17,r2
 200f7fc:	9906983a 	sll	r3,r19,r4
 200f800:	8922983a 	sll	r17,r17,r4
 200f804:	10c4b03a 	or	r2,r2,r3
 200f808:	24007816 	blt	r4,r16,200f9ec <__subdf3+0x3a0>
 200f80c:	2421c83a 	sub	r16,r4,r16
 200f810:	80c00044 	addi	r3,r16,1
 200f814:	010007c4 	movi	r4,31
 200f818:	20c09516 	blt	r4,r3,200fa70 <__subdf3+0x424>
 200f81c:	01400804 	movi	r5,32
 200f820:	28cbc83a 	sub	r5,r5,r3
 200f824:	88c8d83a 	srl	r4,r17,r3
 200f828:	8962983a 	sll	r17,r17,r5
 200f82c:	114a983a 	sll	r5,r2,r5
 200f830:	10c6d83a 	srl	r3,r2,r3
 200f834:	8804c03a 	cmpne	r2,r17,zero
 200f838:	290ab03a 	or	r5,r5,r4
 200f83c:	28a2b03a 	or	r17,r5,r2
 200f840:	0021883a 	mov	r16,zero
 200f844:	003fa206 	br	200f6d0 <__subdf3+0x84>
 200f848:	2090b03a 	or	r8,r4,r2
 200f84c:	40018e26 	beq	r8,zero,200fe88 <__subdf3+0x83c>
 200f850:	1007883a 	mov	r3,r2
 200f854:	2023883a 	mov	r17,r4
 200f858:	888001cc 	andi	r2,r17,7
 200f85c:	103f9e1e 	bne	r2,zero,200f6d8 <__subdf3+0x8c>
 200f860:	1804977a 	slli	r2,r3,29
 200f864:	8822d0fa 	srli	r17,r17,3
 200f868:	1810d0fa 	srli	r8,r3,3
 200f86c:	9100004c 	andi	r4,r18,1
 200f870:	1444b03a 	or	r2,r2,r17
 200f874:	00c1ffc4 	movi	r3,2047
 200f878:	80c02826 	beq	r16,r3,200f91c <__subdf3+0x2d0>
 200f87c:	01400434 	movhi	r5,16
 200f880:	297fffc4 	addi	r5,r5,-1
 200f884:	80e0703a 	and	r16,r16,r3
 200f888:	414a703a 	and	r5,r8,r5
 200f88c:	003fa806 	br	200f730 <__subdf3+0xe4>
 200f890:	0080630e 	bge	zero,r2,200fa20 <__subdf3+0x3d4>
 200f894:	48003026 	beq	r9,zero,200f958 <__subdf3+0x30c>
 200f898:	0101ffc4 	movi	r4,2047
 200f89c:	813f8c26 	beq	r16,r4,200f6d0 <__subdf3+0x84>
 200f8a0:	29402034 	orhi	r5,r5,128
 200f8a4:	01000e04 	movi	r4,56
 200f8a8:	2080a90e 	bge	r4,r2,200fb50 <__subdf3+0x504>
 200f8ac:	298cb03a 	or	r6,r5,r6
 200f8b0:	3012c03a 	cmpne	r9,r6,zero
 200f8b4:	0005883a 	mov	r2,zero
 200f8b8:	4c53883a 	add	r9,r9,r17
 200f8bc:	4c63803a 	cmpltu	r17,r9,r17
 200f8c0:	10c7883a 	add	r3,r2,r3
 200f8c4:	88c7883a 	add	r3,r17,r3
 200f8c8:	4823883a 	mov	r17,r9
 200f8cc:	1880202c 	andhi	r2,r3,128
 200f8d0:	1000d026 	beq	r2,zero,200fc14 <__subdf3+0x5c8>
 200f8d4:	84000044 	addi	r16,r16,1
 200f8d8:	0081ffc4 	movi	r2,2047
 200f8dc:	8080fe26 	beq	r16,r2,200fcd8 <__subdf3+0x68c>
 200f8e0:	00bfe034 	movhi	r2,65408
 200f8e4:	10bfffc4 	addi	r2,r2,-1
 200f8e8:	1886703a 	and	r3,r3,r2
 200f8ec:	880ad07a 	srli	r5,r17,1
 200f8f0:	180497fa 	slli	r2,r3,31
 200f8f4:	8900004c 	andi	r4,r17,1
 200f8f8:	2922b03a 	or	r17,r5,r4
 200f8fc:	1806d07a 	srli	r3,r3,1
 200f900:	1462b03a 	or	r17,r2,r17
 200f904:	3825883a 	mov	r18,r7
 200f908:	003f7106 	br	200f6d0 <__subdf3+0x84>
 200f90c:	2984b03a 	or	r2,r5,r6
 200f910:	103f6826 	beq	r2,zero,200f6b4 <__subdf3+0x68>
 200f914:	39c03fcc 	andi	r7,r7,255
 200f918:	003f6706 	br	200f6b8 <__subdf3+0x6c>
 200f91c:	4086b03a 	or	r3,r8,r2
 200f920:	18015226 	beq	r3,zero,200fe6c <__subdf3+0x820>
 200f924:	00c00434 	movhi	r3,16
 200f928:	41400234 	orhi	r5,r8,8
 200f92c:	18ffffc4 	addi	r3,r3,-1
 200f930:	28ca703a 	and	r5,r5,r3
 200f934:	003f7e06 	br	200f730 <__subdf3+0xe4>
 200f938:	10bfffc4 	addi	r2,r2,-1
 200f93c:	1000491e 	bne	r2,zero,200fa64 <__subdf3+0x418>
 200f940:	898fc83a 	sub	r7,r17,r6
 200f944:	89e3803a 	cmpltu	r17,r17,r7
 200f948:	1947c83a 	sub	r3,r3,r5
 200f94c:	1c47c83a 	sub	r3,r3,r17
 200f950:	3823883a 	mov	r17,r7
 200f954:	003f9b06 	br	200f7c4 <__subdf3+0x178>
 200f958:	2988b03a 	or	r4,r5,r6
 200f95c:	203f5c26 	beq	r4,zero,200f6d0 <__subdf3+0x84>
 200f960:	10bfffc4 	addi	r2,r2,-1
 200f964:	1000931e 	bne	r2,zero,200fbb4 <__subdf3+0x568>
 200f968:	898d883a 	add	r6,r17,r6
 200f96c:	3463803a 	cmpltu	r17,r6,r17
 200f970:	1947883a 	add	r3,r3,r5
 200f974:	88c7883a 	add	r3,r17,r3
 200f978:	3023883a 	mov	r17,r6
 200f97c:	003fd306 	br	200f8cc <__subdf3+0x280>
 200f980:	1000541e 	bne	r2,zero,200fad4 <__subdf3+0x488>
 200f984:	80800044 	addi	r2,r16,1
 200f988:	1081ffcc 	andi	r2,r2,2047
 200f98c:	01000044 	movi	r4,1
 200f990:	2080a20e 	bge	r4,r2,200fc1c <__subdf3+0x5d0>
 200f994:	8989c83a 	sub	r4,r17,r6
 200f998:	8905803a 	cmpltu	r2,r17,r4
 200f99c:	1967c83a 	sub	r19,r3,r5
 200f9a0:	98a7c83a 	sub	r19,r19,r2
 200f9a4:	9880202c 	andhi	r2,r19,128
 200f9a8:	10006326 	beq	r2,zero,200fb38 <__subdf3+0x4ec>
 200f9ac:	3463c83a 	sub	r17,r6,r17
 200f9b0:	28c7c83a 	sub	r3,r5,r3
 200f9b4:	344d803a 	cmpltu	r6,r6,r17
 200f9b8:	19a7c83a 	sub	r19,r3,r6
 200f9bc:	3825883a 	mov	r18,r7
 200f9c0:	983f861e 	bne	r19,zero,200f7dc <__subdf3+0x190>
 200f9c4:	8809883a 	mov	r4,r17
 200f9c8:	20006b80 	call	20006b8 <__clzsi2>
 200f9cc:	10800804 	addi	r2,r2,32
 200f9d0:	113ffe04 	addi	r4,r2,-8
 200f9d4:	00c007c4 	movi	r3,31
 200f9d8:	193f850e 	bge	r3,r4,200f7f0 <__subdf3+0x1a4>
 200f9dc:	10bff604 	addi	r2,r2,-40
 200f9e0:	8884983a 	sll	r2,r17,r2
 200f9e4:	0023883a 	mov	r17,zero
 200f9e8:	243f880e 	bge	r4,r16,200f80c <__subdf3+0x1c0>
 200f9ec:	00ffe034 	movhi	r3,65408
 200f9f0:	18ffffc4 	addi	r3,r3,-1
 200f9f4:	8121c83a 	sub	r16,r16,r4
 200f9f8:	10c6703a 	and	r3,r2,r3
 200f9fc:	003f3406 	br	200f6d0 <__subdf3+0x84>
 200fa00:	9100004c 	andi	r4,r18,1
 200fa04:	000b883a 	mov	r5,zero
 200fa08:	0005883a 	mov	r2,zero
 200fa0c:	003f4806 	br	200f730 <__subdf3+0xe4>
 200fa10:	298cb03a 	or	r6,r5,r6
 200fa14:	300cc03a 	cmpne	r6,r6,zero
 200fa18:	0005883a 	mov	r2,zero
 200fa1c:	003f6406 	br	200f7b0 <__subdf3+0x164>
 200fa20:	10009a1e 	bne	r2,zero,200fc8c <__subdf3+0x640>
 200fa24:	82400044 	addi	r9,r16,1
 200fa28:	4881ffcc 	andi	r2,r9,2047
 200fa2c:	02800044 	movi	r10,1
 200fa30:	5080670e 	bge	r10,r2,200fbd0 <__subdf3+0x584>
 200fa34:	0081ffc4 	movi	r2,2047
 200fa38:	4880af26 	beq	r9,r2,200fcf8 <__subdf3+0x6ac>
 200fa3c:	898d883a 	add	r6,r17,r6
 200fa40:	1945883a 	add	r2,r3,r5
 200fa44:	3447803a 	cmpltu	r3,r6,r17
 200fa48:	1887883a 	add	r3,r3,r2
 200fa4c:	182297fa 	slli	r17,r3,31
 200fa50:	300cd07a 	srli	r6,r6,1
 200fa54:	1806d07a 	srli	r3,r3,1
 200fa58:	4821883a 	mov	r16,r9
 200fa5c:	89a2b03a 	or	r17,r17,r6
 200fa60:	003f1b06 	br	200f6d0 <__subdf3+0x84>
 200fa64:	0101ffc4 	movi	r4,2047
 200fa68:	813f441e 	bne	r16,r4,200f77c <__subdf3+0x130>
 200fa6c:	003f1806 	br	200f6d0 <__subdf3+0x84>
 200fa70:	843ff844 	addi	r16,r16,-31
 200fa74:	01400804 	movi	r5,32
 200fa78:	1408d83a 	srl	r4,r2,r16
 200fa7c:	19405026 	beq	r3,r5,200fbc0 <__subdf3+0x574>
 200fa80:	01401004 	movi	r5,64
 200fa84:	28c7c83a 	sub	r3,r5,r3
 200fa88:	10c4983a 	sll	r2,r2,r3
 200fa8c:	88a2b03a 	or	r17,r17,r2
 200fa90:	8822c03a 	cmpne	r17,r17,zero
 200fa94:	2462b03a 	or	r17,r4,r17
 200fa98:	0007883a 	mov	r3,zero
 200fa9c:	0021883a 	mov	r16,zero
 200faa0:	003f6d06 	br	200f858 <__subdf3+0x20c>
 200faa4:	11fff804 	addi	r7,r2,-32
 200faa8:	01000804 	movi	r4,32
 200faac:	29ced83a 	srl	r7,r5,r7
 200fab0:	11004526 	beq	r2,r4,200fbc8 <__subdf3+0x57c>
 200fab4:	01001004 	movi	r4,64
 200fab8:	2089c83a 	sub	r4,r4,r2
 200fabc:	2904983a 	sll	r2,r5,r4
 200fac0:	118cb03a 	or	r6,r2,r6
 200fac4:	300cc03a 	cmpne	r6,r6,zero
 200fac8:	398cb03a 	or	r6,r7,r6
 200facc:	0005883a 	mov	r2,zero
 200fad0:	003f3706 	br	200f7b0 <__subdf3+0x164>
 200fad4:	80002a26 	beq	r16,zero,200fb80 <__subdf3+0x534>
 200fad8:	0101ffc4 	movi	r4,2047
 200fadc:	49006626 	beq	r9,r4,200fc78 <__subdf3+0x62c>
 200fae0:	0085c83a 	sub	r2,zero,r2
 200fae4:	18c02034 	orhi	r3,r3,128
 200fae8:	01000e04 	movi	r4,56
 200faec:	20807e16 	blt	r4,r2,200fce8 <__subdf3+0x69c>
 200faf0:	010007c4 	movi	r4,31
 200faf4:	2080e716 	blt	r4,r2,200fe94 <__subdf3+0x848>
 200faf8:	01000804 	movi	r4,32
 200fafc:	2089c83a 	sub	r4,r4,r2
 200fb00:	1914983a 	sll	r10,r3,r4
 200fb04:	8890d83a 	srl	r8,r17,r2
 200fb08:	8908983a 	sll	r4,r17,r4
 200fb0c:	1884d83a 	srl	r2,r3,r2
 200fb10:	5222b03a 	or	r17,r10,r8
 200fb14:	2006c03a 	cmpne	r3,r4,zero
 200fb18:	88e2b03a 	or	r17,r17,r3
 200fb1c:	3463c83a 	sub	r17,r6,r17
 200fb20:	2885c83a 	sub	r2,r5,r2
 200fb24:	344d803a 	cmpltu	r6,r6,r17
 200fb28:	1187c83a 	sub	r3,r2,r6
 200fb2c:	4821883a 	mov	r16,r9
 200fb30:	3825883a 	mov	r18,r7
 200fb34:	003f2306 	br	200f7c4 <__subdf3+0x178>
 200fb38:	24d0b03a 	or	r8,r4,r19
 200fb3c:	40001b1e 	bne	r8,zero,200fbac <__subdf3+0x560>
 200fb40:	0005883a 	mov	r2,zero
 200fb44:	0009883a 	mov	r4,zero
 200fb48:	0021883a 	mov	r16,zero
 200fb4c:	003f4906 	br	200f874 <__subdf3+0x228>
 200fb50:	010007c4 	movi	r4,31
 200fb54:	20803a16 	blt	r4,r2,200fc40 <__subdf3+0x5f4>
 200fb58:	01000804 	movi	r4,32
 200fb5c:	2089c83a 	sub	r4,r4,r2
 200fb60:	2912983a 	sll	r9,r5,r4
 200fb64:	3090d83a 	srl	r8,r6,r2
 200fb68:	3108983a 	sll	r4,r6,r4
 200fb6c:	2884d83a 	srl	r2,r5,r2
 200fb70:	4a12b03a 	or	r9,r9,r8
 200fb74:	2008c03a 	cmpne	r4,r4,zero
 200fb78:	4912b03a 	or	r9,r9,r4
 200fb7c:	003f4e06 	br	200f8b8 <__subdf3+0x26c>
 200fb80:	1c48b03a 	or	r4,r3,r17
 200fb84:	20003c26 	beq	r4,zero,200fc78 <__subdf3+0x62c>
 200fb88:	0084303a 	nor	r2,zero,r2
 200fb8c:	1000381e 	bne	r2,zero,200fc70 <__subdf3+0x624>
 200fb90:	3463c83a 	sub	r17,r6,r17
 200fb94:	28c5c83a 	sub	r2,r5,r3
 200fb98:	344d803a 	cmpltu	r6,r6,r17
 200fb9c:	1187c83a 	sub	r3,r2,r6
 200fba0:	4821883a 	mov	r16,r9
 200fba4:	3825883a 	mov	r18,r7
 200fba8:	003f0606 	br	200f7c4 <__subdf3+0x178>
 200fbac:	2023883a 	mov	r17,r4
 200fbb0:	003f0906 	br	200f7d8 <__subdf3+0x18c>
 200fbb4:	0101ffc4 	movi	r4,2047
 200fbb8:	813f3a1e 	bne	r16,r4,200f8a4 <__subdf3+0x258>
 200fbbc:	003ec406 	br	200f6d0 <__subdf3+0x84>
 200fbc0:	0005883a 	mov	r2,zero
 200fbc4:	003fb106 	br	200fa8c <__subdf3+0x440>
 200fbc8:	0005883a 	mov	r2,zero
 200fbcc:	003fbc06 	br	200fac0 <__subdf3+0x474>
 200fbd0:	1c44b03a 	or	r2,r3,r17
 200fbd4:	80008e1e 	bne	r16,zero,200fe10 <__subdf3+0x7c4>
 200fbd8:	1000c826 	beq	r2,zero,200fefc <__subdf3+0x8b0>
 200fbdc:	2984b03a 	or	r2,r5,r6
 200fbe0:	103ebb26 	beq	r2,zero,200f6d0 <__subdf3+0x84>
 200fbe4:	8989883a 	add	r4,r17,r6
 200fbe8:	1945883a 	add	r2,r3,r5
 200fbec:	2447803a 	cmpltu	r3,r4,r17
 200fbf0:	1887883a 	add	r3,r3,r2
 200fbf4:	1880202c 	andhi	r2,r3,128
 200fbf8:	2023883a 	mov	r17,r4
 200fbfc:	103f1626 	beq	r2,zero,200f858 <__subdf3+0x20c>
 200fc00:	00bfe034 	movhi	r2,65408
 200fc04:	10bfffc4 	addi	r2,r2,-1
 200fc08:	5021883a 	mov	r16,r10
 200fc0c:	1886703a 	and	r3,r3,r2
 200fc10:	003eaf06 	br	200f6d0 <__subdf3+0x84>
 200fc14:	3825883a 	mov	r18,r7
 200fc18:	003f0f06 	br	200f858 <__subdf3+0x20c>
 200fc1c:	1c44b03a 	or	r2,r3,r17
 200fc20:	8000251e 	bne	r16,zero,200fcb8 <__subdf3+0x66c>
 200fc24:	1000661e 	bne	r2,zero,200fdc0 <__subdf3+0x774>
 200fc28:	2990b03a 	or	r8,r5,r6
 200fc2c:	40009626 	beq	r8,zero,200fe88 <__subdf3+0x83c>
 200fc30:	2807883a 	mov	r3,r5
 200fc34:	3023883a 	mov	r17,r6
 200fc38:	3825883a 	mov	r18,r7
 200fc3c:	003ea406 	br	200f6d0 <__subdf3+0x84>
 200fc40:	127ff804 	addi	r9,r2,-32
 200fc44:	01000804 	movi	r4,32
 200fc48:	2a52d83a 	srl	r9,r5,r9
 200fc4c:	11008c26 	beq	r2,r4,200fe80 <__subdf3+0x834>
 200fc50:	01001004 	movi	r4,64
 200fc54:	2085c83a 	sub	r2,r4,r2
 200fc58:	2884983a 	sll	r2,r5,r2
 200fc5c:	118cb03a 	or	r6,r2,r6
 200fc60:	300cc03a 	cmpne	r6,r6,zero
 200fc64:	4992b03a 	or	r9,r9,r6
 200fc68:	0005883a 	mov	r2,zero
 200fc6c:	003f1206 	br	200f8b8 <__subdf3+0x26c>
 200fc70:	0101ffc4 	movi	r4,2047
 200fc74:	493f9c1e 	bne	r9,r4,200fae8 <__subdf3+0x49c>
 200fc78:	2807883a 	mov	r3,r5
 200fc7c:	3023883a 	mov	r17,r6
 200fc80:	4821883a 	mov	r16,r9
 200fc84:	3825883a 	mov	r18,r7
 200fc88:	003e9106 	br	200f6d0 <__subdf3+0x84>
 200fc8c:	80001f1e 	bne	r16,zero,200fd0c <__subdf3+0x6c0>
 200fc90:	1c48b03a 	or	r4,r3,r17
 200fc94:	20005a26 	beq	r4,zero,200fe00 <__subdf3+0x7b4>
 200fc98:	0084303a 	nor	r2,zero,r2
 200fc9c:	1000561e 	bne	r2,zero,200fdf8 <__subdf3+0x7ac>
 200fca0:	89a3883a 	add	r17,r17,r6
 200fca4:	1945883a 	add	r2,r3,r5
 200fca8:	898d803a 	cmpltu	r6,r17,r6
 200fcac:	3087883a 	add	r3,r6,r2
 200fcb0:	4821883a 	mov	r16,r9
 200fcb4:	003f0506 	br	200f8cc <__subdf3+0x280>
 200fcb8:	10002b1e 	bne	r2,zero,200fd68 <__subdf3+0x71c>
 200fcbc:	2984b03a 	or	r2,r5,r6
 200fcc0:	10008026 	beq	r2,zero,200fec4 <__subdf3+0x878>
 200fcc4:	2807883a 	mov	r3,r5
 200fcc8:	3023883a 	mov	r17,r6
 200fccc:	3825883a 	mov	r18,r7
 200fcd0:	0401ffc4 	movi	r16,2047
 200fcd4:	003e7e06 	br	200f6d0 <__subdf3+0x84>
 200fcd8:	3809883a 	mov	r4,r7
 200fcdc:	0011883a 	mov	r8,zero
 200fce0:	0005883a 	mov	r2,zero
 200fce4:	003ee306 	br	200f874 <__subdf3+0x228>
 200fce8:	1c62b03a 	or	r17,r3,r17
 200fcec:	8822c03a 	cmpne	r17,r17,zero
 200fcf0:	0005883a 	mov	r2,zero
 200fcf4:	003f8906 	br	200fb1c <__subdf3+0x4d0>
 200fcf8:	3809883a 	mov	r4,r7
 200fcfc:	4821883a 	mov	r16,r9
 200fd00:	0011883a 	mov	r8,zero
 200fd04:	0005883a 	mov	r2,zero
 200fd08:	003eda06 	br	200f874 <__subdf3+0x228>
 200fd0c:	0101ffc4 	movi	r4,2047
 200fd10:	49003b26 	beq	r9,r4,200fe00 <__subdf3+0x7b4>
 200fd14:	0085c83a 	sub	r2,zero,r2
 200fd18:	18c02034 	orhi	r3,r3,128
 200fd1c:	01000e04 	movi	r4,56
 200fd20:	20806e16 	blt	r4,r2,200fedc <__subdf3+0x890>
 200fd24:	010007c4 	movi	r4,31
 200fd28:	20807716 	blt	r4,r2,200ff08 <__subdf3+0x8bc>
 200fd2c:	01000804 	movi	r4,32
 200fd30:	2089c83a 	sub	r4,r4,r2
 200fd34:	1914983a 	sll	r10,r3,r4
 200fd38:	8890d83a 	srl	r8,r17,r2
 200fd3c:	8908983a 	sll	r4,r17,r4
 200fd40:	1884d83a 	srl	r2,r3,r2
 200fd44:	5222b03a 	or	r17,r10,r8
 200fd48:	2006c03a 	cmpne	r3,r4,zero
 200fd4c:	88e2b03a 	or	r17,r17,r3
 200fd50:	89a3883a 	add	r17,r17,r6
 200fd54:	1145883a 	add	r2,r2,r5
 200fd58:	898d803a 	cmpltu	r6,r17,r6
 200fd5c:	3087883a 	add	r3,r6,r2
 200fd60:	4821883a 	mov	r16,r9
 200fd64:	003ed906 	br	200f8cc <__subdf3+0x280>
 200fd68:	2984b03a 	or	r2,r5,r6
 200fd6c:	10004226 	beq	r2,zero,200fe78 <__subdf3+0x82c>
 200fd70:	1808d0fa 	srli	r4,r3,3
 200fd74:	8822d0fa 	srli	r17,r17,3
 200fd78:	1806977a 	slli	r3,r3,29
 200fd7c:	2080022c 	andhi	r2,r4,8
 200fd80:	1c62b03a 	or	r17,r3,r17
 200fd84:	10000826 	beq	r2,zero,200fda8 <__subdf3+0x75c>
 200fd88:	2812d0fa 	srli	r9,r5,3
 200fd8c:	4880022c 	andhi	r2,r9,8
 200fd90:	1000051e 	bne	r2,zero,200fda8 <__subdf3+0x75c>
 200fd94:	300cd0fa 	srli	r6,r6,3
 200fd98:	2804977a 	slli	r2,r5,29
 200fd9c:	4809883a 	mov	r4,r9
 200fda0:	3825883a 	mov	r18,r7
 200fda4:	11a2b03a 	or	r17,r2,r6
 200fda8:	8806d77a 	srli	r3,r17,29
 200fdac:	200890fa 	slli	r4,r4,3
 200fdb0:	882290fa 	slli	r17,r17,3
 200fdb4:	0401ffc4 	movi	r16,2047
 200fdb8:	1906b03a 	or	r3,r3,r4
 200fdbc:	003e4406 	br	200f6d0 <__subdf3+0x84>
 200fdc0:	2984b03a 	or	r2,r5,r6
 200fdc4:	103e4226 	beq	r2,zero,200f6d0 <__subdf3+0x84>
 200fdc8:	8989c83a 	sub	r4,r17,r6
 200fdcc:	8911803a 	cmpltu	r8,r17,r4
 200fdd0:	1945c83a 	sub	r2,r3,r5
 200fdd4:	1205c83a 	sub	r2,r2,r8
 200fdd8:	1200202c 	andhi	r8,r2,128
 200fddc:	403e9a26 	beq	r8,zero,200f848 <__subdf3+0x1fc>
 200fde0:	3463c83a 	sub	r17,r6,r17
 200fde4:	28c5c83a 	sub	r2,r5,r3
 200fde8:	344d803a 	cmpltu	r6,r6,r17
 200fdec:	1187c83a 	sub	r3,r2,r6
 200fdf0:	3825883a 	mov	r18,r7
 200fdf4:	003e3606 	br	200f6d0 <__subdf3+0x84>
 200fdf8:	0101ffc4 	movi	r4,2047
 200fdfc:	493fc71e 	bne	r9,r4,200fd1c <__subdf3+0x6d0>
 200fe00:	2807883a 	mov	r3,r5
 200fe04:	3023883a 	mov	r17,r6
 200fe08:	4821883a 	mov	r16,r9
 200fe0c:	003e3006 	br	200f6d0 <__subdf3+0x84>
 200fe10:	10003626 	beq	r2,zero,200feec <__subdf3+0x8a0>
 200fe14:	2984b03a 	or	r2,r5,r6
 200fe18:	10001726 	beq	r2,zero,200fe78 <__subdf3+0x82c>
 200fe1c:	1808d0fa 	srli	r4,r3,3
 200fe20:	8822d0fa 	srli	r17,r17,3
 200fe24:	1806977a 	slli	r3,r3,29
 200fe28:	2080022c 	andhi	r2,r4,8
 200fe2c:	1c62b03a 	or	r17,r3,r17
 200fe30:	10000726 	beq	r2,zero,200fe50 <__subdf3+0x804>
 200fe34:	2812d0fa 	srli	r9,r5,3
 200fe38:	4880022c 	andhi	r2,r9,8
 200fe3c:	1000041e 	bne	r2,zero,200fe50 <__subdf3+0x804>
 200fe40:	300cd0fa 	srli	r6,r6,3
 200fe44:	2804977a 	slli	r2,r5,29
 200fe48:	4809883a 	mov	r4,r9
 200fe4c:	11a2b03a 	or	r17,r2,r6
 200fe50:	8806d77a 	srli	r3,r17,29
 200fe54:	200890fa 	slli	r4,r4,3
 200fe58:	882290fa 	slli	r17,r17,3
 200fe5c:	3825883a 	mov	r18,r7
 200fe60:	1906b03a 	or	r3,r3,r4
 200fe64:	0401ffc4 	movi	r16,2047
 200fe68:	003e1906 	br	200f6d0 <__subdf3+0x84>
 200fe6c:	000b883a 	mov	r5,zero
 200fe70:	0005883a 	mov	r2,zero
 200fe74:	003e2e06 	br	200f730 <__subdf3+0xe4>
 200fe78:	0401ffc4 	movi	r16,2047
 200fe7c:	003e1406 	br	200f6d0 <__subdf3+0x84>
 200fe80:	0005883a 	mov	r2,zero
 200fe84:	003f7506 	br	200fc5c <__subdf3+0x610>
 200fe88:	0005883a 	mov	r2,zero
 200fe8c:	0009883a 	mov	r4,zero
 200fe90:	003e7806 	br	200f874 <__subdf3+0x228>
 200fe94:	123ff804 	addi	r8,r2,-32
 200fe98:	01000804 	movi	r4,32
 200fe9c:	1a10d83a 	srl	r8,r3,r8
 200fea0:	11002526 	beq	r2,r4,200ff38 <__subdf3+0x8ec>
 200fea4:	01001004 	movi	r4,64
 200fea8:	2085c83a 	sub	r2,r4,r2
 200feac:	1884983a 	sll	r2,r3,r2
 200feb0:	1444b03a 	or	r2,r2,r17
 200feb4:	1004c03a 	cmpne	r2,r2,zero
 200feb8:	40a2b03a 	or	r17,r8,r2
 200febc:	0005883a 	mov	r2,zero
 200fec0:	003f1606 	br	200fb1c <__subdf3+0x4d0>
 200fec4:	02000434 	movhi	r8,16
 200fec8:	0009883a 	mov	r4,zero
 200fecc:	423fffc4 	addi	r8,r8,-1
 200fed0:	00bfffc4 	movi	r2,-1
 200fed4:	0401ffc4 	movi	r16,2047
 200fed8:	003e6606 	br	200f874 <__subdf3+0x228>
 200fedc:	1c62b03a 	or	r17,r3,r17
 200fee0:	8822c03a 	cmpne	r17,r17,zero
 200fee4:	0005883a 	mov	r2,zero
 200fee8:	003f9906 	br	200fd50 <__subdf3+0x704>
 200feec:	2807883a 	mov	r3,r5
 200fef0:	3023883a 	mov	r17,r6
 200fef4:	0401ffc4 	movi	r16,2047
 200fef8:	003df506 	br	200f6d0 <__subdf3+0x84>
 200fefc:	2807883a 	mov	r3,r5
 200ff00:	3023883a 	mov	r17,r6
 200ff04:	003df206 	br	200f6d0 <__subdf3+0x84>
 200ff08:	123ff804 	addi	r8,r2,-32
 200ff0c:	01000804 	movi	r4,32
 200ff10:	1a10d83a 	srl	r8,r3,r8
 200ff14:	11000a26 	beq	r2,r4,200ff40 <__subdf3+0x8f4>
 200ff18:	01001004 	movi	r4,64
 200ff1c:	2085c83a 	sub	r2,r4,r2
 200ff20:	1884983a 	sll	r2,r3,r2
 200ff24:	1444b03a 	or	r2,r2,r17
 200ff28:	1004c03a 	cmpne	r2,r2,zero
 200ff2c:	40a2b03a 	or	r17,r8,r2
 200ff30:	0005883a 	mov	r2,zero
 200ff34:	003f8606 	br	200fd50 <__subdf3+0x704>
 200ff38:	0005883a 	mov	r2,zero
 200ff3c:	003fdc06 	br	200feb0 <__subdf3+0x864>
 200ff40:	0005883a 	mov	r2,zero
 200ff44:	003ff706 	br	200ff24 <__subdf3+0x8d8>

0200ff48 <__fixdfsi>:
 200ff48:	280cd53a 	srli	r6,r5,20
 200ff4c:	00c00434 	movhi	r3,16
 200ff50:	18ffffc4 	addi	r3,r3,-1
 200ff54:	3181ffcc 	andi	r6,r6,2047
 200ff58:	01c0ff84 	movi	r7,1022
 200ff5c:	28c6703a 	and	r3,r5,r3
 200ff60:	280ad7fa 	srli	r5,r5,31
 200ff64:	3980120e 	bge	r7,r6,200ffb0 <__fixdfsi+0x68>
 200ff68:	00810744 	movi	r2,1053
 200ff6c:	11800c16 	blt	r2,r6,200ffa0 <__fixdfsi+0x58>
 200ff70:	00810cc4 	movi	r2,1075
 200ff74:	1185c83a 	sub	r2,r2,r6
 200ff78:	01c007c4 	movi	r7,31
 200ff7c:	18c00434 	orhi	r3,r3,16
 200ff80:	38800d16 	blt	r7,r2,200ffb8 <__fixdfsi+0x70>
 200ff84:	31befb44 	addi	r6,r6,-1043
 200ff88:	2084d83a 	srl	r2,r4,r2
 200ff8c:	1986983a 	sll	r3,r3,r6
 200ff90:	1884b03a 	or	r2,r3,r2
 200ff94:	28000726 	beq	r5,zero,200ffb4 <__fixdfsi+0x6c>
 200ff98:	0085c83a 	sub	r2,zero,r2
 200ff9c:	f800283a 	ret
 200ffa0:	00a00034 	movhi	r2,32768
 200ffa4:	10bfffc4 	addi	r2,r2,-1
 200ffa8:	2885883a 	add	r2,r5,r2
 200ffac:	f800283a 	ret
 200ffb0:	0005883a 	mov	r2,zero
 200ffb4:	f800283a 	ret
 200ffb8:	008104c4 	movi	r2,1043
 200ffbc:	1185c83a 	sub	r2,r2,r6
 200ffc0:	1884d83a 	srl	r2,r3,r2
 200ffc4:	003ff306 	br	200ff94 <__fixdfsi+0x4c>

0200ffc8 <__floatunsidf>:
 200ffc8:	defffe04 	addi	sp,sp,-8
 200ffcc:	dc000015 	stw	r16,0(sp)
 200ffd0:	dfc00115 	stw	ra,4(sp)
 200ffd4:	2021883a 	mov	r16,r4
 200ffd8:	20002226 	beq	r4,zero,2010064 <__floatunsidf+0x9c>
 200ffdc:	20006b80 	call	20006b8 <__clzsi2>
 200ffe0:	01010784 	movi	r4,1054
 200ffe4:	2089c83a 	sub	r4,r4,r2
 200ffe8:	01810cc4 	movi	r6,1075
 200ffec:	310dc83a 	sub	r6,r6,r4
 200fff0:	00c007c4 	movi	r3,31
 200fff4:	1980120e 	bge	r3,r6,2010040 <__floatunsidf+0x78>
 200fff8:	00c104c4 	movi	r3,1043
 200fffc:	1907c83a 	sub	r3,r3,r4
 2010000:	80ca983a 	sll	r5,r16,r3
 2010004:	00800434 	movhi	r2,16
 2010008:	10bfffc4 	addi	r2,r2,-1
 201000c:	2101ffcc 	andi	r4,r4,2047
 2010010:	0021883a 	mov	r16,zero
 2010014:	288a703a 	and	r5,r5,r2
 2010018:	2008953a 	slli	r4,r4,20
 201001c:	00c00434 	movhi	r3,16
 2010020:	18ffffc4 	addi	r3,r3,-1
 2010024:	28c6703a 	and	r3,r5,r3
 2010028:	8005883a 	mov	r2,r16
 201002c:	1906b03a 	or	r3,r3,r4
 2010030:	dfc00117 	ldw	ra,4(sp)
 2010034:	dc000017 	ldw	r16,0(sp)
 2010038:	dec00204 	addi	sp,sp,8
 201003c:	f800283a 	ret
 2010040:	00c002c4 	movi	r3,11
 2010044:	188bc83a 	sub	r5,r3,r2
 2010048:	814ad83a 	srl	r5,r16,r5
 201004c:	00c00434 	movhi	r3,16
 2010050:	18ffffc4 	addi	r3,r3,-1
 2010054:	81a0983a 	sll	r16,r16,r6
 2010058:	2101ffcc 	andi	r4,r4,2047
 201005c:	28ca703a 	and	r5,r5,r3
 2010060:	003fed06 	br	2010018 <__floatunsidf+0x50>
 2010064:	0009883a 	mov	r4,zero
 2010068:	000b883a 	mov	r5,zero
 201006c:	003fea06 	br	2010018 <__floatunsidf+0x50>

02010070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010070:	defffe04 	addi	sp,sp,-8
 2010074:	dfc00115 	stw	ra,4(sp)
 2010078:	df000015 	stw	fp,0(sp)
 201007c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010080:	d0a00b17 	ldw	r2,-32724(gp)
 2010084:	10000326 	beq	r2,zero,2010094 <alt_get_errno+0x24>
 2010088:	d0a00b17 	ldw	r2,-32724(gp)
 201008c:	103ee83a 	callr	r2
 2010090:	00000106 	br	2010098 <alt_get_errno+0x28>
 2010094:	d0a6df04 	addi	r2,gp,-25732
}
 2010098:	e037883a 	mov	sp,fp
 201009c:	dfc00117 	ldw	ra,4(sp)
 20100a0:	df000017 	ldw	fp,0(sp)
 20100a4:	dec00204 	addi	sp,sp,8
 20100a8:	f800283a 	ret

020100ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20100ac:	defffb04 	addi	sp,sp,-20
 20100b0:	dfc00415 	stw	ra,16(sp)
 20100b4:	df000315 	stw	fp,12(sp)
 20100b8:	df000304 	addi	fp,sp,12
 20100bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20100c0:	e0bfff17 	ldw	r2,-4(fp)
 20100c4:	10000616 	blt	r2,zero,20100e0 <close+0x34>
 20100c8:	e0bfff17 	ldw	r2,-4(fp)
 20100cc:	10c00324 	muli	r3,r2,12
 20100d0:	00808074 	movhi	r2,513
 20100d4:	108e4a04 	addi	r2,r2,14632
 20100d8:	1885883a 	add	r2,r3,r2
 20100dc:	00000106 	br	20100e4 <close+0x38>
 20100e0:	0005883a 	mov	r2,zero
 20100e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20100e8:	e0bffd17 	ldw	r2,-12(fp)
 20100ec:	10001926 	beq	r2,zero,2010154 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20100f0:	e0bffd17 	ldw	r2,-12(fp)
 20100f4:	10800017 	ldw	r2,0(r2)
 20100f8:	10800417 	ldw	r2,16(r2)
 20100fc:	10000626 	beq	r2,zero,2010118 <close+0x6c>
 2010100:	e0bffd17 	ldw	r2,-12(fp)
 2010104:	10800017 	ldw	r2,0(r2)
 2010108:	10800417 	ldw	r2,16(r2)
 201010c:	e13ffd17 	ldw	r4,-12(fp)
 2010110:	103ee83a 	callr	r2
 2010114:	00000106 	br	201011c <close+0x70>
 2010118:	0005883a 	mov	r2,zero
 201011c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2010120:	e13fff17 	ldw	r4,-4(fp)
 2010124:	201076c0 	call	201076c <alt_release_fd>
    if (rval < 0)
 2010128:	e0bffe17 	ldw	r2,-8(fp)
 201012c:	1000070e 	bge	r2,zero,201014c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2010130:	20100700 	call	2010070 <alt_get_errno>
 2010134:	1007883a 	mov	r3,r2
 2010138:	e0bffe17 	ldw	r2,-8(fp)
 201013c:	0085c83a 	sub	r2,zero,r2
 2010140:	18800015 	stw	r2,0(r3)
      return -1;
 2010144:	00bfffc4 	movi	r2,-1
 2010148:	00000706 	br	2010168 <close+0xbc>
    }
    return 0;
 201014c:	0005883a 	mov	r2,zero
 2010150:	00000506 	br	2010168 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010154:	20100700 	call	2010070 <alt_get_errno>
 2010158:	1007883a 	mov	r3,r2
 201015c:	00801444 	movi	r2,81
 2010160:	18800015 	stw	r2,0(r3)
    return -1;
 2010164:	00bfffc4 	movi	r2,-1
  }
}
 2010168:	e037883a 	mov	sp,fp
 201016c:	dfc00117 	ldw	ra,4(sp)
 2010170:	df000017 	ldw	fp,0(sp)
 2010174:	dec00204 	addi	sp,sp,8
 2010178:	f800283a 	ret

0201017c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 201017c:	defffc04 	addi	sp,sp,-16
 2010180:	df000315 	stw	fp,12(sp)
 2010184:	df000304 	addi	fp,sp,12
 2010188:	e13ffd15 	stw	r4,-12(fp)
 201018c:	e17ffe15 	stw	r5,-8(fp)
 2010190:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2010194:	e0bfff17 	ldw	r2,-4(fp)
}
 2010198:	e037883a 	mov	sp,fp
 201019c:	df000017 	ldw	fp,0(sp)
 20101a0:	dec00104 	addi	sp,sp,4
 20101a4:	f800283a 	ret

020101a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20101a8:	defffe04 	addi	sp,sp,-8
 20101ac:	dfc00115 	stw	ra,4(sp)
 20101b0:	df000015 	stw	fp,0(sp)
 20101b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20101b8:	d0a00b17 	ldw	r2,-32724(gp)
 20101bc:	10000326 	beq	r2,zero,20101cc <alt_get_errno+0x24>
 20101c0:	d0a00b17 	ldw	r2,-32724(gp)
 20101c4:	103ee83a 	callr	r2
 20101c8:	00000106 	br	20101d0 <alt_get_errno+0x28>
 20101cc:	d0a6df04 	addi	r2,gp,-25732
}
 20101d0:	e037883a 	mov	sp,fp
 20101d4:	dfc00117 	ldw	ra,4(sp)
 20101d8:	df000017 	ldw	fp,0(sp)
 20101dc:	dec00204 	addi	sp,sp,8
 20101e0:	f800283a 	ret

020101e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20101e4:	defffb04 	addi	sp,sp,-20
 20101e8:	dfc00415 	stw	ra,16(sp)
 20101ec:	df000315 	stw	fp,12(sp)
 20101f0:	df000304 	addi	fp,sp,12
 20101f4:	e13ffe15 	stw	r4,-8(fp)
 20101f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20101fc:	e0bffe17 	ldw	r2,-8(fp)
 2010200:	10000616 	blt	r2,zero,201021c <fstat+0x38>
 2010204:	e0bffe17 	ldw	r2,-8(fp)
 2010208:	10c00324 	muli	r3,r2,12
 201020c:	00808074 	movhi	r2,513
 2010210:	108e4a04 	addi	r2,r2,14632
 2010214:	1885883a 	add	r2,r3,r2
 2010218:	00000106 	br	2010220 <fstat+0x3c>
 201021c:	0005883a 	mov	r2,zero
 2010220:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2010224:	e0bffd17 	ldw	r2,-12(fp)
 2010228:	10001026 	beq	r2,zero,201026c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 201022c:	e0bffd17 	ldw	r2,-12(fp)
 2010230:	10800017 	ldw	r2,0(r2)
 2010234:	10800817 	ldw	r2,32(r2)
 2010238:	10000726 	beq	r2,zero,2010258 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 201023c:	e0bffd17 	ldw	r2,-12(fp)
 2010240:	10800017 	ldw	r2,0(r2)
 2010244:	10800817 	ldw	r2,32(r2)
 2010248:	e17fff17 	ldw	r5,-4(fp)
 201024c:	e13ffd17 	ldw	r4,-12(fp)
 2010250:	103ee83a 	callr	r2
 2010254:	00000a06 	br	2010280 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2010258:	e0bfff17 	ldw	r2,-4(fp)
 201025c:	00c80004 	movi	r3,8192
 2010260:	10c00115 	stw	r3,4(r2)
      return 0;
 2010264:	0005883a 	mov	r2,zero
 2010268:	00000506 	br	2010280 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201026c:	20101a80 	call	20101a8 <alt_get_errno>
 2010270:	1007883a 	mov	r3,r2
 2010274:	00801444 	movi	r2,81
 2010278:	18800015 	stw	r2,0(r3)
    return -1;
 201027c:	00bfffc4 	movi	r2,-1
  }
}
 2010280:	e037883a 	mov	sp,fp
 2010284:	dfc00117 	ldw	ra,4(sp)
 2010288:	df000017 	ldw	fp,0(sp)
 201028c:	dec00204 	addi	sp,sp,8
 2010290:	f800283a 	ret

02010294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010294:	defffe04 	addi	sp,sp,-8
 2010298:	dfc00115 	stw	ra,4(sp)
 201029c:	df000015 	stw	fp,0(sp)
 20102a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20102a4:	d0a00b17 	ldw	r2,-32724(gp)
 20102a8:	10000326 	beq	r2,zero,20102b8 <alt_get_errno+0x24>
 20102ac:	d0a00b17 	ldw	r2,-32724(gp)
 20102b0:	103ee83a 	callr	r2
 20102b4:	00000106 	br	20102bc <alt_get_errno+0x28>
 20102b8:	d0a6df04 	addi	r2,gp,-25732
}
 20102bc:	e037883a 	mov	sp,fp
 20102c0:	dfc00117 	ldw	ra,4(sp)
 20102c4:	df000017 	ldw	fp,0(sp)
 20102c8:	dec00204 	addi	sp,sp,8
 20102cc:	f800283a 	ret

020102d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20102d0:	deffed04 	addi	sp,sp,-76
 20102d4:	dfc01215 	stw	ra,72(sp)
 20102d8:	df001115 	stw	fp,68(sp)
 20102dc:	df001104 	addi	fp,sp,68
 20102e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20102e4:	e0bfff17 	ldw	r2,-4(fp)
 20102e8:	10000616 	blt	r2,zero,2010304 <isatty+0x34>
 20102ec:	e0bfff17 	ldw	r2,-4(fp)
 20102f0:	10c00324 	muli	r3,r2,12
 20102f4:	00808074 	movhi	r2,513
 20102f8:	108e4a04 	addi	r2,r2,14632
 20102fc:	1885883a 	add	r2,r3,r2
 2010300:	00000106 	br	2010308 <isatty+0x38>
 2010304:	0005883a 	mov	r2,zero
 2010308:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 201030c:	e0bfef17 	ldw	r2,-68(fp)
 2010310:	10000e26 	beq	r2,zero,201034c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2010314:	e0bfef17 	ldw	r2,-68(fp)
 2010318:	10800017 	ldw	r2,0(r2)
 201031c:	10800817 	ldw	r2,32(r2)
 2010320:	1000021e 	bne	r2,zero,201032c <isatty+0x5c>
    {
      return 1;
 2010324:	00800044 	movi	r2,1
 2010328:	00000d06 	br	2010360 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 201032c:	e0bff004 	addi	r2,fp,-64
 2010330:	100b883a 	mov	r5,r2
 2010334:	e13fff17 	ldw	r4,-4(fp)
 2010338:	20101e40 	call	20101e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 201033c:	e0bff117 	ldw	r2,-60(fp)
 2010340:	10880020 	cmpeqi	r2,r2,8192
 2010344:	10803fcc 	andi	r2,r2,255
 2010348:	00000506 	br	2010360 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201034c:	20102940 	call	2010294 <alt_get_errno>
 2010350:	1007883a 	mov	r3,r2
 2010354:	00801444 	movi	r2,81
 2010358:	18800015 	stw	r2,0(r3)
    return 0;
 201035c:	0005883a 	mov	r2,zero
  }
}
 2010360:	e037883a 	mov	sp,fp
 2010364:	dfc00117 	ldw	ra,4(sp)
 2010368:	df000017 	ldw	fp,0(sp)
 201036c:	dec00204 	addi	sp,sp,8
 2010370:	f800283a 	ret

02010374 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2010374:	defffc04 	addi	sp,sp,-16
 2010378:	df000315 	stw	fp,12(sp)
 201037c:	df000304 	addi	fp,sp,12
 2010380:	e13ffd15 	stw	r4,-12(fp)
 2010384:	e17ffe15 	stw	r5,-8(fp)
 2010388:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 201038c:	e0fffe17 	ldw	r3,-8(fp)
 2010390:	e0bffd17 	ldw	r2,-12(fp)
 2010394:	18800c26 	beq	r3,r2,20103c8 <alt_load_section+0x54>
  {
    while( to != end )
 2010398:	00000806 	br	20103bc <alt_load_section+0x48>
    {
      *to++ = *from++;
 201039c:	e0bffe17 	ldw	r2,-8(fp)
 20103a0:	10c00104 	addi	r3,r2,4
 20103a4:	e0fffe15 	stw	r3,-8(fp)
 20103a8:	e0fffd17 	ldw	r3,-12(fp)
 20103ac:	19000104 	addi	r4,r3,4
 20103b0:	e13ffd15 	stw	r4,-12(fp)
 20103b4:	18c00017 	ldw	r3,0(r3)
 20103b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20103bc:	e0fffe17 	ldw	r3,-8(fp)
 20103c0:	e0bfff17 	ldw	r2,-4(fp)
 20103c4:	18bff51e 	bne	r3,r2,201039c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20103c8:	0001883a 	nop
 20103cc:	e037883a 	mov	sp,fp
 20103d0:	df000017 	ldw	fp,0(sp)
 20103d4:	dec00104 	addi	sp,sp,4
 20103d8:	f800283a 	ret

020103dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20103dc:	defffe04 	addi	sp,sp,-8
 20103e0:	dfc00115 	stw	ra,4(sp)
 20103e4:	df000015 	stw	fp,0(sp)
 20103e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20103ec:	01808074 	movhi	r6,513
 20103f0:	3192dd04 	addi	r6,r6,19316
 20103f4:	01408074 	movhi	r5,513
 20103f8:	294c1704 	addi	r5,r5,12380
 20103fc:	01008074 	movhi	r4,513
 2010400:	2112dd04 	addi	r4,r4,19316
 2010404:	20103740 	call	2010374 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2010408:	01808034 	movhi	r6,512
 201040c:	31809204 	addi	r6,r6,584
 2010410:	01408034 	movhi	r5,512
 2010414:	29400804 	addi	r5,r5,32
 2010418:	01008034 	movhi	r4,512
 201041c:	21000804 	addi	r4,r4,32
 2010420:	20103740 	call	2010374 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2010424:	01808074 	movhi	r6,513
 2010428:	318c1704 	addi	r6,r6,12380
 201042c:	01408074 	movhi	r5,513
 2010430:	294b1804 	addi	r5,r5,11360
 2010434:	01008074 	movhi	r4,513
 2010438:	210b1804 	addi	r4,r4,11360
 201043c:	20103740 	call	2010374 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2010440:	2011ab80 	call	2011ab8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2010444:	2011d300 	call	2011d30 <alt_icache_flush_all>
}
 2010448:	0001883a 	nop
 201044c:	e037883a 	mov	sp,fp
 2010450:	dfc00117 	ldw	ra,4(sp)
 2010454:	df000017 	ldw	fp,0(sp)
 2010458:	dec00204 	addi	sp,sp,8
 201045c:	f800283a 	ret

02010460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010460:	defffe04 	addi	sp,sp,-8
 2010464:	dfc00115 	stw	ra,4(sp)
 2010468:	df000015 	stw	fp,0(sp)
 201046c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010470:	d0a00b17 	ldw	r2,-32724(gp)
 2010474:	10000326 	beq	r2,zero,2010484 <alt_get_errno+0x24>
 2010478:	d0a00b17 	ldw	r2,-32724(gp)
 201047c:	103ee83a 	callr	r2
 2010480:	00000106 	br	2010488 <alt_get_errno+0x28>
 2010484:	d0a6df04 	addi	r2,gp,-25732
}
 2010488:	e037883a 	mov	sp,fp
 201048c:	dfc00117 	ldw	ra,4(sp)
 2010490:	df000017 	ldw	fp,0(sp)
 2010494:	dec00204 	addi	sp,sp,8
 2010498:	f800283a 	ret

0201049c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 201049c:	defff904 	addi	sp,sp,-28
 20104a0:	dfc00615 	stw	ra,24(sp)
 20104a4:	df000515 	stw	fp,20(sp)
 20104a8:	df000504 	addi	fp,sp,20
 20104ac:	e13ffd15 	stw	r4,-12(fp)
 20104b0:	e17ffe15 	stw	r5,-8(fp)
 20104b4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20104b8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20104bc:	e0bffd17 	ldw	r2,-12(fp)
 20104c0:	10000616 	blt	r2,zero,20104dc <lseek+0x40>
 20104c4:	e0bffd17 	ldw	r2,-12(fp)
 20104c8:	10c00324 	muli	r3,r2,12
 20104cc:	00808074 	movhi	r2,513
 20104d0:	108e4a04 	addi	r2,r2,14632
 20104d4:	1885883a 	add	r2,r3,r2
 20104d8:	00000106 	br	20104e0 <lseek+0x44>
 20104dc:	0005883a 	mov	r2,zero
 20104e0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20104e4:	e0bffc17 	ldw	r2,-16(fp)
 20104e8:	10001026 	beq	r2,zero,201052c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20104ec:	e0bffc17 	ldw	r2,-16(fp)
 20104f0:	10800017 	ldw	r2,0(r2)
 20104f4:	10800717 	ldw	r2,28(r2)
 20104f8:	10000926 	beq	r2,zero,2010520 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20104fc:	e0bffc17 	ldw	r2,-16(fp)
 2010500:	10800017 	ldw	r2,0(r2)
 2010504:	10800717 	ldw	r2,28(r2)
 2010508:	e1bfff17 	ldw	r6,-4(fp)
 201050c:	e17ffe17 	ldw	r5,-8(fp)
 2010510:	e13ffc17 	ldw	r4,-16(fp)
 2010514:	103ee83a 	callr	r2
 2010518:	e0bffb15 	stw	r2,-20(fp)
 201051c:	00000506 	br	2010534 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2010520:	00bfde84 	movi	r2,-134
 2010524:	e0bffb15 	stw	r2,-20(fp)
 2010528:	00000206 	br	2010534 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 201052c:	00bfebc4 	movi	r2,-81
 2010530:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2010534:	e0bffb17 	ldw	r2,-20(fp)
 2010538:	1000070e 	bge	r2,zero,2010558 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 201053c:	20104600 	call	2010460 <alt_get_errno>
 2010540:	1007883a 	mov	r3,r2
 2010544:	e0bffb17 	ldw	r2,-20(fp)
 2010548:	0085c83a 	sub	r2,zero,r2
 201054c:	18800015 	stw	r2,0(r3)
    rc = -1;
 2010550:	00bfffc4 	movi	r2,-1
 2010554:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2010558:	e0bffb17 	ldw	r2,-20(fp)
}
 201055c:	e037883a 	mov	sp,fp
 2010560:	dfc00117 	ldw	ra,4(sp)
 2010564:	df000017 	ldw	fp,0(sp)
 2010568:	dec00204 	addi	sp,sp,8
 201056c:	f800283a 	ret

02010570 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2010570:	defffd04 	addi	sp,sp,-12
 2010574:	dfc00215 	stw	ra,8(sp)
 2010578:	df000115 	stw	fp,4(sp)
 201057c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2010580:	0009883a 	mov	r4,zero
 2010584:	20109e80 	call	20109e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2010588:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 201058c:	2010a200 	call	2010a20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2010590:	01808074 	movhi	r6,513
 2010594:	318c0804 	addi	r6,r6,12320
 2010598:	01408074 	movhi	r5,513
 201059c:	294c0804 	addi	r5,r5,12320
 20105a0:	01008074 	movhi	r4,513
 20105a4:	210c0804 	addi	r4,r4,12320
 20105a8:	2011e280 	call	2011e28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20105ac:	2011be00 	call	2011be0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20105b0:	01008074 	movhi	r4,513
 20105b4:	21071004 	addi	r4,r4,7232
 20105b8:	20127180 	call	2012718 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20105bc:	d0a6e017 	ldw	r2,-25728(gp)
 20105c0:	d0e6e117 	ldw	r3,-25724(gp)
 20105c4:	d126e217 	ldw	r4,-25720(gp)
 20105c8:	200d883a 	mov	r6,r4
 20105cc:	180b883a 	mov	r5,r3
 20105d0:	1009883a 	mov	r4,r2
 20105d4:	20002940 	call	2000294 <main>
 20105d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20105dc:	01000044 	movi	r4,1
 20105e0:	20100ac0 	call	20100ac <close>
  exit (result);
 20105e4:	e13fff17 	ldw	r4,-4(fp)
 20105e8:	20127540 	call	2012754 <exit>

020105ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 20105ec:	defffe04 	addi	sp,sp,-8
 20105f0:	df000115 	stw	fp,4(sp)
 20105f4:	df000104 	addi	fp,sp,4
 20105f8:	e13fff15 	stw	r4,-4(fp)
}
 20105fc:	0001883a 	nop
 2010600:	e037883a 	mov	sp,fp
 2010604:	df000017 	ldw	fp,0(sp)
 2010608:	dec00104 	addi	sp,sp,4
 201060c:	f800283a 	ret

02010610 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2010610:	defffe04 	addi	sp,sp,-8
 2010614:	df000115 	stw	fp,4(sp)
 2010618:	df000104 	addi	fp,sp,4
 201061c:	e13fff15 	stw	r4,-4(fp)
}
 2010620:	0001883a 	nop
 2010624:	e037883a 	mov	sp,fp
 2010628:	df000017 	ldw	fp,0(sp)
 201062c:	dec00104 	addi	sp,sp,4
 2010630:	f800283a 	ret

02010634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010634:	defffe04 	addi	sp,sp,-8
 2010638:	dfc00115 	stw	ra,4(sp)
 201063c:	df000015 	stw	fp,0(sp)
 2010640:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010644:	d0a00b17 	ldw	r2,-32724(gp)
 2010648:	10000326 	beq	r2,zero,2010658 <alt_get_errno+0x24>
 201064c:	d0a00b17 	ldw	r2,-32724(gp)
 2010650:	103ee83a 	callr	r2
 2010654:	00000106 	br	201065c <alt_get_errno+0x28>
 2010658:	d0a6df04 	addi	r2,gp,-25732
}
 201065c:	e037883a 	mov	sp,fp
 2010660:	dfc00117 	ldw	ra,4(sp)
 2010664:	df000017 	ldw	fp,0(sp)
 2010668:	dec00204 	addi	sp,sp,8
 201066c:	f800283a 	ret

02010670 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2010670:	defff904 	addi	sp,sp,-28
 2010674:	dfc00615 	stw	ra,24(sp)
 2010678:	df000515 	stw	fp,20(sp)
 201067c:	df000504 	addi	fp,sp,20
 2010680:	e13ffd15 	stw	r4,-12(fp)
 2010684:	e17ffe15 	stw	r5,-8(fp)
 2010688:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201068c:	e0bffd17 	ldw	r2,-12(fp)
 2010690:	10000616 	blt	r2,zero,20106ac <read+0x3c>
 2010694:	e0bffd17 	ldw	r2,-12(fp)
 2010698:	10c00324 	muli	r3,r2,12
 201069c:	00808074 	movhi	r2,513
 20106a0:	108e4a04 	addi	r2,r2,14632
 20106a4:	1885883a 	add	r2,r3,r2
 20106a8:	00000106 	br	20106b0 <read+0x40>
 20106ac:	0005883a 	mov	r2,zero
 20106b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20106b4:	e0bffb17 	ldw	r2,-20(fp)
 20106b8:	10002226 	beq	r2,zero,2010744 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20106bc:	e0bffb17 	ldw	r2,-20(fp)
 20106c0:	10800217 	ldw	r2,8(r2)
 20106c4:	108000cc 	andi	r2,r2,3
 20106c8:	10800060 	cmpeqi	r2,r2,1
 20106cc:	1000181e 	bne	r2,zero,2010730 <read+0xc0>
        (fd->dev->read))
 20106d0:	e0bffb17 	ldw	r2,-20(fp)
 20106d4:	10800017 	ldw	r2,0(r2)
 20106d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20106dc:	10001426 	beq	r2,zero,2010730 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 20106e0:	e0bffb17 	ldw	r2,-20(fp)
 20106e4:	10800017 	ldw	r2,0(r2)
 20106e8:	10800517 	ldw	r2,20(r2)
 20106ec:	e0ffff17 	ldw	r3,-4(fp)
 20106f0:	180d883a 	mov	r6,r3
 20106f4:	e17ffe17 	ldw	r5,-8(fp)
 20106f8:	e13ffb17 	ldw	r4,-20(fp)
 20106fc:	103ee83a 	callr	r2
 2010700:	e0bffc15 	stw	r2,-16(fp)
 2010704:	e0bffc17 	ldw	r2,-16(fp)
 2010708:	1000070e 	bge	r2,zero,2010728 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 201070c:	20106340 	call	2010634 <alt_get_errno>
 2010710:	1007883a 	mov	r3,r2
 2010714:	e0bffc17 	ldw	r2,-16(fp)
 2010718:	0085c83a 	sub	r2,zero,r2
 201071c:	18800015 	stw	r2,0(r3)
          return -1;
 2010720:	00bfffc4 	movi	r2,-1
 2010724:	00000c06 	br	2010758 <read+0xe8>
        }
        return rval;
 2010728:	e0bffc17 	ldw	r2,-16(fp)
 201072c:	00000a06 	br	2010758 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2010730:	20106340 	call	2010634 <alt_get_errno>
 2010734:	1007883a 	mov	r3,r2
 2010738:	00800344 	movi	r2,13
 201073c:	18800015 	stw	r2,0(r3)
 2010740:	00000406 	br	2010754 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2010744:	20106340 	call	2010634 <alt_get_errno>
 2010748:	1007883a 	mov	r3,r2
 201074c:	00801444 	movi	r2,81
 2010750:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2010754:	00bfffc4 	movi	r2,-1
}
 2010758:	e037883a 	mov	sp,fp
 201075c:	dfc00117 	ldw	ra,4(sp)
 2010760:	df000017 	ldw	fp,0(sp)
 2010764:	dec00204 	addi	sp,sp,8
 2010768:	f800283a 	ret

0201076c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 201076c:	defffe04 	addi	sp,sp,-8
 2010770:	df000115 	stw	fp,4(sp)
 2010774:	df000104 	addi	fp,sp,4
 2010778:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 201077c:	e0bfff17 	ldw	r2,-4(fp)
 2010780:	108000d0 	cmplti	r2,r2,3
 2010784:	10000d1e 	bne	r2,zero,20107bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2010788:	00808074 	movhi	r2,513
 201078c:	108e4a04 	addi	r2,r2,14632
 2010790:	e0ffff17 	ldw	r3,-4(fp)
 2010794:	18c00324 	muli	r3,r3,12
 2010798:	10c5883a 	add	r2,r2,r3
 201079c:	10800204 	addi	r2,r2,8
 20107a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20107a4:	00808074 	movhi	r2,513
 20107a8:	108e4a04 	addi	r2,r2,14632
 20107ac:	e0ffff17 	ldw	r3,-4(fp)
 20107b0:	18c00324 	muli	r3,r3,12
 20107b4:	10c5883a 	add	r2,r2,r3
 20107b8:	10000015 	stw	zero,0(r2)
  }
}
 20107bc:	0001883a 	nop
 20107c0:	e037883a 	mov	sp,fp
 20107c4:	df000017 	ldw	fp,0(sp)
 20107c8:	dec00104 	addi	sp,sp,4
 20107cc:	f800283a 	ret

020107d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 20107d0:	defff904 	addi	sp,sp,-28
 20107d4:	df000615 	stw	fp,24(sp)
 20107d8:	df000604 	addi	fp,sp,24
 20107dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20107e0:	0005303a 	rdctl	r2,status
 20107e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20107e8:	e0fffe17 	ldw	r3,-8(fp)
 20107ec:	00bfff84 	movi	r2,-2
 20107f0:	1884703a 	and	r2,r3,r2
 20107f4:	1001703a 	wrctl	status,r2
  
  return context;
 20107f8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 20107fc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2010800:	d0a00c17 	ldw	r2,-32720(gp)
 2010804:	10c000c4 	addi	r3,r2,3
 2010808:	00bfff04 	movi	r2,-4
 201080c:	1884703a 	and	r2,r3,r2
 2010810:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2010814:	d0e00c17 	ldw	r3,-32720(gp)
 2010818:	e0bfff17 	ldw	r2,-4(fp)
 201081c:	1887883a 	add	r3,r3,r2
 2010820:	00810034 	movhi	r2,1024
 2010824:	10800004 	addi	r2,r2,0
 2010828:	10c0062e 	bgeu	r2,r3,2010844 <sbrk+0x74>
 201082c:	e0bffb17 	ldw	r2,-20(fp)
 2010830:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010834:	e0bffa17 	ldw	r2,-24(fp)
 2010838:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 201083c:	00bfffc4 	movi	r2,-1
 2010840:	00000b06 	br	2010870 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2010844:	d0a00c17 	ldw	r2,-32720(gp)
 2010848:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 201084c:	d0e00c17 	ldw	r3,-32720(gp)
 2010850:	e0bfff17 	ldw	r2,-4(fp)
 2010854:	1885883a 	add	r2,r3,r2
 2010858:	d0a00c15 	stw	r2,-32720(gp)
 201085c:	e0bffb17 	ldw	r2,-20(fp)
 2010860:	e0bffc15 	stw	r2,-16(fp)
 2010864:	e0bffc17 	ldw	r2,-16(fp)
 2010868:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 201086c:	e0bffd17 	ldw	r2,-12(fp)
} 
 2010870:	e037883a 	mov	sp,fp
 2010874:	df000017 	ldw	fp,0(sp)
 2010878:	dec00104 	addi	sp,sp,4
 201087c:	f800283a 	ret

02010880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010880:	defffe04 	addi	sp,sp,-8
 2010884:	dfc00115 	stw	ra,4(sp)
 2010888:	df000015 	stw	fp,0(sp)
 201088c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010890:	d0a00b17 	ldw	r2,-32724(gp)
 2010894:	10000326 	beq	r2,zero,20108a4 <alt_get_errno+0x24>
 2010898:	d0a00b17 	ldw	r2,-32724(gp)
 201089c:	103ee83a 	callr	r2
 20108a0:	00000106 	br	20108a8 <alt_get_errno+0x28>
 20108a4:	d0a6df04 	addi	r2,gp,-25732
}
 20108a8:	e037883a 	mov	sp,fp
 20108ac:	dfc00117 	ldw	ra,4(sp)
 20108b0:	df000017 	ldw	fp,0(sp)
 20108b4:	dec00204 	addi	sp,sp,8
 20108b8:	f800283a 	ret

020108bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 20108bc:	defff904 	addi	sp,sp,-28
 20108c0:	dfc00615 	stw	ra,24(sp)
 20108c4:	df000515 	stw	fp,20(sp)
 20108c8:	df000504 	addi	fp,sp,20
 20108cc:	e13ffd15 	stw	r4,-12(fp)
 20108d0:	e17ffe15 	stw	r5,-8(fp)
 20108d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20108d8:	e0bffd17 	ldw	r2,-12(fp)
 20108dc:	10000616 	blt	r2,zero,20108f8 <write+0x3c>
 20108e0:	e0bffd17 	ldw	r2,-12(fp)
 20108e4:	10c00324 	muli	r3,r2,12
 20108e8:	00808074 	movhi	r2,513
 20108ec:	108e4a04 	addi	r2,r2,14632
 20108f0:	1885883a 	add	r2,r3,r2
 20108f4:	00000106 	br	20108fc <write+0x40>
 20108f8:	0005883a 	mov	r2,zero
 20108fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2010900:	e0bffb17 	ldw	r2,-20(fp)
 2010904:	10002126 	beq	r2,zero,201098c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2010908:	e0bffb17 	ldw	r2,-20(fp)
 201090c:	10800217 	ldw	r2,8(r2)
 2010910:	108000cc 	andi	r2,r2,3
 2010914:	10001826 	beq	r2,zero,2010978 <write+0xbc>
 2010918:	e0bffb17 	ldw	r2,-20(fp)
 201091c:	10800017 	ldw	r2,0(r2)
 2010920:	10800617 	ldw	r2,24(r2)
 2010924:	10001426 	beq	r2,zero,2010978 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2010928:	e0bffb17 	ldw	r2,-20(fp)
 201092c:	10800017 	ldw	r2,0(r2)
 2010930:	10800617 	ldw	r2,24(r2)
 2010934:	e0ffff17 	ldw	r3,-4(fp)
 2010938:	180d883a 	mov	r6,r3
 201093c:	e17ffe17 	ldw	r5,-8(fp)
 2010940:	e13ffb17 	ldw	r4,-20(fp)
 2010944:	103ee83a 	callr	r2
 2010948:	e0bffc15 	stw	r2,-16(fp)
 201094c:	e0bffc17 	ldw	r2,-16(fp)
 2010950:	1000070e 	bge	r2,zero,2010970 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2010954:	20108800 	call	2010880 <alt_get_errno>
 2010958:	1007883a 	mov	r3,r2
 201095c:	e0bffc17 	ldw	r2,-16(fp)
 2010960:	0085c83a 	sub	r2,zero,r2
 2010964:	18800015 	stw	r2,0(r3)
        return -1;
 2010968:	00bfffc4 	movi	r2,-1
 201096c:	00000c06 	br	20109a0 <write+0xe4>
      }
      return rval;
 2010970:	e0bffc17 	ldw	r2,-16(fp)
 2010974:	00000a06 	br	20109a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2010978:	20108800 	call	2010880 <alt_get_errno>
 201097c:	1007883a 	mov	r3,r2
 2010980:	00800344 	movi	r2,13
 2010984:	18800015 	stw	r2,0(r3)
 2010988:	00000406 	br	201099c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 201098c:	20108800 	call	2010880 <alt_get_errno>
 2010990:	1007883a 	mov	r3,r2
 2010994:	00801444 	movi	r2,81
 2010998:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201099c:	00bfffc4 	movi	r2,-1
}
 20109a0:	e037883a 	mov	sp,fp
 20109a4:	dfc00117 	ldw	ra,4(sp)
 20109a8:	df000017 	ldw	fp,0(sp)
 20109ac:	dec00204 	addi	sp,sp,8
 20109b0:	f800283a 	ret

020109b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20109b4:	defffd04 	addi	sp,sp,-12
 20109b8:	dfc00215 	stw	ra,8(sp)
 20109bc:	df000115 	stw	fp,4(sp)
 20109c0:	df000104 	addi	fp,sp,4
 20109c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20109c8:	d1600804 	addi	r5,gp,-32736
 20109cc:	e13fff17 	ldw	r4,-4(fp)
 20109d0:	2011b3c0 	call	2011b3c <alt_dev_llist_insert>
}
 20109d4:	e037883a 	mov	sp,fp
 20109d8:	dfc00117 	ldw	ra,4(sp)
 20109dc:	df000017 	ldw	fp,0(sp)
 20109e0:	dec00204 	addi	sp,sp,8
 20109e4:	f800283a 	ret

020109e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20109e8:	defffd04 	addi	sp,sp,-12
 20109ec:	dfc00215 	stw	ra,8(sp)
 20109f0:	df000115 	stw	fp,4(sp)
 20109f4:	df000104 	addi	fp,sp,4
 20109f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 20109fc:	201241c0 	call	201241c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2010a00:	00800044 	movi	r2,1
 2010a04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2010a08:	0001883a 	nop
 2010a0c:	e037883a 	mov	sp,fp
 2010a10:	dfc00117 	ldw	ra,4(sp)
 2010a14:	df000017 	ldw	fp,0(sp)
 2010a18:	dec00204 	addi	sp,sp,8
 2010a1c:	f800283a 	ret

02010a20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2010a20:	defffe04 	addi	sp,sp,-8
 2010a24:	dfc00115 	stw	ra,4(sp)
 2010a28:	df000015 	stw	fp,0(sp)
 2010a2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 2010a30:	01c0fa04 	movi	r7,1000
 2010a34:	01800044 	movi	r6,1
 2010a38:	000b883a 	mov	r5,zero
 2010a3c:	0009883a 	mov	r4,zero
 2010a40:	20115680 	call	2011568 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2010a44:	000d883a 	mov	r6,zero
 2010a48:	000b883a 	mov	r5,zero
 2010a4c:	01008074 	movhi	r4,513
 2010a50:	210eb404 	addi	r4,r4,15056
 2010a54:	2010bf00 	call	2010bf0 <altera_avalon_jtag_uart_init>
 2010a58:	01008074 	movhi	r4,513
 2010a5c:	210eaa04 	addi	r4,r4,15016
 2010a60:	20109b40 	call	20109b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 2010a64:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 2010a68:	01008074 	movhi	r4,513
 2010a6c:	2112c204 	addi	r4,r4,19208
 2010a70:	20109b40 	call	20109b4 <alt_dev_reg>
}
 2010a74:	0001883a 	nop
 2010a78:	e037883a 	mov	sp,fp
 2010a7c:	dfc00117 	ldw	ra,4(sp)
 2010a80:	df000017 	ldw	fp,0(sp)
 2010a84:	dec00204 	addi	sp,sp,8
 2010a88:	f800283a 	ret

02010a8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2010a8c:	defffa04 	addi	sp,sp,-24
 2010a90:	dfc00515 	stw	ra,20(sp)
 2010a94:	df000415 	stw	fp,16(sp)
 2010a98:	df000404 	addi	fp,sp,16
 2010a9c:	e13ffd15 	stw	r4,-12(fp)
 2010aa0:	e17ffe15 	stw	r5,-8(fp)
 2010aa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2010aa8:	e0bffd17 	ldw	r2,-12(fp)
 2010aac:	10800017 	ldw	r2,0(r2)
 2010ab0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2010ab4:	e0bffc17 	ldw	r2,-16(fp)
 2010ab8:	10c00a04 	addi	r3,r2,40
 2010abc:	e0bffd17 	ldw	r2,-12(fp)
 2010ac0:	10800217 	ldw	r2,8(r2)
 2010ac4:	100f883a 	mov	r7,r2
 2010ac8:	e1bfff17 	ldw	r6,-4(fp)
 2010acc:	e17ffe17 	ldw	r5,-8(fp)
 2010ad0:	1809883a 	mov	r4,r3
 2010ad4:	20110ac0 	call	20110ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2010ad8:	e037883a 	mov	sp,fp
 2010adc:	dfc00117 	ldw	ra,4(sp)
 2010ae0:	df000017 	ldw	fp,0(sp)
 2010ae4:	dec00204 	addi	sp,sp,8
 2010ae8:	f800283a 	ret

02010aec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2010aec:	defffa04 	addi	sp,sp,-24
 2010af0:	dfc00515 	stw	ra,20(sp)
 2010af4:	df000415 	stw	fp,16(sp)
 2010af8:	df000404 	addi	fp,sp,16
 2010afc:	e13ffd15 	stw	r4,-12(fp)
 2010b00:	e17ffe15 	stw	r5,-8(fp)
 2010b04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2010b08:	e0bffd17 	ldw	r2,-12(fp)
 2010b0c:	10800017 	ldw	r2,0(r2)
 2010b10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2010b14:	e0bffc17 	ldw	r2,-16(fp)
 2010b18:	10c00a04 	addi	r3,r2,40
 2010b1c:	e0bffd17 	ldw	r2,-12(fp)
 2010b20:	10800217 	ldw	r2,8(r2)
 2010b24:	100f883a 	mov	r7,r2
 2010b28:	e1bfff17 	ldw	r6,-4(fp)
 2010b2c:	e17ffe17 	ldw	r5,-8(fp)
 2010b30:	1809883a 	mov	r4,r3
 2010b34:	20112c80 	call	20112c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2010b38:	e037883a 	mov	sp,fp
 2010b3c:	dfc00117 	ldw	ra,4(sp)
 2010b40:	df000017 	ldw	fp,0(sp)
 2010b44:	dec00204 	addi	sp,sp,8
 2010b48:	f800283a 	ret

02010b4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2010b4c:	defffc04 	addi	sp,sp,-16
 2010b50:	dfc00315 	stw	ra,12(sp)
 2010b54:	df000215 	stw	fp,8(sp)
 2010b58:	df000204 	addi	fp,sp,8
 2010b5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2010b60:	e0bfff17 	ldw	r2,-4(fp)
 2010b64:	10800017 	ldw	r2,0(r2)
 2010b68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2010b6c:	e0bffe17 	ldw	r2,-8(fp)
 2010b70:	10c00a04 	addi	r3,r2,40
 2010b74:	e0bfff17 	ldw	r2,-4(fp)
 2010b78:	10800217 	ldw	r2,8(r2)
 2010b7c:	100b883a 	mov	r5,r2
 2010b80:	1809883a 	mov	r4,r3
 2010b84:	2010f540 	call	2010f54 <altera_avalon_jtag_uart_close>
}
 2010b88:	e037883a 	mov	sp,fp
 2010b8c:	dfc00117 	ldw	ra,4(sp)
 2010b90:	df000017 	ldw	fp,0(sp)
 2010b94:	dec00204 	addi	sp,sp,8
 2010b98:	f800283a 	ret

02010b9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2010b9c:	defffa04 	addi	sp,sp,-24
 2010ba0:	dfc00515 	stw	ra,20(sp)
 2010ba4:	df000415 	stw	fp,16(sp)
 2010ba8:	df000404 	addi	fp,sp,16
 2010bac:	e13ffd15 	stw	r4,-12(fp)
 2010bb0:	e17ffe15 	stw	r5,-8(fp)
 2010bb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2010bb8:	e0bffd17 	ldw	r2,-12(fp)
 2010bbc:	10800017 	ldw	r2,0(r2)
 2010bc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2010bc4:	e0bffc17 	ldw	r2,-16(fp)
 2010bc8:	10800a04 	addi	r2,r2,40
 2010bcc:	e1bfff17 	ldw	r6,-4(fp)
 2010bd0:	e17ffe17 	ldw	r5,-8(fp)
 2010bd4:	1009883a 	mov	r4,r2
 2010bd8:	2010fbc0 	call	2010fbc <altera_avalon_jtag_uart_ioctl>
}
 2010bdc:	e037883a 	mov	sp,fp
 2010be0:	dfc00117 	ldw	ra,4(sp)
 2010be4:	df000017 	ldw	fp,0(sp)
 2010be8:	dec00204 	addi	sp,sp,8
 2010bec:	f800283a 	ret

02010bf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2010bf0:	defffb04 	addi	sp,sp,-20
 2010bf4:	dfc00415 	stw	ra,16(sp)
 2010bf8:	df000315 	stw	fp,12(sp)
 2010bfc:	df000304 	addi	fp,sp,12
 2010c00:	e13ffd15 	stw	r4,-12(fp)
 2010c04:	e17ffe15 	stw	r5,-8(fp)
 2010c08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2010c0c:	e0bffd17 	ldw	r2,-12(fp)
 2010c10:	00c00044 	movi	r3,1
 2010c14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2010c18:	e0bffd17 	ldw	r2,-12(fp)
 2010c1c:	10800017 	ldw	r2,0(r2)
 2010c20:	10800104 	addi	r2,r2,4
 2010c24:	1007883a 	mov	r3,r2
 2010c28:	e0bffd17 	ldw	r2,-12(fp)
 2010c2c:	10800817 	ldw	r2,32(r2)
 2010c30:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 2010c34:	e0bfff17 	ldw	r2,-4(fp)
 2010c38:	01808074 	movhi	r6,513
 2010c3c:	31832904 	addi	r6,r6,3236
 2010c40:	e17ffd17 	ldw	r5,-12(fp)
 2010c44:	1009883a 	mov	r4,r2
 2010c48:	2011ea40 	call	2011ea4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2010c4c:	e0bffd17 	ldw	r2,-12(fp)
 2010c50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2010c54:	e0bffd17 	ldw	r2,-12(fp)
 2010c58:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2010c5c:	d0e6e417 	ldw	r3,-25712(gp)
 2010c60:	e1fffd17 	ldw	r7,-12(fp)
 2010c64:	01808074 	movhi	r6,513
 2010c68:	3183ad04 	addi	r6,r6,3764
 2010c6c:	180b883a 	mov	r5,r3
 2010c70:	1009883a 	mov	r4,r2
 2010c74:	201198c0 	call	201198c <alt_alarm_start>
 2010c78:	1000040e 	bge	r2,zero,2010c8c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2010c7c:	e0fffd17 	ldw	r3,-12(fp)
 2010c80:	00a00034 	movhi	r2,32768
 2010c84:	10bfffc4 	addi	r2,r2,-1
 2010c88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2010c8c:	0001883a 	nop
 2010c90:	e037883a 	mov	sp,fp
 2010c94:	dfc00117 	ldw	ra,4(sp)
 2010c98:	df000017 	ldw	fp,0(sp)
 2010c9c:	dec00204 	addi	sp,sp,8
 2010ca0:	f800283a 	ret

02010ca4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2010ca4:	defff704 	addi	sp,sp,-36
 2010ca8:	df000815 	stw	fp,32(sp)
 2010cac:	df000804 	addi	fp,sp,32
 2010cb0:	e13ffe15 	stw	r4,-8(fp)
 2010cb4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2010cb8:	e0bffe17 	ldw	r2,-8(fp)
 2010cbc:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 2010cc0:	e0bffa17 	ldw	r2,-24(fp)
 2010cc4:	10800017 	ldw	r2,0(r2)
 2010cc8:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2010ccc:	e0bffb17 	ldw	r2,-20(fp)
 2010cd0:	10800104 	addi	r2,r2,4
 2010cd4:	10800037 	ldwio	r2,0(r2)
 2010cd8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2010cdc:	e0bffc17 	ldw	r2,-16(fp)
 2010ce0:	1080c00c 	andi	r2,r2,768
 2010ce4:	10006d26 	beq	r2,zero,2010e9c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2010ce8:	e0bffc17 	ldw	r2,-16(fp)
 2010cec:	1080400c 	andi	r2,r2,256
 2010cf0:	10003526 	beq	r2,zero,2010dc8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2010cf4:	00800074 	movhi	r2,1
 2010cf8:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2010cfc:	e0bffa17 	ldw	r2,-24(fp)
 2010d00:	10800a17 	ldw	r2,40(r2)
 2010d04:	10800044 	addi	r2,r2,1
 2010d08:	1081ffcc 	andi	r2,r2,2047
 2010d0c:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 2010d10:	e0bffa17 	ldw	r2,-24(fp)
 2010d14:	10c00b17 	ldw	r3,44(r2)
 2010d18:	e0bffd17 	ldw	r2,-12(fp)
 2010d1c:	18801526 	beq	r3,r2,2010d74 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2010d20:	e0bffb17 	ldw	r2,-20(fp)
 2010d24:	10800037 	ldwio	r2,0(r2)
 2010d28:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2010d2c:	e0bff817 	ldw	r2,-32(fp)
 2010d30:	10a0000c 	andi	r2,r2,32768
 2010d34:	10001126 	beq	r2,zero,2010d7c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2010d38:	e0bffa17 	ldw	r2,-24(fp)
 2010d3c:	10800a17 	ldw	r2,40(r2)
 2010d40:	e0fff817 	ldw	r3,-32(fp)
 2010d44:	1809883a 	mov	r4,r3
 2010d48:	e0fffa17 	ldw	r3,-24(fp)
 2010d4c:	1885883a 	add	r2,r3,r2
 2010d50:	10800e04 	addi	r2,r2,56
 2010d54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2010d58:	e0bffa17 	ldw	r2,-24(fp)
 2010d5c:	10800a17 	ldw	r2,40(r2)
 2010d60:	10800044 	addi	r2,r2,1
 2010d64:	10c1ffcc 	andi	r3,r2,2047
 2010d68:	e0bffa17 	ldw	r2,-24(fp)
 2010d6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2010d70:	003fe206 	br	2010cfc <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2010d74:	0001883a 	nop
 2010d78:	00000106 	br	2010d80 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2010d7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2010d80:	e0bff817 	ldw	r2,-32(fp)
 2010d84:	10bfffec 	andhi	r2,r2,65535
 2010d88:	10000f26 	beq	r2,zero,2010dc8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2010d8c:	e0bffa17 	ldw	r2,-24(fp)
 2010d90:	10c00817 	ldw	r3,32(r2)
 2010d94:	00bfff84 	movi	r2,-2
 2010d98:	1886703a 	and	r3,r3,r2
 2010d9c:	e0bffa17 	ldw	r2,-24(fp)
 2010da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2010da4:	e0bffb17 	ldw	r2,-20(fp)
 2010da8:	10800104 	addi	r2,r2,4
 2010dac:	1007883a 	mov	r3,r2
 2010db0:	e0bffa17 	ldw	r2,-24(fp)
 2010db4:	10800817 	ldw	r2,32(r2)
 2010db8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2010dbc:	e0bffb17 	ldw	r2,-20(fp)
 2010dc0:	10800104 	addi	r2,r2,4
 2010dc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2010dc8:	e0bffc17 	ldw	r2,-16(fp)
 2010dcc:	1080800c 	andi	r2,r2,512
 2010dd0:	103fbe26 	beq	r2,zero,2010ccc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2010dd4:	e0bffc17 	ldw	r2,-16(fp)
 2010dd8:	1004d43a 	srli	r2,r2,16
 2010ddc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2010de0:	00001406 	br	2010e34 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2010de4:	e0bffb17 	ldw	r2,-20(fp)
 2010de8:	e0fffa17 	ldw	r3,-24(fp)
 2010dec:	18c00d17 	ldw	r3,52(r3)
 2010df0:	e13ffa17 	ldw	r4,-24(fp)
 2010df4:	20c7883a 	add	r3,r4,r3
 2010df8:	18c20e04 	addi	r3,r3,2104
 2010dfc:	18c00003 	ldbu	r3,0(r3)
 2010e00:	18c03fcc 	andi	r3,r3,255
 2010e04:	18c0201c 	xori	r3,r3,128
 2010e08:	18ffe004 	addi	r3,r3,-128
 2010e0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2010e10:	e0bffa17 	ldw	r2,-24(fp)
 2010e14:	10800d17 	ldw	r2,52(r2)
 2010e18:	10800044 	addi	r2,r2,1
 2010e1c:	10c1ffcc 	andi	r3,r2,2047
 2010e20:	e0bffa17 	ldw	r2,-24(fp)
 2010e24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2010e28:	e0bff917 	ldw	r2,-28(fp)
 2010e2c:	10bfffc4 	addi	r2,r2,-1
 2010e30:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2010e34:	e0bff917 	ldw	r2,-28(fp)
 2010e38:	10000526 	beq	r2,zero,2010e50 <altera_avalon_jtag_uart_irq+0x1ac>
 2010e3c:	e0bffa17 	ldw	r2,-24(fp)
 2010e40:	10c00d17 	ldw	r3,52(r2)
 2010e44:	e0bffa17 	ldw	r2,-24(fp)
 2010e48:	10800c17 	ldw	r2,48(r2)
 2010e4c:	18bfe51e 	bne	r3,r2,2010de4 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2010e50:	e0bff917 	ldw	r2,-28(fp)
 2010e54:	103f9d26 	beq	r2,zero,2010ccc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2010e58:	e0bffa17 	ldw	r2,-24(fp)
 2010e5c:	10c00817 	ldw	r3,32(r2)
 2010e60:	00bfff44 	movi	r2,-3
 2010e64:	1886703a 	and	r3,r3,r2
 2010e68:	e0bffa17 	ldw	r2,-24(fp)
 2010e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2010e70:	e0bffa17 	ldw	r2,-24(fp)
 2010e74:	10800017 	ldw	r2,0(r2)
 2010e78:	10800104 	addi	r2,r2,4
 2010e7c:	1007883a 	mov	r3,r2
 2010e80:	e0bffa17 	ldw	r2,-24(fp)
 2010e84:	10800817 	ldw	r2,32(r2)
 2010e88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2010e8c:	e0bffb17 	ldw	r2,-20(fp)
 2010e90:	10800104 	addi	r2,r2,4
 2010e94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2010e98:	003f8c06 	br	2010ccc <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2010e9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2010ea0:	0001883a 	nop
 2010ea4:	e037883a 	mov	sp,fp
 2010ea8:	df000017 	ldw	fp,0(sp)
 2010eac:	dec00104 	addi	sp,sp,4
 2010eb0:	f800283a 	ret

02010eb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2010eb4:	defff804 	addi	sp,sp,-32
 2010eb8:	df000715 	stw	fp,28(sp)
 2010ebc:	df000704 	addi	fp,sp,28
 2010ec0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2010ec4:	e0bffb17 	ldw	r2,-20(fp)
 2010ec8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2010ecc:	e0bff917 	ldw	r2,-28(fp)
 2010ed0:	10800017 	ldw	r2,0(r2)
 2010ed4:	10800104 	addi	r2,r2,4
 2010ed8:	10800037 	ldwio	r2,0(r2)
 2010edc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2010ee0:	e0bffa17 	ldw	r2,-24(fp)
 2010ee4:	1081000c 	andi	r2,r2,1024
 2010ee8:	10000b26 	beq	r2,zero,2010f18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2010eec:	e0bff917 	ldw	r2,-28(fp)
 2010ef0:	10800017 	ldw	r2,0(r2)
 2010ef4:	10800104 	addi	r2,r2,4
 2010ef8:	1007883a 	mov	r3,r2
 2010efc:	e0bff917 	ldw	r2,-28(fp)
 2010f00:	10800817 	ldw	r2,32(r2)
 2010f04:	10810014 	ori	r2,r2,1024
 2010f08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2010f0c:	e0bff917 	ldw	r2,-28(fp)
 2010f10:	10000915 	stw	zero,36(r2)
 2010f14:	00000a06 	br	2010f40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2010f18:	e0bff917 	ldw	r2,-28(fp)
 2010f1c:	10c00917 	ldw	r3,36(r2)
 2010f20:	00a00034 	movhi	r2,32768
 2010f24:	10bfff04 	addi	r2,r2,-4
 2010f28:	10c00536 	bltu	r2,r3,2010f40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2010f2c:	e0bff917 	ldw	r2,-28(fp)
 2010f30:	10800917 	ldw	r2,36(r2)
 2010f34:	10c00044 	addi	r3,r2,1
 2010f38:	e0bff917 	ldw	r2,-28(fp)
 2010f3c:	10c00915 	stw	r3,36(r2)
 2010f40:	d0a6e417 	ldw	r2,-25712(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2010f44:	e037883a 	mov	sp,fp
 2010f48:	df000017 	ldw	fp,0(sp)
 2010f4c:	dec00104 	addi	sp,sp,4
 2010f50:	f800283a 	ret

02010f54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2010f54:	defffd04 	addi	sp,sp,-12
 2010f58:	df000215 	stw	fp,8(sp)
 2010f5c:	df000204 	addi	fp,sp,8
 2010f60:	e13ffe15 	stw	r4,-8(fp)
 2010f64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2010f68:	00000506 	br	2010f80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2010f6c:	e0bfff17 	ldw	r2,-4(fp)
 2010f70:	1090000c 	andi	r2,r2,16384
 2010f74:	10000226 	beq	r2,zero,2010f80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2010f78:	00bffd44 	movi	r2,-11
 2010f7c:	00000b06 	br	2010fac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2010f80:	e0bffe17 	ldw	r2,-8(fp)
 2010f84:	10c00d17 	ldw	r3,52(r2)
 2010f88:	e0bffe17 	ldw	r2,-8(fp)
 2010f8c:	10800c17 	ldw	r2,48(r2)
 2010f90:	18800526 	beq	r3,r2,2010fa8 <altera_avalon_jtag_uart_close+0x54>
 2010f94:	e0bffe17 	ldw	r2,-8(fp)
 2010f98:	10c00917 	ldw	r3,36(r2)
 2010f9c:	e0bffe17 	ldw	r2,-8(fp)
 2010fa0:	10800117 	ldw	r2,4(r2)
 2010fa4:	18bff136 	bltu	r3,r2,2010f6c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2010fa8:	0005883a 	mov	r2,zero
}
 2010fac:	e037883a 	mov	sp,fp
 2010fb0:	df000017 	ldw	fp,0(sp)
 2010fb4:	dec00104 	addi	sp,sp,4
 2010fb8:	f800283a 	ret

02010fbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2010fbc:	defffa04 	addi	sp,sp,-24
 2010fc0:	df000515 	stw	fp,20(sp)
 2010fc4:	df000504 	addi	fp,sp,20
 2010fc8:	e13ffd15 	stw	r4,-12(fp)
 2010fcc:	e17ffe15 	stw	r5,-8(fp)
 2010fd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2010fd4:	00bff9c4 	movi	r2,-25
 2010fd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2010fdc:	e0bffe17 	ldw	r2,-8(fp)
 2010fe0:	10da8060 	cmpeqi	r3,r2,27137
 2010fe4:	1800031e 	bne	r3,zero,2010ff4 <altera_avalon_jtag_uart_ioctl+0x38>
 2010fe8:	109a80a0 	cmpeqi	r2,r2,27138
 2010fec:	1000181e 	bne	r2,zero,2011050 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2010ff0:	00002906 	br	2011098 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2010ff4:	e0bffd17 	ldw	r2,-12(fp)
 2010ff8:	10c00117 	ldw	r3,4(r2)
 2010ffc:	00a00034 	movhi	r2,32768
 2011000:	10bfffc4 	addi	r2,r2,-1
 2011004:	18802126 	beq	r3,r2,201108c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2011008:	e0bfff17 	ldw	r2,-4(fp)
 201100c:	10800017 	ldw	r2,0(r2)
 2011010:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2011014:	e0bffc17 	ldw	r2,-16(fp)
 2011018:	10800090 	cmplti	r2,r2,2
 201101c:	1000061e 	bne	r2,zero,2011038 <altera_avalon_jtag_uart_ioctl+0x7c>
 2011020:	e0fffc17 	ldw	r3,-16(fp)
 2011024:	00a00034 	movhi	r2,32768
 2011028:	10bfffc4 	addi	r2,r2,-1
 201102c:	18800226 	beq	r3,r2,2011038 <altera_avalon_jtag_uart_ioctl+0x7c>
 2011030:	e0bffc17 	ldw	r2,-16(fp)
 2011034:	00000206 	br	2011040 <altera_avalon_jtag_uart_ioctl+0x84>
 2011038:	00a00034 	movhi	r2,32768
 201103c:	10bfff84 	addi	r2,r2,-2
 2011040:	e0fffd17 	ldw	r3,-12(fp)
 2011044:	18800115 	stw	r2,4(r3)
      rc = 0;
 2011048:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201104c:	00000f06 	br	201108c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2011050:	e0bffd17 	ldw	r2,-12(fp)
 2011054:	10c00117 	ldw	r3,4(r2)
 2011058:	00a00034 	movhi	r2,32768
 201105c:	10bfffc4 	addi	r2,r2,-1
 2011060:	18800c26 	beq	r3,r2,2011094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2011064:	e0bffd17 	ldw	r2,-12(fp)
 2011068:	10c00917 	ldw	r3,36(r2)
 201106c:	e0bffd17 	ldw	r2,-12(fp)
 2011070:	10800117 	ldw	r2,4(r2)
 2011074:	1885803a 	cmpltu	r2,r3,r2
 2011078:	10c03fcc 	andi	r3,r2,255
 201107c:	e0bfff17 	ldw	r2,-4(fp)
 2011080:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2011084:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2011088:	00000206 	br	2011094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201108c:	0001883a 	nop
 2011090:	00000106 	br	2011098 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2011094:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2011098:	e0bffb17 	ldw	r2,-20(fp)
}
 201109c:	e037883a 	mov	sp,fp
 20110a0:	df000017 	ldw	fp,0(sp)
 20110a4:	dec00104 	addi	sp,sp,4
 20110a8:	f800283a 	ret

020110ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20110ac:	defff304 	addi	sp,sp,-52
 20110b0:	dfc00c15 	stw	ra,48(sp)
 20110b4:	df000b15 	stw	fp,44(sp)
 20110b8:	df000b04 	addi	fp,sp,44
 20110bc:	e13ffc15 	stw	r4,-16(fp)
 20110c0:	e17ffd15 	stw	r5,-12(fp)
 20110c4:	e1bffe15 	stw	r6,-8(fp)
 20110c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20110cc:	e0bffd17 	ldw	r2,-12(fp)
 20110d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20110d4:	00004706 	br	20111f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20110d8:	e0bffc17 	ldw	r2,-16(fp)
 20110dc:	10800a17 	ldw	r2,40(r2)
 20110e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20110e4:	e0bffc17 	ldw	r2,-16(fp)
 20110e8:	10800b17 	ldw	r2,44(r2)
 20110ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20110f0:	e0fff717 	ldw	r3,-36(fp)
 20110f4:	e0bff817 	ldw	r2,-32(fp)
 20110f8:	18800536 	bltu	r3,r2,2011110 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20110fc:	e0fff717 	ldw	r3,-36(fp)
 2011100:	e0bff817 	ldw	r2,-32(fp)
 2011104:	1885c83a 	sub	r2,r3,r2
 2011108:	e0bff615 	stw	r2,-40(fp)
 201110c:	00000406 	br	2011120 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2011110:	00c20004 	movi	r3,2048
 2011114:	e0bff817 	ldw	r2,-32(fp)
 2011118:	1885c83a 	sub	r2,r3,r2
 201111c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2011120:	e0bff617 	ldw	r2,-40(fp)
 2011124:	10001e26 	beq	r2,zero,20111a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2011128:	e0fffe17 	ldw	r3,-8(fp)
 201112c:	e0bff617 	ldw	r2,-40(fp)
 2011130:	1880022e 	bgeu	r3,r2,201113c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2011134:	e0bffe17 	ldw	r2,-8(fp)
 2011138:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201113c:	e0bffc17 	ldw	r2,-16(fp)
 2011140:	10c00e04 	addi	r3,r2,56
 2011144:	e0bff817 	ldw	r2,-32(fp)
 2011148:	1885883a 	add	r2,r3,r2
 201114c:	e1bff617 	ldw	r6,-40(fp)
 2011150:	100b883a 	mov	r5,r2
 2011154:	e13ff517 	ldw	r4,-44(fp)
 2011158:	2007d700 	call	2007d70 <memcpy>
      ptr   += n;
 201115c:	e0fff517 	ldw	r3,-44(fp)
 2011160:	e0bff617 	ldw	r2,-40(fp)
 2011164:	1885883a 	add	r2,r3,r2
 2011168:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 201116c:	e0fffe17 	ldw	r3,-8(fp)
 2011170:	e0bff617 	ldw	r2,-40(fp)
 2011174:	1885c83a 	sub	r2,r3,r2
 2011178:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201117c:	e0fff817 	ldw	r3,-32(fp)
 2011180:	e0bff617 	ldw	r2,-40(fp)
 2011184:	1885883a 	add	r2,r3,r2
 2011188:	10c1ffcc 	andi	r3,r2,2047
 201118c:	e0bffc17 	ldw	r2,-16(fp)
 2011190:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2011194:	e0bffe17 	ldw	r2,-8(fp)
 2011198:	00bfcf16 	blt	zero,r2,20110d8 <altera_avalon_jtag_uart_read+0x2c>
 201119c:	00000106 	br	20111a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20111a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20111a4:	e0fff517 	ldw	r3,-44(fp)
 20111a8:	e0bffd17 	ldw	r2,-12(fp)
 20111ac:	1880141e 	bne	r3,r2,2011200 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20111b0:	e0bfff17 	ldw	r2,-4(fp)
 20111b4:	1090000c 	andi	r2,r2,16384
 20111b8:	1000131e 	bne	r2,zero,2011208 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20111bc:	0001883a 	nop
 20111c0:	e0bffc17 	ldw	r2,-16(fp)
 20111c4:	10c00a17 	ldw	r3,40(r2)
 20111c8:	e0bff717 	ldw	r2,-36(fp)
 20111cc:	1880051e 	bne	r3,r2,20111e4 <altera_avalon_jtag_uart_read+0x138>
 20111d0:	e0bffc17 	ldw	r2,-16(fp)
 20111d4:	10c00917 	ldw	r3,36(r2)
 20111d8:	e0bffc17 	ldw	r2,-16(fp)
 20111dc:	10800117 	ldw	r2,4(r2)
 20111e0:	18bff736 	bltu	r3,r2,20111c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20111e4:	e0bffc17 	ldw	r2,-16(fp)
 20111e8:	10c00a17 	ldw	r3,40(r2)
 20111ec:	e0bff717 	ldw	r2,-36(fp)
 20111f0:	18800726 	beq	r3,r2,2011210 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20111f4:	e0bffe17 	ldw	r2,-8(fp)
 20111f8:	00bfb716 	blt	zero,r2,20110d8 <altera_avalon_jtag_uart_read+0x2c>
 20111fc:	00000506 	br	2011214 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2011200:	0001883a 	nop
 2011204:	00000306 	br	2011214 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2011208:	0001883a 	nop
 201120c:	00000106 	br	2011214 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2011210:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2011214:	e0fff517 	ldw	r3,-44(fp)
 2011218:	e0bffd17 	ldw	r2,-12(fp)
 201121c:	18801826 	beq	r3,r2,2011280 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011220:	0005303a 	rdctl	r2,status
 2011224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011228:	e0fffb17 	ldw	r3,-20(fp)
 201122c:	00bfff84 	movi	r2,-2
 2011230:	1884703a 	and	r2,r3,r2
 2011234:	1001703a 	wrctl	status,r2
  
  return context;
 2011238:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201123c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2011240:	e0bffc17 	ldw	r2,-16(fp)
 2011244:	10800817 	ldw	r2,32(r2)
 2011248:	10c00054 	ori	r3,r2,1
 201124c:	e0bffc17 	ldw	r2,-16(fp)
 2011250:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2011254:	e0bffc17 	ldw	r2,-16(fp)
 2011258:	10800017 	ldw	r2,0(r2)
 201125c:	10800104 	addi	r2,r2,4
 2011260:	1007883a 	mov	r3,r2
 2011264:	e0bffc17 	ldw	r2,-16(fp)
 2011268:	10800817 	ldw	r2,32(r2)
 201126c:	18800035 	stwio	r2,0(r3)
 2011270:	e0bffa17 	ldw	r2,-24(fp)
 2011274:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011278:	e0bff917 	ldw	r2,-28(fp)
 201127c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2011280:	e0fff517 	ldw	r3,-44(fp)
 2011284:	e0bffd17 	ldw	r2,-12(fp)
 2011288:	18800426 	beq	r3,r2,201129c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 201128c:	e0fff517 	ldw	r3,-44(fp)
 2011290:	e0bffd17 	ldw	r2,-12(fp)
 2011294:	1885c83a 	sub	r2,r3,r2
 2011298:	00000606 	br	20112b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 201129c:	e0bfff17 	ldw	r2,-4(fp)
 20112a0:	1090000c 	andi	r2,r2,16384
 20112a4:	10000226 	beq	r2,zero,20112b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 20112a8:	00bffd44 	movi	r2,-11
 20112ac:	00000106 	br	20112b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 20112b0:	00bffec4 	movi	r2,-5
}
 20112b4:	e037883a 	mov	sp,fp
 20112b8:	dfc00117 	ldw	ra,4(sp)
 20112bc:	df000017 	ldw	fp,0(sp)
 20112c0:	dec00204 	addi	sp,sp,8
 20112c4:	f800283a 	ret

020112c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20112c8:	defff304 	addi	sp,sp,-52
 20112cc:	dfc00c15 	stw	ra,48(sp)
 20112d0:	df000b15 	stw	fp,44(sp)
 20112d4:	df000b04 	addi	fp,sp,44
 20112d8:	e13ffc15 	stw	r4,-16(fp)
 20112dc:	e17ffd15 	stw	r5,-12(fp)
 20112e0:	e1bffe15 	stw	r6,-8(fp)
 20112e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20112e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20112ec:	e0bffd17 	ldw	r2,-12(fp)
 20112f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20112f4:	00003706 	br	20113d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20112f8:	e0bffc17 	ldw	r2,-16(fp)
 20112fc:	10800c17 	ldw	r2,48(r2)
 2011300:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 2011304:	e0bffc17 	ldw	r2,-16(fp)
 2011308:	10800d17 	ldw	r2,52(r2)
 201130c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2011310:	e0fff917 	ldw	r3,-28(fp)
 2011314:	e0bff517 	ldw	r2,-44(fp)
 2011318:	1880062e 	bgeu	r3,r2,2011334 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 201131c:	e0fff517 	ldw	r3,-44(fp)
 2011320:	e0bff917 	ldw	r2,-28(fp)
 2011324:	1885c83a 	sub	r2,r3,r2
 2011328:	10bfffc4 	addi	r2,r2,-1
 201132c:	e0bff615 	stw	r2,-40(fp)
 2011330:	00000b06 	br	2011360 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2011334:	e0bff517 	ldw	r2,-44(fp)
 2011338:	10000526 	beq	r2,zero,2011350 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201133c:	00c20004 	movi	r3,2048
 2011340:	e0bff917 	ldw	r2,-28(fp)
 2011344:	1885c83a 	sub	r2,r3,r2
 2011348:	e0bff615 	stw	r2,-40(fp)
 201134c:	00000406 	br	2011360 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2011350:	00c1ffc4 	movi	r3,2047
 2011354:	e0bff917 	ldw	r2,-28(fp)
 2011358:	1885c83a 	sub	r2,r3,r2
 201135c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2011360:	e0bff617 	ldw	r2,-40(fp)
 2011364:	10001e26 	beq	r2,zero,20113e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2011368:	e0fffe17 	ldw	r3,-8(fp)
 201136c:	e0bff617 	ldw	r2,-40(fp)
 2011370:	1880022e 	bgeu	r3,r2,201137c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2011374:	e0bffe17 	ldw	r2,-8(fp)
 2011378:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201137c:	e0bffc17 	ldw	r2,-16(fp)
 2011380:	10c20e04 	addi	r3,r2,2104
 2011384:	e0bff917 	ldw	r2,-28(fp)
 2011388:	1885883a 	add	r2,r3,r2
 201138c:	e1bff617 	ldw	r6,-40(fp)
 2011390:	e17ffd17 	ldw	r5,-12(fp)
 2011394:	1009883a 	mov	r4,r2
 2011398:	2007d700 	call	2007d70 <memcpy>
      ptr   += n;
 201139c:	e0fffd17 	ldw	r3,-12(fp)
 20113a0:	e0bff617 	ldw	r2,-40(fp)
 20113a4:	1885883a 	add	r2,r3,r2
 20113a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20113ac:	e0fffe17 	ldw	r3,-8(fp)
 20113b0:	e0bff617 	ldw	r2,-40(fp)
 20113b4:	1885c83a 	sub	r2,r3,r2
 20113b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20113bc:	e0fff917 	ldw	r3,-28(fp)
 20113c0:	e0bff617 	ldw	r2,-40(fp)
 20113c4:	1885883a 	add	r2,r3,r2
 20113c8:	10c1ffcc 	andi	r3,r2,2047
 20113cc:	e0bffc17 	ldw	r2,-16(fp)
 20113d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20113d4:	e0bffe17 	ldw	r2,-8(fp)
 20113d8:	00bfc716 	blt	zero,r2,20112f8 <altera_avalon_jtag_uart_write+0x30>
 20113dc:	00000106 	br	20113e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 20113e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20113e4:	0005303a 	rdctl	r2,status
 20113e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20113ec:	e0fffb17 	ldw	r3,-20(fp)
 20113f0:	00bfff84 	movi	r2,-2
 20113f4:	1884703a 	and	r2,r3,r2
 20113f8:	1001703a 	wrctl	status,r2
  
  return context;
 20113fc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2011400:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2011404:	e0bffc17 	ldw	r2,-16(fp)
 2011408:	10800817 	ldw	r2,32(r2)
 201140c:	10c00094 	ori	r3,r2,2
 2011410:	e0bffc17 	ldw	r2,-16(fp)
 2011414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2011418:	e0bffc17 	ldw	r2,-16(fp)
 201141c:	10800017 	ldw	r2,0(r2)
 2011420:	10800104 	addi	r2,r2,4
 2011424:	1007883a 	mov	r3,r2
 2011428:	e0bffc17 	ldw	r2,-16(fp)
 201142c:	10800817 	ldw	r2,32(r2)
 2011430:	18800035 	stwio	r2,0(r3)
 2011434:	e0bffa17 	ldw	r2,-24(fp)
 2011438:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201143c:	e0bff817 	ldw	r2,-32(fp)
 2011440:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2011444:	e0bffe17 	ldw	r2,-8(fp)
 2011448:	0080100e 	bge	zero,r2,201148c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 201144c:	e0bfff17 	ldw	r2,-4(fp)
 2011450:	1090000c 	andi	r2,r2,16384
 2011454:	1000101e 	bne	r2,zero,2011498 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2011458:	0001883a 	nop
 201145c:	e0bffc17 	ldw	r2,-16(fp)
 2011460:	10c00d17 	ldw	r3,52(r2)
 2011464:	e0bff517 	ldw	r2,-44(fp)
 2011468:	1880051e 	bne	r3,r2,2011480 <altera_avalon_jtag_uart_write+0x1b8>
 201146c:	e0bffc17 	ldw	r2,-16(fp)
 2011470:	10c00917 	ldw	r3,36(r2)
 2011474:	e0bffc17 	ldw	r2,-16(fp)
 2011478:	10800117 	ldw	r2,4(r2)
 201147c:	18bff736 	bltu	r3,r2,201145c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2011480:	e0bffc17 	ldw	r2,-16(fp)
 2011484:	10800917 	ldw	r2,36(r2)
 2011488:	1000051e 	bne	r2,zero,20114a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 201148c:	e0bffe17 	ldw	r2,-8(fp)
 2011490:	00bfd016 	blt	zero,r2,20113d4 <altera_avalon_jtag_uart_write+0x10c>
 2011494:	00000306 	br	20114a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2011498:	0001883a 	nop
 201149c:	00000106 	br	20114a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 20114a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 20114a4:	e0fffd17 	ldw	r3,-12(fp)
 20114a8:	e0bff717 	ldw	r2,-36(fp)
 20114ac:	18800426 	beq	r3,r2,20114c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 20114b0:	e0fffd17 	ldw	r3,-12(fp)
 20114b4:	e0bff717 	ldw	r2,-36(fp)
 20114b8:	1885c83a 	sub	r2,r3,r2
 20114bc:	00000606 	br	20114d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 20114c0:	e0bfff17 	ldw	r2,-4(fp)
 20114c4:	1090000c 	andi	r2,r2,16384
 20114c8:	10000226 	beq	r2,zero,20114d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 20114cc:	00bffd44 	movi	r2,-11
 20114d0:	00000106 	br	20114d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20114d4:	00bffec4 	movi	r2,-5
}
 20114d8:	e037883a 	mov	sp,fp
 20114dc:	dfc00117 	ldw	ra,4(sp)
 20114e0:	df000017 	ldw	fp,0(sp)
 20114e4:	dec00204 	addi	sp,sp,8
 20114e8:	f800283a 	ret

020114ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20114ec:	defff904 	addi	sp,sp,-28
 20114f0:	dfc00615 	stw	ra,24(sp)
 20114f4:	df000515 	stw	fp,20(sp)
 20114f8:	df000504 	addi	fp,sp,20
 20114fc:	e13ffe15 	stw	r4,-8(fp)
 2011500:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2011504:	0007883a 	mov	r3,zero
 2011508:	e0bffe17 	ldw	r2,-8(fp)
 201150c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2011510:	e0bffe17 	ldw	r2,-8(fp)
 2011514:	10800104 	addi	r2,r2,4
 2011518:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201151c:	0005303a 	rdctl	r2,status
 2011520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011524:	e0fffc17 	ldw	r3,-16(fp)
 2011528:	00bfff84 	movi	r2,-2
 201152c:	1884703a 	and	r2,r3,r2
 2011530:	1001703a 	wrctl	status,r2
  
  return context;
 2011534:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2011538:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 201153c:	20123140 	call	2012314 <alt_tick>
 2011540:	e0bffb17 	ldw	r2,-20(fp)
 2011544:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011548:	e0bffd17 	ldw	r2,-12(fp)
 201154c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2011550:	0001883a 	nop
 2011554:	e037883a 	mov	sp,fp
 2011558:	dfc00117 	ldw	ra,4(sp)
 201155c:	df000017 	ldw	fp,0(sp)
 2011560:	dec00204 	addi	sp,sp,8
 2011564:	f800283a 	ret

02011568 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2011568:	defff904 	addi	sp,sp,-28
 201156c:	dfc00615 	stw	ra,24(sp)
 2011570:	df000515 	stw	fp,20(sp)
 2011574:	df000504 	addi	fp,sp,20
 2011578:	e13ffc15 	stw	r4,-16(fp)
 201157c:	e17ffd15 	stw	r5,-12(fp)
 2011580:	e1bffe15 	stw	r6,-8(fp)
 2011584:	e1ffff15 	stw	r7,-4(fp)
 2011588:	e0bfff17 	ldw	r2,-4(fp)
 201158c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2011590:	d0a6e417 	ldw	r2,-25712(gp)
 2011594:	1000021e 	bne	r2,zero,20115a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2011598:	e0bffb17 	ldw	r2,-20(fp)
 201159c:	d0a6e415 	stw	r2,-25712(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 20115a0:	e0bffc17 	ldw	r2,-16(fp)
 20115a4:	10800104 	addi	r2,r2,4
 20115a8:	00c001c4 	movi	r3,7
 20115ac:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 20115b0:	01808074 	movhi	r6,513
 20115b4:	31853b04 	addi	r6,r6,5356
 20115b8:	e17ffc17 	ldw	r5,-16(fp)
 20115bc:	e13ffe17 	ldw	r4,-8(fp)
 20115c0:	2011ea40 	call	2011ea4 <alt_irq_register>
#endif  
}
 20115c4:	0001883a 	nop
 20115c8:	e037883a 	mov	sp,fp
 20115cc:	dfc00117 	ldw	ra,4(sp)
 20115d0:	df000017 	ldw	fp,0(sp)
 20115d4:	dec00204 	addi	sp,sp,8
 20115d8:	f800283a 	ret

020115dc <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 20115dc:	defffc04 	addi	sp,sp,-16
 20115e0:	dfc00315 	stw	ra,12(sp)
 20115e4:	df000215 	stw	fp,8(sp)
 20115e8:	df000204 	addi	fp,sp,8
 20115ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 20115f0:	d1600804 	addi	r5,gp,-32736
 20115f4:	e13fff17 	ldw	r4,-4(fp)
 20115f8:	2011ca00 	call	2011ca0 <alt_find_dev>
 20115fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 2011600:	e0bffe17 	ldw	r2,-8(fp)
}
 2011604:	e037883a 	mov	sp,fp
 2011608:	dfc00117 	ldw	ra,4(sp)
 201160c:	df000017 	ldw	fp,0(sp)
 2011610:	dec00204 	addi	sp,sp,8
 2011614:	f800283a 	ret

02011618 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 2011618:	defffd04 	addi	sp,sp,-12
 201161c:	df000215 	stw	fp,8(sp)
 2011620:	df000204 	addi	fp,sp,8
 2011624:	e13ffe15 	stw	r4,-8(fp)
 2011628:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 201162c:	e0bffe17 	ldw	r2,-8(fp)
 2011630:	10800a17 	ldw	r2,40(r2)
 2011634:	10800023 	ldbuio	r2,0(r2)
 2011638:	10803fcc 	andi	r2,r2,255
 201163c:	1007883a 	mov	r3,r2
 2011640:	e0bfff17 	ldw	r2,-4(fp)
 2011644:	10c00005 	stb	r3,0(r2)

	return 0;
 2011648:	0005883a 	mov	r2,zero
}
 201164c:	e037883a 	mov	sp,fp
 2011650:	df000017 	ldw	fp,0(sp)
 2011654:	dec00104 	addi	sp,sp,4
 2011658:	f800283a 	ret

0201165c <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 201165c:	defffc04 	addi	sp,sp,-16
 2011660:	df000315 	stw	fp,12(sp)
 2011664:	df000304 	addi	fp,sp,12
 2011668:	e13ffd15 	stw	r4,-12(fp)
 201166c:	2805883a 	mov	r2,r5
 2011670:	e1bfff15 	stw	r6,-4(fp)
 2011674:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2011678:	e0bffd17 	ldw	r2,-12(fp)
 201167c:	10800a17 	ldw	r2,40(r2)
 2011680:	1007883a 	mov	r3,r2
 2011684:	e0bffe03 	ldbu	r2,-8(fp)
 2011688:	10800fcc 	andi	r2,r2,63
 201168c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2011690:	e0bffd17 	ldw	r2,-12(fp)
 2011694:	10800a17 	ldw	r2,40(r2)
 2011698:	10800044 	addi	r2,r2,1
 201169c:	10800023 	ldbuio	r2,0(r2)
 20116a0:	10803fcc 	andi	r2,r2,255
 20116a4:	1007883a 	mov	r3,r2
 20116a8:	e0bfff17 	ldw	r2,-4(fp)
 20116ac:	10c00005 	stb	r3,0(r2)

	return 0;
 20116b0:	0005883a 	mov	r2,zero
}
 20116b4:	e037883a 	mov	sp,fp
 20116b8:	df000017 	ldw	fp,0(sp)
 20116bc:	dec00104 	addi	sp,sp,4
 20116c0:	f800283a 	ret

020116c4 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 20116c4:	defffc04 	addi	sp,sp,-16
 20116c8:	df000315 	stw	fp,12(sp)
 20116cc:	df000304 	addi	fp,sp,12
 20116d0:	e13ffd15 	stw	r4,-12(fp)
 20116d4:	2807883a 	mov	r3,r5
 20116d8:	3005883a 	mov	r2,r6
 20116dc:	e0fffe05 	stb	r3,-8(fp)
 20116e0:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20116e4:	e0bffd17 	ldw	r2,-12(fp)
 20116e8:	10800a17 	ldw	r2,40(r2)
 20116ec:	1007883a 	mov	r3,r2
 20116f0:	e0bffe03 	ldbu	r2,-8(fp)
 20116f4:	10800fcc 	andi	r2,r2,63
 20116f8:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 20116fc:	e0bffd17 	ldw	r2,-12(fp)
 2011700:	10800a17 	ldw	r2,40(r2)
 2011704:	10800044 	addi	r2,r2,1
 2011708:	1007883a 	mov	r3,r2
 201170c:	e0bfff03 	ldbu	r2,-4(fp)
 2011710:	18800025 	stbio	r2,0(r3)

	return 0;
 2011714:	0005883a 	mov	r2,zero
}
 2011718:	e037883a 	mov	sp,fp
 201171c:	df000017 	ldw	fp,0(sp)
 2011720:	dec00104 	addi	sp,sp,4
 2011724:	f800283a 	ret

02011728 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 2011728:	defffd04 	addi	sp,sp,-12
 201172c:	df000215 	stw	fp,8(sp)
 2011730:	df000204 	addi	fp,sp,8
 2011734:	e13ffe15 	stw	r4,-8(fp)
 2011738:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201173c:	e0bffe17 	ldw	r2,-8(fp)
 2011740:	10800a17 	ldw	r2,40(r2)
 2011744:	1007883a 	mov	r3,r2
 2011748:	00800c84 	movi	r2,50
 201174c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2011750:	e0bffe17 	ldw	r2,-8(fp)
 2011754:	10800a17 	ldw	r2,40(r2)
 2011758:	10800044 	addi	r2,r2,1
 201175c:	10800023 	ldbuio	r2,0(r2)
 2011760:	10803fcc 	andi	r2,r2,255
 2011764:	10ffffcc 	andi	r3,r2,65535
 2011768:	e0bfff17 	ldw	r2,-4(fp)
 201176c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2011770:	e0bffe17 	ldw	r2,-8(fp)
 2011774:	10800a17 	ldw	r2,40(r2)
 2011778:	1007883a 	mov	r3,r2
 201177c:	00800cc4 	movi	r2,51
 2011780:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2011784:	e0bffe17 	ldw	r2,-8(fp)
 2011788:	10800a17 	ldw	r2,40(r2)
 201178c:	10800044 	addi	r2,r2,1
 2011790:	10800023 	ldbuio	r2,0(r2)
 2011794:	10803fcc 	andi	r2,r2,255
 2011798:	10bfffcc 	andi	r2,r2,65535
 201179c:	1004923a 	slli	r2,r2,8
 20117a0:	e0ffff17 	ldw	r3,-4(fp)
 20117a4:	18c00017 	ldw	r3,0(r3)
 20117a8:	1885883a 	add	r2,r3,r2
 20117ac:	1007883a 	mov	r3,r2
 20117b0:	e0bfff17 	ldw	r2,-4(fp)
 20117b4:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 20117b8:	e0bfff17 	ldw	r2,-4(fp)
 20117bc:	10800017 	ldw	r2,0(r2)
 20117c0:	10a0000c 	andi	r2,r2,32768
 20117c4:	10000626 	beq	r2,zero,20117e0 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 20117c8:	e0bfff17 	ldw	r2,-4(fp)
 20117cc:	10800017 	ldw	r2,0(r2)
 20117d0:	10bffff4 	orhi	r2,r2,65535
 20117d4:	1007883a 	mov	r3,r2
 20117d8:	e0bfff17 	ldw	r2,-4(fp)
 20117dc:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20117e0:	0005883a 	mov	r2,zero
}
 20117e4:	e037883a 	mov	sp,fp
 20117e8:	df000017 	ldw	fp,0(sp)
 20117ec:	dec00104 	addi	sp,sp,4
 20117f0:	f800283a 	ret

020117f4 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 20117f4:	defffd04 	addi	sp,sp,-12
 20117f8:	df000215 	stw	fp,8(sp)
 20117fc:	df000204 	addi	fp,sp,8
 2011800:	e13ffe15 	stw	r4,-8(fp)
 2011804:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2011808:	e0bffe17 	ldw	r2,-8(fp)
 201180c:	10800a17 	ldw	r2,40(r2)
 2011810:	1007883a 	mov	r3,r2
 2011814:	00800d04 	movi	r2,52
 2011818:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 201181c:	e0bffe17 	ldw	r2,-8(fp)
 2011820:	10800a17 	ldw	r2,40(r2)
 2011824:	10800044 	addi	r2,r2,1
 2011828:	10800023 	ldbuio	r2,0(r2)
 201182c:	10803fcc 	andi	r2,r2,255
 2011830:	10ffffcc 	andi	r3,r2,65535
 2011834:	e0bfff17 	ldw	r2,-4(fp)
 2011838:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201183c:	e0bffe17 	ldw	r2,-8(fp)
 2011840:	10800a17 	ldw	r2,40(r2)
 2011844:	1007883a 	mov	r3,r2
 2011848:	00800d44 	movi	r2,53
 201184c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2011850:	e0bffe17 	ldw	r2,-8(fp)
 2011854:	10800a17 	ldw	r2,40(r2)
 2011858:	10800044 	addi	r2,r2,1
 201185c:	10800023 	ldbuio	r2,0(r2)
 2011860:	10803fcc 	andi	r2,r2,255
 2011864:	10bfffcc 	andi	r2,r2,65535
 2011868:	1004923a 	slli	r2,r2,8
 201186c:	e0ffff17 	ldw	r3,-4(fp)
 2011870:	18c00017 	ldw	r3,0(r3)
 2011874:	1885883a 	add	r2,r3,r2
 2011878:	1007883a 	mov	r3,r2
 201187c:	e0bfff17 	ldw	r2,-4(fp)
 2011880:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 2011884:	e0bfff17 	ldw	r2,-4(fp)
 2011888:	10800017 	ldw	r2,0(r2)
 201188c:	10a0000c 	andi	r2,r2,32768
 2011890:	10000626 	beq	r2,zero,20118ac <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 2011894:	e0bfff17 	ldw	r2,-4(fp)
 2011898:	10800017 	ldw	r2,0(r2)
 201189c:	10bffff4 	orhi	r2,r2,65535
 20118a0:	1007883a 	mov	r3,r2
 20118a4:	e0bfff17 	ldw	r2,-4(fp)
 20118a8:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20118ac:	0005883a 	mov	r2,zero
}
 20118b0:	e037883a 	mov	sp,fp
 20118b4:	df000017 	ldw	fp,0(sp)
 20118b8:	dec00104 	addi	sp,sp,4
 20118bc:	f800283a 	ret

020118c0 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 20118c0:	defffd04 	addi	sp,sp,-12
 20118c4:	df000215 	stw	fp,8(sp)
 20118c8:	df000204 	addi	fp,sp,8
 20118cc:	e13ffe15 	stw	r4,-8(fp)
 20118d0:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20118d4:	e0bffe17 	ldw	r2,-8(fp)
 20118d8:	10800a17 	ldw	r2,40(r2)
 20118dc:	1007883a 	mov	r3,r2
 20118e0:	00800d84 	movi	r2,54
 20118e4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 20118e8:	e0bffe17 	ldw	r2,-8(fp)
 20118ec:	10800a17 	ldw	r2,40(r2)
 20118f0:	10800044 	addi	r2,r2,1
 20118f4:	10800023 	ldbuio	r2,0(r2)
 20118f8:	10803fcc 	andi	r2,r2,255
 20118fc:	10ffffcc 	andi	r3,r2,65535
 2011900:	e0bfff17 	ldw	r2,-4(fp)
 2011904:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2011908:	e0bffe17 	ldw	r2,-8(fp)
 201190c:	10800a17 	ldw	r2,40(r2)
 2011910:	1007883a 	mov	r3,r2
 2011914:	00800dc4 	movi	r2,55
 2011918:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 201191c:	e0bffe17 	ldw	r2,-8(fp)
 2011920:	10800a17 	ldw	r2,40(r2)
 2011924:	10800044 	addi	r2,r2,1
 2011928:	10800023 	ldbuio	r2,0(r2)
 201192c:	10803fcc 	andi	r2,r2,255
 2011930:	10bfffcc 	andi	r2,r2,65535
 2011934:	1004923a 	slli	r2,r2,8
 2011938:	e0ffff17 	ldw	r3,-4(fp)
 201193c:	18c00017 	ldw	r3,0(r3)
 2011940:	1885883a 	add	r2,r3,r2
 2011944:	1007883a 	mov	r3,r2
 2011948:	e0bfff17 	ldw	r2,-4(fp)
 201194c:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 2011950:	e0bfff17 	ldw	r2,-4(fp)
 2011954:	10800017 	ldw	r2,0(r2)
 2011958:	10a0000c 	andi	r2,r2,32768
 201195c:	10000626 	beq	r2,zero,2011978 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 2011960:	e0bfff17 	ldw	r2,-4(fp)
 2011964:	10800017 	ldw	r2,0(r2)
 2011968:	10bffff4 	orhi	r2,r2,65535
 201196c:	1007883a 	mov	r3,r2
 2011970:	e0bfff17 	ldw	r2,-4(fp)
 2011974:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 2011978:	0005883a 	mov	r2,zero
}
 201197c:	e037883a 	mov	sp,fp
 2011980:	df000017 	ldw	fp,0(sp)
 2011984:	dec00104 	addi	sp,sp,4
 2011988:	f800283a 	ret

0201198c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201198c:	defff504 	addi	sp,sp,-44
 2011990:	df000a15 	stw	fp,40(sp)
 2011994:	df000a04 	addi	fp,sp,40
 2011998:	e13ffc15 	stw	r4,-16(fp)
 201199c:	e17ffd15 	stw	r5,-12(fp)
 20119a0:	e1bffe15 	stw	r6,-8(fp)
 20119a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20119a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20119ac:	d0a6e417 	ldw	r2,-25712(gp)
  
  if (alt_ticks_per_second ())
 20119b0:	10003c26 	beq	r2,zero,2011aa4 <alt_alarm_start+0x118>
  {
    if (alarm)
 20119b4:	e0bffc17 	ldw	r2,-16(fp)
 20119b8:	10003826 	beq	r2,zero,2011a9c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 20119bc:	e0bffc17 	ldw	r2,-16(fp)
 20119c0:	e0fffe17 	ldw	r3,-8(fp)
 20119c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20119c8:	e0bffc17 	ldw	r2,-16(fp)
 20119cc:	e0ffff17 	ldw	r3,-4(fp)
 20119d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20119d4:	0005303a 	rdctl	r2,status
 20119d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20119dc:	e0fff917 	ldw	r3,-28(fp)
 20119e0:	00bfff84 	movi	r2,-2
 20119e4:	1884703a 	and	r2,r3,r2
 20119e8:	1001703a 	wrctl	status,r2
  
  return context;
 20119ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20119f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20119f4:	d0a6e517 	ldw	r2,-25708(gp)
      
      current_nticks = alt_nticks();
 20119f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20119fc:	e0fffd17 	ldw	r3,-12(fp)
 2011a00:	e0bff617 	ldw	r2,-40(fp)
 2011a04:	1885883a 	add	r2,r3,r2
 2011a08:	10c00044 	addi	r3,r2,1
 2011a0c:	e0bffc17 	ldw	r2,-16(fp)
 2011a10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2011a14:	e0bffc17 	ldw	r2,-16(fp)
 2011a18:	10c00217 	ldw	r3,8(r2)
 2011a1c:	e0bff617 	ldw	r2,-40(fp)
 2011a20:	1880042e 	bgeu	r3,r2,2011a34 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2011a24:	e0bffc17 	ldw	r2,-16(fp)
 2011a28:	00c00044 	movi	r3,1
 2011a2c:	10c00405 	stb	r3,16(r2)
 2011a30:	00000206 	br	2011a3c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2011a34:	e0bffc17 	ldw	r2,-16(fp)
 2011a38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2011a3c:	e0bffc17 	ldw	r2,-16(fp)
 2011a40:	d0e00e04 	addi	r3,gp,-32712
 2011a44:	e0fffa15 	stw	r3,-24(fp)
 2011a48:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2011a4c:	e0bffb17 	ldw	r2,-20(fp)
 2011a50:	e0fffa17 	ldw	r3,-24(fp)
 2011a54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2011a58:	e0bffa17 	ldw	r2,-24(fp)
 2011a5c:	10c00017 	ldw	r3,0(r2)
 2011a60:	e0bffb17 	ldw	r2,-20(fp)
 2011a64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2011a68:	e0bffa17 	ldw	r2,-24(fp)
 2011a6c:	10800017 	ldw	r2,0(r2)
 2011a70:	e0fffb17 	ldw	r3,-20(fp)
 2011a74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2011a78:	e0bffa17 	ldw	r2,-24(fp)
 2011a7c:	e0fffb17 	ldw	r3,-20(fp)
 2011a80:	10c00015 	stw	r3,0(r2)
 2011a84:	e0bff817 	ldw	r2,-32(fp)
 2011a88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011a8c:	e0bff717 	ldw	r2,-36(fp)
 2011a90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2011a94:	0005883a 	mov	r2,zero
 2011a98:	00000306 	br	2011aa8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2011a9c:	00bffa84 	movi	r2,-22
 2011aa0:	00000106 	br	2011aa8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2011aa4:	00bfde84 	movi	r2,-134
  }
}
 2011aa8:	e037883a 	mov	sp,fp
 2011aac:	df000017 	ldw	fp,0(sp)
 2011ab0:	dec00104 	addi	sp,sp,4
 2011ab4:	f800283a 	ret

02011ab8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2011ab8:	defffe04 	addi	sp,sp,-8
 2011abc:	df000115 	stw	fp,4(sp)
 2011ac0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2011ac4:	e03fff15 	stw	zero,-4(fp)
 2011ac8:	00000506 	br	2011ae0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 2011acc:	e0bfff17 	ldw	r2,-4(fp)
 2011ad0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2011ad4:	e0bfff17 	ldw	r2,-4(fp)
 2011ad8:	10800804 	addi	r2,r2,32
 2011adc:	e0bfff15 	stw	r2,-4(fp)
 2011ae0:	e0bfff17 	ldw	r2,-4(fp)
 2011ae4:	10820030 	cmpltui	r2,r2,2048
 2011ae8:	103ff81e 	bne	r2,zero,2011acc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2011aec:	0001883a 	nop
 2011af0:	e037883a 	mov	sp,fp
 2011af4:	df000017 	ldw	fp,0(sp)
 2011af8:	dec00104 	addi	sp,sp,4
 2011afc:	f800283a 	ret

02011b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011b00:	defffe04 	addi	sp,sp,-8
 2011b04:	dfc00115 	stw	ra,4(sp)
 2011b08:	df000015 	stw	fp,0(sp)
 2011b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011b10:	d0a00b17 	ldw	r2,-32724(gp)
 2011b14:	10000326 	beq	r2,zero,2011b24 <alt_get_errno+0x24>
 2011b18:	d0a00b17 	ldw	r2,-32724(gp)
 2011b1c:	103ee83a 	callr	r2
 2011b20:	00000106 	br	2011b28 <alt_get_errno+0x28>
 2011b24:	d0a6df04 	addi	r2,gp,-25732
}
 2011b28:	e037883a 	mov	sp,fp
 2011b2c:	dfc00117 	ldw	ra,4(sp)
 2011b30:	df000017 	ldw	fp,0(sp)
 2011b34:	dec00204 	addi	sp,sp,8
 2011b38:	f800283a 	ret

02011b3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2011b3c:	defffa04 	addi	sp,sp,-24
 2011b40:	dfc00515 	stw	ra,20(sp)
 2011b44:	df000415 	stw	fp,16(sp)
 2011b48:	df000404 	addi	fp,sp,16
 2011b4c:	e13ffe15 	stw	r4,-8(fp)
 2011b50:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2011b54:	e0bffe17 	ldw	r2,-8(fp)
 2011b58:	10000326 	beq	r2,zero,2011b68 <alt_dev_llist_insert+0x2c>
 2011b5c:	e0bffe17 	ldw	r2,-8(fp)
 2011b60:	10800217 	ldw	r2,8(r2)
 2011b64:	1000061e 	bne	r2,zero,2011b80 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2011b68:	2011b000 	call	2011b00 <alt_get_errno>
 2011b6c:	1007883a 	mov	r3,r2
 2011b70:	00800584 	movi	r2,22
 2011b74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2011b78:	00bffa84 	movi	r2,-22
 2011b7c:	00001306 	br	2011bcc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2011b80:	e0bffe17 	ldw	r2,-8(fp)
 2011b84:	e0ffff17 	ldw	r3,-4(fp)
 2011b88:	e0fffc15 	stw	r3,-16(fp)
 2011b8c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2011b90:	e0bffd17 	ldw	r2,-12(fp)
 2011b94:	e0fffc17 	ldw	r3,-16(fp)
 2011b98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2011b9c:	e0bffc17 	ldw	r2,-16(fp)
 2011ba0:	10c00017 	ldw	r3,0(r2)
 2011ba4:	e0bffd17 	ldw	r2,-12(fp)
 2011ba8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2011bac:	e0bffc17 	ldw	r2,-16(fp)
 2011bb0:	10800017 	ldw	r2,0(r2)
 2011bb4:	e0fffd17 	ldw	r3,-12(fp)
 2011bb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2011bbc:	e0bffc17 	ldw	r2,-16(fp)
 2011bc0:	e0fffd17 	ldw	r3,-12(fp)
 2011bc4:	10c00015 	stw	r3,0(r2)

  return 0;  
 2011bc8:	0005883a 	mov	r2,zero
}
 2011bcc:	e037883a 	mov	sp,fp
 2011bd0:	dfc00117 	ldw	ra,4(sp)
 2011bd4:	df000017 	ldw	fp,0(sp)
 2011bd8:	dec00204 	addi	sp,sp,8
 2011bdc:	f800283a 	ret

02011be0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2011be0:	defffd04 	addi	sp,sp,-12
 2011be4:	dfc00215 	stw	ra,8(sp)
 2011be8:	df000115 	stw	fp,4(sp)
 2011bec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2011bf0:	00808074 	movhi	r2,513
 2011bf4:	108b1704 	addi	r2,r2,11356
 2011bf8:	e0bfff15 	stw	r2,-4(fp)
 2011bfc:	00000606 	br	2011c18 <_do_ctors+0x38>
        (*ctor) (); 
 2011c00:	e0bfff17 	ldw	r2,-4(fp)
 2011c04:	10800017 	ldw	r2,0(r2)
 2011c08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2011c0c:	e0bfff17 	ldw	r2,-4(fp)
 2011c10:	10bfff04 	addi	r2,r2,-4
 2011c14:	e0bfff15 	stw	r2,-4(fp)
 2011c18:	e0ffff17 	ldw	r3,-4(fp)
 2011c1c:	00808074 	movhi	r2,513
 2011c20:	108b1804 	addi	r2,r2,11360
 2011c24:	18bff62e 	bgeu	r3,r2,2011c00 <_do_ctors+0x20>
        (*ctor) (); 
}
 2011c28:	0001883a 	nop
 2011c2c:	e037883a 	mov	sp,fp
 2011c30:	dfc00117 	ldw	ra,4(sp)
 2011c34:	df000017 	ldw	fp,0(sp)
 2011c38:	dec00204 	addi	sp,sp,8
 2011c3c:	f800283a 	ret

02011c40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2011c40:	defffd04 	addi	sp,sp,-12
 2011c44:	dfc00215 	stw	ra,8(sp)
 2011c48:	df000115 	stw	fp,4(sp)
 2011c4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2011c50:	00808074 	movhi	r2,513
 2011c54:	108b1704 	addi	r2,r2,11356
 2011c58:	e0bfff15 	stw	r2,-4(fp)
 2011c5c:	00000606 	br	2011c78 <_do_dtors+0x38>
        (*dtor) (); 
 2011c60:	e0bfff17 	ldw	r2,-4(fp)
 2011c64:	10800017 	ldw	r2,0(r2)
 2011c68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2011c6c:	e0bfff17 	ldw	r2,-4(fp)
 2011c70:	10bfff04 	addi	r2,r2,-4
 2011c74:	e0bfff15 	stw	r2,-4(fp)
 2011c78:	e0ffff17 	ldw	r3,-4(fp)
 2011c7c:	00808074 	movhi	r2,513
 2011c80:	108b1804 	addi	r2,r2,11360
 2011c84:	18bff62e 	bgeu	r3,r2,2011c60 <_do_dtors+0x20>
        (*dtor) (); 
}
 2011c88:	0001883a 	nop
 2011c8c:	e037883a 	mov	sp,fp
 2011c90:	dfc00117 	ldw	ra,4(sp)
 2011c94:	df000017 	ldw	fp,0(sp)
 2011c98:	dec00204 	addi	sp,sp,8
 2011c9c:	f800283a 	ret

02011ca0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2011ca0:	defffa04 	addi	sp,sp,-24
 2011ca4:	dfc00515 	stw	ra,20(sp)
 2011ca8:	df000415 	stw	fp,16(sp)
 2011cac:	df000404 	addi	fp,sp,16
 2011cb0:	e13ffe15 	stw	r4,-8(fp)
 2011cb4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2011cb8:	e0bfff17 	ldw	r2,-4(fp)
 2011cbc:	10800017 	ldw	r2,0(r2)
 2011cc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2011cc4:	e13ffe17 	ldw	r4,-8(fp)
 2011cc8:	20009380 	call	2000938 <strlen>
 2011ccc:	10800044 	addi	r2,r2,1
 2011cd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2011cd4:	00000d06 	br	2011d0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2011cd8:	e0bffc17 	ldw	r2,-16(fp)
 2011cdc:	10800217 	ldw	r2,8(r2)
 2011ce0:	e0fffd17 	ldw	r3,-12(fp)
 2011ce4:	180d883a 	mov	r6,r3
 2011ce8:	e17ffe17 	ldw	r5,-8(fp)
 2011cec:	1009883a 	mov	r4,r2
 2011cf0:	201279c0 	call	201279c <memcmp>
 2011cf4:	1000021e 	bne	r2,zero,2011d00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2011cf8:	e0bffc17 	ldw	r2,-16(fp)
 2011cfc:	00000706 	br	2011d1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2011d00:	e0bffc17 	ldw	r2,-16(fp)
 2011d04:	10800017 	ldw	r2,0(r2)
 2011d08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2011d0c:	e0fffc17 	ldw	r3,-16(fp)
 2011d10:	e0bfff17 	ldw	r2,-4(fp)
 2011d14:	18bff01e 	bne	r3,r2,2011cd8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2011d18:	0005883a 	mov	r2,zero
}
 2011d1c:	e037883a 	mov	sp,fp
 2011d20:	dfc00117 	ldw	ra,4(sp)
 2011d24:	df000017 	ldw	fp,0(sp)
 2011d28:	dec00204 	addi	sp,sp,8
 2011d2c:	f800283a 	ret

02011d30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2011d30:	defffe04 	addi	sp,sp,-8
 2011d34:	dfc00115 	stw	ra,4(sp)
 2011d38:	df000015 	stw	fp,0(sp)
 2011d3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2011d40:	01440004 	movi	r5,4096
 2011d44:	0009883a 	mov	r4,zero
 2011d48:	20125ec0 	call	20125ec <alt_icache_flush>
#endif
}
 2011d4c:	0001883a 	nop
 2011d50:	e037883a 	mov	sp,fp
 2011d54:	dfc00117 	ldw	ra,4(sp)
 2011d58:	df000017 	ldw	fp,0(sp)
 2011d5c:	dec00204 	addi	sp,sp,8
 2011d60:	f800283a 	ret

02011d64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2011d64:	defff904 	addi	sp,sp,-28
 2011d68:	dfc00615 	stw	ra,24(sp)
 2011d6c:	df000515 	stw	fp,20(sp)
 2011d70:	df000504 	addi	fp,sp,20
 2011d74:	e13ffc15 	stw	r4,-16(fp)
 2011d78:	e17ffd15 	stw	r5,-12(fp)
 2011d7c:	e1bffe15 	stw	r6,-8(fp)
 2011d80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2011d84:	e1bfff17 	ldw	r6,-4(fp)
 2011d88:	e17ffe17 	ldw	r5,-8(fp)
 2011d8c:	e13ffd17 	ldw	r4,-12(fp)
 2011d90:	20121240 	call	2012124 <open>
 2011d94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2011d98:	e0bffb17 	ldw	r2,-20(fp)
 2011d9c:	10001c16 	blt	r2,zero,2011e10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2011da0:	00808074 	movhi	r2,513
 2011da4:	108e4a04 	addi	r2,r2,14632
 2011da8:	e0fffb17 	ldw	r3,-20(fp)
 2011dac:	18c00324 	muli	r3,r3,12
 2011db0:	10c5883a 	add	r2,r2,r3
 2011db4:	10c00017 	ldw	r3,0(r2)
 2011db8:	e0bffc17 	ldw	r2,-16(fp)
 2011dbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2011dc0:	00808074 	movhi	r2,513
 2011dc4:	108e4a04 	addi	r2,r2,14632
 2011dc8:	e0fffb17 	ldw	r3,-20(fp)
 2011dcc:	18c00324 	muli	r3,r3,12
 2011dd0:	10c5883a 	add	r2,r2,r3
 2011dd4:	10800104 	addi	r2,r2,4
 2011dd8:	10c00017 	ldw	r3,0(r2)
 2011ddc:	e0bffc17 	ldw	r2,-16(fp)
 2011de0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2011de4:	00808074 	movhi	r2,513
 2011de8:	108e4a04 	addi	r2,r2,14632
 2011dec:	e0fffb17 	ldw	r3,-20(fp)
 2011df0:	18c00324 	muli	r3,r3,12
 2011df4:	10c5883a 	add	r2,r2,r3
 2011df8:	10800204 	addi	r2,r2,8
 2011dfc:	10c00017 	ldw	r3,0(r2)
 2011e00:	e0bffc17 	ldw	r2,-16(fp)
 2011e04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2011e08:	e13ffb17 	ldw	r4,-20(fp)
 2011e0c:	201076c0 	call	201076c <alt_release_fd>
  }
} 
 2011e10:	0001883a 	nop
 2011e14:	e037883a 	mov	sp,fp
 2011e18:	dfc00117 	ldw	ra,4(sp)
 2011e1c:	df000017 	ldw	fp,0(sp)
 2011e20:	dec00204 	addi	sp,sp,8
 2011e24:	f800283a 	ret

02011e28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2011e28:	defffb04 	addi	sp,sp,-20
 2011e2c:	dfc00415 	stw	ra,16(sp)
 2011e30:	df000315 	stw	fp,12(sp)
 2011e34:	df000304 	addi	fp,sp,12
 2011e38:	e13ffd15 	stw	r4,-12(fp)
 2011e3c:	e17ffe15 	stw	r5,-8(fp)
 2011e40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2011e44:	01c07fc4 	movi	r7,511
 2011e48:	01800044 	movi	r6,1
 2011e4c:	e17ffd17 	ldw	r5,-12(fp)
 2011e50:	01008074 	movhi	r4,513
 2011e54:	210e4d04 	addi	r4,r4,14644
 2011e58:	2011d640 	call	2011d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2011e5c:	01c07fc4 	movi	r7,511
 2011e60:	000d883a 	mov	r6,zero
 2011e64:	e17ffe17 	ldw	r5,-8(fp)
 2011e68:	01008074 	movhi	r4,513
 2011e6c:	210e4a04 	addi	r4,r4,14632
 2011e70:	2011d640 	call	2011d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2011e74:	01c07fc4 	movi	r7,511
 2011e78:	01800044 	movi	r6,1
 2011e7c:	e17fff17 	ldw	r5,-4(fp)
 2011e80:	01008074 	movhi	r4,513
 2011e84:	210e5004 	addi	r4,r4,14656
 2011e88:	2011d640 	call	2011d64 <alt_open_fd>
}  
 2011e8c:	0001883a 	nop
 2011e90:	e037883a 	mov	sp,fp
 2011e94:	dfc00117 	ldw	ra,4(sp)
 2011e98:	df000017 	ldw	fp,0(sp)
 2011e9c:	dec00204 	addi	sp,sp,8
 2011ea0:	f800283a 	ret

02011ea4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2011ea4:	defff004 	addi	sp,sp,-64
 2011ea8:	df000f15 	stw	fp,60(sp)
 2011eac:	df000f04 	addi	fp,sp,60
 2011eb0:	e13ffd15 	stw	r4,-12(fp)
 2011eb4:	e17ffe15 	stw	r5,-8(fp)
 2011eb8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2011ebc:	00bffa84 	movi	r2,-22
 2011ec0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2011ec4:	e0bffd17 	ldw	r2,-12(fp)
 2011ec8:	10800828 	cmpgeui	r2,r2,32
 2011ecc:	1000501e 	bne	r2,zero,2012010 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011ed0:	0005303a 	rdctl	r2,status
 2011ed4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011ed8:	e0fff617 	ldw	r3,-40(fp)
 2011edc:	00bfff84 	movi	r2,-2
 2011ee0:	1884703a 	and	r2,r3,r2
 2011ee4:	1001703a 	wrctl	status,r2
  
  return context;
 2011ee8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 2011eec:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 2011ef0:	00808074 	movhi	r2,513
 2011ef4:	1099bf04 	addi	r2,r2,26364
 2011ef8:	e0fffd17 	ldw	r3,-12(fp)
 2011efc:	180690fa 	slli	r3,r3,3
 2011f00:	10c5883a 	add	r2,r2,r3
 2011f04:	e0ffff17 	ldw	r3,-4(fp)
 2011f08:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 2011f0c:	00808074 	movhi	r2,513
 2011f10:	1099bf04 	addi	r2,r2,26364
 2011f14:	e0fffd17 	ldw	r3,-12(fp)
 2011f18:	180690fa 	slli	r3,r3,3
 2011f1c:	10c5883a 	add	r2,r2,r3
 2011f20:	10800104 	addi	r2,r2,4
 2011f24:	e0fffe17 	ldw	r3,-8(fp)
 2011f28:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 2011f2c:	e0bfff17 	ldw	r2,-4(fp)
 2011f30:	10001926 	beq	r2,zero,2011f98 <alt_irq_register+0xf4>
 2011f34:	e0bffd17 	ldw	r2,-12(fp)
 2011f38:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011f3c:	0005303a 	rdctl	r2,status
 2011f40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011f44:	e0fff717 	ldw	r3,-36(fp)
 2011f48:	00bfff84 	movi	r2,-2
 2011f4c:	1884703a 	and	r2,r3,r2
 2011f50:	1001703a 	wrctl	status,r2
  
  return context;
 2011f54:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2011f58:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2011f5c:	00c00044 	movi	r3,1
 2011f60:	e0bff217 	ldw	r2,-56(fp)
 2011f64:	1884983a 	sll	r2,r3,r2
 2011f68:	1007883a 	mov	r3,r2
 2011f6c:	d0a6e317 	ldw	r2,-25716(gp)
 2011f70:	1884b03a 	or	r2,r3,r2
 2011f74:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2011f78:	d0a6e317 	ldw	r2,-25716(gp)
 2011f7c:	100170fa 	wrctl	ienable,r2
 2011f80:	e0bff817 	ldw	r2,-32(fp)
 2011f84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011f88:	e0bff917 	ldw	r2,-28(fp)
 2011f8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2011f90:	0005883a 	mov	r2,zero
 2011f94:	00001906 	br	2011ffc <alt_irq_register+0x158>
 2011f98:	e0bffd17 	ldw	r2,-12(fp)
 2011f9c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011fa0:	0005303a 	rdctl	r2,status
 2011fa4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011fa8:	e0fffa17 	ldw	r3,-24(fp)
 2011fac:	00bfff84 	movi	r2,-2
 2011fb0:	1884703a 	and	r2,r3,r2
 2011fb4:	1001703a 	wrctl	status,r2
  
  return context;
 2011fb8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2011fbc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2011fc0:	00c00044 	movi	r3,1
 2011fc4:	e0bff417 	ldw	r2,-48(fp)
 2011fc8:	1884983a 	sll	r2,r3,r2
 2011fcc:	0084303a 	nor	r2,zero,r2
 2011fd0:	1007883a 	mov	r3,r2
 2011fd4:	d0a6e317 	ldw	r2,-25716(gp)
 2011fd8:	1884703a 	and	r2,r3,r2
 2011fdc:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2011fe0:	d0a6e317 	ldw	r2,-25716(gp)
 2011fe4:	100170fa 	wrctl	ienable,r2
 2011fe8:	e0bffb17 	ldw	r2,-20(fp)
 2011fec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011ff0:	e0bffc17 	ldw	r2,-16(fp)
 2011ff4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2011ff8:	0005883a 	mov	r2,zero
 2011ffc:	e0bff115 	stw	r2,-60(fp)
 2012000:	e0bff317 	ldw	r2,-52(fp)
 2012004:	e0bff515 	stw	r2,-44(fp)
 2012008:	e0bff517 	ldw	r2,-44(fp)
 201200c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 2012010:	e0bff117 	ldw	r2,-60(fp)
}
 2012014:	e037883a 	mov	sp,fp
 2012018:	df000017 	ldw	fp,0(sp)
 201201c:	dec00104 	addi	sp,sp,4
 2012020:	f800283a 	ret

02012024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012024:	defffe04 	addi	sp,sp,-8
 2012028:	dfc00115 	stw	ra,4(sp)
 201202c:	df000015 	stw	fp,0(sp)
 2012030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012034:	d0a00b17 	ldw	r2,-32724(gp)
 2012038:	10000326 	beq	r2,zero,2012048 <alt_get_errno+0x24>
 201203c:	d0a00b17 	ldw	r2,-32724(gp)
 2012040:	103ee83a 	callr	r2
 2012044:	00000106 	br	201204c <alt_get_errno+0x28>
 2012048:	d0a6df04 	addi	r2,gp,-25732
}
 201204c:	e037883a 	mov	sp,fp
 2012050:	dfc00117 	ldw	ra,4(sp)
 2012054:	df000017 	ldw	fp,0(sp)
 2012058:	dec00204 	addi	sp,sp,8
 201205c:	f800283a 	ret

02012060 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2012060:	defffd04 	addi	sp,sp,-12
 2012064:	df000215 	stw	fp,8(sp)
 2012068:	df000204 	addi	fp,sp,8
 201206c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2012070:	e0bfff17 	ldw	r2,-4(fp)
 2012074:	10800217 	ldw	r2,8(r2)
 2012078:	10d00034 	orhi	r3,r2,16384
 201207c:	e0bfff17 	ldw	r2,-4(fp)
 2012080:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2012084:	e03ffe15 	stw	zero,-8(fp)
 2012088:	00001d06 	br	2012100 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201208c:	00808074 	movhi	r2,513
 2012090:	108e4a04 	addi	r2,r2,14632
 2012094:	e0fffe17 	ldw	r3,-8(fp)
 2012098:	18c00324 	muli	r3,r3,12
 201209c:	10c5883a 	add	r2,r2,r3
 20120a0:	10c00017 	ldw	r3,0(r2)
 20120a4:	e0bfff17 	ldw	r2,-4(fp)
 20120a8:	10800017 	ldw	r2,0(r2)
 20120ac:	1880111e 	bne	r3,r2,20120f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20120b0:	00808074 	movhi	r2,513
 20120b4:	108e4a04 	addi	r2,r2,14632
 20120b8:	e0fffe17 	ldw	r3,-8(fp)
 20120bc:	18c00324 	muli	r3,r3,12
 20120c0:	10c5883a 	add	r2,r2,r3
 20120c4:	10800204 	addi	r2,r2,8
 20120c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20120cc:	1000090e 	bge	r2,zero,20120f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 20120d0:	e0bffe17 	ldw	r2,-8(fp)
 20120d4:	10c00324 	muli	r3,r2,12
 20120d8:	00808074 	movhi	r2,513
 20120dc:	108e4a04 	addi	r2,r2,14632
 20120e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20120e4:	e0bfff17 	ldw	r2,-4(fp)
 20120e8:	18800226 	beq	r3,r2,20120f4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20120ec:	00bffcc4 	movi	r2,-13
 20120f0:	00000806 	br	2012114 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20120f4:	e0bffe17 	ldw	r2,-8(fp)
 20120f8:	10800044 	addi	r2,r2,1
 20120fc:	e0bffe15 	stw	r2,-8(fp)
 2012100:	d0a00a17 	ldw	r2,-32728(gp)
 2012104:	1007883a 	mov	r3,r2
 2012108:	e0bffe17 	ldw	r2,-8(fp)
 201210c:	18bfdf2e 	bgeu	r3,r2,201208c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2012110:	0005883a 	mov	r2,zero
}
 2012114:	e037883a 	mov	sp,fp
 2012118:	df000017 	ldw	fp,0(sp)
 201211c:	dec00104 	addi	sp,sp,4
 2012120:	f800283a 	ret

02012124 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2012124:	defff604 	addi	sp,sp,-40
 2012128:	dfc00915 	stw	ra,36(sp)
 201212c:	df000815 	stw	fp,32(sp)
 2012130:	df000804 	addi	fp,sp,32
 2012134:	e13ffd15 	stw	r4,-12(fp)
 2012138:	e17ffe15 	stw	r5,-8(fp)
 201213c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2012140:	00bfffc4 	movi	r2,-1
 2012144:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2012148:	00bffb44 	movi	r2,-19
 201214c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2012150:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2012154:	d1600804 	addi	r5,gp,-32736
 2012158:	e13ffd17 	ldw	r4,-12(fp)
 201215c:	2011ca00 	call	2011ca0 <alt_find_dev>
 2012160:	e0bff815 	stw	r2,-32(fp)
 2012164:	e0bff817 	ldw	r2,-32(fp)
 2012168:	1000051e 	bne	r2,zero,2012180 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201216c:	e13ffd17 	ldw	r4,-12(fp)
 2012170:	20124400 	call	2012440 <alt_find_file>
 2012174:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2012178:	00800044 	movi	r2,1
 201217c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2012180:	e0bff817 	ldw	r2,-32(fp)
 2012184:	10002926 	beq	r2,zero,201222c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2012188:	e13ff817 	ldw	r4,-32(fp)
 201218c:	20125480 	call	2012548 <alt_get_fd>
 2012190:	e0bff915 	stw	r2,-28(fp)
 2012194:	e0bff917 	ldw	r2,-28(fp)
 2012198:	1000030e 	bge	r2,zero,20121a8 <open+0x84>
    {
      status = index;
 201219c:	e0bff917 	ldw	r2,-28(fp)
 20121a0:	e0bffa15 	stw	r2,-24(fp)
 20121a4:	00002306 	br	2012234 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 20121a8:	e0bff917 	ldw	r2,-28(fp)
 20121ac:	10c00324 	muli	r3,r2,12
 20121b0:	00808074 	movhi	r2,513
 20121b4:	108e4a04 	addi	r2,r2,14632
 20121b8:	1885883a 	add	r2,r3,r2
 20121bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 20121c0:	e0fffe17 	ldw	r3,-8(fp)
 20121c4:	00900034 	movhi	r2,16384
 20121c8:	10bfffc4 	addi	r2,r2,-1
 20121cc:	1886703a 	and	r3,r3,r2
 20121d0:	e0bffc17 	ldw	r2,-16(fp)
 20121d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 20121d8:	e0bffb17 	ldw	r2,-20(fp)
 20121dc:	1000051e 	bne	r2,zero,20121f4 <open+0xd0>
 20121e0:	e13ffc17 	ldw	r4,-16(fp)
 20121e4:	20120600 	call	2012060 <alt_file_locked>
 20121e8:	e0bffa15 	stw	r2,-24(fp)
 20121ec:	e0bffa17 	ldw	r2,-24(fp)
 20121f0:	10001016 	blt	r2,zero,2012234 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20121f4:	e0bff817 	ldw	r2,-32(fp)
 20121f8:	10800317 	ldw	r2,12(r2)
 20121fc:	10000826 	beq	r2,zero,2012220 <open+0xfc>
 2012200:	e0bff817 	ldw	r2,-32(fp)
 2012204:	10800317 	ldw	r2,12(r2)
 2012208:	e1ffff17 	ldw	r7,-4(fp)
 201220c:	e1bffe17 	ldw	r6,-8(fp)
 2012210:	e17ffd17 	ldw	r5,-12(fp)
 2012214:	e13ffc17 	ldw	r4,-16(fp)
 2012218:	103ee83a 	callr	r2
 201221c:	00000106 	br	2012224 <open+0x100>
 2012220:	0005883a 	mov	r2,zero
 2012224:	e0bffa15 	stw	r2,-24(fp)
 2012228:	00000206 	br	2012234 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201222c:	00bffb44 	movi	r2,-19
 2012230:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2012234:	e0bffa17 	ldw	r2,-24(fp)
 2012238:	1000090e 	bge	r2,zero,2012260 <open+0x13c>
  {
    alt_release_fd (index);  
 201223c:	e13ff917 	ldw	r4,-28(fp)
 2012240:	201076c0 	call	201076c <alt_release_fd>
    ALT_ERRNO = -status;
 2012244:	20120240 	call	2012024 <alt_get_errno>
 2012248:	1007883a 	mov	r3,r2
 201224c:	e0bffa17 	ldw	r2,-24(fp)
 2012250:	0085c83a 	sub	r2,zero,r2
 2012254:	18800015 	stw	r2,0(r3)
    return -1;
 2012258:	00bfffc4 	movi	r2,-1
 201225c:	00000106 	br	2012264 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2012260:	e0bff917 	ldw	r2,-28(fp)
}
 2012264:	e037883a 	mov	sp,fp
 2012268:	dfc00117 	ldw	ra,4(sp)
 201226c:	df000017 	ldw	fp,0(sp)
 2012270:	dec00204 	addi	sp,sp,8
 2012274:	f800283a 	ret

02012278 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2012278:	defffa04 	addi	sp,sp,-24
 201227c:	df000515 	stw	fp,20(sp)
 2012280:	df000504 	addi	fp,sp,20
 2012284:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012288:	0005303a 	rdctl	r2,status
 201228c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012290:	e0fffc17 	ldw	r3,-16(fp)
 2012294:	00bfff84 	movi	r2,-2
 2012298:	1884703a 	and	r2,r3,r2
 201229c:	1001703a 	wrctl	status,r2
  
  return context;
 20122a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20122a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20122a8:	e0bfff17 	ldw	r2,-4(fp)
 20122ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 20122b0:	e0bffd17 	ldw	r2,-12(fp)
 20122b4:	10800017 	ldw	r2,0(r2)
 20122b8:	e0fffd17 	ldw	r3,-12(fp)
 20122bc:	18c00117 	ldw	r3,4(r3)
 20122c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 20122c4:	e0bffd17 	ldw	r2,-12(fp)
 20122c8:	10800117 	ldw	r2,4(r2)
 20122cc:	e0fffd17 	ldw	r3,-12(fp)
 20122d0:	18c00017 	ldw	r3,0(r3)
 20122d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20122d8:	e0bffd17 	ldw	r2,-12(fp)
 20122dc:	e0fffd17 	ldw	r3,-12(fp)
 20122e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20122e4:	e0bffd17 	ldw	r2,-12(fp)
 20122e8:	e0fffd17 	ldw	r3,-12(fp)
 20122ec:	10c00015 	stw	r3,0(r2)
 20122f0:	e0bffb17 	ldw	r2,-20(fp)
 20122f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20122f8:	e0bffe17 	ldw	r2,-8(fp)
 20122fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2012300:	0001883a 	nop
 2012304:	e037883a 	mov	sp,fp
 2012308:	df000017 	ldw	fp,0(sp)
 201230c:	dec00104 	addi	sp,sp,4
 2012310:	f800283a 	ret

02012314 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2012314:	defffb04 	addi	sp,sp,-20
 2012318:	dfc00415 	stw	ra,16(sp)
 201231c:	df000315 	stw	fp,12(sp)
 2012320:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2012324:	d0a00e17 	ldw	r2,-32712(gp)
 2012328:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201232c:	d0a6e517 	ldw	r2,-25708(gp)
 2012330:	10800044 	addi	r2,r2,1
 2012334:	d0a6e515 	stw	r2,-25708(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2012338:	00002e06 	br	20123f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201233c:	e0bffd17 	ldw	r2,-12(fp)
 2012340:	10800017 	ldw	r2,0(r2)
 2012344:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2012348:	e0bffd17 	ldw	r2,-12(fp)
 201234c:	10800403 	ldbu	r2,16(r2)
 2012350:	10803fcc 	andi	r2,r2,255
 2012354:	10000426 	beq	r2,zero,2012368 <alt_tick+0x54>
 2012358:	d0a6e517 	ldw	r2,-25708(gp)
 201235c:	1000021e 	bne	r2,zero,2012368 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2012360:	e0bffd17 	ldw	r2,-12(fp)
 2012364:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2012368:	e0bffd17 	ldw	r2,-12(fp)
 201236c:	10800217 	ldw	r2,8(r2)
 2012370:	d0e6e517 	ldw	r3,-25708(gp)
 2012374:	18801d36 	bltu	r3,r2,20123ec <alt_tick+0xd8>
 2012378:	e0bffd17 	ldw	r2,-12(fp)
 201237c:	10800403 	ldbu	r2,16(r2)
 2012380:	10803fcc 	andi	r2,r2,255
 2012384:	1000191e 	bne	r2,zero,20123ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2012388:	e0bffd17 	ldw	r2,-12(fp)
 201238c:	10800317 	ldw	r2,12(r2)
 2012390:	e0fffd17 	ldw	r3,-12(fp)
 2012394:	18c00517 	ldw	r3,20(r3)
 2012398:	1809883a 	mov	r4,r3
 201239c:	103ee83a 	callr	r2
 20123a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20123a4:	e0bfff17 	ldw	r2,-4(fp)
 20123a8:	1000031e 	bne	r2,zero,20123b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20123ac:	e13ffd17 	ldw	r4,-12(fp)
 20123b0:	20122780 	call	2012278 <alt_alarm_stop>
 20123b4:	00000d06 	br	20123ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 20123b8:	e0bffd17 	ldw	r2,-12(fp)
 20123bc:	10c00217 	ldw	r3,8(r2)
 20123c0:	e0bfff17 	ldw	r2,-4(fp)
 20123c4:	1887883a 	add	r3,r3,r2
 20123c8:	e0bffd17 	ldw	r2,-12(fp)
 20123cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20123d0:	e0bffd17 	ldw	r2,-12(fp)
 20123d4:	10c00217 	ldw	r3,8(r2)
 20123d8:	d0a6e517 	ldw	r2,-25708(gp)
 20123dc:	1880032e 	bgeu	r3,r2,20123ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20123e0:	e0bffd17 	ldw	r2,-12(fp)
 20123e4:	00c00044 	movi	r3,1
 20123e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20123ec:	e0bffe17 	ldw	r2,-8(fp)
 20123f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20123f4:	e0fffd17 	ldw	r3,-12(fp)
 20123f8:	d0a00e04 	addi	r2,gp,-32712
 20123fc:	18bfcf1e 	bne	r3,r2,201233c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2012400:	0001883a 	nop
}
 2012404:	0001883a 	nop
 2012408:	e037883a 	mov	sp,fp
 201240c:	dfc00117 	ldw	ra,4(sp)
 2012410:	df000017 	ldw	fp,0(sp)
 2012414:	dec00204 	addi	sp,sp,8
 2012418:	f800283a 	ret

0201241c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201241c:	deffff04 	addi	sp,sp,-4
 2012420:	df000015 	stw	fp,0(sp)
 2012424:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2012428:	000170fa 	wrctl	ienable,zero
}
 201242c:	0001883a 	nop
 2012430:	e037883a 	mov	sp,fp
 2012434:	df000017 	ldw	fp,0(sp)
 2012438:	dec00104 	addi	sp,sp,4
 201243c:	f800283a 	ret

02012440 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2012440:	defffb04 	addi	sp,sp,-20
 2012444:	dfc00415 	stw	ra,16(sp)
 2012448:	df000315 	stw	fp,12(sp)
 201244c:	df000304 	addi	fp,sp,12
 2012450:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2012454:	d0a00617 	ldw	r2,-32744(gp)
 2012458:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201245c:	00003106 	br	2012524 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2012460:	e0bffd17 	ldw	r2,-12(fp)
 2012464:	10800217 	ldw	r2,8(r2)
 2012468:	1009883a 	mov	r4,r2
 201246c:	20009380 	call	2000938 <strlen>
 2012470:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2012474:	e0bffd17 	ldw	r2,-12(fp)
 2012478:	10c00217 	ldw	r3,8(r2)
 201247c:	e0bffe17 	ldw	r2,-8(fp)
 2012480:	10bfffc4 	addi	r2,r2,-1
 2012484:	1885883a 	add	r2,r3,r2
 2012488:	10800003 	ldbu	r2,0(r2)
 201248c:	10803fcc 	andi	r2,r2,255
 2012490:	1080201c 	xori	r2,r2,128
 2012494:	10bfe004 	addi	r2,r2,-128
 2012498:	10800bd8 	cmpnei	r2,r2,47
 201249c:	1000031e 	bne	r2,zero,20124ac <alt_find_file+0x6c>
    {
      len -= 1;
 20124a0:	e0bffe17 	ldw	r2,-8(fp)
 20124a4:	10bfffc4 	addi	r2,r2,-1
 20124a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20124ac:	e0bffe17 	ldw	r2,-8(fp)
 20124b0:	e0ffff17 	ldw	r3,-4(fp)
 20124b4:	1885883a 	add	r2,r3,r2
 20124b8:	10800003 	ldbu	r2,0(r2)
 20124bc:	10803fcc 	andi	r2,r2,255
 20124c0:	1080201c 	xori	r2,r2,128
 20124c4:	10bfe004 	addi	r2,r2,-128
 20124c8:	10800be0 	cmpeqi	r2,r2,47
 20124cc:	1000081e 	bne	r2,zero,20124f0 <alt_find_file+0xb0>
 20124d0:	e0bffe17 	ldw	r2,-8(fp)
 20124d4:	e0ffff17 	ldw	r3,-4(fp)
 20124d8:	1885883a 	add	r2,r3,r2
 20124dc:	10800003 	ldbu	r2,0(r2)
 20124e0:	10803fcc 	andi	r2,r2,255
 20124e4:	1080201c 	xori	r2,r2,128
 20124e8:	10bfe004 	addi	r2,r2,-128
 20124ec:	10000a1e 	bne	r2,zero,2012518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 20124f0:	e0bffd17 	ldw	r2,-12(fp)
 20124f4:	10800217 	ldw	r2,8(r2)
 20124f8:	e0fffe17 	ldw	r3,-8(fp)
 20124fc:	180d883a 	mov	r6,r3
 2012500:	e17fff17 	ldw	r5,-4(fp)
 2012504:	1009883a 	mov	r4,r2
 2012508:	201279c0 	call	201279c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201250c:	1000021e 	bne	r2,zero,2012518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2012510:	e0bffd17 	ldw	r2,-12(fp)
 2012514:	00000706 	br	2012534 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2012518:	e0bffd17 	ldw	r2,-12(fp)
 201251c:	10800017 	ldw	r2,0(r2)
 2012520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2012524:	e0fffd17 	ldw	r3,-12(fp)
 2012528:	d0a00604 	addi	r2,gp,-32744
 201252c:	18bfcc1e 	bne	r3,r2,2012460 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2012530:	0005883a 	mov	r2,zero
}
 2012534:	e037883a 	mov	sp,fp
 2012538:	dfc00117 	ldw	ra,4(sp)
 201253c:	df000017 	ldw	fp,0(sp)
 2012540:	dec00204 	addi	sp,sp,8
 2012544:	f800283a 	ret

02012548 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2012548:	defffc04 	addi	sp,sp,-16
 201254c:	df000315 	stw	fp,12(sp)
 2012550:	df000304 	addi	fp,sp,12
 2012554:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2012558:	00bffa04 	movi	r2,-24
 201255c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2012560:	e03ffd15 	stw	zero,-12(fp)
 2012564:	00001906 	br	20125cc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 2012568:	00808074 	movhi	r2,513
 201256c:	108e4a04 	addi	r2,r2,14632
 2012570:	e0fffd17 	ldw	r3,-12(fp)
 2012574:	18c00324 	muli	r3,r3,12
 2012578:	10c5883a 	add	r2,r2,r3
 201257c:	10800017 	ldw	r2,0(r2)
 2012580:	10000f1e 	bne	r2,zero,20125c0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 2012584:	00808074 	movhi	r2,513
 2012588:	108e4a04 	addi	r2,r2,14632
 201258c:	e0fffd17 	ldw	r3,-12(fp)
 2012590:	18c00324 	muli	r3,r3,12
 2012594:	10c5883a 	add	r2,r2,r3
 2012598:	e0ffff17 	ldw	r3,-4(fp)
 201259c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20125a0:	d0e00a17 	ldw	r3,-32728(gp)
 20125a4:	e0bffd17 	ldw	r2,-12(fp)
 20125a8:	1880020e 	bge	r3,r2,20125b4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 20125ac:	e0bffd17 	ldw	r2,-12(fp)
 20125b0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 20125b4:	e0bffd17 	ldw	r2,-12(fp)
 20125b8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 20125bc:	00000606 	br	20125d8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20125c0:	e0bffd17 	ldw	r2,-12(fp)
 20125c4:	10800044 	addi	r2,r2,1
 20125c8:	e0bffd15 	stw	r2,-12(fp)
 20125cc:	e0bffd17 	ldw	r2,-12(fp)
 20125d0:	10800810 	cmplti	r2,r2,32
 20125d4:	103fe41e 	bne	r2,zero,2012568 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20125d8:	e0bffe17 	ldw	r2,-8(fp)
}
 20125dc:	e037883a 	mov	sp,fp
 20125e0:	df000017 	ldw	fp,0(sp)
 20125e4:	dec00104 	addi	sp,sp,4
 20125e8:	f800283a 	ret

020125ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 20125ec:	defffb04 	addi	sp,sp,-20
 20125f0:	df000415 	stw	fp,16(sp)
 20125f4:	df000404 	addi	fp,sp,16
 20125f8:	e13ffe15 	stw	r4,-8(fp)
 20125fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2012600:	e0bfff17 	ldw	r2,-4(fp)
 2012604:	10840070 	cmpltui	r2,r2,4097
 2012608:	1000021e 	bne	r2,zero,2012614 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 201260c:	00840004 	movi	r2,4096
 2012610:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2012614:	e0fffe17 	ldw	r3,-8(fp)
 2012618:	e0bfff17 	ldw	r2,-4(fp)
 201261c:	1885883a 	add	r2,r3,r2
 2012620:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2012624:	e0bffe17 	ldw	r2,-8(fp)
 2012628:	e0bffc15 	stw	r2,-16(fp)
 201262c:	00000506 	br	2012644 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2012630:	e0bffc17 	ldw	r2,-16(fp)
 2012634:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2012638:	e0bffc17 	ldw	r2,-16(fp)
 201263c:	10800804 	addi	r2,r2,32
 2012640:	e0bffc15 	stw	r2,-16(fp)
 2012644:	e0fffc17 	ldw	r3,-16(fp)
 2012648:	e0bffd17 	ldw	r2,-12(fp)
 201264c:	18bff836 	bltu	r3,r2,2012630 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2012650:	e0bffe17 	ldw	r2,-8(fp)
 2012654:	108007cc 	andi	r2,r2,31
 2012658:	10000226 	beq	r2,zero,2012664 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 201265c:	e0bffc17 	ldw	r2,-16(fp)
 2012660:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2012664:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2012668:	0001883a 	nop
 201266c:	e037883a 	mov	sp,fp
 2012670:	df000017 	ldw	fp,0(sp)
 2012674:	dec00104 	addi	sp,sp,4
 2012678:	f800283a 	ret

0201267c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201267c:	defffe04 	addi	sp,sp,-8
 2012680:	df000115 	stw	fp,4(sp)
 2012684:	df000104 	addi	fp,sp,4
 2012688:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201268c:	e0bfff17 	ldw	r2,-4(fp)
 2012690:	10bffe84 	addi	r2,r2,-6
 2012694:	10c00428 	cmpgeui	r3,r2,16
 2012698:	18001a1e 	bne	r3,zero,2012704 <alt_exception_cause_generated_bad_addr+0x88>
 201269c:	100690ba 	slli	r3,r2,2
 20126a0:	00808074 	movhi	r2,513
 20126a4:	1089ad04 	addi	r2,r2,9908
 20126a8:	1885883a 	add	r2,r3,r2
 20126ac:	10800017 	ldw	r2,0(r2)
 20126b0:	1000683a 	jmp	r2
 20126b4:	020126f4 	movhi	r8,1179
 20126b8:	020126f4 	movhi	r8,1179
 20126bc:	02012704 	movi	r8,1180
 20126c0:	02012704 	movi	r8,1180
 20126c4:	02012704 	movi	r8,1180
 20126c8:	020126f4 	movhi	r8,1179
 20126cc:	020126fc 	xorhi	r8,zero,1179
 20126d0:	02012704 	movi	r8,1180
 20126d4:	020126f4 	movhi	r8,1179
 20126d8:	020126f4 	movhi	r8,1179
 20126dc:	02012704 	movi	r8,1180
 20126e0:	020126f4 	movhi	r8,1179
 20126e4:	020126fc 	xorhi	r8,zero,1179
 20126e8:	02012704 	movi	r8,1180
 20126ec:	02012704 	movi	r8,1180
 20126f0:	020126f4 	movhi	r8,1179
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 20126f4:	00800044 	movi	r2,1
 20126f8:	00000306 	br	2012708 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 20126fc:	0005883a 	mov	r2,zero
 2012700:	00000106 	br	2012708 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2012704:	0005883a 	mov	r2,zero
  }
}
 2012708:	e037883a 	mov	sp,fp
 201270c:	df000017 	ldw	fp,0(sp)
 2012710:	dec00104 	addi	sp,sp,4
 2012714:	f800283a 	ret

02012718 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 2012718:	defffd04 	addi	sp,sp,-12
 201271c:	dfc00215 	stw	ra,8(sp)
 2012720:	df000115 	stw	fp,4(sp)
 2012724:	df000104 	addi	fp,sp,4
 2012728:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 201272c:	000f883a 	mov	r7,zero
 2012730:	000d883a 	mov	r6,zero
 2012734:	e17fff17 	ldw	r5,-4(fp)
 2012738:	0009883a 	mov	r4,zero
 201273c:	20128d00 	call	20128d0 <__register_exitproc>
}
 2012740:	e037883a 	mov	sp,fp
 2012744:	dfc00117 	ldw	ra,4(sp)
 2012748:	df000017 	ldw	fp,0(sp)
 201274c:	dec00204 	addi	sp,sp,8
 2012750:	f800283a 	ret

02012754 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 2012754:	defffd04 	addi	sp,sp,-12
 2012758:	dfc00215 	stw	ra,8(sp)
 201275c:	df000115 	stw	fp,4(sp)
 2012760:	df000104 	addi	fp,sp,4
 2012764:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 2012768:	000b883a 	mov	r5,zero
 201276c:	e13fff17 	ldw	r4,-4(fp)
 2012770:	2012a400 	call	2012a40 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 2012774:	d0a00117 	ldw	r2,-32764(gp)
 2012778:	10800f17 	ldw	r2,60(r2)
 201277c:	10000526 	beq	r2,zero,2012794 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 2012780:	d0a00117 	ldw	r2,-32764(gp)
 2012784:	10800f17 	ldw	r2,60(r2)
 2012788:	d0e00117 	ldw	r3,-32764(gp)
 201278c:	1809883a 	mov	r4,r3
 2012790:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 2012794:	e13fff17 	ldw	r4,-4(fp)
 2012798:	2012c2c0 	call	2012c2c <_exit>

0201279c <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 201279c:	defff804 	addi	sp,sp,-32
 20127a0:	df000715 	stw	fp,28(sp)
 20127a4:	df000704 	addi	fp,sp,28
 20127a8:	e13ffd15 	stw	r4,-12(fp)
 20127ac:	e17ffe15 	stw	r5,-8(fp)
 20127b0:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 20127b4:	e0bffd17 	ldw	r2,-12(fp)
 20127b8:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 20127bc:	e0bffe17 	ldw	r2,-8(fp)
 20127c0:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 20127c4:	e0bfff17 	ldw	r2,-4(fp)
 20127c8:	10800130 	cmpltui	r2,r2,4
 20127cc:	1000371e 	bne	r2,zero,20128ac <memcmp+0x110>
 20127d0:	e0fff917 	ldw	r3,-28(fp)
 20127d4:	e0bffa17 	ldw	r2,-24(fp)
 20127d8:	1884b03a 	or	r2,r3,r2
 20127dc:	108000cc 	andi	r2,r2,3
 20127e0:	1000321e 	bne	r2,zero,20128ac <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 20127e4:	e0bff917 	ldw	r2,-28(fp)
 20127e8:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 20127ec:	e0bffa17 	ldw	r2,-24(fp)
 20127f0:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 20127f4:	00000e06 	br	2012830 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 20127f8:	e0bffb17 	ldw	r2,-20(fp)
 20127fc:	10c00017 	ldw	r3,0(r2)
 2012800:	e0bffc17 	ldw	r2,-16(fp)
 2012804:	10800017 	ldw	r2,0(r2)
 2012808:	18800d1e 	bne	r3,r2,2012840 <memcmp+0xa4>
   	    break;
          a1++;
 201280c:	e0bffb17 	ldw	r2,-20(fp)
 2012810:	10800104 	addi	r2,r2,4
 2012814:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 2012818:	e0bffc17 	ldw	r2,-16(fp)
 201281c:	10800104 	addi	r2,r2,4
 2012820:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 2012824:	e0bfff17 	ldw	r2,-4(fp)
 2012828:	10bfff04 	addi	r2,r2,-4
 201282c:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 2012830:	e0bfff17 	ldw	r2,-4(fp)
 2012834:	10800128 	cmpgeui	r2,r2,4
 2012838:	103fef1e 	bne	r2,zero,20127f8 <memcmp+0x5c>
 201283c:	00000106 	br	2012844 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 2012840:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 2012844:	e0bffb17 	ldw	r2,-20(fp)
 2012848:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 201284c:	e0bffc17 	ldw	r2,-16(fp)
 2012850:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 2012854:	00001506 	br	20128ac <memcmp+0x110>
    {
      if (*s1 != *s2)
 2012858:	e0bff917 	ldw	r2,-28(fp)
 201285c:	10c00003 	ldbu	r3,0(r2)
 2012860:	e0bffa17 	ldw	r2,-24(fp)
 2012864:	10800003 	ldbu	r2,0(r2)
 2012868:	18c03fcc 	andi	r3,r3,255
 201286c:	10803fcc 	andi	r2,r2,255
 2012870:	18800826 	beq	r3,r2,2012894 <memcmp+0xf8>
	return *s1 - *s2;
 2012874:	e0bff917 	ldw	r2,-28(fp)
 2012878:	10800003 	ldbu	r2,0(r2)
 201287c:	10c03fcc 	andi	r3,r2,255
 2012880:	e0bffa17 	ldw	r2,-24(fp)
 2012884:	10800003 	ldbu	r2,0(r2)
 2012888:	10803fcc 	andi	r2,r2,255
 201288c:	1885c83a 	sub	r2,r3,r2
 2012890:	00000b06 	br	20128c0 <memcmp+0x124>
      s1++;
 2012894:	e0bff917 	ldw	r2,-28(fp)
 2012898:	10800044 	addi	r2,r2,1
 201289c:	e0bff915 	stw	r2,-28(fp)
      s2++;
 20128a0:	e0bffa17 	ldw	r2,-24(fp)
 20128a4:	10800044 	addi	r2,r2,1
 20128a8:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 20128ac:	e0bfff17 	ldw	r2,-4(fp)
 20128b0:	10ffffc4 	addi	r3,r2,-1
 20128b4:	e0ffff15 	stw	r3,-4(fp)
 20128b8:	103fe71e 	bne	r2,zero,2012858 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 20128bc:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 20128c0:	e037883a 	mov	sp,fp
 20128c4:	df000017 	ldw	fp,0(sp)
 20128c8:	dec00104 	addi	sp,sp,4
 20128cc:	f800283a 	ret

020128d0 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 20128d0:	defff804 	addi	sp,sp,-32
 20128d4:	dfc00715 	stw	ra,28(sp)
 20128d8:	df000615 	stw	fp,24(sp)
 20128dc:	dc000515 	stw	r16,20(sp)
 20128e0:	df000604 	addi	fp,sp,24
 20128e4:	e13ffb15 	stw	r4,-20(fp)
 20128e8:	e17ffc15 	stw	r5,-16(fp)
 20128ec:	e1bffd15 	stw	r6,-12(fp)
 20128f0:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 20128f4:	d0a00117 	ldw	r2,-32764(gp)
 20128f8:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 20128fc:	8000041e 	bne	r16,zero,2012910 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 2012900:	d0a00117 	ldw	r2,-32764(gp)
 2012904:	d0e00117 	ldw	r3,-32764(gp)
 2012908:	1c005304 	addi	r16,r3,332
 201290c:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 2012910:	80800117 	ldw	r2,4(r16)
 2012914:	10800810 	cmplti	r2,r2,32
 2012918:	1000131e 	bne	r2,zero,2012968 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 201291c:	00800034 	movhi	r2,0
 2012920:	10800004 	addi	r2,r2,0
 2012924:	1000021e 	bne	r2,zero,2012930 <__register_exitproc+0x60>
	return -1;
 2012928:	00bfffc4 	movi	r2,-1
 201292c:	00003e06 	br	2012a28 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 2012930:	01006404 	movi	r4,400
 2012934:	00000000 	call	0 <__alt_mem_mem_Nios_PI-0x200000>
 2012938:	1021883a 	mov	r16,r2
      if (p == NULL)
 201293c:	8000021e 	bne	r16,zero,2012948 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 2012940:	00bfffc4 	movi	r2,-1
 2012944:	00003806 	br	2012a28 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 2012948:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 201294c:	d0a00117 	ldw	r2,-32764(gp)
 2012950:	10805217 	ldw	r2,328(r2)
 2012954:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 2012958:	d0a00117 	ldw	r2,-32764(gp)
 201295c:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 2012960:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 2012964:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 2012968:	e0bffb17 	ldw	r2,-20(fp)
 201296c:	10002426 	beq	r2,zero,2012a00 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 2012970:	80802204 	addi	r2,r16,136
 2012974:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 2012978:	80800117 	ldw	r2,4(r16)
 201297c:	e0fffa17 	ldw	r3,-24(fp)
 2012980:	1085883a 	add	r2,r2,r2
 2012984:	1085883a 	add	r2,r2,r2
 2012988:	1885883a 	add	r2,r3,r2
 201298c:	e0fffd17 	ldw	r3,-12(fp)
 2012990:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 2012994:	e0bffa17 	ldw	r2,-24(fp)
 2012998:	10804017 	ldw	r2,256(r2)
 201299c:	80c00117 	ldw	r3,4(r16)
 20129a0:	01000044 	movi	r4,1
 20129a4:	20c6983a 	sll	r3,r4,r3
 20129a8:	10c6b03a 	or	r3,r2,r3
 20129ac:	e0bffa17 	ldw	r2,-24(fp)
 20129b0:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 20129b4:	80800117 	ldw	r2,4(r16)
 20129b8:	e0fffa17 	ldw	r3,-24(fp)
 20129bc:	10800804 	addi	r2,r2,32
 20129c0:	1085883a 	add	r2,r2,r2
 20129c4:	1085883a 	add	r2,r2,r2
 20129c8:	1885883a 	add	r2,r3,r2
 20129cc:	e0fffe17 	ldw	r3,-8(fp)
 20129d0:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 20129d4:	e0bffb17 	ldw	r2,-20(fp)
 20129d8:	10800098 	cmpnei	r2,r2,2
 20129dc:	1000081e 	bne	r2,zero,2012a00 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 20129e0:	e0bffa17 	ldw	r2,-24(fp)
 20129e4:	10804117 	ldw	r2,260(r2)
 20129e8:	80c00117 	ldw	r3,4(r16)
 20129ec:	01000044 	movi	r4,1
 20129f0:	20c6983a 	sll	r3,r4,r3
 20129f4:	10c6b03a 	or	r3,r2,r3
 20129f8:	e0bffa17 	ldw	r2,-24(fp)
 20129fc:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 2012a00:	80800117 	ldw	r2,4(r16)
 2012a04:	10c00044 	addi	r3,r2,1
 2012a08:	80c00115 	stw	r3,4(r16)
 2012a0c:	10800084 	addi	r2,r2,2
 2012a10:	1085883a 	add	r2,r2,r2
 2012a14:	1085883a 	add	r2,r2,r2
 2012a18:	8085883a 	add	r2,r16,r2
 2012a1c:	e0fffc17 	ldw	r3,-16(fp)
 2012a20:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 2012a24:	0005883a 	mov	r2,zero
}
 2012a28:	e6ffff04 	addi	sp,fp,-4
 2012a2c:	dfc00217 	ldw	ra,8(sp)
 2012a30:	df000117 	ldw	fp,4(sp)
 2012a34:	dc000017 	ldw	r16,0(sp)
 2012a38:	dec00304 	addi	sp,sp,12
 2012a3c:	f800283a 	ret

02012a40 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 2012a40:	defff504 	addi	sp,sp,-44
 2012a44:	dfc00a15 	stw	ra,40(sp)
 2012a48:	df000915 	stw	fp,36(sp)
 2012a4c:	dc800815 	stw	r18,32(sp)
 2012a50:	dc400715 	stw	r17,28(sp)
 2012a54:	dc000615 	stw	r16,24(sp)
 2012a58:	df000904 	addi	fp,sp,36
 2012a5c:	e13ffb15 	stw	r4,-20(fp)
 2012a60:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 2012a64:	d0a00117 	ldw	r2,-32764(gp)
 2012a68:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 2012a6c:	d0a00117 	ldw	r2,-32764(gp)
 2012a70:	10805204 	addi	r2,r2,328
 2012a74:	e0bff715 	stw	r2,-36(fp)
  while (p)
 2012a78:	00006006 	br	2012bfc <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 2012a7c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2012a80:	80800117 	ldw	r2,4(r16)
 2012a84:	147fffc4 	addi	r17,r2,-1
 2012a88:	00004a06 	br	2012bb4 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 2012a8c:	00800044 	movi	r2,1
 2012a90:	1444983a 	sll	r2,r2,r17
 2012a94:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 2012a98:	e0bffc17 	ldw	r2,-16(fp)
 2012a9c:	10000826 	beq	r2,zero,2012ac0 <__call_exitprocs+0x80>
 2012aa0:	90004026 	beq	r18,zero,2012ba4 <__call_exitprocs+0x164>
 2012aa4:	88800804 	addi	r2,r17,32
 2012aa8:	1085883a 	add	r2,r2,r2
 2012aac:	1085883a 	add	r2,r2,r2
 2012ab0:	9085883a 	add	r2,r18,r2
 2012ab4:	10c00017 	ldw	r3,0(r2)
 2012ab8:	e0bffc17 	ldw	r2,-16(fp)
 2012abc:	1880391e 	bne	r3,r2,2012ba4 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 2012ac0:	88800084 	addi	r2,r17,2
 2012ac4:	1085883a 	add	r2,r2,r2
 2012ac8:	1085883a 	add	r2,r2,r2
 2012acc:	8085883a 	add	r2,r16,r2
 2012ad0:	10800017 	ldw	r2,0(r2)
 2012ad4:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 2012ad8:	80800117 	ldw	r2,4(r16)
 2012adc:	10bfffc4 	addi	r2,r2,-1
 2012ae0:	1440041e 	bne	r2,r17,2012af4 <__call_exitprocs+0xb4>
	    p->_ind--;
 2012ae4:	80800117 	ldw	r2,4(r16)
 2012ae8:	10bfffc4 	addi	r2,r2,-1
 2012aec:	80800115 	stw	r2,4(r16)
 2012af0:	00000506 	br	2012b08 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 2012af4:	88800084 	addi	r2,r17,2
 2012af8:	1085883a 	add	r2,r2,r2
 2012afc:	1085883a 	add	r2,r2,r2
 2012b00:	8085883a 	add	r2,r16,r2
 2012b04:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 2012b08:	e0bff917 	ldw	r2,-28(fp)
 2012b0c:	10002726 	beq	r2,zero,2012bac <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 2012b10:	80800117 	ldw	r2,4(r16)
 2012b14:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 2012b18:	90000426 	beq	r18,zero,2012b2c <__call_exitprocs+0xec>
 2012b1c:	90c04017 	ldw	r3,256(r18)
 2012b20:	e0bff817 	ldw	r2,-32(fp)
 2012b24:	1884703a 	and	r2,r3,r2
 2012b28:	1000031e 	bne	r2,zero,2012b38 <__call_exitprocs+0xf8>
	    fn ();
 2012b2c:	e0bff917 	ldw	r2,-28(fp)
 2012b30:	103ee83a 	callr	r2
 2012b34:	00001406 	br	2012b88 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 2012b38:	90c04117 	ldw	r3,260(r18)
 2012b3c:	e0bff817 	ldw	r2,-32(fp)
 2012b40:	1884703a 	and	r2,r3,r2
 2012b44:	1000091e 	bne	r2,zero,2012b6c <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 2012b48:	8c45883a 	add	r2,r17,r17
 2012b4c:	1085883a 	add	r2,r2,r2
 2012b50:	9085883a 	add	r2,r18,r2
 2012b54:	10c00017 	ldw	r3,0(r2)
 2012b58:	e0bff917 	ldw	r2,-28(fp)
 2012b5c:	180b883a 	mov	r5,r3
 2012b60:	e13ffb17 	ldw	r4,-20(fp)
 2012b64:	103ee83a 	callr	r2
 2012b68:	00000706 	br	2012b88 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 2012b6c:	8c45883a 	add	r2,r17,r17
 2012b70:	1085883a 	add	r2,r2,r2
 2012b74:	9085883a 	add	r2,r18,r2
 2012b78:	10c00017 	ldw	r3,0(r2)
 2012b7c:	e0bff917 	ldw	r2,-28(fp)
 2012b80:	1809883a 	mov	r4,r3
 2012b84:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 2012b88:	80c00117 	ldw	r3,4(r16)
 2012b8c:	e0bffa17 	ldw	r2,-24(fp)
 2012b90:	18bfb41e 	bne	r3,r2,2012a64 <__call_exitprocs+0x24>
 2012b94:	e0bff717 	ldw	r2,-36(fp)
 2012b98:	10800017 	ldw	r2,0(r2)
 2012b9c:	143fb11e 	bne	r2,r16,2012a64 <__call_exitprocs+0x24>
 2012ba0:	00000306 	br	2012bb0 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 2012ba4:	0001883a 	nop
 2012ba8:	00000106 	br	2012bb0 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 2012bac:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2012bb0:	8c7fffc4 	addi	r17,r17,-1
 2012bb4:	883fb50e 	bge	r17,zero,2012a8c <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 2012bb8:	00800034 	movhi	r2,0
 2012bbc:	10800004 	addi	r2,r2,0
 2012bc0:	10001026 	beq	r2,zero,2012c04 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 2012bc4:	80800117 	ldw	r2,4(r16)
 2012bc8:	10000a1e 	bne	r2,zero,2012bf4 <__call_exitprocs+0x1b4>
 2012bcc:	80800017 	ldw	r2,0(r16)
 2012bd0:	10000826 	beq	r2,zero,2012bf4 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 2012bd4:	80c00017 	ldw	r3,0(r16)
 2012bd8:	e0bff717 	ldw	r2,-36(fp)
 2012bdc:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 2012be0:	8009883a 	mov	r4,r16
 2012be4:	00000000 	call	0 <__alt_mem_mem_Nios_PI-0x200000>
	  p = *lastp;
 2012be8:	e0bff717 	ldw	r2,-36(fp)
 2012bec:	14000017 	ldw	r16,0(r2)
 2012bf0:	00000206 	br	2012bfc <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 2012bf4:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 2012bf8:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 2012bfc:	803f9f1e 	bne	r16,zero,2012a7c <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2012c00:	00000106 	br	2012c08 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 2012c04:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2012c08:	0001883a 	nop
 2012c0c:	e6fffd04 	addi	sp,fp,-12
 2012c10:	dfc00417 	ldw	ra,16(sp)
 2012c14:	df000317 	ldw	fp,12(sp)
 2012c18:	dc800217 	ldw	r18,8(sp)
 2012c1c:	dc400117 	ldw	r17,4(sp)
 2012c20:	dc000017 	ldw	r16,0(sp)
 2012c24:	dec00504 	addi	sp,sp,20
 2012c28:	f800283a 	ret

02012c2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2012c2c:	defffd04 	addi	sp,sp,-12
 2012c30:	df000215 	stw	fp,8(sp)
 2012c34:	df000204 	addi	fp,sp,8
 2012c38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2012c3c:	0001883a 	nop
 2012c40:	e0bfff17 	ldw	r2,-4(fp)
 2012c44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2012c48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2012c4c:	10000226 	beq	r2,zero,2012c58 <_exit+0x2c>
    ALT_SIM_FAIL();
 2012c50:	002af070 	cmpltui	zero,zero,43969
 2012c54:	00000106 	br	2012c5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2012c58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2012c5c:	003fff06 	br	2012c5c <_exit+0x30>
